WEBVTT

00:00.820 --> 00:04.820
这节课呢 我就是NPM的最后节课了

00:04.820 --> 00:06.820
NPM的东西已经介绍完了

00:06.820 --> 00:08.820
这节课咱们轻松一下

00:08.820 --> 00:10.820
我也有玩 我们来发布包

00:10.820 --> 00:12.820
就是把我们自己写的包发布出去

00:12.820 --> 00:14.820
发不到NPM上

00:14.820 --> 00:16.820
我们之前都是在NPM上用别人的包

00:16.820 --> 00:18.820
对吧 也有可能呢

00:18.820 --> 00:20.820
你们以后公司里面就是一个

00:20.820 --> 00:22.820
专门来做开源代码的公司

00:22.820 --> 00:24.820
他自己去发布了一些包

00:24.820 --> 00:26.820
让别人去使用

00:26.820 --> 00:28.820
不然的话 那么这些第三方库哪来呢

00:28.820 --> 00:30.820
对不对

00:30.820 --> 00:32.820
如果说你以后呢 去

00:32.820 --> 00:34.820
也是一个技术爱好者

00:34.820 --> 00:36.820
也想利用业余时间

00:36.820 --> 00:38.820
自己去写一些插件 写一些库

00:38.820 --> 00:40.820
发不出去 分享出去

00:40.820 --> 00:42.820
那么你就需要知道 怎么去发布包

00:42.820 --> 00:44.820
好 怎么发布包呢

00:44.820 --> 00:46.820
首先我们要做一些准备工作

00:46.820 --> 00:48.820
这个 准备工作

00:50.820 --> 00:52.820
准备工作

00:52.820 --> 00:54.820
第一个准备工作是要

00:54.820 --> 00:56.820
移除

00:56.820 --> 00:58.820
淘宝

00:58.820 --> 01:00.820
进向源

01:00.820 --> 01:02.820
啥意思呢 就是我们之前

01:02.820 --> 01:04.820
不是干了这么一件事吗

01:04.820 --> 01:06.820
我们之前不是干了这么一件事吗

01:06.820 --> 01:08.820
NPM Config Set

01:08.820 --> 01:10.820
因为我们为了安装的时候呢

01:10.820 --> 01:12.820
尽量从淘宝那边

01:12.820 --> 01:14.820
进向源那边下载

01:14.820 --> 01:16.820
所以说我们设置的淘宝进向源

01:16.820 --> 01:18.820
之前画了个图对吧

01:18.820 --> 01:20.820
我们之后下载包的时候

01:20.820 --> 01:22.820
就从淘宝那个服务器下载了

01:22.820 --> 01:24.820
就不是从官方服务器了

01:24.820 --> 01:26.820
要发布包的话那是不行的

01:26.820 --> 01:28.820
如果说你要发布包的话

01:28.820 --> 01:30.820
它是要往原地址去发布的

01:30.820 --> 01:32.820
你不能发布到淘宝那边去

01:32.820 --> 01:34.820
淘宝也不会扔你

01:34.820 --> 01:36.820
所以说你要把淘宝进向源给移除

01:36.820 --> 01:38.820
知道怎么移除吗

01:38.820 --> 01:40.820
你是不是在那个

01:40.820 --> 01:42.820
用我们商地科学的Delete

01:42.820 --> 01:44.820
以删除一个配置

01:46.820 --> 01:48.820
删除掉过后我们来测试一下

01:48.820 --> 01:50.820
Get Registry

01:50.820 --> 01:52.820
看一下这个配置是不是淘宝了

01:52.820 --> 01:54.820
它就不是淘宝了

01:54.820 --> 01:56.820
就变成了官方的进向源了

01:56.820 --> 01:58.820
NPMGS.org

01:58.820 --> 02:00.820
OK 这是我们要做的第一件

02:00.820 --> 02:02.820
准备工作

02:02.820 --> 02:04.820
移除淘宝进向源

02:04.820 --> 02:06.820
你们之后反而是包更新了

02:06.820 --> 02:08.820
要发布都得移除掉

02:08.820 --> 02:10.820
但是移除了之后你发布完了之后

02:10.820 --> 02:12.820
你可以把它改回来

02:12.820 --> 02:14.820
这是关于第一步

02:14.820 --> 02:16.820
第二步就是

02:16.820 --> 02:18.820
你需要註册

02:18.820 --> 02:20.820
到NPM官网

02:20.820 --> 02:22.820
注册一个账号

02:22.820 --> 02:24.820
并完成邮箱

02:24.820 --> 02:26.820
认证

02:26.820 --> 02:28.820
那么这里

02:28.820 --> 02:30.820
就进官网

02:30.820 --> 02:32.820
NPM

02:32.820 --> 02:34.820
进官网

02:34.820 --> 02:36.820
我这里已经有账号了

02:36.820 --> 02:38.820
我这里随便注册了一个

02:38.820 --> 02:40.820
所以我没法再注册了

02:40.820 --> 02:42.820
你们可以注册

02:42.820 --> 02:44.820
3奥斯比较容易退出

02:46.820 --> 02:48.820
刷新一下

02:48.820 --> 02:50.820
如果3UP注册

02:50.820 --> 02:52.820
这个注册很简单

02:52.820 --> 02:54.820
这是你的全名

02:54.820 --> 02:56.820
那么这里是一个Public Email

02:56.820 --> 02:58.820
可以公开的

02:58.820 --> 03:00.820
公开给别人看的

03:00.820 --> 03:02.820
那么你必须要写个公开的

03:02.820 --> 03:04.820
如果说

03:04.820 --> 03:06.820
有些私密的email

03:06.820 --> 03:08.820
不想让别人知道的话

03:08.820 --> 03:10.820
那么你最好不要用

03:10.820 --> 03:12.820
你最好申请一个可以公开的email

03:12.820 --> 03:14.820
因为到时候会在你的包的主页上

03:14.820 --> 03:16.820
显示出来

03:16.820 --> 03:18.820
你要

03:18.820 --> 03:20.820
填线上

03:20.820 --> 03:22.820
email地址

03:22.820 --> 03:24.820
然后用户名

03:24.820 --> 03:26.820
帐号密码

03:26.820 --> 03:28.820
然后这里把这个勾选上

03:28.820 --> 03:30.820
同意

03:30.820 --> 03:32.820
同意就是什么的

03:32.820 --> 03:34.820
然后创建

03:34.820 --> 03:36.820
就完了很简单

03:36.820 --> 03:38.820
注册完了之后

03:38.820 --> 03:40.820
他又会给你邮箱发一个认证

03:40.820 --> 03:42.820
根据提示进入邮箱

03:42.820 --> 03:44.820
然后点击一下认证链接

03:44.820 --> 03:46.820
邮箱认证了就完了就没了

03:46.820 --> 03:48.820
我这里已经完成注册了

03:48.820 --> 03:50.820
我就不注册了

03:50.820 --> 03:52.820
我这里直接登录吧

03:52.820 --> 03:54.820
这个小熊挺可爱的

03:54.820 --> 03:59.790
好登录

03:59.790 --> 04:01.790
你首先要做这么一件事

04:01.790 --> 04:03.790
就是完成注册

04:03.790 --> 04:05.790
好注册了过后

04:05.790 --> 04:07.790
本地还要做这么一件事

04:07.790 --> 04:09.790
本地使用

04:09.790 --> 04:11.790
NPM CLI

04:11.790 --> 04:13.790
就是NPM的命令

04:13.790 --> 04:15.790
进行登录

04:15.790 --> 04:17.790
因为你在官网注册了过后

04:17.790 --> 04:19.790
他本地不知道他是哪个账号

04:19.790 --> 04:21.790
他也不知道你是哪个账号

04:21.790 --> 04:23.790
怎么登录使用命令

04:23.790 --> 04:25.790
使用

04:25.790 --> 04:27.790
命令

04:27.790 --> 04:29.790
NPM Login

04:29.790 --> 04:31.790
就可以登录了

04:31.790 --> 04:33.790
那如果登录完成之后

04:33.790 --> 04:35.790
我们这里多说几句吧

04:35.790 --> 04:37.790
放下来

04:37.790 --> 04:39.790
使用这个命令

04:39.790 --> 04:41.790
登录

04:41.790 --> 04:43.790
如果说你要

04:43.790 --> 04:45.790
你已经登录了账号了

04:45.790 --> 04:47.790
就是使用命令

04:47.790 --> 04:49.790
NPM Who Am I

04:49.790 --> 04:51.790
我是谁

04:51.790 --> 04:53.790
查看当前

04:53.790 --> 04:55.790
登录的账号

04:55.790 --> 04:57.790
也可以使用

04:57.790 --> 04:59.790
命令

04:59.790 --> 05:01.790
NPM Logout

05:01.790 --> 05:03.790
Login Out

05:03.790 --> 05:05.790
注销

05:05.790 --> 05:07.790
就是退出登录

05:07.790 --> 05:09.790
退出登录

05:09.790 --> 05:11.790
好我们来登录一下吧

05:11.790 --> 05:13.790
NPM Login

05:13.790 --> 05:15.790
登录

05:15.790 --> 05:17.790
稍等一下

05:17.790 --> 05:19.790
那么让你输入用户名

05:19.790 --> 05:21.790
你刚刚出车的你肯定知道对吧

05:21.790 --> 05:23.790
然后密码

05:23.790 --> 05:25.790
我这里就不给大家说了

05:25.790 --> 05:27.790
然后让你输入一个

05:27.790 --> 05:29.790
公开的邮箱

05:29.790 --> 05:31.790
公开的邮箱就是

05:31.790 --> 05:33.790
我的QQ邮箱

05:33.790 --> 05:35.790
工作用的QQ邮箱

05:35.790 --> 05:37.790
QQ邮箱

05:39.790 --> 05:41.790
不用加我这个QQ

05:41.790 --> 05:43.790
我这个QQ经常不上线

05:43.790 --> 05:45.790
然后就完事了

05:45.790 --> 05:47.790
登录了我们可以查看一下

05:47.790 --> 05:49.790
NPM Who Am I

05:49.790 --> 05:51.790
我是谁

05:51.790 --> 05:53.790
这是帮帮机

05:53.790 --> 05:55.790
完事了对吧

05:55.790 --> 05:57.790
这就是登录

05:57.790 --> 05:59.790
那么目前呢

05:59.790 --> 06:01.790
准备工作了就差不多

06:01.790 --> 06:03.790
还有一个

06:03.790 --> 06:05.790
你要发布哪个包

06:05.790 --> 06:07.790
你是不是得创建工程

06:07.790 --> 06:09.790
创建工程跟目录

06:09.790 --> 06:11.790
那么这个工程跟目录呢

06:11.790 --> 06:13.790
我建议你呢就不要用什么

06:13.790 --> 06:15.790
这个中文这个目录了

06:15.790 --> 06:17.790
你自己去好好建一个工程

06:17.790 --> 06:19.790
比方说我要开发一个工程

06:19.790 --> 06:21.790
开发个啥工程呢

06:21.790 --> 06:23.790
开发

06:23.790 --> 06:25.790
因为我们的文件夹的名字呢

06:25.790 --> 06:27.790
往往就是我们工程的名字

06:27.790 --> 06:29.790
往往就是我们的包名字

06:29.790 --> 06:31.790
都是习惯也可以不一样

06:31.790 --> 06:33.790
习惯上我们往往会使用包的名字

06:33.790 --> 06:35.790
为了要用包的名字呢

06:35.790 --> 06:37.790
保持唯一

06:37.790 --> 06:39.790
所以说我们最好呢

06:39.790 --> 06:41.790
首先要给这个包想一个名字

06:41.790 --> 06:43.790
那么你最好去确定一下

06:43.790 --> 06:45.790
这个NPM上有没有这个样的包

06:45.790 --> 06:47.790
比方说我们要开发一个包名叫Rx

06:47.790 --> 06:49.790
你能开发吗

06:49.790 --> 06:51.790
肯定不行对吧

06:51.790 --> 06:53.790
已经有这个包了对不对

06:53.790 --> 06:55.790
你再想一个名字

06:55.790 --> 06:57.790
想什么名字呢

06:57.790 --> 06:59.790
我就想一个

06:59.790 --> 07:01.790
开发一个啥包呢

07:01.790 --> 07:03.790
Test123

07:03.790 --> 07:05.790
看因为这个包

07:05.790 --> 07:07.790
还有这个包

07:07.790 --> 07:09.790
Test12345

07:09.790 --> 07:11.790
因为这个包

07:11.790 --> 07:13.790
OK那么我们就用这个包

07:13.790 --> 07:15.790
Test12345

07:15.790 --> 07:17.790
那么我们这里新建一个文件夹

07:17.790 --> 07:19.790
Test12345

07:19.790 --> 07:21.790
这是我们的包

07:21.790 --> 07:23.790
接下来使用NPM

07:23.790 --> 07:25.790
Init

07:25.790 --> 07:27.790
进行初始化

07:27.790 --> 07:29.790
初始化这个目录

07:29.790 --> 07:31.790
这个大家都懂的对吧

07:31.790 --> 07:33.790
打开

07:33.790 --> 07:35.790
NPMInit

07:35.790 --> 07:37.790
一个个来

07:37.790 --> 07:39.790
首先包的名字必须是小写字母

07:39.790 --> 07:41.790
不能出现大写字母

07:41.790 --> 07:43.790
不能出现中文不能出现空格

07:43.790 --> 07:45.790
只能可以出现小写字母

07:45.790 --> 07:47.790
数字还有下滑线

07:47.790 --> 07:49.790
橫钢都可以出现

07:49.790 --> 07:51.790
但是不能用其他人拿起来的字符

07:51.790 --> 07:53.790
大家注意一下

07:53.790 --> 07:55.790
包的名字我们这里就默认用文件夹的名字

07:55.790 --> 07:57.790
就这个版本吧

07:57.790 --> 07:59.790
然后描述

07:59.790 --> 08:01.790
描述

08:01.790 --> 08:03.790
Test package

08:03.790 --> 08:05.790
随便写

08:05.790 --> 08:07.790
或者是不写也行

08:07.790 --> 08:09.790
然后入口文件就是

08:09.790 --> 08:11.790
Made入口文件

08:11.790 --> 08:13.790
Made配置

08:13.790 --> 08:15.790
那么我们这里就默认为Index吧

08:15.790 --> 08:17.790
测试命令

08:17.790 --> 08:19.790
我们的Disc Hub地址

08:19.790 --> 08:21.790
没有不写了

08:21.790 --> 08:23.790
T-word搜索关键字

08:23.790 --> 08:25.790
搜索

08:25.790 --> 08:27.790
搜索这里好好写一下

08:27.790 --> 08:29.790
搜索搜索这里你要这样的写

08:29.790 --> 08:31.790
首先你是帐号

08:31.790 --> 08:33.790
然后空格

08:33.790 --> 08:34.790
两个监控号

08:34.790 --> 08:36.790
监控号里边写上你的邮箱地址

08:36.790 --> 08:38.790
就是注册邮箱地址

08:38.790 --> 08:40.790
这是规范

08:40.790 --> 08:42.790
你不写的其实也行

08:42.790 --> 08:44.790
最好把写上

08:44.790 --> 08:46.790
好 回车

08:46.790 --> 08:48.790
Nonsense这个是什么开源协议

08:48.790 --> 08:50.790
就是我们要把它发不出去

08:50.790 --> 08:52.790
我们肯定是公开我们的元代码

08:52.790 --> 08:54.790
发不出去

08:54.790 --> 08:56.790
那别人怎么使用我们的元代码

08:56.790 --> 08:58.790
使用我们的元代码的时候

08:58.790 --> 09:00.790
应该追寻什么样的规则

09:00.790 --> 09:02.790
你不能乱来

09:02.790 --> 09:04.790
需要一些协议来约束

09:04.790 --> 09:06.790
那么这里协议有很多种

09:06.790 --> 09:08.790
我给大家看一下吧 这里有开源协议

09:08.790 --> 09:10.790
我这里有张图

09:10.790 --> 09:14.100
给大家看一下

09:14.100 --> 09:16.100
你应该选择什么样的协议

09:16.100 --> 09:18.100
其实这里面东西蛮多的

09:18.100 --> 09:20.100
平时我们作为开发者

09:20.100 --> 09:22.100
可能不是特别关注这个

09:22.100 --> 09:24.100
要做一些商用的东西

09:24.100 --> 09:26.100
肯定要必须要关注这个东西

09:26.100 --> 09:28.100
我们大概了解一下吧

09:28.100 --> 09:30.100
这里有一个就是邦尼选择了这么一个

09:30.100 --> 09:32.100
流程图

09:32.100 --> 09:34.100
你看得来吧 比如说

09:34.100 --> 09:36.100
如果说修改你的代码过后

09:36.100 --> 09:38.100
是不是也必须要开源呢

09:38.100 --> 09:40.100
就是你的代码发不出去过后

09:40.100 --> 09:42.100
别人用你的代码

09:42.100 --> 09:44.100
他可能会对你的代码进行修改

09:44.100 --> 09:46.100
修改了之后

09:46.100 --> 09:48.100
他修改了之后是不是也得开源呢

09:48.100 --> 09:50.100
那么如果说是的话怎么样

09:50.100 --> 09:52.100
是不是他的需要把钱说明呢

09:52.100 --> 09:54.100
怎么样怎么样怎么样

09:54.100 --> 09:56.100
我们一般来说的话

09:56.100 --> 09:58.100
一般选择 如果说你只关注

09:58.100 --> 10:00.100
写代码

10:00.100 --> 10:02.100
你不需想那些乱七八糟的事

10:02.100 --> 10:04.100
OK 那么你就去使用MIT

10:04.100 --> 10:06.100
这个协议就可以了

10:06.100 --> 10:08.100
或者是ISC 他们其实两者的差别不大

10:08.100 --> 10:10.100
差别不大

10:10.100 --> 10:12.100
ISC它是可以

10:12.100 --> 10:14.100
就是商用之后

10:14.100 --> 10:16.100
可以用你的名字来进行宣传

10:16.100 --> 10:18.100
就是你现在代码让别人拿去用了

10:18.100 --> 10:20.100
因为过后他觉得你的代码很好

10:20.100 --> 10:22.100
而现在你以后很有名气了

10:22.100 --> 10:24.100
那么他能不能用你的名字来进行宣传

10:24.100 --> 10:26.100
如果说不允许的话

10:26.100 --> 10:28.100
就用ISC协议或者是BSD

10:28.100 --> 10:30.100
那么如果说允许的话就用MIT

10:30.100 --> 10:32.100
总之MIT一个协议是非常非常宽松的

10:32.100 --> 10:34.100
应该说是最宽松的协议吧

10:34.100 --> 10:36.100
他就是拿出来用

10:36.100 --> 10:38.100
随便他怎么用都可以

10:38.100 --> 10:40.100
我们一般来选择MIT或者是ISC

10:40.100 --> 10:42.100
他这里摸认了给你设置的ISC

10:42.100 --> 10:44.100
可以改 可以改成别的协议

10:44.100 --> 10:46.100
那么就比方说

10:46.100 --> 10:48.100
比方说咱们用MIT吧

10:48.100 --> 10:50.100
MIT的协议用了也蛮多的

10:50.100 --> 10:52.100
好 设置完了 设置完了过后

10:52.100 --> 10:54.100
他说是不是全部OK了

10:54.100 --> 10:56.100
OK了我们就OK了

10:56.100 --> 10:58.100
没了意思吧

10:58.100 --> 11:00.100
然后既然你选择了开源协议

11:00.100 --> 11:02.100
那么你最好了

11:02.100 --> 11:04.100
我们通常情况下会在我们的工程里边

11:04.100 --> 11:06.100
加一个协议内容

11:06.100 --> 11:08.100
通常会加一个协议内容

11:08.100 --> 11:10.100
右键我们这里新建一个文件

11:10.100 --> 11:12.100
文件名固定为nicence

11:12.100 --> 11:14.100
协议的意思

11:14.100 --> 11:16.100
加上这么一个文件 没有后罪名

11:16.100 --> 11:18.100
没有后罪名 就这么一个文件

11:18.100 --> 11:20.100
那么这个文件里边写上协议内容

11:20.100 --> 11:22.100
协议内容在哪来呢

11:22.100 --> 11:24.100
大家看这下面的一个网址

11:24.100 --> 11:26.100
那么大家点进去

11:26.100 --> 11:28.100
这个网址里面

11:28.100 --> 11:30.100
他给你提供了各种各样的协议

11:30.100 --> 11:32.100
也告诉你没动协议的区别

11:32.100 --> 11:34.100
什么能不能进行商业用途

11:34.100 --> 11:36.100
怎么能进行分发修改等等等等

11:36.100 --> 11:38.100
他就有一些说明

11:38.100 --> 11:40.100
那么左边是协议

11:40.100 --> 11:42.100
还有不同的版本

11:42.100 --> 11:44.100
我们这里能聊一下就行了

11:44.100 --> 11:46.100
有很多的协议 比方说我们这里选择MIT

11:46.100 --> 11:48.100
放大一点

11:48.100 --> 11:50.100
这里我们选择MIT协议

11:50.100 --> 11:52.100
MIT我们点进去

11:52.100 --> 11:54.100
点进去这个协议

11:54.100 --> 11:56.100
那么下面就有协议内容

11:56.100 --> 11:58.100
把这个协议内容复制一下

11:58.100 --> 12:00.100
这里复制一下

12:00.100 --> 12:02.100
粘贴过来

12:02.100 --> 12:04.100
相当于是个版权说明

12:04.100 --> 12:06.100
那么这里来稍微改一下

12:06.100 --> 12:08.100
这里有个EAR

12:08.100 --> 12:10.100
EAR的有效连线

12:10.100 --> 12:12.100
比方说我们这里就写

12:12.100 --> 12:14.100
2019

12:14.100 --> 12:16.100
到

12:16.100 --> 12:18.100
2050年

12:18.100 --> 12:20.100
随便写吧 随便写

12:20.100 --> 12:22.100
后面是附货链就是你这个协议的作者是谁

12:22.100 --> 12:24.100
你这个协议就是

12:24.100 --> 12:26.100
作者是谁

12:26.100 --> 12:28.100
不是 协议的作者是谁

12:28.100 --> 12:30.100
你这个代码作者是谁

12:30.100 --> 12:32.100
那么作者是谁

12:32.100 --> 12:34.100
或者如果说你是公司的话

12:34.100 --> 12:36.100
你就写上了一个完整的公司名字

12:36.100 --> 12:38.100
完整的公司名字就完事了

12:38.100 --> 12:40.100
就完事了

12:40.100 --> 12:42.100
那么这是关于协议

12:42.100 --> 12:44.100
那么如果你把协议发布出去过后

12:44.100 --> 12:46.100
别人就必须要遵守

12:46.100 --> 12:48.100
如果他不遵守的话

12:48.100 --> 12:50.100
那么你可以去告他

12:50.100 --> 12:52.100
那么这个东西在鬼外管的蛮严格的

12:52.100 --> 12:54.100
蛮严格的 可能国内

12:54.100 --> 12:56.100
可能稍微寬鬆一点

12:56.100 --> 12:58.100
那么就写完了对吧

12:58.100 --> 13:00.100
那么接下来就是开发程序了

13:00.100 --> 13:02.100
你爱怎么开发怎么开发

13:02.100 --> 13:04.100
比方说我们就随便来吧

13:04.100 --> 13:06.100
就一个入口文件 你要开发多少个模块

13:06.100 --> 13:08.100
无所谓

13:08.100 --> 13:10.100
总之你的入口文件就是一个index的介石

13:10.100 --> 13:12.100
为什么 因为你这边没配置的是

13:12.100 --> 13:14.100
index的介石

13:14.100 --> 13:16.100
所以你的入口文件就是这个

13:16.100 --> 13:18.100
因此你在这个文件里面

13:18.100 --> 13:20.100
你希望我要导出什么东西

13:20.100 --> 13:22.100
让别人来使用

13:22.100 --> 13:24.100
比如说导出一些函数 乱七八糟的东西

13:24.100 --> 13:26.100
需要让别人来使用 你就导出就行了

13:26.100 --> 13:28.100
如果说他需要用到别的模块

13:28.100 --> 13:30.100
你自己编一下就行了

13:30.100 --> 13:32.100
如果说我们自己这个包里面

13:32.100 --> 13:34.100
比方说我们要用到一个依赖包

13:34.100 --> 13:36.100
NPMI Lodash吧

13:36.100 --> 13:38.100
Lodash

13:38.100 --> 13:42.890
好

13:42.890 --> 13:44.890
等下

13:44.890 --> 13:46.890
OK

13:46.890 --> 13:48.890
好 我们把Lodash安装起来了

13:48.890 --> 13:50.890
然后我们这里导出一个函数吧

13:52.890 --> 13:54.890
export

13:54.890 --> 13:56.890
导出一个函数 这个函数在干嘛呢

13:56.890 --> 13:58.890
你给我传一个数组

13:58.890 --> 14:00.890
我给你把这个数组的

14:00.890 --> 14:02.890
我们之前用过的吧

14:02.890 --> 14:04.890
没有的判定为force的东西

14:04.890 --> 14:06.890
给你去掉 返回一个全部判定为真的数组

14:06.890 --> 14:08.890
我们之前用过的

14:08.890 --> 14:10.890
首先我们导入requireLodash

14:10.890 --> 14:12.890
我们就测试一下吧

14:12.890 --> 14:14.890
测试一下 得了

14:14.890 --> 14:16.890
那么这里我们就返回

14:16.890 --> 14:18.890
Compact

14:18.890 --> 14:20.890
Compact

14:20.890 --> 14:22.890
就是把它重新用一下

14:22.890 --> 14:24.890
给你返回

14:24.890 --> 14:26.890
就测试一下

14:26.890 --> 14:28.890
就完事了

14:28.890 --> 14:30.890
一样的意思吧

14:30.890 --> 14:32.890
包了就开发好了

14:32.890 --> 14:34.890
开发好了过后怎么办呢

14:34.890 --> 14:36.890
开发好了 看一下

14:36.890 --> 14:38.890
我们在这里笔记里面继续写

14:38.890 --> 14:40.890
接下来的就是发布

14:42.890 --> 14:44.890
确定版本

14:44.890 --> 14:46.890
就是开发

14:46.890 --> 14:48.890
首先是开发

14:48.890 --> 14:50.890
开发完过后确定版本

14:50.890 --> 14:52.890
开发完了过后

14:52.890 --> 14:54.890
因为它可以不断的迭代

14:54.890 --> 14:56.890
不停的发布的

14:56.890 --> 14:58.890
不是说发布一次就完了

14:58.890 --> 15:00.890
总之你要开发

15:00.890 --> 15:02.890
开发完了过后你确定一下版本号

15:02.890 --> 15:04.890
比如说我们这里版本号已经是1.0.0了

15:04.890 --> 15:06.890
如果说以后升级到过后

15:06.890 --> 15:08.890
你可以改这个版本号 你继续改

15:08.890 --> 15:10.890
完了过后使用命令

15:10.890 --> 15:12.890
使用

15:12.890 --> 15:14.890
使用命令

15:14.890 --> 15:16.890
哪个命令呢

15:16.890 --> 15:18.890
npm publish

15:18.890 --> 15:20.890
完成发布

15:20.890 --> 15:22.890
就完事了 以后每次发布的都是这样子

15:22.890 --> 15:24.890
开发然后确定版本 然后发布就完事了

15:24.890 --> 15:26.890
好 来吧 我们来发布一下

15:26.890 --> 15:28.890
当然 一个命令行

15:28.890 --> 15:30.890
一定要在这个文件下

15:30.890 --> 15:32.890
npm publish

15:36.890 --> 15:38.890
稍等一下 包错了

15:38.890 --> 15:40.890
他说什么

15:42.890 --> 15:44.890
包的名字不行

15:44.890 --> 15:46.890
包的名字

15:46.890 --> 15:48.890
跟已经存在的包的名字

15:48.890 --> 15:50.890
太香了

15:50.890 --> 15:52.890
它太香了

15:52.890 --> 15:54.890
就是有些包的名字

15:54.890 --> 15:56.890
他说他建议你怎么办呢

15:56.890 --> 15:58.890
这个地方我给大家说一下

15:58.890 --> 16:00.890
他建议怎么办呢

16:00.890 --> 16:02.890
建议你加上命名空间

16:02.890 --> 16:03.890
什么命名空间呢

16:03.890 --> 16:05.890
就是你把作者的名字写前面

16:05.890 --> 16:06.890
加上那个鞋杠

16:06.890 --> 16:07.890
这样子呢

16:07.890 --> 16:09.890
因为我们现在NPM上面

16:09.890 --> 16:11.890
包含很小的名字

16:11.890 --> 16:13.890
就像我刚才看到的那个包

16:13.890 --> 16:15.890
就像我刚才看到的那个包

16:15.890 --> 16:17.890
就像我刚才看到的那个包

16:17.890 --> 16:19.890
就像我刚才看到的那个包

16:19.890 --> 16:21.890
就像我刚才看到的那个包

16:21.890 --> 16:23.890
就像我刚才看到的那个包

16:23.890 --> 16:25.890
NPM上面包很多很多了

16:25.890 --> 16:26.890
它不像一开始的包

16:26.890 --> 16:27.890
只用那么一点点

16:27.890 --> 16:28.890
现在包很多很多

16:28.890 --> 16:30.890
就经常导致着名字相似

16:30.890 --> 16:31.890
从名

16:31.890 --> 16:33.890
所以说NPM他想了个办法

16:33.890 --> 16:35.890
他就说给你加上个命名空间

16:35.890 --> 16:37.890
前面加上作者的名字

16:37.890 --> 16:39.890
或者是一个特殊的名字

16:39.890 --> 16:40.890
那么你的包呢

16:40.890 --> 16:41.890
全部在这个名字之下

16:41.890 --> 16:42.890
那么这样子呢

16:42.890 --> 16:44.890
就不容易别人看到

16:44.890 --> 16:45.890
这个包是这个人发布的

16:45.890 --> 16:47.890
他一下子就明白了

16:47.890 --> 16:48.890
这个包是不是我想要的了

16:48.890 --> 16:50.890
他建议你这么来做

16:50.890 --> 16:52.890
以后你安装包的时候

16:52.890 --> 16:53.890
还要写全称

16:53.890 --> 16:54.890
也要这样子写

16:54.890 --> 16:55.890
它包的名字

16:55.890 --> 16:56.890
这就是整个包的名字

16:56.890 --> 16:57.890
整个包的名字

16:57.890 --> 16:58.890
前面给上一个Aeta

16:58.890 --> 16:59.890
然后这个东西

16:59.890 --> 17:00.890
然后一个写杠

17:00.890 --> 17:01.890
他建议你这样做

17:01.890 --> 17:02.890
包括你们之后呢

17:02.890 --> 17:03.890
学到5u的一块

17:03.890 --> 17:05.890
你会发现5u他也是这样做的

17:05.890 --> 17:07.890
他也是这样做的

17:07.890 --> 17:10.890
因为他5u2.0要跟那个5u

17:10.890 --> 17:11.890
5u以前的1.0

17:11.890 --> 17:13.890
要跟5u2

17:13.890 --> 17:15.890
要就是

17:15.890 --> 17:17.890
是那个5uCLI

17:17.890 --> 17:19.890
5uCLI他要跟那个就是

17:19.890 --> 17:21.890
2.0版本和3.0版本

17:21.890 --> 17:22.890
并存并存

17:22.890 --> 17:24.890
所以说他就用这种方式来做的

17:24.890 --> 17:25.890
总之你可以这样做

17:25.890 --> 17:27.890
也可以换一个包的名字都行

17:27.890 --> 17:29.890
比如说我们换个包的名字也行

17:29.890 --> 17:30.890
换个包的名字

17:30.890 --> 17:32.890
比如说我们这里

17:32.890 --> 17:34.890
ABCD1234

17:34.890 --> 17:37.890
这都不会重明了吧

17:37.890 --> 17:42.220
发不出去

17:42.220 --> 17:43.220
只要名字一次搞定了

17:43.220 --> 17:46.220
以后就不用去改名字了

17:46.220 --> 17:48.220
发布完成了

17:48.220 --> 17:49.220
那么现在呢

17:49.220 --> 17:50.220
我们可以在mcm上

17:50.220 --> 17:52.220
能够收到我们的包了

17:52.220 --> 17:53.220
复制一下

17:53.220 --> 17:55.220
我们这里搜索

17:55.220 --> 17:58.920
他可能要等一会

17:58.920 --> 17:59.920
可能要等一会

17:59.920 --> 18:03.490
出来了

18:03.490 --> 18:04.490
你看

18:04.490 --> 18:06.490
是不是出来了

18:06.490 --> 18:08.490
你看他说什么了

18:08.490 --> 18:09.490
他是我的协议是啥

18:09.490 --> 18:10.490
版本是啥对吧

18:10.490 --> 18:12.490
一共有多少这个东西

18:12.490 --> 18:14.490
还有什么一代关系对不对

18:14.490 --> 18:15.490
一代楼干系对不对

18:15.490 --> 18:16.490
他就出来了

18:16.490 --> 18:17.490
面对什么

18:17.490 --> 18:20.490
如果说你要有说明文件的话

18:20.490 --> 18:22.490
他这里找不到说明文件

18:22.490 --> 18:24.490
如果说你要有说明文件的话

18:24.490 --> 18:25.490
那么这里呢

18:25.490 --> 18:27.490
我们可以建立一个说明文件

18:27.490 --> 18:30.490
read.md

18:30.490 --> 18:31.490
这是个

18:31.490 --> 18:33.490
这是一个

18:33.490 --> 18:35.490
这是马克档的说明文件

18:35.490 --> 18:37.490
表情

18:37.490 --> 18:39.490
说明文档

18:39.490 --> 18:41.490
啥也没有

18:41.490 --> 18:43.490
我们来重新发布一次

18:43.490 --> 18:45.490
更改一下版本号

18:45.490 --> 18:46.490
每次发布要改

18:46.490 --> 18:47.490
版本号要改

18:47.490 --> 18:49.490
1

18:49.490 --> 18:51.490
npm public

18:51.490 --> 18:52.490
再来发布一次

18:52.490 --> 18:58.740
我会把整个包的内容发布上去

18:58.740 --> 18:59.740
发布成功了

18:59.740 --> 19:00.740
我们这里刷新

19:00.740 --> 19:01.740
你看

19:01.740 --> 19:03.740
是不是有个说明文档了

19:03.740 --> 19:04.740
就这么简单

19:04.740 --> 19:05.740
就这么简单

19:05.740 --> 19:07.740
然后我们可以在我们的账号里面

19:07.740 --> 19:08.740
看到package

19:08.740 --> 19:09.740
你看

19:09.740 --> 19:10.740
是不是有我们的包了

19:10.740 --> 19:11.740
对吧

19:11.740 --> 19:12.740
我们发布的包

19:12.740 --> 19:13.740
对不对

19:13.740 --> 19:14.740
OK

19:14.740 --> 19:15.740
发布完了之后

19:15.740 --> 19:16.740
我们来用一下

19:16.740 --> 19:17.740
试一下

19:17.740 --> 19:19.740
咱们右键新键文件夹

19:19.740 --> 19:20.740
耳扒着

19:20.740 --> 19:21.740
我们另外一个包

19:21.740 --> 19:22.740
另外一个包

19:22.740 --> 19:24.740
用我们刚才开发的包

19:24.740 --> 19:25.740
看一下

19:25.740 --> 19:26.740
怎么来用

19:26.740 --> 19:29.250
这里

19:29.250 --> 19:31.250
我们首先对这个包进行出示化

19:31.250 --> 19:33.690
init

19:33.690 --> 19:34.690
这个包我们不发布的

19:34.690 --> 19:36.690
随便写了

19:36.690 --> 19:37.690
然后我们可以安装

19:37.690 --> 19:38.690
npm

19:38.690 --> 19:39.690
什么

19:39.690 --> 19:40.690
我们自己的包

19:40.690 --> 19:41.690
自己的包的叫啥名字

19:41.690 --> 19:42.690
叫这个玩意

19:42.690 --> 19:43.690
复制一下

19:43.690 --> 19:44.690
你看

19:44.690 --> 19:45.690
我们现在是不是可以在npm上去

19:45.690 --> 19:46.690
安装我们自己的写的包

19:46.690 --> 19:47.690
对不对

19:48.690 --> 19:49.690
稍等一下

19:51.690 --> 19:52.690
安装下来了

19:52.690 --> 19:53.690
安装下来了

19:53.690 --> 19:54.690
接下来我们来用一下

19:54.690 --> 19:55.690
看能不能用

19:55.690 --> 19:56.690
激动人心

19:57.690 --> 19:59.690
然后我们这里require

19:59.690 --> 20:00.690
require

20:00.690 --> 20:01.690
闻了包的名字叫啥

20:01.690 --> 20:02.690
ts

20:02.690 --> 20:03.690
就是这个玩意

20:03.690 --> 20:04.690
它导出了是不是一个函数

20:04.690 --> 20:05.690
一个函数

20:05.690 --> 20:06.690
管它是啥

20:06.690 --> 20:07.690
总之是个函数

20:07.690 --> 20:08.690
这个函数

20:08.690 --> 20:09.690
给它一个数组

20:09.690 --> 20:10.690
0

20:10.690 --> 20:11.690
force

20:11.690 --> 20:12.690
控制不错

20:12.690 --> 20:13.690
随便写

20:13.690 --> 20:14.690
然后

20:14.690 --> 20:16.690
返回的一个新数组

20:16.690 --> 20:18.690
nu

20:18.690 --> 20:19.690
输出

20:19.690 --> 20:20.690
nu

20:20.690 --> 20:21.690
看一下能不能生效

20:21.690 --> 20:22.690
功能能不能生效

20:22.690 --> 20:23.690
肯定是能生效的

20:23.690 --> 20:24.690
没什么好说的

20:24.690 --> 20:25.690
index

20:26.690 --> 20:27.690
你看是不是能生效

20:27.690 --> 20:28.690
对吧

20:28.690 --> 20:29.690
那么我们的包是不是就

20:29.690 --> 20:30.690
发不出去了

20:30.690 --> 20:31.690
不仅你可以使用

20:31.690 --> 20:32.690
别人是不是也可以下的这个包

20:32.690 --> 20:33.690
对不对

20:33.690 --> 20:34.690
哪里就去

20:34.690 --> 20:35.690
如果说你希望宣传一下的话

20:35.690 --> 20:36.690
你就去论坛

20:36.690 --> 20:37.690
什么知乎

20:37.690 --> 20:38.690
什么社区

20:38.690 --> 20:39.690
去宣传

20:39.690 --> 20:40.690
对不对

20:40.690 --> 20:41.690
让他们去下的这个包

20:41.690 --> 20:42.690
你不用给他们官方地址

20:42.690 --> 20:43.690
你只需要把包名

20:43.690 --> 20:44.690
告诉他们就行了

20:44.690 --> 20:45.690
然后他们就

20:45.690 --> 20:46.690
从npm上就可以下载了

20:46.690 --> 20:47.690
就这么回事

20:47.690 --> 20:48.690
就是发布包

20:48.690 --> 20:49.690
那就演示完了

20:49.690 --> 20:50.690
演示完了过后

20:50.690 --> 20:51.690
大家不要忘记了

20:51.690 --> 20:52.690
你得把这个玩意

20:52.690 --> 20:53.690
给我改回来

20:53.690 --> 20:54.690
因为这个东西

20:54.690 --> 20:55.690
就是我们玩一玩

20:55.690 --> 20:56.690
这个什么

20:56.690 --> 20:57.690
淘宝竞响员

20:57.690 --> 20:58.690
给我改回来

20:58.690 --> 20:59.690
改回来

20:59.690 --> 21:00.690
我们看一下

21:00.690 --> 21:02.690
之前那个淘宝竞响员

21:02.690 --> 21:03.690
在这

21:04.690 --> 21:05.690
把这个复制一下

21:05.690 --> 21:06.690
这个名字

21:06.690 --> 21:10.020
改回来

21:10.020 --> 21:11.020
看一下

21:11.020 --> 21:12.020
测试一下

21:12.020 --> 21:14.020
npm.conf.giz

21:14.020 --> 21:16.460
register

21:16.460 --> 21:17.460
OK 改回来了

21:17.460 --> 21:18.460
那其他就没啥了

21:18.460 --> 21:19.460
然后呢

21:19.460 --> 21:20.460
没啥事的话

21:20.460 --> 21:22.460
你把登录注销呗

21:22.460 --> 21:24.460
npm.lockout注销呗

21:24.460 --> 21:25.460
没啥事的话

21:25.460 --> 21:26.460
就注销

21:27.460 --> 21:30.220
什么

21:30.220 --> 21:32.220
它目前还没有什么

21:32.220 --> 21:33.220
还没有就是

21:33.220 --> 21:34.220
没有登录

21:34.220 --> 21:35.220
目前没有登录

21:35.220 --> 21:36.220
明白了

21:36.220 --> 21:38.220
我把原给它改了

21:38.220 --> 21:40.220
好 那么就玩事了

21:40.220 --> 21:41.220
就玩事了

21:41.220 --> 21:43.220
那么这就是包的那个

21:43.220 --> 21:44.220
就是

21:44.220 --> 21:46.220
包的那个就是发布

21:46.220 --> 21:47.220
那么至此呢

21:47.220 --> 21:48.220
npm就全部讲完了

21:48.220 --> 21:49.220
全部讲完了

21:49.220 --> 21:51.220
那么后边来我们讲啥呢

21:51.220 --> 21:52.220
后边来我们就讲一些

21:52.220 --> 21:54.220
其他的保管力器

21:54.220 --> 21:56.220
保管力器不是只有npm一种

21:56.220 --> 21:57.220
npm应该算是

21:57.220 --> 21:58.220
比主

21:58.220 --> 21:59.220
保管力器

21:59.220 --> 22:01.220
就是前端的保管力器的比主

22:01.220 --> 22:02.220
后边呢

22:02.220 --> 22:03.220
它其实也有自己的一些缺陷

22:03.220 --> 22:05.220
后边我们讲了一些

22:05.220 --> 22:06.220
保管力器呢

22:06.220 --> 22:07.220
特别是那个压

22:07.220 --> 22:10.220
它其实就是在npm基础上

22:10.220 --> 22:11.220
改进了很多东西

22:11.220 --> 22:13.220
压也是一个非常非常

22:13.220 --> 22:14.220
常见的保管力器

22:14.220 --> 22:15.220
我们下一张呢

22:15.220 --> 22:16.220
再进行讲解

22:16.220 --> 22:18.220
它也非常非常简单

22:18.220 --> 22:20.220
OK 那么这一张就到这里了

