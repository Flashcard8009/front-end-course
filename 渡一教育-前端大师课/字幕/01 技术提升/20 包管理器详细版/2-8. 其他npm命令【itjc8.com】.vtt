WEBVTT

00:00.880 --> 00:04.440
我们的NPM命令呢 基本上就快讲完了

00:04.440 --> 00:06.880
其实你回顾一下也没多少对吧

00:06.880 --> 00:09.480
就一个安装 最主要的就是安装了

00:09.480 --> 00:11.880
然后一个包配置

00:11.880 --> 00:14.280
Package.json 这个文件的配置

00:14.280 --> 00:15.880
其他的也就没啥了

00:15.880 --> 00:19.680
那么最后几节课呢 就是关于NPM这一块

00:19.680 --> 00:21.280
最后几节课呢 我讲一讲

00:21.280 --> 00:23.680
首先讲一讲NPM的其他命令

00:23.680 --> 00:27.280
其实NPM这个东西里面的命令呢 特别特别多

00:27.280 --> 00:28.880
其实我们平时用不到而已

00:29.480 --> 00:32.080
有一些可能有一些不太常见的命令呢

00:32.080 --> 00:36.280
有的时候呢 我们可能有那么一点点几率会遇到

00:36.280 --> 00:37.880
所以我把它拿出来说一下

00:37.880 --> 00:39.680
那么如果说我还没有讲到的

00:39.680 --> 00:43.880
它其实真的是没有 就是用的场景的

00:43.880 --> 00:46.480
我们目前是确实没有用的场景的

00:46.480 --> 00:49.280
一个个来吧 首先是安装 安装这一块

00:49.280 --> 00:51.480
安装这一块 我其实我们已经说的差不多了

00:51.480 --> 00:52.980
最后再说两个

00:52.980 --> 00:55.580
一个是呢 我们安装的时候呢

00:55.580 --> 00:56.980
它其实它会给你生存

00:57.080 --> 01:00.180
就是我们这里不是有这么一个文件吗

01:00.180 --> 01:01.380
这么一个包配置文件

01:03.380 --> 01:03.980
这样子吧

01:05.280 --> 01:06.880
NPM INIT

01:08.580 --> 01:10.580
然后包的名字 包的名字随便写吧

01:10.580 --> 01:13.480
Chapter 2 全部随便写

01:13.480 --> 01:15.180
OK 好 生存出来了

01:15.180 --> 01:15.980
大家看一下啊

01:17.880 --> 01:20.380
我怎么把这个地方没汇策啊

01:20.380 --> 01:22.380
它生存出来之后呢 我们再重新来

01:23.780 --> 01:25.580
再重新来Chapter 2

01:28.720 --> 01:30.020
生存出来之后呢 你看一下

01:30.020 --> 01:31.320
它生存的最终的配置呢

01:31.320 --> 01:32.920
它里边这个

01:33.720 --> 01:34.920
现在还没安装 对吧

01:34.920 --> 01:35.920
现在还没安装

01:35.920 --> 01:39.320
就是说如果说我们安装了一个包之后呢

01:39.320 --> 01:40.920
如果说我们安装了一个包之后呢

01:40.920 --> 01:43.720
你会发现了它安装的就是依赖里边呢

01:43.720 --> 01:45.120
它有这么一个东西 对吧

01:45.120 --> 01:47.720
这是什么 赤版本依赖 对吧

01:47.720 --> 01:50.920
它赤版本和修订版本

01:50.920 --> 01:52.920
就是一个补定版本是可以变化的

01:52.920 --> 01:55.420
就这两个版本是可以变化的

01:55.420 --> 01:57.120
因此这是它默认的方式

01:57.120 --> 01:59.820
那如果说你要安装一个包的时候呢

01:59.820 --> 02:02.220
如果说你希望精确的一代这个版本

02:02.220 --> 02:04.620
而不是模糊的一代

02:04.620 --> 02:05.520
那么怎么办呢

02:05.520 --> 02:08.020
最简单的办法就是直接把它去掉就完事了

02:08.020 --> 02:10.020
在这里边把杀人那就完事了

02:10.020 --> 02:12.120
如果说你希望在安装的时候呢

02:12.120 --> 02:14.520
就把这个东西去掉了怎么办呢

02:14.520 --> 02:15.520
就可以使用这个

02:15.520 --> 02:16.720
这个东西有啥意义呢

02:16.720 --> 02:17.620
没多少意义啊

02:17.620 --> 02:18.820
就是你安装一个包的时候呢

02:18.820 --> 02:20.320
你可以这样子

02:20.320 --> 02:21.720
加上一个参数啊

02:21.720 --> 02:23.120
两个横杆save exact

02:23.120 --> 02:24.720
exact表示精确的意思

02:24.720 --> 02:26.520
或者是一个横杆大写的意

02:26.520 --> 02:28.320
那么后边跟上包迷就完事了

02:28.320 --> 02:29.220
那么这样子安装了

02:29.220 --> 02:30.820
它就会安装一个精确的版本

02:30.820 --> 02:32.520
比方说我们这里安装一个

02:32.520 --> 02:34.020
截夸锐

02:34.020 --> 02:35.820
哎截夸锐

02:35.820 --> 02:37.720
那么它就会安装截夸锐的去新版的吧

02:37.720 --> 02:39.020
那么我们加上一个参数啊

02:39.020 --> 02:40.320
这个参数其实写前边写

02:40.320 --> 02:41.820
后边都无所谓的

02:41.820 --> 02:43.720
加上一个参数亿

02:43.720 --> 02:44.720
回彻安装

02:46.120 --> 02:47.220
好安装完成

02:47.220 --> 02:47.920
安装完成之后呢

02:47.920 --> 02:49.220
我们看一下这个pack里面接上

02:51.520 --> 02:52.520
看一下这边啊

02:52.520 --> 02:53.920
那么这边是不是精确的版本

02:53.920 --> 02:54.920
对吧就这么个意思

02:54.920 --> 02:56.020
就这么个意思

02:56.120 --> 02:57.120
这是关于这一块

02:59.820 --> 03:00.520
好再来啊

03:00.520 --> 03:01.020
再来

03:01.420 --> 03:01.820
接下来呢

03:01.820 --> 03:02.620
我们介绍了这个

03:02.620 --> 03:03.720
这个这个有的时候呢

03:03.720 --> 03:05.220
还有一点点用啊

03:05.220 --> 03:06.520
就是说我们有的时候呢

03:06.520 --> 03:07.620
可能安装一个包

03:07.620 --> 03:09.320
我不希望安装它的最新版啊

03:09.320 --> 03:11.020
现在我们目前的都是安装最新版

03:11.020 --> 03:11.520
对吧

03:11.520 --> 03:12.920
那如果说我想安装一个包呢

03:12.920 --> 03:14.420
如果不想安装最新版

03:15.820 --> 03:17.820
有的时候可能有那么一点点用啊

03:17.820 --> 03:19.220
就是我就要用它老版本

03:19.220 --> 03:20.320
老版本里边有些片

03:20.320 --> 03:21.420
我可能用熟了啊

03:21.420 --> 03:22.520
不想用它最新版

03:22.520 --> 03:24.520
那么可以跟上一个ata

03:24.620 --> 03:26.820
后面跟上一个就是版本号

03:26.820 --> 03:29.220
这样子呢就可以安装一个指定版本的包

03:29.220 --> 03:31.320
比方说去个例子啊

03:31.320 --> 03:33.020
这里呢我们np明去查找一下

03:34.820 --> 03:36.120
就比方说lodash吧

03:36.120 --> 03:37.020
就能lodash

03:38.120 --> 03:39.820
lodash进去啊

03:39.820 --> 03:40.520
这里个version

03:40.520 --> 03:42.220
看一下lodash有哪些版本

03:42.220 --> 03:44.020
咱们找一找找一找

03:44.020 --> 03:45.020
我们比方说啊

03:45.020 --> 03:47.020
就安装这个啊

03:47.620 --> 03:48.720
2.1.0啊

03:48.720 --> 03:50.320
就安装这个2.1.0

03:50.320 --> 03:51.720
我们要安装这个版本

03:51.720 --> 03:52.920
行来吧

03:52.920 --> 03:54.120
咱们复制一下啊

03:54.120 --> 03:55.120
复制一下到这边来

03:55.120 --> 03:57.120
我们就是用npmi

03:57.120 --> 03:58.620
然后呢lodash

03:58.620 --> 04:00.120
后面跟上一个ata

04:00.120 --> 04:02.120
然后2.1.0

04:02.120 --> 04:03.120
啊回车

04:04.120 --> 04:04.820
那么这样子呢

04:04.820 --> 04:07.020
它就会安装你指定版本的包

04:07.020 --> 04:08.120
好看一下这个

04:08.120 --> 04:09.120
这个配件结设

04:10.820 --> 04:11.620
好看一下啊

04:13.220 --> 04:14.320
那么它这里看

04:14.320 --> 04:15.620
它生成出来就这个样子啊

04:15.620 --> 04:17.320
它安装出来就2.1.0

04:17.320 --> 04:18.620
那么我们可以在这里边

04:18.620 --> 04:20.820
lodmarchus目楼下面看到个lodash

04:20.820 --> 04:22.420
看个lodash的版本啊

04:22.420 --> 04:24.620
这个它里边有一个配置文件啊

04:24.620 --> 04:25.520
进去看一下

04:25.520 --> 04:26.520
你看它的version

04:26.520 --> 04:28.220
是不是就是2.1.0

04:28.220 --> 04:29.120
对吧

04:29.120 --> 04:31.420
所以说可以安装指定版本的包

04:31.420 --> 04:32.920
就这么个意思

04:32.920 --> 04:35.820
好这是关于安装这一块啊

04:35.820 --> 04:36.720
接下来看查询

04:38.220 --> 04:39.520
查询呢就是主要是

04:39.520 --> 04:41.820
我们有的时候要查询一些关键信息

04:41.820 --> 04:44.720
比方说我们要查包的安装路径

04:44.720 --> 04:45.220
啊

04:45.220 --> 04:46.120
那么看一下这个命令

04:46.120 --> 04:48.420
你们你们你们要学会看这个

04:48.420 --> 04:49.620
这个命令的格式啊

04:49.620 --> 04:52.420
就是说我们如果说是用npmroute

04:52.420 --> 04:54.320
那么可以用后面跟他的中扩号

04:54.320 --> 04:54.920
什么意思呢

04:54.920 --> 04:56.020
表示可选的

04:56.020 --> 04:57.720
这个参数是可选的

04:57.720 --> 04:58.920
加上的刚刚计呢

04:58.920 --> 05:00.720
表示的是查看的是什么呢

05:00.720 --> 05:03.220
查看的是全局的安装路径啊

05:03.220 --> 05:05.120
加上不跟不跟上这个

05:05.120 --> 05:05.720
横桿计呢

05:05.720 --> 05:07.820
表示当前的安装路径

05:07.820 --> 05:08.420
什么意思呢

05:08.420 --> 05:09.120
我们来看一下吧

05:10.220 --> 05:11.820
好这里打开这个

05:14.730 --> 05:15.830
npmroute

05:15.830 --> 05:17.330
如果我不跟横桿计

05:17.330 --> 05:17.830
你看一下

05:17.830 --> 05:19.230
是不是看当前

05:19.230 --> 05:20.730
我们安装的时候安装到哪了

05:21.830 --> 05:22.230
对吧

05:22.230 --> 05:23.630
那么这个东西有啥好看的呢

05:23.630 --> 05:24.530
没啥好看的

05:24.530 --> 05:26.130
我们通常要使用这个命令的话

05:26.130 --> 05:28.130
一般是看一下全局的目录在哪

05:28.130 --> 05:30.530
在哪npmroute横桿计

05:31.530 --> 05:31.730
好

05:31.730 --> 05:32.330
你会发现呢

05:32.330 --> 05:33.930
我这里的全局目录在这

05:33.930 --> 05:34.730
啊

05:34.730 --> 05:35.730
复制

05:35.730 --> 05:36.830
随便找个地方吧

05:36.830 --> 05:37.630
啊

05:37.630 --> 05:38.330
粘贴一下

05:39.330 --> 05:40.130
现在没有对吧

05:40.130 --> 05:41.330
因为我们现在目前呢

05:41.330 --> 05:43.530
是没有安装全局包的啊

05:43.530 --> 05:44.830
目前是没有安装全局包的

05:44.830 --> 05:45.730
所以说这个目录下面呢

05:45.730 --> 05:47.830
是没有这个loadmarch 90目录啊

05:47.830 --> 05:48.230
但是呢

05:48.230 --> 05:49.530
如果说安装全局包

05:49.530 --> 05:51.330
他就会安装到这个目录下面

05:52.130 --> 05:53.030
原来的意思吧

05:53.030 --> 05:53.430
ok啊

05:54.930 --> 05:55.230
然后呢

05:55.230 --> 05:58.230
第二个是可以查看包的信息

05:58.230 --> 05:59.230
啊查看包的信息

06:00.730 --> 06:01.830
那么使用什么命令呢

06:01.830 --> 06:03.330
就是npm view啊

06:03.330 --> 06:04.230
这这里呢

06:04.230 --> 06:05.830
我刚才还忘了

06:05.830 --> 06:06.930
啊在这里啊

06:06.930 --> 06:08.430
这里一个就是下面一个注释啊

06:08.430 --> 06:10.430
叫view aliases

06:10.430 --> 06:10.930
什么意思呢

06:10.930 --> 06:12.130
就是表示了别名

06:12.130 --> 06:13.430
就是这个命令他有别名

06:13.430 --> 06:14.530
有别的名字

06:14.530 --> 06:15.630
使用v

06:15.630 --> 06:16.630
在这里可以

06:16.630 --> 06:18.430
使用info也可以

06:18.430 --> 06:19.630
使用秀也可以

06:19.630 --> 06:21.030
都是完全一样的意思啊

06:21.030 --> 06:22.530
他有别名啊

06:22.530 --> 06:23.630
那么就是npm view

06:23.630 --> 06:24.930
后面呢跟他那包名

06:24.930 --> 06:26.630
那么就可以查看一个包的信息

06:26.630 --> 06:27.430
比方说啊

06:27.430 --> 06:29.530
咱们的npm view

06:29.530 --> 06:30.330
那么这个呢

06:30.330 --> 06:32.330
他不是说你安装了包啊

06:32.330 --> 06:33.530
任何包都可以

06:33.530 --> 06:35.530
比方说我们刚才安装了什么

06:35.530 --> 06:36.930
安装这个楼下写对吧

06:36.930 --> 06:38.530
然后我们查看别的包吧

06:38.530 --> 06:39.830
我们查看一下react

06:40.630 --> 06:42.130
react我们以后要学习的啊

06:42.130 --> 06:43.830
看一下这个包啊回车

06:45.430 --> 06:47.230
看一下他得到的什么

06:47.230 --> 06:50.130
他就把这个包的信息给你显示出来了啊

06:50.130 --> 06:50.730
react呢

06:50.730 --> 06:53.630
目前的版本呢是16.12.0

06:53.630 --> 06:55.630
他的协议是mit

06:55.630 --> 06:57.430
他有三个依赖

06:57.430 --> 06:58.130
目前呢

06:58.130 --> 07:01.230
他总共的版本有247个版本啊

07:01.230 --> 07:02.130
这是这是什么

07:02.130 --> 07:03.230
他的官方网站对吧

07:03.230 --> 07:04.230
哎等等等等

07:04.230 --> 07:05.630
他有一些信息啊

07:05.630 --> 07:06.430
就这么个意思

07:07.230 --> 07:10.030
这样子可以查询一个包的信息啊

07:10.030 --> 07:11.730
把它显示出来啊

07:11.730 --> 07:13.030
就这么个意思

07:13.030 --> 07:14.230
那么这个这个命令呢

07:14.230 --> 07:16.230
他后面还可以跟上一个指信息

07:16.230 --> 07:16.930
什么意思呢

07:16.930 --> 07:17.830
什么叫指信息呢

07:17.830 --> 07:18.630
你看一下前面的

07:19.630 --> 07:21.530
什么叫指信息呢

07:21.530 --> 07:22.530
就说我们

07:22.530 --> 07:24.330
他这个信息哪来的

07:24.330 --> 07:28.330
他个信息其实就是从他的package.json的文件里面来的

07:28.330 --> 07:31.530
那么比如说我要查看他的包的名字啊

07:31.530 --> 07:32.830
我们可以是这样的

07:32.830 --> 07:34.130
npn view也可以啊

07:34.130 --> 07:34.930
v也可以啊

07:34.930 --> 07:36.130
info or show也可以

07:36.130 --> 07:37.130
比方说show啊

07:37.130 --> 07:38.530
那么react

07:38.530 --> 07:40.630
我们后面可以跟上name

07:40.630 --> 07:41.130
你看一下

07:42.630 --> 07:44.130
这样子他就会把这个

07:44.130 --> 07:48.530
他的就是package.json文件里面的name那个字段拿出来

07:49.030 --> 07:50.030
看他的指信息

07:50.030 --> 07:52.030
比方说我们再可以跟上这个

07:52.030 --> 07:52.630
versions

07:53.830 --> 07:57.530
表示他有所有的什么呢

07:57.530 --> 07:59.530
所有的版本啊

07:59.530 --> 07:59.830
回车

08:01.130 --> 08:02.830
你看是不是可以看到他所有的版本

08:02.830 --> 08:03.830
对吧

08:03.830 --> 08:08.130
大家可以看到有些版本号后边的还跟了一些东西啊

08:08.130 --> 08:10.230
有些版本号后边还跟了一些东西

08:10.230 --> 08:11.830
那么这个跟了这个东西呢

08:11.830 --> 08:14.730
我们把它称之为那个就是类型啊

08:14.730 --> 08:16.130
这个版本的类型啊

08:16.130 --> 08:20.130
比方说rc就是已经已经是一个非常成熟的版本的

08:20.130 --> 08:22.630
什么alpha beta呀都是不太成熟的啊

08:22.630 --> 08:24.130
可能有一些缺陷

08:24.130 --> 08:25.030
那么到了rc呢

08:25.030 --> 08:26.930
就就表示比较成熟了

08:26.930 --> 08:28.630
如果说后边没有跟的话

08:28.630 --> 08:29.630
如果后边没有跟的话

08:29.630 --> 08:30.730
就表示是发布版

08:30.730 --> 08:33.030
就已经是最成熟的了啊

08:33.030 --> 08:35.330
所以平时大家安装包的时候呢

08:35.330 --> 08:37.430
要知道这么一个常识啊

08:37.430 --> 08:40.830
我们最最低要求除非你是为了玩一玩啊

08:40.830 --> 08:41.930
去体验一下

08:41.930 --> 08:44.130
否则的话在真实开发项目的时候

08:44.130 --> 08:46.630
一定要安装它的发布版

08:46.630 --> 08:48.130
就是它后边没有跟东西的

08:48.130 --> 08:49.730
一定要安装这种版本啊

08:49.730 --> 08:51.430
它是发布版真正发布出来了

08:51.430 --> 08:53.830
已经经过了严格的测试

08:53.830 --> 08:54.930
嗯

08:54.930 --> 08:56.130
注意次呢

08:56.130 --> 08:59.130
也只能安装这个这个rc开头的版本啊

08:59.130 --> 09:01.130
rc呢表示就是已经很成熟了

09:01.130 --> 09:02.630
马上就要发布了啊

09:02.630 --> 09:04.230
这是最大的容认线度了

09:04.230 --> 09:06.830
什么beta呀alpha这些东西就不要去安装了啊

09:06.830 --> 09:08.030
这给大家说一下

09:08.030 --> 09:09.030
嗯

09:09.030 --> 09:11.630
你看是不是把所有的版本就列出来了啊

09:11.630 --> 09:14.030
比方说我要去列举它的有哪些依赖呢

09:14.030 --> 09:16.330
我们可以我们可以不用进网站对吧

09:16.330 --> 09:20.230
比方说用v啊都是一样的意思啊rex后面跟上

09:20.230 --> 09:23.130
Dependences

09:23.130 --> 09:24.330
嗯

09:24.330 --> 09:25.930
看一下它有哪些依赖啊

09:25.930 --> 09:28.030
他告诉你啊他依赖这么三个包

09:28.030 --> 09:28.630
对吧哎

09:28.630 --> 09:31.230
这就是通过这是包查看命令啊

09:31.230 --> 09:33.930
他不是你说你查看了你安装的包啊

09:33.930 --> 09:35.430
而是指的是查看任意的包

09:35.430 --> 09:37.430
他会在线去查询

09:37.430 --> 09:38.730
OK

09:38.730 --> 09:39.830
好看下面这个

09:39.830 --> 09:42.130
如果说我要查看我安装的哪些包呢

09:42.130 --> 09:45.030
就是我的notemarchus目录下面安装了哪些包呢

09:45.030 --> 09:47.430
可以使用npmnest这个命令啊

09:47.430 --> 09:52.930
当然了他也有别名啊别名是ls lll都一样啊都一样

09:52.930 --> 09:56.630
npmnest表示列举出我们目前安装的包啊

09:56.630 --> 10:00.230
比方说我们使用npmnest看一下

10:01.430 --> 10:03.030
哎他什么列举出来了

10:03.030 --> 10:05.030
列举出来了我们目前安装的两个包

10:05.030 --> 10:07.730
一个是jquery啊一个是notes

10:07.730 --> 10:09.830
就这么个意思啊就这么个意思

10:09.830 --> 10:11.930
然后呢如果说你张一个横杠计的话

10:11.930 --> 10:15.330
那么就是看的是全局安装的哪些包啊

10:15.330 --> 10:17.230
那我现在全局没有安装任何东西

10:17.230 --> 10:19.630
你加上横杠计就看的是全局

10:19.630 --> 10:21.930
那么后边是个是什么意思呢

10:21.930 --> 10:24.430
这个命令呢有的时候还是有那么一点点用啊

10:24.430 --> 10:25.930
有的时候我们要查询一下

10:25.930 --> 10:27.730
呃后面的东西是我这样的解释吧

10:27.730 --> 10:29.430
我们首先安装一个那个

10:29.430 --> 10:30.930
摩恰啊

10:31.830 --> 10:36.300
横杠计嘛啊摩恰安装一下

10:36.300 --> 10:39.200
因为这个包呢他依赖比较多啊安装一下

10:39.200 --> 10:41.600
看一下如果说呃依赖关系呢

10:41.600 --> 10:43.500
比较复杂的这种包

10:43.500 --> 10:45.900
如果说你把他列举出来是什么样子

10:46.700 --> 10:48.500
npmnest你看一下

10:50.800 --> 10:52.000
是不是就非常夸张啊

10:52.000 --> 10:53.400
本来我们只安装了三个包

10:53.400 --> 10:55.000
对吧本来我们只安装了三个包

10:55.000 --> 10:56.700
jquery,notes,摩恰

10:56.700 --> 10:58.900
那么现在呢你看你看到了啊

10:58.900 --> 11:03.000
他后边呢是不是就就多了很多的包

11:03.000 --> 11:04.600
对不对啊多了很多的包

11:04.600 --> 11:06.400
看到没啊因为他有依赖嘛

11:06.400 --> 11:08.000
他一带又一又有依赖

11:08.000 --> 11:09.700
是不是就形成了一个依赖关系图

11:09.700 --> 11:11.500
对不对可能这个千套结构

11:11.500 --> 11:13.300
非常非常深的一个依赖关系图

11:13.300 --> 11:14.900
就打印出来一大堆啊

11:14.900 --> 11:16.300
像这种情况下呢如果说

11:16.300 --> 11:17.600
我不想知道他的依赖关系

11:17.600 --> 11:19.600
我就想看了我依赖哪些包啊

11:19.600 --> 11:21.000
我直接依赖哪些包

11:21.000 --> 11:21.800
那么怎么办呢

11:21.800 --> 11:23.500
那么就可以利用这个参数啊

11:23.500 --> 11:24.500
这个debs

11:24.500 --> 11:25.900
debs表示深度啊

11:25.900 --> 11:27.600
我们查看了深度是多少

11:27.600 --> 11:29.000
深度呢是从零开始的

11:29.000 --> 11:30.300
几个例子就明白了啊

11:30.300 --> 11:32.500
比方说我们这里npmnest啊

11:32.500 --> 11:36.000
后边呢跟上深度啊debs等于零

11:36.000 --> 11:38.600
那么说明什么呢我们只看一级啊

11:38.600 --> 11:40.200
那么是不是就只有三个啊

11:40.200 --> 11:41.700
只看深度为零的啊

11:41.700 --> 11:43.300
那么就是直接依赖的包

11:43.300 --> 11:44.500
是不是只有这三个

11:44.500 --> 11:46.500
好如果说我们给给他深度为一

11:46.500 --> 11:50.000
那么他会把第1级和第2级全部列举出来啊

11:50.000 --> 11:51.700
你看摩卡里边的一级依赖

11:51.700 --> 11:53.000
是不是就列举出来了

11:53.000 --> 11:54.200
就这么个意思啊

11:54.200 --> 11:56.400
这是通过npmnest来进行查看

11:56.400 --> 11:57.300
我们的安装

11:57.300 --> 11:58.200
已经安装了包

11:58.200 --> 11:59.100
加上横桿劲呢

11:59.100 --> 12:00.900
就表示查看全局了

12:00.900 --> 12:02.100
ok 这是关于这一块

12:03.800 --> 12:07.600
那么现在我们看一下这个更新啊更新

12:07.600 --> 12:08.400
更新的话

12:08.400 --> 12:11.100
我们首先呢有包含两种迷你啊

12:11.100 --> 12:12.900
一种是我们要检查一下

12:12.900 --> 12:14.800
哪些包需要更新

12:14.800 --> 12:15.900
我们怎么来检查呢

12:15.900 --> 12:17.900
是用npm audited

12:17.900 --> 12:19.100
冲入他的检查

12:19.100 --> 12:20.900
我们用npm audited

12:22.200 --> 12:25.100
来进行检查

12:25.100 --> 12:26.200
好那么他告诉你

12:27.500 --> 12:28.700
什么包需要更新呢

12:28.700 --> 12:30.500
这个楼单写啊楼单写的

12:30.500 --> 12:33.000
他目前的版本是2.1.0

12:33.000 --> 12:33.400
你看一下

12:33.400 --> 12:35.700
但是我们拍一点节省里面是这样子写的

12:35.700 --> 12:36.100
对吧

12:36.100 --> 12:37.100
是不是这样子写的

12:37.100 --> 12:39.800
我们刚才是只安装的指定版本2.1.0

12:39.800 --> 12:41.900
但是拍一些节省里面是这样子写的

12:41.900 --> 12:42.900
好这样子写的过后呢

12:42.900 --> 12:43.800
你懂的对吧

12:43.900 --> 12:46.100
那么他只支持主版本号不变就行了

12:46.100 --> 12:48.000
那么尽量的安装最新版

12:48.000 --> 12:48.900
那么骑士呢

12:48.900 --> 12:50.100
他可以安装到哪个版本了

12:50.100 --> 12:52.100
可以安装到2.4.2这个版本

12:52.100 --> 12:52.900
对吧

12:52.900 --> 12:54.500
目前的最新版的是4.1

12:54.500 --> 12:55.500
对不对

12:55.500 --> 12:57.700
那么如果说需要更新的话

12:57.700 --> 12:58.500
他说要更新到这儿

12:58.500 --> 12:59.100
对不对

12:59.100 --> 13:00.100
更新到绿色的这里

13:00.100 --> 13:01.700
说这个包是不是需要更新

13:01.700 --> 13:01.900
对不对

13:01.900 --> 13:02.800
就这么个意思啊

13:02.800 --> 13:03.500
就这么个意思

13:03.500 --> 13:04.600
他需要更新啊

13:04.600 --> 13:06.000
他也可以更新

13:06.000 --> 13:07.000
那么怎么来更新呢

13:07.000 --> 13:08.300
我们使用下面这个迷你

13:08.300 --> 13:09.800
npm audited

13:09.800 --> 13:10.800
upgrade有别名

13:10.800 --> 13:12.800
upgrade都是一样的

13:12.800 --> 13:14.000
都是一样的

13:14.000 --> 13:14.800
加上横杠季呢

13:14.800 --> 13:16.500
就是更新全局的

13:16.500 --> 13:17.800
这个包名也是可选的

13:17.800 --> 13:18.800
如果不加包名的话

13:18.800 --> 13:20.700
就是更新所有的包

13:20.700 --> 13:22.100
在我们当前目录下面

13:22.100 --> 13:23.300
该更新的就全部更新

13:23.300 --> 13:24.800
就是通过 audited

13:24.800 --> 13:26.600
能够检测出来的包都更新

13:26.600 --> 13:27.700
那么我们这里呢

13:27.700 --> 13:29.000
npm updates

13:29.000 --> 13:30.160
我们就不指定包

13:30.160 --> 13:31.000
全部给我更新吧

13:32.400 --> 13:35.430
好 回车

13:35.430 --> 13:36.730
好 完成更新了

13:36.730 --> 13:37.630
好 更新到之后呢

13:37.630 --> 13:39.630
我们再来检查 audited

13:39.630 --> 13:42.760
再来检查

13:43.760 --> 13:44.660
再来检查之后呢

13:44.660 --> 13:45.760
你看到这里呢

13:45.760 --> 13:48.060
就是是不是最新版了

13:48.060 --> 13:49.560
当前的版本是2.4.2了

13:49.560 --> 13:50.760
我们也补行看一下

13:50.760 --> 13:51.560
nodash

13:51.560 --> 13:52.760
这里刷新一下

13:52.760 --> 13:53.760
就已经

13:53.760 --> 13:54.660
不跟你说应该刷新的

13:54.660 --> 13:56.260
一刷新出了这么多

13:56.260 --> 13:58.660
nodash里面看一下

13:58.660 --> 13:59.860
是不是2.4.2了

13:59.860 --> 14:00.360
对吧

14:00.360 --> 14:01.360
他就更新了

14:01.360 --> 14:03.560
通过这个update来进行更新

14:03.560 --> 14:05.160
这里是这一块

14:05.160 --> 14:07.160
然后我这里再说一个

14:07.160 --> 14:07.860
说到这了

14:07.860 --> 14:08.760
再说一个

14:08.760 --> 14:12.660
如果说我要更新npm本身呢

14:12.760 --> 14:14.660
我要更新npm本身呢

14:14.660 --> 14:15.660
那么怎么办呢

14:15.660 --> 14:17.460
他是这样子的

14:17.460 --> 14:19.460
npm安装好了过后呢

14:19.460 --> 14:20.260
你这个程序

14:20.260 --> 14:23.060
就是跟这个node一起安装的

14:23.060 --> 14:23.860
安装这个程序

14:23.860 --> 14:25.060
安装好了过后呢

14:25.060 --> 14:27.060
如果说你要更新npm

14:27.060 --> 14:28.460
你可以这样做

14:28.460 --> 14:30.760
你直接去安装npm

14:30.760 --> 14:31.960
我们目前还没有安装

14:31.960 --> 14:32.460
对不对

14:32.460 --> 14:34.160
我们直接去安装npm

14:34.160 --> 14:35.860
使用全局安装

14:35.860 --> 14:36.760
横档剂

14:36.760 --> 14:37.860
安装npm

14:37.860 --> 14:38.660
什么意思

14:38.660 --> 14:41.060
用当前版本的npm

14:41.060 --> 14:43.460
去安装最新版本的npm

14:44.460 --> 14:45.260
他安装到哪

14:45.260 --> 14:46.460
安装到全局目录

14:46.460 --> 14:47.460
全局目录在哪

14:47.460 --> 14:47.860
就在这

14:47.860 --> 14:48.560
每个

14:48.560 --> 14:49.760
刚才我们给大家说了

14:49.760 --> 14:51.460
全局目录通过npm入彩来查看

14:51.460 --> 14:52.760
你自己去看一下

14:52.760 --> 14:54.160
我们这里有一个回车

14:54.160 --> 14:54.760
你看一下

14:56.860 --> 15:00.060
他就可以安装最新版本的npm

15:01.160 --> 15:01.760
稍等一下

15:01.760 --> 15:02.560
他安装到哪呢

15:02.560 --> 15:03.560
他其实就安装到

15:03.560 --> 15:04.960
就是全局目录下面

15:04.960 --> 15:05.760
以后安装完了

15:05.760 --> 15:07.160
过后我们看一下一个全局目录

15:08.560 --> 15:09.860
他非常有意思

15:09.860 --> 15:12.560
他是用旧版本的npm去安装新版本的npm

15:13.860 --> 15:15.060
看一下吧

15:15.060 --> 15:15.560
你看一下

15:15.560 --> 15:18.160
他这个其实也很好理解

15:18.160 --> 15:19.560
全局安装的目的是什么

15:20.960 --> 15:22.360
全局安装的目的是什么

15:22.360 --> 15:24.760
是不是要全局使用一个全局命令

15:24.760 --> 15:25.360
对不对

15:25.360 --> 15:27.360
咱们看一下全局目录

15:27.360 --> 15:28.360
npm root

15:29.960 --> 15:30.660
看全局目录

15:30.660 --> 15:31.060
对吧

15:31.060 --> 15:31.660
横档剂

15:34.400 --> 15:35.000
这是全局目录

15:35.000 --> 15:35.600
对不对

15:35.600 --> 15:37.600
那么现在这个目录就有东西了

15:37.600 --> 15:38.400
你看

15:38.400 --> 15:39.300
你看这个目录

15:39.300 --> 15:40.000
是不是有东西

15:40.000 --> 15:40.700
就是这个目录

15:40.800 --> 15:41.800
notemarchus

15:41.800 --> 15:43.700
notemarchus里面安装的npm

15:43.700 --> 15:45.200
全局目录下面安装了

15:45.200 --> 15:47.100
然后他是不是给你生成了一个npm

15:47.100 --> 15:48.000
和一个npx

15:48.000 --> 15:48.800
都是附带的

15:48.800 --> 15:49.500
对不对

15:49.500 --> 15:50.900
都是使用最新版本

15:50.900 --> 15:52.300
那么这样子已经来的话

15:52.300 --> 15:54.300
那么这个是不是变成了全局命令

15:54.300 --> 15:55.900
那么你之后使用的npm命令

15:55.900 --> 15:57.000
是不是使用的是这个

15:57.000 --> 15:58.100
对吧

15:58.100 --> 15:59.200
所以他不是说

15:59.200 --> 16:00.700
跟其他的软件安装

16:00.700 --> 16:02.000
软件更新不一样

16:02.000 --> 16:04.200
他不是说把这个程序本身更新

16:04.200 --> 16:05.400
他是用旧的程序

16:05.400 --> 16:07.500
去安装一个新的命令

16:07.500 --> 16:08.300
那么之后

16:08.300 --> 16:09.200
由于他在这了

16:09.200 --> 16:09.700
所以说

16:09.700 --> 16:10.600
之后的使用npm

16:10.600 --> 16:12.400
他就使用了这个新的命令了

16:12.400 --> 16:14.100
那如果将来你要更新的话

16:14.100 --> 16:14.900
你怎么更新的

16:14.900 --> 16:15.800
你就使用

16:15.800 --> 16:17.000
现在我们第一次

16:17.000 --> 16:17.900
是要用安装

16:17.900 --> 16:19.200
用安装的那种形式

16:19.200 --> 16:20.800
那么后边我们要更新npm

16:20.800 --> 16:21.700
比方过了一段时间

16:21.700 --> 16:22.500
他又升级了

16:22.500 --> 16:23.400
要更新npm

16:23.400 --> 16:24.900
是不是要可以使用

16:24.900 --> 16:26.300
npmupdate

16:26.300 --> 16:27.000
横桿计

16:27.000 --> 16:27.700
对不对

16:27.700 --> 16:28.400
横桿计

16:28.400 --> 16:29.500
然后npm

16:29.500 --> 16:30.300
对吧

16:30.300 --> 16:31.200
更新这个npm

16:31.200 --> 16:32.200
就这样子更新

16:32.200 --> 16:33.100
或者是不假npm

16:33.100 --> 16:33.800
他就这样子

16:33.800 --> 16:35.500
就把全局的所有的包

16:35.500 --> 16:36.600
来完成更新

16:36.600 --> 16:37.600
当然现在

16:37.600 --> 16:39.100
没有什么可以更新的

16:39.200 --> 16:40.200
也没有什么可以更新的

16:41.400 --> 16:41.900
ok

16:41.900 --> 16:42.900
那么都是这一块

16:42.900 --> 16:43.600
能听懂吗

16:44.900 --> 16:45.000
好

16:45.000 --> 16:46.100
接下来是卸载

16:46.100 --> 16:46.700
有的时候

16:46.700 --> 16:47.900
我一个包不想用了

16:47.900 --> 16:49.300
就是我们之前可能觉得

16:49.300 --> 16:50.800
他有对他有依赖

16:50.800 --> 16:51.300
后来发现

16:51.300 --> 16:52.600
我也可以不用他

16:52.600 --> 16:53.700
要把他卸载了

16:53.700 --> 16:54.500
卸载怎么办呢

16:54.500 --> 16:55.400
我们就可以使用

16:56.200 --> 16:57.500
uninstall

16:57.500 --> 16:58.700
Ulistor

16:58.700 --> 16:59.800
怎么读

16:59.800 --> 17:00.700
他又别名

17:00.700 --> 17:04.900
有remove,rm,r,un,unlink

17:04.900 --> 17:05.700
都可以

17:05.700 --> 17:07.000
都是一样的意思

17:07.000 --> 17:08.700
比方说npmremove

17:08.800 --> 17:09.800
用remove

17:09.800 --> 17:10.700
然后呢

17:10.700 --> 17:11.300
可以用

17:11.300 --> 17:11.900
可以如果说

17:11.900 --> 17:12.700
全局现代的话

17:12.700 --> 17:13.500
就加狠杠迹

17:13.500 --> 17:14.600
如果说本地现代的话

17:14.600 --> 17:16.100
就直接加包名就完事了

17:16.100 --> 17:16.900
比方说

17:16.900 --> 17:17.300
咱们呢

17:17.300 --> 17:18.800
把那个摩晓干卸载

17:18.800 --> 17:20.200
npmremove

17:20.200 --> 17:20.600
摩晓

17:22.500 --> 17:23.000
好

17:23.000 --> 17:23.600
等待一下

17:26.100 --> 17:27.100
好完成卸载

17:27.100 --> 17:27.600
现在的之后

17:27.600 --> 17:28.300
我们来看一下

17:28.300 --> 17:29.700
这里刷新

17:29.700 --> 17:30.400
所以又变成

17:30.400 --> 17:31.100
只有了一个接块

17:31.100 --> 17:31.900
为何楼弹起来

17:31.900 --> 17:32.900
对不对

17:32.900 --> 17:33.600
那么这个目录下面

17:33.600 --> 17:34.500
也没东西了

17:34.500 --> 17:34.900
好

17:34.900 --> 17:35.500
然后我们看一下

17:35.500 --> 17:36.600
这个拍几点节省

17:36.600 --> 17:37.400
他是不是一代里边

17:37.400 --> 17:38.300
也只有这两个了

17:38.700 --> 17:39.700
对不对

17:39.700 --> 17:41.400
David dependency也没了

17:41.400 --> 17:41.800
对吧

17:41.800 --> 17:42.400
就是卸载

17:42.400 --> 17:43.700
非常非常简单

17:43.700 --> 17:45.000
他卸载的时候

17:45.000 --> 17:46.300
不仅卸载自己

17:46.300 --> 17:48.200
跟他一代的东西

17:48.200 --> 17:49.900
如果说别的包没有一代

17:49.900 --> 17:51.000
总之他用不到的包

17:51.000 --> 17:52.200
他全部给你卸载了

17:52.200 --> 17:53.800
他自动帮你搞你

17:53.800 --> 17:54.100
OK

17:54.100 --> 17:56.300
这是官员卸载包

17:56.300 --> 17:56.600
然后呢

17:56.600 --> 17:57.000
最后呢

17:57.000 --> 17:57.400
我们说一下

17:57.400 --> 17:59.200
官员这个npm配置

17:59.200 --> 18:00.000
就这个的配置

18:00.000 --> 18:01.100
他不是包配置

18:01.100 --> 18:02.500
我们之前讲了个什么

18:02.500 --> 18:03.900
package.json

18:03.900 --> 18:05.000
是包的配置

18:05.000 --> 18:05.600
那么这里呢

18:05.600 --> 18:07.400
是npm本身的配置

18:07.400 --> 18:07.900
那么配置

18:07.900 --> 18:09.400
这个东西有啥用了

18:09.400 --> 18:10.200
没啥用

18:10.200 --> 18:11.000
没啥用

18:11.000 --> 18:12.700
就是他货毒会祸少了

18:12.700 --> 18:14.500
对一些命令的会产生影响

18:14.500 --> 18:15.400
但是对我们来说

18:15.400 --> 18:15.900
没啥用

18:15.900 --> 18:17.400
我们了解一下就行了

18:17.400 --> 18:18.500
因为我们之前用到过

18:18.500 --> 18:20.200
用到了那么一点点

18:20.200 --> 18:21.600
就是安装好npm之后

18:21.600 --> 18:23.800
他会产生两个配置文件

18:23.800 --> 18:25.600
一个是用户配置

18:25.600 --> 18:27.200
一个是系统配置

18:27.200 --> 18:28.500
那么这两个配置文件里边

18:28.500 --> 18:31.000
各有各有很多的配置

18:31.000 --> 18:32.400
那么两个配置文件里边

18:32.400 --> 18:33.100
他其实配置的是

18:33.100 --> 18:34.300
都是差不多的东西

18:34.300 --> 18:35.600
如果说出现了冲突

18:35.600 --> 18:38.000
那么用户配置会覆盖系统配置

18:38.000 --> 18:39.300
他就这么一个规则

18:39.300 --> 18:40.500
他有两个配置文件

18:40.500 --> 18:40.900
其实呢

18:40.900 --> 18:42.000
我们根本就不关心

18:42.000 --> 18:42.600
他有什么样

18:42.600 --> 18:44.000
有几个配置文件

18:44.000 --> 18:45.100
我们关心的是什么呢

18:45.100 --> 18:46.900
我们如果说要关心配置的话

18:46.900 --> 18:49.100
只关心最终生效的配置

18:49.100 --> 18:50.600
有哪些配置是生效的

18:50.600 --> 18:51.600
那么怎么来查看

18:51.600 --> 18:52.700
有哪些配置生效了

18:52.700 --> 18:54.300
通过下面的命令

18:54.300 --> 18:55.100
可以查看

18:55.100 --> 18:57.000
目前生效的有哪些配置

18:57.000 --> 18:57.800
什么命令呢

18:57.800 --> 18:59.700
npmconfig配置

18:59.700 --> 19:00.700
里边个ls

19:00.700 --> 19:01.700
表示nest

19:01.700 --> 19:02.900
列出

19:02.900 --> 19:04.300
列出我们目前

19:04.400 --> 19:05.500
所有生效的配置

19:05.500 --> 19:06.700
好看一下吧

19:06.700 --> 19:08.900
npmnestls

19:11.900 --> 19:14.400
npmconfigls

19:16.200 --> 19:17.200
你看一下

19:17.200 --> 19:19.400
这就是列出我们目前生效的配置

19:19.400 --> 19:20.600
看一下目前生效的配置

19:20.600 --> 19:22.500
这个以分号开头的表示注释

19:22.500 --> 19:24.000
表示注释

19:24.000 --> 19:25.200
看见过这种吗

19:25.200 --> 19:27.100
其实在你那个是

19:27.100 --> 19:28.400
操作系统里面配置文件

19:28.400 --> 19:29.300
都是这么写的

19:29.300 --> 19:31.100
分号开头的表示注释

19:31.100 --> 19:31.700
那么这里边

19:31.700 --> 19:32.900
你看这个是配置

19:33.300 --> 19:33.900
配置

19:33.900 --> 19:35.900
我们Regis水是我们之前自己写的

19:35.900 --> 19:37.400
自己写的配置

19:37.400 --> 19:38.400
把它指向

19:38.400 --> 19:39.600
它的原指向淘宝

19:39.600 --> 19:40.400
对吧

19:40.400 --> 19:40.900
那么这里

19:40.900 --> 19:42.900
U2A进程的表示我们的用户代理

19:42.900 --> 19:44.500
用户代理就是我们整个计算机

19:44.500 --> 19:45.900
是什么东西

19:45.900 --> 19:47.400
prefix表示的是

19:47.400 --> 19:49.400
我们的npm的系统配置

19:49.400 --> 19:49.900
在哪

19:49.900 --> 19:51.300
在这个目录下面

19:51.300 --> 19:51.700
OK

19:51.700 --> 19:53.100
那么这就是一些配置

19:53.100 --> 19:55.200
如果说你要查看全部的配置

19:55.200 --> 19:56.700
全部的就是

19:56.700 --> 19:58.100
包括默认值

19:58.100 --> 19:58.900
因为我们这里

19:58.900 --> 20:00.800
它只看的是什么呢

20:00.800 --> 20:02.400
看的是有所改动的

20:02.400 --> 20:04.100
安装好的过程有所改动的

20:04.100 --> 20:06.100
那么如果说你要看所有的配置

20:06.100 --> 20:07.300
包括默认值的话

20:07.300 --> 20:10.400
那么请你加上衡杠L

20:10.400 --> 20:12.500
那么这是用列表的形式来显示

20:12.500 --> 20:14.200
或者是加上两个衡杠接上

20:14.200 --> 20:15.400
用接上格式来显示

20:15.400 --> 20:16.700
就看你喜欢哪一种

20:16.700 --> 20:18.900
就是把显示格式给它打印出来

20:18.900 --> 20:20.100
config LS

20:20.100 --> 20:21.100
加上L

20:21.100 --> 20:22.400
它是用列表的形式

20:22.400 --> 20:23.900
来显示所有的配置

20:23.900 --> 20:24.700
包括默认配置

20:24.700 --> 20:25.400
有很多

20:25.400 --> 20:26.500
有很多

20:26.500 --> 20:28.800
这个东西我们也没有必要去看了

20:28.900 --> 20:32.500
或者是用config LS

20:32.500 --> 20:33.800
或者接上

20:33.800 --> 20:35.600
那么用接上格式来显示

20:35.600 --> 20:37.700
所有的配置

20:37.700 --> 20:38.400
就这么一些

20:38.400 --> 20:41.200
以后如果说我们真的要遇到一些配置的时候

20:41.200 --> 20:42.900
我们再说

20:42.900 --> 20:45.500
我们要先知道怎么来查看配置

20:45.500 --> 20:49.100
那么接下来我们如果说要查看某一个配置

20:49.100 --> 20:50.600
获取某个配置箱

20:50.600 --> 20:52.000
设置某个配置箱

20:52.000 --> 20:53.200
移除某个配置箱

20:53.200 --> 20:54.700
那么怎么来操作呢

20:54.700 --> 20:56.800
我们之前

20:56.800 --> 20:59.100
不是配置了那个就是registry

20:59.100 --> 21:00.100
配置入口的

21:00.100 --> 21:03.300
那么我们这里可以使用config get

21:03.300 --> 21:04.300
得到一个配置

21:04.300 --> 21:05.600
什么配置呢registry

21:05.600 --> 21:07.800
看一下目前的配置里面

21:07.800 --> 21:09.900
得到registry这个配置的值

21:09.900 --> 21:11.400
市场

21:11.400 --> 21:12.800
你看看是不是淘宝

21:12.800 --> 21:13.800
对吧淘宝

21:13.800 --> 21:17.600
然后我们也可以通过config setregistry

21:17.600 --> 21:18.300
是不是可以设置

21:18.300 --> 21:19.400
我们之前是不是这样做的

21:19.400 --> 21:19.800
对吧

21:19.800 --> 21:20.900
之前就是这样做的

21:20.900 --> 21:21.800
原来的意思

21:21.800 --> 21:22.600
OK

21:22.600 --> 21:25.100
要知道怎么来进行设置配置

21:25.100 --> 21:26.300
怎么来得到配置

21:26.300 --> 21:27.100
具体的配置箱

21:27.100 --> 21:28.100
我们先不用去管

21:28.100 --> 21:30.300
我们目前只学过registry

21:30.300 --> 21:31.800
以后我们遇到再说

21:31.800 --> 21:33.300
如果说你要移除配置的话

21:33.300 --> 21:35.900
那么我们看一下NPM就config

21:35.900 --> 21:39.200
denateregistry

21:39.200 --> 21:40.100
这样子就移除了

21:40.100 --> 21:42.000
当然我现在不用去移除

21:42.000 --> 21:43.600
移除还自己去添加

21:43.600 --> 21:44.800
添加的话直接用set

21:44.800 --> 21:46.900
它没有的话就给你添加进去了

21:46.900 --> 21:47.200
OK

21:47.200 --> 21:50.400
那么这就是关于配置的这一块

21:50.400 --> 21:51.700
了解一下就行了

21:51.700 --> 21:52.800
那么这里就完了

21:52.800 --> 21:55.700
其实NPM最核心的是我们之前讲的

21:55.800 --> 21:57.300
这就可能就是

21:57.300 --> 21:58.900
让大家有这么一个印象

21:58.900 --> 22:01.000
它还有这么一些功能存在

22:01.000 --> 22:02.100
就行了

22:02.100 --> 22:02.500
OK

22:02.500 --> 22:03.300
这是这就可能内容

