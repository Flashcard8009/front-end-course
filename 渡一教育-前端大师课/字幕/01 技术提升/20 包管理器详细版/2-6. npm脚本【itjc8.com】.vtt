WEBVTT

00:00.000 --> 00:06.200
好 这几课呢 咱们来学习一个非常非常重要

00:07.200 --> 00:15.320
又非常非常简单的这么一个知识啊 叫做npm脚本 叫英文的话就是npm script

00:17.040 --> 00:18.920
是这样子的 它来解决什么问题呢

00:20.560 --> 00:25.000
我们在开发过程中啊 你们今后 因为我们这门课呢 可能还不会涉及

00:26.000 --> 00:30.600
就你们今后 你们学习的webpack 特别是webpack

00:31.600 --> 00:36.600
你得有很多很多的sini工具啊 就是命令行工具 你要在敲命令

00:37.600 --> 00:41.600
后边你们学习vue啊 学习react

00:42.600 --> 00:45.600
还有后边特别是你们学习到那个测试

00:46.600 --> 00:53.000
都会有很多很多的命令工具 加起来的话得有10多个20个啊

00:53.800 --> 00:57.600
而且呢 每一个命令使用的时候呢 你给它提供不同的参数呢

00:57.600 --> 01:02.200
它执行的效果不太一样啊 比方说我们现在学习的npm那个命令

01:02.200 --> 01:06.600
对吧 是不是有很多很多的指命令可以提供对不对 什么install啊

01:07.200 --> 01:12.000
对吧 还有什么呢 我想目前好像就就用到install 还有什么

01:12.600 --> 01:16.000
还有什么config对吧 我们之前用过的啊 还没有详细讲

01:16.800 --> 01:21.600
它有很多很多的指命令 那么这么多命令你记得住吗 是不是肯定记不住

01:21.800 --> 01:27.800
对不对 谁去谁去会也会去记这个东西呢 而且呢 这些但是这些命令我们平时要用

01:28.800 --> 01:34.200
啊 比方启动工程啊 我们之后呢 要启动一个工程 启动工程我们现在是用的是load来启动的吧

01:34.200 --> 01:36.000
load后面跟一个文件名来启动

01:37.000 --> 01:41.400
那么其实呢 以后呢 我们比方今天啊 就这几个我们一会看一个第三方库嘛

01:41.400 --> 01:43.800
啊 一个第三方库 他也给你提供了一个cd命令

01:44.400 --> 01:47.200
用那个第三方库给你提供了cd命令的也可以启动工程

01:47.800 --> 01:52.200
后边你们还会学习各种各样的第三方库 他给你的命令的都可以启动工程

01:52.200 --> 01:56.000
他们各有各的好处 不是说一定要用哪一个都有可能会使用

01:56.600 --> 02:01.600
那么你可能会到时候呢 启动工程命令一大堆啊 你不知道用哪一个

02:02.000 --> 02:06.800
或者是你知道用哪一个每次写起来都要想半天这个命令咋用的就很难记忆

02:08.000 --> 02:11.800
以后呢 我们还会部署工程啊 部署工程就是打包啊

02:12.400 --> 02:18.600
那么这个玩意呢 你们后边要学学到学习到那个webpack的时候才会学习 这门客不设计

02:19.200 --> 02:24.200
一些第三方库 比如说webpack 他就提供了一个cd命令来帮助你打包

02:24.800 --> 02:31.400
还有一些测试工程 测试我们的项目 那么这个时候呢 也会有一些第三方库给你提供了一些cd命令

02:31.600 --> 02:37.400
都不太不太一样 但是他们的功能差不多 总之我要启动工程 总之我要部署 总之我要测试

02:38.400 --> 02:46.000
那么我们怎么办来处理这个问题呢 就是这些命令太多了 而且呢不同的第三方库呢 他命令也不一样非常难以记忆

02:46.600 --> 02:53.200
于是呢 npm还考虑到了这一点 他非常贴心的给你支持了脚本 你只需要在

02:54.000 --> 02:58.400
这个配置文件中呢 配置一个字段叫script 叫脚本的意思啊

02:59.000 --> 03:05.800
那么他就可以配置各种脚本名称 那么配置好了脚本名称之后呢 我们就可以使用一个非常非常简单的命令

03:06.000 --> 03:10.520
来统一操作了 我们就不用去记那些乱七八糟的命令了 好 举个例子啊

03:11.800 --> 03:12.920
比方说啊 咱们呢

03:13.920 --> 03:19.760
有一个index的gs文件啊 我先宣讯生成这个没关系吧 先去生成一个npm init

03:21.870 --> 03:22.870
嗯 先生成一下啊

03:23.950 --> 03:26.910
呃 chapter 2

03:30.550 --> 03:31.750
我写错了 是吧 我说哎啊

03:32.990 --> 03:38.510
ok 先生成出来 呃然后呢 我们这里有个index的gs文件 我们输出一个Hello吧

03:38.950 --> 03:46.430
Hello 然后呢 我们这里node 这是不是一种启动工程的方式啊 对吧 回车 你看这输出来啥都吗 一种启动方式

03:46.950 --> 03:53.310
那还有没有别的启动方式呢 你看着啊 我们要说安装一个第三方包啊 第三方库 给大家介绍一下吧 这个库也很简单

03:54.070 --> 03:56.830
呃 这个库的名字呢 叫做loadmong

03:58.750 --> 03:59.670
叫这个名字 安装

04:00.990 --> 04:07.990
这个第三方库呢 它就提供了一个工具啊 提供了一个工具 因为这个工具呢 它也能达到启动工程的目的 但它效果呢

04:08.550 --> 04:14.390
肯定要比个load来种启动 启动方式呢 要好 要优秀一点啊 也不能说一定能够

04:15.190 --> 04:21.510
呃 替换掉load啊 只是说它给你优化了一些东西 我们一会就看到了啊 它功能比较强大而已

04:22.150 --> 04:26.270
那么安装好了之后呢 你会看到它这里个病啊 它有很多的依赖 它这里个病目录

04:26.590 --> 04:30.150
是不是它就给你加了一些silly命令 对吧 其中一个命令就是loadmong

04:31.030 --> 04:38.070
啊 就这个命令 这个命令它提供给你干嘛呢 来启动工程 接下来我们来怎么来用 我们之前说过了 怎么来用这里边的命令

04:38.630 --> 04:47.190
除非你是全居安装 全居安装的话 是不可以直接用 对吧 但是现在能直接用吗 不能直接用 对吧 它不是全居安装的 那么我们这里呢 要使用npx

04:47.550 --> 04:55.390
load嘛 虽然用这样的方式来安装 来运行 那么运行啥呢 运行我们就运行应带个事的解释 回录

04:56.950 --> 05:04.790
你看呀 他给你输出了啊 输出了哈喽 但是你会发现工程没有结束啊 工程没有结束 没有结束

05:05.390 --> 05:07.830
为什么没结束 它下面有一行提示文字 它说

05:09.030 --> 05:15.430
呃 它在等待文件改变 文件一改变的话 它会重新启动 也就是我们

05:16.070 --> 05:27.710
只 这里比较说哈喽二 一保存 你看是不是就直接输出哈喽二了 这样子呢 我就避免了 哎 我每次改了过后了 我还要去运行一下load啊 就不是避免了 这样子改动了 是不是 这个命令也要

05:27.750 --> 05:37.710
哎 是不是 也是一种启动命令 对不对 啊 如果说你你想停止的话啊 康处加C啊 康处加C就停止了 对不对 哎 就这么简单啊 就这么简单

05:39.150 --> 05:42.550
哎 啊 停止啊 y ok

05:43.550 --> 05:48.270
那么像这种啊 以后呢 你们还会学习各种各样启动工程的方式 西西古外的启动方式都有

05:49.030 --> 05:55.350
那么现在我们 现在是不是就用两种脚奔 两种那个命令行的方式来启动我们的工程了

05:55.550 --> 06:00.950
那我们是不是脑袋里面要记两个 对不对 有的时候呢 我们要用load 有的时候呢 我们要用load嘛

06:01.550 --> 06:08.910
是不是特别麻烦 要记得很多 后面我们还会学习很多类似的这种操作 那么要记得东西太多了 那怎么办呢 我们可以用这种方式来处理

06:09.870 --> 06:17.550
跑到那个package的接上里面啊 就是这个脚奔里面 你看他这里一个字段叫script 啊 如果没有的话啊 你自己书写一个

06:18.390 --> 06:18.790
script

06:19.670 --> 06:25.190
啊 他是个对象 这个对象里面的每一个属性呢 属性的名字呢 就是我们的命令名称

06:25.590 --> 06:32.390
啊 脚奔名称 比方说我给他取个比较笨 启动工程嘛 叫做start 对吧 启动工程 随便取个名字啊 名字随便去

06:33.270 --> 06:35.350
然后呢 后边呢 我们就写这个脚奔的内容

06:35.950 --> 06:44.950
就是这个 我们当我们运行这个脚奔的时候 他会运行啥呢 就在后边写运行啥 运行比方说load index 12条件是就这么简单

06:45.910 --> 06:49.430
就这么简单啊 比方说啊 这样子 然后呢 我们

06:50.390 --> 06:59.750
到工程里面去 现在我们就不会运行这个load index 12条件 不会这样运行的 怎么运行呢 使用统一的一个脚奔命令

07:00.150 --> 07:01.990
npm wrong start

07:03.830 --> 07:10.630
啊 你看 是不是运行的 还告诉你他运行的什么东西啊 那么运行的命令是啥 运行的是这个命令啊 那么最终最终了

07:11.030 --> 07:18.870
他出出了哈喽尔 对吧 哎 如果有一天我们想 哎 这个东西一下就完了啊 他没法监测文件的变化

07:19.990 --> 07:23.590
我希望文件变化过后来重新运行 那么我这个时候是不是要用loading

07:23.910 --> 07:27.350
那么我们不需要去动这 我们只需要把这个脚奔一赶

07:29.190 --> 07:30.870
npx 什么loading

07:32.070 --> 07:33.190
index.js

07:34.150 --> 07:38.230
好 保存一下 那么现在我们还是使用同样的一个命令 wrong start

07:39.510 --> 07:45.350
啊 你看 是不是就运行的loading了 他就相当于是运行的是这个 对吧 就这么简单

07:46.070 --> 07:50.950
啊 他那个脚奔的出现就这么就这么个意义 就是说你把你平时要经常用到的脚奔呢

07:51.510 --> 07:58.070
把它配置到里边 我们之后呢 就使用统一的命令来运行啊 不 这里边以后要改的话只需要改到里就行了

07:58.310 --> 08:02.870
啊 我们用的平时用的命令的就用同一个 这样子呢 是不是就不用去计那么多了

08:03.110 --> 08:08.470
对不对啊 我们无非就这里忘了忘了去查一次就够了 对吧 后面我们还是用同样的方式来运行

08:08.790 --> 08:13.590
就这么个意思啊 运行的方式就是npm wrong啊 后面写上start

08:14.390 --> 08:14.950
就这么简单

08:15.830 --> 08:23.350
原来意思吧 啊 这就是脚奔的好处啊 脚奔的好处啊 而且呢这里的脚奔配置啊 这些脚奔的配置

08:24.390 --> 08:29.830
他是可以配置任何命令 只要你能在那个shell啊 就是我们的控制台

08:30.470 --> 08:34.790
不是控制台 应该我们的命令行里边 支持的命令他都能都能使用

08:35.110 --> 08:41.830
什么命令上支持的命令 比方说我们这里打开power shell啊 我们windows的power shell 就这里边的命令支持的命令他都能使用啊

08:42.550 --> 08:46.310
都能使用啊 windows的话最好看这个啊 最好看最好看那个cmd

08:47.190 --> 08:55.030
cmd 看这个啊 那么这里边能用的命令呢 他都能使用啊 比方说举个例子啊 比方说我们下面再配置一个摇本啊

08:55.750 --> 09:02.070
就随便配置一个吧 配置个去一个啊 去一个啊 恶作剧啊 随便配置一个啊 随便配置一个 随便

09:03.030 --> 09:07.430
嗯 这里呢 比方说我们dir dr是啊 停止啊

09:08.550 --> 09:15.910
dr这个命令呢 是不是windows里边的命令 对吧 列出我们当前目录的文件啊 假和文件 好 咱们来用npm wrong

09:16.790 --> 09:17.190
trick

09:18.950 --> 09:20.150
你看 是不是把那个

09:20.950 --> 09:24.790
文件 我就是文件裸裂出来了 当前那个目录下面的文件裸裂出来了

09:25.030 --> 09:29.830
对不对啊 就相当于是相当于是你运行的 相当于是哪相当于运行的一个dr命令

09:30.070 --> 09:36.150
对吧 就这么个意思 好 比方说我们这里 随便啥都可以啊 比方说我们这里呢 我们还可以用mk

09:36.710 --> 09:40.310
dir对吧 建立一个目录啊 src

09:41.030 --> 09:42.230
来吧 来看一下

09:43.510 --> 09:48.150
好 npm用同样的命令 wrong trick 那么就相当于是运行的这个命令 这个命令干嘛呢

09:48.550 --> 09:52.150
创建一个目录啊 src 你看什么多那个目录 src的

09:52.630 --> 09:56.470
对吧 就是很很舒服的 我们只需要用同一个命令就行了

09:56.790 --> 10:00.790
比方说 我们这里还可以各种各样的事情都可以做 比方说我们打开一个瀏覽器

10:01.270 --> 10:05.190
打开一个瀏覽器 并且呢 挑到啊百度的主页

10:06.230 --> 10:10.950
对吧 只用这个命令对吧 crown命令 就是打开一个 crown瀏覽器 然后主页是这个

10:11.430 --> 10:12.790
来吧 来运行一下

10:13.990 --> 10:16.630
好运行 你看是不是打开一个瀏覽器 对吧 到百度主页

10:17.190 --> 10:21.110
对 是各种各样的命令都可以用啊 都可以写到这 并不是一定是

10:21.510 --> 10:23.910
不是说一定要npm命令 没了意思吗

10:24.390 --> 10:28.550
就是我们这里的可以配置各种各样的命令 只要我们经常用到的命令就可以配置到这

10:28.550 --> 10:33.030
那么到后面呢 我们就可以使用统一的统一的命令来进行运行

10:33.430 --> 10:34.310
这就是npm脚本

10:35.350 --> 10:39.270
其实npm脚本里面内容其实还还非常多啊 有很多的就是那种

10:39.830 --> 10:43.910
高级用法 但是呢 我们平时呢 根本就用不到那些 平时我们这些东西够了

10:45.190 --> 10:49.590
好 然后那么就最后面呢 说一下一些小的优化和细节啊

10:50.550 --> 10:53.590
npm呢 他对这些常用的脚本名称进行了简化

10:54.150 --> 10:59.110
下边的脚本名称是不需要使用wrong的 像这个start啊 stop test

10:59.430 --> 11:02.630
就这三个啊 这三个你是可以省略掉wrong的

11:03.110 --> 11:05.350
比方说刚才的start 对吧 我们刚才怎么写的

11:06.070 --> 11:10.790
npmwrong 运行的脚本名称是start 对吧 我们刚才是这样的写的

11:11.270 --> 11:16.550
那么你是实际上wrong他是一个比较常见的单词啊 面对这三个单词呢

11:16.550 --> 11:19.590
你是可以省略掉wrong的 也可以直接这样子写

11:20.710 --> 11:23.190
start 对吧 你是可以直接这样写的

11:24.070 --> 11:27.350
是一样的 看没 是不是一样的 咱们停止啊 比方说

11:28.150 --> 11:29.190
那么这里停止啊

11:30.070 --> 11:34.390
还那么这里呢 我们没有写test 没有写test的脚本 也没有写stop脚本

11:34.710 --> 11:38.310
这无所谓嘛 就是他可以省略的 对吧 这是关于这个

11:38.790 --> 11:43.510
然后呢 另外一些细节啊 一个是脚本里边是可以省略掉这个npx的

11:43.910 --> 11:47.110
这个npx在脚本里边是可以省略的 为什么呢

11:47.110 --> 11:50.470
因为他在启动一个启动脚本的时候呢 他相当于是给你

11:51.190 --> 11:54.230
不知道大家能不能听懂啊 就随便说一下 听不懂就算了啊

11:54.230 --> 11:58.790
他相当于给你启动了一个新的命令行窗口啊 一个新的shale

11:59.350 --> 12:02.230
那么这个新的shale呢 他会自动的把这个环境辨量

12:02.630 --> 12:04.950
把这个并部录呢 给加到这个环境辨量里面去

12:05.350 --> 12:08.310
然后执行完了过后呢 他把这个环境辨量给你移除

12:08.870 --> 12:11.110
所以说呢 你这里边是可以不用这个npx的

12:11.430 --> 12:14.470
我们之前必须要用npx 无非就是没有环境辨量嘛 对不对

12:14.630 --> 12:18.310
他也用不到这个命令 那么这样子呢 是可以的啊 npm start

12:19.270 --> 12:22.230
你看 是不是这样可以 对不对啊 停止

12:26.550 --> 12:28.790
好 这是关于这个啊 下一个就是

12:29.590 --> 12:33.590
start的脚本呢 如果说你不写啊 不写的话 他有一个默认字

12:33.590 --> 12:35.030
reload server.js

12:35.030 --> 12:37.990
所以如果说你没有写这个start脚本 他有没有start呢

12:37.990 --> 12:40.390
他运行的是啥呢 运行的不是index

12:40.390 --> 12:42.710
运行的是啥呢 运行的是server.js

12:43.670 --> 12:45.510
比方说我们这里输出一个server

12:45.510 --> 12:48.390
好 你看啊 现在我们没有写这个脚本对吧 start

12:48.390 --> 12:49.990
那么他是有默认字的start

12:51.190 --> 12:53.190
server

12:53.190 --> 12:57.190
那么相当于是什么呢 相当于他写了一个start脚本

12:57.190 --> 12:59.190
他是这样的写的 load server.js

12:59.190 --> 13:01.990
他是这样的写的 当然你配置过后了就可以

13:01.990 --> 13:05.190
就可以把他默认的东西给他覆盖掉 就这么个意思

13:05.190 --> 13:09.990
ok 那么这就是我这节课要讲的啊 讲的一些脚本

13:09.990 --> 13:11.990
甚至呢 你们可以利用这个规则啊

13:11.990 --> 13:14.790
以后呢 你们学习了load 深入的学习了load之后呢

13:14.790 --> 13:18.790
你们可以再去建立一个文件夹啊 比方说啊我们script

13:19.190 --> 13:21.990
有些脚本呢可能比较复杂 他要运行乱借也是

13:21.990 --> 13:23.790
要运行乱借也是 script

13:23.790 --> 13:26.790
我们在这里边呢 写上一个start点借也是

13:26.790 --> 13:29.790
写上这么一个东西 在这里边去运行些东西啊

13:29.790 --> 13:33.790
比方说删除一些文件夹 这对工程做一些清理工作

13:33.790 --> 13:37.390
然后呢怎么样去开启一个服务器等等等等

13:37.390 --> 13:39.390
一大堆东西 接大堆借也是

13:39.390 --> 13:42.790
然后呢 我们在脚本里面配置 配置什么呢 配置这个

13:42.790 --> 13:44.790
start

13:44.790 --> 13:47.790
start的话 我们就用 比方说用load某

13:49.790 --> 13:51.790
script

13:51.790 --> 13:53.790
start 点借是 没啥意思吗

13:53.790 --> 13:56.790
我们可以用这种方式 那都行 甚至呢 你们以后呢

13:56.790 --> 13:59.790
学习了一些脚本

13:59.790 --> 14:02.790
就现有脚本的一些命令 比方说你们学习了

14:02.790 --> 14:05.790
你那个是 你学了一些现有脚本的命令

14:05.790 --> 14:08.790
你甚至可以写一些现有脚本 比方说BAT文件

14:08.790 --> 14:11.790
放到这个脚本里边 那么启动一个BAT

14:11.790 --> 14:14.790
也可以 什么东西都可以

14:14.790 --> 14:16.790
最终呢 我们它的主要目的就是

14:16.790 --> 14:19.790
通过一个简单的命令 来运行各种各样的脚本

14:19.790 --> 14:21.790
就这么个意思

14:21.790 --> 14:24.790
这就是我们这里和的内容 是不是非常简单

14:24.790 --> 14:27.790
关于NPM脚本 我们这门客倒是

14:27.790 --> 14:29.790
不会怎么去用脚本

14:29.790 --> 14:31.790
但是呢 我们下一门客

14:31.790 --> 14:33.790
不知道是你们是哪一门客

14:33.790 --> 14:36.790
就是后面肯定有个wip pack 也是我讲的

14:36.790 --> 14:39.790
wip pack的话 那么它里边的脚本就非常

14:39.790 --> 14:42.790
就要经常使用到脚本 好吧 这是关于脚本

