WEBVTT

00:00.430 --> 00:03.830
好 那咱们就开始来学习这个NPM

00:03.830 --> 00:07.830
首先呢 我们来学习NPM最基本的使用啊

00:07.830 --> 00:09.330
就是一个几个命令

00:09.330 --> 00:13.230
这几个命令呢 主要是来完成包着包的安装

00:13.230 --> 00:16.930
而且呢 我们今天这个浙杰克学习的命令呢

00:16.930 --> 00:20.030
也非常非常常见啊 我们后边用NPM的话

00:20.030 --> 00:22.330
绝大部分时候呢 都是用使用的这个命令

00:22.330 --> 00:23.730
好 咱们来看一下啊

00:23.730 --> 00:26.530
首先是包的安装啊 包的安装

00:26.530 --> 00:28.230
包的安装呢 什么意思呢

00:28.230 --> 00:30.830
安装的单子大家要记住啊 叫Install

00:30.830 --> 00:33.430
啊 里面以前呢 安装一些游戏啊

00:33.430 --> 00:37.330
安装一些本地的东西都啊 都是叫做Install啊 安装

00:37.330 --> 00:40.530
啊 那么对应的卸责呢 就叫前面加个UN

00:40.530 --> 00:43.330
对吧 叫做UniStore

00:43.330 --> 00:45.430
安装呢 其实我们这里说的安装啊

00:45.430 --> 00:49.130
其实很简单啊 就叫做下载 下载一个包

00:49.130 --> 00:52.330
那么犹豫呢 这里首先我们安装之前要解决一个问题

00:52.330 --> 00:55.730
就是因为NPM呢 它是国外的服务器

00:55.730 --> 00:58.630
就是它 我们之前说过啊 它里面有个Recistry 对吧

00:58.630 --> 01:00.830
有个入口 其实就是一个数据库

01:00.830 --> 01:04.330
它放在国外的 那么数据库里面记录了各种这样的包

01:04.330 --> 01:08.330
但是这个数据库服务器呢 它在国外

01:08.330 --> 01:11.830
犹豫呢 你们大家都中所周知的原因啊

01:11.830 --> 01:15.030
我们国内呢 要从国外的服务器下东西的话

01:15.030 --> 01:18.230
那么就比较慢啊 所以说可能会受到网数的影响

01:18.230 --> 01:20.730
导致了我们这个包呢 下载失败啊

01:20.730 --> 01:22.830
或者是下载非常非常缓慢

01:22.830 --> 01:24.730
为了避免这个问题呢

01:24.730 --> 01:27.230
因此呢 我们这里呢 要做一些处理

01:27.230 --> 01:32.230
我们安装好了NPM之后呢 需要重新设置一下Recistry的地址

01:32.230 --> 01:33.930
把它设置为国内地址

01:33.930 --> 01:36.230
因为我们知道Recistry就是一个数据库嘛 对吧

01:36.230 --> 01:38.830
数据库呢 它里面保存了包的各种各样的信息

01:38.830 --> 01:41.030
包括包的代码文件啊

01:41.030 --> 01:43.530
那么我们下载的时候呢 是从这个数据库取下载

01:43.530 --> 01:45.430
因为它在国外呢 下载起来比较缓慢

01:45.430 --> 01:48.630
因此呢 我们最好是能够从国内下载

01:48.630 --> 01:52.030
但是呢 NPM它是没有提供国内的服务器

01:52.030 --> 01:56.030
那怎么办呢 目前呢 有一家公司叫做淘宝

01:56.030 --> 01:58.630
它给你提供了一个国内的服务器

01:58.630 --> 02:01.630
它的服务器的地址呢 是这个地址

02:01.630 --> 02:03.130
这个地址 不用去背啊 不用去背

02:03.130 --> 02:05.430
我们这个这件事呢 只做一次就行了

02:05.430 --> 02:08.230
我们也就是说呢 我们呢

02:08.230 --> 02:10.730
我们下载包呢 应该从这个地址去下载

02:10.730 --> 02:13.030
而不是从它官方服务器去下载

02:13.030 --> 02:14.230
原来这意思嘛

02:14.230 --> 02:16.330
所以说我们要首先要设置一下啊

02:16.330 --> 02:18.330
设置了一次过后呢 它以后呢

02:18.330 --> 02:20.130
就全部从这个地址下载了

02:20.130 --> 02:23.030
那么怎么来设置呢 就这样子 下面这个就代码

02:23.030 --> 02:24.830
不是代码啊 应该说就命令

02:24.830 --> 02:28.030
因为NPM它们给我们提供了叫做CD CLI

02:28.030 --> 02:29.430
一个命令航工具

02:29.430 --> 02:31.830
那么我们通过这个命令来进行设置

02:31.830 --> 02:35.430
把复制一下 复制一下来进行设置就行了

02:35.430 --> 02:37.130
这里我们复制一下啊

02:37.130 --> 02:39.730
到我们的工程里边来 随便找个地方啊

02:39.730 --> 02:41.930
随便找个地方 比方说就这吧

02:41.930 --> 02:45.030
点击右键 中端中打开

02:45.030 --> 02:47.430
然后呢 在这里边我们把这个命令粘贴过来

02:47.430 --> 02:49.630
就这么个命令

02:49.630 --> 02:51.730
那么我这个命令 我们以后会想起啊

02:51.730 --> 02:53.330
这个叫做配置命令啊

02:53.330 --> 02:55.930
NPM的配置命令 我们以后会详细解释

02:55.930 --> 02:59.130
现在我们只需要复制一下 然后回车

02:59.130 --> 03:01.430
OK 就行了 它只要没爆错

03:01.430 --> 03:04.930
它也用的是就是Linux这种命令习惯

03:04.930 --> 03:08.030
命令风格 没有消息 就是好消息

03:08.030 --> 03:09.630
它只要不爆错就行

03:09.630 --> 03:11.730
好 那么这样子呢 就设置成功了

03:11.730 --> 03:14.530
那么怎么来检验设置 有没有设置成功呢

03:14.530 --> 03:16.130
你使用这个命令

03:16.130 --> 03:18.330
NPM Config Guest Registry

03:18.830 --> 03:21.830
使用这个命令 粘贴过来 看一下

03:21.830 --> 03:23.930
如果你看到这个地址

03:23.930 --> 03:27.630
如果说你看到这个地址 那么就是设置成功了

03:27.630 --> 03:29.230
当然你肯定是能看到这个地址

03:29.230 --> 03:31.330
因为只要前面没爆错

03:31.330 --> 03:34.930
你也不会爆错 我目前还没有遇到有同学在这里爆错的

03:34.930 --> 03:36.130
那么就设置成功了

03:36.130 --> 03:38.730
那么之后呢 我们在用它俩安装包的时候呢

03:38.730 --> 03:42.130
它就不是直接从官方服务器进行安装了

03:42.130 --> 03:44.430
它是怎么回事呢 看下面这个图

03:44.430 --> 03:47.630
它是这么回事 给它放大一点

03:48.630 --> 03:51.730
以后我们再用NPM去下载包的时候呢

03:51.730 --> 03:52.730
它是从哪里下载了

03:52.730 --> 03:56.630
它就不是从海外的NPM官方服务器去下载了

03:56.630 --> 04:00.930
而是从国内的淘宝Registry这个服务器去下载

04:00.930 --> 04:02.530
那么这个服务器的东西哪来的呢

04:02.530 --> 04:04.130
它的包的数据哪来的呢

04:04.130 --> 04:09.030
它是用一种方式去同步海外的服务器

04:09.030 --> 04:10.730
你可以这样的想象

04:10.730 --> 04:13.930
如果说你在下载的时候

04:13.930 --> 04:15.930
如果说你下载包 它国内已经有了

04:15.930 --> 04:18.330
它服务器已经有了 它就直接给力了

04:18.330 --> 04:21.330
如果说你下载包 它国内没有 没有怎么办呢

04:21.330 --> 04:22.830
它就会去同步

04:22.830 --> 04:26.330
它会在这个服务器先从海外的服务器去下载

04:26.330 --> 04:29.030
因为它那个服务器经过了某些处理

04:29.030 --> 04:29.930
你们都懂的

04:29.930 --> 04:32.330
然后它的下载速度是非常快的

04:32.330 --> 04:33.930
它从海外先去下载

04:33.930 --> 04:36.330
下载完了过后 保存到自己的服务器上

04:36.330 --> 04:38.530
然后再从自己的服务器上提供给你

04:38.530 --> 04:41.430
那么这样子 你这边下载的速度就比较快了

04:41.430 --> 04:44.830
所以说我们也把这种模式叫做进向

04:44.830 --> 04:47.130
我们把它叫做淘宝进向 淘宝做的

04:47.130 --> 04:49.230
进向怎么意思 就是一模一样的

04:49.230 --> 04:51.130
它这个服务器里面给你提供的东西

04:51.130 --> 04:53.230
跟海外的服务器是一模一样的

04:53.230 --> 04:56.130
它是用某种方式来去完成同步的

04:56.130 --> 04:57.230
那么就完事了

04:57.230 --> 05:00.730
所以说你在国内去下载呢

05:00.730 --> 05:03.830
相当于就是在海外的MPM官方去下载了

05:03.830 --> 05:09.230
可能某些时候一些版本没有得到及时的更新

05:09.230 --> 05:11.730
那些都是小版本没更新

05:11.730 --> 05:13.430
大版本一定是更新的

05:13.430 --> 05:15.530
小版本没更新的 那个也影响不大

05:15.530 --> 05:18.830
所以说我们一般都是通过国内的淘宝进向来进行下载

05:18.830 --> 05:20.730
没什么意思嘛

05:20.730 --> 05:24.330
不是说有了进向它就可以不用了海外的服务器了

05:24.330 --> 05:25.230
它的数据哪来的

05:25.230 --> 05:28.330
它的数据也是从海外的服务器拿过来的

05:28.330 --> 05:30.930
这是关于我们先做一个这么一个配置

05:30.930 --> 05:32.730
好 配置好了过后就形成这种模式了

05:32.730 --> 05:36.430
你之后只需要跟国内的淘宝服务器打交道就行了

05:36.430 --> 05:38.130
这里我先说一下

05:38.130 --> 05:41.130
那么接下来就是具体的包的安装了

05:41.130 --> 05:44.830
包的安装NPM它分为两种安装方式

05:44.830 --> 05:47.630
第一种是最常见的本地安装

05:47.630 --> 05:49.230
这个一定要学会

05:49.230 --> 05:51.230
另外一个全局安装的也得学会

05:51.230 --> 05:53.930
也很简单很简单一点难度都没有

05:53.930 --> 05:55.430
好 咱们一个个来说

05:55.430 --> 05:57.330
首先是本地安装

05:57.330 --> 05:59.430
本地安装怎么安装呢

05:59.430 --> 06:05.230
本地安装是使用命令NPM空格Install安装

06:05.230 --> 06:08.030
后边写上啥写上包的名字

06:08.130 --> 06:11.930
或者是能进行简写NPMI就表示Install

06:11.930 --> 06:15.430
然后后边写上包名就可以完成本地安装了

06:15.430 --> 06:18.130
好 那么咱们来安装一下

06:18.130 --> 06:19.730
用本地安装的时候

06:19.730 --> 06:23.330
你一定要注意就是这个提示服的目录

06:23.330 --> 06:25.330
比方说提示服的目录是这个

06:25.330 --> 06:27.330
那么它的包 下载的包安装到哪

06:27.330 --> 06:30.530
它就安装到这个目录里面

06:30.530 --> 06:31.530
这个意思吧

06:31.530 --> 06:33.430
如果说你的提示服目录

06:33.430 --> 06:36.630
比方说

06:36.630 --> 06:39.030
如果说你的提示服目录是这个

06:39.830 --> 06:41.330
那么它就安装到哪呢

06:41.330 --> 06:43.530
安装到这个目录

06:43.530 --> 06:46.030
所以说你一定要搞清楚你的提示服目录在哪

06:46.030 --> 06:47.830
那么我们应该安装到哪个目录呢

06:47.830 --> 06:51.030
我们通常安装到工程的根目录

06:51.030 --> 06:52.930
比方说你要现在要做一个学生管理系统

06:52.930 --> 06:54.430
你建造一个文件夹

06:54.430 --> 06:56.930
OK 那么就在这个文件夹里边开发代码

06:56.930 --> 06:59.230
这个文件夹就是你的工程根目录

06:59.230 --> 07:01.930
你就在工程根目录里边进行本地安装

07:01.930 --> 07:03.230
通常都是这样做的

07:03.230 --> 07:04.830
那我这里呢因为上课

07:04.830 --> 07:05.830
也没有什么工程

07:05.830 --> 07:07.030
我就随便找个目录

07:07.130 --> 07:09.130
我们这些课就安装到这个目录下面

07:09.130 --> 07:10.130
点击右键

07:10.130 --> 07:12.130
在中端中打开

07:12.130 --> 07:13.630
那么这里开了三个跑线了

07:13.630 --> 07:13.930
对吧

07:13.930 --> 07:15.330
我们刚才一直在开

07:15.330 --> 07:16.230
开了很多个了

07:16.230 --> 07:17.530
那么你可以删除一些

07:17.530 --> 07:19.330
删除一些不要的

07:19.330 --> 07:20.530
删除一些不要的

07:20.530 --> 07:21.830
保留一个就行了

07:21.830 --> 07:23.730
我们这里使用mini clear

07:23.730 --> 07:24.630
清楚一下

07:24.630 --> 07:25.830
看得清楚一点

07:25.830 --> 07:26.530
好 来吧

07:26.530 --> 07:28.830
咱们来安装一个包

07:28.830 --> 07:31.330
我们使用npm

07:31.330 --> 07:32.630
然后这里使用i

07:32.630 --> 07:34.530
或者是写全install

07:34.530 --> 07:36.830
后面写上一个包的名字

07:36.830 --> 07:38.030
安装一个啥包呢

07:38.030 --> 07:39.530
安装一个解query

07:39.530 --> 07:42.130
里面学习过的解query

07:42.130 --> 07:44.630
好 这里一回车

07:44.630 --> 07:46.630
接下来它就会从淘宝服务器上

07:46.630 --> 07:47.830
去下载这个包

07:47.830 --> 07:49.430
就安装完成了

07:49.430 --> 07:52.230
安装完了过后

07:52.230 --> 07:53.930
它这里有一些

07:53.930 --> 07:55.230
有一个黄色的东西叫做

07:55.230 --> 07:55.830
WOW

07:55.830 --> 07:57.830
表示警告

07:57.830 --> 07:59.630
这里有一些警告的东西

07:59.630 --> 08:00.230
警告的东西

08:00.230 --> 08:01.430
这些警告的东西

08:01.430 --> 08:04.530
我现在还不好给你们解释

08:04.530 --> 08:05.730
我们后边再说

08:05.730 --> 08:06.230
后边再说

08:06.330 --> 08:07.430
警告不影响

08:07.430 --> 08:09.230
不影响包的安装

08:09.230 --> 08:09.830
你看一下

08:09.830 --> 08:11.030
最下面的就行了

08:11.030 --> 08:13.830
它说added

08:13.830 --> 08:17.030
added是不是添加了一个package

08:17.030 --> 08:18.730
是不是添加了一个package

08:18.730 --> 08:19.930
到我们的工程里边

08:19.930 --> 08:21.130
对吧

08:21.130 --> 08:22.730
那么只要没出现error

08:22.730 --> 08:25.030
error就是error

08:25.030 --> 08:26.630
没有这里出现红色的东西

08:26.630 --> 08:27.930
那么就表示没有问题

08:27.930 --> 08:28.630
安装完成

08:28.630 --> 08:29.230
有些警告了

08:29.230 --> 08:30.730
我们后面再说

08:30.730 --> 08:32.730
clear 把清楚

08:32.730 --> 08:35.630
安装完了过后在哪呢

08:35.630 --> 08:36.630
大家已经看到了

08:36.630 --> 08:37.830
它会出现在什么地方呢

08:37.830 --> 08:39.630
它会出现在当前目录下面的

08:39.630 --> 08:41.930
load majus目录里边

08:41.930 --> 08:43.830
一个安装包在哪呢

08:43.830 --> 08:44.830
这些是我们自己写的

08:44.830 --> 08:45.530
这个erase

08:45.530 --> 08:47.130
你们都懂的是mockdown里边的东西

08:47.130 --> 08:47.530
没关系

08:47.530 --> 08:48.730
跟我们没关系

08:48.730 --> 08:49.330
在哪呢

08:49.330 --> 08:50.430
在这

08:50.430 --> 08:51.930
它是不是把我们的包下来到哪了

08:51.930 --> 08:53.030
下来到这个目录里边的

08:53.030 --> 08:54.730
叫load majus目录

08:54.730 --> 08:56.330
这个目录我们展开

08:56.330 --> 08:57.230
你看一下

08:57.230 --> 08:58.830
是不是接query一个文件

08:58.830 --> 08:59.830
就下来下来了

08:59.830 --> 09:00.130
对吧

09:00.130 --> 09:01.630
你看接query

09:01.630 --> 09:03.030
里边有一些乱七八糟的文件

09:03.030 --> 09:04.930
这些文件里面现在可能不太清楚

09:04.930 --> 09:05.730
是啥玩意

09:05.730 --> 09:07.530
你们以后就知道了

09:07.530 --> 09:08.830
那么它的单码文件在哪呢

09:08.830 --> 09:09.630
在这

09:09.630 --> 09:10.930
我们要使用的文件在哪呢

09:10.930 --> 09:11.430
在这

09:11.430 --> 09:12.230
disk

09:12.230 --> 09:13.530
disk目录下面

09:13.530 --> 09:14.730
这些文件夹了

09:14.730 --> 09:15.230
它的规

09:15.230 --> 09:17.330
它都是有满足一定规范的

09:17.330 --> 09:18.030
这些文件夹了

09:18.030 --> 09:19.130
你们以后了

09:19.130 --> 09:20.130
学了wipack之后了

09:20.130 --> 09:20.730
你明白了

09:20.730 --> 09:23.130
因为我们这门客是用不到接query的

09:23.130 --> 09:23.830
用不到的

09:23.830 --> 09:24.130
为什么

09:24.130 --> 09:25.830
因为我们在load环境

09:25.830 --> 09:28.330
load环境里边用接query吗

09:28.330 --> 09:30.530
接query是在浏览器里边管理dome的

09:30.530 --> 09:31.330
对吧

09:31.330 --> 09:32.630
load里边它又没有dome

09:32.630 --> 09:34.230
所以它用不到接query

09:34.230 --> 09:35.030
用不到

09:35.030 --> 09:36.430
别管接query里边是什么

09:36.430 --> 09:38.730
总之接query的个包是就下来了

09:38.730 --> 09:39.830
下来了

09:39.830 --> 09:41.830
那么咱们再来安装一个包

09:41.830 --> 09:44.030
再来安装一个

09:44.030 --> 09:45.030
比方说

09:45.030 --> 09:47.730
咱们安装一个包叫做loader

09:47.730 --> 09:49.230
loader

09:49.230 --> 09:49.830
见过没

09:49.830 --> 09:51.830
你们用过没

09:51.830 --> 09:54.830
就是提供了一些GS的常用工具

09:54.830 --> 09:55.930
常用工具

09:55.930 --> 09:57.830
这里我们是用npm

09:57.830 --> 10:01.530
再来一个loader

10:01.530 --> 10:03.830
好 回测

10:04.130 --> 10:05.530
同样的出现了一些警告

10:05.530 --> 10:07.130
不管它

10:07.130 --> 10:08.130
现在我们来看一下

10:08.130 --> 10:10.130
loader嘛就是目录下面有没有

10:10.130 --> 10:10.730
现在看不见

10:10.730 --> 10:11.330
看不见原因

10:11.330 --> 10:13.630
因为我们这里文件结构没有刷新

10:13.630 --> 10:15.930
我们这里点击一下刷新

10:15.930 --> 10:16.430
刷新过后

10:16.430 --> 10:17.830
你看是不是有个loader

10:17.830 --> 10:18.730
对吧

10:18.730 --> 10:19.430
它里边提供

10:19.430 --> 10:22.330
它这个包里边的东西也安装进来了

10:22.330 --> 10:23.330
现在怎么用

10:23.330 --> 10:24.130
怎么来用这个包

10:24.130 --> 10:25.130
先别管

10:25.130 --> 10:26.230
先别管怎么用

10:26.230 --> 10:27.230
我们先把它

10:27.230 --> 10:27.930
先学习

10:27.930 --> 10:29.730
怎么来把它下载下来安装

10:29.730 --> 10:30.930
那么这样子的安装方式

10:30.930 --> 10:32.830
是不是比以前好多了

10:32.830 --> 10:34.030
以前你怎么办

10:34.030 --> 10:35.330
所以在百度

10:35.330 --> 10:36.330
进官网

10:36.330 --> 10:37.730
然后下载下载

10:37.730 --> 10:39.130
然后拷贝到工程里边

10:39.130 --> 10:40.330
然后再一点点用

10:40.330 --> 10:41.730
现在是不是一个命令就搞定了

10:41.730 --> 10:43.930
是不是非常方便了

10:43.930 --> 10:45.330
我们这里可立了

10:45.330 --> 10:46.330
嗯 清空

10:47.630 --> 10:49.130
好 那么这两个包呢

10:49.130 --> 10:49.930
你会看到

10:49.930 --> 10:50.930
只有两个文件结

10:50.930 --> 10:51.530
对吧

10:51.530 --> 10:53.930
那我们接下来看一下

10:53.930 --> 10:56.730
loader嘛就是里边的安装的过程中

10:56.730 --> 10:57.730
我们有哪些地方

10:57.730 --> 11:00.430
需要大家引起注意的

11:00.430 --> 11:02.130
第一个

11:02.230 --> 11:03.830
随着开发的进行

11:03.830 --> 11:06.430
loader嘛就是目录会变得异常庞大

11:06.430 --> 11:07.730
异常庞大

11:07.730 --> 11:08.830
为什么这样说呢

11:08.830 --> 11:10.630
因为我们开发的过程

11:10.630 --> 11:12.030
肯定要有很多的依赖

11:12.030 --> 11:13.230
我们这里才两个依赖

11:13.230 --> 11:14.230
肯定不止两个依赖

11:14.230 --> 11:16.530
我们可能会安装各种各样的包

11:16.530 --> 11:17.830
那么这个时候

11:17.830 --> 11:20.430
loader嘛就是东西会越来越多

11:20.430 --> 11:21.030
那么目录

11:21.030 --> 11:23.130
你看一下现在的就是

11:23.130 --> 11:24.030
现在我们的计册

11:24.030 --> 11:25.430
因为我使用了计册

11:25.430 --> 11:26.430
计册里边

11:26.430 --> 11:28.830
你看一下是不是已经有1000多个文件了

11:28.830 --> 11:31.130
你看是不是已经添加了1000多个文件了

11:31.530 --> 11:32.830
下载下载很多了

11:32.830 --> 11:35.730
所以说我们loader嘛就是这个目录

11:35.730 --> 11:37.630
一般不会用来传输的

11:37.630 --> 11:39.830
比方说我要给你考备一个工程

11:39.830 --> 11:42.430
我不会把loader嘛就是目录也考过去

11:42.430 --> 11:43.430
不会

11:43.430 --> 11:45.030
比方说我要把这个工程

11:45.030 --> 11:46.130
部署到服务器

11:46.130 --> 11:47.730
部署到生产环境

11:47.730 --> 11:48.930
比方我开发完成了

11:48.930 --> 11:50.730
我把它放到服务器上

11:50.730 --> 11:52.630
放到生产环境里边去

11:52.630 --> 11:53.830
我传输的时候

11:53.830 --> 11:56.230
也不会去传输loader嘛就是

11:57.730 --> 11:59.730
所以说loader嘛就是目录

11:59.730 --> 12:01.530
只是适用于本地

12:01.530 --> 12:03.730
因为你本地开发的时候要用到这些包

12:03.730 --> 12:05.330
要用到这些包

12:05.330 --> 12:07.530
那么以后你要考备工程怎么办呢

12:07.530 --> 12:09.130
你需要把它还原

12:09.130 --> 12:10.330
你需要把它还原

12:10.330 --> 12:12.130
那么至于怎么还原

12:12.130 --> 12:14.430
我们后边再说现在不着急

12:14.430 --> 12:15.330
所以说总之呢

12:15.330 --> 12:16.730
你听到我的意思

12:16.730 --> 12:18.930
总之loader嘛就是目录呢

12:18.930 --> 12:20.330
只是你本机可以用

12:20.330 --> 12:21.730
本机用一下

12:21.730 --> 12:23.630
你凡是要设计到传输的

12:23.630 --> 12:24.830
跟它没关系

12:24.830 --> 12:26.230
所以说我们要怎么办呢

12:26.230 --> 12:29.330
我们要在计册里边把它忽略掉

12:29.330 --> 12:30.430
因为忽略掉之后呢

12:30.430 --> 12:33.030
你到时候你管理计册版本的时候

12:33.030 --> 12:35.630
就会把loader嘛就是目录的就忽略掉了

12:35.630 --> 12:36.730
到时候你传输的时候

12:36.730 --> 12:38.330
传输到你的github上面

12:38.330 --> 12:41.530
传输到你们公司里边的原码服务器上

12:41.530 --> 12:43.630
也不会传输loader嘛就是

12:43.630 --> 12:45.730
所以我们这里要做非常重要的一件事

12:45.730 --> 12:46.730
大家都要做的

12:46.730 --> 12:49.030
就是你们如果里面那边跟着我做的话

12:49.030 --> 12:51.330
使用了如果说使用了计册的话

12:51.330 --> 12:55.130
一定要在工程里边添加一个目录

12:55.130 --> 12:56.530
添加一个文件叫做

12:56.530 --> 12:57.730
你们懂的叫什么文件呢

12:59.730 --> 13:03.630
叫做get一个load

13:03.630 --> 13:04.330
对吧

13:04.330 --> 13:06.130
要添加这么一个文件

13:06.130 --> 13:07.530
添加这么一个文件

13:07.530 --> 13:08.830
用这个文件里面

13:08.830 --> 13:10.630
我们至少写上这么这么个东西

13:10.630 --> 13:13.130
load modules

13:13.130 --> 13:16.330
modules保存

13:16.330 --> 13:17.430
那么这样子你看一下

13:17.430 --> 13:19.930
load modules目录是不是被忽略掉了

13:19.930 --> 13:20.730
对不对

13:20.730 --> 13:22.130
它就被忽略掉了

13:22.130 --> 13:23.030
没啥意思吗

13:23.030 --> 13:24.030
咱们一定要注意

13:24.030 --> 13:26.530
把load modules目录给它忽略掉

13:26.530 --> 13:28.530
那么这样子它这个github没关系了

13:28.530 --> 13:30.930
所以说你们以后了之后拿我的原码

13:30.930 --> 13:33.330
从github上去拿取我的原码的时候

13:33.330 --> 13:35.730
也会拿不到这个load module目录

13:35.730 --> 13:37.330
没关系

13:37.330 --> 13:38.730
拿不到的话我们之后

13:38.730 --> 13:42.130
会有办法教大家如何来还原这个目录

13:42.130 --> 13:44.530
它不是通过传输来还原的

13:44.530 --> 13:45.930
然后我们可以看到工程里面

13:45.930 --> 13:48.330
还有一个文件叫做pac.log

13:48.330 --> 13:49.630
log.json

13:49.630 --> 13:50.730
这个文件干嘛用的呢

13:50.730 --> 13:51.730
这个文件别管

13:51.730 --> 13:53.330
我们后面会解释

13:53.330 --> 13:55.330
这个文件先别管

13:55.330 --> 13:57.130
这是第一个要忽略一下

13:58.130 --> 13:59.530
第二个就是

13:59.530 --> 14:01.530
我们刚才使用的是本地安装

14:01.530 --> 14:05.130
本地安装实际上能够解决绝大部分问题

14:05.130 --> 14:07.330
就是我们凡是要依赖包的时候

14:07.330 --> 14:11.130
绝大部分情况下都是使用的是本地安装

14:11.130 --> 14:13.330
因为这个本地安装它有个好处就是

14:13.330 --> 14:15.130
它的影响范围很窄

14:15.130 --> 14:17.230
它只会影响当前目录

14:17.230 --> 14:18.430
其他只目录

14:18.430 --> 14:19.330
也说我们

14:19.330 --> 14:20.930
因为我们开发一个工程

14:20.930 --> 14:22.130
比方说我们这里是个项目

14:22.130 --> 14:23.530
这个文件讲是一个项目

14:23.530 --> 14:26.630
这个项目里面我们开发的过程中需要依赖一些包

14:26.630 --> 14:28.530
那么只在这个目录下面安装

14:28.530 --> 14:30.630
那么我们只在这个目录

14:30.630 --> 14:34.330
以及它这个目录的指目录下面去使用这些包

14:34.330 --> 14:36.030
除了这个目录就使用不了了

14:36.030 --> 14:37.030
这就是本地安装

14:37.030 --> 14:38.630
它的影响范围很窄

14:38.630 --> 14:40.830
每个工程有每个工程的依赖

14:40.830 --> 14:44.230
所以说我们平时用的最多的是本地安装

14:44.230 --> 14:49.030
我们也就说通常在项目的跟目录里边使用本地安装

14:49.030 --> 14:50.230
好 下一个就是

14:50.230 --> 14:52.930
当我们安装一个包的时候呢

14:52.930 --> 14:56.130
如果说这个包它本身还有依赖

14:56.130 --> 14:58.930
那么NPM它会自动管理依赖

14:58.930 --> 15:01.490
它会把这些依赖的同样的下载到

15:01.490 --> 15:03.530
load majus目录下面

15:03.530 --> 15:04.730
那我们来试一下

15:04.730 --> 15:06.030
比方我们

15:06.030 --> 15:07.930
比方说我们后边要学习的

15:07.930 --> 15:09.630
concult加借

15:09.630 --> 15:10.630
把它打开

15:10.630 --> 15:11.930
我现在再安装一个

15:11.930 --> 15:12.930
后边我们要安装

15:12.930 --> 15:14.530
要学习这个react

15:16.230 --> 15:17.230
要学习这个玩意

15:17.230 --> 15:19.930
那么到时候我们肯定要安装这个react

15:19.930 --> 15:22.430
但有人会说react不是浏览器吗

15:22.430 --> 15:24.230
在浏览器里面运行的

15:24.230 --> 15:26.030
是

15:26.730 --> 15:29.330
但是我们目前是在load的环境

15:29.330 --> 15:31.630
在浏览器环境里边怎么来使用NPM

15:31.630 --> 15:33.730
怎么来去玩这些玩意

15:33.730 --> 15:36.330
我们后边有一门客叫做webpack

15:36.330 --> 15:38.330
它可以把我们这一套东西

15:38.330 --> 15:39.730
带到浏览器环境里边

15:39.730 --> 15:40.830
现在先别管

15:40.830 --> 15:42.630
我们现在只是安装

15:42.630 --> 15:44.030
只是把它下载下来

15:44.030 --> 15:46.330
NPMreact

15:46.330 --> 15:47.730
来 回车

15:47.730 --> 15:50.460
看一下

15:50.460 --> 15:51.660
安装完了

15:51.660 --> 15:52.860
它有些警告

15:52.860 --> 15:53.760
别管它

15:53.760 --> 15:55.160
clear

15:55.160 --> 15:55.960
安装完了之后

15:55.960 --> 15:57.760
让我们来看一下load的码究室目录

15:57.760 --> 15:59.460
刷新一下

15:59.460 --> 16:02.160
你会发现我们只安装了一个包

16:02.160 --> 16:03.760
我们是不是只安装了react

16:03.760 --> 16:05.160
你看是不是react

16:05.160 --> 16:06.660
它给我下载了多少

16:06.660 --> 16:08.460
react is

16:08.460 --> 16:09.760
proper types

16:09.760 --> 16:11.560
objects are sent

16:11.560 --> 16:13.360
lose mt

16:13.360 --> 16:14.960
还有什么json tokens

16:14.960 --> 16:16.960
下载了一大堆

16:16.960 --> 16:18.660
那这是怎么回事了

16:18.660 --> 16:19.760
怎么回事了

16:19.760 --> 16:22.760
是因为react这个包

16:22.760 --> 16:24.060
它本身是有依赖的

16:24.060 --> 16:25.860
它依赖其他包

16:25.860 --> 16:29.760
因此NPM它能知道react还有依赖

16:29.760 --> 16:32.360
因此它会再下载react的时候

16:32.360 --> 16:35.360
它就把react依赖的包又下载下来

16:35.360 --> 16:36.860
如果它依赖的包还依赖了

16:36.860 --> 16:38.660
它也同样会再下载下来

16:38.660 --> 16:40.760
也就是说我们再下载一个包的时候

16:40.760 --> 16:42.860
它会先去读出这么一个东西

16:42.860 --> 16:44.860
叫做我们把它叫做依赖数

16:44.860 --> 16:47.660
这个了解一下就行了

16:47.660 --> 16:49.160
因为我们学NPM的话

16:49.160 --> 16:50.660
NPM的命令非常多

16:50.660 --> 16:51.960
我们肯定是

16:51.960 --> 16:53.460
东线内容也非常多

16:53.460 --> 16:54.260
支持联业很多

16:54.260 --> 16:56.060
我们不可能全部学完

16:56.060 --> 16:57.760
我们只是学它对常用的

16:57.760 --> 16:59.160
我们开发中要用到的

16:59.160 --> 17:00.360
开发中几乎不用到的

17:00.360 --> 17:01.960
我们就把它淡化

17:01.960 --> 17:03.560
或者是直接不学

17:03.560 --> 17:04.760
如果说你们以后

17:04.760 --> 17:09.960
要用一些非常不常见的一些命令的话

17:09.960 --> 17:12.260
去NPM的官网去看月图

17:12.260 --> 17:16.260
官网是英文文档

17:16.260 --> 17:17.460
我这样就跟你说

17:17.460 --> 17:18.660
当你有一天要用到

17:18.660 --> 17:21.160
那些极其罕见的命令的时候

17:21.160 --> 17:24.160
那个时候你的开发水平已经很高了

17:24.160 --> 17:27.860
一个时候你看英文文档已经不成问题了

17:27.860 --> 17:30.960
这里我们比方说一个包

17:30.960 --> 17:33.760
就是依赖包

17:33.760 --> 17:35.360
我们要依赖这个包

17:35.360 --> 17:38.160
那么这个包它可能又依赖别的包

17:38.160 --> 17:40.160
又依赖别的包

17:40.160 --> 17:42.660
那么别的包又可能会依赖别的包

17:42.660 --> 17:43.360
别的意思

17:43.360 --> 17:45.560
它会形成这种依赖关系

17:45.560 --> 17:47.560
当我们去下载这个包的时候

17:47.560 --> 17:50.960
NPM它会把依赖关系给你分析出来

17:50.960 --> 17:51.960
至于它怎么分析的

17:51.960 --> 17:55.100
我们后边会讲

17:55.100 --> 17:57.500
它会把关系给它分析出来

17:57.500 --> 17:58.400
分析出来过后

17:58.400 --> 18:00.100
它会形成一个依赖数

18:00.100 --> 18:02.400
就形成这么一种结构

18:02.400 --> 18:04.200
那么形成这么一种结构之后

18:04.200 --> 18:07.700
它会把所有的依赖包全部给你下载下来

18:07.700 --> 18:11.700
全部给你下载到陆德姆巴就是穆罗下面去

18:11.700 --> 18:12.400
别的意思

18:12.400 --> 18:14.400
这是官运它如何来管理依赖的

18:14.400 --> 18:16.800
所以说依赖根本就不用管

18:16.800 --> 18:18.200
它自动帮你搞定了

18:18.200 --> 18:19.400
你完全就不用管

18:19.400 --> 18:20.300
你只需要下载

18:20.300 --> 18:22.300
你要用哪个你就下载哪个

18:22.300 --> 18:24.300
它有什么依赖关系你完全不用管

18:24.300 --> 18:26.500
是不是非常方便

18:26.500 --> 18:28.800
那么继续看

18:28.800 --> 18:29.700
它说

18:29.700 --> 18:33.600
如果说你本地安装的包它带有一个CD

18:33.600 --> 18:36.000
这啥意思

18:36.000 --> 18:38.000
就是你下载这个包里边

18:38.000 --> 18:40.900
它也带了一些命令行工具

18:40.900 --> 18:44.400
可以通过一些命令来执行一些操作

18:44.400 --> 18:45.800
有的时候我们之后会遇到

18:45.800 --> 18:47.000
之后还遇到不少

18:47.000 --> 18:49.100
不少有这样有不少的这样的包

18:49.100 --> 18:50.900
它会给你带一个命令

18:50.900 --> 18:53.000
用这个命令来进行操作

18:53.000 --> 18:55.400
比方说最常见的

18:55.400 --> 18:58.500
我们后边要用到的一个就是

18:58.500 --> 19:02.700
一个包叫做Mochia

19:02.700 --> 19:04.000
这是啥包

19:04.000 --> 19:05.400
这是一个测试工具

19:05.400 --> 19:06.300
这是个测试工具

19:06.300 --> 19:10.540
我们把安装完了

19:10.540 --> 19:11.140
你看一看

19:11.140 --> 19:12.940
努德玛就是穆罗刷新一下

19:12.940 --> 19:15.540
说多了一大堆包

19:15.540 --> 19:17.240
它有很多很多的依赖关系

19:17.240 --> 19:17.940
有很多的

19:17.940 --> 19:20.040
所以我们平时要不要去看穆罗

19:20.040 --> 19:21.540
其实也不用看

19:21.640 --> 19:23.440
谁没说去看这个穆罗

19:23.440 --> 19:24.940
如果说要看的话

19:24.940 --> 19:27.440
不会就是检查一下自己包安在哪

19:27.440 --> 19:28.540
有没有安装成功

19:28.540 --> 19:29.940
一般都不用去检查了

19:29.940 --> 19:31.240
它这里只要没包错的话

19:31.240 --> 19:32.340
就安装成功了

19:32.340 --> 19:34.040
所以我们没有必要去看这个漏洞

19:34.040 --> 19:34.940
就是穆罗

19:34.940 --> 19:36.240
我这里给大家看

19:36.240 --> 19:37.440
主要是帮别人大家理解

19:37.440 --> 19:39.040
你看一下是不是有一带关系

19:39.040 --> 19:40.640
说明Mochia这个包

19:40.640 --> 19:42.240
这是个测试工具

19:42.240 --> 19:43.140
Mochia这个包

19:43.140 --> 19:44.240
它有很多的依赖

19:44.240 --> 19:44.640
对吧

19:44.640 --> 19:46.040
有很多的依赖

19:46.040 --> 19:47.040
那么Mochia这个包

19:47.040 --> 19:47.940
它就是这样子

19:47.940 --> 19:50.040
它给你提供了一个命令工具

19:50.040 --> 19:51.440
给你提供了一个命令工具

19:51.540 --> 19:53.040
你需要在命令里边

19:53.040 --> 19:55.540
需要在命令里边使用一个命令

19:55.540 --> 19:56.240
使用一个命令

19:56.240 --> 19:59.340
比方说这个命令叫做Mochia

19:59.340 --> 20:00.740
Mochia这个命令

20:00.740 --> 20:02.740
你看现在是不是识别不了这个命令

20:02.740 --> 20:03.040
对吧

20:03.040 --> 20:03.740
识别不了

20:03.740 --> 20:05.540
为什么识别不了呢

20:05.540 --> 20:08.640
因为你它这个命令是装在这里的

20:08.640 --> 20:09.040
对吧

20:09.040 --> 20:11.140
装在这里的Windows操作系统

20:11.140 --> 20:12.240
这个命令提示

20:12.240 --> 20:15.040
其实就是Windows操作系统的命令

20:15.040 --> 20:16.040
抛卸

20:16.040 --> 20:18.740
命令提示它是在环境变量里边

20:18.740 --> 20:20.240
你们学过的计算及基础

20:20.240 --> 20:21.440
应该知道环境变量

20:21.440 --> 20:23.840
在环境变量里边是找不到这个目录的

20:23.840 --> 20:26.240
找不到这个目录是不是找不到这个命令

20:26.240 --> 20:26.740
对吧

20:26.740 --> 20:28.540
自然找不到这个命令

20:28.540 --> 20:31.140
所以说这个命令是你是没法用的

20:31.140 --> 20:32.340
那怎么办呢

20:32.340 --> 20:35.040
对于本地安装的包它会这样子来处理

20:35.040 --> 20:38.340
NPM提供了一个工具叫做NPX

20:38.340 --> 20:39.840
NPX

20:39.840 --> 20:44.240
然后NPM它会把这个包里边的命令

20:44.240 --> 20:45.240
放到哪里

20:45.240 --> 20:47.140
放到LoadMochius目录下面的

20:47.140 --> 20:48.340
冰的文念甲里边

20:48.340 --> 20:49.640
你看一下

20:49.840 --> 20:51.040
这里写错了

20:51.040 --> 20:52.040
是一个底儿

20:52.040 --> 20:53.040
是一个底儿B

20:54.540 --> 20:57.930
是一个底儿B

20:57.930 --> 21:02.280
这里我们重新打开一次

21:02.280 --> 21:03.280
它会放到这

21:03.280 --> 21:04.780
LoadMochius目录下面

21:04.780 --> 21:06.280
表并下面

21:06.280 --> 21:07.480
你看一下我们这里

21:07.480 --> 21:08.680
表并下面你看一下

21:08.680 --> 21:09.680
是不是有很多的命令

21:09.680 --> 21:10.380
对吧

21:10.380 --> 21:11.380
这些命令哪来的

21:11.380 --> 21:12.880
有些是Mochius提供的

21:12.880 --> 21:14.880
有些是其他一代包提供的

21:14.880 --> 21:17.880
还有一些是刚才安装React的时候

21:17.880 --> 21:19.580
它也提供了

21:19.580 --> 21:22.380
它就提供了一些CD命令

21:22.380 --> 21:24.880
那么这些命令要怎么使用呢

21:24.880 --> 21:28.380
你要通过NPX这个命令来使用

21:28.380 --> 21:29.380
这个命令哪来的呢

21:29.380 --> 21:31.380
这个命令是安装NPM的时候

21:31.380 --> 21:34.180
它会地地自带了这么一个命令

21:34.180 --> 21:35.280
带了这么一个工具

21:35.280 --> 21:37.580
那么你在使用NPX的命令的时候

21:37.580 --> 21:38.480
它会怎么办呢

21:38.480 --> 21:40.380
它就会从当前目录里边

21:40.380 --> 21:43.380
去找一下LoadMochius目录下面的

21:43.380 --> 21:44.680
底儿B这个目录

21:44.680 --> 21:46.180
看底儿B这个目录下面

21:46.180 --> 21:47.780
有没有相应的命令

21:47.780 --> 21:49.280
比方说我们这个时候

21:49.280 --> 21:53.680
在使用这个就是Mochius

21:53.680 --> 21:55.980
你看是不是没有爆错了

21:55.980 --> 21:56.680
至少没有爆出

21:56.680 --> 21:57.980
它至少没有爆出什么错误

21:57.980 --> 21:59.680
就是这个命令找不到了对吧

21:59.680 --> 22:00.680
是不是没有爆出错误

22:00.680 --> 22:01.980
但是它爆了另外一个错误

22:01.980 --> 22:04.280
它说没有测试文件

22:04.280 --> 22:05.280
因为我们要测试的话

22:05.280 --> 22:06.880
需要写测试文件

22:06.880 --> 22:09.780
你们后面有一门课叫做测试

22:09.780 --> 22:10.780
就是代码测试

22:10.780 --> 22:12.780
那么测试课程会详细的讲解

22:12.780 --> 22:14.880
这个Mochius怎么去使用

22:14.880 --> 22:16.380
只不过现在这个Mochius命令

22:16.380 --> 22:18.580
肯定还差了一些环境

22:18.680 --> 22:19.680
所以说命令用不了

22:19.680 --> 22:21.980
但是这个命令是不是已经能识别了

22:21.980 --> 22:22.480
对吧

22:22.480 --> 22:23.480
这个命令是不是识别

22:23.480 --> 22:24.780
现在已经没问题了

22:24.780 --> 22:25.480
对不对

22:25.480 --> 22:27.880
识别已经是没有问题了

22:27.880 --> 22:28.780
它能识别这个命令的

22:28.780 --> 22:30.980
不像刚才我们运气跟Mochius的时候

22:30.980 --> 22:32.480
它说它根本就识别不了这个命令

22:32.480 --> 22:33.480
这个命令现在能识别了

22:33.480 --> 22:36.880
只不过运行这个命令过程中爆错了

22:36.880 --> 22:37.580
说明啥

22:37.580 --> 22:41.280
说明用NPX在对于本地安装的包

22:41.280 --> 22:42.680
如果说本地安装的包

22:42.680 --> 22:44.880
它可以提供了一些CD命令航工具

22:44.880 --> 22:46.680
你要用这个命令航工具的话

22:46.780 --> 22:50.080
那么你可以使用NPX空格来进行使用

22:50.080 --> 22:51.880
不能直接使用

22:51.880 --> 22:53.880
就这么个意思

22:53.880 --> 22:56.880
这是关于如果说带了命令怎么办

22:56.880 --> 22:58.680
是关于本地安装

22:58.680 --> 22:59.680
有问题吧

22:59.680 --> 23:01.780
下来大家随便找几个包

23:01.780 --> 23:03.780
比方我们课堂上安装的这几个包

23:03.780 --> 23:05.480
你可以去安装体验一下

23:07.080 --> 23:07.280
好

23:07.280 --> 23:10.480
接下来我们来说全局安装

23:10.480 --> 23:12.280
全局安装

23:12.280 --> 23:12.980
顾名思义

23:12.980 --> 23:15.680
全局安装肯定是不是安装到当前目录

23:15.880 --> 23:17.280
我们随便再找一个目录运行

23:17.280 --> 23:18.480
比方就这个目录运行

23:18.480 --> 23:20.980
那么安装的东西肯定不在当前目录

23:20.980 --> 23:21.880
比方说

23:21.880 --> 23:24.180
咱们就在跟目录下面运行

23:24.180 --> 23:27.580
一看一下有没有会不会在跟目录下面安装东西

23:27.580 --> 23:29.080
比方说我们在这里

23:29.080 --> 23:32.680
如果说使用本地安装

23:32.680 --> 23:34.880
安装一个什么Jquery

23:34.880 --> 23:38.520
看一下吧

23:38.520 --> 23:40.320
那么你是是不是出现在这

23:40.320 --> 23:41.020
对吧

23:41.020 --> 23:42.920
你这个提示服在哪个目录

23:42.920 --> 23:44.520
它就会安装到哪个目录

23:44.520 --> 23:45.320
它就出现在这了

23:45.320 --> 23:46.720
这是本地安装

23:46.720 --> 23:47.320
我们把删除

23:49.520 --> 23:50.520
这个删这个

23:50.520 --> 23:53.020
如果有的时候你要删除这个文件夹的话

23:53.020 --> 23:55.220
我建议你如果东西比较多的话

23:55.220 --> 23:56.820
你可能要等半天

23:56.820 --> 23:58.020
不是卡使了

23:58.020 --> 23:58.920
不是使击了

23:58.920 --> 23:59.320
它的删

23:59.320 --> 24:00.920
因为它文件太多了

24:00.920 --> 24:02.320
它要你知道

24:02.320 --> 24:04.720
我们之前说过文件多了

24:04.720 --> 24:05.520
那么操作起来

24:05.520 --> 24:07.320
无论是传输也好

24:07.320 --> 24:08.420
删除也好

24:08.420 --> 24:09.120
新增也好

24:09.120 --> 24:10.120
速度都比较慢

24:10.120 --> 24:11.420
新增可能还稍微好一点

24:11.420 --> 24:13.220
删除的话速度比较慢一点

24:13.220 --> 24:14.720
所以说我建议大家这样子

24:14.720 --> 24:15.320
要删的话

24:15.320 --> 24:16.120
这样子来删

24:16.120 --> 24:17.920
你把先把这个关掉

24:17.920 --> 24:19.620
关掉过后到文件夹里边

24:19.620 --> 24:21.220
就在这个点右键

24:21.220 --> 24:23.920
资源管理器里边在这个地方去删除

24:26.920 --> 24:30.420
咱们说回这个全局安装

24:30.420 --> 24:32.920
全局安装它肯定不是安装到当前目录的

24:32.920 --> 24:34.320
它是安装到哪的呢

24:34.320 --> 24:35.320
我们来看一下

24:35.320 --> 24:37.420
你可以通过一个命令来查看

24:37.420 --> 24:38.920
你全局安装的目录

24:38.920 --> 24:39.720
通过这个命令

24:39.720 --> 24:43.020
这个命令也是属于配置命令

24:43.020 --> 24:45.820
配置命令我们后边会详细解释

24:45.820 --> 24:47.220
通过这个命令来查看

24:47.220 --> 24:49.520
那么每个电脑是不太一样的

24:49.520 --> 24:50.620
基本上都是在这

24:50.620 --> 24:52.720
默认只要你没有去做特殊处理的话

24:52.720 --> 24:53.620
一般都在这

24:53.620 --> 24:55.220
前面是你的用户目录

24:55.220 --> 24:56.920
用户目录下面的appdata

24:56.920 --> 24:59.720
然后remote就是罗密

24:59.720 --> 25:01.020
后面一个npm

25:01.020 --> 25:01.520
就这个目

25:01.520 --> 25:02.820
它在安装这个目录下面

25:02.820 --> 25:03.620
咱们再复制一下

25:06.430 --> 25:06.830
打开

25:10.790 --> 25:11.490
回测

25:11.490 --> 25:12.790
你看是不是这个目录

25:12.790 --> 25:13.990
我这里是不是空的

25:13.990 --> 25:14.690
空的

25:14.690 --> 25:15.490
有这么一个玩意

25:15.490 --> 25:16.690
这个玩意别管

25:16.690 --> 25:17.890
这个玩意别管

25:17.890 --> 25:18.990
这个玩意它是一个

25:18.990 --> 25:20.990
它就是我们刚才看到的配置文件

25:20.990 --> 25:22.590
后面我们就会专门来讲配置

25:22.590 --> 25:23.590
现在别管

25:23.590 --> 25:25.390
那么这个npm目录是不是空的

25:25.390 --> 25:26.290
什么都没有

25:26.290 --> 25:29.090
因为我们没有进行任何的全局安装

25:29.090 --> 25:31.090
那么怎么来进行全局安装呢

25:31.090 --> 25:32.990
我这好像没有把命令写下来

25:32.990 --> 25:33.590
对吧

25:33.590 --> 25:34.090
好

25:34.090 --> 25:35.390
那么我们去做全

25:35.390 --> 25:38.990
如果说要进行全局安装的话

25:38.990 --> 25:39.690
使用命令

25:41.290 --> 25:43.590
使用命令

25:43.590 --> 25:44.490
什么命令呢

25:44.490 --> 25:46.790
npm install

25:46.790 --> 25:48.190
然后加上一个

25:48.190 --> 25:49.990
跟这个install这个命令

25:49.990 --> 25:52.290
安装命令加上一个参数

25:52.290 --> 25:53.190
两个横杆

25:53.190 --> 25:54.490
global

25:54.490 --> 25:55.890
后面要写包名

25:55.890 --> 25:57.390
那么这样子就是全局安装

25:58.890 --> 26:00.090
或者是

26:01.890 --> 26:03.390
npm i

26:03.390 --> 26:03.890
对吧

26:03.890 --> 26:05.490
然后global也可以简写

26:05.490 --> 26:06.590
横杆计

26:06.590 --> 26:07.290
后面写包名

26:08.490 --> 26:09.690
这就是全局安装

26:09.690 --> 26:11.490
如果说你不写这个玩意的话

26:11.490 --> 26:12.190
就是本地安装

26:12.190 --> 26:13.190
你写了它的过后

26:13.190 --> 26:13.990
那就是全局安装

26:13.990 --> 26:15.390
就这么简单

26:15.390 --> 26:16.790
那么全局安装

26:16.790 --> 26:18.990
那就自然会安装到这个全局目录

26:18.990 --> 26:19.790
好

26:19.790 --> 26:21.390
咱们来试一下

26:21.390 --> 26:22.290
随便安装一个

26:22.290 --> 26:24.390
以后我们肯定要把删掉了

26:24.390 --> 26:25.390
npm

26:25.390 --> 26:26.590
然后呢

26:26.590 --> 26:28.890
安装install写完了

26:28.890 --> 26:30.590
两个横杆global

26:30.590 --> 26:31.690
global全局

26:31.690 --> 26:32.590
然后包名

26:32.590 --> 26:34.190
比方说解query

26:34.190 --> 26:34.790
解query

26:37.290 --> 26:38.190
安装一下

26:38.190 --> 26:38.390
好

26:38.390 --> 26:39.290
安装成功了

26:39.290 --> 26:41.190
这个时候没有报警告

26:41.190 --> 26:42.590
我们看一下npm目录

26:42.590 --> 26:44.190
是不是多了一个loaded modules

26:44.190 --> 26:45.190
对吧

26:45.190 --> 26:47.090
全局目录下面多了一个loaded modules

26:47.090 --> 26:48.790
里边是不是多了一个解query

26:48.790 --> 26:49.690
对不对

26:49.690 --> 26:50.790
就这么个意思

26:50.790 --> 26:52.190
就这么个意思

26:52.190 --> 26:52.290
好

26:52.290 --> 26:53.390
那么接下来我来说一下

26:53.390 --> 26:54.690
全局安装什么时候

26:54.690 --> 26:56.490
我们要使用全局安装

26:56.490 --> 26:58.290
可能它跟大家想的不太一样

26:58.290 --> 26:59.390
大家可能想

26:59.390 --> 27:00.490
我们本地安装

27:00.490 --> 27:02.390
就是我们这个工程的要用的包

27:02.390 --> 27:03.890
就本地安装

27:03.890 --> 27:05.490
如果说所有工程都要用的包

27:05.490 --> 27:06.690
我们就全局安装

27:06.690 --> 27:08.290
是不是这么一回事呢

27:08.290 --> 27:09.290
不是的

27:09.290 --> 27:10.490
不是的

27:10.490 --> 27:11.790
只要用到的包

27:11.790 --> 27:13.990
就是我们在代码里边要用到的包

27:13.990 --> 27:15.590
都是本地安装

27:15.590 --> 27:17.190
都是本地安装

27:17.190 --> 27:20.090
那么全局安装是用来做什么的呢

27:20.090 --> 27:23.890
全局安装不是给不同的工程来使用的包

27:23.890 --> 27:27.290
它是为了安装全局的系理工具

27:27.290 --> 27:29.490
比方说我们要安装一些命令行工具

27:29.490 --> 27:30.290
这个命令行

27:30.290 --> 27:31.090
我是

27:31.090 --> 27:32.890
我是刚才比方说我们安装的摩卡

27:32.890 --> 27:33.490
对吧

27:33.490 --> 27:34.290
摩卡这个命令

27:34.290 --> 27:36.190
我们必须要进到这个工程里边

27:36.190 --> 27:37.390
才能去使用

27:37.390 --> 27:40.090
如果说我希望全局使用这个命令

27:40.090 --> 27:41.690
这个命令全局通用

27:41.890 --> 27:44.290
比方说有些命令经常都要使用

27:44.290 --> 27:44.990
这个工程要用

27:44.990 --> 27:46.990
别的工程也要用

27:46.990 --> 27:49.290
那么我们就可以进行全局安装

27:49.290 --> 27:51.990
那么它只是为了让这个命令通用的

27:51.990 --> 27:53.190
明儿的意思吗

27:53.190 --> 27:54.690
比方说我现在

27:54.690 --> 27:58.390
现在我们全局安装一个NPM Insta

28:00.290 --> 28:00.990
钢技

28:00.990 --> 28:02.590
现在用减线

28:02.590 --> 28:03.890
钢技摩卡

28:06.390 --> 28:08.490
我们来全局一个安装一个摩卡

28:09.490 --> 28:11.490
让它安装完成

28:11.490 --> 28:12.990
安装完成

28:12.990 --> 28:13.990
咱们Clear

28:15.290 --> 28:17.290
接下来我们再来使用摩卡

28:17.290 --> 28:18.690
你看

28:18.690 --> 28:20.090
是不是不再提示

28:20.090 --> 28:21.690
这个命令不存在了

28:21.690 --> 28:22.190
对吧

28:22.190 --> 28:23.890
它不再提示这个命令不存在了

28:23.890 --> 28:25.490
它能找到这个命令的

28:25.490 --> 28:26.090
对吧

28:26.090 --> 28:27.090
它能找到这个命令的

28:27.090 --> 28:27.790
它怎么找的

28:27.790 --> 28:29.690
它就到全局目录下面

28:29.690 --> 28:32.090
load majus majus目录下面

28:32.090 --> 28:33.590
去找这个相应的

28:33.590 --> 28:35.690
在不同的包里边

28:35.690 --> 28:36.790
去找相应的命令

28:36.790 --> 28:38.290
去找相应的命令

28:38.590 --> 28:39.290
什么意思吗

28:39.290 --> 28:40.090
所以说

28:40.590 --> 28:43.590
它会把这个摩卡这个命令

28:43.590 --> 28:45.390
摩卡这个命令航工具

28:45.390 --> 28:46.990
相当于是做了一个快捷方式

28:46.990 --> 28:49.190
把个脚奔放到这了

28:49.190 --> 28:50.690
把摩卡脚奔放到这了

28:50.690 --> 28:52.790
所以说我们运行的时候

28:52.790 --> 28:54.190
我们运行摩卡这个命令的时候

28:54.190 --> 28:55.390
实际上是运行的是

28:55.390 --> 28:56.790
运行的是这边的命令

28:56.790 --> 28:57.190
对吧

28:57.190 --> 28:58.090
这边的文件

28:58.090 --> 28:59.390
脚奔文件

28:59.390 --> 29:01.090
所以它现在的命令是可以存在的

29:01.090 --> 29:03.390
这就是全局安装

29:03.390 --> 29:06.090
这才是全局安装它的功效

29:06.090 --> 29:07.790
它是为了全局用命令的

29:07.890 --> 29:09.990
而不是让那个包里边呆满

29:09.990 --> 29:12.690
我们到时候会讲包装使用

29:12.690 --> 29:14.290
不是说我这个工程可以使用

29:14.290 --> 29:15.190
另外工程也可以使用

29:15.190 --> 29:16.490
运行全局安装

29:16.490 --> 29:17.990
那样子反而不好

29:17.990 --> 29:18.890
为什么不好呢

29:18.890 --> 29:21.090
我们后边会讲那个关于版本

29:21.090 --> 29:22.990
关于包装版本的管理

29:22.990 --> 29:24.490
因为你可以想象

29:24.490 --> 29:26.790
每个包装是不断升级的

29:26.790 --> 29:28.090
如果说你全局安装了

29:28.090 --> 29:29.290
就很导致一个问题

29:29.290 --> 29:29.990
你一升级

29:29.990 --> 29:31.690
是不是全部工程都升级了

29:31.690 --> 29:33.190
而有些工程已经开发好了

29:33.190 --> 29:34.490
那一升级可能会造成问题

29:34.490 --> 29:35.490
它不想升级

29:35.490 --> 29:36.390
那怎么办呢

29:36.390 --> 29:38.590
所以说最好了是在每个工程下面

29:38.590 --> 29:39.790
有自己的依赖

29:39.790 --> 29:40.990
这样是最好的

29:40.990 --> 29:42.790
所以传全局安装的我们用的是

29:42.790 --> 29:44.490
实际上是非常少的

29:44.490 --> 29:45.190
大部分情况下

29:45.190 --> 29:46.490
我们都不需要全局安装

29:46.490 --> 29:50.090
除非这三个条件全部满足

29:50.090 --> 29:51.990
一个是它包的版本非常稳定

29:51.990 --> 29:52.890
横上有大的更新

29:54.090 --> 29:56.290
第二个是提供的CD工具

29:56.290 --> 29:58.190
我们全局就是为了用全局

29:58.190 --> 29:59.490
用它的CD工具

29:59.490 --> 30:00.590
它提供的CD工具

30:00.590 --> 30:03.090
在各个工程中使用非常的频繁

30:03.090 --> 30:04.690
还有第三个非常重要的一点

30:04.690 --> 30:05.690
就是它这个工具

30:05.690 --> 30:08.190
仅仅是为开发环境提供支持

30:08.190 --> 30:09.590
而非部署环境

30:09.590 --> 30:10.990
而非生产环境

30:10.990 --> 30:11.690
什么意思呢

30:11.690 --> 30:12.290
就是这个工具

30:12.290 --> 30:15.390
我们只是在开发阶段开发的时候用一下

30:15.390 --> 30:16.290
以后开发完了过

30:16.290 --> 30:18.290
和这个工具完全不用了

30:18.290 --> 30:20.490
它只是为了帮助我们来做开发的

30:20.490 --> 30:21.690
比方说刚才的摩抢

30:21.690 --> 30:23.690
它是用来开发阶段来测试的

30:23.690 --> 30:24.290
对吧

30:24.290 --> 30:26.390
以发到服务器的还测试吗

30:26.390 --> 30:27.490
这不测试了

30:27.490 --> 30:30.290
至少不会用这个工具来测试了

30:30.290 --> 30:30.890
因此

30:30.890 --> 30:32.790
这工具在服务器在生产环境下面

30:32.790 --> 30:33.790
是不是没有意义

30:33.790 --> 30:34.590
对不对

30:34.590 --> 30:35.390
所以说这些东西

30:35.390 --> 30:37.190
我们才会进行全局安装

30:37.190 --> 30:39.890
全局安装相对会很少

30:39.890 --> 30:40.490
那么这里

30:40.490 --> 30:41.590
我们安装了这么多了

30:41.590 --> 30:42.090
对吧

30:42.090 --> 30:44.190
那么这里我先把它删掉吧

30:44.190 --> 30:44.990
删掉了

30:44.990 --> 30:46.390
安装这些东西干嘛呢

30:46.390 --> 30:47.590
删掉

30:47.590 --> 30:48.690
你会看到这个删除

30:48.690 --> 30:51.090
会花费点时间

30:51.090 --> 30:52.690
删除了

30:52.690 --> 30:53.390
ok

30:53.390 --> 30:56.690
这就是关于NPM包的安装

30:56.690 --> 30:58.190
也就是包的下载

30:58.190 --> 30:58.390
好

30:58.390 --> 30:59.490
先把这个学会

30:59.490 --> 31:01.090
那么接下来过通了

31:01.090 --> 31:03.390
大家随便安装几个本地安装

31:03.390 --> 31:04.690
然后再安装一两个

31:04.690 --> 31:05.890
比方说刚才的摩恰

31:05.890 --> 31:06.690
这些包怎么用

31:06.690 --> 31:07.490
你先别管

31:07.490 --> 31:08.490
先别管

31:08.490 --> 31:09.690
安装一个摩恰

31:09.690 --> 31:11.590
来做全局安装

31:11.590 --> 31:12.490
然后

31:12.490 --> 31:13.390
记得

31:13.390 --> 31:14.090
到这个目录下面

31:14.090 --> 31:15.890
把全局安装干删掉

31:15.890 --> 31:17.490
去练习一下

31:17.490 --> 31:17.890
好吧

31:17.890 --> 31:18.890
那么这里可以到这了

