WEBVTT

00:00.940 --> 00:04.140
好 那么这一块呢 我们来讲关于包的使用

00:04.140 --> 00:08.740
咱们之前不是下载了包吗 对吧 也写好了配置文件了

00:08.740 --> 00:11.740
下载了半天总得用吧 那么怎么使用呢

00:11.740 --> 00:15.540
我们这里使用啊 首先呢 大家要明确

00:15.540 --> 00:20.940
我们整个这个课程的包的使用呢 都是鸡云露的环境的

00:20.940 --> 00:24.940
浏览器环境我们现在不考虑 之后呢 有办法解决

00:24.940 --> 00:27.940
不是这门课的内容 我们先把这门课的基础打好

00:27.940 --> 00:31.940
我们后边学习浏览器那一块呢 要用到我们这门课的知识

00:31.940 --> 00:34.940
好 关于包的使用呢 我们只学习露的环境

00:34.940 --> 00:38.940
首先大家知道露的呢 我们在之前的第一节课就说过了

00:38.940 --> 00:43.940
露的它对NPM的知识就非常好 因为它本来就连在一起的这两个东西

00:43.940 --> 00:47.940
他们之间是相互成就的 露的成就了NPM

00:47.940 --> 00:51.940
NPM也成就了露的 所以他们的知识呢 是非常非常好的

00:51.940 --> 00:55.940
包括了common.js 跟露的也是融在一起的

00:55.940 --> 00:59.940
露的common.js NPM 这三个东西是紧紧捆绑在一起的

00:59.940 --> 01:03.940
它的知识非常好 怎么用呢 在露的环境里边

01:03.940 --> 01:08.940
如果说你要导入一个模块 我们之前学过对吧 用Require来导入一个模块

01:08.940 --> 01:12.940
当时我怎么说的 我给大家讲的时候 我说 在露的里面呢

01:12.940 --> 01:15.940
你要导入一个模块 导入一个你自己写的模块

01:15.940 --> 01:19.940
那么你的模块路径呢 一定要以底儿鞋杠和底儿的鞋杠开头

01:19.940 --> 01:23.940
千万不能直接写 为什么不能直接写呢 现在就明白了

01:23.940 --> 01:27.940
如果你写的模块路径不是以底儿鞋杠

01:27.940 --> 01:30.940
或者是底儿的鞋杠开头 就直接写的模块名字

01:30.940 --> 01:33.940
那么这个时候呢 露的它会有特殊处理

01:33.940 --> 01:36.940
它怎么来特殊处理呢 它会认为你导入的模块呢

01:36.940 --> 01:39.940
它不是你自己写的 它来自于哪呢

01:39.940 --> 01:43.940
来自于露的marge 90目录 来自于这个目录

01:43.940 --> 01:46.940
明白了吧 露的它就字 它就会去读取这个目录

01:46.940 --> 01:50.940
比方说啊 咱们写了这么一句代码Require low dash

01:50.940 --> 01:53.940
那么这个时候呢 它就会从下面的位置来查找

01:53.940 --> 01:56.940
咱们先不管吧 我们先把low dash安装好

01:56.940 --> 02:00.940
来吧 找到工程啊

02:00.940 --> 02:04.940
我们到这个目录下面来 清除一下

02:04.940 --> 02:07.940
好 来吧 我们这里呢 首先给它出实话 对吧

02:07.940 --> 02:10.940
怎么上进课学的啊 出实话

02:12.940 --> 02:16.940
然后包的名字呢 Capital 2

02:17.940 --> 02:20.940
起来全部回车 OK

02:20.940 --> 02:23.940
好 那么先把它承认出来 然后接下来干嘛

02:23.940 --> 02:27.940
接下来我们安装啊 安装那个就是low dash

02:27.940 --> 02:30.940
好 让它安装啊

02:30.940 --> 02:33.940
好 安装好了 它告诉你给了一些警告啊

02:33.940 --> 02:37.940
那么现在这些警告呢 现在这个

02:37.940 --> 02:40.940
现在这个警告呢 我给大家说一下啊

02:40.940 --> 02:43.940
这个第一个警告呢 是说我这个Package的

02:44.940 --> 02:46.940
配置文件里面没有description 没有描述

02:46.940 --> 02:49.940
这个无所谓 反正我又不发布的

02:49.940 --> 02:52.940
第二个警告呢 是说我的那个配置文件里面呢

02:52.940 --> 02:55.940
没有repository 没有那个仓处 仓处位置

02:55.940 --> 02:58.940
就是那个gear的gear的地址

02:58.940 --> 03:01.940
那无所谓 这个东西反正不发布的 不发布的无所谓

03:01.940 --> 03:04.940
这两个东西不用看 第一个不是警告啊 第一个就是

03:04.940 --> 03:07.940
它告诉你这个文件呢 应该要把它提交上去

03:07.940 --> 03:10.940
我现在是提交上去的 我又没有顾虑它 所以说

03:10.940 --> 03:12.940
这个不用管 那么就成功安装了

03:12.940 --> 03:14.940
安装了之后呢 怎么来使用呢 你看

03:14.940 --> 03:17.940
Loudmarch就是下面是不是用Loudmarch大气的 对不对

03:17.940 --> 03:20.940
其实如果我们不学车解课的知识 有没有同学

03:20.940 --> 03:23.940
知道怎么使用 怎么使用这个包

03:23.940 --> 03:26.940
怎么使用 那还不简单吗 你看着啊

03:26.940 --> 03:28.940
我这里随便写个JS文件

03:28.940 --> 03:31.940
我要用这个包 不是用comment-js吗 对吧

03:31.940 --> 03:34.940
comment-js导入膜块嘛 这个包里面有很多的膜块 看到没

03:34.940 --> 03:37.940
有非常非常多的膜块 你要导入哪个膜块的导呗

03:37.940 --> 03:39.940
比方说我们导入哪个膜块呢 导入这个

03:39.940 --> 03:42.940
看一下 它应该有个index.js文件

03:42.940 --> 03:45.940
我看一下啊 应该是有的

03:45.940 --> 03:48.940
找一找 这里面有个index.js

03:48.940 --> 03:51.940
对吧 你看 它这里是不是导出了

03:51.940 --> 03:53.940
用comment-js的方式是不是导出了

03:53.940 --> 03:56.940
它把这个文件里面的东西也导入进来

03:56.940 --> 03:59.940
然后把它导入的东西直接导出

03:59.940 --> 04:02.940
那么我们要用的话怎么用呢 那还不简单吗

04:02.940 --> 04:06.940
require

04:06.940 --> 04:08.940
然后怎么写

04:08.940 --> 04:10.940
你看着啊 我们这样的方式在写

04:10.940 --> 04:12.940
用以前的老办法写 怎么写呢

04:12.940 --> 04:15.940
我们就当前目录下的load-module

04:15.940 --> 04:18.940
是目录下面的 什么load-dash.index

04:18.940 --> 04:20.940
对吧 是不是这样的导入了

04:20.940 --> 04:22.940
我们来得到 得到这个变量

04:22.940 --> 04:24.940
这个load-dash呢 我给大家介绍一下

04:24.940 --> 04:26.940
稍微的介绍一下 不知道大家学过没有

04:26.940 --> 04:28.940
这个东西是一个工具库

04:28.940 --> 04:31.940
它里面提供了很多的函数啊 方法呀

04:31.940 --> 04:34.940
可以帮助我们处理一些常见的 开发中的一些常见问题

04:34.940 --> 04:38.940
那么我们用变量的话 习惯上用这个下滑线

04:38.940 --> 04:40.940
并不是说必须要用啊 你们学过模块画

04:40.940 --> 04:43.940
别乱买啊 不要乱理解

04:43.940 --> 04:46.940
不是说必须要用下滑线 随便你写个变量名字都可以

04:46.940 --> 04:48.940
只不过习惯上我们使用下滑线

04:48.940 --> 04:51.940
为什么有这样的习惯呢 我多说几句吧

04:51.940 --> 04:55.940
因为以前的时候呢 还没有出现模块画

04:55.940 --> 04:58.940
没有出现模块画的时候呢 像有些库就已经出现了

04:58.940 --> 05:01.940
像接query呀 load-dash呀 是不是很早就出现了

05:01.940 --> 05:03.940
这些库早就出现了 那个时候还没有模块画

05:03.940 --> 05:08.940
因此他们用的是传统的方式 就是给全群的去污染一个变量

05:08.940 --> 05:12.940
比方说接query污染的是什么 接query给你提供的变量

05:12.940 --> 05:14.940
全群变量是不是多了 对吧

05:14.940 --> 05:17.940
load-dash呢 他就给你提供的变量就是下滑线

05:17.940 --> 05:20.940
给你提供的全群变量就是下滑线 比较特殊的名字

05:20.940 --> 05:24.940
避免了给你的变量的造成冲突 所以他提供了这么一些全群变量

05:24.940 --> 05:28.940
但是有了模块画之后呢 他已经不存在全群变量污染了

05:28.940 --> 05:31.940
所以说你想 以导入的时候呢 想使用什么名字

05:31.940 --> 05:34.940
就使用什么名字 你想写什么名字就写什么名字

05:34.940 --> 05:38.940
只不过习惯上的我们还是沿用他以前的名字

05:38.940 --> 05:42.940
其实就是一个习惯 好 那么咱们输出这个下滑线

05:42.940 --> 05:45.940
因为我们知道在接业室里面下滑线也好 多了也好

05:45.940 --> 05:48.940
他们都是一个合法的变量名

05:48.940 --> 05:51.940
输出一下 看一下有没有正确的导入进来

05:51.940 --> 05:54.940
我们这里使用我们以前学过的load-dash 命令

05:54.940 --> 05:57.940
运行哪个呢 运行index的接业室

05:57.940 --> 06:00.940
你看是不是输出了 他里面给你提供了好多好多的方法

06:01.940 --> 06:04.940
提供了很多很多的方法 那么我们随便找个方法吧

06:04.940 --> 06:07.940
我们随便给大家介绍一个方法 他里面其中有一个方法了

06:07.940 --> 06:09.940
这是个对象 这里面保持了一个对象

06:09.940 --> 06:12.940
这个对象里面有一个方法叫做compact

06:12.940 --> 06:16.940
compact 这里面写个数组 比方说个数组呢

06:16.940 --> 06:20.940
一 零 一个空之不串

06:20.940 --> 06:24.940
然后呢 force 比如说他会怎么处理呢

06:24.940 --> 06:27.940
这个compact 他会把这个字 把这个数组里面

06:27.940 --> 06:31.940
凡是判定为假的 给你去除掉

06:31.940 --> 06:34.940
然后呢 返回一个新的数组

06:34.940 --> 06:36.940
返回一个新的数组 这个新的数组里面只保留

06:36.940 --> 06:39.940
判定为真的 所以说我们输出这个新的数组

06:39.940 --> 06:42.940
你看一下 这是load-dash 里面的知识

06:42.940 --> 06:45.940
这个东西没学过就算了

06:45.940 --> 06:47.940
哎哎 干嘛呢

06:47.940 --> 06:49.940
load-dash 应得省点结实 你看呀

06:49.940 --> 06:51.940
是不是只有一三五 对吧

06:51.940 --> 06:54.940
像零 空之不串 还有就是force

06:54.940 --> 06:57.940
它都判定为假 所以它把去除掉了

06:57.940 --> 06:59.940
那么它返回一个新的数组 这个新的数组里面

06:59.940 --> 07:01.940
只包含判定为真的

07:01.940 --> 07:03.940
你看是不是可以用了 至少可以用了吧 对不对

07:03.940 --> 07:06.940
是不是可以正常使用那个模块的 对吧

07:06.940 --> 07:08.940
就不学习这一刻你也能使用

07:08.940 --> 07:11.940
只不过这样使用起来呢 特别特别的麻烦

07:11.940 --> 07:15.940
因此load-dash 它对NPM提供非常非常好的支持

07:15.940 --> 07:17.940
它怎么做的呢 它这样子

07:17.940 --> 07:20.940
你可以直接不使用吊鞋杠盒 吊热鞋杠开头

07:20.940 --> 07:23.940
那么它就会认为你倒入的东西呢

07:23.940 --> 07:26.940
这种吊鞋杠盒 一定来自于load-module就是目录

07:26.940 --> 07:30.940
它会从这个目录里面去找 也就是说我们这里怎么写呢 这样子写

07:30.940 --> 07:34.940
直接写这样子写就完事了 直接requireload-dash就完事了

07:34.940 --> 07:38.940
那它怎么找的呢 它具体的找的方式是这样子的

07:38.940 --> 07:41.940
它首先会从当前目录 什么叫当前目录

07:41.940 --> 07:45.940
就是你这个文件 你这个index的介式文件

07:45.940 --> 07:47.940
这个文件在哪个目录 它就在哪个目录里去找

07:47.940 --> 07:52.940
找什么呢 首先找这个目录下面load-module就是这个文件夹

07:52.940 --> 07:56.940
它一定要找这个文件夹 首先看文件 然后再看目录

07:56.940 --> 07:59.940
它怎么来看的 首先看一个文件

07:59.940 --> 08:04.940
看load-module是目录下面 有没有load-dash一点介式 有没有呢

08:04.940 --> 08:08.940
这里有没有呢 load-module是目录下面 有没有load-dash一点介式

08:08.940 --> 08:12.940
没有 对吧 是没有 那如果有的话 它就直接找到了

08:12.940 --> 08:14.940
找到就用这个文件 比方说我们在这里

08:14.940 --> 08:17.940
如果说强行写一个load-dash一点介式

08:17.940 --> 08:23.940
我们这里是用module export 导出一个空对象 你看一下吧

08:23.940 --> 08:26.940
那么这个时候我们导入load-dash 导入的是什么呢

08:26.940 --> 08:28.940
导入的就是这个了 导入的就是这个了

08:28.940 --> 08:32.940
来看一下吧 我们这里直接输出 直接输出一个load-dash的字

08:32.940 --> 08:36.940
输出一个下滑线 运行

08:36.940 --> 08:41.940
你看是不是空对象 对吧 但是谁会这样做的 不会这样做的

08:41.940 --> 08:45.940
这个地方我们先把删除掉 它这样做是有原因的

08:45.940 --> 08:49.940
因为它的规范里面 它就是这样的 它就是这样的写的

08:49.940 --> 08:52.940
一定先找文件 找一找有没有对应的文件

08:52.940 --> 08:56.940
然后有文件就用文件 没有文件找目录

08:56.940 --> 08:59.940
那么一开始像第一步的时候 当前目录下

08:59.940 --> 09:03.940
load-module就是目录下面 是不是没有这个文件

09:03.940 --> 09:05.940
是不是没有load-dash一点介式的文件

09:05.940 --> 09:08.940
只要你不写掉写杠 不写掉写杠开头

09:08.940 --> 09:10.940
那么它一定从load-module下面找

09:10.940 --> 09:13.940
如果说没有找不到文件的话

09:13.940 --> 09:16.940
哪个对应的文件找不到的话 它就会找这个目录

09:16.940 --> 09:18.940
看一下一个目录有没有 目录是不是有

09:18.940 --> 09:20.940
是不是有这个目录 load-dash这个目录

09:20.940 --> 09:23.940
那么它会读这个load-dash的目录哪个文件呢

09:23.940 --> 09:26.940
因为这里边可能有很多很多的文件 那么它会导入哪个文件呢

09:26.940 --> 09:29.940
它导入的是入口文件 导入的是入口文件

09:29.940 --> 09:32.940
我们一会会说入口文件它是什么意思

09:32.940 --> 09:36.940
那么如果有这个入口文件 它就找到了

09:36.940 --> 09:38.940
那么它就直接把导入进来了

09:38.940 --> 09:41.940
那如果说没有这样的文件呢

09:42.940 --> 09:44.940
也就是说有可能呢

09:44.940 --> 09:46.940
可能会出现这么一种情况

09:46.940 --> 09:49.940
我们比方说在这里新建国验甲 该取名一个sub

09:49.940 --> 09:53.940
在这里边我们写上一个test.json

09:53.940 --> 09:55.940
你看着啊 我们这里一个下滑线

09:55.940 --> 09:58.940
require load-dash

09:58.940 --> 10:00.940
它其实有智能体式的

10:00.940 --> 10:02.940
输出这个下滑线 你看着啊

10:02.940 --> 10:05.940
如果说我现在去这样子运行

10:05.940 --> 10:06.940
clear

10:06.940 --> 10:10.940
load sub下面的test

10:11.940 --> 10:12.940
我们这样子运行

10:12.940 --> 10:14.940
那么它能不能找到呢

10:14.940 --> 10:16.940
在这个文件夹下面有没有

10:16.940 --> 10:17.940
首先我们看一下啊

10:17.940 --> 10:20.940
这个文件夹下面有没有load的marge is目录

10:20.940 --> 10:23.940
是没有 那么这个目录都没有的话

10:23.940 --> 10:25.940
那肯定是找不到什么

10:25.940 --> 10:27.940
它对应的文件是不是找不到

10:27.940 --> 10:29.940
然后呢 更加不要说它里边的目录的入口文件

10:29.940 --> 10:30.940
肯定找不到

10:30.940 --> 10:32.940
那找不到怎么办呢

10:32.940 --> 10:34.940
它不会停止运照

10:34.940 --> 10:35.940
它会返回上一级目录

10:35.940 --> 10:36.940
这个目录找不到

10:36.940 --> 10:38.940
因为你现在运行的是这个节式

10:38.940 --> 10:40.940
那么这个节式里面的这个目录找不到

10:40.940 --> 10:41.940
找不到怎么办呢

10:41.940 --> 10:42.940
回到上级目录

10:42.940 --> 10:44.940
回到这个目录去找

10:44.940 --> 10:45.940
是不是找到了

10:45.940 --> 10:46.940
如果这个目录没有呢

10:46.940 --> 10:47.940
继续回到上级目录

10:47.940 --> 10:49.940
如果这个目录还没有呢

10:49.940 --> 10:50.940
看着啊

10:50.940 --> 10:51.940
这个目录还没有

10:51.940 --> 10:53.940
它就回到这个目录

10:53.940 --> 10:54.940
这个目录还没有呢

10:54.940 --> 10:55.940
它就回到这个目录

10:55.940 --> 10:56.940
还没有回到这个目录

10:56.940 --> 10:57.940
还没有回到这个目录

10:57.940 --> 10:59.940
那么回到顶级的盘幅过后了

10:59.940 --> 11:00.940
是不是找不到了

11:00.940 --> 11:01.940
那确实找不到了

11:01.940 --> 11:02.940
确实没有

11:02.940 --> 11:03.940
没有的话怎么办

11:03.940 --> 11:04.940
没有的话就包错了

11:04.940 --> 11:07.940
所以说我们在纸目录里边

11:07.940 --> 11:08.940
能不能用

11:08.940 --> 11:09.940
能不能用这个楼单写

11:09.940 --> 11:10.940
能不能用

11:10.940 --> 11:11.940
可以用

11:11.940 --> 11:13.940
这就是为什么我们之前说的

11:13.940 --> 11:14.940
本地安装啊

11:14.940 --> 11:16.940
我们这解课设计到的东西

11:16.940 --> 11:17.940
全都是本地安装

11:17.940 --> 11:18.940
跟全级安装

11:18.940 --> 11:19.940
跟全级安装没什么关系

11:19.940 --> 11:20.940
包括上级的东西

11:20.940 --> 11:21.940
都跟全级安装没什么东西

11:21.940 --> 11:22.940
都是本地的

11:22.940 --> 11:23.940
本地安装

11:23.940 --> 11:24.940
它这个安装到哪儿

11:24.940 --> 11:26.940
它就会影响它这个目录

11:26.940 --> 11:28.940
本身和它的所有纸目录

11:28.940 --> 11:30.940
因为它会往上面去寻找

11:30.940 --> 11:31.940
原来的意思嘛

11:31.940 --> 11:32.940
所以说我们现在呢

11:32.940 --> 11:33.940
依然可以用到

11:33.940 --> 11:35.940
你看这个Tesla的节式

11:35.940 --> 11:36.940
依然可以用这个楼单写

11:36.940 --> 11:37.940
所以说我们为什么

11:37.940 --> 11:39.940
要把这个安装的包

11:39.940 --> 11:40.940
安装到跟目录里边呢

11:40.940 --> 11:41.940
就是我们整个工程

11:41.940 --> 11:42.940
都可以使用这些东西

11:43.940 --> 11:44.940
OK啊没问题吧

11:44.940 --> 11:45.940
如果当前目录

11:45.940 --> 11:46.940
没有这样的文件的话

11:46.940 --> 11:47.940
它会回溯到

11:47.940 --> 11:48.940
上级目录

11:48.940 --> 11:50.940
按照同样的方式来查找

11:50.940 --> 11:51.940
如果顶级目录

11:51.940 --> 11:52.940
都没法找到文件的话

11:52.940 --> 11:53.940
就跑出错误了

11:53.940 --> 11:54.940
比方说我们这里

11:54.940 --> 11:55.940
接quare

11:55.940 --> 11:56.940
导入一个接quare

11:56.940 --> 11:57.940
我们用多了

11:57.940 --> 11:58.940
用什么东西无所谓

12:00.940 --> 12:01.940
咱们来试一下

12:02.940 --> 12:03.940
你看是爆错了

12:03.940 --> 12:04.940
以后呢记住这个错误

12:04.940 --> 12:05.940
这个错误什么意思

12:05.940 --> 12:06.940
这个错误什么意思

12:06.940 --> 12:07.940
看着

12:07.940 --> 12:08.940
他说

12:08.940 --> 12:11.940
cannotfandmodule接quare

12:11.940 --> 12:13.940
以后就要会读这个错误

12:13.940 --> 12:15.940
找不到模块接quare

12:15.940 --> 12:16.940
找不到

12:17.940 --> 12:19.940
那么你往下看的话

12:19.940 --> 12:20.940
那么这里呢

12:20.940 --> 12:21.940
我看一下

12:22.940 --> 12:23.940
在这

12:24.940 --> 12:25.940
它会提示你

12:25.940 --> 12:26.940
哪个地方出了问题

12:26.940 --> 12:27.940
哪个地方出了问题呢

12:27.940 --> 12:29.940
就在这个位置

12:29.940 --> 12:31.940
Tesla的节式这里

12:31.940 --> 12:32.940
导入这个接quare

12:32.940 --> 12:33.940
导入不到

12:33.940 --> 12:34.940
其实它已经找了

12:34.940 --> 12:35.940
很多地方了

12:35.940 --> 12:36.940
它首先找它里面有没有

12:36.940 --> 12:37.940
它里面没有

12:37.940 --> 12:38.940
它找它

12:38.940 --> 12:39.940
它里面没有找它

12:39.940 --> 12:40.940
一直找到顶层目录

12:40.940 --> 12:41.940
找到顶层目录

12:41.940 --> 12:43.940
不是工程的跟目录

12:43.940 --> 12:44.940
是要找到顶层目录

12:44.940 --> 12:46.940
它不知道工程的跟目录在哪

12:46.940 --> 12:47.940
所以说

12:47.940 --> 12:48.940
它找不到

12:48.940 --> 12:49.940
找不到的话就爆错了

12:49.940 --> 12:50.940
没人意识吧

12:50.940 --> 12:51.940
OK

12:51.940 --> 12:53.940
那么就跑出错误

12:54.940 --> 12:55.940
那么现在我们再回过头来

12:55.940 --> 12:57.940
看刚才那个问题

12:57.940 --> 12:58.940
就是如果说你找不到文件

12:58.940 --> 12:59.940
那么

12:59.940 --> 13:00.940
它就会找这个目录

13:00.940 --> 13:01.940
看有没有这个目录

13:01.940 --> 13:02.940
刚才就是这样子

13:02.940 --> 13:03.940
对吧

13:03.940 --> 13:04.940
没有这个楼单写点

13:04.940 --> 13:05.940
借识个文件

13:05.940 --> 13:06.940
那么它就会找这个目录

13:06.940 --> 13:07.940
那么这个目录里边

13:07.940 --> 13:09.940
它找到了它的入口文件

13:09.940 --> 13:11.940
那么入口文件到底是啥

13:11.940 --> 13:12.940
它是按照这样的规定来

13:12.940 --> 13:13.940
确定入口文件的

13:13.940 --> 13:15.940
入口文件按照下面的规定来

13:15.940 --> 13:16.940
确定

13:16.940 --> 13:17.940
第一个

13:17.940 --> 13:21.940
首先查看导入包的配置文件

13:21.940 --> 13:23.940
读取它每一字段

13:23.940 --> 13:24.940
作为入口文件

13:24.940 --> 13:25.940
啥意思

13:25.940 --> 13:28.940
比方说我们现在要导入楼单写

13:28.940 --> 13:29.940
到这来

13:29.940 --> 13:31.940
我们要导入楼单写

13:31.940 --> 13:33.940
那么它怎么找的

13:33.940 --> 13:34.940
它找的肯定是当前幕

13:34.940 --> 13:36.940
首先找当前目录的楼单吗

13:36.940 --> 13:37.940
就是目录对吧

13:37.940 --> 13:38.940
看一下有没有楼单写点

13:38.940 --> 13:39.940
借识文件没有

13:39.940 --> 13:40.940
没有就去找一下

13:40.940 --> 13:42.940
有没有楼单写这个文件夹呢

13:42.940 --> 13:44.940
有文件夹

13:44.940 --> 13:45.940
有文件夹的话

13:45.940 --> 13:46.940
它就找什么

13:46.940 --> 13:47.940
找入口文件

13:47.940 --> 13:48.940
它怎么找的

13:48.940 --> 13:49.940
它首先都是一个包对不对

13:49.940 --> 13:50.940
它首先把这个包

13:50.940 --> 13:51.940
每一个包

13:51.940 --> 13:52.940
它都会有这个配置文件

13:52.940 --> 13:54.940
它都有自己的配置文件

13:54.940 --> 13:55.940
我们上级课学的配置

13:55.940 --> 13:56.940
那么这个楼单写

13:56.940 --> 13:57.940
它发布出来过后

13:57.940 --> 13:58.940
它也会有自己的配置

13:58.940 --> 13:59.940
你看一下

13:59.940 --> 14:00.940
慢慢拉

14:00.940 --> 14:01.940
往下找

14:01.940 --> 14:02.940
往下找

14:02.940 --> 14:03.940
文件很多

14:03.940 --> 14:04.940
它里面很多文件

14:04.940 --> 14:05.940
往下找

14:05.940 --> 14:06.940
你看

14:06.940 --> 14:07.940
是不是有个

14:07.940 --> 14:08.940
Packy几节接生

14:08.940 --> 14:09.940
对吧

14:09.940 --> 14:10.940
是不是有这么一个文件

14:10.940 --> 14:12.940
这就是楼单写的配置文件

14:12.940 --> 14:13.940
楼单写的配置文件里面

14:13.940 --> 14:14.940
它有很多东西

14:14.940 --> 14:15.940
我们都不用去管

14:15.940 --> 14:17.940
我们往下找

14:17.940 --> 14:19.940
找到妹

14:19.940 --> 14:21.940
看一下有没有妹之段

14:21.940 --> 14:22.940
我们这里

14:22.940 --> 14:23.940
Ctrl-F查到一下

14:23.940 --> 14:24.940
有没有妹

14:24.940 --> 14:25.940
是不是有这个妹

14:25.940 --> 14:27.940
是不是有这个妹之段

14:27.940 --> 14:29.940
如果说它有这个妹之段的话

14:29.940 --> 14:31.940
那么它就把这个妹之段的

14:31.940 --> 14:33.940
读取的值作为入口文件

14:33.940 --> 14:34.940
原来的意思吗

14:34.940 --> 14:37.940
所以说针对楼单写

14:37.940 --> 14:38.940
针对楼单写

14:38.940 --> 14:39.940
它读的是啥

14:39.940 --> 14:44.470
它读的是这个

14:44.470 --> 14:45.470
它读的是这个

14:45.470 --> 14:46.470
入口文件

14:46.470 --> 14:47.470
楼单写

14:47.470 --> 14:48.470
解释

14:48.470 --> 14:49.470
原来的意思吗

14:49.470 --> 14:50.470
后面的入口文件

14:50.470 --> 14:51.470
它读出来的是啥

14:51.470 --> 14:52.470
读出来

14:52.470 --> 14:53.470
前面是文件讲

14:53.470 --> 14:54.470
文件讲里面有很多文件

14:54.470 --> 14:56.470
那么到底读哪一个文件呢

14:56.470 --> 14:57.470
它读的是

14:57.470 --> 14:58.470
它怎么读的

14:58.470 --> 14:59.470
它读的是妹之段

14:59.470 --> 15:00.470
就是这个配置

15:00.470 --> 15:01.470
对应的包

15:01.470 --> 15:02.470
它里面的配置

15:02.470 --> 15:04.470
对应的包配置里面的妹之段

15:04.470 --> 15:06.470
它的值作为入口文件的名称

15:07.470 --> 15:09.470
那如果说没有妹之段

15:10.470 --> 15:11.470
如果说没有妹之段

15:11.470 --> 15:12.470
那么它就会使用

15:12.470 --> 15:15.470
index的解释作为入口文件

15:15.470 --> 15:16.470
这是它的规则

15:16.470 --> 15:18.470
如果index的解释也没有

15:18.470 --> 15:19.470
就包错了

15:19.470 --> 15:20.470
那就继续往上找

15:20.470 --> 15:22.470
找不到又来又来又来

15:22.470 --> 15:23.470
只要所有都找不到

15:23.470 --> 15:24.470
那就包错了

15:24.470 --> 15:25.470
原来的意思吧

15:26.470 --> 15:28.470
这就是它的找的规则

15:28.470 --> 15:29.470
那如果说以后呢

15:29.470 --> 15:30.470
面试万一

15:30.470 --> 15:31.470
一般都不回问题

15:31.470 --> 15:32.470
这么简单的问题

15:32.470 --> 15:33.470
如果说万一问到你的话

15:33.470 --> 15:34.470
你要知道

15:34.470 --> 15:36.470
查到规则是什么样子的

15:36.470 --> 15:37.470
比方说就问你

15:37.470 --> 15:38.470
楼大戏里面有两个文件

15:38.470 --> 15:39.470
一个是楼大戏

15:39.470 --> 15:41.470
里面有一个index的解释

15:41.470 --> 15:43.470
index的解释

15:43.470 --> 15:44.470
你看

15:44.470 --> 15:45.470
跑下去

15:45.470 --> 15:46.470
index的解释

15:47.470 --> 15:49.470
还有一个文件是楼大戏

15:50.470 --> 15:51.470
它本身有一个楼大戏

15:51.470 --> 15:52.470
我找一找

15:53.470 --> 15:54.470
太多了

15:54.470 --> 15:57.470
FGHIKL

15:59.470 --> 16:01.470
你看是不是还有一个楼大戏的解释

16:01.470 --> 16:02.470
对吧

16:02.470 --> 16:03.470
是不是有

16:03.470 --> 16:04.470
那么到底读哪一个呢

16:04.470 --> 16:06.470
它到底读的是index的解释

16:06.470 --> 16:07.470
还是楼大戏的解释

16:07.470 --> 16:08.470
对吧

16:08.470 --> 16:09.470
看什么

16:09.470 --> 16:11.470
看它的package的解释

16:11.470 --> 16:12.470
看那个配置文件里面

16:12.470 --> 16:13.470
有没有妹子端

16:13.470 --> 16:14.470
妹子端指向哪

16:14.470 --> 16:15.470
它就读上

16:15.470 --> 16:16.470
它没有任何的

16:16.470 --> 16:17.470
没有写妹子端的话

16:17.470 --> 16:18.470
那么它就读的是

16:18.470 --> 16:20.470
index的解释

16:20.470 --> 16:21.470
那这意思吧

16:21.470 --> 16:22.470
所以说

16:22.470 --> 16:23.470
如果说

16:23.470 --> 16:24.470
假设

16:24.470 --> 16:26.470
假设我们来试验一下吧

16:26.470 --> 16:27.470
如果说

16:27.470 --> 16:29.470
我把这个index的解释

16:29.470 --> 16:30.470
比方说我这里导出

16:30.470 --> 16:31.470
我该改了

16:31.470 --> 16:32.470
能不能改

16:32.470 --> 16:33.470
当然改

16:33.470 --> 16:34.470
但是平时开发的时候

16:34.470 --> 16:35.470
千万不要去做这种事情

16:36.470 --> 16:37.470
比方说该改了

16:38.470 --> 16:39.470
那么这里导出

16:39.470 --> 16:41.470
导入的是一个空对象

16:41.470 --> 16:43.470
还是一个正常的楼大戏

16:44.470 --> 16:46.470
我改的是index的解释

16:47.470 --> 16:49.910
看一下吧

16:49.910 --> 16:51.910
index

16:54.910 --> 16:55.910
是不是一个正常的楼大戏

16:55.910 --> 16:56.910
说明啥

16:56.910 --> 16:57.910
说明它根本就没有导入

16:57.910 --> 16:59.910
这个index的解释的东西

16:59.910 --> 17:00.910
对吧

17:00.910 --> 17:01.910
因为它有妹子端

17:01.910 --> 17:03.910
那如果说我把妹子端

17:03.910 --> 17:05.910
我把那个Packy的解释改了

17:05.910 --> 17:07.910
你看着

17:07.910 --> 17:09.910
这个东西太多了

17:09.910 --> 17:11.910
Packy解释解释

17:11.910 --> 17:12.910
OK

17:12.910 --> 17:13.910
我们在这里查一下

17:13.910 --> 17:14.910
妹子端

17:14.910 --> 17:16.910
我把这个妹子端该去了

17:17.910 --> 17:19.910
大概配置文件的妹子端去了

17:19.910 --> 17:23.930
然后我们现在再用一下

17:23.930 --> 17:24.930
是不是空对象了

17:24.930 --> 17:25.930
为什么它读不到妹子端

17:25.930 --> 17:27.930
所以它用的是index的解释

17:27.930 --> 17:28.930
没了意思吧

17:28.930 --> 17:29.930
我讲得够详细了吧

17:29.930 --> 17:30.930
OK

17:30.930 --> 17:31.930
那么这里

17:31.930 --> 17:34.930
它也给你提供了这个index的解释

17:35.930 --> 17:37.930
因为它轨道有什么方式在导入

17:37.930 --> 17:38.930
OK

17:38.930 --> 17:40.930
那么这就是

17:40.930 --> 17:41.930
这里的它的导入规则

17:41.930 --> 17:42.930
是不是特别特别简单

17:42.930 --> 17:43.930
因此

17:43.930 --> 17:45.930
你要在漏的环境里边去使用

17:45.930 --> 17:47.930
使用一些下载下载的模块的话

17:47.930 --> 17:48.930
你大胆的用就行了

17:48.930 --> 17:49.930
下载下载过后

17:49.930 --> 17:50.930
你直接

17:50.930 --> 17:51.930
你不要给顶铁钢合

17:51.930 --> 17:52.930
顶铁钢开头

17:52.930 --> 17:53.930
它自然而然

17:53.930 --> 17:55.930
它就会从这个目录里面去找

17:56.930 --> 17:57.930
没了意思吧

17:57.930 --> 17:58.930
而且我们刚才说到

17:58.930 --> 18:00.930
入口文件的规则

18:00.930 --> 18:02.930
同样适用于自己工程中的模块

18:02.930 --> 18:03.930
也是一样的

18:03.930 --> 18:05.930
我们来举个例子

18:05.930 --> 18:07.930
举个例子

18:07.930 --> 18:09.930
这就是我们以前模块画讲的东西

18:09.930 --> 18:10.930
因为以前模块画

18:10.930 --> 18:11.930
没有这个配置文件

18:11.930 --> 18:12.930
所以说没法讲这一块

18:12.930 --> 18:13.930
那么现在可以讲了

18:13.930 --> 18:16.930
比方说我们这里有个目录a

18:16.930 --> 18:19.930
目录a里边有一个index的解释

18:20.930 --> 18:21.930
看着

18:21.930 --> 18:22.930
它怎么玩的

18:22.930 --> 18:24.930
我们这个a的解释

18:24.930 --> 18:25.930
我们自己的模块

18:25.930 --> 18:26.930
我们自己写的模块

18:26.930 --> 18:28.930
然后我们这里使用

18:28.930 --> 18:29.930
marge

18:29.930 --> 18:30.930
export

18:31.930 --> 18:32.930
导出一个字母算

18:32.930 --> 18:33.930
a

18:33.930 --> 18:34.930
然后我们在

18:34.930 --> 18:36.930
index里面

18:36.930 --> 18:38.930
在index里面

18:38.930 --> 18:39.930
注射掉

18:39.930 --> 18:41.930
我们来导入这个a

18:41.930 --> 18:42.930
导入这个a模块

18:42.930 --> 18:43.930
require

18:43.930 --> 18:44.930
我怎么导入呢

18:44.930 --> 18:45.930
是不是自己的东西

18:45.930 --> 18:47.930
是不是要用顶铁钢和顶铁钢开头

18:47.930 --> 18:49.930
我们是一般是怎么导入的

18:49.930 --> 18:50.930
铁钢a index

18:50.930 --> 18:51.930
对吧

18:51.930 --> 18:52.930
我现在实际上是可以

18:52.930 --> 18:53.930
不用写这个

18:53.930 --> 18:54.930
后边的index

18:55.930 --> 18:57.930
那么它的效果是一样的

18:57.930 --> 18:58.930
它怎么办呢

18:58.930 --> 18:59.930
它是这样子来理解的

18:59.930 --> 19:01.930
漏的是这样理解的

19:01.930 --> 19:03.930
那么由于我们是用了

19:03.930 --> 19:04.930
顶铁钢开头

19:04.930 --> 19:06.930
那么漏的是怎么理解的呢

19:06.930 --> 19:07.930
是我们当前工程的东西

19:07.930 --> 19:08.930
对吧

19:08.930 --> 19:09.930
那么它呢

19:09.930 --> 19:10.930
它会怎么样呢

19:10.930 --> 19:13.930
它是将a文件夹

19:15.930 --> 19:16.930
首先

19:17.930 --> 19:18.930
首先

19:18.930 --> 19:19.930
查看

19:19.930 --> 19:22.930
当前目录是否有

19:22.930 --> 19:24.930
a.js

19:24.930 --> 19:25.930
你看当前目录

19:25.930 --> 19:26.930
是不是有a.js

19:26.930 --> 19:27.930
首先看文件

19:27.930 --> 19:28.930
再看文件夹

19:28.930 --> 19:29.930
那么当前目录

19:29.930 --> 19:31.930
是不是有这个a.js呢

19:31.930 --> 19:32.930
如果说有的话

19:32.930 --> 19:33.930
它就直接到了

19:33.930 --> 19:34.930
但是我们当前的目录

19:34.930 --> 19:35.930
你看我们现在在

19:35.930 --> 19:36.930
index.js里面

19:36.930 --> 19:37.930
当前的目录里面

19:37.930 --> 19:38.930
有没有a.js

19:38.930 --> 19:39.930
是不是没有

19:39.930 --> 19:41.930
没有怎么办呢

19:41.930 --> 19:42.930
没有呢就是

19:42.930 --> 19:44.930
把a

19:44.930 --> 19:47.930
当做文件夹

19:48.930 --> 19:49.930
并且

19:49.930 --> 19:50.930
把

19:50.930 --> 19:52.930
该文件夹

19:52.930 --> 19:53.930
当做

19:53.930 --> 19:54.930
一个

19:54.930 --> 19:55.930
包

19:55.930 --> 19:56.930
它把这个

19:56.930 --> 19:57.930
它相当于是node mahjosh

19:57.930 --> 19:58.930
相当于是node mahjosh

19:58.930 --> 19:59.930
里面有个node dahi

19:59.930 --> 20:00.930
那么这里呢

20:00.930 --> 20:01.930
它就把这个a

20:01.930 --> 20:02.930
当成

20:02.930 --> 20:03.930
这个就是一个包

20:03.930 --> 20:04.930
包的文件夹

20:04.930 --> 20:05.930
当然我们肯定

20:05.930 --> 20:06.930
不是一个包

20:06.930 --> 20:07.930
对不对

20:07.930 --> 20:08.930
它会把它当成一个包

20:08.930 --> 20:09.930
然后按照包的规则

20:09.930 --> 20:10.930
又来了

20:10.930 --> 20:11.930
对不对

20:11.930 --> 20:12.930
按照包的规则又来了

20:12.930 --> 20:13.930
然后看怎么来看呢

20:13.930 --> 20:14.930
看

20:14.930 --> 20:15.930
该包

20:16.930 --> 20:18.930
是否有

20:18.930 --> 20:20.930
package.json文件

20:20.930 --> 20:22.930
是不是有这个文件

20:23.930 --> 20:25.930
读取妹之段

20:25.930 --> 20:26.930
后面就不写了

20:26.930 --> 20:27.930
就一样的道理的

20:27.930 --> 20:28.930
所以它怎么看的呢

20:28.930 --> 20:30.930
它最多是这样子看的

20:30.930 --> 20:31.930
这样子

20:31.930 --> 20:32.930
底耳鞋杠a

20:32.930 --> 20:33.930
底耳鞋杠a呢

20:33.930 --> 20:34.930
它首先看

20:34.930 --> 20:35.930
有没有a.js

20:35.930 --> 20:36.930
那肯定没有

20:36.930 --> 20:37.930
没有的话

20:37.930 --> 20:38.930
它就看有没有a.文件夹

20:38.930 --> 20:39.930
它会把这个文件夹

20:39.930 --> 20:40.930
当成一个包

20:40.930 --> 20:41.930
那么包里面

20:41.930 --> 20:42.930
看以后下

20:42.930 --> 20:43.930
有没有package.json

20:43.930 --> 20:44.930
那个配置文件

20:44.930 --> 20:45.930
没有

20:45.930 --> 20:46.930
没有的话

20:46.930 --> 20:47.930
读那个

20:47.930 --> 20:48.930
读默认的入口文件

20:48.930 --> 20:49.930
in.js

20:49.930 --> 20:50.930
所以说这样子

20:50.930 --> 20:51.930
是能读出来的

20:51.930 --> 20:52.930
怎么来看一下

20:53.930 --> 20:54.930
load

20:55.930 --> 20:57.930
in.js

20:57.930 --> 20:58.930
你看

20:58.930 --> 20:59.930
是不是能读出来

20:59.930 --> 21:00.930
对不对

21:00.930 --> 21:01.930
能读出来

21:01.930 --> 21:02.930
那如果说

21:02.930 --> 21:03.930
这个文件

21:03.930 --> 21:04.930
里面有package.json

21:04.930 --> 21:06.930
package.json

21:06.930 --> 21:07.930
有这个

21:07.930 --> 21:08.930
那么我这里只需要

21:08.930 --> 21:09.930
作为一个配置

21:09.930 --> 21:10.930
就配置妹

21:10.930 --> 21:11.930
妹的话

21:11.930 --> 21:12.930
我给它配置为妹.js

21:12.930 --> 21:13.930
而不是in.js.js

21:13.930 --> 21:14.930
这样吧

21:14.930 --> 21:15.930
我在这里边再加一个

21:15.930 --> 21:16.930
妹.js

21:16.930 --> 21:17.930
妹.js

21:17.930 --> 21:18.930
然后这里面要导出

21:18.930 --> 21:20.930
export

21:20.930 --> 21:21.930
port

21:21.930 --> 21:22.930
导出什么呢

21:22.930 --> 21:24.930
导出index

21:24.930 --> 21:26.930
导出那个a

21:26.930 --> 21:27.930
妹

21:27.930 --> 21:28.930
你看一下

21:28.930 --> 21:30.930
导出个a.me

21:30.930 --> 21:31.930
好

21:31.930 --> 21:32.930
那么现在我们再运行

21:32.930 --> 21:33.930
再运行的话

21:33.930 --> 21:35.930
loadin.js

21:35.930 --> 21:36.930
运行的话

21:36.930 --> 21:37.930
那么它会输出a

21:37.930 --> 21:39.930
还是输出a.me

21:39.930 --> 21:40.930
你看

21:40.930 --> 21:41.930
这个index

21:41.930 --> 21:42.930
也就是说

21:42.930 --> 21:43.930
还是导入这个妹

21:43.930 --> 21:45.930
会导入哪个呢

21:45.930 --> 21:46.930
你看一下吧

21:46.930 --> 21:47.930
它就会导入妹

21:47.930 --> 21:48.930
因为这里边

21:48.930 --> 21:49.930
它定义的

21:49.930 --> 21:50.930
就是入口文件为

21:50.930 --> 21:51.930
它把整个这个文件

21:51.930 --> 21:52.930
当成个包了

21:52.930 --> 21:53.930
它会定义

21:53.930 --> 21:54.930
包里面的入口文件

21:54.930 --> 21:56.930
是妹.js

21:56.930 --> 21:57.930
但是我们通常

21:57.930 --> 21:58.930
都不会去这样做

21:58.930 --> 21:59.930
那如果说你没有写

21:59.930 --> 22:00.930
这个妹.js

22:00.930 --> 22:01.930
它找不到妹了

22:01.930 --> 22:02.930
它又去读音这个社了

22:02.930 --> 22:03.930
就这么个规则

22:03.930 --> 22:04.930
这个地方

22:04.930 --> 22:06.930
听起来好像有点绕

22:06.930 --> 22:07.930
其实我们平时开发

22:07.930 --> 22:09.930
谁会去写这个玩意

22:09.930 --> 22:10.930
谁会去动这个东西

22:10.930 --> 22:11.930
没有什么意义

22:11.930 --> 22:13.930
不太会去动这个东西

22:13.930 --> 22:14.930
只这个东西

22:14.930 --> 22:15.930
在少数情况下

22:15.930 --> 22:17.930
会有那么一点点用

22:17.930 --> 22:18.930
而且是要在

22:18.930 --> 22:19.930
我们发布包的时候

22:19.930 --> 22:20.930
有那么一点点用

22:20.930 --> 22:21.930
我们通常不会去

22:21.930 --> 22:22.930
动这个东西

22:22.930 --> 22:23.930
让它保留

22:23.930 --> 22:24.930
它的默认指音这个社

22:24.930 --> 22:25.930
那么也就是说

22:25.930 --> 22:27.930
我们可以这样子认为

22:27.930 --> 22:28.930
如果说我们这样子

22:28.930 --> 22:29.930
直接写的

22:29.930 --> 22:30.930
可以直接导入一个文件

22:30.930 --> 22:31.930
那么有文件就读文件

22:31.930 --> 22:32.930
如果没有文件

22:32.930 --> 22:33.930
就读这个文件

22:33.930 --> 22:34.930
假里边的

22:34.930 --> 22:36.930
音这个社调解释

22:36.930 --> 22:37.930
我们就可以这样认为

22:37.930 --> 22:38.930
并且

22:38.930 --> 22:39.930
我们在用这个

22:39.930 --> 22:40.930
第三方模块的时候

22:40.930 --> 22:42.930
其他的包的时候

22:42.930 --> 22:43.930
我们也没有必要

22:43.930 --> 22:44.930
去看那个包里边

22:44.930 --> 22:45.930
它到底入口文件是啥

22:45.930 --> 22:47.930
有什么关系呢

22:47.930 --> 22:48.930
是不是没有任何关系

22:48.930 --> 22:49.930
我们只要拿过来用

22:49.930 --> 22:50.930
就行了

22:50.930 --> 22:51.930
管它入口文件是啥

22:51.930 --> 22:52.930
只要能用就行了

22:52.930 --> 22:53.930
管它是哪个文件

22:53.930 --> 22:54.930
给我导出的

22:54.930 --> 22:56.930
我只要把它用起来就行了

22:56.930 --> 22:57.930
对吧

22:57.930 --> 22:59.930
这是关于这一点

22:59.930 --> 23:01.930
然后下一个

23:01.930 --> 23:03.930
在漏的环境里边

23:03.930 --> 23:05.930
我们还可以手动指定路径

23:05.930 --> 23:06.930
来导入相应的文件

23:06.930 --> 23:07.930
这种情况

23:07.930 --> 23:08.930
稍微少介一点

23:08.930 --> 23:09.930
不过也是一样的

23:09.930 --> 23:10.930
到底是一样的

23:10.930 --> 23:12.930
比方说把我们再写个文件

23:12.930 --> 23:14.930
Test这些是

23:14.930 --> 23:15.930
这个文件

23:15.930 --> 23:16.930
就是说我们导入

23:16.930 --> 23:18.930
Lowdash的时候

23:18.930 --> 23:19.930
看一下

23:19.930 --> 23:20.930
导入Lowdash的时候

23:20.930 --> 23:21.930
我们一般

23:21.930 --> 23:22.930
绝大部分情况下

23:22.930 --> 23:23.930
都是直接写个包的名字

23:23.930 --> 23:25.930
那么它直接把入口文件

23:25.930 --> 23:26.930
导入进来了

23:26.930 --> 23:27.930
对吧

23:27.930 --> 23:29.930
直接写个T Test

23:29.930 --> 23:30.930
随便写个

23:30.930 --> 23:31.930
所以导入进来了

23:31.930 --> 23:32.930
对不对

23:32.930 --> 23:33.930
那么如果说

23:33.930 --> 23:34.930
我有的时候

23:34.930 --> 23:35.930
遇到一些少数情况下

23:35.930 --> 23:37.930
我不希望导入它的入口文件

23:37.930 --> 23:39.930
我要导入它的具体的

23:39.930 --> 23:40.930
某个文件

23:40.930 --> 23:41.930
比方说它这里边有这么多文件

23:41.930 --> 23:42.930
对吧

23:42.930 --> 23:43.930
这么多乱七八糟的玩意

23:43.930 --> 23:44.930
我们随便找一个

23:44.930 --> 23:46.930
我要导入

23:46.930 --> 23:48.930
比方说把这个

23:48.930 --> 23:49.930
ADD点解释

23:49.930 --> 23:50.930
就随便买一个

23:50.930 --> 23:52.930
我要导入Lowdash

23:52.930 --> 23:54.930
FP目录下面的ADD点解释

23:54.930 --> 23:56.930
我们一般都不会这样做

23:56.930 --> 23:57.930
那怎么来导入呢

23:57.930 --> 23:58.930
怎么来导入呢

23:58.930 --> 23:59.930
其实跟我们

23:59.930 --> 24:00.930
自己导入是一样的

24:00.930 --> 24:01.930
在这里写路径

24:01.930 --> 24:02.930
对吧

24:02.930 --> 24:03.930
这是个文件夹

24:03.930 --> 24:04.930
Lowdash就是

24:04.930 --> 24:05.930
什么下面的文件夹

24:05.930 --> 24:07.930
然后里面FP

24:07.930 --> 24:09.930
然后写杠

24:09.930 --> 24:11.930
刚才是那个ADD

24:11.930 --> 24:13.930
说这样子写一样的

24:13.930 --> 24:14.930
一样的

24:16.930 --> 24:18.930
Lowdash

24:18.930 --> 24:19.930
这个是

24:21.930 --> 24:23.930
Lowdash

24:23.930 --> 24:24.930
要解释

24:24.930 --> 24:25.930
你看是不是一样的

24:25.930 --> 24:26.930
导入进来了

24:26.930 --> 24:27.930
对不对

24:27.930 --> 24:28.930
只是能我们平时的

24:28.930 --> 24:29.930
不太会这样的写

24:29.930 --> 24:31.930
它查账方式是一样的

24:31.930 --> 24:33.930
首先看啥

24:33.930 --> 24:35.930
首先看一下

24:35.930 --> 24:36.930
Lowdash目录下面

24:36.930 --> 24:38.930
有没有这个

24:38.930 --> 24:39.930
这个目录下面

24:39.930 --> 24:40.930
有没有这个目录下面的

24:40.930 --> 24:42.930
ADD点解释

24:42.930 --> 24:44.930
有监看文件有没有

24:44.930 --> 24:45.930
有是不是找到了

24:45.930 --> 24:46.930
对不对

24:46.930 --> 24:48.930
如果说文件没有的话

24:48.930 --> 24:50.930
它就把它当成一个文件夹

24:50.930 --> 24:52.930
看一下ADD这个文件夹有没有

24:52.930 --> 24:54.930
有这个文件夹的话

24:54.930 --> 24:55.930
假设有

24:55.930 --> 24:56.930
没有这个文件

24:56.930 --> 24:57.930
那么就看一下

24:57.930 --> 24:58.930
这里面有没有这个

24:58.930 --> 24:59.930
ADD文件夹

24:59.930 --> 25:01.930
那么有这个文件夹的话

25:01.930 --> 25:02.930
看一下文件夹

25:02.930 --> 25:04.930
里面有没有Packy点解释

25:04.930 --> 25:05.930
对吧

25:05.930 --> 25:06.930
看一下有没有一个配置文件

25:06.930 --> 25:07.930
那么有的话就把

25:07.930 --> 25:08.930
Mate读出来

25:08.930 --> 25:10.930
作为它的入口文件

25:10.930 --> 25:12.930
如果说没有

25:12.930 --> 25:13.930
或者是入口文件读不到

25:13.930 --> 25:14.930
那么它就会读

25:14.930 --> 25:15.930
Index的解释

25:15.930 --> 25:16.930
就这么简单

25:16.930 --> 25:17.930
就这么简单

25:17.930 --> 25:18.930
一般情况下

25:18.930 --> 25:20.930
都要么就是有文件

25:20.930 --> 25:21.930
要么就是有文件夹

25:21.930 --> 25:22.930
对不对

25:22.930 --> 25:23.930
OK

25:23.930 --> 25:24.930
这就是

25:24.930 --> 25:25.930
在Lowdash的环境里面

25:25.930 --> 25:26.930
如何去使用一个包

25:26.930 --> 25:27.930
是不是非常简单

25:27.930 --> 25:28.930
只需要

25:28.930 --> 25:29.930
把点儿鞋杠

25:29.930 --> 25:30.930
或者是点儿鞋杠

25:30.930 --> 25:31.930
去掉

25:31.930 --> 25:32.930
那么它就会自动的

25:32.930 --> 25:33.930
会从Lowdash

25:33.930 --> 25:34.930
mode下面去找

25:34.930 --> 25:36.930
而且我们通常用的

25:36.930 --> 25:37.930
就是它的入口文件

25:37.930 --> 25:39.930
而不会拥打它的别的文件

25:39.930 --> 25:41.930
通常都是直接用入口文件

25:41.930 --> 25:42.930
好了

25:42.930 --> 25:43.930
这就是关于

25:43.930 --> 25:44.930
我们这一刻的东西

25:44.930 --> 25:45.930
包的使用

25:45.930 --> 25:47.930
在Lowdash环境里面使用

25:47.930 --> 25:49.930
那么我们下节课的话

25:49.930 --> 25:51.930
来做一个练习吧

25:51.930 --> 25:52.930
先不着急

25:52.930 --> 25:53.930
不着急学别的了

25:53.930 --> 25:54.930
先做一个练习

25:54.930 --> 25:55.930
再巩固一下

25:55.930 --> 25:56.930
虽然说很简单

25:56.930 --> 25:57.930
但是我们要把练习

25:57.930 --> 25:58.930
因为这些东西

25:58.930 --> 25:59.930
会非常非常基本的用法

