WEBVTT

00:00.000 --> 00:03.840
项目开发的差不多了 该干嘛呢 该优化了

00:04.860 --> 00:06.660
我说一下优化这件事

00:07.160 --> 00:08.200
首先优化了

00:08.700 --> 00:12.040
不要去太过于早的去做

00:12.540 --> 00:16.120
因为你很早的时候刚刚开始开发的时候

00:16.380 --> 00:18.680
非常担心这个优化的问题的话

00:19.200 --> 00:20.480
首先会影响你的开发效率

00:21.000 --> 00:23.300
第二你考虑的肯定不是很全面

00:23.560 --> 00:28.160
你不知道开发过程中会用到哪些第三方库 会希望做哪些优化

00:28.420 --> 00:29.440
因为优化这件事

00:30.460 --> 00:31.540
是无穷无尽的

00:32.040 --> 00:36.660
他不是说有一个固定的定式 让你怎么去优化就怎么去优化 也就是说呢

00:36.920 --> 00:39.480
这几刻我讲完了过后 你们不要又把它背下来

00:39.740 --> 00:41.780
然后将来在项目里面就按照我的方式

00:42.540 --> 00:43.820
一行不动地去优化

00:44.080 --> 00:45.100
他不是这样子的

00:45.620 --> 00:48.680
优化的事情特别特别多 需要具体情况

00:48.940 --> 00:49.980
具体分析

00:50.740 --> 00:53.560
我们解决一个问题 总是这么几个步骤

00:54.060 --> 00:54.840
首先是

00:55.340 --> 00:56.120
发现问题

00:57.140 --> 00:58.160
然后分析问题

00:58.880 --> 01:00.160
你首先得发现

01:00.420 --> 01:02.460
然后分析这个问题是怎么造成的

01:02.720 --> 01:03.220
然后

01:04.000 --> 01:04.760
设想方案

01:06.560 --> 01:08.100
设想一种问题的解决方案

01:08.360 --> 01:09.900
然后去尝试解决

01:10.660 --> 01:11.680
尝试解决

01:13.220 --> 01:16.040
最后是测试 看一下这个问题有没有解决

01:16.300 --> 01:17.820
总是经过这么几个步骤

01:18.340 --> 01:19.620
那么每一个步骤

01:19.880 --> 01:20.900
你都需要知道

01:21.160 --> 01:21.920
很多

01:22.180 --> 01:22.940
东西的原理

01:23.200 --> 01:24.740
就是为什么我给大家讲课

01:25.000 --> 01:27.040
特别特别重视原理和概念

01:27.240 --> 01:29.300
你不知道原理和概念的话 你问题都发现不了

01:30.060 --> 01:33.640
就算发现了问题 你也不知道一个问题是怎么造成的 没发现去分析

01:33.900 --> 01:35.180
我们很多在

01:35.440 --> 01:36.460
开发的过程中

01:37.740 --> 01:41.580
几乎所有的很少很少有东西是一个定式的

01:41.840 --> 01:44.660
它都是灵活处理的 具体情况具体分析

01:45.680 --> 01:48.500
那么我们现在开发基本到了尾声了 基本完了

01:48.760 --> 01:54.640
可能还有一些bug 如果说有bug的话 大家可以在github上面给我提一下e-show

01:54.900 --> 01:56.940
或者是在群里边说一下

01:57.140 --> 01:58.720
或者是通过其他老师转达一下

01:58.960 --> 02:00.320
再修改吧

02:00.580 --> 02:02.120
应该搭着bug应该没啥了

02:02.360 --> 02:04.920
可能有一些小的bug 我也不知道 我们也去严格的测试

02:05.700 --> 02:09.480
那么现在开发完了 我们要去做一些打包结果的优化

02:09.740 --> 02:12.860
那么这边优化的层面有很多 我们这些可能当然说那个打包结果

02:13.120 --> 02:14.140
我们怎么去优化它

02:14.660 --> 02:18.240
那么打包结果优化的话 我们首先要知道打包结果有什么问题

02:19.000 --> 02:21.060
那么我们怎么知道打包结果有没有问题呢

02:21.320 --> 02:22.600
我们是不是要需要一个工具

02:22.860 --> 02:25.400
再讲那个构建工具wepack的时候给他讲过

02:25.600 --> 02:27.400
有一个工具叫做wepack bundle

02:27.640 --> 02:28.440
adnizer

02:28.940 --> 02:31.760
它是一个专门来分析打包结果的一个工具

02:32.520 --> 02:34.300
由于我们这个5u

02:34.560 --> 02:36.360
它是通过5u kli 来创建的工程

02:36.620 --> 02:38.240
而5u kli 创建的工程

02:38.760 --> 02:40.720
它内部使用的就是wepack

02:41.240 --> 02:43.780
所以说它当然可以支持这些wepack的插件

02:44.040 --> 02:48.520
那么我们是不是又要知道在5u kli 里边怎么去使用wepack的插件

02:49.040 --> 02:51.080
怎么使用呢 按照官方文档的说法

02:51.320 --> 02:52.740
你怎么去找官方文档的

02:53.740 --> 02:58.700
官方文档里边你会看到这里边

02:58.960 --> 03:00.220
wepack相关

03:00.480 --> 03:02.680
他告诉你怎么去配置wepack

03:02.940 --> 03:04.140
他有一些默认配置

03:04.380 --> 03:05.500
那么当然你可以更改

03:06.000 --> 03:07.220
他告诉你怎么配置呢

03:07.480 --> 03:11.480
你只需要在5u config.js里边加上一个configure

03:12.400 --> 03:12.920
wepack

03:13.180 --> 03:13.940
这么一个配置

03:14.200 --> 03:15.980
那么这里边的配置就是wepack的配置

03:16.240 --> 03:17.780
他会把这个配置他告诉你

03:18.040 --> 03:19.320
他会使用wepack merge

03:19.840 --> 03:21.620
那么这个玩意是不是以前接触过的

03:21.880 --> 03:22.380
对不对

03:22.580 --> 03:24.880
那么是一个合并的合并配置的一个工具

03:25.140 --> 03:29.500
他会把你这个配置跟他的默认配置进行合并形成一个最终的wepack配置

03:30.020 --> 03:31.900
那么我们现在要做的事情呢就是

03:32.660 --> 03:34.880
加入在wepack里边加入这么一个插件

03:35.640 --> 03:36.660
来分析

03:36.920 --> 03:38.200
那个打包结果的

03:38.720 --> 03:40.240
那么我们现在去加入他

03:40.500 --> 03:42.560
我们在找到这个5u config.js

03:42.820 --> 03:43.840
现在我们去导入他

03:44.100 --> 03:45.640
首先帮上去 首先来安装他

03:45.900 --> 03:46.660
安装一下

03:47.420 --> 03:49.460
我们看一下我们的最终包有什么样的问题

03:50.420 --> 03:51.700
就像我们这个项目呢

03:51.940 --> 03:53.420
能做的优化其实不多

03:53.660 --> 03:55.300
本来就是个非常非常小的一个项目

03:57.420 --> 03:59.380
好 安装他 哎呦 哎呦 等一下啊

04:00.180 --> 04:02.100
我已经安装完了是吧

04:02.540 --> 04:04.940
等一下我怎么把它安装成

04:05.900 --> 04:07.340
呃 生产环境一来的

04:08.060 --> 04:09.380
应该是加个横桿梯对吧

04:11.260 --> 04:12.180
好 重新安装一下啊

04:14.360 --> 04:15.240
好 安装他啊

04:15.720 --> 04:17.080
安装他好了过后了 你看

04:17.320 --> 04:18.360
现在就是在这了啊

04:18.800 --> 04:22.520
现在我们在这个5u config.js里边去使用他

04:23.440 --> 04:24.080
导入他啊

04:24.960 --> 04:26.160
他的用法以前讲过

04:26.760 --> 04:28.760
忘了挂去查看一下他的官方文档

04:28.960 --> 04:29.960
我们只需要在这里呢

04:29.960 --> 04:32.320
去加入一个configure

04:33.520 --> 04:34.120
wavepack

04:35.840 --> 04:36.680
是这样写吧

04:37.520 --> 04:39.000
来啊 直接复制一下吧

04:40.000 --> 04:41.360
好 配置wavepack

04:41.360 --> 04:43.360
然后这里边我们配置一下wavepack的插件 对吧

04:43.360 --> 04:44.680
所以说我们学wavepack的作用呢

04:44.680 --> 04:45.240
也就在

04:45.680 --> 04:47.640
有些在这个时候 发挥点的作用

04:48.120 --> 04:48.760
然后配置插件

04:48.760 --> 04:50.000
我们其中加一个插件啊

04:50.000 --> 04:50.880
叫做bundle

04:51.600 --> 04:53.280
adnizer

04:53.520 --> 04:54.320
plugging

04:54.680 --> 04:55.520
加入这么一个插件

04:56.400 --> 04:57.600
但是加这个插件过后呢

04:57.600 --> 04:59.280
其实有一点问题的

04:59.280 --> 04:59.960
什么问题呢

04:59.960 --> 05:01.640
就是如果我现在呢

05:01.640 --> 05:03.360
使用npm run build

05:03.680 --> 05:04.320
去打包

05:05.680 --> 05:06.320
打包的时候呢

05:06.320 --> 05:07.920
肯定要加入这个wavepack插件呗

05:08.480 --> 05:09.320
加入插件过后呢

05:09.320 --> 05:10.440
自然能够打

05:10.720 --> 05:11.560
打开一个网页

05:11.560 --> 05:14.520
能够帮我们看到这个包的尺寸啊

05:14.520 --> 05:15.560
这些分析结果啊

05:15.560 --> 05:17.000
你看 这个网页是不是出来了

05:17.040 --> 05:17.480
对吧

05:17.480 --> 05:19.040
包的尺寸 各种尺寸就出来了

05:19.040 --> 05:19.480
但是呢

05:19.480 --> 05:20.560
因为我们这里呢

05:20.560 --> 05:22.960
是配置到这个wavepack的介石里边的

05:22.960 --> 05:23.800
那么现在呢

05:23.800 --> 05:25.960
如果说我们在开发环境里边

05:25.960 --> 05:27.600
用这个ronsoft去

05:28.280 --> 05:29.120
打开的话

05:29.120 --> 05:30.600
它也会加入这个插件

05:30.920 --> 05:32.280
那么这也有点烦人了啊

05:32.280 --> 05:33.240
我们不希望了

05:33.240 --> 05:34.680
在开发的环境里边

05:34.680 --> 05:36.760
也给我弄出这么一个玩意儿出来啊

05:36.760 --> 05:38.480
你看我们现在的网页也有了啊

05:38.480 --> 05:40.000
能够访问到我们的网页

05:40.120 --> 05:42.440
也能够访问到我们这些插件

05:42.760 --> 05:44.120
能够用这个插件

05:44.120 --> 05:45.600
但是如果说你真的需要的话

05:45.600 --> 05:46.280
那就ok

05:46.360 --> 05:47.440
如果说你不需要的话

05:47.440 --> 05:49.360
我们往往的开发环境里边是不需要的

05:49.880 --> 05:50.760
那怎么办呢

05:50.760 --> 05:51.680
我们这里呢

05:51.680 --> 05:53.840
因为这个毕竟是一段介石代码嘛

05:53.840 --> 05:54.600
所以说我们这里是不是

05:54.600 --> 05:56.560
可以根据当前的环境来判断

05:56.560 --> 05:57.760
要不要用这个插件

05:58.040 --> 05:58.520
甚至呢

05:58.520 --> 05:59.600
我们在进一步下

05:59.600 --> 06:01.280
我们可以根据当前的环境

06:01.280 --> 06:03.320
来读取不同的wavepack配置

06:03.520 --> 06:04.920
那这个东西又怎么玩呢

06:04.920 --> 06:06.240
这东西你自己玩就行了

06:06.240 --> 06:07.000
非常简单

06:07.000 --> 06:08.000
比方说我们这里呢

06:08.000 --> 06:09.000
新建一个文件

06:09.000 --> 06:12.440
叫做wavepackconfig.js

06:13.440 --> 06:16.120
我们这里进行两个配置

06:16.120 --> 06:19.280
一个配置是开发环境的

06:19.280 --> 06:20.600
开发环境的一个配置

06:20.600 --> 06:22.320
一个配置是生产环境的

06:22.680 --> 06:24.200
我们这里导出的话

06:25.360 --> 06:25.720
注意啊

06:25.720 --> 06:27.080
这是load介石的环境

06:27.080 --> 06:28.200
因为我们wavepack的配置

06:28.200 --> 06:29.160
是在load环境里边

06:29.160 --> 06:30.240
我们这里导出的话

06:30.240 --> 06:31.920
我们就可以使用什么导出呢

06:31.920 --> 06:32.800
就可以使用

06:33.200 --> 06:35.440
判断当前的环境是什么

06:35.440 --> 06:36.640
然后进行导出

06:37.000 --> 06:38.800
那么当前的环境是什么呢

06:38.800 --> 06:39.880
我们怎么来判断呢

06:39.880 --> 06:41.200
无忧可力这个事情

06:41.200 --> 06:42.120
已经帮我们做了

06:42.160 --> 06:43.840
我们以前学习wavepack的时候呢

06:43.840 --> 06:46.320
也学习过根据不同的环境已经打包

06:46.320 --> 06:47.560
实际上这个事情

06:47.560 --> 06:49.320
无忧可力他已经帮我们做了

06:49.320 --> 06:50.240
他会自动的

06:50.240 --> 06:51.960
当我们运行这个命令的时候

06:52.600 --> 06:54.000
当我们用npm装射

06:54.000 --> 06:55.280
运行这个命令的时候

06:55.280 --> 06:57.120
他会把环境的环境变量

06:57.120 --> 06:59.160
设置为dividecment

06:59.680 --> 07:01.320
当我们运行这个命令的时候

07:01.320 --> 07:02.480
他会把我们的环境变量

07:02.480 --> 07:03.640
设为production

07:03.640 --> 07:05.000
所以我们可以根据什么

07:05.000 --> 07:06.440
根据load.js里边

07:06.440 --> 07:07.120
这就代码

07:07.120 --> 07:09.840
process.env.load.env

07:09.840 --> 07:11.040
通过它来判断

07:11.160 --> 07:12.640
如果说它是生产环境

07:13.120 --> 07:13.760
proxy

07:14.520 --> 07:16.240
那么这里呢我就导出一个配置

07:16.240 --> 07:17.560
merge xport

07:17.560 --> 07:18.440
导出这么一个配置

07:18.440 --> 07:19.680
我就直接写在这儿了

07:20.040 --> 07:21.040
这是生产环境

07:22.680 --> 07:24.480
如果说是开发环境的话

07:24.480 --> 07:25.760
那么我们导出另外一个配置

07:25.760 --> 07:26.320
当开发环境

07:26.320 --> 07:27.680
我目前也没有什么好配置

07:27.680 --> 07:29.040
我就配置个公对项就得了

07:29.920 --> 07:31.120
那么生产环境的话

07:31.120 --> 07:32.360
我就把这个等同性写过来

07:32.360 --> 07:33.600
就这个灵活处理

07:33.600 --> 07:35.480
你自己根据情况来处理就完事了

07:36.200 --> 07:36.760
小照片

07:36.760 --> 07:37.160
然后呢

07:37.160 --> 07:38.640
我在这里导出一个proxy

07:39.480 --> 07:41.920
这里导出一个proxy

07:43.120 --> 07:43.520
好

07:43.520 --> 07:45.400
接下来我们在这边就非常简单了

07:45.400 --> 07:47.880
我们在这边直接使用require

07:49.600 --> 07:50.760
wapac.config

07:51.400 --> 07:51.880
对吧

07:51.880 --> 07:52.680
是不是可以了

07:52.680 --> 07:53.000
好了

07:53.000 --> 07:54.120
那么现在我们来看一下

07:54.120 --> 07:55.840
接下来我们在生产环境

07:55.840 --> 07:57.960
在开发环境里面去运行

08:02.690 --> 08:03.050
运行

08:03.050 --> 08:05.130
是不是没有打开那个分析页面的

08:05.130 --> 08:06.810
它去寻视个wapac配置

08:06.810 --> 08:08.170
那里就没有生销了

08:08.690 --> 08:10.930
然后在生产环境打包的时候

08:10.930 --> 08:11.970
npm装

08:12.050 --> 08:12.650
开发完了过后

08:12.650 --> 08:14.170
我们会运行的打包命令

08:14.170 --> 08:14.770
把它上传到

08:14.770 --> 08:15.330
打包到结果

08:15.330 --> 08:16.130
上传到服务器

08:17.810 --> 08:18.210
运行

08:19.450 --> 08:20.850
你看是不是打开了

08:20.850 --> 08:21.210
对吧

08:21.210 --> 08:22.650
就形成这么一个效果

08:23.770 --> 08:24.770
这是第一个

08:24.770 --> 08:28.530
我们首先生成一个包的这么一个分析

08:28.530 --> 08:29.890
就是对这个电审部路

08:29.890 --> 08:31.730
生成这些东西来进行的分析

08:31.730 --> 08:32.850
那么我们现在来看一下

08:32.850 --> 08:33.650
这个分析结果

08:34.770 --> 08:35.330
这个分析结果

08:35.330 --> 08:37.850
首先这个空残好像这里没有

08:37.850 --> 08:39.050
刚才我把它去掉了

08:39.050 --> 08:40.850
再打包一次

08:41.050 --> 08:41.730
可以看得很清楚

08:42.330 --> 08:43.890
就在这个命令里边

08:43.890 --> 08:45.570
它已经给你提供了一些警告了

08:45.570 --> 08:46.210
它告诉你

08:46.210 --> 08:47.970
有些东西确实太大了

08:47.970 --> 08:48.690
首先什么东西

08:48.690 --> 08:49.850
首先是图片

08:49.850 --> 08:51.090
gf图片

08:51.090 --> 08:53.170
这个图片就占了300多KB

08:53.170 --> 08:54.850
那这个玩意我就没发优化了

08:54.850 --> 08:55.690
反正这个图片

08:55.690 --> 08:56.570
就这个玩意图片

08:56.570 --> 08:58.010
这个图片有点大

08:58.010 --> 08:59.330
这个玩意是设计搞了

08:59.330 --> 09:01.130
设计师来解决这个问题

09:01.130 --> 09:02.450
这个设计师说一下

09:02.450 --> 09:03.650
确实有点大

09:03.650 --> 09:04.970
我在网上随便下了一个

09:04.970 --> 09:05.890
这些无关情要

09:05.890 --> 09:07.490
你可以去下一些别的图片

09:07.490 --> 09:09.530
或者用SVE做一些动态图片都可以

09:11.290 --> 09:12.450
然后他告诉你

09:12.450 --> 09:14.170
有一个G也是特别大

09:14.170 --> 09:16.050
这个G也是有311KB的

09:16.050 --> 09:19.530
他说最好在限制在244KB以内

09:19.530 --> 09:21.090
他告诉你这么一些警告

09:21.090 --> 09:24.930
然后他给你提供了一些优化的一些建议

09:24.930 --> 09:26.570
那些建议我们就不用看了

09:26.570 --> 09:28.850
我们直接给大家讲怎么来优化

09:28.850 --> 09:30.450
那么我们可以看到这个打包结构

09:30.450 --> 09:31.890
主要是打包成两个G也是

09:31.890 --> 09:32.250
对吧

09:32.250 --> 09:33.090
一个是这个G也是

09:33.090 --> 09:34.170
一个是这个G也是

09:34.170 --> 09:36.290
这个G也是实际上

09:36.290 --> 09:37.290
右边这个G也是

09:37.290 --> 09:38.610
实际上大角不大

09:38.610 --> 09:39.890
它只有60多KB

09:39.930 --> 09:42.290
你看Pose the size

09:42.290 --> 09:45.130
它打包结构只有602.35KB

09:45.130 --> 09:48.130
然后如果说你对它进行GZIP压缩过后

09:48.130 --> 09:50.210
只有16.59KB

09:50.210 --> 09:51.850
GZIP压缩我们在WePAC里面

09:51.850 --> 09:52.450
是不是也讲了

09:52.450 --> 09:53.730
加个长线就完事了

09:53.730 --> 09:55.570
就把它打包成GZIP格式

09:55.570 --> 09:57.050
当然也可以在服务端那边

09:57.050 --> 09:59.090
在动态进行处理也可以

09:59.090 --> 10:00.930
现在我们不管是个什么GZIP

10:00.930 --> 10:03.970
我就看这个打包结构有62.35KB

10:03.970 --> 10:05.370
这个还可以

10:05.370 --> 10:06.290
这个GX是什么呢

10:06.290 --> 10:07.090
打包出来的

10:07.090 --> 10:08.250
这个GX他告诉你

10:08.290 --> 10:09.170
它里边的模块呢

10:09.170 --> 10:10.930
包括Media GX

10:10.930 --> 10:13.050
在内的162个模块

10:13.050 --> 10:13.850
那也就是说了

10:13.850 --> 10:14.610
这个GX实际上

10:14.610 --> 10:15.010
他告诉你

10:15.010 --> 10:17.290
它就是SRC目录的打包出来的GX

10:17.290 --> 10:18.770
就是我们的工程代码

10:18.770 --> 10:19.610
就是我们自己起来

10:19.610 --> 10:20.890
SRC目录里边的代码

10:20.890 --> 10:23.330
通过这个入口文件打包出来的GX

10:23.330 --> 10:24.330
好另外这一部分呢

10:24.330 --> 10:26.250
这个GX是比较大的

10:26.250 --> 10:26.930
这个GX呢

10:26.930 --> 10:27.410
他告诉你

10:27.410 --> 10:28.730
它其实就是那个

10:28.730 --> 10:29.930
主要是load module

10:29.930 --> 10:31.650
也就是第三方库

10:31.650 --> 10:33.530
小门都用的VUX

10:33.530 --> 10:35.010
还有包括VU rotor

10:35.010 --> 10:35.210
对吧

10:35.210 --> 10:36.410
这些都是第三方库

10:36.410 --> 10:37.050
是他们东西

10:37.050 --> 10:38.130
这些东西打包出来的

10:38.130 --> 10:39.650
也这一块比较大

10:39.650 --> 10:41.210
原始大小呢

10:41.210 --> 10:42.250
有81

10:42.250 --> 10:43.730
812 kb

10:43.730 --> 10:44.530
打包出来的结果呢

10:44.530 --> 10:45.210
310

10:45.210 --> 10:46.090
其实我们这个项目里面

10:46.090 --> 10:47.690
还没有用到太多的第三方库

10:47.690 --> 10:48.050
对吧

10:48.050 --> 10:49.690
他都有这么多了

10:49.690 --> 10:51.570
这一块库呢

10:51.570 --> 10:53.290
这两个户戏都需要油花

10:53.290 --> 10:55.130
慢慢来

10:55.130 --> 10:58.050
首先对左边这个库呢

10:58.050 --> 10:59.570
对左边这一个坨

10:59.570 --> 11:00.130
做什么优化呢

11:00.130 --> 11:01.610
我们要叫分析它里边

11:01.610 --> 11:02.370
是什么东西

11:02.370 --> 11:03.490
首先是一个摩可结石

11:03.490 --> 11:04.370
它这个占的最多

11:04.370 --> 11:04.850
对吧

11:04.850 --> 11:05.970
占的比例最大

11:06.090 --> 11:08.090
摩可结石是这样子

11:08.090 --> 11:09.090
我这里呢

11:09.090 --> 11:09.770
没办法

11:09.770 --> 11:11.250
因为我这里没有服务器

11:11.250 --> 11:12.450
所以只能模拟

11:12.450 --> 11:15.010
实际的开发中呢

11:15.010 --> 11:17.690
如果说你要运行到打包这个命令的

11:17.690 --> 11:19.610
那说明你的开发已经完成了

11:19.610 --> 11:20.170
完成了

11:20.170 --> 11:21.650
你还需要入模拟数据吗

11:21.650 --> 11:22.010
没有

11:22.010 --> 11:23.610
这个时候服务器肯定有了

11:23.610 --> 11:25.050
你已经替换成了

11:25.050 --> 11:26.890
至少你替换成了测试服务器的东西

11:26.890 --> 11:28.170
对吧

11:28.170 --> 11:29.370
是不是已经有了

11:29.370 --> 11:30.450
所以这一块呢

11:30.450 --> 11:31.050
摩可结石呢

11:31.050 --> 11:32.370
我们可以不用管它

11:32.370 --> 11:33.810
因为在真实的情况里边

11:33.810 --> 11:35.290
这个地方打包的时候

11:35.290 --> 11:38.530
是不可能有这个摩可结石去模拟数据的

11:38.530 --> 11:39.210
所以说这一块呢

11:39.210 --> 11:39.930
我们不用管它

11:39.930 --> 11:40.890
就忽略它不看

11:40.890 --> 11:42.210
它就占了一百多KB

11:42.210 --> 11:42.530
你看

11:43.850 --> 11:45.090
然后后边还有啥呢

11:45.090 --> 11:45.690
啥呢

11:45.690 --> 11:46.890
你看几个大块

11:46.890 --> 11:48.770
一个是Wheel

11:48.770 --> 11:49.890
一个是Wheel Rotor

11:49.890 --> 11:51.330
一个是Wheels

11:51.330 --> 11:53.410
那么这三个东西能不能优化了

11:53.410 --> 11:55.250
这两个没办法优化

11:55.250 --> 11:55.890
你怎么优化

11:55.890 --> 11:58.050
你属于你不用Wheel

11:58.050 --> 11:59.730
你不用Rotor

11:59.730 --> 12:01.050
不用Wheels

12:01.050 --> 12:01.410
但是呢

12:01.410 --> 12:03.770
我们有一些想法

12:03.770 --> 12:05.370
有想法的同位是好的

12:05.370 --> 12:05.850
什么想法呢

12:05.850 --> 12:07.170
就是我用了Wheel

12:07.170 --> 12:07.810
用了Rotor

12:07.810 --> 12:08.490
用了Wheels

12:08.490 --> 12:08.850
但是呢

12:08.850 --> 12:11.050
我没有用到它里面全部的东西

12:11.050 --> 12:12.650
我们只用了一部分

12:12.650 --> 12:14.530
是不是可以用区协品

12:14.530 --> 12:16.130
可以用塑窑优化

12:16.130 --> 12:18.450
也减少打包体积

12:18.450 --> 12:19.450
但是呢

12:19.450 --> 12:20.370
有个问题就是

12:20.370 --> 12:21.850
Wheel 2这个版本的

12:21.850 --> 12:24.210
根本就不支持区协品

12:24.210 --> 12:25.370
因为它都是默认导书

12:25.370 --> 12:25.890
对吧

12:25.890 --> 12:27.570
默认导书竟然就全部都有了

12:27.570 --> 12:28.410
导书一个构造函数

12:28.410 --> 12:30.610
所有东西都是东西都在构造函数里面

12:30.610 --> 12:31.530
哪怕你没有用到的

12:31.530 --> 12:32.530
全部在里面

12:32.530 --> 12:35.410
所以说Wheel 2的这个塑窑优化呢

12:35.410 --> 12:37.330
那就等于没存在

12:37.330 --> 12:38.250
不存在

12:38.250 --> 12:39.650
Wheel Rotor也是一样的问题

12:39.650 --> 12:41.930
你看我们的Rotor代码

12:41.930 --> 12:43.970
Rotor代码是不是直接导致了Wheel Rotor了

12:43.970 --> 12:44.330
对吧

12:44.330 --> 12:44.850
所以说呢

12:44.850 --> 12:47.970
这里的塑窑优化也不存在

12:47.970 --> 12:49.850
唯一能够进行一下塑窑优化的呢

12:49.850 --> 12:51.970
是这个Wheels

12:51.970 --> 12:53.970
这个东西能够进行塑窑优化

12:53.970 --> 12:54.610
因为这个东西呢

12:54.610 --> 12:55.650
它都可以用基本

12:55.650 --> 12:56.810
它都用的是

12:56.810 --> 12:58.850
可以用基本导出

12:58.850 --> 12:59.890
包括用什么呢

12:59.890 --> 13:02.090
用那个就居民导出

13:02.090 --> 13:03.370
因为我们知道塑窑优化

13:03.370 --> 13:04.810
特别依赖于居民导出

13:04.810 --> 13:05.370
对吧

13:05.370 --> 13:07.170
它这些东西其实都可以去使用它的居民导出

13:07.170 --> 13:09.210
你不用导出它的整个东西

13:09.210 --> 13:10.490
也说在Stone里面呢

13:10.490 --> 13:11.450
我们在导入

13:11.450 --> 13:13.850
你看这里是不是在导入Wheel X的所有东西啊

13:13.850 --> 13:15.450
那么你可以不用这样的导入啊

13:15.450 --> 13:16.290
那导入什么呢

13:16.290 --> 13:17.090
比方那个Stone呢

13:17.090 --> 13:17.850
你可以这样导入

13:19.770 --> 13:20.530
Stone

13:20.530 --> 13:21.250
然后呢

13:21.250 --> 13:22.210
它安装插件

13:22.210 --> 13:22.730
安装插件呢

13:22.730 --> 13:24.610
你可以导入它的这个instore函数

13:24.610 --> 13:26.690
通过这个instore函数来的安装插件

13:26.690 --> 13:28.530
instore把Wheel放进去

13:28.530 --> 13:29.450
放一个Wheel

13:29.490 --> 13:30.330
构造函数里面

13:30.330 --> 13:32.170
构造函数进去

13:32.170 --> 13:32.730
Wheel X呢

13:32.730 --> 13:34.090
是可以进行塑咬优化的

13:34.090 --> 13:35.170
不过这种优化呢

13:36.530 --> 13:37.610
优化的东西有限

13:37.610 --> 13:39.170
因为Wheel X它本身就也不大

13:39.170 --> 13:42.250
你看它的打包出来结果12.32 kb

13:42.250 --> 13:44.410
那么我们这样子弄了过后呢

13:45.690 --> 13:46.170
你看啊

13:46.170 --> 13:47.370
我们重新打包

13:47.370 --> 13:48.210
np 冷装

13:48.210 --> 13:57.280
bude

13:57.280 --> 13:57.440
好

13:57.440 --> 13:58.160
你看

13:58.160 --> 13:59.480
这个Wheel X呢

13:59.480 --> 14:00.000
减少了

14:01.760 --> 14:02.640
大约2 kb

14:03.720 --> 14:05.680
你管啥事呢

14:05.680 --> 14:06.480
你不管啥事

14:06.480 --> 14:06.960
对吧

14:07.000 --> 14:08.880
但是实际上它是可以进行塑咬优化的

14:08.880 --> 14:10.400
这两个东西就没法优化

14:10.400 --> 14:11.240
以后这两个包呢

14:11.240 --> 14:13.120
你体积上你是没有什么办法的

14:13.920 --> 14:15.200
其实你看这个Wheel呢

14:15.200 --> 14:15.840
其实还好

14:15.840 --> 14:18.160
你看Wheel打包出来的也就是64 kb嘛

14:18.160 --> 14:19.120
对吧

14:19.120 --> 14:20.640
一个接challenge

14:20.640 --> 14:24.160
那个打包结果也有100 kb左右吧

14:25.160 --> 14:25.520
还好

14:25.520 --> 14:27.520
但是加在一起就比较多了

14:27.520 --> 14:28.120
那么这一块呢

14:28.120 --> 14:30.160
其实我们可以想到一些别的途径

14:30.160 --> 14:31.320
就打包这个体积呢

14:31.320 --> 14:32.720
我们确实没办法了

14:32.720 --> 14:33.040
但是呢

14:33.040 --> 14:34.400
可以想到一些别的途径

14:34.400 --> 14:35.040
什么途径呢

14:36.000 --> 14:37.760
就是我们可以利用CDN

14:39.040 --> 14:40.880
首先告诉他什么叫CDN

14:40.880 --> 14:43.760
CDN叫做内容分发网络

14:44.560 --> 14:45.360
啥意思呢

14:45.360 --> 14:49.840
就是他可以在全球或者是在某一个局域范围内

14:49.840 --> 14:52.480
比如说中国架设多台服务器

14:52.880 --> 14:54.080
你看我们这像一张图

14:54.080 --> 14:55.680
在全球他可以架设多台服务器

14:55.680 --> 14:57.360
这个每个点呢就是一个CDN服务器

14:58.160 --> 14:59.280
那么这个服务器呢

14:59.280 --> 15:01.320
它会定期从原站

15:01.800 --> 15:04.880
比如说你发布了

15:04.880 --> 15:06.880
你把你项目做好过后

15:06.880 --> 15:08.600
你把你的东西买了一个服务器

15:08.600 --> 15:09.560
扔到你的服务器上

15:09.560 --> 15:10.720
你的服务器就是原站

15:12.240 --> 15:13.360
原站的可能在北京

15:13.360 --> 15:14.120
可能在上海

15:14.120 --> 15:14.760
可能在欧洲

15:14.760 --> 15:15.640
可能在别的地区

15:15.640 --> 15:16.200
只有一个

15:17.320 --> 15:17.800
一个例子

15:18.720 --> 15:21.000
当然原站也可能会多台服务器

15:21.000 --> 15:22.880
但是它地方就在一个

15:24.080 --> 15:24.560
然后呢

15:24.560 --> 15:27.680
我们在通过CDN的服务器是遍布全球的

15:28.680 --> 15:31.480
然后我们让这些CDN服务器

15:31.480 --> 15:34.080
他们会定期从原服务器拿东西

15:34.080 --> 15:35.360
原服务器脱款了一些资源

15:35.360 --> 15:35.680
对吧

15:35.680 --> 15:36.920
有GS有CSS

15:36.920 --> 15:37.880
有什么页面

15:37.880 --> 15:38.680
有图片

15:38.680 --> 15:39.640
有各种样的资源

15:39.640 --> 15:42.080
那么CDN服务器定期从这个原服务器

15:42.080 --> 15:43.400
去拿这些资源

15:43.400 --> 15:44.680
保存在本地

15:44.680 --> 15:46.360
保存这些CDN本地

15:46.360 --> 15:48.160
那么当有一个用户

15:48.160 --> 15:50.280
去访问我们的网站的时候

15:50.280 --> 15:51.920
去拿这些资源的时候呢

15:51.920 --> 15:54.040
它会自动的去找一个

15:54.040 --> 15:55.480
里他最新的CDN服务器

15:55.480 --> 15:56.600
直接从这里拿了

15:56.880 --> 15:58.400
不从原站里边拿

15:58.400 --> 15:59.520
没有这意思吧

15:59.520 --> 16:00.200
就是这个意思

16:00.200 --> 16:02.400
就是CDN是一个内容分发网络

16:02.400 --> 16:04.000
那么这个内容分发网络呢

16:06.000 --> 16:08.000
有很多这种用法

16:08.000 --> 16:09.720
我们比方说可以把我们的项目里面

16:09.720 --> 16:10.880
所有的静态资源

16:10.880 --> 16:12.320
就是这里打报了结果

16:12.320 --> 16:13.240
所有的东西

16:13.240 --> 16:14.600
图片啊这些东西乱七八糟了

16:14.600 --> 16:15.680
GS、CSS

16:15.680 --> 16:17.520
全部放到CDN上面去

16:17.520 --> 16:18.520
那么像这种做法了

16:18.520 --> 16:20.800
一般要去买这个CDN

16:20.800 --> 16:21.680
去收费的

16:21.680 --> 16:23.800
那么你告诉他你的原站地址在哪

16:23.800 --> 16:26.320
他会定期从原站里面去拿

16:26.360 --> 16:28.080
这些CDN的这些地方

16:28.080 --> 16:29.040
他都有

16:29.040 --> 16:30.040
给你加收好了的

16:30.040 --> 16:31.640
你只要去买去收费

16:33.480 --> 16:34.840
在这种状况我们就禀期了

16:34.840 --> 16:36.240
在上课的时候就禀期了

16:36.240 --> 16:38.320
我们也可以利用免费的

16:38.320 --> 16:39.560
免费的怎么办

16:39.560 --> 16:43.520
免费的他就不能拖挂你这些资源了

16:44.200 --> 16:45.440
他就是一些公共资源

16:45.440 --> 16:46.960
比方说像Jquery

16:46.960 --> 16:48.760
View啊ViewX啊这些

16:48.760 --> 16:50.600
大家都可能会用到的

16:50.600 --> 16:52.480
那么这些资源他只能拖挂这些

16:52.480 --> 16:53.440
已经拖挂好了

16:53.440 --> 16:54.400
你直接去拿就行了

16:54.560 --> 16:56.040
拖一个地址去拿就行了

16:56.880 --> 16:58.880
那么我们就用免费的CDN吧

16:59.400 --> 17:00.600
免费的CDN有一个缺陷

17:00.600 --> 17:02.400
就是他不能拖挂所有的资源

17:02.400 --> 17:03.880
像这些资源就不要想了

17:03.880 --> 17:05.240
只是你自己网上的资源

17:05.240 --> 17:07.040
他只能拖挂一些公共资源

17:07.040 --> 17:08.640
他们毕竟免费嘛

17:09.840 --> 17:11.960
那么我们就利用免费的CDN来

17:11.960 --> 17:14.760
加速我们的这几个库的访问

17:14.760 --> 17:16.320
就把这几个库抽离出去

17:16.320 --> 17:17.200
用CDN来访问

17:17.200 --> 17:18.440
这个库这个库这个库

17:18.440 --> 17:19.600
像一些第三方库

17:19.600 --> 17:21.960
甚至包括这个Axios都可以

17:21.960 --> 17:23.400
Axios也可以分出去

17:24.160 --> 17:27.320
来进行用CDN访问

17:27.320 --> 17:28.600
因为CDN访问毕竟很快嘛

17:29.160 --> 17:30.960
而且CDN服务器还可以做了很多优化

17:30.960 --> 17:33.680
比方说用HTTP2这个协议

17:34.480 --> 17:35.240
来进行访问

17:35.240 --> 17:36.200
那么速度很快的

17:37.120 --> 17:39.640
然后比方说还有一些本地缓存

17:39.640 --> 17:42.360
他有一个实现了ATP缓存协议

17:42.360 --> 17:44.280
可以让浏览器把内容缓存下来

17:44.280 --> 17:46.120
之后就不要再从CDN去访问了

17:46.120 --> 17:47.040
直接从本地租去

17:47.680 --> 17:50.960
从资源利用通过CDN肯定速度要加快一些

17:50.960 --> 17:52.240
那怎么弄呢

17:52.280 --> 17:53.360
我们首先第一步啊

17:53.360 --> 17:55.440
叫高速WiPack

17:56.360 --> 17:58.000
因为我们WiPack就是WiPack做的嘛

17:59.200 --> 18:02.680
高速WiPack不要对公共库进行打包

18:02.680 --> 18:04.240
像这个WiPack你不要打包了

18:04.240 --> 18:05.440
WiPack也不要打包了

18:05.440 --> 18:06.760
WiPackRotter也不要打包了

18:06.760 --> 18:08.520
包括这个Axios也不要打包了

18:08.520 --> 18:09.560
都不要打包了

18:09.560 --> 18:11.520
我这些东西都会从CDN上过去

18:12.440 --> 18:13.560
那怎么弄呢

18:13.560 --> 18:15.040
我们是不是学过WiPack

18:15.040 --> 18:16.600
这个事情其实很简单

18:16.600 --> 18:18.080
你只需要配置一个External

18:18.920 --> 18:22.000
表示我们这个WiPack配置里面有一些

18:22.000 --> 18:23.800
当然开发房间不要管它了

18:23.800 --> 18:26.400
表示我们这里面有一些外部的资源

18:26.400 --> 18:29.320
有些外部的资源你是不需要进行打包的

18:29.320 --> 18:30.640
那么通过配置为一个对象

18:30.640 --> 18:31.800
哪些资源不需要打包呢

18:31.800 --> 18:32.680
打个复制一下

18:32.680 --> 18:33.800
告诉他

18:33.800 --> 18:35.760
WiU这个资源当我们导入WiU的时候

18:35.760 --> 18:37.160
你不要把个WiU打去打包

18:37.160 --> 18:40.200
到时候我会提供给你一个权剧变量

18:40.200 --> 18:41.120
叫WiU

18:41.120 --> 18:43.240
WiUX也不要打包

18:43.240 --> 18:45.040
我会给你提供一个权剧变量叫WiUX

18:45.040 --> 18:46.600
因为引用那些GS过后

18:46.600 --> 18:47.960
引用CDN上的GS过后

18:48.000 --> 18:49.600
它就会形成这个东西

18:49.600 --> 18:50.960
就会有这个东西

18:50.960 --> 18:52.080
权剧变量

18:52.080 --> 18:53.480
WiU柔弹的也不要打包了

18:53.480 --> 18:54.920
用这个权剧变量

18:54.920 --> 18:56.600
还包括一个XS

18:56.600 --> 18:57.880
也不要打包了

18:57.880 --> 18:59.240
用这个XS权剧变量

18:59.240 --> 19:02.440
就手动了去告诉这个WiPack

19:02.440 --> 19:04.160
不要对它进行打包

19:04.160 --> 19:04.960
那么这样子竟然的

19:04.960 --> 19:06.080
我们再看一下打包结果

19:08.080 --> 19:10.970
Rumble

19:10.970 --> 19:12.770
这几个库就没了

19:12.770 --> 19:20.020
你看一下吧

19:20.020 --> 19:20.500
你看这边

19:21.900 --> 19:22.300
看没

19:22.300 --> 19:23.700
WiU那几个库是不是没了

19:23.700 --> 19:24.660
那么这个库的代码

19:24.660 --> 19:26.380
你看现在只有188KB了

19:27.220 --> 19:28.220
所以188了

19:28.220 --> 19:30.940
那么之前的那些库的代码就没了

19:30.940 --> 19:33.460
虽然说现在的尺寸也比较大

19:33.460 --> 19:36.100
但是主要是因为有这个Moke结石

19:36.100 --> 19:37.300
Moke结石我们说了

19:37.300 --> 19:39.780
之前之后肯定是真的打包的时候

19:39.780 --> 19:40.940
肯定是没了

19:40.940 --> 19:42.460
现在不用管它吧

19:43.940 --> 19:44.220
好

19:44.220 --> 19:46.500
那么现在去除掉这些打包之后

19:46.500 --> 19:48.260
我们的库就说小很多了

19:48.260 --> 19:50.860
但是那几个库我们从哪里引用了

19:50.860 --> 19:52.340
我们需要在页面上

19:52.340 --> 19:53.820
在这个地方

19:53.980 --> 19:55.620
index.atmail里边

19:55.620 --> 19:57.900
在这个地方去手动引用一下

19:57.900 --> 19:58.620
在这里去

20:00.700 --> 20:01.500
Riv cdn

20:02.460 --> 20:04.060
去引用这些cdn资源

20:04.060 --> 20:05.540
那么这个cdn资源在哪呢

20:05.540 --> 20:06.700
我们可以去

20:06.700 --> 20:07.780
但你可以摆渡一下

20:07.780 --> 20:10.140
国内免费的cdn

20:10.140 --> 20:11.980
我这里只就用一个

20:11.980 --> 20:13.380
不是cdn吧

20:13.380 --> 20:14.020
就用这个网站

20:16.100 --> 20:17.020
那么这个网站里面

20:17.020 --> 20:17.740
你可以收一下

20:17.740 --> 20:19.380
一些开源的一些公共的

20:19.380 --> 20:20.500
比较知名的一些库

20:20.500 --> 20:23.300
不是他不是所有的公共库都有

20:23.820 --> 20:25.860
他只有一些比较知名的库

20:25.860 --> 20:27.900
比较像5u这些东西肯定是有的

20:27.900 --> 20:29.140
比较说说5u

20:29.140 --> 20:30.100
那么这个5u里面

20:30.100 --> 20:31.260
你找一下你的版本

20:31.260 --> 20:32.620
要用哪个版本的

20:32.620 --> 20:34.700
我这里边就用一下我们这里的版本

20:35.700 --> 20:38.100
目前的我用的5u版本是

20:41.100 --> 20:41.820
5u

20:41.820 --> 20:43.420
2.6.11

20:43.420 --> 20:45.500
这边我们找一找2.6.11

20:46.940 --> 20:48.060
没有

20:48.060 --> 20:49.460
这个网站免费的cdn

20:49.460 --> 20:50.700
你不要对他邀请那么高

20:50.700 --> 20:52.180
有个差不多的就行了

20:52.180 --> 20:54.420
那2.6.9来点进去

20:54.420 --> 20:56.500
这里会有很多的GS文件

20:56.500 --> 20:59.700
有支持common.js的5u打包结果

20:59.700 --> 21:01.780
有支持ES module的

21:01.780 --> 21:03.260
那么我们要获得最好的兼容性

21:03.260 --> 21:06.460
我们最好用5u命掉GS

21:06.460 --> 21:07.660
用这个玩意

21:07.660 --> 21:10.300
那么我们这里可以复制一下链接

21:10.300 --> 21:11.660
我们在页面上

21:11.660 --> 21:16.380
手动的去引用一下

21:16.380 --> 21:17.780
把引用现在就完事了

21:17.780 --> 21:18.580
就这么简单

21:18.580 --> 21:20.100
没有什么复杂的

21:20.100 --> 21:21.380
那么一同意

21:21.380 --> 21:23.260
那么你可以去引用这个views

21:23.260 --> 21:24.580
viewrotor都可以用

21:24.580 --> 21:31.500
我们这里就直接给他复制下来了

21:31.500 --> 21:34.220
对他有一个12的版本

21:34.220 --> 21:34.620
好了

21:34.620 --> 21:37.100
这就把这些引用进来

21:37.100 --> 21:38.300
还有一个x小时对吧

21:38.300 --> 21:42.530
让我收一下吧

21:42.530 --> 21:46.710
x小时

21:46.710 --> 21:50.150
这边版本就我们这里版本是多少

21:50.150 --> 21:51.830
我看一下

21:51.830 --> 21:53.670
x小时的版本

21:53.670 --> 21:55.790
0.21

21:55.790 --> 21:56.150
行吧

21:56.150 --> 21:57.590
那就用它吧

21:57.590 --> 21:59.310
0.21

21:59.310 --> 22:00.590
复制一下

22:00.590 --> 22:01.630
这是压缩过后的

22:01.630 --> 22:08.840
带这个命的话就压缩过后的

22:08.880 --> 22:10.440
这里又涉及一个问题

22:10.440 --> 22:12.760
就是这几行的GS带码

22:12.760 --> 22:13.920
倒是没有什么问题

22:13.920 --> 22:14.960
引用CDN

22:14.960 --> 22:17.000
但是你在开发环境下面

22:17.000 --> 22:18.840
是不是不需要去引用这个东西

22:18.840 --> 22:20.440
开发环境我们就用本地就行了

22:20.440 --> 22:21.240
方便也调试

22:21.240 --> 22:22.720
因为毕竟有研码地图

22:22.720 --> 22:23.960
而且你如果说你开发环境

22:23.960 --> 22:25.320
去用这些东西的话

22:25.320 --> 22:26.160
就会导致一个问题

22:26.160 --> 22:27.240
什么问题呢

22:27.240 --> 22:28.720
你这个玩意没了

22:28.720 --> 22:31.080
这个玩意你没法调试的

22:31.080 --> 22:33.200
所以说我们开发环境是不需要用这个的

22:33.200 --> 22:34.400
那怎么办呢

22:34.400 --> 22:35.720
这是一个页面模板

22:35.720 --> 22:37.000
你注意

22:37.000 --> 22:38.600
这个模板我们学过WebH

22:38.640 --> 22:40.520
它是不是会被一个插件读取

22:40.520 --> 22:41.880
被什么插件读取呢

22:41.880 --> 22:44.320
被这个叫WebPackAtmail

22:44.320 --> 22:50.360
叫做AtmailWebPackPlugin这个插件读取

22:50.360 --> 22:51.760
读取这个页面模板

22:51.760 --> 22:53.040
然后最终的把它

22:53.040 --> 22:55.240
打包的时候打包出一个最终的页面

22:55.240 --> 22:57.120
打包成这个Index的解释

22:57.120 --> 22:58.840
Atmail

22:58.840 --> 23:00.440
那么我们在这个模板里面

23:00.440 --> 23:02.840
是可以写一些动态代码的

23:02.840 --> 23:05.360
你不要让这些东西写动态代码

23:05.360 --> 23:07.120
在漏的环境里面会执行

23:07.320 --> 23:08.560
这是叫模板代码

23:08.560 --> 23:09.800
你们以后学到漏的接识

23:09.800 --> 23:13.000
学到一个会学模板引擎

23:13.000 --> 23:14.280
会学个简单的模板引擎

23:14.280 --> 23:15.880
那么这个叫模板代码

23:15.880 --> 23:18.320
它会根据这个模板代码来进行

23:18.320 --> 23:20.880
来进行生成这个最终的页面

23:20.880 --> 23:22.120
这比较模板代码怎么写的

23:22.120 --> 23:22.600
什么意思呢

23:22.600 --> 23:24.520
这个模板代码简单解释一下

23:24.520 --> 23:27.360
这个模板代码表示读取一个辨量

23:27.360 --> 23:28.320
叫BassUIL

23:28.320 --> 23:29.280
把它放到这个位置

23:29.280 --> 23:31.120
那么生成到最终的打包的结果

23:31.120 --> 23:32.760
比方这个辨量的指示鞋杠

23:32.760 --> 23:33.760
那么生成到最终的结果了

23:33.760 --> 23:35.400
就是这个样子

23:35.400 --> 23:36.880
明白的意思了

23:36.960 --> 23:37.520
就是这个意思

23:37.520 --> 23:39.000
当然在这方面代码我们是不需要的

23:39.000 --> 23:39.840
因为这个

23:39.840 --> 23:42.160
在外抗我们是用介石

23:42.160 --> 23:44.920
在工程里面设置的

23:44.920 --> 23:45.920
不需要这个

23:47.280 --> 23:47.960
好

23:48.480 --> 23:51.640
那我们这里也可以写一个类似的模板代码

23:51.640 --> 23:52.160
怎么写呢

23:52.160 --> 23:53.960
我告诉大家怎么写就OK了

23:56.150 --> 23:58.110
这里边就写的是模板代码

23:58.110 --> 23:59.350
这模板代码怎么写呢

23:59.350 --> 24:00.390
我们可以做一个判断

24:00.390 --> 24:02.190
判断当前环境

24:02.190 --> 24:04.550
是不是生产环境

24:04.550 --> 24:05.710
怎么判断呢

24:05.910 --> 24:08.790
是不是生产环境怎么判断呢

24:08.790 --> 24:10.150
我们这里可以直接使用load

24:12.150 --> 24:13.230
这个环境面量

24:13.230 --> 24:14.630
看一下是不是等于Products

24:15.550 --> 24:17.390
如果说是生产环境的话

24:21.810 --> 24:24.570
这里边是模板代码

24:24.570 --> 24:25.970
如果说是生产环境的话

24:25.970 --> 24:28.170
我们就把这个几个元素放到这

24:28.170 --> 24:30.170
接下来我们把这个衣服写完

24:31.370 --> 24:33.130
模板代码就是这么特别

24:34.370 --> 24:35.250
加上一个大功耗

24:35.250 --> 24:36.450
就这么个意思

24:36.490 --> 24:38.890
如果说是生产环境的话

24:38.890 --> 24:40.290
那么衣服开始

24:40.290 --> 24:42.290
接下来我们放这么一些scripps元素

24:42.290 --> 24:43.010
在里面就行了

24:43.930 --> 24:44.370
OK

24:44.370 --> 24:45.610
接下来我们保存

24:45.610 --> 24:46.930
先让我们看一下

24:48.170 --> 24:48.810
重新打包

24:50.490 --> 24:51.650
打包结果里面肯定没了

24:51.650 --> 24:53.250
没有这些裤了

24:53.250 --> 24:55.050
只是我们看一下最终打包出来的AT秒

24:56.650 --> 24:57.250
打包出来

24:57.250 --> 24:58.850
打包结果里面是没有这些裤了

24:58.850 --> 25:00.330
我们看一下最终打包出来的AT秒

25:02.330 --> 25:02.890
格式画一下

25:04.370 --> 25:06.130
你看打包出来的生产环境里面说有

25:06.730 --> 25:07.130
对吧

25:07.130 --> 25:08.770
那如果说我这边改一下

25:08.770 --> 25:11.810
改成我们只有在开发环境

25:11.810 --> 25:12.890
vendor方面

25:12.890 --> 25:13.810
我才有这些东西

25:13.810 --> 25:14.410
假设

25:15.330 --> 25:16.010
我再来打包

25:23.040 --> 25:23.200
好

25:23.200 --> 25:23.760
又弹出来了

25:26.240 --> 25:26.560
看这边

25:28.480 --> 25:28.880
好存

25:28.880 --> 25:30.680
是不是就没有这些介绍了

25:30.680 --> 25:31.840
就这么简单

25:31.840 --> 25:34.040
我们可以使用一段简单的模板代码

25:34.040 --> 25:36.200
判断是不是要引用这些CDM

25:36.200 --> 25:37.080
只有在开发环境

25:37.080 --> 25:38.880
只有在生产环境打包的时候

25:38.880 --> 25:40.040
我们才打包到最终结果

25:40.960 --> 25:41.240
好

25:41.240 --> 25:43.080
这是使用CDM

25:43.080 --> 25:44.080
就搞定了

25:44.080 --> 25:44.680
那就搞定了

25:46.520 --> 25:50.240
然后有一些代码是需要稍微的来做一些变动

25:50.240 --> 25:50.720
为什么

25:50.720 --> 25:52.000
因为我们用传统

25:52.000 --> 25:55.080
现在我们是用传统的方式去引用这些Vocals

25:55.080 --> 25:58.000
你看目前我们开发环境是没有受到任何影响的

25:58.000 --> 25:59.320
开发环境是一切都正常的

26:01.440 --> 26:03.400
最终我们会给大家印写一下这个生产环境

26:06.980 --> 26:08.140
开发环境一切都正常的

26:08.140 --> 26:09.820
这些东西也在

26:10.660 --> 26:11.460
这个调试也在

26:12.380 --> 26:12.900
没问题的

26:14.940 --> 26:16.500
现在我给他说一下

26:16.500 --> 26:17.300
刚才我想说了

26:17.300 --> 26:19.300
这个代码的有些变动

26:19.300 --> 26:20.820
因为像这个Voix

26:20.820 --> 26:22.300
这跟具体的酷有关系

26:22.300 --> 26:24.700
像这个Voix和这个Voix Rotor

26:24.700 --> 26:25.700
这两个酷

26:25.700 --> 26:26.500
这两个酷

26:26.500 --> 26:29.700
它如果说用传统的方式引入是有点区别的

26:29.700 --> 26:32.420
它像这两个酷是作为Voix插件存在的

26:32.420 --> 26:33.100
对吧

26:33.100 --> 26:35.300
如果说你用传统的方式来引入的话

26:35.300 --> 26:36.780
你是不需要这行代码的

26:36.780 --> 26:37.740
这行代码你不能写

26:39.420 --> 26:40.420
就这行代码

26:40.420 --> 26:40.860
不能写

26:40.860 --> 26:42.060
就是安装插件

26:42.100 --> 26:43.060
或者是这边

26:43.940 --> 26:44.620
Rotor这边

26:47.040 --> 26:50.040
在这里这行代码是不能写的

26:50.040 --> 26:50.560
因为

26:51.760 --> 26:52.280
这两个

26:53.560 --> 26:56.440
用那个传统的方式来引入的话

26:56.440 --> 26:58.120
它会自动给你注册成为插件

26:58.120 --> 26:59.640
你不能写这两行代码

26:59.640 --> 27:00.720
那么我们怎么来判断

27:00.720 --> 27:04.040
到底是不是用传统方式引入的呢

27:04.040 --> 27:06.200
因为这行代码是要不要运行

27:06.200 --> 27:07.360
是有一个条件的

27:08.160 --> 27:09.160
怎么来判断呢

27:09.160 --> 27:10.440
其实非常简单

27:10.440 --> 27:11.080
你这边呢

27:11.080 --> 27:13.040
他用这种传统方式引入的话

27:13.080 --> 27:14.720
它会污染权娱变量的

27:14.720 --> 27:16.600
你看以前杰克伟是不是有个权娱变量污染

27:16.600 --> 27:17.360
叫什么Dollar

27:24.620 --> 27:25.420
所以有个Dollar

27:25.420 --> 27:25.900
对吧

27:25.900 --> 27:27.140
楼单还写个权娱变量污染

27:27.140 --> 27:28.940
是不是一个下滑线

27:28.940 --> 27:30.620
那这边也是有权娱变量污染的

27:30.620 --> 27:31.460
像这个Wheel

27:31.460 --> 27:33.500
权娱变量污染就是一个Wheel

27:33.500 --> 27:34.140
Wheel可是呢

27:34.140 --> 27:35.260
就是一个Wheel

27:35.260 --> 27:36.980
WheelRotor就是WheelRotor

27:36.980 --> 27:37.340
所以说呢

27:37.340 --> 27:38.540
我们可以判断权娱变量

27:38.540 --> 27:40.180
这东西存不存在就完事了

27:40.180 --> 27:40.740
怎么判断呢

27:40.740 --> 27:42.380
我们判断一下这个Window

27:42.380 --> 27:46.620
WindowWheelRotor是不是存在

27:46.700 --> 27:47.820
如果说存在的话

27:47.820 --> 27:48.820
我们就不写这句话

27:48.820 --> 27:50.340
只有它不存在的话

27:50.340 --> 27:51.740
那么我们不是用CDN

27:51.740 --> 27:52.860
不是用传统方式引入的

27:52.860 --> 27:54.740
那必须要用这种传统代码

27:54.740 --> 27:55.060
对吧

27:55.060 --> 27:56.460
该判断一下就完事了

27:56.460 --> 27:57.580
然后这边也是一样

27:57.580 --> 28:00.900
我们可以判断一下Window

28:00.900 --> 28:02.500
里面有没有WheelRotor

28:02.500 --> 28:03.980
如果说没有的话

28:03.980 --> 28:05.260
我们才使用这种传统代码

28:05.260 --> 28:06.100
去安装插件

28:06.100 --> 28:06.340
对吧

28:06.340 --> 28:08.620
这样子呢就不影响我们的生产环境

28:08.620 --> 28:10.300
生产环境是不受任何影响

28:10.300 --> 28:12.980
开发环境是不受任何影响的

28:12.980 --> 28:15.060
因为开发环境是需要这种传统代码的

28:15.100 --> 28:17.660
它没有使用CDN传统方式引入

28:17.660 --> 28:18.740
但打包结果呢

28:18.740 --> 28:20.820
就是我们生产环境的

28:20.820 --> 28:21.780
生产环境里面

28:21.780 --> 28:23.620
它就不能使用这句话

28:23.620 --> 28:25.500
所以我们代码的要适配不同情况

28:26.700 --> 28:27.020
ok

28:28.020 --> 28:28.180
好

28:28.180 --> 28:30.500
这是这一块啊

28:30.500 --> 28:32.100
现在我们就是利用了CDN

28:32.100 --> 28:32.420
对不对

28:33.500 --> 28:35.140
要不然我们看一下吧

28:35.140 --> 28:36.140
看一下

28:36.140 --> 28:38.260
看一下我们打包结果的能不能运行啊

28:38.260 --> 28:39.980
就是要看的话也非常简单

28:39.980 --> 28:42.220
我们也不用把它部署到真实的服务器

28:42.260 --> 28:45.420
我们就可以利用这个VS code的粒布12号来看一下

28:45.420 --> 28:47.100
首先我们在粒布12号里面

28:47.100 --> 28:51.560
用根木骆去打开它

28:51.560 --> 28:53.960
根木骆去打开这个粒布12号

28:53.960 --> 28:59.960
好点击运行

28:59.960 --> 29:01.080
把运行出来

29:01.080 --> 29:03.560
诶这里爆错了啊

29:03.560 --> 29:04.680
它说什么

29:04.680 --> 29:09.170
5U is not defined

29:09.170 --> 29:10.650
我相信啊

29:10.650 --> 29:11.690
怎么是

29:11.690 --> 29:15.250
它说5U未定义

29:15.250 --> 29:17.290
我看一下啊

29:17.290 --> 29:18.690
我这边导入的

29:18.690 --> 29:19.890
导入的GS啊

29:19.890 --> 29:20.810
生存的GS

29:22.610 --> 29:24.730
哦这边我们没有重新打包对吧

29:24.730 --> 29:25.850
我们刚才改了这个

29:25.850 --> 29:27.250
改了这个玩意儿没重新打包

29:27.250 --> 29:34.810
重新打包意思啊

29:34.810 --> 29:35.370
对它重新打包

29:35.370 --> 29:37.250
把这个模组已经删掉了

29:37.250 --> 29:38.570
好了重新打包完成了

29:38.570 --> 29:39.730
接下来我们重新

29:40.490 --> 29:46.330
重新打开这个disk

29:46.330 --> 29:55.920
用dip server运行一下啊

29:55.920 --> 29:58.400
好你看说都可以的

29:58.400 --> 29:59.880
没问题的对吧

29:59.880 --> 30:00.360
首页

30:01.640 --> 30:04.480
它首页为什么没有呢

30:04.480 --> 30:04.920
首页

30:06.000 --> 30:06.520
我看一下啊

30:07.720 --> 30:11.080
首页为什么没有呢

30:11.080 --> 30:12.360
我这里还不好调试啊

30:13.840 --> 30:15.520
这里倒是没有爆错

30:15.520 --> 30:16.720
文章页

30:16.720 --> 30:17.400
文章页有

30:19.000 --> 30:20.240
首页

30:20.240 --> 30:21.160
诶刷新词啊

30:23.000 --> 30:23.960
首页是有的吗

30:25.080 --> 30:26.080
是有的啊

30:26.080 --> 30:27.280
应该是图片没读

30:27.280 --> 30:28.120
图片的等待啊

30:28.120 --> 30:28.640
没读出来

30:29.800 --> 30:30.280
好OK啊

30:30.280 --> 30:31.920
这是打包结尾没有什么

30:31.920 --> 30:32.480
没有什么问题啊

30:32.480 --> 30:33.520
这有个爆错啊

30:33.520 --> 30:35.360
它这个5 icon找不到

30:36.200 --> 30:39.280
我看一下啊

30:39.280 --> 30:40.360
这个5 icon

30:41.960 --> 30:44.120
我这里是用js设置的5 icon

30:44.120 --> 30:45.600
它浏览一下自动去读

30:45.600 --> 30:47.200
这个跟目录下面的5 icon

30:47.200 --> 30:47.760
不管它

30:48.640 --> 30:49.800
5 icon是正常的啊

30:49.800 --> 30:50.800
这个我们能够读出来

30:55.200 --> 30:55.920
没有什么问题的吧

30:55.920 --> 30:56.960
然后我们看一下网络啊

30:56.960 --> 30:57.680
网络请求

30:58.440 --> 30:59.240
我们就看js吧

31:00.000 --> 31:00.360
好

31:00.360 --> 31:02.200
接下来我们disable catch

31:02.200 --> 31:04.720
就是进用那个缓存

31:04.760 --> 31:05.280
刷新

31:06.680 --> 31:07.320
你可以看到啊

31:07.320 --> 31:08.880
我们这里有几个js

31:08.880 --> 31:10.960
它用的协议是act2的协议

31:11.600 --> 31:13.760
这个东西需要服务器支持啊

31:14.640 --> 31:15.400
然后呢

31:15.400 --> 31:16.440
它去读的是什么呢

31:16.440 --> 31:17.680
读的是地址

31:18.880 --> 31:20.840
读的是cdn的地址

31:20.840 --> 31:21.720
对不对

31:21.720 --> 31:22.680
而且这个cdn地址

31:22.680 --> 31:23.520
它是有缓存的

31:23.520 --> 31:25.720
如果说把这个金融缓存去掉

31:25.720 --> 31:26.920
接下来我们再刷新一下

31:26.920 --> 31:29.040
你看它这里使用的是缓存

31:29.040 --> 31:30.520
根本就没有从服务器获取了

31:30.520 --> 31:31.960
就非常快了

31:31.960 --> 31:33.000
这就是cdn的好处

31:33.040 --> 31:34.160
它访问速度非常快

31:36.080 --> 31:36.320
好

31:36.320 --> 31:38.120
那么这一部分我们就搞定了啊

31:38.120 --> 31:38.840
启用cdn

31:40.160 --> 31:41.880
我们也可以看到我们打包体积呢

31:41.880 --> 31:43.400
已经大幅度缩小了

31:43.400 --> 31:44.640
如果把mokejs去掉的话

31:44.640 --> 31:46.120
就缩小更多了

31:46.120 --> 31:47.680
然后接下来我们再看一下啊

31:47.680 --> 31:49.560
我们打包体积里边其实还有一些东西

31:50.200 --> 31:50.760
再来运行

31:58.570 --> 31:59.770
这个打包体积里边

31:59.770 --> 32:01.450
你看除了这个mokejs之外

32:02.690 --> 32:04.090
mokejs不用管它

32:04.090 --> 32:04.810
还有什么东西呢

32:04.810 --> 32:06.490
还有这个corejs

32:08.130 --> 32:09.290
你看这是一大堆

32:10.010 --> 32:11.010
还有这个什么

32:11.010 --> 32:11.890
最大的就两块

32:11.890 --> 32:13.850
corejs一个是generate runtime

32:14.610 --> 32:16.170
你觉得这两个东西是干嘛的

32:16.650 --> 32:17.170
干嘛的

32:18.730 --> 32:20.330
跟那个兼容性有关系啊

32:20.330 --> 32:21.770
一个学的vpeg应该知道

32:22.890 --> 32:24.970
vpeg在这个vuclid内部啊

32:24.970 --> 32:27.010
它是加了这个babel插件的

32:28.010 --> 32:29.530
它会用这个预设

32:29.530 --> 32:31.170
对我们代码进行降级

32:31.170 --> 32:32.570
那降到什么级呢

32:32.570 --> 32:33.890
你可以去配置这个玩意儿

32:33.890 --> 32:35.170
这个浏览器支持

32:35.170 --> 32:35.730
支持范围

32:35.730 --> 32:36.810
不论是这个配置啊

32:36.810 --> 32:38.130
这个我们以前也讲过对吧

32:38.130 --> 32:39.530
根据你的需要去配置就完事了

32:41.010 --> 32:42.850
这是做兼容性处理的

32:42.850 --> 32:44.890
因为过去的九百万的浏览器呢

32:44.890 --> 32:46.450
它有些API是不存在的

32:46.450 --> 32:48.050
不存在这个API呢

32:48.050 --> 32:51.610
它就需要这个corejs

32:51.610 --> 32:52.890
这个corejs很厉害的

32:52.890 --> 32:54.610
它从ES3开始

32:55.250 --> 32:58.330
把所有的API都给你磨粒了一遍

32:58.330 --> 32:59.330
你喊数啊

32:59.330 --> 33:00.650
对于相当的给你磨粒的一遍

33:00.650 --> 33:01.890
所以这个corejs特别特别大

33:01.890 --> 33:04.410
当然它是按需引入的

33:04.410 --> 33:07.290
如果说你代码中用到了一些

33:07.290 --> 33:08.570
比较高级的API

33:08.570 --> 33:09.850
它会给你把这个API加上

33:09.850 --> 33:11.290
没有用到的没有给你加

33:11.290 --> 33:13.170
那按需引入为什么会引入这么多呢

33:13.170 --> 33:14.570
有30多kb呢

33:14.570 --> 33:15.730
是因为这个mokkojs

33:15.730 --> 33:20.370
它把mokkojs给你降级了

33:20.370 --> 33:22.290
但是mokkojs这个玩意儿不用管它

33:22.290 --> 33:23.930
你们将来把mokkojs一注释掉的

33:23.930 --> 33:26.250
你就会发现包就小了很多了

33:26.250 --> 33:27.450
把mokkojs一注释掉了

33:27.450 --> 33:31.560
看一下了

33:31.560 --> 33:33.080
将来我们肯定不是在磨粒

33:33.080 --> 33:34.080
也就是开放完了过后

33:34.080 --> 33:38.330
肯定是不是磨粒数据了

33:38.330 --> 33:39.890
打包出来一看呀

33:39.890 --> 33:41.050
一看是不是体积小了很多了

33:41.050 --> 33:42.810
现在只有51kb了

33:42.890 --> 33:44.290
对不对

33:44.290 --> 33:46.490
这么一个意思

33:46.490 --> 33:47.930
但是这两个东西还是存在

33:47.930 --> 33:50.930
它也是占主要部分这两个玩意儿

33:50.930 --> 33:51.530
那怎么办呢

33:51.530 --> 33:52.410
这两个玩意儿怎么办呢

33:52.410 --> 33:54.170
这个两个玩意儿没法处理

33:54.170 --> 33:55.850
你除非不做兼容

33:55.850 --> 33:58.530
你只管那个现代牛郎期

33:58.530 --> 34:00.290
以前的牛郎期就不管了

34:00.290 --> 34:01.330
那你不用处理了

34:01.330 --> 34:03.130
那你就不要这个东西就行了

34:03.130 --> 34:04.170
不要这个东西怎么办呢

34:04.170 --> 34:04.970
你非常简单

34:04.970 --> 34:05.770
这里不是个背部

34:05.770 --> 34:06.610
康菲哥你接什么

34:06.610 --> 34:08.290
你把他去掉就完事了

34:08.290 --> 34:10.890
或者把这一行去掉就完事了

34:10.890 --> 34:12.530
非常简单

34:12.570 --> 34:14.010
这是吴又给我们提供的预设

34:14.010 --> 34:15.250
他里面用到了这个

34:15.250 --> 34:17.170
用到这个Present M

34:18.330 --> 34:21.050
但是我们一般情况下都是要做兼容的

34:22.050 --> 34:23.450
那做这样就没法减少

34:24.090 --> 34:25.970
但是我们有一个方案

34:26.530 --> 34:28.290
一个折腾的方案是什么呢

34:28.290 --> 34:29.410
就是我们的用户

34:29.410 --> 34:31.130
他有可能用的是脑袋牛郎期

34:31.130 --> 34:32.770
也有可能用的是新的牛郎期

34:32.770 --> 34:33.730
现代牛郎期

34:34.050 --> 34:36.450
如果说他用的是现代牛郎期的话

34:37.730 --> 34:38.690
我就

34:42.020 --> 34:43.940
我就使用位降级的包

34:44.580 --> 34:45.820
就没有降级处理的

34:46.660 --> 34:48.060
大部分都是原时代

34:48.500 --> 34:49.700
那么给现代牛郎期使用

34:49.700 --> 34:51.660
甚至你不要可能会用到ES module

34:51.860 --> 34:53.020
都是支持的对吧

34:53.700 --> 34:55.700
如果说你是9%的牛郎期的话

34:55.700 --> 34:57.420
我就给你用降级之后的包

34:57.420 --> 34:59.660
那么是不是就充分解决解决这个问题

34:59.660 --> 35:00.700
你用的是现代牛郎期

35:00.700 --> 35:02.620
那我给你提供一个非常快速的访问

35:03.220 --> 35:05.100
如果说你用的是老百姓的牛郎期

35:05.100 --> 35:06.700
我也让你能够访问

35:06.700 --> 35:08.580
但是那个可能速度要稍微慢一点

35:08.580 --> 35:10.300
毕竟有一些接种代码在里边

35:10.900 --> 35:11.940
那么这个玩意能不能做了

35:11.940 --> 35:12.660
当然可以做

35:12.660 --> 35:13.700
你学过外派过后

35:13.860 --> 35:15.060
我们打包两次吗

35:15.060 --> 35:16.020
分开打包吗

35:16.020 --> 35:17.420
用不同的配置分开打包

35:17.420 --> 35:19.420
一个不用背包就不玩了

35:19.420 --> 35:19.860
对不对

35:19.860 --> 35:20.820
非常简单

35:21.260 --> 35:23.500
其实5U这里给我们处理得更好

35:23.780 --> 35:25.500
它帮我们把这个事情做了

35:25.500 --> 35:28.100
你只需要在5U颗粒的用这个命令

35:28.100 --> 35:29.340
就必有的个打包命令

35:29.340 --> 35:30.060
加一个参数

35:30.060 --> 35:30.660
Modem

35:31.060 --> 35:32.460
针对现代牛郎期

35:33.060 --> 35:35.580
和9%的人牛郎期提供两个打包结果

35:35.580 --> 35:36.260
就OK了

35:36.260 --> 35:37.140
我们来看一下吧

35:38.260 --> 35:39.380
我们再拍点节省里边

35:39.380 --> 35:40.580
我们在这里配置一下

35:40.580 --> 35:41.700
再加上一个参数

35:41.700 --> 35:42.260
Modem

35:44.140 --> 35:46.140
针对现代牛郎期要单独进行打包

35:46.140 --> 35:47.140
那怎么弄呢

35:47.140 --> 35:47.540
好

35:47.540 --> 35:48.660
先让我们再打包一次

35:48.660 --> 35:49.500
首先我说一下

35:49.500 --> 35:51.140
用了这个命令过后

35:51.140 --> 35:52.420
它要进行两次打包

35:52.420 --> 35:53.300
所以说这个

35:53.860 --> 35:55.700
这个插件就要出问题

35:56.260 --> 35:58.100
这个插件只能看一次打包的结果

35:58.580 --> 35:59.180
两次打包的话

35:59.180 --> 36:01.100
它会导致第二次打包的时候爆错

36:02.020 --> 36:03.260
就这个插件

36:03.260 --> 36:04.180
你不用管它吧

36:05.060 --> 36:06.420
我们主要是看最终结果

36:06.420 --> 36:07.380
打包过了

36:07.380 --> 36:08.020
过来过后

36:08.020 --> 36:08.620
你会看到

36:08.620 --> 36:10.260
怎么还有这两个东西呢

36:11.180 --> 36:11.900
为什么还用的

36:11.900 --> 36:13.540
因为它只是针对第一次打包

36:13.580 --> 36:16.180
就是兼容性打包的分析结果

36:16.180 --> 36:17.420
实际上我们在电视模统里面

36:17.420 --> 36:19.260
可以看到戒丝已经多了好几个了

36:20.220 --> 36:21.180
它不是两个了

36:21.180 --> 36:22.900
有一些原码地图

36:23.100 --> 36:24.220
我们就不用管了

36:25.420 --> 36:26.340
原码地图不用管

36:27.220 --> 36:28.020
这东西不用管了

36:28.020 --> 36:29.820
你甚至可以在这里把它去掉吧

36:31.060 --> 36:31.820
在这里把它去掉

36:31.820 --> 36:32.780
DVTOS

36:38.160 --> 36:38.560
去掉

36:39.560 --> 36:40.040
再重新来

36:40.600 --> 36:41.600
你看刚才那个爆错了

36:41.600 --> 36:43.920
刚才那个就是分析插件已经爆错了

36:43.920 --> 36:44.480
不用管它

36:48.890 --> 36:49.290
好了

36:49.370 --> 36:50.210
这样我们再看

36:50.450 --> 36:51.730
戒丝这个目录下面戒丝

36:51.730 --> 36:52.890
就没有那么多戒丝了

36:54.730 --> 36:55.610
怎么只有两个呢

36:56.130 --> 36:56.810
现在出来了

36:56.810 --> 36:57.810
分成两个是打包的

36:58.410 --> 37:00.370
我们看到有两次打包结果

37:01.530 --> 37:02.330
加了这个

37:03.570 --> 37:05.210
叫Negacy

37:05.850 --> 37:07.010
就是遗留版本

37:07.010 --> 37:08.450
就是针对旧版本的

37:08.770 --> 37:10.210
你看它的打包结果就比较大

37:10.210 --> 37:11.090
它有45kb

37:11.090 --> 37:11.970
里面有一些监动的形态

37:12.570 --> 37:13.050
但是

37:13.610 --> 37:15.530
针对现代浏览器的这个打包结果

37:16.450 --> 37:17.290
是不是要小一些

37:17.770 --> 37:19.490
你看这个可能非常明显

37:19.490 --> 37:20.730
这就是第三方库

37:21.090 --> 37:22.450
NodeMarchos里面打包结果

37:22.450 --> 37:24.210
这是我们的SRC目录打包结果

37:24.210 --> 37:25.850
这是我们的第三方库打包结果

37:25.850 --> 37:26.610
你看这里

37:27.170 --> 37:30.530
也兼容性代码加上过后有52kb

37:30.850 --> 37:32.770
没有兼容性代码只有18kb

37:33.170 --> 37:34.010
就小很多了

37:34.730 --> 37:35.170
对吧

37:35.170 --> 37:36.210
那么这个问题

37:36.210 --> 37:37.890
是不是就可以真正的解决

37:37.890 --> 37:39.050
那它怎么解决呢

37:39.050 --> 37:40.970
那我们将来是不是还要加一些额外代码呢

37:40.970 --> 37:42.130
根据不同的流量器

37:42.130 --> 37:43.450
去引用不同的GS呢

37:43.450 --> 37:43.930
不需要

37:44.570 --> 37:46.410
它在AGM里面已经给你写好了

37:46.450 --> 37:47.130
我们来看一下

37:47.130 --> 37:48.650
8个看一下ATM的写法

37:50.770 --> 37:52.210
首先呢

37:52.610 --> 37:53.850
你要认识这个东西

37:53.850 --> 37:54.570
叫real

37:55.130 --> 37:55.890
real什么意思

37:56.410 --> 37:59.810
设置另可元素跟我们流量器的关系

37:59.810 --> 38:00.770
叫preload

38:00.770 --> 38:01.970
preload是啥意思呢

38:01.970 --> 38:03.210
preload就是预加载

38:03.730 --> 38:04.890
我先把它下载下来

38:05.410 --> 38:06.450
先不用

38:06.930 --> 38:09.610
将来如果说真的需要用到这个CSS

38:09.610 --> 38:10.330
你看我这里去

38:10.330 --> 38:11.970
真的去引用这个CSS的时候

38:11.970 --> 38:13.770
直接用之前的下载结果

38:13.770 --> 38:14.170
对吧

38:14.170 --> 38:14.770
先下载

38:14.770 --> 38:15.850
我可能一暂时不用

38:16.330 --> 38:16.850
下载过后

38:16.850 --> 38:18.930
我怕当成一个样式来进行处理

38:18.930 --> 38:20.130
先暂时放在那

38:20.130 --> 38:21.530
当成样式暂时放在那

38:21.530 --> 38:23.170
将来去引用这个样式的时候

38:23.170 --> 38:24.850
我就直接拿之前的下载结果

38:24.850 --> 38:25.610
这样的做法

38:25.610 --> 38:28.170
可以让流量器尽早的去下载一些

38:28.170 --> 38:29.850
将来会用到的资源

38:30.410 --> 38:31.210
明儿的意思吧

38:31.210 --> 38:32.970
这是一个处理技巧

38:32.970 --> 38:33.690
这里呢

38:33.690 --> 38:35.770
跟着我们分成两个不同的打包结果

38:35.770 --> 38:36.810
倒是没有什么关系

38:36.810 --> 38:37.850
关键是在这

38:39.330 --> 38:40.050
你看这

38:43.130 --> 38:44.050
关键是在这

38:44.050 --> 38:46.250
叫module preload

38:46.730 --> 38:48.050
把它当成一个介石来处理

38:48.850 --> 38:50.050
那么这是什么意思呢

38:50.050 --> 38:51.970
这个只有现代流量器在支持的

38:53.990 --> 38:55.790
有老板们的流量器在支持不了这个东西

38:56.710 --> 38:57.870
现代流量器在支持这个

38:58.870 --> 39:01.390
就是他把这一块当成一个ES module

39:01.750 --> 39:04.150
这里边用的是ES module代码

39:04.150 --> 39:06.070
就是里边可能有一些这种代码

39:06.910 --> 39:08.070
export default

39:08.070 --> 39:08.310
对吧

39:08.310 --> 39:09.830
这些都是打包结果里边去了

39:10.390 --> 39:11.830
把当成一个ES module来处理

39:12.310 --> 39:13.150
也是预夹展

39:13.150 --> 39:13.790
先夹展到的

39:13.790 --> 39:14.590
将来会使用

39:15.070 --> 39:17.150
那么将来我们在这你看

39:17.670 --> 39:19.030
现代流量器他就会

39:19.030 --> 39:20.470
他就看到这两句话

39:20.470 --> 39:21.630
这两句话他就会发现

39:21.630 --> 39:23.430
我把当成一个module来处理

39:24.190 --> 39:25.030
运行这个介石

39:25.030 --> 39:26.110
那么运行的时候

39:26.110 --> 39:27.470
找这个介石的时候

39:27.470 --> 39:29.630
他就会把之前的module preload

39:29.630 --> 39:30.030
拿出来

39:30.030 --> 39:31.070
这就是个预下展

39:31.070 --> 39:32.230
这个其实不是关键

39:32.230 --> 39:33.070
关键在下面

39:34.150 --> 39:35.310
我去引用这两个介石

39:35.310 --> 39:36.830
把它当成一个模块来处理

39:37.150 --> 39:37.990
module来处理

39:39.230 --> 39:40.870
如果说的是旧版本流量器的话

39:40.870 --> 39:42.070
直接就是不支持了

39:42.070 --> 39:42.350
对吧

39:42.350 --> 39:43.990
这两个代码就直接不支持了

39:45.070 --> 39:46.270
就当作没写一样

39:47.230 --> 39:47.510
好

39:47.510 --> 39:51.150
然后下边又去引用这两个介石

39:51.550 --> 39:53.670
这两个介石是针对旧版本的流量器的

39:53.670 --> 39:54.870
如果说新版本流量器

39:54.870 --> 39:56.670
看到这个标记叫node module

39:56.670 --> 39:57.550
看到这个标记

39:57.550 --> 39:59.510
这两行代码是忽略的

39:59.510 --> 40:00.510
也就是说啥呢

40:00.510 --> 40:01.190
啥意思呢

40:01.190 --> 40:03.550
就是他这几行代码

40:03.550 --> 40:04.430
这四行代码

40:04.430 --> 40:06.470
就会导致旧版本流量器的

40:06.470 --> 40:07.630
直接忽略这两句

40:08.110 --> 40:09.790
而去加载一个旧版本的介石

40:10.430 --> 40:11.630
新版本流量器

40:11.630 --> 40:12.950
他只会忽略这两句

40:12.950 --> 40:14.070
因为有这个标记

40:14.430 --> 40:15.470
他会加载这两个介石

40:15.470 --> 40:17.350
而且把它当成eS module来处理

40:18.350 --> 40:18.870
没了意思吧

40:18.870 --> 40:19.510
就这么简单

40:19.510 --> 40:21.750
前面都是一些预先下载的意思

40:21.750 --> 40:22.790
先把它下载在那

40:22.790 --> 40:23.710
将来可能会用

40:24.710 --> 40:29.910
这里可以提升一点页面的响应速度

40:30.910 --> 40:31.470
陪逗

40:32.350 --> 40:32.670
好

40:32.670 --> 40:34.670
这是咱们的这一块东西

40:35.790 --> 40:36.670
针对性能打包

40:38.430 --> 40:38.870
好

40:39.910 --> 40:42.190
我们优化公共包的体积的话

40:42.190 --> 40:43.190
也是能到这了

40:43.190 --> 40:44.150
目前的我们项目里边

40:44.150 --> 40:45.350
也没有其他什么问题了

40:45.670 --> 40:46.870
优化到这也只能到这了

40:47.710 --> 40:48.990
如果说还要进行优化的话

40:48.990 --> 40:50.670
那就可能跟服务器有关系了

40:52.980 --> 40:53.180
好

40:53.180 --> 40:56.220
接下来我们到这优化项目包体积

40:56.220 --> 40:57.540
哪个地方优化这个

40:58.100 --> 41:00.780
这个有43KB

41:00.780 --> 41:01.260
对吧

41:01.260 --> 41:02.660
我们如果说现代流量器的话

41:02.660 --> 41:04.180
第三方会打包出来

41:04.660 --> 41:06.020
去除掉CGN的部分

41:06.020 --> 41:07.220
是不是只有10多KB

41:07.500 --> 41:08.740
这个地方我们自己写在

41:08.740 --> 41:09.580
有43

41:09.580 --> 41:11.260
如果说是大型项目的话

41:11.540 --> 41:13.100
这个库这边会非常非常大

41:14.140 --> 41:15.700
这就是src里面的所有东西

41:16.100 --> 41:17.500
他会把src里面所有东西

41:17.500 --> 41:18.740
全部打包到这

41:18.740 --> 41:21.260
以这个入口文件来进行一代分析

41:21.260 --> 41:22.220
全部打包到这

41:23.420 --> 41:24.300
现在我们项目小

41:24.300 --> 41:24.860
项目小的话

41:24.860 --> 41:26.380
其实这一块也不用去管它

41:26.380 --> 41:28.140
43KB也非常非常ok

41:29.020 --> 41:30.180
但是如果说大型项目的话

41:30.180 --> 41:33.380
这个可能是几百KB

41:33.380 --> 41:34.100
或者是一兆

41:34.620 --> 41:35.900
或者是好几兆

41:36.500 --> 41:37.660
东西就非常非常多了

41:37.660 --> 41:39.540
那么这个玩意怎么办呢

41:40.100 --> 41:42.060
就这里面我们是有优化空间的

41:43.300 --> 41:44.100
项目包体积

41:44.220 --> 41:45.900
就是我们src目的给我们打包结果

41:46.140 --> 41:46.900
怎么优化呢

41:47.420 --> 41:50.500
非常非常直观的简单的方式就是进行页面分包

41:51.780 --> 41:53.820
因为我们虽然说这里的代码我没法减少

41:53.820 --> 41:55.220
因为都是功能性代码

41:55.220 --> 41:55.620
对吧

41:55.620 --> 41:56.660
我没法减少代码

41:56.900 --> 41:57.940
但是呢

41:58.420 --> 42:01.780
我每一个页面他用不到这么多代码

42:01.780 --> 42:03.820
他是把所有页面全部打包进来了

42:03.820 --> 42:05.100
根本就用不到这么多代码

42:05.340 --> 42:06.940
我每一个页面其实代码比较少

42:06.940 --> 42:08.420
比较少有100个页面

42:08.940 --> 42:10.220
核心的可能有一兆

42:10.220 --> 42:12.260
每个页面的可能也就算下来的话

42:12.260 --> 42:13.700
也可能就100KB左右

42:13.700 --> 42:14.460
100多一点

42:15.500 --> 42:17.540
我们每个页面是用不到那么多代码的

42:17.780 --> 42:20.100
所以我们希望的每一个页面相关的GS呢

42:20.100 --> 42:21.140
单独进行打包

42:21.380 --> 42:23.180
他们公共的GS呢就提到这

42:23.700 --> 42:24.460
就提到这边

42:24.700 --> 42:26.260
那么能做的当然可以做啊

42:26.500 --> 42:28.300
微判个本身就是支持的对不对

42:28.540 --> 42:30.340
怎么支持的动态import

42:31.380 --> 42:34.420
动态导入的东西是不是可以分包自动分成另外一个包

42:34.700 --> 42:36.500
而且他会把公共代码提出来对不对

42:36.500 --> 42:38.020
这些事情他都是做了的

42:40.060 --> 42:41.860
那么这个东西怎么做呢

42:42.060 --> 42:43.860
就动态引入import就行了

42:44.120 --> 42:44.880
对不对

42:45.140 --> 42:46.420
那怎么来动态引入import呢

42:46.420 --> 42:47.440
在哪里引入呢

42:47.440 --> 42:48.720
那我们回过一下我们的

42:48.980 --> 42:49.740
项目里边

42:50.520 --> 42:51.800
我们的页面组件

42:51.800 --> 42:52.820
页面就是组件吧

42:52.820 --> 42:53.840
组件就是GS吗

42:54.360 --> 42:55.640
组件就是一个单文件组件

42:55.640 --> 42:57.180
它最终会编译成为一个一段

42:57.940 --> 42:58.700
GS对吧

42:58.960 --> 43:00.240
会被模办编译

43:02.040 --> 43:04.080
我们导入这个页面组件在哪呢

43:04.080 --> 43:05.100
是不是在rotor里边

43:05.360 --> 43:05.880
路由里边

43:07.420 --> 43:09.460
因为我们在页面上用到了路由

43:09.460 --> 43:11.260
路由又去移拿来这些东西

43:11.620 --> 43:13.620
它就进入了全部的打包结果

43:14.540 --> 43:15.860
我们这里不要直接依赖

43:16.380 --> 43:17.180
怎么依赖呢

43:17.780 --> 43:19.780
组件这里我们可以使用一个动态依赖

43:20.340 --> 43:21.140
动态导入

43:21.580 --> 43:23.660
动态导入返回的是不是一个promise

43:24.060 --> 43:25.860
promise完成过后是不是得到一个组件

43:26.380 --> 43:28.420
在维尤rotor里边是支持这种

43:28.700 --> 43:31.220
这种那个叫做异步组件的

43:31.740 --> 43:33.780
异步组件我们下几课再单独说

43:33.780 --> 43:34.820
还会单独说

43:35.820 --> 43:38.140
因为维尤里边它本身就支持异步组件

43:38.380 --> 43:39.940
我们这里就可以用动态导入

43:39.940 --> 43:41.100
返回一个promise

43:41.260 --> 43:43.820
这个promise完成的结果就是一个组件

43:43.820 --> 43:45.100
是可以的可以支持的

43:45.620 --> 43:47.140
那么这里呢我就得到这个

43:48.420 --> 43:49.980
把后幕组件放这

43:52.540 --> 43:53.820
然后呢

43:54.060 --> 43:55.860
我们这里的前面可以加一段注释

43:55.860 --> 43:56.860
加一段多长注释

43:57.380 --> 43:58.140
就是

43:58.420 --> 43:59.940
设置一下waypack

44:00.460 --> 44:00.980
创刻

44:01.980 --> 44:04.060
这样子也可以设置可以不设置

44:04.300 --> 44:06.620
我主要的目的呢是为了看清楚这个打包结果

44:06.620 --> 44:08.380
给这个打包给这个创刻

44:08.660 --> 44:10.300
因为我们知道那个一个动态的

44:10.500 --> 44:12.300
Import的话还会生成一个新的创刻

44:12.580 --> 44:14.100
来一个创刻的干冰个名字啊

44:14.100 --> 44:16.140
方便我们后面查看那个打包结果

44:16.140 --> 44:17.060
干冰一个厚

44:18.460 --> 44:19.460
接下来关于我

44:26.290 --> 44:27.570
接下来博客

44:36.930 --> 44:38.130
这边是文章

44:38.490 --> 44:39.250
一样的啊

44:40.530 --> 44:42.330
这边是文章详情

44:43.330 --> 44:44.010
Blog

44:46.140 --> 44:46.900
Detail

44:52.560 --> 44:54.480
下面这个项目效果

44:57.770 --> 44:58.450
Project

45:02.120 --> 45:03.160
这里Message

45:05.360 --> 45:06.040
Message

45:08.420 --> 45:09.020
Message

45:09.740 --> 45:10.180
好了

45:10.460 --> 45:12.620
然后呢上面这个就不要直接导入了啊

45:12.620 --> 45:13.980
直接导入就有直接的依赖

45:14.500 --> 45:16.780
我们把动态导入之后呢我们再来看一下

45:18.730 --> 45:20.130
NPM装备

45:28.430 --> 45:29.230
好这样子再看

45:30.070 --> 45:32.110
是不是就切个了非常合理的

45:33.070 --> 45:35.390
左边这个这一块呢是我们公共库啊

45:35.390 --> 45:36.430
一共47kb

45:36.910 --> 45:38.110
然后这边呢你看

45:40.910 --> 45:42.350
这是旧版本的

45:42.510 --> 45:43.110
原来是

45:44.830 --> 45:46.030
这是一些公共代码啊

45:46.030 --> 45:47.470
公共代码放到这儿

45:47.630 --> 45:49.710
然后呢这里是这有多少kb

45:49.710 --> 45:50.510
18kb啊

45:50.670 --> 45:53.110
这里边Blog Detail 16kb

45:54.430 --> 45:56.350
这是Message一面7.5kb

45:56.350 --> 45:56.670
是吧

45:57.630 --> 45:59.310
首页只有7.35kb

45:59.430 --> 45:59.830
对吧

46:00.590 --> 46:01.950
Project是只有1.89

46:02.350 --> 46:03.630
是吧分小了对不对

46:03.790 --> 46:04.270
分小了

46:04.270 --> 46:06.430
他有可能总的体积加起来变大了

46:06.430 --> 46:07.230
有可能的啊

46:07.230 --> 46:08.110
因为他每个

46:08.590 --> 46:10.030
每个包呢要注入一些

46:10.830 --> 46:11.550
额外的代码

46:11.790 --> 46:14.190
但是他整每一次页面是不是变

46:14.190 --> 46:15.390
加载的介绍变少了

46:15.630 --> 46:16.750
需要的介绍变少

46:17.150 --> 46:17.630
对不对

46:17.790 --> 46:19.470
然后呢在页面的处理上

46:19.470 --> 46:21.470
我们看他最终的形成了打包结果啊

46:21.630 --> 46:22.670
在页面的处理上呢

46:22.670 --> 46:25.550
他给你用了一种别的方式叫做perfetch

46:25.950 --> 46:28.110
perfetch呢跟perlnode比较类似啊

46:28.110 --> 46:31.550
不过呢perfetch的优先级要比perlnode高一些

46:31.630 --> 46:33.550
就是如果说这里这些东西同时存在的话

46:33.550 --> 46:35.310
他会优先加载这个东西

46:36.270 --> 46:37.550
因为perlnode表示什么意思啊

46:37.550 --> 46:39.310
就是我这个页面就要用到的

46:39.950 --> 46:40.670
很快就要用到

46:40.670 --> 46:41.630
你先帮我下载着

46:41.790 --> 46:42.750
我很快就要用了

46:43.950 --> 46:45.150
perfetch是什么意思啊

46:45.150 --> 46:47.790
我没有别的事情的时候呢

46:47.790 --> 46:48.750
我慢慢去下载

46:48.990 --> 46:50.270
因为这个页面用不到

46:50.350 --> 46:52.190
可能江南的页面呢会用到

46:52.190 --> 46:53.390
他就先把它下载着

46:53.470 --> 46:53.870
对吧

46:54.830 --> 46:56.430
我们就加入了一些perfetch啊

46:56.430 --> 46:58.430
这些perfetch呢是不会影响

46:58.430 --> 46:59.710
当前页面加载的

46:59.710 --> 47:00.910
所以放到这也非常好

47:02.510 --> 47:03.630
当我们切换页面的时候呢

47:03.630 --> 47:04.990
就可能会用到这些CSS

47:06.430 --> 47:09.870
好那么这就是目前的这种打包结果

47:11.710 --> 47:12.990
这是页面分包

47:13.950 --> 47:14.910
好最后呢

47:15.630 --> 47:17.710
说一个东西就是手平响应

47:17.710 --> 47:19.710
手平响应呢是一个很大的话题

47:19.710 --> 47:22.190
关于无忧的手平响应的问题

47:22.190 --> 47:23.630
什么叫手平响应呢

47:23.870 --> 47:25.870
就是我们从输入一个地址

47:25.870 --> 47:28.110
到我们看到无忧这一块东西

47:28.590 --> 47:30.670
中间可能会有一段时间是白平的

47:30.910 --> 47:31.870
啥都没有的

47:36.920 --> 47:37.640
色舞白

47:39.320 --> 47:41.880
中间可能有一段时间是啥都看不见的

47:42.520 --> 47:44.520
那么这段时间呢就是手也白平

47:45.000 --> 47:47.640
我们要尽量的缩短这个白平的时间

47:48.760 --> 47:49.960
这也出什么问题了

47:54.920 --> 47:55.720
这也出什么问题了

47:55.720 --> 47:56.440
我看一下啊

48:01.530 --> 48:02.650
无法代理

48:03.370 --> 48:04.970
从能够好使得到这个

48:05.290 --> 48:06.490
哦把墨殼去掉了

48:06.490 --> 48:07.530
我把墨殼去掉了

48:07.770 --> 48:08.810
那肯定不行了啊

48:16.090 --> 48:17.610
哎他说这个有什么意思

48:18.090 --> 48:20.730
他说模板orange的方形到defend

48:22.170 --> 48:24.490
哦他说渲染不出来

48:25.610 --> 48:26.330
这个组件

48:26.730 --> 48:28.490
哦哦哦这个地方写错了

48:28.490 --> 48:30.170
这个地方是不是一个函数啊

48:30.730 --> 48:33.770
这个动态这个东西叫路由乃加站啊

48:33.770 --> 48:36.330
就是他叫做路由乃加站

48:36.810 --> 48:38.250
就是页面分包啊

48:38.250 --> 48:39.690
最终结果就导致页面分包

48:40.250 --> 48:41.210
路由乃加站

48:42.970 --> 48:44.410
就是要用到这个路由的时候呢

48:44.490 --> 48:45.450
再去加在这个组件

48:46.010 --> 48:47.050
其实就是分包嘛

48:47.450 --> 48:49.130
那么这个组件里面是个函数啊

48:49.130 --> 48:50.090
这个是个函数

48:50.090 --> 48:51.690
这个函数反回一个promise

48:51.690 --> 48:54.330
这个反反回这个promise完成之后呢

48:54.330 --> 48:55.130
是一个组件啊

48:57.400 --> 48:58.280
把这个动力移出

48:59.240 --> 49:00.360
好加上啊

49:06.520 --> 49:07.480
OK保存

49:07.800 --> 49:08.680
先让我们再来看看

49:09.160 --> 49:10.040
正常了对吧

49:10.840 --> 49:11.800
好我们锁页

49:11.800 --> 49:12.920
你看是正常了

49:14.440 --> 49:16.200
哦回到这个白平问题啊

49:16.520 --> 49:18.520
白平问题或者这里怎么掩饰呢

49:19.240 --> 49:21.080
这白平问题造成的原因有很多啊

49:21.080 --> 49:22.680
我们现在说其中一个原因

49:23.080 --> 49:24.680
因为我们的整个页面呢

49:24.680 --> 49:26.200
其实里边什么东西都没有

49:27.000 --> 49:28.120
我们看一下页面元旦嘛

49:30.040 --> 49:31.560
页面元旦嘛

49:31.560 --> 49:32.520
网页元旦嘛

49:32.520 --> 49:33.560
就是用一段GS

49:33.560 --> 49:35.080
然后这个一个空的DIV

49:35.080 --> 49:36.520
对吧页面上实际上啥都没有

49:37.720 --> 49:39.240
这些东西是怎么出来的

49:39.720 --> 49:41.640
是不是靠我们写的GS

49:41.640 --> 49:43.480
一个元数一个元数创建出来的

49:43.480 --> 49:44.520
对吧只不过我们用到了

49:44.520 --> 49:45.960
唯有框架来帮我们创建

49:47.720 --> 49:48.280
那么也就是说

49:48.280 --> 49:49.800
他需要GS来创建出来

49:49.880 --> 49:51.800
但是如果说GS加载出来之前呢

49:52.200 --> 49:53.400
GS也是一个文件啊

49:53.400 --> 49:55.240
需要下载过后流量器才能执行

49:55.960 --> 49:58.760
那么这个文件下载下来之前

49:58.760 --> 50:00.360
是不是因为那就是白平的状态啊

50:00.760 --> 50:01.800
那我们怎么来掩饰

50:01.800 --> 50:03.240
我们到一个network里面啊

50:03.240 --> 50:05.080
把这个网络速度呢跟他调低

50:05.480 --> 50:06.840
调成一个3G嘛

50:07.800 --> 50:08.440
接下来我们来看

50:08.440 --> 50:08.920
放心

50:11.400 --> 50:12.440
3G快了

50:12.440 --> 50:13.480
有点快了啊

50:15.880 --> 50:16.680
slow 3G

50:17.560 --> 50:18.200
慢3G

50:19.320 --> 50:20.520
你看这个时候就是白平的

50:20.520 --> 50:20.840
实际上

50:21.800 --> 50:22.520
啥都看不见

50:22.520 --> 50:22.760
对吧

50:22.760 --> 50:23.720
至于一段白平时间

50:23.720 --> 50:25.160
这个GS下载需要一段时间

50:26.040 --> 50:27.800
如果我们新开一个网页的话

50:27.800 --> 50:29.400
那么这个看到更加明显

50:30.120 --> 50:30.600
network

50:31.320 --> 50:32.520
调为3G

50:34.620 --> 50:35.020
常问

50:35.660 --> 50:36.460
你看没有吧

50:36.460 --> 50:36.940
啥都没有

50:37.580 --> 50:38.540
啥都没有空白了

50:39.180 --> 50:40.460
然后GS下载出来过后

50:40.460 --> 50:41.980
运行的过后才是慢慢出来

50:41.980 --> 50:42.220
对吧

50:42.220 --> 50:43.740
然后在阿迦克斯请求达到数据

50:44.780 --> 50:45.820
是这么一个过程

50:45.820 --> 50:46.940
那么这里边有很多的

50:46.940 --> 50:48.140
很多的细节需要处理啊

50:48.140 --> 50:49.500
我们这一刻呢只说一个

50:50.380 --> 50:52.140
就是在GS下载到本地之前

50:52.140 --> 50:53.180
一面上啥都没有

50:53.180 --> 50:54.060
那么这个时候呢

50:54.060 --> 50:55.580
也可以用一种非常简单的办法

50:56.140 --> 50:57.900
就是在一面上显示一张图片啊

50:57.900 --> 51:00.060
或者是显示一个什么SVG啊

51:00.060 --> 51:01.260
显示一段什么文字啊

51:01.260 --> 51:02.220
让它等一会对吧

51:02.220 --> 51:04.140
给它一些小的样式

51:04.140 --> 51:05.420
这些样式的好作嘛

51:05.420 --> 51:06.540
你们自己去充分发挥的

51:06.540 --> 51:07.740
自己的想象力啊

51:07.740 --> 51:09.580
就往这个DIV app里边扔一个

51:09.580 --> 51:10.780
因为五幼一会儿

51:10.780 --> 51:11.580
夹载出来过后

51:11.580 --> 51:12.780
运行五幼

51:12.780 --> 51:14.780
是不是这一块就背了个五幼覆盖掉了

51:15.660 --> 51:17.020
这一块东西就被五幼覆盖了

51:17.020 --> 51:17.500
所以说呢

51:17.500 --> 51:18.380
这一块东西你直接

51:18.380 --> 51:20.460
直接搭载在里边写就完事了

51:20.540 --> 51:21.820
现在给它一个效果

51:21.820 --> 51:22.540
上来看一看

51:23.100 --> 51:23.900
那么这边呢

51:23.900 --> 51:24.460
我就给他

51:24.460 --> 51:26.220
我就往上也是随便找了一个图片啊

51:26.220 --> 51:27.580
这个图片有点大的都

51:27.580 --> 51:28.860
117kb了

51:29.660 --> 51:32.060
你们可以去自己弄一些小的样式啊

51:32.700 --> 51:33.420
我就把这个图片

51:34.140 --> 51:35.660
像我这些图片都比较大

51:35.660 --> 51:36.540
往上随便找的啊

51:36.540 --> 51:38.300
你们可以自己去找一些图片

51:38.300 --> 51:39.100
比较小一点的

51:39.820 --> 51:41.580
我们把它放到这个public目录下去

51:42.140 --> 51:43.100
为什么放public呢

51:43.100 --> 51:43.740
这个目录呢

51:43.740 --> 51:44.620
是被五幼覆盖了

51:44.620 --> 51:45.180
它会

51:45.180 --> 51:46.460
它会用这个插件

51:46.460 --> 51:47.340
叫做copy

51:48.220 --> 51:48.620
webpack

51:49.260 --> 51:49.660
plugging

51:49.660 --> 51:50.300
结果了对吧

51:50.300 --> 51:51.260
它会把这个

51:51.260 --> 51:52.220
这个目录里边的东西

51:52.220 --> 51:53.420
直接复制粘贴到这个

51:53.420 --> 51:54.300
地上目录里边去

51:54.300 --> 51:55.020
就这么简单

51:55.500 --> 51:56.460
我们来看一下吧

51:56.460 --> 51:57.100
我们在这里呢

51:57.100 --> 51:57.980
新建设文件家

51:57.980 --> 51:58.620
叫mg

52:00.140 --> 52:01.740
这里边就是存静态资源啊

52:05.790 --> 52:07.230
关于这个静态资源呢

52:07.230 --> 52:08.190
我给大家说一下

52:08.190 --> 52:09.550
有两种静态资源

52:09.550 --> 52:10.670
这都是常识

52:10.670 --> 52:11.950
一个叫做static

52:11.950 --> 52:12.910
一个叫做asset

52:14.590 --> 52:15.870
static表示

52:15.870 --> 52:16.510
静态

52:16.510 --> 52:18.030
存静态资源啊

52:18.030 --> 52:18.910
就是

52:18.910 --> 52:20.030
它会远逢不动的

52:20.030 --> 52:20.910
你试啥就是啥

52:20.910 --> 52:21.470
远逢不动的

52:21.470 --> 52:22.270
那么到输出目录

52:23.390 --> 52:24.190
另外一种资源呢

52:24.190 --> 52:24.670
叫asset

52:24.670 --> 52:26.110
叫潜入式的静态资源

52:26.110 --> 52:26.910
就在这里边

52:26.910 --> 52:28.670
那么它会参与到打包

52:28.670 --> 52:29.630
参与到打包结果

52:29.630 --> 52:30.590
最终生成的结果呢

52:30.590 --> 52:30.830
可能

52:31.630 --> 52:32.350
并没有这个文件

52:32.350 --> 52:33.550
比较文件比较小

52:33.550 --> 52:34.430
它可能就是

52:34.430 --> 52:35.070
只是一个

52:35.470 --> 52:36.190
bass64

52:38.110 --> 52:39.070
如果说文件比较大的话

52:39.070 --> 52:40.430
它可能会生成了

52:40.430 --> 52:41.070
出出目录

52:41.070 --> 52:41.470
但是呢

52:41.470 --> 52:42.590
它会进行一些

52:42.590 --> 52:43.390
改向文件名

52:43.390 --> 52:44.750
做一些哈希编码之类的

52:44.750 --> 52:45.070
你看

52:46.030 --> 52:46.270
对吧

52:46.270 --> 52:47.070
这非常简单啊

52:47.070 --> 52:48.110
再说一下这两种

52:48.110 --> 52:49.470
那么放到public目录下面呢

52:49.470 --> 52:50.430
就是static

52:50.430 --> 52:51.150
存静态资源

52:51.550 --> 52:52.510
那么我们在email上

52:52.510 --> 52:53.470
就在这个地方

52:53.470 --> 52:53.790
啊

52:53.790 --> 52:54.590
去引用一下吧

52:56.110 --> 52:56.590
image

52:56.590 --> 52:56.990
楼顶

52:57.710 --> 52:58.270
然后在这里边

52:58.270 --> 52:58.830
还甚至还可以

52:58.830 --> 52:59.390
写个样式

52:59.790 --> 53:00.750
给它一个那样式吧

53:02.510 --> 53:02.910
楼顶

53:03.870 --> 53:04.270
image

53:05.550 --> 53:06.350
楼顶

53:07.390 --> 53:07.950
email

53:07.950 --> 53:09.150
简单说一下吧

53:09.150 --> 53:09.390
play

53:09.390 --> 53:10.910
请把它稍微固定定位

53:10.910 --> 53:11.790
放到email中间嘛

53:12.510 --> 53:14.190
宽度100个像素

53:14.190 --> 53:15.550
高度100个像素

53:15.550 --> 53:16.030
然后呢

53:16.030 --> 53:16.510
left

53:16.510 --> 53:17.150
50

53:17.710 --> 53:18.030
top

53:18.030 --> 53:18.750
对

53:19.710 --> 53:21.470
就js加载出来

53:21.470 --> 53:22.750
就先够有显示这个玩意儿

53:22.750 --> 53:23.310
是吧

53:23.310 --> 53:24.110
先显示出来

53:24.110 --> 53:24.990
呃

53:24.990 --> 53:25.790
然后margin

53:25.790 --> 53:26.590
next

53:27.470 --> 53:28.190
复了

53:28.190 --> 53:29.630
这里有200吧

53:29.630 --> 53:30.910
100好像有点太小了

53:30.910 --> 53:35.480
复了100个像素

53:35.480 --> 53:37.080
margin

53:37.080 --> 53:37.880
top

53:37.880 --> 53:38.920
复了100个像素

53:38.920 --> 53:40.760
好了

53:40.760 --> 53:41.880
我们写好这个模板过后了

53:41.880 --> 53:42.440
我们再来看

53:42.440 --> 53:45.180
来

53:45.180 --> 53:45.980
是不是先显示这个

53:45.980 --> 53:47.420
先显示这个玩意儿

53:47.420 --> 53:48.300
然后呢

53:48.300 --> 53:50.060
等js加载出来过后呢

53:50.060 --> 53:51.180
再去显示页面

53:51.180 --> 53:51.580
对吧

53:51.580 --> 53:52.140
至少呢

53:52.140 --> 53:53.740
虽然说我们没有减少打包结果

53:54.620 --> 53:55.020
但是呢

53:55.020 --> 53:55.980
我们至少给email

53:55.980 --> 53:57.820
给用户提前显示一个东西

53:57.820 --> 53:58.060
对吧

53:58.060 --> 53:59.500
你只要再给它显示东西

54:00.220 --> 54:01.020
让用户知道

54:01.020 --> 54:02.380
现在有反应

54:02.940 --> 54:03.180
那么

54:04.220 --> 54:05.100
就还是不错的

54:05.900 --> 54:07.100
用户最担心的就是

54:07.100 --> 54:07.820
又是个白屏

54:07.820 --> 54:08.540
啥都看不见

54:08.540 --> 54:10.060
他可能就认为网站挂掉了

54:10.700 --> 54:11.340
一两秒钟过后

54:11.340 --> 54:12.140
他就没有担心了

54:13.260 --> 54:13.660
这是

54:14.780 --> 54:15.500
关于这一块

54:16.780 --> 54:17.580
其他没啥了

54:17.580 --> 54:18.700
咱们这一块的优化呢

54:18.700 --> 54:19.980
就讲了这么一些

54:19.980 --> 54:21.020
就跟我们代码相关

54:21.020 --> 54:22.460
那也主要就是这个

54:23.260 --> 54:24.060
一面分包

54:24.060 --> 54:26.620
这里我们要利用那个路由哪家站

54:26.620 --> 54:27.980
其实说的那么高大上

54:27.980 --> 54:28.700
其实就是利用

54:28.700 --> 54:29.660
微派可的分包效果

54:31.420 --> 54:31.660
好

54:31.660 --> 54:31.980
ok

54:31.980 --> 54:33.740
这就是咱们这结合的这种

54:33.740 --> 54:34.380
就是我们看一下

54:34.380 --> 54:35.420
个最终打包结果吧

54:35.980 --> 54:36.620
最打包结果

54:36.620 --> 54:37.980
我们还是来运行看一下

54:38.700 --> 54:40.220
np装

54:49.200 --> 54:49.760
打包一下

54:53.360 --> 54:54.560
还在打包那个

54:55.600 --> 54:56.560
还打包一些别的

54:56.560 --> 54:57.040
ok

54:57.040 --> 54:57.520
完成了

54:58.080 --> 54:58.480
完成了

54:58.480 --> 54:58.800
过后呢

54:58.800 --> 54:59.760
我们把这个电视目录

55:00.480 --> 55:01.840
用电视目打开

55:01.840 --> 55:07.020
用电视目打开一下

55:17.310 --> 55:18.590
我的目可接视呢

55:19.230 --> 55:20.430
目可接视又没有

55:20.430 --> 55:21.470
又没有模拟出来的数据

55:24.160 --> 55:24.560
所以

55:25.680 --> 55:26.800
再强制发现一下

55:27.520 --> 55:28.080
对了

55:28.080 --> 55:28.320
ok

55:29.040 --> 55:30.800
那么这是我们最终打包结果

55:31.440 --> 55:32.000
没什么问题

55:32.000 --> 55:32.240
对吧

55:33.440 --> 55:34.880
这是咱们这一块

55:37.440 --> 55:37.680
好

55:37.680 --> 55:38.320
咱们这一块

55:39.120 --> 55:40.480
后边还有一些小的细节

55:40.480 --> 55:41.360
我慢慢去讲吧

