WEBVTT

00:01.070 --> 00:04.070
继续来完成这个文章详情页

00:04.070 --> 00:08.070
这些课咱们就把该做的事弄完了

00:08.070 --> 00:12.070
还有啥呀 还有这个文章详情页里边划到底部

00:12.070 --> 00:14.070
有个夹载中夹载更多的效果

00:14.070 --> 00:17.070
其实这个本质上也是一个分页

00:17.070 --> 00:19.070
我们这一课完成

00:19.070 --> 00:22.070
还有一个就是回到顶部

00:22.070 --> 00:24.070
就这么一个圆圈圈

00:24.070 --> 00:25.070
点一下就回到顶部了

00:25.070 --> 00:27.070
我也不去演示案地了

00:27.070 --> 00:30.070
就这么个意思 就把这两件事情给他做了

00:30.070 --> 00:33.070
首先是评论列表这一块

00:33.070 --> 00:36.070
评论列表这一块我要夹载更多

00:36.070 --> 00:38.070
夹载更多它是一个

00:39.070 --> 00:41.070
划中到底部的这么一个分页

00:41.070 --> 00:43.070
它不是一个分页的区域

00:43.070 --> 00:45.070
这种分页它其实本质上也是分页

00:45.070 --> 00:47.070
你看这是第一页的内容

00:47.070 --> 00:49.070
而且划到底部夹载第二页

00:49.070 --> 00:52.070
夹载第二页的时候不是替换掉第一页

00:52.070 --> 00:54.070
而是第一页仍然保留

00:54.070 --> 00:56.070
是把第二页的内容往第一页里边夹

00:56.070 --> 00:58.070
其实相当于是扩展这个数组

00:58.070 --> 01:01.070
把这个数组变长了

01:01.070 --> 01:02.070
因为数组一变长

01:02.070 --> 01:04.070
这个组建不就选择的更多了吗

01:04.070 --> 01:06.070
其实本质上很简单

01:06.070 --> 01:08.070
那么我们就回到我们的代码里边

01:08.070 --> 01:09.070
我们找一找

01:09.070 --> 01:11.070
找找找在那个

01:11.070 --> 01:14.070
Home 这里边

01:14.070 --> 01:16.070
Blog 这里边

01:16.070 --> 01:18.070
下边有一个

01:18.070 --> 01:20.070
这里个detail

01:20.070 --> 01:21.070
Blog

01:21.070 --> 01:22.070
评论

01:22.070 --> 01:25.070
Blog Comments 这个组建里边

01:25.070 --> 01:26.070
不是一个评论列表吗

01:26.070 --> 01:28.070
它有个Message Areal

01:28.070 --> 01:29.070
这里有一个Nest

01:29.070 --> 01:31.070
是不是把它的数据给它

01:31.070 --> 01:33.070
data的数据里边是Rose

01:33.070 --> 01:34.070
给它

01:34.070 --> 01:36.070
那么这个是数据哪来的呢

01:36.070 --> 01:37.070
我们来分析一下

01:37.070 --> 01:39.070
其实就回归一下之前的代码

01:39.070 --> 01:40.070
这个数据哪来的呢

01:40.070 --> 01:41.070
这个数据呢

01:41.070 --> 01:43.070
是我们这里用了一个混合

01:43.070 --> 01:46.070
混合里边不是一个data吗

01:46.070 --> 01:48.070
混合里边不是一个data属性吗

01:48.070 --> 01:49.070
data属性哪来的

01:49.070 --> 01:50.070
是不是在

01:50.070 --> 01:51.070
组建最开始的时候

01:51.070 --> 01:53.070
调用了fetchdata

01:53.070 --> 01:54.070
调用这个方法

01:54.070 --> 01:55.070
这个方法的结果呢

01:55.070 --> 01:57.070
就可以data复制

01:57.070 --> 01:58.070
那么我们这里是

01:58.070 --> 01:59.070
哪里调用这个方法

01:59.070 --> 02:00.070
是在这

02:01.070 --> 02:02.070
是吧 在这

02:02.070 --> 02:03.070
调用这个方法

02:03.070 --> 02:04.070
这个方法里边是

02:04.070 --> 02:05.070
是不是通过远程

02:05.070 --> 02:07.070
阿迦克斯请求

02:07.070 --> 02:09.070
达到一个对象

02:09.070 --> 02:10.070
这个对象里边

02:10.070 --> 02:11.070
有个toto

02:11.070 --> 02:12.070
表示总数

02:12.070 --> 02:14.070
对吧 数据总量

02:14.070 --> 02:15.070
说200 数据总量

02:15.070 --> 02:16.070
我们把它调小一点

02:16.070 --> 02:17.070
免得一会儿

02:17.070 --> 02:19.070
不好测试

02:20.070 --> 02:22.070
数据总量在

02:23.070 --> 02:24.070
往下打

02:24.070 --> 02:25.070
comment

02:26.070 --> 02:27.070
评论

02:27.070 --> 02:28.070
评论这里

02:28.070 --> 02:29.070
数据总量

02:29.070 --> 02:30.070
我们之前用个水击

02:30.070 --> 02:31.070
我现在就不水击了吧

02:31.070 --> 02:32.070
就50

02:32.070 --> 02:33.070
52

02:35.070 --> 02:36.070
就这样

02:39.090 --> 02:40.090
定时

02:40.090 --> 02:41.090
行吧

02:41.090 --> 02:43.090
那么再回到这

02:43.090 --> 02:44.090
comment

02:45.090 --> 02:46.090
那么这里呢

02:46.090 --> 02:47.090
会拿到一个数据总量

02:47.090 --> 02:49.090
然后还有一个rose

02:49.090 --> 02:50.090
就是这一页

02:50.090 --> 02:52.090
这一页的一个数据数据

02:52.090 --> 02:53.090
对不对

02:54.090 --> 02:56.090
咱们这个东西怎么来玩

02:56.090 --> 02:58.090
这个事情

02:59.090 --> 03:01.090
我们最开始的时候

03:01.090 --> 03:02.090
是把这个

03:02.090 --> 03:04.090
得到了远程数据

03:04.090 --> 03:06.090
直接复制给toto

03:06.090 --> 03:07.090
是吧

03:07.090 --> 03:08.090
是这样子玩的

03:08.090 --> 03:10.090
那么这样子一复制的话

03:10.090 --> 03:11.090
你这一返回一复制

03:11.090 --> 03:12.090
那么是不是

03:12.090 --> 03:13.090
就最开始的时候

03:13.090 --> 03:15.090
就有了一个数据总量

03:15.090 --> 03:16.090
有了一个第1页的数据

03:16.090 --> 03:18.090
因为我们开始是第1页

03:18.090 --> 03:20.090
有了一个第1页的数据

03:20.090 --> 03:21.090
那么后边我们要加载

03:21.090 --> 03:22.090
更多的话

03:22.090 --> 03:24.090
那还能直接给这个tata复制吗

03:24.090 --> 03:25.090
一复制的话

03:25.090 --> 03:26.090
是不是把第1页的数据覆盖掉了

03:26.090 --> 03:27.090
所以说呢

03:27.090 --> 03:28.090
我们后边加载更多的话

03:28.090 --> 03:29.090
我们这里

03:29.090 --> 03:30.090
写个函数

03:30.090 --> 03:31.090
当主来写个函数

03:31.090 --> 03:33.090
就是废其末

03:33.090 --> 03:36.780
加载更多

03:36.780 --> 03:38.780
其实就是加载下一页

03:38.780 --> 03:40.780
加载下一页

03:40.780 --> 03:41.780
加载下一页其实怎么做呢

03:41.780 --> 03:42.780
非常简单

03:42.780 --> 03:44.780
我把当前的页码加1

03:44.780 --> 03:46.780
下页肯定要加1吗

03:46.780 --> 03:48.780
当前的页码加1

03:48.780 --> 03:50.780
然后呢

03:50.780 --> 03:51.780
还是要先把

03:52.780 --> 03:53.780
一声的屋顶

03:53.780 --> 03:54.780
设为2

03:54.780 --> 03:55.780
然后

03:55.780 --> 03:57.780
页码加1

03:57.780 --> 03:58.780
页码加1

03:58.780 --> 03:59.780
页容量不变

03:59.780 --> 04:01.780
我们重新去调用这个

04:01.780 --> 04:02.780
废其data函数

04:02.780 --> 04:03.780
废其data函数

04:03.780 --> 04:04.780
重新调用一下

04:04.780 --> 04:05.780
页码加1

04:05.780 --> 04:06.780
它是不是加载下一页的效果

04:06.780 --> 04:07.780
那么这样子

04:07.780 --> 04:09.780
重新拿到服务器的数据

04:09.780 --> 04:11.780
拿到这个服务器的数据过后

04:11.780 --> 04:12.780
我们现在就不是

04:12.780 --> 04:13.780
直接复制给data了

04:13.780 --> 04:14.780
而是怎么样呢

04:14.780 --> 04:16.780
给这个zdata里边

04:16.780 --> 04:17.780
偷偷

04:17.780 --> 04:19.780
偷偷同意复制一下职吧

04:19.780 --> 04:20.780
偷偷

04:20.780 --> 04:21.780
这个没问题

04:21.780 --> 04:22.780
然后呢

04:22.780 --> 04:23.780
zdata里边的Rose

04:23.780 --> 04:24.780
这个不一样了

04:25.780 --> 04:26.780
它的那个

04:28.780 --> 04:29.780
周一页的数据

04:29.780 --> 04:30.780
我们要添加到

04:30.780 --> 04:32.780
之前的这个数据表去

04:32.780 --> 04:33.780
对吧

04:33.780 --> 04:34.780
那怎么弄呢

04:34.780 --> 04:35.780
是不是等于

04:36.780 --> 04:37.780
添加数据

04:37.780 --> 04:38.780
这个很简单吧

04:41.780 --> 04:42.780
顺便复习一下

04:42.780 --> 04:43.780
基础知识

04:44.780 --> 04:45.780
一个数据

04:45.780 --> 04:46.780
我要添加另一个数据

04:46.780 --> 04:47.780
AR1

04:47.780 --> 04:48.780
等于123

04:48.780 --> 04:49.780
然后呢

04:49.780 --> 04:50.780
另外一个数据

04:50.780 --> 04:51.780
AR2等于

04:52.780 --> 04:53.780
456

04:53.780 --> 04:55.780
我要把456加到AR1

04:55.780 --> 04:56.780
里边怎么办

04:56.780 --> 04:57.780
AR1

04:57.780 --> 04:58.780
Concrete

04:58.780 --> 05:00.780
是不是连接AR2

05:00.780 --> 05:01.780
对吧

05:01.780 --> 05:02.780
那么这样AR1

05:02.780 --> 05:03.780
反回的

05:03.780 --> 05:04.780
这个反回的结果

05:04.780 --> 05:05.780
是不是

05:05.780 --> 05:06.780
就是一个连接的结果

05:06.780 --> 05:07.780
所以我们这里的

05:07.780 --> 05:08.780
叫Concrete

05:09.780 --> 05:10.780
大家学会怎么做

05:10.780 --> 05:11.780
这是关键代码

05:11.780 --> 05:12.780
等于以后

05:12.780 --> 05:13.780
加的动作效果

05:13.780 --> 05:14.780
这些代码不是说

05:14.780 --> 05:15.780
跟我一个代码

05:15.780 --> 05:16.780
就完全一模一样

05:16.780 --> 05:17.780
具体情况进水分析

05:17.780 --> 05:18.780
因为我们这里用了混合

05:18.780 --> 05:20.780
但是关键代码在这

05:20.780 --> 05:21.780
把它拼接上什么呢

05:21.780 --> 05:22.780
Risk

05:22.780 --> 05:23.780
Rose

05:23.780 --> 05:25.780
是不是就加得到更多了

05:25.780 --> 05:26.780
那么这个数据

05:26.780 --> 05:27.780
重新给它复习的

05:27.780 --> 05:28.780
那么这个数据变长了

05:28.780 --> 05:29.780
变长了过后

05:29.780 --> 05:31.780
它自然数据变的

05:31.780 --> 05:33.780
我们的界面就会跟着变化

05:33.780 --> 05:34.780
最后我们把

05:34.780 --> 05:35.780
this is loading

05:35.780 --> 05:36.780
作为force

05:36.780 --> 05:38.780
我们先把这个方法写好

05:38.780 --> 05:39.780
这个方法

05:39.780 --> 05:42.780
我们可以去测试一下

05:42.780 --> 05:43.780
而咋测试呢

05:43.780 --> 05:44.780
我就用个简单的方式

05:44.780 --> 05:45.780
非常简单的方式

05:46.780 --> 05:49.780
这里我把它放到Windows里面

05:49.780 --> 05:51.780
fetch more

05:51.780 --> 05:54.780
等于this fetch more

05:54.780 --> 05:57.290
来吧

05:57.290 --> 05:58.290
我们试一下

05:58.290 --> 05:59.290
试一下这个方法

05:59.290 --> 06:01.290
调一下它能不能夹载这么多

06:02.290 --> 06:04.290
我们放到滑到底部

06:10.220 --> 06:11.220
小心一下

06:11.220 --> 06:13.220
滑到底部

06:13.220 --> 06:15.220
这怎么会达输出1

06:15.220 --> 06:16.220
之前哪个地方

06:16.220 --> 06:19.220
好像是之前Toc这里

06:19.220 --> 06:20.220
console

06:21.220 --> 06:23.220
这里再输出1

06:23.220 --> 06:24.220
去掉

06:24.220 --> 06:25.220
保存

06:25.220 --> 06:26.220
好

06:26.220 --> 06:28.220
现在我们来在这里

06:28.220 --> 06:30.220
一开始是多少

06:30.220 --> 06:31.220
多少条数据

06:31.220 --> 06:32.220
52条

06:32.220 --> 06:34.220
那么我们来再来

06:34.220 --> 06:35.220
Windows

06:35.220 --> 06:36.220
fetch more

06:36.220 --> 06:37.220
调这个函数

06:37.220 --> 06:38.220
你看

06:38.220 --> 06:40.220
是不是加在更多了

06:40.220 --> 06:41.220
加在更多了

06:41.220 --> 06:42.220
先loading

06:42.220 --> 06:43.220
loading呢

06:43.220 --> 06:44.220
稍微去过后

06:44.220 --> 06:45.220
是不是一个loading效果

06:45.220 --> 06:46.220
我们在5u里边再重生

06:46.220 --> 06:47.220
反复重生

06:47.220 --> 06:49.220
只需要动数据就行了

06:49.220 --> 06:50.220
数据变界面跟着变

06:50.220 --> 06:52.220
因为界面就是跟着数据渲染出来的

06:52.220 --> 06:53.220
loading完了过后

06:53.220 --> 06:54.220
数据拿到过后

06:54.220 --> 06:55.220
我们凭借到之前的数据

06:55.220 --> 06:56.220
是不是就更多了

06:56.220 --> 06:57.220
再来

06:57.220 --> 06:58.220
fetch more

06:58.220 --> 07:00.220
是不是再下一页

07:00.220 --> 07:02.220
是不是加在更多了

07:02.220 --> 07:03.220
然后我们来看一下

07:03.220 --> 07:04.220
5u这个组件里边

07:04.220 --> 07:05.220
它的数据

07:05.220 --> 07:07.220
只需要关注数据就OK了

07:07.220 --> 07:09.220
comments里边

07:09.220 --> 07:10.220
你看

07:10.220 --> 07:11.220
是不是加了3页的数据

07:11.220 --> 07:12.220
30

07:12.220 --> 07:13.220
数据长度为30

07:13.220 --> 07:15.220
那么现在我们继续加在更多

07:15.220 --> 07:17.220
那你肯定会遇到一个情况

07:17.220 --> 07:18.220
就数据没了

07:18.220 --> 07:19.220
对吧

07:19.220 --> 07:20.220
有可能数据没了

07:20.220 --> 07:21.220
这是40

07:21.220 --> 07:23.220
这是50

07:23.220 --> 07:25.220
更多了

07:25.220 --> 07:26.220
现在就已经有50了

07:26.220 --> 07:27.220
然后

07:27.220 --> 07:28.220
再来

07:28.220 --> 07:29.220
那只有两条了

07:29.220 --> 07:30.220
52条数据

07:30.220 --> 07:31.220
你看是不是只有两

07:31.220 --> 07:33.660
不是

07:33.660 --> 07:34.660
不是只有两条

07:34.660 --> 07:36.660
因为我这边

07:36.660 --> 07:38.660
因为我这边全是测试的数据

07:38.660 --> 07:40.660
每次都是10条

07:40.660 --> 07:41.660
但是呢

07:41.660 --> 07:42.660
实际上如果真实的情况

07:42.660 --> 07:43.660
是不是只有两条了

07:43.660 --> 07:44.660
那么现在就数据就没了

07:44.660 --> 07:45.660
应该就数据就没了

07:45.660 --> 07:47.660
那么现在这里有60条了

07:47.660 --> 07:48.660
应该不正确了

07:48.660 --> 07:49.660
因为我这是模拟

07:49.660 --> 07:50.660
模拟不用去考虑那么多

07:50.660 --> 07:52.660
那么数据总量已经到达一定总量了

07:52.660 --> 07:54.660
是不是下一页就没数据了

07:54.660 --> 07:55.660
但是我这里加载下一页

07:55.660 --> 07:56.660
肯定还有数据

07:56.660 --> 07:57.660
因为我现在是测试的

07:57.660 --> 07:58.660
那真实的情况

07:58.660 --> 07:59.660
就应该没有数据了

07:59.660 --> 08:00.660
所以说我如果说

08:00.660 --> 08:01.660
加载到最后一页的时候

08:01.660 --> 08:03.660
就不允许

08:03.660 --> 08:05.660
不允许再继续加载了

08:05.660 --> 08:06.660
没了意思吧

08:06.660 --> 08:07.660
那我怎么样知道

08:07.660 --> 08:08.660
有没有到最后一页了

08:08.660 --> 08:10.660
我们可以再写个计算属性

08:10.660 --> 08:11.660
对不对

08:11.660 --> 08:12.660
计算属性呢

08:12.660 --> 08:13.660
怎么来知道有没有到最后一页

08:13.660 --> 08:15.660
其实就是个Rose的长度

08:15.660 --> 08:16.660
大于等于了

08:16.660 --> 08:17.660
什么

08:17.660 --> 08:18.660
头头

08:18.660 --> 08:19.660
是不是没数据了

08:19.660 --> 08:20.660
因为我们的所有的数据

08:20.660 --> 08:21.660
就放在这个数组里边

08:21.660 --> 08:22.660
你把所有的一页的数据

08:22.660 --> 08:23.660
全部加载完

08:23.660 --> 08:25.660
那他肯定就没数据了

08:25.660 --> 08:26.660
因此我们这里写个计算属性

08:26.660 --> 08:27.660
computed

08:31.660 --> 08:33.660
有没有更多的数据

08:34.660 --> 08:36.660
到底有没有更多的数据呢

08:36.660 --> 08:37.660
return

08:37.660 --> 08:38.660
就是

08:38.660 --> 08:40.660
this data

08:40.660 --> 08:41.660
叫什么Rose

08:42.660 --> 08:44.660
一开始Rose是空数组

08:44.660 --> 08:45.660
这个头头为0吗

08:45.660 --> 08:47.660
Rose.ness

08:47.660 --> 08:48.660
如果说小于了

08:48.660 --> 08:49.660
this.total

08:49.660 --> 08:50.660
data.total

08:50.660 --> 08:51.660
是不是这个时候

08:51.660 --> 08:52.660
就还有更多的数据

08:52.660 --> 08:54.660
反之就没有更多的数据了

08:54.660 --> 08:55.660
对不对

08:55.660 --> 08:56.660
我们写这么一个计算属性

08:56.660 --> 08:58.660
是否还有更多的数据

08:58.660 --> 08:59.660
好

08:59.660 --> 09:00.660
那么如果说

09:00.660 --> 09:02.660
我们在Fixed Mode的时候

09:02.660 --> 09:03.660
判断一下

09:03.660 --> 09:04.660
如果说已经没有

09:04.660 --> 09:05.660
更多的数据了

09:05.660 --> 09:06.660
Has more

09:06.660 --> 09:08.660
那么就是没有更多的数据了

09:08.660 --> 09:10.660
没有更多了

09:10.660 --> 09:12.660
那么振量直接返回

09:12.660 --> 09:13.660
啥都不做

09:13.660 --> 09:15.660
确实没有什么事情可以做了

09:15.660 --> 09:16.660
好

09:16.660 --> 09:17.660
那我们来看一下

09:17.660 --> 09:18.660
现在这种情况

09:18.660 --> 09:19.660
现在我们的数据

09:19.660 --> 09:20.660
只有10条

09:20.660 --> 09:21.660
我们有50条数据

09:21.660 --> 09:22.660
我们再来

09:34.580 --> 09:35.580
再来

09:35.580 --> 09:36.580
Has more

09:36.580 --> 09:37.580
Fixed mode

09:38.580 --> 09:40.580
is not function

09:40.580 --> 09:41.580
它说

09:41.580 --> 09:42.580
它不是方法

09:42.580 --> 09:43.580
它是计算属性

09:43.580 --> 09:44.580
我搞啥

09:44.580 --> 09:45.580
好

09:45.580 --> 09:46.580
保存

09:46.580 --> 09:50.750
再来

09:50.750 --> 09:51.750
再来

09:51.750 --> 09:53.750
加载更多

09:53.750 --> 09:54.750
20条了

09:54.750 --> 09:55.750
加载更多

09:55.750 --> 09:56.750
30条

09:56.750 --> 09:58.750
加载更多

09:58.750 --> 09:59.750
40条

09:59.750 --> 10:03.260
加载更多

10:03.260 --> 10:05.260
就是52条了

10:05.260 --> 10:06.260
50条

10:06.260 --> 10:07.260
再加载更多

10:07.260 --> 10:08.260
就是52条了

10:08.260 --> 10:10.260
现在就数据已经满了

10:10.260 --> 10:12.260
然后我们再加载更多

10:12.260 --> 10:13.260
是没用了

10:13.260 --> 10:14.260
是没用了

10:14.260 --> 10:16.260
没有数据了

10:16.260 --> 10:17.260
对不对

10:17.260 --> 10:19.260
我们就把玩这个效果就完成了

10:19.260 --> 10:20.260
好

10:20.260 --> 10:21.260
那么有了这个Fixed Mode

10:21.260 --> 10:23.260
过后我们要做的事情就是

10:23.260 --> 10:25.260
每当我们滑动到底部的时候

10:25.260 --> 10:27.260
就看调用一次这个方法

10:27.260 --> 10:28.260
是不是完事了

10:28.260 --> 10:30.260
那我怎么样知道滑动到底部了

10:30.260 --> 10:32.260
也是不是我要去监听

10:32.260 --> 10:33.260
这个主区的滚动条

10:33.260 --> 10:34.260
我们之前写的

10:34.260 --> 10:35.260
我写过一个事件总线

10:35.260 --> 10:37.260
这个事件总线里边是不是

10:37.260 --> 10:39.260
就有一个MateSchool事件

10:39.260 --> 10:40.260
那么我们要去监听它

10:40.260 --> 10:41.260
好

10:41.260 --> 10:42.260
那么在这个主键里边

10:42.260 --> 10:43.260
我们自我去监听

10:43.260 --> 10:44.260
在Creative的时候

10:44.260 --> 10:46.260
就去监听这个事件

10:46.260 --> 10:47.260
好

10:47.260 --> 10:48.260
来吧

10:48.260 --> 10:49.260
在我们创建的时候

10:49.260 --> 10:52.260
我们只用ZisBus

10:52.260 --> 10:53.260
因为我们之前这个

10:53.260 --> 10:54.260
事件总线里边

10:54.260 --> 10:55.260
是不是把它放到这个

10:55.260 --> 10:58.260
原形层面里边去了

10:58.260 --> 11:02.260
ZisBus里边有一个监听

11:02.260 --> 11:03.260
什么事件呢

11:03.260 --> 11:06.210
MateSchool

11:06.210 --> 11:07.210
就这个事件

11:07.210 --> 11:09.210
当触发这个事件的时候

11:09.210 --> 11:10.210
我们去运行一个方法

11:10.210 --> 11:12.210
它会传给我们一个什么呢

11:12.210 --> 11:13.210
一个元素过来

11:13.210 --> 11:15.210
因为当时它触发事件的时候

11:15.210 --> 11:17.210
它会传递一个滚动的元素

11:17.210 --> 11:19.210
我们上礼盒就是做过的

11:19.210 --> 11:20.210
在Detail里边

11:20.210 --> 11:22.210
滚动的时候它就会运行这个方法

11:22.210 --> 11:25.210
这个方法它就会出发这个事件

11:25.210 --> 11:27.210
然后传递这个元素

11:27.210 --> 11:28.210
传过来

11:28.210 --> 11:29.210
好

11:29.210 --> 11:30.210
那么这边我们就去

11:30.210 --> 11:32.210
找到我们自己的方法

11:32.210 --> 11:34.210
HandSchool

11:34.210 --> 11:36.210
处理滚动事件

11:36.210 --> 11:38.210
我们把方法里边再加一个方法

11:38.210 --> 11:40.210
HandSchool

11:40.210 --> 11:42.210
有这么一个方法

11:42.210 --> 11:44.210
这个方法它会接受一个参数

11:44.210 --> 11:46.210
上礼盒我们在Toc这个主键里边

11:46.210 --> 11:47.210
到时候也没有用到这个参数

11:47.210 --> 11:49.210
那么现在我们肯定要用到这个参数

11:49.210 --> 11:51.210
因为这个动物元素

11:51.210 --> 11:52.210
为什么要拿到呢

11:52.210 --> 11:54.210
因为我希望知道这个动物元素

11:54.210 --> 11:55.210
它滚动到哪了

11:55.210 --> 11:57.210
我不是所有的情况我都要加在更多

11:57.210 --> 11:58.210
我只需要

11:58.210 --> 12:00.210
直到它滚动到一个特定的位置

12:00.210 --> 12:01.210
我才要加在更多

12:01.210 --> 12:02.210
那么加在更多的时候

12:02.210 --> 12:03.210
肯定要用到一个异部函数

12:03.210 --> 12:05.210
所以把它拾成异部的

12:05.210 --> 12:06.210
好了

12:06.210 --> 12:07.210
那么我们来输出一下这个动物

12:07.210 --> 12:08.210
那么现在就是

12:08.210 --> 12:09.210
每滚动一次

12:09.210 --> 12:11.210
它就会运行这个动物

12:11.210 --> 12:12.210
好 咱们来看

12:12.210 --> 12:13.210
现在滚动

12:13.210 --> 12:15.210
你看是不是不断的得到这个DIV

12:15.210 --> 12:16.210
那么我们就要判断

12:16.210 --> 12:18.210
这个DIV是不是滚动到底部了

12:18.210 --> 12:19.210
那怎么来判断呢

12:19.210 --> 12:21.210
怎么判断有没有滚动到底部了

12:21.210 --> 12:22.210
这就是一个基础知识了

12:22.210 --> 12:23.210
不是什么知识

12:23.210 --> 12:25.210
这是一个基础的开发能力了

12:26.210 --> 12:27.210
所以说为什么说

12:27.210 --> 12:29.210
传统手艺不能丢啊

12:29.210 --> 12:30.210
基础不能丢

12:30.210 --> 12:31.210
为什么呢

12:31.210 --> 12:33.210
因为你用框架的时候

12:33.210 --> 12:35.210
难免还会有一些基础东西

12:35.210 --> 12:36.210
你还是会写

12:36.210 --> 12:37.210
不然不知道怎么写

12:37.210 --> 12:38.210
而现在你丢了基础过后

12:38.210 --> 12:40.210
你对框架的理解也很不到位

12:40.210 --> 12:42.210
你也都是非常付钱的

12:42.210 --> 12:44.210
那么我们来看一下这个滚动

12:44.210 --> 12:46.210
整个就是这个DIV

12:46.210 --> 12:48.210
在滚动的DIV

12:48.210 --> 12:49.210
就这个是个DIV

12:49.210 --> 12:51.210
这是DIV里边的内容

12:51.210 --> 12:52.210
那么这个DIV有多高呢

12:52.210 --> 12:54.210
有些尺寸一个是Square Height

12:54.210 --> 12:57.210
这个DIV里边的所有内容的高度

12:57.210 --> 12:59.210
就从高度

12:59.210 --> 13:01.210
这个呢就是DIV的可见高度

13:01.210 --> 13:02.210
你只能看到这么多

13:02.210 --> 13:03.210
那么就Client Height

13:03.210 --> 13:05.210
这个是DIV的滚动高度

13:05.210 --> 13:06.210
上面滚动了多少

13:06.210 --> 13:08.210
那怎么叫到底部

13:08.210 --> 13:09.210
什么叫到底部

13:09.210 --> 13:10.210
这里是不是到底部了

13:10.210 --> 13:12.210
到底部有个什么特点

13:12.210 --> 13:14.210
是不是Square Height

13:14.210 --> 13:17.210
刚好等于Square Top

13:17.210 --> 13:19.210
加上Client Height

13:19.210 --> 13:20.210
这两个相加

13:20.210 --> 13:21.210
有这么一个特点

13:21.210 --> 13:23.210
当然你可以允许一些误差

13:23.210 --> 13:25.210
比如说到这也算到底部

13:25.210 --> 13:27.210
所以说我们这两个相解

13:27.210 --> 13:29.210
我也不要求他们相解是0

13:29.210 --> 13:30.210
相解呢

13:30.210 --> 13:33.210
在一个范围之内都可以

13:33.210 --> 13:35.210
比如说我们这里

13:35.210 --> 13:37.210
又可以规定一个范围

13:37.210 --> 13:39.210
底部的范围有100个像素

13:39.210 --> 13:45.210
定一个可接受的范围

13:45.210 --> 13:48.210
在这个范围内

13:48.210 --> 13:51.210
内都算到达了底部

13:51.210 --> 13:53.210
因为它这边有些小数计算

13:53.210 --> 13:55.210
多多少都会有些误差

13:55.210 --> 13:57.210
我们都定一个范围吧

13:57.210 --> 13:58.210
所以我们得到的是什么呢

13:58.210 --> 14:02.210
如果说Dom

14:02.210 --> 14:06.580
叫Square Top

14:06.580 --> 14:09.580
加上Dom.Client Height

14:13.050 --> 14:17.640
这两个一相加

14:17.640 --> 14:22.640
然后减去Square Height

14:22.640 --> 14:27.590
Dom叫Square Height

14:27.590 --> 14:29.590
就这个值

14:29.590 --> 14:35.590
这个值我们就得到一个差值

14:35.590 --> 14:36.590
这是一个差值

14:36.590 --> 14:38.590
这个差值只要在一个范围之内都OK

14:38.590 --> 14:39.590
什么范围之内呢

14:39.590 --> 14:45.970
就是它大于

14:45.970 --> 14:47.970
我们绝对值得了

14:47.970 --> 14:48.970
Mass

14:48.970 --> 14:50.970
ABS

14:50.970 --> 14:52.970
用绝对值

14:52.970 --> 14:53.970
为什么呢

14:53.970 --> 14:55.970
避免误差算出来有附属

14:55.970 --> 14:58.970
如果说它小于了Range

14:58.970 --> 15:00.970
那么都OK

15:00.970 --> 15:02.970
小于等于Range

15:02.970 --> 15:03.970
都表示到达底部了

15:03.970 --> 15:04.970
我们来输出

15:04.970 --> 15:07.970
到达了底部

15:07.970 --> 15:08.970
好

15:08.970 --> 15:09.970
咱们保存

15:09.970 --> 15:10.970
再看一下

15:10.970 --> 15:11.970
现在我们没有任何输出

15:11.970 --> 15:12.970
对吧

15:12.970 --> 15:13.970
它在监听功能调

15:13.970 --> 15:14.970
这些东西运行没

15:14.970 --> 15:15.970
不断的在判断

15:15.970 --> 15:18.970
然后我们往下走

15:18.970 --> 15:25.050
往下走

15:25.050 --> 15:27.050
你看是不是到达底部了

15:27.050 --> 15:28.050
到达底部了

15:28.050 --> 15:29.050
你看

15:29.050 --> 15:30.050
对不对

15:30.050 --> 15:31.050
好

15:31.050 --> 15:32.050
那么到达底部的时候

15:32.050 --> 15:33.050
我们要运行什么呢

15:33.050 --> 15:35.050
运行FakeData

15:35.050 --> 15:36.050
FakeMode

15:36.050 --> 15:39.050
那么我们这里只需要这个Arrange

15:39.050 --> 15:40.050
也不用Arrange

15:40.050 --> 15:41.050
直接运行就完事了

15:41.050 --> 15:42.050
对吧

15:42.050 --> 15:43.050
直接运行就完事了

15:43.050 --> 15:45.050
FakeMode

15:45.050 --> 15:48.050
我这里也不需要去等待它

15:48.050 --> 15:49.050
好

15:49.050 --> 15:50.050
咱们来试一下

15:50.050 --> 15:54.320
现在我们往下走

15:54.320 --> 15:55.320
你看

15:55.320 --> 15:56.320
虽然运行

15:56.320 --> 15:57.320
但是突然之间

15:57.320 --> 15:58.320
我们来看

15:58.320 --> 15:59.320
现在达到底部一次了

15:59.320 --> 16:00.320
但是我们的数据

16:00.320 --> 16:01.320
已经有50个了

16:01.320 --> 16:02.320
为什么呢

16:02.320 --> 16:03.320
因为这个事件触发的太快了

16:03.320 --> 16:05.320
触发得非常非常快

16:05.320 --> 16:06.320
那么这个样子

16:06.320 --> 16:07.320
是不是导致它运行了很多次

16:07.320 --> 16:08.320
那怎么办呢

16:08.320 --> 16:10.320
我们再加个条件

16:10.320 --> 16:11.320
什么条件呢

16:11.320 --> 16:13.320
就是Range is loading

16:13.320 --> 16:15.320
不为q的时候

16:15.320 --> 16:16.320
或者说

16:16.320 --> 16:17.320
如果说

16:17.320 --> 16:19.320
Range is loading为q

16:19.320 --> 16:21.320
表示目前正在

16:21.320 --> 16:23.320
目前正在

16:23.320 --> 16:25.320
加载更多

16:25.320 --> 16:26.320
那么这样子呢

16:26.320 --> 16:28.320
我就不需要再重新去加载了

16:28.320 --> 16:30.320
Return就直接结束了

16:30.320 --> 16:31.320
判断一下

16:31.320 --> 16:32.320
那么这里呢

16:32.320 --> 16:34.320
我们去输出一下

16:34.320 --> 16:35.320
输出一下

16:35.320 --> 16:39.320
加载更多

16:39.320 --> 16:41.320
那么我就可以看到很清楚了

16:41.320 --> 16:42.320
刷新

16:42.320 --> 16:45.590
往下走

16:45.590 --> 16:46.590
往下走

16:46.590 --> 16:47.590
加载更多

16:48.590 --> 16:49.590
只运行了一次

16:49.590 --> 16:50.590
加载更多

16:50.590 --> 16:51.590
只运行了一次

16:51.590 --> 16:52.590
因为你后边

16:52.590 --> 16:53.590
这个事件虽然反复来运行

16:53.590 --> 16:55.590
但是我判断了这个东西

16:55.590 --> 16:58.590
就给它返回了

16:58.590 --> 16:59.590
正在加载的时候就返回了

16:59.590 --> 17:00.590
OK

17:00.590 --> 17:01.590
那么这个问题是不是就解决了

17:01.590 --> 17:02.590
就解决了

17:02.590 --> 17:03.590
这个评论列表

17:03.590 --> 17:05.590
这个问题

17:05.590 --> 17:07.590
加载更多的效果

17:07.590 --> 17:08.590
那么接下来还要做的

17:08.590 --> 17:09.590
第二件事

17:09.590 --> 17:10.590
就是一个回到顶部

17:10.590 --> 17:11.590
回到顶部

17:11.590 --> 17:12.590
我们做一个

17:12.590 --> 17:13.590
组建

17:13.590 --> 17:14.590
因为这是个通用组建

17:14.590 --> 17:15.590
我们建一个文件夹

17:15.590 --> 17:16.590
这叫做

17:16.590 --> 17:17.590
to top

17:18.590 --> 17:19.590
回到顶部

17:19.590 --> 17:20.590
回到顶部

17:20.590 --> 17:21.590
我们新建一个

17:21.590 --> 17:22.590
这个组建

17:22.590 --> 17:23.590
我就拿着去测试了

17:23.590 --> 17:24.590
直接来吧

17:24.590 --> 17:25.590
你原来去测试

17:25.590 --> 17:26.590
就去测试

17:26.590 --> 17:27.590
这里我们写

17:27.590 --> 17:28.590
上这么一个DV

17:28.590 --> 17:30.590
to top

17:31.590 --> 17:33.590
里边就一个

17:33.590 --> 17:34.590
top

17:34.590 --> 17:35.590
没啥东西

17:35.590 --> 17:37.590
这里没啥东西

17:38.590 --> 17:39.590
sculpt

17:40.590 --> 17:41.590
language

17:41.590 --> 17:42.590
less

17:42.590 --> 17:43.590
这个连脚笨都没有

17:43.590 --> 17:44.590
好像有点脚笨

17:44.590 --> 17:45.590
我们先写着做吧

17:45.590 --> 17:46.590
然后这里的

17:47.590 --> 17:48.590
导入

17:48.590 --> 17:49.590
import

17:50.590 --> 17:51.590
styles

17:51.590 --> 17:52.590
var

17:53.590 --> 17:54.590
我们把这个

17:54.590 --> 17:55.590
设置一下

17:56.590 --> 17:57.590
to top

17:57.590 --> 17:58.590
container

17:58.590 --> 17:59.590
给他设置一个背景颜色

18:00.590 --> 18:01.590
背景颜色的话

18:01.590 --> 18:02.590
我们用primary

18:03.590 --> 18:04.590
然后给他设置个宽高

18:04.590 --> 18:05.590
宽高的话

18:05.590 --> 18:06.590
5050

18:06.590 --> 18:07.590
一会调一下吧

18:07.590 --> 18:08.590
先设置个50

18:08.590 --> 18:09.590
一会再调

18:09.590 --> 18:10.590
border riders

18:10.590 --> 18:11.590
设置个圆形

18:11.590 --> 18:13.590
然后50%

18:13.590 --> 18:14.590
来 行

18:14.590 --> 18:15.590
我们把这个组件

18:15.590 --> 18:16.590
加到

18:17.590 --> 18:18.590
加到

18:19.590 --> 18:20.590
加到这

18:20.590 --> 18:21.590
app里边

18:21.590 --> 18:22.590
为什么

18:22.590 --> 18:23.590
为什么加到这呢

18:23.590 --> 18:24.590
因为我希望是任何

18:25.590 --> 18:26.590
任何地方

18:26.590 --> 18:27.590
就是

18:27.590 --> 18:29.590
任何地方都可能会

18:29.590 --> 18:30.590
都会出现这个

18:30.590 --> 18:31.590
这个组件

18:31.590 --> 18:32.590
就任何地方

18:32.590 --> 18:34.590
都有可能会出现这个组件

18:34.590 --> 18:36.590
只要我们的主区的滚动条

18:37.590 --> 18:39.590
到了一定位置过后

18:39.590 --> 18:41.590
我们都会有这个组件

18:41.590 --> 18:42.590
都会出现这个组件

18:42.590 --> 18:43.590
那么我们

18:43.590 --> 18:44.590
在app里边

18:44.590 --> 18:45.590
直接放到任何一个位置

18:45.590 --> 18:46.590
因为它毕竟是一个

18:46.590 --> 18:48.590
我把它弄成一个固定定位

18:48.590 --> 18:49.590
定位到这个位置

18:50.590 --> 18:51.590
好吧

18:51.590 --> 18:52.590
所以说我们这里倒入

18:54.590 --> 18:55.590
你看这个

18:55.590 --> 18:56.590
这个组件

18:56.590 --> 18:57.590
它就跟那个

18:57.590 --> 18:58.590
从结构上来说

18:58.590 --> 18:59.590
就跟我们刚才的博客组件

18:59.590 --> 19:00.590
也没有什么关系了

19:01.590 --> 19:02.590
我们polling

19:02.590 --> 19:03.590
组件

19:05.590 --> 19:07.590
那么我就直接在闹着了

19:07.590 --> 19:08.590
随便找个地方

19:08.590 --> 19:11.480
再印一下

19:11.480 --> 19:12.480
目前看不到

19:12.480 --> 19:13.480
因为目前的

19:13.480 --> 19:14.480
它被上面那个组件遮住了

19:14.480 --> 19:15.480
然后接下来

19:15.480 --> 19:16.480
那么就

19:16.480 --> 19:18.480
写一下这个twtab

19:18.480 --> 19:20.480
它的定位

19:20.480 --> 19:22.480
pracing

19:22.480 --> 19:26.180
我们就直接使用那个混合吧

19:26.180 --> 19:27.180
直接重新来吧

19:27.180 --> 19:29.180
pracing fixed

19:30.180 --> 19:32.180
给它一个zindex

19:32.180 --> 19:33.180
它

19:33.180 --> 19:34.180
它都

19:34.180 --> 19:35.180
应该

19:35.180 --> 19:36.180
99吧

19:36.180 --> 19:37.180
定一个99

19:38.180 --> 19:39.180
然后呢

19:39.180 --> 19:40.180
right

19:40.180 --> 19:42.180
25个相处

19:42.180 --> 19:43.180
button

19:43.180 --> 19:45.180
25个相处

19:45.180 --> 19:46.180
看一下

19:46.180 --> 19:47.180
也在这了

19:47.180 --> 19:48.180
对吧

19:48.180 --> 19:49.180
right

19:49.180 --> 19:50.180
再多一点吧

19:51.180 --> 19:52.180
你买个相处

19:54.180 --> 19:55.180
太多了

19:55.180 --> 19:56.180
50个相处吧

19:57.180 --> 19:58.180
这边有50个相处

20:00.180 --> 20:01.180
ok 在这

20:01.180 --> 20:02.180
差不多

20:02.180 --> 20:03.180
然后呢

20:03.180 --> 20:04.180
它设置一个cursor

20:04.180 --> 20:05.180
point

20:05.180 --> 20:06.180
文字局中

20:06.180 --> 20:07.180
not height

20:08.180 --> 20:10.180
50个相处

20:10.180 --> 20:11.180
50个相处

20:12.180 --> 20:13.180
再来

20:13.180 --> 20:14.180
字体颜色

20:14.180 --> 20:15.180
感色

20:15.180 --> 20:17.180
pxrline center

20:17.180 --> 20:20.680
差不多有这个意思了

20:20.680 --> 20:21.680
就这个东西

20:21.680 --> 20:23.680
它固定在这了

20:23.680 --> 20:24.680
那么它什么时候出现

20:24.680 --> 20:25.680
什么时候不出现呢

20:25.680 --> 20:27.680
是不是取决于这个

20:27.680 --> 20:28.680
主区域啊

20:28.680 --> 20:30.680
是不是取决于这个主区域

20:30.680 --> 20:31.680
那么来吧

20:32.680 --> 20:33.680
我们这里是不是要

20:33.680 --> 20:35.680
监听滚动事件

20:35.680 --> 20:36.680
对不对

20:36.680 --> 20:37.680
我们可以认为

20:37.680 --> 20:38.680
它一开始是不出现的

20:38.680 --> 20:39.680
我这里设置个data

20:39.680 --> 20:40.680
data

20:41.680 --> 20:42.680
show

20:43.680 --> 20:44.680
force

20:45.680 --> 20:46.680
那么我们这个

20:46.680 --> 20:47.680
有没有这个DIV

20:48.680 --> 20:49.680
我们就用一个vshow吧

20:49.680 --> 20:51.680
vshow取决于这个俗项

20:52.680 --> 20:53.680
它为force的时候

20:53.680 --> 20:54.680
它就不显示

20:54.680 --> 20:55.680
那什么时候显示呢

20:55.680 --> 20:57.680
显示的时间点

20:57.680 --> 20:58.680
取决于滚动场的位置

20:58.680 --> 20:59.680
是不是我们要

20:59.680 --> 21:00.680
监听主区的滚动

21:00.680 --> 21:01.680
好 那么我们这里

21:01.680 --> 21:02.680
created

21:05.310 --> 21:06.310
监听

21:06.310 --> 21:08.310
用this bus

21:09.310 --> 21:11.310
made scroll

21:12.310 --> 21:13.310
主区滚动的时候

21:13.310 --> 21:14.310
我用一个方法

21:14.310 --> 21:16.310
叫做handle scroll

21:16.310 --> 21:18.820
message

21:19.820 --> 21:21.820
handle scroll

21:21.820 --> 21:23.820
它会传一个动物元素进来

21:24.820 --> 21:25.820
这里也会

21:25.820 --> 21:26.820
我把它输出

21:26.820 --> 21:27.820
你会看到

21:27.820 --> 21:28.820
它也会运行

21:28.820 --> 21:29.820
就是我们的世界总监

21:29.820 --> 21:30.820
里面任何东西都可以监听

21:30.820 --> 21:31.820
刷新啊

21:31.820 --> 21:35.640
你看是不是也会运行

21:35.640 --> 21:36.640
那么监听

21:36.640 --> 21:37.640
它监听它的时候

21:37.640 --> 21:38.640
当然你不要忘记了

21:38.640 --> 21:39.640
取消监听

21:39.640 --> 21:40.640
刚才我都忘了取消监听

21:40.640 --> 21:41.640
对吧

21:41.640 --> 21:43.640
再不知道个comment里边

21:43.640 --> 21:44.640
忘了取消监听了

21:52.460 --> 21:56.350
这边呢

21:56.350 --> 21:58.350
就是off

21:59.350 --> 22:00.350
取消监听

22:00.350 --> 22:01.350
这里也不要忘记了

22:01.350 --> 22:02.350
取消监听

22:05.350 --> 22:07.350
但我这个主键好像也永远不会

22:07.350 --> 22:08.350
把它销毁掉

22:08.350 --> 22:09.350
因为它是在app里边

22:09.350 --> 22:10.350
app不销毁

22:10.350 --> 22:11.350
它就不会销毁

22:11.350 --> 22:13.350
app就始终要显示它的

22:13.350 --> 22:15.350
但是我们还是把它写上吧

22:15.350 --> 22:17.350
handle scroll

22:18.350 --> 22:19.350
那么现在我要做的事情

22:19.350 --> 22:21.350
就是当它滚动到一定位置的时候

22:21.350 --> 22:22.350
那什么位置呢

22:22.350 --> 22:23.350
你自行约定

22:23.350 --> 22:24.350
比方说滚动高度

22:24.350 --> 22:26.350
到达2300的时候

22:26.350 --> 22:28.350
或者是滚动高度

22:28.350 --> 22:29.350
到达一定值的时候

22:29.350 --> 22:30.350
比方到达

22:30.350 --> 22:32.350
1000到达500

22:32.350 --> 22:34.350
你自己规定一个值

22:34.350 --> 22:35.350
或者是那个值呢

22:35.350 --> 22:36.350
可以通过属性传进来

22:36.350 --> 22:37.350
都可以

22:37.350 --> 22:38.350
你自己去搞定

22:38.350 --> 22:39.350
到达一个值的时候

22:39.350 --> 22:41.350
我就希望它就出现

22:41.350 --> 22:42.350
因为我觉得手动去

22:42.350 --> 22:43.350
往上方就点麻烦了

22:43.350 --> 22:45.350
那怎么办呢

22:45.350 --> 22:46.350
我这里呢就

22:46.350 --> 22:47.350
判断一下的滚动高度

22:47.350 --> 22:48.350
也没达到达一个值

22:48.350 --> 22:51.350
如果说dom.scroll top

22:51.350 --> 22:53.350
小于了

22:53.350 --> 22:55.350
大于了

22:55.350 --> 22:57.350
大于等于了500

22:57.350 --> 22:58.350
比方说

22:58.350 --> 23:00.350
我就写个出现

23:00.350 --> 23:02.350
出现的时候呢

23:02.350 --> 23:03.350
其实我要做的事情也很简单

23:03.350 --> 23:04.350
我就难得写了

23:04.350 --> 23:05.350
出现的时候

23:05.350 --> 23:07.350
我就z.show

23:07.350 --> 23:08.350
否则的话

23:08.350 --> 23:09.350
我就把视为方式

23:09.350 --> 23:12.350
或者说我就这样子写

23:12.350 --> 23:13.350
这个show呢

23:13.350 --> 23:14.350
我就直接把它写成一个

23:14.350 --> 23:16.350
计算属性的了

23:16.350 --> 23:17.350
也不行

23:17.350 --> 23:18.350
这一个参数

23:18.350 --> 23:19.350
那我这里 else

23:19.350 --> 23:20.350
那就直接这样子写

23:20.350 --> 23:21.350
这是show

23:21.350 --> 23:22.350
等于dom.scroll top

23:22.350 --> 23:24.350
是不是大于等于500

23:24.350 --> 23:26.350
大于等于500就为出

23:26.350 --> 23:28.350
否则为forced

23:28.350 --> 23:29.350
来吧

23:29.350 --> 23:30.350
看一下

23:30.350 --> 23:31.350
一开始是forced

23:31.350 --> 23:32.350
对吧

23:32.350 --> 23:34.350
出现

23:34.350 --> 23:36.350
是不是就有了

23:36.350 --> 23:37.350
对吧

23:37.350 --> 23:38.350
就这么一个东西

23:38.350 --> 23:41.110
好

23:41.110 --> 23:42.110
那么现在呢

23:42.110 --> 23:43.110
我们还有一些问题

23:43.110 --> 23:44.110
不要那么滚动这儿了

23:44.110 --> 23:45.110
接下来我们看一下

23:45.110 --> 23:46.110
切换页面

23:46.110 --> 23:48.490
会不会有影响

23:49.490 --> 23:50.490
这个切换到

23:50.490 --> 23:52.490
就是这个主区一消失

23:52.490 --> 23:54.490
这是为什么还在呢

23:54.490 --> 23:55.490
都没有这个主区滚动了

23:55.490 --> 23:56.490
为什么呢

23:56.490 --> 23:57.490
这是因为

23:57.490 --> 23:58.490
你想一个逻辑

23:58.490 --> 24:01.490
我在blog detail里边

24:01.490 --> 24:03.490
在这里边

24:03.490 --> 24:04.490
在这里边的时候

24:04.490 --> 24:05.490
我们在滚动的时候

24:05.490 --> 24:06.490
不断的触发

24:06.490 --> 24:07.490
对吧

24:07.490 --> 24:08.490
然后触发到一定的点

24:08.490 --> 24:10.490
我们刚才在这里

24:10.490 --> 24:12.490
触发到一定的点的时候

24:12.490 --> 24:13.490
你看啊

24:13.490 --> 24:15.490
触发到一定的点的时候

24:15.490 --> 24:17.490
它这个出现

24:17.490 --> 24:22.890
等一下我们进文章想起

24:22.890 --> 24:24.890
触发到一定点的时候

24:24.890 --> 24:25.890
它出现消失

24:25.890 --> 24:27.890
不要说它现在出现了

24:27.890 --> 24:30.890
现在出现我切换页面的时候

24:30.890 --> 24:32.890
我有没有再次触发这个事件啊

24:32.890 --> 24:34.890
切换页面并不会触发这个事件

24:34.890 --> 24:36.890
对不对

24:36.890 --> 24:37.890
切换页面

24:37.890 --> 24:39.890
它不会触发这个事件

24:39.890 --> 24:40.890
因此又导致了

24:40.890 --> 24:43.890
我们点击首页的时候

24:43.890 --> 24:45.890
这个事件由于它没有发生

24:45.890 --> 24:48.890
它不知道这个主区一滚动条

24:48.890 --> 24:49.890
已经是零了

24:49.890 --> 24:53.890
那么于是它就还是在保持原来的状态

24:53.890 --> 24:54.890
那这个东西怎么办呢

24:54.890 --> 24:55.890
这个东西

24:55.890 --> 24:57.890
这个东西怎么办呢

24:57.890 --> 24:58.890
我们这个东西呢

24:58.890 --> 24:59.890
下节课来讲

24:59.890 --> 25:00.890
有一些新知识

25:00.890 --> 25:01.890
当然现在呢

25:01.890 --> 25:02.890
能不能零式处理呢

25:02.890 --> 25:03.890
可以零式处理

25:03.890 --> 25:04.890
非常简单的一个处理方式

25:04.890 --> 25:06.890
就是我把这个主键

25:06.890 --> 25:07.890
在Distort里边

25:07.890 --> 25:08.890
我先告诉他

25:08.890 --> 25:10.890
我那个主区呢

25:10.890 --> 25:12.890
已经是零了

25:12.890 --> 25:13.890
那我怎么去告诉他

25:13.890 --> 25:14.890
这个主区是零呢

25:14.890 --> 25:16.890
这里要传一个动物元素对吧

25:16.890 --> 25:17.890
这个动物元素

25:17.890 --> 25:18.890
在这里呢

25:18.890 --> 25:19.890
已经被销毁掉了

25:19.890 --> 25:20.890
动物元素已经没了

25:20.890 --> 25:21.890
那么我这里

25:21.890 --> 25:22.890
与其那样子写

25:22.890 --> 25:23.890
这个地方其实已经是

25:23.890 --> 25:24.890
安迪范的了啊

25:24.890 --> 25:25.890
那么我这里呢

25:25.890 --> 25:27.890
赶紧直接给他传一个安迪范的

25:27.890 --> 25:28.890
安迪范的

25:28.890 --> 25:29.890
或者不传

25:29.890 --> 25:30.890
不传就是安迪范的

25:30.890 --> 25:32.890
那么我们就约定啊

25:32.890 --> 25:33.890
我们在这里

25:33.890 --> 25:35.890
事件总线这里约定

25:35.890 --> 25:37.890
滚动动物元素

25:37.890 --> 25:40.890
如果是安迪范的

25:40.890 --> 25:42.890
则表示已经

25:42.890 --> 25:44.890
动物已经没了啊

25:44.890 --> 25:46.890
表示动物元素

25:46.890 --> 25:48.890
已经不存在了

25:48.890 --> 25:49.890
那么不存在呢

25:49.890 --> 25:51.890
我们就自然认为

25:51.890 --> 25:52.890
根本就没有必要

25:52.890 --> 25:53.890
那么这个逻辑表示

25:53.890 --> 25:54.890
动物元素不存在了

25:54.890 --> 25:55.890
就表示个逻辑

25:55.890 --> 25:56.890
好我们这个逻辑呢

25:56.890 --> 25:57.890
再

25:57.890 --> 25:58.890
我们回到这个

25:58.890 --> 25:59.890
blog comments里边

25:59.890 --> 26:00.890
动物

26:00.890 --> 26:01.890
动物已经不存在了的话

26:01.890 --> 26:02.890
那么这个滚动

26:02.890 --> 26:03.890
我们还处理什么滚动呢

26:03.890 --> 26:05.890
也不处理的啊

26:05.890 --> 26:06.890
就不处理这个滚动了

26:06.890 --> 26:07.890
所以说呢

26:07.890 --> 26:09.890
如果说这里的情况

26:09.890 --> 26:10.890
或者是ZS

26:10.890 --> 26:11.890
动物

26:11.890 --> 26:13.890
这个动物已经不存在了

26:13.890 --> 26:14.890
那么我们就不处理的

26:14.890 --> 26:15.890
这是评论这一块

26:15.890 --> 26:17.890
好

26:17.890 --> 26:18.890
toc不用管

26:18.890 --> 26:20.890
toc反正用不到多么的

26:20.890 --> 26:21.890
然后呢

26:21.890 --> 26:23.890
另外一个地方

26:23.890 --> 26:24.890
而toc其实这里

26:24.890 --> 26:25.890
也可以少处理一点

26:25.890 --> 26:26.890
对吧

26:26.890 --> 26:28.890
handle是那个字

26:28.890 --> 26:29.890
之前是在那里

26:29.890 --> 26:31.890
shade是那个字

26:31.890 --> 26:32.890
这个函数

26:32.890 --> 26:33.890
这个函数是这个函数

26:33.890 --> 26:34.890
shade是那个字

26:34.890 --> 26:35.890
那么这里呢

26:35.890 --> 26:36.890
我们其实也可以

26:36.890 --> 26:38.890
做同样的事情

26:38.890 --> 26:40.890
也可以做同样的事情

26:40.890 --> 26:41.890
这里

26:41.890 --> 26:43.890
我在这里也行

26:43.890 --> 26:44.890
shade

26:45.890 --> 26:49.840
在这

26:49.840 --> 26:53.540
这里的一个动物

26:53.540 --> 26:55.540
这里也用了名字

26:55.540 --> 26:56.540
叫做dome

26:56.540 --> 26:58.540
scrolldome吧

26:58.540 --> 27:00.540
这里也判断一下

27:00.540 --> 27:01.540
scrolldome

27:01.540 --> 27:02.540
之前没有考虑到

27:02.540 --> 27:03.540
这种情况

27:03.540 --> 27:04.540
现在我们把它考虑一下

27:04.540 --> 27:05.540
就说你如果说

27:05.540 --> 27:06.540
没有这个元素

27:06.540 --> 27:07.540
都没有了

27:07.540 --> 27:09.540
我就不做任何处理的

27:09.540 --> 27:10.540
这个组件是这样子

27:10.540 --> 27:11.540
comment这个组件

27:11.540 --> 27:13.540
也是这样子

27:13.540 --> 27:14.540
好

27:14.540 --> 27:15.540
然后我们现在回到

27:15.540 --> 27:17.850
totop这里

27:17.850 --> 27:19.850
这里如果说没有dome了

27:19.850 --> 27:20.850
那么这里的处理方式

27:20.850 --> 27:21.850
稍微有点变化

27:21.850 --> 27:22.850
就是把zs秀

27:22.850 --> 27:24.850
直接就set to force

27:24.850 --> 27:25.850
dome都没有了

27:25.850 --> 27:26.850
我肯定不显示

27:26.850 --> 27:28.850
有dome在说

27:28.850 --> 27:29.850
对吧

27:29.850 --> 27:30.850
所以说现在

27:30.850 --> 27:31.850
有到这种情况过后

27:31.850 --> 27:32.850
我们只需要

27:32.850 --> 27:33.850
触发dome的时候

27:33.850 --> 27:34.850
给它一个undefend

27:34.850 --> 27:35.850
就告诉那些

27:35.850 --> 27:36.850
事件监听者

27:36.850 --> 27:37.850
告诉你们

27:37.850 --> 27:38.850
我们现在dome已经没有了

27:38.850 --> 27:39.850
你们各自去处理

27:39.850 --> 27:40.850
那么这个地方

27:40.850 --> 27:41.850
totop的组件

27:41.850 --> 27:42.850
也说也dome没有了

27:42.850 --> 27:45.850
那我就不显示了

27:45.850 --> 27:47.850
我们要有滚动的区域

27:47.850 --> 27:48.850
我才显示

27:48.850 --> 27:49.850
连区域都没有了

27:49.850 --> 27:50.850
我就不显示了

27:50.850 --> 27:52.850
这个toc组件说

27:52.850 --> 27:53.850
那如果说你dome都没有了

27:53.850 --> 27:55.850
那我之前什么激活状态

27:55.850 --> 27:56.850
我也不管了

27:56.850 --> 27:57.850
我就什么都不做了

27:57.850 --> 27:59.850
这个评论组件

27:59.850 --> 28:00.850
什么加载更多的时候

28:00.850 --> 28:01.850
也是要监听

28:01.850 --> 28:02.850
有没有到底部

28:02.850 --> 28:03.850
dome都没有了

28:03.850 --> 28:04.850
那我就不需要去

28:04.850 --> 28:05.850
做任何监听了

28:05.850 --> 28:06.850
对吧

28:06.850 --> 28:07.850
就把这些东西处理好

28:07.850 --> 28:08.850
那么现在detail里边

28:08.850 --> 28:09.850
我要做的事情就是

28:09.850 --> 28:11.850
触发一下这个事件

28:11.850 --> 28:12.850
触发一个是

28:12.850 --> 28:14.850
这个事件就ok了

28:14.850 --> 28:17.850
我们来看一下吧

28:17.850 --> 28:18.850
刷新

28:18.850 --> 28:21.850
我们到文章这里

28:21.850 --> 28:26.160
点这个

28:26.160 --> 28:27.160
出现没问题吧

28:27.160 --> 28:29.160
现在我们回到首页

28:29.160 --> 28:30.160
是没了

28:30.160 --> 28:32.160
这里

28:32.160 --> 28:33.160
Connect to read the property

28:33.160 --> 28:34.160
remove

28:34.160 --> 28:36.160
even to listen to

28:36.160 --> 28:37.160
放计判的

28:37.160 --> 28:38.160
哦 这里

28:38.160 --> 28:39.160
Destroy的时候

28:39.160 --> 28:40.160
由于这个

28:40.160 --> 28:42.160
dome元素已经消失了

28:42.160 --> 28:43.160
dome元素已经消失了

28:43.160 --> 28:45.160
我这个时候再去

28:45.160 --> 28:47.160
取消监听他的screw时间了

28:47.160 --> 28:49.160
你找不到这个dome元素了

28:49.160 --> 28:50.160
有这么一个问题

28:50.160 --> 28:51.160
我已经找不到这个dome元素了

28:51.160 --> 28:52.160
那这个问题呢

28:52.160 --> 28:54.160
我就写before the story吧

28:54.160 --> 28:56.160
before the story

28:56.160 --> 28:58.160
这样子不就完了吗

28:58.160 --> 28:59.160
生命周期时间呢

28:59.160 --> 29:01.160
要领火应用

29:01.160 --> 29:02.160
再进去再看一下

29:02.160 --> 29:03.160
把这个问题先调通

29:03.160 --> 29:05.160
出现

29:05.160 --> 29:06.160
放页面

29:06.160 --> 29:07.160
所以消失了

29:07.160 --> 29:08.160
对吧

29:08.160 --> 29:09.160
那么这个页面

29:09.160 --> 29:10.160
如果说还有滚动条的话

29:10.160 --> 29:13.160
他又去监听滚动时间

29:13.160 --> 29:14.160
没问题吧

29:14.160 --> 29:16.160
就这个

29:16.160 --> 29:18.160
好 这是这一块

29:18.160 --> 29:19.160
然后还有一个问题

29:19.160 --> 29:20.160
就是点击

29:20.160 --> 29:22.160
哦 还有问题

29:22.160 --> 29:23.160
还多 慢慢来

29:23.160 --> 29:24.160
慢慢来

29:26.160 --> 29:28.160
还有个问题就是点击

29:28.160 --> 29:29.160
这边

29:29.160 --> 29:32.160
点击过后要回到顶部

29:32.160 --> 29:34.160
点击过后要回到顶部

29:34.160 --> 29:35.160
回到顶部的时候

29:35.160 --> 29:36.160
就设置他滚动高度为0

29:36.160 --> 29:37.160
就完了

29:37.160 --> 29:38.160
是设置个区域的滚动高度为0

29:38.160 --> 29:39.160
那么现在我们

29:39.160 --> 29:40.160
点击时间在哪呢

29:40.160 --> 29:41.160
在这个top里面

29:41.160 --> 29:42.160
是不是在这里

29:42.160 --> 29:43.160
应该就是个点击时间

29:43.160 --> 29:44.160
click

29:45.160 --> 29:46.160
handle

29:46.160 --> 29:47.160
你看这个问题有怎么解决

29:47.160 --> 29:48.160
handle click

29:48.160 --> 29:52.560
当我点击的时候

29:52.560 --> 29:54.560
我要回到顶部

29:54.560 --> 29:56.560
回到顶部

29:56.560 --> 29:58.560
回到哪个顶部啊

29:58.560 --> 30:00.560
是不是回到主区的顶部啊

30:00.560 --> 30:01.560
对不对

30:01.560 --> 30:03.560
那么主区是谁呢

30:03.560 --> 30:05.560
主区的动物元素在哪

30:05.560 --> 30:06.560
是不是在这

30:06.560 --> 30:08.560
那个blog detail

30:08.560 --> 30:09.560
detail

30:09.560 --> 30:10.560
主区在这里

30:10.560 --> 30:11.560
我在这个组建里面

30:11.560 --> 30:12.560
怎么让这个

30:12.560 --> 30:13.560
这个组建里面的动物元素

30:14.560 --> 30:15.560
有东西说

30:15.560 --> 30:16.560
那之前不是

30:16.560 --> 30:17.560
传那个动物进来吗

30:17.560 --> 30:18.560
你把个动物保存一下

30:18.560 --> 30:19.560
这样子也可以

30:19.560 --> 30:20.560
但是呢

30:20.560 --> 30:21.560
我不是很建议这样做

30:21.560 --> 30:22.560
你想做的话

30:22.560 --> 30:23.560
你就整乱了

30:23.560 --> 30:24.560
你在这个组建里面

30:24.560 --> 30:26.560
去修改了别的组建的元素

30:26.560 --> 30:27.560
最好不要这样去做

30:27.560 --> 30:28.560
那怎么办呢

30:28.560 --> 30:29.560
我就

30:29.560 --> 30:30.560
又用时间总线

30:30.560 --> 30:32.560
我在时间总线里面

30:32.560 --> 30:33.560
又来加一个

30:34.560 --> 30:35.560
再来一个时间

30:36.560 --> 30:37.560
时间名

30:39.560 --> 30:41.560
时间名呢就叫做set

30:41.560 --> 30:42.560
screw

30:43.560 --> 30:44.560
我希望呢

30:44.560 --> 30:45.560
要去设置一下

30:45.560 --> 30:47.560
主滚动条

30:47.560 --> 30:48.560
含义就是

30:51.560 --> 30:53.560
当需要设置

30:56.260 --> 30:57.260
当需要设置

30:57.260 --> 31:02.260
主区滚动条位置时触发

31:03.260 --> 31:04.260
那么有没有参数呢

31:04.260 --> 31:05.260
有一个参数就是滚动条的高度

31:06.260 --> 31:07.260
滚动高度

31:07.260 --> 31:09.260
你给我设置多少就是多少

31:09.260 --> 31:11.260
好那么这有这么一个时间

31:11.260 --> 31:12.260
好来吧

31:12.260 --> 31:13.260
我这里的回到顶部

31:13.260 --> 31:14.260
就触发这个时间

31:18.260 --> 31:19.260
触发一个时间

31:19.260 --> 31:20.260
什么时间呢

31:20.260 --> 31:22.260
时间的名字叫做set

31:22.260 --> 31:24.260
这都是自行约定的

31:24.260 --> 31:25.260
screw

31:25.260 --> 31:27.260
我希望的滚动高度是怎么

31:27.260 --> 31:29.260
是0去触发这个时间

31:29.260 --> 31:30.260
看有没有监听

31:30.260 --> 31:31.260
那谁去监听呢

31:31.260 --> 31:32.260
detail就可以去监听

31:32.260 --> 31:33.260
对吧

31:33.260 --> 31:34.260
detail我们之前

31:34.260 --> 31:35.260
监听了

31:35.260 --> 31:37.260
我们的credit里面去监听

31:38.260 --> 31:40.890
监听谁

31:45.890 --> 31:47.890
监听set mayscrew

31:47.890 --> 31:48.890
这个时间

31:49.890 --> 31:51.890
然后写个handle

31:52.890 --> 31:54.890
set mayscrew

31:54.890 --> 31:55.890
写这么一个方法

31:55.890 --> 31:56.890
那么同样的

31:56.890 --> 31:57.890
destroy的时候

31:57.890 --> 31:58.890
我会把移出监听

31:58.890 --> 31:59.890
我这里就放在这吧

32:04.520 --> 32:05.520
那么接下来

32:05.520 --> 32:06.520
我在message里边写个方法

32:07.520 --> 32:08.520
handle

32:09.520 --> 32:10.520
handle set mayscrew

32:10.520 --> 32:11.520
当这个事件触发的时候

32:11.520 --> 32:12.520
你会给我

32:12.520 --> 32:13.520
传一个滚动高度进来

32:13.520 --> 32:15.520
那么我只要做的事情

32:15.520 --> 32:17.520
无非就是refs

32:17.520 --> 32:18.520
makecontainer

32:18.520 --> 32:20.520
然后呢去

32:20.520 --> 32:21.520
搜查的screwtop

32:22.520 --> 32:23.520
vscrewtop

32:23.520 --> 32:27.370
没问题吧

32:28.370 --> 32:29.370
好来吧

32:29.370 --> 32:30.370
我来试一下

32:30.370 --> 32:32.370
现在到这点击

32:33.370 --> 32:34.370
点击没反应

32:34.370 --> 32:36.370
那我们这里输出一下

32:36.370 --> 32:37.370
screwtop

32:37.370 --> 32:41.320
这个方法没进来是吧

32:42.320 --> 32:43.320
set mayscrew

32:43.320 --> 32:45.320
handle set mayscrew

32:45.320 --> 32:46.320
这边是注册

32:46.320 --> 32:47.320
好像是没什么问题

32:47.320 --> 32:48.320
然后我们到这边来吧

32:48.320 --> 32:49.320
这个点击时间里边

32:49.320 --> 32:50.320
看一下这里

32:53.340 --> 32:54.340
这里没输出啊

32:55.340 --> 32:56.340
点击

32:56.340 --> 32:57.340
这里有输出

32:57.340 --> 32:58.340
有输出的话

32:58.340 --> 33:00.340
在事件总线里边去

33:00.340 --> 33:01.340
触发这个事件

33:01.340 --> 33:02.340
叫set mayscrew

33:02.340 --> 33:04.340
触发这个事件

33:04.340 --> 33:07.340
然后在detail里边去监听了

33:07.340 --> 33:10.340
detail在这里监听了set mayscrew

33:11.340 --> 33:13.340
然后监听了过后

33:13.340 --> 33:15.340
它会运行这个方法

33:15.340 --> 33:16.340
这个方法

33:16.340 --> 33:17.340
但是它点击过后呢

33:17.340 --> 33:18.340
触发了

33:18.340 --> 33:19.340
没有运行

33:23.180 --> 33:24.180
点击过后没有运行

33:24.180 --> 33:25.180
这怎么回事

33:31.820 --> 33:34.820
当它触发这个事件的时候

33:34.820 --> 33:36.820
我去运行这个方法

33:37.820 --> 33:38.820
没问题啊

33:38.820 --> 33:42.510
没有问题啊

33:42.510 --> 33:44.510
然后再看一下这边啊

33:44.510 --> 33:46.510
点击的时候

33:46.510 --> 33:47.510
buzz

33:47.510 --> 33:48.510
amid

33:49.510 --> 33:51.510
set mayscrew

33:51.510 --> 33:53.510
触发这个事件

33:53.510 --> 33:56.460
0

33:58.840 --> 34:01.840
detail里边去监听这个事件

34:01.840 --> 34:04.340
刷新一下

34:07.490 --> 34:09.490
应该是刷新没刷新的原因

34:09.490 --> 34:10.490
因为没刷新这个主键

34:10.490 --> 34:12.490
这个cretive没重新运行

34:12.490 --> 34:13.490
你看是不是可以了

34:13.490 --> 34:14.490
对吧

34:14.490 --> 34:16.490
那么就可以回到顶部了

34:17.490 --> 34:18.490
你看

34:19.490 --> 34:20.490
整个过程啊

34:20.490 --> 34:21.490
你看这边

34:21.490 --> 34:22.490
这边是根据这边的滚动条

34:22.490 --> 34:23.490
滚动条滚动

34:23.490 --> 34:24.490
触发

34:24.490 --> 34:25.490
事件总线里面的事件

34:25.490 --> 34:26.490
这边在监听

34:26.490 --> 34:27.490
重新设置激活样式

34:27.490 --> 34:28.490
然后这个地方

34:28.490 --> 34:29.490
又出发一个新的事件

34:29.490 --> 34:30.490
总线里面的事件

34:30.490 --> 34:31.490
这边又在监听

34:31.490 --> 34:32.490
它回到顶部

34:32.490 --> 34:33.490
一回到顶部滚动条变化

34:33.490 --> 34:34.490
这边也会跟着变化

34:34.490 --> 34:36.490
因为这边一直在监听滚动条的变化

34:36.490 --> 34:37.490
你看

34:37.490 --> 34:38.490
你看这个逻辑

34:42.930 --> 34:43.930
刷新一次

34:43.930 --> 34:44.930
为什么他要刷新呢

34:44.930 --> 34:50.500
好

34:50.500 --> 34:51.500
那么就没问题了对吧

34:51.500 --> 34:52.500
好

34:52.500 --> 34:53.500
现在我们文章详情页

34:53.500 --> 34:54.500
这里是做好了

34:54.500 --> 34:55.500
但是我们再仔细看一下

34:55.500 --> 34:56.500
这个文章页呢

34:56.500 --> 34:58.500
文章页不也有滚动条吗

34:58.500 --> 35:00.500
不也希望显示个to top吗

35:00.500 --> 35:01.500
那怎么办

35:01.500 --> 35:02.500
那很简单啊

35:02.500 --> 35:03.500
这个文章

35:03.500 --> 35:05.500
文章页的话

35:05.500 --> 35:07.500
滚到文章页啊

35:07.500 --> 35:08.500
在这

35:08.500 --> 35:09.500
那么文章页

35:09.500 --> 35:10.500
我们也去触发那个事件

35:10.500 --> 35:11.500
总线就行了

35:11.500 --> 35:12.500
行了吧

35:12.500 --> 35:13.500
对不对

35:13.500 --> 35:14.500
文章页呢

35:14.500 --> 35:15.500
我们显示的是block list

35:15.500 --> 35:17.500
是不是显示在这

35:17.500 --> 35:19.500
这个玩意儿是不是在滚动

35:19.500 --> 35:20.500
你看吧

35:20.500 --> 35:21.500
我们样式里边

35:21.500 --> 35:27.200
这个玩意儿是在滚动

35:27.200 --> 35:29.200
那么我们在这个主线里面

35:29.200 --> 35:30.200
也去

35:30.200 --> 35:31.200
实现总线的好处

35:31.200 --> 35:32.200
它是个

35:32.200 --> 35:33.200
实现总线的好处

35:33.200 --> 35:34.200
就在于可以跨越

35:34.200 --> 35:35.200
但是呢

35:35.200 --> 35:36.200
我也去

35:36.200 --> 35:38.200
监听那个滚动条

35:38.200 --> 35:39.200
抗天的

35:39.200 --> 35:40.200
来吧

35:41.200 --> 35:42.200
一样的道理

35:42.200 --> 35:44.200
我们在mountain里边

35:44.200 --> 35:48.830
做同样的事情

35:48.830 --> 35:52.660
把个代码复制过来吧

35:52.660 --> 35:54.660
把这些代码直接复制过来

35:54.660 --> 35:55.660
这些代码其实可以

35:55.660 --> 36:01.140
放到mountain里面也行

36:01.140 --> 36:03.140
把这个代码能够来

36:03.140 --> 36:04.140
当我

36:04.140 --> 36:05.140
加到完了过后

36:05.140 --> 36:07.140
我去监听这个

36:07.140 --> 36:09.140
因为我有可能会回到顶部

36:09.140 --> 36:10.140
那么我在这里

36:10.140 --> 36:11.140
handle

36:11.140 --> 36:12.140
set

36:12.140 --> 36:13.140
me

36:13.140 --> 36:14.140
scroll

36:14.140 --> 36:15.140
然后我这边

36:15.140 --> 36:16.140
这个抗天的

36:16.140 --> 36:19.140
我也写了同样的Riv

36:19.140 --> 36:21.140
一样的

36:21.140 --> 36:22.140
我这边

36:22.140 --> 36:23.140
也是要

36:23.140 --> 36:25.140
监听这个滚动条的变化

36:25.140 --> 36:26.140
滚动条变化的时候

36:26.140 --> 36:27.140
我去

36:27.140 --> 36:29.140
事件里边去触发

36:29.140 --> 36:30.140
相应的事件

36:30.140 --> 36:31.140
都是一样的

36:31.140 --> 36:32.140
然后我们这边

36:32.140 --> 36:34.140
就挨在这儿写

36:34.140 --> 36:36.140
美色字里边

36:36.140 --> 36:37.140
把这两个拿过来

36:37.140 --> 36:43.340
美色字

36:43.340 --> 36:44.340
把这两个拿过来

36:44.340 --> 36:45.340
还有什么呢

36:45.340 --> 36:47.340
还有就是在这边

36:47.340 --> 36:48.340
又来

36:48.340 --> 36:50.340
在b4d作业的时候

36:50.340 --> 36:51.340
也是一样的

36:51.340 --> 36:54.220
那么其实这个玩意

36:54.220 --> 36:56.220
你还可以去写一些混合

36:56.220 --> 36:57.220
对不对

36:57.220 --> 36:58.220
你还可以去写个混合

36:58.220 --> 37:00.220
混合去搞定这个事情

37:00.220 --> 37:02.220
因为这个代码有重复

37:02.220 --> 37:04.220
amaz

37:04.220 --> 37:05.220
b4d作业

37:05.220 --> 37:06.220
也是一样

37:06.220 --> 37:07.220
然后这边

37:07.220 --> 37:08.220
mecontainer

37:08.220 --> 37:09.220
我看一下

37:09.220 --> 37:10.220
检查一下

37:10.220 --> 37:11.220
也没问题

37:11.220 --> 37:13.220
取消这个时间

37:13.220 --> 37:14.220
也没问题

37:14.220 --> 37:16.220
好了就写完了

37:16.220 --> 37:18.220
你看这个区

37:18.220 --> 37:19.220
是不是也是可以

37:19.220 --> 37:21.220
看一下有没有爆出

37:21.220 --> 37:23.220
没爆出

37:23.220 --> 37:24.220
再来

37:24.220 --> 37:30.320
应该是没有刷新

37:30.320 --> 37:32.320
回到顶部

37:32.320 --> 37:33.320
是不是没问题

37:33.320 --> 37:34.320
回到顶部

37:34.320 --> 37:37.760
然后点进去

37:37.760 --> 37:38.760
回到顶部

37:38.760 --> 37:39.760
好

37:39.760 --> 37:40.760
那么这就可以到这儿了

37:40.760 --> 37:41.760
但是文章

37:41.760 --> 37:42.760
整个文章板块

37:42.760 --> 37:43.760
这一块

37:43.760 --> 37:45.760
还有一些代码的需要优化

37:45.760 --> 37:46.760
还有就是

37:46.760 --> 37:48.760
还有一个小的效果

37:48.760 --> 37:50.760
就是这个图片懒家赛的问题

37:50.760 --> 37:52.760
这图片

37:52.760 --> 37:53.760
这又怎么

37:53.760 --> 37:55.760
这个图片懒家赛的问题

37:55.760 --> 37:57.760
我们之后再慢慢来说

