WEBVTT

00:00.180 --> 00:04.260
好了 咱们目前的准备工作啊 总算结束了

00:05.100 --> 00:10.980
咱们已经有了一些基础的五佑概念一些知识 现在呢接下来我们就是不断的去

00:11.940 --> 00:16.260
做项目了 一边做项目呢 一边去学习五佑的一些新知识啊

00:17.500 --> 00:23.300
啊 做项目的时候呢 首先遇到了第一个问题就是创建工程 要把工程再搭起来

00:23.900 --> 00:28.660
那能不能像之前那个工程那样的打法呢 你看上节课咱们做主建不是搭了一个工程吗

00:29.380 --> 00:34.020
这是搞笑的啊 这只是呢帮助大家认识一下怎么去分模块

00:35.460 --> 00:40.820
我们真实的开发里边肯定不是用这种方式来搭工程的 因为这种方式搭工程的话会有很多的问题

00:41.300 --> 00:45.300
什么兼容性问题啊 对吧 代码写起来 如果说模块分得太多

00:46.020 --> 00:48.020
就会导致浏览器发出的请求太多

00:48.980 --> 00:55.700
还有什么css的兼容性 还有什么css的预编意气 一大堆问题不好解决

00:56.580 --> 01:00.580
最根结底呢 就是我们希望叔叔服服的写代码

01:01.060 --> 01:07.140
但是我们叔叔服服写的代码呢 在运行环境呢 不是很好 有可能有这样那样的问题 比方说兼容性

01:08.500 --> 01:13.780
那么怎么办呢 回忆一下我们学过的 学过的技术 什么东西可以解决这个问题

01:14.660 --> 01:20.100
就是开发阶段的东西 跟运行环境的东西 他有可能有差异

01:20.580 --> 01:24.260
有什么东西在解决 是不是用构建工具啊

01:24.820 --> 01:28.180
vipack不就干这个事吗 所以说呢 我们将来在公司里面

01:28.820 --> 01:35.220
写5u的代码 包括后边里面学什么其他的react的代码 都是这样子 我们需要用构建工具

01:36.180 --> 01:42.340
那么我们构建工具学过什么vipack 对吧 因为vipack能不能去搭我们的工程呢 当然是可以的啊 没有任何问题

01:42.740 --> 01:48.820
不过呢 vipack呢 打起来的也挺麻烦的 要安装很多的插件啊 要安装很多的loader

01:49.300 --> 01:52.180
对不对 还要去写很多的配置 才把这个工程打好

01:52.900 --> 02:00.260
于是呢 5u官方非常贴心的为我们想到了这一点 他又给你做了一个教授架工具

02:01.380 --> 02:06.100
啊 就是用一个命令就可以非常轻松的把工程搭起来

02:06.660 --> 02:11.140
这个教授架工具呢 就是5u克力 这是他的官方网站 可以看一下啊

02:13.380 --> 02:20.020
这个教授工具我们首先要安装啊 在指南里边点击安装啊 从周门客开始啊 大家要逐步的去学会

02:20.660 --> 02:23.700
阅读官方稳当了 像我们课程中呢 有些地方

02:24.660 --> 02:32.900
比较偏的一些知识 用的很少的知识 而且呢 比较简单 我就会给大家一个官方稳当的链接 可以有兴趣的话 可以自己去看一下

02:33.380 --> 02:37.220
啊 不能永远的依靠老师 不然的话 后边你的发展是受限的

02:37.940 --> 02:40.820
好 点击安装很简单 对吧 他就告诉你怎么去安装

02:41.460 --> 02:44.500
全局安装一个库 叫做5u

02:45.380 --> 02:47.860
那么全局安装就完事了 为什么要全局安装呢

02:48.580 --> 02:57.060
你想想为什么 肯定是给你提供了一个全局的命令呗 对不对 那么这里去全局安装 因为我这边已经安装了啊 所以说不用再安装了

02:57.700 --> 03:02.980
安装好了过后呢 其实你就会获得一个命令 叫做5u这个命令 那么这里的一个version

03:04.100 --> 03:12.100
可以看一下 我这边的是4.5.8啊 你那边是多少无所谓 反正就安装最新满球玩事了 如果说你要升级的话 下面有升级的方式 你自己去看

03:13.380 --> 03:17.300
那么这个工具是用来干嘛的呢 其实就是用来帮你搭建工程的

03:18.020 --> 03:20.100
好 怎么来搭建呢 我们来看一下怎么来搭建

03:21.700 --> 03:24.580
比方说我们在这个这个目录啊 点击右键

03:25.380 --> 03:31.220
呃 中端中打开 因为我这边呢是调了一下啊 调到外部中端中打开了啊 里面里面那边总之

03:31.860 --> 03:37.780
在中端里边 命令行里边进入这个目录就完事了 接下来我们使用命令啊 view create

03:38.420 --> 03:42.420
创建一个工程 工程后边写个名字 工程名字my site

03:42.980 --> 03:45.300
我的网站 我的空间 好 回车

03:46.500 --> 03:55.860
这里面呢 会给你提示一个导航啊 帮助你一步一步的去完成这个工程 实际上的这个唯有可立啊 他本质上呢 就是在内部内置的一个

03:55.860 --> 03:56.340
vpeg

03:57.620 --> 04:02.180
也就是说 你用他去搭建工程 其实本质上就相当于是因为拍位拍给搭建

04:02.660 --> 04:09.940
只不过呢 他帮你安装好了什么很多的vpeg的插件啊 夹载器啊 而且帮你完成了配置 你不用去手写vpeg的配置了

04:10.500 --> 04:13.380
当然呢 如果说你要写的话 也有办法的啊 我们将来会说

04:15.140 --> 04:18.820
给你写好了 开箱即用 马上就可以把工程搭建出来 马上就可以运行

04:19.460 --> 04:23.860
马上就可以写代码 就这么方便 他给你比方说他给你加了很多的

04:24.420 --> 04:29.940
呃 插件啊 和夹载器 比方包括什么bable对吧 解决机也是代码兼容性的

04:30.820 --> 04:38.100
然后呢 加了什么呢 为拍个device二 开发服务器的 加了es linx啊 这些都是可选的啊 你要要用的话就可以安装起来

04:38.260 --> 04:48.020
那么这个玩意是呃 他自带的 就是不用你选择 他自动安装的 呃 还有poser ccs 还有ness对吧 还有sass都可以加上去了 根据需要进行选择

04:48.260 --> 04:52.260
那么这里一个导航啊 就在问你 你这个工程里边需要哪些东西

04:52.900 --> 04:59.220
啊 他有两个默认的配置 一个是关于5u2的默认配置 一个是5u3的默认配置 还有呢还可以手动选择

04:59.700 --> 05:05.060
好 我们来手动选择一下 手动选择里边呢 他第一个就是选择5u的版本

05:05.780 --> 05:08.900
主要是5u2和5u3 5u1呢 还不不涉及的啊

05:09.540 --> 05:15.540
背部要不要加背部呢 就是解决节时间单码的兼容性呢 那肯定要加上ts呢 有些同学学过 有些同学没学过

05:16.100 --> 05:19.940
啊 你要加的话就加上 但是我不建议大家加 因为5u2的对ts的兼

05:20.260 --> 05:20.900
ts的

05:21.460 --> 05:21.780
呃

05:23.540 --> 05:28.180
一难对ts的支持啊 是比较差的啊 不建议大家pwa不用管

05:28.580 --> 05:31.780
router vs呢 是我们后边要学习的啊 就暂时的不加

05:32.500 --> 05:37.460
啊sys的预编一期加不加呢 给他加上吧 按空格进行选择啊 空格选择

05:38.260 --> 05:42.980
呃 然后呢 令尘呢 令尘呢 我不想讲 说好说真不想讲 因为这个东西呢 可能

05:43.780 --> 05:50.260
会打乱我们的讲课节奏 讲了讲了写的这些代码 突然有一个令尘啊 抱错我要去改啊 麻烦了很 算了我不加了吧

05:50.420 --> 05:55.220
你们要加也可以啊 反正这个令尘我是讲过的 后面是两个单元测试啊 我们不加

05:55.860 --> 05:56.820
好了 就加了这些

05:57.780 --> 06:04.100
当然也不说这些东西必须要一开始就选择好 一开始没有选择的东西呢 我们后边可以给他加上都没问题

06:04.420 --> 06:04.980
好 回车

06:05.940 --> 06:08.500
那么他问你选择5u的版本 刚才我们不是选了

06:09.220 --> 06:14.500
呃 让我们选择5u版本吧 对吧 那么他就这个时候就问你 要不要选5u2还是选5u3

06:14.980 --> 06:18.020
那么我们选5u2吧 这个previo什么意思呢 就是预览版

06:18.180 --> 06:21.780
v5u3那目前在我讲课这个时间点呢 还没有

06:22.500 --> 06:27.940
呃 真正落地啊 虽然他是正式版的 但是还没有真正落地 所以他是加了一个预览版

06:28.260 --> 06:29.780
好 这里呢 我们选5u2

06:30.660 --> 06:35.940
接下来问你预编预期 你刚才不是选了css预编预期吗 你要用什么样的预编预期啊

06:36.660 --> 06:39.060
sars还是ness还是standards

06:39.300 --> 06:44.420
standards呢 大家没学过啊 没关系 我们一般呢说用sarsness够了 我们比较说选ness吧

06:45.380 --> 06:52.020
然后问你 像什么bable啊es linux啊 这些配置啊 因为我没有选es linux 那么像bable啊这些配置

06:52.420 --> 06:56.980
是把这些配置呢 保存到单独的配置文件 还是放到这个paxi.json里面

06:57.620 --> 07:02.420
所以学过的 对吧 两个地方都可以 那看里边 我就选单独的配置文件呗 好 回车

07:02.900 --> 07:10.500
那么他问你 前边这些导航啊 这些选择 选择要不要把它记录下来 将来的当前工程的时候呢 就不用重新选择

07:11.220 --> 07:17.780
就可以用这一次选择的一些预设 对吧 把选择好 那么你要选 也要把保存下来就可以

07:18.500 --> 07:22.420
一不保存了也可以 我不保存了嘛 那么接下来就是搭建工程了

07:22.980 --> 07:27.060
他就会在当前目录下面呢 建立一个文念甲 你看呗 就这个文念甲

07:27.620 --> 07:32.260
然后呢 这个文念甲里面生存一些工程结构 并且安装好遗难 全部给你做好

07:32.660 --> 07:38.340
接下来要做的事情就是搭建好了过后 直接运行 一边写代吗 一边看效果就完事了

07:38.980 --> 07:45.620
开开新新的写代吧 剩下的事情呢 交给勾件农具帮你打包就完事了啊 本质上的里边就是用的是Webhack

07:45.940 --> 07:49.540
你看现在马上就好了啊 速度稍微有点慢

07:50.500 --> 07:56.100
这就看网速了好了好了 进去过后呢 你会看到啊 这里边实际上是有geat的

07:56.980 --> 08:00.980
他可以安装好的geat 那么这边呢 我们其实不需要他的geat 因为

08:01.700 --> 08:02.340
我这边呢

08:03.140 --> 08:10.580
本身整个工程就geat 所以说我这里呢 进入这个目录啊 麦赛这个目录 把geat给他删掉 里面那边也可以复杀 看里面

08:11.540 --> 08:15.780
geat 把这个geat都隐藏文念甲给他删掉 好 那么他就没有geat了

08:17.060 --> 08:22.580
接下来我来看一下这个工程啊 其实这个工程就是一个典型的webhack的结构 对吧 public目录里边放啥

08:23.140 --> 08:25.460
不就是放我们那个页面吧 对吧 页面模板

08:25.860 --> 08:30.420
这就是页面模板 生存的ges然后会注入到这个模板里面去 对吧 没什么好说的

08:30.740 --> 08:34.980
这个玩意呢 我们可以把删掉啊 因为我们以后会改的 就是个图标 网站图标给他删掉

08:36.020 --> 08:41.620
呃 下面的这些东西没有什么好说的吧 有啥好说的呢 哪个文件需要说 没有 没有任何文件需要说的啊

08:42.260 --> 08:46.660
接下来我们看一下拍点节省 里边是用的是五六五六这个版本对吧 二这个版本

08:47.620 --> 08:55.140
好 然后给你提供了两个命令 一个是开发阶段的命令 一个是打包的命令 我们首先看一下打包命令吧 npm装

08:55.860 --> 09:01.460
那么他就是运行打包 打包完了过后就跟那个我也派个打包是一样的

09:02.340 --> 09:06.260
打包到哪呢 打不到电视这个目录 你看什么电视这个目录

09:06.900 --> 09:12.420
电视目录里边有css 有emg 有ges 对吧 就是一个普普通通的最传统的工程

09:12.740 --> 09:16.420
对吧 这个npm是根据谁生存的 根据这个public目录生存的

09:17.220 --> 09:21.780
public里边的东西 他会原分不动的放到电视目录 放到打包结果里边去

09:22.100 --> 09:26.980
对吧ges 那就里边就包在ges里边就包含了五六ges 还包含了你自己写的带吧

09:27.540 --> 09:35.460
对吧 就是非常非常简单的一个打包 那么我现在可以其实都可以运行了啊 把这个电视目录如果说放到这个vscode里边去的话

09:37.540 --> 09:39.860
open with live server 你看呀

09:40.660 --> 09:47.220
这就运行出来了 对吧 就是他默认的工程里边搭建出来的一个网站啊 非常简单 就是个介绍 为了介绍

09:47.860 --> 09:53.090
好 我们再重新打开我们刚才的一个啊 回到这边来

09:54.530 --> 10:03.970
那么刚才我们看到了打包命令 但是每一次如果说每一次开发都是写一段代码 然后打包 然后再运行 太麻烦了啊 谁说我们在开发阶段呢 一般会搭建一个开发服务器

10:04.370 --> 10:11.250
这些网员我们以前的讲位拍个的时候都是详细讲过的啊 不用再重复的去说了 我们因此呢 我们这里呢应该是用npm

10:11.730 --> 10:16.370
so 就是凭数们开发阶段的一般使用这个命令 他会帮我们搭建一个开发服务器

10:17.090 --> 10:19.650
啊 这个服务器的端口呢是默认是8080

10:20.450 --> 10:30.770
你看一下吧 大家开发服务器 大家的服务器有个好处在 因为你这个代码可以随便改啊 改了过后呢 他们马上就热更新了啊 里边是内置的热更新的这么一个功能

10:31.890 --> 10:38.930
好了 这就是我们的工程 大家好了过后我们来看一下我们的重要的目录就是src 就是我们的代码目录

10:39.330 --> 10:44.850
代码目录里边展开里边有个妹一点解释看到没 这就是我们的启动文件啊

10:46.050 --> 10:48.770
入口文件 就是我们的入口文件

10:50.370 --> 10:55.890
好 这个文件里边写了什么代码呢 其实大家可能代码是非常非常属性的 比方说这个导入为用

10:56.690 --> 10:59.570
我们之前在组建里边上一个结合的是导入为用怎么导入的

11:00.530 --> 11:04.050
对比一下 是不是导出这个汤前目录下来为用点解释 对吧

11:04.530 --> 11:10.450
导入这个为用点解释 那么现在不是的啊 现在是他是第三方库是放了什么漏的码就是目录下面的

11:10.930 --> 11:15.330
最终打包的时候会生成了打包结果 你要那意思吧 所以说这导自用这种方式来导入为用

11:16.050 --> 11:17.970
呃 会交给未判的进行打包

11:18.690 --> 11:21.650
那么我们只需要关心这里 可以开开新鲜的解答法就ok了

11:22.210 --> 11:25.650
然后这个部分呢 我们一会再说啊 这个这个东西呢 可以把删掉了

11:26.050 --> 11:31.330
这个玩意是给一些在控制台里边给一些关键提示的啊 特别是一些开发阶段

11:32.050 --> 11:35.970
就在生产环境里边不应该有的东西或者是写的不好的地方会给的一些

11:36.770 --> 11:40.130
提示 那么这个提示的其实对我们来说是无所谓的啊 你可以把删掉

11:40.610 --> 11:43.490
没用 其实在无忧删里面他就把这个玩意给他删掉了啊

11:44.050 --> 11:47.890
这东西可以删掉 接下来我再继续看啊 这个代码认识吧

11:48.610 --> 11:51.170
什么商界盒就写过这个代码 啊 因此呢

11:51.730 --> 11:52.690
商界盒的东西啊

11:53.410 --> 11:56.610
美结盒的东西啊 一定要把他去写一遍 不然的话一点印象都没有

11:57.410 --> 11:59.570
好 那么这个东西是不是见过的 没什么好说的

11:59.970 --> 12:03.730
好 那接下来就看这个玩意了 这是我们的组件 对不对 商界盒写过的

12:04.130 --> 12:10.050
就是我们的根组件 我们希望呢 只有这个文件啊 没有解释了 只需要负责一件事 就是启动无忧

12:11.010 --> 12:15.250
启动无忧干嘛呢 渲染一个组件 剩下的都是东西全部交给这个组件了

12:15.730 --> 12:17.330
这个组件要渲染出所有的东西

12:17.970 --> 12:22.450
那么在我们的这个FU Client这个角色价工具搭建的工程里边

12:23.090 --> 12:27.650
组件表现形式呢 是一个单独的文件 其实也就是一个模块

12:28.610 --> 12:36.210
它的后维名为DWU 没见过吧 以前只见过DWU的吧

12:36.450 --> 12:39.010
那么这个玩意是啥呢 我进到这个文件去看一下

12:39.410 --> 12:42.770
APP.WU 有点奇怪 对吧 这个显化有点奇怪

12:44.050 --> 12:48.210
其实呢 你仔细观察一下 你都能够看清楚这里面写的视察

12:49.490 --> 12:54.050
这一部分写的视察啊 你觉得他写的是啥 是不是就写的是模板呀

12:54.850 --> 13:02.050
对不对Template写的就是模板 那我们对比一下啊 我们对比一下上级科的这个组件里边这个APP.GS

13:03.010 --> 13:05.810
APP.WU 来我们对比一下这个对比

13:08.420 --> 13:10.900
这是我们上级科写的 那这里是不是写的模板

13:11.380 --> 13:14.420
这里写的是不是模板 对吧 那我把这个东西复制过来呗

13:15.700 --> 13:20.500
看了没 这就是模板 好 这一部分呢 你看这一部分写的是啥呀

13:20.980 --> 13:24.420
这一部分写的是不是导GS代码导出了一个配置

13:25.060 --> 13:26.900
对吧 是不是导出了一个配置

13:27.540 --> 13:31.380
只要这个配置里面你不需要再去写Template的配置了 不需要了

13:31.540 --> 13:34.500
因为模板是单独写到这了 是吧 把这东西分开了呀

13:35.060 --> 13:38.420
那么这边 这个代码不用自己寄看啊 因为它导入了另外一个组件

13:38.980 --> 13:40.660
好 这下面呢 是不是写的样式

13:41.060 --> 13:42.500
哎 就是我们是不是上级科说的

13:43.060 --> 13:47.220
我们把页面上分成很多个小的区域不同的区域 这些区域是可以附用的

13:47.460 --> 13:48.820
每个区域呢 就是一个组件

13:49.300 --> 13:51.300
一个组件里面包含什么模板

13:52.900 --> 13:53.380
功能

13:54.020 --> 13:54.580
GS代码

13:55.300 --> 13:56.260
和样式

13:56.820 --> 14:00.420
我们上级科说当时是没法做样式的 没法集成样式的

14:00.900 --> 14:03.700
我们需要用构建工具 用脚授架来集成

14:04.100 --> 14:04.820
现在是不是可以的

14:05.700 --> 14:10.260
其实整个这个文件叫做啥呀 在微用里边一个专用名词 叫做SFC

14:11.060 --> 14:13.540
single file component

14:14.580 --> 14:15.860
单文件组件

14:16.180 --> 14:20.820
一个组件就是一个文件 一个文件里边集成了这个组件 需要的所有东西

14:21.300 --> 14:22.260
高度的聚合

14:23.140 --> 14:25.780
有模板 它要展示什么内容 有样式

14:26.980 --> 14:29.780
有它的功能 对吧 在配置里边有各种它的功能

14:30.580 --> 14:31.140
原理是吧

14:31.860 --> 14:32.660
就是SFC

14:33.380 --> 14:35.620
templates表示组件代码 模板代码

14:36.180 --> 14:37.380
组件配置 组件样式

14:39.140 --> 14:41.380
好 这个模板没有什么好说的 又是把模板写到这

14:41.780 --> 14:44.100
这样子写的有个什么好处呢 一是有智能提示

14:44.660 --> 14:47.380
而是呢有代码着色 比这边好看多了

14:48.020 --> 14:48.340
对吧

14:48.740 --> 14:52.180
好 我们写个简单的 简单的一个东西啊 就是写一个这么一个东西

14:52.740 --> 14:53.300
APP主件

14:54.340 --> 14:57.940
好 这个代码呢就是导出一个对象 一个对象是不是就是5u的

14:58.420 --> 14:59.460
组件的配置对象

14:59.700 --> 15:02.420
那么如果说你没有什么配置的话 你这个这个这个

15:02.660 --> 15:03.460
扩都可以不要

15:04.420 --> 15:07.300
那么这个玩意呢 就是组件的样式 如果说没有什么样式的话

15:07.620 --> 15:08.660
这一扩是可以不要的

15:09.380 --> 15:12.580
那你看一下 我们现在是不是写出了一个非常非常简单的组件

15:12.820 --> 15:13.860
这个组件里边除了

15:14.420 --> 15:15.300
模板啥都没有

15:16.740 --> 15:19.060
好 然后呢媒介阶势启动的时候 是不是运行这个

15:20.340 --> 15:23.300
找到这个组件 把渲染出来 对吧 这两个目录我们暂时不需要

15:23.620 --> 15:24.260
把它删除掉

15:25.220 --> 15:26.980
这样子写出一个非常干净的

15:27.540 --> 15:28.180
5u工程

15:28.580 --> 15:29.700
好 接下来我们来看一下页面

15:30.180 --> 15:30.980
就变成这样子了

15:31.300 --> 15:32.180
没有任何问题吧

15:33.140 --> 15:34.180
好 这是这一块啊

15:37.060 --> 15:44.180
然后呢 我们其实可以看到浏览器呢 我们的crown浏览器里边有个地方亮了 就这个地方

15:45.380 --> 15:46.500
啊 这个玩意是什么呢

15:46.820 --> 15:47.620
给大家说一下啊

15:47.860 --> 15:49.620
这个玩意叫view dev tools

15:50.020 --> 15:52.500
就是我们5u的调试工具啊 在

15:52.740 --> 15:55.460
谷歌浏览器里边的一个扩展 一个调试工具

15:55.700 --> 15:57.540
这个调试工具呢 需要大家去安装一下

15:58.100 --> 16:01.780
因为这个安装的可能需要科学上网啊 点这个

16:02.660 --> 16:06.800
找到这个扩展程序

16:09.420 --> 16:13.820
这边展开啊 下面一个在crown网上应用上应用店里面去打开

16:15.980 --> 16:18.780
因为这个打开的话需要科学上网 这边去搜索一下

16:19.180 --> 16:22.220
dev.view dev tools

16:23.180 --> 16:24.380
这我们后面会用到的啊

16:26.480 --> 16:27.120
说一下啊

16:27.840 --> 16:33.920
那么第一个呢 这个beta版本呢 先不着急啊 因为它是5u3的 现在还在beta阶段

16:34.240 --> 16:37.920
针对5u3来出现的 那么再点下点这个 就是人比较多的

16:39.040 --> 16:41.120
评论一个就是点新号人比较多的

16:41.920 --> 16:42.480
点进去

16:43.120 --> 16:44.880
这里从安装一下就完事了

16:45.200 --> 16:47.040
啊 如果说你不能科学上网的话

16:47.680 --> 16:51.760
这个东西呢 只能去百度一下想想办法啊 百度里边有别人应用好的

16:52.000 --> 16:55.360
你去百度一下啊 就是叫名字叫做view dev tools

16:56.320 --> 16:57.280
啊 去把安装到

16:58.720 --> 16:59.920
浏览器扩展里边去

17:00.320 --> 17:03.040
安装到扩展里边去有一个什么好处呢 点击右键检查

17:03.680 --> 17:04.960
你可以看到 这边呢

17:08.880 --> 17:10.880
这边呢 我们会多了一个选项 就是5u

17:12.910 --> 17:13.790
可以在这边调试

17:14.190 --> 17:17.390
那么这里边有很多的功能啊 其中一个功能就是我们看组建结构

17:17.950 --> 17:20.190
入彩 入彩表什么意思呢 就是一个5u实力

17:20.990 --> 17:22.510
就这个东西 入彩就是这个东西

17:23.070 --> 17:24.190
6u5u创建的东西

17:24.750 --> 17:27.390
那么这才是我们的根组建啊 爱可这个是我们的根组建

17:27.710 --> 17:28.670
对吧 炫耀了这个组建

17:29.150 --> 17:30.430
对吧 它是它的组建结构

17:30.750 --> 17:33.310
看到没 这边是我们的真实的元素结构

17:33.310 --> 17:35.390
这边是我们的组建结构 可以看到非常清楚

17:35.950 --> 17:37.150
就这么一个东西啊

17:37.710 --> 17:38.590
好 这是

17:39.630 --> 17:40.350
它的组建结构

17:40.830 --> 17:43.550
好 我们接下来继续来认识这个单纹键组建

17:43.790 --> 17:45.070
我们来尝试着去

17:45.950 --> 17:46.670
做一些处理

17:46.990 --> 17:48.510
比方说我们这里可以开

17:48.670 --> 17:51.390
这个我们是我整个网站都是用这个组建炫耳出来的对吧

17:52.110 --> 17:55.550
我们现在在这在这里边呢 去选择别的一个组建吧

17:55.550 --> 17:59.150
比方说我们在src的目录下面呢 去新建一个文件夹

17:59.150 --> 17:59.870
component

18:01.150 --> 18:03.310
这边放的是什么呢 这里边放的是一些

18:04.430 --> 18:07.630
具有附用的性的通用的组建

18:08.430 --> 18:10.750
比方说我们的整个我们要开发这个网站

18:12.350 --> 18:13.550
个人空间这个网站

18:14.750 --> 18:16.910
那么这个网站里边有很多的组建组成

18:16.910 --> 18:19.150
比方说我们这一块去开发其中一个组建

18:19.150 --> 18:20.750
非常非常简单的一个组建

18:21.070 --> 18:23.470
我们一边重新练习一下组建开发

18:23.470 --> 18:26.510
一边再我们熟悉一下这个无诱可历搭建的工程

18:27.310 --> 18:29.310
首先我们来运行一下我们的

18:29.950 --> 18:31.630
暗地就是贯穿项目

18:31.630 --> 18:33.790
你看一下贯穿项目里边就是一个mysize

18:34.510 --> 18:36.510
是不是也就是无诱可历搭建的工程啊

18:36.670 --> 18:38.190
对不对 我们找了这个文件夹啊

18:38.190 --> 18:39.950
点击右键 外部中当中打开

18:41.710 --> 18:44.190
我们这里用同样的方式NPN装设

18:45.070 --> 18:45.870
去运行一下

18:51.310 --> 18:52.910
运行出来了 这里是8081了

18:52.910 --> 18:54.910
因为刚才的8080已经被我们占用了

18:55.390 --> 18:57.390
所以这边是8081了 打开

18:58.030 --> 19:01.550
好 这是我们的整个个人空间最终的效果

19:02.110 --> 19:03.150
我顺便说一下

19:03.710 --> 19:04.990
这个里边有很多代码

19:05.630 --> 19:06.350
很多代码

19:06.350 --> 19:08.110
这一代码呢 我不建议大家去阅读

19:08.110 --> 19:09.390
第一个呢 我没有写出试

19:09.710 --> 19:10.830
我做的比较充满

19:10.830 --> 19:13.310
我只是赶快的把这个效果做出来好讲课

19:13.870 --> 19:15.550
所以说大家跟着我的思路

19:15.550 --> 19:17.390
跟着我的节奏一步一步去做

19:17.390 --> 19:18.750
不用去看这些代码

19:18.750 --> 19:20.110
你要去看的话反正就看不懂

19:20.750 --> 19:21.710
好 这是这一块

19:23.470 --> 19:25.150
打开过后来我们看一下这个工程

19:25.230 --> 19:26.750
我们现在这里和做什么组件呢

19:27.390 --> 19:29.150
做一个非常非常小的组件

19:29.710 --> 19:30.430
做这么一个组件

19:31.150 --> 19:31.870
头像组件

19:33.550 --> 19:35.230
我们给它取个名字叫做

19:36.110 --> 19:36.590
Vata

19:37.310 --> 19:38.110
就头像的意思

19:39.310 --> 19:41.950
所有代码需要写到这个src目录下面去

19:42.430 --> 19:43.070
点击右键

19:43.630 --> 19:45.550
当这个文件夹的名字是可以随便命名

19:45.550 --> 19:48.030
只是我们习惯上把一些公共的组件放到这儿

19:48.750 --> 19:50.510
点击右键创建一个文件

19:50.510 --> 19:52.110
叫做Vata

19:52.110 --> 19:53.790
注意组件的名字 文件名

19:54.430 --> 19:54.990
规范

19:54.990 --> 19:56.510
不过说必须要这样的写

19:56.510 --> 19:59.710
这是规范的尽量把使用大妥封密迷法

20:00.190 --> 20:01.150
表示它是一个组件

20:01.150 --> 20:02.110
后绝名为Viu

20:02.510 --> 20:03.950
那么这是一个头像组件

20:04.670 --> 20:07.630
好 头像组件里边是不是也得有什么模板

20:08.190 --> 20:08.910
有介石

20:09.310 --> 20:09.870
还有什么呢

20:10.350 --> 20:10.910
还有那个

20:12.510 --> 20:14.430
有介石 有模板 还有样式

20:14.430 --> 20:14.830
对吧

20:15.470 --> 20:16.590
那么我们可以怎么写

20:16.590 --> 20:18.030
是不是可以写一个template

20:19.070 --> 20:19.710
这是模板

20:21.390 --> 20:23.630
顺序不一不邀请要使用这样的顺序

20:24.510 --> 20:26.030
不是说必须要这样的顺序来写

20:26.030 --> 20:26.670
不是的

20:26.670 --> 20:28.750
你可以先写模板再写这个脚本

20:28.750 --> 20:30.190
都是一样 对它来说都是一样

20:30.190 --> 20:31.070
结构都一样

20:31.070 --> 20:31.790
还有style

20:32.510 --> 20:33.070
样式

20:33.710 --> 20:35.550
一个组件里边东西高度聚合

20:35.550 --> 20:37.390
模板 脚本 样式

20:37.390 --> 20:39.150
那么有的是这样的写写比较麻烦

20:39.150 --> 20:42.990
所以说推荐大家安装一个vscode的插件

20:44.510 --> 20:46.430
有些东西可能写到这个文件过后了

20:46.430 --> 20:48.990
这个vscode都不能识别这个文件

20:48.990 --> 20:50.750
你可以去安装一个vscode的插件

20:51.390 --> 20:52.590
叫做Vata

20:53.790 --> 20:54.830
这是官方出的插件

20:55.550 --> 20:56.670
就是这种些安装

20:56.670 --> 21:00.110
安装了过后可能会让你重新启动vscode

21:00.110 --> 21:02.030
安装过后这个文件就能识别了

21:02.910 --> 21:04.350
然后接下来我们在这里边

21:04.910 --> 21:06.910
可以用一些非常简单的短语

21:06.910 --> 21:07.790
可以快速的生成

21:07.790 --> 21:08.990
比方说我们这里写个default

21:10.270 --> 21:10.750
default

21:10.750 --> 21:11.230
default

21:11.230 --> 21:12.350
其实它已经出现了

21:12.350 --> 21:12.910
就第一个

21:14.270 --> 21:14.670
回车

21:16.270 --> 21:17.150
default

21:17.150 --> 21:17.950
回车

21:17.950 --> 21:19.710
你看看是不是自动帮你生成了

21:19.710 --> 21:20.590
这么一种结构了

21:21.230 --> 21:22.110
好 接下来我们来写

21:22.830 --> 21:25.070
这个投降组件的模板应该是什么呢

21:25.790 --> 21:26.270
应该是什么呢

21:26.270 --> 21:27.710
其实就是一个emigre元素

21:27.710 --> 21:27.950
对吧

21:27.950 --> 21:29.630
我们这是一个非常简单的组件

21:30.110 --> 21:31.070
就是一个emigre元素

21:33.230 --> 21:34.110
好 那么我们来看一下

21:34.110 --> 21:35.630
这个东西是不是通用的呢

21:35.630 --> 21:36.910
我们在首页里边你看到

21:36.910 --> 21:38.510
这个地方是有一个头像

21:38.510 --> 21:40.590
然后呢这边留言板里边

21:43.020 --> 21:44.540
你看这个地方是不是也有头像

21:45.180 --> 21:47.580
还有就是文章的详情评论

21:47.580 --> 21:48.780
因为文章是有评论的

21:49.820 --> 21:50.700
去边找一篇文章

21:53.230 --> 21:53.950
到最下面吧

21:54.910 --> 21:56.190
点这个 点评论

21:57.070 --> 21:58.750
好 这边是不是也有头像

21:58.750 --> 22:00.670
说这个头像这个组件是通用的

22:00.670 --> 22:02.350
它其实就是一个emigre元素

22:02.350 --> 22:06.350
只不过呢图片的地址是不是不一样的

22:06.990 --> 22:07.150
对吧

22:07.150 --> 22:08.030
有些图片是这个样子

22:08.030 --> 22:08.990
有些图片是这个样子

22:08.990 --> 22:09.790
地址不一定

22:10.190 --> 22:11.230
好 那么也就是说

22:11.230 --> 22:12.750
在这个组件内部啊

22:12.750 --> 22:15.550
它这个src地址填啥

22:15.550 --> 22:16.350
是不是我不知道啊

22:17.070 --> 22:17.950
那不知道要干嘛

22:17.950 --> 22:19.390
是不是让别人传给我

22:19.390 --> 22:20.510
传给我应该是啥呀

22:22.030 --> 22:23.310
回忆一下我们上帝科学的东西

22:24.030 --> 22:25.230
传给我是不是属性

22:25.790 --> 22:26.190
对不对

22:26.190 --> 22:28.030
好 因素的我们在这里写上一个probs

22:28.750 --> 22:30.270
表示呢这是我们的组件

22:30.270 --> 22:31.470
有一些属性

22:31.470 --> 22:32.430
属性怎么写呢

22:32.430 --> 22:34.350
我们可以写上一个src

22:35.150 --> 22:35.470
对吧

22:35.470 --> 22:36.110
是不是可以写上

22:36.110 --> 22:37.710
或者是写上一个属性的名字

22:37.710 --> 22:38.030
叫做

22:39.390 --> 22:40.590
Url吧

22:40.590 --> 22:41.630
就是图片的路径

22:43.230 --> 22:44.350
好 这样的写写不写呢

22:44.350 --> 22:45.230
当然没问题

22:45.230 --> 22:45.950
那么这样子呢

22:45.950 --> 22:48.190
我们可以把src绑定为什么呢

22:48.190 --> 22:49.230
绑定为Url

22:49.230 --> 22:50.590
你看是不是有代码着色

22:50.590 --> 22:52.670
他知道这一块是介石代码

22:52.670 --> 22:53.310
他会提示你

22:54.430 --> 22:56.830
好了 那么这就是写到一个

22:56.830 --> 22:58.350
非常简单的这么一个组件

22:58.350 --> 23:00.190
当然还没写完啊不着急

23:00.190 --> 23:01.470
接下来我们在app里面

23:01.470 --> 23:02.670
我们去使用这个组件啊

23:02.670 --> 23:03.310
看怎么能使用

23:05.870 --> 23:07.070
我们这里导入什么呢

23:08.350 --> 23:08.830
input

23:10.110 --> 23:11.550
导入ovata

23:12.510 --> 23:13.630
实际上哪个地方呢

23:13.630 --> 23:15.790
是不是当前目录下的component

23:15.790 --> 23:16.670
上面的ovata

23:18.430 --> 23:19.230
这样导入对吧

23:19.230 --> 23:20.350
可以不用写后维啊

23:20.350 --> 23:21.070
底部又是个

23:21.070 --> 23:23.070
它是可以识别的

23:23.550 --> 23:24.590
如果不写后维的话

23:24.590 --> 23:25.630
它会默认记得找

23:25.630 --> 23:26.910
找点介石没有的话

23:26.910 --> 23:27.870
去找点不用

23:27.870 --> 23:28.750
它会自动去找

23:29.310 --> 23:30.110
好 那么找了

23:30.110 --> 23:30.990
就这样子写了过后

23:30.990 --> 23:31.790
导入这个组件

23:31.790 --> 23:32.750
接下来我们是不是要在

23:32.750 --> 23:33.550
这个组件里面注册

23:34.670 --> 23:35.790
app这个组件里面呢

23:35.790 --> 23:36.750
我们要注册一个组件啊

23:36.750 --> 23:37.550
叫做ovata

23:39.630 --> 23:40.350
app组件

23:40.350 --> 23:41.470
那么接下来app组件里面

23:41.470 --> 23:42.590
除了有自己的东西之外

23:42.590 --> 23:43.230
我们还

23:43.230 --> 23:44.510
我们去测试一下这个组件啊

23:44.510 --> 23:45.550
还有一个ovata组件

23:47.230 --> 23:48.270
ovata这么一个组件

23:48.990 --> 23:50.670
这个组件里面不是有个属性吗

23:50.670 --> 23:52.430
叫做Url

23:52.430 --> 23:52.910
对不对

23:52.910 --> 23:53.470
你看啊

23:53.550 --> 23:54.990
是不是有个属性叫Url

23:54.990 --> 23:56.270
Url这个属性呢

23:56.270 --> 23:57.870
我需要给它传递一个路径

23:58.750 --> 24:00.590
比方说我们随便找一个图片路径吧

24:00.590 --> 24:02.030
往上随便找一个图片路径

24:02.910 --> 24:03.790
就这个玩意吧

24:03.790 --> 24:04.430
就这个玩意

24:04.430 --> 24:05.070
复制一下

24:05.070 --> 24:05.950
复制图片地址

24:06.430 --> 24:07.870
好 这边我们把路径传给它

24:08.510 --> 24:09.470
好 传开它过后呢

24:09.470 --> 24:10.270
我们来看一下

24:10.270 --> 24:12.430
app组件里面能不能渲染出这个组件

24:14.110 --> 24:15.310
大家说算了出来了

24:15.310 --> 24:16.350
对吧 就是一个图片

24:16.350 --> 24:17.310
现在说组件呢

24:17.310 --> 24:18.510
你看无忧这个结构里面

24:19.470 --> 24:20.190
是不是一个ovata

24:20.750 --> 24:21.310
对不对

24:21.310 --> 24:22.030
渲染出来了

24:22.990 --> 24:23.630
没问题吧

24:24.190 --> 24:25.470
就这一块吧

24:26.590 --> 24:28.750
前面为什么这个名字变成这样子了呢

24:30.110 --> 24:31.470
这个是个非常小的细节

24:32.830 --> 24:33.630
是因为在这边

24:33.630 --> 24:35.150
没点些是启动的时候呢

24:35.150 --> 24:38.350
因为我这里不是用驻车组件的方式

24:38.350 --> 24:38.670
对吧

24:38.670 --> 24:40.510
所以这个组件它不知道名字是啥

24:41.230 --> 24:42.270
那么如果说你

24:42.270 --> 24:44.030
像这种不知道组件名字是啥

24:44.030 --> 24:45.630
你又要让它显示出来名字的话

24:45.630 --> 24:47.950
你可以给这个组件加一个lame组绣

24:47.950 --> 24:49.710
给这个组件取个名字

24:49.710 --> 24:50.350
这个什么意思呢

24:50.510 --> 24:51.790
就是如果说组件

24:52.350 --> 24:58.510
如果组件没有在注册的时候指定名字

24:58.510 --> 24:59.790
或者是因为某种原因

24:59.790 --> 25:00.670
它不需要注册

25:00.670 --> 25:02.110
你看这个地方是不需要注册

25:02.110 --> 25:02.990
直接确定出来的

25:03.870 --> 25:05.390
那么就使用

25:05.390 --> 25:06.270
则使用该名字

25:07.310 --> 25:08.590
这东西没有什么用

25:08.590 --> 25:09.710
就这么一点点用

25:09.710 --> 25:10.430
要说app

25:11.310 --> 25:12.190
好 那么你看一下

25:12.190 --> 25:13.550
现在说app组件了

25:13.550 --> 25:14.190
就这么个意思

25:15.230 --> 25:16.190
好 这是它组件结构

25:16.190 --> 25:16.510
等一下呢

25:16.510 --> 25:18.430
我们先慢慢去优化这个组件

25:18.910 --> 25:19.630
一点点来

25:20.190 --> 25:22.030
首先这个组件会有一些新知识

25:22.590 --> 25:24.110
首先这个组件它有个属性

25:24.110 --> 25:25.070
叫url

25:25.070 --> 25:26.510
但是我使用的时候

25:28.670 --> 25:31.070
那万一我这个url传的地方

25:31.070 --> 25:32.030
传的东西不对

25:32.030 --> 25:32.990
比方说我要传

25:32.990 --> 25:34.830
我传的是一个数字怎么办呢

25:35.310 --> 25:36.910
它必须要是一个url地址

25:36.910 --> 25:37.950
必须要是一个字无串

25:39.390 --> 25:40.910
那我传的是数字怎么办呢

25:41.470 --> 25:42.110
那怎么来传

25:42.110 --> 25:42.830
首先第一个问题

25:42.830 --> 25:43.710
怎么传数字

25:43.710 --> 25:44.590
你能不能这样子写

25:45.870 --> 25:47.150
这样子传的是不是数字

25:48.270 --> 25:49.390
还是一个字无串

25:49.870 --> 25:50.350
一个组件

25:50.350 --> 25:51.310
属性名字

25:51.310 --> 25:52.910
属性的值还是个字无串

25:52.910 --> 25:54.350
然后怎么来传递一个数字呢

25:54.350 --> 25:55.550
你要用这种方式写

25:56.510 --> 25:57.070
啥意思

25:57.790 --> 25:59.070
这种方式写的过后

25:59.630 --> 26:00.350
这就不是

26:00.350 --> 26:02.110
这就不是字无串的双引号了

26:02.750 --> 26:03.790
这里面写的是什么

26:03.790 --> 26:05.070
借是表达式

26:05.950 --> 26:06.430
看到没

26:07.070 --> 26:08.030
借是表达式

26:08.030 --> 26:08.910
这个借是表达式

26:08.910 --> 26:09.550
是不是个数字

26:10.270 --> 26:11.470
是一个字面量的数字

26:12.030 --> 26:12.190
对吧

26:12.190 --> 26:13.470
要这样的传递数字

26:15.070 --> 26:16.110
如果说你要用这种方式

26:16.110 --> 26:17.070
传递字无串怎么写呢

26:17.070 --> 26:18.670
你就可以里面写个单引号

26:18.910 --> 26:19.790
这叫一个字无串

26:19.790 --> 26:20.670
你看代码着色

26:21.390 --> 26:22.510
这里边是借也是代码

26:23.070 --> 26:23.630
看到没

26:23.630 --> 26:25.470
那如果说我要传一个数字行不行呢

26:25.470 --> 26:26.990
你看它也是可以的

26:26.990 --> 26:28.430
这个图片就显示不出来

26:28.430 --> 26:28.910
但是呢

26:28.910 --> 26:29.870
逻辑上来说

26:29.870 --> 26:31.550
这个玩意能不能允许传数字

26:32.110 --> 26:33.150
肯定是不允许的

26:34.110 --> 26:34.430
对吧

26:35.150 --> 26:35.950
这是第一个问题

26:35.950 --> 26:36.110
对吧

26:36.110 --> 26:37.710
它的类型呢没有约束

26:38.430 --> 26:38.910
第二个问题

26:38.910 --> 26:40.750
它就如果说我忘了传递怎么办

26:41.550 --> 26:42.990
它也不会提示我这个地方

26:42.990 --> 26:43.710
需要传递

26:43.710 --> 26:44.270
你看

26:44.270 --> 26:45.230
它没有任何提示

26:46.350 --> 26:47.390
那怎么办呢

26:47.870 --> 26:48.430
不用了

26:48.430 --> 26:49.390
非常贴心的

26:49.390 --> 26:51.390
为我们考虑的到了到了这一点

26:51.390 --> 26:52.590
就是说你属性呢

26:52.590 --> 26:54.110
你可以用这种方式来声明

26:54.110 --> 26:56.030
我们这里就顺便打开我们的四维导图

26:57.630 --> 26:58.590
属性的时候

26:58.590 --> 26:59.150
属性呢

26:59.150 --> 27:00.590
当时配置的属性的时候啊

27:01.870 --> 27:02.430
它可以升

27:02.990 --> 27:04.350
这个probs的配置呢

27:04.350 --> 27:05.630
它可以有多种形式啊

27:06.750 --> 27:07.790
多种形式

27:09.630 --> 27:10.510
它可以有什么

27:10.510 --> 27:11.950
有数组的方式

27:11.950 --> 27:12.750
数组的方式呢

27:12.750 --> 27:14.030
就是我们这种这种解法

27:14.030 --> 27:14.350
对吧

27:14.350 --> 27:15.790
数组里面每一项

27:15.790 --> 27:17.070
就是属性的名字

27:17.150 --> 27:18.830
有哪些属性需要传递

27:18.830 --> 27:19.870
还有一种方式呢

27:19.870 --> 27:20.750
是对象式的

27:21.710 --> 27:22.510
对象式的里面

27:22.510 --> 27:24.270
以后在公司里面可能用了更多一点

27:24.990 --> 27:26.110
对象式的是怎么写呢

27:26.110 --> 27:27.070
就是把这个probs呢

27:27.070 --> 27:27.630
写成个对象

27:30.880 --> 27:32.560
对象里面每一个属性名

27:32.560 --> 27:33.520
就是属性的名字

27:33.520 --> 27:34.320
比方说我一个属性

27:34.320 --> 27:35.600
叫做UIL也需要传递

27:36.720 --> 27:37.680
那么这里边又走

27:37.680 --> 27:38.560
后边又怎么写呢

27:39.120 --> 27:39.840
后边就可以写上

27:39.840 --> 27:40.880
这个属性的类型

27:41.440 --> 27:41.840
Stream

27:42.960 --> 27:43.280
你看

27:43.920 --> 27:45.040
这表示什么意思

27:45.040 --> 27:45.680
表示的是

27:46.480 --> 27:47.920
UIL属性

27:48.000 --> 27:50.320
必须是一个制服传

27:51.440 --> 27:52.640
必须是一个制服传

27:52.640 --> 27:53.680
也就是这个东西叫做什么呢

27:53.680 --> 27:55.280
叫做属性的约束

27:55.920 --> 27:57.840
你可以在UIL的官方网站里边

27:57.840 --> 27:58.800
可以看到这么一个东西

27:59.360 --> 28:00.880
可以看到它有个详细的文档

28:00.880 --> 28:02.720
告诉你属性有哪些约束可以写

28:03.920 --> 28:04.800
在probs

28:07.730 --> 28:08.530
probs验证

28:08.530 --> 28:09.890
把个地址给它复制一下

28:13.250 --> 28:15.090
对象它可以写属性约束的

28:15.890 --> 28:16.610
你可以去看一下

28:17.650 --> 28:19.970
这里边有很多很多种约束的方式

28:19.970 --> 28:20.930
各种各样的验证

28:21.090 --> 28:21.970
还可以制定验证

28:22.770 --> 28:24.050
那么我们这里只需要我们说

28:24.050 --> 28:24.770
我们要用到的

28:25.170 --> 28:26.050
那么这样子就约束

28:26.050 --> 28:27.730
它必须是一个制服传的

28:27.730 --> 28:29.330
如果说你刚才传的是一个什么呢

28:29.330 --> 28:30.690
比方说我刚才传一个数字

28:30.690 --> 28:31.250
UIL

28:31.250 --> 28:31.970
比较复制为一

28:32.770 --> 28:33.170
保存

28:33.170 --> 28:33.570
你看一下

28:34.130 --> 28:34.450
这边

28:35.170 --> 28:36.050
这边报了一个是吧

28:36.050 --> 28:36.370
警告

28:37.330 --> 28:37.810
对吧

28:37.810 --> 28:39.170
view war警告

28:39.170 --> 28:40.850
它说无效的属性

28:40.850 --> 28:42.050
invaded problem

28:42.050 --> 28:43.490
顺便要能够看懂

28:43.490 --> 28:45.250
这些错误提示和警告提示

28:45.810 --> 28:47.890
它说类型检查失败

28:47.890 --> 28:48.930
tapcheck failed

28:49.890 --> 28:51.010
针对谁就检查失败了

28:51.010 --> 28:52.930
针对属性UIL也会检查失败

28:53.730 --> 28:54.770
is expected

28:55.410 --> 28:57.170
期待的是一个字不错的词君

28:57.170 --> 28:57.730
但是呢

28:59.170 --> 29:00.370
得到的是一个number

29:00.930 --> 29:01.650
v61

29:02.770 --> 29:03.490
明白我的意思吗

29:03.970 --> 29:05.090
是不是就对你提示了

29:05.090 --> 29:06.370
这样子你看到这个提示

29:06.370 --> 29:07.410
是不是马上就明白了

29:07.410 --> 29:08.610
它写的非常详细的

29:08.610 --> 29:10.770
哦这个地方它需要的是一个字不错

29:10.770 --> 29:12.210
但是我给它传的是一个数字

29:13.010 --> 29:13.650
懂我的意思吗

29:13.650 --> 29:14.850
好那么我们重新把一个

29:15.170 --> 29:15.970
传的一下

29:15.970 --> 29:16.850
复制图片地址

29:17.810 --> 29:18.450
那么现在呢

29:18.450 --> 29:19.570
我们用这种方式来传递

29:20.130 --> 29:20.850
保存过去

29:22.130 --> 29:23.010
接下来我们到这边

29:23.010 --> 29:23.570
哎你看

29:23.890 --> 29:24.290
放心

29:24.930 --> 29:25.810
是不是就没有错误了

29:26.370 --> 29:27.810
OK这是关于这一块

29:29.090 --> 29:29.650
再来

29:29.650 --> 29:31.490
那如果说我忘了传递怎么办呢

29:31.490 --> 29:32.610
像有像主线里面

29:32.610 --> 29:33.970
某些属性是必须要传递的

29:33.970 --> 29:34.370
对吧

29:34.370 --> 29:36.210
一个头像怎么能没有地址呢

29:36.210 --> 29:37.330
比方说有这么一个情况

29:38.850 --> 29:41.010
那我忘了传递说也没有报错

29:41.010 --> 29:41.890
那怎么办呢

29:41.890 --> 29:43.170
哎我们这里呢就可以

29:44.130 --> 29:45.650
在这里面进一步约束

29:45.890 --> 29:47.490
把这个玩意继续写成对象

29:49.090 --> 29:50.770
写的再描述详细一点

29:50.770 --> 29:52.930
它的内形呢是一个制服串

29:54.610 --> 29:55.730
内形是一个制服串

29:56.370 --> 29:56.930
然后呢

29:56.930 --> 29:57.730
required

29:58.290 --> 29:59.090
we true

29:59.090 --> 30:00.130
表示什么意思

30:00.130 --> 30:05.630
属性必传必须要传递

30:07.390 --> 30:08.190
必填

30:08.190 --> 30:09.470
那如果说你没有填这个属性

30:09.470 --> 30:10.270
你看一下

30:10.270 --> 30:11.310
它又给你警告了

30:11.310 --> 30:12.110
它说missing

30:13.150 --> 30:15.070
缺失了什么必填的属性

30:15.230 --> 30:17.870
有了这样的提示

30:17.870 --> 30:18.910
是不是你开发的时候

30:18.910 --> 30:20.190
就不容易犯错了

30:20.190 --> 30:21.230
就这么个意思

30:21.230 --> 30:23.390
那么现在我们把这个属性传进去

30:23.390 --> 30:24.590
又显示出来了

30:24.590 --> 30:25.550
又没有报错了

30:26.670 --> 30:27.470
其实不是错误

30:27.470 --> 30:28.270
是一个警告

30:28.270 --> 30:29.550
主要是为开发阶段

30:29.550 --> 30:30.830
做一些提示的

30:30.830 --> 30:31.710
起着没用途

30:31.710 --> 30:32.910
所以说里面要写一个

30:32.910 --> 30:34.510
非常好的组建出来

30:34.510 --> 30:36.510
对这些属性要多写一些约束

30:37.950 --> 30:38.670
好这个图片

30:39.390 --> 30:40.670
这个玩意写好了过后

30:40.670 --> 30:42.110
其实还有很多的问题

30:42.110 --> 30:43.950
因为我们的网页上的图片

30:43.950 --> 30:44.670
有大有小

30:45.550 --> 30:46.190
你看啊

30:46.190 --> 30:46.990
咱们这个图片

30:46.990 --> 30:47.710
这个图片有大的

30:47.710 --> 30:47.950
对吧

30:47.950 --> 30:49.390
这个头像有小的

30:49.390 --> 30:51.310
那么这个组建要考虑到通用性

30:51.310 --> 30:52.270
一要写个组建的时候

30:52.270 --> 30:53.870
一定要考虑到它的通用性

30:54.830 --> 30:55.710
它有可能会大

30:55.710 --> 30:56.350
有可能会小

30:57.550 --> 30:59.150
那么也就是说啥呢

30:59.150 --> 31:00.830
也就是说这个央视里边

31:01.790 --> 31:02.910
style央视里边

31:03.630 --> 31:04.670
是不是宽度

31:06.270 --> 31:07.310
不知道

31:07.310 --> 31:07.870
高度

31:08.510 --> 31:08.990
也不知道

31:10.030 --> 31:10.990
没有那意思吧

31:10.990 --> 31:12.190
当然这里没写完

31:12.990 --> 31:14.270
就总之它的央视里边

31:14.430 --> 31:15.470
宽高

31:15.470 --> 31:16.350
也不知道啊

31:16.910 --> 31:18.030
需要别人来控制

31:18.030 --> 31:19.310
我也不知道我的宽高是多少

31:19.310 --> 31:19.790
对吧

31:19.790 --> 31:21.630
我也不知道我这个组建在什么地方使用

31:22.430 --> 31:23.710
你写这个组建的时候

31:23.710 --> 31:25.470
你是不知道这个组建在什么地方使用的

31:26.110 --> 31:27.390
它要考虑通用性

31:27.390 --> 31:29.390
所以说这个是又要两个属性传过来

31:29.390 --> 31:30.670
它的宽度

31:32.430 --> 31:32.990
宽度什么

31:32.990 --> 31:33.630
内详是什么呢

31:34.350 --> 31:34.830
number

31:35.550 --> 31:35.870
对吧

31:37.150 --> 31:38.350
好然后呢再来个高度

31:40.350 --> 31:41.950
内详呢是也是number

31:43.150 --> 31:43.710
那么也就说

31:43.710 --> 31:45.950
这边呢我们要给它传一个宽高进去

31:46.910 --> 31:47.710
宽度

31:47.710 --> 31:49.150
因为它是数字嘛

31:49.150 --> 31:49.710
你不能

31:49.710 --> 31:51.230
你能不能用这种方式来写

31:51.230 --> 31:52.190
你看着啊

31:52.190 --> 31:54.110
我先把这个东西去掉

31:54.110 --> 31:55.630
先说个属性传递的问题

31:55.630 --> 31:56.830
有三个属性嘛

31:56.830 --> 31:58.110
一个是宽度

31:58.110 --> 31:59.950
比方说我们要传一个100

31:59.950 --> 32:00.910
高度

32:02.750 --> 32:04.270
传一个100

32:05.310 --> 32:06.830
能不能用这种方式来写呢

32:06.830 --> 32:07.550
它就不对

32:07.550 --> 32:08.590
为什么不对呢

32:08.590 --> 32:09.870
说内详不一样

32:09.870 --> 32:11.070
它本来应该是一个数字

32:11.070 --> 32:12.190
但是你给它传一个字母创

32:12.190 --> 32:13.230
所以说应该怎么写

32:13.790 --> 32:14.670
要这样子写对吧

32:14.670 --> 32:15.550
用技业是表达

32:15.550 --> 32:16.670
是里面才能表示出字

32:17.390 --> 32:18.430
好传进去

32:18.430 --> 32:19.150
刷新

32:19.150 --> 32:20.190
你看是不是没包错了

32:20.910 --> 32:21.870
那么现在问题是

32:21.870 --> 32:22.990
属性倒是传给它了

32:22.990 --> 32:24.270
它怎么来控制宽高呢

32:26.270 --> 32:26.830
是不是

32:27.470 --> 32:30.030
元素的这个属性要动态的

32:30.030 --> 32:31.230
是不是要动态啊

32:31.230 --> 32:32.110
style的这个属性

32:32.110 --> 32:33.070
它也是动态的

32:34.670 --> 32:35.390
很多

32:35.390 --> 32:35.950
你这个玩意

32:35.950 --> 32:36.590
因为你不只

32:36.590 --> 32:37.790
如果说你静态的话

32:37.790 --> 32:38.990
你不知道这里写啥

32:39.550 --> 32:40.670
到底多宽呢

32:40.670 --> 32:41.470
你也不知道

32:41.470 --> 32:43.070
所以它这里部分要动态的

32:43.230 --> 32:44.990
但是在这里也比较特殊啊

32:44.990 --> 32:45.950
这个属性比较特殊

32:45.950 --> 32:47.150
我这里当中来说一下

32:48.270 --> 32:49.630
它又会挑到这个模板这里了

32:50.430 --> 32:50.990
模板呢

32:50.990 --> 32:51.790
我刚才用了什么

32:51.790 --> 32:52.750
什么V办的对不对

32:54.750 --> 32:55.790
这个玩意是不是V办的

32:56.350 --> 32:57.390
绑定一个属性

32:58.110 --> 32:59.790
绑定一个属性的时候呢

33:01.470 --> 33:02.830
我们可以绑定各种样的属性

33:02.830 --> 33:04.190
比方说刚才我们的src

33:04.190 --> 33:04.910
就这样绑定的

33:05.470 --> 33:06.830
那么其中有一些属性

33:06.830 --> 33:07.470
是比较特殊的

33:07.470 --> 33:08.110
像这个style

33:08.990 --> 33:10.190
这个属性比较特殊

33:10.190 --> 33:12.110
这个属性一旦是动态绑定的时候

33:13.390 --> 33:14.670
特殊的特殊的地方

33:14.670 --> 33:15.470
第一个就是style

33:16.990 --> 33:18.910
如果说是绑定的style的话

33:18.910 --> 33:20.110
它要绑定为什么

33:20.110 --> 33:21.790
绑定一个对象

33:23.710 --> 33:24.910
好咱们来看一下啊

33:24.910 --> 33:26.830
那么如果说它绑定一个对象的话

33:26.830 --> 33:27.550
这里该怎么写

33:29.310 --> 33:31.070
不要永远记住啊

33:31.070 --> 33:32.030
绑定过后

33:32.030 --> 33:33.150
这个属性绑定过后

33:33.150 --> 33:35.870
这里边写的是解释表达式

33:37.790 --> 33:39.070
解释表达式对象打写

33:40.350 --> 33:41.150
就这样是写吧

33:41.150 --> 33:41.870
还能打写呢

33:43.070 --> 33:44.590
这个属性比有属性值呗

33:45.310 --> 33:47.550
好属性比方宽度等于多少呢

33:48.430 --> 33:49.470
宽度是多少

33:49.470 --> 33:51.790
是不是就等于这个属性的宽度

33:51.790 --> 33:53.310
拼接上解释

33:53.310 --> 33:55.310
所以这里不能再用双硬好了

33:55.310 --> 33:56.910
不然对这个双硬好冲突

33:56.910 --> 33:57.550
用单硬好吧

33:58.990 --> 34:00.510
然后呢高度呢为

34:01.950 --> 34:04.510
属性的高度拼接上解释

34:04.510 --> 34:05.550
看来得这样子写

34:06.910 --> 34:07.470
一看一下

34:09.230 --> 34:10.830
一看一下我们的元素

34:10.830 --> 34:12.110
看一下这个组建结构啊

34:12.830 --> 34:13.950
尔巴达这个组建你看

34:13.950 --> 34:14.510
Probs

34:14.510 --> 34:15.870
是不是该传递了三个

34:15.870 --> 34:16.270
高度

34:17.070 --> 34:18.270
宽度100

34:18.270 --> 34:19.310
URL地址这个

34:20.270 --> 34:21.870
好他选择出来的元素呢

34:21.870 --> 34:22.830
其实我们这有点就

34:22.830 --> 34:23.630
诶

34:23.630 --> 34:24.910
我觉得可以在大

34:24.910 --> 34:26.110
可以在这个地方可以看到

34:26.110 --> 34:26.990
他的元素啊

34:28.350 --> 34:29.790
好这点这个啊

34:29.790 --> 34:30.590
点这个

34:30.590 --> 34:32.030
可以切换到他的元素

34:32.670 --> 34:33.230
Inspect

34:33.230 --> 34:33.630
Done

34:34.430 --> 34:36.030
对应的元素是不是这个Image

34:36.030 --> 34:38.270
Image的src是不是绑定的属性啊

34:38.270 --> 34:40.110
Style里面是变成这个样子的

34:40.110 --> 34:41.630
所以我们给他传对象了过后呢

34:41.710 --> 34:43.390
他会帮我们转换成这种

34:43.390 --> 34:44.270
支付创的格式

34:45.150 --> 34:45.870
这样子呢你看

34:45.870 --> 34:48.110
我们是不是可以非常方便的来控制

34:48.110 --> 34:49.870
头像的宽度和高度

34:50.830 --> 34:51.150
对吧

34:53.630 --> 34:54.510
对不对

34:54.510 --> 34:56.350
而且呢你其实可以再优化一点

34:56.350 --> 34:57.150
比方说你看

34:57.150 --> 34:59.390
你观察到我们整个网站里面的头像

34:59.390 --> 35:01.070
都是一个圆形的对不对

35:01.070 --> 35:02.910
所以圆形的宽高是不是一样的

35:04.190 --> 35:04.830
是不是一样的

35:04.830 --> 35:06.830
因此呢你可以把这属性更改一下

35:06.830 --> 35:07.950
更改成什么Size

35:09.310 --> 35:10.670
既表示宽度又表示高度

35:10.750 --> 35:12.830
那么这个地方呢我们都用Size了

35:13.550 --> 35:15.230
尽量让使用者变得方便

35:15.790 --> 35:17.550
这些后面开发的组件非常简单啊

35:17.550 --> 35:19.310
但是我可以要通过这个组件

35:19.310 --> 35:21.390
告诉他大家一些基本的常识

35:21.950 --> 35:24.190
让使用组件的人尽量的方便

35:24.190 --> 35:25.310
好那么就这样子写了过后

35:25.310 --> 35:25.950
你看这边

35:25.950 --> 35:28.350
我们是不是可以直接用Size来控制

35:28.910 --> 35:30.270
整个组件的尺寸了

35:30.990 --> 35:32.830
那么这样子就是宽高为50

35:32.830 --> 35:34.190
因为它宽高始终是一样的

35:34.910 --> 35:37.310
你看深圳出来的组件

35:38.190 --> 35:39.790
Size是50

35:39.950 --> 35:40.910
那么对应的元素呢

35:41.630 --> 35:42.750
就是宽高为50

35:43.310 --> 35:43.630
看呗

35:45.950 --> 35:47.790
那么这刚才我们看到的就是Style

35:47.790 --> 35:49.550
针对Style可以绑定为一个对象

35:49.550 --> 35:50.590
实际上的针对Style

35:50.590 --> 35:52.190
还有一些其他的绑定方式

35:52.190 --> 35:54.350
不过呢绝大部分时候

35:54.350 --> 35:55.870
90%以上的情况下

35:55.870 --> 35:57.230
都是绑定为一个对象

35:57.230 --> 35:58.990
你可以在官方文档里面找到这一块

35:59.470 --> 36:01.790
找这个Style和ClassStyle绑定

36:01.790 --> 36:03.470
我们看一下绑定内也一样是

36:03.470 --> 36:04.830
练接地址

36:05.310 --> 36:05.870
复制一下

36:05.870 --> 36:07.150
我们刚才使用的是对象语法

36:07.150 --> 36:08.110
这是最常见的

36:08.110 --> 36:09.310
其他还有一些别的语法

36:09.470 --> 36:10.830
不过了不太常见

36:10.830 --> 36:11.550
用的很少而已

36:12.910 --> 36:13.470
OK

36:16.300 --> 36:19.020
好这是这一块

36:19.020 --> 36:20.140
那我们现在做完了吗

36:20.540 --> 36:21.740
还没有做完对吧

36:21.740 --> 36:24.220
我们还要把它做一个圆角边框

36:24.540 --> 36:24.860
是吧

36:24.860 --> 36:26.300
这个图片做一个圆角边框

36:27.260 --> 36:27.740
对不对

36:27.740 --> 36:29.340
那怎么来做圆角边框呢

36:29.340 --> 36:30.380
那是不是要写样式了

36:30.940 --> 36:32.460
样式是跟这个组件相关的

36:32.460 --> 36:34.540
我们就不用去写个全剧样式

36:34.540 --> 36:35.500
统一使用不用

36:35.500 --> 36:37.020
我们把这个样式写到哪呢

36:37.020 --> 36:38.140
是要是Style里面

36:38.940 --> 36:39.980
这里边直接写样式

36:40.940 --> 36:42.460
我们给它一个样式

36:42.460 --> 36:43.260
内样式吧

36:44.300 --> 36:44.940
class

36:44.940 --> 36:45.900
比方说给它一个内样式

36:45.900 --> 36:47.020
名字叫什么呢

36:47.020 --> 36:47.660
image

36:48.940 --> 36:49.420
avata

36:49.820 --> 36:51.820
avata image

36:51.820 --> 36:53.020
给它这么一个样式

36:53.020 --> 36:54.780
好复制一下这个内样式啊

36:54.780 --> 36:56.860
我们在这边点avata image

36:58.300 --> 37:00.700
然后在这边直接写上这个内样式

37:00.700 --> 37:01.740
内样式为什么呢

37:01.740 --> 37:02.540
为Khwan

37:03.500 --> 37:05.740
borderwriters要圆形吧

37:05.740 --> 37:06.620
叫做50%

37:08.220 --> 37:09.020
好保存啊

37:09.020 --> 37:10.460
其实我们还可以加一句啊

37:10.540 --> 37:12.700
为了避免一些图片

37:12.700 --> 37:14.940
它的宽高比例很神奇啊

37:14.940 --> 37:16.140
有的宽比例

37:16.140 --> 37:18.060
它不是1比1的宽高比例

37:18.060 --> 37:20.220
那么为了避免那个图片拉伸

37:20.220 --> 37:21.980
所以说我们可以加上一个object的feats

37:22.620 --> 37:22.940
cover

37:23.660 --> 37:24.940
这个东西我不用去解释啊

37:24.940 --> 37:27.100
你们之前学CSS应该学过

37:27.100 --> 37:28.380
如果说你忘了的话

37:28.380 --> 37:29.180
可以去摆度一下

37:29.180 --> 37:30.300
非常简单的一个图形

37:30.300 --> 37:31.340
就是给它写一些样式

37:32.700 --> 37:33.420
好那么这样呢

37:33.420 --> 37:34.060
我们刷新

37:34.060 --> 37:36.060
你看它就变成个圆形了

37:36.060 --> 37:38.540
可能你们看不得不是很清楚啊

37:39.260 --> 37:40.780
那我就换一个图片吧

37:40.780 --> 37:42.140
把这个图片复制一下

37:43.260 --> 37:43.820
换一个图片

37:44.460 --> 37:45.900
换一个图片测试一下

37:45.900 --> 37:48.160
好保存啊

37:50.300 --> 37:52.300
对了是变圆形了

37:52.300 --> 37:53.980
对吧就变成个头像了

37:53.980 --> 37:54.460
好当然了

37:54.460 --> 37:56.060
我们这里还可以再加上一句啊

37:56.060 --> 37:56.780
display block

37:57.500 --> 37:58.300
因为有的时候呢

37:58.300 --> 37:59.820
把这个把这个图片放到一个

37:59.820 --> 38:00.460
航核里面

38:00.460 --> 38:01.100
呃快核里面了

38:01.100 --> 38:02.140
可能会出现白边啊

38:02.140 --> 38:03.100
所以把它变成快核

38:03.660 --> 38:04.460
啊所以都可以做

38:05.340 --> 38:05.660
OK

38:06.300 --> 38:07.420
那么我们指到这个元素

38:07.420 --> 38:07.900
你可以看到

38:08.460 --> 38:09.900
它里面有是不是一个内样式啊

38:09.980 --> 38:11.020
evata image

38:11.020 --> 38:12.860
那么这里面内样式也应用进去了

38:12.860 --> 38:14.380
而且大家还会发现

38:14.380 --> 38:16.060
有些地方它会给你自动加钱罪

38:16.060 --> 38:16.700
看到没

38:16.700 --> 38:18.140
它会自动考虑兼容性

38:18.140 --> 38:20.060
打包结果里面会给你加上钱罪

38:20.060 --> 38:21.420
这些东西都给你考虑好了

38:21.420 --> 38:22.220
你直接写

38:22.220 --> 38:23.420
怎么舒服怎么来就行了

38:24.860 --> 38:26.380
好了吗这个组件写好了吗

38:26.380 --> 38:27.340
写完了吗

38:27.340 --> 38:28.300
其实差不多了啊

38:28.300 --> 38:30.460
我们可以多来几个这个组件

38:30.460 --> 38:31.420
evata

38:31.420 --> 38:32.300
刚才写了一个对吧

38:33.020 --> 38:33.500
再来一个

38:34.060 --> 38:34.540
这个

38:34.540 --> 38:35.500
好两个evata

38:36.620 --> 38:37.260
一个这个

38:37.260 --> 38:37.740
一个这个

38:38.700 --> 38:40.620
啊两个组件的可以不同的

38:41.180 --> 38:41.740
宽高

38:41.740 --> 38:41.980
啊

38:44.850 --> 38:45.490
写完了吗

38:46.130 --> 38:46.930
差不多了

38:46.930 --> 38:47.570
但是呢

38:48.290 --> 38:50.690
还有一个非常非常小的细节啊

38:50.690 --> 38:52.050
大家可能不太容易想得到

38:52.770 --> 38:53.730
什么小的细节呢

38:54.690 --> 38:55.090
就是

38:55.970 --> 38:56.850
内样式啊

38:56.850 --> 38:58.290
以后我们组件越来越多

38:58.290 --> 38:59.970
这个内样式会不会冲突啊

39:01.250 --> 39:01.810
你看啊

39:01.810 --> 39:02.930
现在我们做这个组件呢

39:04.130 --> 39:05.250
倒是没什么问题

39:05.250 --> 39:05.810
挺好的

39:06.930 --> 39:08.930
你看不同的组件属性传递的不一样

39:08.930 --> 39:09.170
对

39:10.050 --> 39:10.930
嗯然后呢

39:10.930 --> 39:11.490
以后呢

39:11.490 --> 39:12.290
这个内样式啊

39:12.290 --> 39:12.610
evata

39:12.610 --> 39:13.010
evata

39:13.010 --> 39:13.890
万一冲突了呢

39:13.890 --> 39:14.130
对吧

39:14.130 --> 39:15.330
一向组件写多了

39:15.330 --> 39:16.370
内样式越来越多

39:16.370 --> 39:17.810
难免会出现丛名

39:18.530 --> 39:19.170
怎么办呢

39:19.810 --> 39:20.770
vue呢

39:20.770 --> 39:21.970
非常贴心的

39:21.970 --> 39:23.090
为了考虑到这一点

39:23.090 --> 39:23.730
其实是vue

39:23.730 --> 39:25.090
可以为了考虑到这一点

39:25.810 --> 39:26.610
他利用什么呢

39:27.170 --> 39:29.490
他参考了css module

39:29.490 --> 39:30.930
这样的一种思想

39:30.930 --> 39:31.330
于是呢

39:31.330 --> 39:32.130
在这边

39:32.130 --> 39:33.330
你可以在style里面呢

39:33.330 --> 39:34.130
写上一个scout

39:35.810 --> 39:36.930
加上这个标记

39:36.930 --> 39:39.090
那么这样加上这个标记过后变成什么呢

39:39.250 --> 39:39.890
变成了一个

39:41.890 --> 39:45.250
带有作用域的样式

39:45.250 --> 39:46.130
怎么意思呢

39:46.130 --> 39:47.330
保存你看一下就明白了

39:48.770 --> 39:49.170
小心

39:51.040 --> 39:51.840
好像没事

39:51.840 --> 39:52.560
还是一样

39:52.560 --> 39:53.680
但是你看一下这个

39:53.680 --> 39:55.120
我们写的内样式是啥

39:55.120 --> 39:55.600
是这个

39:57.620 --> 39:58.500
它变成了啥

40:03.140 --> 40:04.020
它变成了这个

40:04.980 --> 40:05.380
对

40:09.340 --> 40:10.060
它变成了这个

40:10.860 --> 40:11.580
区别在哪

40:11.580 --> 40:12.780
除了加上一些权绝之外

40:12.780 --> 40:13.420
这东西不管

40:14.220 --> 40:15.980
所以加上一个属性选择器啊

40:16.620 --> 40:18.620
它会在我们的内样式也好

40:18.700 --> 40:20.220
我们的元素选择器也好

40:20.220 --> 40:22.620
上面会加上这个属性选择器

40:24.300 --> 40:25.420
这属性是哪来的

40:25.420 --> 40:25.900
你看一下

40:26.700 --> 40:29.740
它会把我们的组件里面生成的这个元素啊

40:29.740 --> 40:31.900
都不约而同的去加上这个属性

40:31.900 --> 40:32.220
你看

40:32.700 --> 40:33.340
delta v

40:33.340 --> 40:33.660
看到没

40:34.140 --> 40:35.580
会加上一个自定义主项

40:36.220 --> 40:37.500
那么这个属性是保证

40:37.500 --> 40:39.580
同一个组件是一样的

40:39.580 --> 40:41.340
你看都是两个都是同一个组件嘛

40:41.340 --> 40:42.780
都是用的是一个组件

40:42.780 --> 40:43.180
那是不是

40:43.740 --> 40:45.180
这个标记是一样的

40:45.180 --> 40:47.020
然后这个组件里面的内样式

40:47.100 --> 40:48.860
同样的会加上这个标记

40:48.860 --> 40:50.460
它的样式选择器上面

40:50.460 --> 40:51.740
也会加上这个标记

40:51.740 --> 40:52.540
那么也就是说

40:52.540 --> 40:53.740
这样子的依赖的话

40:53.740 --> 40:54.940
我们这个元素啊

40:56.140 --> 40:57.260
这个选择器啊

40:57.260 --> 40:59.020
它实际上它只会选中什么

40:59.020 --> 41:00.540
这个组件内的元素

41:01.020 --> 41:02.700
它不会选中这个组件外的元素

41:02.700 --> 41:04.060
那么这样子不同的组件中

41:04.060 --> 41:05.180
出现了宠命的内样式

41:05.180 --> 41:05.900
是不是不冲突啊

41:06.380 --> 41:07.180
就不会冲突

41:08.060 --> 41:08.700
没了意思啊

41:09.500 --> 41:11.260
它是用这种方式来处理的

41:12.220 --> 41:14.140
所以说就避免了内样式冲突

41:14.140 --> 41:14.780
因此呢

41:14.780 --> 41:16.380
它进最大的努力呢

41:16.380 --> 41:18.540
就是为了格决不同的组件

41:18.540 --> 41:20.060
每个组件之间不要相互影响

41:20.060 --> 41:20.620
你说你的

41:20.620 --> 41:21.340
我说我的

41:21.340 --> 41:23.500
这样子非常容易团队写作

41:23.500 --> 41:24.460
不同的团队成员呢

41:24.460 --> 41:25.500
可以开发不同的组件

41:25.980 --> 41:26.940
去完成的责任

41:26.940 --> 41:27.260
最后呢

41:27.260 --> 41:28.220
我们把组件合在一起

41:28.220 --> 41:29.180
就形成了一个页面

41:31.100 --> 41:31.420
好

41:31.420 --> 41:32.460
我们以后的开发组件

41:32.460 --> 41:33.820
都会用这种思路啊

41:33.820 --> 41:34.700
写好组件

41:34.700 --> 41:36.220
编写了编续测试

41:36.220 --> 41:37.100
测试完了过后

41:37.100 --> 41:37.260
哎

41:37.260 --> 41:38.220
这个组件就写好了

41:38.220 --> 41:39.180
你不用去管它了

41:39.180 --> 41:40.380
你将来只需要知道这个组件

41:40.380 --> 41:41.420
怎么用就行了

41:41.420 --> 41:42.940
是不是形成了一个功能块的

41:42.940 --> 41:43.900
以后我要用头像

41:43.980 --> 41:46.140
我直接用这个组件就完成了

41:46.140 --> 41:47.180
就形成了功能块了

41:47.180 --> 41:49.100
我不用知道这个组件里边

41:49.980 --> 41:50.780
是怎么去写的

41:50.780 --> 41:51.180
无所谓

41:52.860 --> 41:53.020
好

41:53.020 --> 41:54.140
这就是这个组件就开发好了

41:54.140 --> 41:54.540
这就可以

41:54.540 --> 41:55.820
大家要把这个组件开发完成

41:57.820 --> 41:58.060
好

41:58.060 --> 41:58.540
最后呢

41:58.540 --> 42:00.140
我说一下一个关键的概念

42:00.140 --> 42:00.860
叫做预编译

42:01.980 --> 42:02.700
有的时候呢

42:02.700 --> 42:03.900
虽然是入门阶段

42:03.900 --> 42:04.620
但咱们呢

42:04.620 --> 42:07.500
还是要多多少少理解一些原因

42:09.580 --> 42:11.100
有了维尤克利之后呢

42:12.380 --> 42:13.740
他做了一些优化

42:13.980 --> 42:15.500
其中一个优化叫做预编译

42:16.460 --> 42:17.180
什么意思呢

42:17.820 --> 42:20.300
他会直接把组件中的模板

42:22.750 --> 42:23.310
就这个玩意

42:24.590 --> 42:24.910
模板

42:25.630 --> 42:27.070
转换成什么呢

42:27.070 --> 42:27.950
Render函数

42:28.750 --> 42:29.390
还记得吗

42:29.390 --> 42:31.870
咱们的核心概念那一张说了

42:33.470 --> 42:34.750
维尤要宣展出来

42:34.750 --> 42:36.110
必须要有什么虚的节点

42:37.630 --> 42:38.510
要有虚的节点

42:38.510 --> 42:39.630
必须要有Render函数

42:40.190 --> 42:41.950
如果你没有写Render函数

42:41.950 --> 42:43.470
是不是要编译成为Render函数

42:44.430 --> 42:45.390
那么过去呢

42:45.390 --> 42:46.350
是在哪编译的呢

42:46.350 --> 42:48.270
是在运行的过程中编译的

42:49.630 --> 42:50.030
你看

42:51.710 --> 42:53.150
我们当时写这样的写的话

42:53.710 --> 42:54.910
模板是直接写到这儿的

42:56.030 --> 42:57.390
运行出来过后

42:57.390 --> 42:58.510
他再进行编译

42:59.070 --> 43:00.110
那么这样子会是不是

43:00.110 --> 43:01.630
会拉长这个运行时间

43:02.830 --> 43:03.230
对不对

43:03.230 --> 43:04.350
如果说你直接写Render

43:04.350 --> 43:04.990
他是不是

43:04.990 --> 43:06.430
运行的时候就不用编译了

43:06.430 --> 43:07.790
他直接就有Render函数了

43:08.510 --> 43:09.710
那么他会减少时间

43:09.710 --> 43:11.230
Render函数肯定是效率最高的

43:11.950 --> 43:13.470
但是他写起来不好写

43:13.790 --> 43:15.470
但是在无诱可力里面就解决这个问题了

43:15.470 --> 43:16.350
他怎么解决的

43:16.830 --> 43:18.270
他是在打包的时候

43:18.270 --> 43:19.310
因为我们在WePack

43:19.310 --> 43:20.270
我们知道WePack

43:20.510 --> 43:21.950
他是先打包

43:22.750 --> 43:23.390
在运行

43:24.030 --> 43:27.970
我们写的元代嘛

43:29.890 --> 43:30.770
会要打包

43:30.770 --> 43:31.570
被他打包

43:31.570 --> 43:32.450
被WePack打包

43:33.090 --> 43:33.650
打包

43:33.650 --> 43:35.410
然后呢在运行

43:35.410 --> 43:37.570
运行的时候就依托在什么

43:38.450 --> 43:39.490
开发服务器上

43:39.490 --> 43:41.410
把打包结果放到开发服务器上

43:41.410 --> 43:42.530
你访问开发服务器

43:42.530 --> 43:43.330
访问的实际上

43:43.330 --> 43:44.610
是打包结果

43:44.610 --> 43:46.690
运行的实际上也是打包结果

43:48.050 --> 43:49.490
先打包再运行

43:50.130 --> 43:51.410
那么有了这种逻辑过后

43:51.410 --> 43:52.770
就很舒服了

43:52.770 --> 43:54.210
我们可以开开心心的

43:54.210 --> 43:55.650
在元代嘛例表写什么

43:55.650 --> 43:56.370
写模办

43:59.140 --> 44:00.260
然后他一打包

44:00.580 --> 44:02.500
打包的结果里面就没有模办了

44:02.900 --> 44:04.420
直接就变成了Render函数

44:04.900 --> 44:06.580
这样运行的速度是不是非常快

44:06.580 --> 44:07.780
因为运行的时候

44:07.780 --> 44:08.980
是不需要编译的

44:09.220 --> 44:10.180
因为运行的时候

44:10.180 --> 44:11.700
就直接是运行打包结果

44:11.700 --> 44:12.900
打包结果没有模办

44:13.460 --> 44:14.260
就是Render

44:15.780 --> 44:16.580
没什么意思吧

44:18.770 --> 44:19.490
你看一下吧

44:21.010 --> 44:21.570
颗尖

44:21.570 --> 44:22.050
对不对

44:22.370 --> 44:23.650
第四步路打包结果里面

44:23.650 --> 44:25.410
既也是随便找一个

44:30.130 --> 44:31.090
搜索Render

44:33.890 --> 44:34.370
你看

44:34.930 --> 44:36.850
是不是根本生成了Render函数啊

44:38.290 --> 44:39.490
说生成了Render函数啊

44:40.130 --> 44:41.170
就这么个意思

44:42.850 --> 44:44.130
先打包再运行

44:45.570 --> 44:47.170
而且不仅如此

44:47.170 --> 44:48.450
由于他运行的时候

44:48.450 --> 44:49.490
已经没有模办了

44:49.970 --> 44:50.930
运行的是打包结果

44:50.930 --> 44:52.210
打包结果没有模办

44:52.210 --> 44:52.930
因此呢

44:53.490 --> 44:54.610
打包结果里面

44:54.610 --> 44:56.610
是不用包含5U的全部代码的

44:57.170 --> 44:57.810
啥意思

44:57.810 --> 44:58.690
看下面这张图

44:59.810 --> 45:01.490
我们这是一个SFC

45:01.490 --> 45:02.610
我们一个单文件组件

45:02.930 --> 45:03.810
打包结果过后

45:03.810 --> 45:05.090
我就写了一个伟代码

45:05.090 --> 45:06.210
他肯定打包结果里面

45:06.210 --> 45:07.250
还要比较复杂一点

45:07.250 --> 45:08.450
但是他其实就是

45:08.450 --> 45:09.570
肯定是没有模办了

45:09.570 --> 45:11.090
变成什么变成Render函数了

45:12.130 --> 45:12.690
这样子呢

45:12.690 --> 45:13.890
打包结果是不是没有模办

45:14.930 --> 45:15.970
也是因为如此

45:15.970 --> 45:17.250
我们的5U这个框架里面

45:17.250 --> 45:18.770
其实它有很多的原代码

45:18.930 --> 45:21.010
因为打包结果要运行

45:21.010 --> 45:22.930
还不得把5U打包到

45:22.930 --> 45:23.890
结果里面

45:23.890 --> 45:24.930
打包到这个帮助里面

45:24.930 --> 45:25.490
对吧

45:26.130 --> 45:28.050
但是5U里面其实有很多模块的

45:28.050 --> 45:29.090
有响应式系统

45:29.090 --> 45:30.210
有什么运行式系统

45:30.210 --> 45:31.410
这些东西都不用管

45:31.410 --> 45:33.250
还有一个就是模办编译系统

45:33.250 --> 45:35.810
它是在运行的过程中去编译模办的

45:35.810 --> 45:37.250
就像我们最开始的时候

45:39.200 --> 45:40.080
是不是要运行出来

45:40.080 --> 45:41.040
还去编译这个模办

45:41.040 --> 45:42.480
但是现在运行的时候

45:42.480 --> 45:44.320
它打包结果里面已经没有模办了

45:44.320 --> 45:45.040
因此呢

45:45.920 --> 45:46.800
5U可立决的

45:47.680 --> 45:48.480
我这个编译

45:48.480 --> 45:49.520
我这个打包结果

45:49.600 --> 45:51.680
根本就必要要这个模办编译系统

45:52.480 --> 45:54.400
没有必要把完整的5U原代码

45:54.400 --> 45:55.920
编译到打包结果里面去

45:55.920 --> 45:57.360
只需要编译它的一部分就行了

45:58.080 --> 45:58.720
它其他东西

45:58.720 --> 46:00.000
除了这个编译系统之外

46:00.000 --> 46:01.920
其他东西可以到这个打包结果

46:02.800 --> 46:04.640
这样子打包体积是不是变小了

46:04.640 --> 46:06.000
它不需要一个编译系统的

46:06.000 --> 46:06.400
因为为什么

46:06.400 --> 46:08.400
因为最终的结果里面没有模办了

46:08.400 --> 46:09.200
不需要的编译

46:10.320 --> 46:11.120
所以说

46:16.430 --> 46:18.110
如果说你在APP里面

46:18.910 --> 46:19.150
对

46:19.150 --> 46:20.270
有人说不写模办

46:21.630 --> 46:22.670
模办模办写到转

46:27.520 --> 46:28.160
可不可以呢

46:28.800 --> 46:30.160
代码好像是没什么问题

46:31.920 --> 46:32.320
刷新

46:34.320 --> 46:35.680
他就说给你包一个错

46:35.680 --> 46:36.320
他说什么呢

46:36.960 --> 46:39.200
因为运行实态里边

46:40.320 --> 46:41.520
在运行的时候

46:41.520 --> 46:42.960
根本就没有编译系了

46:43.680 --> 46:44.080
他说

46:44.720 --> 46:48.320
the template 扛牌的模办编译系是不可用的

46:48.960 --> 46:50.000
因为你这样子写的话

46:50.000 --> 46:50.720
你模办没有写了

46:50.720 --> 46:52.320
上面它就没法编一层Render对吧

46:52.320 --> 46:54.720
没法没法在打包的时候编一层Render

46:55.680 --> 46:57.600
那么这个东西就会直接到达打包结果

46:58.320 --> 46:59.760
打包结果有这个东西

46:59.760 --> 47:00.240
但是呢

47:00.240 --> 47:02.000
打包结果里面没有模办编译器

47:02.640 --> 47:04.000
它没法进行编译

47:04.000 --> 47:04.640
没什么意思吧

47:05.200 --> 47:06.080
但是又没办法解决

47:06.080 --> 47:06.640
有办法解决

47:06.640 --> 47:07.680
但是不用去解决它

47:09.040 --> 47:11.040
因为我们不希望在打包结果里面

47:11.040 --> 47:12.080
包含了个编译系

47:12.080 --> 47:13.840
这样子会增加打包体积

47:14.480 --> 47:15.680
除了当前就说这个东西

47:18.750 --> 47:19.230
好了

47:19.230 --> 47:19.710
就这样子

47:21.630 --> 47:21.710
好

47:21.710 --> 47:22.990
这是我们这节课的东西

47:22.990 --> 47:24.750
搭建我们的工程

47:24.750 --> 47:25.550
大家这节课呢

47:25.550 --> 47:26.510
把工程搭建好

47:27.710 --> 47:31.550
写好第一个咱们人生当中的第一个真正的组件

47:31.550 --> 47:32.910
把他投向组件

47:32.910 --> 47:34.030
非常的简单

47:34.030 --> 47:35.630
也没有自己的没有什么逻辑

47:35.630 --> 47:36.590
就传两个属性

47:36.590 --> 47:37.550
传两个属性进来

47:37.550 --> 47:39.230
我把它确定出来就完成了

47:40.110 --> 47:41.550
体会一下组件的开发

47:41.550 --> 47:42.190
我们后续呢

47:42.190 --> 47:44.350
会陆陆续续写很多的组件

47:44.910 --> 47:45.150
好

47:45.150 --> 47:46.110
这是这一块没有

47:46.110 --> 47:46.510
好

47:46.510 --> 47:47.630
咱们下节课再说

