WEBVTT

00:00.240 --> 00:02.240
我们回到这个文章列表页

00:02.240 --> 00:04.240
这个列表页还有一些小的问题

00:04.240 --> 00:06.240
啥问题呢 就是这个图片

00:06.240 --> 00:09.240
这个图片呢 目前大家看不出来有什么问题

00:09.240 --> 00:12.240
因为这里每一篇文章都是一样的图片

00:12.240 --> 00:14.240
你看啊 我们在模拟数据里边

00:14.240 --> 00:16.240
每一篇文章实际上是一样的

00:16.240 --> 00:19.240
在blog 在这儿

00:19.240 --> 00:21.240
我们在文章列表里的说裂图啊

00:21.240 --> 00:23.240
这里是个表达式

00:23.240 --> 00:25.240
这个表达式会计算出一个结果 对吧

00:25.240 --> 00:27.240
在运行这个blog的时候 就会计算出一个结果

00:27.240 --> 00:29.240
那么比方要计算出一个图片地址

00:29.240 --> 00:32.240
一个DDP 一个图片地址

00:32.240 --> 00:35.240
那么就相当于是在数据里面二选一个

00:35.240 --> 00:37.240
那么也就是说 如果说选中了它

00:37.240 --> 00:39.240
就导致了每一个文章

00:39.240 --> 00:42.240
只要有图片 它的图片地址一定是一样的

00:42.240 --> 00:44.240
一定是一样的

00:44.240 --> 00:47.240
倒是没有什么问题啊 就是说

00:47.240 --> 00:49.240
就无法模拟出真实的效果

00:49.240 --> 00:51.240
因为真实的效果里面是

00:51.240 --> 00:53.240
每一篇文章的图片可能都不一样

00:53.240 --> 00:54.240
这是非常正常的

00:54.240 --> 00:56.240
不说可能的 就一定是不一样的

00:57.240 --> 01:00.240
那么为什么一样就看不出来这个问题呢

01:00.240 --> 01:02.240
是因为咱们流量器有缓存

01:02.240 --> 01:04.240
当它下载了一张图片

01:04.240 --> 01:06.240
它就会把缓存起来

01:06.240 --> 01:08.240
将来如果说 再去下载另一张图片

01:08.240 --> 01:10.240
也会发现地址都是一样的

01:10.240 --> 01:12.240
所以说 它就会直接用之前的缓存

01:12.240 --> 01:14.240
因此像这种图片啊

01:14.240 --> 01:16.240
模拟不出来 真实的效果啥意思呢

01:16.240 --> 01:19.240
就是说 我在访问这个文章列表页的时候

01:19.240 --> 01:21.240
那只要一张图片加载出来了

01:21.240 --> 01:23.240
所有的文章全部加载出来了

01:23.240 --> 01:25.240
真实的情况是怎么样呢

01:25.240 --> 01:26.240
一张图片都不一样

01:26.240 --> 01:28.240
而且这个图片可能比较大

01:28.240 --> 01:30.240
像文章列表不说大吧

01:30.240 --> 01:32.240
文章列表多了 这图片是不是很多

01:32.240 --> 01:34.240
有可能很多 有有可能很大

01:34.240 --> 01:37.240
那么就会导致加载的速度会很慢

01:37.240 --> 01:40.240
这里我就要做一个图片的延迟加载

01:40.240 --> 01:43.240
说了半天 大家应该明白我说了什么意思的

01:43.240 --> 01:44.240
为了模拟这个效果

01:44.240 --> 01:47.240
我首先把这个单码要稍微改一下

01:47.240 --> 01:49.240
改成这个样子

01:49.240 --> 01:51.240
我就用一个模板制服串

01:51.240 --> 01:52.240
就用制服串

01:52.240 --> 01:53.240
因为用了制服串之后

01:53.240 --> 01:56.240
它这个地方就是动态调用函数

01:56.240 --> 01:59.240
每一条数据它都会调用于是函数

01:59.240 --> 02:02.240
因为每一条数据它都调用于是函数

02:02.240 --> 02:04.240
也就是它导致的结构就不一样了

02:04.240 --> 02:07.240
每一篇文章 它调用于是函数

02:07.240 --> 02:08.240
都去随机生成

02:08.240 --> 02:10.240
因此它的结构就不一样了

02:10.240 --> 02:11.240
好 咱们来试一下

02:11.240 --> 02:13.240
首先这个尺寸

02:13.240 --> 02:15.240
尺寸要不然我改一下

02:15.240 --> 02:17.240
改一下尺寸

02:17.240 --> 02:19.240
或者尺寸我改一下吧

02:19.240 --> 02:20.240
改成什么颜色呢

02:20.240 --> 02:23.240
改成一个AtaColor

02:23.240 --> 02:25.240
因为我知道在默克杰斯里面

02:25.240 --> 02:30.240
Ata就是一个调用函数

02:30.240 --> 02:32.240
那么我再调用一个Color函数

02:32.240 --> 02:34.240
就是随机生成一个颜色

02:34.240 --> 02:35.240
这个文本呢

02:35.240 --> 02:36.240
我就用Red and Green

02:36.240 --> 02:37.240
或者是换一个文本

02:37.240 --> 02:38.240
一个开抽

02:38.240 --> 02:39.240
随便给我生成一个标题

02:39.240 --> 02:40.240
那么我来试

02:40.240 --> 02:42.240
把它做一个文本

02:42.240 --> 02:43.240
标题的长度呢

02:43.240 --> 02:46.240
也就是一到五吧

02:46.240 --> 02:47.240
好 保存

02:47.240 --> 02:48.240
那么这样子呢

02:48.240 --> 02:49.240
如果说一篇文章

02:49.240 --> 02:51.240
它会动态调用函数

02:51.240 --> 02:53.240
而不是直接用之前的函数

02:53.240 --> 02:54.240
固定的结构

02:54.240 --> 02:55.240
好 咱们来试一下

02:57.240 --> 02:59.240
怎么变成这个样子的

02:59.240 --> 03:01.240
它这个语法识别不了吧

03:01.240 --> 03:02.240
算了 那算了

03:02.240 --> 03:03.240
既然识别不了

03:03.240 --> 03:04.240
我就

03:04.240 --> 03:06.240
我这里生成一个随机数得了

03:06.240 --> 03:07.240
要不然生一个随机数得了

03:07.240 --> 03:10.680
我看一下默克杰斯里面

03:11.680 --> 03:12.680
怎么来生成一个随机数

03:12.680 --> 03:13.680
我忘了

03:14.680 --> 03:16.680
生成一个随机数

03:17.680 --> 03:19.680
有没有生成随机数

03:23.460 --> 03:24.460
Basic

03:25.460 --> 03:26.460
生成一个随机数

03:26.460 --> 03:28.460
这是个生成一个随机的布尔子

03:28.460 --> 03:30.460
生成一个Max

03:32.460 --> 03:33.460
Nature

03:33.460 --> 03:34.460
生成个Nature吧

03:34.460 --> 03:35.460
好吧 我们用这个

03:35.460 --> 03:36.460
好 保存

03:36.460 --> 03:38.460
那么我们这边刷新

03:38.460 --> 03:39.460
得到文章列表

03:39.460 --> 03:40.460
文章列表里面

03:40.460 --> 03:41.460
你看这些图片

03:41.460 --> 03:43.460
就得到一个不同的数字

03:43.460 --> 03:44.460
对吧

03:44.460 --> 03:45.460
那么来模拟

03:45.460 --> 03:46.460
不一样了

03:46.460 --> 03:47.460
你看现在

03:47.460 --> 03:48.460
现在这张图片都还没有夹仔出来

03:48.460 --> 03:49.460
你看

03:49.460 --> 03:50.460
每张文章

03:50.460 --> 03:51.460
它的夹仔速度会很慢

03:51.460 --> 03:52.460
那如果说页面一开始

03:52.460 --> 03:54.460
就夹仔这么多图片的话

03:54.460 --> 03:55.460
那肯定会比较卡顿

03:55.460 --> 03:56.460
我希望页面一开始

03:56.460 --> 03:58.460
不要夹仔这么多图片

03:58.460 --> 03:59.460
只夹在什么呢

03:59.460 --> 04:01.460
只夹在目前能看到的图片

04:01.460 --> 04:02.460
当我们滚动条往下滚动的时候

04:02.460 --> 04:04.460
再去夹仔更多的

04:04.460 --> 04:05.460
能看到的图片

04:05.460 --> 04:06.460
就是看到的

04:06.460 --> 04:07.460
夹仔到的

04:07.460 --> 04:08.460
那怎么做呢

04:08.460 --> 04:09.460
首先我说一下

04:09.460 --> 04:11.460
我希望达成的效果

04:11.460 --> 04:13.460
我希望达成的效果是这样子

04:13.460 --> 04:15.460
我这里有张默认

04:15.460 --> 04:17.460
有一张默认的动态图

04:17.460 --> 04:19.460
特别可没有新知识

04:19.460 --> 04:21.460
都是一些基本的逻辑处理

04:21.460 --> 04:23.460
我随便找了一个动态图

04:23.460 --> 04:25.460
那你可以去导一些别的图片也可以

04:25.460 --> 04:27.460
就说一开始呢

04:27.460 --> 04:29.460
大家都用这张图片

04:29.460 --> 04:32.460
然后呢你夹仔完了过后

04:32.460 --> 04:34.460
你再去换成

04:34.460 --> 04:35.460
正常的图片

04:35.460 --> 04:36.460
是这么个意思

04:36.460 --> 04:37.460
好来吧

04:37.460 --> 04:40.460
我们最终想达成的效果是这样子

04:40.460 --> 04:43.460
我在表上在博客列表页

04:43.460 --> 04:44.460
博客列表

04:44.460 --> 04:45.460
我先把这个图片扔过来

04:45.460 --> 04:48.460
扔到我们的Orsace目标下面去

04:48.460 --> 04:50.460
这是我们的默认图片

04:50.460 --> 04:52.460
在我们的博客的组件里边

04:52.460 --> 04:53.460
在这里

04:53.460 --> 04:54.460
在任何地方都可以

04:54.460 --> 04:56.460
只要有图片都可以

04:56.460 --> 04:58.460
比方说这里是一张图片对吧

04:58.460 --> 05:01.460
我就不要直接给他的Orsace复制

05:01.460 --> 05:02.460
这样子的话他一定会

05:02.460 --> 05:03.460
你这样的复制的话

05:03.460 --> 05:04.460
他甚至到牛郎期

05:04.460 --> 05:06.460
牛郎期一定会去加的这张图片

05:06.460 --> 05:07.460
我希望是怎么来

05:07.460 --> 05:08.460
有一个指令

05:08.460 --> 05:11.460
叫做V-Lessie

05:11.460 --> 05:12.460
有假设

05:12.460 --> 05:14.460
有这么一个指令

05:14.460 --> 05:16.460
这个指令呢

05:16.460 --> 05:17.460
就涉及到这张图片

05:17.460 --> 05:19.460
那么也就是说

05:19.460 --> 05:20.460
通过这个指令

05:20.460 --> 05:21.460
去完成图片的设置

05:21.460 --> 05:23.460
这个指令的作用是什么呢

05:23.460 --> 05:24.460
有了这个指令过后

05:24.460 --> 05:26.460
我给他一个真实的图片地址

05:26.460 --> 05:28.460
他首先不会去加载真实图片

05:28.460 --> 05:29.460
而会去怎么样了

05:29.460 --> 05:31.460
而会去

05:31.460 --> 05:33.460
现在肯定是有问题的

05:33.460 --> 05:34.460
现在肯定是有问题的

05:34.460 --> 05:36.460
你给他显示的就是图片的标题

05:36.460 --> 05:38.460
他没有图片SRC路径的

05:38.460 --> 05:40.460
我希望有这个指令过后

05:40.460 --> 05:41.460
这个指令首先去加载

05:41.460 --> 05:43.460
这张默认图片

05:43.460 --> 05:44.460
加载它

05:44.460 --> 05:46.460
然后等到

05:46.460 --> 05:48.460
滑动到它的位置的时候

05:48.460 --> 05:51.460
再去替换成真实的图片

05:51.460 --> 05:52.460
而且要保证

05:52.460 --> 05:54.460
真实的图片没有加载完成之后

05:54.460 --> 05:55.460
没有加载完成之前

05:55.460 --> 05:57.460
都还是这个默认图

05:57.460 --> 05:58.460
都还是个默认图

05:58.460 --> 06:00.460
只有等真实的图片加载完成之后

06:00.460 --> 06:02.460
我才有替换成真实的图片

06:02.460 --> 06:05.460
这样子的就是一个无缝切换了

06:05.460 --> 06:07.460
一开始就不会出现那种图片

06:07.460 --> 06:09.460
看不见的情况

06:09.460 --> 06:10.460
一样的意思吧

06:10.460 --> 06:12.460
我们叫做这么一件事

06:12.460 --> 06:13.460
那么这个指令呢

06:13.460 --> 06:14.460
就是按照我们以前学过的

06:14.460 --> 06:16.460
自定义指令的方式去实现

06:16.460 --> 06:18.460
那么我们找到

06:18.460 --> 06:20.460
以前的文念家Directives

06:20.460 --> 06:21.460
我们之前学过了

06:21.460 --> 06:23.460
写过一个loading

06:23.460 --> 06:24.460
loading这么一个就是自定义指令

06:24.460 --> 06:26.460
那么接下来我们再新建个文件

06:26.460 --> 06:29.970
叫做Lessie

06:29.970 --> 06:30.970
有这么一个自定义指令

06:30.970 --> 06:32.970
那么我们知道指令

06:32.970 --> 06:33.970
它其实就是一个对象

06:33.970 --> 06:34.970
可以导出一个函数

06:34.970 --> 06:35.970
导出一个函数呢

06:35.970 --> 06:36.970
是一个语法堂

06:36.970 --> 06:37.970
你可以回忆一下

06:37.970 --> 06:41.970
之前指定的就是

06:41.970 --> 06:42.970
当中的课程里边东西

06:42.970 --> 06:43.970
我当时导出一个函数

06:43.970 --> 06:44.970
函数的话

06:44.970 --> 06:46.970
就相当于是

06:46.970 --> 06:49.970
注册了两个狗子函数

06:49.970 --> 06:51.970
一个是

06:51.970 --> 06:52.970
一个是什么呢

06:52.970 --> 06:54.970
一个spending

06:54.970 --> 06:56.970
一个spend

06:56.970 --> 06:58.970
找到指令的一节吧

06:58.970 --> 07:01.970
我心里边也没有底

07:01.970 --> 07:02.970
我也有点忘了

07:02.970 --> 07:04.970
自定义指令

07:04.970 --> 07:06.970
自定义指令

07:06.970 --> 07:10.750
往下找

07:10.750 --> 07:12.750
你看狗子函数一共有三个

07:12.750 --> 07:13.750
band

07:13.750 --> 07:14.750
inserted

07:14.750 --> 07:16.750
有这么一个update

07:16.750 --> 07:18.750
和component updated

07:18.750 --> 07:19.750
updated

07:19.750 --> 07:20.750
还有unband

07:20.750 --> 07:22.750
那么我们之前导出一个函数

07:22.750 --> 07:24.750
就相当于是band和update

07:24.750 --> 07:26.750
都会调用函数

07:26.750 --> 07:28.750
那么也可以导出一个对象

07:28.750 --> 07:30.750
去具体的配置它

07:30.750 --> 07:32.750
不同的生命周期狗子函数

07:32.750 --> 07:34.750
好 我们这里导出一个对象吧

07:34.750 --> 07:35.750
为什么导出一个对象呢

07:35.750 --> 07:37.750
因为我们这里的处理方式

07:37.750 --> 07:38.750
还不太一样

07:38.750 --> 07:39.750
我们不太关心

07:39.750 --> 07:42.750
它的那个

07:42.750 --> 07:44.750
远述的变化

07:44.750 --> 07:46.750
因为像这个src数据

07:46.750 --> 07:47.750
也不太会变

07:47.750 --> 07:48.750
如果不太会关心

07:48.750 --> 07:49.750
它的远述变化

07:49.750 --> 07:50.750
我们只关心

07:50.750 --> 07:51.750
它一开始初始的时候

07:51.750 --> 07:52.750
是什么样子

07:52.750 --> 07:54.750
然后后来是什么样子

07:54.750 --> 07:55.750
对不对

07:55.750 --> 07:56.750
我们导出这么一个指令

07:56.750 --> 07:58.750
我们先不写任何代码

07:58.750 --> 07:59.750
然后我们在madele

07:59.750 --> 08:00.750
节式里边

08:00.750 --> 08:02.750
先把个指令注册一下

08:02.750 --> 08:03.750
注册全局指令

08:03.750 --> 08:05.750
我们再导出一个指令

08:05.750 --> 08:08.750
就是vnazzy

08:08.750 --> 08:10.750
directives

08:10.750 --> 08:11.750
nazzy

08:12.750 --> 08:13.750
好 接下来我们这里不用

08:13.750 --> 08:14.750
再注册全局指令

08:14.750 --> 08:16.750
那指令也可以不用全局注册

08:16.750 --> 08:19.750
也可以用局部注册也可以

08:19.750 --> 08:20.750
vnazzy

08:20.750 --> 08:22.750
好了 注册全局指令过后

08:22.750 --> 08:24.750
现在我至少能够保证

08:24.750 --> 08:25.750
不爆错了

08:25.750 --> 08:26.750
它指令能够识别了

08:26.750 --> 08:27.750
刚才之前肯定要爆错

08:27.750 --> 08:29.750
现在不会爆错了

08:29.750 --> 08:30.750
它指令能够识别了

08:30.750 --> 08:32.750
只剩到指令里面没有代码

08:32.750 --> 08:33.750
它不知道要做什么

08:33.750 --> 08:34.750
好 那么接下来我们就来做

08:34.750 --> 08:36.750
所以我们要确定一个思路

08:36.750 --> 08:39.750
到底怎么做

08:39.750 --> 08:40.750
我们只希望

08:40.750 --> 08:42.750
如果说我在做一个事情的时候

08:42.750 --> 08:43.750
我就会去想

08:43.750 --> 08:45.750
那么这里的图片

08:45.750 --> 08:46.750
它能夹

08:46.750 --> 08:47.750
就是一个图片

08:47.750 --> 08:48.750
它有些图片能夹仔

08:48.750 --> 08:49.750
需要夹仔

08:49.750 --> 08:51.750
有些图片不需要夹仔

08:51.750 --> 08:52.750
对吧

08:52.750 --> 08:55.750
那么我就希望有这么一个函数

08:55.750 --> 08:56.750
只要一调用它

08:56.750 --> 08:57.750
它就能够设置

08:57.750 --> 08:59.750
当前应该夹仔哪些原因

08:59.750 --> 09:00.750
当然这个做法很多

09:00.750 --> 09:02.750
它不是说一定得这样去做

09:02.750 --> 09:03.750
你可以去想象

09:03.750 --> 09:05.750
你自己会有什么样的去想法

09:05.750 --> 09:07.750
set

09:11.750 --> 09:15.750
我希望

09:15.750 --> 09:18.750
调用该函数

09:18.750 --> 09:22.750
就可以设置那些

09:22.750 --> 09:26.750
合适的图片

09:26.750 --> 09:27.750
一调那个函数

09:27.750 --> 09:29.750
比方我们滚动它滚动到这个位置

09:29.750 --> 09:30.750
我一调这个函数

09:30.750 --> 09:32.750
那么它就会设置这两张图片

09:32.750 --> 09:33.750
目前是

09:33.750 --> 09:34.750
就这两张

09:34.750 --> 09:35.750
还有下面这张

09:35.750 --> 09:36.750
这张

09:36.750 --> 09:37.750
这张

09:37.750 --> 09:38.750
这三张图片

09:38.750 --> 09:40.750
它要把它显示出来

09:40.750 --> 09:41.750
对不对

09:41.750 --> 09:42.750
我就希望有这么一个函数

09:42.750 --> 09:44.750
那么我们假设

09:44.750 --> 09:46.750
假设有了这个函数过后

09:46.750 --> 09:47.750
你想一想

09:47.750 --> 09:49.750
什么时候调用那个函数

09:49.750 --> 09:51.750
所以滚动调滚动的时候

09:51.750 --> 09:52.750
就要调用那个函数

09:52.750 --> 09:53.750
对不对

09:53.750 --> 09:56.750
那我们怎么样知道滚动调滚动了呢

09:56.750 --> 09:57.750
我们之前写过这个代码

09:57.750 --> 09:59.750
滚动调是否在这里

09:59.750 --> 10:00.750
是在这里

10:00.750 --> 10:01.750
触发滚动事件

10:01.750 --> 10:02.750
对吧

10:02.750 --> 10:03.750
这里一个一分之八十

10:03.750 --> 10:04.750
因为我们知道一分之八十

10:04.750 --> 10:05.750
它个事件总线

10:05.750 --> 10:07.750
是可以在任何模块里面

10:07.750 --> 10:08.750
触发事件

10:08.750 --> 10:09.750
去监听事件的

10:09.750 --> 10:10.750
所以我们这里把这个事件

10:10.750 --> 10:11.750
总线导出

10:11.750 --> 10:13.750
我们之前都没有导出

10:13.750 --> 10:18.700
我们这里还是这样写一下吧

10:18.700 --> 10:19.700
一方面

10:19.700 --> 10:20.700
我把它设置到圆形里面

10:20.700 --> 10:21.700
方便每一个组件里面

10:21.700 --> 10:22.700
内部非常方便的使用

10:22.700 --> 10:23.700
另外

10:23.700 --> 10:25.700
我为了让别的JS模块

10:25.700 --> 10:26.700
也能使用这个事件总线

10:26.700 --> 10:28.700
我把这个事件总线也导出

10:28.700 --> 10:29.700
好了

10:29.700 --> 10:30.700
那有了这个事件总线过后

10:30.700 --> 10:33.700
你看这边是非常方便的

10:33.700 --> 10:34.700
导入这个事件总线

10:34.700 --> 10:35.700
event bus

10:35.700 --> 10:40.020
from

10:41.020 --> 10:44.020
event bus

10:44.020 --> 10:45.020
好

10:45.020 --> 10:46.020
有了这个事件总线过后

10:46.020 --> 10:47.020
我们这里这里是不是可以注册啊

10:47.020 --> 10:48.020
对吧

10:48.020 --> 10:50.020
event bus

10:50.020 --> 10:52.020
当什么发生的时候

10:52.020 --> 10:54.020
当manage scroll的时候

10:54.020 --> 10:56.020
当这件事情发生的时候

10:56.020 --> 10:59.020
我就做出一个函数处理

10:59.020 --> 11:00.020
比方说我们这里的

11:00.020 --> 11:01.020
有什么函数呢

11:01.020 --> 11:02.020
有一个方式

11:02.020 --> 11:04.020
这里它会传给一个动物进来

11:04.020 --> 11:05.020
对吧

11:05.020 --> 11:08.020
看一下哪个动物元素在滚动

11:08.020 --> 11:09.020
我们可能会要

11:09.020 --> 11:11.020
那我现在也说不清楚要不要

11:11.020 --> 11:12.020
我们先写到这吧

11:12.020 --> 11:13.020
然后这个函数里边

11:13.020 --> 11:14.020
我要做什么

11:14.020 --> 11:15.020
就调用这个setsimages

11:15.020 --> 11:17.020
你看我们现在就写出

11:17.020 --> 11:18.020
一个基本的结构了

11:18.020 --> 11:20.020
单码就是一点点开发出来的

11:20.020 --> 11:21.020
我们这边的

11:21.020 --> 11:23.020
输出一下setsimages

11:23.020 --> 11:25.020
你看我们在普通的JS模块里边

11:25.020 --> 11:28.020
也可以与先监听事件总线的东西

11:28.020 --> 11:29.020
好

11:29.020 --> 11:30.020
我们往下走

11:30.020 --> 11:31.020
你看

11:31.020 --> 11:32.020
就调用这个setsimages

11:32.020 --> 11:33.020
对不对

11:33.020 --> 11:34.020
但是它触发的由于

11:34.020 --> 11:35.020
它触发的实在是太快了

11:35.020 --> 11:37.020
我们希望有个db

11:37.020 --> 11:38.020
有一个就是

11:39.020 --> 11:40.020
函数防斗

11:40.020 --> 11:41.020
不要触发的那么快

11:41.020 --> 11:42.020
于是这个也很简单

11:42.020 --> 11:43.020
我们可以用

11:43.020 --> 11:44.020
import

11:45.020 --> 11:47.020
导入这个db

11:47.020 --> 11:48.020
什么

11:48.020 --> 11:50.020
我们之前写过一个utl对吧

11:50.020 --> 11:51.020
utl

11:51.020 --> 11:53.020
那么这里有一个db

11:54.020 --> 11:57.020
我们这里写个写成一个函数吧

11:57.020 --> 11:58.020
放个写

11:58.020 --> 11:59.020
handle

11:59.020 --> 12:01.020
处理什么screw

12:01.020 --> 12:03.020
处理screw的函数

12:03.020 --> 12:04.020
把一个动

12:05.020 --> 12:07.020
这个函数里边我们调用setsimages

12:07.020 --> 12:09.020
我们把函数防斗一下

12:09.020 --> 12:11.020
这里我就用db

12:11.020 --> 12:13.020
db

12:13.020 --> 12:15.020
它有几个函数

12:15.020 --> 12:16.020
我看一下

12:16.020 --> 12:18.020
在之前utl

12:18.020 --> 12:19.020
db

12:19.020 --> 12:21.020
一个是d格式函数

12:21.020 --> 12:23.020
一个是duration

12:23.020 --> 12:24.020
duration

12:24.020 --> 12:25.020
好来吧

12:25.020 --> 12:26.020
我们这里的d格式函数

12:26.020 --> 12:27.020
函数就是handle

12:27.020 --> 12:28.020
screw

12:28.020 --> 12:29.020
然后duration

12:29.020 --> 12:30.020
我们就设置为100

12:30.020 --> 12:31.020
100也OK

12:31.020 --> 12:32.020
或者是50 30都行

12:32.020 --> 12:33.020
我设置50吧

12:33.020 --> 12:34.020
好

12:34.020 --> 12:35.020
那么现在让我们看一下

12:35.020 --> 12:36.020
发现

12:36.020 --> 12:37.020
现在

12:37.020 --> 12:38.020
运行

12:38.020 --> 12:40.020
你看现在我不断的去触发这个滚动条

12:40.020 --> 12:41.020
不断触发这个滚动条

12:41.020 --> 12:42.020
没有什么问题

12:42.020 --> 12:43.020
然后停止过后

12:43.020 --> 12:45.020
你看才调用setsimages

12:45.020 --> 12:46.020
OK

12:46.020 --> 12:47.020
好

12:47.020 --> 12:48.020
这个没问题吧

12:48.020 --> 12:49.020
OK

12:49.020 --> 12:51.020
那么现在我们就写出一个基本结构就出来了

12:53.020 --> 12:55.020
完美肯定是还没有完

12:55.020 --> 12:57.020
那么还有什么事情呢

12:57.020 --> 12:59.020
那么现在有遇到一个很大的问题就是

12:59.020 --> 13:01.020
这个setsimages这个方法里边

13:01.020 --> 13:03.020
我们要设置

13:04.020 --> 13:06.020
就是在很多图片里边

13:06.020 --> 13:09.020
找到那些合适的需要夹仔的图片对不对

13:09.020 --> 13:11.020
我们要定位这件事情

13:11.020 --> 13:13.020
那我怎么样知道

13:13.020 --> 13:15.020
哪些图片要夹仔呢

13:15.020 --> 13:18.020
首先我肯定需要找到很多图片

13:18.020 --> 13:20.020
一张图片一张图片去看

13:20.020 --> 13:22.020
看第一张图片需不需要夹仔

13:22.020 --> 13:24.020
看第二张图片是不是需要夹仔

13:24.020 --> 13:26.020
也就是说这里需不需要一个数组啊

13:26.020 --> 13:28.020
我得知道

13:28.020 --> 13:29.020
这个

13:29.020 --> 13:31.020
从这个数组里边我得知道

13:31.020 --> 13:34.020
那个哪些图片是需要夹仔的

13:34.020 --> 13:37.020
哪些图片是不需要夹仔的

13:37.020 --> 13:38.020
对不对

13:38.020 --> 13:39.020
我是不是得有个数组啊

13:39.020 --> 13:40.020
我这里有数组吗

13:40.020 --> 13:41.020
没有数组

13:41.020 --> 13:42.020
没有数组很简单

13:42.020 --> 13:44.020
我们去设置这么一个数组就行了

13:44.020 --> 13:45.020
images

13:46.020 --> 13:47.020
images

13:47.020 --> 13:49.020
有这么一个数组

13:49.020 --> 13:50.020
这个数组是空的

13:50.020 --> 13:52.020
什么时候往个数组里边加东西呢

13:52.020 --> 13:54.020
慢慢的我们就把一个

13:54.020 --> 13:55.020
带马一点点去靠近

13:55.020 --> 13:56.020
这个数组是空的

13:56.020 --> 13:58.020
我这里肯定要循环数组呗

13:58.020 --> 13:59.020
一个个看

13:59.020 --> 14:00.020
那数组是空的

14:00.020 --> 14:03.020
我什么时候往这个数组里边加呢

14:03.020 --> 14:04.020
什么时候加

14:04.020 --> 14:06.020
是不是跟指令绑定有关系啊

14:06.020 --> 14:08.020
我这个指令绑定进来了

14:08.020 --> 14:10.020
是不是这个images元素

14:10.020 --> 14:11.020
就要加入进来

14:11.020 --> 14:13.020
是这个道理吧

14:13.020 --> 14:14.020
所以说我这边

14:14.020 --> 14:15.020
什么时候加

14:15.020 --> 14:17.020
是不是在这个指令里边写个

14:17.020 --> 14:19.020
勾字函数band

14:19.020 --> 14:20.020
这个勾字函数

14:20.020 --> 14:22.020
也有band

14:22.020 --> 14:24.020
band

14:24.020 --> 14:27.020
当band的时候是不是有一个元素进来了

14:27.020 --> 14:29.020
一个元素创建出来了

14:29.020 --> 14:30.020
只运行一次

14:30.020 --> 14:32.020
元素创建的时候运行一次

14:32.020 --> 14:33.020
一个元素进来了

14:33.020 --> 14:35.020
这个元素进来了过后呢

14:35.020 --> 14:36.020
我是不是要把这个EL

14:36.020 --> 14:38.020
加到这个images里面去

14:38.020 --> 14:39.020
当然这个images数组里边

14:39.020 --> 14:41.020
每一个它不仅仅是一个动物对象

14:41.020 --> 14:42.020
你要如果说

14:42.020 --> 14:43.020
每一个是个动物对象的话

14:43.020 --> 14:44.020
那光有动物对象也不够啊

14:44.020 --> 14:45.020
它信息不足

14:45.020 --> 14:47.020
我希望了每一个是一个对象

14:47.020 --> 14:50.020
往这个images里面加一下

14:50.020 --> 14:52.020
加一下

14:52.020 --> 14:54.020
它的动物呢

14:54.020 --> 14:56.020
把它保存起来

14:56.020 --> 14:57.020
然后呢

14:57.020 --> 14:58.020
它的那个

14:58.020 --> 14:59.020
其他的属性呢

14:59.020 --> 15:01.020
比方说它的src

15:01.020 --> 15:02.020
src地址

15:02.020 --> 15:04.020
这个图片应该的最终的

15:04.020 --> 15:06.020
它的图片路径在哪呢

15:06.020 --> 15:08.020
是不是通过这个属性的纸

15:08.020 --> 15:09.020
这个指令的纸

15:09.020 --> 15:11.020
通过指令的纸拿到

15:11.020 --> 15:12.020
怎么来拿指令的纸呢

15:12.020 --> 15:13.020
是不是banding

15:13.020 --> 15:14.020
比较value

15:14.020 --> 15:15.020
对不对

15:15.020 --> 15:16.020
还记得吗

15:16.020 --> 15:17.020
记不得的话

15:17.020 --> 15:18.020
我们可以查文档

15:18.020 --> 15:19.020
记不得去查文档

15:19.020 --> 15:21.020
你看banding是不是value

15:21.020 --> 15:22.020
指定绑定的纸

15:22.020 --> 15:23.020
你像其他的什么

15:23.020 --> 15:24.020
指令参数啊

15:24.020 --> 15:25.020
指令修饰文这里都用不到

15:25.020 --> 15:27.020
那我就把指令的纸放进去

15:27.020 --> 15:28.020
我就告诉他

15:28.020 --> 15:29.020
我数组里面有多了一个元素了

15:29.020 --> 15:30.020
这个元素的

15:30.020 --> 15:31.020
是动物元素是这个

15:31.020 --> 15:33.020
它的真实的链接地址在这

15:33.020 --> 15:35.020
然后呢

15:35.020 --> 15:36.020
还有什么呢

15:36.020 --> 15:38.020
其他的属性呢

15:38.020 --> 15:39.020
我暂时呢

15:39.020 --> 15:40.020
还不考虑

15:40.020 --> 15:42.020
我们就先把它加进去

15:42.020 --> 15:43.020
以后呢

15:43.020 --> 15:45.020
我们需要更多的再说

15:45.020 --> 15:47.020
好来我们来看一下啊

15:47.020 --> 15:49.020
看一下这个images

15:49.020 --> 15:50.020
这个数组

15:50.020 --> 15:52.020
数组的纸

15:52.020 --> 15:53.020
接下来我们来输出

15:53.020 --> 15:54.020
怎么输出呢

15:54.020 --> 15:55.020
这为了

15:55.020 --> 15:56.020
简单一点吧

15:56.020 --> 15:58.020
我去用一个set to interval

15:58.020 --> 15:59.020
set to interval吧

15:59.020 --> 16:03.020
每隔两秒钟输出一下

16:03.020 --> 16:05.020
这个images的纸

16:05.020 --> 16:06.020
images

16:06.020 --> 16:07.020
然后呢

16:07.020 --> 16:08.020
我们这里每隔两秒钟

16:08.020 --> 16:11.460
随便简单测试一下

16:11.460 --> 16:13.460
好你看

16:13.460 --> 16:15.460
现在有两张图片

16:15.460 --> 16:19.150
怎么才两张

16:19.150 --> 16:21.150
这次运气不好

16:21.150 --> 16:22.150
怎么才两张

16:22.150 --> 16:23.150
第一张

16:23.150 --> 16:24.150
还真只有两张图片

16:24.150 --> 16:25.150
这次运气不好

16:25.150 --> 16:27.150
我们整个文章只有两张图片

16:27.150 --> 16:28.150
刷新

16:28.150 --> 16:30.530
再来

16:30.530 --> 16:31.530
还是只有两张

16:31.530 --> 16:32.530
一张两张

16:32.530 --> 16:34.530
没了吗

16:34.530 --> 16:35.530
再来

16:35.530 --> 16:38.350
再多一点图片吧

16:38.350 --> 16:39.350
现在有三张

16:39.350 --> 16:40.350
太少了

16:40.350 --> 16:42.350
干脆我在默克里面改一下

16:42.350 --> 16:44.350
默克里面改一下

16:44.350 --> 16:46.350
把纳好圈去掉吧

16:46.350 --> 16:48.350
都有图片

16:50.350 --> 16:52.350
你看是不是十张图片

16:52.350 --> 16:53.350
对不对

16:53.350 --> 16:54.350
有十张图片需要处理

16:54.350 --> 16:56.350
如果说我切换到别的页面呢

16:56.350 --> 16:57.350
现在我们考虑这个问题

16:57.350 --> 16:58.350
我们切换到别的页面

16:58.350 --> 17:00.350
是不是我就不再去控制

17:00.350 --> 17:02.350
图片的显示了

17:02.350 --> 17:03.350
对不对

17:03.350 --> 17:05.350
如果说你不断的去控制图片

17:05.350 --> 17:06.350
就会出现你比较容易

17:06.350 --> 17:08.350
又回到文章页

17:08.350 --> 17:10.350
又回到文章页那一看

17:10.350 --> 17:11.350
是不是二十张图片了

17:11.350 --> 17:14.350
那我一翻页

17:14.350 --> 17:16.350
翻页还出了问题了

17:16.350 --> 17:18.350
翻页什么

17:18.350 --> 17:20.350
我们把这个问题解决一下

17:20.350 --> 17:23.350
在blog历史里面

17:23.350 --> 17:25.350
在这

17:25.350 --> 17:26.350
这是blog历史的图片里面

17:26.350 --> 17:27.350
这个问题简单

17:27.350 --> 17:28.350
我基本上知道了

17:28.350 --> 17:30.350
因为我们把这个Ref改过了

17:30.350 --> 17:31.350
改过了过后了

17:31.350 --> 17:34.350
我们现在找之前的抗填的

17:34.350 --> 17:35.350
在这

17:35.350 --> 17:36.350
设置滚动条高度为0

17:36.350 --> 17:37.350
我们可以用Mate抗填的

17:37.350 --> 17:38.350
对吧

17:38.350 --> 17:39.350
其他都没啥

17:39.350 --> 17:40.350
重新来

17:40.350 --> 17:41.350
重新来

17:41.350 --> 17:42.350
刷新

17:42.350 --> 17:43.350
我们先看分页

17:43.350 --> 17:44.350
现在有十张图片

17:44.350 --> 17:45.350
加到数组里面去了

17:45.350 --> 17:46.350
我们点分页

17:46.350 --> 17:47.350
第三页

17:47.350 --> 17:49.350
你看是不是二十张图片了

17:49.350 --> 17:50.350
那你可以想想

17:50.350 --> 17:51.350
到翻到页过后

17:51.350 --> 17:52.350
之前那个图片

17:52.350 --> 17:53.350
还有必要存在吗

17:53.350 --> 17:54.350
我还有必要去控制

17:54.350 --> 17:55.350
它要不要显示吗

17:55.350 --> 17:56.350
元素都没了

17:56.350 --> 17:57.350
对不对

17:57.350 --> 17:58.350
或者是我们切换到手页的时候

17:58.350 --> 17:59.350
之前的图片

17:59.350 --> 18:00.350
所有图片都没了

18:01.350 --> 18:02.350
是不是这个道理

18:02.350 --> 18:03.350
我还用这个数组

18:03.350 --> 18:04.350
是不是里面要删除掉

18:04.350 --> 18:05.350
所以我们还要控制一下

18:05.350 --> 18:07.350
在如何在数组里面去删除

18:07.350 --> 18:08.350
怎么去删除呢

18:08.350 --> 18:09.350
是不是用Unbanned

18:12.350 --> 18:13.350
去删除一下

18:14.350 --> 18:15.350
编辑是我都不要了

18:16.350 --> 18:17.350
那怎么来删除呢

18:17.350 --> 18:18.350
其实非常简单

18:18.350 --> 18:19.350
我就把这个页面

18:19.350 --> 18:20.350
几次重新复职

18:20.350 --> 18:21.350
筛选嘛

18:22.350 --> 18:24.350
我们要找什么呢

18:24.350 --> 18:26.350
找这个图片里面

18:26.350 --> 18:29.350
它的动物元素等于这个

18:30.350 --> 18:33.350
找了MH对象里面的动物

18:33.350 --> 18:35.350
找它对象里面的动物

18:35.350 --> 18:36.350
等于什么呢

18:36.350 --> 18:38.350
不等于它的

18:38.350 --> 18:39.350
不等于它的

18:39.350 --> 18:40.350
我才要保留

18:40.350 --> 18:41.350
其他的时候不保留了

18:41.350 --> 18:43.350
就从这个数组里面删除掉

18:44.350 --> 18:45.350
来 保存

18:46.350 --> 18:47.350
Unbanned什么时候执行

18:47.350 --> 18:49.350
Unbanned执行的时间点就是

18:52.350 --> 18:53.350
Unbanned执行的时间点

18:53.350 --> 18:56.350
就是那个元素消失的时间点

18:56.350 --> 18:57.350
好 我们进入文章

18:58.350 --> 18:59.350
图片压进来了

18:59.350 --> 19:00.350
你看是不是十章

19:00.350 --> 19:01.350
对不对

19:01.350 --> 19:02.350
咱们回到首页

19:05.980 --> 19:06.980
这里出了问题了

19:06.980 --> 19:08.980
我是一个const 对吧

19:08.980 --> 19:09.980
把它变成net

19:11.980 --> 19:12.980
再来

19:13.980 --> 19:14.980
到文章

19:14.980 --> 19:16.980
我们先把这个数组搞定

19:17.980 --> 19:18.980
回到首页

19:21.620 --> 19:22.620
你看是不是变空数组了

19:22.620 --> 19:23.620
又回到文章

19:23.620 --> 19:26.570
然后呢

19:27.570 --> 19:28.570
翻页

19:28.570 --> 19:33.740
是不是没问题吧

19:33.740 --> 19:34.740
只有十章

19:34.740 --> 19:36.740
始终是得到当前的图片

19:36.740 --> 19:38.740
我们只需要控制的哪些图片

19:38.740 --> 19:39.740
我们这个数组里面就有那些

19:39.740 --> 19:41.740
是不是通过这两个

19:41.740 --> 19:42.740
勾字函数就处理好了

19:42.740 --> 19:43.740
其实我们指令里面

19:43.740 --> 19:45.740
不会做太多的代码

19:45.740 --> 19:46.740
指令里面需要做的代码就是这个

19:46.740 --> 19:48.740
我们主要是在滚动的位置

19:48.740 --> 19:50.740
不断的滚动的时候

19:50.740 --> 19:52.740
指令的这里只是维护一个数组

19:52.740 --> 19:54.740
表示我哪些图片需要处理

19:55.740 --> 19:56.740
然后呢

19:56.740 --> 19:57.740
我们在滚动的时候

19:57.740 --> 19:59.740
不断的去处理这些图片

19:59.740 --> 20:01.740
是这么一个意思

20:02.740 --> 20:03.740
好 那么来吧

20:03.740 --> 20:04.740
我们在滚动的时候

20:04.740 --> 20:05.740
不断的去处理这个图片

20:06.740 --> 20:07.740
现在要写这个函数了

20:07.740 --> 20:09.740
这个函数写完是不是就没了

20:09.740 --> 20:10.740
还有啥

20:10.740 --> 20:11.740
就没了

20:12.740 --> 20:14.740
关键是这个函数里面怎么来操作

20:15.740 --> 20:16.740
怎么控制呢

20:16.740 --> 20:18.740
我得知道

20:18.740 --> 20:19.740
每一张图片

20:19.740 --> 20:22.740
它是不是在一个视口范围内

20:22.740 --> 20:23.740
是不是可见

20:23.740 --> 20:25.740
是不是循环每一个图片

20:26.740 --> 20:27.740
对不对

20:29.740 --> 20:30.740
循环每一张图片

20:31.740 --> 20:33.740
处理该图片

20:35.740 --> 20:36.740
好 那么处理的

20:36.740 --> 20:37.740
处理一张图片

20:37.740 --> 20:38.740
单张图片的时候

20:38.740 --> 20:40.740
我们就可以单独写个函数

20:40.740 --> 20:41.740
方形

20:42.740 --> 20:43.740
set

20:43.740 --> 20:44.740
img

20:44.740 --> 20:45.740
刚才是setimg

20:45.740 --> 20:46.740
对吧 一个复数

20:46.740 --> 20:47.740
现在我们setimg

20:47.740 --> 20:48.740
你给我传一个图片进来

20:49.740 --> 20:50.740
我来控制这个图片

20:50.740 --> 20:51.740
那个图片是一个对象

20:51.740 --> 20:52.740
就在每个对象

20:53.740 --> 20:54.740
你给我传进来

20:55.740 --> 20:56.740
setimg

20:56.740 --> 20:58.740
像这些处理的方式

20:58.740 --> 20:59.740
这些逻辑思维的方式

20:59.740 --> 21:00.740
大家听多了

21:00.740 --> 21:02.740
要慢慢去体会

21:02.740 --> 21:04.740
最好能够学会这种处理方式

21:04.740 --> 21:05.740
那我就不用每个代码

21:05.740 --> 21:06.740
就继续讲怎么去实现

21:08.740 --> 21:09.740
其实这个动物

21:09.740 --> 21:10.740
发现好像没有什么用

21:10.740 --> 21:11.740
就不要了

21:12.740 --> 21:13.740
那么我们现在这里要做的事情

21:13.740 --> 21:15.740
就是看一看这个图片

21:15.740 --> 21:16.740
你看

21:16.740 --> 21:17.740
问题就转换成了

21:17.740 --> 21:18.740
你给我一个动物

21:18.740 --> 21:19.740
给我一个就是对象

21:19.740 --> 21:20.740
对象里面有动物元素

21:20.740 --> 21:22.740
有它的真实的src地址

21:22.740 --> 21:24.740
对吧 有这种各种信息

21:24.740 --> 21:26.740
我现在就要知道

21:26.740 --> 21:28.740
这个图片

21:28.740 --> 21:31.740
它要进行哪些处理

21:32.740 --> 21:33.740
它要进行哪些处理的

21:33.740 --> 21:35.740
我们首先考虑这么一种情况

21:35.740 --> 21:37.740
这个图片是不是已经处理过了

21:37.740 --> 21:39.740
有没有已经处理过了

21:40.740 --> 21:44.740
该图片是否已经处理过了

21:44.740 --> 21:45.740
已经处理过了

21:45.740 --> 21:46.740
是不是就不用再处理了

21:46.740 --> 21:47.740
就以前

21:47.740 --> 21:48.740
比方说

21:48.740 --> 21:49.740
我们一开始

21:49.740 --> 21:50.740
翻到这的时候

21:50.740 --> 21:51.740
这个图片就已经显示出来了

21:51.740 --> 21:53.740
以后我又划上去的时候

21:54.740 --> 21:55.740
是不是又要循环这个数字

21:55.740 --> 21:56.740
又要重新去处理图片

21:56.740 --> 21:57.740
看到这张图片的时候

21:57.740 --> 21:59.740
也之前已经生成了真实的图片了

21:59.740 --> 22:00.740
我还处理吗

22:00.740 --> 22:01.740
就不处理了

22:01.740 --> 22:02.740
对不对

22:02.740 --> 22:03.740
所以说我得有一个东西来判断

22:03.740 --> 22:04.740
它是不是处理过了

22:04.740 --> 22:05.740
那怎么判断呢

22:05.740 --> 22:06.740
非常简单的方式

22:06.740 --> 22:07.740
就加一个属性

22:08.740 --> 22:09.740
什么属性呢

22:09.740 --> 22:10.740
handled

22:10.740 --> 22:11.740
是否已经处理过了

22:11.740 --> 22:13.740
一开始肯定没有处理

22:13.740 --> 22:15.740
是否已经处理过了

22:15.740 --> 22:16.740
一开始没有处理

22:16.740 --> 22:17.740
没有处理就处理

22:17.740 --> 22:19.740
那如果说已经处理过了

22:19.740 --> 22:20.740
那怎么办呢

22:20.740 --> 22:21.740
逻辑代码就变成这样子

22:21.740 --> 22:22.740
handled

22:23.740 --> 22:24.740
已经处理过了

22:24.740 --> 22:25.740
我就return

22:26.740 --> 22:27.740
已经处理过了

22:28.740 --> 22:30.740
不需要再处理

22:31.740 --> 22:32.740
直接就结束了

22:32.740 --> 22:33.740
好

22:33.740 --> 22:34.740
如果说没有处理过

22:34.740 --> 22:35.740
那么这里就是处理图片

22:36.740 --> 22:37.740
处理图片完了过后

22:37.740 --> 22:38.740
当然你不要忘记了

22:38.740 --> 22:39.740
给它的handled的所谓处

22:39.740 --> 22:41.740
表示已经处理过了

22:42.740 --> 22:44.740
表示已经处理过了

22:45.740 --> 22:46.740
你看

22:46.740 --> 22:47.740
逻辑代码就一点点出来的

22:48.740 --> 22:49.740
好

22:49.740 --> 22:50.740
那么接下来我们就看一下

22:50.740 --> 22:51.740
怎么来处理图片

22:53.740 --> 22:54.740
怎么来处理图片

22:54.740 --> 22:55.740
那么我们为了

22:55.740 --> 22:57.740
让大家看到这个效果了

22:57.740 --> 22:58.740
我这里就输出一下吧

22:58.740 --> 22:59.740
这个图片的

23:02.740 --> 23:03.740
以处理

23:05.740 --> 23:06.740
我平时写代码的话

23:06.740 --> 23:08.740
不会去写那么多输出这些东西

23:08.740 --> 23:09.740
这是掌柯的话

23:09.740 --> 23:11.740
给你们看一下这个效果

23:11.740 --> 23:13.740
以处理这个图片的src

23:14.740 --> 23:16.740
它里面不是一个src地址

23:17.740 --> 23:18.740
好 咱们看一下

23:18.740 --> 23:19.740
刷新

23:23.010 --> 23:25.010
它没有输出任何东西

23:25.010 --> 23:27.010
为什么没有输出任何东西

23:27.010 --> 23:28.010
因为一开始src1没几

23:28.010 --> 23:29.010
没有运行

23:30.010 --> 23:31.010
为什么没有运行呢

23:31.010 --> 23:32.010
哪里掉了呢

23:32.010 --> 23:33.010
这里掉了呢

23:33.010 --> 23:34.010
它没有运行

23:34.010 --> 23:35.010
它就没有运行

23:35.010 --> 23:36.010
那么它什么时候

23:36.010 --> 23:39.010
因为它是不是一开始要运行一下

23:39.010 --> 23:40.010
什么时候运行

23:40.010 --> 23:41.010
我们好好想一想

23:43.010 --> 23:44.010
一开始什么时候运行一下

23:44.010 --> 23:46.010
是不是就是个图片元素

23:46.010 --> 23:47.010
进来的过后

23:48.010 --> 23:49.010
这些图片元素马上要看一下

23:49.010 --> 23:50.010
它能不能显示

23:50.010 --> 23:52.010
马上就要处理一下

23:53.010 --> 23:54.010
是不是这个意思

23:55.010 --> 23:56.010
马上就要处理

23:56.010 --> 23:57.010
所以说现在我们

23:58.010 --> 23:59.010
干嘛呢

23:59.010 --> 24:00.010
我们是不是在

24:00.010 --> 24:02.010
把这个加到这个数组里边去了

24:02.010 --> 24:03.010
过后

24:03.010 --> 24:05.010
马上就要看一下

24:05.010 --> 24:06.010
这一下

24:06.010 --> 24:07.010
就这个玩意

24:10.090 --> 24:12.090
我把它加到这个数组里边去了

24:12.090 --> 24:14.090
马上就要看一下它

24:14.090 --> 24:15.090
能不能处理

24:15.090 --> 24:16.090
能处理就处理

24:17.090 --> 24:19.090
立即处理它

24:20.090 --> 24:21.090
我们这里来

24:22.090 --> 24:23.090
set image

24:24.090 --> 24:25.090
把image传进去

24:25.090 --> 24:26.090
立即要处理一次

24:26.090 --> 24:28.090
这个代码我把它加上

24:29.090 --> 24:30.090
你看

24:30.090 --> 24:32.090
它一开始处理到这一图片

24:33.090 --> 24:34.090
咱们继续

24:34.090 --> 24:35.090
那么我们来看一下

24:36.090 --> 24:38.090
首先我们清楚什么叫以处理

24:39.090 --> 24:40.090
什么叫以处理

24:40.090 --> 24:42.090
以处理的意思就是

24:42.090 --> 24:44.090
它的真实图片已经夹载出来了

24:44.090 --> 24:46.090
已经在那了

24:46.090 --> 24:47.090
这个东西叫做以处理

24:47.090 --> 24:49.090
或者是正在夹载它的

24:50.090 --> 24:51.090
真实图片

24:51.090 --> 24:53.090
就是已经开始夹载了

24:53.090 --> 24:54.090
我们就不用管它了

24:54.090 --> 24:56.090
让它慢慢去夹载就完事了

24:56.090 --> 24:57.090
什么叫为处理

24:57.090 --> 24:59.090
就它没有夹载过真实图片

25:00.090 --> 25:01.090
对吧

25:01.090 --> 25:02.090
没有夹载过真实图片

25:02.090 --> 25:03.090
我们都不要看一下

25:03.090 --> 25:04.090
它能不能夹载真实图片

25:04.090 --> 25:05.090
要进行处理

25:05.090 --> 25:06.090
已经夹载真实图片

25:06.090 --> 25:08.090
过后我就再也不用去管它

25:08.090 --> 25:10.090
甚至呢我就可以

25:10.090 --> 25:13.090
其实我甚至都觉得可以

25:13.090 --> 25:14.090
不要这个属性了

25:14.090 --> 25:16.090
直接把这个数组里边删了都可以

25:16.090 --> 25:19.090
也其实要不然就直接从数组里边删了

25:19.090 --> 25:21.090
我有这个想法

25:21.090 --> 25:22.090
我有这个想法

25:22.090 --> 25:26.090
我甚至想把它直接从数组里边把它删掉

25:28.090 --> 25:30.090
那来吧

25:30.090 --> 25:31.090
那来吧

25:31.090 --> 25:33.090
要不然我就直接删掉得了

25:33.090 --> 25:35.090
或者是用很多的

25:35.090 --> 25:36.090
都行吧都行

25:36.090 --> 25:37.090
删掉也行

25:37.090 --> 25:38.090
这里也行

25:38.090 --> 25:39.090
要行吧

25:39.090 --> 25:40.090
我就先这种方式吧

25:40.090 --> 25:41.090
删掉的

25:41.090 --> 25:42.090
算了算了

25:42.090 --> 25:43.090
删掉删掉

25:43.090 --> 25:45.090
为什么老是这样猶豫来着猶豫去呢

25:45.090 --> 25:46.090
删掉更好一点

25:46.090 --> 25:47.090
把这个删掉的去掉

25:47.090 --> 25:48.090
不要这个属性了

25:48.090 --> 25:49.090
那我就

25:49.090 --> 25:50.090
已经处理过了

25:50.090 --> 25:51.090
我就删掉了

25:51.090 --> 25:52.090
就处理过了

25:52.090 --> 25:55.090
只要处理过完了过后就把它删掉

25:55.090 --> 25:56.090
好那么这样子

25:56.090 --> 25:58.090
我现在把这个猴子的属性去掉过后

25:58.090 --> 25:59.090
你看

25:59.090 --> 26:00.090
剩下的又不太一样了

26:00.090 --> 26:01.090
目前又不太一样了

26:01.090 --> 26:04.090
就是一开始你看处理了这么多了

26:04.090 --> 26:05.090
然后我下滑

26:05.090 --> 26:07.090
他又要重复处理

26:07.090 --> 26:08.090
那以后我把删掉过后

26:08.090 --> 26:09.090
那就不处理了

26:09.090 --> 26:12.090
那比方说我处理完一个就删一个

26:12.090 --> 26:13.090
处理完一个就删一个

26:13.090 --> 26:14.090
我删

26:14.090 --> 26:16.090
AMG

26:16.090 --> 26:18.090
重新复制

26:18.090 --> 26:20.090
AMG

26:20.090 --> 26:22.090
FILTER

26:22.090 --> 26:24.090
老是猶豫

26:24.090 --> 26:26.090
I等不等于AMG

26:26.090 --> 26:27.090
因为他这个传过来

26:27.090 --> 26:28.090
传过来不是动作对象

26:28.090 --> 26:30.090
传过来是整个的一个对象

26:30.090 --> 26:31.090
让我判断一下

26:31.090 --> 26:32.090
是不是相等

26:32.090 --> 26:33.090
是不是不等

26:33.090 --> 26:34.090
不等的话我才保留

26:34.090 --> 26:35.090
相等的话就不保留了

26:35.090 --> 26:37.090
表示已经该删掉了

26:37.090 --> 26:38.090
好那么现在我下滑

26:38.090 --> 26:39.090
是没了

26:39.090 --> 26:40.090
对吧

26:40.090 --> 26:41.090
这些处理比方都已经处理过了

26:41.090 --> 26:43.090
他就不会再重新处理了

26:43.090 --> 26:44.090
OK

26:44.090 --> 26:47.090
那么现在我们来处理图片

26:47.090 --> 26:49.090
怎么来处理图片呢

26:49.090 --> 26:53.090
首先我要做的事情就是

26:53.090 --> 26:55.090
我看一下

26:55.090 --> 26:57.090
这个图片

26:57.090 --> 27:00.090
是不是在一个合适的位置

27:00.090 --> 27:01.090
什么叫合适的位置

27:01.090 --> 27:04.090
是不是在四口的范围内

27:04.090 --> 27:06.090
该图片是否在

27:06.090 --> 27:08.090
四口范围内

27:08.090 --> 27:09.090
那我怎么样知道

27:09.090 --> 27:10.090
他这个图片

27:10.090 --> 27:11.090
是不是在四口范围内呢

27:11.090 --> 27:12.090
我们知道

27:12.090 --> 27:13.090
它里面有个属性动

27:13.090 --> 27:14.090
对吧

27:14.090 --> 27:15.090
之前加了一个动物元素

27:15.090 --> 27:17.090
动物元素里面有个方法

27:17.090 --> 27:21.090
Bunding Client Rate

27:21.090 --> 27:23.090
所以这个方法

27:23.090 --> 27:25.090
在四口的那个矩形区域

27:25.090 --> 27:27.090
我们输出一下这个Rect

27:27.090 --> 27:30.620
你看

27:30.620 --> 27:33.930
得到它的矩形区域

27:33.930 --> 27:35.930
每个动物的矩形区域

27:35.930 --> 27:37.930
这个时候还得不到

27:37.930 --> 27:39.930
这个时候还没有加到负元素里面去

27:39.930 --> 27:40.930
所以说我们Band

27:40.930 --> 27:42.930
该换一个时间叫Inserted

27:42.930 --> 27:44.930
Inserted就是已经加到负元素里面去了

27:44.930 --> 27:45.930
已经在页面上了

27:45.930 --> 27:46.930
我这里才能得到

27:46.930 --> 27:47.930
这里我得不到

27:47.930 --> 27:49.930
这个时间点也很早

27:49.930 --> 27:50.930
现在是不是得到

27:50.930 --> 27:52.930
每一个动物的位置

27:52.930 --> 27:53.930
是不是拿到

27:53.930 --> 27:54.930
目前的位置了

27:54.930 --> 27:55.930
对吧

27:55.930 --> 27:57.930
我下滑就没有了

27:57.930 --> 27:58.930
因为我下滑

27:58.930 --> 27:59.930
现在我把那个代码

27:59.930 --> 28:00.930
把那个Fuse代码去掉了

28:00.930 --> 28:01.930
过后

28:01.930 --> 28:02.930
又要重新看

28:02.930 --> 28:04.930
看每一个元素的位置

28:04.930 --> 28:05.930
那我怎么样知道

28:05.930 --> 28:07.930
它是不是在四口范围内呢

28:07.930 --> 28:08.930
是不是就看它的

28:08.930 --> 28:09.930
横重坐标

28:09.930 --> 28:10.930
以及它的宽高

28:10.930 --> 28:11.930
对吧

28:11.930 --> 28:12.930
那我们这个

28:12.930 --> 28:14.930
我又不用画图了

28:14.930 --> 28:15.930
比方说

28:15.930 --> 28:16.930
它哪个范围内

28:16.930 --> 28:17.930
四口范围内

28:17.930 --> 28:18.930
只要又有一丁点出现了

28:18.930 --> 28:20.930
它就在四口范围内对吧

28:20.930 --> 28:21.930
那么比方说

28:21.930 --> 28:22.930
它在这个位置

28:22.930 --> 28:25.930
它的Top值小于多少的时候

28:25.930 --> 28:26.930
就不在四口范围内的呢

28:26.930 --> 28:29.930
小于Fu的它的高度

28:29.930 --> 28:31.930
是不是这个道理

28:31.930 --> 28:34.930
Top值小于Fu的高度

28:34.930 --> 28:36.930
就不在四口范围内了

28:37.930 --> 28:38.930
那么我来

28:39.930 --> 28:40.930
判断一下

28:40.930 --> 28:44.430
如果说Rect

28:45.430 --> 28:46.430
它的什么呢

28:46.430 --> 28:48.430
Top值小于

28:48.430 --> 28:50.430
Rect

28:50.430 --> 28:51.430
高度

28:52.430 --> 28:53.430
是不是不在四

28:53.430 --> 28:56.430
不在四口范围内

28:56.430 --> 28:58.430
我们这里就输出一下吧

28:58.430 --> 29:00.430
哪个emg.src

29:00.430 --> 29:03.430
不在四口范围内

29:03.430 --> 29:05.430
它跑上边去了

29:05.430 --> 29:06.430
还有什么情况

29:06.430 --> 29:07.430
不在四口范围内呢

29:07.430 --> 29:09.430
是不是还有在下边

29:09.430 --> 29:10.430
比方图片在这

29:10.430 --> 29:12.430
是不是它的什么

29:12.430 --> 29:14.430
Top值大于的什么

29:14.430 --> 29:15.430
大于的四口高度

29:15.430 --> 29:16.430
对吧

29:16.430 --> 29:18.430
那我们得到四口高度

29:19.430 --> 29:21.430
就是client-height

29:21.430 --> 29:22.430
来自于document

29:22.430 --> 29:23.430
document element

29:23.430 --> 29:24.430
就是传统的这些技能

29:24.430 --> 29:25.430
还是有用的

29:25.430 --> 29:26.430
client-height

29:26.430 --> 29:27.430
是不是四口高度

29:27.430 --> 29:29.430
如果说它的Top值

29:29.430 --> 29:32.430
或者Rect

29:32.430 --> 29:34.430
Top值大于了什么

29:35.430 --> 29:37.430
大于了client-height

29:37.430 --> 29:39.430
所以也不在四口范围内

29:39.430 --> 29:40.430
那么这个图片

29:40.430 --> 29:41.430
就不在四口范围内

29:41.430 --> 29:42.430
l是呢

29:42.430 --> 29:43.430
签了想法

29:43.430 --> 29:45.430
它就在四口范围内

29:45.430 --> 29:46.430
对吧

29:46.430 --> 29:47.430
所以说我们把这个

29:47.430 --> 29:48.430
两个情况就写出来了

29:48.430 --> 29:49.430
在四口范围内

29:50.430 --> 29:51.430
好

29:51.430 --> 29:52.430
保存啊

29:52.430 --> 29:53.430
咱们来看一下

29:53.430 --> 29:54.430
在最开始的时候

29:54.430 --> 29:55.430
我们可以看到

29:55.430 --> 29:56.430
是不是只有两张图片

29:56.430 --> 29:57.430
这两张图片在四口范围内

29:57.430 --> 29:58.430
剩下的不在四口范围内

29:58.430 --> 29:59.430
好

29:59.430 --> 30:00.430
我们继续往下拖动

30:00.430 --> 30:01.430
然后拖动到这

30:01.430 --> 30:03.430
那你就会看到

30:03.430 --> 30:04.430
上面几张图片

30:04.430 --> 30:05.430
不在四口范围内

30:05.430 --> 30:06.430
但是这个在

30:06.430 --> 30:07.430
对吧

30:07.430 --> 30:09.430
现在怎么只有一个呢

30:09.430 --> 30:11.430
不应该只有一个

30:11.430 --> 30:13.430
我看一下

30:13.430 --> 30:14.430
哪里有问题

30:14.430 --> 30:16.430
我把多么打印出来

30:16.430 --> 30:17.430
多么打印出来

30:17.430 --> 30:19.430
这样便于分析

30:19.430 --> 30:20.430
好

30:20.430 --> 30:22.430
再来重新来

30:22.430 --> 30:25.430
一开始没有什么问题

30:25.430 --> 30:27.430
在四口范围内

30:27.430 --> 30:28.430
这个你看在四口范围

30:28.430 --> 30:29.430
这个在四口范围

30:29.430 --> 30:31.430
剩下都是不在四口范围的

30:31.430 --> 30:32.430
好

30:32.430 --> 30:33.430
我们往下拖动

30:33.430 --> 30:34.430
拖动到这

30:34.430 --> 30:35.430
重新来一次

30:35.430 --> 30:36.430
重新拖动

30:36.430 --> 30:37.430
拖动到这

30:37.430 --> 30:38.430
好

30:38.430 --> 30:39.430
又来啊

30:39.430 --> 30:40.430
上面不在四口范围

30:40.430 --> 30:41.430
不在四口范围

30:41.430 --> 30:42.430
不在

30:42.430 --> 30:43.430
不在

30:44.430 --> 30:45.430
这个在

30:45.430 --> 30:47.430
这个有问题

30:47.430 --> 30:50.430
top值小于

30:51.430 --> 30:53.430
不能是高度

30:54.430 --> 30:56.430
他的top值

30:56.430 --> 30:57.430
对啊

30:57.430 --> 30:58.430
是高度

30:58.430 --> 30:59.430
来

30:59.430 --> 31:00.430
把top值打印出来

31:00.430 --> 31:03.900
rigged

31:05.900 --> 31:06.900
rigged

31:06.900 --> 31:07.900
top

31:08.900 --> 31:09.900
rigged

31:09.900 --> 31:10.900
height

31:10.900 --> 31:11.900
打开明白了

31:11.900 --> 31:12.900
他的height有问题

31:13.900 --> 31:14.900
再来

31:14.900 --> 31:17.720
height就有问题

31:17.720 --> 31:18.720
这个高度有问题

31:18.720 --> 31:20.720
因为高度是0

31:20.720 --> 31:22.720
有这么一个问题

31:22.720 --> 31:24.720
他的高度是0

31:24.720 --> 31:26.720
哎呀那怎么办呢

31:26.720 --> 31:27.720
他top值

31:27.720 --> 31:28.720
那我就

31:28.720 --> 31:29.720
假设一个高度

31:29.720 --> 31:30.720
因为这个确实没办法

31:30.720 --> 31:32.720
因为我不知道一个图片有多高

31:32.720 --> 31:33.720
有可能图片

31:33.720 --> 31:34.720
他有可能图片这么高

31:34.720 --> 31:35.720
你看

31:35.720 --> 31:36.720
他可能这样子就不

31:36.720 --> 31:37.720
不在四口范围内了

31:37.720 --> 31:38.720
但是

31:38.720 --> 31:39.720
因为一开始图片没有加载出来

31:39.720 --> 31:40.720
对吧

31:40.720 --> 31:41.720
我根本就不知道

31:41.720 --> 31:42.720
不知道他的高度是多少

31:42.720 --> 31:43.720
我也不知道一个图片高度是多少

31:43.720 --> 31:44.720
没加载出来吗

31:45.720 --> 31:46.720
所以说这个时候呢

31:46.720 --> 31:47.720
那就是高度是0

31:47.720 --> 31:49.720
那这个时候就不在四口范围内了

31:49.720 --> 31:51.720
但是等他图片加载出来过后

31:51.720 --> 31:52.720
会变这么高了

31:52.720 --> 31:53.720
他又再四口范围内了

31:54.720 --> 31:56.720
所以说这个东西说不准的

31:56.720 --> 31:57.720
那么高度呢

31:57.720 --> 31:58.720
我给他弄一个最小高度吧

31:59.720 --> 32:00.720
可能

32:00.720 --> 32:01.720
这个height

32:01.720 --> 32:04.480
弄一个最小高度

32:06.480 --> 32:08.480
他的高度呢等于

32:08.480 --> 32:09.480
rigged

32:10.480 --> 32:11.480
height

32:11.480 --> 32:12.480
如果说他没有值的话

32:12.480 --> 32:13.480
没有值的话

32:13.480 --> 32:14.480
给他一个最小高度

32:14.480 --> 32:16.480
最小高度我大概看一下吧

32:16.480 --> 32:17.480
给他一个

32:18.480 --> 32:19.480
100吧

32:20.480 --> 32:21.480
100

32:22.480 --> 32:23.480
或者说150

32:24.480 --> 32:25.480
都可以

32:25.480 --> 32:26.480
OK

32:26.480 --> 32:27.480
那么我们这里就小于height

32:27.480 --> 32:28.480
这样子好一点

32:29.480 --> 32:30.480
好保存

32:30.480 --> 32:31.480
再来

32:31.480 --> 32:32.480
一开始没什么问题

32:32.480 --> 32:33.480
之前

32:33.480 --> 32:34.480
现在也没什么问题

32:34.480 --> 32:35.480
只有前面

32:36.480 --> 32:38.480
不在四口范围内

32:38.480 --> 32:39.480
再刷新

32:39.480 --> 32:43.650
第一个

32:43.650 --> 32:44.650
为什么不在四口范围内

32:44.650 --> 32:45.650
他的

32:45.650 --> 32:46.650
35

32:46.650 --> 32:47.650
0

32:47.650 --> 32:48.650
这里是

32:48.650 --> 32:49.650
这里我就用height

32:49.650 --> 32:56.500
调试一下

32:58.500 --> 32:59.500
top之为35

33:00.500 --> 33:02.500
小于-他的高度对吧

33:02.500 --> 33:03.500
-他的高度

33:08.570 --> 33:09.570
再四口范围内

33:09.570 --> 33:10.570
再四口范围内

33:10.570 --> 33:11.570
好这两个都没问题

33:12.570 --> 33:13.570
对不对

33:14.570 --> 33:18.970
好那么今天就怎么处理了

33:18.970 --> 33:20.970
不在四口范围内怎么处理

33:21.970 --> 33:23.970
再四口范围内怎么处理

33:24.970 --> 33:26.970
好不在四口范围内怎么处理

33:29.860 --> 33:30.860
怎么处理呢

33:30.860 --> 33:31.860
其实很简单

33:32.860 --> 33:33.860
不在四口范围内的话

33:33.860 --> 33:35.860
那个我只需要把他的src

33:35.860 --> 33:37.860
他多么的src

33:37.860 --> 33:39.860
先暂时的复制为这个东西

33:40.860 --> 33:41.860
那么这个玩意是不是得一个路径

33:41.860 --> 33:42.860
你不能在这里

33:42.860 --> 33:43.860
不能去写这个玩意

33:43.860 --> 33:44.860
你是过去

33:44.860 --> 33:45.860
什么

33:47.860 --> 33:48.860
然后这个玩意

33:48.860 --> 33:49.860
这个路径以后会变的

33:49.860 --> 33:50.860
对不对

33:50.860 --> 33:51.860
打包玩意会变的

33:51.860 --> 33:52.860
像那种静态资源

33:52.860 --> 33:53.860
也得怎么倒入

33:53.860 --> 33:54.860
对不对

33:54.860 --> 33:55.860
倒入什么

34:02.860 --> 34:03.860
他打包之后

34:03.860 --> 34:04.860
会生成一个合适的路径

34:06.860 --> 34:07.860
你再复制为他

34:08.860 --> 34:09.860
src复制为他

34:10.860 --> 34:11.860
好保存咱们来看一下

34:14.360 --> 34:15.360
好在四口范围内是什么样子

34:17.360 --> 34:18.360
不在四口范围内的

34:18.360 --> 34:19.360
是不是已经变成他了

34:22.360 --> 34:23.360
不在四口范围内的

34:23.360 --> 34:24.360
是不是都变成他了

34:27.360 --> 34:28.360
没问题吧

34:29.360 --> 34:31.360
好不在四口范围内我们处理完了

34:31.360 --> 34:32.360
但是这个单码会

34:32.360 --> 34:33.360
反复的反复的执行

34:33.360 --> 34:34.360
其实也有点烦

34:35.360 --> 34:36.360
因为你不在四口范围内

34:36.360 --> 34:37.360
一开始都是他对不对

34:37.360 --> 34:38.360
所以说这里的

34:38.360 --> 34:39.360
其实还有一种方式就是

34:39.360 --> 34:41.360
一开始我就先把它变成

34:41.360 --> 34:42.360
这个东西再输

34:42.360 --> 34:43.360
因为这个图片

34:43.360 --> 34:44.360
你不用不用担心什么

34:45.360 --> 34:46.360
网络中心的问题

34:46.360 --> 34:47.360
他就一张一张图片

34:47.360 --> 34:48.360
都是一张图片

34:48.360 --> 34:49.360
所以他会缓存

34:49.360 --> 34:50.360
加上完了一张

34:50.360 --> 34:51.360
以后全是用的缓存

34:51.360 --> 34:52.360
你不用去担心这个

34:52.360 --> 34:53.360
我就开先把它变成

34:53.360 --> 34:54.360
这个东西再说

34:54.360 --> 34:55.360
先暂时

34:55.360 --> 34:58.360
使用着墨镇图片

35:00.990 --> 35:01.990
墨镇图片先用着

35:02.990 --> 35:04.990
好等你在四口范围内的时候

35:04.990 --> 35:05.990
我再去再去控制

35:05.990 --> 35:06.990
那这个逻辑呢

35:06.990 --> 35:07.990
就把它变

35:07.990 --> 35:08.990
代码稍微变动一下

35:08.990 --> 35:09.990
也就换句话说

35:09.990 --> 35:11.990
也就TOP之大于等于他

35:12.990 --> 35:14.990
TOP之小于等于他

35:15.990 --> 35:16.990
并且

35:16.990 --> 35:17.990
那么就在四口范围内

35:17.990 --> 35:18.990
在四口范围内的话

35:18.990 --> 35:19.990
我们再去处理

35:19.990 --> 35:20.990
不在四口范围内

35:20.990 --> 35:21.990
我就可以不用管他了

35:25.650 --> 35:26.650
就变成这个样子了

35:26.650 --> 35:28.650
好在四口范围内怎么来处理呢

35:28.650 --> 35:29.650
就是

35:30.650 --> 35:32.650
我们要等他图片加载完成过后

35:32.650 --> 35:34.650
我再去替换这个SRC

35:34.650 --> 35:35.650
那怎么来知道

35:35.650 --> 35:36.650
他加载完成了呢

35:37.650 --> 35:38.650
我们这里是不是应该

35:38.650 --> 35:40.650
应该去New一个Image

35:43.650 --> 35:44.650
Image的

35:44.650 --> 35:45.650
来吧

35:46.650 --> 35:47.650
TempleImage

35:48.650 --> 35:49.650
创建一个Image

35:49.650 --> 35:51.650
TempleImage的SRC地址

35:51.650 --> 35:52.650
等于什么呢

35:52.650 --> 35:53.650
等于它的真实SRC

35:53.650 --> 35:55.650
是不是就Image的SRC

35:56.650 --> 35:57.650
是不是这个SRC

35:58.650 --> 35:59.650
让它去夹载

35:59.650 --> 36:00.650
它夹载可能好一会儿

36:00.650 --> 36:01.650
慢慢去夹载吧

36:01.650 --> 36:02.650
我可以等你

36:03.650 --> 36:04.650
那么他有一个事件

36:04.650 --> 36:05.650
因为我们知道图片

36:05.650 --> 36:06.650
这有一个事件

36:06.650 --> 36:07.650
我们写到上面

36:07.650 --> 36:08.650
为什么写到上面呢

36:08.650 --> 36:09.650
万一

36:09.650 --> 36:11.650
万一他这个就夹载完成了

36:11.650 --> 36:12.650
复制过了

36:12.650 --> 36:13.650
他快快就夹载完成了

36:13.650 --> 36:14.650
我们写到上面

36:14.650 --> 36:16.650
先给他注射事件再说

36:19.650 --> 36:21.650
当图片夹载完成之后

36:21.650 --> 36:24.650
当真实图片夹载完成之后

36:24.650 --> 36:27.650
然后我把这个图片的SRC

36:27.650 --> 36:29.650
复制给它的SRC

36:31.650 --> 36:32.650
TempleImage的

36:32.650 --> 36:34.650
就是Image

36:35.650 --> 36:37.650
DomeImage的SRC

36:37.650 --> 36:38.650
因为它有缓存吗

36:38.650 --> 36:39.650
它直接就读缓存了

36:40.650 --> 36:43.090
能理解这个意思了

36:44.090 --> 36:45.090
这样子复制过去

36:45.090 --> 36:46.090
好

36:46.090 --> 36:47.090
那么再试课翻回来

36:47.090 --> 36:48.090
这个样子是不是已经处理过了

36:48.090 --> 36:49.090
已经处理过了过后

36:49.090 --> 36:50.090
是不是把这个图片

36:50.090 --> 36:51.090
就应该移除掉

36:51.090 --> 36:52.090
Image是

36:52.090 --> 36:53.090
等于Image is

36:53.090 --> 36:54.090
Filter

36:55.090 --> 36:56.090
i

36:57.090 --> 36:58.090
i

36:58.090 --> 36:59.090
i

36:59.090 --> 37:00.090
i

37:00.090 --> 37:01.090
i

37:01.090 --> 37:02.090
i

37:03.090 --> 37:04.090
咱们再来看

37:05.090 --> 37:06.090
刷新

37:06.090 --> 37:08.090
一开始都是这个样子

37:08.090 --> 37:09.090
等它夹载吧

37:09.090 --> 37:11.090
一开始一定是前面两个夹载

37:11.090 --> 37:13.090
这两个肯定会夹载

37:13.090 --> 37:15.720
我们为了看到清楚了

37:15.720 --> 37:17.720
我这里还是给大家输出一下吧

37:17.720 --> 37:18.720
在这个位置

37:22.250 --> 37:23.250
夹载

37:24.250 --> 37:25.250
真实图片

37:25.250 --> 37:27.250
把Dome元素扔进去

37:27.250 --> 37:28.250
一面减多

37:29.250 --> 37:30.250
好

37:31.250 --> 37:32.250
这边

37:32.250 --> 37:33.250
你看

37:33.250 --> 37:34.250
是不是前两个夹载真实图片

37:34.250 --> 37:35.250
还正在夹载

37:35.250 --> 37:36.250
等它夹载完了过后

37:36.250 --> 37:37.250
它自然就会替换

37:37.250 --> 37:38.250
看吧

37:38.250 --> 37:39.250
后期它没夹载吧

37:39.250 --> 37:40.250
好

37:40.250 --> 37:41.250
以为真实图片夹载完了过后

37:41.250 --> 37:42.250
这两个元素

37:42.250 --> 37:43.250
其实已经从数组里面移出了

37:43.250 --> 37:45.250
永远不用去直接夹载它了

37:45.250 --> 37:46.250
好 接着我们看

37:46.250 --> 37:47.250
滑动到后边

37:49.690 --> 37:50.690
所以夹载这两个

37:50.690 --> 37:51.690
你看

37:51.690 --> 37:52.690
夹载这两个

37:52.690 --> 37:53.690
因为我们在滑动的时候

37:53.690 --> 37:54.690
我们注册了事件的

37:54.690 --> 37:55.690
循环

37:55.690 --> 37:56.690
循环数组

37:56.690 --> 37:57.690
一个一个去看

37:57.690 --> 37:58.690
也发现这两个

37:58.690 --> 37:59.690
范围内

37:59.690 --> 38:00.690
于是还会去夹载这两个

38:01.690 --> 38:02.690
夹载图片

38:02.690 --> 38:03.690
因为我这个摩托街市

38:03.690 --> 38:04.690
它的图片

38:04.690 --> 38:06.690
放的是外网服务器

38:06.690 --> 38:07.690
国外的服务器

38:07.690 --> 38:11.260
所以夹载数组有点慢

38:11.260 --> 38:13.260
夹载了半天

38:13.260 --> 38:14.260
其实夹载出来了

38:14.260 --> 38:15.260
好不容易夹得出来

38:16.260 --> 38:17.260
如果说

38:17.260 --> 38:18.260
国内的服务器的话好一点

38:18.260 --> 38:19.260
但是如果说

38:19.260 --> 38:20.260
你不想要这个效果的话

38:20.260 --> 38:21.260
其实

38:21.260 --> 38:22.260
也就是说

38:22.260 --> 38:23.260
你如果说

38:23.260 --> 38:24.260
希望的是到了那

38:24.260 --> 38:25.260
就马上替换真实图片

38:25.260 --> 38:27.260
不用等真实图片夹载完成

38:27.260 --> 38:29.260
也可以用这种方式也可以

38:29.260 --> 38:30.260
方式有很多的

38:30.260 --> 38:32.260
这就可以简单的写一下

38:32.260 --> 38:35.260
img.src

38:35.260 --> 38:37.260
等于img.src

38:37.260 --> 38:39.260
直接写一下也可以

38:39.260 --> 38:40.260
这样子

38:40.260 --> 38:41.260
看来更加清楚一点

38:41.260 --> 38:42.260
一开始你看

38:42.260 --> 38:43.260
是不是夹载这两个

38:44.260 --> 38:45.260
夹载整个图片

38:45.260 --> 38:46.260
这两个

38:46.260 --> 38:47.260
第二个整个夹载

38:47.260 --> 38:48.260
因为它夹载数组比较慢

38:49.260 --> 38:50.260
好我们下滑

38:50.260 --> 38:51.260
滑到这

38:52.260 --> 38:53.260
就夹载这两个

38:54.260 --> 38:55.260
像谷歌扭乱期呢

38:55.260 --> 38:56.260
它其实

38:56.260 --> 38:57.260
如果说发现

38:57.260 --> 38:58.260
之前有那个

38:58.260 --> 38:59.260
真实图片的话

38:59.260 --> 39:00.260
它夹载新的图片

39:00.260 --> 39:02.260
其实它已经有这个自动的功能了

39:02.260 --> 39:04.260
有些有的其实是没有的

39:04.260 --> 39:06.260
它会先给你变成一个

39:06.260 --> 39:10.210
没有尺寸的东西

39:10.210 --> 39:11.210
你看

39:11.210 --> 39:12.210
这样子

39:12.210 --> 39:13.210
不断的去夹载

39:13.210 --> 39:14.210
数组里边的元素

39:14.210 --> 39:15.210
就会越来越少

39:15.210 --> 39:16.210
越来越少

39:16.210 --> 39:17.210
直到把这些图片

39:17.210 --> 39:19.840
都夹载出来过后

39:19.840 --> 39:21.840
它就不需要去夹载这种东西了

39:21.840 --> 39:22.840
你看

39:22.840 --> 39:23.840
现在在滑动

39:23.840 --> 39:25.840
已经没有更多的东西需要夹载了

39:25.840 --> 39:26.840
那么这就打成了

39:26.840 --> 39:27.840
一个图片的

39:27.840 --> 39:28.840
蓝夹载的效果

39:28.840 --> 39:29.840
把这个取掉

39:30.840 --> 39:31.840
就写完了

39:31.840 --> 39:33.840
那么我们在首页里边

39:33.840 --> 39:34.840
就把这个问题搞定了

39:34.840 --> 39:35.840
图片蓝夹载

39:36.840 --> 39:37.840
好了

39:37.840 --> 39:38.840
这是这几颗的内容

