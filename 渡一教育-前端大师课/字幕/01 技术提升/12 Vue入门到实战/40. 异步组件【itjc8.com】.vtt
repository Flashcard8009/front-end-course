WEBVTT

00:00.240 --> 00:04.840
好 咱们接着上一集和说 咱们来说一下这个东西 就是这个异部组件

00:05.360 --> 00:07.920
就这个玩意就是一个异部组件 就是一个函数

00:08.680 --> 00:13.800
这个玩意是啥呢 其实就是一个函数 一调用它呢 它就会返回一个Promise

00:14.060 --> 00:16.120
这个玩意是Promise啊 大家清楚的

00:16.880 --> 00:18.920
这个Promise呢 Resolve之后

00:19.440 --> 00:24.820
它就变成了一个组件的配置对象 这个玩意不就是个组件配置对象吗

00:25.080 --> 00:29.940
一旦Promise完成 它就是一个组件配置对象 这个玩意就是一个异部组件

00:30.960 --> 00:33.000
那么这个异部组件我们再详细说一说

00:34.280 --> 00:40.940
它怎么回事呢 就是说我们在维尤里边组件是啥呀 在单码层面来说 组件它其实就是一个配置对象

00:41.200 --> 00:45.040
就是这么一个配置对象 对吧 那么我们这里呢 不过是把这个配置对象放到这儿的

00:45.300 --> 00:47.860
放到一个单组的模块里面去的 对不对

00:48.360 --> 00:52.460
那么这个组件配置对象呢 它有的时候 它就可能会发生这么一种场景

00:52.720 --> 01:00.140
就是说 我可能一时半会儿拿不到这个对象 我可能要过一会儿才拿得到这个对象 那么就是异部的

01:00.520 --> 01:03.080
比方说什么情况呢 我就举了两个简单例子啊

01:04.280 --> 01:06.120
第一个例子呢 我们这个项目里面没有

01:07.320 --> 01:16.920
就说有可能的是 我这个组件呢 它有一些数据 但这个数据呢 是需要通过阿迦克斯能够才能夹载出来过后呢 我才能确定这个数据是啥

01:17.680 --> 01:24.440
那么这个组件呢 也就是它的配置对象啊 它里面有些东西配置不了 它必须要拿到一些东西过后呢 才能形成一个配置对象

01:24.920 --> 01:27.880
那就也就说 这个配置对象的得到呢 是一个异部的

01:28.440 --> 01:35.760
这第一种情况啊 第二种情况呢 像我们刚才就是于这种情况 它为了合力的分包 我要把它分到一个单独的帮助里边去

01:36.480 --> 01:41.400
啊 于是呢 我就写了动态导入 动态导入是不是异部的 对吧 他就去夹在这个界野史

01:41.840 --> 01:50.640
是不是异部的 夹在这个数据 那么异部的呢 还要等一会儿 夹在过后呢 才能拿到这个组件配置对象啊 这就是像这两种场景的

01:51.640 --> 01:55.640
就构成了我们使用异部组件的原因 怎么叫异部组件

01:56.360 --> 01:59.280
其实它就是一个对象 通过异部的方式得到组件配置对象

02:00.040 --> 02:06.560
啊 该组件的就可以把它做一个异部组件 下面呢 我们来举了一个非常非常简单的例子啊 你看这个玩意不就是我们刚才的代码吗

02:06.920 --> 02:08.320
这就是一个异部组件

02:09.320 --> 02:16.400
啊 这个异部组件呢 实际上是你可以把它当成一个普通组件来使用的啊 是一点问题都没有 我们举个例子吧 随便下去个例子啊

02:17.400 --> 02:25.920
哎 我们在 要不然新建个工程上就在这吧 就在这啊 简单的举个小小的例子 我们就在这写吧

02:26.720 --> 02:30.480
呃 为了让你们看到效果呢 我这里能把这些东西都给它注释掉啊

02:31.280 --> 02:37.240
这边呢 我们写上这么一个非常简单的 我就没有分模块了啊 写上这么一个异部组件 叫做二sync

02:38.560 --> 02:38.960
s

02:39.920 --> 02:46.960
1c 啊 扛拨链子 对吧 你把分成别的模块是一样的啊 是不是一样的 这就是一个组件配置对象

02:47.520 --> 02:50.320
呃 这个组件配置对象呢 我把它这样的写啊

02:51.760 --> 02:53.920
呃 它是个异部组件啊 异部组件

02:55.600 --> 03:00.800
我们之前是这样的写法对吧 这个玩意返回的不就是个promise吗 promise resolve 之后不就是一个组件吗

03:01.040 --> 03:06.720
一个组件配置对象吗 那我们自己勾造一个promise行不行啊 当然可以啊 我们这里的return new一个promise

03:07.120 --> 03:08.320
可不可以 当然可以

03:09.040 --> 03:11.200
呃 六一个promise 呃 result

03:13.950 --> 03:18.190
我们这里就set timeout吧 比方说三秒钟之后呢 我给你

03:18.830 --> 03:19.870
一个组件配置对象

03:20.350 --> 03:24.030
resolve的时候 该resolve一个组件配置对象 对吧 我们手动的去勾造一个异部组件

03:24.510 --> 03:29.310
那么这个组件配置对象里面就可以随便瞎写了啊 啥 详细啥写啥 呃 我这里就简单一点吧

03:29.630 --> 03:35.390
我就写一个render函数啊 因为我这里没拍写模板啊 我这里没有开这个单文件组件 我就写个render函数吧

03:36.670 --> 03:40.190
啊 我刚刚去写个组件吧 免人大家也有点懵

03:41.870 --> 03:44.190
呃 这个组件呢 我们给他写上一个

03:45.470 --> 03:47.630
普通组件啊 my comp

03:51.100 --> 03:56.060
my comp 就是一个非常非常普通的组件 这个玩意是不是异部组件 他不是啊 他不是异部组件

03:56.780 --> 04:01.500
然后呢 我们这边呢 这才是一个异部组件 他是一个函数 函数返回promise

04:01.900 --> 04:07.660
promise完成的结果呢 是一个组件配置对象 那我这里呢 就把这个配置对象呢 刚才的买combo的配置对象

04:08.060 --> 04:10.060
放到这儿啊 我就在这里倒进来吧

04:11.020 --> 04:13.580
当然这样做没有什么意义啊 我只是告诉他这么一个道理

04:14.300 --> 04:14.860
my comp

04:16.780 --> 04:18.380
是吧 这些刚

04:18.940 --> 04:21.820
my comp 我就把这个 这是个组件配置对象 把这张

04:22.460 --> 04:27.660
就这么简单 那就这就形成了一个异部组件 他是一个函数 那么这个组件在使用的时候呢 你可以

04:28.380 --> 04:33.740
呃 你是可以那个 直接把一个当成普通组件使用的 放这儿 我们这里直接使用它吧

04:34.860 --> 04:38.460
直接使用这个异部组件 好 保存啊 咱们来看一下这个效果

04:39.420 --> 04:39.740
打开

04:41.580 --> 04:47.980
三秒钟之后 他就会出现这个 所以等了三秒 也就是这个组件呢 他加载需要一段时间 这个配置对象

04:48.140 --> 04:51.500
加载需要一段时间 那么在加载出来之前呢 他啥也不显示

04:51.740 --> 04:56.460
啥都没有 加载出来之后呢 这个位置呢 才会显示什么东西 对吧 就这么简单

04:56.860 --> 05:01.340
啊 不过呢 我们的代码好像是没什么意义的啊 正确代码应该怎么怎么显的 应该是

05:02.060 --> 05:06.460
这个玩意是动态加载的 对吧 这个配置对象就是我们就是得不到嘛 得到了就不需要加载了

05:06.940 --> 05:14.460
啊 就是因为得不到 那么我们动态加载啊 为了看到效果了 我这里魔力的三秒钟 三秒钟之后呢 我们把个加载进来啊 实际上是不需要等三秒

05:16.220 --> 05:16.860
这样的意思啊

05:18.940 --> 05:23.180
对吧 这个玩意导 导入的结果不就是个promise吗 对吧 promise

05:24.460 --> 05:28.620
promise那个等待的结果不就是一个组件配置对象吗 对不对

05:29.180 --> 05:33.340
mycome 然后呢 我把个配置对象resolve一下啊 是一样的效果

05:34.060 --> 05:41.740
保存啊 我们看一下 刷新 三秒钟之后 然后出现了这个这个东西 对吧 非常简单

05:42.540 --> 05:47.500
啊 这就是一个本质上的异部组件 就是这么一个玩意啊 没有什么特别复杂的东西

05:48.140 --> 05:52.930
好 回去啊 好 这是异部组件

05:53.410 --> 05:57.330
然后呢 我们在具体的使用上呢 其实用了最多的也就是路由乃加载了

05:57.970 --> 06:00.530
说实话 就是就是我们刚刚之前写好的这个东西

06:01.330 --> 06:04.770
就在这一块啊 就是我们动态的去导入一个分布

06:05.170 --> 06:05.650
结果

06:06.930 --> 06:12.050
然后呢 这个需要加载一段时间 加载完了过后 就是一个组件配置对象 那么就把碰到这就完事了

06:13.250 --> 06:22.290
那么我们 如果说啊 像一些比较大的项目里边 他可能会考虑到 这个这个其实就要加载一段介石对吧 一个介石里边有一个组件配置对象

06:23.090 --> 06:29.490
是一个异部加载的过程 那么加载需要一段时间 在加载这段时间里边呢 我们不希望了这个

06:30.210 --> 06:34.210
页面呢 就在那里卡着啊 啥都不显示 那这样子呢 其实也不好

06:35.090 --> 06:37.650
这是什么 这个地方包错了啊

06:39.490 --> 06:41.490
这个地方包错了 注释了

06:43.940 --> 06:44.740
好 相信啊

06:46.260 --> 06:49.300
那么可能会加载一段 加载这个介石 加载一段时间

06:49.700 --> 06:55.460
我们不希望了 这段时间里边呢 这个整个页面就是 因为这个组件没加载出来嘛 这个区域就是空的 对不对

06:56.260 --> 07:00.020
那么我们希望了 给他显示一个什么东西 比方说显示个进度条在那里

07:00.420 --> 07:01.540
在推进

07:02.580 --> 07:05.780
说到进度条呢 我再给他说一下啊 这个进度条呢

07:06.660 --> 07:11.300
全都是假的 里面在网站上看到一些进度条 反正我没有看到过真的进度条

07:11.940 --> 07:14.340
不是说进度条到了一半就加载到了一半 没有

07:14.660 --> 07:20.580
进度条呢 不管是网页上 还包括里面的游戏里边的一进度条啊 好多都是假的啊 好多都是假的

07:21.780 --> 07:24.180
那么为什么是假的呢 因为进度条的作用是啥

07:24.580 --> 07:28.660
进度条的作用就是一个安慰器 让你不要走再等等啊 快了

07:28.900 --> 07:30.980
让你不要走 就让你们平时到那个

07:32.340 --> 07:38.180
酒店里边去吃饭 吃饭的时候问 也菜好了没有啊 再炒了没有啊 他一定会告诉你 马上

07:38.580 --> 07:43.380
啊 马上正在炒了 马上出锅了 一定会这么说啊 其实他都不知道菜的有没有炒

07:44.020 --> 07:47.860
只是一个安慰器 所以说进度条呢 就起这么一个作用啊 因此呢

07:48.500 --> 07:51.700
没有必要把它做成真实的 做成真实的是比较费事的

07:52.180 --> 07:53.220
是非常非常费事的

07:54.180 --> 07:56.180
好 这是这个说一下顺便说一下

07:56.660 --> 08:01.220
那么我们现在就来做一下这么一个效果啊 那怎么来做呢 我们到这个肉池里边去

08:02.580 --> 08:07.700
我们要做的其实就是一个 这就给他一个异部组件 什么叫异部组件 这就是一个异部函数

08:07.940 --> 08:08.980
他反回一个Promise

08:10.260 --> 08:15.140
对 还有一个点 就是异部组件呢 其实还可以支持更多的配置啊 这里有一个详细的

08:15.380 --> 08:18.180
异部组件的配置 你可以看一下啊 这个估计的官方文道

08:18.420 --> 08:22.020
他说呢 这个异部组件呢 他不仅仅呢 是可以反回一个Promise的

08:22.340 --> 08:23.460
他还可以反回一个对象

08:23.860 --> 08:30.180
这个对象里边有很多配置 我们来简单看一下吧 如果说你有这样的需求的话 你可以参考一下啊

08:30.740 --> 08:33.220
那么这个对象里边呢 可以配置Component

08:33.220 --> 08:38.100
那么这是一个异部组件 这是一个需要加载的组件 那么这个东西是一个Promise

08:38.900 --> 08:45.300
我们之前反回一个对 反回的是一个Promise对吧 那么其实呢 我们之前那种写法啊 就这种写法呢

08:45.540 --> 08:46.500
等效于

08:48.020 --> 08:49.060
反回一个对象

08:50.340 --> 08:52.020
然后对象里边一个属性

08:53.620 --> 08:54.420
Component

08:55.460 --> 08:56.340
等效于这个

08:57.060 --> 09:00.580
我们刚才直接写个反回Promise 等效于这个是一样的

09:00.820 --> 09:02.900
然后呢 我们还可以配置别的东西啊 比方说

09:03.140 --> 09:08.740
刚才我们就 如果说没加载出来就什么都不显示对吧 那么没有加载出来的时候 你可以显示一些别的组件

09:09.540 --> 09:16.420
啊 如果说加载错误没有加载出来啊 超时了 那么就错误 错误的时候你可以显示一个错误组件啊 都是可以的

09:17.220 --> 09:22.500
啊 你可以做一个延迟啊 比方说我马上加载 我延迟一段时间再进行加载

09:22.660 --> 09:28.020
那么也可以再设置这个属性 你可以设置一个超时时间 比较三秒钟都没有加载出来 那就

09:28.420 --> 09:33.460
算是爆错了啊 那就没有加载失败了 对吧 你还可以做一些更多的配置

09:33.780 --> 09:39.300
那么我们这里呢 就不去做这些配置了啊 我们就反回一个Promise 就这个函数反回一个Promise就ok了

09:40.420 --> 09:42.740
那么现在我要做的事情呢 其实就是在

09:44.020 --> 09:51.380
组件对象加载出来之前 我们可能要做一些事 加载完成之后又要做一些事 那么这个玩意又怎么做呢

09:52.100 --> 09:57.220
其实非常简单啊 这个玩意怎么做呢 这不就是这个函数吗 我这个函数呢

09:57.860 --> 10:01.940
我就这样呗 我给他写全啊 写成一个函数题

10:04.140 --> 10:08.220
把他放过来啊 写成个函数题 这个函数呢 无非就是反回一个Promise嘛

10:09.180 --> 10:15.900
标记为Orson可是不是就反回一个Promise呢 就这么简单对吧 那么函数一开始呢 我就有输出一句话啊 组件

10:16.620 --> 10:17.340
开始加载

10:19.580 --> 10:22.860
好 然后呢 我就开始加载组件呗 我就Import吧

10:23.820 --> 10:27.820
等待这个组件加载完成 加载完成过后呢 是不是得到一个组件配置对象

10:28.300 --> 10:30.780
对吧 得到一个组件配置对象 然后呢 我再输出

10:31.420 --> 10:37.340
组件加载结束 最后呢 我把这个组件配置对象的返回啊 是不是就返回一个Promise

10:37.340 --> 10:41.100
Promise Resolve之后呢 就是这个东西 对吧 是不是我们可以可以做一些额外的事情

10:41.500 --> 10:47.900
对吧 比方说这里进度调开始 这里进度调结束 对吧 所以都可以做了 现在我们来看一下啊 这个两句话有没有输出呢

10:48.380 --> 10:54.620
双星 组件开始加载 组件加载结束 输出了 不过呢 它有点快啊 因为我们这个界线是加载很快的

10:54.940 --> 10:59.340
本身就比较小 对吧 只有一两kb 所以说呢 为了掩饰这个效果呢

11:00.780 --> 11:06.140
我在开发阶段啊 手动的 我给他手动的等待一段时间

11:06.620 --> 11:11.660
在开发阶段 手动的等待一段时间 我们这里这样吧 判断一下是不是开发阶段

11:12.300 --> 11:14.220
如果我们的Process

11:15.180 --> 11:20.220
注意啊 这个地方有个小的细节 就是这个Process呢 它是在no的环境里边的

11:20.620 --> 11:25.740
而这个代码呢 实际上是在浏览器环境里面执行的 浏览器环境里边 按理说是没有这个东西的

11:26.300 --> 11:29.740
那么这里其实还是可以使用啊 为什么可以使用 是因为无诱可利

11:30.380 --> 11:35.340
它可以往浏览器里面注入了一些代码 它可以创建了这么一个Process对象

11:35.900 --> 11:38.060
因此呢 你在这里可以使用啊 并不是说

11:38.780 --> 11:46.940
这个就流烂器给你提供了这个 不是的啊 是无诱可利 给我们在打包结果里边注入了这个东西啊 方便你在流烂器环境里边使用环境面量

11:48.300 --> 11:56.060
非常简单啊 它就给你做 它就给你创建了一个对象叫Process 然后呢 它里边有一个属性 叫做M M里边有一个node

11:57.260 --> 12:01.740
这一个代码你自己的写的都能写出来 对吧 它给你注入这么一个代码 然后呢

12:02.700 --> 12:05.740
可以设置好了一个字幕创 里边的评论

12:06.620 --> 12:09.260
如果说开发 呃 我生产环境的话就是Process

12:09.900 --> 12:13.020
就这么简单啊 所以说你这里可以使用这个node n

12:15.090 --> 12:17.570
呃 然后如果说是低Process

12:19.820 --> 12:23.500
如果说是生产环境的话 那我们就正常来该咋来就咋来

12:25.100 --> 12:29.100
就这样子 对吧 没问题吧 如果说你是开发环境的话

12:29.740 --> 12:33.900
那么我们这里简单的处理一下吧 呃 我这里呢

12:34.540 --> 12:37.900
写一个辅助函数吧 要说啊 写个辅助函数

12:39.340 --> 12:40.780
分析 呃 地内

12:41.340 --> 12:46.700
等待一段时间 呃 给位段时间 我等待一段时间 这个函数呢 可能大家都起了无数十遍了啊

12:47.420 --> 12:50.220
啊 其实都不用标记了啊 直接反复一个Promise得了

12:50.700 --> 12:51.100
Promise

12:53.220 --> 12:55.380
Result 主要是为了测试看到效果

12:55.860 --> 12:57.940
Set Timeout 啊 等待一段时间Duration

12:58.900 --> 13:03.780
然后呢 就Result完成就完成了啊 好有了这么一个地内函数过后呢 我们在

13:04.580 --> 13:07.220
开发模式下面 我就等待一段时间啊 地内

13:08.740 --> 13:13.540
等待个两秒钟吧 好 然后呢 我们再去加载组件 然后再设置组件

13:14.820 --> 13:21.380
再告诉他组件加载结束 就这么简单啊 或者说对 我这个代码还可以优化一下啊 如果说是开发模式

13:22.660 --> 13:31.390
我就等待一段时间 开发模式啊 就是 Development 开发模式呢 我们就等待一段时间

13:32.350 --> 13:37.550
啊 如果不是开发模式的话 那么就不禁这个判断啊 最终的都是要返回这个玩意了

13:38.430 --> 13:41.790
对不对啊 我们是不是可以写成这样的代码 那么今天我们再看一下啊

13:42.270 --> 13:48.030
刷新一看组件加载加载这个Home 组件对吧 然后组件加载结束了 开始进入组件的流程了

13:48.510 --> 13:52.670
好 再来刷新组件加载 空白的组件加载结束

13:53.390 --> 14:00.830
好 那么我们这样无非要做的事情呢 就是把所有的这些异部组件是不是全部做成这样子

14:01.070 --> 14:08.750
因为这些异部组件都是一个页面 对吧 页面都是要加在一段时间的 那么一会儿呢 我们会把这两句输出语形的替换成一个进度条的样子

14:09.230 --> 14:10.590
好 那么我们这里呢 可以写个

14:11.470 --> 14:15.070
辅助函数嘛 就在这里写 内部的一个辅助函数就是get

14:16.030 --> 14:19.230
sync get page component

14:20.110 --> 14:22.750
每一个异部组件呢 它的

14:25.150 --> 14:30.510
每一个异部组件呢 它的路径不一样 对不对 路径不一样 那么你给我一个路径

14:32.910 --> 14:39.310
pass 给我一个路径 然后呢 剩下的呢 我就是把这个函数给你封装一下 就这么简单 给你封装一下这个函数

14:40.670 --> 14:44.430
返回 返回什么呢 返回的就是一个函数 返回这个

14:46.030 --> 14:51.630
返回这个东西 好 那么这个函数里边 这些东西都一样啊 都一样 都一样 都一样

14:52.830 --> 14:55.630
无非这个地方把变一下啊 这个创作就不要

14:57.630 --> 14:57.950
pass

14:59.070 --> 15:00.430
OK 把这个地方变一下

15:01.150 --> 15:06.270
好 有了这个辅助函数过后呢 我们在这边 所以component就可以这样定义了 getcomponent

15:06.750 --> 15:07.550
然后呢 这边是

15:08.590 --> 15:09.150
vius

15:12.940 --> 15:13.100
什么

15:16.660 --> 15:19.860
最好不要啊 最好不要这样做 对了 还有一个小的细节

15:20.420 --> 15:27.380
因为这个玩意儿是交费交费未拍的 你把这个玩意儿做成动态的过后呢 它的依赖关系就很难分析得出来了啊 就很难分析出

15:27.380 --> 15:31.060
依赖关系了 所以说呢 我这里呢 你给我一个函数吧

15:31.700 --> 15:36.180
我调用这个函数得到这个异部的逐渐的结果啊 你给我一个函数啊 就是

15:37.380 --> 15:39.300
pagecomponent

15:41.060 --> 15:46.020
visual 给我一个函数啊 它是一个函数啊 我到时候传递的时候 这样传递

15:48.340 --> 15:50.340
这样传递

15:50.500 --> 15:54.020
get page component 这里边传一个函数进去

15:55.940 --> 15:57.780
或者是对传一个函数啊

16:02.480 --> 16:08.160
或者是直接传一个promise吧 就传一个import的promise 就把这个玩意儿传进去啊

16:11.570 --> 16:12.610
把这个玩意儿放这

16:13.410 --> 16:14.610
这个时候还保留吧

16:16.700 --> 16:19.420
这个时候啊 你给我传一个promise进来

16:21.020 --> 16:26.220
但是这个promise加载的时间太早了 你这样子直接是个表达式 它直接就运行了 就把加载进来了

16:26.620 --> 16:30.380
不 还是传函数得了 还是传函数得了 这些都是细节啊

16:30.700 --> 16:33.740
就这样子呢 因为你如果说直接传一个import的话

16:34.140 --> 16:38.060
它代码执行到这 这些代码都要执行了 对吧 它要把这些表达数算出来

16:38.140 --> 16:39.180
它一开始就把这个

16:39.660 --> 16:42.620
组件就加载出来了 但是有些页面一开始是不需要加载的

16:42.620 --> 16:45.900
所以传函数 等调用这个函数的时候才会去加载这个组件

16:46.940 --> 16:47.980
这样子好一点啊

16:48.620 --> 16:52.540
我们就传上这么一个函数 调用这个函数呢 我就会得到这个

16:53.100 --> 16:55.980
我就会得到一个promise 这个promise完成之后得到一个组件对象

16:55.980 --> 16:58.540
所以说我们这里呢 把它当成一个函数来调用

17:00.540 --> 17:03.340
二位子 当成函数调用就完成

17:04.860 --> 17:07.740
没问题吧 调用这个函数是不是得到一个promise

17:07.740 --> 17:11.580
那么等待这个promise结束 那么就得到组件对象 我们再加入一些别的代码

17:12.700 --> 17:15.900
好 OK啊 我们现在再看一下这个home组件是不是有问题的

17:16.460 --> 17:18.620
开始加载 加载完成

17:20.700 --> 17:22.940
好 那么所有的组件我们都可以用这种方式来做啊

17:24.700 --> 17:28.220
我们在这里呢 其实在外面就套一个东西 套个这个

17:30.540 --> 17:33.020
套一个这个 外面把它放到一个函数里边

17:37.300 --> 17:41.380
放到一个函数里边 然后最后加个小货号 下面也是一样啊

17:42.980 --> 17:53.330
后边加上一个小货号 来 都处理一下 处理一下

17:54.690 --> 17:55.330
这也是

18:02.110 --> 18:05.710
好了 那么所谓的这些页面的组件呢 我们都用这种方式来处理

18:06.270 --> 18:09.950
接下来我们来看一下啊 点击文章 组件开始加载

18:11.070 --> 18:14.350
组件加载结束 看到没 关于我

18:14.910 --> 18:18.830
开始加载 加载结束 而且呢 异部组件其实有个好处

18:19.390 --> 18:21.870
什么好处呢 就是说它加载过了还就不会重复加载了

18:22.750 --> 18:27.150
比较重 又切回到文章 你看是不是就没有再重新加载这个异部组件了

18:27.230 --> 18:30.030
没有重新运行这个方法了 对吧 那么这个

18:30.510 --> 18:35.630
不用了 他可以做了这个处理的 他这个组件配置对象已经得到了 我之后呢就直接用这个配置对象就完成了

18:35.950 --> 18:40.190
你不要 我就不用去重新加载了 没有这个必要 你看回到首页也不会重新加载

18:40.670 --> 18:45.550
那么比方的到榴炼榴炎版 这个页面是从来没有加载过的 那么这个时候才会去加载这个异部组件

18:46.750 --> 18:47.310
加载结束

18:48.350 --> 18:48.910
有意思吧

18:49.550 --> 18:53.070
好 那么这里呢异部组件就做好了 那么接下来就是在这个地方来处理一下

18:53.470 --> 18:57.390
这个玩意怎么来处理呢 我们可以利用一个第三方库啊 这个名字叫做

18:59.070 --> 18:59.790
unprogress

19:00.670 --> 19:01.550
unprogress

19:02.430 --> 19:03.390
我的笔记里边有

19:06.140 --> 19:06.460
在这

19:07.260 --> 19:07.820
unprogress

19:08.380 --> 19:09.900
那么这个玩意呢 就是youtube

19:10.540 --> 19:12.300
它上面就用了是这种滚动条

19:13.100 --> 19:17.580
啊 就是不是滚动条啊 是那个加载器 它非常非常简单啊 怎么弄的呢

19:18.060 --> 19:18.860
啊 首先安装

19:20.220 --> 19:20.700
npm

19:21.980 --> 19:22.220
i

19:23.180 --> 19:25.580
叫做unprogress

19:31.220 --> 19:32.020
安装一下啊

19:33.300 --> 19:35.700
好 接下来你要做的事情呢 我们再运行出来

19:38.260 --> 19:41.060
要做的事情呢 是要导入一段CSS

19:41.460 --> 19:42.580
这段CSS在哪呢

19:43.220 --> 19:44.020
我要找一找啊

19:44.660 --> 19:46.500
它的CSS在哪个地方

19:49.620 --> 19:50.180
找一找吧

19:51.380 --> 19:53.460
首先你要在这里呢 导入一段CSS

19:57.580 --> 19:59.660
啊 就是unprogress

20:00.860 --> 20:03.980
嗯 它CSS呢

20:06.510 --> 20:07.470
看一下compromise

20:08.670 --> 20:10.350
unprogress

20:11.950 --> 20:12.670
在这里边

20:13.310 --> 20:14.350
它的CSS在这啊

20:16.110 --> 20:17.230
unprogress

20:18.110 --> 20:19.150
就是CSS

20:19.150 --> 20:20.510
啊 就这段CSS

20:20.510 --> 20:21.950
其实它内容也不多 对吧

20:21.950 --> 20:23.070
在几次上了代码

20:24.750 --> 20:26.670
然后呢 再导入一下它的CS

20:27.630 --> 20:29.150
unprogress

20:29.150 --> 20:30.270
unprogress

20:31.870 --> 20:32.910
导入unprogress

20:34.350 --> 20:38.110
好 它这里边呢有一些 我看一下它有没有具名导出啊

20:38.110 --> 20:38.670
start

20:38.670 --> 20:39.390
啊 有

20:39.390 --> 20:41.230
它其实我们这里呢 就要用到两个方法

20:41.230 --> 20:42.670
一个是start

20:42.670 --> 20:43.390
一个是

20:44.190 --> 20:44.510
down

20:45.550 --> 20:45.790
好

20:46.350 --> 20:48.670
为了让你们看到更加清楚这个效果呢

20:48.670 --> 20:50.270
我们把先把它保存到Windows里面啊

20:50.270 --> 20:50.910
一个start

20:50.910 --> 20:51.710
一个start

20:51.710 --> 20:53.230
一个Windows里边

20:53.230 --> 20:53.550
啊

20:53.630 --> 20:54.110
down

20:55.230 --> 20:55.470
回

20:55.470 --> 20:55.790
down

20:56.590 --> 20:56.910
好

20:56.910 --> 20:57.550
来看一下吧

20:58.350 --> 20:58.990
非常简单

21:03.260 --> 21:04.700
好 我们这里呢 调用start

21:06.140 --> 21:07.020
你看一面上

21:07.020 --> 21:08.380
是不是就这个玩意儿

21:08.380 --> 21:08.780
对吧

21:09.740 --> 21:11.820
就它那些假装

21:11.820 --> 21:12.940
有个进度再往前走

21:13.660 --> 21:15.660
实际上根本跟那个我们那个加载速度

21:15.660 --> 21:16.540
一点关系都没有

21:17.100 --> 21:18.700
好 当我们觉得加载完了过后

21:18.700 --> 21:19.420
我们就调了那个down

21:20.300 --> 21:21.180
就加载完了

21:21.660 --> 21:22.540
就这么简单

21:23.500 --> 21:25.980
如果说你希望它速度快一点的话

21:26.060 --> 21:27.820
我们可以对它做一个配置

21:27.820 --> 21:29.340
它里边还有一个函数叫做config

21:30.940 --> 21:31.820
config

21:31.820 --> 21:33.100
我们这里可以配置一下

21:33.100 --> 21:33.660
config

21:34.460 --> 21:35.260
里边是一个对象

21:35.260 --> 21:36.460
这个对象里边可以配置一下

21:36.460 --> 21:37.900
就做一个全距配置

21:37.900 --> 21:39.500
配置一下这个进度条

21:39.500 --> 21:41.740
为什么我这里要用具名方式导出呢

21:41.740 --> 21:44.780
是为了更加方便的去shaking

21:44.780 --> 21:46.460
它里边用具名方式导出的话

21:46.460 --> 21:48.780
那些不用导导导导导导导导导导

21:48.780 --> 21:50.620
那么它就不会加在进来

21:51.580 --> 21:52.940
不要因为这个音小是大

21:52.940 --> 21:53.900
像这个这个空呢

21:53.900 --> 21:55.180
本来就是做一个效果的

21:55.260 --> 21:57.180
你可以不要导导一大堆东西进来

21:57.980 --> 22:00.060
我们这里呢给它加上一个叫做

22:00.060 --> 22:01.020
好像叫做trick

22:01.340 --> 22:02.780
这个trickle speed

22:03.980 --> 22:05.900
就是速度

22:05.900 --> 22:07.260
速度给它设置为20

22:07.900 --> 22:08.460
再试一下

22:08.940 --> 22:09.740
现在我们来start

22:12.240 --> 22:13.360
这个速度差不多了

22:13.360 --> 22:14.000
有点意思

22:14.480 --> 22:16.000
这里还有一个小圈在那里转

22:16.000 --> 22:16.320
对吧

22:16.320 --> 22:18.080
如果说你不希望这个小圈圈的话

22:18.080 --> 22:19.360
给它做一个这个配置

22:19.360 --> 22:23.440
叫做什么呢

22:23.440 --> 22:26.800
showspinner

22:27.280 --> 22:28.160
把showspinner

22:28.480 --> 22:29.520
不显示那个小圈圈

22:30.400 --> 22:31.040
好

22:31.040 --> 22:31.760
现在我们再看

22:32.320 --> 22:32.640
start

22:33.520 --> 22:34.560
你看是不是

22:34.560 --> 22:34.880
前进

22:35.840 --> 22:37.040
好如果说我们调用档

22:38.960 --> 22:39.920
加在完成

22:39.920 --> 22:42.160
所以我们现在要做的事情是不是特别简单

22:42.160 --> 22:43.360
我们要在这里的

22:43.360 --> 22:44.000
无非就是

22:44.560 --> 22:45.280
在这个位置

22:46.320 --> 22:47.440
使用start

22:47.440 --> 22:48.880
在这个位置呢使用档

22:50.830 --> 22:51.310
做完了

22:52.030 --> 22:53.070
好保存啊你看

22:54.750 --> 22:56.030
就要出来了对吧

22:56.030 --> 22:57.310
然后呢我们再看啊

22:57.470 --> 22:58.510
回到首页

22:58.510 --> 22:59.150
你看

22:59.150 --> 23:00.350
就有加载的过程

23:00.350 --> 23:01.070
加载出来了

23:02.030 --> 23:02.830
然后到文章

23:03.390 --> 23:03.790
对吧

23:03.790 --> 23:05.310
但是我们现在开发模式

23:05.310 --> 23:06.910
它其实没有加上那么慢的

23:06.910 --> 23:07.310
而且呢

23:07.310 --> 23:08.590
因为我们打包的结果里面

23:08.590 --> 23:09.630
不是我们告诉大家吗

23:09.630 --> 23:10.430
有一个prefetch

23:11.550 --> 23:12.430
prefetch

23:12.430 --> 23:13.550
我们上一课讲过对吧

23:13.550 --> 23:13.950
它会

23:14.670 --> 23:16.350
虽然说我们还没有用到后续的页面

23:16.350 --> 23:17.390
但是它的GS呢

23:17.390 --> 23:18.910
会在空前的时候就要加载好

23:19.550 --> 23:19.950
因此呢

23:19.950 --> 23:21.070
你到时候你切换页面了

23:21.070 --> 23:22.110
实际上是很快的

23:22.110 --> 23:24.030
但是为了避免

23:24.030 --> 23:24.510
出现了

23:25.550 --> 23:26.270
大量的页面

23:26.990 --> 23:28.350
就出现了还没有加载到

23:28.350 --> 23:29.230
这个GS

23:29.230 --> 23:30.590
我们就切换页面的时候呢

23:30.590 --> 23:31.390
可能会加载

23:31.390 --> 23:32.750
加载这个主键配置对象

23:33.550 --> 23:34.430
避免用户等待

23:34.430 --> 23:36.670
我们给它做这么个精度调

23:37.310 --> 23:37.710
OK

23:37.710 --> 23:39.070
这就是咱们这节目的内容

23:39.070 --> 23:41.550
做一个非常简单的一个精度调

