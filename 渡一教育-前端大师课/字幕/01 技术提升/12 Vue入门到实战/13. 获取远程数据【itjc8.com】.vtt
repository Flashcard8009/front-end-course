WEBVTT

00:00.240 --> 00:05.240
这节课呢 它又是属于代码媒体行道理一大堆

00:05.240 --> 00:07.440
但是呢 这个道理不懂不行

00:07.440 --> 00:10.440
不懂的话 你对这一块就认识不清楚

00:10.440 --> 00:12.440
这一块咱们讲啥呢

00:12.440 --> 00:16.240
首先啊 本节课的东西啊 跟无忧没有任何关系

00:16.240 --> 00:19.440
可能跟无忧搅手架 就是无忧cli 可能有点关系啊

00:19.440 --> 00:22.440
但是跟无忧本身呢 没有任何关系

00:22.440 --> 00:25.440
我们讲的是什么呢 讲的是网络通信

00:25.440 --> 00:27.440
因为我们现在这个页面上啊

00:27.440 --> 00:29.440
我们目前这是我们最终的效果啊

00:30.440 --> 00:32.440
最终效果里边呢 比方说有文章

00:32.440 --> 00:35.440
这些文章是不是数据啊 得是数据吧 对吧

00:35.440 --> 00:39.440
包括文章图片啊 文章标题啊 评论书啊 浏览量啊

00:39.440 --> 00:42.440
这些东西不得都是那个

00:42.440 --> 00:45.440
得都是那个什么数据吧

00:46.440 --> 00:49.440
好 那么这些数据呢 能不能写实呢

00:49.440 --> 00:51.440
在我们的GS里边写实呢 比方说你第一个数组

00:51.440 --> 00:54.440
能不能把这些数据写出来呢 可以倒是可以

00:54.440 --> 00:56.440
但你怎么维护呢

00:56.440 --> 00:59.440
将来有一天你要新这个文章 你不得跑到数据里边去

00:59.440 --> 01:02.440
加一箱嘛 改一下代码 然后重新部署

01:02.440 --> 01:04.440
不特别麻烦嘛

01:04.440 --> 01:06.440
所以说呢 我们得把这些数据呢

01:06.440 --> 01:08.440
使用真实的远程数据

01:08.440 --> 01:11.440
为什么远程数据维护起来就简单呢

01:11.440 --> 01:13.440
你看啊 这张图

01:13.440 --> 01:15.440
为什么我们要获取远程数据

01:15.440 --> 01:18.440
因为我们的页面啊 实际上我们的网站

01:18.440 --> 01:20.440
是有两个 目前我们开发的是什么呢

01:20.440 --> 01:22.440
开发的是前台 前台是啥

01:22.440 --> 01:24.440
就给用户看的 大家都可以看

01:24.440 --> 01:26.440
进入这个网址就可以看

01:26.440 --> 01:28.440
到时候部署了过后呢 就是一个真实的运民

01:28.440 --> 01:30.440
进去过就可以看了

01:30.440 --> 01:32.440
这叫做前台

01:32.440 --> 01:35.440
但是前台呢 有些数据是不能维护的

01:35.440 --> 01:37.440
但有些数据呢 是可以维护的

01:37.440 --> 01:39.440
比方说像那个 留言对吧

01:39.440 --> 01:41.440
那些前台可以发布一个留言

01:41.440 --> 01:43.440
也就是新增了一个数据

01:43.440 --> 01:45.440
但是呢 有些数据呢 前台是不能维护的

01:45.440 --> 01:47.440
比方说你上淘宝啊

01:47.440 --> 01:49.440
淘宝有多少个商品 你能控制吗

01:49.440 --> 01:50.440
你不能控制吧

01:50.440 --> 01:52.440
你不能去新增个商品吧

01:52.440 --> 01:54.440
你不能去改动一个商品吧

01:54.440 --> 01:56.440
对不对 污流信息 你能控制吗

01:56.440 --> 01:57.440
你不能控制吧

01:57.440 --> 01:59.440
还用户信息 你能控制吗

01:59.440 --> 02:00.440
不能控制吧

02:00.440 --> 02:02.440
前台的很多数据 你是不能控制的

02:02.440 --> 02:04.440
因为它是面向大众的

02:04.440 --> 02:06.440
还有一个东西 那叫做后台

02:06.440 --> 02:07.440
后台我们将来会开发

02:07.440 --> 02:09.440
一个后台网站

02:09.440 --> 02:11.440
那一块呢 就是给管理员用的

02:11.440 --> 02:13.440
管理员登入进后台过后了

02:13.440 --> 02:14.440
他就可以控制很多数据

02:14.440 --> 02:17.440
包括什么文章发布啊 评论管理啊

02:17.440 --> 02:19.440
删除啊这东西都可以做了

02:19.440 --> 02:21.440
但是后台控制的

02:21.440 --> 02:23.440
所以我们一般会有两个网站

02:23.440 --> 02:25.440
诶 只要闻到网站

02:25.440 --> 02:26.440
两个网站写好了之后

02:26.440 --> 02:28.440
一个前台 一个后台写好了之后呢

02:28.440 --> 02:30.440
将来我们要控制数据

02:30.440 --> 02:32.440
就不是写代码了啊

02:32.440 --> 02:33.440
直接进入网站

02:33.440 --> 02:35.440
四个人都能学会怎么去用

02:35.440 --> 02:38.440
对吧 你到公司里边哪怕你是个前台行政

02:38.440 --> 02:40.440
你进了这个后台页面你都会用

02:40.440 --> 02:41.440
怎么去控制数据

02:41.440 --> 02:43.440
所以说我们一般来说有两个网站啊

02:43.440 --> 02:46.440
这就是我们要远程数据的意义

02:46.440 --> 02:49.440
后台页面主要是用来维护数据

02:49.440 --> 02:50.440
控制数据

02:50.440 --> 02:52.440
比如说我要新增一篇文章

02:52.440 --> 02:54.440
新增一个用户 或者是禁用一个用户

02:54.440 --> 02:55.440
这个用户不能都录了

02:55.440 --> 02:56.440
那么这个时候呢

02:56.440 --> 02:59.440
我们进入了后台去管理这个数据

02:59.440 --> 03:01.440
管理的时候呢 就要用阿迦克斯

03:01.440 --> 03:02.440
访问服务器

03:02.440 --> 03:04.440
比如说我要发布一个文章

03:04.440 --> 03:05.440
请求一个服务器

03:05.440 --> 03:06.440
那么服务器呢

03:06.440 --> 03:07.440
就把我这个新的文章记录下来

03:07.440 --> 03:09.440
记录到服务器上的啊

03:09.440 --> 03:10.440
服务器有没有现在

03:10.440 --> 03:13.440
没有 没有这样的服务器

03:13.440 --> 03:16.440
然后呢我们前台页面呢

03:16.440 --> 03:17.440
就来获取数据

03:17.440 --> 03:19.440
比方说我要获取目前的最新文章

03:19.440 --> 03:21.440
那么就可以从服务器去拿

03:21.440 --> 03:23.440
所以说形成这么一个避缓之后呢

03:23.440 --> 03:25.440
我们数据的管理起来就非常方便了

03:25.440 --> 03:27.440
不用去以改数据

03:27.440 --> 03:29.440
以遥动数据去改动代码

03:29.440 --> 03:30.440
那个太烦了

03:30.440 --> 03:32.440
这是远程数据的意义

03:32.440 --> 03:33.440
那么现在呢

03:33.440 --> 03:34.440
我们要用远程数据

03:34.440 --> 03:35.440
怎么来获取远程数据呢

03:35.440 --> 03:37.440
当然是用阿迦克斯

03:37.440 --> 03:38.440
对不对

03:38.440 --> 03:39.440
无刷新的用戒业式

03:39.440 --> 03:41.440
来去访问远程数据

03:41.440 --> 03:42.440
那么怎么访问呢

03:42.440 --> 03:46.440
我们可以用H5的废棋

03:46.440 --> 03:47.440
可以用这个

03:47.440 --> 03:49.440
当然可以最原始的对吧

03:49.440 --> 03:51.440
HR是最原始的

03:51.440 --> 03:54.440
也就是说什么XML

03:54.440 --> 03:56.440
怎么写的

03:56.440 --> 03:57.440
ADDP request

03:57.440 --> 03:58.440
可以用这个

03:58.440 --> 04:00.440
发生H5的请求

04:00.440 --> 04:01.440
也可以用怎么呢

04:01.440 --> 04:02.440
也可以用H5的API

04:02.440 --> 04:04.440
这东西用的更加舒服一点

04:04.440 --> 04:07.440
也可以用了一些第三方库

04:07.440 --> 04:09.440
封装了更加好的一些第三方库

04:09.440 --> 04:10.440
比方说X格式

04:10.440 --> 04:12.440
也是用的非常广泛的一个第三方库

04:12.440 --> 04:14.440
那么我们本节课呢

04:14.440 --> 04:15.440
就学习X格式的使用

04:15.440 --> 04:16.440
它本身并不复杂

04:16.440 --> 04:17.440
特别特别简单

04:17.440 --> 04:18.440
首先再说一次

04:18.440 --> 04:20.440
本节课的东西跟5U

04:20.440 --> 04:21.440
一点关系都没有

04:21.440 --> 04:22.440
哪怕你不用5U

04:22.440 --> 04:23.440
也可以用这个库

04:23.440 --> 04:24.440
这个库不是说

04:24.440 --> 04:25.440
只有在5U里面用

04:25.440 --> 04:27.440
因为我为什么要强调这一点呢

04:27.440 --> 04:29.440
因为以前有些学生问我

04:29.440 --> 04:30.440
一些莫名其妙的问题

04:30.440 --> 04:34.440
而5U里面请求数据出错了

04:34.440 --> 04:36.440
怎么办

04:36.440 --> 04:37.440
你首先把这个主义去掉

04:37.440 --> 04:38.440
什么叫5U里面

04:38.440 --> 04:40.440
跟5U有什么关系呢

04:40.440 --> 04:41.440
请求数据

04:41.440 --> 04:42.440
没有一毛钱关系的

04:42.440 --> 04:45.440
有人说5U的X格式

04:45.440 --> 04:48.440
X格式怎么去拦戒请求

04:48.440 --> 04:50.440
这个问法就有问题了

04:50.440 --> 04:52.440
X格式也不是属于5U的

04:52.440 --> 04:53.440
我们这里呢

04:53.440 --> 04:54.440
就单独来学习

04:54.440 --> 04:55.440
这个X格式库

04:55.440 --> 04:56.440
几句话就学习完了

04:56.440 --> 04:57.440
还有一个官方网站

04:57.440 --> 04:58.440
也是Gate Hub

04:58.440 --> 05:00.440
也不是什么官方网站的

05:00.440 --> 05:02.440
Gate Hub

05:02.440 --> 05:04.440
我们就直接来吧

05:04.440 --> 05:05.440
我们找到客常代吧

05:05.440 --> 05:06.440
找到我们这一块的东西

05:06.440 --> 05:07.440
点击右键

05:07.440 --> 05:08.440
东西打开

05:08.440 --> 05:09.440
现在我们安装一个异带

05:09.440 --> 05:11.440
NPMIX格式

05:13.440 --> 05:15.440
安装一下这个异带

05:15.440 --> 05:17.440
来去随便测试一下吧

05:17.440 --> 05:19.440
我们把代码写到哪儿了

05:19.440 --> 05:21.440
写到src目录下面

05:21.440 --> 05:23.440
这个文件夹吧

05:23.440 --> 05:24.440
叫API

05:24.440 --> 05:25.440
这一块就是

05:25.440 --> 05:29.440
我们去请求远程数据

05:29.440 --> 05:30.440
比方说吧

05:30.440 --> 05:31.440
我们去请求

05:31.440 --> 05:33.440
随便来请求个数据吧

05:33.440 --> 05:34.440
写个什么

05:34.440 --> 05:35.440
写个Test

05:35.440 --> 05:38.440
就Test了

05:38.440 --> 05:41.440
这边我们提供一个方法

05:41.440 --> 05:43.440
叫做

05:43.440 --> 05:44.440
我们请求啥远程数据

05:44.440 --> 05:45.440
我这有没有服务器

05:45.440 --> 05:47.440
我就询成这个吧

05:47.440 --> 05:48.440
直呼上来一个

05:48.440 --> 05:52.030
找一个数据吧

05:52.030 --> 05:53.030
network

05:53.030 --> 05:54.030
看直呼上有没有什么

05:54.030 --> 05:56.030
就是有没有那个

05:56.030 --> 05:57.030
阿迦克斯

05:57.030 --> 05:58.030
你看

05:58.030 --> 05:59.030
在network里面选用这个

05:59.030 --> 06:00.030
xsr

06:00.030 --> 06:01.030
就是阿迦克斯

06:01.030 --> 06:02.030
你看

06:02.030 --> 06:03.030
下面给你提示

06:03.030 --> 06:05.030
xsr and fetch

06:05.030 --> 06:07.030
反而是用

06:07.030 --> 06:08.030
原传统的阿迦克斯

06:08.030 --> 06:10.030
或者是h5的fetch

06:10.030 --> 06:12.030
得到的请求都会放到

06:12.030 --> 06:14.030
这个分类里面

06:14.030 --> 06:16.030
随便找一个吧

06:16.030 --> 06:18.030
就这个吧

06:18.030 --> 06:19.030
好吧

06:19.030 --> 06:20.030
就这个

06:20.030 --> 06:21.030
看看这个东西

06:21.030 --> 06:22.030
好像有个sation ID

06:22.030 --> 06:24.030
sation token

06:24.030 --> 06:25.030
随便吧

06:25.030 --> 06:26.030
我们看一下能不能获取到

06:26.030 --> 06:27.030
我们看一下能不能获取到

06:27.030 --> 06:29.030
我在这个控制台里面试一下

06:29.030 --> 06:31.030
就在直呼的控制台里面试一下

06:31.030 --> 06:32.030
能不能获取到

06:32.030 --> 06:33.030
fetch

06:33.030 --> 06:34.030
这个东西不用解释吧

06:34.030 --> 06:36.030
你不要让我去解释管

06:36.030 --> 06:38.030
你学了又丢了

06:38.030 --> 06:40.030
如果说你真的丢了的话

06:40.030 --> 06:42.030
试一下我之前的这个

06:42.030 --> 06:44.030
评计

06:44.030 --> 06:47.660
OK

06:47.660 --> 06:49.660
能不能获取

06:49.660 --> 06:50.660
能不能获取就好

06:50.660 --> 06:51.660
好

06:51.660 --> 06:52.660
那么咱们来吧

06:52.660 --> 06:54.660
我看一下

06:54.660 --> 06:56.980
来

06:56.980 --> 06:57.980
我们就请求这个地址

06:57.980 --> 06:58.980
但是有可能有

06:58.980 --> 07:00.980
couple的问题

07:00.980 --> 07:01.980
无所谓吧

07:01.980 --> 07:02.980
我们来请求说明问题就行了

07:02.980 --> 07:03.980
现在呢

07:03.980 --> 07:04.980
我们去得到

07:04.980 --> 07:06.980
直呼的那个

07:06.980 --> 07:07.980
这个是啥呀

07:07.980 --> 07:09.980
这个是推荐对吧

07:09.980 --> 07:10.980
get

07:10.980 --> 07:11.980
get60吧

07:12.980 --> 07:13.980
来测试一下

07:13.980 --> 07:14.980
我们使用

07:14.980 --> 07:15.980
xs

07:15.980 --> 07:16.980
现在我们可不可以用

07:16.980 --> 07:17.980
可以啊

07:17.980 --> 07:18.980
我们现在呢去

07:18.980 --> 07:19.980
转用xs

07:19.980 --> 07:20.980
导入这个xs

07:20.980 --> 07:21.980
xs

07:21.980 --> 07:23.980
xs就是里面提供了一些

07:23.980 --> 07:25.980
方法来帮助我们来请求

07:25.980 --> 07:26.980
其实跟那个

07:26.980 --> 07:27.980
getquery的用法呢

07:27.980 --> 07:28.980
也差不多

07:28.980 --> 07:29.980
get请求

07:29.980 --> 07:30.980
post请求

07:30.980 --> 07:31.980
对吧

07:31.980 --> 07:32.980
这些

07:32.980 --> 07:33.980
还有什么

07:33.980 --> 07:34.980
甚至put请求

07:34.980 --> 07:35.980
甚至delete请求

07:35.980 --> 07:36.980
都可以啊

07:36.980 --> 07:37.980
我们这里用不了那些

07:37.980 --> 07:39.980
我们只用get请求

07:39.980 --> 07:40.980
请求这个路径

07:41.980 --> 07:42.980
好请求的结果呢

07:42.980 --> 07:43.980
它是一个异步的

07:43.980 --> 07:44.980
所以说我们要等待

07:47.980 --> 07:48.980
等待一下

07:48.980 --> 07:50.980
它会返回一个响应结果

07:50.980 --> 07:52.980
这个响应结果里面就包含了

07:52.980 --> 07:53.980
什么

07:53.980 --> 07:54.980
包含了请求头

07:54.980 --> 07:56.980
请求体

07:56.980 --> 07:58.980
好我们这里输出一下啊

07:59.980 --> 08:01.980
调一下get60测试一下

08:02.980 --> 08:03.980
现在呢我们在

08:03.980 --> 08:04.980
Media接式里面

08:04.980 --> 08:05.980
导入这个

08:05.980 --> 08:06.980
上级课的

08:06.980 --> 08:08.980
这些弯弯弯弯弯弯弯弯弯弯弯

08:08.980 --> 08:12.950
测试一下

08:12.950 --> 08:13.950
Import

08:14.950 --> 08:15.950
API

08:15.950 --> 08:16.950
Test

08:16.950 --> 08:17.950
导入啊

08:18.950 --> 08:19.950
看一下行不行

08:19.950 --> 08:20.950
运行出来

08:20.950 --> 08:22.950
npn装售

08:22.950 --> 08:29.420
运行

08:30.420 --> 08:31.420
检查

08:31.420 --> 08:32.420
控制台

08:32.420 --> 08:33.420
你看

08:33.420 --> 08:35.420
现在出了一个问题

08:36.420 --> 08:37.420
说一个什么问题呢

08:37.420 --> 08:38.420
这里

08:38.420 --> 08:39.420
在这

08:39.420 --> 08:40.420
我们去访问

08:40.420 --> 08:41.420
请求这个地址

08:41.420 --> 08:42.420
它跟我们出了这样的一个错误

08:43.420 --> 08:44.420
这个错误是什么呢

08:44.420 --> 08:46.420
blah blah blah blah

08:46.420 --> 08:47.420
说了一大堆

08:47.420 --> 08:49.420
说了有什么跨域问题

08:49.420 --> 08:51.420
为什么跨域了呢

08:51.420 --> 08:53.420
来看一下为什么跨域了

08:54.420 --> 08:56.420
开发环境有跨域问题

08:56.420 --> 08:57.420
怎么跨

08:57.420 --> 08:58.420
怎么就跨域了

08:58.420 --> 08:59.420
首先让大家知道

08:59.420 --> 09:00.420
我们现在呢

09:00.420 --> 09:02.420
有没有服务器呢

09:02.420 --> 09:03.420
现在我们有一个叫

09:03.420 --> 09:04.420
开发服务器

09:04.420 --> 09:06.420
叫前端开发服务器

09:06.420 --> 09:07.420
这个服务器是谁这么大件的

09:07.420 --> 09:08.420
你看我们请求这个地址

09:08.420 --> 09:09.420
是不是拿到一个页面

09:09.420 --> 09:10.420
对吧

09:11.420 --> 09:12.420
这个服务器是谁

09:12.420 --> 09:13.420
谁大件的呢

09:13.420 --> 09:14.420
是WheelClee

09:14.420 --> 09:15.420
不是Wheel

09:15.420 --> 09:16.420
是WheelClee

09:16.420 --> 09:17.420
是脚手架给我大件的

09:17.420 --> 09:18.420
实际上脚手架

09:18.420 --> 09:19.420
是用什么大件的

09:19.420 --> 09:20.420
是用WheelPack大件的

09:20.420 --> 09:22.420
你没学过WheelPack对吧

09:22.420 --> 09:24.420
是用它大件的服务器

09:24.420 --> 09:25.420
那么我们现在呢

09:25.420 --> 09:26.420
是请求我们的

09:26.420 --> 09:28.420
前端开发服务器

09:28.420 --> 09:29.420
默认端口是8080

09:29.420 --> 09:30.420
那个端口呢

09:30.420 --> 09:31.420
也可能会变化

09:31.420 --> 09:32.420
然后它就会给我一个什么

09:32.420 --> 09:33.420
给我一个页面

09:33.420 --> 09:34.420
然后浏览器

09:34.420 --> 09:35.420
就渲染这个页面

09:35.420 --> 09:36.420
渲染这个页面

09:36.420 --> 09:37.420
这个页面里面有啥呢

09:37.420 --> 09:39.420
啥其实啥都没有空的

09:39.420 --> 09:40.420
然后呢有一个介石

09:40.420 --> 09:41.420
对吧

09:41.420 --> 09:42.420
应用了很多介石

09:42.420 --> 09:43.420
它就是打包好的

09:43.420 --> 09:44.420
这个我们写的代码

09:46.420 --> 09:47.420
那么它会去请求介石

09:47.420 --> 09:48.420
我这里没画了

09:48.420 --> 09:49.420
请求介石

09:49.420 --> 09:50.420
请求CSS

09:50.420 --> 09:52.420
总之呢这些东西拿到

09:52.420 --> 09:53.420
好请求的介石过后

09:53.420 --> 09:54.420
介石里面不是有一个

09:54.420 --> 09:55.420
阿迦克斯请求吗

09:55.420 --> 09:56.420
对不对

09:56.420 --> 09:57.420
你看我们介石里面

09:57.420 --> 09:58.420
是不是写了一个

09:58.420 --> 09:59.420
阿迦克斯请求

09:59.420 --> 10:00.420
好请求的时候

10:00.420 --> 10:01.420
是不是我们请求的

10:01.420 --> 10:02.420
谁请求的

10:02.420 --> 10:04.420
另外一个服务器

10:04.420 --> 10:05.420
一般来说呢

10:05.420 --> 10:06.420
我们在开发阶段

10:06.420 --> 10:07.420
会请求一个

10:07.420 --> 10:09.420
后端测试服务器

10:09.420 --> 10:10.420
这个后端测试服务器呢

10:10.420 --> 10:11.420
一般是后端开发里面

10:11.420 --> 10:13.420
给你开发好了

10:13.420 --> 10:15.420
这个里面的东西

10:15.420 --> 10:16.420
全是假的数据

10:16.420 --> 10:17.420
全是测试的数据

10:17.420 --> 10:18.420
也不是假的数据

10:18.420 --> 10:20.420
全是测试的数据

10:20.420 --> 10:21.420
那么这个服务器

10:21.420 --> 10:22.420
会给搭建好

10:22.420 --> 10:24.420
然后它会给你一个地址

10:24.420 --> 10:25.420
比方说这个地址呢

10:25.420 --> 10:26.420
就是test的data

10:26.420 --> 10:28.420
然后端口号13000

10:28.420 --> 10:29.420
让你去请求它

10:29.420 --> 10:30.420
那去打数据

10:30.420 --> 10:31.420
一般来说

10:31.420 --> 10:32.420
不会给你真实的

10:32.420 --> 10:33.420
真实的

10:33.420 --> 10:34.420
真在用的服务器

10:34.420 --> 10:35.420
不会给你

10:35.420 --> 10:36.420
不然的话

10:36.420 --> 10:37.420
你在那边乱搞

10:37.420 --> 10:38.420
搞得现在比较努力

10:38.420 --> 10:39.420
新闻删了一篇

10:39.420 --> 10:40.420
那

10:40.420 --> 10:41.420
所谓的网站

10:41.420 --> 10:42.420
别人看到的网站

10:42.420 --> 10:43.420
用户看到的网站

10:43.420 --> 10:44.420
搞了一篇

10:44.420 --> 10:45.420
不会给你真实的服务器

10:45.420 --> 10:47.420
会给你一个测试服务器地址

10:47.420 --> 10:48.420
然后那我们

10:48.420 --> 10:49.420
比方说吧

10:49.420 --> 10:50.420
这就是我们的测试服务器地址

10:50.420 --> 10:51.420
去拿新闻

10:51.420 --> 10:53.420
假设啊

10:53.420 --> 10:54.420
这样这一拿

10:54.420 --> 10:55.420
由于我们目前的页面

10:55.420 --> 10:56.420
是在这

10:56.420 --> 10:57.420
你看啊

10:57.420 --> 10:58.420
我们的介石

10:58.420 --> 10:59.420
是在这个页面里面运行的

10:59.420 --> 11:00.420
对吧

11:00.420 --> 11:01.420
然后我们的生物

11:01.420 --> 11:02.420
目前的页面

11:02.420 --> 11:03.420
我们从这个页面去发送

11:03.420 --> 11:04.420
一个articles请求

11:04.420 --> 11:05.420
请求测试服务器

11:05.420 --> 11:06.420
那肯定啊

11:06.420 --> 11:07.420
那端口号

11:07.420 --> 11:08.420
要么端口号不一样

11:08.420 --> 11:09.420
要么就是服务器

11:09.420 --> 11:10.420
那域名都不一样

11:10.420 --> 11:12.420
那肯定就测试到跨域了

11:12.420 --> 11:13.420
那这一跨域

11:13.420 --> 11:14.420
后装服务

11:14.420 --> 11:15.420
这个测试服务器啊

11:15.420 --> 11:16.420
他有没有给你数据啊

11:16.420 --> 11:18.420
给了你数据的

11:18.420 --> 11:19.420
不是说不给啊

11:19.420 --> 11:21.420
给会给你这个数据

11:21.420 --> 11:22.420
但是呢

11:22.420 --> 11:23.420
流量器由于他发现有跨域

11:23.420 --> 11:24.420
为了安全

11:24.420 --> 11:25.420
他会阻止

11:25.420 --> 11:27.420
把这个数据给介石

11:27.420 --> 11:28.420
你介石拿不到

11:28.420 --> 11:29.420
并且会给你报一个处

11:29.420 --> 11:30.420
没人意思吧

11:30.420 --> 11:32.420
跨域是这么产生的

11:32.420 --> 11:34.420
是在开发环境里面有跨域

11:34.420 --> 11:35.420
那有的人说

11:35.420 --> 11:36.420
开发环境有跨域

11:36.420 --> 11:37.420
将来在生产环境

11:37.420 --> 11:39.420
就真正全部部署好了

11:39.420 --> 11:40.420
要给用户法访问了

11:40.420 --> 11:41.420
那个时候会不会有跨域呢

11:41.420 --> 11:42.420
那个时候呢

11:42.420 --> 11:43.420
一般不会有跨域

11:43.420 --> 11:44.420
我只是说一般啊

11:44.420 --> 11:45.420
那有些国业不知道

11:45.420 --> 11:47.420
你们公司的服务器结构

11:47.420 --> 11:48.420
是怎么回事

11:48.420 --> 11:49.420
那情况太多了

11:49.420 --> 11:50.420
我给他举两个例子

11:50.420 --> 11:51.420
为什么会生产环境

11:51.420 --> 11:53.420
是没有跨域的

11:53.420 --> 11:54.420
真实的环境里面

11:54.420 --> 11:56.420
为什么是什么情况呢

11:56.420 --> 11:57.420
一个最简单的例子就是

11:57.420 --> 11:59.420
将来我们开发好了过

11:59.420 --> 12:00.420
不是要打包吗

12:00.420 --> 12:01.420
打包到哪儿呢

12:01.420 --> 12:02.420
打包到地神部路

12:02.420 --> 12:03.420
还记得吗

12:03.420 --> 12:04.420
当时我们一打包

12:04.420 --> 12:05.420
就变成一个地神部路了

12:05.420 --> 12:06.420
对不对

12:06.420 --> 12:07.420
打包里面就是一个纯粹的

12:07.420 --> 12:08.420
你们的文件

12:08.420 --> 12:09.420
一些GS一些CSS

12:09.420 --> 12:10.420
你把那些东西呢

12:10.420 --> 12:12.420
就会交给后端开发者

12:12.420 --> 12:13.420
或者是你自己

12:13.420 --> 12:15.420
上传到服务器上去

12:15.420 --> 12:17.420
然后这个服务器不仅

12:17.420 --> 12:18.420
不仅是一个

12:18.420 --> 12:21.420
不仅能够拖载静态资源

12:21.420 --> 12:23.420
还可以提供API

12:23.420 --> 12:24.420
大概就这么一样子

12:24.420 --> 12:25.420
将来部署好了

12:25.420 --> 12:26.420
过后

12:26.420 --> 12:27.420
用户一访问

12:27.420 --> 12:30.420
比方说访问这个3W MySight

12:30.420 --> 12:31.420
就访问到我们的

12:31.420 --> 12:32.420
真实的服务器

12:32.420 --> 12:33.420
比方放到阿利云

12:33.420 --> 12:35.420
放到腾讯云上面了

12:35.420 --> 12:36.420
然后服务器

12:37.420 --> 12:39.420
这个过程跟这里是一样的

12:39.420 --> 12:40.420
只不过目前是用开发服务器

12:40.420 --> 12:42.420
它就会给你一个页面

12:42.420 --> 12:43.420
那么这个页面里面有GS

12:43.420 --> 12:44.420
有CSS

12:44.420 --> 12:45.420
你自己去拿

12:45.420 --> 12:46.420
重新去拿

12:46.420 --> 12:47.420
我这里没画了

12:47.420 --> 12:48.420
拿到GS过后

12:48.420 --> 12:49.420
是不是要运行GS

12:49.420 --> 12:50.420
GS里面是不是要

12:50.420 --> 12:51.420
阿迦克斯请求

12:51.420 --> 12:52.420
阿迦克斯请求的谁呢

12:52.420 --> 12:54.420
还是这个

12:54.420 --> 12:55.420
请求的还是他

12:55.420 --> 12:56.420
有没有跨越

12:56.420 --> 12:57.420
他就没有跨越

12:57.420 --> 12:58.420
这个服务器

12:58.420 --> 12:59.420
他既能够给你页面

12:59.420 --> 13:00.420
又能够给你

13:00.420 --> 13:01.420
阿迦克斯的一些数据

13:01.420 --> 13:02.420
有跨越

13:02.420 --> 13:03.420
没有跨越

13:03.420 --> 13:04.420
这是这种情况

13:04.420 --> 13:05.420
还有一种情况

13:05.420 --> 13:06.420
是这种情况

13:08.420 --> 13:09.420
浏览器

13:09.420 --> 13:10.420
就是我们是分开的

13:10.420 --> 13:11.420
我们的打包好的

13:11.420 --> 13:12.420
ATM和CSS

13:12.420 --> 13:14.420
GS放到一个单独的服务器

13:14.420 --> 13:15.420
我们的数据服务器

13:15.420 --> 13:16.420
那是另外一个

13:17.420 --> 13:18.420
那么这种情况有没有跨越

13:18.420 --> 13:19.420
这种情况有跨越

13:19.420 --> 13:20.420
生产环境

13:21.420 --> 13:22.420
那这种情况怎么回事呢

13:22.420 --> 13:23.420
就浏览器请求地址

13:23.420 --> 13:24.420
比方说请求我们这个网站

13:24.420 --> 13:25.420
然后呢

13:25.420 --> 13:27.420
请求的是静态资源服务器

13:27.420 --> 13:28.420
这个有可能是一个CDN

13:28.420 --> 13:29.420
有可能是一个

13:31.420 --> 13:32.420
有可能是一个

13:32.420 --> 13:34.420
以门以后学生

13:34.420 --> 13:35.420
开发的中间服务器

13:36.420 --> 13:37.420
也有可能是什么别的

13:37.420 --> 13:38.420
无所谓

13:38.420 --> 13:39.420
反正他就是给你页面

13:40.420 --> 13:41.420
你能拿到这个页面

13:41.420 --> 13:42.420
拿到这个页面过后

13:42.420 --> 13:43.420
你不得去请求

13:43.420 --> 13:44.420
CSS GS

13:44.420 --> 13:45.420
拿到GS过后运行

13:45.420 --> 13:47.420
运行GS里边请求的是

13:47.420 --> 13:48.420
另外一个网站

13:48.420 --> 13:49.420
请求的是数据服务器

13:49.420 --> 13:50.420
别人的数据

13:50.420 --> 13:51.420
我们的数据在另外一个服务器上

13:52.420 --> 13:53.420
那么这样

13:53.420 --> 13:54.420
要不要他能跨越腰

13:54.420 --> 13:55.420
但是呢

13:55.420 --> 13:56.420
这种情况你不用担心

13:57.420 --> 13:58.420
你作为前段开发者

13:58.420 --> 13:59.420
你倒是不用担心

13:59.420 --> 14:00.420
因为后段开发者

14:00.420 --> 14:01.420
会给你处理

14:01.420 --> 14:02.420
比方说

14:02.420 --> 14:03.420
他会怎么处理

14:03.420 --> 14:04.420
给你允许

14:04.420 --> 14:06.420
允许你这个网站

14:07.420 --> 14:08.420
你不是在

14:08.420 --> 14:09.420
你不是页面在这个网站吗

14:09.420 --> 14:11.420
他允许你这个网站来

14:11.420 --> 14:12.420
跨越请求数据

14:12.420 --> 14:13.420
他允许

14:13.420 --> 14:14.420
只要他允许

14:14.420 --> 14:15.420
浏览器一看

14:15.420 --> 14:16.420
他允许他就会交给你

14:16.420 --> 14:17.420
说他也不会产生跨越问题

14:17.420 --> 14:19.420
说来说去就是告诉你们

14:19.420 --> 14:21.420
就目前而言

14:21.420 --> 14:22.420
你们不用去想那么多

14:22.420 --> 14:23.420
以后在生产

14:23.420 --> 14:25.420
环境里边不会有跨越问题的

14:25.420 --> 14:27.420
一般来说不会有

14:27.420 --> 14:28.420
具体的情况

14:28.420 --> 14:29.420
你们以后学生

14:29.420 --> 14:30.420
漏的之后呢

14:30.420 --> 14:31.420
就会非常非常清楚了

14:31.420 --> 14:32.420
就算有怎么回去

14:32.420 --> 14:33.420
怎么去处理

14:33.420 --> 14:34.420
怎么去处理跨越

14:34.420 --> 14:35.420
因为跨越问题

14:35.420 --> 14:37.420
是要在服务端处理的

14:37.420 --> 14:40.420
需要服务端和科普端配合来处理

14:40.420 --> 14:41.420
好了

14:41.420 --> 14:42.420
生产环境没有跨越

14:42.420 --> 14:43.420
现在跨越的问题

14:43.420 --> 14:45.420
主要产生在开发环境里边

14:45.420 --> 14:46.420
那么也就说

14:46.420 --> 14:47.420
我们现在要解决的问题

14:47.420 --> 14:48.420
只有一个

14:48.420 --> 14:51.420
怎么解决开发环境里边的跨越问题

14:51.420 --> 14:52.420
下一个

14:52.420 --> 14:53.420
怎么来解决

14:53.420 --> 14:55.420
开发环境的跨越问题呢

14:55.420 --> 14:57.420
我们先看理论

14:57.420 --> 14:58.420
我们的浏览器

14:58.420 --> 15:00.420
还是请求开发服务器

15:00.420 --> 15:01.420
请求这个开发服务器

15:01.420 --> 15:02.420
给我们一个页面

15:02.420 --> 15:03.420
然后接S拿到

15:03.420 --> 15:04.420
然后运行接S

15:04.420 --> 15:05.420
接S现在去

15:05.420 --> 15:07.420
就不要去请求那个

15:07.420 --> 15:09.420
不要去跨越请求了

15:09.420 --> 15:10.420
就不要去跨越请求支付了

15:10.420 --> 15:12.420
比方说我们这是一个测试服务器

15:12.420 --> 15:14.420
开发阶段测试服务器

15:14.420 --> 15:16.420
那么请求这个地址肯定要跨越的

15:16.420 --> 15:18.420
那肯定是这个搞不定

15:18.420 --> 15:20.420
你不要去请求这个支付了

15:20.420 --> 15:21.420
直接请求了

15:21.420 --> 15:22.420
而转而什么呢

15:22.420 --> 15:24.420
转而去请求开发服务器

15:24.420 --> 15:25.420
同样的路径

15:25.420 --> 15:28.420
比方说我这个路径

15:28.420 --> 15:29.420
我去请求人了

15:29.420 --> 15:33.500
请求的是我们自己的

15:33.500 --> 15:35.500
localhost

15:35.500 --> 15:37.500
host

15:37.500 --> 15:41.840
8081

15:41.840 --> 15:42.840
对吧

15:42.840 --> 15:44.840
这是我们当前那个网站

15:44.840 --> 15:45.840
对吧

15:45.840 --> 15:46.840
当前那个开发服务器

15:46.840 --> 15:47.840
去请求开发服务器

15:47.840 --> 15:48.840
同样的地址

15:48.840 --> 15:49.840
明儿的意思吧

15:49.840 --> 15:50.840
你看比方在这里

15:50.840 --> 15:51.840
我去请求开发服务器

15:51.840 --> 15:52.840
API News

15:52.840 --> 15:54.840
然后交费开发服务器

15:54.840 --> 15:55.840
开发服务器

15:55.840 --> 15:56.840
你要给它设置一个功能

15:56.840 --> 15:58.840
你要把它变成一个代理

15:58.840 --> 16:00.840
它看到这样的地址的时候

16:00.840 --> 16:01.840
它就会把这个东西

16:01.840 --> 16:04.840
转发到后端测试服务器

16:04.840 --> 16:05.840
让它来转发

16:05.840 --> 16:06.840
它转发会不会跨越

16:06.840 --> 16:07.840
有些东西说

16:07.840 --> 16:08.840
它转发也会跨越

16:08.840 --> 16:09.840
搞清楚

16:09.840 --> 16:12.840
跨越只有浏览器会产生

16:12.840 --> 16:14.840
它不是ADDP造成的问题

16:14.840 --> 16:16.840
ADDP根本就没有跨越这个城

16:16.840 --> 16:18.840
是浏览器为了安全

16:18.840 --> 16:20.840
给你搞出来一个东西

16:20.840 --> 16:22.840
所以说只要脱离浏览器环境

16:22.840 --> 16:23.840
服务器肯定不是浏览器环境

16:23.840 --> 16:24.840
对吧

16:24.840 --> 16:25.840
开发服务器

16:25.840 --> 16:27.840
这里是微派给我们搭的

16:27.840 --> 16:28.840
因此它不会跨越的

16:28.840 --> 16:30.840
根本没有跨越这个东西

16:30.840 --> 16:32.840
它就正常的请求拿数据

16:32.840 --> 16:34.840
因此它会能正常的拿到阶层数据

16:34.840 --> 16:36.840
然后它又会把阶层数据转发给我

16:36.840 --> 16:37.840
而对于我们浏览器有没有跨越

16:37.840 --> 16:38.840
根本就没有跨越

16:38.840 --> 16:40.840
你看对于浏览器来说

16:40.840 --> 16:41.840
请求的是自己的网站的

16:41.840 --> 16:42.840
开发服务器的

16:42.840 --> 16:45.840
同一个给页面同样的协议

16:45.840 --> 16:47.840
短口号和域名都是一样的

16:47.840 --> 16:48.840
所以它没有跨越

16:48.840 --> 16:50.840
请求这个地方就拿到这个数据了

16:50.840 --> 16:51.840
它不知道这个后边做了啥事情

16:51.840 --> 16:52.840
它不管

16:52.840 --> 16:55.840
浏览器就是请求拿数据

16:55.840 --> 16:57.840
好 那么现在问题来了

16:57.840 --> 16:59.840
我如何去设置开发服务器的

16:59.840 --> 17:00.840
就是怎么让它带你呢

17:00.840 --> 17:01.840
它现在肯定没有带你

17:01.840 --> 17:04.840
你看我现在去请求这个东西

17:04.840 --> 17:07.840
放心 它告诉你404

17:07.840 --> 17:14.930
为什么是404呢

17:14.930 --> 17:15.930
你先拿吧 拿到东西吗

17:15.930 --> 17:17.930
什么拿不到东西啊

17:17.930 --> 17:18.930
它得到的

17:18.930 --> 17:19.930
虽然看得到页面

17:19.930 --> 17:24.930
它实际上给你网络响应的是一个404

17:24.930 --> 17:26.930
它给你想应的是一个404

17:26.930 --> 17:27.930
因为阿加赫斯请求的话

17:27.930 --> 17:29.930
它会给你一个404

17:29.930 --> 17:30.930
明儿的意思吧

17:30.930 --> 17:32.930
通过浏览器请求的话

17:32.930 --> 17:35.930
开发服务器倒是直接给你一个页面

17:35.930 --> 17:37.930
但是以阿加赫斯请求这张地址的话

17:37.930 --> 17:38.930
给你一个404

17:38.930 --> 17:39.930
它没有这个东西

17:39.930 --> 17:41.930
那么现在干嘛呢

17:41.930 --> 17:42.930
我们要做的事情就是

17:42.930 --> 17:44.930
高速开发服务器

17:44.930 --> 17:46.930
当我们请求这样的路徑的时候

17:46.930 --> 17:48.930
你给我带你

17:48.930 --> 17:50.930
给我转发到另外一个服务器上去

17:50.930 --> 17:51.930
路徑都一样

17:51.930 --> 17:54.930
就是把主机铭的端口号码改一下

17:54.930 --> 17:56.930
好 那么怎么来设置带你呢

17:56.930 --> 17:57.930
我们知道

17:57.930 --> 17:58.930
未拍颗里面怎么设置带你

17:58.930 --> 17:59.930
是不是要配置啊

17:59.930 --> 18:00.930
那么这里同样要配置

18:00.930 --> 18:01.930
在无忧颗粒里面呢

18:01.930 --> 18:03.930
你可以在根木路下面

18:03.930 --> 18:05.930
我们工程根木路下面新建个文件

18:05.930 --> 18:08.930
叫做无忧抗费的解释

18:08.930 --> 18:11.930
这个东西是无忧的配置文件

18:11.930 --> 18:13.930
不是无忧的配置文件

18:13.930 --> 18:15.930
无忧颗粒的配置文件

18:15.930 --> 18:17.930
所以说你要查文档的话

18:17.930 --> 18:20.930
应该从哪个官方文档查

18:20.930 --> 18:22.930
从无忧还是无忧颗粒

18:22.930 --> 18:24.930
所以要从无忧颗粒这个官方文档

18:24.930 --> 18:26.930
去查这里边的配置

18:26.930 --> 18:28.930
它跟无忧没有什么关系

18:28.930 --> 18:32.750
我们找到官方文档

18:32.750 --> 18:33.750
无忧颗粒的官方文档

18:33.750 --> 18:35.750
这里边有个配置参考

18:35.750 --> 18:38.750
我们想找无忧的抗费的解释

18:38.750 --> 18:39.750
你看 就是通过

18:39.750 --> 18:40.750
要用一个common解释导出

18:40.750 --> 18:43.750
因为它是在漏的环境里面堵的

18:43.750 --> 18:44.750
因为我们未拍颗了

18:44.750 --> 18:46.750
就想把未拍颗是不是在漏的环境里面

18:46.750 --> 18:49.750
堵着运作的

18:49.750 --> 18:50.750
那么无忧颗粒呢

18:50.750 --> 18:55.750
它也是在漏的环境里面运作的

18:55.750 --> 18:56.750
但是我们的无忧

18:56.750 --> 18:57.750
打包出来的无忧

18:57.750 --> 18:59.750
那是在浏览器环境里面执行的

19:00.750 --> 19:02.750
然后这里边有一个devo server

19:02.750 --> 19:03.750
你看

19:03.750 --> 19:04.750
devo server不就是未拍颗里面的配置吗

19:04.750 --> 19:05.750
就是跟未拍颗配置一样

19:05.750 --> 19:06.750
你看

19:06.750 --> 19:08.750
所有的未拍颗devo server的选项都支持

19:08.750 --> 19:09.750
它就是未拍颗的配置

19:09.750 --> 19:11.750
所以未拍颗里面怎么配置

19:11.750 --> 19:12.750
你又怎么配置

19:12.750 --> 19:13.750
配置什么呢

19:13.750 --> 19:14.750
黄水杯

19:14.750 --> 19:16.750
待里面

19:16.750 --> 19:17.750
待里什么呢

19:17.750 --> 19:19.750
反而是看到也API开头的

19:19.750 --> 19:21.750
我就给你待你到哪呢

19:21.750 --> 19:22.750
我就给你

19:22.750 --> 19:25.750
待你到

19:25.750 --> 19:27.750
找个地址吧

19:27.750 --> 19:30.750
比方说就待你到知乎吗

19:30.750 --> 19:31.750
API开头的

19:31.750 --> 19:32.750
我就待你到

19:32.750 --> 19:34.750
atdp

19:34.750 --> 19:37.750
s吧

19:37.750 --> 19:38.750
知乎

19:38.750 --> 19:39.750
之前我请求的是

19:39.750 --> 19:40.750
儿子忘了

19:40.750 --> 19:44.580
3w.知乎.com

19:44.580 --> 19:49.400
3w.知乎.com

19:49.400 --> 19:51.400
路径它会自动保持不变

19:51.400 --> 19:52.400
你请求的什么路径

19:52.400 --> 19:54.400
它就会给你转发什么路径

19:54.400 --> 19:55.400
好了

19:55.400 --> 19:56.400
咱们来看一下吧

19:56.400 --> 19:57.400
接下来

19:57.400 --> 20:00.400
到这边来刷新

20:01.400 --> 20:02.400
哎呀

20:02.400 --> 20:03.400
这个问题

20:03.400 --> 20:04.400
这里的重新启动

20:04.400 --> 20:05.400
还不着急

20:05.400 --> 20:06.400
哎呀

20:06.400 --> 20:07.400
有可能有问题

20:07.400 --> 20:08.400
有可能没问题

20:08.400 --> 20:09.400
因为知乎那边

20:09.400 --> 20:11.400
它可能为了限制

20:11.400 --> 20:13.400
其他地方来去请求

20:13.400 --> 20:18.400
什么情况

20:18.400 --> 20:20.400
它的配置出错了是吧

20:20.400 --> 20:24.860
还有target

20:24.860 --> 20:26.860
它要让我这样的配置

20:26.860 --> 20:27.860
它要让我这样的配置

20:27.860 --> 20:28.860
行吧

20:28.860 --> 20:29.860
target

20:29.860 --> 20:36.570
它要让我这样子写

20:37.570 --> 20:38.570
好了

20:38.570 --> 20:40.940
再启动

20:40.940 --> 20:41.940
然后报错的时候

20:41.940 --> 20:42.940
你不着急

20:42.940 --> 20:43.940
你看一下错误

20:43.940 --> 20:48.110
它怎么说的

20:48.110 --> 20:49.110
现在我们点击

20:49.110 --> 20:50.110
有点检查

20:50.110 --> 20:51.110
看知乎有没有给我数据

20:51.110 --> 20:52.110
求求你给我吧

20:52.110 --> 20:53.110
它不给我

20:53.110 --> 20:55.110
authorization required

20:55.110 --> 20:57.110
它要让我

20:57.110 --> 20:58.110
哎呀

20:58.110 --> 20:59.110
这个东西

20:59.110 --> 21:00.110
但是实际上是

21:00.110 --> 21:01.110
请求到知乎了

21:01.110 --> 21:02.110
知乎那边

21:02.110 --> 21:03.110
也给我响应了

21:03.110 --> 21:04.110
只不过是一个错误的响应

21:04.110 --> 21:05.110
因为我这边

21:05.110 --> 21:06.110
知乎那边

21:06.110 --> 21:07.110
它有限制

21:07.110 --> 21:08.110
它有各种各样的限制

21:08.110 --> 21:10.110
我们请求另外一个接口吧

21:10.110 --> 21:11.110
请求另外一个接口

21:11.110 --> 21:12.110
看一下这个接口

21:12.110 --> 21:17.410
请求这个接口

21:17.410 --> 21:19.410
看这个接口行不行

21:19.410 --> 21:26.200
好

21:26.200 --> 21:27.200
报存

21:29.200 --> 21:30.200
有限制

21:33.730 --> 21:35.730
这个接口不是有限制的问题

21:35.730 --> 21:37.730
这个接口是

21:37.730 --> 21:39.730
是这边

21:39.730 --> 21:40.730
这边配置的时候

21:40.730 --> 21:41.730
它不是也API开头的

21:41.730 --> 21:42.730
你看

21:42.730 --> 21:43.730
它不是也API开头的

21:43.730 --> 21:45.730
那我们再加一个吧

21:45.730 --> 21:47.730
主要是给大家看一下

21:47.730 --> 21:48.730
这个其实没啥

21:48.730 --> 21:50.730
以后我们都会改成正常的

21:51.730 --> 21:53.730
要重新启动一下

21:53.730 --> 21:54.730
因为改了配置问题

21:54.730 --> 21:56.730
你得重新启动服务器

21:57.730 --> 21:59.730
这个微拍是一样的

21:59.730 --> 22:01.730
改了配置你得重新启动

22:02.730 --> 22:03.730
好 双心

22:03.730 --> 22:04.730
哎 这个拿到了

22:04.730 --> 22:05.730
你看

22:05.730 --> 22:06.730
就拿到数据了

22:06.730 --> 22:08.730
Data就是知乎返回给我的数据

22:08.730 --> 22:09.730
不管这个数据是啥

22:09.730 --> 22:10.730
不重要

22:10.730 --> 22:11.730
是不是可以拿到数据了

22:11.730 --> 22:12.730
那么现在的情况

22:12.730 --> 22:13.730
是怎么回事呢

22:13.730 --> 22:14.730
现在的情况是这样子

22:14.730 --> 22:15.730
我们来看一下

22:15.730 --> 22:17.730
顺一下整个流程

22:17.730 --> 22:19.730
我们浏览气去请求了啥

22:19.730 --> 22:21.730
我们浏览气去请求了这个地址

22:21.730 --> 22:25.420
是不是请求了它

22:26.420 --> 22:27.420
浏览气

22:29.420 --> 22:30.420
请求的是它

22:31.420 --> 22:32.420
请求的是它

22:32.420 --> 22:33.420
那么请求到哪了

22:33.420 --> 22:35.420
是不是请求到开发服务器了

22:36.420 --> 22:37.420
8081

22:37.420 --> 22:39.420
那么这里肯定没有跨域

22:39.420 --> 22:40.420
它自己的页面

22:40.420 --> 22:41.420
请求自己的服务器

22:41.420 --> 22:42.420
没有跨域

22:42.420 --> 22:44.420
开发服务器它匹配规则

22:44.420 --> 22:45.420
匹配到什么呢

22:45.420 --> 22:46.420
它发现它是以

22:46.420 --> 22:47.420
这个路径是以这个开头的

22:47.420 --> 22:49.420
你看路径是以这个开头的

22:49.420 --> 22:54.270
于是它就把我们这个

22:54.270 --> 22:55.270
请求转发到哪了

22:55.270 --> 22:57.270
转发到这个支付的服务器了

22:58.270 --> 23:00.270
开发服务器去请求

23:00.270 --> 23:02.650
请求谁

23:02.650 --> 23:03.650
请求这个

23:03.650 --> 23:05.650
然后路径保持不变

23:06.650 --> 23:07.650
然后支付服务器

23:07.650 --> 23:08.650
是不是给我们的数据了

23:08.650 --> 23:09.650
然后开发服务器

23:09.650 --> 23:10.650
再把数据给浏览起

23:10.650 --> 23:11.650
整个过程就是这样子

23:13.650 --> 23:14.650
拿到数据了

23:15.650 --> 23:16.650
那么这个数据

23:16.650 --> 23:17.650
看上去

23:17.650 --> 23:18.650
看上去就是

23:18.650 --> 23:20.650
就是这个x小时

23:20.650 --> 23:21.650
就是这个x小时

23:21.650 --> 23:22.650
给我们的响应结果

23:22.650 --> 23:23.650
这个响应结果里边有消息头

23:23.650 --> 23:24.650
有消息体

23:24.650 --> 23:25.650
消息体是什么呢

23:25.650 --> 23:26.650
就是delta

23:26.650 --> 23:28.650
这个delta就是消息体

23:28.650 --> 23:29.650
你看

23:29.650 --> 23:30.650
delta就是这个

23:32.650 --> 23:37.580
这次怎么变空了

23:37.580 --> 23:38.580
它又不给我了

23:38.580 --> 23:40.580
总之它能拿到这个数据

23:40.580 --> 23:41.580
delta也不给我了

23:42.580 --> 23:43.580
拿到这个数据

23:43.580 --> 23:45.580
这就是支付给我们的响应的数据

23:45.580 --> 23:46.580
没意思吧

23:46.580 --> 23:47.580
这就是x小时

23:48.580 --> 23:49.580
那么这里边还有很多地方

23:49.580 --> 23:50.580
可以稍微改进

23:50.580 --> 23:52.580
比方说因为我们请求的

23:52.580 --> 23:53.580
现在我们在

23:53.580 --> 23:55.580
在我们的代码里边

23:55.580 --> 23:56.580
请求这样的路径

23:57.580 --> 23:58.580
是不是可以省略的

23:59.580 --> 24:00.580
为什么可以省略

24:00.580 --> 24:01.580
因为我们知道

24:01.580 --> 24:03.580
在当省略协议的话

24:03.580 --> 24:05.580
它就使用当前网站的协议

24:05.580 --> 24:07.580
当前网站是什么协议

24:07.580 --> 24:08.580
AKP它就使用AKP

24:09.580 --> 24:11.580
省略这个主机名和端口号的话

24:11.580 --> 24:12.580
那么就是相当于是

24:12.580 --> 24:13.580
使用当前网站的

24:13.580 --> 24:15.580
主机名和端口号

24:15.580 --> 24:16.580
所以这样子更好一点

24:16.580 --> 24:17.580
因为端口号

24:17.580 --> 24:18.580
如果说当年

24:18.580 --> 24:19.580
开发服务器开多了

24:19.580 --> 24:20.580
比方说这里变成8082了

24:20.580 --> 24:21.580
或者是8080

24:22.580 --> 24:23.580
那么这里的

24:23.580 --> 24:24.580
就相当于是

24:24.580 --> 24:25.580
80808081

24:25.580 --> 24:27.580
跟当前的网页保持一致

24:27.580 --> 24:28.580
反正都是不跨域的

24:28.580 --> 24:30.580
都是当前的服务器

24:30.580 --> 24:31.580
所以我们可以省略

24:32.580 --> 24:33.580
那么代码省略过后

24:33.580 --> 24:34.580
以后要部署的时候

24:34.580 --> 24:35.580
要不要改呢

24:37.580 --> 24:38.580
你觉得要不要改

24:39.580 --> 24:40.580
不需要改

24:41.580 --> 24:43.580
你写死了才需要改

24:43.580 --> 24:44.580
你写

24:44.580 --> 24:45.580
如果说你这样子写的话

24:45.580 --> 24:46.580
将来

24:47.580 --> 24:48.580
将来到生产环境里边

24:48.580 --> 24:49.580
你看一下要不要改

24:49.580 --> 24:50.580
生产环境的服务器

24:50.580 --> 24:51.580
变成这个地址了

24:52.580 --> 24:53.580
那你的阿迦克斯请求你

24:53.580 --> 24:54.580
还不能再请求这个了吧

24:55.580 --> 24:56.580
对不对

24:56.580 --> 24:57.580
你得改成这个地址吧

24:57.580 --> 24:58.580
所以得改

24:59.580 --> 25:01.580
如果说你这样子写要改吗

25:01.580 --> 25:03.580
反而不会需要改了

25:03.580 --> 25:04.580
因为到时候你请求

25:04.580 --> 25:05.580
这个地址拿到页面

25:05.580 --> 25:07.580
页面过后里边的GS

25:07.580 --> 25:09.580
它使用了这个地址

25:09.580 --> 25:10.580
那么它就会自动的

25:10.580 --> 25:12.580
使用当前页面的

25:12.580 --> 25:15.580
协议服务器主经理端口号

25:16.580 --> 25:17.580
反而不需要改了

25:18.580 --> 25:19.580
明白你的意思吗

25:19.580 --> 25:20.580
当然如果说

25:20.580 --> 25:21.580
是这种场景的话

25:22.580 --> 25:23.580
那就要改

25:23.580 --> 25:24.580
那就必须要加上

25:24.580 --> 25:25.580
必须要感动

25:27.580 --> 25:28.580
OK那么这是这一块

25:30.580 --> 25:31.580
没问题吧

25:31.580 --> 25:32.580
听到这没问题吧

25:32.580 --> 25:33.580
好去梳理一下

25:33.580 --> 25:35.580
怎么去解决开发服务器

25:35.580 --> 25:36.580
跨越的问题

25:37.580 --> 25:39.580
问题解决了吗

25:39.580 --> 25:40.580
好像是解决了

25:40.580 --> 25:42.580
但是问题还没完

25:43.580 --> 25:44.580
因为我们目前是

25:44.580 --> 25:45.580
咱们去请求直呼了

25:45.580 --> 25:47.580
肯定不能不行对吧

25:47.580 --> 25:48.580
我们在请求怎么

25:48.580 --> 25:50.580
真耳巴紧的去请求

25:50.580 --> 25:52.580
我们的后端测试服务器

25:52.580 --> 25:54.580
后端测试服务器

25:54.580 --> 25:55.580
有没有呢

25:55.580 --> 25:57.580
假设它有吧

25:57.580 --> 25:58.580
一般是这样子

25:58.580 --> 26:00.580
你们在公司里面开发前端的时候

26:00.580 --> 26:02.580
开发前端的网站的时候

26:02.580 --> 26:04.580
有可能有后端服务器

26:05.580 --> 26:07.580
肯定早晚肯定会有的

26:07.580 --> 26:09.580
当你开发的那个时间点

26:09.580 --> 26:10.580
它可能有

26:10.580 --> 26:11.580
已经做好了

26:11.580 --> 26:12.580
别人后端早就开发完了

26:12.580 --> 26:13.580
就等你前端入职

26:13.580 --> 26:15.580
赶快来开发前端的东西

26:15.580 --> 26:16.580
有可能是这种情况

26:16.580 --> 26:17.580
那么你就

26:17.580 --> 26:19.580
按照它给你提供的接口文档

26:19.580 --> 26:21.580
接口文档我这里有

26:22.580 --> 26:23.580
在课件里边

26:23.580 --> 26:25.580
个人空间前他一面接口文档

26:26.580 --> 26:27.580
那么这里呢

26:27.580 --> 26:29.580
会描述服务器给你返回什么

26:29.580 --> 26:30.580
你请求什么样的地址

26:30.580 --> 26:31.580
比方说全聚设置

26:31.580 --> 26:32.580
博客文章

26:32.580 --> 26:33.580
你请求这样的地址

26:33.580 --> 26:35.580
他就会给他请求

26:35.580 --> 26:37.580
他就会给你响应是一个什么东西

26:37.580 --> 26:38.580
明白的意思吧

26:40.580 --> 26:43.580
如果说你们将来在公司里边

26:43.580 --> 26:45.580
接手做开发的时候

26:45.580 --> 26:48.580
已经有我后端测试服务器了

26:48.580 --> 26:50.580
而且服务器已经写完了

26:50.580 --> 26:51.580
那OK

26:51.580 --> 26:53.580
那就像刚才那样子做

26:53.580 --> 26:54.580
没问题

26:54.580 --> 26:55.580
没问题

26:55.580 --> 26:56.580
比方说你现在就请求

26:56.580 --> 26:58.580
我们现在把态数变一下

26:58.580 --> 27:00.580
变成博客

27:00.580 --> 27:02.580
变成首页标语

27:02.580 --> 27:05.580
首页标语就是那几张图

27:05.580 --> 27:06.580
就这个东西

27:06.580 --> 27:07.580
首页

27:07.580 --> 27:09.580
就这个地方的数据

27:09.580 --> 27:11.580
有些文字

27:11.580 --> 27:12.580
都是从服务器拿的

27:12.580 --> 27:14.580
还有图片都是从服务器拿的

27:15.580 --> 27:16.580
他有可能是安藏

27:16.580 --> 27:17.580
有可能是四张说不准

27:17.580 --> 27:18.580
因为从服务器拿过来的

27:18.580 --> 27:20.580
那么这里我们就改一下

27:20.580 --> 27:22.580
改成首页标语

27:22.580 --> 27:25.340
Baner

27:25.340 --> 27:26.340
Gate

27:26.340 --> 27:27.340
Baners

27:27.340 --> 27:29.340
我们这里导出

27:30.340 --> 27:31.340
Export

27:31.340 --> 27:32.340
这里没有用Default

27:32.340 --> 27:33.340
因为我们将来

27:33.340 --> 27:35.340
每个Gate里面

27:35.340 --> 27:37.340
可能要用到很多服务器数据

27:37.340 --> 27:39.340
可能每个货取出服务器的数据

27:39.340 --> 27:40.340
都是一个函数

27:40.340 --> 27:42.340
所以我这里用这种规范

27:42.340 --> 27:43.340
来导出

27:43.340 --> 27:45.340
GateBaners

27:45.340 --> 27:47.340
然后这里用Export去寢求什么呢

27:47.340 --> 27:49.340
那么我们就要查阅Gate文档了

27:49.340 --> 27:50.340
标语

27:50.340 --> 27:51.340
首页标语

27:51.340 --> 27:52.340
这个Gate文档是一定有的

27:52.340 --> 27:53.340
你要做前段开发

27:53.340 --> 27:55.340
这个Gate文档一定是会给你的

27:55.340 --> 27:56.340
哪怕没有文档

27:56.340 --> 27:57.340
还可以说的

27:57.340 --> 27:59.340
用口数都可以说清楚

27:59.340 --> 28:00.340
哪怕不口数

28:00.340 --> 28:01.340
你跟那个后段开发人员

28:01.340 --> 28:03.340
沟通都要沟通清楚

28:03.340 --> 28:04.340
因为后段开发人员

28:04.340 --> 28:06.340
他会按照这个文档来进行开发

28:06.340 --> 28:07.340
前段开发人员

28:07.340 --> 28:09.340
要按照这个文档来进行寢求

28:09.340 --> 28:11.340
这个文档是一定要有的

28:11.340 --> 28:12.340
我这个文档已经写好了

28:12.340 --> 28:14.340
那他告诉你寢求这个地址

28:15.340 --> 28:17.340
ok 那你就去寢求这个地址

28:17.340 --> 28:18.340
那你寢求到哪去了

28:18.340 --> 28:19.340
是不是寢求

28:19.340 --> 28:20.340
还是寢求了当前服务器

28:20.340 --> 28:22.340
让当前服务器去转发

28:22.340 --> 28:23.340
转发要寢求

28:23.340 --> 28:24.340
那么这里

28:24.340 --> 28:26.340
concelogue.respa

28:26.340 --> 28:27.340
data

28:27.340 --> 28:28.340
就这样子输出

28:28.340 --> 28:29.340
测试一下吧

28:29.340 --> 28:31.340
GateBaners测试一下

28:31.340 --> 28:33.340
在媒体解释里边

28:33.340 --> 28:34.340
ok 这里改过来了

28:34.340 --> 28:35.340
只能改过来了

28:36.340 --> 28:37.340
好 寢求这个地址

28:37.340 --> 28:38.340
现在你就不能发到

28:38.340 --> 28:39.340
直户里边去了

28:39.340 --> 28:41.340
你肯定不能发到直户里边去了

28:41.340 --> 28:43.340
反而是以API开头的

28:43.340 --> 28:44.340
因为我们整个接客文档里边

28:44.340 --> 28:46.340
所有的寢求都是

28:46.340 --> 28:47.340
以API寫上API开头的

28:47.340 --> 28:49.340
所以说反而是以API开头的

28:49.340 --> 28:51.340
那么我们要转发到哪

28:51.340 --> 28:53.340
转发到开发服务器

28:53.340 --> 28:54.340
adp 比方说

28:54.340 --> 28:55.340
他告诉你

28:55.340 --> 28:57.340
你们在开发前端的网站的时候

28:57.340 --> 28:58.340
他告诉你

28:58.340 --> 28:59.340
你这个网站

28:59.340 --> 29:01.340
我们现在开发服务器已经

29:01.340 --> 29:03.340
测试的服务器已经给你打好了

29:03.340 --> 29:04.340
到时候寢求数据

29:04.340 --> 29:05.340
就寢求那个服务器

29:05.340 --> 29:07.340
比方说 举个例子

29:07.340 --> 29:09.340
假设了开发服务器的地址是

29:09.340 --> 29:12.340
test

29:13.340 --> 29:16.340
my site

29:16.340 --> 29:18.340
假设啊 调抗

29:18.340 --> 29:21.340
你转发到开发服务器里边去

29:21.340 --> 29:22.340
懂了意思吗

29:22.340 --> 29:23.340
那么你就配置好了

29:23.340 --> 29:25.340
那么如果说正常情况下

29:25.340 --> 29:26.340
你就已经能够拿到数据了

29:26.340 --> 29:28.340
我们这里重新启动一下

29:29.340 --> 29:30.340
正常情况

29:30.340 --> 29:31.340
只要开发服务器有

29:31.340 --> 29:32.340
你就能够拿到数据了

29:33.340 --> 29:36.230
放心

29:36.230 --> 29:40.340
那么这里爆出了

29:40.340 --> 29:41.340
爆出了

29:41.340 --> 29:42.340
它自然是没有拿到数据

29:42.340 --> 29:43.340
没有拿到数据

29:43.340 --> 29:44.340
它找不到

29:44.340 --> 29:46.340
没有这样的开发服

29:46.340 --> 29:48.340
没有这样的服务器

29:48.340 --> 29:50.340
这个服务器好像还真存在

29:50.340 --> 29:51.340
还真存在

29:52.340 --> 29:53.340
它给我返回了500

29:53.340 --> 29:54.340
说明这个服务器还是真存在的

29:54.340 --> 29:56.340
至少要寢求

29:56.340 --> 29:57.340
还真存在

29:58.340 --> 29:59.340
那么我们

29:59.340 --> 30:00.340
换一个吧

30:00.340 --> 30:01.340
换一个

30:02.340 --> 30:03.340
换一个不存在的吧

30:03.340 --> 30:04.340
无所谓吧

30:04.340 --> 30:05.340
反正就是

30:05.340 --> 30:06.340
如果说有的话

30:06.340 --> 30:07.340
你就能正常拿到数据了

30:07.340 --> 30:08.340
但是呢

30:08.340 --> 30:09.340
现在的问题是

30:09.340 --> 30:10.340
如果没有呢

30:10.340 --> 30:12.340
没有就不开发

30:12.340 --> 30:13.340
等它有了

30:13.340 --> 30:14.340
过后再开发

30:14.340 --> 30:15.340
那你想这个道理

30:16.340 --> 30:17.340
我们现在要做一个项目

30:17.340 --> 30:18.340
立项了

30:18.340 --> 30:21.340
比方说我们现在做个人广站

30:21.340 --> 30:23.340
这个项目确定下来了

30:24.340 --> 30:25.340
如果说你

30:26.340 --> 30:27.340
不动

30:27.340 --> 30:28.340
前段开发者不动

30:28.340 --> 30:29.340
只让后段开发者

30:29.340 --> 30:30.340
那前段开发者

30:30.340 --> 30:31.340
这段时间干嘛

30:32.340 --> 30:33.340
看电影

30:33.340 --> 30:34.340
刷抖音

30:34.340 --> 30:35.340
玩

30:35.340 --> 30:36.340
玩个一个月

30:36.340 --> 30:37.340
等后段开发者

30:37.340 --> 30:38.340
后面那边开发完了过后

30:38.340 --> 30:39.340
你在这边开始动

30:39.340 --> 30:40.340
这样是不是

30:40.340 --> 30:41.340
特别浪费时间啊

30:42.340 --> 30:43.340
所以说呢

30:43.340 --> 30:44.340
在真实的情况下

30:44.340 --> 30:45.340
在这里边

30:45.340 --> 30:47.340
项目一定确定过后了

30:47.340 --> 30:48.340
会先出这个接口文档

30:49.340 --> 30:50.340
除了这个接口文档

30:50.340 --> 30:51.340
后段开发者就按照

30:51.340 --> 30:52.340
接口文档的开发

30:52.340 --> 30:53.340
前段开发者

30:53.340 --> 30:55.340
也要按照接口文档的开发

30:55.340 --> 30:56.340
是同时进行的

30:56.340 --> 30:57.340
那问题就来了

30:58.340 --> 30:59.340
你现在要去请求数据

30:59.340 --> 31:00.340
但是呢

31:00.340 --> 31:02.340
后段都还没有开发完

31:02.340 --> 31:03.340
根本就没法给你数据

31:03.340 --> 31:04.340
对吧

31:04.340 --> 31:05.340
后段的测试服务器

31:05.340 --> 31:06.340
只能说

31:06.340 --> 31:07.340
它准备将来的

31:07.340 --> 31:08.340
会用这个测试服务器

31:08.340 --> 31:09.340
但是呢

31:09.340 --> 31:10.340
现在根本就没出来

31:11.340 --> 31:12.340
或者是出来了部分接口

31:12.340 --> 31:13.340
那这个东西怎么办呢

31:15.710 --> 31:16.710
这东西呢

31:16.710 --> 31:17.710
现在来看

31:17.710 --> 31:21.110
下面这张图啊

31:21.110 --> 31:22.110
就需要模拟数据了

31:23.110 --> 31:25.110
模拟数据就起这个作用

31:25.110 --> 31:26.110
当后段的服务器呢

31:26.110 --> 31:27.110
还没有打好

31:27.110 --> 31:28.110
或者是有些接口

31:28.110 --> 31:29.110
有缺失的时候

31:29.110 --> 31:30.110
那么就需要模拟

31:30.110 --> 31:31.110
模拟数据

31:31.110 --> 31:32.110
怎么模拟数据呢

31:32.110 --> 31:34.110
其实就是利用默可接式

31:34.110 --> 31:36.110
你看我们现在的问题是

31:36.110 --> 31:37.110
开发服务器给我们页面

31:37.110 --> 31:38.110
然后阿里克斯请求

31:38.110 --> 31:39.110
他要进行代理

31:39.110 --> 31:40.110
他会代理

31:40.110 --> 31:41.110
带到我们的

31:41.110 --> 31:42.110
后段测试服务器

31:42.110 --> 31:43.110
结果呢

31:43.110 --> 31:44.110
根本没有

31:44.110 --> 31:45.110
是临士

31:45.110 --> 31:46.110
啥都没有

31:46.110 --> 31:47.110
正在开发中

31:47.110 --> 31:49.110
就这个接口还没开发完

31:49.110 --> 31:50.110
那么都有可能会出现

31:50.110 --> 31:51.110
对吧

31:51.110 --> 31:52.110
那么这边就打到是临士

31:52.110 --> 31:54.110
或者是刚才看到有个500

31:55.110 --> 31:56.110
所以说我们要模拟

31:56.110 --> 31:57.110
怎么模拟呢

31:57.110 --> 31:58.110
就要加重默可接式了

31:58.110 --> 31:59.110
默可接式

31:59.110 --> 32:00.110
实际上就是运行在浏览器的

32:00.110 --> 32:01.110
我这个图

32:01.110 --> 32:02.110
可能不是人号

32:02.110 --> 32:03.110
表现这一点

32:03.110 --> 32:04.110
实际上这一块

32:04.110 --> 32:05.110
都是在浏览器里面

32:05.110 --> 32:06.110
都是在浏览器里面

32:06.110 --> 32:07.110
没有人

32:07.110 --> 32:08.110
就这一块

32:08.110 --> 32:09.110
我们现在框住这一块

32:09.110 --> 32:10.110
根本就没有服务器

32:10.110 --> 32:11.110
都是在浏览器里面运行的

32:11.110 --> 32:12.110
默可接式

32:12.110 --> 32:13.110
也是在浏览器里面运行的

32:13.110 --> 32:14.110
对吧

32:14.110 --> 32:15.110
首先让默可接式

32:15.110 --> 32:16.110
定义拦接规则

32:16.110 --> 32:17.110
你们学过了对吧

32:17.110 --> 32:18.110
然后那浏览器

32:18.110 --> 32:19.110
去从开发服务器

32:19.110 --> 32:20.110
拿页面

32:20.110 --> 32:21.110
然后页面过后

32:21.110 --> 32:22.110
要拿一个字请求

32:22.110 --> 32:23.110
想要去请求开发服务器

32:23.110 --> 32:24.110
结果了

32:24.110 --> 32:25.110
默可接式一看

32:25.110 --> 32:26.110
规则满足

32:26.110 --> 32:27.110
这个接口

32:27.110 --> 32:29.110
现在开发服务器给不了我们

32:29.110 --> 32:30.110
对吧

32:30.110 --> 32:31.110
因为后来测试服务器都没有

32:31.110 --> 32:32.110
给不了我们

32:32.110 --> 32:33.110
你不要去访问开发服务器了

32:33.110 --> 32:35.110
直接在这里就给你拦接了

32:35.110 --> 32:37.110
连开发服务器都没有到

32:37.110 --> 32:39.110
在浏览器内部就给你拦接了

32:39.110 --> 32:40.110
然后给你一个

32:40.110 --> 32:41.110
模拟的接成数据

32:41.110 --> 32:43.110
我们要形成这么一种结构

32:44.110 --> 32:46.110
那么怎么来做呢

32:47.110 --> 32:49.110
当然首先得安装默可接式

32:49.110 --> 32:52.190
默可接式

32:59.560 --> 33:01.560
然后在src里面

33:01.560 --> 33:02.560
我们新建个文件夹

33:02.560 --> 33:03.560
专门写个默可

33:04.560 --> 33:06.560
专门的模拟数据

33:06.560 --> 33:09.560
这里边我们新建一个叫做

33:10.560 --> 33:11.560
我们模拟一些

33:11.560 --> 33:12.560
模拟什么呢

33:12.560 --> 33:14.560
模拟bander吧

33:14.560 --> 33:15.560
这个bander数据不是没有吗

33:15.560 --> 33:16.560
那么模拟一下

33:17.560 --> 33:19.560
新建一个bander

33:19.560 --> 33:20.560
叫做接式

33:21.560 --> 33:22.560
我们在这里不模拟

33:22.560 --> 33:23.560
那怎么来模拟呢

33:23.560 --> 33:24.560
那就一定要去参与

33:24.560 --> 33:26.560
默可接式的文档

33:26.560 --> 33:30.980
看一下文档

33:32.980 --> 33:33.980
为什么我看文档

33:33.980 --> 33:34.980
因为我忘了

33:35.980 --> 33:36.980
导入默可

33:36.980 --> 33:37.980
想起来了

33:37.980 --> 33:39.980
我看到一个代码提示了

33:39.980 --> 33:40.980
默可

33:42.980 --> 33:44.980
然后默可里面有一个

33:44.980 --> 33:45.980
默可方法

33:46.980 --> 33:47.980
里面第一个参数

33:47.980 --> 33:49.980
就是写一个拦截的规则

33:50.980 --> 33:51.980
当你请求的地址

33:51.980 --> 33:53.980
是这样的地址的时候

33:53.980 --> 33:54.980
比方说请求bander

33:54.980 --> 33:56.980
请求这样的地址的时候

33:56.980 --> 33:57.980
我给你

33:57.980 --> 33:59.980
请求的方法是get

34:00.980 --> 34:01.980
通过get的方法来

34:01.980 --> 34:02.980
请求这个地址的时候

34:02.980 --> 34:04.980
我给你一个模拟数据

34:04.980 --> 34:05.980
我给你一个模拟

34:06.980 --> 34:07.980
什么模拟数据呢

34:09.980 --> 34:11.980
那么这个模拟数据的格式

34:11.980 --> 34:12.980
就必须要

34:12.980 --> 34:13.980
数据可以是假的

34:13.980 --> 34:14.980
但是格式就必须要跟那个

34:14.980 --> 34:16.980
接口文档里面的格式

34:16.980 --> 34:17.980
一模一样

34:17.980 --> 34:18.980
你要按照接口文档来

34:18.980 --> 34:20.980
接口文档我们写的

34:20.980 --> 34:21.980
首先一个概述

34:21.980 --> 34:22.980
概述要去看一下

34:22.980 --> 34:27.830
接口文档的格式是这样子

34:27.830 --> 34:29.830
所有的响应结果都是这样子

34:29.830 --> 34:30.830
有三个属相

34:30.830 --> 34:32.830
一个对象有三个属相扣的

34:32.830 --> 34:33.830
表示错误吗

34:33.830 --> 34:34.830
错误吗为点

34:34.830 --> 34:35.830
表示没有错误

34:35.830 --> 34:37.830
如果说为406表示验证失败

34:37.830 --> 34:38.830
这不是

34:38.830 --> 34:39.830
这不是HDP响应吗

34:39.830 --> 34:40.830
不是响应吗

34:41.830 --> 34:42.830
是错误吗

34:42.830 --> 34:44.830
就是一个对象的一个属相

34:44.830 --> 34:46.830
都是一个标准的服务器格式

34:46.830 --> 34:47.830
但是不一定

34:47.830 --> 34:48.830
每一个服务器

34:48.830 --> 34:50.830
有些服务器给的是Message

34:50.830 --> 34:52.830
有些服务器给的是NR

34:52.830 --> 34:54.830
说不准的

34:54.830 --> 34:55.830
我这边规定了

34:55.830 --> 34:56.830
接口文档规定了

34:56.830 --> 34:57.830
我这个服务器

34:57.830 --> 34:58.830
将来

34:58.830 --> 34:59.830
现在没有吗

34:59.830 --> 35:00.830
在将来如果说开发好了

35:00.830 --> 35:01.830
它也是这种格式

35:01.830 --> 35:02.830
它会给你这样子响应

35:02.830 --> 35:03.830
响应一个对象

35:03.830 --> 35:04.830
这个对象

35:04.830 --> 35:06.830
当然是个节省格式的对象

35:06.830 --> 35:07.830
有三个属相

35:07.830 --> 35:08.830
一个是扣的

35:08.830 --> 35:09.830
表示错误吗

35:09.830 --> 35:11.830
如果说没有错误就是0

35:11.830 --> 35:12.830
Message表示错误消息

35:12.830 --> 35:13.830
没有错误

35:13.830 --> 35:14.830
就是一个空置不算

35:14.830 --> 35:17.340
懂这个意思吗

35:17.340 --> 35:18.340
等下就是业务数据

35:18.340 --> 35:20.340
比方说你请求的是Banner

35:20.340 --> 35:21.340
那么他就给了一个数组

35:21.340 --> 35:22.340
给一个数组

35:22.340 --> 35:25.340
有哪些标语都会给你

35:25.340 --> 35:26.340
这是业务数据

35:26.340 --> 35:28.340
如果说有错误的话

35:28.340 --> 35:30.340
那么这个数据一定是那

35:30.340 --> 35:31.340
能理解吗

35:31.340 --> 35:33.340
我再举个例子

35:33.340 --> 35:35.340
因为因为第一次

35:35.340 --> 35:36.340
接触一个接口文档

35:36.340 --> 35:37.340
可能都看不懂

35:37.340 --> 35:39.340
举个例子

35:39.340 --> 35:42.340
比方说你去

35:42.340 --> 35:44.340
你去用Pose的请求

35:44.340 --> 35:45.340
比方说举个例子

35:45.340 --> 35:47.340
比方说登录

35:47.340 --> 35:48.340
登录的时候

35:48.340 --> 35:50.340
比方说你这样子请求过来

35:50.340 --> 35:51.340
请求过去

35:51.340 --> 35:53.340
或者是注册吧

35:53.340 --> 35:55.340
Pose请求注册

35:55.340 --> 35:56.340
请求这个地址

35:56.340 --> 35:59.340
API Rig注册

35:59.340 --> 36:00.340
那里的消息体里面

36:00.340 --> 36:01.340
不得传一些数据吗

36:01.340 --> 36:02.340
比方说Malcon ID

36:02.340 --> 36:03.340
什么数据

36:03.340 --> 36:06.340
用节省格式传到服务器

36:06.340 --> 36:08.340
服务器给你想应

36:08.340 --> 36:10.340
服务器给你响应

36:10.340 --> 36:13.290
响应的是什么呢

36:13.290 --> 36:16.290
响应的就是一个结果

36:16.290 --> 36:18.290
一个对象

36:18.290 --> 36:19.290
扣的

36:19.290 --> 36:21.290
扣的这个东西不是

36:21.290 --> 36:22.290
那个响应吧

36:22.290 --> 36:23.290
我再说一下

36:23.290 --> 36:24.290
不是那个响应吧

36:24.290 --> 36:25.290
响应吧固定为两半

36:25.290 --> 36:26.290
你可以这样理解

36:26.290 --> 36:27.290
响应吧无论有没有错

36:27.290 --> 36:28.290
它都是两半

36:28.290 --> 36:29.290
除非服务器处理不了了

36:29.290 --> 36:30.290
可能有其他错误

36:30.290 --> 36:31.290
比方说你访问的东西

36:31.290 --> 36:32.290
根本就不存在

36:32.290 --> 36:33.290
那就是失灵式

36:33.290 --> 36:34.290
那就根本就没有响应题了

36:34.290 --> 36:35.290
我这个说是

36:35.290 --> 36:36.290
就正常响应过后

36:36.290 --> 36:37.290
还有个响应题

36:37.290 --> 36:38.290
响应题里边

36:38.290 --> 36:39.290
它有这么三个属性

36:39.290 --> 36:41.290
扣等的表示错误吧

36:41.290 --> 36:43.290
比方说0

36:43.290 --> 36:44.290
没事起来

36:44.290 --> 36:45.290
表示错误消息

36:45.290 --> 36:46.290
没有消息

36:46.290 --> 36:48.290
这一趟表示的是

36:48.290 --> 36:49.290
业务数据

36:49.290 --> 36:50.290
比方说你注册成功了

36:50.290 --> 36:51.290
有什么业务数据呢

36:51.290 --> 36:52.290
那自然一个用户对象

36:52.290 --> 36:53.290
用户对象有ID

36:53.290 --> 36:54.290
对吧

36:54.290 --> 36:56.290
有零字

36:56.290 --> 36:57.290
对不对

36:57.290 --> 36:59.290
有什么注册时间

36:59.290 --> 37:00.290
对吧

37:00.290 --> 37:02.290
有什么有罗品ID

37:02.290 --> 37:03.290
账号

37:03.290 --> 37:04.290
对不对

37:04.290 --> 37:05.290
这就是业务数据

37:05.290 --> 37:06.290
注册成功了

37:06.290 --> 37:07.290
那如果说注册失败

37:07.290 --> 37:08.290
比方说你账号已存在

37:08.290 --> 37:09.290
那可能它可能的结构

37:09.290 --> 37:10.290
就是这样子

37:10.290 --> 37:11.290
可能的结构

37:11.290 --> 37:14.290
这个响应的还是两半

37:14.290 --> 37:16.290
响应的是两半

37:16.290 --> 37:17.290
OK

37:17.290 --> 37:18.290
然后呢

37:18.290 --> 37:21.290
这扣的可能就变成了406

37:21.290 --> 37:22.290
那么没事起来

37:22.290 --> 37:23.290
就变成了

37:23.290 --> 37:25.290
账号已存在

37:25.290 --> 37:28.790
懂得意思吧

37:28.790 --> 37:29.790
就是服务器

37:29.790 --> 37:30.790
无论是什么

37:30.790 --> 37:31.790
请求什么样的结构

37:31.790 --> 37:33.790
它始终给你防护这样的格式

37:33.790 --> 37:35.790
但是你不要学死了

37:35.790 --> 37:36.790
不是所有的服务器

37:36.790 --> 37:37.790
都是这样做的

37:37.790 --> 37:38.790
到时候具体

37:38.790 --> 37:39.790
你们以后公司

37:39.790 --> 37:40.790
代表是什么情况

37:40.790 --> 37:41.790
阅读公司的

37:41.790 --> 37:42.790
结构文档

37:42.790 --> 37:43.790
它会给你说明

37:43.790 --> 37:44.790
服务器给你

37:44.790 --> 37:45.790
这样的格式

37:45.790 --> 37:47.790
那么我们在模拟数据的时候

37:47.790 --> 37:48.790
就必须要模拟这样的格式

37:48.790 --> 37:50.790
比方说这里的模拟扣的为您

37:50.790 --> 37:52.790
没有错误

37:52.790 --> 37:53.790
没事起来

37:53.790 --> 37:54.790
当然也没有错误

37:54.790 --> 37:55.790
那么数据是什么呢

37:55.790 --> 37:57.790
数据就是一个数组

37:57.790 --> 37:59.790
模拟数据

37:59.790 --> 38:00.790
是一个数组

38:00.790 --> 38:01.790
这个数组

38:01.790 --> 38:03.790
我就随便给它写个吧

38:03.790 --> 38:05.790
我看一下

38:05.790 --> 38:06.790
我们这里获取标语

38:06.790 --> 38:08.790
获取标语响应的格式

38:08.790 --> 38:10.790
那么这里就把这个势力

38:10.790 --> 38:11.790
这个文档里面势力

38:11.790 --> 38:12.790
一个拿过来吧

38:12.790 --> 38:14.790
这是模拟数据

38:14.790 --> 38:17.790
你看是不是就写好了

38:17.790 --> 38:20.790
这是模拟的数据

38:20.790 --> 38:21.790
好接下来

38:21.790 --> 38:22.790
我们在Made.js里面

38:22.790 --> 38:24.790
要使用这个mock

38:24.790 --> 38:26.790
那怎么来使用呢

38:26.790 --> 38:30.230
就可以用这种方式

38:30.230 --> 38:31.230
就在这吧

38:31.230 --> 38:32.230
倒入mock

38:32.230 --> 38:36.760
就是把代码运行一遍

38:36.760 --> 38:37.760
运行一遍就完了

38:37.760 --> 38:39.760
干了这个mock运行一遍

38:39.760 --> 38:40.760
那么你可以想象

38:40.760 --> 38:41.760
将来这个mock文件

38:41.760 --> 38:42.760
假如是不是会

38:42.760 --> 38:44.760
模拟很多数据

38:44.760 --> 38:46.760
又会产生很多的文件

38:46.760 --> 38:48.760
那为了没写一个文件

38:48.760 --> 38:49.760
我们都要倒入一次

38:49.760 --> 38:50.760
运行一遍

38:50.760 --> 38:51.760
运行就是定义规则吧

38:51.760 --> 38:53.760
一开始要定义规则

38:53.760 --> 38:58.480
你看这个图

38:58.480 --> 39:00.480
是不是一开始要定义拦截规则

39:00.480 --> 39:01.480
在所有事情之前

39:01.480 --> 39:03.480
就要定义拦截规则

39:03.480 --> 39:05.480
那如果说将来这个文件多了

39:05.480 --> 39:06.480
那我这里是不是要倒入很多

39:06.480 --> 39:07.480
那么这个也可以用一个

39:07.480 --> 39:09.480
非常非常好用的技巧

39:09.480 --> 39:10.480
就是在mock.js里面

39:10.480 --> 39:12.480
写一个index的解释

39:12.480 --> 39:13.480
这个解释里面

39:13.480 --> 39:15.480
专门来倒入mock数据

39:15.480 --> 39:16.480
啥都没有

39:16.480 --> 39:17.480
其他没有什么东西了

39:17.480 --> 39:18.480
就把它倒入一遍

39:18.480 --> 39:19.480
将来如果说有别的

39:19.480 --> 39:20.480
什么模拟数据

39:20.480 --> 39:22.480
比方说有什么blog

39:22.480 --> 39:23.480
blog的模拟数据

39:23.480 --> 39:27.480
那么index再去倒入一个blog

39:27.480 --> 39:28.480
懂了意思吗

39:28.480 --> 39:29.480
然后每点些

39:29.480 --> 39:32.480
只需要去倒入这个mock就行了

39:32.480 --> 39:34.480
没问题吧

39:34.480 --> 39:35.480
那么这样子

39:35.480 --> 39:36.480
是不是把模拟规则

39:36.480 --> 39:37.480
就定义下来了

39:37.480 --> 39:38.480
在这句话

39:38.480 --> 39:39.480
这句话相当于是

39:39.480 --> 39:40.480
运行了一遍这些代码

39:40.480 --> 39:41.480
运行了一遍

39:41.480 --> 39:43.480
是不是模拟规则就定义下来了

39:43.480 --> 39:44.480
定义下来过后

39:44.480 --> 39:45.480
将来再去寻求

39:45.480 --> 39:46.480
定义的时候

39:46.480 --> 39:47.480
是不得到的是模拟数据

39:47.480 --> 39:49.480
就这么简单

39:49.480 --> 39:50.480
看一下吧

39:50.480 --> 39:52.480
npm装

39:52.480 --> 40:02.660
好

40:02.660 --> 40:03.660
小心

40:03.660 --> 40:04.660
这里有问题

40:04.660 --> 40:06.660
我这里

40:06.660 --> 40:07.660
API

40:07.660 --> 40:08.660
以API开头的

40:08.660 --> 40:11.660
要去寻求这样的地址

40:11.660 --> 40:13.660
它怎么还是跑去

40:13.660 --> 40:17.550
寻求这样的地址了

40:17.550 --> 40:18.550
它怎么还是跑去

40:18.550 --> 40:19.550
寻求这样的地址了

40:19.550 --> 40:21.550
我不是难解了吗

40:21.550 --> 40:22.550
我看一下

40:22.550 --> 40:28.390
mock

40:28.390 --> 40:29.390
寻求API

40:29.390 --> 40:30.390
我看一下

40:30.390 --> 40:31.390
寻求应该是发出去了

40:31.390 --> 40:32.390
真正把你发出去了

40:32.390 --> 40:33.390
你说寻求发不出去了

40:33.390 --> 40:35.390
要被这个地方拦截

40:35.390 --> 40:37.390
我这个是大小写的问题

40:37.390 --> 40:38.390
难道是

40:38.390 --> 40:40.390
还真是大小写的问题

40:40.390 --> 40:41.390
好吧

40:41.390 --> 40:43.390
那么拿到一个拦截的数据

40:43.390 --> 40:45.390
有没有真实的网络寻求

40:45.390 --> 40:46.390
你看一下

40:46.390 --> 40:47.390
有没有真实的网络寻求

40:47.390 --> 40:48.390
这个东西不是

40:48.390 --> 40:49.390
这东西不是

40:49.390 --> 40:50.390
这是一个调试的环境

40:50.390 --> 40:51.390
给自己加的

40:51.390 --> 40:52.390
不用管它

40:52.390 --> 40:53.390
那是不是没有

40:53.390 --> 40:54.390
大家不是寻求

40:54.390 --> 40:55.390
也就是说

40:55.390 --> 40:56.390
浏览器根本就没有发出寻求

40:56.390 --> 40:57.390
它在这里就给它拦截了

40:57.390 --> 40:58.390
在浏览器内部

40:58.390 --> 40:59.390
运行的摩托街市

40:59.390 --> 41:00.390
就给它拦截了

41:01.390 --> 41:02.390
摩托街市的原理

41:02.390 --> 41:03.390
你们应该都知道

41:03.390 --> 41:04.390
无非就是

41:04.390 --> 41:05.390
改通了什么

41:05.390 --> 41:06.390
改通了xml

41:06.390 --> 41:07.390
adb

41:07.390 --> 41:09.390
把东西重新复制了

41:10.390 --> 41:11.390
那么摩托街市

41:11.390 --> 41:13.390
还可以去定义一些

41:13.390 --> 41:14.390
模拟一些真实情况

41:14.390 --> 41:15.390
比方说

41:15.390 --> 41:17.390
网络传说有延迟

41:17.390 --> 41:18.390
我们可以给它定义一个

41:18.390 --> 41:19.390
通用的延迟

41:19.390 --> 41:21.390
我看一下摩托街市里面

41:21.390 --> 41:22.390
通过什么定义的呢

41:24.830 --> 41:25.830
setup好像是

41:25.830 --> 41:26.830
好像是这个

41:27.830 --> 41:28.830
timeout

41:28.830 --> 41:29.830
ok

41:29.830 --> 41:30.830
我们给它

41:30.830 --> 41:31.830
定义一下

41:31.830 --> 41:32.830
在音这个时候

41:32.830 --> 41:33.830
统一定义一下

41:33.830 --> 41:41.690
导入摩托街市

41:41.690 --> 41:44.690
摩托街市

41:44.690 --> 41:45.690
摩托街市

41:45.690 --> 41:46.690
摩托街市里面

41:46.690 --> 41:47.690
我们给它设置一个延迟

41:47.690 --> 41:48.690
延迟的话

41:49.690 --> 41:50.690
一千

41:50.690 --> 41:51.690
延迟大一点

41:51.690 --> 41:52.690
当然两千毫秒

41:54.690 --> 41:55.690
网络延迟讲

41:55.690 --> 41:56.690
模拟一个一千到两千毫秒

41:56.690 --> 41:57.690
也就是说

41:57.690 --> 41:58.690
我们的数据

41:58.690 --> 41:59.690
要一千到两千毫秒

41:59.690 --> 42:00.690
才能返回给我们

42:03.000 --> 42:04.000
是不是要等一下

42:05.000 --> 42:06.000
要模拟这个异部吗

42:07.000 --> 42:08.000
好

42:08.000 --> 42:09.000
这个地方是不是做完了

42:10.000 --> 42:11.000
不着急

42:11.000 --> 42:12.000
我们慢慢来

42:12.000 --> 42:13.000
一点都把它做好

42:14.000 --> 42:15.000
那么现在呢

42:15.000 --> 42:16.000
我们就可以假设的是

42:16.000 --> 42:17.000
真实数据了

42:17.000 --> 42:18.000
因为将来如果说

42:18.000 --> 42:19.000
将来有一天

42:19.000 --> 42:21.000
后边的后端开发者告诉你

42:21.000 --> 42:22.000
兄弟

42:22.000 --> 42:23.000
你这个

42:23.000 --> 42:24.000
不用模拟了

42:24.000 --> 42:25.000
我那边已经

42:25.000 --> 42:26.000
已经搞定了

42:26.000 --> 42:27.000
你直接从开发服务器

42:27.000 --> 42:28.000
直接从那个

42:28.000 --> 42:29.000
真实的服务器去

42:29.000 --> 42:31.000
就是这个测试服务器去拿

42:31.000 --> 42:32.000
那怎么办

42:32.000 --> 42:33.000
你做事情只有一件事情

42:33.000 --> 42:34.000
到这个摩托爹

42:34.000 --> 42:35.000
应这个设计里面

42:35.000 --> 42:36.000
把这些发出事的

42:37.000 --> 42:39.000
所以对他就没有模拟了

42:39.000 --> 42:40.000
整体他这个数据

42:40.000 --> 42:41.000
已经有了

42:41.000 --> 42:42.000
那么到时候再去寻求他的时候

42:42.000 --> 42:43.000
是不是经过这

42:43.000 --> 42:44.000
再去寻求这儿了

42:44.000 --> 42:45.000
对不对

42:45.000 --> 42:46.000
一把出事就完了

42:46.000 --> 42:47.000
保存你看

42:47.000 --> 42:48.000
出事就访问到真实服务器了

42:48.000 --> 42:49.000
不过这个真实服务器

42:49.000 --> 42:50.000
现在实际上是没有的

42:51.000 --> 42:52.000
就这么简单

42:53.000 --> 42:54.000
我不知道我们简直

42:54.000 --> 42:55.000
清楚没有

42:55.000 --> 42:56.000
我就尽量来给大家解释了

42:56.000 --> 42:57.000
因为这一块

42:57.000 --> 42:58.000
涉及到以前的很多知识

42:58.000 --> 42:59.000
就看你们以前

42:59.000 --> 43:00.000
觉得扎不扎实了

43:02.310 --> 43:03.310
好了

43:03.310 --> 43:04.310
回到这里

43:04.310 --> 43:05.310
我们问题还有问题吗

43:05.310 --> 43:06.310
好像就没啥问题了

43:06.310 --> 43:07.310
拿到数据

43:07.310 --> 43:08.310
后面就是我们循环数据

43:08.310 --> 43:09.310
要去做一些事

43:09.310 --> 43:10.310
具体怎么去做

43:10.310 --> 43:11.310
我们以后再说

43:12.310 --> 43:13.310
但是还是有些

43:13.310 --> 43:14.310
不实很舒服的地方

43:15.310 --> 43:16.310
为啥不是很舒服

43:16.310 --> 43:17.310
你看

43:17.310 --> 43:18.310
我们这个APN里面

43:18.310 --> 43:19.310
回到这里

43:19.310 --> 43:21.310
在这里你就不要去管

43:21.310 --> 43:22.310
他是真实的还是假的

43:22.310 --> 43:23.310
你就当他是真实的

43:25.310 --> 43:26.310
因为无论是

43:27.310 --> 43:28.310
假的数据格式

43:28.310 --> 43:29.310
还是跟真实的数据

43:29.310 --> 43:30.310
格式都是一样的

43:30.310 --> 43:31.310
只是说内容不一样

43:31.310 --> 43:32.310
对不对

43:32.310 --> 43:33.310
拿这个数据过后

43:33.310 --> 43:34.310
我们是不是

43:34.310 --> 43:35.310
每次都要从这里面

43:35.310 --> 43:36.310
去拿消息体

43:36.310 --> 43:37.310
你看

43:37.310 --> 43:38.310
我们现在是有这么一个逻辑

43:41.330 --> 43:42.330
扣的

43:42.330 --> 43:44.330
为零的时候

43:45.330 --> 43:47.330
扣的为零的时候干嘛呢

43:47.330 --> 43:48.330
会从

43:51.020 --> 43:54.020
data中获取业务数据

43:55.020 --> 43:57.020
或许我们的数据

43:57.020 --> 43:58.020
业务数据

43:58.020 --> 43:59.020
那有可能注册的话

43:59.020 --> 44:00.020
就可能是个对象

44:00.020 --> 44:01.020
博客的文章的话

44:01.020 --> 44:02.020
就可能是一个文章的数据

44:02.020 --> 44:03.020
总之它会从data中

44:03.020 --> 44:04.020
获取业务数据

44:05.020 --> 44:07.020
如果说扣的不为零

44:07.020 --> 44:08.020
不为零

44:08.020 --> 44:09.020
你觉得要干嘛

44:10.020 --> 44:11.020
是不是有错误

44:11.020 --> 44:12.020
有错误是不是在页面上

44:12.020 --> 44:13.020
得提示啊

44:13.020 --> 44:14.020
对不对

44:14.020 --> 44:17.020
它就会将message

44:18.020 --> 44:19.020
提示

44:19.020 --> 44:21.020
显示到页面上

44:21.020 --> 44:22.020
怎么显示呢

44:22.020 --> 44:23.020
就可以利用我们

44:23.020 --> 44:24.020
上节课学的东西

44:24.020 --> 44:25.020
凶message

44:25.020 --> 44:26.020
而显示到页面上

44:26.020 --> 44:27.020
你想一想

44:27.020 --> 44:28.020
我们将来会有很多的接口

44:28.020 --> 44:29.020
你看这里的接口

44:29.020 --> 44:30.020
我们的接口文章

44:30.020 --> 44:31.020
里面这么多接口

44:31.020 --> 44:32.020
博客 留言板

44:32.020 --> 44:34.020
这都有各种各样的接口

44:35.020 --> 44:37.020
这个逻辑是不是通用的

44:38.020 --> 44:40.020
你觉得是不是通用的

44:40.020 --> 44:42.020
得是通用的吧

44:42.020 --> 44:44.020
得通用吧

44:44.020 --> 44:45.020
那么如果说

44:45.020 --> 44:46.020
你每一次

44:46.020 --> 44:47.020
你不把它抽离出去的话

44:47.020 --> 44:49.020
每一次你请求完了过

44:49.020 --> 44:50.020
其实这个函数

44:50.020 --> 44:51.020
你都要进行判断

44:51.020 --> 44:53.020
如果说这个resp

44:53.020 --> 44:54.020
data

44:54.020 --> 44:55.020
就是我们的响应题

44:55.020 --> 44:56.020
响应题里面

44:56.020 --> 44:58.020
扣的为零

44:58.020 --> 44:59.020
扣的为零

44:59.020 --> 45:01.020
然后就要处理业务数据

45:01.020 --> 45:03.020
那么就把这个数据返回

45:03.020 --> 45:04.020
比方说

45:04.020 --> 45:05.020
把这个数据

45:05.020 --> 45:06.020
delta返回

45:06.020 --> 45:07.020
这是响应题

45:07.020 --> 45:08.020
搞清楚

45:08.020 --> 45:09.020
这个里面有响应头

45:09.020 --> 45:10.020
有响应题

45:10.020 --> 45:11.020
这是响应题

45:11.020 --> 45:12.020
响应题是个对象

45:12.020 --> 45:13.020
对象里面有个delta属性

45:13.020 --> 45:15.020
里面放的是业务数据

45:15.020 --> 45:16.020
返回

45:16.020 --> 45:17.020
如果说它扣的不为零的话

45:17.020 --> 45:18.020
那么我们这里是不知道

45:18.020 --> 45:19.020
修message

45:20.020 --> 45:21.020
导这个message

45:21.020 --> 45:22.020
要显示错误消息

45:22.020 --> 45:23.020
你看一下

45:23.020 --> 45:24.020
我们这里写一下

45:24.020 --> 45:25.020
就写一下吧

45:26.020 --> 45:27.020
显示什么消息呢

45:27.020 --> 45:29.020
resp.data.message

45:30.020 --> 45:32.020
对

45:32.020 --> 45:33.020
没问题

45:33.020 --> 45:35.530
好

45:35.530 --> 45:36.530
你看一下

45:36.530 --> 45:37.530
正常情况下

45:37.530 --> 45:38.530
我们就

45:40.530 --> 45:42.530
没有问题的话

45:42.530 --> 45:44.530
那么我们就可以拿到这个数据了

45:44.530 --> 45:48.860
输出R

45:48.860 --> 45:49.860
拿到这个数据了

45:50.860 --> 45:51.860
如果有问题的话

45:51.860 --> 45:52.860
我们返回更大

45:53.860 --> 45:54.860
有问题的话

45:54.860 --> 45:58.460
就达不到数据

45:58.460 --> 46:00.460
然后它会自动显示消息

46:00.460 --> 46:01.460
看一下

46:01.460 --> 46:02.460
先看一下没问题的情况下

46:02.460 --> 46:04.460
没问题是不是可以显示出来

46:04.460 --> 46:05.460
对吧得到这个data

46:05.460 --> 46:07.460
这个反应还算返回的

46:07.460 --> 46:08.460
有问题的

46:08.460 --> 46:10.460
我们模拟一个有问题的情况

46:10.460 --> 46:12.460
比方说这里模拟一个一板

46:12.460 --> 46:13.460
406吧

46:15.460 --> 46:17.460
我也不知道发生了

46:18.460 --> 46:21.460
发生了什么错误

46:21.460 --> 46:22.460
好 那把这边

46:22.460 --> 46:24.460
我就要显示消息了

46:24.460 --> 46:27.860
你看一下

46:27.860 --> 46:28.860
嗯 消息了

46:28.860 --> 46:33.580
消息为什么没显示出来了

46:33.580 --> 46:34.580
API

46:35.580 --> 46:36.580
修message

46:36.580 --> 46:37.580
这是

46:37.580 --> 46:39.580
我们输出一下

46:40.580 --> 46:41.580
data

46:41.580 --> 46:43.580
输出一下message

46:43.580 --> 46:46.890
拿到这个消息了

46:46.890 --> 46:48.890
没有显示出

46:48.890 --> 46:50.890
哦 这边是个对象

46:50.890 --> 46:51.890
忘了

46:51.890 --> 46:52.890
我忘了

46:52.890 --> 46:53.890
是个对象

46:54.890 --> 46:55.890
消息内容

46:55.890 --> 46:56.890
是这个

46:56.890 --> 46:57.890
消息内容写一下

46:57.890 --> 46:58.890
别说了

47:00.890 --> 47:01.890
第二类型的

47:01.890 --> 47:02.890
就这样写吧

47:02.890 --> 47:07.160
还是没有显示出来

47:09.160 --> 47:10.160
我看一下

47:10.160 --> 47:11.160
上几颗多的东西

47:13.860 --> 47:14.860
一面

47:15.860 --> 47:16.860
夹住了

47:20.700 --> 47:22.700
夹到一面里边去了

47:22.700 --> 47:24.700
它为什么没显示出来

47:24.700 --> 47:25.700
我把时间设长一点

47:25.700 --> 47:26.700
第二类型

47:26.700 --> 47:27.700
设置

47:28.700 --> 47:29.700
设长一点

47:29.700 --> 47:30.700
看下这个DIV

47:30.700 --> 47:32.700
为什么没显示出来

47:32.700 --> 47:33.700
这个DIV

47:34.700 --> 47:38.400
跑上边去了

47:38.400 --> 47:39.400
perition

47:39.400 --> 47:42.290
absolute

47:42.290 --> 47:44.290
opacity 1

47:45.290 --> 47:47.290
怎么跑到上边去了呢

47:47.290 --> 47:48.290
这个DIV

47:49.290 --> 47:51.290
net 50%

47:51.290 --> 47:52.290
top 50%

47:53.290 --> 47:54.290
transnet

47:55.290 --> 47:56.290
transform

47:56.290 --> 48:01.200
看一下哪里出了问题

48:02.200 --> 48:04.200
背景颜色也有

48:05.200 --> 48:07.200
位置跑到上边去了

48:15.500 --> 48:17.500
对呀 它释放了body里边了

48:17.500 --> 48:19.500
body的高度为0

48:20.500 --> 48:21.500
明白了

48:21.500 --> 48:22.500
它以body

48:22.500 --> 48:24.500
它以body为这个的话

48:25.500 --> 48:27.500
它以body为副元素的话

48:27.500 --> 48:28.500
它就变成这个样子了

48:29.500 --> 48:30.500
明白了

48:31.500 --> 48:33.500
它以body为副元素的话

48:33.500 --> 48:34.500
它就变成这个样子了

48:34.500 --> 48:36.500
所以说如果说它是以body

48:36.500 --> 48:37.500
比如说它没有

48:37.500 --> 48:39.500
之前那个代码也好像有点问题

48:40.500 --> 48:42.500
之前UTO的一个代码

48:42.500 --> 48:43.500
有点问题

48:46.940 --> 48:47.940
container

48:51.940 --> 48:53.940
如果说它没有container的话

48:53.940 --> 48:54.940
我还要单独处理一下

48:58.730 --> 49:00.730
我不应该把

49:00.730 --> 49:02.730
就在这里出的问题

49:02.730 --> 49:07.960
如果说options

49:07.960 --> 49:08.960
container

49:09.960 --> 49:11.960
它没有传递container

49:12.960 --> 49:13.960
但是呢

49:13.960 --> 49:14.960
就是我们

49:15.960 --> 49:16.960
我看一下

49:16.960 --> 49:18.960
它是传递的container

49:18.960 --> 49:19.960
它传递的container

49:19.960 --> 49:21.960
我们才把副元素设为redditive

49:21.960 --> 49:22.960
也就是说我们要做的事情

49:22.960 --> 49:24.960
就不要让body也设置为一个redditive

49:24.960 --> 49:25.960
明白了

49:25.960 --> 49:26.960
我就要做这件事情

49:27.960 --> 49:29.960
我们要做的事情

49:29.960 --> 49:30.960
明白了

49:30.960 --> 49:31.960
我就要做这件事情

49:31.960 --> 49:32.960
它没有传递container的话

49:32.960 --> 49:33.960
它的副元素是body

49:33.960 --> 49:35.960
那么不能让body设为redditive

49:35.960 --> 49:37.960
不然它会相对于body定位去了

49:37.960 --> 49:38.960
那么这样子

49:38.960 --> 49:39.960
它往上找

49:39.960 --> 49:40.960
我副元素

49:40.960 --> 49:41.960
body不是redditive

49:41.960 --> 49:42.960
然后呢

49:42.960 --> 49:43.960
atmail也不是redditive

49:43.960 --> 49:44.960
它就相当于是这个伺口了

49:44.960 --> 49:45.960
就整个网页了

49:47.960 --> 49:48.960
OK了

49:48.960 --> 49:49.960
那就没问题了

49:49.960 --> 49:50.960
看没

49:50.960 --> 49:54.230
把这个去掉

49:56.230 --> 49:57.230
好 现在再回来

49:58.230 --> 49:59.230
你看

49:59.230 --> 50:04.660
好 这就是我们想要的

50:05.660 --> 50:06.660
但是呢

50:06.660 --> 50:07.660
这个逻辑是通用的呀

50:07.660 --> 50:08.660
你不能说

50:08.660 --> 50:10.660
每一次去写这个接口的时候

50:10.660 --> 50:11.660
都来一次判断

50:11.660 --> 50:12.660
是不是很麻烦

50:12.660 --> 50:13.660
所以说呢

50:13.660 --> 50:14.660
我们这里呢

50:14.660 --> 50:15.660
我要说的就是这个点

50:15.660 --> 50:16.660
我希望把这个通用的逻辑

50:16.660 --> 50:17.660
抽离出去

50:17.660 --> 50:18.660
以后你这个接口

50:18.660 --> 50:20.660
只管获取正常的数据

50:20.660 --> 50:21.660
就是扣到为0的情况

50:21.660 --> 50:22.660
扣到不为0的情况

50:22.660 --> 50:23.660
我这动作会帮你处理

50:23.660 --> 50:24.660
就不用管

50:24.660 --> 50:26.660
那么这种东西怎么办呢

50:26.660 --> 50:28.660
我们一个小时

50:28.660 --> 50:30.660
里边是可以有这个功能的

50:30.660 --> 50:32.660
你看一个小时怎么来弄这个功能

50:32.660 --> 50:33.660
一个小时

50:33.660 --> 50:34.660
可以创建一个

50:34.660 --> 50:35.660
是实力

50:35.660 --> 50:36.660
x小时

50:36.660 --> 50:37.660
它里边一个create

50:37.660 --> 50:39.660
创建一个x小时的实力

50:39.660 --> 50:40.660
这个实力呢

50:40.660 --> 50:43.660
拿到instance

50:44.660 --> 50:45.660
这句话是

50:45.660 --> 50:48.660
创建一个x小时的实力

50:48.660 --> 50:50.660
这个实力里边可以有些配置

50:50.660 --> 50:51.660
这些配置呢

50:51.660 --> 50:52.660
我们目前都不需要什么配置

50:52.660 --> 50:53.660
有些配置呢

50:53.660 --> 50:54.660
那么这个实力里边

50:54.660 --> 50:55.660
就通用的

50:55.660 --> 50:56.660
通用这些配置的

50:56.660 --> 50:57.660
好 那么这个实力里边

50:57.660 --> 50:58.660
除了配置之外呢

50:58.660 --> 50:59.660
还可以做一些事情

50:59.660 --> 51:01.660
就叫做拦解

51:01.660 --> 51:03.660
叫interceptors

51:03.660 --> 51:05.660
拦解可以拦解请求

51:05.660 --> 51:07.660
也可以拦解想用

51:07.660 --> 51:08.660
拦解请求我们不需要了

51:08.660 --> 51:09.660
目可已经拦解了

51:09.660 --> 51:11.660
不需要你去做任何事情

51:11.660 --> 51:13.660
我们主要是拦解想用

51:13.660 --> 51:18.380
拦解想用的时候呢

51:18.380 --> 51:19.380
response

51:19.380 --> 51:26.750
看一下文档

51:26.750 --> 51:27.750
这个

51:27.750 --> 51:29.750
这是接口文档

51:29.750 --> 51:31.750
这边

51:31.750 --> 51:32.750
excess

51:32.750 --> 51:36.470
把这个讲完了

51:36.470 --> 51:38.470
给大家一起来过一下

51:38.470 --> 51:43.850
拦解interceptors

51:44.850 --> 51:45.850
哦

51:47.850 --> 51:48.850
API经常网

51:48.850 --> 51:49.850
use

51:49.850 --> 51:50.850
这个函数

51:50.850 --> 51:51.850
这个函数里边

51:51.850 --> 51:52.850
要传一个参数

51:52.850 --> 51:53.850
也是个函数

51:54.850 --> 51:55.850
看一下这边

51:55.850 --> 51:56.850
要传一个参数

51:56.850 --> 51:57.850
分析

51:57.850 --> 51:58.850
OK

51:58.850 --> 51:59.850
分析

51:59.850 --> 52:00.850
对

52:00.850 --> 52:03.800
啥意思

52:03.800 --> 52:04.800
解释一下

52:04.800 --> 52:06.800
创建一个x小时的实力

52:06.800 --> 52:07.800
这个实力呢

52:07.800 --> 52:08.800
它的功能跟x小时

52:08.800 --> 52:09.800
一模一样

52:09.800 --> 52:10.800
也说后边

52:10.800 --> 52:12.800
你完全可以用这个实力来做

52:12.800 --> 52:14.800
用实力来发出请求

52:14.800 --> 52:15.800
一模一样的

52:15.800 --> 52:16.800
功能是完全一样的

52:16.800 --> 52:18.800
你看这个实力里边

52:18.800 --> 52:19.800
get请求

52:19.800 --> 52:20.800
post请求

52:20.800 --> 52:22.800
用法完全一样

52:22.800 --> 52:23.800
只不过呢

52:23.800 --> 52:24.800
你用这个实力来做的时候

52:24.800 --> 52:25.800
由于这个实力

52:25.800 --> 52:27.800
加了一个拦解器

52:27.800 --> 52:29.800
这拦解器传了一个函数进去

52:29.800 --> 52:31.800
于是呢

52:31.800 --> 52:33.800
凡是你用这个实力

52:33.800 --> 52:34.800
得到的响应

52:34.800 --> 52:36.800
它会先运行这个函数

52:36.800 --> 52:39.800
然后把这个函数的运行结果

52:39.800 --> 52:41.800
把这个函数的运行结果呢

52:41.800 --> 52:42.800
再

52:42.800 --> 52:44.800
返回给你

52:44.800 --> 52:45.800
没了意思吧

52:45.800 --> 52:46.800
它会先运行这个函数

52:46.800 --> 52:47.800
比方说我们这里运行了

52:47.800 --> 52:48.800
拦解器

52:48.800 --> 52:49.800
拦解器运行了过后

52:49.800 --> 52:50.800
啥都不做

52:50.800 --> 52:51.800
我把这个race

52:51.800 --> 52:52.800
返回

52:52.800 --> 52:53.800
还是把它返回

52:53.800 --> 52:54.800
来

52:54.800 --> 52:55.800
我们来看一下吧

52:55.800 --> 52:59.900
小心

53:00.900 --> 53:01.900
你看是不是有一个拦解器

53:01.900 --> 53:03.900
是不是有一个函数运行了

53:03.900 --> 53:05.900
而且你将来就用这个东西

53:05.900 --> 53:06.900
来控制

53:06.900 --> 53:07.900
来去请求

53:07.900 --> 53:08.900
那么这样子呢

53:08.900 --> 53:10.900
就每一次都会运行这个拦解器了

53:10.900 --> 53:11.900
好 为了方便呢

53:11.900 --> 53:12.900
我把这个东西

53:12.900 --> 53:14.900
封装到一个单独的一个文件里面

53:15.900 --> 53:17.900
这些都是常见做法

53:17.900 --> 53:18.900
你第一次做的觉得

53:18.900 --> 53:19.900
绕了一点

53:19.900 --> 53:20.900
将来做得多了

53:20.900 --> 53:22.900
你会发现每一个网站

53:22.900 --> 53:23.900
做一个5u开发号也好

53:23.900 --> 53:24.900
race开发也好

53:24.900 --> 53:26.900
基本上都是这么处理的逻辑

53:26.900 --> 53:27.900
request

53:27.900 --> 53:28.900
我们这里封装一下

53:28.900 --> 53:30.900
我们把这个这个复制过来

53:30.900 --> 53:34.920
好 那么这边最后呢

53:34.920 --> 53:35.920
我们导出这个拦解器

53:35.920 --> 53:37.920
导出这个实力

53:37.920 --> 53:38.920
那么也就是说

53:38.920 --> 53:39.920
其他地方了

53:39.920 --> 53:40.920
班纳城这些地方

53:40.920 --> 53:41.920
导入的就不是x小时了

53:41.920 --> 53:43.920
导入的是什么request

53:43.920 --> 53:46.420
你可以用request

53:46.420 --> 53:47.420
再接受一下

53:47.420 --> 53:49.420
那么后边都是通过他

53:49.420 --> 53:50.420
去发送请求

53:51.420 --> 53:52.420
明白了意思吧

53:52.420 --> 53:54.420
都是通过他来发送请求

53:54.420 --> 53:58.590
我们这里直接返回了

54:00.590 --> 54:01.590
来 我们来看一下

54:02.590 --> 54:04.590
后边写的函数就非常简单了

54:05.590 --> 54:07.590
通过他发送请求

54:07.590 --> 54:08.590
因为他的请求结果

54:08.590 --> 54:10.590
会被他所拦解

54:10.590 --> 54:11.590
拦解过后呢

54:11.590 --> 54:12.590
他会运行这个函数

54:12.590 --> 54:13.590
然后他会把

54:13.590 --> 54:14.590
远方部落络返回给你

54:15.590 --> 54:16.590
然后这边就拿到这个结果

54:16.590 --> 54:17.590
目前呢

54:17.590 --> 54:18.590
就这样子

54:18.590 --> 54:19.590
你看 运行的拦解器

54:19.590 --> 54:20.590
然后结果了

54:20.590 --> 54:22.590
还是远方部落络返回给你

54:22.590 --> 54:23.590
那如果说我返回的结果

54:23.590 --> 54:24.590
是这样子的呢

54:25.590 --> 54:26.590
request.data

54:26.590 --> 54:27.590
你看一下

54:29.590 --> 54:30.590
保存

54:30.590 --> 54:31.590
刷新

54:31.590 --> 54:34.030
他是不是就直接

54:34.030 --> 54:35.030
把data拿到了

54:36.030 --> 54:37.030
对不对 是不是

54:37.030 --> 54:38.030
直接把data拿到了

54:38.030 --> 54:39.030
没问题吧

54:40.030 --> 54:41.030
好 如果说我返回的是

54:41.030 --> 54:42.030
data.data呢

54:45.500 --> 54:46.500
所以拿到这个了

54:46.500 --> 54:47.500
这才是我们

54:47.500 --> 54:49.500
最需要的核心的数据

54:49.500 --> 54:50.500
对不对 是不是

54:50.500 --> 54:51.500
我们最需要的核心数据

54:52.500 --> 54:53.500
因为我们要不要

54:53.500 --> 54:54.500
那些code

54:54.500 --> 54:55.500
没事给我们的

54:55.500 --> 54:56.500
正常处理没什么关系

54:56.500 --> 54:57.500
我们要的业务数据

54:57.500 --> 54:58.500
就这个东西

54:58.500 --> 54:59.500
但是呢

54:59.500 --> 55:00.500
我们在要这个业务数据之前

55:00.500 --> 55:02.500
有可能这个业务数据没有

55:02.500 --> 55:03.500
还可能要爆错

55:03.500 --> 55:04.500
不要说他有code

55:04.500 --> 55:05.500
不一定要爆错

55:05.500 --> 55:06.500
是不是可以在这里做了

55:07.500 --> 55:08.500
判断一下

55:08.500 --> 55:10.500
如果说resp.code

55:10.500 --> 55:11.500
等于什么

55:11.500 --> 55:12.500
等于0

55:12.500 --> 55:13.500
不等于0

55:15.500 --> 55:16.500
是不是有错误

55:17.500 --> 55:18.500
有错误的话

55:18.500 --> 55:19.500
我要显示错误

55:20.500 --> 55:21.500
就data

55:22.500 --> 55:23.500
code不一定

55:23.500 --> 55:24.500
显示错误

55:24.500 --> 55:25.500
修message

55:26.500 --> 55:29.500
消息内容resp.data的message

55:30.500 --> 55:31.500
内想

55:34.500 --> 55:36.500
duration稍微设置一个短点

55:36.500 --> 55:37.500
1500毫秒

55:39.500 --> 55:40.500
保存 你看

55:40.500 --> 55:41.500
刷新

55:44.500 --> 55:45.500
没问题吧

55:45.500 --> 55:46.500
那么这里我就返回那了

55:46.500 --> 55:47.500
如果说有错误

55:47.500 --> 55:50.580
我就返回那

55:50.580 --> 55:52.580
什么蓝阶器有这个好处

55:52.580 --> 55:53.580
没有错误

55:53.580 --> 55:56.580
如果说把这个mock取消

55:59.270 --> 56:00.270
没有错误

56:00.270 --> 56:01.270
模拟买都是模拟

56:03.270 --> 56:04.270
那么就不会弹出这个错误

56:04.270 --> 56:06.270
就拿到正常的数据了

56:06.270 --> 56:07.270
没什么意思吧

56:07.270 --> 56:09.270
所以说我们这里

56:09.270 --> 56:11.270
我们这里有了这个蓝阶器过后

56:11.270 --> 56:12.270
后面我们写的这个APM

56:12.270 --> 56:13.270
是不是很好写的

56:13.270 --> 56:14.270
就直接请求APM

56:14.270 --> 56:15.270
拿到几个结果就完事了

56:15.270 --> 56:17.270
拿到的直接就是这个业务数据

56:19.270 --> 56:20.270
好好去梳理一下

56:20.270 --> 56:21.270
ok 那么这一课

56:21.270 --> 56:23.270
我们就是要写成这样的代码

56:25.270 --> 56:27.270
根据又没有一毛钱关系

56:27.270 --> 56:29.270
我们这里解决了什么问题

56:29.270 --> 56:30.270
解决了跨越问题

56:30.270 --> 56:32.270
跨越问题只在开发环境中

56:32.270 --> 56:33.270
产生

56:33.270 --> 56:34.270
生产环境有可能会有

56:34.270 --> 56:35.270
但是呢

56:35.270 --> 56:38.270
很多时候都会都会给你解决好

56:38.270 --> 56:39.270
你不用去担心

56:39.270 --> 56:41.270
主要是开发环境里面有跨越问题

56:41.270 --> 56:42.270
那么怎么办的

56:42.270 --> 56:44.270
我们是利用代理来完成的

56:44.270 --> 56:46.270
开发环服务器代理

56:46.270 --> 56:47.270
但是有的时候

56:47.270 --> 56:49.270
连后端测试服务器都没有

56:50.270 --> 56:52.270
后端测试服务器都还没有开发出来

56:52.270 --> 56:54.270
或者是只开发了部分接口

56:54.270 --> 56:55.270
有些接口不能用的

56:55.270 --> 56:57.270
那么你就需要默可数据

56:57.270 --> 56:59.270
有些数据你需要去

56:59.270 --> 57:02.270
在浏览器内部就进行拦截

57:02.270 --> 57:04.270
就不要它发出去请求

57:04.270 --> 57:05.270
你看这个请求

57:05.270 --> 57:07.270
好像看上去是个阿迦克斯请求

57:07.270 --> 57:08.270
实际上根本就没发出去

57:08.270 --> 57:10.270
是默可结业师给你模拟的一个数据

57:11.270 --> 57:12.270
没了意思吧

57:12.270 --> 57:15.270
然后为了让我们后边写这个接口

57:15.270 --> 57:17.270
写这个API接口来写的方便

57:17.270 --> 57:20.270
我们去用X小时来发送

57:20.270 --> 57:22.270
发送那个数据请求

57:23.270 --> 57:24.270
而且我发现的是

57:24.270 --> 57:26.270
由于服务器的消息格式

57:26.270 --> 57:27.270
是比较固定的

57:27.270 --> 57:29.270
有一种固定的消息格式

57:29.270 --> 57:30.270
有错误的

57:30.270 --> 57:31.270
我们可以非常容易发现

57:31.270 --> 57:32.270
它的错误在哪儿

57:33.270 --> 57:35.270
于是我就写了个拦截器

57:35.270 --> 57:36.270
判断一下它有没有错误

57:36.270 --> 57:38.270
如果说不等于你有错误的话

57:38.270 --> 57:39.270
我就显示个错误消息

57:39.270 --> 57:41.270
因为我们的处理也是统一的

57:42.270 --> 57:43.270
这样就避免了

57:43.270 --> 57:45.270
在每一个接口里边去判断有没有错误

57:45.270 --> 57:47.270
我们的接口写起来更加顺畅

57:48.270 --> 57:49.270
好好去梳理一下

57:49.270 --> 57:51.270
这就是我们这一刻的代码

57:51.270 --> 57:52.270
就这么几行代码

57:52.270 --> 57:54.270
但是里边道理很多

57:55.270 --> 57:57.270
这是关于这一些的那种

