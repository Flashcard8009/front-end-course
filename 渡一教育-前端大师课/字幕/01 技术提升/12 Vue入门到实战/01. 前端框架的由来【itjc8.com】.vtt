WEBVTT

00:00.110 --> 00:03.710
好了 同学们 终于进入到伍佑这门课了

00:04.110 --> 00:08.910
当你看到这门课程的时候 说明你的基础已经打得差不多了

00:09.210 --> 00:12.610
接下来你们要学习的就是要面向就业了

00:13.110 --> 00:16.910
也就是说以后你们到了公司里边 真正干活用的是啥呢

00:17.110 --> 00:20.210
肯定不能是原生的GS 也不能是那些

00:21.310 --> 00:23.710
或者是原生GS加上一些第三方库 对吧

00:23.710 --> 00:25.410
那个东西看干活太low了

00:25.710 --> 00:27.910
我们基本上都会使用一些框架

00:27.910 --> 00:30.010
来帮助我们开发一个复杂的系统

00:30.910 --> 00:34.910
那么我们前端框架呢 是我们前端学习的重点

00:35.910 --> 00:39.310
让这几年伍佑应该算要占大头

00:39.910 --> 00:42.110
因为国内市场的话 三大框架

00:42.510 --> 00:44.310
国内市场的话 安格拉

00:45.610 --> 00:47.310
安格拉 还有一个是什么呢

00:47.310 --> 00:49.310
rex 还有一个是伍佑

00:50.110 --> 00:52.310
伍佑的时间点出现了最晚

00:52.710 --> 00:55.710
但是在国内市场占用的份额最大

00:56.310 --> 00:59.310
而且目前伍佑3这个版本已经出来了

00:59.310 --> 01:05.110
所以说将来伍佑3可能会一部分的挤压rex的市场

01:05.310 --> 01:08.310
安格拉就不说了 安格拉的市场份额太小了

01:09.110 --> 01:10.410
所以大概就这么一个情况

01:10.410 --> 01:14.910
因此伍佑在里面的前端学习中应该是重中之中

01:16.210 --> 01:20.610
你们会花费大量的时间和精力在伍佑的学习上面

01:20.810 --> 01:23.610
说学伍佑千万不要着急 着急也没用

01:23.810 --> 01:26.510
因为有这么多知识 我们还要做这么多案例

01:26.910 --> 01:29.210
所以说我们的一步一步来 稳扎稳大

01:29.510 --> 01:30.310
把它学习完

01:31.610 --> 01:36.310
这是一个基本情况 对这门课大家要引起一个重视

01:37.310 --> 01:40.310
那么我们这门课讲解的伍佑版本是啥呢

01:40.310 --> 01:41.610
我先说一下版本问题

01:42.210 --> 01:45.310
伍佑的版本目前已经更新到了伍佑3

01:45.310 --> 01:47.010
伍佑3已经出现了正式版

01:47.510 --> 01:49.510
伍佑3的课程我已经给大家录了

01:50.110 --> 01:52.110
但是伍佑3的课程里边录的是啥

01:52.110 --> 01:55.310
录的是伍佑2跟伍佑3的差异

01:56.010 --> 01:57.710
它到底升级了哪些东西

01:58.610 --> 02:00.910
也就是说你在学习的过程中

02:00.910 --> 02:02.710
你还是必须得学习伍佑2

02:03.310 --> 02:04.510
有同学就有疑问了

02:04.710 --> 02:08.410
那老师你能不能就直接录一个伍佑3的完整版

02:08.410 --> 02:10.810
从头交报尾 我不用学伍佑2了

02:10.810 --> 02:12.210
直接学伍佑3不就完了吗

02:13.010 --> 02:13.910
是这么一个现象

02:14.610 --> 02:18.210
就是一个技术刚刚出现的时候

02:18.210 --> 02:20.410
它还不是很成熟 有很多的坑

02:21.010 --> 02:24.910
那么很多公司只要它不去做事

02:25.410 --> 02:29.210
它应该是不会直接用那个技术来做实际的开发的

02:29.410 --> 02:33.310
可能会做一些小的一些功能可以来练一练

02:33.410 --> 02:35.810
或者是测试一下

02:36.010 --> 02:38.910
但是它不会把它应用到真实的项目里面去

02:39.510 --> 02:43.010
也就是说伍佑3虽然它技术上发布了正式版

02:43.210 --> 02:45.110
但它要真正的落地到

02:45.510 --> 02:47.610
这些公司还需要一段时间

02:48.310 --> 02:50.210
另外它的生态建立

02:50.210 --> 02:52.710
因为我们知道伍佑3是一个全家统

02:52.710 --> 02:53.910
对吧 有各种各样的生态

02:53.910 --> 02:56.510
生态建立也需要花费一定时间

02:56.710 --> 02:58.110
你看现在伍佑绝业统里边

02:58.110 --> 02:59.610
不用好几个东西 对吧

02:59.610 --> 03:00.710
你们都要学习的

03:00.710 --> 03:01.510
像伍佑6

03:01.810 --> 03:03.510
像那个伍佑rotor

03:03.710 --> 03:06.110
这些目前伍佑3它有没有呢

03:06.110 --> 03:07.910
有 但是它不是正式版

03:08.210 --> 03:10.510
所以说一个是有很多坑药材

03:10.710 --> 03:12.910
二个是需要等它生态成熟

03:13.110 --> 03:14.210
还有一个重要原因

03:14.210 --> 03:17.010
就是因为过去的项目还是用伍佑2开发的

03:17.410 --> 03:20.110
那些公司花费大量的精力和成本

03:20.110 --> 03:21.210
就开发了一套系统

03:21.210 --> 03:22.310
结果你告诉我

03:22.510 --> 03:23.610
现在升级到伍佑3

03:23.610 --> 03:25.110
我要把它全部推翻重来

03:25.410 --> 03:26.210
那不疯了吧

03:26.310 --> 03:27.110
有这个必要吗

03:27.110 --> 03:28.410
很多公司没有这个动力

03:28.710 --> 03:30.510
因为它之前的系统用的好好的

03:30.610 --> 03:31.910
虽然说伍佑3更好

03:32.010 --> 03:33.810
但是它毕竟要改造这个系统

03:33.810 --> 03:35.210
需要花费大量的成本

03:35.610 --> 03:36.910
很多公司不愿意改造

03:37.110 --> 03:39.810
因此你们将来在长时间内

03:40.110 --> 03:42.910
都会存在一个伍佑2和伍佑3共存

03:43.710 --> 03:47.210
有时候可能心里边又开始有点火大了

03:47.210 --> 03:47.910
对吧

03:48.110 --> 03:49.310
咱们这个技术

03:49.310 --> 03:50.710
你看现在新版本出来了

03:50.710 --> 03:52.010
还不能直接学习新版本

03:52.010 --> 03:53.310
还要两个版本一起学习

03:53.310 --> 03:54.310
是不是有点辛苦

03:54.710 --> 03:56.710
当然会增加一点学习时间

03:56.710 --> 03:57.810
但是大家不要怕

03:58.510 --> 04:00.610
你看一下咱们课程里边的伍佑3

04:01.310 --> 04:04.010
那个伍佑3一共就那么十几节课

04:04.110 --> 04:05.810
而且每节课的时间也比较短

04:05.810 --> 04:07.610
平均时间有大概在半个小时

04:08.010 --> 04:08.810
40分钟

04:08.910 --> 04:10.710
有的时候20分钟几分钟都有

04:11.010 --> 04:12.010
所以说学习时长

04:12.010 --> 04:13.710
伍佑3的学习时长并不长

04:13.810 --> 04:16.010
你只要把伍佑2好好掌握之后

04:16.510 --> 04:19.110
你再去学伍佑3会非常非常的轻松

04:19.110 --> 04:20.210
相信我绝对是的

04:21.110 --> 04:22.510
而且你学习的时长

04:22.510 --> 04:23.710
大概也就一两天

04:23.910 --> 04:26.310
一天学习三个小时四个小时

04:26.310 --> 04:27.910
大概就一两天的时间就搞定了

04:28.310 --> 04:29.510
学习的速度非常快的

04:29.610 --> 04:30.510
不要担心这个点

04:31.610 --> 04:34.010
因为伍佑3虽然会有大版本的更新

04:34.010 --> 04:37.810
但是大部分特别是思想上的

04:37.910 --> 04:40.310
一旦的还是跟伍佑2差不多的

04:40.910 --> 04:42.110
还有一些更新

04:42.510 --> 04:44.310
我们后边你去学完伍佑2

04:44.310 --> 04:45.810
去学伍佑3你就知道了

04:46.210 --> 04:46.410
好吧

04:46.410 --> 04:48.510
这是给大家说明一下这个版本的问题

04:50.010 --> 04:52.410
然后这门课我们打算怎么来讲呢

04:53.110 --> 04:54.410
这里给大家看一下

04:54.610 --> 04:56.410
我们是有一个完整的

04:57.010 --> 04:58.010
暗地项目

04:58.110 --> 04:59.710
因为毕竟我们这门课

04:59.710 --> 05:01.810
已经进入到框架级别了

05:02.110 --> 05:03.810
而框架级别是面向就业的

05:03.810 --> 05:04.310
对不对

05:04.310 --> 05:06.610
你们到时候就业的时候是不是会写简历

05:06.710 --> 05:09.710
那简历里面是不是会写一些项目经验

05:10.110 --> 05:11.810
那么这项目的话我们写啥呢

05:11.810 --> 05:13.510
你肯定不能写什么学生管理系统的

05:13.510 --> 05:15.410
这个东西那就不能看的

05:15.610 --> 05:18.610
一定要写一个就是完整的项目

05:19.110 --> 05:21.610
所以说我们这个伍佑这个课呢

05:21.810 --> 05:23.910
他就给大家准备了一个完整的项目

05:24.310 --> 05:25.210
这个项目是啥呢

05:25.210 --> 05:26.410
就是一个个人空间

05:26.910 --> 05:27.610
空间呢

05:27.610 --> 05:29.210
我们一边做这个项目呢

05:29.210 --> 05:31.610
一边去学习伍佑里面的知识

05:31.810 --> 05:32.210
这样子呢

05:32.210 --> 05:34.310
大家再把这个阶段学完之后呢

05:34.610 --> 05:37.310
你既做了一个项目可以写到简历里面去了

05:38.010 --> 05:38.810
同时呢

05:38.810 --> 05:40.110
又学到了伍佑的知识

05:40.210 --> 05:40.510
对吧

05:40.510 --> 05:43.110
又学到了伍佑在实际应用中

05:43.110 --> 05:45.710
各种场景的做法都能学习到

05:45.910 --> 05:48.110
所以我们打算用这种方式来给大家讲啊

05:48.610 --> 05:50.010
那么这个项目呢

05:50.010 --> 05:50.910
给大家看一下

05:51.610 --> 05:52.710
其实也比较简单了

05:53.110 --> 05:53.710
但是呢

05:53.710 --> 05:54.710
虽然麻雀学小

05:54.710 --> 05:57.210
虽然但是武藏俱全什么都有

05:57.610 --> 05:58.310
而且这个项目呢

05:58.310 --> 06:00.610
大家也不一定要按照我这个样式啊

06:00.610 --> 06:01.610
我这种做法来

06:01.910 --> 06:03.010
学到好的同学呢

06:03.010 --> 06:04.610
可以自己去发挥一下想象力

06:04.610 --> 06:06.910
你把个个人空间做成一个什么样子

06:07.310 --> 06:08.410
其实什么叫个人空间呢

06:08.410 --> 06:11.110
就是用来展示你自己的一个网站

06:11.810 --> 06:12.610
这是一个头像

06:12.610 --> 06:13.710
就随便画了一个

06:14.110 --> 06:14.410
然后呢

06:14.410 --> 06:16.010
这边都是一些假的数据啊

06:16.010 --> 06:16.910
假的图片

06:17.710 --> 06:18.110
后边呢

06:18.110 --> 06:20.710
大家会把他我们会把它替换成真实的

06:21.210 --> 06:21.410
好

06:21.410 --> 06:22.210
这一块呢

06:22.210 --> 06:24.410
就是你展示你自己的一些图片啊

06:24.410 --> 06:25.410
一些班农

06:25.510 --> 06:27.010
一些班农怎么翻译啊

06:27.710 --> 06:29.010
一些标语啊

06:29.110 --> 06:30.110
你看我瞎滑

06:31.210 --> 06:32.710
我这随便用了几张图片啊

06:32.710 --> 06:35.010
就首页好文章了自然而来

06:35.010 --> 06:36.010
他就是一个博客了

06:36.710 --> 06:38.010
这里有文章的分类

06:38.010 --> 06:39.510
这里有自己写的一些文章

06:39.510 --> 06:40.310
一些笔记啊

06:40.310 --> 06:40.910
一些博客啊

06:40.910 --> 06:42.810
都可以放到这文章那一图片

06:42.810 --> 06:43.810
这些文字啊

06:43.810 --> 06:44.610
这些数据啊

06:44.610 --> 06:45.410
全是假的

06:45.510 --> 06:46.610
全是测试用的

06:46.710 --> 06:47.210
因为毕竟呢

06:47.210 --> 06:48.910
我们现在还没有学到服务器对吧

06:48.910 --> 06:50.110
将来我们学到服务器过后了

06:50.110 --> 06:52.010
把数据把服务器搭建起来

06:52.010 --> 06:53.710
我们数据变成真实的数据了

06:54.110 --> 06:54.310
好

06:54.310 --> 06:55.110
这是文章

06:55.510 --> 06:56.610
然后关于我呢

06:56.610 --> 06:58.910
其实就是一个在线简历啊

06:58.910 --> 07:01.310
就是把你自己用一些文字图文

07:01.310 --> 07:02.510
用什么方式随便你

07:02.610 --> 07:03.410
把他描述一下

07:03.410 --> 07:04.910
我这里随便用了一个网页

07:05.010 --> 07:06.010
虾用的啊

07:06.010 --> 07:07.010
也是别人的网页啊

07:07.010 --> 07:09.110
随便用的一个好像是一个技能数

07:10.110 --> 07:10.910
打不开了

07:13.430 --> 07:14.130
刷新一下

07:17.460 --> 07:18.560
是这么一个技能数啊

07:18.560 --> 07:19.160
这个东西呢

07:19.160 --> 07:20.360
不是我做的啊

07:20.360 --> 07:21.260
所以别人的一个网页

07:21.260 --> 07:22.160
我就随便举个例子

07:22.160 --> 07:22.860
就是说这里呢

07:22.860 --> 07:24.260
实际上是练到别的

07:24.560 --> 07:25.960
别的一个网页啊

07:25.960 --> 07:27.660
来表示你的目前的技能

07:28.660 --> 07:29.260
好吧

07:29.260 --> 07:30.060
当然大家

07:30.060 --> 07:31.860
我不见大家以后又用这个啊

07:31.860 --> 07:32.860
我就是举个例子

07:32.860 --> 07:34.260
都是全是假的数据

07:34.260 --> 07:36.060
然后接下来我们就是项目效果

07:36.060 --> 07:37.260
这里展现的是什么呢

07:37.260 --> 07:39.060
展现的是你在平时的学习中

07:39.860 --> 07:40.860
做的一些项目啊

07:40.860 --> 07:42.660
比如说我们现在的各种博客系统

07:43.260 --> 07:45.860
或者是做的一些小的demo啊

07:45.860 --> 07:46.060
对吧

07:46.060 --> 07:48.060
我们比方说过什么贪吃蛇

07:48.060 --> 07:49.860
做过那个像素鸟

07:49.860 --> 07:50.860
对不对啊

07:50.860 --> 07:52.060
什么在线钢旗啊

07:52.060 --> 07:52.660
那乱七八糟的

07:52.660 --> 07:54.060
我们平时工艺直播课里边

07:54.060 --> 07:55.060
也有很多的效果

07:55.060 --> 07:56.460
那么那些效果和demo

07:56.460 --> 07:59.060
都可以写到这来进行展示

07:59.060 --> 07:59.860
没有那意思吧

07:59.860 --> 08:00.660
当然点击进去

08:00.660 --> 08:02.460
就可以看到它展示的效果

08:02.460 --> 08:02.760
这里呢

08:02.760 --> 08:04.860
我是随便举了一些别人的网站的例子

08:04.860 --> 08:07.260
就这么个意识就可以展示自己的

08:07.260 --> 08:08.760
这些数据前是假的

08:08.760 --> 08:09.060
然后呢

08:09.060 --> 08:10.160
接下来一个留言板

08:11.560 --> 08:12.160
这个留言板呢

08:12.160 --> 08:14.060
就是留言板的功能

08:14.060 --> 08:16.260
你任何人普通用户功能

08:16.260 --> 08:17.560
可以在这里不需要登录

08:17.560 --> 08:18.460
直接写个用户里程

08:18.460 --> 08:19.460
输入一个内容提交

08:19.460 --> 08:21.160
就可以提交一个一份留言

08:21.160 --> 08:22.260
但是这些数据前是假的

08:23.260 --> 08:24.160
好大概就这样子

08:24.160 --> 08:25.560
然后这左下角呢

08:25.560 --> 08:27.060
有一些微信啊qq啊

08:27.060 --> 08:28.460
就联系方式啊

08:28.460 --> 08:30.960
有的有你的github地址

08:30.960 --> 08:32.260
这就是你的个人空间

08:32.260 --> 08:32.460
对吧

08:32.460 --> 08:33.860
大家可以去发挥一下想象力

08:33.860 --> 08:35.060
你可以把它做的更好看一点

08:35.060 --> 08:36.060
更酷炫一点

08:36.060 --> 08:37.060
都行啊

08:37.060 --> 08:38.360
咱们主要是通过这么一个效果

08:38.360 --> 08:40.460
来学习5u的功能

08:40.460 --> 08:43.060
同时练习了这个项目

08:43.060 --> 08:43.960
好吧

08:43.960 --> 08:44.960
大家说一下啊

08:44.960 --> 08:46.760
这个课程就这种讲法

08:46.760 --> 08:48.160
好那么这一课我们学一张啊

08:49.860 --> 08:51.960
我们学习门技术

08:52.060 --> 08:53.060
还是也好

08:53.060 --> 08:55.160
还是学习个知识点也好

08:55.160 --> 08:57.660
首先你要知道它怎么来的

08:57.660 --> 08:58.760
它为什么会出现

08:58.760 --> 08:59.860
它一定是有问题的

08:59.860 --> 09:00.160
对吧

09:00.160 --> 09:01.960
一定是要解决某一个问题

09:01.960 --> 09:04.660
而5u呢算是我们的前端框架

09:04.660 --> 09:07.260
那为什么会出现前端框架呢

09:07.260 --> 09:10.460
我们之前用原生的GS搭配一些第三方库

09:10.460 --> 09:11.860
写效果不写的刷刷刷

09:11.860 --> 09:12.560
挺好的嘛

09:12.560 --> 09:13.160
对吧

09:13.160 --> 09:15.160
再加上一个什么bookstrap

09:15.160 --> 09:16.760
搭建议面也很快啊

09:16.760 --> 09:19.360
为什么要去搞一个什么前端框架呢

09:19.360 --> 09:20.460
那你就需要知道

09:21.460 --> 09:22.960
它到底是怎么来的

09:23.660 --> 09:26.160
整个前端的发展过程是什么样子的

09:26.160 --> 09:28.960
我这里呢给大家去讲一些这种

09:29.360 --> 09:32.960
这种从一个更高的角度去看这个5u的这个技术啊

09:33.360 --> 09:36.760
首先我们要了解在很多年很多年以前啊

09:37.060 --> 09:38.560
有没有前端这个职位啊

09:38.960 --> 09:39.960
他也有

09:39.960 --> 09:40.760
他也有

09:40.960 --> 09:43.560
不过呢说是前端其实呢后

09:44.060 --> 09:46.360
说的不好听一点就是一个页面斩

09:46.660 --> 09:47.960
啥叫页面斩呢

09:48.660 --> 09:51.360
设计师给你设计出来的一个设计稿

09:51.760 --> 09:51.960
对吧

09:51.960 --> 09:53.460
用福德效果做的

09:54.260 --> 09:55.560
是一个psd文件

09:56.260 --> 09:58.460
然后呢前前端开发者呢

09:58.460 --> 10:00.260
要做的事情就就只有一件

10:00.660 --> 10:01.960
把这个设计稿啊

10:02.260 --> 10:04.360
还原成一个静态页面

10:05.260 --> 10:05.860
原来意思吧

10:05.860 --> 10:07.060
所以说我们当时呢

10:07.060 --> 10:07.760
把

10:08.460 --> 10:10.660
严格意义上还不叫前端工程师

10:10.660 --> 10:11.060
因为他

10:11.660 --> 10:14.160
他叫做那个页面重构式

10:14.560 --> 10:17.760
就是把那个设计稿还原成静态页面

10:18.160 --> 10:19.660
etm和css够用

10:20.060 --> 10:22.160
再加上一些很少很少的介绍

10:22.160 --> 10:24.260
做一些页面动态效果呀之类的啊

10:24.360 --> 10:27.160
鼠标悬提或者过一会弹出一个广告啊

10:27.160 --> 10:29.060
就做出做一些这些东西

10:29.760 --> 10:31.660
为什么以前前端开发者

10:32.060 --> 10:33.360
只能做这些东西呢

10:34.360 --> 10:35.660
是因为过去的

10:36.360 --> 10:37.860
前后端架构

10:38.060 --> 10:39.260
他决定了

10:39.760 --> 10:40.960
只能这样做

10:41.160 --> 10:42.560
为什么呢看一下这张图

10:43.960 --> 10:46.360
我们过去的页面是怎么出来的呢

10:46.560 --> 10:48.760
表录我们的浏览器里边去输入一个地址

10:49.160 --> 10:50.860
访问到谁访问到服务器吗

10:51.560 --> 10:53.360
哎服务器看到这个地址过后呢

10:53.760 --> 10:54.760
然后这是放文的是吗

10:54.760 --> 10:55.960
杜一新闻对吧

10:56.260 --> 10:57.960
哎服务器还会做这么一件事

10:58.160 --> 10:59.160
都服务器是谁写的

10:59.160 --> 11:00.460
是后端开发者写的

11:00.760 --> 11:02.760
用夹娃呀用撇击撇啊用什么

11:03.060 --> 11:04.360
呃谁下不语言啊

11:04.360 --> 11:06.360
呃甚至用拍摄啊谁呀家都可以写

11:06.360 --> 11:07.560
反正后端人员都可以写

11:08.560 --> 11:10.660
服务器呢拿到这个请求之后呢

11:10.760 --> 11:13.060
他会去组装页面什么叫组装页面

11:13.360 --> 11:14.760
哎我这边有个列表

11:14.760 --> 11:16.660
这个列表里边有不有新闻吗

11:16.960 --> 11:17.960
不有新闻标题吗

11:17.960 --> 11:19.160
那新闻标题哪来呢

11:19.160 --> 11:20.760
服务器在内部的数据库里边

11:20.760 --> 11:22.560
读取到各种新闻标题

11:22.560 --> 11:25.160
然后给你组装成ULI对不对

11:25.160 --> 11:27.460
哎下一个区域不是有个用户信息吗

11:27.460 --> 11:29.060
对吧当前登录的用户信息

11:29.060 --> 11:31.560
哎服务器拿到当前登录的用户信息是哪些

11:31.560 --> 11:33.060
给你组装成下一个区域

11:33.560 --> 11:35.360
这样子不断的拼接不断的拼接

11:35.360 --> 11:36.760
就组装成整个页面了

11:37.060 --> 11:39.460
啊这是服务器以前的做法

11:39.560 --> 11:40.660
我们的页面是在哪呢

11:40.660 --> 11:42.560
是在服务器组装的

11:42.660 --> 11:44.960
所以我们把它叫做服务端渲染

11:45.360 --> 11:47.760
在服务端组装成一个完整的ATM

11:47.860 --> 11:51.060
然后呢服务器把这个组装的结果发给浏览器

11:51.160 --> 11:53.460
浏览器一看不就是一个完整的ATM吗

11:53.760 --> 11:55.160
哎我就把它渲染出来

11:55.560 --> 11:56.060
对吧

11:56.060 --> 11:58.760
所以叫做这个东西叫做服务端渲染

11:59.060 --> 11:59.960
这是过去的做法

11:59.960 --> 12:01.960
其实现在呢你还可以看到很多的

12:02.060 --> 12:03.960
一些传统的网站啊

12:03.960 --> 12:06.060
都还是使用的是服务端渲染的方式

12:06.760 --> 12:08.560
好点击右键我们看一下百度吧

12:08.960 --> 12:09.760
点击右键

12:10.160 --> 12:12.960
这个百度里面你看这是服务器发给我的结果

12:13.360 --> 12:13.860
你看吧

12:15.460 --> 12:17.660
是不是有很多内容的服务发过来的

12:17.660 --> 12:18.860
是不是一个完整的ATM

12:18.960 --> 12:19.360
对吧

12:19.460 --> 12:20.460
然后呢还包括什么呢

12:20.460 --> 12:21.960
包括一些页面内容对不对

12:21.960 --> 12:23.560
那么这内容是在哪组装的

12:23.560 --> 12:25.360
是在服务端组装的

12:25.860 --> 12:26.560
没意思吧

12:26.760 --> 12:28.060
那么服务端组装的时候无

12:28.060 --> 12:30.060
那么前端开发者能不能参与这个过程呢

12:30.060 --> 12:30.960
他参与不了

12:31.560 --> 12:33.660
因为这个组装的过程是用后端语言写的

12:33.660 --> 12:34.660
比方说加把写的

12:35.160 --> 12:36.360
前端开发者怎么来参与呢

12:36.360 --> 12:37.060
参与不了

12:37.360 --> 12:39.360
只能让后端开发者去组装

12:39.960 --> 12:40.560
没了意思吧

12:40.960 --> 12:41.960
那前端开发者做啥呢

12:41.960 --> 12:44.360
他就是提供各种样式提供一个静态页面

12:44.560 --> 12:47.960
让那些后端开发者在组装的时候有一个参考

12:47.960 --> 12:51.460
这个地方我到底是使用DIV还是使用ULLI远处的

12:51.460 --> 12:52.760
我参照静态页面

12:53.460 --> 12:55.660
这个地方我到底使用了什么内样式呢

12:55.660 --> 12:56.960
我参照静态页面

12:57.160 --> 12:58.260
是这么个意思啊

12:58.260 --> 12:59.860
以前的是开发前端开发者

12:59.860 --> 13:02.460
把静态页面CSS提供给后端开发者

13:02.460 --> 13:04.760
后端开发者做一个参考来进行组装

13:06.060 --> 13:08.160
整个组装过程前端是无法参与的

13:08.260 --> 13:10.260
所以可以想象在那个时代啊

13:10.460 --> 13:12.760
前端开发者的薪水待遇肯定很低

13:13.260 --> 13:16.160
甚至比前台比行政高不了多少

13:16.460 --> 13:17.960
因为他做的事情太简单了

13:18.460 --> 13:19.460
实际上像你们

13:19.660 --> 13:21.860
如果说推到10年前

13:22.460 --> 13:25.360
像你们的现代学的技术就完全已经够了

13:25.960 --> 13:27.160
还都学多了

13:27.960 --> 13:31.460
完全只需要学个ATM-CSS加上一个简单的解释

13:31.560 --> 13:33.860
就可以完成那个页面重够了

13:34.160 --> 13:35.260
再加上一个解快锐

13:36.260 --> 13:37.960
这是最过去的用法做法

13:38.260 --> 13:39.760
那么这种做法有什么问题呢

13:39.760 --> 13:41.560
其实过去很多年都是这样做的

13:41.560 --> 13:43.560
倒是没有什么眼中的问题

13:43.560 --> 13:46.360
就是有一个人有一个群体会抱怨

13:46.860 --> 13:48.260
谁呢 就是后端开发者

13:50.060 --> 13:52.560
而且随着我们的网站越来越复杂

13:54.060 --> 13:55.360
后端的功能越来越多

13:55.360 --> 13:57.260
前端的功能就页面上的功能

13:57.260 --> 13:58.660
交互性越来越强

13:59.960 --> 14:02.060
后端开发者做的事情是不是越来越多

14:02.560 --> 14:04.660
他不断要完成各种业务功能

14:04.660 --> 14:05.460
什么叫业务功能

14:05.460 --> 14:06.860
就是跟数据相关的

14:06.960 --> 14:08.560
只跟数据打交道

14:08.560 --> 14:09.360
比如登录

14:09.760 --> 14:11.160
登录注册

14:11.960 --> 14:13.260
还有什么发布文章

14:13.460 --> 14:14.460
对吧 发布文章

14:14.460 --> 14:16.760
那么这些数据库里边会产生哪些变化

14:16.760 --> 14:17.260
对吧

14:17.260 --> 14:18.360
那么这些东西呢

14:18.860 --> 14:20.360
就是业务 纯业务

14:21.060 --> 14:22.860
纯业务已经很复杂了

14:23.660 --> 14:25.160
然后业面上交互还多

14:25.160 --> 14:26.460
还有各种各样的交互

14:26.860 --> 14:30.660
这些都需要钱的后端开发者去组装

14:31.660 --> 14:32.360
所以说

14:32.660 --> 14:34.060
后端开发者已经

14:35.060 --> 14:37.360
承受不了这么大的开发压力了

14:37.960 --> 14:39.260
于是那就开始想办法

14:39.460 --> 14:41.560
那我前端开发者太闲了

14:41.660 --> 14:43.260
后端开发者压力太大了

14:43.760 --> 14:46.760
能不能让前端开发者去组装业面了

14:47.460 --> 14:49.260
那么这就涉及到前后端分离了

14:49.560 --> 14:51.260
怎么把前端的工作

14:51.460 --> 14:52.260
就组装业面

14:52.260 --> 14:54.360
按理说应该是前端的工作对吧

14:54.660 --> 14:55.760
那现在以前没办法

14:55.760 --> 14:56.960
是在服务系组装的

14:57.560 --> 14:59.160
那我们能不能换一种事故呢

14:59.160 --> 15:00.860
于是出现了下面这种做法

15:00.860 --> 15:02.260
叫做前后端分离

15:02.460 --> 15:03.460
这时候经过了很

15:03.860 --> 15:06.460
几句话就经过了很多年很多年了

15:06.960 --> 15:08.260
出现了前后端分离

15:09.460 --> 15:10.960
前后端分离是怎么回事呢

15:10.960 --> 15:11.560
你看啊

15:12.360 --> 15:14.260
就浏览器去请求服务器

15:14.360 --> 15:15.460
服务器给我的是啥呀

15:15.460 --> 15:17.360
他没有给我组装好的页面

15:18.360 --> 15:19.660
没有给我组装好的页面

15:19.960 --> 15:22.660
给我的是一个没有任何内容的AteMill

15:22.860 --> 15:24.760
你看一下我们现在这个博客

15:26.990 --> 15:28.490
不是博客个人空间

15:28.990 --> 15:30.490
我们点击右键啊

15:30.590 --> 15:32.390
然后查看网页原来嘛

15:33.090 --> 15:34.490
看一下服务器给我们的结果

15:34.790 --> 15:36.090
这就是服务器给我们的结果

15:36.190 --> 15:36.890
你看有东西吗

15:36.890 --> 15:37.790
啥东西都没有

15:38.090 --> 15:39.990
就一个DIV ID為APP

15:40.090 --> 15:40.790
啥都没有

15:41.090 --> 15:42.790
所以说服务器给我们的是什么呢

15:42.790 --> 15:45.490
给我的是一个纯粹的静态页面

15:45.490 --> 15:47.090
而这个静态页面啥内容都没有

15:48.090 --> 15:49.790
服务器没有给我们进行组装

15:50.990 --> 15:53.190
然后接下来一个页面发到浏览器

15:53.190 --> 15:53.690
对不对

15:53.790 --> 15:56.090
但是这个页面里边引用了很多的介石

15:56.290 --> 15:56.690
对吧

15:57.090 --> 15:59.190
这介石其实也是前头开发者写好的

15:59.990 --> 16:01.990
那么再从服务器去拿介石

16:01.990 --> 16:03.690
那么这里没话了

16:04.090 --> 16:05.890
拿到这个介石过后是不是浏览器

16:05.890 --> 16:06.990
会运行这个介石

16:07.390 --> 16:08.790
于是它接下来的过程就是

16:08.890 --> 16:10.690
浏览器运行介石

16:11.090 --> 16:13.290
创建元素宣展页面

16:13.390 --> 16:17.090
也就是说我们整个页面上的所有东西啊

16:17.190 --> 16:18.990
全是介石创建出来了

16:19.190 --> 16:20.290
你说有多吓人吧

16:20.290 --> 16:20.890
这个东西

16:21.690 --> 16:23.190
全是有介石创建出来的

16:23.690 --> 16:25.190
你说介石能不能创建页面了

16:25.190 --> 16:25.990
当然可以啊

16:26.590 --> 16:29.790
Document create element

16:30.190 --> 16:31.290
不就创建一个元素了吗

16:31.390 --> 16:31.790
对吧

16:31.790 --> 16:33.690
可以给元素注射各种各样的事件

16:33.790 --> 16:34.290
是不是可以

16:34.390 --> 16:36.290
理论上是可以做得到的

16:36.790 --> 16:37.790
那我比方说

16:38.190 --> 16:39.490
我要删除某个元素啊

16:39.490 --> 16:41.190
我要销毁某个元素用Remove

16:41.190 --> 16:41.590
对不对

16:41.590 --> 16:42.990
就可以销毁一个元素

16:43.190 --> 16:44.390
理论上是不是可以做到

16:44.590 --> 16:46.890
整个页面全部由介石来创建

16:47.090 --> 16:48.790
但是这个过程是不是肯定很复杂

16:49.590 --> 16:51.690
而且创建元素的过程中

16:51.690 --> 16:52.890
到底创建多少个元素啊

16:52.890 --> 16:53.690
比方说这个分类

16:54.790 --> 16:56.190
我怎么知道有10个分类呢

16:56.590 --> 16:58.490
我前段又没有这样的分类数据

16:58.790 --> 16:59.590
那么于是呢

16:59.590 --> 17:01.190
在创建元素的过程中

17:01.190 --> 17:04.090
有可能会使用阿迦克斯去请求服务器

17:04.490 --> 17:06.090
从服务器去拿一些业务数据

17:06.090 --> 17:07.190
什么叫业务数据呢

17:07.190 --> 17:08.290
比方说有哪些分类

17:08.290 --> 17:09.390
你给我给我一个数据

17:09.390 --> 17:09.890
对吧

17:09.990 --> 17:11.090
你有哪些文章

17:11.090 --> 17:12.690
你给我一个数据啊

17:13.290 --> 17:14.390
有哪些留言

17:14.990 --> 17:15.890
你给我一个数据

17:16.290 --> 17:17.390
那么像这些东西呢

17:17.390 --> 17:18.490
都是业务数据

17:18.890 --> 17:21.170
那么浏览器用介石来创建元素

17:21.170 --> 17:23.090
渲染页面需要业务数据的时候呢

17:23.090 --> 17:24.990
发送阿迦克斯请求到服务器

17:24.990 --> 17:26.690
服务器给我们一些业务数据

17:26.790 --> 17:28.990
那么浏览器继续根据这些业务数据

17:28.990 --> 17:30.390
继续来创建元素

17:30.390 --> 17:31.190
选择业面

17:31.290 --> 17:32.890
这就是前后端分离

17:33.090 --> 17:34.390
你看现在的职责变了

17:34.690 --> 17:35.990
业面是在哪组装的

17:35.990 --> 17:37.890
是不是在浏览器端组装的

17:37.990 --> 17:39.290
它不是在服务器组装的

17:39.790 --> 17:41.690
那么浏览器的使用介石来组装的

17:41.690 --> 17:43.490
那么这个介石就是前端开发者写的

17:44.290 --> 17:44.790
对不对

17:45.290 --> 17:46.690
所以接下来的事情就是

17:46.990 --> 17:48.690
前端开发者写好静态业面

17:48.690 --> 17:50.090
写好一个没有内容的ATMEL

17:50.090 --> 17:51.490
然后再写好各种介石

17:51.490 --> 17:53.290
介石里面会创建各种元素

17:55.190 --> 17:56.490
把这些东西扔到服务器

17:56.690 --> 17:57.790
服务器的啥都不管

17:57.890 --> 17:58.990
到时候瀏覽器请求他的时候

17:58.990 --> 18:00.790
服务器就把业面给我介石给我

18:00.890 --> 18:02.590
然后剩下的就是运行这些介石

18:02.790 --> 18:03.790
创建各种数据了

18:06.630 --> 18:08.930
随着前后端分离这么模式的发展

18:09.030 --> 18:11.730
是不是前端开发者承担的功能就越来越多了

18:12.330 --> 18:12.930
服务端

18:13.930 --> 18:14.830
后端开发者

18:15.430 --> 18:16.430
他承担什么事情呢

18:16.530 --> 18:17.630
他就承担一件事

18:18.030 --> 18:19.930
我又提供各种各样的API

18:20.330 --> 18:22.830
对吧各种各样的远程请求的地址

18:22.930 --> 18:24.230
远程请求的方法

18:24.530 --> 18:26.630
那么给给你提供一些业务功能

18:27.030 --> 18:28.930
他就不再跟业面有关系了

18:29.430 --> 18:30.130
懂这意思吗

18:30.930 --> 18:32.330
这是前后端分离的模式

18:32.630 --> 18:34.530
那么前端开发者就要负责组装业面

18:35.030 --> 18:36.530
因为用的是熟悉的介石

18:38.530 --> 18:40.530
随着前后端分离的发展啊

18:41.130 --> 18:42.430
这件事还没有结束

18:43.130 --> 18:45.730
接下来出现了一个更恐怖的东西叫做单业禁用

18:46.730 --> 18:48.730
那么给他说一下个单业禁用是怎么出来的

18:49.330 --> 18:51.730
因为过去了在传统的上网过程中

18:52.230 --> 18:54.730
我们切换业面是不是会导致业面刷新

18:55.030 --> 18:55.530
对不对

18:55.930 --> 18:57.730
我们要说我们切换到首业

18:57.830 --> 19:00.230
那么就相当于是把当前这个业面扔掉了不要了

19:00.230 --> 19:01.130
整个Atemon不要了

19:01.930 --> 19:03.630
重新去从服务器去拿

19:05.030 --> 19:06.630
我们过程过去是这样的做法

19:06.630 --> 19:07.530
一面会刷新

19:07.830 --> 19:10.430
但是这样子做的话会导致传输量增加

19:10.830 --> 19:12.030
为什么会导致传输量增加

19:12.030 --> 19:14.630
因为Atemon里面有是不是有很多的各种各样的元素啊

19:15.030 --> 19:15.430
对吧

19:15.630 --> 19:17.230
那你把切换个元素全部抛弃了

19:17.230 --> 19:17.930
然后重新

19:18.330 --> 19:19.630
重新去拿另外一个业面的时候

19:19.630 --> 19:21.930
是不是服务器要给你发重新发这些元素啊

19:22.930 --> 19:24.330
我们说的是传统的方式啊

19:25.330 --> 19:26.130
重新给你发疫

19:26.130 --> 19:27.830
这个业面的完整的Atemon文档

19:28.730 --> 19:30.530
那么就会导致传输量非常大

19:31.230 --> 19:33.030
用户的体验呢不是很好

19:34.130 --> 19:35.530
我们最好的体验是什么呢

19:35.730 --> 19:37.730
其实就是客户端应用程序

19:37.730 --> 19:38.730
什么叫客户端应用程序

19:38.730 --> 19:39.930
就是你下载的QQ

19:40.130 --> 19:41.130
下载的微信

19:41.330 --> 19:43.330
像这些下载的这些游戏对吧

19:43.330 --> 19:44.530
都是客户端程序

19:45.130 --> 19:46.530
那么那个东西呢就不是

19:46.730 --> 19:48.330
给人的感觉就不是一个网页

19:48.330 --> 19:51.730
就是一个享用速度非常快的这么一个应用

19:51.930 --> 19:54.330
所以我们希望网页不能做成这样子的

19:54.630 --> 19:56.330
理论上是可以的

19:56.630 --> 19:58.130
你看我建了这个业面

19:59.530 --> 20:00.930
我当我挑转业面的时候

20:00.930 --> 20:02.230
你看他有没有刷新啊

20:02.330 --> 20:04.230
你就看这里有没有圈圈在转

20:06.130 --> 20:07.230
这里有圈圈不是啊

20:08.130 --> 20:09.330
是不是没有刷新业面啊

20:10.730 --> 20:11.830
是不是没有刷新业面

20:12.630 --> 20:13.130
对不对

20:13.130 --> 20:14.330
你看我们在这点百度

20:14.330 --> 20:15.530
你看有没有圈圈在转啊

20:15.530 --> 20:16.130
点地图

20:16.730 --> 20:18.430
你看是不是有刷新业面

20:18.730 --> 20:19.430
懂这个意思吗

20:19.630 --> 20:20.830
我们整个实际上

20:20.830 --> 20:22.930
你看到了这个网站啊

20:22.930 --> 20:24.130
只有一个页面

20:24.730 --> 20:25.930
就只有一个页面

20:25.930 --> 20:26.830
你看一下下面

20:27.630 --> 20:28.830
这叫单页应用

20:30.030 --> 20:31.830
我们请瀏覽区去请求服务器

20:31.830 --> 20:34.430
服务器给我们的一个没有内容的

20:35.430 --> 20:35.930
就这个

20:38.030 --> 20:39.930
还是这个玩意没有任何内容

20:40.430 --> 20:41.430
然后页面上的所有东西

20:41.430 --> 20:42.630
全是用介石来创建的

20:42.630 --> 20:43.030
对吧

20:43.230 --> 20:45.030
好那么接下来我要挑转业面了

20:45.430 --> 20:46.530
挑转业面的时候呢

20:46.530 --> 20:47.830
不是说我真的把先

20:47.830 --> 20:49.330
真的去重新请求服务器

20:49.330 --> 20:50.330
重新请求一个地址

20:50.330 --> 20:50.830
不是的

20:51.530 --> 20:53.530
而是使用介石

20:53.630 --> 20:55.830
把当前这个业面的一个元素删掉

20:55.830 --> 20:57.430
比方说我们这里到首页

20:57.730 --> 20:59.230
把之前一个业面的元素又删掉了

20:59.230 --> 21:00.830
重新构建新的元素

21:01.430 --> 21:03.630
所以说我们瀏覽区实际上是没有刷新的

21:03.830 --> 21:06.130
只是介石在运行不同的东西

21:06.530 --> 21:07.230
明白了意思吗

21:07.230 --> 21:08.130
就单页应用

21:08.630 --> 21:09.830
那你可以想象到

21:09.830 --> 21:10.830
我都不用对面解释了

21:10.830 --> 21:12.530
你自己去想这个东西有多复杂

21:13.930 --> 21:15.430
全部一个页面

21:15.530 --> 21:18.130
全部由介石来创建元素来进行宣展

21:18.130 --> 21:19.130
已经够复杂了

21:19.730 --> 21:20.930
还要做单页应用

21:21.130 --> 21:23.330
不同的页面全是一套介石

21:23.630 --> 21:25.830
来进行不同的宣展

21:26.530 --> 21:27.930
是不是特别特别复杂

21:28.130 --> 21:30.030
也就是复杂到这种程度的时候

21:31.030 --> 21:32.730
前段开发者从以前

21:33.430 --> 21:35.430
一个极端就是没有什么活干

21:36.030 --> 21:38.430
到另一个极端忙不过来了

21:38.630 --> 21:40.430
而且极其复杂已经吃不消了

21:40.730 --> 21:42.630
所以说我们前段

21:43.130 --> 21:45.730
自然而然的就要降低这个复杂度

21:45.730 --> 21:46.630
怎么降低呢

21:46.930 --> 21:47.730
大家听好了

21:48.130 --> 21:50.630
你们以后接触什么框架之类这个词

21:50.930 --> 21:52.230
只要出现框架

21:52.330 --> 21:54.730
这个框架一定是为了降低复杂度的

21:55.530 --> 21:56.930
你不要一认为学这个伍诱

21:56.930 --> 21:58.430
好像很难很复杂的样子

21:58.530 --> 21:59.630
你要知道没有伍诱

21:59.630 --> 22:00.930
你要去做这种事情

22:01.230 --> 22:02.230
你根本就没法做

22:02.730 --> 22:04.630
你只能存在理论上

22:04.730 --> 22:05.730
这个太复杂了

22:06.230 --> 22:08.230
所以说我们出现了前段框架

22:08.430 --> 22:10.330
伍诱就是前段框架的一种

22:10.530 --> 22:11.230
包括安格拉

22:11.230 --> 22:13.030
Raggers都是在做同一件事的

22:13.130 --> 22:13.730
什么事呢

22:13.730 --> 22:16.330
就是介石到了流浪期过后

22:16.330 --> 22:17.630
我怎么样

22:18.430 --> 22:20.330
写代码可以非常方便的

22:20.430 --> 22:22.830
来完成在介石里面完成各种渲染

22:23.130 --> 22:24.930
渲染出各种各种元素

22:25.030 --> 22:26.530
可以非常方便的渲染出来

22:26.830 --> 22:28.130
而且他还有各种事件

22:28.130 --> 22:28.530
对吧

22:28.530 --> 22:29.930
数据还有可能会变动

22:30.630 --> 22:32.130
我们怎么来做才最好

22:32.230 --> 22:33.130
才最简单

22:33.730 --> 22:34.430
最好用

22:35.330 --> 22:36.130
懂了意思吧

22:36.330 --> 22:37.130
所以说安格拉

22:37.130 --> 22:39.530
Raggers VU都来做同一件事

22:39.630 --> 22:40.830
只要能做法呢

22:40.930 --> 22:42.630
有一些差异

22:43.930 --> 22:45.930
他们都是运行在流浪期段

22:47.130 --> 22:48.930
我们使用这样的VU的介石

22:49.030 --> 22:50.830
然后再加上我们一些自己的代码

22:51.630 --> 22:53.730
然后就可以非常方便的渲染页面

22:53.830 --> 22:55.230
而且调转页面也非常方便

22:55.230 --> 22:57.030
利用全家桶里面一些插件

22:57.130 --> 22:59.530
我们可以非常方便的来实现调转页面

22:59.530 --> 23:01.230
那么这里的调转页面指的就是什么

23:01.330 --> 23:03.230
直接的就是三组之前的元素

23:03.330 --> 23:04.430
构建型的元素

23:04.630 --> 23:05.730
可以非常方便的做到

23:06.130 --> 23:08.130
伍诱就是在降敌这个复杂度的

23:08.130 --> 23:08.730
所以说

23:08.930 --> 23:10.130
从这个图中可以看出

23:10.230 --> 23:11.530
伍诱是运行在哪呢

23:13.030 --> 23:14.630
是运行在流浪期

23:15.130 --> 23:16.530
那伍诱能不能运行在服务期呢

23:16.530 --> 23:17.030
可以

23:17.030 --> 23:19.330
那你们以后要学习那个伍诱SSR

23:19.330 --> 23:20.430
那又是别的东西的

23:20.430 --> 23:22.030
就我们目前这门课的话

23:22.230 --> 23:24.730
伍诱的代码都是运行在流浪期的

23:24.830 --> 23:25.730
不要搞错了

23:26.230 --> 23:27.330
有些同学呢

23:27.330 --> 23:28.130
还有误解

23:28.130 --> 23:30.130
认为伍诱运行在服务期段的

23:30.230 --> 23:30.930
不是的

23:31.030 --> 23:32.530
它是运行在流浪期的

23:33.730 --> 23:35.430
这是咱们测检课的那种

23:35.630 --> 23:36.430
告诉大家

23:36.530 --> 23:38.730
伍诱他到底在解决什么样的问题

23:39.430 --> 23:40.830
有一个整体的认识

23:41.430 --> 23:42.430
咱们在

23:42.530 --> 23:43.330
咱们之后呢

23:43.330 --> 23:45.130
再来具体的学习这个伍诱的

23:45.130 --> 23:46.130
一边的各种东西

23:46.630 --> 23:47.030
好吧

23:47.030 --> 23:47.230
好

23:47.230 --> 23:48.330
这是这就可能那种啊

23:48.330 --> 23:50.130
我们前面的可能会花几节课

23:50.130 --> 23:51.430
来介绍一些基本知识

23:51.430 --> 23:52.130
介绍完了之后呢

23:52.130 --> 23:54.430
咱们会进入项目里边一边做一边学

23:54.830 --> 23:55.030
好

23:55.030 --> 23:56.030
这是这就可能那种啊

