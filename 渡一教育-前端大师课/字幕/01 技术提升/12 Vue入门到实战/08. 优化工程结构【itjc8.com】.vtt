WEBVTT

00:00.050 --> 00:05.050
好了 同学们 我们目前呢 学到知识呢 其实已经不少了啊

00:06.050 --> 00:10.050
在维尤开发中呢 有很多很多的组件 我们都可以做了

00:10.050 --> 00:13.050
当然了 还有一些知识没有学习 我们会慢慢来吧

00:13.050 --> 00:16.050
就目前的知识呢 已经可以做不少的组件了啊

00:16.050 --> 00:20.050
我在下节课呢 会给大家规定一些作业

00:20.050 --> 00:23.050
大家要有一个心理准备 这个作业量呢 还不少

00:23.050 --> 00:26.050
可能需要一两天的时间才能完成啊

00:26.050 --> 00:29.050
当然了 作业过程中呢 有一些比较麻烦的地方啊

00:29.050 --> 00:33.050
我都会给大家过一遍 帮助大家呢 去扫兴这些障碍

00:33.050 --> 00:36.050
最终的代码呢 我也会给大家发下来

00:37.050 --> 00:42.050
那么这节课我们说什么问题呢 就是我们接下来有很多的组件需要开发

00:42.050 --> 00:47.050
就是我们在工程里边 你看啊 这个目录里边的东西就会越来越多

00:47.050 --> 00:51.050
越来越多 多到一定程度的时候呢 就会造成一些问题啊

00:51.050 --> 00:56.050
所以说 为了适应咱们将来的组件 越来越多的情况

00:56.050 --> 00:59.050
我们需要做一些处理

00:59.050 --> 01:04.050
有哪两个问题要处理呢 第一个问题呢 就是如何使用组件的问题

01:04.050 --> 01:07.050
这是啥问题啊 就是说 如果说组件开发的越来越多了

01:07.050 --> 01:11.050
比方说现在三个 不说多了 现在我们只有三个组件

01:12.050 --> 01:15.050
你回忆一下啊 第一个组件呢 有哪些属性

01:15.050 --> 01:19.050
就是我用它的时候 用的很简单的吧 用的时候很简单

01:19.050 --> 01:21.050
用的时候呢 我就这样用呗

01:22.050 --> 01:27.050
这就完事了 那属性传啥呀 有什么样的属性呢

01:27.050 --> 01:32.050
哪些属性是递传的 每个属性是什么类型啊 是什么名字啊

01:32.050 --> 01:35.050
对不对 像这些东西是不是很容易忘啊

01:35.050 --> 01:38.050
我们现在才三个组件就很容易忘 那将来

01:38.050 --> 01:41.050
组件多了 是不是非常容易忘记啊

01:41.050 --> 01:45.050
那到时候有人说没事 我去看一下这个组件的里边的代码

01:45.050 --> 01:48.050
一看不就明白了吗 当然很多公司里边

01:48.050 --> 01:51.050
特别是中小型企业的也是这样做的啊 但是呢

01:51.050 --> 01:54.050
这并不是一个规范的做法 规范的做法是什么呢

01:54.050 --> 01:57.050
规范的做法呢 我们要去编写一个组件说明文档

01:59.050 --> 02:02.050
不要说 我在这里呢 你看 我在component里边呢

02:02.050 --> 02:05.050
已经给大家编好了一个组件说明文档了 在这儿

02:05.050 --> 02:08.050
就是个readme.md 就是个八个档文件

02:08.050 --> 02:11.050
我们看一下吧 这个组件说明文档 拉过来看一下

02:11.050 --> 02:15.360
一共有三个组件 第一个ovata你看怎么写的啊

02:15.360 --> 02:18.360
当然每个公司呢 有自己的文档规范

02:18.360 --> 02:20.360
我这里呢就简单的写了一下

02:20.360 --> 02:24.360
就说这个ovata组件呢 大概的样子就长这个样子

02:24.360 --> 02:27.360
然后呢 它有哪些属性可以控制的一个url

02:27.360 --> 02:31.360
头像的图片地址 什么内形呢 内形写错了啊

02:31.360 --> 02:35.360
是不是避田呢 是避田

02:35.360 --> 02:38.360
没有摸认值 像这个size这个属性表示

02:38.360 --> 02:41.360
能够控制这个头像的尺寸宽高一样吧

02:41.360 --> 02:43.360
它的内形是number 懂这个意思吧

02:43.360 --> 02:46.360
一看就明白了啊 这个组件是不是说明完了

02:46.360 --> 02:49.360
诶 有了这个文档之后 是不是我不用去看代码了

02:49.360 --> 02:52.360
然后到时候我用这个图件 诶 它有什么样的属性呢

02:52.360 --> 02:54.360
哦 它有一个url 我是不是可以给它传个url进去

02:54.360 --> 02:57.360
对吧 可以控制 诶 这个size的可以不填

02:57.360 --> 03:00.360
那么我就可以不传 如果说要控制的话也可以传递

03:00.360 --> 03:02.360
懂这意思吧 就这么简单啊

03:02.360 --> 03:04.360
下一个组件呢 比方说icon

03:04.360 --> 03:07.360
我们的图标组件对吧 诶 我这里也画个图

03:07.360 --> 03:10.360
就写了个图 那么说明这个图标组件长什么样子啊

03:10.360 --> 03:14.360
我的图标数据员呢 来自于阿里巴巴史江库

03:15.360 --> 03:18.360
然后它这里边有没有属性呢 它有一个属性可以传递

03:18.360 --> 03:20.360
是必填的 而且没有默认值

03:20.360 --> 03:23.360
它就是图标的类型 type

03:23.360 --> 03:27.360
那么有哪些类型可以填呢 我下面又写了个图啊

03:27.360 --> 03:30.360
有这么一些类型可以填进去 每个图标长什么样子

03:30.360 --> 03:34.360
别人的意思吧 就是写这么一个组件的说明文档

03:34.360 --> 03:38.360
然后咱们上节课说的那个分业组件呢 你看

03:38.360 --> 03:42.360
几个图啊 然后有哪些属性呢 写到说

03:42.360 --> 03:44.360
有一个事件啊 因为前面两个组件都没有事件嘛

03:44.360 --> 03:46.360
这个地方有一个事件 事件写照

03:46.360 --> 03:50.360
事件里边不是一个函数吗 对吧 当我给他一个事件

03:50.360 --> 03:53.360
呃 配件 我给他一个事件啊

03:53.360 --> 03:57.360
事件里边有个什么 配几千几事件对不对

03:57.360 --> 04:00.360
我是不是要给他注册 到时候用的时候就注册

04:00.360 --> 04:03.360
诶 注册里边是不是有个函数啊 那么比方说一个handle

04:03.360 --> 04:07.360
啊 那么后边我们写个message里边配置的时候

04:07.360 --> 04:09.360
我这是伟代嘛 应该能看得懂

04:10.360 --> 04:12.360
呃 比方说有一个handle

04:12.360 --> 04:15.360
那么这个handle有没有参数啊 诶 他这里告诉你有一个参数啊

04:15.360 --> 04:18.360
那么这个参数叫做什么意思呢 是一个新的页码

04:18.360 --> 04:21.360
那你随便命一个单词呗 留意那个时候都可以

04:21.360 --> 04:25.360
诶 那这里是不是个 每次页码变化的时候

04:25.360 --> 04:28.360
他又会触发这个函数 然后他会给我们一个新的页码

04:28.360 --> 04:31.360
对吧 通过这个组件说明文档啊

04:31.360 --> 04:33.360
我们就可以把整个组件描述清楚

04:33.360 --> 04:35.360
将来我们就不用去看代码 直接看文档

04:35.360 --> 04:38.360
非常方便的能够找到我们想要的组件了

04:38.360 --> 04:41.360
组件越多 文档就越有用

04:42.360 --> 04:45.360
好了 那么这是第一个问题是不是解决了

04:45.360 --> 04:47.360
第一个问题并不复杂啊 他就解决了

04:47.360 --> 04:50.360
那么第二个问题呢 是一个比较麻烦的地方

04:50.360 --> 04:53.360
第二个问题 其实很多东小型企业啊

04:53.360 --> 04:55.360
他也不太关注这个问题

04:55.360 --> 04:58.360
这个问题是什么意思呢 我给大家描述一下什么意思啊

04:58.360 --> 05:00.360
比方说我们上一节课开发了什么呢

05:00.360 --> 05:02.360
开发了这个pager组件对吧

05:02.360 --> 05:05.360
诶 我们开发过程中不是要测试它吗

05:05.360 --> 05:07.360
测试一下效果呗 对不对

05:07.360 --> 05:10.360
我们当时咋测试的 是不是在这个app组件里边去测试的呀

05:10.360 --> 05:12.360
在这里边去测试的对吧

05:12.360 --> 05:14.360
那么这里边测试好像也没有什么问题啊

05:14.360 --> 05:16.360
我们把它运行出来看一下啊

05:16.360 --> 05:21.380
这里运行一个n片装设

05:23.380 --> 05:25.380
来吧 打包运行出来

05:25.380 --> 05:28.380
好像也没有什么问题 但是让大家想一想啊

05:29.380 --> 05:31.380
将来会有一些麻烦的地方啊

05:31.380 --> 05:33.380
会有一些麻烦的

05:33.380 --> 05:37.380
什么麻烦呢 就是我将来要写新的组件了过后

05:37.380 --> 05:39.380
比方说有一个新的组件要写了

05:39.380 --> 05:41.380
我要测试新的组件

05:41.380 --> 05:43.380
那是不是把这个代码我得删掉啊

05:43.380 --> 05:45.380
对不对 一删掉

05:45.380 --> 05:47.380
一删掉过后了之后呢

05:47.380 --> 05:49.380
不断的去写新的组件 不断的去删这个代码

05:49.380 --> 05:51.380
那旧的测试代码是不是没了啊

05:51.380 --> 05:53.380
那有一天我要说

05:53.380 --> 05:55.380
我要去这个pager组件

05:55.380 --> 05:57.380
我可能要做一些改动

05:57.380 --> 05:59.380
我一去改动我要去重新测试啊

05:59.380 --> 06:01.380
我这个代码又得测试代码又得重新去写一遍

06:01.380 --> 06:03.380
是不是很麻烦

06:03.380 --> 06:05.380
我这边呢 我就希望说

06:05.380 --> 06:07.380
每一个组件呢

06:07.380 --> 06:09.380
它都能够单独的进行测试

06:09.380 --> 06:11.380
而我有一天想测试它了

06:11.380 --> 06:13.380
也直接运行一个测试代码

06:13.380 --> 06:15.380
它就可以把测试出来

06:15.380 --> 06:17.380
而我有一天想测试它了

06:17.380 --> 06:19.380
我有一天想测试它了

06:19.380 --> 06:21.380
都可以轻松的测试出来

06:21.380 --> 06:23.380
不用去改什么代码

06:23.380 --> 06:25.380
就是我要保留每一个组件的测试代码

06:25.380 --> 06:27.380
其实也不是测试代码

06:27.380 --> 06:29.380
就是一个查看效果的代码

06:29.380 --> 06:31.380
明儿的意思吧

06:31.380 --> 06:33.380
那我们怎么弄呢

06:33.380 --> 06:35.380
做完了

06:35.380 --> 06:37.380
大家就明白什么意思了

06:37.380 --> 06:39.380
在做完之前可能不太明白什么意思

06:39.380 --> 06:41.380
啥意思呢

06:41.380 --> 06:43.380
我就这样子来看着啊

06:43.380 --> 06:45.380
我以这个Pager组件为例

06:45.380 --> 06:47.380
我把这个组件给大家做完

06:47.380 --> 06:49.380
那么剩下两个组件呢

06:49.380 --> 06:51.380
大家下来自己去做一下

06:51.380 --> 06:53.380
第一步

06:53.380 --> 06:55.380
我在Component里边

06:55.380 --> 06:57.380
Pager所占的目录在这儿

06:57.380 --> 06:59.380
我在这里新建一个文件夹

06:59.380 --> 07:01.380
叫做Pager

07:01.380 --> 07:03.380
文件夹里边新建一个文件

07:03.380 --> 07:05.380
叫做Index.View

07:05.380 --> 07:07.380
小写的Index.View

07:07.380 --> 07:09.380
然后把Pager代码的直接

07:09.380 --> 07:11.380
剪切

07:11.380 --> 07:13.380
粘贴过来

07:13.380 --> 07:15.380
好粘贴过来过后

07:15.380 --> 07:17.380
我把这个Pager就可以删掉了

07:17.380 --> 07:19.380
你看整个过程是什么意思啊

07:19.380 --> 07:21.380
我就是把它放到一个文件夹里边

07:21.380 --> 07:23.380
一个同名文件夹里边

07:23.380 --> 07:25.380
而且文件夹里边有一个Index.View

07:25.380 --> 07:27.380
那为什么要这样做呢

07:27.380 --> 07:28.380
首先

07:28.380 --> 07:29.380
第一点

07:29.380 --> 07:31.380
目前的效果有没有影响呢

07:31.380 --> 07:33.380
你会发现

07:33.380 --> 07:35.380
不应该啊

07:35.380 --> 07:37.380
不应该

07:37.380 --> 07:39.380
他说找不到这个模块

07:39.380 --> 07:41.380
我这里

07:41.380 --> 07:43.380
没问题啊

07:43.380 --> 07:45.380
没问题啊

07:45.380 --> 07:47.380
Component

07:47.380 --> 07:49.380
我重新启动一下啊

07:49.380 --> 07:51.380
应该是没问题的

07:51.380 --> 07:56.320
NPM装饰

07:56.320 --> 07:58.320
是没问题的

07:58.320 --> 08:00.320
刷新

08:00.320 --> 08:02.320
起了怪了

08:02.320 --> 08:04.320
我们路径不是改了吗

08:04.320 --> 08:06.320
为什么还可以出来呢

08:06.320 --> 08:08.320
这就是Wepac的威力了

08:08.320 --> 08:10.320
它默认会去找Index

08:10.320 --> 08:12.320
这个文件

08:12.320 --> 08:14.320
因为后维名呢

08:14.320 --> 08:16.320
在View的工程里边

08:16.320 --> 08:18.320
后维名可以是G也是可以是View

08:18.320 --> 08:20.320
我找的是什么

08:20.320 --> 08:22.320
Pager是一个目录

08:22.320 --> 08:24.320
目录的话就默认去找

08:24.320 --> 08:26.320
里边的Index.View

08:26.320 --> 08:28.320
所以我们在使用这个组件的时候

08:28.320 --> 08:30.320
你不能去点而无忧

08:30.320 --> 08:32.320
那肯定不行了

08:32.320 --> 08:34.320
那么找到这个文件夹

08:34.320 --> 08:36.320
它自动会去找这个Index.View

08:36.320 --> 08:38.320
所以说我们把组件放到这个文件夹里边去

08:38.320 --> 08:40.320
放到文件夹有什么好处呢

08:40.320 --> 08:42.320
我们就可以把测试代码啊

08:42.320 --> 08:44.320
写到这个文件夹里边去了

08:44.320 --> 08:46.320
新鲜的文件啊

08:46.320 --> 08:48.320
我们写下测试代码

08:48.320 --> 08:50.320
测试代码怎么写呢

08:50.320 --> 08:52.320
就写个Test吧

08:52.320 --> 08:54.320
比如说Test.View

08:54.320 --> 08:56.320
这是专门来看一下

08:56.320 --> 08:58.320
也行PrayView都行

08:58.320 --> 09:00.320
或者是Test吧都行

09:00.320 --> 09:02.320
你自己规定一个统一的名字

09:02.320 --> 09:04.320
就表示来看一下这个组件的效果

09:04.320 --> 09:06.320
那么我们就可以把刚才的这个App

09:06.320 --> 09:08.320
组件的内容啊

09:08.320 --> 09:10.320
这个效果的内容呢放到这里边去了

09:10.320 --> 09:12.320
放到这里边

09:12.320 --> 09:15.950
没问题吧

09:15.950 --> 09:17.950
我们把这个路径稍微改一下

09:17.950 --> 09:19.950
这里改的路径呢就是

09:19.950 --> 09:21.950
点而结杠,Index.View

09:21.950 --> 09:23.950
或者就是点而结杠也可以

09:23.950 --> 09:25.950
因为点而结杠是当前目录

09:25.950 --> 09:27.950
就没人去找Index.View了

09:27.950 --> 09:29.950
对不对,这是个Test组件

09:29.950 --> 09:31.950
是不是写好了

09:31.950 --> 09:33.950
这个组件写好了,有用吗没用啊

09:33.950 --> 09:35.950
比方说我现在把这个App

09:35.950 --> 09:37.950
东西删掉啊

09:37.950 --> 09:39.950
把Test里面这个取掉

09:39.950 --> 09:41.950
我把这个App

09:41.950 --> 09:45.520
组件里面的东西删掉

09:45.520 --> 09:47.520
也就是我们刚才呢

09:47.520 --> 09:49.520
就把App里面的代码转到了哪呢

09:49.520 --> 09:51.520
转到了这个

09:51.520 --> 09:53.520
我们的每一个组件的文件夹里边去了

09:53.520 --> 09:55.520
就是我编写这个分析组件

09:55.520 --> 09:57.520
我就在这个文件夹里边建一个

09:57.520 --> 09:59.520
查看效果的东西

09:59.520 --> 10:01.520
对吧,就在这里去新建个查看效果

10:01.520 --> 10:03.520
OK了

10:03.520 --> 10:05.520
那这样子,问题是他能运行吗

10:05.520 --> 10:07.520
你觉得他能运行吗

10:07.520 --> 10:09.520
能运行就见了鬼了

10:09.520 --> 10:11.520
肯定不能运行啊

10:11.520 --> 10:13.520
因为他默认的情况下,启动的是他

10:13.520 --> 10:15.520
他渲染的是谁,渲染的是这个App

10:15.520 --> 10:17.520
对吧,是不是渲染他

10:17.520 --> 10:19.520
他里边有没有渲染别的

10:19.520 --> 10:21.520
啥都没有,所以你看到的结果就是这个东西

10:21.520 --> 10:23.520
我们这个Test组件根本就没有运行

10:23.520 --> 10:25.520
怎么办呢,有东西说那很简单呀

10:25.520 --> 10:27.520
我是不是可以改一下这个地方

10:27.520 --> 10:29.520
但是呢,我不想去改它

10:29.520 --> 10:31.520
我用一种更好的方式

10:31.520 --> 10:33.520
这更好的方式在哪呢

10:33.520 --> 10:35.520
就在这

10:35.520 --> 10:37.520
连接进去

10:37.520 --> 10:39.520
在我们的克力这个工具里边

10:39.520 --> 10:41.520
不是个角色加工具吗

10:41.520 --> 10:43.520
这个角色加工具呢,除了这个角色加工具之外

10:43.520 --> 10:45.520
他还给你提供了一个

10:45.520 --> 10:49.520
能够运行单个组件的

10:49.520 --> 10:51.520
这么一个命令工具

10:51.520 --> 10:53.520
就这个玩意,你首先把它全去安装

10:53.520 --> 10:55.520
你去安装,我这里已经安装好了

10:55.520 --> 10:57.520
安装完了,过后呢

10:57.520 --> 10:59.520
我们的Wheel这个命令啊,就多了一个命令了

10:59.520 --> 11:01.520
叫Serve

11:01.520 --> 11:03.520
叫Serve这个命令

11:03.520 --> 11:05.520
来,我们来看一下啊,这个Serve这个命令怎么写

11:05.520 --> 11:07.520
我们现在停止了

11:07.520 --> 11:09.520
我们现在不用去NPMZoneServe

11:09.520 --> 11:11.520
不用去这个命令的

11:11.520 --> 11:13.520
你看啊,这个命令运行的是咋

11:13.520 --> 11:15.520
他给你点节省

11:15.520 --> 11:17.520
运行的实际上是他,对吧,WheelCleanServiceServe

11:17.520 --> 11:19.520
之前是运行的这个命令

11:19.520 --> 11:21.520
这个命令啥意思啊,就启动我们的工程

11:21.520 --> 11:23.520
Made out的意思就是入口

11:23.520 --> 11:25.520
对吧,启动整个工程

11:25.520 --> 11:27.520
现在我不要启动整个工程了

11:27.520 --> 11:29.520
我要启动的是什么,就这个图件

11:29.520 --> 11:31.520
我就启动这个图件

11:31.520 --> 11:33.520
也就是说,我希望呢,你帮我去

11:33.520 --> 11:35.520
创建一个

11:35.520 --> 11:37.520
帮我去创建一个Wheel实力

11:37.520 --> 11:39.520
然后呢,去宣展这个图件的玩意

11:39.520 --> 11:41.520
懂这意思吧,我就要做这种一件事

11:41.520 --> 11:43.520
好,那么做件事咋做呢

11:43.520 --> 11:45.520
我要使用这个命令

11:45.520 --> 11:47.520
WheelCleanServiceServe

11:47.520 --> 11:51.540
WheelClean

11:51.540 --> 11:53.540
WheelServe

11:53.540 --> 11:55.540
宣展单个图件

11:55.540 --> 11:57.540
那么我们宣展啥呀

11:57.540 --> 11:59.540
宣展的是,比方说

11:59.540 --> 12:01.540
举个例子,我宣展的是

12:01.540 --> 12:05.540
SRC目录下面的IPP.Wheel这个图件

12:05.540 --> 12:07.540
看一下他咋宣展的,运行

12:07.540 --> 12:10.980
你看,是不是把这个图件宣展出来了

12:10.980 --> 12:12.980
也是在这个端口,你看一下

12:12.980 --> 12:14.980
这个图件就出来了

12:14.980 --> 12:16.980
我们来点击右键检查

12:16.980 --> 12:18.980
看一下这个图件的结构

12:19.980 --> 12:21.980
这个结构呢,跟我们刚才的结构是一样的

12:21.980 --> 12:23.980
它其实就是这个命令啊

12:23.980 --> 12:26.980
它就是帮我们来测试一些,查看一些图件效果用的

12:26.980 --> 12:29.980
它其实作用非常简单

12:29.980 --> 12:32.980
它就在内部帮我们去做了这么一件事啊

12:32.980 --> 12:34.980
导入这个,然后呢导入这个

12:34.980 --> 12:36.980
然后宣展这个IPP.Wheel

12:36.980 --> 12:38.980
明儿的意思吧,它就帮我们做了这么一件事

12:38.980 --> 12:40.980
那么我们刚才无非就是要去测试它

12:40.980 --> 12:42.980
对吧,所以说我们这里用NPM

12:42.980 --> 12:44.980
用那个

12:44.980 --> 12:46.980
WheelServe

12:47.980 --> 12:49.980
WheelSrc

12:49.980 --> 12:51.980
WheelComponent

12:51.980 --> 12:53.980
WheelShake

12:53.980 --> 12:55.980
WheelPager

12:55.980 --> 12:57.980
WheelIndex.Wheel

12:57.980 --> 12:59.980
这里要写全啊,这里不是介绍单

12:59.980 --> 13:05.340
好,运行,看一下啊

13:05.340 --> 13:07.340
好,运算,我们看一下

13:12.030 --> 13:14.030
没有宣展出来呢

13:14.030 --> 13:16.030
看一下Wheel的结构图啊

13:16.030 --> 13:18.030
哦,错了对吧,错了

13:18.030 --> 13:20.030
我们要的宣展的是什么

13:20.030 --> 13:22.030
宣展是Test.Wheel

13:22.030 --> 13:26.370
宣展这个组件

13:26.370 --> 13:28.370
就把这个组件运行出来就行了

13:28.370 --> 13:30.370
好,刷新,你看

13:30.370 --> 13:32.370
顺便帮我们启动了这个组件了

13:32.370 --> 13:34.370
这个Test组件,这Test组件是不是出来了

13:34.370 --> 13:36.370
对吧,那么我们是不是可以在这里

13:36.370 --> 13:38.370
去查看我们之前的效果

13:38.370 --> 13:40.370
对吧,就这么个意思啊

13:40.370 --> 13:42.370
那么这个文件我们以后就是不用删

13:42.370 --> 13:44.370
把它保留起来就行了

13:44.370 --> 13:46.370
那么其他组件是不是每个组件都可以有这样的

13:46.370 --> 13:48.370
一个结构,那么接下来就是去

13:48.370 --> 13:50.370
新建一个文件夹叫Evata

13:50.370 --> 13:52.370
把它放到里面去,然后加上一个测试的

13:52.370 --> 13:54.370
然后呢,新建一个文件夹icon

13:54.370 --> 13:56.370
把它放到文件夹里面去

13:56.370 --> 13:58.370
加上一个测试的

13:58.370 --> 14:00.370
懂了意思吧,我都教了这么详细的

14:00.370 --> 14:02.370
应该可以听懂了啊

14:02.370 --> 14:04.370
但是呢,我们现在还是有个小问题啊

14:04.370 --> 14:06.370
就是每一次写命令啊

14:06.370 --> 14:08.370
比方说有天我要测试这个Pager

14:08.370 --> 14:10.370
是不是这个命令很长啊

14:10.370 --> 14:12.370
那怎么办呢,这个东西利用我们以前学过的

14:12.370 --> 14:14.370
保管理器,是不是可以在这里的

14:14.370 --> 14:16.370
去加一些命令啊

14:16.370 --> 14:18.370
给它简化一下,比方说命令什么呢

14:18.370 --> 14:20.370
命令就是那个

14:20.370 --> 14:22.370
Pager

14:22.370 --> 14:24.370
呃

14:24.370 --> 14:26.370
秀嘛,显示

14:26.370 --> 14:28.370
或者是测试嘛,Test

14:28.370 --> 14:30.370
Pager

14:30.370 --> 14:32.370
测试Pager这个组件

14:32.370 --> 14:34.370
大写吧

14:34.370 --> 14:36.370
好,那么这样子呢

14:36.370 --> 14:38.370
我这里就把刚才的命令呢

14:38.370 --> 14:40.370
给它写一遍

14:40.370 --> 14:42.370
复杂吗,不复杂吧

14:42.370 --> 14:44.370
对吧

14:44.370 --> 14:46.370
好,那么之后呢,要去测试什么

14:46.370 --> 14:48.370
Urbata,你是不是可以在这里去写

14:48.370 --> 14:52.190
测试Urbata

14:52.190 --> 14:54.190
那么这个地方,呃,这里呢

14:54.190 --> 15:00.320
Urbata

15:00.320 --> 15:02.320
呃,然后呢,下边再去测试这个

15:02.320 --> 15:04.320
这个icon

15:04.320 --> 15:06.320
对吧

15:06.320 --> 15:08.320
然后这里呢,我们去测试一下啊

15:08.320 --> 15:10.320
icon

15:10.320 --> 15:12.320
是不是可以了

15:12.320 --> 15:14.320
对不对,咱们呢,接下来的

15:14.320 --> 15:16.320
你们下来的事情啊,把这两个组件

15:16.320 --> 15:18.320
研了这种方式,把它写好

15:18.320 --> 15:20.320
那么之后呢,测试组件呢,就会

15:20.320 --> 15:22.320
测试了

15:22.320 --> 15:24.320
我这节课呢,就想说这个东西

15:24.320 --> 15:26.320
因为将来的组件会越来越多

15:26.320 --> 15:28.320
到时候呢,测试起来会不太方便

15:28.320 --> 15:30.320
会删除以前的测试代码

15:30.320 --> 15:32.320
我们尽早呢,把这个事情先做了

15:32.320 --> 15:34.320
好,都是这节课的内容啊

15:34.320 --> 15:36.320
等一下,等一下,等一下

15:36.320 --> 15:38.320
刚才有点讲错了啊,我把它

15:38.320 --> 15:40.320
更改一下

15:40.320 --> 15:42.320
一个spot.json 这里

15:42.320 --> 15:44.320
我刚才之前这里写错了对吧

15:44.320 --> 15:46.320
全部写到pager 里面去了啊

15:46.320 --> 15:48.320
把这个路径改一下

15:48.320 --> 15:50.320
另外呢,是在这个mysite 里边呢

15:50.320 --> 15:52.320
我

15:52.320 --> 15:54.320
给大家演示一下,怎么去运行这个迷离

15:54.320 --> 15:56.320
运行方式是一样的

15:56.320 --> 15:58.320
NPM 装Test

15:58.320 --> 16:00.320
比方说,我们运行这个

16:00.320 --> 16:02.320
icon吧,我刚才已经写好了啊

16:02.320 --> 16:04.320
icon,运行一下

16:04.320 --> 16:08.530
测试一下这个icon

16:08.530 --> 16:10.530
就这样运行就完事了

16:10.530 --> 16:12.530
打开,就测试出来了

16:12.530 --> 16:14.530
那顺便我就说一下吧

16:14.530 --> 16:16.530
这个icon呢,我是单独处理的一下

16:16.530 --> 16:18.530
因为测试的时候呢

16:18.530 --> 16:20.530
我想把所有的icon

16:20.530 --> 16:22.530
来进行测试啊,我就是

16:22.530 --> 16:24.530
单独说一下这个icon

16:24.530 --> 16:26.530
icon 这里呢,我把这个东西导出了

16:26.530 --> 16:28.530
我导出了一个

16:28.530 --> 16:30.530
用了一个具名导出

16:30.530 --> 16:32.530
导出一个名字为Test

16:32.530 --> 16:34.530
的数据,这数据是什么呢

16:34.530 --> 16:36.530
就是这个对象,还记得吗

16:36.530 --> 16:38.530
当时写icon的时候,对象里面所有的

16:38.530 --> 16:40.530
keyz 就是我们

16:40.530 --> 16:42.530
图标有可能出现的类型

16:42.530 --> 16:44.530
全部导出了

16:44.530 --> 16:46.530
那么这边呢,我们Test 的时候呢

16:46.530 --> 16:48.530
就可以用一下,把Types 全部导出进来

16:48.530 --> 16:50.530
诸设一下组件

16:50.530 --> 16:52.530
然后呢,把这个Types

16:52.530 --> 16:54.530
作为我们的数据

16:54.530 --> 16:56.530
然后导出

16:56.530 --> 16:58.530
看到没,就这样子写一下

16:58.530 --> 17:00.530
那么这样子呢,我们这个是不是一个数组啊

17:00.530 --> 17:02.530
是不是所有的icon内形啊

17:02.530 --> 17:04.530
一个字不算的数组

17:04.530 --> 17:06.530
然后呢,我就循环,这里得循环这个数组

17:06.530 --> 17:08.530
然后呢,每一循环一次呢

17:08.530 --> 17:10.530
生成一个icon

17:10.530 --> 17:12.530
然后呢,把这个内形写到这儿

17:12.530 --> 17:14.530
把内形呢,也传给这个组件

17:14.530 --> 17:16.530
最后呢,我稍微设置一下样式

17:16.530 --> 17:18.530
可以自己去看一下

17:18.530 --> 17:20.530
最后就是这样的效果

17:20.530 --> 17:22.530
就是简单测试一下,其他没啥

17:22.530 --> 17:24.530
把这个地方补充一下

