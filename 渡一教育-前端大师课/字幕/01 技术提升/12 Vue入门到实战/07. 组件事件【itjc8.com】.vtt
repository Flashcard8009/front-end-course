WEBVTT

00:00.110 --> 00:03.710
这些可能咱们来做一个极其重要的组建

00:03.710 --> 00:07.010
是每一个开发者都必须要会做的这个组建

00:07.010 --> 00:08.810
就是分业组建

00:08.810 --> 00:10.010
就这么个样子

00:10.010 --> 00:13.310
因为不同的网站和分业样式可能不一样

00:13.310 --> 00:15.710
咱们网站分业样式就这样子

00:15.710 --> 00:19.410
然后我们的页面上也其实就在这个地方

00:19.410 --> 00:20.810
在文章这里

00:20.810 --> 00:22.910
在这里

00:22.910 --> 00:24.510
我们往下拉

00:24.510 --> 00:26.410
你看文章下面不就一个分业吗

00:26.410 --> 00:28.610
就这个组建 把组成个组建

00:29.010 --> 00:32.610
当然这个组建还是具有一定的通用性的

00:32.610 --> 00:34.310
就是比较有些

00:34.310 --> 00:36.710
以后的时候我们评论 评论数量多了

00:36.710 --> 00:37.910
所以也有可能会分业

00:37.910 --> 00:39.210
所以它具有通用性

00:39.210 --> 00:40.810
也是个通用组建

00:40.810 --> 00:42.110
那么在做这个组建过程中

00:42.110 --> 00:48.010
我们可能会遇到一些新的知识点

00:48.010 --> 00:50.410
比较这些可能我们会学到好几个新的知识点

00:50.410 --> 00:51.510
都极其的重要

00:51.510 --> 00:53.410
有了这几个知识点过后

00:53.410 --> 00:57.010
后边我们就会做大量的组建练习

00:57.110 --> 01:00.410
很多组建需要同学们自己去把它完成

01:00.410 --> 01:02.210
我会把文档给你写好

01:02.210 --> 01:03.810
然后有些地方不太清楚的话

01:03.810 --> 01:05.810
我给你大概过一下

01:05.810 --> 01:07.510
这几个很关键

01:07.510 --> 01:08.810
大家仔细听

01:08.810 --> 01:11.110
课程内容可能稍微有一点长

01:11.110 --> 01:12.710
因为分业组建的本身

01:12.710 --> 01:15.110
它的逻辑就需要好好地梳理一下

01:15.110 --> 01:17.410
然后这里边还会有一些新的知识

01:17.410 --> 01:18.610
大家认真听

01:18.610 --> 01:19.510
这几个听完了之后

01:19.510 --> 01:23.310
咱们的组建最核心最核心的部分就结束了

01:23.310 --> 01:25.510
好 咱们来看一下分业组建

01:27.110 --> 01:29.910
首先我们在我们的component里边

01:31.010 --> 01:31.810
新建一个组建

01:31.810 --> 01:32.910
又多了一个组建了

01:32.910 --> 01:35.510
pager 这些以前的组建一定要跟着做

01:36.310 --> 01:37.510
一定要跟着做

01:37.510 --> 01:41.710
然后我们这里写上一个组建的基本格式

01:41.710 --> 01:44.010
那么开发组建特别像这种复杂的组建

01:44.010 --> 01:46.410
稍微有点复杂的组建该怎么去开发呢

01:46.410 --> 01:48.510
每个人有不同的开发方式

01:48.510 --> 01:52.210
我这里我用我习惯的一种方式

01:52.210 --> 01:54.110
先写静态页面

01:54.110 --> 01:55.610
先把样式做好

01:55.610 --> 01:58.210
然后再去写动态内容

01:58.210 --> 01:59.110
懂了意思吧

01:59.110 --> 02:00.810
所以我个人习惯这种方式

02:00.810 --> 02:02.910
当然不同的人有不同的开发方式

02:02.910 --> 02:05.710
有些人可能习惯先写这个数据

02:05.710 --> 02:06.510
看自己习惯了

02:06.510 --> 02:08.410
其实我有的时候也会先写数据

02:08.410 --> 02:09.510
那么这里比方说

02:09.510 --> 02:10.910
我就先写什么呢

02:10.910 --> 02:12.510
先写我们的静态页面

02:12.510 --> 02:14.910
静态页面我们首先写个div

02:14.910 --> 02:16.110
那么div的样式

02:16.110 --> 02:17.610
我这里顺便说一下

02:17.610 --> 02:18.810
慢慢来一点点来

02:18.810 --> 02:21.310
这里边涉及到很多很多的一些细节

02:22.810 --> 02:24.310
首先我们要做一个组建的时候

02:24.310 --> 02:25.510
它不是有个根结点吗

02:25.510 --> 02:25.710
对吧

02:25.710 --> 02:27.010
我们说过任何一个组建

02:27.010 --> 02:28.510
它是一个虚的动物树

02:28.510 --> 02:29.710
那么虚的动物树

02:29.710 --> 02:30.910
肯定有个根结点

02:30.910 --> 02:31.610
那么根结点

02:31.610 --> 02:33.710
我们一般来说就是个div

02:33.710 --> 02:35.710
那么这个div的那样式

02:35.710 --> 02:37.110
其实还有一个细节

02:37.110 --> 02:38.510
我上几课忘说了

02:40.510 --> 02:41.910
这个细节是咋呢

02:41.910 --> 02:44.210
就是它的那样式秘密

02:44.210 --> 02:45.310
一般来说

02:45.310 --> 02:47.610
我们秘密为组建的名称

02:47.610 --> 02:48.510
陪圈

02:48.510 --> 02:50.310
加上一个短横线秘密法

02:50.310 --> 02:51.810
加上一个container

02:51.810 --> 02:53.310
为什么要这样的秘密呢

02:53.310 --> 02:54.710
因为这样子秘密过后

02:54.710 --> 02:57.410
它的副组建是不是非常能够

02:57.410 --> 02:59.310
非常好的预测

02:59.310 --> 03:02.010
它的根元素的类名

03:02.010 --> 03:04.310
为什么要这样做啊

03:04.310 --> 03:06.710
还记得我们上一节课说的吗

03:06.710 --> 03:08.810
作用预样式

03:08.810 --> 03:11.310
比方说我的副组建是这个app

03:11.310 --> 03:14.010
我有可能会去影响

03:14.010 --> 03:15.610
纸组建的根元素

03:15.610 --> 03:15.810
对吧

03:15.810 --> 03:16.910
比方说我选中a

03:16.910 --> 03:18.610
实际上不仅选中了自己的a

03:18.610 --> 03:20.410
还选中了纸元素的

03:20.410 --> 03:22.310
根元素的类样式a

03:23.310 --> 03:24.110
那么有的时候

03:24.110 --> 03:26.010
我们可能会希望在副组建里面

03:26.010 --> 03:28.210
去影响纸组建的根元素

03:28.210 --> 03:29.310
那如果说我忘了

03:29.310 --> 03:30.810
比方说我这里写个纸组建

03:30.810 --> 03:32.710
纸组建的名称叫做comp

03:32.710 --> 03:35.210
它的根元素的类样式是a

03:35.210 --> 03:37.010
但是我在写副组建的时候

03:37.010 --> 03:38.210
你想象这个道理

03:38.210 --> 03:39.810
我现在不要看这边

03:39.810 --> 03:41.210
就看我们的副组建

03:41.210 --> 03:42.810
我在写这一块的时候

03:42.810 --> 03:45.210
你能看出来它的纸组建

03:45.210 --> 03:47.010
根元素的类样式吗

03:47.010 --> 03:48.210
是不是看不出来啊

03:48.210 --> 03:49.610
一下就看不出来

03:49.610 --> 03:50.910
那么如果说我这里想影响

03:50.910 --> 03:52.310
纸组建的根元素

03:52.310 --> 03:53.910
我都不知道纸组建的根元素的

03:53.910 --> 03:55.010
类样式是啥

03:55.010 --> 03:57.010
我是不是要跑到代码里边去看一下

03:57.010 --> 03:58.510
所以就有点浪费时间了

03:58.510 --> 04:00.810
因此我们这里需要做一个处理

04:00.810 --> 04:03.510
就是什么处理呢

04:03.510 --> 04:05.110
对纸组建的根元素

04:05.110 --> 04:07.510
我们用一个统一的命名方式

04:07.510 --> 04:10.010
就是组建名字加上一个container

04:10.010 --> 04:10.810
那么只如果说

04:10.810 --> 04:12.310
都用这种方式来命名的话

04:12.310 --> 04:12.910
你看这里

04:12.910 --> 04:13.910
是不是一下就猜到了

04:13.910 --> 04:15.810
这个纸组建的名字就是comp

04:15.810 --> 04:17.810
衡杠container

04:17.810 --> 04:18.510
对吧

04:18.610 --> 04:20.010
就起这么一个作用啊

04:20.010 --> 04:23.810
方便副组建来影响它的类样式的

04:23.810 --> 04:26.410
这是一个规范性的邪法

04:26.410 --> 04:27.310
当然不同的公司

04:27.310 --> 04:29.010
可能有不同的规范

04:29.010 --> 04:30.710
有些公司可能就没有规范

04:30.710 --> 04:32.010
我这里告诉你

04:32.010 --> 04:35.810
最好是有一个这么一个规范好一点

04:35.810 --> 04:37.310
那么这里我们就这样命名

04:37.310 --> 04:40.210
顺便我就把之前的一些也改动一下

04:40.210 --> 04:41.610
之前我们这里的写的是

04:41.610 --> 04:42.710
Evatar imigrate

04:42.710 --> 04:43.710
因为之前我们学习的时候

04:43.710 --> 04:45.010
还没有讲这个东西

04:45.010 --> 04:46.510
所以我们等随便命名的

04:46.510 --> 04:48.510
我们这里把它改成container

04:48.510 --> 04:52.260
Evatar container

04:52.260 --> 04:53.960
当然每个公司有不同的

04:53.960 --> 04:54.960
有自己的规范

04:54.960 --> 04:56.060
那么这个icon

04:56.060 --> 04:57.260
我们也把它改成

04:57.260 --> 04:58.660
因为这个icon放车里不能改

04:58.660 --> 05:00.660
因为是说那个

05:00.660 --> 05:02.660
是这个CSS里面要用到的样式

05:02.660 --> 05:03.960
所以说给它加一个吧

05:03.960 --> 05:05.960
加一个icon放

05:05.960 --> 05:06.360
对不对

05:06.360 --> 05:09.360
icon container

05:09.360 --> 05:10.860
加上这么一个样式

05:10.860 --> 05:12.160
没了这意思吧

05:12.160 --> 05:13.460
就是起这么一个作用

05:13.460 --> 05:14.760
有个标准的命名法

05:14.760 --> 05:16.260
那么这个配件我们也一样

05:16.260 --> 05:17.260
加上一个配件container

05:17.260 --> 05:19.260
接下来来写这个静态鞋面

05:19.260 --> 05:21.260
我们一边做一边看效果

05:21.260 --> 05:22.260
在f组件里边

05:22.260 --> 05:23.760
我们现在就不要这个玩意了

05:23.760 --> 05:24.760
没什么用了

05:24.760 --> 05:26.260
导入这个pager

05:26.260 --> 05:30.020
做一个组件的时候就慢慢去测试

05:30.020 --> 05:33.020
这边我们是有这么一个组件

05:33.020 --> 05:35.850
叫pager

05:35.850 --> 05:36.850
有什么属性呢

05:36.850 --> 05:37.850
先不管

05:37.850 --> 05:39.850
我们先把个内静态样式做出来

05:39.850 --> 05:41.850
一边写一边看

05:41.850 --> 05:43.350
pager里边我们这里

05:43.350 --> 05:44.850
实际上我们看页面上

05:44.850 --> 05:46.850
这边是有很多类指源数

05:46.850 --> 05:47.350
对吧

05:47.350 --> 05:48.350
那么每一个指源数

05:48.350 --> 05:50.350
我们其实可以非常简单的

05:50.350 --> 05:52.350
认为它是一个A元数

05:52.350 --> 05:53.350
可不可以

05:53.350 --> 05:54.350
当然可以

05:54.350 --> 05:56.350
我们认为它里边有一些A元数

05:56.350 --> 05:57.350
这个A元数

05:57.350 --> 05:59.350
第一个A元数就是上椅

05:59.350 --> 06:01.350
上椅

06:01.350 --> 06:03.350
上椅就是这样的写法

06:03.350 --> 06:04.350
一个竖线

06:04.350 --> 06:05.350
两个

06:05.350 --> 06:07.350
我们用实体制服吧

06:07.350 --> 06:08.350
LT

06:08.350 --> 06:09.350
LT

06:09.350 --> 06:09.850
对吧

06:09.850 --> 06:11.350
这是首页

06:11.350 --> 06:12.350
这是首页

06:12.350 --> 06:13.350
这是上椅

06:13.350 --> 06:14.350
好

06:14.350 --> 06:15.350
咱们看一下

06:15.350 --> 06:17.350
首页上椅出来了

06:17.350 --> 06:18.350
对吧

06:18.350 --> 06:19.850
然后有些数字

06:19.850 --> 06:21.850
我们这里写个A元数

06:21.850 --> 06:22.850
数字成一

06:22.850 --> 06:23.850
多少呢

06:23.850 --> 06:24.850
成一个10吗

06:24.850 --> 06:26.850
有10个数字

06:26.850 --> 06:29.850
这样子写

06:30.850 --> 06:32.850
它还生成不出来

06:32.850 --> 06:34.850
10

06:34.850 --> 06:35.850
你看

06:35.850 --> 06:37.850
Visker老师有这样的问题

06:37.850 --> 06:38.850
我不知道这个问题

06:38.850 --> 06:39.850
这么难解决吗

06:39.850 --> 06:41.850
一直没有解决

06:41.850 --> 06:43.850
我就随便写一个吧

06:43.850 --> 06:44.850
就随便写一个数字

06:44.850 --> 06:45.850
比方说

06:45.850 --> 06:46.850
下写反正是静态的

06:46.850 --> 06:48.850
我们到时候会改的

06:48.850 --> 06:49.850
随便下写几个

06:49.850 --> 06:51.850
然后后面是两个

06:51.850 --> 06:53.850
尾叶和下叶

06:53.850 --> 06:54.850
对吧

06:54.850 --> 06:55.850
RT

06:56.850 --> 06:58.850
GT

06:59.850 --> 07:00.850
这边是

07:03.420 --> 07:04.420
这是下叶

07:04.420 --> 07:05.420
这是尾叶

07:05.420 --> 07:06.420
这书线

07:06.420 --> 07:07.420
OK

07:07.420 --> 07:08.420
好了

07:08.420 --> 07:09.420
大家就出来了

07:09.420 --> 07:10.420
就随便下写几个

07:10.420 --> 07:12.420
接下来我们来做一下样式

07:12.420 --> 07:13.420
先把样式

07:13.420 --> 07:14.420
这个冬天刚弄好

07:14.420 --> 07:16.420
首先我们可以看到

07:16.420 --> 07:17.420
A元数

07:17.420 --> 07:19.420
它是一个浏览器的默认样式

07:19.420 --> 07:21.420
这个显然是不太合适的

07:21.420 --> 07:22.420
因此我们

07:22.420 --> 07:23.420
往往会

07:23.420 --> 07:24.420
我们做一个网站

07:24.420 --> 07:25.420
往往会去掉

07:25.420 --> 07:27.420
一些浏览器的默认样式

07:27.420 --> 07:28.420
那么我们可以用什么

07:28.420 --> 07:29.420
Reset CSS

07:29.420 --> 07:30.420
对不对

07:30.420 --> 07:31.420
网上都有

07:31.420 --> 07:32.420
有各种样的Reset CSS

07:32.420 --> 07:34.420
或者是Normalize CSS

07:34.420 --> 07:36.420
总之去掉浏览器的默认样式

07:36.420 --> 07:37.420
但是我这个网站里边

07:37.420 --> 07:38.420
没有太多的

07:38.420 --> 07:40.420
需要去掉的默认样式

07:40.420 --> 07:41.420
所以说我难得去用

07:41.420 --> 07:42.420
第三方的

07:42.420 --> 07:43.420
我自己写呗

07:43.420 --> 07:44.420
也就是说说啥意思呢

07:44.420 --> 07:46.420
我现在要使用一个

07:46.420 --> 07:47.420
全局样式

07:47.420 --> 07:48.420
你看

07:48.420 --> 07:49.420
我们第一个知识点出现了

07:49.420 --> 07:51.420
使用全局样式

07:51.420 --> 07:52.420
那么在5u里边

07:52.420 --> 07:55.790
怎么去使用全局样式呢

07:55.790 --> 07:57.790
就是文件的

07:57.790 --> 08:00.790
MediaJS就是我们的启动代了

08:00.790 --> 08:02.790
你们学过Webpack

08:02.790 --> 08:03.790
在Webpack里面导入的样式

08:03.790 --> 08:04.790
怎么导入的

08:04.790 --> 08:06.790
是不是就是一个Import

08:06.790 --> 08:07.790
什么什么什么

08:07.790 --> 08:09.790
点CSS对吧

08:09.790 --> 08:10.790
啥啥点CSS

08:10.790 --> 08:11.790
去导入就完事了

08:11.790 --> 08:12.790
对不对

08:12.790 --> 08:13.790
那么在5u里边

08:13.790 --> 08:15.790
它本身给你加了一些

08:15.790 --> 08:17.790
CSS浏览器

08:17.790 --> 08:18.790
所以说你还可以导入

08:18.790 --> 08:19.790
CSS文件

08:19.790 --> 08:20.790
都可以

08:20.790 --> 08:21.790
对不对

08:21.790 --> 08:22.790
看你自己喜欢

08:22.790 --> 08:23.790
那么我们这里

08:23.790 --> 08:24.790
为了在工程结构里边

08:24.790 --> 08:25.790
我们就可以在

08:25.790 --> 08:26.790
src目录下面

08:26.790 --> 08:29.790
新建的文件夹叫Styles

08:29.790 --> 08:30.790
叫我们的样式

08:30.790 --> 08:31.790
样式呢

08:31.790 --> 08:32.790
一些全局的样式

08:32.790 --> 08:33.790
我们就写到这

08:33.790 --> 08:34.790
好比方说

08:34.790 --> 08:35.790
我们这里新建一个文件

08:35.790 --> 08:37.790
叫做GlobalDir

08:37.790 --> 08:39.790
比方说Nest吧

08:39.790 --> 08:41.790
导入这么一个文件

08:41.790 --> 08:43.790
好导入这个文件的时候

08:43.790 --> 08:44.790
我们就怎么样呢

08:44.790 --> 08:46.790
我们在这里就会导入

08:46.790 --> 08:47.790
Styles

08:47.790 --> 08:49.790
GlobalDir

08:49.790 --> 08:50.790
可不可以

08:50.790 --> 08:51.790
当然可以

08:51.790 --> 08:52.790
我们在这里写一些

08:52.790 --> 08:53.790
全局样式

08:53.790 --> 08:54.790
比方说我们可以怎么写呢

08:54.790 --> 08:56.790
我们可以

08:56.790 --> 08:58.790
给这个A元数呢

08:58.790 --> 09:00.790
写上一个Tags

09:00.790 --> 09:02.790
Decoration

09:02.790 --> 09:05.790
Color 颜色就Inherit

09:05.790 --> 09:07.790
颜色就这样子

09:07.790 --> 09:08.790
好 你看一下

09:08.790 --> 09:09.790
是不是去掉了

09:09.790 --> 09:10.790
去掉默认样式了

09:10.790 --> 09:11.790
对吧

09:11.790 --> 09:13.790
非常简单吧

09:13.790 --> 09:14.790
好 其实呢

09:14.790 --> 09:15.790
我们仔细观察一下

09:15.790 --> 09:16.790
我们这写的时候

09:16.790 --> 09:17.790
多考虑一点

09:17.790 --> 09:18.790
像这种全局样式

09:18.790 --> 09:20.790
它肯定要影响整个网站的

09:20.790 --> 09:21.790
那么我们整个网站

09:21.790 --> 09:22.790
都是有这个样式

09:22.790 --> 09:23.790
至少大部分的A元数

09:23.790 --> 09:24.790
都是这个样式

09:24.790 --> 09:25.790
至少有这么两个样式

09:25.790 --> 09:26.790
所以说我把写到这儿

09:26.790 --> 09:28.790
写到全局

09:28.790 --> 09:29.790
而且我们会发现

09:29.790 --> 09:31.790
网站里边有很多的A元数

09:31.790 --> 09:32.790
像这种A元数

09:32.790 --> 09:34.790
你看 这是A元数吗

09:34.790 --> 09:36.790
像这种A元数

09:36.790 --> 09:38.790
包括了像

09:38.790 --> 09:40.790
这边的A元数你看

09:40.790 --> 09:41.790
它们都有一个

09:41.790 --> 09:42.790
共同的特点

09:42.790 --> 09:43.790
什么特点呢

09:43.790 --> 09:44.790
就是鼠标以上

09:44.790 --> 09:46.790
会变成一个

09:46.790 --> 09:47.790
连接的

09:47.790 --> 09:48.790
这么一个颜色

09:48.790 --> 09:50.790
会变一个颜色

09:50.790 --> 09:51.790
我们按照Nest的写法

09:51.790 --> 09:52.790
是不是可以这样的写

09:52.790 --> 09:53.790
Hover

09:53.790 --> 09:55.790
鼠标以上区的时候

09:55.790 --> 09:56.790
变一个颜色

09:56.790 --> 09:58.790
Color可以变一个颜色

09:58.790 --> 10:00.790
这个没问题吧

10:00.790 --> 10:02.790
那么变成什么颜色呢

10:02.790 --> 10:03.790
这里是不是又涉及到

10:03.790 --> 10:04.790
一个问题

10:04.790 --> 10:05.790
就是复用性

10:05.790 --> 10:06.790
如果说你把颜色

10:06.790 --> 10:07.790
写死到这儿

10:07.790 --> 10:08.790
比方说我们这里

10:08.790 --> 10:09.790
可以检查一下

10:09.790 --> 10:11.790
看一下我这个网站

10:11.790 --> 10:12.790
下面呢

10:12.790 --> 10:13.790
我这个网站

10:13.790 --> 10:15.790
里边A元数

10:15.790 --> 10:17.790
找LM

10:17.790 --> 10:19.790
找A元数

10:21.790 --> 10:22.790
A元数

10:22.790 --> 10:23.790
Hover

10:23.790 --> 10:24.790
鼠标以上区的时候

10:24.790 --> 10:25.790
变成什么颜色

10:25.790 --> 10:26.790
变这个颜色

10:26.790 --> 10:27.790
我们把颜色复制一下

10:27.790 --> 10:28.790
放过来

10:28.790 --> 10:29.790
行不行

10:29.790 --> 10:30.790
当然可以

10:30.790 --> 10:31.790
我们在这边看一下

10:31.790 --> 10:32.790
指上去

10:32.790 --> 10:33.790
颜色变了

10:33.790 --> 10:34.790
A元数的颜色都变了

10:34.790 --> 10:35.790
但是这样子写

10:35.790 --> 10:36.790
好不好呢

10:36.790 --> 10:37.790
实际上在工程画里边

10:37.790 --> 10:39.790
这样子写是不是很好的

10:39.790 --> 10:41.790
因为这个颜色

10:41.790 --> 10:42.790
你看这个颜色

10:42.790 --> 10:43.790
在别的地方

10:43.790 --> 10:45.790
也有可能会用

10:45.790 --> 10:46.790
因为我们一个

10:46.790 --> 10:47.790
网站里面的颜色

10:47.790 --> 10:49.790
不太可能会迁起百怪的

10:49.790 --> 10:50.790
这是一个基本的

10:50.790 --> 10:51.790
设计原则

10:51.790 --> 10:52.790
一般来说

10:52.790 --> 10:54.790
网站就那么几种颜色

10:54.790 --> 10:55.790
用过来

10:55.790 --> 10:56.790
用过去

10:56.790 --> 10:57.790
要么把这个颜色

10:57.790 --> 10:58.790
调淡一点

10:58.790 --> 10:59.790
要么把那个颜色调暗一点

10:59.790 --> 11:00.790
对不对

11:00.790 --> 11:01.790
如果说你这样子

11:01.790 --> 11:02.790
写死的话

11:02.790 --> 11:03.790
就可能会导致

11:03.790 --> 11:04.790
我们的整个网站的

11:04.790 --> 11:05.790
样子中

11:05.790 --> 11:06.790
到处都会出现

11:06.790 --> 11:07.790
这种写死的颜色

11:07.790 --> 11:08.790
如果说

11:08.790 --> 11:09.790
将来有一天

11:09.790 --> 11:10.790
我们的主题会变

11:10.790 --> 11:11.790
我们希望A元数

11:11.790 --> 11:12.790
如果说

11:12.790 --> 11:13.790
以前用过这个颜色的

11:13.790 --> 11:14.790
全部都要变

11:14.790 --> 11:15.790
是不是要出问题

11:15.790 --> 11:16.790
那么到处要去改

11:16.790 --> 11:17.790
感觉非常麻烦

11:17.790 --> 11:19.790
那怎么办呢

11:19.790 --> 11:20.790
我说了半天啥意思呢

11:20.790 --> 11:21.790
就是说

11:21.790 --> 11:22.790
你既然学过ness

11:22.790 --> 11:23.790
ness里面

11:23.790 --> 11:24.790
是不是可以用

11:24.790 --> 11:25.790
一些ness的变量了

11:25.790 --> 11:26.790
对不对

11:26.790 --> 11:27.790
所以说

11:27.790 --> 11:28.790
我们可以单独来

11:28.790 --> 11:29.790
建一个文件

11:29.790 --> 11:30.790
文件

11:30.790 --> 11:31.790
varness

11:31.790 --> 11:32.790
就这里面存的

11:32.790 --> 11:33.790
是什么呢

11:33.790 --> 11:34.790
存的就是ness变量

11:34.790 --> 11:35.790
主要是颜色变量

11:35.790 --> 11:36.790
我们可以用

11:36.790 --> 11:37.790
colors的一些都小

11:37.790 --> 11:38.790
比方说

11:38.790 --> 11:39.790
就变量

11:39.790 --> 11:40.790
ness变量

11:40.790 --> 11:41.790
那么我们这里

11:41.790 --> 11:42.790
已经在课件里边

11:42.790 --> 11:43.790
已经给大家准备好了

11:43.790 --> 11:44.790
一些ness变量

11:44.790 --> 11:45.790
复制一下

11:45.790 --> 11:46.790
粘过来

11:46.790 --> 11:48.790
你这里没有必要去自己去

11:48.790 --> 11:50.790
就知道什么意思就行了

11:50.790 --> 11:51.790
比方说我定义了

11:51.790 --> 11:53.790
这么一些ness变量

11:53.790 --> 11:54.790
危险错误的颜色

11:54.790 --> 11:55.790
主色调

11:55.790 --> 11:57.790
链接颜色就用这个

11:57.790 --> 11:59.790
然后大部分文字的颜色

11:59.790 --> 12:01.790
也有些文字的颜色比较浅

12:01.790 --> 12:02.790
就可以用这个颜色

12:02.790 --> 12:04.790
就是我们定义了一些变量

12:04.790 --> 12:05.790
那么之后

12:05.790 --> 12:06.790
颜色是不是就可以使用

12:06.790 --> 12:07.790
这些变量了

12:07.790 --> 12:08.790
或者是对这些变量

12:08.790 --> 12:09.790
用一些ness寒数

12:09.790 --> 12:10.790
进行加深

12:10.790 --> 12:12.790
变透明等等都可以了

12:12.790 --> 12:13.790
明儿的意思

12:13.790 --> 12:14.790
好

12:14.790 --> 12:15.790
那么这边

12:15.790 --> 12:16.790
我们是不是可以使用变量

12:16.790 --> 12:17.790
怎么使用

12:17.790 --> 12:18.790
可以导入

12:18.790 --> 12:19.790
import

12:20.790 --> 12:21.790
写个

12:21.790 --> 12:22.790
var.ness

12:22.790 --> 12:23.790
那么这样子

12:23.790 --> 12:24.790
可以使用里边的变量了

12:24.790 --> 12:25.790
这里我们可以使用什么

12:25.790 --> 12:26.790
primary

12:26.790 --> 12:28.790
primary

12:28.790 --> 12:30.790
就是这个变量

12:30.790 --> 12:32.790
主色调

12:32.790 --> 12:33.790
链接颜色

12:33.790 --> 12:34.790
保存

12:34.790 --> 12:35.790
那么这样子的效果

12:35.790 --> 12:36.790
是完全一样的

12:36.790 --> 12:37.790
而且以后

12:37.790 --> 12:38.790
就会非常的好维护

12:38.790 --> 12:39.790
因为反而是要使用

12:39.790 --> 12:40.790
颜色的地方都可以使用

12:40.790 --> 12:41.790
这些颜色

12:41.790 --> 12:43.790
当一些特别特殊的地方了

12:43.790 --> 12:44.790
除外

12:44.790 --> 12:45.790
比如说我们将来有一天

12:45.790 --> 12:46.790
把这个颜色改了

12:46.790 --> 12:48.790
改成不露

12:48.790 --> 12:49.790
保存

12:49.790 --> 12:50.790
一改一个地方

12:50.790 --> 12:51.790
就可以把整个网站的

12:51.790 --> 12:52.790
所有用到这个颜色的地方

12:52.790 --> 12:53.790
全部改了

12:53.790 --> 12:54.790
不知道大家能不能看清楚

12:54.790 --> 12:56.790
就这么个意思

12:56.790 --> 12:57.790
好

12:57.790 --> 12:58.790
这就是我们这个

12:58.790 --> 12:59.790
工程结构

12:59.790 --> 13:00.790
央视这里

13:00.790 --> 13:01.790
全具央视这里

13:01.790 --> 13:02.790
包括我们提供了一些

13:02.790 --> 13:03.790
全具的一些ness变量

13:03.790 --> 13:04.790
方便后边使用

13:04.790 --> 13:05.790
没问题吧

13:05.790 --> 13:06.790
OK

13:06.790 --> 13:07.790
好

13:07.790 --> 13:08.790
把它写到这

13:08.790 --> 13:09.790
暂时写到

13:09.790 --> 13:10.790
弄到这

13:10.790 --> 13:11.790
好

13:11.790 --> 13:12.790
接下来

13:12.790 --> 13:13.790
我们有了全具央视的

13:13.790 --> 13:14.790
你看魅的监视里面

13:14.790 --> 13:16.790
是不是导致了全具央视

13:16.790 --> 13:17.790
全具央视的

13:17.790 --> 13:18.790
其实还有一些

13:18.790 --> 13:19.790
我把这个

13:19.790 --> 13:20.790
课件里面的

13:20.790 --> 13:21.790
global.ness

13:21.790 --> 13:22.790
打开

13:22.790 --> 13:23.790
其实还有一些

13:23.790 --> 13:24.790
像ATMAR

13:24.790 --> 13:25.790
保底这些央视

13:25.790 --> 13:26.790
我们把一起弄进来

13:26.790 --> 13:27.790
其实我们就把

13:27.790 --> 13:29.790
全部复制进来吧

13:29.790 --> 13:30.790
其实你能看懂

13:30.790 --> 13:31.790
对吧

13:31.790 --> 13:32.790
能看懂

13:32.790 --> 13:33.790
复制

13:33.790 --> 13:34.790
暂停过来

13:34.790 --> 13:36.790
就多加ATMAR

13:36.790 --> 13:37.790
看一下

13:37.790 --> 13:38.790
整个网页的

13:38.790 --> 13:39.790
字体颜色

13:39.790 --> 13:40.790
就是这个word

13:40.790 --> 13:41.790
然后设置了一下

13:41.790 --> 13:42.790
方子family

13:42.790 --> 13:43.790
然后来设置一下

13:43.790 --> 13:44.790
ofload.it

13:44.790 --> 13:45.790
设置了一下

13:45.790 --> 13:46.790
然后Body

13:46.790 --> 13:47.790
设置了一下

13:47.790 --> 13:50.790
没问题吧

13:50.790 --> 13:51.790
好

13:51.790 --> 13:52.790
写了好了之后

13:52.790 --> 13:53.790
我们现在

13:53.790 --> 13:54.790
再回到

13:54.790 --> 13:56.790
Pager里面

13:56.790 --> 13:57.790
那么A元素的央视

13:57.790 --> 13:58.790
把这个问题

13:58.790 --> 13:59.790
是不是解决了

13:59.790 --> 14:00.790
好

14:00.790 --> 14:01.790
接下来

14:01.790 --> 14:02.790
我们来设置一下

14:02.790 --> 14:03.790
这个央视

14:03.790 --> 14:04.790
它里面的特殊央视

14:04.790 --> 14:05.790
它里面有什么

14:05.790 --> 14:06.790
我们看这边

14:06.790 --> 14:07.790
我们可以发现

14:07.790 --> 14:09.790
它里面的就是

14:09.790 --> 14:11.790
整个Pager

14:11.790 --> 14:13.790
它里面的内容是局中的

14:13.790 --> 14:14.790
那么这个很好说

14:14.790 --> 14:15.790
对吧

14:15.790 --> 14:17.790
我们在style里边scout

14:17.790 --> 14:18.790
其实我们这里

14:18.790 --> 14:19.790
也可以用nest代码

14:19.790 --> 14:20.790
怎么写呢

14:20.790 --> 14:21.790
如果说你不加

14:21.790 --> 14:23.790
不写任何其他东西的话

14:23.790 --> 14:24.790
那么这里写的是什么呢

14:24.790 --> 14:26.790
CSS代码

14:26.790 --> 14:27.790
可以用posed css

14:27.790 --> 14:28.790
也可以使用

14:28.790 --> 14:29.790
CSS next的语法

14:29.790 --> 14:30.790
因为它里面

14:30.790 --> 14:31.790
内置了

14:31.790 --> 14:33.790
posed css

14:33.790 --> 14:34.790
但是我们这里

14:34.790 --> 14:36.790
如果说想使用nest代码

14:36.790 --> 14:37.790
我们可以加上一个num

14:37.790 --> 14:38.790
叫nungragy

14:38.790 --> 14:39.790
什么意思呢

14:39.790 --> 14:40.790
表示我这里的

14:40.790 --> 14:41.790
央视代码是什么呢

14:41.790 --> 14:42.790
是nest

14:42.790 --> 14:44.790
为了变运写

14:44.790 --> 14:45.790
这个静态内容

14:45.790 --> 14:46.790
我可以把这个央视

14:46.790 --> 14:47.790
放这

14:47.790 --> 14:48.790
这样子边写边看

14:48.790 --> 14:49.790
好一点

14:49.790 --> 14:50.790
好

14:50.790 --> 14:51.790
这个顺序无所谓

14:51.790 --> 14:52.790
没有要求的

14:52.790 --> 14:53.790
接下来我们一边写

14:53.790 --> 14:54.790
一边做一边写吧

14:54.790 --> 14:56.790
一个是pager container

14:56.790 --> 14:57.790
这里边

14:57.790 --> 14:58.790
我们首先把它

14:58.790 --> 15:00.790
变成一个gisplay flex吧

15:00.790 --> 15:01.790
然后呢

15:01.790 --> 15:03.790
一个gattice

15:03.790 --> 15:05.790
justify content center

15:05.790 --> 15:07.790
像我们这些课

15:07.790 --> 15:09.790
还给大家带大家

15:09.790 --> 15:10.790
写一下央视

15:10.790 --> 15:12.790
因为有一点点心知识

15:12.790 --> 15:13.790
这些课

15:13.790 --> 15:14.790
学完了过后

15:14.790 --> 15:15.790
我们后边就很少大家

15:15.790 --> 15:17.790
很少去写这个央视了

15:17.790 --> 15:18.790
你们自己去写

15:18.790 --> 15:19.790
你看

15:19.790 --> 15:20.790
边写边看吧

15:20.790 --> 15:21.790
现在局中了

15:21.790 --> 15:22.790
对吧

15:22.790 --> 15:23.790
然后再稍微

15:23.790 --> 15:24.790
给它一个

15:24.790 --> 15:25.790
上下的mortem吧

15:25.790 --> 15:27.790
不用去

15:27.790 --> 15:28.790
课语纠结

15:28.790 --> 15:29.790
一样式

15:29.790 --> 15:30.790
你们可以自行去控制

15:30.790 --> 15:31.790
我们这里20个相处

15:31.790 --> 15:32.790
上下mortem

15:32.790 --> 15:33.790
左右那为0

15:33.790 --> 15:34.790
对吧

15:34.790 --> 15:36.790
这就是个上下mortem

15:36.790 --> 15:37.790
然后呢

15:37.790 --> 15:38.790
这里边的a元数

15:38.790 --> 15:43.190
这里边的这些a元数

15:43.190 --> 15:44.190
里边的这些a元数呢

15:44.190 --> 15:45.190
我要

15:45.190 --> 15:46.190
因为我们看到这边

15:46.190 --> 15:48.190
a元数它并不是指上去

15:48.190 --> 15:49.190
是那个颜色

15:49.190 --> 15:50.190
一开始就是那个颜色

15:50.190 --> 15:51.190
那么很简单

15:51.190 --> 15:52.190
我们就可以直接

15:52.190 --> 15:53.190
设置这个a元数的

15:53.190 --> 15:54.190
颜色为什么呢

15:54.190 --> 15:55.190
primary

15:55.190 --> 15:56.190
可不可以

15:56.190 --> 15:57.190
当然可以

15:57.190 --> 15:58.190
我们之前不是定义过边量吗

15:58.190 --> 15:59.190
保存

15:59.190 --> 16:00.190
看一下

16:00.190 --> 16:01.190
就爆出了

16:01.190 --> 16:02.190
爆出的原因是

16:02.190 --> 16:03.190
primary不知道是啥

16:03.190 --> 16:04.190
意思

16:04.190 --> 16:05.190
undefend

16:05.190 --> 16:06.190
没有定义

16:06.190 --> 16:07.190
那么怎么定义呢

16:07.190 --> 16:08.190
其实很简单

16:08.190 --> 16:09.190
这里还是less代码

16:09.190 --> 16:10.190
因此我们可以在这里

16:10.190 --> 16:11.190
倒入

16:11.190 --> 16:12.190
倒入什么呢

16:12.190 --> 16:14.190
倒入这个styles里边的

16:14.190 --> 16:16.190
这个wildness

16:16.190 --> 16:17.190
对吧

16:17.190 --> 16:18.190
因为边量在这里边

16:18.190 --> 16:19.190
所以我们就倒入

16:19.190 --> 16:21.190
反而回上引擎目录

16:21.190 --> 16:23.190
然后styles

16:23.190 --> 16:24.190
wildness

16:24.190 --> 16:26.190
保存

16:26.190 --> 16:27.190
看一下

16:27.190 --> 16:28.190
是不是可以了

16:28.190 --> 16:29.190
非常简单

16:29.190 --> 16:30.190
并不复杂

16:30.190 --> 16:31.190
那么这里呢

16:31.190 --> 16:32.190
我顺便说一句

16:32.190 --> 16:33.190
就是有的时候

16:33.190 --> 16:34.190
你这个文件夹

16:34.190 --> 16:35.190
会越来越多

16:35.190 --> 16:36.190
有的时候

16:36.190 --> 16:37.190
可能会嵌涛一些层次

16:37.190 --> 16:39.190
会嵌涛的越来越多

16:39.190 --> 16:40.190
如果说你这样子写

16:40.190 --> 16:41.190
反回上个节目录

16:41.190 --> 16:42.190
现在倒是没事

16:42.190 --> 16:43.190
如果说你这里

16:43.190 --> 16:44.190
嵌涛一个文件夹

16:44.190 --> 16:45.190
别让它配角

16:45.190 --> 16:46.190
不在这个文件夹里边

16:46.190 --> 16:47.190
在它的指文件夹的

16:47.190 --> 16:48.190
指文件夹里边

16:48.190 --> 16:49.190
是不是要反回

16:49.190 --> 16:50.190
很多刺伤的节目录

16:50.190 --> 16:51.190
写写不方便

16:51.190 --> 16:52.190
因此

16:52.190 --> 16:54.190
这个vucity

16:54.190 --> 16:55.190
这个角色加工具呢

16:55.190 --> 16:56.190
它在vipike里边

16:56.190 --> 16:58.190
给你配置了这么一个

16:58.190 --> 17:00.190
一个特殊制服

17:00.190 --> 17:02.190
就是你在写央视的时候

17:02.190 --> 17:04.190
你可以用一个

17:04.190 --> 17:05.190
这个东西叫啥

17:05.190 --> 17:06.190
这个飘

17:06.190 --> 17:07.190
这个东西叫啥

17:07.190 --> 17:08.190
我也不知道叫啥

17:08.190 --> 17:10.190
反正就是这么一个玩意儿

17:10.190 --> 17:12.190
你们知道在哪吧

17:12.190 --> 17:13.190
你们知道

17:13.190 --> 17:14.190
应该知道

17:14.190 --> 17:15.190
就是esc下边的那个

17:15.190 --> 17:16.190
按sharp的键

17:16.190 --> 17:17.190
把打印出来

17:17.190 --> 17:19.190
然后了一个at

17:19.190 --> 17:21.190
这个玩意儿表示啥

17:21.190 --> 17:24.190
这个玩意儿就表示src目录

17:24.190 --> 17:25.190
明白了意思吧

17:25.190 --> 17:27.190
表示src目录

17:27.190 --> 17:29.190
当然这是个央视里边的写法

17:30.190 --> 17:31.190
央视里边的写法

17:31.190 --> 17:32.190
它的路径是这样写的

17:33.190 --> 17:34.190
好了

17:35.190 --> 17:37.190
另外我这就顺便说一下吧

17:37.190 --> 17:39.190
如果说你在这个脚本里边写

17:39.190 --> 17:40.190
写路径的话

17:40.190 --> 17:41.190
比如说我们这里import

17:41.190 --> 17:42.190
导入一个路径

17:42.190 --> 17:43.190
在脚本里边的写的话

17:43.190 --> 17:44.190
就不能使用这种写法了

17:44.190 --> 17:46.190
要使用这种写法

17:46.190 --> 17:47.190
这两个地方有区别

17:47.190 --> 17:48.190
一个是央视里边的

17:48.190 --> 17:49.190
是使用这种写法

17:49.190 --> 17:50.190
表示src目录

17:50.190 --> 17:51.190
在脚本里边的

17:51.190 --> 17:52.190
使用这个东西

17:52.190 --> 17:53.190
表示src目录

17:54.190 --> 17:56.190
好那么这里写好了

17:56.190 --> 17:57.190
那么现在呢

17:57.190 --> 17:58.190
看一下

17:59.190 --> 18:01.190
好接下来我们把这些A元

18:01.190 --> 18:02.190
分开一点

18:02.190 --> 18:03.190
给它加上一个margin

18:04.190 --> 18:05.190
加上一个margin

18:05.190 --> 18:07.190
或者是加上一个panning都想

18:07.190 --> 18:08.190
margin都加一点点吧

18:08.190 --> 18:09.190
我就加margin吧

18:09.190 --> 18:10.190
margin的话

18:10.190 --> 18:12.190
我们设置左右

18:13.190 --> 18:15.190
为6个相处

18:15.190 --> 18:16.190
上下为0

18:16.190 --> 18:17.190
对不对

18:18.190 --> 18:19.190
左右为6个相处

18:19.190 --> 18:20.190
0

18:20.190 --> 18:21.190
上下为0左右为6个相处

18:22.190 --> 18:23.190
是不是隔开了一点

18:24.190 --> 18:25.190
没什么复杂的吧

18:26.190 --> 18:27.190
非常简单

18:27.190 --> 18:28.190
隔开了一点

18:29.190 --> 18:30.190
那么这里边还有什么样式

18:30.190 --> 18:31.190
其实还有一些样式

18:31.190 --> 18:33.190
比方像这个样式

18:34.190 --> 18:35.190
属标样式没什么好说的

18:35.190 --> 18:37.190
属标样式就是这样子

18:38.190 --> 18:39.190
还有一个这个样式

18:40.190 --> 18:41.190
这个样式是什么

18:41.190 --> 18:43.190
就是它不可用的时候的样式

18:43.190 --> 18:44.190
那么我们这里

18:44.190 --> 18:45.190
给它加上一个

18:46.190 --> 18:48.190
比方说这个不可用

18:48.190 --> 18:49.190
class

18:49.190 --> 18:51.190
给它加上一个disabled

18:52.190 --> 18:53.190
disabled

18:57.550 --> 18:58.550
那么这里A元说

18:58.550 --> 18:59.550
有可能会带一个样式

18:59.550 --> 19:00.550
一个样式就是disabled

19:00.550 --> 19:02.550
那么如果说这种样式的话

19:02.550 --> 19:03.550
我们首先把这个

19:06.550 --> 19:07.550
color

19:07.550 --> 19:08.550
颜色该改为什么了

19:08.550 --> 19:10.550
改为我们之前有个定义的颜色

19:11.550 --> 19:12.550
看一下

19:12.550 --> 19:14.550
改成改成哪个颜色

19:14.550 --> 19:15.550
选一个呗

19:16.550 --> 19:17.550
这个nice words吧

19:17.550 --> 19:18.550
改成这个

19:18.550 --> 19:20.550
nice words

19:21.550 --> 19:22.550
保存

19:24.550 --> 19:27.570
写错了吗

19:27.570 --> 19:28.570
看一下

19:29.570 --> 19:30.570
nice words

19:31.570 --> 19:32.570
保存

19:33.570 --> 19:34.570
这边来看

19:34.570 --> 19:35.570
那么是不是一个nice words

19:36.570 --> 19:38.570
然后我们把属标样式给它改一下

19:38.570 --> 19:39.570
cursor

19:39.570 --> 19:41.570
改成not allowed

19:41.570 --> 19:45.330
它只是改了个样式

19:45.330 --> 19:46.330
这是这个样式

19:46.330 --> 19:48.330
加上一个disabled就行了

19:48.330 --> 19:50.330
还有什么样式呢

19:51.330 --> 19:52.330
还有什么呢

19:52.330 --> 19:53.330
还有一个样式就是

19:53.330 --> 19:54.330
当前页

19:54.330 --> 19:56.330
比方说现在当前页是第1页

19:56.330 --> 19:57.330
第1页的样式

19:57.330 --> 19:59.330
明显是不太一样的

19:59.330 --> 20:00.330
所以我们这里

20:00.330 --> 20:01.330
找到

20:02.330 --> 20:03.330
找到

20:03.330 --> 20:04.330
加个样式

20:06.330 --> 20:07.330
叫active

20:08.330 --> 20:09.330
这么一个样式

20:09.330 --> 20:11.330
比方说我们把这个玩意

20:11.330 --> 20:12.330
第二个

20:12.330 --> 20:13.330
加上class

20:13.330 --> 20:14.330
active

20:16.330 --> 20:17.330
那么这个样式呢

20:17.330 --> 20:19.330
我们把颜色改一下

20:19.330 --> 20:20.330
改成什么了

20:20.330 --> 20:21.330
改成黑色

20:21.330 --> 20:23.330
那么我们就可以改成words吧

20:23.330 --> 20:24.330
words

20:24.330 --> 20:25.330
然后把它自己加出一下

20:25.330 --> 20:26.330
放出weight

20:27.330 --> 20:28.330
保存

20:28.330 --> 20:29.330
你看这边

20:30.330 --> 20:32.330
就当前页的样式

20:32.330 --> 20:33.330
然后再把属标改一下

20:33.330 --> 20:34.330
cursor

20:34.330 --> 20:37.330
cursor把它改成text

20:38.330 --> 20:39.330
保存

20:39.330 --> 20:40.330
你看

20:40.330 --> 20:41.330
变成这样子了

20:42.330 --> 20:43.330
好

20:43.330 --> 20:44.330
那么现在就写好了

20:44.330 --> 20:45.330
我们的样式

20:45.330 --> 20:46.330
静态的一种就写好了

20:46.330 --> 20:47.330
这是我比较

20:47.330 --> 20:49.330
习惯的常用的一种写法

20:49.330 --> 20:51.330
先把这个样式写出来

20:51.330 --> 20:52.330
接下来

20:52.330 --> 20:53.330
我们就第1个支持点就完了

20:53.330 --> 20:54.330
全局样式这一块

20:54.330 --> 20:55.330
很简单

20:55.330 --> 20:57.330
接下来有些支持点

20:57.330 --> 20:58.330
就是说我这个

20:58.330 --> 20:59.330
这个组件啊

21:00.330 --> 21:01.330
需要

21:01.330 --> 21:02.330
因为我们做组件的时候

21:02.330 --> 21:03.330
最重要的一个点就是

21:03.330 --> 21:05.330
这个组件需要得到什么样的属性呢

21:05.330 --> 21:07.330
就需要你还使用他的时候

21:07.330 --> 21:08.330
你在app里边去使用他

21:08.330 --> 21:10.330
有可能在别的组件使用他都有可能

21:10.330 --> 21:12.330
他也不知道在哪里使用

21:13.330 --> 21:14.330
我要宣扰这个组件

21:14.330 --> 21:15.330
我需要得到什么信息呢

21:15.330 --> 21:16.330
那么就是

21:16.330 --> 21:18.330
属键的属性

21:19.330 --> 21:20.330
有点类似于函数参数

21:20.330 --> 21:21.330
对吧

21:21.330 --> 21:22.330
组件属性

21:23.330 --> 21:24.330
那么这个组件属性呢

21:24.330 --> 21:25.330
是一开始在做组件之前

21:25.330 --> 21:26.330
就要设计好的

21:27.330 --> 21:28.330
如果说

21:28.330 --> 21:29.330
别人给你设计好了

21:29.330 --> 21:30.330
他可能会给你写个组件文档

21:30.330 --> 21:31.330
就是告诉你

21:31.330 --> 21:32.330
这个组件呢

21:32.330 --> 21:33.330
应该有哪些属性

21:33.330 --> 21:34.330
我方便我使用

21:35.330 --> 21:36.330
如果说你自己设计组件

21:36.330 --> 21:37.330
你自己心里边要想好

21:37.330 --> 21:39.330
最好能够把它写出来最好

21:39.330 --> 21:40.330
有些公司呢

21:40.330 --> 21:41.330
要求比较严格一点

21:41.330 --> 21:42.330
你每开发一个组件呢

21:42.330 --> 21:44.330
需要把组件文档写好

21:44.330 --> 21:45.330
那么文档的关键在于

21:45.330 --> 21:47.330
要把属性声明好

21:47.330 --> 21:48.330
那么我这里其实给大家

21:48.330 --> 21:49.330
已经声明了

21:49.330 --> 21:50.330
之后呢会给大家

21:50.330 --> 21:51.330
就这几颗之后呢

21:51.330 --> 21:53.330
我们陆陆续续呢会

21:53.330 --> 21:55.330
给大家留一些作业

21:55.330 --> 21:56.330
留作业的时候呢

21:56.330 --> 21:57.330
我就会这样

21:57.330 --> 21:58.330
以这样的方式

21:58.330 --> 21:59.330
然后这个组件

21:59.330 --> 22:00.330
有什么样的属性呢

22:00.330 --> 22:01.330
给你写个图

22:01.330 --> 22:02.330
然后把属性

22:02.330 --> 22:04.330
一个截图都算不错了

22:04.330 --> 22:05.330
以后明在公司里边

22:05.330 --> 22:06.330
哪有截图

22:06.330 --> 22:07.330
哪有截图

22:07.330 --> 22:08.330
就文字给你描述

22:08.330 --> 22:10.330
然后呢就告诉你

22:10.330 --> 22:11.330
哪些属性需要传递

22:11.330 --> 22:12.330
每个属性的内行

22:12.330 --> 22:13.330
含义

22:13.330 --> 22:14.330
是不是必填

22:14.330 --> 22:15.330
他的默认值是多少

22:15.330 --> 22:16.330
有没有默认值

22:16.330 --> 22:17.330
那么有了这些属性过后

22:17.330 --> 22:18.330
其实就

22:18.330 --> 22:19.330
非常方便了

22:19.330 --> 22:20.330
对吧

22:20.330 --> 22:21.330
那我们来声明一下

22:21.330 --> 22:22.330
一个个看呗

22:23.330 --> 22:24.330
陪教里边

22:25.330 --> 22:27.330
我们是不是要声明一些属性啊

22:27.330 --> 22:28.330
probs

22:28.330 --> 22:30.770
好

22:30.770 --> 22:31.770
属性里边

22:34.770 --> 22:35.770
属性里边有什么呢

22:35.770 --> 22:36.770
有current

22:36.770 --> 22:37.770
比较什么意思

22:37.770 --> 22:38.770
当前一码

22:38.770 --> 22:39.770
一看我要渲染这个

22:39.770 --> 22:40.770
pager组件

22:40.770 --> 22:42.770
是不是得知道当前一码是多少

22:42.770 --> 22:43.770
对吧

22:43.770 --> 22:44.770
这是个很关键的信息

22:44.770 --> 22:45.770
至少

22:45.770 --> 22:47.770
当前一码会影响

22:47.770 --> 22:49.770
我到底定哪个元素

22:49.770 --> 22:50.770
会设置这个active

22:50.770 --> 22:51.770
对吧

22:51.770 --> 22:52.770
当前一码要告诉

22:52.770 --> 22:53.770
叫current

22:53.770 --> 22:54.770
当一个组件

22:54.770 --> 22:55.770
属性名字呢

22:55.770 --> 22:56.770
你可以自己定义

22:56.770 --> 22:58.770
然后约定好就行了

22:58.770 --> 22:59.770
内想的是什么呢

22:59.770 --> 23:00.770
number

23:01.770 --> 23:02.770
一看

23:02.770 --> 23:03.770
是不是必前啊

23:03.770 --> 23:04.770
不用必前

23:04.770 --> 23:05.770
默认值是多少呢

23:05.770 --> 23:06.770
default

23:06.770 --> 23:07.770
默认值是1

23:07.770 --> 23:08.770
默认为第一

23:08.770 --> 23:09.770
好

23:09.770 --> 23:10.770
然后第二个

23:10.770 --> 23:11.770
toto

23:11.770 --> 23:12.770
toto是什么呢

23:12.770 --> 23:13.770
总的数据量

23:13.770 --> 23:14.770
什么意思呢

23:14.770 --> 23:15.770
就是说

23:15.770 --> 23:16.770
分业组件

23:16.770 --> 23:17.770
我一共有多少数据

23:17.770 --> 23:18.770
一共有一万条数据

23:18.770 --> 23:19.770
我怎么去分业

23:19.770 --> 23:20.770
就这么个意思

23:20.770 --> 23:21.770
内想的是

23:21.770 --> 23:22.770
number

23:22.770 --> 23:23.770
默认值呢

23:23.770 --> 23:24.770
toto

23:24.770 --> 23:25.770
default

23:25.770 --> 23:26.770
默认值是0

23:26.770 --> 23:28.770
一开始是没有

23:28.770 --> 23:29.770
任何数据的

23:29.770 --> 23:30.770
效率传给我

23:30.770 --> 23:32.770
然后limit

23:33.770 --> 23:34.770
limit什么意思呢

23:34.770 --> 23:35.770
液容量

23:35.770 --> 23:36.770
这些都是分业的

23:36.770 --> 23:37.770
很关键的信息

23:37.770 --> 23:38.770
我相信你们之前

23:38.770 --> 23:39.770
在学习无忧之前

23:39.770 --> 23:41.770
应该做过分业吧

23:41.770 --> 23:42.770
default

23:42.770 --> 23:43.770
我在公开直播课

23:43.770 --> 23:44.770
至少讲了好多次的

23:44.770 --> 23:45.770
limit表示液容量

23:45.770 --> 23:47.770
液容量啥意思呢

23:47.770 --> 23:48.770
表示的是

23:48.770 --> 23:50.770
每页显示多少条数据

23:50.770 --> 23:51.770
对吧

23:51.770 --> 23:52.770
默认是10条

23:53.770 --> 23:54.770
再来啊

23:54.770 --> 23:56.770
最后一个verbal number

23:56.770 --> 23:57.770
啥意思啊

23:57.770 --> 23:58.770
叫做可见页码数

23:58.770 --> 23:59.770
我先写出来

23:59.770 --> 24:00.770
number

24:00.770 --> 24:01.770
我以前呢

24:01.770 --> 24:02.770
用的是panel number

24:02.770 --> 24:03.770
但是我觉得

24:03.770 --> 24:04.770
verbal number

24:04.770 --> 24:05.770
大家好理解一点啊

24:05.770 --> 24:06.770
default

24:06.770 --> 24:08.770
默认呢也是10

24:08.770 --> 24:09.770
这个是啥意思呢

24:09.770 --> 24:10.770
verbal number

24:10.770 --> 24:11.770
表示的是

24:11.770 --> 24:12.770
我这里可以看到的

24:12.770 --> 24:13.770
数字页码

24:13.770 --> 24:15.770
最多有多少个

24:15.770 --> 24:17.770
比方说你一共有一万

24:17.770 --> 24:18.770
我不可能

24:18.770 --> 24:19.770
把一万个数字

24:19.770 --> 24:20.770
显示到这吧

24:20.770 --> 24:21.770
只给你显示一个

24:21.770 --> 24:22.770
版面

24:22.770 --> 24:23.770
对吧

24:23.770 --> 24:24.770
那么最多可以显示

24:24.770 --> 24:25.770
多少个数字

24:25.770 --> 24:26.770
就这个意思

24:26.770 --> 24:27.770
verbal number

24:27.770 --> 24:29.770
是不是把属性证明完了

24:29.770 --> 24:31.770
有了这些属性过

24:31.770 --> 24:32.770
当然这里也可以传递啊

24:32.770 --> 24:33.770
比方说我这里

24:33.770 --> 24:34.770
不想用他的默认字

24:34.770 --> 24:35.770
我想自己传递

24:35.770 --> 24:36.770
可不可以呢可以

24:36.770 --> 24:37.770
但是你要注意啊

24:37.770 --> 24:38.770
这些都是数字属性

24:38.770 --> 24:39.770
你在怎么传递

24:39.770 --> 24:40.770
比方说当前是

24:40.770 --> 24:41.770
corrent

24:41.770 --> 24:42.770
当前是d20

24:42.770 --> 24:43.770
是不是可以

24:43.770 --> 24:44.770
要这样的传递

24:44.770 --> 24:45.770
我讲过的啊

24:45.770 --> 24:46.770
不再重复了

24:46.770 --> 24:47.770
那么现在我们就用默认字吧

24:47.770 --> 24:49.770
那么有了这些属性过后

24:49.770 --> 24:50.770
有什么问题

24:50.770 --> 24:52.770
我数据给力的

24:52.770 --> 24:54.770
你要怎么样

24:54.770 --> 24:56.770
把这个界面渲染出来

24:56.770 --> 24:58.770
我又做我又

24:58.770 --> 24:59.770
组建开发

24:59.770 --> 25:00.770
你始终记住

25:00.770 --> 25:03.770
就这么一点破事

25:03.770 --> 25:05.770
我的数据给力的

25:05.770 --> 25:06.770
那么根据数据的

25:06.770 --> 25:07.770
不同情况

25:07.770 --> 25:09.770
我的界面

25:09.770 --> 25:11.770
应该显示啥

25:11.770 --> 25:13.770
是不是有这么一个问题

25:13.770 --> 25:15.770
好那么接下来我们来看

25:15.770 --> 25:17.770
一个个看啊

25:17.770 --> 25:18.770
首先我们看

25:18.770 --> 25:19.770
要显示什么

25:19.770 --> 25:21.770
要显示首页

25:21.770 --> 25:23.770
是不是要显示首页

25:23.770 --> 25:25.770
显示内容是固定的

25:25.770 --> 25:26.770
但是这个A元数

25:26.770 --> 25:27.770
什么东西是动态的

25:27.770 --> 25:29.770
什么东西是不固定的

25:29.770 --> 25:30.770
想一想

25:30.770 --> 25:31.770
就看第一个

25:31.770 --> 25:32.770
一个个来嘛

25:32.770 --> 25:34.770
在交易组建怎么去开发

25:34.770 --> 25:35.770
就第一个A元数

25:35.770 --> 25:37.770
什么东西是不固定的

25:37.770 --> 25:39.770
说它的内容是不固定啊

25:39.770 --> 25:40.770
就这个玩意

25:40.770 --> 25:42.770
它有可能有这个

25:42.770 --> 25:45.770
有可能没有这个

25:45.770 --> 25:46.770
懂我意思吗

25:46.770 --> 25:49.770
它有可能有有可能没有

25:49.770 --> 25:50.770
是不是这个意思

25:50.770 --> 25:52.770
好那么我们这里呢

25:52.770 --> 25:54.770
什么情况下有

25:54.770 --> 25:57.770
什么情况下没有呢

25:57.770 --> 25:58.770
什么情况下有

25:58.770 --> 26:00.770
什么情况下没有呢

26:00.770 --> 26:01.770
那么这个情况

26:01.770 --> 26:02.770
是不是就是

26:02.770 --> 26:03.770
第一页的时候

26:03.770 --> 26:05.770
它就有这个内容式

26:05.770 --> 26:06.770
对不对

26:06.770 --> 26:08.770
否则大于

26:08.770 --> 26:10.770
就是当前不是第一页

26:10.770 --> 26:13.770
或者当前一马大于

26:13.770 --> 26:14.770
一的时候

26:14.770 --> 26:15.770
数就没有这个

26:15.770 --> 26:16.770
就没有这个内容式

26:16.770 --> 26:17.770
对吧

26:17.770 --> 26:19.770
这个能理解吗

26:19.770 --> 26:20.770
好

26:20.770 --> 26:21.770
如果说有这样子的理解

26:21.770 --> 26:23.770
如果说你有这样的理解的话

26:23.770 --> 26:24.770
那么这里的内容式

26:24.770 --> 26:25.770
是不是一定是动态的

26:25.770 --> 26:26.770
我们之前说过

26:26.770 --> 26:27.770
内容式的动态呢

26:27.770 --> 26:29.770
我们可以用一个制服串

26:29.770 --> 26:30.770
内容式这里啊

26:30.770 --> 26:31.770
还记得吗

26:31.770 --> 26:33.770
咱们的class

26:33.770 --> 26:34.770
vband

26:34.770 --> 26:35.770
class这里

26:35.770 --> 26:36.770
可以绑定一个制服串

26:36.770 --> 26:37.770
可以绑定一个对象

26:37.770 --> 26:38.770
那么现在我们看一下

26:38.770 --> 26:39.770
对象的绑定方式

26:39.770 --> 26:41.770
那么这里可以绑定为一个对象

26:41.770 --> 26:43.770
对象是咋意思呢

26:43.770 --> 26:44.770
就是说

26:44.770 --> 26:46.770
我有没有这个disable的属性呢

26:46.770 --> 26:47.770
取决于

26:47.770 --> 26:49.770
这个属性的

26:49.770 --> 26:51.770
只是q还是force

26:51.770 --> 26:53.770
你看我给它写个q

26:53.770 --> 26:55.770
写个q过后

26:55.770 --> 26:56.770
你看这边

26:56.770 --> 26:58.770
点击右键 点查

26:58.770 --> 26:59.770
你看

26:59.770 --> 27:02.770
这里是不是有一个class disabled

27:02.770 --> 27:03.770
很简单

27:03.770 --> 27:05.770
我要给它写个force呢

27:05.770 --> 27:07.770
它就没有这个内容式

27:07.770 --> 27:08.770
就这么简单

27:08.770 --> 27:09.770
你看没有

27:09.770 --> 27:11.770
这个东西主要是用来

27:11.770 --> 27:13.770
什么时候比较有用这个东西

27:13.770 --> 27:14.770
就是

27:14.770 --> 27:16.770
我到底有没有这个内容式的时候

27:16.770 --> 27:17.770
用这种语法

27:17.770 --> 27:18.770
用这种写法

27:18.770 --> 27:19.770
用对象式的写法

27:19.770 --> 27:20.770
比较有用

27:20.770 --> 27:21.770
当然如果说

27:21.770 --> 27:22.770
你要切换多个内容式的话

27:22.770 --> 27:23.770
那么你可以继续写

27:23.770 --> 27:24.770
其他的内容式

27:24.770 --> 27:25.770
到底是q还是force

27:25.770 --> 27:26.770
比方说这样子写

27:26.770 --> 27:27.770
那么它就没有这个内容式

27:27.770 --> 27:28.770
有这个内容式

27:28.770 --> 27:29.770
你看

27:29.770 --> 27:30.770
对吧

27:30.770 --> 27:32.770
那如果说你两个都是q呢

27:32.770 --> 27:34.770
它就有两个内容式

27:34.770 --> 27:35.770
看没

27:35.770 --> 27:36.770
就这么个意思

27:36.770 --> 27:37.770
非常简单

27:37.770 --> 27:39.770
那么这里到底是q还是force呢

27:39.770 --> 27:41.770
到底是q还是force呢

27:41.770 --> 27:42.770
是不是就取决于什么了

27:42.770 --> 27:44.770
当前的current

27:44.770 --> 27:45.770
当前页码

27:45.770 --> 27:48.770
是不是等于

27:48.770 --> 27:50.770
是不是等于1

27:50.770 --> 27:51.770
没问题吧

27:51.770 --> 27:53.770
等于1是不是就有这个内容式

27:53.770 --> 27:55.770
不等于1是不是就没有这个内容式

27:55.770 --> 27:56.770
好保存

27:56.770 --> 27:57.770
你看一下

27:57.770 --> 27:58.770
我们来测试

27:58.770 --> 27:59.770
你看怎么来测试

27:59.770 --> 28:00.770
这个属性值和界面的关系

28:00.770 --> 28:02.770
目前的页码是等于1的

28:02.770 --> 28:03.770
所以有这个内容式

28:03.770 --> 28:05.770
好那么我们来测试一下

28:05.770 --> 28:06.770
看着

28:06.770 --> 28:07.770
在这里测试一下

28:07.770 --> 28:08.770
可以去

28:08.770 --> 28:10.770
我们把这个改一下

28:10.770 --> 28:12.770
能改吗

28:12.770 --> 28:14.770
好像这里改不了

28:14.770 --> 28:17.770
那么我们在这边改吧

28:17.770 --> 28:18.770
我们在这边

28:18.770 --> 28:22.210
给它加一个current

28:22.210 --> 28:24.210
等于2

28:24.210 --> 28:25.210
保存

28:25.210 --> 28:26.210
你看看

28:26.210 --> 28:27.210
这个current这边很二了

28:27.210 --> 28:28.210
那这个内容式就没了

28:28.210 --> 28:29.210
对吧

28:29.210 --> 28:30.210
就可以测试一下

28:30.210 --> 28:31.210
简单简单

28:31.210 --> 28:32.210
很简单

28:32.210 --> 28:34.210
这是

28:34.210 --> 28:36.210
首页这里是动态的

28:36.210 --> 28:37.210
对不对

28:37.210 --> 28:39.210
那么商一页呢

28:39.210 --> 28:42.970
商一页这一块

28:42.970 --> 28:43.970
商一页这一块

28:43.970 --> 28:44.970
是不是道理一样的

28:44.970 --> 28:45.970
如果说是第一页的话

28:45.970 --> 28:46.970
商一页

28:46.970 --> 28:47.970
它也是有这个内容式

28:47.970 --> 28:49.970
disable的

28:49.970 --> 28:50.970
你看

28:50.970 --> 28:51.970
商一页的这个状态

28:51.970 --> 28:53.970
跟它是一样的

28:53.970 --> 28:54.970
没问题吧

28:54.970 --> 28:55.970
好那么同样道理

28:55.970 --> 28:56.970
我们在这边呢

28:56.970 --> 28:57.970
可以得到

28:57.970 --> 28:58.970
得到什么一个结果

28:58.970 --> 29:00.970
就是尾页和下一页

29:00.970 --> 29:01.970
道理是不是一样的

29:01.970 --> 29:02.970
尾页

29:02.970 --> 29:04.970
那么我们看一下尾页和下一页

29:04.970 --> 29:06.970
尾页有没有这个内容式呢

29:06.970 --> 29:07.970
取决于啥

29:07.970 --> 29:09.970
取决于当前页码

29:09.970 --> 29:12.970
是不是最大页吗

29:12.970 --> 29:13.970
就是一共有多少页

29:13.970 --> 29:14.970
比方一共有十页

29:14.970 --> 29:15.970
当前就是第十页

29:15.970 --> 29:16.970
是不是得加上这个内容式

29:16.970 --> 29:18.970
尾页和下一页

29:18.970 --> 29:19.970
对吧

29:19.970 --> 29:20.970
最后页就没有这个

29:20.970 --> 29:21.970
没有下页

29:21.970 --> 29:22.970
没有那尾页了

29:22.970 --> 29:24.970
所以说现在就遇到一个问题

29:24.970 --> 29:26.970
我们这里要等于什么呢

29:26.970 --> 29:28.970
等于就是

29:28.970 --> 29:30.970
页码数

29:30.970 --> 29:32.970
就总页数

29:32.970 --> 29:33.970
对吧

29:33.970 --> 29:34.970
我们要等于总页数

29:34.970 --> 29:36.970
那么你可以想一想

29:36.970 --> 29:38.970
我们这个

29:38.970 --> 29:39.970
组建里边

29:39.970 --> 29:41.970
属性里边有没有总页数

29:41.970 --> 29:43.970
也说同学说是这个

29:43.970 --> 29:44.970
不是啊

29:44.970 --> 29:45.970
这个不是总页数

29:45.970 --> 29:46.970
这是总数据量

29:46.970 --> 29:47.970
咋叫总数据量

29:47.970 --> 29:49.970
比方说我有一千条数据

29:49.970 --> 29:50.970
就有一千页吗

29:50.970 --> 29:52.970
那除非每页一条数据

29:52.970 --> 29:55.970
每页一条数据那就是一千页

29:55.970 --> 29:56.970
那每页十条数据呢

29:56.970 --> 29:57.970
一千条数据

29:57.970 --> 29:58.970
每页十条

29:58.970 --> 29:59.970
那是不是只有一百页

29:59.970 --> 30:00.970
对吧

30:00.970 --> 30:02.970
我们只知道

30:02.970 --> 30:03.970
一共有多少数据

30:03.970 --> 30:05.970
每页显示多少条

30:05.970 --> 30:09.280
可以通过这两个来刷

30:09.280 --> 30:11.280
我们在 viu 里边

30:11.280 --> 30:12.280
通过这两个算

30:12.280 --> 30:13.280
应该写啥

30:13.280 --> 30:15.280
是讲过的

30:15.280 --> 30:16.280
计算属性

30:16.280 --> 30:17.280
method

30:17.280 --> 30:19.280
computed

30:19.280 --> 30:21.280
那么我们该取个名字

30:21.280 --> 30:25.680
page number

30:25.680 --> 30:26.680
叫做什么

30:26.680 --> 30:28.680
总页数

30:28.680 --> 30:29.680
怎么算的

30:29.680 --> 30:32.680
就是 z 点 total

30:32.680 --> 30:33.680
除以什么呢

30:33.680 --> 30:36.680
除以 z 点 limit

30:36.680 --> 30:37.680
对不对

30:37.680 --> 30:39.680
总页数

30:39.680 --> 30:41.680
总页数

30:41.680 --> 30:44.680
有可能有没有可能是小数

30:44.680 --> 30:45.680
可能哦

30:45.680 --> 30:47.680
比方说我们现在

30:47.680 --> 30:49.680
总的数据量

30:49.680 --> 30:53.500
总的数据量是一千

30:53.500 --> 30:55.500
一百三十条

30:55.500 --> 30:58.500
一百三十二

30:58.500 --> 31:00.500
一百零二吧

31:00.500 --> 31:02.500
每页显示十条

31:02.500 --> 31:03.500
等于多少呢

31:03.500 --> 31:05.500
是不是等于十点二

31:05.500 --> 31:06.500
那我的页嘛

31:06.500 --> 31:08.500
不可能有小数吧

31:08.500 --> 31:09.500
那这个东西算

31:09.500 --> 31:10.500
算多少页

31:10.500 --> 31:13.820
也就是说算多少页嘛

31:13.820 --> 31:14.820
是不是算十一页啊

31:14.820 --> 31:15.820
对不对

31:15.820 --> 31:17.820
有小数就向上取者

31:17.820 --> 31:19.820
那两条数据我也得算一页啊

31:19.820 --> 31:20.820
那么我说

31:20.820 --> 31:21.820
我们这里返回怎么呢

31:21.820 --> 31:23.820
返回的是 mass sale

31:23.820 --> 31:25.820
向上取者

31:25.820 --> 31:26.820
这个没问题吧

31:26.820 --> 31:27.820
得到总页数了

31:27.820 --> 31:28.820
好这个东西是根据

31:28.820 --> 31:29.820
这两个数据也算出来

31:29.820 --> 31:30.820
这两个数据一遍

31:30.820 --> 31:31.820
它就会变

31:31.820 --> 31:33.820
好了有了总页数过后

31:33.820 --> 31:34.820
我们在这里面

31:34.820 --> 31:35.820
来看一下

31:35.820 --> 31:36.820
这边我们怎么写呢

31:36.820 --> 31:39.820
就是 this

31:40.820 --> 31:42.820
配纸囊本

31:42.820 --> 31:44.820
保存

31:44.820 --> 31:46.820
你看现在不是嘛

31:46.820 --> 31:47.820
现在没有多少数据呢

31:47.820 --> 31:48.820
是零条数据对不对

31:48.820 --> 31:50.820
那么这个东西就是零

31:50.820 --> 31:52.820
那么这里设计上一个问题

31:52.820 --> 31:55.820
如果说总页数是零

31:55.820 --> 31:58.820
这个区域还有意义吗

31:58.820 --> 32:01.820
所以我马上要开始新的知识了

32:01.820 --> 32:03.820
这个区域有意义吗

32:03.820 --> 32:05.820
都没有数据我分什么页呢

32:05.820 --> 32:07.820
或者说我只有一页

32:07.820 --> 32:08.820
我数据只有一页

32:08.820 --> 32:10.820
那我分什么页呢

32:10.820 --> 32:13.820
所以说现在设计到一个问题

32:13.820 --> 32:15.820
就这个DIV啊

32:15.820 --> 32:20.630
只有占

32:20.630 --> 32:23.630
只有页数

32:23.630 --> 32:25.630
就总页数

32:25.630 --> 32:27.630
大于等于

32:27.630 --> 32:29.630
大于一时

32:29.630 --> 32:30.630
才显示

32:30.630 --> 32:32.630
比方说现在我们就有这样的一个需求

32:32.630 --> 32:34.630
总页数大于一的时候

32:34.630 --> 32:37.630
我整个DIV才会显示出来

32:37.630 --> 32:38.630
否则的话就这样隐藏了

32:38.630 --> 32:40.630
不要显示了

32:40.630 --> 32:42.630
现在我们就设计到一个问题

32:42.630 --> 32:44.630
如何在维幼的开发中

32:44.630 --> 32:48.630
控制元素的显示和隐藏

32:48.630 --> 32:51.630
之前是不是没遇到过

32:51.630 --> 32:52.630
那么怎么来控制呢

32:52.630 --> 32:54.630
因为说我们写个style行不行

32:54.630 --> 32:55.630
绑立个style

32:55.630 --> 32:56.630
绑立个dispay嘛

32:56.630 --> 32:57.630
可不可以啊

32:57.630 --> 32:58.630
当然可以

32:58.630 --> 32:59.630
但是我这里呢

32:59.630 --> 33:01.630
要说维幼它特有的方式

33:01.630 --> 33:04.630
接下来我们第二个知识点

33:04.630 --> 33:06.630
vif和vshow

33:06.630 --> 33:09.630
这是个新知识

33:09.630 --> 33:12.630
那么vif和vshow是什么意思呢

33:12.630 --> 33:14.630
我们在这里给大家做一个测试

33:14.630 --> 33:17.630
比方说我这里有一个数据

33:17.630 --> 33:21.580
data

33:21.580 --> 33:25.580
假设我瞎举一些例子

33:25.580 --> 33:27.580
比方说我这里

33:27.580 --> 33:29.580
我们先说vif

33:29.580 --> 33:30.580
它是一个新的指令

33:30.580 --> 33:34.340
我们指令会增加了

33:34.340 --> 33:35.340
之前学了三个指令

33:35.340 --> 33:39.340
现在我们只剩下一个vif

33:39.340 --> 33:40.340
来我们来看一下

33:40.340 --> 33:42.340
比方说我有一个score分数

33:43.340 --> 33:45.340
假设我就瞎举个例子

33:46.340 --> 33:47.340
其实

33:47.340 --> 33:49.340
现在我们要做这么一个事

33:49.340 --> 33:52.340
如果分数为70

33:53.340 --> 33:58.340
分数大于等于70

33:58.340 --> 34:00.340
我们就写个

34:01.340 --> 34:03.340
得到的是s1元数

34:03.340 --> 34:06.780
一个字量

34:06.780 --> 34:07.780
成绩为量

34:07.780 --> 34:10.780
假设我们假设有这样的一个需求

34:10.780 --> 34:13.780
然后如果说没有大于等于70

34:13.780 --> 34:15.780
那么如果说大于等于

34:15.780 --> 34:17.780
大于等于80

34:18.780 --> 34:22.670
这是u

34:23.670 --> 34:25.670
如果说大于等于60的话

34:25.670 --> 34:26.670
我们就写个量

34:26.670 --> 34:28.670
H2元数

34:28.670 --> 34:29.670
就写个量

34:29.670 --> 34:31.670
如果说分数是

34:31.670 --> 34:34.670
其他的情况

34:35.670 --> 34:37.670
元数也会变

34:37.670 --> 34:38.670
H3

34:38.670 --> 34:40.670
我就写一个什么呢

34:41.670 --> 34:44.180
什么意思

34:44.180 --> 34:45.180
那怎么弄

34:46.180 --> 34:49.180
就是我这里渲染的元数

34:49.180 --> 34:50.180
它有可能是H1

34:50.180 --> 34:51.180
有可能是H2

34:51.180 --> 34:52.180
有可能是H3

34:52.180 --> 34:53.180
都说不准

34:53.180 --> 34:54.180
那怎么办

34:54.180 --> 34:55.180
我们可以

34:55.180 --> 34:57.180
我们在纪言代码里面

34:57.180 --> 34:58.180
就是一个判断

34:58.180 --> 34:59.180
if else if

34:59.180 --> 35:01.180
和else

35:01.180 --> 35:02.180
其实在组建里面

35:02.180 --> 35:04.180
它就给你设计了这么一个指令

35:04.180 --> 35:05.180
叫做vif

35:05.180 --> 35:06.180
那么怎么写呢

35:06.180 --> 35:08.180
我们就写一个Hu

35:10.810 --> 35:11.810
我们这里面写上去

35:11.810 --> 35:12.810
vif

35:13.810 --> 35:14.810
这里面还是一样

35:14.810 --> 35:16.810
指令后面写的都是

35:17.810 --> 35:18.810
什么条件呢

35:19.810 --> 35:20.810
分数score

35:20.810 --> 35:21.810
大于等于70

35:22.810 --> 35:23.810
这个条

35:23.810 --> 35:24.810
这个判定为真

35:24.810 --> 35:25.810
那么它就显示

35:25.810 --> 35:26.810
确认这个元数

35:26.810 --> 35:27.810
好

35:27.810 --> 35:28.810
那么接着我们

35:28.810 --> 35:29.810
不要停

35:29.810 --> 35:30.810
接着写

35:32.810 --> 35:34.810
所以道理一样的

35:34.810 --> 35:35.810
这个要联系一下

35:35.810 --> 35:36.810
中间不能隔断

35:36.810 --> 35:37.810
不能隔其他元数

35:38.810 --> 35:39.810
score

35:39.810 --> 35:40.810
小于等于

35:40.810 --> 35:42.810
大于等于

35:42.810 --> 35:43.810
60

35:43.810 --> 35:44.810
刚才是80

35:45.810 --> 35:46.810
那么我们在渲染

35:46.810 --> 35:48.810
渲染这个粮

35:49.810 --> 35:51.810
最后H3

35:51.810 --> 35:52.810
velse

35:52.810 --> 35:54.810
else不需要写条件了

35:54.810 --> 35:55.810
直接写就行了

35:55.810 --> 35:56.810
那么就是差

35:57.810 --> 35:58.810
那么这三个元数

35:58.810 --> 36:00.810
它只会渲染一个

36:00.810 --> 36:01.810
看一下

36:01.810 --> 36:02.810
目前是粮

36:02.810 --> 36:03.810
那么我们现在

36:03.810 --> 36:04.810
改一下数据

36:04.810 --> 36:05.810
改成

36:06.810 --> 36:07.810
60

36:07.810 --> 36:08.810
改成80

36:08.810 --> 36:09.810
90

36:09.810 --> 36:10.810
保存

36:10.810 --> 36:11.810
是不是U H1元数

36:11.810 --> 36:12.810
好

36:12.810 --> 36:13.810
然后再改成30

36:13.810 --> 36:14.810
所以H3元数

36:14.810 --> 36:15.810
差

36:15.810 --> 36:16.810
对吧

36:16.810 --> 36:17.810
所以我们可以用非常简单的

36:17.810 --> 36:18.810
用这种vf

36:18.810 --> 36:19.810
velse

36:19.810 --> 36:20.810
velse来搞定

36:22.810 --> 36:23.810
没问题吧

36:23.810 --> 36:24.810
好

36:25.810 --> 36:26.810
有的时候

36:26.810 --> 36:27.810
我们要切换

36:27.810 --> 36:28.810
它显示隐藏

36:28.810 --> 36:30.810
其实也可以用非常简单的方式

36:30.810 --> 36:31.810
比方说我们这里

36:32.810 --> 36:33.810
这个我注释掉

36:34.810 --> 36:35.810
比方说我们这里

36:35.810 --> 36:36.810
还有一个

36:36.810 --> 36:37.810
有这么一个P元数

36:38.810 --> 36:39.810
这个P元数

36:39.810 --> 36:40.810
就是

36:41.810 --> 36:42.810
什么呢

36:42.810 --> 36:43.810
就是写个

36:47.810 --> 36:48.810
随便写个吧

36:49.810 --> 36:50.810
下面一个button

36:50.810 --> 36:51.810
一个按钮

36:51.810 --> 36:52.810
我们切换显示

36:53.810 --> 36:54.810
怎么来切换显示

36:54.810 --> 36:55.810
我们希望点一下

36:55.810 --> 36:56.810
这个按钮

36:56.810 --> 36:57.810
P元数就消失

36:57.810 --> 36:58.810
再点一下

36:58.810 --> 36:59.810
P元数的显示出来

36:59.810 --> 37:00.810
那么我们是不是

37:00.810 --> 37:01.810
可以用vf

37:01.810 --> 37:02.810
我们怎么来弄

37:02.810 --> 37:03.810
我们可以在这里写个Visible

37:03.810 --> 37:04.810
是否显示

37:04.810 --> 37:05.810
一开始拿为显示

37:05.810 --> 37:06.810
我们这个P元数

37:06.810 --> 37:07.810
我该写个vif

37:07.810 --> 37:08.810
Visible

37:08.810 --> 37:09.810
那么这样子

37:09.810 --> 37:10.810
是不是我就不写

37:10.810 --> 37:11.810
这个ls一副ls

37:11.810 --> 37:12.810
对吧

37:12.810 --> 37:13.810
跟我们介石一样

37:13.810 --> 37:14.810
是不是可以直写一个分支

37:14.810 --> 37:15.810
好

37:15.810 --> 37:16.810
那么现在呢

37:16.810 --> 37:17.810
我们如果说它为q

37:17.810 --> 37:18.810
是不是这个v

37:18.810 --> 37:19.810
P元数

37:19.810 --> 37:20.810
它就会显示出来

37:21.810 --> 37:22.810
如果说它为force

37:22.810 --> 37:23.810
它是不是就不显示出来

37:23.810 --> 37:24.810
那么我们点击

37:24.810 --> 37:25.810
按钮过后要说的事情

37:25.810 --> 37:26.810
就很简单

37:26.810 --> 37:27.810
我们就切换这个数据

37:27.810 --> 37:28.810
就行了

37:28.810 --> 37:29.810
始终记住

37:29.810 --> 37:30.810
你不要直接去控制界面

37:30.810 --> 37:31.810
你控制的是什么

37:31.810 --> 37:32.810
控制的是数据

37:33.810 --> 37:34.810
对吧

37:34.810 --> 37:35.810
把它反向一下

37:35.810 --> 37:36.810
它等于之前的

37:36.810 --> 37:37.810
反向的值

37:37.810 --> 37:38.810
控制数据

37:38.810 --> 37:39.810
它就会重新选择

37:39.810 --> 37:40.810
重新选择它

37:40.810 --> 37:41.810
发现它是force

37:41.810 --> 37:42.810
就不会选择

37:42.810 --> 37:43.810
好

37:43.810 --> 37:44.810
咱们来看一下

37:44.810 --> 37:45.810
切换

37:46.810 --> 37:48.810
抱错了

37:48.810 --> 37:49.810
什么呢

37:49.810 --> 37:51.810
Visible is not defined

37:51.810 --> 37:52.810
这个不存在

37:52.810 --> 37:54.810
我这里写错了

37:54.810 --> 37:55.810
vif

37:55.810 --> 37:56.810
好

37:56.810 --> 37:57.810
小心

37:57.810 --> 37:58.810
你看

37:58.810 --> 37:59.810
放小一点

37:59.810 --> 38:05.190
你看

38:05.190 --> 38:06.190
是不是可以切换显示的

38:06.190 --> 38:07.190
对吧

38:07.190 --> 38:08.190
好

38:08.190 --> 38:09.190
就这个

38:09.190 --> 38:10.190
那如果说你的需求

38:10.190 --> 38:12.190
仅仅是为了切换显示

38:12.190 --> 38:13.190
你没有那么多分支

38:13.190 --> 38:14.190
就一个分支

38:14.190 --> 38:15.190
我要切换它是不是显示

38:15.190 --> 38:17.190
除了用vif之外

38:17.190 --> 38:19.190
你还可以用vshow

38:19.190 --> 38:21.190
也可以达到一模一样的效果

38:21.190 --> 38:22.190
好

38:22.190 --> 38:23.190
保存

38:23.190 --> 38:24.190
你看一下

38:24.190 --> 38:25.190
说也可以

38:25.190 --> 38:26.190
用vshow也可以

38:26.190 --> 38:28.190
那么接下来一个面试题就出现了

38:28.190 --> 38:29.190
它会问你

38:29.190 --> 38:31.190
vshow就没什么分支了

38:31.190 --> 38:32.190
vshow你不能写

38:32.190 --> 38:33.190
vshow vs show

38:33.190 --> 38:34.190
你不行了

38:34.190 --> 38:35.190
它只有一个

38:35.190 --> 38:36.190
主要就用来切换

38:36.190 --> 38:37.190
它到底显不显示

38:38.190 --> 38:39.190
那它有什么区别呢

38:39.190 --> 38:41.190
除了当然使用上有区别

38:41.190 --> 38:42.190
vif可以有更多的分支

38:42.190 --> 38:43.190
对吧

38:43.190 --> 38:44.190
vshow只有一个

38:44.190 --> 38:46.190
表示它是不是要显示

38:46.190 --> 38:47.190
除了这个区别之外

38:47.190 --> 38:49.190
它没有深层次的区别

38:49.190 --> 38:50.190
接下来大家看图

38:50.190 --> 38:53.950
我这里有个组件

38:53.950 --> 38:54.950
这个组件非常简单

38:54.950 --> 38:55.950
就是我们刚才写的那个

38:55.950 --> 38:56.950
点击过后

38:56.950 --> 38:57.950
切换这个显示状态

38:57.950 --> 38:58.950
它有个数据

38:58.950 --> 39:00.950
显示状态

39:00.950 --> 39:01.950
下面这个P

39:01.950 --> 39:02.950
我们用的是vif

39:02.950 --> 39:03.950
用visible

39:03.950 --> 39:06.330
那么它一变

39:06.330 --> 39:07.330
是不是它有可能显示

39:07.330 --> 39:08.330
有可能不显示

39:08.330 --> 39:10.330
对吧

39:10.330 --> 39:11.330
这样子做的话

39:11.330 --> 39:12.330
用vif的话

39:12.330 --> 39:13.330
它生成的节点

39:13.330 --> 39:14.330
因为我们知道

39:14.330 --> 39:15.330
要渲染的话

39:15.330 --> 39:16.330
要先生成虚的节点

39:16.330 --> 39:18.330
再生成什么真实的动物数

39:18.330 --> 39:19.330
它先生成虚的节点

39:19.330 --> 39:20.330
我们来看一下

39:20.330 --> 39:22.330
当visible为true的时候

39:22.330 --> 39:23.330
当vif为true的时候

39:23.330 --> 39:25.330
那么渲染出来就这个节点数

39:25.330 --> 39:26.330
div下面有两个节点

39:26.330 --> 39:28.330
button里边有文字

39:28.330 --> 39:30.330
p元数里边有文字

39:31.330 --> 39:32.330
渲染出来就是这样子

39:32.330 --> 39:33.330
没问题吧

39:34.330 --> 39:35.330
当visible为force的时候

39:35.330 --> 39:36.330
你会发现

39:36.330 --> 39:38.330
p元数没了

39:39.330 --> 39:40.330
对吧

39:40.330 --> 39:41.330
div变成了

39:41.330 --> 39:42.330
只有一个节点了

39:42.330 --> 39:44.330
button里边有文字切换

39:44.330 --> 39:45.330
那么生成说的

39:45.330 --> 39:46.330
etm结构是这样子的

39:46.330 --> 39:48.330
p元数直接消失了

39:48.330 --> 39:49.330
好

39:49.330 --> 39:50.330
咱们来看一下

39:50.330 --> 39:51.330
页面是不是这样子的

39:51.330 --> 39:52.330
把它写成vif

39:52.330 --> 39:53.330
好

39:53.330 --> 39:54.330
接下来我们看这边

39:54.330 --> 39:55.330
看这边

39:55.330 --> 39:57.330
找到这个元数

39:57.330 --> 40:00.540
看这

40:00.540 --> 40:01.540
看这个p元数

40:02.540 --> 40:03.540
点击切换

40:03.540 --> 40:04.540
p元数是不是消失了

40:04.540 --> 40:05.540
对吧

40:05.540 --> 40:06.540
可以加一个注射节点

40:06.540 --> 40:07.540
你不用管它

40:07.540 --> 40:08.540
再点一下

40:08.540 --> 40:09.540
p元数是不是出现了

40:09.540 --> 40:12.540
是不是它会删除和添加元数

40:12.540 --> 40:13.540
对吧

40:13.540 --> 40:16.540
它会控制元数的有和没有

40:16.540 --> 40:17.540
这是vif

40:17.540 --> 40:19.540
那么v秀呢

40:20.540 --> 40:22.540
我们把vif变成秀

40:22.540 --> 40:23.540
其他都不变

40:23.540 --> 40:24.540
我们来看一下

40:24.540 --> 40:25.540
你会发现

40:25.540 --> 40:26.540
无论是visible为true

40:26.540 --> 40:28.540
还是visible为force

40:28.540 --> 40:30.540
它的蓄力节点数

40:30.540 --> 40:31.540
都是稳定的

40:31.540 --> 40:32.540
都是一致的

40:32.540 --> 40:33.540
没有什么区别

40:33.540 --> 40:34.540
变化的是什么呢

40:34.540 --> 40:36.540
变化的只是

40:36.540 --> 40:37.540
真实动物里边

40:37.540 --> 40:38.540
一个属性

40:38.540 --> 40:39.540
这个样式display

40:39.540 --> 40:40.540
对吧

40:40.540 --> 40:41.540
如果说visible

40:41.540 --> 40:43.540
visible为force的话

40:43.540 --> 40:45.540
visible为force的话

40:45.540 --> 40:47.540
它会给你加上一个display

40:47.540 --> 40:49.540
先换样式

40:49.540 --> 40:51.540
那么没有这个visible

40:51.540 --> 40:53.540
visible为true的情况下

40:53.540 --> 40:54.540
它就没有给你加这个样式

40:54.540 --> 40:55.540
咱们来看一下吧

40:55.540 --> 40:57.540
如果说我们写成visible

40:57.540 --> 40:58.540
好保存

40:58.540 --> 41:00.540
接下来我们到这边来

41:00.540 --> 41:01.540
点击

41:01.540 --> 41:02.540
你看是不是加上一个display

41:02.540 --> 41:03.540
再点击

41:03.540 --> 41:04.540
是不是没了

41:04.540 --> 41:05.540
display

41:05.540 --> 41:06.540
是不是没了

41:06.540 --> 41:08.540
就这么一个意思

41:08.540 --> 41:10.540
这就是visible和vif的区别

41:10.540 --> 41:12.540
因此这个面试题怎么回答

41:12.540 --> 41:14.540
我给大家读一遍

41:14.540 --> 41:17.540
vif和vshow有什么区别

41:17.540 --> 41:19.540
vif能够控制

41:19.540 --> 41:21.540
是否生成这个vload

41:21.540 --> 41:23.540
对吧

41:23.540 --> 41:24.540
vif

41:24.540 --> 41:25.540
是不是控制这个p元数

41:25.540 --> 41:26.540
适访生成

41:26.540 --> 41:27.540
也就是这个vload

41:27.540 --> 41:28.540
虚的一链数

41:28.540 --> 41:29.540
是不是生成

41:29.540 --> 41:30.540
要生成这个分支

41:30.540 --> 41:32.540
这就是间接控制的

41:32.540 --> 41:33.540
是不是要生成对应的动物

41:33.540 --> 41:34.540
生成对应的

41:34.540 --> 41:35.540
真实动物元素

41:35.540 --> 41:36.540
你看

41:36.540 --> 41:37.540
它没有这个分支

41:37.540 --> 41:39.540
它就没有这个真实动物元素

41:39.540 --> 41:40.540
当vif出的时候

41:40.540 --> 41:42.540
它就会生成这个东西

41:42.540 --> 41:43.540
生成动物元素

41:43.540 --> 41:45.540
当force是就不会生成vload的

41:45.540 --> 41:46.540
自然不会生成任何动物元素

41:46.540 --> 41:47.540
这是vif

41:47.540 --> 41:48.540
vif

41:48.540 --> 41:50.540
vshow始终都会生成vload的

41:50.540 --> 41:52.540
vload始终都会生成

41:52.540 --> 41:54.540
也就是它一直会生成

41:54.540 --> 41:55.540
这个真实动物

41:55.540 --> 41:56.540
对吧

41:56.540 --> 41:57.540
它们是对应关系

41:57.540 --> 41:58.540
它只是控制了

41:58.540 --> 42:00.540
动物的display属性

42:00.540 --> 42:01.540
当vif出的时候

42:01.540 --> 42:02.540
不做任何处理

42:02.540 --> 42:03.540
当vif force的时候

42:03.540 --> 42:04.540
不显示

42:04.540 --> 42:05.540
不显示我就加上display

42:05.540 --> 42:07.540
那么现在我们在使用上

42:07.540 --> 42:08.540
该注意什么

42:08.540 --> 42:09.540
什么时候使用vif

42:09.540 --> 42:11.540
什么时候使用vshow

42:11.540 --> 42:12.540
那么你可以通过

42:12.540 --> 42:13.540
它们的区别知道

42:13.540 --> 42:16.540
vif它可以有效的

42:16.540 --> 42:18.540
减少数的节点和渲染量

42:18.540 --> 42:19.540
有没有

42:19.540 --> 42:20.540
对吧

42:20.540 --> 42:21.540
比方说

42:21.540 --> 42:22.540
我这个地方

42:22.540 --> 42:23.540
不是个p元素

42:23.540 --> 42:24.540
是个div

42:24.540 --> 42:25.540
这个div里边

42:25.540 --> 42:26.540
还有很多很多

42:26.540 --> 42:27.540
超级多的指节点

42:27.540 --> 42:29.540
如果说它这个div不显示

42:30.540 --> 42:32.540
如果说这个用的是vif的话

42:32.540 --> 42:33.540
这里为force的话

42:33.540 --> 42:34.540
所以整个

42:34.540 --> 42:35.540
它的节点本身

42:35.540 --> 42:36.540
和整个指节点

42:36.540 --> 42:37.540
都不用再渲染了

42:37.540 --> 42:38.540
是不是可以减少渲染量

42:38.540 --> 42:39.540
你看

42:39.540 --> 42:40.540
比方说这里不是p元素

42:40.540 --> 42:41.540
是div

42:41.540 --> 42:42.540
里边还有很多的后代

42:42.540 --> 42:43.540
那么div都不渲染了

42:43.540 --> 42:45.540
后边全部都不渲染了

42:45.540 --> 42:47.540
是不是可以减少渲染量了

42:47.540 --> 42:49.540
而且可以减少数的节点

42:49.540 --> 42:50.540
对吧

42:50.540 --> 42:51.540
减少数的节点

42:51.540 --> 42:52.540
其实就是减少渲染量

42:52.540 --> 42:54.540
当然我们之前还学过

42:54.540 --> 42:56.540
这么新就两个数对比

42:56.540 --> 42:58.540
是不是也可以减少对比的量

42:58.540 --> 42:59.540
这是vif

42:59.540 --> 43:00.540
但是它有个问题

43:00.540 --> 43:01.540
就是数

43:01.540 --> 43:03.540
会导致数不稳定

43:03.540 --> 43:04.540
它数有的时候

43:04.540 --> 43:05.540
少个节点

43:05.540 --> 43:06.540
有的时候有多个节点

43:06.540 --> 43:07.540
大家注意

43:07.540 --> 43:09.540
听这么句话

43:09.540 --> 43:12.540
无忧的很多渲染效率

43:12.540 --> 43:14.540
取决于两个地方

43:14.540 --> 43:16.540
一个是

43:16.540 --> 43:18.540
渲染的节点越少

43:18.540 --> 43:21.540
效率越高

43:21.540 --> 43:23.540
第二个是

43:23.540 --> 43:25.540
数越稳定

43:25.540 --> 43:27.540
渲染效率越高

43:27.540 --> 43:29.540
你看是不是有矛盾

43:29.540 --> 43:30.540
这个vif

43:30.540 --> 43:31.540
没有完美的办法

43:31.540 --> 43:32.540
有完美的办法

43:32.540 --> 43:34.540
就不会给你做两个了

43:34.540 --> 43:35.540
vif

43:35.540 --> 43:36.540
也会减少节点

43:36.540 --> 43:37.540
渲染和渲染量

43:37.540 --> 43:39.540
但是它数不稳定

43:39.540 --> 43:40.540
至于为什么

43:40.540 --> 43:42.540
我们现在不去设计

43:42.540 --> 43:44.540
但是如果说使用vif

43:44.540 --> 43:45.540
就下架相反

43:45.540 --> 43:46.540
它数很稳定

43:46.540 --> 43:47.540
支撑有多少个节点

43:47.540 --> 43:48.540
现在就多少个节点

43:48.540 --> 43:49.540
数非常稳定

43:49.540 --> 43:51.540
但是不能减少渲染量

43:51.540 --> 43:53.540
这个p节点明明不显示

43:53.540 --> 43:54.540
不显示也要渲染

43:54.540 --> 43:56.540
也要生成vif的

43:56.540 --> 43:58.540
只是它一样式

43:58.540 --> 44:00.540
变成这个样子

44:00.540 --> 44:01.540
所以说

44:01.540 --> 44:02.540
我们的开发时候

44:02.540 --> 44:04.540
怎么选择呢

44:04.540 --> 44:05.540
就是

44:05.540 --> 44:07.540
如果说像我们刚才

44:07.540 --> 44:10.540
这种情况下

44:10.540 --> 44:11.540
它的变化很平凡

44:11.540 --> 44:14.540
它的切换特别平凡

44:14.540 --> 44:16.540
我们就应该保持它的稳定性

44:16.540 --> 44:18.540
你不能老是导致个数

44:18.540 --> 44:19.540
多个节点

44:19.540 --> 44:20.540
一会少个节点

44:20.540 --> 44:22.540
那么这导致数不稳定

44:22.540 --> 44:23.540
所以说

44:23.540 --> 44:24.540
当我们变化

44:24.540 --> 44:25.540
平凡的情况下

44:25.540 --> 44:27.540
应该使用vif

44:27.540 --> 44:29.540
让数尽量稳定

44:29.540 --> 44:31.540
提高效率

44:31.540 --> 44:32.540
如果说

44:32.540 --> 44:34.540
也又变化那么平凡

44:34.540 --> 44:36.540
偶尔变化一次

44:36.540 --> 44:37.540
变化一次过后

44:37.540 --> 44:38.540
就不再变化了

44:38.540 --> 44:39.540
变化很少

44:39.540 --> 44:40.540
那么这个时候

44:40.540 --> 44:41.540
就应该使用vif

44:41.540 --> 44:45.540
来减少数的节点和渲染量

44:45.540 --> 44:46.540
懂了意思吗

44:46.540 --> 44:48.540
这就是他们的区别

44:48.540 --> 44:50.540
因此你们在开发中

44:50.540 --> 44:52.540
我们再回到这里的实际问题

44:52.540 --> 44:53.540
现在我们又讲两个支持了

44:53.540 --> 44:54.540
讲两个支持了

44:54.540 --> 44:56.540
一个是

44:56.540 --> 44:58.540
选定样式和vif和vissue

44:58.540 --> 44:59.540
现在我们多一个

44:59.540 --> 45:01.540
vissue

45:01.540 --> 45:02.540
我就不用给你写了

45:02.540 --> 45:04.540
你们这个东西需要大家理解的

45:04.540 --> 45:05.540
理解的你就忘不掉了

45:05.540 --> 45:06.540
好

45:06.540 --> 45:07.540
那现在我们回到

45:07.540 --> 45:09.540
这边来

45:11.540 --> 45:15.740
我们这个pager

45:15.740 --> 45:17.740
复制一下

45:17.740 --> 45:18.740
你加来自于看

45:18.740 --> 45:23.020
我就把这边就删除掉了

45:23.020 --> 45:24.020
这个pager

45:24.020 --> 45:26.840
就这个df

45:26.840 --> 45:27.840
要不要显示

45:27.840 --> 45:29.840
可以使用vif

45:29.840 --> 45:30.840
还是可以使用vissue

45:30.840 --> 45:31.840
都可以

45:31.840 --> 45:32.840
那么到底使用vif

45:32.840 --> 45:33.840
还是vissue呢

45:33.840 --> 45:35.840
先想一想

45:35.840 --> 45:37.840
主要是把条件看一下

45:37.840 --> 45:38.840
条件

45:38.840 --> 45:40.840
条件是什么呢

45:40.840 --> 45:42.840
page number

45:42.840 --> 45:44.840
大于

45:44.840 --> 45:46.840
一

45:46.840 --> 45:47.840
对吧

45:47.840 --> 45:48.840
总页数只有大于一的时候

45:48.840 --> 45:50.840
一档本本人用的是计算属性

45:50.840 --> 45:52.840
总页数大于一的时候

45:52.840 --> 45:54.840
我才显示

45:54.840 --> 45:56.840
那你就想呗

45:56.840 --> 45:57.840
总页数

45:57.840 --> 45:59.840
总页数

45:59.840 --> 46:03.280
有没有可能经常变啊

46:03.280 --> 46:05.280
你没有写过这个组件

46:05.280 --> 46:06.280
上过网吗

46:06.280 --> 46:09.280
你在浏览一个列表页的时候

46:09.280 --> 46:12.280
他的总页数才经常变吗

46:12.280 --> 46:14.280
没有吧

46:14.280 --> 46:15.280
没有吧

46:15.280 --> 46:16.280
所以说

46:16.280 --> 46:18.280
这个是不是比较稳定的

46:18.280 --> 46:19.280
比较稳定的话

46:19.280 --> 46:20.280
不就使用vif

46:20.280 --> 46:22.280
我们不用去考虑稳定型的

46:22.280 --> 46:23.280
它本来就比较稳定

46:23.280 --> 46:24.280
使用vif

46:24.280 --> 46:26.280
更好一点

46:26.280 --> 46:27.280
没什么意思吧

46:27.280 --> 46:29.280
好那么现在我们来看一下

46:29.280 --> 46:30.280
有了vif过后了

46:30.280 --> 46:31.280
现在你看

46:31.280 --> 46:33.280
整个pager都没了

46:33.280 --> 46:35.280
你看下面这啥都没有了

46:35.280 --> 46:37.280
那么如果说我那种

46:37.280 --> 46:39.280
给他的数据总数偷偷

46:39.280 --> 46:41.280
然后数据总数呢

46:41.280 --> 46:43.280
是300一个数据

46:43.280 --> 46:45.280
302个数据

46:45.280 --> 46:46.280
保存

46:46.280 --> 46:48.280
是不是又显示出来了

46:48.280 --> 46:49.280
对吧

46:49.280 --> 46:50.280
就这么个意思啊

46:50.280 --> 46:52.280
好这是那个

46:52.280 --> 46:55.590
vif

46:55.590 --> 46:57.590
那么如果说假设

46:57.590 --> 46:58.590
假设

46:58.590 --> 46:59.590
我们这个是

46:59.590 --> 47:01.590
首页和商业

47:01.590 --> 47:02.590
首页和商业

47:02.590 --> 47:03.590
是用这个disable的样式

47:03.590 --> 47:05.590
而是要切换显示

47:05.590 --> 47:06.590
如果说第1页的时候

47:06.590 --> 47:08.590
我根本就不要显示这两个

47:08.590 --> 47:10.590
假设我们有这样的需求

47:10.590 --> 47:12.590
那么这里是用vif

47:12.590 --> 47:13.590
还是用维修好了

47:13.590 --> 47:16.100
current

47:16.100 --> 47:17.100
大语一

47:17.100 --> 47:18.100
只有当前一把

47:18.100 --> 47:19.100
大语一的时候

47:19.100 --> 47:20.100
我才显示首页

47:20.100 --> 47:21.100
对吧

47:21.100 --> 47:22.100
如果说第1页的话

47:22.100 --> 47:23.100
我就不用比较显示首页了

47:23.100 --> 47:25.100
比方说我们要做显示和隐藏

47:25.100 --> 47:26.100
那么这里是用vif好了

47:26.100 --> 47:27.100
还是用维修好了

47:27.100 --> 47:28.100
你觉得

47:28.100 --> 47:30.100
现在就不显示了

47:30.100 --> 47:32.100
你觉得应该是用vif

47:32.100 --> 47:33.100
所以应该用vif

47:33.100 --> 47:34.100
因为当前一把

47:34.100 --> 47:36.100
是不是要会经常变动

47:36.100 --> 47:38.100
它可能从1变到其他纸

47:38.100 --> 47:39.100
其他纸变到1

47:39.100 --> 47:40.100
对不对

47:40.100 --> 47:41.100
那么这个地方的变动

47:41.100 --> 47:42.100
可能比较平凡

47:42.100 --> 47:44.100
这个用维修比较好一点

47:44.100 --> 47:45.100
注意区分

47:45.100 --> 47:46.100
但是这里

47:46.100 --> 47:49.100
我们没有这样的需求

47:49.100 --> 47:50.100
好 接下来

47:50.100 --> 47:51.100
我们这个地方

47:51.100 --> 47:52.100
是不是起得差不多了

47:52.100 --> 47:54.100
完没没完

47:54.100 --> 47:55.100
还有什么

47:55.100 --> 47:56.100
还有中间这一部分

47:56.100 --> 47:57.100
中间这一部分

47:57.100 --> 47:59.100
是不是一串数字

47:59.100 --> 48:01.100
你看这边

48:01.100 --> 48:02.100
放大

48:03.100 --> 48:04.100
能看清楚

48:04.100 --> 48:06.100
我们先往上拉一点

48:06.100 --> 48:08.100
这里是不是一串数字

48:08.100 --> 48:11.100
这数字一定是1到10吗

48:11.100 --> 48:12.100
问大家一个问题

48:12.100 --> 48:15.100
是不是一定是1到10

48:15.100 --> 48:16.100
也不一定要一看这个

48:16.100 --> 48:21.070
就是3到12

48:21.070 --> 48:22.070
是不是7

48:22.070 --> 48:25.070
是不是7到16

48:25.070 --> 48:26.070
对吧

48:26.070 --> 48:28.070
也就是说我们这里只需要

48:28.070 --> 48:29.070
如果说能够得到一个

48:29.070 --> 48:31.070
数字的数组

48:31.070 --> 48:32.070
如果说能够得到一个

48:32.070 --> 48:33.070
数字的数组

48:33.070 --> 48:35.070
是不是特别方便

48:35.070 --> 48:36.070
那么我们怎么来得到

48:36.070 --> 48:39.070
这个数字的数组呢

48:39.070 --> 48:40.070
比较说

48:40.070 --> 48:41.070
如果说我们假设

48:41.070 --> 48:42.070
因为我们的界面

48:42.070 --> 48:43.070
始终是根据数据

48:43.070 --> 48:44.070
现场出来的对吧

48:44.070 --> 48:45.070
我们如果说有这个数

48:45.070 --> 48:46.070
数组的话

48:46.070 --> 48:48.070
是不是用一个v4循环

48:48.070 --> 48:50.070
就搞定了

48:50.070 --> 48:51.070
比较说我们假设

48:51.070 --> 48:53.070
假设我们有一个数组

48:53.070 --> 48:54.070
你看开发首先是怎么

48:54.070 --> 48:55.070
怎么去开发的

48:55.070 --> 48:56.070
就用这种识路去开发

48:56.070 --> 48:57.070
这个数组里面

48:57.070 --> 48:58.070
是第1个是7

48:58.070 --> 48:59.070
第2个是8

48:59.070 --> 49:00.070
9

49:00.070 --> 49:01.070
中间不写了

49:01.070 --> 49:02.070
后面是16

49:02.070 --> 49:03.070
如果说有这么一个数组的话

49:03.070 --> 49:04.070
那这个东西渲染出来

49:04.070 --> 49:06.070
是不是非常非常简单

49:06.070 --> 49:07.070
很简单吧

49:07.070 --> 49:09.070
一下就渲染出来了

49:09.070 --> 49:10.070
对不对

49:10.070 --> 49:12.070
但是这里是数组吗

49:12.070 --> 49:13.070
他肯定不是

49:13.070 --> 49:14.070
没有数组啊

49:14.070 --> 49:15.070
这里没有数组

49:15.070 --> 49:16.070
那么现在就想办法

49:16.070 --> 49:18.070
去够造一个数组出来

49:18.070 --> 49:21.070
够造这么一个数组出来

49:21.070 --> 49:22.070
比方说

49:22.070 --> 49:26.070
我们这里写个计算属性

49:26.070 --> 49:28.070
叫做

49:28.070 --> 49:29.070
南本斯吧

49:29.070 --> 49:30.070
数字

49:30.070 --> 49:31.070
有哪些数字

49:31.070 --> 49:32.070
比方说

49:32.070 --> 49:33.070
我们就随便瞎写一个

49:33.070 --> 49:34.070
7

49:34.070 --> 49:35.070
8

49:35.070 --> 49:36.070
9

49:36.070 --> 49:37.070
10

49:37.070 --> 49:38.070
11

49:38.070 --> 49:39.070
随便瞎写几个

49:39.070 --> 49:41.070
写几个固定的字

49:41.070 --> 49:42.070
先测试一下

49:42.070 --> 49:43.070
如果说有了这么一个数组

49:43.070 --> 49:45.070
你看这里是不是非常方便了

49:45.070 --> 49:47.070
写个什么V4循环

49:47.070 --> 49:50.070
前面再写个1 2 3 4 5 6

49:50.070 --> 49:52.070
1 2 3 4 5 6

49:52.070 --> 49:53.070
写个什么

49:53.070 --> 49:54.070
V4循环

49:54.070 --> 49:55.070
然后呢

49:55.070 --> 49:57.070
循环每一个数字N

49:57.070 --> 49:59.070
印什么的Numbers

49:59.070 --> 50:00.070
注意要写V4循环

50:00.070 --> 50:01.070
一定要加上T

50:01.070 --> 50:03.070
这是我们之前说过的

50:03.070 --> 50:04.070
对不对

50:04.070 --> 50:05.070
现在不用去管

50:05.070 --> 50:06.070
为什么

50:06.070 --> 50:07.070
那我说的计算

50:07.070 --> 50:08.070
写出来就行了

50:08.070 --> 50:09.070
你这怎么写就行了

50:09.070 --> 50:11.070
T值它必须要唯一写稳定

50:11.070 --> 50:12.070
那么这里呢

50:12.070 --> 50:13.070
你好像找不到稳定的

50:13.070 --> 50:14.070
值了

50:14.070 --> 50:15.070
找不到稳定的

50:15.070 --> 50:16.070
那就唯一吧

50:16.070 --> 50:18.070
那么我们这里呢

50:18.070 --> 50:19.070
再加上一个下标

50:19.070 --> 50:20.070
用下标

50:21.070 --> 50:22.070
用下标做A key

50:24.070 --> 50:25.070
那么这里呢

50:25.070 --> 50:26.070
我就把3除掉了

50:26.070 --> 50:28.070
循环生成A元数

50:28.070 --> 50:30.070
A元数里面写啥

50:30.070 --> 50:31.070
写啥

50:31.070 --> 50:32.070
我们就写的是

50:32.070 --> 50:33.070
那个页码的

50:33.070 --> 50:34.070
还能写啥

50:34.070 --> 50:35.070
不就是一个N吗

50:35.070 --> 50:36.070
是吧

50:36.070 --> 50:37.070
这数组循环的数组

50:37.070 --> 50:38.070
每一项拿出来

50:38.070 --> 50:39.070
放到这个A元数里面

50:39.070 --> 50:41.070
好保存啊

50:41.070 --> 50:42.070
应该不就生成出来了

50:42.070 --> 50:43.070
1 2 3 4 5 6

50:43.070 --> 50:45.580
好

50:45.580 --> 50:46.580
接下来

50:46.580 --> 50:48.580
还有一个点就是

50:48.580 --> 50:50.580
它有没有一个内样式

50:50.580 --> 50:51.580
它叫active

50:51.580 --> 50:53.580
什么内样式要动态的

50:53.580 --> 50:54.580
我们这里写上

50:54.580 --> 50:56.580
一个动态的内样式

50:56.580 --> 50:57.580
一样的

50:57.580 --> 50:58.580
把一个对象

50:58.580 --> 50:59.580
有没有active

50:59.580 --> 51:00.580
这个内样式呢

51:00.580 --> 51:01.580
是不是取决于这个N

51:01.580 --> 51:02.580
注意啊

51:02.580 --> 51:03.580
如果说你写到

51:03.580 --> 51:04.580
V4这个指令过后

51:04.580 --> 51:05.580
后边的一个绑定啊

51:05.580 --> 51:07.580
还包括什么V1F

51:07.580 --> 51:08.580
都是后计算的

51:08.580 --> 51:09.580
它先计算V4

51:09.580 --> 51:11.580
然后再计算后边的

51:11.580 --> 51:12.580
后边的东西

51:12.580 --> 51:13.580
哪怕你把这些东西写前面

51:13.580 --> 51:14.580
也是一样

51:14.580 --> 51:15.580
它一定先运行V4

51:15.580 --> 51:17.580
它就有些几个顺序了

51:17.580 --> 51:18.580
所以说

51:18.580 --> 51:19.580
你在V1F里边

51:19.580 --> 51:20.580
还有在这

51:20.580 --> 51:21.580
还有在这些

51:21.580 --> 51:23.580
属性绑定里边

51:23.580 --> 51:24.580
央式绑定里边

51:24.580 --> 51:25.580
都可以直接使用

51:25.580 --> 51:26.580
那个临式辨量N

51:27.580 --> 51:28.580
N

51:29.580 --> 51:30.580
是不是等于什么

51:30.580 --> 51:31.580
correct

51:31.580 --> 51:32.580
啥意思啊

51:33.580 --> 51:36.580
我在循环生成这个A元数

51:36.580 --> 51:39.530
同时呢

51:39.530 --> 51:40.530
我要知道这个A元数

51:40.530 --> 51:41.530
每个A元数

51:41.530 --> 51:42.530
有没有这个active

51:42.530 --> 51:43.530
取决于

51:43.530 --> 51:44.530
当前这个A元数

51:44.530 --> 51:45.530
对你的数字N

51:45.530 --> 51:47.530
是不是就等于当前页

51:47.530 --> 51:48.530
对吧

51:48.530 --> 51:49.530
这生成的数字

51:49.530 --> 51:50.530
跟当前页是一样的

51:50.530 --> 51:51.530
那肯定就是有个

51:51.530 --> 51:52.530
内样式active

51:52.530 --> 51:53.530
保存一下

51:54.530 --> 51:55.530
好 接下来我们看一下

51:55.530 --> 51:56.530
是不是第一页

51:56.530 --> 51:57.530
就有这个效果了

51:57.530 --> 51:58.530
接下来多测试一下

51:58.530 --> 51:59.530
那么比方说

51:59.530 --> 52:01.530
我们总数为302页

52:01.530 --> 52:02.530
当前页呢

52:02.530 --> 52:04.530
不是一 是三

52:04.530 --> 52:05.530
保存

52:05.530 --> 52:06.530
你看是不是

52:06.530 --> 52:07.530
第三页是这个样子

52:08.530 --> 52:09.530
对吧 没问题吧

52:09.530 --> 52:10.530
都很简单

52:11.530 --> 52:13.970
就写到这一块了

52:13.970 --> 52:14.970
但是呢

52:14.970 --> 52:15.970
我们现在这个数据是假的

52:15.970 --> 52:16.970
对不对

52:16.970 --> 52:17.970
是假的

52:17.970 --> 52:19.970
我们先把它做成一个真的数据

52:19.970 --> 52:20.970
真的数据

52:20.970 --> 52:21.970
它不一定是一二三四五六

52:21.970 --> 52:22.970
还有可能是什么

52:22.970 --> 52:23.970
我也不知道是什么

52:23.970 --> 52:24.970
那么怎么办呢

52:24.970 --> 52:26.970
其实这里并不不复杂

52:26.970 --> 52:27.970
怎么弄呢

52:27.970 --> 52:30.970
你只要算出最小的数字

52:31.970 --> 52:33.970
最大的数字是不是很容易算出来

52:34.970 --> 52:35.970
所以也就是说

52:35.970 --> 52:36.970
我们最小的数字出来了

52:36.970 --> 52:37.970
因为一个版面

52:37.970 --> 52:39.970
一共就显示10个页码吗

52:39.970 --> 52:41.970
所以一共就显示这么多一个页码

52:42.970 --> 52:43.970
对吧

52:43.970 --> 52:44.970
我们刚才之前写过这个属性

52:45.970 --> 52:46.970
最多显示

52:46.970 --> 52:48.970
可显示的数字数量

52:49.970 --> 52:51.970
一共就显示10个

52:51.970 --> 52:52.970
默认是10个吗

52:52.970 --> 52:53.970
可以调

52:53.970 --> 52:54.970
最小的出来的最大的

52:54.970 --> 52:55.970
是不是很容易出来

52:55.970 --> 52:58.970
所以我们现在关键点是要算最小的

52:58.970 --> 52:59.970
那为了做这个东西

52:59.970 --> 53:01.970
我又可以增加一个

53:01.970 --> 53:02.970
增加一个计算属性

53:02.970 --> 53:03.970
界面上虽然不用

53:03.970 --> 53:05.970
但是它会用的

53:05.970 --> 53:10.410
密最小的数字

53:10.410 --> 53:11.410
大家注释

53:11.410 --> 53:16.410
这里得到页码中最小的数字

53:16.410 --> 53:17.410
不是最小页码

53:17.410 --> 53:18.410
最小页码肯定是1

53:18.410 --> 53:20.410
对吧只是我显示出来的最小页码

53:21.410 --> 53:24.410
或者叫V者多密

53:25.410 --> 53:31.410
得到显示的最小的数字

53:32.410 --> 53:33.410
好了吗

53:33.410 --> 53:34.410
这个玩意怎么得到呢

53:35.410 --> 53:36.410
它并不复杂

53:36.410 --> 53:38.410
因为我这里做的页码的方式比较简单

53:38.410 --> 53:39.410
它并不复杂

53:39.410 --> 53:40.410
你看

53:40.410 --> 53:41.410
当前页码是12

53:43.410 --> 53:44.410
最小页码就是7

53:44.410 --> 53:45.410
为什么是7

53:45.410 --> 53:49.490
当前页码是11

53:49.490 --> 53:50.490
最小的就是6

53:51.490 --> 53:52.490
最小的就是6

53:52.490 --> 53:53.490
为什么是6

53:54.490 --> 53:55.490
当前页码是14

53:55.490 --> 53:56.490
最小的就是9

53:57.490 --> 53:58.490
为什么是9

53:58.490 --> 53:59.490
为什么减5

53:59.490 --> 54:00.490
为什么减5

54:00.490 --> 54:01.490
为什么不是减6

54:01.490 --> 54:02.490
为什么不是减7呢

54:05.060 --> 54:06.060
自然而然是它的一半

54:07.060 --> 54:08.060
减它的一半

54:08.060 --> 54:10.060
最小页码是不是很简单

54:12.060 --> 54:13.060
等于什么

54:13.060 --> 54:14.060
当前页码

54:14.060 --> 54:15.060
Corrent

54:15.060 --> 54:16.060
你看是不是有一代了

54:16.060 --> 54:17.060
一代就不用管它

54:17.060 --> 54:18.060
你就按照这个方式来算就行了

54:18.060 --> 54:20.060
一代它会自动给你收集

54:20.060 --> 54:22.060
自动给你进行重新运算

54:22.060 --> 54:23.060
你不用管它

54:23.060 --> 54:24.060
当前页码

54:24.060 --> 54:25.060
减去什么

54:28.370 --> 54:29.370
Visible

54:30.370 --> 54:31.370
Visible Number

54:32.370 --> 54:33.370
Visible Number

54:34.370 --> 54:35.370
除以2

54:36.370 --> 54:37.370
减去它的一半

54:38.370 --> 54:39.370
那一半有没有可能是小数

54:40.370 --> 54:41.370
有时候不可能

54:41.370 --> 54:42.370
它是10

54:42.370 --> 54:43.370
它凭什么就一定是10

54:43.370 --> 54:44.370
有可能别人给你传一个

54:44.370 --> 54:45.370
什么21

54:45.370 --> 54:46.370
17

54:46.370 --> 54:47.370
对吧

54:47.370 --> 54:48.370
它有可能是

54:48.370 --> 54:49.370
这算出来有可能是小数

54:49.370 --> 54:50.370
小数的话

54:50.370 --> 54:51.370
你向上取正也好

54:51.370 --> 54:52.370
向下取正也好都行

54:52.370 --> 54:53.370
要不就是左边多一个

54:53.370 --> 54:54.370
要不就是右边多一个

54:54.370 --> 54:55.370
对吧

54:55.370 --> 54:56.370
也不影响啥

54:56.370 --> 54:57.370
我们就向下取正

54:58.370 --> 54:59.370
对吧

54:59.370 --> 55:00.370
这个不用解释了吧

55:00.370 --> 55:01.370
你要理解

55:01.370 --> 55:02.370
你要理解这些代码

55:02.370 --> 55:03.370
不要去使心

55:03.370 --> 55:04.370
因为这个东西怎么对

55:04.370 --> 55:05.370
买卖不住的

55:06.370 --> 55:07.370
好 那么这个减出来

55:07.370 --> 55:08.370
有没有可能是

55:08.370 --> 55:09.370
可能是复数

55:09.370 --> 55:10.370
或者是40

55:10.370 --> 55:11.370
有没有可能

55:11.370 --> 55:12.370
当然有可能

55:12.370 --> 55:13.370
比方说

55:13.370 --> 55:14.370
当前页码是1

55:14.370 --> 55:15.370
1-50复数

55:15.370 --> 55:17.370
它最小只能为1

55:17.370 --> 55:18.370
所以说

55:18.370 --> 55:19.370
这里判断一下

55:19.370 --> 55:20.370
如果说命小于

55:20.370 --> 55:21.370
等于0

55:21.370 --> 55:23.370
或者是小于1

55:23.370 --> 55:24.370
复数为1

55:24.370 --> 55:25.370
最小只能为1

55:25.370 --> 55:26.370
所以都返回什么命

55:26.370 --> 55:28.370
最小的是不是出来了

55:28.370 --> 55:31.190
没问题吧

55:31.190 --> 55:32.190
最小的

55:32.190 --> 55:34.190
我们在这随便找个地方

55:34.190 --> 55:35.190
显示一下吧

55:35.190 --> 55:36.190
你看 组件就非常好测试

55:36.190 --> 55:38.190
随便找个地方显示一下吧

55:38.190 --> 55:39.190
显示这个命

55:39.190 --> 55:41.190
围着不命

55:41.190 --> 55:42.190
显示一下

55:43.190 --> 55:44.190
当前是

55:44.190 --> 55:46.190
最小的数字是不是1

55:46.190 --> 55:47.190
我们要说

55:47.190 --> 55:49.190
当前的1是13

55:49.190 --> 55:50.190
导存

55:50.190 --> 55:51.190
最小的1就是8

55:53.190 --> 55:54.190
好

55:54.190 --> 55:55.190
然后还有一个最大的

55:57.630 --> 55:58.630
Visible

55:59.630 --> 56:00.630
Max

56:00.630 --> 56:02.630
这一刻的信息量很大

56:03.630 --> 56:04.630
大家一定要花时间

56:04.630 --> 56:05.630
今天这个课

56:05.630 --> 56:06.630
可能大家可能要花

56:06.630 --> 56:07.630
一天的时间

56:07.630 --> 56:08.630
我觉得

56:08.630 --> 56:09.630
怎么少也得花

56:09.630 --> 56:10.630
刚开始接触五幼

56:10.630 --> 56:11.630
怎么都早也得花

56:11.630 --> 56:13.630
一天的时间去消化

56:13.630 --> 56:14.630
消化过后了就好多了

56:14.630 --> 56:15.630
后面

56:15.630 --> 56:16.630
后面

56:16.630 --> 56:17.630
我们还会加长

56:17.630 --> 56:19.630
不断的练习各种逐渐

56:19.630 --> 56:20.630
Visible Max

56:20.630 --> 56:21.630
最大的一页

56:22.630 --> 56:23.630
最大的一页

56:23.630 --> 56:24.630
等于啥

56:24.630 --> 56:25.630
都算出来了

56:25.630 --> 56:26.630
最大的还不好算吗

56:27.630 --> 56:28.630
最小的是5

56:28.630 --> 56:30.630
最大的是14

56:31.630 --> 56:32.630
最小的是8

56:32.630 --> 56:33.630
最大的是17

56:35.630 --> 56:36.630
最小的是11

56:36.630 --> 56:38.630
最大的是20

56:38.630 --> 56:39.630
所以加9

56:39.630 --> 56:40.630
为什么加9

56:40.630 --> 56:41.630
为什么不加8

56:41.630 --> 56:42.630
为什么不加7

56:42.630 --> 56:47.670
是不是等于最小的页吗

56:47.670 --> 56:48.670
你看计算属性里边

56:48.670 --> 56:49.670
也可以用自己的

56:49.670 --> 56:50.670
自己的

56:50.670 --> 56:52.670
也可以用自己的计算属性

56:52.670 --> 56:54.670
等于最小的页吗

56:54.670 --> 56:55.670
加上

56:57.670 --> 56:58.670
Visible Number

56:59.670 --> 57:00.670
减1对吧

57:00.670 --> 57:01.670
加10减1

57:01.670 --> 57:02.670
为什么要减1

57:02.670 --> 57:03.670
除掉它自身吗

57:04.670 --> 57:05.670
最大的是不是出来了

57:05.670 --> 57:08.240
大家看最后

57:10.240 --> 57:12.240
你这个最大的能跑到25加9

57:12.240 --> 57:13.240
等于34

57:14.240 --> 57:15.240
但是不好意思

57:15.240 --> 57:16.240
我只有30页

57:16.240 --> 57:18.240
是不是还要做一个判断

57:18.240 --> 57:20.240
判断上Max大约

57:21.240 --> 57:22.240
什么

57:22.240 --> 57:23.240
Page Number

57:24.240 --> 57:25.240
是不是大约的最大页

57:26.240 --> 57:27.240
就这种页数

57:27.240 --> 57:28.240
你不能超过总页数

57:28.240 --> 57:29.240
超过总页数

57:29.240 --> 57:30.240
所以等于什么

57:30.240 --> 57:31.240
等于总页数

57:33.240 --> 57:34.240
最后返回这个Max

57:35.240 --> 57:36.240
Max也有了

57:36.240 --> 57:37.240
看一下

57:38.240 --> 57:39.240
H2

57:40.240 --> 57:46.750
Visible Max

57:46.750 --> 57:47.750
8到17

57:48.750 --> 57:49.750
对吧

57:49.750 --> 57:50.750
没问题吧

57:50.750 --> 57:52.750
那如果说我现在是

57:53.750 --> 57:55.750
现在是30页

57:56.750 --> 57:58.750
那就是25到31

57:58.750 --> 57:59.750
最大只有31

58:00.750 --> 58:01.750
没问题吧

58:01.750 --> 58:02.750
都没问题

58:02.750 --> 58:03.750
好

58:03.750 --> 58:04.750
那么这是这一块

58:05.750 --> 58:06.750
那么现在

58:06.750 --> 58:07.750
这个Numbers好不好求

58:08.750 --> 58:09.750
特别好求

58:10.750 --> 58:11.750
生成一个输足

58:12.750 --> 58:13.750
Numbers

58:14.750 --> 58:15.750
循环

58:15.750 --> 58:16.750
循环

58:18.750 --> 58:19.750
Visible Max

58:19.750 --> 58:21.750
从最小的开始

58:21.750 --> 58:23.750
小于等于

58:24.750 --> 58:26.750
非常清楚的代码

58:26.750 --> 58:28.750
Visible Max

58:29.750 --> 58:30.750
i加加

58:30.750 --> 58:32.750
每次循环Numbers

58:35.750 --> 58:36.750
对吧

58:36.750 --> 58:37.750
返回这个Numbers

58:37.750 --> 58:38.750
就完事了

58:40.750 --> 58:41.750
看一下

58:42.750 --> 58:43.750
25到31

58:43.750 --> 58:45.750
把前面的A型取了

58:47.750 --> 58:48.750
25到31

58:49.750 --> 58:50.750
那如果说当前是

58:51.750 --> 58:52.750
第三页呢

58:53.750 --> 58:54.750
就是1到10

58:55.750 --> 58:57.750
这个组件是不是做的差不多了呀

58:58.750 --> 59:00.750
通过属性就可以控制这个组件的显示

59:00.750 --> 59:01.750
是不是特别好用

59:01.750 --> 59:02.750
以后没有分页的地方

59:02.750 --> 59:03.750
我们只需要写个这个东西

59:03.750 --> 59:05.750
你甭管现在我们开发起来好像有点难度

59:06.750 --> 59:07.750
但是一旦开发好了

59:07.750 --> 59:08.750
后面用起来极其方便

59:09.750 --> 59:10.750
反而是用分页的地方直接来

59:10.750 --> 59:11.750
对吧

59:11.750 --> 59:12.750
我们可以多来几个

59:14.750 --> 59:15.750
多来几个

59:15.750 --> 59:16.750
想来几个来几个

59:16.750 --> 59:17.750
这个是一百零二亿

59:17.750 --> 59:18.750
这个是

59:19.750 --> 59:20.750
二百零二亿

59:20.750 --> 59:21.750
这个是

59:22.750 --> 59:23.750
数据

59:23.750 --> 59:24.750
数据量

59:25.750 --> 59:26.750
两页好像显示不出来

59:26.750 --> 59:27.750
对吧

59:27.750 --> 59:28.750
这边是

59:29.750 --> 59:30.750
六十二亿

59:30.750 --> 59:32.750
然后加个粒面什么

59:32.750 --> 59:34.750
每页只显示三条

59:35.750 --> 59:36.750
看来

59:36.750 --> 59:37.750
当前一把13

59:37.750 --> 59:38.750
保存

59:38.750 --> 59:39.750
你看一下

59:39.750 --> 59:40.750
所以显示出来各种各样的

59:40.750 --> 59:41.750
我们看一下

59:41.750 --> 59:42.750
这是1

59:42.750 --> 59:43.750
这是13

59:43.750 --> 59:44.750
这是

59:44.750 --> 59:47.260
7

59:47.260 --> 59:48.260
6

59:49.260 --> 59:51.260
显示各种各样的情况

59:51.260 --> 59:52.260
我们还可以去调整

59:52.260 --> 59:54.260
比方说调整这个

59:54.260 --> 59:55.260
Visible

59:55.260 --> 59:56.260
Number

59:56.260 --> 59:57.260
它最多的数字呢

59:58.260 --> 59:59.260
要20

59:59.260 --> 01:00:00.260
可以显示20个数字

01:00:00.260 --> 01:00:02.260
你看这里显示多一些

01:00:02.260 --> 01:00:04.260
这是途间用些特别方便

01:00:04.260 --> 01:00:08.210
以后用分页就非常方便

01:00:08.210 --> 01:00:09.210
同学们

01:00:09.210 --> 01:00:10.210
加油

01:00:10.210 --> 01:00:12.210
还没完这个事

01:00:12.210 --> 01:00:15.210
还有一个非常非常重要的事

01:00:15.210 --> 01:00:17.580
没有做

01:00:17.580 --> 01:00:19.580
还有啥事

01:00:19.580 --> 01:00:20.580
加油

01:00:20.580 --> 01:00:24.020
这一刻星期两很大

01:00:24.020 --> 01:00:26.020
这坑一定要过去

01:00:27.020 --> 01:00:28.020
如果说你觉得

01:00:28.020 --> 01:00:29.020
现在有点脑火

01:00:29.020 --> 01:00:30.020
你可以先写到这

01:00:30.020 --> 01:00:32.020
先把代码写到我这个位置

01:00:32.020 --> 01:00:33.020
再往后边写

01:00:33.020 --> 01:00:34.020
因为后边的东西呢

01:00:34.020 --> 01:00:35.020
对有一些第一次

01:00:35.020 --> 01:00:37.020
接触这个东西的人

01:00:37.020 --> 01:00:39.020
来说有点

01:00:39.020 --> 01:00:41.020
不是很要绕得清楚

01:00:41.020 --> 01:00:43.020
今天我们有个课程序

01:00:43.020 --> 01:00:45.400
有点大

01:00:45.400 --> 01:00:46.400
接下来是什么问题呢

01:00:46.400 --> 01:00:47.400
还有什么问题呢

01:00:47.400 --> 01:00:49.400
还有点击问题啊

01:00:49.400 --> 01:00:53.970
点了不过我页码变了呀

01:00:53.970 --> 01:00:56.970
我要改动页码呀

01:00:56.970 --> 01:00:57.970
对不对

01:00:57.970 --> 01:00:58.970
是不是要改动页码

01:00:58.970 --> 01:01:00.970
那就很简单

01:01:00.970 --> 01:01:02.970
我们不是学过时间吗

01:01:02.970 --> 01:01:03.970
对吧

01:01:03.970 --> 01:01:04.970
你点击呗

01:01:04.970 --> 01:01:06.970
我把这些

01:01:06.970 --> 01:01:08.970
我把这些这个

01:01:08.970 --> 01:01:10.970
A元素的这些对攻都去了啊

01:01:10.970 --> 01:01:12.970
这个REF也没什么用

01:01:12.970 --> 01:01:16.370
该去了

01:01:16.370 --> 01:01:17.370
去了不过好像是

01:01:17.370 --> 01:01:18.370
从这些设置下的样式

01:01:18.370 --> 01:01:19.370
不然都是更

01:01:19.370 --> 01:01:20.370
那样式也没问题吧

01:01:20.370 --> 01:01:22.370
刷新一下

01:01:22.370 --> 01:01:23.370
好像这些那样式有点问题的啊

01:01:23.370 --> 01:01:25.370
这个鼠标样式有点问题的

01:01:25.370 --> 01:01:28.370
我们把这个鼠标样式设置一下

01:01:28.370 --> 01:01:29.370
这些鼠标样式

01:01:29.370 --> 01:01:30.370
A元素的默认的鼠标样式呢

01:01:30.370 --> 01:01:32.370
我也Pointer

01:01:32.370 --> 01:01:34.370
这样子点击

01:01:34.370 --> 01:01:36.370
现在问题是点击

01:01:36.370 --> 01:01:37.370
怎么办

01:01:37.370 --> 01:01:38.370
别忘了

01:01:38.370 --> 01:01:39.370
我们就一个简单例子

01:01:39.370 --> 01:01:41.370
现在我们这个地方

01:01:41.370 --> 01:01:44.370
点击过后要干嘛呀

01:01:44.370 --> 01:01:45.370
点击过后

01:01:45.370 --> 01:01:48.740
你说要干嘛

01:01:48.740 --> 01:01:51.740
是不是要把当前的页码设为E

01:01:51.740 --> 01:01:55.890
首先我问大家一个问题

01:01:55.890 --> 01:01:57.890
能不能这样子写

01:01:57.890 --> 01:02:00.890
能不能这样子写

01:02:00.890 --> 01:02:07.020
检查

01:02:07.020 --> 01:02:10.020
空台打开

01:02:10.020 --> 01:02:12.020
点击E

01:02:12.020 --> 01:02:14.020
刷新

01:02:14.020 --> 01:02:15.020
点击E

01:02:15.020 --> 01:02:19.160
有没有反应啊

01:02:19.160 --> 01:02:21.160
有没有反应啊

01:02:21.160 --> 01:02:22.160
这些倒是有反应的啊

01:02:22.160 --> 01:02:23.160
慢慢刷新

01:02:23.160 --> 01:02:24.160
再来点击E

01:02:24.160 --> 01:02:25.160
有反应的

01:02:25.160 --> 01:02:26.160
好像变了

01:02:26.160 --> 01:02:27.160
挺好的

01:02:27.160 --> 01:02:28.160
这里点击

01:02:28.160 --> 01:02:29.160
首页变了

01:02:29.160 --> 01:02:30.160
对吧

01:02:30.160 --> 01:02:31.160
因为数据变

01:02:31.160 --> 01:02:32.160
它会重新选的

01:02:32.160 --> 01:02:33.160
对吧

01:02:33.160 --> 01:02:34.160
之前我们还记得吗

01:02:34.160 --> 01:02:35.160
数据变了

01:02:35.160 --> 01:02:36.160
它会重新选的

01:02:36.160 --> 01:02:37.160
那么这里还有个就是

01:02:37.160 --> 01:02:38.160
属性变了

01:02:38.160 --> 01:02:39.160
它也会重新选的

01:02:39.160 --> 01:02:40.160
属性变化

01:02:40.160 --> 01:02:41.160
它也会重新选的

01:02:41.160 --> 01:02:42.160
现在我们知道两个了

01:02:42.160 --> 01:02:43.160
一个是data变化

01:02:43.160 --> 01:02:44.160
一个是属性变化

01:02:44.160 --> 01:02:45.160
都会重新选的

01:02:45.160 --> 01:02:46.160
但是属性

01:02:46.160 --> 01:02:49.160
你这个组件是不能变的

01:02:49.160 --> 01:02:50.160
之前我们说过一个东西

01:02:50.160 --> 01:02:52.160
叫做单向数据流

01:02:52.160 --> 01:02:53.160
对吧

01:02:53.160 --> 01:02:55.160
我们组件之间是

01:02:55.160 --> 01:02:57.160
他们的数据交换关系

01:02:57.160 --> 01:02:59.160
是这样子的

01:02:59.160 --> 01:03:01.160
组件通信

01:03:01.160 --> 01:03:02.160
总结一下

01:03:02.160 --> 01:03:04.160
我们之前是不是属于Prop

01:03:04.160 --> 01:03:05.160
Prop是什么

01:03:05.160 --> 01:03:06.160
副组件

01:03:06.160 --> 01:03:08.160
传递给直组件

01:03:08.160 --> 01:03:09.160
还说了什么呢

01:03:09.160 --> 01:03:16.980
它直组件没有权利更改

01:03:16.980 --> 01:03:17.980
是吧

01:03:17.980 --> 01:03:19.980
我们有这么一个通信方式

01:03:19.980 --> 01:03:22.980
副组件往直组件传递

01:03:22.980 --> 01:03:23.980
现在呢

01:03:23.980 --> 01:03:24.980
你改了过后

01:03:24.980 --> 01:03:25.980
还会给你报一个警告

01:03:25.980 --> 01:03:28.980
它说应该避免去改动

01:03:28.980 --> 01:03:32.420
直接改动一个属性

01:03:32.420 --> 01:03:33.420
为什么会这样

01:03:33.420 --> 01:03:34.420
有这样的

01:03:34.420 --> 01:03:36.420
它为什么要去避免这个问题呢

01:03:36.420 --> 01:03:38.420
你想啊

01:03:38.420 --> 01:03:41.420
这个数据是副组件扔过来的

01:03:41.420 --> 01:03:43.420
如果说你在直组件里面

01:03:43.420 --> 01:03:45.420
你又大胆的把个数据改了

01:03:45.420 --> 01:03:47.420
你知不知道副组件的数据

01:03:47.420 --> 01:03:49.420
还有没有用到别的地方

01:03:49.420 --> 01:03:51.420
不要说副组件

01:03:51.420 --> 01:03:52.420
假设我给它举个例子

01:03:52.420 --> 01:03:55.420
假设副组件的数据是这样子的

01:03:55.420 --> 01:03:57.420
副组件有个data

01:03:57.420 --> 01:03:59.420
data里面有一些

01:03:59.420 --> 01:04:00.420
比如说current

01:04:00.420 --> 01:04:01.420
当前一码

01:04:01.420 --> 01:04:02.420
当前一码是1

01:04:02.420 --> 01:04:04.420
比方说我自己就写一个

01:04:04.420 --> 01:04:05.420
current呢

01:04:05.420 --> 01:04:06.420
我们这里呢

01:04:06.420 --> 01:04:08.420
设置为current

01:04:08.420 --> 01:04:10.420
设置为这个数据

01:04:10.420 --> 01:04:11.420
这个没问题吧

01:04:11.420 --> 01:04:12.420
我们刚才是写史的

01:04:12.420 --> 01:04:14.420
现在我们是用这个数据设置进去

01:04:14.420 --> 01:04:16.420
这也是一种常见的写法

01:04:16.420 --> 01:04:18.420
那么这个数据是属于谁的

01:04:18.420 --> 01:04:20.420
是属于副组件的

01:04:20.420 --> 01:04:22.420
那么假设副组件里面

01:04:22.420 --> 01:04:24.420
还用到了很多很多的组件

01:04:24.420 --> 01:04:25.420
组件A

01:04:25.420 --> 01:04:28.420
它里面有一个数据X

01:04:28.420 --> 01:04:30.420
也是这个current

01:04:30.420 --> 01:04:31.420
它也用到这个数据

01:04:31.420 --> 01:04:35.180
懂我的意思吗

01:04:35.180 --> 01:04:38.180
还有组件B,C,D,E,F,G

01:04:38.180 --> 01:04:40.180
他们都有可能又会用到这个数据

01:04:40.180 --> 01:04:42.180
而你这个组件倒是

01:04:42.180 --> 01:04:43.180
轻巧了

01:04:43.180 --> 01:04:44.180
你为了解决自己的问题

01:04:44.180 --> 01:04:45.180
把这个数据刷一改

01:04:45.180 --> 01:04:46.180
就导致了副组件

01:04:46.180 --> 01:04:48.180
什么到处都影响到了

01:04:48.180 --> 01:04:49.180
这就是问题

01:04:49.180 --> 01:04:51.180
一旦那个项目变大了

01:04:51.180 --> 01:04:52.180
过后

01:04:52.180 --> 01:04:53.180
你这样去乱改数据

01:04:53.180 --> 01:04:55.180
就造成了这个数据

01:04:55.180 --> 01:04:57.180
很难控制

01:04:57.180 --> 01:04:58.180
很难控制

01:04:58.180 --> 01:04:59.180
你在有的时候

01:04:59.180 --> 01:05:01.180
把整个系统写复杂的时候

01:05:01.180 --> 01:05:03.180
你写一个组件的时候

01:05:03.180 --> 01:05:04.180
你都不敢去用值组件的

01:05:04.180 --> 01:05:05.180
你不敢用了

01:05:05.180 --> 01:05:07.180
你鬼知道这个值组件里面

01:05:07.180 --> 01:05:09.180
把这个数据给改成什么样子了

01:05:09.180 --> 01:05:10.180
这是你的数据

01:05:10.180 --> 01:05:12.180
你有什么权利去改我的数据

01:05:12.180 --> 01:05:14.180
你要不要温我一生的也好

01:05:14.180 --> 01:05:16.180
要不要改是我的事

01:05:16.180 --> 01:05:19.180
懂了意思吗

01:05:19.180 --> 01:05:20.180
比方说

01:05:20.180 --> 01:05:21.180
我给你举个例子

01:05:21.180 --> 01:05:26.180
你在公司里面干活以后

01:05:26.180 --> 01:05:27.180
比方说

01:05:27.180 --> 01:05:28.180
一个简单的例子

01:05:28.180 --> 01:05:29.180
你们平时都吃饭

01:05:29.180 --> 01:05:31.180
要不然在里面去吃饭

01:05:31.180 --> 01:05:32.180
你是一个厨师

01:05:32.180 --> 01:05:33.180
你不是学生

01:05:33.180 --> 01:05:34.180
你是一个厨师

01:05:34.180 --> 01:05:35.180
负责什么

01:05:35.180 --> 01:05:37.180
负责炒菜

01:05:37.180 --> 01:05:39.180
炒什么菜呢

01:05:39.180 --> 01:05:41.180
别人通过属性传给你

01:05:41.180 --> 01:05:43.180
我要说服务员就是你的副组件

01:05:43.180 --> 01:05:44.180
副组件就把属性

01:05:44.180 --> 01:05:46.180
把个菜单用户点的菜

01:05:46.180 --> 01:05:47.180
给你交过来

01:05:47.180 --> 01:05:49.180
就是数据传递

01:05:49.180 --> 01:05:50.180
给到你

01:05:50.180 --> 01:05:52.180
给到你过后你炒完菜

01:05:52.180 --> 01:05:53.180
你自己把这个菜端出去

01:05:53.180 --> 01:05:56.180
给了一个客人

01:05:56.180 --> 01:05:58.180
服务员一年蒙逼

01:05:58.180 --> 01:05:59.180
他说

01:05:59.180 --> 01:06:01.180
你为什么制作聪明呢

01:06:01.180 --> 01:06:03.180
我这个菜是要给外卖起手的

01:06:03.180 --> 01:06:04.180
他是个外卖

01:06:04.180 --> 01:06:05.180
你端出来干嘛

01:06:05.180 --> 01:06:06.180
你交给我不行吗

01:06:06.180 --> 01:06:08.180
这是我给你的东西

01:06:08.180 --> 01:06:10.180
是我来负责的东西

01:06:10.180 --> 01:06:12.180
不应该你自己去制作聪明去负责

01:06:12.180 --> 01:06:14.180
懂了的意思吧

01:06:14.180 --> 01:06:16.180
现在问题就在这

01:06:16.180 --> 01:06:18.180
你没有权力改呀

01:06:18.180 --> 01:06:19.180
那问题是

01:06:19.180 --> 01:06:20.180
你没有权力改怎么办

01:06:20.180 --> 01:06:21.180
这个事

01:06:21.180 --> 01:06:22.180
这数据是谁的

01:06:22.180 --> 01:06:23.180
是副组件的

01:06:23.180 --> 01:06:25.180
我只能说

01:06:25.180 --> 01:06:27.180
发出一个通知

01:06:27.180 --> 01:06:29.180
我告诉副组件

01:06:29.180 --> 01:06:31.180
我在常识切换页面

01:06:31.180 --> 01:06:34.180
要不要改数据你去定

01:06:34.180 --> 01:06:35.180
要怎么去操作

01:06:35.180 --> 01:06:36.180
你去定

01:06:36.180 --> 01:06:37.180
跟我没关系

01:06:37.180 --> 01:06:39.180
我就告诉你发生了一件事了

01:06:39.180 --> 01:06:40.180
啥意思呢

01:06:40.180 --> 01:06:41.180
就是你是厨师

01:06:41.180 --> 01:06:43.180
你炒完了菜过后

01:06:43.180 --> 01:06:45.180
你按照他的菜单炒完了菜

01:06:45.180 --> 01:06:46.180
你把菜呢就放出去

01:06:46.180 --> 01:06:47.180
含一声对吧

01:06:47.180 --> 01:06:49.180
我这里事情做完了

01:06:49.180 --> 01:06:50.180
通知一下

01:06:50.180 --> 01:06:53.180
剩下的事情不该你管了

01:06:53.180 --> 01:06:55.180
服务员自然会来进行操作

01:06:55.180 --> 01:06:57.180
他要给外卖起手

01:06:57.180 --> 01:06:58.180
还是给客户

01:06:58.180 --> 01:06:59.180
随便他

01:06:59.180 --> 01:07:01.180
跟你没关系

01:07:01.180 --> 01:07:03.180
于是呢我们看这张图

01:07:03.180 --> 01:07:04.180
这张我要讲一个东西

01:07:04.180 --> 01:07:05.180
重要的东西叫做

01:07:05.180 --> 01:07:07.180
组件实现

01:07:07.180 --> 01:07:09.180
副组件在使用直住件

01:07:09.180 --> 01:07:11.180
给他传了一些属性进来

01:07:11.180 --> 01:07:13.180
然后直住件发生了一件事

01:07:13.180 --> 01:07:15.180
比方说点击了某个东西

01:07:15.180 --> 01:07:16.180
或者是某个时间到了

01:07:16.180 --> 01:07:18.180
总之在某个时间点发生了一件事

01:07:18.180 --> 01:07:20.180
那这件事他处理不了

01:07:20.180 --> 01:07:22.180
跟他没关系

01:07:22.180 --> 01:07:23.180
后续的处理

01:07:23.180 --> 01:07:24.180
到底该怎么处理

01:07:24.180 --> 01:07:25.180
没关系

01:07:25.180 --> 01:07:26.180
比方说像我们这个点了分页过后

01:07:26.180 --> 01:07:28.180
就切换个页码吗

01:07:28.180 --> 01:07:29.180
那不是哦

01:07:29.180 --> 01:07:30.180
还有改造什么

01:07:30.180 --> 01:07:31.180
比方说上面还有一个东西

01:07:31.180 --> 01:07:32.180
还有一个列表

01:07:32.180 --> 01:07:33.180
不是吧

01:07:33.180 --> 01:07:34.180
还改动列表的数据

01:07:34.180 --> 01:07:36.180
那个列表可能是一些评论

01:07:36.180 --> 01:07:38.180
也有可能是一篇文章

01:07:38.180 --> 01:07:39.180
那到底是文章还是评论的

01:07:39.180 --> 01:07:40.180
你这个组件能负责吗

01:07:40.180 --> 01:07:41.180
跟你说有什么关系呢

01:07:41.180 --> 01:07:43.180
你只能说发出通知

01:07:43.180 --> 01:07:45.180
让上面去处理

01:07:45.180 --> 01:07:46.180
懂了意思吧

01:07:46.180 --> 01:07:47.180
说这边呢

01:07:47.180 --> 01:07:49.180
直住件他有的时候呢

01:07:49.180 --> 01:07:50.180
会发出一个通知

01:07:50.180 --> 01:07:51.180
我就把他叫做事件

01:07:51.180 --> 01:07:52.180
叫这个过程的叫做

01:07:52.180 --> 01:07:54.180
抛出事件

01:07:54.180 --> 01:07:55.180
直住件发生了一件事

01:07:55.180 --> 01:07:57.180
但自己处理不了

01:07:57.180 --> 01:07:58.180
于是呢通过事件的方式呢

01:07:58.180 --> 01:08:00.180
通知副组件去处理

01:08:00.180 --> 01:08:02.500
好

01:08:02.500 --> 01:08:04.500
那么我们这里呢

01:08:04.500 --> 01:08:05.500
就是有这么个概念的

01:08:05.500 --> 01:08:07.500
就是抛出事件

01:08:07.500 --> 01:08:09.500
那怎么来抛出事件呢

01:08:09.500 --> 01:08:10.500
你看这里是不是要抛出事件

01:08:10.500 --> 01:08:12.500
点击的时候要抛出事件吗

01:08:12.500 --> 01:08:13.500
怎么来抛出事件呢

01:08:13.500 --> 01:08:15.500
要表达我们这里写的方法

01:08:15.500 --> 01:08:18.700
这里写的啊

01:08:18.700 --> 01:08:20.700
新的概念呢

01:08:20.700 --> 01:08:22.700
Message方法

01:08:22.700 --> 01:08:25.700
叫做Hand Click

01:08:25.700 --> 01:08:27.700
处理点击

01:08:27.700 --> 01:08:29.700
处理点击的时候

01:08:29.700 --> 01:08:32.700
那么这里是不是要抛出一个时间

01:08:32.700 --> 01:08:35.700
抛出一个事件

01:08:35.700 --> 01:08:36.700
好

01:08:36.700 --> 01:08:37.700
这边我们注册事件

01:08:37.700 --> 01:08:38.700
这个事件里面

01:08:38.700 --> 01:08:41.700
我们就调用这个Hand Click

01:08:41.700 --> 01:08:42.700
调用这个方法

01:08:42.700 --> 01:08:43.700
那么调用方法的时候

01:08:43.700 --> 01:08:44.700
你可以直接把一个

01:08:44.700 --> 01:08:46.700
方法名字写进去

01:08:46.700 --> 01:08:47.700
也可以写这种方式

01:08:47.700 --> 01:08:48.700
两种格式都可以

01:08:48.700 --> 01:08:50.700
就是你写个函数名字

01:08:50.700 --> 01:08:52.700
他直接调用函数

01:08:52.700 --> 01:08:54.700
那有没有事件参数

01:08:54.700 --> 01:08:55.700
有事件参数

01:08:55.700 --> 01:08:56.700
参数是什么呢

01:08:56.700 --> 01:08:58.700
参数就是那个Event

01:08:58.700 --> 01:08:59.700
我们再输出一下吧

01:08:59.700 --> 01:09:03.910
顺便讲一讲

01:09:03.910 --> 01:09:05.910
点击

01:09:05.910 --> 01:09:09.350
点击

01:09:09.350 --> 01:09:10.350
点击

01:09:10.350 --> 01:09:11.350
你看是不是个猫死一蚊子

01:09:11.350 --> 01:09:13.350
跟以前写的动物事件参数是一样的

01:09:13.350 --> 01:09:15.350
他会自己给你传进来

01:09:15.350 --> 01:09:17.350
这是这种

01:09:17.350 --> 01:09:18.350
这种写吧

01:09:18.350 --> 01:09:20.350
他会自动给你传入动物事件参数

01:09:20.350 --> 01:09:22.350
也可以这样的写

01:09:22.350 --> 01:09:23.350
写这个东西

01:09:23.350 --> 01:09:24.350
那么这个东西

01:09:24.350 --> 01:09:25.350
如何传进时间参数呢

01:09:25.350 --> 01:09:26.350
不要说我

01:09:26.350 --> 01:09:27.350
这样写的肯定没有时间参数了

01:09:27.350 --> 01:09:30.350
肯定没有时间参数意了

01:09:30.350 --> 01:09:32.350
肯定没有了

01:09:32.350 --> 01:09:33.350
点击

01:09:33.350 --> 01:09:35.350
你都没有传进去吧

01:09:35.350 --> 01:09:37.350
那么如果说这种写法的话

01:09:37.350 --> 01:09:38.350
你可以用什么呢

01:09:38.350 --> 01:09:40.350
用一个特殊的变量

01:09:40.350 --> 01:09:41.350
多了Event

01:09:41.350 --> 01:09:43.350
用一个特殊的变量

01:09:43.350 --> 01:09:45.350
来表示时间参数

01:09:45.350 --> 01:09:46.350
保存

01:09:46.350 --> 01:09:48.350
刷新

01:09:48.350 --> 01:09:50.350
时间参数又来了

01:09:50.350 --> 01:09:52.350
反正这两种写法

01:09:52.350 --> 01:09:53.350
都可以

01:09:53.350 --> 01:09:54.350
你可以用这种调用的方式

01:09:54.350 --> 01:09:55.350
调用的方式

01:09:55.350 --> 01:09:56.350
传参数比较灵活一点

01:09:56.350 --> 01:09:58.350
你可以额外的去加一些参数

01:09:58.350 --> 01:10:00.350
你想穿什么穿什么

01:10:00.350 --> 01:10:02.350
如果说你不写这个的话

01:10:02.350 --> 01:10:03.350
只有一个

01:10:03.350 --> 01:10:04.350
只有一个参数传进来

01:10:04.350 --> 01:10:05.350
就是时间参数

01:10:05.350 --> 01:10:07.350
我们就说到这个为止

01:10:08.350 --> 01:10:09.350
那么这边

01:10:09.350 --> 01:10:10.350
我们先这样子写吧

01:10:10.350 --> 01:10:11.350
不需要这个参数

01:10:11.350 --> 01:10:13.350
也可以用时间参数意

01:10:13.350 --> 01:10:14.350
问题是

01:10:14.350 --> 01:10:15.350
我们这个方法里边

01:10:15.350 --> 01:10:16.350
它调用那个方法

01:10:16.350 --> 01:10:18.350
点击的时候调用那个方法

01:10:18.350 --> 01:10:20.350
我要抛出一个时间

01:10:20.350 --> 01:10:21.350
我要通知副主见

01:10:21.350 --> 01:10:22.350
我发生了一件事

01:10:22.350 --> 01:10:24.350
夜马变动了

01:10:24.350 --> 01:10:27.350
怎么抛出呢

01:10:27.350 --> 01:10:28.350
我们要使用

01:10:28.350 --> 01:10:30.350
我用实力里边的一个

01:10:30.350 --> 01:10:32.350
成员叫做

01:10:32.350 --> 01:10:34.350
拋出

01:10:34.350 --> 01:10:36.350
现在

01:10:36.350 --> 01:10:40.300
实力成员

01:10:40.300 --> 01:10:42.300
实力成员

01:10:42.300 --> 01:10:44.300
我们以前学过了什么实力成员

01:10:44.300 --> 01:10:45.300
一个是Mount

01:10:45.300 --> 01:10:47.300
对不对

01:10:47.300 --> 01:10:48.300
实力成员

01:10:48.300 --> 01:10:49.300
还有什么

01:10:49.300 --> 01:10:50.300
接下来我们这里会写的

01:10:50.300 --> 01:10:51.300
Mate

01:10:51.300 --> 01:10:52.300
非常重要的Mate

01:10:52.300 --> 01:10:53.300
表示

01:10:53.300 --> 01:10:56.300
在主见中

01:10:56.300 --> 01:11:01.770
拋出一个时间

01:11:01.770 --> 01:11:02.770
我们来看一下

01:11:02.770 --> 01:11:03.770
怎么来拋出

01:11:03.770 --> 01:11:04.770
这是个方法

01:11:04.770 --> 01:11:05.770
首先你要写上一个

01:11:05.770 --> 01:11:06.770
事件的名字

01:11:06.770 --> 01:11:07.770
比方说我做好菜了

01:11:07.770 --> 01:11:08.770
那么就是一个

01:11:08.770 --> 01:11:10.770
Felix Food

01:11:10.770 --> 01:11:11.770
完成

01:11:11.770 --> 01:11:12.770
我实物完成了

01:11:12.770 --> 01:11:14.770
那么该事件取个名字

01:11:14.770 --> 01:11:15.770
随便取什么名字都可以

01:11:15.770 --> 01:11:16.770
比方说我们该取个名字

01:11:16.770 --> 01:11:18.770
叫做Page Change

01:11:18.770 --> 01:11:19.770
取这么一个名字

01:11:19.770 --> 01:11:20.770
记住啊

01:11:20.770 --> 01:11:21.770
我们现在拋出一个事件

01:11:21.770 --> 01:11:22.770
事件的名字叫做Page Change

01:11:22.770 --> 01:11:23.770
因为一个主见里边

01:11:23.770 --> 01:11:25.770
有可能有各种各样的事件

01:11:25.770 --> 01:11:27.770
不同的时候发生了不同的事情

01:11:27.770 --> 01:11:29.770
比方说你在一个公司里边

01:11:29.770 --> 01:11:31.770
天天安不去办的工作

01:11:31.770 --> 01:11:32.770
上面也不管你

01:11:32.770 --> 01:11:33.770
给你的任务就是属性

01:11:33.770 --> 01:11:35.770
通过一些属性的给你一些任务

01:11:35.770 --> 01:11:37.770
那么你去完成

01:11:37.770 --> 01:11:38.770
完成的过程中

01:11:38.770 --> 01:11:39.770
可能你突然要离职了

01:11:39.770 --> 01:11:40.770
是不是一个事情

01:11:40.770 --> 01:11:41.770
要通知到上边去

01:11:41.770 --> 01:11:42.770
我要离职了

01:11:42.770 --> 01:11:43.770
接下来要做一些处理

01:11:43.770 --> 01:11:45.770
那么这就是一个事件

01:11:45.770 --> 01:11:47.770
有的时候你可能要请假

01:11:47.770 --> 01:11:49.770
那么是不是又是一个事件

01:11:49.770 --> 01:11:50.770
有的时候你工作做完了

01:11:50.770 --> 01:11:52.770
我不知道接下来要做啥了

01:11:52.770 --> 01:11:53.770
你是不是要拋出个事件

01:11:53.770 --> 01:11:54.770
通知上边

01:11:54.770 --> 01:11:56.770
因为有些事情你处理不了

01:11:56.770 --> 01:11:58.770
那么这里就是拋出个事件

01:11:58.770 --> 01:11:59.770
这页面变化了

01:11:59.770 --> 01:12:00.770
我处理不了

01:12:00.770 --> 01:12:01.770
你去处理

01:12:01.770 --> 01:12:02.770
让上边去处理

01:12:02.770 --> 01:12:03.770
拋出个事件

01:12:03.770 --> 01:12:05.770
能理解的意思吗

01:12:05.770 --> 01:12:06.770
拋出事件的时候

01:12:06.770 --> 01:12:09.770
其实还要一些额外的信息

01:12:09.770 --> 01:12:11.770
就是事件的数据

01:12:11.770 --> 01:12:13.770
比方说你要请假

01:12:13.770 --> 01:12:15.770
你是不是得遞交一个请假条

01:12:15.770 --> 01:12:16.770
你要离职

01:12:16.770 --> 01:12:18.770
是不是要写个离职申请

01:12:18.770 --> 01:12:20.770
离职什么玩意

01:12:20.770 --> 01:12:21.770
离职申请

01:12:21.770 --> 01:12:23.770
比方说你完成任务了

01:12:23.770 --> 01:12:24.770
是不是要提交个公单

01:12:24.770 --> 01:12:26.770
或者是你要写些周报

01:12:26.770 --> 01:12:27.770
今天工作完成了

01:12:27.770 --> 01:12:29.770
我要写个周报日报

01:12:29.770 --> 01:12:31.770
可能会设计到一些数据

01:12:31.770 --> 01:12:33.770
但是也有可能不设计

01:12:33.770 --> 01:12:35.770
也有可能会设计到一些数据

01:12:35.770 --> 01:12:37.770
等到一间下班了

01:12:37.770 --> 01:12:38.770
我要回家了

01:12:38.770 --> 01:12:39.770
那就回家

01:12:39.770 --> 01:12:40.770
打开下班就完了

01:12:40.770 --> 01:12:42.770
有可能有的时候需要数据

01:12:42.770 --> 01:12:43.770
可能是不需要

01:12:43.770 --> 01:12:44.770
这个东西叫什么

01:12:44.770 --> 01:12:47.770
叫事件参数

01:12:47.770 --> 01:12:49.770
其实事件并不陌生

01:12:49.770 --> 01:12:50.770
我们之前学习动物元素

01:12:50.770 --> 01:12:52.770
各种各样的时间

01:12:52.770 --> 01:12:56.770
但是我们从来没有拋出过时间

01:12:56.770 --> 01:12:58.770
我们使用过时间参数

01:12:58.770 --> 01:13:00.770
但是我们没有在拋出时间的时候

01:13:00.770 --> 01:13:02.770
指定时间参数

01:13:02.770 --> 01:13:03.770
现在我们就告诉他

01:13:03.770 --> 01:13:05.770
我这个叶码改变了

01:13:05.770 --> 01:13:07.770
我给力有没有时间参数呢

01:13:07.770 --> 01:13:08.770
有一个时间参数

01:13:08.770 --> 01:13:09.770
第二个参数就是时间参数

01:13:09.770 --> 01:13:12.770
有一个新的叶码

01:13:12.770 --> 01:13:14.770
我把新的叶码给力

01:13:14.770 --> 01:13:16.770
就是我尝试者从现在的叶码

01:13:16.770 --> 01:13:18.770
挑到新的叶码区

01:13:18.770 --> 01:13:20.770
我把时间给力

01:13:20.770 --> 01:13:21.770
这个逻辑能理解吗

01:13:21.770 --> 01:13:22.770
你先不要管整体

01:13:22.770 --> 01:13:23.770
整天我们还没写完

01:13:23.770 --> 01:13:25.770
写完我再同意解释一遍

01:13:25.770 --> 01:13:28.770
拋出时间逻辑能不能理解

01:13:28.770 --> 01:13:30.770
点击过后我要告诉上边

01:13:30.770 --> 01:13:32.770
我发生了一件事了

01:13:32.770 --> 01:13:33.770
而且相关的数据我会给力

01:13:33.770 --> 01:13:34.770
作为第二个参数

01:13:34.770 --> 01:13:35.770
第二个参数可以是任何的一项

01:13:35.770 --> 01:13:36.770
可以是数字

01:13:36.770 --> 01:13:37.770
可以是字无算

01:13:37.770 --> 01:13:38.770
可以是对象

01:13:38.770 --> 01:13:40.770
这是你自己致敬的

01:13:40.770 --> 01:13:42.770
那么现在问题又来了

01:13:42.770 --> 01:13:44.770
现在叶码是多少呢

01:13:44.770 --> 01:13:45.770
叶码数是1

01:13:45.770 --> 01:13:46.770
那当然可以写这个1

01:13:46.770 --> 01:13:48.770
那如果说点进它呢

01:13:48.770 --> 01:13:49.770
那就不是1了对吧

01:13:49.770 --> 01:13:50.770
点进它呢

01:13:50.770 --> 01:13:51.770
又不是1了

01:13:51.770 --> 01:13:52.770
点它又不是1了

01:13:52.770 --> 01:13:53.770
所以我们尽量把通用一点

01:13:53.770 --> 01:13:54.770
这个还出来

01:13:54.770 --> 01:13:55.770
你给我传个参数进来

01:13:55.770 --> 01:13:56.770
这个还数

01:13:56.770 --> 01:13:57.770
比方说我们这里一个6配级

01:13:57.770 --> 01:13:58.770
你给我传进来

01:13:58.770 --> 01:13:59.770
好我这边呢

01:13:59.770 --> 01:14:01.770
就把这个6配级给跑出来

01:14:01.770 --> 01:14:03.770
那么这边就怎么写

01:14:03.770 --> 01:14:04.770
点击首页的时候

01:14:04.770 --> 01:14:07.770
是不是可以这样的传参数

01:14:07.770 --> 01:14:08.770
传个1对吧

01:14:08.770 --> 01:14:09.770
点击首页的时候

01:14:09.770 --> 01:14:12.080
我就传1

01:14:12.080 --> 01:14:13.080
点击上一页呢

01:14:13.080 --> 01:14:14.080
我就传啥呀

01:14:14.080 --> 01:14:16.080
我就传当前页嘛

01:14:16.080 --> 01:14:19.080
current-1

01:14:19.080 --> 01:14:23.610
好好去体会啊

01:14:23.610 --> 01:14:25.610
这一块初选择

01:14:25.610 --> 01:14:26.610
第一次结束这个玩意

01:14:26.610 --> 01:14:28.610
有点有点懵

01:14:28.610 --> 01:14:29.610
但是呢这个坑一定要过

01:14:29.610 --> 01:14:31.610
就跟你们刚刚开始学习运唤一样

01:14:31.610 --> 01:14:33.610
一定要过这个坑

01:14:33.610 --> 01:14:34.610
点上一次

01:14:34.610 --> 01:14:35.610
上一页是不是我给他传这个

01:14:35.610 --> 01:14:37.610
当前页嘛解1

01:14:37.610 --> 01:14:38.610
好点这个呢

01:14:38.610 --> 01:14:40.610
中间的数字呢

01:14:40.610 --> 01:14:42.610
handle-click

01:14:42.610 --> 01:14:43.610
我应该传什么呢

01:14:43.610 --> 01:14:45.610
传n嘛

01:14:45.610 --> 01:14:47.610
数字是多少我就传多少呢

01:14:47.610 --> 01:14:48.610
好这边

01:14:48.610 --> 01:14:50.610
点这个呢

01:14:50.610 --> 01:14:53.610
handle-click

01:14:53.610 --> 01:14:55.610
下一页是不是n

01:14:55.610 --> 01:14:56.610
当前页嘛

01:14:56.610 --> 01:14:57.610
加1

01:14:57.610 --> 01:14:58.610
对吧

01:14:58.610 --> 01:15:00.610
然后点这个呢

01:15:00.610 --> 01:15:02.610
handle-click

01:15:02.610 --> 01:15:03.610
我就是最后一页

01:15:03.610 --> 01:15:05.610
就是page-number

01:15:05.610 --> 01:15:07.610
对吧这个很好传的

01:15:07.610 --> 01:15:09.610
所以写个函数就可以通用了

01:15:09.610 --> 01:15:10.610
对吧

01:15:10.610 --> 01:15:11.610
好写好这个过后呢

01:15:11.610 --> 01:15:13.610
这里输出一下啊

01:15:13.610 --> 01:15:19.030
6 page

01:15:19.030 --> 01:15:20.030
点4

01:15:20.030 --> 01:15:21.030
你看是不是输出4

01:15:21.030 --> 01:15:22.030
点5

01:15:22.030 --> 01:15:23.030
是不是输出5

01:15:23.030 --> 01:15:24.030
点这个是不是输出1

01:15:24.030 --> 01:15:25.030
点这个是不是输出31

01:15:25.030 --> 01:15:26.030
点这个输出4

01:15:26.030 --> 01:15:28.030
下一页嘛

01:15:28.030 --> 01:15:29.030
不仅如此

01:15:29.030 --> 01:15:30.030
我引发了一个事件

01:15:30.030 --> 01:15:31.030
我拋出了一个事件

01:15:31.030 --> 01:15:33.030
现在没有效果当然

01:15:33.030 --> 01:15:34.030
现在

01:15:34.030 --> 01:15:35.030
现在这一步完成了

01:15:35.030 --> 01:15:36.030
植株件发生了一件事

01:15:36.030 --> 01:15:37.030
我发

01:15:37.030 --> 01:15:38.030
我通知了副组建

01:15:38.030 --> 01:15:39.030
但是现在的问题是

01:15:39.030 --> 01:15:41.030
我把数据也扔过去了

01:15:41.030 --> 01:15:43.030
数据通过这个人扔过去了

01:15:43.030 --> 01:15:45.030
但是副组建有没有处理啊

01:15:45.030 --> 01:15:46.030
完全没处理

01:15:48.030 --> 01:15:49.030
完全没有处理任

01:15:49.030 --> 01:15:50.030
做任何事情

01:15:50.030 --> 01:15:51.030
你通知了我了

01:15:51.030 --> 01:15:52.030
我在睡觉

01:15:52.030 --> 01:15:55.030
你提交了个请假申请

01:15:55.030 --> 01:15:56.030
那么上面的

01:15:56.030 --> 01:15:57.030
可根本没有看到

01:15:58.030 --> 01:15:59.030
还在外面去查

01:15:59.030 --> 01:16:00.030
没有看到

01:16:01.030 --> 01:16:02.030
明儿可以处理

01:16:02.030 --> 01:16:03.030
可以不处理

01:16:03.030 --> 01:16:04.030
现在我们的副组建有没有处理

01:16:04.030 --> 01:16:05.030
没有处理

01:16:06.030 --> 01:16:07.030
压根儿没有处理

01:16:08.030 --> 01:16:10.030
那么副组建能不能处理的可以

01:16:10.030 --> 01:16:13.030
那么它的处理过程叫做注册事件

01:16:13.030 --> 01:16:15.030
这个东西一定不陌生

01:16:15.030 --> 01:16:16.030
你一定不陌生

01:16:18.980 --> 01:16:19.980
这个玩意就是注册事件

01:16:20.980 --> 01:16:22.980
你们平时注册事件用的多

01:16:23.980 --> 01:16:25.980
手动的拋出事件从来没用过

01:16:26.980 --> 01:16:27.980
为什么呢

01:16:27.980 --> 01:16:28.980
因为这个A元素不是你做的

01:16:28.980 --> 01:16:30.980
是别人给你做好的

01:16:30.980 --> 01:16:32.980
别人在内部就给你拋出事件了

01:16:32.980 --> 01:16:33.980
只是你不知道而已

01:16:33.980 --> 01:16:34.980
你只管注册

01:16:34.980 --> 01:16:36.980
你说当他拋出这个

01:16:36.980 --> 01:16:37.980
click事件的时候

01:16:37.980 --> 01:16:39.980
我去做这么一个处理

01:16:40.980 --> 01:16:41.980
当这个按点击的时候

01:16:41.980 --> 01:16:43.980
我去做另外一个处理

01:16:44.980 --> 01:16:45.980
当他失去焦点的时候

01:16:45.980 --> 01:16:46.980
我去做另外一个处理

01:16:46.980 --> 01:16:47.980
就叫注册事件

01:16:48.980 --> 01:16:49.980
那么这边也是一样

01:16:50.980 --> 01:16:51.980
当这个组建

01:16:52.980 --> 01:16:53.980
发生了配级

01:16:53.980 --> 01:16:54.980
千级这个事件的时候

01:16:54.980 --> 01:16:56.980
当它夜马改变的时候

01:16:56.980 --> 01:16:57.980
什么时候发生配级千级

01:16:58.980 --> 01:16:59.980
当它运行到这个代码的时候

01:16:59.980 --> 01:17:00.980
它就会引发这个事件

01:17:01.980 --> 01:17:03.980
当它会引发这个事件的时候

01:17:04.980 --> 01:17:05.980
我去做处理

01:17:05.980 --> 01:17:06.980
就叫做注册事件

01:17:08.980 --> 01:17:09.980
比较做出什么处理呢

01:17:10.980 --> 01:17:11.980
几个面设置吧

01:17:12.980 --> 01:17:14.980
handlePageChange

01:17:15.980 --> 01:17:22.330
handlePageChange

01:17:23.330 --> 01:17:24.330
我们直接输出一句话

01:17:24.330 --> 01:17:26.330
夜马改变了

01:17:26.330 --> 01:17:30.280
好,现在我们把这个去掉

01:17:30.280 --> 01:17:31.280
把这个输出去掉

01:17:31.280 --> 01:17:32.280
好,来看一下

01:17:32.280 --> 01:17:33.280
这句话能不能输出

01:17:33.280 --> 01:17:34.280
这在副组建里面了

01:17:35.280 --> 01:17:36.280
看它能不能说

01:17:36.280 --> 01:17:37.280
副组建能不能收到这个通知

01:17:40.040 --> 01:17:41.040
点二

01:17:42.040 --> 01:17:43.040
看见没有

01:17:43.040 --> 01:17:44.040
我没动的时候

01:17:44.040 --> 01:17:45.040
还有什么都没发生

01:17:45.040 --> 01:17:46.040
但只要一动

01:17:46.040 --> 01:17:47.040
植住建

01:17:47.040 --> 01:17:48.040
你只要一点

01:17:48.040 --> 01:17:49.040
植住建你拋出一个事件

01:17:49.040 --> 01:17:51.040
副组建收到这个事件

01:17:51.040 --> 01:17:52.040
它做了一定的处理

01:17:52.040 --> 01:17:53.040
就运行了这个函数

01:17:53.040 --> 01:17:54.040
看到没

01:17:55.040 --> 01:17:56.040
你想一想

01:17:56.040 --> 01:17:57.040
你现在不看植住建

01:17:57.040 --> 01:17:58.040
你想一想

01:17:58.040 --> 01:18:00.040
直接从副组建的角度去想

01:18:01.040 --> 01:18:02.040
这个玩意是不是特别简单

01:18:02.040 --> 01:18:03.040
只从副组建的角度去看

01:18:03.040 --> 01:18:04.040
不要这个是别人做好的

01:18:05.040 --> 01:18:06.040
你把这些数据扔过去

01:18:06.040 --> 01:18:07.040
它一马该变了

01:18:07.040 --> 01:18:08.040
它会告诉你

01:18:08.040 --> 01:18:10.040
所以这样的用戏特别简单

01:18:10.040 --> 01:18:11.040
对不对

01:18:11.040 --> 01:18:12.040
在植住建里面去做这些操作

01:18:12.040 --> 01:18:14.040
就是为了让副组建用起来

01:18:14.040 --> 01:18:15.040
非常简单

01:18:15.040 --> 01:18:16.040
这样的作用

01:18:16.040 --> 01:18:17.040
做法跟我们平时用的

01:18:17.040 --> 01:18:18.040
A元素

01:18:18.040 --> 01:18:19.040
8寸元素是不一样的

01:18:19.040 --> 01:18:21.040
好像是别人可以做好的

01:18:21.040 --> 01:18:22.040
其实

01:18:22.040 --> 01:18:23.040
这个函数的什么时候运行了

01:18:23.040 --> 01:18:24.040
是在植住建

01:18:24.040 --> 01:18:26.040
拋出事件的那一颗运行的

01:18:26.040 --> 01:18:28.040
我们在做副组建的时候

01:18:28.040 --> 01:18:29.040
不用去想

01:18:29.040 --> 01:18:30.040
这个植住建

01:18:30.040 --> 01:18:33.040
什么时候会给我拋出事件

01:18:33.040 --> 01:18:34.040
不用管

01:18:34.040 --> 01:18:36.040
只需要知道这个事件的含义就行了

01:18:36.040 --> 01:18:37.040
含义是什么

01:18:37.040 --> 01:18:38.040
植码变化的时候

01:18:38.040 --> 01:18:39.040
植码变化的时候

01:18:39.040 --> 01:18:40.040
它自然而然

01:18:40.040 --> 01:18:41.040
植住建已经做好了

01:18:41.040 --> 01:18:42.040
它自然而然会引发这个事件

01:18:42.040 --> 01:18:43.040
自然会运行这个函数

01:18:43.040 --> 01:18:45.040
你直接运行就完事了

01:18:46.040 --> 01:18:47.040
现在问题是什么呢

01:18:47.040 --> 01:18:48.040
问题是

01:18:48.040 --> 01:18:50.040
它刚才不是给我

01:18:50.040 --> 01:18:51.040
给了我一个数据

01:18:51.040 --> 01:18:52.040
就是新的植码

01:18:52.040 --> 01:18:54.040
新的植码我怎么来过去呢

01:18:54.040 --> 01:18:56.040
这就是事件参数

01:18:56.040 --> 01:18:58.800
又配级

01:18:58.800 --> 01:18:59.800
那个名字可以随便取

01:18:59.800 --> 01:19:01.800
这是行参

01:19:01.800 --> 01:19:02.800
植码改变

01:19:02.800 --> 01:19:03.800
你看

01:19:03.800 --> 01:19:05.800
这个数据是不是在副组建里面获取到了

01:19:05.800 --> 01:19:07.800
在植住建里面拋出

01:19:07.800 --> 01:19:08.800
把这个数据拋出

01:19:08.800 --> 01:19:10.800
副组建里面就可以收到这个数据

01:19:10.800 --> 01:19:12.800
从我参数收到

01:19:12.800 --> 01:19:15.750
小心

01:19:15.750 --> 01:19:16.750
看下面的输出

01:19:16.750 --> 01:19:19.510
看呗

01:19:19.510 --> 01:19:21.510
是不是收到这个数据了

01:19:21.510 --> 01:19:23.510
当然这是事件的这种邪法

01:19:23.510 --> 01:19:24.510
我们刚才说了

01:19:24.510 --> 01:19:25.510
在事件里面说的

01:19:25.510 --> 01:19:26.510
可以写一个函数名字

01:19:26.510 --> 01:19:28.510
也可以写函数的调用

01:19:28.510 --> 01:19:30.510
调用的时候是要手动传参

01:19:30.510 --> 01:19:31.510
手动传参的话

01:19:31.510 --> 01:19:33.510
我们怎么来获取这边的参数呢

01:19:33.510 --> 01:19:34.510
可以使用这个一问策

01:19:34.510 --> 01:19:35.510
对吧

01:19:35.510 --> 01:19:36.510
一问策怎么说呢

01:19:36.510 --> 01:19:38.510
就是给你拋出来一个参数

01:19:38.510 --> 01:19:39.510
只不过了以前我们使用

01:19:39.510 --> 01:19:40.510
eviton的时候

01:19:40.510 --> 01:19:42.510
是内置的这个n元数

01:19:42.510 --> 01:19:43.510
内置的这个n元数

01:19:43.510 --> 01:19:45.510
它是唯有内部给你拋出的

01:19:45.510 --> 01:19:47.510
它把那个动物参数给你拋出来了

01:19:47.510 --> 01:19:48.510
所以说你可以使用

01:19:48.510 --> 01:19:49.510
那么这里是一样的

01:19:49.510 --> 01:19:51.510
这是我们自己的主线拋出的数据

01:19:51.510 --> 01:19:52.510
就是在这里面

01:19:52.510 --> 01:19:54.510
所以我们这里仍然一样

01:19:54.510 --> 01:19:58.490
小伙子仍然一样

01:19:58.490 --> 01:19:59.490
是

01:19:59.490 --> 01:20:00.490
看呗

01:20:01.490 --> 01:20:02.490
好那么这里

01:20:02.490 --> 01:20:04.490
搞清楚了过后呢

01:20:04.490 --> 01:20:05.490
这里该咋行

01:20:05.490 --> 01:20:07.490
数据是我的

01:20:07.490 --> 01:20:08.490
这数据是我的

01:20:08.490 --> 01:20:10.490
比方说我可以加上个头头

01:20:10.490 --> 01:20:12.490
数据呢

01:20:12.490 --> 01:20:13.490
302

01:20:13.490 --> 01:20:15.490
我们这里就直接使用头头

01:20:15.490 --> 01:20:16.490
对吧

01:20:16.490 --> 01:20:17.490
好那么这些数据

01:20:17.490 --> 01:20:18.490
全是我的对吧

01:20:18.490 --> 01:20:19.490
那里改变了

01:20:19.490 --> 01:20:20.490
一向改到

01:20:20.490 --> 01:20:21.490
到一个新的夜晚

01:20:21.490 --> 01:20:22.490
你可不可以

01:20:22.490 --> 01:20:23.490
这里可以改

01:20:23.490 --> 01:20:24.490
怎么改呢

01:20:24.490 --> 01:20:25.490
就是z点

01:20:25.490 --> 01:20:26.490
corrent

01:20:26.490 --> 01:20:27.490
越是我的数据

01:20:27.490 --> 01:20:28.490
我当然得有权力改

01:20:29.490 --> 01:20:30.490
如果说有的人说

01:20:30.490 --> 01:20:31.490
那这个副组件的数据

01:20:31.490 --> 01:20:32.490
还不是我的呢

01:20:32.490 --> 01:20:33.490
那继续往上跑

01:20:34.490 --> 01:20:35.490
我这里也处理不了

01:20:35.490 --> 01:20:37.490
我这里还要继续往上跑

01:20:37.490 --> 01:20:38.490
也没止

01:20:38.490 --> 01:20:40.490
让上层的组件继续处理

01:20:40.490 --> 01:20:41.490
当然这种情况

01:20:41.490 --> 01:20:42.490
不是我们现在的情况

01:20:43.490 --> 01:20:44.490
数据改

01:20:44.490 --> 01:20:45.490
数据改引发什么

01:20:45.490 --> 01:20:47.490
引发这个组件的重新渲染

01:20:47.490 --> 01:20:48.490
重新渲染的时候

01:20:48.490 --> 01:20:49.490
是不是

01:20:49.490 --> 01:20:50.490
这里的数据又变了

01:20:50.490 --> 01:20:51.490
属性变了

01:20:51.490 --> 01:20:52.490
那么又会引发

01:20:52.490 --> 01:20:53.490
它的重新渲染

01:20:53.490 --> 01:20:54.490
它就把新的界面

01:20:54.490 --> 01:21:00.190
显示出来了

01:21:01.190 --> 01:21:02.190
这是一个

01:21:02.190 --> 01:21:06.210
组件的正确做法

01:21:06.210 --> 01:21:07.210
看呗

01:21:07.210 --> 01:21:08.210
好这就是

01:21:08.210 --> 01:21:09.210
当然如果说

01:21:09.210 --> 01:21:10.210
我们这里以将来

01:21:10.210 --> 01:21:11.210
还会做一些别的事

01:21:11.210 --> 01:21:12.210
还会做什么呢

01:21:12.210 --> 01:21:13.210
还会做

01:21:13.210 --> 01:21:15.210
加载当前页数据

01:21:15.210 --> 01:21:16.210
页数据

01:21:16.210 --> 01:21:18.210
是不是在副组件里面去做

01:21:18.210 --> 01:21:19.210
你看

01:21:20.210 --> 01:21:21.210
加载第三页的数据

01:21:21.210 --> 01:21:22.210
加载第五页的数据

01:21:22.210 --> 01:21:23.210
加载第九页的数据

01:21:23.210 --> 01:21:25.210
在副组件里面去做就完成

01:21:26.210 --> 01:21:27.210
好就写的差不多了

01:21:28.210 --> 01:21:29.210
如果说你到现在

01:21:29.210 --> 01:21:30.210
到现在也没有什么问题的话

01:21:30.210 --> 01:21:31.210
然后接下来的代码

01:21:31.210 --> 01:21:32.210
就一定没有问题了

01:21:32.210 --> 01:21:33.210
接下来的代码很简单

01:21:33.210 --> 01:21:34.210
就是说

01:21:34.210 --> 01:21:35.210
如果说他点击到这个9

01:21:35.210 --> 01:21:36.210
重新点击

01:21:36.210 --> 01:21:38.210
你看还是引发事件

01:21:38.210 --> 01:21:40.210
如果说已经是首页了

01:21:40.210 --> 01:21:42.210
首页了过后再点击

01:21:42.210 --> 01:21:44.210
你看还是引发事件

01:21:44.210 --> 01:21:45.210
我这个地方只是个样式

01:21:45.210 --> 01:21:46.210
不同而已

01:21:46.210 --> 01:21:48.210
这里我稍微控制一下

01:21:48.210 --> 01:21:50.210
首先你留配级

01:21:50.210 --> 01:21:51.210
你不能超出范围

01:21:51.210 --> 01:21:52.210
你不能跑到什么

01:21:52.210 --> 01:21:53.210
负一零去了

01:21:53.210 --> 01:21:54.210
所以说如果说

01:21:54.210 --> 01:21:56.210
这个留配级小于0

01:21:56.210 --> 01:21:58.210
小于1

01:21:58.210 --> 01:21:59.210
我就把它负值为1

01:21:59.210 --> 01:22:01.210
你最小只能为1

01:22:01.210 --> 01:22:02.210
新的页码

01:22:02.210 --> 01:22:04.210
如果说这个留配级

01:22:04.210 --> 01:22:07.210
大于ZS.PageNumber

01:22:07.210 --> 01:22:09.210
那么我就负值为

01:22:09.210 --> 01:22:11.210
最大页码

01:22:12.210 --> 01:22:13.210
负值完了过后

01:22:13.210 --> 01:22:14.210
我再来看一下

01:22:14.210 --> 01:22:15.210
这个留配级

01:22:15.210 --> 01:22:16.210
这个新的页码

01:22:16.210 --> 01:22:18.210
是不是等于当前页码

01:22:18.210 --> 01:22:20.210
如果说你之前是第1页

01:22:20.210 --> 01:22:21.210
现在要调转到第1页

01:22:21.210 --> 01:22:22.210
那我缝了有什么意义呢

01:22:22.210 --> 01:22:24.210
我就返回

01:22:24.210 --> 01:22:26.210
我啥都不做

01:22:26.210 --> 01:22:29.210
只有这里范围没问题

01:22:29.210 --> 01:22:31.210
同时一个页码

01:22:31.210 --> 01:22:32.210
又不是当前页码

01:22:32.210 --> 01:22:33.210
要调转到一个新的页码

01:22:33.210 --> 01:22:35.210
这个时候我才跑出事件

01:22:35.210 --> 01:22:36.210
我才让负值间去处理

01:22:36.210 --> 01:22:38.210
否则的话我就啥都不做

01:22:38.210 --> 01:22:39.210
直接把这个控制一下

01:22:39.210 --> 01:22:40.210
就完事了

01:22:40.210 --> 01:22:41.210
好 接下来我们再看

01:22:41.210 --> 01:22:43.210
点这个没反应了对吧

01:22:43.210 --> 01:22:44.210
点上一页没反应了

01:22:44.210 --> 01:22:46.210
然后点当前页没反应了

01:22:46.210 --> 01:22:48.210
点第二页出发了事件

01:22:48.210 --> 01:22:49.210
往上抛

01:22:49.210 --> 01:22:51.210
负值间就把它输出了

01:22:51.210 --> 01:22:52.210
就把改动了数据

01:22:52.210 --> 01:22:54.210
改动了数据整个重新券

01:22:54.210 --> 01:22:56.210
好好理一下这个逻辑

01:22:56.210 --> 01:22:57.210
这就是我们这几课

01:22:57.210 --> 01:22:59.210
要讲的全部的一种

01:22:59.210 --> 01:23:01.210
复杂吗

01:23:01.210 --> 01:23:02.210
东西有点多

01:23:02.210 --> 01:23:04.210
倒是复杂就一个

01:23:04.210 --> 01:23:06.210
就是事件这里

01:23:06.210 --> 01:23:08.210
不适应

01:23:08.210 --> 01:23:10.210
这个东西没有这个模块化的思维

01:23:10.210 --> 01:23:11.210
它不适应

01:23:11.210 --> 01:23:12.210
很正常

01:23:12.210 --> 01:23:13.210
给你们刚刚学习

01:23:13.210 --> 01:23:14.210
科学环

01:23:14.210 --> 01:23:15.210
刚刚学习寒术的时候

01:23:15.210 --> 01:23:16.210
我相信每个同学

01:23:16.210 --> 01:23:17.210
第一次接触寒术的时候

01:23:17.210 --> 01:23:19.210
都极其的不适应

01:23:19.210 --> 01:23:21.210
我多希望

01:23:21.210 --> 01:23:22.210
把这个所谓的东西

01:23:22.210 --> 01:23:25.210
全部写到这个一起

01:23:25.210 --> 01:23:26.210
不要写寒术了

01:23:26.210 --> 01:23:27.210
多好啊

01:23:27.210 --> 01:23:28.210
但是写多了过后来

01:23:28.210 --> 01:23:30.210
慢慢知道这个寒术的唯一力量

01:23:30.210 --> 01:23:32.210
当你第一次接触

01:23:32.210 --> 01:23:34.210
毁掉的时候极其的不适应

01:23:34.210 --> 01:23:36.210
干嘛要写毁掉啊

01:23:36.210 --> 01:23:37.210
对吧 我就该怎么做

01:23:37.210 --> 01:23:39.210
我就在后边做了就行了

01:23:39.210 --> 01:23:41.210
但是你会发现这样子设计的

01:23:41.210 --> 01:23:43.210
缺乏通用型

01:23:43.210 --> 01:23:45.210
你这样去将来我事情变了

01:23:45.210 --> 01:23:46.210
你又要重新改改了

01:23:46.210 --> 01:23:48.210
我是因为我毁掉

01:23:48.210 --> 01:23:49.210
可以解决这个问题

01:23:49.210 --> 01:23:51.210
第一次接触这个组建事件的时候

01:23:51.210 --> 01:23:53.210
一定是极其不适应

01:23:53.210 --> 01:23:54.210
慢慢去体会

01:23:54.210 --> 01:23:56.210
这需要一个过程

01:23:56.210 --> 01:23:57.210
好 讲一话同学们

01:23:57.210 --> 01:23:58.210
这几课

01:23:58.210 --> 01:23:59.210
作业就一个

01:23:59.210 --> 01:24:01.210
把个陪教组建做完

01:24:01.210 --> 01:24:02.210
并且理解

01:24:02.210 --> 01:24:04.210
陪教组建里边的这些代码

01:24:04.210 --> 01:24:06.210
都要理解

01:24:06.210 --> 01:24:07.210
后边呢

01:24:07.210 --> 01:24:08.210
咱们课程后边

01:24:08.210 --> 01:24:10.210
会做大量的组建联系

01:24:10.210 --> 01:24:12.210
都会大量的用到组建事件

01:24:12.210 --> 01:24:14.210
还有什么微衣发微绣

01:24:14.210 --> 01:24:15.210
好吧

01:24:15.210 --> 01:24:17.210
好 这就是这几课的内容 加油

