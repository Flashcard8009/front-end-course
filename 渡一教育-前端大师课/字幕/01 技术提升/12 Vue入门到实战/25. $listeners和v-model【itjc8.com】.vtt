WEBVTT

00:00.180 --> 00:06.740
文章详情页 文章详情页的话 还有一些事情没有做 比方说下面这个组件

00:07.380 --> 00:14.700
就在这一块组件还没有做 但是呢 这结构 如果说要直接开发这个组件呢 还缺少一些知识

00:15.100 --> 00:20.660
啊 所以说我们这节课呢 先不着急啊 先把我们的项目呢 暂时放一放 放一节课

00:21.180 --> 00:29.980
没问题吧 我们讲一点新知识 把这些知识给大家讲通 讲细啊 让大家彻底明白了之后呢

00:29.980 --> 00:33.340
我们再去做这个组件 那到时候呢 开发起来就比较轻松了

00:34.020 --> 00:41.020
好 我们来看一下啊 这节课呢 我们这里有两个例子 把这两个例子的问题解决了 其实我们那个组件呢 也就差不多了

00:41.500 --> 00:44.100
首先是第一个例子 我们把它运行出来

00:47.360 --> 00:49.120
哎 MPM装饰

00:51.120 --> 00:58.880
这个例子是什么意思呢 他一共就两个组件 给大家说一下啊 第一个组件当然是跟组件 跟组件里边啥都没做 就用了一个loading button

00:59.480 --> 01:06.720
什么叫loadingbutton呢 就是个按钮啊 他是用于防重复点击的按钮 就点的时候呢 我们来看一下啊

01:09.280 --> 01:09.800
你说了没

01:11.400 --> 01:17.600
打开啊 就这么一个按钮 非常简单 我们来看一下这个按钮里边是什么东西 里边还有一个按钮button

01:18.440 --> 01:23.080
他有一个事件handleclick啊 以后我们来看这个事件啊 还有一个disabled

01:24.040 --> 01:30.760
这个是什么东西呢 就表示这个按钮是否可用 他是否可用取决于一个数就取决于一个数据 叫isloading

01:31.680 --> 01:36.520
我们把场景说一说 isloading为去的时候呢 他就不可用 比方说把这里调成去

01:38.040 --> 01:46.280
你还不可用了 不可用是不是不能点击对不对 这个按钮他的作用是什么呢 表示有的时候呢 你看这枪这啊 这个提交按钮

01:46.600 --> 01:53.400
我点的时候 你看是不是提交中 他不能用了 不能再点了就防防止重复点击 我们要实现这么一个效果

01:53.880 --> 01:58.600
有这么一个按钮他防止重复点击啊 不是说我们将来下节课我们开发

01:59.440 --> 02:04.160
文章详情业是不是一定要做这个按钮组件呢 不是的啊 我把个情况给大家说一说

02:05.280 --> 02:08.080
他有可能不能用的 取决于一个数据

02:08.840 --> 02:11.000
isloading 一个数据是正在夹载中 那就不能用

02:12.160 --> 02:15.040
那么他的文本呢 就是如果说他正在夹载中我就显示一个楼顶

02:16.720 --> 02:21.200
或者是一些央视也会变化 我就没做央视了啊 如果说他是

02:22.160 --> 02:26.200
没有正在夹载可用的 我就显示submit 提交

02:27.160 --> 02:35.720
啊 这个按钮解释清楚了吧 除了这个处理函数没有说对吧 其他解释清楚了吧 取决于这么一个属性啊 你看把稍微forced

02:36.840 --> 02:44.120
正常了 好 然后呢 有个div div里面显示什么呢 显示一些错误信息啊 有的时候呢 我们可能会有一些错误啊

02:44.600 --> 02:50.440
啊 点击到过后呢 可能会有一些 提交过后可能会有一些错误 那么这里要显示一个错误信息

02:51.040 --> 02:53.600
啊 那么这里呢 我一个error 表示有没有错误

02:54.800 --> 02:58.760
靠什么意思呢 我这里就临时加了一个需求啊 就是我点击到多少次

02:59.560 --> 03:03.200
一开始是零次 对吧 我现在记录一下点击次数

03:04.040 --> 03:09.760
没问题吧 就这一块再买没问题吧 解释清楚了啊 那么这个央视不用说了啊 央视就设置了一个红色

03:10.240 --> 03:18.520
没什么东西 好 我们来当看这个处理函数 这个处理函数我还没有写 我这里有一个注释啊 把这个注释完成 我们第一个支持点

03:19.200 --> 03:19.920
其实就搞定了

03:21.200 --> 03:26.400
这一块呢 有些笔记啊 这个笔记呢 你可以至于看一下 但是呢 上课的时候呢 还是跟着我的思路走

03:28.000 --> 03:38.840
嗯 handleclick 这里不要我要做什么事情呢 我这里打一个注释 你就按照我的要求一键一键做啊 你不用管这个业务逻辑啊 就业务上 这个按钮到底用在什么场地呢 不用管

03:39.080 --> 03:40.520
我们主要是讲新一个支持点

03:41.680 --> 03:45.280
好 点击次数加一 这个很简单吗 是不是一把靠着加一

03:49.560 --> 03:59.160
好 错误消息清空 一开始可能目前有一些错误消息啊 如果说之前有一些错误消息显示到这儿了 那么我这里呢 要把这个错误消息清空 这个没什么问题吧

04:01.760 --> 04:02.560
啊 错误消息清空

04:03.480 --> 04:10.560
好 为了防止重复点击 你现在不是在处理点击时间吗 对吧 你在正在处理过程中 我要这个时候呢 我可能要做一些

04:10.600 --> 04:18.600
处理这个处理的时间可能会比较长 提交嘛 可能有远程传输啊 可能有些乱七八糟的事情 那么我这里呢 就要把一只楼顶设为去

04:19.920 --> 04:24.480
一只楼顶设为去啊 你不能再点了 点了一次过后不能再点了 你看啊

04:25.320 --> 04:32.640
刷新点击 你看错误消息清空 是不是正在夹载中不能再点了 都很简单 对不对 没有什么难的 好 再来啊

04:33.640 --> 04:39.120
啊 通知副组建关键点来了 这就是咱们这一刻的第一个知识点

04:40.000 --> 04:51.360
通知副组建 我这个组建被点击了 但是我处理不了 提交到底提交了哪个服务器 提交什么地址 用什么请求 或者是还要做一些别的什么事 我也不知道

04:51.880 --> 04:54.440
所以说了 这个提交的事呢 我做不了

04:55.160 --> 04:58.520
说通知副组建 怎么通知 按照我们之前学的

04:59.960 --> 05:00.320
那个

05:02.280 --> 05:04.120
组建之间通信 你觉得该用哪一个

05:05.560 --> 05:07.400
用什么方式来通知啊 通知副组建

05:08.480 --> 05:09.440
那个组建通信

05:10.280 --> 05:16.480
什么用event啊 这用event是最好的对不对 好的 因此呢 我们在通知副组建啊 怎么来通知呢 我们就z

05:17.400 --> 05:22.600
emmage 关键啊 关键 这一颗关键要是要看关键代码 其他都是呢都是

05:23.560 --> 05:30.280
辅助里面理解的啊 关键代码在这 通知副组建 我被点击了 那我就触发一个时间呗 各时间的名字随便离奇

05:30.920 --> 05:32.280
啊 你就我就写个click吧

05:33.640 --> 05:34.120
啊 表示

05:35.000 --> 05:36.680
我通知副组建 我一个事件发生了

05:37.480 --> 05:40.600
哎 事件有没有数据呢 哎 我这里要求啊

05:41.320 --> 05:45.480
你传一个数据 不是说以后你看了个组建就一定要传啊 不要把东西学死的 我就

05:46.360 --> 05:49.720
上路过课了 因为没法跟同学们互动 我就特别特别害怕

05:50.200 --> 05:53.240
同学们把各式东西学死了 老师以前这样写的 我

05:53.720 --> 05:56.360
无论什么场景我都这样子写 我只是举个例子

05:57.000 --> 06:03.560
假设呢 这里有一个数据 需要通知到副组建啊cult 我需要把这个cult传递给副组建

06:03.960 --> 06:07.160
啊 所以说我们这里的用zcult 把这个数据传过去

06:07.720 --> 06:13.800
对吧 没问题吧 这个东西很简单 对不对 好 于是呢副组建是不是有一个事件需要注册呢

06:14.760 --> 06:19.640
click 对不对 那么我们这里也用一个handleclick吧 handle表示的意思呢 表示

06:19.800 --> 06:25.240
处理 method handle click 那么这里呢 是不是有一个数据传过来啊

06:26.360 --> 06:32.120
对不对 直逐件传过来的数据 它里面触犯了一个事件啊 我在副组建里面输出这个数据啊

06:32.840 --> 06:37.080
副组建输出这个cult数据 好 我们来看一下

06:39.640 --> 06:46.440
检查cult 点击副组建是不是1啦 都要点击到一次了 对不对 现在没法点击了 因为它也是disable的

06:47.400 --> 06:53.960
没问题吧 好 那么接下来呢 我们就有一些重要的事情要做了 这个东西我们以前学过的没有什么难的

06:55.480 --> 07:01.000
现在呢副组建已经通知了 副组建会做一些处理 此时

07:01.960 --> 07:09.000
现在我们在指数件啊 我但是我们知道此时副组建可能会做一些处理

07:09.720 --> 07:16.360
那么我们需要等待副组建处理完成 因为副组建的处理呢 它有可能是异补的

07:18.660 --> 07:25.700
有可能是异补的 等一会才能处理完成 比方说这里要提交到服务器 要花一份一件时间 对不对 它有可能是异补的

07:26.340 --> 07:31.700
仔细体会啊 这一块可能相对来说比较绕一点 我们等它完了过后

07:32.340 --> 07:39.140
它还会不但要玩 还会有一个结果 我们希望等它完了过后有一个结果 那么这个结果拿到过后呢

07:39.700 --> 07:46.500
我还指数件还要接着处理 比方说指数件还有哪些要处理呢 我们还要把意思楼顶设为force

07:47.460 --> 07:53.060
对不对 还要把这个zs error 它的错误消息 到底有没有错误啊

07:53.940 --> 07:56.500
到底有没有错误是指数件说了算还是副组建说了算

07:58.740 --> 08:05.700
到底有没有错误是指数件说了算还是副组建说了算 你看这个场景里边是不是就副组建说了算

08:06.020 --> 08:10.020
因为副组建来再做处理 那处理的过程中有没有错误 是不是

08:11.060 --> 08:20.100
需要副组建来指定 哎 他有时候说那个arrow为什么不做成属性了 让副组建喘快了 是是这个意思啊 我就说假设某些场景下面

08:21.060 --> 08:22.580
这个数据又是属于指数件的

08:23.540 --> 08:28.500
这个问题就麻烦了 你看没 我这里只是通知到副组建你去处理吧

08:29.220 --> 08:36.260
而副组建就处理 但是副组建处理的结果我并不知道 我不知道副组建什么时候处理完 我也不知道副组建

08:37.380 --> 08:38.500
处理的结果是什么

08:39.460 --> 08:40.420
所以到这么一个问题

08:41.860 --> 08:49.220
那么这个 error 写啥我不知道 这个一人楼顶什么时候设为force 你这样子设是可以吗 那副组建如果说处理一个小时呢

08:50.020 --> 08:50.980
你是不是太早了呀

08:51.540 --> 08:57.460
这个这个瞬间又运行完了 这个只是发出一个通知 瞬间就完成了 他是同步代码 接下来就马上运行这个

08:57.860 --> 09:05.460
那不合理吧 那如果说副组建他要有一个时间比较说这timeout 我这里呢三秒钟 三秒钟之后我才处理完成

09:07.140 --> 09:09.380
啊 那怎么办呢 那这个指数件

09:10.500 --> 09:17.460
会等待三秒吗 肯定不会啊 那怎么可能会等待三秒 你看瞬间就完成瞬间就把意思楼顶有设为去了 有设为force

09:18.580 --> 09:19.380
明白这个意思吗

09:20.500 --> 09:25.460
现在问题的根源就在于 指数件怎么知道副组建什么时候处理完成

09:26.180 --> 09:29.380
没办法 如果说你用这个Amex的话

09:30.420 --> 09:39.060
你要你用常规办法肯定不行 因为他反这个Amex的这个函数啊 他反回了结果 他不是副组建的函数调用的结果 他不是他的结果

09:39.860 --> 09:42.660
不是这个函数的反回结果 他反过来怎么了 反过来是

09:43.220 --> 09:46.660
组建当前的实力 反过来是this 反过来这个东西

09:47.380 --> 09:53.140
所以说呢怎么办呢 有没有办法呢 好 我现在告诉大家啊 第一种处理办法

09:53.460 --> 10:01.620
我们这里的新建文件要吧 第一种处理办法 啊 以后呢 我把做完了过后了 把这个两个扔过去

10:02.740 --> 10:05.780
第一种处理办法就是用在Amex的时候 我把机动办法给你们说完

10:06.660 --> 10:09.460
第一种处理办法是Amex的时候 给他传一个回调

10:10.100 --> 10:20.020
因为Amex可以传多 可以传很多个参数啊 比方说这里传二 传三 传四 传四 你看随便可以传多好个参数 那么这边他接通的数据呢就是

10:20.340 --> 10:23.220
你看吧 我们这里输出abc

10:24.900 --> 10:26.100
数据仍然传过来了

10:27.940 --> 10:33.460
演技 你看一二三四都传过来了 所以说植入现在在触发事件的时候可以传多个数据

10:34.260 --> 10:41.380
你挨传多了传多个 那么这些数据有没有要求呢 是不是必须是数字啊 必须是制服圈啊 必须是对象啊 没有

10:42.020 --> 10:42.980
他没有任何要求

10:43.780 --> 10:46.820
因此我们这里是可以传一个函数过去的

10:49.110 --> 10:50.310
可以传一个函数过去

10:50.790 --> 10:57.190
这个回调模式是不是就用上了 那么这边接受的时候是除了这个数据之外 是不是还可以接受一个函数啊

10:58.150 --> 11:03.750
对不对 这个函数什么时候执行由副组件来决定 我只是把函数传给副组件

11:05.830 --> 11:08.390
该函数传给副组件

11:09.510 --> 11:13.830
让副组件决定什么时候执行

11:14.790 --> 11:16.790
就会用个回调的模式搞定的

11:17.350 --> 11:24.470
那么这样子呢 我们就可以把这些代码写到函数里面去 你副组件我把函数传给你 你副组件什么时候搞完了

11:25.110 --> 11:29.030
把你提交完了 处理完了 你就雕用一下 帮我雕用一下这个函数就完事了

11:29.670 --> 11:33.910
所以说这个副组件是不是就好处理的 于是呢到副组件那边有个函数过来了

11:34.550 --> 11:39.110
3秒钟之后我处理完成 那么我就雕用一下这个函数 我高速指示键啊 我处理完成了

11:40.070 --> 11:45.670
对不对 以为它是一个箭头函数 所以说那个Z是绑定了的 就说不用担心Z的问题

11:46.710 --> 11:47.910
好 保存你看一下现在

11:49.750 --> 11:50.310
点击过后

11:53.060 --> 11:54.420
哎死了 这个

11:56.650 --> 11:59.290
小心啊 再来 点击过后 是不是等了3秒钟之后

12:00.650 --> 12:05.610
3秒钟之后副组件雕用了这个函数 于是呢 直速建立这个函数得到了执行

12:06.330 --> 12:09.450
这两个这两个代码执行了 执行的结果呢就是这个样子

12:10.330 --> 12:11.930
对不对 这是这种模式

12:12.490 --> 12:17.850
那这个 error 错误消息到底是啥呢 有没有错误消息啊 错误消息是啥呢

12:18.330 --> 12:20.410
我们是不是还可以给函数参数啊

12:20.970 --> 12:24.570
对不对 处理完成过后呢 我告诉你有没有错误

12:25.130 --> 12:28.250
如果说有错误的话 比方说假设

12:29.290 --> 12:34.410
请填写账号 比方说有这么一个错误 那我就把错误消息传给你 那你这边

12:35.450 --> 12:36.170
是不是可以接收

12:37.450 --> 12:41.450
啊 有这个错误消息 我就把这个错误消息存到 error 里面

12:42.650 --> 12:43.610
好 咱们再来看啊

12:47.180 --> 12:49.980
三秒钟 请填写账号 你看是不是

12:50.620 --> 12:52.620
现在这个我们的要求就满足了

12:53.420 --> 12:56.620
也就是这么一个处理方式啊 这是第一种方式

12:57.340 --> 12:58.620
通过传统的 image

12:59.660 --> 13:03.580
同样的方式啊 通知是副组件 我发生了一件事了 我不仅给你数据

13:03.580 --> 13:07.180
我还会给你 如果说你有数据 没数据不给

13:07.580 --> 13:12.380
我还会给你一个函数 你那边处理完了过后告诉我一声 我这边还要接着做一些事

13:13.100 --> 13:17.740
啊 你这边处理完了结果也顺便告诉我 我可能拿到这个结果过后了 我还要进一步处理

13:18.460 --> 13:20.700
啊 就是这种模式啊 学会

13:21.820 --> 13:26.060
啊 ok 我把这两个东西扔过去了啊 扔到这里边去了 第一种处理办法

13:27.420 --> 13:28.940
哎 有没有其他处理办法呢

13:29.740 --> 13:30.140
还有

13:31.100 --> 13:32.940
好 接下来我们来看第二种处理办法

13:35.450 --> 13:37.370
哎 我把这个植物件里边

13:38.490 --> 13:39.290
这种方式去掉

13:41.320 --> 13:44.040
这个时候第二种处理办法呢 需要一个新的知识啊

13:46.200 --> 13:47.720
就是副组件呢 我们可能会

13:48.520 --> 13:54.200
可能返回的是一个promise 我通过返回纸来告诉纸组件怎么来处理

13:54.760 --> 13:55.880
我副组件呢 是一个

13:56.920 --> 13:59.320
async 就是返回的是promise

13:59.880 --> 14:01.160
那我就返回promise呗

14:01.720 --> 14:02.280
return

14:03.880 --> 14:04.760
new promise

14:06.200 --> 14:07.240
result

14:08.440 --> 14:11.960
什么时候处理完成呢 set time out 3秒钟之后处理完成

14:12.440 --> 14:13.880
处理完成过后我就result

14:13.880 --> 14:15.880
result为了一个错误消息啊 表示

14:17.160 --> 14:18.680
有一个位置错误

14:22.260 --> 14:23.860
啊 你看 我就弄这种模式

14:24.580 --> 14:27.620
哎 这种模式它是不是就没有用到回掉了呀

14:28.260 --> 14:33.220
对不对 那么副组件到底有没有处理完 是不是取决于这个函数的返回结果

14:34.100 --> 14:36.100
那么我们植柱件里面怎么去

14:36.260 --> 14:40.420
知道这个函数的返回结果了 怎么去雕用它呢 雕用之后才能有返回结果吗

14:41.140 --> 14:43.380
之前什么雕用 之前是用result ammage

14:43.380 --> 14:48.900
ammage不是直接降用函数啊 ammage呢是通知副组件 通知完了我就结束了

14:49.220 --> 14:53.060
这个函数就结束了 它拿不到这个函 拿不到副组件这个函数的返回结果

14:53.700 --> 14:56.660
那我们怎么去拿呢 现在有一个新的知识 叫做

14:57.540 --> 14:59.700
组件实力里边啊 就是我们之前

15:00.500 --> 15:00.820
这个

15:01.780 --> 15:02.660
实力成员里边

15:03.380 --> 15:04.420
除了有这些成员

15:05.300 --> 15:06.740
还有什么呢 还有一个成员叫做

15:07.700 --> 15:08.500
nationers

15:11.380 --> 15:12.420
这个玩意是啥呀

15:12.900 --> 15:13.780
我们输出一下

15:14.740 --> 15:15.220
this

15:15.780 --> 15:16.820
nationers

15:16.820 --> 15:17.620
它是一个对象

15:18.340 --> 15:20.730
看一下吧

15:25.050 --> 15:26.250
对象里面有click

15:26.250 --> 15:27.850
click是什么呢 是一个函数

15:28.410 --> 15:30.010
其实并不复杂

15:30.010 --> 15:31.130
我们看一下这个笔记

15:32.010 --> 15:32.730
nationers

15:34.250 --> 15:35.930
nationers是Wu的一个

15:36.810 --> 15:37.610
实力属性

15:38.330 --> 15:42.570
它用于获取副组件传过来的所有事件参数

15:42.570 --> 15:45.530
啥意思呢 我这里举个例子啊 在副组件里面用了一个植入键

15:45.530 --> 15:46.970
只该传了两个事件进去

15:47.850 --> 15:50.570
于是这两个事件在植入键里面就可以通过Zs

15:50.570 --> 15:51.450
nationers来获取

15:52.010 --> 15:52.890
获取的结果就是

15:53.610 --> 15:54.250
1分成1

15:54.970 --> 15:55.770
这个函数

15:55.770 --> 15:56.970
1分成2这个函数

15:57.530 --> 15:59.530
实际上它这个函数还可以做了一个封装

15:59.930 --> 16:02.570
为了绑定Zs 还要做一些其他事情给它做个封装

16:02.570 --> 16:04.490
但是那最终会运行到这个函数

16:05.210 --> 16:08.250
实际上这里呢 我这里为了简单 大家好理解

16:08.570 --> 16:10.810
我这里就这样写了 实际上呢 大家要知道啊

16:11.450 --> 16:15.050
植入键里面获取的nationers这个函数还不是这个

16:15.930 --> 16:18.570
函数 它给你做了Y层再可以套了一个封装

16:18.570 --> 16:20.490
不管 但是你可以把它当成就是这个函数

16:21.770 --> 16:25.450
好 因此呢 在植入键里面 我们是不是可以通过nationers

16:27.800 --> 16:28.840
第二 什么呢

16:29.400 --> 16:30.680
副组件传过来这个click

16:30.680 --> 16:34.520
对吧 当然副组件要传啊 如果说没传的话 这里就是undefend

16:34.520 --> 16:35.880
那你可以判断一下吧

16:35.960 --> 16:39.480
如果说this nationersclick优值

16:40.600 --> 16:43.240
传了的 这句话这个判断什么意思

16:43.720 --> 16:48.360
就是判断副组件是否传递了事件

16:50.280 --> 16:52.680
事件处理函数click

16:53.960 --> 16:57.000
是不是传递了这个 如果说传递了 我就直接调用

16:57.000 --> 16:59.320
那么这样子是不是拿到副组件的函数引用了

17:00.520 --> 17:03.000
拿到副组件这个函数了 那么直接调用这个函数

17:03.800 --> 17:06.760
它不是有参数吗 有什么参数 有个caught

17:06.760 --> 17:09.720
那我传给你呗 你看 现在都不是用amount的方式了

17:09.720 --> 17:11.320
是直接调用函数的方式了

17:12.040 --> 17:13.640
this caught 传进去

17:14.200 --> 17:16.920
你这个函数的反回结果不是一个promise吗 对不对

17:16.920 --> 17:20.040
那我等待呗 我就把这个设为assync函数

17:20.040 --> 17:22.680
assync一步函数 我等待呗

17:22.680 --> 17:25.400
等待完了不是拿到一个结果吗 without

17:25.400 --> 17:26.760
好 我们这里输出一下 without

17:28.040 --> 17:30.040
你看 这样子也可以

17:31.000 --> 17:31.480
好

17:32.600 --> 17:33.240
上面面

17:34.120 --> 17:34.680
三秒钟

17:36.200 --> 17:38.920
你看 是不是拿到副组件的处理结果了

17:38.920 --> 17:40.200
在loading button里边

17:41.000 --> 17:43.800
是不是拿到副组件的处理结果了

17:44.360 --> 17:47.160
对吧 这种方式也可以

17:47.160 --> 17:49.560
当拿到这个结果过拍就非常简单了

17:49.560 --> 17:54.120
就是it's loading the reinforce this error

17:55.080 --> 17:56.760
等于result

17:57.720 --> 18:00.600
对吧 或者叫error也可以

18:00.600 --> 18:04.180
好 老师们啊 又来

18:04.180 --> 18:09.300
你看 是不是可以了

18:09.300 --> 18:11.460
这是第二种方式

18:11.460 --> 18:14.180
那么这种方式呢 我下面有一个

18:14.180 --> 18:16.020
有段话啊

18:16.020 --> 18:18.100
就是这种方式呢

18:18.100 --> 18:20.100
connexoners和amount

18:20.100 --> 18:22.420
他们都是直入键相互组件通信

18:22.420 --> 18:24.420
我们现在的组件通信有多了一种方式的

18:24.420 --> 18:26.180
组件通信

18:26.180 --> 18:27.860
通过lesoners

18:27.860 --> 18:30.820
那么这种方式呢 跟那个amount非常类似

18:31.540 --> 18:35.060
跟那个event 就是amount事件非常类似

18:35.060 --> 18:38.340
不过呢 它们还是有一些稀微的区别的

18:38.340 --> 18:40.900
amount呢 其实更加符合单向数据留言说

18:40.900 --> 18:44.340
单向数据就是副组件的数据始终是流向直入键

18:44.340 --> 18:46.340
直入键发出通知

18:46.340 --> 18:49.060
然后呢 由副组件的监听来入手改变

18:49.060 --> 18:51.380
而lesoners呢 它有点稀微的感觉

18:51.380 --> 18:52.980
感知上的不同就是

18:52.980 --> 18:55.860
它是直接拿到副组件传过来的函数

18:55.860 --> 18:58.900
你看 这样子是不是直接拿到这个副组件传过来的函数了

18:58.980 --> 19:00.980
直接去调用副组件的函数

19:00.980 --> 19:02.980
它就没有那个通知的一个过程

19:02.980 --> 19:04.500
没让人家意识吧

19:04.500 --> 19:06.500
它这个稀微上的不同

19:06.500 --> 19:08.500
这地了

19:08.500 --> 19:11.300
由于这个不同呢 其实造成了一些

19:11.300 --> 19:13.300
特别是在调试的时候呢

19:13.300 --> 19:14.820
lesoners呢 比较困难一点

19:14.820 --> 19:17.540
因为调试工具呢 是可以监听到amount事件的

19:17.540 --> 19:20.180
因为你调用了amount 就表示我有通知

19:20.180 --> 19:22.740
调试工具可以监听到amount的事件

19:22.740 --> 19:24.740
但是监听不到lesoners的东西

19:24.740 --> 19:26.740
因为lesoners就是一个普通的函数调用

19:26.900 --> 19:28.900
所以这个调试工具监听不到

19:28.900 --> 19:32.100
你看啊 我们这个无诱不是一个调试工具吗

19:32.100 --> 19:34.420
对不对 这个调试工具你看一下

19:34.420 --> 19:36.740
我们这里有个事件

19:36.740 --> 19:39.220
有事件 我们点一下 你看

19:39.220 --> 19:42.020
有没有事件发生 它这里根本就不知道有事件发生

19:42.020 --> 19:44.020
因为我们只是调用了一个函数而已

19:44.020 --> 19:46.820
原来的意思吧 那第一种方法就可以

19:46.820 --> 19:48.820
这是第二种处理办法

19:48.820 --> 19:52.520
处理办法

19:52.520 --> 19:54.520
把这个复制一下 扔过去

19:54.520 --> 19:56.520
那第一种方式就可以

19:57.000 --> 19:59.000
我们把第一种方式复制一下

19:59.000 --> 20:05.450
好 你看第一种方式

20:05.450 --> 20:07.450
刷新 就是用amount的这种方式

20:07.450 --> 20:09.450
点击 你看是不是一个事件发生了

20:09.450 --> 20:11.450
调试工具告诉你 这事件的名字

20:11.450 --> 20:13.450
click

20:13.450 --> 20:15.450
amount出发

20:15.450 --> 20:17.450
然后呢 source 就是哪个组件出发的

20:17.450 --> 20:19.450
是noting button这个组件出发的

20:19.450 --> 20:21.450
payload的就是事件

20:21.450 --> 20:23.450
带过去的数据 有两个

20:23.450 --> 20:25.450
一个是cod

20:25.450 --> 20:27.450
再点一次 看又出发的意思

20:27.450 --> 20:29.450
这一次带过去的cod就是2

20:29.450 --> 20:31.450
一个回调函数 带过去的

20:31.450 --> 20:33.450
调试工具可以

20:33.450 --> 20:35.450
清晰的看到有哪些事件发生

20:35.450 --> 20:37.450
但是你刚才用lessoners的这种方式

20:37.450 --> 20:39.450
就不行了

20:39.450 --> 20:41.450
用这种方式就可以

20:41.450 --> 20:43.450
所以说呢

20:43.450 --> 20:45.450
自己取舍

20:45.450 --> 20:47.450
如果说你回调确实觉得太过于噁心了

20:47.450 --> 20:49.450
这种回调处理太过于噁心了

20:49.450 --> 20:51.450
那就用lessoners

20:51.450 --> 20:53.450
但是lessoners你心里边要有数

20:53.450 --> 20:55.450
你就不要像调试了

20:55.450 --> 20:57.450
好 这是这个

20:57.450 --> 20:59.450
还有没有其他方式呢

20:59.450 --> 21:01.450
其实还有 还有第三种方式

21:01.450 --> 21:03.450
第三种方式呢

21:03.450 --> 21:05.450
本质上的跟lessoners是差不多

21:05.450 --> 21:07.450
啥意思 哪种第三种方式呢

21:07.450 --> 21:09.450
其实都是学过 这个第三种方式也是学过的

21:09.450 --> 21:11.450
只是大家想不想得到

21:11.450 --> 21:13.450
我用属性传递

21:13.450 --> 21:15.450
我不用那个事件了

21:15.450 --> 21:17.450
我用属性的 反正都传的寒

21:17.450 --> 21:19.450
说过来我用属性来接受

21:19.450 --> 21:21.450
比方说我们这里属性的名字要做

21:21.450 --> 21:23.450
click

21:23.450 --> 21:25.450
属性的名字要做click

21:25.450 --> 21:27.450
类型呢 类型就是bunk

21:27.450 --> 21:29.450
是一个函数

21:29.450 --> 21:31.450
好 那你给我传一个click

21:31.450 --> 21:33.450
函数进来

21:33.450 --> 21:35.450
那么这样子我们来看

21:35.450 --> 21:37.450
有了属性过后

21:37.450 --> 21:39.450
我这里是不是用了第二种方式

21:39.450 --> 21:44.490
第二种方法

21:44.490 --> 21:46.490
好 这边我们该传的是什么的

21:46.490 --> 21:48.490
传的就不是事件了 传的是一个属性

21:48.490 --> 21:50.490
属性click

21:50.490 --> 21:52.490
传过去 传到一个函数过去

21:52.490 --> 21:54.490
没问题吧 传到一个函数过去

21:54.490 --> 21:56.490
然后这边呢

21:56.490 --> 21:58.490
去调后用这个函数就完事了

21:58.490 --> 22:00.490
就怎么调用呢 this

22:00.490 --> 22:02.490
还是一样

22:02.490 --> 22:04.490
let's think

22:04.490 --> 22:06.490
我看一下有没有传这个事件啊

22:06.490 --> 22:08.490
判断一下 this

22:08.490 --> 22:10.490
click 有没有传啊

22:10.490 --> 22:12.490
有传的话我就调用一下这个this click

22:12.490 --> 22:14.490
调用一下

22:14.490 --> 22:16.490
调用完了过后在这边

22:16.490 --> 22:18.490
我们是不是等待

22:18.490 --> 22:20.490
还要传一个数据

22:20.490 --> 22:22.490
this called

22:22.490 --> 22:24.490
传个数据

22:24.490 --> 22:26.490
或者 error

22:26.490 --> 22:28.490
this is loaded so we force

22:28.490 --> 22:30.490
this error

22:30.490 --> 22:32.490
so we error

22:32.490 --> 22:34.490
本质上跟那个ness

22:34.490 --> 22:36.490
本质上差不多

22:36.490 --> 22:38.490
只不过是通过属性传递的就不是事件了

22:38.490 --> 22:40.490
好 当然这样子呢

22:40.490 --> 22:42.490
带五七五里面看上去有点怪吧

22:42.490 --> 22:44.490
在 react里面这样子很正常

22:44.490 --> 22:48.950
好 点击

22:48.950 --> 22:50.950
你看 所以还是可以

22:50.950 --> 22:52.950
对不对 还是可以的

22:52.950 --> 22:54.950
好了 我就说

22:54.950 --> 22:56.950
这三种处理办法

22:56.950 --> 22:58.950
第三种

22:58.950 --> 23:00.950
处理办法

23:00.950 --> 23:02.950
这三种处理办法解决的问题都是一个问题

23:02.950 --> 23:04.950
就是

23:04.950 --> 23:06.950
我在执逐件里边

23:06.950 --> 23:08.950
我发生了一件事

23:08.950 --> 23:10.950
我要让副组建处理

23:10.950 --> 23:12.950
但是呢 我要等副组建处理完了过后

23:12.950 --> 23:14.950
我还要继续处理

23:14.950 --> 23:16.950
都要做完全这件事

23:16.950 --> 23:18.950
你们以后的开发过程中呢

23:18.950 --> 23:20.950
可能会遇到这样的场景

23:20.950 --> 23:22.950
所以说这里给他说一下

23:22.950 --> 23:24.950
我们学到了一个新知识

23:24.950 --> 23:26.950
就是 lessoners

23:26.950 --> 23:28.950
好了 这是第1个例子

23:28.950 --> 23:35.460
第2个例子

23:35.460 --> 23:37.460
我们先说第2个例子

23:37.460 --> 23:42.700
第2个例子呢

23:42.700 --> 23:44.700
就是一个非常常见的一个

23:44.700 --> 23:46.700
问题了 就是表单

23:46.700 --> 23:48.700
我们在 viu 里边还没有处理过表单

23:48.700 --> 23:50.700
对吧 表单该如何处理

23:50.700 --> 23:52.700
这个例子呢

23:52.700 --> 23:54.700
我们来看一下我们的处建

23:54.700 --> 23:56.700
处建只有一个

23:56.700 --> 23:58.700
所写的一些样式

23:58.700 --> 24:00.700
就是说了

24:00.700 --> 24:02.700
就是一个 dab 里边

24:02.700 --> 24:04.700
左边一个表单

24:04.700 --> 24:06.700
右边有一个显示表单内容的区域

24:06.700 --> 24:08.700
左边一个表单

24:08.700 --> 24:10.700
这是 form

24:10.700 --> 24:12.700
然后呢 右边

24:12.700 --> 24:14.700
有一个显示表单内容的区域

24:14.700 --> 24:16.700
一边显示的是

24:16.700 --> 24:18.700
其实显示个对象 叫 form data

24:18.700 --> 24:20.700
我用一个 pre 元数

24:20.700 --> 24:22.700
因为你在这里写个对象的话

24:22.700 --> 24:24.700
它会把它自动转换成节省格式

24:24.700 --> 24:26.700
显示到这

24:26.700 --> 24:28.700
非常简单啊 就这个对象

24:28.700 --> 24:30.700
账号 密码

24:30.700 --> 24:32.700
爱号

24:32.700 --> 24:34.700
庆别 年龄

24:34.700 --> 24:36.700
这个是自我介绍

24:36.700 --> 24:38.700
这个玩意我就随便写了一个

24:38.700 --> 24:40.700
记住我的选择 remember

24:40.700 --> 24:42.700
就这么一个对象

24:42.700 --> 24:44.700
我就把对象显示到这

24:44.700 --> 24:46.700
viu 呢 如果说你直接在这里写个对象的话

24:46.700 --> 24:48.700
还会把它转换成节省格式

24:48.700 --> 24:50.700
因此为了让格式好看一点

24:50.700 --> 24:52.700
我刚才加了个 pre 元数

24:52.700 --> 24:54.700
这样子呢 这个里面有一个换行

24:54.700 --> 24:56.700
在这里就有换行 这样好看一点

24:56.700 --> 24:58.700
好 现在那左边是一个表单

24:58.700 --> 25:00.700
这个表单也没什么好说的啊

25:00.700 --> 25:02.700
一个input 到处是input

25:02.700 --> 25:04.700
水元数啊 都没什么好说的

25:04.700 --> 25:06.700
我现在要做一件事

25:06.700 --> 25:08.700
就是要把这个数据跟那个表单关联起来

25:08.700 --> 25:10.700
啥意思啊

25:10.700 --> 25:12.700
就是我一个账号变了 你这里得变

25:12.700 --> 25:14.700
或者

25:14.700 --> 25:16.700
不但这里账号变了 你这里得变

25:16.700 --> 25:18.700
那么我这里还有

25:18.700 --> 25:20.700
就是这个地方

25:20.700 --> 25:22.700
我这里是 a 3個 a

25:22.700 --> 25:24.700
那么一开始的时候账号也得是3个 a

25:24.700 --> 25:26.700
就是两个东西是统一的

25:26.700 --> 25:28.700
对吧 都要叫做表单绑定

25:28.700 --> 25:30.700
那表单绑定怎么做呢

25:30.700 --> 25:32.700
其实也并不复杂啊

25:32.700 --> 25:34.700
比方说我们这里的账号

25:34.700 --> 25:36.700
这里我怎么做

25:36.700 --> 25:38.700
账号的数据要来自于这个数据

25:38.700 --> 25:40.700
对不对

25:40.700 --> 25:42.700
好 那么这个很简单

25:42.700 --> 25:44.700
我就不是绑定个属性就完了吗

25:44.700 --> 25:46.700
所以绑定一个属性

25:46.700 --> 25:48.700
input 元数的属性 viu

25:48.700 --> 25:50.700
不就是那个里面显示的那种吗

25:50.700 --> 25:52.700
都得到分别的

25:52.700 --> 25:54.700
没有问题吧

25:54.700 --> 25:56.700
你看现在没看出来啊

25:56.700 --> 25:58.700
比方说这里

25:58.700 --> 26:00.700
我们给它改一个abc

26:00.700 --> 26:02.700
保存

26:02.700 --> 26:04.700
那你看这里是不是abc了

26:04.700 --> 26:06.700
把这边的数据扔过来

26:06.700 --> 26:08.700
这一件事完成了

26:08.700 --> 26:10.700
另一件事就是这边数据变了之后

26:10.700 --> 26:12.700
我这边也得变

26:12.700 --> 26:14.700
是不是也很简单 怎么弄

26:14.700 --> 26:16.700
我们给它做这个事件

26:16.700 --> 26:18.700
怎么事件呢 我们可以用input

26:18.700 --> 26:20.700
改变的是 搞清楚

26:20.700 --> 26:22.700
input的时间跟那个签级

26:22.700 --> 26:24.700
签级时间不一样的

26:24.700 --> 26:26.700
签级时间是要失去焦点的时候

26:26.700 --> 26:28.700
才会触发

26:28.700 --> 26:30.700
input只要变化它就会触发

26:30.700 --> 26:32.700
触发的更加实实一点

26:32.700 --> 26:34.700
我们用input的时间

26:34.700 --> 26:36.700
input的时间里边

26:36.700 --> 26:38.700
它的数据变了 我们怎么拿到它的数据

26:38.700 --> 26:40.700
我们在这里是不是可以用event

26:40.700 --> 26:42.700
这个玩意我们讲过没

26:42.700 --> 26:44.700
说讲过的

26:44.700 --> 26:46.700
在那个事件注册里边

26:46.700 --> 26:48.700
这里用event可以拿到个事件参数

26:48.700 --> 26:50.700
e 对不对

26:50.700 --> 26:52.700
拿到个事件参数

26:52.700 --> 26:54.700
然后target

26:54.700 --> 26:56.700
是吧 这是原生动物操作

26:56.700 --> 26:58.700
事件参数点target 事件元

26:58.700 --> 27:00.700
然后点value

27:00.700 --> 27:02.700
不就是这个文明方的数据吗

27:02.700 --> 27:04.700
我把这个数据复制给谁

27:04.700 --> 27:06.700
复制给formdata

27:06.700 --> 27:08.700
点login

27:08.700 --> 27:10.700
不就完了嘛

27:10.700 --> 27:12.700
复制完了

27:12.700 --> 27:14.700
来看一下

27:14.700 --> 27:16.700
一开始你看这个数据过来了

27:16.700 --> 27:18.700
然后我这边改

27:18.700 --> 27:20.700
你看这边数据是不是也跟着在变

27:20.700 --> 27:22.700
这样简单对不对

27:22.700 --> 27:24.700
所以我们这里要实现这个效果

27:24.700 --> 27:26.700
关键就是一个属性一个世界

27:26.700 --> 27:28.700
属性就是value

27:28.700 --> 27:30.700
时间名就是input

27:30.700 --> 27:32.700
也意思吧

27:32.700 --> 27:34.700
并不复杂吧

27:34.700 --> 27:36.700
那么拿到这个东西之后

27:36.700 --> 27:38.700
我们这里

27:38.700 --> 27:40.700
其实这样子写了

27:40.700 --> 27:42.700
可不可以 刚刚可以 没有任何问题

27:42.700 --> 27:44.700
因此为用了给我们出了一个

27:44.700 --> 27:46.700
语法堂

27:46.700 --> 27:48.700
叫做vmode

27:48.700 --> 27:50.700
这个东西其实我们在

27:50.700 --> 27:52.700
学习为用的前两节课好像有看到过

27:52.700 --> 27:54.700
意识后面没有机会讲

27:54.700 --> 27:56.700
那么这里即将遇到了

27:56.700 --> 27:58.700
所以我们这里补充它

27:58.700 --> 28:00.700
vmode这个语法堂

28:00.700 --> 28:02.700
实际上就是这里一个属性一个世界

28:02.700 --> 28:04.700
它这是个语法堂

28:04.700 --> 28:06.700
它最终会被转换成这种格式

28:06.700 --> 28:08.700
所以vmode

28:08.700 --> 28:10.700
面说是问到vmode的本质是什么

28:10.700 --> 28:12.700
就是一个属性value

28:12.700 --> 28:14.700
绑定的属性value同时注册

28:14.700 --> 28:16.700
一个世界input

28:16.700 --> 28:18.700
就是这两个东西的组合

28:18.700 --> 28:20.700
但是你写下来就可以很简单的

28:20.700 --> 28:22.700
把它写成

28:22.700 --> 28:24.700
form data

28:24.700 --> 28:26.700
就完了

28:26.700 --> 28:28.700
vmode有什么意思 就是双向绑定的意思

28:28.700 --> 28:30.700
我的数据

28:30.700 --> 28:32.700
来自于这个数据

28:32.700 --> 28:34.700
我变化过后要更改这个数据

28:34.700 --> 28:36.700
对吧 我的数据来自于这个数据

28:36.700 --> 28:38.700
我变化过后要更改这个数据

28:40.700 --> 28:42.700
就ok了

28:42.700 --> 28:44.700
好 咱们来看一下

28:44.700 --> 28:46.700
效果是完全一样的

28:46.700 --> 28:48.700
vmode

28:48.700 --> 28:50.700
没问题吧 咱们继续看

28:50.700 --> 28:52.700
下面的密码是不是也很简单的

28:52.700 --> 28:54.700
密码我们用vmode

28:54.700 --> 28:56.700
form data

28:56.700 --> 28:58.700
dialoggin password

28:58.700 --> 29:00.700
密码 你看这个密码

29:00.700 --> 29:02.700
我这里一遍 这边那边

29:02.700 --> 29:04.700
对不对

29:04.700 --> 29:06.700
然后i號这里是有多个

29:06.700 --> 29:08.700
就是复选框

29:08.700 --> 29:10.700
那么复选框

29:10.700 --> 29:12.700
复选框这里有两种情况

29:12.700 --> 29:14.700
一个是复选框你是一个数组

29:14.700 --> 29:16.700
你的数据是一个数组

29:16.700 --> 29:18.700
那么这个时候

29:18.700 --> 29:20.700
你可不可以用vmode也可以

29:20.700 --> 29:22.700
复选框也可以用vmode

29:22.700 --> 29:24.700
叫做form data

29:24.700 --> 29:26.700
dialoggin

29:26.700 --> 29:28.700
这个数据是啥呀

29:28.700 --> 29:30.700
这个数据是一个数组

29:30.700 --> 29:32.700
因为这个vmode的愚法堂

29:32.700 --> 29:34.700
它针对不同的表单元素

29:34.700 --> 29:36.700
专门来用来做表单元素的

29:36.700 --> 29:38.700
你不要的刀是乱用

29:38.700 --> 29:40.700
针对不同的表单元素

29:40.700 --> 29:42.700
它有不同的处理

29:42.700 --> 29:44.700
而且针对不同的数据内情

29:44.700 --> 29:46.700
它有不同的处理

29:46.700 --> 29:48.700
当它发现你这个玩意是一个数据

29:48.700 --> 29:50.700
是一个数组的时候

29:50.700 --> 29:52.700
它会怎么样呢

29:52.700 --> 29:54.700
这个文明框的选中状态

29:54.700 --> 29:58.650
它就不是vmode属性了

29:58.650 --> 30:00.650
是checks属性

30:00.650 --> 30:02.650
它这个复选框的选中状态

30:02.650 --> 30:04.650
取决于

30:04.650 --> 30:06.650
你这个复选框的vmode

30:06.650 --> 30:08.650
是不是在这个数组中

30:08.650 --> 30:10.650
说起来有点让

30:10.650 --> 30:12.650
其实极其合理

30:12.650 --> 30:14.650
比方说我这个i号

30:14.650 --> 30:16.650
第一个运动就是sport

30:16.650 --> 30:18.650
你看我这个i号数组

30:18.650 --> 30:20.650
i号数组里边是不是有个sport

30:20.650 --> 30:22.650
如果说你这个value值在这个数组中

30:22.650 --> 30:24.650
那么它就是选中的

30:24.650 --> 30:26.650
没意思吧

30:26.650 --> 30:28.650
反之它就是不选中的

30:28.650 --> 30:30.650
好保存啊我们看一下运动

30:30.650 --> 30:32.650
运动是不是选中了为什么选中

30:32.650 --> 30:34.650
因为运动这一项的value值

30:34.650 --> 30:36.650
在这个中里面

30:36.650 --> 30:38.650
在其中

30:38.650 --> 30:40.650
那么如果说这个数组里边没有这个

30:40.650 --> 30:42.650
就是我的i号没有运动

30:42.650 --> 30:44.650
那么这一项自然不选中

30:44.650 --> 30:46.650
看到没不仅如此

30:46.650 --> 30:48.650
由于vmode是双向绑定

30:48.650 --> 30:52.650
因此呢这里的选中状态的变化

30:52.650 --> 30:54.650
它会影响到这个数组

30:54.650 --> 30:56.650
输入去它就不保证了

30:56.650 --> 30:58.650
它会影响到这个数组

30:58.650 --> 31:00.650
看到没它不选中了

31:00.650 --> 31:02.650
那么这个数组里面

31:02.650 --> 31:04.650
就消射这一项

31:04.650 --> 31:06.650
选中它就会把value值加进这一项

31:06.650 --> 31:08.650
你看这个事情它就给你做好了

31:08.650 --> 31:10.650
那么同样的道理

31:10.650 --> 31:12.650
电影那些是不是一样的

31:12.650 --> 31:14.650
我们直接复制

31:14.650 --> 31:16.650
value值是movie

31:16.650 --> 31:20.090
这个value值呢是music

31:20.090 --> 31:22.090
这个value值呢是

31:22.090 --> 31:24.090
其他 other

31:24.090 --> 31:26.090
好保存啊

31:26.090 --> 31:28.090
你看

31:28.090 --> 31:30.090
电影去掉一看是没

31:30.090 --> 31:32.090
这边就没了数组里边一开始有

31:32.090 --> 31:33.090
选中的

31:33.090 --> 31:36.720
音乐空输出了

31:36.720 --> 31:38.720
看到没

31:38.720 --> 31:39.720
那么这样子数据呢

31:39.720 --> 31:41.720
是不是跟那个表达这一项关联起来

31:41.720 --> 31:43.720
当然这个我们那个项目里面

31:43.720 --> 31:44.720
好像没有这个东西啊

31:44.720 --> 31:45.720
我就顺便说一下

31:45.720 --> 31:47.720
好性别单选框

31:47.720 --> 31:49.720
一样的道理

31:49.720 --> 31:51.720
一样的道理

31:51.720 --> 31:53.720
单选框呢这里呢你看啊

31:53.720 --> 31:55.720
单选框我们这里是用个制幅创来表示

31:55.720 --> 31:56.720
因为它只有一项选中

31:56.720 --> 31:57.720
它就不是输出了啊

31:57.720 --> 31:59.720
性别没有

31:59.720 --> 32:02.720
这里呢我们用vmode

32:03.720 --> 32:05.720
formdata

32:05.720 --> 32:06.720
6

32:06.720 --> 32:07.720
性别

32:07.720 --> 32:09.720
那么它的value值呢是没有

32:09.720 --> 32:10.720
它发现这个

32:10.720 --> 32:12.720
这个value值等于这个

32:12.720 --> 32:13.720
等于这个值

32:13.720 --> 32:14.720
那么它就选中了

32:14.720 --> 32:15.720
不等于这个值

32:15.720 --> 32:16.720
它就不选中

32:16.720 --> 32:17.720
就这么简单

32:17.720 --> 32:18.720
那么这里呢

32:18.720 --> 32:20.720
一切都是非常符合逻辑的啊

32:20.720 --> 32:21.720
其实这个东西

32:21.720 --> 32:23.720
我平时都没有必要去背

32:23.720 --> 32:24.720
也没有必要去背

32:24.720 --> 32:25.720
它符合逻辑就行了

32:25.720 --> 32:26.720
你这个性别吗

32:26.720 --> 32:27.720
它是不是男的

32:27.720 --> 32:29.720
它是男的就选中了呗

32:29.720 --> 32:30.720
不是男的不选中没

32:30.720 --> 32:31.720
你是不是女的

32:31.720 --> 32:32.720
是女的就选中

32:32.720 --> 32:33.720
不是女的就不选中

32:33.720 --> 32:34.720
好来看一下

32:34.720 --> 32:36.720
是不是

32:36.720 --> 32:37.720
选择女

32:37.720 --> 32:39.720
是不是变成非没有了

32:39.720 --> 32:40.720
选择男是不是变成没有了

32:40.720 --> 32:41.720
哎有些可能

32:41.720 --> 32:42.720
细心的同学可能有疑问

32:42.720 --> 32:43.720
就这两个单选框

32:43.720 --> 32:45.720
它没有加那种属性啊

32:45.720 --> 32:47.720
不是说单选框的那种属性要

32:47.720 --> 32:49.720
一样才能保证互斥嘛

32:49.720 --> 32:50.720
对不对

32:50.720 --> 32:51.720
你选中我就不选中

32:51.720 --> 32:52.720
没必要了

32:52.720 --> 32:53.720
这里不用加那种属性

32:53.720 --> 32:54.720
为什么呢

32:54.720 --> 32:55.720
因为他们两个的选中状态

32:55.720 --> 32:57.720
是由介石

32:57.720 --> 32:59.720
至于无忧通过介石来控制的

32:59.720 --> 33:00.720
当你选中了

33:00.720 --> 33:02.720
当我点击他的时候

33:02.720 --> 33:04.720
他就会把这个6

33:04.720 --> 33:05.720
复制为非没有

33:05.720 --> 33:07.720
6是复制为非没有过后呢

33:07.720 --> 33:08.720
重新选的

33:08.720 --> 33:09.720
重新选的这一块

33:09.720 --> 33:10.720
是不是就变成不选中了

33:10.720 --> 33:12.720
无忧会让他不选中

33:12.720 --> 33:14.720
是用介石来控制的

33:14.720 --> 33:16.720
你看这两个这个值

33:16.720 --> 33:18.720
看没

33:18.720 --> 33:21.720
一开始默认选中男

33:21.720 --> 33:22.720
原理是吧

33:22.720 --> 33:24.720
好年龄

33:24.720 --> 33:27.720
一样的VMODE

33:28.720 --> 33:30.720
我这里是个type of number

33:30.720 --> 33:31.720
的这个

33:31.720 --> 33:32.720
也是一样

33:32.720 --> 33:33.720
一开始是18嘛

33:33.720 --> 33:34.720
所以说这里显示18

33:34.720 --> 33:36.720
我这里改动年龄的时候

33:36.720 --> 33:37.720
所以这边也改了

33:37.720 --> 33:39.720
但是有个小的细节

33:39.720 --> 33:40.720
这边改了过后呢

33:40.720 --> 33:41.720
有一个小的细节

33:41.720 --> 33:43.720
什么细节呢就是

33:44.720 --> 33:46.720
变成制服创了

33:46.720 --> 33:47.720
变成制服创了

33:47.720 --> 33:48.720
变成制服创了

33:48.720 --> 33:50.720
如果说我希望还是

33:50.720 --> 33:51.720
数字怎么办呢

33:51.720 --> 33:52.720
这里呢

33:52.720 --> 33:53.720
我顺便说一下

33:53.720 --> 33:54.720
一个事件修饰服

33:54.720 --> 33:55.720
就事件修饰服

33:55.720 --> 33:56.720
我们在讲那个

33:56.720 --> 33:58.720
自定义事件的时候

33:58.720 --> 33:59.720
自定义事件的时候

33:59.720 --> 34:00.720
我们讲过

34:00.720 --> 34:02.720
只是他原生的事件修饰服

34:02.720 --> 34:04.720
其实我们没有怎么说

34:04.720 --> 34:06.720
面皮都没遇到嘛

34:06.720 --> 34:07.720
没遇到就没有怎么说

34:07.720 --> 34:09.720
其实有些事件修饰服

34:09.720 --> 34:10.720
我们大概看一下

34:10.720 --> 34:11.720
在官方文档里面

34:12.720 --> 34:14.720
事件修饰服你看

34:14.720 --> 34:16.720
就是在我们在做事件的时候

34:17.720 --> 34:18.720
关键是在事件

34:18.720 --> 34:19.720
现在我们刚才不是事件

34:19.720 --> 34:21.720
刚才是微摸的指令

34:21.720 --> 34:22.720
不是事件

34:22.720 --> 34:23.720
事件是微按指令

34:23.720 --> 34:24.720
对吧

34:24.720 --> 34:25.720
事件是指令的一种

34:25.720 --> 34:26.720
那么事件的时候

34:26.720 --> 34:27.720
我们不是有个冒号

34:27.720 --> 34:28.720
冒号后面是什么

34:28.720 --> 34:30.720
叫指令参数

34:30.720 --> 34:31.720
我们学那个

34:31.720 --> 34:32.720
自定义事件的时候

34:32.720 --> 34:33.720
是学过的

34:33.720 --> 34:34.720
叫指令参数

34:34.720 --> 34:35.720
其实这些事件

34:35.720 --> 34:37.720
都还有一些事件修饰服

34:37.720 --> 34:38.720
是官方给我们提供的

34:39.720 --> 34:40.720
在事件的时候使用

34:40.720 --> 34:41.720
有这么一些

34:41.720 --> 34:42.720
stop

34:42.720 --> 34:43.720
阻止事件冒泡

34:44.720 --> 34:45.720
prevent

34:45.720 --> 34:47.720
阻止事件默认行为

34:47.720 --> 34:48.720
capture

34:49.720 --> 34:50.720
什么在补货阶段

34:50.720 --> 34:51.720
运行事件

34:52.720 --> 34:53.720
self呢这个有点意思

34:53.720 --> 34:54.720
就表示着说

34:54.720 --> 34:56.720
你这个事件必须要发生在

34:56.720 --> 34:57.720
当前元素

34:57.720 --> 34:58.720
比方说

35:00.720 --> 35:01.720
这是一个DIV

35:01.720 --> 35:03.720
它里边还有一个DIV

35:03.720 --> 35:05.720
外面的DIV注册事件

35:05.720 --> 35:08.720
一个外面的DIV注册事件

35:09.720 --> 35:10.720
加了一个self

35:10.720 --> 35:11.720
让你点里面的DIV

35:11.720 --> 35:12.720
它是不生效的

35:12.720 --> 35:14.720
这个事件是不会触发的

35:15.720 --> 35:17.720
因为它必须要点自身的时候

35:17.720 --> 35:18.720
就是一点target

35:18.720 --> 35:19.720
必须要等于

35:19.720 --> 35:21.720
事件注册本身

35:21.720 --> 35:22.720
注册那个元素本身

35:22.720 --> 35:24.720
它才会触发

35:24.720 --> 35:25.720
需要的时候有用

35:25.720 --> 35:26.720
也是也不怎么用

35:26.720 --> 35:27.720
其实用了比较多的

35:27.720 --> 35:28.720
可能就是事件冒泡

35:28.720 --> 35:30.720
和阻止事件默认行为

35:30.720 --> 35:31.720
还就是那个

35:31.720 --> 35:32.720
万事

35:32.720 --> 35:33.720
这个事件只触发一次

35:33.720 --> 35:34.720
之后就不再触发了

35:34.720 --> 35:35.720
passive

35:35.720 --> 35:36.720
passive

35:36.720 --> 35:38.720
里面平时开发用了少

35:38.720 --> 35:40.720
移动端开发用了多一点

35:40.720 --> 35:41.720
跟这个东西

35:41.720 --> 35:42.720
跟效率有关

35:42.720 --> 35:44.720
跟渲染效率有关

35:44.720 --> 35:45.720
比方说一些滚动事件

35:45.720 --> 35:46.720
你可以加上这个passive

35:46.720 --> 35:48.720
或者是一个

35:48.720 --> 35:49.720
手指移动的事件

35:49.720 --> 35:50.720
加上这个东西

35:50.720 --> 35:51.720
它会提高效率

35:54.160 --> 35:56.160
好了就是这些事件修饰服

35:56.160 --> 35:57.160
我们这里还有一些按键修饰服

35:57.160 --> 35:59.160
比方说你注册一些键盘事件

35:59.160 --> 36:01.160
那么比方说我们这里keyup

36:01.160 --> 36:03.160
键盘弹线的事件

36:03.160 --> 36:05.160
用个修饰服enter

36:05.160 --> 36:07.160
那么就表示

36:07.160 --> 36:10.160
我当我是按了回车键之后

36:10.160 --> 36:12.160
才会触发

36:12.160 --> 36:13.160
明白了意思吧

36:13.160 --> 36:14.160
Page當

36:14.160 --> 36:15.160
当我按了Page當

36:15.160 --> 36:16.160
这个是按键之后

36:16.160 --> 36:17.160
我才会触发

36:17.160 --> 36:19.160
还有个键盘

36:19.160 --> 36:20.160
keyup直接写个数字

36:20.160 --> 36:22.160
表示的是keycode

36:22.160 --> 36:23.160
对不对

36:23.160 --> 36:24.160
你们自己看一下

36:24.160 --> 36:25.160
系统修饰服

36:25.160 --> 36:27.160
比如说你有没有按这个按键

36:27.160 --> 36:28.160
然后keyup

36:28.160 --> 36:30.160
alt 67

36:30.160 --> 36:31.160
什么意思呢

36:31.160 --> 36:32.160
就是alt加C

36:32.160 --> 36:34.160
C的ask嘛就是67嘛

36:34.160 --> 36:35.160
对不对

36:35.160 --> 36:36.160
按住alt键

36:36.160 --> 36:37.160
又按了C

36:37.160 --> 36:38.160
那么就触发这个

36:38.160 --> 36:40.160
它会触发这个事件

36:40.160 --> 36:41.160
它其实

36:41.160 --> 36:42.160
本质上的vue内部

36:42.160 --> 36:44.160
就是注册了这个事件

36:44.160 --> 36:45.160
然后给你做了一个判断

36:45.160 --> 36:46.160
你有没有按alt

36:46.160 --> 36:48.160
有没有按这个67的键盘吗

36:49.160 --> 36:50.160
你可以去看一下

36:50.160 --> 36:51.160
非常简单的

36:52.160 --> 36:53.160
那么我们现在知道了

36:53.160 --> 36:54.160
事件修饰服

36:54.160 --> 36:55.160
但是我们这些可以

36:55.160 --> 36:56.160
好像也没有什么用

36:56.160 --> 36:57.160
知道了

36:57.160 --> 36:58.160
事件修饰服之后呢

36:58.160 --> 37:00.160
我们这里还是问题还没解决

37:00.160 --> 37:02.160
我想把它转换成number

37:02.160 --> 37:04.160
让你可以自己手动转

37:04.160 --> 37:06.160
也可以呢

37:06.160 --> 37:08.860
用这种方式

37:09.860 --> 37:12.860
vmode它也是有事件修饰服的

37:12.860 --> 37:15.860
在组建表达输入绑定这里

37:15.860 --> 37:16.860
vmode

37:17.860 --> 37:19.860
你看它也是有事与修饰服的

37:19.860 --> 37:21.860
一个是lens

37:21.860 --> 37:22.860
这什么意思呢

37:22.860 --> 37:24.860
就是延迟触发

37:24.860 --> 37:26.860
比方说我这里改成lens

37:26.860 --> 37:28.860
账号这里改成lens

37:29.860 --> 37:33.620
保存你看一下

37:33.620 --> 37:34.620
账号我这里变化的时候

37:34.620 --> 37:35.620
你看这里有变吗

37:35.620 --> 37:36.620
没有变

37:36.620 --> 37:38.620
我失去焦点的时候

37:38.620 --> 37:40.620
将来又是千几事件触发的时候

37:40.620 --> 37:41.620
它在变化

37:41.620 --> 37:43.620
加这个lens就起这么一个作用

37:43.620 --> 37:44.620
延迟触发

37:44.620 --> 37:45.620
延迟触发有个好处

37:45.620 --> 37:47.620
就是可以提高渲染效率

37:47.620 --> 37:49.620
但是数据就不算那么实实的

37:49.620 --> 37:51.620
自己做取舍

37:51.620 --> 37:53.620
因为它渲染就不会不断的重新渲染

37:53.620 --> 37:55.620
不然的话你像这样子

37:55.620 --> 37:57.620
像之前的那种做法

37:57.620 --> 37:58.620
这里一变

37:58.620 --> 37:59.620
数据变了

37:59.620 --> 38:00.620
数据变了

38:00.620 --> 38:01.620
这里要重新渲染

38:01.620 --> 38:02.620
对不对

38:02.620 --> 38:04.620
它渲染的次数就比较多

38:04.620 --> 38:05.620
但是你用lens之后

38:05.620 --> 38:06.620
渲染次数少一点

38:06.620 --> 38:08.620
但是数据就不实实了

38:08.620 --> 38:09.620
自己去取舍

38:09.620 --> 38:11.620
一个是number

38:11.620 --> 38:13.620
number就是我们现在想要的

38:13.620 --> 38:14.620
年龄

38:14.620 --> 38:16.620
年龄点number

38:16.620 --> 38:18.620
刚才顺便就把它事件修饰服说一下

38:18.620 --> 38:19.620
那么现在又说回到

38:19.620 --> 38:21.620
这个vmode修饰服

38:21.620 --> 38:22.620
number

38:22.620 --> 38:23.620
number就是

38:23.620 --> 38:25.620
它会自动把一个数据

38:25.620 --> 38:27.620
转换成数字内形

38:27.620 --> 38:28.620
你看现在这里是不是

38:28.620 --> 38:29.620
不是制服串了

38:29.620 --> 38:30.620
刚才是制服串

38:30.620 --> 38:32.620
它把它转换成数字内形

38:32.620 --> 38:34.620
就体重了一个作用

38:34.620 --> 38:35.620
还有什么呢

38:35.620 --> 38:36.620
还有就是tune

38:36.620 --> 38:39.620
它会自动去掉所谓空白

38:39.620 --> 38:40.620
比方说我们这里账号

38:40.620 --> 38:42.620
我们给它加上一个tune

38:42.620 --> 38:45.620
密码加上一个tune

38:45.620 --> 38:47.620
密码就不加tune

38:47.620 --> 38:48.620
你看

38:48.620 --> 38:50.620
密码这里我用空格

38:50.620 --> 38:52.620
你看这里是不是也有空格

38:52.620 --> 38:54.620
账号这里我用空格

38:54.620 --> 38:58.060
这里是不是没有空格

38:58.060 --> 38:59.060
你看

38:59.060 --> 39:00.060
空白又没了

39:00.060 --> 39:01.060
对不对

39:01.060 --> 39:03.060
好 这是其中一个作用

39:03.060 --> 39:05.060
好 个人简介

39:05.060 --> 39:07.060
TXA Array

39:07.060 --> 39:08.060
TXA Array

39:08.060 --> 39:09.060
它也可以使用vmode

39:09.060 --> 39:10.060
一样的

39:10.060 --> 39:11.060
我们给它

39:11.060 --> 39:12.060
我就说一下是一样的

39:12.060 --> 39:14.060
Introduce

39:14.060 --> 39:16.060
Introduce

39:16.060 --> 39:18.060
这里有换行

39:18.060 --> 39:20.060
那么这里也有换行

39:20.060 --> 39:22.060
这里用个搞N就可以了

39:22.060 --> 39:24.750
好 你看

39:24.750 --> 39:25.750
同样的

39:25.750 --> 39:26.750
这边换行

39:26.750 --> 39:28.750
你看 这边也有换行

39:28.750 --> 39:29.750
一样的

39:29.750 --> 39:30.750
那么这里

39:30.750 --> 39:31.750
像这么多行文本

39:31.750 --> 39:35.260
我可以给它加上一个layer

39:35.260 --> 39:36.260
layer的话

39:36.260 --> 39:37.260
这里换行

39:37.260 --> 39:38.260
完了之后

39:38.260 --> 39:40.260
你看 这边还会变好

39:40.260 --> 39:41.260
好 最后一个

39:41.260 --> 39:42.260
记住我的选择

39:42.260 --> 39:43.260
那么这个

39:43.260 --> 39:45.260
只有一个单语多选框

39:45.260 --> 39:46.260
而且它的数据

39:46.260 --> 39:47.260
它不是一个数组

39:47.260 --> 39:48.260
你看 之前的多选框数据

39:48.260 --> 39:49.260
是一个数据

39:49.260 --> 39:50.260
在多个中

39:50.260 --> 39:51.260
选择几个

39:51.260 --> 39:52.260
那么remember

39:52.260 --> 39:53.260
它是一个

39:53.260 --> 39:54.260
它是一个布耳子

39:54.260 --> 39:56.260
到底选没选中呢

39:56.260 --> 39:58.260
这个东西其实也很简单

39:58.260 --> 40:00.260
你直接用vmode

40:00.260 --> 40:02.260
formdata

40:02.260 --> 40:03.260
remember

40:03.260 --> 40:04.260
就可以了

40:04.260 --> 40:05.260
你哪白的字都不用写

40:05.260 --> 40:08.260
如果说你给它的是一个布耳子

40:08.260 --> 40:09.260
那么

40:09.260 --> 40:11.260
它为q就表示选中

40:11.260 --> 40:13.260
它为forced表示不选中

40:13.260 --> 40:14.260
就这么简单

40:14.260 --> 40:15.260
一开始forced

40:15.260 --> 40:16.260
所谓没选中

40:16.260 --> 40:17.260
点击go

40:17.260 --> 40:18.260
是不是缘的q

40:18.260 --> 40:19.260
再点击

40:19.260 --> 40:20.260
forced

40:20.260 --> 40:21.260
对吧

40:21.260 --> 40:22.260
这是布耳子的情况

40:22.260 --> 40:23.260
其实这里我还少说了一个

40:23.260 --> 40:24.260
就是下拉列表

40:24.260 --> 40:26.260
下拉列表我们也可以说一说吧

40:26.260 --> 40:27.260
也非常简单

40:27.260 --> 40:29.260
就是居住

40:29.260 --> 40:32.260
居住地

40:32.260 --> 40:34.260
我写个省份的下拉列表吧

40:34.260 --> 40:36.260
是那个

40:36.260 --> 40:38.260
这些都不要了

40:38.260 --> 40:39.260
好

40:39.260 --> 40:41.700
不行

40:41.700 --> 40:42.700
这里

40:42.700 --> 40:43.700
v6只

40:43.700 --> 40:45.700
比方说是富一

40:45.700 --> 40:46.700
富一表示的全

40:46.700 --> 40:48.700
勤选择

40:48.700 --> 40:50.700
后边lp

40:50.700 --> 40:51.700
一

40:51.700 --> 40:53.700
或者是职位

40:53.700 --> 40:55.700
职位

40:55.700 --> 40:58.700
前端开发者

40:58.700 --> 41:00.700
前端开发

41:00.700 --> 41:01.700
二

41:01.700 --> 41:02.700
那个

41:02.700 --> 41:04.700
透软开发

41:04.700 --> 41:08.260
这个白柳子就表示

41:08.260 --> 41:10.260
它的一个编号

41:10.260 --> 41:12.260
然后是

41:12.260 --> 41:16.280
全站开发

41:16.280 --> 41:17.280
项目经理

41:17.280 --> 41:24.180
随便写几个

41:24.180 --> 41:25.180
三

41:25.180 --> 41:26.180
四

41:26.180 --> 41:27.180
这是一个职位

41:27.180 --> 41:28.180
它又熬不行

41:28.180 --> 41:29.180
那么这个玩意

41:29.180 --> 41:31.180
它怎么来

41:31.180 --> 41:32.180
设置选中状态

41:32.180 --> 41:33.180
怎么来绑定数据呢

41:33.180 --> 41:34.180
数据里边我就加一个

41:34.180 --> 41:36.180
比方说职位

41:36.180 --> 41:38.180
叫

41:38.180 --> 41:40.180
那么真的当然是给的是编号

41:40.180 --> 41:42.180
因为中文这些文字

41:42.180 --> 41:44.180
只是给用户看的

41:44.180 --> 41:45.180
就像我们的数据里边

41:45.180 --> 41:46.180
一般都是记录编号

41:46.180 --> 41:48.180
比方说一开始富一

41:48.180 --> 41:49.180
我也不知道它的职位是

41:49.180 --> 41:50.180
让你选择

41:50.180 --> 41:52.180
所以一开始它就选中的是勤选择

41:52.180 --> 41:54.180
我还没绑定

41:54.180 --> 41:56.180
我们绑定了小字

41:56.180 --> 41:58.180
vmode from data

41:58.180 --> 42:02.490
就是叫

42:02.490 --> 42:04.860
你看一开始是勤选的

42:04.860 --> 42:06.860
那如果说我的数据一开始

42:06.860 --> 42:08.860
不是富一是一呢

42:08.860 --> 42:09.860
保存

42:09.860 --> 42:10.860
你看是不是全中的是全

42:10.860 --> 42:11.860
全站开发

42:11.860 --> 42:12.860
同样的这边

42:12.860 --> 42:13.860
这边一变化了过后

42:13.860 --> 42:14.860
你看这边是不是也会变

42:14.860 --> 42:18.500
这边也是不是也会变

42:18.500 --> 42:19.500
对吧

42:19.500 --> 42:21.500
非常简单

42:21.500 --> 42:23.500
不知道我还没有没有讲到的

42:23.500 --> 42:24.500
那么表达输入绑定

42:24.500 --> 42:25.500
这一张呢

42:25.500 --> 42:26.500
你可以有新的东西

42:26.500 --> 42:27.500
可以看一下

42:27.500 --> 42:29.500
有很多一些小的细节

42:29.500 --> 42:31.500
我应该大部分都讲到了

42:31.500 --> 42:34.500
如果说你真实的开发过程中

42:34.500 --> 42:35.500
遇到了一些

42:35.500 --> 42:36.500
好像老师没有提到的

42:36.500 --> 42:38.500
那么在这一张里边

42:38.500 --> 42:39.500
文档里边去查一查

42:39.500 --> 42:42.500
看一下有没有讲到的

42:42.500 --> 42:45.500
好 这是咱们这个vmode

42:45.500 --> 42:46.500
其他就没啥了

42:46.500 --> 42:48.500
这是咱们这一节课的内容

42:48.500 --> 42:49.500
这一课呢

42:49.500 --> 42:51.500
学到一点新知识

42:51.500 --> 42:52.500
一个是vmode

42:52.500 --> 42:53.500
一个是listeners

42:53.500 --> 42:54.500
还有事件修饰服

42:54.500 --> 42:56.500
我就把事件的修饰服讲了

42:56.500 --> 42:57.500
还有vmode的事件

42:57.500 --> 43:00.500
vmode的修饰服也给大家讲了

43:00.500 --> 43:03.500
好 那么这期视频完了过

43:03.500 --> 43:06.500
下期我们又接着去做文章详情页

