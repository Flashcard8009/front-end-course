WEBVTT

00:00.820 --> 00:04.620
好 这节课咱们来学习废棋API的使用了

00:04.620 --> 00:07.220
咱们这节课学习的是它的基本使用

00:07.220 --> 00:08.820
虽然说是基本使用

00:08.820 --> 00:13.820
其实这节课的东西就已经能够覆盖绝大部分的寝求场景了

00:13.820 --> 00:17.820
不信我们后边要学习VU 要学习React

00:17.820 --> 00:21.020
我们在学习的过程中你看这节课的知识就基本上够用了

00:21.020 --> 00:23.220
还有一些比较特别的地方

00:23.220 --> 00:26.820
我们在这个章节的后续课程里边再慢慢讲吧

00:26.820 --> 00:28.620
这节课大家注意听

00:28.620 --> 00:29.620
其实也没什么难的

00:29.620 --> 00:31.420
废棋API特别特别简单

00:31.420 --> 00:37.020
因为它本来就是出现的目的就是为了简化我们的阿迦克斯请求的API

00:37.020 --> 00:38.420
以前太繁琐了

00:38.420 --> 00:39.520
还要自己去封装

00:39.520 --> 00:40.320
现在不用了

00:40.320 --> 00:42.120
直接用废棋API就完事了

00:42.120 --> 00:43.820
特别特别简单

00:43.820 --> 00:46.320
我们在用的过程中这里有个测试地址

00:46.320 --> 00:49.920
因为我们必须要设计到那个阿迦克斯请求

00:49.920 --> 00:52.420
所以说我这里给大家准备了一个测试地址

00:52.420 --> 00:55.120
这个测试地址我们来看一下吧

00:55.120 --> 00:57.320
这个测试地址就是一个Gate请求

00:57.420 --> 00:58.120
得到了是什么呢

00:58.120 --> 01:00.520
得到了是中国的所有的省份数据

01:00.520 --> 01:02.120
看一下吧

01:02.120 --> 01:04.520
你看什么得到一个阶省格式

01:04.520 --> 01:07.020
一个阶省格式的省份数据

01:07.020 --> 01:08.020
所有的省份

01:08.020 --> 01:09.820
其实这个接口下面还有一些方法

01:09.820 --> 01:11.920
可以得到一些程式的数据

01:11.920 --> 01:13.920
我们一会儿要用到的时候再说吧

01:13.920 --> 01:14.620
好吧

01:14.620 --> 01:15.220
ok

01:15.220 --> 01:18.120
这就是咱们的测试的API地址

01:18.120 --> 01:20.620
当然请求的方法就是Gate方法

01:20.620 --> 01:22.120
如果我们的单一码里面

01:22.120 --> 01:24.120
怎么去发送一个阿迦克斯请求呢

01:24.120 --> 01:25.220
其实非常简单

01:25.220 --> 01:28.720
直接使用一个函数叫做废棋函数就完事了

01:28.720 --> 01:30.520
使用这个函数就可以立即

01:30.520 --> 01:31.920
它不用去乱七八糟的配置

01:31.920 --> 01:32.920
还要什么open

01:32.920 --> 01:33.820
还要什么send

01:33.820 --> 01:34.720
没有

01:34.720 --> 01:35.920
直接调用这个函数

01:35.920 --> 01:39.020
就像有点像什么杰克斯函数一样

01:39.020 --> 01:39.720
一调用

01:39.720 --> 01:41.220
它就马上发送请求了

01:41.220 --> 01:42.720
就这么简单

01:42.720 --> 01:44.420
那么这个函数怎么用呢

01:44.420 --> 01:45.820
也要搞清楚一个函数怎么用

01:45.820 --> 01:47.620
就看它的参数有哪些

01:47.620 --> 01:49.720
它的返回值是什么就完事了

01:49.720 --> 01:50.720
我们首先看参数

01:52.320 --> 01:54.920
这个函数有两个参数需要传递

01:54.920 --> 01:56.720
第一个参数是必须要传递的

01:56.720 --> 01:57.720
是请求递子

01:57.720 --> 01:58.820
这个好理解吧

01:58.820 --> 02:00.220
你给它一个递子

02:00.220 --> 02:01.320
不要说我们要请求这个递子

02:01.320 --> 02:03.020
你得把递子给它

02:03.020 --> 02:03.920
咱们来写一下

02:03.920 --> 02:06.420
编那个看这个文档

02:06.420 --> 02:07.120
我们编写

02:08.020 --> 02:08.420
来吧

02:10.720 --> 02:14.220
我们这里写上这么一个函数

02:14.220 --> 02:17.020
叫做Gate province

02:17.020 --> 02:18.420
Gate provinces

02:18.420 --> 02:21.320
得到所有的省份这个函数

02:21.320 --> 02:23.120
这个函数里面我们是不知道发送请求

02:23.120 --> 02:23.420
对吧

02:23.420 --> 02:24.120
要发送请求

02:24.120 --> 02:25.120
我们这里调用的是吧

02:25.120 --> 02:26.520
Gate provinces

02:26.520 --> 02:27.620
不是说我们这里写个按钮

02:27.620 --> 02:28.720
点击按钮过后调用

02:30.020 --> 02:31.920
这里我们用button

02:31.920 --> 02:35.220
得到所有的省份数据

02:36.820 --> 02:38.520
当我们点击这个按钮的时候

02:38.520 --> 02:40.720
我们query selector

02:40.720 --> 02:41.820
button

02:41.820 --> 02:43.220
点击这个按钮的时候

02:43.220 --> 02:45.320
我们去调用这个函数

02:45.320 --> 02:46.320
去调用这个函数

02:46.320 --> 02:48.620
Gate provinces

02:48.620 --> 02:49.120
调用这个函数

02:49.120 --> 02:49.620
完事了

02:49.620 --> 02:50.320
对吧

02:50.320 --> 02:50.920
好来吧

02:51.920 --> 02:54.120
好得到所有的省份数据

02:54.120 --> 02:54.620
对吧

02:54.620 --> 02:55.720
那么这里边怎么写

02:55.720 --> 02:57.320
我们这里就有fetch

02:57.320 --> 02:58.820
你看就是一个函数

02:58.820 --> 03:00.120
第一个传输传什么

03:00.120 --> 03:01.920
传的是url地址

03:01.920 --> 03:03.220
你要请求什么地址

03:03.220 --> 03:03.920
请求什么地址

03:03.920 --> 03:05.020
我们就请求这个地址

03:05.020 --> 03:06.220
复制一下粘贴过来

03:06.220 --> 03:07.120
都特别简单

03:07.120 --> 03:08.120
对吧

03:08.120 --> 03:09.120
第一个参数

03:09.120 --> 03:11.920
我们也可以把它放到一个变量里边

03:11.920 --> 03:12.820
然后这样子

03:12.820 --> 03:14.120
看上去更加简洁一点

03:15.920 --> 03:17.720
放到一个变量里边

03:17.720 --> 03:19.120
就请求我们的url地址

03:19.120 --> 03:19.920
就第一个参数

03:19.920 --> 03:20.320
就完了

03:20.320 --> 03:21.520
其实现在就完了

03:21.520 --> 03:22.720
就已经可以发送请求了

03:22.720 --> 03:24.320
你不信我们来看一下吧

03:24.320 --> 03:25.220
因为第二个参数

03:25.220 --> 03:26.320
它是可选的

03:26.320 --> 03:27.920
你可以写可以不写

03:27.920 --> 03:28.620
咱们来看一下吧

03:31.720 --> 03:33.520
这里我们右键检查

03:33.520 --> 03:35.620
我们来看这个调识工具里边的

03:35.620 --> 03:37.020
就是网络请求

03:37.020 --> 03:39.020
network看一下这里

03:39.020 --> 03:41.320
这里我们选用xshr

03:41.320 --> 03:42.720
这个什么的

03:42.720 --> 03:44.520
它这里解释xshr

03:44.520 --> 03:45.720
xshr什么意思

03:45.720 --> 03:47.020
就是xml

03:47.020 --> 03:48.620
atgp requests的缩写

03:48.620 --> 03:49.320
对吧

03:49.320 --> 03:50.520
end廢棋

03:50.520 --> 03:52.320
看没看没的解释end廢棋

03:52.320 --> 03:54.120
就是说我们通过廢棋

03:54.120 --> 03:56.820
通过这个以前的xshr

03:56.820 --> 03:58.220
hr这种方式

03:58.220 --> 03:59.520
去用atgp请求的

03:59.520 --> 04:01.320
得到的网络传输

04:01.320 --> 04:02.220
都会在这里显示

04:02.220 --> 04:03.520
我们不用显示其他的

04:03.520 --> 04:04.920
我们就把这个选中

04:04.920 --> 04:05.120
好

04:05.120 --> 04:06.820
接下来我们点击按钮

04:06.820 --> 04:07.520
你看一下

04:07.520 --> 04:08.720
是不是就出现了一条请求了

04:08.720 --> 04:09.020
对吧

04:09.020 --> 04:10.420
请求耗时多少了

04:10.420 --> 04:11.320
200多毫秒

04:11.320 --> 04:11.920
对不对

04:11.920 --> 04:13.320
我们点击看一下

04:13.320 --> 04:15.920
你看服务器那边得到了一个响应结果

04:15.920 --> 04:16.520
看没

04:16.520 --> 04:17.620
是不是一个阶层格式

04:17.620 --> 04:18.020
对吧

04:18.020 --> 04:18.920
就已经完成请求了

04:18.920 --> 04:21.420
你可以代码特别特别简单

04:21.420 --> 04:24.220
就已经可以得到这个响应结果了

04:24.220 --> 04:25.220
就完了

04:25.220 --> 04:26.420
那么第二个参数是什么呢

04:26.420 --> 04:28.920
第二个参数是一个请求的配置

04:28.920 --> 04:29.720
就是说如果说

04:29.720 --> 04:31.520
你有一些东西要定制的话

04:31.520 --> 04:33.020
你可以传第二个参数

04:33.020 --> 04:33.920
如果你不传的话

04:33.920 --> 04:36.320
他很多地方就使用的是默认值

04:36.320 --> 04:37.520
那么第二个参数是啥呢

04:37.520 --> 04:38.520
是一个对象

04:38.520 --> 04:40.120
是一个配置对象

04:40.120 --> 04:41.820
就有点类似于什么呢

04:41.820 --> 04:43.120
有点类似于这个

04:43.120 --> 04:43.920
杰克磊里面的

04:43.920 --> 04:44.820
这个是那个函数

04:44.820 --> 04:45.220
对吧

04:45.220 --> 04:46.720
他里面可以写配置的

04:46.720 --> 04:47.220
第二个参数

04:47.220 --> 04:48.720
我们可以写个配置对象

04:48.720 --> 04:49.620
配置对象的话

04:49.620 --> 04:50.920
我在这里写吧

04:50.920 --> 04:52.120
config

04:52.120 --> 04:53.120
一个配置对象

04:53.120 --> 04:55.520
咱们把这个配置对象的放到这

04:55.520 --> 04:56.720
放到这

04:56.720 --> 04:57.620
配置对象

04:57.620 --> 04:59.420
好配置对象里面有哪些配置呢

04:59.420 --> 05:00.620
咱们简单看一下

05:00.620 --> 05:01.520
其实大部分是

05:01.520 --> 05:03.320
我们平时用的其实也不多

05:03.320 --> 05:04.420
就那么几个

05:04.420 --> 05:05.920
第一个是 method

05:05.920 --> 05:06.920
表示一个字幕算

05:06.920 --> 05:08.020
它是一个请求方法

05:08.020 --> 05:09.120
默认值为 get

05:09.120 --> 05:10.320
如果说你要发送一个

05:10.320 --> 05:11.520
poster请求的话

05:11.520 --> 05:12.920
那么你是不是要得改一下

05:12.920 --> 05:14.120
改一下 method

05:14.120 --> 05:14.720
为什么呢

05:14.720 --> 05:15.520
we post

05:15.520 --> 05:16.120
对吧

05:16.120 --> 05:17.520
是不是这样子

05:17.520 --> 05:18.420
就这么简单

05:18.520 --> 05:19.820
就是 method

05:19.820 --> 05:20.420
当然了

05:20.420 --> 05:21.520
我们现在这个接口

05:21.520 --> 05:23.020
他不支持post

05:23.020 --> 05:24.020
不支持poster请求

05:24.020 --> 05:24.420
你看一下

05:24.420 --> 05:25.620
我们现在在去请求的话

05:25.620 --> 05:26.620
他就是404

05:26.620 --> 05:27.820
你看看

05:27.820 --> 05:29.020
这里

05:29.020 --> 05:30.620
你看得到的 general

05:30.620 --> 05:34.820
响应的结果 response

05:34.820 --> 05:35.520
诶

05:35.520 --> 05:36.520
404

05:36.520 --> 05:37.720
响应的消息头

05:37.720 --> 05:38.820
你看 404

05:38.820 --> 05:39.420
那是棒的

05:39.420 --> 05:39.920
对吧

05:39.920 --> 05:40.620
哎

05:40.620 --> 05:41.920
就我们不支持post

05:41.920 --> 05:43.320
不支持poster目前

05:43.320 --> 05:43.720
但是呢

05:43.720 --> 05:44.720
这里是可以配置的

05:44.720 --> 05:46.420
就告诉你这一点

05:46.420 --> 05:46.620
好

05:46.620 --> 05:48.320
第二个呢是 headers

05:48.320 --> 05:49.420
就是说我们呢

05:49.420 --> 05:50.820
也可以配置请求头

05:50.820 --> 05:51.620
就是有的时候呢

05:51.620 --> 05:53.120
我们特别是在做一些

05:53.120 --> 05:54.320
身份验证的时候呢

05:54.320 --> 05:56.220
我们需要在请求头里边呢

05:56.220 --> 05:57.620
去配置一些东西

05:57.620 --> 05:58.920
那么这个请求头怎么配置呢

05:58.920 --> 06:01.020
你可以直接把它配置为一个对象

06:01.020 --> 06:02.420
可以直接把它配置为对象

06:02.420 --> 06:04.920
请求头里边是有很多的建值队啊

06:04.920 --> 06:05.220
对吧

06:05.220 --> 06:06.420
有很多的建值队

06:06.420 --> 06:06.520
好

06:06.520 --> 06:06.820
ok

06:06.820 --> 06:08.220
你就在这里写

06:08.220 --> 06:09.620
比方说我们最常见的一个配置

06:09.620 --> 06:10.720
就是 content

06:10.720 --> 06:11.620
什么

06:11.620 --> 06:12.620
type

06:12.620 --> 06:13.420
啊

06:13.420 --> 06:15.320
就是我给你像比方说

06:15.420 --> 06:16.920
通常在poster请求里边

06:16.920 --> 06:18.320
我们是不是要配置这个东西

06:18.320 --> 06:21.320
就是我给你发送的请求消息体地边

06:21.320 --> 06:22.320
消息体地边

06:22.320 --> 06:23.720
到底有哪些数据啊

06:23.720 --> 06:24.720
我要发送给你的数据

06:24.720 --> 06:26.320
比如像账号啊密码呀

06:26.320 --> 06:26.920
对吧

06:26.920 --> 06:28.120
那么他的格数是什么

06:28.120 --> 06:29.420
是节省格式啊

06:29.420 --> 06:30.920
还是一个普通的什么

06:30.920 --> 06:32.520
就是forum表达格式啊

06:32.520 --> 06:33.020
等等等等

06:33.020 --> 06:35.420
比方说我们配置一个application啊

06:35.420 --> 06:36.120
节省

06:36.120 --> 06:36.720
那么这样子呢

06:36.720 --> 06:37.820
你看一下

06:37.820 --> 06:38.520
保存啊

06:38.520 --> 06:39.520
我们来点击一下

06:39.520 --> 06:40.920
你看一下这个

06:40.920 --> 06:41.920
虽然是司令室啊

06:41.920 --> 06:42.220
但是呢

06:42.220 --> 06:43.220
我们可以看到

06:43.220 --> 06:44.520
request header里面

06:44.520 --> 06:46.120
是不是多了一个content type

06:46.120 --> 06:46.520
对吧

06:46.520 --> 06:48.420
application节省啊

06:48.420 --> 06:49.320
多了这么一个东西的

06:49.320 --> 06:49.520
对吧

06:49.520 --> 06:51.720
就往请求头里边配置东西

06:51.720 --> 06:53.520
当然你可以配置一些自定义的东西啊

06:53.520 --> 06:55.220
比方说你因为随便写一个啊

06:55.220 --> 06:56.620
随便写一个a等于1

06:56.620 --> 06:57.820
那随便写一个啊

06:57.820 --> 06:58.620
保存啊

06:58.620 --> 07:01.420
那么再看一下点击啊

07:01.420 --> 07:02.720
为什么这里出现两只请求呢

07:02.720 --> 07:03.820
是因为跨域啊

07:03.820 --> 07:05.220
跨域我们是不是要预检

07:05.220 --> 07:05.520
对吧

07:05.520 --> 07:07.720
要预检啊

07:07.720 --> 07:08.020
这里呢

07:08.020 --> 07:08.620
我们看一下

07:08.620 --> 07:10.720
这个就是多了一个a等于1

07:10.720 --> 07:10.920
对吧

07:10.920 --> 07:11.920
就配置请求头

07:11.920 --> 07:13.420
特别特别简单

07:13.420 --> 07:14.120
看没

07:14.120 --> 07:15.120
这配置请求头

07:15.120 --> 07:16.720
当然我们现在是get请求啊

07:16.720 --> 07:17.920
get请求

07:17.920 --> 07:18.520
好的

07:18.520 --> 07:19.120
get请求

07:19.120 --> 07:20.120
你看一下

07:20.120 --> 07:22.220
是不是多了一个这个数据了

07:22.220 --> 07:23.720
就特别简单啊

07:23.720 --> 07:24.620
咱们继续看啊

07:24.620 --> 07:25.820
还有一个body

07:25.820 --> 07:27.120
就是请求题

07:27.120 --> 07:28.120
那么请求题的话

07:28.120 --> 07:29.620
我肯定是pose请求对吧

07:29.620 --> 07:31.320
肯定是要传输一些信息的

07:31.320 --> 07:32.720
放到请求题里边

07:32.720 --> 07:34.120
如果你是get请求的话

07:34.120 --> 07:35.620
那你要传输信息

07:35.620 --> 07:36.420
应该放到

07:36.420 --> 07:38.320
是不是放到地址南参数里边

07:38.320 --> 07:39.220
你是不是要放到这

07:39.220 --> 07:39.520
对吧

07:39.520 --> 07:40.520
放到这

07:40.520 --> 07:41.820
你的信息是不是放到这

07:41.820 --> 07:42.620
比方说我们这里呢

07:42.620 --> 07:44.720
其实有一个可以传参数啊

07:44.720 --> 07:45.820
如果说你get的话

07:45.820 --> 07:46.820
可以传参数

07:46.820 --> 07:48.120
我们叫这个参数叫啥呢

07:48.120 --> 07:48.820
我都忘了

07:48.820 --> 07:50.120
这个服务器是我自己写的

07:50.120 --> 07:51.920
params id 好像是

07:51.920 --> 07:53.820
我看一下这返回了结果

07:53.820 --> 07:55.420
params id 我们传这个吧

07:55.420 --> 07:57.620
看一下浙江省有哪些城市

07:57.620 --> 07:58.420
传这个

07:58.420 --> 07:59.320
咱们再看一下

07:59.320 --> 08:00.820
点击

08:00.820 --> 08:01.820
params id 看

08:01.820 --> 08:03.820
是不是通过地址南参数传过去的

08:03.820 --> 08:06.220
你看浙江省就是这城市就出来了

08:06.220 --> 08:08.520
浙江省的城市

08:08.520 --> 08:10.320
就说我们如果是get请求的话

08:10.320 --> 08:11.920
我们往往的数据呢

08:11.920 --> 08:13.220
是放到地址南里边了

08:13.220 --> 08:15.120
但是如果你是post的请求的话

08:15.120 --> 08:17.120
你的数据是不是放到消息题里边

08:17.120 --> 08:17.520
对吧

08:17.520 --> 08:19.020
要放到请求题里边

08:19.020 --> 08:20.220
要放到请求题里边的话

08:20.220 --> 08:21.520
你要配置body

08:21.520 --> 08:22.320
配置body

08:22.320 --> 08:23.220
比方说你在body里边

08:23.220 --> 08:24.320
你要进行传输啊

08:24.320 --> 08:26.620
比方说我们用post的请求

08:26.620 --> 08:27.920
你在body里边

08:27.920 --> 08:30.020
在body里边

08:30.020 --> 08:31.320
body里边要进行传输

08:31.320 --> 08:32.620
那么这个传输的格式

08:32.620 --> 08:34.220
是不是要用要是节省格式

08:34.220 --> 08:34.620
为什么

08:34.620 --> 08:36.120
因为你这里说了的呀

08:36.120 --> 08:37.420
你这里content的type

08:37.420 --> 08:39.420
你说的是我给你的消息格式

08:39.420 --> 08:41.120
那是application节省

08:41.120 --> 08:42.320
那你骗他干嘛呢

08:42.320 --> 08:44.220
那服务器看到你是这个格式

08:44.220 --> 08:45.420
他可能按照你节省节

08:45.420 --> 08:47.120
结果你给我传一个这个东西

08:47.120 --> 08:48.120
那就不是节省格式的

08:48.120 --> 08:49.320
服务器那边就解析不了

08:49.320 --> 08:50.320
明白这意思吗

08:50.320 --> 08:51.820
不是说他一定抱错

08:51.820 --> 08:52.420
这是一个

08:52.420 --> 08:54.320
这是属于agcdp协议的范畴

08:54.320 --> 08:56.820
就是双方要约定好啊

08:56.820 --> 08:58.520
所以说你这里写的是节省格式的话

08:58.520 --> 08:59.220
那么我们这里呢

08:59.220 --> 09:00.720
一般也要用节省格式

09:00.720 --> 09:02.220
比方说我们写个节省格式啊

09:02.220 --> 09:03.820
当然你可以用节省里边的api

09:03.820 --> 09:04.320
什么

09:04.320 --> 09:05.620
jason stringify

09:05.620 --> 09:06.520
也是stringify

09:06.520 --> 09:07.020
对吧

09:07.020 --> 09:07.820
或者是post

09:07.820 --> 09:08.120
对吧

09:08.120 --> 09:09.520
来进行转化

09:09.620 --> 09:10.320
我们这里呢

09:10.320 --> 09:11.120
哎

09:11.120 --> 09:12.120
这样子写吧

09:12.120 --> 09:14.720
就是个节省格式的节省格式啊

09:15.920 --> 09:18.520
比方说a等于1啊

09:18.520 --> 09:20.120
比方说吧啊保存

09:20.120 --> 09:21.020
你看一下

09:21.020 --> 09:22.420
点击请求啊

09:22.420 --> 09:23.420
post请求

09:23.420 --> 09:24.720
那么你看一下消息体里边

09:24.720 --> 09:26.320
是不是有一个啊

09:26.320 --> 09:27.520
节省格式的数据了

09:27.520 --> 09:28.920
对吧啊

09:29.720 --> 09:30.720
就这么简单啊

09:30.720 --> 09:31.320
body

09:31.320 --> 09:33.220
这是body里面传输的消息体

09:33.820 --> 09:34.020
好

09:34.020 --> 09:35.020
剩下的这些属性呢

09:35.020 --> 09:36.620
我们平时可能用的不是很多啊

09:36.620 --> 09:37.920
我简单介绍一下啊

09:38.020 --> 09:38.920
这个那么默的

09:38.920 --> 09:40.220
就请求模式

09:40.220 --> 09:41.120
这个请求模式呢

09:41.120 --> 09:42.720
主要是解决跨域问题的

09:42.720 --> 09:43.920
其实他的跨域问题的话

09:43.920 --> 09:45.420
他默认就已经有解决了

09:45.420 --> 09:46.420
因为他的默认值呢

09:46.420 --> 09:47.220
就是CR

09:47.220 --> 09:48.620
CRS啊

09:48.620 --> 09:49.820
他的默认值

09:49.820 --> 09:50.620
那么

09:50.620 --> 09:52.920
把这个模式配置为CRS

09:52.920 --> 09:53.820
就是跨域的对吧

09:53.820 --> 09:54.520
你们学训

09:54.520 --> 09:55.580
所以说我们这个这么

09:55.580 --> 09:56.720
这里一个章节啊

09:56.720 --> 09:58.820
需要一个前置知识就是网络

09:58.820 --> 10:00.020
网络请求啊

10:00.020 --> 10:02.020
就是网络编程的前置知识

10:02.020 --> 10:02.460
啊

10:02.460 --> 10:04.420
你学习了attp协议的之后呢

10:04.420 --> 10:05.920
你知道这个怎么解决跨域

10:06.020 --> 10:08.920
CRS呢是解决跨域的一种方式

10:08.920 --> 10:11.420
他就要求你在请求的时候呢

10:11.420 --> 10:13.420
你的请求头里边你在加入什么

10:13.420 --> 10:14.320
Origy

10:14.320 --> 10:15.620
已经啊

10:15.620 --> 10:17.220
他还会自动给你加referer

10:17.220 --> 10:19.020
就referer倒是可以不用加

10:19.020 --> 10:21.020
你但是一定要加Origy

10:21.020 --> 10:21.920
Origy

10:21.920 --> 10:22.920
就是你的

10:22.920 --> 10:24.420
就是我告诉服务器

10:24.420 --> 10:25.220
我是谁

10:25.220 --> 10:27.020
我是哪个地址在请求服务器

10:27.020 --> 10:27.820
服务器有检查

10:27.820 --> 10:28.020
哎

10:28.020 --> 10:28.920
你这个地址呢

10:28.920 --> 10:29.720
有没有

10:29.720 --> 10:30.920
我能不能给你响应呢

10:30.920 --> 10:32.320
你不是我有同一个域名吗

10:32.320 --> 10:32.720
对吧

10:32.720 --> 10:34.120
你跟我的域名是不一样的

10:34.120 --> 10:35.120
比方说我这里

10:35.120 --> 10:36.320
我请求的是这个域名

10:36.320 --> 10:37.420
那我本地的域名呢

10:37.420 --> 10:39.420
本地的域名是127.0.0.1

10:39.420 --> 10:40.420
肯定是不一样的

10:40.420 --> 10:42.120
端口号也不一样啊

10:42.120 --> 10:43.320
主机名也不一样

10:43.320 --> 10:44.520
ip地址也不一样

10:44.520 --> 10:45.220
对吧

10:45.220 --> 10:46.720
所以说那服务器再检查一下

10:46.720 --> 10:47.320
我

10:47.320 --> 10:48.420
你是这个东西

10:48.420 --> 10:49.720
那我给不给你数据呢

10:49.720 --> 10:50.520
对不对啊

10:50.520 --> 10:52.020
所以说他要求你呢

10:52.020 --> 10:53.320
但是有的服务器他不要求

10:53.320 --> 10:54.220
有的服务器呢

10:54.220 --> 10:55.020
无所谓

10:55.020 --> 10:55.820
你只要请求过来

10:55.820 --> 10:56.520
我管你是谁

10:56.520 --> 10:58.320
我就是都给你数据啊

10:58.320 --> 11:00.720
这个东西要看双方约定的啊

11:00.720 --> 11:02.720
如果说一个比较正规的服务器的话

11:02.720 --> 11:04.120
他一般会检查你

11:04.120 --> 11:05.320
就是你在请求头里面

11:05.320 --> 11:06.620
有没有这个orange

11:06.620 --> 11:07.920
就在跨域请求的时候

11:07.920 --> 11:09.020
有没有这个东西

11:09.020 --> 11:10.220
那如果说你

11:10.220 --> 11:11.620
呃你

11:11.620 --> 11:12.520
没有配置他的话

11:12.520 --> 11:14.020
他拨人就是c o r s

11:14.020 --> 11:15.220
就是允许跨域的

11:15.220 --> 11:16.320
那么这样子一来的话

11:16.320 --> 11:16.920
你看一下

11:16.920 --> 11:18.720
他在请求头里边

11:18.720 --> 11:20.620
你看是不是可以加了一个orange

11:20.620 --> 11:22.020
对吧orange

11:22.020 --> 11:23.520
表示我是怎么什么地址

11:23.520 --> 11:24.220
我是什么地址

11:24.220 --> 11:25.920
给你向服务器发出什么请求

11:25.920 --> 11:26.320
服务器呢

11:26.320 --> 11:27.320
他就会收到这个

11:27.320 --> 11:28.820
收到这个请求头里边的信息

11:28.820 --> 11:29.620
他去检查

11:29.620 --> 11:30.820
哎你这个地址

11:30.820 --> 11:31.820
我允不允许呢

11:31.820 --> 11:32.820
我能不能给你数据

11:32.820 --> 11:34.220
他就会进行检查

11:34.220 --> 11:36.120
那就是服务器的事了

11:36.120 --> 11:36.620
啊

11:36.620 --> 11:37.820
那你可以进行其他配置

11:37.820 --> 11:39.120
不要说你配置为他

11:39.120 --> 11:40.220
那么他的请求头里面

11:40.220 --> 11:41.220
就没有这个东西了

11:41.220 --> 11:41.920
没有这个东西了

11:41.920 --> 11:42.720
他跨域的时候呢

11:42.720 --> 11:44.120
可能会出问题

11:44.120 --> 11:45.420
也有可能不出问题

11:45.420 --> 11:46.420
比方说我这个服务器

11:46.420 --> 11:47.620
我就不管那么多

11:47.620 --> 11:47.820
哦

11:47.820 --> 11:48.220
不

11:48.220 --> 11:49.520
我这个服务器还是管的啊

11:49.520 --> 11:51.120
还是你这必须要给我加这个

11:52.120 --> 11:53.020
有的服务器

11:53.020 --> 11:54.220
他就没有管那么多啊

11:54.220 --> 11:55.220
你没有给我

11:55.220 --> 11:55.820
就没有给我

11:55.820 --> 11:57.820
反正无论是谁我都给你数据啊

11:57.820 --> 11:59.720
就是可能会出问题

11:59.820 --> 12:01.420
这要看服务器怎么怎么处理

12:01.920 --> 12:02.120
啊

12:02.120 --> 12:02.820
第三个曲子呢

12:02.820 --> 12:03.820
是same orange

12:04.020 --> 12:04.920
啊表示什么呢

12:04.920 --> 12:06.120
就是我这个请求呢

12:06.120 --> 12:08.820
必须要是在同一个预想发生的

12:08.820 --> 12:10.320
就是我的页面地址呢

12:10.320 --> 12:11.120
是这个地址

12:11.120 --> 12:11.420
对吧

12:11.420 --> 12:12.420
是这个主机民

12:12.720 --> 12:14.020
那么这样子一来了

12:14.520 --> 12:15.520
我发送请求的话

12:15.520 --> 12:17.020
也必须要发送给这个主机民

12:17.020 --> 12:18.420
如果发送给别的主机民的话

12:18.420 --> 12:19.920
就直接爆错啊

12:19.920 --> 12:20.520
这个东西呢

12:20.520 --> 12:22.120
我们一般不会去改他啊

12:22.620 --> 12:23.220
下边这个呢

12:23.220 --> 12:24.620
是如何携带评据

12:24.620 --> 12:26.520
就是要不要发送cookie

12:26.520 --> 12:26.720
啊

12:26.720 --> 12:27.820
要不要发送cookie

12:28.120 --> 12:29.220
这个all makes呢

12:29.220 --> 12:31.120
表示我发送请求呢

12:31.120 --> 12:32.120
不携带cookie

12:32.120 --> 12:32.620
啊

12:33.220 --> 12:33.620
这个呢

12:33.620 --> 12:34.420
下面这个曲子呢

12:34.420 --> 12:35.320
这是默认字啊

12:35.320 --> 12:37.120
他一般他就不发送cookie的

12:37.220 --> 12:38.620
如果说你要发送cookie的话

12:38.620 --> 12:39.920
你要在下面两个曲子里面

12:39.920 --> 12:41.320
要重新写一下啊

12:41.320 --> 12:42.720
一个是same orange

12:42.820 --> 12:44.620
就是请求同源地址

12:44.620 --> 12:45.720
什么叫同源地址

12:45.720 --> 12:47.220
就是你跟你当前页面

12:47.520 --> 12:48.620
请求的地址是一样的

12:48.620 --> 12:49.720
但是我们这里肯定不一样

12:49.720 --> 12:50.120
对吧

12:50.320 --> 12:51.320
如果说你请求的地址

12:51.320 --> 12:52.620
跟这个地址是一样的

12:52.620 --> 12:53.920
那么我就发送cookie

12:54.220 --> 12:55.920
其他的情况我不发送啊

12:55.920 --> 12:57.020
这为了保持安全

12:57.320 --> 12:58.120
第三个情况呢

12:58.120 --> 13:00.020
就是任何地址都写在cookie

13:00.120 --> 13:01.520
如果说你要跨域请求的话

13:01.520 --> 13:02.720
那你就选第三个

13:02.820 --> 13:04.220
就是cookie的情况

13:04.220 --> 13:04.720
不过呢

13:04.720 --> 13:06.620
为什么说这个东西了解一下就行了呢

13:07.420 --> 13:10.320
因为在我们目前前端的大环境下

13:10.320 --> 13:12.020
cookie用的越来越少了

13:12.920 --> 13:15.520
我觉得后边cookie可能都要消失啊

13:16.220 --> 13:17.420
现在cookie的存在的

13:17.520 --> 13:20.020
基本上唯一的原因是为了解决监农性

13:20.020 --> 13:20.920
一些旧系统

13:20.920 --> 13:21.920
他还需要cookie

13:21.920 --> 13:23.220
因为他以前用的是cookie

13:23.320 --> 13:23.720
对吧

13:24.620 --> 13:25.120
现在呢

13:25.120 --> 13:27.420
以后学习了更多的知识之后

13:27.420 --> 13:29.320
你会发现根本就用不到什么Cookie

13:30.520 --> 13:30.720
好

13:30.720 --> 13:31.120
下面呢

13:31.120 --> 13:33.420
这个就是缓存模式

13:33.520 --> 13:35.120
就是我们的有些流量期呢

13:35.120 --> 13:36.920
他会有一种缓存模式

13:36.920 --> 13:38.820
就是你请求了一些数据之后呢

13:38.820 --> 13:39.620
你再请求了

13:39.620 --> 13:41.120
我可能会使用缓存

13:41.120 --> 13:42.520
请求同一个地址的时候

13:42.720 --> 13:43.720
那么缓存模式呢

13:43.720 --> 13:44.920
这里边这里边有很多

13:44.920 --> 13:45.920
他默认就是

13:46.320 --> 13:46.820
检查一下

13:46.820 --> 13:47.720
目前有没有缓存

13:47.720 --> 13:48.320
有缓存的话

13:48.320 --> 13:48.920
我就用缓存

13:48.920 --> 13:49.420
没有缓存的话

13:49.420 --> 13:50.920
就重新请求更新缓存

13:51.720 --> 13:52.720
那么这个no store

13:52.720 --> 13:53.620
简单介绍一下

13:53.620 --> 13:54.920
这个东西也不去演示的

13:55.120 --> 13:57.120
no store表示什么意思呢

13:57.120 --> 13:58.120
我就忽略缓存

13:58.120 --> 13:59.320
管理缓存有没有

13:59.320 --> 14:00.420
没有缓存的话

14:00.420 --> 14:01.420
没有缓存的话

14:02.920 --> 14:03.620
有缓存的话

14:03.620 --> 14:04.920
我也要重新请求

14:04.920 --> 14:05.920
也要重新请求

14:06.720 --> 14:07.420
并且呢

14:07.420 --> 14:08.520
他重新请求之后

14:08.520 --> 14:09.520
拿到新的数据过后

14:09.520 --> 14:10.920
他不会更新缓存

14:10.920 --> 14:11.720
就是不

14:11.720 --> 14:13.120
这个缓存拿到新的数据

14:13.120 --> 14:14.420
这个缓存还是不会更新

14:15.120 --> 14:16.920
那么下面的no cache是什么意思呢

14:16.920 --> 14:17.420
就是说

14:17.420 --> 14:19.120
我不管你是什么

14:19.120 --> 14:19.820
有没有缓存

14:19.820 --> 14:21.120
我都会重新请求

14:21.120 --> 14:22.320
但是那重新请求之后

14:22.320 --> 14:23.620
我会更新缓存

14:23.620 --> 14:24.920
就是一些细微的差距

14:25.620 --> 14:26.820
reload表示的是

14:27.920 --> 14:28.720
之前呢

14:30.420 --> 14:31.120
之前

14:31.120 --> 14:31.720
这个

14:32.720 --> 14:33.120
对

14:33.120 --> 14:35.120
reload跟那个no cache差不多

14:35.120 --> 14:35.920
差不多

14:35.920 --> 14:37.320
只不过no cache

14:37.320 --> 14:39.420
它会发送一个就是条件查询

14:39.420 --> 14:40.720
就会给你加一个随階数

14:41.920 --> 14:43.120
这个东西怎么说呢

14:43.120 --> 14:44.520
就这两个都差不多

14:44.520 --> 14:46.120
因为我们这里不用去申究

14:46.120 --> 14:47.420
这个平时都不怎么用的

14:47.420 --> 14:48.120
不用去申究

14:48.120 --> 14:48.920
就了解一下

14:48.920 --> 14:49.920
reload跟no cache

14:49.920 --> 14:51.020
因为这个解释起来

14:51.020 --> 14:53.120
要讲一下讲半天

14:53.120 --> 14:55.220
这个reload跟那个no cache都差不多

14:55.220 --> 14:56.120
他们都表示的

14:56.120 --> 14:56.520
就是说

14:57.320 --> 14:58.120
之前呢

14:58.720 --> 14:59.820
缓存的我不管

14:59.820 --> 15:01.320
我重新去发送请求

15:01.320 --> 15:01.720
然后呢

15:01.720 --> 15:03.820
拿到数据过后来要更新缓存

15:03.820 --> 15:06.020
就有一点点细微的差别

15:06.520 --> 15:07.520
no cache呢

15:07.520 --> 15:08.220
no cache就是说

15:08.220 --> 15:10.620
之前如果有缓存的话

15:11.320 --> 15:12.920
如果有缓存的话

15:12.920 --> 15:15.020
那么我才会去更新缓存

15:15.020 --> 15:16.920
如果说之前没有缓存的话

15:16.920 --> 15:19.620
我是不会更新缓存的

15:19.620 --> 15:21.220
那么这个reload呢

15:21.220 --> 15:22.020
reload呢

15:22.020 --> 15:23.220
它是不管之前有没有缓存

15:23.220 --> 15:24.120
它都会更新

15:25.020 --> 15:26.520
就有一些细微的差别

15:26.520 --> 15:28.320
其实还有一些细微的差别

15:28.320 --> 15:28.520
好

15:28.520 --> 15:30.020
下面这个force cache

15:30.020 --> 15:31.220
force cache

15:31.220 --> 15:32.320
这个表示什么意思呢

15:32.320 --> 15:33.920
这个表示的就是

15:33.920 --> 15:34.920
之前

15:35.920 --> 15:37.720
不管有没有缓存

15:39.220 --> 15:40.420
force cache表示

15:41.120 --> 15:42.820
它不顾一切的依赖缓存

15:42.820 --> 15:43.920
就是之前

15:43.920 --> 15:46.120
不管现在缓存是不是过期了

15:46.120 --> 15:47.420
我都要去

15:47.420 --> 15:49.320
我都要去使用缓存

15:49.320 --> 15:50.420
它就这么个意思

15:50.420 --> 15:51.820
都要去使用缓存

15:51.920 --> 15:54.320
那么它如果说没有任何

15:54.320 --> 15:56.820
如果说之前的缓存都没有缓存的话

15:56.820 --> 15:59.620
我才会发送一个正常的请求

15:59.620 --> 16:01.220
那么这个only if cached

16:01.220 --> 16:02.120
什么意思呢

16:02.120 --> 16:03.120
就表示的是

16:03.120 --> 16:04.320
也跟它差不多

16:04.320 --> 16:07.020
就是说我不管缓存有没有过期

16:07.020 --> 16:08.520
我一定要用缓存

16:08.520 --> 16:10.420
一定要用缓存

16:10.420 --> 16:12.720
如果说之前没有缓存的话

16:12.720 --> 16:13.820
那么直接爆错

16:13.820 --> 16:14.420
一个是爆错

16:14.420 --> 16:16.420
一个是发送正常请求

16:16.420 --> 16:17.820
就这么一些细微的差别

16:17.820 --> 16:20.920
终点是前面这三个

16:20.920 --> 16:21.720
这是三个字

16:21.720 --> 16:22.520
这是我们终点

16:22.520 --> 16:23.520
平时我们要用的

16:23.520 --> 16:25.520
这些东西我们平时都不怎么用

16:25.520 --> 16:28.320
我们快速的把这个请求

16:28.320 --> 16:30.220
发送请求这个讲了

16:30.220 --> 16:31.420
其实就是一个地址

16:31.420 --> 16:32.120
一个配置

16:32.120 --> 16:33.420
配置里面有大多东西

16:33.420 --> 16:35.120
我们平时用的就这么一些

16:35.120 --> 16:35.920
对吧

16:35.920 --> 16:37.620
我们快速把这个东西讲了

16:37.620 --> 16:38.320
当然我们这里

16:38.320 --> 16:39.620
如果说你没有配置的话

16:39.620 --> 16:40.020
OK

16:40.020 --> 16:40.820
那么没有配置的话

16:40.820 --> 16:42.820
我们就可以不写config

16:42.820 --> 16:44.020
不写config

16:44.020 --> 16:46.560
都行

16:46.560 --> 16:48.460
这是关于这一块

16:48.460 --> 16:48.760
好

16:48.760 --> 16:50.060
现在终点来了

16:50.060 --> 16:51.560
终点是它的法人回指

16:51.560 --> 16:52.860
它怎么给你给的东西

16:52.860 --> 16:54.460
服务器会返回

16:54.460 --> 16:56.560
以前是怎么给的

16:56.560 --> 16:57.660
在结块里面

16:57.660 --> 16:59.760
RGX里面是不是要给回调含述

16:59.760 --> 17:00.660
对吧

17:00.660 --> 17:02.060
是不是要写个回调含述

17:02.060 --> 17:03.260
在回调含述里面处理

17:03.260 --> 17:03.460
对吧

17:03.460 --> 17:04.660
这是以前的做法

17:04.660 --> 17:06.860
然后在xhr里面

17:06.860 --> 17:08.960
是不是要配置一个事件

17:08.960 --> 17:09.760
对不对

17:09.760 --> 17:11.960
什么radius depth change

17:11.960 --> 17:12.360
对吧

17:12.360 --> 17:13.760
这么一个事件

17:13.760 --> 17:15.060
那么在废棋APN里面

17:15.060 --> 17:15.860
它怎么做的呢

17:15.860 --> 17:16.560
我们之前说过

17:16.560 --> 17:20.160
废棋APN它契合了promise API

17:20.160 --> 17:21.660
所以说废棋含述了

17:21.660 --> 17:24.260
它直接给你返回的就是一个promise对象

17:24.260 --> 17:26.360
返回的就是一个promise对象

17:26.360 --> 17:27.260
所以说我们这里

17:27.260 --> 17:28.760
如果说你要得到一个东西的话

17:28.760 --> 17:29.360
我们来看一下

17:29.360 --> 17:31.660
这个东西就是一个promise对象

17:31.660 --> 17:32.560
咱们来看一下

17:32.560 --> 17:33.360
点击

17:33.360 --> 17:34.260
你看控制台里面输出了

17:34.260 --> 17:35.360
是不是一个promise

17:35.360 --> 17:36.060
对吧

17:36.060 --> 17:37.060
promise

17:37.060 --> 17:38.860
就是得到一个promise对象

17:38.860 --> 17:39.960
那么这个promise对象

17:39.960 --> 17:40.960
它肯定要进

17:40.960 --> 17:41.960
它一开始是挂起的

17:41.960 --> 17:42.260
对吧

17:42.260 --> 17:43.660
要等待服务器的结果

17:43.660 --> 17:44.860
它没有结果

17:44.860 --> 17:46.160
等待到有了结果之后

17:46.160 --> 17:47.860
才变成以绝状态

17:47.860 --> 17:49.460
跟我们之前自己封装的这个函数

17:49.460 --> 17:50.860
是不是差不多

17:50.860 --> 17:52.060
那么

17:52.060 --> 17:54.260
它到底怎什么时候进入以绝

17:54.260 --> 17:56.160
什么时候进入那个

17:56.160 --> 17:57.960
什么时候进入resolve的状态

17:57.960 --> 17:59.860
什么时候进入rejective的状态呢

17:59.860 --> 18:01.560
它是有两种情况

18:01.560 --> 18:02.660
第一个就是说

18:02.660 --> 18:03.660
当服务器的

18:03.660 --> 18:05.160
只要你服务器给了我结果

18:05.160 --> 18:07.060
甭管一个结果是啥

18:07.060 --> 18:09.660
我一定进入resolve的状态

18:09.660 --> 18:11.760
而且状态数据

18:11.760 --> 18:13.160
它会把状态数据给你

18:13.160 --> 18:15.060
这个状态数据是一个respawns对象

18:15.060 --> 18:15.860
这个respawns对象

18:15.860 --> 18:17.760
我们以后详细讲

18:18.260 --> 18:19.960
也说只要服务器给了我结果

18:19.960 --> 18:22.660
那么这个promise一定是resolved

18:22.660 --> 18:24.260
也就说什么意思呢

18:24.260 --> 18:26.060
也就说的意思就是说

18:26.060 --> 18:28.060
我这个feature它是个promise

18:28.060 --> 18:29.760
那么我们是不是可以使用Zin

18:29.760 --> 18:30.760
对吧

18:30.760 --> 18:32.460
Zin后边得到的数据是什么

18:32.460 --> 18:34.860
就是服务器的响应对象

18:34.860 --> 18:37.760
这个就是服务器的响应对象

18:37.760 --> 18:39.260
只要服务器有响应

18:39.260 --> 18:40.860
甭管那个响应是404

18:40.860 --> 18:42.660
找不到页面还是500

18:42.660 --> 18:43.660
服务器内部错误

18:43.660 --> 18:44.760
无所谓

18:44.760 --> 18:46.560
只要你服务器给了我想应

18:46.560 --> 18:49.260
那么我就一定是resolved的状态

18:49.260 --> 18:51.560
就一定会进入任来执行

18:51.560 --> 18:52.860
明白的意思吗

18:52.860 --> 18:54.860
什么情况下是rejected呢

18:54.860 --> 18:56.560
就是网络错误

18:56.560 --> 18:59.860
如果说网络发生错误的情况下

18:59.860 --> 19:00.660
还有一些其他的

19:00.660 --> 19:02.760
总之跟服务器之间倒不了服务器

19:02.760 --> 19:04.960
就是我一个情求根本就倒不了服务器

19:04.960 --> 19:06.160
那么这种情况下

19:06.160 --> 19:07.260
或者是一些配置错误

19:07.260 --> 19:08.860
你配置的时候出了问题

19:08.860 --> 19:10.060
你不是可以写配置吗

19:10.060 --> 19:11.560
你配置里面有问题

19:11.560 --> 19:12.660
那么这个时候

19:12.660 --> 19:15.160
它会进入rejected的状态

19:15.160 --> 19:16.160
那么我们比较说

19:16.160 --> 19:18.160
我们这里可以写一个

19:18.160 --> 19:18.960
开启

19:18.960 --> 19:20.460
我们电视编程

19:20.460 --> 19:21.860
它的串联

19:21.860 --> 19:23.260
前边没有处理的错误了

19:23.260 --> 19:25.360
它会一直往后边抛

19:25.360 --> 19:28.660
我们把error输出

19:28.660 --> 19:30.860
咱们来看一下吧

19:30.860 --> 19:32.160
保存看一下

19:32.160 --> 19:33.360
我们看一下正常状态

19:33.360 --> 19:34.260
点击

19:34.260 --> 19:35.460
稍微等了一下

19:35.460 --> 19:37.660
你看是不是就Response的对象出来了

19:37.660 --> 19:40.060
Response对象我们一会讲

19:40.060 --> 19:42.660
就表示服务器已经完成了想应了

19:42.660 --> 19:43.960
其实一看你就知道这里面

19:43.960 --> 19:44.960
什么意思了

19:44.960 --> 19:46.960
Status什么意思

19:46.960 --> 19:47.660
想应嘛

19:47.660 --> 19:47.960
对不对

19:47.960 --> 19:48.860
想应消息嘛

19:48.860 --> 19:49.960
Status text的

19:49.960 --> 19:50.660
想应消息嘛

19:50.660 --> 19:52.660
就是文本内容

19:52.660 --> 19:53.260
对不对

19:53.260 --> 19:54.460
就是特别简单

19:54.460 --> 19:56.060
就是个Response对象

19:56.060 --> 19:58.160
那么什么时候变成rejected的状态了

19:58.160 --> 20:00.060
就什么时候进入开启来执行了

20:00.060 --> 20:01.560
比方说我们把这个网停了

20:01.560 --> 20:02.860
我把这个网停了

20:02.860 --> 20:03.460
没网了

20:03.460 --> 20:05.160
现在再点击

20:05.160 --> 20:05.960
你看

20:05.960 --> 20:07.060
是不是输出了这么一句话

20:07.060 --> 20:08.060
这句话哪里输出的

20:08.060 --> 20:10.060
就这里输出的

20:10.060 --> 20:12.060
就进入了开启来执行

20:12.060 --> 20:13.660
就这么简单

20:13.660 --> 20:14.460
其他的情况

20:14.560 --> 20:15.060
我再说一次

20:15.060 --> 20:16.160
这一点的

20:16.160 --> 20:17.460
大家可能容易忽略

20:17.460 --> 20:19.260
就是好像说服务器那边

20:19.260 --> 20:21.760
只要给我的是200

20:21.760 --> 20:22.860
想应消息嘛是200

20:22.860 --> 20:25.260
好像就是我是就是resolved的

20:25.260 --> 20:26.260
实际上不是的

20:26.260 --> 20:28.060
服务器那边给我任何消息

20:28.060 --> 20:29.060
哪怕是500

20:29.060 --> 20:29.960
服务器内部错误

20:29.960 --> 20:31.360
还有是403

20:31.360 --> 20:34.060
没有权限等等

20:34.060 --> 20:34.660
无所谓

20:34.660 --> 20:35.760
你只要给我东西

20:35.760 --> 20:37.160
服务器只要有了想应

20:37.160 --> 20:38.360
我就是一定是

20:38.360 --> 20:39.460
已决状态

20:39.460 --> 20:41.560
就是resolved的状态

20:41.560 --> 20:43.260
我们这个其实也比较符合

20:43.460 --> 20:44.660
Promise的理念

20:44.660 --> 20:46.160
Promise理念就是什么呢

20:46.160 --> 20:47.560
一只要有结果就行

20:47.560 --> 20:48.260
有结果

20:48.260 --> 20:50.060
我就是resolved的状态

20:50.060 --> 20:51.160
Rejective的状态是什么意思

20:51.160 --> 20:51.760
就错了

20:51.760 --> 20:52.860
我都不知道该怎么办了

20:52.860 --> 20:53.560
你说我们不好

20:53.560 --> 20:54.260
该怎么办了

20:54.260 --> 20:56.060
它不是一个正常的逻辑了

20:56.060 --> 20:57.360
那么这个时候

20:57.360 --> 20:59.260
就进入Rejective的状态

20:59.260 --> 21:00.460
对吧

21:00.460 --> 21:01.160
当然这个代码

21:01.160 --> 21:02.560
我们可以完全可以用

21:02.560 --> 21:04.160
利用我们上一张学习的什么

21:04.160 --> 21:05.960
Await and sync的知识

21:05.960 --> 21:07.760
更加简化的来输解

21:07.760 --> 21:09.860
不要让我们把这个函数变成sync

21:09.860 --> 21:10.560
表示这个函数

21:10.560 --> 21:12.260
反回的一定是Promise对象

21:12.260 --> 21:13.260
因此在这个函数里面

21:13.260 --> 21:16.760
我们是不是可以利用Await的关键字

21:16.760 --> 21:17.260
对吧

21:17.260 --> 21:19.560
是不是可以利用Await关键字

21:19.560 --> 21:20.460
等呗

21:20.460 --> 21:21.360
你给我反回的Promise

21:21.360 --> 21:22.060
我等

21:22.060 --> 21:24.160
等你Promise变成resolved的

21:24.160 --> 21:27.060
那么我们是不是可以拿到Response对象

21:27.060 --> 21:28.560
是不是可以拿到Response对象

21:28.560 --> 21:28.860
对吧

21:28.860 --> 21:29.960
你看一下

21:29.960 --> 21:32.560
点击拿到Response对象

21:32.560 --> 21:32.760
好

21:32.760 --> 21:33.960
那么我们要往停了

21:33.960 --> 21:35.360
往停了

21:35.360 --> 21:36.060
接下来

21:36.060 --> 21:37.060
我们现在

21:37.060 --> 21:39.260
如果说你要补货

21:39.260 --> 21:40.860
它的就是Rejective的状态怎么办了

21:40.860 --> 21:41.660
就用Track-Hit

21:41.760 --> 21:43.560
这样子写出来更加舒服

21:43.560 --> 21:46.060
输出Error

21:46.060 --> 21:46.460
你看

21:46.460 --> 21:47.760
变成这样子输写了

21:47.760 --> 21:48.560
是不是特别舒服

21:48.560 --> 21:49.460
现在写出来

21:49.460 --> 21:50.360
对不对

21:50.360 --> 21:50.660
好

21:50.660 --> 21:52.060
那么我们来看一下

21:52.060 --> 21:52.660
点击

21:52.660 --> 21:52.960
你看

21:52.960 --> 21:54.460
是不是输出了这么一句话

21:54.460 --> 21:55.260
对吧

21:55.260 --> 21:55.660
好

21:55.660 --> 21:57.460
这里

21:57.460 --> 22:00.260
这就是这一块的使用方式

22:00.260 --> 22:01.960
反回来就是Response对象

22:01.960 --> 22:03.560
那么我们现在考虑正常情况

22:03.560 --> 22:05.460
那么这个Response对象怎么来用呢

22:05.460 --> 22:05.860
你看一下

22:05.860 --> 22:06.960
下边

22:06.960 --> 22:08.060
它里边有一些属性

22:08.060 --> 22:08.560
有一些方法

22:08.560 --> 22:10.160
其他里边的东西还蛮多的

22:10.160 --> 22:12.560
我们这些可能基本使用完全够了

22:12.560 --> 22:14.160
用这些东西完全够了

22:14.160 --> 22:14.860
已经能够覆盖

22:14.860 --> 22:17.160
90%以上的场景都能覆盖掉了

22:17.160 --> 22:17.560
好

22:17.560 --> 22:18.460
看一下属性

22:18.460 --> 22:19.960
首先是OK是个属性

22:19.960 --> 22:20.560
它是个布尔

22:20.560 --> 22:21.260
要么为True

22:21.260 --> 22:22.060
要么为Force

22:23.360 --> 22:25.060
当服务器的响应消息

22:25.060 --> 22:28.660
马在200到299之间

22:28.660 --> 22:30.660
这是属于GDP协议的内容

22:30.660 --> 22:31.960
只要是这个区断的话

22:31.960 --> 22:33.060
都是正常情况

22:33.060 --> 22:34.360
服务器是正常响应的

22:34.360 --> 22:34.860
OK

22:34.860 --> 22:35.560
那么这个时候

22:35.560 --> 22:37.360
OK的属性就为True

22:37.360 --> 22:38.660
那么其他的就为Force

22:38.660 --> 22:40.060
所以说你要判断

22:40.160 --> 22:41.760
服务器那边是不是给地的

22:41.760 --> 22:43.260
一个正常的结果

22:43.260 --> 22:46.360
你应该通过Response对象的OK属性来判断

22:46.360 --> 22:49.060
而不是跑到Rejective的状态里边去找

22:50.360 --> 22:51.060
没了意思吗

22:51.060 --> 22:52.360
服务器随便给你什么响应

22:52.360 --> 22:54.560
它一定会是Resort的状态

22:54.560 --> 22:55.660
Rejective状态的时候

22:55.660 --> 22:57.560
一些网络请求根本就倒不了服务器

22:57.560 --> 22:58.260
是这种情况

22:59.260 --> 23:00.360
没了意思吗

23:00.360 --> 23:01.860
这是关于这一块

23:01.860 --> 23:03.860
那么我们把输出吧

23:03.860 --> 23:04.660
看一下这个对象

23:05.960 --> 23:07.060
特别简单

23:07.060 --> 23:09.060
你看这里OK变成True

23:09.060 --> 23:09.760
为什么呢

23:09.760 --> 23:10.260
为什么

23:10.260 --> 23:12.260
你看下面那个属性Status

23:12.260 --> 23:13.960
表示服务器的响应状态

23:13.960 --> 23:17.060
那里看这里Status是不是200

23:17.060 --> 23:17.760
对吧

23:17.760 --> 23:19.560
服务器的响应状态是200

23:19.560 --> 23:20.460
就这么简单

23:21.260 --> 23:21.460
好

23:21.460 --> 23:23.460
下面是提供了一些方法

23:23.460 --> 23:24.760
方这方法有什么用的

23:24.760 --> 23:26.860
这些方法可以解析服务器的

23:27.560 --> 23:28.660
想用的数据

23:28.660 --> 23:29.560
服务器的数据在哪

23:29.560 --> 23:30.160
给你的数据

23:30.160 --> 23:31.560
是不是在消息体里边

23:31.560 --> 23:31.960
对吧

23:31.960 --> 23:32.960
消息体里边

23:32.960 --> 23:35.760
以前我们得从消息体里边

23:35.760 --> 23:37.160
自己拿出来自己解析

23:37.160 --> 23:38.760
那么这里它提供了一些方法

23:38.760 --> 23:40.860
自动帮你进行解析

23:40.860 --> 23:42.660
那么首先第1个Tex的方法

23:42.660 --> 23:43.560
那么它这样子

23:43.560 --> 23:47.260
这个方法是把消息体里边的东西

23:47.260 --> 23:49.060
给你解析成为一个啥呢

23:49.060 --> 23:51.260
给你解析成为一个就是

23:52.060 --> 23:52.960
制服串

23:52.960 --> 23:55.160
把消息体里边给你解析成一个制服串

23:55.160 --> 23:57.760
那么它这个解析需要一段过程

23:57.760 --> 23:59.860
它也是一步的需要一段过程

23:59.860 --> 24:01.360
为什么说需要一段过程

24:01.360 --> 24:02.860
你想这个道理

24:02.860 --> 24:04.960
服务器那边给你想应过后

24:04.960 --> 24:07.060
其实它有可能想应的数据量很大

24:08.060 --> 24:09.560
我们举一个比较极端的例子

24:09.560 --> 24:12.460
它可能想应了几十万字的消息

24:13.160 --> 24:14.560
想应了一本书的内容

24:14.560 --> 24:15.560
100万字

24:16.160 --> 24:18.960
那这个传书是不是要一段过程

24:18.960 --> 24:19.760
对不对

24:19.760 --> 24:22.160
那它进行解析是不是要一段过程

24:22.160 --> 24:23.160
来进行解析

24:23.160 --> 24:23.760
对不对

24:23.760 --> 24:25.460
所以说它不是一下子

24:25.460 --> 24:26.560
可以解析出来的

24:26.560 --> 24:28.060
所以说它可能会要等一会

24:28.060 --> 24:29.060
才会出结果

24:29.060 --> 24:30.460
才会出解析结果

24:30.460 --> 24:32.660
因此这调用Tex的方法

24:32.660 --> 24:33.860
它解析的结果

24:33.860 --> 24:35.060
比方说我们这里调用

24:35.060 --> 24:36.760
调用Response的Tex的方法

24:36.760 --> 24:37.760
来进行解析

24:37.760 --> 24:39.060
它可以返回的是一个什么

24:39.060 --> 24:41.060
返回的仍然是一个Promise

24:41.860 --> 24:43.560
返回的仍然是一个Promise

24:43.560 --> 24:45.560
这个Promise已决过后

24:45.560 --> 24:47.160
这个Promise

24:47.160 --> 24:50.240
看一下吧

24:50.240 --> 24:51.740
我们这里输出

24:51.740 --> 24:53.740
如果说你直接这样写的话

24:53.740 --> 24:54.340
点击

24:54.340 --> 24:55.640
你看是不是得到一个Promise

24:55.640 --> 24:56.040
对吧

24:56.040 --> 24:57.040
它要进行解析

24:57.040 --> 24:58.940
要进行解析

24:58.940 --> 25:00.140
一开始是挂起的

25:00.140 --> 25:02.040
它解析完成之后

25:02.040 --> 25:03.040
那么这个Promise

25:03.040 --> 25:04.440
才变成已决状态

25:04.440 --> 25:06.140
才变成Resolve的状态

25:06.140 --> 25:08.440
当然如果说解析出现了错误的话

25:08.440 --> 25:10.140
它就会进入这里的

25:10.140 --> 25:11.540
出现错误就会进入这里

25:11.540 --> 25:12.840
那么它这里会解析

25:12.840 --> 25:14.540
我想等它解析完了过后

25:14.540 --> 25:15.640
再进行后续操作

25:15.640 --> 25:16.840
是不是继续而为之

25:16.840 --> 25:17.440
对吧

25:17.440 --> 25:18.540
继续而为之

25:18.540 --> 25:20.340
先等服务器拿到结果

25:20.340 --> 25:23.140
把服务器的Response对象拿到

25:23.140 --> 25:25.340
然后再通过它的调用函数

25:25.340 --> 25:26.140
进行解析

25:26.140 --> 25:28.240
解析它的服务器响应的内容

25:28.240 --> 25:29.840
解析成一个文本

25:29.840 --> 25:31.040
解析成一个文本

25:31.040 --> 25:32.840
那么

25:32.840 --> 25:33.640
解析完了

25:33.640 --> 25:34.640
等待完了之后

25:34.640 --> 25:35.640
它的Promise对象

25:35.640 --> 25:36.640
它就会把状态数据

25:36.640 --> 25:38.140
就是已经解析的结果

25:38.140 --> 25:39.840
那么把解析的结果拿到

25:39.840 --> 25:41.040
那你看一下

25:41.040 --> 25:41.540
是不是拿到

25:41.540 --> 25:42.740
就支付出了结果了

25:42.740 --> 25:43.040
对吧

25:43.040 --> 25:44.140
就特别特别简单

25:44.140 --> 25:45.440
你看现在的代码

25:45.440 --> 25:47.240
我们没有做任何封装

25:47.240 --> 25:48.940
我们以前做阿迪克斯还写了封装

25:48.940 --> 25:50.240
我们没有做任何封装

25:50.240 --> 25:51.240
直接就写了

25:51.240 --> 25:51.740
对吧

25:51.740 --> 25:53.440
如果说你不考虑错误情况的话

25:53.440 --> 25:54.240
你认为这里这一块

25:54.240 --> 25:55.340
不太会有错误

25:55.340 --> 25:55.740
OK

25:55.740 --> 25:57.240
那你写下更加简单

25:57.240 --> 25:57.740
对吧

25:57.740 --> 25:58.740
就写完了

25:58.740 --> 25:59.340
甚至呢

25:59.340 --> 26:01.540
像这里没有什么地方需要配置

26:01.540 --> 26:01.940
OK

26:01.940 --> 26:02.940
那这里就写完了

26:02.940 --> 26:03.440
几句话

26:03.440 --> 26:04.240
没有任何封装

26:04.240 --> 26:05.940
直接写完了

26:05.940 --> 26:08.040
你看一下

26:08.040 --> 26:08.740
是不是拿到了

26:08.740 --> 26:09.240
对吧

26:09.240 --> 26:10.940
这是解析成文本

26:10.940 --> 26:11.940
如果说

26:11.940 --> 26:13.940
你觉得服务器给你的消息

26:13.940 --> 26:14.840
响应的消息

26:14.840 --> 26:16.240
它不是一个普通文本

26:16.240 --> 26:17.840
它是一个节省格式

26:17.840 --> 26:19.240
然后就调用下面这个方法

26:19.240 --> 26:22.340
节省把它转变成为一个对象

26:22.340 --> 26:23.740
调用这个方法

26:23.740 --> 26:25.140
把它转变成一个对象

26:25.140 --> 26:25.740
保存

26:25.740 --> 26:26.540
你看一下

26:26.540 --> 26:27.340
点击

26:27.340 --> 26:29.340
你看是不是转化成一个输足了

26:29.340 --> 26:29.840
对吧

26:29.840 --> 26:30.440
解释输足

26:30.440 --> 26:32.240
就特别简单

26:32.240 --> 26:33.840
那么这里还提供了一些方法

26:33.840 --> 26:35.340
比方说Blob

26:35.340 --> 26:37.240
Blob你们学习GMO5 API的时候

26:37.240 --> 26:38.640
应该学习过对吧

26:38.640 --> 26:39.640
如果说你没有学习过的话

26:39.640 --> 26:40.140
也没关系

26:40.140 --> 26:42.240
我们后边有这个废棋API

26:42.240 --> 26:43.240
后边就是这个章节

26:43.240 --> 26:45.740
后边我们有些课要讲那个文件上传

26:45.740 --> 26:47.640
到时候给大家介绍一下这个Blob

26:47.640 --> 26:49.640
它是处理二净字格式的

26:49.640 --> 26:50.840
就是说服务器给我下

26:50.840 --> 26:52.240
可能下载了一个文件

26:52.240 --> 26:54.040
可能下载一张表格

26:54.040 --> 26:55.040
或者是一个Word文档

26:55.040 --> 26:56.340
它是二净字格式的

26:56.340 --> 26:58.640
那么你要解析成一个二净字对象

26:58.640 --> 27:00.440
那么就是个Blob对象

27:00.440 --> 27:01.940
就通过这个东西来解析

27:01.940 --> 27:02.040
好

27:02.040 --> 27:03.240
下边这个Reddy-Ragson

27:03.240 --> 27:04.640
它是做什么呢

27:04.640 --> 27:06.940
它是进行重定项的

27:07.740 --> 27:08.540
重定项

27:08.540 --> 27:11.040
就是重新去请求另外一个地址

27:11.040 --> 27:11.640
什么意思呢

27:11.640 --> 27:14.440
就是说有可能的服务器给你返回一个302

27:14.440 --> 27:15.940
302消息

27:15.940 --> 27:17.040
它会给你附加一个地址

27:17.040 --> 27:18.340
让你去请求这个地址

27:18.340 --> 27:20.340
那么你没有必要自己去手动请

27:20.340 --> 27:23.040
手动去解析这个地址

27:23.040 --> 27:24.040
然后重新发动请求

27:24.040 --> 27:24.640
没必要

27:24.640 --> 27:25.640
你直接调用这个方法

27:25.640 --> 27:27.340
它就会重新去请求这个地址

27:28.840 --> 27:29.440
没问题吧

27:29.440 --> 27:30.340
就很简单

27:30.340 --> 27:31.640
很简单

27:31.640 --> 27:33.340
但是我们一般情况下也不会

27:33.340 --> 27:34.640
在阿尔克斯请求的话

27:34.640 --> 27:36.340
服务器一般不会请你重定一下

27:36.340 --> 27:37.740
一般不会

27:37.740 --> 27:39.440
那么我们平时用的最多的就是Texter

27:39.440 --> 27:40.840
最多的就是节省

27:40.840 --> 27:43.240
把节省写成一个节省对象的格式

27:43.240 --> 27:44.540
你看不就拿到了吗

27:44.540 --> 27:46.040
对不对

27:46.040 --> 27:47.240
这就是废起API

27:47.240 --> 27:48.840
就是说起来好像很高大上

27:48.840 --> 27:49.840
好像很复杂的样子

27:49.840 --> 27:50.940
其实特别简单

27:50.940 --> 27:52.540
特别简单

27:52.540 --> 27:54.340
你把这个格式记住

27:54.340 --> 27:55.540
记住这些基本使用

27:55.540 --> 27:57.940
已经能够覆盖绝大部分场景了

27:57.940 --> 27:58.240
好了

27:58.240 --> 27:59.640
下去练习一下

27:59.640 --> 28:00.340
练习的地址

28:00.340 --> 28:01.440
就请求这个地址

28:01.440 --> 28:02.840
去找一找数据

28:02.840 --> 28:04.740
拿到这些数据

28:04.740 --> 28:05.440
没问题吧

28:05.440 --> 28:07.740
ok 这是关于废起API的基本使用

