WEBVTT

00:00.620 --> 00:03.660
这些课是一个扩展课程

00:03.660 --> 00:07.340
这些课的知识你们以后几乎是不太会遇到的

00:07.340 --> 00:09.740
所以说它重要性比较低

00:09.740 --> 00:12.860
因此把它作为扩展课程 给大家开会点事业

00:12.860 --> 00:16.540
因为ES牛牛驴儿被它毕竟出了这么一个新东西

00:16.540 --> 00:20.940
可能在某些特殊场景 非常特殊的场景下有效

00:20.940 --> 00:23.740
我想了漫天也想不出什么样的特殊场景

00:23.740 --> 00:26.380
不过它既然有这么一个东西 我给大家说一下

00:26.380 --> 00:29.340
就是关于政治中的粘连标记

00:29.500 --> 00:31.820
这个标记它是个标记名

00:31.820 --> 00:36.580
标记名是Y

00:36.580 --> 00:39.940
我们之前学过的一些标记名 比方说G

00:39.940 --> 00:42.260
全局匹配 还有什么呢

00:42.260 --> 00:44.740
还有我们地解课

00:44.740 --> 00:47.300
就是本章的地解课学过了U

00:47.300 --> 00:49.780
按照马点来匹配

00:49.780 --> 00:52.580
那么现在这里有多了一个标记名Y

00:52.580 --> 00:54.100
这个Y是什么意思呢

00:54.100 --> 00:57.380
就表示它的一含意识

00:57.460 --> 01:02.740
匹配时完全按照

01:02.740 --> 01:10.820
正则对象中的nust index位置

01:10.820 --> 01:12.420
开始匹配

01:12.420 --> 01:19.780
并且必须 就是匹配的位置

01:19.780 --> 01:24.260
必须在nust index位置

01:24.260 --> 01:26.740
说起来非常的抽象

01:26.820 --> 01:28.180
那么具体是什么意思呢

01:28.180 --> 01:30.100
我给大家看看例子一下就明白了

01:30.100 --> 01:32.020
这里我给大家写了个页面

01:32.020 --> 01:33.300
页面引用了一个JS

01:33.300 --> 01:34.500
后续我就不解释了

01:34.500 --> 01:35.700
一个页面引用了JS

01:35.700 --> 01:36.740
除非有特殊情况

01:36.740 --> 01:37.700
我再解释一下

01:37.700 --> 01:40.580
基本上都是这样的一个结构

01:40.580 --> 01:42.740
那么JS里边我们写上这么一个代码

01:42.740 --> 01:44.180
比方说我们这里

01:44.180 --> 01:45.700
我们用Const

01:45.700 --> 01:47.860
写上这么一个字不错吧

01:47.860 --> 01:50.340
想想啥呢

01:50.340 --> 01:55.700
写上一个Hello World

01:56.100 --> 01:57.380
那么比方说

01:57.380 --> 02:01.620
我们这里写上这么一个证则表达是

02:01.620 --> 02:02.900
我们要匹配什么呢

02:02.900 --> 02:05.220
匹配这个证则表达是里面的

02:05.220 --> 02:08.100
EW开头的单词

02:08.100 --> 02:10.580
比方说我们这里写上一个证则

02:10.580 --> 02:16.450
这个证则我们写上EW开头

02:16.450 --> 02:19.890
W开头后面是任意的单词制服

02:19.890 --> 02:21.170
一次多次

02:21.170 --> 02:22.530
这能看懂吧

02:22.530 --> 02:24.050
一个W字母开头

02:24.050 --> 02:26.850
然后后面是任意的制服

02:26.850 --> 02:29.090
任意的单词制服出现一次或多次

02:29.090 --> 02:30.290
那么一定会匹配这个

02:30.290 --> 02:30.610
对吧

02:30.610 --> 02:31.730
一定会匹配这个

02:31.730 --> 02:33.410
那么咱们来匹配一次

02:33.410 --> 02:36.690
RigTestText

02:36.690 --> 02:37.570
保存

02:37.570 --> 02:39.250
接下来我们能运行看一下

02:39.250 --> 02:42.450
能不能匹配呢

02:42.450 --> 02:43.650
你看

02:43.650 --> 02:44.930
没输出是吧

02:44.930 --> 02:45.810
没输出

02:45.810 --> 02:48.930
输出一下

02:48.930 --> 02:53.120
输出一下

02:53.120 --> 02:53.600
好

02:53.600 --> 02:54.240
输出一下

02:54.240 --> 02:54.960
是不是能匹配

02:54.960 --> 02:55.280
对吧

02:55.280 --> 02:56.080
说不定这个字母说里面

02:56.080 --> 02:58.560
包含了这样的一个东西

02:58.640 --> 03:03.280
那如果说我在这里加上一个Y呢

03:03.280 --> 03:04.240
加上一个Y呢

03:04.240 --> 03:05.680
你看它就不能匹配了

03:05.680 --> 03:07.200
为什么不能匹配呢

03:07.200 --> 03:08.400
它是这个意思

03:08.400 --> 03:09.920
如果加上Y的话

03:09.920 --> 03:12.640
它一定会受到另外一个东西的影响

03:12.640 --> 03:13.280
什么影响呢

03:13.280 --> 03:15.840
就证则对象的NastIndex

03:15.840 --> 03:17.200
它会受到这个东西的影响

03:17.200 --> 03:18.800
那么我们来输出一下

03:18.800 --> 03:21.120
证则里面的NastIndex

03:21.120 --> 03:23.440
RigTestText

03:23.440 --> 03:26.000
我们来输出一下

03:26.000 --> 03:27.920
RigTestText

03:28.000 --> 03:28.480
我们来看一下

03:28.480 --> 03:30.880
它一开始的默认只是0对吧

03:30.880 --> 03:32.320
也就是说什么意思呢

03:32.320 --> 03:33.760
就是说它要匹配的时候

03:33.760 --> 03:34.560
从这个字母出来

03:34.560 --> 03:35.760
最开始的位置

03:35.760 --> 03:37.600
从第一个字母开始匹配

03:37.600 --> 03:38.560
那么从第一个字母

03:38.560 --> 03:39.520
开始匹配的时候

03:39.520 --> 03:42.560
由于你加了粘连标记

03:42.560 --> 03:44.320
那么它在匹配的时候

03:44.320 --> 03:45.760
它必须要要求

03:45.760 --> 03:47.760
在NastIndex这个位置

03:47.760 --> 03:49.440
也算一开始这个位置

03:49.440 --> 03:51.280
就必须要满足这个东西

03:51.280 --> 03:53.200
就有点类似于

03:53.200 --> 03:55.040
这里加了一个这么一个东西

03:55.040 --> 03:56.480
以这个东西开头

03:56.480 --> 03:57.360
明白的意思吗

03:57.440 --> 03:58.960
但是它有不太一样

03:58.960 --> 04:00.240
为什么不太一样呢

04:00.240 --> 04:01.840
因为这个NastIndex

04:01.840 --> 04:04.160
你是可以手动更改的

04:04.160 --> 04:05.680
比方说改成这样子

04:05.680 --> 04:07.520
NastIndex我改成什么呢

04:07.520 --> 04:10.240
0123456

04:10.240 --> 04:11.920
我们改成6

04:11.920 --> 04:14.080
从这个字母出来定6个位置

04:14.080 --> 04:15.040
开始匹配

04:15.040 --> 04:16.240
也从这个位置开始匹配

04:16.240 --> 04:17.600
是不是能匹配上了

04:17.600 --> 04:18.000
对吧

04:18.000 --> 04:18.720
是不是能匹配上了

04:18.720 --> 04:20.000
匹配到这个对吧

04:20.000 --> 04:20.880
你看一下

04:20.880 --> 04:22.560
改成6过后是不能匹配了

04:22.560 --> 04:23.840
就这么个意思

04:23.840 --> 04:24.640
它是从

04:24.640 --> 04:26.880
它一定要从NastIndex

04:26.880 --> 04:28.080
这个位置

04:28.080 --> 04:29.920
就必须要匹配这个东西

04:29.920 --> 04:31.680
明白这个意思吧

04:31.680 --> 04:33.920
这就是粘连标志的意思

04:33.920 --> 04:35.520
那如果你不是粘连标志呢

04:35.520 --> 04:37.360
你看一下

04:37.360 --> 04:38.960
如果你不是粘连标志

04:38.960 --> 04:40.800
比方说我们这里写个3

04:40.800 --> 04:41.680
你写个3

04:41.680 --> 04:43.280
0123

04:43.280 --> 04:44.960
是不是从这个位置开始匹配

04:44.960 --> 04:46.960
从L这个位置开始匹配

04:46.960 --> 04:48.400
那么从这个位置匹配的时候

04:48.400 --> 04:49.760
如果你没有加粘连标志

04:49.760 --> 04:50.880
它这个地方匹配不上

04:50.880 --> 04:52.240
是不是我继续往后匹配

04:52.240 --> 04:52.720
对吧

04:52.720 --> 04:53.600
继续往后匹配

04:53.600 --> 04:54.880
匹配到这匹配上了

04:54.880 --> 04:55.680
你看

04:55.760 --> 04:57.040
这样子是能匹配的

04:57.040 --> 04:59.280
但是如果说你加了粘连标志

04:59.280 --> 05:00.720
那么在这个位置

05:00.720 --> 05:02.320
它只要在这个位置匹配不上

05:02.320 --> 05:03.840
那么它就表示不能匹配

05:03.840 --> 05:05.520
它不会继续往后找

05:05.520 --> 05:06.480
明白的意思吧

05:06.480 --> 05:08.080
它在某些情况下

05:08.080 --> 05:10.400
是可以提高那个匹配效率的

05:10.400 --> 05:10.720
好

05:10.720 --> 05:12.240
这是这种情况

05:12.240 --> 05:13.120
给大家说一下

05:13.120 --> 05:14.560
就加了这么一个

05:14.560 --> 05:16.640
加了这么一个扩展功能

05:16.640 --> 05:17.680
这政策里边

05:17.680 --> 05:19.440
也是扭心症的内容

05:19.440 --> 05:20.080
这个东西呢

05:20.080 --> 05:21.120
你看看就行了

05:21.120 --> 05:22.080
知道有这么一个

05:22.080 --> 05:23.120
有这么一点印象就行了

05:23.120 --> 05:24.000
都不用去练

05:24.000 --> 05:25.120
因为这个东西确实用的

05:25.200 --> 05:26.160
非常非常爽

05:26.160 --> 05:26.720
好吧

