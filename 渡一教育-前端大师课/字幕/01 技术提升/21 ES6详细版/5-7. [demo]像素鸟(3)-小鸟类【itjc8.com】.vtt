WEBVTT

00:00.880 --> 00:04.480
搞定了天空 搞定了大地

00:04.480 --> 00:06.880
现在呢 我们还有一只小鸟

00:06.880 --> 00:10.640
这只小鸟呢 现在就感觉上一只土丁

00:10.640 --> 00:13.480
丁在这个画布上的 但是呢 它没有动

00:13.480 --> 00:15.160
我们先往它动起来 来吧

00:15.160 --> 00:16.880
我们来写这么一个小鸟类

00:16.880 --> 00:19.440
好 小鸟类呢 它肯定比较特别

00:19.440 --> 00:20.880
有自己一些特别的东西

00:20.880 --> 00:22.880
不着急 慢慢来分析

00:22.880 --> 00:24.880
好 这里呢 我们 class

00:24.880 --> 00:25.880
BURL

00:25.880 --> 00:29.480
首先一样 它是继承 继承谁

00:29.480 --> 00:31.080
继承RigTango

00:31.080 --> 00:34.080
它也是一个举行 跑不掉的Tango

00:34.080 --> 00:36.080
它也去继承这个举行

00:36.080 --> 00:38.880
好 然后我们在页面上 去引用这个小鸟

00:38.880 --> 00:40.680
Scripps

00:40.680 --> 00:42.480
点儿写杠Scripps

00:42.480 --> 00:45.680
BURL 引用进来

00:45.680 --> 00:49.080
好 然后呢 它也要写构造函数

00:49.080 --> 00:51.480
同样的 要叫用Super

00:51.480 --> 00:53.880
好 小鸟类边 有哪些

00:53.880 --> 00:56.080
就是宽高那些东西是不是也是一样的

00:56.080 --> 00:57.080
宽高那些东西

00:57.080 --> 00:59.080
是不是也是要把这些数据全部拿到

00:59.080 --> 01:01.480
对吧 小鸟这些东西要全部拿到

01:01.480 --> 01:07.480
来吧 我们把这个nand换成BURL的

01:07.480 --> 01:09.480
是不是把小鸟的东西全部拿到了

01:09.480 --> 01:12.280
小鸟的宽度BURL的位置

01:12.280 --> 01:14.280
小鸟的高度BURL的Height

01:14.280 --> 01:16.880
小鸟的就是位置

01:16.880 --> 01:18.080
BURL的还有一个Left

01:18.080 --> 01:20.080
对吧 我们都把它拿到

01:20.080 --> 01:21.080
Left

01:21.080 --> 01:27.080
小鸟的就是BURL的

01:28.080 --> 01:31.460
这里是Left

01:31.460 --> 01:33.460
BURL的Left 小鸟的横坐标

01:33.460 --> 01:35.460
小鸟的重坐标

01:35.460 --> 01:37.460
还有什么呢 我们看一下

01:37.460 --> 01:39.460
Rectangle里边还有哪些属性要传递

01:39.460 --> 01:41.460
横重坐标 然后速度

01:41.460 --> 01:43.460
好 关键是速度这一块

01:43.460 --> 01:46.460
小鸟一开始有没有速度啊

01:46.460 --> 01:48.460
你看一下 一开始有没有速度

01:48.460 --> 01:51.460
你仔细看一下 一开始有速度吗

01:51.460 --> 01:54.460
有些是暂停的 是吧 有些是暂停的

01:54.460 --> 01:58.460
那么速度是不是越来越快 对吧

01:58.460 --> 02:00.460
是一个加速下落的过程

02:00.460 --> 02:02.460
它一开始没有速度

02:02.460 --> 02:04.460
它的速度是怎么来的呢

02:04.460 --> 02:06.460
它的速度是不断加速产生的

02:06.460 --> 02:09.460
所以说它有加速度 它没有速度

02:09.460 --> 02:12.460
加速度这个东西是不是自己的特有属性啊

02:12.460 --> 02:14.460
对不对 是不是自己的特别的一个属性

02:14.460 --> 02:16.460
你看其他都没有加速度 就只有小鸟有

02:16.460 --> 02:19.460
所以说小鸟还有自己特别的一个属性

02:19.460 --> 02:21.460
加速度 通过加速度去改变速度

02:21.460 --> 02:23.460
然后从了通过速度去改变位置

02:23.460 --> 02:25.460
它是这么一个逻辑

02:25.460 --> 02:28.460
因此小鸟肯定没有速度

02:28.460 --> 02:30.460
更加不要说是横向速度了 是吧

02:30.460 --> 02:31.460
横向速度肯定是0

02:31.460 --> 02:33.460
小鸟永远不会在横向上移动

02:33.460 --> 02:35.460
你看上去是背景在移动

02:35.460 --> 02:36.460
感觉上小鸟好像在移动

02:36.460 --> 02:38.460
实际上小鸟并没有横向移动

02:38.460 --> 02:39.460
它只是中向移动

02:39.460 --> 02:41.460
并且中向的速度也是0

02:41.460 --> 02:43.460
一开始也是0

02:43.460 --> 02:45.460
多么对象 好说

02:45.460 --> 02:48.460
小鸟它有的是一个什么呢

02:48.460 --> 02:50.460
加速度

02:50.460 --> 02:52.460
我们用中立加速度G

02:52.460 --> 02:54.460
来表示它的加速度

02:54.460 --> 02:56.460
这个加速度我当时呢

02:56.460 --> 02:58.460
模拟了一下 好像我记得是

02:58.460 --> 03:00.460
0.002单位

03:00.460 --> 03:02.460
这是向下的加速度

03:02.460 --> 03:04.460
它一个向下的加速度

03:04.460 --> 03:06.460
单位是

03:06.460 --> 03:08.460
向速

03:08.460 --> 03:11.460
每平方秒

03:11.460 --> 03:14.770
平方

03:14.770 --> 03:16.770
每平方秒

03:16.770 --> 03:17.770
这是加速度 对不对

03:17.770 --> 03:19.770
加速度是这样的单位

03:19.770 --> 03:22.770
好 那么小鸟它是有一个加速度

03:22.770 --> 03:23.770
那么小鸟它没有速度

03:23.770 --> 03:24.770
它永远不会移动

03:24.770 --> 03:25.770
现在有这么一个问题

03:25.770 --> 03:26.770
你看一下

03:26.770 --> 03:28.770
这个小鸟它是永远不会移动的

03:28.770 --> 03:29.770
比方说

03:29.770 --> 03:30.770
我们这里写上

03:30.770 --> 03:32.770
创建一个半的

03:32.770 --> 03:34.770
创建一个半的

03:34.770 --> 03:37.770
六一个半的

03:37.770 --> 03:38.770
创建一个半的

03:38.770 --> 03:40.770
那么这里移动

03:40.770 --> 03:42.770
每个16毫秒移动一次

03:42.770 --> 03:43.770
它能移动吗

03:43.770 --> 03:44.770
它没法移动

03:44.770 --> 03:45.770
因为这个加速度在负累里面

03:45.770 --> 03:46.770
是不增效的

03:46.770 --> 03:47.770
负累里面只管速度

03:47.770 --> 03:48.770
你没有速度

03:48.770 --> 03:49.770
OK 你永远不会动

03:49.770 --> 03:50.770
有没有运行

03:50.770 --> 03:51.770
这个大家肯定运行了

03:51.770 --> 03:53.770
但是它不会动

03:53.770 --> 03:55.770
所以说小鸟这里

03:55.770 --> 03:58.770
我们要更加精细的来控制

03:58.770 --> 04:00.770
精细的来控制

04:00.770 --> 04:02.770
好 怎么来控制呢

04:02.770 --> 04:04.770
怎么来控制小鸟这一块呢

04:04.770 --> 04:05.770
小鸟这一块

04:05.770 --> 04:07.770
它有一个加速度

04:07.770 --> 04:08.770
我们要通过加速度

04:08.770 --> 04:10.770
来改变速度

04:10.770 --> 04:11.770
从而达到

04:11.770 --> 04:13.770
能够改变移动的目的

04:13.770 --> 04:14.770
因此我们是不是

04:14.770 --> 04:17.770
得重写这个木武方法

04:17.770 --> 04:18.770
它木武方法

04:18.770 --> 04:19.770
我们是不是得重写

04:19.770 --> 04:20.770
你看一下这边

04:20.770 --> 04:22.770
它的木武方法是不是得重写

04:22.770 --> 04:23.770
对吧

04:23.770 --> 04:25.770
是不是得重写

04:25.770 --> 04:27.770
有人说可以不重写

04:27.770 --> 04:28.770
可以使用这个方法

04:28.770 --> 04:29.770
也可以

04:29.770 --> 04:31.770
这里不是提供了一个

04:31.770 --> 04:33.770
我们也可以在这里

04:33.770 --> 04:36.770
来写一个

04:36.770 --> 04:37.770
也行

04:37.770 --> 04:38.770
对不对

04:38.770 --> 04:39.770
都行

04:39.770 --> 04:40.770
比方说我们来重写一个

04:40.770 --> 04:41.770
因为我们这里练习一下

04:41.770 --> 04:42.770
重写

04:42.770 --> 04:44.770
重写了负累里面

04:44.770 --> 04:45.770
有这么一个木武方法

04:45.770 --> 04:46.770
是不是可以重写

04:46.770 --> 04:48.770
我们先把负累的方法

04:48.770 --> 04:49.770
调用一遍

04:49.770 --> 04:50.770
调用一遍

04:50.770 --> 04:51.770
用super

04:51.770 --> 04:52.770
调用一遍负累的木武方法

04:52.770 --> 04:54.770
调为新传进去

04:54.770 --> 04:57.770
先调用负累方法

04:57.770 --> 04:58.770
让你移动

04:58.770 --> 05:00.770
按照我现在的速度

05:00.770 --> 05:01.770
先移动一下

05:01.770 --> 05:02.770
移动完了之后

05:02.770 --> 05:04.770
是不是速度的改变

05:04.770 --> 05:05.770
对吧

05:05.770 --> 05:06.770
根据加速度

05:06.770 --> 05:07.770
加速度

05:07.770 --> 05:08.770
改变速度

05:08.770 --> 05:09.770
你速度的变吧

05:09.770 --> 05:10.770
你每次移动过后

05:10.770 --> 05:12.770
你经过这么长的时间过后

05:12.770 --> 05:14.770
你的速度肯定得变成新的速度

05:14.770 --> 05:15.770
对不对

05:15.770 --> 05:16.770
那么怎么来改变速度呢

05:16.770 --> 05:18.770
横向的速度是永远是0

05:18.770 --> 05:19.770
不用去管

05:19.770 --> 05:21.770
只需要管重向的速度

05:21.770 --> 05:22.770
Yspeed

05:22.770 --> 05:23.770
他有没有Yspeed的这个速向

05:23.770 --> 05:25.770
肯定有负累提供的

05:25.770 --> 05:27.770
Yspeed肯定得变

05:27.770 --> 05:28.770
变成什么呢

05:28.770 --> 05:30.770
是不是加速度

05:30.770 --> 05:32.770
Z是del

05:32.770 --> 05:34.770
G

05:34.770 --> 05:35.770
加速度

05:35.770 --> 05:36.770
乘以时间

05:36.770 --> 05:37.770
对吧

05:37.770 --> 05:38.770
乘以时间

05:38.770 --> 05:39.770
是不是变成新

05:39.770 --> 05:41.770
加上原来的速度

05:41.770 --> 05:42.770
初速度是这个

05:42.770 --> 05:43.770
对吧

05:43.770 --> 05:44.770
经过这么一段时间过后

05:44.770 --> 05:46.770
这是一个简单的物理公式

05:47.770 --> 05:48.770
新的速度等于什么

05:48.770 --> 05:49.770
原来的速度

05:49.770 --> 05:51.770
加上加速度乘以时间

05:51.770 --> 05:52.770
就是新的速度

05:52.770 --> 05:54.770
是不是改变成为新的速度了

05:54.770 --> 05:55.770
速度一开始是0

05:55.770 --> 05:56.770
但是经过

05:56.770 --> 05:57.770
每一次移动过后

05:57.770 --> 05:58.770
它速度都要变化

05:58.770 --> 05:59.770
都要变化

06:00.770 --> 06:01.770
那你看一下

06:01.770 --> 06:02.770
保存

06:04.770 --> 06:05.770
为什么没动了

06:05.770 --> 06:06.770
我看一下

06:06.770 --> 06:08.770
为什么没动

06:08.770 --> 06:09.770
delete

06:10.770 --> 06:12.770
为什么没有动呢

06:13.770 --> 06:14.770
这个是

06:14.770 --> 06:16.770
豪妙还是妙

06:16.770 --> 06:18.770
这好像是

06:18.770 --> 06:19.770
豪妙吧

06:19.770 --> 06:21.770
我们把它变成2看一下

06:21.770 --> 06:24.140
倒是再动

06:24.140 --> 06:25.140
倒是再动

06:25.140 --> 06:26.140
速度越来越快

06:26.140 --> 06:27.140
那个速度还不够

06:28.140 --> 06:29.140
200

06:29.140 --> 06:32.840
是不是一个加速过程

06:32.840 --> 06:33.840
2000

06:33.840 --> 06:34.840
调一下

06:34.840 --> 06:35.840
这也太快了

06:35.840 --> 06:36.840
1000调一下

06:36.840 --> 06:37.840
调到合适为止

06:39.840 --> 06:40.840
1500

06:40.840 --> 06:43.220
差不多了

06:43.220 --> 06:44.220
差不多了

06:44.220 --> 06:45.220
是不是一个加速下动的过程

06:45.220 --> 06:46.220
对吧

06:46.220 --> 06:48.220
加速下动的过程

06:48.220 --> 06:49.220
但是

06:49.220 --> 06:50.220
它下落了

06:50.220 --> 06:51.220
它还有一个范围

06:51.220 --> 06:52.220
对吧

06:52.220 --> 06:53.220
你不能

06:53.220 --> 06:54.220
你改变坐标的时候

06:54.220 --> 06:55.220
你不能改变的太离谱

06:55.220 --> 06:56.220
你不能跑到下边去了

06:56.220 --> 06:57.220
你不能跑到顶边去了

06:57.220 --> 06:58.220
对吧

06:58.220 --> 07:00.220
它的横坐标是有一定范围的

07:00.220 --> 07:02.220
它的重坐标是有一定范围的

07:02.220 --> 07:04.220
横坐标是不会变的

07:04.220 --> 07:06.220
它重坐标是有一定范围的

07:06.220 --> 07:07.220
因此

07:07.220 --> 07:08.220
每一次

07:08.220 --> 07:09.220
你看我调用负责的方法

07:09.220 --> 07:10.220
负责的方法里面

07:10.220 --> 07:11.220
不是在做这么一件事吗

07:11.220 --> 07:12.220
对不对

07:13.220 --> 07:14.220
它是在控制坐标范围的

07:14.220 --> 07:15.220
所以说

07:15.220 --> 07:17.220
我们就单独去写一个M5

07:17.220 --> 07:18.220
对吧

07:18.220 --> 07:19.220
我们就单独去写一个M5

07:19.220 --> 07:21.220
每一次移动过后

07:21.220 --> 07:23.220
控制坐标范围

07:23.220 --> 07:26.220
如果说你的Z点

07:26.220 --> 07:28.220
Z点top太离谱了

07:28.220 --> 07:29.220
你不能太离谱

07:29.220 --> 07:30.220
你不能小于0

07:30.220 --> 07:31.220
如果说你小于0

07:31.220 --> 07:33.220
我就把它受为0

07:33.220 --> 07:35.220
top只不能小于0

07:35.220 --> 07:36.220
好

07:36.220 --> 07:37.220
lcf

07:37.220 --> 07:38.220
还有一个什么值呢

07:38.220 --> 07:39.220
就是你的top值

07:39.220 --> 07:40.220
不能大于某一个值

07:40.220 --> 07:41.220
如果说大于哪个值呢

07:41.220 --> 07:43.220
就是这一段

07:43.220 --> 07:44.220
小了你不能跑到这

07:44.220 --> 07:45.220
对吧

07:45.220 --> 07:46.220
你看鸟在这吧

07:46.220 --> 07:47.220
鸟在这

07:47.220 --> 07:48.220
鸟一个自身的高度

07:48.220 --> 07:49.220
这是鸟自身的高度

07:49.220 --> 07:51.220
然后这是这一段距离

07:51.220 --> 07:52.220
这一段距离

07:52.220 --> 07:54.220
减去鸟自身的高度

07:54.220 --> 07:56.220
是不是它的最大的Y座标

07:56.220 --> 07:57.220
最大的Y座标

07:57.220 --> 07:58.220
你不能大于这个值

07:58.220 --> 07:59.220
对不对

07:59.220 --> 08:00.220
你不能大于这个值

08:00.220 --> 08:01.220
好 来吧

08:02.220 --> 08:03.220
你不能

08:05.220 --> 08:06.220
你不能大于这个值

08:06.220 --> 08:07.220
这个值来自于哪呢

08:07.220 --> 08:08.220
是不是最大的Y座标

08:08.220 --> 08:09.220
OK

08:09.220 --> 08:10.220
我们这里加一个属性

08:10.220 --> 08:11.220
加一个属性

08:11.220 --> 08:13.220
叫做max y

08:14.220 --> 08:15.220
这个最大的Y座标

08:15.220 --> 08:16.220
我们打个注射

08:16.220 --> 08:17.220
这是最大的Y座标

08:18.220 --> 08:19.220
Y座标

08:19.220 --> 08:21.220
那么这个最大的Y座标怎么算呢

08:21.220 --> 08:22.220
怎么算呢

08:22.220 --> 08:23.220
是不是刚才说的

08:24.220 --> 08:26.220
我把这个浏览器关掉了

08:26.220 --> 08:27.220
运行出来

08:30.040 --> 08:31.040
最大的Y座标

08:31.040 --> 08:33.040
是不是这一段的距离

08:33.040 --> 08:36.350
这一段的距离

08:36.350 --> 08:38.350
减去小了自身的高度

08:38.350 --> 08:39.350
那么现在关键是

08:39.350 --> 08:41.350
这一段距离等于多少了

08:41.350 --> 08:43.350
是不是整个游戏面板的距离

08:43.350 --> 08:45.350
减去大地的距离

08:45.350 --> 08:46.350
对吧

08:46.350 --> 08:48.350
整个游戏面板的距离

08:48.350 --> 08:50.350
减去大地的高度

08:50.350 --> 08:51.350
那么这个东西

08:51.350 --> 08:52.350
我们这里没有这个数据

08:52.350 --> 08:53.350
没有这个数据

08:53.350 --> 08:56.350
我们可以通过这个地方来得到

08:56.350 --> 08:57.350
game

08:57.350 --> 08:58.350
或者说呢

08:58.350 --> 08:59.350
我们就来得到吧

08:59.350 --> 09:00.350
gametone

09:00.350 --> 09:02.350
gametstyles

09:02.350 --> 09:04.350
那么这里Pose,float

09:04.350 --> 09:06.350
我们这里写个很长的代码

09:06.350 --> 09:08.350
getCompleteStyle

09:08.350 --> 09:09.350
得到什么呢

09:09.350 --> 09:11.350
document,query selector

09:11.350 --> 09:13.350
得到这个游戏

09:13.350 --> 09:15.350
游戏的document对象

09:15.350 --> 09:17.350
得到一个游戏的document对象

09:17.350 --> 09:18.350
或者我们干脆

09:18.350 --> 09:20.350
也可以把它放到一些配置里面吧

09:20.350 --> 09:22.350
放到一些配置里面也行

09:22.350 --> 09:25.350
我们这里得到一个游戏的document对象

09:25.350 --> 09:27.350
得到一个document对象

09:27.350 --> 09:30.350
过后我们把document对象的所有央视拿到

09:30.350 --> 09:31.350
取出这个央视里面

09:31.350 --> 09:32.350
也可以分开写

09:32.350 --> 09:35.350
总之你得到游戏document对象的高度

09:35.350 --> 09:37.350
总之要得到它的高度

09:37.350 --> 09:39.350
或者是这样吧

09:39.350 --> 09:43.370
这样

09:43.370 --> 09:45.370
因为这个代码只运行式

09:45.370 --> 09:46.370
所以也无所谓

09:46.370 --> 09:47.370
client height

09:47.370 --> 09:49.370
得到一个游戏面板的高度

09:49.370 --> 09:51.370
这是游戏面板的高度

09:51.370 --> 09:52.370
所以最大的外出标准备

09:52.370 --> 09:53.370
多少呢

09:53.370 --> 09:55.370
等于game height

09:55.370 --> 09:57.370
游戏面板的高度

09:57.370 --> 09:59.370
游戏面板的高度

09:59.370 --> 10:01.370
减去什么呢

10:01.370 --> 10:03.370
减去大地的高度

10:03.370 --> 10:04.370
减去大地的高度

10:04.370 --> 10:05.370
大地的高度前面不是有吗

10:05.370 --> 10:06.370
对吧

10:06.370 --> 10:07.370
我们直接减就行了

10:07.370 --> 10:08.370
land height

10:08.370 --> 10:11.370
前面不是已经有了吗

10:12.370 --> 10:13.370
前面land了的这里

10:13.370 --> 10:14.370
land height

10:14.370 --> 10:15.370
已经有了

10:15.370 --> 10:17.370
所以说我们这里相减就行了

10:17.370 --> 10:19.370
然后再减去什么呢

10:19.370 --> 10:21.370
再减去小料自身的高度

10:21.370 --> 10:23.370
this height

10:23.370 --> 10:24.370
对吧

10:24.370 --> 10:25.370
能看懂吗

10:25.370 --> 10:26.370
是不是就可以拿到了

10:26.370 --> 10:27.370
拿到这个最大外出标了

10:27.370 --> 10:28.370
那么这里边呢

10:28.370 --> 10:29.370
如果说你top只大于了

10:29.370 --> 10:30.370
最大的外出标

10:30.370 --> 10:31.370
那么我给它设置成为

10:31.370 --> 10:32.370
最大的外出标

10:32.370 --> 10:34.370
这也是max y

10:34.370 --> 10:36.370
你的top只不能太离谱

10:36.370 --> 10:37.370
保存

10:37.370 --> 10:38.370
你看一下

10:38.370 --> 10:39.370
这样子小料还可以掉

10:39.370 --> 10:40.370
但是掉了只能掉到这

10:40.370 --> 10:41.370
跑不掉了

10:41.370 --> 10:43.370
对不对

10:43.370 --> 10:45.370
那么小料的下落

10:45.370 --> 10:46.370
是不是搞定了

10:46.370 --> 10:47.370
对吧

10:47.370 --> 10:48.370
往下落

10:48.370 --> 10:49.370
那么小料怎么挑呢

10:49.370 --> 10:51.370
你看小料是一挑一挑的

10:51.370 --> 10:53.370
我那边关掉了

10:53.370 --> 10:54.370
关掉了

10:54.370 --> 10:56.370
我要找一找

10:56.370 --> 10:58.370
我要找一找

10:58.370 --> 11:00.370
在这里边

11:00.370 --> 11:03.370
我们之前的jama script

11:03.370 --> 11:05.370
相输了

11:05.370 --> 11:08.870
还是这

11:08.870 --> 11:10.870
那么它可以挑

11:10.870 --> 11:11.870
对吧

11:11.870 --> 11:13.870
什么叫做跳

11:13.870 --> 11:14.870
跳就是意思

11:14.870 --> 11:16.870
直接给它一个向上的速度

11:16.870 --> 11:18.870
它加速度始终是向下的

11:18.870 --> 11:19.870
它自然会往

11:19.870 --> 11:20.870
慢慢往下落

11:20.870 --> 11:21.870
对吧

11:21.870 --> 11:22.870
慢慢往下落

11:22.870 --> 11:23.870
所以说小料有一个方法叫jump

11:23.870 --> 11:24.870
跳

11:24.870 --> 11:25.870
跳是什么意思呢

11:25.870 --> 11:28.870
跳就是向上跳

11:28.870 --> 11:30.870
向上跳就是直接给它一个

11:30.870 --> 11:33.870
直接给一个向上的速度

11:33.870 --> 11:34.870
就是复数

11:34.870 --> 11:36.870
复数比去向上

11:36.870 --> 11:37.870
那么也就是说

11:37.870 --> 11:38.870
跳就很简单

11:38.870 --> 11:39.870
Y speed

11:39.870 --> 11:40.870
等于什么呢

11:40.870 --> 11:41.870
等于复的

11:41.870 --> 11:43.870
比方说复的

11:43.870 --> 11:44.870
150

11:44.870 --> 11:46.870
比方说复的150

11:46.870 --> 11:47.870
来吧

11:47.870 --> 11:48.870
试一下吧

11:48.870 --> 11:49.870
我们看一下跳

11:49.870 --> 11:50.870
这里

11:50.870 --> 11:51.870
我们再控制一下

11:51.870 --> 11:54.870
BirdJump

11:54.870 --> 11:55.870
跳

11:55.870 --> 11:56.870
你看

11:56.870 --> 11:57.870
是不是跳了一下

11:57.870 --> 11:58.870
不过这个速度太小了

11:58.870 --> 12:00.870
很快被加速度拖下来了

12:00.870 --> 12:02.870
因为它不断的在运动

12:02.870 --> 12:03.870
不断的在运动

12:03.870 --> 12:04.870
每运动一次

12:04.870 --> 12:06.870
是不是加速度都会往下拖

12:06.870 --> 12:07.870
因为加速度是向下的

12:07.870 --> 12:09.870
它会不断的把速度改变

12:09.870 --> 12:10.870
你的速度是复数

12:10.870 --> 12:11.870
但是加速度

12:11.870 --> 12:12.870
会不断的改变这个速度

12:12.870 --> 12:13.870
一开始是复的150

12:13.870 --> 12:15.870
但是每一次运动完了过

12:15.870 --> 12:16.870
加速度它变成了150

12:16.870 --> 12:17.870
复的50

12:17.870 --> 12:18.870
复的25

12:18.870 --> 12:19.870
复的10

12:19.870 --> 12:20.870
0

12:20.870 --> 12:21.870
然后又变成正数了

12:21.870 --> 12:22.870
对吧

12:22.870 --> 12:23.870
又往下掉了

12:23.870 --> 12:24.870
对不对

12:24.870 --> 12:25.870
所以说我们这里

12:25.870 --> 12:26.870
给它个大的速度

12:26.870 --> 12:28.870
550看一下

12:28.870 --> 12:29.870
Jump

12:29.870 --> 12:30.870
Jump

12:30.870 --> 12:31.870
差不多了对吧

12:31.870 --> 12:32.870
Jump

12:32.870 --> 12:33.870
Jump

12:33.870 --> 12:34.870
Jump

12:34.870 --> 12:35.870
对吧

12:35.870 --> 12:36.870
对吧

12:36.870 --> 12:37.870
不用跳了吗

12:37.870 --> 12:38.870
对不对

12:38.870 --> 12:39.870
不用跳了吗

12:39.870 --> 12:41.870
这就是小料的跳

12:41.870 --> 12:42.870
这不是很简单吗

12:42.870 --> 12:43.870
对不对

12:43.870 --> 12:44.870
能想到吗

12:44.870 --> 12:46.870
这可能不太容易想到

12:46.870 --> 12:48.870
那么小料

12:48.870 --> 12:49.870
做的差不多了

12:49.870 --> 12:50.870
但是还有一个东西

12:50.870 --> 12:52.870
就是小料的翅膀

12:52.870 --> 12:54.870
它要不断的山动

12:54.870 --> 12:55.870
你看看

12:55.870 --> 12:57.870
小料翅膀要不断的山动

12:57.870 --> 12:59.870
这里是不是有一个

12:59.870 --> 13:00.870
特有的东西

13:00.870 --> 13:02.870
小料的翅膀

13:02.870 --> 13:04.870
要不断的进行山动

13:04.870 --> 13:05.870
不断的进行山动

13:05.870 --> 13:06.870
那么这里

13:06.870 --> 13:08.870
我们就可以设置一个

13:08.870 --> 13:10.870
可以设置一个Z

13:10.870 --> 13:12.870
加上一个就是

13:12.870 --> 13:14.870
小料目前的翅膀状态

13:14.870 --> 13:16.870
Swim

13:16.870 --> 13:17.870
Status

13:17.870 --> 13:19.870
表示小料目前的翅膀状态

13:19.870 --> 13:21.870
目前是1

13:21.870 --> 13:25.870
小料的翅膀

13:25.870 --> 13:28.870
翅膀状态

13:28.870 --> 13:29.870
目前是1

13:29.870 --> 13:30.870
那么到时候

13:30.870 --> 13:32.870
小料的翅膀状态

13:32.870 --> 13:33.870
是不是要不断的变化

13:33.870 --> 13:34.870
对吧

13:34.870 --> 13:35.870
不断的变化

13:35.870 --> 13:36.870
那么变化怎么变化

13:36.870 --> 13:37.870
就改变这个东西就行了

13:37.870 --> 13:38.870
到时候

13:38.870 --> 13:40.870
我们自然会有一个东西来控制

13:40.870 --> 13:42.870
或者说我们在小料里边

13:42.870 --> 13:44.870
开一个计时器也行

13:44.870 --> 13:45.870
开一个计时器也行

13:45.870 --> 13:46.870
比方说我们在这里

13:46.870 --> 13:47.870
再加个计时器

13:47.870 --> 13:48.870
Tammer

13:48.870 --> 13:50.870
等于NOW

13:50.870 --> 13:52.870
翅膀

13:52.870 --> 13:54.870
翅膀

13:54.870 --> 13:56.870
山动的

13:56.870 --> 13:58.870
计时器

13:58.870 --> 13:59.870
山动的计时器

13:59.870 --> 14:00.870
那么我们这里

14:00.870 --> 14:01.870
写上这么一个函数

14:01.870 --> 14:04.870
start swing

14:04.870 --> 14:06.870
山动翅膀

14:06.870 --> 14:11.870
开始山动翅膀

14:11.870 --> 14:15.870
然后我们这里写个stop swing

14:15.870 --> 14:19.870
这是结束山动翅膀

14:19.870 --> 14:22.870
结束山动翅膀

14:22.870 --> 14:23.870
停止山动翅膀

14:23.870 --> 14:25.870
因为有的时候有效暂停

14:25.870 --> 14:30.020
山动翅膀

14:30.020 --> 14:32.020
开始山动翅膀怎么写

14:32.020 --> 14:33.020
开始山动翅膀

14:33.020 --> 14:35.020
也就是给ZS-Tammer复制

14:35.020 --> 14:36.020
ZS-Interval

14:36.020 --> 14:37.020
但是注意这里

14:37.020 --> 14:38.020
我们尽量用箭头函数

14:38.020 --> 14:40.020
来保留ZS

14:40.020 --> 14:41.020
绑定ZS

14:41.020 --> 14:42.020
不然的话ZS要出问题

14:42.020 --> 14:45.020
比方说每隔300毫秒

14:45.020 --> 14:46.020
三动一次

14:46.020 --> 14:47.020
每隔300毫秒干嘛呢

14:47.020 --> 14:48.020
每隔300毫秒

14:48.020 --> 14:50.020
我们是不是切换一下状态

14:50.020 --> 14:52.020
切换一下状态

14:52.020 --> 14:54.020
Swing status加加

14:54.020 --> 14:55.020
一共有3种状态

14:55.020 --> 14:56.020
123

14:56.020 --> 14:58.020
或者说Swing status等于什么呢

14:58.020 --> 15:01.020
等于ZSwing

15:02.020 --> 15:04.020
Swing status加1

15:04.020 --> 15:06.020
就是把原来的状态加1

15:06.020 --> 15:07.020
比方说原来是1变成2

15:07.020 --> 15:09.020
然后除以3的余数

15:09.020 --> 15:11.020
也可以

15:11.020 --> 15:13.020
所以这样子也可以

15:13.020 --> 15:14.020
重新给Swing status复制

15:14.020 --> 15:16.020
这就是山动翅膀

15:16.020 --> 15:17.020
每隔300毫秒

15:17.020 --> 15:18.020
我们做一下这么严实

15:18.020 --> 15:19.020
因为小乐有别的功能

15:19.020 --> 15:20.020
你别的功能

15:20.020 --> 15:21.020
你自己加拉一马

15:21.020 --> 15:22.020
你不能完全依靠附类

15:22.020 --> 15:24.020
附类只提去公共功能

15:24.020 --> 15:25.020
他自己的东西

15:25.020 --> 15:27.020
你自己去搞定

15:27.020 --> 15:28.020
那么这样子就搞定了

15:28.020 --> 15:31.020
我们就可以实现翅膀的山动了

15:31.020 --> 15:32.020
可能这个单码看不懂

15:32.020 --> 15:33.020
我说你说一下

15:33.020 --> 15:34.020
这单码什么意思呢

15:34.020 --> 15:36.020
就说你以前的翅膀状态为1

15:36.020 --> 15:38.020
那你要变成2

15:38.020 --> 15:39.020
是不是1加1等于2

15:39.020 --> 15:40.020
2除以3的余数

15:40.020 --> 15:41.020
是不是还是2

15:41.020 --> 15:42.020
那么现在状态为2

15:42.020 --> 15:43.020
你要变成3

15:43.020 --> 15:45.020
2加1等于3

15:45.020 --> 15:46.020
3

15:46.020 --> 15:47.020
然后除以3的余数

15:47.020 --> 15:48.020
这还不行

15:48.020 --> 15:49.020
这还不行

15:49.020 --> 15:50.020
这里还要加个1

15:50.020 --> 15:52.020
加个1才行

15:52.020 --> 15:53.020
或者说

15:53.020 --> 15:54.020
如果说你这样子看不懂的话

15:54.020 --> 15:55.020
你这样子写吧

15:55.020 --> 15:57.020
每一次翅膀加加

15:57.020 --> 15:58.020
翅膀加加

15:58.020 --> 16:00.020
如果说翅膀加到

16:00.020 --> 16:02.020
swim status

16:02.020 --> 16:03.020
如果说等于4

16:03.020 --> 16:04.020
加到4去了

16:04.020 --> 16:05.020
一共只有3个

16:05.020 --> 16:07.020
那你把它换成1

16:07.020 --> 16:09.020
swim status等于1

16:09.020 --> 16:11.020
然后干嘛重新渲染

16:11.020 --> 16:13.020
list render

16:13.020 --> 16:14.020
重新渲染

16:14.020 --> 16:16.020
这是开山动翅膀

16:16.020 --> 16:19.020
停滞山动翅膀怎么停滞呢

16:19.020 --> 16:21.020
停滞是不是就把即时器清空就完成了

16:21.020 --> 16:23.020
timeout等于now

16:23.020 --> 16:25.020
然后干嘛clear interval

16:25.020 --> 16:26.020
this.timeout

16:26.020 --> 16:28.020
是不是就可以把停滞了

16:28.020 --> 16:29.020
山动翅膀停滞了

16:29.020 --> 16:31.020
那么山动翅膀为了避免

16:31.020 --> 16:32.020
把它写完上一点吧

16:32.020 --> 16:33.020
如果说为了避免

16:33.020 --> 16:35.020
它反复的启动山动翅膀

16:35.020 --> 16:36.020
我们判断一下吧

16:36.020 --> 16:37.020
如果说你一个即时器

16:37.020 --> 16:38.020
已经有值了

16:38.020 --> 16:39.020
已经有值了

16:39.020 --> 16:40.020
我就不停止

16:40.020 --> 16:41.020
我就什么都不做

16:41.020 --> 16:42.020
没有值的情况下

16:42.020 --> 16:43.020
我在给它复值

16:43.020 --> 16:44.020
你停止过后自然没值了

16:44.020 --> 16:45.020
下一次再开始

16:45.020 --> 16:46.020
我就可以山动了

16:46.020 --> 16:47.020
对不对

16:47.020 --> 16:48.020
那么现在关键是

16:48.020 --> 16:50.020
问题是仍然看不到效果

16:50.020 --> 16:51.020
为什么呢

16:51.020 --> 16:52.020
因为在渲染的时候

16:52.020 --> 16:54.020
我们用的是负累的渲染逻辑

16:54.020 --> 16:55.020
负累的根本就不知道

16:55.020 --> 16:56.020
负累的渲染逻辑里面

16:56.020 --> 16:57.020
只有这些东西

16:57.020 --> 16:58.020
它没有翅膀这个东西

16:58.020 --> 16:59.020
概念

16:59.020 --> 17:00.020
因此我们这里是不是在

17:00.020 --> 17:02.020
重写负累的Render方法

17:02.020 --> 17:03.020
对不对

17:03.020 --> 17:04.020
有相同的逻辑

17:04.020 --> 17:05.020
我们就用

17:05.020 --> 17:06.020
用了之后有特别的逻辑

17:06.020 --> 17:07.020
我们就写

17:07.020 --> 17:08.020
这就是整个面向

17:08.020 --> 17:10.020
对象的开放的过程

17:10.020 --> 17:12.020
重用负累逻辑

17:12.020 --> 17:14.020
负累渲染逻辑

17:14.020 --> 17:15.020
只不过有件

17:15.020 --> 17:16.020
额外的事情我要做

17:16.020 --> 17:17.020
什么事情呢

17:17.020 --> 17:19.020
就是翅膀

17:19.020 --> 17:21.020
this.do

17:21.020 --> 17:24.020
classlist

17:24.020 --> 17:26.020
它要不要添

17:26.020 --> 17:28.020
要不要添加一个

17:28.020 --> 17:29.020
或者说classname

17:29.020 --> 17:31.020
classname等于什么呢

17:31.020 --> 17:32.020
等于

17:32.020 --> 17:34.020
bird

17:34.020 --> 17:35.020
它首先是一只鸟

17:35.020 --> 17:36.020
然后有个翅膀

17:36.020 --> 17:37.020
swin

17:37.020 --> 17:38.020
我们当时写的

17:38.020 --> 17:39.020
后面有个数字对吧

17:39.020 --> 17:40.020
第几个

17:40.020 --> 17:41.020
那么这个数字

17:41.020 --> 17:42.020
是不是跟这个对应的

17:42.020 --> 17:43.020
这个数字放这

17:43.020 --> 17:44.020
数字就放这

17:44.020 --> 17:46.020
swin standards

17:46.020 --> 17:47.020
对吧

17:47.020 --> 17:49.020
你看一下这个逻辑

17:49.020 --> 17:51.020
由于小鸟

17:51.020 --> 17:53.020
它有自己要山洞翅膀这件事

17:53.020 --> 17:54.020
负累是没有做的

17:54.020 --> 17:56.020
所以说得小鸟自己来做

17:56.020 --> 17:57.020
那么于是呢

17:57.020 --> 17:58.020
我就做了这么一个功能

17:58.020 --> 18:00.020
小鸟有个翅膀状态

18:00.020 --> 18:01.020
有个计时器

18:01.020 --> 18:02.020
不断的编嘛对吧

18:02.020 --> 18:03.020
每隔一段时间呢

18:03.020 --> 18:04.020
启动这个计时器

18:04.020 --> 18:05.020
每隔一段时间

18:05.020 --> 18:06.020
那个状态编一下

18:06.020 --> 18:08.020
然后重新渲染

18:08.020 --> 18:09.020
但是由于这个渲染

18:09.020 --> 18:10.020
是负累提供的

18:10.020 --> 18:11.020
负累它提供的是

18:11.020 --> 18:12.020
通用逻辑

18:12.020 --> 18:13.020
它并没有提供

18:13.020 --> 18:14.020
这个特别的逻辑

18:14.020 --> 18:15.020
因此我们重新

18:15.020 --> 18:16.020
负累的Render方法

18:16.020 --> 18:17.020
那么就是

18:17.020 --> 18:19.020
负盖掉负累的Render方法

18:19.020 --> 18:20.020
重用负累的逻辑

18:20.020 --> 18:21.020
然后呢

18:21.020 --> 18:22.020
加一些额外的事情

18:22.020 --> 18:23.020
你看

18:23.020 --> 18:24.020
基本上是没有什么

18:24.020 --> 18:25.020
重复代码的

18:25.020 --> 18:26.020
都是仅仅到

18:26.020 --> 18:27.020
只去关心自己

18:27.020 --> 18:28.020
特别的事情

18:28.020 --> 18:29.020
好来吧

18:29.020 --> 18:30.020
我们来启动

18:30.020 --> 18:31.020
小鸟山洞翅膀

18:31.020 --> 18:33.020
来吧

18:33.020 --> 18:34.020
这边

18:34.020 --> 18:35.020
Bird

18:35.020 --> 18:37.020
Start Swing

18:37.020 --> 18:38.020
你看

18:38.020 --> 18:39.020
这翅膀不叫山吗

18:39.020 --> 18:40.020
挺可爱的对吧

18:40.020 --> 18:41.020
挺可爱的

18:41.020 --> 18:42.020
那么这里呢

18:42.020 --> 18:43.020
如果说你觉得

18:43.020 --> 18:44.020
它山洞翅膀太慢了

18:44.020 --> 18:45.020
200毫秒

18:45.020 --> 18:46.020
200毫秒

18:46.020 --> 18:47.020
差不多了

18:47.020 --> 18:49.650
你看

18:49.650 --> 18:50.650
不叫山吗

18:50.650 --> 18:51.650
不行的山

18:51.650 --> 18:52.650
对吧

18:52.650 --> 18:53.650
好

18:53.650 --> 18:54.650
那么如果说有些人

18:54.650 --> 18:55.650
不想山了

18:55.650 --> 18:56.650
让它想让它停止

18:56.650 --> 18:57.650
比方有些站停的时候

18:57.650 --> 18:58.650
让它停止

18:58.650 --> 18:59.650
你看

18:59.650 --> 19:00.650
它就不山了

19:00.650 --> 19:01.650
对不对

19:01.650 --> 19:02.650
这就是小鸟

19:02.650 --> 19:03.650
是不是搞定了

19:03.650 --> 19:04.650
对吧

19:04.650 --> 19:05.650
小鸟就搞定了

19:05.650 --> 19:06.650
好好去理一下这个逻辑

19:06.650 --> 19:09.650
好好去梳理一下

19:09.650 --> 19:10.650
好

19:10.650 --> 19:11.650
小鸟搞定了

19:11.650 --> 19:12.650
那么大家可以

19:12.650 --> 19:13.650
执行搞定一下

19:13.650 --> 19:14.650
看能不能实现

19:14.650 --> 19:15.650
猪子呢

19:15.650 --> 19:16.650
猪子这一块

19:16.650 --> 19:17.650
还比较特别

19:17.650 --> 19:18.650
还比较特别

19:18.650 --> 19:19.650
大家下期

19:19.650 --> 19:20.650
会想猪子

19:20.650 --> 19:21.650
怎么实现

19:21.650 --> 19:22.650
我们下期会来讲

