WEBVTT

00:00.500 --> 00:02.900
这就可能我给大家看个好玩的东西

00:02.900 --> 00:05.260
我给大家取名叫做偷懒的

00:05.260 --> 00:06.620
我都不用笔记了

00:06.620 --> 00:08.820
偷懒的就是构造寒树

00:08.820 --> 00:10.020
这啥意思呢

00:10.020 --> 00:15.460
大家写这个内写构造寒树或者是ES6的内的时候

00:15.460 --> 00:18.500
有没有发现有个地方特别恶心

00:18.500 --> 00:20.220
来写一下吧

00:20.220 --> 00:22.620
比方说我们写个内

00:22.620 --> 00:23.700
class

00:23.700 --> 00:24.580
由这

00:24.580 --> 00:25.260
写个内

00:25.260 --> 00:26.580
用户有哪些属性呢

00:26.580 --> 00:27.860
用户有用户名

00:27.860 --> 00:29.100
用户什么

00:29.220 --> 00:30.460
用户那个

00:30.460 --> 00:31.700
first name not so name

00:31.700 --> 00:32.260
对吧

00:32.260 --> 00:32.540
OK

00:32.540 --> 00:34.620
我们就用这我们写个构造寒树

00:34.620 --> 00:36.900
那么传递一个什么 first name

00:36.900 --> 00:39.620
传递一个 not so name

00:39.620 --> 00:41.300
然后再传递一个什么呢

00:41.300 --> 00:42.620
再传递一个 age

00:42.620 --> 00:43.300
对吧

00:43.300 --> 00:45.340
再传递一个 age

00:45.340 --> 00:47.020
那么我们传递这么一些东西

00:47.020 --> 00:47.820
对不对

00:47.820 --> 00:48.740
好 OK

00:48.740 --> 00:51.020
那么我们这里传递过来了之后呢

00:51.020 --> 00:52.820
我们这里是不是要完成复制

00:52.820 --> 00:55.420
this first name等于什么 first name

00:55.420 --> 00:56.780
我说的就是这个意思

00:56.780 --> 00:58.580
额不而行的这个

00:58.620 --> 01:00.100
每次要写这个东西

01:00.100 --> 01:01.540
是不是挺而而新的

01:01.540 --> 01:02.780
但是没办法呀

01:02.780 --> 01:04.460
你这是构造寒树啊

01:04.460 --> 01:04.980
这个东西

01:04.980 --> 01:07.460
你能影响构造寒树的功能吗

01:07.460 --> 01:09.340
你说我做一个新的构造寒树出来

01:09.340 --> 01:11.100
还能够自动帮我们复制

01:11.100 --> 01:12.460
把参数值付进去

01:12.460 --> 01:13.220
你能做出来吗

01:13.220 --> 01:15.060
以前是做不出来的

01:15.060 --> 01:15.620
但是呢

01:15.620 --> 01:16.180
现在呢

01:16.180 --> 01:17.060
有了代理之后呢

01:17.060 --> 01:17.940
就可以做了

01:17.940 --> 01:18.980
因为你还记得吗

01:18.980 --> 01:22.220
反射里面有一个API叫做construct

01:22.220 --> 01:23.460
反射里面

01:23.460 --> 01:25.220
是不是有一个API叫做construct

01:25.220 --> 01:25.700
对吧

01:25.700 --> 01:27.180
那么它就代表的是什么

01:27.220 --> 01:28.780
调用构造寒树的功能

01:28.780 --> 01:30.220
那么这个既然反射里面有

01:30.220 --> 01:31.940
那么代理就可以重写

01:31.940 --> 01:32.420
因此呢

01:32.420 --> 01:34.660
我们可以把它做成一个代理

01:34.660 --> 01:36.820
把把这个把这个内变成

01:36.820 --> 01:38.500
给它写个代理出来

01:38.500 --> 01:40.020
比方说咱们举个例子

01:40.020 --> 01:40.900
我们写个寒树

01:42.780 --> 01:44.660
class proxy

01:44.660 --> 01:46.260
表示内代理啊

01:46.260 --> 01:47.940
或者叫做constructor

01:47.940 --> 01:49.140
constructor

01:49.140 --> 01:49.860
proxy

01:49.860 --> 01:51.500
专门来代理构造寒树

01:51.500 --> 01:54.100
专门来帮你出去做这种恶心的事情

01:54.100 --> 01:56.060
那么这个怎么写呢

01:56.060 --> 01:58.300
你给我传一个内进来

01:58.300 --> 01:58.940
class

02:00.860 --> 02:01.780
传一个内进来

02:01.780 --> 02:02.460
第二个参数

02:02.460 --> 02:02.940
第二个参数呢

02:02.940 --> 02:03.420
不要了

02:03.420 --> 02:03.780
不要了

02:06.020 --> 02:06.860
传一个内进来就行了

02:07.980 --> 02:08.220
好

02:08.220 --> 02:09.060
那么接下来呢

02:09.060 --> 02:09.980
我这里怎么做呢

02:09.980 --> 02:10.620
你看着

02:10.620 --> 02:12.180
因为内本身就是一个寒树

02:12.180 --> 02:13.260
寒树也是对象

02:13.260 --> 02:14.900
对象就可以代理

02:14.900 --> 02:16.300
所以说我们这里干嘛呢

02:16.300 --> 02:18.220
去new一个proxy

02:18.220 --> 02:19.580
new个proxy

02:19.580 --> 02:21.820
目标对象就是你给我的class

02:21.820 --> 02:24.180
我把你给我的内来进行代理

02:24.180 --> 02:25.180
好代理过后呢

02:25.220 --> 02:27.100
我们第二个参数传配置

02:27.100 --> 02:29.020
来重启它的底层实现

02:29.020 --> 02:30.340
你看我怎么重写啊

02:30.340 --> 02:31.660
就特别有意思

02:31.660 --> 02:32.300
我们这里呢

02:32.300 --> 02:34.700
把代理直接返回就完成了

02:34.700 --> 02:35.860
重启它的底层实现

02:35.860 --> 02:37.820
它其中一个实现是不是constructor

02:37.820 --> 02:38.540
对吧

02:38.540 --> 02:39.500
是重写这个

02:39.500 --> 02:40.980
那么我们之前那个constructor里面

02:40.980 --> 02:42.780
打起参数目标对象

02:42.780 --> 02:44.700
还有什么argument list

02:44.700 --> 02:45.340
对吧

02:45.340 --> 02:46.060
OK

02:46.060 --> 02:46.660
重写这个

02:48.380 --> 02:50.180
那么这里边我们干嘛呢

02:50.180 --> 02:51.220
这里边

02:51.220 --> 02:52.740
这里边我们是不是

02:52.740 --> 02:54.420
就是返回

02:54.460 --> 02:55.580
如果说我们啥都不做的话

02:55.580 --> 02:56.460
就是reflect

02:56.460 --> 02:57.420
什么constructor

02:57.420 --> 02:57.780
对吧

02:57.780 --> 03:00.180
掉了底层实现就完事了

03:00.180 --> 03:00.740
啥都没做

03:00.740 --> 03:02.300
就掉了底层实现就完事了

03:02.300 --> 03:03.980
把argument list

03:03.980 --> 03:06.460
无非我前面给你输出一句话

03:06.460 --> 03:09.660
勾兆函数被雕用了

03:09.660 --> 03:12.380
你看着就特别有意思的来了

03:12.380 --> 03:13.740
我就创了个代理

03:13.740 --> 03:14.740
那么返回的是个代理

03:14.740 --> 03:15.340
对吧

03:15.340 --> 03:15.620
好

03:15.620 --> 03:17.700
接下来我们来做这么一件事

03:17.700 --> 03:19.540
我们使用这个函数constructor

03:19.540 --> 03:20.220
proxy

03:20.220 --> 03:22.060
我们把这个user传进去

03:22.060 --> 03:23.300
是不是传了个内进去

03:23.300 --> 03:24.020
传了个内进去

03:24.020 --> 03:25.060
他给我们什么

03:25.060 --> 03:26.700
内的代理

03:26.700 --> 03:29.380
他给我们那个userproxy

03:29.380 --> 03:31.300
给我们的内的代理

03:31.300 --> 03:32.940
那么之后我们创建用户对象

03:32.940 --> 03:35.700
我们可以使用newuserproxy

03:35.700 --> 03:36.860
你看我们是不是可以通过这种方式

03:36.860 --> 03:38.820
在创建那个什么

03:38.820 --> 03:39.740
勾兆函数

03:39.740 --> 03:40.380
对不对

03:40.380 --> 03:42.100
好一保存你看一下

03:42.100 --> 03:43.900
一保存

03:43.900 --> 03:47.390
我怎么没运行

03:47.390 --> 03:48.430
首先我们来看一下

03:48.430 --> 03:50.350
它有没有运行我们的就是

03:50.350 --> 03:51.710
重写的方法

03:51.710 --> 03:53.470
是不是勾兆函数被雕用了

03:53.470 --> 03:54.030
说明啥

03:54.030 --> 03:54.990
说明这个方法被雕用了

03:55.710 --> 03:56.190
然后呢

03:56.190 --> 03:57.790
还有怎么样呢

03:57.790 --> 03:59.550
还有我们会得到一个结果

03:59.550 --> 03:59.910
对吧

03:59.910 --> 04:02.070
obj

04:02.070 --> 04:02.510
obj

04:02.510 --> 04:04.150
看一下是不是能得到一个结果

04:04.150 --> 04:05.150
对吧

04:05.150 --> 04:06.230
是不是能得到一个结果

04:06.230 --> 04:07.070
为什么能得到结果

04:07.070 --> 04:09.550
因为它这里返回的是这个东西

04:09.550 --> 04:10.590
返回的是这个东西

04:10.590 --> 04:12.790
而这个东西它实际上就运行的是

04:12.790 --> 04:13.870
真正的勾兆函数

04:13.870 --> 04:14.070
对吧

04:14.070 --> 04:15.270
雕用底层实现

04:15.270 --> 04:17.150
运行的是真正的勾兆函数

04:17.150 --> 04:18.830
没了意思吗

04:18.830 --> 04:20.270
相当于是这里是六了一个什么

04:20.270 --> 04:21.350
六了一个class

04:21.350 --> 04:22.670
六了一个user

04:22.670 --> 04:24.190
雕用真正的底层函数

04:24.190 --> 04:25.630
那么现在我们要干干嘛呢

04:25.630 --> 04:27.990
我们要减化这个操作

04:27.990 --> 04:29.670
也就是说我的一共在这个勾兆函数里面

04:29.670 --> 04:30.550
啥都不用写

04:30.550 --> 04:32.150
啥都不用写

04:32.150 --> 04:34.470
如果说你给我传计的一个数据

04:34.470 --> 04:35.430
传计的一些数据

04:35.430 --> 04:39.550
比方说外界

04:39.550 --> 04:40.830
first name

04:40.830 --> 04:42.110
比方说圆

04:42.110 --> 04:44.150
圆

04:44.150 --> 04:47.870
那是name

04:47.870 --> 04:50.030
进

04:50.030 --> 04:51.070
然后连零

04:51.070 --> 04:51.630
是吧

04:51.630 --> 04:52.590
要传一下这个

04:52.630 --> 04:54.110
那么我们会自动的给他

04:54.110 --> 04:54.710
first name

04:54.710 --> 04:55.350
last name

04:55.350 --> 04:56.750
和A级复制

04:56.750 --> 04:57.070
对吧

04:57.070 --> 04:58.630
我要实现这么一个效果

04:58.630 --> 04:59.710
自动的给他first name

04:59.710 --> 05:00.270
last name

05:00.270 --> 05:01.550
A级复制

05:01.550 --> 05:01.710
好

05:01.710 --> 05:03.870
那么这里怎么写呢

05:03.870 --> 05:04.910
这怎么写呢

05:04.910 --> 05:05.350
这里呢

05:05.350 --> 05:07.030
如果说你简单的写法的话

05:07.030 --> 05:08.350
因为这个argumented list

05:08.350 --> 05:08.990
对吧

05:08.990 --> 05:09.830
argumented list

05:09.830 --> 05:11.510
是不是这里面有参数列表

05:11.510 --> 05:13.830
那么这里你会获取它

05:13.830 --> 05:15.390
你会获取通过这个东西

05:15.390 --> 05:16.710
能够获取这些参数

05:16.710 --> 05:17.830
我们来看一下

05:17.830 --> 05:20.870
是不是能够获取这些参数

05:20.870 --> 05:21.750
你看

05:21.790 --> 05:23.470
是不是能够获取这些参数

05:23.470 --> 05:24.070
对吧

05:24.070 --> 05:24.710
一个数组嘛

05:24.710 --> 05:25.550
对不对

05:25.550 --> 05:26.150
好

05:26.150 --> 05:28.070
那么接下来呢

05:28.070 --> 05:30.350
我们看一下怎么来写

05:30.350 --> 05:31.230
接下来

05:31.230 --> 05:32.590
我们只需要告诉他

05:32.590 --> 05:35.870
每一个属性的名字就行了

05:35.870 --> 05:36.310
你看

05:36.310 --> 05:37.230
我们在代理的时候

05:37.230 --> 05:38.030
我们只需要告诉他

05:38.030 --> 05:39.270
每一个属性的名字

05:39.270 --> 05:40.230
比方我们这里可以通过

05:40.230 --> 05:40.990
怎么来告诉呢

05:40.990 --> 05:43.350
可以通过一些生命参数来告诉

05:43.350 --> 05:44.550
属性的名字

05:44.550 --> 05:46.590
names

05:46.590 --> 05:48.870
就是probnames

05:48.870 --> 05:49.430
属性的名字

05:49.430 --> 05:50.230
到时候怎么告诉他呢

05:50.230 --> 05:51.110
我这样告诉

05:51.110 --> 05:54.470
第一个属性的名字叫做first name

05:54.470 --> 05:56.470
后面的属性的名字叫做

05:56.470 --> 05:59.250
那生命

05:59.250 --> 06:00.610
然后再一个属性的名字叫做

06:00.610 --> 06:01.410
a几

06:01.410 --> 06:01.610
对吧

06:01.610 --> 06:02.570
我们可以通过这种方式来

06:02.570 --> 06:04.010
告诉他属性的名字

06:04.010 --> 06:04.330
ok

06:04.330 --> 06:05.690
那这样子一来的话

06:05.690 --> 06:06.770
那么这里是不是可以通过

06:06.770 --> 06:07.290
这个数组来

06:07.290 --> 06:08.650
收到这个属性名字

06:08.650 --> 06:09.530
来吧

06:09.530 --> 06:10.410
我们要干嘛

06:10.410 --> 06:12.170
我们就只需要去循环

06:12.170 --> 06:14.130
这个属性的名字

06:14.130 --> 06:17.410
names for each

06:17.410 --> 06:18.890
那么这里呢

06:18.890 --> 06:19.290
这里呢

06:19.290 --> 06:22.330
我们写上属性的名字

06:22.370 --> 06:24.730
接下来我们在这里做什么事情呢

06:24.730 --> 06:25.770
做什么事情

06:25.770 --> 06:29.130
我们只需要

06:29.130 --> 06:31.250
往z上面

06:31.250 --> 06:32.250
是不是这里z

06:32.250 --> 06:33.410
z就表示当前对象嘛

06:33.410 --> 06:34.410
对不对

06:34.410 --> 06:37.170
往z上面去放一些属性就完事了

06:37.170 --> 06:38.330
z name

06:38.330 --> 06:39.010
等于什么呢

06:39.010 --> 06:42.410
等于参数值

06:42.410 --> 06:43.650
我们这里加个下标

06:43.650 --> 06:47.330
因为它的下标跟那边是对应的

06:47.330 --> 06:48.730
就等于这个参数

06:48.730 --> 06:50.330
参数列表里面

06:50.330 --> 06:52.370
因为属性列表跟那个属性的名字列表

06:52.370 --> 06:55.250
跟参数列表是一样的

06:55.250 --> 06:56.890
是不是这样子就完事了

06:56.890 --> 06:58.090
对不对

06:58.090 --> 07:00.450
好像我们看一下

07:00.450 --> 07:01.450
这里没加进去

07:01.450 --> 07:02.170
这里z

07:02.170 --> 07:04.610
我看一下z

07:04.610 --> 07:05.490
看一下z

07:05.490 --> 07:06.650
z对不对

07:06.650 --> 07:07.530
construct

07:07.530 --> 07:09.250
这个z不太对

07:09.250 --> 07:11.170
这个z还不太对

07:11.170 --> 07:18.620
我们看一下

07:18.620 --> 07:21.220
这里

07:21.220 --> 07:23.180
这里不应该使用z

07:23.180 --> 07:24.180
在这里不应该使用z

07:24.180 --> 07:26.100
因为它这个构造函数调用之后

07:26.100 --> 07:27.380
是不是返回个对象

07:27.380 --> 07:29.180
返回个对象

07:29.180 --> 07:31.700
我们再给对象加上这些属性

07:31.700 --> 07:33.300
给对象加上这些属性

07:33.300 --> 07:35.380
我们可以使用这种模式

07:35.380 --> 07:36.660
看一下吧

07:36.660 --> 07:38.700
所以给对象加上属性了

07:38.700 --> 07:39.540
对吧

07:39.540 --> 07:41.220
给对象加上属性了

07:41.220 --> 07:41.540
好

07:41.540 --> 07:42.660
那么咱们来看一下

07:42.660 --> 07:46.380
当然返回OBG

07:46.380 --> 07:48.300
这里用OBG

07:48.300 --> 07:49.420
保存

07:49.420 --> 07:49.860
你看

07:49.860 --> 07:51.620
这个油热里面是不是有三个属性了

07:51.620 --> 07:52.740
自动给它加上了

07:52.740 --> 07:54.900
你看我油热的内里面啥都没写

07:54.940 --> 07:56.100
我们通过代理

07:56.100 --> 07:57.660
告诉它我有哪些属性

07:57.660 --> 07:59.020
我有这么三个属性

07:59.020 --> 08:00.860
这三个属性肯定对应这三个参数

08:00.860 --> 08:02.060
对应我的参数

08:02.060 --> 08:04.180
那么我就可以少写不少的代码

08:04.180 --> 08:06.180
你看是不是偷懒的做法

08:06.180 --> 08:07.460
那么这里我们在

08:07.460 --> 08:08.900
因为我们每一次用它

08:08.900 --> 08:11.060
来创建当成构造函数来使用的时候

08:11.060 --> 08:12.700
就会被它来补货到

08:12.700 --> 08:13.460
它一补货的话

08:13.460 --> 08:14.100
我干嘛呢

08:14.100 --> 08:16.180
我现在真正的去创建一个对象

08:16.180 --> 08:18.820
然后通过原来的构造函数

08:18.820 --> 08:19.460
去创建一个对象

08:19.460 --> 08:20.420
原来构造函数为空

08:20.420 --> 08:21.140
对吧

08:21.140 --> 08:22.980
然后我再把属性给它加上

08:22.980 --> 08:24.580
通过里给我传的属性名字

08:24.620 --> 08:26.380
对应到它的属性值

08:26.380 --> 08:27.780
通过参数对应到属性值

08:27.780 --> 08:29.820
把它的属性值给它加上

08:29.820 --> 08:31.060
那么就偷懒了

08:31.060 --> 08:32.260
而且它是个通用的

08:32.260 --> 08:34.140
你不要小看只是这个场景

08:34.140 --> 08:34.820
它是通用的

08:34.820 --> 08:36.700
我们再来一个

08:36.700 --> 08:38.060
再来一个比方说

08:38.060 --> 08:39.220
我们可以用这种方式

08:41.420 --> 08:42.580
我们写上一个

08:44.140 --> 08:45.260
再来一个啥呢

08:45.260 --> 08:47.980
再来一个就是游戏角色

08:47.980 --> 08:49.620
游戏角色

08:49.620 --> 08:50.260
怪物

08:50.260 --> 08:51.540
monster

08:51.540 --> 08:52.420
monster

08:52.420 --> 08:53.420
proxy

08:53.420 --> 08:54.260
等于什么呢

08:54.260 --> 08:57.820
等于我们用一个construct

08:57.820 --> 08:59.020
proxy

08:59.020 --> 08:59.860
去

08:59.860 --> 09:01.300
第一个就是class

09:01.300 --> 09:02.900
给它传一个class进去

09:02.900 --> 09:04.420
一个内进去

09:04.420 --> 09:05.540
一个内进去

09:05.540 --> 09:06.340
第二个参数

09:06.340 --> 09:07.140
传属性的名字

09:07.140 --> 09:08.380
有哪些属性呢

09:08.380 --> 09:10.580
属性的就是有攻击力

09:10.580 --> 09:12.220
attack

09:12.220 --> 09:13.540
防御力

09:13.540 --> 09:15.220
defence

09:15.220 --> 09:16.020
血量

09:16.020 --> 09:17.180
hp

09:17.180 --> 09:19.940
然后还有什么呢

09:19.940 --> 09:21.020
还有暴击率

09:21.020 --> 09:22.180
read

09:22.180 --> 09:23.300
还有什么呢

09:23.300 --> 09:24.900
还有就是

09:25.900 --> 09:26.700
名字

09:26.700 --> 09:28.580
名字

09:28.580 --> 09:29.580
就行了

09:29.580 --> 09:29.980
就行了

09:29.980 --> 09:31.180
一共有五个属性

09:31.180 --> 09:32.180
以前我们要写的话

09:32.180 --> 09:32.860
是不是这个内

09:32.860 --> 09:33.700
这个内的

09:33.700 --> 09:34.580
反

09:34.580 --> 09:35.940
我写出来吧

09:35.940 --> 09:38.100
写出来好一夜一点

09:38.100 --> 09:38.500
这个内呢

09:38.500 --> 09:39.620
我们是不是要写很多代码

09:39.620 --> 09:40.140
对吧

09:40.140 --> 09:40.740
monster

09:40.740 --> 09:41.500
现在我这个内里面

09:41.500 --> 09:42.860
一句代码都不就写了

09:42.860 --> 09:44.540
monster给他就行了

09:44.540 --> 09:45.500
monster给他就行了

09:45.500 --> 09:47.180
那么我们后边去用这个内的时候

09:47.180 --> 09:49.340
溜一个monster

09:49.340 --> 09:51.220
然后我们把属性卡传进去

09:51.220 --> 09:51.900
攻击力

09:51.900 --> 09:53.500
防御力

09:53.500 --> 09:54.180
20

09:54.180 --> 09:55.380
生命值100

09:55.380 --> 09:56.300
暴击率

09:56.300 --> 09:57.500
30

09:57.500 --> 09:58.300
名字

09:58.300 --> 09:59.620
怪物

09:59.620 --> 10:00.860
我们输出这个m

10:00.860 --> 10:03.980
他就非常生气的把属性给我加上了

10:03.980 --> 10:04.540
为什么呢

10:04.540 --> 10:07.020
因为我们现在可以干预

10:07.020 --> 10:08.140
要怎么回事

10:08.140 --> 10:09.620
我们溜这个

10:09.620 --> 10:11.260
溜这个

10:11.260 --> 10:13.380
你看是不是把生气的把属性加上了

10:13.380 --> 10:13.820
对吧

10:13.820 --> 10:16.740
因为我们现在可以干预他的实现

10:16.740 --> 10:18.380
干预这个构造函数的实现

10:18.380 --> 10:19.380
没什么意思吗

10:19.380 --> 10:20.380
以前是不行的

10:20.380 --> 10:22.620
现在我们可以干预了

10:22.620 --> 10:24.900
这就是这么一个例子

10:24.900 --> 10:27.460
给偷烂

10:27.460 --> 10:29.420
当然这个东西不是一定使用的

10:29.420 --> 10:30.220
因为有的时候

10:30.220 --> 10:32.140
构造函数里面可能一些场景比较特殊

10:32.140 --> 10:34.540
他还根据情况夹一些属性

10:34.540 --> 10:35.660
对吧

10:35.660 --> 10:36.660
可能比较特殊

10:36.660 --> 10:38.260
不是一定的要用这种场景的

10:38.260 --> 10:39.340
我就跟他说一下

10:39.340 --> 10:41.020
就说现在我们有了代理之后

10:41.020 --> 10:43.180
他可以做更多的事情了

10:43.180 --> 10:43.300
好

10:43.300 --> 10:44.060
是这么一个例子

