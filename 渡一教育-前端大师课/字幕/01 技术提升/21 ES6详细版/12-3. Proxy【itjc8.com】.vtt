WEBVTT

00:00.620 --> 00:02.620
学习了反射之后

00:02.620 --> 00:04.620
学习到反射 它为什么出现

00:04.620 --> 00:06.620
它为什么搞出来这么多API

00:06.620 --> 00:08.620
学习到这个东西之后

00:08.620 --> 00:10.620
我们再来看代理

00:10.620 --> 00:12.620
proxy 就是代理

00:12.620 --> 00:14.620
它就会变得非常非常简单的

00:14.620 --> 00:16.620
简单的令人发指

00:16.620 --> 00:18.620
以后你听一下就明白了

00:18.620 --> 00:20.620
马上就明白了

00:20.620 --> 00:22.620
代理是怎么意思呢

00:22.620 --> 00:24.620
其实我们现实生活中也有代理

00:24.620 --> 00:26.620
比如说不知道大家有没有打过官司

00:26.620 --> 00:28.620
就是有没有去过法院

00:28.620 --> 00:30.620
律师其实就是你的代理人

00:30.620 --> 00:32.620
根据我的代理律师

00:32.620 --> 00:34.620
他不要跟我谈

00:34.620 --> 00:36.620
估计他也没有去过

00:36.620 --> 00:38.620
因为学生也没有去过法院

00:38.620 --> 00:40.620
实际上我也没去过

00:40.620 --> 00:42.620
就是这个意思

00:42.620 --> 00:44.620
我是当事人

00:44.620 --> 00:46.620
律师是我的代理人

00:46.620 --> 00:48.620
你不要直接跟我谈

00:48.620 --> 00:50.620
你跟我代理人去谈

00:50.620 --> 00:52.620
他有什么事情他自然会找我

00:52.620 --> 00:54.620
代理就是这么一个意思

00:54.620 --> 00:56.620
代理就是在核心

00:56.620 --> 00:58.620
目标对象外面掏了一层

00:58.620 --> 01:00.620
如果说我们用图来画的话

01:00.620 --> 01:02.620
就是这样子给他画个图

01:02.620 --> 01:04.620
这个图我都不用把它保留下来

01:04.620 --> 01:06.620
一看就明白了

01:06.620 --> 01:07.620
就是说我们的

01:07.620 --> 01:09.620
这是我们的目标对象

01:09.620 --> 01:11.620
目标

01:11.620 --> 01:13.620
比方说就是我们打官司的人

01:13.620 --> 01:15.620
自己人 就是我们自己

01:15.620 --> 01:18.620
然后代理在外面掏了薄薄的一层

01:19.620 --> 01:21.620
掏了一层

01:21.620 --> 01:23.620
不填充

01:23.620 --> 01:25.620
外面就是一个代理

01:25.620 --> 01:28.620
外面就是个代理

01:28.620 --> 01:32.000
变一下颜色

01:32.000 --> 01:33.000
红色

01:33.000 --> 01:34.000
外面就代理

01:34.000 --> 01:35.000
就是我们

01:35.000 --> 01:37.000
要想跟目标对象打交道

01:37.000 --> 01:39.000
必须要通过代理

01:39.000 --> 01:41.000
你不要直接跟目标对象打交道

01:41.000 --> 01:42.000
要通过代理

01:42.000 --> 01:43.000
就这么个意思

01:43.000 --> 01:45.000
代理有什么事情的代理

01:45.000 --> 01:46.000
去找目标

01:46.000 --> 01:48.000
就是我们外面掏了一层

01:48.000 --> 01:49.000
我们要交互

01:49.000 --> 01:51.000
是跟代理进行交互

01:51.000 --> 01:53.000
就这么简单

01:53.000 --> 01:55.000
代理可能会给我们结果

01:55.000 --> 01:56.000
也是代理给我们的结果

01:56.000 --> 01:58.000
那么至于代理

01:58.000 --> 02:00.000
代理就是我们的律师

02:00.000 --> 02:02.000
怎么去跟我们之间谈的

02:02.000 --> 02:03.000
跟我们之间交互的

02:03.000 --> 02:05.000
你外面的人别管

02:05.000 --> 02:07.000
反正你们只负责跟律师谈

02:07.000 --> 02:08.000
就代理人谈

02:08.000 --> 02:09.000
就这么个意思

02:09.000 --> 02:11.000
ES6呢

02:11.000 --> 02:13.000
其实它很大程度上推出反射

02:13.000 --> 02:14.000
有一个

02:14.000 --> 02:16.000
除了我们之前上级合说的原因之外

02:16.000 --> 02:18.000
其中有一个 还有一个原因就是

02:18.000 --> 02:19.000
为了实现代理

02:19.000 --> 02:21.000
因为它要实现代理的时候

02:21.000 --> 02:22.000
它就要思考这么一个问题

02:22.000 --> 02:24.000
代理既然要负责

02:24.000 --> 02:26.000
跟外面的交互

02:26.000 --> 02:27.000
比方说它这里是个对象

02:27.000 --> 02:29.000
我们的目标对象

02:29.000 --> 02:32.000
比方说我们以后要改对象的属性值

02:32.000 --> 02:35.000
我们要读取对象的属性值

02:35.000 --> 02:37.000
那么要通过代理去搞定

02:37.000 --> 02:38.000
在某些场景下面

02:38.000 --> 02:40.000
我们需要 不是所有的场景

02:40.000 --> 02:41.000
在某些场景下面

02:41.000 --> 02:42.000
我们需要外面掏一个代理

02:42.000 --> 02:44.000
你要读取我的属性值

02:44.000 --> 02:46.000
问代理 问代理要

02:46.000 --> 02:49.000
你要想给我们的属性负责

02:49.000 --> 02:51.000
找代理 不要直接找我

02:51.000 --> 02:52.000
是这么个意思

02:52.000 --> 02:55.000
那么代理就必须要提供一种方式

02:55.000 --> 02:57.000
能够修改底层实现

02:57.000 --> 02:59.000
你看属性的读取和负责

02:59.000 --> 03:01.000
是不是底层实现

03:01.000 --> 03:03.000
它要能够修改底层实现

03:03.000 --> 03:04.000
于是我们代理的

03:04.000 --> 03:07.000
在我们的ES6里面有个功能

03:07.000 --> 03:10.000
提供了修改目标

03:10.000 --> 03:15.000
修改底层实现的方式

03:15.000 --> 03:17.000
它能够把我们的目标

03:17.000 --> 03:18.000
对象的包一层

03:18.000 --> 03:21.000
然后提供修改底层实现的方式

03:21.000 --> 03:22.000
比如说给属性负责

03:22.000 --> 03:23.000
给属性取值

03:23.000 --> 03:24.000
对吧 创建构造函数

03:24.000 --> 03:26.000
用构造函数6的方式

03:26.000 --> 03:27.000
那么这些东西

03:27.000 --> 03:28.000
它都要能够修改

03:28.000 --> 03:30.000
不然的话叫什么代理呢

03:30.000 --> 03:31.000
如果跟目标对象完全一样

03:31.000 --> 03:32.000
有什么意义呢

03:32.000 --> 03:33.000
我要给属性负责

03:33.000 --> 03:34.000
它就不把属性值

03:34.000 --> 03:35.000
放到目标对象里面了

03:35.000 --> 03:36.000
我要读取属性值

03:36.000 --> 03:37.000
它就把属性值

03:37.000 --> 03:38.000
打出来给我了

03:38.000 --> 03:39.000
那有什么意义呢

03:39.000 --> 03:40.000
没有任何意义

03:40.000 --> 03:41.000
那么我们既然套了代理

03:41.000 --> 03:43.000
代理肯定有一些权利

03:43.000 --> 03:45.000
能够帮我们修改底层实现

03:45.000 --> 03:47.000
那么就这就要求

03:47.000 --> 03:49.000
它就必须要把底层实现

03:49.000 --> 03:50.000
做成API

03:50.000 --> 03:51.000
懂我这个意思吗

03:51.000 --> 03:52.000
好好评

03:52.000 --> 03:53.000
好好评一下这句话

03:53.000 --> 03:55.000
如果说它底层实现

03:55.000 --> 03:57.000
就是一个简单的负责符号

03:57.000 --> 03:59.000
我们的创建构造函数

03:59.000 --> 04:01.000
就是一个关键值6

04:01.000 --> 04:02.000
我们判断属性存不存在

04:02.000 --> 04:04.000
就是一个硬关键值

04:04.000 --> 04:06.000
它是一种特殊的魔法形式

04:06.000 --> 04:07.000
我就很难说

04:07.000 --> 04:09.000
我怎么样去修改它呢

04:09.000 --> 04:10.000
我能修改

04:10.000 --> 04:12.000
我能修改一个负责符号的意义吗

04:12.000 --> 04:13.000
修改不了吧

04:13.000 --> 04:14.000
没有这种机制

04:14.000 --> 04:15.000
这个语言层面

04:15.000 --> 04:16.000
就没有这种机制

04:16.000 --> 04:18.000
为什么要把它做成API

04:18.000 --> 04:20.000
就是因为它要去修改它

04:20.000 --> 04:22.000
因为修改一个函数是很简单的

04:22.000 --> 04:23.000
我们定一个函数

04:23.000 --> 04:24.000
覆盖它就完成了

04:24.000 --> 04:25.000
对吧

04:25.000 --> 04:27.000
这也是它为什么要用

04:27.000 --> 04:29.000
把这些东西做成反射的原因

04:29.000 --> 04:31.000
要把联合起来看

04:31.000 --> 04:32.000
它有两层原因

04:32.000 --> 04:33.000
一层是我们商劫科讲的

04:33.000 --> 04:35.000
第二呢就是为了实现代理

04:35.000 --> 04:36.000
基于这两个原因

04:36.000 --> 04:38.000
我们一会写代码就更加清楚了

04:38.000 --> 04:39.000
那么代理怎么用呢

04:39.000 --> 04:41.000
代理的特别特别简单

04:41.000 --> 04:43.000
我一下就把这个笔记

04:43.000 --> 04:44.000
两上去记完了

04:44.000 --> 04:45.000
代理怎么用呢

04:45.000 --> 04:47.000
就是六一个proxy

04:47.000 --> 04:49.000
创建一个代理

04:49.000 --> 04:50.000
创建什么

04:50.000 --> 04:52.000
创建外面的圈圈

04:52.000 --> 04:53.000
然后里边要传什么

04:53.000 --> 04:55.000
传目标对象

04:55.000 --> 04:56.000
你要代理谁

04:56.000 --> 04:57.000
代理目标对象

04:57.000 --> 04:58.000
第二个呢

04:58.000 --> 04:59.000
是handler

04:59.000 --> 05:00.000
handler是什么东西呢

05:00.000 --> 05:01.000
我们打个注释

05:04.000 --> 05:06.000
代理一个目标对象

05:06.000 --> 05:10.000
代理一个目标对象

05:10.000 --> 05:13.000
然后 target 为目标对象

05:13.000 --> 05:16.000
target 就是目标对象

05:16.000 --> 05:22.000
handler 是一个普通对象

05:22.000 --> 05:23.000
也是一个普通对象

05:23.000 --> 05:26.000
其中可以配置

05:26.000 --> 05:31.000
可以重写底层实现

05:31.000 --> 05:33.000
可以重写底层实现

05:33.000 --> 05:34.000
哪些底层实现

05:34.000 --> 05:35.000
就是我们

05:35.000 --> 05:36.000
全部是我们商劫科讲的

05:36.000 --> 05:38.000
这些东西

05:38.000 --> 05:39.000
set get applied

05:39.000 --> 05:40.000
就拿起来

05:40.000 --> 05:42.000
全部可以写

05:42.000 --> 05:43.000
全部可以重写

05:43.000 --> 05:44.000
就这么个意思

05:44.000 --> 05:45.000
而且参数都是一样的

05:45.000 --> 05:46.000
返回是什么

05:46.000 --> 05:48.000
返回肯定是代理对象

05:48.000 --> 05:51.000
返回一个代理对象

05:51.000 --> 05:52.000
就这么简单

05:52.000 --> 05:53.000
你看一下

05:53.000 --> 05:54.000
就是代理

05:54.000 --> 05:55.000
创建个代理

05:55.000 --> 05:56.000
就是创建外面的圈圈

05:56.000 --> 05:59.000
好 咱们来看一下吧

05:59.000 --> 06:00.000
好 这里呢

06:00.000 --> 06:01.000
我们test

06:01.000 --> 06:02.000
一

06:02.000 --> 06:04.890
好 这里呢

06:04.890 --> 06:05.890
我们比方说

06:05.890 --> 06:06.890
obj

06:06.890 --> 06:08.890
我怎么写到这儿了

06:08.890 --> 06:11.330
创建一个obj

06:11.330 --> 06:13.330
这是个目标对象

06:13.330 --> 06:14.330
目标对象

06:14.330 --> 06:15.330
后来我们这里呢

06:15.330 --> 06:16.330
有个两个属性

06:16.330 --> 06:17.330
a等于e

06:17.330 --> 06:18.330
b等于2

06:18.330 --> 06:19.330
有两个属性

06:19.330 --> 06:20.330
接下来呢

06:20.330 --> 06:21.330
我们为这个目标对象

06:21.330 --> 06:22.330
创建一个代理

06:22.330 --> 06:23.330
proxy

06:23.330 --> 06:24.330
new一个proxy

06:24.330 --> 06:25.330
第一个参数团杀

06:25.330 --> 06:26.330
传目标对象

06:26.330 --> 06:27.330
它的代理我们的目标

06:27.330 --> 06:28.330
第二个参数团杀

06:28.330 --> 06:29.330
传一个handler

06:29.330 --> 06:30.330
这个handler那边

06:30.330 --> 06:31.330
有啥配置

06:31.330 --> 06:32.330
我们可以啥都不写

06:32.330 --> 06:33.330
啥都不写的

06:33.330 --> 06:34.330
这个代理呢

06:34.330 --> 06:35.330
就没啥用

06:35.330 --> 06:36.330
没啥用

06:36.330 --> 06:37.330
创的代理有没有用

06:37.330 --> 06:38.330
没啥用

06:38.330 --> 06:39.330
咱们怎么来用这个代理呢

06:39.330 --> 06:40.330
因为我们以后

06:40.330 --> 06:41.330
跟这个对象打交道的话

06:41.330 --> 06:45.330
不是直接跟目标对象打交道了

06:45.330 --> 06:47.330
而是通过代理去打交道

06:47.330 --> 06:49.330
比方说我给f属性复职

06:49.330 --> 06:50.330
我要告诉我的

06:50.330 --> 06:51.330
告诉律师

06:51.330 --> 06:53.330
我想给他的s属性复职

06:53.330 --> 06:55.330
那么我这里啥都没配置

06:55.330 --> 06:56.330
那就复职呗

06:56.330 --> 06:57.330
律师干嘛呢

06:57.330 --> 06:59.330
律师就给目标对象复职了

06:59.330 --> 07:01.330
我想得到目标对象的职

07:01.330 --> 07:03.330
那就得到目标对象的职呗

07:03.330 --> 07:05.330
这个代理呢

07:05.330 --> 07:08.330
他就是拿钱干活

07:09.330 --> 07:11.330
他就这样的一个拿钱不干活

07:11.330 --> 07:12.330
他啥都没做

07:12.330 --> 07:14.330
但是至少外面包了一层了

07:14.330 --> 07:16.330
那么他能不能干活呢

07:16.330 --> 07:17.330
他可以干活

07:17.330 --> 07:19.330
他可以做哪些事呢

07:19.330 --> 07:21.330
所有的反射里面的方法

07:21.330 --> 07:23.330
反射不就是对应了底层实现吗

07:23.330 --> 07:24.330
对吧

07:24.330 --> 07:26.330
反射里面的方法全部可以重写

07:26.330 --> 07:28.330
一个都不拿全部可以重写

07:28.330 --> 07:31.330
比方说我们要重写他的set

07:31.330 --> 07:33.330
反射里面不是有个set方法吗

07:33.330 --> 07:34.330
对吧

07:34.330 --> 07:35.330
给属性复职

07:35.330 --> 07:36.330
是不是有三个参数

07:36.330 --> 07:37.330
来吧

07:37.330 --> 07:39.700
三个参数

07:39.700 --> 07:41.700
一样的一模一样的参数

07:41.700 --> 07:42.700
一模一样的格式

07:42.700 --> 07:44.700
第一个参数是目标对象

07:44.700 --> 07:47.700
你要给哪个目标对象复职

07:47.700 --> 07:49.700
目标对象对应的是啥呢

07:49.700 --> 07:52.700
对应的就是这个玩意儿

07:52.700 --> 07:54.700
你的属性名是啥

07:54.700 --> 07:56.700
两个哪个属性名复职

07:56.700 --> 07:57.700
我们输出吧

07:57.700 --> 07:58.700
输出

08:02.700 --> 08:03.700
输出一下

08:03.700 --> 08:04.700
保存

08:04.700 --> 08:05.700
你看

08:05.700 --> 08:06.700
第一个是目标对象

08:06.700 --> 08:08.700
第二个是属性名

08:08.700 --> 08:10.700
第三个就是属性值

08:10.700 --> 08:14.700
我这一句话就相当于是什么呢

08:14.700 --> 08:15.700
我告诉代理

08:15.700 --> 08:16.700
代理律师

08:16.700 --> 08:17.700
我想给当事人

08:17.700 --> 08:19.700
把一复职给当事人的属性A

08:19.700 --> 08:22.700
代理律师干活了

08:22.700 --> 08:24.700
他在这里干活

08:24.700 --> 08:25.700
你想给他

08:25.700 --> 08:27.700
你想给我们这个对象

08:27.700 --> 08:29.700
复职这个属性A

08:29.700 --> 08:31.700
复职为值为一

08:31.700 --> 08:33.700
他就干活了

08:33.700 --> 08:35.700
那到底要不要复职

08:35.700 --> 08:36.700
到底要不要复职

08:36.700 --> 08:37.700
看我自己

08:37.700 --> 08:39.700
比方说我这里把他复职为10

08:39.700 --> 08:40.700
复职为10

08:40.700 --> 08:42.700
你看这里还是不是出出了1

08:42.700 --> 08:44.700
为什么因为复职里边啥都没做

08:44.700 --> 08:47.700
那如果说我要做事情怎么做呢

08:47.700 --> 08:48.700
我要做事情

08:48.700 --> 08:49.700
那么我就可以

08:49.700 --> 08:50.700
我就告诉我

08:50.700 --> 08:52.700
你看别人想给我复职为10

08:52.700 --> 08:53.700
我当事人

08:53.700 --> 08:54.700
我觉得他也没啥意见

08:54.700 --> 08:56.700
然后我就找到我的目标对象

08:56.700 --> 08:57.700
当事人

08:57.700 --> 08:58.700
找到你这个属性

08:58.700 --> 08:59.700
对吧

08:59.700 --> 09:00.700
找到你这个属性

09:00.700 --> 09:01.700
这个属性是

09:01.700 --> 09:02.700
给他传令的是A

09:02.700 --> 09:03.700
对吧

09:03.700 --> 09:04.700
给他复职为value

09:04.700 --> 09:05.700
对不对

09:05.700 --> 09:06.700
那么这样子呢

09:06.700 --> 09:07.700
是不是输出10

09:07.700 --> 09:08.700
对吧

09:08.700 --> 09:09.700
也就是说我们

09:09.700 --> 09:10.700
是不是可以通过set来

09:10.700 --> 09:12.700
重写底层实现了

09:12.700 --> 09:13.700
那么掏了一个代理的

09:13.700 --> 09:14.700
我们不能重写

09:14.700 --> 09:15.700
我们不能重写

09:15.700 --> 09:17.700
目标对象的底层实现

09:17.700 --> 09:18.700
但是呢

09:18.700 --> 09:19.700
我们能重写代理的底层实现

09:19.700 --> 09:20.700
他为什么要这样的设计呢

09:20.700 --> 09:21.700
如果说我们直接

09:21.700 --> 09:22.700
让我们直接重写

09:22.700 --> 09:24.700
目标对象的底层实现的话

09:24.700 --> 09:26.700
容易把我们的对象

09:26.700 --> 09:27.700
搞得乱七八糟

09:27.700 --> 09:28.700
那么最好了

09:28.700 --> 09:29.700
是外面掏一个代理

09:29.700 --> 09:30.700
就是你要能改变了

09:30.700 --> 09:31.700
只有代理

09:31.700 --> 09:33.700
只有代理人去能够改变

09:33.700 --> 09:34.700
能够做额外的事情

09:34.700 --> 09:35.700
目标对象呢

09:35.700 --> 09:36.700
你是不能改的

09:36.700 --> 09:38.700
是这么个意思

09:38.700 --> 09:39.700
那么在这个反

09:39.700 --> 09:40.700
在这个就是代理里边呢

09:40.700 --> 09:41.700
你看是不是

09:41.700 --> 09:42.700
重写了这个底层实现

09:42.700 --> 09:43.700
那么这一句话呢

09:43.700 --> 09:44.700
也可以写成

09:44.700 --> 09:45.700
下面那种格式

09:45.700 --> 09:47.700
reflect

09:47.700 --> 09:48.700
第二什么

09:48.700 --> 09:50.700
set target

09:50.700 --> 09:51.700
什么

09:51.700 --> 09:52.700
property

09:52.700 --> 09:53.700
什么value

09:53.700 --> 09:54.700
所以也可以写成

09:54.700 --> 09:55.700
这种格式

09:55.700 --> 09:56.700
对吧

09:56.700 --> 09:57.700
那么

09:57.700 --> 09:58.700
其实我们在代理的时候呢

09:58.700 --> 09:59.700
往往使用的是

09:59.700 --> 10:00.700
下面那种格式

10:00.700 --> 10:01.700
为什么呢

10:01.700 --> 10:03.700
阅读上容易阅读

10:03.700 --> 10:05.700
阅读上怎么容易阅读呢

10:05.700 --> 10:06.700
你看着啊

10:06.700 --> 10:08.700
这个set 含述的参数

10:08.700 --> 10:10.700
跟他的参数是不是完全一致的

10:10.700 --> 10:11.700
因为他就是重写这个方法呀

10:11.700 --> 10:12.700
对吧

10:12.700 --> 10:13.700
就是在重写

10:13.700 --> 10:14.700
是不是完全一致的

10:14.700 --> 10:15.700
那么这个怎么来读

10:15.700 --> 10:16.700
哎

10:16.700 --> 10:17.700
你给我复辞

10:17.700 --> 10:18.700
你想给我的当事人复辞

10:18.700 --> 10:19.700
对吧

10:19.700 --> 10:20.700
那行呗

10:20.700 --> 10:21.700
我去做一些事

10:21.700 --> 10:22.700
做了这些事呢

10:22.700 --> 10:23.700
如果说我真的要完成复辞

10:23.700 --> 10:25.700
真的要通知我的当事人

10:25.700 --> 10:27.700
去完成去完成底层复辞

10:27.700 --> 10:28.700
那么我去雕容一次set

10:28.700 --> 10:29.700
你看

10:29.700 --> 10:31.700
在set里边去雕容reflectset

10:31.700 --> 10:32.700
是不是就很容易理解

10:32.700 --> 10:33.700
我重写了set

10:33.700 --> 10:34.700
但是我真正

10:34.700 --> 10:36.700
要跟当事人去做这件事情的话

10:36.700 --> 10:38.700
我以后要去雕容set

10:38.700 --> 10:39.700
对吧

10:39.700 --> 10:40.700
对吧

10:40.700 --> 10:41.700
因为我重写的是他对吧

10:41.700 --> 10:42.700
重写的是他

10:42.700 --> 10:43.700
然后我把它重写的

10:43.700 --> 10:44.700
做了一些额外的事情

10:44.700 --> 10:45.700
再去雕容他

10:45.700 --> 10:46.700
不很合理吗

10:46.700 --> 10:47.700
能体会到吗

10:47.700 --> 10:48.700
体会

10:48.700 --> 10:49.700
好好去体会一下啊

10:49.700 --> 10:50.700
那么

10:50.700 --> 10:51.700
当然用set上面那种方式

10:51.700 --> 10:52.700
完全可以

10:52.700 --> 10:53.700
没有什么不可

10:53.700 --> 10:54.700
只是呢

10:54.700 --> 10:55.700
因为我之前说过

10:55.700 --> 10:56.700
是一样的

10:56.700 --> 10:57.700
都是一样的

10:57.700 --> 10:58.700
但是下面的代码呢

10:58.700 --> 10:59.700
理解

10:59.700 --> 11:01.700
我现在改写了底层功能

11:01.700 --> 11:02.700
那么在改写的过程中呢

11:02.700 --> 11:04.700
我可能要做一些额外的事情

11:04.700 --> 11:05.700
做了这些额外的事情呢

11:05.700 --> 11:07.700
我可能还是要使用底层功能

11:07.700 --> 11:08.700
那么我使用底层功能

11:08.700 --> 11:09.700
是不是就用反射

11:09.700 --> 11:11.700
反射不就是使用底层功能吗

11:12.700 --> 11:13.700
使用代理的时候

11:13.700 --> 11:14.700
一定要注意一个点

11:14.700 --> 11:15.700
就是你创建了代理之后

11:15.700 --> 11:16.700
你既然创建了代理

11:16.700 --> 11:17.700
那么后续的使用

11:17.700 --> 11:19.700
一定要通过代理来使用

11:20.700 --> 11:21.700
而且的代理呢

11:21.700 --> 11:22.700
你还要注意一个点

11:22.700 --> 11:24.700
我们把代理这个对象输出

11:24.700 --> 11:25.700
你会发现一个对象

11:25.700 --> 11:27.700
非常非常特别的代理对象

11:27.700 --> 11:28.700
它打印出来呢

11:28.700 --> 11:30.700
里面有两个属性A和B

11:30.700 --> 11:32.700
实际上它里边啥都没有

11:32.700 --> 11:34.700
它里边只有个内部属性Target

11:34.700 --> 11:37.700
就是代理的目标对象A和B

11:37.700 --> 11:38.700
它连圆熊都没有

11:38.700 --> 11:39.700
你看到没有

11:39.700 --> 11:40.700
它就是一个薄薄的一层

11:40.700 --> 11:41.700
它不是一个

11:41.700 --> 11:42.700
你都可以认为

11:42.700 --> 11:44.700
它不是一个全新的对象

11:44.700 --> 11:45.700
你都可以这样认为

11:45.700 --> 11:46.700
实际上它本质上是一个对象

11:46.700 --> 11:48.700
只不过对象里面没东西

11:48.700 --> 11:49.700
对象里面没东西

11:49.700 --> 11:51.700
它只是做一个代理

11:51.700 --> 11:52.700
它在帮你处理一些事情

11:52.700 --> 11:54.700
就是当你遇到一些事情的时候

11:54.700 --> 11:55.700
我可以帮你来处理一些

11:55.700 --> 11:57.700
做一些额外的动作

11:57.700 --> 11:59.700
那么要不要交给目标对象

11:59.700 --> 12:01.700
我可以帮你来决定

12:01.700 --> 12:03.700
它是来做这么一件事

12:03.700 --> 12:04.700
那么这一点

12:04.700 --> 12:05.700
就跟我们之前学的

12:05.700 --> 12:06.700
Objects Define Property

12:06.700 --> 12:07.700
有很大的区别了

12:07.700 --> 12:09.700
我们下一期可能还会详细讲

12:09.700 --> 12:11.700
还会详细来对比

12:11.700 --> 12:13.700
当然代理要比Objects

12:13.700 --> 12:14.700
什么 Define Property

12:14.700 --> 12:15.700
要强大太多了

12:15.700 --> 12:16.700
因为它这里边

12:16.700 --> 12:17.700
不仅能够改写Gate

12:17.700 --> 12:19.700
能够改写Set

12:19.700 --> 12:21.700
能够改写Reflects

12:21.700 --> 12:22.700
里边所有东西

12:22.700 --> 12:23.700
全部可以改写

12:24.700 --> 12:26.700
比方说我举个例子

12:26.700 --> 12:28.700
我举个例子

12:28.700 --> 12:29.700
那么比方说

12:29.700 --> 12:31.700
你要去读一个属性

12:31.700 --> 12:32.700
Gate

12:32.700 --> 12:34.700
我们是不是会改写Gate

12:34.700 --> 12:35.700
Gate怎么写的

12:35.700 --> 12:36.700
Property key

12:36.700 --> 12:38.700
是不是这两个参数

12:38.700 --> 12:39.700
这两个参数

12:39.700 --> 12:41.700
其实它还有代理里边

12:41.700 --> 12:42.700
Set里边还有第四个参数

12:42.700 --> 12:43.700
第四个参数

12:43.700 --> 12:44.700
就是代理对象本身

12:44.700 --> 12:46.700
有代理对象本身

12:46.700 --> 12:47.700
Receiver

12:47.700 --> 12:48.700
我们往往用命名为Receiver

12:48.700 --> 12:49.700
这个Receiver

12:49.700 --> 12:51.700
就是代理对象本身

12:51.700 --> 12:52.700
实际上Reflects

12:52.700 --> 12:54.700
Set后面也有第四个参数

12:54.700 --> 12:55.700
都有一个第四个参数

12:55.700 --> 12:57.700
只是我们平时不怎么用而已

12:57.700 --> 12:59.700
它也有第四个参数

12:59.700 --> 13:00.700
第四个参数没意义

13:00.700 --> 13:01.700
对它来说没意义

13:01.700 --> 13:04.700
它主要是为了保持格式的统一

13:04.700 --> 13:06.700
这个第四个参数

13:06.700 --> 13:08.700
没意义

13:08.700 --> 13:09.700
那么这里也是一样

13:09.700 --> 13:10.700
也可以有第三个参数

13:10.700 --> 13:11.700
那么没什么意义

13:11.700 --> 13:13.700
所以我们不写了

13:13.700 --> 13:14.700
我们要得到

13:14.700 --> 13:15.700
我们要得到

13:15.700 --> 13:17.700
得到这个属性的值

13:17.700 --> 13:19.700
要得到这个属性的值

13:19.700 --> 13:20.700
那么我们做什么

13:20.700 --> 13:21.700
我们比方说

13:21.700 --> 13:22.700
这个事情

13:22.700 --> 13:23.700
判断一下

13:23.700 --> 13:24.700
有没有这个属性

13:24.700 --> 13:25.700
目标对象上面

13:25.700 --> 13:26.700
我们怎么判断

13:26.700 --> 13:27.700
Reflects

13:27.700 --> 13:28.700
High

13:28.700 --> 13:29.700
是不是学过了

13:29.700 --> 13:30.700
目标对象上面

13:30.700 --> 13:31.700
是不是有这个属性

13:31.700 --> 13:33.700
当然那里可以用硬关键字

13:33.700 --> 13:34.700
但是就比较low了

13:34.700 --> 13:36.700
另外它也不符合

13:36.700 --> 13:38.700
这种场景下的语法

13:38.700 --> 13:39.700
这种场景下

13:39.700 --> 13:40.700
我们尽量的少用

13:40.700 --> 13:41.700
这种特殊语法

13:41.700 --> 13:42.700
尽量用用底层

13:42.700 --> 13:43.700
因为我们就在改底层实现

13:43.700 --> 13:44.700
所以说我们就

13:44.700 --> 13:46.700
底层实现是一个API

13:46.700 --> 13:47.700
那么我们这里

13:47.700 --> 13:48.700
要用到底层实现的时候

13:48.700 --> 13:49.700
也用API的形式

13:49.700 --> 13:50.700
看一下是不是有这个属性

13:50.700 --> 13:51.700
如果说有的话

13:51.700 --> 13:52.700
我干嘛

13:52.700 --> 13:53.700
我就反回你这个属性

13:53.700 --> 13:54.700
Reflects

13:54.700 --> 13:55.700
Get

13:55.700 --> 13:56.700
Target

13:56.700 --> 13:57.700
你看是不是一样的参数

13:57.700 --> 13:58.700
GetTarget

13:58.700 --> 13:59.700
是不是跟它

13:59.700 --> 14:00.700
改写了一样的参数

14:00.700 --> 14:01.700
对吧

14:01.700 --> 14:02.700
这里改写的Gate

14:02.700 --> 14:03.700
那么这里Gate

14:03.700 --> 14:04.700
是不是一样的参数

14:04.700 --> 14:05.700
好 那么

14:05.700 --> 14:06.700
如果说你没有这个属性的话

14:06.700 --> 14:07.700
我就Return

14:07.700 --> 14:08.700
本来应该是Return

14:08.700 --> 14:09.700
Undefined

14:09.700 --> 14:10.700
对吧

14:10.700 --> 14:11.700
那么我Return一个-1

14:11.700 --> 14:12.700
举个例子

14:12.700 --> 14:13.700
举个例子

14:13.700 --> 14:14.700
好 那么这样一来

14:14.700 --> 14:15.700
我们看一下

14:15.700 --> 14:16.700
它就能够实现

14:16.700 --> 14:18.700
比这个define property

14:18.700 --> 14:19.700
更加强大的功能

14:19.700 --> 14:21.700
输出一下Proxy

14:21.700 --> 14:22.700
一个属性

14:22.700 --> 14:23.700
比方说D

14:23.700 --> 14:24.700
有没有D这个属性呢

14:24.700 --> 14:25.700
保存

14:25.700 --> 14:26.700
是没有

14:26.700 --> 14:27.700
但是得到的是-1

14:27.700 --> 14:28.700
为什么是-1

14:28.700 --> 14:29.700
你看

14:29.700 --> 14:30.700
我们是不是要运行Gate

14:30.700 --> 14:31.700
它所有的属性读取

14:31.700 --> 14:32.700
都要运行Gate

14:32.700 --> 14:33.700
代理人吧

14:33.700 --> 14:35.700
我想要读取

14:35.700 --> 14:36.700
我们目标对象上的

14:36.700 --> 14:37.700
属性D

14:37.700 --> 14:38.700
那么交给代理人

14:38.700 --> 14:39.700
代理人一看

14:39.700 --> 14:40.700
运行Gate

14:40.700 --> 14:41.700
Gate里面咋写的

14:41.700 --> 14:42.700
我就咋运行

14:42.700 --> 14:44.700
明白这个意思吗

14:44.700 --> 14:46.700
好 就是好好看一下

14:46.700 --> 14:47.700
那么如果说没问题

14:47.700 --> 14:48.700
我觉得可以给

14:48.700 --> 14:49.700
把目标对象的属性值

14:49.700 --> 14:50.700
拿出来

14:50.700 --> 14:52.700
OK 我就掉用底层实现

14:52.700 --> 14:53.700
找到目标对象的

14:53.700 --> 14:54.700
这个属性

14:54.700 --> 14:55.700
拿出来给它

14:55.700 --> 14:56.700
如果说不想给的话

14:56.700 --> 14:57.700
就给-1

14:57.700 --> 14:58.700
就可以任意实现

14:58.700 --> 15:00.700
对吧

15:00.700 --> 15:01.700
对不对

15:01.700 --> 15:02.700
当然它不仅是

15:02.700 --> 15:03.700
set和gate

15:03.700 --> 15:04.700
任何东西都可以实现

15:04.700 --> 15:05.700
比方说还可以实现Height

15:05.700 --> 15:07.700
Height也可以实现

15:07.700 --> 15:09.700
Height也可以实现

15:09.700 --> 15:10.700
Height不是两个参数

15:10.700 --> 15:11.700
Target

15:11.700 --> 15:12.700
property key

15:12.700 --> 15:13.700
判断一个对象

15:13.700 --> 15:14.700
上面有没有这个属性值

15:14.700 --> 15:16.700
属性名

15:16.700 --> 15:17.700
对不起 我这里

15:17.700 --> 15:18.700
全部给你返回force

15:18.700 --> 15:20.700
全部给你返回force

15:20.700 --> 15:21.700
那么这样你来的话

15:21.700 --> 15:22.700
我们这里输出

15:22.700 --> 15:25.700
在不在proxy里边

15:25.700 --> 15:26.700
在不在proxy

15:26.700 --> 15:27.700
这个属性本来是有的

15:27.700 --> 15:28.700
对吧

15:28.700 --> 15:29.700
本来是有的

15:29.700 --> 15:30.700
但是代理人说

15:30.700 --> 15:31.700
没有 就没有

15:31.700 --> 15:32.700
我不想你知道

15:32.700 --> 15:33.700
就没有

15:33.700 --> 15:34.700
你看

15:34.700 --> 15:35.700
是不是通过代理的话

15:35.700 --> 15:36.700
它就会进入代理的

15:36.700 --> 15:37.700
执行模式了

15:37.700 --> 15:38.700
当然这里的Height

15:38.700 --> 15:39.700
会不会影响这呢

15:39.700 --> 15:40.700
它不会影响

15:40.700 --> 15:41.700
因为这里的

15:41.700 --> 15:42.700
是直接操作目标对象的

15:42.700 --> 15:43.700
它不是通过代理来操作的

15:43.700 --> 15:44.700
直接操作目标对象

15:44.700 --> 15:45.700
你看Target

15:45.700 --> 15:46.700
就是目标对象

15:46.700 --> 15:47.700
没了意思吗

15:47.700 --> 15:48.700
它啥都可以重写

15:48.700 --> 15:49.700
什么这些

15:49.700 --> 15:50.700
我们之前的reflection里边

15:50.700 --> 15:51.700
啥都可以重写

15:51.700 --> 15:52.700
啥都可以重写

15:52.700 --> 15:53.700
包括给我们DNS

15:53.700 --> 15:54.700
对吧 返回处就表示

15:54.700 --> 15:55.700
3度成功

15:55.700 --> 15:56.700
返回force就表示3度失败

15:56.700 --> 15:57.700
对不对

15:57.700 --> 15:58.700
DefineProperty

15:58.700 --> 15:59.700
全部可以重写

15:59.700 --> 16:01.700
你想怎么写就怎么写

16:01.700 --> 16:02.700
这就是代理的作用

16:02.700 --> 16:04.700
代理的提供给我们一个

16:04.700 --> 16:05.700
能够参与

16:05.700 --> 16:08.700
底层实现的这么一种机制

16:08.700 --> 16:09.700
我们之前也说过

16:09.700 --> 16:10.700
ES6里边也好

16:10.700 --> 16:11.700
ES5里边也好

16:11.700 --> 16:13.700
是不是都有这么一种理念

16:13.700 --> 16:14.700
就是希望

16:14.700 --> 16:15.700
减少魔法

16:15.700 --> 16:16.700
减少魔法的目的是

16:16.700 --> 16:17.700
希望开发者

16:17.700 --> 16:18.700
能够参与到

16:18.700 --> 16:19.700
我底层实现里边来

16:19.700 --> 16:20.700
那么代理和反射

16:20.700 --> 16:22.700
它就提供了这么一种机制

16:22.700 --> 16:23.700
为什么要反射

16:23.700 --> 16:24.700
为什么要反射

16:24.700 --> 16:26.700
因为代理里边要重写API

16:26.700 --> 16:27.700
所以说反射里面

16:27.700 --> 16:28.700
得提供API

16:28.700 --> 16:29.700
不然的话就看上去很怪

16:29.700 --> 16:30.700
对吧

16:30.700 --> 16:31.700
说看上去很怪

16:31.700 --> 16:32.700
你这里重写的是啥

16:32.700 --> 16:33.700
都没有这样的API

16:33.700 --> 16:34.700
你重写的是啥

16:34.700 --> 16:35.700
是不是要单独拿出来

16:35.700 --> 16:36.700
讲一讲代理

16:36.700 --> 16:37.700
这个东西重写的是啥

16:37.700 --> 16:38.700
这个东西影响的是啥

16:38.700 --> 16:39.700
那么如果有了反射之后

16:39.700 --> 16:40.700
一看就明白了

16:40.700 --> 16:41.700
对吧

16:41.700 --> 16:43.700
重写的就是反射里面的这个方法

16:44.700 --> 16:45.700
反射里面不是要

16:45.700 --> 16:46.700
一个底层实现吗

16:46.700 --> 16:47.700
OK 我给它重写了

16:47.700 --> 16:48.700
一模一样的参数

16:48.700 --> 16:50.700
一模一样的方法名字

16:50.700 --> 16:51.700
没什么意思吧

16:51.700 --> 16:53.700
那么要通过这种方式

16:53.700 --> 16:55.700
你理解反射和代理

16:55.700 --> 16:57.700
就非常非常容易理解了

16:57.700 --> 16:59.700
代理就是提供了一种机制

16:59.700 --> 17:00.700
通过这个东西

17:00.700 --> 17:04.700
能够重写反射里面的API

17:04.700 --> 17:07.700
它的内部可以进行随意的处理

17:07.700 --> 17:08.700
好吧

17:08.700 --> 17:10.700
这是代理这个东西的它的作用

17:10.700 --> 17:11.700
当然了

17:11.700 --> 17:12.700
现在我们都没有讲例子

17:12.700 --> 17:13.700
接下来几节课

17:13.700 --> 17:15.700
我会给它讲一些使用代理

17:15.700 --> 17:16.700
能够做出一些

17:16.700 --> 17:17.700
非常好玩的事情出来

17:17.700 --> 17:18.700
好吧

17:18.700 --> 17:19.700
咱们后边解决会再说吧

