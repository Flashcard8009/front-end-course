WEBVTT

00:00.750 --> 00:06.550
好 这个章节呢 我们开始来讲这个es6呢 它对于函数这一块的改动

00:07.350 --> 00:10.950
呃 我们在以前书写函数的时候呢 就是这个东西啊

00:11.590 --> 00:19.790
你只要你能够接触的技术面越广 学的语言越多 你做一些横向对比就知道了 它有很多不方便的地方

00:20.590 --> 00:25.830
以前呢 我们在书写函数的时候呢 呃 确实存在一些不方便的地方

00:26.190 --> 00:30.830
那么这一张呢 我们就来讲一讲es6如何来解决这些不方便的问题的

00:31.230 --> 00:37.030
那么我们这个结构呢 讲的是关于参数的默认值啊 这一块的问题

00:37.510 --> 00:43.750
就是说以前呢 我们写一个函数的时候呢 可能这个函数呢 它需要的参数比较多 比方说吧

00:44.870 --> 00:53.110
啊 咱们给它举一些啥例子呢 随便一个简单的例子吧啊 比方说求和啊 对三个数求和

00:53.830 --> 00:57.430
啊 比方说abc啊 对三个数求和

00:58.150 --> 01:04.790
呃 就下去个例子吧啊 就下去个例子 就比方说呢 这里面这里边呢 有三个参数啊

01:05.350 --> 01:08.710
绝大部分时候呢 这个b这个参数呢 都是1

01:09.590 --> 01:17.270
c这个参数呢 都是2 那么我们调用的时候呢 以前调用的时候呢 要么你就把必须要把三个参数传完啊12

01:17.830 --> 01:19.830
啊 是吧 得把三个参数传完

01:20.550 --> 01:25.270
对不对 你才能正确的调用这个函数 因为这个函数它会返回a加b加c

01:25.830 --> 01:30.790
对吧 你得把三个参数传完过后呢 才能正确的去执行这个函数

01:32.230 --> 01:34.550
来输出啊 这第一个

01:36.310 --> 01:44.180
11吧 啊 运行 好 来看看控制啊 这个没什么好说的

01:45.140 --> 01:51.940
啊 刷新啊 十三十四 没问题吧 嗯 但是呢 有的时候我们觉得 哎 这个函数参数一多

01:52.180 --> 01:55.860
而且呢 有些参数呢 绝大部分时候呢 它的值呢 都是固定的

01:56.260 --> 02:00.740
所以说呢 我们呢 既要保证灵活性 你不能把这个参数去掉

02:01.300 --> 02:09.060
因为同时呢 要保证调用 它要比较方便的调用啊 我可以只传一个参数 不传后边的参数了

02:09.380 --> 02:14.500
那么也就是说呢 如果说它不传后边的参数的时候呢 我们希望给它一个默认值

02:14.980 --> 02:21.220
以前咋做呢 以前是不是得这样做啊 b有没有值 如果没有值的话 我给它取1

02:21.940 --> 02:25.700
c有没有值啊 c没有值的话 我给它取

02:26.420 --> 02:30.100
二 对吧 这样做还不是很好 因为它有可能b给你传了一个0

02:30.260 --> 02:34.100
0的话 它是不是也通不过判断 它也会取成1 这样做也不是很好

02:34.340 --> 02:36.900
我们应该是 最好是应该用这种方式啊

02:37.860 --> 02:44.500
是不是不啊 是不是等于undefend啊 如果说等于undefend的话 我们取1

02:45.620 --> 02:53.140
那么如果c是不是等于undefend 如果说等于undefend的话 我们取2 对吧 我们得用这种方式 那么这种方式呢 写出来也可以

02:53.620 --> 02:58.340
啊 就写下来比较麻烦 我们得用很多方式呢 用一些代码来处理这个问题

02:58.820 --> 03:03.220
但是到了es6里边呢 它可以 它增加增加了这个参数默认值

03:03.460 --> 03:11.940
可以让我们非常方便的来输写参数默认值 怎么来使用呢 使用的方式很简单 在输写刑参时

03:12.900 --> 03:17.780
刑参时啊 直接给刑参负值

03:18.580 --> 03:19.060
负的值

03:22.020 --> 03:22.500
纪为

03:23.540 --> 03:28.340
默认值啊 就这么简单 比如我们这里呢 希望给b付一个默认值

03:29.140 --> 03:33.060
写一个等于1 给c付一个默认值写一个等于2 没了

03:33.380 --> 03:39.060
后边代码不用写了 那么这样子一来的话 它会形成这么一个现象啊 就是

03:40.180 --> 03:40.740
这样一来

03:42.900 --> 03:44.900
当调用函数时

03:45.780 --> 03:54.340
如果没有给对应的参数啊 没有给对应的参数负值 也就是说给它的值啊 给它的值

03:54.900 --> 04:02.260
是undefend 也就是这个例子啊 给它的值是undefend 则会自动使用默认值

04:03.060 --> 04:03.940
你看就这么简单

04:04.580 --> 04:10.340
你看现在我们b和c都有默认值 对吧 那么现在我们调用这个函数上10

04:10.740 --> 04:13.140
传到第一个参数 后边的参数是不是没有传

04:14.180 --> 04:16.820
没有传的话 它就使用默认值 你看一下吧

04:17.380 --> 04:23.060
你看 是不是这样有效的 那么这种协防就相当于是 你后边两个参数没有传

04:23.060 --> 04:28.340
是不是相当于传了一个undefend 对吧 相当传了两个undefend 你看是不是一样的

04:28.740 --> 04:33.300
对吧 也就是当你给它传undefend的时候 注意啊 一定是undefend的 不能是nau啊

04:33.540 --> 04:37.940
如果你传上一个nau的话 你看变成12了 因为它b是nau

04:39.140 --> 04:43.060
nau在数学运算里面 是不是变成0 对吧 变成0 对吧

04:43.700 --> 04:49.540
所以说你一定是传undefend 未定义的 没有定义这个参数 那么它就会使用默认值

04:49.780 --> 04:50.420
原来的意思吧

04:52.340 --> 04:56.500
好 那么如果说我想要这种做法呢 你想想这个道理啊

04:56.820 --> 05:01.860
我想这个参数传 传一个1 第二个参数呢 我想使用默认值

05:01.860 --> 05:06.500
我也不管它默认值是啥吧 我就是想使用默认值 第三个参数我想改

05:07.300 --> 05:10.260
那么这个时候怎么办呢 很简单呀 你这个参数传undefend的呀

05:10.900 --> 05:16.340
第三个参数呢 传一个5 对吧 那么第二参数是不是默认值1 对不对

05:16.340 --> 05:19.220
默认值1 那么就是1加1加5对于7

05:20.180 --> 05:26.660
看没啊 就非常简单啊 这就是参数的默认值的使用啊 默认值的使用

05:26.660 --> 05:30.980
甭管你只要只要你以后写函数啊 你只要发现那些

05:31.380 --> 05:36.100
有些参数呢 他大部分的时候呢 他的指示差不多的 ok 那么你就可以写默认值

05:36.820 --> 05:44.100
当然这个默认值呢 他不一定是字面量 他还可以是一个表达式 都是没问题的啊 我再举个例子吧 比方说

05:45.380 --> 05:48.660
我们呢 这里呢 写上这么一个div 抗天的啊 一个容器

05:49.540 --> 05:52.740
好 这里边呢 我们写这么一个函数啊 我直接把复制一下吧

05:53.700 --> 05:58.100
我这里写这么一个函数 就是create element

06:00.500 --> 06:02.580
ne 就是container

06:03.940 --> 06:07.380
container 好 什么意思呢 跟函打个数是啊

06:09.060 --> 06:14.820
啊 创建一个元数啊 这是元数的名称

06:15.460 --> 06:19.060
元数的名称啊 这是元数的内容

06:19.300 --> 06:24.900
啊 元数的内容 呃 这是元数的内容 然后呢 这个地方呢 是元数

06:26.340 --> 06:29.300
的复元数 就要听见到哪个容器里边去

06:30.100 --> 06:35.940
好 那么这个时候呢 我们如果说啊 调那个函 这个函数怎么写呢 这个函数写起来很简单啊 document

06:35.940 --> 06:39.380
create element啊 名称呢 就是name 对吧

06:39.940 --> 06:43.140
哎 这里呢 创建一个a 创建一个元数

06:43.620 --> 06:50.580
然后呢 把这个元数加 元数的内容设置一下啊 iner 啊 如果说他有元数内容的话啊 content

06:51.940 --> 06:57.460
container 如果说他有元数内容 那么我们就把元数内容呢 iner

06:58.100 --> 06:58.980
atm 啊

06:59.940 --> 07:04.980
给他加到这个inner element里面去 然后呢 再把这个元数加到容器里边去container append

07:05.700 --> 07:10.660
child 对吧 我们写这么一个辅助函数来帮我们创建元数 加了有这么一个函数

07:11.220 --> 07:19.460
好 那么我们以后调的时候 是不是可以这样调用啊 name 比方说div 啊 创建个div 容器呢 我们使用什么 document get element by id

07:20.500 --> 07:23.460
得到的容器是什么container啊 是不是得到这个容器

07:24.020 --> 07:28.020
对吧 得到这个容器啊 然后呢 我们写元数内容啊

07:28.660 --> 07:33.220
啊 就是就是 随便写个数字吧 数据啊 调这个函数过后你看一下

07:33.780 --> 07:47.800
对吧 呃 什么意思 它说field to execute append child 这也不出错了

07:49.080 --> 07:51.640
啊 这也不出错了 什么意思呢

07:52.120 --> 07:55.480
are new child element contains parent

07:56.440 --> 08:00.280
它说我创建的这个元数呢 它有

08:01.240 --> 08:06.280
哦 它有复元数了 我这里应该写上l啊 现在写错了

08:07.160 --> 08:10.440
好 保存啊 你看是不是加进去了 对吧 每次调这个函数就加进去了

08:10.760 --> 08:16.680
但是呢 我们觉得这样子写起来呢 有点麻烦 因为绝大部分时候呢 它的 name 呢 都是div

08:17.880 --> 08:24.120
绝大部分时候呢 它的容器都是这个容器啊 都是这个容器 没问题吧

08:24.760 --> 08:27.960
啊 绝大部分内容呢 都是空的啊 都是空的

08:28.920 --> 08:36.760
啊 是不是这样子 对吧 形成这么样一种结构 是不是每个参数都用默认值的 现在啊 那么我们div 就不想传进了啊 直接使用默认值吧

08:36.920 --> 08:37.400
undefend

08:38.040 --> 08:41.720
啊 那么第二个参数我也不想传进了啊 直接使用默认值吧 undefend

08:42.120 --> 08:47.160
好 第三个参数 我们第三个参数有变动 第三个参数传进就行了 是不是这样子方便了很多

08:47.560 --> 08:48.680
对吧 是不是方便了很多

08:49.240 --> 08:53.960
啊 就可以这样子写 你看一下这个参数是不是使用了表达式啊 表达式没有任何问题

08:54.440 --> 09:01.400
当你没有给这个参数复职的时候 他就会去调用这个表达式啊 会去调用这个表达式 然后来得到结果

09:03.830 --> 09:08.710
好 那么这个时候呢 我想起了一道面试题啊 这道面试题呢 也比较雕砖啊

09:09.510 --> 09:16.470
比如说我们这里呢 模拟一下这个面试题啊 这个变形不一定它不是这样的 原封不动的不是这样的写的啊 不过呢 差不多啊 差不多

09:17.430 --> 09:23.290
啊 那么这里呢 我们把这句话写进来啊 这里输出

09:24.250 --> 09:25.610
呃 abc 吗啊

09:26.810 --> 09:36.260
他 他考虑的考点呢 差不多是这个考点啊 那么他问你这个输出的 abc 他会运行几次

09:38.260 --> 09:40.180
啊 输出的这个 abc 会运行几次

09:41.060 --> 09:45.300
运行几次呢 这个其实很简单 运行两次啊 输出 abc 运行两次

09:46.020 --> 09:51.860
因为第一次调用调用这个函数 传了一个 第二个参数没有值 对吧 第二个参数没有值

09:52.260 --> 09:58.020
第二个参数没有值的话 那么他会使用默认值 默认值会调用这个函数 调用一次

09:58.420 --> 10:02.820
第二个 第二次调用这个函数呢 又没有给他传这个参数 他又要使用默认值 又要调用这个函

10:03.540 --> 10:10.260
这个东西啊 那如果说你还有一次 还有一次呢 他给他传了 传了值了 传了值了会不会调用这个函数

10:10.900 --> 10:15.380
传了值他就不会了啊 传了值他就会忽略默认值 他只要调了两次

10:16.100 --> 10:23.940
啊 就这个东西很好理解啊 很好理解啊 这是关于这个默认值这一块啊 我想想还有啥呢

10:25.220 --> 10:27.860
啊 有一个同学说 那如果说我只传一个参数会怎么办

10:28.740 --> 10:34.100
如果说这里只传一个参数 不要这样做啊 只传一个参数的话 这个参数会对应到第一个参数

10:34.580 --> 10:41.700
他把这个东西给的第一个参数 那么后边的使用了默认值 那你这个东西肯定出问题了啊 哪有元素名称为这个的呢

10:41.940 --> 10:50.020
对不对啊 元素名称 你看呀 这个元素名称也挺神奇的啊 这个元素名称哪有这个玩意呢 对不对啊 不要这样去做啊 不要这样去做

10:50.740 --> 10:57.140
好 那么如果说你后续的参数呢 有默认值呢 你可以这样写 但是如果前面的参数有默认值呢 你要写上MD犯

10:58.100 --> 11:03.860
好吧 这是关于默认值 是不是非常非常简单啊 那么以后呢 你写函数的时候呢 如果说遇到一些参数呢

11:04.420 --> 11:08.020
他的绝大部分情况下都是一样的值 你可以该书写上默认值

11:08.740 --> 11:15.420
好 这是参数默认值的使用啊 其实我们绝大部分时候学习到这点知识呢 对参数默认值这一块就完全够了

11:17.020 --> 11:23.540
有可能呢 是为了孕妇面试题 有可能呢 是为了扩展大家的事业 所以说我还要讲一些扩展知识啊

11:24.340 --> 11:30.340
如果说你对这些扩展知识不感兴趣的话 你可以直接可以关掉这个这些课了啊 这些课就核心知识已经结束了

11:30.980 --> 11:34.660
扩展知识呢 我们后边也不太会用得到啊 中央的事情也比较低啊 就是了解了解

11:35.540 --> 11:39.140
一个呢 是关于参 参数默认值呢 他对arguments的影响

11:39.780 --> 11:45.500
啊 这里呢 我好好说一下啊 就参数默认值呢 他对arguments呢是能会产生一些影响的

11:46.420 --> 11:52.500
嗯 不知道大家应该是学过那个严格模式 对吧 在严格模式下边

11:52.980 --> 11:56.500
arguments他是跟我们的形参式脱离的

11:57.420 --> 12:02.340
这个知道吧 在严格模式下边arguments是跟我们的形参脱离的

12:02.660 --> 12:10.260
如果是非严格模式下边他的arguments呢 跟我们的形参是没有脱离的啊 比方说举个例子吧

12:11.300 --> 12:15.860
啊 我们这里呢 输出这么一个东西啊 输出这么一个东西

12:17.220 --> 12:28.900
啊 就test嘛 test 啊 直接调用还说啊 test 12啊 比方说啊 我们这里呢 做啥呢 我们这做这么一件事啊 我们输出什么arguments

12:29.780 --> 12:30.980
啊 输出arguments

12:31.940 --> 12:40.900
呃 输出arguments 两个吧 两个形参对吧 输出arguments 0啊arguments 1 对吧 输出两个形参啊 这是arguments里边的东西

12:42.100 --> 12:49.750
arguments 就是arguments里边的东西 好 那么现在呢 我们再输出啊 a

12:51.910 --> 12:52.790
然后呢 b

12:54.710 --> 13:02.150
啊 输出a和b 这两个东西肯定是肯定是一样的 这毫无疑问啊 肯定是一样的 对吧 肯定是一样的

13:03.430 --> 13:14.090
好 那么现在呢 我们再看 如果说我这里把a改成3 我们再输出一次啊 我们再输出一次

13:14.970 --> 13:24.090
好 你可以看到不仅a变了 对吧 形参里边是不是对应的 它也改变了 但是说如果说你在严格模式下边啊

13:24.890 --> 13:33.290
你在严格模式下边 你看是不是没变 形参和那个arguments是脱离的 是不是没变 对吧 在严格模式下面它有这么一个规定啊

13:33.610 --> 13:40.810
它认为了arguments呢 你要么就用arguments要么就用形参啊 最好了不要混着用啊 它就它两个是脱离的 没有变化

13:41.370 --> 13:50.490
那么没有变 如果说加了参数默认值之后呢 我们不是严格模式啊 加了参数默认值之后 甭管你给哪个参数加的默认值

13:50.730 --> 13:54.410
它都会自动形成严格模式的这种规则啊

13:55.850 --> 14:01.450
只要给函数加了加上参数默认值

14:02.170 --> 14:19.210
该函数会自动变成严格模式下的规则 就是什么规则呢 就是arguments和形参啊 形参脱离啊 脱离

14:19.610 --> 14:27.290
实际上呢 我再给大家说一下arguments这个东西呢 以后就不要用了啊 因为我们后边下节课啊 就下节课讲的一个

14:27.610 --> 14:37.130
圣语参数讲了之后呢arguments呢 对我们来说就没有什么用了 基本上啊 也尽量不要去使用arguments 我们下节课会详细的说 为什么这个arguments呢会带来一些

14:37.690 --> 14:44.730
不好的地方啊 尽管说它也不是非常严重啊 但是我们有了好 更好的方式就不要再去使用这个arguments

14:45.770 --> 14:50.170
那么这里呢一看 是不是脱离了 对吧 加了参数默认值之后呢 还会跟形参脱离

14:50.730 --> 14:55.770
这是这个扩展知识 大家了解一下 另外一个呢 是留意暂时性使趋

14:56.170 --> 15:05.530
这是什么意思呢 就是说我们的参数啊 我们再来复制一个啊 我们再来几句话 就是

15:07.610 --> 15:10.170
形参和

15:11.210 --> 15:17.370
s6中的net or const声明一样

15:18.170 --> 15:22.650
具有作用域 并且

15:24.730 --> 15:26.570
有暂时性

15:27.850 --> 15:34.970
并且根据参数的声明顺序存在暂时性

15:35.690 --> 15:39.610
死区 好 那么这个东西呢 我给他举例子 他能听得懂啊

15:41.050 --> 15:47.610
比方说举什么例子呢 比方说这样吧 我们举这个例子 我b的默认值是啥呢 是a

15:49.290 --> 15:50.410
我们输出a和b

15:51.930 --> 15:55.690
你看一下现在有没有问题啊 现在我传了一个1和2 没有任何问题

15:55.930 --> 16:02.410
为什么呢 因为现在根本就没有使用参数默认值 对吧 两个都有值 所以他不会使用参数默认值 他自然输出1和2

16:03.050 --> 16:12.410
那如果说我第二个没传递 能不能正常输出呢 看一下 可以 为什么呢 因为你是先声明的形参a 再声明的形参b 对吧

16:12.970 --> 16:20.490
好 那么先声明的省形参a的有值了 对吧 你把1负责给a了 那么运行到这个形参b的时候 是不是已经有值了

16:20.730 --> 16:25.530
a已经有值了 那么他会把a的值负责给b 他使用默认值吧 没有传递b

16:25.770 --> 16:31.690
是不是使用默认值 那么b是有值的 但是如果你这样子写 交出问题

16:33.050 --> 16:35.850
这样子写交出问题 比较说我们这样的传递啊

16:36.570 --> 16:39.690
如果说你两个都传递了 当然不会出问题啊 他根本就没有使用默认值

16:40.330 --> 16:47.850
如果说你第一个 第一个没有传递使用默认值 第二个传递了 你看一下 交出问题

16:48.490 --> 16:53.210
他说什么了 他说你不能在b初识化之前去使用他

16:53.770 --> 16:58.330
也就是运行到这的时候呢 b是不是还没有声明 对吧 他是从做到又进行声明的

16:58.650 --> 17:03.850
b还没有声明 b没有声明的话 那么你这里去把b的值负给a的b的当然

17:04.410 --> 17:10.890
存在一个暂时性史区啊 他存在一个暂时性史区 b现在还不能用还没有声明 要到这的时候 b才能声明

17:11.130 --> 17:15.850
对吧 所以说他会存在这么一个问题啊 那么通过这个例子呢 也当然告诉大家呢

17:16.570 --> 17:23.210
以后呢 在函数里边你定义变 用net定义变量的时候呢 你不能跟参数同名啊 你是不能跟参数同名的

17:23.930 --> 17:29.850
你看呀 a已经被定义了 对吧 因为a和b的定义了 刑判的定义了

17:30.490 --> 17:36.010
现在呢 跟那个就是用net抗设定义是差不多的 那么你不能再重复了去定义

17:36.970 --> 17:39.050
不要这意思吗 他也存在暂时性史区

17:39.930 --> 17:48.010
就是说一下这个问题啊 当然平时呢 我们也尽量的避免去这样子使用啊 就是给用某一个参数的只给另一个参数负责

17:48.170 --> 17:54.250
尽量避免吧啊 比如说避免不了了 你注意一下啊 要注意一下这个顺序 平时呢 我们其实也很少这样去做

17:55.290 --> 17:58.010
好 这是关于这个啊 关于这个问题

17:58.970 --> 18:07.450
好 其他的就没啥了啊 参数默认值也是一个比较简单的内容 好 下来练习一下啊 把这个参数默认值的使用练习一下

18:07.450 --> 18:15.290
一就练习一下就练习一下这个玩意吧 就练习一下这个玩意啊 行吧 下来去练习一下啊 有这么一点印象

