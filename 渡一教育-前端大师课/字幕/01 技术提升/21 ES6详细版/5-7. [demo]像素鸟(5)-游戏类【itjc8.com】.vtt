WEBVTT

00:01.140 --> 00:04.420
好 前边我们已经写了各种各样的类了

00:04.420 --> 00:06.520
每个类控制自己的东西

00:06.520 --> 00:08.920
那么最后我们就写一个类

00:08.920 --> 00:10.920
把这些功能整合起来

00:10.920 --> 00:13.320
game类 游戏类

00:13.320 --> 00:15.320
来吧 我们这里呢

00:15.320 --> 00:17.820
如果说你把前面的东西搞清楚了

00:17.820 --> 00:20.320
最后一个类就很简单了

00:20.320 --> 00:22.320
虽然说简单

00:22.320 --> 00:24.320
但是还是有不少代码学校写

00:24.320 --> 00:26.320
constructor

00:26.320 --> 00:28.080
游戏里边有啥呢

00:28.080 --> 00:30.080
你告诉我一个游戏里边有啥

00:30.580 --> 00:32.080
是不是有天空

00:32.080 --> 00:34.080
我们这里专门来个写个方法

00:34.080 --> 00:36.080
或者就直接在这里写得了

00:36.080 --> 00:37.080
Z

00:37.080 --> 00:39.080
天空有吧

00:39.080 --> 00:41.080
留一个什么 屎杆

00:43.080 --> 00:45.080
是不是我们之前写过的类

00:45.080 --> 00:46.080
天空 有吧

00:46.080 --> 00:48.080
天空在哪 是不是在这

00:48.080 --> 00:50.080
拥起来 拥起来吧

00:50.080 --> 00:51.080
天空

00:51.080 --> 00:54.080
游戏里边是不是得有一个大地

00:54.080 --> 00:56.080
留一个land

00:57.080 --> 00:58.080
游戏里边

00:58.080 --> 01:00.080
哪怕你前面没听懂都没关系

01:00.080 --> 01:02.080
你知道这些类怎么拥就行了

01:02.080 --> 01:04.080
就是面上对方开发就是一个好处

01:04.080 --> 01:05.080
它是一块一块的

01:05.080 --> 01:06.080
那一块哪怕你没听懂

01:06.080 --> 01:08.080
它只限于那一块

01:08.080 --> 01:10.080
它不会把这个问题扩散

01:10.080 --> 01:13.080
大地是不是得创建一个大地类

01:13.080 --> 01:14.080
大地的对象

01:14.080 --> 01:15.080
好 大地的对象我们来看一下吧

01:15.080 --> 01:17.080
它不是要给它一个

01:17.080 --> 01:18.080
给它一个速度吗

01:18.080 --> 01:20.080
大地的速度我们这里直接定

01:20.080 --> 01:22.080
直接固定

01:22.080 --> 01:24.080
直接固定是多少呢 付了100

01:24.080 --> 01:25.080
直接固定

01:25.080 --> 01:27.080
因为我们要把控制的游戏

01:27.080 --> 01:30.080
就是柱子队跟大地的速度是一样的

01:31.080 --> 01:32.080
这大地

01:32.080 --> 01:35.080
有天空 有大地 是不是得有这小辆

01:35.080 --> 01:36.080
留一个band

01:36.080 --> 01:37.080
小辆

01:38.080 --> 01:40.080
看看小辆里边有没有勾党函数

01:40.080 --> 01:43.080
勾党函数里边有没有参数

01:43.080 --> 01:44.080
没有 OK

01:44.080 --> 01:45.080
那么创建一只小辆

01:45.080 --> 01:47.080
然后我就现在就不用去管

01:47.080 --> 01:48.080
这些类里边什么写的

01:48.080 --> 01:49.080
我就完全不管了

01:49.080 --> 01:51.080
它已经写好了 已经测试通过了

01:51.080 --> 01:52.080
还有什么柱子队

01:52.080 --> 01:54.080
柱子队

01:54.080 --> 01:56.080
还有柱子队生成器

01:56.080 --> 01:58.080
生成器就是

01:58.080 --> 02:01.080
PAP producer

02:01.080 --> 02:03.080
柱子队生成器

02:03.080 --> 02:06.080
就是PAP producer

02:06.080 --> 02:08.080
我们看一下这边

02:08.080 --> 02:10.080
PAP这里

02:10.080 --> 02:11.080
下面

02:11.080 --> 02:14.640
PAP producer

02:14.640 --> 02:16.640
要传个速度 速度跟大地一样

02:16.640 --> 02:18.640
这就是为什么我要把速度提出来

02:18.640 --> 02:21.640
因为可以让雕用的人控制这个速度

02:21.640 --> 02:22.640
让它两个一样

02:22.640 --> 02:25.640
他们自己是不知道对方的速度的

02:25.640 --> 02:27.640
是不是创建好了

02:27.640 --> 02:28.640
对不对 创建好了

02:28.640 --> 02:30.640
下面这个我打个主持

02:30.640 --> 02:35.640
这是柱子队生成器

02:35.640 --> 02:38.640
好 游戏有开始

02:38.640 --> 02:39.640
有暂停 对吧

02:39.640 --> 02:41.640
开始和暂停 开始

02:41.640 --> 02:43.640
游戏开始

02:43.640 --> 02:45.640
开始还有一个游戏停止

02:45.640 --> 02:47.640
来吧

02:47.640 --> 02:49.640
开始是做什么事情呢

02:49.640 --> 02:50.640
游戏开始

02:50.640 --> 02:51.640
是不是不断的移动

02:51.640 --> 02:52.640
这乱七八糟的东西

02:52.640 --> 02:53.640
天空要移动

02:53.640 --> 02:54.640
大地要移动

02:54.640 --> 02:55.640
鸟要移动

02:55.640 --> 02:56.640
乱七八糟的东西一大堆都要移动

02:56.640 --> 02:58.640
是不是得我再启动一个技术器来移动

02:58.640 --> 02:59.640
对吧

02:59.640 --> 03:01.640
Timer

03:01.640 --> 03:02.640
来吧

03:02.640 --> 03:03.640
开始是什么

03:03.640 --> 03:04.640
还是判断一下

03:04.640 --> 03:05.640
这也是Timer

03:05.640 --> 03:06.640
如果有值的话

03:06.640 --> 03:07.640
Return就不要再重复开始了

03:07.640 --> 03:08.640
如果没有值的话

03:08.640 --> 03:10.640
这也是Timer复制

03:10.640 --> 03:14.080
SetsInterval

03:14.080 --> 03:15.080
复制

03:15.080 --> 03:16.080
多少时间呢

03:16.080 --> 03:17.080
时间间隔呢

03:17.080 --> 03:18.080
时间间隔我们用

03:18.080 --> 03:19.080
写个属性Tick

03:19.080 --> 03:20.080
16毫秒

03:20.080 --> 03:21.080
对

03:21.080 --> 03:23.080
16毫秒

03:23.080 --> 03:27.080
移动的时间间隔

03:27.080 --> 03:29.080
毫秒

03:29.080 --> 03:30.080
好

03:30.080 --> 03:31.080
这里把Z tick传进去

03:31.080 --> 03:33.590
好

03:33.590 --> 03:34.590
这边呢

03:34.590 --> 03:35.590
每一段时间移动

03:35.590 --> 03:36.590
怎么写呢

03:36.590 --> 03:37.590
移动

03:37.590 --> 03:38.590
有哪些事情要做呢

03:38.590 --> 03:40.590
天空的移动吧

03:40.590 --> 03:41.590
Z Sky

03:41.590 --> 03:43.590
点目

03:43.590 --> 03:45.590
那么Dialation

03:45.590 --> 03:46.590
里面要传一个

03:46.590 --> 03:47.590
时间间隔

03:47.590 --> 03:48.590
Dialation它是秒

03:48.590 --> 03:49.590
单位是秒

03:49.590 --> 03:50.590
是不是把Z tick除以

03:50.590 --> 03:51.590
1000就是秒

03:51.590 --> 03:52.590
Dialation传进去

03:52.590 --> 03:53.590
天空的移动吧

03:53.590 --> 03:54.590
然后呢

03:54.590 --> 03:55.590
大地的移动吧

03:55.590 --> 03:56.590
对对

03:56.590 --> 03:57.590
大地的移动

03:57.590 --> 03:58.590
还有什么呢

03:58.590 --> 03:59.590
还有什么呢

03:59.590 --> 04:00.590
还有鸟的移动吧

04:00.590 --> 04:01.590
Bird

04:01.590 --> 04:02.590
对对

04:02.590 --> 04:03.590
移动

04:03.590 --> 04:04.590
Move

04:04.590 --> 04:05.590
Dialation

04:05.590 --> 04:06.590
是这个意思吧

04:06.590 --> 04:07.590
对对

04:07.590 --> 04:08.590
鸟的移动吧

04:08.590 --> 04:09.590
还有什么呢

04:09.590 --> 04:10.590
还有柱子的不断生成吧

04:10.590 --> 04:11.590
对对

04:11.590 --> 04:12.590
柱子的不断生成

04:12.590 --> 04:13.590
柱子不断生成

04:13.590 --> 04:14.590
我们不用放到计时器里边

04:14.590 --> 04:16.590
This PAP producer

04:16.590 --> 04:17.590
直接Start

04:17.590 --> 04:18.590
Producer

04:18.590 --> 04:19.590
开始生成柱子

04:19.590 --> 04:21.590
开始生成柱子

04:21.590 --> 04:22.590
对不对

04:22.590 --> 04:24.590
柱子的不断生成

04:24.590 --> 04:26.590
那么柱子里边的

04:26.590 --> 04:27.590
这个柱子里边的所有东西

04:27.590 --> 04:28.590
是不是得移动

04:28.590 --> 04:29.590
对吧

04:29.590 --> 04:30.590
来吧来吧

04:30.590 --> 04:31.590
PAP producer

04:31.590 --> 04:32.590
里边又不是有Payers吗

04:32.590 --> 04:33.590
有很多柱子队

04:33.590 --> 04:35.590
是不是在for一起移动

04:35.590 --> 04:37.590
for一起移动

04:37.590 --> 04:39.590
移动它里边的所有柱子队

04:39.590 --> 04:40.590
那么这里呢

04:40.590 --> 04:42.590
其中就是Payers

04:42.590 --> 04:44.590
每个柱子队得移动Payers

04:44.590 --> 04:45.590
Move

04:45.590 --> 04:46.590
Dialation

04:46.590 --> 04:47.590
对吧

04:47.590 --> 04:48.590
对吧

04:48.590 --> 04:49.590
你看天空移动

04:49.590 --> 04:50.590
大地移动

04:50.590 --> 04:51.590
小料移动

04:51.590 --> 04:52.590
然后柱子队里边

04:52.590 --> 04:53.590
所有的柱子队

04:53.590 --> 04:54.590
全部得移动

04:54.590 --> 04:55.590
不就游戏开始了吗

04:55.590 --> 04:56.590
这不就是游戏开始吗

04:56.590 --> 04:57.590
好

04:57.590 --> 04:58.590
咱们来看一下吧

04:58.590 --> 05:00.590
我们这里创建一个game对象

05:00.590 --> 05:01.590
G

05:01.590 --> 05:03.590
等于有一个game对象

05:05.590 --> 05:06.590
你看着

05:08.590 --> 05:09.590
刷新

05:11.590 --> 05:12.590
等一下

05:13.590 --> 05:14.590
它为什么鸟别人

05:14.590 --> 05:16.590
变成这样子了

05:16.590 --> 05:17.590
这个鸟

05:17.590 --> 05:19.590
swing它是一个undefend

05:19.590 --> 05:21.590
swing一个undefend

05:21.590 --> 05:22.590
我们看一下

05:22.590 --> 05:23.590
swing这里

05:24.590 --> 05:25.590
它为什么是undefend

05:25.590 --> 05:27.590
swing standards

05:27.590 --> 05:29.590
swing standards

05:30.590 --> 05:32.590
一开始Render

05:34.590 --> 05:35.590
明白了

05:35.590 --> 05:37.590
它一开始Render的时候

05:37.590 --> 05:39.590
它的standards还没有定义

05:39.590 --> 05:40.590
这句话还没有定义

05:40.590 --> 05:43.590
所以说它这个位置

05:43.590 --> 05:44.590
成为了这个样子

05:44.590 --> 05:45.590
那么我们Render这里

05:45.590 --> 05:47.590
也可以重新写一下吧

05:47.590 --> 05:48.590
我们比方说

05:48.590 --> 05:49.590
我们这句话提前

05:49.590 --> 05:51.590
这句话我想想

05:51.590 --> 05:53.590
Render这一块

05:54.590 --> 05:56.590
Render这一块

05:56.590 --> 05:57.590
我想一想

05:57.590 --> 05:58.590
就是说

05:58.590 --> 06:00.590
这个负累的构造寒树里边

06:00.590 --> 06:01.590
它有这么一个东西

06:01.590 --> 06:03.590
负累的构造寒树里边

06:03.590 --> 06:04.590
land

06:04.590 --> 06:05.590
在哪呢

06:05.590 --> 06:06.590
在这

06:06.590 --> 06:08.590
tango

06:08.590 --> 06:09.590
它这里一个Render

06:09.590 --> 06:10.590
在构造寒树里边

06:10.590 --> 06:11.590
做完了这些事情过后

06:11.590 --> 06:12.590
它就要重新宣展

06:12.590 --> 06:13.590
那么重新宣展

06:13.590 --> 06:14.590
这些事情

06:14.590 --> 06:15.590
我们干脆要不然

06:15.590 --> 06:17.590
放到指内里边得了

06:17.590 --> 06:18.590
放到指内里边得了

06:18.590 --> 06:19.590
因为负累在重

06:19.590 --> 06:20.590
负累在重在这

06:20.590 --> 06:22.590
负累在重新宣展的时候

06:22.590 --> 06:23.590
可能有些属性

06:23.590 --> 06:24.590
还没有重新

06:24.590 --> 06:25.590
还没有复制完

06:25.590 --> 06:26.590
对吧

06:26.590 --> 06:27.590
还没有复制完

06:27.590 --> 06:28.590
所以说

06:28.590 --> 06:29.590
我们这里放到指内里边得了

06:29.590 --> 06:31.590
放到每一个指内里边

06:31.590 --> 06:32.590
Render

06:33.590 --> 06:34.590
或者说我们放到这吧

06:34.590 --> 06:35.590
放到这

06:35.590 --> 06:36.590
放到游戏里边

06:36.590 --> 06:37.590
Render

06:37.590 --> 06:38.590
Render

06:38.590 --> 06:39.590
游戏显示出来

06:40.590 --> 06:41.590
好吧

06:41.590 --> 06:42.590
我们看一下

06:42.590 --> 06:43.590
要不然就放到指内里边得了

06:44.590 --> 06:45.590
或者说这样吧

06:45.590 --> 06:46.590
这样吧

06:46.590 --> 06:47.590
复制里边Render它的

06:47.590 --> 06:48.590
然后指内里边重新

06:48.590 --> 06:50.590
这个鸟这一块不是比较特殊吗

06:50.590 --> 06:51.590
它多了一个属性

06:51.590 --> 06:53.590
又重新了Render函数

06:53.590 --> 06:55.590
所谓鸟这里重新Render一次

06:55.590 --> 06:56.590
就这样子

06:56.590 --> 06:57.590
好来吧

06:57.590 --> 06:58.590
我们来试一下

06:58.590 --> 06:59.590
游戏开始Start

07:01.590 --> 07:02.590
你看游戏开始

07:02.590 --> 07:03.590
小料移动了

07:03.590 --> 07:04.590
大地移动了

07:04.590 --> 07:05.590
柱子也在不断的出现了

07:05.590 --> 07:06.590
看没有

07:06.590 --> 07:08.590
这不就开始了吗

07:08.590 --> 07:09.590
对吧

07:09.590 --> 07:10.590
开始就已经搞定了

07:10.590 --> 07:11.590
那么游戏暂停了

07:11.590 --> 07:12.590
游戏暂停

07:12.590 --> 07:13.590
我们来看一下

07:13.590 --> 07:14.590
游戏暂停

07:14.590 --> 07:15.590
什么叫做游戏暂停

07:15.590 --> 07:16.590
那么是不是这些事情

07:16.590 --> 07:17.590
全部得停止

07:17.590 --> 07:18.590
像这样什么

07:20.590 --> 07:22.590
把轻空

07:22.590 --> 07:24.590
Z点Timer轻空

07:24.590 --> 07:25.590
然后Z点Timer

07:25.590 --> 07:27.590
就移动了Timer轻空

07:27.590 --> 07:28.590
还有这个

07:28.590 --> 07:29.590
还有一件事情

07:29.590 --> 07:30.590
小料3次吧

07:31.590 --> 07:32.590
Start

07:32.590 --> 07:35.590
然后小料得停置3次吧

07:35.590 --> 07:36.590
Bird

07:36.590 --> 07:37.590
Stop

07:37.590 --> 07:38.590
停置3次吧

07:38.590 --> 07:40.590
然后柱子队的

07:40.590 --> 07:41.590
产生器

07:41.590 --> 07:42.590
得停置产生柱子

07:43.590 --> 07:44.590
Stop

07:44.590 --> 07:45.590
Produce

07:46.590 --> 07:47.590
不就完了吗

07:47.590 --> 07:48.590
这就不就停止了吗

07:48.590 --> 07:49.590
好来吧

07:49.590 --> 07:50.590
游戏开始

07:51.590 --> 07:52.590
来看一下

07:52.590 --> 07:53.590
Stop

07:53.590 --> 07:54.590
游戏停止

07:54.590 --> 07:56.590
一看全部都停止了

07:56.590 --> 07:57.590
对不对

07:57.590 --> 07:58.590
然后我们再来

07:58.590 --> 07:59.590
游戏开始

07:59.590 --> 08:00.590
又继续移动

08:00.590 --> 08:01.590
游戏停止

08:02.590 --> 08:03.590
游戏停止

08:04.590 --> 08:05.590
再来

08:05.590 --> 08:07.590
中间怎么隔了这么多呢

08:07.590 --> 08:08.590
我看一下

08:08.590 --> 08:09.590
这怎么回事

08:10.590 --> 08:11.590
Start

08:14.590 --> 08:15.590
Stop

08:15.590 --> 08:16.590
暂停

08:16.590 --> 08:17.590
Start

08:17.590 --> 08:18.590
明白了

08:18.590 --> 08:20.590
因为它要重新济时

08:20.590 --> 08:21.590
重新济时

08:21.590 --> 08:22.590
重新产生那个

08:22.590 --> 08:24.590
要间隔500毫秒

08:24.590 --> 08:25.590
那个问题算了吧

08:25.590 --> 08:27.590
不然的话也搞得太复杂了

08:27.590 --> 08:28.590
那个问题我知道怎么解决了

08:28.590 --> 08:30.590
但是搞得太复杂了

08:30.590 --> 08:31.590
就算了

08:31.590 --> 08:33.590
这是游戏开始暂停

08:33.590 --> 08:34.590
那么如果说

08:34.590 --> 08:36.590
我们要对应到世界里边

08:36.590 --> 08:37.590
世界里边怎么来处理呢

08:37.590 --> 08:38.590
比方说我们游戏里边

08:38.590 --> 08:39.590
给注册事件

08:39.590 --> 08:40.590
我们写这么一个函数

08:40.590 --> 08:42.590
叫RigEvent

08:42.590 --> 08:44.590
注册关联事件

08:45.590 --> 08:47.590
关联键盘事件

08:47.590 --> 08:49.590
那么这个东西怎么处理呢

08:49.590 --> 08:50.590
就是

08:50.590 --> 08:52.590
比方说调用RigEvent

08:52.590 --> 08:54.590
关联键盘事件

08:54.590 --> 08:55.590
有这么一个函数

08:55.590 --> 08:56.590
那么这个函数就是给

08:56.590 --> 08:57.590
Windows注册事件对不对

08:57.590 --> 08:58.590
OnKey

08:59.590 --> 09:00.590
看一下你事件

09:00.590 --> 09:01.590
按的键是啥

09:01.590 --> 09:03.590
如果E的key

09:03.590 --> 09:04.590
等于什么呢

09:04.590 --> 09:05.590
等于Enter

09:05.590 --> 09:07.590
表示你按的回车

09:07.590 --> 09:08.590
按的回车是什么呢

09:08.590 --> 09:10.590
就是游戏如果是暂停的

09:10.590 --> 09:11.590
游戏是开始的

09:11.590 --> 09:12.590
还去暂停

09:12.590 --> 09:14.590
那么判断一下ZS.Timer

09:14.590 --> 09:16.590
那么这里最好用那个

09:16.590 --> 09:17.590
用什么呢

09:17.590 --> 09:18.590
用键头函数

09:18.590 --> 09:19.590
保留ZS

09:19.590 --> 09:20.590
不然的话ZS有这个问题

09:20.590 --> 09:21.590
ZS

09:21.590 --> 09:22.590
如果Timer有值

09:22.590 --> 09:23.590
是不是现在

09:23.590 --> 09:24.590
是暂停的状态

09:24.590 --> 09:25.590
那干嘛呢

09:25.590 --> 09:27.590
是不是开始ZS.Start

09:27.590 --> 09:28.590
开始

09:28.590 --> 09:29.590
Ls

09:29.590 --> 09:30.590
如果说游戏

09:30.590 --> 09:31.590
已经开始了ZS.Stop

09:31.590 --> 09:32.590
这样子

09:32.590 --> 09:33.590
我们按回车键

09:33.590 --> 09:34.590
是不是可以控制的

09:34.590 --> 09:35.590
保存

09:35.590 --> 09:36.590
来吧

09:36.590 --> 09:37.590
我们按回车键

09:40.590 --> 09:41.590
没爆错

09:44.220 --> 09:45.220
我看一下

09:46.220 --> 09:49.220
我们输出一下E的key

09:49.220 --> 09:50.220
E的key

09:50.220 --> 09:52.660
Enter

09:53.660 --> 09:55.660
Enter没问题

09:55.660 --> 09:56.660
Enter

09:57.660 --> 09:58.660
Enter

09:59.660 --> 10:01.660
如果Timer有值

10:01.660 --> 10:02.660
如果Timer有值

10:02.660 --> 10:03.660
这写完了

10:03.660 --> 10:04.660
Timer有值Stop

10:04.660 --> 10:06.660
Timer没有值Start

10:06.660 --> 10:07.660
写完了

10:07.660 --> 10:08.660
你看

10:08.660 --> 10:09.660
开始

10:09.660 --> 10:12.360
暂停

10:13.360 --> 10:14.360
开始

10:16.360 --> 10:17.360
暂停

10:17.360 --> 10:18.360
对不对

10:18.360 --> 10:19.360
说没问题了

10:19.360 --> 10:20.360
对吧

10:20.360 --> 10:21.360
没问题了

10:21.360 --> 10:23.360
这是按这个键

10:23.360 --> 10:24.360
开始暂停

10:24.360 --> 10:25.360
好

10:25.360 --> 10:26.360
然后再来

10:26.360 --> 10:27.360
再来

10:27.360 --> 10:28.360
如果说你按的不是这个键

10:28.360 --> 10:29.360
按的是空格键

10:29.360 --> 10:30.360
key等于什么

10:30.360 --> 10:31.360
space

10:32.360 --> 10:33.360
space

10:33.360 --> 10:34.360
按的是空格键

10:34.360 --> 10:35.360
空格键的话

10:35.360 --> 10:36.360
是不是小料要挑

10:36.360 --> 10:37.360
ZS.Bird

10:37.360 --> 10:38.360
Jump

10:38.360 --> 10:39.360
对我们都写好这个方法了

10:39.360 --> 10:40.360
来吧

10:40.360 --> 10:42.670
看一下

10:43.670 --> 10:44.670
空格键

10:44.670 --> 10:45.670
我们输出一下E的key

10:47.670 --> 10:48.670
空格键

10:48.670 --> 10:49.670
哦

10:49.670 --> 10:50.670
它直接是空格

10:50.670 --> 10:51.670
直接是空格

10:51.670 --> 10:52.670
来吧

10:52.670 --> 10:53.670
你看

10:53.670 --> 10:56.110
小料是不是要挑

10:56.110 --> 10:57.110
对吧

10:57.110 --> 10:58.110
小料要挑

11:00.110 --> 11:01.110
你看

11:05.060 --> 11:06.060
跳的有点高了

11:06.060 --> 11:07.060
是吧

11:07.060 --> 11:08.060
跳的有点高了

11:08.060 --> 11:09.060
我们稍微改一下这个参数

11:09.060 --> 11:10.060
就Jump这一块

11:11.060 --> 11:12.060
Jump这一块

11:12.060 --> 11:13.060
400W吧

11:13.060 --> 11:14.060
400W差不多了

11:14.060 --> 11:16.880
这样差不多

11:16.880 --> 11:18.880
这样跳的没有那么高

11:18.880 --> 11:20.880
那么就去跳了

11:20.880 --> 11:21.880
那么就去跳了

11:21.880 --> 11:22.880
但是现在还有一个问题

11:22.880 --> 11:23.880
就暂停过后了

11:23.880 --> 11:24.880
暂停过后了

11:24.880 --> 11:25.880
其实

11:25.880 --> 11:26.880
当然你也可以给它速度

11:26.880 --> 11:27.880
你看

11:27.880 --> 11:28.880
这里是不是输出了

11:28.880 --> 11:29.880
也可以给它速度

11:29.880 --> 11:30.880
但是那个速度没有意义的

11:30.880 --> 11:31.880
因为它不会移动

11:31.880 --> 11:32.880
它不会移动

11:32.880 --> 11:33.880
重新

11:33.880 --> 11:35.880
重新启动过后才会移动

11:37.880 --> 11:38.880
那么这一块就已经搞定了

11:38.880 --> 11:39.880
那么之后

11:39.880 --> 11:41.880
剩下的就一件事了

11:41.880 --> 11:42.880
什么呢

11:42.880 --> 11:44.880
就是游戏适逢结束

11:44.880 --> 11:46.880
就是有没有碰到东西

11:46.880 --> 11:48.880
什么时候来看

11:48.880 --> 11:49.880
首先我们看着代码写的位置

11:49.880 --> 11:51.880
什么时候我要判断游戏

11:51.880 --> 11:53.880
它有没有碰到东西

11:53.880 --> 11:54.880
有没有碰到东西

11:54.880 --> 11:55.880
什么时候要判断了

11:55.880 --> 11:56.880
是不是在这

11:57.880 --> 11:59.880
所有的物体只要移动了过后

11:59.880 --> 12:00.880
在这

12:00.880 --> 12:02.880
所有的物体移动了过后

12:02.880 --> 12:03.880
你看这里是不是要移动

12:03.880 --> 12:04.880
所有的东西在移动

12:04.880 --> 12:05.880
移动往前往后

12:05.880 --> 12:06.880
移动完了过后

12:06.880 --> 12:07.880
我来判断什么

12:07.880 --> 12:08.880
了

12:09.880 --> 12:11.880
就是判断游戏适逢结束

12:11.880 --> 12:12.880
if

12:12.880 --> 12:13.880
好

12:13.880 --> 12:14.880
那么这里写个函数

12:14.880 --> 12:17.880
is game over

12:17.880 --> 12:19.880
游戏适逢结束

12:19.880 --> 12:20.880
看一下

12:20.880 --> 12:21.880
is game over

12:21.880 --> 12:22.880
游戏适逢结束

12:22.880 --> 12:24.880
如果游戏结束了

12:24.880 --> 12:26.880
所有东西是不是全在停

12:26.880 --> 12:28.880
this stop

12:28.880 --> 12:29.880
所有东西全在停

12:29.880 --> 12:31.880
并且我们用个属性来做标记

12:31.880 --> 12:32.880
游戏适逢结束

12:32.880 --> 12:34.880
is game over

12:34.880 --> 12:36.880
force

12:36.880 --> 12:37.880
一开始游戏适逢结束

12:37.880 --> 12:39.880
如果说你游戏结束了

12:39.880 --> 12:40.880
我们不但要停止

12:40.880 --> 12:42.880
而且要把标记一下

12:42.880 --> 12:44.880
game over

12:45.880 --> 12:46.880
把标记去

12:46.880 --> 12:47.880
对吧

12:47.880 --> 12:48.880
没问题吧

12:53.880 --> 12:55.880
如果说游戏

12:55.880 --> 12:56.880
那么这里关键是在这

12:56.880 --> 12:59.880
是否游戏结束怎么判断呢

12:59.880 --> 13:01.880
它有很多种判断方式

13:01.880 --> 13:02.880
这里一个个来

13:02.880 --> 13:03.880
首先我们可以判断

13:03.880 --> 13:05.880
鸟是不是已经碰到地面了

13:05.880 --> 13:07.880
鸟是不是已经碰到地面了

13:07.880 --> 13:08.880
怎么判断呢

13:08.880 --> 13:10.880
如果鸟的top值

13:10.880 --> 13:11.880
等于了什么呢

13:11.880 --> 13:12.880
等于了

13:12.880 --> 13:14.880
鸟力标不是一个属性吗

13:14.880 --> 13:15.880
叫max y

13:15.880 --> 13:17.880
最大的y坐标

13:17.880 --> 13:18.880
它是碰到大地了

13:18.880 --> 13:21.880
鸟碰到了大地

13:21.880 --> 13:23.880
那么这个时候游戏是不是结束了

13:23.880 --> 13:24.880
return to

13:24.880 --> 13:26.880
游戏结束了

13:26.880 --> 13:27.880
来看一下吧

13:27.880 --> 13:28.880
如果说游戏结束了

13:28.880 --> 13:30.880
我们在这里输出

13:30.880 --> 13:32.880
游戏结束

13:32.880 --> 13:33.880
保存

13:33.880 --> 13:34.880
看一下

13:34.880 --> 13:35.880
跳跳没有结束

13:35.880 --> 13:36.880
没有结束

13:36.880 --> 13:37.880
碰

13:37.880 --> 13:38.880
你看游戏结束

13:38.880 --> 13:39.880
是不是全部停止了

13:39.880 --> 13:40.880
但是这个时候

13:40.880 --> 13:41.880
你按回头键

13:41.880 --> 13:43.880
还可以继续玩

13:43.880 --> 13:44.880
还可以继续玩

13:44.880 --> 13:45.880
所以说我们这里还可以

13:45.880 --> 13:46.880
还要控制一下

13:46.880 --> 13:48.880
还要稍微控制一下

13:48.880 --> 13:50.880
就在这

13:50.880 --> 13:51.880
游戏开始的时候

13:51.880 --> 13:53.880
我们还要做这么一件事

13:53.880 --> 13:54.880
还做这么一个判断

13:54.880 --> 13:57.880
如果说游戏已经结束了

13:57.880 --> 13:58.880
game over

13:58.880 --> 13:59.880
已经结束了

13:59.880 --> 14:00.880
那么一点游戏开始

14:00.880 --> 14:02.880
相当于重新开始游戏了

14:02.880 --> 14:04.880
重新开始游戏

14:04.880 --> 14:05.880
重新开始游戏做什么呢

14:05.880 --> 14:06.880
我们做一个最简单的事情

14:06.880 --> 14:08.880
window reload

14:08.880 --> 14:09.880
window

14:10.880 --> 14:13.880
就是叫做什么location

14:13.880 --> 14:15.880
window刷新页面

14:15.880 --> 14:17.880
到刷新页面就完事了

14:17.880 --> 14:18.880
来吧

14:18.880 --> 14:19.880
看一下

14:19.880 --> 14:21.880
跳跳碰大地

14:21.880 --> 14:22.880
然后我们再按回车

14:22.880 --> 14:23.880
你看刷新页面

14:23.880 --> 14:25.880
重新开始

14:25.880 --> 14:26.880
重新开始

14:26.880 --> 14:27.880
我们做这么一件事

14:27.880 --> 14:29.880
这是碰大地游戏结束

14:29.880 --> 14:32.880
那么还有没有别的游戏结束了

14:32.880 --> 14:33.880
还有没有别的游戏结束了

14:33.880 --> 14:34.880
还有

14:34.880 --> 14:35.880
就是他没有碰大地

14:35.880 --> 14:36.880
但是碰到了柱子

14:36.880 --> 14:37.880
对吧

14:37.880 --> 14:39.880
他碰到的柱子游戏也要结束

14:39.880 --> 14:40.880
那么

14:40.880 --> 14:41.880
是不是要一个柱子

14:41.880 --> 14:42.880
一个柱子判断

14:42.880 --> 14:43.880
对不对

14:43.880 --> 14:44.880
来吧

14:44.880 --> 14:46.880
循环

14:46.880 --> 14:47.880
循环啥呢

14:47.880 --> 14:48.880
我们循环这个吧

14:48.880 --> 14:52.880
this pipe producer

14:52.880 --> 14:53.880
他不是有柱子队吗

14:53.880 --> 14:54.880
对不对

14:54.880 --> 14:56.880
他不是有柱子队吗

14:56.880 --> 15:00.880
paras for each pair

15:00.880 --> 15:01.880
一个柱子队

15:01.880 --> 15:02.880
一个柱子队打出来看

15:02.880 --> 15:03.880
看一下这个柱子队

15:03.880 --> 15:06.880
跟这个鸟有没有碰撞

15:06.880 --> 15:07.880
看

15:07.880 --> 15:09.880
柱子队

15:09.880 --> 15:10.880
paras

15:10.880 --> 15:15.880
是否跟鸟跟半的

15:15.880 --> 15:18.880
进行了碰撞

15:18.880 --> 15:19.880
那么这个柱子队跟鸟

15:19.880 --> 15:20.880
有没有进行碰撞呢

15:20.880 --> 15:21.880
这个柱子队

15:21.880 --> 15:22.880
他用两根柱子

15:22.880 --> 15:23.880
对吧

15:23.880 --> 15:24.880
是不是我们分开判断

15:24.880 --> 15:25.880
对不对

15:25.880 --> 15:26.880
是不是要分开判断

15:26.880 --> 15:27.880
我们这里刚才写个

15:27.880 --> 15:29.880
復环吧

15:29.880 --> 15:32.880
復环还好一点

15:32.880 --> 15:34.880
let's add new

15:35.880 --> 15:37.880
this pipe producer

15:37.880 --> 15:40.880
paras

15:40.880 --> 15:43.880
拿到每一个柱子队

15:43.880 --> 15:45.880
par

15:45.880 --> 15:47.880
因为我们一旦看到

15:47.880 --> 15:48.880
碰撞了一个

15:48.880 --> 15:49.880
我就不需要再继续

15:49.880 --> 15:50.880
进行循环了

15:50.880 --> 15:51.880
用for each的话

15:51.880 --> 15:52.880
会一直循环到底

15:52.880 --> 15:53.880
没有什么意义

15:53.880 --> 15:54.880
那么我们要看什么呢

15:54.880 --> 15:55.880
看柱子队

15:55.880 --> 15:56.880
paras 是不是

15:56.880 --> 15:57.880
跟鸟进行了碰撞

15:57.880 --> 15:58.880
是不是有两根柱子

15:58.880 --> 15:59.880
他里边

15:59.880 --> 16:00.880
有两根柱子

16:00.880 --> 16:01.880
我们可以拿到

16:01.880 --> 16:02.880
par里边的

16:03.880 --> 16:04.880
up

16:04.880 --> 16:05.880
pair

16:05.880 --> 16:06.880
up

16:06.880 --> 16:08.880
up pipe

16:08.880 --> 16:09.880
还可以拿到

16:09.880 --> 16:10.880
他下面那个柱子

16:11.880 --> 16:12.880
pair

16:12.880 --> 16:14.880
dump pipe

16:14.880 --> 16:15.880
可以拿到两个柱子

16:15.880 --> 16:16.880
分开判断

16:16.880 --> 16:17.880
分开判断

16:17.880 --> 16:18.880
那么我们这里

16:18.880 --> 16:19.880
需要有这么一个

16:19.880 --> 16:20.880
辅助函数

16:20.880 --> 16:21.880
来判断两个东西

16:21.880 --> 16:22.880
两个举行

16:22.880 --> 16:23.880
视访碰撞

16:23.880 --> 16:24.880
我们这里

16:24.880 --> 16:25.880
又加一个解释

16:25.880 --> 16:26.880
或者我们直接写到

16:26.880 --> 16:27.880
下面吧

16:27.880 --> 16:28.880
写个辅助

16:28.880 --> 16:29.880
或者是写到

16:29.880 --> 16:30.880
上面也行

16:30.880 --> 16:31.880
写个辅助函数

16:31.880 --> 16:32.880
就是

16:32.880 --> 16:33.880
ease hit

16:33.880 --> 16:34.880
或者我们放到这也行

16:35.880 --> 16:36.880
放到这也行

16:36.880 --> 16:37.880
放到gaming里边也行

16:37.880 --> 16:38.880
ease hit

16:38.880 --> 16:40.880
视访碰撞

16:40.880 --> 16:41.880
就是

16:41.880 --> 16:42.880
给我两个举行

16:42.880 --> 16:43.880
rig

16:44.880 --> 16:45.880
e

16:45.880 --> 16:46.880
一个举行

16:46.880 --> 16:47.880
第二个举行

16:47.880 --> 16:49.880
我判断两个举行

16:49.880 --> 16:50.880
视访碰撞

16:51.880 --> 16:55.030
判断

16:55.030 --> 16:57.030
两个举行

16:57.030 --> 16:58.030
视访碰撞

17:00.030 --> 17:01.030
那么我们这里

17:01.030 --> 17:02.030
如果说这个函数写好了

17:02.030 --> 17:03.030
那么这里

17:03.030 --> 17:04.030
就很简单了

17:04.030 --> 17:05.030
判断一下

17:05.030 --> 17:06.030
如果说

17:07.030 --> 17:08.030
这个

17:08.030 --> 17:10.030
ease hit

17:10.030 --> 17:11.030
如果说这个了

17:11.030 --> 17:12.030
Bird

17:12.030 --> 17:13.030
跟什么呢

17:13.030 --> 17:14.030
跟这个

17:14.030 --> 17:15.030
上边那个柱子

17:15.030 --> 17:16.030
up

17:16.030 --> 17:17.030
pipe

17:17.030 --> 17:18.030
碰撞了

17:18.030 --> 17:20.030
是不是就return to

17:20.030 --> 17:21.030
对吧

17:21.030 --> 17:22.030
如果说

17:22.030 --> 17:24.030
同样的道理

17:24.030 --> 17:25.030
那么这里

17:25.030 --> 17:26.030
下个或者吧

17:26.030 --> 17:28.790
或者

17:28.790 --> 17:30.790
了跟下边那个柱子

17:30.790 --> 17:31.790
发生了碰撞

17:31.790 --> 17:33.790
那么也是return to

17:33.790 --> 17:34.790
都表示碰撞了

17:34.790 --> 17:36.790
我们这个结束整个函数

17:36.790 --> 17:37.790
换句话说

17:37.790 --> 17:38.790
如果循环结束了

17:38.790 --> 17:39.790
还没有碰撞

17:39.790 --> 17:40.790
return force

17:40.790 --> 17:41.790
游戏没有结束

17:41.790 --> 17:42.790
对不对

17:42.790 --> 17:43.790
那么现在关键

17:43.790 --> 17:44.790
变成这个函数了

17:44.790 --> 17:45.790
这个函数有两个举行

17:45.790 --> 17:46.790
传给你的

17:46.790 --> 17:47.790
Bird是个举行

17:47.790 --> 17:48.790
柱子是个举行

17:48.790 --> 17:49.790
两个举行

17:49.790 --> 17:50.790
能不能发生碰撞呢

17:50.790 --> 17:51.790
你看

17:51.790 --> 17:52.790
都是举行

17:52.790 --> 17:53.790
它都有这么一些属性

17:53.790 --> 17:54.790
它们有附类的

17:54.790 --> 17:55.790
它们都有这么一些属性

17:55.790 --> 17:56.790
那么我们要看

17:56.790 --> 17:57.790
两个举行

17:57.790 --> 17:58.790
是否发生碰撞

17:58.790 --> 17:59.790
它有这么一个规则

17:59.790 --> 18:00.790
碰撞检测

18:00.790 --> 18:01.790
就是

18:01.790 --> 18:04.790
看两横向

18:04.790 --> 18:07.790
两个举行的中心点

18:07.790 --> 18:10.790
中心点的距离

18:10.790 --> 18:12.790
也就是取中心点

18:12.790 --> 18:14.790
作为自差的绝对值

18:14.790 --> 18:16.790
是否小于

18:16.790 --> 18:17.790
小于

18:17.790 --> 18:18.790
小于多少呢

18:18.790 --> 18:20.790
小于就是

18:20.790 --> 18:25.790
举行宽度之合的一半

18:25.790 --> 18:28.790
这是举行碰撞的规则

18:28.790 --> 18:29.790
中向

18:29.790 --> 18:32.790
是两个举行中心点的

18:32.790 --> 18:33.790
这是横向距离

18:33.790 --> 18:34.790
这是横向距离

18:34.790 --> 18:36.790
这是中向距离

18:36.790 --> 18:37.790
是否小于

18:37.790 --> 18:39.790
举行高度之合的一半

18:39.790 --> 18:40.790
这是碰撞

18:40.790 --> 18:41.790
所以说

18:41.790 --> 18:42.790
我们要得到

18:42.790 --> 18:43.790
两个举行的中心点作标

18:43.790 --> 18:44.790
来吧

18:44.790 --> 18:47.790
Center

18:47.790 --> 18:51.790
X1

18:51.790 --> 18:52.790
第一个举行的

18:52.790 --> 18:53.790
中心点横作标

18:53.790 --> 18:55.790
Center X1

18:55.790 --> 18:56.790
那么等于什么呢

18:56.790 --> 18:58.790
等于这个举行的

18:58.790 --> 18:59.790
一个举行

18:59.790 --> 19:00.790
它的中心点横作标

19:00.790 --> 19:01.790
等于什么

19:01.790 --> 19:02.790
等于这个举行的

19:02.790 --> 19:04.790
Left它的横作标

19:04.790 --> 19:06.790
加上它宽度的一半

19:06.790 --> 19:07.790
对吧

19:07.790 --> 19:08.790
宽度的一半

19:08.790 --> 19:10.790
这不是中心点横作标吗

19:10.790 --> 19:11.790
好

19:11.790 --> 19:12.790
中心点重作标

19:12.790 --> 19:13.790
Y1

19:13.790 --> 19:15.790
那么等于它的top值

19:15.790 --> 19:16.790
加上它高度的一半

19:16.790 --> 19:17.790
这个你们画张图

19:17.790 --> 19:19.790
自然就出来了

19:19.790 --> 19:20.790
好来吧

19:20.790 --> 19:21.790
继续

19:21.790 --> 19:25.480
然后Center X2

19:25.480 --> 19:26.480
Y2

19:26.480 --> 19:27.480
那么这个等于呢

19:27.480 --> 19:30.480
第二个举行的横作标

19:30.480 --> 19:34.480
加上第二个举行的宽度的一半

19:34.480 --> 19:35.480
好

19:35.480 --> 19:36.480
这个是第二个举行的

19:36.480 --> 19:37.480
重作标

19:37.480 --> 19:38.480
加上第二个举行的高度的一半

19:38.480 --> 19:40.480
好就完了

19:40.480 --> 19:41.480
中心点算出来了

19:41.480 --> 19:43.480
那么中心点的横向距离

19:43.480 --> 19:45.480
D是X

19:45.480 --> 19:46.480
等于什么呢

19:46.480 --> 19:48.480
Mass absolute

19:48.480 --> 19:50.480
Center X1

19:50.480 --> 19:52.480
减去Center X2

19:52.480 --> 19:53.480
对吧

19:53.480 --> 19:55.480
横向距离

19:55.480 --> 19:58.480
中心点横向距离

19:58.480 --> 19:59.480
这要求绝对值的

19:59.480 --> 20:00.480
D是Y

20:00.480 --> 20:02.480
Y呢就是重向距离

20:02.480 --> 20:03.480
绝对值

20:03.480 --> 20:05.480
Center Y1

20:05.480 --> 20:07.480
减去Center Y2

20:07.480 --> 20:08.480
对吧

20:08.480 --> 20:09.480
这是中心点

20:09.480 --> 20:10.480
中心点

20:10.480 --> 20:11.480
重向距离

20:11.480 --> 20:12.480
好

20:12.480 --> 20:13.480
来吧

20:13.480 --> 20:14.480
什么叫碰撞

20:14.480 --> 20:15.480
碰撞就是

20:15.480 --> 20:16.480
横向上

20:16.480 --> 20:18.480
中心点的距离

20:18.480 --> 20:19.480
小于了

20:19.480 --> 20:21.480
两个举行宽度之合的一半

20:21.480 --> 20:23.480
第一个举行的宽度

20:23.480 --> 20:24.480
加上

20:24.480 --> 20:26.480
第二个举行的宽度

20:28.480 --> 20:29.480
除一二

20:29.480 --> 20:31.480
如果小于了这个值

20:31.480 --> 20:33.480
如果小于了这个值

20:33.480 --> 20:35.480
并且还有重向

20:35.480 --> 20:39.500
不要忘了重向

20:39.500 --> 20:40.500
重向就是

20:40.500 --> 20:42.500
两个举行的重向距离

20:42.500 --> 20:43.500
小于等

20:43.500 --> 20:45.500
小于了高度之合的一半

20:45.500 --> 20:46.500
如果发生了这件事

20:46.500 --> 20:48.500
说明碰撞了

20:48.500 --> 20:50.500
return to

20:50.500 --> 20:52.500
否则的话没有碰撞

20:52.500 --> 20:54.500
这就是两个举行的碰撞方式

20:58.670 --> 21:00.670
走走走

21:06.000 --> 21:07.000
好 停

21:09.000 --> 21:10.000
你看 是不是

21:10.000 --> 21:11.000
听到了

21:11.000 --> 21:12.000
我们看一下

21:12.000 --> 21:14.000
因为这个G17的间隔是16毫秒

21:14.000 --> 21:15.000
因为可能16毫秒

21:15.000 --> 21:17.000
它移动的位置比较长

21:17.000 --> 21:18.000
以后在16毫秒内

21:18.000 --> 21:20.000
它已经移动到那个位置了

21:20.000 --> 21:22.000
然后再进行的判断

21:22.000 --> 21:24.000
这里还有点问题 是吧

21:24.000 --> 21:26.000
还有点问题 我感觉

21:26.000 --> 21:27.000
就是移动到这儿的时候

21:27.000 --> 21:28.000
就应该结束了

21:28.000 --> 21:29.000
我看一下 两个举行

21:29.000 --> 21:34.600
up type 我看一下有没有爆错呢没有爆错啊没有爆错

21:35.600 --> 21:37.680
呃我们来看一下它这里

21:39.240 --> 21:42.400
两个举行的高度之合center x

21:43.400 --> 21:45.880
宽度的一半我们仔细观察一下啊

21:49.880 --> 21:54.040
再走再走 看一下碰上面的柱子啊 看一下哪个柱子出了问题

21:55.120 --> 21:59.280
碰上面的柱子哎 它可以绕过去是吧 那就不对啊 那就不对

22:00.000 --> 22:00.600
呃

22:04.080 --> 22:09.480
center x1 我们这里输出一下啊 输出一下 rake 1 和 rake 2 输出一下这两个

22:12.800 --> 22:24.980
啊 现在柱子还没有产生 呃 现在根本就没有运行这个函数你看看呗 它都没有运行这个函数哎

22:25.660 --> 22:30.220
呃 我们来看一下啊 is game over 我们在循环 paris

22:30.740 --> 22:37.260
啊 我们看一下这个 paris的lens 哦 这里点lens 少了这个句话啊 还没有进循环 我说吗

22:38.300 --> 22:38.540
啊

22:39.820 --> 22:57.800
来 现在碰一下 现在应该没问题了啊 你看是不是停止了 对吧 不能碰上啊 走啊 这里

22:58.600 --> 23:02.760
好 是不是碰上了 对吧 好 就写完了啊 整个程序就写完了

23:04.000 --> 23:09.200
呃 通过这个程序呢 可能呢 就像我之前课堂上之前说的

23:10.800 --> 23:13.320
因为我以前公开直播课讲过这个程序的

23:14.080 --> 23:19.680
可能呢 没有公开直播课那么难啊 公开直播课感觉还简单一些对吧 我们用面向过程的方式来写

23:19.720 --> 23:24.440
当时我们也用到了对象而已 只是我们没有写类 感觉还要简单一点呢

23:25.560 --> 23:34.240
这就是面向对象的这么一种特点 你如果说之前呢 没有接触这种模式的话 一开始就看到这个东西的话 确实困难

23:34.800 --> 23:37.400
因此呢 很多学家罢了同学呢 都反映就是说

23:38.240 --> 23:40.480
每次学到面向就是一学到面向对象

23:41.280 --> 23:45.120
啊 本来之前学的好好的 一学到面向对象就老虎啊 这一定是这样子

23:45.520 --> 23:50.440
不过好在呢 咱们前端呢 面向对象的场景呢 没有那么的多

23:51.720 --> 23:58.320
有没有呢 现在已经不少了啊 只是呢 要求你用面向对象的那种思维模式去携带嘛的

23:58.760 --> 24:06.640
这种情况呢 对于刚入职的程序而呢 没有那么多啊 所以说呢 对你就业呢 影响了不大

24:06.960 --> 24:08.040
但是如果说你要去

24:09.040 --> 24:10.040
呃

24:10.720 --> 24:19.680
要更 更广的就业面 或者说 你要去找到一个非常好的大厂的工作的话 你这一块能吸收多少

24:20.360 --> 24:21.400
尽量吸收多少

24:22.640 --> 24:27.520
前端再不断的发展 像前端的模式呢 各种各样的模式也在不断的发展

24:27.840 --> 24:33.800
因此呢 他要结合面向对象 面向过程和甚至呢 海硕石编程 都要结合他里边的思想

24:34.240 --> 24:37.920
因此呢 你多了解一种开发的模式呢 对你绝对没有坏处

24:38.320 --> 24:44.520
虽然说我们现在首次接触面向对象的时候呢 举这么一个例子呢 可能对大家确实难度比较高啊

24:45.880 --> 24:50.720
不过呢 我是希望呢 通过这个例子呢 你哪怕工作了一两年 再回过头来看这个

24:51.440 --> 24:56.120
看这个就是这个DEMON的话 对你仍然是有帮助的 我是希望达到这么一个效果

24:56.400 --> 25:02.920
就这几节课呢 不是说 你看完一遍就扔掉了啊 可以以后呢 没事的时候 反复看 反复去思考

25:03.640 --> 25:07.400
每一次看呢 看这个视频呢 对你都会有新的启发

25:07.800 --> 25:13.440
好吧 面向对象呢 他的拆分呢 是比较细的 就是说每一块呢 他只关心自己这一部分的事情

25:14.480 --> 25:20.280
而且把它形成一个高度聚合的一个内 那么通过这个内脑可以完成跟这个内相关的各种个功能

25:20.840 --> 25:23.840
这是面向对象 他在程序设计上的这么一个特点

25:24.560 --> 25:32.960
好啊 就这么一个例子啊 像数了 我希望让大家来尽量吧 尽量自己能吸收多少吸收多少啊 对后边的课程呢 也不会有太多的

25:33.360 --> 25:41.560
影响 总之呢 我这个视频呢 也不会删掉的啊 一直放在这 大家以后呢 有了一些感觉了过后了 再回回头来看啊 希望对你们有帮助

