WEBVTT

00:00.690 --> 00:06.190
咱们的废棋API呢 实际上是一个非常非常简洁的API

00:06.190 --> 00:14.190
实际上咱们上几课学习的废棋API基本使用了就已经涵盖了绝大部分我们使用废棋的场景了

00:14.190 --> 00:20.690
但是我们之前也说过废棋API里边它要解决的以前古老的一个问题的话

00:20.690 --> 00:27.690
它就是说我们在请求的时候可能会有一些比较拆分的比较细的一些场景

00:27.690 --> 00:32.690
比方说我们请求的时候有很多请求头的配置可能大概是相同的

00:32.690 --> 00:38.690
或者是我们请求里边的一些配置比方说缓存啊 比方说是否要发送Cookie啊

00:38.690 --> 00:42.690
这些配置可能都相同的 那么为了解决重复代码的话

00:42.690 --> 00:46.690
我们可能要自己去做一些封装 那么这一点呢

00:46.690 --> 00:51.690
ES6它也是考虑到的 所以说它拆分的实际上是比较精细的

00:51.690 --> 00:56.690
我们再来看一下上一节课我们使用的代码 这是我们上节课使用的代码

00:56.690 --> 01:01.690
我们把它复制过来吧 咱们上节课使用的代码就是

01:01.690 --> 01:06.690
直接使用废棋方法来去请求 对吧 当然这是一个核心的使用方式

01:06.690 --> 01:11.690
实际上它还支持另外一种方式 就是在这里边我们在废棋的时候

01:11.690 --> 01:15.690
不是要传的两个参数吗 第一个参数是什么 请求地址

01:15.690 --> 01:19.690
第二个参数是什么 第一个参数就是一个配置 对吧

01:19.690 --> 01:25.690
其实它在内部它会做这么一件事 把第一个参数就是你的请求地址

01:25.690 --> 01:31.690
以及第二个参数就是你的配置 把这两个参数在废棋函数的内部

01:31.690 --> 01:35.690
通过这两个参数去创建这么一个request对象

01:35.690 --> 01:39.690
它真正的请求的话 是用request对象去发送请求的

01:39.690 --> 01:43.690
有这个request对象 不是说用它发来发送请求

01:43.690 --> 01:47.690
请求里面的各种信息 它是通过封装一个对象来完成的

01:47.690 --> 01:52.690
因此它本身也提供给你另外一种方式 就是在这一个地方

01:52.690 --> 01:57.690
你去传递一个request对象 这样子也是可以的

01:57.690 --> 02:01.690
就是说你不去传递UIL地址 也不去传递什么配置

02:01.690 --> 02:05.690
而直接去传递一个request对象 而request什么意思 就是请求的意思

02:05.690 --> 02:08.690
你直接传递一个request对象也可以

02:08.690 --> 02:11.690
因此我们现在多了一种请求方式

02:11.690 --> 02:19.690
就是除了使用基本的废棋方法

02:19.690 --> 02:28.690
还可以通过创建一个request对象来完成请求

02:28.690 --> 02:34.690
实际上呢 实际上我们刚才说了 实际上fetch的内部

02:34.690 --> 02:38.690
就是如果说你没有传递request对象

02:38.690 --> 02:40.690
而是用之前的那种方式的话

02:40.690 --> 02:46.690
fetch的内部会帮你创建一个request对象

02:46.690 --> 02:48.690
那如果说他可以帮你做这件事情

02:48.690 --> 02:49.690
我们也可以自己做

02:49.690 --> 02:52.690
好 那我们整来创建一个request对象的

02:52.690 --> 02:55.690
比方说我们这里其实该写一下吧

02:55.690 --> 02:58.690
创建request对象的语法非常非常简单

02:58.690 --> 03:00.690
它是一个构造函数request

03:00.690 --> 03:03.690
你只需要通过六一个request

03:03.690 --> 03:07.690
然后这里边写上了第1个UIL地址 第2个配置

03:07.690 --> 03:10.690
是不是跟上级合是一样的

03:10.690 --> 03:13.690
配置的写法跟上级合都是一样的

03:13.690 --> 03:17.690
所以说我们这里 如果说你要去完成请求的话

03:17.690 --> 03:18.690
我们可以这样做

03:18.690 --> 03:21.690
我们在这里创建一个request

03:21.690 --> 03:23.690
六一个request对象

03:23.690 --> 03:26.690
当然这样子写反而麻烦一点

03:26.690 --> 03:27.690
这里去写配置

03:27.690 --> 03:29.690
配置的方式跟上级合一样

03:29.690 --> 03:31.690
那么这里我们把request对象放进来

03:31.690 --> 03:34.690
也可以完成一模一样的效果

03:34.690 --> 03:35.690
好 咱们来试一下

03:35.690 --> 03:37.690
点击右边 打开

03:37.690 --> 03:41.960
点击 检查

03:41.960 --> 03:43.960
好 我们这里刷新

03:43.960 --> 03:45.960
然后点按钮 你看

03:45.960 --> 03:46.960
是不是仍然可以拿到数据

03:46.960 --> 03:49.960
说明了这种方式它也是支持的

03:49.960 --> 03:50.960
那么这样子一来了

03:50.960 --> 03:51.960
它就会有一个好处

03:51.960 --> 03:52.960
就是说什么呢

03:52.960 --> 03:55.960
就是如果说我们有的时候

03:55.960 --> 04:00.960
要去得到一个通用的一种请求

04:00.960 --> 04:03.960
请求的这种方式的话

04:03.960 --> 04:05.960
我们可以通过一个函数

04:05.960 --> 04:07.960
来帮我们创建一个request对象

04:07.960 --> 04:08.960
比方说我们这里

04:08.960 --> 04:10.960
可以通过这么一个函数

04:11.960 --> 04:13.960
info

04:13.960 --> 04:14.960
得到一个request对象

04:14.960 --> 04:16.960
OK 那么我们这里

04:16.960 --> 04:18.960
我们就可以创建一个request对象

04:18.960 --> 04:20.960
然后把它返回

04:20.960 --> 04:21.960
那么这一边我们只需要去

04:21.960 --> 04:24.960
得到这个request对象就行了

04:24.960 --> 04:25.960
就是说我们如果说

04:25.960 --> 04:26.960
这里有些配置都是通用的

04:26.960 --> 04:28.960
我们就可以用这种方式来

04:28.960 --> 04:29.960
进行处理

04:29.960 --> 04:30.960
其实通过这个例子

04:30.960 --> 04:32.960
大家可以感觉得到

04:32.960 --> 04:33.960
非起这个API

04:33.960 --> 04:34.960
它是把它划分得比较细的

04:34.960 --> 04:37.960
你请求是请求 想应是想应

04:37.960 --> 04:38.960
包括我们后面还会学

04:38.960 --> 04:40.960
你的头部Headers

04:40.960 --> 04:42.960
它也是一个封装的一个对象

04:42.960 --> 04:44.960
就是这种方式

04:44.960 --> 04:46.960
当然效果是完全一样的

04:46.960 --> 04:47.960
我们也可以把request对象

04:47.960 --> 04:48.960
打印出来看一下

04:48.960 --> 04:49.960
它里面有哪些属性

04:49.960 --> 04:51.960
保存 咱们可以看一下

04:51.960 --> 04:52.960
request对象

04:52.960 --> 04:55.960
你看 创建request对象里面

04:55.960 --> 04:57.960
它不就是一些配置信息吗

04:57.960 --> 04:58.960
touch

04:58.960 --> 04:59.960
credentials

04:59.960 --> 05:01.960
然后method

05:01.960 --> 05:02.960
mode

05:02.960 --> 05:04.960
还包括Headers

05:04.960 --> 05:05.960
这些东西

05:05.960 --> 05:06.960
它都在对象里面

05:06.960 --> 05:09.960
可以查看得到

05:09.960 --> 05:10.960
那么另外一点

05:10.960 --> 05:12.960
我要补充一点说明的就是

05:12.960 --> 05:14.960
request对象

05:14.960 --> 05:16.960
要有个注意点

05:16.960 --> 05:17.960
如果你说

05:17.960 --> 05:20.960
如果你打算通过request对象

05:20.960 --> 05:24.960
来去发送一个请求的话

05:24.960 --> 05:25.960
通过一个request对象

05:25.960 --> 05:26.960
发送一个请求

05:26.960 --> 05:27.960
而不是说直接

05:27.960 --> 05:29.960
像我们上几课那样去做的话

05:29.960 --> 05:30.960
你有个注意点

05:30.960 --> 05:31.960
注意点是什么

05:31.960 --> 05:33.960
就是说

05:33.960 --> 05:35.960
尽量保证

05:35.960 --> 05:43.960
每次请求都是一个新的request对象

05:43.960 --> 05:45.960
就是说你每一次请求的话

05:45.960 --> 05:47.960
你都要去创建一个新的request对象

05:47.960 --> 05:50.960
你说你不要把之前已经请求的

05:50.960 --> 05:51.960
已经发送请求

05:51.960 --> 05:52.960
就让你这里

05:52.960 --> 05:56.960
比方说我们这里用这种模式

05:56.960 --> 05:58.960
比方说你如果从这样子写的话

05:58.960 --> 05:59.960
就不是很好

05:59.960 --> 06:00.960
比方说我们这里定一个变量

06:00.960 --> 06:01.960
定一个全局变量

06:01.960 --> 06:02.960
判断一下

06:02.960 --> 06:03.960
如果全局变量

06:03.960 --> 06:06.960
有些同学可能比较担心效率的问题

06:06.960 --> 06:08.960
所以说他尽量让request对象的

06:08.960 --> 06:09.960
只有一个

06:09.960 --> 06:11.960
如果说你没有request对象的话

06:11.960 --> 06:12.960
OK

06:12.960 --> 06:14.960
我给你创建这么一个request对象

06:14.960 --> 06:15.960
没有的话

06:15.960 --> 06:16.960
我给你创建

06:16.960 --> 06:17.960
如果说你有了之后

06:17.960 --> 06:19.960
我就不创建了

06:19.960 --> 06:20.960
可能有些同学

06:20.960 --> 06:22.960
他可能会写出这么一种写法

06:22.960 --> 06:23.960
那么这么一种写法

06:23.960 --> 06:25.960
实际上是不好的

06:25.960 --> 06:27.960
实际上是不好的

06:27.960 --> 06:29.960
感觉上这里好像是没有什么问题

06:29.960 --> 06:31.960
但是这种书写习惯不好

06:31.960 --> 06:32.960
为什么不好

06:32.960 --> 06:33.960
因为你请

06:33.960 --> 06:35.960
他是这里是有这么一回事

06:35.960 --> 06:37.960
因为你请求的时候

06:37.960 --> 06:39.960
是要发生一个请求体的

06:39.960 --> 06:40.960
对吧

06:40.960 --> 06:41.960
比方说你pose的请求

06:41.960 --> 06:42.960
对吧

06:42.960 --> 06:43.960
get请求当然没无所谓

06:43.960 --> 06:45.960
但是pose的请求的时候

06:45.960 --> 06:46.960
是不是要发生一个请求体

06:46.960 --> 06:47.960
对吧

06:47.960 --> 06:48.960
那么这个请求体里边

06:48.960 --> 06:51.960
可能数据比较多

06:51.960 --> 06:52.960
更有深者

06:52.960 --> 06:54.960
可能是一个恶尽制的数据

06:54.960 --> 06:55.960
他数据量很大

06:55.960 --> 06:56.960
比方上传文件

06:56.960 --> 06:57.960
他的数据量很大

06:57.960 --> 06:58.960
他放在请求体里边

06:58.960 --> 07:00.960
他不断的上传

07:00.960 --> 07:01.960
那么

07:01.960 --> 07:04.960
他如果说数据量比较多的时候

07:04.960 --> 07:06.960
他可能会把它形成一个流

07:06.960 --> 07:07.960
什么就流呢

07:07.960 --> 07:10.960
就是说我对象里边要记录

07:10.960 --> 07:12.960
我现在上传的进度

07:12.960 --> 07:14.960
目前上传到哪个位置了

07:14.960 --> 07:16.960
这个流里边上传到哪个位置了

07:16.960 --> 07:18.960
那如果说你之前的对象

07:18.960 --> 07:19.960
你再去重用的话

07:19.960 --> 07:21.960
那么会把这个进度

07:21.960 --> 07:23.960
也跟着重用了

07:23.960 --> 07:25.960
之前本来已经上传百分之百了

07:25.960 --> 07:26.960
那么你下一次请求的话

07:26.960 --> 07:27.960
他一看

07:27.960 --> 07:28.960
这个流的数据

07:28.960 --> 07:29.960
怎么已经上传完了

07:29.960 --> 07:30.960
那还怎么上传呢

07:30.960 --> 07:31.960
对不对

07:31.960 --> 07:33.960
所以说为了避免这些

07:33.960 --> 07:35.960
出问题的点

07:35.960 --> 07:37.960
大家尽量的把这个request

07:37.960 --> 07:38.960
每一次创建的

07:38.960 --> 07:39.960
每一次就是请求了

07:39.960 --> 07:41.960
都要用一个全新的request

07:41.960 --> 07:42.960
就是这个点

07:42.960 --> 07:43.960
大家注意一下

07:43.960 --> 07:44.960
如果是你是get请求的话

07:44.960 --> 07:45.960
倒也无所谓

07:45.960 --> 07:47.960
但是我们书写习惯

07:47.960 --> 07:50.960
是尽量的去创建一个新的请求

07:50.960 --> 07:51.960
那如果说有的时候

07:51.960 --> 07:52.960
你拿到的是一个

07:52.960 --> 07:54.960
原来的request对象

07:54.960 --> 07:57.960
你拿到的是有原来的request对象

07:57.960 --> 07:58.960
那么

07:58.960 --> 08:00.960
为了避免出问题

08:00.960 --> 08:02.960
为了避免出问题

08:02.960 --> 08:03.960
比方说你这里

08:03.960 --> 08:04.960
也不知道哪来的

08:04.960 --> 08:05.960
反正呢

08:05.960 --> 08:06.960
单码到了第二十二行

08:06.960 --> 08:08.960
你总之拿到一个request对象

08:08.960 --> 08:10.960
这个对象有可能已经被用过了

08:10.960 --> 08:11.960
就是已经请求过了

08:11.960 --> 08:12.960
这个时候

08:12.960 --> 08:14.960
你可能又要去发送一个请求

08:14.960 --> 08:15.960
那么这个时候

08:15.960 --> 08:17.960
我又不想去重新写单码

08:17.960 --> 08:18.960
又把这些东西配置一遍

08:18.960 --> 08:19.960
那怎么办呢

08:19.960 --> 08:20.960
request对象里面

08:20.960 --> 08:21.960
给你提供的一个方法

08:21.960 --> 08:22.960
这个方法用的很少

08:22.960 --> 08:25.960
平时你直接新建就完事了

08:25.960 --> 08:26.960
这个方法怎么用

08:26.960 --> 08:27.960
这个方法是这样子

08:28.960 --> 08:30.960
通过它里面一个clone

08:30.960 --> 08:32.960
一个clone函数

08:32.960 --> 08:33.960
一个clone函数

08:33.960 --> 08:35.960
就是复制

08:35.960 --> 08:36.960
复制

08:36.960 --> 08:37.960
clone什么意思

08:37.960 --> 08:38.960
就是复制的意思

08:38.960 --> 08:40.960
复制一个全新的request对象

08:40.960 --> 08:42.960
那这个新的request对象

08:42.960 --> 08:44.960
跟之前的配置是完全一样的

08:44.960 --> 08:46.960
clone

08:46.960 --> 08:49.960
一个全新的request对象

08:49.960 --> 08:51.960
配置一致

08:51.960 --> 08:53.960
配置保持一致

08:53.960 --> 08:54.960
但是它body里面

08:54.960 --> 08:56.960
如果说数据量比较大的话

08:56.960 --> 08:57.960
比较流传输的话

08:57.960 --> 08:58.960
ok

08:58.960 --> 08:59.960
那么它是从最开始的位置

08:59.960 --> 09:00.960
开始传输的

09:00.960 --> 09:02.960
主要是避免这个问题

09:02.960 --> 09:03.960
那么这里呢

09:03.960 --> 09:04.960
效果是一样的

09:05.960 --> 09:06.960
就是大家注意一下

09:06.960 --> 09:07.960
这个点就行了

09:07.960 --> 09:08.960
其他都没啥

09:08.960 --> 09:09.960
是不是很简单

09:09.960 --> 09:10.960
就说完了

09:10.960 --> 09:11.960
这就是request对象

09:11.960 --> 09:12.960
不过呢

09:12.960 --> 09:13.960
我们就了解一下就行了

09:13.960 --> 09:14.960
因为平时我们用的最多的

09:14.960 --> 09:15.960
还是基本使用

09:15.960 --> 09:16.960
好吧

