WEBVTT

00:00.000 --> 00:03.440
这些可能我们开始来真正的实现这个认函数

00:03.440 --> 00:05.720
当然我们一节课肯定是搞不定的

00:05.720 --> 00:07.120
这个认函数是最复杂的

00:07.120 --> 00:09.520
其实我们PromiseA加规范里面

00:09.520 --> 00:11.680
最复杂的就是认函数了

00:11.680 --> 00:14.360
因为它就是规定认函数如何去执行

00:14.360 --> 00:16.120
我们来看一下这个认函数

00:16.120 --> 00:18.000
我们知道它要传两个参数

00:18.000 --> 00:19.200
当然你传一个的话

00:19.200 --> 00:21.000
第二个参数相当于是undie band

00:21.000 --> 00:23.280
然后这个认函数还可以多次调用

00:23.280 --> 00:24.560
你看我这里调了两次

00:24.560 --> 00:26.200
实际上可以调用很多次的

00:26.200 --> 00:29.080
那么每一次调用是传了一个函数进去

00:29.240 --> 00:31.200
那么我现在问大家第一个问题

00:31.200 --> 00:33.000
这个函数是不是立即执行

00:34.280 --> 00:36.560
不是 它应该放到微对的也就执行

00:36.560 --> 00:38.840
那是不是立即把它放到微对的

00:39.720 --> 00:41.040
其实也不是

00:41.040 --> 00:41.880
为什么呢

00:41.880 --> 00:44.200
如果说这些函数立即放到微对的

00:44.200 --> 00:45.120
那你想一想

00:45.120 --> 00:47.240
那一定是这些函数先执行

00:47.240 --> 00:48.080
对吧

00:48.080 --> 00:49.240
那凭什么要执行呢

00:49.240 --> 00:51.080
它必须要成功之后才执行

00:51.080 --> 00:52.000
你看我这儿

00:52.000 --> 00:56.720
是不是一秒钟之后才成功

00:56.880 --> 00:57.880
那你先讲一下

00:57.880 --> 00:59.720
这些函数是马上执行吗

00:59.720 --> 01:01.360
那肯定不是马上执行

01:01.360 --> 01:02.880
甚至都不会马上放到微对的

01:02.880 --> 01:05.440
你看是不是等了一秒钟才出来的

01:05.440 --> 01:07.280
因此我们认为

01:07.280 --> 01:10.880
函数它并不是马上执行

01:10.880 --> 01:13.520
也不是马上把它放到微对的

01:13.520 --> 01:15.720
我们可以认为

01:15.720 --> 01:17.240
放到微对的就是马上执行了

01:17.240 --> 01:18.040
对吧

01:18.040 --> 01:19.960
它并不是马上要去做这件事

01:19.960 --> 01:21.280
而是什么时候做呢

01:21.280 --> 01:24.720
是要等状态确定了之后再去做

01:24.720 --> 01:25.720
那我们想一想

01:25.720 --> 01:28.720
认函数它到底要做什么事

01:28.720 --> 01:30.080
其实我们只需梳理的话

01:30.080 --> 01:30.720
我们知道

01:30.720 --> 01:32.240
认函数它做什么事呢

01:32.240 --> 01:34.760
它做的事情其实就是

01:34.760 --> 01:38.040
把我们的函数放到一个对定

01:38.040 --> 01:40.720
第一个函数调用RIN放进去一个执行吗

01:40.720 --> 01:42.120
不执行

01:42.120 --> 01:43.520
就相当于是一个数字

01:43.520 --> 01:44.520
然后第二个

01:44.520 --> 01:45.840
我们又调用RIN

01:45.840 --> 01:47.400
又放一个函数进去

01:47.400 --> 01:48.280
再调一次RIN

01:48.280 --> 01:49.440
又放一个函数进去

01:49.440 --> 01:51.320
再调一次又放一个

01:51.320 --> 01:51.520
对吧

01:51.520 --> 01:53.720
放了很多的函数

01:54.720 --> 01:57.720
等到将来状态确定了之后

01:57.720 --> 01:59.720
我们再依次去执行这个对定

01:59.720 --> 02:01.720
从后到尾把执行一遍

02:01.720 --> 02:02.720
把这个函数

02:02.720 --> 02:03.720
是不是这个意思

02:03.720 --> 02:04.720
所以说呢

02:04.720 --> 02:06.720
我们理清楚这个之后

02:06.720 --> 02:09.720
我们Promise里面就需要一个对定

02:09.720 --> 02:11.720
来存放这个函数

02:11.720 --> 02:14.720
因此我们任函数的作用就特别简单了

02:14.720 --> 02:15.720
就变成了什么了

02:15.720 --> 02:16.720
你给我一个函数

02:16.720 --> 02:17.720
我放对定里面去

02:17.720 --> 02:18.720
给我一个函数

02:18.720 --> 02:19.720
我放对定里面去

02:19.720 --> 02:20.720
好 那于是呢

02:20.720 --> 02:21.720
我在这里呢

02:21.720 --> 02:22.720
去写上这么一个对定

02:22.720 --> 02:24.720
这个对定其实也可以非常非常简单

02:24.720 --> 02:26.720
我们就该取个名字叫Handlers

02:26.720 --> 02:28.720
叫做处理函数

02:28.720 --> 02:30.720
就是一个函数数

02:30.720 --> 02:33.720
处理函数形成的对列

02:33.720 --> 02:35.720
当然这个对定里面呢

02:35.720 --> 02:36.720
我们可以想象

02:36.720 --> 02:37.720
每一项是什么

02:37.720 --> 02:38.720
每一项不就是一个函数吗

02:38.720 --> 02:39.720
对不对

02:39.720 --> 02:41.720
我就把Unfuel的放进来

02:41.720 --> 02:42.720
调用认的时候

02:42.720 --> 02:44.720
把Unfuel接个体的也放进来

02:44.720 --> 02:46.720
好 那么这个时候就产生问题了

02:46.720 --> 02:48.720
那我能这样做吗

02:48.720 --> 02:49.720
如果说我这里

02:49.720 --> 02:51.720
直接写个HandlersPush

02:51.720 --> 02:54.720
把这个Unfuel的放进去

02:54.720 --> 02:55.720
然后呢

02:55.720 --> 02:56.720
我们再来一个Push

02:56.720 --> 02:58.720
或者是直接在这里用个兜号

02:58.720 --> 02:59.720
可以加多个的

02:59.720 --> 03:01.720
Unfuel接个体的也放进去

03:01.720 --> 03:02.720
我能这样做吗

03:02.720 --> 03:04.720
好像不小

03:04.720 --> 03:05.720
为什么呢

03:05.720 --> 03:07.720
如果说你这样做了

03:07.720 --> 03:09.720
那么会导致一个什么样的问题呢

03:09.720 --> 03:10.720
你并不

03:10.720 --> 03:12.720
将来当到时候要执行的时候

03:12.720 --> 03:13.720
看到第一个函数

03:13.720 --> 03:15.720
比方说将来成功了

03:15.720 --> 03:16.720
将来成功了

03:16.720 --> 03:18.720
我们现在对列里面有两个函数

03:18.720 --> 03:20.720
一个是Fn1

03:20.720 --> 03:21.720
一个是Fn2

03:21.720 --> 03:23.720
如果说我们再多次调用认的话

03:23.720 --> 03:25.720
比方说多次调用认

03:25.720 --> 03:28.720
那么它就可能会放很多的函数进去

03:28.720 --> 03:29.720
将来成功了

03:29.720 --> 03:30.720
要执行

03:30.720 --> 03:31.720
你拿出第一个函数

03:31.720 --> 03:33.720
你并不知道这个函数是成功之后执行

03:33.720 --> 03:34.720
还是失败之后执行

03:34.720 --> 03:35.720
你并不知道

03:35.720 --> 03:36.720
你拿到第二个函数

03:36.720 --> 03:38.720
也不知道这个函数是成功之后执行

03:38.720 --> 03:40.720
还是失败之后执行

03:40.720 --> 03:41.720
它也不知道

03:41.720 --> 03:42.720
对不对

03:42.720 --> 03:44.720
是不是遇到这么一个问题

03:44.720 --> 03:45.720
因此我们就觉得

03:45.720 --> 03:46.720
那么这一块呢

03:46.720 --> 03:47.720
我们还要标记

03:47.720 --> 03:49.720
每个函数是成功之后执行

03:49.720 --> 03:51.720
还是失败之后执行

03:51.720 --> 03:52.720
所以说这个Handler是数主

03:52.720 --> 03:54.720
还不是单单的

03:54.720 --> 03:56.720
不停的往里边放函数那么简单

03:56.720 --> 03:57.720
它应该放的是什么呢

03:57.720 --> 04:00.720
应该放的是一个一个的对象

04:00.720 --> 04:01.720
第一个对象里边

04:01.720 --> 04:02.720
我们把它取个属性

04:02.720 --> 04:04.720
叫sql

04:04.720 --> 04:05.720
执行器

04:05.720 --> 04:06.720
是个函数

04:06.720 --> 04:08.720
然后呢就是

04:08.720 --> 04:10.720
要求的状态是什么呢

04:10.720 --> 04:11.720
state

04:11.720 --> 04:15.800
状态的是fulfilled

04:15.800 --> 04:16.800
对吧

04:16.800 --> 04:17.800
这是第一个对象

04:17.800 --> 04:18.800
第二个对象呢

04:18.800 --> 04:20.800
是sql

04:21.800 --> 04:22.800
fn2

04:22.800 --> 04:23.800
函数2

04:23.800 --> 04:24.800
然后呢要求的状态

04:24.800 --> 04:25.800
是什么状态呢

04:25.800 --> 04:26.800
叫rejected

04:26.800 --> 04:28.800
是不是要这样子

04:28.800 --> 04:29.800
对吧

04:29.800 --> 04:31.800
因此它要放一个一个的对象

04:31.800 --> 04:32.800
那么我们把这件事呢

04:32.800 --> 04:34.800
单独去抽离一个函数来做这件事

04:34.800 --> 04:36.800
叫pooch

04:36.800 --> 04:38.800
handlers

04:38.800 --> 04:39.800
我们给它去

04:39.800 --> 04:41.800
给它一些参数

04:41.800 --> 04:42.800
第一个参数呢

04:42.800 --> 04:43.800
你要给我传个函数

04:43.800 --> 04:45.800
sql

04:45.800 --> 04:46.800
第二个参数呢

04:46.800 --> 04:47.800
state

04:47.800 --> 04:49.800
打个注式

04:49.800 --> 04:51.800
这个函数做什么事情呢

04:51.800 --> 04:53.800
向

04:53.800 --> 04:55.800
处理对列中

04:55.800 --> 04:57.800
添加一个

04:57.800 --> 04:58.800
函数

04:58.800 --> 04:59.800
那么这就是

04:59.800 --> 05:01.800
第一个参数就是函数本身

05:01.800 --> 05:03.800
分析

05:03.800 --> 05:05.800
这是

05:05.800 --> 05:07.800
添加的函数

05:07.800 --> 05:08.800
第二个参数是什么呢

05:08.800 --> 05:09.800
是状态

05:09.800 --> 05:10.800
对吧

05:10.800 --> 05:12.800
是个支付创

05:12.800 --> 05:13.800
表示的是

05:13.800 --> 05:14.800
该函数

05:14.800 --> 05:16.800
什么状态

05:16.800 --> 05:17.800
下执行

05:17.800 --> 05:18.800
以成功之后执行

05:18.800 --> 05:20.800
还是失败之后执行

05:20.800 --> 05:21.800
那么我们要在这里写

05:21.800 --> 05:22.800
那这里写法其实很简单

05:22.800 --> 05:23.800
我怎么写呢

05:23.800 --> 05:24.800
我就z

05:24.800 --> 05:25.800
handlers

05:25.800 --> 05:26.800
pooch

05:26.800 --> 05:27.800
添加一个对象

05:27.800 --> 05:29.800
这对象里边有这么一些属性

05:29.800 --> 05:31.800
一个是sql

05:31.800 --> 05:33.800
一个是state

05:33.800 --> 05:35.800
是把它加到这个handlers

05:35.800 --> 05:37.800
是不是加进去

05:37.800 --> 05:38.800
对不对

05:38.800 --> 05:39.800
那我们这边呢

05:39.800 --> 05:40.800
是不是要

05:40.800 --> 05:41.800
怎么处理这个双呢

05:41.800 --> 05:42.800
是不是要调用

05:42.800 --> 05:43.800
调用两次

05:43.800 --> 05:45.800
一个呢是

05:45.800 --> 05:46.800
z

05:47.800 --> 05:49.800
不举handlers吧

05:49.800 --> 05:50.800
不夹s

05:50.800 --> 05:51.800
为什么

05:51.800 --> 05:52.800
每次加一个嘛

05:52.800 --> 05:53.800
第一个参数传什么呢

05:53.800 --> 05:54.800
复复有的

05:54.800 --> 05:55.800
第二参数传什么呢

05:55.800 --> 05:56.800
状态

05:56.800 --> 05:57.800
状态就是复复有的

05:57.800 --> 05:58.800
对吧

05:58.800 --> 05:59.800
那个长量

05:59.800 --> 06:01.800
是不是个支付创

06:01.800 --> 06:02.800
复复有的

06:02.800 --> 06:03.800
那么这

06:03.800 --> 06:04.800
加上第一个函数

06:04.800 --> 06:05.800
然后加上第二个函数

06:05.800 --> 06:06.800
对这个体的

06:06.800 --> 06:08.800
对

06:08.800 --> 06:10.800
对这个体的

06:10.800 --> 06:13.800
表示说

06:13.800 --> 06:14.800
这个函数

06:14.800 --> 06:15.800
只有成功之后才执行

06:15.800 --> 06:16.800
这个函数

06:16.800 --> 06:17.800
只有失败之后执行

06:17.800 --> 06:18.800
那么具体怎么执行

06:18.800 --> 06:19.800
我们现在先不考虑

06:19.800 --> 06:20.800
我们现在加进去

06:20.800 --> 06:21.800
早晚肯定能执行

06:21.800 --> 06:22.800
那么一循环遍地

06:22.800 --> 06:23.800
它是不是能够

06:23.800 --> 06:24.800
拿到这些函数一个个执行

06:24.800 --> 06:25.800
对吧

06:25.800 --> 06:26.800
这个没问题

06:26.800 --> 06:28.800
好 接着来

06:28.800 --> 06:29.800
那么如果说

06:29.800 --> 06:30.800
正方法里边

06:30.800 --> 06:31.800
因为它正方法传递的

06:31.800 --> 06:32.800
是比较随意的

06:32.800 --> 06:33.800
比较是它可能

06:33.800 --> 06:34.800
可以给你这样传递

06:34.800 --> 06:35.800
然后比方说

06:35.800 --> 06:36.800
看刚才的这种情况

06:36.800 --> 06:37.800
是不是加了

06:37.800 --> 06:38.800
加了很多的

06:38.800 --> 06:39.800
函数到对的地方去了

06:39.800 --> 06:40.800
每次调用这些时候

06:40.800 --> 06:41.800
都会加函数到

06:41.800 --> 06:42.800
对的地方去

06:42.800 --> 06:44.800
那万一是它这样传递呢

06:44.800 --> 06:45.800
你传递这个东西呢

06:45.800 --> 06:47.800
或者它啥都不给你传递

06:47.800 --> 06:48.800
那这种情况

06:48.800 --> 06:49.800
也怎么处理呢

06:49.800 --> 06:50.800
也就是说你传递的函数

06:50.800 --> 06:51.800
它不是一个函数

06:51.800 --> 06:53.800
它是一个乱七八糟的东西

06:53.800 --> 06:54.800
那么这个玩意

06:54.800 --> 06:56.800
到时候肯定是

06:56.800 --> 06:58.800
叫出问题的对吧

06:58.800 --> 06:59.800
那么我们到时候

06:59.800 --> 07:00.800
执行的时候

07:00.800 --> 07:01.800
可以执行的时候判断

07:01.800 --> 07:02.800
判断

07:02.800 --> 07:03.800
不要让你这里给我

07:03.800 --> 07:04.800
传的是安迪范

07:04.800 --> 07:05.800
那我家里也叫安迪范

07:05.800 --> 07:06.800
那到时候执行的时候

07:06.800 --> 07:07.800
一看那我咋执行啊

07:07.800 --> 07:08.800
你给我传的是安迪范

07:08.800 --> 07:09.800
我没法执行

07:09.800 --> 07:11.800
没法执行怎么办呢

07:11.800 --> 07:12.800
那我们就后续

07:12.800 --> 07:13.800
执行的时候再说

07:13.800 --> 07:14.800
再说这个问题

07:14.800 --> 07:15.800
对吧

07:15.800 --> 07:16.800
那我们这个地方

07:16.800 --> 07:17.800
当时我们要先想到

07:17.800 --> 07:18.800
先想不到

07:18.800 --> 07:19.800
那第二个函数

07:19.800 --> 07:20.800
不要让这里都传的是这个东西

07:20.800 --> 07:21.800
那到时候咋执行呢

07:21.800 --> 07:22.800
没法执行

07:22.800 --> 07:23.800
它都不是一个函数

07:23.800 --> 07:24.800
对吧

07:24.800 --> 07:25.800
但是呢

07:25.800 --> 07:26.800
我们到时候就可以把略过

07:26.800 --> 07:27.800
或者是怎么样

07:27.800 --> 07:28.800
我们到时候再处理

07:28.800 --> 07:29.800
是执行的时候

07:29.800 --> 07:30.800
我们再处理

07:30.800 --> 07:31.800
我们现在只管放

07:31.800 --> 07:32.800
你给我传啥

07:32.800 --> 07:33.800
我就往里边放

07:33.800 --> 07:34.800
懂了意思吗

07:34.800 --> 07:35.800
好

07:35.800 --> 07:36.800
那么这个

07:36.800 --> 07:37.800
往里边放

07:37.800 --> 07:38.800
一个逻辑能理解吧

07:38.800 --> 07:39.800
好

07:39.800 --> 07:40.800
这是第一个

07:40.800 --> 07:41.800
往里边放

07:41.800 --> 07:42.800
什么时候呢

07:42.800 --> 07:43.800
就是

07:43.800 --> 07:44.800
那如果说

07:44.800 --> 07:45.800
到时候

07:45.800 --> 07:46.800
你看我们这个

07:46.800 --> 07:48.800
任方法返回的是啥

07:48.800 --> 07:49.800
任方法返回的

07:49.800 --> 07:51.800
是不是一个Promise

07:51.800 --> 07:52.800
那么这一块

07:52.800 --> 07:53.800
当时我们讲面试期的时候

07:53.800 --> 07:54.800
各种面试期

07:54.800 --> 07:55.800
各种Promise的原理的时候

07:55.800 --> 07:56.800
是不是特别重点

07:56.800 --> 07:57.800
强调这一块

07:57.800 --> 07:58.800
它返回的是Promise

07:58.800 --> 07:59.800
我们才能够

07:59.800 --> 08:00.800
进行电视调用

08:00.800 --> 08:01.800
关键就是个Promise

08:01.800 --> 08:02.800
什么时候完成

08:02.800 --> 08:04.800
什么时候失败

08:04.800 --> 08:05.800
比方说你这里

08:05.800 --> 08:06.800
我什么时候完成

08:06.800 --> 08:07.800
它呢

08:07.800 --> 08:08.800
什么时候调

08:08.800 --> 08:09.800
现在问题

08:09.800 --> 08:10.800
不是调用的问题

08:10.800 --> 08:11.800
我都不知道

08:12.800 --> 08:13.800
什么时候调用

08:13.800 --> 08:15.800
是不是要一定要等将来

08:15.800 --> 08:16.800
去执行这些东西的时候

08:16.800 --> 08:17.800
才能调用

08:18.800 --> 08:19.800
对吧

08:19.800 --> 08:20.800
比方说

08:20.800 --> 08:21.800
第一个函数

08:21.800 --> 08:22.800
现在完成了

08:22.800 --> 08:24.800
那我要执行这个函数

08:24.800 --> 08:25.800
那么执行这个函数

08:25.800 --> 08:27.800
执行过程中没问题

08:27.800 --> 08:29.800
就是你传递的这个函数

08:29.800 --> 08:30.800
执行这个函数没问题

08:30.800 --> 08:31.800
这个函数是啥呢

08:31.800 --> 08:33.800
也就是你传递的这个函数

08:33.800 --> 08:34.800
对吧

08:34.800 --> 08:36.800
这个函数其实就是个F1

08:36.800 --> 08:37.800
你可以这样想

08:37.800 --> 08:39.800
那么要执行这个函数没问题

08:39.800 --> 08:40.800
那么说明

08:40.800 --> 08:41.800
说明啥呀

08:41.800 --> 08:43.800
说明任反回来的那个Promise

08:43.800 --> 08:44.800
就是成功的

08:44.800 --> 08:46.800
那执行这个函数失败了

08:46.800 --> 08:47.800
那个Promise是不是

08:47.800 --> 08:48.800
就该执行这个函数

08:48.800 --> 08:49.800
说明了啥呀

08:49.800 --> 08:50.800
说明了我们

08:50.800 --> 08:52.800
只有等到将来执行的时候

08:52.800 --> 08:53.800
我才能确定

08:53.800 --> 08:55.800
这个Promise是成功还是失败

08:55.800 --> 08:56.800
对吧

08:56.800 --> 08:58.800
那么等我将来执行的时候

08:58.800 --> 08:59.800
我在哪里去获得

08:59.800 --> 09:01.800
获得这个result函数呢

09:01.800 --> 09:02.800
在哪里去获得

09:02.800 --> 09:03.800
这个执行函数呢

09:03.800 --> 09:04.800
什么拿不到

09:04.800 --> 09:06.800
那怎么办呢

09:06.800 --> 09:07.800
就也很简单

09:07.800 --> 09:08.800
我加这个对列的时候

09:08.800 --> 09:09.800
我是不是可以把

09:09.800 --> 09:11.800
这个result函数放进来

09:11.800 --> 09:12.800
对吧

09:12.800 --> 09:13.800
那么将来我执行的时候

09:13.800 --> 09:14.800
就特别简单的

09:14.800 --> 09:15.800
我执行这个函数

09:15.800 --> 09:16.800
发现它成功了

09:16.800 --> 09:17.800
我就调用result

09:17.800 --> 09:18.800
它执行失败了

09:18.800 --> 09:19.800
我就调用result函数

09:19.800 --> 09:20.800
所以我可以把这两个函数

09:20.800 --> 09:21.800
也给它放进来

09:21.800 --> 09:22.800
那于是呢

09:22.800 --> 09:23.800
我们在加的时候

09:23.800 --> 09:24.800
还要传两个参数

09:24.800 --> 09:25.800
一个是result

09:25.800 --> 09:27.800
一个是result函数

09:27.800 --> 09:28.800
好 那么这里呢

09:28.800 --> 09:30.800
我们打上一个参数

09:30.800 --> 09:34.500
这个result是什么呢

09:34.500 --> 09:37.500
这个是方形

09:37.500 --> 09:38.500
result

09:38.500 --> 09:39.500
这个result是什么呢

09:39.500 --> 09:42.500
就是

09:42.500 --> 09:47.500
函函数返回的promise

09:47.500 --> 09:48.500
调这个函数

09:48.500 --> 09:50.500
是让函函数返回的promise

09:50.500 --> 09:52.500
成功

09:52.500 --> 09:53.500
那么自然而然

09:53.500 --> 09:55.500
下面有一个result

09:55.500 --> 09:56.500
调这个函数呢

09:56.500 --> 09:57.500
是让函函数返回的promise

09:57.500 --> 09:59.500
失败

09:59.500 --> 10:00.500
我现在去处理

10:00.500 --> 10:01.500
这件事吗

10:01.500 --> 10:02.500
现在不处理

10:02.500 --> 10:03.500
我只是把它放到

10:03.500 --> 10:04.500
这个对列里面去

10:04.500 --> 10:05.500
将来执行这个对列的时候

10:05.500 --> 10:06.500
那我就可以根据

10:06.500 --> 10:07.500
各种情况

10:07.500 --> 10:08.500
到底它应该成功

10:08.500 --> 10:09.500
还是应该失败

10:09.500 --> 10:11.500
是不是就可以处理的

10:11.500 --> 10:12.500
对不对

10:12.500 --> 10:13.500
因此呢

10:13.500 --> 10:14.500
我这里先不处理

10:14.500 --> 10:16.500
但是我将来再进行处理

10:16.500 --> 10:17.500
OK 那么我们这里

10:17.500 --> 10:18.500
是不是要多两个参数

10:18.500 --> 10:19.500
同样的

10:19.500 --> 10:20.500
放到对象里面来

10:20.500 --> 10:21.500
这个函数返回很简单

10:21.500 --> 10:22.500
就是把它放到

10:22.500 --> 10:24.500
对列里面去

10:24.500 --> 10:26.500
就proxy handler

10:26.500 --> 10:27.500
OK 那么有了

10:27.500 --> 10:28.500
现在我们要求

10:28.500 --> 10:29.500
多两个参数了

10:29.500 --> 10:30.500
然后这里是不是

10:30.500 --> 10:31.500
要传一个result

10:31.500 --> 10:32.500
那是不是代理法

10:32.500 --> 10:33.500
就不能写字了

10:33.500 --> 10:34.500
应该写哪

10:34.500 --> 10:36.500
是不是应该写字了

10:36.500 --> 10:37.500
然后要传一个result

10:37.500 --> 10:39.500
要传一个result

10:39.500 --> 10:40.500
然后同样的道理

10:40.500 --> 10:43.500
这个下面也是一样

10:43.500 --> 10:44.500
对吧 是不是把它

10:44.500 --> 10:45.500
放到对列里面去

10:45.500 --> 10:46.500
OK

10:46.500 --> 10:47.500
那现在我们完成了吗

10:47.500 --> 10:48.500
其实我们最核心的

10:48.500 --> 10:49.500
就完成了

10:49.500 --> 10:50.500
就已经完成了

10:50.500 --> 10:52.500
好 咱们来试一下

10:52.500 --> 10:54.500
现在我们把它

10:54.500 --> 10:55.500
不说别的

10:55.500 --> 10:56.500
我们先

10:56.500 --> 10:57.500
先随便来一些

10:57.500 --> 10:59.500
来两个吧

10:59.500 --> 11:02.500
我们这里的函数A

11:02.500 --> 11:03.500
都拦着去

11:03.500 --> 11:04.500
输出啥子

11:04.500 --> 11:05.500
因为现在我们

11:05.500 --> 11:06.500
没有执行

11:06.500 --> 11:07.500
所以说现在输出

11:07.500 --> 11:08.500
肯定是没有效果的

11:08.500 --> 11:10.500
然后A1

11:10.500 --> 11:11.500
这是A1

11:11.500 --> 11:12.500
然后这下面

11:12.500 --> 11:13.500
现在是

11:13.500 --> 11:15.500
再写个方式

11:15.500 --> 11:16.500
A2

11:16.500 --> 11:19.640
为什么要命名呢

11:19.640 --> 11:20.640
主要是

11:20.640 --> 11:21.640
为了便于我们看得清楚

11:21.640 --> 11:23.640
然后再调整

11:23.640 --> 11:24.640
再调整一次

11:24.640 --> 11:26.640
好 那么这是B1

11:26.640 --> 11:27.640
B2

11:27.640 --> 11:28.640
OK 那么来

11:28.640 --> 11:29.640
现在我们

11:29.640 --> 11:31.640
换成by promise

11:31.640 --> 11:33.640
现在我们

11:33.640 --> 11:34.640
与若无之后

11:34.640 --> 11:35.640
我们打印一下

11:35.640 --> 11:41.340
这个proxy handler

11:41.340 --> 11:42.340
你看到

11:42.340 --> 11:43.340
那么handled 是里面

11:43.340 --> 11:44.340
是不是有四个函数

11:44.340 --> 11:45.340
对吧 第一个函数

11:45.340 --> 11:47.340
F1

11:47.340 --> 11:48.340
它什么时候执行

11:48.340 --> 11:49.340
它fufill的时候

11:49.340 --> 11:51.340
它要执行这个函数

11:51.340 --> 11:53.340
Risov 是不是一个方法

11:53.340 --> 11:54.340
Risov 是不是方法

11:54.340 --> 11:55.340
传明来了

11:55.340 --> 11:56.340
那么Risov

11:56.340 --> 11:57.340
Risov 是不是这个的

11:57.340 --> 11:58.340
Risov

11:58.340 --> 11:59.340
Risov

11:59.340 --> 12:00.340
那么将来我执行

12:00.340 --> 12:01.340
这个函数的时候

12:01.340 --> 12:02.340
如果说没什么问题

12:02.340 --> 12:03.340
我就调用Risov

12:03.340 --> 12:04.340
把这个proxy 完成

12:04.340 --> 12:05.340
然后调用Risov的时候

12:05.340 --> 12:06.340
没问题

12:06.340 --> 12:07.340
我就把调用Risov

12:07.340 --> 12:08.340
与这个扯

12:08.340 --> 12:09.340
就是它如果出了问题

12:09.340 --> 12:10.340
我就调用Risov

12:10.340 --> 12:11.340
把这个proxy拒绝

12:11.340 --> 12:12.340
就这么个意思

12:12.340 --> 12:13.340
传了四个函数

12:13.340 --> 12:14.340
这个对列是不是出来了

12:14.340 --> 12:16.340
A1 A2 B1 B2

12:16.340 --> 12:18.340
那如果说我这里只传了一个

12:20.340 --> 12:22.340
或者说我不在这里输出

12:22.340 --> 12:23.340
在这里输出都可以

12:23.340 --> 12:24.340
反正我调用任的方式

12:24.340 --> 12:25.340
它不是执行

12:25.340 --> 12:26.340
再重申一次

12:26.340 --> 12:27.340
不是执行

12:27.340 --> 12:29.340
我只是放到对列里面去

12:29.340 --> 12:31.340
将来执行的时候再输

12:32.340 --> 12:33.340
你看 是不是

12:33.340 --> 12:34.340
对列也出来了

12:34.340 --> 12:35.340
虽然目前的状态

12:35.340 --> 12:37.340
目前状态跟对列有关系吗

12:37.340 --> 12:39.340
没有什么关系

12:39.340 --> 12:41.340
只有将来执行的时候这里的关系

12:41.340 --> 12:42.340
比较执行的时候

12:42.340 --> 12:43.340
发现状态是偏低

12:43.340 --> 12:44.340
那我就不能执行

12:44.340 --> 12:45.340
一个都不能执行

12:45.340 --> 12:47.340
是不是这个意思

12:47.340 --> 12:48.340
就这么个意思

12:48.340 --> 12:49.340
我现在把对列给它放好

12:49.340 --> 12:51.340
那将来一代将来来执行

12:51.340 --> 12:52.340
这就是浙杰克

12:52.340 --> 12:53.340
咱们实现的内容

12:53.340 --> 12:55.340
就是往对列里面放

