WEBVTT

00:01.330 --> 00:07.330
其实解构的语法规则的话 我们这里就已经讲完了

00:07.330 --> 00:11.730
这些课我们只是给大家补充一个叫做参数解构

00:11.730 --> 00:15.930
其实参数解构的语法规则跟前面学习的是一样的

00:15.930 --> 00:19.930
只不过它由于我们解构了这一块的语法

00:19.930 --> 00:23.430
最常见的就是用于函数参数

00:23.430 --> 00:27.030
所以说我们这里拿出来给大家看一些例子

00:27.030 --> 00:30.230
比方说我们最常见的一种情况就是

00:30.330 --> 00:34.130
我们这里有一个函数 比方说有一个函数

00:34.130 --> 00:38.030
然后我们这里比方打印 打印一个用户信息

00:38.030 --> 00:41.230
那么你是不是得传一个用户对象给我 对吧

00:41.230 --> 00:42.830
你传一个用户对象给我

00:42.830 --> 00:46.030
那么我们调用这个函数就是这样子

00:46.030 --> 00:48.830
就传一个对象进去 或者是对象一开始

00:48.830 --> 00:50.230
把它放到边量里面也行

00:50.230 --> 00:52.830
你直接在这里写字面两样一些都一样

00:52.830 --> 00:56.230
放一个对象进去 一个对象里面有一些属相

00:56.230 --> 01:03.230
把对象拿过来 直接把优点团进去

01:05.630 --> 01:08.830
那么这里我们希望它打印出对象里面的信息

01:08.830 --> 01:11.030
那么我们这里由于我们打印的时候

01:11.030 --> 01:13.030
是不是要各种输出 对不对

01:13.030 --> 01:19.030
咱们的姓名来自于User.name

01:19.030 --> 01:22.630
那么我们会发现要写很多的优点

01:22.630 --> 01:24.230
就写很多就很烦

01:24.230 --> 01:26.830
比方说我们只输出这么一些属先吧

01:26.830 --> 01:29.430
A级 然后输出完吧

01:29.430 --> 01:32.630
6 address

01:32.630 --> 01:38.630
然后这里再写上adress

01:38.630 --> 01:41.730
这是city province

01:41.730 --> 01:43.530
这是city

01:43.530 --> 01:44.830
然后我们要输出这么一些信息

01:44.830 --> 01:47.630
姓名 姓别

01:47.630 --> 01:52.930
然后年 这是姓别

01:52.930 --> 01:58.830
然后这是年龄 这是省分 这是城市

01:58.830 --> 02:00.430
比方说我们要输出这么一些信息

02:00.430 --> 02:04.130
那么我们以前这种邪法太low了

02:04.130 --> 02:05.030
那怎么办呢

02:05.030 --> 02:07.730
我们应该用这种邪法

02:07.730 --> 02:09.730
就是我们可以用解构的方式

02:09.730 --> 02:11.730
把这些东西全部解构出来

02:11.730 --> 02:18.230
这里应该是adress掉

02:18.230 --> 02:19.730
这里是User

02:19.730 --> 02:21.230
我们现在换一种邪法

02:21.230 --> 02:24.630
能够实现一模一样的效果

02:24.630 --> 02:26.630
那么以后再重复的去使用

02:26.630 --> 02:28.430
特别是要大量的去使用这种

02:28.430 --> 02:30.430
格式的属性的时候就非常方便了

02:30.430 --> 02:32.030
我们把第一个注释掉

02:32.030 --> 02:33.930
第二我们在这里的直接解构

02:33.930 --> 02:36.030
因为我知道它一定给我传的是一个对象

02:36.030 --> 02:36.630
对吧

02:36.630 --> 02:37.730
一定给我传的是一个对象

02:37.730 --> 02:41.130
所以说我在这里直接解构

02:41.130 --> 02:42.330
你看参数可以这样写

02:42.330 --> 02:43.130
在这里直接解构

02:43.130 --> 02:45.530
你给我的对象我就直接把它解开

02:45.530 --> 02:46.830
解开里边有什么呢

02:46.830 --> 02:50.230
有name 有 age 有 sex 有什么

02:50.230 --> 02:52.230
有adress 进一步解构

02:52.230 --> 02:53.830
是不是一样的跟之前写法

02:53.830 --> 02:56.630
adress进一步解构 province city

02:56.630 --> 02:57.430
对吧

02:57.430 --> 02:58.030
你看

02:58.030 --> 02:59.230
就说你给我的对象里边

02:59.230 --> 03:00.330
应该有这么一些东西

03:00.330 --> 03:04.230
name age sex province city

03:04.230 --> 03:04.730
对吧

03:04.730 --> 03:05.330
好OK

03:05.330 --> 03:06.930
我们这里直接使用name

03:06.930 --> 03:08.030
就User掉不要了

03:08.030 --> 03:09.730
全部不要了

03:09.730 --> 03:12.130
然后adress掉也不要了

03:12.130 --> 03:14.230
你看下面写的是不是轻松很多

03:14.230 --> 03:14.830
对吧

03:14.830 --> 03:18.230
那么效果肯定是一样的

03:18.230 --> 03:19.530
看一下

03:19.630 --> 03:21.830
效果是完全一样的

03:21.830 --> 03:26.030
这就是在参数的位置直接进行解构

03:26.030 --> 03:28.930
然后这里我再来一个例子

03:28.930 --> 03:29.430
我们看

03:29.430 --> 03:30.430
这是一种情况

03:30.430 --> 03:31.730
就是我给我一个对象

03:31.730 --> 03:32.830
当数组也是一样

03:32.830 --> 03:33.230
数组的话

03:33.230 --> 03:36.030
我们用中国号进行解构

03:36.030 --> 03:37.430
我们再来一个例子

03:37.430 --> 03:38.430
就说有的时候

03:38.430 --> 03:39.830
我们可能要做一些事

03:39.830 --> 03:42.930
这些事可能需要进行一些配置

03:42.930 --> 03:45.530
比方说我们要写这么一个阿加克斯函数

03:45.530 --> 03:47.230
你是不是要给我一些配置

03:47.730 --> 03:48.430
对不对

03:48.430 --> 03:49.730
要给我一些配置

03:49.730 --> 03:50.730
那么到时候调用的时候

03:50.730 --> 03:51.430
怎么调用

03:51.430 --> 03:52.930
你看一下阿加克斯

03:52.930 --> 03:55.230
我们这里写上什么

03:55.230 --> 03:56.430
git

03:56.430 --> 03:57.730
message

03:57.730 --> 03:59.430
请求方法是git

03:59.430 --> 04:00.430
对吧

04:00.430 --> 04:02.930
然后请求的UID是啥

04:02.930 --> 04:03.430
对吧

04:03.430 --> 04:04.130
阿加克斯

04:04.130 --> 04:05.230
对不对

04:05.230 --> 04:06.530
我们还有一些配置

04:06.530 --> 04:08.530
比方说我们headers

04:08.530 --> 04:10.230
请求头里边有哪些东西

04:10.230 --> 04:10.730
对不对

04:10.730 --> 04:12.430
我们是不是通过对象

04:12.430 --> 04:13.730
Isga传递过去

04:13.730 --> 04:14.230
对吧

04:14.230 --> 04:15.130
Isga传递过去

04:15.130 --> 04:16.330
完事了

04:16.930 --> 04:18.030
那么有的时候

04:18.030 --> 04:20.430
我们不希望传递这么多东西

04:20.430 --> 04:23.130
我们只希望传递某一些配置就行了

04:23.130 --> 04:24.830
其他配置是用默认值

04:24.830 --> 04:25.530
那么这个时候

04:25.530 --> 04:26.730
我们就可以利用解构

04:26.730 --> 04:28.830
解构里边是不是可以给默认值

04:28.830 --> 04:31.130
那么就可以轻松的来实现这个场景了

04:31.130 --> 04:33.030
以前的我们得砸起

04:33.030 --> 04:34.030
以前得砸起

04:34.030 --> 04:35.730
是不是我们的以前在这里

04:35.730 --> 04:37.430
还得去写一个混合

04:37.430 --> 04:38.030
对不对

04:38.030 --> 04:39.630
住在写一个混合

04:39.630 --> 04:41.930
我们利用现在的就是展开运算符

04:41.930 --> 04:43.030
我们以前在这么写

04:43.030 --> 04:44.930
就这里有一个默认配置

04:44.930 --> 04:45.830
default

04:46.830 --> 04:47.930
有个默认配置

04:47.930 --> 04:48.930
写到写到这

04:48.930 --> 04:49.330
对不对

04:49.330 --> 04:50.130
比方说什么

04:50.130 --> 04:51.030
master

04:51.030 --> 04:52.430
master的默认为get

04:52.430 --> 04:53.030
url

04:53.030 --> 04:54.530
默认为写到

04:54.530 --> 04:55.730
比方说你不够传递的话

04:55.730 --> 04:56.830
我就是这样的

04:56.830 --> 04:58.330
这样的这么一种格式

04:58.330 --> 05:00.030
然后如果说你给我传递了

05:00.030 --> 05:01.030
你给我传递了

05:01.030 --> 05:01.730
那么我们

05:02.830 --> 05:04.130
最终生成一个配置

05:04.130 --> 05:08.130
就是把之前的默认配置展开

05:08.130 --> 05:10.030
然后把options展开

05:10.030 --> 05:10.330
对吧

05:10.330 --> 05:12.930
是不是可以混合成为一个新的配置

05:12.930 --> 05:13.430
对不对

05:13.430 --> 05:15.530
是不是可以混合形成一个新的配置

05:15.530 --> 05:16.530
输出opt

05:16.530 --> 05:18.130
以前是不是得这么写

05:18.130 --> 05:19.130
就特别特别麻烦

05:19.130 --> 05:19.830
看一下吧

05:21.130 --> 05:22.530
以前的默认配置是不是这个

05:22.530 --> 05:22.730
对吧

05:22.730 --> 05:24.030
你给我传了什么abc

05:24.030 --> 05:24.430
ok

05:24.430 --> 05:26.130
那么我就使用你传递的东西

05:26.130 --> 05:27.130
如果你没有给我传

05:27.130 --> 05:28.030
这个master的

05:28.030 --> 05:29.330
比方master的没传

05:29.330 --> 05:30.130
master没传的话

05:30.130 --> 05:31.530
默认为get

05:31.530 --> 05:31.930
看不看

05:31.930 --> 05:33.630
是不是可以使用默认值

05:33.630 --> 05:34.130
对吧

05:35.930 --> 05:38.130
而且为了保证不出问题

05:38.130 --> 05:39.430
因为这里呢

05:39.430 --> 05:39.730
这里呢

05:39.730 --> 05:41.230
我们还可以不传递

05:41.230 --> 05:42.830
你看不传递的话

05:42.830 --> 05:43.730
不传递的话

05:43.830 --> 05:44.930
那么现在呢

05:44.930 --> 05:45.930
默认值就是这个

05:45.930 --> 05:46.130
对吧

05:46.130 --> 05:47.830
因为它这个地方是不是undefan的

05:47.830 --> 05:48.430
不传递

05:48.430 --> 05:50.430
undefan的展开的话什么都没有

05:50.430 --> 05:51.030
什么都没有

05:51.030 --> 05:52.930
所以它就全部使用默认值了

05:52.930 --> 05:53.730
看不

05:53.730 --> 05:54.930
现在不用了

05:54.930 --> 05:56.030
现在就方便很多了

05:56.030 --> 05:56.830
有了解构之后

05:56.830 --> 05:58.930
我们看一下用现在用解构的方式来写

06:00.030 --> 06:00.630
方形

06:00.630 --> 06:02.430
而且是options

06:02.430 --> 06:02.930
对吧

06:02.930 --> 06:04.930
我们不用写写这个参数名字了

06:04.930 --> 06:06.130
直接解构

06:06.130 --> 06:07.130
里边有什么东西呢

06:07.130 --> 06:08.830
里边可能有的东西就这么一些

06:08.830 --> 06:10.930
我们的换个行吧

06:10.930 --> 06:11.530
解构出来

06:11.530 --> 06:12.930
看这个位置是解构

06:12.930 --> 06:14.330
这个解构出来直接解构

06:14.330 --> 06:15.630
它里边比方说有什么

06:15.630 --> 06:16.130
message

06:16.130 --> 06:16.330
对吧

06:16.330 --> 06:17.430
message

06:17.430 --> 06:18.730
如果说你没有给我值的

06:18.730 --> 06:20.530
我一个默认值get

06:20.530 --> 06:21.430
啊

06:21.430 --> 06:22.930
那么有个UIL地址

06:22.930 --> 06:23.930
没有给我值的

06:23.930 --> 06:24.730
一个写稿

06:24.730 --> 06:24.930
啊

06:24.930 --> 06:26.030
一个写稿

06:26.030 --> 06:26.930
对吧

06:26.930 --> 06:29.030
然后我们直接输出

06:29.030 --> 06:29.730
输出什么呢

06:29.730 --> 06:30.730
message

06:30.730 --> 06:31.930
UIL

06:31.930 --> 06:33.530
你看一下吧

06:33.530 --> 06:34.430
你输出get

06:34.430 --> 06:34.930
abc

06:34.930 --> 06:35.130
是吧

06:35.130 --> 06:36.230
直接来就行了啊

06:36.230 --> 06:37.130
直接来就行了

06:37.130 --> 06:38.230
不用写参数名的

06:38.230 --> 06:39.030
这有几个参数

06:39.030 --> 06:40.130
是不是只有一个参数

06:40.130 --> 06:41.130
这个参数是个对象

06:41.130 --> 06:42.330
我把它解构出来

06:42.330 --> 06:43.630
并且把它附与默认值

06:43.630 --> 06:45.230
你看我这里没有传递message

06:45.230 --> 06:45.730
是不是message

06:45.730 --> 06:47.030
就是为默认值get

06:47.030 --> 06:48.430
特别特别方便

06:48.430 --> 06:50.330
解构在ES6里面

06:50.330 --> 06:51.630
用的最多的场景

06:51.630 --> 06:53.630
就是参数位置的结构

06:53.630 --> 06:54.930
特别特别是在配置

06:54.930 --> 06:55.930
有大约配置

06:55.930 --> 06:56.730
有一个配置对象

06:56.730 --> 06:58.530
里边有很多很多的属性需要配置

06:58.530 --> 06:59.930
每个属性还有默认值

06:59.930 --> 07:00.230
ok

07:00.230 --> 07:00.930
那么你就可以通过

07:00.930 --> 07:02.030
这种方式来解构了

07:02.030 --> 07:04.030
那么对于那些没有默认值的属性了

07:04.030 --> 07:04.830
你就可以使用

07:04.830 --> 07:06.330
这种方式来进行结构

07:06.330 --> 07:07.530
就不给它默认值

07:07.530 --> 07:08.330
比方UIL地址

07:08.330 --> 07:09.030
我确实不知道

07:09.030 --> 07:09.430
ok

07:09.430 --> 07:10.630
那就不给默认值

07:10.630 --> 07:11.830
就这么简单

07:11.830 --> 07:13.330
当然这里能不能写别名

07:13.330 --> 07:14.230
可以写别名

07:14.230 --> 07:15.130
可以写其他名字

07:17.230 --> 07:17.430
好

07:17.430 --> 07:19.330
那这里还有个特殊场景

07:19.330 --> 07:21.930
就是说如果我整个都不传递了

07:21.930 --> 07:23.030
整个都不传递的话

07:23.030 --> 07:24.530
那么整个参数传递的是什么

07:24.530 --> 07:26.930
传递的是undefend

07:26.930 --> 07:29.730
注意特别特别注意

07:29.730 --> 07:31.430
如果你要从尝试

07:31.430 --> 07:33.030
从undefend

07:33.030 --> 07:35.130
或者是一个nau的东西

07:35.130 --> 07:36.430
里边去解构的话

07:36.430 --> 07:37.830
它会爆错

07:37.830 --> 07:39.130
现在它会爆出

07:39.130 --> 07:41.130
它告诉你什么呢

07:41.130 --> 07:42.730
cannot structure

07:42.730 --> 07:43.530
dstructure 什么意思

07:43.530 --> 07:45.130
就是结构的意思

07:45.130 --> 07:47.230
不能结构属性

07:47.230 --> 07:49.030
结构属性 method

07:49.030 --> 07:49.930
从哪里边结构呢

07:49.930 --> 07:51.130
从undefend

07:51.130 --> 07:53.130
或者是nau里边结构属性

07:53.130 --> 07:54.530
它结构不出来

07:54.530 --> 07:55.630
因为你没有传递参数

07:55.630 --> 07:57.530
那么这个参数位置是undefend

07:57.530 --> 07:59.530
它要尝试着从undefend里边去结构

07:59.530 --> 08:00.930
这个东西结构不出来

08:00.930 --> 08:02.230
所以说我们这一点

08:02.230 --> 08:03.630
基于这一点

08:03.630 --> 08:04.130
就是有的时候

08:04.130 --> 08:05.730
我们可以允许它不传递参数

08:05.730 --> 08:06.730
全部是用默认值

08:06.730 --> 08:07.230
对吧

08:07.230 --> 08:09.630
但是默认值的时候要先进行结构

08:09.630 --> 08:10.230
这个结构

08:10.230 --> 08:12.530
它没有办法从undefend里边结构

08:12.530 --> 08:13.230
那怎么办呢

08:13.230 --> 08:14.830
我们可以利用我们之前学过的

08:14.830 --> 08:16.630
参数默认值

08:16.630 --> 08:18.030
直接给这个参数

08:18.030 --> 08:18.830
这是一个参数

08:18.830 --> 08:19.630
看整个整体

08:19.630 --> 08:21.230
它是一个参数在进行结构

08:21.230 --> 08:22.230
直接给这个参数

08:22.230 --> 08:24.630
负责一个默认值一个空对象

08:24.630 --> 08:25.630
看呗

08:25.630 --> 08:27.030
我们可以这样来做

08:27.030 --> 08:30.230
这是一种非常非常常见的做法

08:30.230 --> 08:31.330
你不传递没事

08:31.330 --> 08:33.430
不传递的话参数是不是默认值

08:33.430 --> 08:34.130
还记得吗

08:34.130 --> 08:35.130
参数默认值

08:35.130 --> 08:37.030
只不过以前它写的是一个具名参数

08:37.030 --> 08:37.330
对吧

08:37.330 --> 08:38.330
具有名字的参数

08:38.330 --> 08:39.730
是不是这样子写的

08:39.730 --> 08:42.330
那么现在它直接在这个位置进行结构

08:42.330 --> 08:42.730
OK

08:42.730 --> 08:43.630
我给你一个默认值

08:43.630 --> 08:44.830
你没有传递就是一个空对象

08:44.830 --> 08:46.430
那么从空对象里面结构出这个东西

08:46.430 --> 08:48.130
它至少不知道错了

08:48.130 --> 08:49.630
没有无所谓

08:49.630 --> 08:50.430
没有的话

08:50.430 --> 08:52.530
我给你结构出这么一些玩意

08:52.530 --> 08:55.630
结构出就是我这里使用结构的默认值

08:55.630 --> 08:56.530
你看一下

08:56.530 --> 08:57.530
是不是仍然可以

08:57.530 --> 08:58.530
对吧

08:58.530 --> 09:02.130
那就是参数位置的这些结构

09:02.130 --> 09:03.230
这个东西一定要学会

09:03.230 --> 09:04.330
一定要学会

09:04.330 --> 09:06.330
下来把这个我这个例子

09:06.330 --> 09:07.530
就随便写一下

09:07.530 --> 09:08.730
加深一下音响

09:08.730 --> 09:09.530
好吧

09:09.530 --> 09:10.930
那么结构这一张结呢

09:10.930 --> 09:11.930
就到此结束了

09:11.930 --> 09:13.930
没有什么特别难的东西

09:13.930 --> 09:15.330
都都非常非常简单

