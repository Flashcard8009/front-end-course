WEBVTT

00:00.240 --> 00:05.680
好了 同学们 咱们终于到了这个阶段的最重要的一部分

00:05.680 --> 00:10.800
也是内容最多的一部分 当然它也是相对来说比较复杂的一部分

00:10.800 --> 00:16.000
咱们前段开发呢 它其实可不多 其中一个可呢就是在这

00:16.000 --> 00:19.760
Promise 这是ES6 给我们新搞出来这么一个东西

00:19.760 --> 00:24.560
你要说不用 不学这个玩意儿 能不能做开发呢 当然可以

00:24.720 --> 00:30.160
但是呢 现在呢 在公司里边啊 很多异布场景的处理

00:30.160 --> 00:33.440
异布我们之前讲过了 对吧 针对异布场景的处理呢

00:33.440 --> 00:35.680
很多地方都会使用这个Promise

00:35.680 --> 00:41.280
这个Promise啊 它的作用呢 就是用来处理异布场景的

00:41.280 --> 00:44.800
因为ES6觉得之前的异布场景太拉垮了

00:44.800 --> 00:47.200
所以说呢 给你搞出来这么一个新的东西啊

00:47.200 --> 00:50.480
让你它希望呢 就说你以后的异布场景呢

00:50.480 --> 00:52.880
都使用Promise来进行处理

00:52.960 --> 00:57.120
其实这个东西啊 对于我们开发而言 对于我们写代码而言

00:57.120 --> 01:00.320
它在代码里边占到笔中了 并不是很大

01:00.320 --> 01:04.560
但是呢 它百分之百会有 就是代码里边百分之百会有

01:04.560 --> 01:08.240
主要是集中在网络通信的一块 你们之后会学习网络啊

01:08.240 --> 01:11.360
学习网络的时候 你们就会用到这个Promise

01:11.360 --> 01:14.640
但是它在那个代码里边占的笔中并不大

01:14.640 --> 01:20.400
但是 它在面试题里边占的笔中是很大的

01:20.480 --> 01:24.720
ES6里边出面是提出的最集中的 也就是Promise

01:24.720 --> 01:29.520
其他地方呢 要不然就是偶尔会出现一点点

01:29.520 --> 01:32.960
但是呢 不会太多 主要就是Promise

01:32.960 --> 01:35.280
咱们学习这个Promise呢 一节课肯定是搞不定

01:35.280 --> 01:37.520
慢慢来一点一点给大家讲清楚

01:37.520 --> 01:40.240
因为前边呢 我们也做了一些铺垫了 对吧

01:40.240 --> 01:42.960
讲了一个实践循环 给他做了这么一个铺垫

01:42.960 --> 01:45.920
那么就有利于我们后边学习这个Promise

01:45.920 --> 01:50.160
好 那么我们从一个问题来出发

01:50.240 --> 01:53.040
其实这一块啊 我给大家说

01:53.040 --> 01:55.280
一个新东西的出现呢

01:55.280 --> 01:58.480
它是需要一个段时间慢慢去试试

01:58.480 --> 01:59.920
这就好比这些

01:59.920 --> 02:04.240
你从小到大 可能没有怎么去接触过女生

02:04.240 --> 02:06.160
天天跟男生在一块玩

02:06.160 --> 02:09.280
你就觉得 哎 男孩子的题是挺可爱的 对吧

02:09.280 --> 02:12.560
突然有一天把你放到女生堆里边

02:12.560 --> 02:16.080
这个时候你以为你就要疯狂输出了

02:16.080 --> 02:19.520
不是的 你肯定一开始的感觉是恐惧

02:19.600 --> 02:22.560
害怕 而且特别特别不适应

02:22.560 --> 02:25.920
特别怀念以前光棒子打游戏的那种感觉

02:25.920 --> 02:28.640
但是你过了一段时间

02:28.640 --> 02:32.400
哎 好像是打开了一扇新世界的大门了 对吧

02:32.400 --> 02:35.600
哎 就开始过着没秀没哨的生活了

02:35.600 --> 02:38.160
所以说呢 这个东西呢需要一段时间适应啊

02:38.160 --> 02:40.240
Promise本身是一个好东西

02:40.240 --> 02:41.600
但是呢 一开始接触呢

02:41.600 --> 02:44.400
可能会有那么一点不适应啊

02:44.400 --> 02:47.520
感觉要有一点恐惧 恼火 恶心

02:47.600 --> 02:48.880
会有人那么一点感觉

02:48.880 --> 02:50.080
但是慢慢适应过后呢

02:50.080 --> 02:51.840
觉得他真的是有好东西

02:51.840 --> 02:54.720
因为他主要是为了解决异不长之的一些问题

02:54.720 --> 02:57.920
咱们首先通过一个例子来说明这个问题

02:57.920 --> 02:59.520
咱们说别人也不合适

02:59.520 --> 03:01.120
咱们还是说邓哥吧

03:01.120 --> 03:03.520
邓哥呢 他心中有很多的女神

03:03.520 --> 03:05.840
我们说邓哥有很多的嫂子 对吧

03:05.840 --> 03:06.800
邓嫂

03:06.800 --> 03:08.560
他心中有很多女神

03:08.560 --> 03:10.640
然后呢 决定去表白

03:11.440 --> 03:13.600
他觉得吧 只要女神够多

03:13.600 --> 03:14.880
根据概率学的原理

03:14.880 --> 03:17.440
哪怕你表白的成功几率只有10%

03:17.520 --> 03:18.800
但是女神多了

03:18.800 --> 03:20.480
那这样子表白的

03:20.480 --> 03:22.240
整体的几率就提个升了

03:22.240 --> 03:24.800
所以说呢 他要进行一连串的表白

03:24.800 --> 03:26.960
表白的形式呢 就是发短信

03:26.960 --> 03:29.520
那么他决定是用串形的方式来进行表白

03:29.520 --> 03:30.640
是不是要串形啊

03:30.640 --> 03:33.440
就说首先给女神1号

03:33.440 --> 03:34.880
发一个短信

03:34.880 --> 03:36.080
哎 我喜欢你

03:36.080 --> 03:39.040
然后呢 如果说女神1号

03:39.040 --> 03:40.800
这一块短信的成功了

03:40.800 --> 03:42.320
那么他就可以接着

03:42.320 --> 03:43.520
他就不用再进行下去了

03:43.520 --> 03:44.960
直接结束

03:45.040 --> 03:47.520
如果失败了

03:47.520 --> 03:49.440
这个时候呢 再给女神2号发

03:49.440 --> 03:50.720
他不是同事发的

03:50.720 --> 03:52.800
他是前一个出结果之后

03:52.800 --> 03:54.400
再决定要不要发后一个

03:54.400 --> 03:56.240
就这么一种串形的方式

03:56.240 --> 03:57.840
直到发送成功

03:57.840 --> 03:59.600
那如果说所有女神都表白失败了

03:59.600 --> 04:01.280
那就整体就失败了

04:01.280 --> 04:03.280
就这么一个场景

04:03.280 --> 04:04.800
那么比方说吧

04:04.800 --> 04:07.360
邓哥的女神一共有4位

04:07.360 --> 04:09.280
你看这些女神的名字就知道

04:09.280 --> 04:12.640
邓哥他不是一个凡人

04:13.040 --> 04:15.280
心上角度还是蛮刁砖的

04:15.280 --> 04:16.880
总之他有这么4个女神

04:16.880 --> 04:19.360
要给她们一一去发送这个短信

04:19.360 --> 04:21.840
那么我们用程序来描述她

04:21.840 --> 04:23.040
该怎么来描述呢

04:23.040 --> 04:24.320
于是邓哥就决定了

04:24.320 --> 04:26.240
用程序来写这么一个代码

04:26.240 --> 04:27.920
当然这里边还发送短信的东西呢

04:27.920 --> 04:30.800
我就用console logo

04:30.800 --> 04:32.240
控制来打印来代替了

04:32.240 --> 04:33.120
就做模拟

04:33.120 --> 04:34.480
他写出来这么一个函数

04:34.480 --> 04:35.920
咱们来看一下这个函数

04:35.920 --> 04:37.760
这个函数没有任何的新知识

04:38.960 --> 04:39.920
通过这个函数呢

04:39.920 --> 04:41.040
我们来认识到

04:41.200 --> 04:44.480
主要是要认识到以前的异部处理

04:44.480 --> 04:46.400
这种模式有什么样的一个问题

04:46.400 --> 04:48.000
咱们来閱论一下这个代码

04:48.000 --> 04:49.760
这个函数的作用是发送

04:49.760 --> 04:51.760
向某一个女神发送一个短信

04:51.760 --> 04:52.880
这是女神的名字

04:52.880 --> 04:54.240
传进来

04:54.240 --> 04:57.680
那如果说女神同意了

04:57.680 --> 04:59.600
也就成功了

04:59.600 --> 05:02.320
你给我传一个后续怎么处理

05:02.320 --> 05:04.640
就成功之后我要做什么

05:04.640 --> 05:06.320
这个函数是不知道的

05:06.320 --> 05:08.320
你需要给我传一个函数进来

05:08.320 --> 05:09.520
这是一个函数

05:09.520 --> 05:10.480
通过传进来

05:10.560 --> 05:12.000
到时候咱们调用

05:12.000 --> 05:13.280
send message

05:13.280 --> 05:14.960
我们这里给李建刚

05:16.160 --> 05:18.800
美女发一个短信

05:19.440 --> 05:21.760
然后如果说成功了

05:21.760 --> 05:23.840
那么你给我传一个毁掉函数进来

05:23.840 --> 05:24.800
明白了意思吗

05:25.920 --> 05:27.200
你给我传一个函数进来

05:27.200 --> 05:28.800
我就会运行这个函数

05:28.800 --> 05:30.480
如果说失败了

05:30.480 --> 05:32.320
你给我再传一个函数进来

05:32.320 --> 05:34.000
成功了他就会运行这个函数

05:34.000 --> 05:35.360
失败了就会运行这个函数

05:35.360 --> 05:36.880
当然你可以用箭头函数来写

05:36.880 --> 05:38.000
也没有任何问题

05:39.120 --> 05:39.760
失败了

05:39.840 --> 05:40.960
你给我传这么一个函数

05:40.960 --> 05:42.080
就是我他希望了

05:42.080 --> 05:43.280
这个send message

05:43.280 --> 05:45.280
这个函数他打成这么一个效果

05:45.280 --> 05:47.200
给他发一个表白短信

05:47.920 --> 05:49.840
如果说他那边回复成功了

05:51.520 --> 05:52.880
你运行这个函数

05:52.880 --> 05:54.720
如果说他那边回复拒绝了

05:54.720 --> 05:56.000
那么你运行这个函数

05:56.560 --> 05:58.320
当然有可能成功的时候

05:58.880 --> 06:00.480
他别人会有个回复

06:00.480 --> 06:00.720
对吧

06:00.720 --> 06:02.560
别人到怎么成功了

06:02.560 --> 06:04.080
给你回了一个消息

06:04.080 --> 06:07.280
我同意或者是一些土味情话

06:07.280 --> 06:08.880
那么别人回复的消息

06:09.200 --> 06:11.600
我希望了通过这个函数能够接受得到

06:12.640 --> 06:14.480
如果说别人拒绝了

06:14.480 --> 06:15.760
那么拒绝的消息

06:15.760 --> 06:19.120
我也希望了通过这个函数能够接受得到

06:19.120 --> 06:20.720
我就希望达成这么一个效果

06:20.720 --> 06:21.840
这个send message函数

06:21.840 --> 06:23.120
那么这个函数怎么写的呢

06:23.120 --> 06:24.880
首先我做了个魔力

06:24.880 --> 06:26.080
说说这么一句话

06:26.080 --> 06:29.600
邓哥给这个人发了一个短信

06:30.160 --> 06:31.760
就是一句话

06:32.560 --> 06:34.960
然后就开始等待对方的回复

06:34.960 --> 06:36.400
是不是需要一段时间

06:36.400 --> 06:37.360
那么这个时间的话

06:37.440 --> 06:39.520
我这里会就魔力等待一秒钟

06:40.400 --> 06:42.400
魔力这个女生那边看到消息

06:42.400 --> 06:44.240
然后回复消息需要一段时间

06:44.240 --> 06:45.440
那么她到底回复啥

06:45.440 --> 06:45.920
我也不知道

06:46.640 --> 06:48.560
那么比方说一秒钟之后

06:48.560 --> 06:49.680
女生回复了

06:49.680 --> 06:51.040
那么到底成功还是失败呢

06:51.040 --> 06:51.920
我这里就魔力

06:52.800 --> 06:55.360
魔力10%的几率会成功

06:55.920 --> 06:57.440
那么这里我用那个随机数

06:57.440 --> 06:59.040
只要随机数小于0.1

06:59.040 --> 07:00.480
随机数是0到1之间

07:00.480 --> 07:02.800
小于0.1的几率是不是10%

07:03.280 --> 07:03.760
对吧

07:03.760 --> 07:04.960
我就用小于0.1

07:05.040 --> 07:07.840
那么就如果说落在这个范围内

07:07.840 --> 07:10.720
那么就相当于是女生那边答应了

07:10.720 --> 07:11.680
成功了

07:11.680 --> 07:12.640
于是我这边呢

07:12.640 --> 07:14.800
就调用你传过来这个函数

07:14.800 --> 07:15.520
你看

07:15.520 --> 07:16.960
首先你要把这个成语看懂

07:20.140 --> 07:21.660
你看这个函数是不是传进去了

07:21.660 --> 07:23.740
传的才传的这个ful field

07:23.740 --> 07:24.460
对不对

07:24.460 --> 07:25.260
函数传过来了

07:25.260 --> 07:26.060
那么它是一个什么

07:26.060 --> 07:26.860
它是一个函数

07:28.060 --> 07:29.260
如果说成功了

07:29.260 --> 07:30.700
我就调用这个函数

07:31.260 --> 07:33.260
这个函数不是有一个参数吗

07:33.260 --> 07:33.580
对不对

07:33.580 --> 07:34.700
是不是有一个参数啊

07:34.700 --> 07:35.980
那么我就把这个参

07:36.060 --> 07:36.780
做一个制服串

07:36.780 --> 07:38.060
就女神的回复

07:38.060 --> 07:39.740
我就模拟了一个制服串

07:39.740 --> 07:41.100
女神跟灯哥说

07:41.100 --> 07:42.380
我是叫李四山

07:42.380 --> 07:43.580
除了你还是你

07:43.580 --> 07:44.140
然后呢

07:44.140 --> 07:45.820
把这个回复呢

07:45.820 --> 07:47.900
就交给这个函数的参数

07:48.700 --> 07:49.580
看到没

07:49.580 --> 07:50.380
就这里调用

07:50.380 --> 07:51.100
这里传进去

07:51.100 --> 07:51.900
把函数传进去

07:51.900 --> 07:52.220
然后呢

07:52.220 --> 07:53.260
这里就调用它

07:53.260 --> 07:54.860
把参数传进来

07:54.860 --> 07:57.820
这是一个典型的毁掉模式

07:57.820 --> 08:00.780
像我们之前的介石里边

08:00.780 --> 08:02.780
所有的异部常境的处理

08:02.780 --> 08:03.500
全是毁掉

08:04.460 --> 08:05.820
然后咱们来回顾一下吧

08:05.820 --> 08:07.820
哪些是我们异部常境的处理

08:08.540 --> 08:10.860
我们之前学过的set time out

08:10.860 --> 08:12.460
是不是异部常境的处理

08:12.460 --> 08:13.740
它是不是毁掉

08:13.740 --> 08:15.180
这里是不是毁掉函数

08:15.180 --> 08:15.500
对吧

08:15.500 --> 08:16.780
离它传了一个函数进去

08:17.580 --> 08:18.220
然后呢

08:18.220 --> 08:19.660
还有什么常境的处理呢

08:19.660 --> 08:20.940
还有是set interval

08:20.940 --> 08:21.180
对吧

08:21.180 --> 08:22.220
我们以前的异部常境

08:22.220 --> 08:23.580
就能这么一些

08:23.580 --> 08:25.420
这个地方是不是一个毁掉函数

08:25.420 --> 08:26.460
还有什么呢

08:26.460 --> 08:27.980
add event national

08:29.100 --> 08:30.540
event national

08:32.800 --> 08:33.840
那么这里

08:34.000 --> 08:34.880
世界名字

08:34.880 --> 08:36.640
这个地方是不是一个毁掉函数

08:37.360 --> 08:38.240
对吧

08:38.240 --> 08:38.960
那么这些呢

08:38.960 --> 08:40.400
都是我们以前的异部常境

08:40.400 --> 08:42.240
都是使用毁掉函数

08:42.240 --> 08:43.120
来处理

08:43.120 --> 08:44.480
那么我们就继续看

08:44.480 --> 08:46.000
这里我们也用的是毁掉

08:46.000 --> 08:47.280
成功你运行这个

08:47.280 --> 08:48.560
失败你运行这个

08:48.560 --> 08:48.800
好

08:48.800 --> 08:49.360
成功之后呢

08:49.360 --> 08:50.960
我就调用这个函数

08:50.960 --> 08:53.360
把这个回复的消息给你传进来

08:53.360 --> 08:54.080
失败的时候呢

08:54.080 --> 08:55.600
我就调用这个函数

08:55.600 --> 08:56.880
把这个失败的

08:56.880 --> 08:59.120
那个回复消息给你传进来

08:59.120 --> 08:59.440
对吧

08:59.440 --> 09:01.920
就是写成了这么一个send message函数

09:01.920 --> 09:02.160
好

09:02.240 --> 09:04.000
那咱们来试着用一下吧

09:04.000 --> 09:04.960
那我用这个函数

09:04.960 --> 09:07.440
怎么来发送一个表白消息呢

09:07.440 --> 09:08.880
我给你健康发消息

09:08.880 --> 09:09.680
如果都成功了

09:09.680 --> 09:10.960
那我就输出

09:10.960 --> 09:12.560
输出你输出成功

09:14.000 --> 09:16.720
然后呢把女神的回复答应出来

09:16.720 --> 09:17.440
好失败呢

09:17.440 --> 09:19.520
我就输出失败

09:19.520 --> 09:21.920
那么把女神的回复答应出来

09:21.920 --> 09:22.080
好

09:22.080 --> 09:22.880
咱们来试一下

09:22.880 --> 09:24.240
看看可不可以呢

09:24.240 --> 09:24.960
优先运行

09:25.920 --> 09:26.240
好

09:26.240 --> 09:27.600
是不是发送消息了

09:27.600 --> 09:28.400
失败了

09:28.400 --> 09:28.720
对吧

09:28.720 --> 09:29.760
然后我们再来重新运行

09:31.520 --> 09:31.920
失败

09:32.160 --> 09:32.880
多运行也是

09:32.880 --> 09:33.760
总有一次成功的

09:34.720 --> 09:35.120
失败

09:35.760 --> 09:37.360
失败就运行的是这个函数对吧

09:38.240 --> 09:39.120
你看失败

09:39.120 --> 09:39.920
是不是运行它

09:39.920 --> 09:41.600
运行它的话就相当于是运行它

09:42.160 --> 09:42.480
对不对

09:43.120 --> 09:43.520
再运行

09:45.200 --> 09:45.920
来成功了

09:45.920 --> 09:46.560
对吧

09:46.560 --> 09:49.280
成功的话就这里就会运行这个onful field的

09:49.280 --> 09:51.120
那么就相当于是运行的是这个函数

09:51.680 --> 09:51.840
对吧

09:51.840 --> 09:54.080
这就是一个典型的毁掉模式

09:54.720 --> 09:55.360
这个代码呢

09:55.360 --> 09:57.360
其实对于我相信对于一些同学来说

09:57.360 --> 09:59.040
还是有点复杂的

09:59.040 --> 10:01.040
但是这还是传统的处理方式

10:02.000 --> 10:04.240
好好去梳理一下

10:04.240 --> 10:06.480
都是传统的一种毁掉处理模式

10:06.480 --> 10:07.360
甚至没设计

10:07.360 --> 10:08.480
传了两个毁掉进去

10:09.680 --> 10:11.600
那么这个函数写完了过后呢

10:12.000 --> 10:13.200
登哥觉得封装好了

10:14.160 --> 10:17.200
于是觉得我就接下来就可以使用这个函数

10:17.200 --> 10:18.960
来不断的向女生发消息了

10:19.600 --> 10:20.800
接下来它的代码

10:20.800 --> 10:23.440
就是分别给李建国先发消息

10:23.440 --> 10:24.880
看一下对方的回复

10:24.880 --> 10:26.240
如果说对方拒绝了

10:26.240 --> 10:29.120
我就再给王富贵发一个消息

10:29.280 --> 10:31.360
然后再给周俊才留着用

10:31.360 --> 10:34.000
给他四个女生一一去发送消息

10:34.000 --> 10:35.600
前一个失败了我就给后一个发

10:36.400 --> 10:38.240
你们可以尝试着写一下

10:38.800 --> 10:39.920
不看后边的文档

10:39.920 --> 10:41.120
不听我的后边的账

10:41.120 --> 10:42.080
暂停视频

10:42.080 --> 10:42.880
尝试着写一下

10:42.880 --> 10:43.840
不管能不能写出来

10:45.200 --> 10:46.160
这个功能

10:46.160 --> 10:47.600
你会写成一个什么样的结构

10:48.880 --> 10:49.840
你尝试写一下

10:52.580 --> 10:53.540
下面是一个

10:53.540 --> 10:54.900
下面就是代码结构

10:54.900 --> 10:55.860
你看一下吧

10:55.860 --> 10:57.220
有多恶心这个写出来

10:57.780 --> 10:59.700
这就是毁掉模式的一个问题

11:02.800 --> 11:03.840
我们来粗略看一下

11:05.280 --> 11:07.600
我首先向李建国发送消息

11:08.480 --> 11:09.440
要传两个毁掉

11:09.440 --> 11:10.160
对吧

11:10.160 --> 11:10.960
成功了

11:10.960 --> 11:12.400
那如果说别人都答应了

11:12.400 --> 11:13.440
你不用发了

11:13.440 --> 11:15.680
那就打印出别人回复的消息

11:15.680 --> 11:16.480
然后就结束了

11:17.280 --> 11:18.720
如果说失败了

11:18.720 --> 11:20.240
李建国那边拒绝了

11:20.240 --> 11:20.960
拒绝了之后

11:21.920 --> 11:23.440
我要做的事情两件事

11:24.000 --> 11:28.640
打印出对方的回复消息

11:28.640 --> 11:30.080
然后是不是还要给别人发

11:30.560 --> 11:31.360
对吧

11:31.360 --> 11:34.000
然后向王富冠来发这个消息

11:34.000 --> 11:36.480
又重新调用这个send的message

11:36.480 --> 11:38.000
是不是毁掉里边

11:38.720 --> 11:40.240
掉用这个send的message

11:40.240 --> 11:40.800
你看啊

11:42.240 --> 11:43.520
我只能在毁掉里边掉

11:43.520 --> 11:44.800
因为只有失败过后

11:44.800 --> 11:46.880
我才能去发送下一个消息

11:46.880 --> 11:47.520
对吧

11:47.520 --> 11:48.400
我不能写到外面

11:48.880 --> 11:50.640
你是不能把这个send的message写到这儿的

11:51.840 --> 11:52.400
为什么呢

11:53.520 --> 11:54.480
因为你都不知道

11:54.480 --> 11:55.920
别人到底是成功还是失败

11:55.920 --> 11:56.240
对吧

11:56.240 --> 11:57.520
别人都还没有给你回消息

11:57.520 --> 11:58.720
你马上给下一个发了

11:58.880 --> 12:00.240
那万一两个都同意了

12:00.240 --> 12:01.680
这个事情是不是就尴尬了

12:01.680 --> 12:02.480
对不对

12:02.480 --> 12:04.160
当然对邓登哥来说

12:04.160 --> 12:05.440
也不造成什么样的问题

12:06.080 --> 12:06.960
没有那么强

12:06.960 --> 12:07.840
没有那么强的

12:08.480 --> 12:10.160
还是一个好

12:11.280 --> 12:11.920
因此呢

12:12.640 --> 12:14.160
所以说我们这里只能等到

12:14.160 --> 12:15.680
对方有了一个结果

12:15.680 --> 12:17.200
不管是成功还是失败

12:17.200 --> 12:18.240
有了一个结果之后

12:18.240 --> 12:20.880
我才能进行进一步的处理

12:21.520 --> 12:24.880
那你看如果说别人回复的拒绝了

12:24.880 --> 12:25.920
那么我就失败了

12:25.920 --> 12:26.320
失败了

12:26.320 --> 12:28.400
我这里是不是要重新发送消息

12:28.400 --> 12:29.120
给谁

12:29.120 --> 12:29.600
给王富贵

12:30.480 --> 12:32.880
然后王富贵那边是不是也有成功和失败

12:32.880 --> 12:34.480
如果说王富贵那边成功了

12:34.480 --> 12:36.000
我是不是就打印出这个消息

12:36.000 --> 12:36.720
成功就OK了

12:36.720 --> 12:37.360
就停止了

12:38.640 --> 12:40.560
那么从此以后邓哥跟王富贵

12:40.560 --> 12:42.160
就过上了美秀美少的生活

12:42.800 --> 12:43.280
但是呢

12:43.280 --> 12:44.640
如果说他失败了

12:44.640 --> 12:46.160
这两个情况我们都要考虑

12:46.160 --> 12:48.080
我也不知道他成功还是失败啊

12:48.080 --> 12:48.880
如果说成功了

12:48.880 --> 12:49.600
那就结束了

12:49.600 --> 12:50.560
如果说失败了

12:51.200 --> 12:52.080
所以又来了

12:52.720 --> 12:54.240
我打印出王富贵那边

12:54.240 --> 12:55.280
给我回复的消息

12:55.840 --> 12:56.960
那我还要继续发呀

12:56.960 --> 12:57.360
给谁

12:57.360 --> 12:58.240
给争取财发

12:58.560 --> 13:00.000
你看是不是又是生的Message

13:01.120 --> 13:02.320
然后给周剧财发

13:02.320 --> 13:03.360
周剧财那边成功了

13:03.360 --> 13:04.560
我打印出消息

13:04.560 --> 13:06.400
如果说失败了

13:06.400 --> 13:08.480
那你看周剧财失败了

13:08.480 --> 13:10.160
我要打印出周剧财给我的

13:10.160 --> 13:11.280
给邓哥的这个

13:12.000 --> 13:12.720
拒绝消息

13:12.720 --> 13:13.360
又给谁

13:13.360 --> 13:14.240
又给刘仁勇无法

13:14.800 --> 13:16.000
那成功了就成功了

13:16.000 --> 13:17.440
如果说刘仁勇也失败了

13:18.240 --> 13:20.320
那我就没办法了

13:20.320 --> 13:22.080
邓哥就注定孤独通了

13:23.280 --> 13:24.720
就这么一个程序结构

13:24.720 --> 13:25.920
你看一下这个程序结构

13:25.920 --> 13:26.880
噁心不噁心

13:28.960 --> 13:29.760
你看呀

13:29.760 --> 13:30.720
怎么个噁心法

13:30.720 --> 13:32.800
是不是回调里边套回调

13:33.600 --> 13:34.480
这是一个回调

13:35.360 --> 13:37.040
然后这里是不是一个回调

13:37.600 --> 13:38.400
这是一个回调

13:39.040 --> 13:41.040
这个回调套在这个回调里边

13:41.040 --> 13:43.440
而这个回调里边又有回调

13:43.920 --> 13:45.440
这个回调里边又有回调

13:46.000 --> 13:48.240
你看是不是回调套回调

13:48.240 --> 13:50.000
还真没有什么好的办法

13:50.000 --> 13:51.920
过去没有办法只能这样做

13:51.920 --> 13:53.280
那么这种情况呢

13:53.280 --> 13:55.840
我们把它称之为回调利率

13:55.920 --> 13:58.560
回调还有回调的意思

13:58.560 --> 13:59.600
回调含书

13:59.600 --> 14:00.800
就等一会儿再执行

14:00.800 --> 14:02.400
等有了结果之后再执行

14:02.960 --> 14:05.280
回调里边套回调就形成了

14:05.280 --> 14:07.120
这种非常长的签讨关系

14:07.120 --> 14:08.320
你看会不会那个货号

14:08.320 --> 14:09.280
看上去额不额心

14:10.240 --> 14:12.240
那么ES6的Promise的出现

14:12.880 --> 14:15.760
一个重要的功能就是要解决这个问题

14:16.240 --> 14:17.760
不能再这样去签讨了

14:18.400 --> 14:19.920
这里只有四个女神

14:20.400 --> 14:21.760
按邓哥的尿性的话

14:21.760 --> 14:22.960
女神肯定不止四个

14:22.960 --> 14:23.360
对吧

14:23.360 --> 14:24.240
可能四十个

14:24.320 --> 14:25.920
哪里这个代码就没法看了

14:26.800 --> 14:28.480
还有很多其他的问题

14:28.480 --> 14:29.840
比较重要的问题就是这个问题

14:30.400 --> 14:31.280
那么怎么再解决

14:31.280 --> 14:32.400
要靠Promise

14:32.400 --> 14:33.040
说邓哥呢

14:33.040 --> 14:33.760
看了个代码呢

14:33.760 --> 14:34.880
就有点受不了了

14:34.880 --> 14:36.080
邓哥是一个完美主义者

14:36.720 --> 14:38.960
他觉得把这个代码要穷心改造一下

14:38.960 --> 14:39.600
怎么改造

14:39.600 --> 14:41.040
只有一条出路

14:41.040 --> 14:42.000
就是Promise

14:42.000 --> 14:43.280
好 咱们来看一下

14:43.280 --> 14:44.000
Promise呢

14:44.000 --> 14:46.080
实际上有两块重要的知识

14:46.640 --> 14:48.560
一个呢是Promise规范

14:49.600 --> 14:50.640
一个呢是API

14:51.680 --> 14:52.640
那么我解释一下

14:53.600 --> 14:55.680
规范跟API之间是什么样的关系

14:55.680 --> 14:56.560
首先是规范

14:56.560 --> 14:58.000
规范的话就是

14:58.000 --> 15:00.080
一个人在那里不停的嗶嗶

15:00.080 --> 15:01.120
不停的说

15:01.120 --> 15:02.160
他啥事不说

15:02.160 --> 15:03.360
就说你应该这样子写

15:03.360 --> 15:04.400
你应该这样子才对

15:04.400 --> 15:05.520
那就在那里说

15:05.520 --> 15:07.520
就让有点像裁判那种感觉

15:07.520 --> 15:07.920
对吧

15:08.960 --> 15:10.240
那么API是什么呢

15:10.240 --> 15:11.840
API就是根据规范

15:11.840 --> 15:13.200
去实现

15:13.200 --> 15:14.800
把它真的把它做出来

15:14.800 --> 15:15.760
我举个例子

15:15.760 --> 15:17.120
比方说我说

15:17.120 --> 15:18.240
我就随便瞎说

15:18.320 --> 15:19.280
我说

15:19.280 --> 15:21.520
以后呢所有的对象

15:21.520 --> 15:24.160
属性都必须要用名词

15:24.160 --> 15:25.200
作为属性名字

15:27.040 --> 15:31.280
方法必须要用动词作为方法

15:31.280 --> 15:31.840
这就是啥

15:31.840 --> 15:32.560
这是规范

15:32.560 --> 15:33.520
我写代码吧

15:33.520 --> 15:34.080
我没有写

15:34.080 --> 15:35.360
一行代码都没有写

15:35.360 --> 15:36.080
我只是BB

15:36.080 --> 15:36.720
我跟你说

15:36.720 --> 15:37.920
你应该这个样子

15:37.920 --> 15:38.560
这叫规范

15:39.280 --> 15:40.320
如果说一个规范得到

15:40.320 --> 15:42.720
大家的认同的话

15:42.720 --> 15:43.520
那么它就形成了一个

15:43.520 --> 15:44.880
比较有共识的规范

15:45.840 --> 15:47.120
那什么叫实现呢

15:47.200 --> 15:48.400
我以后写对象的时候

15:48.400 --> 15:50.400
我真正按照这个规范去写

15:50.400 --> 15:51.440
我写一个对象的时候

15:51.440 --> 15:52.320
比方优兆

15:52.320 --> 15:54.000
他有那个姓名

15:54.000 --> 15:54.880
那我就写NAME

15:54.880 --> 15:55.440
对吧

15:56.160 --> 15:57.120
然后呢打招呼

15:57.120 --> 15:58.080
我就写Say Hello

15:58.080 --> 15:59.680
我是不是说满足这个规范

16:00.240 --> 16:00.480
对吧

16:00.480 --> 16:00.800
我写

16:00.800 --> 16:02.080
具体写代码的时候

16:02.080 --> 16:03.200
我满足这个规范

16:03.200 --> 16:05.200
那么我就叫实现规范

16:05.200 --> 16:05.840
没意思吧

16:05.840 --> 16:08.000
所以说我们首先啊

16:09.360 --> 16:12.080
要了解它的规范是什么

16:12.080 --> 16:14.400
它到底想着

16:14.400 --> 16:16.000
希望怎么来解决这个问题

16:17.200 --> 16:18.400
然后再去了解

16:18.400 --> 16:20.400
ES6的Promise API

16:20.400 --> 16:22.400
就是它给你提供了哪些对象

16:22.400 --> 16:24.400
给你提供了哪些方法

16:24.400 --> 16:26.400
它怎么去实现规范的

16:26.400 --> 16:28.400
终点是规范

16:28.400 --> 16:29.600
规范了解清楚了

16:29.600 --> 16:31.600
APN其实并不复杂

16:31.600 --> 16:32.000
好

16:32.000 --> 16:34.000
咱们来看一下规范

16:34.000 --> 16:36.480
Promise到底是一个什么东西呢

16:36.480 --> 16:39.680
如果说你英文比较好的话

16:39.680 --> 16:41.840
如果说一些商务英语比较好的话

16:41.840 --> 16:43.040
Promise这个词

16:43.040 --> 16:45.280
它经常出现在一些合同里面

16:46.000 --> 16:48.720
就是大家的一个约定

16:48.720 --> 16:51.680
如果说这个事情

16:51.680 --> 16:53.680
怎么样怎么样

16:53.680 --> 16:55.680
我们就举行一个什么样的责任

16:55.680 --> 16:57.680
这就是一个Promise

16:57.680 --> 16:58.880
Promise就喊到这个意思

16:58.880 --> 17:00.880
所以Promise这个词呢

17:00.880 --> 17:02.880
里面内部的含义

17:02.880 --> 17:03.680
就表示的是

17:03.680 --> 17:04.560
如果怎么样怎么样

17:04.560 --> 17:05.520
我就怎么样怎么样

17:05.520 --> 17:07.040
它是一套

17:07.040 --> 17:09.520
专门处理异部场景的规范

17:09.520 --> 17:11.440
它能够有效的

17:11.440 --> 17:12.640
避免毁掉地位的产生

17:12.640 --> 17:13.680
这是它的作用

17:13.840 --> 17:15.280
它可以使我们的异部代码

17:15.280 --> 17:16.400
更加清晰

17:16.400 --> 17:17.120
简洁

17:17.120 --> 17:17.840
统一

17:17.840 --> 17:18.960
大家都用这种方式

17:18.960 --> 17:22.000
那么就我们的所有异部的代码

17:22.000 --> 17:24.000
都变得统一了

17:24.000 --> 17:26.240
它休息的方式基本统一了

17:26.240 --> 17:27.200
那么这套规范呢

17:27.200 --> 17:29.280
最早还不是官方提出来的

17:29.280 --> 17:30.960
它最早呢是来自于社区

17:30.960 --> 17:32.720
就是一群前端开发者

17:32.720 --> 17:34.800
自己搞出来的东西

17:34.800 --> 17:37.920
他们把它称之为Promise A加规范

17:37.920 --> 17:38.960
为什么要加个加呢

17:38.960 --> 17:40.240
因为它一开始的名字

17:40.240 --> 17:42.160
一开始呢是一个Promise A规范

17:42.160 --> 17:43.600
但是那个规范很快就被抛弃

17:44.320 --> 17:46.160
得到大家共同的

17:46.800 --> 17:47.440
认同的

17:47.440 --> 17:48.720
就是Promise A加规范

17:48.720 --> 17:49.760
这里有个超链接

17:49.760 --> 17:50.640
不过这个

17:50.640 --> 17:52.080
这里是有篇文章

17:52.080 --> 17:54.320
这就是Promise A加规范的原文

17:54.320 --> 17:55.840
它希望是什么样子

17:55.840 --> 17:56.960
希望一个任务

17:56.960 --> 17:58.000
一个异部任务

17:58.000 --> 17:58.800
应该是什么样子

17:58.800 --> 17:59.680
什么样子

17:59.680 --> 18:01.040
提供哪些函数啊

18:01.040 --> 18:01.840
那些哪些东西

18:02.560 --> 18:03.760
那这是一个英文文章

18:03.760 --> 18:05.040
看上去还是有点老火的

18:05.040 --> 18:05.360
所以说

18:06.800 --> 18:08.160
将来再去慢慢谈吧

18:08.160 --> 18:09.360
现在我也不推荐大家去看

18:10.080 --> 18:10.960
英文比较好

18:10.960 --> 18:12.560
技术底子很好的话

18:12.720 --> 18:13.760
你可以尝试去看一看

18:14.800 --> 18:16.240
我的个人博客里面

18:16.240 --> 18:17.280
对他做了个翻译

18:17.280 --> 18:18.000
简单的翻译

18:18.640 --> 18:20.000
但是尽管我翻译出来

18:20.000 --> 18:21.280
可能还是很难理解

18:21.280 --> 18:22.800
因为他的比较抽象里边东西

18:23.600 --> 18:24.560
你不用去看他的

18:24.560 --> 18:25.520
听我讲究完事了

18:26.240 --> 18:27.520
这个规范出来之后

18:27.520 --> 18:29.760
很快就得到前端开发者的响应

18:29.760 --> 18:30.800
但是挺好的

18:31.360 --> 18:32.640
我们之后做异部处理

18:32.640 --> 18:32.960
都用他

18:34.320 --> 18:37.440
不光是咱们要用他

18:37.440 --> 18:39.120
很多那些第三方库的作者

18:39.600 --> 18:40.320
他们也会

18:40.320 --> 18:41.600
也很多都响应了

18:41.680 --> 18:42.800
这个promise一家规范

18:42.800 --> 18:44.160
总之大家都很认同

18:44.800 --> 18:46.560
那么他里边的主要规定是什么呢

18:47.040 --> 18:47.840
1234

18:47.840 --> 18:49.040
把这四点理解清楚

18:49.040 --> 18:50.720
他最核心的那种就理解清楚了

18:51.440 --> 18:52.400
然后首先第一个点

18:53.040 --> 18:55.040
他认为所有的异部场景

18:55.040 --> 18:56.000
什么叫异部场景

18:57.360 --> 18:58.240
就是有一件事

18:58.880 --> 19:00.640
他一时半火拿不到结果

19:01.760 --> 19:03.040
这种事情很多

19:03.040 --> 19:03.760
比方说像

19:04.320 --> 19:05.440
我们平时用set time out

19:05.840 --> 19:06.800
等待一段时间

19:07.440 --> 19:08.560
才会发生某一件事

19:09.600 --> 19:10.800
或者是我们做网络的东西

19:10.800 --> 19:12.000
你们后面会学习网络

19:12.480 --> 19:14.080
我们要从网络中去拿一些东西

19:14.640 --> 19:15.440
拿一篇文章

19:16.240 --> 19:16.960
拿一些用户

19:18.000 --> 19:19.600
拿一个就是电影

19:20.080 --> 19:21.360
这些都是网络上的东西

19:21.360 --> 19:22.720
拿东西是不是需要时间

19:22.880 --> 19:24.320
他不是马上就能产生结果

19:24.320 --> 19:25.200
他要等一会

19:25.600 --> 19:26.480
他有一段时间

19:26.480 --> 19:27.120
中间一段时间

19:27.120 --> 19:27.920
这个时间还说不准

19:29.040 --> 19:30.960
比方说像邓哥发送表白短信

19:32.320 --> 19:34.560
那么他要等到那个对方女神

19:34.560 --> 19:35.600
回复了之后

19:35.600 --> 19:36.560
是不是才有结果

19:36.560 --> 19:37.520
甭管是成功还是失败

19:37.520 --> 19:38.560
才有结果嘛

19:38.560 --> 19:40.160
这些都是属于异部场景

19:41.520 --> 19:42.880
Promise A加他认为

19:43.520 --> 19:45.520
不管你是什么异部场景

19:45.520 --> 19:47.840
我们都可以把他看作是一个异部任务

19:48.640 --> 19:49.680
每个异部任务

19:50.080 --> 19:52.640
他认为应该表现为一个对象

19:53.920 --> 19:55.520
我们之前是不是没有这样做

19:55.760 --> 19:57.360
我的异部任务就写了一个函数

19:57.920 --> 19:59.440
没有做这种特殊处理

19:59.440 --> 20:01.600
他其实他认为了每个异部任务

20:01.600 --> 20:02.960
应该表现为一个对象

20:03.440 --> 20:05.360
这个对象他称之为Promise对象

20:05.360 --> 20:06.400
也叫做任务对象

20:06.400 --> 20:07.520
先把这个概念理清楚

20:08.080 --> 20:10.000
所以说在Promise A加规范里边

20:10.480 --> 20:12.240
像刚才我们发动的表白短信

20:13.680 --> 20:15.280
像我们要做一个远程登录

20:15.280 --> 20:16.720
到底登录成功了还是失败了

20:17.360 --> 20:18.880
我们要做个严实弹窗

20:18.880 --> 20:19.360
对吧

20:19.360 --> 20:20.320
而过一段时间

20:20.320 --> 20:22.320
那么这个事情才开始做

20:22.960 --> 20:25.360
这些都是属于异部任务

20:26.000 --> 20:28.400
他们每一个都应该表现成为一个对象

20:29.120 --> 20:29.600
对吧

20:29.600 --> 20:31.120
我们刚才肯定是没有这样做

20:32.560 --> 20:32.800
好

20:32.800 --> 20:33.520
这是第一个点

20:34.080 --> 20:34.720
第二个点

20:34.720 --> 20:36.320
每一个任务对象

20:36.320 --> 20:38.880
他认为都应该有两个阶段

20:38.880 --> 20:39.600
三个状态

20:39.680 --> 20:41.600
他认为所有的异部任务甭管理是啥

20:41.920 --> 20:42.880
都应该是这个样子

20:43.680 --> 20:45.360
那么什么要两个阶段下面一张图

20:46.240 --> 20:48.480
我们刚才说了不是每一个任务是一个异部对象吗

20:49.760 --> 20:50.800
每一个对象里边

20:51.040 --> 20:51.840
他有两个阶段

20:52.400 --> 20:53.600
一个叫做未决

20:54.880 --> 20:56.000
一个叫做已决

20:56.000 --> 20:56.640
啥叫未决

20:57.840 --> 20:59.120
这个任务还没完

20:59.120 --> 21:00.880
还没有产生结果

21:02.000 --> 21:03.520
你向女神发了一个消息

21:03.520 --> 21:05.200
对方还没有回复

21:05.200 --> 21:06.720
这个任务就还没完

21:07.440 --> 21:07.920
对吧

21:07.920 --> 21:08.800
还没有一个结果

21:08.880 --> 21:09.600
这叫未决

21:10.400 --> 21:11.200
什么叫已决

21:11.760 --> 21:12.800
这个任务结束了

21:13.760 --> 21:15.440
别人给你回那个消息了

21:15.440 --> 21:17.440
甭管他是同意还是拒绝

21:18.160 --> 21:19.440
都叫已决

21:20.160 --> 21:20.800
叫已决

21:20.800 --> 21:22.240
现在有了一个结果了

21:22.240 --> 21:23.440
有了一个确定的结果

21:24.400 --> 21:25.280
他一共每个任务

21:25.280 --> 21:26.480
他都认为是有两个阶段

21:27.840 --> 21:29.520
比方说我们做远程登录

21:29.520 --> 21:31.600
我把账号密码发到互联网上去

21:31.600 --> 21:32.960
发到远程去

21:32.960 --> 21:34.160
你们以后会学习

21:35.120 --> 21:36.480
那么这就是未决

21:37.040 --> 21:39.120
对方还没有远程的服务器那边

21:39.120 --> 21:40.320
还没有告诉我结果

21:40.320 --> 21:40.480
对吧

21:40.480 --> 21:41.840
我到底登录成功了还是失败了

21:41.840 --> 21:42.400
我不知道啊

21:43.440 --> 21:44.800
所以这个时候就是未决

21:45.360 --> 21:48.400
突然服务器那边告诉我了

21:48.400 --> 21:49.600
你登录成功了

21:49.600 --> 21:50.400
那就是已决

21:51.600 --> 21:52.960
服务器告诉你登录失败了

21:52.960 --> 21:53.760
他还是已决

21:53.760 --> 21:54.960
总之有了结果

21:54.960 --> 21:55.840
服务器告诉你

21:55.840 --> 21:56.560
他没有告诉你

21:56.560 --> 21:58.320
告诉你网络统计失败了

21:58.320 --> 21:58.800
发不出去

21:59.760 --> 22:00.720
网断开了

22:01.280 --> 22:02.080
他还是已决

22:02.080 --> 22:03.120
他总之有了结果

22:03.120 --> 22:03.280
对吧

22:03.280 --> 22:04.720
还有了一个确定的结果

22:04.720 --> 22:05.680
这叫做已决

22:06.560 --> 22:08.080
每个任务分为两个阶段

22:08.080 --> 22:09.280
未决和已决

22:09.280 --> 22:11.600
他的单词叫做unsettled和settled

22:13.200 --> 22:14.560
有三个状态

22:15.600 --> 22:17.040
首先就是未决的时候

22:17.040 --> 22:18.720
就是这个任务还在进行中

22:19.360 --> 22:20.320
还不知道结果

22:20.320 --> 22:21.120
那么这个状态

22:21.120 --> 22:22.320
他一定是挂起

22:22.320 --> 22:22.960
叫pending

22:24.320 --> 22:26.720
状态的单词也要记住啊

22:26.720 --> 22:28.080
这个面试是容易考

22:28.560 --> 22:29.040
pending

22:30.320 --> 22:30.880
然后呢

22:31.360 --> 22:34.000
如果说这个任务已决了

22:34.000 --> 22:34.640
有了结果

22:34.640 --> 22:35.520
有结果的话

22:35.760 --> 22:36.720
要么就成功

22:36.720 --> 22:37.440
要么就失败

22:38.480 --> 22:41.120
比方说你女生发生表白短信

22:42.240 --> 22:43.200
发生个表白短信

22:43.200 --> 22:44.080
女生那边要回复了

22:44.960 --> 22:45.360
同意

22:45.360 --> 22:46.000
那就成功了

22:46.720 --> 22:47.680
女生能够回复

22:47.680 --> 22:48.240
不同意

22:48.240 --> 22:48.720
拒绝了

22:48.720 --> 22:49.600
那就失败

22:49.600 --> 22:50.000
对吧

22:50.000 --> 22:52.240
任务的总会有这么一个确定的结果

22:52.800 --> 22:53.440
要么成功

22:53.440 --> 22:54.240
要么失败

22:54.240 --> 22:54.640
成功了

22:54.640 --> 22:56.000
叫做fullfield

22:56.000 --> 22:56.880
叫完成状态

22:57.520 --> 22:57.840
失败了

22:57.840 --> 22:58.880
叫做接个体的

22:58.880 --> 22:59.600
拒绝状态

23:00.160 --> 23:00.800
每个任务

23:00.800 --> 23:01.600
他都是这样子

23:04.160 --> 23:04.560
好

23:04.640 --> 23:07.760
那么我们根据咱们的常识

23:09.280 --> 23:10.240
当然也是promise

23:10.240 --> 23:11.920
A加规范里面规定的内容

23:13.280 --> 23:13.760
他说

23:14.720 --> 23:16.320
有这么三个点要注意

23:17.280 --> 23:18.160
一个任务

23:18.160 --> 23:21.040
他一定是从未决变到已决

23:21.040 --> 23:22.800
他不能立向行使

23:23.680 --> 23:25.360
他不能先有结果

23:25.360 --> 23:26.560
然后再变成挂起

23:27.120 --> 23:28.160
再变成进行中

23:28.160 --> 23:29.280
那就时间倒流了

23:29.280 --> 23:29.760
对吧

23:29.760 --> 23:30.800
我们所有的事情

23:31.440 --> 23:32.800
都是一个从一个不确定的

23:32.800 --> 23:33.680
变成一个确定的

23:34.800 --> 23:35.520
对不对

23:35.520 --> 23:36.400
所以说呢

23:36.400 --> 23:37.280
他不能立行

23:37.280 --> 23:38.240
你不能说

23:38.240 --> 23:39.600
从已决到未决

23:39.600 --> 23:40.880
他阶段的变化

23:40.880 --> 23:42.560
他一定是从未决到已决

23:43.680 --> 23:44.960
那么阶段如此

23:46.320 --> 23:47.840
状态仍然如此

23:48.560 --> 23:50.880
任务总是从挂起状态

23:50.880 --> 23:53.600
变成完成或者失败

23:53.600 --> 23:54.400
无法立行

23:55.360 --> 23:57.280
因为这个任务已经结束了

23:57.280 --> 23:59.040
女生那边已经给你回复了

23:59.040 --> 23:59.600
同意了

23:59.600 --> 24:00.560
你们就站一起了呗

24:01.600 --> 24:03.040
你不能突然有一天

24:03.040 --> 24:04.320
又反悔回去了

24:04.400 --> 24:05.280
反悔可不可以

24:05.280 --> 24:07.600
可以你发出一个新的任务

24:07.600 --> 24:08.080
对吧

24:08.080 --> 24:08.960
叫分手任务

24:09.920 --> 24:10.480
但是呢

24:11.040 --> 24:12.640
这个事已经确定下来了

24:12.640 --> 24:13.440
之前的表白

24:13.440 --> 24:15.120
那个任务已经结束了

24:15.120 --> 24:16.240
他时间不能倒流

24:16.800 --> 24:17.440
不能立行

24:18.560 --> 24:19.360
同时呢

24:19.360 --> 24:20.880
由于时间不能掉倒流

24:20.880 --> 24:21.840
历史不能改写

24:21.840 --> 24:24.480
所以说一旦任务确定下来之后

24:24.480 --> 24:25.600
要么完成要么失败

24:26.640 --> 24:28.560
这个状态就被固定下来了

24:28.560 --> 24:30.480
永远无法再被改变了

24:30.480 --> 24:31.200
比方说一个任务

24:31.200 --> 24:33.120
女生那边已经回了一个消息了

24:33.120 --> 24:33.840
他拒绝你了

24:35.280 --> 24:37.760
他不可能再重新变成同意

24:38.320 --> 24:39.280
他就说不对啊

24:40.320 --> 24:43.280
那万一我只要舔他舔的舒服了

24:43.760 --> 24:44.880
那是不是就变成同意了

24:45.360 --> 24:46.720
那是一个新的任务

24:46.720 --> 24:47.360
同学们

24:47.360 --> 24:48.400
那是新的任务了

24:48.880 --> 24:50.160
比方说你开启一个新的任务

24:50.160 --> 24:50.800
继续舔

24:50.800 --> 24:51.440
对不对

24:51.440 --> 24:53.200
那么就有可能成功

24:53.200 --> 24:54.240
那是新的任务

24:54.240 --> 24:55.680
跟这个任务已经结束了

24:55.680 --> 24:57.040
这个任务已经没关系了

24:57.040 --> 24:59.440
这个任务别人已经给你发了消息了

24:59.440 --> 25:00.080
回了消息了

25:00.080 --> 25:01.200
就已经是拒绝方舰了

25:01.200 --> 25:02.240
没了意思

25:02.960 --> 25:04.800
那么这就是这三点

25:06.320 --> 25:09.120
我感觉我今天讲的有点颜色有点重

25:11.760 --> 25:12.800
我说我录播吧

25:15.520 --> 25:17.120
这就是这第二个点

25:17.120 --> 25:19.040
每个任务对象有两个阶段

25:19.040 --> 25:19.760
三个状态

25:20.880 --> 25:21.200
好

25:21.200 --> 25:22.160
接下来我们看第三点

25:25.340 --> 25:26.140
我们把

25:26.140 --> 25:27.580
因为我们的状态转换

25:27.580 --> 25:28.700
我们已经清楚了

25:28.700 --> 25:32.140
他一个任务一定是从挂起到完成

25:32.220 --> 25:34.300
要么就是从挂起到失败

25:34.860 --> 25:36.300
没有别的情况了对吧

25:36.300 --> 25:37.580
他不可能从完成到失败

25:37.580 --> 25:39.500
也不可能从完成到失败到完成

25:40.140 --> 25:40.860
刚才说过了

25:41.660 --> 25:42.860
也不可能从完成到挂起

25:42.860 --> 25:44.220
也不可能从失败到挂起

25:44.220 --> 25:45.580
只能从挂起到完成

25:45.580 --> 25:46.540
从挂起到失败

25:46.540 --> 25:47.260
只能这样子

25:48.220 --> 25:49.900
所以说我们这里有两个数语

25:50.620 --> 25:52.220
我们把从完成到

25:52.940 --> 25:55.260
从挂起到完成这个过程

25:55.260 --> 25:56.300
称之为result

25:57.260 --> 25:58.220
result什么意思

25:58.220 --> 25:58.780
OK了

25:58.780 --> 25:59.340
解决了

26:00.860 --> 26:01.740
这就是result

26:02.860 --> 26:04.700
从挂起到失败

26:04.700 --> 26:06.540
我们称之为result拒绝

26:07.420 --> 26:08.300
如果说一个状态

26:08.300 --> 26:10.060
从挂起变成失败

26:10.060 --> 26:11.980
这个过程称之为拒绝

26:12.540 --> 26:14.060
我们凭说result什么意思

26:14.060 --> 26:14.700
就指的是

26:14.700 --> 26:15.820
我想把这个任务

26:15.820 --> 26:17.180
从挂起变成完成

26:17.900 --> 26:19.260
我们说result是什么意思

26:19.260 --> 26:20.300
就是想把这个任务

26:20.300 --> 26:21.660
从挂起到变成失败

26:23.660 --> 26:24.220
原来的意思吧

26:24.780 --> 26:26.220
然后还有后面的一个点

26:26.220 --> 26:26.860
后面一句话

26:27.340 --> 26:29.020
任务完成的时候

26:29.020 --> 26:30.620
可能会有一个相关数据

26:31.580 --> 26:32.940
你看result的时候

26:32.940 --> 26:35.100
可能会有一个数相关的数据

26:35.820 --> 26:36.700
那么什么意思呢

26:36.700 --> 26:37.660
怎么能理解这个呢

26:38.300 --> 26:39.740
比方说我登陆成功了

26:40.540 --> 26:41.340
表示完成了

26:41.340 --> 26:41.580
对吧

26:41.580 --> 26:42.460
这个任务完成了

26:43.020 --> 26:44.060
登陆成功了

26:44.060 --> 26:47.340
他可能会给我一个用户对象

26:47.340 --> 26:48.940
你登陆的成功了是哪个用户

26:49.260 --> 26:50.860
那么这个用户的姓名是什么

26:50.860 --> 26:51.740
里程是什么

26:51.740 --> 26:52.780
密码是啥

26:53.740 --> 26:54.540
登陆的时间

26:54.540 --> 26:55.500
驻车的时间

26:55.500 --> 26:56.460
用户的头像

26:56.460 --> 26:57.740
一大堆信息会给我

26:57.740 --> 26:59.020
这就是它的相关数据

26:59.740 --> 27:01.260
比方说我们刚才这个例子

27:01.260 --> 27:03.260
刚才这个例子成功之后

27:03.260 --> 27:05.500
是不是有个女神的回复消息

27:05.500 --> 27:07.420
这就是成功的相关数据

27:08.140 --> 27:09.180
它可以有

27:09.180 --> 27:09.980
也可以没有

27:10.620 --> 27:12.540
它有可能会有这么一个

27:12.940 --> 27:13.820
成功的相关数据

27:13.820 --> 27:15.020
那有没有同学说

27:15.020 --> 27:17.020
那有没有可能会有多个呢

27:17.020 --> 27:17.820
有可能会有多个

27:17.820 --> 27:18.620
来也登陆成对象

27:21.260 --> 27:22.380
那么这就是成功的

27:22.380 --> 27:22.860
有可能的话

27:22.860 --> 27:24.300
可能会有一个相关数据

27:24.300 --> 27:25.660
比方说你白米长炮

27:25.660 --> 27:26.700
是一个异步任务

27:26.700 --> 27:28.140
他需要一段时间

27:28.300 --> 27:29.340
那到了终点的时候

27:29.340 --> 27:29.980
他成功了

27:30.620 --> 27:31.980
那成功了之后呢

27:31.980 --> 27:32.700
成功的时候

27:32.700 --> 27:33.660
他是不是有一个相关数据

27:33.660 --> 27:34.700
你跑了多少时间

27:34.700 --> 27:35.180
对吧

27:35.980 --> 27:36.860
这就是

27:36.860 --> 27:37.580
成功的时候

27:37.580 --> 27:39.500
可能会有一些相关的数据

27:40.300 --> 27:41.580
任务失败的时候呢

27:41.580 --> 27:43.020
他可能会有一个失败的原因

27:44.140 --> 27:45.820
比方说给女神发消息

27:45.820 --> 27:46.700
女神拒绝了

27:46.700 --> 27:47.980
那么可能会有一个拒绝的原因

27:47.980 --> 27:49.580
那么在我们这个场景里边呢

27:49.580 --> 27:51.020
他也是一个制服串

27:51.020 --> 27:52.940
他告诉你女神的回复消息

27:52.940 --> 27:54.380
或者说你白米长炮

27:54.380 --> 27:55.580
白米短炮

27:55.580 --> 27:57.580
白米短炮跑到中途

27:57.660 --> 27:59.820
突然扭伤了

27:59.820 --> 28:01.020
跑不下去了

28:01.020 --> 28:02.540
这个任务没法进行下去了

28:02.540 --> 28:03.580
这个任务就失败了

28:03.580 --> 28:04.540
失败的原因是什么

28:04.540 --> 28:05.580
脚扭伤了

28:05.580 --> 28:06.460
对吧

28:06.460 --> 28:08.460
所以我们再把任务

28:08.460 --> 28:10.060
从刮起到失败的时候呢

28:11.420 --> 28:11.820
拒绝

28:11.820 --> 28:13.820
叫做于这个这个过程

28:13.820 --> 28:15.020
那么拒绝的过程中

28:15.020 --> 28:16.460
可能会带一个失败的原因

28:17.020 --> 28:17.660
最终

28:17.660 --> 28:19.500
他会把无论是你成功

28:19.500 --> 28:20.140
还是失败

28:20.140 --> 28:21.660
他都会把相关的数据

28:21.660 --> 28:23.100
或者是相关的原因

28:23.100 --> 28:24.700
进入到这个状态里面

28:26.060 --> 28:26.620
我们到时候

28:26.700 --> 28:27.500
看这个任务

28:27.500 --> 28:28.620
这个任务成功了

28:28.620 --> 28:29.260
他成功了

28:29.260 --> 28:30.140
相关数据是啥

28:30.140 --> 28:31.340
就可以拿得到

28:31.340 --> 28:32.540
这个任务已经失败了

28:32.540 --> 28:33.980
白米短炮

28:33.980 --> 28:35.100
为什么失败了呢

28:35.100 --> 28:37.020
我可以拿到这个任务的失败的原因

28:37.980 --> 28:38.540
对吧

28:38.540 --> 28:40.460
你看所有的一部任务

28:40.460 --> 28:41.420
都是在做的

28:41.420 --> 28:44.060
都是可以用这种模型来去套的

28:45.100 --> 28:45.420
好

28:45.420 --> 28:46.060
最后一个点

28:46.060 --> 28:46.620
第四个点

28:46.620 --> 28:47.580
这个点你看懂了

28:47.580 --> 28:49.340
那么Promise A加规范的

28:49.340 --> 28:50.940
最核心的东西你就看懂了

28:50.940 --> 28:51.980
看懂了最核心的东西

28:51.980 --> 28:53.420
你后边就简单多了

28:54.460 --> 28:54.940
下一个点

28:55.900 --> 28:58.780
我们可以针对任务进行后续处理

29:00.460 --> 29:02.540
针对完成状态的后续处理的

29:02.540 --> 29:03.900
我们称之为Unful Filled

29:05.260 --> 29:06.540
针对失败的后续处理

29:06.540 --> 29:07.820
我们称之为Unful Filled

29:07.820 --> 29:08.220
什么意思

29:10.220 --> 29:12.460
就是这个任务完成之后

29:12.460 --> 29:13.260
我就没

29:13.260 --> 29:14.540
任务虽然完了

29:14.540 --> 29:16.060
但是我可能还有一些别的事情

29:17.100 --> 29:17.820
举个例子

29:17.820 --> 29:18.940
比方说我们这里表白

29:20.700 --> 29:21.740
他任务完了

29:21.740 --> 29:22.860
女生那边是不是回复了

29:22.860 --> 29:24.140
那么这个任务就完成了

29:25.900 --> 29:26.780
他统一了

29:27.340 --> 29:28.140
任务就完成了

29:28.780 --> 29:29.660
完成了之后

29:29.660 --> 29:31.020
我们可能还有一些后续处理

29:31.020 --> 29:32.540
比方说我怎么后续处理

29:33.180 --> 29:34.060
任务完成之后

29:34.060 --> 29:36.460
我还把这个女生的回复输出

29:37.340 --> 29:38.700
我可能要写到日记里边

29:39.660 --> 29:40.460
记录下来

29:40.460 --> 29:41.660
这激动人心的一刻

29:42.460 --> 29:43.660
接下来或者是我们后边

29:43.660 --> 29:45.180
还需要去买电影票

29:47.020 --> 29:49.020
然后去看场电影一个会

29:49.020 --> 29:49.980
或者吃个饭

29:49.980 --> 29:51.180
是不是有一些后续处理

29:52.380 --> 29:52.940
那么这里呢

29:52.940 --> 29:54.780
就是我们把这个后续处理的

29:54.860 --> 29:55.900
叫做Unful Filled

29:56.940 --> 29:58.220
那么后续处理的时候

29:58.220 --> 30:02.060
他可以拿到完成状态里边的相关数据

30:02.060 --> 30:02.460
你看这儿

30:03.180 --> 30:04.460
我在做后续处理的时候

30:04.460 --> 30:05.740
后续处理我这里做的很简单

30:05.740 --> 30:07.740
就是输出女生的回复

30:08.300 --> 30:09.500
是不是可以拿到

30:09.500 --> 30:11.340
完成状态的相关数据

30:11.340 --> 30:13.100
这是不是完成状态的相关数据

30:13.100 --> 30:13.900
我是不是可以拿到

30:14.860 --> 30:15.180
对吧

30:15.980 --> 30:17.740
好那么如果说你失败了

30:18.300 --> 30:19.660
失败的时候呢

30:19.660 --> 30:21.500
我也可以进行后续处理

30:21.500 --> 30:22.060
比方说你看

30:22.540 --> 30:23.580
我这里失败了

30:23.660 --> 30:25.340
是不是我这个函数也在做后续处理

30:25.980 --> 30:27.580
那么这个函数呢就相当于是

30:27.580 --> 30:28.940
这里的Unregulated

30:29.820 --> 30:30.700
当失败的时候

30:30.700 --> 30:31.580
我做的后续处理

30:32.140 --> 30:33.260
那么在失败的时候呢

30:33.260 --> 30:34.620
我可以拿到失败的原因

30:34.620 --> 30:35.660
这是女生的回复

30:35.660 --> 30:36.940
我们把女生的回复呢

30:36.940 --> 30:39.340
作为拒绝的原因

30:39.340 --> 30:40.060
我们可以拿到

30:40.060 --> 30:41.340
可能会做一些相关处理

30:42.060 --> 30:42.700
没什么意思吧

30:43.420 --> 30:46.140
好那么这就是整个Promise

30:46.140 --> 30:47.420
A加规范的模型

30:47.740 --> 30:49.340
你把这张图好好再去过一遍

30:49.340 --> 30:50.620
头脑里边好好过一遍

30:50.620 --> 30:52.220
看清楚这里边每一个点

30:52.700 --> 30:54.140
到底表达的是什么意思

30:54.140 --> 30:55.260
好好去想清楚

30:56.620 --> 30:57.820
好想清楚之后

30:57.820 --> 30:59.820
我们再来看它的API

31:00.380 --> 31:01.740
API是什么意思呢

31:01.740 --> 31:03.020
就是用代码的形式

31:03.020 --> 31:04.540
把上面东西搞一遍

31:05.260 --> 31:05.740
弄一遍

31:06.300 --> 31:07.580
在ES6里边

31:07.580 --> 31:08.300
它提出来

31:08.300 --> 31:09.420
它给你提供了一个构造

31:09.420 --> 31:10.380
好像就叫Promise

31:10.940 --> 31:12.540
就是为了实现上面这张图

31:13.340 --> 31:15.260
它满足PromiseA加规范

31:16.620 --> 31:18.780
那你说不用ES6的东西

31:18.780 --> 31:19.820
我们自己写一套

31:20.540 --> 31:21.580
能不能写出来

31:21.580 --> 31:22.700
能写得出来

31:23.260 --> 31:24.700
只是里边细节很多

31:24.700 --> 31:25.980
比较复杂而已

31:26.460 --> 31:27.580
现在的浏览器里边

31:27.580 --> 31:29.580
都会支持有这么一个Promise

31:29.580 --> 31:31.180
你看浏览器我们随便打开一个

31:35.310 --> 31:35.870
Promise

31:37.070 --> 31:38.750
你看是不是有一个Promise

31:38.750 --> 31:39.550
勾到函数

31:39.950 --> 31:40.430
对吧

31:40.590 --> 31:41.390
那么它实际上

31:41.390 --> 31:42.590
就是给你实现了这么一套东西

31:43.070 --> 31:44.670
那具体怎么来用它

31:44.670 --> 31:46.830
又如何去跟上面这张图来对应

31:46.830 --> 31:47.950
我们来看下面这个代码

31:49.230 --> 31:50.270
我把这个代码

31:50.430 --> 31:51.310
我把这张图

31:51.310 --> 31:52.110
几个停

31:55.630 --> 31:57.230
好 这边我把它贴出来

31:57.790 --> 32:00.190
这样子我们方便我们来对照

32:01.470 --> 32:02.430
好 就放这吧

32:02.430 --> 32:03.150
就放这吧

32:04.270 --> 32:06.030
好 那咱们来看一下这个代码

32:07.310 --> 32:08.110
你看这里

32:08.110 --> 32:11.390
我们通过NewPromise

32:12.430 --> 32:13.790
是不是创建了一个

32:13.790 --> 32:15.150
通过的勾到函数

32:15.150 --> 32:17.390
它就会创建一个Promise对象

32:17.710 --> 32:19.630
这个Promise对象就是这个东西

32:20.590 --> 32:24.110
好 那么一开始创建的Promise对象

32:24.110 --> 32:26.190
它的状态一定是平底

32:27.150 --> 32:29.870
咱们怎么来看到这一点呢

32:29.870 --> 32:31.310
先让我们来写张代码

32:33.390 --> 32:34.110
二了解

32:34.910 --> 32:38.990
好 我们这里来一个NewPromise对象

32:39.950 --> 32:41.790
然后来输出一下这个Promise

32:41.790 --> 32:42.750
你看它的状态

32:43.630 --> 32:44.750
它会打印出一个状态

32:48.590 --> 32:49.950
它里边必须要传一个函数

32:50.110 --> 32:51.230
然后我就随便传一个函数

32:51.790 --> 32:53.070
我以后来说这个函数

32:53.070 --> 32:54.190
这个函数啥意思

32:54.190 --> 32:55.310
我先随便传一个函数

32:56.030 --> 32:56.510
好 运行

32:57.070 --> 32:58.670
你看它的状态是不是平底

32:58.990 --> 33:00.110
它告诉你目前这个

33:01.070 --> 33:03.550
NewPromise就是创建了一个Promise对象

33:04.830 --> 33:07.310
我就在这里给大家解释吧

33:07.310 --> 33:08.110
直接看代码

33:08.110 --> 33:08.830
这个灯代码的话

33:08.830 --> 33:10.750
可能一下子信息量太大了

33:10.750 --> 33:12.030
我就在这里解释

33:12.030 --> 33:13.790
NewPromise里边会传一个函数

33:13.790 --> 33:15.070
这个函数我一会解释

33:16.030 --> 33:18.270
那么这就是创建了一个异部任务

33:18.270 --> 33:19.470
有个异部任务产生了

33:19.470 --> 33:20.830
可能是一个表白任务

33:20.830 --> 33:22.110
可能是一个登陆任务

33:22.110 --> 33:23.150
我也不知道是啥

33:23.150 --> 33:25.070
那么反正就产生了一个异部任务

33:25.070 --> 33:26.830
这个任务的一开始状态是不是平底

33:26.830 --> 33:28.270
是不是跟我们之前说的是一样的

33:28.910 --> 33:30.110
任务总是一开始

33:30.110 --> 33:31.710
总是处于位决阶段

33:31.710 --> 33:33.150
这个任务到底什么状态

33:33.150 --> 33:33.630
我不知道

33:34.350 --> 33:35.550
就还没有结果

33:36.110 --> 33:37.470
它目前是挂起状态

33:37.950 --> 33:38.350
对吧

33:38.350 --> 33:39.150
这个解释清楚了吧

33:40.030 --> 33:41.630
好 那么这个任务

33:41.630 --> 33:42.910
它到底怎么进行呢

33:44.270 --> 33:45.550
就是靠了这个函数

33:46.190 --> 33:48.350
这个函数会被立即执行

33:48.430 --> 33:49.630
我们在这里输出一下

33:50.990 --> 33:51.710
立即执行

33:52.510 --> 33:53.070
开函数

33:54.110 --> 33:55.710
对你传了这个函数进去

33:55.710 --> 33:57.790
它会立刻把这个函数进行执行

33:58.350 --> 33:59.950
你看这个函数是不是得得到执行了

34:00.590 --> 34:02.270
这个函数的执行过程

34:02.270 --> 34:03.790
就是用来描述任务的

34:05.310 --> 34:05.870
比方说吧

34:05.870 --> 34:06.510
我举个例子

34:07.550 --> 34:10.830
我要进行百米长炮

34:11.950 --> 34:13.310
那么我们这里就输出

34:13.310 --> 34:14.270
我就一个魔力吧

34:15.310 --> 34:17.710
开始百米短炮

34:19.070 --> 34:20.990
然后呢跑是不是需要一段时间

34:20.990 --> 34:22.190
那么我这里比方说

34:22.190 --> 34:23.230
我就set time out

34:26.720 --> 34:28.800
我就得到一个得到一个随机的时间

34:29.360 --> 34:30.240
得到一个随机的时间

34:30.800 --> 34:31.360
Duration

34:32.240 --> 34:32.960
Mass

34:32.960 --> 34:36.560
原来的成以5秒钟吧

34:39.260 --> 34:40.860
然后呢把它消除去掉

34:43.260 --> 34:45.340
就随便随机产生一个时间

34:45.900 --> 34:46.140
好

34:46.140 --> 34:47.340
然后呢我们又set time out

34:51.020 --> 34:51.580
Duration

34:52.540 --> 34:55.100
那魔力啊都是魔力

34:55.100 --> 34:56.220
开始百米短炮

34:56.220 --> 34:57.980
然后呢隔了一段时间过后

34:58.940 --> 34:59.740
短炮结束

35:01.420 --> 35:02.620
短炮结束

35:02.620 --> 35:05.020
你看我们这段单码是不是在描述这个任务啊

35:05.020 --> 35:06.460
这个任务它整个过程是什么

35:06.460 --> 35:08.300
先做什么再做什么再做什么

35:08.300 --> 35:09.740
是不是就在这里描述

35:09.740 --> 35:10.460
你要的意思吧

35:10.460 --> 35:12.060
就这个函数是用来做什么的

35:12.060 --> 35:13.900
就是用来描述这个任务的过程

35:14.860 --> 35:16.620
比方说刚才登革表白

35:16.620 --> 35:17.500
一开始要做什么

35:17.500 --> 35:18.860
发生这个消息发生这个消息

35:18.860 --> 35:19.660
那么这些单码

35:19.660 --> 35:20.780
都应该写到这个函

35:20.940 --> 35:22.220
这个函数里面

35:22.860 --> 35:23.420
原来的意思吧

35:23.420 --> 35:24.380
它用来描述任务

35:24.380 --> 35:25.340
你创建一个任务

35:25.340 --> 35:26.460
这个任务的过程是什么

35:26.460 --> 35:27.420
在这里描述

35:27.420 --> 35:28.780
这个函数会被立即执行

35:29.500 --> 35:29.820
看一下

35:32.620 --> 35:34.060
一段时间过后短炮结束了

35:34.860 --> 35:35.260
对吧

35:35.260 --> 35:37.180
这就是用来描述任务的过程了

35:39.020 --> 35:39.260
好

35:39.260 --> 35:41.020
那么既然呢现在有个问题就是

35:41.020 --> 35:43.500
当任务进行到某一个点的时候

35:43.500 --> 35:44.620
它可能就结束了

35:45.580 --> 35:46.620
我怎么样呢

35:46.620 --> 35:49.100
才能表示把这个任务重归一绝

35:50.060 --> 35:51.260
把它变成以绝

35:52.300 --> 35:53.180
具体来说

35:53.180 --> 35:55.900
我怎么把它从挂起变成完成

35:55.900 --> 35:58.380
怎么样把它从挂起变成失败呢

35:59.020 --> 36:00.540
比方说这里短炮结束了

36:01.340 --> 36:02.700
那么比方我这个任务

36:02.700 --> 36:03.420
它就没有失败

36:03.420 --> 36:04.460
它一定是完成的

36:05.660 --> 36:07.020
那我怎么样来表示

36:07.740 --> 36:08.380
表示说

36:08.380 --> 36:09.900
那我就还是做个失败吧

36:09.900 --> 36:12.380
我就判断一下吧

36:12.380 --> 36:14.300
用一个随机的情况来

36:15.340 --> 36:16.220
小于0.5

36:16.220 --> 36:17.740
就是50%的机率成功

36:17.740 --> 36:18.940
50%的距离失败

36:18.940 --> 36:20.140
比方说了这里就成功了

36:21.340 --> 36:22.060
成功了

36:22.060 --> 36:23.100
成功跑完了

36:23.100 --> 36:25.100
这个是中途脚溜伤了

36:25.100 --> 36:25.340
失败

36:26.780 --> 36:27.580
脚溜伤了

36:31.040 --> 36:32.240
中途没跑完

36:32.240 --> 36:32.480
好

36:32.480 --> 36:33.280
我怎么来表示

36:33.280 --> 36:34.400
我这个任务成功了呢

36:35.280 --> 36:35.680
看着

36:37.040 --> 36:38.320
这个函数啊

36:38.320 --> 36:40.240
它会给你传两个参数进来

36:40.240 --> 36:41.920
一个参数的名字叫result

36:41.920 --> 36:43.360
一个参数的名字叫reject

36:44.000 --> 36:44.960
这里是有两个参数的

36:44.960 --> 36:46.240
当然你可以不用

36:46.240 --> 36:47.360
但是如果说

36:47.360 --> 36:49.760
你想把这个任务变成完成

36:49.760 --> 36:51.200
或者是想把这个任务变成失败

36:51.600 --> 36:52.800
你就要用这个

36:53.920 --> 36:54.160
好

36:54.160 --> 36:54.880
比方说这里

36:54.880 --> 36:55.840
我成功怎么写

36:56.400 --> 36:57.280
result什么意思

36:57.280 --> 36:58.400
之前解释过了

36:58.400 --> 36:59.600
表示把一个状态

36:59.600 --> 37:01.280
从挂起变成完成

37:01.280 --> 37:01.840
所以说呢

37:03.040 --> 37:04.480
你这里调用这个函数

37:04.480 --> 37:05.520
这是一个函数

37:05.520 --> 37:06.080
调用它

37:06.640 --> 37:08.400
这个调用的目的就是

37:08.400 --> 37:12.880
将任务从挂起变成完成

37:13.600 --> 37:14.240
没意思啊

37:15.280 --> 37:16.640
那么完成的时候

37:16.640 --> 37:18.080
可能会有一些相关的数据

37:18.080 --> 37:19.440
比方说什么数据呢

37:19.440 --> 37:20.480
我跑了多少时间

37:20.560 --> 37:21.760
那我就把这个delation

37:22.480 --> 37:22.720
对吧

37:22.720 --> 37:24.000
我们跑了这么长的时间

37:24.480 --> 37:25.040
喘过去

37:26.000 --> 37:27.440
那如果说我失败了

37:27.440 --> 37:28.480
你就调这个函数

37:30.080 --> 37:32.080
你看是不是通过这一段代码

37:32.080 --> 37:34.000
就可以描述这个任务的过程

37:34.000 --> 37:34.800
我开始怎么样

37:34.800 --> 37:35.520
怎么样怎么样

37:35.520 --> 37:36.080
然后呢

37:36.080 --> 37:37.120
到这个时间点

37:37.120 --> 37:39.120
说明这个任务就已经成功了

37:39.120 --> 37:40.800
我把相关的数据也给力

37:40.800 --> 37:41.600
到这个时间点

37:41.600 --> 37:43.040
我就说明我的任务失败了

37:43.040 --> 37:44.080
我把相关的

37:44.080 --> 37:45.600
失败的原因给力

37:45.600 --> 37:46.240
搅溜上了

37:48.640 --> 37:49.520
你看是不是就完了

37:50.480 --> 37:53.200
这就是通过promise来描述任务

37:54.320 --> 37:55.840
好现在我们运行

37:55.840 --> 37:57.680
你看一开始的promise状态是平底

37:57.680 --> 37:59.040
到后边的状态就变了

37:59.040 --> 38:00.320
等了一段时间之后

38:00.320 --> 38:01.200
状态就变了

38:02.320 --> 38:03.040
只是呢

38:03.040 --> 38:03.920
我这里能没有

38:03.920 --> 38:05.200
后边我们不管这个东西

38:05.200 --> 38:06.000
我们以后会说

38:07.600 --> 38:09.040
只是我们现在呢

38:09.760 --> 38:10.320
没有什么

38:10.320 --> 38:12.080
没有后续处理

38:12.080 --> 38:13.040
就是这个任务成功之后

38:13.040 --> 38:14.000
我要干嘛

38:14.000 --> 38:14.880
让你成功了

38:14.880 --> 38:15.360
然后呢

38:16.800 --> 38:18.000
我的脚溜上了

38:18.000 --> 38:18.400
然后呢

38:19.120 --> 38:19.440
对吧

38:19.440 --> 38:20.880
我没有后续处理

38:21.440 --> 38:22.320
只是对这个任务

38:22.320 --> 38:24.800
那我如果说我有后续处理

38:24.800 --> 38:26.160
我怎么来后续处理

38:26.160 --> 38:26.640
你看啊

38:27.520 --> 38:29.040
我这里拿到这个任务了

38:29.040 --> 38:29.600
这个任务

38:30.400 --> 38:31.840
我也不知道他是成功了

38:31.840 --> 38:32.480
还是失败

38:32.480 --> 38:33.120
还是挂起

38:33.120 --> 38:33.840
我不知道

38:33.840 --> 38:34.240
但是呢

38:34.240 --> 38:35.280
我可以说先说

38:36.400 --> 38:39.280
如果说这个任务成功了

38:39.280 --> 38:39.920
我怎么样

38:39.920 --> 38:40.960
如果说他失败了

38:40.960 --> 38:41.840
我又怎么样

38:41.840 --> 38:43.360
那怎么来进行后续处理呢

38:43.360 --> 38:44.320
就是靠这个方法

38:44.320 --> 38:44.560
任

38:45.200 --> 38:45.920
任什么意思

38:45.920 --> 38:46.560
然后呢

38:47.520 --> 38:48.000
后边呢

38:48.720 --> 38:49.440
对吧

38:49.440 --> 38:50.800
调用Zing这个方法

38:50.800 --> 38:52.320
里边有两个参数

38:52.320 --> 38:53.600
第一个参数

38:53.600 --> 38:55.280
表示成功之后干嘛

38:56.160 --> 38:57.280
第二个参数

38:57.280 --> 38:58.960
表示失败过后干嘛

38:58.960 --> 39:00.160
那么就对应到这边的

39:01.280 --> 39:02.080
Unfulfilled的

39:02.080 --> 39:02.880
成功之后干嘛

39:03.520 --> 39:04.720
失败过后干嘛

39:05.760 --> 39:06.000
对吧

39:06.000 --> 39:07.360
那么具体单码怎么写呢

39:07.360 --> 39:09.200
就是这里要传两个函数

39:09.200 --> 39:10.000
第一个函数

39:11.360 --> 39:11.760
是这个

39:12.400 --> 39:13.760
第二个函数是这个

39:15.840 --> 39:17.600
把当前参数的名字里随便引去

39:18.320 --> 39:20.240
函数的形成都是随便取的

39:20.240 --> 39:21.280
这要传两个函数

39:21.280 --> 39:23.120
第一个函数什么时候运行

39:23.840 --> 39:25.520
这个任务一旦成功之后

39:25.520 --> 39:26.640
它就会运行

39:26.640 --> 39:28.240
那么这个参数是什么意思呢

39:28.240 --> 39:30.160
这个参数就是任务成功之后

39:31.360 --> 39:32.400
它的相关数据

39:33.920 --> 39:34.880
这里的相关数据

39:34.880 --> 39:36.240
就会作为参数给它传过来

39:36.880 --> 39:38.160
那任务失败的时候

39:38.160 --> 39:38.880
它的相关数据

39:38.880 --> 39:40.080
就会作为参数传到这儿来

39:41.280 --> 39:42.320
没了意思吧

39:42.320 --> 39:43.280
那么你在用的时候

39:43.280 --> 39:44.160
其实你不用管

39:44.160 --> 39:44.880
反正就是说

39:44.880 --> 39:46.400
你这个任务有了

39:46.560 --> 39:49.360
但是它现在的可能已经成功了

39:49.360 --> 39:50.080
已经失败了

39:50.080 --> 39:51.360
也可能正在挂起状态

39:51.360 --> 39:51.840
我说不好

39:52.400 --> 39:53.520
反正我就告诉你

39:53.520 --> 39:54.720
如果说成功了

39:54.720 --> 39:55.920
你一个人运行这个

39:55.920 --> 39:56.960
如果说失败了

39:56.960 --> 39:57.760
你一个人运行这个

39:59.360 --> 40:00.880
你看这个data对应过来

40:00.880 --> 40:01.920
你看这个对应这个图

40:01.920 --> 40:03.680
其实就很容易理解

40:03.680 --> 40:04.640
那如果说你成功了

40:04.640 --> 40:06.480
过后我就输出OE

40:08.880 --> 40:10.160
然后我跑了

40:11.520 --> 40:12.640
多少时间了

40:14.080 --> 40:15.440
这里输出这个data

40:17.360 --> 40:17.840
没有

40:18.880 --> 40:19.920
好 如果说失败了

40:22.880 --> 40:23.920
失败的原因是啥

40:25.840 --> 40:26.720
不好意思

40:29.040 --> 40:29.680
然后后边

40:29.680 --> 40:31.040
我们要把失败的原因打出来

40:32.160 --> 40:33.680
然后后边要补考怎么样怎么样

40:33.680 --> 40:35.440
我们就可以继续写

40:37.520 --> 40:38.160
是不是失败了

40:38.160 --> 40:39.680
它就会运行这个这个函数

40:41.200 --> 40:41.760
看看成功

40:43.680 --> 40:44.960
成功跑了这么多秒

40:45.920 --> 40:46.800
不要意思吧

40:46.800 --> 40:48.480
这就是整个任务的过程

40:48.480 --> 40:50.320
好好去看一下这个代码

40:51.120 --> 40:51.840
堆到这个代码

40:51.840 --> 40:52.960
堆到这张图

40:52.960 --> 40:54.480
好好地去梳理一下

40:57.980 --> 40:58.860
把暂停视频

40:58.860 --> 40:59.820
好好去梳理一下

40:59.820 --> 41:00.860
每个环节在做什么

41:02.300 --> 41:03.580
创建一个任务对象

41:03.580 --> 41:04.300
我们刚才说了

41:04.300 --> 41:05.820
Promise A加个位犯去告诉你

41:05.820 --> 41:07.580
每个任务都是一个对象

41:08.140 --> 41:08.940
这是不是一个对象

41:08.940 --> 41:10.140
创建这么一个对象

41:10.140 --> 41:11.020
放到这个边量里边

41:12.300 --> 41:13.980
然后这个任务的过程是什么

41:13.980 --> 41:14.700
也这里描述

41:15.660 --> 41:16.300
什么

41:16.300 --> 41:17.100
如果说

41:17.100 --> 41:18.780
表过程中一旦成功了

41:18.780 --> 41:19.580
掉这个

41:19.580 --> 41:20.380
一旦失败了

41:20.380 --> 41:20.860
掉这个

41:22.140 --> 41:23.820
那么关于后续处理

41:23.820 --> 41:24.860
针对这个任务对象

41:24.860 --> 41:25.820
进行后续处理

41:25.820 --> 41:26.780
那么就这样子写

41:27.420 --> 41:28.380
如果说成功了

41:28.380 --> 41:29.180
怎么样怎么样

41:29.180 --> 41:29.820
啥失败了

41:29.820 --> 41:30.380
怎么样怎么样

41:32.060 --> 41:32.780
没意思吧

41:32.780 --> 41:34.700
这就是咱们这个Promise的

41:34.700 --> 41:36.220
最基本最基本的用法

41:37.340 --> 41:37.580
好

41:37.580 --> 41:38.380
接下来咱们来看

41:41.470 --> 41:43.070
回到我们最开始的问题

41:43.070 --> 41:43.470
邓哥

41:44.990 --> 41:45.790
怎么来解决

41:46.670 --> 41:48.190
怎么把他改造成Promise

41:49.870 --> 41:51.710
我们就直接到代码里边来改造了

41:52.430 --> 41:53.630
接下来我们把刚才的代码

41:53.630 --> 41:54.030
复制一下

41:55.390 --> 41:55.790
回到这

41:57.470 --> 41:58.590
下面是删掉了

41:59.390 --> 42:00.350
改造这个函数

42:01.390 --> 42:02.910
你看之前我把

42:02.910 --> 42:04.110
成功之后干什么

42:04.110 --> 42:04.910
失败之后干什么

42:04.910 --> 42:06.190
是作为参数权

42:06.190 --> 42:06.990
传进来的对不对

42:08.750 --> 42:10.190
那么现在的不一样了

42:11.230 --> 42:12.110
我这个是啥

42:12.510 --> 42:14.510
发送一个表白短信

42:14.510 --> 42:16.030
它是不是一个异部任务

42:17.390 --> 42:18.910
一个异部任务

42:18.910 --> 42:22.190
你给我返回一个任务对象就行了

42:23.630 --> 42:24.590
任务对象是什么

42:25.230 --> 42:27.150
就是Promise对象

42:27.870 --> 42:28.190
对吧

42:28.190 --> 42:29.870
你给我返回一个Promise对象

42:31.150 --> 42:33.630
之后你会遇到很多的函数

42:33.630 --> 42:35.630
它的注释里边就可以打好了

42:35.630 --> 42:37.070
你看官方的注释也好

42:37.790 --> 42:41.630
看一些我们给这些的文档里边也好

42:41.630 --> 42:42.270
有些函数

42:42.270 --> 42:43.630
它就明高处理

42:43.630 --> 42:45.310
我这个函数返回的就是Promise

42:45.470 --> 42:46.030
表示什么

42:46.030 --> 42:48.830
表示这个函数返回的是一个异部任务对象

42:50.510 --> 42:52.670
那么我们现在不写Promise对象

42:52.670 --> 42:54.430
那如果说这个函数返回的是Promise

42:54.430 --> 42:55.070
那怎么用呢

42:56.750 --> 42:58.750
比较说这两个参数就没了

42:59.070 --> 42:59.870
这两个参数没了

43:00.910 --> 43:03.150
你给我给谁发送的一个短信

43:03.710 --> 43:04.190
消息

43:04.190 --> 43:06.110
你给我它会给你返回一个任务对象

43:06.110 --> 43:07.070
那到时候怎么用

43:07.070 --> 43:09.390
sendmessage比较说给李建刚

43:12.190 --> 43:13.230
它返回的是什么

43:13.230 --> 43:14.430
返回的是Promise

43:15.550 --> 43:16.830
Promise对象有什么特点

43:17.390 --> 43:19.150
这个玩意不就是Promise对象吗

43:20.030 --> 43:21.230
Promise对象有什么特点

43:21.230 --> 43:22.430
是不是后面有个Zing方法

43:23.150 --> 43:23.870
对吧

43:23.870 --> 43:25.710
这个玩意是一个Promise对象

43:25.710 --> 43:26.910
当然里边的人也看不懂

43:26.910 --> 43:28.990
它非一定要把它保存到变量里边

43:28.990 --> 43:29.710
不知道

43:29.710 --> 43:31.630
有些人是这样子

43:31.630 --> 43:32.750
它跟变量有一种

43:33.710 --> 43:36.910
特别说不清道不明的这种情节

43:36.910 --> 43:38.590
它一定要把它保存到变量里边

43:38.590 --> 43:39.950
其实没必要的

43:39.950 --> 43:40.830
你保存变量里边

43:40.830 --> 43:41.950
一根这样子写有啥区别

43:43.310 --> 43:44.270
有啥区别

43:44.270 --> 43:45.470
这不就是个Promise吗

43:45.550 --> 43:47.390
你把它保存到变量里边再写个任

43:47.390 --> 43:48.990
你直接用它写写个任不一样

43:49.790 --> 43:51.950
那么成功之后干什么

43:52.990 --> 43:54.510
失败之后干什么

43:55.150 --> 43:55.470
对吧

43:55.470 --> 43:56.910
成功之后比方成功的时候

43:56.910 --> 43:58.430
女神那边会有个回复消息

43:58.430 --> 43:59.870
那我就把这个回复消息输出

44:01.470 --> 44:01.790
Replay

44:02.670 --> 44:03.470
失败的时候

44:03.470 --> 44:04.830
女神也有一个回复消息

44:05.390 --> 44:06.910
那么就是失败的原因

44:06.910 --> 44:08.590
我就把失败消息输出

44:09.150 --> 44:09.470
对吧

44:09.470 --> 44:10.110
这是成功

44:11.150 --> 44:12.590
那么比方说对

44:12.590 --> 44:12.910
成功

44:13.710 --> 44:16.400
再打一个

44:16.560 --> 44:16.960
失败

44:18.960 --> 44:19.440
失败

44:22.690 --> 44:24.050
变成这样的调用格式了

44:24.050 --> 44:26.050
其实跟之前好像也差不多对吧

44:26.050 --> 44:27.170
也是传了两个函数

44:27.170 --> 44:28.050
不着急

44:28.050 --> 44:29.890
我们Promise会花好几节课了

44:30.450 --> 44:32.850
后边我们会把这个代码写得越来越舒服

44:32.850 --> 44:33.250
看着

44:33.970 --> 44:34.930
我们先这样子写

44:35.330 --> 44:35.970
认

44:36.770 --> 44:37.970
如果认什么意思

44:37.970 --> 44:39.570
就表示你有了结果之后

44:40.770 --> 44:41.410
然后呢

44:41.810 --> 44:42.930
你成功之后干嘛

44:42.930 --> 44:43.970
你失败之后干嘛

44:44.290 --> 44:45.090
都要变这样子

44:45.570 --> 44:45.810
好了

44:45.810 --> 44:47.810
那么这个关键是这个代码怎么写

44:48.770 --> 44:49.650
它要返回的是什么

44:49.650 --> 44:51.250
它反而返回的是一个Promise

44:51.250 --> 44:52.290
Promise是什么

44:52.290 --> 44:53.170
哪来的

44:53.170 --> 44:54.290
是不是通过这种方式来的

44:57.090 --> 44:58.210
是不是通过这种方式来的

44:58.850 --> 45:01.010
就是创建一个Promise对象返回

45:02.050 --> 45:03.890
好那么这里说要开始描述任务了

45:03.890 --> 45:04.530
任务的过程

45:05.330 --> 45:06.690
你把这个代码Copy过来

45:07.650 --> 45:09.170
这不就是任务的过程

45:10.770 --> 45:12.050
这几节课

45:12.050 --> 45:13.810
我的要求很简单

45:13.810 --> 45:15.410
理解Promise一家规范

45:16.290 --> 45:17.410
然后呢

45:17.410 --> 45:20.690
学会创建Promise

45:20.690 --> 45:22.690
学会针对某一个Promise

45:22.690 --> 45:24.690
进行后续处理

45:24.690 --> 45:26.290
这就是我这些可能要求

45:27.410 --> 45:28.450
还不要求你做

45:28.450 --> 45:29.410
弄一下它的面试

45:29.410 --> 45:32.690
面试的东西还要深入的学习

45:32.690 --> 45:34.290
好了那么这个代码写完了嘛

45:34.290 --> 45:35.410
还有最后一点点

45:35.410 --> 45:36.530
就是成功的时候

45:36.530 --> 45:37.410
你要调用什么

45:37.410 --> 45:38.290
调用Role

45:38.290 --> 45:39.730
失败的时候呢

45:39.730 --> 45:41.010
调用Rule这个

45:41.010 --> 45:41.730
没了

45:42.690 --> 45:44.290
返回一个Promise对象

45:44.770 --> 45:45.890
开始进行任务

45:45.890 --> 45:47.730
这个函数马上会得到运行

45:47.730 --> 45:49.250
一调这个函数

45:49.250 --> 45:51.570
创建一个任务

45:51.570 --> 45:52.610
这个任务马上运行

45:52.610 --> 45:54.050
然后呢

45:54.050 --> 45:55.810
一开始这个任务状态呢

45:55.810 --> 45:57.490
肯定是挂起的

45:57.490 --> 45:57.890
对吧

45:57.890 --> 45:58.610
然后呢

45:58.610 --> 45:59.650
过了一秒钟之后

45:59.650 --> 46:00.850
这个任务呢变成了

46:00.850 --> 46:01.890
要么就成功

46:01.890 --> 46:02.530
要么就失败

46:02.530 --> 46:04.130
好来看一下啊

46:04.130 --> 46:05.410
这代码

46:05.410 --> 46:07.250
运行

46:07.250 --> 46:09.570
是吧

46:09.570 --> 46:10.770
仍然可以达到一样的效果

46:10.770 --> 46:14.030
失败

46:14.190 --> 46:14.750
这一次失败

46:14.750 --> 46:15.950
因为他机率太小了

46:15.950 --> 46:17.150
成功的机率太小了

46:17.150 --> 46:18.110
要多运行很多次

46:18.110 --> 46:19.390
才有可能会成功

46:20.110 --> 46:22.110
你们自己可以把这个机率调大一点

46:23.070 --> 46:24.110
就这么一个情况

46:25.630 --> 46:26.670
关于Promise

46:26.670 --> 46:27.790
还有很多知识

46:27.790 --> 46:28.910
还有很多的细节

46:28.910 --> 46:30.110
我们慢慢来不着急

46:30.110 --> 46:31.310
我们一节可能学一点

46:31.310 --> 46:32.190
一节和学一点

46:32.190 --> 46:33.790
慢慢的一点点去深入它

46:34.430 --> 46:35.310
那么至此

46:35.310 --> 46:37.550
这个回调地位的问题解决了吗

46:37.550 --> 46:38.830
实际上没有解决的

46:38.830 --> 46:40.110
你不信你自己去尝试一下

46:40.110 --> 46:41.070
你写的写的还是写的

46:41.070 --> 46:41.950
所以要回调地位

46:42.430 --> 46:43.070
没有解决

46:43.070 --> 46:43.710
我们需要

46:43.710 --> 46:44.670
要解决回调地位

46:45.150 --> 46:46.590
还需要进一步学习

46:46.590 --> 46:48.190
后边课程里边的Promise知识

46:48.830 --> 46:49.550
不着急

46:49.550 --> 46:50.670
饭得一口一口吃

46:50.670 --> 46:51.790
我们这节可能要先来

46:51.790 --> 46:52.830
做几道练习题

46:53.470 --> 46:54.030
第一道题

46:55.950 --> 46:57.230
这个东西

46:57.230 --> 46:58.350
也是你们以后

46:59.150 --> 47:01.150
有可能会写出来的这么一个函数

47:01.150 --> 47:02.190
这个函数叫D内

47:03.230 --> 47:04.510
你给我传一段时间

47:04.510 --> 47:05.470
一个好秒数

47:06.830 --> 47:07.630
那么这个函数

47:07.630 --> 47:08.670
返回的是什么呢

47:08.670 --> 47:09.230
返回的

47:09.230 --> 47:10.830
要学会看注释

47:10.830 --> 47:11.950
这是参数的含义

47:12.030 --> 47:13.390
参数的内型是number

47:13.390 --> 47:14.110
这是一个数字

47:14.910 --> 47:15.950
参数的含义

47:16.350 --> 47:17.470
表示等待的时间

47:17.870 --> 47:18.830
return是表示

47:19.230 --> 47:20.350
这个函数的返回

47:20.350 --> 47:21.710
内型是Promise

47:21.710 --> 47:22.750
返回的是一个任务

47:23.550 --> 47:25.070
好这个函数什么意思呢

47:25.070 --> 47:26.590
就是说我希望这样子

47:27.070 --> 47:31.790
D内一千就表示延迟一千秒

47:31.790 --> 47:32.590
一千毫秒

47:33.390 --> 47:34.670
延迟完了过后

47:35.550 --> 47:36.110
成功了

47:36.830 --> 47:38.110
运行这个函数

47:38.110 --> 47:38.750
失败了

47:38.750 --> 47:39.710
运行这个函数

47:39.710 --> 47:40.510
我给你们说

47:40.590 --> 47:42.350
像这种延迟内的函数

47:42.350 --> 47:43.790
一般来说是不会失败了

47:44.190 --> 47:45.950
所以说你第二个参数是可以不传的

47:46.510 --> 47:47.470
它只有一个成功

47:47.470 --> 47:48.510
它时间到了

47:48.510 --> 47:49.470
它就会运行这个函数

47:50.110 --> 47:50.830
所以说我们

47:50.830 --> 47:52.110
希望你达到几个就是

47:52.110 --> 47:53.870
延迟一千毫秒

47:54.270 --> 47:54.750
然后呢

47:55.470 --> 47:56.750
然后运行这个函数

47:57.390 --> 47:58.590
你看弹码很好别多

47:58.590 --> 47:59.470
延迟D内

47:59.470 --> 48:01.150
延迟一千毫秒

48:01.150 --> 48:02.670
然后运行这个函数

48:03.790 --> 48:04.270
是吧

48:04.270 --> 48:06.270
它就其实等效于之前的setter mouse

48:07.790 --> 48:08.990
就等效于这个

48:08.990 --> 48:09.710
这样的写

48:09.790 --> 48:11.150
以前只会写吧变的

48:11.150 --> 48:11.550
对吧

48:11.550 --> 48:13.150
不是说你以后一定要用这种写法

48:13.710 --> 48:14.510
只是这个函数呢

48:14.510 --> 48:16.270
我们可以练习一下

48:16.270 --> 48:18.350
通过promise来怎么来去完成

48:18.350 --> 48:18.910
因为这个函数

48:18.910 --> 48:20.110
它一定反复的是promise

48:20.110 --> 48:21.550
你看后面是有这个zim

48:21.550 --> 48:22.110
对吧

48:22.110 --> 48:23.550
所以这个函数你小都不用小

48:23.550 --> 48:24.990
直接反复用你的promise

48:26.830 --> 48:28.190
promise你不要传一个函数

48:31.310 --> 48:31.870
好接下来

48:31.870 --> 48:33.310
怎么来延迟一段时间

48:34.030 --> 48:35.470
是不是用这摊帽子来延迟

48:36.830 --> 48:37.390
摊帽子

48:39.420 --> 48:40.140
延迟多久

48:41.340 --> 48:42.220
所以延迟这么久

48:43.580 --> 48:44.140
对吧

48:44.140 --> 48:45.820
那么时间到了过后干嘛

48:45.820 --> 48:47.740
时间到了这个任务是不是就成功了

48:47.740 --> 48:49.180
任务就是不是就完成了

48:49.180 --> 48:50.460
完成的时候要做什么

48:50.460 --> 48:51.260
一定要记住

48:51.260 --> 48:53.820
任务完成的时候就是掉它

48:53.820 --> 48:56.060
把把任务变成完成

48:56.060 --> 48:57.900
因为说这里边不要传一个东西吗

48:57.900 --> 48:58.860
可以传可以不传

48:58.860 --> 49:00.220
不传的话就相当于是传的

49:00.220 --> 49:02.140
我这里没有什么相关数据

49:03.020 --> 49:04.460
有些任务是不需要相关数据

49:05.420 --> 49:06.140
还有一个问题就是

49:06.140 --> 49:06.620
有些人说

49:08.060 --> 49:10.140
最好还是不要改动这个练习

49:11.020 --> 49:12.140
练习题参考难了

49:14.400 --> 49:15.680
我们这一刻的目的

49:15.680 --> 49:16.800
就把练习题做好

49:16.800 --> 49:18.080
做不出来的话也听我讲

49:18.880 --> 49:20.320
因为这一年期对于一开始

49:20.320 --> 49:21.600
刚刚开始接触Promise的话

49:21.600 --> 49:22.960
还是有点难度的

49:22.960 --> 49:23.840
听我讲

49:23.840 --> 49:25.680
讲了之后你要能够理解

49:25.680 --> 49:26.640
并且把它写出来

49:33.010 --> 49:36.050
那么您说这个任务是不是不可能失败

49:36.050 --> 49:36.930
它就不可能失败

49:36.930 --> 49:39.250
这个任务只有一种可能就成功

49:39.250 --> 49:39.890
它不可能失败

49:39.890 --> 49:41.650
那我就借个手实际上是可以不要的

49:42.610 --> 49:44.370
这就是一个地内函数

49:44.370 --> 49:45.650
那么一个地内函数怎么用

49:45.650 --> 49:46.370
就这样子用

49:46.370 --> 49:48.850
延迟一秒钟然后去运行它

49:48.850 --> 49:50.370
这里也不需要参数了

49:50.370 --> 49:52.770
因为没有相关数据

49:52.770 --> 49:53.890
相当于是

49:55.890 --> 49:58.770
咱们这个相关的数据是undefined

49:58.770 --> 50:00.370
也不需要用它

50:00.370 --> 50:01.810
这边比较说

50:02.930 --> 50:04.050
输出一个123

50:04.050 --> 50:04.850
你看一下是不是

50:04.850 --> 50:05.970
一秒钟之后输出的123

50:06.130 --> 50:07.250
印象

50:07.250 --> 50:09.570
所以一秒钟之后输出123

50:09.570 --> 50:09.970
对吧

50:09.970 --> 50:11.090
就这么个意思

50:11.090 --> 50:12.370
然后就地内函数

50:13.650 --> 50:16.210
而且让我们看下面这道小题

50:16.210 --> 50:18.770
按照要求调用地内函数完成程序

50:18.770 --> 50:20.770
等待一秒钟输出费力

50:20.770 --> 50:21.570
是不是很简单

50:21.570 --> 50:22.850
不就是这句话吗

50:23.890 --> 50:25.170
费力

50:27.730 --> 50:29.010
所以我们这里和最基本的

50:29.010 --> 50:31.570
你要学会怎么去创建Promise

50:31.570 --> 50:33.090
然后呢怎么去

50:34.050 --> 50:36.610
然后呢怎么去用它

50:37.890 --> 50:39.010
好定题

50:39.010 --> 50:39.970
第二题

50:41.010 --> 50:42.530
猪尸打了一大堆

50:45.570 --> 50:46.450
啥意思呢

50:46.450 --> 50:47.330
他说啊

50:47.330 --> 50:49.570
这里有个函数让你去实现

50:49.570 --> 50:51.890
这个题有小又难度

50:52.610 --> 50:54.850
该函数呢要返回一个Promise

50:54.850 --> 50:55.650
所以说你

50:55.650 --> 50:57.410
首先第一件事你想都不用想了

50:57.410 --> 50:58.690
就返回一个Promise

50:58.690 --> 51:02.370
有肉

51:02.370 --> 51:03.890
但这里可以用建筒函数

51:03.970 --> 51:05.730
也可以用普通的函数都可以

51:08.300 --> 51:08.940
这个Promise

51:08.940 --> 51:10.460
这个函数在做什么事

51:10.460 --> 51:13.100
它是要创建一个Image元素

51:13.900 --> 51:14.780
所以这个任务

51:14.780 --> 51:15.980
这个任务是什么任务

51:15.980 --> 51:17.820
就是我要创建一个元素的人物

51:18.700 --> 51:19.820
CreateElement

51:20.700 --> 51:21.500
创建什么元素

51:23.100 --> 51:25.500
CreateElement

51:26.060 --> 51:27.500
是不是创建一个Image元素

51:28.380 --> 51:28.780
对吧

51:29.660 --> 51:31.100
当就是

51:32.140 --> 51:34.380
然后呢这个图片的路径是什么呢

51:34.380 --> 51:35.820
图片的路径就是这个路径

51:36.780 --> 51:38.700
Image src

51:39.580 --> 51:41.660
这个网上需要Promise是吗

51:42.220 --> 51:43.500
因为它是有异步常计

51:43.500 --> 51:45.260
为什么有异步常计是这样子的

51:46.380 --> 51:48.700
我把图片的src路径设为它

51:48.700 --> 51:50.780
但是图片的夹仔是不是需要时间

51:51.420 --> 51:53.580
你看网上你去上网的时候打开一个网页

51:53.580 --> 51:55.740
网页里边的很多图片夹仔是不是需要时间

51:56.220 --> 51:56.620
对吧

51:57.820 --> 51:58.460
我想

51:59.100 --> 52:00.860
我这个任务的意思就是说

52:00.860 --> 52:02.380
我去创建一个图片

52:02.380 --> 52:03.980
去夹在这张UIL地址

52:03.980 --> 52:04.860
去夹在这个图

52:05.500 --> 52:08.220
你们之后学网络的时候就会学UIL地址

52:08.220 --> 52:09.500
UIL地址其实就是这个

52:10.620 --> 52:11.900
就这里你不要说这个

52:11.900 --> 52:13.500
就这个这个就是UIL地址

52:14.060 --> 52:15.500
每张图片也有UIL地址

52:15.500 --> 52:16.940
比方说这个从这张图片

52:16.940 --> 52:17.500
我们再新

52:18.140 --> 52:19.340
我们看一下这张图

52:20.300 --> 52:21.180
这还不是图片

52:21.660 --> 52:23.260
这二次图片它是个背景图

52:26.300 --> 52:27.260
这张图吧

52:27.260 --> 52:28.700
我们复制图片地址

52:28.700 --> 52:29.820
来在这里打开

52:29.820 --> 52:30.940
你看这就是图片地址

52:31.900 --> 52:32.300
知道了

52:33.260 --> 52:35.660
那以后我调这个函数的时候怎么调的

52:35.660 --> 52:36.460
我就这样调的

52:37.260 --> 52:39.020
Great image

52:39.020 --> 52:40.460
把这个图片地址传进去

52:41.180 --> 52:41.900
对不对

52:41.900 --> 52:44.540
让你去让这个函数来负责创建一张图片

52:45.580 --> 52:48.460
由于夹在这个图片需要一段时间的

52:48.460 --> 52:49.900
所以说它是一个异步任务

52:49.900 --> 52:53.660
我希望图片夹在完成后

52:53.660 --> 52:55.020
这个任务就完成

52:55.020 --> 52:56.380
图片夹在失败后

52:56.380 --> 52:57.180
这个任务就失败

52:57.180 --> 52:58.540
因为有些图片不要说

52:58.540 --> 53:00.300
因为图片它做了防盗链的

53:00.300 --> 53:01.740
就是不允许别的网站去夹在

53:02.780 --> 53:03.740
那你就夹在失败了

53:03.740 --> 53:05.260
或者一个地址根本就不存在

53:05.260 --> 53:06.060
那就夹在失败了

53:08.060 --> 53:09.100
如果说任务完成

53:09.100 --> 53:10.460
我先不看后面两句话

53:11.420 --> 53:13.980
我们现在怎么来做这么一件事

53:13.980 --> 53:15.900
我怎么知道图片夹在完成了

53:16.540 --> 53:17.340
这里有提示

53:17.900 --> 53:19.740
AMG元素有两个事件

53:19.740 --> 53:20.860
一个是漏的事件

53:23.500 --> 53:24.700
这个事件什么时候出发

53:25.420 --> 53:28.060
是在图像夹在完成之后出发

53:28.860 --> 53:30.460
图像夹在完成

53:30.540 --> 53:32.300
所以带码到澳洲是不是图片夹在完成了

53:33.260 --> 53:34.700
还有一个事件叫做on error

53:36.700 --> 53:39.340
当图像夹在失败的时候

53:40.780 --> 53:42.460
图像夹在失败

53:42.460 --> 53:44.220
我们先来打印看一下

53:45.260 --> 53:45.660
完成

53:46.940 --> 53:49.260
这里我们打印失败

53:49.260 --> 53:50.700
你看我这个任务很简单

53:50.700 --> 53:52.540
创建一个emg src复制

53:52.540 --> 53:54.300
然后夹在完成过后

53:54.300 --> 53:55.260
它运行这个函数

53:55.260 --> 53:57.340
夹在失败的时候运行这个函数

53:57.340 --> 53:59.340
好我们把这里雕用去试一下

54:04.420 --> 54:05.780
它说什么失败

54:05.780 --> 54:06.580
为什么失败了

54:06.580 --> 54:08.020
这个图片做了防盗链

54:08.020 --> 54:09.940
它不允许别的网页去用它

54:09.940 --> 54:10.580
就失败了

54:11.380 --> 54:12.660
那么失败的原因是什么呢

54:12.660 --> 54:15.220
它说这个服务器返回了一个403

54:15.220 --> 54:17.140
403就是权限不够

54:17.140 --> 54:18.580
你没有这个权限去

54:18.580 --> 54:19.220
别的网站

54:19.220 --> 54:20.180
它这个很多图片

54:20.180 --> 54:21.300
它们做了防盗链

54:21.300 --> 54:23.060
就只有自己的网站能用这个图片

54:23.060 --> 54:24.180
别的网站是不能用的

54:24.740 --> 54:26.260
它就出现这个错误

54:26.260 --> 54:28.420
那我们去找一个能用的吧

54:28.420 --> 54:29.540
我看一下有没有能用的

54:31.380 --> 54:33.060
说一个哈士奇的照片呢

54:34.420 --> 54:36.340
我之前用了一些哈士奇的照片

54:36.340 --> 54:37.380
还是能用的

54:42.610 --> 54:44.610
看一下这张可爱的哈士奇

54:44.610 --> 54:45.810
护士图链地址

54:45.810 --> 54:47.250
咱们看一下这个

54:50.420 --> 54:51.620
你看是不是就完成了

54:52.420 --> 54:52.820
对吧

54:52.820 --> 54:53.380
放心

54:53.380 --> 54:54.020
完成了

54:54.900 --> 54:56.420
因为我这个网数还可以

54:56.420 --> 54:58.100
图链夹在速度比较快

54:58.100 --> 54:59.620
所以这个函数很快就运行了

55:01.540 --> 55:03.460
好那么我们现在希望的是什么呢

55:03.460 --> 55:05.540
希望的是图像夹在完成的时候

55:05.540 --> 55:06.660
你不要随便处理

55:07.300 --> 55:08.260
关键什么时候呢

55:08.340 --> 55:09.700
你只需要做的一件事

55:09.700 --> 55:11.540
就是把这个任务给它完成了

55:12.500 --> 55:12.980
做什么

55:12.980 --> 55:14.020
所以这里一个单码该这么写

55:14.660 --> 55:15.300
Visual

55:16.900 --> 55:18.500
好图片完成的时候

55:18.500 --> 55:19.220
你看这个处事

55:20.740 --> 55:23.700
完成的时候需要提供的数据是

55:23.700 --> 55:24.740
图片的多么元素

55:24.740 --> 55:26.100
你说我们要传的什么

55:26.100 --> 55:27.540
把这个多么元素传进去

55:27.540 --> 55:28.420
别人可能要用的

55:28.420 --> 55:29.780
因为别人要做后续处理的时候

55:29.780 --> 55:30.340
可能要用

55:30.980 --> 55:31.620
就是我告诉你

55:31.620 --> 55:32.740
我这个任务完成了

55:32.740 --> 55:33.860
你让我去创建图片

55:33.860 --> 55:34.980
我一定创建好了

55:34.980 --> 55:36.180
图片也夹在完成了

55:36.260 --> 55:37.460
然后完成之后

55:37.460 --> 55:38.580
我会把这个元素给

55:39.540 --> 55:40.900
这就是我们的要求

55:40.900 --> 55:41.700
根据要求写

55:42.420 --> 55:43.700
如果说失败的时候呢

55:44.500 --> 55:44.900
失败

55:45.620 --> 55:46.260
失败的时候

55:46.260 --> 55:47.780
这里其实有一个失败的原因

55:48.340 --> 55:49.140
on error的时候

55:49.140 --> 55:49.780
你看这个e

55:50.580 --> 55:52.580
换到之前的图片地址

55:53.860 --> 55:54.980
之前的图片地址

55:57.860 --> 55:58.900
这个图片会失败

55:58.900 --> 56:00.180
它会给你失败的原因

56:00.900 --> 56:01.380
你看

56:05.390 --> 56:06.350
这是失败

56:06.350 --> 56:08.430
给失败的原因呢

56:11.790 --> 56:12.510
失败

56:12.670 --> 56:13.390
on error

56:15.150 --> 56:16.030
稍等一下

56:16.030 --> 56:17.870
我可能有点忘记了

56:17.870 --> 56:19.070
还是不是有第二个参数

56:21.070 --> 56:21.790
不对

56:21.790 --> 56:23.390
那还是只有一个参数

56:23.950 --> 56:25.550
那这个失败的原因在哪呢

56:27.790 --> 56:28.510
32

56:29.630 --> 56:30.110
4

56:32.850 --> 56:33.410
event

56:35.250 --> 56:36.530
我这里也找不到了

56:37.490 --> 56:39.570
找不到这个失败的原因在哪呢

56:39.570 --> 56:40.850
我就把这个event传过去吧

56:41.570 --> 56:42.610
type error

56:42.690 --> 56:45.970
到到是一个表示失败的事件对象

56:46.850 --> 56:48.130
我就把这个传过去吧

56:48.770 --> 56:49.570
把这个传过去吧

56:50.530 --> 56:51.170
把它的

56:51.170 --> 56:51.730
传过去

56:52.290 --> 56:53.250
比方说这个e

56:53.250 --> 56:54.370
就是失败的原因

56:54.370 --> 56:55.730
那么失败的时候我要做什么呢

56:55.730 --> 56:57.010
是不是要调问这个rayjax

56:59.410 --> 56:59.890
传什么

56:59.890 --> 57:01.970
传这个失败的这个事件对象

57:03.010 --> 57:03.410
好

57:03.410 --> 57:04.690
这个函数就写完了

57:04.690 --> 57:07.570
这个函数它做的事情只负责给你创建一张图片

57:09.090 --> 57:09.490
一成

57:09.970 --> 57:11.410
然后给你夹在这张图片

57:11.410 --> 57:12.370
夹在完成之后

57:12.370 --> 57:13.730
我就这个任务就完成了

57:14.770 --> 57:16.050
那夹在失败的时候呢

57:16.050 --> 57:17.250
这个任务就失败了

57:17.250 --> 57:18.690
我不管你完

57:18.690 --> 57:20.530
我不管你成功之后要干嘛

57:20.530 --> 57:22.210
我也不管你失败之后要干嘛

57:22.210 --> 57:22.930
我无所谓

57:22.930 --> 57:24.610
反正你去做后续处理

57:24.610 --> 57:25.570
这个函数就写完了

57:26.370 --> 57:26.930
那后边

57:26.930 --> 57:28.450
我们看后边怎么来用这个函数

57:28.450 --> 57:29.970
我这里有两个例子来用这个函数

57:30.610 --> 57:32.770
一个呢让你用这个crazy image这个函数呢

57:32.770 --> 57:35.250
创建一个图片的路径

57:35.250 --> 57:36.690
让你自己自行定义一下

57:36.690 --> 57:37.970
比方说我这里随便来一个吧

57:39.090 --> 57:39.650
就这个吧

57:41.010 --> 57:41.330
这个

57:44.210 --> 57:45.410
创建一张图片啊

57:45.410 --> 57:46.850
为了让你们看得清楚了

57:46.850 --> 57:48.610
我把uil写字吧

57:53.340 --> 57:55.100
这里就传着uil进去

57:56.540 --> 57:57.500
创建一张图片

57:58.220 --> 57:58.860
那么接着

57:59.900 --> 58:02.700
然后如果说你成功了

58:02.700 --> 58:04.300
我是不是可以拿到一个enb级元素

58:05.420 --> 58:06.060
成功的时候

58:06.700 --> 58:09.020
根据这个注释任务完成的时候

58:09.020 --> 58:10.540
是不是还会给我一个相关的数据

58:10.540 --> 58:11.420
就是动物元素

58:12.060 --> 58:13.100
如果说失败了

58:13.100 --> 58:14.540
那是不是给我一个失败的原因

58:14.540 --> 58:15.580
就是这个事件对象

58:16.460 --> 58:17.020
对吧

58:17.100 --> 58:18.380
那我这里的要求是什么

58:18.380 --> 58:20.300
当图像成功加载后

58:20.300 --> 58:20.780
是不是在这

58:22.940 --> 58:25.820
我要把图像的宽高显示到这个p元素里面

58:26.700 --> 58:28.060
好我这里是拿到p元素

58:29.340 --> 58:31.900
document query是negature

58:31.900 --> 58:33.260
拿到这个p元素label

58:34.460 --> 58:35.420
那样式

58:35.420 --> 58:37.260
给这个p元素的inner 80秒

58:37.900 --> 58:39.660
设置为什么图像的宽高

58:39.660 --> 58:40.780
那么图像的宽

58:41.340 --> 58:43.020
这里我们诚意图像的高

58:43.820 --> 58:44.540
宽是多少呢

58:44.540 --> 58:46.220
是不是就是个image元素的宽度

58:47.740 --> 58:50.460
然后高了是不是就image元素的高度

58:51.260 --> 58:52.060
是不是可以拿到了

58:53.180 --> 58:53.420
对吧

58:53.420 --> 58:55.820
因为一幅图里没有加载完成的时候

58:55.820 --> 58:56.460
你去拿宽高

58:56.460 --> 58:58.060
它宽高拿出来永远是零

58:59.660 --> 59:00.060
知道吧

59:00.060 --> 59:00.940
它永远是零

59:01.580 --> 59:03.660
一开始拿宽高的话拿出来永远是零

59:04.140 --> 59:05.740
只有等它加载完成之后

59:05.740 --> 59:06.780
你才能拿到这个宽高

59:07.740 --> 59:10.060
那么这里的成功就指的是图像加载完成

59:11.180 --> 59:11.740
好看一下

59:12.300 --> 59:13.660
是不是可以拿到一个图像宽高

59:13.660 --> 59:15.340
296 x 300

59:16.300 --> 59:18.620
好失败的话打印失败的原因

59:18.620 --> 59:19.820
输出失败的原因

59:21.100 --> 59:22.300
好到这里没有失败

59:23.100 --> 59:24.060
好就这么一个例子

59:24.620 --> 59:25.180
第一个例子

59:25.820 --> 59:26.780
好第二个例子呢

59:26.780 --> 59:28.140
我还是用这个UIL地址吧

59:29.100 --> 59:29.740
第二个例子

59:31.020 --> 59:32.780
还是让你去用这个quiz image

59:34.540 --> 59:35.980
然后呢传递一个UIL地址

59:36.540 --> 59:37.740
成功的时候呢

59:37.740 --> 59:39.740
我需要把这个图像加到这个容器里边

59:40.380 --> 59:41.740
加一个div里边

59:41.740 --> 59:43.500
好我这里呢可以拿到个div

59:44.220 --> 59:44.860
document

59:45.900 --> 59:46.460
snegato

59:47.100 --> 59:47.980
拿到这个contain了

59:50.830 --> 59:53.150
好然后给div append child

59:54.270 --> 59:55.710
是把这个图片加进去完成

59:56.670 --> 59:58.590
图片对象是不是里面已经给我了

59:59.630 --> 01:00:00.030
看没

01:00:00.510 --> 01:00:02.110
好咱们看一下就出来了

01:00:02.670 --> 01:00:04.430
这样子做了它就很灵活

01:00:04.910 --> 01:00:05.950
你只管

01:00:08.190 --> 01:00:08.990
创建任务

01:00:09.950 --> 01:00:11.710
这个任务什么时候成功

01:00:11.710 --> 01:00:12.830
什么时候失败

01:00:12.830 --> 01:00:13.630
你只管这个

01:00:14.830 --> 01:00:16.110
你不管后续处理

01:00:16.270 --> 01:00:17.870
后续处理我可以很灵活的

01:00:17.870 --> 01:00:19.630
我一会要做这样的后续处理

01:00:19.630 --> 01:00:21.790
一会可能也要做别的后续处理

01:00:21.790 --> 01:00:22.910
对吧让别人去做

01:00:23.390 --> 01:00:26.030
你只管描述这个任务什么时候成功

01:00:26.030 --> 01:00:26.910
什么时候失败

01:00:26.910 --> 01:00:28.190
那别人拿到这个任务过后

01:00:28.190 --> 01:00:29.230
他也不管你这个任务

01:00:29.230 --> 01:00:30.430
目前是什么状态

01:00:30.430 --> 01:00:31.230
反正就说

01:00:31.230 --> 01:00:32.510
你只要成功了就运行这个

01:00:32.510 --> 01:00:33.630
只要失败就运行这个

01:00:33.630 --> 01:00:34.110
告诉你

01:00:34.590 --> 01:00:35.310
到时候你成功了

01:00:35.310 --> 01:00:36.590
你就会自动运行这个

01:00:36.590 --> 01:00:37.230
到时候失败了

01:00:37.230 --> 01:00:38.350
你就会自动运行这个

01:00:39.630 --> 01:00:40.670
好这第二题

01:00:42.030 --> 01:00:42.910
好好体会一下

01:00:44.110 --> 01:00:44.670
第三题

01:00:44.670 --> 01:00:45.790
我们这些课没有别的要求

01:00:45.790 --> 01:00:46.750
就把这一题完成

01:00:48.670 --> 01:00:50.030
第三题我这里

01:00:52.190 --> 01:00:53.230
第三题是这样子的

01:00:54.910 --> 01:00:56.430
这里有个函数要 get province

01:00:57.710 --> 01:00:58.430
这个函数呢

01:00:58.430 --> 01:01:00.190
你无需知道这个函数是如何实现的

01:01:00.190 --> 01:01:02.030
这个代码看都不要去看

01:01:02.510 --> 01:01:04.190
不要去看那个函数代码的实现

01:01:04.750 --> 01:01:06.430
因为这里面以后要学到这个新

01:01:06.430 --> 01:01:07.070
以后的知识

01:01:07.710 --> 01:01:09.310
现在不要去看那个函数的实现

01:01:09.310 --> 01:01:10.350
我现在就告诉你

01:01:10.750 --> 01:01:11.950
这个函数它就会

01:01:11.950 --> 01:01:15.550
它的作用是加载远程省分数据

01:01:16.110 --> 01:01:17.390
我们中国有哪些省分

01:01:17.390 --> 01:01:18.990
它会给你远程加载进来

01:01:21.230 --> 01:01:23.230
这个函数它会返回一个 promise

01:01:23.550 --> 01:01:24.430
那你明白了吧

01:01:24.990 --> 01:01:25.630
怎么用

01:01:25.630 --> 01:01:26.750
这个函数怎么用你知道吧

01:01:27.310 --> 01:01:28.590
第二个它就是个 promise

01:01:28.590 --> 01:01:29.230
promise

01:01:29.230 --> 01:01:30.430
promise 是不是一个 z

01:01:31.470 --> 01:01:31.790
对吧

01:01:33.070 --> 01:01:34.670
成功的时候会得到什么

01:01:34.670 --> 01:01:36.270
省份的数组

01:01:36.270 --> 01:01:37.310
也就成功的时候是

01:01:37.310 --> 01:01:38.990
那个函数里面还会给我一个什么

01:01:38.990 --> 01:01:39.870
省份的数组

01:01:40.510 --> 01:01:41.390
我就用ps了

01:01:42.510 --> 01:01:43.390
失败的时候呢

01:01:43.390 --> 01:01:44.510
会给我一个原因

01:01:44.510 --> 01:01:45.310
失败的原因

01:01:46.510 --> 01:01:47.150
就这样用

01:01:47.790 --> 01:01:48.830
所以说我们学 promise

01:01:48.830 --> 01:01:49.710
还有一个很重要的点

01:01:49.710 --> 01:01:51.150
就跟我们写的相关的

01:01:51.150 --> 01:01:52.430
很重要的点就是什么了

01:01:52.430 --> 01:01:54.270
别人给你写好了一个函数

01:01:54.270 --> 01:01:55.310
高数里的

01:01:55.310 --> 01:01:56.670
它返回的就是 promise

01:01:56.990 --> 01:01:59.070
也高数里的成功之后会得到啥

01:01:59.070 --> 01:02:00.110
失败的时候会得到啥

01:02:00.110 --> 01:02:01.230
你至少要知道怎么去用

01:02:02.190 --> 01:02:04.190
这是最最最最低的要求

01:02:05.150 --> 01:02:06.270
就说老师

01:02:06.270 --> 01:02:07.630
我理解能力特别差

01:02:07.630 --> 01:02:09.230
我理解原理我听不懂

01:02:10.190 --> 01:02:12.190
你至少要能干活

01:02:12.190 --> 01:02:13.310
你不影响你干活

01:02:13.310 --> 01:02:15.070
你最少最少能知道这个

01:02:16.270 --> 01:02:17.790
别人给你写好一个函数

01:02:17.790 --> 01:02:19.070
它返回的是 promise

01:02:19.070 --> 01:02:20.350
你要知道怎么去用

01:02:20.350 --> 01:02:21.390
注释也可以打好了

01:02:21.390 --> 01:02:22.270
你要知道怎么用

01:02:22.270 --> 01:02:23.870
如果说连这个东西都不知道的话

01:02:23.870 --> 01:02:25.070
你是干不了活的

01:02:25.070 --> 01:02:26.350
因为你们之后会遇到

01:02:26.990 --> 01:02:27.630
有一些函数

01:02:27.630 --> 01:02:28.830
它就是返回的 promise

01:02:28.830 --> 01:02:29.310
你蒙了

01:02:29.310 --> 01:02:30.190
你不知道怎么去用了

01:02:30.830 --> 01:02:32.190
拿了过后你就直接

01:02:32.190 --> 01:02:32.750
你就看

01:02:32.750 --> 01:02:33.870
你要不要做后续处理

01:02:34.510 --> 01:02:35.790
要的话那就写个认

01:02:37.630 --> 01:02:39.150
然后成功干嘛失败干嘛

01:02:41.380 --> 01:02:41.940
没意思吧

01:02:43.460 --> 01:02:44.340
好那么这里呢

01:02:44.900 --> 01:02:45.780
当然有些函数呢

01:02:45.940 --> 01:02:47.460
有些 promise 你是不需要

01:02:47.460 --> 01:02:48.340
进行后续处理的

01:02:48.340 --> 01:02:49.460
不知道大家还记不记得

01:02:49.460 --> 01:02:50.820
以前我们学过 audio 元素

01:02:51.460 --> 01:02:52.580
audio 元素里边

01:02:53.860 --> 01:02:55.300
有一个方法叫 play 还记得吗

01:02:56.020 --> 01:02:56.420
什么

01:02:56.420 --> 01:02:57.380
这个方法是做很多事情

01:02:57.940 --> 01:02:58.980
这个方法就是

01:02:58.980 --> 01:02:59.540
让这个

01:03:00.820 --> 01:03:02.100
音频开始播放

01:03:02.100 --> 01:03:03.780
或者是视频开始播放

01:03:04.260 --> 01:03:04.580
对吧

01:03:05.700 --> 01:03:06.580
还记得这个函数吗

01:03:07.540 --> 01:03:08.420
我们当时还做了个

01:03:08.420 --> 01:03:09.460
做了做过一个例子的

01:03:10.580 --> 01:03:12.660
这个函数返回的就是 promise

01:03:13.780 --> 01:03:14.820
但是同学说

01:03:14.980 --> 01:03:16.820
我当时为什么没有用这个 zin

01:03:16.820 --> 01:03:18.740
因为当时我不需要说后续处理

01:03:19.860 --> 01:03:21.140
为什么它返回的是 promise

01:03:21.140 --> 01:03:23.780
因为一个视频也好

01:03:23.780 --> 01:03:24.980
一个音频也好

01:03:24.980 --> 01:03:25.700
它播放

01:03:26.260 --> 01:03:28.420
开始播放是需要时间的

01:03:28.420 --> 01:03:29.620
它内部要做些处理的

01:03:30.100 --> 01:03:31.220
它是一个异不扔的

01:03:31.940 --> 01:03:32.900
当然我们不

01:03:32.900 --> 01:03:34.340
我们不需要说知道它

01:03:35.140 --> 01:03:36.260
真正开始播放的时候

01:03:36.260 --> 01:03:37.060
它什么时候完成

01:03:37.060 --> 01:03:38.420
就真正的开始播放的时候

01:03:39.940 --> 01:03:40.500
完成

01:03:40.500 --> 01:03:41.060
就是有的时候

01:03:41.060 --> 01:03:41.780
你们张网的时候

01:03:41.780 --> 01:03:43.300
你看点一下播放是不是要卡一下

01:03:43.300 --> 01:03:43.700
对吧

01:03:43.700 --> 01:03:44.580
因为它是一个异不扔的

01:03:44.580 --> 01:03:45.300
要等一下

01:03:46.340 --> 01:03:48.420
那么真正开始播放的时候

01:03:48.420 --> 01:03:49.460
这个任务完成

01:03:49.460 --> 01:03:51.380
那么由于我们当时是不需要做

01:03:51.380 --> 01:03:52.500
这个异不

01:03:52.500 --> 01:03:53.540
不需要做后续处理

01:03:53.540 --> 01:03:54.740
所以说没有写证

01:03:54.740 --> 01:03:56.260
但实际上是可以写证的

01:03:56.260 --> 01:03:57.860
它真正开始播放的时候

01:03:57.860 --> 01:03:58.580
你要做什么事情

01:03:58.580 --> 01:03:59.300
你可以在这里写

01:03:59.940 --> 01:04:00.340
那意思

01:04:01.140 --> 01:04:02.020
当然我们这里呢

01:04:02.020 --> 01:04:02.820
是有后续处理的

01:04:03.300 --> 01:04:04.980
我去加载这个省份数据

01:04:06.100 --> 01:04:06.660
成功的时候

01:04:06.660 --> 01:04:07.940
还会得到一个省份数

01:04:07.940 --> 01:04:09.140
就运行这个数

01:04:09.140 --> 01:04:10.660
失败的时候给予失败原因

01:04:11.700 --> 01:04:13.140
那么我们的要求是

01:04:13.220 --> 01:04:15.140
让你利用这个Gate of Prevents还是输

01:04:16.260 --> 01:04:17.860
将省份数据加载到这里

01:04:18.580 --> 01:04:19.860
然后一点点来

01:04:19.860 --> 01:04:21.140
成功的时候还会运行这个

01:04:21.140 --> 01:04:21.940
我就把这个输出

01:04:21.940 --> 01:04:23.540
我看一下省份数据到底是什么格式

01:04:24.100 --> 01:04:24.820
失败的时候

01:04:24.820 --> 01:04:25.940
它会运行这里

01:04:25.940 --> 01:04:27.300
我就可以打印输失败原因

01:04:28.020 --> 01:04:29.140
好 咱们来看一下这道题

01:04:33.250 --> 01:04:33.730
好 你看

01:04:34.210 --> 01:04:35.410
是不是打印出这么一个数据

01:04:37.170 --> 01:04:37.490
对吧

01:04:37.490 --> 01:04:39.810
这是从互联网中拿到的这个数据

01:04:40.450 --> 01:04:41.570
是不是打印出这个数据了

01:04:42.690 --> 01:04:42.930
对吧

01:04:42.930 --> 01:04:44.050
这个函数里边

01:04:44.050 --> 01:04:44.610
不用去看

01:04:44.610 --> 01:04:45.570
你们以后都会学的

01:04:46.450 --> 01:04:47.570
现在就告诉你这个函数反过来

01:04:47.570 --> 01:04:48.610
Promise聊一会用

01:04:48.610 --> 01:04:49.410
至少要回用

01:04:50.050 --> 01:04:51.730
好 那么你就这个是一个数组对吧

01:04:52.610 --> 01:04:53.410
我要把它变成什么

01:04:53.970 --> 01:04:55.570
变成一个一个的Option

01:04:56.370 --> 01:04:57.090
放到这里边

01:04:58.130 --> 01:05:00.450
这个事情还用我说吗

01:05:01.250 --> 01:05:02.050
同学们

01:05:02.050 --> 01:05:03.410
你们自己尝试做一下

01:05:03.410 --> 01:05:04.290
写到这了

01:05:04.290 --> 01:05:05.410
你尝试把这个写完

01:05:06.370 --> 01:05:07.650
前面我们做了那么多

01:05:07.650 --> 01:05:08.770
关于数组的练习

01:05:09.970 --> 01:05:11.330
你们发挥想像力吧

01:05:11.330 --> 01:05:13.170
这一块你用啥方式都可以

01:05:13.170 --> 01:05:14.130
有好多种方式

01:05:15.010 --> 01:05:16.130
好 那我写一下吧

01:05:16.210 --> 01:05:17.010
这是一个数组吧

01:05:25.140 --> 01:05:26.500
看着这个PS是个数组

01:05:27.060 --> 01:05:28.980
数组的每一项我是不是可以做硬设

01:05:30.020 --> 01:05:31.380
把每一项的这个省份

01:05:32.020 --> 01:05:32.740
是一个对象吗

01:05:32.740 --> 01:05:33.860
每一项是不是一个省份对象

01:05:34.820 --> 01:05:36.100
每一项就是个省份对象

01:05:36.100 --> 01:05:36.900
有两个属性

01:05:36.900 --> 01:05:37.700
一个是省份的名字

01:05:37.700 --> 01:05:38.500
一个是省份的value

01:05:39.060 --> 01:05:40.340
我把每一个变成什么

01:05:40.340 --> 01:05:41.300
变成一个Option

01:05:42.180 --> 01:05:43.540
这个事情是不是做过了一切

01:05:45.700 --> 01:05:47.220
就变成一个字不错的Option

01:05:47.780 --> 01:05:49.060
它的值是什么

01:05:49.060 --> 01:05:50.660
Option的内容是什么

01:05:50.660 --> 01:05:52.500
内容就是这个对象的label属性

01:05:54.180 --> 01:05:55.780
一般来说要给它写个value

01:05:55.780 --> 01:05:58.260
value就一般来说就指的什么意思呢

01:05:58.260 --> 01:06:00.660
就是给它的油编编号

01:06:00.660 --> 01:06:04.260
省份的编号p的什么value

01:06:05.140 --> 01:06:08.020
每一个省份对象我就不就生成

01:06:08.020 --> 01:06:09.060
生成这么一个东西

01:06:09.060 --> 01:06:10.740
生成一个字不错嘛

01:06:10.740 --> 01:06:12.420
然后最后把个字不错连接起来

01:06:13.140 --> 01:06:14.980
就形成一段ATM片段了嘛

01:06:16.340 --> 01:06:17.620
所以我的后续处理很简单

01:06:17.620 --> 01:06:18.660
我把这个省份对象

01:06:19.700 --> 01:06:21.940
一个数组变成一个ATM字不错

01:06:22.020 --> 01:06:23.060
然后给它放到这里边去

01:06:23.060 --> 01:06:23.460
我还说了

01:06:24.740 --> 01:06:26.820
sale problems in the ATM

01:06:29.870 --> 01:06:33.150
这里我没有用get element by ID去拿到它

01:06:33.150 --> 01:06:34.670
因为浏览器里边

01:06:34.670 --> 01:06:37.070
如果说你可以直接使用它的ID

01:06:37.070 --> 01:06:38.270
作为动物对象

01:06:38.270 --> 01:06:40.190
但是一般来说不推荐这样用

01:06:40.190 --> 01:06:41.390
我还是写了规范一点吧

01:06:42.670 --> 01:06:43.550
我写规范一点

01:06:45.230 --> 01:06:52.610
到去面子

01:06:52.610 --> 01:06:53.410
好看一下

01:06:53.410 --> 01:06:55.330
一面上出来了

01:06:55.330 --> 01:06:55.730
对吧

01:06:55.730 --> 01:06:56.930
然后看一下我的元素结构

01:06:57.970 --> 01:06:59.490
把value稳的

01:07:00.210 --> 01:07:00.610
出来了

01:07:01.650 --> 01:07:03.090
好这是这道题

01:07:04.210 --> 01:07:04.770
下一个道题

01:07:07.580 --> 01:07:07.980
问

01:07:07.980 --> 01:07:10.380
这是一道简单的面试题

01:07:10.380 --> 01:07:11.020
这是不是面试题

01:07:11.020 --> 01:07:12.380
是简单的面试题

01:07:13.980 --> 01:07:15.740
它问你下面有两个promise对象

01:07:15.740 --> 01:07:15.980
对吧

01:07:15.980 --> 01:07:16.620
一个两个

01:07:17.180 --> 01:07:19.180
问你每一个promise的最终状态

01:07:19.180 --> 01:07:20.460
就最终成训性完了

01:07:20.460 --> 01:07:21.420
等了一很久了

01:07:21.420 --> 01:07:22.860
它的最终状态是什么

01:07:24.700 --> 01:07:26.860
然后相关的数据

01:07:26.860 --> 01:07:28.780
成功了它就一个相关数据嘛

01:07:28.780 --> 01:07:30.220
失败了它有一个相关原因嘛

01:07:30.220 --> 01:07:30.540
是什么

01:07:31.420 --> 01:07:32.780
输出结构又是什么

01:07:33.420 --> 01:07:34.380
好咱们看第一道题

01:07:37.310 --> 01:07:39.390
创建一个任务开始运行

01:07:39.390 --> 01:07:40.670
是不是一开始会输出

01:07:40.670 --> 01:07:42.350
运行任务里边的函数

01:07:42.350 --> 01:07:43.710
所以一开始会输出任务开始

01:07:44.270 --> 01:07:44.990
这个等问题吧

01:07:52.860 --> 01:07:53.420
任务开始

01:07:53.980 --> 01:07:54.380
对不对

01:07:55.660 --> 01:07:56.300
然后呢

01:07:57.420 --> 01:07:59.740
接下来任务一开始的状态是啥

01:08:00.860 --> 01:08:01.420
再开一个

01:08:02.460 --> 01:08:03.820
这个任务一开始的状态

01:08:03.820 --> 01:08:04.780
一定是平底

01:08:05.260 --> 01:08:06.380
状态一定是平底

01:08:07.020 --> 01:08:07.580
挂起的

01:08:09.020 --> 01:08:10.460
然后我们调用了这句话

01:08:10.780 --> 01:08:11.900
调用了这句话

01:08:12.620 --> 01:08:13.340
会导致什么

01:08:13.340 --> 01:08:14.940
会导致个任务状态变的话

01:08:14.940 --> 01:08:15.340
对吧

01:08:15.340 --> 01:08:16.860
变成什么变成

01:08:17.340 --> 01:08:18.860
for field

01:08:19.260 --> 01:08:19.900
是讲过的

01:08:21.020 --> 01:08:22.300
而我们传递的一个仪

01:08:22.300 --> 01:08:24.060
那么它的相关数据是什么

01:08:24.060 --> 01:08:25.580
相关数据就是一个仪

01:08:27.500 --> 01:08:27.900
好

01:08:27.900 --> 01:08:28.700
看下一句话

01:08:29.580 --> 01:08:31.740
我又尝试的把这个任务变成

01:08:32.700 --> 01:08:33.900
拒绝状态

01:08:34.540 --> 01:08:35.180
可以吗

01:08:36.460 --> 01:08:36.940
行吗

01:08:37.500 --> 01:08:38.460
不行哦同学

01:08:39.100 --> 01:08:39.740
还记得吗

01:08:40.380 --> 01:08:41.420
我之前说过了

01:08:41.740 --> 01:08:42.700
反复的强调过了

01:08:43.980 --> 01:08:45.340
时间不能倒流

01:08:45.340 --> 01:08:46.460
历史不能重写

01:08:48.620 --> 01:08:49.980
任务一旦确定下来

01:08:49.980 --> 01:08:50.940
状态就固定了

01:08:50.940 --> 01:08:52.060
永远无法改变

01:08:52.700 --> 01:08:53.260
所以说

01:08:53.740 --> 01:08:57.340
后边的这个代码是无效的

01:08:59.100 --> 01:09:00.220
就是这个代码运行的

01:09:00.220 --> 01:09:01.100
跟没运行是一样

01:09:01.180 --> 01:09:02.140
它不爆错

01:09:02.140 --> 01:09:02.860
它无效

01:09:04.220 --> 01:09:05.100
然后下边这一句

01:09:05.820 --> 01:09:07.100
也是无效的

01:09:07.100 --> 01:09:10.380
你尝试了去更改任务状态也好

01:09:10.380 --> 01:09:11.660
更改这个数据也好

01:09:11.660 --> 01:09:12.700
全部都无效

01:09:12.700 --> 01:09:14.220
所以这两行代码运不运行

01:09:14.220 --> 01:09:14.940
运行

01:09:14.940 --> 01:09:16.620
运行的跟没运行是一样的

01:09:16.620 --> 01:09:17.020
无效

01:09:18.860 --> 01:09:19.180
好

01:09:19.180 --> 01:09:19.580
然后呢

01:09:19.580 --> 01:09:21.820
再得到任务结束

01:09:21.820 --> 01:09:22.780
输出任务结束

01:09:24.060 --> 01:09:24.700
最后问你

01:09:25.580 --> 01:09:26.860
这个任务的最终状态是啥

01:09:27.580 --> 01:09:28.140
for field

01:09:28.780 --> 01:09:29.820
数据是什么

01:09:29.820 --> 01:09:30.060
一

01:09:30.940 --> 01:09:31.900
最终输出什么

01:09:31.900 --> 01:09:32.540
任务开始

01:09:32.540 --> 01:09:33.100
任务结束

01:09:34.060 --> 01:09:34.620
没啥意思

01:09:35.500 --> 01:09:35.660
好

01:09:35.660 --> 01:09:36.220
就是这一点

01:09:38.140 --> 01:09:39.020
那么下面这个

01:09:39.020 --> 01:09:40.060
你们自行分析

01:09:40.060 --> 01:09:41.660
我就去叫了一个reject

01:09:41.660 --> 01:09:42.300
是一样的

01:09:43.420 --> 01:09:44.300
这个是无效的

01:09:45.500 --> 01:09:46.060
所以说

01:09:46.060 --> 01:09:46.940
下面那个任务呢

01:09:46.940 --> 01:09:47.980
最终结果也是一样

01:09:48.620 --> 01:09:49.180
任务开始

01:09:49.180 --> 01:09:49.820
任务结束

01:09:49.820 --> 01:09:50.300
然后呢

01:09:51.500 --> 01:09:53.020
就那状态的for field的一

01:09:54.220 --> 01:09:54.460
好

01:09:54.460 --> 01:09:55.500
咱们来看一下吧

01:09:55.500 --> 01:09:56.620
看一下我们能不能通过

01:09:57.100 --> 01:09:58.700
那个打印的

01:09:58.700 --> 01:09:59.420
看得出来

01:09:59.500 --> 01:10:00.540
我再来演示了

01:10:00.540 --> 01:10:01.500
这是promise 1

01:10:02.940 --> 01:10:04.700
我这里就直接输出

01:10:04.700 --> 01:10:05.900
promise 1的状态

01:10:05.900 --> 01:10:06.460
就这么状态

01:10:07.580 --> 01:10:08.300
你看

01:10:08.300 --> 01:10:09.580
任务开始任务结束

01:10:09.580 --> 01:10:10.940
他告诉你promise完成了

01:10:10.940 --> 01:10:12.140
他的数据是1

01:10:13.580 --> 01:10:14.060
有意思

01:10:14.940 --> 01:10:15.180
好

01:10:15.180 --> 01:10:15.820
看下面这个

01:10:18.000 --> 01:10:18.720
你们自己去弄

01:10:19.360 --> 01:10:20.480
结果肯定是一样的

01:10:21.120 --> 01:10:21.360
好

01:10:21.360 --> 01:10:22.800
咱们就是咱们这一刻的内容

01:10:23.840 --> 01:10:24.080
好

01:10:24.080 --> 01:10:24.560
这一刻呢

01:10:24.560 --> 01:10:25.200
大家下去

01:10:25.920 --> 01:10:27.200
花一些时间

01:10:27.200 --> 01:10:28.880
特别重要的是把这个规范

01:10:29.600 --> 01:10:30.880
就这张图好好去

01:10:30.880 --> 01:10:32.080
就这张图

01:10:32.080 --> 01:10:32.640
想清楚

01:10:33.360 --> 01:10:34.560
他这个任务到底是怎么一样

01:10:34.560 --> 01:10:35.680
你怎么样的转换过程

01:10:36.960 --> 01:10:37.360
然后呢

01:10:38.320 --> 01:10:39.520
把这些题做成

01:10:39.520 --> 01:10:41.600
把这一题练习题做完就OK了

01:10:41.600 --> 01:10:42.480
没到底理解

01:10:43.360 --> 01:10:44.560
他到底是怎么回事

01:10:44.560 --> 01:10:45.680
理解

01:10:45.680 --> 01:10:47.680
我们这里可能其实要求不高

01:10:47.680 --> 01:10:49.360
就只需要你会创建任务

01:10:49.920 --> 01:10:51.040
只需要你出去做

01:10:51.040 --> 01:10:52.880
针对这个任务做后续处理就OK了

01:10:53.520 --> 01:10:54.400
把这一题做完

01:10:54.960 --> 01:10:56.080
我们后边还有

01:10:56.080 --> 01:10:57.280
关于promise的一些事情

01:10:57.280 --> 01:10:58.160
我们慢慢去聊

01:10:58.880 --> 01:11:00.080
我们前面的学习呢

01:11:00.960 --> 01:11:03.440
我也不希望给大家增加太多的坑

01:11:03.840 --> 01:11:04.240
但是呢

01:11:04.240 --> 01:11:06.000
这个promise是一定要卖过去的

01:11:06.720 --> 01:11:08.560
这个其实已经比后端好多了

01:11:09.200 --> 01:11:10.320
后端一个很大的

01:11:10.320 --> 01:11:11.200
可就是面向对象

01:11:11.200 --> 01:11:11.680
那个坑

01:11:12.160 --> 01:11:13.680
很多同学是卖不过去的

01:11:13.680 --> 01:11:15.040
很痛苦很痛苦的

01:11:15.040 --> 01:11:16.800
你们实际上是没有那么高的坑

01:11:17.280 --> 01:11:18.480
就这个一个promise

01:11:19.360 --> 01:11:20.000
把它搞定

