WEBVTT

00:01.010 --> 00:05.110
上级课咱们讲了这个生鱼参数

00:06.390 --> 00:11.250
由这个生鱼参数呢 会引发一个问题 我给大家看一下什么问题啊

00:11.510 --> 00:15.090
这个问题呢 需要我们本级课的展开运算幅才能解决

00:15.350 --> 00:15.850
好

00:16.370 --> 00:18.170
大家看啊 这里有两个函数

00:19.190 --> 00:20.970
第一个函数呢 是求和

00:21.230 --> 00:24.310
他用生鱼参数对吧 我们上级课演示过了啊 一次给他写参数

00:25.330 --> 00:26.610
那么他就来求和

00:27.370 --> 00:28.650
上级课写过了 不讲了啊

00:28.890 --> 00:32.990
所以每一课的代码 大家已经要下去写一下 一定要下去写一下啊

00:33.250 --> 00:37.090
我反复强调这一点 你光听是没用的 真的是没用的

00:37.350 --> 00:39.150
哪怕你听得懂

00:39.410 --> 00:44.270
觉得这个很简单 但是你也得写一遍啊 不写的话是一点感觉都没有

00:45.030 --> 00:47.330
好 下面有提供了这么一个函数

00:47.590 --> 00:49.130
你给我传一个长度

00:49.650 --> 00:51.950
我跟你生成了一个数组

00:52.970 --> 00:56.550
那么这个数组的每一项呢 是一个水积数 你看呀 我生成一个数组

00:56.750 --> 00:58.810
然后循环 对吧 循环

00:59.070 --> 01:02.910
以后不再使用bar了啊 全部用const或者是net

01:03.670 --> 01:08.030
那么循环里边呢 每一次循环呢 我数组里边加一个水积数

01:08.530 --> 01:09.550
就这么简单啊

01:10.330 --> 01:13.650
这里就是这么两个函数 接下来我要做这么一件事

01:15.190 --> 01:16.990
首先呢 我要获取一个数组

01:17.750 --> 01:18.270
numbers

01:19.030 --> 01:20.950
怎么获取呢 通过调用这个函数

01:21.330 --> 01:23.890
来获取一个数组 给他一个长度比方说10

01:24.710 --> 01:29.490
获取一个长度为10的水积数组 看一下吧 numbers

01:30.250 --> 01:34.450
就我也不知道这个数组里边有哪些数字 我是不知道的 是通过这个函数来生成的

01:35.810 --> 01:41.090
多少看这个场景啊 这个场景非常非常常见的 他不一定是水积数 总之这个数组里

01:41.330 --> 01:44.610
你拿到一个数组之后 这个数组里边有哪些东西你是不知道的

01:45.250 --> 01:51.330
这个是不是很常见 比方说大家是请求 你请求服务性的东西 然后给你一个数组 你鬼知道他里边有啥东西 对吧

01:51.810 --> 01:54.730
好 这是不是拿到一个数组 你不知道这里边有哪些东西

01:55.850 --> 01:58.370
好 接下来呢 我要让你把数组求和

01:59.890 --> 02:06.850
求和怎么办 是不是调用这个函数啊 好来吧 我来调用这个函数来求和 问题来了 我这里写啥呢

02:08.650 --> 02:17.130
这里应该咋写 是不是把数组里边每一项来罗列出来 对吧 因为是生女参数嘛 对不对 他把多个参数合并成数组 他会自动的合并

02:17.810 --> 02:22.970
但是那你这里已经是数组了 看到没 已经是数组了 那你能不能把这个数组放这呢

02:23.810 --> 02:29.810
如果我这样子写 请问大家一个最基本的问题啊 我觉得这个问题呢 可能有同学出处

02:30.810 --> 02:37.780
这里传令到几个参数 什么 传令到几个参数 传令到10个

02:39.540 --> 02:45.660
永连你别你别吓我啊 真的别吓我 我心脏不好 这里传令到几个参数啊 所以传令到一个参数啊

02:46.180 --> 02:55.420
对不对 这个参数的内形是一个数组 传寄到一个数组作为一个参数 传了一个参数进去 那么他会怎么办呢 他会把这个参数

02:56.060 --> 03:01.100
收集成一个数组 也就是说他会形成这么一种结构 你看一下 这边我们把阿格尔斯打印出来

03:03.100 --> 03:10.700
这个数组有几项 这个收集的还是收集参数的 你这里给了一个参数 他是把这一个参数收集成数组了 对吧

03:11.500 --> 03:16.860
他相当于是收集成这个样子 你传了一个参数吧 他把这个一个参数收集成了一个数组

03:17.980 --> 03:19.980
好 那么这一个参数是不是又是一个数组

03:21.740 --> 03:29.020
是不是又是一个数组 你看 这个一个参 这个数组只有一项 这一项是不是又是一个数组 因为你给他传了一个数组 他就把这个数组作为第一项

03:29.660 --> 03:32.140
收集的收集进来了 对吧 是这么个意思

03:32.540 --> 03:38.220
他是这样子收集的啊 就是你传了一个参数 他就把他收到一个数组里边 他甭管你这个参数给的是啥

03:38.860 --> 03:41.900
那这个东西是不是我们想要的呢 肯定不是

03:42.380 --> 03:47.660
那比方说这个数组里边有1235 那么我们希望的是把这个数组展开

03:48.300 --> 03:51.900
他每一项展开写到这 我们希望是这个东西

03:52.220 --> 03:56.140
但是我们现在没法展开 因为我不知道这个数组里边是啥 明白我这个意思吗

03:56.540 --> 03:58.140
我根本就不知道这个数组里边是啥

03:58.620 --> 04:03.740
而且这个数组里边就算我知道了是啥 我打印出来知道是啥 那你能保证每一次运行都是一样的嘛

04:03.900 --> 04:09.500
你无法保证 比方说这个是请求你从服务器拿到数据 你鬼知道他里边会给你什么数据

04:10.060 --> 04:13.580
你不能去假设的 因此呢 我们现在希望

04:15.100 --> 04:17.980
将数组的每一项

04:19.100 --> 04:23.260
展开一次传作为参数

04:24.380 --> 04:26.620
传递 而不是把整个数组

04:27.340 --> 04:28.540
而不是把

04:29.980 --> 04:31.180
整个数组

04:32.140 --> 04:32.780
作为

04:33.660 --> 04:38.860
一个参数传递 就是我们这个数组有十项 我希望作为十个参数一式传递进去 展开

04:39.500 --> 04:42.860
那么而不是把整个数组作为一个参数传递 懂我这个意思吗

04:43.420 --> 04:47.500
那么要展开怎么办的 就要用到这几课学习的 展开运算服

04:48.220 --> 04:53.740
好 展开运算服特别特别简单 他分为两种 一种是对数组展开

04:55.100 --> 05:00.060
啊 一种是对啊对象展开 我们分开来说啊

05:02.610 --> 05:08.130
数对数展开的是es6里面提供的 对对象展开的是es7里面提供的啊 我们都一起来说了

05:08.450 --> 05:11.250
其实他用法是一样的 用使用方式

05:11.970 --> 05:13.970
都一样 怎么样使用呢

05:14.690 --> 05:18.450
就是三个点 然后呢 后边要展开的

05:19.410 --> 05:22.610
东西 你要展开什么 你前面下写三个点就完事了

05:23.170 --> 05:26.930
啊 那么这种协访跟生鱼参数是不是一样的 但是用的地方不一样

05:27.250 --> 05:33.090
如果说你三个点用到形参这里呢 他指的是收集生鱼参数 他是指 其一个收集参数的目的

05:35.010 --> 05:38.370
其一个巨龙啊 把东西分散的东西巨龙的目的

05:38.690 --> 05:41.330
如果你写到别的地方的话 他是指的是展开

05:41.730 --> 05:47.010
啊 比方说在这里写三个点 什么意思呢 那么现在就不一样了啊 如果说你这

05:47.650 --> 05:49.650
这样子写的话

05:49.890 --> 05:51.890
如果说你这样子写的话

05:52.690 --> 05:55.170
那么相当于是

05:56.130 --> 05:59.490
相当于传递了10个参数进去

06:00.450 --> 06:03.570
他怎么为什么传递10个 他把数组的每一项展开传递进去

06:03.730 --> 06:08.690
比方说这个数组里面是1235 他就传了一个1 倒号 2 倒号 3 倒号 4 倒号 5

06:09.170 --> 06:13.090
相当于是这么一个意思 那么现在就正常了 你看一下叔叔

06:13.730 --> 06:18.290
那你看 阿Q是里面是不是正常了 对吧 是吧 这个数组展开传递进去了

06:18.530 --> 06:20.690
好 那么这样子呢 他自然而然就可以求和了

06:22.210 --> 06:23.970
自然而然就可以求和了 你看一下

06:29.660 --> 06:34.300
好 看一下啊 你看是不是可以求和了 对吧 这就是展开运双幅

06:35.980 --> 06:40.380
而且呢 你这里可以非常灵活的使用啊 比方说你可以这样子写

06:41.020 --> 06:46.700
你还可以这样子写啊 你传 先把这个数组展开 展开了传递几个参数 是不是传了10个参数

06:46.780 --> 06:48.780
哎 后边我还需要继续传递

06:49.260 --> 06:51.260
还需要继续传递 是不是可以继续传啊

06:51.900 --> 06:53.260
没有任何问题

06:53.740 --> 06:55.100
继续传就行了

06:55.820 --> 07:02.700
那前边呢 前边的呢 我们也可以继续传 在中间展开也可以 那传了几个参数 是不是12 这里有10个

07:03.900 --> 07:07.100
12 13 14 是不是传了14个参数 对不对

07:07.820 --> 07:10.380
没有任何问题 看没 是不是这个道理啊

07:11.180 --> 07:17.260
这就是展开运双幅 特别特别好用这个玩意儿 他可以把一个组装的东西加展开

07:17.500 --> 07:22.460
展开成一个平面的东西 他本来是个数组 那么可以展开成为一个一个的数据

07:23.020 --> 07:31.020
那么你用这一点的话 还可以实现很多的地方 他不仅在参数这里 可以玩这些东西啊 我这也是稍稍做

07:31.100 --> 07:34.780
还可以实现实现很多的场景 比方说啊 我们再举个例子

07:35.580 --> 07:36.780
我们这里呢 有一个数组

07:38.060 --> 07:47.100
ar1 比方说3678 2325 就随便写个吧 随便写一些 好 那么我们先希望复制

07:47.980 --> 07:55.980
ar1 数组 到ar2 我们希望复制数组 怎么复制呢 有人说那我们这样子写行不行

07:56.060 --> 08:03.420
ar2 ar1 能不能这样子写呢 这样子写了两个变量的地址 是不是指向了同一个数组对象

08:04.380 --> 08:10.620
那么这样子呢 你改动了ar2 是不是也跟着改动了ar1 对吧 我们现在是

08:11.100 --> 08:13.980
希望复制 也就是科龙 我们现在学过科龙 对吧

08:15.580 --> 08:19.420
是不是要进行科龙啊 把这个数组科龙到ar2里面去

08:19.900 --> 08:25.340
那么我们要怎么以前要怎么科龙 是不是先把这个ar2建立一个新的数组啊

08:25.660 --> 08:29.100
你至少得新创建一个数组吧 也不能是原来的数组啊 才能科龙嘛

08:29.500 --> 08:36.220
然后循环ar1 然后一向一向加到ar2里面去 对吧 是不是挺麻烦的 好 接下来呢 我们可以这样子写

08:37.180 --> 08:44.540
三个点 ar1 没了 你看一下 是不是这个逻辑啊 好 我们这里输出啊 ar2

08:47.490 --> 08:53.010
好 输出一下 你看 是不是一样的 再看一下 ar1 是不是等于ar2呢

08:53.570 --> 08:55.410
ar1 是不是等于ar2呢

08:56.450 --> 09:00.610
保存 不一样的 force 肯定不等于 因为这里新创建的一个数组 你看综扩号

09:00.930 --> 09:04.530
以前我给大家说过啊 看到综扩号就表示一个新的数组单身了

09:04.850 --> 09:09.010
看到大国号表示一个新的对象单身了 那么这里肯定不是一个数组

09:09.570 --> 09:14.130
对吧 他把他的内容原分不懂的复制过来 因为这样子显得他相当于是把ar1展开

09:14.530 --> 09:19.330
这个表达是就相当于是你写的啥了 你写的36785

09:19.970 --> 09:25.970
相当于是这样子写的 明白这个意思吗 相当于是把ar1里边的内容全部一个一个放进来了 对不对

09:26.530 --> 09:27.570
相当于是这么一个意识

09:28.130 --> 09:33.090
这就展开运算幅 那如果说你还要多加一向呢 在这个数组前面多加一向呢

09:33.490 --> 09:36.050
不要说你要加一个0在前面 写一个0就完事了

09:36.610 --> 09:40.210
你要多加一个1在后边 写个1就完事了 啊 中间展开

09:40.930 --> 09:43.890
是不是特别特别好用啊 印象特别深刻的啊

09:44.770 --> 09:51.090
啊 这就是这数组的展开啊 我这个笔记都不知道该怎么记了啊 你去看看那个例子就行了啊

09:52.370 --> 09:53.410
他就展开运算幅

09:54.610 --> 09:59.090
能力也吧 应该也没有什么问题吧 这数组的复制可以用这种方式

09:59.330 --> 10:05.890
那么这个展开运算幅呢 他除了可以展开数组之外呢 还可以展开对象

10:06.850 --> 10:13.090
啊 es6觉得es6说过后 根据社区的反馈啊 哇 这个东西太好用了 约是es7

10:13.650 --> 10:17.810
觉得可以进一步加强那个东西 连对象都可以展开 看着啊

10:18.690 --> 10:19.890
我们来看一下对象的例子

10:21.730 --> 10:25.410
好 比方说我们这里呢 写上这个obj有个对象obj1

10:26.770 --> 10:27.970
啊 有个内

10:28.770 --> 10:30.290
啊 然后说

10:31.570 --> 10:32.050
成功了

10:33.010 --> 10:41.650
啊 有一个年龄啊 18岁有个奈 爱好啊 爱好啊 爱好什么 爱好邓曹 对吧

10:44.050 --> 10:45.090
为什么我也不知道啊

10:45.890 --> 10:53.490
然后呢 现在我们要做什么 你做一个什么事呢啊 做一个什么事呢 我要把obj1复制克隆啊

10:54.450 --> 10:59.170
克隆一个对象克隆到obj2

10:59.970 --> 11:06.130
那你看怎么写 肯定不能这样子写啊 肯定不能这样子写 两个对象又是同一个地址了 对吧 肯定不能这样子写

11:06.770 --> 11:13.330
那么应该怎么写呢 我们以前该打做 是不是又要创建一个新的对象 然后循环obj1的所有属性

11:13.330 --> 11:16.050
挨在了假脑obj2里边去 对吧啊

11:16.770 --> 11:23.650
是不是要这样子来做 现在不用了 你看着啊 克隆对象的时候 我们给他新建个对象 他有哪些属性呢

11:23.890 --> 11:26.610
他的属性把obj1全部展开

11:27.570 --> 11:35.730
这样子写obj1全部展开 那么obj1它是一个对象 对象展开过后是什么呢 就相当于是这里写了

11:36.050 --> 11:38.130
nem等于什么呢obj1.nem

11:39.090 --> 11:44.770
a几呢等于obj1.a几就相当于是这个了 他展开过后就相当于是这个了

11:44.770 --> 11:48.930
因为obj1展开过后是不是就是一个建值队 对吧 一个属性的和一个属性值

11:49.810 --> 11:55.650
那么直接展开obj1 是不是这样子复制过来了 对不对 我们再输出obj2

11:56.210 --> 11:59.490
看一下吧 你看 是不是就复制过来了 对不对

12:00.610 --> 12:06.770
而且呢 我们可以利用对象属性不能重复定义这么一个特点 什么叫对象属性不能重复定义

12:07.010 --> 12:14.450
比方说nem等于a 然后nem等于b 那么你看两个属性都是一样的 对吧 那么他最终后边的会覆盖前边的 你看没有

12:14.850 --> 12:21.090
后边的属性会覆盖前边的 我们利用这个特点 我们可以完成这么一件事 我们先把obj1展开

12:22.130 --> 12:23.730
然后呢 给他加一个nem属性

12:24.370 --> 12:30.210
变成叮咯 叮咯他也喜欢叮咯 对吧 好 那么这样子一加进去过后呢 你看一下

12:31.330 --> 12:36.610
其他的属性是不是没变 其他的来自于乘哥的这个对象里面的属性是不是没变 对吧

12:36.930 --> 12:42.770
然后呢 他多了一个属性叫nem 啊 那么属性是不是跟前面的重复了 哎提到覆盖的作用

12:43.330 --> 12:52.530
那么这样子一来了 我们就可以轻松的去复制一个对象 并且呢去更改一些原有的属性 这种做法以后你们在react车里边

12:53.650 --> 12:55.250
天天都要看到 不停的都要看到

12:56.290 --> 13:02.450
啊 因为他要保证原来的对象不可变 要产生一个新的对象啊 那么我们就可以用这种方 这种模式来做

13:03.090 --> 13:09.730
你看 我们没有改动obj1 我们产生了一个新的对象 对这个新的对象的进行的改动 就可以利用这种方式来做

13:10.530 --> 13:12.850
看到没 能理解吗 对吧

13:14.210 --> 13:24.770
好 但是大家要注意一点啊 这种克农呢 叫做浅克农 他是一个浅克农 为什么是浅克农呢 这个很好理解 因为比方说啊 我举个例子

13:25.890 --> 13:27.810
啊 这里边的还有一个dress啊

13:28.530 --> 13:32.530
dress country country

13:33.730 --> 13:39.970
哈尔滨 about 中国啊 中国啊 然后呢 province province 这是那个

13:41.410 --> 13:47.330
省份市场呀 黑龙江是吧 黑龙江啊 然后呢 city city

13:48.530 --> 13:49.010
哈尔滨

13:50.370 --> 13:53.730
好 那么这个对象里边还有一个对象 一个属性他又是个对象

13:54.450 --> 14:03.490
那么这样子的obj2复制过来了啊obj2复制过来了 那么把obj1复制 把obj1的所有属性都复制过来了 那么obj2里面自然有一个而对式

14:03.490 --> 14:05.890
这个毫无疑问 你看 说复制过来了而对式

14:06.530 --> 14:07.810
但是呢 我们来看一下

14:08.610 --> 14:16.050
如果说我输出obj1.2而对式 看他是不是等于obj2.2而对式 看一下是不是等于了

14:16.530 --> 14:17.490
两个是相等的

14:18.690 --> 14:21.650
所以他是浅克农 他没有进行生存式的克农

14:22.370 --> 14:29.970
那么为什么是浅克农呢 你想这个道理啊 他是什么 他是相当于是什么代码 相当于是nam.obj1.nam

14:30.370 --> 14:32.210
然后呢 后边我们不写了啊

14:32.770 --> 14:33.970
然后呢 是而对式

14:35.250 --> 14:36.050
而对式

14:36.530 --> 14:43.500
等于什么呢obj1.2而对式 你看一下这个而对式的属性 虽然我这里新增了一个属性而对式

14:43.740 --> 14:47.100
但他的地址是不是跟obj1.2而对式的地址是一样的

14:47.340 --> 14:52.220
把obj1.2而对式的对象的地址复制给这个属性 两个属性的地址是不是一样的

14:52.940 --> 14:58.940
对吧 因为你只展开了obj1 你并没有生存式去展开而对式 所以说呢 这里呢

14:59.420 --> 15:00.700
他是一个浅克农

15:01.260 --> 15:01.820
浅克农

15:03.260 --> 15:09.820
那如果说你要完成生克农的话 那跟之前诚哥的JS教程里面的生克农的代码是一样的啊 去完成生克农

15:10.140 --> 15:11.420
另外呢 如果说

15:12.540 --> 15:13.420
你知道

15:14.060 --> 15:16.060
我们再复制一个啊 再复制一个

15:16.940 --> 15:21.660
如果说你知道他的对象结构 他一定是这种结构 你不想去写什么

15:21.900 --> 15:24.780
一个通用的生克农方法 函数 你只是

15:25.180 --> 15:29.340
在这个位置做一个生克农 那怎么办呢 你知道这个地方会有一个浅克农的问题

15:29.580 --> 15:31.420
那么怎么办呢 你看着我们可以这样做

15:31.820 --> 15:36.140
obj1 是不是把4个属性全部展开在这了 其中有一个属性是浅克农

15:36.860 --> 15:39.500
好 我们单独的把这个属性控制控制一下

15:40.220 --> 15:45.180
而对式 你不是浅克农吗 我的把力变成生克农 你看着 我怎么变

15:46.300 --> 15:47.820
我给他一个新的对象

15:49.100 --> 15:50.060
这是不是个新的对象

15:51.020 --> 15:55.900
没问题吧 你看我这里写了个 是不是写了个同名属性 覆盖了前面的东西了 你看一下吧

15:58.220 --> 16:05.420
保存啊 你看一下 现在而对式是不是一个空对象了 对吧 覆盖了前面的属性了 对吧 覆盖前面展开的属性了 你看 两个不相等了

16:05.740 --> 16:08.140
但是呢 而对式里面没东西 对吧 没东西 好

16:08.780 --> 16:14.540
而对式的对象里边 我再进行展开 展开谁 展开obj1的而对式

16:15.500 --> 16:16.540
是不是可以这样做

16:17.420 --> 16:24.860
把obj1的而对式 他不是个对象吧 对象也可以展开 把这个对象里面的属性再展开放到这 就相当于在这里再放到这个东西

16:26.140 --> 16:29.580
没有这个意思吧 我们再单独对这个属性的再进行展开

16:29.980 --> 16:38.220
来直接写 总之呢 我一定要 如果说遇到对象啊 我要克农的话 我要进行生克农的话 我一定要去重新创建个对象或者是重新创建一个数组

16:39.180 --> 16:43.820
好 比方说 数组这一块也可以做类似的操作

16:44.060 --> 16:51.980
navs 比方说 他乘哥喜欢 邓少也喜欢 承承 承承

16:54.620 --> 17:01.420
承承1 这里 还喜欢 承承2 我也不知道叫他名

17:02.140 --> 17:11.420
就承承2 他喜欢三个 好 那么这个navs 他是不是也是一个浅克龙啊 放过来 你看呀 那么我们这里输出navs

17:12.620 --> 17:19.260
这边输出navs 两个是不是又是一样的 又是一个浅克龙对吧 而对式没问题了 而对式是生克龙

17:19.740 --> 17:25.180
因为我们这里新创建的一个而对式对象 那么是不是同样的处理方式 我再在后边写一个navs

17:25.580 --> 17:31.340
覆盖掉 又是一个新的数组 这个新的数组去展开什么了 展开obj1点

17:32.060 --> 17:37.180
因为数组是可以展开的 对吧 我刚才讲的 数组展开放在这 是不是新的数组 对吧

17:37.740 --> 17:44.460
哎 我们还可以给他加上啊 登革除了喜欢邓少 承承承承承二 还有就是承承三

17:47.100 --> 17:51.020
对吧 是不是还可以给他加一下 就可以非常灵活的处理 你看

17:51.980 --> 18:00.780
没问题吧 这种展开运算服以后了 今后你们在做什么对象克龙 数组克龙的时候 极其有用

18:01.420 --> 18:04.940
而且这种操作以后在react学习的过程中

18:05.820 --> 18:13.420
天天都会遇到 所以说一定要学会 你们下去就去写这个例子啊 就去写这个例子 把这个例子写一遍

18:14.860 --> 18:20.940
没有什么意义 虽然做不出来什么效果 但是你可以熟练他的愚法 你可以体会到他是怎么去展开的

18:21.260 --> 18:23.420
你很多东西你要去写的 过后你才能明白

18:24.300 --> 18:28.140
然后这意思嘛 这是展开运算服啊 那么他可以展开对象也可以展开数组

18:29.260 --> 18:33.260
好 那么这就没了啊 没了 展开运算服就这么一点东西了啊

