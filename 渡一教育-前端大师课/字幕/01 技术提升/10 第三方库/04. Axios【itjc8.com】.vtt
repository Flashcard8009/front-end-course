WEBVTT

00:00.110 --> 00:03.550
好 咱们来看一下 下一个第三堂口叫Axious

00:04.550 --> 00:10.030
是这样子啊 因为杰克瑞啊 以后我们学了框架之后啊 你们以后的公司里边

00:11.430 --> 00:17.910
大部分情况下 不会使用到杰克瑞 我给大家解释过原因了 新的项目里边都不会使用杰克瑞

00:18.510 --> 00:23.070
但是一些旧的项目里边还会 仍然会用到这个杰克瑞 所以说里面还是有必要学习

00:24.110 --> 00:29.030
是这样子 因为杰克瑞这个库呢 他里边本身就包含了一个对阿加克斯的封装

00:30.190 --> 00:36.190
我们之前说过的吧 一个阿加克斯 他里边本身就包装了这么一个封装 但是呢 你们以后

00:36.790 --> 00:43.270
在开发前端项目的时候 并不一定会使用到杰克瑞 比方你用了微博的框架 或者是上了rex框架

00:43.750 --> 00:49.550
那么就不会用到杰克瑞 然后不会用到杰克瑞的时候呢 我们怎么来使用阿加克斯呢 当然你可以用传统的方式

00:50.390 --> 00:55.550
拿到什么方式 两种 一种是使用xml xtp

00:56.030 --> 01:01.310
rex 都是一种非常旧的api 对吧 发送阿加克斯请求的 我们把它简称为xshr

01:02.030 --> 01:06.910
还有第二种方式呢 是使用我们新的被起api 两种方式都可以发送阿加克斯请求

01:07.710 --> 01:14.110
但是有些人呢 他觉得这个使用原生的这种阿加克斯发送请求呢 有些时候还是不是很方便

01:14.550 --> 01:18.310
因此呢 他就可以做了一些封装过后的阿加克斯请求

01:18.990 --> 01:25.070
就像你之前的杰克瑞 杰克瑞里边多了阿加克斯这个函数 他其实就把这个东西给你封装了

01:26.270 --> 01:30.110
那用它更加方便一点 就这么个意思 那么xshr这个库呢

01:31.150 --> 01:34.350
它就是一个封装了阿加克斯请求的这么一个库

01:35.230 --> 01:40.350
它封装了网络请求 准确的说应该是封装了网络请求 因为这个库啊 它可以

01:41.190 --> 01:45.710
在不同环境里边使用 它在浏览器环境里边可以用它 那么就发送的是阿加克斯

01:46.870 --> 01:48.590
将来里面还会接触到露的环境

01:49.270 --> 01:51.590
它就不是浏览器环境了 还是可以使用它

01:52.150 --> 01:55.510
它就可以发送一个adb请求 一个普通的adb请求 都可以用它

01:56.310 --> 01:59.790
使用同一套API 既可以在浏览器里边使用 也可以在露的环境里边使用

01:59.990 --> 02:02.750
它就这么一个特点 因为它是专业做那个

02:03.790 --> 02:08.390
网络请求的 所以说呢 它里面的功能提供的要比杰克瑞里面要强大一些

02:08.790 --> 02:12.950
而且将来你们做前程开发的时候 不一定用到杰克瑞 对吧 那么就可以单独使用它

02:13.230 --> 02:17.830
来发送网络请求 其实这个xshr它封装的也是这个

02:18.630 --> 02:22.470
因为它输远的时间比较早 那个时候还没有废起API 所以它

02:22.830 --> 02:25.630
它是专业发送这种请求的 它封装的是这个东西

02:26.350 --> 02:29.230
它内部底层用的是XML ATP Request

02:30.270 --> 02:35.190
知道吧 就这么一个情况 给大家说一下 那么用它到底有多方便呢

02:36.110 --> 02:39.670
接下来我们来看一下它到底有多方便 这是它的官方网站

02:41.670 --> 02:47.430
它的官方网站是有中文的 所以说这里不需要提供民间中文网 本身就是个中文网站

02:48.230 --> 02:54.510
呃 这里你可以点起步 它东西其实不多 东西真的不多 它里边看一下这个API

02:55.790 --> 03:03.070
大概看一下吧 它就是提供这么一个函数叫xshr 你不要传绿一个对象 一个对象就是配置 你发送请求 你要配置方法吧

03:03.550 --> 03:09.110
方法唯有什么什么 Pulse或者是Gate或者是一些其他方法 你请求的URLD只是什么

03:09.790 --> 03:14.070
对吧 你发送的数据 比方Pulse的请求 你要发送一个请求体吧 消息体

03:14.670 --> 03:20.590
那么个数据是什么 那么这就大概就相当于是啥呢 就相当于是 如果说我们用废棋API来写的话 就相当于是个废棋

03:21.590 --> 03:24.710
然后呢 user 12345

03:25.670 --> 03:28.430
对吧 然后后边我们配置一下请求方法

03:29.350 --> 03:32.750
Master的为Post 还有就是

03:33.990 --> 03:37.590
数据 数据的话我们要配置一下Headers 然后

03:40.470 --> 03:41.030
content

03:42.830 --> 03:43.830
content type

03:44.510 --> 03:48.990
为application

03:49.790 --> 03:58.150
节省 是吧 这些事情呢 其实xshr都已经给你做了 你不用再配置请求头了 然后呢 消息体 body 我要用节省

03:59.230 --> 03:59.750
军给法

04:01.350 --> 04:04.070
然后把这个对象 把个请求的数据放过去

04:05.390 --> 04:08.430
它就相当于是我们这一段代吧 是不是要写起来麻烦一些

04:09.030 --> 04:14.190
对不对 那么用那个xshr的话 那么就非常简单的 就这么几行代吧就可以跑进了

04:14.710 --> 04:15.990
那么这就是xshr的它的

04:17.230 --> 04:19.390
封装的一个好处 写些比较简单

04:20.310 --> 04:25.070
然后呢 它其实还可以提供一些别名啊 就是你可以使用xshr直接写请求配置

04:25.750 --> 04:32.470
那么到底有哪些配置 你可以参与一下请求配置这里 它可以有哪些配置 它的配置相非常非常多啊 功能很强大

04:33.270 --> 04:33.750
然后呢

04:34.510 --> 04:42.590
当然你也可以直接利用它的一些别名 比方说你要发动一个gat请求你一个xshr的gaturl地址 然后呢 跟上一些后续的配置

04:43.190 --> 04:49.110
那么一般来说 教大家啊 在看那个API稳当的时候 出现那种中货号是什么意思

04:49.710 --> 04:56.830
中货号就表示可选的 可以有没也可以没有 又可以传第二个参数也可以不传 就这么个意思啊 中货号表示可选

04:57.830 --> 05:03.070
然后Pose请求的时候呢 我们可以传入一个uil地址 第二个参数呢 传入我们的数据 是一个对象

05:03.470 --> 05:08.430
它会自动给你封装成接剩格式发出去 然后呢 就是还有一些额外的配置就写着

05:09.150 --> 05:12.430
对啊 它给你提供了一些别名 那么这里呢 我给文档里边给大家

05:13.110 --> 05:18.350
列出了一些常见的使用方式 比方说我这里发送一个gaturl请求 把请求路径传进去

05:19.230 --> 05:20.990
然后呢 它反过来是一个promise啊

05:21.870 --> 05:26.630
反过来是个promise 所以说你可以用这种方式 当然你也可以用关键字而位子来等待它

05:27.270 --> 05:32.830
得到响应结果 这个响应结果里面包含了响应头 响应体 那么这个响应

05:33.310 --> 05:39.710
响应结果里边属性data就表示响应体 属性header时就表示响应头 一打一就知道了

05:40.110 --> 05:45.790
好 咱们来试一下吧 随便来一个 就这个玩意吧 再试一下 我们在这里新建一个test

05:46.470 --> 05:52.710
对 ATML 好 引用它啊 引用它的这个库的cdm

05:54.350 --> 06:02.960
复制一下 引用它 好 然后我们再写一个元素啊 把这句话沾过来

06:03.920 --> 06:08.160
请求这个地址啊 我们得到一个英雄的列表 我们之前也用过这个地址对不对

06:11.410 --> 06:20.050
好 你看 是不是得到拿到一个数据了 对吧 非常简单吧 那如果说你不用调data的话 那么拿到的响应体就是想整个的响应结果

06:20.610 --> 06:27.410
啊 就是包括你请求做了哪些配置啊 在这里边 想用的想用的头 头的信息也在这里边

06:27.890 --> 06:31.730
对吧 然后datadata就是我们的响应体

06:32.450 --> 06:37.570
对 就是什么一个 就是什么个情况 他会反悔给你 而且他会自动给你解析这些设计啊 你都不用管

06:38.130 --> 06:43.170
就直接拿到就行了 当然你可以用那个await关键制也可以 比方说我们这个封装的一个立即实现函数

06:45.570 --> 06:49.730
这里我们标记一个async 这样子写也可以

06:52.770 --> 07:00.850
await 等待他 然后呢 我们得得得到一个响应 输出一下risk表给他也是一样的效果 对吧 因为他反过的是promise

07:01.810 --> 07:08.770
对 你看 是不是一样的效果啊 就这么一个情况 这是get请求那么 呃 还get请求的时候还可以传参数

07:09.890 --> 07:15.170
啊 就是我们比较在这里比较后面是不是可以传参数 login id 等于什么abc

07:15.490 --> 07:19.970
看abc 这样的用户是不是存在的 对吧 我们之前有过这么一个 api

07:20.450 --> 07:27.090
那么这种参数呢 你可以不用写字了 在一个写书里面还给你封装了 一个直接需要在请求配置里边配置这么一个东西

07:27.250 --> 07:31.970
paras 就表示参数 相当于是配置的query 这里给他配置个对象就行了

07:32.290 --> 07:37.570
那么他会自动的给你转化成这种格式 然后咱们又来试一下吧 就把这个玩意儿负责过来

07:41.570 --> 07:47.970
好 保存啊 来看一下data2就表示这个账号是存在的 好 咱们来看一下datswork刷新

07:48.530 --> 07:55.250
呃 这边发送的请求呢 就这个地方 哎 跑到去了 就这 你看请求的路径 是不是里边加了一个问号

07:55.810 --> 08:01.570
loginit等于abc 对吧 他就会自动给你变成这种格式 你只需要在这里配置有完成 说更加方便一点

08:01.810 --> 08:03.810
那如果说这里配置个a等于eb等于2

08:04.690 --> 08:06.690
保存 你看一下 他给你发送的请求

08:07.250 --> 08:11.330
就是这个loginit abc a等于eb等于2

08:11.810 --> 08:19.330
对吧 这比我们之前用废企 api 在这里直接写问号去凭接啊 好了多 对吧 而且凭接还有一个问题 如果说你这里边有些特殊制服

08:20.290 --> 08:23.890
啊 比方说我们这里 这里边是这样子的问号

08:24.850 --> 08:29.650
k等于3 那么像这种这种 如果说以前凭接的时候是不要出问题

08:30.050 --> 08:33.170
那以前凭接的时候怎么凭接的 凭接出来是这样子 a

08:33.730 --> 08:35.730
问 安德福号

08:36.770 --> 08:39.660
安德福号

08:39.660 --> 08:42.860
k等于3 我的意思呢 是loginit等于这个值

08:43.500 --> 08:48.060
结果呢 他一凭接出来就变成了loginit等于a 然后多了一个参数k等于3了

08:48.380 --> 08:54.860
对吧 所以说像这种特殊制服要进行转移的啊 怎么转移呢 以前我们要用什么方式 要用这个url

08:55.820 --> 08:57.820
呃searchpad

08:59.020 --> 09:00.220
有点忘了啊

09:01.500 --> 09:03.500
url

09:04.220 --> 09:06.220
incode

09:06.300 --> 09:08.300
incode ui

09:08.460 --> 09:11.500
component 要用这种方式 比方说我们这里的值是这个

09:12.460 --> 09:19.260
指示这个 那么我们要把它转移 它找到这么一个结果 它会把那一特殊制服给你转移 转移成这种这种格式

09:20.140 --> 09:22.140
你要是把要进行转移的啊

09:22.380 --> 09:26.940
那么现在呢 其实我们用了一个x小时之后就不用转移了 它会自动帮你转移

09:27.500 --> 09:30.060
好 你看一下我们现在用这种方式发出去

09:31.180 --> 09:33.180
看网络请求结果

09:34.220 --> 09:36.220
你看是不是自动给你转移了

09:36.460 --> 09:38.460
对吧 就不会出现那种问题了

09:38.860 --> 09:43.500
那这些都是一些小的细节啊 总之用x小时呢 它把该做的事情给你做好了 只需要用就完事

09:43.900 --> 09:44.940
就这么简单

09:44.940 --> 09:47.260
然后再看一下我们发出一个poser请求的时候

09:47.820 --> 09:51.100
我们之前要去配置那个消息体 对不对 请求体

09:51.260 --> 09:53.100
因为我发 要用节省格式发出去

09:53.340 --> 09:56.140
那么这里呢 你直接给大家一个对象就行了 它会自动帮你完成转换

09:56.300 --> 09:58.300
好 咱们来试一下啊 这是我们一个注册

10:03.390 --> 10:06.590
好 保存啊 我们来看一下 这个响音结果不用说了啊 它说

10:08.190 --> 10:10.660
发现

10:10.660 --> 10:13.790
对它去

10:13.870 --> 10:15.070
好 那么

10:16.350 --> 10:17.230
对它去呢

10:18.270 --> 10:22.030
对它去呢 我说对吧 我们看一下network rig

10:23.310 --> 10:25.870
响音 它响音的就是去 注册成功了

10:26.030 --> 10:29.230
好 来吧 我们来看一下我们发出去的请求

10:29.550 --> 10:30.270
vue source

10:31.870 --> 10:33.310
你看 是不是

10:33.870 --> 10:38.190
它的原式格式是不是就是节省格式 它就进行转发了

10:38.190 --> 10:40.110
而且会给你加上一个请求头

10:40.270 --> 10:41.310
app可以请节省

10:41.710 --> 10:44.750
都是它自动帮你完成了 透射请求发出去了

10:44.750 --> 10:45.870
这就是这么一个情况

10:47.150 --> 10:48.110
就基本用法啊

10:48.750 --> 10:53.470
所以说我们平时写的话 就是xl是给此请求发布一个 url 地址请求配置

10:53.470 --> 10:58.270
如果说有的话啊 透射请求 url 地址可以写请求体对象

10:58.830 --> 11:01.390
就是你发出什么标准标准路 你发出什么样的

11:02.110 --> 11:06.350
请求体过去 然后呢 有什么配置你可以写在后面 都是可选的

11:07.230 --> 11:10.830
当然你也可以用比较完 完整的写法 就是xl直接写请求配置

11:11.870 --> 11:14.670
除了有这两种别名之外呢 其实它还有一些别的别名啊

11:15.230 --> 11:19.310
比较像这个吧 地内执请求 黑的请 要铺执请求

11:19.310 --> 11:21.310
那么这些请求呢 就是方法名不同

11:21.310 --> 11:23.550
地内执请求就是方法名为地内执

11:24.270 --> 11:26.270
你们可能没有见过方法名为地内执

11:26.270 --> 11:28.750
就是有的时候呢 服务器那边 它会要求你

11:28.750 --> 11:32.110
像做一些数据删除的时候 它让你请求方法来写地内执

11:32.830 --> 11:35.470
其实没有什么区别 没有什么区别的 真的

11:35.470 --> 11:37.470
因为它就只是一个方法名不同而已

11:37.870 --> 11:39.630
方法名可以是任何单词 对不对

11:39.790 --> 11:42.590
只是我们平时约定的 有的时候呢 约定

11:42.590 --> 11:44.590
我们删除数据呢 用地内执这个方法

11:45.390 --> 11:47.390
修改数据呢 用put这个方法

11:47.390 --> 11:49.390
就本质是一样的

11:49.390 --> 11:51.390
只是方法名不同而已

11:51.390 --> 11:55.390
好 那么这里呢 就是 没了啊 就是个基本的使用

11:55.390 --> 11:59.390
然后呢 它还提供了一些别的 比较进阶的一些使用方式

11:59.390 --> 12:02.030
比方说像这个 可以用通过这种方式

12:02.030 --> 12:05.870
create 创建一个x小时实力

12:05.870 --> 12:08.670
那么这个创建x小时实力是什么意思呢

12:09.070 --> 12:11.070
表示的说 就是有的时候啊

12:11.070 --> 12:13.870
我们不同的请求之间呢 有一些共同的地方

12:13.870 --> 12:16.670
我们就可以把一共同的地方呢 配置到实力里边

12:16.670 --> 12:19.470
然后后面呢 后续呢 通过实力去发送请求

12:19.470 --> 12:22.270
啥意思啊 比方说 我们平时请求的时候

12:22.270 --> 12:25.070
你看下面几个请求 有什么共同的地方呢

12:25.070 --> 12:27.070
是不是都是基地址是一样的

12:27.070 --> 12:29.070
它的基础地址是一样的

12:29.070 --> 12:29.870
都是这个地址

12:29.870 --> 12:31.870
那么我们每一个请求里边都写

12:31.870 --> 12:33.870
就产生了很多的重复代吧

12:33.870 --> 12:37.070
当然说基地址有变 那就修改起来比较麻烦

12:37.070 --> 12:39.070
所以它会用这种方式啊

12:39.070 --> 12:41.070
我可以用x小时的创建create

12:41.070 --> 12:43.070
这里边要传一个请求配置

12:43.070 --> 12:45.070
全配置

12:45.070 --> 12:47.070
那么这个配置里边 你可以把一些基本的配置

12:47.070 --> 12:49.070
就写到这个配置里边

12:49.070 --> 12:51.070
然后我给它写个base.io

12:51.070 --> 12:53.070
表示 我的基础如今是这个

12:53.070 --> 12:55.070
于是呢 这个方法会产生一个实力

12:55.070 --> 12:57.070
那么后续呢 我就使用这个实力去调用

12:57.070 --> 12:59.070
get 啊pose 啊去请求

12:59.070 --> 13:01.070
我就不用去写基地址了

13:01.070 --> 13:03.070
它会自动的把基地址给我加上

13:03.070 --> 13:05.070
对吧 总之你把一些

13:05.070 --> 13:07.070
通用的一些请求配置呢

13:07.070 --> 13:09.070
都可以写到这儿

13:09.070 --> 13:11.070
那么后续的请求都会使用这个配置

13:11.070 --> 13:13.070
就这么个意思 就是实力的好处

13:15.070 --> 13:17.070
然后它还给我们提供了一些

13:17.070 --> 13:19.070
一个拦戒器 什么意思呢

13:19.070 --> 13:21.070
就是有的时候啊 我们可能会对服务器的

13:21.070 --> 13:23.070
想用结果啊 做一些统一的处理

13:23.070 --> 13:25.070
或者是对请求做一些统一的处理

13:25.070 --> 13:27.070
那么这个时候呢 我们可以使用拦戒器

13:27.070 --> 13:29.070
比方说这里呢 我给大家看一下吧

13:29.070 --> 13:31.070
简单看一下拦戒器有什么好处

13:31.070 --> 13:33.070
我们怎么来写呢 就是actual

13:33.070 --> 13:35.070
interceptor 表示拦戒器

13:35.070 --> 13:37.070
拦戒器有很多种有请求的拦戒器

13:37.070 --> 13:39.070
有响应的拦戒器

13:39.070 --> 13:41.070
那么这里呢 我使用请求的拦戒器

13:41.070 --> 13:43.070
就拦戒请求 你请求发出去之前

13:43.070 --> 13:45.070
我先做一些处理再说

13:45.070 --> 13:47.070
呃 又是表示

13:47.070 --> 13:49.070
我请求发出去之前要做什么样的处理

13:49.070 --> 13:51.070
又是 又是什么呢 一个

13:51.070 --> 13:53.070
使用一个什么呢 使用一个方法

13:53.070 --> 13:55.070
传入一个函数进去

13:55.070 --> 13:57.070
那么它在请求之前 真正的发出

13:57.070 --> 13:59.070
请求之前 它会先调用这个函数

13:59.070 --> 14:01.070
这个函数里边有个参数叫config

14:01.070 --> 14:03.070
当前的请求配置

14:03.070 --> 14:05.070
那么这里边呢 就可以做各种各样的事情

14:05.070 --> 14:07.070
对请求配置进行各种各样的修改

14:07.070 --> 14:09.070
做一些事情 比方说这里呢 举个例子

14:09.070 --> 14:11.070
呃 我在每一个请求发出去之前

14:11.070 --> 14:13.070
我要验证一下 本地有没有token

14:13.070 --> 14:15.070
就在coastology里面有没有token

14:15.070 --> 14:17.070
有的话 因为我们前面

14:17.070 --> 14:19.070
做过这个效果 对吧

14:19.070 --> 14:21.070
做那个登录的时候 登录完成过后

14:21.070 --> 14:23.070
是不是服务器还没给你一个token 你要保存到本地

14:23.070 --> 14:25.070
后续请求发出去的时候

14:25.070 --> 14:27.070
是不是要把个token拿出来放到请求头里边

14:27.070 --> 14:29.070
对不对 是不是要做这么一件事

14:29.070 --> 14:31.070
那么这里呢 我就可以统一处理

14:31.070 --> 14:33.070
对所有的请求

14:33.070 --> 14:35.070
请求之前都给我做统一的处理

14:35.070 --> 14:37.070
看一下本地有没有token

14:37.070 --> 14:39.070
有token的话 我就在headers这个配置里边

14:39.070 --> 14:41.070
配置就是个对象

14:41.070 --> 14:43.070
你看吧 请求配置

14:43.070 --> 14:45.070
后续我们会做一个联系

14:45.070 --> 14:47.070
请求配置里边 说一个对象 headers

14:47.070 --> 14:49.070
那么我就对这个headers

14:49.070 --> 14:51.070
他的二十来人型就把token加进去

14:51.070 --> 14:53.070
就这么一件事

14:53.070 --> 14:55.070
然后呢 如果说你是用响应

14:55.070 --> 14:57.070
响应我也可以做统一处理

14:57.070 --> 14:59.070
你可以做统一处理

14:59.070 --> 15:01.070
你看 针对响应做统一处理

15:01.070 --> 15:03.070
凡是拿到服务器消息过后

15:03.070 --> 15:05.070
先运行这个函数

15:05.070 --> 15:07.070
那么这里有两个函数

15:07.070 --> 15:09.070
一个是服务器响应成功

15:09.070 --> 15:11.070
就是响应的消息码为200

15:11.070 --> 15:13.070
一般都是200 对吧

15:13.070 --> 15:15.070
200消息码表示服务器响应成功

15:15.070 --> 15:17.070
那么响应成功的时候

15:17.070 --> 15:19.070
你可以对响应的数据先做一些处理

15:19.070 --> 15:21.070
做任何事情都可以

15:21.070 --> 15:23.070
然后可以返回

15:23.070 --> 15:25.070
返回的话就是返回的

15:25.070 --> 15:27.070
那么后续的请求拿到的响应结果

15:27.070 --> 15:29.070
就是什么

15:29.070 --> 15:31.070
以后我们做一些练习就知道了

15:31.070 --> 15:33.070
总之他会对请求和响应进行拦截

15:33.070 --> 15:35.070
比方说服务器响应的是错误

15:35.070 --> 15:37.070
他的响应码不是二开头的

15:37.070 --> 15:39.070
比方说30级 40级

15:39.070 --> 15:41.070
那么这个时候他就会出发这个

15:41.070 --> 15:43.070
函数

15:43.070 --> 15:45.070
那么这里可以做一些统一的处理

15:45.070 --> 15:47.070
比方说弹出一个错误消息之类的

15:47.070 --> 15:49.070
没什么意思吧

15:49.070 --> 15:51.070
好 那咱们试一下吧

15:51.070 --> 15:53.070
比方说我们在这里

15:53.070 --> 15:55.070
我们来看一下我们的题

15:55.070 --> 15:57.070
这个视频我简了一下

15:57.070 --> 15:59.070
因为

15:59.070 --> 16:01.070
刚才我看到那个注册的接口

16:01.070 --> 16:03.070
好像是有点问题

16:03.070 --> 16:05.070
我让韩道士那边说了一下

16:05.070 --> 16:07.070
他那边把他修改了

16:07.070 --> 16:09.070
现在正确了

16:09.070 --> 16:11.070
那我们再看一下这个注册接口

16:13.070 --> 16:15.070
好 现在得到证据

16:15.070 --> 16:17.070
正确了 账号已存在

16:17.070 --> 16:19.070
注册失败

16:19.070 --> 16:21.070
好 我们现在回到练习体里边

16:21.070 --> 16:23.070
练习体就是页面上引用了一个

16:23.070 --> 16:25.070
一个小时 然后引用一个index的介绍

16:25.070 --> 16:27.070
我们要完成的就是他

16:27.070 --> 16:29.070
封装

16:29.070 --> 16:31.070
我们就是按照接口文档

16:31.070 --> 16:33.070
封装

16:33.070 --> 16:35.070
我们的接口的功能

16:35.070 --> 16:37.070
然后登录注册 这些都属于接口功能

16:37.070 --> 16:39.070
对吧 把他封装好

16:39.070 --> 16:41.070
就做这么一件事

16:41.070 --> 16:43.070
这也是我们平时开发中比较常见的

16:43.070 --> 16:45.070
这么一个操作 把它封装一下

16:45.070 --> 16:47.070
那么将来比方登录

16:47.070 --> 16:49.070
登录的话 这就发出阿里克斯请求

16:49.070 --> 16:51.070
对吧 就登录

16:51.070 --> 16:53.070
然后注册 判了账号失败存在

16:53.070 --> 16:55.070
恢复登录

16:55.070 --> 16:57.070
得到当前登录的用户信息

16:57.070 --> 16:59.070
把它封装成函数

16:59.070 --> 17:01.070
为了将来我们开发的提供遍地

17:01.070 --> 17:03.070
那就做这么一件事

17:03.070 --> 17:05.070
比方说我们这里呢

17:05.070 --> 17:07.070
就可以进入到咱们的文档里边

17:11.150 --> 17:13.150
就像是这个吧

17:13.150 --> 17:15.150
好 进去了

17:15.150 --> 17:17.150
项目 API

17:17.150 --> 17:19.150
好 就是把用户接口这一块

17:19.150 --> 17:21.150
把它封装一下

17:21.150 --> 17:23.150
来吧 我们来做这个事

17:23.150 --> 17:25.150
那么首先我们来想一想

17:25.150 --> 17:27.150
这一块 这些函数里面

17:27.150 --> 17:29.150
我们要去实现的话

17:29.150 --> 17:31.150
是不是有很多的共同代码

17:31.150 --> 17:33.150
比方说项目的基地址

17:33.150 --> 17:35.150
就是请求的基地址

17:35.150 --> 17:37.150
是不是这个

17:37.150 --> 17:39.150
基地址就是生产环境的一个

17:39.150 --> 17:41.150
ADPS study do edu.com

17:41.150 --> 17:43.150
对吧 就这个基地址

17:43.150 --> 17:45.150
那么基地址是一样的

17:45.150 --> 17:47.150
结果 比方说login

17:47.150 --> 17:49.150
exus

17:49.150 --> 17:51.150
我们用posed

17:51.150 --> 17:53.150
请求什么地址呢

17:53.150 --> 17:55.150
ADPS

17:55.150 --> 17:57.150
doe study

17:57.150 --> 17:59.150
doe edu.com

17:59.150 --> 18:01.150
然后呢 请求的路径呢

18:01.150 --> 18:03.150
是这个 复制一下

18:03.150 --> 18:05.150
请求的路径

18:05.150 --> 18:07.150
然后呢 我们给它传辑的消息呢

18:07.150 --> 18:09.150
就是一个账号一个密码对吧

18:09.150 --> 18:11.150
我们把封装成对象

18:11.150 --> 18:13.150
login ID

18:14.150 --> 18:15.150
好 等待它

18:15.150 --> 18:17.150
等待它完成

18:17.150 --> 18:20.530
得到响应结果

18:20.530 --> 18:22.530
我们来输出一下这个响应结果

18:22.530 --> 18:24.530
这个登录函数是不是就写的差不多了

18:24.530 --> 18:26.530
咱们把这个响应结果返回吧

18:26.530 --> 18:28.530
先输出

18:28.530 --> 18:30.530
我们来测试一下

18:30.530 --> 18:35.440
测试一下

18:35.440 --> 18:37.440
调用这个login

18:37.440 --> 18:39.440
传入一个账号

18:39.440 --> 18:41.440
耳朵密

18:41.440 --> 18:43.440
密码123456

18:43.440 --> 18:45.440
好 咱们试一下

18:45.440 --> 18:47.440
我为什么要写到这儿啊 不能写到这儿啊

18:47.440 --> 18:49.440
因为这是给你们的练习题

18:49.440 --> 18:51.440
我把参考答案就去了吧

18:51.440 --> 18:53.440
把复制过来 不能写到这儿啊

18:53.440 --> 18:55.440
我练习题这里删除了

18:55.440 --> 18:58.880
好 我们到这边来啊

18:58.880 --> 19:00.880
加量运行页面

19:00.880 --> 19:05.090
好 看一下啊

19:07.090 --> 19:09.090
它包了一个错

19:11.090 --> 19:13.090
它说什么呢

19:13.090 --> 19:15.090
我请求

19:15.090 --> 19:17.090
嗯

19:17.090 --> 19:19.090
运行这里

19:21.090 --> 19:23.090
为什么要给我新开窗口呢

19:23.090 --> 19:25.090
搞得我很抽象

19:25.090 --> 19:29.550
它说404

19:29.550 --> 19:31.550
我请求了路径地址不存在

19:31.550 --> 19:33.550
我怎么又得把它打开

19:33.550 --> 19:35.550
这个解释

19:35.550 --> 19:37.550
它说我请求了地址不存在

19:37.550 --> 19:39.550
API or the user profile

19:41.550 --> 19:45.630
我看一下啊

19:45.630 --> 19:47.630
我登录

19:47.630 --> 19:49.630
User login

19:49.630 --> 19:53.010
出这个鼻子

19:53.010 --> 19:57.340
好 那么得到了

19:57.340 --> 19:59.340
这是它的响应结果 对吧

19:59.340 --> 20:01.340
响应结果里面有header 有响应头

20:01.340 --> 20:03.340
响应头我们现在需要吗 也不需要啊

20:03.340 --> 20:05.340
对不对 然后呢有data

20:05.340 --> 20:07.340
data是什么呢 是我们的响应消息体

20:07.340 --> 20:09.340
对吧 这是我们需要的东西

20:09.340 --> 20:11.340
而响应消息体里边呢

20:11.340 --> 20:13.340
还有一个data属性

20:13.340 --> 20:15.340
就是我们响应的

20:15.340 --> 20:17.340
响应的格式里边有个code

20:17.340 --> 20:19.340
一个message 一个data 对吧

20:19.340 --> 20:21.340
这两个data的含义是不一样的啊

20:21.340 --> 20:23.340
来个小时给我们的响应消息体

20:23.340 --> 20:25.340
这是响应消息体里边的各种信息

20:25.340 --> 20:27.340
其中一个信息呢 我们自定义的

20:27.340 --> 20:29.340
叫做data 我们要的是它

20:29.340 --> 20:31.340
是不是要了它

20:31.340 --> 20:33.340
那么其他的结果是不是都是这样子

20:33.340 --> 20:35.340
我们要这个东西干嘛呢 这个东西我们可以统一处理

20:35.340 --> 20:37.340
如果说有错误 我就弹窗

20:37.340 --> 20:39.340
没有错误的话 我们直接拿这个东西就可以用了

20:39.340 --> 20:41.340
对吧 所以说我们需要的是它

20:41.340 --> 20:43.340
因此呢 我这里要怎么写呢

20:43.340 --> 20:45.340
我这里要返回

20:45.340 --> 20:47.340
data

20:47.340 --> 20:49.340
是不是data 第一个data

20:49.340 --> 20:51.340
第二个data就是响应体里边的数据

20:51.340 --> 20:53.340
data 就是我们的

20:53.340 --> 20:55.340
响应体里边我们自定义的一个属性

20:55.340 --> 20:57.340
叫data 我们要的是它

20:57.340 --> 20:59.340
所以说我们这边用的时候就这样子用

20:59.340 --> 21:01.340
输出一下race

21:01.340 --> 21:03.340
那我们登录失败了

21:03.340 --> 21:05.340
这才是我们需要的信息

21:05.340 --> 21:07.340
我们会发现有些共同的地方

21:07.340 --> 21:09.340
一个是基地址 一个是像这些地方

21:09.340 --> 21:11.340
我们都每次都要拿data.data

21:11.340 --> 21:13.340
很麻烦

21:13.340 --> 21:15.340
像还有一些别的一些统一处理的地方

21:15.340 --> 21:17.340
所以说我们这里需要把这些东西

21:17.340 --> 21:19.340
全部统一处理

21:19.340 --> 21:21.340
那么如何来统一处理呢

21:21.340 --> 21:23.340
我们刚刚按照之前我们所说的

21:23.340 --> 21:25.340
就可以使用x小时的

21:25.340 --> 21:27.340
x小时的实力

21:27.340 --> 21:29.340
创建一个x小时实力

21:29.340 --> 21:31.340
我们把一些统一的地方进行配置

21:31.340 --> 21:33.340
这里是一个配置

21:33.340 --> 21:35.340
创建一个x小时实力

21:35.340 --> 21:37.340
那么之后我们直接使用实力去完成

21:37.340 --> 21:39.340
就完成了

21:39.340 --> 21:41.340
对不对 好 那么主要做第一个配置

21:41.340 --> 21:43.340
就是对bassurl进行统一处理

21:43.340 --> 21:45.340
那么按照我们的文档的要求

21:45.340 --> 21:47.340
我们刚刚说了实力

21:47.340 --> 21:49.340
那么我们是不是可以配置这个bassurl

21:49.340 --> 21:51.340
其实

21:51.340 --> 21:53.340
官方文档里面也说了这一点

21:53.340 --> 21:57.230
放过来吧

21:57.230 --> 21:59.230
官方文档里面你看这个有个实力

21:59.230 --> 22:01.230
一个x小时可以创建多个实力

22:01.230 --> 22:03.230
每个实力有自己的一套配置

22:03.230 --> 22:05.230
那么比如说

22:05.230 --> 22:07.230
我这里可以通过这个x小时

22:07.230 --> 22:09.230
crazy

22:09.230 --> 22:11.230
可以创建很多个实力

22:11.230 --> 22:13.230
创建一个实力

22:13.230 --> 22:15.230
那么就是实力1

22:15.230 --> 22:17.230
那么后续呢

22:17.230 --> 22:19.230
就可以通过这个实力变量

22:19.230 --> 22:21.230
以1去使用

22:21.230 --> 22:23.230
那么所有的通过它使用

22:23.230 --> 22:25.230
它就会默认带这个配置

22:25.230 --> 22:27.230
当然还可以创建一些别的实力

22:27.230 --> 22:29.230
不过一般来说我们项目里面

22:29.230 --> 22:31.230
一个实力就够用

22:31.230 --> 22:33.230
当然可以根据情况去创建多个实力

22:33.230 --> 22:35.230
那么通过它呢

22:35.230 --> 22:37.230
就可以使用这里面的配置

22:37.230 --> 22:39.230
同意使用的 就提这么一个作用

22:39.230 --> 22:41.230
那么我们现在就可以创建一个实力

22:41.230 --> 22:43.230
它的bassurl

22:43.230 --> 22:45.230
就这个玩意

22:45.230 --> 22:47.230
它的bassurl

22:47.230 --> 22:49.230
那么后续我们直接使用

22:49.230 --> 22:51.230
实力去请求的时候

22:51.230 --> 22:53.230
因为它有了这个配置了

22:53.230 --> 22:55.230
所以说我们不需要写这个了

22:55.230 --> 22:57.230
直接写路径就完事了

22:57.230 --> 22:59.230
好 保存 你看是不是得到还是那了

22:59.230 --> 23:01.230
还是可以完成访问

23:01.230 --> 23:03.230
那么后续的其他请求

23:03.230 --> 23:05.230
是不是都可以省略掉这个基地值了

23:05.230 --> 23:07.230
这是一个

23:07.230 --> 23:09.230
那么除此之外呢

23:09.230 --> 23:11.230
我们还有一些共同的处理

23:11.230 --> 23:13.230
把本地的那个投肯带过去

23:13.230 --> 23:15.230
然后拿到响应结果之后

23:15.230 --> 23:17.230
我们看一下响应有没有错误

23:17.230 --> 23:19.230
有错误怎么样没有错误有怎么样

23:19.230 --> 23:21.230
是不是要做一些统一的处理

23:21.230 --> 23:23.230
那么接下来我们来做统一处理

23:23.230 --> 23:25.230
统一处理的话其实就是拦接器

23:25.230 --> 23:28.610
拦接器可以直接针对这个x小时使用

23:28.610 --> 23:30.610
也可以针对这个实力来使用

23:30.610 --> 23:32.610
我们刚才之前在文档里面

23:32.610 --> 23:34.610
举的例子是

23:34.610 --> 23:36.610
根据这个x小时使用

23:36.610 --> 23:38.610
那么就会影响到所有的实力

23:38.610 --> 23:40.610
那么如果说这里

23:40.610 --> 23:42.610
这里写的是实力的话

23:42.610 --> 23:44.610
那么它只会影响当前实力

23:44.610 --> 23:46.610
比如说我们这里

23:46.610 --> 23:48.610
给它添加一个响应拦接器

23:48.610 --> 23:50.610
这个地方呢我们就写硬实实力

23:50.610 --> 23:52.610
只针对这个实力有拦接器

23:52.610 --> 23:54.610
你只要使用这个实力

23:54.610 --> 23:56.610
它就会有这个拦接器

23:56.610 --> 23:58.610
每一次响应过来之后

23:58.610 --> 24:00.610
它会首先运行这个函数

24:00.610 --> 24:02.610
响应成功它就会运行这个函数

24:02.610 --> 24:04.610
响应失败就会运行这个函数

24:04.610 --> 24:06.610
那么响应失败的话

24:06.610 --> 24:08.610
我这里直接拉扯

24:08.610 --> 24:10.610
有一些错误

24:10.610 --> 24:12.610
比如说因为我们这个服务器呢

24:12.610 --> 24:14.610
它不会给你响应其他的玩意

24:14.610 --> 24:16.610
它只会给你响应凉败 ok

24:16.610 --> 24:18.610
这个函数倒是不会运行

24:18.610 --> 24:20.610
如果说遇到了一些别的

24:20.610 --> 24:22.610
你们在公司里面遇到了一些

24:22.610 --> 24:24.610
后端给你开发的接口

24:24.610 --> 24:26.610
它又可能会给你告诉你

24:26.610 --> 24:28.610
某些时候服务器会那边

24:28.610 --> 24:30.610
不会给你响应凉败 ok

24:30.610 --> 24:32.610
它可能会给你响应一些别的消息嘛

24:32.610 --> 24:34.610
这些都是有后端开发决定的

24:34.610 --> 24:36.610
它到底要不要给你响应

24:36.610 --> 24:37.610
那么你如果说

24:37.610 --> 24:38.610
那你表示错误了

24:38.610 --> 24:39.610
有错误后你要做什么处理

24:39.610 --> 24:40.610
这里可以统一处理

24:40.610 --> 24:42.610
我就答应错误消息

24:42.610 --> 24:44.610
这么个意思

24:44.610 --> 24:45.610
像我们这个服务器呢

24:45.610 --> 24:47.610
它倒不会给你响应别的消息吧

24:47.610 --> 24:49.610
它只会给你响应凉败 ok

24:49.610 --> 24:51.610
它的错误信息在哪呢

24:53.610 --> 24:54.610
我们这个服务器啊

24:54.610 --> 24:55.610
它给你想应的消息啊

24:55.610 --> 24:56.610
比方说我们这里的

24:56.610 --> 24:58.610
刚才登录失败了对吧

24:58.610 --> 25:00.610
登录失败它不是错误哦

25:00.610 --> 25:02.610
登录失败

25:02.610 --> 25:04.610
它仍然是凉败 ok

25:04.610 --> 25:06.610
只是它给想应体里边的高速理

25:06.610 --> 25:08.610
给你一个code的失败

25:08.610 --> 25:10.610
因为通过这种形式告诉你

25:10.610 --> 25:11.610
这个是有问题的

25:11.610 --> 25:12.610
但是想一码呢

25:12.610 --> 25:13.610
仍然是凉败 ok

25:13.610 --> 25:14.610
要搞清楚啊

25:14.610 --> 25:16.610
大家看这个东西不是一定的

25:16.610 --> 25:18.610
它是后端开发决定的

25:18.610 --> 25:20.610
所以说呢

25:20.610 --> 25:22.610
取决于你们公司里边

25:22.610 --> 25:24.610
后端是怎么来考虑这个问题的

25:24.610 --> 25:26.610
其实都小吧

25:26.610 --> 25:28.610
那么如果说想应成功的话

25:28.610 --> 25:30.610
它就会运行这里的函数

25:30.610 --> 25:32.610
那么这里的函数

25:32.610 --> 25:34.610
这个函数返回什么

25:34.610 --> 25:36.610
那么这边使用这个实力的时候

25:36.610 --> 25:38.610
它最终得到了就是什么

25:38.610 --> 25:40.610
明白了意思吧

25:40.610 --> 25:42.610
如果说你返回这个

25:42.610 --> 25:44.610
就是想应对象

25:44.610 --> 25:46.610
它包含想应头想应体

25:46.610 --> 25:47.610
如果说返回它

25:47.610 --> 25:48.610
那么之前跟这里就一样

25:48.610 --> 25:50.610
如果说它这边返回的是

25:50.610 --> 25:51.610
data.data

25:51.610 --> 25:53.610
表示我返回的是

25:53.610 --> 25:55.610
想应里边的

25:55.610 --> 25:58.610
想应体里边的data属性

25:58.610 --> 26:00.610
好了

26:00.610 --> 26:02.610
那这边就没有这个东西了

26:02.610 --> 26:04.610
我们来看一下

26:04.610 --> 26:06.610
得到直接收到

26:06.610 --> 26:08.610
这个玩意

26:08.610 --> 26:10.610
也就是说它运行的时候

26:10.610 --> 26:12.610
它达到服务器那边

26:12.610 --> 26:14.610
我们从客户端去请求服务器

26:14.610 --> 26:16.610
然后服务器那边给我了一个想应

26:16.610 --> 26:18.610
它首先会把个想应对象

26:18.610 --> 26:20.610
放到这运行这个函数

26:20.610 --> 26:22.610
这个函数里边包含了想应头

26:22.610 --> 26:24.610
想应体

26:24.610 --> 26:26.610
然后呢这边我返回的是

26:26.610 --> 26:28.610
想应里边的想应体的data属性

26:29.610 --> 26:34.610
然后再去返回

26:34.610 --> 26:36.610
再去返回返回的时候

26:36.610 --> 26:38.610
就直接是这边的返回结果

26:38.610 --> 26:40.610
那么这样子的做法

26:40.610 --> 26:41.610
好处就在于

26:41.610 --> 26:43.610
我们后边就不用

26:43.610 --> 26:45.610
每次一个data的data

26:45.610 --> 26:46.610
不用了

26:46.610 --> 26:47.610
因为其他消息我不关心

26:47.610 --> 26:48.610
我就关心这个东西

26:48.610 --> 26:49.610
所以说我这边

26:49.610 --> 26:50.610
就直接可以拿到这个

26:50.610 --> 26:51.610
就写这么一个作用

26:51.610 --> 26:52.610
于是这个函数还可以

26:52.610 --> 26:54.610
更加简化出来写

26:54.610 --> 26:56.610
就写成这个样子了

26:56.610 --> 26:57.610
我直接于寻求

26:57.610 --> 26:58.610
然后把消息带过去

26:58.610 --> 26:59.610
就完成了

26:59.610 --> 27:01.610
这就统一配置的好处

27:01.610 --> 27:02.610
明儿的意思吧

27:02.610 --> 27:03.610
好 你看

27:03.610 --> 27:04.610
我就拿了这个数据

27:05.610 --> 27:06.610
那么这两个

27:06.610 --> 27:08.610
是不是就封装好了

27:08.610 --> 27:10.610
好 那么这里边还有一些小的

27:10.610 --> 27:11.610
细节 还有一些东西

27:11.610 --> 27:12.610
还可以封装

27:12.610 --> 27:14.610
比方说登录

27:14.610 --> 27:16.610
登录成功之后

27:16.610 --> 27:18.610
服务器那边会给我一个什么呢

27:18.610 --> 27:19.610
登录成功

27:19.610 --> 27:20.610
不要让我现在有登录成功

27:20.610 --> 27:22.610
额德命1 2 3 1 2 3

27:22.610 --> 27:24.610
这个应该是登录成功的

27:24.610 --> 27:25.610
好 我们看一下

27:25.610 --> 27:26.610
服务器那边是不是会给

27:26.610 --> 27:27.610
登录成功

27:27.610 --> 27:29.610
登录成功的时候

27:29.610 --> 27:31.610
服务器那边会给我一个什么

27:31.610 --> 27:35.240
authorization

27:35.240 --> 27:37.240
是不是给我一个响应头

27:37.240 --> 27:38.240
对吧

27:38.240 --> 27:40.240
那么我这个响应头我要做什么

27:40.240 --> 27:41.240
是不是把它保存到

27:41.240 --> 27:43.240
local storage里边

27:43.240 --> 27:44.240
是不是要做这么一件事

27:44.240 --> 27:45.240
以前你们做过的

27:45.240 --> 27:47.240
于是那么可以在这里统一处理

27:47.240 --> 27:48.240
只要服务器

27:48.240 --> 27:50.240
我甭管你通过什么方式

27:50.240 --> 27:52.240
只要服务器给我一个授权码

27:52.240 --> 27:54.240
我就把授权码保存起来

27:55.240 --> 27:58.240
服务器给了授权码

27:58.240 --> 28:00.240
我需要保存它

28:00.240 --> 28:02.240
都统一处理

28:02.240 --> 28:04.240
我就不在登录的人处理了

28:04.240 --> 28:07.240
那么比方说我们这里呢

28:07.240 --> 28:09.240
判断一下怎么来判断

28:09.240 --> 28:10.240
有没有给授权码

28:10.240 --> 28:11.240
是不是判断响应头

28:11.240 --> 28:12.240
我们输出一下响应

28:14.240 --> 28:16.240
你看这是它响应结果

28:16.240 --> 28:17.240
上面响应结果

28:17.240 --> 28:19.240
是不是Headers有响应头

28:19.240 --> 28:20.240
响应头里边说一个属性

28:20.240 --> 28:21.240
authorization

28:21.240 --> 28:22.240
我就判断啥

28:24.240 --> 28:25.240
我就拿到这个

28:25.240 --> 28:26.240
拿到个authorization

28:26.240 --> 28:27.240
token

28:29.740 --> 28:31.740
Risp.Headers

28:31.740 --> 28:33.740
authorization

28:35.740 --> 28:36.740
就拿到它

28:36.740 --> 28:37.740
判断一下服务器那边

28:37.740 --> 28:39.740
因为这是统一处理的

28:39.740 --> 28:41.740
它不光光是针对登录

28:41.740 --> 28:44.740
可以针对任何使用这个实力的请求

28:44.740 --> 28:45.740
它都会做这个统一处理

28:45.740 --> 28:46.740
所以说你要判断

28:46.740 --> 28:49.740
不一定是所有的请求都会有这个响应

28:49.740 --> 28:50.740
有这个token

28:50.740 --> 28:52.740
如果说有token的话

28:52.740 --> 28:54.740
我就输出这个token

28:58.460 --> 28:59.460
你看是不是拿到这个token了

28:59.460 --> 29:00.460
我要做什么呢

29:00.460 --> 29:01.460
有这个token

29:01.460 --> 29:03.460
我要把它保存到locustorage里边

29:07.460 --> 29:08.460
然后keyz的话

29:08.460 --> 29:09.460
我们就用token吧

29:09.460 --> 29:10.460
然后token

29:11.460 --> 29:12.460
好那么这样子呢

29:12.460 --> 29:13.460
我们登录那边

29:13.460 --> 29:14.460
就不用考虑这个事了

29:14.460 --> 29:15.460
直接去请求就完事了

29:15.460 --> 29:16.460
如果说服务器带了

29:16.460 --> 29:18.460
带了这个授权马过来

29:18.460 --> 29:20.460
它就会自动的保存到

29:24.860 --> 29:26.860
自动的保存到这个token里边

29:26.860 --> 29:27.860
你看locustorage里面

29:27.860 --> 29:28.860
就这么简单

29:28.860 --> 29:30.860
这就是统一处理的好处

29:31.860 --> 29:33.860
这是响应了吗

29:33.860 --> 29:35.860
那如果说服务器那边

29:35.860 --> 29:36.860
爆出了怎么办

29:37.860 --> 29:39.860
服务器那边爆出错误怎么办

29:39.860 --> 29:40.860
比方说

29:40.860 --> 29:41.860
当然我这边

29:41.860 --> 29:42.860
我说的错误

29:42.860 --> 29:43.860
因为我这个服务器呢

29:43.860 --> 29:44.860
我们这个

29:44.860 --> 29:45.860
这个接口所带的服务器

29:45.860 --> 29:48.860
它是只会返回200ok的

29:48.860 --> 29:49.860
所以说呢

29:49.860 --> 29:51.860
我们说的这边的错误指的是

29:51.860 --> 29:52.860
它的那个

29:54.860 --> 29:56.860
它的这个响应题里边

29:57.860 --> 29:59.860
只是这个错误

29:59.860 --> 30:00.860
这扣的不为0

30:00.860 --> 30:01.860
对吧

30:01.860 --> 30:02.860
那我们这里就判断下边

30:02.860 --> 30:04.860
如果说

30:04.860 --> 30:05.860
响应结果里边

30:05.860 --> 30:06.860
响应的这个

30:06.860 --> 30:08.860
响应的响应题里边

30:08.860 --> 30:10.860
它的这个扣的属性啊

30:10.860 --> 30:11.860
不等于0

30:11.860 --> 30:12.860
是不是有错误

30:12.860 --> 30:13.860
有错误干嘛

30:13.860 --> 30:14.860
我这就做一个简单处理啊

30:14.860 --> 30:16.860
打印出错误消息

30:21.860 --> 30:22.860
打印这个错误消息

30:22.860 --> 30:23.860
当然我这里没有错误

30:23.860 --> 30:24.860
没有错误OK

30:25.860 --> 30:27.860
那如果说有错误的话

30:27.860 --> 30:28.860
我们来试一下

30:28.860 --> 30:29.860
二刀命

30:29.860 --> 30:30.860
保存

30:31.860 --> 30:32.860
刷新

30:32.860 --> 30:33.860
其实这边

30:34.860 --> 30:35.860
就弹出来了

30:35.860 --> 30:36.860
张浩命不正确

30:36.860 --> 30:37.860
刷新

30:37.860 --> 30:38.860
张浩命不正确

30:38.860 --> 30:40.860
那么这些都是统一处理

30:40.860 --> 30:42.860
其他的写接口都是

30:42.860 --> 30:43.860
就不用担心的

30:43.860 --> 30:44.860
所有的接口

30:44.860 --> 30:45.860
它都会经过这么一个

30:45.860 --> 30:46.860
含蓄的清理处理

30:47.860 --> 30:48.860
那么这就是

30:48.860 --> 30:49.860
统一的

30:49.860 --> 30:50.860
响应难解析

30:51.860 --> 30:53.860
好 接下来我们来再来看

30:54.860 --> 30:55.860
这是登录

30:56.860 --> 30:57.860
然后注册

30:58.860 --> 30:59.860
稍等一下

31:00.860 --> 31:02.860
好 咱们来看注册

31:02.860 --> 31:04.860
注册的写法其实也一样的

31:04.860 --> 31:06.860
咱们来找到这个

31:06.860 --> 31:07.860
注册接口

31:07.860 --> 31:08.860
我们现在只需要关心

31:08.860 --> 31:09.860
这个路径就行了

31:09.860 --> 31:10.860
对吧

31:10.860 --> 31:11.860
所以说我们直接返回了

31:15.860 --> 31:16.860
接下来

31:16.860 --> 31:17.860
然后呢

31:17.860 --> 31:18.860
login ID

31:18.860 --> 31:20.860
login password

31:20.860 --> 31:21.860
还有一个什么

31:21.860 --> 31:22.860
nickname

31:25.860 --> 31:26.860
对

31:26.860 --> 31:27.860
nickname直接弄过来

31:27.860 --> 31:28.860
完了

31:28.860 --> 31:29.860
都怕就写完了

31:29.860 --> 31:30.860
因为很多东西都

31:30.860 --> 31:31.860
已经统一处理的

31:31.860 --> 31:32.860
所以说我们不需要KL

31:32.860 --> 31:34.860
接下来我们来测试一下

31:34.860 --> 31:35.860
测试一下这个注册接口

31:40.240 --> 31:41.240
注册一个耳朵命

31:41.240 --> 31:42.240
123123

31:43.240 --> 31:44.240
张浩

31:46.240 --> 31:47.240
怎么是张浩命不正确

31:48.240 --> 31:49.240
张浩命不正确

31:50.240 --> 31:51.240
我看一下

31:54.450 --> 31:56.450
怎么还是login的

31:56.450 --> 31:57.450
不应该是login

31:57.450 --> 31:59.450
我这里掉了个是login

31:59.450 --> 32:00.450
注册

32:00.450 --> 32:02.450
然后nickname管理员

32:05.450 --> 32:07.450
现在应该是注册

32:09.450 --> 32:11.450
他注册成功了

32:11.450 --> 32:12.450
管理员

32:12.450 --> 32:13.450
接下来我们再来刷新

32:13.450 --> 32:14.450
再注册一下

32:14.450 --> 32:15.450
张浩已存在了

32:15.450 --> 32:16.450
对吧

32:16.450 --> 32:17.450
因为服务器返回的消息是这个

32:19.450 --> 32:21.450
服务器现在返回的消息是这个

32:22.450 --> 32:24.450
因此他进入到统一处理这一块

32:24.450 --> 32:26.450
他发现你扣的不为0

32:26.450 --> 32:27.450
说明有错误

32:27.450 --> 32:29.450
我就拉扯了一下

32:29.450 --> 32:31.450
然后data的得到的数据

32:31.450 --> 32:32.450
就是那

32:32.450 --> 32:34.450
data的得到的数据就是那

32:34.450 --> 32:36.450
就是统一处理的好处

32:36.450 --> 32:38.450
我们后边可以少写很多代

32:38.450 --> 32:39.450
这注册就写完了

32:40.450 --> 32:41.450
然后我们再来看

32:41.450 --> 32:42.450
张浩视访存在

32:42.450 --> 32:43.450
是不是一样的

32:43.450 --> 32:45.450
没什么区别了

32:45.450 --> 32:46.450
二位子

32:47.450 --> 32:49.450
张浩视访存在是一个介绍琴球

32:49.450 --> 32:50.450
我们来看一下这边

32:50.450 --> 32:52.450
张浩视访存在

32:52.450 --> 32:53.450
验证张浩

32:53.450 --> 32:55.450
把路径复制一下

32:55.450 --> 32:56.450
能过来

32:56.450 --> 32:57.450
张浩视访存在

32:57.450 --> 32:58.450
那么张浩视访存在这一块

32:58.450 --> 33:00.450
他有一个query

33:00.450 --> 33:01.450
要传递

33:01.450 --> 33:02.450
也是问号后边的东西

33:02.450 --> 33:03.450
一个参数要传递

33:03.450 --> 33:05.450
那么在x小时里面

33:05.450 --> 33:07.450
他可以通过这种方式来配置

33:07.450 --> 33:08.450
配置一下parons

33:08.450 --> 33:10.450
login id

33:10.450 --> 33:12.450
把login id作为参数传过去

33:12.450 --> 33:14.450
他会自动给你变成问号

33:14.450 --> 33:15.450
这种格式

33:15.450 --> 33:16.450
这是张浩视访存在

33:16.450 --> 33:17.450
咱们来试一下

33:17.450 --> 33:18.450
Test

33:20.450 --> 33:22.450
这就是exist

33:22.450 --> 33:24.450
张浩

33:26.450 --> 33:27.450
看一下

33:28.450 --> 33:29.450
q

33:29.450 --> 33:30.450
存在的

33:30.450 --> 33:31.450
咱们来看一下

33:31.450 --> 33:32.450
别的

33:36.450 --> 33:37.450
这就是

33:37.450 --> 33:38.450
这么一个exist

33:38.450 --> 33:39.450
下面这个

33:39.450 --> 33:41.450
恢复登录

33:41.450 --> 33:43.450
是一样的道理

33:44.450 --> 33:45.450
恢复登录

33:45.450 --> 33:47.450
当前登录的用户信息

33:47.450 --> 33:48.450
复制一下

33:49.450 --> 33:50.450
return

33:51.450 --> 33:52.450
get

33:52.450 --> 33:53.450
请求这个地址

33:53.450 --> 33:54.450
就完事了

33:54.450 --> 34:00.130
我们来试一下

34:00.130 --> 34:01.130
profile

34:01.130 --> 34:02.130
故校传传书

34:02.130 --> 34:04.130
他就看一下当前登录的用户时差

34:05.130 --> 34:06.130
好

34:06.130 --> 34:07.130
看一下这边

34:07.130 --> 34:08.130
他说什么

34:08.130 --> 34:10.130
authentication error

34:10.130 --> 34:12.130
发现了一个就是验证错误

34:12.130 --> 34:14.130
为什么会发生验证错误呢

34:15.130 --> 34:17.130
为什么会发生验证错误呢

34:17.130 --> 34:19.130
说明当前用户是没有登录的

34:19.130 --> 34:21.130
我们刚才不是登录了吗

34:22.130 --> 34:23.130
知道为什么吗

34:23.130 --> 34:25.130
你们前面是学过这些知识的

34:26.130 --> 34:27.130
是不是有的

34:27.130 --> 34:29.130
为什么他说我没有登录

34:29.130 --> 34:31.130
你看我们的网络请求里边

34:31.130 --> 34:33.130
放心

34:33.130 --> 34:34.130
然后这边

34:34.130 --> 34:35.130
profile

34:35.130 --> 34:36.130
他给我反复的是code1

34:36.130 --> 34:37.130
data.now

34:37.130 --> 34:39.130
message是一个authentication error

34:40.130 --> 34:42.130
为什么会有这种情况出现

34:42.130 --> 34:43.130
是因为

34:43.130 --> 34:45.130
我们在请求的时候

34:45.130 --> 34:47.130
没有把local storage里面的token

34:47.130 --> 34:49.130
带到请求里面去

34:50.130 --> 34:51.130
服务器那边

34:51.130 --> 34:52.130
他怎么知道你没有登录

34:52.130 --> 34:54.130
他需要把个定牌带过去

34:54.130 --> 34:56.130
而且不光是这个接口

34:56.130 --> 34:57.130
其实你看我们文档里面

34:57.130 --> 34:58.130
还有很多这种接口

34:58.130 --> 34:59.130
像聊天接口

34:59.130 --> 35:00.130
是不是都要把一个带过去

35:00.130 --> 35:02.130
都要把authentication带过去

35:05.130 --> 35:06.130
带过去的格式是这个

35:06.130 --> 35:07.130
bearer

35:07.130 --> 35:08.130
然后一个空格加上这个

35:09.130 --> 35:10.130
那么我们这边怎么带过去呢

35:10.130 --> 35:12.130
如果说你写到这

35:12.130 --> 35:13.130
可不可以

35:13.130 --> 35:14.130
你可以这样子写

35:14.130 --> 35:17.130
我在这里配置一下请求头

35:17.130 --> 35:18.130
headers

35:18.130 --> 35:19.130
请求头带过去

35:20.130 --> 35:22.130
但是如果说你在这里写的话

35:22.130 --> 35:23.130
你会发现有重复带

35:23.130 --> 35:24.130
将来别的接口

35:24.130 --> 35:25.130
他也会需要带过去

35:25.130 --> 35:27.130
所以说这里可以统一处理

35:27.130 --> 35:28.130
怎么统一处理

35:28.130 --> 35:29.130
不是也可以用拦接器

35:29.130 --> 35:30.130
刚才我们使用了

35:30.130 --> 35:31.130
响应的拦接器

35:31.130 --> 35:32.130
那么这里呢

35:32.130 --> 35:33.130
我们还可以添加

35:33.130 --> 35:35.130
请求拦接器

35:36.130 --> 35:37.130
还可以添加这个

35:37.130 --> 35:38.130
好,咱们来看一下吧

35:38.130 --> 35:39.130
请求拦接器

35:39.130 --> 35:40.130
请求拦接器的话

35:40.130 --> 35:42.130
我们这里直接复制过来

35:44.130 --> 35:46.130
所谓请求拦接器

35:46.130 --> 35:49.130
无非就是改变这个配置

35:49.130 --> 35:51.130
这是我们请求之前有个配置

35:51.130 --> 35:52.130
是请求之前的配置

35:52.130 --> 35:54.130
我们在这里更改这个配置

35:54.130 --> 35:56.130
那么怎么更改呢

35:56.130 --> 35:57.130
你看我这个都写

35:57.130 --> 35:58.130
差不多写好了

35:58.130 --> 35:59.130
我把楼盒Story机里面

35:59.130 --> 36:00.130
头坑拿出来

36:00.130 --> 36:01.130
看一下有没有头坑

36:01.130 --> 36:02.130
有的话就说明

36:02.130 --> 36:04.130
我这里本地是保存了头坑的

36:04.130 --> 36:05.130
保存头坑的话

36:05.130 --> 36:06.130
我就把这个配置里面

36:06.130 --> 36:07.130
headers

36:07.130 --> 36:08.130
Orceleration

36:08.130 --> 36:09.130
再加上

36:09.130 --> 36:10.130
对吧

36:10.130 --> 36:11.130
这配置请求头

36:11.130 --> 36:12.130
评论头那边

36:12.130 --> 36:14.130
可以有很多的请求

36:14.130 --> 36:15.130
头的键子对

36:15.130 --> 36:16.130
这是键这是值

36:16.130 --> 36:17.130
再加上就完成

36:18.130 --> 36:20.130
然后返回这个新的配置

36:20.130 --> 36:21.130
那么他到时候请求的时候

36:21.130 --> 36:23.130
就会使用这个新的配置去请求

36:23.130 --> 36:25.130
就统一处理的好处

36:25.130 --> 36:26.130
好,这样你看

36:26.130 --> 36:27.130
我现在不用去改

36:27.130 --> 36:28.130
这个profile函数

36:29.130 --> 36:30.130
不敢直接请求就完成了

36:33.400 --> 36:34.400
好,刷新

36:35.400 --> 36:36.400
还说爆出

36:36.400 --> 36:37.400
那我们来看检查一下吧

36:37.400 --> 36:39.400
到底是哪里的地方有问题

36:40.400 --> 36:41.400
我们这里去请求profile

36:41.400 --> 36:42.400
然后呢

36:42.400 --> 36:43.400
在那个

36:44.400 --> 36:45.400
这里好像没有加进去是吧

36:45.400 --> 36:46.400
Orceler

36:46.400 --> 36:47.400
这里

36:48.400 --> 36:50.400
好像是没有request

36:50.400 --> 36:51.400
headers

36:52.400 --> 36:53.400
好像是没有加进去

36:55.400 --> 36:56.400
首先有个地方

36:56.400 --> 36:57.400
到时候写的有问题

36:57.400 --> 36:58.400
这个地方

37:00.400 --> 37:01.400
我们这里先输出

37:01.400 --> 37:02.400
先输出再输

37:03.400 --> 37:07.700
我现在错误不一样

37:07.700 --> 37:09.700
错误不一样的正确

37:09.700 --> 37:10.700
我这里是带进去的

37:12.700 --> 37:13.700
他写的

37:14.700 --> 37:17.840
我是带进去的

37:17.840 --> 37:18.840
Orceleration

37:18.840 --> 37:19.840
只是没有按照他的格式

37:19.840 --> 37:20.840
来带进去

37:20.840 --> 37:21.840
对吧

37:21.840 --> 37:22.840
他的格式是这个样子的

37:23.840 --> 37:24.840
Barrier

37:26.840 --> 37:27.840
然后空格

37:27.840 --> 37:28.840
然后这边

37:28.840 --> 37:29.840
头盔放这

37:30.840 --> 37:31.840
他格式是这样子

37:31.840 --> 37:32.840
好,那么我看到

37:32.840 --> 37:34.840
服务器那边就恢复到等等的状态

37:35.840 --> 37:36.840
于是呢,我们可以通过这种方式

37:36.840 --> 37:37.840
虽然说前期

37:37.840 --> 37:39.840
我们好像要多写一点带嘛

37:39.840 --> 37:41.840
后边就写得非常非常轻松了

37:42.840 --> 37:43.840
直接请求

37:43.840 --> 37:44.840
刷到小英英过就完事了

37:44.840 --> 37:45.840
对吧,就可以

37:45.840 --> 37:46.840
做这么一个简单的封装就完事了

37:47.840 --> 37:48.840
很多人关起八道的事

37:48.840 --> 37:49.840
有没有考虑到

37:49.840 --> 37:50.840
因为我们这里有统一处理

37:50.840 --> 37:51.840
像什么错误

37:51.840 --> 37:52.840
错误过后

37:52.840 --> 37:53.840
谈出错误消息

37:53.840 --> 37:54.840
也不用管了

37:55.840 --> 37:57.840
如果说你已经登录了

37:57.840 --> 37:58.840
本地有token

37:58.840 --> 37:59.840
那么把token附带到请求里边

37:59.840 --> 38:00.840
不用管了

38:00.840 --> 38:01.840
统一处理

38:01.840 --> 38:02.840
对吧,他就有这么一个好处

38:03.840 --> 38:04.840
好,同学们

38:04.840 --> 38:05.840
下来把这个体

38:05.840 --> 38:06.840
做完

38:06.840 --> 38:08.840
一定要一个都去写一遍

38:08.840 --> 38:09.840
这个玩意是以后

38:09.840 --> 38:10.840
不管我们用不用框架

38:11.840 --> 38:12.840
这种带码都要会写的

38:13.840 --> 38:14.840
以后你们要

38:14.840 --> 38:15.840
你们以后

38:15.840 --> 38:17.840
在具体的开发的时候

38:17.840 --> 38:18.840
一定会去封装

38:18.840 --> 38:19.840
像用这种方式

38:19.840 --> 38:20.840
一个个去封装

38:20.840 --> 38:21.840
我们的接口

38:21.840 --> 38:22.840
把一个个写成函数

38:22.840 --> 38:23.840
那么这里边的统一处理

38:23.840 --> 38:24.840
就一定要去处理

38:25.840 --> 38:27.840
好,这是这里的可能内容

