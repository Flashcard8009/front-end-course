WEBVTT

00:00.240 --> 00:03.440
聊一聊这个第二个库

00:03.440 --> 00:05.140
劉达西

00:05.140 --> 00:07.940
这个库是顶定大名的一个库

00:07.940 --> 00:09.440
知名度非常多

00:09.440 --> 00:11.040
但是实际情况呢

00:11.040 --> 00:14.040
你们平时开发基本上不怎么回去用

00:14.040 --> 00:17.240
因为这个库干什么用的

00:17.240 --> 00:19.840
它是一个针对一业史

00:19.840 --> 00:22.040
知道一业史和既业史吧

00:22.040 --> 00:23.640
针对一业史说的是啥

00:23.640 --> 00:25.840
就针对那个语言本身的

00:25.840 --> 00:27.040
它不是针对多姆的

00:27.040 --> 00:28.240
跟多姆没关系

00:28.240 --> 00:29.640
跟波姆也没关系

00:29.640 --> 00:31.440
都没有啥关系

00:31.440 --> 00:33.240
那么针对一业史就是针对什么

00:33.240 --> 00:35.440
叔祖对乡这些东西的

00:35.440 --> 00:37.240
一个古老的工具库

00:37.240 --> 00:38.840
它出现在一业史五之前

00:38.840 --> 00:40.140
因为你们知道

00:40.140 --> 00:42.440
在一业史五之前

00:42.440 --> 00:44.840
咱们既业史代码

00:44.840 --> 00:45.840
就语言层面

00:45.840 --> 00:49.040
就一业史语言层面的东西很少

00:49.040 --> 00:52.040
你看叔祖里边很多API都没有

00:52.040 --> 00:54.840
更不要说一业史丢了

00:54.840 --> 00:56.040
那么劉达西的出现了

00:56.040 --> 00:58.540
就是弥补了我们过去

00:58.640 --> 01:00.640
语言层面

01:00.640 --> 01:02.040
API不足的问题

01:02.040 --> 01:04.140
就这么一个东西

01:04.140 --> 01:04.940
它给你提供了什么

01:04.940 --> 01:06.340
提供了大量的函数

01:06.340 --> 01:07.140
一大堆函数

01:07.140 --> 01:08.740
你看一下它的网站

01:08.740 --> 01:10.840
我去看中文

01:10.840 --> 01:11.640
你看吧

01:11.640 --> 01:14.640
针对叔祖给你提供了一大堆大堆的函数

01:14.640 --> 01:16.940
针对集合又是一大堆大堆的函数

01:16.940 --> 01:18.740
针对函数又是一大堆的

01:18.740 --> 01:20.640
针对语言这些东西

01:20.640 --> 01:22.140
还针对了数字学

01:22.140 --> 01:24.740
数字对象一大堆的函数

01:24.840 --> 01:30.320
来处理一些常见的问题

01:30.320 --> 01:31.220
因为这些函数

01:31.220 --> 01:33.520
其实它每一个并不复杂

01:33.520 --> 01:35.320
你说你不用它

01:35.320 --> 01:37.020
你不影响它也不太影响

01:37.020 --> 01:37.520
有些函数

01:37.520 --> 01:39.020
像我平时开发的时候

01:39.020 --> 01:39.920
有一些工具函数

01:39.920 --> 01:40.620
我就自己写了

01:40.620 --> 01:42.420
比方说得到一个水积数

01:42.420 --> 01:45.120
在最小值到最大值之间

01:45.120 --> 01:46.120
生成一个水积数

01:46.120 --> 01:47.120
那共产党我就自己写了

01:47.120 --> 01:48.420
就一行代

01:48.420 --> 01:49.620
当然你也可以使用

01:49.620 --> 01:51.520
劉达西里边还给你提供的

01:51.520 --> 01:53.620
这些函数都可以

01:53.620 --> 01:54.320
就这么一回事

01:54.320 --> 01:55.720
他就给你提供这么一些功能

01:55.720 --> 01:56.720
随便看一个

01:56.720 --> 01:58.120
来看一个数组

01:58.120 --> 01:59.520
当你引用结块位之后

01:59.520 --> 02:01.120
你就会活到一个全局对象

02:01.120 --> 02:02.120
叫下滑线

02:02.120 --> 02:03.620
然后名字叫下滑线

02:03.620 --> 02:04.520
他给你写了一个对象

02:04.520 --> 02:06.220
对象的名字叫下滑线

02:06.220 --> 02:07.420
比方说你怎么用

02:07.420 --> 02:08.120
你这样子用

02:08.120 --> 02:10.820
这个CDN

02:10.820 --> 02:14.620
然后这边我们就先倾线一个页面吧

02:14.620 --> 02:15.820
在页面上

02:15.820 --> 02:18.620
你去引用它

02:18.620 --> 02:19.520
然后接下来

02:19.520 --> 02:23.760
你会获得一个对象

02:23.760 --> 02:25.260
这个对象就是个下滑线

02:25.260 --> 02:27.860
对下滑线里面提供了很多很多的函数

02:27.860 --> 02:29.260
供你使用

02:29.260 --> 02:30.460
那么这些函数你记得住吗

02:30.460 --> 02:32.260
反正我记不住

02:32.260 --> 02:33.160
谁记得住

02:33.160 --> 02:34.660
谁爱记自己去记

02:34.660 --> 02:36.460
反正你没有必要去记

02:36.460 --> 02:37.860
没有必要

02:37.860 --> 02:38.960
就是个下滑线

02:38.960 --> 02:40.260
他给你写的是个函数

02:40.260 --> 02:40.460
对吧

02:40.460 --> 02:42.360
实际上函数的本质也是对象

02:42.360 --> 02:44.560
对象里边他给你提供了很多东西

02:44.560 --> 02:47.660
比方说我们这里一个创渴

02:47.660 --> 02:48.360
创渴的函数

02:48.360 --> 02:49.160
他可以做什么呢

02:49.160 --> 02:50.160
他可以把一个数组

02:50.160 --> 02:53.360
你传入一个数组

02:53.360 --> 02:55.560
然后传入一个分割数量

02:55.560 --> 02:56.160
3

02:56.160 --> 02:57.660
那么他会把这个数组每三位

02:57.660 --> 02:59.260
给你分割成一个数组

02:59.260 --> 03:00.460
你看创渴

03:00.460 --> 03:03.160
他这里边都有官方文道里面

03:03.160 --> 03:04.060
都写得很详细的

03:04.060 --> 03:04.960
创渴

03:04.960 --> 03:05.960
第一个参数传数组

03:05.960 --> 03:07.960
第二个参数传一个尺寸

03:07.960 --> 03:09.060
他会给你进行分割

03:09.060 --> 03:10.460
你直接看地址就行了

03:10.460 --> 03:11.360
你传入一个数组

03:11.360 --> 03:11.860
2

03:11.860 --> 03:13.460
然后给分割成这个样子

03:13.460 --> 03:14.260
一看就明白了

03:14.260 --> 03:14.560
对吧

03:14.560 --> 03:15.460
把A B

03:15.460 --> 03:16.860
把前量相A B

03:16.860 --> 03:17.860
成为一个数组

03:17.860 --> 03:18.760
放到第几项

03:18.760 --> 03:19.460
然后把CD

03:19.460 --> 03:20.460
成为一个数组放到第二项

03:20.560 --> 03:22.760
专门来做这些乱七八糟的事情

03:22.760 --> 03:24.060
提供了很多的工具函数

03:24.060 --> 03:25.260
你看这里

03:25.260 --> 03:25.860
是不是给你分

03:25.860 --> 03:27.660
生成这么一个东西

03:27.660 --> 03:29.060
这就是

03:29.060 --> 03:31.060
杰克多丹喜做的事

03:31.060 --> 03:33.760
他做了类似的事情很多很多

03:33.760 --> 03:35.560
那么这些人也都不用记

03:35.560 --> 03:36.960
那么多丹喜对我们开发来说

03:36.960 --> 03:39.760
有什么样的影响呢

03:39.760 --> 03:41.060
就是他其实他里边

03:41.060 --> 03:42.160
他提供了

03:42.160 --> 03:43.760
你能想到了大部分工具函数

03:43.760 --> 03:45.960
他都给你做完了

03:45.960 --> 03:47.960
那么他对我们开发有什么影响

03:47.960 --> 03:50.260
如果说你将来开发

03:50.260 --> 03:52.060
你遇到了一些针对数组

03:52.060 --> 03:54.460
针对对象的一些特殊的处理

03:54.460 --> 03:55.460
你觉得不好做

03:55.460 --> 03:56.760
你自己写工具函数了

03:56.760 --> 03:57.860
你自己写个函数来处理的

03:57.860 --> 03:58.760
可不可以可以

03:58.760 --> 04:00.060
但是觉得不好写

04:00.060 --> 04:01.260
那么你想到楼丹喜

04:01.260 --> 04:01.860
看一下

04:01.860 --> 04:03.460
按照他的目睹查一下

04:03.460 --> 04:05.860
有没有一个随便点一点

04:05.860 --> 04:07.160
看一下有没有哪个函数

04:07.160 --> 04:09.460
可以帮你处理这个事呢

04:09.460 --> 04:10.560
有的话就有

04:10.560 --> 04:12.260
没有的话就自己写

04:12.260 --> 04:13.460
就是这么一个东西

04:13.460 --> 04:14.560
楼丹喜

04:14.560 --> 04:15.960
其实楼丹喜真的

04:15.960 --> 04:17.760
他知名度广是因为很多的

04:17.760 --> 04:20.160
第三方库的作者

04:20.160 --> 04:22.060
会使用到楼丹喜

04:22.060 --> 04:24.960
其实作为我们做业务开发的话

04:24.960 --> 04:26.060
开发功能的话

04:26.060 --> 04:28.660
用楼丹喜倒是用的不多

04:28.660 --> 04:30.560
就这么一个东西

04:30.560 --> 04:31.860
那么我就讲完了

04:31.860 --> 04:32.460
我就讲完了

04:32.460 --> 04:33.460
他就这么个玩意

04:33.460 --> 04:34.760
所以跟了解就行了

04:34.760 --> 04:36.060
因为你作为一个前端开发者

04:36.060 --> 04:38.560
你楼丹喜都不知道

04:38.560 --> 04:39.760
那就有点冒效化了

04:39.760 --> 04:40.560
但是你用不用

04:40.560 --> 04:41.760
那是另外一回事

04:41.760 --> 04:43.760
那么这里我给大家提供了一个练习题

04:43.760 --> 04:44.860
你们可以自己去做一下

04:44.860 --> 04:45.660
看题自己做一下

04:45.660 --> 04:47.360
这里都有参考答案

04:47.360 --> 04:48.560
而且都有提示

04:48.560 --> 04:49.860
使用楼丹喜的哪个函数

04:49.860 --> 04:50.760
你就在这里查

04:50.760 --> 04:52.160
比方说使用那个times函数

04:56.160 --> 04:58.260
这个函数你给你去查一下

04:58.260 --> 04:58.960
有这么一个函数

04:58.960 --> 04:59.760
提供了这么一个函数

04:59.760 --> 05:00.760
下发现点times

05:00.760 --> 05:01.760
然后咯咯咯咯咯

05:01.760 --> 05:03.860
你直接看那个例子就行了

05:03.860 --> 05:06.560
times3 stream

05:06.560 --> 05:07.760
那么他就可以给你

05:07.760 --> 05:12.160
给你得到一个什么的012

05:12.160 --> 05:13.160
就是看这个例子

05:13.160 --> 05:15.960
这个例子写的也不怎么样

05:15.960 --> 05:17.960
说实话也不怎么样

05:17.960 --> 05:18.560
啥意思呢

05:18.560 --> 05:21.060
他其实就是

05:21.060 --> 05:23.660
第二个函数传一个函数进去

05:23.660 --> 05:24.660
比方说times

05:27.360 --> 05:28.060
他说你看嘛

05:28.060 --> 05:29.060
他给你高手里

05:29.060 --> 05:30.860
这个玩意儿是个atorator

05:30.860 --> 05:33.460
那么他会调用这个玩意儿

05:33.460 --> 05:34.260
那么调用这个玩意儿

05:34.260 --> 05:35.860
第二个函数是不是个函数

05:35.860 --> 05:36.460
他调用

05:36.460 --> 05:37.760
那么传一个函数进去

05:37.760 --> 05:39.760
他会调用这个函数n次

05:39.760 --> 05:40.760
你传那个n

05:40.760 --> 05:41.960
调用一个n次

05:41.960 --> 05:43.460
每次把函数返回的结果

05:43.460 --> 05:44.460
保存到数主里边

05:44.460 --> 05:46.060
他返回一个数主

05:46.060 --> 05:47.160
那么这个函数有一个参数

05:47.160 --> 05:47.660
index

05:47.760 --> 05:48.960
就是第几次调用

05:48.960 --> 05:50.060
从0开始

05:50.060 --> 05:51.760
那么咋意思

05:51.760 --> 05:52.460
就看一下

05:52.460 --> 05:53.960
我们看一下地导题

05:53.960 --> 05:54.860
就看一下地导题

05:54.860 --> 05:58.060
参考他就这个

05:58.060 --> 05:59.260
演习

05:59.260 --> 06:00.160
我传

06:00.160 --> 06:01.960
传入一个10

06:01.960 --> 06:02.760
传入一个10

06:02.760 --> 06:03.760
然后呢

06:03.760 --> 06:04.760
这里边

06:04.760 --> 06:06.460
第二个参数传一个函数

06:06.460 --> 06:07.160
你给我一个n

06:07.160 --> 06:08.260
n是什么意思

06:08.260 --> 06:10.260
就是他就循环十次

06:10.260 --> 06:11.260
就这么意思

06:11.260 --> 06:12.160
第一次循环

06:12.160 --> 06:13.060
调用一次这个函数

06:13.060 --> 06:15.160
把0传进去

06:15.160 --> 06:16.060
你返回的0

06:16.060 --> 06:16.760
0加1

06:16.760 --> 06:18.560
那么他的新生生的数主里边

06:18.560 --> 06:21.760
多了一个1

06:21.760 --> 06:23.060
第二次再调用

06:23.060 --> 06:24.360
二循环十次了

06:24.360 --> 06:25.060
第二次再调用

06:25.060 --> 06:26.460
他传一个1进去

06:26.460 --> 06:27.460
然后他返回一个2

06:27.460 --> 06:29.260
那就新的数捕里边有一个2

06:29.260 --> 06:31.060
第三次调用传入一个10进去

06:31.060 --> 06:34.560
那么这就就是2

06:34.560 --> 06:35.660
2加1就是3

06:35.660 --> 06:36.360
那么得到的数捕

06:36.360 --> 06:38.860
不就是1 2 3 4 5 6 7 8 9 10吗

06:38.860 --> 06:39.560
通过一绣化

06:39.560 --> 06:40.460
就可以非常方便的

06:40.460 --> 06:41.560
生成这么一个数捕

06:41.560 --> 06:42.360
那以前的话

06:42.360 --> 06:43.360
结果挺麻烦

06:43.360 --> 06:45.060
还要循环

06:45.060 --> 06:45.560
对吧

06:45.560 --> 06:47.160
就这么一个东西

06:47.160 --> 06:48.760
你说他

06:48.760 --> 06:50.560
当然他也让我们轻松了不少

06:50.560 --> 06:50.760
对吧

06:50.760 --> 06:51.960
如果说遇到类似的需求

06:51.960 --> 06:52.960
就轻松了不少

06:52.960 --> 06:54.960
他就是给你提供了很多的工具函数

06:54.960 --> 06:56.560
那你看一下官方的地址里边

06:56.560 --> 06:57.560
他给你传了个Stream

06:57.560 --> 06:59.060
这个玩意是不是个函数

06:59.060 --> 07:00.360
是不是函数

07:00.360 --> 07:01.360
当然是函数啊

07:01.360 --> 07:02.360
Stream 0

07:02.360 --> 07:03.660
他可以得到一个字幕券

07:03.660 --> 07:05.060
0

07:05.060 --> 07:06.560
Stream 1

07:06.560 --> 07:07.560
可以得到一个字幕券

07:07.560 --> 07:08.060
1

07:08.060 --> 07:08.460
所以说了

07:08.460 --> 07:09.260
这个样子一传

07:09.260 --> 07:11.560
是不是就得到0 1 2

07:11.560 --> 07:12.460
对吧

07:12.460 --> 07:14.660
就得到这么一个东西

07:14.660 --> 07:15.860
没啥了

07:15.860 --> 07:18.660
没啥了

07:18.660 --> 07:19.660
然后这个

07:19.660 --> 07:20.660
这个Constance

07:20.660 --> 07:21.660
第二个例子

07:21.660 --> 07:22.860
4 Constance

07:22.860 --> 07:25.660
Constance就是得到一个长量

07:25.660 --> 07:28.300
你看一下吧

07:28.300 --> 07:29.300
Constance

07:29.300 --> 07:32.100
创建一个返回Value的函数

07:32.100 --> 07:32.600
你看吧

07:32.600 --> 07:36.300
他得到的是什么呢

07:36.300 --> 07:37.600
也就是说

07:37.600 --> 07:39.800
这个玩意

07:39.800 --> 07:42.700
Constance

07:42.700 --> 07:44.100
一传入一个1

07:44.100 --> 07:46.100
那么他得到的是一个函数

07:46.100 --> 07:47.700
他得到的是一个函数

07:47.700 --> 07:49.100
比方说fn

07:49.100 --> 07:50.100
得到的是函数

07:50.100 --> 07:51.100
那么一调用这个函数

07:51.100 --> 07:52.300
他就直接返回1

07:52.300 --> 07:53.500
再调用多少次

07:53.500 --> 07:55.100
他就都返回1

07:55.100 --> 07:57.500
他就得到这么一个东西

07:57.500 --> 07:58.400
你说你什么

07:58.400 --> 07:59.000
你多少用了

07:59.000 --> 08:00.300
你需要用的话

08:00.300 --> 08:01.900
这个玩意其实有的时候

08:01.900 --> 08:02.800
有点有

08:02.800 --> 08:03.900
他做一些

08:03.900 --> 08:06.700
电量缓存有点有

08:06.700 --> 08:08.200
而且他没啥了

08:08.200 --> 08:08.900
你就按照

08:08.900 --> 08:10.700
你就看一下咱们这个练习题

08:10.700 --> 08:12.000
然后根据我的提示

08:12.000 --> 08:13.800
你去做一做

08:13.800 --> 08:14.500
然后呢

08:14.500 --> 08:16.300
可这边也有参考答案

08:16.300 --> 08:16.900
可以

08:16.900 --> 08:18.300
如果说你写不出来的话

08:18.300 --> 08:19.100
你可以看一下

08:19.100 --> 08:20.800
就都比较简单

08:20.800 --> 08:21.700
其他没啥了

08:21.700 --> 08:22.500
这就是人都答案

08:22.500 --> 08:23.200
了解就行了

