WEBVTT

00:01.390 --> 00:05.790
各位同学 大家好 这节课我们继续按立课程的一个学习

00:05.790 --> 00:09.990
那么通过我们之前课程的一个学习

00:09.990 --> 00:13.190
基本上我们现在这个管理系统

00:13.190 --> 00:15.790
所有涉及到的一些公共组件

00:15.790 --> 00:18.990
包括我们一些核心的功能

00:18.990 --> 00:20.590
我们基本上都已经搞定了

00:20.590 --> 00:21.990
那么剩下的这几部分

00:21.990 --> 00:23.990
比如说直级机校考核

00:23.990 --> 00:26.190
以及条件记录奖程

00:26.190 --> 00:27.790
包括考评信息

00:27.990 --> 00:31.090
那他们的这个里面的内容

00:31.090 --> 00:34.190
基本上我们可以实现一个附用

00:34.190 --> 00:35.790
比如说一些公共的组架

00:35.790 --> 00:38.890
我们在这个里面可以附用来进行一个使用

00:38.890 --> 00:42.590
那之后我们就是在这个原有的基础上

00:42.590 --> 00:45.890
做一些我们的这个自断的一个调整

00:45.890 --> 00:47.890
包括接口的一个准备

00:47.890 --> 00:49.890
那基本上都可以搞得定

00:49.890 --> 00:53.790
那所以说在这个里面接下来的课程里面

00:53.790 --> 00:57.290
我会同学们讲一下制作的一个核心

00:57.290 --> 00:59.090
比如说直级模块的一个制作

00:59.090 --> 01:01.190
代码我提前给同学们准备好

01:01.190 --> 01:03.390
然后同学们可以按照我这个代码

01:03.390 --> 01:04.990
自己来实现一下

01:04.990 --> 01:06.990
因为我们每个都手敲的话

01:06.990 --> 01:10.490
其实这个里面会涉及到很多重复性的工作

01:10.490 --> 01:12.890
还有一个就是说这个里面的内容

01:12.890 --> 01:15.890
基本上和我们的员工非常像

01:15.890 --> 01:19.990
但是它的复达度是远低于员工的

01:19.990 --> 01:21.490
因为员工这个里面

01:21.490 --> 01:24.690
涉及到的内容相对来讲是比较多的

01:24.690 --> 01:27.090
比如说其他表格没有的

01:27.090 --> 01:30.490
这种机销考核查看在员工列表里面

01:30.490 --> 01:31.090
它是有

01:31.090 --> 01:33.490
那我们比如说直级机销考核

01:33.490 --> 01:35.490
这些它都不存在的

01:35.490 --> 01:37.390
所以说这个我们也要清楚一下

01:37.390 --> 01:42.590
做起来难度上相对比员工会小很多的

01:42.590 --> 01:45.090
首先我们来说一下直级模块制作

01:45.090 --> 01:46.590
那在制作它的过程当中

01:46.590 --> 01:50.890
这里面就涉及到一个数据获取的这么一个过程

01:52.390 --> 01:53.390
数据获取

01:53.390 --> 01:56.190
我们主要这个模块涉及到的接口

01:56.190 --> 01:57.590
一共有五个

01:57.590 --> 02:02.190
而且我们这个直级列表在员工选择新增用户

02:02.190 --> 02:03.990
或者是修改直级的时候

02:03.990 --> 02:05.590
其实我们在这个里面

02:05.590 --> 02:07.690
直级列表已经定义好了

02:07.690 --> 02:09.390
我们接下来要做的任务

02:09.390 --> 02:12.790
就是把直级详情删除直级以及新增

02:12.790 --> 02:14.190
包括修改直级

02:14.190 --> 02:16.690
给它进行一个添加就可以了

02:16.690 --> 02:20.590
包括我们后面的每一个模块

02:20.590 --> 02:21.890
我们在制作过程当中

02:21.890 --> 02:25.590
首先你第一个要考虑的是接口的一个准备

02:25.590 --> 02:28.190
那接口准备怎么来做呢?

02:28.190 --> 02:29.190
非常的简单

02:29.190 --> 02:31.590
我们src下面src

02:31.590 --> 02:35.590
src这个里面我们定义好了一个直级

02:35.590 --> 02:38.390
直级我们找一下

02:38.390 --> 02:39.990
sendiment

02:39.990 --> 02:45.590
sorry应该是这个里面level

02:45.590 --> 02:47.090
打开我们这个level

02:47.090 --> 02:50.890
level里面就会有一些直级的相应的内容

02:50.890 --> 02:54.390
比如说我们获取这个直级列表

02:54.390 --> 02:55.990
我们这个时候出手话的时候

02:55.990 --> 02:58.590
其实我们那时候已经搞定了这个了

02:58.590 --> 03:00.090
在员工制作的时候

03:00.090 --> 03:01.590
然后还有直级详情

03:01.590 --> 03:02.990
更新直级信息

03:02.990 --> 03:05.890
这些你提前先进行一个引入

03:05.890 --> 03:09.290
那我们这些接口如何来使用呢?

03:09.290 --> 03:13.390
这个里面你可以进行一个文档的查询

03:13.390 --> 03:14.990
在这个接口文档里面

03:14.990 --> 03:19.390
我们找到直级模块的一个接口epi的使用

03:19.390 --> 03:20.290
到这个里面

03:20.290 --> 03:21.890
那你就可以来进行一个查看

03:21.890 --> 03:24.590
比如说它的请求方法

03:24.590 --> 03:26.690
包括我们传递的参数

03:26.690 --> 03:29.890
这里面是都有一个详细的说明的

03:29.890 --> 03:31.290
我们只需要拿过来

03:31.290 --> 03:35.090
直接的进行一个使用就ok了

03:35.090 --> 03:36.490
好 那这个说完了之后

03:36.490 --> 03:37.890
咱们再来说第二个问题

03:37.890 --> 03:39.390
第二个问题是什么呢?

03:39.390 --> 03:42.690
就是说我们在这个接口epi

03:42.690 --> 03:44.690
准备好的前提下

03:44.690 --> 03:45.690
那这个时候呢

03:45.690 --> 03:49.090
我们要做一下模块内的一个

03:49.090 --> 03:52.090
公共状态的一个定义

03:52.090 --> 03:55.590
什么叫模块内公共状态的定义

03:55.590 --> 03:56.890
因为在这个直级里面

03:56.890 --> 03:58.790
比如说我们创建直级的时候

03:58.790 --> 03:59.790
打开这个弹窗

03:59.790 --> 04:00.390
对不对

04:00.390 --> 04:02.390
弹窗里面是不是就会有一个表单

04:02.390 --> 04:03.590
那这个表单叫什么呢?

04:03.590 --> 04:05.290
那我们知道在员工里面

04:05.290 --> 04:06.190
它叫adform

04:06.190 --> 04:06.690
对不对

04:06.690 --> 04:08.090
那相应的直级里面

04:08.090 --> 04:09.490
是不是也得有这一个

04:09.490 --> 04:09.990
对吧

04:09.990 --> 04:10.390
然后呢

04:10.390 --> 04:12.990
包括我们这个头部内容的一个导入

04:12.990 --> 04:13.690
那这是呢

04:13.690 --> 04:14.790
公共的组件

04:14.790 --> 04:16.290
还有这种表格组件

04:16.290 --> 04:17.590
我们的一个定义

04:17.590 --> 04:18.290
这些呢

04:18.290 --> 04:21.390
需要你都提前准备好的一些组件

04:21.390 --> 04:22.390
你要想清楚了

04:22.390 --> 04:22.890
然后呢

04:22.890 --> 04:25.090
或者说我们打开详情的时候

04:25.090 --> 04:28.390
右边展示的这个抽屉模太宽

04:28.390 --> 04:31.590
里面的一些详情的相关的内容

04:31.590 --> 04:32.090
我们呢

04:32.090 --> 04:34.990
要提前把这些组件来准备好啊

04:34.990 --> 04:35.890
如何来实现

04:35.890 --> 04:36.690
那这个时候呢

04:36.690 --> 04:37.890
我们就可以看一下

04:38.990 --> 04:39.790
src

04:39.790 --> 04:42.090
我们打开这个pages

04:42.090 --> 04:44.990
pages这里面就有一个level

04:44.990 --> 04:46.190
level里面呢

04:46.190 --> 04:48.690
我们跟目录下面展示的

04:48.690 --> 04:50.490
首先是一个index.js

04:50.490 --> 04:53.090
他把我们需要的模块和组件

04:53.090 --> 04:54.390
都给进行一个引入

04:54.390 --> 04:55.590
这是第一部分

04:55.590 --> 04:56.390
第二部分呢

04:56.390 --> 04:57.490
就是有一个model

04:57.490 --> 04:58.390
model里面呢

04:58.390 --> 05:00.090
定义了一些状态

05:00.090 --> 05:00.590
比如说

05:00.590 --> 05:01.590
那像这个

05:01.590 --> 05:02.490
他应该是什么

05:02.490 --> 05:03.990
初始化直级

05:03.990 --> 05:04.390
对吧

05:05.590 --> 05:08.090
初始化直级列表啊

05:08.090 --> 05:09.090
这是第一个

05:09.090 --> 05:09.490
这个呢

05:09.490 --> 05:10.590
我们可以看啊

05:10.590 --> 05:11.990
从他的这个

05:11.990 --> 05:13.090
描述的语意上

05:13.090 --> 05:14.190
我们就可以看出来

05:14.190 --> 05:17.190
获取一个直级的详情

05:19.230 --> 05:21.830
那先把这两个请求的方法

05:21.830 --> 05:23.530
在我们的model里面啊

05:23.530 --> 05:24.830
以dwa的这种形式

05:24.830 --> 05:26.130
来进行一个定义

05:26.130 --> 05:26.730
之后呢

05:26.730 --> 05:27.530
请求的时候

05:27.530 --> 05:28.430
就是分别请求

05:28.430 --> 05:29.830
他们的接口就ok了

05:29.830 --> 05:31.030
然后同时呢

05:31.030 --> 05:33.230
我们做一个reducer的

05:33.230 --> 05:34.330
一个api定义

05:34.330 --> 05:35.430
那reducer里面

05:35.430 --> 05:37.730
就是针对我们获取到的数据

05:37.730 --> 05:38.930
进行我们初始化

05:38.930 --> 05:40.730
状态的一个修改的

05:40.730 --> 05:42.730
这样一个操作就ok了

05:42.730 --> 05:44.630
比如说我们的这个level list

05:44.630 --> 05:46.030
那level list的指的是什么

05:46.030 --> 05:47.430
就是我们直级列表

05:47.430 --> 05:47.930
对不对

05:47.930 --> 05:50.330
初始化你肯定给他一个空的数组啊

05:51.530 --> 05:53.830
我们使用一个空的数组就可以

05:53.830 --> 05:57.230
比如说那个是我们的列表长度

05:57.230 --> 05:58.330
也就是说你后端

05:58.330 --> 06:00.630
返回多少条数据

06:00.630 --> 06:02.530
那这个是不是可以代表着

06:02.530 --> 06:03.130
对吧

06:03.130 --> 06:04.230
列表长度

06:04.230 --> 06:07.630
然后还有这个我们直级详情

06:07.630 --> 06:08.230
对吧

06:08.230 --> 06:10.030
直级详情

06:10.030 --> 06:10.830
ok

06:10.830 --> 06:12.630
这个然后有三条

06:12.630 --> 06:14.030
一次是对应着修改

06:14.030 --> 06:16.630
它状态的三个数据

06:16.630 --> 06:18.830
当然咱们这个C5IDs

06:18.830 --> 06:20.730
它这个是没有使用到的

06:20.730 --> 06:24.930
我可以把它给做一个干掉这样一个处理

06:24.930 --> 06:25.430
然后呢

06:25.430 --> 06:27.830
我们这个里面获取的时候

06:27.830 --> 06:29.030
level list

06:29.030 --> 06:30.630
那这个payload里面

06:30.630 --> 06:33.230
是把这个level list的和toto

06:33.230 --> 06:35.030
统一的给做了一个修改

06:36.430 --> 06:37.030
好的

06:37.030 --> 06:38.030
咱们再来一下

06:38.030 --> 06:39.630
刚才我删掉了一个状态

06:42.580 --> 06:44.180
到我们直级这一部分

06:44.180 --> 06:45.780
直级这一部分那就过来了

06:45.780 --> 06:46.380
过来之后

06:46.380 --> 06:48.080
那你先把一个状态给整到好

06:48.080 --> 06:49.180
准备好状态之后

06:49.180 --> 06:51.080
那我们一次的来看

06:51.080 --> 06:52.980
这个里面都有哪些内容

06:52.980 --> 06:53.480
首先呢

06:53.480 --> 06:56.880
是一些常规的react相关的属性

06:56.880 --> 06:58.480
或者方法的一个引用

06:58.480 --> 07:00.680
然后这个里面

07:00.680 --> 07:01.680
调理清晰一点

07:01.680 --> 07:03.180
那我们接进来就是什么呢

07:03.180 --> 07:04.180
level table

07:04.180 --> 07:05.580
level table指的是什么呢

07:05.580 --> 07:08.280
就是我们核心的这么一个表格啊

07:08.280 --> 07:10.780
然后有这个level table

07:10.780 --> 07:11.680
咱们可以看一下

07:11.680 --> 07:13.180
you the first patch

07:13.180 --> 07:17.080
这个是我们准备的react里面

07:17.080 --> 07:21.480
这个使用我们react redux的相应的内容

07:21.480 --> 07:21.880
对不对

07:21.880 --> 07:22.380
然后呢

07:22.380 --> 07:24.280
你可以从react redux里面获取

07:24.280 --> 07:25.680
那我们还可以从什么

07:25.680 --> 07:26.980
5米里面获取啊

07:26.980 --> 07:28.280
这个是都可以的

07:28.280 --> 07:29.680
看你的这个需求吧

07:30.680 --> 07:31.280
之后呢

07:31.280 --> 07:33.880
就是一些相应的组件的引入了

07:33.880 --> 07:36.280
包括我们的这个create level

07:36.280 --> 07:37.680
table header啊

07:37.680 --> 07:39.580
还有这些set container

07:39.580 --> 07:40.480
像这些组件呢

07:40.480 --> 07:41.480
它有一些啊

07:41.480 --> 07:43.380
是可附用的公共组件

07:43.380 --> 07:44.180
还有一些呢

07:44.180 --> 07:46.180
是当前模块自定义的组件

07:46.180 --> 07:48.080
那这个我们要区分一下

07:48.080 --> 07:50.280
那这个同学们还记得是不是什么

07:50.280 --> 07:50.780
这个呢

07:50.780 --> 07:55.480
就是我们打开这个弹窗的这样一个组件

07:55.480 --> 07:58.080
那比如说我们在新增直辑的时候

07:58.080 --> 07:59.280
我们点击创建

07:59.280 --> 08:01.080
当时我们是不是定义了一个弹窗

08:01.080 --> 08:01.580
对吧

08:01.580 --> 08:02.280
那像这种

08:02.280 --> 08:03.480
它就属于什么呢

08:03.480 --> 08:05.080
我们的一个公共组件

08:05.080 --> 08:05.580
对吧

08:05.580 --> 08:06.580
那我们为了清晰

08:06.580 --> 08:09.580
可以把公共组件放在这位置啊

08:09.580 --> 08:11.380
然后还有哪些公共组件呢

08:11.380 --> 08:11.980
像这种啊

08:11.980 --> 08:14.080
其实我们在conformance下面引入的

08:14.080 --> 08:15.580
是不是都是公共组件

08:15.580 --> 08:18.580
那比如说dialog和table header啊

08:18.580 --> 08:22.080
这些原来在我们做员工处理的时候

08:22.080 --> 08:25.280
那是不是都已经在这个里面

08:25.280 --> 08:26.480
已经有了什么

08:26.480 --> 08:27.680
有了这个定义

08:27.680 --> 08:27.980
对吧

08:27.980 --> 08:30.280
我们直接拿回来使用就可以了啊

08:30.280 --> 08:30.780
然后呢

08:30.780 --> 08:33.280
像create level和这个啊

08:33.280 --> 08:35.380
我们的这个filter form啊

08:35.380 --> 08:36.180
它呢

08:36.180 --> 08:36.880
这些啊

08:36.880 --> 08:38.380
都应该是什么呢

08:38.380 --> 08:41.580
我们这个当前level里面定义的一些

08:41.580 --> 08:42.680
私有组件

08:42.680 --> 08:43.880
那私有组件使用呢

08:43.880 --> 08:47.280
其实它的这个功能和我们员工里面

08:47.280 --> 08:48.880
比如说我们对这个

08:48.880 --> 08:50.780
搜索过滤的这个表单处理啊

08:50.780 --> 08:51.680
他们的这个

08:51.680 --> 08:53.180
附用的这个逻辑啊

08:53.180 --> 08:54.480
基本上都是一致的

08:54.480 --> 08:55.580
只不过是名字啊

08:55.580 --> 08:57.880
有了一个简单的调整

08:57.880 --> 08:59.380
这个我们要清楚一下

08:59.380 --> 09:00.280
这个driver呢

09:00.280 --> 09:01.680
也是一个公共组件

09:01.680 --> 09:03.780
那我们这样就可以快速区分

09:03.780 --> 09:06.780
包括我们这里面使用了一个hook

09:06.780 --> 09:07.480
那这个hook

09:07.580 --> 09:08.680
放在这个里面啊

09:08.680 --> 09:09.080
这样呢

09:09.080 --> 09:10.080
你就感觉清晰一下

09:10.080 --> 09:11.480
如果说你觉得不爽啊

09:11.480 --> 09:13.780
那我们直接怎么给他这样区分

09:13.780 --> 09:15.180
那这样区分你就会发现了

09:15.180 --> 09:15.980
哎公共的

09:15.980 --> 09:16.480
对不对

09:16.480 --> 09:16.980
然后呢

09:16.980 --> 09:19.780
这些是我们的一个私有的啊

09:19.780 --> 09:22.080
那一次是哪些内容呢

09:22.080 --> 09:24.680
我们这里面就一点点来看啊

09:24.680 --> 09:26.780
首先是一套结构啊

09:26.780 --> 09:27.580
这个结构呢

09:27.580 --> 09:30.980
我用一个悶content来进行包裹

09:30.980 --> 09:32.980
因为我们在这个layout下面

09:32.980 --> 09:35.880
已经定义了这个悶content的一个

09:35.880 --> 09:37.380
全局样式

09:37.380 --> 09:39.880
那已经定义了全局样式之后

09:39.880 --> 09:41.680
那我们在这个里面

09:41.680 --> 09:43.580
就可以来做一个什么呢

09:43.580 --> 09:44.580
进行一个附用

09:44.580 --> 09:46.780
因为他也存在这个layout里面

09:46.780 --> 09:47.280
对不对

09:47.280 --> 09:48.680
因为我们之前定义的时候

09:48.680 --> 09:50.280
这里面有一个bid layout

09:50.280 --> 09:52.280
bid layout里面有这个less

09:52.280 --> 09:54.480
那这个less里面就有一个悶content的

09:54.480 --> 09:55.980
因为你存在这个里面

09:55.980 --> 09:57.880
那我们也没设置其他作用约

09:57.880 --> 09:58.680
那这个时候呢

09:58.680 --> 10:01.280
他就会实现一个样式的附用啊

10:01.280 --> 10:03.180
所以说我们样式只要写一遍

10:03.180 --> 10:03.680
而且呢

10:03.680 --> 10:05.080
我们样式啊

10:05.080 --> 10:05.980
也不纠结

10:05.980 --> 10:07.380
因为这个样式对我们来说

10:07.380 --> 10:08.780
也不是说一个

10:08.780 --> 10:10.580
实现他的一个重点

10:10.580 --> 10:11.680
重点我们看什么呢

10:11.680 --> 10:14.280
主要是看里面逻辑的一个实现

10:14.280 --> 10:15.480
首先来说第一部分

10:15.480 --> 10:17.580
因eat level least的

10:17.580 --> 10:18.980
那这个是什么意思

10:18.980 --> 10:19.980
我们这个可以想一下

10:19.980 --> 10:21.980
这个是不是我们初始化

10:21.980 --> 10:24.680
进行一个什么值级数据的获取

10:24.680 --> 10:25.180
对吧

10:25.180 --> 10:26.480
这里面给写一下

10:26.480 --> 10:27.680
值级数据获取

10:27.680 --> 10:28.780
你获取的时候

10:28.780 --> 10:30.380
通过我们dpatch

10:30.380 --> 10:32.980
调用敌瓦下面保存的

10:32.980 --> 10:35.380
leveleat level least的方法

10:35.380 --> 10:36.180
然后这里面呢

10:36.180 --> 10:37.380
传递一些值

10:37.380 --> 10:38.380
同学们还记不记得

10:38.380 --> 10:40.380
这个page.current从哪来呢

10:40.380 --> 10:42.280
就是我们自定义的一个

10:42.280 --> 10:44.380
hook给导出的一个内容

10:44.380 --> 10:44.980
对不对

10:44.980 --> 10:47.980
那这里面就有一个page

10:47.980 --> 10:49.080
跟side page

10:49.080 --> 10:50.480
我们拿回来进行使用

10:50.480 --> 10:51.880
使用他的原因是什么呢

10:51.880 --> 10:53.080
因为我们这里面啊

10:53.080 --> 10:54.580
实现他是使用

10:54.580 --> 10:57.280
youtse ief来实现的

10:57.280 --> 10:58.480
这个youtse ief

10:58.480 --> 10:59.480
我们要指导一下

10:59.480 --> 11:01.680
他不光是可以获取道姆对象

11:01.680 --> 11:02.280
对不对

11:02.280 --> 11:04.680
可以获取道姆对象

11:04.780 --> 11:06.480
还有一个功能就是什么

11:06.480 --> 11:09.480
获取我们缓存的内容

11:09.480 --> 11:11.380
也就是说你直接修改内容

11:11.380 --> 11:12.880
我们可以通过youtse ief

11:12.880 --> 11:15.080
马上来进行一个获取啊

11:15.080 --> 11:16.480
就是这么一个功能

11:16.480 --> 11:16.880
之后呢

11:16.880 --> 11:19.280
传一些快data和这个side

11:19.280 --> 11:21.480
当这个快data出手的话的时候

11:21.480 --> 11:23.180
他是没有的啊

11:23.180 --> 11:23.580
因为什么

11:23.580 --> 11:25.480
我data给了一个空对吧

11:25.480 --> 11:26.180
什么时候有

11:26.180 --> 11:27.380
当你进行搜索的时候

11:27.380 --> 11:28.580
是不是就进行添加了

11:28.580 --> 11:28.780
对吧

11:29.980 --> 11:31.280
一次的是我们什么呢

11:31.280 --> 11:32.480
table header啊

11:32.480 --> 11:33.980
这里面中规中矩啊

11:33.980 --> 11:36.280
和我们原来的制作方式非常像

11:36.280 --> 11:38.080
因为这个table header呢

11:38.080 --> 11:39.580
他是一个公共组件

11:39.580 --> 11:40.680
我们可以找一下

11:40.680 --> 11:42.680
把他给拿过来

11:42.680 --> 11:44.080
给他进行一个打开

11:44.080 --> 11:44.980
咱们来看一下

11:44.980 --> 11:46.280
这个就是common

11:47.480 --> 11:48.280
complements啊

11:49.580 --> 11:52.380
complements文件加下面的

11:52.380 --> 11:54.480
我们的一个什么的table header

11:54.480 --> 11:55.780
这里面找一下

11:55.780 --> 11:56.980
好找到他之后

11:56.980 --> 11:58.480
咱们给他做一个打开啊

11:58.480 --> 11:59.980
这个table header呢

11:59.980 --> 12:02.880
他主要是接收了一些状态

12:02.880 --> 12:04.780
也就是说把一些需要的状态

12:04.780 --> 12:05.680
这个状态呢

12:05.680 --> 12:07.180
在每个界面里面啊

12:07.180 --> 12:08.380
都是需要传递的

12:08.380 --> 12:10.380
也就是说你只要使用table header

12:10.380 --> 12:12.980
那这里面你都进行对他的一个传递

12:12.980 --> 12:14.080
那你对他传递的时候

12:14.080 --> 12:15.580
这里面你就要想想

12:15.580 --> 12:16.780
比如说page

12:16.780 --> 12:18.580
那他就可以实现一个附用啊

12:18.580 --> 12:20.180
比如说这个page

12:20.180 --> 12:22.880
如果说你传递过来的是这个2

12:22.880 --> 12:24.280
那我就展示第二页

12:24.280 --> 12:25.880
是不是就就是这个位置

12:25.880 --> 12:26.480
对不对

12:26.480 --> 12:26.880
他呢

12:26.880 --> 12:28.680
就是在你使用的时候

12:28.680 --> 12:30.580
每一个组件都是不一样的啊

12:30.580 --> 12:31.980
然后size啊 total

12:31.980 --> 12:33.380
但是他处理起来啊

12:33.380 --> 12:35.880
所有的功能都是完全一致的

12:35.880 --> 12:36.580
那这个时候

12:36.580 --> 12:39.080
比如说我们这个改变的时候

12:39.080 --> 12:39.880
改变的时候

12:39.880 --> 12:41.280
我们有一个回调

12:41.280 --> 12:41.680
对不对

12:41.680 --> 12:43.880
这里面就是音译他levels的

12:43.880 --> 12:47.680
那我们之前在staff里面写的是音译的staff啊

12:48.780 --> 12:49.980
这个我们知道一下

12:49.980 --> 12:51.980
还有一个open add dialog

12:51.980 --> 12:53.080
open add dialog呢

12:53.080 --> 12:56.180
就是打开我们当前组件里面定义的

12:56.180 --> 12:57.680
一个dialogue状态

12:57.680 --> 12:58.180
然后呢

12:58.180 --> 13:00.580
开启我们那个dialogue弹窗

13:00.580 --> 13:04.380
之后这里面有一个interface delete my sir的

13:04.380 --> 13:06.480
interface delete my sir的做什么用

13:06.480 --> 13:08.980
就是当你想进行删除的时候

13:08.980 --> 13:11.980
你是不是可以调用我们这个指定的方法

13:11.980 --> 13:12.780
那这个里面

13:12.780 --> 13:13.380
他呢

13:13.380 --> 13:16.380
主要作用就是对删除进行一个操作啊

13:16.380 --> 13:17.580
是一个可付用组件

13:17.580 --> 13:18.680
这个没啥好说的

13:18.680 --> 13:20.780
就是展示我们上面的内容啊

13:21.880 --> 13:22.780
像下面这些

13:22.780 --> 13:24.180
比如说set container

13:24.180 --> 13:25.180
set container呢

13:25.180 --> 13:26.880
就是我们左边的搜索

13:26.880 --> 13:27.280
我们呢

13:27.280 --> 13:29.180
可以利用set container

13:29.180 --> 13:29.980
这个容器

13:29.980 --> 13:31.680
那set container这个容器

13:31.680 --> 13:33.180
他做了一件啥事啊

13:33.180 --> 13:34.280
这个里面

13:34.280 --> 13:34.880
他呢

13:34.880 --> 13:37.880
会有一些这个公共的处理

13:37.880 --> 13:39.080
什么样的公共处理

13:39.080 --> 13:40.480
比如说我们对这个

13:40.480 --> 13:42.880
当前搜索条件的一个清空

13:42.880 --> 13:45.080
那在这个set container里面

13:45.080 --> 13:46.580
他就做了一件这个事

13:46.580 --> 13:47.980
比如说我们clear form

13:49.580 --> 13:51.080
当你clear form的时候

13:51.080 --> 13:53.480
是不是把整个的这个表达的状态

13:53.480 --> 13:55.680
咱们是不是都给他做了一个清空啊

13:55.680 --> 13:56.280
然后呢

13:56.280 --> 13:57.880
如果说你要清空了

13:57.880 --> 13:58.880
那我这个时候呢

13:58.880 --> 14:02.280
我就可以针对我们当前的这个界面

14:02.280 --> 14:03.980
来重新的进行一个什么

14:03.980 --> 14:04.480
渲染

14:04.480 --> 14:05.580
那这个是怎么做的

14:05.580 --> 14:06.780
我们可以看一下

14:06.780 --> 14:09.080
filter compartment过滤的时候

14:09.080 --> 14:09.880
过滤的时候

14:09.880 --> 14:11.680
其实他这个里面

14:11.680 --> 14:13.880
是坚定了eath clear form

14:13.880 --> 14:15.780
如果说你要是有值啊

14:15.780 --> 14:16.780
eath clear form

14:16.780 --> 14:18.680
假如说你为粗的话

14:18.680 --> 14:19.380
清空的时候

14:19.380 --> 14:20.680
你是不是给他一个错

14:20.680 --> 14:21.680
如果说为粗

14:21.680 --> 14:24.380
那我们把表单给做一个清空

14:24.380 --> 14:24.980
之后呢

14:24.980 --> 14:27.080
我们重新去渲染界面

14:27.080 --> 14:29.280
就是调用了一个reload的方法

14:29.280 --> 14:30.280
reload的方法呢

14:30.280 --> 14:33.480
这个是我们从前端给他进行一个副组件

14:34.380 --> 14:36.280
给他进行一个传递的

14:37.080 --> 14:38.280
这么一个reload的

14:38.280 --> 14:39.880
reload的做一个啥事

14:39.880 --> 14:41.880
把这个配置改变为dear

14:41.880 --> 14:42.680
之后呢

14:42.680 --> 14:44.480
把我们这个出手啊的数据

14:44.480 --> 14:46.480
这个方法重新调用一下

14:46.480 --> 14:46.980
这个呢

14:46.980 --> 14:48.280
就是他的一个功能啊

14:48.280 --> 14:49.980
然后这个里面的搜索

14:49.980 --> 14:51.780
他也支持病情搜索

14:51.780 --> 14:52.180
但是呢

14:52.180 --> 14:53.780
这个里面啊

14:53.780 --> 14:55.280
相对是比较简单的

14:55.280 --> 14:56.980
没有我们员工搜索

14:56.980 --> 14:57.780
那样复杂

14:57.780 --> 15:00.380
因为我们那个里面有下拉菜单

15:00.380 --> 15:02.380
还有我们这个员工啊

15:02.380 --> 15:04.380
包括我们的员工部门

15:04.380 --> 15:05.780
还有直级的一个选择

15:05.780 --> 15:06.580
都在这个里面

15:06.580 --> 15:07.380
但是这个呢

15:07.380 --> 15:08.780
相对比较简单了

15:08.780 --> 15:10.180
可以重复搜索

15:10.180 --> 15:11.280
那我们直接的这个啊

15:11.280 --> 15:11.980
可以啊

15:11.980 --> 15:13.380
附合性的一个搜索

15:13.380 --> 15:14.780
比如说我们t3-2

15:14.780 --> 15:16.280
那现在是不是就找到他了

15:16.280 --> 15:17.280
找到他之后

15:17.280 --> 15:19.580
这个时候我们配漏的传的是什么

15:19.580 --> 15:20.480
level name

15:20.480 --> 15:22.780
那我们还可以对直级描述

15:22.780 --> 15:23.680
做一个什么呢

15:23.680 --> 15:25.480
添加这里面出级

15:25.480 --> 15:27.080
哎 这没有是吧

15:27.080 --> 15:28.480
那这个应该怎么做

15:28.480 --> 15:29.680
我们直接的这个

15:29.680 --> 15:32.680
应该是给他一个详细的秒触

15:32.680 --> 15:33.580
出级工程师

15:33.580 --> 15:34.980
那这时候是不是就有了

15:34.980 --> 15:37.080
所以说你可以根据这两个条件

15:37.080 --> 15:37.580
然后呢

15:37.580 --> 15:38.680
我们可以添加一个

15:38.680 --> 15:41.280
或者是你多条件进行一个联合搜索

15:41.280 --> 15:43.080
这个是都可以的啊

15:43.080 --> 15:44.380
然后你想做的时候

15:44.380 --> 15:45.880
比如说我们这个清空了

15:45.880 --> 15:46.580
那怎么办呢

15:46.580 --> 15:48.480
你可以把这个

15:48.480 --> 15:51.380
监听一下他的清空的一个表单

15:51.380 --> 15:51.880
之后呢

15:51.880 --> 15:54.080
我们重新的进行一个处罚

15:54.080 --> 15:54.980
是不是也可以

15:54.980 --> 15:55.880
当我这里没做啊

15:55.880 --> 15:57.380
我这里面主要做的是什么呢

15:57.380 --> 15:59.180
我点击这个清宽鸟之后

15:59.180 --> 16:01.980
让他的这个表单进行一个重置

16:01.980 --> 16:03.480
如果说你没有这个功能的话

16:03.480 --> 16:05.080
那我们最好是什么呢

16:05.080 --> 16:07.680
把这个清空的这个标识啊

16:07.680 --> 16:08.980
你可以给他干掉

16:08.980 --> 16:10.180
假如说你要不做的话

16:10.180 --> 16:12.680
那当然了你也可以做啊

16:12.680 --> 16:13.780
我们这里面是

16:13.780 --> 16:15.080
all the clear

16:15.080 --> 16:16.080
那我把它干掉

16:16.080 --> 16:17.480
这个时候呢就没有啊

16:17.480 --> 16:18.580
我们看一下

16:18.580 --> 16:20.780
t3-2

16:20.780 --> 16:23.480
来这里面t3-2

16:23.480 --> 16:24.680
OK使用的时候

16:24.680 --> 16:25.780
那这里没有清空了

16:25.780 --> 16:26.280
对不对

16:26.280 --> 16:27.280
那这个时候呢

16:27.280 --> 16:28.180
如果说我清空了

16:28.180 --> 16:30.880
那你这时候才是点击上面按钮啊

16:30.880 --> 16:32.180
才是真正的清空啊

16:33.480 --> 16:33.780
好的

16:33.780 --> 16:35.880
这个就是搜索的一个逻辑啊

16:35.880 --> 16:37.580
搜索相对比较简单的

16:37.580 --> 16:38.180
然后呢

16:38.180 --> 16:39.780
我们再来继续说啊

16:39.780 --> 16:40.780
除了搜索之外

16:40.780 --> 16:42.080
我们还有什么呢

16:42.080 --> 16:42.880
接下来呢

16:42.880 --> 16:44.880
就是这个来往太保

16:44.880 --> 16:45.680
也就是说

16:45.680 --> 16:48.380
对这个我们主介面里面的

16:48.380 --> 16:49.780
表格的一个处理啊

16:49.780 --> 16:51.180
咱们可以看一下

16:51.180 --> 16:52.380
那这个表格处理呢

16:52.380 --> 16:53.780
我们传递两个参数

16:53.780 --> 16:55.180
一个是level list的

16:55.180 --> 16:55.980
还有一个呢

16:55.980 --> 16:57.480
就是reloaded page

16:57.480 --> 16:58.480
reloaded page啊

16:58.480 --> 16:58.980
这个呢

16:58.980 --> 16:59.980
我们可以看一下

16:59.980 --> 17:01.080
其实它和原来

17:01.080 --> 17:03.480
我们使用的时候是完全一致的啊

17:03.480 --> 17:04.280
level list的

17:04.280 --> 17:06.480
就是作为数据宣展啊

17:06.480 --> 17:07.480
reloaded page呢

17:07.480 --> 17:10.080
就是当我们去进行直击修改

17:10.080 --> 17:12.480
因为我们这个表格有一个特点是什么呢

17:12.480 --> 17:13.480
我们在这个里面

17:13.480 --> 17:15.080
可以对它直接进行修改的

17:15.080 --> 17:17.880
比如说我们这里面修改一个t3-2

17:19.380 --> 17:20.480
OK那这个时候呢

17:20.480 --> 17:21.680
它就修改完成了

17:21.680 --> 17:22.680
当你修改完成之后

17:22.680 --> 17:23.280
那这个时候

17:23.280 --> 17:25.780
我们是不是得重新去渲染一下界面

17:25.780 --> 17:26.980
那这个渲染界面呢

17:26.980 --> 17:29.380
就不需要我们指定配置了

17:29.380 --> 17:30.180
为什么呢

17:30.180 --> 17:32.280
如果说你在第二页修改

17:32.280 --> 17:35.980
那你可能是我们这里面t1-4

17:36.580 --> 17:39.380
这里面我们把它修改为一个t1-6

17:39.380 --> 17:40.480
那你在这个时候

17:40.480 --> 17:42.580
其实是不是就是在第二页修改

17:42.580 --> 17:43.680
那在第二页修改

17:43.680 --> 17:44.480
我们对应的

17:44.480 --> 17:46.380
是不是直接展示的时候

17:46.380 --> 17:47.680
现在是哪一页

17:47.680 --> 17:49.480
那你直接的就展示哪一页

17:49.480 --> 17:50.380
是不是就可以了

17:50.380 --> 17:50.780
这个呢

17:50.780 --> 17:53.080
就是我们的一个处理逻辑啊

17:53.080 --> 17:55.580
然后在这个table里面

17:55.580 --> 17:57.580
我们主要的使用的时候

17:57.580 --> 17:59.180
和我们之前啊

17:59.180 --> 18:00.580
做这个渲染的时候

18:00.580 --> 18:01.480
是非常相似的

18:01.480 --> 18:04.280
但是这个里面内容相对是比较少的

18:04.280 --> 18:05.180
复用的组件

18:05.180 --> 18:06.480
我们不做任何处理

18:06.480 --> 18:09.880
比如说我们这个adb row和adb sale

18:09.880 --> 18:10.980
原来是怎么使用

18:10.980 --> 18:11.780
那我们现在呢

18:11.780 --> 18:13.980
还是怎么来进行使用就OK了

18:14.980 --> 18:16.580
这里面围图不区别啊

18:16.580 --> 18:17.580
有一个是什么呢

18:17.580 --> 18:19.180
就是我们的这个clomps

18:19.180 --> 18:19.980
clomps呢

18:19.980 --> 18:21.180
其实每一个都不一样

18:21.180 --> 18:22.480
比如说我们对这个

18:22.580 --> 18:23.880
直接的处理啊

18:23.880 --> 18:26.580
像这个里面渲染的自断不一样

18:26.580 --> 18:27.880
所以说你这个里面啊

18:27.880 --> 18:28.680
要提前呢

18:28.680 --> 18:29.980
去更改一下

18:29.980 --> 18:31.480
也就是说在你制作的时候

18:31.480 --> 18:33.280
因为我们那个stuff

18:33.280 --> 18:35.480
他做的员工的里面

18:35.480 --> 18:36.080
渲染的

18:36.080 --> 18:36.980
比如说第一个

18:36.980 --> 18:37.980
他渲染的是

18:38.780 --> 18:40.780
我们的这个yodername对不对

18:40.780 --> 18:42.080
那这个里面我们渲染

18:42.080 --> 18:43.780
肯定不能渲染yodername了

18:43.780 --> 18:45.280
我们要渲染一个什么呢

18:45.280 --> 18:47.080
把这个recode啊

18:47.080 --> 18:48.480
这个记录给他

18:48.480 --> 18:49.680
来进行一个渲染

18:49.680 --> 18:51.480
因为他这个里面啊

18:51.480 --> 18:51.980
是什么呢

18:51.980 --> 18:53.680
就是这个levelname对不对

18:53.680 --> 18:55.780
那其实你选的就是这个levelname啊

18:57.080 --> 18:58.680
然后直击描述这些

18:58.680 --> 18:59.880
这里面多了一个内容

18:59.880 --> 19:00.780
我跟同学们说一下

19:00.780 --> 19:02.880
我这里面给同学们添加了一个souter

19:02.880 --> 19:03.480
souter呢

19:03.480 --> 19:05.280
就是对他进行一个排序啊

19:05.280 --> 19:06.280
什么意思

19:06.280 --> 19:07.080
比如说你看啊

19:07.080 --> 19:09.980
我们这个右边是没有一个三角号的

19:09.980 --> 19:10.580
那这个呢

19:10.580 --> 19:12.780
可以有一个生序和降序的

19:12.780 --> 19:14.380
这么一个排序处理

19:14.380 --> 19:15.680
我们可以点击他

19:15.680 --> 19:18.280
对他一个生序降序的处理啊

19:18.280 --> 19:18.780
这个里面

19:18.780 --> 19:20.380
你看这个时候点击

19:20.380 --> 19:21.580
是不是就有效果对吧

19:22.680 --> 19:25.080
就是添加了这么一个内容啊

19:25.080 --> 19:27.580
然后如果说你要是不想要这个东西啊

19:27.580 --> 19:28.480
也可以啊

19:28.480 --> 19:31.380
那我们直接就把他给干掉就可以了啊

19:31.380 --> 19:33.480
都可以看你的这个需求啊

19:33.480 --> 19:35.380
然后如果说你想要他的话

19:35.380 --> 19:37.580
那我们这里面生序降序

19:37.580 --> 19:40.880
那你们就是可以自行的来做一个处理啊

19:40.880 --> 19:43.580
我这里面a生序降序是不是都有

19:43.580 --> 19:44.180
对吧

19:44.180 --> 19:46.180
这个可以查看API文档啊

19:46.180 --> 19:47.580
我们通过API文档啊

19:47.580 --> 19:49.980
可以来进行自己的一些逻辑添加

19:49.980 --> 19:51.580
和定义啊

19:51.580 --> 19:52.480
其他的没有了

19:52.480 --> 19:52.980
之后呢

19:52.980 --> 19:54.980
还是传递我们这个COL

19:56.280 --> 19:58.580
包括我们的一些验证规则

19:58.580 --> 20:00.780
都是在这个里面进行一个传递

20:00.780 --> 20:02.080
就ok了

20:02.080 --> 20:04.180
我们继续往下说啊

20:04.180 --> 20:06.480
然后这个表格处理完成之后呢

20:06.480 --> 20:07.280
那咱们再来看

20:07.280 --> 20:08.980
这里面有一个Dialogue

20:08.980 --> 20:09.580
Dialogue呢

20:09.580 --> 20:12.380
就是对这个新增直级的一个处理

20:12.380 --> 20:14.280
如果说你觉得他这个结构啊

20:14.280 --> 20:16.080
你想往后放放也可以

20:16.080 --> 20:17.280
但是我们这个里面啊

20:17.280 --> 20:18.180
其实往后放

20:18.180 --> 20:20.880
不往后放的这个实际意义不大了

20:20.880 --> 20:21.480
因为什么呢

20:21.480 --> 20:23.480
我们这两个都是一个弹床对不对

20:23.480 --> 20:25.980
那只不过是他的一个引用纤红顺旋

20:25.980 --> 20:28.580
这个就是我们的一个新增直级的处理

20:28.580 --> 20:29.380
这个表格啊

20:29.380 --> 20:30.980
相对我们的这个员工

20:30.980 --> 20:32.380
咱们可以来看一下

20:32.380 --> 20:34.180
当时我们处理员工的时候

20:35.580 --> 20:37.280
如果说我们进行员工创建

20:37.280 --> 20:38.280
是不是有这么多

20:38.280 --> 20:38.780
而且呢

20:38.780 --> 20:41.180
这里面设计到好多的一些

20:41.180 --> 20:42.680
比较复杂的这个组件

20:42.680 --> 20:44.680
像这个部门的一个定义

20:44.680 --> 20:45.180
那这个呢

20:45.180 --> 20:47.280
都是我们一步一步经历过来的

20:47.380 --> 20:48.680
这里面就不会设计到了

20:48.680 --> 20:50.280
然后像这种图片

20:50.280 --> 20:51.680
图片我们是不是也得处理

20:51.680 --> 20:52.280
对不对

20:52.280 --> 20:55.080
但是我们最这个直级这一块

20:55.080 --> 20:56.080
相对呢

20:56.080 --> 20:57.980
就是简单的狠啊

20:57.980 --> 20:59.880
我们直级创建的时候

20:59.880 --> 21:02.180
只要是一个基本的表格就可以了

21:02.180 --> 21:03.280
那这个基本的表格

21:03.280 --> 21:04.080
我们怎么来做

21:04.080 --> 21:05.880
咱们知道这个里面啊

21:05.880 --> 21:06.980
一二三四

21:06.980 --> 21:08.880
肯定是一共六个对不对

21:08.880 --> 21:09.380
六个呢

21:09.380 --> 21:11.180
如果说你觉得可以

21:11.180 --> 21:12.980
我们直接写下来也ok

21:12.980 --> 21:13.880
或者说呢

21:13.880 --> 21:15.880
我们为了代码的统一线

21:15.880 --> 21:16.680
怎么办呢

21:16.680 --> 21:18.480
我们这个里面就可以定一个

21:18.480 --> 21:20.380
死呆的一个list

21:20.380 --> 21:22.480
也就是说搞一个静态数据

21:23.680 --> 21:25.980
这里面我们创建了一个level list的

21:25.980 --> 21:28.680
也是以大数组嵌套二维数组

21:28.680 --> 21:31.280
这种形式来进行一个定义

21:31.280 --> 21:31.880
每一行呢

21:31.880 --> 21:35.680
就是代表的它展示的要一个内容啊

21:35.680 --> 21:38.080
然后这里面有一些音译的外表啊

21:38.080 --> 21:40.580
包括我们的这个label text的

21:40.580 --> 21:43.380
提前呢给它进行一个写入

21:43.380 --> 21:43.780
之后

21:43.780 --> 21:45.580
那我们在这个里面

21:45.580 --> 21:47.180
也就是说在这个

21:48.180 --> 21:49.480
create level里面

21:49.480 --> 21:50.580
这个咱就不说了

21:50.580 --> 21:53.280
对二框每一个都是非常一致的啊

21:53.280 --> 21:55.380
你直接的就是这样写就可以了

21:55.380 --> 21:57.180
如果说你想让它宽度加长点

21:57.180 --> 21:59.680
像我这个我就给了一个850对不对

21:59.680 --> 22:00.680
主要看什么呢

22:00.680 --> 22:02.480
就是我们的这个create level

22:02.480 --> 22:05.480
因为它属于当前level组件里面自己啊

22:05.480 --> 22:06.880
一个私有的组件

22:06.880 --> 22:08.080
我们可以来看一下

22:08.080 --> 22:09.980
这个里面相对比较简单

22:09.980 --> 22:11.880
没有什么太复杂的内容

22:11.880 --> 22:12.480
首先呢

22:12.480 --> 22:14.980
这里面其实也没有什么检测的

22:14.980 --> 22:16.580
就是一个unfinished

22:16.580 --> 22:18.280
如果说你表单通过之后

22:18.280 --> 22:20.580
那我们直接就去进行

22:20.580 --> 22:22.480
创建直辑的这样一个操作

22:22.480 --> 22:23.280
是不是就可以了

22:23.280 --> 22:24.880
就这么一步操作啊

22:24.880 --> 22:27.580
成功之后reload一下配置之后呢

22:27.580 --> 22:30.680
我们设置一下dialog的一个状态

22:30.680 --> 22:31.180
最后呢

22:31.180 --> 22:32.380
把表单给做一个

22:33.380 --> 22:33.980
重置

22:33.980 --> 22:34.580
那这些呢

22:34.580 --> 22:36.080
就是它的整个的一个

22:37.080 --> 22:38.680
功能的实现啊

22:38.680 --> 22:39.980
这里面需要两个状态

22:39.980 --> 22:41.280
一个reload的配置

22:41.280 --> 22:41.880
还有一个呢

22:41.880 --> 22:44.480
就是我们设置这个dialog的一个状态

22:44.480 --> 22:45.580
当你添加完成之后

22:45.580 --> 22:46.780
那这个时候它就没有了

22:46.780 --> 22:47.280
对吧

22:47.280 --> 22:48.380
我们新增一个直辑

22:48.380 --> 22:50.580
比如说我们t5-2

22:50.580 --> 22:52.080
这里面写一个t5-2

22:52.080 --> 22:53.480
但这个具体添什么

22:53.480 --> 22:55.780
你这个要跟你的产品啊

22:55.780 --> 22:57.280
在真实开发过程当中

22:57.280 --> 22:58.580
会有一个硬设表的

22:58.580 --> 22:59.880
我们这里面就随便添了

22:59.880 --> 23:00.680
直辑描述

23:00.680 --> 23:01.380
这个是什么

23:01.380 --> 23:04.280
web高级工程师

23:06.080 --> 23:07.180
最后考核要求

23:07.180 --> 23:07.980
考核要求

23:07.980 --> 23:09.980
你看我这里面A3A1

23:09.980 --> 23:11.280
然后这里面我写一个什么

23:11.280 --> 23:12.080
A2

23:12.080 --> 23:13.280
随便写一个

23:13.280 --> 23:13.980
A2

23:15.580 --> 23:16.380
写一个大写的

23:16.380 --> 23:17.480
A2好了

23:17.480 --> 23:18.380
定义完成之后

23:18.380 --> 23:19.280
面试要求呢

23:19.280 --> 23:21.280
我们写一个A4

23:21.280 --> 23:24.680
之后分红全配基数100

23:24.680 --> 23:25.780
对应直级分数

23:25.780 --> 23:27.080
我们给一个60

23:27.080 --> 23:27.580
好吧

23:27.580 --> 23:29.580
这里面你就创建一个就可以了

23:29.580 --> 23:30.180
那现在呢

23:30.180 --> 23:32.080
我们这里面就定一个t5-2

23:32.080 --> 23:33.180
如果说你想改一下

23:33.180 --> 23:34.580
改成这个大写的

23:34.580 --> 23:36.080
那我们直接就在这个里面

23:36.080 --> 23:37.380
t5-2是不是

23:37.380 --> 23:38.580
也可以进修改

23:38.580 --> 23:40.280
或者说你直接在这个里面改

23:40.280 --> 23:41.180
是不是也可以啊

23:41.180 --> 23:41.780
对吧

23:41.780 --> 23:42.580
都可以啊

23:42.580 --> 23:44.980
因为它这个表格相对还是比较灵活的

23:44.980 --> 23:45.580
这个呢

23:45.580 --> 23:46.880
是比较简单的

23:46.880 --> 23:48.080
跟我们员工比啊

23:48.080 --> 23:48.480
复杂度

23:48.480 --> 23:49.480
如果说员工的话

23:49.480 --> 23:50.680
可以理解为百分之百

23:50.680 --> 23:51.180
那这个呢

23:51.180 --> 23:52.480
百分之五十的舞蹈了

23:52.480 --> 23:52.780
所以说

23:52.780 --> 23:54.180
同学们可以自己啊

23:54.180 --> 23:57.080
去试着用自己的这个想法

23:57.080 --> 23:58.080
尝试一下

23:58.080 --> 23:59.880
而不是说看那码来实现啊

24:01.280 --> 24:01.580
好的

24:01.580 --> 24:02.880
这个level这一块

24:02.880 --> 24:04.280
咱们就说到这里

24:04.280 --> 24:05.180
那么接下来呢

24:05.180 --> 24:06.080
就是什么呢

24:06.080 --> 24:07.080
我们的这个啊

24:07.080 --> 24:08.980
刚才咱们说的这个新增的这个

24:08.980 --> 24:10.280
就说到这个里面

24:10.280 --> 24:10.680
然后呢

24:10.680 --> 24:11.880
接下来最后一块

24:11.880 --> 24:13.580
就是我们的这个

24:13.580 --> 24:15.380
侧边蓝的这个抽屉啊

24:15.380 --> 24:17.280
当我点击详情的时候

24:17.280 --> 24:19.680
那他这个处罚点在哪啊

24:19.680 --> 24:21.280
处罚点就在表格里面

24:21.280 --> 24:22.180
表格呢

24:22.180 --> 24:24.180
我们会往里面回传

24:24.180 --> 24:25.080
回传的时候

24:25.080 --> 24:27.080
咱们可以看这个level table

24:27.080 --> 24:28.480
这里面有一个什么呢

24:28.480 --> 24:30.780
我们的这个Halendel C5

24:30.780 --> 24:32.580
Halendel C5是修改直辑啊

24:32.580 --> 24:35.080
然后这里面还有一个guide level detail

24:35.080 --> 24:35.680
对不对

24:35.680 --> 24:38.580
你在guide level detail里面的时候

24:38.580 --> 24:40.480
你是不是会有一个处罚

24:40.480 --> 24:42.680
这个打开的这么一个过程

24:42.680 --> 24:43.080
对吧

24:44.480 --> 24:45.980
我们这个guide level detail

24:45.980 --> 24:48.380
处罚打开的这么一个过程的时候

24:48.380 --> 24:48.780
然后呢

24:48.780 --> 24:51.680
你把这个右侧的表格给进行一个

24:51.680 --> 24:53.180
打开就可以了

24:53.180 --> 24:53.880
打开之后

24:53.880 --> 24:55.280
那我们这个时候呢

24:55.280 --> 24:57.080
看到的就是我们里面

24:57.080 --> 24:59.480
其实他这个内容啊

24:59.480 --> 25:01.380
如果说你不做这个侧边蓝啊

25:01.380 --> 25:02.380
抽屉也可以

25:02.380 --> 25:04.480
但是我为了统一性就做了一个

25:04.480 --> 25:06.280
他和这个里面展示内容

25:06.280 --> 25:07.880
基本完全一致啊

25:07.880 --> 25:09.280
里面主要实现功能了

25:09.280 --> 25:10.980
因为我们这里面附用了

25:10.980 --> 25:12.680
我们的driver组架啊

25:12.680 --> 25:14.380
也就是说这个抽屉组架

25:14.380 --> 25:16.980
那这个抽屉组架里面像这种删除啊

25:16.980 --> 25:17.480
原来呢

25:17.480 --> 25:18.780
我们都已经定义好了

25:18.780 --> 25:21.080
你在这个里面直接来进行使用就可以了

25:21.080 --> 25:21.680
对不对

25:21.680 --> 25:23.480
只不过是你在传递的时候

25:23.480 --> 25:25.180
比如说我们这个interface name

25:25.180 --> 25:27.280
我们给他一个delete level

25:27.280 --> 25:28.080
那这样呢

25:28.080 --> 25:30.180
就是说代表着我们想删除

25:30.180 --> 25:31.780
当前的这条level值

25:31.780 --> 25:32.580
是不是就这意思

25:32.580 --> 25:32.980
对吧

25:34.180 --> 25:36.980
然后给他传递id和title啊

25:36.980 --> 25:38.580
至于里面宣的内容

25:38.580 --> 25:40.580
这个里面有一个level detail

25:40.580 --> 25:41.580
level detail

25:41.580 --> 25:43.580
这个里面功能也是

25:44.880 --> 25:47.880
和这个跟我们这个员工里面比啊

25:47.880 --> 25:49.380
也是相对比较简单的

25:49.380 --> 25:51.280
你就是提前给他进行一个渲染

25:51.280 --> 25:52.080
然后呢

25:52.080 --> 25:54.080
就是可以进行一个什么呢

25:54.080 --> 25:55.980
我们直接的在这个里面

25:55.980 --> 25:58.380
进行对他的一个修改

25:58.380 --> 25:59.380
是不是就可以了

25:59.380 --> 26:00.280
修改的时候

26:00.280 --> 26:02.480
我们这个循环还是用的level list

26:02.480 --> 26:03.080
对吧

26:03.080 --> 26:05.180
也就是说我们定义好的那个静态数据

26:05.180 --> 26:05.780
因为这样呢

26:05.780 --> 26:07.580
我们可以大量的实现附用啊

26:07.580 --> 26:08.880
所以说你就会发现

26:08.880 --> 26:10.280
在慢慢使用过程当中

26:10.280 --> 26:11.180
组件啊

26:11.180 --> 26:12.580
其实他是附用性

26:12.580 --> 26:14.480
是他的一个最大特点

26:14.480 --> 26:15.980
如果说你就使用一次啊

26:15.980 --> 26:16.780
那实际上

26:16.780 --> 26:18.080
我们抽取组件的意义

26:18.080 --> 26:18.780
是不是就不大了

26:18.780 --> 26:19.180
对吧

26:20.480 --> 26:21.280
在这个里面

26:21.280 --> 26:23.880
我们去修改的时候

26:23.880 --> 26:24.680
那这个时候呢

26:24.680 --> 26:27.680
就会处罚他的一个安博罗尔事件

26:27.680 --> 26:28.780
安博罗尔事件

26:28.780 --> 26:30.680
我们这里面有一个trade form

26:30.680 --> 26:31.780
你去检查

26:31.780 --> 26:33.480
检测的这个

26:33.480 --> 26:34.080
做的啊

26:34.080 --> 26:35.180
相对也是比较简单

26:35.180 --> 26:35.980
因为什么呢

26:35.980 --> 26:37.980
我们这个里面只需要检测

26:37.980 --> 26:40.480
我们修改的这个名字和原来是否一致

26:40.480 --> 26:41.680
如果说是一致

26:41.680 --> 26:42.880
那我们失去焦点的时候

26:42.880 --> 26:44.080
你不做任何事情

26:44.080 --> 26:45.780
让他默默的给他这个

26:45.780 --> 26:47.180
没有任何感觉

26:47.180 --> 26:48.680
无感是的给他阻止掉

26:48.680 --> 26:49.680
是不是就OK了

26:49.680 --> 26:51.080
假如说你真正的修改了

26:51.080 --> 26:53.080
比如说我们这里面t5-3了

26:54.380 --> 26:55.180
那这个时候呢

26:55.180 --> 26:56.580
你再处罚去修改

26:56.580 --> 26:57.580
是不是就可以了

26:57.580 --> 26:58.780
处罚修改的时候

26:58.780 --> 27:01.280
我们这里面update level detail

27:01.280 --> 27:03.080
然后给他一个提示

27:03.080 --> 27:04.980
是不是整个这个就处理完了

27:05.080 --> 27:05.580
对吧

27:05.580 --> 27:06.080
之后呢

27:06.080 --> 27:08.880
你把它这个guide level detail

27:08.880 --> 27:10.280
也就是说把这一部分

27:10.280 --> 27:11.780
和我们后面的这一部分

27:11.780 --> 27:13.780
都给同时进行一个修改

27:13.780 --> 27:14.680
就OK了

27:15.380 --> 27:16.380
以上这些呢

27:16.380 --> 27:19.580
就是我们level模块的相应制作

27:19.580 --> 27:21.280
其实level模块制作呢

27:21.280 --> 27:23.880
你可以对比一下我们的这个stuff

27:23.880 --> 27:25.080
他们里面啊

27:25.080 --> 27:27.080
实现的基本上

27:27.080 --> 27:28.680
使用的这个啊

27:28.680 --> 27:31.080
组件包括我们实现的逻辑啊

27:31.080 --> 27:32.580
都是完全一致的

27:32.580 --> 27:35.380
只不过是在这个level组件制作的时候

27:35.380 --> 27:38.380
他的复杂度降低了而已啊

27:38.380 --> 27:39.480
所以说同学们呢

27:39.480 --> 27:41.080
可以仔细看一下

27:41.080 --> 27:44.580
员工列表的这个相应的逻辑实现

27:44.580 --> 27:44.980
之后呢

27:44.980 --> 27:47.480
自己动手来实现一下level

27:47.480 --> 27:47.880
好的

27:47.880 --> 27:49.880
我们本节课就到这里

