WEBVTT

00:01.780 --> 00:06.780
各位同学大家好 这节课我们继续暗粒制作的一个课程学习

00:06.780 --> 00:11.780
那么本节课主要任务就是实现一个暗粒基本结构的搭建

00:11.780 --> 00:16.780
上节课我们也说过 我们的暗粒制作依托5米这个框架

00:16.780 --> 00:19.780
那么首先我们先了解一下5米JS

00:19.780 --> 00:22.780
这个就是它的官网访问地址

00:22.780 --> 00:29.780
同学们也可以以后经常的保存这个地址来进行一些API的一个查询

00:30.780 --> 00:32.780
现在我们一起来看一下

00:32.780 --> 00:38.780
一般的框架或者内裤在手页面的时候都会有一个产品的特性介绍

00:38.780 --> 00:44.780
那么在这里同样的5米也会对这个框架的特性做了一些说明

00:44.780 --> 00:46.780
首先就是它的可扩展性

00:46.780 --> 00:50.780
5米本身内置了一套完整的生命周期

00:50.780 --> 00:53.780
并且实现了这个插件化

00:53.780 --> 00:57.780
本身的内部功能也完全由插件实现

00:57.780 --> 01:02.780
并且也是支持外部插件的扩展来实现一些分层的需求

01:02.780 --> 01:05.780
第二个就是它的开箱即用这个特点

01:05.780 --> 01:10.780
它里面内置了路由构建以及部署测试这些功能

01:10.780 --> 01:14.780
我们在开发过程当中只需要依赖一个5米框架

01:14.780 --> 01:17.780
那就可以实现上手开发的这么一个需求

01:17.780 --> 01:22.780
并且它还提供针对React生态系统的一个插件集合

01:22.780 --> 01:26.780
包括我们使用到的一些常用的Hulk

01:26.780 --> 01:30.780
我们直接可以进行使用不需要再进行额外的处理

01:30.780 --> 01:35.780
像这些功能基本上都可以满足我们大部分的开发需求

01:35.780 --> 01:37.780
第三个就是它的一个企业级

01:37.780 --> 01:43.780
目前已经有好多线上的大厂成熟的项目在使用5米js

01:43.780 --> 01:45.780
还有一个就是它的一个路由功能

01:45.780 --> 01:51.780
它同时支持配置式的路由以及约定式的路由这两种形式

01:51.780 --> 01:53.780
这个我们可以理解为

01:53.780 --> 01:56.780
我们按着它的文档规定模式进行路由的一个创建

01:56.780 --> 02:01.780
或者说我们还可以通过自己自定义的方式进行路由的一个重构

02:01.780 --> 02:04.780
同时它还保持功能的一个完备性

02:04.780 --> 02:07.780
比如说动态路由的一个使用

02:07.780 --> 02:12.780
以及嵌套路由全线路由这些内容都是支持的

02:12.780 --> 02:16.780
最后一个就是面向未来这一部分的内容介绍

02:16.780 --> 02:23.780
就是说它这个框架在不断的跟紧最新的前端技术来进行版本的迭代更新

02:23.780 --> 02:28.780
所以我们不用担心一些其他的技术站或者是相关的插件的版本

02:28.780 --> 02:34.780
更新导致我们无法升级迭代当前的工程这样一个问题

02:34.780 --> 02:39.780
那这也保证了我们一个依托5米项目的一个可维护性

02:39.780 --> 02:42.780
以上这些就是5米js的一个特性介绍

02:42.780 --> 02:47.780
那么接下来我们就快速的实现一个5米js的应用

02:47.780 --> 02:55.780
并且我们这个搭建的5米js应用会持续的作为我们案例框架的一个开发基础

02:55.780 --> 02:58.780
我们可以看一下它的这个文档

02:58.780 --> 03:01.780
从这个文档里我们看它有几种形式

03:01.780 --> 03:04.780
第一种是我们手动创建一个5米应用

03:04.780 --> 03:10.780
第二种就是通过脚手架快速的进行一个5米js的一个应用搭建

03:10.780 --> 03:13.780
那在应用搭建的时候首先我们要注意几点

03:13.780 --> 03:18.780
如果说你觉得你的E2以及NPM的包管理器它的运行速度比较慢

03:18.780 --> 03:21.780
那这里面我们可以采用国内的进向源

03:21.780 --> 03:24.780
如果说你觉得E2和NPM的速度什么问题

03:24.780 --> 03:25.780
那怎么办呢

03:25.780 --> 03:28.780
我们直接就可以使用E2NPM命令

03:28.780 --> 03:31.780
不需要改变这个进向源的一个处理

03:31.780 --> 03:34.780
好的 那我们使用脚手架怎么办呢

03:34.780 --> 03:38.780
我们首先要创建一个空空路之后运行这个命令

03:38.780 --> 03:40.780
那我们就来试验一下

03:40.780 --> 03:43.780
在这个里面准备好我们当前的工程目录

03:43.780 --> 03:47.780
在这个工程目录里面我们开始使用脚手架的形式

03:47.780 --> 03:49.780
创建5米js的应用

03:49.780 --> 03:52.780
我在这个里面就来进行一下输入

03:52.780 --> 03:54.780
那输入命令呢

03:54.780 --> 03:56.780
这个里面非常的简单

03:56.780 --> 03:57.780
就是一句话就可以了

03:57.780 --> 04:04.780
我们使用E2可锐的AIT5米js

04:05.780 --> 04:08.780
直接的反斜杠叫5米杠APP

04:08.780 --> 04:12.780
跟大家说一下5米js它有两个版本

04:12.780 --> 04:14.780
分别是二版本以及三版本

04:14.780 --> 04:17.780
那我们在这个实现案例的过程当中

04:17.780 --> 04:19.780
使用这个三版本

04:19.780 --> 04:23.780
二版本跟三版本的一个区别是在路由的使用上

04:23.780 --> 04:26.780
以及我们一些语法规则上

04:26.780 --> 04:28.780
比如说我们现在使用的这个三版本

04:28.780 --> 04:32.780
它默认的是使用的TypeScript的

04:32.780 --> 04:34.780
不过呢我们案例里面

04:34.780 --> 04:35.780
涉及不到TypeScript的

04:35.780 --> 04:36.780
这个怎么办呢

04:36.780 --> 04:40.780
不要担心你直接的来进行js查语法的使用

04:40.780 --> 04:42.780
就OK了不用去考虑这个问题

04:42.780 --> 04:45.780
好的直接的不需要命令式的

04:45.780 --> 04:48.780
一键我们直接创建就OK了

04:48.780 --> 04:49.780
那创建OK之后

04:49.780 --> 04:51.780
这个呢就是它的一个工程目录

04:51.780 --> 04:53.780
在这个工程目录里面

04:53.780 --> 04:56.780
我们可以先看一下Package.json

04:56.780 --> 04:59.780
这个呢是案例的一个文件描述

04:59.780 --> 05:01.780
这里面有些一些启动命令

05:01.780 --> 05:02.780
如果想使用的话

05:02.780 --> 05:03.780
怎么办呢

05:03.780 --> 05:04.780
我们这里面先把它的依赖包

05:04.780 --> 05:06.780
给进行一个安装

05:06.780 --> 05:08.780
在这里面使用一二命令

05:08.780 --> 05:10.780
进行安装一下

05:10.780 --> 05:11.780
在安装的时候

05:11.780 --> 05:12.780
我们来看一下

05:12.780 --> 05:14.780
它里面的这个目录结构

05:14.780 --> 05:15.780
首先来说

05:15.780 --> 05:17.780
这个TypeScript.js

05:17.780 --> 05:18.780
这个呢我们说了

05:18.780 --> 05:19.780
就是在使用的时候

05:19.780 --> 05:21.780
我们对TypeScript的

05:21.780 --> 05:23.780
本案里面涉及不到

05:23.780 --> 05:24.780
所以说你展示

05:24.780 --> 05:26.780
先不用去考虑这个文件

05:26.780 --> 05:27.780
最后呢

05:27.780 --> 05:28.780
我们打包构建的时候

05:28.780 --> 05:30.780
会把这个文件给忽略掉的

05:30.780 --> 05:31.780
就OK了

05:31.780 --> 05:33.780
之后这里面有一个

05:33.780 --> 05:34.780
TS.config.json

05:34.780 --> 05:36.780
同样的是对TypeScript的

05:36.780 --> 05:38.780
一个约束规范的文件

05:38.780 --> 05:40.780
这个呢可以展示

05:40.780 --> 05:41.780
先不看

05:41.780 --> 05:43.780
到这里面有一个Package.json

05:43.780 --> 05:45.780
这里面有几个启动命令

05:45.780 --> 05:47.780
分别是StartBuild的构建命令

05:47.780 --> 05:49.780
包括我们的一个测试的

05:49.780 --> 05:50.780
应用命令

05:50.780 --> 05:52.780
污蔑都已经给我们准备好了

05:52.780 --> 05:54.780
但是呢我们目前在开发阶段

05:54.780 --> 05:56.780
只关注スタ命令就可以

05:56.780 --> 05:57.780
至于其他命令呢

05:57.780 --> 05:59.780
我们后面学习的过程当中

05:59.780 --> 06:00.780
使用到之后

06:00.780 --> 06:01.780
再给大家做一个

06:01.780 --> 06:02.780
详细的介绍

06:02.780 --> 06:03.780
之后就是污蔑

06:03.780 --> 06:05.780
rc.ts

06:05.780 --> 06:06.780
这个呢是

06:06.780 --> 06:08.780
污蔑的默认的配置文件

06:08.780 --> 06:10.780
污蔑有两种配置文件的

06:10.780 --> 06:11.780
一个处理

06:11.780 --> 06:12.780
首先呢就是

06:12.780 --> 06:14.780
你可以使用它的这种

06:14.780 --> 06:16.780
默认的ts.污蔑

06:16.780 --> 06:17.780
rc.文件

06:17.780 --> 06:19.780
来进行这个

06:19.780 --> 06:21.780
我们工程的系统配置

06:21.780 --> 06:22.780
还有一种呢

06:22.780 --> 06:23.780
就是使用config.文件

06:23.780 --> 06:24.780
在这个里面呢

06:24.780 --> 06:25.780
我们就使用

06:25.780 --> 06:26.780
污蔑.src

06:26.780 --> 06:27.780
这个文件

06:27.780 --> 06:29.780
来进行一些相关内容的配置

06:29.780 --> 06:30.780
比如说

06:30.780 --> 06:32.780
我们创建一些

06:32.780 --> 06:34.780
路由的规则啊

06:34.780 --> 06:35.780
包括我们一些

06:35.780 --> 06:37.780
迪瓦的这个

06:37.780 --> 06:38.780
状态开启啊

06:38.780 --> 06:39.780
都在这个里面来实现

06:39.780 --> 06:40.780
就ok了

06:40.780 --> 06:42.780
后面呢是这个

06:42.780 --> 06:43.780
project.rc啊

06:43.780 --> 06:44.780
这个是什么呢

06:44.780 --> 06:46.780
这是我们一个格式化的啊

06:46.780 --> 06:47.780
包括我们prate

06:47.780 --> 06:48.780
prate.go

06:48.780 --> 06:49.780
这个也是

06:49.780 --> 06:50.780
格式化的一些东西

06:50.780 --> 06:51.780
包括我们

06:51.780 --> 06:53.780
gate的一些忽略文件

06:53.780 --> 06:55.780
这个我们可以展现不考虑啊

06:55.780 --> 06:57.780
里面有一个node models

06:57.780 --> 06:58.780
node models

06:58.780 --> 07:00.780
就是我们的一个bar依赖

07:00.780 --> 07:02.780
moke呢是我们模拟的一些

07:02.780 --> 07:04.780
三方的数据请求的时候

07:04.780 --> 07:06.780
我们可以在这个里面来做啊

07:06.780 --> 07:07.780
src呢是我们的这个

07:07.780 --> 07:09.780
主工程目录啊

07:09.780 --> 07:10.780
那我们的所有开发呢

07:10.780 --> 07:12.780
都是基于这个文件

07:12.780 --> 07:13.780
来进行的

07:13.780 --> 07:15.780
这个呢我们要知道一下啊

07:15.780 --> 07:17.780
好的那这个搞定之后呢

07:17.780 --> 07:18.780
我们现在就可以来

07:18.780 --> 07:19.780
进行一个启动了

07:19.780 --> 07:20.780
刚才咱们看到了

07:20.780 --> 07:21.780
是史达的命令

07:21.780 --> 07:23.780
来进行一个开启

07:23.780 --> 07:24.780
那开启之后呢

07:24.780 --> 07:25.780
其实Umi3啊

07:25.780 --> 07:26.780
相比Umi2

07:26.780 --> 07:28.780
它的这个UI界面

07:28.780 --> 07:29.780
更加简洁了

07:29.780 --> 07:30.780
我们可以打开看一下

07:30.780 --> 07:31.780
非常简单

07:31.780 --> 07:33.780
80818001

07:33.780 --> 07:34.780
我们打开看眼

07:35.780 --> 07:36.780
这个8001

07:36.780 --> 07:37.780
你会发现啊

07:37.780 --> 07:38.780
如果说

07:38.780 --> 07:39.780
你看到这个界面之后

07:39.780 --> 07:40.780
那就代表什么呢

07:40.780 --> 07:42.780
我们的这个Umi啊

07:42.780 --> 07:43.780
已经开启成功了

07:43.780 --> 07:45.780
这个里面的路键啊

07:45.780 --> 07:47.780
8001端口号呢

07:47.780 --> 07:48.780
是因为我们本地

07:48.780 --> 07:50.780
已经开启了一个

07:50.780 --> 07:51.780
已经完成的这个

07:51.780 --> 07:52.780
案例8000的

07:52.780 --> 07:53.780
那所以说呢

07:53.780 --> 07:55.780
它会有一个低增的效果

07:55.780 --> 07:56.780
这个我们要明确一下

07:56.780 --> 07:57.780
实际上如果说

07:57.780 --> 07:58.780
你没有开启

07:58.780 --> 07:59.780
其他Umi项目的话

07:59.780 --> 08:00.780
它默认端口

08:00.780 --> 08:01.780
应该是从8000开始的

08:01.780 --> 08:03.780
这个我们要清楚一下

08:03.780 --> 08:04.780
当你看到

08:04.780 --> 08:05.780
Page index之后

08:05.780 --> 08:06.780
那这个呢

08:06.780 --> 08:08.780
就是代表着Umi的工程

08:08.780 --> 08:10.780
已经运行起来了

08:10.780 --> 08:12.780
那运行起来之后

08:12.780 --> 08:13.780
我们就可以进行

08:13.780 --> 08:15.780
一些内容的填充了

08:15.780 --> 08:16.780
也就是说

08:16.780 --> 08:17.780
把我们需要的

08:17.780 --> 08:18.780
相关的内容

08:18.780 --> 08:19.780
给它进行一个

08:19.780 --> 08:20.780
处理就ok了

08:20.780 --> 08:21.780
我们先来看一下

08:21.780 --> 08:23.780
Umi的路由的一个使用

08:23.780 --> 08:24.780
也就是说

08:24.780 --> 08:25.780
如何来进行

08:25.780 --> 08:26.780
页面的一个创建

08:26.780 --> 08:28.780
在src下面呢

08:28.780 --> 08:29.780
会有一个

08:29.780 --> 08:30.780
Pages文件夹

08:30.780 --> 08:31.780
Pages文件夹下面

08:31.780 --> 08:32.780
就是存放了

08:32.780 --> 08:34.780
所有的我们页面

08:34.780 --> 08:35.780
级别的一个组件

08:35.780 --> 08:37.780
那么我们看到的这个

08:37.780 --> 08:38.780
Page index在哪个里面呢

08:38.780 --> 08:39.780
就是在它的下面

08:39.780 --> 08:41.780
index.tsX里面呢

08:41.780 --> 08:42.780
然后呢

08:42.780 --> 08:43.780
我们自己定义的时候

08:43.780 --> 08:45.780
遵循Nex的API

08:45.780 --> 08:47.780
也就是说文件名

08:47.780 --> 08:48.780
级为路由名

08:48.780 --> 08:49.780
这种规则呢

08:49.780 --> 08:52.780
来进行一个页面的创建

08:52.780 --> 08:53.780
但是呢

08:53.780 --> 08:54.780
在页面创建的之前

08:54.780 --> 08:56.780
我要跟同学们明确一下

08:56.780 --> 08:57.780
首先呢

08:57.780 --> 08:58.780
我们的创建

08:58.780 --> 08:59.780
属于自定义这种路由

08:59.780 --> 09:01.780
那我们就要将Umi Rc

09:01.780 --> 09:03.780
这个Pages文件里面的

09:03.780 --> 09:05.780
路由的一个规则

09:05.780 --> 09:06.780
我们先给它进行

09:06.780 --> 09:07.780
一个注释

09:07.780 --> 09:08.780
然后呢

09:08.780 --> 09:09.780
让它自动生成一个路由

09:09.780 --> 09:10.780
那你会发现

09:10.780 --> 09:11.780
现在是没什么问题的

09:11.780 --> 09:12.780
对不对

09:12.780 --> 09:13.780
然后呢

09:13.780 --> 09:14.780
我在这个里面

09:14.780 --> 09:15.780
把这个tsX

09:15.780 --> 09:16.780
我给它改一下

09:16.780 --> 09:17.780
叫index.tsX

09:17.780 --> 09:21.780
OK

09:21.780 --> 09:22.780
改完成之后

09:22.780 --> 09:23.780
然后这个时候呢

09:23.780 --> 09:25.780
我们直接的进行一个保存

09:25.780 --> 09:26.780
保存完成之后

09:26.780 --> 09:27.780
你来看一下

09:27.780 --> 09:28.780
是否可行

09:28.780 --> 09:30.780
我们刷新界面

09:30.780 --> 09:31.780
是不是感觉没什么问题

09:31.780 --> 09:32.780
对不对

09:32.780 --> 09:33.780
然后但是这里面有一个问题

09:33.780 --> 09:34.780
如果说你不把它

09:34.780 --> 09:36.780
默认的路由配置规则

09:36.780 --> 09:38.780
你不把它给注释掉的话

09:38.780 --> 09:39.780
这个里面呢

09:39.780 --> 09:40.780
它就会有包错

09:40.780 --> 09:41.780
而且呢

09:41.780 --> 09:43.780
我们是无法进行这个访问的

09:43.780 --> 09:44.780
所以说呢

09:44.780 --> 09:46.780
我们要使用自定义规则的时候

09:46.780 --> 09:49.780
你要把这个路由给它干掉啊

09:49.780 --> 09:50.780
然后呢

09:50.780 --> 09:51.780
我们做一个保存

09:51.780 --> 09:52.780
那你说干掉之后

09:52.780 --> 09:54.780
它这个文件存放在哪呢

09:54.780 --> 09:56.780
当我们程序运行起来之后

09:56.780 --> 09:57.780
src下面

09:57.780 --> 10:01.780
自动的会生成一个点无名文件

10:01.780 --> 10:02.780
这个文件家里面呢

10:02.780 --> 10:03.780
会有一个call

10:03.780 --> 10:04.780
那我们从这里面

10:04.780 --> 10:06.780
就能找到一个russ

10:06.780 --> 10:07.780
russ里面就自动的

10:07.780 --> 10:09.780
给我们生成了一个什么

10:09.780 --> 10:11.780
类似的这种路由的

10:11.780 --> 10:12.780
一个匹配规则

10:12.780 --> 10:14.780
这里面有component

10:14.780 --> 10:15.780
有一个xpad

10:15.780 --> 10:16.780
包括它的pads

10:16.780 --> 10:17.780
对不对

10:17.780 --> 10:19.780
这个呢是非常像next的啊

10:19.780 --> 10:21.780
然后我们这里面自己来定一个

10:21.780 --> 10:22.780
比如说这里面

10:22.780 --> 10:25.780
写一个test.js

10:25.780 --> 10:26.780
然后写完了之后

10:26.780 --> 10:29.780
我们使用这种快捷的命令

10:29.780 --> 10:30.780
输入一个test的

10:30.780 --> 10:32.780
那这里面写一段话

10:32.780 --> 10:33.780
给做一个输出

10:33.780 --> 10:35.780
Hello,test

10:35.780 --> 10:36.780
ok

10:36.780 --> 10:37.780
这里面写完了之后呢

10:37.780 --> 10:38.780
我们就来看一下

10:38.780 --> 10:39.780
首先呢

10:39.780 --> 10:40.780
我们要保证啊

10:40.780 --> 10:41.780
这个call里面呢

10:41.780 --> 10:42.780
它会如果说

10:42.780 --> 10:43.780
你添加完一个之后

10:43.780 --> 10:44.780
它默认的

10:44.780 --> 10:46.780
给你添加这么一个路由匹配规则

10:46.780 --> 10:48.780
既然你定一好了之后

10:48.780 --> 10:49.780
也就是说

10:49.780 --> 10:50.780
你可以看一下

10:50.780 --> 10:52.780
访问路件其实就是我们的

10:52.780 --> 10:54.780
一个什么路由的一个

10:54.780 --> 10:56.780
文件家的名字对不对

10:56.780 --> 10:57.780
那在这个里面

10:57.780 --> 10:58.780
我们就可以使用这种

10:58.780 --> 10:59.780
test的形式

10:59.780 --> 11:00.780
ok

11:00.780 --> 11:01.780
Hello,test的page

11:01.780 --> 11:02.780
这时候是不是就有了

11:02.780 --> 11:03.780
对吧

11:03.780 --> 11:04.780
那其实呢

11:04.780 --> 11:05.780
它的这个路由规则使用

11:05.780 --> 11:06.780
是非常简单的

11:06.780 --> 11:07.780
这个呢

11:07.780 --> 11:08.780
我们要明确一下

11:08.780 --> 11:09.780
而且呢

11:09.780 --> 11:10.780
再跟同学们说一下

11:10.780 --> 11:11.780
无米呢

11:11.780 --> 11:12.780
它的这个强大支出

11:12.780 --> 11:13.780
就在于什么

11:14.780 --> 11:15.780
我们其实在创建的时候

11:15.780 --> 11:16.780
它默认会有

11:16.780 --> 11:17.780
这个lites

11:17.780 --> 11:18.780
语法的一个引入

11:18.780 --> 11:19.780
也就是说

11:19.780 --> 11:20.780
这个lites

11:20.780 --> 11:21.780
语编语处理器

11:21.780 --> 11:22.780
它提前呢

11:22.780 --> 11:23.780
就会给我们

11:23.780 --> 11:24.780
加载进来了

11:24.780 --> 11:25.780
那这时候呢

11:25.780 --> 11:27.780
我们就不需要再使用

11:27.780 --> 11:28.780
这种

11:28.780 --> 11:29.780
我们

11:29.780 --> 11:31.780
安装lites loader

11:31.780 --> 11:32.780
或者是其他的style loader

11:32.780 --> 11:33.780
相关的这个

11:33.780 --> 11:34.780
API的

11:34.780 --> 11:36.780
相关插件的一个操作

11:36.780 --> 11:37.780
这个我们要清楚一下

11:37.780 --> 11:38.780
包括我们看一下

11:38.780 --> 11:39.780
其实这里面

11:39.780 --> 11:40.780
你会发现

11:40.780 --> 11:41.780
它会有一些默认样式的

11:41.780 --> 11:42.780
因为什么呢

11:42.780 --> 11:43.780
我们这里面没调整

11:43.780 --> 11:44.780
包袋的内外边距

11:44.780 --> 11:45.780
但是同学们

11:45.780 --> 11:46.780
感觉看我的屏幕这块

11:46.780 --> 11:47.780
哎是这一块

11:47.780 --> 11:48.780
是不是看得

11:48.780 --> 11:49.780
已经不太清晰了

11:49.780 --> 11:50.780
这就说明我们的内

11:50.780 --> 11:52.780
内外的默认边距

11:52.780 --> 11:53.780
已经被干掉了

11:53.780 --> 11:54.780
所以说

11:54.780 --> 11:55.780
这里面有默认的一个处理

11:55.780 --> 11:57.780
那是怎么来处理呢

11:57.780 --> 11:59.780
我们的这个

11:59.780 --> 12:00.780
无米里面

12:00.780 --> 12:01.780
内置集成了

12:01.780 --> 12:02.780
这种ant

12:02.780 --> 12:03.780
也就是说

12:03.780 --> 12:04.780
我们说的安底蛋

12:04.780 --> 12:05.780
那这个安底蛋呢

12:05.780 --> 12:06.780
我们直接拿来

12:06.780 --> 12:07.780
它的这个默认样式

12:07.780 --> 12:08.780
使用就可以了

12:08.780 --> 12:09.780
而且无米

12:09.780 --> 12:10.780
本身也处理了

12:10.780 --> 12:12.780
里面的一些内置的默认样式

12:12.780 --> 12:13.780
如果说

12:13.780 --> 12:14.780
我们要使用它的插件

12:14.780 --> 12:15.780
怎么办

12:15.780 --> 12:16.780
非常简单啊

12:16.780 --> 12:17.780
我们在这个太子里面

12:17.780 --> 12:18.780
如果说

12:18.780 --> 12:19.780
你要想使用

12:19.780 --> 12:20.780
按它的一些炸件

12:20.780 --> 12:21.780
那引炮的

12:21.780 --> 12:22.780
比如说我们使用

12:22.780 --> 12:24.780
按它的button

12:24.780 --> 12:26.780
引炮的button

12:26.780 --> 12:27.780
fram

12:27.780 --> 12:28.780
我们直接的

12:28.780 --> 12:29.780
给它引入就可以了

12:29.780 --> 12:30.780
咱们这个叫

12:30.780 --> 12:31.780
antd

12:31.780 --> 12:32.780
对不对

12:32.780 --> 12:33.780
从这个里面

12:33.780 --> 12:35.780
BOTTO

12:35.780 --> 12:36.780
给它进行一个

12:36.780 --> 12:37.780
引入引入之后

12:37.780 --> 12:38.780
我们就可以在这个里面

12:38.780 --> 12:39.780
直接使用啊

12:39.780 --> 12:40.780
button

12:40.780 --> 12:41.780
然后呢

12:41.780 --> 12:42.780
我们在这个里面

12:42.780 --> 12:43.780
给它打印一下

12:43.780 --> 12:44.780
嗯

12:44.780 --> 12:45.780
就写一个button按钮吧

12:45.780 --> 12:47.780
咱们来看一眼啊

12:47.780 --> 12:48.780
哈喽

12:48.780 --> 12:49.780
太子的page

12:49.780 --> 12:50.780
你会发现啊

12:50.780 --> 12:51.780
默认的这个按钮

12:51.780 --> 12:52.780
是不是就已经出来了

12:52.780 --> 12:53.780
而且呢

12:53.780 --> 12:54.780
我们这里面

12:54.780 --> 12:55.780
为了验证一下

12:55.780 --> 12:56.780
它是不是ant的

12:56.780 --> 12:57.780
我们就可以添加一个什么

12:57.780 --> 12:58.780
Type

12:58.780 --> 13:00.780
我们直接写一个parmer

13:00.780 --> 13:01.780
对不对

13:01.780 --> 13:02.780
有一个默认的样式

13:02.780 --> 13:03.780
你会发现这个颜色

13:03.780 --> 13:04.780
是不是也就进去了

13:04.780 --> 13:05.780
对吧

13:05.780 --> 13:06.780
这个呢

13:06.780 --> 13:07.780
就是证明了

13:07.780 --> 13:08.780
里面的底单

13:08.780 --> 13:09.780
已经内置

13:09.780 --> 13:10.780
进入到我们这个

13:10.780 --> 13:12.780
污蜜搭建的工程里面了

13:12.780 --> 13:13.780
包括我们lice的使用

13:13.780 --> 13:14.780
这个呢

13:14.780 --> 13:16.780
我们是要明确一下的啊

13:16.780 --> 13:17.780
好的

13:17.780 --> 13:18.780
那这个简单的界面

13:18.780 --> 13:19.780
就创建完了

13:19.780 --> 13:20.780
当然了

13:20.780 --> 13:21.780
这个是一种

13:21.780 --> 13:22.780
最简单的这个

13:22.780 --> 13:23.780
界面文件的创建

13:23.780 --> 13:24.780
那如果说

13:24.780 --> 13:25.780
我们要定一些

13:25.780 --> 13:26.780
动态路由

13:26.780 --> 13:27.780
怎么来制作呢

13:27.780 --> 13:28.780
比如说我们这里面

13:28.780 --> 13:29.780
有个需求啊

13:29.780 --> 13:30.780
我们要做一个

13:30.780 --> 13:31.780
动态路由

13:31.780 --> 13:32.780
那这个动态路由呢

13:32.780 --> 13:33.780
就是有点下面

13:33.780 --> 13:34.780
有一个

13:34.780 --> 13:35.780
有点

13:35.780 --> 13:36.780
detail

13:36.780 --> 13:37.780
那这个时候

13:37.780 --> 13:38.780
我们怎么来

13:38.780 --> 13:39.780
定制路由呢

13:39.780 --> 13:40.780
其实在污蜜2和污蜜3中

13:40.780 --> 13:41.780
有一个比较大的区别

13:41.780 --> 13:43.780
那既然我们按例里面

13:43.780 --> 13:44.780
用到污蜜3

13:44.780 --> 13:45.780
污蜜2的这个定制

13:45.780 --> 13:47.780
让我们暂时可以不考虑

13:47.780 --> 13:48.780
同学们有兴趣的话

13:48.780 --> 13:49.780
可以查阅一下一篇

13:49.780 --> 13:51.780
那污蜜3定制这种

13:51.780 --> 13:52.780
动态路由

13:52.780 --> 13:53.780
其实是非常简单的

13:53.780 --> 13:54.780
它是怎么来创建的呢

13:54.780 --> 13:56.780
就是我们在这个里面

13:56.780 --> 13:57.780
首先要保证

13:57.780 --> 13:58.780
创建一个文件家

13:58.780 --> 13:59.780
那这时候呢

13:59.780 --> 14:00.780
当然你也可以

14:00.780 --> 14:01.780
不创建文件家

14:01.780 --> 14:02.780
我这里面定一个

14:02.780 --> 14:03.780
u的文件家

14:03.780 --> 14:04.780
这个时候呢

14:04.780 --> 14:05.780
我使用一个

14:05.780 --> 14:07.780
先写一下啊

14:07.780 --> 14:08.780
那这个就叫

14:08.780 --> 14:09.780
u字

14:09.780 --> 14:10.780
在这里面写一下

14:10.780 --> 14:11.780
u字配置

14:11.780 --> 14:12.780
ok 咱们先来看一下

14:12.780 --> 14:14.780
它是否已经

14:14.780 --> 14:16.780
进入了u字配置

14:16.780 --> 14:17.780
对吧

14:17.780 --> 14:18.780
我们看一下

14:18.780 --> 14:19.780
u字配置

14:19.780 --> 14:20.780
给同学们放大一点

14:20.780 --> 14:21.780
这有一点小啊

14:21.780 --> 14:23.780
这里面使用一个

14:23.780 --> 14:24.780
h1之后

14:24.780 --> 14:25.780
把它挪进来

14:25.780 --> 14:26.780
u字配置

14:26.780 --> 14:27.780
咱们看一下

14:27.780 --> 14:28.780
这个时候

14:28.780 --> 14:29.780
就相对比较大了

14:29.780 --> 14:30.780
u字配置

14:30.780 --> 14:31.780
假如说下面

14:31.780 --> 14:32.780
有一个详情界面

14:32.780 --> 14:34.780
那详情界面呢

14:34.780 --> 14:36.780
根据我们的这个

14:36.780 --> 14:37.780
比如说

14:37.780 --> 14:38.780
传递的id不同

14:38.780 --> 14:40.780
然后进行不同的

14:40.780 --> 14:41.780
这个内容展示

14:41.780 --> 14:42.780
那这个是怎么来做呢

14:42.780 --> 14:44.780
其实也非常简单啊

14:44.780 --> 14:45.780
我们这个里面

14:45.780 --> 14:46.780
u字下面

14:46.780 --> 14:47.780
我们这是index

14:47.780 --> 14:48.780
对不对

14:48.780 --> 14:49.780
那我就可以给它调整一下

14:49.780 --> 14:50.780
比如说在这个里面

14:50.780 --> 14:52.780
给它改一下名

14:52.780 --> 14:53.780
用中框号的形式

14:53.780 --> 14:54.780
我在这个里面

14:54.780 --> 14:55.780
指定一个什么

14:55.780 --> 14:56.780
id

14:56.780 --> 14:57.780
那这个时候

14:57.780 --> 14:58.780
我要指定好了之后

14:58.780 --> 14:59.780
你就会发现啊

14:59.780 --> 15:00.780
我们这个时候

15:00.780 --> 15:01.780
创建完成

15:01.780 --> 15:02.780
看它是否还有这个界面

15:02.780 --> 15:03.780
我们一刷新

15:03.780 --> 15:04.780
你会发现

15:04.780 --> 15:05.780
是不是还有这个界面

15:05.780 --> 15:06.780
但是我这里面

15:06.780 --> 15:07.780
123

15:07.780 --> 15:08.780
你会发现u字配置

15:08.780 --> 15:09.780
刚才是u字

15:09.780 --> 15:10.780
是没有任何内容

15:10.780 --> 15:11.780
对吧

15:11.780 --> 15:12.780
那这个时候呢

15:12.780 --> 15:13.780
比如说我在这里面

15:13.780 --> 15:14.780
写一个123

15:14.780 --> 15:15.780
那这123呢

15:15.780 --> 15:16.780
就代表着什么

15:16.780 --> 15:17.780
我们传递过去的

15:17.780 --> 15:19.780
一个id的值

15:19.780 --> 15:20.780
那这个id的值呢

15:20.780 --> 15:21.780
其实我们就是

15:21.780 --> 15:23.780
可以通过probs

15:23.780 --> 15:24.780
来进行获取的

15:24.780 --> 15:25.780
我们在这里面

15:25.780 --> 15:29.150
写一下probs

15:29.150 --> 15:30.150
然后呢

15:30.150 --> 15:31.150
我们在这个里面

15:31.150 --> 15:32.150
打印一下

15:32.150 --> 15:33.150
把这个probs

15:33.150 --> 15:34.150
看一下

15:35.150 --> 15:36.150
非常的简单

15:36.150 --> 15:37.150
无名在对路由的

15:37.150 --> 15:38.150
处理这一块

15:38.150 --> 15:39.150
他做的非常好

15:39.150 --> 15:40.150
所以说我们直接

15:40.150 --> 15:41.150
在使用的时候

15:41.150 --> 15:42.150
也是比较简单的

15:42.150 --> 15:43.150
我们看到

15:43.150 --> 15:44.150
这里面有什么呢

15:44.150 --> 15:45.150
随由准

15:45.150 --> 15:46.150
hate to location

15:46.150 --> 15:47.150
对不对

15:47.150 --> 15:48.150
包括我们的这个match

15:48.150 --> 15:49.150
那match里面

15:49.150 --> 15:50.150
就有一个什么

15:50.150 --> 15:51.150
parmerase

15:51.150 --> 15:52.150
parmerase呢

15:52.150 --> 15:53.150
就是代表的

15:53.150 --> 15:54.150
我们的一个

15:54.150 --> 15:55.150
传递过来的这个id值

15:55.150 --> 15:56.150
而且这个值呢

15:56.150 --> 15:57.150
是一个动态的

15:57.150 --> 15:58.150
我们可以一次的

15:58.150 --> 15:59.150
把它进行一个什么

15:59.150 --> 16:00.150
使用啊

16:00.150 --> 16:01.150
也就是说

16:01.150 --> 16:02.150
我们直接在这个里面

16:02.150 --> 16:03.150
写一个hr

16:03.150 --> 16:04.150
之后呢

16:04.150 --> 16:05.150
给它做一个

16:05.150 --> 16:06.150
p标签输出

16:06.150 --> 16:10.150
我是传递过来的

16:10.150 --> 16:11.150
一个什么值呢

16:11.150 --> 16:12.150
我们就使用这种

16:12.150 --> 16:18.150
probs.match.parmerase

16:18.150 --> 16:19.150
点

16:19.150 --> 16:20.150
点一个id

16:20.150 --> 16:21.150
当然了

16:21.150 --> 16:22.150
你这个id是

16:22.150 --> 16:23.150
你需要在前面

16:23.150 --> 16:24.150
指定好的

16:24.150 --> 16:25.150
如果说你在这

16:25.150 --> 16:26.150
定一好的id

16:26.150 --> 16:27.150
那传递过来的

16:27.150 --> 16:28.150
是不是123

16:28.150 --> 16:29.150
对不对

16:29.150 --> 16:30.150
假如说在这里面

16:30.150 --> 16:31.150
添一个1234

16:31.150 --> 16:32.150
至于这个

16:32.150 --> 16:33.150
是不是id

16:33.150 --> 16:34.150
取决于你

16:34.150 --> 16:35.150
中国号里面的

16:35.150 --> 16:36.150
一个值

16:36.150 --> 16:37.150
那这样呢

16:37.150 --> 16:38.150
就可以保证了一个

16:38.150 --> 16:39.150
我们动态路由的

16:39.150 --> 16:40.150
一个快速

16:40.150 --> 16:41.150
实现定义啊

16:41.150 --> 16:42.150
这个呢

16:42.150 --> 16:43.150
我们要指导一下

16:43.150 --> 16:44.150
接下来呢

16:44.150 --> 16:45.150
我们再说一下

16:45.150 --> 16:46.150
layout的

16:46.150 --> 16:47.150
模板的使用

16:47.150 --> 16:48.150
那么首先

16:48.150 --> 16:49.150
我们要明确一下

16:49.150 --> 16:51.150
为什么要使用模板

16:51.150 --> 16:52.150
我们可以看一下

16:52.150 --> 16:53.150
这个啊

16:53.150 --> 16:54.150
这个呢

16:54.150 --> 16:55.150
就是我们

16:55.150 --> 16:56.150
已经完成的

16:56.150 --> 16:57.150
这样一个案例

16:57.150 --> 16:58.150
那在完成的

16:58.150 --> 16:59.150
这个案例里面呢

16:59.150 --> 17:00.150
首先呢

17:00.150 --> 17:01.150
使用手机号码登录

17:01.150 --> 17:02.150
还有以及

17:02.150 --> 17:03.150
忘记密码的

17:03.150 --> 17:04.150
这样一个界面

17:04.150 --> 17:05.150
那这种界面呢

17:05.150 --> 17:06.150
跟我们的

17:06.150 --> 17:07.150
主界面

17:07.150 --> 17:08.150
有一个最大的区别

17:08.150 --> 17:09.150
是什么呢

17:09.150 --> 17:10.150
我们的主界面

17:10.150 --> 17:11.150
是有一个

17:11.150 --> 17:12.150
头部跟侧边篮的

17:12.150 --> 17:13.150
这样给大家

17:13.150 --> 17:14.150
登录

17:14.150 --> 17:15.150
可以查看一下

17:15.150 --> 17:16.150
头部和侧边篮

17:16.150 --> 17:17.150
这一块呢

17:17.150 --> 17:18.150
他属于

17:18.150 --> 17:19.150
属于一个

17:19.150 --> 17:20.150
什么呢

17:20.150 --> 17:21.150
公共的这个

17:21.150 --> 17:22.150
内容组件

17:22.150 --> 17:23.150
像这种

17:23.150 --> 17:24.150
公共的内容组件呢

17:24.150 --> 17:25.150
在我们

17:25.150 --> 17:26.150
主页面里面的

17:26.150 --> 17:27.150
每一个界面

17:27.150 --> 17:28.150
它都是存在的

17:28.150 --> 17:29.150
所以说呢

17:29.150 --> 17:30.150
我们怎么来做

17:30.150 --> 17:31.150
这点

17:31.150 --> 17:32.150
我们就可以使用

17:32.150 --> 17:33.150
两套不同的模板

17:33.150 --> 17:34.150
来进行

17:34.150 --> 17:35.150
我们指定路由的

17:35.150 --> 17:36.150
一个存放

17:36.150 --> 17:37.150
也就是说

17:37.150 --> 17:38.150
指定路由页面的存放

17:38.150 --> 17:39.150
怎么来做这件事

17:39.150 --> 17:40.150
也非常简单

17:40.150 --> 17:41.150
比如说

17:41.150 --> 17:42.150
我们用户的界面

17:42.150 --> 17:44.150
指定一个路由模板

17:44.150 --> 17:45.150
当我们

17:45.150 --> 17:46.150
其他的界面里面

17:46.150 --> 17:47.150
同样的

17:47.150 --> 17:48.150
再指定另一个模板

17:48.150 --> 17:49.150
那这两

17:49.150 --> 17:50.150
模板的区别是什么呢

17:50.150 --> 17:51.150
用户的模板

17:51.150 --> 17:52.150
相对比较简单了

17:52.150 --> 17:53.150
比如说

17:53.150 --> 17:54.150
退出之后

17:54.150 --> 17:55.150
给大家看一下

17:55.150 --> 17:56.150
它呢

17:56.150 --> 17:57.150
只有一个

17:57.150 --> 17:58.150
放表单

17:59.150 --> 18:00.150
但是

18:00.150 --> 18:01.150
如果说

18:01.150 --> 18:02.150
我们在这个

18:02.150 --> 18:03.150
主界面里面的模板

18:03.150 --> 18:04.150
我们可以把

18:04.150 --> 18:05.150
公共的头部

18:05.150 --> 18:06.150
和侧边缆

18:06.150 --> 18:07.150
给它填充进去

18:07.150 --> 18:08.150
那这样就保证了

18:08.150 --> 18:09.150
我们

18:09.150 --> 18:10.150
不同路由

18:10.150 --> 18:11.150
使用不同模板

18:11.150 --> 18:12.150
渲染的这样

18:12.150 --> 18:13.150
一个功能实现

18:14.150 --> 18:15.150
怎么来做

18:15.150 --> 18:16.150
我们就来写一下

18:16.150 --> 18:17.150
首先呢

18:17.150 --> 18:18.150
我们要做这件事的话

18:18.150 --> 18:19.150
就是在我们

18:19.150 --> 18:20.150
src下面

18:20.150 --> 18:22.150
新建一个文件家

18:22.150 --> 18:23.150
这个文件家的名字

18:23.150 --> 18:24.150
是必须的

18:24.150 --> 18:25.150
有规定好的

18:25.150 --> 18:26.150
那我们这个里面

18:26.150 --> 18:27.150
就不需要

18:27.150 --> 18:28.150
自己来改名字了

18:28.150 --> 18:29.150
它叫什么呢

18:29.150 --> 18:30.150
它叫layout

18:31.150 --> 18:32.150
layout下面

18:32.150 --> 18:33.150
我们比如说

18:33.150 --> 18:35.150
创建一个index.js

18:35.150 --> 18:36.150
插

18:36.150 --> 18:37.150
那这个呢

18:37.150 --> 18:38.150
就作为我们

18:38.150 --> 18:39.150
基础的模板

18:39.150 --> 18:41.150
rfce定义好了之后

18:41.150 --> 18:42.150
我们把它的名字

18:42.150 --> 18:43.150
给它改一个

18:43.150 --> 18:44.150
叫layout

18:45.150 --> 18:46.150
layout

18:46.150 --> 18:47.150
改完成之后

18:47.150 --> 18:48.150
我们这个里面

18:48.150 --> 18:49.150
比如说我这里面

18:49.150 --> 18:50.150
写一下h1

18:50.150 --> 18:51.150
这个叫做

18:51.150 --> 18:52.150
全局的一个

18:52.150 --> 18:53.150
基础模板

18:53.150 --> 18:54.150
好了

18:54.150 --> 18:55.150
定义完成之后

18:55.150 --> 18:56.150
咱们来看一下

18:56.150 --> 18:57.150
效果是否有了

18:57.150 --> 18:58.150
你看一下

18:58.150 --> 18:59.150
我们直接的

18:59.150 --> 19:01.150
在这个localhost的8001

19:01.150 --> 19:03.150
我们重新来做一下

19:03.150 --> 19:04.150
你会发现

19:04.150 --> 19:05.150
展示是不是

19:05.150 --> 19:06.150
感觉也没有内容

19:06.150 --> 19:07.150
对不对

19:07.150 --> 19:08.150
没有宣传出

19:08.150 --> 19:09.150
模板内容的原因

19:09.150 --> 19:10.150
主要是什么呢

19:10.150 --> 19:12.150
我们定义好了layout之后

19:12.150 --> 19:13.150
这个里面

19:13.150 --> 19:14.150
我们还需要做一个操作

19:14.150 --> 19:15.150
是什么呢

19:15.150 --> 19:16.150
把原来的这个服务

19:16.150 --> 19:17.150
给它停止

19:17.150 --> 19:19.150
然后我们再重新运行一下

19:19.150 --> 19:20.150
当重新运行之后

19:20.150 --> 19:21.150
那这个

19:21.150 --> 19:22.150
我们程序执行的时候

19:22.150 --> 19:24.150
是把这个模板

19:24.150 --> 19:25.150
就会匹配到的

19:25.150 --> 19:27.150
我们可以来看一下

19:27.150 --> 19:28.150
当它运行好了之后

19:28.150 --> 19:30.150
我们再进行界面刷新

19:30.150 --> 19:31.150
你会发现

19:31.150 --> 19:32.150
全局的基础模板

19:32.150 --> 19:33.150
其实不用刷新

19:33.150 --> 19:34.150
运行好之后

19:34.150 --> 19:35.150
它会自动执行

19:35.150 --> 19:36.150
全局的基础模板

19:36.150 --> 19:37.150
现在是不是就有了

19:37.150 --> 19:38.150
对吧

19:38.150 --> 19:39.150
有了之后怎么做

19:39.150 --> 19:40.150
其实你看

19:40.150 --> 19:41.150
我们想把

19:41.150 --> 19:43.150
pages下面的index

19:43.150 --> 19:44.150
要宣传出来

19:44.150 --> 19:45.150
但是目前

19:45.150 --> 19:46.150
它也没有宣传出来

19:46.150 --> 19:47.150
那我们怎么让它宣传出来呢

19:47.150 --> 19:48.150
这个里面

19:48.150 --> 19:49.150
我们就可以

19:49.150 --> 19:51.150
要使用到layout里面的

19:51.150 --> 19:53.150
相关probs属性了

19:53.150 --> 19:54.150
在这里面

19:54.150 --> 19:56.150
同学们进行一个打印

19:56.150 --> 19:58.150
我们先把这个probs

19:58.150 --> 20:00.150
给它打印一下看一下

20:00.150 --> 20:02.150
ok

20:02.150 --> 20:03.150
probs

20:03.150 --> 20:04.150
那咱们来看一眼

20:04.150 --> 20:05.150
这个时候

20:05.150 --> 20:07.150
这里面就会多了一下

20:07.150 --> 20:08.150
多了一下叫什么

20:08.150 --> 20:09.150
应该叫捶油准的

20:09.150 --> 20:11.150
捶油准就是需要

20:11.150 --> 20:12.150
我们选的

20:12.150 --> 20:13.150
每一个界面

20:13.150 --> 20:14.150
我们在这个里面

20:14.150 --> 20:15.150
probs里面

20:15.150 --> 20:16.150
获取到捶油准

20:16.150 --> 20:17.150
把捶油准

20:17.150 --> 20:19.150
插入到我们这个界面里面

20:19.150 --> 20:20.150
就ok了

20:20.150 --> 20:21.150
也就是说将捶油准

20:21.150 --> 20:23.150
添加到我们模板的

20:23.150 --> 20:24.150
界面里面

20:24.150 --> 20:26.150
解析出捶油准之后

20:26.150 --> 20:27.150
我们在这里面

20:27.150 --> 20:28.150
打印一下

20:28.150 --> 20:29.150
hr

20:29.150 --> 20:30.150
捶油准

20:30.150 --> 20:32.150
给它做一个输出

20:32.150 --> 20:33.150
输出之后

20:33.150 --> 20:34.150
你这时候再看

20:34.150 --> 20:35.150
全局基础模板

20:35.150 --> 20:36.150
配置intense

20:36.150 --> 20:37.150
那这些

20:37.150 --> 20:38.150
我们需要的内容

20:38.150 --> 20:39.150
是不是就都有

20:39.150 --> 20:40.150
对吧

20:40.150 --> 20:41.150
那比如说

20:41.150 --> 20:42.150
我们这个全局基础模板

20:42.150 --> 20:43.150
其实在我们这个

20:43.150 --> 20:45.150
看到的这个界面

20:45.150 --> 20:46.150
已经完成的这个界面里面

20:46.150 --> 20:47.150
它可以充当什么

20:47.150 --> 20:49.150
它是不是可以充当头部

20:49.150 --> 20:50.150
比如说你再有一个

20:50.150 --> 20:51.150
侧边篮

20:51.150 --> 20:52.150
那我们直接非常简单

20:52.150 --> 20:53.150
在这里面

20:53.150 --> 20:54.150
我们再订一个sidebar

20:54.150 --> 20:56.150
或者是我们一会儿

20:56.150 --> 20:57.150
使用这种

20:57.150 --> 20:59.150
安迪站的这个layout模板

20:59.150 --> 21:00.150
来制作一个就可以了

21:00.150 --> 21:01.150
比如说这里面

21:01.150 --> 21:02.150
先写一个

21:02.150 --> 21:05.150
这个叫侧边篮

21:05.150 --> 21:06.150
内容对吧

21:06.150 --> 21:07.150
那这样

21:07.150 --> 21:08.150
是不是就实现了

21:08.150 --> 21:09.150
一会儿呢

21:09.150 --> 21:10.150
我们只要是通过

21:10.150 --> 21:12.150
CSS样式的一个

21:12.150 --> 21:13.150
结构排版

21:13.150 --> 21:14.150
我们布局

21:14.150 --> 21:15.150
直接的就能

21:15.150 --> 21:16.150
把它的这个基础

21:16.150 --> 21:17.150
给实现了

21:17.150 --> 21:18.150
然后之后

21:18.150 --> 21:19.150
我们再测试一下

21:19.150 --> 21:20.150
其他界面

21:20.150 --> 21:21.150
因为我们在这里面

21:21.150 --> 21:22.150
有一个test的界面

21:22.150 --> 21:23.150
没有问题

21:23.150 --> 21:24.150
是不是

21:24.150 --> 21:25.150
然后呢

21:25.150 --> 21:27.150
还有一个yodel界面

21:27.150 --> 21:28.150
这个yodel界面

21:28.150 --> 21:29.150
有点特殊

21:29.150 --> 21:30.150
没显示出来是因为什么

21:30.150 --> 21:31.150
是因为我们这里面

21:31.150 --> 21:32.150
给yodel界面里面

21:32.150 --> 21:34.150
指定了动态路由

21:34.150 --> 21:35.150
那我在这里面

21:35.150 --> 21:36.150
写一个123

21:36.150 --> 21:37.150
你会发现

21:37.150 --> 21:38.150
yodel界面

21:38.150 --> 21:39.150
是不是也显示出来了

21:39.150 --> 21:40.150
对吧

21:40.150 --> 21:41.150
那这个就是一个

21:41.150 --> 21:42.150
基础模板的使用

21:42.150 --> 21:43.150
当然了

21:43.150 --> 21:44.150
我们还可以进行一个什么

21:44.150 --> 21:45.150
自定义的模板

21:45.150 --> 21:46.150
在后面的

21:46.150 --> 21:47.150
使用过程当中

21:47.150 --> 21:48.150
比如说我们

21:48.150 --> 21:49.150
定一些自定义模板

21:49.150 --> 21:50.150
那自定义模板干嘛呢

21:50.150 --> 21:51.150
我们可以让yodel

21:51.150 --> 21:52.150
作为这个

21:52.150 --> 21:54.150
在指定的这个模板里面

21:54.150 --> 21:55.150
显示

21:55.150 --> 21:56.150
然后呢

21:56.150 --> 21:57.150
再让这个

21:57.150 --> 21:58.150
我们其他的界面

21:58.150 --> 22:00.150
在另一个模板里面显示

22:00.150 --> 22:01.150
那这样就能把

22:01.150 --> 22:03.150
这个头部和側边篮的内容

22:03.150 --> 22:04.150
在我们指定的

22:04.150 --> 22:05.150
主界面里面

22:05.150 --> 22:06.150
来进行一个展示

22:06.150 --> 22:07.150
就ok了

22:07.150 --> 22:08.150
这个就是我们

22:08.150 --> 22:10.150
模板的一个作用

22:10.150 --> 22:11.150
那么接下来

22:11.150 --> 22:12.150
我们再说一下

22:12.150 --> 22:13.150
这个路由界面

22:13.150 --> 22:14.150
怎么来实现跳转

22:14.150 --> 22:16.150
跳转的方式呢

22:16.150 --> 22:17.150
在这个5米里面

22:17.150 --> 22:18.150
有两种形式

22:18.150 --> 22:19.150
是比较常用的

22:19.150 --> 22:20.150
首先

22:20.150 --> 22:21.150
第一个呢

22:21.150 --> 22:22.150
我们可以使用

22:22.150 --> 22:23.150
另个组件的形式

22:23.150 --> 22:24.150
来进行跳转

22:24.150 --> 22:25.150
那它的使用呢

22:25.150 --> 22:26.150
基本上和我们

22:26.150 --> 22:27.150
原生react

22:27.150 --> 22:28.150
是完全一致的

22:28.150 --> 22:29.150
第二种呢

22:29.150 --> 22:30.150
就是使用这种

22:30.150 --> 22:31.150
hate story api

22:31.150 --> 22:32.150
的形式

22:32.150 --> 22:33.150
来进行一个跳转

22:33.150 --> 22:34.150
两种形式呢

22:34.150 --> 22:35.150
我们都来试一下

22:35.150 --> 22:36.150
怎么来做

22:36.150 --> 22:37.150
首先我们

22:37.150 --> 22:38.150
用第一种link

22:38.150 --> 22:39.150
的形式

22:39.150 --> 22:40.150
把这个側边篮的

22:40.150 --> 22:41.150
这个内容

22:41.150 --> 22:42.150
先给他干掉

22:42.150 --> 22:43.150
我们在这个里面

22:43.150 --> 22:45.150
引入一个link

22:45.150 --> 22:46.150
标签

22:46.150 --> 22:47.150
我们直接的

22:47.150 --> 22:48.150
在这个里面

22:48.150 --> 22:49.150
当然了

22:49.150 --> 22:51.150
是link的一个组件

22:51.150 --> 22:53.150
把他引入之后

22:53.150 --> 22:54.150
从这个里面

22:54.150 --> 22:55.150
react

22:55.150 --> 22:56.150
react

22:56.150 --> 22:57.150
react

22:57.150 --> 22:58.150
react

22:58.150 --> 22:59.150
react

22:59.150 --> 23:00.150
react

23:00.150 --> 23:01.150
react

23:01.150 --> 23:02.150
react

23:02.150 --> 23:03.150
react

23:03.150 --> 23:04.150
react

23:04.150 --> 23:05.150
react

23:05.150 --> 23:06.150
react

23:06.150 --> 23:07.150
react

23:07.150 --> 23:08.150
react

23:08.150 --> 23:09.150
react

23:09.150 --> 23:10.150
react

23:10.150 --> 23:11.150
react

23:11.150 --> 23:12.150
react

23:12.150 --> 23:13.150
react

23:13.150 --> 23:14.150
react

23:14.150 --> 23:15.150
react

23:15.150 --> 23:16.150
react

23:16.150 --> 23:17.150
react

23:17.150 --> 23:18.150
react

23:19.150 --> 23:20.150
react

23:20.150 --> 23:21.150
react

23:21.150 --> 23:22.150
react

23:22.150 --> 23:23.150
react

23:23.150 --> 23:24.150
react

23:24.150 --> 23:25.150
react

23:25.150 --> 23:26.150
react

23:26.150 --> 23:27.150
react

23:27.150 --> 23:28.150
react

23:28.150 --> 23:29.150
react

23:29.150 --> 23:30.150
react

23:34.150 --> 23:35.150
base

23:35.150 --> 23:36.150
ok

23:36.150 --> 23:39.150
were

23:39.150 --> 23:40.150
前两 besonders

23:40.150 --> 23:41.150
第一个

23:41.150 --> 23:41.710
我现在给你

23:43.150 --> 23:44.150
重新看

23:44.150 --> 23:46.150
图表界面

23:46.150 --> 23:48.150
好的

23:48.150 --> 23:50.150
指定好它的这个跳转路径

23:50.150 --> 23:52.150
我们来试一下看是否可行

23:52.150 --> 23:54.150
到这个里面咱们刷新一下界面

23:54.150 --> 23:56.150
这里面有一个配置因nice

23:56.150 --> 23:57.150
是不是

23:57.150 --> 23:58.150
那这个是主页面

23:58.150 --> 24:00.150
我这里面点击跳转到图表界面

24:00.150 --> 24:02.150
ok 图表界面没有任何问题

24:02.150 --> 24:04.150
对吧 非常的简单

24:04.150 --> 24:06.150
第二种呢我们可以使用这种

24:06.150 --> 24:08.150
unclick的形式

24:08.150 --> 24:10.150
比如说给它添加一个什么

24:10.150 --> 24:11.150
点击事件

24:11.150 --> 24:12.150
那通过点击事件

24:12.150 --> 24:14.150
用它的相关 api

24:14.150 --> 24:15.150
来进行一个界面跳转

24:15.150 --> 24:16.150
怎么来实现呢

24:16.150 --> 24:17.150
我这里面就写一下

24:17.150 --> 24:19.150
比如说这个写一下

24:19.150 --> 24:22.150
使用这个点击事件

24:22.150 --> 24:24.150
然后呢加上一个

24:24.150 --> 24:27.150
黑四道人 api 的形式

24:27.150 --> 24:30.150
黑四道人 api 的形式

24:30.150 --> 24:35.150
进行界面的一个跳转

24:35.150 --> 24:37.150
进行界面跳转

24:37.150 --> 24:39.150
那它让它跳转到哪

24:39.150 --> 24:41.150
我们直接让它跳转到

24:42.150 --> 24:43.150
我们可以让它

24:43.150 --> 24:44.150
因为这个 user 界面里面

24:44.150 --> 24:46.150
我们是不是还有一个动态的职业

24:46.150 --> 24:47.150
正好我们可以试一下

24:47.150 --> 24:50.150
首先呢这个是跳转到 user 界面

24:50.150 --> 24:53.150
跳转 user 界面

24:53.150 --> 24:54.150
写两种啊

24:54.150 --> 24:57.150
第一种是跳转到 user 界面

24:57.150 --> 24:59.150
ok 第二个呢是跳转到

24:59.150 --> 25:01.150
我们的这个首页面啊

25:01.150 --> 25:03.150
也就是说让它给跳回来

25:03.150 --> 25:04.150
我们先试这个首页面啊

25:04.150 --> 25:05.150
这个啊怎么来写

25:05.150 --> 25:07.150
使用事件绑定的形式

25:07.150 --> 25:08.150
unclick

25:08.150 --> 25:10.150
unclick 在这个里面

25:10.150 --> 25:11.150
我们指定让它跳转

25:11.150 --> 25:12.150
对不对

25:12.150 --> 25:13.150
那我这里面可以写一个

25:13.150 --> 25:15.150
go target

25:15.150 --> 25:18.530
go target page

25:18.530 --> 25:20.530
跳转到指定的界面

25:20.530 --> 25:22.530
把这个定一下

25:22.530 --> 25:23.530
我们在这个里面

25:23.530 --> 25:25.530
创建好这么一个函数

25:25.530 --> 25:28.530
const go target page

25:28.530 --> 25:31.530
等于一个箭头函数

25:31.530 --> 25:33.530
在这个里面让它跳去哪呢

25:33.530 --> 25:34.530
我们直接的

25:34.530 --> 25:35.530
这应该是大体啊

25:35.530 --> 25:36.530
sorry

25:36.530 --> 25:37.530
把它改一下

25:37.530 --> 25:38.530
unclick 的形式

25:38.530 --> 25:39.530
好的

25:39.530 --> 25:40.530
指定完成之后

25:40.530 --> 25:41.530
首先来说

25:41.530 --> 25:42.530
我们这里面啊

25:42.530 --> 25:43.530
要去跳转界面

25:43.530 --> 25:45.530
这里面就需要使用一个 API

25:45.530 --> 25:46.530
哪一个 API呢

25:46.530 --> 25:48.530
我们就可以使用这种

25:48.530 --> 25:49.530
hastory API的形式

25:49.530 --> 25:50.530
来进跳转

25:50.530 --> 25:51.530
这个里面

25:51.530 --> 25:53.530
刚才咱们是看到了一个

25:53.530 --> 25:54.530
truel 准

25:54.530 --> 25:55.530
其实这里面应该是

25:55.530 --> 25:56.530
还有一个什么

25:56.530 --> 25:57.530
hastory

25:57.530 --> 25:58.530
这里面打印一个

25:58.530 --> 25:59.530
hastory

25:59.530 --> 26:03.220
ok

26:03.220 --> 26:05.220
来我们看一下

26:05.220 --> 26:07.220
点击事件进行一个跳转

26:07.220 --> 26:08.220
然后这个里面

26:08.220 --> 26:09.220
给他们一个换号

26:09.220 --> 26:11.220
看着不是很清晰啊

26:11.220 --> 26:12.220
好了

26:12.220 --> 26:13.220
那这样呢

26:13.220 --> 26:14.220
就是

26:14.220 --> 26:15.220
两个

26:15.220 --> 26:16.220
然后这个也比较长

26:16.220 --> 26:17.220
这样

26:17.220 --> 26:18.220
我不用它了

26:18.220 --> 26:19.220
因为咱们知道

26:19.220 --> 26:20.220
这里面有这个什么

26:20.220 --> 26:21.220
安德底战的

26:21.220 --> 26:22.220
默认导入

26:22.220 --> 26:23.220
是不是

26:23.220 --> 26:24.220
我就使用一个

26:24.220 --> 26:25.220
but

26:25.220 --> 26:26.220
安德底战的button

26:26.220 --> 26:28.220
来进行使用啊

26:28.220 --> 26:29.220
好像

26:29.220 --> 26:30.220
这个里面啊

26:30.220 --> 26:32.220
我们直接引入一下

26:32.220 --> 26:33.220
比如说

26:33.220 --> 26:34.220
这个叫

26:34.220 --> 26:35.220
input

26:38.220 --> 26:39.220
button

26:39.220 --> 26:40.220
然后呢

26:40.220 --> 26:41.220
是forrom

26:41.220 --> 26:42.220
从哪来

26:42.220 --> 26:43.220
从安德底

26:44.220 --> 26:46.600
安德底里面

26:46.600 --> 26:47.600
进行一个引入

26:47.600 --> 26:48.600
然后把这个标签

26:48.600 --> 26:49.600
换一个啊

26:49.600 --> 26:51.600
死判看着不明显

26:51.600 --> 26:52.600
是吧

26:52.600 --> 26:53.600
那我们直接换成

26:53.600 --> 26:54.600
这个button标签

26:54.600 --> 26:55.600
那这样看着

26:55.600 --> 26:56.600
就能清晰一些

26:56.600 --> 26:57.600
对不对

26:57.600 --> 26:58.600
最起码有一个边框

26:58.600 --> 26:59.600
下面呢

26:59.600 --> 27:00.600
我也换成

27:00.600 --> 27:01.600
这个button标签啊

27:01.600 --> 27:02.600
来

27:02.600 --> 27:03.600
咱们试一下

27:03.600 --> 27:04.600
好的

27:04.600 --> 27:05.600
两个都有了

27:05.600 --> 27:06.600
是不是

27:06.600 --> 27:07.600
那我先使用

27:07.600 --> 27:08.600
点击事件加

27:08.600 --> 27:09.600
hastory API

27:09.600 --> 27:10.600
你看它的这个

27:10.600 --> 27:11.600
点击事件

27:11.600 --> 27:12.600
处发的sorry啊

27:12.600 --> 27:13.600
是底下的这个

27:13.600 --> 27:14.600
把上面这个

27:14.600 --> 27:16.600
也进行一个什么

27:16.600 --> 27:17.600
保定啊

27:17.600 --> 27:18.600
uncleink

27:18.600 --> 27:19.600
然后呢

27:19.600 --> 27:20.600
我先看一下

27:20.600 --> 27:21.600
这个hastory API

27:21.600 --> 27:22.600
你会发现

27:22.600 --> 27:23.600
我们已经获取到了

27:23.600 --> 27:24.600
一个什么

27:24.600 --> 27:25.600
咱们这个里面

27:25.600 --> 27:26.600
有一个hastory

27:26.600 --> 27:27.600
对吧

27:27.600 --> 27:28.600
那你既然有

27:28.600 --> 27:29.600
这个hastory了

27:29.600 --> 27:30.600
我们直接就可以

27:30.600 --> 27:31.600
用它的一个什么

27:31.600 --> 27:32.600
hastory里面

27:32.600 --> 27:33.600
是不是有一个

27:33.600 --> 27:34.600
铺式方法

27:34.600 --> 27:35.600
我们就可以

27:35.600 --> 27:36.600
对一个页面

27:36.600 --> 27:37.600
进行一个追加

27:37.600 --> 27:38.600
对不对

27:39.600 --> 27:40.600
其实呢

27:40.600 --> 27:41.600
我在每次使用的时候

27:41.600 --> 27:42.600
我还可以进行

27:42.600 --> 27:43.600
一个什么

27:43.600 --> 27:44.600
参数的传递

27:44.600 --> 27:45.600
比如说我这次

27:45.600 --> 27:46.600
调用go target

27:46.600 --> 27:47.600
的配置的时候

27:47.600 --> 27:48.600
我就可以给它

27:48.600 --> 27:49.600
指定一个

27:49.600 --> 27:50.600
路径地址

27:50.600 --> 27:51.600
那这个路径地址

27:51.600 --> 27:52.600
就是我们的

27:52.600 --> 27:53.600
这个油字对吧

27:53.600 --> 27:54.600
那咱们让它

27:54.600 --> 27:56.600
来进行一个跳转

27:56.600 --> 27:57.600
go target

27:57.600 --> 27:58.600
的配置

27:58.600 --> 27:59.600
我们这里面

27:59.600 --> 28:00.600
就写一个什么

28:00.600 --> 28:01.600
写一个url

28:01.600 --> 28:02.600
之后呢

28:02.600 --> 28:03.600
我们在这个里面

28:03.600 --> 28:04.600
使用的时候

28:04.600 --> 28:05.600
就可以

28:05.600 --> 28:06.600
hastory API

28:06.600 --> 28:07.600
铺式是谁

28:07.600 --> 28:08.600
就是我们

28:08.600 --> 28:09.600
传递过来的

28:09.600 --> 28:10.600
这个UIL

28:10.600 --> 28:11.600
咱们看一眼行不行

28:13.600 --> 28:14.600
跳转到youder界面

28:14.600 --> 28:15.600
对不对

28:15.600 --> 28:16.600
那咱们123走你

28:16.600 --> 28:17.600
你会发现

28:17.600 --> 28:18.600
youder界面跳转过来了

28:18.600 --> 28:19.600
跳转过来之后

28:19.600 --> 28:20.600
其实我们知道

28:20.600 --> 28:21.600
youder界面

28:21.600 --> 28:22.600
是我们添加的

28:22.600 --> 28:24.600
这种动态的路由界面

28:24.600 --> 28:25.600
那这个里面

28:25.600 --> 28:26.600
你在跳转的时候

28:26.600 --> 28:27.600
你还可以进行一个

28:27.600 --> 28:28.600
直的转

28:28.600 --> 28:29.600
直的一个传递

28:29.600 --> 28:30.600
对不对

28:30.600 --> 28:31.600
那直的传递

28:31.600 --> 28:32.600
一般我们使用的时候

28:32.600 --> 28:33.600
可能会定一个

28:33.600 --> 28:34.600
或者是呢

28:34.600 --> 28:35.600
我们直接的

28:35.600 --> 28:36.600
为了测试

28:36.600 --> 28:37.600
我们直接的

28:37.600 --> 28:38.600
先来传一个静态值

28:38.600 --> 28:39.600
比如说

28:39.600 --> 28:40.600
我们传递一个123

28:40.600 --> 28:41.600
那这个时候

28:41.600 --> 28:42.600
我们hastory

28:42.600 --> 28:43.600
点铺式的时候

28:43.600 --> 28:44.600
咱们先回到

28:44.600 --> 28:45.600
这个dashboard界面

28:45.600 --> 28:47.600
然后再一跳转

28:47.600 --> 28:48.600
你会发现

28:48.600 --> 28:49.600
我是传递过来的123

28:49.600 --> 28:51.600
并且它跳转到youder配置

28:51.600 --> 28:53.600
这是没有问题的对不对

28:53.600 --> 28:54.600
那之后

28:54.600 --> 28:55.600
我们跳转到

28:55.600 --> 28:56.600
这个首页面怎么办呢

28:56.600 --> 28:57.600
其实首页面

28:57.600 --> 28:58.600
和它的这个做法

28:58.600 --> 28:59.600
非常相似

28:59.600 --> 29:00.600
我们直接的

29:00.600 --> 29:01.600
这个里面

29:01.600 --> 29:02.600
go target配置的时候

29:02.600 --> 29:03.600
我们是不是

29:03.600 --> 29:04.600
也可以给它

29:04.600 --> 29:05.600
进行一个什么

29:05.600 --> 29:06.600
直的传递

29:06.600 --> 29:07.600
对吧

29:07.600 --> 29:08.600
那我直接传一个跟路径

29:08.600 --> 29:09.600
是不是它就可以

29:09.600 --> 29:11.600
进行一个跳转

29:11.600 --> 29:12.600
咱们来测试一下

29:12.600 --> 29:13.600
OK

29:13.600 --> 29:14.600
没问题

29:14.600 --> 29:15.600
这个是跳转的

29:15.600 --> 29:16.600
首页面对不对

29:16.600 --> 29:18.600
那这个是跳转的youder界面

29:18.600 --> 29:20.600
跳转到一个图表界面

29:20.600 --> 29:21.600
三个界面

29:21.600 --> 29:22.600
然后

29:22.600 --> 29:24.600
使用两种形式的跳转

29:24.600 --> 29:25.600
第一种

29:25.600 --> 29:26.600
使用link标权的形式

29:26.600 --> 29:27.600
第二种

29:27.600 --> 29:28.600
就是使用这种

29:28.600 --> 29:29.600
我们onclick

29:29.600 --> 29:30.600
事件加上hastory

29:30.600 --> 29:31.600
API的形式

29:31.600 --> 29:32.600
来进行跳转

29:32.600 --> 29:33.600
以上这些

29:33.600 --> 29:35.600
那就是一个路由的

29:35.600 --> 29:36.600
基本使用方法

29:36.600 --> 29:38.600
那我们再来回忆一下

29:38.600 --> 29:39.600
本节课的内容

29:39.600 --> 29:40.600
首先呢

29:40.600 --> 29:42.600
我们是了解了一下wumi

29:42.600 --> 29:44.600
那对wumi的一些特性

29:44.600 --> 29:46.600
我们有了一个简单的掌握

29:46.600 --> 29:47.600
并且呢

29:47.600 --> 29:49.600
我们可以通过wumi快速的

29:49.600 --> 29:51.600
实现一个应用的大件

29:51.600 --> 29:52.600
那这里面

29:52.600 --> 29:53.600
我们要明确一点

29:53.600 --> 29:54.600
首先第一

29:54.600 --> 29:55.600
wumi

29:55.600 --> 29:56.600
它呢

29:56.600 --> 29:57.600
是分两个版本的

29:57.600 --> 29:58.600
第一个是wumi2

29:58.600 --> 29:59.600
以及这个

29:59.600 --> 30:01.600
现代我们使用的wumi3版本

30:01.600 --> 30:02.600
那我们在这个

30:02.600 --> 30:04.600
整个案例里面制作啊

30:04.600 --> 30:05.600
包括我们

30:05.600 --> 30:06.600
脚手架创建的这种命令呢

30:06.600 --> 30:07.600
它是wumi3

30:07.600 --> 30:08.600
特有的一个命令

30:08.600 --> 30:10.600
wumi2和wumi3啊

30:10.600 --> 30:11.600
它有一定的区别

30:11.600 --> 30:12.600
在这个API

30:12.600 --> 30:14.600
以及我们页面结构上

30:14.600 --> 30:15.600
有一些区别

30:15.600 --> 30:17.600
包括我们动态路由的一个设定

30:17.600 --> 30:18.600
如果说

30:18.600 --> 30:19.600
同学们感兴趣的话

30:19.600 --> 30:21.600
可以去查看一下

30:21.600 --> 30:22.600
wumi2

30:22.600 --> 30:23.600
用wumi2的形式

30:23.600 --> 30:24.600
也可以进行一个

30:24.600 --> 30:25.600
工程的大件

30:25.600 --> 30:26.600
来比较一下

30:26.600 --> 30:27.600
他们之间的一个区别

30:27.600 --> 30:28.600
如果说

30:28.600 --> 30:29.600
你使用了wumi3

30:29.600 --> 30:30.600
那在这个里面

30:30.600 --> 30:31.600
我们要知道一下

30:31.600 --> 30:32.600
wumi3呢

30:32.600 --> 30:34.600
莫认识内置TypeScript的

30:34.600 --> 30:35.600
但是呢

30:35.600 --> 30:36.600
我们可以忽略TypeScript的

30:36.600 --> 30:38.600
我们正常的使用这种

30:38.600 --> 30:39.600
jsx的语法

30:39.600 --> 30:41.600
也是可以进行一些

30:41.600 --> 30:42.600
工程的创建的

30:42.600 --> 30:43.600
这个是没有任何问题的

30:43.600 --> 30:45.600
这个我们要知道一下

30:45.600 --> 30:46.600
不管是wumi2

30:46.600 --> 30:47.600
还是wumi3

30:47.600 --> 30:48.600
他们里跟里面呢

30:48.600 --> 30:49.600
都是内置了

30:49.600 --> 30:50.600
less

30:50.600 --> 30:52.600
这种预编业处理器的语法

30:52.600 --> 30:53.600
包括我们的这个

30:53.600 --> 30:55.600
安底战的这个UI裤

30:55.600 --> 30:57.600
它已经是给我们集成了

30:57.600 --> 30:58.600
之后呢

30:58.600 --> 30:59.600
我们在使用的时候

30:59.600 --> 31:01.600
只要是正确的引入

31:01.600 --> 31:02.600
就ok了

31:02.600 --> 31:03.600
后面呢

31:03.600 --> 31:04.600
我们又看了一下

31:04.600 --> 31:06.600
这个路由的一个使用

31:06.600 --> 31:07.600
路由创建呢

31:07.600 --> 31:09.600
其实我们要注意的就是什么呢

31:09.600 --> 31:11.600
因为我们在这个规则

31:11.600 --> 31:13.600
并不一定是完全遵循

31:13.600 --> 31:15.600
它的这个

31:15.600 --> 31:17.600
定义好的这个规则

31:17.600 --> 31:19.600
来制定这个创建

31:19.600 --> 31:21.600
我们的路由文件

31:21.600 --> 31:22.600
所以说怎么办呢

31:22.600 --> 31:23.600
我们在wumi2c下

31:23.600 --> 31:24.600
显然我们自己定义的

31:24.600 --> 31:26.600
这个路由规则生效的话

31:26.600 --> 31:27.600
那这个时候呢

31:27.600 --> 31:28.600
我们就要把这个

31:28.600 --> 31:30.600
入式选项给干掉

31:30.600 --> 31:31.600
如果说不干掉

31:31.600 --> 31:32.600
入式选项的话

31:32.600 --> 31:33.600
那这个里面呢

31:33.600 --> 31:34.600
你就要自己

31:34.600 --> 31:36.600
去要命令来进行创建

31:36.600 --> 31:37.600
它呢

31:37.600 --> 31:38.600
才会给你进行一个

31:38.600 --> 31:39.600
页面的自动添加

31:39.600 --> 31:41.600
否则是没办法进行

31:41.600 --> 31:42.600
自动添加的

31:43.600 --> 31:44.600
我们这种自定义

31:44.600 --> 31:45.600
创建的方式

31:45.600 --> 31:46.600
在哪个里面查看呢

31:46.600 --> 31:47.600
可以在这种

31:47.600 --> 31:49.600
src文件家下面

31:49.600 --> 31:50.600
这里面有一个

31:50.600 --> 31:51.600
靠靠里面呢

31:51.600 --> 31:53.600
有一个入式点ts

31:53.600 --> 31:54.600
只要是我们在

31:54.600 --> 31:55.600
这个pages下面

31:55.600 --> 31:56.600
指定好一个文件

31:56.600 --> 31:57.600
然后呢

31:57.600 --> 31:58.600
它在这个里面

31:58.600 --> 31:59.600
就默认的给我们生成

31:59.600 --> 32:00.600
一个路由规则

32:00.600 --> 32:01.600
大家可以看一下

32:01.600 --> 32:03.600
像这种dashball的

32:03.600 --> 32:04.600
我们后期定义的

32:04.600 --> 32:06.600
包括这种ts的

32:06.600 --> 32:07.600
它是不是都给我们添加进去了

32:07.600 --> 32:08.600
比如说我们这里面

32:08.600 --> 32:09.600
可以给它改一个名字

32:09.600 --> 32:10.600
那这个叫什么

32:10.600 --> 32:11.600
我们原来叫ts的

32:11.600 --> 32:13.600
那我们叫ts的1

32:13.600 --> 32:14.600
当我改完

32:14.600 --> 32:15.600
tess的1之后

32:15.600 --> 32:17.600
那这个时候你就会发现

32:17.600 --> 32:18.600
这里面是不是

32:18.600 --> 32:19.600
已经有发生更改了

32:19.600 --> 32:20.600
所以说我们不用去

32:20.600 --> 32:22.600
搞考虑什么呢

32:22.600 --> 32:23.600
路由的创建规则

32:23.600 --> 32:25.600
只需要进行

32:25.600 --> 32:27.600
你的页面定义就ok了

32:27.600 --> 32:28.600
然后同时呢

32:28.600 --> 32:30.600
我们在这个使用的时候

32:30.600 --> 32:32.600
遵循我们定义的页面

32:32.600 --> 32:34.600
里面的这个文件的名字

32:34.600 --> 32:35.600
就是我们路由的名字

32:35.600 --> 32:37.600
那只要遵循这点就ok了

32:37.600 --> 32:38.600
这个就是路由

32:38.600 --> 32:40.600
创建的一个根本原则

32:40.600 --> 32:41.600
那第二个呢

32:41.600 --> 32:42.600
就是我们啊

32:42.600 --> 32:43.600
在做路由的时候

32:43.600 --> 32:45.600
会考虑到使用模板

32:45.600 --> 32:46.600
为什么使用模板

32:46.600 --> 32:47.600
在这里面

32:47.600 --> 32:48.600
已经详细的给同学们

32:48.600 --> 32:49.600
做过介绍了

32:49.600 --> 32:50.600
就是区分

32:50.600 --> 32:52.600
我们不同路由下面

32:52.600 --> 32:54.600
指定的公共渲染部分

32:54.600 --> 32:55.600
我们手页面里面

32:55.600 --> 32:56.600
会有一些

32:56.600 --> 32:57.600
头部信息啊

32:57.600 --> 32:59.600
还有这个侧边栏的一个渲染

32:59.600 --> 33:00.600
那这时候

33:00.600 --> 33:01.600
我们就可以指定一个模板

33:01.600 --> 33:03.600
那包括我们这个手页面

33:03.600 --> 33:04.600
手页面啊

33:04.600 --> 33:05.600
包括我们的这个登录界面

33:05.600 --> 33:06.600
登录界面内容啊

33:06.600 --> 33:07.600
比较单一

33:07.600 --> 33:08.600
它就是一个表单

33:08.600 --> 33:09.600
那对这种表单处理呢

33:09.600 --> 33:10.600
我们可以单独的

33:10.600 --> 33:11.600
再使用一个模板

33:11.600 --> 33:12.600
这样呢

33:12.600 --> 33:13.600
我们就会把这个

33:13.600 --> 33:14.600
头部和侧边栏

33:14.600 --> 33:15.600
这些公共组件

33:15.600 --> 33:17.600
专门存放在一个模板里面

33:17.600 --> 33:18.600
供指定的路由

33:18.600 --> 33:19.600
来进行渲染

33:19.600 --> 33:21.600
就是这样一个规则

33:21.600 --> 33:22.600
之后呢

33:22.600 --> 33:23.600
我们再看一下

33:23.600 --> 33:25.600
这个刚才说的这个路由跳转

33:25.600 --> 33:27.600
路由跳转无非就这两种形式

33:27.600 --> 33:28.600
同学们只要遵循

33:28.600 --> 33:29.600
这两种形式

33:29.600 --> 33:31.600
进行一个指定的界面跳转

33:31.600 --> 33:32.600
就OK了

33:32.600 --> 33:34.600
同时让我们使用模板之后

33:34.600 --> 33:35.600
因为模板它里面的内容

33:35.600 --> 33:36.600
是比较丰富的

33:36.600 --> 33:38.600
比如说我们看这个Layout

33:38.600 --> 33:40.600
Layout里面既有这个

33:40.600 --> 33:42.600
也就是说当前选的路由界面

33:42.600 --> 33:43.600
还有呢

33:43.600 --> 33:44.600
我们这个History API

33:44.600 --> 33:45.600
那这个History API呢

33:45.600 --> 33:47.600
我们就可以拿到它之后

33:47.600 --> 33:49.600
进行一些指定的

33:49.600 --> 33:51.600
通过我们事件的形式

33:51.600 --> 33:52.600
来进行路由跳转

33:52.600 --> 33:54.600
这种模式来进行

33:54.600 --> 33:56.600
页面的一个改变

33:56.600 --> 33:58.600
包括我们动态路由的使用

33:58.600 --> 33:59.600
当然本案例里面

33:59.600 --> 34:00.600
我们是不会涉及到

34:00.600 --> 34:02.600
动态路由的一个使用的

34:02.600 --> 34:03.600
如果说同学们

34:03.600 --> 34:05.600
有这种需求的话

34:05.600 --> 34:06.600
那你关注一下

34:06.600 --> 34:07.600
其实动态路由使用

34:07.600 --> 34:08.600
在5米3里面

34:08.600 --> 34:10.600
它是用一个中华2

34:10.600 --> 34:11.600
在5米2里面

34:11.600 --> 34:12.600
它是用一个DollarFour

34:12.600 --> 34:13.600
这样的我们可以

34:13.600 --> 34:15.600
也可以通过5米2

34:15.600 --> 34:16.600
去搭建一个工程

34:16.600 --> 34:17.600
来试一下它的

34:17.600 --> 34:18.600
动态路由

34:18.600 --> 34:19.600
就OK了

34:19.600 --> 34:20.600
好的

34:20.600 --> 34:21.600
这些就是

34:21.600 --> 34:23.600
我们本节课的内容

34:23.600 --> 34:25.600
然后我们下节课开始

34:25.600 --> 34:26.600
就一步一步的

34:26.600 --> 34:28.600
来完成我们案例里面的

34:28.600 --> 34:30.600
相关内容

34:30.600 --> 34:31.600
我们这几课就到这里

34:31.600 --> 34:32.600
谢谢大家

