WEBVTT

00:01.840 --> 00:06.640
各位同学 大家好 这节课我们继续案例制作的一个学习

00:06.640 --> 00:11.640
那么本节课我们来实现一下主页面的基本结构搭建

00:11.640 --> 00:16.840
在搭建主页面的基本结构之前我们要考虑一个问题

00:16.840 --> 00:20.840
就是说我们之前已经讲过的一个问题

00:20.840 --> 00:23.840
如果说用户在没有登录的情况下

00:23.840 --> 00:27.840
其实主页面它是没办法进行访问的

00:27.840 --> 00:29.840
我们可以来看一下这个效果

00:29.840 --> 00:33.840
比如说当我们在没有登录的情况下

00:33.840 --> 00:37.840
如果说我强行的去访问主页面的内容

00:37.840 --> 00:40.840
这个时候你会发现这里面有一个拦截

00:40.840 --> 00:44.840
也就是说它保证了用户在登录的情况下

00:44.840 --> 00:49.840
才可以进行我们相关的主程序内容进行一个查看

00:49.840 --> 00:55.840
所以说这些课我们首先要把路由守卫来做一个处理

00:55.840 --> 00:59.840
守卫我们本质上是需要实现什么功能呢

00:59.840 --> 01:02.840
就是说当用户为登录状态时

01:02.840 --> 01:05.840
首页面的相关信息用户无法进行访问

01:05.840 --> 01:10.840
同时我们会有一个跳转到登录页面的这样一个操作

01:10.840 --> 01:15.840
也就是说我们去登录页面强行的给它进行一个跳转

01:15.840 --> 01:17.840
如何来实现

01:17.840 --> 01:21.840
这个里面有好多种方式来实现这种行为

01:21.840 --> 01:27.840
现在我们使用底瓦的一个subscription的一个事件派发来进行实现

01:27.840 --> 01:30.840
这个是它的一个参考文档

01:30.840 --> 01:34.840
我们可以来看一下这个里面我们打开它

01:34.840 --> 01:37.840
打开它稍微有点慢

01:37.840 --> 01:41.840
我们打开之后可以看到subscription的一个描述

01:41.840 --> 01:45.840
以kvalue的格式定义subscription

01:45.840 --> 01:49.840
然后subscription是用于订阅一个数据员

01:49.840 --> 01:54.840
根据相应的dpatch然后去出发相应的action

01:54.840 --> 01:56.840
最关键的一点是什么呢

01:56.840 --> 02:00.840
它在APP死大的时候才可以执行

02:00.840 --> 02:04.840
所以说这样就保证我们程序在加载之前

02:04.840 --> 02:07.840
也就是说没有进入任何一个组件之前

02:07.840 --> 02:13.840
可以进行一个当前用户是否登录的这样一个判定操作

02:13.840 --> 02:16.840
那接下来我们就回到界面里面

02:16.840 --> 02:20.840
用代码的形式来实现一下我们的路由守卫

02:20.840 --> 02:25.840
首先咱们说这种路由守卫是在每个组件里面都会应到的

02:25.840 --> 02:30.840
所以说我们这个时候定义状态可以在全局来进行状态的处理

02:30.840 --> 02:34.840
这个时候我们在全局定一个models

02:34.840 --> 02:38.840
models下面我们创建一个command.js

02:38.840 --> 02:42.840
点js文件然后我们导出一个对象

02:42.840 --> 02:46.840
一个sput之后是default

02:46.840 --> 02:51.840
首先我们规定它的命名空间names space

02:51.840 --> 02:55.840
我们就叫command然后我们再创建一个state

02:55.840 --> 02:59.840
那这个里面可以存放一些全局的

02:59.840 --> 03:03.840
我们使用到的一些状态出示值在这个里面存放

03:03.840 --> 03:08.840
之后我们就可以通过这种subscriptions的形式来定义

03:08.840 --> 03:13.840
它是一个对象我们这里面第一步使用setup来做一个设置

03:13.840 --> 03:17.840
setup然后这个里面其实它是一个函数

03:17.840 --> 03:21.840
我们可以打印它的一个默认参数adgements

03:21.840 --> 03:25.840
我们来看一眼回到我们的界面当中

03:25.840 --> 03:29.840
当我们刷新之后你会发现这个时候会有打印值的

03:29.840 --> 03:33.840
打印值我们看第一项这里面默认有一个hissory

03:33.840 --> 03:36.840
然后还有一个是dispatch

03:36.840 --> 03:39.840
那也就是说给我们两个默认形参

03:39.840 --> 03:42.840
这个第一个是dispatch做一个分发

03:42.840 --> 03:45.840
第二个是对路由的一个处理

03:45.840 --> 03:49.840
我们回来把两个参数都来给它写一下

03:49.840 --> 03:52.840
它是以对象的形式进行传递的

03:52.840 --> 03:55.840
我们先写一下把它给解构出来

03:55.840 --> 03:57.840
第一个是dispatch

03:57.840 --> 04:00.840
第二个我们解析路由对象

04:00.840 --> 04:03.840
解析出来之后我们要做什么

04:03.840 --> 04:04.840
是不是初始化的时候

04:04.840 --> 04:06.840
其实我们看程序执行的时候

04:06.840 --> 04:07.840
它就会执行对不对

04:07.840 --> 04:09.840
那当然它会执行之后

04:09.840 --> 04:11.840
那我们现在是不是就可以做事件派发了

04:11.840 --> 04:15.840
也就是说从现在我们就可以来进行一个处理了

04:15.840 --> 04:16.840
对不对

04:16.840 --> 04:19.840
那这时候给同学们写一个注释这个叫什么

04:19.840 --> 04:24.840
初始化我们要查询用户是否登录

04:24.840 --> 04:30.840
这个叫初始化查询用户是否登录

04:30.840 --> 04:33.840
那这个里面我们要分发一个事件

04:33.840 --> 04:34.840
对不对

04:34.840 --> 04:35.840
那我这个里面

04:35.840 --> 04:37.840
记住这个是在app

04:37.840 --> 04:41.840
也就是说我们这个应用app.start的

04:41.840 --> 04:44.840
时候来进行一个执行

04:44.840 --> 04:45.840
这个里面

04:45.840 --> 04:51.840
app.start阶段进行执行

04:51.840 --> 04:52.840
OK

04:52.840 --> 04:55.840
行了之后咱们就开始进行事件的一个派发吧

04:55.840 --> 04:57.840
那我既然已经有dispatch了

04:57.840 --> 05:00.840
我就用dispatch的形式来给它做派发

05:00.840 --> 05:03.840
首先我们给它规定一个tap

05:03.840 --> 05:08.840
那tap我们就叫query user login status

05:08.840 --> 05:10.840
或者叫query user login

05:10.840 --> 05:13.840
查询用户是否登录

05:13.840 --> 05:14.840
query user login之后

05:14.840 --> 05:15.840
那我这里面

05:15.840 --> 05:16.840
如果说它没登录

05:16.840 --> 05:18.840
那是不是还得挑战界面

05:18.840 --> 05:19.840
所以说那这个里面

05:19.840 --> 05:22.840
我们在query user login这个事件里面

05:22.840 --> 05:24.840
我们得给它进行路由跳转

05:24.840 --> 05:25.840
有可能

05:25.840 --> 05:27.840
这个时候我们给它传递一个参数

05:27.840 --> 05:28.840
payload

05:28.840 --> 05:29.840
payload里面我们传什么

05:29.840 --> 05:31.840
就把我们获取到的这个路由对象

05:31.840 --> 05:34.840
给它进行一个传递就可以了

05:34.840 --> 05:35.840
OK

05:35.840 --> 05:36.840
定义好了之后

05:36.840 --> 05:38.840
那因为query user login

05:38.840 --> 05:40.840
里面我们去查询的时候

05:40.840 --> 05:44.840
这个时候会涉及到一个数据的请求

05:44.840 --> 05:46.840
那这时候只要是做数据请求

05:46.840 --> 05:48.840
我们之前也明确了

05:48.840 --> 05:50.840
那我们这个里面使用什么efficoss

05:50.840 --> 05:51.840
对不对

05:52.840 --> 05:53.840
好了使用efficoss

05:53.840 --> 05:55.840
generator寒数的形式

05:55.840 --> 05:58.840
我们先定义query user login

05:58.840 --> 05:59.840
那这里面

05:59.840 --> 06:01.840
把我们传递过来的这个payload

06:01.840 --> 06:03.840
来进行一个获取

06:03.840 --> 06:05.840
那莫人你也可以空对象

06:05.840 --> 06:06.840
当然我们这个里面

06:06.840 --> 06:08.840
已经传直了很明确

06:08.840 --> 06:10.840
所以说我也不给空对象了

06:10.840 --> 06:11.840
一个是put

06:11.840 --> 06:13.840
还有一个是call

06:13.840 --> 06:15.840
call就作为我们这个

06:15.840 --> 06:17.840
进行一个事件的分发对不对

06:17.840 --> 06:18.840
那这个时候

06:18.840 --> 06:19.840
我们首先

06:19.840 --> 06:21.840
怎么来进行判断

06:21.840 --> 06:23.840
那其实判断的条件是什么呢

06:23.840 --> 06:25.840
就是看我们当前的这个路由里面

06:25.840 --> 06:27.840
也就是说我们这个路由对象里面

06:27.840 --> 06:28.840
它的路径是啥

06:28.840 --> 06:29.840
你想

06:29.840 --> 06:31.840
如果说我们是在这个登录界面

06:31.840 --> 06:33.840
或者是在这个忘记密码界面

06:33.840 --> 06:36.840
它里面都会包含一个 users

06:36.840 --> 06:38.840
如果说你要是已经登录的话

06:38.840 --> 06:40.840
那假如说我在这个里面

06:40.840 --> 06:41.840
已经完成了案例里面

06:41.840 --> 06:42.840
给同学们试一下

06:42.840 --> 06:44.840
如果说你已经登录了

06:44.840 --> 06:45.840
那这个时候呢

06:45.840 --> 06:47.840
你肯定是不会有 users

06:47.840 --> 06:50.840
这个我们里面的这个路径了对不对

06:50.840 --> 06:51.840
包括department

06:51.840 --> 06:52.840
或者是来往都有可能

06:52.840 --> 06:54.840
但是绝对不会有 users

06:54.840 --> 06:55.840
那这个时候呢

06:55.840 --> 06:57.840
我们就可以通过

06:57.840 --> 07:00.840
获取到的这个路由里面的

07:00.840 --> 07:02.840
文件路径来进行一个判断

07:02.840 --> 07:04.840
那这里面就会有两种情况

07:04.840 --> 07:06.840
来进行一个处理

07:06.840 --> 07:07.840
哪两种情况呢

07:07.840 --> 07:08.840
首先啊

07:08.840 --> 07:09.840
我们这个里面

07:09.840 --> 07:14.280
会要判定用户

07:14.280 --> 07:17.280
当前的一个路径

07:17.280 --> 07:20.280
当前的访问路径

07:20.280 --> 07:21.280
那如果说访问路径

07:21.280 --> 07:23.280
假如说他要是这个

07:23.280 --> 07:26.280
用户的注册和忘记密码这一块

07:26.280 --> 07:27.280
那我不限制他

07:27.280 --> 07:29.280
如果说你要不是这个路径呢

07:29.280 --> 07:30.280
那这个时候

07:30.280 --> 07:32.280
我们就得要做一件事情了对不对

07:32.280 --> 07:33.280
所以说

07:33.280 --> 07:34.280
那这个我们要做

07:34.280 --> 07:35.280
判定用户当前访问路径

07:35.280 --> 07:36.280
前提是什么

07:36.280 --> 07:38.280
我们要得把这个

07:38.280 --> 07:40.280
用户当前访问的这个路径

07:40.280 --> 07:41.280
是不是得获取出来啊

07:41.280 --> 07:42.280
所以说那这个时候

07:42.280 --> 07:43.280
因为我们传旨了

07:43.280 --> 07:44.280
我们可以看一下

07:44.280 --> 07:47.280
打印一下我们的这个Payload

07:48.280 --> 07:49.280
传递过来的这个指示

07:49.280 --> 07:51.280
我们一刷新界面之后

07:51.280 --> 07:52.280
这里面有一个Hate Story

07:52.280 --> 07:53.280
Hate Story里面呢

07:53.280 --> 07:55.280
就会有一个Location对象

07:55.280 --> 07:56.280
对不对

07:56.280 --> 07:57.280
那有Location对象

07:57.280 --> 07:58.280
Location对象里面

07:58.280 --> 08:00.280
就有我们的Path Name

08:00.280 --> 08:01.280
Path Name

08:01.280 --> 08:02.280
刚才咱们说了

08:02.280 --> 08:03.280
只要保安Udors

08:03.280 --> 08:04.280
那这个时候

08:04.280 --> 08:06.280
他是不是就是从这个

08:06.280 --> 08:08.280
不需要全线的界面

08:08.280 --> 08:09.280
来进行访问呢

08:09.280 --> 08:10.280
对不对

08:10.280 --> 08:11.280
那这个时候

08:11.280 --> 08:12.280
我们就可以来做一个判定了

08:12.280 --> 08:13.280
那怎么办

08:13.280 --> 08:15.280
我们来给他定义一下

08:15.280 --> 08:16.280
给他解构出来吧

08:16.280 --> 08:17.280
那这时候呢

08:17.280 --> 08:19.280
我们要解构一些职

08:19.280 --> 08:20.280
Counts他一会要跳转

08:20.280 --> 08:21.280
所以说Hate Story

08:21.280 --> 08:23.280
肯定要解构对吧

08:23.280 --> 08:24.280
那我们从Payload里面

08:24.280 --> 08:25.280
来进行解构

08:25.280 --> 08:27.280
除了解构Hate Story之外

08:27.280 --> 08:29.280
我们还要解构什么呢

08:29.280 --> 08:30.280
我们的这个Location

08:30.280 --> 08:31.280
所以说呢

08:31.280 --> 08:32.280
我在这个里面

08:32.280 --> 08:34.280
再写一下Location

08:35.280 --> 08:36.280
Location呢

08:36.280 --> 08:38.280
其实我们解析Location的什么

08:38.280 --> 08:41.280
我们解析Location里面的Path Name

08:41.280 --> 08:42.280
那这个里面

08:42.280 --> 08:44.280
我们再给他解析一下

08:44.280 --> 08:45.280
Path Name

08:45.280 --> 08:46.280
OK

08:46.280 --> 08:47.280
全部都拿出来之后

08:47.280 --> 08:48.280
这应该是小写的

08:48.280 --> 08:50.280
我们来打印一下

08:50.280 --> 08:51.280
打印两个值

08:51.280 --> 08:53.280
一个是我们解析出来的

08:53.280 --> 08:54.280
Hate Story

08:54.280 --> 08:55.280
OK

08:55.280 --> 08:56.280
还有一个是我们的

08:56.280 --> 08:57.280
这个Path Name

08:57.280 --> 08:58.280
咱们看能不能

08:58.280 --> 09:00.280
正确的一个获取啊

09:01.280 --> 09:02.280
没问题对不对

09:02.280 --> 09:03.280
第一个路径

09:03.280 --> 09:05.280
第一个是我们的路径

09:05.280 --> 09:06.280
第二个呢

09:06.280 --> 09:07.280
是我们的这个路径

09:07.280 --> 09:08.280
都获取到了

09:08.280 --> 09:09.280
那获取到了之后

09:09.280 --> 09:11.280
我们现在就可以来进行一个什么

09:11.280 --> 09:12.280
判断了对吧

09:12.280 --> 09:13.280
也就是说

09:13.280 --> 09:15.280
看他当前的这个法文路径

09:15.280 --> 09:17.280
那这个时候我们来判断

09:17.280 --> 09:19.280
如果说我们的这个Path Name

09:19.280 --> 09:21.280
假如说他要不等于什么呢

09:21.280 --> 09:24.280
不等于我们当前的这个路径

09:24.280 --> 09:26.280
叫User's Login

09:26.280 --> 09:28.280
除了这两种情况

09:28.280 --> 09:29.280
基本上都是要全线的

09:29.280 --> 09:30.280
那这个里面

09:30.280 --> 09:31.280
并且呢

09:31.280 --> 09:33.280
或者是我们Path Name

09:33.280 --> 09:36.280
不等于我们的这个反斜杠

09:36.280 --> 09:37.280
Sorry啊

09:37.280 --> 09:39.280
把这个里面来写一下

09:39.280 --> 09:41.280
User's 下面的

09:41.280 --> 09:43.280
我们的一个什么呢

09:43.280 --> 09:45.280
Forget Password

09:45.280 --> 09:46.280
对吧

09:46.280 --> 09:49.280
我们的这个忘记密码的这个界面

09:49.280 --> 09:50.280
如果说

09:50.280 --> 09:51.280
哎这个里面

09:51.280 --> 09:52.280
Forget

09:54.280 --> 09:56.280
Forget Password

09:56.280 --> 09:57.280
这个也写错了

09:57.280 --> 09:58.280
把它来调整一下

09:58.280 --> 10:00.280
如果说你不等于这两个

10:00.280 --> 10:01.280
那是不是一种情况

10:01.280 --> 10:03.280
否则如果说你要等于的话

10:03.280 --> 10:04.280
那这个里面

10:04.280 --> 10:05.280
其实现在就是说

10:05.280 --> 10:06.280
可以理解就是什么

10:06.280 --> 10:08.280
不需要进行干预

10:08.280 --> 10:09.280
对不对

10:09.280 --> 10:11.280
也就是说不需要进行拦截啊

10:11.280 --> 10:12.280
这个里面因为什么

10:12.280 --> 10:13.280
因为他这个

10:13.280 --> 10:14.280
本身现在访问的

10:14.280 --> 10:15.280
这两个界面呢

10:15.280 --> 10:16.280
是不需要任何全线的

10:16.280 --> 10:17.280
所以说呢

10:17.280 --> 10:19.280
我们这里面就不需要拦截了

10:19.280 --> 10:21.280
那如果说需要拦截呢

10:21.280 --> 10:23.280
这个里面就是需要进行一个什么

10:23.280 --> 10:25.280
涉及到全线的界面了

10:25.280 --> 10:26.280
那涉及到全面

10:26.280 --> 10:28.280
全线的这个界面里面

10:28.280 --> 10:30.280
我们怎么来判定他登陆呢

10:30.280 --> 10:32.280
因为我们如果说要登陆

10:32.280 --> 10:33.280
可以看一下这个

10:33.280 --> 10:34.280
我们已经实现这个啊

10:34.280 --> 10:36.280
假如说我们要登陆之后

10:36.280 --> 10:37.280
那这个里面呢

10:37.280 --> 10:39.280
是需要进行一些值的存储的

10:39.280 --> 10:40.280
呃

10:40.280 --> 10:41.280
我们可以看

10:41.280 --> 10:42.280
application

10:42.280 --> 10:43.280
这里面有一个seture

10:43.280 --> 10:44.280
这里面空空的

10:44.280 --> 10:45.280
什么都没有啊

10:45.280 --> 10:46.280
当我登陆之后

10:46.280 --> 10:48.280
idemen123QWE

10:48.280 --> 10:49.280
好

10:49.280 --> 10:50.280
当我登陆完成之后

10:50.280 --> 10:52.280
这里面就会有三项纸

10:52.280 --> 10:53.280
首先第一个

10:53.280 --> 10:55.280
是我们用户全线

10:55.280 --> 10:57.280
身份的一个token

10:57.280 --> 10:58.280
那这个token呢

10:58.280 --> 10:59.280
我们给他保存一下

10:59.280 --> 11:00.280
第二个呢

11:00.280 --> 11:02.280
是我们的用户基本信息

11:02.280 --> 11:03.280
也就是说

11:03.280 --> 11:05.280
现在当前登陆的用户是谁

11:05.280 --> 11:07.280
然后里面叫什么名

11:07.280 --> 11:08.280
什么身份

11:08.280 --> 11:09.280
还有一个呢

11:09.280 --> 11:10.280
是我们的路由表

11:10.280 --> 11:12.280
因为我们登陆主界面之后

11:12.280 --> 11:14.280
这个时候呢

11:14.280 --> 11:16.280
你是需要根据路由表来进行

11:16.280 --> 11:19.280
左侧界面的一个渲染处理的

11:19.280 --> 11:21.280
所以说这三个指示

11:21.280 --> 11:22.280
如果说你已经登陆

11:22.280 --> 11:23.280
那这个时候

11:23.280 --> 11:25.280
我们会存到这个seture里面

11:25.280 --> 11:27.280
那假如说你没有登陆

11:27.280 --> 11:28.280
这几个指示你是不是都没有啊

11:28.280 --> 11:29.280
那这里面

11:29.280 --> 11:31.280
我们就可以来判定一下

11:31.280 --> 11:32.280
第一种是什么呢

11:32.280 --> 11:33.280
我们来判定一下

11:33.280 --> 11:34.280
如果说

11:34.280 --> 11:36.280
咱们在这个里面来做一些事

11:36.280 --> 11:37.280
就是说当前

11:37.280 --> 11:40.280
你没有刚才我们判定的这些值

11:40.280 --> 11:41.280
那第一个就是

11:41.280 --> 11:45.280
非SessionStorage.GateItem

11:45.280 --> 11:47.280
假如说你要没有什么呢

11:47.280 --> 11:50.280
没有我们的这个UserProfile

11:50.280 --> 11:51.280
OK

11:51.280 --> 11:52.280
这是第一种

11:52.280 --> 11:53.280
假如说你没有它

11:53.280 --> 11:54.280
或者说什么呢

11:54.280 --> 11:55.280
我们再来一个

11:55.280 --> 11:57.280
如果说没有它的话

11:57.280 --> 11:58.280
或者说

11:58.280 --> 12:00.280
没有我们SessionStorage里面的

12:00.280 --> 12:01.280
RouterList的

12:01.280 --> 12:02.280
对不对

12:02.280 --> 12:03.280
没有这个路由表

12:03.280 --> 12:06.280
我们把它粘贴一下

12:06.280 --> 12:07.280
OK

12:07.280 --> 12:08.280
第二个

12:08.280 --> 12:10.280
我们再来做一下

12:10.280 --> 12:12.280
第三种情况是啥呢

12:12.280 --> 12:13.280
第三种没有这个

12:13.280 --> 12:15.280
我们的一个什么的token

12:15.280 --> 12:18.280
那这两个我给它换一下

12:18.280 --> 12:21.280
如果说你没有用户的配置文件

12:21.280 --> 12:23.280
或者说你没有token

12:23.280 --> 12:25.280
然后你或者说

12:25.280 --> 12:26.280
没有这个RouterList的

12:26.280 --> 12:28.280
只要有一种情况满足了

12:28.280 --> 12:29.280
那就说明什么

12:29.280 --> 12:31.280
你现在肯定是登陆进去

12:31.280 --> 12:32.280
反正你也不成功

12:32.280 --> 12:33.280
那我怎么办

12:33.280 --> 12:35.280
我直接就给你监听到

12:35.280 --> 12:36.280
那这个时候

12:36.280 --> 12:38.280
我们就监听一个什么的

12:38.280 --> 12:41.280
这个里面其实就是强行登陆的

12:41.280 --> 12:42.280
对吧

12:42.280 --> 12:43.280
那这个时候

12:43.280 --> 12:45.280
就我们要做一个拦截处理

12:45.280 --> 12:46.280
咱们来看一下

12:46.280 --> 12:48.280
我们能不能给它拦截住

12:48.280 --> 12:49.280
那这个时候

12:49.280 --> 12:50.280
我们刷新界面

12:50.280 --> 12:51.280
OK

12:51.280 --> 12:52.280
12行

12:52.280 --> 12:53.280
12行

12:53.280 --> 12:54.280
咱们来找一下

12:54.280 --> 12:55.280
现在12行

12:55.280 --> 12:58.280
如果说Personame不等于UserLogan

12:58.280 --> 13:00.280
或者是不等于Foguide Password的

13:00.280 --> 13:01.280
那这个时候

13:01.280 --> 13:02.280
让它不等于

13:02.280 --> 13:03.280
咱们来看一下

13:03.280 --> 13:04.280
现在肯定不等于

13:04.280 --> 13:05.280
对吧

13:05.280 --> 13:06.280
跳转主界面

13:06.280 --> 13:07.280
主界面这个时候

13:07.280 --> 13:08.280
显示强行登陆

13:08.280 --> 13:10.280
那你这个强行登陆

13:10.280 --> 13:11.280
我怎么办呢

13:11.280 --> 13:13.280
我直接的肯定不让你做这个事

13:13.280 --> 13:14.280
对吧

13:14.280 --> 13:15.280
那我们要黑丝刀锐

13:15.280 --> 13:16.280
给它做一个什么

13:16.280 --> 13:17.280
点Replace

13:17.280 --> 13:19.280
给它做一个跳转

13:19.280 --> 13:21.280
强行的让你去来登陆一下

13:21.280 --> 13:23.280
那登陆界面是什么

13:23.280 --> 13:24.280
是我们的User

13:24.280 --> 13:27.280
下面的Logan

13:27.280 --> 13:28.280
那你再回去

13:28.280 --> 13:30.280
那这样是不是就给它拦截住了

13:30.280 --> 13:31.280
我们可以看一下

13:31.280 --> 13:32.280
现在我们一登陆

13:32.280 --> 13:33.280
OK没问题

13:33.280 --> 13:34.280
对不对

13:34.280 --> 13:35.280
给它拦截住了

13:35.280 --> 13:37.280
来看看

13:37.280 --> 13:39.280
是不是你永远访问不到主界面

13:39.280 --> 13:40.280
对不对

13:40.280 --> 13:41.280
但是如果说

13:41.280 --> 13:42.280
你现在这个里面

13:42.280 --> 13:43.280
咱们还要处理一件事

13:43.280 --> 13:45.280
那这个时候是什么呢

13:45.280 --> 13:46.280
第一种条件

13:46.280 --> 13:47.280
如果说它没有这些

13:47.280 --> 13:48.280
那它是强行登陆

13:48.280 --> 13:50.280
假如说有这些条件

13:50.280 --> 13:51.280
我们知道存放在

13:51.280 --> 13:53.280
客户端的一些信息

13:53.280 --> 13:54.280
不一定准确

13:54.280 --> 13:55.280
比如说

13:55.280 --> 13:57.280
它可以模拟一个User Profile

13:57.280 --> 13:58.280
或者是Token

13:58.280 --> 13:59.280
或者是Router List

13:59.280 --> 14:00.280
比如说

14:00.280 --> 14:02.280
它在这个里面

14:02.280 --> 14:03.280
Application

14:03.280 --> 14:05.280
我们可以来模拟一种场景

14:05.280 --> 14:06.280
User Profile 1

14:06.280 --> 14:07.280
然后呢

14:07.280 --> 14:10.280
我再添加一个Router List

14:10.280 --> 14:12.280
这应该是Root List

14:12.280 --> 14:14.280
然后这里面再写个123

14:14.280 --> 14:16.280
之后再给它一个什么呢

14:16.280 --> 14:17.280
Token

14:17.280 --> 14:18.280
那这样

14:18.280 --> 14:20.280
它是不是模拟了一个登陆

14:20.280 --> 14:22.280
那我们这里面也写一个123

14:22.280 --> 14:23.280
现在我再去访问

14:23.280 --> 14:24.280
你看一下

14:24.280 --> 14:25.280
这个时候

14:25.280 --> 14:27.280
它应该是拦截不住了

14:27.280 --> 14:28.280
因为这三个条件

14:28.280 --> 14:30.280
它是不是都已经满足了

14:30.280 --> 14:31.280
那如果说缺一个

14:31.280 --> 14:32.280
肯定不行

14:32.280 --> 14:33.280
但是现在我都有

14:33.280 --> 14:35.280
那这个就可以让它登陆吗

14:35.280 --> 14:36.280
肯定不行

14:36.280 --> 14:37.280
它这个值不对

14:37.280 --> 14:39.280
所以说在下面的时候

14:39.280 --> 14:40.280
如果说

14:40.280 --> 14:41.280
这个里面就是什么呢

14:41.280 --> 14:44.280
用户满足条件

14:44.280 --> 14:47.660
满足条件

14:47.660 --> 14:48.660
我们要进行什么

14:48.660 --> 14:50.660
进行信息的一个

14:50.660 --> 14:54.660
进行登陆信息的检测

14:54.660 --> 14:55.660
那也就是说

14:55.660 --> 14:56.660
给它做一个检测

14:56.660 --> 14:57.660
怎么来做检测呢

14:57.660 --> 14:58.660
其实最方便的是用什么呢

14:58.660 --> 15:00.660
就是用我们的这个token

15:00.660 --> 15:02.660
检测它这个token吧

15:02.660 --> 15:03.660
看它有没有这个值

15:03.660 --> 15:04.660
所以说那你说

15:04.660 --> 15:05.660
我们还需要传吗

15:05.660 --> 15:06.660
其实不需要传

15:06.660 --> 15:07.660
如果说你有token了

15:07.660 --> 15:08.660
咱们之前是不是

15:08.660 --> 15:09.660
已经做这种处理了

15:09.660 --> 15:10.660
有token呢

15:10.660 --> 15:11.660
它就把token

15:11.660 --> 15:12.660
给携带过去对不对

15:12.660 --> 15:13.660
原来呢

15:13.660 --> 15:14.660
我们是在这个

15:14.660 --> 15:17.660
Selvers下面的ATB.js

15:17.660 --> 15:18.660
那这个时候

15:18.660 --> 15:19.660
我们是不是

15:19.660 --> 15:20.660
如果说你要有token

15:20.660 --> 15:21.660
那你就给它添加一个token

15:21.660 --> 15:22.660
对不对

15:22.660 --> 15:23.660
我们找一下

15:23.660 --> 15:24.660
在这个里面

15:24.660 --> 15:27.660
有一个请求的时候

15:27.660 --> 15:29.660
我们是对这个内容

15:29.660 --> 15:31.660
做了一个处理的

15:31.660 --> 15:32.660
Request

15:32.660 --> 15:33.660
OK

15:33.660 --> 15:34.660
那这个里面

15:34.660 --> 15:35.660
你看

15:35.660 --> 15:37.660
DefaultOptions.hiders

15:37.660 --> 15:38.660
content type

15:38.660 --> 15:40.660
这个里面

15:40.660 --> 15:41.660
我们添加一个

15:41.660 --> 15:43.660
公共的这个设置的时候

15:43.660 --> 15:45.660
这里面有一个Otherization

15:45.660 --> 15:46.660
如果说

15:46.660 --> 15:48.660
我获取一下token

15:48.660 --> 15:49.660
假如说

15:49.660 --> 15:50.660
把这个token获取到了

15:50.660 --> 15:51.660
那我直接就给它传过去

15:51.660 --> 15:52.660
如果说没有

15:52.660 --> 15:53.660
我就给它传递一个弄

15:53.660 --> 15:55.660
但是我们需要用这个吗

15:55.660 --> 15:56.660
其实也不需要

15:56.660 --> 15:57.660
有专门的

15:57.660 --> 15:59.660
针对我们这个token检测的

15:59.660 --> 16:00.660
那这个

16:00.660 --> 16:02.660
根据什么来经检测呢

16:02.660 --> 16:03.660
我们这个里面

16:03.660 --> 16:05.660
可以通过一个

16:05.660 --> 16:06.660
什么

16:06.660 --> 16:07.660
我们直接的在这个里面

16:07.660 --> 16:08.660
来找一下

16:09.660 --> 16:10.660
这里面已经给

16:10.660 --> 16:12.660
同学们定义好了

16:12.660 --> 16:13.660
API

16:13.660 --> 16:14.660
Query

16:14.660 --> 16:15.660
UtherLogan

16:15.660 --> 16:16.660
Status

16:16.660 --> 16:17.660
那这个时候

16:17.660 --> 16:18.660
我们可以打开

16:18.660 --> 16:19.660
打开来看一下

16:19.660 --> 16:20.660
从这个里面来找

16:20.660 --> 16:21.660
前端路路表

16:21.660 --> 16:22.660
那这个时候

16:22.660 --> 16:23.660
检测用户

16:23.660 --> 16:24.660
师傅登录

16:24.660 --> 16:25.660
就调用这个

16:25.660 --> 16:27.660
QueryUther

16:27.660 --> 16:29.660
QueryLoganStatus

16:29.660 --> 16:30.660
就可以

16:30.660 --> 16:31.660
那这个呢

16:31.660 --> 16:32.660
就能给我们判定

16:32.660 --> 16:33.660
用户师傅

16:33.660 --> 16:34.660
为登录状态

16:34.660 --> 16:35.660
如果说

16:35.660 --> 16:37.660
你要是给返回个401

16:37.660 --> 16:38.660
那这个时候代表什么呢

16:38.660 --> 16:40.660
token错误了

16:40.660 --> 16:41.660
也就是说

16:41.660 --> 16:42.660
它没有登录对不对

16:42.660 --> 16:43.660
那这个时候

16:43.660 --> 16:44.660
我们提示

16:44.660 --> 16:45.660
未登录

16:45.660 --> 16:46.660
或登录已过期

16:46.660 --> 16:47.660
如果说登录成功

16:47.660 --> 16:48.660
那我这个时候

16:48.660 --> 16:49.660
给它返回一个

16:49.660 --> 16:50.660
MSG

16:50.660 --> 16:51.660
是success

16:51.660 --> 16:52.660
不管你登录

16:52.660 --> 16:53.660
成功与否

16:53.660 --> 16:54.660
那这个时候

16:54.660 --> 16:55.660
那这样

16:55.660 --> 16:56.660
其实就比较方便了

16:56.660 --> 16:57.660
我们只要

16:57.660 --> 16:58.660
判定一个什么

16:58.660 --> 16:59.660
扣的结果值

16:59.660 --> 17:00.660
是不是就可以了

17:00.660 --> 17:01.660
所以说呢

17:01.660 --> 17:02.660
这个我们就来

17:02.660 --> 17:03.660
实现一下

17:03.660 --> 17:05.660
实现它的这个过程呢

17:05.660 --> 17:07.660
我们要走一个流程啊

17:07.660 --> 17:08.660
首先呢

17:08.660 --> 17:09.660
去Uther下面

17:09.660 --> 17:10.660
我们来做一件事

17:10.660 --> 17:12.660
给它来定义一下

17:12.660 --> 17:13.660
这个呢

17:13.660 --> 17:14.660
是一个什么呢

17:14.660 --> 17:15.660
我们来写一下

17:15.660 --> 17:16.660
这个叫检测用户

17:16.660 --> 17:17.660
是否登录

17:18.660 --> 17:20.660
是否登录

17:20.660 --> 17:21.660
OK

17:21.660 --> 17:22.660
这里面来定一个

17:22.660 --> 17:25.660
export const

17:25.660 --> 17:26.660
然后呢

17:26.660 --> 17:27.660
我们这个叫

17:27.660 --> 17:29.660
query user

17:29.660 --> 17:30.660
locant

17:30.660 --> 17:32.660
检测用户是否登录

17:32.660 --> 17:34.660
传递一个parmerase

17:34.660 --> 17:35.660
它这个请求方法

17:35.660 --> 17:36.660
是guide请求啊

17:36.660 --> 17:37.660
我们直接的

17:37.660 --> 17:39.660
就是 adax.guide

17:39.660 --> 17:40.660
第一个呢

17:40.660 --> 17:41.660
是我们的api

17:41.660 --> 17:43.660
query local sliders

17:43.660 --> 17:44.660
然后我们这个

17:44.660 --> 17:45.660
没有值啊

17:45.660 --> 17:46.660
没有值

17:46.660 --> 17:47.660
其实我这里面

17:47.660 --> 17:48.660
写一个空就可以

17:48.660 --> 17:49.660
对吧

17:49.660 --> 17:50.660
好了那这个

17:50.660 --> 17:51.660
就定义完了

17:51.660 --> 17:52.660
我们就回到

17:52.660 --> 17:53.660
我们的comment里面

17:53.660 --> 17:54.660
那你这个时候

17:54.660 --> 17:55.660
满足条件

17:55.660 --> 17:56.660
我就去查询一下

17:56.660 --> 17:57.660
这个条件的真伪

17:57.660 --> 17:58.660
是不是就可以了

17:58.660 --> 17:59.660
那这个时候

17:59.660 --> 18:00.660
我们先引入

18:00.660 --> 18:01.660
我们的这个模块

18:01.660 --> 18:02.660
daller attp

18:02.660 --> 18:03.660
forrom

18:03.660 --> 18:04.660
从哪来

18:04.660 --> 18:05.660
从我们的这个api

18:05.660 --> 18:06.660
里面来啊

18:06.660 --> 18:07.660
那我们这里面

18:07.660 --> 18:09.660
就来使用它一下

18:09.660 --> 18:10.660
const

18:10.660 --> 18:11.660
is

18:11.660 --> 18:12.660
等于

18:12.660 --> 18:13.660
yale的

18:15.660 --> 18:16.660
然后呢

18:16.660 --> 18:17.660
我们使用

18:17.660 --> 18:18.660
yale的点

18:18.660 --> 18:19.660
靠方法

18:19.660 --> 18:20.660
yale的点

18:20.660 --> 18:22.660
传递daller attp

18:22.660 --> 18:23.660
之后就是

18:23.660 --> 18:24.660
我们这个请求

18:24.660 --> 18:25.660
然后呢

18:25.660 --> 18:26.660
我们打印一下

18:26.660 --> 18:27.660
这个is啊

18:27.660 --> 18:28.660
当然了

18:28.660 --> 18:29.660
这个yale的点

18:29.660 --> 18:30.660
靠是没有这个点的啊

18:30.660 --> 18:31.660
sorry

18:31.660 --> 18:32.660
好了那我们来看一下

18:32.660 --> 18:33.660
是否登录

18:33.660 --> 18:34.660
就用这个接口

18:34.660 --> 18:35.660
来进行一个判定啊

18:35.660 --> 18:36.660
服务器

18:36.660 --> 18:37.660
没有对应资源

18:37.660 --> 18:38.660
好尴尬啊

18:38.660 --> 18:39.660
是吧

18:39.660 --> 18:40.660
我们来看一下

18:40.660 --> 18:41.660
这个为啥不对啊

18:41.660 --> 18:42.660
找到他

18:42.660 --> 18:43.660
information

18:43.660 --> 18:44.660
然后他

18:44.660 --> 18:45.660
没有去调用

18:45.660 --> 18:46.660
我们再来看一下啊

18:46.660 --> 18:50.480
console

18:50.480 --> 18:51.480
hastory

18:51.480 --> 18:52.480
ok

18:52.480 --> 18:53.480
啊

18:53.480 --> 18:54.480
因为sorry啊

18:54.480 --> 18:55.480
因为这个里面

18:55.480 --> 18:56.480
刚才是不是已经

18:56.480 --> 18:57.480
把这个纸给清空了

18:57.480 --> 18:59.480
那这个纸清空了

18:59.480 --> 19:00.480
我们还没办法

19:00.480 --> 19:01.480
做这个事啊

19:01.480 --> 19:02.480
怎么办呢

19:02.480 --> 19:03.480
我在这个里面

19:03.480 --> 19:04.480
先不让他进行

19:04.480 --> 19:06.480
强行的跳转啊

19:06.480 --> 19:07.480
我们直接的

19:07.480 --> 19:08.480
在这个里面

19:08.480 --> 19:10.480
让他进这个条件啊

19:10.480 --> 19:11.480
进这个条件

19:11.480 --> 19:12.480
非session

19:12.480 --> 19:13.480
非session

19:13.480 --> 19:14.480
那这个时候呢

19:14.480 --> 19:15.480
我们直接的

19:15.480 --> 19:16.480
先把它给抽出来

19:16.480 --> 19:17.480
抽出来

19:17.480 --> 19:18.480
在这个里面

19:18.480 --> 19:19.480
来做这件事情

19:19.480 --> 19:20.480
去登录一下

19:20.480 --> 19:21.480
不登录啊

19:21.480 --> 19:22.480
我们直接去

19:22.480 --> 19:23.480
访问一下

19:23.480 --> 19:24.480
主介面

19:24.480 --> 19:25.480
现在登录

19:25.480 --> 19:26.480
就肯定废掉了啊

19:26.480 --> 19:27.480
他现在给我报

19:27.480 --> 19:28.480
一个什么错误呢

19:28.480 --> 19:29.480
说服务器

19:29.480 --> 19:30.480
没有对应的资源

19:30.480 --> 19:31.480
那我们来看一下

19:31.480 --> 19:33.480
访问的这个内容啊

19:33.480 --> 19:35.480
query selector

19:35.480 --> 19:36.480
API

19:36.480 --> 19:37.480
两个API

19:37.480 --> 19:38.480
两个API

19:38.480 --> 19:39.480
这个就尴尬了

19:39.480 --> 19:40.480
因为什么呢

19:40.480 --> 19:41.480
因为我们这里面

19:41.480 --> 19:42.480
在atv

19:42.480 --> 19:43.480
处理的时候

19:43.480 --> 19:44.480
已经有前坠了

19:44.480 --> 19:45.480
所以说

19:45.480 --> 19:46.480
我们这个里面

19:46.480 --> 19:47.480
不需要添加前坠

19:47.480 --> 19:48.480
那这样

19:48.480 --> 19:49.480
8001

19:49.480 --> 19:50.480
然后呢

19:50.480 --> 19:51.480
咱们直接的

19:51.480 --> 19:52.480
在这个里面

19:52.480 --> 19:53.480
ok

19:53.480 --> 19:54.480
去访问

19:54.480 --> 19:55.480
未登录

19:55.480 --> 19:56.480
或已过期

19:56.480 --> 19:57.480
对不对

19:57.480 --> 19:58.480
那这个时候呢

19:58.480 --> 19:59.480
其实你有职

19:59.480 --> 20:00.480
有职呢

20:00.480 --> 20:01.480
但是你这个

20:01.480 --> 20:02.480
未登录

20:02.480 --> 20:03.480
或已过期

20:03.480 --> 20:04.480
比如说咱们

20:04.480 --> 20:05.480
模拟几个词

20:05.480 --> 20:06.480
token

20:06.480 --> 20:07.480
第一个是

20:07.480 --> 20:08.480
124

20:08.480 --> 20:09.480
写一个1

20:09.480 --> 20:10.480
第二个呢

20:10.480 --> 20:11.480
叫yawther

20:11.480 --> 20:12.480
profile

20:12.480 --> 20:13.480
yawther profile

20:13.480 --> 20:14.480
我这里面写一个

20:14.480 --> 20:15.480
123

20:15.480 --> 20:16.480
之后呢

20:16.480 --> 20:17.480
是我们的

20:17.480 --> 20:18.480
改一下名字

20:18.480 --> 20:19.480
这个

20:19.480 --> 20:20.480
l是小写的

20:20.480 --> 20:24.110
root list

20:24.110 --> 20:25.110
好了

20:25.110 --> 20:26.110
那定义完成之后

20:26.110 --> 20:27.110
这个时候呢

20:27.110 --> 20:29.110
我们就按正常的流程

20:29.110 --> 20:30.110
走一遍啊

20:30.110 --> 20:31.110
按正常流程

20:31.110 --> 20:32.110
走一遍

20:32.110 --> 20:33.110
怎么来走呢

20:33.110 --> 20:34.110
我们回到代码里面

20:34.110 --> 20:36.110
找到我们的这个

20:36.110 --> 20:37.110
common.js

20:37.110 --> 20:38.110
首先呢

20:38.110 --> 20:39.110
把我们刚才写的这个

20:39.110 --> 20:41.110
给放到这个里面啊

20:41.110 --> 20:42.110
如果说

20:43.110 --> 20:44.110
face session

20:44.110 --> 20:45.110
然后直接的

20:45.110 --> 20:46.110
它去跳转

20:46.110 --> 20:47.110
对不对

20:47.110 --> 20:48.110
这种情况没问题啊

20:48.110 --> 20:49.110
然后呢

20:49.110 --> 20:51.110
如果说我们这个

20:51.110 --> 20:53.110
如果你有这个yawther profile

20:53.110 --> 20:55.110
包括我们的token

20:55.110 --> 20:57.110
还有root list的话啊

20:57.110 --> 20:58.110
那这个时候呢

20:58.110 --> 21:00.110
我们去来进行一个请求啊

21:00.110 --> 21:01.110
我们来看一下

21:01.110 --> 21:02.110
localhost的

21:02.110 --> 21:04.110
那咱们这样啊

21:04.110 --> 21:05.110
Application

21:05.110 --> 21:07.110
801没问题啊

21:07.110 --> 21:08.110
我们直接的

21:08.110 --> 21:09.110
来把它给干掉

21:09.110 --> 21:10.110
咱们就去

21:10.110 --> 21:11.110
请求一下

21:11.110 --> 21:12.110
请求一下

21:12.110 --> 21:13.110
这个时候

21:13.110 --> 21:15.110
显示未登录或已过期

21:15.110 --> 21:16.110
然后呢你说

21:16.110 --> 21:17.110
为什么直接的这个

21:17.110 --> 21:18.110
请求完了

21:18.110 --> 21:19.110
它会有一个什么

21:19.110 --> 21:20.110
会有一个跳转啊

21:20.110 --> 21:21.110
那其实

21:21.110 --> 21:22.110
跳转的原因是什么

21:22.110 --> 21:24.110
我们是不是在这个

21:24.110 --> 21:25.110
atp里面

21:25.110 --> 21:27.110
已经给他做了拦截了

21:27.110 --> 21:28.110
对不对

21:28.110 --> 21:29.110
我们可以来看一下

21:29.110 --> 21:30.110
这个拦截规则

21:30.110 --> 21:31.110
因为当时

21:31.110 --> 21:32.110
创建atp

21:32.110 --> 21:34.110
我们在这个里面

21:34.110 --> 21:36.110
如果说你要是

21:36.110 --> 21:37.110
啊

21:37.110 --> 21:38.110
我们的这个状态码

21:38.110 --> 21:39.110
不为零的话

21:39.110 --> 21:40.110
那这个时候呢

21:40.110 --> 21:41.110
我们强行的

21:41.110 --> 21:42.110
去给你跳转到

21:42.110 --> 21:43.110
yawther

21:43.110 --> 21:44.110
logan.jmr

21:44.110 --> 21:45.110
并且呢

21:45.110 --> 21:46.110
把session storage

21:46.110 --> 21:47.110
做了一个清空

21:47.110 --> 21:48.110
这也是为什么

21:48.110 --> 21:49.110
我们直接的

21:49.110 --> 21:50.110
在这个获取到值之后

21:50.110 --> 21:51.110
那这个时候呢

21:51.110 --> 21:53.110
我们的application里面

21:53.110 --> 21:54.110
值也已经被干掉了

21:54.110 --> 21:55.110
对不对

21:55.110 --> 21:56.110
那这个时候

21:56.110 --> 21:57.110
我们要做一件什么事呢

21:57.110 --> 21:58.110
我们既然能拿到

21:58.110 --> 21:59.110
这个状态码

21:59.110 --> 22:00.110
如果说你有值

22:00.110 --> 22:01.110
那我们就不去考虑了

22:01.110 --> 22:02.110
对不对

22:02.110 --> 22:03.110
那假如说没值啊

22:03.110 --> 22:04.110
没值的话

22:04.110 --> 22:05.110
也就是说

22:05.110 --> 22:06.110
等于零的时候

22:06.110 --> 22:07.110
我们是不是可以

22:07.110 --> 22:08.110
做一点事呢

22:08.110 --> 22:09.110
回到我们这个代码里面

22:09.110 --> 22:11.110
那来做一下判断嘛

22:11.110 --> 22:12.110
如果说我们

22:12.110 --> 22:14.110
is.code的

22:14.110 --> 22:15.110
假如说要是这个

22:15.110 --> 22:17.110
等于等于零

22:17.110 --> 22:19.110
那我们是不是在做这件事

22:19.110 --> 22:20.110
那这个时候前提

22:20.110 --> 22:22.110
我们可以做这一件事

22:22.110 --> 22:23.110
如果说is.c.code的

22:23.110 --> 22:24.110
不等于零

22:24.110 --> 22:25.110
我们给它return掉

22:25.110 --> 22:26.110
是不是就可以了

22:26.110 --> 22:27.110
对不对

22:27.110 --> 22:28.110
不等于零

22:28.110 --> 22:29.110
那我们直接的

22:29.110 --> 22:30.110
就是用ntp.js

22:30.110 --> 22:31.110
直接把它来

22:31.110 --> 22:32.110
做个处理

22:32.110 --> 22:33.110
就完事了

22:33.110 --> 22:34.110
如果说你要是等于零

22:34.110 --> 22:35.110
那这个时候

22:35.110 --> 22:36.110
你是不是有可能

22:36.110 --> 22:37.110
是当路成功的

22:37.110 --> 22:38.110
对不对

22:38.110 --> 22:39.110
那你当路成功

22:39.110 --> 22:40.110
我们做一件什么事呢

22:40.110 --> 22:41.110
我们直接的

22:41.110 --> 22:43.110
要去请求一个路由表

22:43.110 --> 22:44.110
也就是说

22:44.110 --> 22:45.110
我们的正确的路由表

22:45.110 --> 22:47.110
给来进行一个获取

22:47.110 --> 22:48.110
路由表在哪获取呢

22:48.110 --> 22:49.110
我们这里面

22:49.110 --> 22:50.110
有一个同学们

22:50.110 --> 22:53.110
可以来看一下API

22:53.110 --> 22:55.110
sorry应该是这个

22:55.110 --> 22:56.110
我们这里面

22:56.110 --> 22:57.110
前端的一个路由表

22:57.110 --> 22:58.110
该的请求

22:58.110 --> 22:59.110
该的请求

22:59.110 --> 23:00.110
使用这种

23:00.110 --> 23:01.110
API该的入的

23:01.110 --> 23:02.110
例子的形式

23:02.110 --> 23:03.110
来进行一个

23:03.110 --> 23:05.110
路由表的获取

23:05.110 --> 23:06.110
那这个路由表

23:06.110 --> 23:07.110
获取的时候

23:07.110 --> 23:09.110
我们直接的获取到内容

23:09.110 --> 23:10.110
就是我们一会

23:10.110 --> 23:11.110
登录完成之后

23:11.110 --> 23:12.110
手页面左侧的

23:12.110 --> 23:13.110
一个渲染信息

23:13.110 --> 23:15.110
它这个渲染信息里面

23:15.110 --> 23:16.110
都包括什么内容呢

23:16.110 --> 23:17.110
首先是有一个

23:17.110 --> 23:19.110
我们中文的文字描述

23:19.110 --> 23:20.110
还有一个呢

23:20.110 --> 23:22.110
是我们的结合

23:22.110 --> 23:23.110
按的的icon

23:23.110 --> 23:25.110
返回的一个图标之后

23:25.110 --> 23:27.110
给我们一个跳转的路径

23:27.110 --> 23:28.110
这个呢是他

23:28.110 --> 23:29.110
让我们

23:29.110 --> 23:31.110
给我们返回的一些信息

23:31.110 --> 23:32.110
那我们现在

23:32.110 --> 23:33.110
要做一件什么事呢

23:33.110 --> 23:34.110
我们直接的

23:34.110 --> 23:35.110
就来把它

23:35.110 --> 23:37.110
来给他定义一下

23:37.110 --> 23:38.110
之后来进行

23:38.110 --> 23:39.110
一个请求

23:39.110 --> 23:40.110
是不是就OK了

23:40.110 --> 23:41.110
回到我们的这个

23:41.110 --> 23:43.110
ATB.js

23:43.110 --> 23:44.110
sorry 应该是

23:44.110 --> 23:45.110
我们的

23:45.110 --> 23:46.110
youtels

23:46.110 --> 23:47.110
回到在这个里面

23:47.110 --> 23:49.110
我们这里面写一下

23:49.110 --> 23:50.110
叫什么呢

23:50.110 --> 23:52.110
叫获取路由表

23:52.110 --> 23:54.110
获取路由表

23:54.110 --> 23:55.110
expult

23:55.110 --> 23:56.110
当然前提

23:56.110 --> 23:57.110
你得是登录请问

23:57.110 --> 23:58.110
你才能获取

23:58.110 --> 23:59.110
如果说你没登录

23:59.110 --> 24:00.110
你这个还没细

24:00.110 --> 24:01.110
你也获取不了

24:01.110 --> 24:02.110
然后呢参数

24:02.110 --> 24:04.110
咱们也是不需要传

24:04.110 --> 24:05.110
我们这个时候

24:05.110 --> 24:07.110
就给他指定一下

24:07.110 --> 24:10.110
叫阿加克斯.get

24:10.110 --> 24:12.110
ok.root.list

24:12.110 --> 24:14.110
的定义完成之后

24:14.110 --> 24:15.110
那我们就回到

24:15.110 --> 24:16.110
comment.js

24:16.110 --> 24:17.110
里面给他来

24:17.110 --> 24:18.110
进行一个请求

24:18.110 --> 24:20.110
请求前提是什么呢

24:20.110 --> 24:21.110
我们

24:21.110 --> 24:22.110
res.code的

24:22.110 --> 24:23.110
等于等于零

24:23.110 --> 24:24.110
也就是说

24:24.110 --> 24:25.110
没有错误的时候

24:25.110 --> 24:26.110
对不对

24:26.110 --> 24:27.110
那我们这里面

24:27.110 --> 24:28.110
counts的

24:28.110 --> 24:29.110
他返回只是个啥东西

24:29.110 --> 24:30.110
我们可以看一下

24:30.110 --> 24:31.110
这个里面返回一个什么

24:31.110 --> 24:33.110
返回一个data

24:33.110 --> 24:34.110
对不对

24:34.110 --> 24:35.110
那我们给他做一个

24:35.110 --> 24:36.110
解构

24:36.110 --> 24:37.110
countdata

24:37.110 --> 24:38.110
为了我们读取方便

24:38.110 --> 24:39.110
我们给他做一个

24:39.110 --> 24:40.110
设

24:40.110 --> 24:41.110
等于res

24:41.110 --> 24:42.110
我们

24:42.110 --> 24:43.110
sorry

24:43.110 --> 24:44.110
不应该是res

24:44.110 --> 24:45.110
我们这个通过

24:45.110 --> 24:46.110
yale的

24:46.110 --> 24:47.110
对吧

24:47.110 --> 24:48.110
yale的call

24:48.110 --> 24:49.110
来进行一个

24:49.110 --> 24:50.110
调用

24:50.110 --> 24:52.110
dollar.attp.get.root.list

24:52.110 --> 24:53.110
然后如果说

24:53.110 --> 24:55.110
你已经获取到了之后

24:55.110 --> 24:56.110
正确的

24:56.110 --> 24:57.110
进行获取

24:57.110 --> 24:58.110
那我们直接的

24:58.110 --> 24:59.110
使用

24:59.110 --> 25:00.110
session storage

25:00.110 --> 25:01.110
这个里面

25:01.110 --> 25:02.110
我们通过

25:02.110 --> 25:03.110
set item

25:03.110 --> 25:04.110
这个叫什么

25:04.110 --> 25:05.110
就叫root.list

25:05.110 --> 25:06.110
就可以

25:06.110 --> 25:07.110
对不对

25:07.110 --> 25:08.110
root.list

25:08.110 --> 25:09.110
存储的时候

25:09.110 --> 25:10.110
注意我们要存一个什么

25:10.110 --> 25:11.110
存一个

25:11.110 --> 25:12.110
jsn自付创

25:12.110 --> 25:13.110
对吧

25:13.110 --> 25:15.110
那我们通过jsn.sdn.fi

25:15.110 --> 25:16.110
这种形式

25:16.110 --> 25:17.110
把它给进行一个存储

25:17.110 --> 25:18.110
那这个呢

25:18.110 --> 25:19.110
就是我们一个

25:19.110 --> 25:20.110
基本的逻辑

25:20.110 --> 25:22.110
那还有一点是什么呢

25:22.110 --> 25:23.110
我们alz这一块

25:23.110 --> 25:24.110
也可以来处理一下

25:24.110 --> 25:25.110
alz怎么来处理呢

25:25.110 --> 25:26.110
如果说

25:26.110 --> 25:27.110
你当前是登录界面

25:27.110 --> 25:28.110
对不对

25:28.110 --> 25:29.110
那这个

25:29.110 --> 25:30.110
我们现在

25:30.110 --> 25:31.110
session storage

25:31.110 --> 25:32.110
里面的这个值

25:32.110 --> 25:33.110
其实都不需要了

25:33.110 --> 25:34.110
那我们直接的

25:34.110 --> 25:35.110
就给你

25:35.110 --> 25:36.110
做一个清空

25:36.110 --> 25:37.110
是不是就可以了

25:37.110 --> 25:38.110
你要重新获取吗

25:38.110 --> 25:39.110
对吧

25:39.110 --> 25:40.110
我怕乱

25:40.110 --> 25:41.110
那直接就给你

25:41.110 --> 25:42.110
先干掉就ok了

25:42.110 --> 25:43.110
这个呢

25:43.110 --> 25:44.110
就是我们一个

25:44.110 --> 25:46.110
基本的路由守卫的

25:46.110 --> 25:47.110
这么一个实现

25:47.110 --> 25:49.110
其实它的核心市场呢

25:49.110 --> 25:50.110
就是依靠

25:50.110 --> 25:53.110
我们这个sab subscription

25:53.110 --> 25:54.110
那这个时候呢

25:54.110 --> 25:55.110
它可以在这个

25:55.110 --> 25:57.110
app慈大开启的时候

25:57.110 --> 25:58.110
就来进行

25:58.110 --> 26:00.110
一个事件的拍发

26:00.110 --> 26:01.110
那在这个事件

26:01.110 --> 26:02.110
拍发的时候

26:02.110 --> 26:03.110
我们要明确一点

26:03.110 --> 26:04.110
任何组件

26:04.110 --> 26:05.110
还没有进行加载

26:05.110 --> 26:06.110
那这样就保证了

26:06.110 --> 26:07.110
我们组件内容

26:07.110 --> 26:08.110
不炫之前

26:08.110 --> 26:09.110
来做一次

26:09.110 --> 26:10.110
默默的请求

26:10.110 --> 26:11.110
然后判定

26:11.110 --> 26:12.110
我们当前用户

26:12.110 --> 26:14.110
是否为正常登录

26:14.110 --> 26:15.110
当然前提

26:15.110 --> 26:16.110
你要保证这个

26:16.110 --> 26:17.110
接口的一个性能

26:17.110 --> 26:18.110
要好一些

26:18.110 --> 26:19.110
因为这个里面

26:19.110 --> 26:20.110
我们是要有一个

26:20.110 --> 26:21.110
异不请求处理的

26:21.110 --> 26:22.110
是哪一个呢

26:22.110 --> 26:23.110
就是我们调用的

26:23.110 --> 26:25.110
这个query user login

26:25.110 --> 26:26.110
这个接口性能

26:26.110 --> 26:28.110
是要好一些

26:28.110 --> 26:29.110
这个呢

26:29.110 --> 26:30.110
就是我们整个的

26:30.110 --> 26:32.110
一个路由拦截的

26:32.110 --> 26:36.900
这么一个处理

26:36.900 --> 26:37.900
好的

26:37.900 --> 26:38.900
来路由部分的

26:38.900 --> 26:40.900
相关内容之后

26:40.900 --> 26:41.900
那么接下来

26:41.900 --> 26:43.900
我们再回到登录界面

26:43.900 --> 26:44.900
登录界面

26:44.900 --> 26:45.900
其实我们在这个里面

26:45.900 --> 26:47.900
在做登录的时候

26:47.900 --> 26:48.900
因为我们之前

26:48.900 --> 26:49.900
其实是没有

26:49.900 --> 26:50.900
挑转界面的

26:50.900 --> 26:51.900
那这个时候怎么办

26:51.900 --> 26:52.900
我们要把这个界面

26:52.900 --> 26:53.900
给做一个挑转

26:53.900 --> 26:54.900
因为现在我们已经

26:54.900 --> 26:55.900
具备条件了

26:55.900 --> 26:56.900
对不对

26:56.900 --> 26:57.900
那这时候就挑转

26:57.900 --> 26:58.900
对吧

26:58.900 --> 26:59.900
怎么来做挑转

26:59.900 --> 27:00.900
回到我们的

27:00.900 --> 27:01.900
页面里面

27:01.900 --> 27:02.900
代码里面

27:02.900 --> 27:03.900
应该是youtels

27:03.900 --> 27:05.900
下面的model

27:05.900 --> 27:06.900
model

27:06.900 --> 27:07.900
登录成功之后

27:07.900 --> 27:08.900
首先

27:08.900 --> 27:09.900
第一个

27:09.900 --> 27:10.900
它存储了一个

27:10.900 --> 27:11.900
我们用户的

27:11.900 --> 27:12.900
相关信息

27:12.900 --> 27:13.900
之后呢

27:13.900 --> 27:14.900
这个时候

27:14.900 --> 27:15.900
把这个用信息

27:15.900 --> 27:16.900
给做了一个存储

27:16.900 --> 27:17.900
对不对

27:17.900 --> 27:18.900
那这个时候

27:18.900 --> 27:19.900
其实就是开始

27:19.900 --> 27:20.900
进行界面挑转了

27:20.900 --> 27:21.900
但是我们知道

27:21.900 --> 27:22.900
界面挑转之前

27:22.900 --> 27:23.900
我们还需要

27:23.900 --> 27:24.900
做一件事

27:24.900 --> 27:25.900
就是什么呢

27:25.900 --> 27:26.900
如果说

27:26.900 --> 27:27.900
我们请求成功

27:27.900 --> 27:28.900
请求成功之后

27:28.900 --> 27:29.900
我们进行

27:29.900 --> 27:30.900
路由表的一个获取

27:30.900 --> 27:31.900
你没有路由表

27:31.900 --> 27:32.900
你进手艺

27:32.900 --> 27:33.900
是不是也宣布出来

27:33.900 --> 27:34.900
对吧

27:34.900 --> 27:35.900
之后

27:35.900 --> 27:36.900
进行一个

27:36.900 --> 27:40.400
路由表的获取

27:40.400 --> 27:43.400
进行路由表的获取

27:43.400 --> 27:44.400
OK

27:44.400 --> 27:45.400
咱们来试一下

27:45.400 --> 27:46.400
这个时候怎么办呢

27:46.400 --> 27:47.400
其实因为

27:47.400 --> 27:48.400
刚才我们已经定义过了

27:48.400 --> 27:49.400
对不对

27:49.400 --> 27:50.400
我们直接就来写

27:50.400 --> 27:51.400
就行

27:51.400 --> 27:52.400
Const

27:52.400 --> 27:53.400
我们叫

27:53.400 --> 27:56.160
RootData

27:56.160 --> 27:57.160
RootData

27:57.160 --> 27:58.160
等于什么呢

27:58.160 --> 27:59.160
等于我们

27:59.160 --> 28:00.160
也类的

28:00.160 --> 28:01.160
还是通过

28:01.160 --> 28:02.160
也类的点

28:02.160 --> 28:03.160
call $attp

28:03.160 --> 28:05.160
getRootList

28:05.160 --> 28:06.160
OK

28:06.160 --> 28:07.160
拿到它之后

28:07.160 --> 28:08.160
我们先来看一下

28:08.160 --> 28:10.160
能否正确的拿到它

28:11.160 --> 28:12.160
RootData

28:12.160 --> 28:13.160
回到我们这个里面

28:13.160 --> 28:14.160
咱们登录一下

28:14.160 --> 28:16.160
admin 123QWE

28:16.160 --> 28:17.160
点击登录

28:18.160 --> 28:19.160
8001

28:19.160 --> 28:20.160
OK

28:20.160 --> 28:21.160
这个时候呢

28:21.160 --> 28:22.160
我们就获取到了

28:22.160 --> 28:23.160
一个什么

28:23.160 --> 28:24.160
正确的路由表

28:24.160 --> 28:25.160
对不对

28:25.160 --> 28:26.160
正确路由表

28:26.160 --> 28:27.160
我们要去跳转

28:27.160 --> 28:28.160
到哪个界面

28:28.160 --> 28:29.160
肯定是

28:29.160 --> 28:30.160
第一个界面

28:30.160 --> 28:31.160
对吧

28:31.160 --> 28:32.160
进入手艺之后

28:32.160 --> 28:33.160
是员工分析的界面

28:33.160 --> 28:34.160
员工分析界面

28:34.160 --> 28:35.160
是不是我们这个

28:35.160 --> 28:36.160
Data里面

28:36.160 --> 28:37.160
说咱们跳转的时候

28:37.160 --> 28:38.160
这时候呢

28:38.160 --> 28:39.160
我们就需要

28:39.160 --> 28:40.160
指定界面的

28:40.160 --> 28:41.160
一个跳转

28:41.160 --> 28:42.160
当然你跳转之前

28:42.160 --> 28:43.160
你要把这个指

28:43.160 --> 28:44.160
给做一个存储

28:44.160 --> 28:45.160
那我这里面

28:45.160 --> 28:46.160
就是和我们

28:46.160 --> 28:47.160
刚才

28:47.160 --> 28:48.160
检测的时候

28:48.160 --> 28:49.160
名字的是

28:49.160 --> 28:50.160
完全一致的

28:50.160 --> 28:52.160
叫RootList

28:52.160 --> 28:53.160
OK

28:53.160 --> 28:54.160
RootList

28:54.160 --> 28:55.160
我们这个也是

28:55.160 --> 28:57.160
GSN.45

28:57.160 --> 28:58.160
叫什么呢

28:58.160 --> 28:59.160
叫RootData

28:59.160 --> 29:00.160
下面的谁

29:00.160 --> 29:02.160
肯定不能存RootData

29:02.160 --> 29:03.160
对不对

29:03.160 --> 29:04.160
它因为里面

29:04.160 --> 29:05.160
有好多描述信息

29:05.160 --> 29:06.160
一样本次请求的

29:06.160 --> 29:07.160
那我们直接的

29:07.160 --> 29:09.160
就去存RootData

29:09.160 --> 29:10.160
点Data

29:10.160 --> 29:11.160
是不是就OK了

29:11.160 --> 29:12.160
对吧

29:12.160 --> 29:13.160
那你存完这个之后

29:13.160 --> 29:14.160
我们这个里面

29:14.160 --> 29:16.160
是不是RootList的就职的

29:16.160 --> 29:19.160
RootList里面有职的之后

29:19.160 --> 29:20.160
那这个时候

29:20.160 --> 29:21.160
我们也把

29:21.160 --> 29:22.160
这个用户信息

29:22.160 --> 29:23.160
给保存了

29:23.160 --> 29:24.160
保存之后

29:24.160 --> 29:25.160
现在就开始

29:25.160 --> 29:26.160
可以真正的

29:26.160 --> 29:27.160
做一个跳转了

29:27.160 --> 29:28.160
那跳转

29:28.160 --> 29:29.160
我们就使用这种

29:29.160 --> 29:30.160
History形式跳转

29:30.160 --> 29:31.160
但是这个界面

29:31.160 --> 29:32.160
里面

29:32.160 --> 29:33.160
它是没有History的

29:33.160 --> 29:34.160
而且

29:35.160 --> 29:36.160
那我们怎么办

29:36.160 --> 29:37.160
我们给它引入一下

29:37.160 --> 29:39.160
其实这个是比较方便的

29:39.160 --> 29:40.160
怎么引入呢

29:40.160 --> 29:41.160
我们从Umi里面

29:41.160 --> 29:42.160
来获取一下

29:42.160 --> 29:44.160
那这个叫HistoryFrom

29:44.160 --> 29:46.160
从我们的Umi

29:46.160 --> 29:48.160
那Umi里面获取之后

29:48.160 --> 29:49.160
我们这个时候

29:49.160 --> 29:52.160
就可以History点一个Push

29:52.160 --> 29:54.160
给它追加一个界面

29:54.160 --> 29:56.160
那我们就要RootData

29:56.160 --> 29:57.160
对不对

29:57.160 --> 29:59.160
RootData里面有一个什么呢

29:59.160 --> 30:01.160
有一个点Data

30:01.160 --> 30:02.160
下面的0

30:02.160 --> 30:04.160
然后这里面有一个Root

30:05.160 --> 30:06.160
我们直接就跳转

30:06.160 --> 30:07.160
到这个界面就可以了

30:07.160 --> 30:09.160
但是前提是什么呢

30:09.160 --> 30:10.160
你必须要保证

30:10.160 --> 30:12.160
你前端定义的路由

30:12.160 --> 30:13.160
跟我们后端

30:13.160 --> 30:15.160
显示的返回的这个值

30:15.160 --> 30:16.160
是要匹配的

30:16.160 --> 30:17.160
如果说你不匹配

30:17.160 --> 30:18.160
这个事是没戏的

30:18.160 --> 30:20.160
这个我们要明确一下

30:20.160 --> 30:21.160
咱们跳转一下

30:21.160 --> 30:24.160
Admin123QWE点击登录

30:24.160 --> 30:25.160
跳过来了

30:25.160 --> 30:26.160
跳过来之后

30:26.160 --> 30:27.160
那这个时候

30:27.160 --> 30:28.160
我们看一下

30:28.160 --> 30:30.160
首先这个里面保存的值

30:30.160 --> 30:31.160
偷看进行了

30:31.160 --> 30:32.160
一个存储

30:32.160 --> 30:33.160
对不对

30:33.160 --> 30:35.160
然后还有Uther Profile

30:35.160 --> 30:37.160
包括我们的RootList的

30:37.160 --> 30:38.160
然后我们跳转过来

30:38.160 --> 30:39.160
是哪一个界面

30:39.160 --> 30:40.160
是我们的Dashboard

30:40.160 --> 30:41.160
也就是说

30:41.160 --> 30:43.160
我们这个返回路由表里面的

30:43.160 --> 30:44.160
第一个界面

30:44.160 --> 30:45.160
对不对

30:45.160 --> 30:46.160
当然它返回什么

30:46.160 --> 30:47.160
你不要考虑这个事情

30:47.160 --> 30:48.160
为啥呢

30:48.160 --> 30:49.160
因为这个请求

30:49.160 --> 30:51.160
它是分全线的

30:51.160 --> 30:52.160
我们可以看一下

30:52.160 --> 30:54.160
RootList里面

30:54.160 --> 30:55.160
它是有用户

30:55.160 --> 30:56.160
角色认证的

30:56.160 --> 30:58.160
也就是说你是管理员

30:58.160 --> 31:00.160
你现在是返回这些界面

31:00.160 --> 31:01.160
不是管理员的话

31:01.160 --> 31:03.160
那你是返回不了这些界面的

31:03.160 --> 31:04.160
我们可以来找一个

31:04.160 --> 31:06.160
不是管理员的内容

31:07.160 --> 31:09.160
看一下Stuff

31:09.160 --> 31:10.160
Stuff里面

31:10.160 --> 31:11.160
这里面有好多

31:11.160 --> 31:12.160
是不是

31:12.160 --> 31:14.160
我们随便找一个账户

31:14.160 --> 31:15.160
来进行登录

31:15.160 --> 31:16.160
这是提前我给同学们

31:16.160 --> 31:18.160
准备好的一些账户

31:18.160 --> 31:19.160
这个里面有一个

31:19.160 --> 31:20.160
Job123

31:20.160 --> 31:22.160
那我们就用Job123

31:22.160 --> 31:23.160
来做一个什么的

31:23.160 --> 31:24.160
登录

31:24.160 --> 31:25.160
来测试一下

31:25.160 --> 31:26.160
这样

31:26.160 --> 31:27.160
我们先回到

31:27.160 --> 31:29.160
我们的界面里面

31:29.160 --> 31:30.160
之后呢

31:30.160 --> 31:31.160
把这个内容给的

31:31.160 --> 31:33.160
进行一个清空

31:33.160 --> 31:34.160
Network

31:34.160 --> 31:35.160
咱们这个里面

31:35.160 --> 31:37.160
给它Application

31:37.160 --> 31:38.160
把它给全部的

31:38.160 --> 31:39.160
做一个清空

31:39.160 --> 31:40.160
这样验证一下

31:40.160 --> 31:42.160
我们这个

31:42.160 --> 31:43.160
有守卫

31:43.160 --> 31:44.160
没问题

31:44.160 --> 31:45.160
是不是

31:45.160 --> 31:46.160
给我们跳回来了

31:46.160 --> 31:47.160
跳过来之后

31:47.160 --> 31:48.160
那我们这里面

31:48.160 --> 31:50.160
用Job123

31:50.160 --> 31:51.160
这里面

31:51.160 --> 31:52.160
账户密码

31:52.160 --> 31:53.160
基本上都是什么呢

31:53.160 --> 31:55.160
123QWE

31:55.160 --> 31:56.160
如果说123QWE

31:56.160 --> 31:57.160
不行

31:57.160 --> 31:58.160
我的这个初始值

31:58.160 --> 31:59.160
因为这个

31:59.160 --> 32:00.160
其实你看到的这个里面

32:00.160 --> 32:02.160
我是有给他做加密的

32:02.160 --> 32:03.160
也就是说

32:03.160 --> 32:04.160
他的帕做的加密了

32:04.160 --> 32:05.160
那一般呢

32:05.160 --> 32:06.160
都是123QWE

32:06.160 --> 32:07.160
123QWE

32:07.160 --> 32:08.160
不好用的话

32:08.160 --> 32:09.160
就是123456

32:09.160 --> 32:10.160
这个

32:10.160 --> 32:11.160
我们要直到一下

32:11.160 --> 32:12.160
就可以

32:12.160 --> 32:13.160
我电机登录

32:13.160 --> 32:14.160
你看密码错过

32:14.160 --> 32:15.160
尴尬了

32:15.160 --> 32:16.160
那我这里面

32:16.160 --> 32:17.160
用什么呢

32:17.160 --> 32:18.160
用123456

32:18.160 --> 32:19.160
如果说

32:19.160 --> 32:20.160
再不行的话

32:20.160 --> 32:21.160
我强行在后端

32:21.160 --> 32:22.160
给他做一个调整

32:22.160 --> 32:23.160
这样

32:23.160 --> 32:24.160
我再找一个用户

32:24.160 --> 32:25.160
Job123

32:25.160 --> 32:27.160
这个不对吗

32:27.160 --> 32:28.160
Job123

32:28.160 --> 32:29.160
没有什么问题

32:29.160 --> 32:30.160
我再找一个用户吧

32:30.160 --> 32:31.160
这个里面

32:31.160 --> 32:33.160
我用路加粮

32:33.160 --> 32:34.160
这个路加粮

32:34.160 --> 32:36.160
这个应该是可以

32:36.160 --> 32:37.160
好了

32:37.160 --> 32:38.160
我直接来写一下

32:38.160 --> 32:39.160
路加粮

32:39.160 --> 32:43.560
路加粮

32:43.560 --> 32:44.560
OK

32:44.560 --> 32:45.560
然后呢

32:45.560 --> 32:46.560
我们这里面

32:46.560 --> 32:47.560
先用123456

32:47.560 --> 32:48.560
有错是吧

32:48.560 --> 32:50.560
123QWE

32:50.560 --> 32:51.560
路加粮

32:51.560 --> 32:52.560
点击登录

32:52.560 --> 32:53.560
OK 没问题

32:53.560 --> 32:54.560
然后路加粮

32:54.560 --> 32:55.560
登录进来之后

32:55.560 --> 32:56.560
那这个时候

32:56.560 --> 32:57.560
我们再看一下

32:57.560 --> 32:58.560
Application

32:58.560 --> 32:59.560
从这个里面看

32:59.560 --> 33:00.560
它的返回值

33:00.560 --> 33:01.560
那你这时候

33:01.560 --> 33:02.560
你就会发现

33:02.560 --> 33:03.560
刚才我们是管理员

33:03.560 --> 33:04.560
登录的时候

33:04.560 --> 33:05.560
有一个

33:05.560 --> 33:06.560
我们整个公司的

33:06.560 --> 33:07.560
一个情况分析

33:07.560 --> 33:08.560
那目前来看

33:08.560 --> 33:10.560
如果说你普通用户

33:10.560 --> 33:11.560
这个时候

33:11.560 --> 33:12.560
它返回值

33:12.560 --> 33:13.560
一共是7条

33:13.560 --> 33:14.560
包括我们这个

33:14.560 --> 33:15.560
公司分析

33:15.560 --> 33:16.560
是不是也没有

33:16.560 --> 33:17.560
这个就是一个

33:17.560 --> 33:18.560
用户角色

33:18.560 --> 33:19.560
根据不同角色

33:19.560 --> 33:21.560
返回不同内容

33:21.560 --> 33:22.560
所以说这个

33:22.560 --> 33:23.560
我们要明确一下

33:23.560 --> 33:24.560
那我再用这个

33:24.560 --> 33:25.560
Admin管理员

33:25.560 --> 33:26.560
来进行一个登录

33:26.560 --> 33:27.560
123QWE

33:27.560 --> 33:28.560
当我登录

33:28.560 --> 33:29.560
完成之后

33:29.560 --> 33:30.560
你再来看一下

33:30.560 --> 33:31.560
这个时候

33:31.560 --> 33:32.560
我们返回的路由表

33:32.560 --> 33:33.560
这个是不是又好多了

33:33.560 --> 33:35.560
刚才是7条

33:35.560 --> 33:36.560
现在是9条

33:36.560 --> 33:37.560
这里面又多了

33:37.560 --> 33:38.560
一个员工分析

33:38.560 --> 33:39.560
对不对

33:39.560 --> 33:40.560
OK

33:40.560 --> 33:41.560
既然到了

33:41.560 --> 33:42.560
首页面之后

33:42.560 --> 33:43.560
那现在

33:43.560 --> 33:44.560
我们就要开始

33:44.560 --> 33:45.560
进行一个

33:45.560 --> 33:46.560
它的内容

33:46.560 --> 33:47.560
结构的这么一个

33:47.560 --> 33:48.560
布局排版

33:48.560 --> 33:49.560
我们的结构

33:49.560 --> 33:50.560
排版怎么来做呢

33:50.560 --> 33:51.560
这个里面

33:51.560 --> 33:52.560
我们可以使用

33:52.560 --> 33:53.560
安底站的一个

33:53.560 --> 33:54.560
布局快速的

33:54.560 --> 33:55.560
来实现一下

33:55.560 --> 33:56.560
因为之前

33:56.560 --> 33:57.560
我们的这个模板

33:57.560 --> 33:58.560
我们可以找一下

33:58.560 --> 33:59.560
回到我们的

33:59.560 --> 34:01.560
layout里面

34:01.560 --> 34:03.560
srclayout

34:03.560 --> 34:04.560
下面

34:04.560 --> 34:05.560
这个里面就有

34:05.560 --> 34:06.560
被子layout

34:06.560 --> 34:07.560
是我们主页面

34:07.560 --> 34:08.560
但主页面

34:08.560 --> 34:09.560
现在我们啥没写

34:09.560 --> 34:10.560
是不是

34:10.560 --> 34:11.560
然后里面

34:11.560 --> 34:12.560
也没有什么内容

34:12.560 --> 34:13.560
然后我们可以使用

34:13.560 --> 34:14.560
这种快速的

34:14.560 --> 34:15.560
layout布局

34:15.560 --> 34:16.560
来实现一下

34:17.560 --> 34:18.560
因为它的这个样式

34:18.560 --> 34:19.560
都是由我们

34:19.560 --> 34:20.560
提前写好的

34:20.560 --> 34:21.560
我们有哪一种呢

34:21.560 --> 34:22.560
其实我们看

34:22.560 --> 34:23.560
已经完成的

34:23.560 --> 34:24.560
案例里面是没有futter

34:24.560 --> 34:25.560
但是有侧边篮

34:25.560 --> 34:26.560
对不对

34:26.560 --> 34:27.560
而且侧边篮

34:27.560 --> 34:28.560
在左面

34:28.560 --> 34:29.560
那这个时候

34:29.560 --> 34:30.560
我们就可以使用

34:30.560 --> 34:31.560
最下面的

34:31.560 --> 34:32.560
这里面是它的代码

34:32.560 --> 34:33.560
我们直接的

34:33.560 --> 34:35.560
就来粘贴一套

34:35.560 --> 34:36.560
Layout

34:36.560 --> 34:37.560
就是这一套

34:37.560 --> 34:39.560
把它弄过来

34:39.560 --> 34:40.560
弄过来之后

34:40.560 --> 34:41.560
放在哪个里面

34:41.560 --> 34:42.560
我们先把它

34:42.560 --> 34:43.560
放到这个里面

34:43.560 --> 34:44.560
这是一个

34:44.560 --> 34:45.560
最基本的

34:45.560 --> 34:46.560
然后这个时候

34:46.560 --> 34:47.560
给我们抱错了

34:47.560 --> 34:48.560
抱错很正常

34:48.560 --> 34:49.560
因为什么呢

34:49.560 --> 34:50.560
我们也没有进行

34:50.560 --> 34:51.560
一个引入对吧

34:51.560 --> 34:52.560
那我们一次的

34:52.560 --> 34:53.560
来给它进行

34:53.560 --> 34:54.560
一个引入

34:54.560 --> 34:55.560
Layout from

34:55.560 --> 34:57.560
从我们的安德地里面

34:57.560 --> 34:58.560
来进行一个获取

34:58.560 --> 34:59.560
然后还有一个什么

34:59.560 --> 35:00.560
Siderbar

35:00.560 --> 35:02.560
我们把这个Siderbar

35:02.560 --> 35:04.560
也来做一个获取

35:05.560 --> 35:06.560
Sider

35:06.560 --> 35:07.560
这个Sider

35:07.560 --> 35:09.560
他现在还没获取过来

35:09.560 --> 35:11.560
Sider是怎么来获取的

35:11.560 --> 35:12.560
我们可以看一下

35:12.560 --> 35:13.560
Sider

35:13.560 --> 35:14.560
OK

35:14.560 --> 35:15.560
从我们这个Layout里面

35:15.560 --> 35:16.560
来进行获取

35:16.560 --> 35:17.560
对吧

35:17.560 --> 35:18.560
我们就来给他

35:18.560 --> 35:19.560
把上面这个

35:19.560 --> 35:20.560
复制一下

35:20.560 --> 35:21.560
把这个Sider干掉

35:21.560 --> 35:22.560
我们先看一下

35:22.560 --> 35:23.560
一页面的这个结构

35:23.560 --> 35:25.560
是否快速的能生成

35:26.560 --> 35:27.560
刷新一下

35:27.560 --> 35:28.560
Sider

35:28.560 --> 35:29.560
Hider footer

35:29.560 --> 35:30.560
OK

35:30.560 --> 35:31.560
你看这是没啥问题的

35:31.560 --> 35:32.560
对吧

35:32.560 --> 35:33.560
没啥问题

35:33.560 --> 35:34.560
我们这个时候

35:34.560 --> 35:35.560
就给他添加一些样式

35:35.560 --> 35:36.560
是不是就可以了

35:36.560 --> 35:37.560
也就是说

35:37.560 --> 35:38.560
让他这个高度

35:38.560 --> 35:39.560
还有这个

35:39.560 --> 35:41.560
我们的展示的形式

35:41.560 --> 35:42.560
比如说content footer

35:42.560 --> 35:43.560
footer我们肯定不要

35:43.560 --> 35:44.560
对吧

35:44.560 --> 35:45.560
我们就把footer干掉

35:45.560 --> 35:47.560
把footer干掉之后

35:47.560 --> 35:48.560
我们在这个里面

35:48.560 --> 35:49.560
把footer

35:49.560 --> 35:51.560
给他做一个剃除

35:51.560 --> 35:52.560
完成之后

35:52.560 --> 35:53.560
咱们再来看一眼

35:53.560 --> 35:54.560
现在footer是不是没有了

35:54.560 --> 35:56.560
然后这个比较深啊

35:56.560 --> 35:57.560
颜色

35:57.560 --> 35:58.560
我们这个呢比较浅

35:58.560 --> 35:59.560
那这个怎么来做处理呢

35:59.560 --> 36:01.560
其实这个非常简单

36:01.560 --> 36:02.560
我们直接的

36:02.560 --> 36:03.560
给他添加一个什么呢

36:03.560 --> 36:05.560
给他添加相应的属性

36:05.560 --> 36:06.560
就可以了

36:06.560 --> 36:07.560
咱们粘贴的时候

36:07.560 --> 36:09.560
在这个里面

36:09.560 --> 36:10.560
Layout呢

36:10.560 --> 36:11.560
他还有这个

36:11.560 --> 36:12.560
是否显示

36:12.560 --> 36:13.560
这个比较深的

36:13.560 --> 36:14.560
这个布局颜色

36:14.560 --> 36:15.560
我们来丑一眼

36:15.560 --> 36:17.560
他的这个API

36:17.560 --> 36:19.560
API里面

36:19.560 --> 36:20.560
就有这个class name

36:20.560 --> 36:21.560
可以给布局容器

36:21.560 --> 36:23.560
添加一个class name值

36:23.560 --> 36:24.560
我们这里面

36:24.560 --> 36:25.560
先添加一个class name

36:25.560 --> 36:27.560
等于一个container

36:27.560 --> 36:30.560
比如说这里面写一个container

36:30.560 --> 36:31.560
OK

36:31.560 --> 36:33.560
给他添加上这个之后

36:33.560 --> 36:34.560
咱们再找一些

36:34.560 --> 36:36.560
我们需要的相应的

36:36.560 --> 36:37.560
这个属性啊

36:37.560 --> 36:39.560
那相应的属性都哪些呢

36:39.560 --> 36:40.560
这里面

36:40.560 --> 36:42.560
我记得是有一个主题颜色

36:42.560 --> 36:43.560
主题颜色

36:43.560 --> 36:44.560
默认是深色

36:44.560 --> 36:45.560
但是呢

36:45.560 --> 36:47.560
我们可以给他一个light

36:47.560 --> 36:48.560
那这个时候

36:48.560 --> 36:49.560
你要知道

36:49.560 --> 36:50.560
往哪里放

36:50.560 --> 36:52.560
Layout点setter

36:52.560 --> 36:53.560
对不对

36:53.560 --> 36:55.560
那应该是从这个里面放

36:55.560 --> 36:56.560
setter是在这

36:56.560 --> 36:58.560
那我们就添加一个dame

36:58.560 --> 37:00.560
dame等于light

37:00.560 --> 37:01.560
好了

37:01.560 --> 37:02.560
添加完成之后

37:02.560 --> 37:04.560
那咱们再来查看一下

37:04.560 --> 37:05.560
现在呢

37:05.560 --> 37:06.560
回到我们这个里面

37:06.560 --> 37:07.560
是不是变成白色了

37:07.560 --> 37:09.560
那么针对头部的处理呢

37:09.560 --> 37:11.560
在他的API里面是没有的

37:11.560 --> 37:12.560
这个里面呢

37:12.560 --> 37:14.560
只有这个setter的处理

37:14.560 --> 37:15.560
那头部呢

37:15.560 --> 37:16.560
是需要我们自己进行一些

37:16.560 --> 37:17.560
样式的添加的

37:17.560 --> 37:18.560
这个里面呢

37:18.560 --> 37:20.560
我们可以创建一个CSS文件

37:20.560 --> 37:21.560
在这个里面

37:21.560 --> 37:23.560
我们订一个light文件

37:23.560 --> 37:25.560
这里面我们写一下

37:25.560 --> 37:26.560
这个叫

37:26.560 --> 37:28.560
被子layout

37:28.560 --> 37:30.560
点light文件

37:30.560 --> 37:32.560
订好这个light文件

37:32.560 --> 37:33.560
他的这个样式啊

37:33.560 --> 37:34.560
非常基础

37:34.560 --> 37:36.560
所以说在这个里面

37:36.560 --> 37:37.560
提前已经给同学们

37:37.560 --> 37:39.560
准备好了一个

37:39.560 --> 37:41.560
侧边栏的样式文件

37:41.560 --> 37:42.560
我们拿过来

37:42.560 --> 37:44.560
直接用就OK了

37:44.560 --> 37:46.560
把它放在我们的

37:46.560 --> 37:47.560
这个文件家里面

37:47.560 --> 37:49.560
然后我们拿过来之后呢

37:49.560 --> 37:50.560
在这个里面

37:50.560 --> 37:52.560
我们给他做一个引入啊

37:52.560 --> 37:53.560
input

37:53.560 --> 37:55.560
这个里面点刚

37:55.560 --> 37:56.560
我们的

37:56.560 --> 37:58.560
被子layout点less

37:58.560 --> 37:59.560
把它给引入一下

37:59.560 --> 38:01.560
被子layout点less

38:01.560 --> 38:02.560
OK

38:02.560 --> 38:03.560
咱们来看一下

38:03.560 --> 38:05.560
引入之后是否有了

38:05.560 --> 38:07.560
刷新一下这个界面

38:07.560 --> 38:08.560
OK那你看

38:08.560 --> 38:09.560
现在这个样式

38:09.560 --> 38:10.560
是不是就有了

38:10.560 --> 38:11.560
有了之后呢

38:11.560 --> 38:12.560
其实呢

38:12.560 --> 38:13.560
我们现在来做什么

38:13.560 --> 38:14.560
setter bar呢

38:14.560 --> 38:15.560
我们先来实现一下

38:15.560 --> 38:16.560
也就是说这个侧边栏

38:16.560 --> 38:17.560
侧边栏

38:17.560 --> 38:18.560
我们要做什么事

38:18.560 --> 38:19.560
那这个里面呢

38:19.560 --> 38:20.560
要把路由

38:20.560 --> 38:21.560
给我们添加进去

38:21.560 --> 38:22.560
也就是说

38:22.560 --> 38:23.560
我们看到的

38:23.560 --> 38:24.560
左边展示的

38:24.560 --> 38:25.560
这些相应的路由呢

38:25.560 --> 38:27.560
他都需要添加一下

38:27.560 --> 38:28.560
那这个怎么来做

38:28.560 --> 38:29.560
因为他这个里面

38:29.560 --> 38:30.560
要处理一些业务逻辑

38:30.560 --> 38:31.560
所以说

38:31.560 --> 38:32.560
我们可以单独的

38:32.560 --> 38:34.560
对他来进行一个操作

38:34.560 --> 38:36.560
那我们components

38:36.560 --> 38:37.560
下面我们可以

38:37.560 --> 38:38.560
创建一个文件家

38:38.560 --> 38:39.560
这个文件家呢

38:39.560 --> 38:42.560
就叫setter bar

38:42.560 --> 38:43.560
然后里面

38:43.560 --> 38:46.560
一个index.js

38:46.560 --> 38:47.560
之后呢

38:47.560 --> 38:48.560
我们写一下

38:48.560 --> 38:50.560
setter bar

38:50.560 --> 38:52.560
OK写完了之后

38:52.560 --> 38:55.870
side1

38:55.870 --> 38:57.870
side1

38:57.870 --> 38:58.870
setter bar

38:58.870 --> 38:59.870
这里面没有

38:59.870 --> 39:00.870
r

39:00.870 --> 39:02.870
我们把这个r给去掉

39:02.870 --> 39:04.870
把它给干掉之后

39:04.870 --> 39:05.870
那这个名字呢

39:05.870 --> 39:06.870
我们也改一下

39:06.870 --> 39:08.870
从明明一下

39:08.870 --> 39:11.870
这个里面叫setter bar

39:11.870 --> 39:12.870
OK定义好了之后

39:12.870 --> 39:13.870
我们可以把这个组件

39:13.870 --> 39:14.870
给他做一个抽取

39:14.870 --> 39:15.870
也就是说

39:15.870 --> 39:16.870
我们提前

39:16.870 --> 39:17.870
不在这个里面

39:17.870 --> 39:18.870
进行渲染了

39:18.870 --> 39:20.870
我们单独的在一个组件里面

39:20.870 --> 39:22.870
来进行这个事情的完成

39:22.870 --> 39:23.870
那我们这里面

39:23.870 --> 39:25.870
写一下setter bar

39:25.870 --> 39:26.870
OK

39:26.870 --> 39:28.870
这个里面给他做一个引入

39:28.870 --> 39:29.870
然后呢

39:29.870 --> 39:31.870
给他写一个必合标签

39:31.870 --> 39:32.870
之后呢

39:32.870 --> 39:33.870
我们这个setter bar

39:33.870 --> 39:34.870
还是依赖

39:34.870 --> 39:35.870
我们按的design

39:35.870 --> 39:36.870
里面的这个内容

39:36.870 --> 39:37.870
所以说呢

39:37.870 --> 39:39.870
我们可以给他进行一个传递

39:39.870 --> 39:40.870
这样呢

39:40.870 --> 39:41.870
就把它给传递过去了

39:41.870 --> 39:43.870
就把这个给引入到

39:43.870 --> 39:44.870
我们setter bar里面

39:44.870 --> 39:45.870
就OK了

39:45.870 --> 39:46.870
好了

39:46.870 --> 39:47.870
定义好之后

39:47.870 --> 39:48.870
那这个时候

39:48.870 --> 39:49.870
我们需要接收一下

39:49.870 --> 39:50.870
按他的这个组件

39:50.870 --> 39:51.870
setter

39:51.870 --> 39:52.870
OK

39:52.870 --> 39:53.870
没什么问题

39:53.870 --> 39:54.870
那我们现在接收过来

39:54.870 --> 39:55.870
首先第一呢

39:55.870 --> 39:56.870
要保证他的一个

39:56.870 --> 39:57.870
正常的渲染

39:57.870 --> 39:58.870
对吧

39:58.870 --> 39:59.870
你看一下

39:59.870 --> 40:00.870
现在还是可以

40:00.870 --> 40:01.870
来进行一个显示的

40:01.870 --> 40:02.870
没啥问题

40:02.870 --> 40:04.870
那我们就在这个setter bar里面

40:04.870 --> 40:06.870
来把内容给做一下

40:06.870 --> 40:07.870
首先这个里面

40:07.870 --> 40:08.870
咱们看到

40:08.870 --> 40:09.870
已经完成的

40:09.870 --> 40:10.870
他的头部呢

40:10.870 --> 40:11.870
是有一个logo

40:11.870 --> 40:12.870
然后呢

40:12.870 --> 40:14.870
还会有一个文字的描述

40:14.870 --> 40:15.870
那这里面

40:15.870 --> 40:17.870
我们依一次的就来写一下

40:17.870 --> 40:19.870
先给他一个类名

40:19.870 --> 40:20.870
因为我这个类里面

40:20.870 --> 40:22.870
是有针对这个setter bar

40:22.870 --> 40:23.870
做了一些样式处理

40:23.870 --> 40:26.870
那我写一个setter bar

40:26.870 --> 40:27.870
之后呢

40:27.870 --> 40:28.870
这里面的内容

40:28.870 --> 40:30.870
依一次的来进行一个填充

40:30.870 --> 40:31.870
首先呢

40:31.870 --> 40:35.440
是我们的brown的品牌啊

40:35.440 --> 40:36.440
OK

40:36.440 --> 40:38.440
brown的定义好了之后

40:38.440 --> 40:39.440
第一个呢

40:39.440 --> 40:40.440
是我们的这个logo

40:40.440 --> 40:42.440
里面就来写一下

40:42.440 --> 40:44.440
写一个点logo

40:44.440 --> 40:46.440
logo里面都有啥内容呢

40:46.440 --> 40:48.440
这里面有一个mg

40:48.440 --> 40:50.440
mg里面指向一张图片

40:50.440 --> 40:51.440
那我们可以夹带一个

40:51.440 --> 40:53.440
把我们的这个小logo图片

40:53.440 --> 40:54.440
给夹带进来

40:54.440 --> 40:56.440
那我们定一个inputmg

40:56.440 --> 40:58.440
fram从哪来

40:58.440 --> 40:59.440
从我们的comment

40:59.440 --> 41:00.440
文件家下面

41:00.440 --> 41:02.440
夹带一个图片对象

41:02.440 --> 41:04.440
comment文件家下面的mg

41:04.440 --> 41:06.440
文件家下面的

41:06.440 --> 41:09.440
我们的一个logo.png

41:10.440 --> 41:11.440
好了引入之后

41:11.440 --> 41:13.440
那咱们给他装进来啊

41:14.440 --> 41:17.440
src下面的mg

41:17.440 --> 41:19.440
或者说直接的叫logo

41:19.440 --> 41:20.440
就可以了

41:20.440 --> 41:21.440
logo之后呢

41:21.440 --> 41:22.440
我们把上面的名字

41:22.440 --> 41:24.440
也给他做一个调整

41:24.440 --> 41:25.440
叫logo

41:25.440 --> 41:26.440
OK那咱们来看一下

41:26.440 --> 41:28.440
是否有显示

41:28.440 --> 41:29.440
当我刷新之后

41:29.440 --> 41:30.440
这个logo是不是出来了

41:30.440 --> 41:31.440
之后呢

41:31.440 --> 41:33.440
我继续往下写啊

41:33.440 --> 41:35.440
下面是一个标题

41:35.440 --> 41:37.440
那我这个叫杜依教育

41:37.440 --> 41:39.440
像是已经提前设置好了

41:39.440 --> 41:40.440
所以说类名呢

41:40.440 --> 41:42.440
我们尽量跟这个lives文件里面

41:42.440 --> 41:44.440
的这个类名进行吻合

41:44.440 --> 41:45.440
然后同学们

41:45.440 --> 41:46.440
可以查看一下

41:46.440 --> 41:48.440
里面的这个类名啊

41:48.440 --> 41:49.440
非常的简单

41:49.440 --> 41:50.440
一样是没有什么

41:50.440 --> 41:51.440
特别复杂的啊

41:51.440 --> 41:53.440
OK定义完成之后

41:53.440 --> 41:55.440
那就是下边的一个内容展示了

41:55.440 --> 41:56.440
对不对

41:56.440 --> 41:57.440
下面的内容展示

41:57.440 --> 41:58.440
第一步我们首先

41:58.440 --> 42:00.440
要获取一个路由的列表啊

42:00.440 --> 42:01.440
那我们这里面

42:01.440 --> 42:03.440
路由存放在我们的

42:03.440 --> 42:05.440
这个sachen storage里面

42:05.440 --> 42:07.440
我们就定一个concept

42:07.440 --> 42:08.440
root list

42:08.440 --> 42:09.440
给他获取一下啊

42:09.440 --> 42:10.440
因为是一个

42:10.440 --> 42:11.440
json字幕刷

42:11.440 --> 42:12.440
所以说我们这里面

42:12.440 --> 42:14.440
json.pass

42:14.440 --> 42:16.440
给他进行一个解析

42:16.440 --> 42:18.440
sachen storage

42:18.440 --> 42:19.440
然后呢这个里面

42:19.440 --> 42:21.440
点get item

42:22.440 --> 42:23.440
解析出来

42:23.440 --> 42:24.440
就是我们的

42:24.440 --> 42:25.440
root list

42:25.440 --> 42:26.440
存储的那个值

42:26.440 --> 42:27.440
我们可以打印一下

42:27.440 --> 42:29.440
这个叫root list

42:29.440 --> 42:31.440
看它是否有这个值

42:31.440 --> 42:32.440
检查一下元素

42:32.440 --> 42:34.440
OK检查的时候

42:34.440 --> 42:35.440
咱们这个里面

42:35.440 --> 42:37.440
你会发现有9条值的对不对

42:37.440 --> 42:38.440
有9条值的呢

42:38.440 --> 42:39.440
我这里面就可以

42:39.440 --> 42:41.440
给它进行一个渲染了

42:41.440 --> 42:42.440
也就是说

42:42.440 --> 42:43.440
从不软的下面

42:43.440 --> 42:45.440
我们再定义一个啊

42:45.440 --> 42:46.440
这个里面

42:46.440 --> 42:47.440
我们创建一个

42:47.440 --> 42:48.440
这个叫什么呢

42:48.440 --> 42:49.440
先写一个div吧

42:49.440 --> 42:50.440
class

42:50.440 --> 42:51.440
因为这个类名

42:51.440 --> 42:52.440
已经规定好了啊

42:52.440 --> 42:54.440
我们尽量保持一致

42:54.440 --> 42:55.440
class name

42:55.440 --> 42:57.440
等于我们提前

42:57.440 --> 42:58.440
定义好的这个

42:58.440 --> 43:03.030
manual container

43:03.030 --> 43:04.030
manual container

43:04.030 --> 43:05.030
然后呢

43:05.030 --> 43:06.030
我在这个里面

43:06.030 --> 43:07.030
写啊

43:07.030 --> 43:08.030
当然这个里面

43:08.030 --> 43:10.030
是有一个manual container的

43:10.030 --> 43:11.030
我可以查找一下

43:11.030 --> 43:12.030
这个名字啊

43:12.030 --> 43:13.030
我们改成托风棒

43:13.030 --> 43:16.030
统一一下manual container

43:16.030 --> 43:17.030
OK

43:17.030 --> 43:18.030
这里处理完了之后

43:18.030 --> 43:19.030
那我把这个名字

43:19.030 --> 43:22.030
也改一下manual container

43:22.030 --> 43:23.030
写完之后

43:23.030 --> 43:24.030
那这个里面是啥呢

43:24.030 --> 43:26.030
是一个下拉菜单对不对

43:26.030 --> 43:27.030
那下拉菜单呢

43:27.030 --> 43:28.030
我们可以借助

43:28.030 --> 43:29.030
安底站的一个

43:29.030 --> 43:30.030
下拉菜单使用啊

43:30.030 --> 43:31.030
那这个里面呢

43:31.030 --> 43:32.030
安底站

43:32.030 --> 43:33.030
给我们提供了

43:33.030 --> 43:34.030
一个manual

43:34.030 --> 43:35.030
让我们来进行使用

43:35.030 --> 43:36.030
引入

43:36.030 --> 43:37.030
由于呢

43:37.030 --> 43:38.030
我们这个sider啊

43:38.030 --> 43:39.030
都是从这个副组件

43:39.030 --> 43:40.030
给他引进来的

43:40.030 --> 43:41.030
那我们这里面啊

43:41.030 --> 43:43.030
这个manual呢

43:43.030 --> 43:44.030
也从这个副组件

43:44.030 --> 43:46.030
给他进行一个引入吧

43:46.030 --> 43:47.030
也就是说

43:47.030 --> 43:49.030
我们倒入一个manual

43:49.030 --> 43:50.030
OK

43:50.030 --> 43:51.030
那这个manual倒入之后

43:51.030 --> 43:52.030
从这个里面

43:52.030 --> 43:53.030
你要给他进行

43:53.030 --> 43:54.030
一个传递对不对

43:54.030 --> 43:55.030
那我这里面

43:55.030 --> 43:57.030
来写一下manual

43:57.030 --> 43:58.030
哎

43:58.030 --> 44:00.030
manual等于我们的这个manual

44:00.030 --> 44:02.030
给他传递过去之后

44:02.030 --> 44:03.030
Sidebar呢

44:03.030 --> 44:05.030
给他来进行一个接收

44:05.030 --> 44:06.030
当你接收到

44:06.030 --> 44:07.030
这个manual之后

44:07.030 --> 44:08.030
那这个时候

44:08.030 --> 44:10.030
你就可以进行一个使用了啊

44:10.030 --> 44:11.030
manual呢

44:11.030 --> 44:12.030
非常简单啊

44:12.030 --> 44:13.030
我们可以查阅APL啊

44:13.030 --> 44:14.030
来看一下

44:14.030 --> 44:15.030
这里面有manual

44:15.030 --> 44:16.030
还有什么呢

44:16.030 --> 44:17.030
manual item啊

44:17.030 --> 44:18.030
当然了

44:18.030 --> 44:19.030
前提这个manual呢

44:19.030 --> 44:20.030
我们可以给他

44:20.030 --> 44:21.030
定一些相关的内容

44:21.030 --> 44:22.030
首先呢

44:22.030 --> 44:23.030
我们指定一下

44:23.030 --> 44:25.030
他的这个model

44:25.030 --> 44:26.030
model啊

44:26.030 --> 44:27.030
model等于一个什么的

44:27.030 --> 44:28.030
音烂啊

44:28.030 --> 44:29.030
OK

44:29.030 --> 44:31.030
定义好了之后

44:31.030 --> 44:32.030
我们这里面

44:32.030 --> 44:33.030
有一个slag

44:33.030 --> 44:34.030
他k

44:34.030 --> 44:36.030
也就是说选定的这个值啊

44:36.030 --> 44:38.030
我们给他定一个slag

44:38.030 --> 44:39.030
的k是谁呢

44:39.030 --> 44:41.030
是我们的这个

44:41.030 --> 44:42.030
呃

44:42.030 --> 44:43.030
当前的这个路径的

44:43.030 --> 44:44.030
这个名字就可以了

44:44.030 --> 44:45.030
比如说我们这个

44:45.030 --> 44:46.030
现代是这个salary

44:46.030 --> 44:47.030
不对啊

44:47.030 --> 44:48.030
我们给他指定一个

44:48.030 --> 44:49.030
什么dashboard

44:49.030 --> 44:50.030
图表分析这一块

44:50.030 --> 44:51.030
是不是就可以了

44:51.030 --> 44:52.030
那这个名字怎么获取

44:52.030 --> 44:53.030
我们可以

44:53.030 --> 44:54.030
从路由里面获取

44:54.030 --> 44:55.030
对吧

44:55.030 --> 44:56.030
我们可以通过这种

44:56.030 --> 44:57.030
input

44:57.030 --> 44:58.030
history

44:58.030 --> 44:59.030
把路由给他进行

44:59.030 --> 45:00.030
一个获取啊

45:00.030 --> 45:01.030
input

45:02.030 --> 45:03.030
history

45:05.030 --> 45:06.030
forrom

45:06.030 --> 45:07.030
从我们的这个

45:07.030 --> 45:08.030
无名里面

45:08.030 --> 45:09.030
把的这个路由对象

45:09.030 --> 45:10.030
给引

45:10.030 --> 45:11.030
引进来

45:11.030 --> 45:12.030
引进来之后

45:12.030 --> 45:13.030
那这个时候呢

45:13.030 --> 45:14.030
我们就可以得到

45:14.030 --> 45:15.030
当前他的这个

45:15.030 --> 45:16.030
路径的名字

45:16.030 --> 45:17.030
path name

45:17.030 --> 45:19.030
等于我们的

45:19.030 --> 45:20.030
history

45:20.030 --> 45:22.030
点一个location

45:22.030 --> 45:24.030
从这个location里面

45:24.030 --> 45:26.030
获取一个path name

45:26.030 --> 45:27.030
我们可以看一下

45:27.030 --> 45:29.030
这个path name

45:29.030 --> 45:30.030
OK

45:30.030 --> 45:31.030
打印一下

45:31.030 --> 45:32.030
打印一下这个

45:32.030 --> 45:33.030
slektk

45:33.030 --> 45:34.030
我先给他注意

45:34.030 --> 45:35.030
刷新一下

45:35.030 --> 45:36.030
看一下他的这个效果

45:36.030 --> 45:37.030
你看dashboard

45:37.030 --> 45:38.030
是不是就获取到了

45:38.030 --> 45:40.030
获取到这个dashboard之后

45:40.030 --> 45:41.030
那我出手话的时候

45:41.030 --> 45:43.030
先把他这个

45:43.030 --> 45:44.030
slektk

45:44.030 --> 45:45.030
给他指定为

45:45.030 --> 45:46.030
这个当前的

45:46.030 --> 45:48.030
我们的这个获取到的

45:48.030 --> 45:49.030
path name

45:49.030 --> 45:50.030
OK 那这样

45:50.030 --> 45:51.030
第一下啊

45:51.030 --> 45:52.030
就有一个高量效果

45:52.030 --> 45:53.030
那下面怎么来做呢

45:53.030 --> 45:55.030
我们既然获取到的

45:55.030 --> 45:56.030
这个路由列表之后

45:56.030 --> 45:57.030
那我就是循环

45:57.030 --> 45:58.030
这个路由

45:58.030 --> 45:59.030
是不是就可以了

45:59.030 --> 46:00.030
这个里面

46:00.030 --> 46:01.030
就可以

46:01.030 --> 46:02.030
判定一下

46:02.030 --> 46:03.030
这里面

46:03.030 --> 46:04.030
我们写一下

46:04.030 --> 46:06.030
rootlist

46:06.030 --> 46:07.030
首先看他有没有

46:07.030 --> 46:08.030
如果说没有

46:08.030 --> 46:09.030
是不是就比较尴尬了

46:09.030 --> 46:10.030
那我们这里面

46:10.030 --> 46:12.030
看一下rootlist的成立

46:12.030 --> 46:13.030
对不对

46:13.030 --> 46:14.030
那成立的话

46:14.030 --> 46:15.030
那这个里面

46:15.030 --> 46:16.030
我们可以做一个容错

46:16.030 --> 46:17.030
使用es6

46:17.030 --> 46:18.030
这种问号的形式

46:18.030 --> 46:20.030
rootlist.map

46:20.030 --> 46:21.030
那没有

46:21.030 --> 46:22.030
是不是就不炫

46:22.030 --> 46:23.030
对吧

46:23.030 --> 46:24.030
就是一个容错

46:24.030 --> 46:26.030
rootlist.map item

46:26.030 --> 46:27.030
那我们这里面

46:27.030 --> 46:28.030
它的manual

46:28.030 --> 46:30.030
这个是manual.

46:30.030 --> 46:32.030
下面有一个item

46:32.030 --> 46:34.030
来进行一个渲染

46:34.030 --> 46:36.030
因为它这个是个组件

46:36.030 --> 46:38.030
我们就这样写manual item

46:38.030 --> 46:39.030
那里面呢

46:39.030 --> 46:40.030
每一个肯定得给他指定

46:40.030 --> 46:41.030
k

46:41.030 --> 46:42.030
那我们就写一下

46:42.030 --> 46:43.030
k等于谁

46:43.030 --> 46:45.030
因为我们知道item

46:45.030 --> 46:46.030
也就是说

46:46.030 --> 46:47.030
渲染的这个路由列表里面

46:47.030 --> 46:48.030
它都有这个root对象

46:48.030 --> 46:49.030
对吧

46:49.030 --> 46:50.030
那我直接把这个

46:50.030 --> 46:51.030
k指定为

46:51.030 --> 46:52.030
它的这个root对象

46:52.030 --> 46:53.030
之后呢

46:53.030 --> 46:54.030
我们先给他

46:54.030 --> 46:56.030
做一个打印吧

46:56.030 --> 46:59.030
比如说这里面

46:59.030 --> 47:00.030
打印什么呢

47:00.030 --> 47:01.030
item

47:01.030 --> 47:02.030
这里面应该是有一个

47:02.030 --> 47:04.030
zh name

47:04.030 --> 47:05.030
咱们来看一下

47:05.030 --> 47:06.030
是否可行

47:06.030 --> 47:07.030
刚才的报错

47:07.030 --> 47:08.030
比较严重

47:08.030 --> 47:09.030
又跳到手机面去了

47:09.030 --> 47:10.030
那我们再登录一下

47:10.030 --> 47:11.030
这个时候呢

47:11.030 --> 47:12.030
slektk

47:12.030 --> 47:15.030
probsondomelement

47:15.030 --> 47:16.030
这个里面说

47:16.030 --> 47:18.030
我们是一个domelement

47:18.030 --> 47:19.030
这个时候呢

47:19.030 --> 47:20.030
我们应该是

47:20.030 --> 47:21.030
给他一个什么

47:21.030 --> 47:22.030
给他一个

47:22.030 --> 47:23.030
综扩号的形式

47:23.030 --> 47:25.030
pass name

47:25.030 --> 47:26.030
ok 它是以数组的形式

47:26.030 --> 47:28.030
来进行接收的

47:28.030 --> 47:29.030
我们来看一眼

47:29.030 --> 47:30.030
再看一眼

47:30.030 --> 47:31.030
这里面还是有一个

47:31.030 --> 47:33.030
domelement

47:33.030 --> 47:34.030
它说我是一个

47:34.030 --> 47:36.030
domelement

47:36.030 --> 47:38.030
显然不对啊

47:38.030 --> 47:39.030
slekt

47:39.030 --> 47:40.030
这个我记得

47:40.030 --> 47:42.030
应该是slekt

47:42.030 --> 47:44.030
slekt

47:44.030 --> 47:45.030
slektk

47:45.030 --> 47:46.030
如果说再不行

47:46.030 --> 47:48.030
我们只能去查文档

47:48.030 --> 47:51.030
其实文档里面都有

47:51.030 --> 47:52.030
我们来看一下

47:52.030 --> 47:54.030
感觉上没什么问题

47:55.030 --> 47:57.030
但是现在没渲染出来

47:57.030 --> 47:58.030
我们看一下

47:58.030 --> 48:00.030
没渲染出来的原因是啥

48:00.030 --> 48:01.030
咱们先把这个

48:01.030 --> 48:03.030
root list

48:03.030 --> 48:05.030
给他做一个打印

48:05.030 --> 48:06.030
打印出来

48:06.030 --> 48:07.030
这个root list

48:07.030 --> 48:08.030
点map的时候

48:08.030 --> 48:09.030
这里面有一个

48:09.030 --> 48:11.030
zh name

48:11.030 --> 48:13.030
那zh name

48:13.030 --> 48:15.030
为什么没渲染出来

48:15.030 --> 48:16.030
这里面我还可以

48:16.030 --> 48:19.030
打印这个item

48:19.030 --> 48:23.030
我们来丑验这个item

48:23.030 --> 48:25.030
我们直接先给他

48:25.030 --> 48:26.030
做一个什么

48:26.030 --> 48:27.030
给他sorry

48:27.030 --> 48:28.030
这个里面冤枉

48:28.030 --> 48:29.030
因为这个map

48:29.030 --> 48:31.030
是没有做return的

48:31.030 --> 48:33.030
我们先给他做一个return

48:33.030 --> 48:34.030
这样就可以

48:34.030 --> 48:35.030
正常来渲染

48:35.030 --> 48:37.030
感觉上都出来了

48:37.030 --> 48:38.030
然后出来之后

48:38.030 --> 48:39.030
这个里面

48:39.030 --> 48:41.030
其实还缺东西

48:41.030 --> 48:42.030
缺什么东西

48:42.030 --> 48:44.030
前面有一个小图标

48:44.030 --> 48:45.030
之后其实他

48:45.030 --> 48:47.030
还可以做跳转

48:47.030 --> 48:48.030
那这个事咋办

48:48.030 --> 48:50.030
我们还引入一个

48:50.030 --> 48:51.030
组架

48:51.030 --> 48:52.030
叫什么

48:52.030 --> 48:53.030
叫什么

48:53.030 --> 48:54.030
就是我们的link

48:54.030 --> 48:56.030
之前说过的link

48:56.030 --> 48:58.030
link来

48:58.030 --> 49:00.030
从manualitem下面

49:00.030 --> 49:01.030
我们给他做一个什么

49:01.030 --> 49:02.030
做一个包裹

49:02.030 --> 49:04.030
把这个渲染的文字

49:04.030 --> 49:06.030
然后给他进行

49:06.030 --> 49:08.030
一个包裹link

49:08.030 --> 49:09.030
OK

49:09.030 --> 49:11.030
第一个也是大写的

49:11.030 --> 49:12.030
lnk

49:12.030 --> 49:13.030
好了

49:13.030 --> 49:15.030
包裹进去之后

49:15.030 --> 49:16.030
把死半

49:16.030 --> 49:18.030
第一个先放进去

49:18.030 --> 49:19.030
放进去之后

49:19.030 --> 49:21.030
我们lnk

49:21.030 --> 49:22.030
这个里面

49:22.030 --> 49:24.030
应该是没有问题

49:24.030 --> 49:26.030
怎么给我暴红

49:26.030 --> 49:27.030
好了

49:27.030 --> 49:28.030
先不管他这个问题

49:28.030 --> 49:30.030
我们直接的在这个里面

49:30.030 --> 49:31.030
继续来写

49:31.030 --> 49:32.030
暴红的原因是什么

49:32.030 --> 49:33.030
我跟同学们讲

49:33.030 --> 49:34.030
因为这个里面

49:34.030 --> 49:36.030
得给他一个

49:36.030 --> 49:37.030
兔属性

49:37.030 --> 49:38.030
这个是必须的

49:38.030 --> 49:39.030
所以说

49:39.030 --> 49:40.030
我们给他添加上

49:40.030 --> 49:41.030
添加上跳转

49:41.030 --> 49:42.030
就是我们item

49:42.030 --> 49:43.030
点root

49:43.030 --> 49:44.030
就OK了

49:44.030 --> 49:45.030
现在这个暴红

49:45.030 --> 49:46.030
是不是处理完了

49:46.030 --> 49:47.030
来

49:47.030 --> 49:48.030
咱们看一下效果

49:48.030 --> 49:49.030
暂时

49:49.030 --> 49:50.030
你也看不出来

49:50.030 --> 49:51.030
暂时目前

49:51.030 --> 49:52.030
如果说我加lnk之后

49:52.030 --> 49:54.030
因为我提前指定好了

49:54.030 --> 49:56.030
这个cf的样式

49:56.030 --> 49:58.030
所以说这个里面

49:58.030 --> 50:00.030
应该是有这个颜色指认

50:00.030 --> 50:01.030
而且你看

50:01.030 --> 50:02.030
这个上面

50:02.030 --> 50:03.030
是不是已经有跳转

50:03.030 --> 50:04.030
对吧

50:04.030 --> 50:05.030
我们再把这个icon

50:05.030 --> 50:06.030
给添加进来

50:06.030 --> 50:07.030
icon

50:07.030 --> 50:09.030
我们引入这个icon map

50:09.030 --> 50:10.030
因为我们知道

50:10.030 --> 50:11.030
可以看一下

50:11.030 --> 50:12.030
在这个路由里面

50:12.030 --> 50:14.030
其实它的返回信息

50:14.030 --> 50:15.030
是有包含的

50:15.030 --> 50:16.030
我们可以丑一眼

50:16.030 --> 50:18.030
这个里面是有一个icon

50:18.030 --> 50:19.030
这个icon

50:19.030 --> 50:20.030
我们就可以

50:20.030 --> 50:21.030
通过icon map

50:21.030 --> 50:22.030
来做一个匹配

50:22.030 --> 50:23.030
就可以了

50:23.030 --> 50:27.030
引入inputicon map

50:27.030 --> 50:29.030
前面是小写的

50:29.030 --> 50:31.030
icon map from

50:31.030 --> 50:32.030
从哪来呢

50:32.030 --> 50:34.030
从我们的conformance

50:34.030 --> 50:35.030
文件夹下面的

50:35.030 --> 50:37.030
有一个icon map

50:37.030 --> 50:38.030
给它夹来进来

50:38.030 --> 50:39.030
之后

50:39.030 --> 50:40.030
我们这个

50:40.030 --> 50:41.030
让icon map

50:41.030 --> 50:42.030
来做一个渲染

50:42.030 --> 50:43.030
就可以了

50:43.030 --> 50:44.030
那icon map

50:44.030 --> 50:45.030
怎么来渲染呢

50:45.030 --> 50:47.030
就是我们的item

50:47.030 --> 50:48.030
下面的一个什么

50:48.030 --> 50:49.030
有点icon

50:49.030 --> 50:50.030
是不是就可以了

50:50.030 --> 50:51.030
但是你看

50:51.030 --> 50:52.030
现在如果说

50:52.030 --> 50:53.030
我们写完了

50:53.030 --> 50:54.030
没啥用对不对

50:54.030 --> 50:55.030
为什么呢

50:55.030 --> 50:56.030
因为我们这个icon map

50:56.030 --> 50:57.030
它里面

50:57.030 --> 50:58.030
当时存储的内容

50:58.030 --> 50:59.030
比较少

50:59.030 --> 51:00.030
我们也没有把

51:00.030 --> 51:01.030
这个相关的内容

51:01.030 --> 51:02.030
给进行存储

51:02.030 --> 51:03.030
对吧

51:03.030 --> 51:04.030
那这个怎么办

51:04.030 --> 51:05.030
不要担心

51:05.030 --> 51:06.030
因为这个是

51:06.030 --> 51:07.030
重复性的工作

51:07.030 --> 51:08.030
我在这个里面

51:08.030 --> 51:09.030
已经给同学们

51:09.030 --> 51:10.030
提前准备好的

51:10.030 --> 51:11.030
那你就不用去

51:11.030 --> 51:12.030
这个and里面

51:12.030 --> 51:13.030
进行搜索了

51:13.030 --> 51:14.030
你只要把我

51:14.030 --> 51:15.030
刚才复制这套

51:15.030 --> 51:16.030
你给它

51:16.030 --> 51:17.030
进行一个粘题

51:17.030 --> 51:18.030
因为这个

51:18.030 --> 51:19.030
它是一个重复性工作

51:19.030 --> 51:20.030
当你做完这个之后

51:20.030 --> 51:21.030
你会发现

51:21.030 --> 51:22.030
这个时候

51:22.030 --> 51:23.030
是不是就OK了

51:23.030 --> 51:24.030
对吧

51:24.030 --> 51:25.030
图标就进来了

51:25.030 --> 51:26.030
也就是说

51:26.030 --> 51:27.030
我提前已经找好了

51:27.030 --> 51:28.030
一些组件

51:28.030 --> 51:29.030
你直接拿过来

51:29.030 --> 51:30.030
进行使用就可以了

51:30.030 --> 51:31.030
当你把这些内容

51:31.030 --> 51:32.030
准备好之后

51:32.030 --> 51:33.030
那现在

51:33.030 --> 51:34.030
还有一件事

51:34.030 --> 51:35.030
是需要我们做的

51:35.030 --> 51:36.030
我们的console

51:36.030 --> 51:37.030
要给它进行

51:37.030 --> 51:38.030
一个打掉

51:38.030 --> 51:39.030
也就是说

51:39.030 --> 51:40.030
没有必要在这个里面

51:40.030 --> 51:41.030
炫耳了

51:41.030 --> 51:42.030
而且我们这个

51:42.030 --> 51:43.030
jsonar pass

51:43.030 --> 51:44.030
这个时候

51:44.030 --> 51:45.030
我们要有一个容错

51:45.030 --> 51:46.030
什么容错呢

51:46.030 --> 51:47.030
我们要判定一下

51:47.030 --> 51:48.030
如果说用货

51:48.030 --> 51:49.030
它要手动

51:49.030 --> 51:50.030
把这个删除了

51:50.030 --> 51:51.030
怎么办呢

51:51.030 --> 51:52.030
对不对

51:52.030 --> 51:53.030
那我们这里面

51:53.030 --> 51:54.030
sonar storage

51:54.030 --> 51:55.030
点get item

51:55.030 --> 51:56.030
router list的

51:56.030 --> 51:57.030
成立吗

51:57.030 --> 51:58.030
成立的话

51:58.030 --> 51:59.030
你就去接真点pass

51:59.030 --> 52:00.030
否则

52:00.030 --> 52:01.030
那我这个时候

52:01.030 --> 52:02.030
就给你一个空

52:02.030 --> 52:03.030
是不是就可以了

52:03.030 --> 52:04.030
那这个时候

52:04.030 --> 52:05.030
就给它做了

52:05.030 --> 52:06.030
一个容错的判断

52:06.030 --> 52:07.030
当然你不做

52:07.030 --> 52:08.030
也OK的

52:08.030 --> 52:09.030
只要是你

52:09.030 --> 52:10.030
炫耳不出来

52:10.030 --> 52:11.030
那直接强制性

52:11.030 --> 52:12.030
就给我跳转

52:12.030 --> 52:13.030
到手页面去了

52:13.030 --> 52:14.030
这样就保证

52:14.030 --> 52:15.030
我们因为这个

52:15.030 --> 52:16.030
获取不到

52:16.030 --> 52:18.030
产生的一种错误行为

52:19.030 --> 52:20.030
OK

52:20.030 --> 52:22.030
那这个处理完成之后

52:22.030 --> 52:24.030
我们就是让它进行一个

52:24.030 --> 52:25.030
指定的路由跳转

52:25.030 --> 52:26.030
对吧

52:26.030 --> 52:27.030
路由跳转在哪里做呢

52:27.030 --> 52:28.030
我们这个

52:28.030 --> 52:29.030
betterly out里面

52:29.030 --> 52:30.030
其实当时

52:30.030 --> 52:31.030
炫耳的时候

52:31.030 --> 52:32.030
咱们直接沾模板了

52:32.030 --> 52:33.030
对吧

52:33.030 --> 52:34.030
那我们其实

52:34.030 --> 52:35.030
这个里面

52:35.030 --> 52:36.030
应该是把这个催无准

52:36.030 --> 52:37.030
给它进行一个

52:37.030 --> 52:38.030
炫耳

52:38.030 --> 52:39.030
是不是这样就对了

52:39.030 --> 52:40.030
我们来看一下

52:40.030 --> 52:41.030
现代是否OK

52:41.030 --> 52:42.030
咱们一次的

52:42.030 --> 52:43.030
来试一下

52:43.030 --> 52:45.030
员工分析 出勤

52:45.030 --> 52:46.030
包括我们的

52:46.030 --> 52:47.030
员工管理

52:47.030 --> 52:48.030
以及部门

52:48.030 --> 52:49.030
部门这一个

52:49.030 --> 52:50.030
没炫耳出来

52:50.030 --> 52:51.030
我们看一下

52:51.030 --> 52:52.030
员工管理界面

52:52.030 --> 52:53.030
这个叫department

52:53.030 --> 52:54.030
那我们这个

52:54.030 --> 52:55.030
为什么没出来

52:55.030 --> 52:56.030
那就得回去

52:56.030 --> 52:58.030
找我们的界面

52:58.030 --> 52:59.030
department

52:59.030 --> 53:01.030
我们重命名一下

53:01.030 --> 53:02.030
跟原来的是一样

53:02.030 --> 53:03.030
department

53:03.030 --> 53:04.030
没有问题

53:04.030 --> 53:05.030
我们看一下

53:05.030 --> 53:06.030
这个叫

53:06.030 --> 53:07.030
员工管理界面

53:07.030 --> 53:08.030
不对

53:08.030 --> 53:09.030
这个叫部门管理

53:09.030 --> 53:10.030
对吧

53:10.030 --> 53:11.030
好的

53:11.030 --> 53:12.030
把它给改一下

53:12.030 --> 53:13.030
部门管理没问题

53:13.030 --> 53:14.030
员工也没问题

53:14.030 --> 53:15.030
对不对

53:15.030 --> 53:16.030
然后到直级

53:16.030 --> 53:17.030
计校考核

53:17.030 --> 53:19.030
讲诚记录

53:19.030 --> 53:20.030
调薪记录有

53:20.030 --> 53:21.030
讲诚记录没有

53:21.030 --> 53:22.030
考金信息有了

53:22.030 --> 53:23.030
讲诚记录

53:23.030 --> 53:25.030
没有原因是啥

53:25.030 --> 53:26.030
你看我录

53:26.030 --> 53:27.030
跳转的时候

53:27.030 --> 53:29.030
这个显然不太对

53:29.030 --> 53:30.030
你看我调薪记录

53:30.030 --> 53:32.030
和其他的都没有

53:32.030 --> 53:33.030
什么问题

53:33.030 --> 53:35.030
但是这个讲诚记录的时候

53:35.030 --> 53:36.030
这个叫

53:36.030 --> 53:37.030
reward

53:37.030 --> 53:38.030
and department

53:38.030 --> 53:39.030
这个是

53:39.030 --> 53:41.030
奖励和惩罚对不对

53:41.030 --> 53:42.030
那这个时候

53:42.030 --> 53:43.030
我们定义的时候

53:43.030 --> 53:44.030
只定义了一个

53:44.030 --> 53:45.030
reward

53:45.030 --> 53:46.030
recode

53:46.030 --> 53:47.030
那这个

53:47.030 --> 53:48.030
我们给它改一下名吧

53:48.030 --> 53:49.030
对吧

53:49.030 --> 53:50.030
给它改叫

53:50.030 --> 53:52.030
reward and department

53:52.030 --> 53:53.030
然后里面

53:53.030 --> 53:54.030
这个组件

53:54.030 --> 53:56.030
我们也给它改一个名

53:56.030 --> 53:58.030
跟我们录有返回的一致

53:58.030 --> 53:59.030
或者说

53:59.030 --> 54:00.030
你可以改你的

54:00.030 --> 54:02.030
数据库里面的数据表

54:02.030 --> 54:03.030
然后把这个名字

54:03.030 --> 54:04.030
改了也是OK的

54:04.030 --> 54:05.030
两种行为

54:05.030 --> 54:06.030
任你选其一

54:06.030 --> 54:07.030
现在

54:07.030 --> 54:08.030
我们讲诚记录

54:08.030 --> 54:09.030
是不是就有了

54:09.030 --> 54:10.030
对吧

54:10.030 --> 54:11.030
以上这些

54:11.030 --> 54:13.030
就是我们这几颗的内容

54:13.030 --> 54:15.030
实现了一个录入手臂

54:15.030 --> 54:16.030
并且

54:16.030 --> 54:17.030
我们现在已经

54:17.030 --> 54:18.030
跳转到主件面了

54:18.030 --> 54:19.030
那么下几颗

54:19.030 --> 54:21.030
我们就把这个hider

54:21.030 --> 54:22.030
来给它实践一下

54:22.030 --> 54:24.030
包括我们側边篮的一个收缩

54:24.030 --> 54:26.030
这种交互效果

54:26.030 --> 54:27.030
来处理一下

54:27.030 --> 54:28.030
就OK了

54:28.030 --> 54:29.030
我们这几颗的内容

54:29.030 --> 54:30.030
就到这里

