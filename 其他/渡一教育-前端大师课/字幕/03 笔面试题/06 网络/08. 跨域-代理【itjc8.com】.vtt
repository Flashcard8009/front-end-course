WEBVTT

00:00.500 --> 00:06.500
好 我们来看一下 解决跨域问题的其中一种方案 就是代理

00:06.500 --> 00:10.800
代理这种场景呢 它不适用于所有的场景

00:10.800 --> 00:16.800
它适用于什么呢 它适用于生产环境 不发生跨域

00:16.800 --> 00:19.800
就是你开发完了之后 你部署到服务器了

00:19.800 --> 00:23.300
那么 如果说部署到服务器 它没有任何的跨域问题

00:23.300 --> 00:26.600
但是在开发环境里边 会发生跨域问题

00:26.600 --> 00:29.600
这种场景可以使用代理

00:29.600 --> 00:35.600
而对于我们前端开发者而言 很多时候都是这种场景

00:35.600 --> 00:39.600
所以说我们使用代理 已经可以解决大部分的跨域问题了

00:39.600 --> 00:44.600
但是有个前条件 它的生产环境不发生跨域

00:44.600 --> 00:46.600
但是开发环境发生跨域

00:46.600 --> 00:50.600
那我们如何来判断 到底生产环境要不要发生跨域呢

00:50.600 --> 00:55.600
以后你们到了公司 上手工作之前

00:55.600 --> 00:58.600
你简单的培训一下 告诉这个公司

00:58.600 --> 01:00.600
它的服务器整个环境是什么样子

01:00.600 --> 01:06.600
那么你只需要关注 浏览器请求页面是什么地址

01:06.600 --> 01:10.600
然后请求数据 就是用阿迦克斯请求数据是什么地址

01:10.600 --> 01:12.600
看这两个地址是不是一样的

01:12.600 --> 01:16.600
如果说是一样的 那么OK就不发生跨域

01:16.600 --> 01:20.600
很多时候开发服 就是生产环境里边都不会发生跨域的

01:20.600 --> 01:23.600
你看第一张图 生产环境里边没有跨域

01:23.600 --> 01:27.600
什么情况呢 就是我们请求页面是这个地址 原来是淘宝

01:27.600 --> 01:30.600
首页是这个地址 我们其实不关心后边的路径

01:30.600 --> 01:33.600
路径随便 无所谓 反正我们就看前边

01:33.600 --> 01:38.600
请求淘宝的就是协议 域名和端口号是这么一个地址

01:38.600 --> 01:42.600
然后阿迦克斯请求的还是请求的是这种地址 开头的

01:42.600 --> 01:44.600
只不过后面路径是以API开头

01:44.600 --> 01:47.600
那么这两个路径是不是不发生跨域

01:47.600 --> 01:51.600
他们的协议一样 主机民也一样 端口号也一样

01:51.600 --> 01:55.600
生产环境里边 真实的服务器里边是不发生跨域的

01:55.600 --> 02:00.600
但是这会造成一个什么问题呢 就是在我们开发的时候

02:00.600 --> 02:03.600
开发的时候就肯定不能在生产环境里边玩

02:03.600 --> 02:06.600
你们肯定要一个本地的服务器来玩

02:06.600 --> 02:09.600
那么开发环境的时候就会发生跨域

02:09.600 --> 02:13.600
那什么情况呢 就是我们的页面是这样的一个页面

02:13.600 --> 02:16.600
这是我们的开发服务器 对吧 前端开发服务器

02:17.600 --> 02:22.600
是不是你npm start的时候 用这个命令去打开

02:22.600 --> 02:27.600
npm run set 对吧 用5u运行这个命令

02:27.600 --> 02:31.600
那么它这个时候会提示你 后面有启动完成之后

02:31.600 --> 02:34.600
会告诉你你的地址呢 拖管到这了

02:34.600 --> 02:39.600
8080 对吧 让你去访问这个地址来查看页面

02:39.600 --> 02:42.600
这个玩意就是开发服务器给你成什么地址

02:42.600 --> 02:45.600
你访问这个地址的时候 实际上访问的是

02:45.600 --> 02:48.600
你自己等级生成的开发服务器

02:48.600 --> 02:51.600
这是我们要访问页面的地址

02:51.600 --> 02:54.600
那我们的阿基克斯呢 但是阿基克斯

02:54.600 --> 02:57.600
这里边前端开发服务器 他不可能给你提供

02:57.600 --> 02:59.600
阿基克斯就是数据服务

02:59.600 --> 03:02.600
我们的数据服务是由后端开发出来的

03:02.600 --> 03:05.600
因此你们的后端会给你提供另一个地址

03:05.600 --> 03:09.600
来请求数据 比如请求新闻呀 请求商品

03:09.600 --> 03:13.600
那于是你的阿基克斯就会请求到另外一个地址

03:13.600 --> 03:16.600
比方说是这么个地址 后端它也会有开发服务器

03:16.600 --> 03:19.600
但是它地址跟我们前端的开发服务器不一样

03:19.600 --> 03:21.600
那么你要去请求这个地址

03:21.600 --> 03:24.600
那具体请求什么地址以后 你看你们公司的文档

03:24.600 --> 03:28.600
来请求 拿过去数据 这样子是不是发生跨域了

03:28.600 --> 03:31.600
主进民不一样 所以发生跨域了

03:31.600 --> 03:33.600
这是非常常见的常见

03:33.600 --> 03:35.600
那这个时候呢 就会导致你在开发的

03:35.600 --> 03:38.600
最后部署出来没问题 但是你开发的过程中

03:38.600 --> 03:40.600
你看不到效果 因为你拿不到这个数据

03:40.600 --> 03:43.600
它有跨域问题 那怎么办呢

03:43.600 --> 03:47.600
这个时候呢 你就可以使用代理来解决这个问题

03:47.600 --> 03:49.600
怎么来解决呢 非常简单

03:49.600 --> 03:51.600
你只需要做一个简单的配置

03:51.600 --> 03:55.600
让你的开发服务器啊 针对这种请求

03:55.600 --> 03:59.600
就是以协抗API开始的请求 做一个转发就可以了

03:59.600 --> 04:03.600
那么这样子一来的话 你的浏览器 请求页面这个地址

04:03.600 --> 04:06.600
那你请求数据呢 还是这个地址

04:06.600 --> 04:08.600
还是通过这个地址去请求数据

04:08.600 --> 04:12.600
只不过呢 请求数据的时候 你请求的是谁

04:12.600 --> 04:16.600
你自己的开发服务器 这样子是不是可以消除跨域

04:16.600 --> 04:18.600
那数据怎么来的呢

04:18.600 --> 04:21.600
当开发服务器发现你是以API开头的地址的时候

04:21.600 --> 04:23.600
它会帮你进行转发

04:23.600 --> 04:25.600
然后这个时候呢 它会给你改成这个地址

04:25.600 --> 04:28.600
请求到后端开发服务器 就请求它

04:28.600 --> 04:31.600
然后把这个数据拿到过后 再会发给浏览器

04:31.600 --> 04:33.600
是这么一个过程

04:33.600 --> 04:37.600
因为我们这个跨域问题是受同源策略的影响

04:37.600 --> 04:41.600
同源策略只是作用于浏览器

04:41.600 --> 04:43.600
它不会作用你的服务器

04:43.600 --> 04:46.600
其他程序是没有任何的同源策略的问题的

04:46.600 --> 04:49.600
所以这里边可以正常的转发 没有任何问题

04:49.600 --> 04:50.600
懂得意思吗

04:50.600 --> 04:52.600
所以就解决了这个跨域问题

04:52.600 --> 04:55.600
那我们实际开发的时候呢 其实大家都做过

04:55.600 --> 04:58.600
其实这个事儿呢 我之前也不止一次的讲过

04:58.600 --> 04:59.600
给大家复习一下

04:59.600 --> 05:03.600
在实际开发的时候 其实我们做一个简单的配置就行了

05:03.600 --> 05:07.600
那么这里就是一个典型的 比如用无誘做开发

05:07.600 --> 05:08.600
那么做一个简单的配置

05:08.600 --> 05:11.600
在无誘康费的解决式里边 你配置一下

05:11.600 --> 05:15.600
配置开发服务器 开发服务器里边有很多配置

05:15.600 --> 05:19.600
比方说配置的端口号 还有什么就是

05:19.600 --> 05:22.600
甚至启动的时候 做一些回调函数都可以做的

05:22.600 --> 05:25.600
只是我们平时做开发服务器配置 只配置代理就可以了

05:25.600 --> 05:27.600
那么配置开发服务器

05:27.600 --> 05:29.600
然后针对它的代理做一些配置

05:29.600 --> 05:31.600
怎么代理呢 给大家写个代理规则

05:31.600 --> 05:34.600
只要你的路径以协杠API开头

05:34.600 --> 05:37.600
等具体情况的话 看你们公司的稳当

05:37.600 --> 05:39.600
我们通常情况下的就是

05:39.600 --> 05:42.600
数据请求的一般都是以API开头

05:42.600 --> 05:45.600
以这个开头的话 那么我就会代理

05:45.600 --> 05:47.600
当你请求我这个开发服务器的时候

05:47.600 --> 05:49.600
比方说你这个东西请求过来了

05:49.600 --> 05:50.600
以协杠API开头

05:50.600 --> 05:52.600
那么这个时候 我给你进行一个转发

05:52.600 --> 05:55.600
转发到哪儿呢 给大家写个talkies

05:55.600 --> 05:57.600
转发到这儿

05:58.600 --> 06:01.600
于是呢 你这个东西呢 就会被改成

06:01.600 --> 06:04.600
这个东西 然后请求到后轮开发服务器

06:04.600 --> 06:07.600
拿到结果过后 它在 前端服务器再返回给你

06:07.600 --> 06:10.600
那么这个前端开发服务器呢 现在呢 就形成了一个代理

06:10.600 --> 06:12.600
针对这样的一个请求进行代理

06:12.600 --> 06:15.600
就完成了跨越问题的解决

06:15.600 --> 06:18.600
这种法案呢 是没有任何副作用的

06:18.600 --> 06:20.600
但是有个前提条件

06:20.600 --> 06:22.600
就是你生产环境是不跨越的

06:22.600 --> 06:25.600
如果说你生产环境 确实就是一个跨越场景

06:26.600 --> 06:28.600
这样子光这样做 肯定还不行

06:28.600 --> 06:31.600
因为你这个时候 你现在开发阶段没有跨越了

06:31.600 --> 06:34.600
但是你最后部署数学还是有问题

06:34.600 --> 06:36.600
因为生产环境里边跨越

06:36.600 --> 06:38.600
那如果说生产环境里边都产生了跨越

06:38.600 --> 06:41.600
该怎么解决的 那就是其他的解决办法了

06:41.600 --> 06:44.600
比如说接生P 比如说有RS 都是可以的

06:44.600 --> 06:46.600
后面我们详细讲解

