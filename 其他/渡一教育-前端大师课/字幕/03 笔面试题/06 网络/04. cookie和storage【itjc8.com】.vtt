WEBVTT

00:00.180 --> 00:03.180
好 咱们清楚了Cookie的原理之后呢

00:03.180 --> 00:08.180
我们来看一道面试题 这个面试题也是出现的几率还是比较大的

00:08.180 --> 00:14.180
他会问你Cookie Session Storage和Local Storage这几个的区别

00:14.180 --> 00:19.180
因为这几个他们有个共同点都是保存在浏览器

00:19.180 --> 00:21.180
也就是保存在刻骨端那一边的 是吧

00:21.180 --> 00:23.180
但他们之间肯定是有区别的

00:23.180 --> 00:26.180
首先是这个Session Storage和Local Storage呢

00:26.180 --> 00:31.180
这个两个区别其实就只有一点 就是保存的实效性

00:31.180 --> 00:35.180
Session Storage里面保存的数据是在绘画数据

00:35.180 --> 00:38.180
也就是浏览器一关闭 它就没了

00:38.180 --> 00:44.180
Local Storage是可以长久的保存的 就这两个他们之间只有这么个区别

00:44.180 --> 00:48.180
那么剩下的事情就是这两个Storage和Cookie之间的区别

00:48.180 --> 00:50.180
他们都可以在浏览器端保存数据

00:50.180 --> 00:52.180
那么他们之间有什么区别呢

00:52.180 --> 00:54.180
我们一个个来说 首先是兼容性

00:54.180 --> 00:56.180
Cookie的兼容性肯定是最好的

00:56.180 --> 00:59.180
它甚至可以兼容2000年以前的

00:59.180 --> 01:02.180
不是 是2000年以前的

01:02.180 --> 01:05.180
2000年以前的浏览器都可以兼容

01:05.180 --> 01:08.180
因为他们都是能够使用Cookie的

01:08.180 --> 01:11.180
所以浏览器都支持兼容性最好

01:11.180 --> 01:13.180
而Local Storage和Session Storage呢

01:13.180 --> 01:15.180
因为它是H5的

01:15.180 --> 01:20.180
所以如果说是2014年

01:20.180 --> 01:22.180
13年14年

01:22.180 --> 01:24.180
这个时间点出之前的浏览器来就不支持了

01:24.180 --> 01:26.180
不过现在的浏览器都是支持的

01:26.180 --> 01:29.180
Local Storage和Session Storage看来都支持

01:29.180 --> 01:32.180
但是早一期的浏览器都不支持了

01:32.180 --> 01:35.180
所以说兼容性方面Cookie最好

01:35.180 --> 01:38.180
另外就是浏览器的默认行为方面

01:38.180 --> 01:42.180
针对Cookie浏览器是有很多的默认行为的

01:42.180 --> 01:45.180
比方说 像如果说想用头里边

01:45.180 --> 01:47.180
包含了Cookie之段

01:47.180 --> 01:49.180
就表示告诉浏览器

01:49.180 --> 01:51.180
你给我添加一个Cookie

01:51.180 --> 01:54.180
那浏览器它就会自动的保存Cookie的质

01:54.180 --> 01:57.180
你不用去手动操作 自动完成

01:57.180 --> 02:00.180
而再比如 浏览器在发送济球的时候

02:00.180 --> 02:01.180
它会去匹配

02:01.180 --> 02:03.180
哪些Cookie要它带过去

02:03.180 --> 02:04.180
它会把匹配到了Cookie

02:04.180 --> 02:06.180
都附带到济球的头里边

02:06.180 --> 02:08.180
带到浮览器

02:08.180 --> 02:10.180
我们上一课 就是Cookie的那一课

02:10.180 --> 02:12.180
是讲得很清楚的

02:12.180 --> 02:14.180
那么这些默认行为

02:14.180 --> 02:16.180
使得Cookie就长久以来

02:16.180 --> 02:19.180
就担任着维持登陆状态的责任

02:19.180 --> 02:21.180
这些事Local Storage

02:21.180 --> 02:23.180
Cookie Storage能不能做

02:23.180 --> 02:26.180
但是浏览器不会针对它们有默认行为

02:26.180 --> 02:28.180
你们要保存到Cookie Storage

02:28.180 --> 02:30.180
Local Storage是不是要自己手动的去写代码

02:30.180 --> 02:31.180
对吧

02:31.180 --> 02:34.180
而我问要自己手动写代码的话

02:34.180 --> 02:35.180
那肯定是

02:35.180 --> 02:37.180
比如说服务器响应一个东西过来

02:37.180 --> 02:38.180
在响应头里边

02:39.180 --> 02:40.180
相当于是证件

02:40.180 --> 02:42.180
那么我们要手动的去在

02:42.180 --> 02:43.180
浏览器的响应头里边

02:43.180 --> 02:45.180
把那个证件信息读出来

02:45.180 --> 02:47.180
然后自己手动的保存到Local Storage里边

02:48.180 --> 02:49.180
这往往发生在什么时候呢

02:49.180 --> 02:51.180
往往发生在阿迦克斯请求的时候

02:52.180 --> 02:54.180
当我们使用阿迦克斯请求的时候

02:54.180 --> 02:56.180
是不是我们可以有个毁掉函数

02:56.180 --> 02:57.180
对吧

02:57.180 --> 02:58.180
当它请求响应完成的时候

02:58.180 --> 02:59.180
我们可以做一些处理

02:59.180 --> 03:01.180
我们可以把响应头拿出来

03:01.180 --> 03:03.180
然后保存到Local Storage里边

03:03.180 --> 03:05.180
这是我们可以写代码的地方

03:06.180 --> 03:08.180
但是如果说一些

03:08.180 --> 03:09.180
不是阿迦克斯的场景

03:09.180 --> 03:11.180
比方说我们直接去请求一个

03:11.180 --> 03:13.180
直接去请求一个首页

03:13.180 --> 03:14.180
这个时候有阿迦克斯吗

03:14.180 --> 03:15.180
没有

03:15.180 --> 03:16.180
你这个时候怎么去写代码呢

03:16.180 --> 03:19.180
怎么去获取这个地址的响应头呢

03:19.180 --> 03:21.180
你获取不到对不对

03:21.180 --> 03:23.180
所以呢这个时候呢就

03:23.180 --> 03:24.180
如果说访问这个地址

03:24.180 --> 03:26.180
访问一些页面地址

03:27.180 --> 03:29.180
像服务器直接访问页面地址

03:29.180 --> 03:30.180
那么这个页面

03:30.180 --> 03:31.180
访问页面地址的时候

03:31.180 --> 03:33.180
需要写一些东西到浏览器

03:33.180 --> 03:34.180
这个时候Local Storage

03:34.180 --> 03:36.180
就不是那么好用了

03:36.180 --> 03:38.180
因为浏览器

03:38.180 --> 03:40.180
它对于Local Storage和Cc Storage

03:40.180 --> 03:42.180
它都没有默认行为

03:42.180 --> 03:43.180
没有自动的完成

03:43.180 --> 03:45.180
这个时候你写代码也没发现

03:45.180 --> 03:47.180
因为你写代码的时候

03:47.180 --> 03:48.180
既然是执行的时候

03:48.180 --> 03:50.180
这个页面早就请求结束了

03:50.180 --> 03:52.180
你拿不到之前那个请求的头

03:52.180 --> 03:53.180
所以你也不好写

03:53.180 --> 03:55.180
这个时候呢哭泣就比较好用了

03:58.180 --> 04:01.490
但是呢也有坏处

04:01.490 --> 04:02.490
坏处是什么呢

04:02.490 --> 04:03.490
正是因为浏览器

04:03.490 --> 04:05.490
就是如果它只有好处的话

04:05.490 --> 04:06.490
这两个东西就没有必要出来了

04:06.490 --> 04:07.490
对吧

04:07.490 --> 04:08.490
它也有一些不好的地方

04:08.490 --> 04:09.490
不好的地方在有什么

04:09.490 --> 04:10.490
就是安全性问题

04:10.490 --> 04:13.490
Cookie有比较严重的安全性问题

04:13.490 --> 04:15.490
它漏洞的补来补去

04:15.490 --> 04:17.490
修补了好多年了

04:17.490 --> 04:20.490
但是呢还是有漏洞

04:20.490 --> 04:21.490
还是容易造成攻击

04:21.490 --> 04:23.490
那么其中一种非常典型的攻击方式

04:23.490 --> 04:25.490
就是CSRF攻击

04:25.490 --> 04:26.490
这个攻击方式

04:26.490 --> 04:28.490
我们会单独的去看一些课来讲

04:28.490 --> 04:29.490
现在只需要知道就行了

04:29.490 --> 04:31.490
那么它会利用Cookie的浏览器

04:31.490 --> 04:33.490
针对Cookie的默认行为

04:33.490 --> 04:36.490
来产对我们的网站产生攻击

04:36.490 --> 04:39.490
虽然说后来Cookie增加了很多制断

04:39.490 --> 04:40.490
比方说Secure

04:40.490 --> 04:41.490
像ATTP only

04:41.490 --> 04:42.490
对吧

04:42.490 --> 04:43.490
这是后来增加的

04:43.490 --> 04:44.490
像最近这两年

04:44.490 --> 04:46.490
又增加了一个SameSite

04:46.490 --> 04:47.490
等等方式吧

04:47.490 --> 04:49.490
都是为了去防御这些攻击

04:49.490 --> 04:51.490
正是因为它有这些安全漏洞

04:51.490 --> 04:53.490
所以说H5新增了两种

04:53.490 --> 04:54.490
本地保存

04:54.490 --> 04:56.490
特别是针对阿迦克斯

04:56.490 --> 04:58.490
希望阿迦克斯的一些

04:58.490 --> 04:59.490
证件数据呢

04:59.490 --> 05:01.490
你就可以保存到Storage

05:01.490 --> 05:03.490
那么钱这用于保存汇化级别的

05:03.490 --> 05:06.490
后者用于保存更持久的

05:06.490 --> 05:07.490
流量器针对这两个

05:07.490 --> 05:09.490
没有任何的默认行为

05:09.490 --> 05:10.490
它不会自动给你保存的

05:10.490 --> 05:12.490
要权要手动携带

05:12.490 --> 05:13.490
这样一来

05:13.490 --> 05:15.490
把保存数据和独具数据的工作

05:15.490 --> 05:17.490
交给了前端开发者

05:17.490 --> 05:21.490
可以很大程度上避免这种攻击

05:22.490 --> 05:24.490
然后其他的就是一些细致过节的

05:24.490 --> 05:25.490
比方说Cookie的大小

05:25.490 --> 05:26.490
是有限制的

05:26.490 --> 05:28.490
流量器限制Cookie大小的

05:28.490 --> 05:29.490
一般来说

05:29.490 --> 05:31.490
这个每个流量器不一定的

05:31.490 --> 05:32.490
一般来说

05:32.490 --> 05:33.490
同一个预下的Cookie

05:33.490 --> 05:35.490
总量会限制到4兆

05:35.490 --> 05:36.490
超过这个值

05:36.490 --> 05:38.490
流量器它就不认了

05:38.490 --> 05:40.490
而Storage的事情

05:40.490 --> 05:42.490
理论上是没有限制的

05:42.490 --> 05:44.490
理论上是没有限制的

05:44.490 --> 05:45.490
另外Cookie

05:45.490 --> 05:47.490
它会与两者关联

05:47.490 --> 05:48.490
一个是域

05:48.490 --> 05:49.490
一个是路径

05:49.490 --> 05:50.490
所谓讲过的

05:50.490 --> 05:52.490
会与这两者关联

05:52.490 --> 05:54.490
这两者有任何一个不一样

05:54.490 --> 05:55.490
那么Cookie都不一样

05:55.490 --> 05:57.490
哪怕他兼职队是完全一样的

05:57.490 --> 05:59.490
他们都是不一样的Cookie

05:59.490 --> 06:00.490
而这些Storage

06:00.490 --> 06:01.490
很多个Storage

06:01.490 --> 06:04.490
只有与域相关联

06:04.490 --> 06:06.490
它没有跟路径关联

06:06.490 --> 06:07.490
所以说

06:07.490 --> 06:08.490
这些Storage

06:08.490 --> 06:09.490
很多个Storage

06:09.490 --> 06:11.490
我们指它的最小化分单位

06:11.490 --> 06:12.490
就是一个占点

06:12.490 --> 06:13.490
这个占点下面

06:13.490 --> 06:14.490
所有的页面

06:14.490 --> 06:15.490
都是使用了

06:15.490 --> 06:16.490
是同一个

06:16.490 --> 06:17.490
这些Storage

06:17.490 --> 06:18.490
很多个Storage

06:18.490 --> 06:19.490
这是关于他们的区别

06:19.490 --> 06:21.490
其实对我们平时开发来说

06:21.490 --> 06:23.490
这个Cookie

06:24.490 --> 06:25.490
什么时候用Cookie

06:25.490 --> 06:26.490
什么时候用City Storage

06:26.490 --> 06:28.490
什么时候用No Storage

06:28.490 --> 06:29.490
这个玩意

06:29.490 --> 06:30.490
你就看那个

06:30.490 --> 06:32.490
看那个什么接口文档

06:32.490 --> 06:34.490
你看我们之前

06:35.490 --> 06:37.490
我们以后到公司也是这样子

06:37.490 --> 06:38.490
它有个接口文档

06:38.490 --> 06:39.490
接口文档里边

06:39.490 --> 06:41.490
特别是登录了一块

06:41.490 --> 06:43.490
比方说我们这里的

06:43.490 --> 06:44.490
相不

06:44.490 --> 06:45.490
登录这一块

06:45.490 --> 06:47.490
它会告诉你

06:47.490 --> 06:49.490
就是它给你发那个证件

06:49.490 --> 06:50.490
表扣

06:51.490 --> 06:53.490
那么它会以什么方式给力

06:53.490 --> 06:54.490
它如果说

06:54.490 --> 06:56.490
它是以Cookie的方式给力

06:56.490 --> 06:57.490
那么它就不会这样

06:57.490 --> 06:58.490
它就不会这样子写来

06:58.490 --> 06:59.490
还会给你写成

06:59.490 --> 07:01.490
使用Cookie的方式给你响应

07:01.490 --> 07:02.490
总之它会告诉你

07:02.490 --> 07:03.490
或者在响应头里边

07:03.490 --> 07:04.490
给你写成这种格式

07:04.490 --> 07:05.490
就是

07:05.490 --> 07:06.490
setCookie

07:06.490 --> 07:08.490
然后就是

07:08.490 --> 07:10.490
token等于

07:10.490 --> 07:12.490
它会用这种格式告诉你

07:12.490 --> 07:13.490
它到底是用什么方式

07:13.490 --> 07:14.490
给你响应

07:14.490 --> 07:15.490
如果说它有一个

07:15.490 --> 07:16.490
普通的响应头

07:16.490 --> 07:17.490
比方说像Oscarization

07:17.490 --> 07:18.490
用这种响应头

07:18.490 --> 07:19.490
给你响应的话

07:19.490 --> 07:20.490
那么

07:20.490 --> 07:21.490
你可以在客户端

07:21.490 --> 07:22.490
用GS

07:22.490 --> 07:23.490
把这个东西读出来

07:23.490 --> 07:24.490
对吧

07:24.490 --> 07:26.490
添加到Cookie里边

07:26.490 --> 07:27.490
更常见的做法

07:27.490 --> 07:28.490
是把这个读出来

07:28.490 --> 07:30.490
添加到local storage

07:30.490 --> 07:31.490
如果说

07:31.490 --> 07:32.490
它告诉你

07:32.490 --> 07:33.490
它直接是用Cookie

07:33.490 --> 07:34.490
给你想应的

07:34.490 --> 07:35.490
那里啥都不用做

07:35.490 --> 07:36.490
因为Cookie的浏览器

07:36.490 --> 07:37.490
有默认行为

07:37.490 --> 07:38.490
它自动帮你添加

07:38.490 --> 07:39.490
但是

07:39.490 --> 07:40.490
它通常会带来

07:40.490 --> 07:41.490
一些安全性的问题

07:42.490 --> 07:44.490
这就是关于

07:44.490 --> 07:45.490
Cookie和

07:45.490 --> 07:47.490
这几个storage的一些区别

