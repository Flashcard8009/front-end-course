WEBVTT

00:00.300 --> 00:04.300
来吧 我们这节课来实现一个

00:04.300 --> 00:08.300
用WebSocket这种技术来实现一个聊天室

00:08.300 --> 00:11.300
我们首先了解一下WebSocket

00:11.300 --> 00:14.300
我们上节课 可能我这里是上节课

00:14.300 --> 00:17.300
你们那边不知道是不是按照顺序来看的

00:17.300 --> 00:19.300
我们在之前的课程里边

00:19.300 --> 00:21.300
我们讲到了WebSocket的原理

00:21.300 --> 00:25.300
直到原理之后 我们开发了就得信任手了

00:25.300 --> 00:28.300
因为它的概念我们全部搞清楚了

00:28.300 --> 00:32.300
WebSocket在H5里面给我们提供了一个API

00:32.300 --> 00:35.300
就是一个构造函数 叫做WebSocket对象

00:35.300 --> 00:36.300
就构造函数

00:36.300 --> 00:40.300
我们通过构造函数就可以创建一个WebSocket对象

00:40.300 --> 00:45.300
那么这一步其实就是在完成WebSocket的握手

00:45.300 --> 00:46.300
我们来试一下

00:46.300 --> 00:52.060
现在我们打开找到随便找一个网页吧

00:52.060 --> 00:54.060
一点AT面

00:54.060 --> 00:59.500
比方说我们在这里写一段介绍

01:00.500 --> 01:01.500
WebSocket

01:01.500 --> 01:03.500
那么这里边传什么呢

01:03.500 --> 01:05.500
传的就是你的连接地址

01:05.500 --> 01:08.500
WebSocket的服务器还会给你提供一个地址

01:08.500 --> 01:10.500
那么这个地址是什么呢

01:10.500 --> 01:13.500
一般来说 接口稳当里边会给你说明

01:13.500 --> 01:15.500
那么我们这里有个接口稳当 对吧

01:15.500 --> 01:17.500
你看这里有一个测试接口

01:17.500 --> 01:19.500
接口稳当里面你会说

01:19.500 --> 01:22.500
你连接WebSocket才能连接这个地址

01:22.500 --> 01:24.500
我们就复制一下连接这个地址

01:24.500 --> 01:26.500
当然潜力条线得有这个服务器

01:26.500 --> 01:28.500
我的服务器在这

01:28.500 --> 01:29.500
同学们看一下

01:29.500 --> 01:33.500
我的服务器在这 我把这里全部删除了

01:33.500 --> 01:35.500
假设我把这里也删了

01:35.500 --> 01:38.500
那么同学们拿到我这个代码之后

01:38.500 --> 01:40.500
从这个服务器点击右键

01:40.500 --> 01:42.500
再集成中端中打开

01:42.500 --> 01:46.500
然后在这里输入一个NPMI安装依赖

01:46.500 --> 01:48.500
安装好依赖之后

01:48.500 --> 01:49.500
我们使用NPMI Start

01:49.500 --> 01:51.500
把这个服务器启动起来

01:51.500 --> 01:53.500
我们这里启动了两个服务

01:53.500 --> 01:54.500
一个是WebSocket的服务

01:54.500 --> 01:55.500
一个另外一个服务

01:55.500 --> 01:56.500
我们一会再说

01:56.500 --> 01:58.500
WebSocket的服务他告诉你

01:58.500 --> 01:59.500
端克好使9527

01:59.500 --> 02:00.500
我们这里不要关

02:00.500 --> 02:02.500
把这个隐藏就行了

02:02.500 --> 02:05.500
好 然后我们这里就连接9527

02:05.500 --> 02:06.500
其实就连上了

02:06.500 --> 02:07.500
咱们来试一下

02:07.500 --> 02:09.500
左边位是New Sour

02:09.500 --> 02:10.500
把它控制台

02:10.500 --> 02:12.500
咱们怎么来看

02:12.500 --> 02:13.500
有没有连上呢

02:13.500 --> 02:15.500
其实我们可以监控这个网络

02:15.500 --> 02:17.500
这里边有很多的切换

02:17.500 --> 02:19.500
这里是显示所有的网络通信

02:19.500 --> 02:21.500
然后这边就显示WebSocket

02:21.500 --> 02:22.500
我们这里刷新一下

02:22.500 --> 02:24.500
因为发现我们这个页面

02:24.500 --> 02:26.500
连接到两个WebSocket

02:26.500 --> 02:27.500
一个是Nokohost

02:27.500 --> 02:29.500
我们来看一下

02:29.500 --> 02:31.500
Nokohost这里你看

02:31.500 --> 02:32.500
我们请求的时候

02:32.500 --> 02:33.500
是我们上节课说的

02:33.500 --> 02:34.500
握手阶段

02:34.500 --> 02:36.500
这个时候就完成了握手了

02:36.500 --> 02:38.500
那么握手阶段或做什么事呢

02:38.500 --> 02:39.500
他会发出一个请求

02:39.500 --> 02:41.500
给这请求 请求这个地址

02:41.500 --> 02:45.500
然后他会带一些请求头

02:45.500 --> 02:47.500
包括这个

02:47.500 --> 02:49.500
这个Extension不看

02:49.500 --> 02:50.500
这是WebSocket

02:50.500 --> 02:52.500
他会自定义的一些扩展协议

02:52.500 --> 02:53.500
我们不用管他

02:53.500 --> 02:55.500
然后这边是不是个Key

02:55.500 --> 02:56.500
按号 这是版本

02:56.500 --> 02:57.500
对不对

02:57.500 --> 02:59.500
我希望服务器对东西进行升级

02:59.500 --> 03:01.500
升级成WebSocket

03:01.500 --> 03:02.500
你看

03:02.500 --> 03:03.500
Connected Upgrade

03:03.500 --> 03:04.500
这是握手

03:04.500 --> 03:06.500
那么服务器想用的时候

03:06.500 --> 03:07.500
你看 服务器的想用

03:07.500 --> 03:08.500
想用的是101

03:08.500 --> 03:10.500
Switching Protocols

03:10.500 --> 03:11.500
切换协议

03:11.500 --> 03:12.500
切换到WebSocket

03:12.500 --> 03:13.500
然后这是升级

03:13.500 --> 03:15.500
然后这里是一个按号的回应

03:15.500 --> 03:17.500
那么这样子握手就完成了

03:17.500 --> 03:19.500
我们有了这个API之后

03:19.500 --> 03:21.500
我们一步就可以完成握手

03:21.500 --> 03:22.500
握手完成之后

03:23.500 --> 03:25.500
但握手需要听过一段时间

03:25.500 --> 03:26.500
单码到了这里

03:26.500 --> 03:28.500
握手还是没有完成的

03:28.500 --> 03:29.500
它会经过一段时间

03:29.500 --> 03:30.500
它总归归拔完成

03:30.500 --> 03:32.500
完成握手之后

03:32.500 --> 03:33.500
我们就可以通信了

03:33.500 --> 03:35.500
那如何来进行通信呢

03:35.500 --> 03:36.500
我们来看一下

03:36.500 --> 03:38.500
通信的时候

03:38.500 --> 03:41.500
它其实是靠一些事件和方法来完成的

03:41.500 --> 03:43.500
比方说这里提供了三个事件

03:43.500 --> 03:44.500
一个是Unopened

03:44.500 --> 03:45.500
一个是Unmessage

03:45.500 --> 03:46.500
一个是Unclose

03:46.500 --> 03:47.500
我们把它复制一下

03:47.500 --> 03:49.500
暂停到这边

03:49.500 --> 03:51.500
非常简单

03:51.500 --> 03:52.500
Unopened是这个事件

03:52.500 --> 03:53.500
什么时候触发呢

03:53.500 --> 03:55.500
是当我们连接成功之后

03:55.500 --> 03:56.500
触发

03:56.500 --> 03:58.500
所以单码到了第12行的时候

03:58.500 --> 04:00.500
其实还没有连接成功

04:00.500 --> 04:01.500
连接需要一个请求

04:01.500 --> 04:02.500
一个想一码

04:02.500 --> 04:03.500
那肯定是一步的

04:03.500 --> 04:04.500
什么时候连接成功

04:04.500 --> 04:06.500
通过这个事件来去观察

04:06.500 --> 04:08.500
这个事件触发的时候

04:08.500 --> 04:09.500
只触发一次

04:09.500 --> 04:10.500
触发这个事件的时候

04:10.500 --> 04:11.500
就连接成功

04:11.500 --> 04:12.500
到了服务器

04:12.500 --> 04:13.500
我们先把下面两行注释掉

04:13.500 --> 04:15.500
我们来看一下这一块

04:15.500 --> 04:17.500
看控制台

04:17.500 --> 04:18.500
刷新

04:18.500 --> 04:19.500
连接到了服务器

04:19.500 --> 04:20.500
对不对

04:20.500 --> 04:22.500
那如果说我们在第12行

04:22.500 --> 04:23.500
输出一个123

04:23.500 --> 04:24.500
那么谁先输出呢

04:24.500 --> 04:25.500
123先输出

04:25.500 --> 04:26.500
还是他先输出

04:26.500 --> 04:27.500
一定是

04:27.500 --> 04:29.500
我们在这

04:29.500 --> 04:30.500
输出123

04:30.500 --> 04:31.500
那肯定是123先输出

04:31.500 --> 04:32.500
对吧

04:32.500 --> 04:33.500
这里是一步的

04:33.500 --> 04:34.500
你看

04:34.500 --> 04:35.500
没问题吧

04:35.500 --> 04:36.500
好 OK

04:36.500 --> 04:37.500
都是连接到服务器

04:37.500 --> 04:38.500
他会触发这个事件

04:38.500 --> 04:40.500
那么服务器给我们发消息

04:40.500 --> 04:41.500
我们说过

04:41.500 --> 04:42.500
我也把刷新成功之后

04:42.500 --> 04:43.500
任何一端

04:43.500 --> 04:44.500
可以在任何时候

04:44.500 --> 04:46.500
毫无理由的给你推动消息

04:46.500 --> 04:48.500
那么客户端也是这样子

04:48.500 --> 04:49.500
可以往服务器发

04:49.500 --> 04:51.500
所以他就不叫做请求响应了

04:51.500 --> 04:52.500
跟请求响应

04:52.500 --> 04:53.500
一毛钱关系都没有

04:53.500 --> 04:55.500
也没有什么请求投

04:55.500 --> 04:56.500
响应投

04:56.500 --> 04:57.500
他已经不是ADDP了

04:57.500 --> 04:59.500
他已经变成了一个

04:59.500 --> 05:01.500
我也把刷新成功之后

05:01.500 --> 05:02.500
随便发消息

05:02.500 --> 05:03.500
因此服务器

05:03.500 --> 05:04.500
任何时候

05:04.500 --> 05:05.500
可以给我们发消息

05:05.500 --> 05:07.500
当我们注释这个事件

05:07.500 --> 05:08.500
这个事件什么意思呢

05:08.500 --> 05:09.500
就是服务器

05:09.500 --> 05:10.500
什么时候

05:10.500 --> 05:11.500
就是当服务器

05:11.500 --> 05:12.500
给我们发消息的时候

05:12.500 --> 05:13.500
我们这边收到了消息

05:13.500 --> 05:15.500
他就会触发这个事件

05:15.500 --> 05:16.500
那么这个事件可以想象

05:16.500 --> 05:17.500
是不是可以触发多次

05:17.500 --> 05:18.500
对不对

05:18.500 --> 05:19.500
那么这个事件里边

05:19.500 --> 05:20.500
有个事件参数亿

05:20.500 --> 05:21.500
我们通过这个事件参数亿

05:21.500 --> 05:22.500
里边的data

05:22.500 --> 05:23.500
就可以拿到服务器

05:23.500 --> 05:25.500
给我们发送的消息

05:25.500 --> 05:27.500
当然服务器给我们发送的消息

05:27.500 --> 05:28.500
可以是文本

05:28.500 --> 05:31.500
也可以是一个二净字

05:31.500 --> 05:32.500
二净字数据

05:32.500 --> 05:33.500
比方说

05:33.500 --> 05:34.500
给我们发一些文件的时候

05:34.500 --> 05:35.500
就是二净字

05:35.500 --> 05:36.500
那么二净字到这边

05:36.500 --> 05:39.500
是一个

05:39.500 --> 05:40.500
这么一个对象

05:40.500 --> 05:41.500
我们这里

05:41.500 --> 05:42.500
就考虑文本就行了

05:42.500 --> 05:44.500
那我这边的测试服务器

05:44.500 --> 05:45.500
是做了这么一个处理

05:45.500 --> 05:46.500
每隔三秒

05:46.500 --> 05:48.500
它就会主动的发一个消息

05:48.500 --> 05:49.500
可可断

05:49.500 --> 05:51.500
我这里只是做这么一个处理

05:51.500 --> 05:52.500
来测试一下

05:52.500 --> 05:54.500
其实它怎么给你发

05:54.500 --> 05:55.500
完全靠业务

05:55.500 --> 05:57.500
比方说K线

05:57.500 --> 05:59.500
它有了最新价格

05:59.500 --> 06:00.500
它把它给你发一个

06:00.500 --> 06:02.500
它不一定是间隔多少时间

06:02.500 --> 06:03.500
我们来看一下

06:03.500 --> 06:04.500
这边

06:04.500 --> 06:05.500
我们把这个代码

06:05.500 --> 06:06.500
加上来输出服务器

06:06.500 --> 06:07.500
给我们发的消息

06:07.500 --> 06:08.500
保存

06:08.500 --> 06:09.500
你会发现

06:09.500 --> 06:10.500
服务器是不是

06:10.500 --> 06:11.500
不办得给我们发消息

06:11.500 --> 06:12.500
每隔三秒钟

06:12.500 --> 06:13.500
就给我们发了一次

06:13.500 --> 06:14.500
其实我们这里

06:14.500 --> 06:15.500
通过网络通信

06:15.500 --> 06:16.500
也可以看得到

06:16.500 --> 06:17.500
这里Northouse

06:17.500 --> 06:18.500
是我们的微博烧提示

06:18.500 --> 06:19.500
对吧

06:19.500 --> 06:20.500
那么我们这里可以看到

06:20.500 --> 06:21.500
这里就不是response了

06:21.500 --> 06:23.500
是什么message

06:23.500 --> 06:25.500
表示服务器给我们发的消息

06:25.500 --> 06:28.500
服务器不停地给我们发

06:28.500 --> 06:29.500
来自服务器的消息

06:29.500 --> 06:31.500
就这么一句话

06:31.500 --> 06:32.500
就这么个意思

06:32.500 --> 06:33.500
那同学说

06:33.500 --> 06:34.500
那这里

06:34.500 --> 06:36.500
为什么还有一个微博烧提示

06:36.500 --> 06:38.500
这里为什么还有一个呢

06:38.500 --> 06:40.500
我们使用的是NavServer

06:40.500 --> 06:41.500
打开了这个

06:41.500 --> 06:43.500
打开了这个网页

06:43.500 --> 06:44.500
NavServer有个特点

06:44.500 --> 06:45.500
什么特点呢

06:45.500 --> 06:46.500
就是当我们代码一遍

06:46.500 --> 06:49.500
它会自动的刷新浏览器

06:49.500 --> 06:50.500
那它是怎么做到的呢

06:50.500 --> 06:52.500
它就是通过微博烧提示做到的

06:52.500 --> 06:53.500
你会发现

06:53.500 --> 06:54.500
可能有同学以前

06:54.500 --> 06:55.500
已经关注过这个问题了

06:55.500 --> 06:56.500
就说

06:56.500 --> 06:58.500
我们用NavServer打开网页之后

06:58.500 --> 06:59.500
你会发现网页里面

06:59.500 --> 07:01.500
会给你加一段GS代码

07:01.500 --> 07:03.500
你看这叫GS

07:03.500 --> 07:04.500
是不是就在用微博烧提示

07:04.500 --> 07:05.500
因为NavServer

07:05.500 --> 07:06.500
是在本地

07:06.500 --> 07:07.500
打了一个服务器

07:07.500 --> 07:08.500
对吧

07:08.500 --> 07:09.500
那个服务器里面

07:09.500 --> 07:10.500
就一个微博烧提示服务

07:10.500 --> 07:11.500
那么它就去连

07:11.500 --> 07:13.500
这个微博烧提示服务

07:13.500 --> 07:15.500
连上了之后呢

07:15.500 --> 07:17.500
只要NavServer

07:17.500 --> 07:18.500
它发现我的代码改动了

07:18.500 --> 07:20.500
它马上就推送一个消息

07:20.500 --> 07:21.500
给客户端

07:21.500 --> 07:22.500
客户端一收到这个消息

07:22.500 --> 07:23.500
马上刷新浏览器

07:23.500 --> 07:24.500
它就是这么做的

07:24.500 --> 07:25.500
现在明白了吧

07:25.500 --> 07:26.500
所以说这里

07:26.500 --> 07:27.500
它有多了一个

07:27.500 --> 07:28.500
所以说我以前跟你们说

07:28.500 --> 07:29.500
这个地方不用管

07:29.500 --> 07:31.500
现在就知道为什么了

07:31.500 --> 07:32.500
那么这里就是服务器

07:32.500 --> 07:33.500
不断地给我们推送了

07:33.500 --> 07:34.500
一些消息

07:34.500 --> 07:36.500
我没有主动请求

07:36.500 --> 07:37.500
好 我们看下一个事件

07:37.500 --> 07:38.500
下一个事件

07:38.500 --> 07:40.500
是连接关闭之后出发

07:40.500 --> 07:41.500
那么关闭连接

07:41.500 --> 07:43.500
是可以是服务器主动关闭

07:43.500 --> 07:45.500
也可以是客户端主动关闭

07:45.500 --> 07:47.500
也可能是浏览器被关掉了

07:47.500 --> 07:48.500
那么这个事件

07:48.500 --> 07:49.500
关闭的时候

07:49.500 --> 07:50.500
它就会出发

07:50.500 --> 07:51.500
那我这里由于

07:51.500 --> 07:52.500
没有关闭

07:52.500 --> 07:53.500
所以没有出发

07:53.500 --> 07:55.500
好 其实要关闭的话

07:55.500 --> 07:56.500
还是很容易的

07:56.500 --> 07:57.500
怎么关闭呢

07:57.500 --> 07:59.500
我们这里不是有一个变量吗

07:59.500 --> 08:01.500
就是有这个烧汽车

08:01.500 --> 08:02.500
微博烧汽车

08:02.500 --> 08:03.500
那么我们这里只需要

08:03.500 --> 08:05.500
调有它的Close方法

08:05.500 --> 08:06.500
一调

08:06.500 --> 08:07.500
所以连接关闭了

08:07.500 --> 08:08.500
它就会出发这个事件

08:08.500 --> 08:09.500
连接关闭了

08:09.500 --> 08:10.500
那么服务器那边

08:10.500 --> 08:12.500
它会收到关闭连接的消息

08:12.500 --> 08:14.500
它那边也同时会把

08:14.500 --> 08:16.500
TCP连接关闭掉

08:16.500 --> 08:18.500
非常简单

08:18.500 --> 08:19.500
然后呢

08:19.500 --> 08:20.500
我们这里是三个事件

08:20.500 --> 08:21.500
除了三个事件

08:21.500 --> 08:22.500
它还有一些方法

08:22.500 --> 08:23.500
一个方法

08:23.500 --> 08:25.500
那就是刚才看到了关闭

08:25.500 --> 08:26.500
还有一个就是send

08:26.500 --> 08:28.500
发送消息的给服务器

08:28.500 --> 08:29.500
咱们来试一下

08:29.500 --> 08:31.500
我们就在领导器里面吧

08:31.500 --> 08:32.500
WSsend

08:32.500 --> 08:33.500
当然这里

08:33.500 --> 08:35.500
你可以做各种各样的效果

08:35.500 --> 08:36.500
不要说一个按钮

08:36.500 --> 08:37.500
你点了一下

08:37.500 --> 08:38.500
调用这个方法

08:38.500 --> 08:39.500
你们自己去处理

08:39.500 --> 08:41.500
比方说我给他发一个你好

08:41.500 --> 08:43.500
那我这个测试服务器呢

08:43.500 --> 08:44.500
是这样

08:44.500 --> 08:46.500
你只要给服务器发了一个消息

08:46.500 --> 08:47.500
每次知道客户的消息后

08:47.500 --> 08:49.500
服务器会回应一个消息

08:49.500 --> 08:50.500
好

08:50.500 --> 08:51.500
咱们来看一下

08:52.500 --> 08:53.500
发了一个消息

08:53.500 --> 08:54.500
回车

08:54.500 --> 08:56.500
这里已经关闭了连接

08:56.500 --> 08:57.500
重新刷新

08:57.500 --> 08:59.500
然后发出一个消息

08:59.500 --> 09:01.500
你看服务器就会回应的一个消息

09:01.500 --> 09:02.500
那么这个回应消息

09:02.500 --> 09:03.500
是怎么打印出来的呢

09:03.500 --> 09:04.500
同学们想一想

09:04.500 --> 09:06.500
好好想一想

09:06.500 --> 09:08.500
是不是这个函数的返回结果

09:08.500 --> 09:10.500
是不是函数的返回

09:10.500 --> 09:11.500
那肯定不是

09:11.500 --> 09:12.500
因为这是网络消息

09:12.500 --> 09:13.500
网络消息它是一一步的

09:13.500 --> 09:14.500
对吧

09:14.500 --> 09:15.500
它不能返回

09:15.500 --> 09:16.500
它要返回的话

09:16.500 --> 09:17.500
也只能返回Promise

09:17.500 --> 09:18.500
它不是它的消息返回

09:18.500 --> 09:20.500
它是怎么打印出来的呢

09:20.500 --> 09:22.500
其实你点击浏览器

09:22.500 --> 09:23.500
看这一行

09:23.500 --> 09:25.500
是哪一行在打印这个文字

09:25.500 --> 09:26.500
看到没

09:26.500 --> 09:28.500
是不是收到服务器消息了

09:28.500 --> 09:30.500
所以说服务器的返回消息

09:30.500 --> 09:32.500
它也是在这个世界里面接收的

09:32.500 --> 09:33.500
对吧

09:33.500 --> 09:34.500
这里不存在想一行

09:34.500 --> 09:35.500
我再说一次

09:35.500 --> 09:36.500
它不存在想一行

09:36.500 --> 09:37.500
我只不过呢

09:37.500 --> 09:38.500
这里的服务器呢

09:38.500 --> 09:39.500
它有这么

09:39.500 --> 09:40.500
我写的服务器嘛

09:40.500 --> 09:42.500
因为我给你做了这么一个处理

09:42.500 --> 09:43.500
你给我发消息

09:43.500 --> 09:44.500
我去给你回应

09:44.500 --> 09:45.500
但是完全有可能

09:45.500 --> 09:46.500
你给它发消息

09:46.500 --> 09:47.500
它完全不甩你

09:47.500 --> 09:48.500
对吧

09:48.500 --> 09:49.500
不回应

09:49.500 --> 09:50.500
它那边可能把这个消息

09:50.500 --> 09:51.500
保存一下怎么样怎么样

09:51.500 --> 09:52.500
它不回应

09:52.500 --> 09:53.500
这完全有可能的

09:53.500 --> 09:54.500
所以说回不回应

09:54.500 --> 09:55.500
完全由服务器来决定

09:55.500 --> 09:56.500
对吧

09:56.500 --> 09:58.500
它不存在什么请求想用

09:58.500 --> 10:00.500
任何时候随意的发送消息

10:00.500 --> 10:01.500
所以说这里只需要

10:01.500 --> 10:02.500
这个圣德方法

10:02.500 --> 10:04.500
它不会返回任何结果

10:04.500 --> 10:06.500
不会返回任何结果

10:06.500 --> 10:07.500
它只是把消息发出去了

10:07.500 --> 10:09.500
那么至于服务器要毁立的话

10:09.500 --> 10:10.500
你就在这里接收

10:10.500 --> 10:12.500
懂得意思吧

10:12.500 --> 10:13.500
好

10:13.500 --> 10:15.500
那么这里就

10:15.500 --> 10:17.500
还有一个就是

10:17.500 --> 10:18.500
还有一个APM

10:18.500 --> 10:19.500
看一下就行了

10:19.500 --> 10:20.500
叫做radius state

10:20.500 --> 10:21.500
这个APM是什么意思呢

10:21.500 --> 10:23.500
这个APM能够得到

10:23.500 --> 10:25.500
当前的连接状态

10:25.500 --> 10:26.500
它是一个数字

10:26.500 --> 10:28.500
它零呢表示正在连接中

10:28.500 --> 10:29.500
连接需要一段时间

10:29.500 --> 10:31.500
一呢表示已经连接好了

10:31.500 --> 10:32.500
二呢表示正在关闭中

10:32.500 --> 10:34.500
三呢表示已经关闭完了

10:34.500 --> 10:35.500
就这么一个属性

10:35.500 --> 10:36.500
好

10:36.500 --> 10:37.500
这是外宝socket的

10:37.500 --> 10:38.500
原生的APM

10:38.500 --> 10:39.500
我们刚才呢

10:39.500 --> 10:41.500
已经给大家掩饰了一下

10:41.500 --> 10:43.500
其实我们在实际的开发当中呢

10:43.500 --> 10:45.500
我们不太会去使用

10:45.500 --> 10:46.500
这个原生的APM

10:46.500 --> 10:47.500
其实原生APM里面呢

10:47.500 --> 10:48.500
功能是齐全的

10:48.500 --> 10:50.500
功能是绝对齐全的

10:50.500 --> 10:52.500
大家可以去看这个MDN的文档

10:52.500 --> 10:53.500
这里面有完整的就是

10:53.500 --> 10:54.500
它里面的用法

10:54.500 --> 10:56.500
一些属性啊方法

10:56.500 --> 10:57.500
其实也不多

10:57.500 --> 10:58.500
也不多

10:58.500 --> 10:59.500
但它功能肯定是齐全的

10:59.500 --> 11:00.500
但为什么我们平时

11:00.500 --> 11:03.500
不太喜欢使用这个原生的APM呢

11:03.500 --> 11:05.500
我给大家看一个场景吧

11:05.500 --> 11:06.500
下边

11:06.500 --> 11:08.500
原生的接口呢虽然简单

11:08.500 --> 11:09.500
但是呢在实际应用中啊

11:09.500 --> 11:13.500
会造成很多的麻烦

11:13.500 --> 11:14.500
什么麻烦呢

11:14.500 --> 11:15.500
比方说啊

11:15.500 --> 11:17.500
我们现在考虑一个聊天场景

11:17.500 --> 11:18.500
这个一面呢

11:18.500 --> 11:19.500
它有聊天

11:19.500 --> 11:20.500
有实施聊天

11:20.500 --> 11:21.500
同时呢也有K线

11:21.500 --> 11:22.500
于是呢

11:22.500 --> 11:23.500
可能我们服务器啊

11:23.500 --> 11:24.500
当然客户端那边

11:24.500 --> 11:26.500
也可能不断的发动消息给服务器

11:26.500 --> 11:27.500
服务器呢

11:27.500 --> 11:28.500
那边呢也可能有

11:28.500 --> 11:29.500
不停的有新消息过来

11:29.500 --> 11:30.500
那么它的消息呢

11:30.500 --> 11:32.500
比方说发了这么一些内容

11:32.500 --> 11:33.500
你看一下

11:33.500 --> 11:35.500
你能看懂它啥意思吗

11:35.500 --> 11:36.500
这些内容全部

11:36.500 --> 11:37.500
全部在哪里接收

11:37.500 --> 11:38.500
所以全部在

11:38.500 --> 11:39.500
All Message里面接收

11:39.500 --> 11:40.500
对吧

11:40.500 --> 11:41.500
这里所有的消息

11:41.500 --> 11:42.500
都在这里统一接收

11:42.500 --> 11:43.500
那这个接收的消息

11:43.500 --> 11:44.500
到底是什么消息

11:44.500 --> 11:45.500
你分不清楚

11:45.500 --> 11:47.500
那么这个数据

11:47.500 --> 11:48.500
就属于造成这样的一个问题

11:48.500 --> 11:50.500
连接双方可以在任何时候

11:50.500 --> 11:52.500
发送任何的数据

11:52.500 --> 11:53.500
内容数据

11:53.500 --> 11:54.500
另一方呢必须要清楚

11:54.500 --> 11:56.500
这个数据到底是什么东西

11:56.500 --> 11:57.500
对吧

11:57.500 --> 11:58.500
那么服务器

11:58.500 --> 12:00.500
如果发的是聊天

12:00.500 --> 12:01.500
聊天的时候有哪些

12:01.500 --> 12:02.500
聊天室里面有哪些人

12:02.500 --> 12:03.500
对吧

12:03.500 --> 12:04.500
然后呢也有可能发的是

12:04.500 --> 12:06.500
一个用户的发布的

12:06.500 --> 12:07.500
一个新的聊天内容

12:07.500 --> 12:09.500
也有可能呢发布的是

12:09.500 --> 12:11.500
那个

12:11.500 --> 12:13.500
K线的最新价格

12:13.500 --> 12:14.500
也有可能呢有人

12:14.500 --> 12:15.500
离开了那个聊天室

12:15.500 --> 12:17.500
那么他会把一个

12:17.500 --> 12:18.500
聊天室里面的人

12:18.500 --> 12:19.500
重新更新

12:19.500 --> 12:21.500
更新之后呢再重新发给我们

12:21.500 --> 12:23.500
就你分不清楚

12:23.500 --> 12:24.500
那么回忆一下啊

12:24.500 --> 12:25.500
像如果说

12:25.500 --> 12:27.500
我们以前学的ADDP

12:27.500 --> 12:29.500
是如何来解决这个问题的

12:29.500 --> 12:30.500
ADDP解决

12:30.500 --> 12:31.500
解决这个问题的话

12:31.500 --> 12:32.500
是不是非常简单

12:32.500 --> 12:33.500
怎么解决

12:33.500 --> 12:34.500
通过pass解决

12:34.500 --> 12:36.500
你请求不同的路径

12:36.500 --> 12:37.500
那么就表示

12:37.500 --> 12:38.500
你要不同的东西

12:38.500 --> 12:40.500
对吧

12:40.500 --> 12:41.500
说

12:41.500 --> 12:42.500
这里是登录

12:42.500 --> 12:44.500
这里是获得新闻列表

12:44.500 --> 12:46.500
你通过路径来进行区分

12:46.500 --> 12:48.500
但是很遗憾的是

12:48.500 --> 12:49.500
也不算遗憾吧

12:49.500 --> 12:50.500
那个

12:50.500 --> 12:51.500
脱离到ADDP协议了

12:51.500 --> 12:52.500
现在

12:52.500 --> 12:53.500
他没有路径了

12:53.500 --> 12:55.500
哪有路径他这个东西

12:55.500 --> 12:56.500
你看一下我们这里

12:56.500 --> 12:57.500
network这里

12:57.500 --> 12:58.500
哪有什么路径啊

12:58.500 --> 13:00.500
一旦握手完成之后

13:00.500 --> 13:01.500
就是全是这种消息的

13:01.500 --> 13:02.500
哪有什么路径呢

13:02.500 --> 13:04.500
什么头啊那些东西全部没了

13:04.500 --> 13:05.500
只有握手阶段

13:05.500 --> 13:07.500
在用ADDP协议的时候

13:07.500 --> 13:08.500
他有一个头

13:08.500 --> 13:09.500
握手完成之后的消息

13:09.500 --> 13:10.500
再也没有什么头啊

13:10.500 --> 13:12.500
体啊这些东西都没有了

13:12.500 --> 13:14.500
那我如何来区分呢

13:14.500 --> 13:16.500
通通可以想想办法

13:16.500 --> 13:17.500
其实这个办法呢

13:17.500 --> 13:19.500
还是挺好想的

13:19.500 --> 13:20.500
用什么来区分呢

13:20.500 --> 13:21.500
你每一次发

13:21.500 --> 13:22.500
比方说要求我

13:22.500 --> 13:23.500
我必须要发对象

13:23.500 --> 13:25.500
对象里边有一个属性

13:25.500 --> 13:27.500
PASS来规定你发的

13:27.500 --> 13:28.500
是什么消息

13:28.500 --> 13:29.500
消息的内容

13:29.500 --> 13:30.500
我们就用Type

13:30.500 --> 13:31.500
表示有什么消息的内容

13:31.500 --> 13:32.500
这个内容呢是一个制服串

13:32.500 --> 13:34.500
当然双方服务器也好

13:34.500 --> 13:35.500
客户专业也好

13:35.500 --> 13:36.500
需要自行约定

13:36.500 --> 13:38.500
那个内容有哪些

13:38.500 --> 13:39.500
懂了意思吧

13:39.500 --> 13:40.500
我们可以用这种方式

13:40.500 --> 13:42.500
那就说这个对象能发吗

13:42.500 --> 13:43.500
你把它转换成

13:43.500 --> 13:45.500
节省格式发制服串

13:45.500 --> 13:46.500
对吧那边再进行

13:46.500 --> 13:47.500
节省的解析

13:47.500 --> 13:48.500
就完事了

13:48.500 --> 13:49.500
好那

13:49.500 --> 13:50.500
这样子是不是可以

13:50.500 --> 13:51.500
可以

13:51.500 --> 13:52.500
但是其实有点麻烦

13:52.500 --> 13:53.500
对不对

13:53.500 --> 13:54.500
那我们最简单的办法

13:54.500 --> 13:56.500
就是使用一些第三方库

13:56.500 --> 13:58.500
来帮我们解决这个问题

13:58.500 --> 13:59.500
这个第三方库是什么呢

13:59.500 --> 14:01.500
Sockage IO

14:01.500 --> 14:03.500
这是一个非常有名的

14:03.500 --> 14:04.500
WebSockage的第三方库

14:04.500 --> 14:05.500
它的官网是在这儿

14:05.500 --> 14:06.500
很遗憾的

14:06.500 --> 14:07.500
它官网是全英文的

14:07.500 --> 14:08.500
不过一会我会

14:08.500 --> 14:09.500
大家看一下

14:09.500 --> 14:11.500
也不复杂

14:11.500 --> 14:12.500
好我们来看一下

14:12.500 --> 14:15.500
这个WebSockage IO

14:15.500 --> 14:16.500
它帮我们解决什么问题

14:16.500 --> 14:17.500
就解决

14:17.500 --> 14:19.500
最主要的就解决的问题

14:19.500 --> 14:20.500
它把不同的

14:20.500 --> 14:21.500
它是这样处理的

14:21.500 --> 14:23.500
把不同的消息

14:23.500 --> 14:25.500
放到不同的事件里边

14:25.500 --> 14:27.500
当这个事件有哪些事件

14:27.500 --> 14:28.500
你需要扶行约定

14:28.500 --> 14:30.500
服务器跟客户端之间

14:30.500 --> 14:31.500
需要扶行约定

14:31.500 --> 14:34.500
它通过监听和触发事件

14:34.500 --> 14:36.500
来实现对不同消息的处理

14:36.500 --> 14:37.500
什么意思

14:37.500 --> 14:38.500
我现在下面一张图

14:38.500 --> 14:40.500
比方说客户端这边

14:42.500 --> 14:43.500
这边它有

14:43.500 --> 14:45.500
它监听了三个时间

14:45.500 --> 14:47.500
就你首先握手完成

14:47.500 --> 14:48.500
握手完成之后

14:48.500 --> 14:49.500
它还是监听事件

14:49.500 --> 14:50.500
监听服务器的时间

14:50.500 --> 14:52.500
监听是什么意思

14:52.500 --> 14:55.500
监听就相当于是这个东西

14:55.500 --> 14:57.500
就相当于是这么一句话

14:57.500 --> 14:59.500
在监听它某一个时间

14:59.500 --> 15:01.500
大概就这个意思

15:01.500 --> 15:02.500
那么我们这里比方说

15:02.500 --> 15:03.500
客户端和服务器之间

15:03.500 --> 15:06.500
约定了我们一共有三个时间

15:06.500 --> 15:08.500
客户端这边需要监听三个时间

15:08.500 --> 15:09.500
一个是成员更新

15:09.500 --> 15:11.500
就聊天室里边有哪些人

15:11.500 --> 15:13.500
然后是监听聊天消息

15:13.500 --> 15:15.500
有没有新的聊天消息过来

15:15.500 --> 15:17.500
然后监听最新的价格

15:17.500 --> 15:18.500
开心的最新价格

15:18.500 --> 15:21.500
比方说约定了有这么三个时间

15:21.500 --> 15:25.500
那么也就客户端这边负责监听

15:25.500 --> 15:27.500
就这么个意思

15:27.500 --> 15:29.500
当什么事件发生的时候我做什么

15:29.500 --> 15:32.500
好服务器那边就负责触发时间

15:32.500 --> 15:34.500
触发时间什么意思

15:34.500 --> 15:35.500
就是发送消息的时候

15:35.500 --> 15:37.500
顺带我告诉你这个消息

15:37.500 --> 15:38.500
是哪个事件的

15:38.500 --> 15:40.500
那么比方说这个消息

15:40.500 --> 15:41.500
他就告诉你

15:41.500 --> 15:42.500
看这个颜色

15:42.500 --> 15:43.500
我就告诉你

15:43.500 --> 15:44.500
这是一个成员更新时间

15:44.500 --> 15:46.500
于是这个消息发到客户端那边

15:46.500 --> 15:49.500
客户端那边就会触发这个事件的处理

15:49.500 --> 15:51.500
就会触发这个事件

15:51.500 --> 15:54.500
那么比方说客户端那边

15:54.500 --> 15:56.500
他写的带码伟带码

15:56.500 --> 15:58.500
可能是这个样子

15:58.500 --> 16:00.500
烧贴社

16:00.500 --> 16:03.500
成员更新

16:03.500 --> 16:05.500
成员更新的时候

16:05.500 --> 16:07.500
服务器那边会给我一个数据过来

16:07.500 --> 16:09.500
那么这个数据我怎么去处理

16:09.500 --> 16:12.500
这就是监听

16:12.500 --> 16:14.500
然后聊天消息

16:14.500 --> 16:16.500
有新的聊天消息过来

16:16.500 --> 16:18.500
那么他就会处理服务器

16:18.500 --> 16:20.500
给我了这个东西

16:20.500 --> 16:22.500
然后如果说有最新价格

16:22.500 --> 16:24.500
这就是客户端的监听

16:24.500 --> 16:26.500
就这么个意思

16:26.500 --> 16:28.500
比方说我们这里

16:28.500 --> 16:29.500
这个消息过来了

16:29.500 --> 16:30.500
这是什么时间

16:30.500 --> 16:32.500
这是那个成员更新的时间

16:32.500 --> 16:33.500
说服务器在触发时间

16:33.500 --> 16:35.500
客户端在监听时间

16:35.500 --> 16:36.500
服务器触发时间

16:36.500 --> 16:38.500
本质上就是发一个消息过来

16:38.500 --> 16:40.500
附带一个时间内行

16:40.500 --> 16:42.500
那么他就会触发到这个时间

16:42.500 --> 16:44.500
一个时间就会运行这个函数

16:44.500 --> 16:46.500
然后第二次发了一个你好

16:46.500 --> 16:48.500
这是一个聊天消息时间

16:48.500 --> 16:49.500
他就会触发这个函数

16:49.500 --> 16:51.500
第三次发了一个最新价格

16:51.500 --> 16:53.500
他就会触发这个

16:53.500 --> 16:54.500
第四次发送那个

16:54.500 --> 16:55.500
又是一个成员更新

16:55.500 --> 16:57.500
他又会触发成员更新

16:57.500 --> 16:58.500
这个函数

16:58.500 --> 17:00.500
它是这么一种逻辑

17:00.500 --> 17:03.500
那是不是所有的事件

17:03.500 --> 17:05.500
都是客户端监听服务器触发呢

17:05.500 --> 17:07.500
不是的

17:07.500 --> 17:08.500
那么我这个场景者

17:08.500 --> 17:09.500
就是这样子

17:09.500 --> 17:11.500
完全有可能

17:11.500 --> 17:14.500
客户端那边也会发消息给服务器

17:14.500 --> 17:16.500
那么客户端发消息给服务器

17:16.500 --> 17:18.500
那就是客户端触发时间

17:18.500 --> 17:20.500
服务器又在监听客户端的时间

17:20.500 --> 17:21.500
这双方

17:21.500 --> 17:23.500
他们的地位是一样的

17:23.500 --> 17:24.500
不存在说

17:24.500 --> 17:25.500
谁高一点谁低一点

17:25.500 --> 17:27.500
地位完全是一样的

17:27.500 --> 17:29.500
所以说我们在一个web

17:29.500 --> 17:30.500
说起来的典型场景里面

17:30.500 --> 17:32.500
像说起来的IO的典型场景里面

17:32.500 --> 17:34.500
任何一方都有可能

17:34.500 --> 17:35.500
既监听时间

17:35.500 --> 17:36.500
监听对方的时间

17:36.500 --> 17:38.500
也会自己触发时间

17:38.500 --> 17:40.500
自己发送消息

17:40.500 --> 17:41.500
监听就是收

17:41.500 --> 17:43.500
触发就是发

17:43.500 --> 17:45.500
眼睛入这个东西就行了

17:46.500 --> 17:48.500
好那么这样子做了过后

17:48.500 --> 17:49.500
这个模型就比较完善了

17:49.500 --> 17:52.500
我们就可以利用这种事件的机制

17:52.500 --> 17:53.500
对不同的消息

17:53.500 --> 17:54.500
进行不同的处理

17:57.500 --> 17:58.500
那么这个事件

17:58.500 --> 18:00.500
是说要客户端和服务器

18:00.500 --> 18:02.500
双方事先约定好

18:02.500 --> 18:03.500
那么这里我们看一下

18:03.500 --> 18:04.500
我们的聊天室接口

18:04.500 --> 18:05.500
你看

18:05.500 --> 18:06.500
聊天室接口

18:06.500 --> 18:07.500
它首先告诉你接口地址

18:07.500 --> 18:08.500
握手的地址在这

18:08.500 --> 18:10.500
然后握手完成之后

18:10.500 --> 18:11.500
它就靠事件

18:11.500 --> 18:12.500
事件你看

18:12.500 --> 18:14.500
这么一些事件都是事件

18:14.500 --> 18:16.500
需要在接口稳当里面

18:16.500 --> 18:17.500
或者是双方私下

18:17.500 --> 18:21.900
把它事件约定好

18:23.900 --> 18:24.900
然后

18:25.900 --> 18:26.900
就是这个socket

18:26.900 --> 18:28.900
为了socket IO

18:28.900 --> 18:29.900
就这么一个第三方库

18:29.900 --> 18:31.900
它就是实现这么一个效果

18:31.900 --> 18:32.900
它为了实现这些要求

18:32.900 --> 18:34.900
它对消息的格式

18:34.900 --> 18:35.900
进行了特殊的处理

18:35.900 --> 18:36.900
它的格式

18:36.900 --> 18:37.900
可能跟大家想象的

18:37.900 --> 18:39.900
不是一个普通的对象那么简单

18:39.900 --> 18:40.900
它做了一些特殊的处理

18:40.900 --> 18:42.900
那我说这一点是什么意思呢

18:42.900 --> 18:44.900
就是如果说

18:44.900 --> 18:47.900
你服务器使用了socket IO

18:47.900 --> 18:50.900
这个库来进行触发事件发送消息

18:50.900 --> 18:53.900
你客户端那边也必须使用这个库

18:55.900 --> 18:56.900
同样道理

18:56.900 --> 18:57.900
你客户端那边使用socket IO

18:57.900 --> 18:58.900
来发送消息

18:58.900 --> 19:01.900
服务器也必须使用socket IO

19:01.900 --> 19:03.900
不能说服务器用这个

19:03.900 --> 19:04.900
客户端就用这个

19:04.900 --> 19:05.900
理论上是可以的

19:05.900 --> 19:07.900
因为我socket IO本质上

19:07.900 --> 19:08.900
也就来调用这个的API

19:08.900 --> 19:09.900
理论上是可以的

19:09.900 --> 19:11.900
但是这个就很麻烦了

19:11.900 --> 19:12.900
因为你要理解

19:12.900 --> 19:14.900
socket IO的那个消息格式

19:14.900 --> 19:15.900
那个很复杂的消息格式

19:15.900 --> 19:16.900
是怎么组成的

19:16.900 --> 19:18.900
就有点更麻烦了

19:18.900 --> 19:19.900
所以说要用的话

19:19.900 --> 19:20.900
就双方一起使用

19:20.900 --> 19:22.900
是这么个意思

19:22.900 --> 19:24.900
使用那个socket IO

19:24.900 --> 19:26.900
其实是非常简单的

19:26.900 --> 19:27.900
这里有一个

19:27.900 --> 19:28.900
它的官方文档

19:28.900 --> 19:29.900
我们一会再看

19:29.900 --> 19:30.900
这里我先给大家说一下

19:30.900 --> 19:33.900
socket IO的一些注意的事项

19:33.900 --> 19:34.900
使用的时候

19:34.900 --> 19:35.900
我们要自行的约定事件

19:35.900 --> 19:37.900
那么肯定要给事件取名字

19:37.900 --> 19:39.900
但是有一些名字

19:39.900 --> 19:40.900
你不能取

19:40.900 --> 19:41.900
有一些名字

19:41.900 --> 19:42.900
它是已经定义好的

19:42.900 --> 19:44.900
叫做message

19:44.900 --> 19:45.900
像content

19:45.900 --> 19:46.900
有些特殊的名字

19:46.900 --> 19:47.900
比方说这个message

19:47.900 --> 19:48.900
那就表示

19:48.900 --> 19:49.900
它对应到这个

19:49.900 --> 19:51.900
websocket里面的message

19:51.900 --> 19:52.900
所以说有些事件名字

19:52.900 --> 19:54.900
是不能用的

19:54.900 --> 19:56.900
那我们在取事件的名字的时候

19:56.900 --> 19:57.900
我们一般来说

19:57.900 --> 19:59.900
会加一个前序

19:59.900 --> 20:01.900
或者是你这个工程的名字

20:01.900 --> 20:02.900
或者是怎么样

20:02.900 --> 20:03.900
那我这里

20:03.900 --> 20:04.900
比方说加一个多乐符号

20:04.900 --> 20:06.900
这样子避免跟那些

20:06.900 --> 20:08.900
预先定义好的事件名字

20:08.900 --> 20:09.900
发生冲突

20:09.900 --> 20:10.900
把这个地方我给大家说一下

20:10.900 --> 20:11.900
另外一个地方

20:11.900 --> 20:12.900
大家了解一下

20:12.900 --> 20:13.900
socket IO

20:13.900 --> 20:15.900
它这个库很强

20:15.900 --> 20:17.900
功能非常强大

20:17.900 --> 20:19.900
它不仅支持服务器

20:19.900 --> 20:20.900
还支持客户端

20:20.900 --> 20:21.900
都支持

20:21.900 --> 20:22.900
同时呢

20:22.900 --> 20:23.900
它还对一般本的浏览器

20:23.900 --> 20:25.900
进行的兼容处理

20:25.900 --> 20:26.900
就是如果说

20:26.900 --> 20:27.900
它发现这个版本

20:27.900 --> 20:28.900
你这个浏览器

20:28.900 --> 20:29.900
版本太老了

20:29.900 --> 20:30.900
比方说像什么IE浏览器

20:30.900 --> 20:32.900
像版本太老的浏览器

20:32.900 --> 20:34.900
如果说你不支持

20:34.900 --> 20:35.900
websocket

20:35.900 --> 20:36.900
那怎么办呢

20:36.900 --> 20:38.900
它会转而使用长轮寻

20:38.900 --> 20:41.900
整个的那个

20:41.900 --> 20:43.900
API都是一样的

20:43.900 --> 20:44.900
就是你不用改带嘛

20:44.900 --> 20:45.900
它会转而使用

20:45.900 --> 20:47.900
内部转而使用长轮寻

20:47.900 --> 20:49.900
它会有判断的

20:49.900 --> 20:50.900
然后socket IO

20:50.900 --> 20:51.900
还有很多的高级功能

20:51.900 --> 20:52.900
可以参与官方文的

20:52.900 --> 20:54.900
我们这里可就不测了

20:54.900 --> 20:55.900
好 我们来看一下

20:55.900 --> 20:56.900
socket IO怎么去使用

20:56.900 --> 20:57.900
我们这里呢

20:57.900 --> 20:59.900
去新建一个页面吧

20:59.900 --> 21:01.900
2.0

21:01.900 --> 21:05.050
好 然后呢

21:05.050 --> 21:08.050
通常我这边呢就

21:08.050 --> 21:09.050
我这里呢

21:09.050 --> 21:10.050
用一个传统的方式吧

21:10.050 --> 21:12.050
找到CDN

21:12.050 --> 21:13.050
在这里搜索一下

21:13.050 --> 21:15.050
socket IO

21:15.050 --> 21:16.050
好 找到个GS

21:16.050 --> 21:19.050
把个GS复制一下

21:19.050 --> 21:20.050
念念进来

21:20.050 --> 21:25.340
接下来怎么去使用呢

21:25.340 --> 21:26.340
我们这里呢

21:26.340 --> 21:28.340
就可以参与我们的官方文档

21:28.340 --> 21:29.340
要学会看官方文档

21:29.340 --> 21:31.340
逐渐学会看官方文档

21:31.340 --> 21:32.340
所以说它全英文的

21:32.340 --> 21:33.340
有点老虎

21:33.340 --> 21:34.340
我教你们看吧

21:34.340 --> 21:35.340
好 打开它

21:35.340 --> 21:37.340
其实我们从首页开始吧

21:37.340 --> 21:38.340
它首先一般都是一个

21:38.340 --> 21:39.340
大致的介绍

21:39.340 --> 21:40.340
有哪些公司正在使用

21:40.340 --> 21:42.340
哪些应用正在使用

21:42.340 --> 21:43.340
socket IO

21:43.340 --> 21:44.340
这个我们不用去看

21:44.340 --> 21:45.340
get started呢

21:45.340 --> 21:47.340
就是一个简单的介绍

21:47.340 --> 21:50.340
就是从头到尾给你做一个简介

21:50.340 --> 21:51.340
然后我们主要看这个

21:51.340 --> 21:54.340
documentation文档

21:54.340 --> 21:55.340
好 文档里边呢

21:55.340 --> 21:56.340
它看

21:56.340 --> 21:57.340
它有一个服务器的API

21:57.340 --> 21:58.340
一个客户端的API

21:58.340 --> 21:59.340
对吧

21:59.340 --> 22:00.340
我们现在又不编写服务器

22:00.340 --> 22:01.340
所以说我们只看

22:01.340 --> 22:02.340
客户端的API就可以了

22:02.340 --> 22:03.340
API这一块呢

22:03.340 --> 22:04.340
它就是告诉你

22:04.340 --> 22:05.340
这里有哪些对象

22:05.340 --> 22:06.340
每个对象里边

22:06.340 --> 22:07.340
有哪些属性方法

22:07.340 --> 22:09.340
这其实也不多

22:09.340 --> 22:10.340
然后我们这里先看文档吧

22:10.340 --> 22:13.340
因为API一般是用来查阅的

22:13.340 --> 22:14.340
文

22:14.340 --> 22:16.340
但是首先了解它基本的使用方式

22:16.340 --> 22:17.340
好

22:17.340 --> 22:18.340
这个看documentation

22:18.340 --> 22:19.340
那我们这里看

22:19.340 --> 22:20.340
哪里呢

22:20.340 --> 22:21.340
这是服务器

22:21.340 --> 22:22.340
那我们自然看的是

22:22.340 --> 22:23.340
客户端这边怎么如何使用

22:23.340 --> 22:24.340
那么installation

22:24.340 --> 22:25.340
表示什么意思呢

22:25.340 --> 22:26.340
表示安装

22:26.340 --> 22:27.340
如何安装它

22:27.340 --> 22:28.340
它还会告诉你

22:28.340 --> 22:29.340
有哪些安装的方式

22:29.340 --> 22:30.340
我们这里呢

22:30.340 --> 22:31.340
一般使用npm

22:31.340 --> 22:32.340
你可以使用cdn

22:32.340 --> 22:33.340
对吧

22:33.340 --> 22:34.340
我们刚才就使用了

22:34.340 --> 22:35.340
是cdn连接过来

22:35.340 --> 22:36.340
cdn连接过来就完事了

22:36.340 --> 22:38.340
也可以使用npm来安装

22:38.340 --> 22:39.340
这里用npm

22:39.340 --> 22:40.340
用jr

22:40.340 --> 22:41.340
用pnpm

22:41.340 --> 22:42.340
对吧

22:42.340 --> 22:43.340
你可以看到安装的自然包

22:43.340 --> 22:44.340
这都是安装

22:44.340 --> 22:45.340
好

22:45.340 --> 22:46.340
那么现在已经安装了

22:46.340 --> 22:47.340
已经引用进来了

22:47.340 --> 22:48.340
那如何使用呢

22:48.340 --> 22:49.340
非常简单

22:49.340 --> 22:51.340
看着initialization

22:51.340 --> 22:52.340
这个表示什么意思

22:52.340 --> 22:53.340
初始化

22:53.340 --> 22:54.340
初始化如何

22:54.340 --> 22:55.340
初始化呢

22:55.340 --> 22:57.340
你看它有很多那种方式

22:57.340 --> 23:00.340
首先你要得到一个io对象

23:00.340 --> 23:01.340
这个io对象

23:01.340 --> 23:02.340
如果说你直接在页面上

23:02.340 --> 23:03.340
引用cdn

23:03.340 --> 23:04.340
它直接就有了

23:05.340 --> 23:06.340
也可以使用

23:06.340 --> 23:08.340
用es6的方式

23:08.340 --> 23:09.340
倒入

23:09.340 --> 23:11.340
那我这边直接有了

23:11.340 --> 23:12.340
直接有了过后

23:12.340 --> 23:14.340
有了这个io之后

23:14.340 --> 23:16.340
你就可以创建一个socket对象

23:17.340 --> 23:19.340
创建一个socket对象

23:19.340 --> 23:20.340
那么这个socket对象

23:20.340 --> 23:22.340
怎么去使用呢

23:22.340 --> 23:23.340
我们这里呢

23:23.340 --> 23:24.340
这里没说了

23:24.340 --> 23:25.340
对吧

23:25.340 --> 23:26.340
它只是告诉你

23:26.340 --> 23:27.340
怎么来创建这个socket对象

23:27.340 --> 23:28.340
那只如何来使用呢

23:28.340 --> 23:29.340
你看下面

23:29.340 --> 23:30.340
the socket instance

23:30.340 --> 23:32.340
表示这个socket对象

23:32.340 --> 23:33.340
实力

23:33.340 --> 23:34.340
什么东西

23:34.340 --> 23:35.340
我们点击

23:35.340 --> 23:36.340
那里看

23:36.340 --> 23:37.340
非常简单

23:37.340 --> 23:38.340
一看这个你就明白了

23:38.340 --> 23:39.340
对吧

23:39.340 --> 23:42.340
它就是这个socket对象

23:42.340 --> 23:43.340
下面

23:43.340 --> 23:44.340
这是服务器端的

23:44.340 --> 23:45.340
这服务器端我们不看

23:45.340 --> 23:46.340
我们是看客户端的

23:46.340 --> 23:47.340
拿到socket对象过后

23:47.340 --> 23:49.340
我们通过on就可以监听事件

23:49.340 --> 23:50.340
这事件的名字

23:50.340 --> 23:52.340
这就是那边传给我的

23:52.340 --> 23:53.340
就是一旦触发这个事件

23:53.340 --> 23:55.340
就那边传了数据过来

23:55.340 --> 23:57.340
那么就触发这个函数

23:57.340 --> 23:58.340
就这么简单

23:58.340 --> 23:59.340
就这么简单

23:59.340 --> 24:00.340
所以我们这里可以得到

24:00.340 --> 24:01.340
比方说

24:01.340 --> 24:02.340
我们这里看一下

24:02.340 --> 24:03.340
我们的聊天室接口

24:03.340 --> 24:05.340
聊天室接口里面有很多事件

24:05.340 --> 24:06.340
你看这里我说了

24:06.340 --> 24:08.340
这个下面的事件

24:08.340 --> 24:09.340
是服务器触发的

24:09.340 --> 24:10.340
就是服务器那边

24:10.340 --> 24:11.340
负责触发

24:11.340 --> 24:12.340
客户端那边需要监听

24:12.340 --> 24:14.340
我们这里有四个事件

24:14.340 --> 24:15.340
那么比方说这里

24:15.340 --> 24:17.340
updates user

24:17.340 --> 24:18.340
这个事件

24:18.340 --> 24:19.340
这个名字叫这个

24:19.340 --> 24:21.340
这个事件的触发

24:21.340 --> 24:22.340
什么时候触发呢

24:22.340 --> 24:24.340
只要有新用户进入了

24:24.340 --> 24:25.340
聊天室

24:25.340 --> 24:27.340
它就会推送这个事件

24:27.340 --> 24:28.340
比方说你是张山

24:28.340 --> 24:29.340
你在聊天室里边

24:29.340 --> 24:30.340
这个时候

24:30.340 --> 24:32.340
突然邓格进来了

24:32.340 --> 24:34.340
那么张山就会收到这么一个消息

24:34.340 --> 24:36.340
有老用户退出

24:36.340 --> 24:38.340
突然那个乘客退出了直播间

24:38.340 --> 24:39.340
那么你是张山

24:39.340 --> 24:41.340
张山也会收到这个消息

24:41.340 --> 24:42.340
还有什么时候呢

24:42.340 --> 24:43.340
还有你自己进入

24:43.340 --> 24:45.340
进入这个聊天室的时候

24:45.340 --> 24:47.340
你自己进来了过后

24:47.340 --> 24:48.340
也会导致这个

24:48.340 --> 24:49.340
用户列表更新

24:49.340 --> 24:50.340
那么用户列表

24:50.340 --> 24:51.340
也会重新传给你

24:51.340 --> 24:53.340
也会触发这个事件

24:53.340 --> 24:54.340
那么触发的事件的时候

24:54.340 --> 24:55.340
传递的是什么消息呢

24:55.340 --> 24:56.340
传递的就是

24:56.340 --> 24:57.340
整个聊天室的用户宿主

24:57.340 --> 24:58.340
我这里每一个用户

24:58.340 --> 25:00.340
就是这么一个东西

25:00.340 --> 25:02.340
就是一个制服创

25:02.340 --> 25:04.340
那么比方说就这个事件吧

25:04.340 --> 25:05.340
我来监听一下

25:06.340 --> 25:07.340
稍微提示

25:09.340 --> 25:11.340
如果说有些特殊的事件名字

25:11.340 --> 25:12.340
比方说像这种事件名字

25:12.340 --> 25:13.340
你看一下

25:13.340 --> 25:14.340
我们这可以通过

25:14.340 --> 25:15.340
它的API稳当

25:15.340 --> 25:16.340
可以看得很清楚

25:18.340 --> 25:19.340
好 你看

25:19.340 --> 25:20.340
看这

25:20.340 --> 25:22.340
他有些内置的事件

25:22.340 --> 25:24.340
看那个是表现什么意思

25:24.340 --> 25:25.340
表示已经连接了

25:25.340 --> 25:27.340
Aero表示有错误

25:27.340 --> 25:29.340
Disconnect表示

25:29.340 --> 25:30.340
连接被关闭了

25:31.340 --> 25:32.340
就这么一些事件

25:32.340 --> 25:33.340
其他的我们就可以使用

25:33.340 --> 25:34.340
制定的事件

25:35.340 --> 25:36.340
那么制定的事件

25:36.340 --> 25:37.340
我看这个事件的名字叫做

25:37.340 --> 25:38.340
updates user

25:38.340 --> 25:39.340
好 来吧

25:39.340 --> 25:41.340
updates user

25:41.340 --> 25:42.340
那么这个时候服务器

25:42.340 --> 25:43.340
会给我

25:43.340 --> 25:45.340
当我们这个事件触发的时候

25:45.340 --> 25:47.340
服务器就会给我一个数据

25:47.340 --> 25:49.340
是服务器触发的一个事件

25:49.340 --> 25:50.340
那么我们这边

25:50.340 --> 25:51.340
就会有一个回调函数

25:51.340 --> 25:53.340
这个回调函数里边

25:53.340 --> 25:54.340
我们就知道了

25:54.340 --> 25:55.340
事件

25:55.340 --> 25:57.340
输出一个字幕刷吧

25:58.340 --> 25:59.340
事件

26:01.340 --> 26:02.340
updates user

26:03.340 --> 26:04.340
触发了

26:05.340 --> 26:06.340
好 保存

26:06.340 --> 26:08.340
我们把这个网页打开

26:08.340 --> 26:14.220
他这个时候一直在转

26:14.220 --> 26:15.220
为什么在转呢

26:15.220 --> 26:16.220
他能连接这个

26:16.220 --> 26:17.220
连接这个GNS

26:17.220 --> 26:18.220
下的这个GNS

26:19.220 --> 26:21.530
刷新一次

26:22.530 --> 26:24.530
我这个CDN卡住了呀

26:27.100 --> 26:28.100
把这个关了

26:32.710 --> 26:33.710
完了 我这个CDN

26:36.470 --> 26:37.470
连不上了呢

26:40.550 --> 26:41.550
GNS连不上了

26:41.550 --> 26:42.550
那肯定完蛋了

26:45.550 --> 26:46.550
怎么

26:49.060 --> 26:50.060
上面这个太大了

26:50.060 --> 26:52.060
我用下面一个压缩过后的吧

26:54.060 --> 26:55.060
压缩过后的应该好一点

26:55.060 --> 27:01.630
好 那么这里出现问题了

27:01.630 --> 27:02.630
对吧 为什么问题呢

27:02.630 --> 27:03.630
你看他告诉你

27:03.630 --> 27:04.630
他这个地址连不上

27:04.630 --> 27:05.630
他连不上这个地址

27:05.630 --> 27:07.630
那么我们这里需要在这里写上

27:07.630 --> 27:08.630
我们的连接地址

27:08.630 --> 27:09.630
握手地址

27:10.630 --> 27:11.630
握手地址呢

27:11.630 --> 27:12.630
我们看一下这里

27:12.630 --> 27:13.630
这边是个地址在这

27:15.630 --> 27:16.630
把地址扶植进去

27:17.630 --> 27:18.630
老春 现在再看

27:19.630 --> 27:20.630
实现触发了

27:21.630 --> 27:22.630
那触发这个实现

27:22.630 --> 27:24.630
说明服务器有推消息给我们

27:24.630 --> 27:25.630
而且推的消息内行的

27:25.630 --> 27:26.630
就是这个内行

27:27.630 --> 27:28.630
就这么个意思

27:28.630 --> 27:29.630
那服务器会给我们

27:29.630 --> 27:30.630
传什么数据

27:30.630 --> 27:31.630
我在哪里获取呢

27:31.630 --> 27:32.630
服务器会给我们

27:32.630 --> 27:33.630
传一个用户列表

27:33.630 --> 27:35.630
那我在哪里获取用户列表呢

27:35.630 --> 27:36.630
就是一个

27:36.630 --> 27:37.630
回到函数的参数

27:38.630 --> 27:40.630
我们把反应出来

27:40.630 --> 27:41.630
好 老春

27:42.630 --> 27:44.630
你看 目前只有一个游客

27:44.630 --> 27:45.630
游客室

27:45.630 --> 27:46.630
那如果说我先开一个页面

27:46.630 --> 27:50.160
你看一下

27:50.160 --> 27:51.160
所以两个用户了

27:51.160 --> 27:53.160
对吧 有客室 有客户

27:53.160 --> 27:54.160
那么这边呢

27:54.160 --> 27:55.160
你看 又触发了

27:55.160 --> 27:56.160
我一个新的用户进来

27:56.160 --> 27:57.160
这边的时间也触发了

27:57.160 --> 27:59.160
然后我们再来开一个新用户

27:59.160 --> 28:00.160
你会看到

28:00.160 --> 28:01.160
服务器都会

28:01.160 --> 28:02.160
向所有的客户

28:02.160 --> 28:03.160
短推出这个消息

28:03.160 --> 28:05.160
现在这边

28:05.160 --> 28:06.160
新用户进来了

28:06.160 --> 28:07.160
三个用户

28:07.160 --> 28:08.160
那么这边呢

28:08.160 --> 28:09.160
你看 又推出了这个消息

28:09.160 --> 28:10.160
三个用户

28:10.160 --> 28:11.160
这边也是

28:11.160 --> 28:12.160
消息又更新了

28:12.160 --> 28:14.160
就这么个意思

28:14.160 --> 28:15.160
这是这个时间

28:15.160 --> 28:16.160
其他的时间呢

28:16.160 --> 28:18.160
我们看一看吧

28:18.160 --> 28:19.160
看一看

28:19.160 --> 28:20.160
就是一样的方式

28:20.160 --> 28:21.160
比方说这个是事件

28:21.160 --> 28:22.160
当然这个

28:22.160 --> 28:24.160
要跟服务器约定好

28:24.160 --> 28:25.160
这个事件什么意思呢

28:25.160 --> 28:26.160
就自己进入

28:26.160 --> 28:28.160
聊天室的时候

28:28.160 --> 28:29.160
因为我们这里呢

28:29.160 --> 28:31.160
就难得去做什么登录了

28:31.160 --> 28:32.160
就终于有一个简易的聊天室

28:32.160 --> 28:33.160
所以说自己进入

28:33.160 --> 28:34.160
聊天室的时候

28:34.160 --> 28:35.160
服务器会给你

28:35.160 --> 28:36.160
分配一个用户名称

28:36.160 --> 28:38.160
就你叫什么名字

28:38.160 --> 28:39.160
还触发这个时间

28:39.160 --> 28:40.160
给你传一个制服串

28:40.160 --> 28:41.160
好 咱们来试一下

28:41.160 --> 28:42.160
这个事件吧

28:43.160 --> 28:44.160
叫做

28:46.160 --> 28:47.160
Name

28:48.160 --> 28:50.160
那么这里是Name时间

28:51.160 --> 28:52.160
然后服务器会给我们

28:52.160 --> 28:53.160
传一个名字

28:53.160 --> 28:54.160
保存

28:55.160 --> 28:56.160
好 你看

28:56.160 --> 28:57.160
刷新

28:57.160 --> 28:58.160
进入这个聊天室

28:58.160 --> 28:59.160
然后呢

28:59.160 --> 29:00.160
游客时

29:00.160 --> 29:01.160
服务器跟我们分配的名字

29:01.160 --> 29:02.160
是这个

29:02.160 --> 29:03.160
就这么个意思

29:04.160 --> 29:05.160
这就是

29:05.160 --> 29:06.160
当然我也可以退出

29:06.160 --> 29:08.160
不要那么把这个

29:08.160 --> 29:10.160
消息者弄出来

29:10.160 --> 29:11.160
弄出来

29:11.160 --> 29:12.160
那我们如何来退出呢

29:12.160 --> 29:13.160
其实也可以参与文档

29:15.160 --> 29:16.160
参与文档看一下

29:16.160 --> 29:17.160
他这里

29:17.160 --> 29:18.160
有没有说

29:18.160 --> 29:19.160
什么怎么样的退出

29:19.160 --> 29:20.160
怎么样退出呢

29:22.160 --> 29:23.160
抗那个时候是连接

29:23.160 --> 29:24.160
他会自动重连

29:24.160 --> 29:25.160
就是如果说

29:25.160 --> 29:26.160
连接失败之后

29:26.160 --> 29:28.160
他会自己不断的重连

29:28.160 --> 29:29.160
这个我们不用去管他

29:29.160 --> 29:31.160
也一般不会去关闭这个功了

29:33.160 --> 29:34.160
然后我们来看一下

29:34.160 --> 29:35.160
怎么来退出的

29:35.160 --> 29:37.160
那你就参照API吧

29:38.160 --> 29:39.160
完整的API

29:40.160 --> 29:41.160
在上面

29:42.160 --> 29:43.160
找一下这个socket

29:43.160 --> 29:45.160
socket对象里面有哪些东西

29:45.160 --> 29:46.160
有些属性有些方法

29:46.160 --> 29:47.160
对吧

29:47.160 --> 29:48.160
其实这些单词

29:48.160 --> 29:49.160
如果说见了多的话

29:49.160 --> 29:50.160
应该就知道了

29:50.160 --> 29:51.160
他是这个disconnect

29:51.160 --> 29:53.160
表示断开连接

29:53.160 --> 29:54.160
就是扣转

29:54.160 --> 29:55.160
这边可以主动断开连接

29:55.160 --> 29:56.160
对吧

29:56.160 --> 29:57.160
我们这里有个socket

29:57.160 --> 29:59.160
socket我们就可以

29:59.160 --> 30:00.160
disconnect

30:01.160 --> 30:02.160
这个是属性

30:02.160 --> 30:04.160
表示目前有没有断开

30:04.160 --> 30:06.160
disconnect方法

30:06.160 --> 30:07.160
断开连接

30:07.160 --> 30:08.160
这一断开之后

30:08.160 --> 30:09.160
你看

30:09.160 --> 30:10.160
这边全部收到消息了

30:11.160 --> 30:12.160
不得是游载又出发了

30:13.160 --> 30:14.160
少了一个

30:14.160 --> 30:15.160
用户了

30:15.160 --> 30:17.160
你看这边都会知道少了一个用户了

30:18.160 --> 30:20.160
这就是基本的逻辑

30:20.160 --> 30:21.160
好了

30:21.160 --> 30:22.160
我们尽力这样的逻辑

30:22.160 --> 30:23.160
来开发这么一个聊天室

30:25.160 --> 30:26.160
聊天室

30:26.160 --> 30:28.160
我们这里就打算用VU来做

30:28.160 --> 30:29.160
做的像样一点

30:30.160 --> 30:31.160
接下来我们来

30:31.160 --> 30:32.160
使用聊天室

30:32.160 --> 30:33.160
这里有我们的效果

30:33.160 --> 30:34.160
带我们来看一下

30:34.160 --> 30:35.160
这个聊天室的效果

30:37.860 --> 30:38.860
npin装设

30:47.380 --> 30:48.380
打开

30:48.380 --> 30:49.380
目前有

30:50.380 --> 30:51.380
三个游客

30:51.380 --> 30:52.380
这边已经退出了

30:52.380 --> 30:53.380
你看

30:53.380 --> 30:54.380
这边有一个

30:54.380 --> 30:55.380
这边有一个

30:55.380 --> 30:56.380
加上自己

30:56.380 --> 30:57.380
还有三个

30:58.380 --> 30:59.380
发生消息

30:59.380 --> 31:01.380
我这里再开一些窗口

31:04.140 --> 31:05.140
把这个东西拿出来

31:06.140 --> 31:07.140
这个东西拿出来

31:07.140 --> 31:08.140
然后这个靠左

31:09.140 --> 31:10.140
然后把这个靠右

31:11.140 --> 31:12.140
你看

31:12.140 --> 31:13.140
我这边发消息

31:13.140 --> 31:15.140
这边的消息出来了

31:15.140 --> 31:16.140
这边的消息也有了

31:16.140 --> 31:17.140
同样的

31:17.140 --> 31:18.140
这边也是一样

31:20.140 --> 31:21.140
对吧

31:21.140 --> 31:22.140
三个窗口

31:22.140 --> 31:23.140
四个窗口其实是一样的道理

31:23.140 --> 31:25.140
然后其中一个用户推出了

31:25.140 --> 31:26.140
你看这边马上就知道了

31:27.140 --> 31:29.140
这就是我们要实现的一个效果

31:30.140 --> 31:31.140
来吧

31:31.140 --> 31:33.140
我们这里使用VU2来做

31:33.140 --> 31:35.140
那就直接来吧

31:35.140 --> 31:37.140
npin叫

31:37.140 --> 31:39.140
VU craze

31:39.140 --> 31:41.140
要取个名字吧

31:41.140 --> 31:43.140
叫ChartZoo

31:43.140 --> 31:45.900
就这个名字

31:45.900 --> 31:46.900
来个短程线

31:50.100 --> 31:51.100
不要

31:51.100 --> 31:53.100
不能在这里创建

31:53.100 --> 31:54.100
我回到上节目了

31:56.100 --> 31:58.100
VU craze

31:58.100 --> 32:00.100
ChartZoo

32:00.100 --> 32:02.860
我这里呢

32:02.860 --> 32:04.860
我这里呢有一个

32:04.860 --> 32:05.860
预设

32:05.860 --> 32:06.860
你们那边应该没有

32:06.860 --> 32:07.860
就是我之前做VU2的时候

32:07.860 --> 32:08.860
这是一个非常干净的

32:08.860 --> 32:09.860
VU2工程

32:09.860 --> 32:10.860
里边没有

32:10.860 --> 32:11.860
没有什么VUX

32:11.860 --> 32:12.860
也没有Rotor

32:12.860 --> 32:13.860
少都没有

32:13.860 --> 32:14.860
只有一个Bable

32:14.860 --> 32:15.860
OnlyBable

32:15.860 --> 32:16.860
我就做了一个这么个预设

32:18.860 --> 32:19.860
里边自己去创建一个吧

32:26.590 --> 32:27.590
稍微等一下

32:27.590 --> 32:28.590
喝喝水

32:29.590 --> 32:30.590
点嗓子有点不舒服

32:45.650 --> 32:46.650
好了

32:47.650 --> 32:48.650
安装完成

32:48.650 --> 32:49.650
在这里边

32:49.650 --> 32:50.650
这里边呢

32:50.650 --> 32:51.650
因为我这边的话

32:51.650 --> 32:52.650
是不需要它有什么

32:52.650 --> 32:54.650
计设这些东西的

32:54.650 --> 32:55.650
我不希望它有什么计设

32:56.650 --> 32:57.650
这里新区再说

32:58.650 --> 33:00.650
我要把计设去清除掉

33:00.650 --> 33:01.650
因为你们那边

33:01.650 --> 33:02.650
你们那边无所谓的

33:02.650 --> 33:03.650
你们计设有的话就有

33:03.650 --> 33:04.650
因为我这里呢

33:04.650 --> 33:05.650
有其他的问题

33:07.650 --> 33:08.650
好了

33:11.860 --> 33:12.860
反应不够

33:12.860 --> 33:13.860
好

33:13.860 --> 33:15.860
现在我们把工程运行出来

33:15.860 --> 33:16.860
NPM装设

33:26.720 --> 33:27.720
运行出来了

33:27.720 --> 33:28.720
那这里边呢

33:28.720 --> 33:29.720
我给大家说一下

33:31.720 --> 33:32.720
这里的组建呢

33:32.720 --> 33:33.720
我给你们做好的一个组建

33:33.720 --> 33:34.720
你们没必要自己

33:34.720 --> 33:35.720
重新去写了

33:35.720 --> 33:36.720
那个组建呢

33:36.720 --> 33:37.720
你直接把它复制

33:37.720 --> 33:38.720
粘贴过来就行了

33:38.720 --> 33:39.720
这个组建在这

33:39.720 --> 33:40.720
Client

33:40.720 --> 33:41.720
SRC里边

33:41.720 --> 33:42.720
有一个chart window

33:43.720 --> 33:44.720
聊天双口

33:45.720 --> 33:46.720
就这么一个组建

33:46.720 --> 33:47.720
这个组建

33:47.720 --> 33:48.720
其实你们要自己做的话

33:48.720 --> 33:49.720
也并不复杂

33:49.720 --> 33:50.720
好

33:50.720 --> 33:51.720
我们来看一下

33:51.720 --> 33:52.720
大概看一下这个组建吧

33:53.720 --> 33:54.720
我们把这个地方

33:54.720 --> 33:55.720
那个MachiBala都去掉

33:58.030 --> 33:59.030
chart window

34:00.030 --> 34:01.030
倒入这个组建

34:02.030 --> 34:04.030
都去掉

34:04.030 --> 34:05.030
MachiBala完全都去掉

34:07.030 --> 34:08.030
都去掉吧

34:08.030 --> 34:09.030
都去掉

34:10.030 --> 34:12.030
然后这个chart window

34:12.030 --> 34:13.030
就这么一个组建

34:13.030 --> 34:14.030
好

34:14.030 --> 34:15.030
我来说一下这个组建

34:17.410 --> 34:18.410
我们这里呢

34:19.410 --> 34:20.410
这里有个错误

34:21.410 --> 34:22.410
有什么错误呢

34:22.410 --> 34:24.410
这边还要安装一个包

34:24.410 --> 34:25.410
因为我这个组建

34:25.410 --> 34:26.410
组建里边用到了一个

34:26.410 --> 34:27.410
酷角moment

34:27.410 --> 34:29.410
我们再安装一下moment

34:29.410 --> 34:33.700
OK

34:34.700 --> 34:35.700
运行

34:35.700 --> 34:42.370
好

34:42.370 --> 34:43.370
然后我们打开

34:43.370 --> 34:45.370
这个组建就是这个样子

34:45.370 --> 34:47.370
它又就是一个框框

34:47.370 --> 34:48.370
对吧

34:48.370 --> 34:49.370
它给你做了一些布局

34:49.370 --> 34:51.370
其他没有做啥

34:51.370 --> 34:53.370
就做了一个布局

34:53.370 --> 34:54.370
这个组建里边

34:54.370 --> 34:56.370
好像有一个默认消息

34:56.370 --> 34:57.370
默认消息

34:57.370 --> 34:59.370
是因为我之前写错了

34:59.370 --> 35:01.370
我给他做测试的时候

35:01.370 --> 35:03.370
加了一个默认消息

35:03.370 --> 35:04.370
这边我把改一下吧

35:04.370 --> 35:05.370
里面那边出来

35:05.370 --> 35:07.370
看到过后应该是空的

35:07.370 --> 35:10.740
应该啥都没有

35:10.740 --> 35:20.950
就这么一个布局

35:20.950 --> 35:22.950
那么这里是聊天的消息

35:22.950 --> 35:23.950
对吧

35:23.950 --> 35:25.950
然后这边是聊天室的成员

35:25.950 --> 35:26.950
这边是那个

35:26.950 --> 35:28.950
我们可以在这里输入

35:28.950 --> 35:30.950
就这么一个组建

35:30.950 --> 35:31.950
好

35:31.950 --> 35:32.950
我来说一下这个组建怎么用

35:32.950 --> 35:33.950
现在跟Web收集者

35:33.950 --> 35:34.950
一点关系都没有

35:34.950 --> 35:35.950
纯组建

35:35.950 --> 35:36.950
这个组建是怎么来用的

35:36.950 --> 35:37.950
这个组建里边

35:37.950 --> 35:39.950
他要传一些属性

35:39.950 --> 35:41.950
第一个属性叫做密

35:41.950 --> 35:42.950
密是什么呢

35:42.950 --> 35:43.950
就是我是谁

35:43.950 --> 35:45.950
我的用户名叫啥

35:45.950 --> 35:47.950
那么这里我们写个Data吧

35:47.950 --> 35:49.950
把这些信息传过去

35:49.950 --> 35:50.950
密是啥呢

35:50.950 --> 35:51.950
我也不知道

35:51.950 --> 35:52.950
我目前也不知道

35:52.950 --> 35:53.950
一会要服务器告诉我

35:53.950 --> 35:55.950
反正我要把这个东西给你

35:55.950 --> 35:57.950
这个东西就比较有意思

35:57.950 --> 35:59.950
我的用户名是啥

35:59.950 --> 36:00.950
这是服务器要分配给我的

36:00.950 --> 36:02.950
当然我这个场地是服务器分配

36:02.950 --> 36:03.950
真儿八经的时候

36:03.950 --> 36:05.950
是自己注册的时候填的

36:05.950 --> 36:07.950
还要告诉他哪些信息呢

36:07.950 --> 36:09.950
历史的聊天记录

36:09.950 --> 36:11.950
History

36:11.950 --> 36:12.950
历史的聊天记录

36:12.950 --> 36:14.950
这是一个数组

36:14.950 --> 36:15.950
那么历史聊天记录

36:15.950 --> 36:16.950
其实也会服务器

36:16.950 --> 36:18.950
也要靠服务器告诉我

36:18.950 --> 36:19.950
你看这里

36:19.950 --> 36:20.950
服务器有一个世界叫History

36:20.950 --> 36:21.950
它会触发

36:21.950 --> 36:22.950
你这么要监听

36:22.950 --> 36:23.950
它触发的时候

36:23.950 --> 36:24.950
就会给我传一个数组

36:24.950 --> 36:25.950
告诉我历史上

36:25.950 --> 36:27.950
有哪些人说了哪些话

36:27.950 --> 36:29.950
把张山说了一句你好

36:29.950 --> 36:31.950
时间是什么时候说的

36:31.950 --> 36:32.950
对这种历史

36:32.950 --> 36:33.950
这么一个数组

36:33.950 --> 36:34.950
那么我这里呢

36:34.950 --> 36:37.950
一开始我也不知道是什么

36:37.950 --> 36:39.950
我就是一个空对象

36:39.950 --> 36:42.950
这里放过去

36:42.950 --> 36:43.950
还有什么属性要告诉他呢

36:43.950 --> 36:45.950
因为这些东西都是为了显示

36:45.950 --> 36:46.950
这个组件啥都没做

36:46.950 --> 36:47.950
他就是为了

36:47.950 --> 36:49.950
他就把这东西显示出来

36:49.950 --> 36:51.950
这个组件是真的啥都没做

36:51.950 --> 36:52.950
他没有任何熟悉者的东西

36:52.950 --> 36:54.950
所以说我要我们自己写

36:54.950 --> 36:55.950
就是做了一个布局

36:55.950 --> 36:56.950
做了一框框

36:56.950 --> 36:57.950
把你传的东西

36:57.950 --> 36:58.950
显示到一个合适的位置

36:58.950 --> 36:59.950
就完事了

36:59.950 --> 37:01.950
他没有做啥其他东西

37:01.950 --> 37:02.950
所以不带着大家写了

37:02.950 --> 37:03.950
没啥意义

37:03.950 --> 37:04.950
同学们

37:04.950 --> 37:05.950
当然同学们有兴趣

37:05.950 --> 37:06.950
可以自己去写一下

37:06.950 --> 37:07.950
并不复杂

37:07.950 --> 37:08.950
你们好像以前做过了

37:08.950 --> 37:09.950
什么聊天机去的

37:09.950 --> 37:11.950
看看样子差不多

37:11.950 --> 37:14.950
那么这是历史消息记录

37:14.950 --> 37:15.950
就是在这个区域

37:15.950 --> 37:17.950
这个区域他就显示的是

37:17.950 --> 37:18.950
当前的历史消息记录

37:18.950 --> 37:19.950
就显示到这

37:19.950 --> 37:20.950
当然历史消息

37:20.950 --> 37:21.950
它会不断的增加

37:21.950 --> 37:22.950
你发一个消息

37:22.950 --> 37:23.950
是不是历史消息又变了

37:23.950 --> 37:24.950
又会增加

37:24.950 --> 37:25.950
那么每增加的话

37:25.950 --> 37:27.950
你就往这个数组里面加一下

37:27.950 --> 37:28.950
我们知道

37:28.950 --> 37:29.950
没有是响应是数据的

37:29.950 --> 37:30.950
对吧

37:30.950 --> 37:31.950
数据一变

37:31.950 --> 37:32.950
它就会变好

37:32.950 --> 37:33.950
好

37:33.950 --> 37:34.950
然后下一个属性

37:34.950 --> 37:36.950
叫做那个

37:36.950 --> 37:37.950
我忘了

37:37.950 --> 37:38.950
我看一下

37:38.950 --> 37:40.950
还有 users

37:40.950 --> 37:41.950
懂了

37:41.950 --> 37:42.950
不好意思吧

37:42.950 --> 37:43.950
就当天

37:43.950 --> 37:45.950
当前聊天室的用户

37:45.950 --> 37:46.950
就哪些用户

37:46.950 --> 37:47.950
然后这里也是一个宿主

37:47.950 --> 37:49.950
每个用户就是一个制服创

37:49.950 --> 37:55.460
当前聊天室的用户

37:55.460 --> 37:56.460
是一个制服创

37:56.460 --> 37:57.460
那我目前肯定不知道

37:57.460 --> 37:58.460
我给你吧

37:58.460 --> 37:59.460
还有啥呢

37:59.460 --> 38:00.460
属性就没了

38:00.460 --> 38:01.460
但是它还有一个

38:01.460 --> 38:03.460
还有一个就是

38:03.460 --> 38:04.460
事件叫做chart

38:05.460 --> 38:06.460
事件

38:06.460 --> 38:07.460
这个事件就是

38:07.460 --> 38:08.460
就是在这里

38:08.460 --> 38:09.460
我们输入一些内容

38:09.460 --> 38:10.460
然后按了回车之后

38:10.460 --> 38:11.460
出发的事件

38:11.460 --> 38:13.460
那么要怎么做

38:13.460 --> 38:14.460
在这里呢

38:14.460 --> 38:15.460
我们比较要说就是

38:15.460 --> 38:17.460
handle chart

38:17.460 --> 38:18.460
写个mercy

38:18.460 --> 38:23.660
handle chart

38:23.660 --> 38:24.660
那么这个事件里面

38:24.660 --> 38:25.660
它会给我传一个参数

38:25.660 --> 38:26.660
注意

38:26.660 --> 38:27.660
这不跟外国搜索者

38:27.660 --> 38:28.660
跟搜索者没有任何关系

38:29.660 --> 38:30.660
它就是组件的事件

38:30.660 --> 38:31.660
还会给我们传一个

38:31.660 --> 38:33.660
就是消息对象

38:33.660 --> 38:34.660
输出一个

38:36.660 --> 38:37.660
消息对象

38:37.660 --> 38:41.770
看一下吧

38:42.770 --> 38:43.770
好了

38:43.770 --> 38:44.770
我们比较要说在这里

38:44.770 --> 38:45.770
一回车

38:45.770 --> 38:46.770
你看

38:46.770 --> 38:48.770
是不是就消息对象就出来了

38:48.770 --> 38:49.770
消息内容

38:49.770 --> 38:50.770
然后呢

38:50.770 --> 38:51.770
这个name是什么呢

38:51.770 --> 38:52.770
就是哪个用户发的消息

38:52.770 --> 38:54.770
由于我这里边

38:54.770 --> 38:55.770
我的用户名是空的

38:55.770 --> 38:56.770
所以说它就是空的

38:56.770 --> 38:58.770
那你这里写的abc的话

38:58.770 --> 38:59.770
我来看一下

39:00.770 --> 39:01.770
我们的用户名就是abc

39:01.770 --> 39:02.770
它告诉你这个东西

39:02.770 --> 39:04.770
然后就是发消息的时间

39:04.770 --> 39:05.770
就是这么一个对象

39:05.770 --> 39:06.770
好了比方说

39:06.770 --> 39:07.770
做这么一个这么一件事

39:07.770 --> 39:08.770
我们试一下

39:08.770 --> 39:09.770
我把这个对象

39:09.770 --> 39:11.770
夹到这个history里面去

39:12.770 --> 39:13.770
history

39:13.770 --> 39:14.770
to

39:14.770 --> 39:15.770
mercy

39:15.770 --> 39:16.770
夹进去

39:16.770 --> 39:17.770
你看一下会怎么样呢

39:20.770 --> 39:21.770
一回车

39:23.770 --> 39:24.770
this

39:25.770 --> 39:30.260
一回车

39:30.260 --> 39:31.260
对吧

39:31.260 --> 39:32.260
它有跟外边说

39:32.260 --> 39:33.260
跟它有什么关系

39:33.260 --> 39:34.260
没有什么关系

39:34.260 --> 39:35.260
它就是把它这个

39:35.260 --> 39:36.260
它生成一个元素

39:36.260 --> 39:38.260
把它放到这个位置

39:38.260 --> 39:39.260
对吧

39:39.260 --> 39:40.260
因为你这个

39:40.260 --> 39:41.260
数组变了对吧

39:41.260 --> 39:42.260
那边你可以想象的到

39:42.260 --> 39:43.260
这个这个组件

39:43.260 --> 39:44.260
肯定是在循环这个数组

39:44.260 --> 39:46.260
在这个区域生成元素

39:46.260 --> 39:47.260
数组变了还会重新生成

39:47.260 --> 39:48.260
就这么简单

39:48.260 --> 39:49.260
哪有什么复杂的

39:50.260 --> 39:51.260
回车

39:52.260 --> 39:53.260
对吧

39:53.260 --> 39:54.260
可以在这里发消息

39:54.260 --> 39:55.260
但是这些消息的都是

39:55.260 --> 39:57.260
都没有真正的到复杂

39:57.260 --> 39:58.260
好

39:58.260 --> 39:59.260
这就是这个

39:59.260 --> 40:00.260
这个组件如何使用

40:00.260 --> 40:01.260
清楚了吗

40:01.260 --> 40:02.260
好

40:02.260 --> 40:03.260
接下来我们把

40:03.260 --> 40:04.260
我也把手提着加上

40:04.260 --> 40:05.260
那我们来吧

40:05.260 --> 40:06.260
这些东西都

40:06.260 --> 40:07.260
应该都不知道的

40:07.260 --> 40:08.260
啥都不知道

40:08.260 --> 40:09.260
首先我们

40:09.260 --> 40:10.260
对

40:10.260 --> 40:11.260
我们还要稍微的

40:11.260 --> 40:12.260
做一下样式

40:12.260 --> 40:13.260
这个样式有点丑

40:13.260 --> 40:14.260
我这里都给它个容器吧

40:14.260 --> 40:15.260
给它个容器

40:15.260 --> 40:16.260
或者

40:16.260 --> 40:17.260
不都拿着给容器

40:17.260 --> 40:18.260
我就来一个

40:18.260 --> 40:19.260
body吧

40:19.260 --> 40:20.260
style

40:21.260 --> 40:27.830
就不要sculpt

40:28.830 --> 40:30.830
直接针对整个

40:31.830 --> 40:32.830
body

40:33.830 --> 40:35.830
然后设置一个背景颜色吧

40:35.830 --> 40:36.830
这个背景颜色

40:36.830 --> 40:38.830
我去用bscode的颜色得了

40:41.340 --> 40:42.340
设置个背景颜色

40:42.340 --> 40:43.340
然后呢

40:43.340 --> 40:44.340
把它去

40:44.340 --> 40:45.340
把它里边的东西

40:45.340 --> 40:46.340
居中display

40:47.340 --> 40:48.340
flex

40:48.340 --> 40:50.340
justify content center

40:50.340 --> 40:51.340
erline items center

40:52.340 --> 40:53.340
erline

40:53.340 --> 40:55.340
为什么没有重相居中呢

40:55.340 --> 40:56.340
是因为

40:56.340 --> 40:57.340
body现在就只有这么高

40:57.340 --> 40:58.340
所以我们把

40:58.340 --> 40:59.340
body设高一点

40:59.340 --> 41:00.340
高度呢

41:00.340 --> 41:01.340
100%

41:01.340 --> 41:02.340
100%

41:02.340 --> 41:03.340
100倍也一起吧

41:04.340 --> 41:05.340
然后

41:05.340 --> 41:06.340
把这些东西

41:06.340 --> 41:07.340
给它清除了

41:07.340 --> 41:09.340
什么pending啊

41:10.340 --> 41:11.340
margin

41:12.340 --> 41:13.340
margin

41:13.340 --> 41:14.340
还有什么呢

41:14.340 --> 41:15.340
style

41:17.340 --> 41:18.340
还有啥呢

41:19.340 --> 41:20.340
没有

41:20.340 --> 41:21.340
然后boss sizing

41:22.340 --> 41:23.340
border boss

41:23.340 --> 41:25.340
把这些东西加上

41:26.340 --> 41:27.340
OK

41:27.340 --> 41:28.340
现在就

41:28.340 --> 41:29.340
就出了那么个界面了

41:30.340 --> 41:31.340
好了

41:31.340 --> 41:33.340
就要去写核心代码了

41:34.340 --> 41:35.340
我们怎么样呢

41:35.340 --> 41:36.340
我们需要安装

41:36.340 --> 41:37.340
首先安装微表少给者

41:39.340 --> 41:40.340
安装哪个包

41:40.340 --> 41:42.340
也要去找官方文档

41:42.340 --> 41:43.340
官方文档

41:44.340 --> 41:45.340
官方文档

41:49.780 --> 41:50.780
看这个客户端

41:50.780 --> 41:51.780
如何安装

41:51.780 --> 41:52.780
这里我们使用npm

41:53.780 --> 41:55.780
就安装这个东西

41:56.780 --> 42:00.180
复制

42:00.180 --> 42:01.180
安装

42:03.810 --> 42:04.810
安装好了

42:04.810 --> 42:06.810
然后再把运行出来

42:07.810 --> 42:08.810
那怎么去使用呢

42:08.810 --> 42:10.810
那里有查官方文档

42:10.810 --> 42:11.810
初始化

42:11.810 --> 42:12.810
怎么使用

42:12.810 --> 42:13.810
你看一下这个module

42:13.810 --> 42:14.810
怎么使用的

42:15.810 --> 42:16.810
npm安装了

42:16.810 --> 42:17.810
是不是这样使用

42:17.810 --> 42:18.810
那你复制呗

42:19.810 --> 42:20.810
关键就是要得到这个io

42:20.810 --> 42:21.810
对不对

42:21.810 --> 42:23.810
是不是要得到这么一个东西

42:23.810 --> 42:24.810
io

42:24.810 --> 42:25.810
好

42:25.810 --> 42:26.810
那么我们

42:26.810 --> 42:27.810
通过这个东西要去握手

42:27.810 --> 42:28.810
连接服务器

42:28.810 --> 42:30.810
什么时候连接呢

42:30.810 --> 42:31.810
什么时候连接

42:31.810 --> 42:32.810
是不是在我一个组建

42:32.810 --> 42:33.810
一开始的时候连接

42:34.810 --> 42:35.810
对吧

42:35.810 --> 42:36.810
好来吧

42:36.810 --> 42:37.810
我叫一个组建

42:37.810 --> 42:38.810
一开始的时候连接

42:38.810 --> 42:39.810
其实我在app里面写并不好

42:39.810 --> 42:41.810
应该再套一个组建

42:41.810 --> 42:42.810
app用另外一个组建

42:42.810 --> 42:43.810
我们把它叫做容器

42:43.810 --> 42:45.810
容器再用它这个组建

42:45.810 --> 42:46.810
这样比较好一点

42:46.810 --> 42:48.810
如果说将来容器消费的时候

42:48.810 --> 42:50.810
我要把这个连接关闭掉

42:50.810 --> 42:52.810
但是我这里就

42:52.810 --> 42:54.810
突然就在这里写了

42:54.810 --> 42:55.810
我们在这里拿了

42:55.810 --> 42:56.810
我们在creted

42:56.810 --> 42:57.810
在这里边

42:58.810 --> 42:59.810
在这里边我们去

42:59.810 --> 43:00.810
通过这个io

43:00.810 --> 43:01.810
创建

43:01.810 --> 43:03.810
进行握手连接

43:03.810 --> 43:04.810
跟哪里连的

43:04.810 --> 43:06.810
然后看聊天室接口

43:06.810 --> 43:07.810
是不跟这里连

43:07.810 --> 43:08.810
好复制

43:08.810 --> 43:09.810
跟你这里连接

43:09.810 --> 43:10.810
连接之后

43:10.810 --> 43:11.810
它是不是会产生一个

43:11.810 --> 43:12.810
sockage的对象

43:12.810 --> 43:13.810
对吧

43:13.810 --> 43:14.810
我把它保存到data里面

43:15.810 --> 43:16.810
sockage

43:17.810 --> 43:18.810
一开始时浪

43:19.810 --> 43:20.810
好我们把保存到这

43:20.810 --> 43:21.810
sockage

43:23.810 --> 43:24.810
是不是连接好了

43:24.810 --> 43:28.380
这是连接

43:28.380 --> 43:29.380
握手

43:32.710 --> 43:33.710
好我们去连接

43:34.710 --> 43:35.710
好连接完了

43:35.710 --> 43:38.710
我们有了连接一定要想到

43:38.710 --> 43:39.710
将来有一天不用了

43:39.710 --> 43:40.710
比方说这个组建

43:40.710 --> 43:41.710
有一天被消费了

43:41.710 --> 43:42.710
那我们这个连接

43:42.710 --> 43:43.710
是不是得关闭

43:43.710 --> 43:44.710
所以说我们在哪呢

43:44.710 --> 43:47.710
before destroyed

43:49.710 --> 43:51.710
反正就是要关闭的时候

43:51.710 --> 43:53.710
然后把这个sockage

43:53.710 --> 43:54.710
怎么样

43:55.710 --> 43:56.710
disconnect

43:57.710 --> 43:58.710
把关闭掉

43:58.710 --> 43:59.710
当然了

43:59.710 --> 44:00.710
如果说你不关闭

44:00.710 --> 44:01.710
你只要关闭的浏浪器

44:01.710 --> 44:02.710
它也会关闭

44:02.710 --> 44:03.710
但是我们最好把关闭一下

44:03.710 --> 44:04.710
有可能它没有关闭浏浪器

44:04.710 --> 44:05.710
只是个组建消费了

44:05.710 --> 44:06.710
对吧

44:06.710 --> 44:07.710
我们也要把关闭掉

44:07.710 --> 44:08.710
好

44:08.710 --> 44:10.710
我们先把这个核心代表写上

44:10.710 --> 44:11.710
关闭

44:12.710 --> 44:14.710
好咱们其实都可以试一试了

44:16.710 --> 44:17.710
打开

44:17.710 --> 44:19.710
目前你看一下

44:19.710 --> 44:20.710
其实我们可以看一下

44:20.710 --> 44:22.710
网络它传的到底是啥

44:22.710 --> 44:23.710
刷新

44:23.710 --> 44:24.710
你看

44:25.710 --> 44:26.710
说连接过来了

44:26.710 --> 44:28.710
那么这些数据

44:29.710 --> 44:30.710
这些数据

44:30.710 --> 44:31.710
你就不知道

44:31.710 --> 44:32.710
它就是啥意思

44:32.710 --> 44:33.710
对吧

44:33.710 --> 44:35.710
所以这些数据我们不去管它

44:35.710 --> 44:36.710
不去管它

44:36.710 --> 44:37.710
它的数据的格式是

44:37.710 --> 44:42.710
经过处理过的

44:42.710 --> 44:43.710
好

44:43.710 --> 44:44.710
那么现在我们其实

44:44.710 --> 44:46.710
就已经连接了

44:46.710 --> 44:48.710
如果说我们关闭的话

44:48.710 --> 44:49.710
它就会关闭连接

44:52.340 --> 44:53.340
这些关了

44:54.340 --> 44:56.340
好 接下来我们继续

44:56.340 --> 44:57.340
我们这里还有很多事件

44:57.340 --> 44:58.340
对吧

44:58.340 --> 44:59.340
连接完了之后

44:59.340 --> 45:00.340
我们是不是要去

45:00.340 --> 45:01.340
监听服务器的各种事件

45:01.340 --> 45:03.340
那要监听哪些事件呢

45:03.340 --> 45:04.340
看接口文档

45:04.340 --> 45:05.340
接口文档给你显得很清楚

45:05.340 --> 45:07.340
服务器会触发什么事件

45:07.340 --> 45:08.340
就是会发送什么东西

45:08.340 --> 45:10.340
客户端需要监听什么东西

45:10.340 --> 45:11.340
好 一个个来

45:11.340 --> 45:12.340
首先是第一个

45:12.340 --> 45:14.340
updates user

45:14.340 --> 45:16.340
是不是我们用户有更新

45:16.340 --> 45:18.340
有变化

45:18.340 --> 45:19.340
那么这里是不是要不了监听

45:19.340 --> 45:20.340
它肯定要监听

45:20.340 --> 45:21.340
就是要up

45:21.340 --> 45:22.340
监听什么的

45:22.340 --> 45:24.340
updates user

45:24.340 --> 45:25.340
那么服务器那边

45:25.340 --> 45:26.340
是不是会给我一个用户的数据

45:26.340 --> 45:28.340
哪有一个用户的数据

45:28.340 --> 45:29.340
我是不是就直接把那个

45:29.340 --> 45:30.340
我的数据里面的用户数据

45:30.340 --> 45:31.340
更新一下就完事了

45:32.340 --> 45:33.340
对吧

45:33.340 --> 45:34.340
简单吧

45:34.340 --> 45:35.340
非常简单

45:35.340 --> 45:37.340
你看这件事情做了之后

45:37.340 --> 45:38.340
其实都已经出来了

45:38.340 --> 45:39.340
对吧

45:39.340 --> 45:40.340
现在我们

45:40.340 --> 45:41.340
你看这边

45:41.340 --> 45:42.340
因为这边有几个用户

45:42.340 --> 45:43.340
我把这边的用户都关了

45:43.340 --> 45:44.340
这边一关之后

45:44.340 --> 45:46.340
这边只剩下一个了

45:46.340 --> 45:47.340
然后我打开一个

45:49.340 --> 45:51.340
用两个窗口吧

45:58.580 --> 46:00.580
比方说我关闭一个

46:01.580 --> 46:02.580
这边只有一个了

46:02.580 --> 46:05.580
用户的更新是不是搞定了

46:06.580 --> 46:08.580
好 这是用户更新

46:08.580 --> 46:09.580
然后还有什么呢

46:09.580 --> 46:11.580
还有一个信息就是

46:11.580 --> 46:13.580
下面Name

46:13.580 --> 46:16.580
服务器会告诉我我的名字叫啥

46:17.580 --> 46:19.580
我连接好了之后它就会告诉我

46:19.580 --> 46:21.580
那么我这里收这个时间

46:23.580 --> 46:24.580
我这里要做的事情

46:24.580 --> 46:26.580
是不是就把我的密更新

46:26.580 --> 46:27.580
对不对

46:27.580 --> 46:28.580
更新到这个Name

46:28.580 --> 46:29.580
对吧

46:29.580 --> 46:30.580
因为这个密需要传给谁

46:30.580 --> 46:31.580
传给这个组件

46:31.580 --> 46:33.580
让他知道我是谁

46:33.580 --> 46:34.580
这里的效果上

46:34.580 --> 46:35.580
但是没有反映出来

46:35.580 --> 46:37.580
这个信息肯定是需要的

46:37.580 --> 46:38.580
你看一下

46:38.580 --> 46:39.580
至少不会包说

46:39.580 --> 46:40.580
没问题

46:41.580 --> 46:43.580
他会告诉我我是谁

46:43.580 --> 46:44.580
那么其实呢

46:44.580 --> 46:45.580
你在这里

46:45.580 --> 46:46.580
我们写消息过后

46:46.580 --> 46:47.580
他就知道了

46:47.580 --> 46:49.580
我这个用户是83

46:49.580 --> 46:50.580
对吧

46:50.580 --> 46:51.580
他就起这么一个作用

46:51.580 --> 46:52.580
好 再来

46:54.580 --> 46:56.580
接下来是

46:56.580 --> 46:57.580
看下边

46:58.580 --> 46:59.580
History

46:59.580 --> 47:01.580
自己进入的时候

47:01.580 --> 47:03.580
当我们进入这个聊天室的时候

47:03.580 --> 47:05.580
他会告诉我所有的历史记录

47:05.580 --> 47:07.580
就以前有哪些消息

47:07.580 --> 47:10.580
不便由我恢复以前的聊天消息

47:10.580 --> 47:12.580
那么这里是这么一个时间

47:12.580 --> 47:14.580
所以我们这里监听一下

47:14.580 --> 47:16.580
这是History

47:17.580 --> 47:19.580
那么这里是一个History

47:19.580 --> 47:20.580
就是一个数组

47:21.580 --> 47:22.580
你看

47:22.580 --> 47:23.580
这里就是一个数组

47:23.580 --> 47:24.580
谁发了什么内容

47:24.580 --> 47:25.580
什么时间发的

47:25.580 --> 47:27.580
那么我们只需要把这个数组

47:27.580 --> 47:28.580
给谁复制

47:28.580 --> 47:29.580
给History复制

47:30.580 --> 47:35.330
对吧

47:35.330 --> 47:36.330
我们再看一下

47:37.330 --> 47:39.330
是不是过去的一些消息就出来了

47:40.330 --> 47:43.900
对了 过去的一些消息就出来了

47:43.900 --> 47:44.900
好 又来

47:45.900 --> 47:46.900
然后呢

47:46.900 --> 47:48.900
是下一个事件

47:48.900 --> 47:49.900
Message

47:49.900 --> 47:52.900
当别人发消息的时候

47:52.900 --> 47:54.900
就比方说我是张三

47:54.900 --> 47:56.900
我跟福奇连接了

47:56.900 --> 47:57.900
进行稍微的连接了

47:57.900 --> 47:58.900
然后这个时候

47:58.900 --> 47:59.900
别人

47:59.900 --> 48:01.900
邓哥发了一个消息

48:01.900 --> 48:02.900
福奇是不是要告诉我要

48:02.900 --> 48:03.900
赌东推送给我

48:03.900 --> 48:04.900
对吧

48:04.900 --> 48:05.900
那么他就会触发这个时间

48:05.900 --> 48:07.900
那么我这里要监听这个时间

48:07.900 --> 48:08.900
他会告诉我

48:08.900 --> 48:09.900
谁发了什么内容

48:09.900 --> 48:10.900
什么时间发的

48:11.900 --> 48:13.900
这就是单个对象

48:13.900 --> 48:14.900
来吧

48:14.900 --> 48:15.900
我们要监听一下这个时间

48:15.900 --> 48:16.900
稍Hist

48:16.900 --> 48:17.900
Message

48:18.900 --> 48:19.900
Message

48:20.900 --> 48:22.900
那我这里做什么事情呢

48:22.900 --> 48:23.900
你看他给我单个对象

48:23.900 --> 48:24.900
我是不是往History里边

48:24.900 --> 48:25.900
加一箱就行了

48:25.900 --> 48:26.900
对吧

48:26.900 --> 48:28.900
把它加到History的末位

48:28.900 --> 48:29.900
说这里呢

48:29.900 --> 48:30.900
我们也是History

48:30.900 --> 48:31.900
Push

48:31.900 --> 48:32.900
Message

48:32.900 --> 48:33.900
但是这个效果呢

48:33.900 --> 48:34.900
我们目前还看不到

48:34.900 --> 48:35.900
看不到效果

48:35.900 --> 48:36.900
因为目前我还没有发

48:36.900 --> 48:37.900
对不对

48:37.900 --> 48:38.900
还没有发消息

48:38.900 --> 48:41.900
原来在这里不能发

48:41.900 --> 48:42.900
这里发

48:42.900 --> 48:43.900
这边是不到的

48:43.900 --> 48:44.900
为什么呢

48:44.900 --> 48:45.900
因为这里发我只是把自己的那个

48:45.900 --> 48:47.900
你看Message里边

48:47.900 --> 48:49.900
我只是往当前的对象

48:49.900 --> 48:50.900
数组里边加了一箱

48:50.900 --> 48:51.900
对不对

48:51.900 --> 48:52.900
跟其他网页有什么关系的

48:52.900 --> 48:54.900
其他网页是他的数组

48:54.900 --> 48:55.900
我要做什么

48:55.900 --> 48:56.900
就是我发消息的时候

48:56.900 --> 48:58.900
我还要看下边

48:58.900 --> 48:59.900
客户端也会触发时间

48:59.900 --> 49:02.900
不是光是服务器触发时间

49:02.900 --> 49:03.900
那么客户端触发的话

49:03.900 --> 49:05.900
就是服务器监听

49:05.900 --> 49:06.900
客户端触发什么时间呢

49:06.900 --> 49:07.900
这个时间的名字

49:07.900 --> 49:09.900
也叫做Message

49:09.900 --> 49:10.900
这个Message是啥意思

49:10.900 --> 49:11.900
就是当我发送一个

49:11.900 --> 49:13.900
聊天消息的时候

49:13.900 --> 49:14.900
我通过这个事件

49:14.900 --> 49:16.900
告诉服务器我发了什么

49:16.900 --> 49:18.900
那么直接传一个制服串就行了

49:18.900 --> 49:21.530
好

49:21.530 --> 49:23.530
ZSockage

49:23.530 --> 49:24.530
在这里我们发消息的时候

49:24.530 --> 49:26.530
是不是要来一个

49:26.530 --> 49:27.530
如何来触发视线

49:27.530 --> 49:28.530
使用AMAT

49:28.530 --> 49:29.530
跟5U那个一样

49:29.530 --> 49:31.530
但是前面不要加多了

49:31.530 --> 49:32.530
ZSockage里面的方法

49:32.530 --> 49:33.530
AMAT触发视线

49:33.530 --> 49:34.530
就是发消息

49:34.530 --> 49:36.530
现在的名字就是Message

49:36.530 --> 49:38.530
高速服务器

49:38.530 --> 49:39.530
后面就是一个对象

49:39.530 --> 49:40.530
任何东西都可以

49:40.530 --> 49:42.530
制服串对象数字都可以

49:42.530 --> 49:43.530
那么这里我给他

49:43.530 --> 49:44.530
传一个制服串就行了

49:44.530 --> 49:45.530
制服串

49:45.530 --> 49:46.530
这里是对象

49:46.530 --> 49:47.530
这里是对象

49:47.530 --> 49:50.530
我要得到对象里面的content

49:50.530 --> 49:52.530
得到对象里面的content

49:52.530 --> 49:54.530
这个Message对象哪来的

49:54.530 --> 49:56.530
是不是这个逐渐给我的

49:56.530 --> 49:58.530
逐渐他会封装一个对象给我

49:58.530 --> 49:59.530
那么我要它的内容

49:59.530 --> 50:00.530
只要它的内容部分

50:00.530 --> 50:02.530
因为这是接口的要求

50:02.530 --> 50:04.530
只要它的内容部分

50:04.530 --> 50:06.530
就高速服务器了

50:06.530 --> 50:08.530
好 这里有同学有没有疑问

50:08.530 --> 50:10.530
就说我这里客户端

50:10.530 --> 50:11.530
给服务器发消息的时候

50:11.530 --> 50:12.530
只发了一个制服串

50:12.530 --> 50:15.530
服务器怎么知道是哪个人发的

50:15.530 --> 50:17.530
怎么知道

50:17.530 --> 50:20.530
这里跟ATEP协议不一样

50:20.530 --> 50:21.530
ATEP协议

50:21.530 --> 50:22.530
服务器那肯定

50:22.530 --> 50:23.530
你要告诉他是谁

50:23.530 --> 50:25.530
无论你是通过Cookie告诉他

50:25.530 --> 50:27.530
还是通过什么Token

50:27.530 --> 50:29.530
还是通过直接传递参数

50:29.530 --> 50:31.530
总归得要高速服务器

50:31.530 --> 50:32.530
这里不需要

50:32.530 --> 50:34.530
为什么不需要

50:34.530 --> 50:37.530
因为现在是持久性连接

50:37.530 --> 50:39.530
比方说这是服务器

50:39.530 --> 50:40.530
那么这里有一个客户端

50:40.530 --> 50:42.530
两个客户端 三个客户端

50:42.530 --> 50:44.530
好 第一个客户端连接之后

50:44.530 --> 50:45.530
跟服务器连接之后

50:45.530 --> 50:46.530
服务器告诉他

50:46.530 --> 50:48.530
你是张三

50:48.530 --> 50:49.530
我们就一表示

50:49.530 --> 50:51.530
然后这里跟服务器连接之后

50:51.530 --> 50:52.530
服务器告诉你

50:52.530 --> 50:53.530
你是李四

50:53.530 --> 50:54.530
然后这里连接过后

50:54.530 --> 50:55.530
服务器告诉他

50:55.530 --> 50:59.530
你是邓格

50:59.530 --> 51:01.530
以后这个客户端

51:01.530 --> 51:03.530
发消息给服务器的时候

51:03.530 --> 51:05.530
是通过这个通道发的

51:05.530 --> 51:07.530
服务器是不是通过这个通道

51:07.530 --> 51:09.530
他就能知道你是谁

51:09.530 --> 51:10.530
对不对

51:10.530 --> 51:11.530
他个通道没断

51:11.530 --> 51:13.530
一断点到服务器肯定不知道了

51:13.530 --> 51:14.530
像AGP就会断掉

51:14.530 --> 51:15.530
断掉过后服务器肯定

51:15.530 --> 51:16.530
下一支就不知道了

51:16.530 --> 51:18.530
但这个连接通道没有断

51:18.530 --> 51:20.530
所以说他随便发消息

51:20.530 --> 51:21.530
服务器清清楚楚知道

51:21.530 --> 51:23.530
我之前给你分配的就是张三

51:23.530 --> 51:25.530
他发消息的时候

51:25.530 --> 51:26.530
服务器一看

51:26.530 --> 51:27.530
原来是这个通道

51:27.530 --> 51:28.530
你知道你是李四

51:28.530 --> 51:30.530
服务器那边就不需要你

51:30.530 --> 51:32.530
不需要你再告诉服务器是谁了

51:32.530 --> 51:34.530
他可以减少很多的消息量

51:34.530 --> 51:35.530
就这么一个原因

51:35.530 --> 51:36.530
现在明白了吧

51:36.530 --> 51:37.530
为什么ATDP协议

51:37.530 --> 51:38.530
他必须要

51:38.530 --> 51:40.530
每一次协议请求都必须要完整信息

51:40.530 --> 51:42.530
但是这个

51:42.530 --> 51:43.530
收费者不用

51:43.530 --> 51:45.530
收费者无所谓

51:46.530 --> 51:47.530
好那么这里就消息

51:47.530 --> 51:48.530
可以发出去了

51:48.530 --> 51:49.530
然后我们来看一下

51:49.530 --> 51:50.530
最终的效果

51:50.530 --> 51:52.530
这边我们发一个消息

51:52.530 --> 51:53.530
一看这边谁可以收到了

51:53.530 --> 51:54.530
那同样的

51:54.530 --> 51:56.530
这边发一个消息

51:56.530 --> 51:57.530
是不是

51:59.530 --> 52:00.530
当然这个系统

52:00.530 --> 52:01.530
做的比较简洁

52:01.530 --> 52:02.530
还有一些小的bug

52:02.530 --> 52:03.530
比方说像这些

52:03.530 --> 52:04.530
这些消息

52:04.530 --> 52:06.530
这个时间我没有刷新

52:06.530 --> 52:07.530
应该是隔一段时间

52:07.530 --> 52:08.530
我稍微把它刷新一下

52:08.530 --> 52:09.530
这个时间

52:09.530 --> 52:10.530
我都没有去做这些事

52:12.900 --> 52:13.900
但是可以看到个

52:13.900 --> 52:14.900
及时聊天的效果就出来了

52:14.900 --> 52:15.900
对吧

52:15.900 --> 52:16.900
然后一个用户

52:16.900 --> 52:17.900
然后再来一个用户

52:20.790 --> 52:21.790
这里是不是又出来了

52:22.790 --> 52:23.790
然后这边发消息

52:24.790 --> 52:25.790
然后这边

52:25.790 --> 52:26.790
也可以看到了

52:26.790 --> 52:27.790
这边发消息

52:28.790 --> 52:29.790
这边可以看到了

52:29.790 --> 52:30.790
OK

52:30.790 --> 52:31.790
这就是一个及时聊天式的

52:31.790 --> 52:32.790
什么一个效果

52:32.790 --> 52:33.790
同一个效果

52:33.790 --> 52:34.790
那么主要是认识

52:34.790 --> 52:35.790
为了收黑色

52:35.790 --> 52:36.790
你看

52:36.790 --> 52:37.790
那么这

52:37.790 --> 52:38.790
虽然做的效果很简单

52:38.790 --> 52:39.790
但是已经能说明问题了

52:39.790 --> 52:40.790
比方说像一些

52:40.790 --> 52:41.790
K线图

52:41.790 --> 52:42.790
这些实施场景

52:42.790 --> 52:43.790
要求比较高的东西

52:43.790 --> 52:44.790
对吧

52:44.790 --> 52:45.790
你就看看这个文档

52:45.790 --> 52:46.790
你连哪里

52:46.790 --> 52:47.790
然后他给你推送

52:47.790 --> 52:48.790
什么样的消息

52:48.790 --> 52:49.790
你监听就行了

52:49.790 --> 52:51.790
比方说推送一个消息

52:51.790 --> 52:52.790
叫做price

52:52.790 --> 52:53.790
比方说

52:53.790 --> 52:56.790
叫做update price

52:56.790 --> 52:57.790
你监听这个消息

52:57.790 --> 52:58.790
对吧

52:58.790 --> 52:59.790
只要触发这个事件

52:59.790 --> 53:00.790
那么说明服务器有新的数据过来了

53:00.790 --> 53:01.790
然后你更新一下

53:01.790 --> 53:03.790
你的天线图就完事了

53:03.790 --> 53:05.790
比方说库存那边也是一样

53:05.790 --> 53:06.790
新的库存来了

53:06.790 --> 53:07.790
你更新一下就完事了

53:07.790 --> 53:08.790
OK

53:08.790 --> 53:09.790
这就是咱们这个websocket

53:09.790 --> 53:10.790
以它的一个第三方库啊

53:10.790 --> 53:11.790
socket.io

