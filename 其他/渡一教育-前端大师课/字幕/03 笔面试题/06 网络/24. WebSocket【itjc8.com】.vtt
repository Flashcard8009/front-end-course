WEBVTT

00:00.370 --> 00:03.370
好 我们来聊一聊这个WebSocket

00:03.370 --> 00:07.370
WebSocket这一块知识呢 我们分为两节课

00:07.370 --> 00:09.370
第一节课呢 我们就这节课

00:09.370 --> 00:12.370
我们聊一聊它的原理和一些理论性的东西

00:12.370 --> 00:16.370
不设计代码 主要是为了解决面试题

00:16.370 --> 00:18.370
当然将来你们在开发过程中

00:18.370 --> 00:21.370
可能会用WebSocket来做一些开发

00:21.370 --> 00:23.370
那么这个时候呢 你就需要写代码了

00:23.370 --> 00:26.370
那如何去写代码呢 我们换另外一节课

00:26.370 --> 00:28.370
来做一个例子 你们就明白了

00:28.370 --> 00:31.370
好 这就可能我们来先聊一聊原理

00:31.370 --> 00:34.370
我们首先呢 来了解一下

00:34.370 --> 00:36.370
没有WebSocket的时代

00:36.370 --> 00:39.370
我们是怎么来处理一些实时场景的

00:39.370 --> 00:42.370
就在实时场景中的旧处理方案

00:42.370 --> 00:45.370
哪些是实时场景的 我下面举了一些例子

00:45.370 --> 00:47.370
比方说像股票的K线图

00:47.370 --> 00:49.370
比如说超股的同学

00:49.370 --> 00:51.370
打开一些股票的分析网站

00:51.370 --> 00:54.370
它是不是有一些像一种K线的图啊

00:54.370 --> 00:57.370
就是一些纳主图 对吧 像这种

00:58.370 --> 01:00.370
像有一些K线图

01:01.370 --> 01:04.370
那么这个K线图呢 我们需要它实时更新

01:04.370 --> 01:06.370
什么意思呢 就股票下个一变动

01:06.370 --> 01:09.370
那么这个K线图呢 要马上能够反映出变化

01:09.370 --> 01:12.370
然后还有一些场景的 比方说像那个

01:12.370 --> 01:14.370
聊天

01:15.370 --> 01:17.370
聊天 那么就是

01:18.370 --> 01:20.370
比如说在网页上购物的时候

01:20.370 --> 01:22.370
跟客户之间的聊天 对吧

01:22.370 --> 01:24.370
那么这是一个实时处理方案

01:24.370 --> 01:26.370
还有就是网页上的警报 重要通知

01:26.370 --> 01:28.370
比方说突然一个地震预警

01:28.370 --> 01:30.370
那么这个时候

01:30.370 --> 01:32.370
分秒必争

01:32.370 --> 01:34.370
需要实时的能够显示到网页上

01:34.370 --> 01:36.370
有个消息提示

01:36.370 --> 01:38.370
然后呢 还要比方说你

01:39.370 --> 01:41.370
定票的时候 一个余作信息

01:41.370 --> 01:43.370
对吧 还有生意多少作为

01:43.370 --> 01:45.370
那么这个时候呢 也需要实时更新

01:45.370 --> 01:47.370
还有一些啊 场景还是蛮多的

01:47.370 --> 01:49.370
比方说有些活动页面

01:49.370 --> 01:52.370
要进行抢购 那么这里呢 有一个库存

01:52.370 --> 01:55.370
库存的数量也需要实时更新

01:55.370 --> 01:57.370
那么这些场景

01:57.370 --> 01:59.370
都有一个特点 就是实时性

01:59.370 --> 02:01.370
这种对实时性有要求的页面

02:01.370 --> 02:03.370
它会带来一些问题

02:03.370 --> 02:05.370
就是怎么来实现

02:05.370 --> 02:07.370
我们来考虑一个聊天场景

02:07.370 --> 02:09.370
比方说两个用户聊天

02:09.370 --> 02:11.370
两个用户聊天呢 可能跟大家想象的不太一样

02:11.370 --> 02:13.370
不是说一个用户

02:13.370 --> 02:15.370
不是说一个用户

02:15.370 --> 02:17.370
他直接把那个消息

02:17.370 --> 02:19.370
就发动给另一个用户了

02:19.370 --> 02:20.370
不是的 我们一般来说

02:20.370 --> 02:22.370
聊天都会经过一个服务器

02:22.370 --> 02:24.370
让服务器来帮我们转发消息

02:24.370 --> 02:27.370
其实能不能两个用户之间互相发

02:27.370 --> 02:29.370
如果说

02:29.370 --> 02:31.370
你们用的是客户端

02:31.370 --> 02:33.370
比方像QQ 微信的理论上是可以的

02:33.370 --> 02:35.370
理论上是可以的

02:35.370 --> 02:36.370
但是中间会经过的

02:36.370 --> 02:38.370
带来很多的问题 没有服务器的话

02:38.370 --> 02:40.370
所以我们一般来说

02:40.370 --> 02:42.370
使用服务器来进行一个中转

02:42.370 --> 02:44.370
我把这个软件打开一下

02:45.370 --> 02:49.060
那么怎么来中转呢 比方说

02:49.060 --> 02:52.060
我们用户1 要给用户2来发一个消息

02:52.060 --> 02:54.060
很简单 我用户1就告诉服务器

02:54.060 --> 02:57.060
说 你帮我给用户2来发个消息

02:57.060 --> 02:59.060
消息的内容就是你好

02:59.060 --> 03:00.060
那么这个请求呢

03:00.060 --> 03:02.060
就可以用一个AGP请求

03:02.060 --> 03:03.060
那么有请求就有响应

03:03.060 --> 03:04.060
服务器响应他说

03:04.060 --> 03:06.060
OK 没问题 马上给你发

03:06.060 --> 03:08.060
这个时候服务器就发的时候

03:08.060 --> 03:09.060
就发现问题了

03:09.060 --> 03:12.060
我怎么把消息给U2呢

03:12.060 --> 03:14.060
他给不了 为什么呢

03:14.060 --> 03:16.060
因为AGP协议

03:16.060 --> 03:19.060
他要求服务器不能主动

03:19.060 --> 03:21.060
服务器只能被动

03:21.060 --> 03:22.060
什么意思呢

03:22.060 --> 03:24.060
就必须U2去请求服务器

03:24.060 --> 03:26.060
服务器才能给他响应

03:26.060 --> 03:27.060
但是问题来了

03:27.060 --> 03:30.060
U2他并不知道有人给他发消息

03:30.060 --> 03:32.060
对吧 他也不知道什么时候

03:32.060 --> 03:34.060
去请求服务器

03:34.060 --> 03:35.060
懂这意思吧

03:35.060 --> 03:37.060
所以这个问题就出现了

03:37.060 --> 03:39.060
U2他没有请求服务器

03:39.060 --> 03:40.060
服务器就不能主动的

03:40.060 --> 03:42.060
把消息发给U2

03:42.060 --> 03:44.060
因此这就是问题

03:44.060 --> 03:45.060
问题的根源呢

03:45.060 --> 03:47.060
就是因为AGP协议是

03:47.060 --> 03:49.060
请求响应模式

03:49.060 --> 03:50.060
请求必须要在前

03:50.060 --> 03:52.060
响应必须在后

03:52.060 --> 03:53.060
这导致了服务器

03:53.060 --> 03:56.060
无法主动的把消息推给U2

03:56.060 --> 03:58.060
那么这个问题肯定要解决

03:58.060 --> 03:59.060
怎么解决呢

03:59.060 --> 04:01.060
我们开发者想了很多的办法

04:01.060 --> 04:03.060
当然最好的办法

04:03.060 --> 04:06.060
就是我们即将要学习的

04:06.060 --> 04:07.060
外面socket

04:07.060 --> 04:10.060
但了解一下过去的这种做法

04:10.060 --> 04:12.060
我们看一下我们前辈们

04:12.060 --> 04:14.060
是怎么来处理这个问题的

04:14.060 --> 04:16.060
也就是我当年在这个

04:16.060 --> 04:19.060
毕业之后处理这些问题的时候

04:19.060 --> 04:20.060
这些一方案

04:20.060 --> 04:22.060
我们是怎么去想办法的

04:22.060 --> 04:23.060
为什么了解这些呢

04:23.060 --> 04:24.060
这是一个方面

04:24.060 --> 04:26.060
另一个方面是

04:26.060 --> 04:28.060
面试有可能会问到

04:28.060 --> 04:30.060
所以说我们这里看一下

04:30.060 --> 04:31.060
过去什么解决的

04:31.060 --> 04:33.060
过去主要有两种方法

04:33.060 --> 04:34.060
来解决问题

04:34.060 --> 04:35.060
其实真的解决方案

04:35.060 --> 04:36.060
还不止两种

04:36.060 --> 04:37.060
但两制的两种是

04:37.060 --> 04:38.060
兼容性最好

04:38.060 --> 04:39.060
而且比较常见的

04:39.060 --> 04:41.060
第一种叫做短轮循

04:41.060 --> 04:42.060
短轮循就是一种

04:42.060 --> 04:44.060
以话牢式的方式

04:44.060 --> 04:45.060
不停的比比

04:45.060 --> 04:46.060
什么意思呢

04:46.060 --> 04:47.060
就是客户端

04:47.060 --> 04:48.060
每隔一小段时间

04:48.060 --> 04:50.060
就像服务器去寻求一时

04:50.060 --> 04:51.060
对吧

04:51.060 --> 04:53.060
因为客户端这边

04:53.060 --> 04:54.060
他并不知道有没有寻求

04:54.060 --> 04:55.060
他就不断的寻求

04:55.060 --> 04:56.060
不断的寻求

04:56.060 --> 04:57.060
有没有寻求

04:57.060 --> 04:58.060
有没有寻求

04:58.060 --> 04:59.060
用这种方式

04:59.060 --> 05:00.060
像服务器寻求

05:00.060 --> 05:01.060
下面一张图

05:01.060 --> 05:02.060
可以看得很清楚

05:02.060 --> 05:03.060
这里就看

05:03.060 --> 05:04.060
难耐惠惠有很多次

05:04.060 --> 05:05.060
对吧

05:05.060 --> 05:06.060
有没有寻求

05:06.060 --> 05:07.060
没有

05:07.060 --> 05:08.060
服务器牢算没有

05:08.060 --> 05:09.060
其实这里还有

05:09.060 --> 05:10.060
这就是一次

05:10.060 --> 05:13.060
ATB寻求和享用

05:13.060 --> 05:14.060
对不对

05:14.060 --> 05:15.060
那么当然

05:15.060 --> 05:16.060
我们伴随着

05:16.060 --> 05:17.060
我们ATB寻求和享用

05:17.060 --> 05:19.060
是不是有个三次握手

05:19.060 --> 05:20.060
对吧

05:20.060 --> 05:21.060
因为TCP寻意的

05:21.060 --> 05:22.060
三次握手

05:22.060 --> 05:23.060
然后四次挥手

05:23.060 --> 05:25.060
就结束了

05:25.060 --> 05:26.060
好过了一段时间

05:26.060 --> 05:27.060
过后

05:27.060 --> 05:28.060
这个时间都可以设置的

05:28.060 --> 05:29.060
对吧

05:29.060 --> 05:30.060
可以用set interval

05:30.060 --> 05:32.060
是不是可以设置一个技时器

05:32.060 --> 05:33.060
每隔一段时间

05:33.060 --> 05:34.060
发生一个RJX寻求

05:34.060 --> 05:36.060
然后过了一段时间

05:36.060 --> 05:37.060
有没有新消息

05:37.060 --> 05:38.060
又没有

05:38.060 --> 05:39.060
然后再过一段时间

05:39.060 --> 05:40.060
有没有新消息

05:40.060 --> 05:41.060
发现有了

05:41.060 --> 05:43.060
他就把新消息推给他

05:43.060 --> 05:44.060
然后再过一段时间

05:44.060 --> 05:45.060
有新消息吗

05:45.060 --> 05:46.060
没有

05:47.060 --> 05:49.060
就是用这种方式来进行处理的

05:49.060 --> 05:50.060
当然这种方式

05:50.060 --> 05:51.060
处理的

05:51.060 --> 05:52.060
能不能实现

05:52.060 --> 05:53.060
它肯定可以实现

05:53.060 --> 05:54.060
但是

05:55.060 --> 05:57.060
它可以看出有很多问题

05:57.060 --> 05:58.060
首先

05:58.060 --> 06:00.060
这里边就有很多次的TCP

06:00.060 --> 06:01.060
的三次握手

06:01.060 --> 06:02.060
和四次挥手

06:02.060 --> 06:03.060
对吧

06:03.060 --> 06:04.060
好的寻求是没有意义的

06:05.060 --> 06:06.060
不停地问

06:06.060 --> 06:07.060
为了别人烦

06:07.060 --> 06:09.060
所以实施论寻

06:09.060 --> 06:11.060
它的好处是非常简单

06:11.060 --> 06:12.060
这个模型特别简单

06:12.060 --> 06:13.060
你设置一个定时器

06:13.060 --> 06:15.060
不断地发动寻求就行了

06:15.060 --> 06:16.060
那这种方案

06:16.060 --> 06:17.060
缺陷是非常明显的

06:17.060 --> 06:18.060
第一个缺陷

06:18.060 --> 06:20.060
这会产生大量无意义的寻求

06:20.060 --> 06:21.060
第二个缺陷

06:21.060 --> 06:23.060
是会频繁地打开关闭连接

06:23.060 --> 06:24.060
对吧

06:24.060 --> 06:25.060
那个TCP

06:25.060 --> 06:26.060
三次握手

06:26.060 --> 06:27.060
四次挥手

06:27.060 --> 06:28.060
不断地进行

06:28.060 --> 06:29.060
但是很多时候

06:29.060 --> 06:30.060
连接是

06:30.060 --> 06:31.060
发的都是毫无意义的消息

06:31.060 --> 06:33.060
其实还有一个问题就是

06:33.060 --> 06:35.060
实施性并不高

06:37.060 --> 06:39.060
像那种画牢式的并不高

06:39.060 --> 06:40.060
因为关键就是

06:40.060 --> 06:42.060
这段时间你要定多久

06:42.060 --> 06:43.060
你定的太短

06:43.060 --> 06:45.060
那个效率浪费太严重了

06:45.060 --> 06:47.060
比如说你定个一秒钟

06:47.060 --> 06:48.060
那服务器太烦了

06:48.060 --> 06:49.060
对吧

06:49.060 --> 06:50.060
一天打开这个网页

06:50.060 --> 06:51.060
像一些偏线图的网页

06:51.060 --> 06:52.060
你可能一打开

06:52.060 --> 06:53.060
就说24个小时

06:53.060 --> 06:54.060
或者8个小时

06:54.060 --> 06:55.060
那服务器太烦了

06:55.060 --> 06:56.060
8个小时

06:56.060 --> 06:57.060
每一秒钟为一次

06:57.060 --> 06:58.060
那服务器太烦了

06:58.060 --> 06:59.060
占用服务器资源

06:59.060 --> 07:01.060
定的太长吧

07:01.060 --> 07:03.060
实施性的要求就有问题了

07:03.060 --> 07:04.060
比如说你定一分钟

07:04.060 --> 07:05.060
那这一分钟内

07:05.060 --> 07:06.060
来到新消息就不知道了

07:06.060 --> 07:07.060
你要一分钟之后

07:07.060 --> 07:08.060
你才能拿到新消息

07:08.060 --> 07:09.060
这一个

07:09.060 --> 07:11.060
是一个很麻烦的问题

07:11.060 --> 07:12.060
那怎么解决呢

07:13.060 --> 07:14.060
这是开发者

07:14.060 --> 07:15.060
充分发挥智慧

07:15.060 --> 07:16.060
条件有限

07:16.060 --> 07:17.060
那我们就想办法

07:17.060 --> 07:21.060
于是通过长文讯

07:21.060 --> 07:24.060
来解决短文讯的问题

07:24.060 --> 07:26.060
那他长文讯是怎么回事

07:26.060 --> 07:27.060
他这样

07:27.060 --> 07:29.060
客户端这边呢

07:29.060 --> 07:31.060
他直接一开始

07:31.060 --> 07:33.060
就发送一个请求到服务器

07:33.060 --> 07:34.060
问一下有没有新消息

07:34.060 --> 07:35.060
但是这一次

07:35.060 --> 07:36.060
服务器呢

07:36.060 --> 07:37.060
他没有新消息

07:37.060 --> 07:38.060
没有新消息

07:38.060 --> 07:39.060
他不给他相应

07:39.060 --> 07:40.060
你看上面

07:40.060 --> 07:41.060
是没有新消息

07:41.060 --> 07:42.060
就告诉他

07:42.060 --> 07:43.060
对吧

07:43.060 --> 07:44.060
在这里不相应

07:44.060 --> 07:45.060
等

07:45.060 --> 07:47.060
服务器等到有消息之后

07:47.060 --> 07:49.060
然后再相应

07:49.060 --> 07:51.060
把消息内容相应过去

07:51.060 --> 07:52.060
好

07:52.060 --> 07:53.060
相应客户端之后

07:53.060 --> 07:54.060
客户端马上立即就发起

07:54.060 --> 07:55.060
下一次请求

07:55.060 --> 07:57.060
又问他有没有新消息

07:57.060 --> 07:58.060
那么这个时候

07:58.060 --> 07:59.060
服务器没有消息

07:59.060 --> 08:00.060
就又等

08:00.060 --> 08:01.060
等到他有消息之后

08:01.060 --> 08:03.060
又可来相应过去

08:03.060 --> 08:05.060
反复了进行这么一个过程

08:05.060 --> 08:07.060
那么有了这种模式之后

08:07.060 --> 08:08.060
你会发现

08:08.060 --> 08:09.060
请求和相应的数量

08:09.060 --> 08:10.060
是不是减少了

08:10.060 --> 08:11.060
特别特别多

08:11.060 --> 08:12.060
不是话劳式的

08:12.060 --> 08:14.060
就有点像你去

08:14.060 --> 08:17.060
一些银行

08:17.060 --> 08:19.060
去咨询一些问题

08:19.060 --> 08:20.060
他正在忙的时候

08:20.060 --> 08:21.060
你问他你都不理

08:21.060 --> 08:23.060
等他忙完了之后

08:23.060 --> 08:24.060
你就在那等着

08:24.060 --> 08:26.060
就这么一个模式

08:26.060 --> 08:27.060
这种模式

08:27.060 --> 08:28.060
好处就在于

08:28.060 --> 08:29.060
他这个请求

08:29.060 --> 08:30.060
响应的次数

08:30.060 --> 08:32.060
就变得很少很少了

08:32.060 --> 08:33.060
而且他没有无意义的

08:33.060 --> 08:34.060
请求和相应

08:34.060 --> 08:35.060
都是有意义的

08:35.060 --> 08:37.060
服务器有了消息之后

08:37.060 --> 08:38.060
才给你相应

08:38.060 --> 08:39.060
但是这个长轮群

08:39.060 --> 08:40.060
看上去还不错

08:40.060 --> 08:42.060
但仍然存在问题

08:42.060 --> 08:43.060
第一个问题就是

08:43.060 --> 08:44.060
客户端长时间

08:44.060 --> 08:46.060
收不到服务器相应

08:46.060 --> 08:47.060
你看有可能这个

08:47.060 --> 08:49.060
你发了一个有新消息吗

08:49.060 --> 08:51.060
可能今天一天都没有新消息

08:51.060 --> 08:52.060
或者是5个小时内

08:52.060 --> 08:53.060
都没有新消息

08:53.060 --> 08:54.060
那5个小时之后

08:54.060 --> 08:56.060
才给你发过来

08:56.060 --> 08:57.060
那么5个小时

08:57.060 --> 08:58.060
你想一想

08:58.060 --> 08:59.060
客户端那边早就

08:59.060 --> 09:00.060
超时了

09:00.060 --> 09:01.060
对不对

09:01.060 --> 09:02.060
所以阿迪克事情

09:02.060 --> 09:03.060
就可以设置

09:03.060 --> 09:04.060
还是还可以设置

09:04.060 --> 09:05.060
超时时间

09:05.060 --> 09:06.060
等待时间

09:06.060 --> 09:07.060
他就超时了

09:07.060 --> 09:08.060
那么超时之后

09:08.060 --> 09:09.060
他的浏览器

09:09.060 --> 09:11.060
他就会主动的断开

09:11.060 --> 09:12.060
tcp连接

09:12.060 --> 09:13.060
把连接断开

09:13.060 --> 09:14.060
比方说

09:14.060 --> 09:15.060
这里等了5个小时

09:15.060 --> 09:16.060
但他10分钟的时候

09:16.060 --> 09:17.060
其实没有到10分钟

09:17.060 --> 09:18.060
比方说

09:18.060 --> 09:19.060
我们设置有时间

09:19.060 --> 09:20.060
10分钟

09:20.060 --> 09:21.060
10分钟之后

09:21.060 --> 09:23.060
客户端那边就超时了

09:23.060 --> 09:24.060
这里超时了

09:24.060 --> 09:25.060
连接都被断开了

09:25.060 --> 09:27.060
那后面还能相应吗

09:27.060 --> 09:28.060
连接都没了

09:28.060 --> 09:29.060
后面就不可能存在相应了

09:29.060 --> 09:30.060
那么这种情况

09:30.060 --> 09:31.060
怎么处理呢

09:31.060 --> 09:32.060
其实也能处理

09:32.060 --> 09:33.060
当我们在客户端

09:33.060 --> 09:36.060
发现超时之后

09:36.060 --> 09:38.060
然后立即又会重新来一次

09:38.060 --> 09:39.060
这个流程

09:39.060 --> 09:40.060
又重新发一次琴球

09:40.060 --> 09:41.060
有新消息吗

09:41.060 --> 09:42.060
就之前那个琴球

09:42.060 --> 09:43.060
就没意义了

09:43.060 --> 09:45.060
那么这一次重新发琴球

09:45.060 --> 09:46.060
然后浮器又等

09:46.060 --> 09:49.060
这一次琴球又超时了

09:49.060 --> 09:51.060
我们又重新发琴球

09:51.060 --> 09:52.060
是这么个意思

09:52.060 --> 09:53.060
就不是用计时器

09:53.060 --> 09:55.060
是等待一个机会去发琴球

09:55.060 --> 09:57.060
要么就是浮器响应之后

09:57.060 --> 09:58.060
我发琴球

09:58.060 --> 09:59.060
要么就是超时之后

09:59.060 --> 10:00.060
我发琴球

10:00.060 --> 10:01.060
是这么一回事

10:01.060 --> 10:02.060
当然这样子做

10:02.060 --> 10:03.060
肯定你短连旋

10:03.060 --> 10:04.060
好得多

10:04.060 --> 10:05.060
这种情况

10:05.060 --> 10:06.060
其实可以处理

10:06.060 --> 10:07.060
就是说

10:07.060 --> 10:08.060
可能那个超时

10:08.060 --> 10:10.060
因为超时而结束的时候

10:10.060 --> 10:11.060
会抛出一个异常

10:11.060 --> 10:12.060
那么这个时候

10:12.060 --> 10:13.060
就重新发送到浮器

10:13.060 --> 10:14.060
当然这样子的话

10:14.060 --> 10:15.060
也会导致了

10:15.060 --> 10:17.060
有一些琴球没有意义

10:17.060 --> 10:18.060
比方说

10:18.060 --> 10:19.060
刚才我们说了

10:19.060 --> 10:20.060
在这里超时了

10:20.060 --> 10:21.060
你重新发出琴球

10:21.060 --> 10:22.060
说明了

10:22.060 --> 10:23.060
上一支琴球是不是毫无意义的

10:23.060 --> 10:24.060
对吧

10:24.060 --> 10:25.060
它没有得到什么

10:25.060 --> 10:26.060
内有实时性的消息

10:26.060 --> 10:28.060
但是总之比短连旋

10:28.060 --> 10:29.060
好得多

10:29.060 --> 10:30.060
这样子的

10:30.060 --> 10:31.060
比方超时时间

10:31.060 --> 10:32.060
10分钟发一次

10:32.060 --> 10:33.060
10分钟发一次

10:33.060 --> 10:34.060
而且实时性也比较高

10:34.060 --> 10:35.060
对吧

10:35.060 --> 10:36.060
实时性还是比较高的

10:36.060 --> 10:37.060
以前过去了

10:37.060 --> 10:39.060
使用的最多的就是长轮旋

10:39.060 --> 10:41.060
这是一个问题

10:41.060 --> 10:42.060
还有一个问题

10:42.060 --> 10:43.060
就是由于扣端

10:43.060 --> 10:45.060
可能过早的琴球的浮器

10:45.060 --> 10:47.060
浮器又没有新消息

10:47.060 --> 10:48.060
那么这个时候

10:48.060 --> 10:50.060
浮器不得不挂起这个琴球

10:50.060 --> 10:51.060
一直等

10:51.060 --> 10:53.060
等到新消息出现过后

10:53.060 --> 10:54.060
再响应你

10:54.060 --> 10:55.060
那么挂起这个琴球

10:55.060 --> 10:57.060
浮器是要占用资源的

10:57.060 --> 10:59.060
那么这个资源占用

10:59.060 --> 11:02.060
如果说用户的数量多了

11:02.060 --> 11:04.060
那这个资源占用还是挺恐怖的

11:04.060 --> 11:07.060
但以前也确实没有什么好的办法

11:07.060 --> 11:09.060
这就是我们过去的

11:09.060 --> 11:11.060
养种方案

11:11.060 --> 11:12.060
那么我们来看一下

11:12.060 --> 11:13.060
WebSocket

11:13.060 --> 11:14.060
它是怎么解决的

11:14.060 --> 11:17.060
它就从根上来解决这个问题了

11:17.060 --> 11:19.060
我们产生这个问题的原因是什么呢

11:19.060 --> 11:20.060
原因就是浮器

11:20.060 --> 11:22.060
没法主动发消息给它

11:22.060 --> 11:23.060
对吧

11:23.060 --> 11:24.060
WebSocket

11:24.060 --> 11:26.060
这个协议出现之后

11:26.060 --> 11:29.060
浮器就能主动发消息给用户了

11:29.060 --> 11:32.060
其实我们学过那个TCP协议

11:32.060 --> 11:34.060
在TCP协议里边

11:34.060 --> 11:37.060
它并不要求就通信的两方啊

11:37.060 --> 11:39.060
只要建立好连接之后

11:39.060 --> 11:41.060
你随意的发消息

11:41.060 --> 11:43.060
不是说我必须要先发

11:43.060 --> 11:44.060
我必须要后发

11:44.060 --> 11:45.060
我发了不后你必须要回应

11:45.060 --> 11:46.060
没有这个要求

11:46.060 --> 11:47.060
随意发

11:47.060 --> 11:48.060
随意回应

11:48.060 --> 11:49.060
随意发

11:49.060 --> 11:50.060
两方都是

11:50.060 --> 11:52.060
所以它本来被没有限制的

11:52.060 --> 11:53.060
为什么后来会出现这个

11:53.060 --> 11:54.060
请求响应模式

11:54.060 --> 11:55.060
然后限制它的

11:55.060 --> 11:57.060
是因为agtp协议

11:57.060 --> 11:58.060
它不让你随意发

11:58.060 --> 12:00.060
它必须要让你先请求响应

12:00.060 --> 12:02.060
CTP协议搞的事情

12:02.060 --> 12:04.060
所以呢

12:04.060 --> 12:06.060
我们要实现那个浮器

12:06.060 --> 12:08.060
主动发动消息

12:08.060 --> 12:09.060
那么我们就需要

12:09.060 --> 12:11.060
重新定一个协议

12:11.060 --> 12:13.060
叫做WebSocket

12:13.060 --> 12:15.060
那么这个从协议上

12:15.060 --> 12:16.060
附影了浮器

12:16.060 --> 12:18.060
主动推动消息的能力

12:18.060 --> 12:19.060
我们来看一下它的图画

12:19.060 --> 12:21.060
基本原理的图像就是这样子

12:21.060 --> 12:24.060
我们每一次连接也好

12:24.060 --> 12:26.060
那么它也是使用TCP连接

12:26.060 --> 12:28.060
所以我们每一次连接

12:28.060 --> 12:31.060
其实都是要建立TCP连接通道的

12:31.060 --> 12:33.060
所以说最开始肯定要

12:33.060 --> 12:34.060
三次握手是指挥手

12:34.060 --> 12:35.060
这是毫无疑问的

12:35.060 --> 12:37.060
从这个图楼可以看出

12:37.060 --> 12:39.060
WebSocket它并没有

12:39.060 --> 12:40.060
逃出TCP

12:40.060 --> 12:42.060
我们如果说画一张

12:42.060 --> 12:44.060
结构图的话

12:44.060 --> 12:45.060
这个是应用程

12:45.060 --> 12:47.060
这是传输程

12:47.060 --> 12:48.060
我们过去了

12:48.060 --> 12:50.060
这一块使用的是什么

12:50.060 --> 12:52.060
agtp对吧

12:52.060 --> 12:54.060
agtp

12:55.060 --> 12:58.060
然后这里使用的是tcp

13:02.440 --> 13:03.440
那么现在

13:03.440 --> 13:05.440
有了WebSocket过后

13:05.440 --> 13:06.440
你将来就是把这个东西

13:06.440 --> 13:09.440
变成了WebSocket

13:09.440 --> 13:10.440
变成了这个

13:10.440 --> 13:11.440
但是它跟agtp

13:11.440 --> 13:12.440
有没有关系

13:12.440 --> 13:13.440
有一点关系

13:13.440 --> 13:14.440
什么关系

13:14.440 --> 13:16.440
马上就说到了

13:16.440 --> 13:17.440
好 接下来我们下看

13:17.440 --> 13:19.440
那么连接建立之后

13:19.440 --> 13:21.440
现在还有一个协议

13:21.440 --> 13:22.440
因为它在上层

13:22.440 --> 13:23.440
还有一个协议

13:23.440 --> 13:24.440
就是WebSocket的握手

13:24.440 --> 13:26.440
你看这个绿色区域

13:26.440 --> 13:28.440
这个绿色区域

13:28.440 --> 13:32.440
就是tcp连接通道

13:32.440 --> 13:33.440
已经建立了

13:33.440 --> 13:34.440
然后建立过后

13:34.440 --> 13:35.440
它马上就会进行一次

13:35.440 --> 13:37.440
WebSocket的握手

13:37.440 --> 13:38.440
所以说有的时候问你

13:38.440 --> 13:40.440
WebSocket的握手

13:40.440 --> 13:42.440
跟tcp握手有什么关系

13:42.440 --> 13:43.440
如果说问到这个问题

13:43.440 --> 13:44.440
他们是不是一个东西

13:44.440 --> 13:45.440
完全不是

13:45.440 --> 13:47.440
WebSocket的握手

13:47.440 --> 13:49.440
是在tcp3次握手之后

13:49.440 --> 13:51.440
然后我们来进行的握手

13:51.440 --> 13:53.440
好 完成WebSocket的握手之后

13:53.440 --> 13:56.440
握手之后

13:56.440 --> 13:57.440
这个连接

13:57.440 --> 14:00.440
这才算是真正的通道

14:00.440 --> 14:01.440
才算是畅通了

14:01.440 --> 14:02.440
那么这个时候

14:02.440 --> 14:05.440
服务器可以任意的发消息给客户端

14:05.440 --> 14:06.440
客户端也可以任意的

14:06.440 --> 14:07.440
发消息给服务器

14:07.440 --> 14:09.440
双方互不影响

14:09.440 --> 14:11.440
那么我们把这种模式

14:11.440 --> 14:14.440
称之为全双公通信

14:14.440 --> 14:15.440
什么叫双公通信

14:15.440 --> 14:17.440
就是你可以给我发

14:17.440 --> 14:19.440
我也可以给你发

14:19.440 --> 14:20.440
我不用等到

14:20.440 --> 14:22.440
什么时候才能给你发

14:22.440 --> 14:23.440
我随便

14:23.440 --> 14:25.440
任何时候可以给你发

14:25.440 --> 14:27.440
你也是任何时候可以给我发

14:27.440 --> 14:28.440
我给你发的话

14:28.440 --> 14:29.440
你不用给我回应

14:29.440 --> 14:31.440
也可以给我回应随便

14:31.440 --> 14:34.440
双方的发送消息是互不干扰

14:34.440 --> 14:35.440
非常自由的

14:35.440 --> 14:38.440
这就是双公通信

14:38.440 --> 14:39.440
那么我们的ADDP呢

14:39.440 --> 14:41.440
实际上是一个半双公

14:41.440 --> 14:43.440
是一个半双公

14:43.440 --> 14:45.440
客户端可以请求服务器

14:45.440 --> 14:46.440
也可以收到服务器的奖励

14:46.440 --> 14:50.440
但是必须要有一个先后顺序

14:50.440 --> 14:51.440
它不能随意

14:51.440 --> 14:53.440
所以我就会认为它是半双公

14:53.440 --> 14:54.440
那么为不说可以说是一个

14:54.440 --> 14:56.440
全双公随意发

14:56.440 --> 14:57.440
所以双独可以看出

14:57.440 --> 14:58.440
我们这里呢

14:58.440 --> 14:59.440
为不说可以怎么是建立在

14:59.440 --> 15:01.440
TCP协议之上的

15:01.440 --> 15:03.440
利用的是TCP全双公通信的能力

15:03.440 --> 15:04.440
像这些概念性的东西

15:04.440 --> 15:05.440
听上去有些同学

15:05.440 --> 15:06.440
可能会觉得模糊

15:06.440 --> 15:08.440
那模糊是正常的

15:08.440 --> 15:10.440
你要不模糊

15:10.440 --> 15:12.440
那你在做什么事呢

15:12.440 --> 15:14.440
你在把计算机网络

15:14.440 --> 15:16.440
这个非常厚重的课程

15:16.440 --> 15:18.440
得好好看一下

15:18.440 --> 15:19.440
我说的是计算机网络

15:19.440 --> 15:22.440
不是咱们前端的网络课程

15:22.440 --> 15:25.440
因为网络是一个一门考研课

15:25.440 --> 15:27.440
这一块放了这来吧

15:27.440 --> 15:29.440
反正以后你再说

15:29.440 --> 15:31.440
跟就业没什么关系

15:31.440 --> 15:32.440
第二个

15:32.440 --> 15:33.440
我们使用WebSocket手段

15:33.440 --> 15:35.440
会经历两个阶段

15:35.440 --> 15:36.440
一个是握手阶段

15:36.440 --> 15:37.440
一个是通信阶段

15:37.440 --> 15:38.440
先要握手

15:38.440 --> 15:41.440
才能通信

15:41.440 --> 15:42.440
WebSocket的这种方式

15:42.440 --> 15:43.440
一旦出现之后

15:43.440 --> 15:44.440
当然肯定是

15:44.440 --> 15:45.440
优于短农群和长农群

15:45.440 --> 15:47.440
都毫无疑问的

15:47.440 --> 15:49.440
它仍然是有缺点的

15:49.440 --> 15:51.440
第一个 监容性

15:51.440 --> 15:52.440
因为WebSocket是

15:52.440 --> 15:54.440
ATM5的新增内容

15:54.440 --> 15:55.440
它是个协议

15:55.440 --> 15:56.440
它的协议完整内容

15:56.440 --> 15:58.440
在这税上面

15:58.440 --> 16:00.440
你可以打开看一下

16:00.440 --> 16:04.440
RFC65

16:04.440 --> 16:06.440
有兴趣的东西去了解吧

16:06.440 --> 16:07.440
英文不错的东西去了解

16:07.440 --> 16:09.440
我都没看完这个问题

16:09.440 --> 16:10.440
我都把它核心的内容

16:10.440 --> 16:14.520
看了一下

16:14.520 --> 16:16.520
它还有是有些关系

16:16.520 --> 16:17.520
第一个就是监容性

16:17.520 --> 16:20.520
ATM5新增的协议

16:20.520 --> 16:22.520
所以说一些股东的版本

16:22.520 --> 16:24.520
ATM5好像是13年

16:24.520 --> 16:25.520
13年还是12年

16:25.520 --> 16:26.520
我都忘了

16:26.520 --> 16:28.520
因此也再找版本的浏览器

16:28.520 --> 16:30.520
它就并不支持

16:30.520 --> 16:32.520
然后呢

16:32.520 --> 16:33.520
第二个问题

16:33.520 --> 16:35.520
就是维持TCP链接

16:35.520 --> 16:37.520
是需要耗费资源的

16:37.520 --> 16:38.520
就是绿色区域

16:38.520 --> 16:39.520
我们要维持这个链接

16:39.520 --> 16:40.520
我们之前讲

16:40.520 --> 16:41.520
那个TCP协议的时候

16:41.520 --> 16:42.520
是不是说

16:42.520 --> 16:44.520
那个链接是什么东西

16:44.520 --> 16:45.520
链接通道

16:45.520 --> 16:46.520
链接其实就是服务器

16:46.520 --> 16:47.520
空间

16:47.520 --> 16:50.520
客户端也开了一块内存空间

16:50.520 --> 16:51.520
其实这个资源

16:51.520 --> 16:53.520
就一直要被占用的

16:53.520 --> 16:55.520
那这个确实是没办法的

16:55.520 --> 16:57.520
对那些消息量比较少

16:57.520 --> 16:58.520
一天说不了几句话的

16:58.520 --> 16:59.520
那么维持TCP链接

16:59.520 --> 17:01.520
确实会造成资源的浪费

17:01.520 --> 17:02.520
除了说这个Websocket

17:02.520 --> 17:03.520
也不是啥都好

17:03.520 --> 17:04.520
甚至我看到

17:04.520 --> 17:05.520
网上有人说

17:05.520 --> 17:06.520
有了Websocket

17:06.520 --> 17:07.520
这么自由的通信之后

17:07.520 --> 17:09.520
阿迦克斯就不需要了

17:09.520 --> 17:11.520
你还需要阿迦克斯呢

17:11.520 --> 17:12.520
打开页面过后

17:12.520 --> 17:13.520
马上跟服务器

17:13.520 --> 17:14.520
建立一个Websocket

17:14.520 --> 17:15.520
握手之后

17:15.520 --> 17:16.520
这是随意发消息的

17:16.520 --> 17:18.520
就不存在请求响应的

17:18.520 --> 17:19.520
没有请求响应的

17:19.520 --> 17:20.520
我给你发一个

17:20.520 --> 17:21.520
随便给你发

17:21.520 --> 17:22.520
服务器

17:22.520 --> 17:23.520
希望给你消息的时候

17:23.520 --> 17:24.520
随便给你发

17:24.520 --> 17:25.520
对吧

17:25.520 --> 17:26.520
还需要阿迦克斯吗

17:26.520 --> 17:27.520
不需要

17:27.520 --> 17:28.520
但是呢

17:28.520 --> 17:29.520
其实上不是的

17:29.520 --> 17:30.520
阿迦克斯呢

17:30.520 --> 17:31.520
在有很多场景里边

17:31.520 --> 17:33.520
还是优于Websocket

17:33.520 --> 17:34.520
是吧

17:34.520 --> 17:35.520
为什么呢

17:35.520 --> 17:36.520
因为比方说

17:36.520 --> 17:37.520
我们页面上一共就

17:37.520 --> 17:38.520
有一些数据

17:38.520 --> 17:39.520
需要从服务器获取

17:39.520 --> 17:41.520
比方说就10个数据吧

17:41.520 --> 17:43.520
那我阿迦克斯

17:43.520 --> 17:45.520
就请求10次就完事了

17:45.520 --> 17:46.520
对不对

17:46.520 --> 17:47.520
我们需要等到

17:47.520 --> 17:48.520
用户操作的时候

17:48.520 --> 17:49.520
比方说这些请求

17:49.520 --> 17:50.520
还是要等到

17:50.520 --> 17:51.520
用户操作的时候

17:51.520 --> 17:52.520
比方说点到一个按钮

17:52.520 --> 17:53.520
我们就请求

17:53.520 --> 17:54.520
一些服务器

17:54.520 --> 17:56.520
那个时候临时发起

17:56.520 --> 17:57.520
而Websocket

17:57.520 --> 17:58.520
你要用这种方式

17:58.520 --> 17:59.520
来做的话

17:59.520 --> 18:00.520
那你就得一开始

18:00.520 --> 18:01.520
去建立这个

18:01.520 --> 18:02.520
Sony的连接

18:02.520 --> 18:03.520
对吧

18:03.520 --> 18:04.520
因为一开始

18:04.520 --> 18:05.520
有一些数据要传输

18:05.520 --> 18:06.520
然后用户的

18:06.520 --> 18:07.520
点击按钮之后

18:07.520 --> 18:08.520
有一些数据要传输

18:08.520 --> 18:09.520
那这个连接

18:09.520 --> 18:10.520
要建立时间

18:10.520 --> 18:11.520
就维持的时间

18:11.520 --> 18:13.900
太长了

18:13.900 --> 18:15.900
如果说用阿迦克斯的话

18:15.900 --> 18:16.900
那么你只是需要的时候

18:16.900 --> 18:17.900
再去请求相应

18:17.900 --> 18:19.900
所以说他并不能取代阿迦克斯

18:24.900 --> 18:25.900
然后呢

18:25.900 --> 18:26.900
如果说有一些页面

18:26.900 --> 18:28.900
像一些实施处理场景

18:28.900 --> 18:29.900
比较丰富的页面

18:29.900 --> 18:30.900
像什么辽天

18:30.900 --> 18:32.900
股票的KCM对吧

18:33.900 --> 18:35.900
像这些页面呢

18:35.900 --> 18:37.900
实施性要求比较高

18:37.900 --> 18:39.900
它里边肯定要使用

18:39.900 --> 18:40.900
Websocket

18:40.900 --> 18:41.900
那么Websocket

18:41.900 --> 18:43.900
是要占用TCP连接的

18:43.900 --> 18:45.900
说这里是有一个方案

18:45.900 --> 18:47.900
如果说这个页面

18:47.900 --> 18:49.900
必须要使用Websocket

18:49.900 --> 18:50.900
那么我就

18:50.900 --> 18:51.900
如果说要为了对它

18:51.900 --> 18:52.900
进行优化的话

18:52.900 --> 18:53.900
我这个页面呢

18:53.900 --> 18:55.900
有一种比较狠的方式

18:55.900 --> 18:57.900
就是直接可以放弃阿迦克斯

18:57.900 --> 18:59.900
这个页面我就不用阿迦克斯了

18:59.900 --> 19:01.900
都用Websocket的进行通信

19:01.900 --> 19:03.900
但是呢

19:03.900 --> 19:04.900
这样会带来程序

19:04.900 --> 19:05.900
设计上的一些问题

19:05.900 --> 19:06.900
需要出来缺分

19:06.900 --> 19:07.900
什么意思

19:07.900 --> 19:08.900
就你这个页面

19:08.900 --> 19:09.900
也跑不掉了

19:09.900 --> 19:11.900
你这里一边是有聊天的

19:11.900 --> 19:12.900
那跑不掉了

19:12.900 --> 19:13.900
你肯定要用Websocket

19:13.900 --> 19:15.900
那你一用Websocket

19:15.900 --> 19:17.900
是不是这里会占用

19:17.900 --> 19:19.900
这个TCP通道

19:19.900 --> 19:20.900
一直会这个

19:20.900 --> 19:21.900
维持

19:21.900 --> 19:22.900
所以这个效率

19:22.900 --> 19:23.900
你占用了这个TCP

19:23.900 --> 19:24.900
有这个TCP通道

19:24.900 --> 19:26.900
但是呢你发的消息很少

19:26.900 --> 19:28.900
这个其实有点浪费

19:28.900 --> 19:30.900
那么为了怎么样补浪费呢

19:30.900 --> 19:32.900
我其他的ATP请求

19:32.900 --> 19:34.900
以前我们用阿迦克斯写的

19:34.900 --> 19:36.900
ATP请求我就不弄了

19:36.900 --> 19:37.900
我把这些请求

19:37.900 --> 19:38.900
放到哪呢

19:38.900 --> 19:40.900
放到这个Websocket

19:40.900 --> 19:41.900
来进行发送

19:41.900 --> 19:43.900
而服务系这边进行响应

19:43.900 --> 19:45.900
这样子可以避免

19:45.900 --> 19:46.900
就可以少一些

19:46.900 --> 19:48.900
之前的ATP对吧

19:48.900 --> 19:50.900
把ATP这些请求的一资源呢

19:50.900 --> 19:51.900
使用Websocket去完成

19:51.900 --> 19:53.900
来充分利用这个TCP连接

19:53.900 --> 19:54.900
是这么一个意思

19:54.900 --> 19:55.900
但这样子

19:55.900 --> 19:56.900
为什么会带来

19:56.900 --> 19:57.900
程序设计的问题呢

19:57.900 --> 19:59.900
因为你使用Websocket

19:59.900 --> 20:01.900
来发送消息和接收消息

20:01.900 --> 20:02.900
它的代码

20:02.900 --> 20:03.900
结构

20:03.900 --> 20:04.900
原地

20:04.900 --> 20:06.900
跟那个ATP完全不一样

20:06.900 --> 20:08.900
那是完全不一样的

20:09.900 --> 20:10.900
那这不一样的话

20:10.900 --> 20:11.900
就会导致

20:11.900 --> 20:12.900
比方说你要请求

20:12.900 --> 20:13.900
一个新闻列表

20:13.900 --> 20:14.900
这个页面

20:14.900 --> 20:15.900
同时有聊天

20:15.900 --> 20:16.900
有实事聊天

20:16.900 --> 20:18.900
那么在这个页面

20:18.900 --> 20:20.900
你就必须要

20:20.900 --> 20:22.900
使用Websocket去改代码

20:22.900 --> 20:24.900
之前封装好的

20:24.900 --> 20:26.900
统一的请求的方法

20:26.900 --> 20:28.900
请求新闻列表的方法

20:28.900 --> 20:30.900
要写两个ATP的模式

20:30.900 --> 20:32.900
一个Websocket的模式

20:32.900 --> 20:33.900
同时服务系那边

20:33.900 --> 20:34.900
又要写两个

20:34.900 --> 20:35.900
一个是针对的

20:35.900 --> 20:37.900
一个是针对ATP的

20:37.900 --> 20:38.900
所以说

20:38.900 --> 20:39.900
这种方案

20:39.900 --> 20:40.900
其实用了很少

20:40.900 --> 20:41.900
虽然理论上

20:41.900 --> 20:42.900
是可以优化的

20:42.900 --> 20:43.900
但是实际上用了很少

20:43.900 --> 20:44.900
它把那个代码

20:44.900 --> 20:45.900
打得稀碎

20:46.900 --> 20:47.900
这里我们Websocket

20:47.900 --> 20:48.900
大概要了解一下

20:48.900 --> 20:49.900
了解一下之后

20:49.900 --> 20:50.900
我们就要了解

20:50.900 --> 20:51.900
重点就是

20:51.900 --> 20:52.900
面试题里面

20:52.900 --> 20:53.900
特别喜欢问这个

20:54.900 --> 20:55.900
握手

20:55.900 --> 20:57.900
它怎么握手的

20:57.900 --> 20:58.900
其实它想

20:58.900 --> 20:59.900
就是细节的

20:59.900 --> 21:00.900
还是挺复杂的

21:00.900 --> 21:01.900
但是

21:01.900 --> 21:02.900
面试题

21:02.900 --> 21:04.900
我想起不会问那么复杂

21:04.900 --> 21:05.900
我们把基本的

21:05.900 --> 21:06.900
情况给大家说一下

21:06.900 --> 21:07.900
就行了

21:07.900 --> 21:08.900
这个握手的就是

21:08.900 --> 21:09.900
双方沟通好

21:09.900 --> 21:10.900
我们接下来

21:10.900 --> 21:11.900
我们要用Websocket

21:11.900 --> 21:12.900
来通信的

21:12.900 --> 21:13.900
因为浏览器的

21:13.900 --> 21:15.900
默认网络通信的

21:15.900 --> 21:16.900
协议是什么

21:16.900 --> 21:17.900
ATP

21:17.900 --> 21:18.900
对不对

21:18.900 --> 21:19.900
所以说

21:19.900 --> 21:20.900
我们让它变成

21:20.900 --> 21:21.900
Websocket的

21:21.900 --> 21:22.900
通信方式

21:23.900 --> 21:24.900
它具体

21:24.900 --> 21:25.900
它要怎么做的呢

21:25.900 --> 21:26.900
它其实

21:26.900 --> 21:28.900
它就会先用ATP

21:28.900 --> 21:29.900
来发送消息

21:29.900 --> 21:31.900
然后告诉服务器

21:31.900 --> 21:32.900
我这一次

21:32.900 --> 21:33.900
虽然是用ATP

21:33.900 --> 21:34.900
发消息

21:34.900 --> 21:35.900
但是我这个消息的内容

21:35.900 --> 21:36.900
就告诉你

21:36.900 --> 21:37.900
我们之后

21:37.900 --> 21:38.900
就不要用ATP了

21:38.900 --> 21:39.900
我们用Websocket

21:39.900 --> 21:40.900
就这么个意思

21:40.900 --> 21:42.900
就是Websocket的握手

21:42.900 --> 21:43.900
跟服务器

21:43.900 --> 21:44.900
一个协商的过程

21:50.850 --> 21:51.850
看一下

21:51.850 --> 21:52.850
当客户端

21:52.850 --> 21:53.850
需要跟服务器

21:53.850 --> 21:54.850
使用Websocket

21:54.850 --> 21:56.850
临通信的时候

21:56.850 --> 21:57.850
首先会使用

21:57.850 --> 21:58.850
ATP协议

21:58.850 --> 22:00.850
来完成是特殊的琴球

22:00.850 --> 22:01.850
也就是说

22:01.850 --> 22:03.850
握手阶段

22:03.850 --> 22:05.850
这是ATP协议去完成的

22:05.850 --> 22:07.850
完成握手之后

22:07.850 --> 22:08.850
后续的

22:08.850 --> 22:10.850
才是用Websocket协议

22:11.850 --> 22:12.850
懂得意思吗

22:12.850 --> 22:13.850
来发送消息

22:13.850 --> 22:14.850
握手阶段

22:14.850 --> 22:16.850
它使用的是ATP协议

22:17.850 --> 22:18.850
然后

22:18.850 --> 22:19.850
先琴球

22:19.850 --> 22:21.850
再响应

22:21.850 --> 22:23.850
琴球的时候

22:23.850 --> 22:25.850
客户端发送一个琴球地址

22:25.850 --> 22:27.850
那么这个琴球地址呢

22:27.850 --> 22:29.850
固定以WS开头

22:29.850 --> 22:30.850
叫Websocket开头

22:30.850 --> 22:31.850
就不是ATP了

22:31.850 --> 22:32.850
但是

22:32.850 --> 22:34.850
这次琴球仍然是ATP琴球

22:34.850 --> 22:35.850
但是呢

22:35.850 --> 22:37.850
我们用的是WS

22:37.850 --> 22:40.850
这是协议要求的

22:40.850 --> 22:42.850
但是琴球还是ATP琴球

22:42.850 --> 22:44.850
但是我们的琴球地址

22:44.850 --> 22:46.850
协议这一块换成WS

22:46.850 --> 22:47.850
然后这里

22:47.850 --> 22:49.850
域民路径怎么选择

22:49.850 --> 22:51.850
一般服务器在接口文档里面

22:51.850 --> 22:52.850
不给你提供

22:52.850 --> 22:54.850
说这里有一个Websocket通信

22:54.850 --> 22:56.850
那么地址是什么

22:56.850 --> 22:57.850
它会发给你

22:57.850 --> 22:58.850
就你不用管了

22:58.850 --> 23:00.850
我们ATP里面有ATP

23:00.850 --> 23:01.850
而ATPS

23:01.850 --> 23:03.850
那么WS也是一样

23:03.850 --> 23:04.850
有WS

23:04.850 --> 23:05.850
有WSS

23:05.850 --> 23:07.850
你自己对应一下

23:07.850 --> 23:08.850
是一样的道理

23:08.850 --> 23:09.850
所以说

23:09.850 --> 23:11.850
WS的话

23:11.850 --> 23:13.850
它的模式就是这种

23:13.850 --> 23:15.850
Websocket

23:15.850 --> 23:18.850
然后下边

23:18.850 --> 23:20.850
可以画个ATP

23:20.850 --> 23:21.850
这Websocket

23:21.850 --> 23:22.850
这ATP

23:22.850 --> 23:24.850
因为它用到ATP来进行握手

23:24.850 --> 23:27.850
然后下边是TCP

23:27.850 --> 23:29.850
这种模式

23:29.850 --> 23:30.850
WSS

23:30.850 --> 23:32.850
就是上边是

23:32.850 --> 23:33.850
Websocket

23:33.850 --> 23:35.850
就是WSS

23:35.850 --> 23:37.850
然后下边是ATPS

23:37.850 --> 23:39.850
用ATPS来进行握手

23:39.850 --> 23:41.850
然后下边是SSL

23:41.850 --> 23:43.850
TLS

23:43.850 --> 23:45.850
在下边是TCP

23:45.850 --> 23:47.850
就是这么一种程式结构

23:47.850 --> 23:51.160
好,这是琴球地址

23:51.160 --> 23:53.160
然后琴球头

23:53.160 --> 23:54.160
固定的

23:54.160 --> 23:56.160
要求你这样子写

23:56.160 --> 23:57.160
来看

23:57.160 --> 23:58.160
Connection

23:58.160 --> 23:59.160
我们的连接

23:59.160 --> 24:00.160
就不是什么

24:00.160 --> 24:01.160
Keeper Live

24:01.160 --> 24:02.160
要Close

24:02.160 --> 24:03.160
这些东西

24:03.160 --> 24:04.160
Upgrade

24:04.160 --> 24:05.160
比较升级

24:05.160 --> 24:06.160
服务说

24:06.160 --> 24:08.160
咱们之后

24:08.160 --> 24:09.160
就不要用ATP了

24:09.160 --> 24:10.160
我们升级吧

24:10.160 --> 24:11.160
虽然这也是用了

24:11.160 --> 24:12.160
ATP给你的琴球

24:12.160 --> 24:13.160
但是我想给你说

24:13.160 --> 24:14.160
我要升级

24:14.160 --> 24:16.160
那升级成什么呢

24:16.160 --> 24:18.160
Upgrade升级成Websocket

24:18.160 --> 24:19.160
把我们的后续协议

24:19.160 --> 24:21.160
使用Websocket

24:21.160 --> 24:22.160
然后接下来

24:22.160 --> 24:23.160
又告诉你

24:23.160 --> 24:24.160
我想使用Websocket的版本

24:24.160 --> 24:25.160
是什么呢

24:25.160 --> 24:26.160
是13这个版本

24:26.160 --> 24:28.160
版本用13

24:28.160 --> 24:30.160
跟服务器商量一下

24:30.160 --> 24:31.160
然后给它一个key

24:31.160 --> 24:32.160
就像那一说对按号

24:32.160 --> 24:34.160
为什么要对按号呢

24:34.160 --> 24:36.160
因为我们用ATP服务器

24:36.160 --> 24:37.160
存在了很长一段时间

24:37.160 --> 24:38.160
市面上

24:38.160 --> 24:40.160
都有数不清的

24:40.160 --> 24:41.160
几十亿

24:41.160 --> 24:42.160
甚至几千亿

24:42.160 --> 24:43.160
我甚至觉得有

24:43.160 --> 24:44.160
几万亿的

24:44.160 --> 24:46.160
ATP服务器了

24:46.160 --> 24:47.160
非常非常多的

24:47.160 --> 24:48.160
ATP服务器

24:48.160 --> 24:49.160
那么这些服务器

24:49.160 --> 24:51.160
写了很多莫名其妙代码

24:51.160 --> 24:52.160
有可能一些服务器

24:52.160 --> 24:54.160
它莫名其妙的

24:54.160 --> 24:55.160
就统一的

24:55.160 --> 24:57.160
但是它并不是

24:57.160 --> 25:00.160
真正的Websocket的服务器

25:00.160 --> 25:01.160
为了避免

25:01.160 --> 25:02.160
因为这只普通的

25:02.160 --> 25:04.160
请求头嘛对不对

25:04.160 --> 25:05.160
那万一服务器

25:05.160 --> 25:06.160
有些写了一些莫名其妙代码

25:06.160 --> 25:07.160
就统一的

25:07.160 --> 25:08.160
就避免误判

25:08.160 --> 25:09.160
所以说

25:09.160 --> 25:10.160
我们来对一下按号

25:10.160 --> 25:12.160
要确定你是不是真的要

25:12.160 --> 25:14.160
跟我使用那个

25:14.160 --> 25:16.160
ATP协议

25:16.160 --> 25:17.160
就是Websocket的协议

25:17.160 --> 25:18.160
那么这个按号

25:18.160 --> 25:19.160
其实就是一个

25:19.160 --> 25:20.160
随机的制服串

25:20.160 --> 25:21.160
然后它进行BEST64编码

25:21.160 --> 25:22.160
比方说

25:22.160 --> 25:23.160
我就这里举个例子

25:23.160 --> 25:24.160
我们天王盖地狐

25:24.160 --> 25:26.160
那一会服务器

25:27.160 --> 25:28.160
就玩笑了

25:28.160 --> 25:30.160
但是这个按号

25:30.160 --> 25:31.160
这个地方

25:31.160 --> 25:33.160
它不是每一次都一样的

25:33.160 --> 25:35.160
它是每一次都有变化的

25:35.160 --> 25:36.160
然后下一次

25:38.160 --> 25:40.160
乌鸦飞到凤凰群

25:40.160 --> 25:42.160
满槽都是英雄岸

25:42.160 --> 25:43.160
哪是现在哪是城

25:43.160 --> 25:45.160
这每一次都不一样

25:45.160 --> 25:46.160
所以呢

25:46.160 --> 25:47.160
这里就随机生成的

25:47.160 --> 25:48.160
一个按号对过去

25:48.160 --> 25:49.160
然后服务器

25:49.160 --> 25:50.160
如果说统计的话

25:50.160 --> 25:51.160
那么响应的时候

25:51.160 --> 25:53.160
消息码是101

25:53.160 --> 25:54.160
这其实都是面试体

25:54.160 --> 25:55.160
要考的

25:55.160 --> 25:57.160
消息码是101

25:57.160 --> 25:58.160
这个101消息码

25:58.160 --> 25:59.160
就表示什么意思呢

25:59.160 --> 26:01.160
表示的是切换协议

26:01.160 --> 26:03.160
切换协议的意思

26:03.160 --> 26:05.160
接下来固定享用

26:05.160 --> 26:06.160
好

26:06.160 --> 26:07.160
我们就升级吧

26:07.160 --> 26:08.160
你不是说升级吗

26:08.160 --> 26:09.160
那行

26:09.160 --> 26:10.160
我同意升级

26:10.160 --> 26:11.160
升级成什么呢

26:11.160 --> 26:12.160
你不是说我也不烧开什么

26:12.160 --> 26:13.160
我也同意

26:13.160 --> 26:14.160
升级成我也不烧开什么

26:14.160 --> 26:16.160
你不是给我对了一个按号吗

26:16.160 --> 26:17.160
key

26:17.160 --> 26:18.160
对吧

26:18.160 --> 26:19.160
我这个accept

26:19.160 --> 26:20.160
表示接收了

26:20.160 --> 26:21.160
接收了这个按号

26:21.160 --> 26:22.160
然后给你回了一个下一句

26:22.160 --> 26:23.160
对吧

26:23.160 --> 26:24.160
这个东西

26:24.160 --> 26:26.160
根据统一的算法

26:26.160 --> 26:29.160
使用它来整成出来的它

26:29.160 --> 26:30.160
好

26:30.160 --> 26:31.160
对好了

26:31.160 --> 26:32.160
对好了

26:32.160 --> 26:33.160
握手就完成

26:33.160 --> 26:35.160
那么握手完成之后

26:35.160 --> 26:38.160
那就不再有任何的请求响应了

26:38.160 --> 26:40.160
握手一完成

26:40.160 --> 26:42.160
服务器就可以随便发消息了

26:42.160 --> 26:44.160
你就可以随便给我发消息了

26:44.160 --> 26:45.160
都可以了

26:45.160 --> 26:46.160
就没有请求响应了

26:46.160 --> 26:47.160
就不是说

26:47.160 --> 26:49.160
你必须要给我先请求

26:49.160 --> 26:51.160
而且请求过后必须要响应

26:51.160 --> 26:52.160
没有了

26:53.160 --> 26:54.160
对吧

26:54.160 --> 26:55.160
然后你一会儿

26:55.160 --> 26:56.160
这就不叫请求了

26:56.160 --> 26:57.160
叫发消息

26:57.160 --> 26:59.160
然后发了一条服务器

26:59.160 --> 27:00.160
不理它

27:00.160 --> 27:01.160
再发一个

27:01.160 --> 27:02.160
服务器

27:02.160 --> 27:03.160
这是我礼礼

27:03.160 --> 27:04.160
这是我给你回一个

27:04.160 --> 27:05.160
有的时候

27:05.160 --> 27:06.160
服务器自己觉得有些小小

27:06.160 --> 27:07.160
给你发

27:07.160 --> 27:08.160
它就随便给你发了

27:08.160 --> 27:09.160
就这么一种模式了

27:10.160 --> 27:11.160
好

27:11.160 --> 27:12.160
那么接下来我们看面试题

27:12.160 --> 27:14.160
我们这期课子先讲理论

27:14.160 --> 27:15.160
后边你们再看了

27:15.160 --> 27:16.160
我们的代码实现之后

27:16.160 --> 27:18.160
那就更加清楚一点了

27:18.160 --> 27:19.160
面试题

27:19.160 --> 27:20.160
只要问他

27:20.160 --> 27:21.160
这些外面消息的协议

27:21.160 --> 27:23.160
是怎么能不能减速一下

27:23.160 --> 27:24.160
这个协议是

27:24.160 --> 27:26.160
ATV5带来的新协议

27:26.160 --> 27:27.160
它相对于ATV

27:27.160 --> 27:29.160
它是一个持久连接的协议

27:29.160 --> 27:31.160
就是连接一直不销毁

27:31.160 --> 27:32.160
除非你主动

27:32.160 --> 27:34.160
然后客户端关闭了

27:34.160 --> 27:36.160
网页要关闭了

27:36.160 --> 27:37.160
或者是可以主动的

27:37.160 --> 27:38.160
去关闭连接

27:38.160 --> 27:41.160
关闭连接的实质灰烛就没了

27:41.160 --> 27:42.160
这就是

27:42.160 --> 27:44.160
它是一个持久性的连接协议

27:44.160 --> 27:45.160
它的握手机

27:45.160 --> 27:46.160
还非常地用ATVP

27:46.160 --> 27:48.160
协议完成握手

27:48.160 --> 27:51.160
通过TCP通道发送消息

27:51.160 --> 27:52.160
那么使用它

27:52.160 --> 27:55.160
可以实现服务器主动推动消息

27:55.160 --> 27:57.160
然后你可以解释一下

27:57.160 --> 27:58.160
就是

27:58.160 --> 28:01.160
聊一聊这个握手阶段

28:01.160 --> 28:02.160
外面稍微在于

28:02.160 --> 28:04.160
传统的ATVP有什么样的优势

28:04.160 --> 28:05.160
那么你这里可以

28:05.160 --> 28:06.160
聊一聊短轮寻

28:06.160 --> 28:07.160
长轮寻

28:07.160 --> 28:10.160
它们的模式是哪一种

28:10.160 --> 28:12.160
那么它们有什么样的缺点

28:12.160 --> 28:14.160
就是想用必须要在请求之后

28:14.160 --> 28:15.160
服务器是被动的

28:15.160 --> 28:17.160
无法主动推动消息

28:17.160 --> 28:18.160
然后

28:18.160 --> 28:19.160
不断的请求

28:19.160 --> 28:20.160
又占用了很多资源

28:20.160 --> 28:21.160
为了稍微什么

28:21.160 --> 28:22.160
它可以让服务器主动推动消息

28:22.160 --> 28:23.160
对吧

28:23.160 --> 28:24.160
每一次推动消息

28:24.160 --> 28:26.160
都是非常精准实实的

28:26.160 --> 28:28.160
而且资源占用是最少的

28:28.160 --> 28:30.160
然后前端如何实现即时通信

28:30.160 --> 28:32.160
那就是这三种

28:32.160 --> 28:33.160
好吧

28:33.160 --> 28:34.160
这就是为了稍微的

28:34.160 --> 28:36.160
把这个面子底下讲了

