WEBVTT

00:00.240 --> 00:03.840
好了 同学们 我们这节课呢来聊一聊这个TCP协议

00:03.840 --> 00:07.160
回顾一下我们之前学习的网络模型

00:07.160 --> 00:09.960
五层网络模型里边TCP协议在哪儿

00:09.960 --> 00:11.240
就在传输层

00:11.240 --> 00:15.080
对吧 我们再回顾一下之前五层网络模型这一块

00:15.080 --> 00:18.840
我们发送消息的时候是不是经过每一层都会加上一个头啊

00:18.840 --> 00:20.840
对吧 我们学过GDP协议

00:20.840 --> 00:23.640
GDP协议的头是什么呢 就是那个请求头

00:23.640 --> 00:26.040
就是这个头 懂得意思吧

00:26.040 --> 00:29.840
然后呢 经过传输层 我们这节课来讲一个TCP协议

00:29.840 --> 00:33.040
它在传输层 那么传输层的它也会给它加一个头

00:33.040 --> 00:35.240
后边也是加头 加头 加头

00:35.240 --> 00:38.240
然后过边 过这边来了就是解封装 对吧

00:38.240 --> 00:41.840
一个一个拆 拆拆拆 拆到最后就是原式数据

00:41.840 --> 00:45.840
好 这是我们之前讲五层网络模型这一块的指示

00:45.840 --> 00:51.440
那么这一块讲的这个TCP协议有什么用呢

00:51.440 --> 00:54.440
主要的作用呢就是为了做面试题

00:54.440 --> 00:59.640
这个TCP协议是计算机网络里边一块非常非常重要的协议

00:59.640 --> 01:02.040
但是呢 跟你们没有多少关系

01:02.040 --> 01:04.640
你们把AGB协议搞清楚就可以了

01:04.640 --> 01:10.640
可以这样说吧 严格来说 跟你们将来工作之后两三年之内吧

01:10.640 --> 01:14.640
至少两三年之内 跟你们没有多少关系这个玩意

01:14.640 --> 01:19.640
因为你们都是开发的就是客户端的程序嘛

01:19.640 --> 01:22.040
大部分都是使用ATDP协议来完成的

01:22.040 --> 01:25.440
你像那个浏览器里边 你去做阿加克斯

01:25.440 --> 01:28.040
它只能用ATDP协议 你没法用那个TCP

01:28.040 --> 01:31.240
没法直接用TCP 所以说跟你们没多少关系

01:31.240 --> 01:33.440
那为什么要学这个玩意呢 就一个原因

01:33.440 --> 01:36.840
它面试题可能会问 那就没办法了

01:36.840 --> 01:40.840
所以说我们这一块讲的程度 讲到什么程度

01:40.840 --> 01:42.640
能够搞定面试题就行了

01:42.640 --> 01:46.040
那么面试题会怎么问你呢 就讲这个TCP协议

01:46.040 --> 01:50.240
这个连接的过程 什么三次握手试试挥手

01:50.240 --> 01:55.040
就问你这个东西 再生的它也不太会问了

01:55.040 --> 01:58.040
有没有可能会问到更生的 有可能

01:58.040 --> 02:00.040
但是我觉得那一块你就不用管了

02:00.040 --> 02:04.640
因为已经学习的 投入的学习时间成本

02:04.640 --> 02:06.640
和收益已经不成正比了

02:06.640 --> 02:09.040
而且那一块没有多少钱能知道

02:09.040 --> 02:12.040
所以说我们了解到一部分就可以了

02:12.040 --> 02:15.040
能够搞定这种面试题就可以了

02:15.040 --> 02:19.040
我们首先来看一下这个TCP协议

02:19.040 --> 02:23.040
它到底是一个 它是传输成的对吧

02:23.040 --> 02:27.040
我们之前说过它要解决可靠传输的问题

02:27.040 --> 02:29.040
那么它怎么来处理这个问题的呢

02:29.040 --> 02:32.040
它其实整个过程就非常简单

02:32.040 --> 02:36.040
就是分为三个部分 第一个部分是建立连接

02:36.040 --> 02:39.040
我们把它叫做三次握手 以后我会详细讲

02:39.040 --> 02:41.040
然后建立连接建立好了之后

02:41.040 --> 02:44.040
就好比说你跟别人打电话 要拨号

02:44.040 --> 02:48.040
双方接通了之后 然后我们再来说话

02:48.040 --> 02:51.040
那么这个收发数据就是说话

02:51.040 --> 02:54.040
双方之间传输数据 那么这个数据可以是任何数据

02:54.040 --> 02:57.040
你可以传一个文件过去 一个图片

02:57.040 --> 03:00.040
或者是一段文本 一个视频都可以传

03:00.040 --> 03:04.040
而且这个收发数据它不是说像ATP协议那样子

03:04.040 --> 03:07.040
必须是客户端到服务器 不是的

03:07.040 --> 03:09.040
它可以是客户端到服务器

03:09.040 --> 03:11.040
也可以是服务器到客户端

03:11.040 --> 03:15.040
它这个传输数据的时间可以是几秒钟

03:15.040 --> 03:17.040
就传输完了 也可以几天

03:17.040 --> 03:20.040
也可以传了一部分等一会 等几个小时

03:20.040 --> 03:22.040
再传下一部分都是可以的

03:22.040 --> 03:26.040
就是它可以在任何时间 任何的方式 任何的方向

03:26.040 --> 03:30.040
来发送数据 接收数据 是不是跟ATP协议不一样

03:30.040 --> 03:33.040
我们ATP协议是不是必须要客户端发起服务器想用

03:33.040 --> 03:35.040
那这里不是 其实ATP协议是可以随意的

03:35.040 --> 03:38.040
你可以给它发 它一会可以给你多发几个

03:38.040 --> 03:40.040
连续发几个 或者等一会再给你发几个

03:40.040 --> 03:43.040
等一会客户端再给它发 都可以

03:43.040 --> 03:45.040
这收发数据非常的随意

03:45.040 --> 03:47.040
然后最后就是销毁连接

03:47.040 --> 03:49.040
专方觉得没有什么东西好发了

03:49.040 --> 03:52.040
我们这里可以挂电话了 就这么个意思

03:52.040 --> 03:54.040
就是这个三个过程

03:54.040 --> 03:57.040
那么我们讲的话 先讲收发数据

03:57.040 --> 03:59.040
先把这个玩意搞清楚

03:59.040 --> 04:02.040
收发数据这一块 其实我们对ATP协议的

04:02.040 --> 04:05.040
了解它两个点就可以了

04:05.040 --> 04:07.040
第一个点叫做分段发送

04:07.040 --> 04:09.040
这是啥意思呢 就是

04:09.040 --> 04:11.040
因为我发数据的时候

04:11.040 --> 04:13.040
我可能发的数据很短

04:13.040 --> 04:16.040
也有可能我发的数据很长

04:16.040 --> 04:18.040
然后你发一本小 我说过去

04:18.040 --> 04:20.040
它可能几十万字

04:20.040 --> 04:21.040
那这个数据这么长的数据

04:21.040 --> 04:23.040
我不可能一次发给对方

04:23.040 --> 04:25.040
我可能要分段一段一段的发

04:25.040 --> 04:27.040
那么如果说网络原因丢失了

04:27.040 --> 04:30.040
造成数据错误了等等情况

04:30.040 --> 04:32.040
那么我只发错误了一块就行了

04:32.040 --> 04:34.040
所以说我要分段来发送

04:34.040 --> 04:36.040
包括我发一些文件比较大的时候

04:36.040 --> 04:38.040
也是分段来发送

04:38.040 --> 04:40.040
那么它到底是怎么分段的呢

04:40.040 --> 04:42.040
它是这样子做一个非常简单的处理

04:42.040 --> 04:45.040
就是对完整的数据进行编号

04:46.040 --> 04:48.040
怎么编号的呢 按字节编号

04:48.040 --> 04:50.040
你们知道个字节这个单位吧

04:50.040 --> 04:51.040
叫做bite

04:51.040 --> 04:53.040
一个字节的等于八位

04:53.040 --> 04:56.040
八位是什么意思 就是八个二进字位

04:56.040 --> 04:58.040
一个二进字位只能是一和零

04:58.040 --> 05:00.040
对吧 一个字节的等于八位

05:00.040 --> 05:03.040
那么后边的话 你们就明白了

05:03.040 --> 05:05.040
一kb等于多少 就是

05:05.040 --> 05:08.040
1024个字节

05:08.040 --> 05:09.040
然后呢

05:09.040 --> 05:13.040
以mb呢 就是1024个kb

05:13.040 --> 05:15.040
大家常识 大家要知道

05:15.040 --> 05:17.040
那么它是按字节编号的

05:17.040 --> 05:19.040
就是一个字节一个字节进行编号

05:19.040 --> 05:21.040
我们把完整的数据进行编号

05:21.040 --> 05:22.040
那么这个编号呢

05:22.040 --> 05:24.040
它不一定是按从一开始的

05:24.040 --> 05:26.040
它一般是从一个随机数

05:26.040 --> 05:28.040
可能很长的随机数

05:28.040 --> 05:30.040
比方说几十万开始的

05:30.040 --> 05:31.040
说这个玩意你们不用去管

05:31.040 --> 05:33.040
它总之就是一个编号就行了

05:33.040 --> 05:35.040
那么发数据的时候是怎么发的呢

05:35.040 --> 05:37.040
它是取出一部分数据

05:37.040 --> 05:39.040
一段一段的发

05:39.040 --> 05:41.040
那么一次取几个数据呢

05:41.040 --> 05:44.040
这个玩意呢 我就我们不需要去care了

05:44.040 --> 05:46.040
跟我们没什么关系了

05:46.040 --> 05:47.040
面试节也不会问的

05:47.040 --> 05:48.040
你们只需要知道

05:48.040 --> 05:50.040
它每次取的时候取一段

05:50.040 --> 05:51.040
那已经发送

05:51.040 --> 05:53.040
不是完整的取出来

05:53.040 --> 05:54.040
当然如果说你数据很少

05:54.040 --> 05:56.040
你数据可能只有一两个字节

05:56.040 --> 05:57.040
那你可能一次就发完了

05:57.040 --> 05:58.040
那如果说数据很大的话

05:58.040 --> 05:59.040
就会分段发送

05:59.040 --> 06:00.040
就这么个意思

06:00.040 --> 06:01.040
那分段发送的时候

06:01.040 --> 06:02.040
我们之前不是说

06:02.040 --> 06:04.040
每一个程啊

06:04.040 --> 06:05.040
它不是会给它加一个头吗

06:05.040 --> 06:07.040
对吧 加个这个头

06:07.040 --> 06:08.040
那么这个头呢

06:08.040 --> 06:09.040
在哪里压的呢

06:09.040 --> 06:12.040
就让它现在要发这个1和2这个字节

06:12.040 --> 06:13.040
要发这一段

06:13.040 --> 06:15.040
这一段发完了过后再发三合四

06:15.040 --> 06:17.040
如果说用这种方式来发的话

06:17.040 --> 06:19.040
那么发1和2的时候

06:19.040 --> 06:20.040
那么就会把这一段数据

06:20.040 --> 06:21.040
甭管它是啥

06:21.040 --> 06:22.040
它是文件的一部分

06:22.040 --> 06:24.040
或者是一段文本的一部分

06:24.040 --> 06:26.040
反正就是上一层传卦的数据嘛

06:26.040 --> 06:28.040
atcp的数据对吧

06:28.040 --> 06:29.040
管它是什么协议

06:29.040 --> 06:30.040
传卦的数据

06:30.040 --> 06:32.040
那么我对这一部分加一个头

06:32.040 --> 06:33.040
懂了意思吧

06:33.040 --> 06:35.040
那这一头发完了没问题了

06:35.040 --> 06:37.040
那我发下一段的时候

06:37.040 --> 06:38.040
三合四的时候

06:38.040 --> 06:40.040
又给三合四去加一个头

06:40.040 --> 06:42.040
就这么个意思

06:42.040 --> 06:44.040
是这么一种逻辑在发的

06:44.040 --> 06:46.040
这就是分段发送

06:46.040 --> 06:47.040
好 重点来了

06:47.040 --> 06:49.040
接下来是可靠传输

06:49.040 --> 06:52.040
为什么要可靠传输呢

06:52.040 --> 06:54.040
是因为我们的网络环境

06:54.040 --> 06:56.040
现在的网络环境好多了

06:56.040 --> 06:58.040
现在环络就是有一些企业

06:58.040 --> 07:01.040
或者组织都在尝试的一些新的方案

07:01.040 --> 07:02.040
就是我们真的

07:02.040 --> 07:04.040
现在需要可靠传输吗

07:04.040 --> 07:05.040
现在在讨论这个问题

07:05.040 --> 07:06.040
以前那不是

07:06.040 --> 07:08.040
以前的网络环境很差的

07:08.040 --> 07:10.040
你看你没有世纪的时候

07:10.040 --> 07:14.040
那个时候我们的网速特别特别慢

07:14.040 --> 07:16.040
那就特别容易出现丢包

07:16.040 --> 07:18.040
我们的数据发出去了

07:18.040 --> 07:19.040
但是对方没收到

07:19.040 --> 07:21.040
或者是传输过程中

07:21.040 --> 07:22.040
不知道怎么回事

07:22.040 --> 07:23.040
一些无线电信号的干扰

07:23.040 --> 07:24.040
乱七八糟的原因

07:24.040 --> 07:26.040
导致了信号错位了

07:26.040 --> 07:27.040
以前的1变成0

07:27.040 --> 07:28.040
你变成1了

07:28.040 --> 07:30.040
数据错误

07:30.040 --> 07:33.040
数据的丢失都是问题

07:33.040 --> 07:35.040
那么什么叫可靠传输呢

07:35.040 --> 07:36.040
就是要解决这些问题

07:36.040 --> 07:38.040
那么他怎么解决的呢

07:38.040 --> 07:39.040
具体过程是比较复杂的

07:39.040 --> 07:41.040
我们就简单的说一下就是

07:41.040 --> 07:44.040
他要求接收方无论是哪一端发送

07:44.040 --> 07:46.040
以服务器给扣端发可以

07:46.040 --> 07:48.040
扣端给服务器发也可以

07:48.040 --> 07:51.480
无论是哪一方发

07:51.480 --> 07:53.480
比方说他给他发

07:53.480 --> 07:55.480
那么他就是发送方

07:55.480 --> 07:56.480
他就是接收方

07:56.480 --> 07:58.480
那么发送方的发送数据过后

07:58.480 --> 08:00.480
接收方必须要收到数据过

08:00.480 --> 08:02.480
必须要对数据报进行确证

08:02.480 --> 08:04.480
什么叫数据报

08:04.480 --> 08:06.480
数据报就是一个传输单元

08:06.480 --> 08:08.480
比如说他一开始传输这两个字节

08:08.480 --> 08:10.480
那么加一个头就形成一个数据报

08:10.480 --> 08:12.480
就这么个意思

08:12.480 --> 08:14.480
你收到数据报之后

08:14.480 --> 08:15.480
必须要对数据报进行确证

08:15.480 --> 08:17.480
表示说你收到了

08:17.480 --> 08:18.480
这有点像啥呢

08:18.480 --> 08:20.480
有点像你打电话

08:20.480 --> 08:23.480
经常你家里边的人

08:23.480 --> 08:25.480
你的长辈给你打电话

08:25.480 --> 08:27.480
你妈妈给你打电话

08:27.480 --> 08:29.480
打电话的时候

08:29.480 --> 08:31.480
他不停的刀不停的说

08:31.480 --> 08:33.480
然后你必须得有回应

08:33.480 --> 08:35.480
你没有回应的不得了

08:35.480 --> 08:36.480
要怎么回应的

08:36.480 --> 08:37.480
你们想一想

08:37.480 --> 08:38.480
我是这么回应的

08:42.480 --> 08:43.480
知道了

08:43.480 --> 08:45.480
那么这个玩意就是确证

08:45.480 --> 08:46.480
他那边不停的说

08:46.480 --> 08:48.480
我这边给他发一点声音出来

08:48.480 --> 08:49.480
表示说我收到了

08:49.480 --> 08:50.480
我听到了

08:50.480 --> 08:51.480
就这个意思

08:51.480 --> 08:53.480
就是TCP协议要求

08:53.480 --> 08:55.480
你发送方发了数据过后

08:55.480 --> 08:56.480
那么接收方收到数据

08:56.480 --> 08:57.480
必须要对数据确证

08:57.480 --> 08:59.480
如果说你没有确证

08:59.480 --> 09:00.480
那怎么办

09:00.480 --> 09:01.480
那就是什么意思呢

09:01.480 --> 09:03.480
你妈妈不停的说

09:03.480 --> 09:06.480
那你这边压缺无声

09:06.480 --> 09:08.480
那边就开始慌了

09:08.480 --> 09:10.480
他就说就不会停下来了

09:10.480 --> 09:11.480
他就不停的说

09:11.480 --> 09:12.480
不停的说

09:12.480 --> 09:13.480
他怕你没听到

09:13.480 --> 09:14.480
就是这个意思

09:14.480 --> 09:16.480
那如果说他没有确证的话

09:16.480 --> 09:17.480
就表示这个数据

09:17.480 --> 09:18.480
可能出了问题

09:18.480 --> 09:20.480
有可能对方没有收到

09:20.480 --> 09:21.480
有可能收到了

09:21.480 --> 09:22.480
但是他一检查错误的

09:22.480 --> 09:23.480
就把他丢了

09:23.480 --> 09:24.480
那么就作为导致

09:24.480 --> 09:25.480
要重新发送

09:25.480 --> 09:27.480
就这么简单

09:27.480 --> 09:28.480
逻辑社就这么简单

09:28.480 --> 09:29.480
但是真正实现起来

09:29.480 --> 09:32.480
可能细节上很复杂的

09:33.480 --> 09:34.480
具体的做法

09:34.480 --> 09:35.480
那就看这张图

09:35.480 --> 09:36.480
这张图的话

09:36.480 --> 09:39.480
是一个发送消息

09:39.480 --> 09:41.480
和确证消息的这么一个流程

09:41.480 --> 09:42.480
就比较说

09:42.480 --> 09:44.480
假设他是他给他发

09:44.480 --> 09:45.480
当然反过来也是一样

09:45.480 --> 09:46.480
他也可以给他发

09:46.480 --> 09:47.480
也是一样

09:47.480 --> 09:48.480
发的时候

09:48.480 --> 09:50.480
他首先给他发了一个数据报

09:50.480 --> 09:51.480
数据报里边

09:51.480 --> 09:53.480
前面不是一个头吗

09:53.480 --> 09:54.480
就这个玩意儿

09:54.480 --> 09:56.480
这个地方不是一个头吗

09:56.480 --> 09:58.480
这个头里边是有些信息的

09:58.480 --> 09:59.480
什么信息呢

09:59.480 --> 10:00.480
其中这个信息很多

10:00.480 --> 10:02.480
我们现在只需要了解这个

10:02.480 --> 10:04.480
他里边会有一个编号

10:04.480 --> 10:05.480
会有这么一个东西

10:05.480 --> 10:07.480
secrets

10:07.480 --> 10:08.480
就是序列号

10:08.480 --> 10:09.480
这个序列号是啥呢

10:09.480 --> 10:10.480
就表示

10:10.480 --> 10:11.480
比方说你发这个1

10:11.480 --> 10:13.480
编号为12的字节

10:13.480 --> 10:14.480
那么序列号

10:14.480 --> 10:15.480
就表示歧视字节

10:15.480 --> 10:17.480
就是我这一次给你发的字节

10:17.480 --> 10:19.480
占整个数据的字节

10:19.480 --> 10:21.480
是第几个

10:21.480 --> 10:22.480
第1个

10:22.480 --> 10:23.480
我现在给你发的第1个

10:23.480 --> 10:24.480
第1个的话

10:24.480 --> 10:25.480
那么就sec是1

10:25.480 --> 10:26.480
我这里写个x

10:26.480 --> 10:27.480
我也不知道中间发了

10:27.480 --> 10:28.480
前面发了多少了

10:28.480 --> 10:29.480
对吧

10:29.480 --> 10:30.480
这里就是某一个字节

10:30.480 --> 10:31.480
给你发过来

10:31.480 --> 10:32.480
当然字节的长度

10:32.480 --> 10:33.480
可能是2个

10:33.480 --> 10:34.480
可能是1个

10:34.480 --> 10:35.480
可能是

10:35.480 --> 10:36.480
成败上千个

10:36.480 --> 10:38.480
都有可能

10:38.480 --> 10:39.480
好

10:39.480 --> 10:40.480
那么我把数据发过来过后

10:40.480 --> 10:41.480
服务器那边

10:41.480 --> 10:42.480
比方另一端

10:42.480 --> 10:43.480
不一定是服务器

10:43.480 --> 10:44.480
有可能反过来都是一样的

10:44.480 --> 10:45.480
另一端

10:45.480 --> 10:46.480
他收到了这个数据

10:46.480 --> 10:47.480
那么他必须要

10:47.480 --> 10:48.480
对数据进行确认

10:48.480 --> 10:49.480
记住

10:49.480 --> 10:50.480
TCP写一中

10:50.480 --> 10:52.480
所有的数据发送

10:52.480 --> 10:53.480
任何的发过去

10:53.480 --> 10:54.480
必须要确认

10:54.480 --> 10:55.480
那么确认的时候

10:55.480 --> 10:56.480
他怎么确认的

10:56.480 --> 10:58.480
他会给他传两个东西

10:58.480 --> 11:00.480
一个叫做大写的sec

11:00.480 --> 11:01.480
这个大写的sec是什么呢

11:01.480 --> 11:02.480
其实也在

11:02.480 --> 11:05.480
这些东西全是在这个头里边

11:05.480 --> 11:06.480
全在这个头里边

11:06.480 --> 11:07.480
这个头里边

11:07.480 --> 11:08.480
可以放很多信息的

11:08.480 --> 11:10.480
我们现在不用去

11:10.480 --> 11:11.480
深入的 详细的

11:11.480 --> 11:12.480
去了解这个头里边的格式

11:12.480 --> 11:13.480
我们只知道

11:13.480 --> 11:15.480
里面有哪些信息就行了

11:15.480 --> 11:16.480
那么有两个sec

11:16.480 --> 11:17.480
第一个sec

11:17.480 --> 11:19.480
他只能取1和0

11:19.480 --> 11:20.480
相当于是个布尔

11:20.480 --> 11:21.480
大写的

11:21.480 --> 11:23.480
0表示的就是

11:23.480 --> 11:24.480
我这一次发送

11:24.480 --> 11:25.480
它不是一个数据确认

11:25.480 --> 11:26.480
啥意思呢

11:26.480 --> 11:27.480
比方说你看

11:27.480 --> 11:28.480
这个地方发过去的数据

11:28.480 --> 11:29.480
它不是一个确认

11:29.480 --> 11:30.480
确认消息嘛 对吧

11:30.480 --> 11:31.480
我只是给你发了一个数据

11:31.480 --> 11:32.480
那么这个时候

11:32.480 --> 11:33.480
sec就是0

11:33.480 --> 11:34.480
我这里没有画出来

11:34.480 --> 11:35.480
懂不懂意思吧

11:35.480 --> 11:36.480
那如果说

11:36.480 --> 11:38.480
我要确认这个数据收到了

11:38.480 --> 11:39.480
那么这个时候

11:39.480 --> 11:40.480
就把他写为1

11:40.480 --> 11:42.480
就表示我这一次

11:42.480 --> 11:43.480
给你发的东西

11:43.480 --> 11:45.480
表示是一个确认的数据

11:45.480 --> 11:47.480
我是确认刚才的数据

11:47.480 --> 11:48.480
收到了

11:48.480 --> 11:50.480
那么后边的sec

11:50.480 --> 11:52.480
小小的sec有什么意思呢

11:52.480 --> 11:53.480
他表示我收到了

11:53.480 --> 11:54.480
是哪一端

11:54.480 --> 11:55.480
因为他这边可能

11:55.480 --> 11:56.480
他不停的给你发数据

11:56.480 --> 11:57.480
不停的发不停的发

11:57.480 --> 11:58.480
对吧

11:58.480 --> 11:59.480
那我这边确认

11:59.480 --> 12:00.480
确认的是哪一个数据收到了呢

12:00.480 --> 12:01.480
对不对

12:01.480 --> 12:03.480
所以这个逻辑还是挺简单的

12:03.480 --> 12:04.480
我给你发了一个

12:04.480 --> 12:06.480
编号x的数据

12:06.480 --> 12:07.480
然后你告诉我

12:07.480 --> 12:08.480
数据收到了

12:08.480 --> 12:09.480
收到了是哪一个数据

12:09.480 --> 12:11.480
收到了是编号x加1

12:11.480 --> 12:13.480
这个x加1是什么意思呢

12:13.480 --> 12:14.480
又表示说

12:14.480 --> 12:17.480
x加1之前的我全部都收到了

12:17.480 --> 12:18.480
现在来请你

12:18.480 --> 12:19.480
下一次发的时候

12:19.480 --> 12:22.480
给我发x加1这个编号的

12:22.480 --> 12:23.480
就这个意思

12:23.480 --> 12:26.480
那么如果说x等于1的时候

12:26.480 --> 12:27.480
那么这里就是

12:27.480 --> 12:29.480
请给我发第二个字节

12:29.480 --> 12:31.480
就这么个意思

12:31.480 --> 12:33.480
那么通过这种方式呢

12:33.480 --> 12:34.480
是不是就可以解决这个问题

12:34.480 --> 12:35.480
可靠传输的问题

12:35.480 --> 12:37.480
因此呢

12:37.480 --> 12:40.480
同学们在那个

12:40.480 --> 12:41.480
写ATP的时候

12:41.480 --> 12:43.480
以前有些同学问了

12:43.480 --> 12:44.480
因为ATP写意

12:44.480 --> 12:47.480
使用的就是TCP在发送数据

12:47.480 --> 12:48.480
所以说有同学问

12:48.480 --> 12:50.480
如果说网络不好

12:50.480 --> 12:52.480
就像数据丢失

12:52.480 --> 12:54.480
或者数据错乱的情况

12:54.480 --> 12:55.480
那我该怎么处理呢

12:55.480 --> 12:57.480
因为你不需要做任何处理

12:57.480 --> 12:58.480
因为这种事情

12:58.480 --> 13:00.480
TCP就会帮你搞定

13:00.480 --> 13:01.480
一旦这边

13:01.480 --> 13:03.480
长时间没有收到确认

13:03.480 --> 13:04.480
它会怎么样呢

13:04.480 --> 13:05.480
它就会重发

13:05.480 --> 13:07.480
这个数据就重发过去了

13:07.480 --> 13:08.480
如果说还没确认

13:08.480 --> 13:09.480
那就一直重发

13:09.480 --> 13:11.480
一直重发必须要给我确认

13:11.480 --> 13:12.480
懂的意思吧

13:12.480 --> 13:14.480
就这个意思

13:14.480 --> 13:16.480
这就是发送可靠传输

13:16.480 --> 13:18.480
就是它是怎么做的

13:18.480 --> 13:19.480
就收发数据

13:19.480 --> 13:21.480
好 接下来重点来了

13:21.480 --> 13:22.480
我们要讲面试题

13:22.480 --> 13:24.480
重点就是三次握手

13:24.480 --> 13:25.480
和四次回手

13:25.480 --> 13:26.480
一个是建立连接

13:26.480 --> 13:27.480
一个是销毁连接

13:27.480 --> 13:28.480
我们来看一下

13:28.480 --> 13:30.480
建立连接

13:30.480 --> 13:31.480
我们把它称之为三次握手

13:31.480 --> 13:32.480
以后就知道

13:32.480 --> 13:33.480
为什么称之为三次握手了

13:33.480 --> 13:34.480
所以我要解释一下

13:34.480 --> 13:37.480
这连接到底是啥东西

13:37.480 --> 13:38.480
你跟你朋友打电话

13:38.480 --> 13:39.480
打电话的时候

13:39.480 --> 13:40.480
我们知道

13:40.480 --> 13:41.480
有一条电话线

13:41.480 --> 13:42.480
把你们连走了

13:42.480 --> 13:43.480
那么这里的连接

13:43.480 --> 13:45.480
它不是指内根线

13:45.480 --> 13:46.480
这里的连接

13:46.480 --> 13:49.480
实施就是一块内存空间

13:49.480 --> 13:50.480
你要跟

13:50.480 --> 13:51.480
就是双方之间

13:51.480 --> 13:53.480
要用TCP来进行通信的话

13:53.480 --> 13:55.480
双方都必须要去开辟

13:55.480 --> 13:56.480
一块独立的内存空间

13:56.480 --> 13:57.480
那么这个内存空间里面

13:57.480 --> 13:58.480
主要是保存一些

13:58.480 --> 13:59.480
缓冲数据缓冲区

13:59.480 --> 14:00.480
和一些变量

14:00.480 --> 14:01.480
这些东西

14:01.480 --> 14:03.480
我们不做了解

14:03.480 --> 14:04.480
你要去了解这个玩意

14:04.480 --> 14:06.480
那就有点麻烦了

14:06.480 --> 14:07.480
就不是一节课

14:07.480 --> 14:08.480
可能得一个课程

14:08.480 --> 14:09.480
才能搞定的

14:09.480 --> 14:10.480
我们不需要了解这么多

14:10.480 --> 14:11.480
总之你必须要有内存空间

14:11.480 --> 14:12.480
没有这个内存空间

14:12.480 --> 14:14.480
玩不了TCP

14:14.480 --> 14:15.480
TCP是玩不了的

14:15.480 --> 14:16.480
那么结果就造成了

14:16.480 --> 14:17.480
什么了

14:17.480 --> 14:18.480
下面一张示意图

14:18.480 --> 14:19.480
比方说我们常见的

14:19.480 --> 14:21.480
这种客户端服务器模式

14:21.480 --> 14:23.480
我有一个服务器

14:23.480 --> 14:24.480
我这里有一个服务器

14:24.480 --> 14:26.480
那么比方说有三个电脑

14:26.480 --> 14:28.480
来给我建立连接

14:28.480 --> 14:30.480
来给我建立TCP连接

14:30.480 --> 14:31.480
那么这个时候

14:31.480 --> 14:32.480
服务器就会有

14:32.480 --> 14:33.480
三块内存空间

14:33.480 --> 14:34.480
比如说

14:34.480 --> 14:35.480
这台电脑

14:35.480 --> 14:36.480
要给我建立连接

14:36.480 --> 14:38.480
当我可以开一片内存空间

14:38.480 --> 14:39.480
那么这个电脑也是

14:39.480 --> 14:40.480
也开一块

14:40.480 --> 14:41.480
那么这个电脑也会开一块

14:41.480 --> 14:43.480
就会有三块内存空间

14:43.480 --> 14:44.480
那么这些电脑

14:44.480 --> 14:45.480
就是连接的客户端

14:45.480 --> 14:47.480
它自己也会有内存空间

14:47.480 --> 14:49.480
你看我们这个连接2

14:49.480 --> 14:50.480
这里是不是有一块

14:50.480 --> 14:51.480
是不是对应的

14:51.480 --> 14:52.480
对不对

14:52.480 --> 14:54.480
其实你同一个图里边

14:54.480 --> 14:56.480
也会看出这个TCP

14:56.480 --> 14:58.480
可靠爽不爽的

14:58.480 --> 15:00.480
它的缺点也很明显

15:00.480 --> 15:01.480
特别占用资源

15:01.480 --> 15:03.480
这个连接特别占用资源

15:03.480 --> 15:05.480
比方说他跟他

15:05.480 --> 15:08.480
想聊一天

15:08.480 --> 15:09.480
那么这个时候

15:09.480 --> 15:10.480
这个连接

15:10.480 --> 15:11.480
内存空间是不能销毁的

15:11.480 --> 15:13.480
是不能释放的

15:13.480 --> 15:15.480
要不就连接就没了

15:15.480 --> 15:16.480
说不能释放

15:16.480 --> 15:17.480
有这个内存空间

15:17.480 --> 15:18.480
我们才能玩

15:18.480 --> 15:19.480
是这么个意思

15:19.480 --> 15:20.480
就连接

15:20.480 --> 15:21.480
那么这个内存空间

15:21.480 --> 15:22.480
是如何建立的呢

15:22.480 --> 15:23.480
就连接的过程

15:23.480 --> 15:24.480
是怎么回事呢

15:24.480 --> 15:26.480
那么它会经过三个阶段

15:26.480 --> 15:28.480
我们称之为三次过手

15:28.480 --> 15:29.480
那么怎么

15:29.480 --> 15:31.480
哪三个阶段呢

15:31.480 --> 15:32.480
非常简单

15:32.480 --> 15:34.480
我给你签个例子

15:34.480 --> 15:35.480
比方说

15:35.480 --> 15:37.480
你跟别人打电话

15:37.480 --> 15:38.480
通话

15:38.480 --> 15:39.480
一开始的时候

15:39.480 --> 15:40.480
比方说你微信

15:40.480 --> 15:41.480
微信语音

15:41.480 --> 15:42.480
一开始的时候

15:42.480 --> 15:44.480
因为网络可能不太好

15:44.480 --> 15:46.480
那么这个时候

15:46.480 --> 15:47.480
你会先做这么一件事

15:47.480 --> 15:48.480
你会先说

15:48.480 --> 15:50.480
打过去过后先说

15:50.480 --> 15:51.480
我说话你能听见吗

15:51.480 --> 15:52.480
对方说

15:52.480 --> 15:53.480
我能听见

15:53.480 --> 15:55.480
那我说话你能听见吗

15:55.480 --> 15:56.480
你说能听见

15:56.480 --> 15:58.480
好几下就可以聊了

15:58.480 --> 15:59.480
就这么简单

15:59.480 --> 16:00.480
这就是三次过手

16:00.480 --> 16:02.480
用大白话来解释

16:02.480 --> 16:04.480
具体的呢

16:04.480 --> 16:05.480
就是下面的那张图

16:05.480 --> 16:06.480
看一下

16:06.480 --> 16:08.480
我要详细的解释一下

16:08.480 --> 16:09.480
本人你看不懂

16:09.480 --> 16:10.480
你看

16:10.480 --> 16:11.480
其实就是这三次

16:11.480 --> 16:13.480
我说话你能听见吗

16:13.480 --> 16:14.480
我能听见

16:14.480 --> 16:16.480
我说话你能听见吗

16:16.480 --> 16:17.480
我也能听见

16:17.480 --> 16:18.480
OK

16:18.480 --> 16:19.480
开始玩了

16:19.480 --> 16:20.480
就这么一个过程

16:20.480 --> 16:21.480
来吧

16:21.480 --> 16:22.480
一开始呢

16:22.480 --> 16:24.480
首先你要建立连接

16:24.480 --> 16:26.480
必须要从一方发起

16:26.480 --> 16:27.480
我们为什么会有

16:27.480 --> 16:29.480
客户端服务器的这个概念

16:29.480 --> 16:31.480
其实就是

16:31.480 --> 16:32.480
关键

16:32.480 --> 16:34.480
对于TCP这个协议而言

16:34.480 --> 16:36.480
为什么会有客户端服务器

16:36.480 --> 16:38.480
客户端是啥意思

16:38.480 --> 16:40.480
发起连接者

16:40.480 --> 16:42.480
服务器是啥意思

16:42.480 --> 16:45.480
接收连接者

16:45.480 --> 16:46.480
就是连接一定是

16:46.480 --> 16:48.480
从客户端发起的

16:48.480 --> 16:50.480
然后服务器接收的

16:50.480 --> 16:52.480
或者说欢过来

16:52.480 --> 16:54.480
发起连接者叫客户端

16:54.480 --> 16:56.480
接收连接者叫服务器

16:56.480 --> 16:58.480
所以说客户端服务器的概念

16:58.480 --> 17:00.480
是TCP这个发起连接

17:00.480 --> 17:01.480
造成的

17:01.480 --> 17:03.480
如果说连接一

17:03.480 --> 17:04.480
一旦建好之后

17:04.480 --> 17:06.480
其实就没有这个概念了

17:06.480 --> 17:08.480
对TCP而言

17:09.480 --> 17:11.480
你看连接一旦建好过

17:11.480 --> 17:12.480
你可不觉得我发

17:12.480 --> 17:13.480
我也可以主动给你发

17:13.480 --> 17:15.480
双方就没有什么客户端

17:15.480 --> 17:16.480
服务器这种概念了

17:16.480 --> 17:18.480
懂的意思吧

17:18.480 --> 17:20.480
好 我们这里

17:20.480 --> 17:21.480
下载

17:21.480 --> 17:22.480
看一下三次我是怎么做的

17:22.480 --> 17:24.480
首先一端一方

17:24.480 --> 17:26.480
表示我想给你通过话

17:26.480 --> 17:27.480
那我要建立连接

17:27.480 --> 17:29.480
在建立连接之前

17:29.480 --> 17:30.480
他们是关闭的状态

17:30.480 --> 17:31.480
就是连接肯定是关闭的

17:31.480 --> 17:32.480
没有连接嘛

17:32.480 --> 17:34.480
那服务器这边也是

17:34.480 --> 17:36.480
不过服务器会监听一个端口

17:37.480 --> 17:38.480
建立连接

17:40.480 --> 17:42.480
首先一方表示

17:42.480 --> 17:44.480
我要给你建立连接了

17:44.480 --> 17:45.480
我要想给你通话

17:45.480 --> 17:46.480
聊一些事情

17:46.480 --> 17:47.480
那么这个时候

17:47.480 --> 17:51.050
他会在头里边

17:51.050 --> 17:52.050
在这

17:52.050 --> 17:54.050
在头里边

17:54.050 --> 17:56.050
这些顾外的信息都在头里边

17:57.050 --> 17:58.050
过在头里边

17:58.050 --> 18:00.050
给你加上两个东西

18:00.050 --> 18:01.050
我们只关注其中一个

18:01.050 --> 18:02.050
叫SYN

18:02.050 --> 18:04.050
SYN叫什么意思呢

18:04.050 --> 18:05.050
你们学过GS

18:05.050 --> 18:07.050
GS里面是不是有个ASYN

18:08.050 --> 18:10.050
还有一个C

18:10.050 --> 18:12.050
ASYN是什么意思呢

18:12.050 --> 18:13.050
SYNCHRIS

18:13.050 --> 18:15.050
表示一步的

18:15.050 --> 18:17.050
ASYN

18:17.050 --> 18:20.050
ASYN叫做SYNCHRIS

18:20.050 --> 18:22.050
叫做同步的

18:22.050 --> 18:23.050
同步的意思

18:23.050 --> 18:24.050
所谓同步的意思呢

18:24.050 --> 18:26.050
就是说我要给你

18:26.050 --> 18:27.050
建立一个通话

18:27.050 --> 18:28.050
我们要同步

18:28.050 --> 18:29.050
同步发消息

18:29.050 --> 18:30.050
就同步

18:31.050 --> 18:32.050
如果说你一定发了

18:32.050 --> 18:34.050
他发的这个数据报的头里边

18:34.050 --> 18:35.050
有这么一个东西

18:35.050 --> 18:36.050
等于一就表示

18:36.050 --> 18:37.050
我这一次的数据报

18:37.050 --> 18:39.050
是一个特殊的数据报

18:39.050 --> 18:40.050
我想给你建立

18:40.050 --> 18:41.050
连接的数据报

18:41.050 --> 18:42.050
对吧

18:42.050 --> 18:43.050
我还不着急给你发什么消息

18:43.050 --> 18:44.050
然后呢

18:44.050 --> 18:46.050
会这里边表示

18:46.050 --> 18:48.050
这边之前看过是吧

18:48.050 --> 18:49.050
数据编号

18:49.050 --> 18:50.050
对不对

18:50.050 --> 18:51.050
这个数据编号

18:51.050 --> 18:52.050
为什么在这呢

18:52.050 --> 18:53.050
这个了解一下就行了

18:53.050 --> 18:54.050
这个不是我们的

18:54.050 --> 18:55.050
考察重点

18:55.050 --> 18:56.050
你只需要知道

18:56.050 --> 18:57.050
这个东西就行了

18:57.050 --> 18:58.050
这个是很重要的

18:58.050 --> 18:59.050
这个规设的

18:59.050 --> 19:00.050
了解一下就行了

19:00.050 --> 19:01.050
就是你渐渐连接的时候

19:01.050 --> 19:02.050
其实也可以给他发

19:02.050 --> 19:03.050
发一些数据过去

19:03.050 --> 19:05.050
可以发也可以不发

19:05.050 --> 19:06.050
也可以发一个

19:06.050 --> 19:08.050
一个字节的空白

19:08.050 --> 19:09.050
数据过去

19:09.050 --> 19:11.050
也可以啥都没带

19:11.050 --> 19:12.050
都行

19:12.050 --> 19:13.050
所以说我这里写到这

19:13.050 --> 19:15.050
然后呢

19:15.050 --> 19:18.050
这个发过去过后

19:18.050 --> 19:19.050
这边

19:19.050 --> 19:20.050
刻骨端这边

19:20.050 --> 19:22.050
进入到了一个sint

19:22.050 --> 19:23.050
咋意思呢

19:23.050 --> 19:24.050
就表示同步的消息

19:24.050 --> 19:25.050
已经发送出去了

19:25.050 --> 19:26.050
但是呢

19:26.050 --> 19:28.050
我还没有收到确认

19:28.050 --> 19:29.050
就相当于是

19:29.050 --> 19:30.050
你说的

19:30.050 --> 19:32.050
我说话你能听见吗

19:32.050 --> 19:34.050
对方还没有回答

19:34.050 --> 19:35.050
所以说这个时候

19:35.050 --> 19:37.050
还无法真正的建立连接

19:37.050 --> 19:38.050
这个时候要等待

19:38.050 --> 19:39.050
就是我的同步消息发送去了

19:39.050 --> 19:40.050
但是呢

19:40.050 --> 19:41.050
对方还没有确认

19:41.050 --> 19:42.050
那么对方收到了过后

19:42.050 --> 19:45.050
他的状态就变成了sint received

19:45.050 --> 19:48.050
表示同步消息收到了

19:48.050 --> 19:50.050
表示说这个状态

19:50.050 --> 19:51.050
就相当于是

19:51.050 --> 19:52.050
服务器这边听到了

19:52.050 --> 19:53.050
他这边说话

19:53.050 --> 19:54.050
那么就表示

19:54.050 --> 19:55.050
他的消息我已经收到了

19:55.050 --> 19:57.050
那么我还要重新问一个

19:57.050 --> 19:58.050
对吧

19:58.050 --> 19:59.050
问了过后

19:59.050 --> 20:00.050
别人还要回答

20:00.050 --> 20:01.050
我才能建立连接

20:01.050 --> 20:04.050
就发出一个确认

20:04.050 --> 20:05.050
表示说

20:05.050 --> 20:06.050
你刚才的同步

20:06.050 --> 20:07.050
想建立连接

20:07.050 --> 20:08.050
行

20:08.050 --> 20:10.050
我这边也可以给你建立连接

20:10.050 --> 20:11.050
对吧

20:11.050 --> 20:12.050
同意

20:12.050 --> 20:13.050
看着

20:13.050 --> 20:15.050
ack等于1表示确认

20:15.050 --> 20:16.050
OK

20:16.050 --> 20:17.050
那能不能不确认呢

20:17.050 --> 20:18.050
可以不确认

20:18.050 --> 20:19.050
结果你就完事了

20:19.050 --> 20:20.050
你不干

20:20.050 --> 20:21.050
不干确认就行了

20:21.050 --> 20:23.050
他就没法了

20:23.050 --> 20:25.050
你给他ack等于1

20:25.050 --> 20:27.050
表示说我可以

20:27.050 --> 20:28.050
确认了

20:28.050 --> 20:29.050
你刚才的同步

20:29.050 --> 20:30.050
我接受

20:30.050 --> 20:31.050
然后呢

20:31.050 --> 20:33.050
我确实也想给你同步

20:33.050 --> 20:35.550
懂了意思吧

20:35.550 --> 20:37.550
你能听见吗

20:37.550 --> 20:38.550
我能听见

20:38.550 --> 20:40.550
你能听见我说话吗

20:40.550 --> 20:41.550
就这个意思

20:41.550 --> 20:42.550
后边两个

20:42.550 --> 20:43.550
不用管了

20:43.550 --> 20:44.550
后边两个

20:44.550 --> 20:45.550
就是这个玩意

20:45.550 --> 20:46.550
你们知道

20:46.550 --> 20:47.550
刚才说过了

20:47.550 --> 20:48.550
确认这个序号的

20:48.550 --> 20:49.550
这个玩意

20:49.550 --> 20:50.550
就表示我这边

20:50.550 --> 20:51.550
也可以带个序号

20:51.550 --> 20:52.550
因为他那边

20:52.550 --> 20:53.550
可能也有一些数据

20:53.550 --> 20:54.550
发过来

20:54.550 --> 20:55.550
顺便发过来

20:55.550 --> 20:56.550
这个东西不用去管

20:56.550 --> 20:58.550
我们就看关键点就行了

20:58.550 --> 20:59.550
顺1

20:59.550 --> 21:02.550
然后这边

21:02.550 --> 21:03.550
好

21:03.550 --> 21:04.550
那么这样子

21:04.550 --> 21:05.550
你看客户庄这边

21:05.550 --> 21:06.550
这边收到了

21:06.550 --> 21:07.550
是不是这边就OK了

21:07.550 --> 21:08.550
对不对

21:08.550 --> 21:09.550
至少说明

21:09.550 --> 21:11.550
我这边到这儿是同的

21:11.550 --> 21:12.550
这边到这儿是同的

21:12.550 --> 21:13.550
对吧

21:13.550 --> 21:14.550
我都收到了

21:14.550 --> 21:15.550
我发出去也收到了

21:15.550 --> 21:16.550
说明我这边是同的

21:16.550 --> 21:17.550
所以他的状态就变了

21:17.550 --> 21:18.550
变成了

21:18.550 --> 21:21.550
已经建立好连接了

21:21.550 --> 21:23.550
established

21:23.550 --> 21:24.550
建立好连接了

21:24.550 --> 21:25.550
他的状态变了

21:25.550 --> 21:27.550
但对他二言还不行

21:28.550 --> 21:30.550
因为对他二言的话

21:30.550 --> 21:31.550
他只是知道

21:31.550 --> 21:32.550
我接收到了东西

21:32.550 --> 21:34.550
他说的话我听到了

21:34.550 --> 21:35.550
但是我说的话

21:35.550 --> 21:36.550
他也没听到

21:36.550 --> 21:37.550
我还不知道

21:37.550 --> 21:38.550
所以说那边

21:38.550 --> 21:39.550
还得有个确认过来

21:39.550 --> 21:40.550
SKE

21:40.550 --> 21:41.550
这两个都可以不用看

21:41.550 --> 21:43.550
SKE

21:43.550 --> 21:45.550
比如说你刚才的

21:45.550 --> 21:46.550
我的同步你收到了

21:46.550 --> 21:47.550
OK你确认了

21:47.550 --> 21:48.550
那么你的同步

21:48.550 --> 21:50.550
我还要给你确认一次

21:50.550 --> 21:51.550
那么直到这个确认

21:51.550 --> 21:52.550
到了服务器

21:52.550 --> 21:53.550
那么他也建立了

21:53.550 --> 21:54.550
好

21:54.550 --> 21:55.550
那么这个时候

21:55.550 --> 21:56.550
双方就可以传输出去了

21:56.550 --> 21:57.550
懂了意思吧

21:57.550 --> 21:58.550
就这么个意思

21:58.550 --> 22:01.550
这就是三四握手的握手

22:01.550 --> 22:02.550
结果也很简单

22:02.550 --> 22:03.550
你只需要

22:03.550 --> 22:04.550
这个玩意儿

22:04.550 --> 22:05.550
你把那个逻辑你清楚

22:05.550 --> 22:07.550
这个图你也不需要背

22:07.550 --> 22:08.550
你发出一个同步

22:08.550 --> 22:11.550
那我这边肯定是同步已发出

22:11.550 --> 22:13.550
那么这边收到同步过后

22:13.550 --> 22:15.550
那肯定是同步已收到

22:15.550 --> 22:16.550
对吧

22:16.550 --> 22:18.550
然后我再给他一个确认同步

22:18.550 --> 22:19.550
这边确认过后

22:19.550 --> 22:20.550
这边就完成了

22:20.550 --> 22:21.550
建立完成了

22:21.550 --> 22:22.550
那么这边再发出一个

22:22.550 --> 22:25.550
对刚才对方的同步的确认

22:25.550 --> 22:26.550
那么他那边也完成了

22:26.550 --> 22:27.550
所以说这个过程

22:27.550 --> 22:29.550
如果说面试体问到他问你

22:29.550 --> 22:32.550
TCP年间的过程就是三次握手

22:32.550 --> 22:33.550
怎么回答

22:33.550 --> 22:34.550
你就看

22:34.550 --> 22:36.550
先发一个声音到服务器

22:36.550 --> 22:38.550
然后他进入什么状态

22:38.550 --> 22:40.550
服务器给他回一个

22:40.550 --> 22:41.550
这个东西

22:41.550 --> 22:42.550
一个声音一个ACK

22:42.550 --> 22:44.550
然后他进入什么状态

22:44.550 --> 22:46.550
然后客户端这边收到过后

22:46.550 --> 22:48.550
客户端进入什么状态

22:48.550 --> 22:49.550
最后服务器端收到过后

22:49.550 --> 22:50.550
他又进入什么状态

22:50.550 --> 22:51.550
你就把这个过程

22:51.550 --> 22:53.550
给他描述清楚就行了

22:53.550 --> 22:54.550
这三次握手

22:54.550 --> 22:57.550
然后接下来是四次握手

22:57.550 --> 22:59.550
四次握手就是双方要挂电话了

22:59.550 --> 23:00.550
不聊了

23:00.550 --> 23:01.550
不聊的时候

23:01.550 --> 23:02.550
我们用一个

23:02.550 --> 23:04.550
现实生活中的例子来解释

23:04.550 --> 23:05.550
就是说

23:05.550 --> 23:07.550
你不拉不拉不拉

23:07.550 --> 23:08.550
讲了一大堆

23:08.550 --> 23:10.550
你说我说完了

23:10.550 --> 23:11.550
挂了吧

23:11.550 --> 23:12.550
你能不能直接挂

23:12.550 --> 23:13.550
你不能

23:13.550 --> 23:14.550
万一别人还没说完了

23:14.550 --> 23:15.550
对不对

23:15.550 --> 23:16.550
你不能直接挂

23:16.550 --> 23:17.550
你要问一下

23:17.550 --> 23:18.550
我说完了

23:18.550 --> 23:19.550
挂了吗

23:19.550 --> 23:20.550
对方说

23:20.550 --> 23:21.550
我明白你说完了

23:21.550 --> 23:23.550
首先你最后一句话说出来了

23:23.550 --> 23:24.550
你硬嘛

23:24.550 --> 23:25.550
要回应你确认

23:25.550 --> 23:26.550
每一个消息都要确认的

23:26.550 --> 23:28.550
我确认你说完了

23:28.550 --> 23:29.550
但是你偏别忙挂

23:29.550 --> 23:31.550
我可能还有话说

23:31.550 --> 23:32.550
因为服务器端那边

23:32.550 --> 23:33.550
可能还数据还没发送完

23:33.550 --> 23:34.550
对吧

23:34.550 --> 23:35.550
还有一些收尾工作

23:35.550 --> 23:36.550
那么服务器要继续说

23:36.550 --> 23:37.550
不拉不拉不拉

23:37.550 --> 23:38.550
他说完了

23:38.550 --> 23:39.550
他也说完了

23:39.550 --> 23:40.550
那我们挂了吗

23:40.550 --> 23:41.550
客户端那边说

23:41.550 --> 23:42.550
好吧

23:42.550 --> 23:43.550
那挂了吧

23:43.550 --> 23:44.550
最后就结束了

23:44.550 --> 23:45.550
所以这里

23:45.550 --> 23:47.550
销毁的时候是四次握手

23:47.550 --> 23:48.550
需要进行四次

23:48.550 --> 23:49.550
一

23:49.550 --> 23:50.550
二

23:50.550 --> 23:51.550
三

23:51.550 --> 23:52.550
好

23:52.550 --> 23:53.550
我们来看具体的过程

23:53.550 --> 23:55.550
四次握手

23:55.550 --> 23:57.550
一开始他们传输

23:57.550 --> 23:58.550
数据传输的好好的

23:58.550 --> 23:59.550
对吧

23:59.550 --> 24:00.550
他们都是这个状态

24:00.550 --> 24:01.550
我们之前是建立连接的状态

24:01.550 --> 24:02.550
对吧

24:02.550 --> 24:03.550
你是Tab

24:03.550 --> 24:04.550
建立连接的状态

24:04.550 --> 24:05.550
好

24:05.550 --> 24:06.550
突然有一天

24:06.550 --> 24:07.550
那个一方

24:07.550 --> 24:08.550
当然是可以是任回一方

24:08.550 --> 24:09.550
这个挥手的话

24:09.550 --> 24:10.550
我们知道

24:10.550 --> 24:12.550
连接的建立必须是客户端

24:12.550 --> 24:13.550
发到服务器

24:13.550 --> 24:14.550
对吧

24:14.550 --> 24:15.550
但是挥手的话

24:15.550 --> 24:16.550
就是销毁的话

24:16.550 --> 24:17.550
那可以服务器主动销毁

24:17.550 --> 24:18.550
也可以客户端主动销毁

24:18.550 --> 24:19.550
反正一方就是

24:19.550 --> 24:20.550
我不想跟你说了

24:20.550 --> 24:21.550
那么这个时候

24:21.550 --> 24:23.550
就一方就可以给另一方发送

24:23.550 --> 24:25.550
一个特殊的状态

24:25.550 --> 24:26.550
叫Felix

24:26.550 --> 24:27.550
Finn

24:27.550 --> 24:28.550
叫Felix

24:28.550 --> 24:29.550
完成

24:29.550 --> 24:30.550
把它设为一

24:30.550 --> 24:31.550
只要发送

24:31.550 --> 24:32.550
把它设为一的话

24:32.550 --> 24:33.550
就表示这一次数据报

24:33.550 --> 24:35.550
表示我要销毁连接

24:35.550 --> 24:36.550
当然销毁连接之最后

24:36.550 --> 24:37.550
其实目的就是

24:37.550 --> 24:39.550
把这个空间给它释放掉

24:39.550 --> 24:40.550
对吧

24:40.550 --> 24:41.550
不玩了

24:41.550 --> 24:42.550
就这个意思

24:42.550 --> 24:43.550
好

24:43.550 --> 24:44.550
然后首先一个Finn

24:44.550 --> 24:45.550
发过去

24:45.550 --> 24:46.550
其他都不用看

24:46.550 --> 24:47.550
拿着去看其他的

24:47.550 --> 24:48.550
发过去

24:48.550 --> 24:49.550
发过去过后

24:49.550 --> 24:51.550
它这边的状态

24:51.550 --> 24:52.550
变成了这个

24:52.550 --> 24:53.550
我们先不看状态

24:53.550 --> 24:55.550
我们先看整个过程

24:55.550 --> 24:56.550
发过去

24:56.550 --> 24:57.550
发过去过后

24:57.550 --> 24:58.550
这边我要回馈

24:59.550 --> 25:01.550
回馈ACK等于一

25:01.550 --> 25:02.550
这啥意思呢

25:02.550 --> 25:03.550
就表示

25:03.550 --> 25:05.550
我说完了

25:05.550 --> 25:06.550
挂了吗

25:07.550 --> 25:08.550
我知道你说完了

25:08.550 --> 25:09.550
确认吗

25:09.550 --> 25:10.550
知道你说完了

25:10.550 --> 25:12.550
但是还不着急

25:12.550 --> 25:14.550
好 接下来干嘛呢

25:14.550 --> 25:15.550
接下来就是

25:15.550 --> 25:16.550
服务器可能还有一些

25:16.550 --> 25:17.550
就是另一方

25:17.550 --> 25:19.550
还可能有一些数据要传输

25:19.550 --> 25:20.550
那么这个时候还可以传输

25:20.550 --> 25:21.550
可以传输的没问题

25:21.550 --> 25:23.550
这边也可以争取了接收

25:23.550 --> 25:24.550
但是它不会往这边传输了

25:24.550 --> 25:26.550
就这边没有了

25:26.550 --> 25:27.550
知道意思吧

25:27.550 --> 25:28.550
这边还可以

25:28.550 --> 25:29.550
懂吗

25:29.550 --> 25:30.550
那么它可以传输

25:30.550 --> 25:31.550
一些数据过去

25:31.550 --> 25:32.550
如果它那边也说完了

25:32.550 --> 25:34.550
它就会加一个

25:34.550 --> 25:35.550
在最后一个数据里面

25:35.550 --> 25:36.550
就会加一个

25:36.550 --> 25:37.550
我也说完了

25:37.550 --> 25:38.550
这个地方

25:38.550 --> 25:39.550
注意啊

25:39.550 --> 25:40.550
这个地方我这里

25:41.550 --> 25:42.550
不应该是灰色

25:42.550 --> 25:43.550
这是重要的

25:43.550 --> 25:44.550
第1

25:45.550 --> 25:46.550
这边我告诉他

25:46.550 --> 25:47.550
这两个就不用看了

25:47.550 --> 25:48.550
灰等于1

25:48.550 --> 25:50.550
表示我也说完了

25:50.550 --> 25:51.550
然后再顺便

25:51.550 --> 25:52.550
再重新确认一下之前的

25:52.550 --> 25:53.550
这个玩意

25:53.550 --> 25:55.550
为什么要重新确认一下之前的

25:55.550 --> 25:57.550
你们就不用去关心了

25:57.550 --> 25:58.550
主要是这个

25:58.550 --> 25:59.550
灰

25:59.550 --> 26:00.550
以后把图重新做一下

26:00.550 --> 26:01.550
这个地方是黑色的

26:01.550 --> 26:02.550
这是重要的

26:04.550 --> 26:05.550
那么这个东西

26:05.550 --> 26:06.550
表示说

26:06.550 --> 26:07.550
我服务器也说完了

26:07.550 --> 26:08.550
服务器说完了过

26:08.550 --> 26:09.550
你也得确认

26:09.550 --> 26:11.550
你知不知道服务器也说完了

26:11.550 --> 26:13.550
那么这边再回复一个确认

26:13.550 --> 26:14.550
就是sq等于1

26:14.550 --> 26:15.550
表示我知道

26:15.550 --> 26:16.550
你服务器也完了

26:16.550 --> 26:17.550
那么双方就结束了

26:18.550 --> 26:19.550
那么我们来看状态

26:20.550 --> 26:21.550
首先这边

26:21.550 --> 26:22.550
客户端这边

26:22.550 --> 26:23.550
在小鬼连接的时候

26:23.550 --> 26:24.550
他发出一个想结束

26:24.550 --> 26:25.550
他想结束

26:25.550 --> 26:26.550
他说完了

26:26.550 --> 26:28.550
那么他进入第1个状态

26:28.550 --> 26:29.550
叫位置1

26:29.550 --> 26:31.550
菲利西位置1

26:32.550 --> 26:34.550
然后等到服务器那边

26:34.550 --> 26:35.550
说我知道了

26:35.550 --> 26:37.550
我知道你想挂电话了

26:37.550 --> 26:38.550
我知道了

26:39.550 --> 26:40.550
然后他进入那个

26:41.550 --> 26:42.550
位置2

26:42.550 --> 26:43.550
你看这两个状态是不一样的

26:43.550 --> 26:44.550
位置1的时候

26:44.550 --> 26:45.550
他要等待什么

26:45.550 --> 26:46.550
等待服务器的确认

26:46.550 --> 26:48.550
你知不知道我想挂电话了

26:48.550 --> 26:49.550
你要确认

26:49.550 --> 26:50.550
位置2的时候

26:50.550 --> 26:51.550
是等待什么

26:51.550 --> 26:53.550
等待服务器剩下的一些数据传输

26:54.550 --> 26:55.550
这是两个不一样的阶段

26:55.550 --> 26:56.550
当然他们有一些区别

26:56.550 --> 26:58.550
但是我们不用去深究了

26:59.550 --> 27:00.550
好

27:00.550 --> 27:01.550
那么服务器

27:01.550 --> 27:03.550
把这个确认消息发出来过后

27:03.550 --> 27:04.550
服务器就表示说

27:04.550 --> 27:06.550
我知道客户端那边

27:06.550 --> 27:08.550
想小鬼连接了

27:08.550 --> 27:10.550
他会进入另外一个状态

27:10.550 --> 27:11.550
叫做close wait

27:12.550 --> 27:14.550
等待关闭

27:14.550 --> 27:16.550
因为为什么要等待关闭呢

27:16.550 --> 27:17.550
是因为我这边

27:17.550 --> 27:19.550
还有数据没有发完

27:19.550 --> 27:20.550
那么在这个状态里边

27:20.550 --> 27:22.550
客户端那边再想发数据

27:22.550 --> 27:23.550
我不认了

27:23.550 --> 27:24.550
东西是吧

27:24.550 --> 27:25.550
因为他那边说了

27:25.550 --> 27:26.550
他已经发完了

27:26.550 --> 27:28.550
他后面又给我发一些

27:28.550 --> 27:29.550
额外的数据

27:29.550 --> 27:30.550
我就不认了

27:30.550 --> 27:31.550
就这么个意思

27:31.550 --> 27:32.550
好

27:32.550 --> 27:33.550
然后直到有一天服务器那边

27:33.550 --> 27:35.550
觉得我的数据也说发完了

27:35.550 --> 27:37.550
于是他发了这么一个消息

27:38.550 --> 27:39.550
对吧

27:39.550 --> 27:40.550
好

27:40.550 --> 27:41.550
他说这么多呢

27:41.550 --> 27:45.760
主要是要解释这个东西

27:45.760 --> 27:46.760
time wait

27:46.760 --> 27:47.760
你想啊

27:47.760 --> 27:49.760
对于客户端而言

27:49.760 --> 27:51.760
对于这一方而言

27:51.760 --> 27:52.760
我说完了

27:52.760 --> 27:54.760
对方也知道我说完了

27:54.760 --> 27:55.760
然后对方又告诉我

27:55.760 --> 27:56.760
他也说完了

27:56.760 --> 27:58.760
我就不应该关闭了吗

27:58.760 --> 28:01.760
是不是应该关闭了

28:01.760 --> 28:02.760
那为什么

28:02.760 --> 28:05.760
我这要等各一段时间呢

28:05.760 --> 28:06.760
等的是2msl

28:06.760 --> 28:08.760
那么这个2msl是什么意思呢

28:08.760 --> 28:09.760
就相当于是

28:09.760 --> 28:11.760
数据一个来回的时间

28:12.760 --> 28:13.760
他为什么要去

28:13.760 --> 28:14.760
等这么一段时间呢

28:14.760 --> 28:15.760
这个玩意

28:15.760 --> 28:16.760
他有可能一些

28:16.760 --> 28:17.760
比较深的面试

28:17.760 --> 28:18.760
他就会问你

28:18.760 --> 28:20.760
我看同学们遇到的

28:20.760 --> 28:21.760
还是比较少

28:21.760 --> 28:22.760
但是有可能会问到

28:22.760 --> 28:23.760
我遇到过

28:23.760 --> 28:24.760
但是比较少一点

28:24.760 --> 28:25.760
因为都讲到这儿来了

28:25.760 --> 28:27.760
这个也并不复杂

28:27.760 --> 28:28.760
所以说就去那边

28:28.760 --> 28:29.760
给同学们讲一讲

28:29.760 --> 28:31.760
那么他为什么会等

28:31.760 --> 28:32.760
这个时间呢

28:32.760 --> 28:33.760
你想得到的

28:33.760 --> 28:35.760
我们每一次发送

28:35.760 --> 28:36.760
都有可能会失败

28:37.760 --> 28:38.760
但如果说

28:38.760 --> 28:39.760
我不等就直接关闭了

28:39.760 --> 28:40.760
会有一个什么情况呢

28:40.760 --> 28:43.760
万一我这一次确认

28:43.760 --> 28:44.760
失败了

28:44.760 --> 28:46.760
中途断掉了

28:46.760 --> 28:48.760
服务器那边是不是受不到啊

28:48.760 --> 28:50.760
是不是受不到这个确认啊

28:50.760 --> 28:51.760
服务器受不到确认

28:51.760 --> 28:52.760
它就不能关闭

28:52.760 --> 28:53.760
对吧

28:53.760 --> 28:54.760
它还不能关闭

28:54.760 --> 28:55.760
然后呢服务器

28:55.760 --> 28:56.760
它就会重新发这个

28:56.760 --> 28:58.760
重新发这个东西

28:58.760 --> 28:59.760
不好意思

28:59.760 --> 29:00.760
重新发这个东西

29:00.760 --> 29:01.760
客户端这边

29:01.760 --> 29:03.760
已经关闭了

29:03.760 --> 29:04.760
比如说没有一个等待时间

29:04.760 --> 29:05.760
它已经关闭了

29:05.760 --> 29:06.760
然后导致呢

29:06.760 --> 29:07.760
服务器它就不停的重发

29:07.760 --> 29:08.760
不停的重发

29:08.760 --> 29:10.760
客户端那边又是关闭的

29:10.760 --> 29:11.760
它就回应不了

29:11.760 --> 29:13.760
导致服务器的连接释放不了

29:13.760 --> 29:14.760
懂了意思吧

29:14.760 --> 29:15.760
所以说呢

29:15.760 --> 29:17.760
我们要等一段时间啊

29:17.760 --> 29:18.760
等一段时间

29:18.760 --> 29:20.760
等服务器把这个东西收到

29:20.760 --> 29:21.760
为什么等一段时间

29:21.760 --> 29:22.760
我就可以知道了

29:22.760 --> 29:23.760
因为

29:23.760 --> 29:24.760
这个消息发出去

29:24.760 --> 29:26.760
如果说服务器收不到

29:27.760 --> 29:28.760
它收不到

29:28.760 --> 29:29.760
没有收到这个消息

29:29.760 --> 29:30.760
那么它就会重发

29:31.760 --> 29:32.760
那么重发过后

29:32.760 --> 29:33.760
我们就要重新

29:33.760 --> 29:34.760
等待这个时间

29:34.760 --> 29:36.760
就要重新等待

29:36.760 --> 29:37.760
两倍这个数据传输的时间

29:37.760 --> 29:38.760
就这么一个意思

29:40.760 --> 29:41.760
好那么就是

29:42.760 --> 29:43.760
做完什么

29:43.760 --> 29:44.760
这就是整个过程

29:45.760 --> 29:46.760
大家可以看到这个图

29:46.760 --> 29:47.760
就可以理解

29:47.760 --> 29:48.760
这是试试挥手

29:48.760 --> 29:50.760
当然简单的理解的话

29:50.760 --> 29:51.760
就是三次挥手

29:51.760 --> 29:52.760
就利用这种方式来理解

29:52.760 --> 29:53.760
就最简单的

29:53.760 --> 29:54.760
试试挥手就这样

29:54.760 --> 29:55.760
就简单的

29:55.760 --> 29:56.760
但是要回答

29:56.760 --> 29:58.760
面试题的话

29:59.760 --> 30:00.760
你得把它

30:00.760 --> 30:01.760
回答得详细一点

30:01.760 --> 30:02.760
这个玩意你背不住的

30:02.760 --> 30:03.760
你在

30:03.760 --> 30:05.760
去公司面试之前

30:05.760 --> 30:06.760
把它看一下

30:06.760 --> 30:07.760
过一下

30:08.760 --> 30:09.760
就可以了

30:09.760 --> 30:10.760
多过几遍其实还好

30:10.760 --> 30:11.760
还好

30:11.760 --> 30:12.760
这个图也并不复杂

30:12.760 --> 30:13.760
像这些里边的

30:13.760 --> 30:14.760
灰色的你不用看

30:14.760 --> 30:15.760
灰色的不用看

30:15.760 --> 30:16.760
你只看这个状态

30:16.760 --> 30:17.760
和黑色的东西就行了

30:18.760 --> 30:19.760
好这就是那个

30:20.760 --> 30:21.760
试试挥手

30:21.760 --> 30:22.760
那我们这一刻

30:22.760 --> 30:23.760
知识部分就讲完了

30:23.760 --> 30:24.760
最后我们来说一下

30:24.760 --> 30:25.760
两个东西

30:25.760 --> 30:26.760
一个是ADP和TCP的关系

30:26.760 --> 30:28.760
就我们平时学的ADP

30:28.760 --> 30:30.760
跟TCP到底是一个什么关系

30:30.760 --> 30:32.760
两个都是协议

30:32.760 --> 30:33.760
都是一个标准

30:33.760 --> 30:34.760
规定了什么什么事

30:34.760 --> 30:36.760
ADP协议是在应用程

30:36.760 --> 30:38.760
在最顶层的

30:38.760 --> 30:39.760
是在这的

30:40.760 --> 30:41.760
TCP协议是在这的

30:41.760 --> 30:42.760
那上层使用下层

30:42.760 --> 30:43.760
对不对

30:43.760 --> 30:44.760
它是一个这么一个关系

30:44.760 --> 30:45.760
ADP协议规定了

30:45.760 --> 30:47.760
就是内容格式

30:47.760 --> 30:48.760
结果传输了

30:48.760 --> 30:49.760
文本的内容格式是什么

30:49.760 --> 30:50.760
有什么寝球头

30:50.760 --> 30:51.760
寝球体

30:51.760 --> 30:52.760
状态码

30:52.760 --> 30:53.760
寝球方法都是ADP的

30:55.760 --> 30:56.760
那么他把这个消息

30:56.760 --> 30:57.760
封装好了之后

30:57.760 --> 30:58.760
是不是形成一个文本格式

30:58.760 --> 30:59.760
然后交给谁

30:59.760 --> 31:00.760
交给TCP去传输

31:01.760 --> 31:02.760
那么TCP要怎么传输

31:02.760 --> 31:04.760
他首先要建立连接

31:04.760 --> 31:06.760
然后再把争断

31:06.760 --> 31:08.760
把我们的字节按编号

31:08.760 --> 31:10.760
然后一部分一部分传过去

31:10.760 --> 31:13.760
最后没有什么都要说的

31:13.760 --> 31:14.760
就断开连接

31:14.760 --> 31:16.760
这些都是靠TCP来完成的

31:16.760 --> 31:19.760
我们ADP是对内容格式的规定

31:19.760 --> 31:21.760
它使用了

31:21.760 --> 31:24.760
上面把内容组装好过后

31:24.760 --> 31:26.760
就像调一个函数一样

31:26.760 --> 31:27.760
一个TCP函数

31:27.760 --> 31:29.760
你把内容过传过去

31:29.760 --> 31:31.760
它完成消息的可靠传输

31:32.760 --> 31:34.760
因此有了TCP的加持

31:34.760 --> 31:35.760
我们就不用关心

31:35.760 --> 31:36.760
那如果说

31:36.760 --> 31:38.760
这个数据中途丢失了怎么办

31:38.760 --> 31:40.760
或者这个数据包

31:40.760 --> 31:41.760
中途被干扰

31:41.760 --> 31:43.760
然后导致数据错误怎么办

31:43.760 --> 31:44.760
不可能

31:44.760 --> 31:46.760
不可能TCP会帮你搞定的个事

31:46.760 --> 31:48.760
它会进行重传

31:48.760 --> 31:49.760
所以我们不用去关心

31:49.760 --> 31:51.760
这个问题

31:51.760 --> 31:52.760
然后

31:52.760 --> 31:54.760
在具体的使用TCP的时候

31:54.760 --> 31:56.760
它可以对TCP做了这么一个操作

31:56.760 --> 31:57.760
大家知道

31:57.760 --> 31:59.760
第一个就是

31:59.760 --> 32:01.760
它规定了两个概念

32:01.760 --> 32:03.760
科普端发消息给服务器

32:03.760 --> 32:04.760
要做请求

32:04.760 --> 32:05.760
服务器发消息给科普端

32:05.760 --> 32:06.760
叫做响应

32:06.760 --> 32:07.760
这是它规定的第一个概念

32:07.760 --> 32:08.760
说我们请求响应

32:08.760 --> 32:09.760
来自于哪呢

32:09.760 --> 32:11.760
来自于ATDP

32:11.760 --> 32:13.760
这个协议

32:13.760 --> 32:15.760
然后使用ATDP协议的服务器

32:15.760 --> 32:18.760
它不会主动发消息给科普端

32:18.760 --> 32:19.760
啥意思

32:19.760 --> 32:20.760
就是TCP协议

32:20.760 --> 32:21.760
我们之前说

32:21.760 --> 32:22.760
TCP协议

32:22.760 --> 32:24.760
它在这个阶段

32:26.760 --> 32:27.760
TCP协议在这个阶段

32:27.760 --> 32:28.760
是可以随意发的

32:28.760 --> 32:30.760
它可以给它发消息

32:30.760 --> 32:32.760
只要建立好连接之后

32:32.760 --> 32:34.760
它也可以给它发消息

32:34.760 --> 32:35.760
对吧

32:35.760 --> 32:36.760
没有任何要求

32:36.760 --> 32:38.760
也可以它主动给它发消息

32:38.760 --> 32:39.760
它不回应

32:39.760 --> 32:40.760
都可以

32:40.760 --> 32:41.760
它没有这个要求的

32:41.760 --> 32:43.760
但是ATDP协议有要求

32:43.760 --> 32:44.760
因为它使用TCP的时候

32:44.760 --> 32:46.760
就像调函数的样子

32:46.760 --> 32:48.760
只使用了它部分的功能

32:48.760 --> 32:49.760
所以说

32:49.760 --> 32:50.760
在ATDP协议里边

32:50.760 --> 32:51.760
它不允许你服务器

32:51.760 --> 32:53.760
主动发消息的科普端

32:53.760 --> 32:55.760
但是TCP协议是可以的

32:55.760 --> 32:56.760
懂了意思吧

32:56.760 --> 32:58.760
这就是为什么

32:58.760 --> 32:59.760
我们那个使用ATDP的时候

32:59.760 --> 33:01.760
服务器没法主动推消息的科普端

33:01.760 --> 33:04.760
它只能对请求进行响应

33:05.760 --> 33:06.760
所以我们就是说

33:06.760 --> 33:08.760
ATDP协议就是请求响应模式

33:08.760 --> 33:10.760
一个请求发过去一个响应过来

33:10.760 --> 33:11.760
然后就没了

33:11.760 --> 33:14.760
下一次要双方通信就得重新发送请求

33:15.760 --> 33:17.760
第三个重要的特点

33:17.760 --> 33:19.760
每一个ATDP请求响应

33:19.760 --> 33:22.760
都要先建立TCP连接

33:22.760 --> 33:23.760
就三次握手

33:23.760 --> 33:24.760
然后完成请求响应

33:24.760 --> 33:26.760
再销毁连接事实挥手

33:27.760 --> 33:28.760
就啥意思呢

33:28.760 --> 33:31.760
比方说我要去发送一个阿迦赫斯请求

33:32.760 --> 33:33.760
一运行

33:33.760 --> 33:34.760
那么首先

33:34.760 --> 33:35.760
主动承ATDP格式

33:35.760 --> 33:36.760
对吧

33:36.760 --> 33:37.760
然后呢

33:37.760 --> 33:38.760
交给TCP

33:38.760 --> 33:39.760
三次连接

33:39.760 --> 33:40.760
三次握手

33:40.760 --> 33:42.760
然后再把消息发出去

33:42.760 --> 33:44.760
然后那边响应结果过来

33:44.760 --> 33:45.760
然后再试试挥手

33:45.760 --> 33:46.760
把连接断开

33:47.760 --> 33:48.760
对不对

33:49.760 --> 33:50.760
那我问你

33:50.760 --> 33:51.760
大家一个问题

33:51.760 --> 33:52.760
他为什么要这样做

33:52.760 --> 33:54.760
他为什么不一开始

33:54.760 --> 33:57.760
就在科普端和服务器之间

33:58.760 --> 33:59.760
建立好连接

33:59.760 --> 34:01.760
一开始就建立好连接

34:01.760 --> 34:02.760
就不断开吗

34:02.760 --> 34:04.760
你干嘛要断开呢

34:04.760 --> 34:05.760
你后边

34:05.760 --> 34:06.760
你不断开

34:06.760 --> 34:07.760
就说事情就很好

34:07.760 --> 34:08.760
很舒服了对吧

34:08.760 --> 34:09.760
你不断开的话

34:09.760 --> 34:11.760
那你后边

34:11.760 --> 34:13.760
你可以随意的发消息过去

34:13.760 --> 34:14.760
对吧

34:14.760 --> 34:15.760
你可以使用同一个连接

34:15.760 --> 34:16.760
因为我们知道建立连接

34:16.760 --> 34:17.760
要三次握手

34:17.760 --> 34:18.760
需要经过时间的

34:18.760 --> 34:19.760
你何必每一边

34:19.760 --> 34:21.760
我们有20个阿迦赫斯请求

34:21.760 --> 34:22.760
你对每一个请求

34:22.760 --> 34:23.760
何必每一次都要建立

34:23.760 --> 34:24.760
可以三次握手的

34:24.760 --> 34:25.760
对吧

34:25.760 --> 34:27.760
用同一个连接就完事了

34:28.760 --> 34:29.760
你不要去断

34:30.760 --> 34:31.760
你访问这个页面

34:31.760 --> 34:32.760
使用这个连接

34:32.760 --> 34:33.760
页面中的视野

34:33.760 --> 34:34.760
也使用这个连接

34:34.760 --> 34:35.760
那过一会

34:35.760 --> 34:36.760
页面中的图片

34:36.760 --> 34:37.760
也使用这个连接

34:37.760 --> 34:38.760
那过一会

34:38.760 --> 34:39.760
阿迦赫斯请求

34:39.760 --> 34:40.760
也使用这个连接

34:40.760 --> 34:41.760
都不要断开了

34:42.760 --> 34:43.760
懂不懂意思

34:43.760 --> 34:44.760
他为什么要这样做

34:45.760 --> 34:46.760
为了解约服务器资源

34:46.760 --> 34:47.760
就这个原因

34:49.760 --> 34:50.760
为了解约服务器资源

34:50.760 --> 34:51.760
那为什么这样

34:51.760 --> 34:52.760
可以解约服务器资源的

34:52.760 --> 34:53.760
他每次断开都可以

34:53.760 --> 34:54.760
每次要断开

34:54.760 --> 34:55.760
就是因为这个图

34:56.760 --> 34:57.760
你只要保持连接

34:57.760 --> 34:58.760
服务器会开一块

34:58.760 --> 34:59.760
类似空间

34:59.760 --> 35:00.760
那你想啊

35:00.760 --> 35:02.760
我们的微博服务器

35:02.760 --> 35:04.760
比方说一天

35:04.760 --> 35:06.760
来一个几十万人的访问

35:06.760 --> 35:07.760
那我如果说

35:07.760 --> 35:08.760
不销毁连接的话

35:08.760 --> 35:09.760
连接的话

35:09.760 --> 35:10.760
那这个连接

35:10.760 --> 35:11.760
类似空间开闭的不得了

35:11.760 --> 35:13.760
服务器很快就扛不住了

35:13.760 --> 35:15.760
他主要是为了解约服务器资源

35:15.760 --> 35:16.760
出于这么一个目的

35:17.760 --> 35:18.760
所以说呢

35:18.760 --> 35:20.760
他是牺牲了时间

35:21.760 --> 35:22.760
每一次都要建立

35:22.760 --> 35:23.760
三次握手

35:24.760 --> 35:25.760
换什么呢

35:25.760 --> 35:26.760
换空间

35:26.760 --> 35:27.760
解约服务器的空间资源

35:28.760 --> 35:29.760
是这么一个目的

35:30.760 --> 35:31.760
当然了

35:31.760 --> 35:32.760
这个东西呢

35:32.760 --> 35:33.760
以后说

35:33.760 --> 35:34.760
他好不好呢

35:35.760 --> 35:36.760
并不是很好

35:36.760 --> 35:37.760
这最初的做法

35:38.760 --> 35:39.760
那么现在的

35:39.760 --> 35:40.760
在ATB版本里边

35:40.760 --> 35:41.760
已经有一些变化了

35:41.760 --> 35:42.760
我们之后

35:42.760 --> 35:43.760
讲ATB版本的时候

35:43.760 --> 35:44.760
我们再想一说

35:45.760 --> 35:46.760
好

35:46.760 --> 35:47.760
这这样子做了

35:47.760 --> 35:48.760
他就会导致

35:48.760 --> 35:49.760
每一次请求

35:49.760 --> 35:50.760
响应都是独立的

35:50.760 --> 35:51.760
因为他们使用的是

35:51.760 --> 35:52.760
不同的连接

35:52.760 --> 35:53.760
保持状态

35:54.760 --> 35:55.760
ATB协议是无状态的协议

35:55.760 --> 35:56.760
这就是为什么

35:56.760 --> 35:57.760
我们需要什么

35:57.760 --> 35:58.760
哭泣啊

35:58.760 --> 35:59.760
施行啊对吧

35:59.760 --> 36:00.760
什么token那些东西

36:00.760 --> 36:01.760
在保持

36:01.760 --> 36:02.760
比方用户登陆

36:02.760 --> 36:03.760
我要知道这个用户

36:03.760 --> 36:04.760
之前登陆过

36:04.760 --> 36:05.760
但是两个都不是

36:05.760 --> 36:06.760
一个连接了

36:06.760 --> 36:07.760
我怎么知道呢

36:07.760 --> 36:08.760
所以说

36:08.760 --> 36:09.760
没法保持状态

36:09.760 --> 36:10.760
搞出了这么一个问题

36:10.760 --> 36:11.760
所以说我们需要

36:11.760 --> 36:12.760
对哭泣的技术

36:12.760 --> 36:13.760
施行的技术

36:13.760 --> 36:14.760
好

36:14.760 --> 36:15.760
那么这就是

36:15.760 --> 36:16.760
TCP这个协议

36:16.760 --> 36:17.760
我们学习的

36:17.760 --> 36:18.760
全部知识了

36:18.760 --> 36:19.760
好

36:19.760 --> 36:20.760
第二个题

36:20.760 --> 36:21.760
你看一下

36:21.760 --> 36:22.760
三次过程

36:22.760 --> 36:23.760
四次挥手的理解

36:23.760 --> 36:24.760
三次过程

36:24.760 --> 36:25.760
刚才的一坨

36:25.760 --> 36:27.760
加上四次挥手

36:27.760 --> 36:28.760
对吧

36:28.760 --> 36:29.760
我们自己看一下

36:29.760 --> 36:30.760
其实就是对

36:30.760 --> 36:31.760
上边的图片的描述

36:32.760 --> 36:33.760
好了

36:33.760 --> 36:34.760
本节课内容就到这了

36:34.760 --> 36:35.760
拜拜

