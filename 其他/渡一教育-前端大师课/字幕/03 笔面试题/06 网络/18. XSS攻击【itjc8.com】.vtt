WEBVTT

00:00.050 --> 00:02.930
好 来说一下这个XSS攻击

00:02.930 --> 00:05.970
这个攻击方式它非常非常的简单

00:05.970 --> 00:08.570
然后防御方式也比较简单

00:08.570 --> 00:13.490
但是这种攻击方式比我们之前讲的那个CSRF

00:13.490 --> 00:18.050
它还要狠毒 还要无耻 它无耻到什么程度呢

00:18.050 --> 00:21.690
那个CSRF你至少自己还要做一个网页对吧

00:21.690 --> 00:23.090
它连网页都不要了

00:23.090 --> 00:26.130
就利用你现在的网站来实现攻击

00:26.130 --> 00:29.170
它怎么攻击法呢 我们先大概看一下

00:29.330 --> 00:32.690
它的说写的叫做Cross-Site Scripting

00:32.690 --> 00:35.370
比较什么意思呢 表示夸占脚本攻击

00:35.370 --> 00:37.770
其他的说写的应该是CSRF

00:37.770 --> 00:40.450
只不过呢 它跟我们学习的一本语言 对吧

00:40.450 --> 00:43.130
Itema CSRF有点聪明了

00:43.130 --> 00:45.450
所以说把它改为了XSS

00:45.450 --> 00:47.370
它指的是攻击者利用网站

00:47.370 --> 00:49.570
大家看一下就行了

00:49.570 --> 00:52.290
我现在要解释一下这段话说的什么意思

00:52.290 --> 00:54.690
它是一个怎么样的攻击方式呢

00:54.690 --> 00:57.330
就是我们有的时候你们上网的过程中会发现

00:57.410 --> 01:00.450
有些网页特别像一些论坛 对吧

01:00.450 --> 01:02.770
像一些社交类的网站

01:02.770 --> 01:05.290
甚至一些内容的内容型的网站

01:05.290 --> 01:08.130
比方说像知乎这些贴吧这些地方

01:09.330 --> 01:12.970
那么用户是可以提交一些信息到服务器的

01:14.010 --> 01:16.330
比方说你的个人简介

01:16.330 --> 01:19.010
或者是你发的一个贴子的主题 对吧

01:19.010 --> 01:23.130
你贴子的内容或者是知乎里边的一些个人回复

01:24.010 --> 01:26.370
对不对 会提交一些内容到网站

01:26.370 --> 01:29.450
那么一般是通过一个文本框还是什么样子的

01:29.450 --> 01:31.850
那么这个时候攻击者他会怎么来处理呢

01:31.850 --> 01:34.570
他提交的内容里边会给你加一段脚本

01:34.570 --> 01:36.170
比方说这是一个

01:37.490 --> 01:40.450
比方说你在网页上看到这么一个文本框

01:40.450 --> 01:41.850
这是一个文本框

01:41.850 --> 01:43.810
如果说一正常的用户的话

01:43.810 --> 01:45.890
就是写了一段正常的内容

01:45.890 --> 01:48.690
那么这种情况倒是不会导致攻击

01:48.690 --> 01:50.490
但是如果说是一个OE的攻击者

01:50.490 --> 01:55.540
他可能给你写一些这些东西

01:55.540 --> 01:57.140
那你想一想啊

01:57.140 --> 01:58.700
这些东西发到服务器

01:58.700 --> 02:00.540
比如把这个东西发到服务器

02:00.540 --> 02:02.180
服务器呢他如果说不处理

02:02.180 --> 02:04.660
他不去识别的话

02:04.660 --> 02:07.380
那么他可能认为你这是一个正常的内容

02:07.380 --> 02:09.980
他就会把这个网上的保存到数据库

02:09.980 --> 02:14.580
将来有一天一个正常的用户来访问你这个贴子的时候

02:14.580 --> 02:16.260
他请求服务器 请求服务器一看

02:16.260 --> 02:17.420
你要访问这个贴子

02:17.420 --> 02:20.180
那我就把这个贴子的内容的告诉你

02:20.180 --> 02:21.540
那么用户拿到了是什么呢

02:21.540 --> 02:22.940
拿到是一个A7标圈

02:23.940 --> 02:26.500
那么页面上就可能会渲染出一个标题

02:26.500 --> 02:28.740
说就很奇怪对吧

02:28.740 --> 02:31.260
可以去到一些网站去试一下

02:31.260 --> 02:33.620
一般来说现在网站都会做这种防御的

02:33.620 --> 02:36.020
这种情况其实还好

02:36.020 --> 02:38.140
只是让用户觉得奇奇怪怪的而已

02:38.140 --> 02:39.460
怎么突然多了一个标题出来

02:39.460 --> 02:44.140
但是如果说他给你提交了不是这个东西

02:44.140 --> 02:45.620
他给你提交的是一段脚本

02:45.620 --> 02:48.340
那么这段脚本提交过去

02:48.340 --> 02:50.100
提交到服务器你看这

02:51.020 --> 02:54.340
他在提交的时候提交了一个脚本到服务器

02:54.340 --> 02:55.940
服务器如果说不加识别

02:55.940 --> 02:57.620
直接把它保存到数据户

02:57.620 --> 02:59.860
将来有一天正常的用户去访问

02:59.860 --> 03:02.740
访问这篇文章的时候

03:02.740 --> 03:03.900
那么他可能会看

03:03.900 --> 03:06.380
他就服务器就把一个脚本就给他了

03:06.380 --> 03:09.100
结果用户那边就执行了这段脚本

03:09.100 --> 03:10.580
这个就比较恐怖了

03:10.580 --> 03:11.500
怎么恐怖呢

03:11.500 --> 03:12.340
因为这个脚本

03:12.340 --> 03:15.100
你们知道这个脚本里面是不是GS代吧

03:15.100 --> 03:18.500
相当于是攻击者在用户的电脑上

03:18.500 --> 03:19.860
直入了一段GS代吧

03:19.860 --> 03:21.500
虽然这个过程绕一圈

03:21.500 --> 03:24.780
但是最终正常的用户电脑上

03:24.780 --> 03:27.780
会执行攻击者写的这段GS代吧

03:27.780 --> 03:29.500
那你想这个事情

03:29.500 --> 03:30.500
只有你想不到

03:30.500 --> 03:31.980
没有他做不到的事情

03:31.980 --> 03:34.140
基本上他可以做很多很多的事儿

03:34.140 --> 03:35.940
比方说他可以做什么事

03:35.940 --> 03:37.180
这段脚本里面

03:37.180 --> 03:40.500
他可以写一个

03:40.500 --> 03:42.100
阿迦克斯请求

03:42.100 --> 03:43.780
获取当前用户的Cookie

03:43.780 --> 03:45.860
把Cookie发到自己的服务器

03:45.860 --> 03:47.820
就是一段介绍的脚本

03:47.860 --> 03:49.020
还可以做什么事呢

03:49.020 --> 03:50.020
还可以改造

03:50.020 --> 03:51.300
用GS代改造

03:51.300 --> 03:52.860
他看到了整个网页

03:52.860 --> 03:54.780
然后给他一些

03:54.780 --> 03:56.020
虽然说他扭蛋的是

03:56.020 --> 03:57.460
我们的一个正常的网站

03:57.460 --> 03:58.500
但是通过GS

03:58.500 --> 04:00.700
可以把这个网页写一些改造

04:00.700 --> 04:01.580
那改造了之后

04:01.580 --> 04:02.620
让我们用户看到的

04:02.620 --> 04:04.500
就是一个被攻击的网页了

04:04.500 --> 04:06.260
那这个网页上可能有一些

04:06.260 --> 04:07.500
引导性的链接

04:07.500 --> 04:07.700
对吧

04:07.700 --> 04:10.340
本来是比方说他比较信任这个百度贴吧

04:10.340 --> 04:11.660
但是他里面有一个链接

04:11.660 --> 04:12.180
对吧

04:12.180 --> 04:14.460
就是

04:14.460 --> 04:15.660
他可能去点了一下

04:15.660 --> 04:17.420
可能会遭到一些别的攻击

04:17.620 --> 04:19.020
或者引导一些

04:21.220 --> 04:24.100
就是有恶意内容的网站

04:24.900 --> 04:26.220
所以说这些脚本里面

04:26.220 --> 04:28.100
可以做的是特别特别多

04:28.100 --> 04:30.940
最主要的就是获取到用户信息

04:30.940 --> 04:31.900
或者是

04:31.900 --> 04:35.100
让用户产生误解

04:35.100 --> 04:37.460
认为这是一个正常的内容

04:37.460 --> 04:40.740
结果已经到了另外一个

04:40.740 --> 04:42.980
恶意的内容上进去了

04:42.980 --> 04:44.180
一是获取用户信息

04:44.180 --> 04:45.820
二是盗取用户信息

04:45.820 --> 04:46.540
三是

04:46.620 --> 04:49.260
还有其他的可以做很多很多的事

04:49.260 --> 04:50.780
所以说这种攻击

04:50.780 --> 04:51.660
其实非常简单

04:51.660 --> 04:53.580
就是攻击者提交一段脚本

04:53.580 --> 04:55.020
然后正常用户就

04:55.020 --> 04:55.820
浏览这个网页

04:55.820 --> 04:57.100
就得到了这段脚本

04:57.100 --> 04:58.660
然后就执行他了

04:58.660 --> 05:01.340
那么他的防御方式也非常简单

05:01.340 --> 05:03.260
防御方式就是服务器这边

05:03.260 --> 05:06.660
收到任何用户提交的内容

05:06.660 --> 05:08.860
当然这一块也是要服务器处理

05:08.860 --> 05:10.980
我们客户端这一块

05:10.980 --> 05:11.700
可不可以处理

05:11.700 --> 05:12.620
可以一般来说

05:12.620 --> 05:14.780
客户端处理的服务器也会处理一次

05:14.780 --> 05:16.780
所以说一般就让服务器处理

05:16.780 --> 05:18.220
服务器怎么来处理呢

05:18.220 --> 05:20.220
他收到用户的任何提交信息

05:20.220 --> 05:21.620
不管是你的注册时

05:21.620 --> 05:23.380
填的帐号密码

05:23.380 --> 05:26.220
或者是你提交了一些文章内容

05:26.220 --> 05:26.580
对吧

05:26.580 --> 05:29.700
或者是一些回复评论

05:29.700 --> 05:31.580
只要是用户提交的

05:31.580 --> 05:33.300
服务器都不能信任

05:33.300 --> 05:34.820
那不信任应该怎么做呢

05:34.820 --> 05:36.380
一般有两种处理方式

05:36.380 --> 05:37.300
一是过滤

05:37.300 --> 05:38.540
二是编码

05:38.540 --> 05:40.100
那我分别说一下

05:40.100 --> 05:41.980
第一种就是过滤

05:42.020 --> 05:45.540
他会对所有用户提交了任何信息

05:45.540 --> 05:46.900
他检查一下

05:46.900 --> 05:47.740
这些信息里边

05:47.740 --> 05:49.460
有没有一些危险的标签

05:49.460 --> 05:50.860
比方说像script

05:50.860 --> 05:52.100
当危险标签一般来说

05:52.100 --> 05:53.660
服务器是可以定义的

05:53.660 --> 05:55.380
他认为哪些标签是危险的

05:55.380 --> 05:56.820
那我去检查一下

05:56.820 --> 05:59.180
这里边有没有一些危险的标签存在

05:59.180 --> 06:00.140
如果说有的话

06:00.140 --> 06:02.420
直接给你去掉

06:02.420 --> 06:04.740
然后或者去检查一些

06:04.740 --> 06:07.900
有没有危险的属性

06:07.900 --> 06:09.180
如果说发现一些

06:09.180 --> 06:10.580
有这个标签我允许的一些

06:10.580 --> 06:12.700
但是有些属性你不能写

06:12.700 --> 06:14.540
那么就去掉这些危险的属性

06:14.540 --> 06:17.100
那这里我最后给大家普及一下知识

06:17.100 --> 06:19.180
为什么说有些属性

06:19.180 --> 06:21.300
它也是危险的

06:21.300 --> 06:24.060
比方说吧

06:24.060 --> 06:24.820
你们会发

06:24.820 --> 06:27.340
你们有的时候在网上发帖的时候

06:27.340 --> 06:29.060
会发现你们的超链接

06:29.060 --> 06:30.300
就是你可能有做的一些

06:30.300 --> 06:31.900
站外的链接对吧

06:31.900 --> 06:32.940
超链接

06:32.940 --> 06:35.500
它只能链接本战的资源

06:35.500 --> 06:37.540
链接不了站外的资源

06:37.540 --> 06:38.660
我举个例子

06:38.660 --> 06:39.420
比方说吧

06:39.420 --> 06:41.420
以前我记得有一段时间

06:41.420 --> 06:44.340
那个什么天涯论坛

06:44.340 --> 06:45.900
好像是什么地方

06:45.900 --> 06:47.580
他们发帖子的时候

06:47.580 --> 06:48.460
他只能

06:48.460 --> 06:50.540
你不要你里边可以加超链接没问题

06:50.540 --> 06:52.700
因为他有个负文门框

06:52.700 --> 06:54.060
加超链接的时候

06:54.060 --> 06:57.220
你只能写天涯的地址

06:57.220 --> 06:58.900
就是天涯内部的链接

06:58.900 --> 07:00.020
就是这个网站的链接

07:00.020 --> 07:01.180
你不能写站外的

07:01.180 --> 07:02.580
不要你加个百度的链接

07:02.580 --> 07:04.300
或者是加你自己网站的链接

07:04.300 --> 07:05.700
是不允许的

07:05.700 --> 07:06.860
那么他怎么做到的呢

07:06.860 --> 07:08.020
他就是检查

07:08.020 --> 07:08.980
你可以去交标圈

07:09.020 --> 07:10.940
AIRS我允许的提交

07:10.940 --> 07:14.140
但是我看一下AIRSREF属性

07:14.140 --> 07:15.020
你看链接地址

07:15.020 --> 07:17.420
是不是我们站内的地址

07:17.420 --> 07:20.300
我就趴你把用户引导到一些危险的网站

07:20.300 --> 07:22.860
因为有用户信任这个T8

07:22.860 --> 07:24.740
但是就导致用户

07:24.740 --> 07:28.780
他可能可以跟着信任你这篇文章

07:28.780 --> 07:30.700
他把信任感转移了

07:30.700 --> 07:33.620
所以有些T8或者是论坛

07:33.620 --> 07:34.740
他为了解决这个问题

07:34.740 --> 07:37.500
他就不允许的发布站外链接

07:37.540 --> 07:39.100
当然还有一些情况

07:39.100 --> 07:42.700
比方说我们比方说攻击者他发现

07:42.700 --> 07:44.300
他发现你这个网站

07:44.300 --> 07:46.460
有些元素有一些自定义的属性

07:46.460 --> 07:48.060
我举个例子下举个例子

07:48.060 --> 07:49.660
比方说你只要有一个元素

07:49.660 --> 07:51.300
有这么一个自定义属性

07:51.300 --> 07:52.700
比方说叫data URL

07:55.580 --> 07:56.500
这里边写了一个地址

07:57.620 --> 07:59.540
有些元素有一些自定义属性

07:59.540 --> 08:02.060
他发现你这个网站做了这么一个处理

08:02.060 --> 08:04.060
只要有这个自定义属性的元素

08:04.060 --> 08:05.860
他就会读取这个属性的值

08:05.860 --> 08:07.620
然后发送一段阿迦克斯请求

08:07.620 --> 08:08.700
去请求这个地址

08:09.860 --> 08:10.500
懂了意思吧

08:10.500 --> 08:12.260
同时把用户的身份信息

08:12.260 --> 08:13.460
用那个header带进去

08:14.180 --> 08:16.620
读取到local storage里面的身份信息

08:16.620 --> 08:17.980
来把身份信息带过去

08:17.980 --> 08:18.780
请求这个地址

08:20.500 --> 08:22.540
假设有没有可能

08:22.540 --> 08:23.140
当然有可能

08:23.140 --> 08:27.340
那么假设他发现了这么一个逻辑存在

08:27.340 --> 08:29.180
于是他在提交标签的时候

08:29.180 --> 08:32.340
他就可以给你加上这么一个自定义属性

08:32.340 --> 08:35.260
让他去请求自己的网站的地址

08:35.260 --> 08:36.540
那么是不是就把用户的身份信息

08:36.540 --> 08:37.700
带到我们的网站了

08:37.700 --> 08:38.540
对吧

08:38.540 --> 08:40.380
当然跨域跨域的好办

08:40.380 --> 08:40.580
对吧

08:40.580 --> 08:41.820
因为他是自己写的网站

08:41.820 --> 08:43.900
所以说他可以解决跨域

08:43.900 --> 08:47.580
因此这一块有些危险的属性

08:47.580 --> 08:50.380
如果说你们网站里面存在的话

08:50.380 --> 08:53.340
那么这些属性也是不能让用户来写的

08:53.340 --> 08:54.540
要去掉这些属性

08:54.540 --> 08:55.580
这是过滤

08:55.580 --> 08:56.580
过滤就是去掉

08:56.580 --> 08:59.180
反而是危险的内容全部去掉

08:59.180 --> 09:01.420
第二种做法就是编码

09:01.420 --> 09:02.620
就是我不去掉

09:02.620 --> 09:04.340
但是我给你进行编码

09:04.380 --> 09:05.900
它就不占是一个标签了

09:05.900 --> 09:08.020
比方说你给我提交的是怎么玩的

09:08.020 --> 09:10.020
你给我提交的是这个玩意儿

09:10.020 --> 09:12.740
而我发现这个标签的是一个危险的标签

09:12.740 --> 09:14.860
那么中间有些内容

09:14.860 --> 09:15.740
那我怎么来处理呢

09:15.740 --> 09:17.260
我第一种方式就去掉

09:17.260 --> 09:18.460
不要了

09:18.460 --> 09:19.620
第二种方式呢

09:19.620 --> 09:21.860
我就给你变成这个样子

09:21.860 --> 09:23.260
是不是ATM制服编码

09:25.860 --> 09:27.380
然后中间有部分内容

09:27.380 --> 09:29.660
然后又是LT

09:29.660 --> 09:31.140
斜杠Screen

09:31.140 --> 09:33.780
然后又是GT

09:33.780 --> 09:34.540
是不是这样子的话

09:34.540 --> 09:36.180
它就不存在攻击了

09:36.180 --> 09:36.340
对不对

09:36.340 --> 09:37.780
用户那边就可以看到

09:37.780 --> 09:39.500
在页面上就可以看到这个东西

09:39.500 --> 09:40.340
对不对

09:40.340 --> 09:41.380
这是编码的方式

09:41.380 --> 09:42.580
两种方式都可以解决

09:42.580 --> 09:45.780
甚至有的时候两种方式都可以混合使用

09:45.780 --> 09:45.940
好

09:45.940 --> 09:48.260
那么这就是XSS以攻击的方式

09:48.260 --> 09:49.700
以及它的防御方式

09:49.700 --> 09:51.660
那么最后我们看一下面试题

09:51.660 --> 09:53.980
让你介绍一下XSS攻击

09:53.980 --> 09:55.180
首先就简单介绍一下

09:55.180 --> 09:57.660
它是指夸占脚奔攻击

09:57.660 --> 09:59.460
一般来说都是提交一个脚奔

09:59.460 --> 10:01.900
然后在正常的用户端进行运行

10:01.900 --> 10:03.260
攻击者能利用网站的漏洞

10:03.260 --> 10:04.740
在表单提交的时候

10:04.740 --> 10:07.260
在表单内容中加了一些恶意的脚奔

10:07.260 --> 10:09.860
如果说那些其他正常的用户

10:09.860 --> 10:10.900
凌乱页面的时候

10:10.900 --> 10:12.220
页面中刚好出现

10:12.220 --> 10:13.260
比如说那篇文章

10:13.260 --> 10:14.780
刚好里边就有一个脚奔

10:14.780 --> 10:16.820
那么脚奔就不会在用户的电脑上

10:16.820 --> 10:17.900
进行执行

10:17.900 --> 10:19.980
从而使页面上的破坏

10:19.980 --> 10:22.620
或者是切取用户的信息

10:22.620 --> 10:23.820
如果说防御的话

10:23.820 --> 10:26.100
那么两种方式过滤和编码都可以

10:26.100 --> 10:28.420
需要在服务端进行脚奔的过滤

10:28.420 --> 10:30.940
然后将一些危险的元素

10:30.940 --> 10:31.900
会属性去掉

10:31.980 --> 10:34.580
或者是对元素进行ATM实体编码

10:34.580 --> 10:35.580
对它的防御方式

10:37.100 --> 10:40.100
其实你们学习到无忧的时候

10:40.100 --> 10:41.020
学到无忧的时候

10:41.020 --> 10:43.300
无忧里边不是有一个metc-h语法吗

10:43.300 --> 10:45.780
就这个里边是不是可以写东西

10:45.780 --> 10:47.220
你可以试一下

10:47.220 --> 10:49.820
比方说你的电脑里边有一个数据

10:49.820 --> 10:52.100
叫做content

10:52.100 --> 10:54.180
内容里边你写一个这么一个东西

10:55.860 --> 10:56.620
你可以试一下

10:57.660 --> 10:58.780
把这个东西放到这儿

10:59.860 --> 11:01.100
你会发现

11:01.140 --> 11:03.020
它会自动的对这个东西进行一遍吗

11:03.820 --> 11:04.620
这是无忧的做法

11:04.620 --> 11:05.660
我当时讲无忧的时候

11:05.660 --> 11:07.020
好像还说过这个问题

11:07.020 --> 11:08.580
还说过这个情况

11:08.580 --> 11:09.460
为什么要这样做

11:09.460 --> 11:10.980
就是为了防范这个

11:10.980 --> 11:13.060
这是在客户端的一种防范

11:13.060 --> 11:14.700
其实我们一般来防范的话

11:14.700 --> 11:16.900
一般都是在服务器里面防范

11:16.900 --> 11:18.540
跟客户端做一遍也没什么问题

11:19.380 --> 11:22.860
OK 这是关于这个XSS攻击

11:22.860 --> 11:23.780
以及它的防御方式

