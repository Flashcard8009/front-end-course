WEBVTT

00:00.750 --> 00:03.750
各位同学 大家好 我是谢老师

00:03.750 --> 00:06.750
这节课的话 我们就来看一下

00:06.750 --> 00:11.750
浏览器离线存储里面的一个叫做WebOSql的东西

00:11.750 --> 00:14.750
我们在上一节课的话 我们说过

00:14.750 --> 00:18.750
浏览器离线存储的话 常见有Cookie 有WebOSstorage

00:18.750 --> 00:23.750
然后有WebOSql IndexDB FileSystem

00:23.750 --> 00:26.750
那么前面两个就Cookie和WebOSstorage的话

00:26.750 --> 00:28.750
Cookie的话 后面在网络部分

00:28.750 --> 00:31.750
袁老师会给大家讲 WebOSstorage的话

00:31.750 --> 00:34.750
后面网络部分 袁老师也会给大家说

00:34.750 --> 00:37.750
但WebOSstorage的话 大家之前其实是学习过的

00:37.750 --> 00:40.750
对吧 那我这边话就不再花时间了

00:40.750 --> 00:44.750
那我们这边话就直接来看这个 WebOSql

00:44.750 --> 00:47.750
但这节课的话 你听这节课的话

00:47.750 --> 00:50.750
其实可以完全的放松 为什么呢

00:50.750 --> 00:53.750
因为现在的话这个 WebOSql

00:53.750 --> 00:56.750
它已经就基本上慢慢被废弃掉了

00:56.750 --> 01:00.750
你看我这边第一句话 WebOSql数据库

01:00.750 --> 01:03.750
它现在已经不是什么呢 已经不是

01:03.750 --> 01:06.750
HTML5规范的一部分了

01:06.750 --> 01:09.750
它是一个独立的规范 它被抛出来了

01:09.750 --> 01:12.750
但是现在的话也基本上就没有维护了

01:12.750 --> 01:16.750
已经没有维护了 所以说就基本上已经被废弃掉了

01:16.750 --> 01:20.750
那既然被废弃掉了 那我们这边为什么还要讲呢

01:20.750 --> 01:25.750
这边的话其实就是让大家做一个简单的了解

01:25.750 --> 01:28.750
不至于别人一说这个东西 你听都没听过

01:28.750 --> 01:31.750
那这个也有点说不过去 对吧

01:31.750 --> 01:34.750
所以你看这节课的话 你看我这个教案也很短

01:34.750 --> 01:37.750
看到没有 就简单的带大家过一下

01:37.750 --> 01:39.750
就是使用这个 WebOSql

01:39.750 --> 01:43.750
我们如何进行一个这个数据的这个操作

01:43.750 --> 01:46.750
好 那我们这边我们来看一下

01:46.750 --> 01:50.750
WebOSql数据库已经不是HTML5规范的一部分

01:50.750 --> 01:53.750
它是一个独立的规范 就已经被抛出来了

01:53.750 --> 01:56.750
现在已经被慢慢废弃掉了

01:56.750 --> 02:00.750
它最大特点是什么呢 它最大特点是使用这个circle

02:00.750 --> 02:06.750
使用circle来操作这个浏览器里面的这个一个数据库

02:06.750 --> 02:10.750
你如果之前你学过就是关系型数据库的

02:10.750 --> 02:15.750
就任何关系型数据库 你对这个东西都不陌生

02:15.750 --> 02:17.750
我们知道我们的数据库分为什么呢

02:17.750 --> 02:20.750
分为关系型和非关系型

02:20.750 --> 02:23.750
如果操作这个关系型数据库的话 用的就是什么呢

02:23.750 --> 02:25.750
用的是不是这个circle语

02:25.750 --> 02:30.750
对不对 所以你如果就是学过任何一款关系型数据库

02:30.750 --> 02:33.750
那么这个 WebOSql对于你来讲的话

02:33.750 --> 02:37.750
没有任何的这个难度 直接就上手了

02:37.750 --> 02:41.750
当有的同学的话 可能就是压根就还没有学习过

02:41.750 --> 02:44.750
这个任何的这个数据库 那也没关系

02:44.750 --> 02:47.750
那我们这边让我们简单来看一下

02:47.750 --> 02:52.750
好 然后现在最新版的像safari啊 comb啊这个opera呀

02:52.750 --> 02:56.750
这些浏览器的话都已经支持这个 WebOSql

02:56.750 --> 03:00.750
看到没有 在哪里可以看到呢 在这个地方

03:00.750 --> 03:02.750
然后这边开了一个空白的页面

03:02.750 --> 03:06.750
然后你这边的话点击这个检查 把这个控制台打开

03:06.750 --> 03:10.750
控制台打开这边是不是有这个一系列的这个选项卡

03:10.750 --> 03:13.750
对吧 以前你用的多了可能就是元素

03:13.750 --> 03:15.750
看一下你的这个html元素

03:15.750 --> 03:19.750
接下来的话 这边控制台看一下这个GS调一下错

03:19.750 --> 03:21.750
那这边它有个什么呢 有一个应用

03:21.750 --> 03:25.750
如果你对应的是英语的话 那这边的话应该是叫做

03:25.750 --> 03:28.750
application

03:28.750 --> 03:31.750
好 然后接下来你点击一下 点击了之后

03:31.750 --> 03:33.750
然后接下来你看这个位置

03:33.750 --> 03:36.750
这个位置是不是就是有一个存储啊

03:36.750 --> 03:40.750
对不对 有一个存储 存储你看就包含了本地存储空间

03:40.750 --> 03:43.750
这个就是什么呢 这个就是那个local storage

03:43.750 --> 03:45.750
那汇化存储空间

03:45.750 --> 03:47.750
这就是session storage

03:47.750 --> 03:51.750
好 然后接下来的话这个index的db

03:51.750 --> 03:53.750
这个我们下几课来说

03:53.750 --> 03:55.750
好 然后像我们这几课说的是什么

03:55.750 --> 03:57.750
是这个vable SQL

03:57.750 --> 03:59.750
对不对 那它现在是空的 你点过来

03:59.750 --> 04:03.750
什么都没有 对不对 这边有一个了解详情

04:03.750 --> 04:07.750
什么都没有 这个了解详情的话 你可以点击

04:07.750 --> 04:10.750
去看一下 当然这个的话需要那个

04:10.750 --> 04:16.060
需要这个翻墙 需要大梯子

04:16.060 --> 04:19.060
这是这个 在哪里找

04:19.060 --> 04:21.060
好 然后接下来

04:21.060 --> 04:24.060
接下来的话在这个vable SQL里面

04:24.060 --> 04:27.060
有三个核心方法

04:27.060 --> 04:29.060
哪三个核心方法呢

04:29.060 --> 04:32.060
第一个的话叫做open database

04:32.060 --> 04:34.060
你从这个单词你都知道它是什么意思

04:34.060 --> 04:38.060
open是不是打开 database 数据库

04:38.060 --> 04:40.060
也就是说打开数据库

04:40.060 --> 04:43.060
那这个方法的话 其实不光光是打开

04:43.060 --> 04:47.060
数据库 你如果比如你打开的数据库没有

04:47.060 --> 04:49.060
你想了想了 它应该是个方法 对不对

04:49.060 --> 04:51.060
方法你肯定要传参嘛 对不对

04:51.060 --> 04:54.060
你要打开哪个数据库 然后你传到那个参

04:54.060 --> 04:57.060
如果这个数据库没有 它会干嘛呢 它会新建

04:57.060 --> 04:59.060
它会新建一个

04:59.060 --> 05:01.060
这个的话就和现在很多

05:01.060 --> 05:04.060
现在流行的这个数据库 比如mongledb这些

05:04.060 --> 05:07.060
都是一样的 像mongledb里面也是

05:07.060 --> 05:10.060
你要打开的这个数据库没有 它就会给你新建一个

05:10.060 --> 05:12.060
你要打开的一张表

05:12.060 --> 05:15.060
没有 它也会给你新建一个

05:15.060 --> 05:18.060
好 第二个 第二个是什么呢

05:18.060 --> 05:23.060
第二个的话是trace action

05:23.060 --> 05:28.060
翻译成中文是什么呢 翻译成中文是事务

05:28.060 --> 05:31.060
然后可以就是让我们控制一个事务

05:31.060 --> 05:35.060
以及基于这种情况 执行提交或者回轨

05:35.060 --> 05:37.060
那么事务这个东西的话

05:37.060 --> 05:40.060
对于学过这个circle的同学来讲

05:40.060 --> 05:42.060
是很熟悉的

05:42.060 --> 05:44.060
当然这边有的同学没有学过这个事务

05:44.060 --> 05:47.060
然后简单介绍一下 什么叫做事务

05:47.060 --> 05:51.060
事务的话就是指的你在操作数据

05:51.060 --> 05:56.060
然后一连串行为

05:56.060 --> 06:00.060
也就是操作数据的这个一连串动作

06:00.060 --> 06:03.060
构成一个整体

06:04.060 --> 06:06.060
比如说我要操作一连串数据

06:06.060 --> 06:08.060
分为1 2 3 4 5个步骤

06:08.060 --> 06:10.060
5个步骤的话

06:10.060 --> 06:12.060
然后要么全部成功

06:12.060 --> 06:14.060
要么全部失败

06:14.060 --> 06:16.060
你不能说就是第一个成功了

06:16.060 --> 06:18.060
然后第二个失败了不能这样子

06:18.060 --> 06:20.060
要么全部成功 要么全部失败

06:20.060 --> 06:21.060
全部成功

06:21.060 --> 06:23.060
然后我们称之为这个事务

06:23.060 --> 06:24.060
就成功了

06:24.060 --> 06:25.060
只要有一个失败

06:25.060 --> 06:27.060
那它就回轨 回轨到什么呢

06:27.060 --> 06:30.060
回轨到最初没有执行的这个状态

06:30.060 --> 06:32.060
这个是很重要的

06:32.060 --> 06:34.060
很重要的 为什么

06:34.060 --> 06:35.060
我举个最简单的例子

06:35.060 --> 06:36.060
比如我给你转钱

06:36.060 --> 06:38.060
对吧 我给你转100块钱

06:38.060 --> 06:40.060
那正常的情况下

06:40.060 --> 06:43.060
是不是就是转钱这个动作其实并不复杂

06:43.060 --> 06:45.060
对 这个行为其实并不复杂

06:45.060 --> 06:47.060
它就什么呢 就是我的账户

06:47.060 --> 06:48.060
减去100

06:48.060 --> 06:50.060
你的账户是不是增加100

06:50.060 --> 06:52.060
那是不是就是我给你转了100块钱

06:52.060 --> 06:53.060
对不对

06:53.060 --> 06:55.060
但你想象这么一个场景

06:55.060 --> 06:57.060
比如我在给你转钱的时候

06:57.060 --> 06:59.060
我这边扣钱 先扣钱扣了100

06:59.060 --> 07:01.060
然后接下来你在你的账户

07:01.060 --> 07:04.060
正要增加这个100块钱的时候

07:04.060 --> 07:06.060
那突然断电了

07:06.060 --> 07:09.060
或者这个ATM机爆炸了

07:09.060 --> 07:12.060
对吧 总之的话就是后面那个操作步骤

07:12.060 --> 07:14.060
就没有成功执行

07:14.060 --> 07:16.060
那么这个是怎么办呢

07:16.060 --> 07:18.060
你想象 如果没有事务这个东西的话

07:18.060 --> 07:21.060
那是不是最终形成的结果就是

07:21.060 --> 07:23.060
我的账户少了100块钱

07:23.060 --> 07:25.060
但是你的账户又没有增加

07:25.060 --> 07:26.060
对不对

07:26.060 --> 07:28.060
所以说有了这个事务

07:28.060 --> 07:31.060
它就会保证我们这个一连串的这个动作

07:31.060 --> 07:33.060
要么同时成功 要么同时失败

07:33.060 --> 07:35.060
那像刚才刚才的话

07:35.060 --> 07:37.060
第一步成功了 但是第二步没有成功

07:37.060 --> 07:38.060
对不对 它就会干嘛呢

07:38.060 --> 07:40.060
它就会执行一个叫做回滚的东西

07:40.060 --> 07:42.060
回滚就是回滚到

07:42.060 --> 07:44.060
我给你 就是我的账户

07:44.060 --> 07:46.060
扣钱之前的这个状态

07:46.060 --> 07:48.060
看了没有

07:48.060 --> 07:50.060
这就是事务 简单介绍一下

07:50.060 --> 07:52.060
当学过这个My Circle

07:52.060 --> 07:54.060
或者其他这个Circle Server

07:54.060 --> 07:55.060
这些同学

07:55.060 --> 07:57.060
就是你只要学过这个Circle这个语言

07:57.060 --> 07:59.060
对吧 你只要学过这个Circle

07:59.060 --> 08:01.060
对这个事务应该是比较熟悉的

08:01.060 --> 08:03.060
但这里面的话

08:03.060 --> 08:05.060
就是后面的这个事务的话

08:05.060 --> 08:07.060
更多的就是创建一个事务对象

08:07.060 --> 08:10.060
在事务对象里面进行一个操作

08:10.060 --> 08:11.060
我们一会来看吧

08:11.060 --> 08:13.060
一会来看了你就知道了

08:13.060 --> 08:15.060
好 那下一个 下一个的话是这个

08:15.060 --> 08:17.060
Excute SQL

08:17.060 --> 08:19.060
这个的话就是

08:19.060 --> 08:22.060
填入具体的这个Circle语句了

08:22.060 --> 08:24.060
就是执行

08:24.060 --> 08:26.060
具体的Circle语句

08:26.060 --> 08:28.060
来进行一个查询

08:28.060 --> 08:30.060
这是关于这个

08:30.060 --> 08:32.060
Web SQL

08:32.060 --> 08:33.060
首先一个简单的介绍

08:33.060 --> 08:34.060
介绍完了之后

08:34.060 --> 08:36.060
我们就来简单的来看一下

08:36.060 --> 08:37.060
它的这个使用

08:37.060 --> 08:39.060
大家放轻松

08:39.060 --> 08:40.060
这一节课的话

08:40.060 --> 08:42.060
你不用跟着我实操都可以

08:42.060 --> 08:44.060
你不用跟着我 你就看我操作

08:44.060 --> 08:46.060
大致过一遍都行

08:46.060 --> 08:49.060
好 那我们这边我们来看一下

08:49.060 --> 08:50.060
首先第一步

08:50.060 --> 08:51.060
第一步的话是打开数据库

08:51.060 --> 08:54.060
用的是Open Data Base

08:54.060 --> 08:55.060
就这个方法

08:55.060 --> 08:57.060
这个方法刚才上面是不是提到了

08:57.060 --> 08:58.060
对不对

08:58.060 --> 08:59.060
然后加这边

08:59.060 --> 09:00.060
这边的话Open Data Base

09:00.060 --> 09:02.060
这边是不是传几个参数

09:02.060 --> 09:03.060
对不对 我来看一下这边

09:03.060 --> 09:05.060
MyDB 1.0

09:05.060 --> 09:07.060
然后接下来TestDB

09:07.060 --> 09:08.060
然后加这边的话

09:08.060 --> 09:10.060
这个应该是大小

09:10.060 --> 09:11.060
对不对

09:11.060 --> 09:12.060
那接下来这边的话

09:12.060 --> 09:13.060
这里写的有

09:13.060 --> 09:14.060
五个参数

09:14.060 --> 09:15.060
首先的话这边

09:15.060 --> 09:17.060
第一个的话是数据库名称

09:17.060 --> 09:19.060
那我的数据库名称是比较多

09:19.060 --> 09:20.060
MyDB

09:20.060 --> 09:21.060
那第二个

09:21.060 --> 09:23.060
第二个的话是版本号

09:23.060 --> 09:25.060
第三个的话是这个描述文件

09:25.060 --> 09:28.060
就你对你的数据库一个描述

09:28.060 --> 09:29.060
这个随便写

09:29.060 --> 09:31.060
好 然后接下来的话这边

09:31.060 --> 09:32.060
第四个

09:32.060 --> 09:34.060
第四个就是你的数据库的大小

09:34.060 --> 09:37.060
让我这边2乘以1024乘以1024

09:37.060 --> 09:39.060
就差不多是两兆左右

09:39.060 --> 09:42.060
然后最后最后的话是一个这个回调

09:42.060 --> 09:44.060
创建之后的回调

09:44.060 --> 09:46.060
好 那我们这边就把这句话

09:46.060 --> 09:48.060
把这个代码拿过来

09:50.060 --> 09:52.060
我刚才打开的就是这个文件

09:52.060 --> 09:54.060
打开的就是这个文件

09:54.060 --> 09:55.060
这个文件大家可以看到

09:55.060 --> 09:56.060
现在是一个空白的

09:56.060 --> 09:57.060
对不对

09:57.060 --> 09:58.060
好 然后接下来的话

09:58.060 --> 09:59.060
我在这边

10:01.060 --> 10:03.060
把这句话放过来

10:03.060 --> 10:04.060
放过来之后

10:04.060 --> 10:06.060
然后接下来我这边保存一下

10:06.060 --> 10:07.060
保存一下之后

10:07.060 --> 10:09.060
然后接下来来到我们这边

10:09.060 --> 10:10.060
你看

10:11.060 --> 10:13.060
是不是现在就有这么一个

10:13.060 --> 10:16.060
MyDB了

10:16.060 --> 10:17.060
对不对

10:17.060 --> 10:19.060
怎么还有一个Stu呢

10:19.060 --> 10:21.060
我看一下

10:21.060 --> 10:22.060
这边没对

10:22.060 --> 10:23.060
这边没对

10:23.060 --> 10:25.060
这边的话不应该有这个

10:25.060 --> 10:26.060
好 我们把这个删了

10:26.060 --> 10:27.060
删了我们重新来

10:27.060 --> 10:28.060
然后这边

10:28.060 --> 10:31.060
这边的话可以就是清除网站数据

10:31.060 --> 10:33.060
把这些东西都可以清除掉

10:33.060 --> 10:34.060
你可以什么呢

10:34.060 --> 10:36.060
你可以直打勾这个

10:36.060 --> 10:37.060
WebOSQ一样

10:37.060 --> 10:38.060
我们把它清除掉

10:43.270 --> 10:44.270
清除了

10:44.270 --> 10:46.270
清除了

10:46.270 --> 10:48.270
它怎么删不掉呢

10:49.270 --> 10:51.270
好 再来试一次

10:52.270 --> 10:54.270
好 现在可以了

10:57.270 --> 10:58.270
好 现在可以了

10:58.270 --> 10:59.270
好 可以了之后

10:59.270 --> 11:00.270
然后接下来的话

11:00.270 --> 11:01.270
我们这边干嘛呢

11:01.270 --> 11:02.270
我们这边重新刷新

11:02.270 --> 11:03.270
你可以看到现在这边

11:03.270 --> 11:04.270
是不是没有小箭头的

11:04.270 --> 11:05.270
对不对

11:05.270 --> 11:06.270
没有小箭头

11:06.270 --> 11:07.270
然后接下来这边的话

11:07.270 --> 11:08.270
我们刷新一下

11:08.270 --> 11:09.270
好 然后接下来这边

11:09.270 --> 11:10.270
是不是小箭头出现了

11:10.270 --> 11:11.270
出现了之后

11:11.270 --> 11:12.270
然后接下来这边来看一下

11:12.270 --> 11:14.270
是不是有了

11:14.270 --> 11:15.270
对不对

11:15.270 --> 11:16.270
你看现在的话

11:16.270 --> 11:17.270
就没有那张表了

11:17.270 --> 11:18.270
那张表的话

11:18.270 --> 11:19.270
应该是我之前

11:19.270 --> 11:20.270
在备课的时候

11:20.270 --> 11:21.270
创建的

11:21.270 --> 11:22.270
现在的话是不是

11:22.270 --> 11:23.270
一个空的数据库

11:23.270 --> 11:24.270
就创建好了

11:24.270 --> 11:25.270
对不对

11:26.270 --> 11:27.270
好 然后接下来的话

11:27.270 --> 11:28.270
我们这边继续

11:29.270 --> 11:30.270
这一步很简单

11:30.270 --> 11:31.270
是吧

11:31.270 --> 11:32.270
打开数据库

11:32.270 --> 11:33.270
如果没有的话

11:33.270 --> 11:34.270
它就是创建

11:34.270 --> 11:35.270
好 然后接下来的话

11:35.270 --> 11:36.270
下一步

11:37.270 --> 11:38.270
下一步的话

11:38.270 --> 11:39.270
你就可以执行什么呢

11:39.270 --> 11:42.270
执行data-base.trace-action

11:42.270 --> 11:43.270
trace-action是什么

11:43.270 --> 11:45.270
trace-action是不是

11:45.270 --> 11:46.270
刚刚说的就是

11:46.270 --> 11:47.270
控制一个事物

11:47.270 --> 11:48.270
对不对

11:48.270 --> 11:49.270
它这边其实就是

11:49.270 --> 11:51.270
创建一个事物

11:51.270 --> 11:52.270
就是创建一个事物

11:52.270 --> 11:53.270
那事物里面装的就是什么呢

11:53.270 --> 11:55.270
装的就是你一连串

11:55.270 --> 11:56.270
是不是这个

11:56.270 --> 11:58.270
对数据库的操作

11:58.270 --> 11:59.270
对不对

11:59.270 --> 12:01.270
那我们这边来看一下

12:01.270 --> 12:02.270
好 这边的话

12:03.270 --> 12:04.270
open-data-base

12:04.270 --> 12:06.270
返回一个这个db

12:06.270 --> 12:07.270
就是你数据库的实力

12:07.270 --> 12:10.270
然后在这个数据库的实力上面

12:10.270 --> 12:11.270
调用什么呢

12:11.270 --> 12:12.270
调用trace-action

12:12.270 --> 12:13.270
调用这个方法

12:13.270 --> 12:15.270
这个方法接受一个什么呢

12:15.270 --> 12:17.270
接受一个回调函数

12:17.270 --> 12:18.270
对不对

12:18.270 --> 12:19.270
接受一个回调函数

12:19.270 --> 12:20.270
好 回调函数

12:20.270 --> 12:21.270
然后接下来这里面的话

12:21.270 --> 12:23.270
会传入一个这个参数

12:23.270 --> 12:25.270
好 那这样我们这边一步一步来

12:25.270 --> 12:26.270
好 那接下来的话

12:26.270 --> 12:28.270
我们这边db

12:28.270 --> 12:29.270
db点什么

12:29.270 --> 12:32.270
trace-action是吧

12:32.270 --> 12:34.270
绝对没有trace-action

12:34.270 --> 12:35.270
稍微也死是吧

12:35.270 --> 12:36.270
诶

12:37.270 --> 12:38.270
trace-action

12:38.270 --> 12:39.270
好 调这个方法

12:39.270 --> 12:40.270
好 这个方法

12:40.270 --> 12:41.270
接受一个什么呢

12:41.270 --> 12:44.270
接受一个回调函数

12:44.270 --> 12:45.270
那在这个回调函数里面

12:45.270 --> 12:46.270
你就可以定义你

12:46.270 --> 12:48.270
你系列的这个操作

12:48.270 --> 12:49.270
那我们这边

12:49.270 --> 12:50.270
接受一个参数

12:50.270 --> 12:52.270
那我们这边的话就打印一下

12:52.270 --> 12:54.270
我们先不着急 是吧

12:54.270 --> 12:55.270
我们先打印一下

12:55.270 --> 12:56.270
看一下这玩意儿是啥

12:56.270 --> 12:58.270
好 然后在这边保存一下

12:58.270 --> 12:59.270
保存了之后

12:59.270 --> 13:00.270
然后过来low-e

13:00.270 --> 13:02.270
好 这边那是不是就是一个

13:02.270 --> 13:05.270
sql-trace-action对象

13:05.270 --> 13:06.270
看到没有

13:06.270 --> 13:08.270
可以看到这玩意儿是一个对象

13:08.270 --> 13:10.270
把这儿复制一下

13:11.270 --> 13:12.270
这边的话

13:12.270 --> 13:14.270
tx

13:15.270 --> 13:20.860
是一个

13:20.860 --> 13:24.860
sql-trace-action对象

13:24.860 --> 13:29.860
后面的所有操作

13:29.860 --> 13:30.860
都干嘛呢

13:30.860 --> 13:34.860
都基于此对象

13:34.860 --> 13:35.860
对不对

13:35.860 --> 13:36.860
这个很好理解

13:36.860 --> 13:37.860
这个就好比你以前

13:37.860 --> 13:38.860
你那个事件

13:38.860 --> 13:39.860
事件的话

13:39.860 --> 13:40.860
是不是有个事件对象

13:40.860 --> 13:41.860
是不是自动传入到

13:41.860 --> 13:43.860
那个事件处理函数

13:43.860 --> 13:44.860
对不对 自动传入的

13:44.860 --> 13:45.860
那这个也是一样

13:45.860 --> 13:47.860
这个sql-trace-action对象

13:47.860 --> 13:49.860
它是自动传入的

13:49.860 --> 13:50.860
那后期的话

13:50.860 --> 13:51.860
我们就是在这个对象的基础上

13:51.860 --> 13:53.860
调它的各种方法

13:53.860 --> 13:56.860
来做一个操作

13:56.860 --> 13:58.860
好 那接下来我们这边

13:58.860 --> 13:59.860
我们首先做什么呢

13:59.860 --> 14:00.860
我们首先的话

14:00.860 --> 14:01.860
我们来看一下

14:01.860 --> 14:03.860
回到我们这边

14:03.860 --> 14:04.860
这边的话

14:04.860 --> 14:06.860
我们首先创建一个表

14:06.860 --> 14:07.860
看到没有

14:07.860 --> 14:08.860
好 把这个

14:08.860 --> 14:09.860
我就直接拿过来了

14:11.860 --> 14:12.860
这边

14:12.860 --> 14:14.860
把这个折起来

14:14.860 --> 14:15.860
这个也很简单

14:15.860 --> 14:16.860
tx

14:16.860 --> 14:17.860
tx我们刚才看了

14:17.860 --> 14:19.860
是不是sql-trace-action对象

14:19.860 --> 14:20.860
对不对 让我们调它一个方法

14:20.860 --> 14:21.860
这个方法叫做

14:21.860 --> 14:23.860
exql-sql

14:23.860 --> 14:25.860
也非常很直观

14:25.860 --> 14:26.860
叫做什么

14:26.860 --> 14:28.860
exql-sql

14:28.860 --> 14:29.860
sql-sql

14:29.860 --> 14:30.860
是不是执行这个circle

14:30.860 --> 14:31.860
那后面的话

14:31.860 --> 14:33.860
就完全就是circle了

14:33.860 --> 14:34.860
看到没有

14:34.860 --> 14:35.860
这个你一旦你学过

14:35.860 --> 14:36.860
这个mycircle

14:36.860 --> 14:37.860
或者circle server

14:37.860 --> 14:39.860
只要你学过那个circle语言

14:39.860 --> 14:40.860
那你后面这个东西

14:40.860 --> 14:42.860
你是完全看得懂的

14:42.860 --> 14:43.860
但是如果从来

14:43.860 --> 14:45.860
没有接触过数据库的同学

14:45.860 --> 14:46.860
那你看这个的话

14:46.860 --> 14:48.860
可能稍微有点吃力

14:48.860 --> 14:49.860
那这边你看一下

14:49.860 --> 14:50.860
其实circle也不难

14:50.860 --> 14:51.860
也不难

14:51.860 --> 14:52.860
这边就是什么呢

14:52.860 --> 14:53.860
create table

14:53.860 --> 14:54.860
create

14:54.860 --> 14:55.860
是不是创建

14:55.860 --> 14:56.860
table

14:56.860 --> 14:57.860
是创建一张表

14:57.860 --> 14:59.860
因为我们关系型数据库

14:59.860 --> 15:00.860
它这边里面是

15:00.860 --> 15:01.860
一张一张的二维表

15:01.860 --> 15:04.860
然后if not exists

15:04.860 --> 15:05.860
就是创建一张表

15:05.860 --> 15:06.860
如果这个表不存在

15:06.860 --> 15:07.860
让我们这边

15:07.860 --> 15:08.860
让我们就是

15:08.860 --> 15:09.860
创建一个什么

15:09.860 --> 15:11.860
创建一个stu

15:11.860 --> 15:13.860
就创建一个学生表

15:13.860 --> 15:14.860
那学生表的话有什么呢

15:14.860 --> 15:16.860
学生表的话有这个

15:16.860 --> 15:19.860
stu id

15:19.860 --> 15:21.860
就是有这个

15:21.860 --> 15:23.860
学生的这个学号

15:23.860 --> 15:24.860
对吧

15:24.860 --> 15:25.860
然后还有什么呢

15:25.860 --> 15:27.860
还有这个stuname

15:27.860 --> 15:29.860
stuname

15:29.860 --> 15:32.240
ok

15:32.240 --> 15:33.240
那这个stu id

15:33.240 --> 15:34.240
后面有一个什么呢

15:34.240 --> 15:36.240
有一个这个unique

15:36.240 --> 15:37.240
unique代表什么呢

15:37.240 --> 15:39.240
代表它是一个主键

15:39.240 --> 15:41.240
它是一个主键

15:41.240 --> 15:42.240
也就是它是唯一的

15:42.240 --> 15:43.240
你这个表里面

15:43.240 --> 15:45.240
不会有重复的

15:45.240 --> 15:46.240
对不对

15:46.240 --> 15:47.240
比如说你一个班级

15:47.240 --> 15:48.240
班级里面有学生

15:48.240 --> 15:50.240
那学生有什么东西是唯一的

15:50.240 --> 15:51.240
有什么是唯一的

15:51.240 --> 15:52.240
是不是就他们的学号啊

15:52.240 --> 15:53.240
对不对

15:53.240 --> 15:54.240
他们的学号一定是唯一的

15:54.240 --> 15:56.240
你说他们的名字能唯一吗

15:56.240 --> 15:58.240
你一个班生有可能有重名的

15:58.240 --> 15:59.240
对不对

15:59.240 --> 16:00.240
那你如果后面

16:00.240 --> 16:01.240
有一些其他的字段

16:01.240 --> 16:02.240
比如说学生的年龄

16:02.240 --> 16:05.240
那他就更不可能是唯一的了

16:05.240 --> 16:06.240
对不对

16:06.240 --> 16:07.240
那我们这边

16:07.240 --> 16:08.240
就定一两个字段就可以了

16:08.240 --> 16:09.240
一个学生的id

16:09.240 --> 16:11.240
一个学生的名字

16:11.240 --> 16:12.240
那学生id

16:12.240 --> 16:14.240
这个id它是唯一的

16:14.240 --> 16:15.240
所以我们这边的话

16:15.240 --> 16:16.240
把它定一层主键

16:16.240 --> 16:17.240
Ulic

16:17.240 --> 16:18.240
OK

16:18.240 --> 16:19.240
好

16:19.240 --> 16:20.240
然后执行这一步之后

16:20.240 --> 16:21.240
它就会创建一个表

16:21.240 --> 16:23.240
我们这边保存一下

16:23.240 --> 16:24.240
保存一下之后

16:24.240 --> 16:25.240
然后将我们这边

16:25.240 --> 16:27.240
回到我们这里

16:27.240 --> 16:28.240
你看

16:28.240 --> 16:30.240
这张表是不是就有了

16:30.240 --> 16:31.240
对不对

16:31.240 --> 16:32.240
stu这张表

16:32.240 --> 16:33.240
当然这张表的话

16:33.240 --> 16:34.240
现在是空的

16:34.240 --> 16:36.240
没有任何的数据

16:36.240 --> 16:37.240
好了

16:37.240 --> 16:38.240
接下来的话

16:38.240 --> 16:40.240
我们就要开始插入数据了

16:40.240 --> 16:41.240
那这边的话就是

16:41.240 --> 16:43.240
仍然是这个对象

16:43.240 --> 16:44.240
然后仍然是什么呢

16:44.240 --> 16:47.240
仍然是execute sql

16:47.240 --> 16:48.240
然后里面就填写什么呢

16:48.240 --> 16:50.240
里面就填写你的这个

16:50.240 --> 16:51.240
circle语句

16:51.240 --> 16:52.240
这边的话就是

16:52.240 --> 16:53.240
insert

16:53.240 --> 16:54.240
插入

16:54.240 --> 16:56.240
插入到哪里呢

16:56.240 --> 16:57.240
insert into

16:57.240 --> 16:58.240
插入到哪里呢

16:58.240 --> 17:00.240
插入到stu

17:00.240 --> 17:01.240
这张表里面

17:01.240 --> 17:02.240
好

17:02.240 --> 17:03.240
然后接下来

17:03.240 --> 17:04.240
哪些字段呢

17:04.240 --> 17:06.240
stuid

17:06.240 --> 17:07.240
还有个什么字段

17:07.240 --> 17:09.240
stuname

17:09.240 --> 17:10.240
对吧

17:10.240 --> 17:11.240
插入这两个字段

17:11.240 --> 17:12.240
然后接下来的话

17:12.240 --> 17:13.240
它的Values

17:13.240 --> 17:15.240
它的值是什么呢

17:15.240 --> 17:16.240
它的值的话

17:16.240 --> 17:17.240
学生的学号

17:17.240 --> 17:18.240
比如从1号开始

17:18.240 --> 17:19.240
然后接下来

17:19.240 --> 17:21.240
学生的姓名

17:21.240 --> 17:22.240
比如说

17:22.240 --> 17:23.240
谢杰

17:23.240 --> 17:27.060
对吧

17:27.060 --> 17:28.060
你看

17:28.060 --> 17:30.060
即使你没有学过这个circle

17:30.060 --> 17:31.060
那你这里的话

17:31.060 --> 17:32.060
应该也是看得懂的

17:32.060 --> 17:33.060
对不对

17:33.060 --> 17:35.060
它就是它这个表面意思吗

17:35.060 --> 17:36.060
是不是就是表面意思啊

17:36.060 --> 17:38.060
insert into

17:38.060 --> 17:40.060
插入到这个stu里面

17:40.060 --> 17:41.060
对不对

17:41.060 --> 17:42.060
然后接下来这个Values

17:42.060 --> 17:43.060
Values是值

17:43.060 --> 17:45.060
1插入到这个stuid

17:45.060 --> 17:46.060
然后加谢杰

17:46.060 --> 17:48.060
是这个stuname

17:48.060 --> 17:49.060
对吧

17:49.060 --> 17:50.060
那我们这边

17:50.060 --> 17:51.060
我们再来插入一个

17:51.060 --> 17:52.060
好

17:52.060 --> 17:53.060
然后加这边的话

17:53.060 --> 17:54.060
2

17:54.060 --> 17:55.060
然后接下来这边的话

17:55.060 --> 17:56.060
比如说

17:56.060 --> 18:00.230
张3

18:00.230 --> 18:01.230
张3

18:01.230 --> 18:02.230
OK

18:02.230 --> 18:03.230
好那接下来

18:03.230 --> 18:04.230
我们这边保存一下

18:04.230 --> 18:05.230
保存了之后

18:05.230 --> 18:06.230
然后加这边

18:06.230 --> 18:07.230
过来漏一眼

18:07.230 --> 18:08.230
是不是就有了

18:09.230 --> 18:10.230
看一下

18:10.230 --> 18:11.230
是不是就有了

18:11.230 --> 18:12.230
stuid

18:12.230 --> 18:13.230
2

18:13.230 --> 18:14.230
让大家这边

18:14.230 --> 18:15.230
姓名

18:15.230 --> 18:16.230
谢杰张3

18:16.230 --> 18:19.230
这是关于这个插入数据

18:19.230 --> 18:20.230
好然后接下来

18:20.230 --> 18:21.230
它插入数据的话

18:21.230 --> 18:22.230
也可以干嘛呢

18:22.230 --> 18:23.230
也可以动态的直来

18:23.230 --> 18:24.230
这个插入

18:24.230 --> 18:25.230
什么意思

18:25.230 --> 18:26.230
好我这边直接

18:26.230 --> 18:27.230
把这个复制过来

18:29.230 --> 18:30.230
比如有些时候

18:30.230 --> 18:31.230
我们这边是

18:31.230 --> 18:32.230
变量

18:32.230 --> 18:33.230
但这个变量的话

18:33.230 --> 18:34.230
肯定就是

18:34.230 --> 18:35.230
又通过其他的方式拿到的

18:35.230 --> 18:36.230
对吧

18:36.230 --> 18:37.230
比如我们这边

18:37.230 --> 18:40.060
插入一个理事

18:40.060 --> 18:41.060
理事

18:41.060 --> 18:43.060
理事的话19岁

18:43.060 --> 18:44.060
好让大家这边

18:44.060 --> 18:45.060
复制一份

18:45.060 --> 18:46.060
复制一份

18:46.060 --> 18:47.060
然后接下来你这边

18:47.060 --> 18:49.060
再进行插入的时候

18:49.060 --> 18:50.060
那你这边的话

18:50.060 --> 18:51.060
这个直

18:52.060 --> 18:53.060
它没有连领是吧

18:53.060 --> 18:54.060
我们这个粒子没有连领

18:54.060 --> 18:55.060
好让大家这边

18:55.060 --> 18:56.060
这边这个

18:56.060 --> 18:57.060
学号是不是

18:57.060 --> 18:58.060
应该是3号

18:58.060 --> 18:59.060
对不对

18:59.060 --> 19:00.060
让大家这个名字

19:00.060 --> 19:01.060
名字的话就应该是啥

19:01.060 --> 19:02.060
名字的话

19:02.060 --> 19:03.060
这边的话你就打一个什么

19:03.060 --> 19:04.060
打一个问号

19:04.060 --> 19:06.060
英文的问号

19:06.060 --> 19:07.060
打一个问号

19:07.060 --> 19:08.060
好让大家这边

19:08.060 --> 19:10.060
跟上第2个参数

19:10.060 --> 19:12.060
我们的sqt sql

19:12.060 --> 19:14.060
它第1个参数接收什么

19:14.060 --> 19:16.060
接收一条sql语句

19:16.060 --> 19:17.060
第2个参数

19:17.060 --> 19:18.060
接收什么

19:18.060 --> 19:20.060
接收一个参数数组

19:21.060 --> 19:22.060
看了没有

19:22.060 --> 19:23.060
那我们这边的话

19:23.060 --> 19:24.060
就可以把什么

19:24.060 --> 19:25.060
把这个sql

19:26.060 --> 19:28.060
是把这个变量传入进去

19:28.060 --> 19:29.060
对不对

19:29.060 --> 19:31.060
它这边就会插入这个理事

19:31.060 --> 19:32.060
好你这边保存一下

19:32.060 --> 19:33.060
保存一下

19:33.060 --> 19:34.060
然后接下你这边的话

19:34.060 --> 19:35.060
你过来看一下

19:35.060 --> 19:36.060
你可以看到

19:36.060 --> 19:37.060
现在是不是没有插入

19:37.060 --> 19:38.060
对不对

19:38.060 --> 19:39.060
没有插入

19:39.060 --> 19:40.060
为什么呢

19:40.060 --> 19:41.060
原因很简单

19:41.060 --> 19:42.060
你这边的话

19:42.060 --> 19:43.060
就我们这个表

19:43.060 --> 19:44.060
这个表现在是不是

19:44.060 --> 19:46.060
已经有学号1和2的

19:46.060 --> 19:47.060
对不对

19:47.060 --> 19:48.060
那你这个保存了之后

19:48.060 --> 19:49.060
它是不是

19:49.060 --> 19:51.060
重新会执行这两条数据

19:51.060 --> 19:54.060
这两条这个代码对不对

19:54.060 --> 19:56.060
它重新执行这两行代码的话

19:56.060 --> 19:57.060
你1和2是不是已经有了

19:57.060 --> 19:59.060
说这里的话它会失败

20:00.060 --> 20:02.060
这里它会失败

20:02.060 --> 20:03.060
那失败的话

20:03.060 --> 20:04.060
记不记得我们前面

20:04.060 --> 20:05.060
讲过这个事务

20:05.060 --> 20:07.060
事务的话只要失败

20:07.060 --> 20:08.060
它就会干嘛呀

20:08.060 --> 20:10.060
就会回滚

20:10.060 --> 20:13.060
所以第三条它就不会执行

20:13.060 --> 20:14.060
所以我们这边

20:14.060 --> 20:15.060
应该做了什么呢

20:15.060 --> 20:16.060
应该做的就是

20:16.060 --> 20:19.060
把这两条注释掉

20:19.060 --> 20:20.060
看到没有

20:20.060 --> 20:23.060
把这两条把它注释掉

20:23.060 --> 20:24.060
因为你已经有这个

20:24.060 --> 20:27.060
id为1和2的学生

20:27.060 --> 20:28.060
你如果再插入的话

20:28.060 --> 20:29.060
它是会失败的

20:29.060 --> 20:30.060
所以我们这边

20:30.060 --> 20:31.060
要把它注释掉

20:31.060 --> 20:32.060
那只插入什么呢

20:32.060 --> 20:34.060
只插入id为3的

20:34.060 --> 20:35.060
保存

20:35.060 --> 20:36.060
保存之后

20:36.060 --> 20:37.060
然后在这边看一下

20:37.060 --> 20:39.060
是不是理事就插入了

20:39.060 --> 20:40.060
对不对

20:40.060 --> 20:41.060
理事就插住了

20:41.060 --> 20:43.060
所以这边一定要注意

20:45.060 --> 20:46.060
这边给你写一下

20:46.060 --> 20:47.060
因为是一个事务

20:47.060 --> 20:49.060
否则不会成功

20:49.060 --> 20:52.750
否则不会成功

20:52.750 --> 20:56.750
因为这里是一个事务

20:56.750 --> 21:00.060
是一个事务

21:01.060 --> 21:06.060
务实的务实吧

21:08.060 --> 21:10.060
因为这里是一个事务

21:10.060 --> 21:13.060
前面失败了

21:13.060 --> 21:15.060
会导致

21:15.060 --> 21:18.060
后面也不执行了

21:18.060 --> 21:21.060
后面也失败

21:21.060 --> 21:22.060
所以你可以看到

21:22.060 --> 21:23.060
刚才我们这两条

21:23.060 --> 21:24.060
没有注释的时候

21:24.060 --> 21:26.060
是不是这边

21:26.060 --> 21:28.060
最后一条的插入语去

21:28.060 --> 21:30.060
它是失败了的

21:30.060 --> 21:31.060
对不对

21:31.060 --> 21:32.060
OK

21:32.060 --> 21:34.060
这是关于插入

21:34.060 --> 21:35.060
然后接下来

21:35.060 --> 21:37.060
我们来看一下这个读取

21:37.060 --> 21:38.060
读取的话

21:38.060 --> 21:39.060
我们这边是不是打开了

21:39.060 --> 21:41.060
一个新的事务

21:41.060 --> 21:42.060
对不对

21:42.060 --> 21:44.060
这边我们把这个写一下

21:44.060 --> 21:46.060
拿到我们的代码

21:46.060 --> 21:47.060
接下来我们这边的话

21:47.060 --> 21:51.890
就把这个事务

21:51.890 --> 21:52.890
把它注释了

21:52.890 --> 21:53.890
这个是插入语去

21:53.890 --> 21:56.890
我们现在不需要再插入语去了

21:56.890 --> 21:58.890
这个是插入语去

21:58.890 --> 22:04.100
插入语去

22:04.100 --> 22:05.100
好

22:05.100 --> 22:06.100
然后这边我们来看一下

22:06.100 --> 22:13.680
读取语去

22:13.680 --> 22:14.680
读取语去的话

22:14.680 --> 22:15.680
我们这边

22:15.680 --> 22:16.680
我们新开一个事务

22:16.680 --> 22:20.680
这边db.tryaction

22:20.680 --> 22:22.680
tryaction

22:22.680 --> 22:23.680
对吧

22:23.680 --> 22:24.680
好

22:24.680 --> 22:25.680
然后在这边

22:25.680 --> 22:27.680
接收一个回调函数

22:27.680 --> 22:28.680
回调函数里面

22:28.680 --> 22:29.680
接收一个参数

22:29.680 --> 22:31.680
这个参数是sql

22:31.680 --> 22:32.680
tryaction

22:32.680 --> 22:33.680
好

22:33.680 --> 22:34.680
然后接下来这边

22:34.680 --> 22:35.680
你要读取

22:35.680 --> 22:36.680
读取它仍然是干嘛呢

22:36.680 --> 22:38.680
其实仍然是执行src

22:38.680 --> 22:40.680
所以这边的话是一样的

22:40.680 --> 22:43.680
就是执行sql

22:44.680 --> 22:45.680
看到没有

22:45.680 --> 22:47.680
这个方法其实它

22:47.680 --> 22:48.680
接收什么呢

22:48.680 --> 22:49.680
接收四个参数

22:49.680 --> 22:51.680
我们刚才最多是什么

22:51.680 --> 22:52.680
最多是不两个参数

22:52.680 --> 22:53.680
第一个参数是什么

22:53.680 --> 22:54.680
第一个参数是不是

22:54.680 --> 22:56.680
你的circle语句

22:56.680 --> 22:57.680
第二个参数是不是

22:57.680 --> 22:58.680
你要传的参

22:58.680 --> 22:59.680
对不对

22:59.680 --> 23:00.680
我们刚看到这个参数

23:00.680 --> 23:02.680
传到这个问号

23:02.680 --> 23:04.680
它还接收第三个和第四个

23:04.680 --> 23:05.680
第三个是什么呢

23:05.680 --> 23:07.680
第三个是你执行

23:07.680 --> 23:10.680
玩这个circle语句后的回调

23:10.680 --> 23:11.680
第四个的话

23:11.680 --> 23:12.680
第四个的话

23:12.680 --> 23:14.680
是你失败的这个回调

23:14.680 --> 23:16.680
我们这边我们在这看一下

23:16.680 --> 23:18.680
我在这记得有看到没有

23:18.680 --> 23:19.680
它完整

23:19.680 --> 23:21.680
其实完整是四个参数

23:21.680 --> 23:22.680
我们前面只用了

23:22.680 --> 23:24.680
第一次只用了一个

23:24.680 --> 23:25.680
后面是不是用了两个

23:25.680 --> 23:27.680
但其实后面还有两个参数

23:27.680 --> 23:29.680
一个是执行

23:29.680 --> 23:32.680
这个circle语句后的回调

23:32.680 --> 23:33.680
另一个是什么呢

23:33.680 --> 23:36.680
另一个是这个错误的回调

23:36.680 --> 23:38.680
错误的回调

23:38.680 --> 23:39.680
好了我们这边

23:39.680 --> 23:40.680
我们直接来呗

23:40.680 --> 23:41.680
直接来看一下

23:41.680 --> 23:42.680
好这里的话

23:42.680 --> 23:43.680
我们就执行

23:43.680 --> 23:44.680
执行circle语句

23:44.680 --> 23:45.680
那这边呢就是

23:45.680 --> 23:46.680
select

23:46.680 --> 23:47.680
新靠

23:47.680 --> 23:48.680
from

23:48.680 --> 23:50.680
这个stu

23:50.680 --> 23:51.680
这个的话就是代表

23:51.680 --> 23:54.680
查询出所有的数据

23:54.680 --> 23:56.680
查询出所有的数据

23:56.680 --> 23:57.680
查询出所有的数据之后

23:57.680 --> 23:58.680
再加第二个参数

23:58.680 --> 23:59.680
第二个参数

23:59.680 --> 24:00.680
传的参数

24:00.680 --> 24:01.680
我们没有

24:01.680 --> 24:02.680
没有就写个空数组

24:02.680 --> 24:03.680
然后再加这边的话

24:03.680 --> 24:05.680
这个function

24:05.680 --> 24:07.680
这是成功后的回调

24:07.680 --> 24:09.680
还有失败后的回调

24:09.680 --> 24:11.680
你这边的话我们没有

24:11.680 --> 24:12.680
因为我们知道

24:12.680 --> 24:13.680
它肯定是成功的

24:13.680 --> 24:14.680
是吧

24:14.680 --> 24:15.680
好那我们这边就写第三个

24:15.680 --> 24:16.680
第三个的话

24:16.680 --> 24:17.680
它这边的话

24:17.680 --> 24:18.680
接受两个参数

24:18.680 --> 24:19.680
又是这个

24:20.680 --> 24:21.680
tx

24:21.680 --> 24:22.680
然后接下来的话

24:22.680 --> 24:23.680
这边results

24:24.680 --> 24:25.680
OK

24:25.680 --> 24:26.680
好那接下来我们这边

24:26.680 --> 24:28.680
分别我们打印一下

24:28.680 --> 24:29.680
tx

24:29.680 --> 24:31.680
以及results

24:31.680 --> 24:33.680
保存一下

24:33.680 --> 24:34.680
保存了之后

24:34.680 --> 24:35.680
然后接下来过来

24:35.680 --> 24:36.680
load

24:37.680 --> 24:38.680
呃

24:38.680 --> 24:40.680
db.tx is not function

24:40.680 --> 24:42.680
这边它说is not function

24:42.680 --> 24:44.680
大概率是这个

24:44.680 --> 24:46.680
单词写错了

24:47.680 --> 24:49.680
好那保存一下

24:50.680 --> 24:51.680
OK

24:51.680 --> 24:52.680
好那第一个参数

24:52.680 --> 24:53.680
是不是就是还是你的

24:53.680 --> 24:54.680
那个sql

24:54.680 --> 24:55.680
tx

24:55.680 --> 24:56.680
对不对空对象

24:56.680 --> 24:57.680
第二个

24:57.680 --> 24:59.680
第二个的话是叫做sql

24:59.680 --> 25:01.680
results it

25:01.680 --> 25:02.680
看到没有

25:02.680 --> 25:03.680
它也是个对象

25:03.680 --> 25:05.680
这个对象你就包含了什么呢

25:05.680 --> 25:07.680
包含了你执行那一条

25:07.680 --> 25:09.680
circle语句的一个结果

25:09.680 --> 25:11.680
然后里面有一个什么呢

25:11.680 --> 25:12.680
里面有一个这个

25:12.680 --> 25:13.680
results

25:13.680 --> 25:14.680
看到没有

25:14.680 --> 25:15.680
results里面时候就包含了

25:15.680 --> 25:16.680
你所有的数据

25:16.680 --> 25:17.680
对不对

25:17.680 --> 25:19.680
那你这边就可以直接

25:19.680 --> 25:23.680
这边点results

25:23.680 --> 25:25.680
保存一下

25:25.680 --> 25:29.380
这边是不是就拿到了

25:29.380 --> 25:30.380
对不对

25:30.380 --> 25:31.380
拿到这个数据了

25:31.380 --> 25:33.380
好那这个明白了的话

25:33.380 --> 25:34.380
我这边写的这个代码

25:34.380 --> 25:36.380
你也就看得懂了

25:37.380 --> 25:38.380
在这里

25:38.380 --> 25:39.380
你看这边的话就是

25:39.380 --> 25:41.380
首先定义了一个变量认

25:41.380 --> 25:43.380
认等于一个他的这个肉式

25:43.380 --> 25:45.380
然后这边还有定义一个i

25:45.380 --> 25:47.380
好然后接下来这边

25:47.380 --> 25:49.380
这边的话就是单纯的写了一个

25:49.380 --> 25:50.380
这个p表签

25:50.380 --> 25:51.380
然后里面记录什么呢

25:51.380 --> 25:53.380
查询记录调数

25:53.380 --> 25:54.380
认

25:54.380 --> 25:56.380
认的话是不是你这个results

25:56.380 --> 25:57.380
点肉式

25:57.380 --> 25:59.380
它的一个长度

25:59.380 --> 26:00.380
对不对

26:00.380 --> 26:02.380
好然后接下来的话在

26:02.380 --> 26:05.380
Hterm里面新增了一个div

26:05.380 --> 26:06.380
写一下吧

26:06.380 --> 26:07.380
写一下

26:07.380 --> 26:08.380
看着代码多

26:08.380 --> 26:09.380
其实一点都不难

26:09.380 --> 26:11.380
这边让我新增了一个div

26:11.380 --> 26:13.880
Status

26:13.880 --> 26:14.880
对吧

26:14.880 --> 26:15.880
刚才的话

26:15.880 --> 26:16.880
我们已经看到这个肉式

26:16.880 --> 26:17.880
肉式是什么

26:17.880 --> 26:18.880
肉式是不是这个对象

26:18.880 --> 26:19.880
是不是这个对象

26:19.880 --> 26:21.880
对他有认识属性

26:21.880 --> 26:22.880
认识是3

26:22.880 --> 26:24.880
所以我们在这边

26:25.880 --> 26:26.880
在这边

26:26.880 --> 26:28.880
我挖一个

26:28.880 --> 26:30.880
挖一个认

26:30.880 --> 26:32.880
等于一个results

26:32.880 --> 26:34.880
点肉

26:34.880 --> 26:36.880
点这个

26:37.880 --> 26:38.880
其实这个要不要

26:38.880 --> 26:39.880
都无所谓

26:39.880 --> 26:40.880
对吧

26:40.880 --> 26:41.880
这个没有不要要

26:41.880 --> 26:42.880
那我们这边不要这个变量

26:42.880 --> 26:43.880
不要这个变量

26:43.880 --> 26:45.880
要这个变量来干嘛呢

26:45.880 --> 26:47.880
我们这边就是MOSG

26:47.880 --> 26:49.880
然后等于一个

26:49.880 --> 26:50.880
我们这边就直接用这个

26:50.880 --> 26:52.880
值不算模板

26:52.880 --> 26:59.110
然后这边一个p

26:59.110 --> 27:01.110
一个p

27:01.110 --> 27:03.110
然后接下这边

27:03.110 --> 27:05.110
查询到的数据

27:05.110 --> 27:07.110
调数

27:07.110 --> 27:09.110
一共有

27:09.110 --> 27:10.110
对吧

27:10.110 --> 27:11.110
好

27:11.110 --> 27:12.110
然后

27:12.110 --> 27:13.110
不是这个

27:13.110 --> 27:15.110
然后接下来的话这边

27:15.110 --> 27:17.110
是不是应该是results

27:17.110 --> 27:19.110
点肉式点认识

27:19.110 --> 27:21.110
然后调

27:21.110 --> 27:22.110
对吧

27:22.110 --> 27:23.110
好

27:23.110 --> 27:25.110
然后接下来的话这边

27:25.110 --> 27:27.110
document点这个

27:27.110 --> 27:29.110
query selector

27:29.110 --> 27:31.110
然后这边的话是

27:31.110 --> 27:32.110
警号

27:32.110 --> 27:34.110
警号Status

27:34.110 --> 27:36.110
是不是拿到上面那个div

27:36.110 --> 27:37.110
拿到那个div

27:37.110 --> 27:38.110
然后接下他的什么呢

27:38.110 --> 27:40.110
他的inner

27:40.110 --> 27:41.110
html

27:41.110 --> 27:43.110
加等于一个

27:43.110 --> 27:44.110
MOSG

27:45.110 --> 27:46.110
好保存一下

27:46.110 --> 27:47.110
保存一下

27:47.110 --> 27:49.110
然后接下这边是不是就有了

27:49.110 --> 27:50.110
好

27:50.110 --> 27:51.110
然后我们把查询到的数据

27:51.110 --> 27:52.110
我们把它拿出来

27:52.110 --> 27:54.110
那这边的话就是

27:54.110 --> 27:56.110
一个4循环

27:57.110 --> 27:59.110
一个i等于0

27:59.110 --> 28:01.110
i小于

28:01.110 --> 28:02.110
所以应该是小于这个长度

28:02.110 --> 28:03.110
对吧

28:03.110 --> 28:04.110
但你这边的话就又要去

28:04.110 --> 28:05.110
获取一遍他的这个长度

28:05.110 --> 28:07.110
当这个手机显示出

28:07.110 --> 28:09.110
拿一个便量来存的好处了

28:09.110 --> 28:10.110
对不对

28:10.110 --> 28:12.110
当我们这边的话代码又不复杂

28:12.110 --> 28:14.110
那我们这边就再获取一次

28:14.110 --> 28:16.110
小于他的认识

28:16.110 --> 28:17.110
然后加这边

28:17.110 --> 28:18.110
i加加

28:19.110 --> 28:20.110
过来

28:20.110 --> 28:21.110
好过来之后

28:21.110 --> 28:22.110
然后接下来的话我们这边

28:22.110 --> 28:24.110
MOSG

28:25.110 --> 28:27.110
这边的话就是等于

28:27.110 --> 28:29.110
我就把这个拿过来

28:29.110 --> 28:31.110
这个有点长

28:32.110 --> 28:33.110
把这个拿过来

28:34.110 --> 28:35.110
这个也不难看到没有

28:35.110 --> 28:37.110
就是找到什么

28:37.110 --> 28:38.110
是不是找到他这边

28:38.110 --> 28:40.110
result.rose

28:40.110 --> 28:41.110
然后接下来这边他的这个

28:41.110 --> 28:42.110
item

28:42.110 --> 28:44.110
i的话是不是线是0

28:44.110 --> 28:45.110
是不是就第0项

28:45.110 --> 28:46.110
第0项是不是就第1项

28:46.110 --> 28:48.110
第1项然后接下来的内幕

28:48.110 --> 28:50.110
然后我们这个例子没有 edge

28:50.110 --> 28:52.110
把这个 edge 删掉

28:52.110 --> 28:53.110
然后加这边

28:53.110 --> 28:54.110
这边的话是叫做什么

28:54.110 --> 28:55.110
s to your

28:55.110 --> 28:56.110
内幕

28:56.110 --> 28:57.110
对不对

28:57.110 --> 28:58.110
好

28:58.110 --> 29:00.110
然后加完了之后

29:00.110 --> 29:01.110
完了之后

29:01.110 --> 29:02.110
然后加这边干嘛呢

29:02.110 --> 29:03.110
这边的话

29:04.110 --> 29:07.420
设置一下

29:07.420 --> 29:09.420
把这个MOSG

29:09.420 --> 29:11.420
给这个DIV

29:11.420 --> 29:12.420
给这个DIV

29:12.420 --> 29:14.420
OK保存

29:14.420 --> 29:16.420
是不是出来了

29:16.420 --> 29:17.420
对不对

29:17.420 --> 29:18.420
这里就出来了

29:18.420 --> 29:19.420
其实核心就是什么

29:19.420 --> 29:21.420
核心是不是就是通过

29:21.420 --> 29:23.420
result.rose

29:23.420 --> 29:25.420
是不是拿到你所有的

29:25.420 --> 29:27.420
查询到的这个数据

29:27.420 --> 29:28.420
对不对

29:28.420 --> 29:29.420
其实就这个后面的话

29:29.420 --> 29:31.420
都是一些花里胡哨的东西

29:31.420 --> 29:32.420
对吧

29:32.420 --> 29:33.420
只是为了让你的数据

29:33.420 --> 29:35.420
好的展示而已

29:35.420 --> 29:36.420
OK

29:36.420 --> 29:38.420
这是关于这个读取数据

29:38.420 --> 29:39.420
好

29:39.420 --> 29:40.420
然后接下来的话

29:40.420 --> 29:41.420
下一个

29:41.420 --> 29:43.420
下一个的话是三处数据

29:43.420 --> 29:44.420
那三处数据的话

29:44.420 --> 29:45.420
这边就是

29:45.420 --> 29:47.420
也是执行 circle

29:47.420 --> 29:48.420
看了没有

29:48.420 --> 29:50.420
这边就是delete from stu

29:50.420 --> 29:52.420
然后接下来用这个ware

29:52.420 --> 29:53.420
id 等于1

29:53.420 --> 29:55.420
但你如果没有学过

29:55.420 --> 29:56.420
这个 circle 的同学

29:56.420 --> 29:57.420
你不要着急

29:57.420 --> 29:58.420
我们后面有专门的

29:58.420 --> 30:00.420
那个my circle 的那个课程

30:00.420 --> 30:01.420
你后面

30:01.420 --> 30:02.420
看了那个之后

30:02.420 --> 30:04.420
你回头再来看这个简单的很

30:04.420 --> 30:06.420
简单的很简单

30:06.420 --> 30:08.420
这边那就是执行

30:08.420 --> 30:09.420
那也可以干嘛呢

30:09.420 --> 30:11.420
也可以这个动态的

30:11.420 --> 30:12.420
那我们这边

30:12.420 --> 30:14.420
我们来试一下吧

30:14.420 --> 30:16.420
我们这边的话

30:16.420 --> 30:18.420
读我们就不要它读了

30:18.420 --> 30:19.420
读就不要它读了

30:19.420 --> 30:22.420
我们这边就三处一个

30:22.420 --> 30:23.420
三处朝左

30:23.420 --> 30:24.420
这个动态的

30:24.420 --> 30:25.420
我也就不掩饰了

30:25.420 --> 30:26.420
是一样的

30:26.420 --> 30:27.420
对吧

30:27.420 --> 30:28.420
那我们这边就是

30:28.420 --> 30:30.420
这个这应该是什么

30:30.420 --> 30:32.420
这应该是stu

30:32.420 --> 30:34.420
id 等于1

30:34.420 --> 30:35.420
对不对

30:35.420 --> 30:36.420
那回头的话也就是说

30:36.420 --> 30:37.420
哪里

30:37.420 --> 30:39.420
这条械节会被删除掉

30:39.420 --> 30:40.420
对不对

30:40.420 --> 30:42.420
让我们这边保存一下

30:42.420 --> 30:44.420
保存了之后

30:44.420 --> 30:45.420
然后加这边

30:45.420 --> 30:47.420
是不是就删除了

30:47.420 --> 30:48.420
对不对

30:48.420 --> 30:49.420
就删除掉了

30:49.420 --> 30:50.420
好

30:50.420 --> 30:53.420
然后最后最后是修改

30:53.420 --> 30:54.420
修改的话

30:54.420 --> 30:56.420
也是同样是使用这个

30:56.420 --> 30:57.420
circle

30:57.420 --> 30:58.420
使用circle

30:58.420 --> 30:59.420
这边的话就是update

30:59.420 --> 31:00.420
更新什么呢

31:00.420 --> 31:02.420
更新这个stu这个表

31:02.420 --> 31:04.420
在这边设置这个名字

31:04.420 --> 31:06.420
比较设置成王西之ware

31:06.420 --> 31:07.420
ware什么呢

31:07.420 --> 31:09.420
就是你要设置哪条数据

31:09.420 --> 31:11.420
设置id为3的这个数据

31:11.420 --> 31:14.420
我相信你即使没有学过这个circle

31:14.420 --> 31:15.420
你看这个其实大的

31:15.420 --> 31:18.420
就多多少少还是能够看得懂

31:18.420 --> 31:19.420
对不对

31:19.420 --> 31:20.420
应该是能够看得懂的

31:20.420 --> 31:21.420
好

31:21.420 --> 31:22.420
那接下我们这边

31:22.420 --> 31:23.420
我们来试一下

31:23.420 --> 31:24.420
更新操作

31:24.420 --> 31:26.420
这个动态的

31:26.420 --> 31:28.420
动态的仍然就是不掩饰了

31:28.420 --> 31:31.420
把这个删除就注释掉

31:31.420 --> 31:32.420
好

31:32.420 --> 31:33.420
这边的更新

31:33.420 --> 31:36.310
OK

31:36.310 --> 31:38.310
我们这边只需要把这个

31:38.310 --> 31:42.310
把这个改成stuid

31:42.310 --> 31:43.310
它现在是什么

31:43.310 --> 31:45.310
现在是理事

31:45.310 --> 31:46.310
是吧

31:46.310 --> 31:47.310
现在是理事

31:47.310 --> 31:48.310
好

31:48.310 --> 31:49.310
大家这边保存一下

31:49.310 --> 31:50.310
保存了之后

31:50.310 --> 31:51.310
然后

31:53.310 --> 31:54.310
stuid

31:54.310 --> 31:56.310
这边怎么没有

31:57.310 --> 31:59.310
我看是不是哪里写错了

32:00.310 --> 32:02.310
这里的话应该是什么

32:02.310 --> 32:06.140
stuname

32:06.140 --> 32:07.140
对不对

32:07.140 --> 32:08.140
因为它不存在name之段

32:08.140 --> 32:10.140
它存在的是stuname之段

32:10.140 --> 32:11.140
再来

32:11.140 --> 32:13.140
这会应该就没问题了

32:13.140 --> 32:14.140
说王西兹

32:14.140 --> 32:15.140
对不对

32:15.140 --> 32:16.140
就修改成功了

32:16.140 --> 32:17.140
好

32:17.140 --> 32:19.140
这个的话就是这期课

32:19.140 --> 32:21.140
整个的一个内容

32:21.140 --> 32:23.140
本来说简单讲一下

32:23.140 --> 32:25.140
结果还是讲了半个多小时

32:25.140 --> 32:26.140
是吧

32:26.140 --> 32:27.140
好

32:27.140 --> 32:29.140
然后接下来最后总结一下

32:29.140 --> 32:30.140
就目前的话

32:30.140 --> 32:32.140
这个vivo sql

32:32.140 --> 32:34.140
它已经不再是

32:34.140 --> 32:36.140
w3c的这个推荐规范了

32:36.140 --> 32:38.140
这个我今天一上课

32:38.140 --> 32:39.140
我就说过了

32:39.140 --> 32:40.140
对不对

32:40.140 --> 32:41.140
因为官方的话

32:41.140 --> 32:43.140
它已经不再维护了

32:43.140 --> 32:44.140
什么原因呢

32:44.140 --> 32:45.140
有两个原因

32:45.140 --> 32:46.140
首先第一个

32:46.140 --> 32:48.140
就是这里面的这个circle

32:48.140 --> 32:49.140
它采用的是什么呢

32:49.140 --> 32:51.140
采用的是这个sql night

32:51.140 --> 32:53.140
采用的是sql night

32:53.140 --> 32:55.140
里面的circle

32:55.140 --> 32:58.140
它作为一个标准是不可接受的

32:58.140 --> 33:00.140
就是sql night

33:00.140 --> 33:01.140
里面的circle

33:01.140 --> 33:03.140
和我们的标准circle

33:03.140 --> 33:05.140
可能有一定的区别

33:05.140 --> 33:07.140
但这个的话我本身我没有接触过

33:07.140 --> 33:08.140
这个的话

33:08.140 --> 33:09.140
本身没有接触过

33:09.140 --> 33:11.140
但它既然它官方这么写了的话

33:11.140 --> 33:12.140
让我这边的话猜测到

33:12.140 --> 33:14.140
就是这个sql night

33:14.140 --> 33:16.140
它应该是和标准的这个sql

33:16.140 --> 33:18.140
有一定的出入的

33:18.140 --> 33:21.140
因为它写的是sql方言的

33:21.140 --> 33:22.140
对吧

33:22.140 --> 33:23.140
第二个

33:23.140 --> 33:24.140
第二个就是什么呢

33:24.140 --> 33:25.140
第二个就是

33:25.140 --> 33:28.450
这个vivo sql

33:29.450 --> 33:31.450
它使用的是这个circle

33:31.450 --> 33:33.450
它更像是一个什么呢

33:33.450 --> 33:36.450
更像是一个关系型数据库

33:37.450 --> 33:38.450
看到没有

33:38.450 --> 33:40.450
更像是一个关系型数据库

33:40.450 --> 33:42.450
那现在流行的是什么呢

33:42.450 --> 33:44.450
现在流行的是非关系型数据库

33:44.450 --> 33:46.450
就是像比如说index DB这种

33:46.450 --> 33:48.450
这个的话我们下节课来说

33:48.450 --> 33:50.450
这个index DB

33:50.450 --> 33:52.450
它的话就更像是一个什么呢

33:52.450 --> 33:54.450
更像是一个low circle的数据库

33:54.450 --> 33:57.450
它也是目前W3C

33:57.450 --> 33:59.450
强推的数据库方案

33:59.450 --> 34:00.450
这个我们在刚才的话

34:00.450 --> 34:01.450
我们也看到了

34:01.450 --> 34:02.450
在这里

34:02.450 --> 34:04.450
这个index DB

34:04.450 --> 34:05.450
对不对

34:05.450 --> 34:06.450
有这个

34:06.450 --> 34:07.450
好

34:07.450 --> 34:10.450
然后说说我们这边对这个vivo sql

34:10.450 --> 34:11.450
这个air

34:11.450 --> 34:13.450
就不做过多的这个介绍了

34:13.450 --> 34:15.450
你如果就是有兴趣的话

34:15.450 --> 34:16.450
我觉得你们应该没有兴趣

34:16.450 --> 34:19.450
谁会对一个已经废棋的东西有兴趣呢

34:19.450 --> 34:20.450
对吧

34:20.450 --> 34:21.450
然后这边的话

34:21.450 --> 34:23.450
就是贴了两个这个链接

34:23.450 --> 34:25.450
一个就是刚才开的这个

34:25.450 --> 34:26.450
就这个

34:26.450 --> 34:28.450
这个的话你看这边

34:28.450 --> 34:30.450
首先就给你来个worry

34:30.450 --> 34:31.450
看到没有

34:31.450 --> 34:32.450
首先就给你来个警告

34:32.450 --> 34:34.450
vivo sql

34:34.450 --> 34:36.450
然后这个special vacation

34:36.450 --> 34:37.450
就是规范的意思

34:37.450 --> 34:39.450
is not being maintained

34:39.450 --> 34:41.450
已经没有被维护了

34:41.450 --> 34:43.450
这个maintenance是维护的意思

34:43.450 --> 34:45.450
and does not have

34:45.450 --> 34:48.450
cross-browser support

34:48.450 --> 34:50.450
也就是不再具有什么呢

34:50.450 --> 34:51.450
就没有什么呢

34:51.450 --> 34:53.450
跨浏览器支持

34:53.450 --> 34:54.450
看到没有

34:54.450 --> 34:57.450
一来就给你一个警告

34:57.450 --> 34:58.450
那还有个链接

34:58.450 --> 35:00.450
还有个链接是

35:00.450 --> 35:02.450
CSDN上面的一篇文章

35:02.450 --> 35:04.450
我这边我也把它打开了

35:04.450 --> 35:05.450
这篇文章

35:05.450 --> 35:06.450
这篇文章的话

35:06.450 --> 35:08.450
它就是对你的这个

35:08.450 --> 35:10.450
就是对这个vivo sql

35:10.450 --> 35:12.450
做了一个详细的这个介绍

35:12.450 --> 35:13.450
但它这边的话也给你写了

35:13.450 --> 35:14.450
是不是已废棋

35:14.450 --> 35:15.450
对不对

35:15.450 --> 35:16.450
但它的介绍的话

35:16.450 --> 35:17.450
其实主要是包含什么呢

35:17.450 --> 35:19.450
主要是包含这个circle

35:19.450 --> 35:20.450
这些的话

35:20.450 --> 35:21.450
你看它这个内容这么多

35:21.450 --> 35:22.450
对不对

35:22.450 --> 35:23.450
它其实主要是circle的语法

35:23.450 --> 35:25.450
你只要学过circle

35:25.450 --> 35:27.450
这些东西你都不陌生的

35:27.450 --> 35:28.450
知道吧

35:28.450 --> 35:30.450
都不陌生的

35:30.450 --> 35:33.450
这个就是关于这个vivo sql

35:33.450 --> 35:36.450
就给大家介绍这么多

35:36.450 --> 35:37.450
ok

35:37.450 --> 35:38.450
这期课就先到这里

35:38.450 --> 35:39.450
再见

