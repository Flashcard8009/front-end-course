WEBVTT

00:01.520 --> 00:05.880
大家好 我是谢老师 这节课的话我们来看一下这个

00:06.380 --> 00:07.420
文档声明

00:07.920 --> 00:13.040
首先还是先来看这个面试题啊 这边的话我列举了三道面试题

00:13.300 --> 00:15.600
一个是什么是这个

00:15.860 --> 00:16.620
duck type

00:16.880 --> 00:20.200
是否需要在html5中使用

00:20.720 --> 00:24.300
另外一个是什么是严格模式于混杂模式

00:24.560 --> 00:29.940
最后一个是列举几条怪异模式中的这个怪批行为

00:30.140 --> 00:33.260
这三道面试题的话看上去完全不一样

00:33.520 --> 00:35.820
但其实他们考察的这个知识点

00:36.340 --> 00:37.100
是一模一样的

00:37.620 --> 00:40.180
他们考察的是什么呢 他们考察的就是这个东西

00:41.460 --> 00:42.480
文档声明

00:42.740 --> 00:44.780
好 那我们这边我们来看一下

00:45.820 --> 00:46.840
什么是文档声明

00:47.340 --> 00:51.440
html文档通常以文档声明开始

00:51.960 --> 00:55.020
该声明的作用是帮助浏览器

00:55.280 --> 00:59.380
来确定其尝试解析和显示的html

00:59.580 --> 01:00.360
文档类型

01:00.880 --> 01:01.880
那你看就是这个

01:02.140 --> 01:03.180
这玩意儿就叫做

01:03.440 --> 01:04.200
文档声明

01:04.700 --> 01:09.840
这个的话在我们的这个写文档的时候我们这边也看得到对吧我们新建一个html文档

01:10.100 --> 01:10.600
你看这边

01:10.860 --> 01:12.140
是不是第一个就是这个东西

01:12.900 --> 01:17.000
对不对 这玩意儿就是叫什么呢 这个东西就叫做文档声明

01:17.500 --> 01:19.560
处于我们这个html文件的

01:19.820 --> 01:20.840
这个第一行

01:21.100 --> 01:22.880
那这玩意儿有什么用呢

01:23.140 --> 01:24.940
其实这边的话就已经说过了

01:25.440 --> 01:25.960
它有什么用

01:26.220 --> 01:28.780
它是帮助浏览器确定

01:28.940 --> 01:31.340
如何来解析你的

01:31.860 --> 01:32.620
html文档

01:33.140 --> 01:34.920
对不对 我们这边我们来看一下

01:35.940 --> 01:39.540
html声明必须是html文档的第一行

01:39.800 --> 01:40.820
顶隔显示

01:41.080 --> 01:42.600
对大小写不敏感

01:43.120 --> 01:49.260
因为任何放在type前面的东西 比如批准或者插面这些

01:49.520 --> 01:50.800
会令这个

01:51.060 --> 01:54.900
i19或者早期的浏览器出发什么呢 出发怪异模式

01:55.360 --> 01:58.440
当然这个什么是这个怪异模式 我们一会儿有个章节

01:58.700 --> 01:59.720
就是这个渲染模式

01:59.980 --> 02:01.240
一会儿到这的时候我们来讲

02:01.500 --> 02:04.840
说这个东西它必须是在第一行

02:05.600 --> 02:06.640
首先这个你要明确

02:06.880 --> 02:07.900
它必须放在第一行

02:08.420 --> 02:09.440
然后接下来它的作用呢

02:10.200 --> 02:13.800
它的作用我们继续来看 它并非是一个html标签

02:14.300 --> 02:15.080
它不是个标签

02:15.340 --> 02:17.120
它是什么呢 它是一个信息

02:17.880 --> 02:18.660
什么信息呢

02:18.920 --> 02:20.720
告知我们浏览器

02:20.960 --> 02:24.560
你如何去解析这个文档类型

02:25.780 --> 02:28.180
我现在是不是写了个html文档

02:28.440 --> 02:29.980
对不对 你浏览器你要解析吧

02:30.240 --> 02:32.280
然后这样你如何来解析

02:33.040 --> 02:34.840
那有同学可能就会觉得很奇怪

02:35.100 --> 02:38.160
因为你这个html文档该怎么解析就怎么解析呗

02:38.420 --> 02:40.720
为什么我还要告诉这个

02:40.980 --> 02:43.540
浏览器你该怎么解析

02:43.800 --> 02:48.660
这个的话其实就要从什么呢 从我们html的这个发展历史来讲了

02:48.920 --> 02:50.460
我们这边我们大致来看一下

02:50.720 --> 02:52.500
这个整个html的发展历史

02:52.700 --> 02:56.940
你看html的话最早是1991年出现的

02:57.200 --> 02:59.820
然后后面出现了html加93年的时候

03:00.080 --> 03:04.700
然后到了95年2.0 96年的时候3.2 99年的时候

03:04.940 --> 03:06.280
然后4.01

03:07.040 --> 03:09.600
到2000年的时候 哎 2000年你看不一样了

03:09.860 --> 03:12.680
看到没有 是不是差html1.0

03:13.440 --> 03:16.000
对不对 然后接下来就过了很多很多年 看到没有

03:16.260 --> 03:18.820
2000年过了过了之后 过了十多年

03:19.080 --> 03:20.880
十多年之后出现了什么呢

03:21.100 --> 03:22.620
出现了html5

03:23.140 --> 03:28.520
那现在的话你就知道什么 你知道我们的这个html是不是有不同的这个版本啊

03:29.100 --> 03:34.400
对不对 有不同的这个版本啊 随着这个就是年代啊

03:34.660 --> 03:40.020
不同的这个年代 然后出现了这个不同的html版本啊 你看这边也有像这个图

03:41.060 --> 03:44.640
那这边的话 既然是不同的这个版本 那接下来他就会

03:44.900 --> 03:46.340
设计到一个什么问题呢

03:47.100 --> 03:50.280
一个最显著的区别就是 你不同的版本

03:50.580 --> 03:53.460
支持的html元素不一样

03:54.500 --> 03:56.220
看到没有 哎 比如说你看我这边

03:57.180 --> 04:01.180
啊 我这边有个这个表格 但这个表格只是结取了一部分啊 比如你看这边

04:01.700 --> 04:06.980
html5 html5 然后A标签支持 然后接下这个abbr支持 然后接下你看这个标签

04:07.700 --> 04:13.820
这个标签他是不是他就不支持了 对不对 但是你html4版本和这个插html 这两个的话

04:14.480 --> 04:15.080
是不是支持的

04:15.920 --> 04:21.880
对不对啊 那比如说这边啊 这些的话其实是h5新添加的这个语异化标签啊 比如说这个

04:22.840 --> 04:26.920
article aside 啊 这些的话是h5新添加的语异化标签

04:27.920 --> 04:30.720
h5是支持的 但是你看这边之前的这个

04:31.760 --> 04:33.520
html的这个版本是不支持的

04:34.200 --> 04:42.320
对不对 哎 说说现在你就知道为什么我在第一行我要添加这个文档声明 为什么 原因很简单 我要告诉这个

04:43.020 --> 04:45.820
浏览器你以哪一个版本

04:46.700 --> 04:49.180
来解析我的这个html文件

04:49.980 --> 04:52.140
对不对啊 说这个你就明白了

04:53.300 --> 04:58.580
啊 然后更多的这个你可以参与在这里啊 这里的话我给了一个链接 这个链接其实就是这里

04:59.380 --> 04:59.700
在这边

05:00.500 --> 05:05.540
可不可以啊 其实我刚才结的图也是这个啊 只问我只结了一部分 这边其实有很多

05:06.440 --> 05:14.000
看到没有 啊 但他这边没有列出这个所有的html版本 他只列了这个h5 h4和这个插html

05:14.320 --> 05:15.680
这个插html

05:16.360 --> 05:23.640
啊 但是通过这个其实你就已经知道了不同的这个html版本 他支持的这个标签那是不一样的

05:24.640 --> 05:29.440
对不对 哎 支持的这个标签他是不一样的啊 好 然后接下来我们继续

05:30.640 --> 05:35.080
好 然后接下来我们说了 第一行写这个文档声明是为了告诉这个浏览器

05:35.500 --> 05:40.780
你以哪个版本来解析我的这个html文档 那接下来不同的这个版本

05:41.260 --> 05:44.060
他的这个文档声明 写法他就应该不一样了

05:44.860 --> 05:48.140
对不对啊 那接下来我们来看一下不同的这个版本

05:48.900 --> 05:52.780
那首先是这个html5的这个文档类型声明 这个就很简单

05:53.420 --> 05:58.100
看到没有 一个感叹号 然后大泰泊 然后加html 非常的简单

05:58.820 --> 06:04.780
但是如果你涉及到一些老的版本 我们来看一下他们的这个文档声明是怎么写的呢 啊 比如说这边

06:05.860 --> 06:12.620
ftml 4.1 然后strict 还是严格模式啊 然后接下该dtd

06:13.620 --> 06:19.660
包含所有的html元素和属性 但是不包含展示性和气用的这个元素

06:20.420 --> 06:26.580
因为我们刚才看到了 他每一代有些新增的元素 有些就是废弃了一些元素 对不对啊 比如这个h

06:27.460 --> 06:32.860
html4.1 他这个之前气用了他就不包含了 好 让一下你重点看一下这个

06:33.320 --> 06:34.720
看看他的这个文档声明 你看

06:35.640 --> 06:41.560
你看 看到没有 这不是显着这样子的啊 然后接下来我们再来看一下这个html4.01

06:42.720 --> 06:52.160
trizational 这个是过渡版本 这个版本的话包含所有的html元素和属性 然后既然也包含什么呢 包含展示性和气用的这个元素 啊 比如这个

06:52.600 --> 06:57.480
font 啊 这个标签可能很多同学都不知道啊 你像我们html还有一个这个font标签

06:58.080 --> 07:02.240
啊 专门就是指定你字体啊 我指定他们的颜色呀 是什么的

07:02.540 --> 07:09.780
那后来的话 发现这个指定颜色 这应该是属于css的工作 对不对啊 说这种标签就被废弃掉了

07:10.740 --> 07:12.340
那既然我们来看一下他的这个文档声明

07:13.220 --> 07:21.260
看到没有 这里啊 他的文档声明就是长这个样子的 啊 然后更多的话你可以参与好像还是这个链接

07:22.220 --> 07:22.540
看一下

07:23.740 --> 07:25.580
呃 对 还是这个链接

07:28.180 --> 07:28.380
啊

07:30.060 --> 07:37.100
啊 就在这里啊 不不不一样不一样啊 链接不一样啊 你看这边啊 这个这个链接的话 你看这边是不是就包含了就是常用的这个

07:37.580 --> 07:44.120
大态不生灭 比较这个是h5的啊 这个是刚才所说的html4.01的对吧啊4.01

07:44.860 --> 07:47.460
这个是strict啊 然后接下来这边还有其他的

07:48.380 --> 07:54.300
看到没有 还有其他的啊 但这个东西呢不是说要让你去背他 这东西你干嘛去背他呢

07:54.520 --> 07:58.400
好 我这边的话之所以把它提出来 我希望你明白两点

07:59.360 --> 08:05.520
哪两点呢 首先第一个就是不同的这个html版本他的这个文档声明

08:06.600 --> 08:07.400
是不是不一样的

08:08.280 --> 08:13.120
对不对 你看这边不同的本本他的这个文档声明都是长不一样的 这是首先第一点

08:13.600 --> 08:21.880
这个你很好的就是很快你就会意识到这个啊 然后第二个我希望你能够意识到的就是什么呢 就是我们的这个html5的这个文档声明

08:22.780 --> 08:27.660
是不是很短 但是其他的你看这些文档声明是不是很长啊 同学们

08:28.660 --> 08:33.540
是不是很长啊 看到没有 哎所以这边他就会引出我们的第二个

08:34.300 --> 08:40.580
啊 第二个点 什么点了 就是为什么之前的那个就是文档声明这么长呢

08:41.900 --> 08:47.180
对不对 哎我现在html5的文档声明很短啊 就一个赶汤号大泰泊

08:47.580 --> 08:50.260
然后html 我背都背的下来 但是你看这些

08:50.880 --> 08:51.440
你看这些

08:52.160 --> 09:00.040
哎 你背的下来吧 对不对 是我反正我背不下来 对不对 那为什么他现在这么简单了呢 为什么以前那么长呢

09:00.440 --> 09:06.160
好 原因很简单 因为html5不再引入DTD文件

09:07.040 --> 09:11.120
而你其他类型的文档声明它是需要引入DTD的

09:12.200 --> 09:16.160
啊 你看这边的话一个新的名词就出现了啊 什么呢 DTD

09:17.140 --> 09:24.620
对不对啊 DTD 什么叫做DTD呢 好 我们这边接下来看啊 这个其实和这个整个html的这个历史

09:25.300 --> 09:27.620
是有关系的啊 我们这边往下面看

09:28.380 --> 09:32.940
在早期的这个html版本啊 例如这个html4.01

09:33.820 --> 09:42.500
包括之前的 他是需要引入DTD的 为什么呢 因为他基于这个s机枚啊

09:42.960 --> 09:50.200
但是我们的html5呢 他不基于s机枚所以他不需要DTD

09:51.440 --> 09:57.280
啊 可能有的同学到这儿就蒙圈了 你这个DTD 你没给我解释清楚 你又给我搞一个新的名词出来

09:57.800 --> 10:03.920
s机枚 什么又是s机枚 对吧 怎么还搞一个s机枚出来呢

10:04.900 --> 10:11.940
其实这里啊 你看这边啊 是的你没有看错 我们除了有s机枚啊 我们有html

10:12.340 --> 10:15.900
插枚 插html 然后html5

10:16.700 --> 10:24.180
是已经把你搞晕了 对不对 但其实呢 这些都是一家人 都是一家人啊 我们这边我们来看一下 首先我们来看这个

10:25.660 --> 10:29.460
ml ml是什么呢 ml的话

10:30.200 --> 10:35.240
英语全身叫做markup language 也就是说标记语言

10:36.440 --> 10:37.200
标记语言

10:37.960 --> 10:43.840
这其实就是我们最早啊 最早想到如何让这个计算机识别一段内容

10:44.400 --> 10:47.840
啊 然后面就想到什么呢 想到就是哎我可以给他添加标记

10:48.600 --> 10:56.200
好 我给你举个例子嘛 其实我这个经常我讲html的时候 我给学生举个例子 嗯 比如说我这边的话我写个作文

10:56.900 --> 10:59.540
啊 写个作文 写个什么呢 写个比如说今天天气

11:01.460 --> 11:04.700
呃 天气好

11:05.700 --> 11:13.700
啊 然后这边是我的第一段 第一段内容对吧啊 然后今天天气 呃 非常好

11:14.340 --> 11:20.340
我我这边直接这样子吗 这边直接lre m然后接下这边来一个50

11:21.780 --> 11:25.060
格式画一下 好然后接下这边呢 比如这个是我的第一段

11:26.340 --> 11:34.420
大家这个是我的第二段 第二段就只有一行 大家第三段 ok 好 让我们来看一下啊 这个呢是我写的作文

11:35.820 --> 11:44.540
我写的作文 这个是作文的标题 这个的话是这个作文的第一段 这个是作文的第二段 这个是作文的第三段

11:45.300 --> 11:49.420
对吧 好 那我们的话我们作为人 我们来看这段文字

11:49.940 --> 11:54.460
我们是不是很 就是很快的能够分辨出 哪个是标题 哪个是段落

11:55.200 --> 11:58.200
对不对 但是你想想计算机 他能不能分辨的出来

11:59.760 --> 12:02.320
计算机分辨的出来吧 他分辨不出来啊

12:03.280 --> 12:08.600
对不对 他分辨不出来的 对于他来讲这些都是什么呀 是不是就是一些这个制服啊

12:09.280 --> 12:15.200
对不对 全是一些制服 我怎么分得清楚什么是标题的 什么是段落 对吧 然后一些其他的

12:15.840 --> 12:21.600
我是分不出来的 对我来讲全部就是一些这个制服 那怎么办呢

12:22.340 --> 12:25.620
那后面的话 然后人们就想到干嘛呢 我给他加标记

12:26.460 --> 12:29.460
看到没有 比如说我这边我给他加标记 比如说我这边我给你写一个

12:32.200 --> 12:35.200
我给你写一个啊 比如说这个是标题

12:36.600 --> 12:38.120
对吧 然后接下来的话 这边

12:39.360 --> 12:45.280
这边的话是标题 当我这个是伟呆马啊标题 对吧 然后接下来这个的话是段落

12:48.380 --> 12:51.060
这个是段落 我我就把这个

12:51.920 --> 12:56.120
其实大家看这个已经有点眼熟了 对不对 已经有点眼熟了

12:56.960 --> 13:04.120
这是段落 然后我是不是前后给你加一个标记 那回头你计算机在解析这段文字的时候 因为你前后有标记

13:04.840 --> 13:09.520
对不对 前后有标记我就知道哦 这段标记之间的这个文字

13:10.600 --> 13:11.320
是不是就是段落

13:12.280 --> 13:18.400
对不对 因为你这边有标记啊 有标记我就知道哦 你这个标记之间的这个

13:19.220 --> 13:21.460
这这这段文字是标题

13:22.900 --> 13:27.980
明白没有 说为什么这边的话要使用这个标记语言 标记语言是有原因的

13:28.540 --> 13:36.260
不是乱来的啊 这个东西其实你看着已经很眼熟了啊 比如我把这个换成什么呀 换成我们的这个 h1 你看我们的 h t 们标签

13:36.740 --> 13:38.740
是不是就这样子了 对不对 比如我换成这个p

13:40.020 --> 13:40.820
啊 这边换成p

13:41.780 --> 13:44.660
对不对 哎 说我们的 h 和标签其实就是这么来的

13:45.280 --> 13:51.600
我给他加标记 加了标记之后 然后我的计算机在识别的时候 我知道这段文字啊 或者说每一段内容

13:52.320 --> 13:53.920
他究竟是干什么用的

13:54.680 --> 13:58.360
但最早是不是用到 h t 们呢 最早其实用的不是 h t 们

13:59.240 --> 14:01.120
最早用的是什么 最早用的是这个

14:02.480 --> 14:06.840
机面 机面 然后扩展到什么 扩展到s机面

14:08.000 --> 14:14.080
s机面 前面就是加了一个什么 加了一个 s 啊 这个就是标准的啊 standard

14:14.540 --> 14:21.580
这边 我们来看一下 看一下下面文字 机面是第一代啊 第一代 第一代的话 它肯定就比较粗糙嘛 对不对

14:21.820 --> 14:26.740
那所以说后面的话 出现了一个这个s机面 这个s其实就是那个standard的标准

14:27.780 --> 14:33.020
它的话是在机面的基础上进行整理的 它是什么呢 它是非常严谨的

14:34.100 --> 14:39.780
啊 非常严谨的 它里面就包含了什么呢 包含了你语法的这个定义以及dtd

14:40.040 --> 14:46.000
哎 你看这边是不是又涉及到dtd dtd是啥 dtd就是定义你里面 哎 有什么样的这个结构

14:47.680 --> 14:53.360
明白没有 什么样的结构 有些什么标签 我其实就是在这个dtd里面进行一个定义

14:54.720 --> 15:00.040
啊 比如说我们的这个html 里面有这个p标签 你凭什么有p标签吗 我写个欧标签行不行吗

15:00.800 --> 15:05.400
对不对 我写个其他的行不行吗 啊 这边的话其实就是什么呢 就是在dtd里面

15:06.260 --> 15:13.980
来定义的啊 你这个以什么样的文件格式 你文件的结构长什么样子 有哪些标签啊 这个就是在dtd里面

15:14.540 --> 15:20.900
进行这个定义啊 所以你现在就明白什么是dtd了 啊 还有这个文件实力 有这三部分主称

15:21.620 --> 15:27.540
啊 但是这个东西呢 它太严谨了啊 它规范都都有多少页 都有500多页

15:28.200 --> 15:36.360
这太多了 一般人没法学 这东西太多了 对不对 500多页 啊 所以它不易学 不易用啊 难以实现

15:37.000 --> 15:40.040
说后面就出现了什么的 后面就出现了html

15:41.480 --> 15:45.400
看到没啊 html的话 它其实就是从这个s gmail

15:45.920 --> 15:54.400
而来的 说为什么前面有一句话 这边啊 因为html 4.01基于s gmail 你看现在这句话你是不是看得懂了

15:55.120 --> 16:03.760
对不对 你就知道啊 是什么意思了啊 说这边的话s gmail 后面的话啊 因为它这个太严谨了 太复杂了啊 所有后面推出这个html

16:03.980 --> 16:10.220
那html它肯定就是在这个s gmail的基础上 是不是更加简单呀 对不对 你看这里这里写的有

16:10.620 --> 16:19.260
它最大的特点就是什么呢 简单 然后划平单 啊 它只使用了什么呢 只使用了s gmail中很少的一部分标签

16:19.980 --> 16:24.900
啊 大家学过html 大家其实都是有感受的 那html 其实常用的标签不多的

16:25.580 --> 16:31.500
对不对 你经常你写网页的话 你用了那个标签就那么几个啊 没有太多的啊 你看这边

16:32.700 --> 16:36.060
例如4.0里面只定义了什么 只定义了70余种

16:36.940 --> 16:39.900
啊 当我们其实真是在做开发的时候 我们还用不到70多种

16:40.580 --> 16:43.260
对不对啊 我们其实的话基本上用的就那么几种

16:44.140 --> 16:47.460
好 所以说在这个为了遍于计算机上实现

16:48.300 --> 16:54.380
html规定啊 标记是固定的啊 然后接下来是不可扩展的啊 这就是最早这个html

16:54.900 --> 16:59.620
然后后面的话又出现了一个什么呢 又出现了一个这个xmail

17:00.660 --> 17:06.180
啊 你看这边 这边这个xmail和这个html是平极的 看到没有 那这个xmail是什么呢

17:06.500 --> 17:09.740
xmail的出现其实是当时有一个这个需求

17:10.300 --> 17:15.140
什么需求呢 就是我这边前后端要做这个数据通信

17:16.340 --> 17:21.540
啊 但是这边的话要给他解释一下什么叫做前后端数据通信啊 比如你这边 比如你上网

17:22.500 --> 17:23.020
比如你上网

17:24.180 --> 17:26.780
比如上网我现在的话我比如我打开我的这个淘宝

17:28.900 --> 17:36.000
淘宝 我打开淘宝 这边呢是不是打开了这个淘宝的这个首页

17:36.640 --> 17:39.840
对不对 打开了这个淘宝的首页 那这个淘宝的首页

17:40.480 --> 17:42.360
是不是在我的计算机上面呢

17:43.280 --> 17:49.360
这个淘宝的这个首页 啊 以前的话比如说我这边啊 你看这边 比如我这边有一个这个index.html

17:49.680 --> 17:50.960
说说我这边啊 是不是可以把它打开

17:51.920 --> 17:56.480
看那边啊 我是不是可以把它打开 但是这个淘宝这个页面有没有在我的电脑上

17:57.160 --> 18:02.160
也没有在我的电脑上 对不对 那这个淘宝的页面在哪呢 在一个叫做服务器的地方

18:02.800 --> 18:07.440
那我这边是不是和服务器进行通信啊 对不对 我从服务器上面把什么呀

18:07.520 --> 18:10.160
是把这个页面 是不是把它拿过来了

18:11.200 --> 18:18.160
对不对 我从一个服务器的一个叫服务器的地方把这个页面拿过来了 这个页面其实不在我的电脑上的

18:18.560 --> 18:24.000
啊 那我这边呢 是不是就会涉及到这个和服务器进行通信 要拿一些这个数据

18:24.960 --> 18:31.360
对不对 那最早的话这个通信啊 想到这个前后端要拿数据 最早的话用想到的是这个html

18:31.680 --> 18:35.280
但是这个html的话 它的这个它是无法扩展的

18:36.160 --> 18:43.600
啊 它是无法扩展的 你看这边 就是html的局限性 它越来越这个明显的啊 它无法描述这个数据

18:44.000 --> 18:47.680
可读性差这个差 搜索时间长

18:48.880 --> 18:52.320
啊 搜索人们又把目光转转向了这个sgmail

18:52.880 --> 18:57.360
啊 然后接下来话 后面就诞生了什么呢 诞生了这个差没有

18:58.080 --> 19:04.560
这个主要是做什么呢 主要其实就是做网络传输的这个数据格式的啊 我可以给大家看一下啊

19:05.040 --> 19:07.040
这差没有长什么样子 其实就长这个样子

19:08.480 --> 19:10.560
看到没有 这后面的html很像

19:11.440 --> 19:18.000
对不对 但是呢 你会看到一些 这些标签我没学过啊 其实在差没有里面就是你自己来定义这个标签

19:18.800 --> 19:23.920
自己来定义 你看这个和那个html是不完全不一样 html我是不是定死了的

19:24.560 --> 19:28.160
对不对 你p标签就p标签divdiv 我没有什么O标签

19:28.800 --> 19:31.680
对不对 我没有什么一些z标签r标签

19:32.160 --> 19:35.200
我是定死的的 但是在那个差没有里面

19:35.840 --> 19:41.360
啊 你这个标签是自己定义的 为什么呢 因为我差没有主要是用来传输数据的

19:42.080 --> 19:44.560
你看我这边是不是就是一些数据信息啊

19:45.680 --> 19:47.840
看到没有 就是一些数据信息

19:48.480 --> 19:53.920
哎说最早的时候前后端做这个数据传输的时候用了就是什么 用了就是差没有

19:54.480 --> 19:59.680
啊 但现在的话差没有用的少了啊 现在有一个更方便的东西 叫做接生

20:00.400 --> 20:04.160
啊 有同学应该也是听过的或者用过的 对不对啊

20:05.040 --> 20:08.320
好 回到我们这边 好 然后后面的话就出现了这个差没有

20:08.880 --> 20:12.000
好 然后接下来后面又出现什么呢 你看这边两个的这个结合

20:12.640 --> 20:15.920
html和这个差没有结合出现了什么

20:16.800 --> 20:18.800
出现了这个差html

20:19.440 --> 20:22.240
看到没有 哎 这边出现了这个差html

20:23.360 --> 20:29.440
啊 这个差html他出现的背景是什么呢 就是当时的话这个html他的语法太松散了

20:30.240 --> 20:33.120
松散到那种程度 松散到我可以这个样子

20:34.320 --> 20:41.040
啊 当时的那个html他不严格 因为他当时想的就是简单嘛 怎么简单怎么来

20:41.440 --> 20:45.840
啊 我甚至我可以这个样子 我可以这个样子

20:46.800 --> 20:49.200
看到没有 哎 我前面小写

20:50.000 --> 20:54.880
前面小写后面大写 啊 甚至有的开发人员我直接我干脆我就不

20:55.280 --> 20:56.560
不写这个结束标记

20:57.280 --> 20:58.320
一样的是ok的

20:58.880 --> 21:00.080
他就太松散了

21:00.640 --> 21:05.520
太松散了啊 所以说后面的话就出现了什么呢 就在这个背景之下出现了这个

21:06.000 --> 21:07.040
xhtml

21:07.920 --> 21:15.760
啊 因为就是因为当时html太松散了啊 对于这个网页编写者来讲的话确实比较方便

21:15.920 --> 21:20.320
但是对于机器来说的话 你这个语言越松散 我处理起来就越困难

21:21.120 --> 21:24.880
对不对 原因很简单 以前你这样子你好好的给我写

21:25.840 --> 21:30.240
啊 以前的话你好好给我写 你这样子跟我写我知道哦 这这个

21:31.040 --> 21:37.040
这个标记之间啊 这个就是断路啊 你现在给我这样子来写了我 我这个机器我哪分得清楚嘛

21:37.680 --> 21:43.840
对不对 你这个是小写这个是大写 我这边在解析的时候我就解析不出来 甚至你这个压根你就没给我写

21:44.880 --> 21:50.480
结束标签你都没给我写 对不对 我这个让我这个机器在解析的时候 我怎么知道你这个

21:51.040 --> 21:51.920
到哪结束呢

21:52.720 --> 21:56.160
对不对 所以说后面就出现了这个xhtml

21:56.880 --> 22:06.240
他就是更加严格了啊 就语法上上面啊 对于这个就是网页编写 编写者来讲 他更加的严格 他比如说要求你这个大小写

22:06.720 --> 22:11.200
啊 大小写必须是这个小写啊 并且必须要有这个结束标记

22:12.240 --> 22:20.160
看了没有啊 然后接下来这边啊 这边产生了由dtd定义的这个规则 刚才dtd师问我已经提到了

22:21.120 --> 22:26.960
dtd是干嘛的 师问我刚才在介绍他的时候我说了他就是定义什么的 这就是定义你的这个规则的

22:27.840 --> 22:36.320
定义你的文档结构啊 然后定义你这个标签这些啊 你看这边dtd这个教程啊 这边还有dtd的教程你可以过来漏译

22:37.600 --> 22:41.360
这边看了没有dtd简介啊 这个是w3c

22:42.000 --> 22:47.920
死固的 你可以大致漏译啊 这个东西倒不要不用你去学啊 但是你这边你可以漏译

22:48.640 --> 22:50.320
你看一下这个这玩意到底是什么

22:52.240 --> 23:01.280
看了没有啊 这边定义定义这个元素名称啊 就是你这边其实他这个dtt就是定义什么了 定义是不是有点些元素啊

23:01.680 --> 23:05.440
看了没有 你看我这边是不是就声明了一个元素 对不对 他的类别啊

23:06.640 --> 23:08.000
ok 好

23:09.600 --> 23:17.120
好 然后最终的话这个html5 html5是html的这个第五个修订版啊 这个版本的话它不再基于

23:17.440 --> 23:22.320
sgmail了 所以干嘛呢 所以它就不需要再引入dtd了

23:23.200 --> 23:29.120
明白没有啊 原因就这么简单啊 所以以后你面试的时候 你比如遇到这道面试题

23:29.680 --> 23:30.960
这道面试题

23:30.960 --> 23:38.240
html5中是否要用这个文档声明啊 文档声明可能要写嘛 对吧 这是文档声明 是否需要这个

23:39.200 --> 23:46.640
书写dtd 那你现在就知道了要不要书写啊 是不需要书写 对不对 为什么啊 他可能还会问你为什么

23:47.280 --> 23:52.320
啊 原因很简单 因为这个版本不基于sgmail啊 对不对 你基于sgmail的

23:52.880 --> 23:57.360
需要这个引入dtd声明 我这个html5我不基于这个sgmail

23:57.920 --> 24:09.200
所以我不需要引入dtd声明啊 让我这边顺便说一下啊 就是现在现在国内心上所说 就是出去啊 有同学面试啊 他会问你你会不会h5开发

24:10.560 --> 24:16.720
啊 有同学就会被问蒙了 什么叫做h5开发 其实这个h5开发其实就是大家学过的

24:17.280 --> 24:25.280
只不过他现在的话 他这个h5开发其实指的就是什么呢 指的就是最新的html5加css3加es6

24:25.840 --> 24:27.280
他的一个这个组合

24:28.160 --> 24:29.360
他的一个这个组合

24:30.000 --> 24:34.880
啊 说这边的话就是你看这边有个公式啊 大概可以用如下公式 就是html5

24:35.280 --> 24:40.640
开发啊 开发哈 我指的是html5开发 越等于html这里应该是html5

24:44.030 --> 24:47.310
啊 其实就是html是吧 然后加一个css3

24:47.870 --> 24:51.790
然后加这个es6 他指的是这整个这一套这个东西

24:52.910 --> 24:59.310
啊 说出去的时候啊 别人问你会不会这个html5开发啊 或者他可能会问你会不会h5开发

24:59.550 --> 25:00.670
你不要被问蒙了

25:01.150 --> 25:03.630
他指的是就是啊 一整套

25:04.030 --> 25:10.030
就是前端了这个h5 html5 css3和es6啊 一整套技术的一个这个集合

25:10.590 --> 25:10.830
啊

25:11.790 --> 25:15.870
啊 这是关于这个文档声明的这个概念 就给大家介绍这么多

25:16.430 --> 25:19.550
好 然后接下来 接下来的话是这个关于这个渲染模式

25:20.670 --> 25:24.030
啊 这节课我们还要介绍一个东西 就是这个渲染模式

25:24.670 --> 25:28.510
啊 这个渲染模式 浏览器的这个渲染模式让它分为三种

25:29.150 --> 25:32.110
哪三种呢 一个是这个怪皮模式

25:32.910 --> 25:35.070
啊 这个啊cssmode

25:35.470 --> 25:39.710
他有些地方也被翻译成这个混杂模式 你看前面我们那个整体

25:40.430 --> 25:44.670
整体这边是不是就是啊 什么是严格模式和混杂模式

25:44.830 --> 25:48.510
然后这边第三体是不是就是怪异模式 那这个怪异模式就是什么呀

25:48.750 --> 25:52.270
是不是就是这个混杂模式啊 对不对啊 你要分得清楚

25:52.670 --> 25:57.790
好 大家这边第二个 严格模式和标准模式 就是这个standards

25:58.190 --> 25:58.670
mode

25:58.910 --> 26:02.430
然后还有一个什么呢 还有一个几乎标准模式

26:02.830 --> 26:03.550
almost

26:04.590 --> 26:05.230
standards

26:05.630 --> 26:05.950
mode

26:06.910 --> 26:09.390
哎呀 你看我们这个浏览器渲染模式都有三种

26:10.670 --> 26:17.870
好 那为什么会出现这个三种啊 或者说出现这种不同的这个渲染模式呢 其实也是这个

26:18.990 --> 26:20.270
历史原因造成的

26:21.390 --> 26:25.950
看到没有 也是历史原因造成的 好 我们这边大致把这段话看一下啊

26:26.270 --> 26:29.630
就最早的时候 就是我们这个最早的浏览器 网景浏览器

26:30.430 --> 26:33.230
还有最早我们的IE IE那个时候还是IE4

26:33.950 --> 26:36.270
那个时候他们实现这个css的时候

26:37.230 --> 26:40.590
他们没有遵循这个w3c的这个标准

26:41.630 --> 26:46.990
没有遵循w3c的标准 是不是会导致什么呀 是会导致各自有一套这个渲染标准

26:47.630 --> 26:53.790
对不对 那各自有一套渲染标准啊 会导致什么呢 会导致我们程序员很痛苦啊

26:54.670 --> 26:58.510
对不对 我为了满足用 我不知道用户究竟用了什么浏览器

26:58.990 --> 27:02.270
有的用户可能用的是IE 有的用户可能用的是网景

27:02.750 --> 27:08.030
我又不知道它用的是什么浏览器 但我为了让就是在不同的这个浏览器里面

27:09.390 --> 27:13.950
显示出我的这个网页 都是就是我设计出来的那个样子

27:14.590 --> 27:16.270
所以我这边的话对于程序员来讲

27:16.750 --> 27:21.550
是很痛苦的 我可能会需要去写大量的这个兼容性的这个代码

27:22.190 --> 27:26.430
对不对啊 然后后面的话这个w3c这个标准推出了

27:26.910 --> 27:30.190
推出了之后那大家就干嘛呢 大家是不是按照这个标准来

27:30.670 --> 27:36.110
对不对 你也不要用你那一套啊 我也不用我这一套 我们都干嘛呢 我们都根据这个标准来

27:36.670 --> 27:39.550
但是根据这个标准来的 但是有一个问题

27:40.270 --> 27:42.030
什么问题呢 就是如果

27:43.070 --> 27:44.270
就是我这边的话

27:45.470 --> 27:49.310
你看这边存在一个问题 就是如何保证旧的网页

27:50.430 --> 27:51.390
还能继续浏览

27:52.110 --> 27:58.750
对不对 为什么 因为你在标准出来以前 其实已经有很多页面 它是根据什么呀 它是根据旧的这个血染方法

27:59.230 --> 27:59.790
编写的

28:00.350 --> 28:06.190
那你如果现在你用新的这个标准来渲染 就会导致什么呢 导致你的这个页面显示它不正常

28:06.990 --> 28:12.030
所以怎么办呢 说说为了保持这个浏览器渲染的这个兼容性

28:12.510 --> 28:14.990
使这个以前的页面能够正常浏览

28:15.630 --> 28:19.390
啊 说说我们这边的话 就浏览器的话 你可以就是开起这个

28:19.790 --> 28:23.630
怪异模式和严格模式 就不同的这个渲染模式

28:24.030 --> 28:26.110
哎 它共存在一个浏览器上

28:26.590 --> 28:31.550
其实它是干什么呢 其实就是为了保持浏览器渲染的兼容性

28:32.030 --> 28:33.390
就这么一个原因

28:34.430 --> 28:39.310
明白没有 啊 说说你面试的时候被问到为什么浏览器会存在这个怪异模式

28:40.030 --> 28:43.550
啊 那你现在就知道该怎么回答了 为什么会存在怪异模式

28:43.950 --> 28:48.990
是为了保证以前的旧的那些网页 能够继续浏览

28:49.470 --> 28:52.510
对不对 说说这个浏览器的话 哎 它相当于开了个后门

28:53.470 --> 28:55.710
啊 你可以采用标准这个严格模式

28:56.110 --> 28:58.110
那这个的话就是采用的W3C的标准

28:58.590 --> 29:04.270
但是你如果是渲染之前的这些网页 啊 之前有那么多网页 我全部按照这个标准模式来

29:04.590 --> 29:09.550
渲染 这会出问题 那怎么办呢 哎 我这边还给你提供了一个怪异模式

29:09.870 --> 29:12.350
啊 或者说混杂模式 就这么简单

29:12.910 --> 29:14.110
明白没有 OK

29:15.470 --> 29:21.550
好 然后既然对于这个HTML文档来说 浏览器使用这个文档开头的这个DarkType

29:22.110 --> 29:27.230
来决定使用这个怪异模式处理 还是使用标准模式处理

29:27.710 --> 29:31.310
哎 说说这个开头这个文档声明是很重要的

29:32.190 --> 29:34.750
明白没有 其实在前面是不是有这么一句话呀

29:35.550 --> 29:36.750
啊 在这里看到没有啊

29:37.310 --> 29:44.910
啊 因为任何放在DarkType前面的东西啊 会令早期的浏览器触发什么呢 触发怪异模式

29:44.990 --> 29:47.710
这个其实就相当于它开的后门了 对不对 如果你要

29:48.190 --> 29:53.230
触发怪异模式怎么办呢 那很简单 你在这个文档声明之前 你是不是再加点东西就可以了

29:53.470 --> 29:56.430
对不对 你加个注释啊什么的啊 就可以了

29:58.590 --> 29:58.910
OK

29:59.710 --> 30:01.550
好 然后他可能还会问你

30:01.950 --> 30:06.350
他还会问你什么呢 他还会问你这个怪异模式和这个标准渲染模式

30:06.670 --> 30:08.350
那具体有什么区别

30:08.990 --> 30:13.390
那具体有什么区别呢 我们这边我们来看一下啊 这边的话我列举了那么极点

30:13.710 --> 30:19.870
首先第一个 严格模式和怪异模式 他部分的这个渲染区别首先第一个就是关于这个核模型

30:20.830 --> 30:22.830
大家知道在这个w3c

30:23.470 --> 30:31.310
标准核模型里面 我们的宽高啊 我们的宽高只包含什么 这只包含这个元素内容的宽高

30:32.510 --> 30:36.830
对不对 但是在这个i1 你看这里啊 i5.5

30:37.470 --> 30:38.990
极以下的这个浏览器

30:39.870 --> 30:46.430
它在这个怪异模式下面 它的宽高还包含了什么呢 还包含了这个pidding和border

30:47.390 --> 30:49.070
看见没有 是不是就不一样了

30:49.790 --> 30:53.470
对不对 就不一样了 你这个东西你要让我去改啊 比如说你想想

30:53.790 --> 30:58.350
你当时那个标准模式出来之后 你如果全部同意都按个标准模式来渲染

30:58.670 --> 31:00.510
让我之前那么多那个页面

31:01.150 --> 31:04.110
你去改吧 一个一个去改吧 是不改死你

31:04.830 --> 31:09.630
对不对啊 你的那个一个页面里面那么多盒子 全部都要去重新去算 重新去改

31:09.950 --> 31:16.750
那现在的话它提供了这两种渲染模式 我是不是只需要在之前的那个页面上 是不是添加一行代码就可以了

31:17.550 --> 31:18.670
对不对 okay

31:19.790 --> 31:25.630
那还有第二个啊 设置这个行内元素的宽高啊 在标准模式下面

31:26.030 --> 31:31.150
你给这个行内元素 就是sbenz行内元素 对吧 但还有些其他的这个行内元素

31:31.470 --> 31:37.710
你设置宽高是不是不生效的 这个大家都知道 对吧 我我要给行内元素设置宽高 我首先要把它

31:38.030 --> 31:42.750
变成一个是会计元素 对不对 但是如果你是在观音模式下面 它是会生效的

31:43.310 --> 31:50.190
看到没有啊 那第三个比如说设置百分比啊 标准模式下面 你的元素的这个高度

31:51.390 --> 31:57.710
呃 它是有什么呢 由这个内容来决定的 也就是我们的指元素可以把负元素的高度是不是把它称起来

31:58.510 --> 32:05.150
对不对啊 然后如果负元素没有设置高度 指元素设置一个百分比高度是无效的

32:05.710 --> 32:09.070
啊 然后接下来这边啊 用这个margining auto

32:09.470 --> 32:13.390
设置水平居中 在ie下会失效啊 这个也是这个

32:14.110 --> 32:17.390
呃 这个怪异模式下面 怪异模式下面 你没办法用这个

32:17.790 --> 32:22.110
来设置合着水平居中啊 然后加这边解决方案的话 就是

32:22.670 --> 32:24.270
这里啊 但还有些其他的

32:24.750 --> 32:30.750
还有些其他的 这个到你大致看一下 心里有个数就可以了啊 到时候面试的时候

32:31.150 --> 32:36.350
面试的时候你能够达出来那么几条就可以了啊 现在外面考察你这个

32:37.470 --> 32:42.190
就是这个怪异模式和这个标准模式啊 具体有什么区别 这个其实还是比较少了

32:42.750 --> 32:45.070
现在我们前端的话基本上还是往前看

32:45.710 --> 32:49.550
啊 就是不会像以前一样啊 那么重视就是兼容性问题

32:50.510 --> 32:55.630
啊 但是这边呢 你如果想了解更多的话 我这边附了两个这个网址啊 一个是这个

32:56.990 --> 33:02.590
关于这个怪异模式和标准模式啊 这个是mdn上面对他的这个解释

33:03.150 --> 33:06.190
那还有一个就是什么呢 还有一个就是啊 嗯 这两个模式

33:06.750 --> 33:10.030
具体的这个渲染这个区别啊 但这个是英文的

33:10.910 --> 33:12.190
你这边呢 可以去看一下

33:13.070 --> 33:17.870
他这边就列举了啊 看到没有 他列举的很细 看到没有 包括这个ie9

33:18.590 --> 33:25.630
啊 然后ie10对不对啊 列举的很细 直播全英文的 你这边的话可以看一下

33:26.750 --> 33:32.990
ok 好 这是关于这个血染模式啊 好 那接下来我们来回到刚才的那个整体

33:34.110 --> 33:40.270
首先第一个 什么是dark type 是否需要在html5中使用 那现在你是不是就可以回答了

33:40.830 --> 33:42.750
什么是dark type啊 这文档声明

33:43.230 --> 33:46.990
干什么用的 是不是告诉浏览器 是不是以那种

33:47.550 --> 33:50.430
版本来解析我的这个html文档

33:51.070 --> 33:52.590
对不对啊

33:52.990 --> 33:58.750
那是否在html5中使用啊 肯定是吗 我们html5是不是也要写文档声明

33:59.710 --> 34:04.830
对不对啊 告诉浏览器 整个文档使用html5的标准

34:05.470 --> 34:06.990
来进行解析啊

34:07.950 --> 34:13.310
啊 第二个 什么是严格模式与混杂模式 这是不刚才也说了

34:14.110 --> 34:19.150
对不对 严格模式又称之为标准模式 混杂模式又称之为怪异模式

34:19.630 --> 34:21.630
啊 然后接下来的话 这边

34:22.270 --> 34:22.510
呃

34:24.190 --> 34:27.150
啊 这里写了一下就如何啊 如何进入到那个

34:27.790 --> 34:31.230
呃 混杂模式 如果文档包含严格的dark type

34:31.470 --> 34:34.750
它是严格模式啊 包含过渡的dtd

34:35.470 --> 34:38.590
和这个UI的dark type 它也是这个严格模式

34:39.310 --> 34:42.350
啊 但是你有这个过渡的dtd没有这个UI

34:42.910 --> 34:48.110
那它就是混杂模式啊 这边就是介绍一下就是如何进入到混杂模式

34:49.230 --> 34:50.190
你这边的话你还可以

34:50.750 --> 34:56.510
再干嘛呢 再说一下就是这个严格模式和混杂模式它的这个意义 哦这有这有啊意义

34:56.910 --> 35:01.950
什么意义啊 其实就是干嘛呀 是不是就是为了就是照顾以前旧的网页

35:02.990 --> 35:04.350
对不对啊 你看这边写的有

35:04.750 --> 35:08.830
如果只存在严格模式 说许多旧网站会受到影响

35:09.790 --> 35:14.350
对不对啊 这个就是它的意义 说为什么会出现不同的渲染模式

35:15.230 --> 35:21.070
呃 下一个列举几条怪异模式中的怪皮行为 那是不是就是上面的

35:22.030 --> 35:27.310
对不对 就上面的啊 你稍微列举一下就可以了 比如像我这边这个样子列举一下

35:27.710 --> 35:34.430
比如宽高的算法呀 表格中肢体样式不会继承啊 怪异模式下可以设置行内员数宽高

35:34.910 --> 35:35.710
怪异模式下

35:36.990 --> 35:39.950
怪异模式下啊 这个这个东西会失效

35:40.750 --> 35:48.030
对吧 你把这个的话就是列举一下 好吧 好 这一刻的话就是给大家介绍这个啊 介绍这个文档声明

35:48.510 --> 35:54.830
这个这个知识很重要 非常非常重要 就你一定要知道啊 什么是文档声明

35:55.310 --> 36:02.990
以及就是为什么需要这个文档声明啊 包括一些相关的知识点啊 比如我们这边说的这个严格模式和混杂模式

36:03.150 --> 36:07.070
其他也是属于这个文档声明部分的这个知识点

36:08.030 --> 36:14.030
对不对啊 大家下来的话把这个看一看吧 好吧啊 这一刻就先到这里啊 再见

