WEBVTT

00:01.010 --> 00:04.850
大家好 我是解老师 这节课的话我们来看一下这个

00:05.610 --> 00:08.690
生前拷贝 这里的话有一道题

00:09.450 --> 00:14.830
生拷贝和钱拷贝他们的区别是什么 然后如何实现

00:15.090 --> 00:16.370
也就是说生拷贝

00:16.890 --> 00:19.690
有哪些方式 钱拷贝有哪些方式

00:20.210 --> 00:23.790
好了 首先的话我们再介绍就是生拷贝和钱拷贝

00:24.050 --> 00:26.090
各自有哪些方式之前

00:26.350 --> 00:27.630
我们先把这个

00:27.890 --> 00:29.690
生前拷贝的这个概念

00:30.010 --> 00:31.230
我们把它明确一下

00:31.490 --> 00:33.010
什么叫做钱拷贝呢

00:33.530 --> 00:37.890
钱拷贝顾名示意就是他拷贝的是什么 拷贝的是值

00:38.390 --> 00:39.670
就是这边我们看一下

00:39.930 --> 00:43.010
只是拷贝了基本类型的这个数据

00:43.250 --> 00:46.590
比如说如果你是基本类型的数据

00:46.850 --> 00:47.870
我拷贝数据

00:48.130 --> 00:52.990
那你如果是引用类型 引用类型我拷贝的是什么 我拷贝的就是你的

00:53.250 --> 00:53.750
地址

00:54.010 --> 00:55.550
就这个引用地址

00:56.050 --> 00:58.110
专业一点叫做什么 叫做指针

00:58.570 --> 00:59.850
就我拷贝他的

01:00.110 --> 01:00.870
类存地址

01:01.390 --> 01:04.210
也就是说你无论是新对象还是旧对象

01:04.470 --> 01:08.050
他们其实是什么呢 其实是共享同一块

01:08.810 --> 01:09.330
类存的

01:10.610 --> 01:11.370
那既然

01:11.630 --> 01:15.470
共享同一块类存 那我比如说我修改新对象的

01:16.230 --> 01:19.310
某一个属性 那旧的对象是不是也会跟着修改

01:20.070 --> 01:22.630
对不对 因为他们指向同一个地址

01:22.890 --> 01:24.430
这就是所谓的钱拷贝

01:25.450 --> 01:26.730
那什么叫做生拷贝呢

01:26.950 --> 01:29.250
生拷贝就是指的是 你看

01:29.750 --> 01:30.730
在堆中

01:30.990 --> 01:33.090
会重新分配类存

01:34.110 --> 01:37.950
看到没有 我会重新分配类存 也就是说新对象和旧对象

01:38.210 --> 01:38.710
他们

01:38.970 --> 01:41.270
是完全什么的 完全隔离开的

01:41.790 --> 01:45.370
完全隔离开的 也就是说不会共享同一个地址

01:45.890 --> 01:49.730
那既然不会共享同一个地址的话 那你修改新对象

01:50.230 --> 01:51.510
他对旧的对象

01:51.770 --> 01:52.790
是没有任何的影响

01:53.570 --> 01:55.610
看到没有 这里我们这边看一下

01:56.090 --> 02:01.410
把原对象所有属性都进行新建拷贝 以保证生拷贝的对象的引用

02:02.850 --> 02:07.970
引用图不包含任何原有对象或对象图上的任何对象

02:08.330 --> 02:09.890
也就是说两个是完全隔离开的

02:10.730 --> 02:15.490
好吧 这就是关于这个生拷贝和钱拷贝的这个概念

02:16.330 --> 02:19.690
好 完了之后 那接下来我们就来看一下关于这个钱拷贝

02:20.530 --> 02:21.210
有哪些方法

02:22.690 --> 02:24.890
那首先第一个 第一个的话是最常见的

02:25.890 --> 02:27.290
就是什么呢 就是直接复制

02:28.450 --> 02:30.810
直接复制 比如说我们这边我们来举个例子

02:31.690 --> 02:35.690
比如我们这边 哇一个stu等于一个

02:36.650 --> 02:37.490
这边的name

02:38.570 --> 02:43.410
卸接 好 这样我这边哇一个stu2等于一个stu

02:44.250 --> 02:47.050
那这里的话他就是把什么呢 把这个stu这个对象

02:47.490 --> 02:49.730
因为这个变量背后其实存储的是一个地址

02:50.210 --> 02:51.090
他就把这个地址

02:51.690 --> 02:57.410
复制给这个stu2 那这两个对象 其实指向的是同一个内存空间

02:57.970 --> 03:01.890
啊 然后接下来你这边你修改这个stu2.name

03:03.490 --> 03:05.010
等于一个这个张三

03:05.770 --> 03:09.250
啊 那接下来的话两个就都改了 这个虚片我画个图啊

03:09.890 --> 03:10.730
还是画个图吧

03:11.690 --> 03:13.130
可能有同学也搞不清楚这个

03:13.770 --> 03:17.250
就是我们的内存地址的话 比如说这边他分为站和堆嘛

03:18.370 --> 03:20.610
对不对 有这个站区 这个的话是站

03:22.090 --> 03:24.530
啊 稍微等一下我这样子写字稍微有点慢

03:25.370 --> 03:26.090
这个叫做站

03:27.890 --> 03:29.690
好 大家还有个什么 是不是 还有一个堆

03:31.210 --> 03:34.690
还有一个堆 好 比如说我们这边stu

03:36.090 --> 03:37.730
比如说我们这边s

03:39.370 --> 03:39.690
t

03:41.490 --> 03:46.930
u 是吧 他这里存储的是什么 存储的是这边的一个地址 比如说我们这边有个这个name

03:48.090 --> 03:48.730
这个name

03:49.730 --> 03:52.570
啊 这个画图点是name

03:53.650 --> 03:55.050
对应的是什么呢 对应了

03:56.730 --> 04:00.810
对应的是这个细节 我就减写了啊xg

04:01.650 --> 04:06.610
对应了这个 那他是不是会有一个这个内存地址 然后他的话就指向这个地址

04:08.130 --> 04:15.410
看没有 然后你这边负责的话相当于就什么呢 这边负责把stu stu他有一个地址 大家把这个地址

04:16.010 --> 04:21.160
负给了这个stu2 把这个地址

04:23.120 --> 04:27.560
负给了stu2 所以说stu2干嘛呢 也指向这个地址

04:28.440 --> 04:32.640
啊 所以说你这边的话 你比如说 你打印我们这边log

04:33.480 --> 04:35.760
log这个stu 点 name

04:36.520 --> 04:41.720
我发现这个stu也就变成张三了啊 我们改明明改的是什么 这stu2

04:42.680 --> 04:44.280
对吧 我们这边我们刷新一下

04:45.280 --> 04:48.200
说他也变成张三了 对不对

04:49.480 --> 04:50.480
啊 我这个

04:52.120 --> 04:56.480
啊 这是首先第一种方式啊 前靠背的第一种方式 直接复制

04:57.320 --> 04:59.400
好 然后接下来我们这边我们来看第二种

05:01.120 --> 05:05.560
第二种的话是通过这个object 这个object 点 assign 方法

05:06.240 --> 05:09.520
啊 这个方法的话就是什么呢 我们首先来看一下这个方法是干什么的

05:10.200 --> 05:14.040
该方法用于将所有可没举属性的值

05:14.480 --> 05:18.240
从一个或多个元对象分配到目标对象

05:18.960 --> 05:25.280
这个什么意思啊 也就说你看我这边 我这边object 点 assign 这边的话就是这个是我的目标对象

05:26.160 --> 05:28.240
stu 然后接下来的话他这边的话

05:30.120 --> 05:36.920
这后面是不是也是对象 对不对 这个是第二个对象 这个是第三个对象 那既然这些对象他们的这个属性值

05:37.200 --> 05:41.480
就会被分配到他上面啊 比如说我们这边我们来举个例子嘛

05:42.240 --> 05:44.040
好 我把这个

05:44.800 --> 05:45.320
注实了

05:47.120 --> 05:47.880
呃 这里

05:51.570 --> 05:54.370
这里是第一个这个是前靠背

05:56.170 --> 05:56.930
前靠背

05:59.080 --> 06:01.120
啊 前靠背的第一个

06:01.880 --> 06:04.440
前靠背的第一个就是直接复制

06:06.000 --> 06:07.280
好 然后接下来第二个

06:08.280 --> 06:12.400
第二个的话是使用object 点 assign

06:13.160 --> 06:13.680
方法

06:14.640 --> 06:18.240
我们先来看一下这个这个方法的这个基本使用啊

06:20.500 --> 06:23.580
方法的基本使用

06:24.100 --> 06:33.210
好 怎么用呢 这边的话 我这边object 点 assign 点 assign

06:33.970 --> 06:39.610
好 接收首先第一个参数是你的目标对象 比如说我这个目标对象上面就一个属性

06:40.130 --> 06:46.010
谢谢 好 然后既然这边我在接收一些其他的对象 比如说我这边的话 a 级18

06:47.690 --> 06:49.450
好 然后接下来这边的话比较精致

06:50.210 --> 06:51.730
然后没有

06:52.250 --> 06:53.530
看到没有 那回头了他

06:53.810 --> 06:59.410
他就会把后面这些对象他的属性值合并到你的目标对象上面

06:59.690 --> 07:00.970
那比如我们这边接收一下

07:01.730 --> 07:04.530
哇一个这个obj 等于

07:05.050 --> 07:07.610
好 然后接下来这边log一下obj

07:08.370 --> 07:09.410
好 这边来看一下

07:10.170 --> 07:10.690
刷新

07:11.450 --> 07:11.970
看到没有

07:12.490 --> 07:13.250
是不是合并进去了

07:13.770 --> 07:17.610
啊 合并进去了 那如果比如说遇到同名的这个建置队

07:17.850 --> 07:20.930
我们来看一下 比如说我这边的话 我已经有一个

07:21.690 --> 07:24.770
a 级了啊a 级的话 然后比如说是个20

07:25.530 --> 07:28.050
那他是做一个什么样的处理呢 我们这边刷新

07:29.370 --> 07:32.970
你会发现他说后面对象的值会把前面的给覆盖掉

07:33.730 --> 07:39.090
对不对啊 比如说我们这边的话 这个a 级这边 这边的话 其实也已经有一个

07:39.610 --> 07:43.650
ginder的啊ginder的话 比如说是一个比较fame mail

07:44.650 --> 07:49.490
fame mail 啊 但是你后面的话 你合并的这个对象是不是有这个mail

07:50.010 --> 07:51.810
对不对 他就会把它给覆盖掉

07:52.570 --> 07:57.290
所以这边是吧 还是mail ok 啊 这是他的基本使用

07:57.810 --> 08:02.290
好 使用这个方法的话 我们可以干嘛呢 我们可以实现一个对象的拷贝

08:03.050 --> 08:05.130
啊 怎么拷贝呢啊 那很简单

08:05.570 --> 08:06.890
来到我们的这个代码里面

08:10.960 --> 08:12.000
啊 使用

08:13.000 --> 08:14.280
使用这个方法

08:16.430 --> 08:17.190
这个方法

08:18.870 --> 08:19.510
实现

08:20.590 --> 08:22.350
对象的拷贝

08:22.910 --> 08:24.910
好 怎么拷贝呢啊 比如说我这边有个对象

08:25.510 --> 08:27.230
stu 等于一个

08:28.030 --> 08:28.470
name

08:29.350 --> 08:29.790
卸贱

08:30.830 --> 08:31.310
a 级

08:31.910 --> 08:32.230
18

08:32.870 --> 08:39.710
是吧 好了 接下来我要对他进行拷贝 怎么拷贝 那很简单 我这边的话 就直接挖一个stu2

08:40.310 --> 08:41.990
等于一个object

08:42.790 --> 08:43.590
点assign

08:44.430 --> 08:47.310
好 这样我这边放一个新对象 这个是不是个新对象

08:47.790 --> 08:49.070
好 然后接下来哈 这边

08:49.830 --> 08:50.270
stu

08:51.590 --> 08:54.350
可不可以啊 那接下来我们这边我们打一下stu

08:55.310 --> 08:56.070
stu2

08:57.790 --> 08:58.550
这边的话刷新

08:59.870 --> 09:00.350
出来了

09:01.070 --> 09:01.790
是不是拷贝了一番

09:02.590 --> 09:10.390
对不对 好 但是你要注意哈 这种拷贝形式虽然能够拷贝 但是呢 他拷贝的是一个什么呢 他这边的话 其实是一个

09:10.830 --> 09:11.590
前拷贝

09:12.630 --> 09:14.350
他是个前拷贝 然后看这个例子

09:15.070 --> 09:15.630
看这个例子

09:16.630 --> 09:17.590
可以说我们这边

09:19.270 --> 09:20.270
把这儿注射掉

09:22.230 --> 09:23.190
好 这边第三个

09:23.830 --> 09:27.070
我先把这个放在这 格式化一下

09:27.630 --> 09:30.510
啊 就是使用这个object3方法

09:32.830 --> 09:33.150
是

09:34.430 --> 09:36.430
一个前拷贝

09:37.510 --> 09:44.670
他是个前拷贝 他会对这个值 比如我们这边是不是有个内幕值啊 内幕值他会对这个值啊 进行一个拷贝 对这个进行一个拷贝

09:45.110 --> 09:51.270
但是如果遇到你的值里面 又是一个引用类型的话 他拷贝的也是什么呢 也是这个地址

09:51.630 --> 09:54.190
好 我们这边我们来证明一下啊 这边的话

09:55.310 --> 09:56.470
呃 挖一个

09:57.230 --> 09:58.190
啊 这还是这句话吗

09:59.270 --> 10:00.350
是吧 还是这句话

10:02.430 --> 10:06.070
好 stu2 好 然后先让我们这边log一下

10:07.150 --> 10:08.430
log一下stu

10:09.150 --> 10:11.030
stu2啊 首先我们log一下

10:12.270 --> 10:12.590
刷新

10:13.150 --> 10:13.870
啊 两个是不是

10:14.390 --> 10:22.230
出来了 两个出来了之后 然后接下来的话 你去改值 改值的话 他没有影响啊 比如说我这边的话 我对这个stu2

10:24.530 --> 10:28.770
stu2点内幕 我让他等于一个 等于一个张三

10:29.530 --> 10:31.930
好 然后接下来我们这边一刷新啊

10:32.770 --> 10:36.290
这个第一个他是解决 第二个的话是张三 这个没影响

10:36.890 --> 10:39.370
为什么呢 因为你这边的话 他是对这个值进行一个拷贝

10:39.930 --> 10:45.610
但是这里 你注意 这里的话 他是对这个stu infer这个对象的第一次进行拷贝

10:45.970 --> 10:48.010
所以说你比如说我这边

10:49.490 --> 10:53.490
啊 比如说我这边stu2点stu infer

10:54.250 --> 11:00.450
然后点这个lumber 我该改成什么了 改成二 那你就会发现两个就都变了

11:01.410 --> 11:03.530
啊 比如说我们这边展开 看到没有

11:04.530 --> 11:05.530
是不是这个也变成二了

11:06.530 --> 11:17.410
啊 说他其实是一个什么呢 他其实是一个前拷贝 这点的话一定要注意啊 一定要注意object.3他是一个前拷贝

11:18.370 --> 11:25.210
与这个object.3类似的 还有一个什么呢 还有一个是这个es6的扩展运算幅

11:26.250 --> 11:31.530
啊 这个的话 我们还是先看一下他如何来使用的 来到我们的这个代码里面

11:32.530 --> 11:49.820
这是第三个啊 把这个注释掉 第三个啊es6的扩展运算幅啊 这扩展运算幅怎么用呢 扩展运算幅是这个es6

11:50.340 --> 11:59.700
提供的一个新的这种语法 他就是可以把你就是可迭代的这个元素全部给你展开啊 比如说我们这边举个例子

12:00.660 --> 12:03.580
哇一个这个ar 等于一个

12:05.260 --> 12:07.660
等于一个123

12:08.940 --> 12:13.540
这是有个数组啊 好了 这样我们这边再挖一个ar2 等于一个什么呢

12:14.460 --> 12:20.860
比如353456 好 然后接下来这边点点点

12:21.500 --> 12:21.940
哎呀啊

12:23.300 --> 12:31.900
可不可以啊 点点点呀 他就会干嘛呢 他就会去把这里面的每一项取出来 把一取出来 把二取出来 把三取出来

12:32.340 --> 12:34.900
好 那接下来回头你这边你log一下

12:35.700 --> 12:39.340
ar2啊 你就会发现他这边的话ar2就是什么

12:40.300 --> 12:42.540
这356123

12:43.780 --> 12:44.780
可不可以啊啊

12:46.180 --> 12:55.300
啊 这是这个es6的扩展运算幅 那使用这个扩展运算幅的话 我们也可以实现什么的 也可以实现对象的拷贝啊 比如举个例子

12:58.580 --> 12:59.180
举个例子

12:59.980 --> 13:06.790
好 使用 使用扩展运算幅也可以

13:07.630 --> 13:14.270
实现对象的拷贝 好来举个例子 比如说哇一个还是stu吗

13:14.990 --> 13:17.870
等于一个啊 有没有写好的啊 就他吧

13:19.510 --> 13:21.430
懒得敲了 是吧 好

13:24.350 --> 13:28.390
好 这边这边的话有这么一个对象 好 然后这样我要进行一个拷贝

13:28.910 --> 13:32.510
stu2等于他等于一个新对象

13:32.750 --> 13:35.590
然后接下来我这边点点点stu

13:36.710 --> 13:41.390
看到没有啊 这边他就会做什么事情呢 他这边就会把这个stu里面每一项

13:42.070 --> 13:44.670
取出来放到我的这个新对象里面

13:45.470 --> 13:48.190
那回头我们这边我们打印一下stu2

13:50.450 --> 13:52.810
stu2 好 然后接下来这边刷新

13:53.490 --> 13:53.890
出来没有

13:54.690 --> 13:56.930
就出来了 好 然后接下来的话

13:58.090 --> 14:01.650
我们这边稍微变一下哈 我们这边首先打印两个

14:02.610 --> 14:09.970
stu和stu2 但是呢 我这边stu2点这个name 我把它变这个变一下 变成张三

14:11.010 --> 14:12.690
好 然后接下来这边我们来看一下

14:13.490 --> 14:14.770
刷新 你看

14:15.650 --> 14:20.530
这边的话 拷贝成功了 然后这边改这个名字 是不是 感觉上没有影响

14:21.090 --> 14:25.730
对不对 但是这里的话 我要告诉你 他其实也是一个前拷贝

14:26.690 --> 14:32.580
但是 但是使用这个

14:33.300 --> 14:39.780
扩展运算服实际上也是什么呢 也是前拷贝

14:40.460 --> 14:45.260
那我怎么证明呢 这不就和上面的方式是一样的 对不对 好 我把这个复制一份

14:47.780 --> 14:51.900
复制一份 好 我怎么来证明 是不是和上面一样 我加一个什么样

14:52.620 --> 14:54.540
加一个这种对象的一些

14:55.340 --> 15:02.700
lumber是一个1 好就加一个就可以了 好 然后接下来的话 我这边stu2.stu

15:03.620 --> 15:09.500
infer 点这个lumber等于一个2 好 然后回头这边我们来看一下刷新

15:12.180 --> 15:14.300
看到没有 跟着一起变了

15:15.900 --> 15:21.700
跟着一起变了 说明他在展开的时候也是对什么呀 他在展开的时候是不是也是对这个的值

15:22.180 --> 15:27.780
这个的值 大家这个这个对呢 值是一个地址 就直接把地址是不是拷贝了一番

15:28.660 --> 15:36.060
对不对啊 说说这个扩展运算服 他也是什么呢 也是一个前拷贝啊 一定要注意

15:36.900 --> 15:38.300
好 然后接下来下面

15:39.580 --> 15:39.940
下一个

15:41.180 --> 15:47.220
下一个的话 就是关于这个数组啊 数组的这个slice和conquit

15:47.820 --> 15:51.700
这两个方法 大家应该是学过的吗 一个是slice slice是结取

15:52.380 --> 15:59.260
对吧 那conquit conquit 是拼接 那这两个方法的话 都可以干嘛呢 都可以就是我用来

16:00.820 --> 16:03.220
就是快速的拷贝一个数组

16:03.860 --> 16:08.180
啊 我使用这个conquit 可以快速的拷贝一个数组 使用slice

16:08.740 --> 16:12.020
也可以快速的拷贝一个数组啊 来我们来试一试

16:15.240 --> 16:17.800
比如说这边 这是第几个了 第四个

16:18.280 --> 16:30.620
第四个 使用 使用这个数组的这个slice和conquit

16:32.380 --> 16:36.860
方法来快速的负责

16:38.220 --> 16:46.300
负责一份数组啊 但前提是你要知道这两个方法啊 如果你不知道这两个方法的话 我建议你把视频暂停一下

16:46.620 --> 16:53.420
你去那个mdn 查一下这两个方法是怎么用的啊 你首先要知道 好 我们这边挖一个ar

16:54.220 --> 16:56.060
等于一个123

16:56.940 --> 17:05.340
ok 好 那使用slice slice怎么复制呢 很简单 我这边的话 ar 等于一个 ar 点

17:05.980 --> 17:12.380
slic 就直接我不给他传参 不给他传参 他是不是就是重启 第一个 结取到最后一个

17:12.860 --> 17:18.140
对不对 好 那接下我们这边我们可以log一下log ar 以及 ar

17:18.860 --> 17:20.220
好 然后接下这边刷新

17:21.340 --> 17:26.540
哎 是不是两个数组 两个数组 然后这样我对其中一个进行一个修改啊 比如 ar

17:27.420 --> 17:31.100
2 然后0 等于一个100

17:31.980 --> 17:36.300
好 然后接下来这边刷新啊 这边可以看到是不是变成100了

17:36.860 --> 17:40.140
对不对 变成100了 好 然后接下我们这边再使用那个

17:40.780 --> 17:48.780
再使用这个conquit ar3 等于一个 ar 那conquit的话也是直接调这个conquit

17:49.180 --> 17:54.860
他本意是拼接这个数组 但是我不给他传任何的数组 那他拿到的是不是就是只是这个

17:55.260 --> 18:01.740
原来的这个数组 对不对 没有任何的数组他拼接 那他就是重新复制一份啊 给这个 ar3

18:02.060 --> 18:03.260
那我们这边我们打印一下

18:04.140 --> 18:04.860
ar3

18:05.500 --> 18:09.900
好 刷新 是不是出来了 出来了 然后接下来我们这边的话

18:10.140 --> 18:15.580
把这个ar3的这个地零下

18:16.460 --> 18:17.580
修改成1000

18:19.260 --> 18:20.780
好 然后接下来这边刷新

18:21.660 --> 18:27.900
哎 是不是看上去没问题 对不对 我不仅对你的这个数组进行复制啊 大家看上去也没有影响

18:28.380 --> 18:31.660
但是呢 他也是一个前复制啊

18:32.300 --> 18:33.180
这边写一下

18:36.500 --> 18:37.220
但是

18:38.340 --> 18:40.740
这两个方法

18:41.460 --> 18:42.180
也是

18:42.740 --> 18:44.020
就是前考备

18:44.660 --> 18:49.220
那怎么证明呢 是不是 仍然加一个那个引用类型 是不是就知道了

18:49.860 --> 18:51.620
对不对 我把这个复制一份

18:53.380 --> 18:55.460
把这个复制一份 把它注射掉

18:56.180 --> 19:01.940
好 然后接下来我们这边做一件什么事情呢 我们这边的话 我们给他加一个引用类型

19:02.980 --> 19:04.420
比如说加个什么呢 加一个对象

19:04.980 --> 19:06.660
啊 加一个对象 然后加内幕

19:07.700 --> 19:08.820
啊 细节

19:09.700 --> 19:16.340
ok 好 大家这边啊啊 然后这里的话是0123 那接下来我们这边给这个3

19:17.700 --> 19:19.700
3 然后点内幕

19:20.500 --> 19:20.900
复制

19:21.460 --> 19:22.260
复成张三

19:25.830 --> 19:27.990
复成张三 好 然后加这边刷新

19:30.140 --> 19:33.900
好 张开看一下 你会发现是所有的都变成

19:34.780 --> 19:35.340
张三了

19:36.140 --> 19:38.780
看到没有 好 然后比如说我这边的话

19:39.500 --> 19:40.940
然后这里点

19:41.900 --> 19:45.260
内幕啊 比我们再来一个嘛 再来个属性

19:45.820 --> 19:46.380
比较 edge

19:47.660 --> 19:48.060
18

19:48.620 --> 19:51.900
好 然后接下来这边的话也是第三个元素

19:52.460 --> 19:53.580
点 edge

19:54.380 --> 19:56.140
啊 改成这个28

19:56.940 --> 19:59.340
好 然后接下来的话这边刷新

20:01.100 --> 20:03.260
你看 是不是所有的数组

20:04.140 --> 20:05.820
是不是都变成了28

20:06.540 --> 20:10.540
对不对 说明什么呀 说明他这边在拷贝数组的时候也是

20:10.700 --> 20:13.900
如果你这个是一个引用类型 也就是说是一个对象

20:14.380 --> 20:18.780
它也是拷贝的是什么 是不是拷贝的是这个对象的什么

20:19.260 --> 20:20.380
是不是地址呀

20:21.100 --> 20:26.300
对不对 拷贝的是这个对象的地址啊 所以说这边的话说明他们也是什么

20:26.540 --> 20:28.140
是不是也是钱拷贝

20:29.260 --> 20:29.660
对不对

20:30.300 --> 20:30.620
ok

20:31.740 --> 20:34.300
啊 这是第四个啊 第五个

20:36.650 --> 20:37.130
第五个

20:38.250 --> 20:40.970
第五个是什么 第五个就是这个jiquery

20:42.170 --> 20:47.930
jiquery中有一个叫做这个downer

20:48.570 --> 20:49.850
点 extend

20:52.120 --> 20:52.760
extend

20:54.040 --> 20:54.600
的方法

20:56.950 --> 20:58.470
可以实现

20:59.270 --> 21:01.030
生钱拷贝 注意哦 他

21:01.430 --> 21:03.990
既可以就是钱拷贝 也可以生拷贝

21:04.390 --> 21:06.470
啊 所以他可以实现生钱拷贝

21:06.790 --> 21:08.230
那比如说我们这边我们举个例子

21:09.270 --> 21:10.870
我们首先引入这个jiquery

21:11.030 --> 21:12.070
我们找个jiquery

21:12.550 --> 21:14.310
这边的话 boot cdn

21:16.180 --> 21:16.980
那来到这边

21:18.340 --> 21:19.540
啊 找到jiquery

21:20.900 --> 21:21.300
然后

21:22.660 --> 21:23.300
引入一个

21:24.820 --> 21:26.340
啊 来到这边最上面

21:26.820 --> 21:28.340
啊 把jiquery引入

21:28.580 --> 21:30.820
好 引入之后 然后接下来我们这边

21:31.780 --> 21:34.020
我们还是写个对象吧 我们就找一个那个

21:35.060 --> 21:37.300
找一个这种啊 既有简单类型

21:38.340 --> 21:39.460
又复杂类型的

21:40.660 --> 21:42.900
就里面既有简单值 也有引用值的

21:43.700 --> 21:44.020
好

21:44.420 --> 21:45.140
然后这边

21:45.380 --> 21:48.980
然后我用这个jiquery来进行一个这个拷贝

21:49.060 --> 21:50.900
那这里的话就是直接调什么呢

21:50.900 --> 21:51.300
downer

21:53.590 --> 21:55.990
downer点这个extend

21:56.470 --> 21:57.270
调这个方法

21:57.670 --> 21:59.670
好 调这个方法 然后首先传入

21:59.670 --> 22:01.430
传入就是我们传入一个

22:01.750 --> 22:02.550
比较空对象

22:03.110 --> 22:06.230
啊 然后既要传入什么 传入你要拷贝的这个对象

22:06.230 --> 22:08.390
我们要拷贝的对象是不是就是stu

22:09.510 --> 22:09.910
对不对

22:10.230 --> 22:11.910
好 我这边的话最好这个样子

22:12.630 --> 22:13.750
哇 一个这个

22:14.630 --> 22:15.030
chrome

22:15.670 --> 22:16.790
chromeobj

22:17.510 --> 22:19.110
等于一个空对象

22:19.430 --> 22:20.870
啊 然后一会我们好打印这个

22:23.140 --> 22:23.460
这样子

22:24.020 --> 22:25.700
好 然后既让我们这边log一下

22:26.500 --> 22:27.940
log一下obj

22:28.340 --> 22:29.940
以及这个chromeobj

22:32.740 --> 22:33.380
好 这边

22:35.530 --> 22:36.010
小心

22:37.210 --> 22:38.730
obj is not defend

22:39.930 --> 22:41.530
哦 这边是stu 是吧

22:44.060 --> 22:45.020
好 这边 刷新

22:45.660 --> 22:47.660
出来了 对不对 拷贝成功没有

22:48.620 --> 22:50.300
成功了 是吧 成功了

22:50.380 --> 22:53.500
好 成功了的话 它这边的话其实还接收什么呢

22:53.740 --> 22:56.300
还接收就是第三个参数

22:56.940 --> 22:59.580
就是你这边的话可以给它传这个第三个参数

22:59.580 --> 23:02.060
第三个参数如果你传的是这个chue

23:02.940 --> 23:04.860
它就是什么 哦 第一个参数 sorry

23:04.860 --> 23:05.740
啊 第一个参数

23:06.140 --> 23:06.860
就这边的话

23:07.500 --> 23:10.060
第一个参数 它是接收三个参数

23:10.060 --> 23:10.940
该方法

23:12.220 --> 23:12.700
接收

23:13.420 --> 23:14.140
三个参数

23:16.540 --> 23:17.260
三个参数

23:17.820 --> 23:18.940
然后第一个

23:19.500 --> 23:20.220
第一个就是

23:21.020 --> 23:21.820
是一个布尔滋

23:22.700 --> 23:23.420
布尔滋

23:23.820 --> 23:24.700
然后chue

23:25.740 --> 23:27.500
代表生拷贝

23:28.300 --> 23:29.180
然后force

23:30.380 --> 23:30.860
代表

23:31.500 --> 23:32.060
前拷贝

23:33.340 --> 23:34.140
前拷贝

23:34.300 --> 23:35.500
好 那如果不传

23:36.460 --> 23:38.220
不传 默认就是

23:39.020 --> 23:39.580
前拷贝

23:40.300 --> 23:41.420
啊 然后第二个

23:42.460 --> 23:44.460
第二个就是什么呢 目标对象

23:45.980 --> 23:47.180
就是你要拷贝 是吧

23:47.180 --> 23:48.460
你要拷贝到哪个对象上面

23:48.460 --> 23:49.820
我们称之为目标对象

23:49.820 --> 23:50.780
好 大家第三个

23:51.260 --> 23:52.700
第三个就是背拷贝的

23:53.740 --> 23:55.180
背拷贝的对象

23:55.180 --> 23:57.660
那我们这边背拷贝的是不是就是这个stu

23:58.300 --> 23:58.780
对不对

23:58.780 --> 23:59.660
啊 所以我们这边呢

23:59.660 --> 24:01.500
我们第一个参数其实是省略了的

24:02.060 --> 24:02.780
可不可以啊

24:02.780 --> 24:03.820
其实是省略的

24:03.820 --> 24:05.500
然后怎么证明它是前拷贝呢

24:05.500 --> 24:06.540
那简单的很嘛

24:06.540 --> 24:07.980
那就是按照刚才的

24:07.980 --> 24:13.180
是不是直接chrome obj.stu info

24:14.060 --> 24:14.940
点这个lumber

24:15.500 --> 24:16.700
改设置成个100

24:17.180 --> 24:17.580
对吧

24:17.580 --> 24:19.260
然后我们拿到前面来

24:20.140 --> 24:21.180
前面来设置

24:21.180 --> 24:22.540
设置完了之后再打印

24:23.180 --> 24:24.060
如果两个一样

24:24.060 --> 24:25.100
说明是不是就是前拷贝

24:26.620 --> 24:27.180
是不是100

24:27.740 --> 24:28.060
100

24:28.860 --> 24:29.180
对不对

24:29.900 --> 24:30.940
说明就是什么

24:30.940 --> 24:31.660
是前拷贝

24:32.460 --> 24:32.780
啊

24:33.500 --> 24:35.660
这里的话就是给大家总结的

24:35.660 --> 24:38.620
所有的这个前拷贝的这个方法

24:38.620 --> 24:40.060
大致就这么多

24:40.060 --> 24:42.380
一二三四五一共五个

24:42.380 --> 24:43.820
你在面试的时候能把这个

24:44.380 --> 24:46.060
尽量就是能多打一点

24:46.060 --> 24:47.020
就多打一点

24:47.980 --> 24:50.540
这是前拷贝

24:50.540 --> 24:51.100
好

24:51.100 --> 24:52.460
那接下来我们来看这个升拷贝

24:52.940 --> 24:57.660
接下来来看升拷贝

24:58.220 --> 24:59.180
那升拷贝的话

24:59.180 --> 24:59.820
刚才已经说了

24:59.820 --> 25:00.620
什么叫做升拷贝

25:01.100 --> 25:01.980
升拷贝的话

25:01.980 --> 25:03.260
是不是它会重新

25:03.740 --> 25:05.180
创建一个内存地址

25:05.740 --> 25:06.220
对不对

25:06.220 --> 25:07.500
就是新拷贝的对象

25:07.500 --> 25:09.980
不会去影响这个旧的对象

25:10.620 --> 25:12.140
我们来看有哪些方式呢

25:12.140 --> 25:13.420
这边总结起来

25:13.420 --> 25:14.620
大致有这些方式

25:14.620 --> 25:16.060
首先就是使用这个

25:16.060 --> 25:16.940
json.parse

25:16.940 --> 25:18.860
json.streamify

25:19.580 --> 25:21.100
使用这种方式

25:21.100 --> 25:23.100
这种方式我们这边我们来看一下

25:23.100 --> 25:24.300
比如说

25:25.580 --> 25:26.780
我们拿个这个

25:26.780 --> 25:27.820
就它嘛

25:27.820 --> 25:28.620
是吧

25:28.620 --> 25:31.380
这边

25:31.380 --> 25:32.500
第一种

25:32.500 --> 25:34.340
第一种的话是这个

25:34.340 --> 25:36.980
json.parse

25:36.980 --> 25:41.140
然后json.stream

25:41.140 --> 25:44.020
然后ify

25:44.020 --> 25:44.980
这种方式

25:44.980 --> 25:45.940
好

25:45.940 --> 25:47.940
首先你还是要知道

25:47.940 --> 25:49.140
这两个方法是干嘛的

25:51.240 --> 25:52.520
这个json.stream

25:52.520 --> 25:54.520
是不是把一个对象转成制服串

25:54.520 --> 25:55.640
转成制服串之后

25:55.640 --> 25:56.520
然后接下来的话

25:56.520 --> 25:57.640
我这边又把它干嘛呀

25:57.640 --> 25:58.840
是不是转回来

25:58.840 --> 25:59.640
看到没有

25:59.640 --> 26:00.440
好那接下我们这边

26:00.440 --> 26:01.480
我们来揣一揣

26:01.480 --> 26:03.320
这边挖一个这个

26:03.320 --> 26:07.720
比如说stur等于一个json.parse

26:07.720 --> 26:09.080
好然后接下这边

26:09.080 --> 26:11.480
json.streamify

26:11.480 --> 26:12.920
要把什么传进去

26:12.920 --> 26:14.600
是把stu传进去

26:14.600 --> 26:15.640
对吧

26:15.640 --> 26:17.080
好那接下这边

26:17.080 --> 26:18.200
no go

26:18.600 --> 26:19.160
对吧

26:19.160 --> 26:20.200
好那接下这边

26:20.200 --> 26:21.160
no go一下

26:21.160 --> 26:22.040
看好不好死啊

26:22.040 --> 26:23.080
stur

26:23.080 --> 26:23.800
stur

26:23.800 --> 26:25.000
go swat一下

26:25.000 --> 26:25.320
好

26:25.320 --> 26:26.360
然后接下这边

26:26.360 --> 26:26.680
刷新

26:27.880 --> 26:29.400
这不考备成功了

26:29.400 --> 26:30.360
考备成功了

26:30.360 --> 26:31.320
然后接下来的话

26:31.320 --> 26:33.800
我们这边

26:33.800 --> 26:34.600
这边我们干嘛呢

26:34.600 --> 26:35.720
我们来改一下

26:35.720 --> 26:40.760
stu.stu infer.number

26:40.760 --> 26:41.960
等于一个100

26:43.160 --> 26:44.040
一千嘛

26:44.040 --> 26:44.840
都可以

26:44.840 --> 26:45.800
好改一下

26:45.800 --> 26:46.280
好刷新

26:47.240 --> 26:47.800
好这边

26:48.520 --> 26:49.800
这边是变成一千了

26:49.800 --> 26:50.760
但是我们这边

26:51.400 --> 26:52.280
是没有任何变化

26:53.000 --> 26:53.640
对不对

26:53.640 --> 26:54.440
没有任何变化

26:54.440 --> 26:55.640
那说明这两个

26:55.640 --> 26:56.840
就是stu infer

26:56.840 --> 26:57.560
这两个

26:57.560 --> 26:58.920
它是不是这个

26:59.960 --> 27:00.600
同一个地址

27:01.400 --> 27:02.600
这很明显不是啊

27:03.160 --> 27:03.720
对不对

27:03.720 --> 27:04.440
那你这边的话

27:04.440 --> 27:05.800
就实现了一个什么呢

27:05.800 --> 27:06.840
实现了一个

27:06.840 --> 27:07.480
生考备

27:08.520 --> 27:09.160
这种方式

27:09.160 --> 27:10.040
看上去是不是

27:10.040 --> 27:10.760
很好用

27:10.760 --> 27:11.720
也很简单

27:11.720 --> 27:12.440
但是呢

27:12.440 --> 27:13.640
这种方式有缺陷

27:16.200 --> 27:16.840
但是

27:17.400 --> 27:20.040
这种方式有缺陷

27:20.680 --> 27:21.800
什么缺陷呢

27:21.800 --> 27:24.360
就这个json.parse

27:25.400 --> 27:27.720
本来就本意上

27:28.920 --> 27:32.520
本意上是用来处理

27:34.870 --> 27:35.830
处理什么呢

27:35.830 --> 27:37.030
json数据的

27:38.070 --> 27:39.110
那它本来是用来

27:39.110 --> 27:40.470
处理json数据的

27:40.470 --> 27:42.710
json数据

27:43.350 --> 27:44.790
是不允许

27:45.910 --> 27:47.270
有这个函数的

27:47.990 --> 27:48.310
对不对

27:48.310 --> 27:50.310
因为json它是一段数据

27:50.870 --> 27:51.830
它是一段数据

27:51.830 --> 27:53.830
数据是不允许有这个函数的

27:53.830 --> 27:55.910
那比如说我这边稍微改一下

27:55.910 --> 27:57.110
把这复制一下

27:57.110 --> 27:57.990
把这注射掉

27:59.110 --> 27:59.990
好 这边

27:59.990 --> 28:00.950
我稍微改一下

28:00.950 --> 28:02.550
比如说我这边有一个方法

28:03.190 --> 28:04.470
就叫做say hello

28:06.890 --> 28:08.090
好 这边的话log一下

28:08.890 --> 28:09.610
log

28:09.610 --> 28:10.250
要Hello

28:10.890 --> 28:11.130
OK

28:11.690 --> 28:12.730
好 那接下来我们这边

28:12.730 --> 28:13.450
我们来刷新一下

28:14.010 --> 28:14.410
刷新

28:15.130 --> 28:15.930
你会发现什么

28:16.490 --> 28:18.730
你新考备的对象什么丢了

28:19.370 --> 28:21.370
是不是这个say hello这个方法丢了

28:22.090 --> 28:22.570
对不对

28:22.570 --> 28:23.610
你看这个是救的对象

28:23.610 --> 28:25.610
救的对象这边有这个say hello这个方法

28:26.410 --> 28:28.490
但是你通过这个json part

28:28.490 --> 28:29.130
这种方式

28:29.690 --> 28:30.810
去考备的话

28:30.810 --> 28:31.370
你的这个

28:32.170 --> 28:33.530
方法是不是全部丢完了

28:34.090 --> 28:34.730
对不对

28:34.730 --> 28:35.210
就没了

28:35.850 --> 28:38.490
所以这个的话是这种方式的这个缺陷

28:39.770 --> 28:39.930
好

28:39.930 --> 28:41.130
这个一定要知道

28:41.130 --> 28:41.850
这个一定要知道

28:42.570 --> 28:42.970
好

28:42.970 --> 28:45.050
然后接下来我们第二种方式

28:45.050 --> 28:46.250
我这笔记也写的有

28:46.810 --> 28:47.210
第二种

28:47.290 --> 28:48.890
第二种就是使用这个jquery

28:49.690 --> 28:50.490
使用jquery

28:50.490 --> 28:51.530
我们这边我们来试一下

28:51.530 --> 28:52.810
jquery刚才是不是已经说过了

28:53.770 --> 28:54.410
对不对

28:54.410 --> 28:55.770
好 那这样我们这边我们来看一下

28:57.980 --> 28:59.180
这边第二种

28:59.740 --> 29:09.180
使用这个jquery中的这个downer extend来考备

29:09.980 --> 29:12.620
那就是刚才是不是没有传那个第一个参数

29:13.100 --> 29:14.940
你把第一个参数传一下就可以了

29:14.940 --> 29:16.780
我把刚才那个代码拿过来

29:18.860 --> 29:19.740
就这个是吧

29:19.740 --> 29:20.620
就这个代码

29:20.620 --> 29:21.420
好吧 拿过来

29:22.300 --> 29:23.500
拿过来放到这里

29:24.220 --> 29:25.180
把注射打开

29:26.940 --> 29:27.500
注射打开

29:27.500 --> 29:28.540
我们还是加个方法吧

29:29.900 --> 29:31.340
把这个放到这

29:31.340 --> 29:32.380
然后还是加个方法

29:33.740 --> 29:34.860
加个这个方法

29:34.860 --> 29:36.220
然后放到这里

29:39.700 --> 29:40.740
放到这里

29:40.740 --> 29:41.940
好 格式画一下

29:41.940 --> 29:42.820
格式画一下之后

29:42.820 --> 29:44.180
然后接下来这边的话

29:44.180 --> 29:45.540
传入第一个参数

29:45.540 --> 29:46.980
第一个参数是q

29:46.980 --> 29:48.340
代表我是要生考备

29:49.380 --> 29:49.700
好

29:49.700 --> 29:50.340
然后下这边

29:50.500 --> 29:51.060
刷新一下

29:52.580 --> 29:54.340
诶 实现方法是不是没丢

29:54.340 --> 29:54.740
对吧

29:54.740 --> 29:55.940
这个这点很好

29:55.940 --> 29:56.260
好

29:56.260 --> 29:57.780
然后接下来这边这个是1

29:58.660 --> 29:59.780
这个是100

30:00.420 --> 30:00.900
看到没有

30:01.460 --> 30:03.060
是不是实现了一个生考备

30:04.180 --> 30:05.540
这里就实现了一个生考备

30:06.100 --> 30:08.180
所以说如果你是用这个jquery的话

30:08.180 --> 30:10.820
那你就可以使用这个downer.extend

30:11.540 --> 30:14.580
这个方法可以快速的实现生前考备

30:15.220 --> 30:16.660
但这个时候有的同学会说

30:16.660 --> 30:17.220
就是我

30:17.860 --> 30:19.780
比如说我使用的原生js

30:20.500 --> 30:21.540
我原生js

30:21.540 --> 30:23.140
我这边我不会用到jquery

30:23.780 --> 30:25.300
那我这边要生考备

30:25.300 --> 30:26.100
怎么办

30:26.100 --> 30:28.260
你刚才说的那个json.parse

30:28.820 --> 30:29.940
它又有缺陷

30:29.940 --> 30:30.500
是吧

30:30.500 --> 30:31.860
方法它考备不到

30:31.860 --> 30:32.900
那怎么办呢

30:32.900 --> 30:35.060
那如果是原生js

30:35.060 --> 30:37.700
那你就只有老老实实写的规了

30:38.660 --> 30:39.620
啊 这边第三个

30:41.140 --> 30:42.100
第三个

30:42.100 --> 30:48.180
如果是使用原生js

30:48.740 --> 30:49.380
啊

30:49.460 --> 30:50.980
不用这个jquery

30:50.980 --> 30:53.300
那么要实现

30:53.940 --> 30:57.220
这个对象的生考备

30:58.420 --> 31:02.500
就只有老老实实的写

31:03.940 --> 31:04.580
这个的规

31:05.620 --> 31:07.380
啊就只有老老实实写的规了

31:07.380 --> 31:09.540
那前提是就是你要把这个

31:10.980 --> 31:12.180
把这个支持点

31:12.180 --> 31:12.580
的规

31:13.700 --> 31:16.420
要就是这关要过了

31:16.420 --> 31:16.740
是吧

31:16.740 --> 31:17.940
你这会儿你告诉我

31:17.940 --> 31:18.980
我都不知道什么叫的规

31:19.380 --> 31:20.980
那你先去把低规搞懂

31:20.980 --> 31:21.380
搞懂了

31:21.380 --> 31:22.820
然后接下来再接着来看

31:23.940 --> 31:24.180
好

31:24.180 --> 31:25.700
那我这边让我带着大家来写一下

31:26.900 --> 31:27.060
好

31:27.060 --> 31:28.180
我们这边的假设

31:28.980 --> 31:30.580
有这么一个函数

31:30.580 --> 31:31.780
就它嘛

31:31.780 --> 31:32.340
就它

31:32.340 --> 31:32.900
c

31:34.660 --> 31:35.620
然后拿过来

31:38.420 --> 31:38.980
然后接下来

31:38.980 --> 31:40.020
我们这边要考备

31:40.580 --> 31:41.380
要考备的话

31:41.380 --> 31:41.700
然后

31:42.500 --> 31:42.820
这里

31:44.260 --> 31:45.220
这里的话

31:45.220 --> 31:45.540
我们

31:46.260 --> 31:47.780
就是它会返回一个

31:47.780 --> 31:48.820
比如说挖一个

31:49.380 --> 31:50.900
stur

31:50.900 --> 31:51.620
等于

31:51.620 --> 31:52.660
比如说我们写一个

31:52.660 --> 31:53.140
叫做

31:53.860 --> 31:54.660
deepo

31:54.660 --> 31:55.060
coron

31:56.420 --> 31:57.540
啊大家传入什么呢

31:57.540 --> 31:59.060
传入你要考备的对象

31:59.060 --> 32:00.260
那回头这个函数

32:00.900 --> 32:02.820
它就会给我返回一个什么呢

32:02.820 --> 32:04.660
返回一个考备的这个对象

32:05.380 --> 32:06.740
啊那接下来我们就要开始

32:06.740 --> 32:07.380
书写什么

32:07.380 --> 32:07.940
是不是书写

32:08.420 --> 32:09.300
这个的实现啊

32:09.940 --> 32:10.260
对不对

32:10.260 --> 32:12.020
好那接下来这边来写呗

32:13.140 --> 32:14.500
那这里的话首先

32:14.500 --> 32:14.980
function

32:16.500 --> 32:17.060
deepo

32:18.020 --> 32:18.900
coron

32:19.860 --> 32:21.060
啊接受一个什么呢

32:21.060 --> 32:22.500
是不是接受一个这个参数啊

32:23.140 --> 32:23.780
对不对

32:23.780 --> 32:24.340
target

32:26.630 --> 32:27.110
target

32:32.730 --> 32:34.010
啊再删一下

32:35.850 --> 32:36.490
啊这里

32:39.100 --> 32:39.660
啊target

32:40.620 --> 32:41.740
target就是什么呢

32:41.740 --> 32:43.660
target就是要克龙的

32:45.020 --> 32:47.420
要克龙的对象

32:48.220 --> 32:49.020
ok

32:49.020 --> 32:49.980
好那接下来的话

32:49.980 --> 32:50.940
我这边首先

32:51.500 --> 32:53.980
我先挖一个result

32:54.940 --> 32:56.060
啊result

32:56.060 --> 32:57.020
这个的话是什么呢

32:57.020 --> 32:57.820
这个的话是

32:58.380 --> 33:00.780
呃最终克龙的对象

33:03.450 --> 33:05.210
克龙的新的对象

33:06.010 --> 33:08.170
那也就说最终的话要干嘛呀

33:08.170 --> 33:10.090
最终是不是要把这个对象返回的

33:10.890 --> 33:11.290
对不对

33:11.290 --> 33:12.730
你要返回给外部

33:12.730 --> 33:14.170
我们这边啊return

33:15.130 --> 33:15.690
result

33:16.570 --> 33:16.890
ok

33:17.450 --> 33:19.210
好那接下来我们这边就要做

33:19.850 --> 33:21.690
就是一步一步的判断了

33:21.690 --> 33:22.010
if

33:23.850 --> 33:24.490
type off

33:25.210 --> 33:26.730
这个target

33:26.730 --> 33:28.730
因为target是要克龙的嘛

33:28.730 --> 33:32.010
如果它全等于一个这个object

33:34.010 --> 33:36.090
如果它等于object的话

33:36.090 --> 33:38.490
那我们这边是不是要做一些处理

33:38.490 --> 33:38.890
对不对

33:38.890 --> 33:40.170
那否则的话 else

33:41.050 --> 33:41.770
else

33:41.770 --> 33:43.770
else说明你这边的话type off

33:43.770 --> 33:45.770
这个它不是这个object

33:45.770 --> 33:46.730
那它就是普通的

33:46.730 --> 33:48.330
比如是number呀

33:48.330 --> 33:49.690
或者 booling啊

33:49.690 --> 33:50.490
对不对

33:50.490 --> 33:51.050
啊进入

33:51.770 --> 33:53.850
进入尺分支

33:53.850 --> 33:54.890
说明

33:56.170 --> 33:58.730
当前的这个target

33:58.730 --> 34:00.010
是

34:00.010 --> 34:02.570
呃是什么呢

34:02.570 --> 34:03.850
是诸如

34:03.850 --> 34:05.130
number呀

34:05.130 --> 34:06.410
然后

34:06.410 --> 34:07.690
booling

34:07.690 --> 34:08.970
对吧

34:08.970 --> 34:10.250
然后还有啥

34:10.250 --> 34:12.810
还有这个比如sdream

34:12.810 --> 34:15.370
之类的这个类型

34:15.370 --> 34:16.650
ok

34:16.650 --> 34:19.210
那这些的话是简单数据类型

34:19.210 --> 34:20.490
简单数据类型

34:20.490 --> 34:22.410
那简单数据类型的话我们这边干嘛

34:22.410 --> 34:24.330
我们是不是直接result

34:24.330 --> 34:26.890
等于一个这个

34:26.890 --> 34:28.170
target

34:28.170 --> 34:30.730
也就是把这个target负责给这个result

34:30.730 --> 34:32.010
是不是就完事了

34:32.010 --> 34:34.570
好了接下来如果进ef

34:34.570 --> 34:37.130
进ef的话这边就需要各种判断了

34:37.130 --> 34:39.690
如果

34:39.690 --> 34:42.250
进入到ef

34:42.250 --> 34:44.810
那么就需要

34:44.810 --> 34:47.370
各种判断

34:48.090 --> 34:53.240
啊需要各种判断那首先我这边ef

34:53.240 --> 34:54.040
我判断什么呢

34:54.040 --> 34:55.800
判认他是否是数组

34:55.800 --> 34:56.920
这边ore

34:56.920 --> 34:57.960
他有一个方法

34:57.960 --> 35:00.120
叫做easyore

35:00.120 --> 35:03.160
啊然后再把这个target

35:03.160 --> 35:04.280
传进去

35:04.280 --> 35:05.960
传进去的话然后再

35:05.960 --> 35:09.160
如果进入ef那说明你这边的话现在的这个值是一个什么

35:09.160 --> 35:10.440
是不是个数组啊

35:10.440 --> 35:14.680
是个数组那接下来的话我这边这个result

35:14.680 --> 35:17.880
啊我声明成一个什么呀是不是新的数组

35:18.040 --> 35:22.120
新的数组然后接下来我去便利你的这个target

35:22.120 --> 35:23.720
挖一个i

35:23.720 --> 35:27.880
然后硬这个target

35:27.880 --> 35:29.000
去便利他的每一项

35:29.000 --> 35:31.960
然后接下来把每一项推入到哪里去

35:31.960 --> 35:34.680
是不是推入到

35:34.680 --> 35:36.280
我的这个result

35:36.280 --> 35:37.640
里面

35:37.640 --> 35:38.360
对不对

35:38.360 --> 35:40.200
推入到这个result里面

35:40.200 --> 35:42.600
好然后这里的话

35:42.600 --> 35:45.240
你注意一下这里有个处理

35:45.240 --> 35:48.840
这里的话是直接写这个target

35:48.840 --> 35:50.600
i吗

35:50.600 --> 35:52.280
直接写targeti吗

35:52.280 --> 35:55.720
啊你考虑一个场景那假设比如说我要克隆的对象

35:55.720 --> 35:58.280
是这个样子的呢

35:58.280 --> 36:00.120
跟我这个是个数组是吧本身是个数组

36:00.120 --> 36:02.920
然后里面是一个一个的对象

36:02.920 --> 36:04.680
你怎么搞

36:04.680 --> 36:09.560
对不对那对象的话你这样子直接推入有进去那是不是他还是前拷贝

36:09.560 --> 36:11.720
对不对他还是前拷贝拷贝的是一个地址

36:11.720 --> 36:14.360
所以接下来这边就需要第一规调用

36:14.440 --> 36:17.320
再来什么呢调用这个d不coron

36:17.320 --> 36:19.560
然后把这个传进去

36:19.560 --> 36:21.640
把数组的每一项传进去

36:21.640 --> 36:24.600
所以这边就形成了一个地规

36:24.600 --> 36:28.680
看到没有说你前提是你的地规一定就这里这个逻辑

36:28.680 --> 36:31.320
啊你要搞得清楚

36:31.320 --> 36:34.200
好然后这个是判断如果是数组

36:34.200 --> 36:37.750
然后lcf

36:37.750 --> 36:41.190
lcflcf什么呢你的这个target

36:41.190 --> 36:43.670
如果是全等于这个空

36:43.670 --> 36:49.030
因为空的话他太破不是不是也是那个也是那个那个object

36:49.030 --> 36:53.110
对不对啊那这个的话很简单这个就直接result等于一个

36:53.110 --> 36:57.510
这个空好然后加这边lcf

36:58.790 --> 37:04.360
你的这个target点这个constructor

37:04.360 --> 37:08.040
constructor就它的构造器如果是一个什么呢

37:08.040 --> 37:11.480
如果是一个这个reg exp

37:11.480 --> 37:13.880
如果是一个这个政则

37:13.880 --> 37:17.720
那政则的话这边也是什么呢也是直接负责

37:17.720 --> 37:22.840
等于一个target啊包括什么呢包括这是那个date

37:22.840 --> 37:24.120
或者

37:24.120 --> 37:28.060
等于一个date

37:28.060 --> 37:32.120
等于date

37:32.120 --> 37:35.960
那他就是干嘛呢他就是直接负责啊

37:35.960 --> 37:37.240
然后否则

37:37.240 --> 37:38.520
g else

37:38.520 --> 37:39.800
g else

37:39.800 --> 37:42.360
好否则了说明什么呀

37:42.360 --> 37:44.950
说明是个对象

37:44.950 --> 37:47.510
进入此分支

37:47.670 --> 37:51.030
说明是一个对象

37:51.030 --> 37:56.230
那是一个对象我就需要干嘛呀我是不是这个result我就需要让它是一个什么

37:56.230 --> 37:57.750
是个对象

37:57.750 --> 38:07.320
是个对象之后然后接下来话去便利每一项啊其实就和这儿的逻辑是一样的了

38:07.320 --> 38:09.880
啊去便利你的这个target

38:09.880 --> 38:12.680
就是每个属性好然后接下来这边什么呢

38:12.680 --> 38:18.600
呃这边就不是铺鞋了啊因为只有数组才铺鞋那这边呢就是这个result

38:18.600 --> 38:20.280
这个i

38:20.440 --> 38:22.440
然后等于一个

38:22.440 --> 38:24.440
这个deep chrome

38:24.440 --> 38:26.440
然后target

38:26.440 --> 38:28.440
i

38:28.440 --> 38:29.240
看到没有

38:29.240 --> 38:30.440
就是通过这种

38:30.440 --> 38:32.040
地规的形式

38:32.040 --> 38:34.600
啊来进行一个这个升考备

38:34.600 --> 38:35.960
啊这个就写完了

38:35.960 --> 38:37.960
你下来的话你自己把它看一下

38:37.960 --> 38:39.480
其实就分为这么几步

38:39.480 --> 38:41.800
首先判断它是否是数组

38:41.800 --> 38:43.080
你要单独判断

38:43.080 --> 38:46.600
对不对然后判断它是否是这个nau因为nau也是object

38:46.600 --> 38:49.960
啊是不是这个政则或者这个date

38:50.040 --> 38:52.280
啊然后接下来这边这边的话是

38:52.280 --> 38:57.880
那进入l是说明是一个这个对象那对象的话我就去便利它的每一个这个属性

38:57.880 --> 38:59.720
对吧把它的这个

38:59.720 --> 39:02.760
可迭代的属性拿出来拿出来之后挨着挨着

39:02.760 --> 39:04.280
deep chrome

39:04.280 --> 39:06.600
对不对啊

39:06.600 --> 39:08.680
好这边我们来测试一下嘛

39:08.680 --> 39:10.120
这边便利了

39:10.120 --> 39:13.000
边啊不是这边这个克龙了

39:13.000 --> 39:16.840
克龙了之后然后接下来我们这边来试一下呗

39:17.000 --> 39:18.200
克龙之后

39:18.200 --> 39:21.560
然后stur点stur info

39:22.840 --> 39:24.120
点这个lumber

39:24.120 --> 39:26.200
等于一个比如说

39:27.160 --> 39:28.040
1000

39:28.040 --> 39:32.120
好然后加这边log一下stur

39:32.120 --> 39:34.520
好然后加这边刷新

39:34.520 --> 39:37.320
哎首先克龙是不是已经成功了

39:37.320 --> 39:38.360
对不对

39:38.360 --> 39:40.680
好然后加这边这个是1

39:40.680 --> 39:42.440
这个是1000

39:42.440 --> 39:43.720
看到没有

39:43.720 --> 39:45.000
是不是就搞定了

39:45.800 --> 39:50.120
啊这里就搞定了啊你这边的你那个数组也可以测试

39:50.120 --> 39:51.400
比如说

39:51.400 --> 39:53.960
再来个测试

39:53.960 --> 39:56.520
比如说我们拿到那个数组

39:56.520 --> 40:00.360
我们前面讲前考背的时候

40:00.360 --> 40:02.280
啊这里

40:02.280 --> 40:04.200
这里这个数组啊

40:04.200 --> 40:05.480
好

40:05.480 --> 40:08.710
复制一半

40:08.710 --> 40:12.460
好拿到我们这边下面

40:12.460 --> 40:14.620
好然后接下来这个ar2

40:14.620 --> 40:18.220
AR2是不是就是应该是等于一个这个deep chrome

40:18.300 --> 40:22.340
然后AR

40:22.340 --> 40:24.980
对吧好然后加这边log一下

40:24.980 --> 40:28.020
log这个AR啊以及AR2

40:28.020 --> 40:29.860
好这边的话刷新

40:29.860 --> 40:32.020
啊是不是首先这个克龙是成功的

40:32.020 --> 40:34.660
成功之后然后接下来我们这边我们修改一个

40:34.660 --> 40:37.700
比如说AR2

40:37.700 --> 40:39.380
AR2

40:39.380 --> 40:41.140
然后第几个

40:41.140 --> 40:44.820
第0123是吧第三个

40:44.820 --> 40:47.700
点name等于一个

40:47.700 --> 40:49.540
张3

40:49.620 --> 40:51.220
格式换一下

40:51.220 --> 40:55.140
好然后接下来这边的话刷新

40:55.140 --> 40:56.420
谢谢

40:56.420 --> 40:57.460
张3

40:57.460 --> 40:58.740
是不是OK的

40:58.740 --> 40:59.620
对不对

40:59.620 --> 41:00.500
OK的

41:00.500 --> 41:01.220
啊

41:01.220 --> 41:04.420
你回头的话你也可以直接把这个

41:04.420 --> 41:06.580
把这个函数啊

41:06.580 --> 41:09.300
就是放到你的这个函数库里面

41:09.300 --> 41:10.340
好吧

41:10.340 --> 41:14.180
好这里的话就是给他介绍一下这个关于生前

41:14.180 --> 41:15.620
考背

41:15.620 --> 41:18.820
好然后最后的话那个面试题

41:18.980 --> 41:22.340
生前考背的区别如何实现那这个是不是很简单了

41:22.340 --> 41:24.580
对不对你回答一下什么是前考背

41:24.580 --> 41:25.860
什么是生考背

41:25.860 --> 41:29.620
然后把这个前考背常见的方法有点些

41:29.620 --> 41:31.940
生考背常见的方法有点些

41:31.940 --> 41:33.700
把它总结出来

41:33.700 --> 41:34.820
就可以了

41:34.820 --> 41:35.460
啊

41:35.460 --> 41:37.460
好这节课就先到这里吧

41:37.460 --> 41:39.700
下来把这个知识点再看一看

41:39.700 --> 41:40.340
啊

41:40.340 --> 41:41.460
好再见

