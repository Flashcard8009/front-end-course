WEBVTT

00:01.140 --> 00:03.140
大家好 我是谢老师

00:03.140 --> 00:05.340
这节课的话我们来看一下就是

00:05.340 --> 00:09.140
Dorm里面关于这个事件的一个传播机制

00:09.140 --> 00:11.140
这里的话有道面试题

00:11.140 --> 00:14.140
面试题是谈一谈事件委托

00:14.140 --> 00:17.140
以及这个冒泡的原理

00:17.140 --> 00:19.140
那这里就是典型的考察的是

00:19.140 --> 00:21.140
这个事件里面的这个知识

00:21.140 --> 00:24.140
无论是这个事件委托

00:24.140 --> 00:25.140
还是这个冒泡

00:25.140 --> 00:27.140
它其实用的都是什么

00:27.140 --> 00:28.140
是不是都是冒泡

00:29.140 --> 00:32.140
你后面的这个事件委托

00:32.140 --> 00:33.140
其实它的原理也是什么

00:33.140 --> 00:35.140
这里也是冒泡

00:35.140 --> 00:37.140
所以这里的话就考察一个这个冒泡

00:37.140 --> 00:39.140
我们一点一点来看

00:40.140 --> 00:41.140
首先第一个

00:41.140 --> 00:42.140
第一个的话

00:42.140 --> 00:44.140
这里是事件与事件流

00:44.140 --> 00:46.140
这里简单介绍了一下

00:46.140 --> 00:47.140
就是这个事件

00:47.140 --> 00:49.140
什么叫做事件

00:49.140 --> 00:51.140
但事件的话其实大家都用过的

00:51.140 --> 00:54.140
我这边的话就不做过多的介绍

00:54.140 --> 00:56.140
我们简单过一下

00:56.140 --> 00:58.140
事件最早是在IE3

00:58.140 --> 01:00.140
和这个网警浏览器

01:00.140 --> 01:02.140
就是第二代网警浏览器

01:02.140 --> 01:03.140
就已经出现了

01:03.140 --> 01:05.140
为什么会出现事件呢

01:05.140 --> 01:08.140
它其实主要是用来分担服务器

01:08.140 --> 01:10.140
运算负担的

01:10.140 --> 01:11.140
什么意思

01:11.140 --> 01:13.140
就在最最早期的时候

01:13.140 --> 01:16.140
我们所有的处理都是在服务器

01:16.140 --> 01:17.140
进行处理

01:17.140 --> 01:19.140
所有的处理

01:19.140 --> 01:21.140
这个时候你的服务器

01:21.140 --> 01:23.140
它的压力就会非常非常的大

01:23.140 --> 01:25.140
所以这个时候的话

01:25.140 --> 01:28.140
这个JavaScript里面的这个事件

01:28.140 --> 01:30.140
它就可以分担一部分

01:30.140 --> 01:34.140
服务器的运算负担

01:34.140 --> 01:36.140
就有一些简单的运算

01:36.140 --> 01:37.140
你就直接在客户端

01:37.140 --> 01:39.140
你计算了就完事了

01:39.140 --> 01:41.140
你没必要又通过通信

01:41.140 --> 01:42.140
是吧

01:42.140 --> 01:43.140
来到我的服务器

01:43.140 --> 01:44.140
然后再服务器

01:44.140 --> 01:46.140
再进行运算

01:46.140 --> 01:48.140
然后再把结果给你返还回来

01:48.140 --> 01:50.140
这个没必要

01:50.140 --> 01:52.140
所以说你看这里

01:52.140 --> 01:54.140
在早期波号上网的年代

01:54.140 --> 01:56.140
所有的功能

01:56.140 --> 01:58.140
如果放在这个服务器进行处理

01:58.140 --> 02:01.140
效率是非常低的

02:01.140 --> 02:05.140
JavaScript最初被设计出来的时候

02:05.140 --> 02:07.140
就是解决这些问题

02:07.140 --> 02:08.140
其实就是起一个什么呢

02:08.140 --> 02:10.140
就用户可以和这个页面

02:10.140 --> 02:12.140
进行一个交互

02:12.140 --> 02:13.140
一个简单的交互

02:13.140 --> 02:14.140
比如我点击之后

02:14.140 --> 02:16.140
可以有个弹窗之类的

02:16.140 --> 02:18.140
然后在客户端进行一些

02:18.140 --> 02:20.140
简单的计算之类的

02:20.140 --> 02:22.140
主要是做这个事情的

02:23.140 --> 02:25.140
然后事件我就不写了

02:25.140 --> 02:27.140
事件的话大家都知道

02:27.140 --> 02:29.140
比如最简单的一个点击事件

02:29.140 --> 02:31.140
把一个button绑一个点击事件

02:31.140 --> 02:33.140
这样事件里面不用我搞一个弹窗

02:33.140 --> 02:35.140
或者干嘛

02:35.140 --> 02:37.140
然后接下来这边的话

02:37.140 --> 02:39.140
说一下关于这个事件流

02:39.140 --> 02:41.140
这个是个重点

02:41.140 --> 02:42.140
事件流

02:42.140 --> 02:43.140
我们来看一下

02:43.140 --> 02:46.140
当浏览器发展到第四代时

02:46.140 --> 02:49.140
就是IE4和这个网景4的时候

02:49.140 --> 02:51.140
浏览器开发团队遇到一个

02:51.140 --> 02:52.140
很有意思的问题

02:52.140 --> 02:53.140
就什么呢

02:53.140 --> 02:55.140
页面的哪一部分

02:55.140 --> 02:58.140
会拥有某个特定的事件

02:58.140 --> 02:59.140
这边举个例子

02:59.140 --> 03:01.140
比如说你想象在一张纸上

03:01.140 --> 03:03.140
你画一个同心圆

03:03.140 --> 03:05.140
然后把手指放在圆心

03:05.140 --> 03:07.140
那你指向的不是一个圆

03:07.140 --> 03:08.140
而是纸上的所有圆

03:08.140 --> 03:09.140
什么意思

03:09.140 --> 03:11.140
比如你看我这边是有一个

03:11.140 --> 03:12.140
同心圆

03:12.140 --> 03:13.140
同心圆

03:13.140 --> 03:15.140
然后这样我这边我点击它

03:15.140 --> 03:16.140
点击它

03:16.140 --> 03:19.140
我能说我就只点击了这个圆吗

03:19.140 --> 03:20.140
不对吧

03:20.140 --> 03:23.140
外面的这个圆是不是也是被点击了

03:23.140 --> 03:24.140
对不对

03:24.140 --> 03:25.140
在外面的这个圆

03:25.140 --> 03:27.140
是不是也是被点击了

03:27.140 --> 03:29.140
在最外层的这个圆

03:29.140 --> 03:31.140
是不是也是被点击了

03:31.140 --> 03:32.140
对不对

03:32.140 --> 03:33.140
这其实就是我们的事件流

03:33.140 --> 03:35.140
就好比比如说你墙上

03:35.140 --> 03:36.140
墙上

03:36.140 --> 03:38.140
然后接下来挂了一幅画

03:38.140 --> 03:40.140
画里面有个人

03:40.140 --> 03:42.140
然后接下来手上拿了一个东西

03:42.140 --> 03:44.140
随便拿个什么东西

03:44.140 --> 03:46.140
然后叫你去点击

03:46.140 --> 03:48.140
这个人手上拿的东西

03:48.140 --> 03:50.140
比如说我只点击了就是这个

03:50.140 --> 03:52.140
画里面的这个人拿了这个东西

03:52.140 --> 03:54.140
但是你也可以看做是什么

03:54.140 --> 03:56.140
说你点击了这幅画

03:56.140 --> 03:58.140
你又可以看做你是点击了什么

03:58.140 --> 04:00.140
是整面墙啊

04:00.140 --> 04:01.140
对不对

04:01.140 --> 04:02.140
好

04:02.140 --> 04:04.140
好在就是两家公司

04:04.140 --> 04:07.140
他们在这个看法上面是一致的

04:07.140 --> 04:09.140
大家都认为比如说我这边我点击的话

04:09.140 --> 04:10.140
比我点击这个圆心

04:10.140 --> 04:13.140
那接下来整个这个同心圆

04:13.140 --> 04:14.140
都是会被点击的

04:14.140 --> 04:17.140
就是点击事件都会被出发

04:17.140 --> 04:19.140
但是他们的实现

04:19.140 --> 04:21.140
就是两个开发团队

04:21.140 --> 04:24.140
他们的实现是刚好相反的

04:24.140 --> 04:26.140
IE使用的是什么呢

04:26.140 --> 04:29.140
IE使用的是帽炮流

04:29.140 --> 04:31.140
然后这个网景团队使用的是什么呢

04:31.140 --> 04:33.140
使用的是补货流

04:33.140 --> 04:34.140
刚好是反的

04:34.140 --> 04:36.140
那么这边我们来看一下

04:36.140 --> 04:38.140
最早的IE这个帽炮

04:38.140 --> 04:40.140
帽炮是什么意思

04:40.140 --> 04:41.140
很简单

04:41.140 --> 04:44.140
帽炮的话是由最具体的这个元素开始

04:44.140 --> 04:46.140
一直往上传播

04:46.140 --> 04:47.140
传播到什么呢

04:47.140 --> 04:51.140
传播到较为不具体的这个节点

04:51.140 --> 04:54.140
我这边的话我举了个例子

04:54.140 --> 04:55.140
我们来看一下

04:55.140 --> 04:57.140
这个很简单的一个HTML结构

04:57.140 --> 04:58.140
看到没有

04:58.140 --> 05:00.140
这边的话就是一个DIV

05:00.140 --> 05:03.140
那假设我给这个DIV

05:03.140 --> 05:05.140
绑定一个点击事件

05:05.140 --> 05:07.140
我给他绑定了一个点击事件之后

05:07.140 --> 05:09.140
这样用过点击这个DIV

05:09.140 --> 05:10.140
点击这个DIV

05:10.140 --> 05:12.140
我能说他只点击了DIV吗

05:12.140 --> 05:14.140
是不是他也点击了这个波点

05:14.140 --> 05:16.140
间接也点击了什么

05:16.140 --> 05:17.140
HTML

05:17.140 --> 05:19.140
在间接的点击了什么

05:19.140 --> 05:21.140
整个文档

05:21.140 --> 05:22.140
对不对

05:22.140 --> 05:24.140
所以说这边

05:24.140 --> 05:28.140
如果单击页面中的DIV元素

05:28.140 --> 05:30.140
那么这个Click事件

05:30.140 --> 05:31.140
他就会沿着这个动物数

05:31.140 --> 05:34.140
一层一层往上传

05:34.140 --> 05:35.140
为什么呢

05:35.140 --> 05:36.140
因为是从最具体的元素

05:36.140 --> 05:37.140
用户点的是DIV

05:37.140 --> 05:39.140
DIV是不是最具体的元素

05:39.140 --> 05:41.140
所以一层一层往上传

05:41.140 --> 05:42.140
说他的顺序就是什么呢

05:42.140 --> 05:45.140
顺序就是DIV到Body

05:45.140 --> 05:46.140
到HTML

05:46.140 --> 05:48.140
到Document

05:48.140 --> 05:49.140
当然现在很多这个

05:49.140 --> 05:50.140
现代浏览器的话

05:50.140 --> 05:52.140
他支持这个事件冒泡

05:52.140 --> 05:53.140
会一直冒到哪里呢

05:53.140 --> 05:56.140
会一直冒到这个Window对象

05:56.140 --> 05:57.140
好这边的话

05:57.140 --> 05:58.140
我们来举个例子

05:58.140 --> 06:00.140
我这边的话有一个这个代码

06:00.140 --> 06:02.140
我们来举个例子

06:02.140 --> 06:04.140
比如说这边

06:04.140 --> 06:07.140
这边有一个很简单

06:07.140 --> 06:08.140
有一个这个DIV样式

06:08.140 --> 06:10.140
我都直接写的是行内样式

06:11.140 --> 06:13.140
然后这边

06:13.140 --> 06:16.140
这边有一段script

06:16.140 --> 06:19.960
然后我们把这儿

06:19.960 --> 06:21.960
把这儿复制过来

06:21.960 --> 06:22.960
然后拿到这里

06:22.960 --> 06:24.960
把这段代码看一下

06:24.960 --> 06:25.960
这段代码

06:25.960 --> 06:27.960
这边的话reset

06:27.960 --> 06:28.960
点on click

06:28.960 --> 06:29.960
我们是不是给这个button

06:29.960 --> 06:31.960
绑了一个点击事件

06:31.960 --> 06:32.960
这个button呢

06:32.960 --> 06:34.960
这个点击事件他就是还原

06:34.960 --> 06:35.960
就是还原

06:35.960 --> 06:36.960
History Go

06:36.960 --> 06:37.960
没有传参数

06:37.960 --> 06:38.960
就是回到上一次状态

06:38.960 --> 06:40.960
好大家这边你看

06:40.960 --> 06:42.960
bots document

06:42.960 --> 06:43.960
document.body

06:43.960 --> 06:45.960
document.document.element

06:45.960 --> 06:47.960
大家这个document

06:47.960 --> 06:48.960
大家window

06:48.960 --> 06:50.960
我们都绑定了什么

06:50.960 --> 06:51.960
是不是都绑定了

06:51.960 --> 06:53.960
这个click事件

06:53.960 --> 06:55.960
绑定了click事件

06:55.960 --> 06:56.960
绑定了click事件

06:56.960 --> 06:57.960
对不对

06:57.960 --> 06:58.960
都绑定了点击事件

06:58.960 --> 07:02.960
好当用户点击这个DIV的时候

07:02.960 --> 07:04.960
那只有这个DIV的

07:04.960 --> 07:06.960
点击事件会出发吗

07:06.960 --> 07:07.960
我们看看

07:07.960 --> 07:08.960
刚才已经说过了

07:08.960 --> 07:09.960
你点击这个DIV

07:09.960 --> 07:12.960
是不是也可以看作是点击了这个body

07:12.960 --> 07:13.960
对不对

07:13.960 --> 07:15.960
所以如果你body

07:15.960 --> 07:18.960
就是上面绑定了点击事件

07:18.960 --> 07:20.960
前提是你要有这个点击事件

07:20.960 --> 07:22.960
如果他也绑定了点击事件

07:22.960 --> 07:24.960
那他上面的点击事件

07:24.960 --> 07:26.960
也会一并被出发

07:26.960 --> 07:29.960
包括比如说这边这个HTML

07:29.960 --> 07:32.960
你上面绑定了这个点击事件

07:32.960 --> 07:34.960
那他上面的点击事件

07:34.960 --> 07:36.960
也会一并的出发

07:36.960 --> 07:37.960
看到没有

07:37.960 --> 07:39.960
让我这边我做的事情很简单

07:39.960 --> 07:42.960
我往Pox的innerHTML里面

07:42.960 --> 07:44.960
写了一段内容DIV

07:44.960 --> 07:46.960
这边写的是body

07:46.960 --> 07:47.960
这边写的是HTML

07:47.960 --> 07:48.960
这边写的是document

07:48.960 --> 07:50.960
这边写的是window

07:50.960 --> 07:51.960
好

07:51.960 --> 07:53.960
那我们这边我们来看一下

07:53.960 --> 07:54.960
刷新

07:54.960 --> 07:55.960
然后这样我这边

07:55.960 --> 07:56.960
鼠标移到这里

07:56.960 --> 07:58.960
大家应该是能够看到我鼠标的

07:58.960 --> 07:59.960
我现在的话

07:59.960 --> 08:01.960
我点击一下这个DIV

08:01.960 --> 08:02.960
看到没有

08:02.960 --> 08:04.960
这边那是不是就是DIV body

08:04.960 --> 08:06.960
然后加HTML document

08:06.960 --> 08:07.960
然后window

08:07.960 --> 08:08.960
看到没有

08:08.960 --> 08:10.960
这个就是我们冒泡的这个顺序

08:10.960 --> 08:12.960
从最具体的这个节点

08:12.960 --> 08:15.960
一直到最不具体的节点

08:15.960 --> 08:17.960
好

08:17.960 --> 08:19.960
这是关于事件冒泡

08:19.960 --> 08:21.960
然后接下来事件补货

08:21.960 --> 08:24.960
事件补货是不是和它是反的

08:24.960 --> 08:25.960
它是先干嘛呢

08:25.960 --> 08:29.960
它是先从不太具体的这个节点

08:29.960 --> 08:31.960
应该更早的接受到事件

08:31.960 --> 08:32.960
然后到什么呢

08:32.960 --> 08:34.960
到最具体的这个节点

08:34.960 --> 08:35.960
看到没有

08:35.960 --> 08:36.960
就是反的

08:36.960 --> 08:37.960
好

08:37.960 --> 08:39.960
我们这边还是以这个为例

08:39.960 --> 08:41.960
然后接下来我们绑事件的时候

08:41.960 --> 08:42.960
我们使用什么呢

08:42.960 --> 08:43.960
我们使用这种方式

08:43.960 --> 08:45.960
and event listener

08:45.960 --> 08:47.960
这个是不是DOM2G

08:47.960 --> 08:48.960
给我们提供的

08:48.960 --> 08:50.960
绑定事件的方式

08:50.960 --> 08:52.960
然后接下来这边有第二个参数

08:52.960 --> 08:53.960
第二个参数设置为

08:53.960 --> 08:54.960
q的话

08:54.960 --> 08:56.960
是不是就是以补货的形式

08:56.960 --> 08:58.960
来绑定这个事件

08:58.960 --> 09:02.530
那我们这边我们来试一试

09:02.530 --> 09:05.530
然后把这换一下

09:05.530 --> 09:09.630
好

09:09.630 --> 09:10.630
然后接下来

09:10.630 --> 09:11.630
那它的话是不是就是应该是反的

09:11.630 --> 09:13.630
是不是应该是先是window

09:13.630 --> 09:17.630
然后接下来document html body diy

09:17.630 --> 09:18.630
是不是应该是这个样子

09:18.630 --> 09:19.630
好

09:19.630 --> 09:20.630
我们这边看一下

09:20.630 --> 09:21.630
刷新

09:21.630 --> 09:22.630
然后点击

09:22.630 --> 09:23.630
看到没有

09:23.630 --> 09:24.630
是不是就反的

09:24.630 --> 09:25.630
先触发的什么

09:25.630 --> 09:26.630
是吧

09:26.630 --> 09:27.630
window上面的这个点击事件

09:27.630 --> 09:29.630
然后接下来是document

09:29.630 --> 09:30.630
然后是html

09:30.630 --> 09:31.630
然后接下来body

09:31.630 --> 09:32.630
最后是

09:32.630 --> 09:35.630
最具体的 diy

09:35.630 --> 09:36.630
看到没有

09:36.630 --> 09:37.630
是不是这个样子的

09:37.630 --> 09:40.630
所以事件补货和事件帽炮

09:40.630 --> 09:41.630
它刚好就是两个

09:41.630 --> 09:44.630
这个相反的这个事件流

09:44.630 --> 09:47.630
一个事件帽炮是从具体到不具体

09:47.630 --> 09:52.630
事件补货是从不具体到具体

09:52.630 --> 09:53.630
好

09:53.630 --> 09:55.630
这是关于这个

09:55.630 --> 09:57.630
这个事件流的介绍

09:57.630 --> 09:58.630
好

09:58.630 --> 09:59.630
这样我们来看一下

09:59.630 --> 10:00.630
这个标准多么事件流

10:00.630 --> 10:01.630
我们说过

10:01.630 --> 10:03.630
它会有一个标准

10:03.630 --> 10:05.630
标准就是多么标准

10:05.630 --> 10:06.630
采用的是什么

10:06.630 --> 10:10.630
采用的就是补货加帽炮的方式

10:10.630 --> 10:12.630
就我两个都采取了

10:12.630 --> 10:14.630
先从不具体的

10:14.630 --> 10:15.630
到这个最具体的

10:15.630 --> 10:16.630
比如你看这张图

10:16.630 --> 10:17.630
先从不具体的

10:17.630 --> 10:19.630
然后再一直往下补货

10:19.630 --> 10:20.630
补货

10:20.630 --> 10:21.630
然后接下来

10:21.630 --> 10:22.630
这不到最具体的

10:22.630 --> 10:24.630
然后接下来在帽炮

10:24.630 --> 10:25.630
帽炮

10:25.630 --> 10:26.630
然后加帽炮

10:26.630 --> 10:27.630
看到没有

10:27.630 --> 10:28.630
它会从document

10:28.630 --> 10:30.630
这个document的对象开始

10:30.630 --> 10:33.630
然后也在document对象结束

10:33.630 --> 10:34.630
大家很多浏览期

10:34.630 --> 10:35.630
可以一直到什么呢

10:35.630 --> 10:37.630
一直到这个window对象

10:37.630 --> 10:38.630
但这个时候

10:38.630 --> 10:40.630
可能有的同学就会有疑问

10:40.630 --> 10:41.630
那你这边

10:41.630 --> 10:42.630
既然有两次

10:42.630 --> 10:45.630
那它岂不是事件要触发两次

10:45.630 --> 10:46.630
不会的

10:46.630 --> 10:47.630
不会触发两次

10:47.630 --> 10:48.630
它是什么呢

10:48.630 --> 10:49.630
我们来看一下

10:49.630 --> 10:50.630
首先的话

10:50.630 --> 10:51.630
这个多么标准有三个阶段

10:51.630 --> 10:52.630
一个是补货阶段

10:52.630 --> 10:54.630
一个是处于目标阶段

10:54.630 --> 10:56.630
一个是世界帽炮阶段

10:56.630 --> 10:57.630
然后接下来

10:57.630 --> 10:58.630
首先是补货阶段

10:58.630 --> 10:59.630
补货阶段就是

10:59.630 --> 11:00.630
我们刚说的

11:00.630 --> 11:02.630
从这个最不具体的

11:02.630 --> 11:03.630
比如document

11:03.630 --> 11:04.630
然后加到html

11:04.630 --> 11:05.630
到body

11:05.630 --> 11:06.630
到div

11:06.630 --> 11:07.630
这是不是补货阶段

11:07.630 --> 11:08.630
补货阶段

11:08.630 --> 11:09.630
然后接下来

11:09.630 --> 11:11.630
最后到div的时候

11:11.630 --> 11:13.630
它的事件它是不会发生的

11:13.630 --> 11:14.630
看到没有

11:14.630 --> 11:16.630
它事件是不会发生的

11:16.630 --> 11:17.630
然后接下来的话

11:17.630 --> 11:19.630
第二个阶段是处于目标阶段

11:19.630 --> 11:20.630
处于目标阶段

11:20.630 --> 11:21.630
然后这个时候

11:21.630 --> 11:23.630
它事件会发生并处理

11:23.630 --> 11:24.630
然后接下来

11:24.630 --> 11:26.630
这一次事件的发生

11:26.630 --> 11:27.630
它会被看作是

11:27.630 --> 11:30.630
帽炮阶段的一部分

11:30.630 --> 11:32.630
看到没有

11:32.630 --> 11:34.630
帽炮阶段的一部分

11:34.630 --> 11:35.630
也就是说这边的话

11:35.630 --> 11:36.630
就是你补货的时候

11:36.630 --> 11:38.630
在这上面触发这个事件

11:38.630 --> 11:40.630
这个事件它只会触发一次

11:40.630 --> 11:41.630
它会算到哪里呢

11:41.630 --> 11:43.630
会算到这个帽炮阶段里面

11:43.630 --> 11:44.630
看到没有

11:44.630 --> 11:45.630
就是这个样子

11:45.630 --> 11:47.630
大家最后是帽炮阶段

11:47.630 --> 11:51.630
事件又传播回这个文档

11:51.630 --> 11:53.630
也就是说整个补货阶段

11:53.630 --> 11:55.630
都不会触发事件

11:55.630 --> 11:56.630
这里其实写的有

11:56.630 --> 11:59.630
实际目标DIV在补货阶段

11:59.630 --> 12:02.630
它是不会触发事件的

12:02.630 --> 12:03.630
整个补货阶段

12:03.630 --> 12:04.630
不会触发事件

12:04.630 --> 12:06.630
补货到了之后

12:06.630 --> 12:07.630
大家它是不是要开始帽炮了

12:07.630 --> 12:12.630
帽炮阶段才开始出发事件

12:12.630 --> 12:16.630
这是关于事件和事件流

12:16.630 --> 12:19.630
和事件流相关的

12:19.630 --> 12:22.630
其实主要就是和事件帽炮相关的

12:22.630 --> 12:25.630
就是这个事件委托

12:25.630 --> 12:27.630
这也是问的比较多的

12:27.630 --> 12:29.630
就会问你事件委托是什么

12:29.630 --> 12:32.630
或者事件委托的原理是什么

12:32.630 --> 12:34.630
事件委托的原理是什么呢

12:34.630 --> 12:37.630
事件委托的原理就是利用到了什么呢

12:37.630 --> 12:41.630
就是利用到了事件帽炮

12:41.630 --> 12:42.630
事件帽炮

12:42.630 --> 12:43.630
什么意思

12:43.630 --> 12:46.630
比如说我这边我给你举个例子

12:46.630 --> 12:49.630
比如说我这边有个UR

12:49.630 --> 12:53.630
UR下面有10个例

12:54.630 --> 12:56.630
到那

12:56.630 --> 12:58.630
这边有10个例

12:58.630 --> 12:59.630
好那接下来听需求

12:59.630 --> 13:02.630
那我现在的这个需求是什么呢

13:02.630 --> 13:03.630
我每一个例

13:03.630 --> 13:06.630
就是我这下面每一个例

13:06.630 --> 13:08.630
都可以点击

13:08.630 --> 13:09.630
都可以点击

13:09.630 --> 13:10.630
并且做的事情是一样的

13:10.630 --> 13:11.630
都是输出于

13:11.630 --> 13:13.630
输出这个一句话

13:13.630 --> 13:14.630
Hello World

13:14.630 --> 13:15.630
好那接下来

13:15.630 --> 13:18.630
如果你没有这个事件委托的话

13:18.630 --> 13:19.630
那你得怎么写

13:19.630 --> 13:22.630
首先你是否获取到所有的例

13:22.630 --> 13:23.630
你就是这么写的

13:23.630 --> 13:25.630
哇一个这个例子

13:25.630 --> 13:27.630
等于一个Document

13:27.630 --> 13:31.630
点GetElementByTargetLame

13:31.630 --> 13:34.630
这边是GetElementByTargetLame

13:34.630 --> 13:35.630
获取到什么呢

13:35.630 --> 13:37.630
获取到这个所有的例

13:37.630 --> 13:38.630
然后接下来

13:38.630 --> 13:40.630
这边通过这个复讯环

13:40.630 --> 13:42.630
哇一个i等于一个0

13:42.630 --> 13:44.630
i小于例子

13:44.630 --> 13:45.630
点认是

13:45.630 --> 13:48.630
而且i加加

13:48.630 --> 13:49.630
对不对

13:50.630 --> 13:52.630
例是i

13:52.630 --> 13:54.630
我们就用这个多么

13:54.630 --> 13:55.630
多么零几是吧

13:55.630 --> 13:57.630
我们就用多么零几的形式

13:57.630 --> 13:59.630
因为这个不是很复杂

13:59.630 --> 14:01.630
好然后接下来我们这边

14:01.630 --> 14:03.630
你是不是得这样子来写

14:03.630 --> 14:04.630
对不对

14:04.630 --> 14:07.630
Hello World

14:07.630 --> 14:08.630
你得这样子来写

14:08.630 --> 14:09.630
我们这边我们来看这段代码

14:09.630 --> 14:10.630
做了什么事情

14:10.630 --> 14:13.630
我首先获取到所有的例

14:13.630 --> 14:14.630
获取到所有的例之后

14:14.630 --> 14:16.630
再将我去给每一个例

14:16.630 --> 14:18.630
通过这个复讯环去便利

14:18.630 --> 14:20.630
然后给每一个例

14:20.630 --> 14:22.630
绑定这个点击世界

14:22.630 --> 14:23.630
效果行不行

14:23.630 --> 14:24.630
效果肯定是可以的

14:24.630 --> 14:26.630
好我们这边刷新一下

14:26.630 --> 14:27.630
刷新一下之后

14:27.630 --> 14:28.630
然后我们把这边

14:28.630 --> 14:30.630
控制台打开

14:30.630 --> 14:32.630
好这边你看

14:32.630 --> 14:34.630
效果是不是肯定是ok的

14:34.630 --> 14:35.630
但是你现在的话

14:35.630 --> 14:36.630
你想想你这个行为

14:36.630 --> 14:37.630
其实是很恐怖的

14:37.630 --> 14:38.630
为什么呢

14:38.630 --> 14:39.630
因为你这边

14:39.630 --> 14:40.630
是不是相当于绑定了

14:40.630 --> 14:41.630
十次世界

14:41.630 --> 14:42.630
对不对

14:42.630 --> 14:45.630
那假设我的这个

14:45.630 --> 14:47.630
我的这个

14:47.630 --> 14:48.630
就我这个元素

14:48.630 --> 14:49.630
如果很多的话

14:49.630 --> 14:50.630
比如有100个

14:50.630 --> 14:51.630
那你是不是要绑定

14:51.630 --> 14:53.630
这个100个世界

14:53.630 --> 14:54.630
一般来讲

14:54.630 --> 14:55.630
我们的这个世界越多

14:55.630 --> 14:56.630
那你的这个

14:56.630 --> 14:58.630
整个页面的效率

14:58.630 --> 14:59.630
就会越低

14:59.630 --> 15:00.630
那怎么办呢

15:00.630 --> 15:01.630
让我这边

15:01.630 --> 15:03.630
让我可以采用这种方式

15:03.630 --> 15:04.630
把这个注释了

15:04.630 --> 15:06.630
可以采用这种方式

15:06.630 --> 15:08.630
好使用

15:12.650 --> 15:14.650
使用世界

15:15.650 --> 15:16.650
委托

15:16.650 --> 15:18.650
来优化

15:19.650 --> 15:22.650
上面的代码

15:22.650 --> 15:23.650
怎么优化呢

15:23.650 --> 15:24.650
让我这边的话

15:24.650 --> 15:25.650
我就直接

15:25.650 --> 15:26.650
首先我获取什么呢

15:26.650 --> 15:27.650
我不再获取力了

15:27.650 --> 15:29.650
我获取UAL

15:29.650 --> 15:32.650
document.getElement

15:32.650 --> 15:33.650
我给这个UAL

15:33.650 --> 15:34.650
我给它一个id

15:34.650 --> 15:37.650
id就叫做UAL

15:37.650 --> 15:39.650
一个id

15:39.650 --> 15:40.650
ok

15:40.650 --> 15:41.650
好然后接下来

15:41.650 --> 15:42.650
我绑世界我就干嘛呢

15:42.650 --> 15:46.650
我就绑在这个UAL上面

15:46.650 --> 15:47.650
onclick

15:47.650 --> 15:49.650
等于一个function

15:49.650 --> 15:52.650
然后接下来这边log

15:52.650 --> 15:54.650
log然后这边的话

15:54.650 --> 15:58.650
打印一个hello world

15:58.650 --> 15:59.650
看了没有

15:59.650 --> 16:00.650
好那接下来

16:00.650 --> 16:01.650
我们来看一下

16:01.650 --> 16:02.650
刷新

16:02.650 --> 16:03.650
这样我这边

16:03.650 --> 16:04.650
我点击这个力

16:04.650 --> 16:05.650
点击这个力

16:05.650 --> 16:07.650
由于世界冒泡的存在

16:07.650 --> 16:08.650
当我点击力的话

16:08.650 --> 16:10.650
力其实并没有绑定这个世界

16:10.650 --> 16:11.650
接下来它往上

16:11.650 --> 16:12.650
它会往上冒泡

16:12.650 --> 16:14.650
冒泡的时候会冒泡到哪里

16:14.650 --> 16:17.650
所以会冒泡到这个UAL

16:17.650 --> 16:18.650
对不对

16:18.650 --> 16:19.650
UAL上面是绑定了的

16:19.650 --> 16:21.650
所以UAL的点击世界

16:21.650 --> 16:22.650
就会出发

16:22.650 --> 16:23.650
比如你看这边

16:23.650 --> 16:25.650
看了没有

16:25.650 --> 16:28.650
我点击力是一样的出发了

16:28.650 --> 16:30.650
但是我绑世界只绑定了几个

16:30.650 --> 16:32.650
我只绑定了一个

16:32.650 --> 16:34.650
但是有的同学就会输了

16:34.650 --> 16:36.650
你这样子没对

16:36.650 --> 16:37.650
哪里没对呢

16:37.650 --> 16:40.650
你给UAL绑定点击世界

16:40.650 --> 16:42.650
那我比如说我点击

16:42.650 --> 16:43.650
我不点击力

16:43.650 --> 16:44.650
我点击UAL

16:44.650 --> 16:45.650
比如我点击这些位置

16:45.650 --> 16:47.650
比如你看我现在鼠标点的是哪里

16:47.650 --> 16:48.650
是不是点的是这里

16:48.650 --> 16:49.650
对不对

16:49.650 --> 16:50.650
就是一些空白的位置

16:50.650 --> 16:51.650
把我点击这些位置

16:51.650 --> 16:53.650
并没有点击具体的这个力

16:53.650 --> 16:55.650
点击这些位置

16:55.650 --> 16:58.650
你看点击世界是不是也会出发

16:58.650 --> 16:59.650
对不对

16:59.650 --> 17:00.650
原因很简单

17:00.650 --> 17:01.650
因为你世界就是

17:01.650 --> 17:03.650
绑在UAL上面的

17:03.650 --> 17:04.650
说你点击UAL

17:04.650 --> 17:06.650
它世界自然也会出发

17:06.650 --> 17:07.650
这个很正常

17:07.650 --> 17:08.650
那怎么办呢

17:08.650 --> 17:09.650
其实很简单

17:09.650 --> 17:11.650
你这边的话

17:11.650 --> 17:12.650
你可以通过什么呢

17:12.650 --> 17:13.650
这边的话

17:13.650 --> 17:16.650
它是不是会有一个世界对象

17:16.650 --> 17:17.650
对不对

17:17.650 --> 17:18.650
有个世界对象

17:18.650 --> 17:19.650
好

17:19.650 --> 17:20.650
然后接下来的话

17:20.650 --> 17:21.650
你这边可以判断一下

17:21.650 --> 17:22.650
世界对象的名字

17:22.650 --> 17:23.650
然后这边

17:23.650 --> 17:26.650
log1.target

17:26.650 --> 17:27.650
我们可以拿到

17:27.650 --> 17:29.650
用户点击的具体的

17:29.650 --> 17:31.650
动物元素是哪个

17:31.650 --> 17:32.650
比如这个是不是点击的

17:32.650 --> 17:33.650
就是列

17:33.650 --> 17:34.650
这个点击的

17:34.650 --> 17:35.650
是不是就是UAL

17:35.650 --> 17:36.650
对不对

17:36.650 --> 17:37.650
好

17:37.650 --> 17:38.650
那接下来

17:38.650 --> 17:39.650
我们这边可以点

17:39.650 --> 17:40.650
什么呢

17:40.650 --> 17:41.650
loadName

17:41.650 --> 17:42.650
好

17:42.650 --> 17:43.650
然后接下来这边

17:43.650 --> 17:44.650
点击力

17:44.650 --> 17:45.650
是不是得到力

17:45.650 --> 17:46.650
点击这个UAL

17:46.650 --> 17:47.650
是不是得到UAL

17:47.650 --> 17:48.650
好

17:48.650 --> 17:49.650
那接下来

17:49.650 --> 17:50.650
我们这边就可以干嘛呢

17:50.650 --> 17:51.650
我们这边就可以

17:51.650 --> 17:52.650
做一个判断

17:52.650 --> 17:54.650
if

17:54.650 --> 17:56.650
全等于什么呢

17:56.650 --> 17:59.650
全等于li

17:59.650 --> 18:00.650
那接下来是不是

18:00.650 --> 18:01.650
再执行你

18:01.650 --> 18:03.650
对应的这个东西

18:03.650 --> 18:05.650
Hello world

18:05.650 --> 18:07.650
是不是再来执行

18:07.650 --> 18:09.650
那这一次是不是就解决了

18:09.650 --> 18:10.650
对不对

18:10.650 --> 18:11.650
这边点击力

18:11.650 --> 18:12.650
会出发

18:12.650 --> 18:13.650
但是我点击UAL

18:13.650 --> 18:15.650
是不是就不会出发

18:15.650 --> 18:16.650
看了没有

18:16.650 --> 18:18.650
而且使用这个

18:18.650 --> 18:19.650
事件委托

18:19.650 --> 18:20.650
还有一个

18:20.650 --> 18:21.650
就是很大的好处

18:21.650 --> 18:22.650
就是什么呢

18:22.650 --> 18:23.650
很大的好处就是

18:23.650 --> 18:24.650
我后期

18:24.650 --> 18:25.650
如果我再往里面

18:25.650 --> 18:26.650
添加力的话

18:26.650 --> 18:27.650
那这个事件

18:27.650 --> 18:28.650
是不是也会出发

18:28.650 --> 18:29.650
对不对

18:29.650 --> 18:30.650
我再

18:30.650 --> 18:31.650
就是再往里面

18:31.650 --> 18:33.650
再添加一个新的力

18:33.650 --> 18:34.650
添加一个新的力

18:34.650 --> 18:35.650
然后后期的话

18:35.650 --> 18:36.650
然后就让我点击

18:36.650 --> 18:37.650
这个新的这个力

18:37.650 --> 18:38.650
它事件会不会出发

18:38.650 --> 18:39.650
也会出发

18:39.650 --> 18:41.650
它事件委托是

18:41.650 --> 18:42.650
绑在UAL上面的

18:42.650 --> 18:43.650
看了没有

18:43.650 --> 18:44.650
但是我如果是使用

18:44.650 --> 18:45.650
这种方式

18:45.650 --> 18:46.650
这种方式

18:46.650 --> 18:47.650
我相当于

18:47.650 --> 18:48.650
是不是只给前面的力

18:48.650 --> 18:49.650
各自绑了事件

18:49.650 --> 18:51.650
后面新增的力

18:51.650 --> 18:53.650
有没有绑立事件

18:53.650 --> 18:54.650
是没有

18:54.650 --> 18:55.650
就会导致你

18:55.650 --> 18:57.650
后面新增的力

18:57.650 --> 18:58.650
它就没有事件

18:58.650 --> 18:59.650
所以这就是

18:59.650 --> 19:00.650
事件委托的

19:00.650 --> 19:01.650
第二个好处

19:01.650 --> 19:02.650
这边我们来写一下

19:02.650 --> 19:04.650
事件委托

19:05.650 --> 19:08.650
事件委托

19:09.650 --> 19:10.650
优点1

19:11.650 --> 19:12.650
优点1

19:12.650 --> 19:13.650
优点1就是什么呢

19:13.650 --> 19:14.650
优点1就是

19:14.650 --> 19:15.650
我们刚才所说的

19:16.650 --> 19:17.650
只用

19:18.650 --> 19:22.650
在副元素上面

19:22.650 --> 19:26.650
绑定相应的事件

19:26.650 --> 19:27.650
是吧

19:27.650 --> 19:28.650
效率更高

19:28.650 --> 19:29.650
对不对

19:29.650 --> 19:31.650
绑定的事件

19:31.650 --> 19:35.650
更少页面的效率

19:35.650 --> 19:36.650
更高

19:36.650 --> 19:37.650
这是第一个

19:37.650 --> 19:38.650
好

19:38.650 --> 19:39.650
第二个就是什么呢

19:39.650 --> 19:42.650
事件委托

19:42.650 --> 19:44.650
优点2

19:44.650 --> 19:45.650
就是什么呢

19:45.650 --> 19:50.650
后面新增的元素

19:50.650 --> 19:51.650
新增的元素

19:51.650 --> 19:55.650
然后事件是不是也存在

19:55.650 --> 19:56.650
对不对

19:56.650 --> 19:57.650
也存在

19:57.650 --> 19:58.650
这个我就不举例了吧

19:58.650 --> 19:59.650
这个大家应该想象得到吧

19:59.650 --> 20:00.650
比如说我这边

20:00.650 --> 20:02.650
让我再新增一个

20:02.650 --> 20:03.650
这边再新增一个力

20:03.650 --> 20:05.650
你点击这个新增的力

20:05.650 --> 20:06.650
它肯定是不是有事件了

20:06.650 --> 20:07.650
对吧

20:07.650 --> 20:11.650
因为我事件是绑在UAL上面的

20:11.650 --> 20:12.650
好

20:12.650 --> 20:14.650
这是关于事件委托

20:14.650 --> 20:16.650
大家可以把这个例子看一下

20:16.650 --> 20:19.650
这个例子其实就和刚才的例子差不多的

20:19.650 --> 20:20.650
好

20:20.650 --> 20:21.650
然后整体解答

20:21.650 --> 20:25.650
谈一谈事件委托和冒泡的原理

20:25.650 --> 20:26.650
事件委托的话

20:26.650 --> 20:28.650
又称之为事件代理

20:28.650 --> 20:29.650
它用到的是什么呢

20:29.650 --> 20:30.650
它用到的是不是

20:30.650 --> 20:32.650
事件冒泡

20:32.650 --> 20:33.650
对不对

20:33.650 --> 20:35.650
它的核心就是这里

20:35.650 --> 20:36.650
这里写的有

20:36.650 --> 20:37.650
委托利用到的是什么呢

20:37.650 --> 20:40.650
事件冒泡

20:40.650 --> 20:41.650
事件冒泡是什么

20:41.650 --> 20:43.650
事件冒泡就是指的是

20:43.650 --> 20:47.650
事件从开始是最集体的元素

20:47.650 --> 20:50.650
然后就一直向上传播

20:50.650 --> 20:51.650
到什么呢

20:51.650 --> 20:53.650
到最不具体的节点

20:53.650 --> 20:55.650
这是关于冒泡

20:55.650 --> 20:56.650
好

20:56.650 --> 20:58.650
其他的话就没什么了

20:58.650 --> 20:59.650
大家下来的话

20:59.650 --> 21:01.650
把事件传播机制

21:01.650 --> 21:03.650
可以自己再看一下

21:03.650 --> 21:04.650
好

21:04.650 --> 21:05.650
这期课就先到这里

21:05.650 --> 21:06.650
好

21:06.650 --> 21:07.650
再见

