WEBVTT

00:00.940 --> 00:02.940
大家好 我是谢老师

00:02.940 --> 00:04.940
这节课的话我们来看一下这个

00:04.940 --> 00:06.940
严格模式

00:06.940 --> 00:10.940
这也是在面试中问的比较多的一个问题

00:10.940 --> 00:13.940
他会怎么问呢 他就问你比如UserStract

00:13.940 --> 00:16.940
是什么意思 使用它和不使用它

00:16.940 --> 00:18.940
有什么样的区别

00:18.940 --> 00:21.940
那我们这边首先从这么几个点来看

00:21.940 --> 00:23.940
首先就是介绍一下

00:23.940 --> 00:25.940
什么是严格模式

00:25.940 --> 00:27.940
这玩意究竟是什么 第二个就是什么呢

00:27.940 --> 00:30.940
如何开启严格模式

00:30.940 --> 00:32.940
其实就这个了

00:32.940 --> 00:35.940
问题都已经告诉你了 就这个UserStract

00:35.940 --> 00:39.940
好 那接下来就是开了这个严格模式和不开

00:39.940 --> 00:41.940
不开的话我们叫做普通模式

00:41.940 --> 00:45.940
那这两者之间有什么样的区别

00:45.940 --> 00:47.940
好 那我们一个一个来看

00:47.940 --> 00:50.940
那首先第一个 什么是严格模式

00:50.940 --> 00:52.940
我们这边来看

00:52.940 --> 00:54.940
这节课篇理论要多一些

00:54.940 --> 00:57.940
严格模式是这个耶稣舞

00:57.940 --> 00:59.940
开始新增的一种方式

00:59.940 --> 01:01.940
它是采用什么呢

01:01.940 --> 01:04.940
采用这个具有限制性的

01:04.940 --> 01:07.940
javascript变体的一种方式

01:07.940 --> 01:10.940
从而使这个代码隐释的脱离

01:10.940 --> 01:13.940
这个马虎模式 西松模式

01:13.940 --> 01:14.940
这个蓝闪模式

01:14.940 --> 01:16.940
也就是你没有开这个严格模式

01:16.940 --> 01:18.940
以前你的那个模式叫做什么

01:18.940 --> 01:22.940
叫做马虎模式 西松模式 蓝闪模式

01:22.940 --> 01:24.940
你可以称之它为普通模式

01:24.940 --> 01:27.940
然后接下来你开启了严格模式之后

01:27.940 --> 01:29.940
它就更加的严格了

01:29.940 --> 01:31.940
更加严格

01:31.940 --> 01:33.940
就对你的代码的这个要求

01:33.940 --> 01:34.940
非常严格

01:34.940 --> 01:35.940
我们知道以前我们那个

01:35.940 --> 01:37.940
用普通模式来写这个javascript代码的时候

01:37.940 --> 01:40.940
然后接下来有各种各样的这种写法

01:40.940 --> 01:43.940
比如说我不声明这个变量

01:43.940 --> 01:45.940
就直接使用之类的

01:45.940 --> 01:47.940
各种化粒胡说的这个写法都有

01:47.940 --> 01:48.940
为什么呢

01:48.940 --> 01:49.940
就是因为最早的话

01:49.940 --> 01:52.940
这个javascript它是处于一种这种马虎模式

01:52.940 --> 01:53.940
就这种

01:53.940 --> 01:56.940
我们一般也就称之为普通模式

01:56.940 --> 01:58.940
就写法就很不严谨

01:58.940 --> 01:59.940
那后面的话

01:59.940 --> 02:01.940
为了让就是写这个javascript代码

02:01.940 --> 02:03.940
更加严谨一些

02:03.940 --> 02:07.940
说从javascript开始新增了这个严格模式

02:07.940 --> 02:08.940
我们来看一下

02:08.940 --> 02:10.940
设立这个严格模式的目的

02:10.940 --> 02:12.940
主要有这么几个

02:12.940 --> 02:14.940
消除javascript的一些不合理

02:14.940 --> 02:16.940
不严谨之处

02:16.940 --> 02:19.940
减少一些怪异的行为

02:19.940 --> 02:21.940
那一会我们看那个就是

02:21.940 --> 02:23.940
严格模式和普通模式区别的时候

02:23.940 --> 02:24.940
我们就会看到

02:24.940 --> 02:26.940
究竟它消除了哪些东西

02:26.940 --> 02:27.940
然后接下来的话

02:27.940 --> 02:30.940
消除代码运行的一些不安全之处

02:30.940 --> 02:32.940
让你的代码更加的安全

02:32.940 --> 02:35.940
然后提高编译器的这个效率

02:35.940 --> 02:37.940
增加这个运行速度

02:37.940 --> 02:40.940
然后为这个未来新版本的这个JS

02:40.940 --> 02:42.940
做好这个铺垫

02:42.940 --> 02:43.940
就我们很多哈

02:43.940 --> 02:45.940
很多比如说这个

02:45.940 --> 02:47.940
下一代的这个JS的这个语法

02:47.940 --> 02:50.940
往往就是先是在这个严格模式里面

02:50.940 --> 02:51.940
可以使用

02:51.940 --> 02:53.940
在严格模式里面可以使用

02:53.940 --> 02:55.940
然后接下来在严格模式里面

02:55.940 --> 02:56.940
出现了一些这个语法

02:56.940 --> 02:59.940
往往就代表的是这个未来新版本

02:59.940 --> 03:02.940
JS中会新增的这个语法

03:03.940 --> 03:05.940
严格模式体现了这个JS

03:05.940 --> 03:08.940
更合理 更安全 更严谨

03:08.940 --> 03:10.940
其实主要就是严谨

03:10.940 --> 03:12.940
更严谨的这个发展方向

03:12.940 --> 03:15.940
支持严格模式的这个浏览器

03:15.940 --> 03:18.940
有这些IE的话是从IE10开始支持的

03:18.940 --> 03:20.940
那其他浏览器

03:20.940 --> 03:22.940
它的一些支持情况

03:22.940 --> 03:24.940
好 然后在严格模式下

03:24.940 --> 03:29.940
同样的代码可能会有不一样的运行结果

03:29.940 --> 03:31.940
这个我们一会看这个

03:31.940 --> 03:33.940
严格模式和普通模式区别的时候

03:33.940 --> 03:34.940
我们就会看到

03:34.940 --> 03:36.940
有可能普通模式运行出来的结果是这样子的

03:36.940 --> 03:38.940
但严格模式呢和它不一样

03:39.940 --> 03:41.940
然后一些在正常模式下

03:41.940 --> 03:43.940
可运行的语迹

03:43.940 --> 03:45.940
在严格模式下将不能运行

03:45.940 --> 03:47.940
因为它更加严格了

03:47.940 --> 03:50.940
不允许你以前那种就是不严谨的写法

03:50.940 --> 03:53.940
这个一会我们在这个看区别的时候

03:53.940 --> 03:54.940
也会看得到

03:55.940 --> 03:56.940
好 掌握这些内容

03:56.940 --> 04:00.940
有助于一个细致深入的理解JS

04:00.940 --> 04:02.940
让你成为一个更好的程序员

04:02.940 --> 04:03.940
这是首先第一个

04:03.940 --> 04:05.940
介绍什么是严格模式

04:05.940 --> 04:07.940
其实说了这么多就一句话

04:07.940 --> 04:09.940
让你的这个代码

04:09.940 --> 04:11.940
提供了一个更加严格的环境

04:11.940 --> 04:13.940
对吧 让你来书写代码

04:13.940 --> 04:15.940
然后接下来你把这些

04:15.940 --> 04:17.940
能够达出来就差不多了

04:17.940 --> 04:18.940
好 第二个

04:18.940 --> 04:19.940
第二个的话那就是

04:19.940 --> 04:21.940
我如何开启这个严格模式

04:21.940 --> 04:23.940
那开启怎么开启呢

04:23.940 --> 04:25.940
其实就是使用的是这个

04:25.940 --> 04:27.940
诶 没有 use strict

04:27.940 --> 04:28.940
这个制服串

04:28.940 --> 04:31.940
当你在你的这个最顶端

04:31.940 --> 04:34.940
代码最顶端使用了这个制服串之后

04:34.940 --> 04:35.940
标志着什么呢

04:35.940 --> 04:38.940
标志着进入严格模式

04:38.940 --> 04:40.940
但如果是老版本

04:40.940 --> 04:42.940
这个老版本的这个浏览器

04:42.940 --> 04:43.940
它不认识这个

04:43.940 --> 04:44.940
因为我们刚才说了嘛

04:44.940 --> 04:46.940
就是支持严格模式的这个浏览器

04:46.940 --> 04:49.940
你看 i1是从 i10

04:49.940 --> 04:50.940
是不是才开始支持的

04:50.940 --> 04:52.940
那也就是说 i10之前的话

04:52.940 --> 04:54.940
它不支持 不支持的它会怎么办呢

04:54.940 --> 04:56.940
它就把它当做一行普通的制服串

04:56.940 --> 04:58.940
就忽略了

04:58.940 --> 05:00.940
好 然后这个严格模式

05:00.940 --> 05:03.940
一般来讲的话有两种使用方法

05:03.940 --> 05:04.940
一种是什么呢

05:04.940 --> 05:07.940
一种是针对你的整个脚本

05:07.940 --> 05:09.940
那既然是针对你整个脚本

05:09.940 --> 05:12.940
那你就把这就是这个use strict

05:12.940 --> 05:14.940
啊 这这个这句话

05:14.940 --> 05:17.940
放在你脚本文件的第一行

05:17.940 --> 05:18.940
看到没有 就放在第一行

05:18.940 --> 05:20.940
然后加后面然后书写你的代码

05:20.940 --> 05:22.940
比如我这边有一个这个script

05:22.940 --> 05:24.940
script 然后这样我就把这个

05:24.940 --> 05:25.940
放在第一行

05:25.940 --> 05:27.940
然后后面书写我的代码

05:27.940 --> 05:28.940
比如说我这边

05:28.940 --> 05:31.940
index 再加我在这边

05:31.940 --> 05:36.940
这这边就 use strict

05:37.940 --> 05:39.940
对吧 代表我进入严格模式

05:39.940 --> 05:41.940
然后加后面的话就书写我的代码

05:41.940 --> 05:43.940
你就按照之前的这个编码

05:43.940 --> 05:45.940
然后加写就可以了

05:45.940 --> 05:47.940
这是第一种

05:47.940 --> 05:48.940
第二种是什么呢

05:48.940 --> 05:50.940
第二种是针对单个函数

05:50.940 --> 05:52.940
比如说你看我这边

05:52.940 --> 05:54.940
我这边是不是有了这个function

05:54.940 --> 05:55.940
function 然后加这边

05:55.940 --> 05:57.940
第一行use strict

05:57.940 --> 05:58.940
那这个严格模式

05:58.940 --> 06:00.940
也就是说我的这个函数里面

06:00.940 --> 06:01.940
就整个函数

06:01.940 --> 06:03.940
它是以严格模式运行的

06:03.940 --> 06:05.940
比如说就像这个样子

06:05.940 --> 06:10.380
比如说我这边的话这个function

06:10.380 --> 06:12.380
比如说我这边的话

06:12.380 --> 06:17.980
log 这个的话是不是在普通模式

06:17.980 --> 06:19.980
或者你说那个 c 数

06:19.980 --> 06:21.980
这个 c 数模式 马户模式对不对

06:21.980 --> 06:23.980
好 大家我这边有一个这个函数

06:23.980 --> 06:24.980
test

06:24.980 --> 06:26.980
好 在这里面我干嘛呢

06:26.980 --> 06:29.980
我这边 use strict

06:29.980 --> 06:31.980
大家后面的话是我的这个

06:31.980 --> 06:33.980
后续的这个代码

06:33.980 --> 06:35.980
那也就是说在我的整个这个函数里面

06:35.980 --> 06:37.980
这个函数里面它采用什么

06:37.980 --> 06:40.980
就采用严格模式运行

06:40.980 --> 06:41.980
对不对

06:41.980 --> 06:45.980
这是这个开启严格模式的两种方式

06:45.980 --> 06:47.980
一个是针对整个脚本

06:47.980 --> 06:50.980
一个是针对单个函数

06:50.980 --> 06:55.980
然后脚本文件的便通写法

06:55.980 --> 06:58.980
因为第一种调用方法不利于文件合并

06:58.980 --> 07:00.980
更好的方法是像这个样子

07:00.980 --> 07:03.980
就写在一个立即执行函数里面

07:03.980 --> 07:06.980
好 然后我们重点来看一下

07:06.980 --> 07:10.980
重点来看一下严格模式和普通模式

07:10.980 --> 07:13.980
它们之间的一个区别

07:13.980 --> 07:17.980
我们既然说严格模式你更加的干嘛呀

07:17.980 --> 07:19.980
更加的严格

07:19.980 --> 07:21.980
那你究竟你严格在哪里

07:21.980 --> 07:23.980
那今天我们来看

07:23.980 --> 07:24.980
当我这边没有列举完

07:24.980 --> 07:27.980
我列举了一些常见的区别

07:27.980 --> 07:28.980
我们这边来看一下

07:28.980 --> 07:29.980
首先第1个

07:29.980 --> 07:31.980
没有使用wasming的变量

07:31.980 --> 07:33.980
它是不能够使用的

07:33.980 --> 07:35.980
比如说我们以前

07:36.980 --> 07:38.980
比如说我们这边

07:38.980 --> 07:42.980
直接a等于10

07:42.980 --> 07:44.980
对不对 然后加这边log

07:44.980 --> 07:45.980
log一个a

07:45.980 --> 07:48.980
以前这种弹码是不OK的

07:48.980 --> 07:49.980
看到没有

07:49.980 --> 07:50.980
OK的

07:50.980 --> 07:51.980
但是你现在的话

07:51.980 --> 07:54.980
你把这个严格模式一打开

07:54.980 --> 07:56.980
好 然后加我们这边

07:56.980 --> 07:58.980
走 是不是爆错了

07:58.980 --> 07:59.980
看到没有

07:59.980 --> 08:02.980
a is not defend

08:02.980 --> 08:04.980
我看这个严格模式能不能注释掉

08:04.980 --> 08:05.980
可以注释

08:05.980 --> 08:08.980
你看 不开严格模式

08:08.980 --> 08:09.980
可以的

08:09.980 --> 08:12.980
但是一旦开启严格模式

08:12.980 --> 08:14.980
一旦开启严格模式

08:14.980 --> 08:15.980
对不起

08:15.980 --> 08:17.980
a is not defend

08:17.980 --> 08:19.980
是不是就更加严格了

08:19.980 --> 08:20.980
对不对

08:20.980 --> 08:22.980
我们可以看到它确确实实就

08:22.980 --> 08:24.980
更加严格了

08:24.980 --> 08:27.980
好 然后就是第1个点

08:27.980 --> 08:28.980
第1个点

08:28.980 --> 08:34.460
没有

08:34.460 --> 08:37.460
没有声明的变量

08:37.460 --> 08:39.460
不能使用

08:39.460 --> 08:40.460
这一点我们就看到了

08:40.460 --> 08:42.460
好 注释掉

08:42.460 --> 08:45.840
好 接下来第2点

08:45.840 --> 08:46.840
第2点是什么呢

08:46.840 --> 08:49.840
删除变量和不存在的属性会

08:49.840 --> 08:50.840
包括

08:50.840 --> 08:53.840
普通模式下删除这个变量

08:53.840 --> 08:55.840
或者不存在的属性

08:55.840 --> 08:56.840
虽然也会失败

08:56.840 --> 08:57.840
但是它是什么呢

08:57.840 --> 08:59.840
它是叫做静默失败

08:59.840 --> 09:00.840
怎么叫做静默失败

09:00.840 --> 09:02.840
就是我默默的失败了

09:02.840 --> 09:04.840
我也不给你任何提示

09:04.840 --> 09:06.840
反正我确实是失败了

09:06.840 --> 09:07.840
但是呢

09:07.840 --> 09:08.840
我也不好意思说

09:08.840 --> 09:09.840
是吧

09:09.840 --> 09:10.840
有点内向

09:10.840 --> 09:11.840
不好意思说

09:11.840 --> 09:13.840
就有点类似于这个意思

09:13.840 --> 09:14.840
那这样的话

09:14.840 --> 09:16.840
就会产生很多隐藏的问题

09:16.840 --> 09:18.840
也给程序员的错

09:18.840 --> 09:20.840
就是调错带来难度

09:20.840 --> 09:21.840
好 来看一下呗

09:21.840 --> 09:25.220
那比如说我这边

09:25.220 --> 09:27.220
就是删除

09:27.220 --> 09:29.220
删除变量

09:29.220 --> 09:32.980
和这个

09:32.980 --> 09:35.980
和不存在的属性

09:35.980 --> 09:37.980
会爆错

09:37.980 --> 09:38.980
当我这边

09:38.980 --> 09:39.980
我的注释写的

09:39.980 --> 09:41.980
都是开启严格模式后

09:41.980 --> 09:42.980
包括这边

09:42.980 --> 09:43.980
这边是开启严格模式后

09:43.980 --> 09:45.980
会有这样的现象

09:45.980 --> 09:47.980
这边是开启严格模式后

09:47.980 --> 09:48.980
这个会爆错

09:48.980 --> 09:49.980
好 那这样我们这边

09:49.980 --> 09:51.980
我们先不开

09:51.980 --> 09:52.980
不开我们这边

09:52.980 --> 09:55.980
哇一个这个i等于一个10

09:55.980 --> 09:56.980
对吧

09:56.980 --> 09:58.980
然后这样我们这边delete i

09:58.980 --> 09:59.980
这三组变量

09:59.980 --> 10:01.980
然后再哇一个obj

10:01.980 --> 10:03.980
等于一个空

10:03.980 --> 10:04.980
然后接下来

10:04.980 --> 10:07.980
delete obj.name

10:08.980 --> 10:09.980
对吧

10:09.980 --> 10:11.980
好 然后再这边走一个

10:12.980 --> 10:13.980
是没问题啊

10:13.980 --> 10:14.980
对不对

10:14.980 --> 10:15.980
好 那接下来我把这个

10:15.980 --> 10:16.980
严格模式打开

10:16.980 --> 10:17.980
走

10:17.980 --> 10:18.980
看到没有

10:18.980 --> 10:20.980
你是不是这个delete i

10:20.980 --> 10:22.980
这边给你爆错了

10:22.980 --> 10:23.980
这边它是不允许的

10:23.980 --> 10:25.980
c tax error

10:25.980 --> 10:26.980
语法错误

10:26.980 --> 10:28.980
好 那这样我把这个注释掉

10:28.980 --> 10:32.480
那我们再看下面的带码

10:34.480 --> 10:35.480
delete

10:35.480 --> 10:39.880
三组变量

10:39.880 --> 10:41.880
或者不存在的这个属性

10:41.880 --> 10:46.920
delete

10:46.920 --> 10:47.920
我看一下这里

10:47.920 --> 10:51.740
这边的话我们

10:52.740 --> 10:54.740
来到这个mdn

10:54.740 --> 10:56.740
我们把这个mdn打开

10:56.740 --> 10:57.740
mdn这边它有一个这个

10:57.740 --> 10:58.740
严格模式

10:58.740 --> 11:00.740
我们这边我们来看一下

11:00.740 --> 11:02.740
mdn这边

11:02.740 --> 11:04.740
三组属性

11:04.740 --> 11:05.740
属性 这里

11:05.740 --> 11:07.740
在严格模式下

11:07.740 --> 11:10.740
试图删除不可删除的属性

11:11.740 --> 11:12.740
会抛出异常

11:12.740 --> 11:15.740
之前这种操作不会有任何影响

11:15.740 --> 11:17.740
也就是说这边它举了个例子

11:17.740 --> 11:18.740
有object点

11:18.740 --> 11:19.740
portotype

11:19.740 --> 11:21.740
这个是不允许删除的

11:21.740 --> 11:23.740
我们这边我们来试一下

11:24.740 --> 11:26.740
回到我们这边

11:26.740 --> 11:28.740
比如说我们这边删除这个

11:28.740 --> 11:30.740
然后走

11:30.740 --> 11:31.740
还是不是爆错了

11:31.740 --> 11:32.740
对不对

11:32.740 --> 11:34.740
cannotdelete property

11:34.740 --> 11:35.740
portotype

11:35.740 --> 11:38.740
然后我如果把这个注释掉

11:38.740 --> 11:40.740
是没有任何的爆错

11:40.740 --> 11:41.740
对不对

11:41.740 --> 11:43.740
好 那我们把这边的笔记改一下

11:43.740 --> 11:46.740
删除变量或者不允许

11:47.740 --> 11:49.740
不允许

11:49.740 --> 11:52.740
删除的属性

11:52.740 --> 11:55.740
虽然也会失败 但是筋没失败

11:56.740 --> 11:58.740
好 这下面 下一点

11:58.740 --> 12:01.740
函数中相同的这个行参名

12:01.740 --> 12:02.740
会爆错

12:03.740 --> 12:04.740
OK

12:04.740 --> 12:08.250
我们这边我们来看一下

12:08.250 --> 12:10.250
这边是第三个

12:11.250 --> 12:13.250
相同的这个行参名

12:13.250 --> 12:14.250
会爆错

12:14.250 --> 12:15.250
比如我们以前这边

12:15.250 --> 12:16.250
function

12:16.250 --> 12:18.250
然后test

12:18.250 --> 12:20.250
好 这边接收两个

12:20.250 --> 12:22.250
两个参数 两个都叫

12:22.250 --> 12:23.250
看到没有

12:23.250 --> 12:25.250
好 然后接下来这边走

12:25.250 --> 12:26.250
是没有任何问题

12:26.250 --> 12:29.250
好 然后把严格模式打开

12:29.250 --> 12:30.250
走

12:30.250 --> 12:31.250
是爆错了

12:31.250 --> 12:33.250
duplicate parameter name

12:33.250 --> 12:36.250
not unknown in this context

12:36.250 --> 12:38.250
在这个模式下面不允许你什么

12:38.250 --> 12:40.250
duplicate parameter

12:40.250 --> 12:43.250
就是相同的参数

12:43.250 --> 12:44.250
看到没有

12:44.250 --> 12:46.250
这边是这个

12:47.250 --> 12:51.250
然后对象不能有重名的属性

12:51.250 --> 12:52.250
这边

12:52.250 --> 12:54.250
对象不能有重名的属性

12:55.250 --> 12:56.250
所以你看

12:56.250 --> 12:58.250
你可以看到它确实就是什么

12:58.250 --> 12:59.250
更加严格了

12:59.250 --> 13:01.250
对我们的语法要求

13:02.250 --> 13:03.250
更高了

13:03.250 --> 13:04.250
对不对

13:04.250 --> 13:07.250
以前的话你确实就是比较松散

13:08.250 --> 13:09.250
比如我们这边让我们来看一下

13:09.250 --> 13:10.250
比如

13:10.250 --> 13:12.250
挖一个

13:12.250 --> 13:13.250
obj

13:13.250 --> 13:14.250
等于一个

13:14.250 --> 13:15.250
好 两个都是name

13:15.250 --> 13:16.250
name

13:16.250 --> 13:17.250
卸截

13:17.250 --> 13:19.250
再来一个name

13:19.250 --> 13:20.250
然后

13:20.250 --> 13:21.250
张三

13:21.250 --> 13:23.250
现在的话是严格模式

13:23.250 --> 13:24.250
严格模式

13:24.250 --> 13:26.250
然后接下来这边走

13:27.250 --> 13:29.250
看一下是不是这儿写错了

13:32.880 --> 13:33.880
pp

13:33.880 --> 13:34.880
正常模式

13:34.880 --> 13:35.880
多个

13:35.880 --> 13:36.880
后面会覆盖那个字

13:36.880 --> 13:38.880
严格模式下语法错误

13:39.880 --> 13:40.880
那我这边对的呀

13:41.880 --> 13:42.880
看一下

13:43.880 --> 13:44.880
我用它这个呢

13:50.260 --> 13:51.260
严格模式开了的

13:51.260 --> 13:52.260
走

13:52.260 --> 13:53.260
没爆错呀

13:53.260 --> 13:55.260
让我反问一下呢

13:55.260 --> 13:56.260
这边log

13:56.260 --> 13:58.260
o.p

13:58.260 --> 14:01.280
这边它也是个覆盖

14:01.280 --> 14:02.280
是吧

14:02.280 --> 14:04.280
我们看一下这点是不是没有了

14:04.280 --> 14:05.280
我们到这个mdn

14:05.280 --> 14:07.280
我们在这边

14:07.280 --> 14:08.280
我们来找一下

14:09.280 --> 14:11.280
这里写的有了吗

14:12.280 --> 14:13.280
这里写的有

14:14.280 --> 14:15.280
这个问题

14:16.280 --> 14:17.280
我看一下

14:17.280 --> 14:18.280
第四

14:18.280 --> 14:19.280
在这个34

14:20.280 --> 14:22.280
它要求对象所有属性名

14:23.280 --> 14:24.280
必须是唯一的

14:24.280 --> 14:25.280
正常模式下

14:25.280 --> 14:27.280
从名属性允许

14:27.280 --> 14:28.280
最后一个从名

14:28.280 --> 14:29.280
决定属性值

14:31.280 --> 14:33.280
在严格模式下

14:33.280 --> 14:34.280
从名属性

14:34.280 --> 14:35.280
被认为是

14:35.280 --> 14:36.280
语法错误

14:37.280 --> 14:39.280
这个问题在es6

14:39.280 --> 14:40.280
已不复存在

14:40.280 --> 14:42.280
这边报了一个bug

14:42.280 --> 14:43.280
OK

14:43.280 --> 14:45.280
那这个就不管它吧

14:45.280 --> 14:47.280
这边mdn这边都写了

14:47.280 --> 14:48.280
写了结果它又

14:48.280 --> 14:51.280
这边好像有存在一个bug

14:51.280 --> 14:52.280
那行

14:52.280 --> 14:53.280
那这个就不管它

14:53.280 --> 14:55.280
好那接下来我们下一个

14:56.280 --> 14:58.280
镜子这个8镜子

14:58.280 --> 14:59.280
表示法

14:59.280 --> 15:00.280
就我们8镜子的话

15:00.280 --> 15:02.280
以前是可以通过0来表示的

15:02.280 --> 15:04.280
比方我给大家举个例子

15:05.280 --> 15:06.280
这个就不管它

15:09.100 --> 15:12.100
这个根据它那个mdn

15:12.100 --> 15:17.100
根据mdn的说法

15:17.100 --> 15:19.100
es6

15:19.100 --> 15:21.100
已经不存在

15:21.100 --> 15:22.100
实问题

15:23.100 --> 15:25.100
然后有一个

15:25.100 --> 15:29.610
这个bug的提案

15:29.610 --> 15:31.610
有一个bug的提案

15:31.610 --> 15:33.610
好这个就不管它

15:33.610 --> 15:37.110
好然后接下来我们来看下一点

15:37.110 --> 15:38.110
第5点

15:38.110 --> 15:40.110
第5点刚才是

15:41.110 --> 15:42.110
8镜子是吧

15:42.110 --> 15:43.110
8镜子

15:43.110 --> 15:46.870
就以前

15:46.870 --> 15:48.870
以前可以使用什么呢

15:48.870 --> 15:50.870
使用0

15:50.870 --> 15:53.870
作为8镜子的

15:53.870 --> 15:55.870
前綴

15:55.870 --> 15:57.870
比方我们这边举个例子

15:57.870 --> 15:58.870
这个先注释掉

15:58.870 --> 16:00.870
比方我这边的话

16:00.870 --> 16:02.870
哇一个这个i

16:02.870 --> 16:03.870
等于一个什么呢

16:03.870 --> 16:05.870
等于一个010

16:05.870 --> 16:06.870
010

16:06.870 --> 16:07.870
那这个是什么呢

16:07.870 --> 16:09.870
这个的话就是一个8镜子

16:09.870 --> 16:10.870
那我这边的话我打印一下

16:10.870 --> 16:12.870
log这个i

16:12.870 --> 16:13.870
你看它这边实际

16:13.870 --> 16:15.870
实际的值是多少

16:15.870 --> 16:16.870
是不是8

16:16.870 --> 16:17.870
对不对

16:17.870 --> 16:18.870
但是后面的话

16:18.870 --> 16:19.870
这个0

16:19.870 --> 16:21.870
这个0它建议就是不要使用0

16:21.870 --> 16:22.870
作为前綴

16:22.870 --> 16:23.870
使用什么呢

16:23.870 --> 16:25.870
使用那个我记得是o

16:25.870 --> 16:27.870
我记得是o

16:27.870 --> 16:28.870
是这个

16:28.870 --> 16:29.870
我们来看一下

16:29.870 --> 16:31.870
哦不对

16:31.870 --> 16:33.870
这是啥来着呢

16:33.870 --> 16:34.870
我看一下

16:34.870 --> 16:38.440
8镜子的那个

16:38.440 --> 16:39.440
前綴

16:39.440 --> 16:40.440
我找一下

16:40.440 --> 16:41.440
就现在的话

16:41.440 --> 16:42.440
它换了

16:42.440 --> 16:45.070
我看一下

16:45.070 --> 16:47.070
这边的话

16:47.070 --> 16:49.070
基础与法

16:49.070 --> 16:52.070
然后数值

16:52.070 --> 16:54.070
数值类型

16:54.070 --> 16:56.070
镜子

16:56.070 --> 16:58.070
精度

16:58.070 --> 16:59.070
范围

16:59.070 --> 17:00.070
表示方法

17:00.070 --> 17:01.070
镜子

17:01.070 --> 17:02.070
现在使用这个

17:02.070 --> 17:04.070
0o

17:04.070 --> 17:05.070
看不看

17:05.070 --> 17:06.070
使用0o来表示

17:06.070 --> 17:07.070
就不要光使用一个0了

17:07.070 --> 17:09.070
这边那使用什么呢

17:09.070 --> 17:10.070
0o

17:10.070 --> 17:12.070
这样子来做前綴

17:12.070 --> 17:13.070
走

17:13.070 --> 17:14.070
是吧

17:14.070 --> 17:15.070
认识吧

17:15.070 --> 17:16.070
对不对

17:16.070 --> 17:18.070
好了你如果使用这个0的话

17:18.070 --> 17:19.070
它在严格模式下面

17:19.070 --> 17:20.070
它就会多错

17:20.070 --> 17:21.070
那我们这边

17:21.070 --> 17:23.510
我们来看一下

17:23.510 --> 17:24.510
走

17:24.510 --> 17:25.510
看到没有

17:25.510 --> 17:26.510
这边是吧

17:26.510 --> 17:28.510
not unknown

17:28.510 --> 17:30.510
in this greater mode

17:30.510 --> 17:32.510
是不允许

17:32.510 --> 17:33.510
就是不被允许的

17:33.510 --> 17:35.510
在严格模式下面

17:35.510 --> 17:36.510
看到没有

17:36.510 --> 17:40.140
这个是这个

17:40.140 --> 17:41.140
好

17:41.140 --> 17:43.140
函数内部的Z值

17:43.140 --> 17:45.140
为undefine

17:45.140 --> 17:47.140
我们知道在普通模式下

17:47.140 --> 17:48.140
比如这样子

17:48.140 --> 17:50.140
Z是指向什么

17:50.140 --> 17:52.140
是指向全局对象

17:52.140 --> 17:53.140
你如果是浏览器

17:53.140 --> 17:54.140
环境就是window

17:54.140 --> 17:55.140
如果是漏的环境

17:55.140 --> 17:57.140
它就是Global对象

17:57.140 --> 18:01.350
我们这边来看一下

18:01.350 --> 18:02.350
这边

18:02.350 --> 18:05.790
有第六个

18:05.790 --> 18:07.790
函数中的Z

18:07.790 --> 18:11.360
Z为什么呢

18:11.360 --> 18:13.360
undefine

18:13.360 --> 18:15.360
比如说

18:15.360 --> 18:17.360
这边function

18:17.360 --> 18:19.360
function test

18:19.360 --> 18:21.360
然后这样

18:21.360 --> 18:23.360
我们这边直接log

18:23.360 --> 18:24.360
this

18:24.360 --> 18:26.360
那调用一下吧

18:26.360 --> 18:27.360
调用一下

18:27.360 --> 18:28.360
好

18:28.360 --> 18:30.360
把这个先注射掉

18:30.360 --> 18:31.360
注射掉之后

18:31.360 --> 18:33.360
我们都知道这个是指向什么

18:33.360 --> 18:34.360
是全局对象

18:34.360 --> 18:35.360
对不对

18:35.360 --> 18:37.360
走

18:37.360 --> 18:38.360
看到没有

18:38.360 --> 18:40.360
是Global对象

18:40.360 --> 18:41.360
是不是

18:41.360 --> 18:42.360
但你如果你把这个

18:42.360 --> 18:43.360
严格模式

18:43.360 --> 18:44.360
打开

18:44.360 --> 18:45.360
这边就是什么呢

18:45.360 --> 18:47.360
它这边就是undefine

18:47.360 --> 18:49.360
undefine

18:49.360 --> 18:50.360
OK

18:50.360 --> 18:54.360
这是Z的区别

18:54.360 --> 18:56.360
然后

18:56.360 --> 18:57.360
下一个

18:57.360 --> 19:00.360
下一个就是evo

19:00.360 --> 19:02.360
evo倒是单独

19:02.360 --> 19:04.360
就是来捷克来讲

19:04.360 --> 19:05.360
evo

19:05.360 --> 19:06.360
正常模式下面的话

19:06.360 --> 19:08.360
我们JS的语言

19:08.360 --> 19:10.360
有两种变量作用率

19:10.360 --> 19:12.360
全局和函数

19:12.360 --> 19:14.360
严格模式下创建了什么呢

19:14.360 --> 19:16.360
创建了evo

19:16.360 --> 19:19.360
正常模式下evo语句的作用率

19:19.360 --> 19:21.360
取决于它处于全局作用率

19:21.360 --> 19:23.360
还是函数作用率

19:23.360 --> 19:25.360
但是严格模式下evo语句

19:25.360 --> 19:27.360
本身就是一个作用率

19:27.360 --> 19:30.360
不能再生成全局变量了

19:30.360 --> 19:31.360
它所生成的变量

19:31.360 --> 19:32.360
只能用在什么呢

19:32.360 --> 19:34.360
只能用在evo内部

19:34.360 --> 19:36.360
也就是我这个evo的话

19:36.360 --> 19:38.360
它自己有个作用率

19:38.360 --> 19:39.360
让我生命的变量就

19:39.360 --> 19:41.360
全部在我这个evo作用率里面

19:41.360 --> 19:43.360
比我们这边来看一下这段代码

19:43.360 --> 19:47.310
比如说我们这边的话

19:47.310 --> 19:49.310
先把严格模式

19:49.310 --> 19:51.310
先把严格模式先注释掉

19:51.310 --> 19:54.880
这边第七个

19:54.880 --> 19:56.880
evo作用率

19:56.880 --> 20:02.880
比如说这里

20:02.880 --> 20:03.880
这里的话我现在是

20:03.880 --> 20:05.880
没有开启严格模式

20:05.880 --> 20:07.880
这边没有开启严格模式

20:07.880 --> 20:08.880
没有开启严格模式

20:08.880 --> 20:09.880
然后接下来这边的话

20:09.880 --> 20:10.880
挖了一个x

20:10.880 --> 20:11.880
再加这边是不是evo

20:11.880 --> 20:12.880
evo然后接下来

20:12.880 --> 20:13.880
这边是不是生命的一个

20:13.880 --> 20:15.880
挖x等于5

20:15.880 --> 20:16.880
对不对

20:16.880 --> 20:17.880
那它这里

20:17.880 --> 20:18.880
就没有自己的作用率

20:18.880 --> 20:19.880
那这个的话

20:19.880 --> 20:20.880
它就会生命在哪里呢

20:20.880 --> 20:22.880
生命在全局

20:22.880 --> 20:23.880
生命在全局

20:23.880 --> 20:24.880
大家我这边

20:24.880 --> 20:25.880
让我打印这个x

20:25.880 --> 20:26.880
打印出我

20:26.880 --> 20:27.880
大家这里的话

20:27.880 --> 20:28.880
打印出也是什么呢

20:28.880 --> 20:29.880
也是5

20:29.880 --> 20:30.880
为什么

20:30.880 --> 20:31.880
因为它会影响到

20:31.880 --> 20:33.880
全局作用率的x

20:33.880 --> 20:34.880
好这边走

20:34.880 --> 20:35.880
看到没有

20:35.880 --> 20:36.880
是不是两个都是5

20:36.880 --> 20:38.880
但是我开启严格模式

20:38.880 --> 20:39.880
就不一样了

20:39.880 --> 20:41.880
当我开启严格模式之后

20:41.880 --> 20:43.880
我的这个evo的话

20:43.880 --> 20:45.880
它会有一个自己的作用率

20:45.880 --> 20:47.880
说我这边我生命的一个x

20:47.880 --> 20:48.880
等于一个5

20:48.880 --> 20:50.880
这个5

20:50.880 --> 20:52.880
和这个x

20:52.880 --> 20:55.880
和这个x是互不影响的

20:55.880 --> 20:57.880
因为它们作用率不一样吗

20:57.880 --> 20:59.880
就好比你一个韩束作用率里面的x

20:59.880 --> 21:00.880
和全局作用率的x

21:00.880 --> 21:02.880
是不是两个是不影响的

21:02.880 --> 21:03.880
对不对

21:03.880 --> 21:04.880
说这个打印出5

21:04.880 --> 21:06.880
那这个x取哪个呢

21:06.880 --> 21:07.880
取这个

21:07.880 --> 21:10.880
所以还是打印出2

21:10.880 --> 21:11.880
我们这边我们来看一下

21:11.880 --> 21:12.880
走

21:12.880 --> 21:14.880
是不是5和2

21:14.880 --> 21:15.880
对不对

21:15.880 --> 21:16.880
你看这边

21:16.880 --> 21:17.880
关于这个evo

21:17.880 --> 21:18.880
它也有区别

21:18.880 --> 21:21.880
这个其实就是我们刚才说到的

21:21.880 --> 21:23.880
在这边

21:23.880 --> 21:24.880
说说到的

21:24.880 --> 21:25.880
在严格模式下

21:25.880 --> 21:27.880
同样的代码可能会有

21:27.880 --> 21:29.880
是不一样的运行结果

21:29.880 --> 21:30.880
你看这边是不是

21:30.880 --> 21:31.880
对吧

21:34.880 --> 21:35.880
然后最后一个

21:35.880 --> 21:37.880
最后一个就是保留字

21:37.880 --> 21:39.880
为了向将来揭示新版本过渡

21:39.880 --> 21:42.880
严格模式新增了一些保留字

21:42.880 --> 21:44.880
比如说这些保留字

21:44.880 --> 21:45.880
这些词将

21:45.880 --> 21:46.880
如果作为辨量名的话

21:46.880 --> 21:47.880
将会爆错

21:47.880 --> 21:48.880
比如说我们这边

21:48.880 --> 21:54.110
挖一个public

21:55.110 --> 21:56.110
就是

21:57.110 --> 21:58.110
第八个

21:58.110 --> 22:00.110
不能使用

22:00.110 --> 22:02.110
不能使用保留字

22:04.110 --> 22:05.110
作为

22:05.110 --> 22:06.110
是标识佛

22:08.110 --> 22:09.110
对吧

22:09.110 --> 22:10.110
比如说我们这边

22:10.110 --> 22:11.110
挖一个public

22:11.110 --> 22:12.110
等于一个

22:12.110 --> 22:13.110
hollow word

22:13.110 --> 22:14.110
那在这个

22:14.110 --> 22:16.110
非严格模式下面

22:16.110 --> 22:18.110
那这个就是ok的

22:18.110 --> 22:20.110
对吧我这边可以使用

22:20.110 --> 22:22.110
比如log

22:22.110 --> 22:24.110
logpublic

22:24.110 --> 22:26.110
然后在这边走

22:26.110 --> 22:28.110
是ok

22:28.110 --> 22:29.110
但是我这边

22:29.110 --> 22:32.110
我一旦把这个严格模式一打开

22:32.110 --> 22:33.110
打开之后

22:33.110 --> 22:34.110
然后在这边走

22:34.110 --> 22:35.110
是爆错了

22:35.110 --> 22:36.110
看到没有

22:36.110 --> 22:37.110
在严格模式中

22:37.110 --> 22:39.110
这边不能使用这个

22:39.110 --> 22:41.110
它爆的是语法错误

22:41.110 --> 22:43.110
这是这个第八点

22:44.110 --> 22:45.110
好

22:45.110 --> 22:47.110
然后其他的话

22:47.110 --> 22:49.110
这边我没有全部列举完

22:49.110 --> 22:51.110
我就没有就是相机流水帐一样

22:51.110 --> 22:53.110
挨载着全部把它列举出来

22:53.110 --> 22:56.110
我列举了几个比较就是明显的区别

22:56.110 --> 22:59.110
你如果要就是看更多的区别的话

22:59.110 --> 23:01.110
你可以参与就是这个

23:01.110 --> 23:02.110
mdn

23:02.110 --> 23:03.110
首先就是这个mdn

23:03.110 --> 23:05.110
我们刚才是不是也在mdn上面

23:05.110 --> 23:07.110
是不是找到这个

23:07.110 --> 23:08.110
对吧

23:08.110 --> 23:10.110
这边删除不可删除的属性以及

23:10.110 --> 23:11.110
这个

23:11.110 --> 23:13.110
然后这边的话

23:13.110 --> 23:14.110
就是mdn里面

23:14.110 --> 23:17.110
会对这个严格模式有更多的这个介绍

23:17.110 --> 23:19.110
你可以把它看一下

23:19.110 --> 23:20.110
还有一个是什么呢

23:20.110 --> 23:22.110
还有一个就是这个软衣风老师的

23:22.110 --> 23:24.110
他的这个写了一篇这个博客

23:26.110 --> 23:28.110
就这个比较早了

23:28.110 --> 23:29.110
都快10年了

23:29.110 --> 23:31.110
是不是快10年了

23:31.110 --> 23:32.110
对吧

23:32.110 --> 23:34.110
这边这个严格模式

23:34.110 --> 23:36.110
可以把这个软衣风老师的这个

23:36.110 --> 23:37.110
也可以看一下

23:37.110 --> 23:39.110
ok

23:39.110 --> 23:40.110
好

23:40.110 --> 23:42.110
然后其他的话

23:42.110 --> 23:45.110
UseStrike是什么意思

23:45.110 --> 23:48.110
使用它区别是什么

23:48.110 --> 23:50.110
那你现在回答这个问题是不是很简单了

23:50.110 --> 23:52.110
UseStrike是什么

23:52.110 --> 23:54.110
代表开启严格模式

23:54.110 --> 23:56.110
使用它的区别是什么

23:56.110 --> 23:59.110
区别的话是不是就这四点

23:59.110 --> 24:00.110
你把这四点

24:00.110 --> 24:02.110
是不是打出来就可以

24:02.110 --> 24:03.110
对不对

24:03.110 --> 24:04.110
就是设立它的目的

24:04.110 --> 24:05.110
主要就是

24:05.110 --> 24:06.110
等一下

24:06.110 --> 24:07.110
区别

24:07.110 --> 24:10.110
这边的话区别

24:11.110 --> 24:13.110
这里是打的是U点

24:13.110 --> 24:14.110
U点

24:14.110 --> 24:15.110
然后你下面的话

24:15.110 --> 24:20.410
就可以打一些具体的区别

24:20.410 --> 24:23.410
我这个还没办法

24:23.410 --> 24:25.410
这边是U点

24:27.410 --> 24:28.410
区别

24:28.410 --> 24:31.410
然后你就可以回答

24:31.410 --> 24:34.410
回答一些具体的

24:34.410 --> 24:36.410
严格模式下

24:36.410 --> 24:42.410
和普通模式之间的区别

24:42.410 --> 24:44.410
那刚才是不是就是这里

24:44.410 --> 24:45.410
对不对

24:45.410 --> 24:47.410
这一点你就总结一下

24:47.410 --> 24:49.410
我这边就不挨在这总结了

24:49.410 --> 24:52.410
你自己总结

24:52.410 --> 24:55.410
这是关于这个严格模式

24:55.410 --> 24:56.410
大家下来的话

24:56.410 --> 24:58.410
自己把它看一下

24:58.410 --> 24:59.410
这些课就先到这里

24:59.410 --> 25:00.410
再见

