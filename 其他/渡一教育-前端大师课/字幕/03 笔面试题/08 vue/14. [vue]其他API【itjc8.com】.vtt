WEBVTT

00:01.390 --> 00:06.770
除了咱们前面学习的东西 伍佑里边还有一些额外的API

00:07.030 --> 00:09.830
这些API大家就放松心情

00:10.350 --> 00:15.470
看一看过一过就ok了 平时我估计99%的情况里面都遇不到的

00:15.730 --> 00:18.290
看一下吧 咱们快速的过一下

00:18.550 --> 00:22.130
找到这个伍佑的官方网站 我们进入他的API列表

00:23.410 --> 00:28.010
首先我们看到他这里边伍佑的文档实际上是写得非常好的

00:28.610 --> 00:32.610
他的API里边是分门别类的给你罗列出来了 一个是全局配置

00:32.870 --> 00:37.730
全局配置就是告诉你的 是伍佑里边有一个config 这么一个对象

00:37.990 --> 00:40.550
对象里面有很多的配置 这些都是他的配置

00:40.810 --> 00:43.110
好 咱们随便看一下吧

00:43.630 --> 00:44.910
一个是silent

00:45.410 --> 00:45.930
啥意思呢

00:46.450 --> 00:46.950
安静

00:47.470 --> 00:48.750
单词是安静的意思

00:49.010 --> 00:51.310
他的默认只能是force 就不安静

00:51.570 --> 00:54.630
不安静会怎么样呢 他会在控制台里边给打印一些

00:55.090 --> 00:56.630
日字啊 警告啊

00:56.890 --> 00:58.410
像有的时候我们在

00:58.670 --> 01:00.970
写一个伍佑组件的时候不是有些属性吗

01:01.230 --> 01:03.550
有些属性我们是可能会给他一些约束

01:03.810 --> 01:05.850
比方说这个属性是一个number的一型

01:06.610 --> 01:07.890
但是你一个要传一个stream

01:08.150 --> 01:10.970
那么就会受到一个警告 对吧 就是这么一些警告的东西

01:12.250 --> 01:15.570
他默认的是会打印出来的 如果说你把他设为去了过后

01:15.830 --> 01:16.590
他就不会打印了

01:16.850 --> 01:18.390
就这么简单 看一下吧

01:19.670 --> 01:22.230
然后呢 还有一个就是optimal.js

01:23.230 --> 01:24.490
这是叫做什么

01:24.750 --> 01:27.290
叫做配置混合策略

01:27.550 --> 01:28.330
这啥意思啊

01:28.590 --> 01:31.910
就是在咱们伍佑里边呢 有可能会用到一些混合

01:32.170 --> 01:33.450
你看像这种

01:33.690 --> 01:35.490
比方说我们的伍佑组件就combo

01:35.750 --> 01:37.030
它里边混合了别的配置

01:37.290 --> 01:39.330
config1,config2

01:39.590 --> 01:40.610
可能混合了一些别的配置

01:40.870 --> 01:43.930
那么在混合的时候呢 如果说遇到了两个混合一样的

01:44.190 --> 01:44.970
啥意思啊

01:45.230 --> 01:47.270
就比方说这两个里边

01:48.250 --> 01:49.810
比方说他和他

01:50.050 --> 01:51.730
都有一个配置叫created

01:51.990 --> 01:52.850
假设啊

01:53.110 --> 01:54.390
都有一个配置叫created

01:54.650 --> 01:56.190
那么到底用哪一个呢

01:56.450 --> 01:58.490
用我自己组件的呢 还是用他的呢

01:59.250 --> 02:02.330
这里边呢 伍佑他有一些默认的策略

02:02.590 --> 02:04.370
这个默认的策略可以参见这里

02:04.630 --> 02:06.670
制定一选项的混入策略

02:06.930 --> 02:07.970
这是他默认的情况

02:08.210 --> 02:11.550
像这对这种生命周期勾字喊出了他的策略是

02:11.810 --> 02:12.570
两个都用

02:13.330 --> 02:15.130
你说你这个也会运行

02:15.390 --> 02:16.670
里边的created也会运行

02:16.890 --> 02:18.930
我们组件里边的created也会运行

02:19.690 --> 02:21.730
但是呢 这种情况的历史可以修改的

02:21.990 --> 02:22.630
怎么修改呢

02:22.890 --> 02:24.970
其实非常简单啊 你就可以用他这个东西

02:25.330 --> 02:25.970
叫做

02:26.450 --> 02:28.130
混合策略

02:28.410 --> 02:29.130
你可以改他

02:29.370 --> 02:30.650
比方说我们随便改一改吧

02:30.890 --> 02:32.250
这些东西都无所谓了 因为

02:34.530 --> 02:35.730
平时也不这么会去改他

02:36.330 --> 02:38.130
比方说我们这里呢 有一个配置啊

02:38.390 --> 02:39.610
我这里就不写模块了

02:39.850 --> 02:40.570
就直接写到这了

02:40.830 --> 02:42.490
有一个配置比方说这里边有个created

02:42.730 --> 02:43.770
我们这里输出一下

02:44.530 --> 02:45.290
config

02:46.890 --> 02:47.390
created

02:48.150 --> 02:49.170
有这么一个东西

02:49.410 --> 02:51.490
然后呢 我在组件里边上去混合一下

02:51.730 --> 02:52.250
mixins

02:52.770 --> 02:54.050
config

02:54.290 --> 02:57.130
那么这两个难 我们这个created呢 肯定会运行

02:57.370 --> 02:59.170
然后我们组件里边上也有一个created

03:02.200 --> 03:04.040
我们这里输出一下

03:05.800 --> 03:07.840
好了 那么现在我们说两个都有created

03:08.080 --> 03:09.120
那么都要运行的

03:09.360 --> 03:10.400
我们来看一下吧

03:11.920 --> 03:14.480
这里我们看一看啊 这里边是不是两个都运行的

03:15.160 --> 03:17.560
那如果说我这边我不希望

03:18.140 --> 03:19.460
我不希望我的组件

03:19.740 --> 03:21.340
里边在混入的时候啊

03:21.580 --> 03:23.900
像这种created这种神秘周期勾字函数

03:24.140 --> 03:25.460
我希望他只运行

03:25.740 --> 03:27.980
一个 比方说就运行我们组件里边写的

03:28.060 --> 03:28.940
不运行别的

03:29.180 --> 03:30.580
那怎么办呢 我们就可以

03:31.020 --> 03:32.060
使用这种方式啊

03:32.140 --> 03:34.140
来去改写他的混合策略

03:34.500 --> 03:35.420
比方说我们这里的

03:37.340 --> 03:38.340
复制过来 考备过来

03:38.940 --> 03:40.140
这是一个全局配置啊

03:40.180 --> 03:42.580
他会影响所有的组件啊 大家注意

03:43.140 --> 03:43.980
好 我们这边呢

03:44.140 --> 03:47.100
一个写上啊 我们在混合这个created的时候呢

03:47.200 --> 03:50.400
你按照这个函数定义的方式来进行混合

03:50.960 --> 03:52.600
他会给你传这么一些东西啊

03:52.640 --> 03:53.920
第三个函数实际上我们用不到的

03:54.600 --> 03:55.440
给你传两个东西

03:55.480 --> 03:56.280
一个是呢

03:57.960 --> 03:58.840
你的配置

03:59.640 --> 04:00.600
配置里边的匪备的

04:00.640 --> 04:02.120
就这个函数他会给你传进来

04:02.920 --> 04:03.960
我们把分割一下

04:05.240 --> 04:06.760
也就是他这边呢 他会这样子

04:10.480 --> 04:11.360
他会把这个

04:12.200 --> 04:13.680
给你传到这儿来

04:15.400 --> 04:18.240
然后呢 把这个你自己组件的呢

04:18.980 --> 04:19.620
传到这儿来

04:21.100 --> 04:22.540
你玩意儿的意思吧 就这么个意思啊

04:22.900 --> 04:23.460
所以说你

04:23.580 --> 04:25.100
然后这两个函数看你用哪一个

04:25.140 --> 04:25.980
你返回就完事了

04:26.380 --> 04:28.100
实际上这里返回来 他有个要求啊

04:28.140 --> 04:29.460
我这里就说一些细节

04:29.780 --> 04:31.140
像那种生命中基于勾字函数呢

04:31.180 --> 04:32.540
他要求你返回一个数组

04:32.820 --> 04:33.860
这个数组里边的函数呢

04:33.900 --> 04:35.100
他会依次运行

04:35.700 --> 04:37.540
好 比方说我这里该怎么来写呢

04:37.580 --> 04:38.500
这可以这样子写啊

04:38.780 --> 04:40.060
因为这是一个全局的

04:40.100 --> 04:41.460
你要考虑到有些组件

04:41.740 --> 04:42.740
他并没有混合

04:42.860 --> 04:43.380
并没有混合

04:43.420 --> 04:44.820
他就是这个就是NG犯的

04:45.340 --> 04:47.260
有些组件他自己没有写这个created

04:47.320 --> 04:48.520
那么这个就是NG犯的

04:48.880 --> 04:49.920
所以说呢 我这里呢

04:50.160 --> 04:52.240
你们这里呢 应该去判断一下啊

04:52.480 --> 04:54.360
如果说你没有这个parent

04:54.520 --> 04:57.000
那我就return now

04:58.120 --> 04:59.320
return child

04:59.480 --> 05:00.440
那我就返回自己的

05:00.680 --> 05:02.440
如果说你也没有自己的呢

05:04.120 --> 05:04.920
就是有他

05:05.200 --> 05:06.480
有他 但是没有他

05:06.520 --> 05:07.560
那我就返回parent

05:08.000 --> 05:09.480
你自己控制一下就完事了

05:09.760 --> 05:11.240
如果说两个都有的话

05:11.480 --> 05:12.920
默认情况是怎么样呢

05:12.960 --> 05:14.520
默认情况是这样子的

05:15.500 --> 05:17.340
他两个都会运行

05:17.380 --> 05:18.260
我们看一下吧

05:18.300 --> 05:18.860
保存

05:20.060 --> 05:21.660
默认情况是不是两个都会运行

05:21.860 --> 05:23.540
那如果说你只希望运行一个

05:23.580 --> 05:25.340
两个都有的时候只运行自己的

05:25.380 --> 05:26.700
那么你就返回一个

05:27.380 --> 05:28.420
好 保存你看一下

05:28.500 --> 05:29.780
刷新是不是只运行到自己

05:29.820 --> 05:31.220
对吧 这个东西是可以控制的

05:31.260 --> 05:32.140
就这么个意思

05:32.700 --> 05:34.100
好 这里说一下就完事了

05:35.060 --> 05:36.820
下面这个配置呢

05:36.860 --> 05:37.780
是一个布尔值

05:37.820 --> 05:38.860
表示了什么意思呢

05:38.900 --> 05:40.020
他默认是开启的啊

05:40.820 --> 05:42.140
生产版的就是打包过后

05:42.140 --> 05:43.340
他默认变成force

05:43.560 --> 05:44.240
这什么意思呢

05:44.240 --> 05:46.080
他个玩意就是控制这个玩意的

05:46.560 --> 05:47.120
就这个东西

05:47.680 --> 05:49.000
就是DevTools

05:49.680 --> 05:51.080
5U不是有些调制工具吗

05:51.080 --> 05:51.400
对吧

05:51.440 --> 05:52.760
我们在开发的时候

05:52.760 --> 05:53.760
一般会把它开启

05:54.080 --> 05:54.880
其实也不用管它

05:54.880 --> 05:55.760
默认就是开启的

05:56.920 --> 05:58.920
然后就下边这个ErrorHandable

05:59.640 --> 06:00.840
这是做错误处理的

06:01.920 --> 06:02.920
就5U里边呢

06:04.000 --> 06:05.360
在运行的过程中啊

06:05.760 --> 06:07.440
凡是发生了所有的错误呢

06:07.440 --> 06:08.960
它都会运行这个勾字函数

06:09.240 --> 06:10.640
那么在你这里边呢

06:10.640 --> 06:11.960
你可能会去做一些事

06:12.140 --> 06:13.820
比方说把错误对象传进来

06:13.820 --> 06:16.100
哪个组件出了错误

06:16.500 --> 06:18.580
那么这里边还有一些特定的错误信息

06:18.580 --> 06:20.220
你可以在这个函数里边去输出

06:20.220 --> 06:20.820
看一下

06:20.980 --> 06:21.900
就非常简单啊

06:21.900 --> 06:23.540
那这里边如果说你要用它的话

06:23.540 --> 06:25.140
一般来说我们可以用它

06:25.380 --> 06:26.540
像服务器

06:26.860 --> 06:27.900
利用一个API

06:27.900 --> 06:29.420
像服务器呢发送一个错误啊

06:29.420 --> 06:31.460
比方说我这个客户端遇到个错误了

06:31.460 --> 06:32.820
服务器那边做个日子记录

06:32.820 --> 06:33.660
记录一下

06:33.980 --> 06:35.540
将来呢可以去看一下

06:35.540 --> 06:36.260
咱们

06:37.140 --> 06:39.020
这些用户在用我们的网站的时候

06:39.020 --> 06:40.260
他那边发生了什么错误

06:40.320 --> 06:42.080
对吧要把发送到服务器

06:42.080 --> 06:43.360
就其中一个错误

06:44.480 --> 06:46.160
那么下面这个WarmHandler

06:46.160 --> 06:47.160
就是一些警告

06:47.160 --> 06:48.120
警告信息

06:48.120 --> 06:49.120
刚刚上面是错误嘛

06:49.120 --> 06:49.960
下面是警告

06:49.960 --> 06:51.440
警告信息呢也可以

06:51.440 --> 06:53.760
用类似的方式发送到服务器

06:54.560 --> 06:57.120
好下面这个EglotElement

06:57.600 --> 06:58.120
表示什么意思呢

06:58.120 --> 07:01.440
表示忽略到忽略一些元素

07:01.560 --> 07:02.240
就是5U呢

07:02.240 --> 07:04.400
它里边它其实定义了很多元素

07:04.400 --> 07:05.200
比方说像

07:05.360 --> 07:06.840
像什么DIV啊

07:06.840 --> 07:07.880
像什么SPAN啊

07:07.880 --> 07:08.680
像什么A啊

07:08.680 --> 07:11.700
像什么那个H1、H2、H3等等

07:11.700 --> 07:13.020
它定义了很多元素

07:13.020 --> 07:13.700
这些元素

07:13.700 --> 07:15.900
它默认就会把它当成ATM元素

07:16.700 --> 07:18.300
它不会把它当成组件

07:19.380 --> 07:21.820
但是如果说你不在这些元素列表之列的

07:21.820 --> 07:23.340
比方说你自己写的一个东西

07:23.340 --> 07:24.540
叫做

07:26.380 --> 07:27.380
MyL

07:27.820 --> 07:29.740
比方说你自己写了这么一个东西

07:29.980 --> 07:31.100
那么这个东西呢

07:31.100 --> 07:31.740
5U呢

07:31.740 --> 07:33.500
它发现它不在这个列表里边

07:33.500 --> 07:36.100
因此它会把它当成一个组件来处理

07:36.100 --> 07:37.540
它就会去找这个组件

07:37.600 --> 07:39.440
如果说它在发现这个组件没有注册

07:39.440 --> 07:39.920
找不到

07:39.920 --> 07:41.720
它就会给你报一个错误信息

07:42.040 --> 07:43.040
就是这么个意思

07:43.480 --> 07:44.320
那么这个一个Lore

07:44.320 --> 07:45.600
一个Element什么意思呢

07:45.600 --> 07:46.800
其实非常简单

07:46.800 --> 07:50.800
意思就是把这个玩意添加到这个列表里面

07:51.880 --> 07:52.600
你看啊

07:52.600 --> 07:53.880
它告诉你可以这样子写

07:53.880 --> 07:54.880
给它一个数组

07:55.120 --> 07:56.600
或者是给它一个挣折表拿式

07:56.600 --> 07:57.320
都可以

07:57.320 --> 08:00.360
它会把满足这个条件的东西呢

08:00.360 --> 08:01.680
就加入到列表里面

08:01.680 --> 08:02.240
将来呢

08:02.240 --> 08:04.800
如果说你在模板里面使用它的时候

08:04.800 --> 08:05.560
它发现

08:07.630 --> 08:08.790
它并不是一个组件

08:09.070 --> 08:10.790
而且它在那个列表里边

08:10.790 --> 08:12.070
因此它不会报错

08:12.070 --> 08:12.950
它就会

08:12.950 --> 08:14.550
它渲染出来的就是这个东西

08:14.550 --> 08:16.150
就会渲染这个东西出来

08:16.150 --> 08:18.710
因为我们扭烂器本身就是支持

08:18.710 --> 08:19.910
自定义标签

08:19.910 --> 08:21.950
所以它就会一个自定义标签的形式

08:21.950 --> 08:23.190
给你渲染出来

08:23.190 --> 08:24.070
就这么一个意思啊

08:25.550 --> 08:27.470
然后下面这个key code

08:27.470 --> 08:29.470
表示我们的键盘吧

08:29.470 --> 08:30.070
这个什么意思呢

08:30.070 --> 08:30.990
就是说5U里边

08:30.990 --> 08:33.430
它不是有一个键盘事件吗

08:33.430 --> 08:33.990
一个指令

08:33.990 --> 08:35.230
在模板里边有一个指令

08:35.230 --> 08:36.750
叫键盘事件

08:36.770 --> 08:37.530
比方说我们这里呢

08:37.530 --> 08:38.850
给他给个DIV

08:41.670 --> 08:43.750
给他注册一个键盘

08:43.750 --> 08:45.310
按键事件

08:45.310 --> 08:47.270
我们可以这样注册key到

08:47.990 --> 08:48.510
键盘按一下

08:48.510 --> 08:49.990
我们可以有些修饰服

08:50.630 --> 08:51.270
什么修饰服呢

08:51.270 --> 08:52.870
比方说我们可以按Enter

08:52.870 --> 08:53.830
对不对

08:53.830 --> 08:55.870
只有当毁车键按下的时候

08:55.870 --> 08:57.710
它会运行里边的喊输

08:57.710 --> 08:58.070
对不对

08:58.070 --> 08:58.790
就这么个意思

08:59.590 --> 09:01.230
那么这个东西能不能自定义呢

09:01.230 --> 09:03.110
它就可以通过这个配置来自定义

09:03.110 --> 09:03.670
key code

09:04.510 --> 09:06.590
比方说我们这里给它加上一个V

09:07.550 --> 09:08.270
86

09:08.370 --> 09:09.890
那么这里就可以写V了

09:09.890 --> 09:12.330
那么就是当键盘码V86的时候

09:12.330 --> 09:13.930
它才会运行这个Handle

09:13.930 --> 09:14.770
就这么个意思啊

09:14.770 --> 09:15.370
非常简单

09:17.010 --> 09:21.010
下面的Performance是这个地方

09:21.010 --> 09:22.850
这个就是DevTools里边

09:22.850 --> 09:26.690
控制DevTools里边一个性能调优的

09:26.690 --> 09:28.810
其实这个东西我也没这么用

09:28.810 --> 09:30.290
一般来说我看性能的话

09:30.290 --> 09:33.010
我就会用了有浏览器原生的Performance

09:34.250 --> 09:34.970
将来有机会的话

09:34.970 --> 09:37.250
给他讲讲Performance

09:37.270 --> 09:39.150
还给你提供了一些API

09:39.150 --> 09:41.310
可以在程序里边去使用

09:41.310 --> 09:42.430
将来有机会讲一讲

09:42.430 --> 09:45.030
这个玩意都是一些非常非常运见的知识了

09:47.190 --> 09:48.670
下面这个ProductionTap

09:48.670 --> 09:51.310
这个玩意其实让我们每一次新建的

09:51.310 --> 09:52.070
通过ViewClean

09:52.070 --> 09:53.750
新建的工程里面都有

09:53.750 --> 09:54.830
就这个玩意

09:54.830 --> 09:55.670
这个玩意实际上啥

09:55.670 --> 09:56.510
这个非常简单

09:56.510 --> 09:57.870
它又一句话

09:57.870 --> 09:58.630
它又是一句话

09:58.630 --> 09:59.510
你把它

09:59.510 --> 10:01.430
它默认是可以关闭了

10:01.430 --> 10:03.230
它默认是开启的

10:03.230 --> 10:04.510
你把它设为Q

10:04.510 --> 10:05.910
或者注视调

10:06.130 --> 10:08.050
注视调过后你会看到有一句话

10:08.050 --> 10:09.130
默认就是Q

10:09.130 --> 10:09.810
它告诉你

10:09.810 --> 10:12.770
你目前这个5U运行的模式是开发模式

10:14.130 --> 10:17.890
希望你在部署的时候

10:17.890 --> 10:19.890
把它变成Production

10:19.890 --> 10:21.210
就是生产反击模式

10:21.210 --> 10:22.810
其实这个玩意你都不用关心

10:22.810 --> 10:24.730
因为你在用5U可以打包的时候

10:24.730 --> 10:27.250
它已经把它自动变成生产模式了

10:27.250 --> 10:28.890
它就是给你提示这么一段话

10:28.890 --> 10:29.610
通过这个属性

10:29.610 --> 10:30.570
你可以控制这个段话

10:30.570 --> 10:31.730
到底显不显示

10:31.730 --> 10:32.810
就这么简单

10:32.810 --> 10:34.130
设为播的时候它就不显示

10:36.370 --> 10:38.210
因为你用了5U可以利过后了

10:38.210 --> 10:40.530
这些东西都是5U可以利自动管理的

10:40.530 --> 10:45.350
就可以不用显示它了

10:45.350 --> 10:45.670
好

10:45.670 --> 10:47.010
下一些

10:47.010 --> 10:49.190
下面就配置就完了

10:49.190 --> 10:50.750
然后就是一些全局的API

10:50.750 --> 10:51.630
什么叫全局API

10:51.630 --> 10:54.030
那就是通过5U构造函数的API

10:54.030 --> 10:56.310
你看这个5Uset

10:56.310 --> 10:57.470
对吧

10:57.470 --> 10:59.270
DNS对吧

10:59.270 --> 11:00.750
然后还有什么

11:00.750 --> 11:02.190
注册全局指令

11:02.190 --> 11:03.590
注册全局的过滤器

11:03.590 --> 11:05.310
注册全局的组件

11:05.310 --> 11:07.630
使用5U的插件对吧

11:07.690 --> 11:09.650
然后使用混合

11:09.650 --> 11:11.250
其实插件很简单

11:11.250 --> 11:12.370
我们来看一下插件吧

11:12.370 --> 11:14.170
别人觉得插件可能很神奇

11:14.170 --> 11:15.290
这些插件很简单

11:15.290 --> 11:18.570
就是如果说你要写个自定义插件的话

11:18.570 --> 11:20.170
你就给它写个对象

11:20.170 --> 11:21.290
比方说

11:21.290 --> 11:23.450
非常简单

11:23.450 --> 11:24.250
有写个对象

11:24.250 --> 11:28.510
My plugin

11:28.510 --> 11:31.110
然后对象里面提供了一个函数叫Install

11:31.110 --> 11:32.070
这么一个函数

11:32.070 --> 11:34.430
这个函数它会给你传入一些

11:34.430 --> 11:35.190
参数进来

11:35.190 --> 11:36.390
第一个参数就是5U实力

11:36.390 --> 11:38.150
就整个5U的构造函数

11:38.150 --> 11:39.390
第二个参数是一些配置

11:39.390 --> 11:42.290
这个配置来自于使用插件的时候

11:42.290 --> 11:43.450
传入了配置

11:43.450 --> 11:44.610
比方说你这里使用

11:44.610 --> 11:49.450
到时候你用5U use My plugin

11:49.450 --> 11:50.770
然后给它传了一些配置进来

11:50.770 --> 11:52.410
那么这个配置你会传到这

11:52.410 --> 11:54.490
你自己I传什么配置

11:54.490 --> 11:55.770
传什么配置

11:55.770 --> 11:56.730
去变你

11:56.730 --> 11:57.610
那么在Install里面

11:57.610 --> 11:58.810
它就会运行这个函数

11:58.810 --> 12:00.130
当你使用插件的时候

12:00.130 --> 12:01.370
它就会运行这个函数

12:01.370 --> 12:03.290
这个函数里面你可以做任何事情

12:03.290 --> 12:04.850
比方说你可以往5U的

12:04.870 --> 12:07.510
偷偷Type里面加一个

12:08.790 --> 12:09.550
加一个方法

12:09.550 --> 12:10.630
My message

12:10.630 --> 12:12.310
那么从此以后所有的5U实力

12:12.310 --> 12:13.990
不就都有这个方法了吗

12:13.990 --> 12:14.630
对不对

12:14.630 --> 12:15.430
方式

12:15.430 --> 12:16.230
就这么个意思

12:16.230 --> 12:18.390
你可以在这里边做任何事情

12:18.390 --> 12:18.870
明儿的意思吧

12:18.870 --> 12:21.590
你可以在这里边通过5U的构造函数

12:21.590 --> 12:23.510
去注册一些全局的

12:25.510 --> 12:27.750
组建全局的混合

12:27.750 --> 12:29.350
全局的filter

12:29.350 --> 12:30.470
当你注册全局的时候

12:30.470 --> 12:32.430
你心里边摇有额底

12:32.890 --> 12:34.890
你这个全局的会影响到所有组建

12:36.090 --> 12:37.010
就做这么一些事情

12:37.010 --> 12:38.010
你爱做啥做啥

12:38.010 --> 12:39.850
这就非常简单的插件

12:39.850 --> 12:40.650
所以说这个use

12:40.650 --> 12:41.650
它就是使用一个插件

12:41.650 --> 12:43.250
它就会运行这个插件的Install方法

12:46.510 --> 12:49.270
然后下面就是Mixing全局混合

12:49.270 --> 12:50.910
这里有一个函数叫compile

12:50.910 --> 12:51.630
给它一个模板

12:51.630 --> 12:52.790
这个模板就是一个字母串

12:52.790 --> 12:53.870
它是一个工具函数

12:53.870 --> 12:55.390
这个工具函数可以把

12:55.390 --> 12:56.750
因为我们知道5U里边

12:56.750 --> 12:57.510
它有一个编译

12:57.510 --> 12:57.830
对不对

12:57.830 --> 12:58.590
模板编译

12:58.590 --> 12:59.510
它可以把一个字母串

12:59.510 --> 13:00.550
模板字母串

13:00.550 --> 13:02.390
编译成为一个Render函数

13:02.390 --> 13:03.630
这是我们之前说过的

13:03.650 --> 13:05.090
Render函数都是通过编译过来的

13:05.090 --> 13:05.290
对吧

13:05.290 --> 13:07.570
我们平时写的东西都通过编译过来的

13:07.570 --> 13:08.610
但是一个潜力条件

13:08.610 --> 13:10.010
必须要在完整版可用

13:10.010 --> 13:11.210
什么叫完整版可用

13:11.210 --> 13:12.170
因为我们学过

13:12.170 --> 13:14.290
5U可力它有一个预编译

13:14.290 --> 13:15.730
它会把我们那个组建

13:15.730 --> 13:16.810
这里边的东西

13:16.810 --> 13:17.610
就这里边写的东西

13:17.610 --> 13:19.410
直接一个编译成Render函数

13:19.410 --> 13:21.250
生成了打包结果

13:21.250 --> 13:22.610
所以说你真正在运行的时候

13:22.610 --> 13:23.610
实际上是没有模板的

13:23.610 --> 13:24.490
不需要编译的

13:24.490 --> 13:26.090
只有一个Render函数

13:26.090 --> 13:28.010
由于5U可力它这么做了

13:28.010 --> 13:29.210
所以说5U可力

13:29.210 --> 13:31.490
它觉得我在打包的时候

13:31.490 --> 13:32.290
在打包结果里面

13:32.310 --> 13:34.470
就没有必要有那些编译代码了

13:34.470 --> 13:36.190
那些编译的运行时

13:36.190 --> 13:37.710
编译的那些代码

13:37.710 --> 13:39.910
我就不会进入到打包结果

13:39.910 --> 13:41.190
也就是我们5U可力打包之后

13:41.190 --> 13:42.390
它不是一个完整版

13:42.390 --> 13:43.470
它没有编译的

13:43.470 --> 13:44.910
没有编译这个代码的

13:44.910 --> 13:45.870
所以说你这个函数

13:45.870 --> 13:47.150
你是用不了的

13:47.150 --> 13:50.510
如果说你要在运行的过程中

13:50.510 --> 13:52.990
用这个函数动态的去编译一些东西的话

13:52.990 --> 13:55.710
情况这种情况我们遇不到

13:55.710 --> 13:57.070
基本上遇不到

13:57.070 --> 13:59.110
如果说你需要这样子做的话

13:59.210 --> 14:03.850
那么你可以在5U里面开启运行时编译

14:03.850 --> 14:05.130
我们之前讲过了对吧

14:05.130 --> 14:06.610
在5U可力里面怎么开启

14:06.610 --> 14:07.650
就是写个配置文件

14:09.490 --> 14:10.290
写个配置文件

14:11.250 --> 14:13.370
配置文件里面加上一个叫做什么

14:13.370 --> 14:14.770
Rong Time

14:15.730 --> 14:16.130
跑发觉

14:18.570 --> 14:19.970
Rong Time Compiler

14:19.970 --> 14:21.770
它默认是Force

14:21.770 --> 14:23.330
就是运行时编译

14:23.330 --> 14:24.690
要不要用

14:24.690 --> 14:25.570
它默认是不用

14:25.570 --> 14:26.210
不用的话

14:26.210 --> 14:27.570
打包结果就会小一些

14:27.570 --> 14:29.090
没有编译代码

14:29.090 --> 14:30.510
那么如果说你把开启过后

14:30.510 --> 14:33.190
它就会把编译代码加到打包结果里面

14:33.190 --> 14:34.990
那么你就可以使用这个方法了

14:34.990 --> 14:36.750
在动态的去编一些东西

14:36.750 --> 14:37.750
就这么个意思

14:37.750 --> 14:39.150
它会把编译成Render函数

14:39.150 --> 14:40.150
你看编译一个对象

14:40.150 --> 14:41.230
对象里面有个Render函数

14:42.230 --> 14:42.390
对吧

14:42.390 --> 14:42.950
你复词给他

14:42.950 --> 14:44.230
OK

14:44.230 --> 14:46.230
这个Reverb好像以前说过了对吧

14:46.230 --> 14:47.710
它就是做响应式的

14:47.710 --> 14:49.470
它会把一个对象变成一个响应式对象

14:50.830 --> 14:51.510
变立这个对象

14:51.510 --> 14:52.310
深度变立一个对象

14:52.310 --> 14:53.230
所有东西

14:53.230 --> 14:56.190
然后一个重新去定义它的属性

14:56.190 --> 14:57.430
把它变成有一个Getter

14:57.430 --> 14:58.030
一个Setter

14:58.090 --> 14:58.530
对吧

14:58.530 --> 14:59.090
Getter里边

14:59.090 --> 14:59.770
Setter里边

14:59.770 --> 15:01.370
Getter里边有一代收集

15:01.370 --> 15:03.250
Setter里边有派发重新

15:04.650 --> 15:04.890
好

15:04.890 --> 15:07.290
Version这个玩意儿就是当前的View完本

15:07.290 --> 15:08.530
它返回一个字不错

15:08.530 --> 15:09.890
如果说你需要用的话

15:09.890 --> 15:10.610
那就去用吧

15:12.170 --> 15:12.330
好

15:12.330 --> 15:14.730
下面是选项和数据

15:14.730 --> 15:17.090
就是你在创建一个View

15:17.090 --> 15:18.130
创建一个

15:19.250 --> 15:20.890
组件的时候

15:20.890 --> 15:21.970
这个我说一下

15:21.970 --> 15:22.810
这个上面前面

15:22.810 --> 15:25.490
上面一个全局API里边还有一个View Extend

15:25.490 --> 15:26.370
这个玩意儿是怎么意思呢

15:26.430 --> 15:27.550
这个玩意儿是做继承的

15:28.750 --> 15:30.550
就是你刚传入一些组件配置

15:30.550 --> 15:31.670
组件配置就写到中间

15:31.670 --> 15:33.150
你看这些组件配置

15:33.150 --> 15:33.870
写到这

15:33.870 --> 15:37.110
那么它会生成一个构造函数

15:38.070 --> 15:39.310
它会给你给你一个构造函数

15:39.310 --> 15:41.790
跟构造函数继承至无忧

15:41.790 --> 15:42.950
为什么我要单独说一下这个呢

15:42.950 --> 15:45.030
这个我们平时也不会用的

15:45.030 --> 15:46.390
这个玩意儿为什么要说单独说一下呢

15:46.390 --> 15:50.150
这是因为我们无忧里的所有的注册组件

15:50.150 --> 15:52.070
实际上它内部都是使用这种方式

15:52.070 --> 15:54.230
给你生成的一个构造函数

15:54.230 --> 15:55.270
因此我给大家说

15:56.830 --> 15:59.710
那个无忧组件跟那个无忧差不多

15:59.710 --> 16:05.430
因为这个无忧Component跟那个无忧其实就差不多

16:05.430 --> 16:06.230
为什么差不多呢

16:06.230 --> 16:07.390
因为它就是继承它的

16:08.750 --> 16:09.670
它就是继承它的

16:10.510 --> 16:12.430
怎么继承的就是通过Extend出来的

16:13.230 --> 16:13.950
就这么个意思

16:13.950 --> 16:14.870
简单说一下就完事了

16:15.990 --> 16:18.230
好下面是选项和数据

16:19.030 --> 16:20.750
就是你在做一个组件的时候

16:20.750 --> 16:21.870
不是有些配置嘛

16:21.870 --> 16:22.030
对吧

16:22.030 --> 16:22.670
你拿些配置

16:22.670 --> 16:25.190
Data可以配置为一个Object

16:25.190 --> 16:26.270
可以配置为Buncle

16:26.330 --> 16:26.970
当然呢

16:26.970 --> 16:28.090
组件里边呢

16:28.090 --> 16:29.450
最好就全部用方形

16:30.250 --> 16:30.810
Props

16:31.530 --> 16:33.690
这个玩意就是配置这个组件里边有哪些

16:34.410 --> 16:36.010
属性这个没什么好说的吧对吧

16:36.010 --> 16:37.170
Props Data这个玩意

16:37.170 --> 16:38.810
平时我们也不怎么会去用

16:38.810 --> 16:40.090
它一般用的什么情况呢

16:40.090 --> 16:41.130
用在Extend的情况

16:41.130 --> 16:44.330
如果说你要手动的去产生一个组件的构造函数

16:45.530 --> 16:46.130
那么这个时候

16:46.130 --> 16:47.450
如果说你要手动的去

16:47.450 --> 16:50.290
通过创建构造函数的方式来创建一个无忧

16:50.290 --> 16:51.530
组件实力

16:51.530 --> 16:52.810
那么你可以要传

16:52.810 --> 16:54.610
如果说了解传一些Props的话

16:54.610 --> 16:55.490
传一些属性的话

16:55.510 --> 16:56.870
要用Props Data

16:56.870 --> 16:58.470
这样子的方式给它传递

16:58.470 --> 16:59.030
就这么个意思

16:59.030 --> 17:00.110
就是不通过模板

17:00.110 --> 17:03.230
我通过新建一个组件实力的方式

17:03.230 --> 17:05.430
来这样子创建一个组件

17:05.430 --> 17:08.590
这种情况呢在一些非常非常特别的情况

17:08.590 --> 17:09.110
可能会用到

17:09.110 --> 17:10.830
可能是一些测试场景吧

17:10.830 --> 17:12.750
也测试场景的可能会用到

17:12.750 --> 17:17.070
将来我们会单独出一个测试的课

17:17.070 --> 17:19.110
那么就会说到这个东西

17:19.110 --> 17:19.750
Computed

17:19.750 --> 17:21.590
这个没什么好说的都学过的对吧

17:21.650 --> 17:23.050
然后呢还有就是

17:24.370 --> 17:25.450
组件实力里边

17:26.410 --> 17:27.090
组件实

17:29.090 --> 17:29.810
还是选项

17:29.810 --> 17:30.970
还是选项

17:30.970 --> 17:33.410
上面是选项的是数据方面的选项

17:33.410 --> 17:33.650
对吧

17:33.650 --> 17:35.010
下面是动物方面的选项

17:35.010 --> 17:36.130
一个是eO

17:36.130 --> 17:38.650
这个eO一般是用在这个656的时候

17:39.530 --> 17:40.530
6一个56的时候

17:41.610 --> 17:42.290
在这里

17:42.290 --> 17:44.330
所以我们可以配置一个eO

17:44.330 --> 17:46.050
最早的时候我们是不是可以这样做

17:47.770 --> 17:49.090
就这个东西都学过了

17:49.090 --> 17:50.090
Temple没什么好说的

17:50.550 --> 17:51.310
Render函数

17:51.310 --> 17:52.710
Render error是什么意思呢

17:53.510 --> 17:55.150
这个玩意是在组件里边

17:55.150 --> 17:57.030
如果说组件遇到错误了

17:57.030 --> 17:58.430
那么如果说你配置了它的话

17:58.430 --> 18:00.950
它会按照这个函数定义的东西

18:01.670 --> 18:02.150
那你看吧

18:03.230 --> 18:03.910
Render error

18:03.910 --> 18:05.950
它会运行这个函数

18:05.950 --> 18:06.830
如果说组件

18:06.830 --> 18:08.350
就是渲染的过程中

18:09.510 --> 18:10.230
发生了错误

18:11.390 --> 18:13.310
那么比方这个渲染过程中发生了一个错误

18:13.310 --> 18:14.990
它会把这个错误对象传达字

18:14.990 --> 18:15.310
然后呢

18:15.310 --> 18:18.590
把这个创建训练起动物的传达字

18:18.650 --> 18:21.210
你就可以渲染一些错误的信息

18:22.450 --> 18:23.130
就这么个意思

18:23.970 --> 18:26.250
就是运行它爆错了

18:26.250 --> 18:27.050
转而运行它

18:28.810 --> 18:29.930
然后生命中期勾字函数

18:29.930 --> 18:30.650
这些都是学过的

18:31.930 --> 18:32.690
这两个也是学过的

18:32.690 --> 18:33.050
对吧

18:33.050 --> 18:35.490
这是跟那个KeeperLive相关的

18:37.050 --> 18:38.290
然后就一个这个

18:38.290 --> 18:39.570
ErrorCapture

18:39.570 --> 18:41.490
就是又是一个错误跟错误相关的

18:42.490 --> 18:44.170
就是当我们的

18:45.650 --> 18:47.370
组件的就是自己

18:48.350 --> 18:49.710
补过一个来自子孙组件

18:49.710 --> 18:50.550
他的植树件

18:50.550 --> 18:51.790
或者是植树件的植树件

18:51.790 --> 18:52.830
就是后代组件

18:52.830 --> 18:53.910
他如果说有错误的话

18:53.910 --> 18:54.630
当前组件的

18:54.630 --> 18:56.350
可以通过这个生命中期勾字函数

18:56.350 --> 18:56.990
能够补货它

18:58.110 --> 18:58.710
就这么个意思

19:01.230 --> 19:04.590
然后就是组件内部的一些注册指令

19:04.590 --> 19:05.670
注册指令

19:05.670 --> 19:07.830
注册那个组件内部的

19:07.830 --> 19:09.630
局部注册一些Future

19:09.630 --> 19:10.550
过滤器

19:10.550 --> 19:12.390
局部注册一些别的组件

19:12.390 --> 19:12.910
学过了对吧

19:14.110 --> 19:14.750
然后还有啥

19:15.710 --> 19:16.230
Parent

19:18.980 --> 19:19.660
这是

19:21.980 --> 19:23.460
就是通过这个Z使节

19:23.460 --> 19:25.940
Dr.Parent可以访问副组件的实力

19:26.740 --> 19:28.020
之前我们讲组件通信的时候

19:28.020 --> 19:29.700
是不是讲过Parent的一个Change

19:29.700 --> 19:31.220
可以动它的访问

19:31.220 --> 19:33.100
当前组件是哪个组件在用它

19:33.100 --> 19:34.180
哪个副组件用它

19:34.180 --> 19:35.780
当前组件用到了哪些植树件

19:36.740 --> 19:38.340
Megasin配置那个混合的

19:38.340 --> 19:39.620
Xtint这个玩意

19:39.620 --> 19:41.540
其实跟那个Megasin一样的

19:41.540 --> 19:42.580
其实算是一样的

19:42.580 --> 19:44.860
我觉得它这里应该是设计上

19:45.420 --> 19:47.220
设计上的一些

19:47.400 --> 19:48.120
一些原因吧

19:48.120 --> 19:48.600
我不知道

19:49.560 --> 19:50.560
这两个实际上是一样的

19:50.560 --> 19:51.280
Megasins

19:52.360 --> 19:54.360
不过它可以配置为一个数组

19:54.800 --> 19:55.680
就是混合一个数组

19:55.680 --> 19:57.600
这个玩意只能是混合一个

19:58.000 --> 19:58.640
配置单个

19:59.440 --> 20:01.040
从语意上来讲的话

20:01.040 --> 20:01.920
确实有些区别

20:01.920 --> 20:03.920
语意上的话它是继承

20:03.920 --> 20:05.000
继承有单更性

20:05.800 --> 20:07.640
就一个纸类只能有一个附类

20:07.640 --> 20:08.040
对吧

20:08.040 --> 20:08.640
它是继承

20:09.520 --> 20:11.160
混合的就是使用

20:11.160 --> 20:12.640
混合的含义是使用

20:12.640 --> 20:13.880
我要使用一些功能

20:13.880 --> 20:15.040
所以说它可以有多个

20:16.160 --> 20:16.760
是一样

20:16.900 --> 20:18.300
它们都是遵循那个

20:18.300 --> 20:19.060
混合策略

20:19.060 --> 20:20.420
有混合策略都是可以改的

20:22.500 --> 20:23.900
然后下面这个Project

20:23.900 --> 20:25.060
Provide Inject

20:25.060 --> 20:26.500
这个玩意以前也是讲过的

20:27.500 --> 20:27.940
没什么

20:27.940 --> 20:29.780
还有Name就是主键的名字

20:29.780 --> 20:30.500
有的时候又用

20:30.500 --> 20:32.020
特别是Keeper Live的时候

20:32.020 --> 20:34.340
或者是主键在自我帝规的时候

20:34.980 --> 20:35.980
那么就看

20:35.980 --> 20:37.140
允许模办

20:37.140 --> 20:38.340
帝规的调用自身

20:38.340 --> 20:40.020
那么这个时候可以用这个名字

20:40.020 --> 20:41.980
我们之前做的一个数据目录的时候

20:41.980 --> 20:42.660
是不是用到过它

20:43.660 --> 20:44.740
Denimators

20:45.300 --> 20:46.180
表示分割服

20:46.180 --> 20:48.240
就是我们的模办里面

20:48.240 --> 20:50.000
一般通过两个左课号

20:50.000 --> 20:51.240
两个右课号

20:51.240 --> 20:52.320
来表示一个分割服

20:52.320 --> 20:53.760
里面就是介石代码

20:53.760 --> 20:55.360
那么这个东西实际上是可以改的

20:55.360 --> 20:57.520
比方说它改成这个样子的

20:57.520 --> 20:58.480
那么之后在模办里面

20:58.480 --> 20:59.600
就是以这个开头

20:59.600 --> 21:00.600
以这个结尾

21:00.600 --> 21:02.920
有点像ES6的模办制服创

21:02.920 --> 21:05.240
就改变它的分割的风格

21:05.240 --> 21:07.240
这个玩意没必要去改它

21:07.240 --> 21:07.640
讲过了

21:07.640 --> 21:10.920
这个玩意是做了一个含书主键的

21:10.920 --> 21:13.400
这个玩意是在做了一个微墨的绑定的时候

21:13.400 --> 21:14.640
指定默认的情况下

21:15.620 --> 21:17.260
这个Prob是Value

21:17.260 --> 21:18.540
Even成了是Input

21:18.540 --> 21:20.140
来做双向绑定的

21:20.140 --> 21:21.020
一个余法堂

21:21.020 --> 21:22.140
那么这个玩意是可以改的

21:23.020 --> 21:24.740
这个玩意好像也是讲过的

21:24.740 --> 21:25.740
它默认情况下

21:25.740 --> 21:27.260
如果说一个主键里面

21:27.260 --> 21:28.460
没有声明一些属销

21:28.460 --> 21:29.260
像这种

21:29.260 --> 21:30.260
一个主键里边

21:31.500 --> 21:34.980
我属键可能只声明了一个两个A和B

21:34.980 --> 21:37.180
结果你给我传了一些

21:37.740 --> 21:38.780
别的玩意进来

21:38.780 --> 21:40.380
国内使用TOM的时候

21:40.380 --> 21:42.380
可能传了一些C

21:43.360 --> 21:44.920
那么这个C会跑到哪去呢

21:44.920 --> 21:46.920
会跑到这个主键的根源书上面去

21:46.920 --> 21:48.520
根源书是一个DIV

21:48.520 --> 21:49.720
那么这个CG跑到根源书

21:49.720 --> 21:50.400
做一个属性

21:50.400 --> 21:51.320
传过去了

21:51.320 --> 21:53.280
就叫做G成

21:53.280 --> 21:54.520
Altribute

21:54.520 --> 21:55.440
Inherit

21:55.440 --> 21:56.400
Altribute

21:56.400 --> 21:58.440
那么这个玩意你可以把社为Force

21:58.440 --> 21:59.320
社为Force过后了

21:59.320 --> 22:00.440
这个玩意就不会到

22:00.440 --> 22:02.440
根源书上面去了

22:02.440 --> 22:04.440
这里其实跟你说的很详细

22:05.560 --> 22:07.480
Comets这个玩意是

22:07.480 --> 22:09.880
因为你在模板里边可能会写一些注释

22:09.880 --> 22:11.040
那么在编译的时候

22:12.680 --> 22:14.040
要不要编译到

22:14.040 --> 22:16.280
把注释编译进去

22:16.280 --> 22:18.280
默认是Force就不要编译注释了

22:18.280 --> 22:19.480
生存出来就没有注释了

22:19.480 --> 22:20.440
这个玩意

22:20.440 --> 22:21.800
如果说你需要这个注释的话

22:21.800 --> 22:22.600
就把它开启完事

22:24.280 --> 22:25.760
然后让我们一个组建实力里边

22:25.760 --> 22:27.160
我们可以通过一些多热符号

22:27.160 --> 22:27.320
对吧

22:27.320 --> 22:29.080
访问到一些信息

22:29.080 --> 22:30.320
这边你可以看一下

22:30.320 --> 22:31.160
你自己去看一下

22:31.160 --> 22:32.040
我难得去讲了

22:33.720 --> 22:34.640
其实也没他说的

22:34.640 --> 22:35.480
下面有些指令

22:35.480 --> 22:37.320
他们都说一下这个指令

22:40.120 --> 22:41.360
这两个指令

22:41.820 --> 22:43.220
一个是V-PREE

22:48.590 --> 22:49.390
什么意思呢

22:49.390 --> 22:50.590
这个玩意

22:50.590 --> 22:55.390
就是你可以把它加到一个模板的标签里边

22:55.390 --> 22:56.710
作为一个指令

22:56.710 --> 22:58.430
那么它的意义就是

22:58.430 --> 23:00.790
挑过这个元素和它的标签里边

23:00.790 --> 23:01.710
还有些指元素

23:02.830 --> 23:04.910
它里边的指元素和这个元素

23:04.910 --> 23:06.990
就挑过它的编译过程

23:08.350 --> 23:09.070
那么这里边

23:09.990 --> 23:12.630
它就会把它原封不动的显示出来

23:13.610 --> 23:14.370
明儿的意思吧

23:15.010 --> 23:16.170
就这么个意思

23:16.170 --> 23:17.090
挑过它的编译过程

23:17.090 --> 23:18.850
那么它就可以把它原封不动的显示出来

23:18.850 --> 23:20.810
比方说随便来一个吧

23:20.810 --> 23:22.570
我们这边再显示一个

23:22.570 --> 23:23.570
这有一个DIV

23:26.040 --> 23:28.600
我们这边再来一个H2

23:29.680 --> 23:30.800
显示个什么

23:30.800 --> 23:31.480
显示个VTAR吧

23:33.720 --> 23:34.120
开头

23:34.840 --> 23:35.520
随便写个吧

23:37.320 --> 23:38.000
而默认情况下

23:38.000 --> 23:39.200
这个玩意肯定是要编译的

23:39.200 --> 23:40.000
对吧

23:40.000 --> 23:40.800
肯定是要编译的

23:43.040 --> 23:45.000
那么如果说你把它写个V-PREE

23:47.720 --> 23:48.760
那么它就不编译了

23:48.760 --> 23:50.480
它是啥样就显示啥样

23:50.480 --> 23:51.760
就这么简单

23:51.760 --> 23:52.080
就这么点

23:52.080 --> 23:53.040
其实我们再看一下它的

23:54.200 --> 23:55.120
把打印出这些

23:56.320 --> 23:57.280
看它的虚拟动物节点

23:59.000 --> 24:00.920
在当前vload里边

24:00.920 --> 24:02.560
DIV里边有两个节点

24:02.560 --> 24:04.120
一个是H1 H2

24:04.120 --> 24:06.000
那么H2里边它就是

24:06.000 --> 24:07.440
它会贵深层虚拟动物节点

24:07.440 --> 24:08.320
这个没问题

24:08.320 --> 24:10.320
只是它里边东西那就不会再经过编译的

24:10.320 --> 24:12.560
就是这东西它就不会再去解析了

24:12.560 --> 24:13.480
就这么个意思

24:13.480 --> 24:14.240
就里边写的是啥

24:14.240 --> 24:15.600
就跟那个pray元素是一样的

24:15.600 --> 24:16.040
差不多的

24:16.420 --> 24:16.900
写的是啥

24:16.900 --> 24:18.180
我就显示啥

24:18.180 --> 24:19.020
就这么个东西

24:19.020 --> 24:19.780
如果说需要的话

24:19.780 --> 24:20.340
你就写上

24:21.940 --> 24:23.660
它可以提高一点编译

24:23.660 --> 24:24.780
提高一点编译效率

24:24.780 --> 24:25.460
不过这个玩意

24:25.460 --> 24:27.380
我们为什么没有讲到那个

24:27.380 --> 24:28.660
效率优化的一块

24:28.660 --> 24:30.580
因为我们正通过

24:30.580 --> 24:32.220
没有可力打包出来的东西的

24:32.220 --> 24:33.420
就完全都是编译好了

24:33.420 --> 24:34.020
过后

24:34.020 --> 24:35.300
这是编译好的东西

24:35.300 --> 24:36.180
这完全编译好了

24:39.180 --> 24:40.660
然后这个clock

24:42.340 --> 24:43.980
这啥意思呢

24:43.980 --> 24:46.020
因为这个东西其实跟我们没什么关系

24:46.100 --> 24:47.460
因为我们用了优可力过后

24:47.460 --> 24:48.460
它有个预编译

24:49.260 --> 24:49.940
编译完了过后

24:49.940 --> 24:51.900
直接是一个Render函数了

24:51.900 --> 24:53.540
所以说都不存在这样的问题了

24:53.540 --> 24:55.820
就是说如果说我们没有使用优可力

24:55.820 --> 25:01.020
或者是我们可能没有预编译的情况下

25:02.020 --> 25:03.140
没有预编译的情况下

25:03.140 --> 25:04.420
它就会出现一个问题

25:04.420 --> 25:05.940
就是我们的模板呢

25:05.940 --> 25:07.860
可能比较到这里

25:07.860 --> 25:08.460
它可能一面上

25:08.460 --> 25:10.540
它就会一开始出现这个东西

25:10.540 --> 25:11.700
它一开始会出现这个东西

25:11.700 --> 25:12.620
显示这个东西

25:12.620 --> 25:13.620
然后再经过编译

25:13.620 --> 25:14.580
变成虚拟动物节�

25:14.580 --> 25:16.040
然后再替换掉

25:16.040 --> 25:16.480
没有意思吧

25:16.480 --> 25:17.520
它一般就会散一下

25:19.360 --> 25:20.880
它就会先出现这个

25:20.880 --> 25:22.600
一般就会先出现这个

25:22.600 --> 25:23.280
然后呢

25:23.280 --> 25:24.160
编译结束过后

25:24.160 --> 25:25.600
变成虚拟动物节链

25:25.600 --> 25:27.640
然后再经过挂载

25:27.640 --> 25:29.400
再替换掉这些元素

25:29.400 --> 25:30.800
然后在最终显示出来

25:30.800 --> 25:33.200
我们所看到的政权内容

25:33.200 --> 25:34.480
就会散一下

25:34.480 --> 25:36.320
那这个网线主要是解决这个问题的

25:36.320 --> 25:37.520
不过有了优可力过后

25:37.520 --> 25:38.960
这个东西就没什么用了

25:38.960 --> 25:40.800
它主要是在没有使用优可力

25:40.800 --> 25:42.640
而就是在非常传统的工程里面

25:42.700 --> 25:45.100
你直接引用了一个伍佑介石

25:45.100 --> 25:46.700
你把伍佑的东西

25:46.700 --> 25:47.980
就在追找的时候

25:47.980 --> 25:49.940
把伍佑的东西是不是直接写到这里边了

25:49.940 --> 25:50.140
对不对

25:50.140 --> 25:51.940
它一开始浏览器会把它渲染出来

25:51.940 --> 25:53.540
你写啥渲染上

25:53.540 --> 25:54.940
然后再经过伍佑编译

25:54.940 --> 25:56.380
编译完了过后再把它替换

25:56.380 --> 25:57.820
所以你会看到闪一下

25:57.820 --> 25:59.740
那么这个网线就起这么一个作用

25:59.740 --> 26:02.300
加上一个V clock

26:02.300 --> 26:04.180
你把它写到这儿

26:04.180 --> 26:06.060
写到这儿的目的是什么呢

26:06.060 --> 26:06.540
目的呢

26:06.540 --> 26:07.420
它就是

26:07.420 --> 26:09.020
当它还没有编译

26:09.020 --> 26:12.020
就是伍佑还没有编译完成之前

26:12.080 --> 26:15.720
那么它就会给这个DIV加上这么一个属性

26:15.720 --> 26:18.080
因为这个属性浏览器本身

26:18.080 --> 26:20.880
是可以在元素里面加任何属性的

26:20.880 --> 26:22.920
于是你就可以使用一个Style元

26:22.920 --> 26:25.280
你就可以使用一个这个东西

26:25.280 --> 26:31.190
V clock

26:31.190 --> 26:33.470
因为这个元素它本身一开始就有这个属性

26:33.470 --> 26:33.870
对吧

26:33.870 --> 26:35.670
伍佑不会去动它

26:35.670 --> 26:37.070
然后你把它设为Display Known

26:37.070 --> 26:37.790
就这么简单

26:39.390 --> 26:40.790
那设为Display Known

26:40.790 --> 26:42.190
用属性选择器

26:42.410 --> 26:44.050
选中有这个属性的元素

26:44.050 --> 26:45.130
是不是选中了它

26:45.130 --> 26:46.650
先把它隐藏

26:46.650 --> 26:48.130
所以一开始它里边的东西再多

26:48.130 --> 26:49.490
你看不见的

26:49.490 --> 26:50.850
然后伍佑编译完成过后

26:50.850 --> 26:52.170
它会自动的把这个指令

26:52.170 --> 26:53.610
把这个东西给它去掉

26:53.610 --> 26:54.890
把这个指令属性给它去掉

26:54.890 --> 26:56.090
就这么简单

26:56.090 --> 26:57.210
就避免的闪一下

26:57.210 --> 26:58.650
避免它里边有些东西一开始

26:58.650 --> 27:00.250
流量器渲染出来

27:00.250 --> 27:01.450
看到一些全是花扩号

27:01.450 --> 27:02.730
两个大扩号的东西

27:02.730 --> 27:04.130
然后伍佑编译完了过后

27:04.130 --> 27:04.850
一挂载

27:04.850 --> 27:06.250
才把它替换成正确的内容

27:06.250 --> 27:07.130
就避免闪一下

27:07.130 --> 27:08.930
就起这么一个作用

27:08.990 --> 27:11.190
伍佑编译没什么用

27:11.190 --> 27:12.790
v1s

27:12.790 --> 27:14.750
我都忘了看一下

27:14.750 --> 27:17.470
只渲染元素和组建一次

27:17.470 --> 27:18.390
那么也就是

27:18.390 --> 27:19.430
后边重新渲染了

27:19.430 --> 27:20.750
它就会被视为静态的一种

27:20.750 --> 27:21.830
就之前显示啥

27:21.830 --> 27:22.830
现在就显示啥

27:22.830 --> 27:23.670
有这个动物

27:23.670 --> 27:25.430
这个动物它就不再对比了

27:25.430 --> 27:25.870
原来的意思

27:25.870 --> 27:28.150
它就不会再进行重渲染了

27:28.150 --> 27:29.630
就这么个意思

27:29.630 --> 27:31.710
就v1s

27:33.710 --> 27:34.230
还有什么

27:34.230 --> 27:35.630
没啥东西了

27:35.630 --> 27:36.910
下面一些内置组建全部都讲完了

27:36.910 --> 27:37.190
对吧

27:37.210 --> 27:39.490
航空认识是做一些动态逐渐的

27:39.490 --> 27:40.450
用意思来表示

27:40.450 --> 27:42.370
它最终生成什么元素

27:42.370 --> 27:43.170
然而Trace-A线

27:43.170 --> 27:45.170
这两个是做动画效果的

27:45.170 --> 27:46.010
Tepadive讲过了

27:46.010 --> 27:47.970
Snaux是插槽讲过的

27:47.970 --> 27:50.810
一看vue API也就这么些东西

27:50.810 --> 27:51.690
好了吧

27:51.690 --> 27:52.890
那么这样子

27:52.890 --> 27:54.290
我就把这个vue的东西

27:54.290 --> 27:56.330
就讲完了

27:58.410 --> 27:59.970
后边我们会陆续的讲一讲

27:59.970 --> 28:03.410
vue rotors vux也进阶知识

28:03.410 --> 28:04.210
这节课就到这了

