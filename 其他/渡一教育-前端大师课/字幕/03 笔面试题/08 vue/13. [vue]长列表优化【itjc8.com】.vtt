WEBVTT

00:00.500 --> 00:03.500
这一刻聊的东西有点复杂

00:03.500 --> 00:06.500
但是解决的问题很容易理解

00:06.500 --> 00:09.500
咱们这一刻能聊一聊长列表优化

00:09.500 --> 00:16.500
啥意思呢 就有的时候咱们页面上可能会显示一个特别特别长的列表

00:16.500 --> 00:19.500
为什么会显示这个列表呢

00:19.500 --> 00:24.500
这种情况往往发生在移动端或者是一些后台管理的页面里面

00:24.500 --> 00:28.500
移动端里面我们往往会有一个东西叫下拉刷新

00:29.500 --> 00:32.500
往上翻 到底过后会夹载更多

00:32.500 --> 00:35.500
一直翻一直翻 这个翻久了

00:35.500 --> 00:38.500
有些同学就沉迷了 对吧

00:38.500 --> 00:41.500
这个页面里面刷了一个两个小时

00:41.500 --> 00:46.500
就导致这个列表它的元素特别特别多

00:46.500 --> 00:49.500
那么就同样导致了页面的卡顿

00:49.500 --> 00:51.500
因为这个元素一多了

00:51.500 --> 00:54.500
首先浏览器渲染它就是需要一个时间

00:54.500 --> 00:58.500
特别是新增了一些元素 浏览器会触发什么重排

00:58.500 --> 01:00.500
reflow repaint

01:00.500 --> 01:02.500
那么这个玩意呢 就会花一定时间

01:02.500 --> 01:04.500
另外呢

01:04.500 --> 01:09.500
无论是你用reactor都是一样的问题

01:09.500 --> 01:13.500
那么它会渲染的东西 渲染的组件啊 这些东西都会更多

01:13.500 --> 01:15.500
因此无论是内存的占用

01:15.500 --> 01:21.500
还是GPU的渲染都会带来一些性能的损耗

01:21.500 --> 01:23.500
那么这个问题怎么解决呢

01:23.500 --> 01:27.500
我们先来看问题 这里我就模拟了一个东西

01:27.500 --> 01:30.500
首先我这里的一个组件 这个组件特别特别简单

01:30.500 --> 01:34.500
它有一个 其实它有一个固定高度

01:34.500 --> 01:37.500
高度我给它一个54

01:37.500 --> 01:39.500
有一个固定的高度

01:39.500 --> 01:43.500
有这么一个DV 你给我传一个东西进来

01:43.500 --> 01:46.500
就比方说什么微博列表

01:46.500 --> 01:48.500
一个微博对象或者是一个评论对象

01:48.500 --> 01:49.500
总之是一个对象

01:49.500 --> 01:52.500
我就这里边就显示一些对象的一些信息

01:53.500 --> 01:56.500
实际上在真实的项目里边 这一块更加复杂

01:56.500 --> 01:58.500
因为这里边东西可能非常非常多

01:58.500 --> 02:01.500
这里边还有牵托了指组件 它的元素结构非常多

02:01.500 --> 02:03.500
那么这只是一项 对不对

02:03.500 --> 02:04.500
只是一个列表项

02:04.500 --> 02:06.500
然后我在App组件里边去渲染它

02:06.500 --> 02:08.500
我这里模拟了一下

02:08.500 --> 02:11.500
我就生成了一个对象的数组

02:11.500 --> 02:13.500
1万个 生成了这么一个万个数组

02:13.500 --> 02:18.500
在模拟 我通过不断的下拉 不断的往上翻

02:18.500 --> 02:20.500
现在目前就加载了1万个数据

02:20.500 --> 02:22.500
那么我们这里的每一个

02:22.500 --> 02:24.500
每循环一次的生成一个对象放进去

02:24.500 --> 02:26.500
我就把写成一个固定的一个数组

02:26.500 --> 02:30.500
然后我作为一个享用式数据把它返回

02:30.500 --> 02:34.500
好了 我在这边就去循环我们的数组

02:34.500 --> 02:36.500
然后每次循环一次生成这么一个组件

02:36.500 --> 02:38.500
这是比较简单的做法

02:38.500 --> 02:40.500
一个对象生成一个组件

02:40.500 --> 02:43.500
那么当然一个组件里边就生成了这么一个DIV

02:43.500 --> 02:45.500
如果说它还有牵套组件的话

02:45.500 --> 02:47.500
那就会生成更多的元素

02:47.500 --> 02:49.500
好了 我们来看一下我的页面

02:49.500 --> 02:51.500
我已经运行出来了 点击进去

02:51.500 --> 02:54.500
因为发现了页面的现场首先就比较慢

02:54.500 --> 02:56.500
然后我们往下拉

02:56.500 --> 02:59.500
就会出现一些卡顿 看到没 并不流畅

02:59.500 --> 03:02.500
然后我们这里一边 其实现在1万个

03:02.500 --> 03:04.500
我现在都还没往里边新增内容

03:04.500 --> 03:06.500
没有新增任何内容

03:06.500 --> 03:09.500
我这有高度设计人54过后好像

03:09.500 --> 03:11.500
不是很对的 因为这有个盘点

03:11.500 --> 03:14.500
我设计个BoxSizingBorderBox吧

03:15.500 --> 03:19.500
BoxSizingBorderBox

03:19.500 --> 03:22.500
好 这样子好一点

03:23.500 --> 03:25.500
我还没有往这里边新增

03:25.500 --> 03:27.500
因为新增的话比较往第一条

03:27.500 --> 03:28.500
我新增一条

03:28.500 --> 03:31.500
新增一条的话是不是又导致整个列表重新选的

03:31.500 --> 03:33.500
对不对 或者是我删除一个

03:33.500 --> 03:35.500
所以整个列表又得重新选的

03:35.500 --> 03:37.500
那么这样子的速度更慢

03:37.500 --> 03:38.500
或者是我每一个列表箱里边

03:38.500 --> 03:40.500
可能还有一些表单

03:40.500 --> 03:41.500
有一个文本框

03:41.500 --> 03:42.500
有一些可以点击的

03:42.500 --> 03:44.500
可以互相操作的东西

03:44.500 --> 03:46.500
所以这个渲染就更加恐怖了

03:46.500 --> 03:49.500
所以说这就是一个场列表的问题

03:49.500 --> 03:51.500
其实我们可以在这里右键检查

03:51.500 --> 03:53.500
看一下咱们的性能

03:53.500 --> 03:54.500
Performance

03:54.500 --> 03:57.500
这里我录制一下刷新

03:58.500 --> 04:00.500
首先渲染的时间就比较慢了

04:00.500 --> 04:03.810
然后我们就点击停止

04:03.810 --> 04:04.810
可以非常清楚的看到

04:04.810 --> 04:05.810
它占用了大量的时间

04:05.810 --> 04:07.810
首先搅拌的执行时间

04:07.810 --> 04:08.810
超过了一秒钟

04:08.810 --> 04:09.810
然后渲染的时间

04:09.810 --> 04:11.810
超过了将近一秒

04:11.810 --> 04:12.810
对不对

04:12.810 --> 04:13.810
都是比较耗时的

04:13.810 --> 04:15.810
而且内存占用也是比较恐怖的

04:15.810 --> 04:18.810
我们这里可以看到内存占用在这里

04:23.400 --> 04:24.400
不知道大家能不能看清楚

04:24.400 --> 04:26.400
我把它放小一点

04:26.400 --> 04:29.400
内存占用初始是56兆

04:29.400 --> 04:32.400
现在直接飙到了111兆

04:32.400 --> 04:34.400
内存占用也是比较多的

04:35.400 --> 04:36.400
那怎么解决这个问题呢

04:36.400 --> 04:37.400
这个解决的问题

04:37.400 --> 04:38.400
总体失路了

04:38.400 --> 04:43.630
我给大家说一下

04:43.630 --> 04:45.630
总体失路就是这样子

04:45.630 --> 04:46.630
就是我这里边呢

04:46.630 --> 04:48.630
其实我只显示

04:48.630 --> 04:50.630
你们能看见的东西

04:50.630 --> 04:52.630
你们看不见的我就不显示了

04:52.630 --> 04:53.630
只让后边我们看不见的

04:53.630 --> 04:55.630
其实我就可以不显示

04:55.630 --> 04:57.630
只显示那些能看见的

04:57.630 --> 05:00.630
然后监听我们的滚动条的变化

05:00.630 --> 05:02.630
当然也可以监听别的东西

05:02.630 --> 05:03.630
利用一些新的IPI

05:03.630 --> 05:06.630
可以监听这些元素的可视状态

05:06.630 --> 05:07.630
不过我这里就简单一点

05:07.630 --> 05:09.630
就监视监听滚动条的变化

05:09.630 --> 05:11.630
当滚动条变化的时候

05:11.630 --> 05:13.630
我这里重新去给你

05:13.630 --> 05:15.630
设置你显示的区域

05:15.630 --> 05:16.630
其实就完事了

05:17.630 --> 05:18.630
那么其实我们这里边

05:18.630 --> 05:19.630
可以怎么去做呢

05:19.630 --> 05:20.630
我这里有当图

05:20.630 --> 05:22.630
大家可以看得清楚一点

05:22.630 --> 05:23.630
就是我们可以

05:23.630 --> 05:25.630
比方说这个外层有个DEV

05:25.630 --> 05:27.630
我这里外层是不是有个DEV

05:27.630 --> 05:28.630
这个DEV的我们有滚动条

05:28.630 --> 05:30.630
那么它往往是定高的

05:30.630 --> 05:32.630
不定高的话哪来的滚动条呢

05:32.630 --> 05:33.630
它的高度是固定的

05:33.630 --> 05:35.630
那么高度固定过后呢

05:35.630 --> 05:36.630
我在你一边

05:36.630 --> 05:37.630
在这个DEV里边

05:37.630 --> 05:39.630
我重新给大家画一下

05:39.630 --> 05:40.630
我给大家看一下

05:40.630 --> 05:48.100
这一步一步是怎么来的

05:48.100 --> 05:49.100
我在这里边呢

05:49.100 --> 05:51.100
生成一个空的DEV

05:51.100 --> 05:53.100
就是外面这个黑框框

05:53.100 --> 05:54.100
就是这个

05:54.100 --> 05:55.100
就这个东西

05:55.100 --> 05:56.100
是过了

05:56.100 --> 05:58.100
一个固定高度

05:58.100 --> 06:00.100
带有滚动条的这么一个DEV

06:00.100 --> 06:01.100
它里边的东西呢

06:01.100 --> 06:03.100
我就不能像以前这样子

06:03.100 --> 06:04.100
把所有的元素

06:04.100 --> 06:05.100
挨在这排列在这里

06:05.100 --> 06:06.100
那这样子的话

06:06.100 --> 06:08.100
排列东西就很多

06:08.100 --> 06:10.100
我就给它一个空的DEV

06:10.100 --> 06:12.100
我给它一个空的DEV

06:12.100 --> 06:13.100
这个DEV里边

06:13.100 --> 06:14.100
什么都没有

06:14.100 --> 06:16.100
它主要的目的是什么呢

06:16.100 --> 06:18.100
主要的目的是

06:18.100 --> 06:20.100
把这个外面的DEV

06:20.100 --> 06:21.100
撑开

06:21.100 --> 06:22.100
因为它的高度很高

06:22.100 --> 06:24.100
我会给它设置一个高度

06:24.100 --> 06:26.100
比方说这里边

06:26.100 --> 06:27.100
每一个元素

06:27.100 --> 06:29.100
每个元素高度为50

06:29.100 --> 06:30.100
假设

06:30.100 --> 06:32.100
每一个元素的高度为50

06:32.100 --> 06:34.100
有一万个这样的元素

06:34.100 --> 06:35.100
那么是不是高度

06:35.100 --> 06:36.100
这边的高度

06:36.100 --> 06:38.100
就应该是50万

06:38.100 --> 06:40.100
那么给它定个高度

06:40.100 --> 06:42.100
高度固定的目的是怎么呢

06:42.100 --> 06:44.100
目的是

06:44.100 --> 06:47.100
让外面这个DEV出现滚动条

06:47.100 --> 06:49.100
懂我的意思吧

06:49.100 --> 06:51.100
我要让这个DEV

06:51.100 --> 06:54.100
就这个DEV出现滚动条

06:54.100 --> 06:55.100
尽管它里边没有

06:55.100 --> 06:56.100
显示任何东西

06:56.100 --> 06:58.100
但是它滚动条是不是出现了

06:58.100 --> 07:00.100
滚动条的高度是不是正确的

07:00.100 --> 07:01.100
对不对

07:01.100 --> 07:03.100
咱们先做这么一件事

07:03.100 --> 07:05.100
这件事已经做完了之后

07:05.100 --> 07:06.100
我在动态的

07:06.100 --> 07:09.100
去设置它里边显示的东西

07:09.100 --> 07:10.100
比方说

07:10.100 --> 07:12.100
目前的

07:12.100 --> 07:14.100
滚动就是外面的DEV滚动

07:14.100 --> 07:15.100
滚动的是什么

07:15.100 --> 07:16.100
滚动的时候是不是

07:16.100 --> 07:18.100
滚动的是这个区域

07:18.100 --> 07:19.100
滚动它里边的区域

07:19.100 --> 07:20.100
尽管它里边的区域

07:20.100 --> 07:21.100
啥都没有

07:21.100 --> 07:23.100
然后我在这里边

07:23.100 --> 07:25.100
去加入一些绝对定位的元素

07:25.100 --> 07:27.100
就这些元素全是绝对定位的

07:27.100 --> 07:28.100
我举个例子

07:28.100 --> 07:32.440
它一开始在这

07:32.440 --> 07:34.440
编不住

07:34.440 --> 07:36.440
一开始在这

07:36.440 --> 07:37.440
一开始

07:37.440 --> 07:39.440
然后去滚动

07:39.440 --> 07:41.440
它往上滚动的时候

07:41.440 --> 07:44.440
我让它们也跟着往上滚动

07:44.440 --> 07:46.440
其实它们本身就会跟着往上滚动

07:46.440 --> 07:47.440
对吧

07:47.440 --> 07:48.440
因为它们是绝对定位

07:48.440 --> 07:50.440
它相对于它来进行绝对定位

07:50.440 --> 07:52.440
它们就会跟着往上滚动

07:52.440 --> 07:54.440
那么我继续滚动它

07:54.440 --> 07:55.440
继续滚动它的时候

07:55.440 --> 07:56.440
它们也会跟着往上滚动

07:56.440 --> 07:58.440
那后边是不是没有了

07:58.440 --> 08:00.440
是不是空出来了

08:00.440 --> 08:01.440
空出来的时候

08:01.440 --> 08:03.440
其实我们就动态的

08:03.440 --> 08:05.440
首先改变这个DEV里边的内容

08:05.440 --> 08:07.440
本来这里显示的是

08:07.440 --> 08:08.440
1

08:08.440 --> 08:09.440
2

08:09.440 --> 08:10.440
3

08:10.440 --> 08:11.440
4

08:11.440 --> 08:12.440
5

08:12.440 --> 08:13.440
6

08:13.440 --> 08:15.440
下面是不是比较滚动到这

08:15.440 --> 08:17.440
滚动到这

08:17.440 --> 08:19.440
沾往下是不是显示7了

08:19.440 --> 08:20.440
但是7有没有了

08:20.440 --> 08:21.440
没有

08:21.440 --> 08:23.440
如果说因为后边东西实在太多了

08:23.440 --> 08:24.440
我不想全部渲染出来

08:24.440 --> 08:26.440
我只渲染它可见的部分

08:26.440 --> 08:28.440
然后我们沾往继续往上滚动的时候

08:28.440 --> 08:30.440
下面是不是该选择7了

08:30.440 --> 08:31.440
于是我会怎么样了

08:31.440 --> 08:32.440
你看

08:32.440 --> 08:33.440
我会这样子调整

08:33.440 --> 08:35.440
首先调整这里面的位置

08:35.440 --> 08:36.440
你看

08:36.440 --> 08:37.440
就这个位置

08:37.440 --> 08:38.440
我们把这样子

08:39.440 --> 08:41.440
调整这边的位置

08:41.440 --> 08:42.440
这边的位置

08:42.440 --> 08:44.440
把它调整成这个样子

08:44.440 --> 08:46.440
因为现在1已经看不见了

08:46.440 --> 08:47.440
1我们不需要了

08:47.440 --> 08:49.440
把位置调整成这个样子

08:49.440 --> 08:51.440
然后改动里边的数据

08:51.440 --> 08:52.440
2

08:52.440 --> 08:53.440
3

08:53.440 --> 08:54.440
4

08:54.440 --> 08:55.440
5

08:55.440 --> 08:56.440
6

08:56.440 --> 08:58.440
那么这边是一个7

08:58.440 --> 08:59.440
懂我的意思吗

08:59.440 --> 09:00.440
你看一下

09:00.440 --> 09:02.440
我们只观察这个区域

09:03.440 --> 09:04.440
只观察这个区域

09:04.440 --> 09:06.440
就好像这边就显示了7一样

09:06.440 --> 09:08.440
实际上是上面东西没有了

09:08.440 --> 09:10.440
然后这个位置改变了

09:10.440 --> 09:11.440
整体就是这样的湿度

09:11.440 --> 09:13.440
实现起来的话

09:13.440 --> 09:15.440
你早准的方法的话

09:15.440 --> 09:16.440
早准的入口点

09:16.440 --> 09:17.440
切入点的话

09:17.440 --> 09:18.440
其实也并没有那么难

09:18.440 --> 09:20.440
这就是我们要实现的过程

09:20.440 --> 09:22.440
那么我们只如何来去实现

09:22.440 --> 09:25.440
我们来想办法去实现一下

09:25.440 --> 09:27.440
我打算把这个玩意儿

09:27.440 --> 09:29.440
就做成一个组件

09:29.440 --> 09:32.440
我们把它叫做Recycle

09:34.440 --> 09:35.440
Score

09:36.440 --> 09:38.440
做成一个组件

09:38.440 --> 09:39.440
表示什么意思呢

09:39.440 --> 09:41.440
一个可回收的滚动

09:41.440 --> 09:42.440
什么叫可回收的滚动呢

09:42.440 --> 09:43.440
就是这些元素

09:43.440 --> 09:45.440
我们会重复的使用

09:45.440 --> 09:46.440
反复的去使用这些元素

09:46.440 --> 09:47.440
只是给它不同的数据

09:47.440 --> 09:48.440
给它不同的位置

09:48.440 --> 09:50.440
这些元素全是绝对定位的

09:50.440 --> 09:52.440
相对于它来进行绝对定位

09:52.440 --> 09:53.440
懂我的意思吗

09:53.440 --> 09:54.440
好

09:54.440 --> 09:56.440
那么接下来我们来试一下

09:57.440 --> 09:59.440
首先写上

09:59.440 --> 10:01.440
我实现的过程比较简单

10:01.440 --> 10:03.440
我只搞定最基本的情况

10:03.440 --> 10:05.440
其实大家可以观察到

10:05.440 --> 10:06.440
刚才我们的讲的东西

10:06.440 --> 10:08.440
所有的一个前提都是

10:08.440 --> 10:10.440
这些里边的元素要定高

10:10.440 --> 10:11.440
高度要固定

10:11.440 --> 10:12.440
如果高度不固定

10:12.440 --> 10:14.440
那就是问题就麻烦了

10:14.440 --> 10:16.440
那问题就特别特别麻烦了

10:16.440 --> 10:18.440
而且就算你能解决

10:18.440 --> 10:20.440
找到一些解决办法

10:20.440 --> 10:22.440
但是也会带来巨大的性能损耗

10:22.440 --> 10:24.440
因为它不知道前面高度有多少

10:24.440 --> 10:26.440
不知道我要这里

10:26.440 --> 10:28.440
要位移多少

10:28.440 --> 10:29.440
这一块比较麻烦

10:29.440 --> 10:31.440
我们这里就假设高度固定

10:31.440 --> 10:33.440
实际上长列表的话

10:33.440 --> 10:34.440
99%的情况

10:34.440 --> 10:36.440
我们都需要它高度固定

10:37.440 --> 10:40.440
然后我们到这边来

10:40.440 --> 10:42.440
我这里打算做成一个什么样子呢

10:43.440 --> 10:44.440
我首先提供

10:44.440 --> 10:46.440
我希望这个玩意就提供这么一个东西

10:46.440 --> 10:48.440
就是外面有一个DIV

10:50.440 --> 10:51.440
给它一个内样式

10:51.440 --> 10:53.440
就叫做Recycle

10:54.440 --> 10:56.440
Scooter

10:58.440 --> 10:59.440
Container

10:59.440 --> 11:01.440
比方说我给它这么一个内样式

11:01.440 --> 11:03.440
然后里边这个DIV

11:03.440 --> 11:04.440
就黄色这个DIV

11:04.440 --> 11:06.440
它在它里边对吧

11:06.440 --> 11:10.440
于是我给它一个Recycle

11:11.440 --> 11:12.440
Scooter

11:13.440 --> 11:14.440
给它一个Wipe

11:18.840 --> 11:19.840
就这个黄色的

11:19.840 --> 11:20.840
那么这里边

11:20.840 --> 11:22.840
每一个一个都是一个DIV

11:22.840 --> 11:24.840
那么我们这里先暂时不写

11:26.840 --> 11:29.840
然后我们这里加上一个样式

11:29.840 --> 11:30.840
首先是它

11:31.840 --> 11:32.840
那么它的高度

11:33.840 --> 11:34.840
是不是要固定了

11:34.840 --> 11:36.840
就外面这个黑框框这个DIV

11:36.840 --> 11:37.840
它的高度是不是要固定

11:37.840 --> 11:39.840
那么它的高度要固定的话

11:39.840 --> 11:41.840
它高度到底应该是多少呢

11:41.840 --> 11:42.840
我其实并不知道

11:43.840 --> 11:45.840
因为我们这里要做成一个通用的组件的话

11:45.840 --> 11:47.840
我不能把它高度写实

11:47.840 --> 11:48.840
因为不同的位置

11:48.840 --> 11:49.840
它的高度可能不一样

11:49.840 --> 11:51.840
它的高度可能是100%

11:51.840 --> 11:52.840
充满页面

11:52.840 --> 11:53.840
也有可能是一个固定的高度

11:53.840 --> 11:54.840
其他的高度

11:54.840 --> 11:55.840
也可能是个百分比

11:55.840 --> 11:56.840
其他的百分比

11:56.840 --> 11:57.840
我都不知道

11:57.840 --> 11:58.840
所以说呢

11:58.840 --> 11:59.840
这个高度我就不去设置了

12:00.840 --> 12:01.840
我让外面的人去设置

12:01.840 --> 12:02.840
比方说我到时候

12:02.840 --> 12:03.840
这边用的时候

12:04.840 --> 12:05.840
这边我们到时候用的时候

12:05.840 --> 12:07.840
我就可以这样子倒入

12:09.840 --> 12:10.840
Recycle

12:11.840 --> 12:12.840
Component

12:13.840 --> 12:14.840
Recycle spoiler

12:14.840 --> 12:17.540
注册一下

12:17.540 --> 12:18.540
到时候我用的时候

12:18.540 --> 12:19.540
我就这样子

12:22.870 --> 12:23.870
给它一个Class

12:23.870 --> 12:24.870
对吧

12:24.870 --> 12:25.870
比方说这里呢

12:25.870 --> 12:26.870
我就给它一个

12:26.870 --> 12:27.870
我们自己的样式

12:27.870 --> 12:28.870
那么这样

12:28.870 --> 12:29.870
这边呢

12:29.870 --> 12:30.870
我们是不是可以设置关度

12:30.870 --> 12:31.870
Martin的布局方式

12:31.870 --> 12:32.870
它的高度

12:32.870 --> 12:33.870
然后

12:33.870 --> 12:34.870
只是你Overflow

12:34.870 --> 12:35.870
O2不用设置的

12:35.870 --> 12:36.870
我们在这里边呢

12:36.870 --> 12:37.870
可以给它设置

12:37.870 --> 12:38.870
因为为什么呢

12:38.870 --> 12:41.870
因为无论你外面的高度是多少

12:41.870 --> 12:42.870
我们现在要做的是

12:42.870 --> 12:43.870
滚动条的效果

12:43.870 --> 12:44.870
对吧

12:44.870 --> 12:45.870
虚的滚动的效果

12:45.870 --> 12:46.870
这个过程叫虚的滚动

12:46.870 --> 12:47.870
虚的滚动的效果

12:47.870 --> 12:48.870
那么肯定有滚动条

12:48.870 --> 12:49.870
所以说我们Overflow

12:49.870 --> 12:50.870
设为O2

12:50.870 --> 12:52.870
就把这个样式给它设置一下

12:52.870 --> 12:53.870
它高度的一些东西

12:53.870 --> 12:54.870
你自己去控制

12:54.870 --> 12:55.870
对吧

12:55.870 --> 12:56.870
这边我们可以通过

12:56.870 --> 12:57.870
给它注入一个内名

12:57.870 --> 12:58.870
我们之前想过

12:58.870 --> 12:59.870
这样的内名

12:59.870 --> 13:00.870
是不是会注入到

13:00.870 --> 13:02.870
这个组件的根源书上

13:02.870 --> 13:03.870
对吧

13:03.870 --> 13:05.870
那么应用到它的根源书上

13:05.870 --> 13:06.870
这样子没问题吧

13:06.870 --> 13:07.870
好

13:07.870 --> 13:08.870
所以我们来看一下效果

13:09.870 --> 13:10.870
目前我们这里

13:10.870 --> 13:11.870
是不是就多了这么一个DIV

13:11.870 --> 13:12.870
它的高度是不固定的

13:12.870 --> 13:13.870
Overflow

13:13.870 --> 13:14.870
O2

13:14.870 --> 13:15.870
这个玩意儿搞定了

13:15.870 --> 13:16.870
对不对

13:16.870 --> 13:17.870
好

13:17.870 --> 13:18.870
然后它里边这个DIV呢

13:18.870 --> 13:20.870
它里边这个DIV

13:20.870 --> 13:21.870
首先它肯定

13:21.870 --> 13:23.870
它应该是一个相对定位

13:23.870 --> 13:24.870
为什么呢

13:24.870 --> 13:25.870
因为它一会

13:25.870 --> 13:26.870
它里边会有一些

13:26.870 --> 13:27.870
绝对定位元素

13:27.870 --> 13:28.870
来相对它来进行定位的

13:28.870 --> 13:29.870
所以它本身

13:29.870 --> 13:30.870
应该是一个相对定位

13:30.870 --> 13:31.870
对吧

13:31.870 --> 13:33.870
这里边东西还比较复杂

13:33.870 --> 13:34.870
好

13:34.870 --> 13:35.870
我们这里呢

13:35.870 --> 13:36.870
如果说你实在听不懂的话

13:36.870 --> 13:37.870
就听个热闹

13:37.870 --> 13:38.870
实在听不懂的话

13:38.870 --> 13:39.870
最后我会告诉大家

13:39.870 --> 13:41.870
其实别人已经给你做好了

13:41.870 --> 13:42.870
有这么一个线程的

13:42.870 --> 13:43.870
这么一个组件

13:43.870 --> 13:44.870
你到时候

13:44.870 --> 13:45.870
你从npm上去下载

13:45.870 --> 13:46.870
直接用就行了

13:46.870 --> 13:47.870
以后我会介绍

13:48.870 --> 13:49.870
好

13:49.870 --> 13:50.870
Wiper

13:50.870 --> 13:51.870
那么它应该是一个Plation

13:51.870 --> 13:52.870
Relating

13:55.180 --> 13:56.180
对不对

13:56.180 --> 13:57.180
好

13:57.180 --> 13:58.180
那么现在一个问题

13:58.180 --> 13:59.180
一个问题解决

13:59.180 --> 14:00.180
首先第一个问题

14:00.180 --> 14:01.180
它的高度应该是多少

14:02.180 --> 14:03.180
它的高度应该是多少

14:03.180 --> 14:04.180
我并不知道

14:04.180 --> 14:05.180
它的高度应该是多少

14:05.180 --> 14:06.180
对不对

14:06.180 --> 14:07.180
它的高度取决于什么

14:08.180 --> 14:09.180
就这个玩意的高度

14:09.180 --> 14:10.180
取决于你给我

14:10.180 --> 14:12.180
有多少条数据

14:13.180 --> 14:14.180
所以取决于多少条数据

14:14.180 --> 14:16.180
而且还要取决于什么

14:16.180 --> 14:17.180
还要取决于

14:17.180 --> 14:18.180
每一条数据

14:18.180 --> 14:20.180
它对应的高度

14:20.180 --> 14:21.180
比方说一条数据

14:21.180 --> 14:22.180
对应50个相

14:22.180 --> 14:23.180
50个相处的高度

14:23.180 --> 14:25.180
你给我一万条数据

14:25.180 --> 14:26.180
那么是不是应该

14:26.180 --> 14:27.180
高度应该是50万

14:27.180 --> 14:28.180
所以它的高度

14:28.180 --> 14:29.180
是不是算出来的

14:29.180 --> 14:30.180
对不对

14:30.180 --> 14:32.180
它的高度应该算出来

14:32.180 --> 14:33.180
好

14:33.180 --> 14:34.180
于是我们就开始

14:34.180 --> 14:35.180
希望来开始计算

14:35.180 --> 14:36.180
我们在这里

14:36.180 --> 14:37.180
准备一个数据

14:37.180 --> 14:38.180
其中一个数据

14:38.180 --> 14:40.180
叫做TotalSize

14:40.180 --> 14:41.180
默认为0

14:41.180 --> 14:42.180
就是总高度

14:43.180 --> 14:46.260
总高度

14:46.260 --> 14:47.260
好那么这个数据

14:47.260 --> 14:48.260
怎么来算呢

14:48.260 --> 14:49.260
这个数据

14:50.260 --> 14:51.260
这个数据咋算呢

14:51.260 --> 14:53.260
这个数据的计算方式

14:53.260 --> 14:54.260
实际上

14:54.260 --> 14:57.260
就是每一个元素的高度

14:57.260 --> 15:00.260
乘以数据的总量

15:00.260 --> 15:01.260
对不对

15:01.260 --> 15:02.260
你先不考虑

15:02.260 --> 15:03.260
这里边的东西

15:03.260 --> 15:04.260
我就考虑

15:04.260 --> 15:05.260
这个元素的高度

15:05.260 --> 15:06.260
应该是多少

15:06.260 --> 15:07.260
那么数据总量

15:07.260 --> 15:08.260
我知不知道

15:08.260 --> 15:09.260
这个组件里面

15:09.260 --> 15:10.260
知不知道

15:10.260 --> 15:11.260
因为我要把它

15:11.260 --> 15:12.260
做成一个通用性的东西

15:12.260 --> 15:13.260
那因此

15:13.260 --> 15:14.260
有哪些数据

15:14.260 --> 15:15.260
你再传给我

15:15.260 --> 15:17.260
所以说我需要写一些属性

15:17.260 --> 15:18.260
你给我传一些数据

15:18.260 --> 15:19.260
那么比方说

15:19.260 --> 15:21.260
其中一个数据叫Items

15:21.260 --> 15:22.260
那一行

15:22.260 --> 15:25.260
我就把它定一个

15:27.260 --> 15:28.260
数据

15:28.260 --> 15:30.260
就是我有哪些数据

15:32.260 --> 15:35.260
数据的数据

15:35.260 --> 15:36.260
你给我一个数据

15:36.260 --> 15:37.260
这个数据

15:37.260 --> 15:38.260
可能长度为1万

15:38.260 --> 15:39.260
可能长度为20万

15:39.260 --> 15:40.260
都无所谓

15:40.260 --> 15:42.260
反正你给我一个数据的数据

15:43.260 --> 15:44.260
默认呢

15:44.260 --> 15:45.260
我给它个默认值吧

15:47.260 --> 15:48.260
给它个默认值

15:49.260 --> 15:50.260
好你还要给我个什么呢

15:50.260 --> 15:51.260
Item size

15:52.260 --> 15:54.260
就是每一条数据的高度

15:55.260 --> 15:57.260
每一条数据的高度

15:58.260 --> 15:59.260
那么类型呢

15:59.260 --> 16:00.260
当然是Number

16:02.260 --> 16:03.260
默认值呢

16:03.260 --> 16:05.260
是给它个0吗

16:06.260 --> 16:08.260
于是我这边用的时候

16:08.260 --> 16:09.260
是不是要传给它

16:09.260 --> 16:11.260
这边是不是要传给它

16:11.260 --> 16:12.260
一个个来传吧

16:12.260 --> 16:15.260
有一个Items

16:15.260 --> 16:16.260
我们就传什么

16:16.260 --> 16:17.260
就传我们的数据Items

16:17.260 --> 16:18.260
传过去

16:18.260 --> 16:19.260
有这么多数据

16:19.260 --> 16:20.260
全部给你

16:20.260 --> 16:21.260
你去控制

16:21.260 --> 16:22.260
因为我并不

16:22.260 --> 16:24.260
并不一定要渲染所有的数据

16:24.260 --> 16:25.260
我只渲染其中一部分

16:25.260 --> 16:26.260
所以说你去控制吧

16:26.260 --> 16:27.260
我不管了

16:27.260 --> 16:28.260
交给你

16:28.260 --> 16:29.260
然后我要告诉你

16:29.260 --> 16:30.260
每一个数据

16:30.260 --> 16:31.260
它对你的高度

16:31.260 --> 16:32.260
Size

16:32.260 --> 16:33.260
比方说高处理

16:33.260 --> 16:34.260
每个高度是54

16:34.260 --> 16:35.260
因为我这边的

16:35.260 --> 16:36.260
这个组件里面的高度

16:36.260 --> 16:37.260
我定了54

16:38.260 --> 16:40.260
那么这两个信息告诉你

16:40.260 --> 16:41.260
这两个信息

16:41.260 --> 16:42.260
高处理的之后了

16:42.260 --> 16:43.260
这边

16:45.260 --> 16:49.370
到这边来

16:49.370 --> 16:50.370
就这

16:50.370 --> 16:51.370
那么这个玩意

16:51.370 --> 16:52.370
是不是可以设置呢

16:52.370 --> 16:53.370
对不对

16:53.370 --> 16:54.370
怎么设置呢

16:54.370 --> 16:55.370
我们这里

16:55.370 --> 16:56.370
是不是可以用

16:56.370 --> 16:58.370
ThisItems

17:00.370 --> 17:01.370
然后点

17:02.370 --> 17:03.370
乘以

17:03.370 --> 17:05.370
ThisItemsSize

17:06.370 --> 17:07.370
是不是可以这样设置

17:08.370 --> 17:09.370
保存

17:09.370 --> 17:10.370
咱们来看一下

17:10.370 --> 17:11.370
刷新

17:12.370 --> 17:13.370
这边我们找到这个5U组件

17:13.370 --> 17:15.370
看一下它里面的数据

17:15.370 --> 17:16.370
有没有设置成功

17:16.370 --> 17:17.370
数据

17:18.370 --> 17:19.370
是不是54万

17:20.370 --> 17:21.370
总高度是54万

17:21.370 --> 17:22.370
对不对

17:22.370 --> 17:23.370
这个没问题吧

17:26.370 --> 17:27.370
实际上

17:27.370 --> 17:29.370
这里去设置了

17:29.370 --> 17:30.370
其实我们也可以

17:30.370 --> 17:31.370
把它做一个计算属性

17:31.370 --> 17:32.370
这个偷偷Size

17:32.370 --> 17:33.370
为什么呢

17:33.370 --> 17:34.370
因为这两个东西

17:34.370 --> 17:35.370
如果说变化了之后

17:35.370 --> 17:36.370
那么这个偷偷Size

17:36.370 --> 17:38.370
它也会自动发生变化

17:38.370 --> 17:39.370
所以说我可以

17:39.370 --> 17:40.370
也可以把它做一个计算属性

17:40.370 --> 17:41.370
computer

17:41.370 --> 17:42.370
当然你也可以

17:42.370 --> 17:43.370
用别的方式

17:43.370 --> 17:44.370
比方说watch

17:44.370 --> 17:45.370
watch监控这两个的变化

17:45.370 --> 17:46.370
变化之后

17:46.370 --> 17:47.370
我重新给它设置

17:47.370 --> 17:48.370
也可以

17:48.370 --> 17:49.370
方法有了

17:49.370 --> 17:50.370
有很多

17:52.870 --> 17:53.870
总高度

17:53.870 --> 17:54.870
我们垫上了

17:54.870 --> 18:00.060
先有空吗

18:00.060 --> 18:01.060
好了

18:01.060 --> 18:02.060
有了这个

18:02.060 --> 18:04.060
computer怎么去设置成这个样子

18:04.060 --> 18:05.060
写错了

18:07.060 --> 18:08.060
偷偷Size

18:10.500 --> 18:11.500
有了这个计算属性过后

18:11.500 --> 18:13.500
现在我们总高度是不是出来了

18:13.500 --> 18:14.500
然后我们看一下

18:14.500 --> 18:16.820
一样的

18:16.820 --> 18:17.820
偷偷Size

18:17.820 --> 18:18.820
是不是出来了

18:18.820 --> 18:19.820
那么有了个总高度过后

18:19.820 --> 18:21.820
我们是不是可以动态的在这里

18:21.820 --> 18:22.820
使用style

18:22.820 --> 18:23.820
给它设置高度

18:23.820 --> 18:24.820
它的高度

18:24.820 --> 18:25.820
height

18:25.820 --> 18:26.820
应该是多少的

18:26.820 --> 18:27.820
是不是就是应该

18:27.820 --> 18:28.820
是

18:29.820 --> 18:30.820
偷偷Size

18:31.820 --> 18:32.820
那PX

18:32.820 --> 18:33.820
是不是它的总高度

18:34.820 --> 18:35.820
咱们就这样一设置的话

18:35.820 --> 18:36.820
你就会看到

18:36.820 --> 18:37.820
效果其实已经出来了

18:37.820 --> 18:38.820
滚动条是不是出来了

18:39.820 --> 18:40.820
对不对

18:40.820 --> 18:41.820
然后我们来看一下

18:41.820 --> 18:42.820
元素结构特别简单

18:42.820 --> 18:43.820
外面一个DIV

18:43.820 --> 18:44.820
有个高度固定

18:45.820 --> 18:47.820
有个overflow out

18:47.820 --> 18:48.820
然后这里边

18:48.820 --> 18:50.820
有一个很长很长的DIV

18:51.820 --> 18:52.820
这个DIV

18:52.820 --> 18:53.820
以为它很高

18:53.820 --> 18:54.820
所以说

18:54.820 --> 18:55.820
导致它出现了滚动条

18:55.820 --> 18:56.820
它滚动的时候

18:56.820 --> 18:57.820
它就滚动了

18:57.820 --> 18:58.820
是它

18:58.820 --> 18:59.820
没意思

18:59.820 --> 19:00.820
这个DIV

19:00.820 --> 19:01.820
就出来了

19:01.820 --> 19:02.820
50万的高度

19:03.820 --> 19:04.820
现在我们的渲染压力大吗

19:04.820 --> 19:06.820
现在有没有渲染压力

19:06.820 --> 19:07.820
任何渲染压力

19:07.820 --> 19:08.820
我们来看一下

19:08.820 --> 19:10.820
我们目前的性能

19:12.820 --> 19:13.820
重新录制

19:13.820 --> 19:14.820
刷新

19:14.820 --> 19:15.820
停止

19:17.820 --> 19:18.820
现在有渲染压力吗

19:18.820 --> 19:19.820
一点渲染压力都没有

19:19.820 --> 19:20.820
对不对

19:20.820 --> 19:21.820
这一段脚笨了

19:21.820 --> 19:22.820
无非就是我刚才循环了

19:22.820 --> 19:24.820
一万次加了一些对象进去

19:24.820 --> 19:25.820
其他哪有渲染压力

19:25.820 --> 19:26.820
你看这里边

19:26.820 --> 19:29.820
渲染的时间一毫秒

19:30.820 --> 19:31.820
内存占用也不高

19:31.820 --> 19:32.820
很少的内存占用

19:33.820 --> 19:34.820
咱们继续玩

19:34.820 --> 19:35.820
继续

19:36.820 --> 19:37.820
接下来的问题

19:37.820 --> 19:39.820
就是我这里不要渲染哪些东西的问题了

19:41.820 --> 19:42.820
那么这个玩意

19:42.820 --> 19:43.820
怎么做呢

19:43.820 --> 19:44.820
你能不能去循环它

19:44.820 --> 19:45.820
你去循环它

19:45.820 --> 19:46.820
你就封掉了

19:46.820 --> 19:48.820
因为这里边有一万项

19:48.820 --> 19:49.820
可能还有十万项

19:49.820 --> 19:50.820
你说不准有多少

19:50.820 --> 19:52.820
说你不能去循环它

19:52.820 --> 19:54.820
那我们应该是

19:54.820 --> 19:56.820
从里边解决一部分数据

19:56.820 --> 19:57.820
出来来进行渲染

19:57.820 --> 19:58.820
对不对

19:58.820 --> 19:59.820
哪怕你有一万项

19:59.820 --> 20:00.820
我可能我可见了

20:00.820 --> 20:01.820
就那么一点点

20:01.820 --> 20:03.820
说我要解决一部分数据

20:03.820 --> 20:04.820
来进行渲染

20:04.820 --> 20:05.820
而且

20:05.820 --> 20:06.820
一个数据呢

20:06.820 --> 20:08.820
它对应一个位置

20:08.820 --> 20:09.820
比方说

20:09.820 --> 20:10.820
我们刚才看到了

20:10.820 --> 20:12.820
渲染到这的时候

20:12.820 --> 20:13.820
你看这个时候

20:13.820 --> 20:14.820
每一个数据

20:14.820 --> 20:15.820
它有一个位置

20:15.820 --> 20:16.820
它有一个位置

20:16.820 --> 20:17.820
就是你上面的距离

20:17.820 --> 20:18.820
因为它每个都是

20:18.820 --> 20:19.820
绝对定位

20:19.820 --> 20:20.820
这个数据有一个位置

20:20.820 --> 20:21.820
都是一个

20:21.820 --> 20:23.820
绝对定位的距离

20:23.820 --> 20:24.820
所以说呢

20:24.820 --> 20:25.820
我们这一块

20:25.820 --> 20:26.820
该怎么弄的

20:26.820 --> 20:27.820
我们可以这样

20:27.820 --> 20:28.820
在data里边

20:28.820 --> 20:29.820
准备好一个数据

20:29.820 --> 20:30.820
叫做poo

20:30.820 --> 20:31.820
就是我们的渲染池

20:32.820 --> 20:33.820
什么意思呢

20:33.820 --> 20:34.820
就是渲染池

20:36.820 --> 20:37.820
渲染池

20:40.320 --> 20:43.320
保存当前需要

20:43.320 --> 20:45.320
渲染的数据

20:46.320 --> 20:47.320
这里边

20:47.320 --> 20:48.320
这个数组里边

20:48.320 --> 20:49.320
比方说我有一万条数据

20:49.320 --> 20:51.320
这里边可能只有十条数据

20:51.320 --> 20:52.320
我就渲染这十条数据

20:52.320 --> 20:53.320
就行了

20:53.320 --> 20:54.320
好

20:54.320 --> 20:55.320
那么于是我这边

20:55.320 --> 20:56.320
渲染的时候

20:56.320 --> 20:57.320
应该是循环哪一个

20:57.320 --> 20:59.320
是不是循环他去渲染

20:59.320 --> 21:00.320
对吧

21:00.320 --> 21:01.320
而且在这里边

21:01.320 --> 21:02.320
每一条数据

21:02.320 --> 21:04.320
我希望是这么一种格式

21:04.320 --> 21:06.320
它不仅要记录数据

21:06.320 --> 21:08.320
每一条数据是这种格式

21:08.320 --> 21:09.320
有一个item

21:09.320 --> 21:11.320
它记录原始数据

21:11.320 --> 21:12.320
什么意思呢

21:12.320 --> 21:13.320
就是我这边

21:13.320 --> 21:15.320
比方说我给它传了一些

21:15.320 --> 21:16.320
我给它传了一些对象进来

21:16.320 --> 21:17.320
每个对象是这个样子

21:17.320 --> 21:19.320
每个对象就是个原始数据

21:20.320 --> 21:22.320
我有个原始数据

21:22.320 --> 21:23.320
这个原始数据

21:23.320 --> 21:25.320
对应这个数组里边每一项

21:25.320 --> 21:27.320
然后还有一个叫做plation

21:30.530 --> 21:31.530
相当于是

21:32.530 --> 21:33.530
该数据

21:33.530 --> 21:34.530
对应的

21:35.530 --> 21:36.530
偏一位置

21:37.530 --> 21:38.530
啥意思啊

21:38.530 --> 21:39.530
我给你们说一下

21:40.530 --> 21:41.530
首先我们到这来

21:42.530 --> 21:43.530
比方说这种情况下

21:43.530 --> 21:44.530
这一条

21:44.530 --> 21:45.530
我们只看这一条

21:46.530 --> 21:47.530
只看这一条数据

21:47.530 --> 21:48.530
就这一条数据

21:48.530 --> 21:49.530
这一条数据的话

21:49.530 --> 21:50.530
它里边的

21:50.530 --> 21:51.530
它这一项

21:51.530 --> 21:52.530
它的item

21:52.530 --> 21:53.530
要对应

21:53.530 --> 21:54.530
它的原始数据

21:54.530 --> 21:55.530
就是2

21:56.530 --> 21:57.530
然后它还有一个plation

21:57.530 --> 21:58.530
这个plation

21:58.530 --> 21:59.530
什么意思呢

21:59.530 --> 22:00.530
就表示因为它是绝对定位

22:00.530 --> 22:01.530
这里边的所有元数

22:01.530 --> 22:02.530
全是绝对定位

22:03.530 --> 22:05.530
就是相对于上面的偏一辆

22:05.530 --> 22:06.530
就是plation

22:06.530 --> 22:07.530
没了意思吧

22:07.530 --> 22:09.530
我们要做到这一点

22:10.530 --> 22:11.530
我再解释一次

22:12.530 --> 22:13.530
就是每一条数

22:13.530 --> 22:14.530
这里边的词字里边

22:14.530 --> 22:15.530
每一条数据

22:15.530 --> 22:16.530
是一个对象

22:16.530 --> 22:17.530
对象里边有个item数据

22:17.530 --> 22:18.530
它对应它的原始数据

22:18.530 --> 22:19.530
原始数据数字

22:19.530 --> 22:20.530
它就是数字

22:20.530 --> 22:21.530
原始数据是一个对象

22:21.530 --> 22:22.530
它就是对给对象

22:22.530 --> 22:23.530
比方怎么叫原始数据

22:23.530 --> 22:24.530
就这边

22:24.530 --> 22:25.530
传建这个数据

22:25.530 --> 22:26.530
数据里边每一项

22:26.530 --> 22:27.530
就是个原始数据

22:28.530 --> 22:29.530
然后另外一个plation

22:29.530 --> 22:31.530
它对应的一个偏一辆

22:31.530 --> 22:32.530
那么假设

22:32.530 --> 22:33.530
我们有了这么一个数据

22:33.530 --> 22:34.530
假设有了它的过后

22:34.530 --> 22:35.530
是不是这边

22:35.530 --> 22:36.530
我就知道怎么选择了

22:36.530 --> 22:38.530
我就循环生成一个div

22:38.530 --> 22:39.530
给它的样式

22:39.530 --> 22:44.530
叫做recycle scroller item

22:46.530 --> 22:47.530
这个div

22:47.530 --> 22:48.530
然后呢

22:49.530 --> 22:51.530
我就用v4去循环它

22:51.530 --> 22:53.530
每循环一次生

22:53.530 --> 22:56.530
或者是没有循环一次吧

22:56.530 --> 22:57.530
硬

22:57.530 --> 22:59.530
循环怎么铺

22:59.530 --> 23:02.030
然后key值

23:02.030 --> 23:03.030
这个key值呢

23:03.030 --> 23:05.030
我们一般来说

23:06.030 --> 23:07.030
要对应原始数据的key值

23:07.030 --> 23:08.030
比方原始数据

23:08.030 --> 23:10.030
给我了一个评论列表

23:10.030 --> 23:12.030
那么每个评论是不是有个id

23:12.030 --> 23:13.030
对不对

23:13.030 --> 23:14.030
那么我就从原始数据里边

23:14.030 --> 23:16.030
去读它的id

23:16.030 --> 23:17.030
因为这意思吧

23:17.030 --> 23:18.030
key值往往是通过

23:18.030 --> 23:19.030
这样的方式来设置的

23:19.030 --> 23:21.030
但是它不一定使用

23:21.030 --> 23:22.030
使用id来作为

23:22.030 --> 23:23.030
尾一编号

23:23.030 --> 23:24.030
可能是用

23:24.030 --> 23:26.030
可能用的是pid

23:26.030 --> 23:27.030
可能是用一些别的属性名

23:27.030 --> 23:28.030
所以说呢

23:28.030 --> 23:29.030
我希望你通过属性来告诉我

23:29.030 --> 23:31.030
你到底是哪一个属性名

23:31.030 --> 23:33.030
来表示尾一的东西

23:33.030 --> 23:35.030
key field

23:35.030 --> 23:38.470
我希望你通过这个属性

23:38.470 --> 23:39.470
这个属性来告诉我

23:39.470 --> 23:41.470
到底通过哪一个属性名字

23:41.470 --> 23:43.470
来表示尾一的东西

23:43.470 --> 23:45.470
默认之那就是id

23:45.470 --> 23:46.470
我就取id

23:46.470 --> 23:48.470
懂了什么意思吧

23:48.470 --> 23:49.470
就是

23:49.470 --> 23:53.470
给我的items数组中

23:53.470 --> 23:55.470
每个对象

23:55.470 --> 23:58.470
哪个属性

23:59.470 --> 24:01.470
代表

24:01.470 --> 24:06.470
尾一且稳定的编号

24:06.470 --> 24:07.470
如果说里面别传的话

24:07.470 --> 24:08.470
我就默认去读

24:08.470 --> 24:09.470
它里边的属性

24:09.470 --> 24:10.470
id属性

24:10.470 --> 24:12.470
默认去读它

24:12.470 --> 24:14.470
好 于是我这边怎么写的

24:14.470 --> 24:15.470
这边怎么写

24:15.470 --> 24:16.470
我循环的是啥

24:16.470 --> 24:17.470
循环的是这个东西

24:17.470 --> 24:18.470
这个东西

24:18.470 --> 24:20.470
每一个属性叫item

24:20.470 --> 24:21.470
对不对

24:21.470 --> 24:22.470
这才是原始数据

24:22.470 --> 24:23.470
原始数据里边

24:23.470 --> 24:24.470
我通过它

24:24.470 --> 24:26.470
把它的属性读出来

24:26.470 --> 24:27.470
来作为它的key值

24:27.470 --> 24:29.470
这里咋写的

24:29.470 --> 24:30.470
item.item

24:30.470 --> 24:31.470
为什么是item.item

24:31.470 --> 24:33.470
这里每一项item

24:33.470 --> 24:34.470
指的是它

24:34.470 --> 24:35.470
我刚才换一个名字吧

24:35.470 --> 24:37.470
别搞云了

24:37.470 --> 24:40.470
po-item

24:40.470 --> 24:42.470
这边就是po-item.item

24:42.470 --> 24:44.470
是否得到原始数据

24:44.470 --> 24:45.470
原始数据哪个属性

24:45.470 --> 24:47.470
这个值代表的属性

24:47.470 --> 24:48.470
于是我一个动态表老师

24:48.470 --> 24:50.470
用keyfield

24:50.470 --> 24:52.470
如果说你

24:52.470 --> 24:53.470
尽量听吧

24:53.470 --> 24:55.470
如果说你实在听不懂

24:56.470 --> 24:58.470
我觉得它也没有那么复杂

24:58.470 --> 24:59.470
如果说你实在听不懂的话

24:59.470 --> 25:00.470
那就一会

25:00.470 --> 25:02.470
你可以听过这了

25:02.470 --> 25:04.470
以后看一下别人的

25:04.470 --> 25:05.470
怎么用就行了

25:05.470 --> 25:07.470
你知道怎么用就行了

25:07.470 --> 25:08.470
好

25:08.470 --> 25:09.470
那么这里我就把key值

25:09.470 --> 25:11.470
给它绑进去

25:11.470 --> 25:12.470
好

25:12.470 --> 25:14.470
接下来我给它设置一下样式

25:17.550 --> 25:19.550
设置一下样式

25:19.550 --> 25:20.550
它自然而然

25:20.550 --> 25:21.550
应该是一个绝对定位

25:21.550 --> 25:23.550
刚才已经分析过了

25:23.550 --> 25:24.550
它里边的所有的元素

25:24.550 --> 25:25.550
全是一个绝对定位

25:25.550 --> 25:26.550
绝对定位的宽度

25:27.550 --> 25:29.550
百分之百

25:29.550 --> 25:30.550
然后呢

25:33.550 --> 25:35.550
它的left为0

25:35.550 --> 25:37.550
top值为0

25:37.550 --> 25:39.550
ok 这就是这个元素

25:39.550 --> 25:40.550
当然现在能看到效果吗

25:40.550 --> 25:41.550
现在看不到效果

25:41.550 --> 25:42.550
为什么看不到效果呢

25:42.550 --> 25:44.550
因为我这个pool是空的

25:44.550 --> 25:46.550
这个池子是空的

25:46.550 --> 25:47.550
对不对

25:47.550 --> 25:48.550
所以说我们现在要做的

25:48.550 --> 25:49.550
所有的事情就是

25:49.550 --> 25:50.550
把这个数据搞定

25:50.550 --> 25:51.550
那么这个数据

25:51.550 --> 25:53.550
我们带multi的里边

25:53.550 --> 25:55.550
我们加载完成过后的这个组件

25:55.550 --> 25:56.550
我们需要调用一个方法

25:56.550 --> 25:58.550
通过一个方法来搞定这件事情

26:00.550 --> 26:02.550
比方说set pool

26:02.550 --> 26:03.550
有这么一个方法

26:03.550 --> 26:04.550
假设

26:04.550 --> 26:05.550
我们这里呢

26:05.550 --> 26:06.550
set pool

26:06.550 --> 26:07.550
是不是调用这个方法

26:07.550 --> 26:08.550
调用这个方法

26:08.550 --> 26:09.550
是不是就搞定了

26:09.550 --> 26:10.550
这个方法就要做的事情

26:10.550 --> 26:11.550
就是把这个数据

26:11.550 --> 26:12.550
填充好

26:12.550 --> 26:13.550
那么这个方法

26:13.550 --> 26:14.550
怎么去实现呢

26:14.550 --> 26:16.550
我们先简单的来实现一下

26:17.550 --> 26:18.550
实现一下这个方法

26:18.550 --> 26:19.550
这个方法

26:19.550 --> 26:20.550
我们可以这样子

26:20.550 --> 26:22.550
set pool

26:22.550 --> 26:24.550
先来一个测试数据

26:24.550 --> 26:25.550
夹这个数据重新复制

26:25.550 --> 26:26.550
复制为什么呢

26:26.550 --> 26:28.550
我就从这个数据里面解一段

26:28.550 --> 26:29.550
比方说解10个

26:29.550 --> 26:30.550
解20个

26:30.550 --> 26:32.550
我就用这个z items

26:32.550 --> 26:33.550
先测试一下

26:33.550 --> 26:34.550
snice

26:35.550 --> 26:36.550
从0解到下边为20

26:36.550 --> 26:37.550
当然取不到20

26:38.550 --> 26:39.550
解20个数据

26:40.550 --> 26:41.550
然后呢

26:41.550 --> 26:42.550
因为这个数据呢

26:42.550 --> 26:43.550
是原式数据

26:43.550 --> 26:45.550
是原式对象的数据

26:45.550 --> 26:47.550
那么我要把它编成

26:47.550 --> 26:48.550
这种格式

26:48.550 --> 26:49.550
是不是要用映射

26:49.550 --> 26:50.550
对吧

26:50.550 --> 26:52.550
把原式数据映射成这个东西

26:52.550 --> 26:54.550
就是我们这里用一个map

26:54.550 --> 26:55.550
原式数据

26:56.550 --> 26:57.550
然后映射成为一个什么的

26:57.550 --> 26:58.550
映射成为对象

26:58.550 --> 26:59.550
对象里面有两个属性

26:59.550 --> 27:00.550
一个item

27:00.550 --> 27:02.550
就等于原式数据

27:02.550 --> 27:03.550
还有什么

27:03.550 --> 27:04.550
还有pration

27:04.550 --> 27:05.550
pration的话我就

27:06.550 --> 27:07.550
默认为0吗

27:07.550 --> 27:08.550
随便来一个

27:08.550 --> 27:11.760
好

27:11.760 --> 27:12.760
那么我们来看一下

27:13.760 --> 27:14.760
放心

27:14.760 --> 27:15.760
你看这里边

27:15.760 --> 27:17.760
数据是不是出来了

27:17.760 --> 27:18.760
对吧

27:18.760 --> 27:19.760
全是绝对定位

27:19.760 --> 27:20.760
你看

27:20.760 --> 27:21.760
下面全是绝对定位

27:21.760 --> 27:23.760
那么它为什么没有便宜量呢

27:24.760 --> 27:25.760
我们把便宜量搞定

27:26.760 --> 27:27.760
就是它的位置

27:27.760 --> 27:28.760
我们把位置给它了

27:28.760 --> 27:29.760
对吧

27:29.760 --> 27:30.760
但是它没有便宜

27:30.760 --> 27:31.760
那么没有便宜怎么办呢

27:31.760 --> 27:32.760
我这里是不是可以非常简单

27:32.760 --> 27:34.760
我是不是可以設置一个style

27:36.760 --> 27:37.760
这个style也非常简单

27:37.760 --> 27:38.760
就用一个transform

27:40.760 --> 27:41.760
transform

27:41.760 --> 27:46.350
transnate y

27:46.350 --> 27:47.350
y做它的便宜

27:47.350 --> 27:48.350
便宜多少呢

27:48.350 --> 27:50.350
是不是便宜它的pration

27:50.350 --> 27:52.350
pration你给我的是多少

27:52.350 --> 27:53.350
我就便宜多少

27:53.350 --> 27:54.350
比方说pration

27:54.350 --> 27:55.350
pration给我的是

27:56.350 --> 27:57.350
60

27:57.350 --> 27:58.350
那我就便宜一个60

27:58.350 --> 27:59.350
对吧

27:59.350 --> 28:00.350
每一个元素的便宜量

28:00.350 --> 28:01.350
是不一样的

28:01.350 --> 28:02.350
那么我这里

28:02.350 --> 28:04.350
就是给它设置一下

28:04.350 --> 28:05.350
为

28:05.350 --> 28:06.350
pration

28:12.350 --> 28:13.350
好

28:13.350 --> 28:14.350
咱们来看一下

28:14.350 --> 28:15.350
但现在目前

28:15.350 --> 28:16.350
其实你也还看不到

28:16.350 --> 28:17.350
出来的效果

28:17.350 --> 28:18.350
但是transnate y

28:18.350 --> 28:19.350
是不是就出来了

28:19.350 --> 28:20.350
但是由于

28:20.350 --> 28:21.350
目前我给它

28:21.350 --> 28:23.350
全部都是0

28:23.350 --> 28:24.350
所以说你看到的

28:24.350 --> 28:25.350
都还是重複在一起的

28:26.350 --> 28:27.350
那我怎么样

28:27.350 --> 28:28.350
怎么样是这个pration

28:28.350 --> 28:29.350
我其实可以

28:29.350 --> 28:30.350
这里可以简单测试一下

28:30.350 --> 28:31.350
比方说这里map的时候

28:31.350 --> 28:32.350
是不是有这个材料

28:32.350 --> 28:34.350
它说表示它的下标

28:34.350 --> 28:35.350
第一个就是0

28:35.350 --> 28:37.350
第二个就是54

28:37.350 --> 28:39.350
第三个就是54x12

28:41.350 --> 28:43.350
是不是就是i 成义

28:43.350 --> 28:44.350
item size

28:44.350 --> 28:45.350
对吧

28:45.350 --> 28:46.350
这个也很简单

28:46.350 --> 28:48.350
我们这里就是用i 成义

28:48.350 --> 28:50.350
this叫item size

28:50.350 --> 28:52.350
好保存你看一下

28:52.350 --> 28:54.860
你看

28:54.860 --> 28:55.860
你看那个位置

28:55.860 --> 28:56.860
是不是就出来了

28:56.860 --> 28:57.860
只不过它里边没东西

28:57.860 --> 28:58.860
对吧

28:58.860 --> 28:59.860
好 那么我现在

28:59.860 --> 29:01.860
搞定它里边的东西

29:01.860 --> 29:03.860
那么现在的问题

29:03.860 --> 29:08.900
为什么一个红色呢

29:08.900 --> 29:10.900
代码没错呀

29:10.900 --> 29:12.900
后来一个红色啥意思

29:12.900 --> 29:18.060
甭管它吧

29:18.060 --> 29:19.060
这个是啥意思

29:19.060 --> 29:23.980
来到一个红色

29:23.980 --> 29:24.980
它应该是提示的问题

29:24.980 --> 29:25.980
应该是我的一插件提示的问题

29:25.980 --> 29:26.980
不管它

29:26.980 --> 29:28.980
代码是没问题的

29:28.980 --> 29:29.980
现在的问题就是

29:29.980 --> 29:30.980
我这里边要显示啥

29:30.980 --> 29:32.980
就这个DIV里边要显示啥

29:33.980 --> 29:34.980
这个DIV里边

29:34.980 --> 29:36.980
所以不知道要显示啥呀

29:36.980 --> 29:37.980
它可能显示任何东西

29:37.980 --> 29:39.980
可能显示一个li元素

29:39.980 --> 29:41.980
可能显示一个什么别的a元素

29:41.980 --> 29:42.980
可能显示任何东西

29:42.980 --> 29:44.980
你不知道要显示啥

29:44.980 --> 29:45.980
所以说我们真的应该怎么说

29:45.980 --> 29:47.980
我要把它做成个通用的

29:47.980 --> 29:49.980
你不能直接把这个玩意儿写过来

29:49.980 --> 29:51.980
不能把自己把这个列式item写过来

29:51.980 --> 29:52.980
那怎么办

29:52.980 --> 29:54.980
是不是可以用插槽啊

29:54.980 --> 29:55.980
对不对

29:55.980 --> 29:56.980
要显示的东西

29:56.980 --> 29:57.980
你就给我放这

29:57.980 --> 29:59.980
我就来循环把它渲染出来

30:00.980 --> 30:02.980
所以说我这边用的时候怎么用

30:02.980 --> 30:03.980
我这边用的时候

30:03.980 --> 30:05.980
是不是可以把列式item放这

30:05.980 --> 30:07.980
列式item

30:07.980 --> 30:08.980
是不是可以放这

30:09.980 --> 30:11.980
一个循环渲染它就完事了

30:12.980 --> 30:13.980
那问题又来了

30:13.980 --> 30:14.980
你看吧

30:15.980 --> 30:17.980
我这边问题是

30:17.980 --> 30:20.980
这个主件它要传一个数据过去

30:20.980 --> 30:21.980
数据是什么呢

30:21.980 --> 30:22.980
刚才我们看到的主件

30:22.980 --> 30:23.980
数据是一个item

30:23.980 --> 30:24.980
对吧

30:24.980 --> 30:25.980
数据要传过去

30:25.980 --> 30:26.980
那我这里数据传上

30:26.980 --> 30:30.610
我这里没有循环

30:30.610 --> 30:31.610
我正于没有循环它

30:31.610 --> 30:32.610
我不能循环

30:32.610 --> 30:33.610
一循环就是一万次

30:33.610 --> 30:34.610
是它在循环

30:34.610 --> 30:35.610
对吧

30:35.610 --> 30:36.610
要循环多少次

30:36.610 --> 30:38.610
要循环哪些数据是它来决定的

30:38.610 --> 30:40.610
我这里item不知道要写啥

30:40.610 --> 30:41.610
看怎么办

30:41.610 --> 30:42.610
学过的

30:43.610 --> 30:44.610
怎么办

30:45.610 --> 30:47.610
就是我这个主件知道

30:47.610 --> 30:49.610
要渲染什么数据

30:50.610 --> 30:51.610
我这个东西呢

30:51.610 --> 30:53.610
我是要根据你要渲染的数据

30:53.610 --> 30:56.610
得到写一个写一个节点

30:56.610 --> 30:57.610
可能是渲染主件

30:57.610 --> 30:59.610
可能是渲染什么别的玩意儿

30:59.610 --> 31:01.610
但是我不知道数据

31:01.610 --> 31:02.610
怎么办

31:02.610 --> 31:04.610
是不是可以利用作用欲擦槽

31:04.610 --> 31:06.610
我这边是不是可以

31:06.610 --> 31:08.610
绑定的擦槽过去

31:08.610 --> 31:09.610
item为什么呢

31:09.610 --> 31:11.610
就是破item点

31:11.610 --> 31:12.610
对吧

31:12.610 --> 31:13.610
我们把原式数据给力

31:13.610 --> 31:15.610
我现在要渲染这个数据

31:15.610 --> 31:16.610
你去渲染吧

31:16.610 --> 31:17.610
我也不知道你要渲染啥

31:17.610 --> 31:18.610
好

31:18.610 --> 31:19.610
那么这边

31:19.610 --> 31:20.610
是不是就可以通过擦槽

31:20.610 --> 31:22.610
拿到这个数据

31:22.610 --> 31:23.610
通过擦槽

31:23.610 --> 31:27.370
那么我们这里用we start

31:27.370 --> 31:29.370
这里可以解构拿到这个item

31:29.370 --> 31:30.370
那么这边呢

31:30.370 --> 31:31.370
要渲染的东西

31:31.370 --> 31:32.370
是不是就是item

31:32.370 --> 31:33.370
对吧

31:33.370 --> 31:34.370
你看啊

31:34.370 --> 31:35.370
现在就出来了效果

31:35.370 --> 31:39.060
现在我们每一个div里边

31:39.060 --> 31:40.060
都有一个擦槽

31:40.060 --> 31:41.060
你渲染他

31:41.060 --> 31:42.060
我把那个数据给力

31:42.060 --> 31:43.060
我现在去渲染的

31:43.060 --> 31:45.060
因为我这边做了一个测试数据

31:45.060 --> 31:46.060
做个测试数据

31:46.060 --> 31:47.060
就是0到20之间

31:47.060 --> 31:48.060
去解去了一下

31:48.060 --> 31:51.060
那么他就渲染出了20个数据

31:51.060 --> 31:52.060
你看

31:52.060 --> 31:53.060
刚好20个

31:53.060 --> 31:54.060
后来就没有了

31:54.060 --> 31:55.060
因为我只渲染了20个

31:55.060 --> 31:57.060
我辞职里边只放了20个

31:57.060 --> 31:58.060
那么这边又是根据辞职

31:58.060 --> 32:00.060
循环生成的

32:00.060 --> 32:01.060
把每辞职里边

32:01.060 --> 32:02.060
每一个原式数据给力

32:02.060 --> 32:03.060
擦槽

32:03.060 --> 32:04.060
那么你去渲染

32:04.060 --> 32:05.060
就渲染了20个

32:05.060 --> 32:06.060
也就是说

32:06.060 --> 32:07.060
这个图件他就可以

32:07.060 --> 32:08.060
达到一个什么样的效果

32:08.060 --> 32:09.060
他就可以控制

32:09.060 --> 32:11.060
不要渲染哪些数据

32:11.060 --> 32:12.060
而且可以控制

32:12.060 --> 32:14.060
每个数据的偏移量

32:14.060 --> 32:16.060
就在页面上的位置

32:16.060 --> 32:17.060
你看

32:17.060 --> 32:18.060
这里边全是决定位

32:18.060 --> 32:19.060
我们来看一下

32:19.060 --> 32:21.060
决定位

32:21.060 --> 32:22.060
决定位

32:22.060 --> 32:24.060
他们本来应该是重合的

32:24.060 --> 32:25.060
他们本来应该重合在一起的

32:25.060 --> 32:26.060
只不过呢

32:26.060 --> 32:28.060
我这里通过了一个transnate

32:28.060 --> 32:29.060
给他了一个偏移

32:29.060 --> 32:30.060
对吧

32:30.060 --> 32:32.060
也就是说我们现在

32:32.060 --> 32:34.060
就设置了这个东西的偏移

32:34.060 --> 32:35.060
你看1

32:35.060 --> 32:36.060
他的偏移量就是0

32:36.060 --> 32:37.060
2就是一个高度

32:37.060 --> 32:38.060
3就是两个高度

32:38.060 --> 32:39.060
所以一个偏移量

32:39.060 --> 32:40.060
以后的偏移量

32:40.060 --> 32:41.060
还会不断的变化

32:41.060 --> 32:43.060
懂了意思吗

32:43.060 --> 32:44.060
那么接下来的

32:44.060 --> 32:45.060
我们就说

32:45.060 --> 32:47.060
搞定这个方法

32:47.060 --> 32:48.060
你只要把这个方法搞定了

32:48.060 --> 32:50.060
一切都搞定了

32:50.060 --> 32:51.060
这个方法就说

32:51.060 --> 32:53.060
设置这个池子

32:53.060 --> 32:54.060
那么这个方法

32:54.060 --> 32:58.500
怎么来实现呢

32:58.500 --> 32:59.500
我们首先搞定

32:59.500 --> 33:00.500
第一个问题

33:00.500 --> 33:02.500
就是这两个东西

33:02.500 --> 33:03.500
你肯定不能写死

33:03.500 --> 33:04.500
还不能0到20

33:04.500 --> 33:05.500
你不能写死

33:05.500 --> 33:07.500
那么这个地方

33:07.500 --> 33:08.500
第一个数字

33:08.500 --> 33:09.500
我们把它叫做

33:09.500 --> 33:10.500
称之为

33:10.500 --> 33:13.500
start indexed

33:13.500 --> 33:14.500
第二个数字

33:14.500 --> 33:16.500
叫做end indexed

33:16.500 --> 33:17.500
是不是把这两个数字

33:17.500 --> 33:18.500
得出来

33:18.500 --> 33:19.500
然后再替换掉

33:19.500 --> 33:20.500
这两个位置就OK了

33:20.500 --> 33:21.500
对吧

33:21.500 --> 33:22.500
你不能把它写死

33:22.500 --> 33:23.500
对不对

33:23.500 --> 33:24.500
我们去这里

33:24.500 --> 33:25.500
先确实了

33:25.500 --> 33:26.500
以后我们再把它写上

33:26.500 --> 33:27.500
是不是

33:27.500 --> 33:28.500
一算这两个东西

33:28.500 --> 33:30.500
首先这是主要遇到的问题

33:30.500 --> 33:32.500
那么一个个来

33:32.500 --> 33:34.500
首先他怎么算

33:34.500 --> 33:37.500
他怎么算出来

33:37.500 --> 33:38.500
我到底

33:38.500 --> 33:39.500
因为我的数据

33:39.500 --> 33:40.500
可能有一万个

33:40.500 --> 33:41.500
我的数据

33:41.500 --> 33:43.500
有很多很多的数据

33:43.500 --> 33:45.500
我到底要显示哪一段

33:45.500 --> 33:46.500
我一万个列表

33:46.500 --> 33:47.500
你脑袋里面想想

33:47.500 --> 33:49.500
整个很长很长的列表

33:49.500 --> 33:50.500
我可能显示

33:50.500 --> 33:51.500
它开始一段

33:51.500 --> 33:52.500
又可能显示它中间一段

33:52.500 --> 33:53.500
说不准

33:53.500 --> 33:55.500
那它跟什么有关系

33:55.500 --> 33:57.500
滚动条的位置有关系

33:57.500 --> 33:58.500
滚动到这是不是

33:58.500 --> 33:59.500
我要从列表里面

33:59.500 --> 34:00.500
取出来的数据

34:00.500 --> 34:02.500
那个一段就不一样

34:02.500 --> 34:04.500
那它的歧视位置肯定不一样

34:04.500 --> 34:06.500
跟滚动条的位置

34:06.500 --> 34:07.500
也就是说滚动高度

34:07.500 --> 34:08.500
是不是有关系

34:08.500 --> 34:10.500
那这里是不是毫无疑问的

34:10.500 --> 34:11.500
我要去拿到什么

34:11.500 --> 34:13.500
拿到它的滚动高度

34:13.500 --> 34:14.500
拿到谁的滚动高度

34:14.500 --> 34:15.500
拿到它的滚动高度

34:15.500 --> 34:16.500
对吧

34:16.500 --> 34:17.500
那么这里呢

34:17.500 --> 34:18.500
我们可以给它一个Rip

34:18.500 --> 34:19.500
因为我要用到多么元素

34:19.500 --> 34:20.500
场停了

34:20.500 --> 34:21.500
好

34:21.500 --> 34:23.500
这边我就是不是可以

34:23.500 --> 34:24.500
达到滚动高度

34:24.500 --> 34:26.500
Scroll Top

34:26.500 --> 34:27.500
对 写错了

34:27.500 --> 34:29.500
Scroll Top

34:29.500 --> 34:31.500
Zis Rips

34:32.500 --> 34:34.500
Container

34:34.500 --> 34:35.500
Scroll Top

34:35.500 --> 34:36.500
就可以拿到它

34:36.500 --> 34:37.500
来输出一下

34:37.500 --> 34:38.500
Scroll Top

34:38.500 --> 34:42.990
一开始是零嘛

34:42.990 --> 34:43.990
对不对

34:43.990 --> 34:44.990
那一会不断的滚动的时候

34:44.990 --> 34:45.990
它是不是

34:45.990 --> 34:46.990
这个只要不断的更新

34:46.990 --> 34:47.990
为了看到这一点

34:47.990 --> 34:48.990
我这里呢

34:48.990 --> 34:50.990
把这个Zis

34:50.990 --> 34:52.990
保存到一个Windows对象里面

34:52.990 --> 34:53.990
方便测试

34:53.990 --> 34:54.990
V

34:54.990 --> 34:55.990
Zis

34:55.990 --> 34:56.990
进来

34:56.990 --> 34:57.990
好 那我们来看一下

34:57.990 --> 35:00.990
先让我们可以通过这个VM的

35:00.990 --> 35:01.990
先让我们滚动一下

35:01.990 --> 35:02.990
滚动条

35:02.990 --> 35:03.990
拉一下

35:03.990 --> 35:04.990
然后让我们这里

35:04.990 --> 35:06.990
Set to 调那个方法

35:06.990 --> 35:08.990
所以可以看到滚动高度有点变化

35:08.990 --> 35:09.990
对不对

35:09.990 --> 35:12.990
好 那么我们拿到它的滚动高度

35:12.990 --> 35:14.990
这个拿到了

35:14.990 --> 35:17.990
好 拿到了滚动高度过后

35:17.990 --> 35:18.990
又怎么来算这个呢

35:18.990 --> 35:19.990
我们目标是要算这个东西

35:19.990 --> 35:20.990
对吧

35:20.990 --> 35:22.990
其实你可以想象一下

35:22.990 --> 35:23.990
拿到了滚动高度

35:23.990 --> 35:25.990
就是这一段

35:25.990 --> 35:27.990
拿到了这一段过后

35:27.990 --> 35:29.990
是不是就可以计算出

35:29.990 --> 35:32.990
你前边隐藏了几个

35:32.990 --> 35:35.990
就是有多少像是不可见的

35:35.990 --> 35:37.990
是被滚动到上面去了

35:37.990 --> 35:38.990
对吧

35:38.990 --> 35:39.990
尽管上面没有这个元素

35:39.990 --> 35:41.990
只是我们从逻辑上来讲

35:41.990 --> 35:42.990
是不是有很多像

35:42.990 --> 35:44.990
应该是不可见的

35:44.990 --> 35:45.990
对不对

35:45.990 --> 35:46.990
我们脑袋里面就想吧

35:46.990 --> 35:47.990
这个元素里面

35:47.990 --> 35:48.990
假设它

35:48.990 --> 35:49.990
挨摘着

35:49.990 --> 35:50.990
把所有的元素显示出来

35:50.990 --> 35:52.990
那么这个滚动高度就决定了

35:52.990 --> 35:54.990
有哪些元素

35:54.990 --> 35:56.990
现在是不可见的

35:56.990 --> 35:58.990
怎么算的

35:58.990 --> 36:00.990
是不是滚动高度

36:00.990 --> 36:02.990
除以每一项的高度

36:02.990 --> 36:03.990
比方说滚动高度为500

36:03.990 --> 36:05.990
每一项的为50

36:05.990 --> 36:07.990
是不是有10项的滚动高度

36:07.990 --> 36:08.990
上面去了

36:08.990 --> 36:09.990
对不对

36:09.990 --> 36:10.990
就是500除以50

36:10.990 --> 36:11.990
所以说滚动高度

36:11.990 --> 36:13.990
那么我们可以算出什么

36:13.990 --> 36:15.990
可以算出有多少像

36:15.990 --> 36:18.990
滚动到上面去了

36:18.990 --> 36:20.990
那么其实有多少像

36:20.990 --> 36:21.990
滚动到上面去了

36:21.990 --> 36:22.990
就有

36:22.990 --> 36:24.990
那么我们的骑士下标就是第几

36:24.990 --> 36:26.990
比方说我举个例子

36:29.990 --> 36:30.990
这边

36:30.990 --> 36:31.990
假设

36:31.990 --> 36:41.300
我们是这个样子

36:41.300 --> 36:43.300
假设是这个样子

36:43.300 --> 36:44.300
我们算出来

36:44.300 --> 36:46.300
刚好有一项

36:46.300 --> 36:47.300
滚动到上面去了

36:47.300 --> 36:48.300
是不可见的

36:48.300 --> 36:50.300
看不见的

36:50.300 --> 36:51.300
那么我们下标骑士下标

36:51.300 --> 36:52.300
是不是就是一

36:52.300 --> 36:53.300
零一

36:53.300 --> 36:55.300
骑士下标是不是就是一

36:55.300 --> 36:57.300
所以说隐藏了多少

36:57.300 --> 37:00.300
骑士下标就是多少

37:00.300 --> 37:01.300
明儿的意思吧

37:01.300 --> 37:03.300
是不是这个道理

37:03.300 --> 37:05.300
因此我这一项我就不要

37:05.300 --> 37:06.300
根本就不炫耐

37:06.300 --> 37:07.300
炫耐不炫耐他

37:07.300 --> 37:08.300
我只炫耐这一块

37:08.300 --> 37:10.300
我说骑士下标怎么算的

37:10.300 --> 37:14.980
骑士下标

37:14.980 --> 37:15.980
是不是等于

37:15.980 --> 37:18.980
screw top除以什么

37:18.980 --> 37:20.980
this item size

37:20.980 --> 37:22.980
是不是除以他

37:22.980 --> 37:24.980
滚动了500个像素

37:24.980 --> 37:26.980
每个元素的50个高度

37:26.980 --> 37:28.980
那就有10个元素不可见

37:28.980 --> 37:30.980
那我的骑士下标就是10

37:30.980 --> 37:31.980
0到9不可见

37:31.980 --> 37:33.980
骑士下标就是10

37:33.980 --> 37:34.980
但是你想一想

37:34.980 --> 37:35.980
这个东西除出来

37:35.980 --> 37:37.980
是不是可能会有小数

37:37.980 --> 37:38.980
为什么会有小数呢

37:38.980 --> 37:39.980
你看吧

37:39.980 --> 37:43.250
看这吧

37:43.250 --> 37:45.250
看这就看得比较清楚了

37:45.250 --> 37:50.740
把这个去掉

37:50.740 --> 37:51.740
撑住

37:51.740 --> 37:52.740
好

37:52.740 --> 37:53.740
你看啊

37:53.740 --> 37:54.740
这个虚线就表示

37:54.740 --> 37:57.740
有哪些元素逻辑上是不可见的

37:57.740 --> 37:58.740
是看不见的

37:58.740 --> 38:00.740
这个虚线就表示这个意思

38:00.740 --> 38:01.740
然后比方说

38:01.740 --> 38:02.740
现在算出来有两个

38:02.740 --> 38:03.740
两个就是这种情况

38:03.740 --> 38:04.740
算出来有两个

38:04.740 --> 38:06.740
那么骑士下标就是2

38:06.740 --> 38:08.740
没有这个意思吧

38:08.740 --> 38:09.740
那如果说

38:09.740 --> 38:10.740
我们算出来

38:10.740 --> 38:12.740
我是这个样子

38:12.740 --> 38:13.740
算出来应该是2点几

38:13.740 --> 38:14.740
对吧

38:14.740 --> 38:17.740
比方说这里有110个高度

38:17.740 --> 38:19.740
滚动高度是110

38:19.740 --> 38:21.740
就是

38:21.740 --> 38:23.740
这个高度是

38:23.740 --> 38:25.740
这个高度是110

38:25.740 --> 38:27.740
那么一向是50

38:27.740 --> 38:29.740
那算出来是不是2点几

38:29.740 --> 38:30.740
对吧

38:30.740 --> 38:32.740
那2点几的话

38:32.740 --> 38:34.740
向上取整还是向下取整

38:34.740 --> 38:36.740
你看这个图一看出来了吗

38:36.740 --> 38:38.740
向上取整还是向下取整

38:38.740 --> 38:40.740
说向下取整

38:40.740 --> 38:41.740
对吧

38:41.740 --> 38:42.740
2点几

38:42.740 --> 38:43.740
说明

38:43.740 --> 38:44.740
第三个元素呢

38:44.740 --> 38:45.740
隐藏了

38:45.740 --> 38:47.740
没有隐藏多少隐藏了一半

38:47.740 --> 38:48.740
那么第三个元素

38:48.740 --> 38:50.740
还是可以看得见的

38:50.740 --> 38:51.740
所以说呢

38:51.740 --> 38:52.740
我们只能以两个元素来算

38:52.740 --> 38:54.740
说应该是向下取整

38:54.740 --> 38:55.740
因此呢

38:55.740 --> 38:56.740
我们这边

38:56.740 --> 38:58.740
用一个什么Mass

38:58.740 --> 38:59.740
Flo

38:59.740 --> 39:03.820
把它进行向下取整

39:03.820 --> 39:05.820
其实下标就出来了

39:05.820 --> 39:07.820
对不对

39:07.820 --> 39:09.820
那么其实下标就出来了

39:09.820 --> 39:11.820
接下来

39:11.820 --> 39:14.820
结束下标了

39:14.820 --> 39:16.820
结束下标

39:16.820 --> 39:17.820
是不是这个

39:17.820 --> 39:18.820
结束下标

39:18.820 --> 39:20.820
是不是它

39:20.820 --> 39:24.380
那又怎么算

39:24.380 --> 39:26.380
就是很简单

39:26.380 --> 39:28.380
结束下标是不是这一块

39:28.380 --> 39:31.380
我就用这个高度

39:31.380 --> 39:34.380
处于每一向的高度

39:34.380 --> 39:35.380
就是结束下标吗

39:35.380 --> 39:36.380
比方说吧

39:36.380 --> 39:38.380
我这里有数呗有几项吗

39:38.380 --> 39:42.380
12345678

39:42.380 --> 39:44.380
结束下标应该是7对吧

39:44.380 --> 39:45.380
01234567

39:45.380 --> 39:47.380
结束下标应该是7

39:47.380 --> 39:49.380
那么我们怎么算的

39:49.380 --> 39:50.380
就是这个高度

39:50.380 --> 39:52.380
处于它每一向的高度

39:52.380 --> 39:53.380
比方说这个高度是多少呢

39:53.380 --> 39:55.380
每一项是50吗

39:55.380 --> 39:56.380
这个高度假设啊

39:56.380 --> 39:59.380
这个高度假设是200

39:59.380 --> 40:02.380
每一项是50

40:02.380 --> 40:05.380
那么算出来就是4对不对

40:05.380 --> 40:07.380
结束下标就应该是4

40:07.380 --> 40:10.380
这里看不是没有看得那么直观

40:10.380 --> 40:11.380
那么这个高度

40:11.380 --> 40:12.380
实际上这个高度怎么算出来的

40:12.380 --> 40:13.380
是不是scroll top

40:13.380 --> 40:16.380
加上它本身这个容器的高度

40:16.380 --> 40:17.380
对不对

40:17.380 --> 40:18.380
是不是这两项一加

40:18.380 --> 40:20.380
然后再处于

40:20.380 --> 40:22.380
每一项的高度就完事了

40:22.380 --> 40:25.380
好咱们来看结束下标

40:25.380 --> 40:27.380
我们首先拿到它的容器高度

40:27.380 --> 40:30.380
height 等于this riffs

40:30.380 --> 40:32.380
container height

40:32.380 --> 40:35.380
client height

40:35.380 --> 40:36.380
那么结束下标应该是什么呢

40:36.380 --> 40:38.380
应该是scroll top

40:38.380 --> 40:42.980
加上height

40:42.980 --> 40:43.980
就拿到这个高度

40:43.980 --> 40:47.540
就拿到这个高度

40:47.540 --> 40:49.540
好

40:49.540 --> 40:54.970
相加之后处于什么

40:54.970 --> 40:57.970
this item size

40:57.970 --> 40:59.970
是不是处于这个每一项的高度

40:59.970 --> 41:00.970
那么这样子呢

41:00.970 --> 41:02.970
有可能会算出来有小数

41:02.970 --> 41:04.970
比方说算穿

41:04.970 --> 41:07.970
结束的这个位置是多少呢

41:07.970 --> 41:09.970
是10.5

41:09.970 --> 41:13.340
说明啥

41:13.340 --> 41:16.340
我要向上取得还是向下取得

41:16.340 --> 41:18.340
10.5

41:18.340 --> 41:20.340
10.5的话说明是最后一个元素

41:20.340 --> 41:21.340
显示的一半

41:21.340 --> 41:22.340
显示的一半

41:22.340 --> 41:23.340
是不是就相当于

41:23.340 --> 41:24.340
你看得见

41:24.340 --> 41:25.340
对不对

41:25.340 --> 41:27.340
看得见是不是我要腰

41:27.340 --> 41:28.340
我得腰吧

41:28.340 --> 41:29.340
我不能不腰吧

41:29.340 --> 41:31.340
那么我就要向上取得

41:31.340 --> 41:32.340
就算11

41:32.340 --> 41:34.340
11以内我都要腰

41:34.340 --> 41:36.340
不能是11以内的

41:36.340 --> 41:37.340
所以说呢我这里呢

41:37.340 --> 41:39.340
要向上取得这个地方

41:39.340 --> 41:40.340
scroll

41:40.340 --> 41:44.360
那么骑士

41:44.360 --> 41:45.360
骑士结束就算出来

41:45.360 --> 41:47.360
我们输出一下

41:47.360 --> 41:49.360
start index

41:49.360 --> 41:50.360
and index

41:50.360 --> 41:52.360
保存我们来看

41:52.360 --> 41:53.360
这边

41:53.360 --> 41:55.360
一开始得到0到10

41:55.360 --> 41:56.360
你看他们想呗

41:56.360 --> 41:58.360
我们现在有高度是多少

41:58.360 --> 41:59.360
高度是500

41:59.360 --> 42:00.360
那么一项是多少

42:00.360 --> 42:02.360
每一项是54

42:02.360 --> 42:03.360
9个行不行的

42:03.360 --> 42:05.360
54×19

42:05.360 --> 42:06.360
9个486

42:06.360 --> 42:09.360
是不是第10个还会显示出来一点点

42:09.360 --> 42:11.360
是不是第10个还会显示出来点点

42:11.360 --> 42:14.360
所以说得54×10

42:14.360 --> 42:15.360
50010

42:15.360 --> 42:17.360
多一点就多一点点

42:17.360 --> 42:18.360
原来的意思吧

42:18.360 --> 42:20.360
好那么我们现在就把这两个下标

42:20.360 --> 42:22.360
是不是喘进去

42:22.360 --> 42:23.360
要显示10个嘛

42:23.360 --> 42:24.360
就0到9

42:24.360 --> 42:26.360
因为我们这个snipe寒数呢

42:26.360 --> 42:28.360
它本身结束下标就取不到

42:28.360 --> 42:30.360
所以说就是0到9刚好

42:30.360 --> 42:31.360
因此这个破落里边

42:31.360 --> 42:33.360
我们这里start index

42:33.360 --> 42:34.360
0

42:34.360 --> 42:35.360
就是start index

42:35.360 --> 42:36.360
end index

42:36.360 --> 42:37.360
传进去了

42:37.360 --> 42:38.360
对不对

42:38.360 --> 42:39.360
好咱们来看吧

42:39.360 --> 42:41.360
来看一下

42:41.360 --> 42:42.360
放心

42:42.360 --> 42:44.360
现在是多少

42:44.360 --> 42:45.360
显示是不是1到10

42:45.360 --> 42:46.360
对吧

42:46.360 --> 42:47.360
你看10

42:47.360 --> 42:48.360
看着建一点点

42:48.360 --> 42:49.360
下面看着建一点点

42:49.360 --> 42:50.360
因为下面那个横杠就结束了

42:50.360 --> 42:51.360
下面还有一点点

42:51.360 --> 42:53.360
不过那个文字还没出来

42:53.360 --> 42:55.360
这个元素其实已经出来了

42:55.360 --> 42:57.360
这个版面就看得到了

42:57.360 --> 42:58.360
1到10

42:58.360 --> 43:01.360
然后我们如果这个时候再调整这个set破

43:01.360 --> 43:03.360
现在稳动它位置变了

43:03.360 --> 43:04.360
现在显示是什么呢

43:04.360 --> 43:06.360
现在是5到14

43:06.360 --> 43:09.360
数据的结序就应该是正确的

43:09.360 --> 43:11.360
但是位置还不对

43:11.360 --> 43:12.360
这些位置还不对

43:12.360 --> 43:15.360
那么位置有怎么来算呢

43:15.360 --> 43:16.360
你想啊

43:16.360 --> 43:17.360
现在这个位置呢

43:17.360 --> 43:18.360
其实你只需要搞定

43:18.360 --> 43:21.360
第一个就是起始下标的位置就OK了

43:21.360 --> 43:22.360
是不是这个道理

43:22.360 --> 43:24.360
你只要搞定起始下标的位置

43:24.360 --> 43:25.360
就OK

43:25.360 --> 43:26.360
因为后面的位置

43:26.360 --> 43:28.360
就是一次在上面加

43:28.360 --> 43:29.360
起始下标的位置比方说X

43:29.360 --> 43:31.360
那么就是X加上一个高度

43:31.360 --> 43:32.360
X加上两个高度

43:32.360 --> 43:34.360
X加上三个高度

43:34.360 --> 43:35.360
就这么简单

43:35.360 --> 43:39.360
所以你只需要搞定起始下标的偏移量

43:39.360 --> 43:44.120
那起始下标的偏移量怎么算呢

43:44.120 --> 43:46.120
这不很简单吗

43:46.120 --> 43:47.120
比方说起始下标

43:47.120 --> 43:49.120
现在是比方说这个情况

43:49.120 --> 43:51.120
起始下标是2

43:51.120 --> 43:53.120
第三个嘛012嘛

43:53.120 --> 43:55.120
那是不是就是2乘以每一项的高度

43:56.120 --> 43:58.120
就是他就是这一段的偏移量

43:58.120 --> 44:01.120
我们就算了就是这一段对吧

44:01.120 --> 44:04.120
我们要算了是不是就是这一段

44:04.120 --> 44:05.120
对不对

44:05.120 --> 44:07.120
就是他起始下标乘以每一项的高度

44:07.120 --> 44:09.120
不就是他的偏移量吗

44:09.120 --> 44:10.120
所以很好算啊

44:10.120 --> 44:13.120
因此呢我这里呢得到了就是

44:15.120 --> 44:16.120
start

44:16.120 --> 44:17.120
properation

44:17.120 --> 44:18.120
所以应该等于

44:18.120 --> 44:20.120
start index

44:20.120 --> 44:23.120
乘以 this item size

44:23.120 --> 44:24.120
对不对

44:25.120 --> 44:27.120
那么我们这里边的peration

44:27.120 --> 44:28.120
应该是什么就是

44:28.120 --> 44:31.120
前面加上一个起始的偏移量

44:31.120 --> 44:33.120
然后再一次往后偏移

44:33.120 --> 44:35.120
好咱们来看一下

44:35.120 --> 44:37.120
1234567890

44:37.120 --> 44:39.120
比方说现在滑到这个位置

44:39.120 --> 44:41.120
现在我们再调用这个set pull

44:41.120 --> 44:44.120
你看这些位置是不是正确了

44:44.120 --> 44:46.120
看一下在这里边

44:46.120 --> 44:48.120
这些元素

44:48.120 --> 44:50.120
看是不是都有一个偏移量

44:50.120 --> 44:52.120
相对于这个里边元素的顶部的偏移量

44:52.120 --> 44:54.120
相对相对一个黄色块的偏移量

44:55.120 --> 44:57.120
然后我们往上滑

44:57.120 --> 44:58.120
上面其实啥都没有

44:58.120 --> 45:00.120
因为我只选了这么多元素

45:00.120 --> 45:01.120
哪怕有一万个

45:01.120 --> 45:03.120
我都只选了这么一点点

45:03.120 --> 45:04.120
好咱们来看一下

45:04.120 --> 45:05.120
set pull

45:05.120 --> 45:06.120
就回来了

45:06.120 --> 45:07.120
然后往下拉

45:07.120 --> 45:08.120
拉到这

45:08.120 --> 45:09.120
set pull

45:09.120 --> 45:10.120
这都可以了

45:10.120 --> 45:11.120
对不对

45:12.120 --> 45:13.120
好

45:13.120 --> 45:14.120
然后呢我们这里呢

45:14.120 --> 45:15.120
就可以怎么样了

45:15.120 --> 45:17.120
我是不是就可以设置

45:17.120 --> 45:18.120
事件了

45:18.120 --> 45:19.120
score事件

45:20.120 --> 45:21.120
score

45:21.120 --> 45:24.430
当我们这个DIV滚动的时候

45:24.430 --> 45:26.430
我只需要让他去调用这个函数

45:26.430 --> 45:27.430
set pull

45:27.430 --> 45:28.430
这完事了

45:29.430 --> 45:30.430
刷新

45:31.430 --> 45:33.430
你看是完事了

45:33.430 --> 45:34.430
对不对

45:35.430 --> 45:36.430
他实际上在不断的

45:36.430 --> 45:38.430
他其实没有多少元素

45:38.430 --> 45:39.430
根本就没有几个元素

45:39.430 --> 45:41.430
就这么一点点元素

45:41.430 --> 45:43.430
他实际上在不断的改变这些

45:43.430 --> 45:45.430
transnate y

45:45.430 --> 45:47.430
但是如果说你滑动的太快的话

45:47.430 --> 45:49.430
如果你滑动的太快的话

45:49.430 --> 45:51.430
那可能会出现白半

45:51.430 --> 45:53.430
出现一些白半

45:53.430 --> 45:54.430
那么这个时候呢

45:54.430 --> 45:56.430
其实你可以这样吧

45:56.430 --> 45:58.430
你可以往前边多显示一点

45:58.430 --> 45:59.430
后边多显示一点

45:59.430 --> 46:00.430
就是不要

46:00.430 --> 46:01.430
就显示那么一点点

46:01.430 --> 46:02.430
刚好看得见

46:02.430 --> 46:04.430
你可以稍微多显示一点

46:04.430 --> 46:06.430
来防止街市执行速度过慢

46:06.430 --> 46:08.430
导致了那个

46:08.430 --> 46:09.430
出现了一些白半

46:09.430 --> 46:11.430
那白半肯定是防

46:11.430 --> 46:12.430
肯定是防不了的

46:12.430 --> 46:14.430
如果他滑动的太快的话

46:14.430 --> 46:15.430
肯定是防不了的

46:15.430 --> 46:16.430
但是最终我们会给他一个

46:16.430 --> 46:17.430
正确的显示

46:17.430 --> 46:18.430
那么这里呢

46:18.430 --> 46:19.430
我们可以这样吧

46:19.430 --> 46:20.430
我们设置两个变量

46:20.430 --> 46:22.430
因为这两变量都比较固定

46:22.430 --> 46:24.430
所以说我们前面显示10个

46:24.430 --> 46:26.430
后边显示10个

46:26.430 --> 46:27.430
我就这样写呗

46:27.430 --> 46:29.430
多显示10个

46:29.430 --> 46:30.430
前面多显示10个

46:30.430 --> 46:31.430
后边多显示10个

46:31.430 --> 46:32.430
那么这边

46:32.430 --> 46:33.430
我只需要去改动这个

46:33.430 --> 46:34.430
start index就行了

46:34.430 --> 46:35.430
对吧

46:35.430 --> 46:37.430
start index呢

46:37.430 --> 46:39.430
我减去

46:39.430 --> 46:40.430
对吧

46:40.430 --> 46:42.430
往前面倒几个

46:42.430 --> 46:43.430
如果说

46:43.430 --> 46:44.430
当然这里有一个小的问题

46:44.430 --> 46:46.430
就是如果说小于0的话

46:46.430 --> 46:47.430
它最小为0

46:47.430 --> 46:49.430
不能进去0

46:49.430 --> 46:50.430
不然显示要付出去了

46:50.430 --> 46:51.430
那么这个 end index

46:51.430 --> 46:52.430
那就无所谓了

46:52.430 --> 46:53.430
因为它超过就超过了

46:53.430 --> 46:54.430
这个是nice函数

46:54.430 --> 46:55.430
超过的话

46:55.430 --> 46:57.430
它就自动回去取

46:57.430 --> 46:58.430
它正确的值

46:58.430 --> 46:59.430
加上一个next

46:59.430 --> 47:01.430
对吧

47:01.430 --> 47:02.430
好保存

47:02.430 --> 47:04.430
那现在我们来看一下

47:04.430 --> 47:05.430
刷新

47:05.430 --> 47:06.430
就是我们这里边的元素

47:06.430 --> 47:07.430
就可以看得很清楚

47:07.430 --> 47:09.430
它就多显示了一些

47:09.430 --> 47:11.430
多显示了20个相当于是

47:11.430 --> 47:13.430
现在显示到哪呢

47:13.430 --> 47:15.430
现在显示到了20了

47:15.430 --> 47:16.430
实际上我们这里只看到

47:16.430 --> 47:18.430
是9个

47:18.430 --> 47:20.430
多给它留点空间

47:20.430 --> 47:22.430
效果是一样的

47:22.430 --> 47:28.280
然后我们再来看最多的性能

47:28.280 --> 47:30.280
重新组织

47:30.280 --> 47:31.280
刷新

47:31.280 --> 47:34.280
停止

47:34.280 --> 47:36.280
你看现在基本上没有花费

47:36.280 --> 47:37.280
什么时间的渲染

47:37.280 --> 47:38.280
最唯一一点点的

47:38.280 --> 47:39.280
这个介绍时间

47:39.280 --> 47:40.280
都是为了偷吃我们的

47:40.280 --> 47:41.280
做测试

47:41.280 --> 47:43.280
加了一些数据

47:43.280 --> 47:44.280
对吧

47:44.280 --> 47:45.280
无论是脚本执行时间

47:45.280 --> 47:46.280
其实是很少的

47:46.280 --> 47:47.280
然后呢

47:47.280 --> 47:49.280
还是我们的那个渲染时间

47:49.280 --> 47:50.280
其实都不读

47:50.280 --> 47:51.280
对吧

47:51.280 --> 47:52.280
都不读

47:52.280 --> 47:53.280
ok

47:53.280 --> 47:54.280
那么就是这种方式

47:54.280 --> 47:56.280
叫长列表优化

47:56.280 --> 47:57.280
其实呢

47:57.280 --> 47:58.280
我这里给大家写了半天

47:58.280 --> 48:00.280
其实你们将来在工作中

48:00.280 --> 48:02.280
没有必要去自己写

48:02.280 --> 48:03.280
也有现成的可以用

48:03.280 --> 48:06.280
我这里有个链接

48:06.280 --> 48:08.280
可见里面就有个链接

48:08.280 --> 48:09.280
这个我还叫

48:09.280 --> 48:11.280
Virtue

48:11.280 --> 48:12.280
Virtue Scholar

48:12.280 --> 48:14.280
就是无诱的虚拟滚动

48:14.280 --> 48:15.280
插件

48:15.280 --> 48:16.280
你怎么用呢

48:16.280 --> 48:18.280
我们再停止

48:18.280 --> 48:20.280
n-t-m-i

48:20.280 --> 48:22.280
安装他

48:22.280 --> 48:24.280
这些他家里都不用

48:24.280 --> 48:25.280
英文不好的话

48:25.280 --> 48:27.280
都不用去想象到看他的英文

48:27.280 --> 48:28.280
你就

48:28.280 --> 48:30.280
看他带吧直接使用就完事了

48:30.280 --> 48:31.280
安装他

48:31.280 --> 48:37.880
先安装他

48:37.880 --> 48:38.880
安装

48:38.880 --> 48:39.880
安装完了他告诉你

48:39.880 --> 48:41.880
他里面提供了几个主件

48:41.880 --> 48:42.880
如果说你全部主件

48:42.880 --> 48:43.880
都需要使用的话

48:43.880 --> 48:44.880
那就你就

48:44.880 --> 48:45.880
用插件的方式

48:45.880 --> 48:47.880
用vue use

48:47.880 --> 48:48.880
导入进来使用

48:48.880 --> 48:49.880
如果说你用不到那么多主件的话

48:49.880 --> 48:50.880
那就

48:50.880 --> 48:51.880
要用哪个主件

48:51.880 --> 48:52.880
就用哪个主件

48:52.880 --> 48:54.880
他下面有介绍

48:54.880 --> 48:55.880
我这里不一一说了

48:55.880 --> 48:57.880
我推荐大家使用这个

48:57.880 --> 48:59.880
推荐大家使用这个

48:59.880 --> 49:01.880
后边的主件叫做Dynamic Scholar

49:01.880 --> 49:02.880
就是这个东西

49:02.880 --> 49:03.880
就是我们刚才写的这个东西

49:03.880 --> 49:05.880
Dynamic Scholar

49:05.880 --> 49:06.880
这个东西是

49:06.880 --> 49:07.880
如果说你不知道

49:07.880 --> 49:09.880
它里面每一项的高度是多少

49:09.880 --> 49:10.880
那么就要用它

49:10.880 --> 49:11.880
但是

49:11.880 --> 49:13.880
它会带来性能的问题

49:13.880 --> 49:14.880
它会带来性能的问题

49:14.880 --> 49:15.880
最性能最好了肯定是它

49:15.880 --> 49:16.880
就是高度固定的

49:16.880 --> 49:18.880
你们根据情况自己去使用吧

49:18.880 --> 49:19.880
那我这里

49:19.880 --> 49:20.880
比方说只需要使用它

49:20.880 --> 49:21.880
那他告诉你

49:21.880 --> 49:23.880
可以直接这样子用

49:23.880 --> 49:24.880
我们这里

49:24.880 --> 49:25.880
MediaJS里面

49:25.880 --> 49:26.880
导致一下

49:26.880 --> 49:27.880
Import

49:28.880 --> 49:33.880
From叫做ViuVirtual Scholar

49:33.880 --> 49:35.880
我们只需要使用它那个

49:35.880 --> 49:38.880
Recycle Scholar

49:38.880 --> 49:39.880
当我个代码呢

49:39.880 --> 49:40.880
写的比较简单

49:40.880 --> 49:42.880
它里面考虑问题更多

49:42.880 --> 49:43.880
然后呢

49:43.880 --> 49:44.880
我们这里拳击注册

49:44.880 --> 49:45.880
当然你可以不用拳击注册

49:45.880 --> 49:46.880
你可以用局部注册

49:46.880 --> 49:49.880
我们把这里

49:49.880 --> 49:50.880
app里面

49:50.880 --> 49:51.880
我们刚才找导致自己的组件

49:51.880 --> 49:52.880
对吧

49:52.880 --> 49:54.880
我现在把它换成这个组件

49:54.880 --> 49:55.880
换成这个组件

49:55.880 --> 49:57.880
然后局部注册可以使用

49:57.880 --> 49:58.880
然后它有一个CSS

49:58.880 --> 50:00.880
你需要去导致它

50:00.880 --> 50:02.880
导致这个CSS

50:02.880 --> 50:06.320
导致一下

50:06.320 --> 50:07.320
去自己不用干什么

50:07.320 --> 50:08.320
就已经可以了

50:08.320 --> 50:09.320
就已经OK了

50:09.320 --> 50:10.320
我们现在运行出来了

50:10.320 --> 50:11.320
因为我们刚才写的

50:11.320 --> 50:12.320
自己写的一个东西

50:12.320 --> 50:22.860
跟它的用法是一样的

50:22.860 --> 50:23.860
你看

50:23.860 --> 50:25.860
所以也可以了

50:25.860 --> 50:27.860
检查

50:27.860 --> 50:28.860
你看一下

50:28.860 --> 50:30.860
它生成了一个DIV

50:30.860 --> 50:31.860
然后呢

50:31.860 --> 50:32.860
这里边

50:32.860 --> 50:33.860
你看是高度是不是

50:33.860 --> 50:34.860
54万

50:34.860 --> 50:35.860
它帮我们做了

50:35.860 --> 50:36.860
这个内名不一样

50:36.860 --> 50:37.860
然后呢

50:37.860 --> 50:38.860
这里边就是绝对定位元素

50:38.860 --> 50:39.860
你看

50:39.860 --> 50:40.860
都是绝对定位元素

50:40.860 --> 50:41.860
Pretty absolute

50:41.860 --> 50:42.860
对吧

50:42.860 --> 50:44.860
然后这里边就是我们

50:44.860 --> 50:45.860
自己就是给你的插槽

50:45.860 --> 50:46.860
你自己宣传的东西

50:46.860 --> 50:48.860
一模一样的用法都是一样的

50:48.860 --> 50:49.860
我刚才写的

50:49.860 --> 50:50.860
就是按照它那个用法

50:50.860 --> 50:51.860
给你们写的

50:51.860 --> 50:53.860
然后这里边

50:53.860 --> 50:54.860
它给你多宣传的一些东西

50:54.860 --> 50:55.860
对吧

50:55.860 --> 50:56.860
多宣传的一些

50:56.860 --> 50:57.860
你看

50:57.860 --> 50:59.860
给它预留了一些空间

50:59.860 --> 51:00.860
对不对

51:00.860 --> 51:01.860
你看

51:01.860 --> 51:02.860
然后滚动的时候

51:02.860 --> 51:03.860
它不断的去改变

51:03.860 --> 51:05.860
这个transnate Y

51:05.860 --> 51:06.860
你看

51:06.860 --> 51:07.860
所以它不断改变

51:08.860 --> 51:10.860
就这么个意思

51:10.860 --> 51:11.860
OK

51:11.860 --> 51:12.860
那么这是

51:12.860 --> 51:13.860
关于这个组建

51:13.860 --> 51:15.860
关于这个常列表优化

51:15.860 --> 51:16.860
其他的

51:16.860 --> 51:17.860
还有什么

51:17.860 --> 51:18.860
这个组建如果是有兴趣的话

51:18.860 --> 51:19.860
可以去看一看

51:19.860 --> 51:20.860
它其实文档也不多

51:20.860 --> 51:21.860
用法也很简单

51:21.860 --> 51:23.860
可以去看一下吧

51:23.860 --> 51:24.860
好了

51:24.860 --> 51:25.860
那么这里就到

51:25.860 --> 51:26.860
我们这里

