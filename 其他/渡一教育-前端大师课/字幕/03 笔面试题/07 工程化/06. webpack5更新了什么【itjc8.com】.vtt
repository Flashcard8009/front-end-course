WEBVTT

00:00.300 --> 00:02.860
来聊一聊这个VIPAC5

00:03.620 --> 00:06.960
VIPAC5是一次重大更新

00:07.220 --> 00:13.860
截至到我录视频这个时间点是2022年1月27号

00:14.120 --> 00:17.700
截至到目前已经将近有一年多了

00:18.480 --> 00:24.100
尽管它做出了很多的变化 但是同学们要知道一点新技术的产生

00:24.360 --> 00:27.440
因为过去VIPAC4由于它太经典了

00:27.960 --> 00:31.280
它整个的社区 整个的生态已经非常完善了

00:32.040 --> 00:39.980
因此它做出了这么一次重大更新 其实在市场上收获的反馈并不是很明显

00:40.760 --> 00:42.280
但是我觉得VIPAC5

00:42.800 --> 00:45.100
毕竟它改善了这么多东西

00:45.360 --> 00:47.920
将来会慢慢的普及开来

00:48.180 --> 00:50.740
但是至少目前市面上

00:51.000 --> 00:53.560
大部分还是用的是VIPAC4

00:53.820 --> 00:56.620
但是同学们要知道VIPAC5这一点东西

00:56.820 --> 01:01.440
在VIPAC5里面它做出了更新的主要分为这么两个方面

01:01.700 --> 01:05.020
袁老师总结起来一个是看不见的变化

01:06.300 --> 01:08.100
或者说看不见的优化

01:08.600 --> 01:10.140
这些看不见的优化

01:10.660 --> 01:14.500
同学们就不用去很关注了 因为它并不影响你大建工程

01:14.740 --> 01:17.300
并不影响你去用它做任何事情

01:17.820 --> 01:20.120
它是内部的实现上有一些变化

01:20.640 --> 01:22.680
另外一些的是看得见的变化

01:25.370 --> 01:28.250
这种看得见的变化又分为主要两个方面

01:28.250 --> 01:32.570
一个是小的变化

01:33.690 --> 01:34.690
一个是大的变化

01:34.690 --> 01:36.090
大的变化就一个

01:37.090 --> 01:38.330
主要是联邦模块

01:40.010 --> 01:44.850
联邦模块我决定单独的抽一节课来进行讲解

01:45.250 --> 01:50.010
同学们在开发中目前至少看上去联邦模块用的其实不太多

01:50.490 --> 01:53.290
我们这节课就讲它的一些小的变化

01:53.610 --> 01:55.650
其实它小的变化非常多

01:56.130 --> 02:00.090
我这里挑了一些比较明显的小的变化

02:00.890 --> 02:04.730
我们这里因为之前有同学遇到一些问题

02:05.010 --> 02:07.130
就是他学我们的VIPIX4

02:07.370 --> 02:10.530
但是他没有遵照我们课程里面说的

02:10.530 --> 02:13.530
尽量使用老师提供的版本号

02:13.890 --> 02:17.090
他可能自己去下载版本 自己去安装VIPIX

02:17.090 --> 02:21.890
导致他的VIPIX的版本是5

02:22.130 --> 02:25.530
那么5里面他就很多的配置他就不太一样

02:25.530 --> 02:29.690
我这里主要是说重要的不太一样的变化

02:29.690 --> 02:31.610
我们这里可以聊的是这一方面

02:32.090 --> 02:34.890
联邦模块我们换一节课单独来聊

02:36.170 --> 02:39.250
好 OK 我们来看一下它有哪些小的变化

02:39.570 --> 02:41.890
第一个是清除输出目录

02:41.890 --> 02:43.650
其实每个都很简单

02:44.010 --> 02:47.290
清除输出目录这一块我们过去在VIPIX4里面

02:47.290 --> 02:50.410
使用的是一个插件叫做CleanVIPIX

02:50.610 --> 02:51.530
还记得吗

02:51.530 --> 02:55.490
它主要的目的是为了清除这个DESM目录

02:55.490 --> 02:57.730
我们打包之后不是一个这个目录吗

02:57.730 --> 03:00.250
每一次打包先把这个目录删一遍

03:00.250 --> 03:02.730
删了之后我们再进行重新打包

03:02.730 --> 03:04.170
主要是起这么一个作用

03:04.170 --> 03:05.730
那么在VIPIX5里面

03:05.730 --> 03:07.890
实际上我们不需要安装这个插件了

03:07.890 --> 03:08.930
完全不需要了

03:08.930 --> 03:11.130
实际上这个插件你看它的官方稳当

03:11.130 --> 03:14.530
它其实也就支持到VIPIX4

03:14.530 --> 03:16.530
VIPIX5它已经不需要了

03:16.850 --> 03:18.970
为什么呢VIPIX5它内置了

03:19.490 --> 03:21.890
清除输出目录的功能

03:21.890 --> 03:24.010
因此我们只需要做个配置就完事了

03:24.010 --> 03:25.210
好我们来具体演示一下

03:25.210 --> 03:26.370
非常非常简单

03:26.890 --> 03:28.410
我找桌面上把这个

03:30.530 --> 03:31.410
VIPIX5

03:32.650 --> 03:33.330
好看一下吧

03:34.450 --> 03:37.010
这里清除输出目录找到这边

03:37.010 --> 03:38.530
我们来看一下我们的安装

03:38.530 --> 03:40.370
安装的其实我这里就安装了两个

03:40.370 --> 03:41.170
一个是VIPIX1

03:41.170 --> 03:42.090
一个是VIPIX2

03:42.090 --> 03:44.130
CleanVIPIX5这个版本

03:44.850 --> 03:46.890
然后它的配置

03:46.890 --> 03:47.930
配置非常简单

03:47.930 --> 03:52.010
我就配置这个模式输出为生产环境

03:52.010 --> 03:53.930
开发环境也是一样

03:53.930 --> 03:56.730
Output这里配置一个Clean

03:56.730 --> 03:58.730
表示清除输出目录

03:58.730 --> 03:59.930
所谓就完事了

03:59.930 --> 04:00.890
非常简单

04:00.890 --> 04:02.050
其他就没啥了

04:02.050 --> 04:03.650
这里边index都是空的

04:03.650 --> 04:04.770
好咱们来试一下吧

04:06.650 --> 04:07.330
先来打个包

04:08.410 --> 04:09.010
Rombit

04:10.490 --> 04:11.730
打包完了之后

04:11.730 --> 04:12.850
我们看到这里一个空的

04:12.890 --> 04:14.290
因为我这个元代码是空的

04:14.290 --> 04:15.090
所以这里空的

04:15.090 --> 04:15.690
这个不重要

04:15.690 --> 04:17.410
我们在这个DX模篤里边

04:17.410 --> 04:18.290
随便加一个

04:18.290 --> 04:19.730
比方加点A.S

04:19.730 --> 04:21.850
再加一个B.TST

04:21.850 --> 04:24.130
我们在重新打包的时候

04:24.130 --> 04:25.730
就看一下这两个也没被删除

04:25.730 --> 04:26.450
就完事了

04:27.330 --> 04:27.730
运行

04:28.970 --> 04:29.610
看是吧

04:29.610 --> 04:30.130
被删除了

04:31.130 --> 04:31.770
非常简单

04:31.770 --> 04:33.130
这就是清除输出目录

04:33.130 --> 04:36.050
我们不需要再重新去安装插件了

04:36.050 --> 04:36.610
这是第一个

04:37.810 --> 04:38.210
下一个

04:40.050 --> 04:42.210
这个是一个叫TopLevel Eraser

04:42.210 --> 04:44.290
这个玩意儿我之所以一列出来

04:44.290 --> 04:48.330
是因为袁老师本身是比较喜欢这个变化的

04:50.130 --> 04:51.530
这个玩意儿实际上是什么呢

04:51.530 --> 04:55.010
就是我们在开发的时候

04:55.010 --> 04:57.610
很多的场景都是一个异部场景

04:57.610 --> 04:57.970
对吧

04:57.970 --> 04:59.570
它返回了一个Promise

04:59.570 --> 05:02.410
那么我们在过去是需要

05:02.410 --> 05:04.730
使用Erwitter去等待它的

05:04.730 --> 05:05.570
但是这个Erwitter

05:05.570 --> 05:06.850
它有一个前提条件

05:06.850 --> 05:09.010
它必须要放到一个函数里边

05:09.010 --> 05:12.090
这个函数必须要标记为Ersync

05:12.130 --> 05:12.650
对吧

05:12.650 --> 05:14.170
要放到一个函数里边

05:14.170 --> 05:15.770
然后在函数里边

05:15.770 --> 05:18.250
我们才能去使用这个Erwitter

05:18.250 --> 05:19.650
因此有的时候

05:19.650 --> 05:21.850
我们如果说要在全局代码中

05:21.850 --> 05:23.730
去使用个Erwitter还办不到

05:23.730 --> 05:25.410
必须要套一个函数

05:25.410 --> 05:27.930
就是这么一个情况

05:27.930 --> 05:31.450
那么如果说我们能够在全局里边

05:31.450 --> 05:32.450
使用个Erwitter

05:32.450 --> 05:35.410
就会减少我们的代码书写

05:35.410 --> 05:37.290
我们不用去套函数的

05:37.290 --> 05:39.850
实际上这一块在未拍个5里边

05:39.890 --> 05:42.370
它是能够支持的

05:42.370 --> 05:45.930
但是目前它仍然是一个

05:45.930 --> 05:48.370
已经经过了一年了

05:48.370 --> 05:52.010
但是到目前仍然是一个试验性的功能

05:52.010 --> 05:52.890
看一下吧

05:52.890 --> 05:56.690
就是如果说你开启了这个top level

05:56.690 --> 05:58.970
顶级的Erwitter

05:58.970 --> 06:00.330
开启了之后

06:00.330 --> 06:03.290
你们就可以在代码里边直接使用Erwitter

06:03.290 --> 06:06.050
而不需要把它套到函数里边了

06:06.050 --> 06:07.610
懂得意思吗

06:07.610 --> 06:09.650
在全局里边都可以直接使用Erwitter

06:09.650 --> 06:11.010
就这么简单

06:11.010 --> 06:13.730
但是目前还没有成为正式标准

06:13.730 --> 06:17.810
其实这个提案还不是说未拍可出的

06:17.810 --> 06:20.130
是官方正在讨论这个东西

06:20.130 --> 06:21.530
官方正在讨论

06:21.530 --> 06:24.490
如果说官方那边成为标准之后

06:24.490 --> 06:26.450
一些新的流量器里边不需要未拍

06:26.450 --> 06:27.890
它都能直接支持了

06:27.890 --> 06:29.810
但官方目前还没有成为正式标准

06:29.810 --> 06:31.370
所以说未拍可能

06:31.370 --> 06:33.530
它仍然是把它作为一个试验性的功能

06:33.530 --> 06:36.810
因为它可能将来标准会有变化

06:36.810 --> 06:38.090
因此你要配置的话

06:38.130 --> 06:38.930
非常简单

06:38.930 --> 06:45.050
你只需要配置一个试验性的功能

06:45.050 --> 06:46.810
top-level-await

06:46.810 --> 06:48.250
把它开启就可以了

06:48.250 --> 06:49.530
我们来看一下这个例子

06:52.200 --> 06:54.040
安装的话还是一样

06:54.040 --> 06:57.080
就安装两个一个未拍可立

06:57.080 --> 06:58.600
然后配置的时候

06:58.600 --> 07:00.760
我们其他没啥好说的就是

07:00.760 --> 07:03.200
experiment-periment

07:03.200 --> 07:05.400
把它top-level-await

07:05.400 --> 07:07.280
把它开启就完事了

07:07.360 --> 07:08.760
我们在代码里边

07:08.760 --> 07:11.400
你会看到我这里用阿迦克斯

07:11.400 --> 07:12.600
去访问了一个网站

07:12.600 --> 07:14.080
尽管跨域会遇到问题

07:14.080 --> 07:15.040
但是我们不运行

07:15.040 --> 07:16.040
我们就看打包结果

07:17.400 --> 07:18.400
请求一个网站

07:18.400 --> 07:20.400
你看是不是一个顶级的

07:20.400 --> 07:21.680
返回一个promise对吧

07:21.680 --> 07:22.720
那过去的代码

07:22.720 --> 07:23.800
语法是有问题的

07:23.800 --> 07:25.600
因为它必须要放到函数里面

07:25.600 --> 07:26.400
但是我们现在

07:26.400 --> 07:27.200
这样的写了之后

07:27.200 --> 07:30.370
我们来打包试一下

07:30.490 --> 07:33.970
我们这里NPROD

07:35.010 --> 07:35.530
打包

07:36.370 --> 07:37.330
打包完了之后

07:37.330 --> 07:38.170
我们来看一下这边

07:38.890 --> 07:40.170
这边生成了一大堆东西

07:40.170 --> 07:40.970
不用去管它

07:40.970 --> 07:44.450
我们就关注的是我们那个代码

07:44.450 --> 07:45.450
那个废棋代码

07:45.450 --> 07:46.450
它跑哪去了

07:47.290 --> 07:48.450
你会看到的

07:48.450 --> 07:49.450
我们格式化一下

07:50.170 --> 07:52.290
你会看到这里为什么打包结果里面

07:52.290 --> 07:53.610
可以使用这个尾声

07:53.610 --> 07:55.410
是因为它把它放到了一个

07:55.410 --> 07:57.650
逆级执行函数里面去了

07:57.650 --> 07:58.130
看到没

07:58.130 --> 07:59.130
其他不用管

07:59.130 --> 08:00.130
就管这个关键点

08:00.650 --> 08:02.490
Essink是一个函数

08:02.490 --> 08:04.250
雕计为Essink的函数

08:04.250 --> 08:05.810
然后这个函数是

08:07.970 --> 08:09.170
这里还要传过去

08:09.170 --> 08:10.250
传过去那边

08:10.250 --> 08:10.970
传过去过后

08:10.970 --> 08:12.970
它那边就会立即把它执行一遍

08:12.970 --> 08:15.010
所以说最终我们这个尾扯

08:15.010 --> 08:16.490
之所以在打包结果里面

08:16.490 --> 08:18.130
仍然可以正常使用

08:18.130 --> 08:19.930
是因为它把它放到了一个

08:19.930 --> 08:21.570
函数里面去执行

08:22.490 --> 08:24.650
OK 这是关于这个点

08:25.170 --> 08:27.370
下一个打包体积优化

08:27.370 --> 08:29.610
这个优化它对这个取写品

08:30.530 --> 08:31.730
就是塑窑优化

08:31.730 --> 08:33.770
以及作用于提升这些东西

08:33.770 --> 08:35.810
做了一些优化

08:35.810 --> 08:37.170
让我们的打包体积

08:37.170 --> 08:38.970
就是它的判定更加智能

08:39.530 --> 08:41.770
更加可以容易优化打包体积

08:41.770 --> 08:43.530
这一块我去直接说

08:43.530 --> 08:45.130
你同学们感受不到

08:45.130 --> 08:46.090
我们来看一下

08:46.090 --> 08:47.570
袁老师给大家准备了一个例子

08:48.290 --> 08:51.130
就是打包体积优化这个例子

08:51.130 --> 08:52.810
这个例子里边我们来看一下安装

08:52.810 --> 08:54.490
安装的话也是安装了两个

08:54.490 --> 08:55.570
一个外派给一个外派

08:55.570 --> 08:58.050
可以配置了

08:58.610 --> 08:59.810
我配置了两个解数

09:00.130 --> 09:01.090
两个入口

09:01.090 --> 09:02.770
一个是index1

09:02.770 --> 09:06.930
它的入口文件是这个文件

09:06.930 --> 09:10.250
然后另外一个是index2.js

09:10.250 --> 09:11.330
是这个文件

09:11.330 --> 09:13.170
做两个文件

09:13.170 --> 09:14.290
那么接着我们来看一下代码

09:14.290 --> 09:15.570
代码其实也很简单

09:15.570 --> 09:17.930
index1里边就一个输出语句

09:17.930 --> 09:18.930
下啥都没有

09:19.690 --> 09:21.330
然后index2里边

09:21.330 --> 09:23.610
它导入了模块A

09:24.450 --> 09:26.530
模块A里边有两个函数

09:26.530 --> 09:27.810
f1 f2

09:28.530 --> 09:30.530
你看简单看一下吧

09:30.530 --> 09:32.010
它只这边

09:32.010 --> 09:34.290
我们把那个分个屏吧

09:34.290 --> 09:36.250
不然的话里面有容易看

09:38.250 --> 09:38.730
我们来先

09:38.730 --> 09:41.210
要不然先看一下index1吧

09:41.210 --> 09:43.010
先看一下它打包出来的结果

09:43.010 --> 09:44.210
我们这里先运行

09:45.930 --> 09:47.530
这里我需要安装依赖

09:47.530 --> 09:48.370
还没有安装依赖

09:54.320 --> 09:55.280
好了

09:55.280 --> 09:56.320
然后我们先打包

09:56.320 --> 09:57.640
npm装必有的

09:58.920 --> 10:00.880
我们看一下index1的打包结果

10:00.880 --> 10:02.760
index1只有没有任何依赖

10:02.760 --> 10:04.440
对吧 它只有这么一个输出语句

10:04.440 --> 10:05.800
在我们的vpeg4里边

10:05.800 --> 10:07.640
是不是还会有一个立即执行函数

10:07.640 --> 10:08.480
对不对

10:08.480 --> 10:09.880
还会把这个模块放进去

10:09.880 --> 10:10.080
对吧

10:10.080 --> 10:12.360
我们之前分析过vpeg4的打包结果

10:12.360 --> 10:12.920
我们再看一下

10:12.920 --> 10:15.320
vpeg5在面对这种情况下

10:15.320 --> 10:17.200
它会非常智能的发现

10:17.200 --> 10:19.560
我没有必要使用立即执行函数了

10:19.560 --> 10:20.440
在打包结果里边

10:20.440 --> 10:21.840
就真的只有这么一句话

10:22.840 --> 10:23.680
看到没

10:23.680 --> 10:26.400
这就是vpeg5的功效

10:26.400 --> 10:28.160
它非常智能的分析出来了

10:28.160 --> 10:29.160
我们其实

10:29.160 --> 10:31.000
不需要去用什么立即执行函数

10:31.000 --> 10:32.120
就这么一句话就完事了

10:32.960 --> 10:34.680
好 我们来看一下index2

10:34.680 --> 10:37.280
index2它稍微复杂一点

10:37.280 --> 10:40.800
它里边有一些比较深的依赖关系

10:40.800 --> 10:42.200
它首先依赖了模块A

10:44.320 --> 10:44.920
看到没

10:44.920 --> 10:46.200
依赖了模块A

10:46.200 --> 10:48.400
而模块A里边用到了什么函数呢

10:48.400 --> 10:49.600
用到了f1函数

10:50.920 --> 10:51.400
对吧

10:51.400 --> 10:54.200
那么按照我们之前学习的取写性

10:54.200 --> 10:54.920
塑料优化

10:54.920 --> 10:57.360
说f2就被提出出去了

10:57.360 --> 10:57.760
对不对

10:57.760 --> 10:59.120
自动去提出出去了

10:59.120 --> 11:02.080
但是模块A里边它又依赖了模块B

11:02.120 --> 11:03.560
模块B呢

11:03.560 --> 11:05.440
它用到了f3

11:05.440 --> 11:06.640
然后呢

11:06.640 --> 11:08.400
我这里又导入了整个

11:08.400 --> 11:09.960
把模块B整个导入进来了

11:09.960 --> 11:13.040
我们来看一下模块B

11:13.040 --> 11:14.560
模块B其实有一个f3

11:14.560 --> 11:17.240
有一个f4 两个都有

11:17.240 --> 11:18.640
你看一下这个依赖关系

11:18.640 --> 11:19.960
虽然只有三个文件

11:19.960 --> 11:22.040
感觉上还是挺复杂的

11:22.040 --> 11:23.160
你们可以试一下

11:23.160 --> 11:27.000
在vpeg4里边能不能形成很好的优化

11:27.000 --> 11:28.440
你们自己试一下就知道了

11:28.440 --> 11:29.920
其实不能的

11:29.920 --> 11:31.840
vpeg4分析不出来

11:31.840 --> 11:33.520
这么复杂的依赖关系

11:33.520 --> 11:34.840
那么我们在vpeg5里边

11:34.840 --> 11:37.200
我们看一下它能优化到什么程度

11:37.200 --> 11:38.440
我们这里再打包

11:38.440 --> 11:39.480
其实我们刚才已经打包了

11:39.480 --> 11:40.640
直接看一下打包结果

11:40.640 --> 11:43.040
index2.j

11:43.040 --> 11:45.080
你会发现非常恐怖

11:45.080 --> 11:47.000
它可以优化到这种程度

11:47.000 --> 11:48.560
它发现啊

11:48.560 --> 11:51.000
虽然说你有三个模块

11:51.000 --> 11:52.920
形成的依赖关系

11:52.920 --> 11:54.920
并且还用到了很多函数

11:54.920 --> 11:57.040
但是你最终的目的

11:57.040 --> 11:59.720
其实就是要

11:59.720 --> 12:00.560
调用f1

12:00.560 --> 12:01.320
f1是什么

12:01.320 --> 12:04.160
f1就是输出一个字不串f1

12:04.160 --> 12:05.640
然后呢调用这个f4

12:05.640 --> 12:06.920
f4在模块b里边

12:06.920 --> 12:08.480
它只需要输出f4

12:08.480 --> 12:09.560
整个模块

12:09.560 --> 12:10.640
整个从入口开始

12:10.640 --> 12:12.880
整个你要做的事情

12:12.880 --> 12:14.760
就是输出一个f1

12:14.760 --> 12:16.080
输出一个f4

12:16.080 --> 12:17.840
因此在打包之后呢

12:17.840 --> 12:19.160
函数都没了

12:19.160 --> 12:21.800
它只有两个输出语句f1 f4

12:21.800 --> 12:23.480
这个优化是非常恐怖的

12:23.480 --> 12:25.120
这种优化是不是就已经

12:25.120 --> 12:27.160
没办法再进行优化了

12:27.160 --> 12:27.440
对吧

12:27.440 --> 12:29.080
已经优化了非常彻底了

12:29.080 --> 12:30.520
就是vpeg5呢

12:30.560 --> 12:31.520
它对优化方面

12:31.520 --> 12:32.760
要打包优化方面

12:32.760 --> 12:34.320
特别是打标体积的优化方面

12:34.320 --> 12:35.520
做了很多的努力

12:37.320 --> 12:38.600
这是关于这个

12:38.600 --> 12:39.200
但是这个呢

12:39.200 --> 12:40.600
我们其实感知的

12:41.320 --> 12:42.680
我们只需要感知到

12:42.680 --> 12:43.920
它的体积优化了

12:43.920 --> 12:44.800
但是呢

12:44.800 --> 12:46.800
我们不知道它具体是怎么优化的

12:46.800 --> 12:48.120
我们不用去关心这一点

12:48.920 --> 12:50.120
好 接下来的下一个

12:50.120 --> 12:52.720
就是打包缓存开箱机用

12:52.720 --> 12:54.200
vpeg过去呢

12:54.200 --> 12:57.120
被人一直被人勾并的一点

12:57.120 --> 12:57.920
就是它的

12:58.920 --> 13:01.320
打包时间太长了

13:01.320 --> 13:02.920
打包时间太长了

13:02.920 --> 13:03.520
有的时候呢

13:03.520 --> 13:04.720
一个大的工程

13:04.720 --> 13:07.120
可能我们改动一点代吧

13:07.120 --> 13:08.320
它就要重新打包嘛

13:08.320 --> 13:09.120
它一重新打包

13:09.120 --> 13:10.320
可能要等很久

13:10.320 --> 13:11.120
等10秒钟

13:11.120 --> 13:12.120
20秒钟

13:12.120 --> 13:14.120
我才能看到最终的效果

13:14.120 --> 13:15.520
如果说相不小的话

13:15.520 --> 13:17.120
还觉得可以接受

13:17.120 --> 13:17.520
对吧

13:17.520 --> 13:18.320
相不大的话

13:18.320 --> 13:20.720
10多20秒就很难接受了

13:20.720 --> 13:21.720
相不小的话

13:21.720 --> 13:23.320
一般时间还比较短

13:23.320 --> 13:25.320
可能就一秒钟不到

13:25.320 --> 13:26.320
那么这一块呢

13:26.320 --> 13:27.120
那么我们过去呢

13:27.120 --> 13:29.120
是需要使用一些

13:29.120 --> 13:30.920
loader来解决这个问题

13:30.920 --> 13:31.520
什么loader呢

13:31.520 --> 13:32.120
开启loader

13:32.120 --> 13:33.120
就是缓存

13:33.120 --> 13:35.520
缓存之前的打包结果

13:35.520 --> 13:36.920
那么下一次打包的时候呢

13:36.920 --> 13:38.520
如果说发现文件没有什么

13:38.520 --> 13:39.520
对应的打包结果

13:39.520 --> 13:41.320
文件没有什么变动的话

13:41.320 --> 13:43.120
那么我就直接使用之前

13:43.120 --> 13:46.120
这个文件对应的打包结果

13:46.120 --> 13:47.720
所以说用了缓存之后呢

13:47.720 --> 13:50.920
可以优化这个打包的速度

13:50.920 --> 13:52.320
那么在vpeg5呢

13:52.320 --> 13:55.120
默认就已经开启了打包缓存

13:55.120 --> 13:59.120
你无需再次安装开启loader了

13:59.120 --> 13:59.720
但是呢

13:59.720 --> 14:00.920
默认情况下

14:00.920 --> 14:03.120
vpeg的事情将缓存呢

14:03.120 --> 14:06.920
放到内存里边

14:06.920 --> 14:09.520
如果说你要改变这种模式的话

14:09.520 --> 14:11.720
你可以通过开启的进行配置

14:11.720 --> 14:16.010
我们来看一下

14:16.010 --> 14:20.150
关键吧

14:20.150 --> 14:23.150
打包缓存

14:23.150 --> 14:25.550
安装就这两个

14:25.550 --> 14:27.750
实际上我随便安装两个东西

14:27.750 --> 14:29.550
因为我想把模块变得多一点

14:29.550 --> 14:33.750
然后比较明显的能够看到打包的结果

14:33.750 --> 14:35.350
好我们把loader码90删除掉

14:35.350 --> 14:42.800
我们重新安装一下loader码90

14:42.800 --> 14:45.200
安装一下

14:45.200 --> 14:47.200
好接下来我们来看一下这一块

14:47.200 --> 14:50.200
就是vpeg配置文件里面

14:50.200 --> 14:52.400
配置文件里面其他的我没有写什么

14:52.400 --> 14:54.800
主要是这里有个配置要开启

14:54.800 --> 14:55.700
结果你不配置这个

14:55.700 --> 14:56.800
它有没有缓存

14:56.800 --> 14:58.200
有缓存

14:58.200 --> 15:00.800
只是它缓存到内存里边了

15:00.800 --> 15:02.600
如果说你不希望它缓存到内存

15:02.600 --> 15:04.200
因为有些同学的电脑

15:04.200 --> 15:06.000
可能内存本身就不足

15:06.000 --> 15:07.600
内存本身就很小

15:07.600 --> 15:11.400
内存再去增加一些内存的占用的话

15:11.400 --> 15:13.300
可能电脑就比较吃紧了

15:13.300 --> 15:15.100
因此我们有的时候希望把它缓

15:15.100 --> 15:17.400
而且内存还比较容易丢失

15:17.400 --> 15:21.400
比方说你关掉了这个vscode

15:21.400 --> 15:22.800
关掉了一个loader环境

15:22.800 --> 15:25.200
那可能下一次重新启动的时候

15:25.200 --> 15:26.400
它内存里面又没了

15:26.400 --> 15:29.400
所以有的时候我们希望把它缓存到文件里面

15:29.400 --> 15:31.400
是不容易丢失的

15:31.400 --> 15:33.600
哪怕你重新启动的电脑

15:33.600 --> 15:35.400
它缓存仍然在

15:35.400 --> 15:36.600
那么就需要配置

15:36.600 --> 15:39.800
配置的方式就是使用这个catch

15:39.800 --> 15:42.300
这里内形给它写为

15:42.300 --> 15:43.100
支持两种

15:43.100 --> 15:44.300
一种是memory

15:44.300 --> 15:48.400
默认的缓存到内存

15:48.400 --> 15:50.500
可以把它改为file system

15:50.500 --> 15:53.300
表示缓存到文件

15:53.300 --> 15:55.900
那么这里可以指定文件的目录

15:55.900 --> 15:57.800
这里我们通过loader环境里面的

15:57.800 --> 15:59.200
一个patch模块

15:59.200 --> 16:00.900
给它构建一个目录出来

16:00.900 --> 16:03.200
表示当前目录下的loader module

16:03.200 --> 16:04.800
下面的我给它缓存到一个

16:04.800 --> 16:07.100
第二catch目录下面的wipatch

16:07.100 --> 16:08.200
当然这个文件目录

16:08.200 --> 16:10.500
也可以随着更改都可以

16:10.500 --> 16:11.800
比方说我们现在配置好了

16:11.800 --> 16:13.000
接下来我们来打包试一下

16:13.000 --> 16:15.200
打包里边我这里的就很简单

16:15.200 --> 16:16.300
我这里就导入loader

16:16.300 --> 16:17.200
导入movement

16:17.200 --> 16:18.400
表示我又依赖

16:18.400 --> 16:21.200
那么你就必须要把这两个东西一起打包

16:21.200 --> 16:22.900
我们来看一下

16:22.900 --> 16:25.100
第一次打包的时候

16:25.100 --> 16:26.700
由于没有缓存

16:26.700 --> 16:29.600
因此我们来看一下它打包的时间

16:29.600 --> 16:31.400
我从原装干嘛

16:31.400 --> 16:35.540
run build

16:35.540 --> 16:41.040
第一次打包用了1228毫秒

16:41.040 --> 16:43.740
就是一秒钟多一些

16:43.740 --> 16:46.040
接下来我们来看一下第二次打包

16:46.040 --> 16:47.240
我们再重新打包

16:47.240 --> 16:50.340
npm run build

16:50.340 --> 16:52.540
回车

16:52.540 --> 16:56.540
你会发现第二次打包只用了449毫秒

16:56.540 --> 16:58.640
时间短了很多对不对

16:58.640 --> 16:59.540
那么说明什么呢

16:59.540 --> 17:02.840
说明第二次打包已经使用了缓存

17:02.840 --> 17:04.840
它不需要把一代关系

17:04.840 --> 17:06.940
不需要把每一个文件

17:06.940 --> 17:08.940
包括一个楼单系里面有很多的文件

17:08.940 --> 17:10.340
movement里面有很多的模块

17:10.340 --> 17:12.840
全部来重新再来一个一个读一遍了

17:12.840 --> 17:13.640
不需要了

17:13.640 --> 17:16.440
因为之前已经生成了很多的缓存结果

17:16.440 --> 17:17.940
直接使用之前的缓存结果

17:17.940 --> 17:19.640
再合并就完成了

17:19.640 --> 17:21.640
那么我们现在看一下缓存在哪呢

17:21.640 --> 17:22.440
在这

17:22.440 --> 17:24.240
我们给它指定的目录是在

17:24.240 --> 17:26.040
刷新一下

17:26.040 --> 17:27.740
指定的目录是在开启里边

17:28.140 --> 17:28.940
看到没

17:28.940 --> 17:30.140
这就是它的缓存

17:30.140 --> 17:31.940
当然这就是一些二进制文件

17:31.940 --> 17:33.840
你不用去看它

17:33.840 --> 17:35.840
这就是打包缓存

17:35.840 --> 17:38.540
我们就不再需要使用开启楼段了

17:38.540 --> 17:39.240
好吧

17:39.240 --> 17:40.440
这是这个

17:40.440 --> 17:42.040
最后一个是资源模块

17:42.040 --> 17:43.340
这一块的变动

17:43.340 --> 17:45.940
就对我们开发是配置的时候

17:45.940 --> 17:47.540
变动是比较大的

17:47.540 --> 17:49.440
就是我们之前的读取文件

17:49.440 --> 17:52.240
像我们以前经常会做这么一些事

17:52.240 --> 17:55.040
看我们代码

17:55.040 --> 17:56.740
我们可能会导入一个图片

17:56.740 --> 17:57.340
对吧

17:57.340 --> 17:58.340
说看做这种事

17:58.340 --> 18:00.040
这里有很多图片

18:00.040 --> 18:02.440
有图片有文本

18:02.440 --> 18:04.340
有图片有图片

18:05.640 --> 18:07.340
我们之前在我们代码里边

18:07.340 --> 18:09.040
会导入一些外部资源

18:09.040 --> 18:11.840
那么我们都是通过模块的方式来导入的

18:11.840 --> 18:12.740
那么这些资源

18:12.740 --> 18:15.940
我们知道外排可能是识别不了的

18:15.940 --> 18:16.840
对不对

18:16.840 --> 18:17.940
由于它识别不了

18:17.940 --> 18:21.140
所以说我们会安装一些loader

18:21.140 --> 18:22.740
来帮助它识别

18:22.740 --> 18:24.440
把这些文件的改

18:24.440 --> 18:26.840
通过loader把它变成介石

18:26.840 --> 18:27.640
这样子呢

18:27.640 --> 18:30.440
vpk才能够识别这些文件

18:30.440 --> 18:32.040
但是现在不需要了

18:32.040 --> 18:33.840
我们过去需要安装很多loader

18:33.840 --> 18:35.440
什么 fileloader

18:35.440 --> 18:37.540
你们学到之前的vpk4的课程

18:37.540 --> 18:38.540
应该就知道

18:38.540 --> 18:40.040
什么urlloader

18:40.040 --> 18:41.240
还有rowloader

18:41.240 --> 18:42.740
这些进行处理

18:42.740 --> 18:44.340
那么现在不需要了

18:44.340 --> 18:47.540
vpk它天生目前就支持了

18:47.540 --> 18:49.140
资源型的模块

18:49.140 --> 18:51.640
我们只需要做一些配置就可以了

18:51.640 --> 18:52.340
怎么配置呢

18:52.340 --> 18:54.140
我们来看一下

18:54.140 --> 18:56.440
你看我们现在安装包里边

18:56.440 --> 18:58.940
只安装了一个vpk

18:58.940 --> 19:01.640
正向两个的是为了给你们看效果

19:01.640 --> 19:02.740
这两个你们懂得

19:02.740 --> 19:03.840
不用再多说了

19:03.840 --> 19:04.840
为了给你们看效果

19:04.840 --> 19:06.040
我随便安装了一下

19:06.040 --> 19:08.040
其实核心的就这两个

19:08.040 --> 19:10.340
我们就没有再去安装其他的loader了

19:10.340 --> 19:12.040
我们来看一下

19:12.040 --> 19:14.840
配置的时候怎么写

19:14.840 --> 19:16.340
模式的话我无所谓

19:16.340 --> 19:17.640
你production的模式的

19:17.640 --> 19:18.840
还是这个development

19:18.840 --> 19:20.040
模式都无所谓

19:20.040 --> 19:21.340
这些都无所谓

19:21.340 --> 19:23.040
我这里开了一个开发服务器

19:23.140 --> 19:24.340
为了方便看效果

19:24.340 --> 19:26.140
8080

19:26.140 --> 19:26.440
这里呢

19:26.440 --> 19:27.740
我设置了一个插件

19:27.740 --> 19:29.340
就是atmvpk

19:29.340 --> 19:30.540
生存页面的插件

19:30.540 --> 19:31.540
这些都不影响

19:31.540 --> 19:33.740
关键点点在这

19:33.740 --> 19:35.440
output里边

19:35.440 --> 19:36.040
我们过去

19:36.040 --> 19:39.640
我们一般是配置打包结果的文件名

19:39.640 --> 19:42.140
以及打包结果的目录

19:42.140 --> 19:42.340
对吧

19:42.340 --> 19:43.440
目录在dist

19:43.440 --> 19:45.340
现在我们多了一个配置

19:45.340 --> 19:46.240
多了什么配置呢

19:46.240 --> 19:51.140
叫rset支援module支援模块

19:51.140 --> 19:52.040
file name

19:52.140 --> 19:55.040
支援模块的文件名

19:55.040 --> 19:56.540
就是说我有一些外部资源

19:56.540 --> 19:57.640
可能是图片

19:57.640 --> 19:58.840
可能是mp3

19:58.840 --> 20:00.740
可能是一些什么txt

20:00.740 --> 20:04.540
这些文件在打包结果里边放哪

20:04.540 --> 20:05.640
放哪呢

20:05.640 --> 20:07.840
放到rset目录下面的

20:07.840 --> 20:10.640
渠断哈希文件指纹

20:10.640 --> 20:11.240
然后呢

20:11.240 --> 20:13.240
取一个ext

20:13.240 --> 20:15.240
就一个后缀

20:15.240 --> 20:15.740
对吧

20:15.740 --> 20:17.140
我们把放到这

20:17.140 --> 20:19.540
这里表示我的资源打包到这

20:19.540 --> 20:20.140
但是接下来

20:20.140 --> 20:23.240
我们还是需要去配置那个规则

20:23.240 --> 20:24.140
因为有些资源的

20:24.140 --> 20:27.340
你得告诉他有哪些东西来处理

20:27.340 --> 20:28.340
但是配置的方式

20:28.340 --> 20:30.140
就不再使用loader的那种方式的

20:30.140 --> 20:31.240
我们来看一下

20:31.240 --> 20:32.640
我告诉他

20:32.640 --> 20:35.140
png这种图片啊

20:35.140 --> 20:36.540
你把它变成什么呢

20:36.540 --> 20:38.740
你把它变成了一个文件

20:38.740 --> 20:40.140
就打打包结果里边

20:40.140 --> 20:42.540
把它变成文件放到

20:42.540 --> 20:45.740
放到这个目录下面去

20:45.740 --> 20:47.940
反正就相当于是

20:48.540 --> 20:50.340
之前的fileloader

20:50.340 --> 20:52.440
就相当于是这个东西

20:52.440 --> 20:54.240
你只要给他标注

20:54.240 --> 20:55.440
png是什么东西啊

20:55.440 --> 20:58.840
png是一个资源

20:58.840 --> 21:00.040
这个东西该怎么的翻译呢

21:00.040 --> 21:01.140
或者是

21:01.140 --> 21:02.640
sfs和resource呢

21:02.640 --> 21:06.940
这个在中国里面翻译出来都差不多啊

21:06.940 --> 21:08.540
就是一个外部资源

21:08.540 --> 21:12.140
那么他就会把它生成对应的文件

21:12.140 --> 21:13.540
按照这个文件规则

21:13.540 --> 21:15.840
把它放到这个目录下面去

21:15.840 --> 21:18.740
就会用类似于fileloader

21:18.740 --> 21:19.940
jpg呢

21:19.940 --> 21:20.740
这种图片呢

21:20.740 --> 21:21.840
我就随便写啊

21:21.840 --> 21:22.540
具体情况

21:22.540 --> 21:24.340
如果说里面将来需要用vpeg5

21:24.340 --> 21:25.940
去达建工程的话

21:25.940 --> 21:28.440
就尽管这种情况比较少

21:28.440 --> 21:30.940
那么你就根据自己的需要啊来写

21:30.940 --> 21:32.140
那我这里就随便写了

21:32.140 --> 21:33.340
为了掩饰

21:33.340 --> 21:34.440
jpg图片呢

21:34.440 --> 21:38.540
我们就类似于urlloader

21:38.540 --> 21:41.740
把它变成一个dataurl

21:41.740 --> 21:43.840
用英断的这种方式

21:43.840 --> 21:45.040
就不是生成文件了

21:45.040 --> 21:46.740
生成一个dataurl

21:46.740 --> 21:48.440
一会我们看就知道了

21:48.440 --> 21:50.240
txt这个文件呢

21:50.240 --> 21:52.140
我们这里用的是source

21:52.140 --> 21:55.040
表示资源的原始内容

21:55.040 --> 21:57.140
那么类似于rlloader

21:57.140 --> 21:57.940
这什么意思呢

21:57.940 --> 22:00.740
就比方说我这里导入txt

22:00.740 --> 22:02.340
这是txt文件

22:02.340 --> 22:04.640
那么我这里导入了txt

22:04.640 --> 22:07.440
由于txt他受到这个影响

22:07.440 --> 22:09.240
他受到这个影响

22:09.240 --> 22:10.340
表示说什么意思呢

22:10.340 --> 22:12.140
表示说你导入的是什么

22:12.140 --> 22:13.940
导入的是这个辩量

22:13.940 --> 22:17.540
就是他的文件的原始内容

22:17.540 --> 22:19.340
这个文件的原始内容是啥

22:19.340 --> 22:21.040
就这个

22:21.040 --> 22:22.740
懂了意思吧

22:22.740 --> 22:23.340
好

22:23.340 --> 22:24.340
然后我们再往下看

22:24.340 --> 22:28.240
一会我们运行出来就知道了

22:28.240 --> 22:29.740
好gf

22:29.740 --> 22:32.740
我们规定gf图片呢

22:32.740 --> 22:34.140
他要分情况

22:34.140 --> 22:35.540
这些其实东西

22:35.540 --> 22:37.440
你们不是说必须要这样写啊

22:37.440 --> 22:39.040
你们自己灵活处理

22:39.040 --> 22:41.840
gf这个东西呢

22:41.840 --> 22:42.540
他的内容呢

22:42.540 --> 22:44.240
我直接给告诉他就是一个资源

22:44.240 --> 22:46.040
那么这个资源怎么处理呢

22:46.040 --> 22:47.540
分情况

22:47.540 --> 22:48.940
我这里呢

22:48.940 --> 22:50.040
用了一个poster

22:50.040 --> 22:52.440
表示解析data URL condition

22:52.440 --> 22:53.240
表示什么意思

22:53.240 --> 22:55.440
他生成data URL的时候

22:55.440 --> 22:56.240
他的条件

22:56.240 --> 22:56.640
啥意思

22:56.640 --> 22:58.040
连起来啥意思

22:58.040 --> 23:00.540
我这里给了一个最大尺寸

23:00.540 --> 23:01.840
表示说

23:01.840 --> 23:05.640
4kb以下的gf图片

23:05.640 --> 23:08.840
他就会使用data URL

23:08.840 --> 23:10.840
4kb以上的呢

23:10.840 --> 23:13.240
他就会使用文件

23:13.240 --> 23:15.440
就这个意思

23:15.440 --> 23:16.240
文件放哪呢

23:16.240 --> 23:17.640
就放这

23:17.640 --> 23:18.940
其实这个位置呢

23:18.940 --> 23:20.440
你可以在具体的配置的时候

23:20.440 --> 23:20.940
可以更改

23:20.940 --> 23:23.040
比方说你可以用这种方式的更改

23:23.040 --> 23:23.640
那么这个配置呢

23:23.640 --> 23:24.840
就会覆盖掉

23:24.840 --> 23:27.040
对针对这个gf啊

23:27.040 --> 23:28.040
他就会覆盖掉

23:28.040 --> 23:29.740
上面这个配置

23:29.740 --> 23:31.340
那么他就会导一个新的目录啊

23:31.340 --> 23:31.940
这些都无所谓

23:31.940 --> 23:34.840
你们自己根据自己的情况来

23:34.840 --> 23:35.040
好

23:35.040 --> 23:35.840
咱们来试一下

23:35.840 --> 23:36.640
我们看我们代码

23:36.640 --> 23:37.540
代码很简单

23:37.540 --> 23:40.840
导入png 导入jpg 导入gf 导入jt

23:40.840 --> 23:42.040
然后把这四个东西输出

23:42.040 --> 23:43.740
看到底是啥

23:43.740 --> 23:44.040
好

23:44.040 --> 23:48.770
这里冰箱啊

23:48.770 --> 23:54.370
npm装的

23:54.370 --> 23:54.870
好

23:54.870 --> 23:56.070
打包完成

23:56.070 --> 23:56.770
冰箱出来啊

23:56.770 --> 23:57.570
看一下

23:57.570 --> 23:59.070
控制

23:59.070 --> 24:03.580
看一下控制台的输出目录

24:03.580 --> 24:04.980
看一下输出吧

24:04.980 --> 24:07.280
第一个png图片

24:09.180 --> 24:09.980
输出的是这个

24:09.980 --> 24:10.380
对吧

24:10.380 --> 24:11.280
png图片

24:11.280 --> 24:12.780
那他这个玩意是啥呢

24:12.780 --> 24:14.380
你看一下是啥

24:14.380 --> 24:15.880
是不是一个文件啊

24:15.880 --> 24:17.680
打包结果里边放到哪呢

24:17.680 --> 24:20.680
放到rss目录下面的这个文件里边去了

24:20.680 --> 24:20.880
对吧

24:20.880 --> 24:21.880
我们来看一下png

24:23.580 --> 24:24.980
png是不是这个规则

24:24.980 --> 24:27.180
类似于fileloader

24:27.180 --> 24:30.380
所以就把它打包到具体的一个目录里边去了

24:30.380 --> 24:32.780
文件格式按照这种格式来命名

24:32.780 --> 24:32.980
对吧

24:32.980 --> 24:34.980
这png图片简单吧

24:34.980 --> 24:36.780
然后jpg呢

24:36.780 --> 24:40.180
jpg它是用一个data url的方式

24:40.180 --> 24:42.380
它是用这种方式

24:42.380 --> 24:43.980
不要告诉我里面见过啊

24:43.980 --> 24:45.680
这种方式

24:45.680 --> 24:47.880
它就不再生成文件了

24:47.880 --> 24:49.980
看到没gf呢

24:51.980 --> 24:55.380
gfgf分情况

24:55.380 --> 24:57.880
如果说是4kb以下的呢

24:57.880 --> 24:59.080
它使用data url

24:59.080 --> 25:00.780
就是使用上面这种格式

25:00.780 --> 25:02.280
4kb以上的呢

25:02.280 --> 25:03.380
使用文件的格式

25:03.380 --> 25:05.580
那么现在它现在使用的是文件

25:05.580 --> 25:08.080
说明啥说明这个gf啊

25:08.080 --> 25:08.880
它的大小呢

25:08.880 --> 25:11.480
我们看一下有300多kb

25:11.480 --> 25:11.880
对吧

25:11.880 --> 25:13.580
它超过了4kb

25:13.580 --> 25:17.680
那如果说我这里设置的是400kb

25:18.980 --> 25:22.230
我再来看

25:22.230 --> 25:22.430
好

25:22.430 --> 25:23.930
刷新一下啊

25:23.930 --> 25:25.230
因为发现

25:25.230 --> 25:27.030
这个还没有超过400kb

25:27.030 --> 25:27.830
它300多kb

25:27.830 --> 25:30.530
它于是使用的是data url的这种方式

25:32.330 --> 25:32.530
好

25:32.530 --> 25:33.330
最后一个呢

25:33.330 --> 25:35.330
tst tst的话

25:35.330 --> 25:36.630
我们这里呢

25:36.630 --> 25:39.930
使用的是source

25:39.930 --> 25:42.430
表示把这个文件的内容导入进来

25:42.430 --> 25:45.030
于是这里导入的就是文件的内容

25:45.130 --> 25:46.630
那么这个内容我们看一下啊

25:48.430 --> 25:50.230
是不是就是文件内容

25:50.230 --> 25:50.530
对吧

25:50.530 --> 25:51.630
就这么回事

25:51.630 --> 25:51.830
好

25:51.830 --> 25:54.930
如果说你要看一下这个最终打包的输出的这个目录的话

25:54.930 --> 25:56.430
我们用np

25:56.430 --> 25:57.030
run

25:58.730 --> 25:59.530
run build

26:01.730 --> 26:01.830
好

26:01.830 --> 26:03.130
我们看一下dst

26:03.130 --> 26:04.430
我也会看到这里呢

26:04.430 --> 26:05.730
只有一张图片

26:05.730 --> 26:06.930
为什么只有一张图片

26:06.930 --> 26:08.630
因为png它是要生成图片的

26:08.630 --> 26:10.030
在我们的规则下边

26:10.030 --> 26:11.330
是要生成文件的

26:11.330 --> 26:11.630
然后呢

26:11.630 --> 26:13.330
jpg变成了什么呢

26:13.330 --> 26:14.330
jpg

26:14.330 --> 26:15.130
它变成了

26:16.430 --> 26:17.530
里面全是data url

26:17.530 --> 26:18.130
对吧

26:18.130 --> 26:20.430
jpg它变成data url

26:20.430 --> 26:22.930
然后tst是原始内容

26:22.930 --> 26:24.330
然后gf呢

26:24.330 --> 26:25.230
它根据情况

26:25.230 --> 26:25.730
它目前呢

26:25.730 --> 26:27.330
没有超过400 kb

26:27.330 --> 26:29.430
它仍然是data url

26:29.430 --> 26:31.230
那如果说把它改成4 kb

26:31.230 --> 26:32.430
英雄

26:32.430 --> 26:34.730
那么这里就会多一个gf

26:35.830 --> 26:37.130
看来就这么简单啊

26:37.130 --> 26:37.530
因此呢

26:37.530 --> 26:38.630
就是说了半天啊

26:38.630 --> 26:40.230
其实这些具体的配置呢

26:40.230 --> 26:41.830
并不重要

26:41.830 --> 26:43.130
就是我们要想说的

26:43.130 --> 26:45.230
就是资源模块在wp5里边

26:45.230 --> 26:47.030
它已经天生支持了

26:47.030 --> 26:48.830
你不需要再去安装这些东西了

26:48.830 --> 26:50.130
这些东西其实目前呢

26:50.130 --> 26:52.930
也就支持到wp4

26:52.930 --> 26:53.630
wp5呢

26:53.630 --> 26:54.830
就不需要了

26:54.830 --> 26:55.530
好吧

26:55.530 --> 26:57.130
这是一些小的改动啊

26:57.130 --> 26:58.330
比较明显的小的改动

26:58.330 --> 27:00.130
我这里呢统一说一下

27:00.130 --> 27:00.230
好

27:00.230 --> 27:01.530
这是这几个的内容啊

