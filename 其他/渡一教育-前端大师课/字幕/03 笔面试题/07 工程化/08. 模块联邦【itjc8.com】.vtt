WEBVTT

00:00.240 --> 00:03.200
好 我们这几个可能来聊一聊

00:03.200 --> 00:06.040
VIPAC5的一个重大更新

00:06.040 --> 00:07.840
摩扩联邦

00:07.840 --> 00:10.520
摩扩联邦这一块知识呢

00:10.520 --> 00:14.360
虽然说是VIPAC5的重大更新

00:14.360 --> 00:18.160
但是可能跟你们没有什么直接的关系

00:18.160 --> 00:21.720
为什么呢 因为这一块它要解决的问题

00:21.720 --> 00:24.560
是危前端中的问题

00:24.560 --> 00:26.680
那么危前端这个事呢

00:26.840 --> 00:30.680
一般来说不是刚刚入职

00:30.680 --> 00:35.000
刚刚进入前端的同学们要接触的内容

00:35.000 --> 00:37.000
它一般是在公司里边

00:37.000 --> 00:39.000
一般是技术领导

00:39.000 --> 00:41.560
就是你们前端这个组里边的leader

00:41.560 --> 00:44.160
他来负责考虑的事情

00:44.160 --> 00:47.000
所以说呢跟你们可能没有什么直接的关系

00:47.000 --> 00:50.640
但是你多了解一些也并没有坏处

00:50.640 --> 00:53.880
危前端是一个很大很大的话题

00:53.880 --> 00:55.600
那么我简单的聊一聊

00:55.640 --> 00:57.360
它也诞生了很多的框架

00:57.360 --> 00:59.360
我这里就不去讲框架了

00:59.360 --> 01:01.360
我简单的聊一聊这个危前端

01:01.360 --> 01:04.080
为什么会有危前端这个东西呢

01:04.080 --> 01:07.920
是因为我们现在前端的项目越来越复杂了

01:07.920 --> 01:09.200
我们的页面也好

01:09.200 --> 01:10.960
我们的APP也好

01:10.960 --> 01:12.640
东西越来越多

01:12.640 --> 01:14.640
交互越来越复杂

01:14.640 --> 01:17.760
这就导致了我们工程的规模越来越大

01:17.760 --> 01:20.160
那么规模越大了之后我们就可以

01:20.160 --> 01:23.280
其实我们之前的学习应该能够体会到

01:23.840 --> 01:26.560
当一个项目变得复杂变得大了之后

01:26.560 --> 01:29.200
它就会产生很多很多的问题

01:29.200 --> 01:30.720
最大的问题呢就是

01:30.720 --> 01:33.040
我们的代码容易变成

01:33.040 --> 01:34.720
叫做Shit

01:36.720 --> 01:40.480
用比较文雅的词来说的话就是死山

01:41.760 --> 01:43.680
代码变得非常混乱

01:43.680 --> 01:46.000
不可就很难维护

01:46.000 --> 01:48.640
那么这件事怎么来解决呢

01:48.640 --> 01:51.680
说实话如果说保持项目这么复杂

01:51.680 --> 01:53.040
很难解决

01:53.120 --> 01:55.040
包括像你看一些大公司

01:55.040 --> 01:56.480
像微软啊

01:56.480 --> 01:58.480
像那个Facebook啊

01:58.480 --> 01:59.680
像什么推特啊

01:59.680 --> 02:00.720
这些大公司

02:00.720 --> 02:03.440
当他们的项目变得大了变得复杂了之后

02:03.440 --> 02:05.040
他们连他们这些

02:05.040 --> 02:07.920
顶级的程序员都很难维护项目

02:07.920 --> 02:09.200
所以说怎么办呢

02:09.200 --> 02:11.840
一个比较直观的比较简单的方式

02:11.840 --> 02:13.520
就是我把项目分享

02:13.520 --> 02:15.520
虽然整个项目很大

02:15.520 --> 02:17.440
但是呢我按页面划分

02:17.440 --> 02:18.880
按组建划分

02:18.880 --> 02:21.760
我把项目分成一个一个独立的小项目

02:21.840 --> 02:23.840
什么叫独立的小项目

02:23.840 --> 02:25.840
是真正的独立

02:25.840 --> 02:27.840
它有独立的团队

02:27.840 --> 02:30.640
有独立的那个测试

02:30.640 --> 02:32.640
有独立的开发

02:32.640 --> 02:35.840
有独立的那个运营

02:35.840 --> 02:37.840
有独立的部署

02:37.840 --> 02:39.440
甚至连服务器

02:39.440 --> 02:40.960
它都是不独立的

02:40.960 --> 02:44.080
项目与项目之间相互不影响

02:44.080 --> 02:45.680
然后通过一个框架

02:45.680 --> 02:46.800
通过一套架构

02:46.800 --> 02:48.800
把这些项目的整合在一起

02:49.280 --> 02:50.800
那么这就是一个危险

02:50.800 --> 02:52.800
危险端的一个简单架构

02:52.800 --> 02:54.800
就是我们有一个很复杂的应用

02:54.800 --> 02:56.800
但是呢我把这个应用里边

02:56.800 --> 02:58.800
甚至呢我可以把每一个页面

02:58.800 --> 03:00.800
做成一个单独的项目

03:00.800 --> 03:02.800
比方说我们把页面

03:02.800 --> 03:04.800
把整个项目分成A

03:04.800 --> 03:06.800
B

03:06.800 --> 03:08.800
C

03:08.800 --> 03:10.800
D

03:10.800 --> 03:12.800
把整个项目分成四个项目

03:12.800 --> 03:14.800
每个项目有独立的团队

03:14.800 --> 03:16.800
甚至呢有独立的技术

03:16.800 --> 03:18.800
B项目的我用VU开发

03:18.800 --> 03:20.800
B项目的我用Rx开发

03:20.800 --> 03:22.800
然后通过一套机制

03:22.800 --> 03:24.800
把它们整合在一起

03:24.800 --> 03:26.800
这就是危险端

03:26.800 --> 03:28.800
当然这个危险端这样做了之后

03:28.800 --> 03:30.800
会产生很多很多新的问题

03:30.800 --> 03:32.800
虽然说我们

03:32.800 --> 03:34.800
解决了可维护性的问题

03:34.800 --> 03:36.800
但是呢一些新的问题又产生了

03:36.800 --> 03:38.800
那么这些新的问题当中

03:38.800 --> 03:40.800
其中有一个非常头疼的问题

03:40.800 --> 03:42.800
就是如何共享代码

03:42.800 --> 03:44.800
这里面肯定会产生一些共享代码

03:44.800 --> 03:46.800
比如说这个项目组里边

03:46.800 --> 03:48.800
它做了一些组件

03:48.800 --> 03:50.800
或者是写了一些介石模块

03:50.800 --> 03:52.800
那么B项目可能要用到

03:52.800 --> 03:54.800
那么如果说我们不

03:54.800 --> 03:56.800
不处理的话

03:56.800 --> 03:58.800
那么B项目里边是不是得重新写一遍

03:58.800 --> 04:00.800
增加了开发的难度

04:00.800 --> 04:02.800
也增加了代码量

04:02.800 --> 04:04.800
也增加了维护的难度

04:04.800 --> 04:06.800
所以我们要提取一些公共代码

04:06.800 --> 04:08.800
那么如何来提取

04:08.800 --> 04:10.800
如何来相互协助

04:10.800 --> 04:12.800
这是一个非常头疼的问题

04:12.800 --> 04:14.800
有很多的解决办法

04:14.800 --> 04:16.800
现在卫派个五出来之后

04:16.800 --> 04:18.800
它提供了一种办法

04:18.800 --> 04:20.800
这种办法至少到目前为止

04:20.800 --> 04:22.800
是一种非常吸引

04:22.800 --> 04:24.800
也非常

04:24.800 --> 04:26.800
不错的办法

04:26.800 --> 04:28.800
我不能说它完美

04:28.800 --> 04:30.800
但是至少相对于目前的那些办法来说

04:30.800 --> 04:32.800
是一个不错的办法

04:32.800 --> 04:34.800
不错的选择

04:34.800 --> 04:36.800
但是这个玩意儿要真正的

04:36.800 --> 04:38.800
应用到项目的时间里边去

04:38.800 --> 04:40.800
可能还需要一段时间

04:40.800 --> 04:42.800
就是我们这几刻要聊的模块联邦

04:42.800 --> 04:44.800
它要解决什么问题

04:44.800 --> 04:46.800
解决在危前端当中

04:46.800 --> 04:48.800
不同的项目如何来

04:48.800 --> 04:50.800
共享代码的问题

04:50.800 --> 04:52.800
好,我们先把这个问题说清楚

04:52.800 --> 04:54.800
它到底是在干什么用的

04:54.800 --> 04:56.800
那么这里有一张图

04:56.800 --> 04:58.800
你们可以看一看

04:58.800 --> 05:00.800
比方说

05:00.800 --> 05:02.800
一个简单的例子

05:02.800 --> 05:04.800
我们的项目里面分成三个独立的项目

05:04.800 --> 05:06.800
他们有独立的团队

05:06.800 --> 05:08.800
有独立的服务器

05:08.800 --> 05:10.800
有独立的开发

05:10.800 --> 05:12.800
比方说一个活动页面

05:12.800 --> 05:14.800
首页以及新闻页

05:14.800 --> 05:16.800
三个独立的项目

05:16.800 --> 05:18.800
但是这里面就会产生一些

05:18.800 --> 05:20.800
公共的模块

05:20.800 --> 05:22.800
比方说活动页面里边

05:22.800 --> 05:24.800
它写了一个模块

05:24.800 --> 05:26.800
叫做活动分享

05:26.800 --> 05:28.800
活动的分享模块

05:28.800 --> 05:30.800
这个模块突然有一天

05:30.800 --> 05:32.800
开发首页的项目组

05:32.800 --> 05:34.800
它也需要去做

05:34.800 --> 05:36.800
它也需要实现一个一模一样的功能

05:36.800 --> 05:38.800
它直接从活动页面

05:38.800 --> 05:40.800
就这个项目里面

05:40.800 --> 05:42.800
把它引入进来就可以了

05:42.800 --> 05:44.800
或者换句话说

05:44.800 --> 05:46.800
项目2里面

05:46.800 --> 05:48.800
它也有一个模块

05:48.800 --> 05:50.800
叫做

05:50.800 --> 05:52.800
比方说吧

05:52.800 --> 05:54.800
首页里面有个时间模块

05:54.800 --> 05:56.800
它也是用来分享的

05:56.800 --> 05:58.800
我这里的分享模块

05:58.800 --> 06:00.800
刚才说的有误

06:00.800 --> 06:02.800
分享模块指的是把这个模块分享出去

06:02.800 --> 06:04.800
它可以是任何功能的模块

06:04.800 --> 06:06.800
它有一些模块可以给别人使用

06:06.800 --> 06:08.800
比方说项目1

06:08.800 --> 06:10.800
它就引入了这个模块

06:10.800 --> 06:12.800
项目3就会引入这个模块

06:12.800 --> 06:14.800
就这么一个意思

06:14.800 --> 06:16.800
当然这个项目里边

06:16.800 --> 06:18.800
还有一些自己独有的模块

06:18.800 --> 06:20.800
独有的模块他们自己才能用的

06:20.800 --> 06:22.800
不用分享的

06:22.800 --> 06:24.800
还有一种情况就是

06:24.800 --> 06:26.800
这些项目里边用到了一些

06:26.800 --> 06:28.800
共同的公共模块

06:28.800 --> 06:30.800
比如说5U

06:30.800 --> 06:32.800
比如说

06:32.800 --> 06:34.800
5U

06:34.800 --> 06:36.800
5U

06:36.800 --> 06:38.800
5U

06:38.800 --> 06:40.800
5U

06:40.800 --> 06:42.800
5U

06:42.800 --> 06:44.800
5U

06:44.800 --> 06:46.800
5U

06:46.800 --> 06:48.800
5U

06:48.800 --> 06:50.800
5U

06:50.800 --> 06:52.800
5U

06:52.800 --> 06:54.800
5U

06:54.800 --> 06:56.800
5U

06:56.800 --> 06:58.800
5U

06:58.800 --> 07:00.800
5U

07:00.800 --> 07:02.800
实际上是有很多很多的州组成的

07:02.800 --> 07:04.800
那么每一个州

07:04.800 --> 07:06.800
他们是相对独立的

07:06.800 --> 07:08.800
每个州甚至有自己的法律

07:08.800 --> 07:10.800
它这些法律只在这个州有效

07:10.800 --> 07:12.800
到另一个州可能就失效了

07:12.800 --> 07:14.800
懂了意思吧

07:14.800 --> 07:16.800
它是一种比较松散的结构

07:16.800 --> 07:18.800
每一个州它有自己的一套机制

07:18.800 --> 07:20.800
但是他们又联合起来的

07:20.800 --> 07:22.800
就形成了一颗联邦

07:22.800 --> 07:24.800
那么这个联邦呢

07:24.800 --> 07:26.800
他们可以实现一些资源的共享

07:26.800 --> 07:28.800
这就是模块联邦

07:28.800 --> 07:30.800
它的大体思路

07:30.800 --> 07:32.800
那么我来用一个例子

07:32.800 --> 07:34.800
一边写代码

07:34.800 --> 07:36.800
一边开发来通过举例子呢

07:36.800 --> 07:38.800
让大家多多少少了解一下模块联邦

07:38.800 --> 07:40.800
这里边的

07:40.800 --> 07:42.800
问题很复杂

07:42.800 --> 07:44.800
东西也很多

07:44.800 --> 07:46.800
但是我们不用了解得那么的深

07:46.800 --> 07:48.800
因为我刚才说了

07:48.800 --> 07:50.800
这个玩意儿跟你们没有直接的关系

07:50.800 --> 07:52.800
了解一些对你面试

07:52.800 --> 07:54.800
肯定是有一些好处的

07:54.800 --> 07:56.800
好,我们来看一个例子

07:56.800 --> 07:58.800
比方说我有一个

07:58.800 --> 08:00.800
这个产品呢

08:00.800 --> 08:02.800
我把它分为了两个项目组

08:02.800 --> 08:04.800
这个产品就两个页面

08:04.800 --> 08:06.800
如果说真的只有两个页面的话

08:06.800 --> 08:08.800
其实也不需要做微前端了

08:08.800 --> 08:10.800
我们就举个例子

08:10.800 --> 08:12.800
假设这个项目有两个页面

08:12.800 --> 08:14.800
我想用微前端

08:14.800 --> 08:16.800
来解决

08:16.800 --> 08:18.800
这个事儿

08:18.800 --> 08:20.800
我这里没有去用什么微前端的框架

08:20.800 --> 08:22.800
我就用微派个5来简单处理一下

08:22.800 --> 08:24.800
说清楚这个模块联邦

08:24.800 --> 08:26.800
它是怎么来处理的就可以了

08:26.800 --> 08:28.800
那有两个页面

08:28.800 --> 08:30.800
这里就会有两个项目组

08:30.800 --> 08:32.800
它们分开搭建项目

08:32.800 --> 08:34.800
各自用各自的技术站

08:34.800 --> 08:36.800
各自部署

08:36.800 --> 08:38.800
各自测试

08:38.800 --> 08:40.800
我们就来看一下在这种场景下

08:40.800 --> 08:42.800
我如何来实现模块共享

08:42.800 --> 08:44.800
我们先看一下我们的需求

08:44.800 --> 08:46.800
我们有一个首页

08:46.800 --> 08:48.800
这个首页呢,它有一个自己独有的

08:48.800 --> 08:50.800
一些介石,比方说像这个Index介石

08:50.800 --> 08:52.800
然后呢

08:52.800 --> 08:54.800
它也有些需要

08:54.800 --> 08:56.800
共享出去的介石

08:56.800 --> 08:58.800
比方说这个Node介石

08:58.800 --> 09:00.800
以后我们会自己写

09:00.800 --> 09:02.800
然后呢,它也会需要

09:02.800 --> 09:04.800
从别的项目里面

09:04.800 --> 09:06.800
去引入一个介石

09:06.800 --> 09:08.800
然后呢,它会有一些

09:08.800 --> 09:10.800
公共的模块,比方说像

09:10.800 --> 09:12.800
Jquery啊,像Royalty啊

09:12.800 --> 09:14.800
像Axios啊,这些

09:14.800 --> 09:16.800
伍佑啊,这些公共的模块

09:16.800 --> 09:18.800
这就是一个项目的一个普遍的情况

09:18.800 --> 09:20.800
它有自己的,不需要共享的

09:20.800 --> 09:22.800
跟别人没关系的

09:22.800 --> 09:24.800
它有一些东西需要给别人使用的

09:24.800 --> 09:26.800
它有一些东西需要从别人那里

09:26.800 --> 09:28.800
去拿的

09:28.800 --> 09:30.800
它有一些东西跟别人用的一些

09:30.800 --> 09:32.800
公共底层库是一样的

09:32.800 --> 09:34.800
那么看活动页面,其实也差不多

09:34.800 --> 09:36.800
好,我们就来看一下

09:36.800 --> 09:38.800
通过这张图,我们不断的去实现

09:38.800 --> 09:40.800
这张图里面

09:40.800 --> 09:42.800
所画出来的这些东西

09:42.800 --> 09:44.800
看一下模块联邦是怎么做的

09:44.800 --> 09:46.800
好,一步一步来啊

09:46.800 --> 09:48.800
首先这里有两个项目

09:48.800 --> 09:50.800
一个文件夹

09:50.800 --> 09:52.800
举个例子

09:52.800 --> 09:54.800
然后这里有两个项目,我就分别去建

09:54.800 --> 09:56.800
两个文件夹

09:56.800 --> 09:58.800
当然在实际开发中呢

09:58.800 --> 10:00.800
这其实是分开交给不同的团队

10:00.800 --> 10:02.800
去完成的

10:02.800 --> 10:04.800
一个是活动,一个是首页

10:04.800 --> 10:06.800
好,我们一步一步来

10:06.800 --> 10:08.800
首先我们先把这个

10:08.800 --> 10:10.800
首页给它搭建出来

10:10.800 --> 10:12.800
首先我们通过NPM引力车

10:12.800 --> 10:14.800
Hungang Y来初始化一个项目

10:14.800 --> 10:19.140
好,运行

10:19.140 --> 10:21.140
现在处理的是首页

10:21.140 --> 10:23.140
生成了一个Pack点接生

10:23.140 --> 10:25.140
然后我们去安装一些依赖

10:25.140 --> 10:27.140
这些依赖我们先把负质一下

10:27.140 --> 10:30.580
这是开发依赖

10:30.580 --> 10:32.580
这个一带里面安装了什么呢

10:32.580 --> 10:34.580
安装了WePack

10:34.580 --> 10:36.580
这两个不用说了吧

10:36.580 --> 10:38.580
然后安装了一个WePack Dev Server

10:38.580 --> 10:40.580
这个是做一个开发服务器的

10:40.580 --> 10:42.580
然后呢

10:42.580 --> 10:44.580
为了处理CSS

10:44.580 --> 10:46.580
其实我们这里也没有什么CSS

10:46.580 --> 10:48.580
其实也没啥CSS,我们也不用CSS

10:48.580 --> 10:50.580
这两个不要了

10:52.580 --> 10:56.020
我们这里把CSS卸载掉

10:56.020 --> 10:58.020
Install

10:58.020 --> 11:02.020
然后是Styleloader

11:02.020 --> 11:04.020
CSSloader

11:04.020 --> 11:06.020
把这两个卸载掉

11:06.020 --> 11:08.020
好了,我们来看一下

11:08.020 --> 11:10.020
目前的安装就是这三个东西

11:10.020 --> 11:12.020
一个是生成页面的

11:12.020 --> 11:14.020
一个是三个WePack的核心库

11:14.020 --> 11:16.020
然后我们还需要安装一个接框类

11:16.020 --> 11:18.020
因为我们在开发的过程中

11:18.020 --> 11:20.020
会用到接框类

11:20.020 --> 11:22.020
那么这个东西就不是开发依赖了

11:22.020 --> 11:24.020
就普通依赖

11:24.020 --> 11:26.020
好,安装好了之后

11:26.020 --> 11:28.020
那么接下来,我们来写一个

11:28.020 --> 11:30.020
修盖一下,拍点节省

11:30.020 --> 11:32.020
里面两个命令

11:32.020 --> 11:34.020
好,我们来看一下

11:34.020 --> 11:36.020
这里我们修盖成两个命令

11:38.020 --> 11:40.020
一个是Build,是不是打包

11:40.020 --> 11:42.020
对吧,然后呢

11:42.020 --> 11:44.020
一个是Dev

11:44.020 --> 11:46.020
是运行开发服务器

11:46.020 --> 11:48.020
那么这里呢,我使用WePack Show

11:48.020 --> 11:50.020
这个命令呢,我们过去在WePack 4里边

11:50.020 --> 11:52.020
是不是可以使用的是

11:52.020 --> 11:54.020
WePack Dev Server来启动开发服务器的

11:54.020 --> 11:56.020
对吧,在WePack 5里边呢

11:56.020 --> 11:58.020
你可以直接使用WePack Show

11:58.020 --> 12:00.020
来启动开发服务器,效果是一样的

12:00.020 --> 12:02.020
好,两个命令写好了

12:02.020 --> 12:04.020
然后接着还要做什么呢

12:04.020 --> 12:06.020
我们还需要去建立一个WePack的配置文件

12:08.020 --> 12:10.020
目前,节制目前跟那个

12:10.020 --> 12:12.020
模块联邦没有任何关系

12:12.020 --> 12:14.020
我们先把一个初始的工作做好

12:14.020 --> 12:16.020
好,我们把这个地方粘过来

12:16.020 --> 12:18.020
好,看一下这个配置文件

12:18.020 --> 12:20.020
好像非常简单

12:20.020 --> 12:22.020
这个玩意儿不用说了吧,这是生成一天半页面的

12:22.020 --> 12:24.020
然后呢,告诉它的入口呢

12:24.020 --> 12:26.020
在SRC目录,index的GS

12:26.020 --> 12:28.020
在这儿

12:28.020 --> 12:30.020
然后呢,模式呢,是开发模式

12:30.020 --> 12:32.020
生成了SourceMap

12:32.020 --> 12:34.020
然后开发服务器的端口呢,是8080

12:34.020 --> 12:36.020
清除输出目录

12:36.020 --> 12:38.020
这里边配置了一个规则

12:38.020 --> 12:40.020
就是CSS规则

12:40.020 --> 12:42.020
其实我们这里边没有CSS

12:42.020 --> 12:44.020
可以不用,规则其实可以不用

12:46.020 --> 12:48.020
简约一点吧,尽量简单一点

12:48.020 --> 12:50.020
把这个

12:50.020 --> 12:52.020
这个去掉

12:52.020 --> 12:54.020
简单一点,好了,就完事了

12:54.020 --> 12:56.020
这就是WePack Config的GS

12:56.020 --> 12:58.020
配置文件,然后呢,我们在

12:58.020 --> 13:00.020
首页里边的去写些代码

13:00.020 --> 13:02.020
我们来看一下首页里边

13:02.020 --> 13:06.160
刚才一张图

13:06.160 --> 13:08.160
好,首页里边是不是有这么一些东西

13:08.160 --> 13:10.160
有自己独有的index的GS

13:10.160 --> 13:12.160
有什么NOW的GS

13:12.160 --> 13:14.160
这个玩意是从别人那里引入的

13:14.160 --> 13:16.160
所以我们在首页里边可以不用写

13:16.160 --> 13:18.160
然后呢,又用到了接query

13:18.160 --> 13:20.160
好,我们来看一下首页的代码

13:20.160 --> 13:22.160
代码里边呢,我们有三个文件

13:22.160 --> 13:24.160
一个是NOW.GS

13:24.160 --> 13:26.160
就这个文件

13:26.160 --> 13:28.160
就这个

13:28.160 --> 13:30.160
好,我们来写下一个NOW.GS

13:30.160 --> 13:32.160
首先我们在这里呢,新建一个文件夹

13:32.160 --> 13:34.160
SRC

13:34.160 --> 13:36.160
然后去新建一个文件,NOW.GS

13:36.160 --> 13:38.160
这个文件里边呢,把个代码写上

13:38.160 --> 13:40.160
我们来看一下这个代码

13:40.160 --> 13:42.160
这个代码写上也很简单

13:42.160 --> 13:44.160
做什么事情呢?

13:44.160 --> 13:46.160
导入接query,然后呢,提供一个方法

13:46.160 --> 13:48.160
导出一个方法,给我一个容器

13:48.160 --> 13:50.160
我要做什么呢?生成一个P元素

13:50.160 --> 13:52.160
然后把这个P元素夹到这个容器里边去

13:52.160 --> 13:54.160
给我一个容器

13:54.160 --> 13:56.160
我就把P元素夹到容器里边去

13:56.160 --> 13:58.160
然后呢,这个P元素的文本呢

13:58.160 --> 14:00.160
使用当前时间来作为P元素的文本

14:00.160 --> 14:02.160
就这么简单

14:02.160 --> 14:04.160
得到这么一个P元素

14:04.160 --> 14:06.160
然后呢,每隔一秒钟

14:06.160 --> 14:08.160
每隔一秒钟呢,然后我再重新

14:08.160 --> 14:10.160
设置这个P元素的文本

14:10.160 --> 14:12.160
就这里边一个P元素

14:12.160 --> 14:14.160
就是一个P元素里面显示一个当前时间

14:14.160 --> 14:16.160
每隔一秒钟刷新一下这个时间

14:16.160 --> 14:18.160
就完事了,把P元素夹到这个容器里边去

14:20.160 --> 14:22.160
接下来我们再写一个文件

14:22.160 --> 14:24.160
叫做bootstrap

14:24.160 --> 14:27.920
叫做启动

14:27.920 --> 14:29.920
我们再写一个bootstrap.GS

14:29.920 --> 14:31.920
到目前啊,还跟那个

14:31.920 --> 14:33.920
模块联邦没有任何关系

14:33.920 --> 14:35.920
好,来看一下

14:35.920 --> 14:37.920
导入接query,导入这个刚才写的模块NOW

14:37.920 --> 14:39.920
它不是提供了一个函数吗

14:39.920 --> 14:41.920
对吧,给过一个容器

14:41.920 --> 14:43.920
我就去加入一些,加入一个P元素

14:43.920 --> 14:45.920
好,这里怎么写的呢

14:45.920 --> 14:47.920
我生成一个H1元素,然后

14:47.920 --> 14:49.920
设置它的文本为首页

14:49.920 --> 14:51.920
把这个H1元素夹到那个包底里边去

14:51.920 --> 14:53.920
使用的是接query

14:53.920 --> 14:55.920
然后呢,我们这里不是一个函数嘛

14:55.920 --> 14:57.920
对吧,这个函数里边我传入的就是一个

14:57.920 --> 14:59.920
生成了一个DIV

14:59.920 --> 15:01.920
传入进去

15:01.920 --> 15:03.920
好,我生成一个DIV

15:03.920 --> 15:05.920
然后呢,把它夹到包底里边去

15:05.920 --> 15:07.920
P为参数

15:07.920 --> 15:09.920
传到这个NOW这个函数里边去

15:09.920 --> 15:11.920
那么

15:11.920 --> 15:13.920
这个函数就负责,生成P元素

15:13.920 --> 15:15.920
把P元素夹到这个DIV

15:15.920 --> 15:17.920
然后呢,每个一秒钟

15:17.920 --> 15:19.920
以后

15:19.920 --> 15:21.920
更新这个P元素里边的时间

15:21.920 --> 15:23.920
对吧,这是bootstrap

15:23.920 --> 15:25.920
然后我们的入口文件,In这个设置

15:25.920 --> 15:27.920
GS呢,很简单,就一句话

15:27.920 --> 15:32.130
使用一步导入的方式

15:32.130 --> 15:34.130
执行这个bootstrap

15:34.130 --> 15:36.130
一步导入

15:36.130 --> 15:38.130
bootstrap

15:38.130 --> 15:40.130
执行这个东西

15:40.130 --> 15:42.130
那么这里就设计到一个问题

15:42.130 --> 15:44.130
有可能很奇怪

15:44.130 --> 15:46.130
我们之前不就在index里面直接写

15:46.130 --> 15:48.130
就这个代码可以直接写到

15:48.130 --> 15:50.130
index里面的介绍里面

15:50.130 --> 15:52.130
对不对,为什么我还要去

15:52.130 --> 15:54.130
弄一个bootstrap呢

15:54.130 --> 15:56.130
是这样,当我们在

15:56.130 --> 15:58.130
危险的处理当中

15:58.130 --> 16:00.130
不同的项目之间要

16:00.130 --> 16:02.130
共享代码,不管你用什么样的形式

16:02.130 --> 16:04.130
一定是一步的

16:04.130 --> 16:06.130
为什么呢

16:06.130 --> 16:08.130
它不同的项目

16:08.130 --> 16:10.130
它是分开部署的

16:10.130 --> 16:12.130
在不同的服务器上

16:12.130 --> 16:14.130
所以说我们要用另外一个项目的

16:14.130 --> 16:16.130
GS,另外一个项目是不是

16:16.130 --> 16:18.130
要导进来,是不是这个GS

16:18.130 --> 16:20.130
要远程

16:20.130 --> 16:22.130
传输过来

16:22.130 --> 16:24.130
因此它是一个一步的

16:24.130 --> 16:26.130
所以说我用这种模式

16:26.130 --> 16:28.130
就可以很好处理这一点

16:28.130 --> 16:30.130
我在index里的GS里面

16:30.130 --> 16:32.130
我一步导入

16:32.130 --> 16:34.130
就要引用别的GS

16:34.130 --> 16:36.130
那么

16:36.130 --> 16:38.130
就已经是一步的了

16:38.130 --> 16:40.130
我要给它一个一步的环境

16:40.130 --> 16:42.130
把bootstrap的启动

16:42.130 --> 16:44.130
放到一个一步环境里面

16:44.130 --> 16:46.130
你们简单了解一下就可以了

16:46.130 --> 16:48.130
这就是为什么我要这里

16:48.130 --> 16:50.130
要用一步导入的方式

16:50.130 --> 16:52.130
其实这种方式也是避免

16:52.130 --> 16:54.130
在后续的开发中出现问题

16:54.130 --> 16:56.130
OK,我们这里

16:56.130 --> 16:58.130
简单的说到这

16:58.130 --> 17:00.130
这一块也不用去深究

17:00.130 --> 17:02.130
OK,那么后面这个块的

17:02.130 --> 17:04.130
就做完了,然后呢

17:04.130 --> 17:06.130
我们来运行一下

17:06.130 --> 17:09.950
NPM入了

17:09.950 --> 17:11.950
好,我们来看一下这个

17:11.950 --> 17:13.950
Lecohost

17:13.950 --> 17:15.950
你看,手页

17:15.950 --> 17:17.950
是不是这里一个不断挑动的时间

17:17.950 --> 17:19.950
目前有没有什么模块联邦

17:19.950 --> 17:21.950
没有,目前做的是什么呀

17:21.950 --> 17:23.950
手页里面有自己的

17:23.950 --> 17:25.950
独有的GS

17:25.950 --> 17:27.950
有

17:27.950 --> 17:29.950
有一个烙掉GS

17:29.950 --> 17:31.950
没有提供给出去,给别人使用

17:31.950 --> 17:33.950
然后呢,这个玩意还没有

17:33.950 --> 17:35.950
又会接Quarry

17:35.950 --> 17:37.950
对吧,所以手页里面搞定了

17:37.950 --> 17:39.950
好,手页搞定了之后呢,我们接下来搞定

17:39.950 --> 17:41.950
活动也免,其实道理是一样的

17:43.950 --> 17:45.950
然后到这一块

17:45.950 --> 17:47.950
同样的,这个CSS我就不要了

17:47.950 --> 17:49.950
好,我们到一个

17:49.950 --> 17:53.780
一个tip里面去

17:53.780 --> 17:55.780
一样的,NPMInit-y

17:55.780 --> 17:57.780
初始化一下项目

17:57.780 --> 17:59.780
然后使用这个安装意义

17:59.780 --> 18:03.660
由于有缓存

18:03.660 --> 18:05.660
这一块的安装应该就比较快

18:05.660 --> 18:09.230
它只是一个文件考卖而已

18:09.230 --> 18:11.230
我刚夸它,还真不能夸

18:11.230 --> 18:13.230
好了

18:13.230 --> 18:15.230
然后再安装这个接Quarry

18:15.230 --> 18:20.020
然后再修改一下

18:20.020 --> 18:22.020
配点节省,是一样的

18:22.020 --> 18:24.020
其实是一样的

18:24.020 --> 18:26.020
还有一个tip,配点节省

18:26.020 --> 18:30.030
那么这一块呢,我们把它修改一下

18:30.030 --> 18:32.030
好,再然后呢

18:32.030 --> 18:34.030
是配置

18:34.030 --> 18:36.030
未拍的Coffee的GS

18:37.030 --> 18:39.030
这里面我先建一个

18:39.030 --> 18:41.030
未拍Coffee的GS

18:41.030 --> 18:43.030
是一样的,其实是完全一样的

18:43.030 --> 18:44.030
那么这里也是一样

18:44.030 --> 18:46.030
不需要这个CSS

18:46.030 --> 18:48.030
我不处理CSS,简单一点

18:50.030 --> 18:52.030
之前还打算把央视做得好看一点

18:52.030 --> 18:54.030
其实无所谓

18:54.030 --> 18:56.030
那就没啥了

18:56.030 --> 18:58.030
然后呢,就是写代码了

18:58.030 --> 19:00.030
那么这里面呢,首先有一个lose的GS

19:00.030 --> 19:02.030
我们之前说过

19:02.030 --> 19:04.030
活动也免了,它有一个自己的GS

19:04.030 --> 19:06.030
lose的GS

19:06.030 --> 19:08.030
我们来看,设置一个lose的GS

19:08.030 --> 19:10.030
生成一个文件夹

19:10.030 --> 19:12.030
src,然后呢,加一个文件

19:12.030 --> 19:14.030
nose的GS

19:14.030 --> 19:16.030
好,这个GS里面呢,我们写上这段单了

19:16.030 --> 19:18.030
也很简单

19:18.030 --> 19:20.030
做什么事情呢

19:20.030 --> 19:22.030
就是导入接Quarry

19:22.030 --> 19:24.030
然后呢,一样导出一个方法

19:24.030 --> 19:26.030
这个函数呢,给我一个容器

19:26.030 --> 19:28.030
然后我生成一个EL

19:28.030 --> 19:30.030
把这个EL呢,加入到这个容器里边

19:30.030 --> 19:32.030
然后我

19:32.030 --> 19:34.030
一个制服串

19:34.030 --> 19:36.030
拼接li,我循环了

19:36.030 --> 19:38.030
20次

19:38.030 --> 19:40.030
然后呢,每循环一次拼接一个li

19:40.030 --> 19:42.030
新闻,第几个新闻

19:42.030 --> 19:44.030
加一个制服串里面去

19:44.030 --> 19:48.050
然后

19:48.050 --> 19:50.050
把这个

19:50.050 --> 19:52.050
制服串呢,就加到这个EL里面

19:52.050 --> 19:54.050
其实说白了,整个函数呢

19:54.050 --> 19:56.050
做的就一件事

19:56.050 --> 19:58.050
你给我一个容器,然后我给你一个新闻列表

19:58.050 --> 20:00.050
放到这个容器里面去

20:00.050 --> 20:02.050
就完事了

20:02.050 --> 20:04.050
然后下面呢,还是一样

20:04.050 --> 20:06.050
做法呢,就是生成一个

20:06.050 --> 20:08.050
boostrap.js

20:08.050 --> 20:10.050
然后就处理这件事

20:10.050 --> 20:12.050
好,我们去新建一个

20:12.050 --> 20:14.050
然后是boostrap.js

20:16.050 --> 20:18.050
好,这个js呢,也是一样

20:18.050 --> 20:20.050
导入接Quarry,导入个news

20:20.050 --> 20:22.050
生成一个E级标题

20:22.050 --> 20:24.050
生成一个内容

20:24.050 --> 20:26.050
活动页

20:26.050 --> 20:28.050
然后呢,把它加到包里面去

20:28.050 --> 20:30.050
新闻列表的话,也是

20:30.050 --> 20:32.050
生成一个DIV

20:32.050 --> 20:34.050
加到包里面的DIV

20:34.050 --> 20:36.050
然后给它传过去,就完事了

20:36.050 --> 20:38.050
这是active,然后我们运行

20:38.050 --> 20:42.320
当然还有一个index的解释

20:42.320 --> 20:44.320
也是一样,import

20:46.320 --> 20:49.820
导入这个boostrap

20:49.820 --> 20:53.580
好,我们运行一下

20:53.580 --> 20:55.580
端口是不一样的

20:55.580 --> 20:57.580
你看,我们的活动页的

20:57.580 --> 20:59.580
端口是3000

20:59.580 --> 21:01.580
然后我们刚才的是8080

21:01.580 --> 21:03.580
端口不一样

21:03.580 --> 21:05.580
开发模式,以后呢

21:05.580 --> 21:07.580
在真正部署到服务器的时候

21:07.580 --> 21:09.580
可能连预名都不一样

21:09.580 --> 21:11.580
好,运行

21:11.580 --> 21:13.580
对吧,就完事了,一个手页,一个活动页

21:13.580 --> 21:15.580
好,我们来回顾一下

21:15.580 --> 21:17.580
目前我们做了哪些事

21:17.580 --> 21:19.580
刚才也分个评得了

21:19.580 --> 21:21.580
这个到右边去

21:21.580 --> 21:23.580
这个左边

21:23.580 --> 21:25.580
左边手页,右边活动页

21:25.580 --> 21:27.580
目前我们做了什么事呢

21:27.580 --> 21:29.580
手页这一块,我们有一个自己的

21:29.580 --> 21:31.580
index的解释和boostrap的解释

21:31.580 --> 21:33.580
然后呢,自己有一个

21:33.580 --> 21:35.580
node的解释,生成时间的

21:35.580 --> 21:37.580
就在这,时间

21:37.580 --> 21:39.580
有一个接query

21:39.580 --> 21:41.580
是本地安装的

21:41.580 --> 21:43.580
活动页呢,我们有一个自己的index的解释

21:43.580 --> 21:45.580
以及boostrap的解释

21:45.580 --> 21:47.580
然后有一个news的解释

21:47.580 --> 21:49.580
然后有一个接query

21:49.580 --> 21:51.580
对吧,就完事了

21:51.580 --> 21:53.580
好,目前呢,还没有用到

21:53.580 --> 21:55.580
这个模块联邦

21:55.580 --> 21:57.580
好,接下来,我们来一个个处理

21:57.580 --> 22:01.540
现在呢,我们要处理

22:01.540 --> 22:03.540
一个暴露和引用模块

22:03.540 --> 22:05.540
那么这里的暴露和引用

22:05.540 --> 22:07.540
就有点类似于

22:07.540 --> 22:09.540
在一个项目里面的

22:09.540 --> 22:11.540
模块暴露和模块倒入

22:11.540 --> 22:13.540
差不多的意思

22:13.540 --> 22:15.540
只不过呢,这里

22:15.540 --> 22:17.540
我们是在不同的项目之间

22:17.540 --> 22:19.540
进行暴露和引用

22:19.540 --> 22:21.540
比方说,我们一个个来

22:21.540 --> 22:23.540
现在呢,我们

22:23.540 --> 22:25.540
希望home这个项目里边

22:25.540 --> 22:27.540
你不是有一个node的解释吗

22:27.540 --> 22:29.540
可能会觉得这个node的解释

22:29.540 --> 22:31.540
其他项目可能也会使用

22:31.540 --> 22:33.540
因此呢,home这个项目里边

22:33.540 --> 22:35.540
可能要暴露这个模块

22:35.540 --> 22:37.540
在实际的开发中呢

22:37.540 --> 22:39.540
可能不只暴露一个模块

22:39.540 --> 22:41.540
可能还要暴露多个模块

22:41.540 --> 22:43.540
那么配置的方式都是一样的

22:43.540 --> 22:45.540
所以说,这里我们首先要做第一件事

22:45.540 --> 22:47.540
就是如何在home这个项目里边

22:47.540 --> 22:49.540
暴露出

22:49.540 --> 22:51.540
自己的模块

22:51.540 --> 22:53.540
闹点解释

22:53.540 --> 22:55.540
那么具体的做法呢,其实就是配置

22:55.540 --> 22:57.540
home里边的

22:57.540 --> 22:59.540
就是

22:59.540 --> 23:01.540
vipack config

23:01.540 --> 23:03.540
好,怎么配置呢

23:03.540 --> 23:05.540
这里就要使用了模块联邦了

23:05.540 --> 23:07.540
模块联邦,当你安装

23:07.540 --> 23:09.540
那个vipack5的时候

23:09.540 --> 23:11.540
它自动安装了

23:11.540 --> 23:13.540
它的位置在这儿

23:13.540 --> 23:15.540
vipack模块下面有一个目录,叫neb

23:15.540 --> 23:17.540
neb能有一个字目录,叫container

23:17.540 --> 23:19.540
container里边一个字目录,叫Module

23:19.540 --> 23:21.540
Federation

23:21.540 --> 23:23.540
就是联邦的意思

23:23.540 --> 23:25.540
模块联邦

23:25.540 --> 23:27.540
实际上相当于是一个

23:27.540 --> 23:29.540
vipack的插件

23:29.540 --> 23:31.540
我们把这句话复制一下

23:31.540 --> 23:35.170
咱去找到home

23:35.170 --> 23:37.170
然后呢,在这里

23:37.170 --> 23:39.170
导入进来

23:39.170 --> 23:41.170
它就是一个vipack的插件

23:41.170 --> 23:43.170
那么插件的用法自然而难

23:43.170 --> 23:45.170
应该写到哪儿呢,就写到这儿

23:45.170 --> 23:47.170
对吧

23:47.170 --> 23:49.170
好,当这个勾到函数里边

23:49.170 --> 23:51.170
它实际上是有一个参数的

23:51.170 --> 23:53.170
这个参数是一个对象

23:53.170 --> 23:55.170
可以对这个模块联邦进行一下配置

23:55.170 --> 23:57.170
有哪些配置呢

23:57.170 --> 23:59.170
如何来暴露一个模块呢

23:59.170 --> 24:01.170
主要的配置就这么一些

24:01.170 --> 24:03.170
我们把复制一下

24:03.170 --> 24:05.170
来看一下

24:05.170 --> 24:07.170
到底是啥意思

24:07.170 --> 24:09.170
稍微说小一点

24:09.170 --> 24:12.930
好,在这儿

24:12.930 --> 24:14.930
它这里有三个配置像

24:14.930 --> 24:16.930
需要你填写

24:16.930 --> 24:18.930
第一个是name

24:18.930 --> 24:20.930
这个玩意是为这个模块联邦

24:20.930 --> 24:22.930
取一个名字

24:22.930 --> 24:24.930
就是你不是要暴露吗

24:24.930 --> 24:26.930
以Home这个项目要暴露

24:26.930 --> 24:28.930
可能会暴露一个介石

24:28.930 --> 24:30.930
可能会暴露多个介石

24:30.930 --> 24:32.930
那都无所谓,可能暴露一个模块

24:32.930 --> 24:34.930
可能多个模块都无所谓

24:34.930 --> 24:36.930
那么不管你暴露多少个模块

24:36.930 --> 24:38.930
你暴露出来的东西

24:38.930 --> 24:40.930
你给它取一个名字

24:40.930 --> 24:42.930
这个名字你要注意

24:42.930 --> 24:44.930
是全局唯一

24:44.930 --> 24:46.930
比方说你现在做微前端

24:46.930 --> 24:48.930
微前端有十个项目

24:48.930 --> 24:50.930
十个项目里都要保持这个名字

24:50.930 --> 24:52.930
是唯一的

24:52.930 --> 24:54.930
给它取个名字

24:54.930 --> 24:56.930
我们一般来说

24:56.930 --> 24:58.930
跟那个项目的名字一样

24:58.930 --> 25:00.930
然后呢是

25:00.930 --> 25:02.930
你暴露出去用什么方式暴露

25:02.930 --> 25:04.930
懂得一个东西暴露出去吧

25:04.930 --> 25:06.930
暴露出去的文件

25:06.930 --> 25:08.930
名是什么

25:08.930 --> 25:10.930
其实暴露的本质

25:10.930 --> 25:12.930
就是提供了一个介石

25:12.930 --> 25:14.930
比方说这里暴露

25:14.930 --> 25:16.930
整个项目要暴露一些东西

25:16.930 --> 25:18.930
那么生成的出来的就是一个介石

25:18.930 --> 25:20.930
那么这个项目里面要使用

25:20.930 --> 25:22.930
暴露出来的东西要去使用它

25:22.930 --> 25:24.930
那么其实就是引用

25:24.930 --> 25:26.930
就是远程加载

25:26.930 --> 25:28.930
加载它的介石

25:28.930 --> 25:30.930
就完事了

25:30.930 --> 25:32.930
那么这里呢其实有点相当于什么

25:32.930 --> 25:34.930
有点相当于是介审P

25:34.930 --> 25:36.930
非常类似于介审P

25:36.930 --> 25:38.930
就是远程加载这个介石

25:38.930 --> 25:40.930
那么这是介石给它取个名字

25:40.930 --> 25:42.930
然后接下来是具体配置

25:42.930 --> 25:44.930
Exposes

25:44.930 --> 25:46.930
那么这是一个复述的单词

25:46.930 --> 25:48.930
它表示暴露的到底是哪一些模块

25:48.930 --> 25:50.930
具体是哪一些模块暴露出去

25:50.930 --> 25:52.930
那么这里呢

25:52.930 --> 25:54.930
如果说有多个模块你就接着写

25:54.930 --> 25:56.930
一个属性就是一个模块

25:56.930 --> 25:58.930
那么属性的键

25:58.930 --> 26:00.930
就是属性的名字

26:00.930 --> 26:02.930
表示模块的访问路径

26:02.930 --> 26:04.930
属性的纸呢

26:04.930 --> 26:06.930
是模块的

26:06.930 --> 26:08.930
内部的路径

26:08.930 --> 26:10.930
这里有点绕

26:10.930 --> 26:12.930
那么具体是啥意思呢

26:12.930 --> 26:14.930
访问路径的底耳斜杠闹

26:14.930 --> 26:16.930
表示什么意思啊

26:16.930 --> 26:19.930
当然要导入Home里面的模块的时候

26:19.930 --> 26:21.930
你要用这种方式导入

26:21.930 --> 26:22.930
它的名字

26:22.930 --> 26:23.930
写杠

26:23.930 --> 26:24.930
然后呢

26:24.930 --> 26:26.930
这里的Null

26:26.930 --> 26:28.930
到时候你要导入你就用这种方式导入

26:28.930 --> 26:29.930
比方说啊

26:29.930 --> 26:30.930
这个例子

26:30.930 --> 26:33.930
这个模块暴露出去过后

26:33.930 --> 26:35.930
那么别的项目里面要用这个模块

26:35.930 --> 26:36.930
那么怎么写呢

26:36.930 --> 26:38.930
就应该是Import

26:38.930 --> 26:39.930
HomeNull

26:39.930 --> 26:40.930
这样子写

26:40.930 --> 26:42.930
那如果说你这里配置的是ABC

26:42.930 --> 26:44.930
那就是HomeABC

26:44.930 --> 26:45.930
懂这个意思吗

26:45.930 --> 26:46.930
这就是

26:46.930 --> 26:47.930
到时候呢

26:47.930 --> 26:48.930
导入的时候

26:48.930 --> 26:50.930
应该用什么样的路径来导入

26:50.930 --> 26:51.930
那么如果说你用这样的路径

26:51.930 --> 26:54.930
它对应到我这个项目里面

26:54.930 --> 26:55.930
哪个路径呢

26:55.930 --> 26:56.930
对应到我这个项目里面的是

26:56.930 --> 26:59.930
SRC下边的Null解释

26:59.930 --> 27:00.930
懂这个意思吗

27:00.930 --> 27:01.930
这就是一个模块暴露出去的

27:01.930 --> 27:03.930
如说要暴露多个模块

27:03.930 --> 27:05.930
一次写就完事了

27:05.930 --> 27:09.930
这就是如何来暴露一个模块

27:09.930 --> 27:10.930
好

27:10.930 --> 27:11.930
说清楚了

27:11.930 --> 27:12.930
HomeNull一下

27:12.930 --> 27:13.930
这一块有点绕

27:13.930 --> 27:14.930
有点复杂

27:14.930 --> 27:15.930
好

27:15.930 --> 27:16.930
暴露出去过后

27:16.930 --> 27:19.930
其实我们来看一下它的打包结果

27:19.930 --> 27:21.930
你会发现有一些不一样的

27:21.930 --> 27:23.930
我们把HomeNull停止

27:23.930 --> 27:27.930
然后运行NPM的Rumble打包

27:27.930 --> 27:28.930
好

27:28.930 --> 27:29.930
打包结果里面

27:29.930 --> 27:30.930
你会发现多了很多文件

27:30.930 --> 27:31.930
对不对

27:31.930 --> 27:33.930
那么其中有一个文件叫HomeNull

27:33.930 --> 27:35.930
那么这个文件

27:35.930 --> 27:36.930
其实就是这个文件

27:36.930 --> 27:37.930
这里规定的

27:37.930 --> 27:39.930
我要暴露出去的文件名

27:39.930 --> 27:42.930
然后还有一个就是具体的模块文件

27:42.930 --> 27:44.930
比方说Null解释

27:44.930 --> 27:45.930
它暴露出去了

27:45.930 --> 27:46.930
那么应该在这

27:46.930 --> 27:49.930
SRC下边的Null解释

27:49.930 --> 27:50.930
看到没

27:50.930 --> 27:52.930
就这么个意思

27:52.930 --> 27:53.930
好了

27:53.930 --> 27:56.930
这是它的暴露出去的东西

27:56.930 --> 27:57.930
暴露就完成了

27:57.930 --> 27:59.930
那么接下来暴露完成了之后

27:59.930 --> 28:00.930
你那边要用

28:00.930 --> 28:01.930
怎么用

28:01.930 --> 28:05.300
接下来第二步

28:05.300 --> 28:06.300
现在我们在完成啥

28:06.300 --> 28:07.300
要搞清楚

28:07.300 --> 28:08.300
现在在完成这个东西

28:08.300 --> 28:10.300
现在已经暴露出去了

28:10.300 --> 28:12.300
然后这边如何来引用

28:12.300 --> 28:14.300
你如何引用的也是一样

28:14.300 --> 28:16.300
还是要配置WAP

28:18.300 --> 28:21.300
首先在这边也要引用

28:21.300 --> 28:23.300
引入这个磨块联邦

28:25.300 --> 28:26.300
好

28:26.300 --> 28:27.300
同样的道理

28:27.300 --> 28:29.300
这边也要使用这个插件

28:29.300 --> 28:32.620
同样要写的配置

28:32.620 --> 28:33.620
那么这个配置

28:33.620 --> 28:35.620
跟另一边写的就不太一样了

28:35.620 --> 28:37.620
这边写的是Remote

28:37.620 --> 28:38.620
把它复制一下

28:38.620 --> 28:42.180
写的是这个东西

28:42.180 --> 28:43.180
表示什么意思呢

28:43.180 --> 28:44.180
表示我这个项目

28:44.180 --> 28:46.180
我不要暴露磨块

28:46.180 --> 28:47.180
我现在要说什么

28:47.180 --> 28:50.180
要引入别的项目的磨块

28:50.180 --> 28:52.180
那有可能要引入多个别的项目

28:52.180 --> 28:53.180
这里只有两个项目

28:53.180 --> 28:54.180
对吧

28:54.180 --> 28:55.180
那有可能将来有可能要引入

28:55.180 --> 28:56.180
还有一个项目C

28:56.180 --> 28:57.180
还有一个项目D

28:57.180 --> 28:58.180
那么就一次写

28:58.180 --> 29:01.180
一个属性表示引入一个项目

29:01.180 --> 29:02.180
那么这个属性咋写呢

29:02.180 --> 29:04.180
属性的名字

29:04.180 --> 29:06.180
表示的是

29:06.180 --> 29:07.180
我要给那边

29:07.180 --> 29:10.180
那边那个磨块的取一个别名

29:10.180 --> 29:11.180
啥意思

29:11.180 --> 29:13.180
这边那个磨块

29:13.180 --> 29:15.180
你不是取了个名字Home

29:15.180 --> 29:16.180
对吧

29:16.180 --> 29:18.180
我这边可以把这个名字给你改一下

29:18.180 --> 29:19.180
改成一个别

29:19.180 --> 29:20.180
其他的名字

29:20.180 --> 29:21.180
多的意思吧

29:21.180 --> 29:22.180
就这么个意思

29:22.180 --> 29:24.180
一般情况下

29:24.180 --> 29:25.180
我们都不需要去改它

29:25.180 --> 29:27.180
所以我们这边也用Home

29:27.180 --> 29:29.180
那么这边又咋写呢

29:29.180 --> 29:31.180
这边是一个固定的格式

29:31.180 --> 29:32.180
首先

29:32.180 --> 29:34.180
第一个单词表示的是

29:34.180 --> 29:36.180
你要引入哪一个

29:36.180 --> 29:38.180
磨块联邦的名字

29:38.180 --> 29:39.180
那么这个名字

29:39.180 --> 29:41.180
就必须要对应到这

29:41.180 --> 29:43.180
必须要对应到这人类

29:43.180 --> 29:44.180
懂了意思吧

29:44.180 --> 29:45.180
好

29:45.180 --> 29:47.180
然后后边一个Aeta固定的

29:47.180 --> 29:49.180
然后后边是一个访问路径

29:49.180 --> 29:50.180
这个访问路径呢

29:50.180 --> 29:52.180
就是你要访问到那个JS

29:52.180 --> 29:53.180
那个

29:53.180 --> 29:55.180
你要访问到如何来访问到这个JS

29:55.180 --> 29:57.180
文件名已经知道了

29:57.180 --> 29:59.180
就是Home n确的JS

29:59.180 --> 30:01.180
那么如何来访问呢

30:01.180 --> 30:03.180
那你就要写访问链接了

30:03.180 --> 30:04.180
这个链接呢

30:04.180 --> 30:05.180
因为它这边打包出来

30:05.180 --> 30:06.180
不就是一个这个东西吗

30:06.180 --> 30:07.180
对吧

30:07.180 --> 30:09.180
你如何来访问它呢

30:09.180 --> 30:11.180
目前是开发阶段

30:11.180 --> 30:12.180
那么我们是用开发服务器

30:12.180 --> 30:13.180
8080端口

30:13.180 --> 30:15.180
不就是Home这个项目的端口号

30:15.180 --> 30:16.180
对吧

30:16.180 --> 30:17.180
通过这个端口号

30:17.180 --> 30:18.180
去访问这个JS

30:18.180 --> 30:20.180
就可以访问到了

30:20.180 --> 30:22.180
我们再来启动一下Home

30:22.180 --> 30:23.180
你就明白了

30:23.180 --> 30:24.180
npm装

30:24.180 --> 30:27.840
对

30:27.840 --> 30:28.840
好

30:28.840 --> 30:29.840
Home启动起来了

30:29.840 --> 30:30.840
然后呢

30:30.840 --> 30:31.840
打开

30:31.840 --> 30:32.840
Home

30:32.840 --> 30:34.840
我们试着访问一下

30:34.840 --> 30:37.840
就是那个Home n确的JS

30:37.840 --> 30:39.840
你看这个JS不就访问到了吗

30:39.840 --> 30:40.840
对不对

30:40.840 --> 30:42.840
以前我就是要配置这一块

30:42.840 --> 30:44.840
这一块配置的就是那个JS

30:44.840 --> 30:45.840
如何访问

30:45.840 --> 30:46.840
通过哪个地址访问

30:46.840 --> 30:47.840
好

30:47.840 --> 30:48.840
这就是配置完了

30:48.840 --> 30:49.840
好

30:49.840 --> 30:50.840
配置完了过后

30:50.840 --> 30:53.840
我如何在单码里面去使用它呢

30:53.840 --> 30:55.840
如何在单码里面去使用它呢

30:55.840 --> 30:56.840
很简单

30:56.840 --> 30:57.840
在这里边

30:57.840 --> 31:03.160
比方说我们这里

31:04.160 --> 31:06.160
你直接导入就完事了

31:06.160 --> 31:08.160
虽然说我这个项目里面

31:08.160 --> 31:09.160
没有闹这个模块

31:09.160 --> 31:11.160
但是这个项目里面有

31:11.160 --> 31:13.160
那么首先它格式固定的

31:13.160 --> 31:14.160
前面那个单词呢

31:14.160 --> 31:16.160
表示的是

31:16.160 --> 31:17.160
对应到这儿

31:17.160 --> 31:19.160
对应到这个名字

31:19.160 --> 31:20.160
你是

31:20.160 --> 31:22.160
因为你只要对应到这个名字

31:22.160 --> 31:23.160
它就知道了

31:23.160 --> 31:25.160
你要从哪里去找到这个JS

31:25.160 --> 31:26.160
懂了意思吧

31:26.160 --> 31:28.160
然后后面这个路径呢

31:28.160 --> 31:29.160
要对应到这儿

31:29.160 --> 31:32.160
就这边暴露如何暴露的

31:32.160 --> 31:34.160
是用这种路径暴露的

31:34.160 --> 31:35.160
就之前说的

31:35.160 --> 31:36.160
好

31:36.160 --> 31:37.160
那就把个喊税导入进来

31:37.160 --> 31:39.160
当然它是一个远程家在

31:39.160 --> 31:40.160
远程家在这个JS

31:41.160 --> 31:43.160
然后导进来过就可以直接使用了

31:43.160 --> 31:44.160
直接使用这个喊数

31:44.160 --> 31:46.160
然后呢创建一个DIV

31:46.160 --> 31:48.160
把这个容器传进去

31:48.160 --> 31:50.160
那么它就可以显示时间模块了

31:50.160 --> 31:53.660
我可以把时间放这儿

31:53.660 --> 31:54.660
好保存

31:54.660 --> 31:55.660
我们来试一下

31:55.660 --> 31:56.660
看行不行啊

31:56.660 --> 31:58.660
NPM装带

31:58.660 --> 32:02.190
好

32:02.190 --> 32:05.570
进行

32:05.570 --> 32:07.570
刚才好像有一个

32:07.570 --> 32:10.070
好 刷新

32:10.070 --> 32:11.070
你看

32:11.070 --> 32:12.070
时间不就出来了吗

32:12.070 --> 32:13.070
然后我们来观察一下

32:13.070 --> 32:15.070
网络的传输

32:16.070 --> 32:18.070
找到网络

32:18.070 --> 32:19.070
我们看一下网络传输

32:19.070 --> 32:21.070
再来刷新一次

32:21.070 --> 32:23.070
你会发现在网络传输当中

32:23.070 --> 32:24.070
除了访问字

32:24.070 --> 32:26.070
它会访问到自己的JS

32:26.070 --> 32:27.070
这是3000端口的

32:27.070 --> 32:29.070
就是活动业的端口

32:29.070 --> 32:30.070
你看这里3000

32:30.070 --> 32:32.070
访问到自己的JS

32:32.070 --> 32:33.070
稍微把它说小一点

32:34.070 --> 32:36.070
也会访问到这个

32:36.070 --> 32:39.070
Home Entry的JS

32:39.070 --> 32:41.070
Home Entry是不是另外一个项目的

32:41.070 --> 32:43.070
你看访问到8080

32:43.070 --> 32:45.070
通过这个JS于运行

32:45.070 --> 32:46.070
运行的过程中

32:46.070 --> 32:47.070
它需要发现

32:47.070 --> 32:49.070
我还需要加载另外一个模块

32:49.070 --> 32:51.070
叫srcNodeJS

32:51.070 --> 32:53.070
这个玩意是不是也是另外一个项目的

32:53.070 --> 32:55.070
通过一个UIL地址

32:55.070 --> 32:57.070
就可以访问到另外一个项目的模块

32:57.070 --> 32:59.070
它不需要自己的模块

32:59.070 --> 33:00.070
这就实现了

33:00.070 --> 33:01.070
这一步是不是就实现了

33:01.070 --> 33:02.070
它提供了NodeJS

33:02.070 --> 33:03.070
它引入了NodeJS

33:03.070 --> 33:05.070
它不需要自己再重新写一遍

33:06.070 --> 33:08.070
而且这样的好处在于

33:08.070 --> 33:09.070
只要Home这个项目里边

33:09.070 --> 33:10.070
NodeJS更新了

33:10.070 --> 33:12.070
那么这边是不是动态更新的

33:12.070 --> 33:14.070
因为它是用通过UIL地址去访问的

33:14.070 --> 33:16.070
都要是动态更新的

33:16.070 --> 33:18.070
那么剩下的事情就很简单了

33:18.070 --> 33:20.070
那如果说我要这边去提供

33:20.070 --> 33:21.070
NodeJS的JS

33:21.070 --> 33:23.070
那么这边要去引入NodeJS的JS

33:23.070 --> 33:25.070
说到底是一样的

33:25.070 --> 33:27.070
那么我们就一次来做一下就完事了

33:27.070 --> 33:29.070
好 来做吧

33:29.070 --> 33:31.070
Home项目里边

33:31.070 --> 33:33.070
需要使用Activ项目里面的NodeJS模块

33:33.070 --> 33:35.070
那么这边首先要把它提供出来呗

33:35.070 --> 33:36.070
那提供出来的话

33:36.070 --> 33:38.070
它是一样的道理

33:38.070 --> 33:40.070
把这个单碗复制一下

33:40.070 --> 33:43.070
到Activ里面找到WePyConfig的JS

33:43.070 --> 33:45.070
那么这里有个模块联盟了

33:45.070 --> 33:47.070
对吧 我们继续去来接着配置

33:47.070 --> 33:49.070
它除了要远程使用

33:49.070 --> 33:51.070
Home里面的模块之外

33:51.070 --> 33:53.070
还要暴露一些模块给别人使用

33:53.070 --> 33:54.070
那么名字呢

33:54.070 --> 33:56.070
该取一个自己项目的名字

33:56.070 --> 33:57.070
Activ

33:57.070 --> 33:58.070
然后文件名的Activ

33:58.070 --> 33:59.070
N确的JS

33:59.070 --> 34:01.070
然后呢暴露的方式呢是

34:01.070 --> 34:03.070
相对路径是六四

34:03.070 --> 34:05.070
然后呢对应到自己的目录里面

34:05.070 --> 34:06.070
是六四的JS

34:06.070 --> 34:08.070
好 暴露完成

34:08.070 --> 34:10.070
然后呢那边Home里面如何来引入呢

34:10.070 --> 34:12.070
也是一样的啊

34:12.070 --> 34:14.070
Home里面需要使用Remote来引用

34:16.070 --> 34:18.070
好 再写到最后吧

34:19.070 --> 34:20.070
那么引用的是什么呢

34:20.070 --> 34:21.070
该取个别名

34:21.070 --> 34:22.070
别名的一般来说

34:22.070 --> 34:24.070
跟那个项目的名字是一样的

34:25.070 --> 34:26.070
不用解释了吧

34:26.070 --> 34:27.070
它访问的是什么

34:27.070 --> 34:29.070
3000端口 是不是这个项目的端口

34:29.070 --> 34:30.070
访问的文件呢

34:30.070 --> 34:32.070
是ActivN确的JS

34:33.070 --> 34:34.070
这就写完了

34:34.070 --> 34:35.070
一个暴露都一样

34:35.070 --> 34:36.070
也就是说一个项目里面

34:36.070 --> 34:37.070
可以同时暴露

34:37.070 --> 34:39.070
又可以同时从别人那里引用

34:40.070 --> 34:41.070
都可以的

34:41.070 --> 34:42.070
然后就是代码了

34:42.070 --> 34:44.070
代码的写法当然是完全一样的

34:44.070 --> 34:45.070
我都直接写了啊

34:46.070 --> 34:47.070
进步到什么

34:47.070 --> 34:48.070
News

34:48.070 --> 34:49.070
哪里呢

34:50.070 --> 34:51.070
Activ

34:51.070 --> 34:52.070
News

34:53.070 --> 34:54.070
好 这里边

34:57.070 --> 34:58.070
新闻列表

34:59.070 --> 35:00.070
News

35:00.070 --> 35:02.070
然后这里边写法一样

35:02.070 --> 35:03.070
生成一个DIV

35:03.070 --> 35:04.070
加到包里面去

35:04.070 --> 35:05.070
把这个DIV传进去

35:05.070 --> 35:07.070
你生成一个新闻列表

35:07.070 --> 35:08.070
加入到这个DIV

35:08.070 --> 35:09.070
就完事了

35:10.070 --> 35:11.070
好 我再重新启动一下

35:11.070 --> 35:12.070
因为我们改动了这个

35:12.070 --> 35:14.070
改动了这个WeiPad

35:16.380 --> 35:18.380
NPM装

35:18.380 --> 35:19.380
对

35:19.380 --> 35:20.380
后面启动起来

35:20.380 --> 35:21.380
然后呢

35:21.380 --> 35:23.380
这个再启动起来

35:24.380 --> 35:25.380
到扭蛋下面看一下

35:27.380 --> 35:28.380
刷新

35:28.380 --> 35:29.380
这边

35:30.380 --> 35:31.380
刷新

35:31.380 --> 35:33.380
你看 是不是两边

35:33.380 --> 35:34.380
都有这个时间

35:34.380 --> 35:36.380
也都有这个新闻列表了

35:36.380 --> 35:37.380
而且呢

35:37.380 --> 35:38.380
他们没有

35:38.380 --> 35:39.380
有些模块

35:39.380 --> 35:40.380
他们自己是缺失的

35:40.380 --> 35:42.380
他们通过网络传输

35:42.380 --> 35:44.380
通过网络传输的方式

35:44.380 --> 35:45.380
刷新一下

35:45.380 --> 35:46.380
你看 后面这边

35:46.380 --> 35:47.380
他请求的是什么

35:47.380 --> 35:48.380
Activ

35:48.380 --> 35:49.380
intv.js

35:49.380 --> 35:50.380
是不是请求到3000

35:50.380 --> 35:52.380
然后还请求到什么

35:52.380 --> 35:54.380
src6.js

35:54.380 --> 35:55.380
是不是也是3000

35:55.380 --> 35:56.380
那这边呢

35:56.380 --> 35:57.380
我们之前看过的

35:57.380 --> 35:58.380
他请求过来

35:58.380 --> 35:59.380
他请求过去

35:59.380 --> 36:00.380
是不是实现了这个模块联邦

36:00.380 --> 36:02.380
这就是他的方式

36:03.380 --> 36:04.380
好 这边有没有问题的

36:04.380 --> 36:05.380
当然现在有一个

36:05.380 --> 36:06.380
比较明显的问题就是

36:06.380 --> 36:07.380
他们

36:09.380 --> 36:10.380
Jquery

36:10.380 --> 36:11.380
引用了两次

36:11.380 --> 36:12.380
为什么呢

36:12.380 --> 36:14.380
因为这个首页项目里边

36:14.380 --> 36:16.380
他不是要使用Jquery吗

36:16.380 --> 36:17.380
所以说他生成的Jquery

36:17.380 --> 36:18.380
你看 请求了一次

36:18.380 --> 36:19.380
8080的Jquery

36:19.380 --> 36:20.380
请求了一次

36:20.380 --> 36:21.380
然后呢

36:21.380 --> 36:23.380
另外又请求了一次Jquery

36:23.380 --> 36:25.380
这是3000端口的Jquery

36:25.380 --> 36:26.380
为什么呢

36:26.380 --> 36:28.380
因为你要用到src6.js

36:28.380 --> 36:30.380
就用到src8.js

36:30.380 --> 36:32.380
而且是里边也依赖Jquery

36:32.380 --> 36:33.380
那么那个Jquery

36:33.380 --> 36:34.380
是这个项目的Jquery

36:34.380 --> 36:35.380
懂的意思吗

36:35.380 --> 36:36.380
你好好去理一下

36:36.380 --> 36:38.380
所以说Jquery

36:38.380 --> 36:40.380
Jquery会请求两次

36:40.380 --> 36:42.380
增加了不必要的开销

36:42.380 --> 36:43.380
那么这一块如何处理呢

36:43.380 --> 36:46.380
那么这就需要配置共享模块

36:46.380 --> 36:47.380
共享模块

36:47.380 --> 36:50.380
我们配置方式都一样

36:50.380 --> 36:51.380
就是配这个share

36:51.380 --> 36:52.380
我们把它复制一下

36:52.380 --> 36:55.380
两个项目都需要配置

36:55.380 --> 36:59.140
就在这里配置吧

36:59.140 --> 37:00.140
这个share的什么意思呢

37:00.140 --> 37:01.140
表示共享的

37:01.140 --> 37:02.140
那么告诉他

37:02.140 --> 37:04.140
Jquery这个模块共享的

37:04.140 --> 37:06.140
然后呢配置一个single tone

37:06.140 --> 37:08.140
表示全局唯一

37:08.140 --> 37:10.140
就整个所有的项目里边

37:10.140 --> 37:12.140
共享一个Jquery

37:12.140 --> 37:14.140
那么另一边也需要配置

37:14.140 --> 37:15.140
这边保存一下

37:15.140 --> 37:17.140
另一边也需要配置

37:18.140 --> 37:20.140
好 两个项目再重新启动一下

37:20.140 --> 37:28.510
好 现在我们来刷新

37:28.510 --> 37:29.510
这边刷新

37:29.510 --> 37:30.510
那么现在我们来看一下

37:30.510 --> 37:31.510
网络请求

37:31.510 --> 37:33.510
因为发现Jquery

37:33.510 --> 37:35.510
只请求了一次

37:35.510 --> 37:36.510
两边打开

37:36.510 --> 37:37.510
都打开

37:38.510 --> 37:40.510
来做刷新

37:40.510 --> 37:42.510
你看这边的Jquery

37:42.510 --> 37:43.510
只请求了一次

37:43.510 --> 37:44.510
请求的是谁呢

37:44.510 --> 37:45.510
8080的

37:45.510 --> 37:46.510
请求的是这边的

37:46.510 --> 37:48.510
然后这边的Jquery刷新

37:48.510 --> 37:49.510
他请求的是谁

37:49.510 --> 37:50.510
也是自己的

37:50.510 --> 37:51.510
对吧

37:51.510 --> 37:54.510
也就是他们Jquery也共享了

37:54.510 --> 37:57.510
就不会导致加载两次Jquery

37:57.510 --> 37:58.510
就没了

37:58.510 --> 38:00.510
这就是我们这一块

38:00.510 --> 38:02.510
模块联邦要讲的东西

38:02.510 --> 38:04.510
这是再重新一次

38:04.510 --> 38:06.510
这个玩意跟你们没有什么直接的关系

38:06.510 --> 38:09.510
当然你们了解一下更好

38:09.510 --> 38:11.510
然后这个玩意主要是出现在危险端

38:11.510 --> 38:14.510
而危险端主要是技术领导

38:14.510 --> 38:16.510
要考虑的事情

38:16.510 --> 38:17.510
其他的没了

38:17.510 --> 38:18.510
这就是模块联邦

