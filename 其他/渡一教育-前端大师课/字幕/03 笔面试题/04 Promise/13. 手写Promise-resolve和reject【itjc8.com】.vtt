WEBVTT

00:00.110 --> 00:04.110
好 这就可能咱们来实现Promise的两个静态方法

00:04.110 --> 00:08.110
一个叫做Result 一个叫做Reject

00:09.110 --> 00:11.110
为什么说静态方法呢?

00:11.110 --> 00:12.110
因为它不需要创建对象

00:12.110 --> 00:14.110
直接通过各个函数里面一个属性就可以

00:14.110 --> 00:17.110
一个成员就可以使用 叫静态方法

00:17.110 --> 00:19.110
比如说面试的时候 让你 面试级就这样描述了

00:19.110 --> 00:22.110
说你在实现一个Result方法

00:22.110 --> 00:24.110
那你这个代码怎么写 这样子

00:24.110 --> 00:27.110
PromiseResult等于一个函数 重新够复制

00:27.110 --> 00:29.110
这是Data

00:30.110 --> 00:32.110
然后让你实现一个Result这个设

00:32.110 --> 00:34.110
那一样的 这里是Result

00:35.110 --> 00:37.110
对吧 那就这样子写就完事了

00:37.110 --> 00:40.110
由于我们这里是接着我自己写的Promise

00:40.110 --> 00:41.110
继续编写

00:41.110 --> 00:43.110
所以说我这里要把这个换成什么

00:43.110 --> 00:45.110
换成MyPromise

00:45.110 --> 00:47.110
要把它换成MyPromise

00:47.110 --> 00:49.110
要换成这么一个录像

00:49.110 --> 00:50.110
换成这个东西

00:50.110 --> 00:51.110
懂了意思吗?

00:51.110 --> 00:55.110
当然呢 一个也完全可以使用Yes6的

00:55.110 --> 00:56.110
新语法

00:56.110 --> 00:57.110
就这种写法

00:57.110 --> 00:59.110
我完全可以把它变成这种写法

00:59.110 --> 01:02.680
StaticResult

01:02.680 --> 01:04.680
那么这种写法 跟下边这种写法

01:04.680 --> 01:06.680
效果是完全一样的

01:06.680 --> 01:08.680
有一点非常细微的差别

01:08.680 --> 01:10.680
但是我们认为它效果是完全一样的

01:10.680 --> 01:12.680
也这里写上了一个Static

01:12.680 --> 01:14.680
那么哪种写法好了 肯定是

01:14.680 --> 01:15.680
上边的这种写法好

01:15.680 --> 01:17.680
因为上边的那个写法

01:17.680 --> 01:18.680
是高聚合的

01:18.680 --> 01:20.680
它那个逻辑仍然是Promise

01:20.680 --> 01:21.680
里边的逻辑

01:21.680 --> 01:23.680
代码是扎堆的

01:23.680 --> 01:24.680
它没有把它分离

01:24.680 --> 01:26.680
所以说这个逻辑更加集中

01:26.680 --> 01:28.680
因此这种写法肯定更好一点

01:28.680 --> 01:30.680
但是效果都是一样的

01:30.680 --> 01:33.680
然而你们将来在诸面实体的时候

01:33.680 --> 01:34.680
由于你没有

01:34.680 --> 01:35.680
比方说它的面实体

01:35.680 --> 01:36.680
没有让你自己写一个Promise

01:36.680 --> 01:38.680
它就让你实现一个Result

01:38.680 --> 01:39.680
你不可能把自己的Promise

01:39.680 --> 01:41.680
重新到位实现一面

01:41.680 --> 01:42.680
太浪费时间了

01:42.680 --> 01:44.680
而且它给的时间肯定不够

01:44.680 --> 01:46.680
因为Result实现不了多少时间

01:46.680 --> 01:47.680
比方说就十分钟

01:47.680 --> 01:49.680
那你这个Promise肯定写不完

01:49.680 --> 01:50.680
那怎么办呢

01:50.680 --> 01:52.680
那你就用这种写法

01:52.680 --> 01:53.680
针对官方的Result

01:53.680 --> 01:54.680
重新付一个值

01:54.680 --> 01:55.680
就行了

01:55.680 --> 01:56.680
懂了意思吧

01:56.680 --> 01:57.680
给大家说清楚

01:58.680 --> 01:59.680
我们这几个要实现两个

01:59.680 --> 02:04.250
一个是Result

02:04.250 --> 02:05.250
一个是Result

02:05.250 --> 02:07.250
好我们来先来说Result

02:07.250 --> 02:09.250
这个玩意要根据官方文档来看

02:09.250 --> 02:10.250
要去看官方文档

02:10.250 --> 02:12.250
就是MDN上的文档

02:12.250 --> 02:13.250
那么这个是什么意思呢

02:13.250 --> 02:17.250
就是返回一个Promise

02:17.250 --> 02:19.250
核心中有一个

02:19.250 --> 02:22.250
以完成的Promise

02:22.250 --> 02:24.250
它有这么几个逻辑

02:24.250 --> 02:26.250
有两种特殊情况

02:27.250 --> 02:29.250
特殊情况我说一下

02:29.250 --> 02:30.250
第一种特殊情况

02:30.250 --> 02:32.250
就是传递的

02:33.250 --> 02:36.250
传递的Data

02:36.250 --> 02:38.250
本身就是

02:39.250 --> 02:43.250
本身就是ES6的Promise对象

02:44.250 --> 02:45.250
如果说是这种情况

02:45.250 --> 02:47.250
比方说我怎么来判断呢

02:47.250 --> 02:49.250
就是Data isTenso

02:49.250 --> 02:51.250
是不是ES6的Promise对象

02:51.250 --> 02:52.250
但是我因为我这里

02:52.250 --> 02:53.250
全是手写的

02:53.250 --> 02:54.250
如果你们那边

02:54.250 --> 02:55.250
只实现Result的话

02:55.250 --> 02:57.250
那这里直接写这样写就可以了

02:57.250 --> 02:58.250
但是由于我这边

02:58.250 --> 02:59.250
是自己手写的时候

02:59.250 --> 03:01.250
我这里把它改成MyPromise

03:01.250 --> 03:02.250
你们那边

03:02.250 --> 03:04.250
将来就桌面是提到时候

03:04.250 --> 03:05.250
只要没让你去

03:05.250 --> 03:08.250
手写完整的版的Promise

03:08.250 --> 03:09.250
只是让你手写Result

03:09.250 --> 03:10.250
那你这里换成

03:10.250 --> 03:11.250
官方的Promise

03:11.250 --> 03:12.250
懂这个意思吗

03:12.250 --> 03:13.250
因为我这里

03:13.250 --> 03:14.250
既然自己手写了

03:14.250 --> 03:16.250
我肯定要换成自己的

03:16.250 --> 03:17.250
如果说就是

03:17.250 --> 03:19.250
我们Promise对象

03:19.250 --> 03:20.250
就通过个构造系创建的

03:20.250 --> 03:22.250
那我直接返回Data

03:22.250 --> 03:23.250
啥也不管

03:23.250 --> 03:25.250
它是有这么一个逻辑存在

03:25.250 --> 03:27.250
那么第二种特殊情况

03:27.250 --> 03:31.250
就是它不是ES6的Promise

03:31.250 --> 03:32.250
但是呢

03:32.250 --> 03:37.250
传递的Data是Promise like

03:37.250 --> 03:39.250
这是什么东西啊

03:39.250 --> 03:41.250
这就是实现的Promise

03:41.250 --> 03:42.250
一家规范的

03:43.250 --> 03:45.250
它像一个Promise

03:45.250 --> 03:47.250
它实现的Promise一家规范

03:47.250 --> 03:49.250
如果说是这种情况的话

03:49.250 --> 03:50.250
那我怎么会做呢

03:50.250 --> 03:53.560
返回一个新的Promise

03:53.560 --> 03:54.560
当然Promise呢

03:54.560 --> 03:55.560
要用MyPromise

03:55.560 --> 03:56.560
我都要用My

03:56.560 --> 03:57.560
你们以后要用官方的

03:57.560 --> 03:59.560
如果说当你单独写的

03:59.560 --> 04:00.560
我不知道大家听懂

04:00.560 --> 04:01.560
我的意思没有

04:01.560 --> 04:03.560
因为我这边是

04:03.560 --> 04:05.560
自己手写的一个MyPromise

04:05.560 --> 04:07.560
所以说我啥地方都要用我自己的

04:07.560 --> 04:08.560
但是如果说你们将来

04:08.560 --> 04:09.560
做面试的时候

04:09.560 --> 04:10.560
没有让你去自己

04:10.560 --> 04:11.560
完整的版本

04:11.560 --> 04:12.560
去手写一个Promise

04:12.560 --> 04:13.560
只是让你实现

04:13.560 --> 04:14.560
它的一个局部方法

04:14.560 --> 04:15.560
那你肯定这里

04:15.560 --> 04:16.560
要写官方的

04:16.560 --> 04:17.560
你没有自己手写

04:17.560 --> 04:18.560
不要很傻的

04:18.560 --> 04:19.560
去把自己手写一遍

04:19.560 --> 04:20.560
有时间不够的

04:20.560 --> 04:21.560
除非它明确

04:21.560 --> 04:22.560
要求你自己手写

04:22.560 --> 04:23.560
一般来说

04:23.560 --> 04:24.560
自己手写的话

04:24.560 --> 04:25.560
需要花费多少时间呢

04:25.560 --> 04:26.560
半个小时到一个小时

04:26.560 --> 04:28.560
就这么长

04:28.560 --> 04:29.560
所以呢

04:29.560 --> 04:30.560
这里呢

04:30.560 --> 04:32.560
我们这里就返回

04:32.560 --> 04:33.560
一个新的Promise

04:33.560 --> 04:35.560
难道这种情况就是

04:35.560 --> 04:38.560
返回新的Promise

04:38.560 --> 04:40.560
状态和其

04:40.560 --> 04:42.560
保持一致即可

04:42.560 --> 04:43.560
这个新的Promise

04:43.560 --> 04:44.560
状态是什么呢

04:44.560 --> 04:45.560
什么时候说

04:45.560 --> 04:46.560
什么时候说这个

04:46.560 --> 04:47.560
那就看底吧

04:47.560 --> 04:48.560
你判断一下

04:48.560 --> 04:50.560
如果说data

04:50.560 --> 04:51.560
我们之前

04:51.560 --> 04:52.560
说过一个函数吗

04:52.560 --> 04:53.560
这个函数得在实现

04:53.560 --> 04:55.560
到时候你写的时候得在实现

04:55.560 --> 04:56.560
如果说

04:56.560 --> 04:57.560
它里边是一个

04:57.560 --> 04:58.560
有任何方法的对象

04:58.560 --> 04:59.560
那么我们就认为

04:59.560 --> 05:00.560
它是一个Promise like

05:00.560 --> 05:01.560
是一个实现的Promise

05:01.560 --> 05:02.560
a加规范的

05:02.560 --> 05:03.560
这么一个对象

05:03.560 --> 05:04.560
那么我就认为

05:04.560 --> 05:05.560
你那个

05:05.560 --> 05:06.560
你成功了

05:06.560 --> 05:07.560
我就成功了

05:07.560 --> 05:08.560
你失败了

05:08.560 --> 05:09.560
我就失败了

05:09.560 --> 05:12.560
就这么一个逻辑

05:12.560 --> 05:13.560
就这个逻辑

05:13.560 --> 05:14.560
那么剩下的

05:14.560 --> 05:15.560
就不是特殊情况了

05:15.560 --> 05:16.560
那我就直接返回

05:16.560 --> 05:17.560
一个以完成的Promise

05:17.560 --> 05:18.560
然后这个Promise

05:18.560 --> 05:19.560
我返回

05:19.560 --> 05:20.560
已经返回一个Promise的

05:20.560 --> 05:21.560
完成了

05:21.560 --> 05:22.560
就其他情况

05:22.560 --> 05:23.560
其他情况

05:23.560 --> 05:24.560
完成的时候

05:24.560 --> 05:25.560
就直接resolve就完成了

05:25.560 --> 05:26.560
就完成了

05:26.560 --> 05:27.560
那么就是整个resolve的实现

05:27.560 --> 05:28.560
就这么三种情况

05:28.560 --> 05:30.560
其实我们平时用的

05:30.560 --> 05:31.560
最多的就是这种情况

05:31.560 --> 05:32.560
它既不是一个

05:32.560 --> 05:33.560
就是平常我们

05:33.560 --> 05:35.560
其实怎么写的Promise

05:35.560 --> 05:37.560
resolve一个e

05:37.560 --> 05:38.560
对不对

05:38.560 --> 05:39.560
那么这里呢

05:39.560 --> 05:40.560
我们输出一下pro

05:40.560 --> 05:44.000
它自然得到一个

05:44.000 --> 05:45.000
就是以完成的Promise

05:45.000 --> 05:46.000
对吧

05:46.000 --> 05:47.000
就这么一个情况

05:47.000 --> 05:50.000
这就是这个resolve的逻辑

05:51.000 --> 05:52.000
然后呢

05:52.000 --> 05:53.000
resolve这个程度

05:53.000 --> 05:54.000
我现在是非常粗暴的

05:54.000 --> 05:55.000
非常非常粗暴的

05:55.000 --> 05:56.000
它跟这个resolve

05:56.000 --> 05:57.000
就不太一样

05:57.000 --> 06:00.000
这是一个

06:00.000 --> 06:02.000
得到一个

06:02.000 --> 06:07.570
被拒绝的Promise

06:07.570 --> 06:08.570
所以说我们这里

06:08.570 --> 06:09.570
一个resolve这个程

06:09.570 --> 06:10.570
它直接

06:10.570 --> 06:12.570
new一个myPromise

06:12.570 --> 06:13.570
resolve

06:13.570 --> 06:14.570
resolve这个词

06:14.570 --> 06:16.570
然后resolve这个词

06:16.570 --> 06:17.570
resolve

06:17.570 --> 06:19.570
就完成了

06:19.570 --> 06:20.570
它就没有

06:20.570 --> 06:22.570
前面那些乱七八糟的逻辑了

06:22.570 --> 06:24.570
这就是官方的要求

06:24.570 --> 06:25.570
官方的MDN上面

06:25.570 --> 06:26.570
就这样描述了

06:26.570 --> 06:28.570
我就按照描述来写

06:28.570 --> 06:33.930
OK,那我们这里得到一个resolve这个词

06:33.930 --> 06:34.930
你看

06:34.930 --> 06:36.930
是不是没问题的

06:36.930 --> 06:37.930
OK

06:37.930 --> 06:38.930
那么这就是

06:38.930 --> 06:40.930
这一块的逻辑

