WEBVTT

00:01.260 --> 00:05.620
大家好 我是谢老师 这节课的话我们一起来看一下这个

00:06.380 --> 00:12.260
浮动 这个的话基本上是就是你面试的时候 在那个CSS

00:12.780 --> 00:18.940
这个相关的题目里面 出现几率很高的一个这个题目 比如说你看这边

00:19.420 --> 00:25.580
这个问你清除浮动的方法有哪些 还有就是这里 这里的话是一道选择题

00:26.100 --> 00:31.220
以下选项能够清除浮动 相当于考察的也是清除浮动 对吧

00:31.740 --> 00:39.060
abcd是个选项 好 那我们这边的话我们就来看一看 关于这个浮动 我们所需要知道

00:39.980 --> 00:41.940
哪些东西 那首先第一个

00:43.460 --> 00:46.780
第一个的话就是关于这个浮动它出现的背景

00:47.740 --> 00:53.340
啊 最早这个浮动它出现的背景是什么呢 最早它出现的背景它其实是为了做这个

00:54.340 --> 00:58.580
做文字环绕效果 啊 什么意思呢 就是让我们的这个文字

00:59.300 --> 01:05.140
环绕着我们的这个图片 有点类似于就是那个word里面 啊 大家都用过word

01:05.580 --> 01:13.340
对吧 word里面 然后有个这个图文编排的这个效果 啊 比如说你看我这边有个例子啊 把这个例子我们把它看一下

01:15.100 --> 01:16.780
好 我把这边的话html结构

01:17.780 --> 01:25.780
把它粘过来 好 然后css css没什么 css就是container设了一个宽 设了一个border

01:27.180 --> 01:29.020
啊 然后这边替换一下

01:30.820 --> 01:34.580
ok 各说话一下 好 然后接下来我们回头来看一下刷新

01:35.340 --> 01:40.220
啊 你可以看到最外层是我的container啊 就这个黑框是我的container

01:40.620 --> 01:45.500
然后接下来这边的话有一张图片 然后下面有一段文字

01:46.980 --> 01:54.780
那为什么这个文字显示在图片下面呢 啊 这个大家其实都知道为什么 因为它是一个什么呀 它是不是它是一个这个

01:55.420 --> 02:02.700
呃 会计元素啊 对不对啊 这个pp元素 它是一个这个会计元素啊 它会独占遗憾

02:03.500 --> 02:10.500
那这个浮动的这个浮动的出现最早就是为了什么呢 为了做这个文字环绕啊 就是我这个图片在这

02:10.940 --> 02:12.980
好 我的文字从哪开始呢 我文字从这开始

02:13.860 --> 02:21.500
看到没有 从这开始啊 就有点类似于那个报纸啊 报纸比如这边一张图片 然后下这个内容啊 这边是内容

02:21.820 --> 02:29.940
那下面没有图片之后的内容就从这开始 对吧 好的 这个怎么做呢啊 这个很简单 这个的话你只需要设置这个图片

02:30.500 --> 02:33.540
浮动即可啊 比如说我们这边让我们来设置一下这个图片

02:34.460 --> 02:35.620
这边的话 嗯

02:36.620 --> 02:37.220
Image

02:39.780 --> 02:45.540
Image Float net ok 好 回来 让我们这边来看一下 刷新

02:46.620 --> 03:00.300
看到没有 这边是不是就是实现了一个文字环绕啊 这个文字是不是就环绕这张图片了 我们称之为这个文字环绕效果啊 其实就是那个word 大家用word 应该就是 应该是见过这种效果的

03:01.020 --> 03:04.780
所以我们的浮动的话 其实最早就是做这个事情的

03:05.780 --> 03:09.660
明白吧 最早就是做这个事情的 然后后面

03:10.460 --> 03:24.220
后面的话 然后到了后面 然后大家发现什么呢 发现就是我比如说 我就是使用这个html里面的这个元素啊 那个html里面的这个元素 它要么是行类元素

03:25.220 --> 03:29.500
要么是快捷元素 你这样子你是没办法写网页的

03:30.220 --> 03:33.260
对不对 你要么就是快捷独占一行啊 要么就是行类

03:34.060 --> 03:39.340
行类又不能设置宽高 对吧 那怎么办呢 那后面慢慢的大家就发现了浮动 哎

03:40.140 --> 03:44.140
我可以使用浮动来进行这个页面的布局

03:45.100 --> 03:48.940
啊 所以这边的话 就是后面的话 就不仅仅是做这个

03:49.980 --> 03:54.300
文字环绕了 后面我们这个浮动使用的这个范围 它就扩大了

03:54.780 --> 03:57.260
它就拿来干嘛呢 它就拿来进行这个布局

03:58.140 --> 04:06.060
不用举个例子啊 比如说这边 这边我们是使用这个浮动来实现这个两列布局啊 我这边把这个html结构 我把它拿过来

04:09.630 --> 04:10.830
好 把它放到这里面

04:13.520 --> 04:18.800
ok 好 我们来看一下 这个很简单哈 这边呢 就是有一个标题 大家这边是不是有一个这个di位

04:19.280 --> 04:26.320
这个di位里面 然后就有个标题有一段文字 大家这个di位这个di位里面有一个这个标题有一段文字

04:26.640 --> 04:32.400
好 然后接下来现在的话 它是这个样子的 对吧 好 那接下来的话 我们这边 我们来设置

04:33.600 --> 04:35.680
啊 我们这边呢 把这个样设 设置一下

04:38.320 --> 04:45.260
啊 来到这边 啊 上面我们不删它啊 好 我们来看一下 这边的话就是给body

04:45.740 --> 04:50.620
body设置了一个整体的宽度90%啊 然后加最大的这个宽度

04:52.060 --> 04:59.180
900啊 然后加这边第一个 第一个的话宽度是48% 你注意这边我让他干嘛 我让他是不是左浮动

05:00.140 --> 05:06.940
对不对 然后第二个 第二个我让他干嘛呢 第二个我让他又浮动啊 从而的话 这边就实现了

05:07.900 --> 05:09.740
看到没有 这不是两列布局啊

05:11.180 --> 05:13.180
哎 我们这边呢 就使用这个浮动

05:13.980 --> 05:18.380
实现了两列布局啊 好 那比如说你要实现这个三列

05:19.420 --> 05:25.660
三列布局 那很简单 你这边比如在添加一列啊 比如说我们在这边 在添加一列

05:29.170 --> 05:37.170
在这个 这个位置啊 这边这个是第一列 这里是第一列 对吧 这边是第二列 然后接下来我们这边再来

05:38.930 --> 05:44.450
第三列 好 然后第三列之后 然后接下来我们这边来设置一下 呃 这边的DIV

05:45.170 --> 05:49.330
然后NTH 呃 这边就last child

05:52.540 --> 05:55.500
NTH 啊 这边就就那个嘛 就

05:56.460 --> 05:59.420
NTH这个Overtime

06:00.220 --> 06:07.900
然后第三个 好 我这边怎么设置呢 我这边呢 我就设置这个是百分之啊 比如说这个是百分之三十

06:08.780 --> 06:15.340
啊 这个的话是百分之三十 然后加这边呢 他也是左浮动好 然后加这个这个呢 百分之

06:16.700 --> 06:18.860
三十 然后这个的话 右浮动

06:19.740 --> 06:20.460
哎 右浮动

06:21.420 --> 06:22.380
Float

06:23.820 --> 06:27.580
Right 看到没有 好 大家我们这边让我们来刷新一下

06:28.940 --> 06:36.860
刷新一下 你看这边是不是就是实现了一个三列不决啊 但你这边可以把这一列啊 你通过这个比如说就把这一列

06:37.180 --> 06:40.300
这一列的话通过设置这个margin啊 稍微这个间隔

06:40.860 --> 06:46.380
稍微调整一下啊 那我们这边的话就确确实实的使用这个浮动

06:47.100 --> 06:49.020
是不是来进行了我们的页面布局

06:49.900 --> 06:55.660
对不对啊 为什么会使用这个浮动啊 原因很简单 因为最早的时候没有布局的元素

06:56.780 --> 07:01.500
没有布局的元素 最早的话我们的这个css功能还没那么强大

07:02.220 --> 07:04.220
啊 最早的话想着就是我们的这个网页

07:04.780 --> 07:09.020
网页最多显示一下什么呢 就显示一下图文就可以了啊 图片和文字

07:09.580 --> 07:14.780
没想到会显示这么多东西 你看现在css发展对不对 各种各样的什么动画呀 这些

07:15.100 --> 07:19.900
根本就没有想到这些东西啊 说最早的话就根本就没有网布局那么想

07:20.540 --> 07:27.340
最早的话在这个css2 2.1之前啊 包括这个2.1 其实就没有布局的属性

07:27.980 --> 07:34.940
直到这个css3出来啊 才有这个什么弹性和布局啊 网格布局啊 才有这些东西

07:35.740 --> 07:42.140
明白没有啊 说为什么最早会使用这个浮动来这个布局 它其实是有历史原因的

07:42.860 --> 07:44.060
啊 有历史原因

07:45.260 --> 07:51.500
好 那这边呢 我们已经知道这个浮动确实是可以实现布局的 对不对 好 那接下来我们继续往后面看

07:52.060 --> 07:57.420
接下来的话 我们认识到浮动可以布局 接下来我们就要看一下关于浮动的一些

07:58.220 --> 07:58.620
特性

07:59.340 --> 08:05.340
啊 他有哪些特性 我们来看啊 在上面我们已经实现了两列布局和三列布局

08:05.900 --> 08:11.100
可以看出浮动确实可以拿来布局 接下来我们来看有哪些特性 首先第一个特性

08:11.580 --> 08:15.820
第一个特性就是什么呢 第一个特性就是它会脱离标准流

08:16.940 --> 08:25.580
哎 这个的话其实很多同学是知道的 对吧 这个我在讲其他课的时候 其实也是穿插着说了这个浮动 脱标的这个事情

08:26.860 --> 08:33.820
比如我这边有两个div 有两个div之后 然后接下这边 我把这个样式 我把它设置一下

08:36.610 --> 08:39.010
好 然后这 到这

08:40.290 --> 08:42.530
替换一下 好 这边我先不设置浮动

08:43.170 --> 08:46.290
好 这边呢 这个有一个1 1就是第一个盒子

08:46.930 --> 08:54.530
第一个盒子宽高80 然后加这边红色 第二个宽高150 蓝色 好 然后接下来这边让我们来双新

08:55.410 --> 08:58.370
好 政策情况下是不是都在标准流里面 对不对

08:59.010 --> 09:07.250
啊 所以说这边的话 这个是第一个盒子 这个是第二个盒子 好 然后接下来我这边一旦我设置第一个盒子 我设置它为浮动

09:07.890 --> 09:12.210
我设置它为浮动之后 它就会干嘛呢 它就会脱离标准流

09:13.730 --> 09:22.850
那既然它脱离标准流了的话 它是不是就是就空了 对不对 它的下面就空了 那自然而然 第二个这个div是不是就会往上走

09:23.330 --> 09:25.730
啊 说说这边上你就会看到这个现象 刷新

09:26.770 --> 09:32.370
看到没有 为什么这个蓝色往上走了啊 因为它这个蓝色的上面已经没有这个东西了

09:32.770 --> 09:35.090
因为我这个红色的这个我已经脱标了

09:36.050 --> 09:41.410
脱离标准流了啊 你可以把它理解成它浮动起来了 就浮起来了啊

09:43.010 --> 09:46.610
这是这个第一个 第一个特性 它是会脱标的啊

09:47.650 --> 09:52.610
好 然后接下来的话 下一个 浮动元素它是会互相贴靠的

09:53.170 --> 09:58.050
比如说如果有多个浮动元素 那么他们会干嘛呢 他们会相互的这个贴靠

09:58.610 --> 10:04.450
如果宽度不够 然后它才会干嘛呢 才会重启一行啊 比如说我们这边举个例子

10:05.090 --> 10:08.370
比如我们这边让这个蓝色这个 我们也让它浮动

10:08.930 --> 10:10.930
然后接下来的话 我们这边一刷新

10:12.610 --> 10:15.090
看到没有 这里一刷新你就会发现

10:15.730 --> 10:21.010
这个蓝色的div 是不是靠到这个红色div的后面了

10:22.130 --> 10:27.250
啊 这个的话就是浮动了这个相互的这个贴靠性 比如我如果下面还有一个div

10:27.650 --> 10:31.090
然后我也设置这个div也是浮动 那接下来他就会贴到

10:32.530 --> 10:34.450
贴到这个div后面

10:35.410 --> 10:36.770
啊 他这个相互贴靠

10:37.330 --> 10:42.770
但是如果你的宽度不够啊 什么意思 比如说我这边的话 我把这个宽度我设置一下 我设置成

10:44.930 --> 10:46.690
宽度设置成多少呢 设置成1000

10:47.570 --> 10:49.970
设置成1000 好 然后接下来我们这边刷新

10:50.450 --> 10:54.210
好 你看现在是不是贴靠 但是我一旦我把这个宽度降低

10:55.330 --> 10:59.410
看到没有 为什么他跑到下面去了 因为你上面这一排

10:59.970 --> 11:05.650
这个宽度干嘛呀 是不够了呀 对不对 说中我这边的话就只有重新跑到下面去

11:06.050 --> 11:08.050
下面如果也不够的话 他这边的话就

11:08.610 --> 11:13.170
他就不 他也不会再跑了啊 这边就遮住了 这边比如说还不够他就遮住了吗

11:13.490 --> 11:14.290
啊 ok

11:15.490 --> 11:22.130
啊 这是这个浮动的第二个特性 浮动元素 他会互相的贴靠

11:24.770 --> 11:28.850
好 然后接下来下一个 下一个就是什么呢 下一个就是关于浮动

11:29.250 --> 11:33.330
当你一个元素浮动之后 他宽度会进行一个收缩

11:33.890 --> 11:38.290
啊 这个特别是这个快捷元素的时候 特别明显啊 比如我举个例子啊

11:39.090 --> 11:40.530
嗯 比如说我这边有个p

11:41.410 --> 11:43.890
p元素默认他这个就独占一行

11:45.570 --> 11:49.170
哎 我们要谱歌就可以了啊 比如这个p元素

11:49.650 --> 11:53.650
p元素默认是独占一行 所以说我们这边给这个p元素

11:54.610 --> 11:58.690
我们给他设置这个背景颜色的时候 比如背景颜色为瑞的

11:58.930 --> 12:00.930
你会发现他是什么呢 他是赞满的

12:01.970 --> 12:06.450
对不对啊 他是赞满的 好 那我这边的话 我一旦我设置他浮动

12:08.540 --> 12:10.140
float left

12:11.340 --> 12:16.220
啊 我设他浮动 然后我这个p元素本身我又没有设置什么 这没有设置宽度

12:16.940 --> 12:21.260
对吧 所以我这边设置这个浮动之后 你会发现他这边的话这个宽度他就收缩了

12:21.900 --> 12:27.420
啊 就收缩了 当我如果我给他设置了宽度 那接下来他浮动的话 我设置的是多少

12:28.060 --> 12:29.980
就是多少啊 这个他不会变

12:31.180 --> 12:35.980
看到没有 我设置了多少就是多少 但是前提 但是如果你没有设置这个宽度

12:36.540 --> 12:42.700
那他的以前他是独占一行 那么现在的话他就会干嘛呢 他就会进行一个宽度的收缩

12:43.260 --> 12:46.300
啊 他就会进行一个收缩 就变成是这个样子啊

12:47.260 --> 12:51.100
对不对啊 这个的话就是关于这个浮动他的一些特性

12:52.940 --> 12:53.180
啊

12:53.900 --> 12:59.740
然后关于浮动的话 其实面试的时候啊 问的更多的是什么呢 问的更多的就是这个

13:01.180 --> 13:02.380
问的更多的就是这个

13:03.100 --> 13:04.220
清除浮动

13:05.180 --> 13:07.260
哎 你如何来清除浮动

13:08.460 --> 13:11.340
那有的同学可能叫问的 哎 为什么要清除浮动呢

13:12.300 --> 13:18.140
你都设置了浮动呢 我干嘛要去清除呢 好 这里所说的清除浮动 其实指的是

13:18.380 --> 13:22.300
清除他什么呢 清除他所带来的负作用

13:23.820 --> 13:27.660
啊 他所带来的负作用 他带来的什么负作用呢 好 我这边举个例子

13:28.620 --> 13:29.180
比如说这边

13:32.110 --> 13:35.630
比如说这边 好 大家看到我这边是不是有两个UAL

13:36.350 --> 13:41.550
对不对 这边的话 第一个UAL它是一个无需列表 第二个UAL啊也是个无需列表

13:41.790 --> 13:48.510
那这两个UAL它是干嘛的呢 两个UAL我要做这个两行导航男啊 比如说这个第一个UAL

13:48.830 --> 13:50.270
那这样我要做成第一行

13:51.790 --> 13:56.750
第一行导航男 然后接下来第二个UAL 第二个UAL要将我要做成第二行

13:57.710 --> 14:04.350
导航男 好 那这边的话 你就会想着怎么做呢 好 我这边呢 我设置这个力元素浮动就好了

14:04.910 --> 14:10.910
啊 你自然而然 你会想到 我设置这个力元素 float lift 但是你这边 你看一下

14:11.870 --> 14:12.190
刷新

14:14.030 --> 14:17.870
啊 刷新 你会发现什么呀 导航男一二三

14:18.430 --> 14:26.110
然后接下来第二个UAL的这个力 他也干嘛了 他是不是也贴靠到第一个导航男的力的后面了

14:27.150 --> 14:31.870
对不对 为什么呢 原因很简单 我们刚才说了这个浮动是不是他会有这个贴靠性

14:32.510 --> 14:33.710
就刚才讲的那个第二点

14:34.750 --> 14:38.110
浮动元素会干嘛呀 是互相贴靠

14:38.830 --> 14:45.470
对不对 所以你会发现这边的话 我第二个UAL啊 本来UAL它是快捷元素 对吧 那这样我设置力的

14:45.870 --> 14:53.310
力的时候 你会发现 第二个UAL的这个力 他会贴靠到什么呢 贴靠到这个第一个UAL的力后面

14:54.030 --> 15:01.630
啊 好 那我这边呢 还是用这个吧 还是用我这边的这个吧 我这边呢 就是稍微设置一下宽高啊 其实你没设置什么

15:02.030 --> 15:06.110
设置一下宽高 然后设置一下背景颜色啊 用我这个

15:07.870 --> 15:09.070
看着要稍微舒服一点

15:10.110 --> 15:14.590
然后刷新啊 看到没有 他这边呢 就是变成这个样子

15:15.310 --> 15:19.070
啊 所以说这个就是什么呢 这个其实就是我们浮动的副作用

15:20.030 --> 15:25.710
哎 浮动的副作用 就是我第二个导航男 由于我们的这个浮动 他有这个贴靠性

15:26.190 --> 15:30.750
啊 浮动元素他会相互贴靠 所以接下来 第二个UAL里面的力

15:31.150 --> 15:39.470
因为我们设置他浮动啊 所以他就会去追第一个UAL后面的这个力 因为两个都是浮动 对吧 他会进行一个贴靠

15:40.270 --> 15:45.310
那么如何来清除这个副作用呢 我们来看一下啊 这里就有一些方式了

15:46.030 --> 15:55.470
首先第一个 如何清楚啊 第一种方式给副元素设置一个高度几克啊 比如说我这边我给这个UAL

15:56.670 --> 16:02.270
UAL是不是他们的这个副元素啊 好我这边呢 我给UAL我设置比如说高度

16:05.660 --> 16:11.740
高度50 你看我这边是不是给UAL设置了一个高度啊 好然后接下来我们这边刷新

16:12.700 --> 16:21.180
搞定了 是不是搞定了 对不对 这就是第一种方式啊 你给副元素设置高度

16:21.580 --> 16:30.780
啊 但是这种方式的话 其他倒是没有什么 但是关键就是哦 这里还有个知识点 就是你给副元素设置高度的时候

16:31.020 --> 16:38.460
这个高度你一定要大于什么呢 大于这个浮动的这个指元素的高度 你这样子才关得住浮动

16:38.860 --> 16:45.980
啊 我们这边的话啊 有个比较通俗的话 就是你给他设置这个高度之后 其实就是把这个浮动的元素关在里面了

16:46.340 --> 16:50.660
但是你这边啊 如果你这个高度啊 比这个比例元素小

16:51.540 --> 16:58.140
那他就关不住啊 比如说我们这边我们来看嘛 这边你设置是50 是吧 那加这边我们的这个高度 我们设置为这个

16:59.020 --> 16:59.420
100

17:01.100 --> 17:02.220
好 我们这边 我们来看一下

17:03.340 --> 17:03.580
刷新

17:04.300 --> 17:06.380
看到没有 还是有这种贴靠性

17:07.100 --> 17:13.660
啊 说这边的话 你就一定要注意啊 就是你这边设置了这个高度啊 一定要大于这个

17:14.300 --> 17:22.700
就是浮动了指元素的这个高度 ok 好 这种方式的话没有什么其他的问题 但其实的话有一个就是

17:23.660 --> 17:29.260
我们一般来讲的话 我们盒子的高度他是怎么了 他是被内容撑开的

17:29.740 --> 17:39.740
对不对 你想想 我们一般的话 我们是不会给负元素设置这个高度的 很多时候我们负元素 我们的高度是什么呢 是被内容撑开的

17:40.620 --> 17:48.300
那这种时候又该怎么办呢 这种时候又该怎么办呢 这个时候的话就会有一个叫做这个clear的属性

17:49.180 --> 17:55.660
这个属性的话就是专门用来清除浮动的 你定义了这个属性之后 这个属性的话就代表

17:56.620 --> 18:02.540
哪一边不允许出现浮动的元素啊 比如你看他的曲子比较left

18:03.420 --> 18:08.140
left的代表就是左侧不允许浮动元素 大家这边right

18:08.860 --> 18:15.100
right就代表比较右侧不允许出现浮动元素啊 大家一般我们设置的值是什么呢

18:16.060 --> 18:24.780
一般设置的值是这个boss 就是左右两侧都不允许出现这个浮动啊的这个元素

18:26.380 --> 18:31.660
好 那接下来的话 我们就使用这个clear啊 我们来看怎么用啊 这边的话

18:32.380 --> 18:41.180
嗯 我们这边给这个u al 第二个由这个u al 加了一个这个类啊 这个2 然后加这边这个点2里面 是不是就是clear left

18:41.580 --> 18:44.860
好 来 我们来试一试 好 我们这边呢 可以直接这个样子

18:46.220 --> 18:49.260
就是u al 然后nth

18:49.980 --> 18:51.660
然后off type 2

18:51.900 --> 19:03.490
对吧 然后设置他clear boss 各式画一下 好 我们来看一下好 boss 说心

19:04.290 --> 19:12.450
是不是搞定了 对不对 搞定了 好 有同学就会说 哎 这种方式很好嘛 直接就搞定了 那就完事了嘛

19:13.090 --> 19:15.650
啊 但其实这种方式也有缺陷

19:16.610 --> 19:21.410
也有缺陷 有什么缺陷呢 我们来看一下啊 浮动的副作用确实清楚了

19:21.890 --> 19:30.530
但是呢 你的margin属性也失效了 啊 比如说我们这边呢 我们来试一下 我们这边clear boss 然后接下来的话 我们这边margin top

19:31.170 --> 19:35.330
我们设置一个100 好 我们来看一下好不好使 说心

19:36.210 --> 19:39.250
说心 你会发现什么呀 是没有margin的

19:39.810 --> 19:44.690
对不对 我比如说我要和第二个导航能 我要稍微隔开一下 你会发现隔不开了

19:45.490 --> 19:48.050
啊 隔不开了 我的margin失效了

19:48.770 --> 19:54.770
哎 说说这个的话 其实也不是最终的解决方案 那既然我们继续来演变 继续来

19:56.050 --> 19:59.730
然后后面出现了一种什么呢 后面出现了一种叫做隔墙法

20:00.450 --> 20:07.330
什么叫做隔墙法 隔墙法的核心思想就是在两个浮动元素之间添加一堵墙

20:08.690 --> 20:11.250
那什么叫做一堵墙 其实就是一个空的di位

20:12.130 --> 20:14.930
啊 一个空的di位 然后在这个空的di位上面

20:15.650 --> 20:17.650
设置什么呢 设置clear boss

20:18.370 --> 20:26.770
看到没有 空的di位啊 你左右都不允许有浮动的元素 从而实现什么呢 从而就是清除这个浮动的副作用

20:27.570 --> 20:31.970
那我们来看一下好不好使啊 那我们这边的话就是搞一个这个di位

20:33.810 --> 20:36.130
搞个di位啊 这边给一个class

20:37.170 --> 20:39.330
这个叫做clear fix

20:40.610 --> 20:43.330
好 然后既然这边呢 我们就是clear fix

20:47.170 --> 20:52.690
格式化一下 好 然后接下来的话 先把这个去除掉 好 然后再我们这边我们来看一下刷新

20:53.810 --> 21:01.010
哎 是不是仍然是ok的 对不对 仍然是ok的 仍然是ok的话 然后接下来我们叫测试什么呢 我们叫测试这个

21:01.650 --> 21:04.610
margin好不好使 所以我们这边呢就是u al

21:06.610 --> 21:09.570
nth of type 2

21:11.570 --> 21:13.810
好 我们这边呢就是margin top

21:18.340 --> 21:21.220
格式化一下 好 然后接下来这边刷新

21:22.660 --> 21:27.380
margin是不是也是正常的 对不对 margin也是正常的 很好

21:28.020 --> 21:33.620
那看上去的话 这个隔墙法就完全ok了啊 他记清楚了这个

21:34.180 --> 21:37.620
浮动的这个副作用 同时我们这个margin是不是也是正常的

21:38.100 --> 21:40.980
对不对啊 所以很长一段时间的话 确实就是这么来做的

21:41.460 --> 21:47.460
我中间的话 我可以添加一个这个空di位 这空di位主要就是拿来干嘛的 主要就是拿来清除浮动的

21:47.940 --> 21:53.060
然后后面的话 慢慢又衍生出了一种什么呢 又衍生出了一种叫做内墙法

21:54.660 --> 22:00.900
啊 内墙法 我不把墙修在哪里呢 我不把墙修在这个啊 就是两个浮动元素之间

22:01.540 --> 22:04.660
而是干嘛呢 把这个墙修到这里面

22:05.940 --> 22:08.820
啊 比如我修到第一个元素的里面

22:09.380 --> 22:11.940
看到没有 我把这个墙 这个是我们的墙嘛

22:12.340 --> 22:17.220
这个墙的话我修到这个u al的里面 而不是说修到两个u al的

22:17.620 --> 22:24.500
中间这个叫做内墙法 通过这种内墙法它也可以干嘛呢 它也可以就是

22:25.460 --> 22:29.380
清除这个浮动的这个副作用啊 我们这边我来看一下

22:30.420 --> 22:31.700
刷新 刷新

22:32.660 --> 22:36.740
看到没有 是不是OK的啊 这种内墙法也是OK的

22:37.940 --> 22:46.180
OK 好 然后接下来后面啊 这边你可以把这里看一下啊 这里我主要是只 就正常情况下你这个没有高的这个副元素

22:47.060 --> 22:51.620
啊 你的指元素一旦浮动了 高度也就没有了啊 这个当然应该是知道的嘛

22:51.940 --> 22:56.100
比如我这边呢 这个div下面有个p p的话我设置这个宽高

22:56.820 --> 23:00.740
都是100 然后加这边背景颜色给了一个红色 是不是 这个是我的p

23:01.300 --> 23:07.940
好 那加这个div 这个div是没有高度的 只给了个背景色 是这个绿色 那这个div的高度完全是靠谁

23:08.260 --> 23:09.060
是不是靠这个

23:10.020 --> 23:11.700
靠这个p 是不是给它撑开的

23:12.420 --> 23:20.020
但是我们一旦设置这个p元素为浮动之后 他干嘛呢 他脱标了 脱标了这个副元素 这个副元素高是不是也消失了

23:20.580 --> 23:22.340
好 那我这边呢 我就使用这个内墙法

23:22.900 --> 23:31.060
可不可以 内墙法 那这边呢 你可以看到啊 这边副元素他重新就干嘛了 重新这边这个高度是不是就出来了

23:31.620 --> 23:38.260
对不对 那下面的话就是刚才我们那个使用内墙法清除那个浮动啊 其实就是刚才我们写的那段代码

23:39.460 --> 23:40.340
这边是不是OK的

23:41.060 --> 23:48.660
OK 好 然后接着后面 后面的话 然后接着这边再介绍一个什么呢 使用这个overflow属性

23:50.100 --> 23:57.060
使用这个 这个属性本来是用来处理什么呢 本来是用来处理这个易出内容的显示方式的

23:57.700 --> 24:04.820
比如我一个容器里面 我的内容很多 让我这边的话可以设置这个overflow 易出的内容你显不显示

24:05.300 --> 24:10.500
啊 如果你说显示 然后加怎么显示啊 是不是要出现这个进度这个滚动条之类的

24:11.140 --> 24:19.460
但是呢 你给副元素添加了overflow hidden之后 这个副元素他会形成一个什么呢 他会形成一个bfc

24:20.660 --> 24:29.380
啊 这个的话 我有一个小节专门讲这个bfc 你可以去看一下啊 这个其中一种方式就是通过添加overflow hidden

24:30.340 --> 24:37.460
他这样子你添加之后 副元素就会形成一个bfc bfc他就是一块什么呢 独立的显示区域

24:37.940 --> 24:42.500
他是不是外界影响的 而是通过这种方式的话也可以去出浮动

24:43.540 --> 24:49.780
啊 比如说我们这边我们来看一下嘛 回到我们这边啊 这边我们也不修墙了 对吧啊 不修墙了

24:50.900 --> 24:55.060
然后啊 这个也不要了啊 回到我们最初的样子

24:55.940 --> 25:01.620
小心啊 是不是这个样子啊 好 然后接下来的话 我们这边设置这个ur

25:03.140 --> 25:06.580
ur overflow hidden

25:08.740 --> 25:17.380
看到没有 当你设置了这个ur overflow hidden之后 他就是一个什么呢 他就是一个独立的 他就会形成一个bfc

25:18.100 --> 25:20.820
他就是一块独立的渲染区域

25:21.620 --> 25:29.380
既然他是独立的这个渲染区域 他会不会受到其他的影响 这不会 那这个也是一样啊 这个你变成一个bfc之后他也不会

25:29.780 --> 25:33.060
受到这个其他的影响啊 那我们这边我们来看一下

25:34.340 --> 25:38.580
小心 是不是ok的 对不对 让我们来看一下那个高度

25:40.340 --> 25:43.300
比如说这边ur nth

25:45.060 --> 25:47.060
nth of type 2

25:48.020 --> 25:50.340
然后margin top 100

25:51.220 --> 25:58.500
好 然后再这边刷新一下 看到没有 这没有问题啊 所以这个呢 就是通过这个overflow hidden

25:59.460 --> 26:04.900
通过一个这个bfc的形式 给复原数形成一个bfc

26:05.940 --> 26:10.100
从而来清除这个浮动的这个副作用啊 好

26:11.060 --> 26:17.940
然后后面 后面然后到目前的话 目前最流行的一种方式是什么呢 通过这个委内

26:18.900 --> 26:29.060
委内清除法 这是目前最流行的一种方式 委内清除法 他的核心思想是什么呢 他的核心思想是为复原数设置一个

26:29.860 --> 26:40.100
委员数啊 然后这其实就是无形的添加了一堵枪 然后接下来在委员数中设置一系列的这个属性 比我们来看啊 比如这边

26:41.300 --> 26:45.460
点万 点万是哪个 是不是这个ur 这个ur 然后加这边after

26:45.940 --> 26:52.340
after 是不是就是这个ur的后面 对不对 然后将我这边设置了一个什么啊content是空 然后加这边是什么

26:52.580 --> 26:57.860
clear boss 对不对 那withability hidden 好 我们这边我们来试一下嘛

27:00.510 --> 27:03.070
来到这边啊 把这个驱除

27:05.260 --> 27:12.780
这个驱除现在它是不是又是回复到刚才的那种情况 好 回复到刚才那种情况之后 然后接下来我们这边

27:14.620 --> 27:17.740
ur 然后nth

27:18.940 --> 27:23.020
of type 1 然后接下来话这边after

27:25.220 --> 27:33.200
那设置这个 把这个去了 okay

27:34.000 --> 27:37.440
对不对啊 通过这个委内这边after

27:37.680 --> 27:42.560
相当于在这个第1个ur后面 是不是添加了一个元素啊 这个委员数

27:43.040 --> 27:47.760
然后接下来这边的话 通过这个clear boss 好 我们这边我们来试一下 说心

27:48.560 --> 27:54.960
看到没有 是不是 okay 的 okay 的啊 这边这个martian top 是不是也是完全正常的

27:55.680 --> 28:00.560
对不对 哎 叔叔你看这边啊 现在最流行的其实就是这个委内清除法

28:01.040 --> 28:03.360
通过这种方式来清除浮动

28:03.840 --> 28:09.680
啊 那我们这边的话 整个这个清除浮动的这个方法啊 你这边我们再来回顾一遍

28:10.400 --> 28:11.680
首先第一个介绍的是什么

28:12.720 --> 28:17.360
第一个介绍的是不加高法呀 是不是给这个复元素设置一个高度啊

28:17.920 --> 28:23.520
啊 注意就是复元素设置高度的时候 这个高度值一定要大于这个浮动的这个指援数

28:24.000 --> 28:31.440
这样才能关注浮动 对吧 第一个是加高法啊 他的核心思想就是什么呢 核心思想就是这里 我加出了的 你看一下

28:31.840 --> 28:38.320
就如果一个元素要浮动 那么他主线元素一定要有高度 有高度的盒子才能关注浮动

28:39.360 --> 28:44.160
这是加高法 但加高法的话有问题就是什么呢 我们一般不会给元素设置这个高度

28:44.560 --> 28:50.720
我们很多时候高度是靠内容撑起来的 那然后面就出现了这个clear属性

28:51.680 --> 28:57.920
clear属性就是专门清除浮动的 但是呢 使用这个的话 他有一个缺点就是什么呀 是margin

28:58.880 --> 29:03.120
是不是失效 对不对 但有的人可能会问哈 他为什么失效了

29:04.160 --> 29:07.680
为什么失效了啊 这个的话其实就是时代的眼泪了

29:08.560 --> 29:13.120
啊 这个真的就是时代的眼泪了啊 这个就是在以前 以前的话这个

29:14.000 --> 29:19.120
在设置这个css属性的时候 他很多的话就会有一些这个奇怪的特性

29:20.080 --> 29:26.480
他不像现在 现在的话你比如说发布一个新的css属性 他考虑的是很周全的

29:27.360 --> 29:34.480
对吧 考虑的很周全啊 每个属性 然后接下来他是会有什么样的效果 经过反复测试 但最早的时候不是

29:35.280 --> 29:39.040
啊 最早的时候很多css属性他其实是有一些问题的

29:39.680 --> 29:44.880
明白吧 好 然后接下来的话 这边这个后面出现了什么呢 出现了这个隔墙法

29:45.520 --> 29:51.600
就是什么呢 中间添加一个这个空的div 那这个div是吧 设置clear boss

29:52.480 --> 29:57.360
对吧 然后后面又是什么呢 后面又是内墙法 内墙法就是把这个墙修到哪里

29:58.400 --> 29:59.520
是不是修到你这个

30:01.920 --> 30:07.200
哎 这多一个啊 修到你的这个 比如说你这个浮动元素的 是不是里面啊

30:08.640 --> 30:08.960
哎

30:10.640 --> 30:14.480
啊 对的 对了啊 修到你这个浮动元素的 是不是里面 对不对

30:15.120 --> 30:19.200
啊 然后接下后面又出现什么呢 后面就是通过这个overflow这个属性

30:19.920 --> 30:25.680
这个属性 这个属性的核心原理是什么呢 核心原理是不是形成一个bfc

30:26.320 --> 30:30.880
bfc它是一块独立的血染区域 它是不会受到外界的这个音价

30:32.000 --> 30:32.320
对不对

30:33.120 --> 30:36.080
好 然后接下后面 最后就是什么呢 后面就是这个

30:37.040 --> 30:43.920
违内清除法啊 这个也是目前最流行的这个浮动清除方式 它其实也是干嘛呢 其实也是在修墙

30:44.880 --> 30:51.360
对不对 我通过这个违内啊 违元素 通过违元素的话 其实就在他后面添加了一个这个元素

30:51.840 --> 30:55.600
这个元素的话 大家我设置clear boss 是不是也是无形的

30:56.240 --> 30:57.200
修了一堵墙

30:57.840 --> 31:03.280
看到没有啊 说这个的话 就是我们关于这个清除浮动 方式其实是很多的

31:04.000 --> 31:10.560
方式是很多的 说他这边让他喜欢考你啊 就是这个清除浮动有哪些方式啊 他喜欢考你这个

31:11.040 --> 31:15.200
好 那接下我们最后来看一下关于这个浮动的这个现状

31:16.880 --> 31:25.120
上面我们介绍了很多这个清除浮动的这个方法 一会这个外强法 一会内强法 一会又overflow形成bfc

31:25.760 --> 31:32.480
对吧 一会又什么呢 一会又这个违元素 其实这些为什么会有这么多方法 其实这些的话其实都是时代的眼泪

31:32.960 --> 31:39.760
你看我这边写的 都是时代的眼泪 就是以前的话他的这个属性 他会有各种各样的问题

31:40.320 --> 31:44.560
啊 包括我们在学习的时候啊 理解上面也会有各种各样的就是

31:45.360 --> 31:53.360
非常难理解啊 非常难理解啊 然后目前来讲的话 除非你要考虑这个古老的i6 i7

31:54.000 --> 32:00.480
否则的话你这个布局啊 比如我们要开始布局 我们还会用浮动吗 我们不会再用这个浮动了

32:01.360 --> 32:03.760
不会再用浮动 这个浮动已经成为过去了

32:04.640 --> 32:06.800
啊 为什么 因为浮动他压根就不是做

32:07.520 --> 32:12.960
这个布局的 对不对 我们现在布局的话有更好的布局属性 我们有弹性和

32:13.600 --> 32:16.880
由这个网格布局啊 我们可以用这些东西来布局

32:17.680 --> 32:21.760
啊 然后既然很方便的实现这个什么垂直啊 就这个

32:22.640 --> 32:22.960
啊

32:24.000 --> 32:29.040
水平居中啊 垂直居中啊 这些很方便就实现了 你看你以前用这个浮动好麻烦

32:29.600 --> 32:33.280
对不对 我要实现一个这个水平居中啊 然后在这边还要去算算算

32:33.760 --> 32:37.120
算这个多少相处 那家垂直居中也是还要去算算算

32:37.760 --> 32:39.360
啊 就很麻烦啊

32:40.160 --> 32:44.240
中企原因是为什么呢 中企原因就是因为他本来就是拿来做这个

32:44.720 --> 32:50.080
文字环绕的啊 所以现在这个浮动的话 它的这个用武之地也仅仅就是

32:50.560 --> 32:54.880
文字环绕效果 你如果要说文字环绕啊 那你可以用这个浮动

32:55.680 --> 32:59.920
对不对啊 那你如果不做这个文字环绕的话 那这个浮动压根现在就

33:00.560 --> 33:02.800
用的越来越少啊 基本上就不怎么用了

33:03.600 --> 33:09.760
对不对 你看现在我我最后我写了一句 就是像这个文字环绕啊 这种90年代看着还不错的设计

33:10.080 --> 33:13.040
你现在的话又有几个设计师会这样设计网页呢

33:13.920 --> 33:19.120
对不对 除非你那个网页是有点类似于那种报纸啊 模仿那种报纸 报刊的

33:19.760 --> 33:25.360
啊 那可能会有这个文字环绕效果 不然你正常的网页现在谁还给你设置这个文字环绕啊

33:26.240 --> 33:30.880
对不对 所以你这个浮动现在基本上就是用的越来越少 除非你是维护这个

33:31.360 --> 33:37.360
老的项目他可能用的是这个浮动啊 好 这就是关于浮动的现状

33:38.640 --> 33:41.520
好 然后最后的话我们来看一下关于这个整体的这个解答

33:42.400 --> 33:47.280
啊 首先清楚浮动的方法啊 那你听到上面的话 那清楚浮动的方法是不是就很多

33:47.920 --> 33:52.080
对不对啊 通过clear来清楚啊 给浮动的元素设置高度

33:53.440 --> 33:58.480
那加这边还有一些其他的方法啊 大家这边overflow hidden是不是形成bfc

33:59.440 --> 34:05.200
大家这边万轮清楚法这个委内对不对啊 这个是现在的主流方法

34:06.400 --> 34:12.560
啊 下一个第二题 以下选项能够清楚浮动的 我们来看一下 首先空DIV 这是不是就是那个

34:13.200 --> 34:17.520
呃 隔墙法 大家这个hover 为选择器 这个时候

34:18.320 --> 34:24.960
和这个时候没有关系 对不对 说这要提就选b啊 大家c clear clear 是不专门清楚浮动的

34:25.520 --> 34:32.560
那加d overflow overflow 是不是设置为hidden的时候 形成这个bfc 从而清楚这个浮动的副作用

34:33.600 --> 34:42.720
对不对啊 ok 好 这些课的话 时间比较长啊 都讲了半个小时了 好 这些课的话 其实主要就是给大家讲一下这个关于这个浮动

34:43.120 --> 34:50.000
啊 这个浮动虽然现在他用的越来越少了 或者甚至说就压根就没人用了 但是这个东西呢又不能不讲

34:50.720 --> 34:52.400
啊 为什么呢 因为他面试会出现

34:53.760 --> 34:56.960
啊 面试的时候他喜欢问一下你 关于浮动的这个

34:57.520 --> 35:05.440
这个内容啊 说这个浮动的话还是得讲 下来的话把这个浮动啊 自己可以看一看啊 接下来自己的话用一用

35:06.080 --> 35:08.720
好吧啊 这些课就先到这里 再见

