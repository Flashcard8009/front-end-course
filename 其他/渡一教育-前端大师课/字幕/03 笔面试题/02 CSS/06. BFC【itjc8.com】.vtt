WEBVTT

00:01.140 --> 00:03.700
同学们好 我是谢老师

00:03.700 --> 00:07.740
这节课的话 我们来看一下这个BFC

00:07.740 --> 00:12.440
这个也是在面试的时候 特别是考察CSS

00:12.440 --> 00:16.340
部分知识的时候 经常会被问到的一个知识点

00:16.340 --> 00:17.740
就是BFC

00:17.740 --> 00:20.540
除了BFC以外的话 它还会问你什么呢

00:20.540 --> 00:24.740
比如说BFC、IFC、GFC、FFC

00:24.740 --> 00:26.940
对不对 一堆FC

00:27.340 --> 00:30.940
说说我们这边的话 我们这边就花一节课

00:30.940 --> 00:34.540
我们来看一下究竟这个什么是BFC

00:34.540 --> 00:37.340
以及其他的什么IFC、GFC这些

00:37.340 --> 00:40.240
我们来搞懂各种FC

00:40.240 --> 00:42.940
那一说到这个FC的话 你看我这边放了一张图

00:42.940 --> 00:44.540
你会想到这个KFC

00:44.540 --> 00:46.640
但恰恰它就没有KFC

00:46.640 --> 00:50.340
看到没有 它只有BFC、IFC、GFC、FFC

00:50.340 --> 00:51.740
就没有KFC

00:51.740 --> 00:53.740
KFC是肯德基 对吧

00:53.740 --> 00:55.740
好 那这个FC究竟是什么呢

00:55.840 --> 01:00.040
那我们以什么为例呢 我们以这个BFC为例

01:00.040 --> 01:02.440
我们先把这个BFC搞懂

01:02.440 --> 01:05.740
BFC搞懂了 这后面自然而然这些什么

01:05.740 --> 01:09.140
IFC、GFC、FFC

01:09.140 --> 01:10.640
你也就搞懂了

01:10.640 --> 01:13.040
那我们这边我们来看

01:13.040 --> 01:14.540
什么是BFC呢

01:14.540 --> 01:16.540
BFC英语全称

01:16.540 --> 01:19.640
Broker Formatting Context

01:19.640 --> 01:24.340
翻译成中文是快极格式化上下文

01:24.440 --> 01:25.940
那这个什么意思呢

01:25.940 --> 01:29.140
这个解释了等于没解释 是吧

01:29.140 --> 01:30.640
好 那我们继续来看

01:30.640 --> 01:35.540
简单来说就是页面中的一块渲染区域

01:35.540 --> 01:40.540
有一套自己的渲染规则

01:40.540 --> 01:43.640
看到没有 就是我有一个独立的区域

01:43.640 --> 01:47.240
这个区域的话 我有我自己的渲染规则

01:47.240 --> 01:49.540
然后我的这个规则决定了

01:49.540 --> 01:51.540
就是我里面的指援数

01:51.540 --> 01:54.640
它如何进行这个布局

01:54.640 --> 01:59.140
然后以及与其他元素的关系和相互作用

01:59.140 --> 02:02.340
然后当这个设计到可视化布局的时候

02:02.340 --> 02:04.840
BFC提供了一个这个环境

02:04.840 --> 02:07.340
其实就是提供了一个独立的环境

02:07.340 --> 02:10.840
然后接下来这个BFC里面的所有指援数

02:10.840 --> 02:14.540
就按照这个环境里面的渲染规则

02:14.540 --> 02:16.340
来进行这个渲染

02:16.340 --> 02:18.840
你看我这边的话 我再简短一点

02:18.840 --> 02:23.240
那就是什么呢 BFC其实就是一个独立的布局环境

02:23.240 --> 02:27.440
你BFC内部的这个布局

02:27.440 --> 02:31.640
它和外部是不影响的 不影响的

02:31.640 --> 02:32.840
我这边举了个例子

02:32.840 --> 02:35.040
这个就好比是你比如你自己家里

02:35.040 --> 02:38.240
你自己家里你怎么摆放这个家居

02:38.240 --> 02:40.640
是不是都是你的制药 对不对

02:40.640 --> 02:42.840
你营不影响就是你邻居家

02:42.840 --> 02:45.240
你邻居家然后家居了这个布局

02:45.240 --> 02:46.240
你不影响

02:46.240 --> 02:49.440
不受它的影响 你也不会去影响它

02:49.440 --> 02:52.040
对不对 你们是一个独立的个体

02:52.040 --> 02:52.740
然后接下来的话

02:52.740 --> 02:55.340
你可以随意摆放你的这个家居

02:55.340 --> 02:56.040
这个家居的话

02:56.040 --> 02:59.240
你就可以理解成就是指援数

02:59.240 --> 03:03.040
然后现在你有一套你自己的这个规则

03:03.040 --> 03:04.840
好 我们继续往下面看

03:04.840 --> 03:08.040
当然虽然说BFC是一个独立的布局环境

03:08.040 --> 03:09.040
里外不影响

03:09.040 --> 03:12.640
这里指的是你不会影响你邻居家

03:12.640 --> 03:17.540
但是并不意味着布局没有张法

03:17.540 --> 03:20.740
就好比你在你家你可以随意放这个家居

03:20.740 --> 03:22.340
但是它有一定的张法

03:22.340 --> 03:25.640
我不能把桌子放到冰箱上面 对不对

03:25.640 --> 03:30.040
我是有一定张法的基本的规矩还是要有的

03:30.040 --> 03:31.640
那究竟有哪些规矩呢

03:31.640 --> 03:35.840
我们来看一下有如下几条

03:35.840 --> 03:38.440
首先内部的这个盒子

03:38.440 --> 03:42.240
它会在垂直方向一个接着一个的放置

03:42.240 --> 03:44.040
这个好理解 对吧

03:44.040 --> 03:46.540
我们比如说我们的那个快极元素

03:46.540 --> 03:49.740
快极元素是不是就是一个一个从上往下

03:49.740 --> 03:51.940
一个一个的这个进行放置

03:51.940 --> 03:55.040
然后接下来这个盒子垂直方向的这个距离

03:55.040 --> 03:57.340
由margin来决定

03:57.340 --> 03:59.140
然后两个相邻的这个盒子

03:59.140 --> 04:01.840
margin会发生折叠

04:01.840 --> 04:04.840
这个也好理解 取那个最大值

04:04.840 --> 04:07.040
是不是取margin的这个最大值

04:07.040 --> 04:09.040
好 接下来下一个

04:09.040 --> 04:11.540
每个盒子左边框

04:11.540 --> 04:13.340
请挨着包含框

04:13.340 --> 04:15.140
包含框也就是我那个

04:15.140 --> 04:17.740
这个最外层的那个bfc的那个盒子

04:17.740 --> 04:20.440
挨着那个包含框的这个左边框

04:20.440 --> 04:24.440
即使这个浮动元素也是如此

04:24.440 --> 04:30.040
然后第四个 bfc区域不会与浮动盒子重叠

04:30.040 --> 04:34.640
然后bfc就是页面上一个隔离的独立容器

04:34.640 --> 04:36.740
然后架容器里面的指元素

04:36.740 --> 04:39.140
不会影响外面的这个元素

04:39.140 --> 04:41.440
这是不刚才这句话就说了

04:41.440 --> 04:43.440
对不对 其实就是上面我总结了这句话

04:43.440 --> 04:45.740
它就是一个独立的布局环境

04:45.740 --> 04:48.240
然后这样我可以在这个独立的布局环境里面

04:48.240 --> 04:51.840
我要怎么布局我的指元素是我的事情

04:51.840 --> 04:55.440
你外界你是影响不了我的

04:55.440 --> 04:56.940
然后接下来的话第六个

04:56.940 --> 04:59.140
计算bfc高度时

04:59.140 --> 05:03.540
浮动指元素也会参与计算

05:03.540 --> 05:07.240
你看这边 我们整个这个bfc的布局规则

05:07.240 --> 05:11.640
123456就罗列了6条

05:11.640 --> 05:13.240
那我这边罗列了6条的话

05:13.240 --> 05:16.640
那接下来你会有一个很直观的感受

05:16.640 --> 05:18.040
什么直观的感受呢

05:18.040 --> 05:20.340
你说这个就是它这些规则

05:20.340 --> 05:22.300
这6条规则不就是我们

05:22.300 --> 05:24.540
Body元素里面这个盒子

05:24.540 --> 05:26.740
它自然而然就是这样子的布局规则吗

05:26.740 --> 05:28.740
然后比如说我举个例子

05:28.740 --> 05:30.040
我们来举个例子

05:30.040 --> 05:31.740
比如说我这边

05:31.740 --> 05:33.140
我这边写两个盒子

05:33.140 --> 05:35.440
比如这个是one

05:35.440 --> 05:39.440
然后接下来的话div点这个two

05:39.440 --> 05:42.140
然后接下来的话这边

05:42.140 --> 05:44.140
把这儿删了

05:44.140 --> 05:47.170
把这儿删了嘛

05:47.170 --> 05:51.370
好 接下来这边宽高100

05:51.370 --> 05:53.370
好 然后接下来我给这个one

05:53.370 --> 05:56.670
设置一个背景颜色

05:56.670 --> 05:58.070
red

05:58.070 --> 06:00.470
然后我给这个two

06:00.470 --> 06:02.870
设置一个颜色

06:02.870 --> 06:03.970
blue

06:03.970 --> 06:05.670
OK 好 那这样我们这边回头

06:05.670 --> 06:07.070
过来摟一眼

06:07.070 --> 06:08.570
刷新 你看

06:08.570 --> 06:10.170
说我们这边在Body里面

06:10.170 --> 06:12.370
我们的盒子是不是本来就是这样布局的

06:12.370 --> 06:12.870
对不对

06:12.870 --> 06:14.970
每个盒子就是从上往下

06:14.970 --> 06:16.570
就你这说的嘛

06:16.570 --> 06:17.470
就是这里

06:17.470 --> 06:20.270
垂直方向一个接一个的放置

06:20.270 --> 06:21.970
好 然后这边这个margin

06:21.970 --> 06:22.770
margin的话

06:22.770 --> 06:24.870
然后比如说我们这边

06:24.870 --> 06:26.270
我们给这个one

06:26.270 --> 06:30.270
设置一个margin bottom是

06:30.270 --> 06:33.270
margin bottom是一个30

06:33.270 --> 06:35.170
然后接下来这边设置一个margin top

06:35.170 --> 06:36.670
就是一个10

06:36.670 --> 06:39.070
那最终它的margin

06:39.070 --> 06:40.270
它说多少

06:40.270 --> 06:41.970
是不是就是30

06:41.970 --> 06:44.980
我们这边我们来看一下

06:44.980 --> 06:45.780
看到没有

06:45.780 --> 06:47.380
这边

06:47.380 --> 06:48.280
整个这个

06:48.280 --> 06:49.480
是不是就是30

06:49.480 --> 06:49.880
对不对

06:49.880 --> 06:51.780
那是不是就是这里说的

06:51.780 --> 06:54.580
同一个BFC相邻的margin

06:54.580 --> 06:56.580
会发生折叠

06:56.580 --> 06:58.080
看到没有

06:58.080 --> 06:59.680
所以大家就会觉得

06:59.680 --> 07:01.380
我们Body里面的元素

07:01.380 --> 07:02.680
就里面的盒子

07:02.680 --> 07:04.080
就快极盒子

07:04.080 --> 07:04.580
你这边的话

07:04.580 --> 07:06.680
就是天然就是这样子布局的

07:06.680 --> 07:07.580
其实没错

07:07.580 --> 07:09.180
你的感觉是对的

07:09.180 --> 07:10.980
就是在我们标准流中

07:10.980 --> 07:16.680
其实Body元素就是一个天然的BFC

07:16.680 --> 07:17.680
明白没有

07:17.680 --> 07:19.680
它其实就是一个BFC

07:19.680 --> 07:21.180
只不过你在这个BFC里面

07:21.180 --> 07:24.280
你又可以再设置BFC

07:24.280 --> 07:25.080
就好比什么意思呢

07:25.080 --> 07:26.380
比如你在你家

07:26.380 --> 07:26.980
你家的话

07:26.980 --> 07:29.780
就好比是整体的一个Body

07:29.780 --> 07:30.480
然后接下来的话

07:30.480 --> 07:32.180
有一定的布局规则

07:32.180 --> 07:33.380
然后接下来的话是不是又

07:33.380 --> 07:37.180
接下来你的家里面是不是又有小房间

07:37.180 --> 07:38.880
相当于我创建了一个小房间

07:38.880 --> 07:42.280
这个小房间又形成一个新的BFC

07:42.280 --> 07:43.780
那我在这个小房间里面

07:43.780 --> 07:47.280
然后这样我又可以按照其他的规则

07:47.280 --> 07:47.980
而不是其他规则

07:47.980 --> 07:49.080
这一样的规则

07:49.080 --> 07:50.280
是不是又进行这个布局

07:50.280 --> 07:53.080
怎么我里外的话是不影响的

07:53.080 --> 07:53.380
对不对

07:53.380 --> 07:54.480
比如我有三个房间

07:54.480 --> 07:55.280
三个房间的话

07:55.280 --> 07:56.180
我这个第一个房间

07:56.180 --> 07:57.080
和第二个房间

07:57.080 --> 07:59.080
和第三个房间

07:59.080 --> 08:01.080
形成个子的BFC

08:01.080 --> 08:03.280
然后里面的布局是不是不会影响

08:03.280 --> 08:06.580
这个不会影响其他房间

08:06.580 --> 08:07.880
你想想是不是这个道理

08:07.880 --> 08:09.380
对不对

08:09.380 --> 08:09.880
好

08:09.880 --> 08:10.480
那接下来的话

08:10.480 --> 08:11.680
这边BFC

08:11.680 --> 08:14.080
我们这边就已经有一个认识了

08:14.080 --> 08:14.780
那接下来的话

08:14.780 --> 08:15.880
下一个

08:15.880 --> 08:19.180
就是如果我想设置一个BFC

08:19.180 --> 08:21.680
我想形成一个BFC

08:21.680 --> 08:23.380
那怎么做呢

08:23.380 --> 08:26.780
你看我这边记录了一些常见的方式

08:26.780 --> 08:27.680
首先根源说

08:27.680 --> 08:28.480
刚我们已经说过了

08:28.480 --> 08:31.180
根源说就是一个天然的BFC

08:31.180 --> 08:32.080
然后还有什么呢

08:32.080 --> 08:34.180
还有就是Float

08:34.180 --> 08:37.080
当你左浮动右浮动的时候

08:37.080 --> 08:38.580
就你浮动的时候

08:38.580 --> 08:40.280
浮动的这个盒子

08:40.280 --> 08:44.380
它也会形成一个BFC

08:44.380 --> 08:46.180
那接下来这边Position

08:46.180 --> 08:48.380
大家Absolute Fixed

08:48.380 --> 08:50.380
也就是说这边定位的时候

08:50.380 --> 08:51.180
定位的时候

08:51.180 --> 08:52.180
你的这个盒子

08:52.180 --> 08:54.280
也会形成一个BFC

08:54.280 --> 08:54.480
好

08:54.480 --> 08:56.680
然后接下来这边Overflow

08:56.680 --> 09:01.280
Overflow只为Auto Screw Hidden的时候

09:01.280 --> 09:03.180
会形成一个BFC

09:03.180 --> 09:05.080
还有就是这个Display

09:05.080 --> 09:06.280
Inline Block

09:06.280 --> 09:08.080
这个Table Sale

09:08.080 --> 09:09.380
设置这些值的时候

09:09.380 --> 09:11.880
它会形成一个BFC

09:11.880 --> 09:12.780
当我这边的话

09:12.780 --> 09:15.280
只是列举了其中的一些值

09:15.280 --> 09:16.080
你如果想看

09:16.080 --> 09:18.880
就是完整的这个BFC触发方式

09:18.880 --> 09:20.580
你可以来到这个MDN

09:20.580 --> 09:21.980
我这边打开了

09:21.980 --> 09:23.280
在这边

09:23.280 --> 09:24.180
在这边

09:24.180 --> 09:25.780
快及格式化上下文

09:25.780 --> 09:26.580
你看这边

09:26.580 --> 09:28.680
下列方式会创建

09:28.680 --> 09:30.480
快及格式化上下文

09:30.480 --> 09:32.780
那你看这边方式就很多了

09:32.780 --> 09:33.780
可了没有

09:33.780 --> 09:34.680
根元素

09:34.680 --> 09:35.580
浮动元素

09:35.580 --> 09:36.880
绝对定位

09:36.880 --> 09:38.180
大家这边行类

09:38.180 --> 09:39.180
表格

09:39.180 --> 09:41.180
大家这个表格标题

09:41.180 --> 09:43.180
Overflow Display

09:43.180 --> 09:43.980
包括什么呢

09:43.980 --> 09:45.580
包括这个弹性盒子

09:45.580 --> 09:47.080
网格元素

09:47.080 --> 09:47.780
多列

09:47.780 --> 09:51.180
这些都会形成这个BFC

09:51.180 --> 09:52.180
明白没有

09:52.180 --> 09:53.280
OK

09:53.280 --> 09:54.180
这是关于这个

09:54.280 --> 09:56.880
如何创建BFC

09:56.880 --> 09:58.180
好那接着这个BFC

09:58.180 --> 09:59.980
究竟有什么用呢

09:59.980 --> 10:01.480
我们刚才已经说过了

10:01.480 --> 10:05.680
BFC它是一个独立的这个空间

10:05.680 --> 10:07.480
它里面有自己的这个渲染规则

10:07.480 --> 10:08.180
里外的话

10:08.180 --> 10:09.980
这个不受影响

10:09.980 --> 10:10.680
让我们来看一下

10:10.680 --> 10:12.980
这个关于这个创建这个BFC

10:12.980 --> 10:15.280
我另外创建一个

10:15.280 --> 10:16.880
快及格式化上下文

10:16.880 --> 10:18.180
创建这么一个BFC

10:18.180 --> 10:19.880
它究竟有啥用

10:19.880 --> 10:22.980
我们这边我们来看几个场景

10:22.980 --> 10:24.080
首先第一个

10:24.080 --> 10:26.180
第一个的话就是可以解决

10:26.180 --> 10:28.380
浮动元素这个

10:28.380 --> 10:31.580
负元素高度坍塌的问题

10:31.580 --> 10:33.280
比如说我们这边我们来举个例子

10:33.280 --> 10:35.980
我把这个代码直接就拿过来了

10:35.980 --> 10:38.180
比如我们这边

10:38.180 --> 10:40.380
这边就是有一个这个负元素

10:40.380 --> 10:42.380
里面有一个是不是指元素

10:42.380 --> 10:47.760
然后接下来的话我们这边

10:47.760 --> 10:50.960
然后把这设置一下

10:50.960 --> 10:54.550
上面那个留着吗

10:54.550 --> 10:56.550
OK好这边我先不设置浮动

10:56.550 --> 10:57.750
先把这个注释掉

10:57.750 --> 10:59.850
好那这样我们这边我们来看一下

10:59.850 --> 11:03.700
刷新刷新

11:03.700 --> 11:06.500
好外面的这个黑框框是我的负元素

11:06.500 --> 11:08.700
然后里面这个是我的指元素

11:08.700 --> 11:11.300
我负元素的高度完全是靠什么

11:11.300 --> 11:14.500
是不是靠这个指元素给我撑起来的

11:14.500 --> 11:15.100
对不对

11:15.100 --> 11:17.000
完全是靠这个给我撑起来的

11:17.000 --> 11:18.300
好那接下来我这边

11:18.300 --> 11:21.200
我一旦指元素设置浮动

11:21.200 --> 11:22.800
那你这边你看

11:22.800 --> 11:24.000
那不好意思

11:24.000 --> 11:27.900
我负元素的高度撑不起来了

11:27.900 --> 11:28.700
为什么呢

11:28.800 --> 11:31.400
因为我的这个浮动

11:31.400 --> 11:34.200
浮动的话它这边它是会脱标的

11:34.200 --> 11:35.400
浮动它会脱标的

11:35.400 --> 11:36.900
它脱离了这个标准牛之后

11:36.900 --> 11:39.300
让我的这个负元素

11:39.300 --> 11:43.000
它的高度就没有指元素来把它撑起来

11:43.000 --> 11:44.600
让我这边我怎么办呢

11:44.600 --> 11:45.900
好我这边的话

11:45.900 --> 11:48.700
我就可以设置

11:48.700 --> 11:53.300
把这个负元素设置为一个BFC

11:53.300 --> 11:55.600
设置为一个这个BFC之后

11:55.600 --> 11:57.500
然后它的高度就不会塌陷了

11:57.500 --> 11:59.300
比如说我们这边通过最简单的方式

11:59.300 --> 11:59.800
设置什么呢

11:59.800 --> 12:02.100
overflow hidden

12:02.100 --> 12:05.900
我们刚才看到这边overflow hidden

12:05.900 --> 12:07.800
是不是会形成一个BFC

12:07.800 --> 12:08.500
对吧

12:08.500 --> 12:15.000
说中我们这边就直接设置overflow hidden

12:15.000 --> 12:18.300
好那这样我们这边我们来看一下刷新

12:18.300 --> 12:19.300
看到没有

12:19.300 --> 12:23.900
当我们把这个负元素设置为一个BFC之后

12:23.900 --> 12:26.100
那接下来你这边你的指元素

12:26.100 --> 12:29.600
你再怎么布局你都是什么

12:29.600 --> 12:32.900
是不是都是在我的负元素里面

12:32.900 --> 12:33.700
对不对

12:33.700 --> 12:38.100
我这个负元素它就是一个独立的空间

12:38.100 --> 12:38.800
就好比什么

12:38.800 --> 12:40.900
我给大家举个例子

12:40.900 --> 12:44.800
就是比如说我现在的话我家里有个房间

12:44.800 --> 12:45.500
有个房间

12:45.500 --> 12:46.700
然后接下来我之前的话

12:46.700 --> 12:50.900
我这个房间我没有修那个四周的围墙

12:50.900 --> 12:52.300
没有修四周的围墙

12:52.300 --> 12:54.900
那这样我往这个房间这个空间上面

12:54.900 --> 12:56.400
我去放这个东西

12:56.400 --> 13:00.800
那有可能就是放到比如说放到都靠近客厅了

13:00.800 --> 13:02.500
都放到外面去了

13:02.500 --> 13:03.100
对不对

13:03.100 --> 13:06.300
那我现在的话我要这个确定我这个房间

13:06.300 --> 13:06.900
那接下来的话

13:06.900 --> 13:10.100
我就用围墙把我的这个房间围起来

13:10.100 --> 13:11.400
形成一个就确确实实

13:11.400 --> 13:13.100
你看到是一个房间

13:13.100 --> 13:14.600
那接下来你在这个房间里面

13:14.600 --> 13:16.300
你再怎么布局

13:16.300 --> 13:18.200
你是不是你是跑不出去了

13:18.200 --> 13:18.500
对不对

13:18.500 --> 13:19.800
你再怎么放东西什么的

13:19.800 --> 13:21.700
那你都是在我这个房间里面

13:21.700 --> 13:24.500
你不会影响到外面的空间

13:24.500 --> 13:25.500
对不对

13:25.500 --> 13:26.500
就是这么意思

13:28.700 --> 13:32.200
这是第一个可以解决这个富元素

13:32.200 --> 13:34.500
高度塌陷的问题

13:34.500 --> 13:35.000
好

13:35.000 --> 13:36.300
然后接下来第二个

13:36.300 --> 13:38.700
第二个就是非浮动元素

13:38.700 --> 13:41.100
被浮动元素覆盖

13:41.100 --> 13:41.300
好

13:41.300 --> 13:45.850
那我们这边我们来看一下

13:45.850 --> 13:46.150
好

13:46.150 --> 13:48.250
然后接下来首先首先是html

13:48.250 --> 13:50.150
html的话有两个div

13:50.150 --> 13:51.150
这边有两个div

13:51.150 --> 13:52.750
这个是兄弟关系

13:52.750 --> 13:52.950
好

13:52.950 --> 13:53.750
然后接下来的话

13:53.750 --> 14:02.020
我们这边把它设置一下

14:02.020 --> 14:03.620
同样先把这个浮动

14:03.620 --> 14:05.820
先把它这个注射掉

14:05.820 --> 14:05.920
好

14:05.920 --> 14:07.420
那现在我们这边来看一下

14:07.420 --> 14:07.520
好

14:07.520 --> 14:09.320
现在的话这边是不是有两个div

14:09.320 --> 14:10.820
我放大一点

14:10.820 --> 14:13.320
这边是不是有两个div

14:13.320 --> 14:14.720
这个的话要长一些

14:14.720 --> 14:16.820
这个的话要短一些

14:16.820 --> 14:17.820
就这个要宽一些

14:17.820 --> 14:19.020
这个要宽一些

14:19.020 --> 14:20.420
这个要窄一些

14:20.420 --> 14:20.620
好

14:20.620 --> 14:21.720
然后接下来的话

14:21.720 --> 14:25.720
我这边我设置这个box1浮动

14:25.720 --> 14:27.720
当我设置box1浮动的时候

14:27.720 --> 14:30.220
它是不是它会脱标啊

14:30.220 --> 14:30.920
对不对

14:30.920 --> 14:32.620
它会脱标

14:32.620 --> 14:33.320
它脱标的话

14:33.320 --> 14:36.320
那这个box2是不是自然而然就往上走

14:36.320 --> 14:38.620
我们来看一下刷新

14:38.620 --> 14:40.820
刷新你会发现整个页面是这个样子的

14:40.820 --> 14:41.720
为什么

14:41.720 --> 14:42.820
原因很简单

14:42.820 --> 14:45.720
因为你的第一个盒子它脱标了

14:45.720 --> 14:46.520
脱标之后

14:46.520 --> 14:47.720
然后接下来的话

14:47.720 --> 14:49.420
然后下面的那个盒子

14:49.420 --> 14:50.720
由于它上面已经没有盒子

14:50.720 --> 14:53.020
它是不是自然而然就往上走

14:53.020 --> 14:53.720
对不对

14:53.720 --> 14:53.920
好

14:53.920 --> 14:55.520
那这里的话我就可以干嘛呢

14:55.520 --> 14:56.720
我这里的话

14:56.720 --> 14:59.320
我就可以设置box2

14:59.320 --> 15:01.920
为一个这个bfc

15:01.920 --> 15:04.820
当你设置了box2为一个bfc之后

15:04.820 --> 15:10.920
它是不会与这个浮动的这个box重叠的

15:10.920 --> 15:12.920
即使你这个box1

15:12.920 --> 15:15.320
就是因为浮动脱离了标准流

15:15.320 --> 15:15.520
好

15:15.520 --> 15:18.120
那我们这边我们来试一下

15:18.120 --> 15:23.620
这边让我设置它是一个overflow hidden

15:23.620 --> 15:25.820
overflow hidden

15:25.820 --> 15:28.320
那它是不是形成一个bfc

15:28.320 --> 15:30.720
一个独立的渲染空间

15:30.720 --> 15:33.120
那既然我都是一个独立的渲染空间了

15:33.120 --> 15:36.120
是不是我不会被这个浮动元素给遮挡住

15:36.120 --> 15:36.720
对不对

15:36.720 --> 15:36.920
好

15:36.920 --> 15:38.520
那这样我们这边我们来看一下

15:38.520 --> 15:38.920
刷新

15:40.420 --> 15:41.220
看到没有

15:41.220 --> 15:43.320
我这边出现在了这个位置

15:43.320 --> 15:44.620
我这边没有被什么

15:44.620 --> 15:48.420
是没有被你这个浮动元素给遮挡

15:48.420 --> 15:48.820
看到没有

15:48.820 --> 15:50.520
就两个不会重叠

15:50.520 --> 15:51.820
不会重叠的

15:51.820 --> 15:52.120
为什么

15:52.120 --> 15:54.120
因为我是一个独立的渲染空间

15:56.420 --> 15:57.320
这是第二点

15:59.320 --> 16:01.320
然后接下来这边基于此

16:01.320 --> 16:02.820
基于此我们就可以干嘛

16:02.820 --> 16:07.020
我们就可以创建这个固定宽度

16:07.020 --> 16:13.420
就是这个制作这个制作这个两栏自适应布局

16:13.420 --> 16:15.520
什么叫做两栏自适应布局

16:15.520 --> 16:17.520
就是左边的这个导航栏

16:17.520 --> 16:18.720
就左边两栏

16:18.720 --> 16:20.220
两栏就是分左右

16:20.220 --> 16:22.320
那左边这个是固定宽度的

16:22.320 --> 16:23.820
右边这个它是什么

16:23.820 --> 16:25.020
右边那一栏

16:25.020 --> 16:26.020
就是这边分两栏

16:26.020 --> 16:27.420
左边一般是导航栏

16:27.420 --> 16:29.920
右边右边的话是内容区

16:29.920 --> 16:30.920
这就是两栏

16:30.920 --> 16:31.520
两栏的话

16:31.520 --> 16:33.220
然后左边是固定宽度

16:33.220 --> 16:35.220
右边的话是自适应宽度

16:35.220 --> 16:35.420
好

16:35.420 --> 16:36.420
那这样我们这边我们来做一下

16:38.420 --> 16:46.520
比如说这里把他拿过来

16:46.520 --> 16:46.920
好

16:46.920 --> 16:48.220
然后接下来这边

16:50.220 --> 16:57.150
Left把这边替换一下

16:57.150 --> 16:58.850
我们来把这个代码简单看一下

16:58.850 --> 17:01.350
这边Left宽200

17:01.350 --> 17:03.650
这边的话是不是固定宽是200

17:03.650 --> 17:07.050
大家这边的话是不是就是100VH

17:07.050 --> 17:09.650
是不是100%的这个湿口高度

17:09.650 --> 17:10.450
然后接下来这边

17:10.450 --> 17:12.950
让我设置它是这个浮动Left

17:12.950 --> 17:13.150
好

17:13.150 --> 17:14.850
大家这边这个右侧

17:14.850 --> 17:16.150
右侧的这个宽度的话

17:16.150 --> 17:18.450
这边是通过这个CLC

17:18.450 --> 17:19.850
这个计算函数

17:19.850 --> 17:22.950
大家这边100%减去个200

17:22.950 --> 17:23.850
就是右侧

17:23.850 --> 17:25.350
然后加这边高度也是一样

17:25.350 --> 17:27.250
然后加这边的话有一个背景颜色

17:27.250 --> 17:27.450
好

17:27.450 --> 17:28.950
那这样我们这边我们来看一下

17:28.950 --> 17:30.350
理论上来讲

17:31.350 --> 17:37.780
百分之百减个200

17:37.780 --> 17:39.280
我这边是放大了的

17:39.280 --> 17:40.780
我就说怎么回事

17:40.780 --> 17:40.980
好吧

17:40.980 --> 17:43.920
这个重新那个

17:43.920 --> 17:45.120
OK好

17:45.120 --> 17:46.320
理论上来讲

17:46.320 --> 17:48.220
这边是200

17:48.220 --> 17:49.420
这边是什么呢

17:49.420 --> 17:52.020
这边是这个100

17:52.020 --> 17:55.220
100VW减去200

17:55.220 --> 17:57.320
那这个右侧应该是干嘛呀

17:57.320 --> 18:00.020
右侧是不是应该是站满才对呀

18:00.020 --> 18:00.620
对不对

18:00.620 --> 18:02.820
但是你看我们这个右侧有没有站满

18:04.220 --> 18:05.420
有没有站满呀

18:05.420 --> 18:07.220
没有站满

18:07.220 --> 18:08.420
为什么没有站满呢

18:08.420 --> 18:09.620
原因很简单

18:09.620 --> 18:11.820
因为你这个东西它浮动了

18:11.820 --> 18:12.720
浮动了之后

18:12.720 --> 18:13.620
然后既然它脱标

18:13.620 --> 18:15.920
脱标的话这个就是往上走

18:15.920 --> 18:17.420
然后既然它有一部分就干嘛呢

18:17.420 --> 18:19.020
就被这个

18:19.020 --> 18:22.720
被这个浮动了导航男给覆盖了

18:22.720 --> 18:23.520
那怎么办呢

18:23.520 --> 18:24.520
那很简单

18:24.520 --> 18:27.120
我让右侧变成一个什么呀

18:27.120 --> 18:30.020
我让它变成一个BFC

18:30.020 --> 18:32.420
当它变成一个BFC之后

18:32.420 --> 18:36.320
它是不是就不会和浮动的这个元素

18:36.320 --> 18:37.720
是不是重叠

18:37.720 --> 18:38.420
对不对

18:38.420 --> 18:38.620
好

18:38.620 --> 18:39.820
那我们这边我们来试一下

18:39.820 --> 18:45.820
我们把它变成一个BFC Overflow Hidden

18:45.820 --> 18:46.120
好

18:46.120 --> 18:48.420
然后下这边刷新走

18:48.420 --> 18:49.820
是不是搞定了

18:49.820 --> 18:50.720
对不对

18:50.720 --> 18:51.920
这里就搞定了

18:51.920 --> 18:52.720
你看这边

18:52.720 --> 18:55.520
它就是一个两难自适应布局

18:55.520 --> 18:56.520
看到没有

18:56.520 --> 18:58.320
OK

18:58.320 --> 19:01.120
这是这个点

19:01.220 --> 19:01.520
好

19:01.520 --> 19:03.020
然后接下来第三个点

19:03.020 --> 19:05.520
第三个点就是这个外边具

19:05.520 --> 19:08.220
垂直方向重合问题

19:08.220 --> 19:10.920
它还能解决这个margin折叠的这个问题

19:10.920 --> 19:13.420
那我们这边我们来看一下

19:13.420 --> 19:14.420
margin折叠

19:14.420 --> 19:16.320
刚才是不是已经说过了

19:16.320 --> 19:16.520
对吧

19:16.520 --> 19:17.820
它会取那个垂直方向

19:17.820 --> 19:21.520
它会取那个较大的那个

19:21.520 --> 19:25.070
然后把这个

19:25.070 --> 19:28.700
我们把它拿过来

19:28.700 --> 19:30.200
把它替换掉

19:30.200 --> 19:30.700
OK

19:30.700 --> 19:33.800
我们来看这个BFC宽100高100

19:33.800 --> 19:34.100
对吧

19:34.100 --> 19:36.100
大家它向下有个10

19:36.100 --> 19:37.900
然后接下来的话这个box2

19:37.900 --> 19:40.200
box2的话这边宽100高100

19:40.200 --> 19:42.200
大家这边向上有个10

19:42.200 --> 19:42.900
那最终的话

19:42.900 --> 19:47.400
它的这个这个相隔的这个距离是多少

19:47.400 --> 19:47.900
是多少

19:47.900 --> 19:49.400
是不是就是10啊

19:49.400 --> 19:49.800
为什么

19:49.800 --> 19:52.000
因为它有一个这个margin的这个塌线

19:52.000 --> 19:54.700
或者说叫做margin的折叠

19:54.700 --> 19:55.400
对不对

19:55.400 --> 19:55.700
好了

19:55.700 --> 19:57.300
这边的话我们可以干嘛呢

19:57.300 --> 20:00.900
我们这边的话可以在这个box2

20:00.900 --> 20:02.700
在它的这个外面

20:02.700 --> 20:05.000
再包含一个DIV

20:05.000 --> 20:07.000
那并且把这个DIV设置成什么呢

20:07.000 --> 20:08.600
设置成BFC

20:08.600 --> 20:08.800
啊

20:08.800 --> 20:09.800
那我们这边我们来试一下

20:11.700 --> 20:12.100
这边呢

20:12.100 --> 20:17.000
我们外面再包一个DIV.container

20:17.000 --> 20:19.400
大家把它包含进去

20:21.400 --> 20:22.300
包含进去之后

20:22.300 --> 20:25.400
大家这边我让这个container成为一个什么呢

20:25.400 --> 20:27.700
成为一个BFC

20:27.700 --> 20:29.400
那这边就是overflow

20:30.300 --> 20:30.900
这个high的

20:31.900 --> 20:32.100
好

20:32.100 --> 20:33.700
那现在这边我们来看一下

20:33.700 --> 20:34.100
说心

20:35.200 --> 20:35.600
看到没有

20:36.600 --> 20:37.100
看到没有

20:37.100 --> 20:39.000
这边那是不是就是解决了这个问题

20:39.000 --> 20:40.500
这个很明显是不是就变成20了

20:42.000 --> 20:42.700
变成20了

20:44.100 --> 20:44.900
说这边啊

20:44.900 --> 20:46.100
也可以解决这个问题

20:46.100 --> 20:50.300
就是这个外边距重合的这个问题

20:50.300 --> 20:50.600
ok

20:51.800 --> 20:52.000
好

20:52.000 --> 20:54.500
这就是关于这个什么是BFC

20:54.500 --> 20:57.100
以及BFC的触发规则

20:57.100 --> 21:00.000
以及就是常见的使用场景啊

21:00.000 --> 21:03.600
这三个部分的姿势就给大家介绍完了啊

21:03.600 --> 21:05.400
那这三个部分的姿势介绍完了

21:05.400 --> 21:06.800
那你回头再来看什么

21:06.800 --> 21:10.300
iFC GFC FFC

21:10.300 --> 21:11.900
那基本上就是大同小异的

21:13.600 --> 21:14.600
为什么这么说呢

21:14.600 --> 21:15.900
你BFC

21:15.900 --> 21:17.300
因为FC都是一样的吗

21:17.300 --> 21:19.300
FC是不是叫做格式化上下温

21:20.000 --> 21:21.400
什么叫做格式化上下温

21:21.400 --> 21:24.000
就是我按什么样的格式来渲染啊

21:24.000 --> 21:24.500
说白了

21:24.500 --> 21:26.700
就是我按什么样的格式来渲染

21:27.200 --> 21:29.300
那前面这个B就是Block

21:29.300 --> 21:30.300
是不是按照Quer

21:31.000 --> 21:31.600
对不对

21:31.600 --> 21:32.900
按照Quer

21:32.900 --> 21:34.400
这种格式来渲染

21:34.400 --> 21:36.000
那你这个i

21:36.000 --> 21:37.100
i的话那就是什么呢

21:37.100 --> 21:38.900
是不是就是inline

21:38.900 --> 21:39.900
inline就是什么

21:39.900 --> 21:42.300
inline是不是就是行类元素啊

21:42.300 --> 21:42.700
对不对

21:42.700 --> 21:45.900
也就是我按照行类元素的规则

21:45.900 --> 21:47.000
来渲染

21:47.000 --> 21:49.700
这个就是渲染里面的元素

21:49.700 --> 21:50.800
那这个g

21:50.800 --> 21:51.800
g的话就是什么呢

21:51.800 --> 21:53.500
g的话就是这个

21:53.500 --> 21:55.500
grand layout

21:55.500 --> 21:58.500
就是按照网格布局的格式

21:58.500 --> 22:00.600
来渲染里面的元素

22:00.600 --> 22:03.100
然后接下来这边这个FFC

22:03.100 --> 22:03.900
FFC呢

22:03.900 --> 22:05.700
第一个F就是flex

22:06.400 --> 22:07.300
就按照什么呢

22:07.300 --> 22:11.500
按照弹性合制的这个这个形式

22:11.500 --> 22:13.400
来渲染里面的职员数

22:14.100 --> 22:14.800
对不对

22:14.800 --> 22:16.800
所以你理解的一个BFC

22:16.800 --> 22:18.700
那后面的就是大红小异的了

22:18.700 --> 22:19.200
说白了

22:19.200 --> 22:22.300
就是我按照什么样的格式来渲染

22:22.300 --> 22:24.400
BFC就是按照Quer

22:24.400 --> 22:26.000
因为B就是block

22:26.000 --> 22:26.700
对吧

22:26.700 --> 22:28.300
按照Quer来渲染

22:28.300 --> 22:30.800
g的话就是网格F的话

22:30.800 --> 22:32.200
就是这个弹性合

22:34.100 --> 22:36.600
然后ii的话就是这个行类对吧

22:36.600 --> 22:38.100
就这么简单

22:38.100 --> 22:38.300
好

22:38.300 --> 22:40.900
然后这边更多的这个关于格式化

22:40.900 --> 22:42.100
上下文的内容啊

22:42.100 --> 22:43.900
你可以参与这个mdn

22:43.900 --> 22:45.600
我这边有个这个链接

22:45.600 --> 22:47.200
一个是bfc的

22:47.200 --> 22:48.800
bfc刚打开了是吧

22:48.800 --> 22:50.700
你把这个可以看一看

22:50.700 --> 22:52.700
大家还有一个是ifc

22:54.000 --> 22:54.900
这个看到没有

22:54.900 --> 22:56.200
行类格式化

22:56.200 --> 22:57.300
上下文啊

22:57.300 --> 22:58.300
inline

22:58.300 --> 23:00.900
这个formatting context

23:00.900 --> 23:02.900
把这个可以看一下

23:02.900 --> 23:03.100
好

23:03.100 --> 23:04.500
最后我们来看一下这个整体

23:05.500 --> 23:08.100
介绍一下bfc及其应用

23:08.100 --> 23:09.500
那现在再来看这个提示

23:09.500 --> 23:11.000
不就很简单了

23:11.000 --> 23:11.700
对不对

23:11.700 --> 23:12.800
介绍一下bfc

23:12.800 --> 23:14.000
那bfc就是什么

23:14.000 --> 23:14.900
是不独立的

23:15.600 --> 23:16.800
布局环境

23:16.800 --> 23:17.000
啊

23:17.000 --> 23:19.500
大家bfc内部的元素布局

23:19.500 --> 23:21.500
与外部互不影响

23:21.500 --> 23:24.500
你就把它想象成你家里的一个房间

23:24.500 --> 23:25.500
就这么简单

23:25.500 --> 23:25.600
啊

23:25.600 --> 23:26.500
你只要这样子一想

23:26.500 --> 23:28.900
是不是就明白了啊

23:28.900 --> 23:29.100
好

23:29.100 --> 23:31.500
大家这边如何触发这个bfc

23:31.500 --> 23:33.900
你这边那稍微列举几种就可以了

23:33.900 --> 23:35.500
你不用全部写完

23:35.500 --> 23:36.300
你就列举几种

23:36.300 --> 23:37.700
比如设置浮动啊

23:37.700 --> 23:40.000
overflow设置为autoscrew

23:40.000 --> 23:41.000
highline

23:41.000 --> 23:42.400
position啊

23:42.400 --> 23:43.100
对不对

23:43.100 --> 23:45.000
你也可以说就是html

23:45.000 --> 23:47.200
就是一个天然的bfc

23:47.200 --> 23:48.600
对吧

23:48.600 --> 23:49.800
大家这边常见的应用

23:49.800 --> 23:52.000
常见应用干什么介绍了那么几条

23:52.000 --> 23:52.300
对不对

23:52.300 --> 23:56.400
解决浮动元素令这个负元素高度塌陷

23:56.400 --> 23:57.300
然后解决什么呢

23:57.300 --> 23:59.200
解决这个非浮动元素

23:59.200 --> 24:01.400
被浮动元素覆盖

24:01.400 --> 24:04.300
解决这个外边去垂直方向这个重合

24:04.300 --> 24:06.700
就是那个margin重合啊

24:06.700 --> 24:06.900
好

24:06.900 --> 24:09.600
大家这边第二道题介绍bfc

24:09.600 --> 24:10.600
ifc

24:10.600 --> 24:11.200
gfc

24:11.200 --> 24:12.200
ffc

24:12.200 --> 24:13.100
那什么就是上面这

24:14.400 --> 24:15.100
对不对

24:15.100 --> 24:15.900
就上面这

24:16.000 --> 24:19.400
你把它这个大字用这个自己的话

24:19.400 --> 24:21.400
你把它描述一下

24:21.400 --> 24:22.800
就可以了

24:22.800 --> 24:23.400
好吧

24:23.400 --> 24:25.200
他一般bfc他就考你啊

24:25.200 --> 24:26.400
什么是bfc

24:26.400 --> 24:28.200
我看很多面词题都是啊

24:28.200 --> 24:29.600
什么是bfc

24:29.600 --> 24:30.900
然后最多再考一下什么呢

24:30.900 --> 24:33.200
就是他有什么作用啊

24:33.200 --> 24:34.000
然后还有就是什么呢

24:34.000 --> 24:36.200
还有就是除了bfc

24:36.200 --> 24:37.700
他会让你介绍一下ifc

24:37.700 --> 24:40.000
gfc和ffc

24:40.000 --> 24:42.600
一般就是考察这些

24:42.600 --> 24:43.200
啊

24:43.200 --> 24:45.600
他下来的话把这个再看一看

24:45.700 --> 24:47.700
特别把这个mdn

24:47.700 --> 24:49.900
mdn这边是不是有两篇文档

24:49.900 --> 24:50.200
对不对

24:50.200 --> 24:52.600
一个是这个行类格式画上下文

24:52.600 --> 24:56.100
一个是这个块级格式画上下文

24:56.100 --> 24:57.400
这个就是bfc

24:57.400 --> 24:58.800
这个是ifc

24:58.800 --> 25:01.000
那把这两个也把它看一下

25:01.000 --> 25:01.800
好吧

25:01.800 --> 25:02.000
好

25:02.000 --> 25:03.700
这些课就先到这里啊

25:03.700 --> 25:04.100
再见

