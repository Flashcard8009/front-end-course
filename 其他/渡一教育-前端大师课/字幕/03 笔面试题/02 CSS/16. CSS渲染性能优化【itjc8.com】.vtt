WEBVTT

00:01.200 --> 00:03.240
大家好 我是谢老师

00:03.500 --> 00:07.080
这节课的话我们来看一下关于这个CSS

00:07.340 --> 00:10.420
渲染性能的优化

00:10.920 --> 00:13.480
这里的话也是有一道整体

00:13.740 --> 00:16.820
总结一下如何提升或者优化

00:17.080 --> 00:19.640
CSS的这个渲染性能

00:20.140 --> 00:25.260
这个性能优化的话其实是一个老生常谈的这个话题了

00:26.040 --> 00:27.060
为什么这么说呢

00:27.320 --> 00:29.360
因为比如你在做这个项目的时候

00:29.760 --> 00:31.660
当你的这个项目的这个功能

00:31.920 --> 00:33.460
都已经全部做出来了

00:33.720 --> 00:35.500
那接下来下一步就应该干嘛呀

00:36.020 --> 00:37.800
下一步是不是就应该考虑

00:38.060 --> 00:39.080
优化这个性能啊

00:39.860 --> 00:40.360
对不对

00:40.620 --> 00:43.700
很多就是有很多同学他不重视这个这一点

00:43.960 --> 00:46.000
就那种项目都做出来了做完了呗

00:46.520 --> 00:47.540
玩生意儿呗收工了呗

00:47.800 --> 00:49.320
对不对其实不是

00:49.840 --> 00:53.940
一般来讲的话你的这个项目功能做完了然后接下来下一步就要考虑

00:54.200 --> 00:56.240
我这个项目还能不能进行优化

00:57.000 --> 00:58.040
为什么要进行优化呢

00:58.240 --> 01:00.040
因为你优化的越好

01:00.300 --> 01:02.080
那这个用户体验

01:02.600 --> 01:03.360
也就越好

01:03.880 --> 01:04.640
你看这边

01:05.920 --> 01:06.440
你看这边

01:08.220 --> 01:11.820
网站优化的这个目的或者目标就是为了什么呢

01:12.080 --> 01:14.380
减少网站的加载时间

01:14.640 --> 01:16.680
提高响应速度

01:16.940 --> 01:18.220
你看这边有一张图

01:18.480 --> 01:19.500
一个这个

01:19.760 --> 01:24.620
三角形的图啊这个是来自于这个谷歌和亚马逊的这个研究表明啊

01:24.880 --> 01:26.660
这不是说随便画了一张图在这

01:27.640 --> 01:28.920
如果你的这个

01:29.680 --> 01:33.000
页面是在0.1到1秒之间

01:33.260 --> 01:36.080
那接下来用户给用户的体验是非常好的

01:36.840 --> 01:38.640
那接下来如果超过了1秒钟

01:38.900 --> 01:40.180
他也还能够等待

01:40.700 --> 01:42.480
如果超过5秒钟

01:43.000 --> 01:44.520
超过5秒钟5到8秒

01:44.780 --> 01:46.060
其实用户就已经受不了了

01:46.320 --> 01:49.140
除非他是必须要用你这个网站

01:49.400 --> 01:52.220
必须用你这个网站比如要交飞啊或者干什么的

01:52.480 --> 01:53.480
必须用你这个网站

01:54.300 --> 01:55.780
然后如果

01:56.040 --> 02:00.140
是超过这个8到10秒的话那很有可能这个用户就已经走掉了

02:00.900 --> 02:01.940
完全就走掉了

02:02.180 --> 02:03.980
说这个网站优化

02:04.740 --> 02:06.020
是否优化的很好

02:06.280 --> 02:07.560
这个直接影响了什么呢

02:07.820 --> 02:10.380
直接影响了你的用户体验

02:11.140 --> 02:11.660
可了没有

02:11.920 --> 02:14.220
直接影响了你的这个用户体验

02:14.980 --> 02:16.520
当我们网站的优化啊

02:16.780 --> 02:18.060
那是各个方面

02:18.820 --> 02:21.900
就是性能优化这方面的这个知识他是比较

02:22.160 --> 02:22.920
灵散的

02:23.380 --> 02:24.160
比较灵散的

02:24.420 --> 02:25.940
比我们CSS里面

02:26.200 --> 02:27.940
可以做一系列的优化

02:28.200 --> 02:30.300
那我们就是后期比较JS

02:30.800 --> 02:32.100
JS携带嘛

02:32.340 --> 02:36.180
JS里面也有一系列的这个优化的手段

02:37.460 --> 02:40.540
好那我们这边的话我们因为是在讲这个CSS的这个面试题

02:40.800 --> 02:43.100
那我们这边就先来看一下关于CSS里面

02:43.360 --> 02:43.860
能够

02:44.120 --> 02:44.620
做

02:44.880 --> 02:45.900
什么样的这个优化

02:47.700 --> 02:48.740
好那接下来这边

02:49.240 --> 02:52.060
性能优化是来自方方面面的啊这个我刚已经说了

02:52.260 --> 02:54.320
就这方面的这个知识他比较灵散

02:54.580 --> 02:56.120
比较琐碎啊

02:56.360 --> 02:57.120
那我们来看一下

02:57.380 --> 03:01.320
首先第一个使用这个ID选择器非常的

03:01.580 --> 03:02.240
高效

03:02.500 --> 03:06.080
为什么呢因为ID这个ID是唯一的

03:07.380 --> 03:09.160
可了没有ID是唯一的

03:09.420 --> 03:11.460
啊然后你不需要干嘛呢不需要

03:11.720 --> 03:16.080
既指定ID这个ID又指定这个标签名

03:16.580 --> 03:17.860
可了没有比如像这个样子

03:18.120 --> 03:21.960
这样子其实就不怎么好啊你这样子直接指定一个ID就可以了

03:22.260 --> 03:27.460
为什么因为你指定一个IDID是唯一的他是不是直接就去查找这个对应ID的这个元素啊

03:27.900 --> 03:33.420
你这边指定了这个你先指定一个P他是先干嘛是不是先去查找所有的P

03:33.780 --> 03:36.340
然后既然再查找那个P里面ID为这个的值

03:36.860 --> 03:38.820
他相当于是不是他查找要查找两次啊

03:39.500 --> 03:42.420
对不对哎说你看这这个的话效率要高一些

03:42.980 --> 03:46.340
而大家第二个避免生成次的这个load

03:46.820 --> 03:51.740
啊也就是你看这边DIV下面的DIV下面的DIV下面的P啊大家我设置一样是

03:52.180 --> 03:53.660
那他在这里就会设计到什么

03:54.700 --> 03:56.020
这么我一程一程的去查找

03:56.900 --> 03:59.660
对不对啊那接下来你像这样直接像这样子些

04:00.460 --> 04:04.540
就啊反正就是尽量要避免啊就是生成次的这个浅套

04:05.740 --> 04:10.220
然后下一个不要使用属性选择器啊比如这个

04:10.700 --> 04:12.420
这就是一个典型的属性选择器

04:13.220 --> 04:17.420
对不对啊他的这个匹配速度是非常慢的啊更不要这样子些

04:18.380 --> 04:23.180
P然后接下ID等于ID1你本来ID就是什么呀

04:23.740 --> 04:28.540
本来ID是不是就是唯一的你是不是直接写ID就可以了你这样子写相当于又变成一个什么呀

04:28.860 --> 04:34.140
所以变成一个属性选择器了对不对本来一个ID选择器就完事了效率也非常高

04:34.540 --> 04:37.660
你强行要把它变成一个属性选择器了啊

04:38.540 --> 04:41.500
好那下一个通常将浏览器前綴

04:42.620 --> 04:46.380
至于这个前面啊这个的话就是我们做了一个就是

04:47.180 --> 04:48.380
渐进增强的时候

04:49.420 --> 04:57.820
对不对啊然后加这边将这个前这个浏览器前綴至于这个前面标准样式至于这个后面啊这些都是一些

04:58.380 --> 05:00.540
嗯一些小技巧啊

05:00.940 --> 05:03.820
好这里的话推荐参与这个CSS

05:04.300 --> 05:08.460
这个优化方案啊这里有个这个网址哈大家可以把这个看一下打开就是这个

05:09.340 --> 05:13.740
CSS规范优化方案啊你看他这里面就提供了很多比如这个值

05:14.700 --> 05:16.380
值尽量用这个缩写

05:17.180 --> 05:25.260
可不可以啊啊比如这边拍定啊上下是6px左右是12px如果上下左右都一样那我是不是只有写一个字就可以啊

05:25.900 --> 05:27.980
对不对那接下来就是避免

05:28.940 --> 05:31.820
耗性能的属性啊比如说像这个

05:32.780 --> 05:40.540
Failter啊或者这个表达是啊Expression啊这些这些都是比较消耗性能的啊然后接下来选择器合并

05:41.260 --> 05:46.140
然后背景图优化啊背景图优化里面肯定有一个那个精灵图

05:46.780 --> 05:50.780
啊精灵图其实也是就是性能优化的一个手段啊

05:51.340 --> 05:57.900
啊还有些其他的大家可以看一下啊这边如果能用CSS可以做到就不要使用这个JS

05:58.460 --> 06:00.380
这个也是我给学生反复强调的

06:00.940 --> 06:06.060
如果你发现有个功能能够用CSS做到那你就用CSS啊不要用去用这个JS

06:06.460 --> 06:08.060
现在CSS已经很强大了

06:08.780 --> 06:13.420
啊以前比如说你要做一个这个圆角你还得用什么呢你还得用图片

06:14.220 --> 06:18.060
啊得用图片那现在的话通过CSS是不是就可以实现这个圆角

06:18.700 --> 06:21.820
啊以前的话我想做一个那种就是移动的这个效果

06:22.700 --> 06:26.060
啊以前的话就得通过这个JS那现在这个CSS

06:26.620 --> 06:32.620
这不也可以实现了对不对啊说能够用CSS做到就不要用这个JS

06:33.500 --> 06:36.940
那现在后面还有一些啊大家自己看一下好回到我们这边

06:38.220 --> 06:40.620
啊遵守CSSLint规则

06:41.420 --> 06:45.820
什么叫做Lint呀而Lint的话是要就是一种就是啊

06:46.860 --> 06:49.660
你书写CSS的这个编码规范

06:50.220 --> 06:52.860
就他给你制定了一系列的这个规则

06:53.980 --> 06:56.860
啊除了CSSLint其实还有JSLint

06:57.260 --> 07:00.540
可能JSLint更有名一些啊知道的同学

07:01.020 --> 07:03.820
更多一些但是我们CSS也有这个Lint

07:04.540 --> 07:07.100
这个东西是什么呢这个东西就是一系列的规则

07:07.580 --> 07:08.700
啊你看这边比如说

07:09.420 --> 07:14.140
啊Import禁止使用这个Import啊然后接下来的话这边比如说这里

07:14.620 --> 07:17.740
short of hand的简写样式属性啊大家这边

07:18.140 --> 07:21.100
比如这个Zero有理词零后面不要加单位

07:21.420 --> 07:24.140
看到没有他就给你制定了这么一些规则

07:24.940 --> 07:26.860
回头你在写这个

07:27.820 --> 07:31.820
你在写你的这个CSS的时候你叫遵循这些规则

07:33.020 --> 07:35.020
明白不你叫遵循这些规则

07:35.740 --> 07:39.500
啊你要是不遵循规则的话他就会有一个这个有个那种警告

07:39.980 --> 07:45.260
在那啊那遵循这个规则的好处在于什么呢那首先第一个就是协作

07:46.220 --> 07:49.180
协作就是大家保证就是你比如说整个团队

07:49.740 --> 07:52.860
比如你到时候开发一个大型项目的时候肯定是一个团队开发嘛

07:53.180 --> 07:58.940
那大家写的这个CSS就都是一样的对不对比如零都不加单位啊

07:58.940 --> 08:00.780
然后这样的话都不用那个Import

08:01.340 --> 08:05.980
啊大家啊比如说这个样式都会使用这个减写的样式

08:06.220 --> 08:11.180
就不会五花八门的啊比如你的CSS是一种风格我的CSS是一种风格

08:11.900 --> 08:17.180
看到没有啊第二个就是什么呢第二个就是你遵守这种规则这些规则的话肯定是

08:17.580 --> 08:22.220
呃对于你的这个CSS的这个渲染性能是不是有帮助的

08:22.860 --> 08:26.060
对不对肯定是有帮助的比如说你看我们这边刚才就有那么一条

08:26.780 --> 08:27.260
在这边

08:28.540 --> 08:29.260
呃这里

08:30.220 --> 08:31.500
是选择器合并

08:32.300 --> 08:37.500
对不对啊选择器合并啊可以节省这个很多字节和宝贵的这个时间

08:37.740 --> 08:42.540
所以说你这边呢你遵循这个Lint的规则其实就是有助于提升你的

08:42.940 --> 08:43.740
渲染性能

08:44.780 --> 08:45.820
对不对啊

08:46.460 --> 08:50.220
好所以这边Lint啊这边给了一个链接啊大家可以去看一看

08:50.220 --> 08:54.540
关于他这个CSS的Lint有具体有些什么样的这个规则

08:55.500 --> 08:56.780
好然后接下第六个

08:57.420 --> 09:02.860
不要使用这个Import啊这个在我另外一节课就是那个Import指令里面

09:03.180 --> 09:06.220
我讲过这个Import他就是引入这个CSS的

09:06.700 --> 09:11.660
他和那个Lint可一样是引入这个CSS样式的但是呢不推荐使用

09:11.980 --> 09:16.460
为什么呢你看这边他会影响浏览器的病情下载

09:17.420 --> 09:22.860
啊如果听到那个Import指令的就听到那节课的同学啊就是应该对这个很熟悉

09:23.180 --> 09:27.580
没有听到同学可以把那几颗听一下啊说这边是不推荐使用这个Import的

09:28.140 --> 09:30.140
为什么呢因为他会影响这个病情下载

09:30.620 --> 09:37.740
我下载一个CSS文件解析之后我才会知道哦有另外一个CSS需要下载这个时候才会去下载

09:39.740 --> 09:43.020
好那既然避免避免过分的这个重排

09:43.660 --> 09:48.460
什么叫重排呢所谓重排就是浏览器需要重新计算这个布局的这个位置和

09:49.020 --> 09:51.420
大小那这个是比较消耗时间的

09:51.900 --> 09:57.820
啊这个其实是属于这个浏览器里面的一部分知识啊有重排和重绘啊

09:58.220 --> 10:01.180
那常见的这个重排元素你看这边就列举出来了

10:01.820 --> 10:11.100
对不对啊比较宽啊高啊拍定啊这些啊这些都是常见的这个重排元素啊但他只是说避免过分的使用

10:12.060 --> 10:16.380
没有叫你不用你想这些属性我们平时在写的时候是吧还是挺常见的

10:17.020 --> 10:22.540
对不对啊没有说不用但是你这边的话你想想比如说如果能够少写或者用其他属性来代替的

10:22.940 --> 10:27.580
那你可以用这个其他属性来代替啊比如说这边举个例子嘛比如这边

10:27.900 --> 10:28.140
margin

10:29.420 --> 10:31.100
比方我想两个div之间

10:31.820 --> 10:36.220
稍微有一些这个就是隔开那我们一般是不是会想到使用这个margin

10:36.700 --> 10:41.260
那现在有一种写法就是什么呢不用margin为什么呢因为他是这个会引起这个重排

10:41.500 --> 10:43.980
那我可以通过什么呢我可以通过这个trace form

10:44.940 --> 10:46.780
啊trace form里面的这个trace net

10:47.660 --> 10:49.660
来进行一个这个移动

10:50.220 --> 10:51.900
从而实现这个两个盒子

10:52.460 --> 10:52.860
间隔

10:53.660 --> 10:54.060
怎么样

10:55.100 --> 11:04.460
好那gid8个依赖这个继承啊某些属性可以继承那么就没有必要再写一遍啊这个也很好理解

11:05.020 --> 11:09.420
对不对啊所以你看就是整个这个渲染性能优化这一块啊

11:10.060 --> 11:11.500
他就是比较的琐碎

11:12.140 --> 11:13.820
就是一些很琐碎的这个知识

11:14.300 --> 11:19.420
包括后面我讲那个结实性能优化也是啊都是非常琐碎淋散的一些

11:19.980 --> 11:22.780
好了现在这边这个总结啊总结的话你就自己

11:23.340 --> 11:29.020
总结一下啊比如说这边使用id选择器对吧避免生成式的选择器的嵌套

11:30.380 --> 11:35.820
啊避免使用属性选择器啊你把刚才上面讲的啊把它写出来大家把这个

11:36.460 --> 11:42.140
把这个是不是也可以把它加上对不对在下面还有啊比如文件尽量去做这个压缩啊

11:42.620 --> 11:48.380
对不对然后加规范的这个代码格式这个命名规则要一致那怎么一致

11:48.780 --> 11:53.100
我怎么做到代码格式和命名规则一致是不是就是使用那个css令堂

11:54.060 --> 12:03.740
对不对啊好这个就是关于css渲染性能优化啊ok好这节课就先到这里啊再见

