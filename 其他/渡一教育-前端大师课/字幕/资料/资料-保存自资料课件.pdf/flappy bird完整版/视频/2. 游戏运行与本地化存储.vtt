WEBVTT

00:00.370 --> 00:04.050
这样的 今天在群里面看到同学们有一些疑问

00:04.050 --> 00:06.890
就是说为什么要去使用get使用get

00:06.890 --> 00:10.090
好像对于我们来讲没有什么态度的用处

00:10.090 --> 00:12.890
甚至说我不去用它都可以

00:12.890 --> 00:14.570
确实是这样的

00:14.570 --> 00:17.090
你不去用这样的一个get

00:17.090 --> 00:19.530
对你来讲 对你的这个项目来讲

00:19.530 --> 00:21.530
没有什么特殊的一个影响

00:21.530 --> 00:23.050
没有任何的影响

00:23.050 --> 00:25.450
但是你未来到工作当中的时候

00:25.450 --> 00:28.050
我们都是要进行协同开发的

00:28.050 --> 00:29.650
那什么是协同开发呀

00:29.690 --> 00:31.970
就我们一起去写同一个项目

00:31.970 --> 00:34.250
那当大家都去写同一个项目的时候

00:34.250 --> 00:37.010
我们就需要用这个去管理我们的代码了

00:37.010 --> 00:40.410
所以说这个东西它是做一个工具而存在的

00:40.410 --> 00:42.210
我们在最最开始

00:42.210 --> 00:44.810
在刚刚开始学习它的时候

00:44.810 --> 00:47.930
学习前端的时候就把它给掌握了

00:47.930 --> 00:50.090
然后在这一段的时间内

00:50.090 --> 00:52.450
几个月 还六七个月的学业时间当中

00:52.450 --> 00:54.450
你把get玩得差不多了之后

00:54.450 --> 00:58.210
你到公司就没有那么多无期八糟的事情了

00:58.210 --> 01:00.050
因为可能有同学他不会get

01:00.050 --> 01:00.930
然后去到公司

01:00.930 --> 01:04.010
他要先用这个一点时间把get搞明白

01:04.010 --> 01:04.810
那你也知道

01:04.810 --> 01:07.570
其实你要去玩这 或者还玩这 明天行

01:07.570 --> 01:08.850
就总会容易出错

01:08.850 --> 01:10.970
出各种各样莫名其妙的问题

01:10.970 --> 01:12.810
你还搞不定

01:12.810 --> 01:14.450
那这个时候谁能帮你呀

01:14.450 --> 01:16.010
能帮你的还是你自己

01:16.010 --> 01:17.450
而且给你的时间又不多

01:17.450 --> 01:20.450
就会造成手忙脚乱的这样一个情况

01:20.450 --> 01:22.730
所以说 我就建议大家

01:22.730 --> 01:25.410
从现在开始上班的这个课之后

01:25.410 --> 01:28.890
我们再去学习任何的代码

01:28.890 --> 01:30.410
或者去写任何的练习

01:30.410 --> 01:33.090
我们都把它放到gethop上去进行托馆

01:33.090 --> 01:35.250
把这一套流程先给它跑通了

01:35.250 --> 01:36.410
玩明白了

01:36.410 --> 01:39.490
这个是咱们的一个小目的

01:39.490 --> 01:41.330
没有一个人干全部的时候

01:41.330 --> 01:42.370
那一个人干全部

01:42.370 --> 01:44.170
你的公司得多小啊

01:44.170 --> 01:45.490
就只有一个前端

01:45.490 --> 01:46.450
你就一个项目组里面

01:46.450 --> 01:47.370
只有你一个人

01:47.370 --> 01:48.970
那还在那待着干嘛呀

01:48.970 --> 01:50.250
对 说句不好听的

01:50.250 --> 01:51.410
转身就走

01:51.410 --> 01:53.410
毫不留情

01:53.410 --> 01:54.330
好了

01:54.450 --> 01:56.370
然后咱们今天就接着

01:56.370 --> 01:58.090
昨天的代码写

01:58.090 --> 01:59.530
接着昨天的代码写

01:59.530 --> 02:02.290
首先咱们还是打开gitbash

02:02.290 --> 02:03.250
打给它

02:03.250 --> 02:04.970
昨天我们是first

02:04.970 --> 02:07.450
我们说了一节课一个分支

02:07.450 --> 02:10.210
所以咱们今天第一个要做的事情

02:10.210 --> 02:14.090
就是去切换一道一个新的分支上去

02:14.090 --> 02:15.170
那么我们要用

02:15.170 --> 02:19.410
getcheckout-b起一个名字

02:19.410 --> 02:20.930
比如说叫做second

02:20.930 --> 02:24.090
那这个时候它就切换到新的分支上去了

02:24.090 --> 02:27.650
那你从前一个分支切换到后一个分支时

02:27.650 --> 02:31.130
后一个分支里面是有原来的这个代码的

02:31.130 --> 02:33.170
那你看我们来打开一下

02:33.170 --> 02:36.250
code.用冰激器把这个文件给打开

02:36.250 --> 02:38.690
你是可以看到昨天的文件的

02:38.690 --> 02:40.410
我们在昨天的这个基础之上

02:40.410 --> 02:41.850
再去写就可以了

02:41.850 --> 02:43.130
那只不过说是

02:43.130 --> 02:44.570
今天写的这个代码

02:44.570 --> 02:46.850
影响不到昨天的那个分支

02:46.850 --> 02:50.450
只是在昨天的这个基础之上去建立的

02:50.450 --> 02:51.770
清楚了吧

02:51.770 --> 02:52.410
OK

02:52.450 --> 02:54.530
那昨天咱们写的这个

02:54.530 --> 02:58.530
只是把结构和样式给搞定了

02:58.530 --> 03:01.530
然后还没有进入到js这个阶段

03:01.530 --> 03:03.330
没有进入到js这个阶段呢

03:03.330 --> 03:07.060
那咱们就来看一看吧

03:07.060 --> 03:09.660
首先咱们要去考虑几个问题

03:09.660 --> 03:10.780
第一个问题就是

03:10.780 --> 03:15.500
我们现在写的这样一个界面是否合理

03:15.500 --> 03:17.580
是不是肯定不合理

03:17.580 --> 03:18.060
对不对

03:19.700 --> 03:21.100
是不是不合理

03:21.100 --> 03:22.820
因为我不能说一上来

03:22.820 --> 03:24.180
你这些东西全都在呢

03:24.180 --> 03:26.260
所以咱们得去做一点小改动

03:26.260 --> 03:28.740
我们将第一次不应该出现的

03:28.740 --> 03:30.780
这样的一个内容给它干掉

03:30.780 --> 03:31.980
那怎么干掉

03:31.980 --> 03:33.140
让它消失

03:33.140 --> 03:33.700
对不对

03:33.700 --> 03:36.740
那让一个元素消失的方法

03:36.740 --> 03:37.380
有什么呀

03:37.380 --> 03:37.940
有很多

03:37.940 --> 03:39.780
你可以让它视觉上消失

03:39.780 --> 03:42.540
也可以让它真正的这个出去

03:42.540 --> 03:42.780
是吧

03:42.780 --> 03:44.940
真正的这个就不显示在整个

03:44.940 --> 03:46.060
整个仕图上了

03:46.060 --> 03:48.900
那咱们只用desplay就可以了

03:48.900 --> 03:51.300
用desplay就可以了

03:51.300 --> 03:55.780
怎么让背景适应浏览器的宽度和高度

03:55.780 --> 03:57.700
你给它设置这样的一个

03:57.700 --> 03:59.340
宽度和高度不就行了吗

04:00.540 --> 04:02.060
我们的这个背景

04:02.060 --> 04:03.700
是复元素的一个背景

04:03.700 --> 04:07.140
它的宽度和高度是完全扑满复元素的

04:08.340 --> 04:08.940
OK

04:08.940 --> 04:10.620
所以咱们现在找一下

04:10.620 --> 04:11.980
index下色

04:11.980 --> 04:15.220
咱们把一切要消失的元素

04:15.220 --> 04:16.620
设置上desplay

04:16.620 --> 04:17.700
首先按的

04:17.700 --> 04:18.860
按的这个元素

04:18.860 --> 04:20.020
就是它gim over

04:20.020 --> 04:21.140
包括这个排行榜

04:21.140 --> 04:23.100
它是最后要去展示出来了

04:23.100 --> 04:25.300
所以让咱们来一个desplay

04:25.300 --> 04:27.380
desplay

04:27.380 --> 04:28.540
来一个none

04:28.540 --> 04:30.420
给它给消失掉就可以了

04:30.420 --> 04:31.060
那现在呢

04:31.060 --> 04:31.980
它变没了

04:31.980 --> 04:35.380
其次是这样的一个mask遮罩层

04:35.380 --> 04:36.620
它也要消失

04:36.620 --> 04:38.340
那咱们找到mask

04:38.340 --> 04:41.700
同样的设置一下desplay为一个none

04:42.740 --> 04:43.220
为一个none

04:43.220 --> 04:43.820
OK

04:43.820 --> 04:44.620
还有什么

04:44.620 --> 04:47.220
还有这个分数在一开始的时候

04:47.220 --> 04:48.820
也不需要去显示

04:48.820 --> 04:50.580
那咱们找到分数的这个元素

04:50.660 --> 04:51.860
它叫做score

04:51.860 --> 04:55.180
那直接在这里给它来设置一个desplay为none

04:55.180 --> 04:56.100
就可以了

04:56.100 --> 04:56.700
那这个呢

04:56.700 --> 04:58.020
就把一开始的

04:58.020 --> 05:00.420
这样那些元素都给它干掉了

05:00.420 --> 05:01.540
那干掉了之后

05:01.540 --> 05:04.140
咱们就开始来写js

05:04.140 --> 05:04.860
写js

05:04.860 --> 05:06.060
因为我们这个小鸟

05:06.060 --> 05:08.060
在初始的时候是不是要蹦的

05:08.060 --> 05:08.340
对不对

05:08.340 --> 05:08.980
要蹦的

05:08.980 --> 05:09.940
开始游戏

05:09.940 --> 05:12.060
它有这样一个放大缩小的

05:12.060 --> 05:12.980
这样一个效果

05:12.980 --> 05:14.220
同时天空

05:14.220 --> 05:15.060
这样一个背景

05:15.060 --> 05:16.700
它也是在不断的运动

05:16.700 --> 05:17.940
不断的飘的

05:17.940 --> 05:19.300
它其实在视觉上

05:19.300 --> 05:20.940
像小鸟往前飞一样

05:20.940 --> 05:22.300
但实际上就是小鸟

05:22.300 --> 05:23.220
它的位置不变

05:23.220 --> 05:25.060
用后面的这样的一个运动

05:25.060 --> 05:27.460
造成了一个视觉上的一个效果

05:27.460 --> 05:28.100
对不对

05:28.100 --> 05:28.620
OK

05:28.620 --> 05:30.460
那咱们来写js

05:30.460 --> 05:31.420
找

05:31.420 --> 05:35.180
现在咱们来新建一个index.js文件

05:36.180 --> 05:36.820
在这块呢

05:36.820 --> 05:37.940
我要说一下

05:37.940 --> 05:39.900
我不知道有没有同学

05:39.900 --> 05:42.100
在之前的公开课当中

05:42.100 --> 05:43.180
听过我的课

05:43.180 --> 05:45.180
但是甭管你们听过没听过

05:45.180 --> 05:47.780
咱们今天就从头开始讲

05:47.780 --> 05:49.740
在我的这样的一个课程当中

05:49.740 --> 05:52.940
也就是针对于你们这种小白的课程当中

05:52.940 --> 05:56.660
我会使用一种编写代码的方式

05:56.660 --> 06:00.500
这种编写代码的方式叫做利用

06:00.500 --> 06:01.700
对象收编辨量

06:03.580 --> 06:06.300
这个本来想昨天晚上给你们讲的

06:06.300 --> 06:08.460
但是昨天这个网太刺了

06:08.460 --> 06:10.260
我还是留到今天来讲

06:10.260 --> 06:12.500
对象收编辨量

06:12.500 --> 06:13.340
你看看

06:13.340 --> 06:14.500
用它收编辨量

06:14.500 --> 06:16.180
是一种什么样的形式呢

06:16.180 --> 06:17.500
其实很简单

06:17.500 --> 06:20.940
我们要去写一些js的写线逻辑

06:20.940 --> 06:24.540
那么就无可避免的要去写一些辨量

06:24.540 --> 06:26.660
比如说我想去声明一个辨量a

06:26.660 --> 06:28.020
a为一个1

06:28.020 --> 06:29.660
再去声明一个辨量b

06:29.660 --> 06:31.500
b为一个10

06:31.500 --> 06:34.940
那这些辨量都被称之为什么辨量

06:34.940 --> 06:35.980
称之为什么辨量

06:37.180 --> 06:39.060
是不是在全局内啊

06:39.060 --> 06:39.300
对不对

06:39.300 --> 06:40.220
在全局内

06:40.220 --> 06:43.020
它都是全局辨量

06:43.020 --> 06:46.060
那咱们还一直都在抢掉一个概念

06:46.060 --> 06:49.460
就是我们一个项目不是一个人来完成的

06:49.460 --> 06:51.540
而是由一个小组来完成的

06:51.540 --> 06:53.180
要不然咱们用jt干嘛呀

06:53.180 --> 06:54.260
为什么要用jt

06:54.260 --> 06:56.860
不就是因为我们后面要去协同开发吗

06:56.860 --> 06:57.140
对不对

06:57.140 --> 06:59.140
我们想要去回退这个那个的

06:59.140 --> 07:02.940
但是在我们去进行协同开发多个小组

07:02.940 --> 07:04.140
一个小组多个人

07:04.140 --> 07:05.900
共同去完成一个项目的时候

07:05.900 --> 07:09.460
我们就要去考虑到全局辨量这么一回事了

07:09.460 --> 07:11.180
因为你写的辨量叫a

07:11.180 --> 07:13.260
他写的辨量也叫a

07:13.300 --> 07:16.460
那么可能在整个html里面

07:16.460 --> 07:18.420
先去引入了你的js文件

07:18.420 --> 07:20.460
后期引入了他的js文件

07:20.460 --> 07:22.260
那么辨量就会被覆盖

07:22.260 --> 07:24.980
就会导致这样那样的一些问题

07:24.980 --> 07:27.540
而又由于js本身

07:27.540 --> 07:28.900
more声明辨量

07:28.900 --> 07:31.180
这样一种天然存在的

07:31.180 --> 07:32.540
这样一种缺点

07:32.540 --> 07:34.580
他不给你任何的提示

07:34.580 --> 07:36.180
你可以随便去声明

07:36.180 --> 07:37.620
你看我再来wore一个a

07:37.620 --> 07:39.500
懂于一个对象

07:39.500 --> 07:40.300
懂一个对象

07:40.300 --> 07:41.260
他会抱错吗

07:41.260 --> 07:42.300
他不会抱错

07:42.300 --> 07:44.460
因为js本身它弱烈行语言

07:44.460 --> 07:47.380
它本身天然就存在这样的一种缺陷

07:47.380 --> 07:48.300
对不对

07:48.300 --> 07:49.700
那这个时候就没有办法了

07:49.700 --> 07:51.220
你找不到任何的问题

07:51.220 --> 07:54.180
因为可能你的带码不好用了

07:54.180 --> 07:54.860
项目崩了

07:54.860 --> 07:56.220
但是你还没有任何的抱错

07:56.220 --> 07:57.900
你定位不到这个信息所在

07:57.900 --> 07:59.020
定位不到错误

07:59.020 --> 08:01.540
那你说你这一天过得多别绪

08:01.540 --> 08:02.660
一直在有这个错误

08:02.660 --> 08:04.420
最终找到错误也很别绪

08:04.420 --> 08:06.700
一看就是因为这么一个小问题

08:06.700 --> 08:10.060
所以咱们就要尽可能的去减少全局辨量

08:10.060 --> 08:11.580
那怎么去减少呢

08:11.580 --> 08:12.620
换一种思维

08:12.620 --> 08:15.860
我们假设说有一个对象叫做obj

08:15.860 --> 08:20.740
把所有的全局辨量都变成是这个对象

08:20.740 --> 08:24.820
它本身它自己的一个属性而存在

08:24.820 --> 08:27.420
变成是它的一个属性而存在

08:27.420 --> 08:28.820
那怎么变啊

08:28.820 --> 08:29.660
怎么变

08:29.660 --> 08:30.660
你看看

08:30.660 --> 08:33.100
对象里面是一个一个的什么呀

08:33.100 --> 08:34.540
建值队

08:34.540 --> 08:35.180
建值队

08:36.180 --> 08:38.620
建值队

08:38.620 --> 08:39.100
ok

08:39.100 --> 08:42.260
那我们其实去写这样的一个全局辨量

08:42.260 --> 08:44.500
是不是也算是一些建值队啊

08:44.500 --> 08:47.500
去全局里面找到叫A的那个辨量

08:47.500 --> 08:48.900
它的值为1

08:48.900 --> 08:51.340
去全局里面找到叫B的那个辨量

08:51.340 --> 08:52.740
它的值为10

08:52.740 --> 08:54.020
那我们换一种思路

08:54.020 --> 08:56.380
我去到obj这个对象当中

08:56.380 --> 08:58.860
去找到一个名字为A的

08:58.860 --> 09:01.180
让你一个辨量它的值为1

09:01.180 --> 09:04.460
那这种形式怎么去写呀

09:04.460 --> 09:05.580
是不是就这样写

09:05.580 --> 09:07.420
写一个属性A

09:07.420 --> 09:09.340
值为1写个属性B

09:09.340 --> 09:10.740
值为10

09:10.740 --> 09:11.660
那也就是说呢

09:11.660 --> 09:14.060
我们但凡是要写一些辨量了

09:14.060 --> 09:16.060
就扔到这个obj当中去

09:16.060 --> 09:18.740
但凡写一些函数方式

09:18.740 --> 09:19.980
比如方式一个tax

09:19.980 --> 09:21.660
它是不是也是一个辨量啊

09:21.660 --> 09:22.140
对不对

09:22.140 --> 09:24.220
只不是用方式声明出来的而已

09:24.220 --> 09:24.740
我们呢

09:24.740 --> 09:29.740
也把它扔到这样的一个对象当中去

09:29.740 --> 09:33.900
也说一切我们全都写在对象里面去

09:33.940 --> 09:36.220
这个呢就叫做用对象说辨辨量

09:36.220 --> 09:37.340
那这样一下子

09:37.340 --> 09:39.100
咱们这一个js文件

09:39.100 --> 09:42.620
它的整体的一个全决辨量就少了很多了

09:42.620 --> 09:44.540
代码冲突的风险就会变低

09:44.540 --> 09:45.580
那变低了之后呢

09:45.580 --> 09:47.820
就可能不会出现这样那样的一些bug了

09:47.820 --> 09:49.180
但是它无可避免的

09:49.180 --> 09:51.340
还是会有一些冲突存在

09:51.340 --> 09:53.540
那如果说一旦发生了冲突

09:53.540 --> 09:56.380
那么整块的这个代码都会失效

09:56.380 --> 09:58.620
那你可能就会很快的定位到这样

09:58.620 --> 09:59.500
你一个错误了

09:59.500 --> 10:00.460
一下就意识到啊

10:00.460 --> 10:02.020
可能是名字有问题

10:02.020 --> 10:02.460
对吧

10:02.460 --> 10:03.980
那包括说未来啊

10:03.980 --> 10:05.500
你们先这样去写

10:05.500 --> 10:05.980
未来呢

10:05.980 --> 10:09.780
我们可以用这样的一个利益质运喊数啊

10:09.780 --> 10:10.380
放到里面

10:10.380 --> 10:11.140
或者说以后呢

10:11.140 --> 10:13.340
用魔幻画这样的一种方式去开发

10:13.340 --> 10:16.220
就不用再去利用这种形式去开发了

10:16.220 --> 10:19.620
但是这种形式比较适用于现在的你们

10:19.620 --> 10:21.100
你们听完这个课之后

10:21.100 --> 10:23.020
就去写一些项目的时候

10:23.020 --> 10:25.060
就尝试着用这种单对

10:25.060 --> 10:28.020
用这个对象说辨辨量这种方式去写代码

10:28.020 --> 10:29.580
用这种方式写起来的话呢

10:29.580 --> 10:31.940
整个的一个代码的一个风格

10:31.940 --> 10:33.140
会更优雅一点

10:33.140 --> 10:33.500
然后呢

10:33.500 --> 10:34.500
代码维护起来呢

10:34.500 --> 10:36.060
会更友好一些

10:36.060 --> 10:36.900
换一种方式啊

10:36.900 --> 10:37.940
不要像以前那样

10:37.940 --> 10:39.020
零零散散的

10:39.020 --> 10:40.300
这是一块那一块的

10:40.300 --> 10:41.580
咱们都有组织的

10:41.580 --> 10:43.980
全都扔到这个大框里面

10:43.980 --> 10:46.340
一起去进行管理

10:46.340 --> 10:48.260
ok好了

10:48.260 --> 10:48.820
那好

10:48.820 --> 10:49.780
那咱们现在呢

10:49.780 --> 10:50.820
来握一个

10:50.820 --> 10:54.300
跟我们这一整个功能

10:54.300 --> 10:56.020
有关的一个名字

10:56.020 --> 10:57.380
因为我们要去生命一个辨量嘛

10:57.380 --> 10:58.820
生命一个这样的一个对象

10:58.820 --> 10:59.820
那我给他起个名字

10:59.820 --> 11:00.980
叫做Bur的

11:00.980 --> 11:02.260
写的不就是个小鸟嘛

11:02.260 --> 11:03.860
所以名字就叫Bur的

11:03.860 --> 11:05.500
我们起名字一定要语化

11:05.500 --> 11:06.500
别整个A整个B

11:06.500 --> 11:07.220
整个C的

11:07.220 --> 11:07.700
到最后呢

11:07.700 --> 11:08.980
不知道它是干嘛的了

11:08.980 --> 11:10.420
ok命名啊

11:10.420 --> 11:12.100
这样的一个对象了之后

11:12.100 --> 11:13.220
我们再去思考一下

11:13.220 --> 11:15.140
整个项目的一个逻辑

11:15.140 --> 11:16.060
在整个项目当中

11:16.060 --> 11:17.740
我们要去做什么呀

11:17.740 --> 11:18.700
要去做什么

11:18.700 --> 11:20.020
现在能够想到的是

11:20.020 --> 11:20.660
哎

11:20.660 --> 11:21.980
我现在好像应该

11:21.980 --> 11:23.820
先把这个功能给完成

11:23.820 --> 11:25.540
我要让小鸟去蹦的

11:25.540 --> 11:27.140
让它去变大变小

11:27.140 --> 11:28.420
让天空去移动

11:28.420 --> 11:29.340
那我们要做的

11:29.380 --> 11:30.940
是不是就是动画了

11:30.940 --> 11:31.580
对不对

11:31.580 --> 11:32.700
要写的是动画

11:32.700 --> 11:33.180
ok

11:33.180 --> 11:34.500
这是我们想到的

11:34.500 --> 11:36.260
第一个要去做的事情

11:36.260 --> 11:38.220
那么我们就可以

11:38.220 --> 11:40.340
来写一个函数

11:40.340 --> 11:41.820
叫做animate

11:41.820 --> 11:43.580
在这个函数当中

11:43.580 --> 11:48.180
集中的去管理所有的动画函数

11:49.820 --> 11:51.380
管理所有动画函数

11:51.380 --> 11:53.740
为什么要这样去管理呀

11:53.740 --> 11:55.180
我们要去分类呀

11:55.180 --> 11:55.900
你想想

11:55.900 --> 11:57.380
你家的那个书架

11:57.380 --> 11:58.180
我不知道你们愿意

11:58.180 --> 11:59.340
愿意愿意看书

11:59.340 --> 12:01.140
假如说你很愿意看书

12:01.140 --> 12:03.700
你可能要去看这个文学类的

12:03.700 --> 12:05.620
要去看这个心理类的

12:05.620 --> 12:07.900
或者要去看这个国学类的

12:07.900 --> 12:09.300
那你是不是分个区

12:09.300 --> 12:10.660
这一块是心理类的

12:10.660 --> 12:11.700
那一块是文学类的

12:11.700 --> 12:13.300
然后这一块是国学类的

12:13.300 --> 12:14.740
要分分开这样的去

12:14.740 --> 12:15.460
你好找

12:15.460 --> 12:16.100
是不是

12:16.100 --> 12:18.220
那放到咱们的这样的一个代码上

12:18.220 --> 12:19.580
我们也要去分区

12:19.580 --> 12:20.740
这样去进行管理

12:20.740 --> 12:22.860
你大凡是干的是同一样事情

12:22.860 --> 12:24.820
我们就多把它放到一个函数当中

12:24.820 --> 12:26.060
去进行管理

12:26.060 --> 12:28.060
因为你想我们的动画有很多

12:28.060 --> 12:29.500
小鸟棒是一个动画

12:29.500 --> 12:31.020
天空移动是一个动画

12:31.020 --> 12:33.180
文字放大素小是一个动画

12:33.180 --> 12:36.060
那这样我们就需要来写三个函数了

12:36.060 --> 12:37.380
需要来写三个函数

12:37.380 --> 12:38.380
为什么要写三个函数

12:38.380 --> 12:39.860
而不是一个函数呢

12:39.860 --> 12:41.060
从现在开始

12:41.060 --> 12:45.540
要在心里默念单一职责原则

12:45.540 --> 12:48.500
那什么是单一职责原则

12:48.500 --> 12:49.780
就是一个函数

12:49.780 --> 12:51.180
它只干一件事情

12:51.180 --> 12:53.620
你别恰恰地管别人的事情

12:53.660 --> 12:55.620
你只需专注于你自己的

12:55.620 --> 12:56.900
这样的工作就好

12:56.900 --> 12:58.220
所以说在咱们的

12:58.220 --> 13:00.580
这样一个代码的一个编程当中

13:00.580 --> 13:01.620
无论是前端

13:01.620 --> 13:02.420
还是扎瓦

13:02.420 --> 13:03.860
还是C还是拍子

13:03.860 --> 13:05.660
咱们都单一职责原则

13:05.660 --> 13:08.260
一个函数它只管一件事情

13:08.260 --> 13:09.100
清楚了吧

13:09.100 --> 13:10.940
所以说咱们现在要怎么办

13:10.940 --> 13:13.420
大家写一个animate

13:13.420 --> 13:14.940
一个函数管动画

13:14.940 --> 13:15.500
那同样的

13:15.500 --> 13:17.220
它底下有很多小的动画

13:17.220 --> 13:20.060
比如说我要去让这个小鸟蹦的

13:20.060 --> 13:21.020
那小点蹦的呢

13:21.020 --> 13:23.820
几个名字就叫做Burr的仗筹

13:23.820 --> 13:25.100
这个Burr的仗筹

13:25.100 --> 13:27.460
它只去管小鸟蹦

13:27.460 --> 13:28.700
只去管小鸟蹦

13:28.700 --> 13:30.380
接着还要有什么

13:30.380 --> 13:32.220
还有有天空移动

13:32.220 --> 13:33.340
那天空移动呢

13:33.340 --> 13:35.460
再来个名字叫做Skym

13:36.900 --> 13:38.300
是一个函数

13:38.300 --> 13:39.260
还有一个什么

13:39.260 --> 13:41.100
还有一个开始文字

13:41.100 --> 13:42.500
它要有一个bump的

13:42.500 --> 13:44.620
放大缩小的这样一个效果

13:44.620 --> 13:46.660
其实还有一个动画

13:46.660 --> 13:48.300
还有一个动画

13:48.300 --> 13:49.620
小鸟要飞吧

13:49.620 --> 13:51.300
它要煽动翅膀

13:51.300 --> 13:52.100
所以说这块呢

13:52.100 --> 13:55.740
咱们也是来写一个Burr的Fly

13:55.740 --> 13:57.060
它专门去管理

13:57.060 --> 13:58.780
让小鸟去飞的

13:58.780 --> 14:00.100
那这些函数呢

14:00.100 --> 14:02.540
都是去执行动画的

14:02.540 --> 14:06.340
那我们都要让它在这个Skym里面去

14:06.340 --> 14:10.020
在这个animate里面去进行集中的执行

14:10.020 --> 14:11.060
那么应该怎么办

14:11.060 --> 14:12.540
去调用Burr的点

14:12.540 --> 14:14.540
Skym执行

14:14.540 --> 14:16.620
去调用Burr的点

14:16.620 --> 14:19.340
Burr的jump让它去执行

14:19.340 --> 14:22.540
接着再来调用Burr的点

14:22.540 --> 14:23.900
Burr的Fly

14:23.900 --> 14:24.900
OK执行

14:24.900 --> 14:29.060
那还有一个Burr的当中的Start

14:29.060 --> 14:31.020
bump的去让它执行

14:31.020 --> 14:34.580
我们要写一个这样子形式的一个函数

14:34.580 --> 14:37.140
让它去集中的执行在这里面

14:37.140 --> 14:39.380
让它集中的在执行里面

14:39.380 --> 14:41.540
这个注释我刻下给你们写吧

14:41.540 --> 14:42.820
刻下给你们写

14:42.820 --> 14:45.660
刻上的话咱没有那么多时间

14:45.660 --> 14:46.260
OK

14:46.260 --> 14:47.100
这是回调吗

14:47.100 --> 14:49.060
这当然不是回调了

14:49.100 --> 14:50.580
这当然不是回调了

14:50.580 --> 14:51.180
它什么

14:51.180 --> 14:53.980
它只是一个函数调用而已

14:53.980 --> 14:54.860
只是一个函数调用

14:54.860 --> 14:57.620
你看看animate它是一个函数

14:57.620 --> 14:58.220
对不对

14:58.220 --> 15:01.540
我在这个函数当中要让底下的多个函数

15:01.540 --> 15:04.020
去进行一下执行

15:04.020 --> 15:05.260
这个不算是回调

15:05.260 --> 15:06.180
回调是什么

15:06.180 --> 15:09.340
是你给一个函数传递了一个函数参数

15:09.340 --> 15:13.860
让这个函数参数在这个函数体里面去执行而已

15:13.860 --> 15:16.260
OK

15:16.260 --> 15:17.300
OK好了

15:17.300 --> 15:17.780
然后呢

15:17.780 --> 15:21.500
我们想要让这个animate去进行一下执行

15:21.500 --> 15:22.860
应该怎么办呀

15:22.860 --> 15:25.620
是不是就得去调用一下谁了呀

15:25.620 --> 15:26.780
调用一下

15:26.780 --> 15:30.540
Burr.animate去执行了

15:30.540 --> 15:31.500
对不对

15:31.500 --> 15:32.020
这块呢

15:32.020 --> 15:35.420
它就让它们全部的都能过去执行一下了

15:35.420 --> 15:35.980
因为你看

15:35.980 --> 15:36.740
你顺一下

15:36.740 --> 15:39.460
我首先让Burr的当中的animate去执行了

15:39.460 --> 15:42.580
这个函数里面所有的这个逻辑是不是就执行了呀

15:42.580 --> 15:45.220
接着让它这四个函数又执行了

15:45.220 --> 15:49.820
所以当时当前我们写的五个函数就全都执行了

15:49.820 --> 15:51.140
就全都执行了

15:51.140 --> 15:51.700
那现在呢

15:51.700 --> 15:52.780
有一个问题

15:52.780 --> 15:54.060
问题是什么

15:54.060 --> 15:56.460
就我们在这里面用的是Burr的

15:56.460 --> 15:58.620
用的是Burr的

15:58.620 --> 16:01.300
Burr的是不是有可能会发生冲突啊

16:01.300 --> 16:03.220
万一好死不死

16:03.220 --> 16:05.700
另外一个同事天天跟我对着干

16:05.700 --> 16:06.740
他命了个名

16:06.740 --> 16:07.580
也叫Burr的

16:07.580 --> 16:08.420
怎么办

16:08.420 --> 16:09.420
又冲突了

16:09.420 --> 16:09.980
所以说呢

16:09.980 --> 16:11.100
我们一旦冲突了

16:11.100 --> 16:11.860
不是你改名

16:11.860 --> 16:12.540
就是他改名

16:12.540 --> 16:13.860
你又干不过他

16:13.860 --> 16:15.340
那这个时候你免给其难

16:15.340 --> 16:17.260
那改了一名叫做Burr的1

16:17.260 --> 16:19.220
或者就叫做Burr的Fly

16:19.220 --> 16:19.500
是吧

16:19.500 --> 16:20.300
换了个名

16:20.300 --> 16:21.900
那你一旦换名了

16:21.900 --> 16:22.780
要怎么办呀

16:22.780 --> 16:24.220
你这里面所有的Burr的

16:24.220 --> 16:26.780
是不是都得进行一下更改呀

16:26.780 --> 16:28.900
那是不是就很麻烦了呀

16:28.900 --> 16:29.780
是不是很麻烦

16:29.780 --> 16:31.660
你就很难定位到我到底在哪

16:31.660 --> 16:34.220
用了这个Burr的点了

16:34.220 --> 16:35.500
所以说咱们这里面呢

16:35.500 --> 16:36.980
就换一种形式

16:36.980 --> 16:38.060
我们用什么呢

16:38.060 --> 16:39.420
我们用Dais

16:39.420 --> 16:41.180
用Dais

16:41.180 --> 16:43.060
Dais是谁

16:43.060 --> 16:45.460
Dais哈

16:45.460 --> 16:47.940
你现在先记住一点

16:47.940 --> 16:52.980
我当前在某一个函数当中用了的Dais

16:52.980 --> 16:54.340
这个函数

16:54.340 --> 16:58.100
如果是通过某一个对象点的形式

16:58.100 --> 16:59.340
去调用的话

16:59.340 --> 17:01.340
那么这个函数内部

17:01.340 --> 17:05.740
它的Dais指的就是那个对象

17:05.740 --> 17:07.100
就是指的那个对象

17:07.100 --> 17:07.940
那你看哈

17:07.940 --> 17:10.620
当前Dais是在哪里去使用的呀

17:10.620 --> 17:13.020
在animate这个函数里面吧

17:13.140 --> 17:15.660
那animate是通过谁去调用的呀

17:15.660 --> 17:17.980
通过Burr的去调用的

17:17.980 --> 17:18.980
所以说呢

17:18.980 --> 17:25.500
animate这个函数里面的Dais指的就是Burr的

17:25.500 --> 17:26.420
指的就是Burr的

17:26.420 --> 17:30.660
无论你后面怎么样去对Burr的去进行更改

17:30.660 --> 17:33.580
它都是指的外面的这个对象

17:33.580 --> 17:34.500
清楚了吧

17:34.500 --> 17:37.260
所以我们就没有必要那样子去写了啊

17:37.260 --> 17:38.140
好了

17:38.140 --> 17:40.060
这是关于我们的动画哈

17:40.060 --> 17:42.380
那再去写动画之前

17:42.380 --> 17:45.100
我们再去想一下

17:45.100 --> 17:47.500
可是不是函数呀

17:47.500 --> 17:49.460
谁不是函数呀

17:49.460 --> 17:50.300
转身同学

17:50.300 --> 17:52.220
谁不是函数

17:52.220 --> 17:52.820
哎呦

17:52.820 --> 17:55.300
New是另外的一种形式

17:55.300 --> 17:57.580
New是另外的一种形式

17:57.580 --> 18:00.700
我们去找判断Dais的时候

18:00.700 --> 18:02.740
有四种判断条件

18:02.740 --> 18:06.500
第一种是看是否是通过New来进行执行的

18:06.500 --> 18:08.740
如果是通过New来执行的话

18:08.740 --> 18:10.380
那么Dais指的是

18:10.420 --> 18:14.740
用New这个购赃函数创建出来的那个上下文对象

18:14.740 --> 18:15.860
这是第一种

18:15.860 --> 18:19.380
第二种是看是否是进行了

18:19.380 --> 18:21.020
让你一个显示绑定

18:21.020 --> 18:23.020
用Cart,Apply或者是办的

18:23.020 --> 18:27.940
去重新的对他们的Dais进行了一下更改

18:27.940 --> 18:29.900
是另外一种显示绑定

18:29.900 --> 18:31.460
第三种就是看

18:31.460 --> 18:35.780
它是否是通过某一个对象去进行调用的

18:35.780 --> 18:38.940
如果说是通过某一个对象去进行调用的话

18:38.940 --> 18:42.340
那么这个函数内部的Dais指的就是

18:42.340 --> 18:44.580
调用它的那个对象

18:44.580 --> 18:45.060
ok

18:45.060 --> 18:46.140
那第四种呢

18:46.140 --> 18:49.300
就是这个函数干不愣的自己去执行了

18:49.300 --> 18:51.820
没有通过任何的一种方式去调用它

18:51.820 --> 18:52.820
那此时呢

18:52.820 --> 18:55.780
它里面Dais指的就是全局对象Window

18:55.780 --> 18:58.860
那如果说是在这样一个严格模式下的话

18:58.860 --> 19:00.820
Dais的值就不是Window了

19:00.820 --> 19:02.100
就是Andy Fandler了

19:02.100 --> 19:05.420
有这么四种判断的规则

19:05.420 --> 19:07.740
咱们现在使的这是第三种

19:07.740 --> 19:08.740
是第三种

19:08.740 --> 19:11.500
利用对象去调用一个函数

19:11.500 --> 19:12.620
清楚了吧

19:12.620 --> 19:13.900
清楚了吧

19:13.900 --> 19:14.420
ok

19:14.420 --> 19:14.980
好了

19:14.980 --> 19:18.140
那这个咱们过了之后

19:18.140 --> 19:18.540
多少啊

19:18.540 --> 19:20.100
这个转身同学

19:20.100 --> 19:20.940
转身同学

19:20.940 --> 19:22.020
我课下

19:22.020 --> 19:26.500
我会给你们发一个关于Dais判断的一个文章

19:26.500 --> 19:28.100
我自己写的

19:28.100 --> 19:29.140
课下会发给你们

19:29.140 --> 19:30.580
如果说我忘记了的话

19:30.580 --> 19:32.820
记得在群里面提醒我一下

19:32.820 --> 19:33.940
因为我事太多了

19:33.940 --> 19:34.780
可能会忘

19:34.780 --> 19:35.420
可能会忘

19:35.420 --> 19:36.100
如果说忘的话

19:36.100 --> 19:37.380
就提醒我一下

19:37.380 --> 19:38.860
ok

19:38.860 --> 19:39.820
好了

19:39.820 --> 19:42.180
那咱们这animate执行说完了

19:42.180 --> 19:42.900
但是

19:42.900 --> 19:44.060
我们想一下

19:44.060 --> 19:48.340
再去执行一下animate之前

19:48.340 --> 19:48.660
对

19:48.660 --> 19:49.620
语确上

19:49.620 --> 19:51.860
在执行animate之前

19:51.860 --> 19:55.980
我们是不是得拿到所对应的那样的一些元素啊

19:55.980 --> 19:56.420
你想一下

19:56.420 --> 19:57.220
是不是这样的

19:57.220 --> 19:57.700
你想

19:57.700 --> 19:59.460
你让小鸟去蹦的

19:59.460 --> 20:02.500
那你是不是得先把这个小鸟的元素给拿到啊

20:02.500 --> 20:03.980
你想让天空去移动

20:03.980 --> 20:06.780
那你是不是得先去把这个天空元素给拿到啊

20:06.820 --> 20:09.780
你想让这个文字有一个放大缩小的张定动效

20:09.780 --> 20:12.540
你是不是得把这个元素给拿到啊

20:12.540 --> 20:14.220
是不是得把它给拿到啊

20:14.220 --> 20:15.220
对不对

20:15.220 --> 20:15.700
是吧

20:15.700 --> 20:19.260
所以咱们在执行动画之前

20:19.260 --> 20:20.900
再来干一件事情

20:20.900 --> 20:23.340
进行初始化数据

20:23.340 --> 20:26.140
我们把所有要去拿到的数据

20:26.140 --> 20:31.980
都放到animate data这个函数当中来进行集中的管理

20:31.980 --> 20:32.380
ok

20:32.380 --> 20:36.120
来一个animate data

20:36.120 --> 20:39.360
比如说我想要去获取到最外层的复原素

20:39.360 --> 20:41.440
那么我来were一个el

20:41.440 --> 20:45.440
懂于document.getElementById

20:45.440 --> 20:47.880
选中一个id为game的元素

20:47.880 --> 20:50.400
那这个元素我是不就能够拿到了呀

20:50.400 --> 20:53.360
我来console.log一个el

20:53.360 --> 20:54.000
那好

20:54.000 --> 20:56.000
那我想要去让它执行的话

20:56.000 --> 20:57.800
我是不是得让init去执行

20:57.800 --> 20:59.440
initdata去执行一下啊

20:59.440 --> 21:00.080
所以说呢

21:00.080 --> 21:00.920
我在这块啊

21:01.760 --> 21:02.040
诶

21:03.440 --> 21:06.600
burd.initdata一下

21:06.600 --> 21:07.720
让它去执行

21:07.720 --> 21:10.280
我们来打开控制台来丑一丑啊

21:12.160 --> 21:13.000
来丑一丑

21:13.000 --> 21:14.400
刷新一下

21:14.400 --> 21:14.680
诶

21:15.600 --> 21:16.400
刷新刷新刷新

21:19.740 --> 21:20.780
没有啊

21:20.780 --> 21:21.540
为什么没有呢

21:21.540 --> 21:22.780
没有去引入啊

21:22.780 --> 21:24.220
这就很尴尬了

21:24.220 --> 21:25.740
一般我都习惯提前引入

21:25.740 --> 21:26.780
但是这次不一样了

21:26.780 --> 21:28.300
来引入一下

21:28.300 --> 21:28.900
看一下

21:28.900 --> 21:30.340
这时候打印出来了呀

21:30.340 --> 21:31.780
这样的一个复原素

21:31.780 --> 21:32.220
对不对

21:32.220 --> 21:33.420
打印出这样的复原素了

21:33.420 --> 21:35.700
我们就能够拿到它了

21:35.700 --> 21:36.740
但是啊

21:36.740 --> 21:37.820
想一下

21:37.820 --> 21:41.900
我们目前是在initdata这个函数里面

21:41.900 --> 21:45.020
拿到了el复原素

21:45.020 --> 21:47.740
但是我想要在SkyMu里面

21:47.740 --> 21:50.140
对这个复原素去进行操作

21:50.140 --> 21:51.700
让它移动

21:51.700 --> 21:52.940
那么应该怎么办

21:53.980 --> 21:55.220
应该怎么办

21:55.220 --> 21:57.340
现在能够去拿到吗

21:57.340 --> 21:58.060
不能

21:58.060 --> 21:59.220
为什么不能呢

21:59.220 --> 22:00.420
为什么不能呢

22:00.420 --> 22:01.740
因为相当于现在

22:01.740 --> 22:03.260
它在两个房间里面

22:04.260 --> 22:04.740
这样

22:07.900 --> 22:08.860
有两个房间

22:08.860 --> 22:11.380
一个房间叫做initdata

22:11.380 --> 22:13.300
一个房间叫做SkyMu

22:13.300 --> 22:16.100
他们不互相去交流

22:16.100 --> 22:18.340
不互相去传递信息

22:18.340 --> 22:21.180
他们两个是两个不同的世界

22:21.180 --> 22:22.660
也就是我的

22:22.660 --> 22:25.700
我的手伸不到你的这个屋子里面来

22:25.700 --> 22:28.580
你的胳膊也别想伸到我的屋子里面来

22:28.580 --> 22:30.020
他们是不互相交流的

22:30.020 --> 22:31.060
那么你看看

22:31.100 --> 22:32.900
在这个房间当中

22:32.900 --> 22:34.020
有一个苹果

22:34.020 --> 22:35.380
这个里面能拿到吗

22:35.380 --> 22:36.780
就拿不到了

22:36.780 --> 22:37.420
拿不到了

22:37.420 --> 22:38.980
那所以说怎么办呢

22:38.980 --> 22:41.260
我们是不是应该把这个苹果给磨出来

22:41.260 --> 22:42.820
因为这两个房间

22:42.820 --> 22:45.660
都可以直接拿到他们外层

22:45.660 --> 22:49.300
他们所在的这个大房间里面的一切的东西

22:49.300 --> 22:52.420
那若是我一旦把它挪来

22:52.420 --> 22:53.580
放到这了

22:53.580 --> 22:54.620
放到这了

22:54.620 --> 22:58.820
那是不是这个房间就可以拿到这样的一个变量了呀

22:58.820 --> 23:00.300
是不是这样的一个道理

23:00.300 --> 23:00.940
你看看

23:00.940 --> 23:02.940
咱们现在是两个纵域

23:02.940 --> 23:03.660
Unita

23:03.660 --> 23:05.300
Unita Data是一个纵域

23:05.300 --> 23:06.500
是一个小房间

23:06.500 --> 23:08.140
Scam是一个纵域

23:08.140 --> 23:09.020
一个小房间

23:09.020 --> 23:11.500
他们之间不互相同心

23:11.500 --> 23:15.980
怎么样都不能够去拿到对方的这个房间里面的一个变量

23:15.980 --> 23:19.620
但是如果说我把这个变量放到他们的外面

23:19.620 --> 23:20.780
我把它挂到谁呢

23:20.780 --> 23:23.380
多挂到这个Bird对象身上的话

23:23.380 --> 23:25.380
那我是不是都能够去拿到呀

23:25.380 --> 23:27.220
因为我们可以非常轻易的

23:27.220 --> 23:29.980
在这些函数当中去拿到谁呀

23:30.020 --> 23:31.300
拿到Dance

23:31.300 --> 23:31.820
对不对

23:31.820 --> 23:32.540
拿到Dance

23:32.540 --> 23:35.340
那Dance不就指的是这个Bird吗

23:35.340 --> 23:36.580
如果说能够拿到Bird

23:36.580 --> 23:38.300
再去拿到他身上的一个属性

23:38.300 --> 23:39.780
是不是就很简单了

23:39.780 --> 23:40.140
所以呢

23:40.140 --> 23:42.420
咱们这里面就不直接去用帽

23:42.420 --> 23:43.980
去声明这个变量了

23:43.980 --> 23:45.660
而是全部的

23:45.660 --> 23:48.140
把这样的一些变量挂到谁呀

23:48.140 --> 23:50.780
挂到Bird的身上就可以了

23:50.780 --> 23:51.580
那你看看

23:51.580 --> 23:55.100
我现在在这个SkyMu里面去console一下

23:55.100 --> 23:56.340
console一个

23:56.340 --> 23:57.260
Dance

23:57.260 --> 23:58.420
EL

23:58.420 --> 23:59.260
咱们来看一下

23:59.260 --> 24:00.060
看这

24:00.060 --> 24:04.820
index.js的第28号打印出来这样的复原素

24:04.820 --> 24:07.100
那咱们是不是在第28号打印的呀

24:07.100 --> 24:08.060
是不是在这

24:08.060 --> 24:10.220
这是不能够拿出来了呀

24:10.220 --> 24:10.780
对不对

24:10.780 --> 24:11.660
就拿出来了

24:11.660 --> 24:12.660
好嘞

24:12.660 --> 24:13.180
OK

24:13.180 --> 24:15.500
这个就是咱们要去思考的一切

24:15.500 --> 24:17.980
初始化要去执行那些函数

24:17.980 --> 24:20.740
但是现在仍然还有一个问题

24:20.740 --> 24:21.620
还有一个问题

24:21.620 --> 24:22.940
问题是什么

24:22.940 --> 24:24.580
你现在要在初始的时候

24:24.580 --> 24:26.220
执行的函数有两个

24:26.220 --> 24:27.180
哎呀有两个

24:27.180 --> 24:28.620
对于我们程学院来讲

24:28.620 --> 24:30.060
这就太多了

24:30.060 --> 24:30.980
多在哪了呢

24:30.980 --> 24:33.300
假如说我想要在另外的一个地方

24:33.300 --> 24:35.380
仍然去使用一下这个Bird的

24:35.380 --> 24:37.620
这个整体的一个项目怎么办

24:37.620 --> 24:38.820
他的功能我全都要

24:38.820 --> 24:40.620
我放到另外的一个音面当中去

24:40.620 --> 24:43.220
那是不是还得再去播的点音频的data

24:43.220 --> 24:45.100
播的点adimate去执行一下呀

24:45.100 --> 24:46.260
很麻烦

24:46.260 --> 24:47.140
那怎么办呢

24:47.140 --> 24:49.180
为了不让未来去麻烦

24:49.180 --> 24:50.580
咱们在一开始的时候

24:50.580 --> 24:52.660
就稍微先麻烦一点

24:52.660 --> 24:53.300
我们呢

24:53.300 --> 24:55.060
来写一个音力的函数

24:55.060 --> 24:57.380
这个叫做初始化函数

24:57.420 --> 24:58.780
叫做初始化函数

24:58.780 --> 24:59.340
来写一下

25:01.060 --> 25:02.060
初始化函数

25:02.060 --> 25:02.580
ok

25:02.580 --> 25:03.700
它是干嘛的呢

25:03.700 --> 25:07.540
它就是让所有在第一次要去执行的

25:07.540 --> 25:08.740
一切的函数

25:08.740 --> 25:11.940
都在这个函数内部去进行一下执行

25:11.940 --> 25:12.940
就比如说哈

25:12.940 --> 25:14.660
你想要开电脑

25:14.660 --> 25:16.700
那你按一下开关键就可以了

25:16.700 --> 25:18.660
你不需要再去按其他键子

25:18.660 --> 25:19.860
让这个屏幕亮

25:19.860 --> 25:21.180
让某一个软件起来

25:21.180 --> 25:21.940
不需要了

25:21.940 --> 25:22.820
这个电脑

25:22.820 --> 25:25.140
在当你按下开关键的那一刻

25:25.140 --> 25:26.820
就自动的帮你去执行了

25:26.820 --> 25:28.420
那我们这个音力的函数

25:28.420 --> 25:31.100
就相当于那个电脑的开关键

25:31.100 --> 25:32.980
我们只要在外面

25:32.980 --> 25:35.340
直接调用了board.init

25:35.340 --> 25:38.020
就证明它让里面的函数

25:38.020 --> 25:40.500
都进行了一下启动就可以了

25:40.500 --> 25:41.900
所以咱们就这换一下哈

25:41.900 --> 25:42.660
来一个

25:42.660 --> 25:45.740
this.initdata执行

25:45.740 --> 25:48.340
this.animate执行

25:48.340 --> 25:50.660
我们在外面去调用谁呀

25:50.660 --> 25:54.340
去调用board.init就可以了

25:54.340 --> 25:54.780
ok

25:54.780 --> 25:55.900
那咱们最好呢

25:55.940 --> 25:58.220
是把这层调用放到

25:58.220 --> 26:00.940
HTML里面来做

26:00.940 --> 26:02.220
那其实呢

26:02.220 --> 26:02.740
其实哈

26:02.740 --> 26:04.180
大家思路想一下哈

26:04.180 --> 26:05.340
就是我们应该哈

26:05.340 --> 26:08.060
在init函数执行的时候

26:08.060 --> 26:10.900
在这个里面来告诉我们整体的

26:10.900 --> 26:12.060
这个board的区域

26:12.060 --> 26:14.500
比如board的这个功能复原素是谁

26:14.500 --> 26:16.300
而不是把这个选择

26:16.300 --> 26:19.100
复原素的这部操作写死在这个里面

26:19.100 --> 26:19.900
为什么呢

26:19.900 --> 26:22.260
因为可能你最终去写这个功能的时候

26:22.260 --> 26:22.980
id变了

26:22.980 --> 26:24.020
它不叫game了

26:24.020 --> 26:25.780
那如果说一旦它不叫game了

26:25.780 --> 26:27.700
我们这块就全都失效了

26:27.700 --> 26:28.420
所以这部呢

26:28.420 --> 26:29.100
最好哈

26:29.100 --> 26:30.660
是由外界传递过去

26:30.660 --> 26:31.460
那咱们今天呢

26:31.460 --> 26:32.620
就先补这么麻烦了

26:32.620 --> 26:33.660
就补这么去做了

26:33.660 --> 26:36.300
咱们直接在这里面去选择就可以了哈

26:36.300 --> 26:37.660
你们先把这个搞懂了

26:37.660 --> 26:38.780
之后的再说啊

26:38.780 --> 26:39.780
之后的再说

26:39.780 --> 26:40.780
好了

26:40.780 --> 26:41.340
ok

26:41.340 --> 26:43.220
那拿到了这个EL之后

26:43.220 --> 26:44.780
咱们就开始来写吧

26:44.780 --> 26:45.540
写谁呀

26:45.540 --> 26:46.980
写一下SkyM

26:46.980 --> 26:49.260
怎么能够让天空去移动

26:49.260 --> 26:50.300
你想一下哈

26:50.300 --> 26:51.380
天空移动

26:51.380 --> 26:53.820
它是不是得是一个动画呀

26:53.820 --> 26:55.220
那动画怎么能够

26:55.220 --> 26:57.460
通过js来写出来呢

26:57.460 --> 27:00.720
怎么通过js来写

27:00.720 --> 27:03.560
它是不是隔一会儿

27:03.560 --> 27:04.480
这个划一下

27:04.480 --> 27:05.640
隔一会儿划一下

27:05.640 --> 27:06.920
然后连在一起

27:06.920 --> 27:09.080
因为我们人是不是有一个视觉的

27:09.080 --> 27:11.200
一个误差呀

27:11.200 --> 27:12.520
它可能隔一会儿动一下

27:12.520 --> 27:13.320
隔一会儿动一下

27:13.320 --> 27:16.000
但是由于它动的速度很快

27:16.000 --> 27:17.840
我们看起来就是连的

27:17.840 --> 27:19.480
比如说你打开那个小人书

27:19.480 --> 27:20.920
连换画啪一番

27:20.920 --> 27:22.520
它就是一个呈现在我们眼前

27:22.520 --> 27:23.440
它就是一个动画

27:23.440 --> 27:24.320
那实际上呢

27:24.320 --> 27:26.040
它就是一张一张纸

27:26.040 --> 27:26.440
对不对

27:26.440 --> 27:27.520
就是一张一张纸

27:27.520 --> 27:28.040
OK

27:28.040 --> 27:30.480
所以说这块还咱不用什么轮波图

27:30.480 --> 27:33.040
就用定时器就可以搞定

27:33.040 --> 27:34.880
用定时器就可以搞定喊

27:34.880 --> 27:35.560
OK

27:35.560 --> 27:37.280
那定时器写在那儿

27:37.280 --> 27:38.840
我们写在SkyM里面

27:38.840 --> 27:40.160
来个赛克英特网

27:40.160 --> 27:40.800
我们呢

27:40.800 --> 27:42.720
想让它隔多长时间

27:42.720 --> 27:44.720
去进行一下移动呢

27:44.720 --> 27:47.520
赛克英特网这个纸给多少合适呢

27:47.520 --> 27:48.600
我给一个30

27:48.600 --> 27:50.560
我让它30毫秒

27:50.560 --> 27:52.040
每隔30毫秒

27:52.040 --> 27:53.320
让它动弹一下

27:53.320 --> 27:54.920
那怎么去动

27:54.920 --> 27:56.640
怎么去动

27:56.640 --> 27:58.960
怎么能够让这个图片

27:58.960 --> 28:00.480
有个动的一个效果呢

28:00.480 --> 28:02.440
那这图片是咋设置的呀

28:02.440 --> 28:03.400
是咋设置的

28:04.880 --> 28:05.600
咋设置的

28:07.160 --> 28:08.680
是不是用啥

28:08.680 --> 28:10.080
背景图片吧

28:10.080 --> 28:10.720
对不对

28:10.720 --> 28:12.720
那背景图片

28:12.720 --> 28:15.880
你是不是可以给它设置Position啊

28:15.880 --> 28:17.640
是不是可以给它设置Position啊

28:17.640 --> 28:18.960
如果这块来加一个

28:18.960 --> 28:22.800
BackgroundPositionX

28:22.800 --> 28:24.720
它的值给它一个零

28:24.720 --> 28:26.800
然后不断的

28:26.800 --> 28:27.360
看这哈

28:27.360 --> 28:28.720
我换一个方向

28:28.720 --> 28:30.640
放到这里来

28:30.640 --> 28:31.120
OK

28:31.120 --> 28:31.600
给一个

28:33.560 --> 28:34.920
零PX

28:34.920 --> 28:35.600
PX

28:35.600 --> 28:35.920
OK

28:37.080 --> 28:37.640
看着哈

28:40.260 --> 28:40.860
怎么没了呢

28:40.860 --> 28:41.500
稍等一下

28:43.420 --> 28:44.260
开心一下

28:44.260 --> 28:45.420
再从来哈

28:45.420 --> 28:48.580
我们这块来调一下背景图片的一个位置

28:48.580 --> 28:49.820
它就可以了

28:49.820 --> 28:53.020
BackgroundPositionX

28:53.020 --> 28:55.020
给一个零相速

28:55.020 --> 28:55.740
零相速

28:55.740 --> 28:56.620
它在这哈

28:56.620 --> 28:58.620
接着我们不断去调

28:58.620 --> 28:59.340
看这

28:59.340 --> 29:00.220
看着屏幕

29:00.220 --> 29:00.620
同学们

29:00.620 --> 29:01.420
看着屏幕

29:01.420 --> 29:04.700
随着我这个背景图片位置的一个改变

29:04.700 --> 29:06.540
图片它是不是就在变呀

29:06.540 --> 29:07.420
BackgroundPositionX

29:07.420 --> 29:09.380
是不是就调整图片的位置啊

29:09.380 --> 29:11.420
你只要让它去进行一个更改

29:11.420 --> 29:13.660
那它就会不断的去更改它的位置

29:13.660 --> 29:16.500
以至于有这样一个动画的一个效果

29:16.500 --> 29:16.980
对不对

29:16.980 --> 29:19.380
有这样一个动画的一个效果清楚了吧

29:19.380 --> 29:21.020
所以咱们这块不用什么轮摸图

29:21.020 --> 29:23.100
我只去改定位就可以了

29:23.100 --> 29:24.060
那每一次

29:24.060 --> 29:25.660
在你执行一次定任器

29:25.700 --> 29:28.300
每隔30毫秒的时候

29:28.300 --> 29:31.300
让它去减一个相对的一个数字

29:31.300 --> 29:33.060
是不是就可以了呀

29:33.060 --> 29:33.580
对不对

29:33.580 --> 29:35.540
比如说你每次让它减两相速

29:35.540 --> 29:36.660
每隔30毫秒

29:36.660 --> 29:37.460
减两相速

29:37.460 --> 29:39.420
每隔30毫秒减两相速

29:39.420 --> 29:41.380
那这样是不是就连起来了呀

29:41.380 --> 29:41.900
对不对

29:41.900 --> 29:42.380
ok

29:42.380 --> 29:44.500
那所以呢咱们来写一下

29:44.500 --> 29:45.820
咱们这样

29:45.820 --> 29:47.020
让谁呀

29:47.020 --> 29:48.540
让eL

29:48.540 --> 29:50.060
eL是在哪的呀

29:50.060 --> 29:52.420
在this当中的eL

29:52.420 --> 29:54.860
让它的一个style当中的

29:54.860 --> 29:58.300
background-position-x

29:58.300 --> 30:00.820
每一次执行的时候

30:00.820 --> 30:02.540
都去干嘛呀

30:02.540 --> 30:03.380
都去干嘛

30:03.380 --> 30:05.100
都去减两个

30:05.100 --> 30:06.380
都去减两个

30:06.380 --> 30:08.420
那么减两个的话

30:08.420 --> 30:12.220
我们是不是最好用一个数字来存着它

30:12.220 --> 30:14.580
假如说我们最初始的时候

30:14.580 --> 30:17.380
background-position-x是多少啊

30:17.380 --> 30:18.180
是零

30:18.180 --> 30:20.180
初始的时候是一个零

30:20.180 --> 30:21.860
我先用个辩量来保存着它

30:21.900 --> 30:22.540
来一个

30:22.540 --> 30:24.980
scout-position-x

30:24.980 --> 30:25.500
ok

30:25.500 --> 30:27.260
那每一次执行的时候

30:27.260 --> 30:30.340
我都让this当中的scout-position-x

30:30.340 --> 30:32.620
去减等于一个二

30:32.620 --> 30:34.860
那这样每次是不是就减去一个二了呀

30:34.860 --> 30:37.580
然后最终再将设置好的

30:37.580 --> 30:40.020
减好的这样的一个scout-position-x

30:40.020 --> 30:41.380
设置给谁呀

30:41.380 --> 30:43.940
设置给background-position-x

30:43.940 --> 30:45.540
这样是不是就可以了呀

30:45.540 --> 30:46.860
那这样行了

30:46.860 --> 30:48.220
这样行了

30:48.220 --> 30:50.140
看这一直都在抱错

30:50.140 --> 30:51.340
一直都在抱错

30:51.340 --> 30:51.820
对不对

30:51.820 --> 30:52.780
为什么要抱错

30:52.780 --> 30:54.740
这就涉及到另外一个问题了

30:54.740 --> 30:56.460
我们side-intel mode里面的

30:56.460 --> 30:59.460
function-dase出现了问题

30:59.460 --> 31:01.180
出现了问题

31:01.180 --> 31:02.260
问题在哪

31:02.260 --> 31:03.060
因为什么

31:03.060 --> 31:04.900
来这块给大家来说一下

31:04.900 --> 31:05.580
你看看

31:05.580 --> 31:08.180
假如说我现在来写了一个函数

31:08.180 --> 31:12.140
我给这个函数里面去传递了一个参数cb

31:12.140 --> 31:14.780
这个cb让它去执行

31:14.780 --> 31:18.020
那么请问cb这个毁掉函数

31:18.020 --> 31:20.820
它通过什么方式去调用了

31:20.900 --> 31:23.620
用new了吗

31:23.620 --> 31:24.540
没有

31:24.540 --> 31:24.900
对不对

31:24.900 --> 31:25.660
没有

31:25.660 --> 31:28.380
用call-apply-band了吗

31:28.380 --> 31:29.100
没有

31:29.100 --> 31:29.740
对不对

31:29.740 --> 31:30.380
用什么

31:30.380 --> 31:31.820
用对下去调用了吗

31:31.820 --> 31:32.900
前面有值吗

31:32.900 --> 31:33.580
没有

31:33.580 --> 31:36.420
那就是最后一种默认执行

31:36.420 --> 31:37.420
默认的时候

31:37.420 --> 31:38.940
它前面谁都没有

31:38.940 --> 31:40.140
所以此时

31:40.140 --> 31:42.460
这个所谓的毁掉函数

31:42.460 --> 31:44.540
它里面的dase指的是window

31:44.540 --> 31:46.900
那我们再回过头来看一下side-intel mode

31:46.900 --> 31:47.740
side-intel mode

31:47.740 --> 31:48.900
你传的这个方式

31:48.900 --> 31:51.300
是不是就是这里面的毁掉函数

31:51.300 --> 31:51.980
是不是

31:51.980 --> 31:53.020
那现在这个dase

31:53.020 --> 31:56.300
是不是就在所谓的这个毁掉函数当中去使用的

31:56.300 --> 31:59.340
所以这里面的dase是谁

31:59.340 --> 32:00.660
是window

32:00.660 --> 32:01.500
是window

32:01.500 --> 32:04.340
所以这一块我们想要使用dase

32:04.340 --> 32:06.580
让它是bure的话是不行的

32:06.580 --> 32:08.380
那么没办法了

32:08.380 --> 32:09.460
咱来存一下

32:09.460 --> 32:10.740
来存一下

32:10.740 --> 32:13.940
我在哪里能够找到这个bure的dase

32:13.940 --> 32:15.420
在这里面能找到

32:15.420 --> 32:17.660
死该木这个函数作用预内

32:17.660 --> 32:18.580
dase是不是

32:18.580 --> 32:21.220
仍然还是bure的呢

32:21.220 --> 32:25.260
只不过是在毁掉函数的这个里面

32:25.260 --> 32:26.300
dase是谁了呀

32:26.300 --> 32:27.180
是window了

32:27.180 --> 32:29.340
那我就在外面来写个辩量

32:29.340 --> 32:30.420
wore一个self

32:30.420 --> 32:31.700
等于一个dase

32:31.700 --> 32:33.500
这样不就行了吗

32:33.500 --> 32:36.260
你看我在这里面去用上self

32:36.260 --> 32:37.780
在这里面去用self

32:37.780 --> 32:40.340
接着在这再去用self

32:40.340 --> 32:41.700
那它会怎么样了

32:41.700 --> 32:43.620
在这函数里面找不到self了

32:43.620 --> 32:44.620
ok

32:44.620 --> 32:48.420
去到外层的这样一个作用预内

32:48.420 --> 32:49.100
去找了

32:49.100 --> 32:50.540
那找到这个self了

32:50.540 --> 32:51.780
一看它的直升谁呀

32:51.780 --> 32:53.020
是保存的dase

32:53.020 --> 32:54.740
那拿过来就用了

32:54.740 --> 32:56.740
那怎么先来看一下

32:56.740 --> 32:59.180
嗯这块啊cb有问题

32:59.180 --> 33:00.380
不用管

33:00.380 --> 33:01.420
也是代码不用管

33:01.420 --> 33:01.780
ok

33:01.780 --> 33:02.700
咱们来看一下

33:02.700 --> 33:04.500
这是不是就没有什么问题了呀

33:04.500 --> 33:06.380
它是不是就开始移动了

33:06.380 --> 33:08.180
是不是移动了吧

33:08.180 --> 33:09.180
飘起来了

33:09.180 --> 33:09.420
对吧

33:09.420 --> 33:09.740
ok

33:09.740 --> 33:10.420
好了

33:10.420 --> 33:12.620
那现在还要再去思考另外一个问题

33:12.620 --> 33:13.020
来

33:13.020 --> 33:14.780
大家瞪大眼睛啊

33:14.780 --> 33:15.540
瞅一瞅

33:15.540 --> 33:17.180
演技开始游戏

33:17.180 --> 33:18.060
观察谁

33:18.060 --> 33:19.740
观察天空移动的速度

33:19.740 --> 33:23.220
观察点击

33:23.220 --> 33:24.220
是不是变快了呀

33:24.220 --> 33:25.340
同学们

33:25.340 --> 33:26.380
是不是变快了

33:27.980 --> 33:28.940
变快了的话

33:28.940 --> 33:31.220
你能每次说你减的

33:31.220 --> 33:33.300
那个什么减的那个数字

33:33.300 --> 33:35.740
能是写死的二吗

33:35.740 --> 33:38.220
当你去点文开始游戏了之后

33:38.220 --> 33:40.060
你所减的这个数值

33:40.060 --> 33:42.340
它是不是得变大了呀

33:42.340 --> 33:43.900
你想让它变快

33:43.900 --> 33:44.980
你想让它变快

33:44.980 --> 33:47.700
那是不是就让这个值变大一点呀

33:47.700 --> 33:48.540
那所以说呢

33:48.540 --> 33:49.220
你最好

33:49.220 --> 33:50.820
你减的这个数字

33:50.820 --> 33:52.380
它不用写死在这里

33:52.380 --> 33:53.260
不要写死

33:53.260 --> 33:54.060
而是怎么样

33:54.060 --> 33:56.780
用一个变量去存着它

33:56.780 --> 33:58.140
那咱们在这块

33:58.140 --> 34:01.860
就可以来写一个值叫做写一个变量

34:01.860 --> 34:03.620
叫做死盖死大夫

34:03.620 --> 34:05.340
值初始的时候为一个二

34:05.340 --> 34:08.060
我想让天空速度变快的时候

34:08.060 --> 34:09.580
那怎么样啊

34:09.580 --> 34:10.140
怎么样

34:10.140 --> 34:11.660
我让它加上一个

34:11.660 --> 34:13.300
改为一个更大的数字

34:13.300 --> 34:14.220
不就行了吗

34:14.220 --> 34:14.820
是不是

34:14.820 --> 34:16.460
所以咱们之里面在减去谁呀

34:16.460 --> 34:20.860
死盖死盖死盖死盖

34:20.860 --> 34:22.580
这样是不是就没有什么问题

34:22.580 --> 34:23.380
是不是没有什么问题

34:23.380 --> 34:24.020
ok

34:24.020 --> 34:26.700
顾久南文同学问了一句话

34:26.700 --> 34:27.460
他说

34:27.460 --> 34:30.180
背景图片为什么不会走完

34:30.180 --> 34:31.700
为什么呀

34:31.700 --> 34:34.980
背景图片默认是重复的

34:34.980 --> 34:37.020
buck around repeat

34:37.020 --> 34:39.380
默认是repeat

34:39.380 --> 34:40.340
也就是说

34:40.340 --> 34:41.620
你的这个图片

34:41.620 --> 34:45.140
它会一直重复一直重复一直重复

34:45.180 --> 34:47.020
所以它不会走完

34:47.020 --> 34:47.460
这个呢

34:47.460 --> 34:49.540
就是一个非常基础的一个小问题

34:49.540 --> 34:50.140
好嘞

34:50.140 --> 34:51.660
那这个动画

34:51.660 --> 34:53.100
咱是不是写完了呀

34:53.100 --> 34:55.580
那接着咱们再来写一个写谁呀

34:55.580 --> 34:58.460
写让小鸟去蹦的

34:58.460 --> 34:59.580
小鸟蹦的

34:59.580 --> 35:01.940
它就是一个jump的一个操作

35:01.940 --> 35:03.500
是不是蹦是jump

35:03.500 --> 35:04.780
我来写个这个

35:04.780 --> 35:05.500
嗯

35:05.500 --> 35:07.420
出事是吧

35:07.420 --> 35:07.820
小鸟

35:11.020 --> 35:13.380
小鸟蹦

35:14.380 --> 35:16.380
这个SkyM是

35:17.380 --> 35:18.380
哎呦

35:18.380 --> 35:21.730
天空

35:21.730 --> 35:22.730
一动

35:22.730 --> 35:24.130
省了你们这个

35:24.130 --> 35:25.330
优语不太好

35:25.330 --> 35:26.130
接不住

35:26.130 --> 35:26.530
ok

35:26.530 --> 35:27.330
不是jump

35:27.330 --> 35:29.530
那咱们是不是也让这个小鸟

35:29.530 --> 35:31.730
隔一会儿去动一次

35:31.730 --> 35:32.130
哎

35:32.130 --> 35:33.930
隔一会儿去动一次

35:33.930 --> 35:35.930
那到底隔多少时间呢

35:35.930 --> 35:37.730
咱们还是得来个真实器

35:37.730 --> 35:38.330
是不是

35:38.330 --> 35:39.730
把我们给它填个时间

35:39.730 --> 35:41.530
那小鸟蹦的这个速度

35:41.530 --> 35:42.730
还大概要慢一点

35:42.730 --> 35:44.330
我就给它来个300毫秒

35:45.330 --> 35:46.730
每隔一会儿呢

35:46.730 --> 35:47.730
就让它蹦一次

35:47.730 --> 35:49.330
每隔一会儿就让它蹦一次

35:49.330 --> 35:51.330
那其实这块就很简单

35:51.330 --> 35:52.130
不会砍啊

35:52.130 --> 35:52.930
不会砍

35:52.930 --> 35:53.930
这块很简单

35:53.930 --> 35:55.330
你是不是只去动态的

35:55.330 --> 35:57.130
去设置小鸟的一个套布纸

35:57.130 --> 35:58.030
就可以了呀

35:58.030 --> 35:58.530
对不对

35:58.530 --> 35:59.930
咱们能找一下Bird

35:59.930 --> 36:01.530
Bird在这个当中

36:01.530 --> 36:03.730
套布纸是一高235

36:03.730 --> 36:05.230
你看我让它变小

36:05.230 --> 36:06.030
它往上去

36:06.030 --> 36:06.930
我让它变大

36:06.930 --> 36:07.930
它就往下来

36:07.930 --> 36:10.430
那我不断的让它变大变小

36:10.430 --> 36:11.730
变大变小

36:11.730 --> 36:13.330
它是不是就是在蹦啊

36:13.330 --> 36:14.530
是不是在蹦啊

36:14.530 --> 36:15.130
对不对

36:15.130 --> 36:15.730
所以这块呢

36:15.730 --> 36:16.430
咱们就这样

36:16.430 --> 36:17.930
一会儿让它是220

36:17.930 --> 36:18.330
一会儿呢

36:18.330 --> 36:20.230
让它是260

36:20.230 --> 36:21.830
让它是260

36:21.830 --> 36:23.530
那这块来写一个

36:23.530 --> 36:24.330
那还是哈

36:24.330 --> 36:25.630
得去操作谁了呀

36:25.630 --> 36:27.230
操作一下小鸟

36:27.230 --> 36:28.830
那在操作小鸟的时候

36:28.830 --> 36:31.330
咱是不是先把小鸟的元素给拿到啊

36:31.330 --> 36:31.930
对不对

36:31.930 --> 36:33.930
那这块来写一个OrdBird

36:33.930 --> 36:34.830
那注意哈

36:34.830 --> 36:37.530
看我命名的这种方式

36:37.530 --> 36:38.530
我们命名哈

36:38.530 --> 36:41.030
除了复原素叫做EL之外哈

36:41.030 --> 36:41.930
其它的

36:41.930 --> 36:43.730
只要涉及到的这个变量

36:43.730 --> 36:45.330
指的是一个道目元素

36:45.330 --> 36:46.630
我们就在前面

36:46.630 --> 36:48.230
约定俗成的

36:48.230 --> 36:49.830
加上一个小O

36:49.830 --> 36:52.230
来代表着它是一个道目元素

36:52.230 --> 36:53.030
听清楚了吧

36:53.030 --> 36:55.230
这是约定俗成的一种写法哈

36:55.230 --> 36:56.730
我们能够从视觉上

36:56.730 --> 36:58.430
能够非常快速的判断出来

36:58.430 --> 37:00.130
它是一个道目元素

37:00.130 --> 37:02.230
而不是一个普通的变量

37:02.230 --> 37:02.830
ok

37:02.830 --> 37:04.130
那这会儿咱们获取一下吧

37:04.130 --> 37:06.230
怎么去获取这样的一个Bird呀

37:06.230 --> 37:06.830
到他们的点

37:06.830 --> 37:08.630
get elements by class name

37:08.630 --> 37:10.130
选择一个元素

37:10.130 --> 37:11.830
class为Bird的

37:11.830 --> 37:12.730
那选择的是谁呀

37:12.730 --> 37:13.730
是一个类书组

37:13.730 --> 37:15.030
类书组当中的第零个

37:15.030 --> 37:16.630
就是我们要选择Bird了

37:16.630 --> 37:18.330
但这块要有一个概念

37:18.330 --> 37:19.830
就可能啊

37:19.830 --> 37:20.830
我们的这个Bird

37:20.830 --> 37:22.130
它不是一个class吗

37:22.130 --> 37:22.630
对不对

37:22.630 --> 37:24.330
class多个元素

37:24.330 --> 37:25.930
可以拥有同一个class

37:25.930 --> 37:27.030
那好巧不巧

37:27.030 --> 37:28.230
别人的一个元素

37:28.230 --> 37:29.230
它又叫class

37:29.230 --> 37:29.930
又叫Bird

37:29.930 --> 37:30.730
你怎么办

37:30.730 --> 37:31.730
你可能你就不知道

37:31.730 --> 37:33.130
你要获取的是第零个

37:33.130 --> 37:34.730
还是第一个

37:34.730 --> 37:36.130
或者是第二个了

37:36.130 --> 37:37.330
这个就不好判断了

37:37.330 --> 37:39.530
因为说不定谁哪天在你前面

37:39.530 --> 37:40.630
就加了一个元素

37:40.630 --> 37:42.030
我还没告诉你

37:42.030 --> 37:44.030
那这时候你哭不哭啊

37:44.030 --> 37:45.030
你得哭一会

37:45.030 --> 37:46.030
因为你找了半天

37:46.030 --> 37:47.430
没找到错误啊

37:47.430 --> 37:48.130
是不是

37:48.130 --> 37:48.930
那所以这块呢

37:48.930 --> 37:51.030
我们就不从document

37:51.030 --> 37:53.330
不从整个文档当中去找了

37:53.330 --> 37:56.030
而是只从副元素当中去找

37:56.030 --> 37:58.230
因为副元素内的所有的元素

37:58.230 --> 38:00.130
都是我们自己可控的

38:00.130 --> 38:01.930
我知道我这个Bird元素

38:01.930 --> 38:04.030
在我副元素当中是第几个

38:04.030 --> 38:05.330
那它以后再改

38:05.330 --> 38:06.530
也是我自己来改

38:06.530 --> 38:07.830
我仍然知道它改了

38:07.830 --> 38:09.130
改成为第几个了

38:09.130 --> 38:09.730
是不是

38:09.730 --> 38:10.930
咱们的就直接通过

38:10.930 --> 38:13.730
第四点一L去进行选择

38:13.730 --> 38:14.730
就行了

38:14.730 --> 38:17.030
通过第四点一L去选择就行了

38:17.030 --> 38:17.530
那好

38:17.530 --> 38:18.730
那咱们在下面呢

38:18.730 --> 38:21.830
来用self.over的

38:21.830 --> 38:24.630
去设置它的一个style.top

38:24.630 --> 38:25.830
那我刚才也说了

38:25.830 --> 38:26.930
它一会是220

38:26.930 --> 38:28.430
一会是260

38:28.430 --> 38:29.630
那咱们最好

38:29.630 --> 38:31.730
把它的这样一个top值

38:31.730 --> 38:34.030
也就是整体小鸟的一个top值

38:34.030 --> 38:35.030
来存储上

38:35.030 --> 38:35.730
你看看

38:35.730 --> 38:37.330
最后开始

38:37.330 --> 38:39.630
我存的值是一个220

38:40.630 --> 38:42.230
是220有什么目的呢

38:42.230 --> 38:43.430
没什么目的

38:43.430 --> 38:44.830
没什么太多的目的

38:44.830 --> 38:47.430
只不过是我想要先去判断一下

38:47.430 --> 38:50.630
当前的Bird Top

38:50.630 --> 38:53.130
也说我当前dance当中的Bird Top

38:53.130 --> 38:56.430
它是否是等于220

38:57.630 --> 38:59.930
如果说等于的话

38:59.930 --> 39:00.730
怎么办呢

39:00.730 --> 39:02.530
我就让它变成是260

39:02.530 --> 39:04.430
如果说是不等于的话

39:04.430 --> 39:05.830
我让它是一个220

39:05.830 --> 39:06.730
能清楚吗

39:06.730 --> 39:07.930
因为我刚才说了

39:07.930 --> 39:09.730
我不是让它是220

39:09.730 --> 39:10.730
就让它是260

39:10.730 --> 39:13.330
当你当前的小鸟的top值

39:13.330 --> 39:14.530
为260了

39:14.530 --> 39:16.630
那我下一个是不是让它是220的

39:16.630 --> 39:18.130
当你当前小鸟的高度

39:18.130 --> 39:18.930
为220的话

39:18.930 --> 39:20.730
那我是不是让它是一个260

39:20.730 --> 39:21.630
我反复的

39:21.630 --> 39:23.130
通过这一个Bird Top

39:23.130 --> 39:25.630
来进行一下判断就可以了

39:25.630 --> 39:27.330
进行一下判断就可以了

39:27.330 --> 39:27.930
那所以说

39:27.930 --> 39:28.930
你判断完之后

39:28.930 --> 39:31.230
你是不是还得再去复制给谁

39:31.230 --> 39:33.030
复制给这个Bird Top

39:33.030 --> 39:34.130
接着

39:34.130 --> 39:36.930
给底下的style.top去复制

39:36.930 --> 39:37.630
懂于谁

39:37.630 --> 39:40.330
懂于style.bird的top

39:40.330 --> 39:42.730
再去加上一个px

39:42.730 --> 39:43.030
ok

39:43.030 --> 39:44.130
那咱们来看一下

39:44.130 --> 39:45.130
看小鸟

39:45.130 --> 39:47.030
是不是在不断的在蹦的呀

39:47.030 --> 39:48.130
是不断的在蹦的

39:48.130 --> 39:50.630
那如果说你想让它蹦的廉贯一点

39:50.630 --> 39:52.030
那么也没什么关系

39:52.030 --> 39:54.230
你可以让这样的一个定时期

39:54.230 --> 39:55.330
变得更快一点

39:55.330 --> 39:56.430
然后每次呢

39:56.430 --> 39:59.230
都去加1加1加1加1加到260了

39:59.230 --> 40:01.330
然后再减1减1减1减到220

40:01.330 --> 40:03.230
再加1加1加260

40:03.230 --> 40:04.130
这样也可以

40:04.130 --> 40:06.030
那咱们今天就不用这种方式了

40:06.030 --> 40:07.230
我们换一种方式

40:07.230 --> 40:08.430
来学习一个

40:08.430 --> 40:10.730
C3当中新增的一个属性

40:10.730 --> 40:12.230
叫做Transition

40:12.230 --> 40:13.630
叫做Transition

40:13.630 --> 40:15.330
Transition是干嘛的呢

40:15.330 --> 40:18.130
就是来实现一个过渡的

40:18.130 --> 40:19.730
来实现一个过渡的

40:19.730 --> 40:20.930
你一个元素

40:20.930 --> 40:22.430
从一个位置

40:22.430 --> 40:23.730
放到另一个位置

40:23.730 --> 40:25.330
我们肉眼看不出来

40:25.330 --> 40:26.530
它过渡的一个效果

40:26.530 --> 40:28.630
那就人为的给它加上

40:28.630 --> 40:29.730
让它能够

40:29.730 --> 40:31.830
从这慢慢的飘过去

40:31.830 --> 40:33.330
再慢慢的飘回来

40:33.330 --> 40:34.830
在慢慢的飘过去

40:34.830 --> 40:35.830
再飘回来

40:35.830 --> 40:37.630
让它有这样的一个效果

40:37.630 --> 40:39.230
那怎么去过渡

40:39.230 --> 40:40.430
很简单

40:40.430 --> 40:41.230
Transition

40:41.230 --> 40:43.230
谁想过渡就给谁去加

40:43.230 --> 40:45.430
那我现在Burr的是不是想过渡啊

40:45.430 --> 40:46.730
我给它来加上

40:46.730 --> 40:48.030
找到Burr的

40:48.130 --> 40:50.430
Burr的在哪里

40:50.430 --> 40:52.030
在这里

40:52.030 --> 40:54.330
来加上一个Transition

40:54.330 --> 40:56.430
那Transition这样的一个过渡

40:56.430 --> 40:57.230
怎么去用

40:57.230 --> 40:58.530
咱们先不纠结

40:58.530 --> 41:00.230
咱们就用它最简单的

41:00.230 --> 41:02.130
还是大概用一下就可以了

41:02.130 --> 41:02.830
首先知道

41:02.830 --> 41:06.030
Transition第一个是给它填了一个凹

41:06.030 --> 41:07.230
这个凹是什么意思呢

41:07.230 --> 41:09.230
就是当你这个元素

41:09.230 --> 41:11.930
所有的样式发生了改变的时候

41:11.930 --> 41:13.630
我都有一个过渡效果

41:13.630 --> 41:14.430
这是一个凹

41:14.430 --> 41:17.230
然后第二个是来一个点三秒

41:18.230 --> 41:19.230
这个什么意思呢

41:19.230 --> 41:22.430
就是过渡在0.3秒内

41:22.430 --> 41:23.530
执行完毕

41:23.530 --> 41:25.530
那也是说在300毫秒之内

41:25.530 --> 41:26.630
300毫秒

41:26.630 --> 41:28.830
执行完所有的这样的过渡

41:28.830 --> 41:31.630
从A位置慢慢的移动到B位置

41:31.630 --> 41:34.430
耗时时间是300毫秒

41:34.430 --> 41:36.330
ok 第三个是一个

41:36.330 --> 41:37.830
函数运动的一个冥双

41:37.830 --> 41:39.030
运动函数的冥双

41:39.030 --> 41:40.230
Liner 匀速

41:40.230 --> 41:41.830
就你匀速过去

41:41.830 --> 41:43.130
不是加速过去

41:43.130 --> 41:44.230
不是减速过去

41:44.230 --> 41:46.230
而是慢慢的匀速过去

41:46.230 --> 41:48.530
这个移动的速度是不变的

41:48.530 --> 41:49.330
是不变的

41:49.330 --> 41:50.730
ok 那现在

41:50.730 --> 41:52.730
咱们来看一看

41:52.730 --> 41:53.330
看这

41:53.330 --> 41:55.430
这是不是就过度上了呀

41:55.430 --> 41:57.230
是不是就过度上了呀

41:57.230 --> 41:57.930
对吧

41:57.930 --> 41:59.330
就不会说像突然A

41:59.330 --> 42:01.530
从那去就从那过那去啦

42:01.530 --> 42:01.930
不会了

42:01.930 --> 42:03.430
而是慢慢的飘过去

42:03.430 --> 42:04.030
飘回来

42:04.030 --> 42:05.130
飘过去飘回来

42:05.130 --> 42:07.930
ok 那这两个动画咱们就写完了

42:07.930 --> 42:09.430
但是写完这两个的话之后

42:09.430 --> 42:11.230
就会蒙生一个问题

42:11.230 --> 42:13.930
咱定时器开的太多了

42:13.930 --> 42:16.130
开的太多了

42:16.130 --> 42:17.430
有多多呢

42:17.430 --> 42:20.230
多到我们未来要去开N个

42:20.230 --> 42:20.930
你看看

42:20.930 --> 42:21.830
动画有几个

42:21.830 --> 42:23.330
天空要去移动

42:23.330 --> 42:23.930
对不对

42:23.930 --> 42:25.530
天空要移动一下

42:25.530 --> 42:27.230
你小鸟要去蹦的

42:27.230 --> 42:27.730
然后呢

42:27.730 --> 42:30.030
你这个小鸟要去煽动翅膀

42:30.030 --> 42:32.230
你这个蚊子要去放大缩小

42:32.230 --> 42:34.030
那是不是从这手瓶上

42:34.030 --> 42:36.430
我们就要开启四个定时器呀

42:36.430 --> 42:37.630
要开启四个定时器

42:37.630 --> 42:40.130
那你这个页面最终会很卡的

42:40.130 --> 42:40.730
开多了

42:40.730 --> 42:41.530
你这

42:41.530 --> 42:43.130
你这个练起吃不消啊

42:43.130 --> 42:44.430
CPU太爆了

42:44.430 --> 42:45.030
是不是

42:45.030 --> 42:48.230
咱们就尽可能去减少定时器的一个使用

42:48.230 --> 42:48.930
那咱们呢

42:48.930 --> 42:51.430
来重新的优化一下这个代码

42:51.430 --> 42:52.230
又开开代码

42:52.230 --> 42:54.130
我现在就想用一个定时器

42:54.130 --> 42:56.330
把他一个搞定该怎么办呢

42:56.330 --> 42:57.530
该怎么办呢

42:57.530 --> 42:58.830
来想一下

42:58.830 --> 43:00.930
来想一下

43:00.930 --> 43:04.030
我们是不是都在animate这里面来执行的呀

43:04.030 --> 43:04.630
是不是

43:04.630 --> 43:06.430
你死该慕斯在这里来执行的

43:06.430 --> 43:08.030
不知道账目是在这里来执行的

43:08.030 --> 43:09.930
那我是不是就可以直接在最外层

43:09.930 --> 43:13.900
来一个set interval

43:13.900 --> 43:15.600
30毫秒

43:15.600 --> 43:17.200
执行一次谁呀

43:17.200 --> 43:19.000
执行一次死该慕

43:19.000 --> 43:21.000
执行一次过账目

43:21.000 --> 43:21.800
看这哈

43:21.800 --> 43:25.500
咱们把里边的这些定时器都删掉

43:25.500 --> 43:26.200
删掉

43:26.200 --> 43:27.300
这个也删掉

43:27.300 --> 43:28.200
这个也删掉

43:28.200 --> 43:29.000
那这样

43:29.000 --> 43:31.200
他是不是照样能够去执行啊

43:31.200 --> 43:33.000
每隔一段时间去执行一下

43:33.000 --> 43:34.400
死该慕和过账目吧

43:34.400 --> 43:35.800
来再来看一下

43:35.800 --> 43:36.900
删心

43:36.900 --> 43:37.700
哎有问题

43:37.700 --> 43:39.800
咱少填个什么呢

43:39.800 --> 43:42.200
set interval

43:42.200 --> 43:43.600
啊self的有问题哈

43:43.600 --> 43:46.200
来为了一个self动于一个daise

43:47.400 --> 43:48.700
动于一个daise

43:48.700 --> 43:51.800
把这里面的daise都换成是一个self

43:51.800 --> 43:54.200
a self self

43:54.200 --> 43:55.600
ok看一下

43:55.600 --> 43:57.900
看天空起码在移动

43:57.900 --> 43:59.800
小鸟它其实也在移动

43:59.800 --> 44:01.600
只不过说它移动的太快了

44:01.600 --> 44:02.700
让你看不清了

44:02.700 --> 44:04.000
你看不到了

44:04.000 --> 44:05.300
它一30毫秒一一次

44:05.300 --> 44:06.100
30毫秒一一次

44:06.100 --> 44:07.600
我们肉眼捕捉不到了

44:07.600 --> 44:09.300
是不是那怎么办呀

44:09.300 --> 44:10.400
正常来讲

44:10.400 --> 44:11.800
你小鸟去移动

44:11.800 --> 44:13.900
是不是300毫秒一次啊

44:13.900 --> 44:16.200
那咱就来换个思路呗

44:16.200 --> 44:17.700
你这不是30嘛

44:17.700 --> 44:18.200
那好

44:18.200 --> 44:20.700
我执行这个函数十次之后

44:20.700 --> 44:22.100
我再去执行一下

44:22.100 --> 44:22.900
不让丈夫

44:22.900 --> 44:25.300
然后下一个十次再去执行一下

44:25.300 --> 44:28.100
然后下一个十次再去执行一下

44:28.100 --> 44:31.600
那怎么能够精确的知道我执行了几次呢

44:31.600 --> 44:33.600
计个数不就行了吗

44:33.600 --> 44:35.100
你想要去判断十次

44:35.100 --> 44:36.200
你是不是也知道啊

44:36.200 --> 44:37.800
第零次第一次第二次

44:37.800 --> 44:38.900
第三次第四次

44:38.900 --> 44:40.300
你是不是也这么查数啊

44:40.300 --> 44:41.500
那咱们查数

44:41.500 --> 44:44.300
是不是就来用一个变量来接着行的呀

44:44.300 --> 44:46.600
或一个抗讨出使的时候为一个零

44:46.600 --> 44:49.800
接着在这里面让这个抗讨去加加

44:49.800 --> 44:50.900
加加完了之后

44:50.900 --> 44:53.200
你再去判断它加完的这个数

44:53.200 --> 44:55.500
模十是不是等于零

44:55.500 --> 44:57.200
模十是什么意思啊

44:57.200 --> 44:59.200
除以十取余

44:59.200 --> 45:01.200
当你是十的倍数的时候

45:01.200 --> 45:03.400
除十取余它才是为零

45:03.400 --> 45:03.900
对不对

45:03.900 --> 45:04.600
OK好了

45:04.600 --> 45:05.800
那咱们来写下吧

45:05.800 --> 45:08.200
如果说加加抗讨

45:08.200 --> 45:11.100
模上一个十等于等于一个零

45:11.100 --> 45:13.800
我再去调用一下self点

45:13.800 --> 45:14.700
伯的jump

45:14.700 --> 45:16.200
这样是不是就可以了

45:16.200 --> 45:16.800
来看看

45:16.800 --> 45:18.400
是不是就正常了呀

45:18.400 --> 45:19.400
是不是就正常了

45:19.400 --> 45:19.800
对吧

45:19.800 --> 45:21.000
OK好了

45:21.000 --> 45:23.400
那加加知道是啥意思吧

45:23.400 --> 45:25.800
这个在成功课里面讲的很明白

45:25.800 --> 45:28.700
前加加是先加一

45:28.700 --> 45:31.100
一用加完一之后的这个数

45:31.100 --> 45:33.000
去进行运算

45:33.000 --> 45:34.100
那后加加呢

45:34.100 --> 45:35.500
是先去运算

45:35.600 --> 45:38.700
完事了之后再去自身加一

45:38.700 --> 45:40.700
你看这咱是不是就利用上了呀

45:40.700 --> 45:43.400
可能你们在之前去学习那些枯燥的

45:43.400 --> 45:44.600
这样些计算的时候

45:44.600 --> 45:46.500
语法的时候不知道啥时候去用

45:46.500 --> 45:47.700
但是因为什么

45:47.700 --> 45:49.800
因为你刚刚学你写的太少了

45:49.800 --> 45:50.900
你没有应用上

45:50.900 --> 45:52.500
那咱现在不就用上了吗

45:52.500 --> 45:54.500
咱这不就有用武之地了吗

45:54.500 --> 45:55.100
是不是

45:55.100 --> 45:55.700
OK好了

45:55.700 --> 45:57.200
这个呢咱就写完了

45:57.200 --> 46:00.000
接下来我们再去来写一下

46:00.000 --> 46:02.300
OK模十是为什么

46:02.300 --> 46:03.500
模十是为啥呀

46:03.500 --> 46:04.800
我们刚才说了啊

46:04.800 --> 46:07.300
因为我们小鸟蹦的

46:07.300 --> 46:10.000
是想让它300毫秒蹦的一次

46:10.000 --> 46:11.500
但是我们定时气势

46:11.500 --> 46:13.800
30毫秒执行一次

46:13.800 --> 46:15.800
那你是不是得让这里面的函数

46:15.800 --> 46:17.500
执行10次之后

46:17.500 --> 46:19.500
再去调一下这个函数啊

46:19.500 --> 46:21.800
所以咱们就用一个变量来计数

46:21.800 --> 46:22.700
查着

46:22.700 --> 46:24.400
查当前执行的几次

46:24.400 --> 46:26.400
那当你执行是10次

46:26.400 --> 46:28.000
24 30次的时候

46:28.000 --> 46:29.600
我再去执行这里面的函数

46:29.600 --> 46:30.600
是不是没毛病啊

46:30.600 --> 46:31.800
那怎么去判断

46:31.800 --> 46:33.200
它是10的倍数啊

46:33.200 --> 46:35.700
那你是不是就除上一个10啊

46:35.700 --> 46:36.600
怎么去除

46:36.600 --> 46:37.300
怎么判断

46:37.300 --> 46:39.800
比如说你20除上10的几啊得2

46:39.800 --> 46:41.700
但是你于几啊于零

46:41.700 --> 46:42.900
你是10的倍数

46:42.900 --> 46:44.200
他们都有个共同点

46:44.200 --> 46:46.800
就是他们的于数都为多为零

46:46.800 --> 46:49.500
那模呢就是去取于

46:49.500 --> 46:51.300
就是去取于

46:51.300 --> 46:52.800
OK有朋友说了哈

46:52.800 --> 46:55.900
为什么家家在抗它前面

46:55.900 --> 46:58.000
为什么家家在抗它前面

46:58.000 --> 46:58.800
为什么呀

46:58.800 --> 47:01.200
因为咱们想让抗的先加1

47:01.200 --> 47:03.500
你看我们抗的是从零开始的

47:03.500 --> 47:06.300
你执行完执行这个方式的时候

47:06.300 --> 47:07.800
其实方式执行几次啊

47:07.800 --> 47:09.000
执行一次吧

47:09.000 --> 47:11.600
你不能说让它执行两执行零次吧

47:11.600 --> 47:12.100
对不对

47:12.100 --> 47:12.900
执行一次

47:12.900 --> 47:15.300
我们有这样一个人的一个概念哈

47:15.300 --> 47:16.400
你说执行几次

47:16.400 --> 47:18.800
人说一次两次三次从1开始

47:18.800 --> 47:19.300
是不是

47:19.300 --> 47:20.100
那咱这个抗的呢

47:20.100 --> 47:21.200
也是从一开始

47:21.200 --> 47:23.300
你先让它从零变成是一个1

47:23.300 --> 47:24.800
所以就是家家抗它

47:24.800 --> 47:26.700
自身加1就可以了

47:26.700 --> 47:27.800
自身加1就可以了

47:27.800 --> 47:28.300
好了

47:28.300 --> 47:29.800
然后有同学又说了哈

47:29.800 --> 47:30.400
老师啊

47:30.400 --> 47:32.800
你这里面咋用了三个等号呢

47:32.800 --> 47:34.000
为什么用三个等号

47:34.000 --> 47:35.100
注意哈

47:35.100 --> 47:37.000
现在大家已经是我的学生了

47:37.000 --> 47:39.600
我的学生以后判断都要用全等

47:39.600 --> 47:41.300
多给我来进行严格等于

47:41.300 --> 47:42.900
别跟我整那些两个等号

47:42.900 --> 47:43.800
那不严格

47:43.800 --> 47:46.600
一个字路券1都等于一个数字1了

47:46.600 --> 47:48.000
这样子都能模糊过关

47:48.000 --> 47:49.600
但是后面我们再去写项目的时候

47:49.600 --> 47:52.400
要严格的去判断他们的一个什么

47:52.400 --> 47:53.900
他们的一个类型

47:53.900 --> 47:55.400
你这个时候你能过

47:55.400 --> 47:58.300
那可能就会导致这样那样的一些问题出现

47:58.300 --> 47:59.700
所以说咱们再去判断的时候

47:59.700 --> 48:01.700
都严格等于清楚了吗

48:01.700 --> 48:03.000
都严格等于

48:03.000 --> 48:04.700
ok

48:04.700 --> 48:05.300
好了啊

48:05.300 --> 48:07.500
这就说完了

48:07.500 --> 48:08.200
说完了之后呢

48:08.200 --> 48:09.400
咱们来写下一个了

48:09.400 --> 48:10.300
再写下一个之前

48:10.300 --> 48:11.600
咱来改改这个代码

48:11.600 --> 48:12.200
太丑了

48:12.200 --> 48:13.600
我们把所有的

48:13.600 --> 48:16.500
用到这里边用到塞尔夫的地方

48:16.500 --> 48:17.800
都换成是什么呀

48:17.800 --> 48:19.400
都换成是dats

48:19.400 --> 48:21.100
因为此时这个里面的dats

48:21.100 --> 48:22.100
没什么问题了

48:22.100 --> 48:22.500
是不是

48:22.500 --> 48:24.700
没什么问题了

48:24.700 --> 48:25.500
为什么没问题

48:25.500 --> 48:27.700
你们应该知道吧

48:27.700 --> 48:28.300
起来改

48:28.300 --> 48:31.270
改完再说

48:31.270 --> 48:32.070
dats

48:32.070 --> 48:32.870
因为什么呀

48:32.870 --> 48:34.570
因为波的杖普和SkyMu

48:34.570 --> 48:35.970
都是在这个里面

48:35.970 --> 48:38.470
通过所谓这个塞尔夫去进行调用的了

48:38.470 --> 48:41.070
那这个函数和这个函数里面的dats是谁呀

48:41.070 --> 48:42.270
就是这里面的塞尔夫了

48:42.270 --> 48:43.370
这里面的塞尔夫是谁呀

48:43.370 --> 48:44.370
是不是这个dats呀

48:44.370 --> 48:45.870
这个dats是不是一个波的呀

48:45.870 --> 48:48.170
所以说我们就不用再去wore一个塞尔夫了

48:48.170 --> 48:50.070
就不用再去wore一个塞尔夫了

48:50.070 --> 48:51.470
嗯好了

48:51.470 --> 48:52.170
打了个格

48:52.170 --> 48:52.470
ok

48:52.470 --> 48:53.970
咱来开始下一个

48:53.970 --> 48:55.070
下一个是谁呢

48:55.070 --> 48:56.570
咱们来写这个文字吧

48:56.570 --> 48:57.970
让文字有一个

48:57.970 --> 49:00.070
放大缩小的一个效果

49:00.070 --> 49:03.170
那怎么样能够让它放大缩小啊

49:03.170 --> 49:05.270
怎么样能够让它放大缩小

49:05.270 --> 49:07.070
还记得吗

49:07.070 --> 49:09.070
还记得吗

49:09.070 --> 49:10.870
咱之前上节课

49:10.870 --> 49:14.570
是不是写了两个多的

49:14.570 --> 49:16.070
一个两个类名啊

49:16.070 --> 49:17.070
一个叫什么呀

49:17.070 --> 49:18.270
一个叫做white

49:18.270 --> 49:20.270
哎哪儿了

49:20.270 --> 49:21.170
来看一下

49:21.170 --> 49:22.870
一个叫做white

49:22.870 --> 49:24.370
一个叫做blue

49:24.370 --> 49:27.570
那是不是就是我一会让它是白颜色

49:27.570 --> 49:29.070
一会让它是蓝颜色

49:29.070 --> 49:30.270
一会让它是白颜色

49:30.270 --> 49:31.770
一会让它是蓝颜色

49:31.770 --> 49:32.770
就可以了呀

49:32.770 --> 49:34.370
那我就切换它的类名

49:34.370 --> 49:35.470
是不是就可以了呀

49:35.470 --> 49:35.970
对不对

49:35.970 --> 49:36.470
那好

49:36.470 --> 49:37.770
那咱们现在哈

49:37.770 --> 49:40.770
把它目前的这样的一个状态给看到

49:40.770 --> 49:41.470
是谁呀

49:41.470 --> 49:42.370
蓝颜色的

49:42.370 --> 49:44.570
那所以我就用一个辩量来存着它

49:44.570 --> 49:48.470
这个辩量存储着当前的文字的

49:48.470 --> 49:49.970
这样的一个color

49:49.970 --> 49:50.670
那所以呢

49:50.670 --> 49:51.770
来起个名字

49:51.770 --> 49:53.870
叫做start color

49:53.870 --> 49:55.870
现在是一个蓝颜色的

49:55.870 --> 49:58.470
那应该用一个自负串来存储着

49:58.470 --> 49:59.270
是个蓝颜色的

49:59.270 --> 49:59.770
ok

49:59.770 --> 50:01.970
那在这个bird

50:01.970 --> 50:03.770
在这个starbong的当中

50:03.770 --> 50:07.970
我就可以去通过当前的这个颜色

50:07.970 --> 50:10.070
去给它换另外一个颜色了

50:10.070 --> 50:10.970
你是蓝色

50:10.970 --> 50:12.770
我只让你是一个白色

50:12.770 --> 50:13.670
你是白色

50:13.670 --> 50:16.170
我就让你是一个蓝色

50:16.170 --> 50:17.270
对不对

50:17.270 --> 50:18.770
所以这块怎么去弄啊

50:18.770 --> 50:20.070
怎么去弄

50:20.070 --> 50:20.970
想一下哈

50:20.970 --> 50:22.670
想一下

50:22.670 --> 50:23.370
谈断一下

50:23.370 --> 50:24.470
如果说

50:24.470 --> 50:27.770
当前的start color

50:28.770 --> 50:30.570
等于等于不录

50:31.670 --> 50:32.370
那么呢

50:32.370 --> 50:33.570
我就来

50:33.570 --> 50:35.170
比如说我一个color

50:35.170 --> 50:36.670
等于一个

50:36.670 --> 50:38.070
啥指头没有哈

50:38.070 --> 50:38.970
只为一个按键犯的

50:38.970 --> 50:39.370
ok

50:39.370 --> 50:40.570
这样color呢

50:40.570 --> 50:42.370
就等于一个谁呀

50:42.370 --> 50:43.670
等于一个white

50:43.670 --> 50:45.470
那如果说是else的话呢

50:45.470 --> 50:46.870
那color呢

50:46.870 --> 50:47.670
就是谁

50:47.670 --> 50:48.670
就是一个不录

50:48.670 --> 50:49.170
ok

50:49.170 --> 50:51.270
你通过这样的一种形式

50:51.270 --> 50:53.270
把这个color保存了之后

50:53.270 --> 50:56.870
你是不是就可以去进行处理了呀

50:56.870 --> 50:57.470
对不对

50:57.470 --> 50:58.770
怎么去处理

50:58.770 --> 50:59.570
怎么去处理

51:01.070 --> 51:01.670
首先

51:01.670 --> 51:03.970
你把原来的这个颜色

51:03.970 --> 51:05.870
对应那个类名给移除掉

51:05.870 --> 51:08.170
那怎么去移除一个类名呢

51:08.170 --> 51:09.470
怎么去移除一个类名呢

51:09.470 --> 51:10.670
其实很简单啊

51:10.670 --> 51:14.670
我们可以用一个元素的class list

51:14.670 --> 51:15.770
上面的一个方法

51:15.770 --> 51:16.570
remove

51:16.570 --> 51:19.270
传递上去一个一个参数

51:19.270 --> 51:22.270
这个参数是它的一个名字就可以了

51:22.270 --> 51:23.270
它名字就可以了

51:23.270 --> 51:24.170
那是谁呀

51:24.170 --> 51:25.270
是不是start

51:25.270 --> 51:25.770
gong

51:25.770 --> 51:26.770
加上了什么

51:26.770 --> 51:28.470
加上一个this

51:28.470 --> 51:28.970
del

51:28.970 --> 51:29.870
start

51:29.870 --> 51:30.670
color

51:30.670 --> 51:31.270
对不对

51:31.270 --> 51:32.770
那接着一触完成之后

51:32.770 --> 51:34.470
我说不还得再加上一个谁呀

51:34.470 --> 51:36.470
再加上一个新的类名

51:36.470 --> 51:37.870
加上一个start

51:37.870 --> 51:38.370
gong

51:38.370 --> 51:38.770
然后呢

51:38.770 --> 51:40.670
保存的是这个color

51:40.670 --> 51:41.570
对不对

51:41.570 --> 51:42.370
然后之后

51:42.370 --> 51:44.670
你是不是还得让当前的

51:44.670 --> 51:46.670
this当中的start color

51:46.670 --> 51:49.070
等于你更改过后的这个color

51:49.070 --> 51:52.170
然后以待下次去执行呢

51:52.170 --> 51:53.770
是不是以待下次去执行

51:53.770 --> 51:55.370
那这个逻辑懂了吗

51:55.370 --> 51:56.470
这个逻辑懂了吗

51:56.470 --> 51:58.670
我们要根据当前的

51:58.670 --> 52:00.270
这样的一个颜色值

52:00.270 --> 52:01.170
去判断出来

52:01.170 --> 52:04.570
我未来要去给它加上什么样的一个类名

52:04.570 --> 52:05.170
之后

52:05.170 --> 52:07.170
我要去移除之前的类名

52:07.170 --> 52:10.070
再去加上一个新的类名

52:10.070 --> 52:11.470
加上一个新的类名

52:11.470 --> 52:12.070
爱的啊

52:12.070 --> 52:15.290
是爱的

52:15.290 --> 52:16.390
履履这个逻辑哈

52:16.390 --> 52:17.190
来

52:17.190 --> 52:17.890
没关系啊

52:17.890 --> 52:18.990
咱慢慢来说哈

52:18.990 --> 52:20.690
这个课咱们慢慢来说哈

52:20.690 --> 52:21.790
咱来说说一下

52:21.790 --> 52:22.390
你看哈

52:22.390 --> 52:25.390
我当前是蓝色的没问题吧

52:25.390 --> 52:26.590
当前是蓝色没问题

52:26.590 --> 52:27.490
对不对

52:27.490 --> 52:29.990
我说要把它变成是一个白的呀

52:29.990 --> 52:31.190
当前是蓝的

52:31.190 --> 52:33.090
我要把它变成是一个白的

52:33.090 --> 52:33.590
ok

52:33.590 --> 52:35.790
那我们是不是有一个变量

52:35.790 --> 52:38.590
来存放着当前的一个颜色啊

52:38.590 --> 52:40.690
start color是一个不录

52:40.690 --> 52:42.890
那当你变白了的时候

52:42.890 --> 52:45.190
先别说怎么去回到类名这个问题哈

52:45.190 --> 52:47.290
当你去变白了之后

52:47.290 --> 52:50.890
你这个变量就要改成为white了

52:50.890 --> 52:52.790
然后你下次去判断

52:52.790 --> 52:53.790
根据谁来判断呀

52:53.790 --> 52:55.690
根据start color来判断

52:55.690 --> 52:57.090
它如果说是white的话

52:57.090 --> 52:59.490
你就让它是一个不录

52:59.490 --> 53:03.590
不断的去切换它的一个存储的颜色

53:03.590 --> 53:04.290
不是不录

53:04.290 --> 53:04.890
就是white

53:04.890 --> 53:05.490
不是不录

53:05.490 --> 53:06.490
就是white

53:06.490 --> 53:07.290
清楚了吗

53:07.290 --> 53:08.990
然后接着咱们呢

53:08.990 --> 53:10.890
再去移除掉

53:10.890 --> 53:12.390
它现在的这个颜色

53:12.390 --> 53:13.790
你现在不是蓝的吗

53:13.790 --> 53:14.190
ok

53:14.190 --> 53:18.090
那我把你蓝色所对那个类名给移除掉

53:18.090 --> 53:18.790
移除掉之后

53:18.790 --> 53:22.290
我再加上白色所对应的那个类名

53:22.290 --> 53:22.990
清楚了吧

53:22.990 --> 53:23.490
ok

53:23.490 --> 53:25.890
这个就是这个里面的一个逻辑

53:25.890 --> 53:26.690
那咱们呢

53:26.690 --> 53:28.290
对应到代码上是这么写的

53:28.290 --> 53:29.690
但是这么写有点恶心

53:29.690 --> 53:30.890
那换种方法

53:30.890 --> 53:31.690
换种方法

53:31.690 --> 53:32.690
咱首先哈

53:32.690 --> 53:35.890
先把它目前的这个color给保存下来

53:35.890 --> 53:37.290
保存一个preview color

53:37.290 --> 53:38.490
也是所谓的

53:38.490 --> 53:40.190
也是所谓的上一次哈

53:40.190 --> 53:42.290
因为咱们要把它油蓝变白

53:42.290 --> 53:43.990
那在白色状态的时候呢

53:43.990 --> 53:46.390
蓝色就是上一个颜色了哈

53:46.490 --> 53:48.290
那从来从哪来哪样

53:48.290 --> 53:51.190
从this当中的start color里面来拿

53:51.190 --> 53:53.990
通过它来进行一下保存

53:53.990 --> 53:56.390
保存以前的一个颜色

53:56.390 --> 53:59.090
接着我再去更改现在的颜色

53:59.090 --> 54:01.390
因为你想要让它变成白色

54:01.390 --> 54:03.790
所以说你存储的这个变量

54:03.790 --> 54:04.890
start color

54:04.890 --> 54:07.790
就应该由补录换成是一个white了

54:07.790 --> 54:10.490
所以你重新的去设置一下它的值

54:10.490 --> 54:12.190
start color懂于什么呀

54:12.190 --> 54:12.890
判断一下

54:12.890 --> 54:15.590
如果说preview color

54:15.590 --> 54:16.490
它懂于谁

54:16.490 --> 54:18.490
它懂于不录了的话

54:18.490 --> 54:21.590
那么我就让它是一个白颜色

54:21.590 --> 54:22.890
如果说它不是不录

54:22.890 --> 54:23.990
就证明它是白的

54:23.990 --> 54:26.090
让它是一个不录

54:26.090 --> 54:27.190
对不对

54:27.190 --> 54:27.690
ok

54:27.690 --> 54:29.390
一个是以前的一个颜色

54:29.390 --> 54:31.190
一个是现在的颜色

54:31.190 --> 54:32.190
现在要变的颜色

54:32.190 --> 54:33.690
我们都保存出来了

54:33.690 --> 54:34.590
一个是preview color

54:34.590 --> 54:35.590
一个是start color

54:35.590 --> 54:36.890
一个是start color

54:36.890 --> 54:37.390
ok

54:37.390 --> 54:39.190
那现在保存下来了

54:39.190 --> 54:41.390
他们都是指上谈兵的一个状态

54:41.390 --> 54:42.790
因为你保着是变量

54:42.790 --> 54:45.290
你根本就没有去操纵那个dome

54:45.290 --> 54:47.190
它该是啥还是啥

54:47.190 --> 54:48.690
它该是啥还是啥

54:48.690 --> 54:50.390
那现在是不是有操作一下了呀

54:50.390 --> 54:54.590
你是不是得把以前的蓝颜色那个类名给移除掉啊

54:54.590 --> 54:56.690
那蓝颜色类名叫什么呀

54:56.690 --> 54:58.790
叫做start gun不录吧

54:58.790 --> 54:59.790
是不是

54:59.790 --> 55:02.590
那是不是就只要说我在preview color前面

55:02.590 --> 55:04.090
加上一个start gun

55:04.090 --> 55:05.990
这个类名就出来了

55:05.990 --> 55:07.190
这个类名就出来了

55:07.190 --> 55:07.690
ok

55:07.690 --> 55:09.190
那么怎么去移除呢

55:09.190 --> 55:14.120
用一个dome身上的一个class

55:14.120 --> 55:16.020
class list

55:18.330 --> 55:19.430
dome

55:19.430 --> 55:20.230
air

55:20.230 --> 55:21.930
class list

55:21.930 --> 55:23.730
身上的一个remove方法

55:23.730 --> 55:25.730
这个remove方法里面存的

55:25.730 --> 55:26.930
添的是什么呢

55:26.930 --> 55:29.330
添的就是你要去移除的那个类名

55:29.330 --> 55:30.930
那是不是来一个start gun

55:30.930 --> 55:31.930
加上一个谁呀

55:31.930 --> 55:34.030
加上一个preview color

55:34.030 --> 55:34.530
ok

55:34.530 --> 55:35.930
接着你移除完之后

55:35.930 --> 55:39.130
你还要再去加上一个新的类名吧

55:39.130 --> 55:41.430
那就用class list.i的方法

55:41.430 --> 55:42.830
加上一个start gun

55:42.830 --> 55:44.130
然后呢加上一个谁呀

55:44.130 --> 55:46.430
那现在你要去更改的

55:46.430 --> 55:47.730
这样的一个颜色

55:47.730 --> 55:48.330
对不对

55:48.330 --> 55:49.930
那你这样写肯定不行

55:49.930 --> 55:51.330
因为我们这个dome

55:51.330 --> 55:53.330
应该是一个真实的一个dome

55:53.330 --> 55:55.030
所以咱们应该把谁取到啊

55:55.030 --> 55:58.630
把点击开始的这个元素给取到

55:58.630 --> 56:02.230
那还是同样的一个操作哈

56:02.230 --> 56:05.430
让this.ostart

56:05.430 --> 56:06.430
start

56:06.430 --> 56:07.830
懂于

56:07.830 --> 56:11.430
从副元素当中取得的第一个start值

56:11.430 --> 56:13.630
然后呢在下面把dome元素

56:13.630 --> 56:17.330
把这个dome改成是this.ostart

56:17.330 --> 56:18.930
那我们再来看

56:18.930 --> 56:21.130
看这是不是变白了呀

56:21.130 --> 56:22.130
是不是变白了呀

56:22.130 --> 56:23.230
为什么变白了呀

56:23.230 --> 56:25.630
因为我们这个start bound

56:25.630 --> 56:27.130
它执行了一次

56:27.130 --> 56:28.130
在哪执行的呀

56:28.130 --> 56:29.130
在这执行的

56:29.130 --> 56:33.330
那接下来我要让它不断的去执行

56:33.330 --> 56:35.430
每隔300毫秒去执行一次

56:35.430 --> 56:37.530
那我是不是应该移动到这里

56:37.530 --> 56:39.430
来进行一下

56:39.430 --> 56:40.230
调用呢

56:40.230 --> 56:42.230
是不是用self来调用一下

56:44.030 --> 56:44.830
那我们再来看

56:44.830 --> 56:46.930
看这一会儿蓝一会儿白

56:46.930 --> 56:48.130
一会儿蓝一会儿白

56:48.130 --> 56:49.430
一会儿蓝一会儿白

56:49.430 --> 56:52.030
那我们是不是让它有个过度的一个效果呀

56:52.030 --> 56:53.330
那怎么过度啊

56:53.330 --> 56:54.530
用transition

56:54.530 --> 56:55.330
用transition

56:55.330 --> 56:55.730
ok

56:55.730 --> 56:57.730
那现在我们找到start元素

56:57.730 --> 57:00.230
给它来加上一个transition

57:00.230 --> 57:01.830
2.3秒

57:01.830 --> 57:03.630
然后呢让它是一个元素的

57:03.630 --> 57:04.630
那我们再来看

57:04.630 --> 57:05.930
点击开始这个

57:05.930 --> 57:07.030
这个这个

57:07.030 --> 57:09.230
是不是就有这样一个动画的效果了呀

57:09.230 --> 57:10.730
这是不是就完事了呀

57:10.730 --> 57:11.630
对不对

57:11.630 --> 57:12.730
很简单对不对

57:12.730 --> 57:13.230
很简单

57:13.230 --> 57:15.030
就是一个逻辑的一个问题

57:15.030 --> 57:15.530
ok

57:15.530 --> 57:17.430
为什么要过度啊

57:17.430 --> 57:20.330
因为我们想让它慢慢的变大

57:20.330 --> 57:21.530
慢慢的变小

57:21.530 --> 57:22.430
慢慢的变大

57:22.430 --> 57:23.330
慢慢的变小

57:23.330 --> 57:26.230
而不是像我们刚才一样突然的

57:26.230 --> 57:28.330
卡卡的变大变小变大变小

57:28.330 --> 57:29.430
这样太丑了哈

57:29.430 --> 57:30.330
这样太丑了

57:30.330 --> 57:31.530
我们一定要迎合

57:31.530 --> 57:32.930
这样一个用户体验

57:32.930 --> 57:33.930
用户觉得好

57:33.930 --> 57:34.930
咱就觉得好

57:34.930 --> 57:36.830
用户咋说咱就咋整啊

57:38.030 --> 57:39.330
除了lander

57:39.330 --> 57:39.930
还有什么

57:39.930 --> 57:40.730
有很多哈

57:40.730 --> 57:41.530
你可以查一下

57:41.530 --> 57:43.530
有很多的函数可以可以搜一下

57:44.330 --> 57:45.730
看上去没区别吗

57:45.730 --> 57:46.730
多大的区别呀

57:46.730 --> 57:47.630
我的同志啊

57:47.630 --> 57:49.130
我的转身同志哈

57:49.130 --> 57:51.830
这你看我家是长你个过度哈

57:51.830 --> 57:52.830
感觉不到吗

57:52.830 --> 57:54.930
没没没没感吗

57:54.930 --> 57:55.330
看看

57:56.730 --> 57:57.130
看看

57:59.670 --> 58:00.270
ok

58:00.270 --> 58:01.470
有同学说哈

58:01.470 --> 58:02.970
这个弥蒙哈

58:02.970 --> 58:04.470
弥蒙同学哈

58:04.470 --> 58:05.570
弥蒙同学说this

58:05.570 --> 58:06.270
太多了

58:06.270 --> 58:07.770
蒙没关系哈

58:07.770 --> 58:09.070
你现在只要记住

58:09.070 --> 58:10.370
你现在只要记住哈

58:10.370 --> 58:11.170
this

58:11.170 --> 58:12.070
和self

58:12.070 --> 58:13.770
我们现在只要使用的

58:13.770 --> 58:14.870
指的都是谁呢

58:14.870 --> 58:16.170
指的都是布尔的

58:16.170 --> 58:17.670
指的都是布尔的哈

58:17.670 --> 58:18.470
呃

58:18.470 --> 58:20.070
用一节课的时间

58:20.070 --> 58:21.970
跟你去说一下这个this的话呢

58:21.970 --> 58:24.370
可能这一节课就多跟你讲this了

58:24.370 --> 58:25.170
这个课呢

58:25.170 --> 58:26.070
我课下来哈

58:26.070 --> 58:27.570
我会给你一个文档

58:27.570 --> 58:29.170
是专门去写this的

58:29.170 --> 58:30.370
是我自己整理的

58:30.370 --> 58:31.370
然后同时呢

58:31.370 --> 58:33.070
你看完文档也结合着

58:33.070 --> 58:35.270
诚哥的那个课里面的this

58:35.270 --> 58:36.770
来进行一下复习

58:36.770 --> 58:38.770
这样你一套操作下来

58:38.770 --> 58:39.570
对于你来讲

58:39.570 --> 58:41.370
this就应该没有什么问题了

58:41.370 --> 58:42.870
你现在在听课的时候呢

58:42.870 --> 58:43.470
像我说的

58:43.470 --> 58:44.370
你只要记住

58:44.370 --> 58:46.170
我们大概反正是使用this

58:46.170 --> 58:47.670
或者self的地方

58:47.670 --> 58:48.670
用的都是谁

58:48.670 --> 58:50.270
用的都是布尔的

58:50.270 --> 58:51.570
记住就可以了

58:51.570 --> 58:53.370
记住就可以了哈

58:53.370 --> 58:53.870
好了

58:53.870 --> 58:54.670
我们我课下来

58:54.670 --> 58:56.270
会给你们发到全里面去的哈

58:56.270 --> 58:57.970
但是你们要记得提醒我

58:57.970 --> 58:59.770
因为我事太多的真是容易忘了

58:59.770 --> 59:01.970
最近记忆力越来越不好了

59:01.970 --> 59:02.470
好了

59:02.470 --> 59:03.470
咱们下一个

59:03.470 --> 59:05.870
再去处理一下小鸟飞

59:05.870 --> 59:06.670
小鸟飞

59:06.670 --> 59:09.470
那小鸟怎么飞呀

59:09.470 --> 59:11.270
小鸟咋飞呀

59:12.270 --> 59:13.070
是不是所谓的

59:13.070 --> 59:14.870
没有什么非种操作

59:14.870 --> 59:17.170
它就是玩的是视觉差

59:17.170 --> 59:17.670
是不是

59:17.670 --> 59:20.470
你只要让它在背景图片遍布就行了嘛

59:20.470 --> 59:21.970
咱们在上节课当中

59:21.970 --> 59:23.270
怎么去做的

59:23.270 --> 59:25.270
给它设置了一个背景图片

59:25.270 --> 59:26.370
背图片是谁呀

59:26.370 --> 59:27.770
是buzzle pin j

59:27.770 --> 59:28.970
里面有三个图片

59:28.970 --> 59:30.570
小小向上删的翅膀

59:30.570 --> 59:31.570
中间删的翅膀

59:31.570 --> 59:32.570
向下删翅膀

59:32.570 --> 59:34.070
你只要让它不断的

59:34.070 --> 59:36.170
去换这三个图片就可以了

59:36.170 --> 59:37.770
不断的换三个图片就可以了

59:37.770 --> 59:38.570
也就是说

59:38.570 --> 59:40.770
不断的去更改

59:40.870 --> 59:42.270
它所谓的一个

59:42.270 --> 59:45.870
background position-ax

59:45.870 --> 59:47.470
还是用的position

59:47.470 --> 59:48.070
对不对

59:48.070 --> 59:49.370
ok好了

59:49.370 --> 59:50.570
那咱们来做一下吧

59:50.570 --> 59:52.670
找到小鸟飞的这个函数

59:54.070 --> 59:55.170
这是bird fly

59:55.170 --> 59:56.070
小鸟飞哈

59:57.570 --> 59:58.470
小鸟飞

59:58.470 --> 59:58.870
ok

01:00:00.070 --> 01:00:01.770
这里面其实也很简单

01:00:01.770 --> 01:00:04.870
我是不是还是得根据一个

01:00:04.870 --> 01:00:07.370
一个数字来进行判断啊

01:00:07.370 --> 01:00:09.470
我当前执行的是第几次

01:00:09.470 --> 01:00:10.370
如果说是

01:00:10.370 --> 01:00:11.370
第一次的话

01:00:11.370 --> 01:00:12.770
ok我使用的呢

01:00:12.770 --> 01:00:14.270
是第几个

01:00:14.270 --> 01:00:15.570
是第一个图片

01:00:15.570 --> 01:00:16.570
执行的第二次

01:00:16.570 --> 01:00:17.770
我使用第二图片

01:00:17.770 --> 01:00:18.770
执行的第三次呢

01:00:18.770 --> 01:00:20.570
我再回去使用第零个图片

01:00:20.570 --> 01:00:22.270
咱们从零一二这么说啊

01:00:22.270 --> 01:00:23.570
从零一二这么说

01:00:23.570 --> 01:00:24.070
对不对

01:00:24.070 --> 01:00:26.370
那在哪里有技术啊

01:00:26.370 --> 01:00:27.870
这里面是不是有技术啊

01:00:27.870 --> 01:00:29.870
counter 有技术

01:00:29.870 --> 01:00:31.070
在这个function当中

01:00:31.070 --> 01:00:33.670
每次都会去进行一个加加

01:00:33.670 --> 01:00:35.370
每次都会去进行一个加加

01:00:35.370 --> 01:00:36.470
那只要说

01:00:36.470 --> 01:00:38.770
我每一次在这个

01:00:38.770 --> 01:00:40.070
这个函数当中

01:00:40.070 --> 01:00:42.870
在定时器的这个函数当中去调用一下实验

01:00:42.870 --> 01:00:45.070
调一下波的fly是不是就可以了呀

01:00:45.070 --> 01:00:45.670
对不对

01:00:45.670 --> 01:00:46.470
ok

01:00:46.470 --> 01:00:49.570
我这我也让他300毫秒执行一次

01:00:49.570 --> 01:00:51.470
调用一下他这个波的fly

01:00:51.470 --> 01:00:52.970
然后每一次的时候呢

01:00:52.970 --> 01:00:54.470
都给他传递一个参数

01:00:54.470 --> 01:00:55.270
是counter

01:00:55.270 --> 01:00:56.670
那这样就有技术了

01:00:56.670 --> 01:00:58.070
我就知道他应该

01:00:58.070 --> 01:01:00.870
他应该是第几次执行这个函数

01:01:00.870 --> 01:01:03.070
我就能够对应的拿到

01:01:03.070 --> 01:01:05.870
他应该去使用第几个图片

01:01:05.870 --> 01:01:07.970
作为一个背景图片了

01:01:07.970 --> 01:01:10.670
比如他的位置应该挪到哪去了

01:01:10.670 --> 01:01:11.470
ok

01:01:11.470 --> 01:01:12.270
那这块呢

01:01:12.270 --> 01:01:12.970
想一下吧

01:01:12.970 --> 01:01:14.470
逻辑是什么样子的

01:01:14.470 --> 01:01:16.070
逻辑是不是还蛮简单的呀

01:01:16.070 --> 01:01:18.670
一句话我就能够搞定

01:01:18.670 --> 01:01:20.470
接受了一个counter参数

01:01:20.470 --> 01:01:20.970
ok

01:01:20.970 --> 01:01:22.070
我这个counter

01:01:22.070 --> 01:01:23.870
每次我都摸上一个三

01:01:23.870 --> 01:01:25.070
摸上三干嘛呀

01:01:25.070 --> 01:01:26.770
因为我有三张图片

01:01:26.770 --> 01:01:28.270
三个图片拼一起了

01:01:28.270 --> 01:01:29.370
是不是就三个图片啊

01:01:29.370 --> 01:01:31.270
我通过这个摸取的余数

01:01:31.270 --> 01:01:34.270
我可以知道当前是执行的第几次

01:01:34.270 --> 01:01:34.770
对不对

01:01:34.770 --> 01:01:35.570
执行的第几次

01:01:35.570 --> 01:01:37.170
然后接着我去更改一下

01:01:37.170 --> 01:01:39.770
他图片的位置呈上一个负的30

01:01:39.770 --> 01:01:41.470
为什么呈上一个负的30呢

01:01:41.470 --> 01:01:43.170
因为我这张图片

01:01:43.170 --> 01:01:45.570
他的一个总的宽度是90

01:01:45.570 --> 01:01:46.670
除上一个3

01:01:46.670 --> 01:01:48.470
他可不就是30吗

01:01:48.470 --> 01:01:50.670
除出一个负的这个图片

01:01:50.670 --> 01:01:51.670
是不是就使用

01:01:51.670 --> 01:01:54.670
这个元素就使用这个位置作为一个图片了

01:01:54.670 --> 01:01:57.470
再再去使用一个负的60呢

01:01:57.470 --> 01:01:59.870
就使用这块去作为一个图片了

01:01:59.870 --> 01:02:00.870
一个背景了

01:02:00.870 --> 01:02:01.470
对不对

01:02:01.470 --> 01:02:02.070
ok

01:02:02.070 --> 01:02:05.270
那接着你就你就去给那个元素去设置一下

01:02:05.270 --> 01:02:05.770
就可以了

01:02:06.170 --> 01:02:06.670
谁呀

01:02:06.670 --> 01:02:07.470
布尔德哈

01:02:07.470 --> 01:02:08.170
第四点

01:02:08.170 --> 01:02:09.170
哦布尔德

01:02:09.170 --> 01:02:10.170
这样的一个元素

01:02:10.170 --> 01:02:10.970
他当中的一个

01:02:10.970 --> 01:02:11.770
style点

01:02:11.770 --> 01:02:12.370
back

01:02:12.370 --> 01:02:13.170
grownup

01:02:13.170 --> 01:02:14.070
prediction

01:02:14.070 --> 01:02:14.770
x

01:02:14.770 --> 01:02:15.570
懂于谁呀

01:02:15.570 --> 01:02:16.570
懂于当前的

01:02:16.570 --> 01:02:17.070
counter

01:02:17.070 --> 01:02:17.770
摸上3

01:02:17.770 --> 01:02:19.170
乘以一个负的30

01:02:19.170 --> 01:02:20.870
加上一个px

01:02:20.870 --> 01:02:22.370
那咱们来看一下他

01:02:22.370 --> 01:02:23.470
看这

01:02:23.470 --> 01:02:24.170
哎

01:02:24.170 --> 01:02:25.470
疯了

01:02:25.470 --> 01:02:27.570
为什么疯了呢

01:02:27.570 --> 01:02:29.470
咱们写的其实没什么毛病

01:02:29.470 --> 01:02:31.770
那他为什么会有这样的效果呀

01:02:31.770 --> 01:02:32.570
transition

01:02:32.570 --> 01:02:33.470
搞的

01:02:33.470 --> 01:02:34.470
transition搞的

01:02:34.470 --> 01:02:35.670
因为我们这些transition呢

01:02:35.770 --> 01:02:38.870
是当所有的钥匙改变的时候

01:02:38.870 --> 01:02:39.770
有一个过渡

01:02:39.770 --> 01:02:41.070
那咱现在不所有了

01:02:41.070 --> 01:02:42.670
我只top改变的时候

01:02:42.670 --> 01:02:43.470
让他有过渡

01:02:43.470 --> 01:02:44.670
我backgrownprediction

01:02:44.670 --> 01:02:46.870
变的话我不去过渡不就好了吗

01:02:46.870 --> 01:02:47.670
那你看现在

01:02:47.670 --> 01:02:50.170
这小鸟是不是就去删了吃板了呀

01:02:50.170 --> 01:02:50.670
对不对

01:02:50.670 --> 01:02:51.670
就删了吃板了

01:02:51.670 --> 01:02:52.270
ok

01:02:52.270 --> 01:02:53.570
这很简单的一个逻辑

01:02:53.570 --> 01:02:54.970
咱们就把它给搞定了

01:02:54.970 --> 01:02:55.570
对不对

01:02:55.570 --> 01:02:56.170
好了

01:02:56.170 --> 01:02:57.970
那初始的一个画面

01:02:57.970 --> 01:02:58.870
咱们完事了

01:02:58.870 --> 01:02:59.870
完事了之后呢

01:02:59.870 --> 01:03:01.070
咱们先下去写

01:03:01.070 --> 01:03:01.970
我想玩游戏

01:03:01.970 --> 01:03:04.370
我是不是点击这个点击开始啊

01:03:04.370 --> 01:03:05.470
那你点击开始

01:03:05.470 --> 01:03:06.870
有个细节上的问题

01:03:06.870 --> 01:03:08.670
我得给你去加个小手

01:03:08.670 --> 01:03:09.770
子这块来一个

01:03:09.770 --> 01:03:10.970
cursor pointer

01:03:10.970 --> 01:03:11.770
加小手

01:03:11.770 --> 01:03:12.870
加小手了之后

01:03:12.870 --> 01:03:14.870
我要去让小鸟

01:03:15.670 --> 01:03:16.470
在哪呢

01:03:16.470 --> 01:03:18.670
出现在屏幕的左侧

01:03:18.670 --> 01:03:19.970
出现在这一块

01:03:19.970 --> 01:03:21.470
那所以说我现在啊

01:03:21.470 --> 01:03:22.470
要去干嘛

01:03:23.370 --> 01:03:24.170
要去干嘛

01:03:25.070 --> 01:03:27.370
要去监听一下世界了

01:03:28.170 --> 01:03:29.770
监听一下世界了

01:03:30.570 --> 01:03:32.370
那怎么去监听世界啊

01:03:32.370 --> 01:03:34.270
你要监听多少个世界啊

01:03:34.370 --> 01:03:36.670
其实咱们这里面的世界还挺多的

01:03:36.670 --> 01:03:37.670
怎么多呢

01:03:37.670 --> 01:03:39.670
你点击开始游戏

01:03:39.670 --> 01:03:41.370
他应该去执行一个逻辑

01:03:41.370 --> 01:03:42.170
其次是

01:03:42.170 --> 01:03:45.570
当你未来去点击EL复原宿的时候

01:03:45.570 --> 01:03:47.370
他要去执行一些逻辑

01:03:47.370 --> 01:03:49.570
到最后你点击这个重新开始

01:03:49.570 --> 01:03:51.270
还要再去执行一个逻辑

01:03:51.270 --> 01:03:52.370
所以我们要去执行

01:03:52.370 --> 01:03:54.370
三个关于世界的函数

01:03:54.370 --> 01:03:55.070
那我们呢

01:03:55.070 --> 01:03:58.170
也来写一个统一的一个函数

01:03:58.170 --> 01:03:59.170
来进行管理

01:03:59.170 --> 01:04:00.270
那一般呢

01:04:00.270 --> 01:04:01.370
都叫做handle

01:04:04.500 --> 01:04:07.200
在这里面让所有关于世界的函数

01:04:07.200 --> 01:04:08.300
在这里来执行

01:04:08.300 --> 01:04:08.700
那么呢

01:04:08.700 --> 01:04:11.300
我就需要在因利他这个函数当中

01:04:11.300 --> 01:04:12.900
来执行一下handle

01:04:14.300 --> 01:04:14.800
ok

01:04:14.800 --> 01:04:15.200
接着呢

01:04:15.200 --> 01:04:16.500
我来写一个函数

01:04:16.500 --> 01:04:18.300
叫做handle start

01:04:18.300 --> 01:04:20.100
比如我去点击

01:04:20.100 --> 01:04:23.000
start这个元素时候执行的一个逻辑

01:04:23.000 --> 01:04:25.300
那在这里面数据拿到这个ostart

01:04:25.300 --> 01:04:27.400
去监听一下他的一个点击事件

01:04:27.400 --> 01:04:29.000
让他去董于一个

01:04:29.000 --> 01:04:30.100
执行一个函数

01:04:30.100 --> 01:04:31.200
只要你点他了

01:04:31.200 --> 01:04:32.400
就去执行这个函数

01:04:32.400 --> 01:04:33.600
ok 我来console一下

01:04:33.600 --> 01:04:35.000
console点了给一个叉叉叉

01:04:36.000 --> 01:04:38.200
然后让他这个handle start

01:04:38.200 --> 01:04:40.000
在handle里面来执行一下

01:04:42.460 --> 01:04:43.960
点击叉叉叉叉

01:04:43.960 --> 01:04:45.260
是不是就打印出来了呀

01:04:45.260 --> 01:04:45.960
打印出来了

01:04:45.960 --> 01:04:46.560
ok

01:04:46.560 --> 01:04:48.260
我看同学们说什么呢

01:04:48.260 --> 01:04:50.260
有这个123 321

01:04:50.260 --> 01:04:52.060
123 321这样的一个效果

01:04:52.060 --> 01:04:52.860
没有关系

01:04:52.860 --> 01:04:56.060
如果说你想要让这样子去进行

01:04:56.060 --> 01:04:57.260
煽动翅膀的话

01:04:57.260 --> 01:04:58.660
你只要去调整一下

01:04:58.660 --> 01:05:00.460
刚才的这个逻辑就可以了

01:05:00.460 --> 01:05:02.060
算一下算一下

01:05:02.060 --> 01:05:04.260
可以刻下把这个当做作业

01:05:04.260 --> 01:05:05.260
来写一下

01:05:05.260 --> 01:05:05.960
刻上的话呢

01:05:05.960 --> 01:05:08.160
咱们就先不去搞这个小细节了

01:05:08.160 --> 01:05:10.160
咱们继续往上往下去讲

01:05:10.160 --> 01:05:11.160
往下去讲

01:05:11.160 --> 01:05:11.560
好了

01:05:12.560 --> 01:05:13.460
那这一块

01:05:13.460 --> 01:05:15.360
咱们来思考一下

01:05:15.360 --> 01:05:16.560
来思考一下

01:05:16.560 --> 01:05:18.960
我点击开始游戏的之后

01:05:18.960 --> 01:05:20.960
我应该怎么去做

01:05:20.960 --> 01:05:23.260
首先你点击开始

01:05:23.260 --> 01:05:26.160
这个元素要变煤吧

01:05:26.160 --> 01:05:27.560
他说就不在了呀

01:05:27.560 --> 01:05:28.960
其次是什么

01:05:28.960 --> 01:05:30.560
其次是你那个

01:05:30.560 --> 01:05:31.660
看着哈

01:05:31.660 --> 01:05:32.460
分数

01:05:32.460 --> 01:05:33.860
它是不是得出现了呀

01:05:33.860 --> 01:05:35.860
上面那个分数是不是得出现了呀

01:05:35.860 --> 01:05:38.660
咱先把这两个元素给搞定哈

01:05:38.660 --> 01:05:40.760
把这两个元素给搞定

01:05:40.760 --> 01:05:41.460
ok

01:05:41.460 --> 01:05:43.960
那首先我得来去找到谁了呀

01:05:43.960 --> 01:05:47.760
找到这个all start这样的一个元素

01:05:47.760 --> 01:05:49.360
all start这样的一个元素

01:05:49.360 --> 01:05:52.060
让他的一个style.display

01:05:52.060 --> 01:05:53.260
等于一个难

01:05:53.260 --> 01:05:54.460
那我通过谁去找啊

01:05:54.460 --> 01:05:55.960
是不是还得通过this呀

01:05:55.960 --> 01:05:57.160
所以咱们来保存一下

01:05:57.160 --> 01:05:59.460
or yourself等于一个this

01:05:59.460 --> 01:06:02.860
接着在这里self.allstart.seller

01:06:02.960 --> 01:06:04.760
style.display等于一个难

01:06:04.760 --> 01:06:06.060
那咱们瞅一瞅

01:06:06.060 --> 01:06:07.660
来点击变没了

01:06:07.660 --> 01:06:08.660
是不是点击变没了

01:06:08.660 --> 01:06:11.060
其次是score元素得出现

01:06:11.060 --> 01:06:13.060
那咱们一定把score元素给拿到

01:06:14.360 --> 01:06:15.660
拿到一个oscore

01:06:18.080 --> 01:06:23.180
等于选择了一个名为score的第一个元素

01:06:23.180 --> 01:06:24.880
让这个元素呢出现

01:06:25.380 --> 01:06:29.280
那就是self.oscore

01:06:30.080 --> 01:06:33.980
点style.display等于一个block

01:06:34.080 --> 01:06:35.180
其次是什么

01:06:35.180 --> 01:06:37.680
天空要移动加快

01:06:37.980 --> 01:06:39.580
天空要移动加快了

01:06:39.580 --> 01:06:40.280
同学们

01:06:40.280 --> 01:06:41.480
怎么去加快呀

01:06:41.480 --> 01:06:43.080
刚才咱们怎么说的

01:06:43.580 --> 01:06:44.380
怎么说的

01:06:44.380 --> 01:06:45.680
我们是不是说

01:06:45.680 --> 01:06:46.180
哎

01:06:46.180 --> 01:06:47.980
我们设置了一个元素

01:06:47.980 --> 01:06:50.180
叫做score step

01:06:50.180 --> 01:06:52.480
他的值只要变大了

01:06:52.480 --> 01:06:54.680
我天空移动的就变快了

01:06:54.980 --> 01:06:55.580
是不是

01:06:55.580 --> 01:06:57.180
那我让他换一个数值

01:06:57.180 --> 01:07:01.480
我让self.score step

01:07:01.980 --> 01:07:02.780
score

01:07:03.680 --> 01:07:05.580
snap等于一个5

01:07:05.580 --> 01:07:06.980
那这样他就变快了

01:07:06.980 --> 01:07:09.880
其次是小鸟要去到左边

01:07:10.380 --> 01:07:12.080
要去到左边

01:07:12.080 --> 01:07:14.780
那去到左边该怎么去弄呢

01:07:16.180 --> 01:07:17.480
换一下life的值嘛

01:07:17.480 --> 01:07:21.780
是不是self.oscore.style.life

01:07:21.780 --> 01:07:22.880
给他一个固定值

01:07:22.880 --> 01:07:24.780
让他逗一个80像素

01:07:24.780 --> 01:07:26.780
那这样子咱们再来看看

01:07:26.780 --> 01:07:27.780
点击开始

01:07:27.780 --> 01:07:28.780
他在这了

01:07:28.780 --> 01:07:30.180
不断的去进行晃动

01:07:30.180 --> 01:07:31.880
天空移动变快了

01:07:31.880 --> 01:07:33.480
分数就出来了

01:07:33.480 --> 01:07:34.180
咱们再看一下

01:07:34.180 --> 01:07:35.080
来点击

01:07:35.680 --> 01:07:36.280
是不是

01:07:36.280 --> 01:07:36.780
OK

01:07:36.780 --> 01:07:39.280
但是现在这里面有一个小瑕疵

01:07:39.280 --> 01:07:40.080
什么瑕疵呢

01:07:40.080 --> 01:07:41.080
再来瞅一瞅

01:07:41.180 --> 01:07:41.780
看这

01:07:41.780 --> 01:07:43.180
start这个元素

01:07:43.880 --> 01:07:45.880
他仍然在干嘛

01:07:46.280 --> 01:07:47.280
他仍然在干嘛

01:07:47.580 --> 01:07:50.780
在不断的去改变他的class

01:07:50.780 --> 01:07:51.780
小鸟元素

01:07:51.780 --> 01:07:56.480
他仍然在不断的去让它是2202202206

01:07:56.480 --> 01:07:58.080
不断的去进行跳动

01:07:58.280 --> 01:07:59.380
其实这两个动画

01:07:59.380 --> 01:08:01.180
我们已经不需要了

01:08:02.280 --> 01:08:03.480
你让他这样子跳动

01:08:03.480 --> 01:08:05.080
好像是你说没有关系

01:08:05.080 --> 01:08:06.480
反正start一个元素

01:08:06.480 --> 01:08:07.880
也不出现在屏幕上

01:08:07.880 --> 01:08:09.080
他愿意怎么跳怎么跳

01:08:09.080 --> 01:08:10.180
没跟我没关系

01:08:10.180 --> 01:08:10.880
但是同学们

01:08:10.880 --> 01:08:12.380
还一定要记住一点

01:08:12.580 --> 01:08:14.380
咱们这样的一个外部应用

01:08:14.480 --> 01:08:16.780
一定要去尽量的

01:08:16.780 --> 01:08:18.180
少操作道目

01:08:18.180 --> 01:08:20.780
因为操作道目是非常非常浪费性能的

01:08:20.880 --> 01:08:23.180
在咱们这个前端城市

01:08:23.180 --> 01:08:24.980
前端工程师的一个心理

01:08:25.080 --> 01:08:26.080
就是我宁可

01:08:26.080 --> 01:08:27.680
我去操作一万次

01:08:27.680 --> 01:08:28.780
一千万次

01:08:28.780 --> 01:08:30.580
一千次或一万次架子

01:08:30.680 --> 01:08:32.080
我只来好多个运算

01:08:32.080 --> 01:08:33.880
我也不想去操作一次道目

01:08:33.880 --> 01:08:35.580
因为他确实很耗费性能

01:08:35.580 --> 01:08:36.580
很耗费性能

01:08:36.980 --> 01:08:38.280
所以这块怎么办呢

01:08:38.680 --> 01:08:39.480
很简单

01:08:39.480 --> 01:08:41.680
你不是开始游戏了吗

01:08:41.680 --> 01:08:42.280
是不是

01:08:42.280 --> 01:08:44.080
那我只要开始游戏了

01:08:44.080 --> 01:08:45.880
你这里面的两个函数

01:08:45.880 --> 01:08:46.880
哪两个函数啊

01:08:46.880 --> 01:08:48.080
不是这样不和start

01:08:48.080 --> 01:08:50.080
start bound就别执行了

01:08:50.080 --> 01:08:51.480
就别执行了

01:08:51.480 --> 01:08:52.180
对不对

01:08:52.880 --> 01:08:53.880
是这样的吧

01:08:54.080 --> 01:08:55.480
那怎么怎么来呢

01:08:55.480 --> 01:08:57.180
是不是Ave判断一下呀

01:08:57.180 --> 01:08:57.880
ok好了

01:08:57.880 --> 01:08:59.180
那怎么来想个思路

01:08:59.180 --> 01:09:00.980
他1点击

01:09:00.980 --> 01:09:02.580
他们两个就不执行了

01:09:02.580 --> 01:09:05.280
那我是不是可以用一个变量来控制他

01:09:05.580 --> 01:09:06.780
用一个变来控制他

01:09:06.780 --> 01:09:08.180
所以这块来写个变量

01:09:08.180 --> 01:09:10.280
叫做start flag

01:09:11.280 --> 01:09:13.180
初始的时候是false

01:09:13.580 --> 01:09:17.280
他来存放着当前游戏是否开始

01:09:17.880 --> 01:09:19.980
游戏一开始说没开始吧

01:09:19.980 --> 01:09:21.680
所以他的状态呢是false

01:09:21.680 --> 01:09:23.480
那一旦游戏开始了

01:09:23.480 --> 01:09:26.880
我就把他的状态值变成是一个处就可以了

01:09:26.880 --> 01:09:27.880
那怎么来变一下

01:09:27.980 --> 01:09:28.980
我在这里面

01:09:28.980 --> 01:09:30.380
让self

01:09:30.680 --> 01:09:33.580
点start flag等于一个处

01:09:34.480 --> 01:09:38.780
接着我们再去执行这两个函数之前判断一下

01:09:38.980 --> 01:09:42.480
如果说当前self当中的start flag

01:09:42.480 --> 01:09:44.680
他为false的时候

01:09:44.780 --> 01:09:47.680
哎我才让他们两个去执行

01:09:47.680 --> 01:09:49.580
为处了我就不执行了

01:09:49.580 --> 01:09:51.980
所以说咱们这块呢就来包裹一下

01:09:51.980 --> 01:09:53.880
咱们再来看来点击开始

01:09:54.180 --> 01:09:54.680
看这

01:09:55.180 --> 01:09:57.180
top 220一直都没变

01:09:57.180 --> 01:10:00.180
start的这块也不再去进行个闪动了

01:10:00.180 --> 01:10:01.680
这块是不是就完事了呀

01:10:01.680 --> 01:10:03.280
一个锁就搞定了

01:10:03.380 --> 01:10:05.180
对不对一个锁就搞定了

01:10:06.180 --> 01:10:08.480
截止的目前为止有什么问题吗

01:10:08.780 --> 01:10:09.780
有什么问题吗

01:10:13.200 --> 01:10:14.300
有没有什么问题

01:10:14.800 --> 01:10:16.100
截止的目前为止

01:10:21.460 --> 01:10:22.360
没有问题ok

01:10:22.360 --> 01:10:25.060
那咱们呢再往下来写一个动画

01:10:25.160 --> 01:10:26.160
来写一个动画

01:10:26.460 --> 01:10:27.060
你看看

01:10:27.560 --> 01:10:29.160
来点击重新开始

01:10:29.460 --> 01:10:32.060
哎看着看小鸟哈看小鸟

01:10:32.160 --> 01:10:33.160
他是怎么样的

01:10:33.460 --> 01:10:35.160
他是往下落的

01:10:35.660 --> 01:10:37.160
他是往下落的

01:10:37.360 --> 01:10:39.360
所以说咱们也应该来写一个

01:10:39.360 --> 01:10:42.260
小鸟往下落的动画

01:10:42.760 --> 01:10:44.060
那动画叫什么呢

01:10:44.060 --> 01:10:45.260
叫bird of job

01:10:45.560 --> 01:10:47.160
你看这个英文吧

01:10:47.660 --> 01:10:48.560
有点重要哈

01:10:48.560 --> 01:10:49.760
但是也不是很重要

01:10:49.760 --> 01:10:51.360
如果这你去写函数的时候

01:10:51.360 --> 01:10:53.060
你不知道起什么名字没关系啊

01:10:53.060 --> 01:10:54.760
你百度翻译一下就可以了

01:10:54.760 --> 01:10:57.260
因为我在我我我英语也不是很好啊

01:10:57.260 --> 01:10:58.260
我四级没过

01:10:58.760 --> 01:11:01.460
就就这这个自爆了还我四级就是没过

01:11:01.460 --> 01:11:02.860
所以因为我英文不是很好

01:11:02.960 --> 01:11:05.460
当你呢叫不准你要去给他起个什么名字的时候

01:11:05.560 --> 01:11:06.860
借助百度翻译吗

01:11:06.860 --> 01:11:10.360
把汉语把这个这个中文书进去

01:11:10.360 --> 01:11:11.860
然后翻译一下就可以了哈

01:11:11.960 --> 01:11:14.060
ok来一个bird of job小鸟落哈

01:11:14.760 --> 01:11:15.560
小鸟往下落

01:11:15.660 --> 01:11:17.560
那小鸟怎么往下落呀

01:11:17.660 --> 01:11:19.460
你怎么能够去操作这个小鸟

01:11:19.460 --> 01:11:22.260
让它往下去往下去进行飞呢

01:11:22.960 --> 01:11:23.860
怎么去飞呀

01:11:24.660 --> 01:11:26.560
那你是不是让这个top值

01:11:26.660 --> 01:11:28.660
不断的变大就可以了

01:11:29.360 --> 01:11:32.460
是不是让这个top值追击

01:11:32.560 --> 01:11:35.360
让这个top值不断变大是不是就ok了呀

01:11:35.560 --> 01:11:36.660
对不对好了

01:11:36.660 --> 01:11:39.160
那咱们只要在这个bird of job当中

01:11:39.160 --> 01:11:42.460
不断的去加这个 job值啊

01:11:42.460 --> 01:11:43.960
加这个top值ok

01:11:43.960 --> 01:11:45.260
但是现在有一个问题

01:11:45.260 --> 01:11:47.360
你看看我这个小鸟落

01:11:47.560 --> 01:11:47.960
哎

01:11:47.960 --> 01:11:48.560
它是

01:11:49.360 --> 01:11:52.160
有一个类似于重力的感觉

01:11:52.160 --> 01:11:53.960
越来越快越来越快

01:11:53.960 --> 01:11:56.460
所以你每一次去加的这个值

01:11:56.460 --> 01:11:57.960
应该是不固定的

01:11:58.260 --> 01:11:59.460
你最最开始

01:11:59.560 --> 01:12:01.460
你可能往下追一向速

01:12:01.660 --> 01:12:02.360
加向速

01:12:02.460 --> 01:12:04.660
然后呢第二第二次执行的时候

01:12:04.660 --> 01:12:05.360
加两次速

01:12:05.360 --> 01:12:06.960
然后三次速四次速五次速

01:12:06.960 --> 01:12:07.960
这样去累积

01:12:07.960 --> 01:12:11.560
能够模拟出来一个类似跳楼的一个感觉

01:12:11.560 --> 01:12:12.360
还追下去了

01:12:12.360 --> 01:12:13.860
不断的速度变快

01:12:14.060 --> 01:12:15.360
不断的速度变快

01:12:15.660 --> 01:12:16.160
对不对

01:12:16.660 --> 01:12:17.860
所以这块怎么办呢

01:12:18.160 --> 01:12:22.160
咱们呀来用一个变量来存放着它

01:12:22.160 --> 01:12:23.460
用一个变量存放着它

01:12:23.560 --> 01:12:26.060
写一个变量叫做bird of step y

01:12:26.060 --> 01:12:28.760
你每一次往下落的一个步传

01:12:30.260 --> 01:12:31.260
都放一起吧

01:12:31.560 --> 01:12:34.660
bird of step y

01:12:34.960 --> 01:12:36.760
值出使的时候为一个零

01:12:36.760 --> 01:12:40.260
然后你每次去jump去执行jump的时候

01:12:40.260 --> 01:12:41.460
你都让它怎么样

01:12:41.460 --> 01:12:46.060
让它去来一个加加加加加一个dece

01:12:46.060 --> 01:12:48.960
当中的bird of step y

01:12:48.960 --> 01:12:50.960
那它是不是自身加一了呀

01:12:50.960 --> 01:12:52.760
那你自身加一你要给谁呀

01:12:53.160 --> 01:12:53.860
给谁呀

01:12:54.160 --> 01:12:58.160
咱们当存放着当前小鸟的一个top值的

01:12:58.160 --> 01:12:59.660
那个值在哪呢

01:12:59.860 --> 01:13:00.660
回忆一下

01:13:01.360 --> 01:13:02.460
是不是在这呢

01:13:02.460 --> 01:13:03.760
显而易见吧

01:13:03.860 --> 01:13:04.860
我bird of step

01:13:04.860 --> 01:13:07.260
就是存放着我当前小鸟

01:13:07.260 --> 01:13:09.360
它所在的那个位置

01:13:09.360 --> 01:13:11.160
y方向上的一个位置

01:13:11.160 --> 01:13:13.560
那我是不是只要让当前的

01:13:13.560 --> 01:13:17.760
dece.bird的top值去怎么样

01:13:17.860 --> 01:13:21.760
加等于一个加加dece.bird的step y

01:13:22.260 --> 01:13:22.860
对不对

01:13:23.460 --> 01:13:27.360
加等于一个加过了一之后的bird of step y

01:13:27.460 --> 01:13:28.560
接着怎么样

01:13:28.660 --> 01:13:33.860
让dece.bird的dece.top等于一个谁呀

01:13:33.960 --> 01:13:36.360
等于dece.bird的top

01:13:37.160 --> 01:13:39.060
加上一个px

01:13:40.160 --> 01:13:43.260
ok 那这个应该在哪去执行

01:13:44.160 --> 01:13:45.060
bird of jump

01:13:45.160 --> 01:13:46.460
bird of jump在哪去执行

01:13:46.660 --> 01:13:49.460
是不是也应该在那个animate里面来执行啊

01:13:49.460 --> 01:13:51.360
每隔30毫秒执行一次

01:13:51.360 --> 01:13:52.060
ok好了

01:13:52.060 --> 01:13:55.060
那这块呢来一个调用一个bird of jump

01:13:55.160 --> 01:13:57.660
那这个bird of jump执行的时机是什么

01:13:57.660 --> 01:14:01.160
是当你的游戏开始了的时候

01:14:01.160 --> 01:14:02.660
所以咱们仍然去判断一下

01:14:02.660 --> 01:14:05.260
如果说cf当中的start flag

01:14:05.260 --> 01:14:06.260
它为处了

01:14:06.260 --> 01:14:08.760
我再去执行这个函数

01:14:09.360 --> 01:14:10.060
ok 那好

01:14:10.060 --> 01:14:11.160
咱们来看一看

01:14:11.360 --> 01:14:13.260
来点击开始哎

01:14:13.460 --> 01:14:14.460
是不是就下来了

01:14:14.760 --> 01:14:16.260
对了点击开始再来看

01:14:16.460 --> 01:14:17.460
哎下来了

01:14:17.460 --> 01:14:18.460
但是这块啊

01:14:18.660 --> 01:14:20.160
会有一点点小问题

01:14:20.460 --> 01:14:21.560
什么问题呢

01:14:21.860 --> 01:14:25.160
就是其实它跟这个下去的感觉是不一样的

01:14:26.260 --> 01:14:27.260
它有点飘啊

01:14:27.260 --> 01:14:29.860
你们可能现在看的不太出来哈

01:14:29.960 --> 01:14:31.260
这块咱就先不说

01:14:31.260 --> 01:14:33.360
先留一个小的一个悬念哈

01:14:33.360 --> 01:14:35.760
未来可能会发现有这样的一个问题

01:14:35.860 --> 01:14:37.360
咱们碰着时候再说吧

01:14:37.560 --> 01:14:40.060
ok 那现在jump的这个操作

01:14:40.060 --> 01:14:41.560
咱是不是就做完了呀

01:14:41.960 --> 01:14:42.760
小点落

01:14:43.060 --> 01:14:44.160
能够正常落了

01:14:44.160 --> 01:14:44.660
是不是

01:14:44.660 --> 01:14:46.860
那在落下的时候你会发现

01:14:46.960 --> 01:14:49.260
它都落到18层地域去了

01:14:49.960 --> 01:14:50.860
到哪去了

01:14:51.360 --> 01:14:53.060
200层地域都到了吧

01:14:53.060 --> 01:14:53.660
是不是

01:14:53.660 --> 01:14:56.160
那只要说你落到地上了

01:14:56.360 --> 01:14:57.260
落到地上了

01:14:57.260 --> 01:14:58.660
你是不是得死啊

01:14:58.860 --> 01:15:00.060
你不能说死啊

01:15:00.060 --> 01:15:01.160
死这个词太点啥了

01:15:01.160 --> 01:15:02.860
你是不是游戏得结束啊

01:15:03.060 --> 01:15:03.660
对不对

01:15:04.160 --> 01:15:05.260
所以说咱们要怎么办

01:15:05.660 --> 01:15:08.360
进行一下碰撞检测

01:15:08.960 --> 01:15:09.960
咱们今天呢

01:15:10.060 --> 01:15:11.860
进行什么碰撞检测呢

01:15:12.060 --> 01:15:13.860
进行一下这个

01:15:15.060 --> 01:15:16.960
落地和上天的一个碰撞检测

01:15:17.060 --> 01:15:18.660
柱子咱明天再做哈

01:15:18.760 --> 01:15:19.660
咱明天再做

01:15:19.760 --> 01:15:21.760
所以咱们这块来写一个函数

01:15:22.460 --> 01:15:23.160
写个函数

01:15:23.260 --> 01:15:24.360
当你小鸟

01:15:24.460 --> 01:15:26.460
账户降落落的时候

01:15:26.560 --> 01:15:27.860
来执行一个函数

01:15:27.960 --> 01:15:29.460
叫做炸脂

01:15:29.960 --> 01:15:30.520
判断

01:15:30.560 --> 01:15:31.160
nok

01:15:31.260 --> 01:15:31.760
检测

01:15:32.460 --> 01:15:33.460
看这名气的哈

01:15:33.460 --> 01:15:33.860
炸脂

01:15:33.860 --> 01:15:34.460
nok

01:15:34.660 --> 01:15:35.260
进行一下

01:15:35.260 --> 01:15:36.660
判断一个碰撞检测

01:15:36.660 --> 01:15:36.760
哈

01:15:36.760 --> 01:15:37.160
ok

01:15:37.160 --> 01:15:39.060
那我们来把这个函数写在这

01:15:39.660 --> 01:15:40.260
炸脂

01:15:40.260 --> 01:15:40.760
nok

01:15:41.860 --> 01:15:43.560
那其实碰撞检测哈

01:15:43.560 --> 01:15:44.960
我们要去检测两种

01:15:44.960 --> 01:15:45.860
刚才也说了

01:15:45.860 --> 01:15:49.060
一个是进行下临界值的一个检测

01:15:49.260 --> 01:15:51.460
那什么是临界值的一个检测啊

01:15:51.460 --> 01:15:52.660
就是上天入地

01:15:52.660 --> 01:15:53.660
这叫临界值

01:15:53.660 --> 01:15:54.660
还有一个是什么

01:15:54.960 --> 01:15:55.760
还有个什么

01:15:56.960 --> 01:15:59.060
进行柱子的碰撞检测

01:15:59.160 --> 01:16:01.160
所以一旦要去进行碰撞检测

01:16:01.160 --> 01:16:02.560
我们要去进行两个

01:16:02.560 --> 01:16:04.260
所以我们要去写两个函数

01:16:04.260 --> 01:16:05.160
写两个函数

01:16:05.260 --> 01:16:05.960
一个呢

01:16:05.960 --> 01:16:07.160
叫做炸脂

01:16:07.160 --> 01:16:07.860
bunderry

01:16:07.860 --> 01:16:08.460
叫做炸脂

01:16:08.460 --> 01:16:09.160
bunderry

01:16:10.660 --> 01:16:14.160
b o u n d a r y

01:16:14.160 --> 01:16:14.360
哈

01:16:14.360 --> 01:16:15.360
应该是这么拼的哈

01:16:15.960 --> 01:16:16.860
你懂得哈

01:16:16.860 --> 01:16:17.960
可能会拼错哈

01:16:18.060 --> 01:16:18.960
但没关系哈

01:16:18.960 --> 01:16:21.660
第二个是去进行柱子的一个检测

01:16:21.660 --> 01:16:22.660
炸脂papal

01:16:23.260 --> 01:16:23.960
方式

01:16:25.160 --> 01:16:26.960
那这两个都是碰撞检测

01:16:26.960 --> 01:16:29.360
所以咱们就集中的在哪去执行啊

01:16:29.360 --> 01:16:31.060
在炸脂noke里面来执行

01:16:34.220 --> 01:16:34.720
ok

01:16:34.720 --> 01:16:37.120
那咱们先来攻克第一个炸脂bunderry

01:16:37.120 --> 01:16:38.220
那炸脂bunderry

01:16:38.220 --> 01:16:40.520
其实很好去进行判断吧

01:16:41.420 --> 01:16:42.020
对不对

01:16:42.020 --> 01:16:44.820
你先把两个临界值搞出来

01:16:45.320 --> 01:16:46.320
单词认不到

01:16:46.320 --> 01:16:47.520
单词认不到来没事好

01:16:47.520 --> 01:16:48.820
来给你们住个室哈

01:16:50.320 --> 01:16:54.930
进行边界工作

01:16:55.730 --> 01:16:56.230
检测

01:16:57.330 --> 01:16:58.230
我们写个大戒

01:16:58.630 --> 01:16:59.230
边界

01:16:59.930 --> 01:17:04.460
ok这个进行谁呢

01:17:04.460 --> 01:17:05.560
进行啥来着

01:17:06.360 --> 01:17:06.960
柱子

01:17:08.940 --> 01:17:09.540
柱子

01:17:10.340 --> 01:17:11.540
碰撞检测

01:17:12.240 --> 01:17:13.740
ok来标注一下哈

01:17:13.840 --> 01:17:14.340
好了

01:17:14.440 --> 01:17:17.140
那进行边界碰撞检测哈

01:17:17.140 --> 01:17:19.040
其实就是一个上天了

01:17:19.040 --> 01:17:19.940
一个入地了

01:17:19.940 --> 01:17:21.640
那你把这两个值写出来

01:17:21.640 --> 01:17:22.340
不就行了吗

01:17:22.440 --> 01:17:23.940
那上天的时候

01:17:24.040 --> 01:17:25.340
top值是啥呀

01:17:25.540 --> 01:17:26.640
是不是为0啊

01:17:26.840 --> 01:17:27.340
是不是

01:17:27.340 --> 01:17:30.140
所以你最小的top值为0

01:17:30.540 --> 01:17:32.040
不能小于0

01:17:32.240 --> 01:17:33.140
不能小于0

01:17:33.340 --> 01:17:33.840
ok

01:17:33.940 --> 01:17:35.740
那你最大的top值别挤啊

01:17:36.840 --> 01:17:37.440
max

01:17:37.540 --> 01:17:38.940
最大的max top

01:17:39.840 --> 01:17:40.440
别挤

01:17:40.840 --> 01:17:41.940
你多少还记得吗

01:17:41.940 --> 01:17:44.740
是不是咱们整个副元素的高度啊

01:17:44.740 --> 01:17:45.740
是不是800呀

01:17:45.740 --> 01:17:47.640
你这top不能怎么样

01:17:47.740 --> 01:17:48.440
不能多啊

01:17:48.440 --> 01:17:49.540
是不是多少人

01:17:50.340 --> 01:17:52.540
忘了600啊600600

01:17:53.740 --> 01:17:55.440
是不是不能怎么样

01:17:55.640 --> 01:17:57.140
小于帐的一个

01:17:57.140 --> 01:17:58.440
大于600啊

01:17:58.440 --> 01:18:00.040
一旦大于600了的话

01:18:00.040 --> 01:18:00.840
就不行

01:18:00.940 --> 01:18:04.740
那这会我们在进行边界的碰撞检测的时候

01:18:04.840 --> 01:18:06.140
我判断一下呗

01:18:06.240 --> 01:18:09.340
我当前小鸟的高度不是存在一个变量里面吗

01:18:09.340 --> 01:18:11.440
对应该是570哈570哈

01:18:12.940 --> 01:18:14.140
为什么是570啊

01:18:14.140 --> 01:18:15.640
因为小鸟得落地嘛

01:18:15.640 --> 01:18:18.240
小鸟有30的一个高度啊

01:18:18.240 --> 01:18:18.740
ok

01:18:19.640 --> 01:18:21.040
ok看这块哈

01:18:22.740 --> 01:18:25.340
咱们是不是只要去拿到当前的

01:18:25.440 --> 01:18:27.240
bird的一个top

01:18:27.540 --> 01:18:30.940
让他去看看他是否小于了

01:18:31.040 --> 01:18:32.440
this点min top

01:18:32.740 --> 01:18:33.740
或者是

01:18:34.040 --> 01:18:36.540
this点bird的top

01:18:37.140 --> 01:18:38.440
他大于了

01:18:38.540 --> 01:18:40.440
this点max top

01:18:40.740 --> 01:18:43.240
如果说一旦这个条件

01:18:43.640 --> 01:18:45.340
执行了正常了

01:18:45.340 --> 01:18:47.040
那咱是不是就输了呀

01:18:47.040 --> 01:18:48.540
那输了的这个函数

01:18:48.540 --> 01:18:50.640
咱们再来写一个feel game

01:18:50.640 --> 01:18:52.240
来进行管理

01:18:52.440 --> 01:18:53.540
那写feel game

01:18:53.740 --> 01:18:54.940
在下面搞一个

01:18:57.180 --> 01:18:59.680
那feel game首先想的是什么

01:18:59.680 --> 01:19:01.480
你定时器就别定了

01:19:01.580 --> 01:19:02.880
就别别执行了

01:19:02.880 --> 01:19:04.680
是不是得去清除一下他呀

01:19:04.780 --> 01:19:06.780
那怎么在这个函数内部

01:19:06.880 --> 01:19:08.880
去清除这个animate

01:19:08.880 --> 01:19:10.480
函数当中的定时器

01:19:10.880 --> 01:19:11.980
保存一下呗

01:19:12.080 --> 01:19:13.080
保存在那啊

01:19:13.180 --> 01:19:14.480
保存在this身上

01:19:14.480 --> 01:19:15.180
所以这个时候呢

01:19:15.180 --> 01:19:16.480
我让this点

01:19:16.480 --> 01:19:17.180
timer

01:19:17.180 --> 01:19:18.580
懂于定时器

01:19:18.580 --> 01:19:19.380
懂于他

01:19:19.780 --> 01:19:22.780
之后在这个执行feel game的时候

01:19:22.780 --> 01:19:24.380
clear interval

01:19:25.380 --> 01:19:27.180
当前保存的

01:19:27.380 --> 01:19:28.080
timer

01:19:28.180 --> 01:19:28.680
ok

01:19:28.680 --> 01:19:29.980
那这样是不是就行了

01:19:29.980 --> 01:19:31.780
来点击开始路

01:19:32.080 --> 01:19:32.580
哎

01:19:32.580 --> 01:19:33.380
是不是就

01:19:33.780 --> 01:19:34.580
完事了

01:19:34.880 --> 01:19:35.780
是不是就完事了

01:19:35.880 --> 01:19:37.580
就封入新函数了

01:19:37.580 --> 01:19:39.680
为什么不算自己的高度

01:19:40.580 --> 01:19:41.380
你想想

01:19:41.380 --> 01:19:42.980
你落地了之后啊

01:19:43.680 --> 01:19:44.580
怎么说呢

01:19:45.080 --> 01:19:46.380
套不值是多少

01:19:47.280 --> 01:19:48.280
套不值是多少

01:19:48.280 --> 01:19:50.180
是从你的

01:19:50.380 --> 01:19:51.380
你的顶部啊

01:19:51.380 --> 01:19:53.580
你的元素这个顶部算

01:19:53.680 --> 01:19:55.780
到底到这个上面

01:19:55.780 --> 01:19:57.880
距离复元素的一个高度啊

01:19:58.080 --> 01:20:00.180
那你人说你的这个套不值

01:20:00.280 --> 01:20:02.880
加上元素本身的高度

01:20:03.180 --> 01:20:04.880
最终等于600

01:20:05.680 --> 01:20:07.080
就是你落地了

01:20:07.180 --> 01:20:08.480
对不对就是你落地了

01:20:08.480 --> 01:20:09.580
你要加上自己的话呢

01:20:09.580 --> 01:20:10.880
他就到地底了

01:20:10.880 --> 01:20:11.880
就到地底了哈

01:20:11.880 --> 01:20:13.980
所以这话咱们不算自己的高度

01:20:13.980 --> 01:20:15.780
把自己高度给剪掉

01:20:15.880 --> 01:20:16.880
因为我们说了哈

01:20:16.880 --> 01:20:18.680
你要是你躺在地上

01:20:18.680 --> 01:20:19.680
你是不是有高度啊

01:20:19.680 --> 01:20:20.780
你没陷进去吧

01:20:21.080 --> 01:20:21.980
你想想一下哈

01:20:21.980 --> 01:20:23.380
一个人躺在地上

01:20:23.480 --> 01:20:25.680
人和蓬之间的距离

01:20:25.680 --> 01:20:28.180
是不是得是由这个屋子的总高

01:20:28.180 --> 01:20:31.080
减去人自己的那个小的高度

01:20:31.080 --> 01:20:33.180
才是最终你这个人距离

01:20:33.180 --> 01:20:34.280
蓬的一个高度啊

01:20:34.280 --> 01:20:35.480
你不能算地底吧

01:20:35.480 --> 01:20:36.280
如果说你算地底的话

01:20:36.280 --> 01:20:37.480
你就把你给压进去了

01:20:37.480 --> 01:20:38.480
你就陷进去了

01:20:38.480 --> 01:20:39.080
对不对

01:20:39.080 --> 01:20:40.080
全封住心寒

01:20:40.180 --> 01:20:42.280
你不懂的话我我再讲一下

01:20:42.380 --> 01:20:42.980
懂不懂

01:20:42.980 --> 01:20:43.880
懂的话就过

01:20:43.980 --> 01:20:45.380
不懂的话咱就再讲一下

01:20:46.180 --> 01:20:46.880
ok 懂了哈

01:20:46.880 --> 01:20:47.580
好嘞好嘞

01:20:47.880 --> 01:20:48.680
那你看现在哈

01:20:48.680 --> 01:20:49.680
他是不是死了

01:20:49.780 --> 01:20:52.380
那死了之后咱们就去写死了的

01:20:52.480 --> 01:20:53.880
一个逻辑呗

01:20:54.080 --> 01:20:55.580
死的逻辑是啥来着

01:20:56.480 --> 01:20:57.180
是啥来着

01:20:57.480 --> 01:20:59.580
那些个元素

01:20:59.680 --> 01:21:01.380
是不是都得出来了呀

01:21:02.380 --> 01:21:04.180
元素是不是都得出来了呀

01:21:04.180 --> 01:21:05.480
哪个元素啊

01:21:05.880 --> 01:21:07.280
mask和暗的

01:21:07.780 --> 01:21:09.980
mask和暗的都得出来了

01:21:09.980 --> 01:21:13.180
所以说咱们去把那个暗的元素拿到

01:21:13.180 --> 01:21:15.380
把mask元素也拿到

01:21:16.080 --> 01:21:17.080
来找一下吧

01:21:20.460 --> 01:21:21.960
this.o mask

01:21:22.960 --> 01:21:27.060
懂于获取了一个类名为mask的元素

01:21:27.060 --> 01:21:27.760
接着

01:21:28.560 --> 01:21:30.860
this.o啥o暗的

01:21:32.560 --> 01:21:34.260
懂于这个暗的

01:21:35.260 --> 01:21:37.160
ok 那咱们来写一下哈

01:21:37.860 --> 01:21:39.860
在这里下我让谁呀

01:21:39.860 --> 01:21:44.360
this.o mask.style.display

01:21:44.360 --> 01:21:46.260
懂于一个block

01:21:46.760 --> 01:21:50.460
ok 接着我再让this.o暗的

01:21:50.460 --> 01:21:52.460
this.o style.display

01:21:52.660 --> 01:21:54.560
懂于一个block

01:21:54.560 --> 01:21:56.460
那小鸟是不是得编媒呀

01:21:56.560 --> 01:21:59.860
this.o bird.style.display

01:21:59.960 --> 01:22:01.160
懂于一个暗

01:22:01.160 --> 01:22:03.460
那同样的分数也要编媒

01:22:03.460 --> 01:22:07.260
this.o scar.style.display

01:22:07.260 --> 01:22:08.960
懂于一个暗

01:22:09.260 --> 01:22:11.060
ok 咱们再让小鸟死一下哈

01:22:11.060 --> 01:22:11.560
点击

01:22:11.960 --> 01:22:12.660
死

01:22:13.160 --> 01:22:14.460
死了之后来看一下

01:22:14.460 --> 01:22:15.960
这个是不是就出现了呀

01:22:15.960 --> 01:22:17.560
他们就都存在了

01:22:17.660 --> 01:22:18.660
就都存在了

01:22:18.760 --> 01:22:19.460
好了哈

01:22:20.160 --> 01:22:22.160
还有什么其他的这样的一些

01:22:22.160 --> 01:22:24.160
呃问题要问吗

01:22:24.360 --> 01:22:24.960
不问的话

01:22:24.960 --> 01:22:26.660
咱们今天的这个小游戏

01:22:26.660 --> 01:22:27.960
就讲到这块

01:22:27.960 --> 01:22:30.160
咱们接下来要去讲些补充的知识点

01:22:30.660 --> 01:22:32.360
讲些补充的知识点哈

01:22:32.460 --> 01:22:33.860
出分咱明天再做

01:22:33.860 --> 01:22:34.960
出分哈咱明天再做

01:22:34.960 --> 01:22:37.160
因为咱今天还没去闯关呢

01:22:37.160 --> 01:22:39.760
还还没去这个对柱子进行操纵的时候

01:22:39.760 --> 01:22:41.760
咱这分这都是零啊都是零

01:22:42.060 --> 01:22:43.660
咱下面要去讲一下

01:22:43.660 --> 01:22:45.860
呃脱离一下这个游戏了哈

01:22:45.860 --> 01:22:47.760
不要把思路放到这个游戏身上了

01:22:47.760 --> 01:22:49.060
咱今天关于这个游戏

01:22:49.060 --> 01:22:49.960
就讲到这

01:22:49.960 --> 01:22:52.460
所以咱们先来提交一下代码

01:22:53.860 --> 01:22:54.660
怎么提交

01:22:54.660 --> 01:22:56.160
get爱的点

01:22:56.160 --> 01:22:59.660
先把我们更改的文件存放添加件

01:22:59.660 --> 01:23:01.160
带你一个仓库里面

01:23:01.160 --> 01:23:02.260
添有本地仓库

01:23:02.260 --> 01:23:03.460
接着提交一下

01:23:03.460 --> 01:23:05.260
convade-m

01:23:05.260 --> 01:23:06.260
今天干嘛了呀

01:23:06.260 --> 01:23:07.260
进行一下

01:23:07.360 --> 01:23:09.460
board game init

01:23:09.460 --> 01:23:11.860
初始换了一下board这样的一个游戏

01:23:11.960 --> 01:23:12.660
是不是

01:23:12.760 --> 01:23:14.160
initboard game

01:23:14.160 --> 01:23:15.160
然后按的

01:23:15.560 --> 01:23:16.260
按里面

01:23:16.360 --> 01:23:17.560
刚才有一个动画

01:23:17.660 --> 01:23:20.360
ok 接着我们要推到远层的

01:23:21.160 --> 01:23:22.860
远层的second的

01:23:22.860 --> 01:23:23.960
这样的一个仓库上

01:23:24.160 --> 01:23:26.660
ok 咱们今天的这个整体的游戏

01:23:26.660 --> 01:23:27.360
就写到这

01:23:27.360 --> 01:23:27.660
然后呢

01:23:27.660 --> 01:23:29.360
咱们来讲一下拓展的一个知识

01:23:29.360 --> 01:23:29.860
哈

01:23:29.860 --> 01:23:30.760
大家来看一下

01:23:31.060 --> 01:23:33.260
我们的这一块是啥呀

01:23:33.460 --> 01:23:34.660
是有个排名的

01:23:35.660 --> 01:23:37.260
没天能给游戏加音效嘛

01:23:37.260 --> 01:23:38.160
啊这个不能的

01:23:38.160 --> 01:23:38.960
咱们没做

01:23:38.960 --> 01:23:39.560
做的话呢

01:23:39.560 --> 01:23:42.360
你们还要有些其他的拓展的一些知识点

01:23:42.360 --> 01:23:43.360
这audio的话呢

01:23:43.360 --> 01:23:44.160
还得给你们再讲

01:23:44.160 --> 01:23:45.360
可能时间就不够了

01:23:45.360 --> 01:23:46.560
如果说以后有机会的

01:23:46.560 --> 01:23:48.060
我们再去有这样的小额课的话呢

01:23:48.060 --> 01:23:49.260
我可以尝试加上

01:23:49.260 --> 01:23:49.860
好不好

01:23:49.860 --> 01:23:50.360
ok

01:23:50.360 --> 01:23:53.060
扣的点为啥是打开vs扣的

01:23:53.060 --> 01:23:55.660
因为你下载vs扣的这个过程当中啊

01:23:55.660 --> 01:23:58.760
他有一个选项是问你要不要把他这样的一个路径

01:23:58.760 --> 01:23:59.860
加进pass当中的

01:23:59.860 --> 01:24:00.960
如果加了的话呢

01:24:00.960 --> 01:24:02.360
你就可以利用扣的点

01:24:02.360 --> 01:24:04.460
这个命令打开一个文件

01:24:04.460 --> 01:24:05.460
打开一个文件

01:24:06.260 --> 01:24:08.360
这个就是vs扣的他自带的哈

01:24:08.360 --> 01:24:09.360
嗯好了

01:24:09.560 --> 01:24:10.960
然后咱们来看一下提名提上去

01:24:10.960 --> 01:24:11.860
应该提上去了

01:24:11.860 --> 01:24:12.660
提上去之后呢

01:24:12.660 --> 01:24:13.760
咱们来看一下

01:24:13.760 --> 01:24:15.560
我们的这个排名哈

01:24:15.660 --> 01:24:16.960
他不是写死的

01:24:16.960 --> 01:24:18.660
虽然咱们现在是写死的

01:24:18.660 --> 01:24:20.460
但是他肯定不是写死的

01:24:20.460 --> 01:24:21.760
肯定不是写死的哈

01:24:21.760 --> 01:24:22.660
因为你看看

01:24:22.660 --> 01:24:24.560
我们在玩这个是有变的

01:24:24.560 --> 01:24:25.560
他是会变的

01:24:25.560 --> 01:24:26.360
这是100

01:24:26.360 --> 01:24:27.460
这是75

01:24:27.460 --> 01:24:29.260
比如我现在喊在那玩个游戏

01:24:29.260 --> 01:24:30.760
我过两根柱子

01:24:30.760 --> 01:24:33.760
你看现在是17541110

01:24:33.760 --> 01:24:34.860
那我玩一个2呢

01:24:37.800 --> 01:24:38.900
2分了是不是

01:24:39.100 --> 01:24:39.700
3分

01:24:39.700 --> 01:24:40.700
我我死一个

01:24:40.700 --> 01:24:41.700
我死一个看这

01:24:41.700 --> 01:24:43.800
是不是个3分排名第5名啊

01:24:44.100 --> 01:24:47.800
这个是根据你的一个游戏分数是存储在本地的

01:24:47.900 --> 01:24:51.500
也就是说现在谁拿我的这个瀏覽器玩

01:24:51.700 --> 01:24:53.700
他只要超过了分或者进入了

01:24:53.700 --> 01:24:55.200
进入到了前8名

01:24:55.200 --> 01:24:57.700
都可以出现在我这样的一个排行上

01:24:58.000 --> 01:25:00.300
那由于说真正的一个游戏当中

01:25:00.300 --> 01:25:02.400
哈你想要去储存一下数据

01:25:02.400 --> 01:25:03.900
我们想要连网的话

01:25:03.900 --> 01:25:04.800
连网的话呢

01:25:04.800 --> 01:25:06.600
那肯定要去配个后台

01:25:06.600 --> 01:25:07.000
是吧

01:25:07.000 --> 01:25:09.000
把这个数据存在数据库上

01:25:09.000 --> 01:25:11.800
但是咱们现在还就想用存钱端

01:25:11.800 --> 01:25:12.800
把他给做出来

01:25:12.800 --> 01:25:13.900
该用什么呢

01:25:14.000 --> 01:25:15.700
用一下本地存储

01:25:15.700 --> 01:25:17.500
那其实本地存储哈

01:25:17.500 --> 01:25:20.700
是h5当中新增的一个东西

01:25:21.200 --> 01:25:22.100
新增一个东西

01:25:22.100 --> 01:25:23.400
在他还没有出现的时候

01:25:23.400 --> 01:25:24.200
我们用的是什么呢

01:25:24.200 --> 01:25:25.300
用的是cookie

01:25:25.300 --> 01:25:27.100
那cookie对于你们来讲

01:25:27.100 --> 01:25:28.200
也是一个

01:25:28.200 --> 01:25:29.400
不知道是啥玩意的东西

01:25:29.400 --> 01:25:30.600
所以你们就可以忽略了

01:25:30.600 --> 01:25:30.900
哈

01:25:30.900 --> 01:25:32.200
你现在只需要知道

01:25:32.200 --> 01:25:35.400
h5当中新增了一个vibestorage

01:25:35.400 --> 01:25:38.300
进行存储的这样一个功能

01:25:38.300 --> 01:25:40.300
他提供了一个存储机制

01:25:40.500 --> 01:25:44.400
我们可以向浏览器里面进行一些

01:25:44.400 --> 01:25:46.300
建值对的存储

01:25:46.600 --> 01:25:48.400
进行建值对的存储

01:25:48.400 --> 01:25:50.500
比如说我有一个这样的一个

01:25:50.500 --> 01:25:52.600
一个地方还存储了一个值

01:25:52.600 --> 01:25:53.900
名字叫做scout

01:25:53.900 --> 01:25:55.000
建值那是什么

01:25:55.000 --> 01:25:56.300
建值是一个数组

01:25:56.300 --> 01:25:57.300
数组里面呢

01:25:57.300 --> 01:25:59.100
是一个一个的对象

01:25:59.100 --> 01:26:00.500
一个一个的对象

01:26:00.500 --> 01:26:02.500
那这些对象包含着的

01:26:02.500 --> 01:26:05.100
就是我们里面的这样的一些信息

01:26:05.100 --> 01:26:06.200
那cookie

01:26:06.200 --> 01:26:07.600
我们用一阶课的时间

01:26:07.600 --> 01:26:08.700
跟你们只能说

01:26:08.900 --> 01:26:09.800
说不了那么多

01:26:09.800 --> 01:26:10.900
你还是不详细

01:26:10.900 --> 01:26:11.700
还是不详细

01:26:11.700 --> 01:26:12.300
今天啊

01:26:12.300 --> 01:26:13.800
先把这个vibestorage

01:26:13.800 --> 01:26:14.700
先给他搞懂

01:26:14.700 --> 01:26:15.800
怎么去用就可以了

01:26:16.000 --> 01:26:16.900
不要贪多

01:26:16.900 --> 01:26:17.900
先不要贪多

01:26:18.500 --> 01:26:18.900
ok

01:26:18.900 --> 01:26:20.100
那怎么可以来看一下

01:26:20.100 --> 01:26:21.100
我这个里边

01:26:21.100 --> 01:26:22.800
他就是存着这样的一个数据

01:26:22.800 --> 01:26:24.400
我们从哪去找呢

01:26:24.400 --> 01:26:26.800
打开控制台打开控制台

01:26:26.800 --> 01:26:28.600
然后点击application

01:26:28.600 --> 01:26:30.400
点击local storage

01:26:30.400 --> 01:26:33.000
我们存到的是local storage里面

01:26:33.000 --> 01:26:34.200
然后点击一个feel

01:26:34.200 --> 01:26:36.500
是存在feel的这个写意下

01:26:36.500 --> 01:26:38.400
在这里面是不是有个scout

01:26:38.400 --> 01:26:39.800
有一个这样的一个数组

01:26:39.800 --> 01:26:41.600
你看这个数组里面的数据

01:26:41.600 --> 01:26:43.000
是不是我们显示的数据

01:26:43.000 --> 01:26:45.500
175431110

01:26:45.600 --> 01:26:48.900
175431110

01:26:48.900 --> 01:26:49.400
对不对

01:26:49.400 --> 01:26:51.500
前8个展示的是这个

01:26:51.500 --> 01:26:52.600
展示的是这个

01:26:52.600 --> 01:26:54.400
我们就是从这里面来拿的

01:26:54.400 --> 01:26:57.200
如果说你们现在打开了自己乱七

01:26:57.200 --> 01:26:58.400
没发现这个东西

01:26:58.400 --> 01:26:59.500
不要慌哈

01:26:59.500 --> 01:27:00.500
别慌稳住

01:27:00.500 --> 01:27:01.600
问题真的不大

01:27:01.600 --> 01:27:02.300
小场面

01:27:02.300 --> 01:27:03.000
因为啥

01:27:03.000 --> 01:27:05.100
因为这个数据是我自己来存储的

01:27:05.100 --> 01:27:06.400
你们当然没有了

01:27:06.400 --> 01:27:07.000
对不对

01:27:07.000 --> 01:27:09.600
那我们想要去往这个本地数据里面

01:27:09.600 --> 01:27:12.200
去进行增山改查的话呢

01:27:12.200 --> 01:27:14.500
就需要用到这里面的几个方法

01:27:14.500 --> 01:27:15.100
第一个

01:27:15.100 --> 01:27:17.000
我想要去往里面去保存数据

01:27:17.000 --> 01:27:19.400
那我就来使用一下set item

01:27:19.400 --> 01:27:21.200
set item有两个参数

01:27:21.200 --> 01:27:22.800
第一个参数是key

01:27:22.800 --> 01:27:26.000
有时候你要去存储的数据的名字

01:27:26.000 --> 01:27:26.800
然后那y6呢

01:27:26.800 --> 01:27:29.400
是你要去存储的数据的值

01:27:29.400 --> 01:27:30.800
渐值对

01:27:30.800 --> 01:27:31.600
渐值对

01:27:31.600 --> 01:27:32.100
ok

01:27:32.100 --> 01:27:33.200
这先给你们发过去

01:27:33.200 --> 01:27:35.300
客家也可以给你们发的

01:27:35.300 --> 01:27:35.900
ok

01:27:35.900 --> 01:27:36.600
然后呢

01:27:36.600 --> 01:27:38.000
这两个注意哈

01:27:38.000 --> 01:27:40.600
值的类型都是自付串的

01:27:40.600 --> 01:27:42.800
你名字是个自付串类型

01:27:42.800 --> 01:27:44.700
那这个y6值呢

01:27:44.800 --> 01:27:47.000
也是一个自付串类型

01:27:47.000 --> 01:27:48.100
那我其实说到这

01:27:48.100 --> 01:27:49.700
我相信你们应该

01:27:49.700 --> 01:27:51.300
脑子反应快的哈

01:27:51.300 --> 01:27:52.500
会有一个小的疑问

01:27:52.500 --> 01:27:53.800
就是哎

01:27:53.800 --> 01:27:54.600
自付串

01:27:54.600 --> 01:27:56.200
那刚刚给我看的是啥

01:27:56.200 --> 01:27:57.500
不是个数组吗

01:27:57.500 --> 01:27:58.400
来回忆一下

01:27:58.400 --> 01:27:59.000
看这

01:27:59.000 --> 01:28:00.700
这不是个数组是个啥呀

01:28:00.700 --> 01:28:01.700
它就是个数组

01:28:01.700 --> 01:28:03.000
你再说是自付串的

01:28:03.000 --> 01:28:04.200
其实很简单哈

01:28:04.200 --> 01:28:05.700
道理很简单

01:28:05.700 --> 01:28:08.700
当你去往这里面去存上

01:28:08.700 --> 01:28:10.800
任意一种数值的时候

01:28:10.800 --> 01:28:12.700
它都会去进行一下

01:28:12.700 --> 01:28:14.300
隐释类型转换

01:28:14.300 --> 01:28:15.300
就比如说

01:28:15.300 --> 01:28:16.300
波尔值的处

01:28:16.300 --> 01:28:18.500
会变成自付串类型的处

01:28:18.500 --> 01:28:20.200
数值1数字1

01:28:20.200 --> 01:28:21.600
会变成自付串1

01:28:21.600 --> 01:28:23.200
那数组123呢

01:28:23.200 --> 01:28:26.200
会变成自付串123

01:28:26.200 --> 01:28:28.600
对象会变成Object

01:28:28.600 --> 01:28:29.600
那其实这块吧

01:28:29.600 --> 01:28:30.600
你仔细一看

01:28:30.600 --> 01:28:31.200
哎

01:28:31.200 --> 01:28:32.200
数组

01:28:32.200 --> 01:28:33.300
方块号123

01:28:33.300 --> 01:28:35.100
直接变成123的方块号呢

01:28:35.100 --> 01:28:35.700
没了

01:28:35.700 --> 01:28:36.800
让你吃了

01:28:36.800 --> 01:28:37.900
吃哪去了

01:28:37.900 --> 01:28:38.900
够缓会了呀

01:28:38.900 --> 01:28:40.500
你明明给我看的数据

01:28:40.500 --> 01:28:41.660
世代方块号类

01:28:41.660 --> 01:28:43.560
怎么就跟我说没方块号了呢

01:28:43.560 --> 01:28:44.460
其实很简单

01:28:44.460 --> 01:28:45.360
很正常

01:28:45.360 --> 01:28:47.860
你一个数组转换成为自付串

01:28:47.860 --> 01:28:50.860
它就是会把那个方块号变违

01:28:50.860 --> 01:28:53.260
那如果说你不想变违的话

01:28:53.260 --> 01:28:55.260
我就要损放着的是一个

01:28:55.260 --> 01:28:57.760
数组形式的自付串

01:28:57.760 --> 01:29:00.660
那这个时候你就要去使用一个方法了

01:29:00.660 --> 01:29:03.660
叫做Json.StringFat

01:29:03.660 --> 01:29:04.460
Json.

01:29:04.460 --> 01:29:05.960
对Json.StringFat

01:29:05.960 --> 01:29:08.960
你往这个StringFat的参数里面

01:29:08.960 --> 01:29:10.460
去传一个数组

01:29:10.460 --> 01:29:14.760
它就把它变成是一个数组形式的自付串了

01:29:14.760 --> 01:29:17.760
接着你再去往里面存步就行了嘛

01:29:17.760 --> 01:29:18.260
对不对

01:29:18.260 --> 01:29:19.160
所以我们去存的时候

01:29:19.160 --> 01:29:19.560
来

01:29:19.560 --> 01:29:20.460
第一个值

01:29:20.460 --> 01:29:21.760
显得你正常那个名字

01:29:21.760 --> 01:29:22.760
第二个值是

01:29:22.760 --> 01:29:24.960
通过Json.StringFat

01:29:24.960 --> 01:29:27.960
处理过后的一个自付串

01:29:27.960 --> 01:29:29.860
那么对象也是同理的

01:29:29.860 --> 01:29:33.460
因为你对象是想要把它变成是一个自付串的话

01:29:33.460 --> 01:29:35.560
它就会变成这种鬼样子

01:29:35.560 --> 01:29:36.560
没有办法

01:29:36.560 --> 01:29:38.160
没有任何道理

01:29:38.160 --> 01:29:39.460
对象转换成自付串

01:29:39.460 --> 01:29:41.060
它就是这个东西

01:29:41.060 --> 01:29:42.860
那它是不是没有任何意义了呀

01:29:42.860 --> 01:29:44.860
你存里边某用没有

01:29:44.860 --> 01:29:45.460
是不是

01:29:45.460 --> 01:29:46.260
那这个时候如果说

01:29:46.260 --> 01:29:48.560
你想要看到你存处的这样一个数据

01:29:48.560 --> 01:29:49.060
比如说

01:29:49.060 --> 01:29:50.260
我们打开百度

01:29:50.260 --> 01:29:51.460
百度是不是也会去存啊

01:29:53.460 --> 01:29:55.160
打开Application

01:29:55.160 --> 01:29:56.360
LocalStar看

01:29:56.360 --> 01:29:57.860
百度这样你一个

01:29:57.860 --> 01:29:59.460
预名它给咱们存了

01:29:59.460 --> 01:30:00.260
有一个没有什么

01:30:00.260 --> 01:30:01.760
有一个ShowItem

01:30:01.760 --> 01:30:03.760
然后还有个ClickItem

01:30:03.760 --> 01:30:05.460
它是不是就是一个对象呢

01:30:05.460 --> 01:30:07.060
虽然这块都存的是什么

01:30:07.060 --> 01:30:07.860
它存的

01:30:07.860 --> 01:30:09.860
不是一个真真正正的对象

01:30:09.860 --> 01:30:12.860
而是一个对象形式的自付串

01:30:12.860 --> 01:30:17.260
它仍然是通过Jason.死真之Fight来搞的

01:30:17.260 --> 01:30:19.060
所以当你要去存处

01:30:19.060 --> 01:30:21.260
所以什么存处对象和数组的时候

01:30:21.260 --> 01:30:22.860
都要通过它来包一下

01:30:22.860 --> 01:30:24.260
包完了之后再往里存

01:30:24.260 --> 01:30:25.060
听我话

01:30:25.060 --> 01:30:25.860
别这样

01:30:25.860 --> 01:30:26.660
这样对你来讲

01:30:26.660 --> 01:30:27.760
没有任何好处

01:30:27.760 --> 01:30:28.260
ok

01:30:28.260 --> 01:30:29.560
这个是存数据

01:30:29.560 --> 01:30:31.560
那取数据呢

01:30:31.560 --> 01:30:32.660
取数据很简单

01:30:32.660 --> 01:30:35.060
GuideItem里面存

01:30:35.060 --> 01:30:36.560
传上一个参数K

01:30:36.560 --> 01:30:40.460
K是你要去获取到的数据的名字

01:30:40.460 --> 01:30:41.560
会到数据的名字

01:30:41.560 --> 01:30:43.260
那它会给我们一个值啊

01:30:43.260 --> 01:30:45.160
用一个值来接着它的一个反位值

01:30:45.160 --> 01:30:47.260
有人反回的是对那个建值

01:30:47.260 --> 01:30:48.860
那其实我们刚刚说过了

01:30:48.860 --> 01:30:50.460
它存的就是一个自付串

01:30:50.460 --> 01:30:51.760
那它取的是什么

01:30:51.760 --> 01:30:54.760
它取的仍然是一个自付串

01:30:54.760 --> 01:30:55.160
诶

01:30:55.160 --> 01:30:57.160
那取的是一个数组自付串

01:30:57.160 --> 01:30:58.760
取的是一个对象自付串

01:30:58.760 --> 01:31:01.160
我们怎么样通过对它来操纵呢

01:31:01.160 --> 01:31:02.660
我想往这个所谓的

01:31:02.660 --> 01:31:04.660
数组自付串里面去加一个值

01:31:04.660 --> 01:31:07.260
难道我要通过自付串拼接的方式吗

01:31:07.260 --> 01:31:08.260
不需要啊

01:31:08.260 --> 01:31:08.860
不需要

01:31:08.860 --> 01:31:09.560
为什么呢

01:31:09.560 --> 01:31:11.260
因为我们有另外的一个方法

01:31:11.260 --> 01:31:13.160
叫做jsonalprose

01:31:13.160 --> 01:31:14.860
你通过jsonalprose

01:31:14.860 --> 01:31:18.960
可以把我们之前存储的数组自付串

01:31:18.960 --> 01:31:21.960
或者对象自付串去进行一下解析

01:31:21.960 --> 01:31:24.660
把它变成是一个正常的数组

01:31:24.660 --> 01:31:25.760
或者是对象

01:31:25.760 --> 01:31:27.660
你就能够愉快的玩耍了

01:31:27.660 --> 01:31:29.160
它就不是一个自付串了

01:31:29.160 --> 01:31:30.960
而是又变回数组和对象了

01:31:30.960 --> 01:31:32.460
还变成它原来的样子了

01:31:32.460 --> 01:31:35.160
然后再对它进行一些处理就可以了

01:31:35.160 --> 01:31:35.860
清楚了吗

01:31:35.860 --> 01:31:36.760
一个是存

01:31:36.760 --> 01:31:37.560
一个是举

01:31:37.560 --> 01:31:38.260
一个是取

01:31:38.260 --> 01:31:40.960
setitem和getitem

01:31:40.960 --> 01:31:41.560
那同样的

01:31:41.560 --> 01:31:44.360
你也想对它进行一下删除

01:31:44.360 --> 01:31:44.660
对不对

01:31:44.660 --> 01:31:46.160
想要进行一下删除

01:31:46.160 --> 01:31:48.460
那删除怎么删呢

01:31:48.460 --> 01:31:51.260
如果说你想要去删除某一个数据

01:31:51.260 --> 01:31:52.860
比如说删除这个

01:31:52.860 --> 01:31:55.960
ecom-pc-session这样的一个数据

01:31:55.960 --> 01:31:56.360
ok

01:31:56.360 --> 01:31:57.660
那你就去调一下

01:31:57.660 --> 01:31:58.960
REMUitem

01:31:58.960 --> 01:32:00.760
把这个k值

01:32:00.760 --> 01:32:03.160
这个k值传进这个参数里面去

01:32:03.160 --> 01:32:04.760
它就把它给删掉了

01:32:04.760 --> 01:32:05.860
就把它给删掉了

01:32:05.860 --> 01:32:08.060
那如果说你这里面全都不要了

01:32:08.060 --> 01:32:09.760
我这里面数据我全都不要了

01:32:09.760 --> 01:32:10.460
怎么办呢

01:32:10.460 --> 01:32:11.960
我用clear方法

01:32:11.960 --> 01:32:14.560
直接调用clear方法

01:32:14.560 --> 01:32:15.560
就可以了

01:32:15.560 --> 01:32:16.960
就全部删掉了

01:32:16.960 --> 01:32:17.460
ok

01:32:17.460 --> 01:32:19.560
我看到有同学说卡掉了

01:32:19.560 --> 01:32:20.360
卡吗

01:32:20.360 --> 01:32:22.660
我这里面没有任何丢包啊

01:32:22.660 --> 01:32:23.760
回答一下我还卡吗

01:32:23.760 --> 01:32:30.480
我喝口水啊

01:32:30.480 --> 01:32:31.680
ok

01:32:31.680 --> 01:32:33.380
借机趁机喝口水啊

01:32:33.380 --> 01:32:34.980
战略性喝水

01:32:34.980 --> 01:32:35.780
那好好好

01:32:35.780 --> 01:32:36.180
ok

01:32:36.180 --> 01:32:38.480
你想要删除所有的数据的话

01:32:38.480 --> 01:32:40.080
你就用clear

01:32:40.080 --> 01:32:40.680
好

01:32:40.680 --> 01:32:41.580
那我相信啊

01:32:41.580 --> 01:32:43.780
我也不知道你们是不是一些情绪学

01:32:43.780 --> 01:32:45.680
这个耗动的一些小伙伴啊

01:32:45.680 --> 01:32:46.580
就是最好哈

01:32:46.580 --> 01:32:47.480
大家听我说哈

01:32:47.480 --> 01:32:48.780
再听老师讲课的时候

01:32:48.780 --> 01:32:49.680
不要乔戴马

01:32:49.680 --> 01:32:51.280
因为你乔戴马的话会喝点发懵

01:32:51.280 --> 01:32:53.780
就比如说你可能碰到我这样的一个老师了哈

01:32:53.780 --> 01:32:55.180
如果说你耗卸

01:32:55.180 --> 01:32:55.480
是吧

01:32:55.480 --> 01:32:56.480
你愿意动

01:32:56.480 --> 01:32:57.280
按乱动

01:32:57.280 --> 01:32:58.480
你去执行一下

01:32:58.480 --> 01:32:58.780
哎

01:32:58.780 --> 01:33:00.380
我老师说了哈

01:33:00.380 --> 01:33:02.880
我用这个setitem就可以往这

01:33:02.880 --> 01:33:03.880
你们去损数据

01:33:03.880 --> 01:33:05.480
然后呢你就去执行了一下

01:33:05.480 --> 01:33:07.380
发现怎么执行怎么抱错

01:33:07.380 --> 01:33:08.280
为什么呢

01:33:08.280 --> 01:33:10.680
因为我还没跟你们讲完呢

01:33:10.680 --> 01:33:12.080
他给你们讲完了

01:33:12.080 --> 01:33:12.780
因为哈

01:33:12.780 --> 01:33:15.280
我们不能直接去用这些方法

01:33:15.280 --> 01:33:16.880
只用这些方法是不行的

01:33:16.880 --> 01:33:20.080
他是存在于starage身上的一些方法

01:33:20.080 --> 01:33:22.780
不存在于全局当中

01:33:22.780 --> 01:33:24.680
如果说你要刚才试了的话

01:33:24.680 --> 01:33:26.580
那你抱错别找我哈

01:33:26.580 --> 01:33:27.680
因为我还没讲完

01:33:27.680 --> 01:33:29.080
是不是好了哈

01:33:29.080 --> 01:33:30.080
vibestarage

01:33:30.080 --> 01:33:32.080
它里面是包含了两种机制的

01:33:32.080 --> 01:33:32.880
一个是什么

01:33:32.980 --> 01:33:34.380
一个是local storage

01:33:34.380 --> 01:33:36.080
一个是session storage

01:33:36.080 --> 01:33:37.580
你一定要想去存的话

01:33:37.580 --> 01:33:39.880
比如想要往local storage里面去存的话

01:33:39.880 --> 01:33:40.780
你要怎么办呢

01:33:40.780 --> 01:33:44.480
你去调用local storage.setatem

01:33:44.480 --> 01:33:46.880
你要是想往session storage里面去存的话

01:33:46.880 --> 01:33:47.580
怎么办呢

01:33:47.580 --> 01:33:50.380
你就去调用session storage.setatem

01:33:50.380 --> 01:33:52.780
总之你前面得用一个storage来调

01:33:52.780 --> 01:33:53.980
否则的话就会抱错

01:33:53.980 --> 01:33:55.880
因为它不是冰斗上的方法

01:33:55.880 --> 01:33:58.280
而是storage身上的方法

01:33:58.280 --> 01:33:59.580
清楚了吧

01:33:59.580 --> 01:34:00.080
ok

01:34:00.080 --> 01:34:01.480
那local storage

01:34:01.580 --> 01:34:04.580
和session storage的区别是什么呢

01:34:04.580 --> 01:34:05.180
是什么呢

01:34:05.180 --> 01:34:06.380
来看这哈

01:34:06.380 --> 01:34:07.880
session storage

01:34:07.880 --> 01:34:11.480
它是往我们对应的帐篱一个

01:34:11.480 --> 01:34:12.280
域名下海

01:34:12.280 --> 01:34:13.680
比如百度的这个里面

01:34:13.680 --> 01:34:15.080
来存储的一些数据

01:34:15.080 --> 01:34:17.080
和local storage没什么区别

01:34:17.080 --> 01:34:20.480
区别是local storage是永久的

01:34:20.480 --> 01:34:23.380
你把页面关闭再打开

01:34:23.380 --> 01:34:24.780
它仍然存在

01:34:24.780 --> 01:34:26.980
但是session它就不行了

01:34:26.980 --> 01:34:30.180
session只存在于页面绘画期

01:34:30.180 --> 01:34:32.380
你关了之后就没这个数据了

01:34:32.380 --> 01:34:33.780
就没有这个数据了

01:34:33.780 --> 01:34:36.480
所以一般要去永久保存的数据

01:34:36.480 --> 01:34:38.280
比如你登入的那些状态

01:34:38.280 --> 01:34:40.180
你要保存很久的话

01:34:40.180 --> 01:34:43.580
你可以放到这样一个local storage当中

01:34:43.580 --> 01:34:44.080
ok

01:34:44.080 --> 01:34:45.380
然后要注意一点

01:34:45.380 --> 01:34:47.080
我们再来说一下

01:34:47.080 --> 01:34:49.880
就是我们的local storage和session storage

01:34:49.880 --> 01:34:50.780
出现了之后

01:34:50.780 --> 01:34:52.580
其实cookie使用不多了

01:34:52.580 --> 01:34:54.780
因为cookie它本身存放的数据

01:34:54.780 --> 01:34:56.380
就只有4kb

01:34:56.380 --> 01:34:57.580
4kb

01:34:57.580 --> 01:35:00.480
小要存数据的话就很很少

01:35:00.480 --> 01:35:01.480
没什么太大用

01:35:01.480 --> 01:35:03.780
而且cookie每次去发送请求的话

01:35:03.780 --> 01:35:05.380
都会去携带到哪

01:35:05.380 --> 01:35:07.280
携带到服务器上

01:35:07.280 --> 01:35:08.380
携带到服务器上

01:35:08.380 --> 01:35:10.780
会损失掉一些性能

01:35:10.780 --> 01:35:13.280
而且如果说我们想要去做

01:35:13.280 --> 01:35:15.980
只针对于客户端去做的话

01:35:15.980 --> 01:35:17.080
cookie对于我们来讲

01:35:17.080 --> 01:35:17.980
没有任何的作用

01:35:17.980 --> 01:35:20.180
它每次都恰恰的放到服务端去了

01:35:20.180 --> 01:35:20.680
是不是

01:35:20.680 --> 01:35:23.580
但是local storage和session storage就不会

01:35:23.580 --> 01:35:25.080
它会只是在本地

01:35:25.080 --> 01:35:27.380
在客户端这样子去操作

01:35:27.380 --> 01:35:27.980
ok

01:35:27.980 --> 01:35:30.780
然后我们的这样的一个local或者session

01:35:30.780 --> 01:35:32.280
只能去操作字幕创

01:35:32.280 --> 01:35:34.080
所以你每次去存数据

01:35:34.080 --> 01:35:34.980
或者对象

01:35:34.980 --> 01:35:36.680
你要去死争去犯一下

01:35:36.680 --> 01:35:38.880
然后拿过来的时候再perse一下

01:35:38.880 --> 01:35:40.480
然后还要再注意一点

01:35:40.480 --> 01:35:41.480
还要再注意一点

01:35:41.480 --> 01:35:44.280
就是数据它是明文存处的

01:35:44.280 --> 01:35:45.480
所以你这种不要去存处

01:35:45.480 --> 01:35:47.280
一些非常重要的一些信息

01:35:47.280 --> 01:35:48.680
你登陆的这样的一个状态

01:35:48.680 --> 01:35:49.380
是否登陆过

01:35:49.380 --> 01:35:50.380
你可以去存

01:35:50.380 --> 01:35:50.680
对不对

01:35:50.680 --> 01:35:51.980
你当前的这样的一些

01:35:51.980 --> 01:35:53.980
比如你购物车里面加什么东西

01:35:53.980 --> 01:35:56.880
也可以去存在这样的一个local里面

01:35:56.880 --> 01:35:58.480
就什么密码啊

01:35:58.480 --> 01:36:00.680
这种东西就没有必要存了

01:36:00.680 --> 01:36:02.880
因为你可能就会被窃取到

01:36:02.880 --> 01:36:04.880
可能会被窃取到

01:36:04.880 --> 01:36:05.480
ok

01:36:05.480 --> 01:36:06.680
然后还有什么

01:36:06.680 --> 01:36:10.180
还有就是我们这个local storage

01:36:10.180 --> 01:36:13.880
就不同的优烂器是没有办法去共享的

01:36:13.880 --> 01:36:15.880
比如我用一个谷歌去打开

01:36:15.880 --> 01:36:18.080
或者用一个firefox打开

01:36:18.080 --> 01:36:19.980
他们之前是没有任何的关联的

01:36:19.980 --> 01:36:21.480
因为不是同一个乱七

01:36:21.480 --> 01:36:25.480
它只存在于当前的优烂器当中了

01:36:25.480 --> 01:36:26.580
然后再来看看

01:36:26.680 --> 01:36:29.180
他们的缺点是这样的

01:36:29.180 --> 01:36:32.380
就是其实我们如果在乱七上去设置的话

01:36:32.380 --> 01:36:35.780
其实是可以有一个禁用隐私打开的话

01:36:35.780 --> 01:36:38.780
是可以禁用这样的local storage和30 storage

01:36:38.780 --> 01:36:41.980
包括说如果你存的数据够多的话

01:36:41.980 --> 01:36:42.780
更多的话

01:36:42.780 --> 01:36:43.880
送的数据会慢

01:36:43.880 --> 01:36:44.980
最重要的是什么呢

01:36:44.980 --> 01:36:47.380
就是它读和写的都是同步的

01:36:47.380 --> 01:36:48.880
就是主线程

01:36:48.880 --> 01:36:49.180
对不对

01:36:49.180 --> 01:36:50.980
js线程是同步的话

01:36:50.980 --> 01:36:53.280
它就会去组色这个线程

01:36:53.280 --> 01:36:54.780
如果说你一直卡在这的话

01:36:54.780 --> 01:36:57.380
后面的这个操作就没有办法继续了

01:36:57.380 --> 01:36:58.480
OK 好了

01:36:58.480 --> 01:37:00.880
这个就是local storage和30 storage

01:37:00.880 --> 01:37:03.780
你们不需要过多的去理解它

01:37:03.780 --> 01:37:06.380
就是上这个课不需要过多的去理解它

01:37:06.380 --> 01:37:08.880
你不用说管它的优点和缺点是什么

01:37:08.880 --> 01:37:11.280
咱们先把它会用了再说

01:37:11.280 --> 01:37:12.380
会用了再说

01:37:12.380 --> 01:37:15.180
以后的一切东西都是咱们后期付费

01:37:15.180 --> 01:37:18.380
内容里面的会进行一些详细的讲解

01:37:18.380 --> 01:37:20.880
咱们这个课你先会用就可以了

01:37:20.880 --> 01:37:22.780
你先会用就可以了

01:37:22.780 --> 01:37:23.580
OK

01:37:23.580 --> 01:37:24.880
那会用什么呢

01:37:24.880 --> 01:37:28.780
增和这个设置和取出就行了

01:37:28.780 --> 01:37:29.480
因为什么呀

01:37:29.480 --> 01:37:33.880
我们要把数据存在于这个local storage当中

01:37:33.880 --> 01:37:35.680
那会用到30的什么呢

01:37:35.680 --> 01:37:36.380
看这哈

01:37:36.380 --> 01:37:37.480
重新开始

01:37:37.480 --> 01:37:41.580
它不会让你有一个点击开始游戏的那个操作了

01:37:41.580 --> 01:37:42.980
而是直接开始

01:37:42.980 --> 01:37:45.180
那么你下次再进的话呢

01:37:45.180 --> 01:37:46.680
它又会让你重新开始

01:37:46.680 --> 01:37:47.780
所以这个操作

01:37:47.780 --> 01:37:50.280
我们是不是可以利用30 storage

01:37:50.280 --> 01:37:53.380
去存一个值来进行一下判断啊

01:37:53.380 --> 01:37:56.080
只要赛事当中有那个值就证明我玩过了

01:37:56.080 --> 01:37:56.780
玩过了的话

01:37:56.780 --> 01:37:58.580
我再次进入到这个页面的时候

01:37:58.580 --> 01:38:00.280
就不需要再去点一开始

01:38:00.280 --> 01:38:02.280
蹦的蹦的那个点击开始了

01:38:02.280 --> 01:38:04.480
而是直接就上手玩

01:38:04.480 --> 01:38:06.880
送上这个大家回去研究研究

01:38:06.880 --> 01:38:07.880
研究研究

01:38:07.880 --> 01:38:09.980
local storage什么时候消失

01:38:09.980 --> 01:38:11.080
它不消失

01:38:11.080 --> 01:38:12.080
只有说

01:38:12.080 --> 01:38:15.880
当你自己手动的去进行删除的时候

01:38:15.880 --> 01:38:16.880
它会消失

01:38:17.880 --> 01:38:19.080
你手动的clear了一下

01:38:19.080 --> 01:38:20.880
那就没了或者说怎么样呢

01:38:20.880 --> 01:38:21.980
你在这里面哈

01:38:21.980 --> 01:38:22.680
点击这个

01:38:22.680 --> 01:38:24.080
他也就是clear了

01:38:24.080 --> 01:38:26.180
看这有个clear out的一个提示

01:38:26.180 --> 01:38:27.380
就删除掉了

01:38:27.380 --> 01:38:27.980
好了哈

01:38:27.980 --> 01:38:29.780
这个这个文件哈

01:38:29.780 --> 01:38:32.180
是今天给大家来整理的哈

01:38:32.180 --> 01:38:32.680
之后呢

01:38:32.680 --> 01:38:34.880
会把这个发给你们

01:38:34.880 --> 01:38:35.580
包括说

01:38:35.580 --> 01:38:37.480
那个dais也会发给你们

01:38:37.480 --> 01:38:37.880
但是呢

01:38:37.880 --> 01:38:40.880
要等到你们下课了之后

01:38:40.880 --> 01:38:42.480
等到你们下课了之后哈

01:38:42.480 --> 01:38:42.980
或者说

01:38:42.980 --> 01:38:44.480
哎有没有同学

01:38:44.480 --> 01:38:46.380
哎有没有这个同学

01:38:46.380 --> 01:38:47.780
呃

01:38:47.780 --> 01:38:50.380
之前拿过那个dais的一个文件

01:38:50.380 --> 01:38:51.080
有的话哈

01:38:51.080 --> 01:38:51.980
你们可以怎么样呢

01:38:51.980 --> 01:38:53.780
你们可以说发到群里面去喊

01:38:53.780 --> 01:38:55.980
因为等会我这个电脑要交给许老师

01:38:55.980 --> 01:38:58.180
然后我也碰不到这个碰到电脑了哈

01:38:58.180 --> 01:38:58.780
所以说呢

01:38:58.780 --> 01:39:01.580
你们就发到咱们那个微信群里面去喊

01:39:01.580 --> 01:39:02.980
发到群里面去就可以了

01:39:02.980 --> 01:39:04.080
ok

01:39:04.080 --> 01:39:05.180
严水私员同学哈

01:39:05.180 --> 01:39:05.980
你等会发

01:39:05.980 --> 01:39:07.180
你等会往群里面去发哈

01:39:07.180 --> 01:39:08.080
然后发给我就可以了

01:39:08.080 --> 01:39:08.880
然后这个

01:39:08.880 --> 01:39:09.160
呃

01:39:09.160 --> 01:39:10.080
web storage

01:39:10.080 --> 01:39:11.180
这个这个笔记呢

01:39:11.180 --> 01:39:12.080
我自己发

01:39:12.080 --> 01:39:12.480
好吧

01:39:14.080 --> 01:39:14.580
ok

01:39:14.580 --> 01:39:16.280
咱们呢就用这两个就可以了

01:39:16.280 --> 01:39:18.080
先学会这两个

01:39:18.080 --> 01:39:19.380
以后的其他的

01:39:19.380 --> 01:39:20.880
更多的咱以后再说

01:39:20.880 --> 01:39:21.280
好不好

01:39:21.280 --> 01:39:22.080
以后再说

01:39:22.080 --> 01:39:23.780
把这两个玩玩明白了之后

01:39:23.780 --> 01:39:24.480
嗯

01:39:24.480 --> 01:39:26.080
会有更多的东西

01:39:26.080 --> 01:39:26.680
嗯

01:39:26.680 --> 01:39:28.380
未来等着大家去学习的

01:39:28.380 --> 01:39:28.880
ok

01:39:28.880 --> 01:39:30.580
那我今天的这个呢

01:39:30.580 --> 01:39:31.480
就到这了

01:39:31.480 --> 01:39:31.880
等会呢

01:39:31.880 --> 01:39:33.780
许老师会上来跟大家呢

01:39:33.780 --> 01:39:35.580
再去聊一聊其他的东西啊

01:39:35.580 --> 01:39:36.580
许老师

01:39:36.580 --> 01:39:41.240
许老师在吗

01:39:41.240 --> 01:39:41.540
啊

01:39:41.540 --> 01:39:42.840
许老师已经过来了哈

01:39:42.840 --> 01:39:44.540
那我今天的这个课程呢

01:39:44.540 --> 01:39:45.540
就到这里了

01:39:45.540 --> 01:39:46.440
然后加来呢

01:39:46.440 --> 01:39:49.140
凭许老师跟大家去说一些更重要的

01:39:49.140 --> 01:39:50.040
一些事情啊

