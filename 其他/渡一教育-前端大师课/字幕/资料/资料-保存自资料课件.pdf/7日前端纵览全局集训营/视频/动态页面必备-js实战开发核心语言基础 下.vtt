WEBVTT

00:01.260 --> 00:03.820
好了 那咱们今天就开始了

00:04.840 --> 00:06.640
把耳机摘一摘

00:07.140 --> 00:13.040
生气口气啊 对你们来说没啥 今天晚上真没啥 不要慌 对我来说是个巨大的挑战

00:13.300 --> 00:15.080
为啥是个巨大的挑战呢

00:16.100 --> 00:18.160
因为介石这个语言啊

00:19.440 --> 00:20.960
要学多久呢

00:21.740 --> 00:23.020
就它的基础部分

00:23.280 --> 00:27.620
因为我们前端最重要的就是介石语言了 没有什么比它更重要的

00:27.980 --> 00:31.460
而且和世界世界语学完后边全是跟介石相关的

00:31.720 --> 00:35.040
不是说学介石语言嘛 就后边全是跟介石相关的

00:35.300 --> 00:36.840
就没有跟它不相关的

00:37.340 --> 00:40.680
如果说你们我们这里面有一些后期学员啊

00:41.180 --> 00:42.980
所以说你应该知道啊

00:43.240 --> 00:45.020
后面基本上就学跟介石相关的

00:45.540 --> 00:48.360
那介石不说相关的了 就它本身

00:48.620 --> 00:49.640
它基础部分

00:49.900 --> 00:51.680
需要花多少时间来学呢

00:52.200 --> 00:55.260
成个有一个介石的课程对吧

00:55.780 --> 00:57.580
要花多少时间呢 要花一个月

00:58.600 --> 01:01.160
而我有多少时间呢 我有一天

01:01.660 --> 01:03.200
有的都可怕

01:03.460 --> 01:04.480
挺残酷的对不对

01:05.000 --> 01:08.840
为什么只有一天呢 不是还有三天吗 因为后面两天我得

01:09.100 --> 01:13.200
给大家做这个效果 我得去实现效果了 所以说我只有一天

01:13.700 --> 01:16.000
一天1.5个小时 一个半小时

01:16.260 --> 01:17.800
因此这个是个巨大的挑战

01:18.060 --> 01:20.100
你讲那么讲呢 还是一样啊

01:20.360 --> 01:22.660
咱们不仅念是只讲安和

01:22.920 --> 01:23.420
而且呢

01:23.680 --> 01:25.220
仅讲那个

01:25.480 --> 01:27.020
它我们要用到的东西

01:27.840 --> 01:31.920
通过这一天的学习 让大家知道介石到底是一个什么东西

01:32.180 --> 01:33.200
我的目的就达到了

01:33.720 --> 01:37.300
我不在乎这一天 我能够把所有的介石东西全部交给你们

01:37.560 --> 01:38.320
那是不可能的

01:38.580 --> 01:39.860
这是违反科学规律的

01:40.120 --> 01:44.460
我就是在乎这一天 你们学到之后 你都知道这个介石到底是什么玩意儿了

01:44.720 --> 01:45.880
它大概在干什么事

01:46.140 --> 01:46.640
就够了

01:46.900 --> 01:48.060
那么我们明天就可以做效果了

01:48.320 --> 01:53.680
通过这个例子呢 也可以知道咱们介石呢 就算你学习了很少很少的知识

01:54.460 --> 01:55.220
这个网页

01:55.480 --> 01:56.500
你照样做出来

01:56.760 --> 01:57.520
没有问题

01:57.820 --> 02:00.640
只不过呢 你一开始肯定不知道怎么去写啊

02:00.900 --> 02:06.020
知道这个语言的语法 但是不知道怎么去写 那么没关系 我带这里面写就完事了

02:06.780 --> 02:08.840
好 那么咱们就直接开始啊 不废话了

02:09.600 --> 02:13.180
这个东西不是通宵能解决的 通宵我讲完了里面也吃不消

02:13.440 --> 02:15.740
而且我自己也吃不消 你说有什么脱糖

02:16.000 --> 02:19.080
脱糖呢 你就是一个半小时的客厂时期在脱上

02:19.340 --> 02:20.860
23 22点5个小时

02:21.120 --> 02:22.160
只能这样子脱了

02:22.920 --> 02:23.420
那没办法

02:23.680 --> 02:27.520
咱们来看一下介石 这个东西技术啊 像竖层

02:28.080 --> 02:32.320
竖层的可以 但是那竖层的只能理解一些皮毛 就要拿到这七天一样

02:32.680 --> 02:34.920
真耳巴静的你要通过这一行去就业

02:35.180 --> 02:40.120
要走这个方向的话 还是得稳扎稳扎 踏踏实实的学习啊 这个玩意没办法

02:40.880 --> 02:41.140
啊

02:42.420 --> 02:46.760
好 咱们呢 我们之前讲了一些语言的知识点的啊 咱们看在介石的知识点

02:46.760 --> 02:48.960
首先我说一下介石有朋友在问啊

02:49.320 --> 02:51.380
他名字叫做全称叫做java script

02:51.640 --> 02:55.480
那么这本语言呢 他跟那个java有什么关系呢 他没有一毛钱关系

02:55.880 --> 02:57.520
就跟那个葡萄跟葡萄牙一样

02:57.920 --> 03:00.840
跟那个夫妻跟夫妻背片一样 他没有一毛钱关系

03:01.280 --> 03:06.440
他就是这个名字啊 他为了商业上的目的呢 给他取了这么一个名字啊 当时java很复活嘛

03:06.640 --> 03:08.840
所以说他取了这个名字 接了java的东风

03:09.760 --> 03:13.680
好 咱们来看这个介石语言啊 首先我们来说一下这个介石语言能干吗

03:15.160 --> 03:21.840
语言能干吗 能干吗呢

03:22.760 --> 03:26.520
首先这个介石语言要这样理解啊 一个是语言本身

03:27.460 --> 03:31.900
一个是语言本身 什么叫语言本身 语言是什么 语言就是说话呀

03:32.420 --> 03:38.540
跟你的中文一样 中文是说话给人听的对吧 计算机语言的是说话给计算机听的

03:38.800 --> 03:43.940
语言就是说话 语言本身的啥都能干 如果说他语言本身的话啥都能干

03:46.390 --> 03:47.410
啥都能干

03:48.430 --> 03:50.750
你说你要告诉我中文能干啥

03:51.510 --> 03:54.830
你是不是 中文就是用来表达的 对吧 你是不是什么东西都可以表达出来

03:55.290 --> 03:57.850
我们包括我们技术学习啊 还有日常的

03:58.110 --> 04:02.210
聊天说话啊 这些东西啊 沟通 他都可以表达 说他什么都能表达

04:02.970 --> 04:06.810
关键是介石这个语言 他表达出来计算机能不能听到我们的问题

04:07.330 --> 04:11.930
主要是这个问题 语言本身他啥都能干 他是能够表达 他表达能力很重复的

04:12.190 --> 04:18.090
包括java语言是一样的都是一样 都是用来表达的啊 你想要干吗 你想要计算机干什么事情

04:18.590 --> 04:23.210
那么这个时候呢 你要通过一个语言来告诉计算机 这就是他语言本身啥都能干

04:23.830 --> 04:29.550
但是那我们的介石语言呢 他表达出来了很多东西 他到底

04:30.590 --> 04:37.750
允不允许我们干 那么这个就涉及到环境了啊 我们的介石语言可以运行在各种各样的环境里面 比方说手机端

04:38.710 --> 04:46.390
比方说那个小程序 对吧 比方说那个桌面应用程序 你看这个vscode 就这个玩意儿 这个就是介石语言写的

04:46.710 --> 04:50.110
想不到吧 这个玩意儿就是介石语言写的 就桌面应用程序

04:50.830 --> 05:00.050
那么他不同的环境下面呢 他能干的事呢 又不一样 所以说呢 我们还谈论介石语言能干嘛的时候呢 更多的时候谈论的是他运行的环境

05:01.010 --> 05:04.090
环境 比方说我们现在运行的环境是什么呢 浏览器

05:05.650 --> 05:13.370
如果说介石语言运行在浏览器上面 在浏览器这个环境里面运行的话 就说话给浏览器听 让浏览器呢

05:14.050 --> 05:19.690
去做我们想要他做的事情 那能干嘛呢 他可以做两个层面的事情 一个呢是控制

05:20.250 --> 05:21.090
浏览器

05:21.810 --> 05:25.810
呃 内核 我们简单说啊 就是控制浏览器窗口

05:27.010 --> 05:29.290
窗口或者是网络通信

05:30.930 --> 05:34.530
在这一部分啊 这一部分呢 这几天我们不涉及啊 我们今天是不涉及的

05:35.410 --> 05:41.810
好 这是第一个 第二个呢 更多的时候呢 我们是控制浏览器中的元素

05:42.530 --> 05:45.090
你看我们的浏览器里边是不是也很多的atm元素

05:45.670 --> 05:50.550
对不对 这里是不是很多atm元素 那么这些元素呢 我们可以用介石语言来控制他们

05:50.870 --> 05:54.550
控制它啥呢 控制它的各种属性 你看这些元素属性是吧

05:54.870 --> 06:00.790
这可以控制它的属性 已经了元素的样式 这些呢都是在我们介石语言里边是可以控制的

06:01.910 --> 06:05.470
这是我们介石语言能干嘛 在浏览器里边主要就是这么

06:06.190 --> 06:12.030
两个方面的两个层面的事情 一个是控制到内核 内核我们现在不用管啊 你都不知道他意思没关系啊

06:12.450 --> 06:16.090
我们现在学不到这一块 第二个是控制浏览器中的元素 这是我们要学习的

06:17.010 --> 06:20.730
因此我们在学习介石语言的时候呢 要学新两个层面

06:21.850 --> 06:26.770
一个是语言本身 要教你怎么说话 经常你学中文的时候 要教你从拼音

06:27.290 --> 06:31.450
然后到汉字偏旁部手开始认字 对吧 然后再主持 然后再招聚

06:32.210 --> 06:37.690
学英语也是从26个英文字母 然后到音标 然后到单词 然后再招聚

06:38.150 --> 06:40.870
所以说我们要从基本的开始学 学他的语言本身

06:41.510 --> 06:49.310
学了之后呢 我们再学浏览器环境里边 我们怎么去说话 让浏览器环境里边知道我想我怎么来控制他的元素

06:49.750 --> 06:55.270
这是我们这一天要学习的内容啊 这天可能讲不完 如果说讲不完的话 我们就拖到明天的

06:55.830 --> 07:02.390
这是第一个层面 第二个层面呢 既然我们搞清楚了介石语言是什么东西的 然后我们再想

07:02.690 --> 07:08.210
这个介石语言 它写在单码写在哪 一个世界上一样 我们单码写在哪 介石单码写在哪

07:09.650 --> 07:14.970
我们现在仅仅说浏览器环境啊 在哪里写 在哪里写的有两个地方

07:15.650 --> 07:22.370
主要是有两个地方 一个是元素的内容啊 就是sqrips元素内部

07:23.930 --> 07:29.210
什么意思呢 就是我们代码写到哪呢 我们这里比较要加个元素啊 在下面加一个元素

07:30.070 --> 07:36.310
在这里 加一个sqrips元素 那么我们在这里边就写上介石单码

07:38.750 --> 07:45.590
介石单码就写到这里边 这是一种方式啊 这种方式呢 有的时候呢 我们一般用以来测试啊 或者是写一些

07:46.070 --> 07:49.470
比较小的介石单码 比较少的介石单码 可不可以写到这

07:50.750 --> 07:55.110
这是这种方式 更多的时候呢 我们是写到一个单独的文件种

07:55.930 --> 07:58.610
第二种方式是写到一个

08:00.490 --> 08:06.930
单独的文件种 这个文件的后续名字是介石 就跟那个css一样 对吧 是不是也写到单独的文件里边

08:07.250 --> 08:09.890
好 我们这里呢 可以建立一个文件夹叫做介石

08:10.650 --> 08:16.410
或者叫做sqrips也行 然后呢 这里边我们随便新建个文件吧 比如说我们test

08:16.930 --> 08:21.490
介石 test1.json 那么我们在这里边写介石代码

08:22.150 --> 08:28.350
好 写到之后是不是跟介石 跟那个css一样的问题 就是我这个代码怎么在页面上用呢 页面上运行的

08:28.590 --> 08:34.350
我们页面上的可以用这种方式 还是用一个sqrips的元素 然后给他一个什么呢 给他一个src

08:35.910 --> 08:41.830
表示我们的代码在哪 后边写上文件的路径 哪个文件这个介石文件夹下面的这个介石

08:42.070 --> 08:46.910
对吧 那么就相当于是跟那个css是不是差不多 对不对 是不是css差不多

08:47.850 --> 08:59.090
就这一个 很好理解 对不对 都是这种方式啊 我们今后呢 就是我们今天以及后边两天 我们写了介石代码 全部在这个文件里边 我们把它叫做外部介石文件

09:00.650 --> 09:06.210
好 这种解放大家注意一下啊 在引用介石 我们把这个东西叫做引用介石文件

09:07.850 --> 09:09.850
引用介石文件

09:11.290 --> 09:16.570
那么这个引用介石文件 我们一般写到哪呢 就这个东西写到哪呢 我们一般写到页面的

09:17.550 --> 09:26.510
最下方 至于为什么它跟页面的渲染过程呢 有关系啊 我们真的不详细解释啊 我们你们按照这个作用就行了啊 把它写到页面的最下方 就是保底元素的

09:27.310 --> 09:31.350
最下面 保底的最后边 作为保底的最后几个资源数

09:32.230 --> 09:33.230
好 这是关于这一块

09:34.750 --> 09:39.910
好 接下来我们现在代码也写出来了 对吧 文件也写好了 那么接下来关键是代码写啥

09:40.570 --> 09:45.850
这是我们今天的主要谈论的话题啊 就是我们一个语言层面到底该怎么来说话

09:46.410 --> 09:48.770
这个地方就对 老老实实一个一个来了

09:49.570 --> 09:55.170
首先讲它的一个基本知识 这里边需要一个很长的过程啊 一个来

09:55.890 --> 09:58.010
首先讲这个数据

09:59.930 --> 10:01.290
数据的书写

10:03.010 --> 10:06.090
好 这里首先解释一个概念 什么叫做数据

10:07.130 --> 10:08.330
数据是个啥玩意儿

10:09.150 --> 10:11.430
大家注意这个数据啊 它不是数字

10:12.390 --> 10:14.950
数字呢 是数据的一种 数据是什么东西呢

10:15.950 --> 10:21.110
任何有用的信息就是数据 比方说一首歌

10:21.790 --> 10:28.790
数据 一部电影 数据 一篇文章 数据 凡是有用的信息都叫数据

10:30.190 --> 10:33.310
包括一个数字 它也是数据 数据它不是数字

10:34.290 --> 10:41.970
那么我们在JS里边可以使用什么样的数据呢 在JS里边我们通常使用的数据呢 有这么几种

10:42.610 --> 10:44.690
几个大类 就是数据的分类

10:49.070 --> 10:52.750
数据的分类 数据的分类呢 我们把它叫做数据类型

10:53.790 --> 10:58.990
我们把数据分一些类嘛 是吧 我们说这个 刚才看听那个什么少年

10:59.550 --> 11:03.910
对不对 少年是一个数据嘛 那是歌是一个数据嘛 它分类是什么歌曲

11:04.770 --> 11:10.090
那么相对我们对不同的数据可以做一个分类 在JS里边呢 它也是对数据做了一些分类

11:10.650 --> 11:13.130
那么这个数据的分类呢 我们把它叫做数据类型

11:13.730 --> 11:17.850
在JS里边数据的类型呢 有这么几种 一种叫做number

11:18.850 --> 11:26.970
就是数字 好 那么我们这里说一下啊 数字的书写 书字怎么来书写呢 非常简单 就直接书写就行了

11:27.950 --> 11:31.790
数字是直接书写就行了 直接书写

11:33.390 --> 11:36.630
好 咱们来看一下啊 我们这里呢 书写一个数字 三

11:37.710 --> 11:42.470
这是一个正确的语法 对吧 就书写了一个数据 这个数据什么用 没有什么用 没有什么用

11:43.150 --> 11:53.310
我们如果为了看到效果的话 我们可以把这个数据呢 输出 输出出来 我们这里交给大家一个语句啊 叫做cancel.log

11:53.930 --> 12:02.770
把这个三写进来 写到这个小括号里边来 这句话表示什么意思呢 这句话表示在控制台中输出一个三 好 咱们来看一下这个效果

12:04.090 --> 12:04.410
运行

12:06.490 --> 12:07.370
点击右键检查

12:08.690 --> 12:14.890
好 我们怎么来看到这个效果了 点这个 我们之前都在这里对吧 element 然后点这cancel

12:15.890 --> 12:22.690
你看 这里是不是输出了一个三 对不对 那么这句话是什么意思啊 我打个注释啊 在JS里边也有注释

12:23.410 --> 12:25.690
JS里边的注释是两个写杠开头

12:27.210 --> 12:28.930
先说个注释吧 注释

12:30.970 --> 12:39.650
两个写杠开头 后面写注释内容 咱们再写一下啊 这句话的意思表示的是什么意思呢 也可以用这种方式cancel加上写杠

12:40.650 --> 12:47.450
cancel加写杠也可以自动生成注释 那么这句话什么意思呢 表示的是在控制台

12:48.130 --> 12:52.890
在浏览器控制台中输出数字3

12:53.470 --> 12:58.910
输出数字3 你看有关系控制台里面就有一个3的 对吧 非常简单 这就是数字的书写

13:00.570 --> 13:04.410
数字的直接书写就行了 那么第二种方式呢 第二个是steam

13:07.690 --> 13:12.170
这个东西叫做制服串 制服串是什么呢 就是一串文本

13:12.930 --> 13:21.450
比方说你好 比方说打个招呼 呈哥 邓哥 对吧 这两个字 这些文字都是都是一串文本 对不对 那么把它叫做制服串

13:22.150 --> 13:29.590
那么这个制服串呢 他怎么来书写呢 他是两个双引号或者是两个单引号内部 第一种方式啊

13:30.550 --> 13:40.430
第一种 第一种方式是直接写两个双引号 第一个双引号 注意是英文啊 这里的符号全都是英文 那么这里边书写制服内容

13:41.710 --> 13:46.750
文字内容 然后双引号结束 还有一种的是两个单引号

13:48.270 --> 13:50.830
两个单引号 这里是文字内容

13:52.430 --> 13:59.030
一个单引号结束 看呗 是不是这两种书写的方式 这就是制服串 好 咱们来试一下啊 我们把这句话注释掉

13:59.950 --> 14:04.550
我们保留吧 然后再来一个Consult Logan表示的是在控制台里边输出啊

14:05.270 --> 14:10.350
你就记住就行了 就直接这样子写就行了 然后呢 我们这里呢 还有种简单的书写方式叫clg

14:10.990 --> 14:14.310
一按一下Type键 那么它自动给你生成这个语句 好 然后

14:15.110 --> 14:17.110
我们在这里边输出一个制服串

14:17.850 --> 14:22.090
嗯 这里的分号什么意思的 分号表示一个语句结束 就这一句话结束了

14:22.490 --> 14:26.210
就像我们说话一样 一个句号对不对 它叫做分号啊 这句话结束了

14:26.530 --> 14:32.930
当然这个的介事语言呢 里边呢 它没有那么严格的写不写啊 都可以 但是我建议大家写上啊 尽量的写上

14:33.330 --> 14:36.690
这是英文分号啊 那么我们这里比方说啊 邓哥

14:38.330 --> 14:38.650
很帅

14:41.690 --> 14:41.930
好

14:43.050 --> 14:47.050
保存啊 我们看一下控制台 你看是不是输出了两句话 第一句话输出了一个数字3

14:47.170 --> 14:55.410
你看 第二句话输出了一个制服串 对不对 所以说制服串的书写是这样子书写的啊 这是这个指示啊 这是这个类型

14:56.610 --> 15:01.410
好 第三个类型呢 我们看一下啊 后边还有一些类型

15:02.330 --> 15:03.970
还有这个类型 叫做布利

15:05.890 --> 15:08.850
叫做什么呢 布尔 布尔是什么呢 就是真和假

15:09.670 --> 15:14.110
真假的意思 比方说你是不是VIP学员

15:14.830 --> 15:20.830
去或者是force 表示表示真或者是假是和不是 那么这个数据呢

15:21.550 --> 15:27.910
他的书写方式呢 是这样子书写的 直接书写一个单词叫做去 一个单词呢 叫做force

15:28.630 --> 15:34.670
还有这样子书写的去表示是或者叫做真 这个force呢 表示是

15:36.150 --> 15:36.790
或者是真

15:37.770 --> 15:41.970
这个force呢 它表示的是不是或者是假

15:43.890 --> 15:45.770
好 咱们来看一下啊 这种数据

15:47.770 --> 15:49.010
比方说我们这里输出一个处

15:50.570 --> 15:57.770
你看 这里输出处 那么这个东西有什么用 我们首先要学习它 有什么用我们后边就知道了啊 然后我们再来输出一个

15:59.690 --> 16:00.010
force

16:02.550 --> 16:07.070
你看 就出来了 对不对 这里呢 就是这么几种类型啊

16:07.530 --> 16:13.290
当然肯定不止这些 肯定不止这些 还有一些类型 不过呢 我们这几天用不到 就不再去设计了

16:14.090 --> 16:15.370
然后呢 这里还有一个

16:17.450 --> 16:19.330
还有一个是什么的 还有一个叫做objects

16:20.450 --> 16:24.250
这东西叫做对象 很重要的东西来了啊 非常非常重要的东西 叫做对象

16:25.290 --> 16:28.610
这个对象呢 它又是什么玩意呢 它是这样子

16:29.730 --> 16:36.290
就是如果说我们程序里边 只有这几个简单类型的话 那么有的时候表达一些复杂的数据

16:37.090 --> 16:40.970
那么就不好表达了 比方说 你怎么来表达一个人呢

16:42.290 --> 16:47.050
一个学生怎么来表达 学生是数字吗 不是啊 学生是知识串吗

16:47.970 --> 16:52.730
那只是学生名字是知识串的啊 他不是啊 学生是布尔吗 也不是啊

16:53.290 --> 16:59.450
对吧 那学生用什么来数据呢 他是什么规 那怎么来分类的 对不对 或者是一首歌 他怎么来分类了

16:59.690 --> 17:06.410
一张图片 他是到底是数字还是知识串还是布尔的 就不好分类的 对吧 像有些数据呢 他太多了 太复杂了

17:06.710 --> 17:13.910
那么我们这个时候呢 如果说用这种简单的数据来分类的话 就不是那么好分类了 我们怎么来分类呢 我们就用个对象

17:14.510 --> 17:18.910
用了对象之后呢 我们就会发现他就对象是什么 这个单词其实

17:19.510 --> 17:26.790
翻译过来了 中国人呢 不是很好理解啊 这个对象的真实意思 奥巴基克特表示什么意思 表示事物的意思

17:29.740 --> 17:30.540
就是个物体

17:31.860 --> 17:34.940
事物 这个东西其实更加好理解一点 奥巴基克特

17:35.440 --> 17:43.760
万事万物嘛 那么奥巴基克特他就可以表示任何东西了 那么他是什么呢 他是一把多个简单类型组合在一起

17:44.720 --> 17:49.440
知道这个意思吗 他把多个简单类型组合在一起 那么我们来看一下对象怎么来数写

17:50.720 --> 17:56.120
好 对象的数写方式呢 是两个大括号 两个大括号里边的写上

17:57.240 --> 17:57.840
属性名

17:58.300 --> 18:03.660
属性名 属性值应该都很清楚了啊 属性值

18:04.420 --> 18:07.820
是不是有点类似于css的写啊 对不对 属性值

18:08.940 --> 18:18.460
好 咱们来看一下啊 可以写多个啊 我们直接再演示一下 把这个东西注射掉了 注射掉了就没效果了啊 你看一面上就没效果了啊 它就不会再运行了

18:19.540 --> 18:25.900
每一次页面刷新 它都会完整的重新运行一遍 把这个单码重新运行一遍 从上到下重新运行

18:26.360 --> 18:27.720
好 来 我们来看一下对象

18:28.840 --> 18:29.960
我们现在输出一个对象

18:31.960 --> 18:35.400
比方说我们输出一个乘哥吧 我们把乘哥表现为一个对象

18:36.600 --> 18:38.920
邓哥吧 我们邓哥 邓哥比较吉祥一点

18:39.920 --> 18:45.200
好 对象怎么来输写 什么两个大括号 对吧 不要去输写前面任何的其他制服啊 就直接输写两个大括号

18:46.000 --> 18:49.840
好 大括号里边写什么呢 我们可以换个行 换个行看起来更好看一点

18:50.440 --> 18:54.480
属性名 属性名呢 我们该取个名字啊 比如说邓哥有什么

18:55.140 --> 18:59.620
属性名是什么意思啊 属性是什么意思啊 就是它表示这个对象啊 就是这个物体啊

19:00.020 --> 19:05.540
它拥有的一些东西 比方邓哥拥有什么拥有姓名吗 我们给他写个内

19:06.140 --> 19:08.620
表示邓哥的姓名 邓哥

19:10.100 --> 19:12.380
然后呢 我再给他写一个 for內

19:13.220 --> 19:16.140
完整的姓名 叫做邓虚名嘛 对不对

19:17.620 --> 19:18.740
是这个名吗 这个名

19:19.680 --> 19:26.200
对吧 那里看什么什么意思啊 用兜号分隔啊 多个属性之间用兜号分隔 什么意思 非常简单

19:26.880 --> 19:32.000
我又一个对象 这个对象的是一个附和属性啊 就是不是 它的一个附和的数据

19:32.400 --> 19:38.040
但是这个数据是有很多简单数据组合在一起的啊 第一个数据呢 它的名字叫做name

19:38.600 --> 19:42.920
表示名称 名称叫邓哥 它的值叫邓哥 这叫属性名 这叫属性值

19:43.900 --> 19:46.380
for內表它的完整名称 叫做邓虚名

19:46.900 --> 19:52.340
然后我们再来一个啊 你看这个东西 这个属性是不是一个制补券 这个属性是不是一个制补券 对不对

19:52.860 --> 19:54.060
然后再来一个 age

19:54.660 --> 20:01.060
年龄 年龄等于邓哥多好的 邓哥65 对不对 那么年龄呢 是不是 这是一个数字

20:01.660 --> 20:02.780
对不对 然后呢

20:03.900 --> 20:05.420
比方说邓哥的爱号

20:06.540 --> 20:10.020
来大臣告诉我 爱号是什么呢 邓哥的爱号是

20:10.640 --> 20:14.000
抽烟和酒汤呢 不是啊 这是那个香菜

20:15.280 --> 20:21.080
和秋葵 对不对 经常听诚哥的歌应该知道 爱号那不是 能看懂吗

20:22.080 --> 20:28.520
啊 那么还有一个邓哥的性别啊 性别的话我们可以用个布尔来表示 当然可以用任何东西来表示啊 比方sex

20:28.920 --> 20:33.120
可以用制补券 男和女来表示 也可以用个布尔啊 e-smail

20:33.760 --> 20:36.840
叫什么呢 叫是不是男的啊 我们拍他视为q 对吧

20:37.460 --> 20:38.620
是不是男的

20:40.180 --> 20:45.860
e-smail 表示是不是男的 这些名字你可以随便命名啊 自己命名 但是最好了符合逻辑

20:46.580 --> 20:47.620
最好符合逻辑

20:48.180 --> 20:53.900
你看 名字全名 然后呢 年龄 爱号是不是男的 对吧

20:54.220 --> 20:59.140
force就是女的嘛 对不对 那么这就是一个完整的对象 这就是都一项的书写方式

20:59.780 --> 21:03.180
没问题吧 是不是很简单 就是把多个书军的组合在一起

21:03.780 --> 21:06.660
好 咱们来看一下啊 印象出来 你看他输出的结果

21:07.060 --> 21:11.940
他就输出了这么一个结果 这个东西可以展开的啊 点一下可以展开 他就把各个信息给裸裂出来了

21:12.420 --> 21:14.740
对不对 这就是数据的书写方式

21:15.420 --> 21:16.820
没问题吧 非常简单啊

21:19.030 --> 21:24.110
好 那么现在呢 我们学了这个数据的各种类型 以他的如何来书写

21:24.670 --> 21:32.910
然后呢 我们现在问题是这个书写的过后有什么意义呢 这个书写这个东西 我们现在目前呢 就是书写完了过后 把它输出了 对吧 输出到控制台

21:33.770 --> 21:44.050
其实呢 我们把数据写了之后呢 一般情况下呢 不是直接把它输出到控制台 而是什么呢 把数据保存起来 那么如何来保存数据

21:45.410 --> 21:50.130
如何保存数据 只要保存数据就把蠢到一个地方 我之后再用

21:50.530 --> 21:56.610
就好必须说你家里边有什么规制啊 箱子啊 对吧 你可以把你有用的东西呢 放起放的放 先放到一边

21:56.930 --> 22:00.370
然后需要的时候呢 再把它取出来用 就是如何来保存数据

22:00.910 --> 22:05.150
如何来保存数据呢 我们通过的是一个变 叫做变量 叫做变量

22:06.110 --> 22:11.790
那么变量怎么来写呢 变量的书写非常简单啊 变量的书写呢 我们来这里复制一下啊

22:13.470 --> 22:14.590
啊 这里我们重新删除

22:15.830 --> 22:18.470
变量的书写呢 就是一个关键字化

22:19.990 --> 22:21.510
啊 然后呢 是变量名

22:22.550 --> 22:26.790
然后一个复 这个东西要等号啊 就要一个复制符号 然后后边是数据

22:27.010 --> 22:31.730
好 什么意思呢 我们来写一下 比方说我们刚才那是不是写了一个

22:32.850 --> 22:35.210
呃 写个简单的吧 写一个a

22:36.290 --> 22:37.570
等于一 这是什么意思呢

22:38.370 --> 22:41.930
看着啊 这句话的意思叫做 定义一个变量

22:42.810 --> 22:50.130
你可以把它理叫一个箱子用来存东西的啊 用来存东西的 其实它就是内存里边的一块空间啊 内存里边的一块空间

22:50.730 --> 22:51.850
然后定的一个变量

22:52.690 --> 22:53.970
换句话说 就是呢

22:54.690 --> 22:56.210
开辟了一块

22:56.850 --> 23:01.410
内存空间啊 或者叫做啊 拿了一个

23:02.850 --> 23:03.650
空箱子

23:04.770 --> 23:06.930
啊 都是一个意思啊 你可以这样去理解

23:07.650 --> 23:11.330
然后呢 做了什么事情呢 它这句话有很多的事情啊 然后呢 给

23:12.930 --> 23:14.690
变量名为

23:16.370 --> 23:17.970
a啊 变量名为a

23:19.170 --> 23:23.530
那么什么意思呢 就表示 给这块内存空间取了一个名字

23:24.810 --> 23:25.210
取了

23:25.790 --> 23:26.590
一个名字

23:28.900 --> 23:35.380
叫做什么呢 叫做a 或者叫做呢 给箱子贴了一个标签 叫做a 啊 给箱子

23:37.500 --> 23:37.940
箱子

23:38.700 --> 23:46.580
贴了一个标签啊 a 都是一个意思啊 就是给它取了个名字 a 然后呢 又做了一件事 把一

23:46.980 --> 23:52.540
放到这个内存空间里边去 对吧 那么我们把它叫做 给变量负值

23:53.040 --> 23:59.280
给变量负值为1 对吧 一是什么 一个数字嘛 对不对 把数字负值给这个变量

23:59.520 --> 24:05.080
啊 当然小数也可以啊 3.14 这些都可以啊 给变量负值为1 那么也表示什么意思呢

24:06.040 --> 24:10.920
给内存空间存放了一个数字

24:11.680 --> 24:17.400
3.14啊 这里也是啊 3.14 同时又表示呢 给箱子中

24:18.380 --> 24:22.420
箱子中存放了一个数字

24:23.180 --> 24:28.900
3.14 都是一个意思 这就是这句话的意思 所以说这个等号呢 它不是叫做等号

24:29.260 --> 24:35.100
它叫做 叫做什么呢 在程序里面它不叫等号啊 这个东西叫做什么呢 叫做负值负号

24:36.540 --> 24:40.380
负值负号 就是把负 把它u 边的东西

24:41.300 --> 24:44.580
放到前边那个箱子里边去 保存起来

24:45.440 --> 24:51.560
好 保存起来过后我们就可以随时随地的把它取出来用 比方说我们刚才在输出对吧 输出的时候呢

24:51.560 --> 24:55.080
我们刚才是直接写的数字 那么这个时候呢 我可以不写数字了 直接写个a

24:56.000 --> 24:59.960
什么意思 就是把这个空 把这个箱子里面的东西拿出来输出

25:00.560 --> 25:06.200
就是这么个意思 看呗 你看输出是不是三点意思 还是一样的 对吧 它就把箱子里面的东西拿出来了

25:06.480 --> 25:12.120
输出 就是这么个意思啊 这就是变量的存数据 以及呢取数据

25:12.860 --> 25:17.500
是不是很简单 对不对 非常非常简单啊 然后呢 这个变量里边呢

25:19.140 --> 25:23.580
它不仅是可以存数据 而且呢 可以重新存 我们来看一下

25:25.460 --> 25:28.660
给变量 给变量重新负值

25:29.820 --> 25:37.940
为什么叫做变量 因为它的东西是可以变化的 比方说 a 等于跟一个叫做负值负号 给为a负值一个

25:38.760 --> 25:40.200
啊 邓哥

25:42.780 --> 25:49.580
什么意思 这时候还什么意思 这时候如果说利用数学来理解的话 就一定有问题啊 你说 a 等于3.14 a 为什么有等于邓哥呢

25:50.420 --> 25:58.340
难道邓哥等于3.14吗 不是这样子理解的啊 那么应该怎么理解 应该是3.14放到这个箱子里边去

25:58.900 --> 26:01.540
然后呢 再把这个邓哥再放到

26:02.540 --> 26:08.540
这个箱子里边去 那么箱子里边之前的东西就没了 相当于被覆盖掉了 他现在重新存放这个数据

26:08.840 --> 26:11.240
那么这里输出 a 输出什么了 他就输出了邓哥

26:11.960 --> 26:20.080
就是这么个意思啊 就是把它覆盖掉 也就是他这个箱子里边东西是可以变化的 这就要做变量 而且呢 我们可以看到 除了第一次

26:21.440 --> 26:26.840
我给他负值的时候 定义叫做定义变量啊 除了第一次定义变量的时候 我使用了关键字

26:27.760 --> 26:35.000
挖的单词全称叫做 variable 就叫做变量的意思啊 后边给他负值的时候是不需要给这个关键字的啊 是不需要给的

26:35.700 --> 26:40.500
也高 大家呢 也尽量不要给 也尽量不要给 这就是这种啊

26:41.380 --> 26:48.060
这种邪法就变量的含义 当然这个变量不仅可以扶植为制服串 还可以干嘛呢 还可以给他负值为一个布尔 对不对

26:48.260 --> 26:56.720
还可以给他负值为一个布尔 我们再看一下 那么他之后就变成布尔了 对吧 先保存这个 然后再把被他覆盖掉 又被他覆盖掉 那么输出 a 就是一个

26:57.420 --> 27:02.820
看呗 是不是非常简单 然后呢 还可以给他定一个给他负质为一个什么 给他负质为一个对象

27:05.040 --> 27:05.540
啊 你看

27:06.640 --> 27:08.160
是不是给他可以给他负质为一个对象

27:09.000 --> 27:15.120
好 咱们再看 你看是不是得到了得到这个对象了 对不对 这就得到这个对象了 他就变成一个对象了啊

27:15.880 --> 27:21.520
啊 好 那么现在呢 我给他说一下啊 如果说他里边保存一个对象的话 我是可以通过

27:22.000 --> 27:24.920
一种方式能够取到对象里边的那种的

27:26.000 --> 27:34.160
啊 获取对象中的某个属性 这是什么意思呢 就是说哎里边保存了一个什么呢 保存了一个

27:34.620 --> 27:40.020
对象 你看这是个对象 你没有很多信息对吧 有名字 有全名 有联名 有爱好 有性别

27:40.340 --> 27:48.460
他有很多信息 如果说我不想把整个取出来 我只想取出一点点其中一部分 那怎么来取呢 我就可以用这种方式来取

27:49.220 --> 27:56.140
a 第二了什么 你看第二什么就像一个导航对吧 我取出这个对象里边的某一个属性

27:56.700 --> 27:58.140
比较说某一个姓名

27:59.100 --> 28:02.100
看呗 是不是 adder name 那么这里输出什么的凳格

28:03.080 --> 28:06.920
看呗 然后呢 这个 adder age 输出什么的

28:08.560 --> 28:13.760
65 然后呢 adder loves 输出什么的 输出这个秋葵和香菜

28:15.920 --> 28:19.760
香菜和秋葵 是非常好理解啊 这都是非常自然的

28:20.240 --> 28:24.680
就是定义变量 给变量里边加东西 可以放任何东西啊 放一个对象完全没问题

28:25.120 --> 28:28.560
然后可以通过这种方式呢 能够取到这个对象里边的任何内容

28:29.380 --> 28:35.580
明白意思吧 而且呢 我告诉大家 这个对象里边呢 它还可以 某一个属性都还可以是对象

28:36.060 --> 28:38.700
你看啊 比方说登革的柱子

28:39.580 --> 28:42.060
而柱子 他是什么呢 他不是

28:42.940 --> 28:48.820
登革的居住地址 他不是那个制服串 也不是数字 也不是铺耳 他又是一个对象

28:50.780 --> 28:55.580
可不可以当然可以啊 对不对 他的居住地址又可以是个对象 居住在哪呢 省份是

28:57.260 --> 28:57.700
黑龙江

28:59.540 --> 29:07.540
城市是哈尔滨 能理解这个东西吗 所以有点有点那个 有点像元素牵套的意思的

29:08.260 --> 29:11.880
哈尔滨 是这样写的吧

29:13.480 --> 29:13.880
哈尔滨

29:19.960 --> 29:20.720
哈尔滨

29:21.760 --> 29:23.720
这个啊 有点像那个

29:24.560 --> 29:33.240
牵套的意思的 对吧 这里加存那个对象 对象里边细细太多了啊 有登革的姓名 登革的年 完整姓名 年龄 爱好姓别

29:33.460 --> 29:36.140
然后呢 登革的柱子 登革的柱子又是对象

29:36.940 --> 29:40.980
那么大家猜一猜 如果说我要取通过这个A来取出

29:43.020 --> 29:45.340
省份 登革居住的省份该怎么取

29:46.100 --> 29:53.460
猜一猜 你们猜一猜 这个如果说通过A来取出这个省份该怎么取的

29:55.500 --> 29:59.580
啊 我们能够取出爱好是个点了是吗 对吧 取出性别是意思没有对不对

30:00.040 --> 30:01.580
好 那怎么来取呢 哎 就是

30:01.840 --> 30:05.420
哎 有人说两个点啊 有点这么一个意思的 你看啊 我就可以这样子取

30:05.920 --> 30:07.920
先找到登革的而坠死

30:09.000 --> 30:10.800
找到登革的什么 登革的柱子

30:11.320 --> 30:14.120
我们看打印出来是什么东西啊 打印出来你看是不是个对象

30:14.880 --> 30:17.200
对吧 是吧 把这个东西打印出来了

30:18.160 --> 30:21.040
那么我要在这个对象里面栽取取什么 栽取取

30:21.560 --> 30:22.060
这个

30:22.820 --> 30:24.360
就是省份 是不是栽了一个点

30:24.880 --> 30:27.280
找到这个 什么意思 找到A的

30:28.100 --> 30:29.540
地址的

30:30.300 --> 30:31.060
省份

30:32.340 --> 30:37.220
你看一下 打印出来黑龙奖了 对吧 一切都是非常非常的自然啊 这东西

30:37.900 --> 30:41.780
看上去一切都是很自然的 没有什么绕的 也非常容易理解

30:42.340 --> 30:46.020
这就是变量 可以往变量里面存东西 也可以从变量里边读东西

30:46.280 --> 30:49.140
如果说变量里面存的是一个对象的话 你可以通过这种方式

30:49.380 --> 30:52.820
挨着挨着去取到他的所有的属性 可以把他取出来

30:53.580 --> 30:56.180
不是说取出来就没了 取出来他还在箱子里面啊

30:57.160 --> 31:00.240
只是取出来的把打印出来可以随意的用 这就是变量

31:01.240 --> 31:06.520
那么这里要注意的一个点就是变量的名称 我这里的变量名称是A 对不对

31:06.720 --> 31:14.320
那么平时呢 你们真正来去写的时候 一般不要去这样子写这样的变量名称 一般怎么来写呢 一般是一个有意义的单词

31:15.200 --> 31:16.360
我这里给大家说一下

31:18.080 --> 31:18.880
变量的名称

31:21.830 --> 31:27.670
变量的名称呢 就是你是自己给他取名一样 就像你一个箱子 你是给自己给他贴标签一样 你不要乱贴

31:28.670 --> 31:35.190
这个名字呢 你如果说去乱写的话 就像我之前给CSS内名说的 你就要注意这个人身安全了

31:36.790 --> 31:37.910
因为这个变量名的

31:38.710 --> 31:42.950
如果说你乱取名称的话 容易就是导致一些不好的后果

31:43.550 --> 31:49.630
因为这个毕竟代码有可能会让别人读的 变量的名称呢 我们有这么几个要求啊 一个是硬性要求

31:50.710 --> 31:56.870
硬性要求 就是你必须要出手的 不准他就要包拖了 承训要包拖了 硬性要求是什么呢 变量名

31:57.090 --> 31:59.130
只能有

32:00.650 --> 32:05.050
数字 字母 下滑线 下滑线是什么呢 就这个

32:06.130 --> 32:09.530
还有什么呢 还有那个多乐符号 就是美元符号组成

32:11.050 --> 32:15.010
只能有这么一些东西组成 你说变量名可以写什么呢 写abc

32:16.290 --> 32:18.770
然后呢 加多乐 加下滑线 加数字都没问题

32:20.010 --> 32:25.890
都没问题的啊 那么当然在后边的变量名呢 你要跟着变了啊 要全部跟着变了 因为再用就不行了 就不合适了

32:27.330 --> 32:29.890
好 那么这次这种啊 另外呢

32:30.930 --> 32:31.930
不能以数字开头

32:33.090 --> 32:39.050
以数字开头啊 以数字开头是不行的 比方说我这里前面写个一啊 这次不行的 你看是不是包拖了 对吧

32:39.730 --> 32:46.170
他不认识了啊 所以不能以数字开头啊 但可以字母可以下滑线可以多乐符号开头 但是不能以数字开头

32:46.730 --> 32:51.290
那么这是硬性要求 还有什么软性要求 其实软性要求呢 也是硬性要求

32:52.270 --> 32:59.750
就是你不能乱来的啊 你平时在公司里边写给变量取名制的时候 变量是我们经常每一天都要用的啊 变量取名制的时候呢 一定要

33:00.070 --> 33:03.590
遵循一个命名规范 什么规范呢 就是要说到望文之意

33:05.700 --> 33:11.020
就是你这个变量要干嘛的 就是你平时你家里面有个箱子 你们保存的是啥 是垃圾

33:11.580 --> 33:20.100
还是说你平时的学习用品啊 还是说保存了什么玩意 是吧 这个标签是不是一定要能够看到这个标签就知道这个箱子里面保存是啥

33:20.760 --> 33:25.600
这样子我们越入代码也好 我们用自己写代码也好 不容易出错

33:26.040 --> 33:30.600
那么我们比方说这里我们保存的是什么 保存的是凳格 对吧 我们把前面的代码注释掉

33:34.070 --> 33:39.230
把前面的代码注释掉 比方说这句话 我们直接定一个变量来保存一个凳格 凳格的所有信息

33:39.670 --> 33:43.870
定一个变量 那么这里的名字呢 我们怎么来取呢 取这个名字 我们就可以取

33:44.390 --> 33:52.030
凳格 这是不是做到望文 望文之一了 对不对啊 或者说我们用英文啊 它姓凳 到了哥哥叫什么

33:52.090 --> 34:00.370
Brother 对不对 登Brother 就能做到望文之一了 你不用看这里面是啥

34:00.930 --> 34:05.290
我可以把则列起来啊 你不用看这里面是啥 一看这个名字就知道它凳格是凳格的信息

34:06.410 --> 34:10.050
就是这个意思啊 这里是我要做到望文之一啊 第二个呢

34:11.170 --> 34:14.330
是要能够做一个命名规范叫做小陀封命名法

34:14.830 --> 34:22.390
命名法 什么叫小陀封命名法呢 就是第一个 如果说有多个单 就第一个单词的手字母小写

34:23.270 --> 34:27.830
第一个单词手字母小写 后续单词

34:28.790 --> 34:37.030
手字母大写 除了是变量名字啊 那看变量名字第一个单词是不是第小写 后面的每一个单词手字母都大写

34:38.010 --> 34:48.130
你看 是吧 这做到小陀封命名法 包括这个变量名也好 属性名也好 都是这样子啊 副罗那边是一个完整的单词不用了啊 比方说Ease Mail是不是

34:48.850 --> 34:51.850
男性 对吧 你看Amen是不是大写的 对吧

34:52.890 --> 34:54.730
啊 这就是小陀封命名法

34:55.490 --> 35:00.930
好吧 那么这是 这里我们感一下啊 当然这个效果是完全一样的啊 这效果是完全一样的

35:01.530 --> 35:02.930
好 这是变量这一块的知识

35:03.710 --> 35:07.230
其实很简单 就是一个箱子给它贴个标签往里边装东西 随便装啥都可以

35:07.910 --> 35:08.510
好 这是变量

35:10.070 --> 35:15.190
这是如何来保存数据 对吧 好 现在我们学习到如何来保存数据 我们下一个点

35:17.790 --> 35:21.390
就是数据如何来运算 就是数据

35:22.670 --> 35:26.790
之间如何运算 那么它的运算方式有很多

35:27.670 --> 35:32.630
有很多 我们这里呢 就说几个简单 那我们用得上的 一个就是算数运算

35:33.490 --> 35:40.410
算数运算是什么 加减乘除 就是加减乘除 加减

35:42.410 --> 35:49.050
乘是一个新号 除是一个写杠 加减乘除就是算数运算 那怎么来加减乘除呢 我们来看一下吧

35:50.570 --> 35:54.730
比方说我们这里呢 有一个3 除1 2 我们把这个东西输出

35:56.490 --> 35:59.490
输出 输出什么呢 输出的不是一个数字了 是一个

36:00.110 --> 36:06.630
3 除1 2的运算结果 对吧 这是一个处法 3 除1 2的运算结果输出 我们来看一下 所以1.5

36:07.190 --> 36:10.950
对吧 就特别简单啊 这就是算数运算 比方说3 加2

36:12.230 --> 36:17.550
3 加2 5 对吧 3 减2 这就不说了啊 非常简单 3 乘1 2

36:18.430 --> 36:22.830
等于多少了 等于6 对不对 我放大一点啊 说等于6 特别简单

36:23.490 --> 36:31.370
那么这里呢 我们要说一点就是 这里呢 这个东西叫做运算符 就通过这个符号来进行运算

36:32.010 --> 36:37.970
运算完了过 是不是有一个结果 这里呢 我有一个重要的概念啊 大家一定要理解 叫做表达式的概念

36:38.810 --> 36:39.370
表达式

36:41.010 --> 36:46.450
表达式就是运算的结果 就是运算的结果

36:47.350 --> 36:50.510
表达式呢 它有一个东西叫做返回值

36:51.670 --> 36:57.790
返回 我们把运算的结果呢 也叫做返回值啊 运算的结果叫做返回值

36:58.590 --> 37:01.590
同时呢 这个返回值呢 也是数据

37:02.630 --> 37:07.830
也是数据 可以用到任何需要数据的地方

37:09.070 --> 37:12.950
这是什么意思 回来讲一下啊 这是什么意思 比方说

37:13.930 --> 37:19.130
我这里有个电量 电量里边呢 记录了一个 我们这可能不能这样子写

37:19.850 --> 37:21.530
三成一二 可不可以这样子写

37:22.650 --> 37:24.530
当然可以 为什么不可以 为什么不行呢

37:25.210 --> 37:30.530
这个东西叫啥 这个东西叫表达式 是一个运算 对吧 那么它把运算的结果6

37:31.490 --> 37:34.290
保存到了这个箱子 n 里边 所以说l 里边

37:34.970 --> 37:37.090
l 里边保存的不是三成一二 是六

37:37.770 --> 37:40.330
l 里边保存的是什么 保存的是六 看来

37:41.230 --> 37:46.710
它是把运算结果 我们把它叫做返回值啊 这个表达式的返回结果 保存到

37:47.830 --> 37:49.430
变量l 里边 大概出示啊

37:50.470 --> 37:58.030
把表达式的返回结果 保存到 变量l 中 那么我们再来看一个例子

37:58.870 --> 38:03.510
比方说我们现在有个变量l 随便给它个 给它一个三

38:04.230 --> 38:08.630
然后呢 我们再写一个变量 我刚才忘了讲这个东西了 我们再说一下

38:09.090 --> 38:11.570
把a 复制 把这个东西 这个东西怎么来理解

38:12.370 --> 38:16.490
不是说a 等于b 是什么意思呢 把a 里边的东西取出来

38:17.130 --> 38:21.130
然后放到b 里边 那么b 里边是不是也是三了 对吧 输出

38:22.370 --> 38:23.970
a 再来输出

38:25.090 --> 38:26.530
b 你看

38:27.810 --> 38:35.130
把三放到a 里边 然后呢 把a 多东西取出来 放到b 里边 还有啊 相当于是复制粘贴 把a 多东西复制粘贴到b 里边

38:35.650 --> 38:38.170
好 那么b 里边是不是也有一个三 两个都是三 看到没

38:38.730 --> 38:43.490
对不对 而且呢 你改变a 跟b 没有关系 比方说我们这里 去改了一下a 等于5

38:43.930 --> 38:47.290
跟b有关系吗 跟b 没有关系 你看a 里边是5 b 里边是三

38:48.450 --> 38:51.730
什么意思 对吧 就好像说我们来看看它的过程吧

38:53.910 --> 38:57.230
啊 这里呢 a 里边保存了一个三 对不对 第一句话

38:57.710 --> 39:03.710
第二句话呢 是有个变量b b 里边保存什么的 把a 多东西取出来 放到b 里边 b 里边是不是也是三

39:04.190 --> 39:09.310
第三句话是把5 放到a 里边a 里边是变成5 然后输出a和b 是不是输出5和3

39:10.230 --> 39:15.830
对不对 这是关于这个变量啊 然后呢我们再来看一个例子啊 多来理解一下 a 等于3

39:16.390 --> 39:21.070
然后呢 我们这样子写能不能看得懂 a 乘以3 加上10

39:23.070 --> 39:23.630
能看懂吗

39:26.790 --> 39:28.510
输出a 这又是啥意思呢

39:29.390 --> 39:37.390
这个就很奇怪了 怎么可能等于这个呢 你不要把它看成等号啊 它是复制符号 来我们来捋一捋啊 首先a 里面保存了一个三

39:38.250 --> 39:43.250
然后第二句话什么意思呢 把a 的东西取出来 取出来是什么 三

39:44.010 --> 39:50.050
然后来来进行运算 对吧 运算怎么来运算 先运算乘法吧 对吧 这个是个这个是个

39:51.250 --> 39:56.450
多的一个连着的数据运算啊 所以说一个优先级先运算乘除再运算加减

39:57.010 --> 40:03.690
运算什么呢 运算a 乘以3 是不是等于 现在我们来运算啊 把a 的值取出来 乘以3 加上10

40:06.170 --> 40:12.050
把a的值取出来是多少 是不是3 三乘以3 都好 9 加上10 等于多少 19 是不是把运算结果出来了

40:12.490 --> 40:17.970
这个运算结果叫做表达式的返回结果 返回值

40:18.530 --> 40:24.530
那么表示把这个表达式的返回值又重新复制给a 是不是 a 里面就变成了19了

40:25.610 --> 40:27.610
对吧 然后再输出a 就19

40:28.490 --> 40:30.610
看没 要这样去理解啊

40:31.550 --> 40:32.050
嗯

40:35.810 --> 40:41.930
好 这是关于这个运算啊 这是简单的几个算数运算 然后了算数运算里边还有一个 叫佳佳

40:42.930 --> 40:47.730
啊 佳佳 这个是什么意思呢 这个东西表示变量自升增加1

40:48.690 --> 40:49.610
变量自升

40:50.730 --> 40:53.770
增加1 什么意思 我们来看一下个例子

40:54.690 --> 41:02.050
比方说a 等于3 然后呢 我这里写了一个a 加加一个分号结束了啊 什么意思呢 变量自升

41:03.210 --> 41:04.810
增加1 输出a

41:06.730 --> 41:08.410
啊 输出a 咱们来看一下啊 到这边

41:10.410 --> 41:15.570
空置台 这变成4了 怎么回事 我们又来理一理啊 首先变量a里边保存了一个3

41:16.130 --> 41:21.610
然后呢 他第二句话 运行到这句话的时候 怎么样呢 他自升增加1 他原来是3 现在变成了4

41:22.370 --> 41:23.570
然后再输出a 是不是就是4

41:24.370 --> 41:29.970
这a 加加啊 特别特别简单啊 这是咱们这几个算数运算啊 然后再说一个

41:30.950 --> 41:33.750
比较运算啊 比较运算

41:34.950 --> 41:37.270
比较运算 我们说什么呢 说两个等号

41:37.990 --> 41:38.990
这个表示什么意思呢

41:39.750 --> 41:46.470
不是一个等号了啊 是两个等号 一个等号叫做复制 我们讲讲过了啊 两个等号表示什么意思呢 两个等号表示的是

41:47.310 --> 41:50.230
判断左右两边

41:51.830 --> 41:55.830
是否相等 就表示这么一个意思啊 判断左右两边是否相等

41:58.120 --> 42:01.200
比方说 咱们有一个变量 a 等于一个

42:02.720 --> 42:04.320
这不算吧 abc

42:06.400 --> 42:09.760
然后呢 我们现在输出什么呢 输出的是a 等于

42:11.680 --> 42:12.080
123

42:13.680 --> 42:18.160
什么意思呢 这个东西仍然是一个表达式啊 仍然是一个表达式 还有算的

42:18.600 --> 42:22.640
他怎么样的 什么意思 他把这个a的东西取出来 取出来是什么 abc

42:23.240 --> 42:26.640
好 那么可以判断一下这个abc 跟这个123 是不是相等

42:27.200 --> 42:33.760
他就不是复制的啊 复制是什么意思 把123放到臂里边 不是这个意思啊现在 他是两个等号 他判断的是不是相等

42:34.280 --> 42:36.040
判断的结果是一个布尔

42:38.360 --> 42:41.360
判断的结果是一个布尔

42:42.720 --> 42:46.440
那么现在呢 我们可以得到的结果呢 就是得到什么呢 得到的是一个force

42:47.080 --> 42:48.080
一看 是不相等

42:48.340 --> 42:49.880
abc当然不等于123

42:50.600 --> 42:52.440
那我们这如果说这里写个123呢

42:53.420 --> 42:59.980
那么现在得到的结果就是q 对吧 他是用来做判断的啊 就是看两个东西是不是一样 他得到的结果是一个布尔

43:00.540 --> 43:01.060
那样的意思吧

43:02.100 --> 43:06.180
好 这是这一块啊 那么这是我们这里呢 学到一些基本的运算

43:07.340 --> 43:07.860
复制一下

43:10.160 --> 43:18.280
这是数据之间是如何来运算的 非常自然对吧 就是一个 算数运算 算数运算 多一个加加 然后比较运算 有点看两个东西是不是相等

43:19.100 --> 43:27.900
好 那么现在我们能够表达的 表达的语言 就是能够说的话越来越多了 我们可以纯数据了 也可以把数据拿出来 算了来进行运算了 对不对

43:28.300 --> 43:29.700
然后呢 我们还能干嘛呢

43:30.420 --> 43:32.180
我们还能做这么一件事啊 就是

43:33.260 --> 43:36.420
流程控制啊 流程控制

43:37.700 --> 43:43.020
什么意思呢 就是我们目前的程序呢 是从上到下一句一句就全部运行完了 对不对

43:43.740 --> 43:45.540
那有可能呢 我们的程序呢

43:46.580 --> 43:47.380
他可能是

43:48.160 --> 43:50.200
运行到中途的时候有个分支

43:51.480 --> 43:54.800
咱们有个经典的笑话吧 不是

43:55.840 --> 43:57.120
说那个

43:58.120 --> 43:59.400
一个程序儿

43:59.660 --> 44:00.680
他找了一个女朋友

44:01.200 --> 44:03.000
然后呢 女朋友呢 让她去

44:03.520 --> 44:05.560
买一个西瓜 对吧

44:06.320 --> 44:08.120
如果说

44:08.880 --> 44:09.640
叫啥呀

44:11.200 --> 44:12.720
买

44:12.980 --> 44:14.260
买一斤

44:15.020 --> 44:16.320
买一个西瓜

44:16.780 --> 44:19.860
然后呢 碰到一个卖包子的 然后买两个

44:21.660 --> 44:24.460
结果呢 这个程序儿 他就拿了两个西瓜回来了

44:25.220 --> 44:28.300
然后问他为什么买了两个西瓜的包子呢

44:29.060 --> 44:30.620
他说因为我碰到了买包子的

44:31.380 --> 44:32.140
这个意思啊

44:32.400 --> 44:34.460
他碰到了买包子 他认为是买两个西瓜

44:34.700 --> 44:35.980
就说我们的程序呢

44:36.740 --> 44:43.660
他的运行呢 他有可能会出现分支的 就是如果说怎么样 那就怎么样怎么样啊 他可能会出现分支的

44:43.880 --> 44:47.660
比方说呢 我们举举这么一个例子啊 咱们呢 有一个变量A

44:47.920 --> 44:49.760
给他存了一个65

44:50.520 --> 44:57.680
那么如果说 我现在假设啊 我现在假设我忘了 忘了A里面存的是啥了 我想把A里面的东西拿出来看一看

44:58.720 --> 44:59.480
看一看

44:59.740 --> 45:02.300
如果说这是一个分数啊 我们用个score

45:02.560 --> 45:03.840
这是考试分数

45:04.100 --> 45:04.860
score中

45:05.620 --> 45:06.400
保存了

45:06.920 --> 45:07.920
考试分数

45:08.440 --> 45:09.720
你存到箱子里边了

45:09.980 --> 45:13.560
过了很多年 很多年 很多年 你都忘了箱子里面存的是啥了

45:13.800 --> 45:15.920
你想把这个箱子里面的东西拿出来看一看

45:16.940 --> 45:17.960
如果说

45:18.220 --> 45:19.760
他小于60

45:20.520 --> 45:21.800
我们就表示不及格

45:22.580 --> 45:25.380
如果说大于等于60 就表示几个

45:25.640 --> 45:27.440
那这个东西怎么来写呢 这个代码

45:27.700 --> 45:30.520
也就是说我们这里到底要输出几个还是不几个呢

45:31.280 --> 45:37.920
几个还是不几个呢 就不知道了对吧 那么我们要根据什么情况 根据他的分数是不是小于等于60

45:37.980 --> 45:40.940
小于60还是大于等于60来来进行判定

45:41.200 --> 45:44.060
因此我们有一种情况就是在程序的运行过程中

45:44.320 --> 45:48.240
要根据不同的情况来做不同的事 这就需要流程控制了啊

45:48.500 --> 45:51.960
流程控制其中一种控制方式就是使用分支判断

45:52.720 --> 45:53.740
使用判断

45:54.500 --> 45:56.560
怎么来判断呢 非常简单就是衣服

45:57.080 --> 45:58.100
如果

45:58.860 --> 45:59.840
什么什么

46:00.920 --> 46:02.960
那么就怎么怎么样

46:04.240 --> 46:06.040
然后L

46:06.540 --> 46:07.820
L是可以不写

46:08.280 --> 46:10.420
要是否则的话就怎么样

46:10.680 --> 46:14.980
怎么来读啊 表示如果什么什么就

46:15.240 --> 46:19.600
什么什么什么啊 否则就什么什么什么

46:20.360 --> 46:21.280
好 咱们来写一下

46:22.600 --> 46:24.640
那么现在我们判断如果

46:25.280 --> 46:27.840
如果什么呢 如果说我们的分数

46:28.600 --> 46:30.400
小于65

46:30.660 --> 46:32.400
这个小于60

46:33.980 --> 46:35.000
小于60

46:35.780 --> 46:37.680
这个小于符号是用来比较了啊

46:37.920 --> 46:38.940
比较之后

46:39.460 --> 46:41.760
我们刚才还少说了几个啊 就是

46:42.020 --> 46:46.380
运算的时候呢 还有一个比较运算 除了等号之外呢 还有什么小于

46:47.400 --> 46:48.680
还有什么大于

46:49.180 --> 46:50.460
还有小于等于

46:50.720 --> 46:54.040
还有大于等于 这些都是比较啊 比较的结果都是一个布尔

46:54.300 --> 46:57.120
比较运算的结果啊 都是一个布尔 我们写到这吧

46:58.400 --> 46:59.420
判断的结果都是一个布尔

46:59.940 --> 47:01.220
就是是还不是

47:01.480 --> 47:02.500
那么如果说

47:03.000 --> 47:04.800
小于60是不是

47:05.060 --> 47:07.360
这个判断 如果说这个判断为真

47:07.560 --> 47:09.880
那么怎么样呢 我们就输出几个

47:11.890 --> 47:14.970
否则的话 else 就输出

47:15.230 --> 47:15.990
布几个

47:17.010 --> 47:18.290
就输出布几个

47:18.550 --> 47:19.830
那么这就是一个判断分支

47:20.090 --> 47:22.650
那么这个地方是不是只能运行一条语句

47:22.910 --> 47:23.930
好 咱们来看一下

47:24.450 --> 47:25.970
是不是输出了布几

47:27.510 --> 47:29.570
写错了是吧 这个是布几个

47:31.090 --> 47:31.850
这个是几个

47:33.650 --> 47:34.670
是不是输出了几个

47:34.930 --> 47:35.450
对不对

47:35.710 --> 47:38.010
那么我们调整这个分数 比方我们调整

47:38.210 --> 47:39.250
调整30

47:40.010 --> 47:41.290
他就输出了布几个

47:43.590 --> 47:46.910
这就是一个分支 但是分支运行完了过后的后续代码

47:47.170 --> 47:48.910
后续代码就一次运行了

47:49.170 --> 47:49.990
后续的代码

47:50.250 --> 47:54.610
一定要一次运行了 不是说后续不运行的 他仍然要运行

47:54.870 --> 47:56.150
后续代码是不是一次要运行

47:56.910 --> 47:58.190
如果说这里是70

47:59.470 --> 48:02.530
70过后他输出什么 输出几个 他仍然要运行后续代码

48:02.790 --> 48:03.570
你看后续代码

48:03.830 --> 48:05.610
他只是在这里产生了分支

48:06.330 --> 48:09.150
要么运行他 要么运行他 那么后边都是要运行的

48:10.170 --> 48:14.690
那么当然这个 else 也可以不写 比方说不写的话 那么他如果说不几个

48:14.950 --> 48:15.550
他就输出不几个

48:15.810 --> 48:19.530
如果说几个了 我就啥都不做 啥都没做 就继续输出后续代码

48:19.790 --> 48:23.490
你看现在是不是几个的情况 几个的情况 这个是判断为假

48:23.750 --> 48:24.250
对不对

48:24.510 --> 48:25.790
这个布尔判断为假

48:26.550 --> 48:30.390
判断为假的话 那么是不是进不了这个判断 就进不了这个义父

48:30.910 --> 48:31.670
进不去

48:32.190 --> 48:34.750
好 那么就直接往后边运行了 就输出后续代码

48:35.470 --> 48:37.010
好 如果说他刺三十

48:38.030 --> 48:40.590
你看是不是就输出了不几个在输出后续代码

48:40.850 --> 48:44.170
三十能够进这个判断 那么输出这句话 然后再运行后面的语句

48:44.930 --> 48:46.730
这就是一个分支判断

48:54.690 --> 48:58.530
这里边如果有一些领基础的学员 就是完全没有接触过这些学员

48:58.790 --> 49:01.970
不用去关注那个就是评论区 评论区他们在这里制

49:02.230 --> 49:05.210
你不用去管他们 因为这个东西聊的是确实很基础

49:05.450 --> 49:06.730
但是对于领基础学员的话

49:06.950 --> 49:09.510
但是还是要去吸收的 你就专心听我讲就行了

49:11.030 --> 49:13.950
这里呢 我们找到这个 把这个复制一下

49:18.430 --> 49:20.750
好 这里流程控制 我们就到这了

49:23.030 --> 49:26.110
那么目前呢 我们能做啥 在总结下 能保存数据了

49:26.370 --> 49:31.550
能把数据取出来了 能干嘛呢 能运算了 对吧 还要能控制这个程序的

49:32.270 --> 49:37.790
流向了 到底运行哪一句话 运行什么东西啊 来进行控制的 叫流程控制

49:38.330 --> 49:44.330
好 接下来我们讲这个 函数 还有这个东西 叫做数组

49:48.570 --> 49:52.850
这一块是个大知识 今天我们可能把一些想要讲的东西还不一定讲得完

49:53.050 --> 49:56.650
我们把这一块尽量讲完吧 数组还有两个东西 一个是数组 一个函数

49:56.970 --> 50:00.010
这两个一学习完 我们至少语言部分

50:01.490 --> 50:05.810
就语言本身我们就学的差不多了 至少整体的把它过了一点

50:06.270 --> 50:08.270
整体都过了一下了 也大概知道是怎么回事了

50:08.910 --> 50:11.830
当然跟流难题相关的 我们今天可能还没有时间讲

50:12.350 --> 50:15.150
如果讲不完的话明天再讲 没关系

50:16.270 --> 50:18.670
好 一个是数组 数组是什么意思呢

50:19.430 --> 50:27.390
数组是可以保存多个含义差不多的数据

50:29.030 --> 50:35.350
它也是一种数据内形 他也是一种数据内形

50:36.270 --> 50:39.430
我们数据内形不是有数字 字符串还有什么的 布尔还有什么的

50:39.430 --> 50:41.830
还有对象 对不对 他其实也是一种数据内形

50:41.830 --> 50:44.830
其他本质就是对象 我们这里的只是不展开了

50:45.590 --> 50:49.790
它可以保存多个含义差不多的数据 比方说我们一个班上有很多的学生

50:50.230 --> 50:51.830
是把一些学生保存到一个数组里面

50:53.510 --> 50:57.430
或者是我们班上有很多的学生成绩 考试完了过后不是有很多成绩吗

50:57.750 --> 51:00.790
这个成绩都是一样的数据 对吧 一意思都是差不多的

51:01.230 --> 51:05.190
你考多少分 大考你考多少分 都是成绩 所以说我们可以把保存到数组里面

51:05.490 --> 51:06.650
它可以保存多个数据

51:08.250 --> 51:12.330
那么这个数组里面 它怎么来保存的呢 它怎么来书写的呢

51:13.290 --> 51:17.010
看着 数组的书写方式 我们就在代码里面 代码里面来掩饰

51:18.210 --> 51:22.010
首先还是一个保存到变量里面 数组我们可以要把它保存到变量里面

51:22.250 --> 51:24.210
比方说保存到一个叫做ARR

51:25.330 --> 51:30.610
那后边写上了两个综扩号 你看对象是大扩号对吧 那么数组是两个综扩号

51:30.830 --> 51:37.710
来表示数组 那数组里面每一项是什么东西 我们就可以用 要保存一些学生成绩嘛

51:38.510 --> 51:42.270
60 55 100 110

51:43.230 --> 51:46.030
理中吧 理中也有110 对不对 其实

51:48.430 --> 51:54.670
80 格式化一下 格式化的代理人 过关键件是一样的啊 二次加效率加F

51:55.390 --> 51:58.550
那么这里呢 是不是有个数组 把它保存到哪呢 保存到变量里面

51:59.530 --> 52:00.530
好 这句话怎么意思

52:02.530 --> 52:07.570
三 我们换一个吧 换一个啊 换一个我好给大家打注释

52:09.170 --> 52:09.570
好 这是

52:10.770 --> 52:14.050
将一个数组 这是一个数组

52:15.170 --> 52:19.890
这个东西是一个数组 保存到变量AR终

52:20.770 --> 52:23.650
保存到这里边 这个变量名字随便写啊

52:24.630 --> 52:29.670
然后呢 数组中保存了多个数据

52:30.510 --> 52:35.630
分别是3 7 6 4

52:36.910 --> 52:39.390
能理解吗 这个很好理解对吧 他可以保存多个数据

52:40.750 --> 52:46.830
那么 保存我们可以认为 数组的长度是4

52:47.510 --> 52:47.950
什么意思

52:48.950 --> 52:51.030
就好必说是火车一样

52:51.770 --> 52:53.770
数组就好必像一个火车 你可以这样理解

52:54.410 --> 52:55.530
火车是不是有很多车厢

52:56.810 --> 52:58.810
每一节车厢里边保存一个东西

52:59.530 --> 53:04.010
第一节车厢保存3 第二节车厢保存7 第三节车厢保存6 第四节车厢保存4

53:04.810 --> 53:05.530
是不是四节车厢

53:06.770 --> 53:08.130
表达的长度是4

53:09.370 --> 53:09.970
比较长度

53:11.850 --> 53:15.170
那么还有一个 还有一个含义就是 数组的下标

53:16.890 --> 53:18.490
下标是0

53:19.450 --> 53:19.950
1

53:20.330 --> 53:20.830
2

53:21.090 --> 53:22.210
3 这是啥意思

53:22.730 --> 53:24.450
这表示的是数组

53:25.290 --> 53:26.570
火车车厢的编号

53:26.810 --> 53:31.930
你们去赶火车 赶动车也好 赶高铁也好 是不是每一个节车厢都有编号

53:32.190 --> 53:35.370
第几节车厢 第几节车厢 那么数组也是这样子

53:35.610 --> 53:37.570
只不过它的编号是从0开始排的

53:38.330 --> 53:40.130
这是编号0的车厢

53:40.390 --> 53:47.550
保存的是3 这是编号1的车厢保存的是7 编号2的车厢保存的是6 编号3的车厢保存的是4

53:48.010 --> 53:51.610
下标是0 1 2 3 它就是一次编号的

53:52.370 --> 53:54.930
好 那么这就是一个数组

53:55.190 --> 53:59.290
好 数组里边我们有很多的东西可以用 比方说我们可以通过

54:00.570 --> 54:05.170
通过数组 数组的变量名Diarnance

54:05.930 --> 54:06.690
那干嘛呢

54:07.210 --> 54:11.050
取到数组当前的长度

54:11.570 --> 54:12.590
我们输出一下

54:12.850 --> 54:17.190
你看是不是很像一个对象 对象我们是不是也是这样玩的

54:18.170 --> 54:20.210
这是个对象点数姓名 对吧

54:20.210 --> 54:22.130
它其实就是个对象 本质上就是个对象

54:22.130 --> 54:26.450
甚至连这个Consult点了个 他也是个对象

54:27.090 --> 54:29.730
输出什么呢 输出数值的长度 咱们来看一下

54:31.970 --> 54:33.610
我再拿写错了吗

54:34.570 --> 54:35.170
刷新

54:36.410 --> 54:37.810
我再写错了 Nance

54:39.970 --> 54:42.450
看一下 是不是4 对吧 长度为4

54:43.570 --> 54:45.890
不是最后一项为4 是长度为4

54:46.070 --> 54:47.670
最后一项为11

54:49.560 --> 54:51.360
长度为4

54:51.600 --> 54:55.960
那么我们如果说 如果说能够要取出数组的某一箱的

54:55.960 --> 54:59.040
我们有保存了多个数据 对吧 我要取出某一个数据

54:59.280 --> 55:00.840
那么我们可以用这种模式

55:01.600 --> 55:04.680
中扩号里边写上一个下标

55:06.200 --> 55:07.740
比方说写上一个3

55:10.030 --> 55:10.790
什么意思

55:11.310 --> 55:12.070
这个是

55:12.830 --> 55:14.370
通过

55:15.150 --> 55:16.430
AR3

55:16.650 --> 55:19.970
取出数组中

55:22.010 --> 55:23.810
取出数组中

55:24.570 --> 55:26.610
下标为3的

55:27.130 --> 55:27.890
数据

55:28.170 --> 55:32.250
你看我们之前保存了4个数字 对吧 编号分别是0

55:32.510 --> 55:33.030
1

55:33.290 --> 55:34.050
2

55:34.310 --> 55:34.810
3

55:35.330 --> 55:38.130
对不对 所以取出了11 就把11取出来了

55:38.650 --> 55:40.690
这是一个表达式 他认识一个表达式

55:41.210 --> 55:43.010
这个表达式返回的结果是什么

55:43.270 --> 55:44.810
返回的结果就是11

55:45.270 --> 55:46.030
你要的意思吧

55:46.290 --> 55:47.310
你看 是不是11

55:47.570 --> 55:48.590
就输出了11

55:49.110 --> 55:50.650
好 那么我们再来看

55:51.170 --> 55:53.210
AR我们主过说这样子写

55:53.470 --> 55:54.750
AR2

55:55.010 --> 55:56.030
等于

55:57.830 --> 55:58.590
123

55:59.350 --> 56:00.110
这是什么意思呢

56:00.630 --> 56:01.390
他就是

56:02.950 --> 56:04.350
把123

56:04.610 --> 56:07.030
负值给数组的

56:07.790 --> 56:10.630
数组下标为2的

56:10.870 --> 56:11.630
这一项

56:12.610 --> 56:15.890
把123负值给数组下标为2的这一项

56:16.450 --> 56:17.410
下标为2是哪一项

56:17.670 --> 56:20.030
0,1,2 是不是这一项

56:20.290 --> 56:23.350
那么就把这一项变成了123

56:23.610 --> 56:25.250
就把这一项变成了123

56:25.490 --> 56:26.950
然后我们再来输出一下数组

56:27.210 --> 56:28.990
输出一下整个数组

56:30.530 --> 56:34.110
你看 现在是不是3,7,123,11了

56:34.370 --> 56:34.870
对吧

56:35.650 --> 56:37.430
这一项变成了123了

56:37.690 --> 56:39.750
对不对 就改变了数组的某一项

56:40.210 --> 56:44.050
是不是很好理解 这个数组同时对多个数据可以进行控制

56:45.090 --> 56:45.850
然后再来

56:47.370 --> 56:51.490
数组里边还提供了一些东西 我们把它叫做方法

56:51.990 --> 56:52.770
数组中

56:53.770 --> 57:00.690
提供了一些方法 那么这些方法是什么玩意呢 我们之后呢 我们一会会详细的讲解啊 我们现在先

57:00.950 --> 57:01.450
看一下

57:02.490 --> 57:03.770
数组提供了一些方法

57:04.010 --> 57:07.610
那么这个方法每个方法有不同的作用 比方说我们这里

57:07.870 --> 57:09.410
AR2

57:10.490 --> 57:17.890
通过这个方法 两个小货号 里边可以写上 比方说写上一个数字 写上任何东西啊 比方说写上一个ABC吗

57:19.170 --> 57:19.690
ABC

57:20.210 --> 57:21.370
那么这个是什么意思呢

57:21.990 --> 57:22.490
向

57:24.290 --> 57:26.090
数组的末尾

57:27.370 --> 57:28.290
末尾

57:29.050 --> 57:30.050
添加

57:30.450 --> 57:31.210
一项

57:32.490 --> 57:33.010
ABC

57:33.250 --> 57:35.450
向数组的末尾加一项ABC

57:35.970 --> 57:38.130
然后加了之后 我们再来输出这个数组

57:39.850 --> 57:40.770
再来输出这个数组

57:41.030 --> 57:41.530
看一下

57:42.050 --> 57:46.410
是不是输出到这里的时候就3712311 后面是不是多了一个ABC

57:46.930 --> 57:48.970
是不是多了一个ABC 多了一项了

57:49.730 --> 57:56.390
那么多了一项过后 你看这个数组里边 我们把展开啊 你可以看到很清楚 他们一个编号 编号为043 编号为147

57:56.650 --> 57:58.170
编号为20 你看 自己看

57:58.690 --> 58:00.490
然后它的长度是不是变成5了

58:00.730 --> 58:02.790
之前是4 现在变成5了

58:03.050 --> 58:04.850
对不对 这边往下 它里边加了一项

58:05.350 --> 58:06.370
这就是数组

58:07.410 --> 58:08.930
好 我们这里保全一下

58:13.310 --> 58:19.860
有点快 是吧

58:22.420 --> 58:25.500
我们今天就把那个语言部分就讲完 语言部分讲完

58:25.760 --> 58:28.060
然后跟浏览器的操作 我们留到明天讲

58:30.480 --> 58:34.060
毕竟是压缩 要理解这个实际的情况

58:34.320 --> 58:41.480
要理解这个现实 一个月的课程 压缩到一天 这个东西你只能这样子讲

58:42.000 --> 58:43.780
我想不到更好的讲解方式了

58:44.820 --> 58:47.380
好 咱们来看一个小的例子

58:47.740 --> 58:51.500
就是数组里边的 它不仅仅是可以存数字 它可以存任何东西的

58:52.280 --> 58:55.860
它可以存任何东西的 我们来一个稍微的复杂一点的 大家要磨磨脑袋的

58:56.120 --> 58:58.160
比方说我们来一个

58:59.140 --> 58:59.960
U字是吧

59:00.220 --> 59:01.500
就说的叫做

59:02.000 --> 59:02.780
teachers

59:03.540 --> 59:04.300
teachers

59:04.560 --> 59:05.340
啥意思呢

59:05.600 --> 59:10.460
就是有很多的老师 不是一个老师 有很多的老师 那肯定是个数组

59:10.720 --> 59:12.260
是肯定是个数组毫无疑问

59:13.020 --> 59:15.060
那么我想问大家一个问题

59:15.580 --> 59:17.380
每一个老师是个啥

59:18.700 --> 59:19.980
是个数字吗

59:20.740 --> 59:22.020
是个制服串吗

59:22.540 --> 59:23.560
是个布尔吗

59:24.580 --> 59:27.660
是个对象 对不对

59:29.700 --> 59:34.820
每一个老师是不是一个对象 我们刚才是一串数字 现在每一个老师是一个对象

59:34.940 --> 59:37.140
那么对象该怎么写 我们刚才讲过了

59:37.500 --> 59:38.420
对象该怎么写

59:39.180 --> 59:44.300
我们这里可以换个行 换个行 反正换不换行都无所谓 换个行看得更清楚一点

59:45.080 --> 59:50.800
这是个数组 有很多老师 每一个老师怎么来写 每个老师是不是一个一个大括号 表示一个对象

59:51.360 --> 59:52.400
这是第一个老师

59:53.120 --> 59:59.880
这是第二个老师 这是第三个老师 看到没 是不是可以用这样的写法 每个老师是一个对象

01:00:00.360 --> 01:00:02.680
那么第一个老师里边是不是有很多的属性

01:00:03.120 --> 01:00:04.840
对吧 我们可以写成这种很复杂的结构

01:00:05.960 --> 01:00:08.840
每一个老师里边有name数 比如说name

01:00:09.440 --> 01:00:09.960
成哥

01:00:11.840 --> 01:00:12.680
然后年龄

01:00:13.660 --> 01:00:14.420
是吧

01:00:15.620 --> 01:00:20.300
然后是没有 性别 委屈 难性

01:00:21.900 --> 01:00:27.300
那么这里是不是第一个老师的信息放在哪里 把看这个整体啊 是不是放到数组的第一个位置了

01:00:27.820 --> 01:00:33.820
对不对 好 第二个数组的第二个位置就是火车的第二节车箱 第二节车箱里边放咋了

01:00:34.060 --> 01:00:38.300
又放又放一个老师 又是个对象 这是什么 这是moleca

01:00:38.520 --> 01:00:42.520
然后年龄16

01:00:43.360 --> 01:00:44.160
意思moleca

01:00:45.920 --> 01:00:46.800
moleca

01:00:47.840 --> 01:00:54.480
对不对 所以又放了一个老师 对吧 你不要看这个代码好像很多 也还云了啊 不是一样的嘛 对吧 这个是个数组

01:00:54.840 --> 01:01:00.520
他是有一个火车嘛 他第一节车箱里边放的不是数字的 他放了一个对象 能不能放对象吗 他啥都可以放

01:01:00.840 --> 01:01:06.440
为什么不能放对象呢 那第二个呢 第二节车箱里边又放了一个对象 对吧 第三节车箱呢

01:01:07.180 --> 01:01:09.660
又放了一个name等于邓哥

01:01:11.340 --> 01:01:13.980
啊 然后年龄65 ismail

01:01:15.860 --> 01:01:23.620
去 好 你是不是放了三个老师了 对吧 这个数组里就放了三个老师 你把折起来看 看得非常非常清楚啊 这个说是一个数组

01:01:24.820 --> 01:01:26.220
一个火车里边 第一车箱里边

01:01:26.980 --> 01:01:33.260
做的邓哥 这个车箱里边做的moleca 第三节车箱里边做着开火车的那个书客 开火车的邓哥

01:01:34.080 --> 01:01:35.060
然后呢 我们把这个

01:01:35.820 --> 01:01:36.840
输出一下teachers

01:01:38.120 --> 01:01:38.640
你看啊

01:01:39.920 --> 01:01:48.360
是不是长度为三的数组 你看 长度是不是三 第一节车箱里边是不是成哥 第二节车箱里边是不是moleca 第三节车箱里边是不是邓哥 对吧

01:01:49.640 --> 01:01:50.160
是不是没问题吧

01:01:53.820 --> 01:01:54.340
好

01:01:54.860 --> 01:01:56.140
然后呢

01:01:56.660 --> 01:02:01.260
我们这里呢 如果说 现在呢我们来看一下啊 该怎么来写这个代码

01:02:01.520 --> 01:02:02.280
如果

01:02:03.040 --> 01:02:04.840
我要取出

01:02:05.060 --> 01:02:05.560
取到

01:02:06.580 --> 01:02:08.380
第三节车箱

01:02:09.140 --> 01:02:12.220
我用大牌画来说啊 第三节车箱

01:02:12.740 --> 01:02:13.240
中

01:02:14.260 --> 01:02:16.320
老师的姓名

01:02:17.340 --> 01:02:18.100
该怎么来取

01:02:18.860 --> 01:02:21.940
啊 学过的同学就不要回答了 学过的同学不要回答

01:02:22.200 --> 01:02:22.980
那个

01:02:24.760 --> 01:02:27.580
就是第一次接触那个同学好好想一想

01:02:30.550 --> 01:02:31.070
来取

01:02:32.350 --> 01:02:33.110
啊 这个

01:02:34.090 --> 01:02:35.890
teachers 这个同学写的

01:02:36.130 --> 01:02:39.210
没问题啊 这样子写肯定是没问题的 我们输出一下

01:02:39.730 --> 01:02:40.730
怎么来取呢

01:02:41.250 --> 01:02:48.670
就是从这个数组里边 我们取出的第几项 你看一下啊 我们刚才取出的数组的第几项是怎么取的 是不是这种方式来取的

01:02:48.930 --> 01:02:50.210
那同样的道理啊

01:02:50.470 --> 01:02:53.550
第三节车箱是不是编号是012 你看一下

01:02:57.030 --> 01:03:00.350
编号是012对吧 这是0 这是1 这是2 是不是

01:03:00.610 --> 01:03:01.650
第三节车箱是2

01:03:03.170 --> 01:03:03.690
对不对

01:03:04.510 --> 01:03:08.390
啊012嘛 第三节车箱是2 然后这个取出来是个什么玩意儿呢

01:03:09.790 --> 01:03:11.830
这个取出来是个什么玩意儿呢 是不是个对象

01:03:12.870 --> 01:03:13.630
是不是个对象

01:03:14.390 --> 01:03:21.310
好 这是一个对象啊 你不要去想太多 这个整体 你看这个我现在的框柱这一部分的整体

01:03:21.570 --> 01:03:28.470
它是一个表达式 这个表达式取出来就是一个对象了 那么对象我要取到这个对象的name属性该怎么办

01:03:28.730 --> 01:03:31.550
大胆的往后写就行了 怎么来取对象的属性

01:03:31.790 --> 01:03:33.590
第二name 就取出来了

01:03:34.410 --> 01:03:42.630
前边是一个对象 你不要去使计音贝这种语法 这个是非常灵活的 你就看这个东西到底是啥 它是啥 它就是一个对象嘛

01:03:43.230 --> 01:03:46.870
你要取这个对象的属性不就是一个点属性名吗 不就取出来了吗

01:03:47.670 --> 01:03:49.470
你看是不是取出灯哥了 对不对

01:03:50.590 --> 01:03:55.550
好 那么这里的学法很灵活的啊 你不要去使计音贝 比方说我们可以不可以这样子来

01:03:56.190 --> 01:03:56.790
啊 灯哥

01:03:57.490 --> 01:03:58.530
灯 brother

01:03:59.290 --> 01:04:01.090
然后teacher是二

01:04:01.850 --> 01:04:06.730
能不能这样子写 也可以啊 你看不要去使计音贝啊 一背就完了 程序是绝对不能背的

01:04:07.490 --> 01:04:08.530
这该怎么来理解

01:04:09.290 --> 01:04:16.970
取出第二节车厢的老师是不是个对象 把这个对象保存到哪儿 保存到这个边量里边

01:04:17.730 --> 01:04:18.490
能力啊

01:04:19.770 --> 01:04:21.830
取出第二节

01:04:22.810 --> 01:04:28.890
第三节 这是第三节车 因为编号是从零开始嘛 第三节车厢中的老师

01:04:30.170 --> 01:04:34.970
把老师对象保存到边量

01:04:36.730 --> 01:04:39.330
灯 brother中

01:04:40.210 --> 01:04:44.530
对吧 保存到这个边量里边 那么我们然后再通过这个边量去取出

01:04:45.570 --> 01:04:48.810
点内 是不是一样的 对吧 是不是一样的

01:04:49.790 --> 01:04:52.670
你看 是不是还是输出了 灯哥 如果说你直接输出这个边量

01:04:53.870 --> 01:04:56.790
直接输出这个边量 你看是不是就是个对象

01:04:58.070 --> 01:05:03.910
看没是不是就是个对象 对吧 他把这个这个对象取出来 保存到他里边 那么他里边就他就不就是个对象嘛

01:05:04.150 --> 01:05:10.830
然后再去取出他的什么 name 对吧 这些非常灵活的一定要注意表达式啊 表达式就是一个一一条

01:05:11.270 --> 01:05:16.950
就是一部分代码 一部分代码他一定会算出一个结果 这个结果是什么 后面就怎么用就行了

01:05:17.090 --> 01:05:22.450
你知道这个东西是个对象 然后取他的属性你就一次取就完事 这就是对输出的

01:05:23.450 --> 01:05:24.450
输出的控制啊

01:05:26.490 --> 01:05:27.610
这是这么一个

01:05:29.530 --> 01:05:29.850
输出

01:05:31.770 --> 01:05:35.730
好 接下来我们最后一个介绍函数

01:05:37.770 --> 01:05:38.370
介绍函数

01:05:40.450 --> 01:05:41.290
函数是什么呢

01:05:43.170 --> 01:05:47.650
函数就是一个功能块啊 一个函数

01:05:48.610 --> 01:05:51.210
就是一个小的功能块

01:05:52.650 --> 01:05:54.090
就是我们的程序里边啊

01:05:55.130 --> 01:06:03.410
今天我们没有办法去举起例子啊 今天我们讲的是注意几处 注意几处的语法 就像你平时你在读那个学英语的时候对吧

01:06:04.050 --> 01:06:08.810
你没有办法先没办法造句 现在老老实实把二十六个英文字母给我认清楚

01:06:09.730 --> 01:06:12.530
然后音标给我认清楚 才知道怎么去读

01:06:13.130 --> 01:06:18.010
然后再把一个单词一个一个背 然后才能去组句子 才能去造句

01:06:18.770 --> 01:06:25.210
所以说你学习也是一样 你现在在学说话 老老实实是一步一步的 他的说话是怎么去说的

01:06:25.730 --> 01:06:29.090
要不要以基础搞清楚我们才能变成连关的句子

01:06:30.210 --> 01:06:31.410
好 比方说我们现在呢

01:06:32.050 --> 01:06:36.090
有很多很多的功能 比方说我们网页上有很多的功能

01:06:36.730 --> 01:06:40.410
如果说你再像以前的样子啊 罗列起来一次往下面写

01:06:41.090 --> 01:06:42.970
一次往下面去写的话 那么

01:06:44.370 --> 01:06:46.890
整个代码呢 会变得非常非常重复

01:06:47.870 --> 01:06:52.430
比方说吧 比方说我们的有可能啊 有这么一个功能

01:06:53.670 --> 01:06:56.950
在控制台中打印一个菜单

01:06:58.070 --> 01:07:01.510
菜单是菜单的内容是什么呢 第一个是菜单内容是登录

01:07:02.790 --> 01:07:06.390
就打就打印就行了啊 第二个是注册

01:07:08.710 --> 01:07:11.190
注册 第三个呢是退出

01:07:12.790 --> 01:07:13.590
打印这么一个菜单

01:07:14.490 --> 01:07:16.250
那么怎么来写 是不是三

01:07:18.290 --> 01:07:20.290
是不是那个这么几句话

01:07:21.410 --> 01:07:29.600
第一个登录 第二个注册 对吧 非常简单对不对 这个是很简单的啊 三退出

01:07:32.830 --> 01:07:35.430
是吧 没问题吧 是不是就打印出来了 这个这个很简单吧

01:07:36.030 --> 01:07:36.910
就打印出这个菜单了

01:07:37.910 --> 01:07:42.950
好 那么现在呢我问你 如果说我一会儿 这种情况经常会发生

01:07:43.390 --> 01:07:46.710
一会儿要来一次 一会儿要来一次 那么是不是写出了很多重复代嘛

01:07:48.790 --> 01:07:51.230
是不是我可能一会儿啊 过了一会儿

01:07:52.190 --> 01:07:58.590
我又要来一次 又过了一会儿 我写的 运行了一些别的代码 我又要来一次是不是写出很多的代码

01:07:58.990 --> 01:08:03.790
重复代码 那如果说我一个代码了 你边写的重复了一百多一百多四

01:08:05.230 --> 01:08:06.030
将来有一天

01:08:07.070 --> 01:08:10.590
你的项目经理 或者是你的产品经理 摩托的小妖精

01:08:11.310 --> 01:08:12.110
然后呢 告诉你

01:08:13.190 --> 01:08:17.070
我现在呢 要加一项菜单 你是不是要崩溃掉了

01:08:18.550 --> 01:08:22.950
崩溃掉了 比方说 要加一个什么呢 把这个东西变成四

01:08:23.470 --> 01:08:25.510
然后呢 还要加一项那个汪金密码

01:08:30.140 --> 01:08:32.140
那你是不是要改很多很多的地方

01:08:32.900 --> 01:08:40.380
对吧 是不是要改很多的地方 那么就造成了 这就是重复代码带来的问题啊 函数呢能够有效的降低重复代码

01:08:41.140 --> 01:08:41.940
使用函数

01:08:42.700 --> 01:08:44.980
可以有效的降低

01:08:45.740 --> 01:08:46.780
重复代码

01:08:47.760 --> 01:08:53.880
就是有些代码在重复 不断的重复 不断的重复 重复代码会带来一个什么问题 不仅是书写上

01:08:54.920 --> 01:08:57.080
重复了很多次 很麻烦 而且呢

01:08:57.600 --> 01:09:02.760
非常容易出错啊 因为你有些东西 你本来写一次不会出错了 多写几日可能就出错了

01:09:03.440 --> 01:09:04.120
而且呢

01:09:04.760 --> 01:09:06.800
特别是带来维护上的困难

01:09:06.960 --> 01:09:09.760
就是一旦你要改的话 你到处都要去改

01:09:10.040 --> 01:09:15.160
这个地方改了 这个地方也得改啊 对不对 所以说他重复代码会带来很多问题

01:09:15.260 --> 01:09:15.860
很多问题

01:09:16.380 --> 01:09:26.660
而函数就是我们解决重复代码的一个非常重要的一种方式啊 函数的学生一开始学习呢 可能会觉得有点不太适应啊 但是学久了

01:09:27.020 --> 01:09:31.380
过后了 你觉得函数太好用了 以后你看到函 看到重复代码有基本上想用函数

01:09:32.020 --> 01:09:35.100
那么函数怎么写呢 函数分为定义

01:09:35.740 --> 01:09:36.300
和调用

01:09:38.620 --> 01:09:39.300
函数的

01:09:40.220 --> 01:09:40.620
定义

01:09:41.600 --> 01:09:47.720
怎么要定义呢 表示的是 表示程序中有了一个功能

01:09:48.840 --> 01:09:49.640
啊 就是多了

01:09:50.680 --> 01:09:53.160
一个功能 但是但是

01:09:54.520 --> 01:09:55.240
这个功能

01:09:56.080 --> 01:10:02.360
不会执行 只是我多了一个功能 这个功能不会执行 什么意思 我们来看一下函数的定义

01:10:03.840 --> 01:10:04.840
我们再就这样子写

01:10:05.800 --> 01:10:08.880
一个关键字方式 方式什么意思 就是函数的意思

01:10:09.540 --> 01:10:13.380
然后给函数取个名字 就跟变量名一样的啊 你该取个名字

01:10:14.900 --> 01:10:18.660
就好比说你家里边有个机器人 他可以帮你干活 少了一人吧

01:10:20.260 --> 01:10:22.940
你们将来少了一人给他取个什么名字 让小白

01:10:23.820 --> 01:10:24.500
来 去找个地

01:10:25.340 --> 01:10:28.660
是不是他帮你干活 对吧 你该取个名字让他去帮你干活

01:10:29.140 --> 01:10:32.940
他不是箱子 不是用来装东西了 他是让你 他是来帮你干活的

01:10:33.460 --> 01:10:34.980
你可以这样理解啊 该取个名字

01:10:35.440 --> 01:10:39.800
比方这个我们是打印菜单 对吧 那么我们该取个名字叫PrintMenu

01:10:40.820 --> 01:10:46.200
Print什么意思打印Menu什么意思菜单 你名字随便取啊 但是尽量做到忘文之意

01:10:46.960 --> 01:10:48.960
然后写上两个小货号

01:10:49.720 --> 01:10:50.800
写上两个大货号

01:10:53.360 --> 01:10:57.200
这就是一个定义 这就是定义的函数 是不是简单 方个型

01:10:57.960 --> 01:11:03.600
然后一个名字啊 两个小货号 一个两个大货号 函数定义 表示我程序里面有个功能了

01:11:03.820 --> 01:11:05.340
怎么功能 打印菜单的功能

01:11:06.620 --> 01:11:08.940
那么一旦 比方说这是个扫地机器啊

01:11:09.180 --> 01:11:13.280
一旦让它扫地的时候 就是将来你要让 你将来总要让它扫地嘛

01:11:13.780 --> 01:11:16.300
也要让它扫地的时候 它到底要干嘛呢

01:11:17.900 --> 01:11:20.700
它到底要干嘛呢 那么就在这里边写

01:11:21.220 --> 01:11:21.980
这里边

01:11:22.500 --> 01:11:23.260
定义

01:11:24.300 --> 01:11:25.420
如果

01:11:25.680 --> 01:11:27.860
发生了这件事

01:11:28.380 --> 01:11:29.920
我要干嘛

01:11:32.370 --> 01:11:35.650
如果让我打印菜单的时候 我要干嘛 我要干嘛 我就干这个事情没

01:11:36.050 --> 01:11:37.090
我就不就干这个事情吗

01:11:37.850 --> 01:11:42.410
对吧 如果发生了这件事 我是不是要干这个事情 输出这个 输出这个 输出这个

01:11:42.810 --> 01:11:45.010
对吧 我们把这个东西叫做函数体

01:11:47.080 --> 01:11:50.920
函数体 这东西叫做函数的名字 这就是函数的定义

01:11:52.320 --> 01:11:53.320
函数定义

01:11:56.080 --> 01:11:58.120
好 我们把下面代码删了

01:12:00.120 --> 01:12:02.560
好 有了函数定义过后 我们来看一下

01:12:03.540 --> 01:12:06.340
有东西打印出来吗 是没有任何东西打印出来

01:12:07.380 --> 01:12:08.660
这就是一个机器人

01:12:09.420 --> 01:12:11.340
这个机器人可以帮你干活

01:12:11.620 --> 01:12:13.660
帮你干什么活呢 帮你打印这个菜单

01:12:14.820 --> 01:12:18.340
但是这个机器人现在干活没有 没有 但是有了这个定义过后

01:12:18.380 --> 01:12:20.620
有时候他也没什么意义了 这个定义这个干嘛呢

01:12:20.940 --> 01:12:24.380
但是你不要知道 如果你不写这个 连机器人都没有

01:12:25.340 --> 01:12:26.580
你写了这个

01:12:27.100 --> 01:12:29.980
表示你的系统里面就有了这个机器人了

01:12:30.180 --> 01:12:31.900
只不过现在在墙角里蹲着

01:12:33.020 --> 01:12:36.020
在那里唱征服 他现在还没有干活

01:12:36.300 --> 01:12:37.940
那怎么让他干活呢

01:12:38.180 --> 01:12:39.980
怎么让他命令他去干活呢

01:12:40.500 --> 01:12:41.520
你只需要

01:12:44.340 --> 01:12:47.140
做到第二个层面 叫做函数的调用

01:12:48.180 --> 01:12:49.200
函数调用是什么意思

01:12:49.460 --> 01:12:51.260
让函数干活

01:12:54.850 --> 01:12:57.170
我们看了个什么那个功夫里边

01:12:58.190 --> 01:13:01.770
功夫里边不是警察出来扫地的 出来洗地的

01:13:02.530 --> 01:13:03.570
那他干活

01:13:04.330 --> 01:13:06.890
那么这个怎么让他干活了就叫函数的调用

01:13:07.650 --> 01:13:09.970
怎么让他调用 特别简单

01:13:10.210 --> 01:13:12.770
就是函数名加两个小过号就完了

01:13:13.550 --> 01:13:14.310
Print

01:13:14.570 --> 01:13:15.090
没有

01:13:15.350 --> 01:13:16.370
加两个小过号就没了

01:13:17.130 --> 01:13:18.930
就让他干活了 他就干活了

01:13:19.450 --> 01:13:20.210
他就干活了

01:13:21.230 --> 01:13:21.990
你看吧

01:13:23.790 --> 01:13:24.570
就干活了

01:13:24.810 --> 01:13:25.570
他怎么干活的

01:13:26.090 --> 01:13:27.630
这叫做函数的调用

01:13:29.170 --> 01:13:29.930
调用

01:13:30.910 --> 01:13:32.430
调用他的手法干嘛呢

01:13:32.690 --> 01:13:34.470
他就会把函数的函数体

01:13:34.730 --> 01:13:36.030
从头到尾运行一遍

01:13:37.050 --> 01:13:38.830
他就把这个东西从头到尾运行一遍

01:13:40.110 --> 01:13:40.630
没了意思吧

01:13:41.910 --> 01:13:43.190
这就是他干活的方式

01:13:43.450 --> 01:13:45.490
好 如果说你要让他干多次活呢

01:13:45.750 --> 01:13:46.590
要

01:13:48.570 --> 01:13:50.630
运行四次 你看是不是就运行了四次

01:13:51.130 --> 01:13:52.150
这第一次

01:13:52.410 --> 01:13:52.910
是吧

01:13:53.170 --> 01:13:54.470
第二次

01:13:54.710 --> 01:13:55.990
这第三次就运行到四次

01:13:56.250 --> 01:13:59.830
你在任何你想要让他干活的地方 总之这个机器就给你了

01:14:00.150 --> 01:14:01.850
永远都在你手上

01:14:02.110 --> 01:14:04.390
你什么时候让他干活的 你命令他去

01:14:04.650 --> 01:14:06.790
帮我打一个菜单 去帮我打一个菜单 对吧

01:14:07.550 --> 01:14:08.330
是不是很舒服

01:14:08.590 --> 01:14:11.150
那么你可以在你的程序里边

01:14:11.670 --> 01:14:14.990
到处去定义很多的机器人来帮你做不同的事情

01:14:15.250 --> 01:14:17.790
那么到时候你要用他的时就非常非常方便了

01:14:18.050 --> 01:14:19.330
就非常非常方便了

01:14:19.590 --> 01:14:20.110
没了意思吧

01:14:20.870 --> 01:14:21.630
好 这是

01:14:22.410 --> 01:14:24.710
这一块 函数的调用

01:14:28.030 --> 01:14:29.070
好 这是

01:14:29.370 --> 01:14:30.130
这个例子

01:14:31.590 --> 01:14:32.610
让节目继续看

01:14:35.690 --> 01:14:39.010
有的时候还有这么一个功能 比方说

01:14:39.270 --> 01:14:40.290
我现在呢

01:14:42.590 --> 01:14:43.870
我要做这么一件事

01:14:44.630 --> 01:14:46.430
我要做个啥呢 我想一想

01:14:47.190 --> 01:14:48.990
我想一想我要做个啥

01:14:49.770 --> 01:14:52.570
我要判断一个分数是不是极格

01:14:54.530 --> 01:14:57.090
我要写个函数 有个极数

01:14:57.350 --> 01:14:58.250
我要判断

01:14:58.510 --> 01:14:59.130
就是

01:14:59.390 --> 01:14:59.890
意思

01:15:00.990 --> 01:15:01.490
pass

01:15:02.770 --> 01:15:03.790
我要判断

01:15:04.310 --> 01:15:05.590
一个分数

01:15:06.090 --> 01:15:07.890
是不是极格

01:15:08.150 --> 01:15:09.670
你现在要做这么一个机器人

01:15:09.930 --> 01:15:13.010
这个机器人他不是扫地 也不是帮你打印菜单

01:15:13.270 --> 01:15:17.870
而是要他能够帮助你判断一个分数是不是极格

01:15:19.410 --> 01:15:21.710
首先我们要想一想 机器人呢

01:15:21.970 --> 01:15:24.010
他虽然不是人 但是呢

01:15:24.770 --> 01:15:26.070
你要善待他

01:15:26.330 --> 01:15:28.110
你不能让他去做一些

01:15:28.830 --> 01:15:31.050
他根本就没办法完成的事情

01:15:32.670 --> 01:15:34.210
那么比方说我问你

01:15:35.750 --> 01:15:37.270
你现在是一个机器人

01:15:37.910 --> 01:15:41.370
我让你判断一个分数的是不是极格 你回答我

01:15:41.630 --> 01:15:42.390
是不是极格

01:15:42.910 --> 01:15:44.950
来吧 你直接回答我 有没有极格

01:15:47.100 --> 01:15:48.120
你能不能回答

01:15:49.660 --> 01:15:51.200
你没法回答 为什么没法回答

01:15:51.460 --> 01:15:52.740
是不是少了一些信息啊

01:15:54.000 --> 01:15:58.360
我都没有告诉你分数是多少 你怎么样知道我就几倍极格了

01:15:58.880 --> 01:15:59.640
对不对

01:15:59.780 --> 01:16:03.140
是不是你没有告诉你必须要告诉我一些额外的信息

01:16:03.140 --> 01:16:05.840
就是要做一些事的时候 你必须要告诉我一些额外的信息

01:16:06.180 --> 01:16:07.740
比方你们家的微波炉

01:16:08.300 --> 01:16:11.140
你是不是要告诉他打多少时间 对吧

01:16:11.540 --> 01:16:14.340
是不是一个点火对吧 开机

01:16:15.220 --> 01:16:16.980
有点多少时间 是不是多好分钟

01:16:16.980 --> 01:16:18.180
你是不是要告诉他这些东西

01:16:18.980 --> 01:16:19.980
你们家的抽油烟机

01:16:20.300 --> 01:16:21.940
就是要调这个党

01:16:22.300 --> 01:16:23.540
就是要调大小

01:16:23.900 --> 01:16:25.220
对不对 你们家的空调风扇

01:16:25.580 --> 01:16:28.540
是不是都要有一个开关 对不对 调党 调温度

01:16:28.980 --> 01:16:31.380
对不对 这些叫什么呢 叫参数

01:16:32.020 --> 01:16:34.820
参数参数就是额外的信息

01:16:35.740 --> 01:16:38.060
海朔利益的时候 有个东西叫参数

01:16:38.460 --> 01:16:40.260
如果说有的话就有 没有就没有

01:16:40.260 --> 01:16:41.820
比方刚才打印菜单扫地

01:16:41.820 --> 01:16:43.940
你不需要搞到任何东西 还自己去了 对吧

01:16:44.340 --> 01:16:45.220
开机自动运行

01:16:46.020 --> 01:16:50.780
有些时候你必须要告诉他 参数表示额外的信息

01:16:50.780 --> 01:16:53.420
就是你要完成这件事 你必须要知道额外的信息

01:16:53.660 --> 01:16:56.500
我要判断一个分数是不是极格 你都能把分数告诉我呀

01:16:57.220 --> 01:16:59.500
那么参数写到哪儿呢 写到这儿

01:17:00.020 --> 01:17:01.420
在定义的时候就写到这儿

01:17:02.860 --> 01:17:03.380
score

01:17:04.660 --> 01:17:07.580
当然这个东西 零字随便取

01:17:08.700 --> 01:17:10.100
这个score是什么意思呢

01:17:11.060 --> 01:17:12.540
时刻表示一个参数

01:17:14.980 --> 01:17:16.220
他表示的是一个参数

01:17:20.060 --> 01:17:22.620
当使用这个函数的时候

01:17:23.140 --> 01:17:25.100
就是命令这个机器的干活的时候

01:17:26.100 --> 01:17:30.740
需要把参数的值传过来

01:17:32.260 --> 01:17:33.180
就这么个意思

01:17:33.540 --> 01:17:35.340
这个名字是自己随便取的

01:17:35.860 --> 01:17:37.900
那么现在就可以了 我就怎么样了

01:17:38.140 --> 01:17:40.700
我要判断的是他有没有极格

01:17:41.220 --> 01:17:43.260
对不对 判断的是这个东西有没有极格

01:17:43.780 --> 01:17:45.340
那我现在知道判断谁了

01:17:45.340 --> 01:17:46.860
之前我都不知道判断谁

01:17:47.100 --> 01:17:48.140
所以我现在知道判断谁了

01:17:48.380 --> 01:17:49.660
判断他有没有极格

01:17:49.940 --> 01:17:50.940
好 那怎么来判断

01:17:52.220 --> 01:17:52.740
判断

01:17:53.500 --> 01:17:57.100
score小于60

01:17:58.620 --> 01:18:00.420
是不是就极格了

01:18:00.660 --> 01:18:02.220
小于60 我就输出

01:18:02.460 --> 01:18:03.740
没有极格 不极格

01:18:05.540 --> 01:18:06.580
我就输出不极格

01:18:07.340 --> 01:18:09.620
l是 我就输出极格

01:18:16.260 --> 01:18:18.060
小于60不极格

01:18:18.300 --> 01:18:19.340
否则的话就极格

01:18:19.580 --> 01:18:20.380
就输出极格

01:18:20.620 --> 01:18:21.140
好 来吧

01:18:21.660 --> 01:18:22.420
is pass

01:18:23.940 --> 01:18:24.700
我给他一个分数

01:18:25.220 --> 01:18:25.740
70

01:18:26.780 --> 01:18:27.780
其实有没有极格呢

01:18:29.060 --> 01:18:29.580
极格

01:18:30.100 --> 01:18:31.620
然后再给他一个

01:18:31.880 --> 01:18:32.400
is pass

01:18:32.900 --> 01:18:33.420
60

01:18:34.180 --> 01:18:34.960
60有没有极格呢

01:18:35.220 --> 01:18:35.720
是不是极格

01:18:35.980 --> 01:18:38.020
那么现在后面我判断是不是极格是非常简单的

01:18:38.280 --> 01:18:39.040
is pass

01:18:39.300 --> 01:18:39.820
30

01:18:40.340 --> 01:18:41.360
30有没有极格呢

01:18:42.380 --> 01:18:42.900
不极格

01:18:44.180 --> 01:18:44.680
看到没

01:18:44.940 --> 01:18:45.700
所以很简单的

01:18:46.480 --> 01:18:47.500
以为那个机器人

01:18:47.760 --> 01:18:48.520
机器人给他

01:18:48.780 --> 01:18:51.600
给他船 这个东西叫什么呢 叫船船

01:18:52.360 --> 01:18:54.920
将70船地给

01:18:55.700 --> 01:18:56.200
score

01:18:56.920 --> 01:18:58.960
相当于把这个70就放到这个score里边

01:18:59.220 --> 01:18:59.740
船过去

01:19:00.240 --> 01:19:01.020
啊 船过去

01:19:01.280 --> 01:19:04.080
但那个船船有很多种方式 比方说可以订一个变量a

01:19:04.600 --> 01:19:05.100
啊

01:19:05.880 --> 01:19:07.680
船船伍就船的是数据嘛 对吧

01:19:07.940 --> 01:19:10.480
你订一个变量a 然后把这个变量a 船过去行不行

01:19:10.740 --> 01:19:11.260
也可以

01:19:11.520 --> 01:19:12.020
什么意思

01:19:12.280 --> 01:19:14.320
把a的值取出来

01:19:15.360 --> 01:19:16.640
船到这里边去

01:19:17.140 --> 01:19:19.180
好 这个机器人就开始动了啊 开始动了

01:19:19.440 --> 01:19:21.500
这现在得到的是什么 得到的是60

01:19:21.760 --> 01:19:24.300
60是不是小于60呢 不是小于 那么就极格

01:19:24.560 --> 01:19:26.100
输出极格 然后机器人运行完了

01:19:26.360 --> 01:19:28.340
他又回去了 他又回到一个墙脚蹲着了

01:19:28.760 --> 01:19:32.340
好 然后呢 又运行 这个机器人又出动了 现在把30就传给他

01:19:32.600 --> 01:19:35.420
对吧 又传给他 他又要看30是不是小于60呢

01:19:35.680 --> 01:19:37.980
OK 30是小于60的 就输出不极格

01:19:38.480 --> 01:19:40.280
运行完了 运行完了又回墙脚蹲着了

01:19:40.800 --> 01:19:41.300
对吧

01:19:41.560 --> 01:19:42.080
这就是

01:19:42.340 --> 01:19:43.360
他的运装方式

01:19:43.860 --> 01:19:44.380
函数

01:19:47.540 --> 01:19:48.820
好 那么现在还有一个问题

01:19:49.600 --> 01:19:50.620
复制一下

01:19:51.900 --> 01:19:53.440
还有一个问题 什么问题呢

01:19:53.940 --> 01:19:54.720
就是说

01:19:57.110 --> 01:19:58.910
我现在要做的是

01:19:59.890 --> 01:20:01.170
极格

01:20:03.210 --> 01:20:05.250
判断一个数字

01:20:05.530 --> 01:20:06.290
就是

01:20:06.550 --> 01:20:10.390
如果数字极 如果说如果极格

01:20:11.150 --> 01:20:12.430
则怎么样呢

01:20:15.250 --> 01:20:16.270
如果不极格

01:20:17.290 --> 01:20:17.810
则

01:20:18.570 --> 01:20:19.090
把

01:20:19.850 --> 01:20:20.370
分数

01:20:21.650 --> 01:20:22.670
加个10分

01:20:22.930 --> 01:20:24.970
比方说我觉得这一次考试太差了

01:20:25.230 --> 01:20:27.790
如果说不极格的话 我就把分数给你加10分

01:20:27.990 --> 01:20:29.270
比方说我们这里有个辨量

01:20:29.530 --> 01:20:30.570
有个s

01:20:30.810 --> 01:20:31.570
这个辨量

01:20:31.830 --> 01:20:34.390
里面保存了一个分数 比方说50吧

01:20:34.910 --> 01:20:39.770
我判断一下这个分数 当然我可能用的用的 你不知道里面存在啥了 这个箱子里面存的是

01:20:40.030 --> 01:20:41.050
多少我就忘了

01:20:41.310 --> 01:20:43.610
那么我先把这个箱子里面的东西取出来看一看

01:20:43.870 --> 01:20:45.410
看一看有没有极格呢

01:20:45.670 --> 01:20:48.230
如果说你不极格的话 我把分数加10

01:20:48.490 --> 01:20:50.530
那么请问大家这个函数还能用吗

01:20:53.510 --> 01:20:55.030
你还能用吗 这个函数

01:20:55.810 --> 01:20:58.110
我如果说把这个s传进去

01:21:00.710 --> 01:21:02.230
他只是告诉我了不极格

01:21:04.950 --> 01:21:06.230
是不是只是告诉我了不极格

01:21:07.750 --> 01:21:14.150
那么我这里 我要把他分数加10 我怎么办了 我的问题是 我这里没有办法判断 他输出了啥

01:21:14.410 --> 01:21:15.690
他输出了啥我也不知道

01:21:17.230 --> 01:21:17.730
对不对

01:21:18.510 --> 01:21:21.330
那么这个时候我们要涉及到另外一个话题了

01:21:23.470 --> 01:21:28.590
什么话题呢 就是这个机器人他有点擅自做主了

01:21:28.850 --> 01:21:29.870
有点那个

01:21:30.330 --> 01:21:31.150
有点

01:21:31.910 --> 01:21:33.450
想要挑战主人的味道了

01:21:33.710 --> 01:21:34.990
他做的事太多了

01:21:35.750 --> 01:21:37.290
你一个面包机

01:21:37.550 --> 01:21:39.090
你怎么能够自动炒菜呢

01:21:39.590 --> 01:21:41.390
不干你管的事你不要管

01:21:42.150 --> 01:21:46.770
就是你分数小于你我只是问你极没极格 你给我打印啥的

01:21:47.790 --> 01:21:51.870
没有让你打印啊 对吧 你给他两巴掌 你这个人是不是你这个小机

01:21:52.130 --> 01:21:52.910
小机器人

01:21:53.170 --> 01:21:55.210
是不是管的事情太多了

01:21:55.990 --> 01:21:59.830
打不打印我说了算 对吧 你只是要告诉我他极没极格就行了

01:22:00.590 --> 01:22:05.970
对不对 你不用告诉我你不用去打印 你只要告诉我就行了 告诉谁

01:22:06.230 --> 01:22:07.750
谁在雕用就告诉谁

01:22:08.790 --> 01:22:15.430
原来是吧 就有点类似于说你这个机器人啊 这个机器人你可以老在那边想一下啊 机器人找什么样子你们自己去想一下

01:22:16.470 --> 01:22:17.750
机器人脑袋上有个洞

01:22:19.530 --> 01:22:22.090
你在一张纸上写了一个分数

01:22:22.850 --> 01:22:24.910
你把这个分数投到这个洞里边去

01:22:25.170 --> 01:22:26.970
他马上给你吐出来一个结果

01:22:27.430 --> 01:22:32.350
他告诉你极没极格 他不是在电视上给你显示一个极格还是不极格

01:22:32.610 --> 01:22:35.170
他不是的 他是吐出来给你还给你

01:22:35.670 --> 01:22:38.230
你给他丢一个60进去 他就还给你一个极格

01:22:39.010 --> 01:22:40.790
表示 ok 没问题

01:22:41.050 --> 01:22:44.130
然后你给他丢一个30进去 他就还给你 他就吐出来一个

01:22:46.170 --> 01:22:46.670
不极格

01:22:47.710 --> 01:22:48.470
什么意思

01:22:49.250 --> 01:22:53.090
所以说到这个东西 我不是让你在电视屏幕上给我打印出来这个玩意儿

01:22:53.290 --> 01:22:57.130
我实际上你要告诉我里面几个后续 我来自己来处理

01:22:58.170 --> 01:23:02.010
那怎么来搞 那他们怎么来告诉了 这需要用到一个东西要返回值

01:23:04.270 --> 01:23:05.810
怎么写 我就不再空载出出了

01:23:07.090 --> 01:23:09.910
小于60的时候表示不极格 不极格怎么办

01:23:10.170 --> 01:23:12.210
return 返回

01:23:13.490 --> 01:23:16.050
我结束了 返回 返回什么呢

01:23:16.570 --> 01:23:18.870
随便的返回什么 比方说返回一个

01:23:19.370 --> 01:23:20.650
两个字 极格

01:23:21.430 --> 01:23:22.190
不极格

01:23:23.070 --> 01:23:25.010
这个是不是打印 不是打印

01:23:25.510 --> 01:23:26.550
只是返回了三个字而已

01:23:27.050 --> 01:23:29.870
那么这种情况返回什么呢 返回极格

01:23:30.890 --> 01:23:31.910
你看现在有打印吗

01:23:32.170 --> 01:23:32.950
是没有打印

01:23:33.970 --> 01:23:36.790
但是呢 现在这个程序的设计就比较好了

01:23:37.290 --> 01:23:38.570
因为他管的事情很少

01:23:39.090 --> 01:23:40.110
他只管了

01:23:40.630 --> 01:23:46.770
他只管了就这么一件事 就是判断他极没极格 后续要做什么 他极格又做什么 不极格要做什么 随便的

01:23:47.270 --> 01:23:47.790
随便的干嘛

01:23:48.510 --> 01:23:56.950
那么我们就把这个控制权交给了函数的调用者 就是我这里调用这个函数 对吧 我把s传进去 你帮我看一下他有没有极格

01:23:57.210 --> 01:23:59.010
看完了过后这个函数

01:23:59.510 --> 01:24:00.790
也是一个表达式

01:24:01.050 --> 01:24:07.970
这个函数运行完了过后 他会返回一个结果 返回什么结果呢 这里返回了什么结果 这里就返回什么结果

01:24:08.470 --> 01:24:10.270
那么我是不是可以把他保存到变量里面

01:24:12.070 --> 01:24:13.590
可以把他保存到变量里面

01:24:13.850 --> 01:24:15.910
把这个函数的运行结果

01:24:16.170 --> 01:24:17.190
保存到变量里面

01:24:17.990 --> 01:24:21.430
我们也把他称之为函数的返回结果 保存到变量中

01:24:22.350 --> 01:24:26.510
把函数的返回结果 保存到变量中

01:24:27.870 --> 01:24:29.470
好 然后我们输出这个results 你看一下

01:24:30.270 --> 01:24:32.190
我们现在输出 是不是输出不极格

01:24:32.590 --> 01:24:36.590
对吧 五十是不极格的 对不对 当然我们也可以不输出 我们干嘛呢

01:24:37.030 --> 01:24:39.750
可以判断一下 判断这个results

01:24:40.870 --> 01:24:42.750
是不是等于 等于什么不极格

01:24:43.350 --> 01:24:46.270
如果说等于不极格的话 我就把这个s的分数呢

01:24:47.230 --> 01:24:48.390
加上一个10分

01:24:48.870 --> 01:24:51.630
s加上10再重新保存到s里面

01:24:52.390 --> 01:24:53.310
所以加上一个10分

01:24:53.670 --> 01:24:55.230
然后我们再输出s

01:24:56.990 --> 01:24:58.630
是不是六十 对吧 现在就极格了

01:24:59.630 --> 01:25:02.270
就是你可以 后续的事情你可以做任何事情

01:25:02.550 --> 01:25:04.150
这个机器人他做的事情很少

01:25:05.750 --> 01:25:06.590
他做的事情很少

01:25:07.110 --> 01:25:12.070
你总不希望你一个扫地机器人控制你的电视 控制你的笔记本吧

01:25:12.790 --> 01:25:14.110
这个管得太宽了 对吧

01:25:15.110 --> 01:25:16.750
这些事情能让你自己来做

01:25:17.310 --> 01:25:20.430
到底要怎么处理 比方说我还是要实现原来的功能

01:25:20.430 --> 01:25:22.830
比方说我还是要实现原来的功能 那我也可以这样子写呗

01:25:23.350 --> 01:25:27.350
ifresults 等于什么 等于极格

01:25:27.710 --> 01:25:29.990
那我就输出 输出极格

01:25:31.710 --> 01:25:34.550
else 我就输出不极格

01:25:36.270 --> 01:25:36.590
对吧

01:25:37.630 --> 01:25:39.550
是不是 我还是可以达到同样的效果

01:25:40.150 --> 01:25:42.830
对吧 我们后续能够自行来进行处理

01:25:44.430 --> 01:25:47.310
懂得更多就好好体会一下 雕用这个函数

01:25:47.790 --> 01:25:52.430
把这个函数的运行结果拿到 保存到变量里面

01:25:53.350 --> 01:25:56.830
好 当然了 我们也可以这样子来写 你看这里写法很多的

01:25:59.800 --> 01:26:01.960
我们也可以这样子写 直接输出什么呢

01:26:02.720 --> 01:26:03.640
ispass

01:26:04.920 --> 01:26:05.400
else

01:26:05.920 --> 01:26:08.640
所以这样子也看不懂了 一样的

01:26:09.640 --> 01:26:11.360
雕用这个函数

01:26:12.400 --> 01:26:15.880
把函数的运算结果 运算结果是不是返回结果

01:26:16.120 --> 01:26:19.320
对吧 要么就返回结果 几个要么就返回不几个嘛

01:26:19.680 --> 01:26:23.000
把函数的结果拿来输出 是不是一样的

01:26:23.920 --> 01:26:25.560
有什么区别呢 几个

01:26:25.800 --> 01:26:31.040
所以一定要理解表达式 任何可以需要数据的地方都可以使用表达式

01:26:31.040 --> 01:26:33.720
这就是个表达式 雕用函数的表达式

01:26:34.040 --> 01:26:36.200
它会把这个表达式的结果拿来输出

01:26:37.760 --> 01:26:40.480
看没 好 这是这里的写法

01:26:41.040 --> 01:26:44.000
但是这里我们用制服串来返回 其实不是很好

01:26:44.200 --> 01:26:46.440
因为这里要么就是几个 要么就不几个嘛

01:26:46.440 --> 01:26:49.200
所以说我们一般来说的话 可以用一个什么呢

01:26:49.200 --> 01:26:50.880
可以用一个doer

01:26:51.520 --> 01:26:54.240
不几个是什么 不几个就是force

01:26:54.680 --> 01:26:56.240
几个是什么 几个就是to

01:26:57.720 --> 01:26:59.800
对不对 是不是这个道理

01:27:00.840 --> 01:27:02.440
return force return true

01:27:02.680 --> 01:27:06.240
对不对 那么这边你看这输出了是什么 是不是force和to

01:27:06.640 --> 01:27:07.800
如果说这里是60

01:27:08.280 --> 01:27:11.360
你看是不是to 就输出to和force了

01:27:12.480 --> 01:27:12.880
看没

01:27:14.120 --> 01:27:16.280
那么当然我们还可以做任何想做的事情

01:27:16.520 --> 01:27:17.520
比方说我就可以判断

01:27:18.880 --> 01:27:21.880
如果说不几个就把分数加10

01:27:23.360 --> 01:27:24.320
加10 什么意思呢

01:27:24.320 --> 01:27:25.840
就是说ease pass

01:27:27.520 --> 01:27:28.560
把s传进去

01:27:28.800 --> 01:27:30.960
你看啊 又看不懂了 又看不懂了

01:27:31.640 --> 01:27:33.360
一样的 判断什么呢

01:27:33.600 --> 01:27:35.960
判断这个表达式的值

01:27:37.240 --> 01:27:39.800
是不是等于force

01:27:40.920 --> 01:27:41.480
对不对

01:27:41.760 --> 01:27:44.440
判断那个表达式的值 是不是等于force

01:27:45.640 --> 01:27:46.240
没问题吧

01:27:47.160 --> 01:27:49.800
那么如果说它是force的话 是不是表示不几个

01:27:49.800 --> 01:27:51.400
因为它问的是几不几个 对不对

01:27:51.640 --> 01:27:53.000
它返回处的话表示几个

01:27:53.000 --> 01:27:54.120
它返回force的话

01:27:54.360 --> 01:27:55.240
是不是表示不几个

01:27:55.480 --> 01:27:57.360
如果说它等于force 是不是不几个

01:27:57.600 --> 01:28:00.160
不几个怎么办 把s加上一个10

01:28:02.480 --> 01:28:03.840
然后我们站起来输出s

01:28:05.760 --> 01:28:06.320
是不是60

01:28:07.280 --> 01:28:08.360
对吧 是不是60

01:28:16.030 --> 01:28:17.790
好 这是这个返回

01:28:18.030 --> 01:28:20.590
那么返回 这里还有个小的细节

01:28:20.590 --> 01:28:21.910
在函数的定义里边

01:28:22.430 --> 01:28:23.510
return

01:28:24.350 --> 01:28:27.150
return运行后

01:28:28.390 --> 01:28:31.630
将立即结束函数

01:28:32.430 --> 01:28:33.190
什么意思呢

01:28:33.430 --> 01:28:35.470
就是如果说它运行到return了

01:28:36.670 --> 01:28:38.390
表示它的运算

01:28:38.390 --> 01:28:40.190
这个函数的执行已经结束了

01:28:40.190 --> 01:28:41.470
运算已经结束了

01:28:42.510 --> 01:28:43.230
结束了过来

01:28:43.230 --> 01:28:45.430
然后它又回到那个墙脚蹲着了

01:28:45.430 --> 01:28:46.510
等待你调用

01:28:46.750 --> 01:28:47.390
它又回去了

01:28:47.630 --> 01:28:49.350
也就是它后边写的任何语句

01:28:49.350 --> 01:28:50.350
它都不会运行了

01:28:50.910 --> 01:28:52.190
你看这个语句变成灰色了

01:28:52.190 --> 01:28:52.350
对吧

01:28:52.350 --> 01:28:53.630
这个VS后的很智能

01:28:53.630 --> 01:28:55.510
它知道这个语句永远不会运行

01:28:56.470 --> 01:28:58.110
检测到无法访问的代码

01:28:58.110 --> 01:28:59.350
这个代码永远不会运行的

01:28:59.350 --> 01:28:59.790
你看

01:29:01.750 --> 01:29:02.750
只要运行到return

01:29:02.750 --> 01:29:04.230
它后边的语句不再运行的

01:29:04.470 --> 01:29:06.950
所以说这个代码又可以写成这个样子

01:29:07.310 --> 01:29:08.390
看着我把它注释掉了

01:29:08.390 --> 01:29:09.430
又可以写成这个样子

01:29:09.750 --> 01:29:11.830
如果score小于60

01:29:12.430 --> 01:29:13.470
或者叫做这样的

01:29:13.910 --> 01:29:14.670
换一种写法

01:29:14.670 --> 01:29:15.510
大于等于60

01:29:15.510 --> 01:29:16.550
都是一样的

01:29:16.750 --> 01:29:17.310
返回什么

01:29:17.310 --> 01:29:18.070
返回去

01:29:18.590 --> 01:29:19.110
对不对

01:29:19.350 --> 01:29:21.150
然后我后边不写l式的

01:29:21.150 --> 01:29:21.910
返回forced

01:29:23.870 --> 01:29:24.910
是不是可以这样子写

01:29:26.190 --> 01:29:27.470
你看这个道理

01:29:28.230 --> 01:29:30.270
如果说它大于等于60

01:29:31.310 --> 01:29:32.070
它就返回去了

01:29:32.070 --> 01:29:33.070
后边还能运行吗

01:29:33.070 --> 01:29:33.870
不能运行了

01:29:33.870 --> 01:29:34.870
马上就结束了

01:29:34.870 --> 01:29:35.910
它又回小墙蹲着了

01:29:36.670 --> 01:29:37.430
不能运行了

01:29:39.390 --> 01:29:40.670
然后这里

01:29:41.190 --> 01:29:42.990
如果说它进不了这个判断

01:29:43.470 --> 01:29:45.270
它进不了这个判断是不是返回forced

01:29:45.790 --> 01:29:46.310
对吧

01:29:46.550 --> 01:29:47.590
是一样的

01:29:47.590 --> 01:29:48.110
一样的

01:29:48.110 --> 01:29:49.110
没有任何问题对吧

01:29:49.630 --> 01:29:50.910
还是一样的

01:29:50.910 --> 01:29:51.950
没有任何问题

01:29:51.950 --> 01:29:52.710
就这种写法

01:29:52.710 --> 01:29:53.070
对吧

01:29:53.070 --> 01:29:54.230
所以说在函数里

01:29:54.230 --> 01:29:55.150
但是当然

01:29:55.150 --> 01:29:56.550
return只能在函数里面写

01:29:57.310 --> 01:29:58.590
那么还有一种写法

01:29:58.590 --> 01:29:59.350
大家看一下

01:30:01.570 --> 01:30:02.330
就是程序

01:30:02.330 --> 01:30:04.650
书写程序是非常非常灵活的

01:30:05.410 --> 01:30:07.330
你只要记住表达式的姿势

01:30:07.330 --> 01:30:09.010
你往把这东西看成表达式

01:30:10.170 --> 01:30:12.010
它为q的时候

01:30:12.330 --> 01:30:13.610
它是不是个表达式

01:30:13.610 --> 01:30:14.570
所以要么去q

01:30:14.570 --> 01:30:15.410
要么去forced

01:30:15.650 --> 01:30:16.690
它为q的时候

01:30:16.690 --> 01:30:17.690
我返回q

01:30:18.290 --> 01:30:19.650
它为forced的时候

01:30:19.650 --> 01:30:20.490
我返回forced

01:30:20.490 --> 01:30:21.770
我干脆就直接把它返回

01:30:21.770 --> 01:30:22.490
又完了

01:30:24.210 --> 01:30:25.530
有时候又看不懂了

01:30:26.690 --> 01:30:28.050
始终记住表达式

01:30:28.730 --> 01:30:29.890
这是不是个表达式

01:30:30.490 --> 01:30:33.650
把这个表达式的运算结果返回

01:30:34.730 --> 01:30:35.650
一句话写完了

01:30:36.090 --> 01:30:38.490
把这个表达式的运算结果返回

01:30:38.730 --> 01:30:39.250
啥意思

01:30:40.010 --> 01:30:40.770
就是说

01:30:40.930 --> 01:30:42.290
这个表达式为q

01:30:42.290 --> 01:30:43.330
我就返回q

01:30:43.330 --> 01:30:44.210
反正表达式为q

01:30:44.210 --> 01:30:45.370
是不是就运算结果为q

01:30:45.370 --> 01:30:46.130
就返回q

01:30:46.730 --> 01:30:47.770
表达式为forced

01:30:47.770 --> 01:30:48.490
就返回forced

01:30:48.490 --> 01:30:49.170
一样的

01:30:49.170 --> 01:30:49.690
对不对

01:30:49.690 --> 01:30:51.170
你只要记住表达式

01:30:51.170 --> 01:30:52.890
任何需要数据的地方

01:30:52.890 --> 01:30:54.050
都可以使用表达式

01:30:54.450 --> 01:30:55.010
一个表达式

01:30:55.010 --> 01:30:56.330
无论写多长都无所谓

01:30:57.130 --> 01:30:58.850
这写法是非常非常灵活的

01:31:01.640 --> 01:31:02.200
今天的课

01:31:04.200 --> 01:31:05.640
对于很多

01:31:06.840 --> 01:31:08.200
已经学过解释的

01:31:08.200 --> 01:31:09.920
那就是太轻松了

01:31:09.920 --> 01:31:11.120
人家得聊天了

01:31:11.120 --> 01:31:12.960
但是我希望

01:31:12.960 --> 01:31:14.640
就是学过解释的同学

01:31:14.640 --> 01:31:17.600
还是不要在评论区

01:31:18.040 --> 01:31:20.200
太火焰了

01:31:20.200 --> 01:31:22.240
因为我知道你们也听得无聊

01:31:22.240 --> 01:31:24.120
我理解

01:31:24.120 --> 01:31:27.640
但是毕竟有很多领基础的学员

01:31:27.640 --> 01:31:30.000
领基础的学员为走神的

01:31:30.000 --> 01:31:32.640
也在评论区太火焰的话

01:31:32.640 --> 01:31:33.480
后面领基础的学员

01:31:33.480 --> 01:31:34.600
他就不停课了

01:31:34.600 --> 01:31:36.920
本来课程的内容就多

01:31:36.920 --> 01:31:40.680
所以照顾一下你们的学弟学妹

01:31:41.680 --> 01:31:42.360
好了

01:31:43.200 --> 01:31:44.720
刚刚有同学都听不懂了

01:31:44.720 --> 01:31:46.360
因为我们今天内容确实很多

01:31:46.440 --> 01:31:48.000
对于领基础的学员的话

01:31:48.000 --> 01:31:50.440
内容知识量是非常非常大的

01:31:50.440 --> 01:31:52.080
知识量是非常非常大的

01:31:52.080 --> 01:31:53.440
我们只是简单的

01:31:53.440 --> 01:31:56.680
该阔性的把这个解释语言

01:31:56.680 --> 01:31:58.600
就光是语言部分的

01:31:58.600 --> 01:31:59.880
就怎么去说话

01:32:00.880 --> 01:32:02.480
做了一个大致的介绍

01:32:03.640 --> 01:32:05.640
要这里边的东西太多了

01:32:05.640 --> 01:32:06.720
我告诉大家

01:32:06.720 --> 01:32:08.560
我之前录那个解释课程

01:32:08.560 --> 01:32:09.880
我录到多少节课

01:32:09.880 --> 01:32:11.480
我录到80多节课

01:32:12.360 --> 01:32:13.120
我只有一天

01:32:13.120 --> 01:32:14.520
今天我只有一节课

01:32:15.000 --> 01:32:16.760
你说我要农说多少东西

01:32:16.760 --> 01:32:17.960
而且我们这很多东西

01:32:17.960 --> 01:32:19.480
都还是没有讲到的

01:32:19.480 --> 01:32:21.920
不过这一部分说话的方式

01:32:21.920 --> 01:32:26.480
已经对我们明天的写效果

01:32:26.480 --> 01:32:28.920
就已经有足够多的帮助了

01:32:28.920 --> 01:32:29.720
明天我们写效果

01:32:29.720 --> 01:32:31.240
用不到态度的东西

01:32:31.240 --> 01:32:32.640
就已经有足够多的帮助了

01:32:32.640 --> 01:32:33.400
那么今天下来

01:32:33.400 --> 01:32:34.960
其实我们代码量也不多

01:32:34.960 --> 01:32:36.960
今天说的一些识别代码也不多

01:32:36.960 --> 01:32:39.080
有的人经常不太懂了

01:32:39.080 --> 01:32:40.360
我们后边

01:32:40.360 --> 01:32:43.000
明天拿到我这个课之后

01:32:43.120 --> 01:32:44.840
再好好去看一遍

01:32:44.840 --> 01:32:46.560
你可以用暂停

01:32:46.560 --> 01:32:47.800
一块一块看

01:32:47.800 --> 01:32:49.040
其实我们今天讲的点

01:32:49.040 --> 01:32:50.120
其实就这么几个点

01:32:50.120 --> 01:32:50.880
注释能理解吧

01:32:50.880 --> 01:32:54.480
我相信不可能没有人理解不了

01:32:54.480 --> 01:32:55.880
数据这个也好理解

01:32:55.880 --> 01:32:57.400
任何用用的信息都是数据

01:32:57.400 --> 01:32:59.000
关键数据的分类

01:32:59.000 --> 01:33:00.600
数据分类这个其实也好理解

01:33:00.600 --> 01:33:02.400
怎么去保存数据其实也好理解

01:33:03.920 --> 01:33:05.800
就开始运算其实也好理解

01:33:05.800 --> 01:33:06.600
就从这开始

01:33:06.600 --> 01:33:09.600
流程控制数组和函数就这三块

01:33:09.600 --> 01:33:11.160
我相信前辈应该没什么问题吧

01:33:12.120 --> 01:33:13.400
前面应该没什么问题吧

01:33:13.400 --> 01:33:15.600
前面我们都是用正常人的各方式的

01:33:15.600 --> 01:33:17.400
到后面可能因为我们

01:33:17.400 --> 01:33:19.800
你开始慢慢的脱离现实了

01:33:19.800 --> 01:33:22.080
现实的语言就开始慢慢的脱离了

01:33:22.080 --> 01:33:24.600
所以说感觉比较抽象

01:33:24.600 --> 01:33:25.120
没关系

01:33:25.120 --> 01:33:27.120
你现在不要去想它有什么用

01:33:27.120 --> 01:33:28.520
你想就完蛋了

01:33:28.520 --> 01:33:29.760
想就完蛋了

01:33:29.760 --> 01:33:31.200
我现在教你说话

01:33:31.200 --> 01:33:33.240
就让你学26个英文字母一样

01:33:33.240 --> 01:33:34.000
你告诉我

01:33:34.000 --> 01:33:35.360
26个英文字没有什么用

01:33:35.360 --> 01:33:36.600
我告诉你它是组成单词的

01:33:36.600 --> 01:33:38.120
连单词试啥都不知道

01:33:38.120 --> 01:33:39.520
我怎么来给你解释呢

01:33:39.520 --> 01:33:40.800
所以说你开始

01:33:41.000 --> 01:33:43.640
就按照这个理解

01:33:43.640 --> 01:33:45.240
我这个一天的课程

01:33:45.240 --> 01:33:46.040
要把这些东西讲完

01:33:46.040 --> 01:33:47.280
也只能这么去讲

01:33:47.280 --> 01:33:48.520
我可以找不到别的办法了

01:33:51.240 --> 01:33:54.080
当然这个东西给你发下来

01:33:54.080 --> 01:33:54.520
等一下吧

01:33:54.520 --> 01:33:55.440
马上就给你发下来

01:33:57.200 --> 01:33:58.360
先把宝宝包穿一下

01:33:58.360 --> 01:33:59.040
下来过后

01:33:59.040 --> 01:34:00.040
如果说零件数学

01:34:00.040 --> 01:34:01.000
一定要去再看一遍

01:34:01.000 --> 01:34:02.600
其实东西没有那么多

01:34:02.600 --> 01:34:03.960
没有那么多

01:34:03.960 --> 01:34:05.520
我好把很多东西都是简化的

01:34:06.640 --> 01:34:07.680
我知道

01:34:07.680 --> 01:34:08.680
这个东西我能不知道吗

01:34:09.280 --> 01:34:10.400
我能不知道这个玩意吗

01:34:13.480 --> 01:34:14.480
后面不是说

01:34:14.480 --> 01:34:16.080
不能跟等等Force

01:34:16.080 --> 01:34:17.360
但是我一定要去照顾

01:34:17.360 --> 01:34:18.000
宁静学学院

01:34:18.000 --> 01:34:19.360
我一定要让宁静学学院

01:34:19.360 --> 01:34:20.560
尽量的懂理解

01:34:22.640 --> 01:34:23.080
好了

01:34:23.080 --> 01:34:24.240
那我今天就到这了

01:34:24.240 --> 01:34:26.040
然后我就召唤那个毛利卡了

01:34:28.800 --> 01:34:29.880
一天也不能讲太多了

01:34:29.880 --> 01:34:30.480
讲太多

01:34:30.480 --> 01:34:31.160
你们也受不了

01:34:42.650 --> 01:34:43.370
今天毛利卡

01:34:44.690 --> 01:34:45.130
不来吗

01:34:45.130 --> 01:34:46.170
谁说的呀

01:34:46.170 --> 01:34:49.230
你是不是骗我啊

01:34:49.230 --> 01:34:49.750
他不来吗

01:34:50.750 --> 01:34:52.030
我看一下手机

01:34:54.310 --> 01:34:54.870
真的吗

01:34:54.870 --> 01:34:56.150
他没给我说

01:34:56.150 --> 01:34:57.310
他说了

01:34:57.310 --> 01:34:57.750
他说了

01:34:59.230 --> 01:34:59.910
他说了

01:34:59.910 --> 01:35:00.710
他说了他不上了

01:35:00.710 --> 01:35:01.110
那行

01:35:01.110 --> 01:35:02.230
那我给你们聊一会吧

01:35:02.950 --> 01:35:03.550
那我给你聊一会

01:35:03.550 --> 01:35:04.790
不再讲新字了

01:35:04.790 --> 01:35:06.430
不然宁静学学已经着不住了

01:35:09.070 --> 01:35:09.910
等一下

01:35:09.910 --> 01:35:10.870
那我去倒杯水

01:35:10.870 --> 01:35:12.390
我去倒杯水

01:35:12.390 --> 01:35:13.710
我给大家先放水哥

01:35:14.510 --> 01:35:15.110
我去倒杯水

01:36:17.350 --> 01:36:25.780
听我曾经怕不伤和大

01:36:25.780 --> 01:36:31.510
我曾经有目标散入眼

01:36:31.510 --> 01:36:33.710
我曾经失落失望

01:36:33.710 --> 01:36:39.960
失掉所有方向

01:36:39.960 --> 01:36:55.460
才是唯一的

01:36:57.620 --> 01:36:57.940
诶

01:36:57.940 --> 01:36:58.740
我没关

01:37:04.910 --> 01:37:05.630
是这样啊

01:37:05.630 --> 01:37:12.120
就是咱们检测到无法运行的

01:37:12.120 --> 01:37:13.080
是什么样的插件

01:37:13.080 --> 01:37:14.280
没有插件

01:37:14.280 --> 01:37:15.200
没有插件

01:37:15.200 --> 01:37:16.480
那个VSCO的自带的

01:37:16.520 --> 01:37:17.920
自带的他就知道了

01:37:19.000 --> 01:37:19.560
就是这样

01:37:19.560 --> 01:37:21.240
咱们计算机语言

01:37:21.240 --> 01:37:22.880
无论是C语言

01:37:22.880 --> 01:37:23.720
C++

01:37:23.720 --> 01:37:24.800
还有什么加瓦

01:37:24.800 --> 01:37:25.720
CHAPHP

01:37:25.720 --> 01:37:26.760
弄起来语言一大堆

01:37:26.760 --> 01:37:29.600
他跟我们的现实中的语言

01:37:29.600 --> 01:37:32.000
肯定是有很大的差别的

01:37:32.000 --> 01:37:32.560
为啥呢

01:37:32.560 --> 01:37:33.640
是因为计算机跟人

01:37:33.640 --> 01:37:35.480
就是差别太大了

01:37:35.480 --> 01:37:36.760
计算机的时间里边

01:37:36.760 --> 01:37:37.920
他是只认数字的

01:37:37.920 --> 01:37:39.440
想啥都不认的

01:37:39.440 --> 01:37:40.760
最早的计算机语言

01:37:40.760 --> 01:37:42.360
那叫做二镜子机器

01:37:42.360 --> 01:37:44.160
那个东西才要要命

01:37:44.160 --> 01:37:45.120
那个东西才要复杂

01:37:45.120 --> 01:37:46.600
那个东西不是人学的

01:37:46.600 --> 01:37:48.080
能够学懂的一些计算法的人

01:37:48.080 --> 01:37:52.160
基本上你乖乌就已经不远了

01:37:52.160 --> 01:37:54.480
因为他的思维事件

01:37:54.480 --> 01:37:55.400
即像你的思维事件

01:37:55.400 --> 01:37:57.200
跟人是完全不一样

01:37:57.200 --> 01:37:59.760
这就造成了很大的差异

01:37:59.760 --> 01:38:03.840
但是我们人要去学习跟机器沟通

01:38:03.840 --> 01:38:06.240
就要学习一种尽量的

01:38:06.240 --> 01:38:08.440
有点像人类的语言

01:38:08.440 --> 01:38:09.640
所以我们现在的语言

01:38:09.640 --> 01:38:11.640
已经比过去好多了

01:38:11.640 --> 01:38:13.880
已经比过去好多了

01:38:13.920 --> 01:38:15.760
乘客的介绍内容喊的很全了

01:38:15.760 --> 01:38:17.000
已经非常非常全了

01:38:17.000 --> 01:38:18.640
只是乘客的介绍内容

01:38:18.640 --> 01:38:20.640
他没有包含后期的

01:38:20.640 --> 01:38:22.600
什么ES5、ES6的东西

01:38:22.600 --> 01:38:23.920
ES5包含了一点点

01:38:23.920 --> 01:38:24.640
ES6的东西

01:38:24.640 --> 01:38:27.040
因为他只讲了介绍最基础

01:38:27.040 --> 01:38:27.960
最核心的东西

01:38:27.960 --> 01:38:30.640
这也是ES最重要的东西

01:38:30.640 --> 01:38:31.280
最重要的东西

01:38:31.280 --> 01:38:32.840
这承诺介绍里面都有了

01:38:32.840 --> 01:38:35.200
但后边的ES5的一些新的API

01:38:35.200 --> 01:38:36.240
ES6的东西

01:38:36.240 --> 01:38:38.040
就后期咱们付费扣成了

01:38:40.040 --> 01:38:41.560
所以说那个

01:38:41.560 --> 01:38:42.760
计算机事件跟人

01:38:42.800 --> 01:38:44.640
有一个本质的差异很大

01:38:44.640 --> 01:38:46.720
所以说现在我们语言能做成

01:38:46.720 --> 01:38:47.320
这个样子的

01:38:47.320 --> 01:38:48.080
就已经

01:38:49.280 --> 01:38:51.120
我们的先辈们已经死掉了

01:38:51.120 --> 01:38:53.280
不知道多少的老细胞了

01:38:53.280 --> 01:38:54.280
大家要珍惜

01:38:54.280 --> 01:38:56.400
要懂得感恩

01:38:56.400 --> 01:38:57.400
你们学的难

01:38:57.400 --> 01:39:00.520
你要知道他们去创造这个语言的时候

01:39:00.520 --> 01:39:01.680
他们才真的是难

01:39:04.080 --> 01:39:06.160
在以不断努力下

01:39:06.160 --> 01:39:08.600
咱们的程序变成现在这个样子

01:39:08.600 --> 01:39:09.600
有一种人觉得难

01:39:09.600 --> 01:39:11.880
可能是有一种天生的

01:39:11.880 --> 01:39:12.840
惧怕的程序

01:39:12.840 --> 01:39:14.440
就是惧怕的一种情绪

01:39:14.440 --> 01:39:15.040
惧怕什么呢

01:39:15.040 --> 01:39:15.880
惧怕英文

01:39:17.160 --> 01:39:17.600
有没有

01:39:18.120 --> 01:39:19.760
也没有就很惧怕英文的

01:39:19.760 --> 01:39:21.320
看到了全是英文

01:39:21.320 --> 01:39:22.520
然后脑袋又大了

01:39:22.520 --> 01:39:24.920
就是已经没有办法思考了

01:39:24.920 --> 01:39:27.400
完全不想听老师在讲什么了

01:39:27.400 --> 01:39:28.360
就盯着这个单词

01:39:28.360 --> 01:39:29.080
怎么这么可怕

01:39:29.080 --> 01:39:30.000
怎么这个不可怕

01:39:30.000 --> 01:39:31.480
整个一个半小时内

01:39:31.480 --> 01:39:33.200
脑袋里面只有出现这么一句话

01:39:33.200 --> 01:39:33.960
太可怕了

01:39:33.960 --> 01:39:34.840
全是英文

01:39:34.840 --> 01:39:35.440
太可怕了

01:39:37.040 --> 01:39:37.600
但是呢

01:39:37.600 --> 01:39:40.830
我告诉大家啊

01:39:40.830 --> 01:39:42.110
这个东西啊

01:39:42.230 --> 01:39:43.710
虽然说它是英文

01:39:43.710 --> 01:39:45.910
但是我从来没有让大家

01:39:45.910 --> 01:39:48.550
去理解这个单词的含义啊

01:39:48.550 --> 01:39:50.670
我没有让你去理解这个单词的含义啊

01:39:50.670 --> 01:39:51.390
比方这里东西

01:39:51.390 --> 01:39:53.390
我告诉他就是一个名字

01:39:53.390 --> 01:39:55.350
他只是你取得一个名字而已

01:39:57.030 --> 01:39:59.230
因此我觉得很多初学者

01:39:59.230 --> 01:40:00.590
学程序的时候呢

01:40:01.470 --> 01:40:03.750
他不是说他学不懂

01:40:03.750 --> 01:40:05.270
他是因为心里边有一种

01:40:05.270 --> 01:40:06.750
惧怕的情绪

01:40:06.750 --> 01:40:07.910
就非常害怕

01:40:07.910 --> 01:40:10.310
当你害怕了一个东西的时候

01:40:10.310 --> 01:40:11.630
他就是一坨屎

01:40:11.630 --> 01:40:12.790
你都害怕他

01:40:12.790 --> 01:40:14.230
你都搞不懂他

01:40:14.230 --> 01:40:15.310
他再简单

01:40:15.310 --> 01:40:17.510
再容易都搞不懂他

01:40:17.510 --> 01:40:18.590
因为你害怕他呀

01:40:21.070 --> 01:40:22.510
有好像你们玩游戏的时候

01:40:23.990 --> 01:40:24.670
有的时候呢

01:40:24.670 --> 01:40:25.510
给你打出两个字

01:40:25.510 --> 01:40:25.910
收漏

01:40:26.630 --> 01:40:27.150
对吧

01:40:27.150 --> 01:40:28.510
他其实很菜的

01:40:28.510 --> 01:40:29.390
他特别特别菜的

01:40:29.390 --> 01:40:31.030
你轻松就把他打赢了

01:40:31.030 --> 01:40:31.430
但是呢

01:40:31.430 --> 01:40:32.550
由于你去怕他

01:40:32.550 --> 01:40:33.830
你根本就不敢打

01:40:33.830 --> 01:40:34.590
你打着不敢打

01:40:34.590 --> 01:40:35.750
怎么能赢呢

01:40:35.750 --> 01:40:36.510
就赢不了

01:40:37.670 --> 01:40:38.710
这个东西跟英文

01:40:38.710 --> 01:40:39.990
其实没有什么关系

01:40:41.110 --> 01:40:41.670
你看啊

01:40:41.670 --> 01:40:42.190
我告诉他

01:40:42.190 --> 01:40:43.030
为什么

01:40:43.030 --> 01:40:44.110
学不懂英文

01:40:44.110 --> 01:40:45.150
他也能学

01:40:45.150 --> 01:40:45.670
我告诉他

01:40:45.670 --> 01:40:46.870
就这个程序来看

01:40:47.910 --> 01:40:48.470
我告诉你

01:40:48.470 --> 01:40:49.990
这是一个定义一个函数

01:40:49.990 --> 01:40:51.230
你先不要看这个代码

01:40:51.230 --> 01:40:52.830
你就想这是定义一个函数

01:40:52.830 --> 01:40:53.870
定义的函数是干嘛的

01:40:55.510 --> 01:40:57.430
创造一个机器人

01:40:57.430 --> 01:40:58.550
能理解吗

01:40:58.550 --> 01:40:59.590
我相信我这样解释

01:40:59.590 --> 01:41:00.990
不可能理解不了吧

01:41:01.910 --> 01:41:02.230
对吧

01:41:02.230 --> 01:41:02.990
他创造一个机器

01:41:02.990 --> 01:41:04.070
可以帮你干活了

01:41:05.110 --> 01:41:05.990
那么现在的问题是

01:41:05.990 --> 01:41:08.510
怎么去定义的问题呢

01:41:08.510 --> 01:41:09.590
怎么定义呢

01:41:09.590 --> 01:41:12.590
我就让你去写出这个词

01:41:12.590 --> 01:41:14.070
你不认识他没关系

01:41:14.070 --> 01:41:16.470
你没有看过这个单词没关系

01:41:16.470 --> 01:41:18.110
一个单词

01:41:18.110 --> 01:41:19.670
按键盘的F

01:41:19.670 --> 01:41:23.550
按键盘的U-N-C-T-I-O-N

01:41:23.550 --> 01:41:24.950
你就花五分钟嘛

01:41:24.950 --> 01:41:27.350
你五分钟能不能把这个单词写出来

01:41:27.350 --> 01:41:28.350
你甭管他事啥

01:41:28.350 --> 01:41:29.790
我就让你定义函数的时候

01:41:29.790 --> 01:41:30.950
必须要写这个单词

01:41:32.430 --> 01:41:33.670
它的关键字

01:41:33.670 --> 01:41:34.950
是必须要写的

01:41:34.950 --> 01:41:36.430
就跟你写了个CSS的

01:41:36.430 --> 01:41:38.110
所以不是要写color吗

01:41:38.150 --> 01:41:40.270
现在学到这几天的CSS

01:41:40.270 --> 01:41:42.150
没有人不会用color吧

01:41:42.150 --> 01:41:43.710
应该没有人吧

01:41:43.710 --> 01:41:44.470
对吧

01:41:44.470 --> 01:41:46.470
你之前没有接触过这个玩意儿

01:41:46.470 --> 01:41:47.550
没有怎么接触过这个单词

01:41:47.550 --> 01:41:48.790
现在不也会用了吗

01:41:48.790 --> 01:41:50.910
没有人不会用这个吧

01:41:50.910 --> 01:41:52.350
之前没有怎么接触过

01:41:52.350 --> 01:41:53.870
现在不也会用了吗

01:41:53.870 --> 01:41:54.590
对不对

01:41:54.590 --> 01:41:56.150
你不用知道它什么

01:41:56.150 --> 01:41:57.230
它这个单词是什么

01:41:57.230 --> 01:41:59.990
但是你仍然可以写它呀

01:41:59.990 --> 01:42:01.150
写出来是不是个函数定义的

01:42:01.150 --> 01:42:02.590
后面取个名字

01:42:02.590 --> 01:42:03.750
名字你随便取

01:42:03.750 --> 01:42:04.990
名字我不知道单词

01:42:04.990 --> 01:42:07.630
百度翻译啊

01:42:07.630 --> 01:42:11.860
是不是是及格来吧

01:42:11.860 --> 01:42:13.380
无非就是多花一点时间

01:42:13.380 --> 01:42:15.300
哦对还有还有很多初学者

01:42:15.300 --> 01:42:17.500
还有一个很大的心理问题就是

01:42:17.500 --> 01:42:19.660
不怕麻烦

01:42:19.660 --> 01:42:22.300
我觉得这个这个心理现象是很不要不得的

01:42:22.300 --> 01:42:24.940
在程序世界里面是绝对不能怕麻烦的

01:42:24.940 --> 01:42:26.300
我们是哪里有麻烦

01:42:26.300 --> 01:42:27.580
哪里就是我们上的

01:42:27.580 --> 01:42:28.820
我们是解决麻烦的

01:42:28.820 --> 01:42:31.380
全世界的麻烦都要靠我们来解决

01:42:31.380 --> 01:42:34.020
你看现在的用户越来越难了

01:42:34.020 --> 01:42:35.140
天天抱怨这个程序

01:42:35.140 --> 01:42:36.220
这个不好用那个不好用

01:42:36.220 --> 01:42:37.380
天天要用户体验

01:42:37.420 --> 01:42:39.500
所谓的麻烦事情都有我们麻烦解决

01:42:39.500 --> 01:42:41.900
我们是要赢这麻烦上的

01:42:41.900 --> 01:42:43.780
不能怕麻烦啊

01:42:43.780 --> 01:42:45.580
这个这个地方

01:42:45.580 --> 01:42:49.140
是不是白度翻译

01:42:49.140 --> 01:42:50.500
这慢一点无所谓的吧

01:42:50.500 --> 01:42:52.460
一开始初学我慢一点怕什么呢

01:42:52.460 --> 01:42:53.300
我又不能可能

01:42:53.300 --> 01:42:54.860
我不可能说一开始初学的时候

01:42:54.860 --> 01:42:56.060
我像那种

01:42:56.060 --> 01:42:57.260
写到好几年程序了

01:42:57.260 --> 01:42:58.420
这种速度来写的

01:42:58.420 --> 01:42:59.780
那是不可能的

01:42:59.780 --> 01:43:01.820
你自己要有知识知名

01:43:01.820 --> 01:43:02.900
一直PASS

01:43:02.900 --> 01:43:04.180
不不不

01:43:04.180 --> 01:43:07.020
是不是及格

01:43:07.060 --> 01:43:08.620
PASS or NOT

01:43:08.620 --> 01:43:09.420
挺好的对不对

01:43:09.420 --> 01:43:11.060
三个单词PASS or NOT

01:43:11.060 --> 01:43:12.420
那我这里咋写

01:43:12.420 --> 01:43:14.220
我这里就这样子写

01:43:14.220 --> 01:43:17.420
然后元老师说要用陀峰命名法

01:43:17.420 --> 01:43:19.820
我就不知道这里边有哪什么难的命名

01:43:19.820 --> 01:43:20.780
记得单词小写

01:43:20.780 --> 01:43:22.060
记得单词大写

01:43:22.060 --> 01:43:23.980
第三个单词手这么大写

01:43:23.980 --> 01:43:24.980
对吧

01:43:24.980 --> 01:43:29.930
好分数我不知道怎么写分数

01:43:29.930 --> 01:43:31.570
这是那个

01:43:31.570 --> 01:43:32.890
这是数学里面的分数

01:43:32.890 --> 01:43:34.530
不是那个分数

01:43:34.530 --> 01:43:37.490
叫得分

01:43:37.490 --> 01:43:38.530
哪怕一开始不知道

01:43:38.610 --> 01:43:39.410
也没关系

01:43:39.410 --> 01:43:40.330
随便用什么单词都可以

01:43:40.330 --> 01:43:41.930
哪怕用拼音都可以

01:43:41.930 --> 01:43:42.770
用拼音都可以

01:43:42.770 --> 01:43:43.410
十个

01:43:43.410 --> 01:43:44.850
好了是不是写到这

01:43:44.850 --> 01:43:47.490
然后在这里边是把按照逻辑去写了

01:43:47.490 --> 01:43:49.730
你至少要听懂逻辑

01:43:49.730 --> 01:43:50.810
如果说逻辑听不懂的话

01:43:50.810 --> 01:43:52.010
得要多看几遍

01:43:52.010 --> 01:43:53.170
逻辑要听得懂

01:43:53.170 --> 01:43:55.130
单词是小问题

01:43:55.130 --> 01:43:56.290
单词真的是小问题

01:43:56.290 --> 01:43:57.570
这里有多少个声单词呢

01:43:57.570 --> 01:43:58.850
这个单词你不用去背它

01:43:58.850 --> 01:44:00.090
不会写的时候

01:44:00.090 --> 01:44:02.010
没有任何一个

01:44:02.010 --> 01:44:03.890
老师会让你去背程序

01:44:03.890 --> 01:44:04.730
没有的

01:44:04.730 --> 01:44:06.050
全世界都找不出来一个老师

01:44:06.050 --> 01:44:08.210
会让你去背程序

01:44:08.290 --> 01:44:08.810
背程序

01:44:08.810 --> 01:44:10.810
如果说遇到让你去背程序的老师

01:44:10.810 --> 01:44:12.650
我就不知道是什么了

01:44:12.650 --> 01:44:13.850
这里应该是

01:44:13.850 --> 01:44:15.410
这么一个这么去敲出来

01:44:15.410 --> 01:44:16.610
一看不懂的话

01:44:16.610 --> 01:44:18.210
就把视频打开

01:44:18.210 --> 01:44:19.650
袁老师这里写的是一个R

01:44:19.650 --> 01:44:20.490
我也写个R

01:44:20.490 --> 01:44:21.610
这里写到一个E

01:44:21.610 --> 01:44:22.690
就是一个E

01:44:22.690 --> 01:44:24.410
他的名字袁老师说叫做Return

01:44:24.410 --> 01:44:25.370
我也忘了他叫啥了

01:44:25.370 --> 01:44:25.690
无所谓

01:44:25.690 --> 01:44:27.810
我们就把他叫做Return

01:44:27.810 --> 01:44:30.050
随便一写多了

01:44:30.050 --> 01:44:31.450
你慢慢就知道他是

01:44:31.450 --> 01:44:32.850
你慢慢就熟练了

01:44:32.850 --> 01:44:33.730
像这些单词

01:44:33.730 --> 01:44:35.130
你开始都不知道他什么意思

01:44:35.130 --> 01:44:36.810
写着写着就知道他什么意思了

01:44:36.850 --> 01:44:37.810
其实并不难的

01:44:39.250 --> 01:44:40.050
其实并不难的

01:44:42.250 --> 01:44:43.290
拿成背程序

01:44:43.290 --> 01:44:44.450
程序是绝对不能背的

01:44:44.450 --> 01:44:45.730
背的就成傻了

01:44:45.730 --> 01:44:46.730
就成那傻了

01:44:46.730 --> 01:44:47.450
傻

01:44:47.450 --> 01:44:48.130
那个傻叉了

01:44:48.130 --> 01:44:48.770
对吧

01:44:48.770 --> 01:44:50.410
不能真的不能背程序的

01:44:50.410 --> 01:44:54.620
要去理解

01:44:54.620 --> 01:44:56.420
毕竟也马上发给你们

01:44:56.420 --> 01:44:58.340
马上发给你们

01:44:58.340 --> 01:44:59.620
我这里一下先就发给你们

01:44:59.620 --> 01:45:00.060
好了

01:45:00.060 --> 01:45:01.540
因为我这里没有上微信

01:45:01.540 --> 01:45:03.060
微信的另外一台电脑上

01:45:03.060 --> 01:45:03.900
我一会就

01:45:03.900 --> 01:45:05.340
我这里一下课就发给你们

01:45:07.460 --> 01:45:08.940
我那间是在后几个

01:45:09.140 --> 01:45:10.340
其实不用怕单词的

01:45:10.340 --> 01:45:11.340
真的不用怕单词

01:45:11.340 --> 01:45:14.920
你以后看到这种声单词

01:45:14.920 --> 01:45:16.520
你就心里面就这样子开到自己

01:45:17.400 --> 01:45:18.840
老子无非就是一个字母一个字母

01:45:18.840 --> 01:45:19.960
把桥出来吧

01:45:19.960 --> 01:45:20.560
怕啥呢

01:45:20.560 --> 01:45:21.560
我都不知道他啥意思

01:45:21.560 --> 01:45:22.760
我不用知道他啥意思

01:45:22.760 --> 01:45:24.880
我知道知道他整体什么意思就行了

01:45:24.880 --> 01:45:26.520
我知道他的中文意思就行了

01:45:26.520 --> 01:45:29.120
我这里知道什么叫定义一个函数

01:45:29.120 --> 01:45:30.680
定义函数一开始就得这么写

01:45:30.680 --> 01:45:31.960
我就这样子去想呗

01:45:31.960 --> 01:45:33.240
这个单词我忘了没关系

01:45:33.240 --> 01:45:35.560
我用一个字母招到视频一个个桥

01:45:35.560 --> 01:45:37.960
我不相信一个个桥

01:45:38.760 --> 01:45:40.960
我不相信一个个桥

01:45:40.960 --> 01:45:41.960
他只是麻烦

01:45:41.960 --> 01:45:43.760
他绝对不复杂

01:45:43.760 --> 01:45:46.160
我就不相信有同学招到这个视频

01:45:46.160 --> 01:45:48.160
他敲不出来这个单词

01:45:48.160 --> 01:45:49.260
我就不相信这一点

01:45:49.260 --> 01:45:50.360
很多人是怕麻烦

01:45:50.360 --> 01:45:52.560
但是咱们这个行业是不能怕麻烦的

01:45:52.560 --> 01:45:53.260
是不能怕麻烦的

01:45:53.260 --> 01:45:55.160
绝对不能怕麻烦的

01:45:55.160 --> 01:45:57.360
全世界最麻烦的是到靠我们解决

01:45:57.360 --> 01:46:00.000
兄弟

01:46:00.000 --> 01:46:00.600
你的笔记

01:46:00.600 --> 01:46:02.200
ATM4S的我想看

01:46:02.200 --> 01:46:02.700
我知道啊

01:46:02.700 --> 01:46:04.600
我知道我一会会发下来的啊

01:46:04.600 --> 01:46:05.800
都在这里面就在这

01:46:05.800 --> 01:46:07.200
这个前端

01:46:07.400 --> 01:46:07.800
基础啊

01:46:07.800 --> 01:46:08.500
这个这个PPT

01:46:08.500 --> 01:46:09.700
我今天好像没用到

01:46:09.700 --> 01:46:11.100
没用到就关了

01:46:11.100 --> 01:46:12.800
发生了

01:46:12.800 --> 01:46:13.400
在这啊

01:46:13.400 --> 01:46:15.800
我一会就可以发下来啊

01:46:15.800 --> 01:46:17.700
我今天晚上是试用了这个吧

01:46:17.700 --> 01:46:19.600
我看一下打开看一下

01:46:19.600 --> 01:46:21.800
别的话发错了

01:46:21.800 --> 01:46:23.400
一会就发

01:46:23.400 --> 01:46:25.100
我们聊了8分钟吧

01:46:25.100 --> 01:46:26.100
聊到10点钟

01:46:26.100 --> 01:46:26.600
聊10点钟

01:46:26.600 --> 01:46:27.800
我也休息了

01:46:31.600 --> 01:46:33.000
要走的同学可以走了

01:46:33.000 --> 01:46:33.500
可以走了

01:46:33.500 --> 01:46:34.400
今天小姐也不知道好了

01:46:34.400 --> 01:46:35.300
跑了去了

01:46:35.300 --> 01:46:36.500
可能出去打野去了吧

01:46:36.600 --> 01:46:37.100
我也不知道

01:46:41.600 --> 01:46:42.400
嗯

01:46:42.400 --> 01:46:43.100
还有问题吗

01:46:43.100 --> 01:46:43.700
都一有

01:46:43.700 --> 01:46:45.700
我说这接客也肯定有

01:46:45.700 --> 01:46:46.700
肯定有

01:46:46.700 --> 01:46:48.200
我都觉得咱们都一接客

01:46:48.200 --> 01:46:49.400
讲的太多了

01:46:49.400 --> 01:46:50.300
讲太多了

01:46:50.300 --> 01:46:52.500
我是觉得没有必要讲那么多

01:46:52.500 --> 01:46:54.300
就怕你们不够用

01:46:54.300 --> 01:46:54.900
嗯

01:46:54.900 --> 01:46:56.700
讲太多了

01:46:56.700 --> 01:46:57.200
明天啊

01:46:57.200 --> 01:46:58.100
明天我们去

01:46:58.100 --> 01:46:58.700
不是说了吗

01:46:58.700 --> 01:47:00.300
今天我们讲的是怎么去说话

01:47:00.300 --> 01:47:01.100
对吧

01:47:01.100 --> 01:47:02.100
我们明天怎么讲

01:47:02.100 --> 01:47:04.200
怎么带浏览器你们去说啊

01:47:04.200 --> 01:47:06.300
让浏览器懂我们的意思

01:47:06.400 --> 01:47:08.900
让浏览器去做我们想做的事情

01:47:10.400 --> 01:47:12.400
我现在不怎么玩游戏了啊

01:47:12.400 --> 01:47:14.200
也没有什么时间玩游戏了

01:47:14.200 --> 01:47:16.100
以前倒是喜欢玩那个

01:47:16.100 --> 01:47:17.200
那个英雄联盟

01:47:18.200 --> 01:47:20.200
打看了半天的高手视频

01:47:20.200 --> 01:47:22.100
结果打了青桶还是青桶

01:47:23.300 --> 01:47:23.800
嗯

01:47:24.800 --> 01:47:25.500
讲话再讲

01:47:25.500 --> 01:47:26.400
但是呢

01:47:26.400 --> 01:47:27.100
这个讲话啊

01:47:27.100 --> 01:47:29.600
我这人是确实这个时间啊

01:47:30.600 --> 01:47:32.400
这个时间我确实忙不过来了啊

01:47:32.400 --> 01:47:33.500
确实忙不过来了

01:47:34.000 --> 01:47:34.540
嗯

01:47:34.540 --> 01:47:36.840
讲话我没有讲我没有讲后期的课啊

01:47:36.840 --> 01:47:39.440
我就是现在录一个加瓦的前期的课啊

01:47:40.040 --> 01:47:40.540
嗯

01:47:40.540 --> 01:47:41.340
数学五确实

01:47:41.340 --> 01:47:43.440
我前的肯定是中底还是在前端这边

01:47:44.040 --> 01:47:45.140
中底还是在前端这边

01:47:47.820 --> 01:47:48.020
嗯

01:47:48.020 --> 01:47:48.920
我再教你前端

01:47:48.920 --> 01:47:49.420
外置同学

01:47:49.420 --> 01:47:50.420
我不再教你前端了

01:47:50.420 --> 01:47:51.920
我现在不在干嘛呢

01:47:51.920 --> 01:47:53.520
你不用带我大纸上网子啊

01:47:54.320 --> 01:47:55.020
嗯

01:47:57.460 --> 01:47:58.060
嗯

01:47:58.360 --> 01:48:00.060
我讲的介绍课在后期啊

01:48:00.060 --> 01:48:01.960
在后期付费课程里面

01:48:02.860 --> 01:48:04.060
为什么S

01:48:04.960 --> 01:48:06.060
等于方科系

01:48:06.860 --> 01:48:07.860
这些东西啊

01:48:07.860 --> 01:48:09.160
这些那个九公尺啊

01:48:09.860 --> 01:48:11.060
这些细节问题啊

01:48:11.060 --> 01:48:12.660
细节问题你直接去看成个的

01:48:12.860 --> 01:48:13.860
成个的介绍啊

01:48:13.860 --> 01:48:15.060
里面都是有讲道的

01:48:15.860 --> 01:48:16.660
都是有讲道的

01:48:16.660 --> 01:48:17.060
知道吧

01:48:19.350 --> 01:48:20.950
这些细节问题我们这些人不看了啊

01:48:20.950 --> 01:48:24.250
因为毕竟有很多同学已经快遗遥云了啊

01:48:24.250 --> 01:48:26.650
所以你看我现在今天也学过的介绍同学

01:48:26.650 --> 01:48:27.350
就看到了

01:48:27.350 --> 01:48:28.950
今天写的大码都是很小心的

01:48:28.950 --> 01:48:30.950
尽量避免那种复杂的出现啊

01:48:32.750 --> 01:48:33.550
嗯

01:48:33.550 --> 01:48:34.050
ok

01:48:34.550 --> 01:48:35.550
那今天我们就到这吧

01:48:35.550 --> 01:48:35.950
啊

01:48:35.950 --> 01:48:36.550
到这吧

01:48:36.950 --> 01:48:38.850
让你们下去好好消化消化

01:48:39.050 --> 01:48:39.450
好吧

01:48:40.350 --> 01:48:43.050
我然后我下课之后就把东西发到那个

01:48:43.350 --> 01:48:44.550
发给那个毛利卡

01:48:44.550 --> 01:48:45.850
让他跑到群里面去啊

01:48:46.150 --> 01:48:47.650
好今天就到这拜拜

