WEBVTT

00:00.300 --> 00:03.300
我先把系统声音关了

00:03.300 --> 00:05.800
不然的话无线的重复回音

00:11.970 --> 00:13.970
那行吧 我就直接上课吧

00:13.970 --> 00:14.970
应该是你那边

00:14.970 --> 00:17.970
生卡 就是外置生卡的输出的问题

00:20.790 --> 00:23.790
莫莉卡调一下吧 那莫莉卡调一下

00:23.790 --> 00:25.790
咱们就稍微聊两句 直接上课吧

00:25.790 --> 00:27.790
我现在我也听到自己的声音了

00:27.790 --> 00:29.790
你们听不到我听到自己的声音

00:29.790 --> 00:31.790
太恐怖了 无线重复

00:32.790 --> 00:33.790
太可怕了

00:33.790 --> 00:36.790
我再把那个歪歪给关掉了

00:36.790 --> 00:45.030
现在屏幕清晰了吧

00:45.030 --> 00:47.030
现在一切时间安静了吧

00:47.030 --> 00:48.030
可以了吧

00:51.340 --> 00:54.340
好 那咱们之后

00:54.340 --> 00:56.340
人还没来齐啊

00:56.340 --> 00:59.340
人还没来齐 要不然再聊几块钱的

00:59.340 --> 01:01.340
聊几块钱的稍微等一下

01:01.340 --> 01:02.340
稍微等一下

01:02.340 --> 01:05.340
咱们之后得找点来啊 同学们得找点来

01:05.340 --> 01:08.340
之后我们会在8点提前几分钟吧

01:08.340 --> 01:11.340
8点之前开直播

01:11.340 --> 01:13.340
然后呢 讲不了多久啊

01:13.340 --> 01:16.340
随便瞎聊几句 然后就开始上课了

01:16.340 --> 01:18.340
我们过去呢 都是8点10分上课 是吧

01:18.340 --> 01:21.340
那现在呢 可能要稍微稍微的提前一点

01:21.340 --> 01:24.340
因为一讲的东西比较多啊

01:24.340 --> 01:25.340
今天讲什么呢

01:25.340 --> 01:27.340
今天讲五幼啊

01:27.340 --> 01:29.340
六天时间啊 六天时间

01:29.340 --> 01:31.340
咱们把这个五幼就

01:31.340 --> 01:33.340
全部所有的东西啊

01:33.340 --> 01:35.340
五幼全家同里边的东西就讲完

01:36.340 --> 01:38.340
不用准备啥 你就来就行了

01:38.340 --> 01:40.340
人来就行了 你不用准备啥

01:41.340 --> 01:44.340
不是零技术啊

01:44.340 --> 01:46.340
你说你ATM和CSS都没有学

01:46.340 --> 01:48.340
你JS都没有学 你还听五幼

01:48.340 --> 01:50.340
那不扯淡吗

01:50.340 --> 01:52.340
对 要讲全家同 要讲全家同

01:52.340 --> 01:54.340
不是零技术啊

01:54.340 --> 01:57.340
前置知识啊 我就给大家写到屏幕上

01:58.340 --> 02:00.340
不说准备能听得懂

02:00.340 --> 02:02.340
因为五幼它本来就不难

02:02.340 --> 02:05.340
前置知识给它写字啊

02:05.340 --> 02:07.340
你之前得学过一些知识

02:07.340 --> 02:08.340
学过啥呢

02:08.340 --> 02:10.340
ATM和CSS

02:12.340 --> 02:14.340
还在学过什么JS

02:14.340 --> 02:18.340
JS里面是包含包括ES6

02:18.340 --> 02:22.040
声音有点小

02:22.040 --> 02:23.040
小吗

02:23.040 --> 02:27.440
别看着瞧

02:27.440 --> 02:28.440
别跟着瞧

02:28.440 --> 02:30.440
我不太建议这样的学习方式

02:30.440 --> 02:32.440
反正我个人不太建议

02:32.440 --> 02:34.440
我对我的学生都是讲的

02:34.440 --> 02:35.440
你好好听

02:35.440 --> 02:37.440
你认真去理解老师的思路和逻辑

02:37.440 --> 02:39.440
把逻辑理清楚理顺

02:39.440 --> 02:41.440
然后听完了过后再慢慢去敲

02:41.440 --> 02:43.440
你可能听一个半小时

02:43.440 --> 02:46.440
然后去敲了五个小时都无所谓

02:46.440 --> 02:48.440
这样子的对人帮助更大

02:48.440 --> 02:50.440
你不要看着一句敲一句

02:50.440 --> 02:51.440
这样子学下来

02:51.440 --> 02:53.440
其实你没有接受到什么东西

02:54.440 --> 02:55.440
记笔记的话

02:55.440 --> 02:57.440
其实我会给你们写笔记

02:57.440 --> 02:59.440
因为我讲的过程中

02:59.440 --> 03:00.440
如果你听过之前的课的话

03:00.440 --> 03:02.440
你知道我讲过的过程中

03:02.440 --> 03:03.440
我会给你们写笔记

03:03.440 --> 03:04.440
写完笔记的话

03:04.440 --> 03:06.440
就每天的课程完了之后呢

03:06.440 --> 03:08.440
大家可以掃那个屏幕

03:08.440 --> 03:10.440
一物下角的二维码

03:10.440 --> 03:11.440
能看见吗

03:11.440 --> 03:12.440
屏幕右下角的二维码

03:12.440 --> 03:14.440
少嘛然后呢加群

03:14.440 --> 03:17.440
然后我们在群里面会把那个就是

03:17.440 --> 03:20.440
那个我每天讲课的圆码呀

03:20.440 --> 03:21.440
笔记啊这些东西

03:21.440 --> 03:23.440
效果呀练习啊这些全部给

03:23.440 --> 03:25.440
全部给你们发下来

03:26.440 --> 03:28.440
有没有路播要问莫莉卡

03:28.440 --> 03:29.440
我不太清楚

03:29.440 --> 03:31.440
有没有路播要问莫莉卡

03:35.010 --> 03:39.010
ES6也就会个啥基础啥的

03:41.010 --> 03:42.010
基础啥你指啥呢

03:42.010 --> 03:44.010
ES6里边就是

03:44.010 --> 03:47.010
像什么箭头函数你得会啊

03:47.010 --> 03:50.010
箭头函数其实不会也无问题我想想

03:50.010 --> 03:52.010
还是会影响一些东西

03:52.010 --> 03:54.010
箭头函数你得会

03:54.010 --> 03:56.010
然后的话那个方法的

03:56.010 --> 03:59.010
数写你得会数写方法你得会

04:00.010 --> 04:02.010
这其实也没多少东西啊

04:02.010 --> 04:03.010
东西还是多

04:03.010 --> 04:05.010
但是呢你需要你会的也没多少

04:05.010 --> 04:07.010
你得会这两个东西

04:07.010 --> 04:09.010
如果说你之前学过

04:09.010 --> 04:11.010
这个结块位的话更好

04:11.010 --> 04:13.010
尽管呢我们这个课呢

04:13.010 --> 04:15.010
也没有用到什么结块位

04:15.010 --> 04:17.010
只不过你学了结块位呢

04:17.010 --> 04:20.010
对你的思维逻辑呢是有一些锻炼的啊

04:20.010 --> 04:23.010
你的认识呢你对这个前端的认知呢

04:23.010 --> 04:25.010
会更多一点啊

04:25.010 --> 04:27.010
如果你学过学过结块位的话

04:27.010 --> 04:28.010
更好一点

04:28.010 --> 04:30.010
没有画面没有画面的话

04:30.010 --> 04:33.010
咱们你就去刷新一下页面啊

04:33.010 --> 04:35.010
刷新一下页面就差不多了

04:35.010 --> 04:37.010
怎么学习结块位啊

04:37.010 --> 04:41.580
咱们独一的课程里边就有结块而已

04:42.580 --> 04:44.580
差不多了啊

04:45.580 --> 04:47.580
那咱们就开始了

04:47.580 --> 04:50.580
八点过五分了咱们就开始啊

04:50.580 --> 04:52.580
做成我们的第一天啊

04:52.580 --> 04:53.580
第一天

04:53.580 --> 04:56.580
再说一次拿圆码的话少二维码啊

04:57.580 --> 05:00.580
我们就是打算用六天时间

05:00.580 --> 05:02.580
把这个五一六里边的所有东西

05:02.580 --> 05:04.580
能给他讲完

05:04.580 --> 05:06.580
六天时间我们规划了一下啊

05:06.580 --> 05:09.580
应该差不多把这个东西讲完

05:09.580 --> 05:12.580
每天大概的时间是一个半小时

05:12.580 --> 05:14.580
为什么要说讲这个五一六呢

05:14.580 --> 05:16.580
这里呢我们今天第一节课啊

05:16.580 --> 05:19.580
今天咱们第一节课五一六就从零开始讲

05:19.580 --> 05:21.580
当然呢我们说的刚才说的前置知识理的会啊

05:21.580 --> 05:23.580
前置知识理的会

05:23.580 --> 05:24.580
从零开始讲

05:24.580 --> 05:25.580
讲这个五一六之前呢

05:25.580 --> 05:27.580
我们首先来给大家解答一下问题

05:27.580 --> 05:30.580
因为以前呢也有很多的学生呢

05:30.580 --> 05:32.580
在问这些问题啊

05:32.580 --> 05:34.580
我就统一的给大家解答一下

05:34.580 --> 05:36.580
首先第一个问题呢就是

05:36.580 --> 05:39.580
为什么要学习无忧

05:39.580 --> 05:41.580
就是可能你之前呢

05:41.580 --> 05:43.580
在做前端开发的时候

05:43.580 --> 05:45.580
平时我们讲一些

05:45.580 --> 05:46.580
公开课

05:46.580 --> 05:48.580
还有诚哥的公益课程里边

05:48.580 --> 05:50.580
都说到了怎么ATIMA和CSS

05:50.580 --> 05:51.580
GSS对吧

05:51.580 --> 05:53.580
这是前端的三板斧

05:53.580 --> 05:55.580
学会了这三个东西你就能做

05:55.580 --> 05:56.580
做效果出来了

05:56.580 --> 05:58.580
平时我们讲公开直播课的时候呢

05:58.580 --> 06:00.580
也主要是做一些小的效果

06:00.580 --> 06:02.580
做一些小的练习

06:02.580 --> 06:03.580
那么要用到的知识呢

06:03.580 --> 06:05.580
其实就是ATIMA和CSS

06:05.580 --> 06:08.580
以及原生的GSS就完全足够了

06:08.580 --> 06:10.580
那我们能够做一些小的效果出来了

06:10.580 --> 06:13.580
为什么还要学习无忧呢

06:13.580 --> 06:15.580
那么无忧它到底能够解决

06:15.580 --> 06:17.580
什么样的问题呢

06:17.580 --> 06:19.580
其实无忧能够解决的最大的问题

06:19.580 --> 06:23.580
就是它能够降低项目的复杂度

06:23.580 --> 06:24.580
你看这个笔记

06:24.580 --> 06:25.580
我给你记得很详细了

06:25.580 --> 06:26.580
你们就听就行了

06:26.580 --> 06:27.580
好好听 认真听

06:27.580 --> 06:29.580
不要走成

06:29.580 --> 06:32.580
降低项目的复杂度

06:32.580 --> 06:35.580
其实我们之前在公开课里边的时候

06:35.580 --> 06:36.580
因为时间有限

06:36.580 --> 06:37.580
只有一个半小时

06:37.580 --> 06:38.580
也不能连着讲

06:38.580 --> 06:40.580
因为有些同学今天来了

06:40.580 --> 06:41.580
可能明天就没来

06:41.580 --> 06:43.580
所以说我们都没有什么连贯性的

06:43.580 --> 06:46.580
因此我们每一个效果的都是独立的

06:46.580 --> 06:48.580
但实际上你们以后在公司里边

06:48.580 --> 06:50.580
去开发一些项目的时候

06:50.580 --> 06:54.580
很多效果之间关联的是比较多的

06:54.580 --> 06:56.580
有很多很多的关联

06:56.580 --> 06:58.580
我给大家随便看一个页面吧

06:58.580 --> 06:59.580
随便看一个页面

06:59.580 --> 07:02.580
当一个项目变得复杂的时候

07:02.580 --> 07:04.580
你会发现就会出现很多的问题

07:04.580 --> 07:06.580
你就不知道该怎么下手了

07:06.580 --> 07:09.580
我给大家看一下这个微博

07:09.580 --> 07:12.580
这是我也经常给大家举的一个例子

07:12.580 --> 07:15.580
微博这个页面非常具有代表性

07:15.580 --> 07:19.890
来吧 你就想吧

07:19.890 --> 07:21.890
我就给你看这个页面的功能

07:21.890 --> 07:22.890
你就想象一下

07:22.890 --> 07:25.890
如果说你用原生的GS和ATM和CSS

07:25.890 --> 07:27.890
来写这个页面

07:27.890 --> 07:29.890
你得多劳火 来吧

07:29.890 --> 07:31.890
这个菜单

07:31.890 --> 07:32.890
这个菜单

07:32.890 --> 07:34.890
比如说菜单吗 这个简单呀

07:34.890 --> 07:35.890
这个表情

07:35.890 --> 07:37.890
表情里边还有菜单 还可以切换

07:37.890 --> 07:40.890
还可以翻页 这里

07:40.890 --> 07:42.890
还可以翻

07:42.890 --> 07:43.890
然后点击表情

07:43.890 --> 07:45.890
文闷框里边出现两个字

07:45.890 --> 07:46.890
一发布出去

07:46.890 --> 07:48.890
它就变成具体的表情了

07:48.890 --> 07:51.890
我发布一个吧

07:51.890 --> 07:53.890
就变成一个表情了

07:53.890 --> 07:54.890
然后我们这里

07:54.890 --> 07:56.890
按一下A塔键

07:56.890 --> 07:57.890
A塔键里边

07:57.890 --> 07:59.890
你看一下 是不是

07:59.890 --> 08:00.890
出了一个菜单

08:00.890 --> 08:02.890
对吧 又出来一个菜单

08:02.890 --> 08:03.890
咱们随便选一个

08:03.890 --> 08:04.890
出来个菜单

08:04.890 --> 08:05.890
那这个功能

08:05.890 --> 08:06.890
你是不是也得用GS实现

08:06.890 --> 08:08.890
这里要统计致述 你看了没

08:08.890 --> 08:10.890
这里要统计致述

08:10.890 --> 08:13.890
那么下面再来

08:13.890 --> 08:15.890
当我们指着它的时候

08:15.890 --> 08:16.890
指着它的时候

08:16.890 --> 08:17.890
你看 是不是正在夹载

08:17.890 --> 08:18.890
请稍后要弹出来

08:18.890 --> 08:19.890
这里要显示

08:19.890 --> 08:20.890
这些功能全都有

08:20.890 --> 08:21.890
这些功能全都有

08:21.890 --> 08:22.890
你看这里

08:22.890 --> 08:24.890
如果说你要用原生的GS

08:24.890 --> 08:26.890
实现这么一个玩意的话

08:26.890 --> 08:28.890
你看这

08:28.890 --> 08:29.890
都得显示

08:29.890 --> 08:30.890
只在头上都得显示

08:30.890 --> 08:31.890
你看这里还有功能

08:31.890 --> 08:32.890
还可以占取消占

08:32.890 --> 08:34.890
像这个页面

08:34.890 --> 08:36.890
哪怕你就不怕麻烦吧

08:36.890 --> 08:38.890
你把这个玩意做完了

08:38.890 --> 08:39.890
做完了之后

08:39.890 --> 08:40.890
我们再来看一下

08:40.890 --> 08:41.890
这里点我的收藏

08:41.890 --> 08:42.890
看着

08:42.890 --> 08:44.890
注意看页面有没有刷新

08:44.890 --> 08:45.890
注意看页面有没有刷新

08:45.890 --> 08:46.890
看哪

08:46.890 --> 08:47.890
你就看这

08:47.890 --> 08:48.890
看这个图标这

08:48.890 --> 08:49.890
看我手标

08:49.890 --> 08:50.890
看我这个图标这

08:50.890 --> 08:51.890
这个图标这

08:51.890 --> 08:52.890
这个小

08:52.890 --> 08:53.890
你看我刷新页面

08:53.890 --> 08:54.890
是不是在转

08:54.890 --> 08:56.890
它在重新请求服务器

08:56.890 --> 08:57.890
重新请求服务器

08:57.890 --> 08:59.890
然后拿到页面

08:59.890 --> 09:01.890
你看一下我这里点我的收藏

09:01.890 --> 09:02.890
页面有刷新吗

09:02.890 --> 09:03.890
再切回手页

09:03.890 --> 09:04.890
你看一下页面有刷新吗

09:04.890 --> 09:05.890
没有

09:05.890 --> 09:06.890
那我告诉你

09:06.890 --> 09:07.890
现在我告诉你

09:07.890 --> 09:08.890
这两个是一个页面

09:08.890 --> 09:10.890
是在一个页面里面做的

09:10.890 --> 09:12.890
它只是在用GS来切换

09:12.890 --> 09:16.890
切换区域的动物元素

09:16.890 --> 09:17.890
把之前的动物元素删掉

09:17.890 --> 09:19.890
然后重新新加动物元素

09:19.890 --> 09:20.890
而动物元素里面

09:20.890 --> 09:21.890
有各种各样的事件

09:21.890 --> 09:22.890
各种各样的嵌套

09:22.890 --> 09:25.890
像这么复杂的一个页面的话

09:25.890 --> 09:28.890
而且好像是多个页面

09:28.890 --> 09:30.890
多个页面把它组成一个页面

09:30.890 --> 09:32.890
全部用GS来控制

09:32.890 --> 09:34.890
那么这种情况下

09:34.890 --> 09:37.890
它的复杂度就一下子突破天际了

09:37.890 --> 09:39.890
如果你说还要用

09:39.890 --> 09:41.890
以前的那种方式开发

09:41.890 --> 09:43.890
就比较麻烦了

09:43.890 --> 09:44.890
所以说我们这几课

09:44.890 --> 09:48.890
为什么叫做颠覆式的开发方式呢

09:48.890 --> 09:50.890
就是要完全颠覆你对

09:50.890 --> 09:53.890
以前对那个

09:53.890 --> 09:56.890
就是开发的认知

09:56.890 --> 09:58.890
要把以前的开发认知

09:58.890 --> 09:59.890
得完全颠覆掉

09:59.890 --> 10:01.890
因为以前咱们学习

10:01.890 --> 10:04.890
原生的GS的

10:04.890 --> 10:05.890
我们关心的

10:05.890 --> 10:07.890
更多的时候关心的是什么呢

10:07.890 --> 10:10.890
关心的是动物元素

10:10.890 --> 10:11.890
关心的是动物元素

10:11.890 --> 10:12.890
就对动物元素处理

10:12.890 --> 10:13.890
怎么创建一个动物元素

10:13.890 --> 10:16.890
怎么给一个动物元素注册事件

10:16.890 --> 10:17.890
怎么去移出一个动物元素

10:17.890 --> 10:19.890
怎么去改变动物元素的结构

10:19.890 --> 10:20.890
对不对

10:20.890 --> 10:22.890
我们关心的是这些东西

10:22.890 --> 10:24.890
那么我们后边有可能学习了

10:24.890 --> 10:25.890
有些东西可能学习了

10:25.890 --> 10:27.890
学习了这个解query

10:27.890 --> 10:29.890
解query它有没有改变

10:29.890 --> 10:30.890
我们的开发方式呢

10:30.890 --> 10:32.890
实际上是没有的

10:32.890 --> 10:35.890
解query它只是简化了动物操作

10:35.890 --> 10:39.890
对解query来说只是简化了

10:39.890 --> 10:43.890
简化动物操作

10:43.890 --> 10:45.890
它只是简化动物操作而已

10:45.890 --> 10:46.890
它并没有改变

10:46.890 --> 10:47.890
我们的开发方式

10:47.890 --> 10:48.890
以前打开发

10:48.890 --> 10:49.890
后来还是打开发

10:49.890 --> 10:52.890
只不过你在对动物进行操作的时候

10:52.890 --> 10:53.890
更加方便的而已

10:53.890 --> 10:55.890
这是解query的作用

10:55.890 --> 10:58.890
那么当我们的前端不断的发展

10:58.890 --> 11:00.890
面对的项目的复杂度

11:00.890 --> 11:02.890
越来越高的时候

11:02.890 --> 11:03.890
有同学刚才提到了

11:03.890 --> 11:05.890
单页应用程序

11:05.890 --> 11:06.890
现在不是停火的吗

11:06.890 --> 11:08.890
就整个网站只有一个页面

11:08.890 --> 11:09.890
或者是某一个功能块

11:09.890 --> 11:11.890
它只有一个页面

11:11.890 --> 11:13.890
那么这个就是单页应用程序

11:13.890 --> 11:14.890
那么面对单页应用程序

11:14.890 --> 11:16.890
很多的数据动物元素

11:16.890 --> 11:18.890
全部需要GS来处理

11:18.890 --> 11:20.890
面对这种情况下

11:20.890 --> 11:22.890
你在用传统的开发模式

11:22.890 --> 11:24.890
就显得有点麻烦了

11:24.890 --> 11:27.890
因此5U它能够解决这样的问题

11:27.890 --> 11:29.890
它能够在复杂的系统里边

11:29.890 --> 11:30.890
降低这种复杂度

11:30.890 --> 11:32.890
这是我们的第一个原因

11:32.890 --> 11:34.890
为什么要学习5U

11:34.890 --> 11:36.890
也是因为这个原因

11:36.890 --> 11:39.890
5U目前在

11:39.890 --> 11:41.890
至少国内

11:41.890 --> 11:42.890
很多公司里边

11:42.890 --> 11:45.890
它都要求你要能够熟练掌握

11:45.890 --> 11:47.890
最好能够精通

11:47.890 --> 11:48.890
所以说

11:48.890 --> 11:50.890
第二个我们要学习5U的原因

11:50.890 --> 11:53.890
就是因为就业需要

11:53.890 --> 11:54.890
说到实在一点

11:54.890 --> 11:56.890
就就业需要

11:56.890 --> 11:58.890
我们你可以去boss职聘

11:58.890 --> 12:00.890
或者是什么招聘网站

12:00.890 --> 12:02.890
资联招聘上去随便

12:02.890 --> 12:04.890
收一个前端职位

12:04.890 --> 12:05.890
很多公司里会发现

12:05.890 --> 12:07.890
它都要求你熟练

12:07.890 --> 12:09.890
甚至精通5U

12:09.890 --> 12:11.890
这也是我们为什么要学习5U的

12:11.890 --> 12:12.890
一个原因

12:12.890 --> 12:13.890
当这个国内和国外的话

12:13.890 --> 12:15.890
到时候还是有点区别

12:15.890 --> 12:16.890
国外的话

12:16.890 --> 12:17.890
好像国外的社区里边

12:17.890 --> 12:20.890
对5U这个东西不是很感冒

12:20.890 --> 12:22.890
它们更加偏向于使用react

12:22.890 --> 12:24.890
所以说你我们后边会说

12:24.890 --> 12:25.890
你在就业的时候

12:25.890 --> 12:27.890
你为了更好的就业

12:27.890 --> 12:28.890
能够拿到高薪

12:28.890 --> 12:30.890
所以说5Ureact一个都跑不了

12:30.890 --> 12:31.890
都得学

12:31.890 --> 12:34.890
这就是关于为什么要学习5U

12:34.890 --> 12:35.890
再有啥问题

12:39.890 --> 12:41.890
然后呢

12:41.890 --> 12:42.890
难不难

12:42.890 --> 12:43.890
就是也是很多同学关心的

12:43.890 --> 12:44.890
有一个问题

12:44.890 --> 12:45.890
难不难

12:45.890 --> 12:46.890
我觉得一点都不难

12:46.890 --> 12:47.890
因为

12:47.890 --> 12:48.890
之前

12:48.890 --> 12:49.890
我觉得45年前

12:49.890 --> 12:52.890
我在学习5U的时候

12:52.890 --> 12:54.890
那个时候我就花了

12:54.890 --> 12:56.890
30分钟到40分钟

12:56.890 --> 12:58.890
快速的过了一下它的官方文档

12:58.890 --> 12:59.890
过了一下

12:59.890 --> 13:00.890
然后自己写了

13:00.890 --> 13:01.890
一个两个小词弦出来

13:01.890 --> 13:03.890
那么基本上就把5U掌握了

13:03.890 --> 13:04.890
所以说5U的话

13:04.890 --> 13:05.890
你这六天时间

13:05.890 --> 13:06.890
你跟着我学

13:06.890 --> 13:07.890
你会发现

13:07.890 --> 13:10.890
5U真的真的特别特别简单

13:10.890 --> 13:11.890
我觉得

13:11.890 --> 13:12.890
我甚至觉得

13:12.890 --> 13:14.890
之前我有一个同学在问我

13:14.890 --> 13:15.890
说

13:15.890 --> 13:16.890
5U是不是很难

13:16.890 --> 13:17.890
我说5U的话

13:17.890 --> 13:18.890
要比结块越简单

13:18.890 --> 13:20.890
所以说我觉得5U特别简单

13:20.890 --> 13:22.890
你这六天就跟着我的思路走就行了

13:22.890 --> 13:24.890
但是你每天得来

13:24.890 --> 13:26.890
因为我们这六天的课程是连续的

13:26.890 --> 13:27.890
今天我讲了过后

13:27.890 --> 13:28.890
如果今天没有听

13:28.890 --> 13:29.890
或者是中途走了

13:29.890 --> 13:30.890
那么会导致

13:30.890 --> 13:31.890
第二天的课程

13:31.890 --> 13:32.890
你可能听不懂了

13:32.890 --> 13:33.890
所以说每天得来

13:33.890 --> 13:34.890
这是第二个点

13:34.890 --> 13:35.890
我觉得特别简单

13:35.890 --> 13:37.890
大家不要有任何的心理压力

13:37.890 --> 13:38.890
而且我觉得大家学

13:38.890 --> 13:40.890
通过这一周的学习

13:40.890 --> 13:42.890
学了5U之后

13:42.890 --> 13:44.890
再让你回去用原生的解释

13:44.890 --> 13:45.890
或者是用结块越的话

13:45.890 --> 13:47.890
你反而会有点不习惯

13:47.890 --> 13:48.890
真的

13:48.890 --> 13:49.890
第三个点

13:49.890 --> 13:50.890
第三个点是有一个同学

13:50.890 --> 13:51.890
他听说了这么一个

13:51.890 --> 13:53.890
前端的三大框架

13:53.890 --> 13:56.890
前端有三大框架

13:56.890 --> 13:58.890
有个安格拉

13:58.890 --> 14:00.890
还有Ragd

14:00.890 --> 14:01.890
5U

14:01.890 --> 14:02.890
这三个框架出现了

14:02.890 --> 14:03.890
先后顺序

14:03.890 --> 14:04.890
安格拉先出现

14:04.890 --> 14:06.890
然后是Ragd

14:06.890 --> 14:07.890
还有5U

14:07.890 --> 14:08.890
5U是最后出现的

14:08.890 --> 14:09.890
所以说5U这个框架

14:09.890 --> 14:11.890
对比其他两个框架

14:11.890 --> 14:13.890
它其实上是综合了

14:13.890 --> 14:15.890
安格拉以及Ragd

14:15.890 --> 14:17.890
里面的某些特点

14:17.890 --> 14:19.890
不过目前

14:19.890 --> 14:21.890
我们整个前端环境里边

14:21.890 --> 14:23.890
安格拉已经用的比较少了

14:23.890 --> 14:25.890
已经用的相当比较少了

14:25.890 --> 14:26.890
它里边有些地方出现

14:26.890 --> 14:28.890
处理起来确实很麻烦

14:28.890 --> 14:31.890
现在目前整个前端

14:31.890 --> 14:33.890
环境里边用的最多的两个框架

14:33.890 --> 14:35.890
也就是Ragd和VU

14:35.890 --> 14:36.890
这两个框架

14:36.890 --> 14:38.890
一般来说的话

14:39.890 --> 14:41.890
大型企业

14:41.890 --> 14:43.890
或者是Y企业

14:43.890 --> 14:44.890
一般会喜欢

14:44.890 --> 14:46.890
比较喜欢Ragd

14:46.890 --> 14:48.890
中型企业和小型企业

14:48.890 --> 14:50.890
会喜欢VU

14:50.890 --> 14:52.890
就是目前的这个市场上

14:52.890 --> 14:53.890
你要说谁打败谁吧

14:53.890 --> 14:54.890
目前一时半火蓝

14:54.890 --> 14:56.890
分胜负

14:56.890 --> 14:58.890
所以说大火

14:58.890 --> 15:00.890
最好是两个都得学习

15:00.890 --> 15:02.890
而且两个都要精通掌握

15:02.890 --> 15:03.890
好吧

15:03.890 --> 15:04.890
那么这里

15:04.890 --> 15:06.890
我就给大家着重对比一下

15:06.890 --> 15:08.890
VU和Ragd

15:08.890 --> 15:10.890
他们把他们两个做一下对比

15:10.890 --> 15:12.890
因为大家都可能没有接触过

15:12.890 --> 15:13.890
这两个框架

15:13.890 --> 15:14.890
所以说我这里就直接告诉大家

15:14.890 --> 15:16.890
它的结果是什么

15:16.890 --> 15:17.890
对比结果是什么

15:17.890 --> 15:19.890
那么我们这里主要说一下VU

15:19.890 --> 15:20.890
VU的优势

15:20.890 --> 15:21.890
对比Ragd

15:21.890 --> 15:23.890
VU有什么样的优势

15:23.890 --> 15:24.890
第一个优势

15:24.890 --> 15:25.890
是VU一上手

15:25.890 --> 15:27.890
我们说的高大上一点

15:27.890 --> 15:30.890
就是学习成本低

15:30.890 --> 15:31.890
就非常容易就学会了

15:31.890 --> 15:33.890
不然的话我也不会搞个

15:33.890 --> 15:35.890
六天上手VU的课程出来

15:35.890 --> 15:36.890
通过这六天的学习

15:36.890 --> 15:38.890
你就已经可以用VU

15:38.890 --> 15:40.890
来完成一些普通项目了

15:40.890 --> 15:41.890
没有任何问题

15:41.890 --> 15:43.890
第一个就是学习成本非常非常低

15:43.890 --> 15:45.890
我觉得它难度比结块还低

15:45.890 --> 15:46.890
容易上手

15:46.890 --> 15:48.890
这是它第一个优势

15:48.890 --> 15:50.890
第二个优势就是

15:50.890 --> 15:52.890
这个我要总统说一下

15:52.890 --> 15:53.890
因为很多同学

15:53.890 --> 15:54.890
可能有些同学

15:54.890 --> 15:55.890
接触过VU

15:55.890 --> 15:58.890
又接触过了一点点Ragd

15:58.890 --> 16:00.890
在使用的时候

16:00.890 --> 16:01.890
我经常看到

16:01.890 --> 16:02.890
有些同学

16:02.890 --> 16:04.890
接触了一点点Ragd

16:04.890 --> 16:06.890
然后开始用Ragd来写代码

16:06.890 --> 16:08.890
我发现他写了个代码

16:08.890 --> 16:10.890
你还不如用VU写

16:10.890 --> 16:11.890
有时候说Ragd

16:11.890 --> 16:13.890
不是更加靠近底层吗

16:13.890 --> 16:15.890
不是更加灵活吗

16:15.890 --> 16:17.890
但是有个前提条件

16:17.890 --> 16:18.890
你要学习Ragd

16:18.890 --> 16:20.890
你必须要学习得很深入才行

16:20.890 --> 16:22.890
必须要学习得很深入

16:22.890 --> 16:25.890
最好是能够掌握到它原码级别

16:25.890 --> 16:26.890
包括Ragd

16:26.890 --> 16:27.890
全家同里边很多东西

16:27.890 --> 16:29.890
你都要掌握到原码级别

16:29.890 --> 16:31.890
所以说否则的话

16:31.890 --> 16:32.890
你写Ragd代码的话

16:32.890 --> 16:33.890
你容易乱写

16:33.890 --> 16:35.890
你写完了代码之后

16:35.890 --> 16:37.890
你会造成这个项目的

16:37.890 --> 16:40.890
执行效率反而更低

16:40.890 --> 16:41.890
所以说

16:41.890 --> 16:44.890
如果说你两个技术都掌握的不深的话

16:44.890 --> 16:45.890
就是Ragd和VU

16:45.890 --> 16:48.890
这两个技术掌握的内容的不深的话

16:48.890 --> 16:51.890
我更加建议你使用VU来开发项目

16:51.890 --> 16:52.890
当然这个具体情况的话

16:52.890 --> 16:55.890
得看公司里面的要求

16:55.890 --> 16:57.890
这也是为什么很多公司觉得

16:57.890 --> 17:00.890
用VU的风险要小一点

17:00.890 --> 17:02.890
也不容易出各种各样的问题

17:02.890 --> 17:03.890
所以Ragd一旦出了问题

17:03.890 --> 17:05.890
或者是一些效率低下了

17:05.890 --> 17:07.890
如果你不知道它的原理的话

17:07.890 --> 17:09.890
你不知道该怎么去解决了

17:09.890 --> 17:11.890
所以说你可以直接用VU

17:11.890 --> 17:12.890
为什么呢

17:12.890 --> 17:21.890
因为VU已经自动对执行效率

17:21.890 --> 17:24.890
进行了优化

17:24.890 --> 17:30.890
初学者完全不用考虑效率问题

17:30.890 --> 17:32.890
但是只是对初学者

17:32.890 --> 17:34.890
如果说你想要找到更好的工作

17:34.890 --> 17:36.890
想要用更多的面试机会的话

17:36.890 --> 17:37.890
你对VU的原码级别

17:37.890 --> 17:39.890
包括VU全家同一边的原码级别

17:39.890 --> 17:41.890
也是要做深属了解的

17:41.890 --> 17:42.890
只是对初学者而言

17:42.890 --> 17:44.890
你只是要做一个效果出来

17:44.890 --> 17:45.890
只是要做一些应用

17:45.890 --> 17:46.890
你可以不用考虑效率问题

17:46.890 --> 17:48.890
因为它的效率就已经给你

17:48.890 --> 17:50.890
进行了自动的优化

17:50.890 --> 17:53.890
当然这两个一对比起来的话

17:53.890 --> 17:54.890
就相当于是什么呢

17:54.890 --> 17:56.890
相当于是C语言和加把语言

17:56.890 --> 17:59.890
你说你要做更高效率的东西

17:59.890 --> 18:00.890
那肯定是用C语言

18:00.890 --> 18:02.890
但是如果说你C语言掌握不好的话

18:02.890 --> 18:04.890
你还不如用加把语言

18:04.890 --> 18:05.890
你还不如用加把语言

18:05.890 --> 18:07.890
不然的话造成的问题更多

18:07.890 --> 18:08.890
对吧

18:08.890 --> 18:09.890
相当于是这么一种关系

18:09.890 --> 18:11.890
RAX更加灵活

18:11.890 --> 18:13.890
但是RAX还不太容易学习

18:13.890 --> 18:15.890
而且你要对学习RAX的话

18:15.890 --> 18:17.890
你要了解得很深入才行

18:17.890 --> 18:19.890
不知道跟大家讲清楚没有

18:24.290 --> 18:26.290
有同学提到了VU

18:26.290 --> 18:28.290
CLI

18:28.290 --> 18:30.290
我再跟大家说一下

18:30.290 --> 18:33.290
我们这么课了学习VU的话

18:33.290 --> 18:35.290
VU有两种开发方式

18:35.290 --> 18:36.290
我们一会再说吧

18:36.290 --> 18:37.290
一会再详细说

18:37.290 --> 18:39.290
以后我们讲到VU的核心功能的时候

18:39.290 --> 18:40.290
再详细说

18:40.290 --> 18:41.290
好 第四个点

18:41.290 --> 18:42.290
是关于VU的特点

18:42.290 --> 18:43.290
我是给大家加上这么

18:43.290 --> 18:44.290
也不算问题吧

18:44.290 --> 18:45.290
就是这么一个特点

18:45.290 --> 18:50.880
给大家总结一下

18:50.880 --> 18:51.880
VU的特点

18:51.880 --> 18:52.880
我给大家总结了这么三个

18:52.880 --> 18:55.880
一个是渐进式

18:55.880 --> 18:56.880
这些课点

18:56.880 --> 18:57.880
我们在后续的学习当中

18:57.880 --> 19:00.880
大家也可以非常清楚地认识到

19:00.880 --> 19:01.880
一个是渐进式

19:01.880 --> 19:04.880
一个是那个

19:04.880 --> 19:06.880
组件化

19:06.880 --> 19:10.880
一个是数据响应式

19:10.880 --> 19:12.880
我们就把它简称为响应式吧

19:12.880 --> 19:14.880
这是VU的这么三个特点

19:14.880 --> 19:15.880
我来再介绍一下

19:15.880 --> 19:16.880
只是简单的介绍一下

19:16.880 --> 19:18.880
以后我们后边的讲课的过程中

19:18.880 --> 19:19.880
会详细再说

19:19.880 --> 19:21.880
第一个是渐进式

19:21.880 --> 19:22.880
什么意思呢

19:22.880 --> 19:25.880
就是VU它虽然是一个框架级别的东西

19:25.880 --> 19:29.880
但是它的侵入性很少

19:29.880 --> 19:33.880
VU的侵入性很少

19:33.880 --> 19:34.880
什么叫侵入性呢

19:34.880 --> 19:36.880
就是有些框架

19:36.880 --> 19:38.880
它对你的限制非常非常多

19:38.880 --> 19:39.880
它不准利用这个

19:39.880 --> 19:40.880
不准利用那个

19:40.880 --> 19:41.880
它只准用它的东西

19:41.880 --> 19:43.880
这就是侵入性

19:43.880 --> 19:47.880
比方说以前的

19:47.880 --> 19:50.880
我把它调成那个物账模式

19:50.880 --> 19:53.880
怎么能打到我讲课呢

19:53.880 --> 19:54.880
比方说以前的

19:54.880 --> 19:56.880
我学的是微软的一套技术

19:56.880 --> 19:59.880
对吧

19:59.880 --> 20:00.880
那套东西我告诉大家

20:00.880 --> 20:02.880
就是侵入性非常非常强

20:02.880 --> 20:03.880
它只能用自己这种东西

20:03.880 --> 20:04.880
你只能用微软的东西

20:04.880 --> 20:05.880
你不能用别的东西

20:05.880 --> 20:06.880
用别的东西

20:06.880 --> 20:07.880
后来好一点了

20:07.880 --> 20:08.880
一开始的时候

20:08.880 --> 20:10.880
侵入性特别强

20:10.880 --> 20:11.880
它这样限制你

20:11.880 --> 20:12.880
那样限制你

20:12.880 --> 20:14.880
但是VU的侵入性很少

20:14.880 --> 20:17.880
因此你使用VU的话

20:17.880 --> 20:22.880
可以与很多

20:22.880 --> 20:25.880
其他前端技术联用

20:25.880 --> 20:27.880
你可以跟很多其他

20:27.880 --> 20:28.880
前端技术联用

20:28.880 --> 20:29.880
比方说有些同学说

20:29.880 --> 20:30.880
那VU用了VU

20:30.880 --> 20:31.880
能不能用接query

20:31.880 --> 20:32.880
可以没问题

20:32.880 --> 20:33.880
用了VU能不能在这一面

20:33.880 --> 20:35.880
还用reacts没问题

20:35.880 --> 20:37.880
用安格拉拉没问题

20:37.880 --> 20:38.880
这VU基本上是

20:38.880 --> 20:39.880
没有什么侵入性的

20:39.880 --> 20:42.880
所以说你使用VU的话

20:42.880 --> 20:43.880
它有这么一个好处

20:43.880 --> 20:44.880
就比方说你们以后

20:44.880 --> 20:45.880
到公司里边

20:45.880 --> 20:46.880
这个公司

20:46.880 --> 20:48.880
已经有二三十年的历史了

20:48.880 --> 20:50.880
已经历史比较悠久了

20:50.880 --> 20:52.880
它以前做了一些系统

20:52.880 --> 20:53.880
这些系统是用

20:53.880 --> 20:55.880
原生的ATM和CSS一介式写的

20:55.880 --> 20:57.880
或者类系统是用接query写的

20:57.880 --> 20:59.880
是用传统的开发方式写的

20:59.880 --> 21:01.880
那么它现在觉得

21:01.880 --> 21:03.880
这个系统太老旧了

21:03.880 --> 21:04.880
我们需要升级

21:04.880 --> 21:05.880
那么升级的话

21:05.880 --> 21:08.880
我们不能把它全部推翻重来

21:08.880 --> 21:09.880
因为那个成本太高了

21:09.880 --> 21:11.880
而现在之前的系统

21:11.880 --> 21:12.880
它不是说不能用

21:12.880 --> 21:13.880
它还能用

21:13.880 --> 21:14.880
还能发挥作用

21:14.880 --> 21:15.880
我们能不能

21:15.880 --> 21:17.880
一点一点的进行改造呢

21:17.880 --> 21:18.880
这就需要一个

21:18.880 --> 21:21.880
一个轻柱性非常小的

21:21.880 --> 21:22.880
这么一个框架

21:22.880 --> 21:23.880
才能进行改造

21:23.880 --> 21:24.880
不然的话

21:24.880 --> 21:26.880
如果说轻柱性非常高的话

21:26.880 --> 21:27.880
它不能跟其他技术

21:27.880 --> 21:28.880
比方说接query

21:28.880 --> 21:29.880
它不能跟接query联用

21:29.880 --> 21:30.880
那么这样子的话

21:30.880 --> 21:31.880
你到时候用的时候

21:31.880 --> 21:32.880
就会出问题

21:32.880 --> 21:33.880
改造的时候就会出问题

21:33.880 --> 21:35.880
除非你全部推翻重来

21:35.880 --> 21:37.880
所以说你像这个5U

21:37.880 --> 21:38.880
它的轻柱性很少

21:38.880 --> 21:39.880
我们就可以一点点的做

21:39.880 --> 21:41.880
比方说先做这个区域

21:41.880 --> 21:42.880
把这个小的区域

21:42.880 --> 21:44.880
改成5U的技术来实现

21:44.880 --> 21:45.880
然后先上线

21:45.880 --> 21:46.880
没问题了

21:46.880 --> 21:48.880
它一点点的改造其他区域

21:48.880 --> 21:50.880
所以说这就是5U建进式的特点

21:50.880 --> 21:52.880
特别是对于老系统的改造的时候

21:52.880 --> 21:55.880
它可以一步一步的进行改造

21:55.880 --> 21:58.880
这是关于第一个特点

21:58.880 --> 21:59.880
以后大家就认识到了

21:59.880 --> 22:00.880
就非常清楚的认识到了

22:00.880 --> 22:01.880
它为什么会具有建进式

22:01.880 --> 22:02.880
这么一个特点

22:02.880 --> 22:04.880
第二个是组建化

22:04.880 --> 22:05.880
组建化我现在讲不了

22:05.880 --> 22:06.880
现在讲不了

22:06.880 --> 22:07.880
就什么意思呢

22:07.880 --> 22:08.880
我给大家大概说一下

22:08.880 --> 22:10.880
因为这个是明天讲的内容

22:10.880 --> 22:12.880
今天我们不设计组建

22:12.880 --> 22:13.880
组建化是什么意思呢

22:13.880 --> 22:14.880
就是我们面对一个

22:14.880 --> 22:15.880
复杂的页面的时候

22:15.880 --> 22:17.880
我可以把它划分区域

22:17.880 --> 22:18.880
把这个页面划分过来

22:18.880 --> 22:20.880
有很多很多的区域

22:20.880 --> 22:23.880
区域里边还可能会包含一些小的区域

22:23.880 --> 22:24.880
那么每一个区域

22:24.880 --> 22:25.880
我就可以把它做成一个组建

22:25.880 --> 22:27.880
就相当于是这么一个模块

22:27.880 --> 22:28.880
比方说

22:28.880 --> 22:30.880
比方说这个页面东西很多

22:30.880 --> 22:31.880
很复杂

22:31.880 --> 22:32.880
那么我们只看这一个区域

22:32.880 --> 22:34.880
是不是就没有那么复杂了

22:34.880 --> 22:36.880
只看这个文笨框

22:36.880 --> 22:37.880
是不是就没那么复杂了

22:37.880 --> 22:39.880
像我看的不用看

22:39.880 --> 22:41.880
把这个文笨框做好了之后

22:41.880 --> 22:42.880
我们再做这一块

22:42.880 --> 22:43.880
再做这一块

22:43.880 --> 22:44.880
是不是就没那么复杂了

22:44.880 --> 22:46.880
就是一块一块的来做

22:46.880 --> 22:48.880
那么每一块在伍佑里边

22:48.880 --> 22:49.880
就是一个组建

22:49.880 --> 22:51.880
我们明天会设计到这个东西

22:51.880 --> 22:53.880
第三个是享用式

22:53.880 --> 22:55.880
享用式这个东西

22:55.880 --> 22:56.880
它跟我们你们学习的

22:56.880 --> 23:00.880
CSS3里边的享用式还不一样

23:00.880 --> 23:02.880
它不是指的是央式享用式

23:02.880 --> 23:04.880
根据屏幕尺寸不同

23:04.880 --> 23:05.880
然后使用不同的CSS

23:05.880 --> 23:06.880
还不是这个意思

23:06.880 --> 23:08.880
它这个享用式是什么意思呢

23:08.880 --> 23:11.880
它指的是数据享用式

23:11.880 --> 23:12.880
就是什么意思呢

23:12.880 --> 23:19.880
就是伍佑会监控数据的变化

23:19.880 --> 23:23.880
当数据发生变化时

23:23.880 --> 23:27.880
自动重新渲染移民

23:27.880 --> 23:28.880
就这么个意思

23:28.880 --> 23:30.880
这才叫伍佑的享用式

23:30.880 --> 23:31.880
怎么要享用式

23:31.880 --> 23:33.880
就是我天天把个数据盯着

23:33.880 --> 23:34.880
盯着它看

23:34.880 --> 23:35.880
一遍一遍

23:35.880 --> 23:36.880
你一遍

23:36.880 --> 23:37.880
我马上开始做一些操作

23:37.880 --> 23:38.880
自动的做的

23:38.880 --> 23:39.880
做一些操作

23:39.880 --> 23:41.880
一会儿大家就可以看到很清楚了

23:41.880 --> 23:42.880
自动做一些操作

23:42.880 --> 23:43.880
那么这些操作就可以导致

23:43.880 --> 23:45.880
一遍重新发生变化

23:45.880 --> 23:47.880
以前我在讲那个公开直播课的时候

23:47.880 --> 23:49.880
经常给大家提供一个词度就是

23:49.880 --> 23:52.880
你们一定要把数据和界面

23:52.880 --> 23:54.880
一定要分开

23:54.880 --> 23:56.880
这是一个非常重要的一个思想

23:56.880 --> 23:57.880
界面是界面

23:57.880 --> 23:58.880
数据是数据

23:58.880 --> 24:00.880
数据不变的情况下

24:00.880 --> 24:01.880
界面可以不断的发生变化

24:01.880 --> 24:03.880
可以有其他的变化

24:03.880 --> 24:05.880
一定要把数据和界面分开

24:05.880 --> 24:07.880
那么这一点在伍佑里面

24:07.880 --> 24:08.880
已经体现到零零净质了

24:08.880 --> 24:11.880
它就是彻底的把数据和界面分开

24:11.880 --> 24:12.880
那么数据一变

24:12.880 --> 24:13.880
界面更整变

24:13.880 --> 24:14.880
这就是响应识

24:14.880 --> 24:15.880
好了

24:15.880 --> 24:18.880
前面就差不多了

24:18.880 --> 24:19.880
给大家聊一聊

24:19.880 --> 24:21.880
关于伍佑的一些小的知识

24:21.880 --> 24:24.880
关于回答一下大家的疑问

24:24.880 --> 24:25.880
好了

24:25.880 --> 24:26.880
那么接下来

24:26.880 --> 24:28.880
我们就直接开始进入正题了

24:30.880 --> 24:31.880
都会讲

24:31.880 --> 24:32.880
放心的

24:32.880 --> 24:33.880
都会讲

24:36.880 --> 24:37.880
我们现在接下来

24:37.880 --> 24:38.880
进入正题

24:38.880 --> 24:40.880
就是我们来这节课了

24:40.880 --> 24:41.880
就是今天的课程里面

24:41.880 --> 24:43.880
我们就是来开发

24:43.880 --> 24:45.880
直接开发一个伍佑的功能

24:45.880 --> 24:46.880
像这几天的课程里面

24:46.880 --> 24:49.880
我们都会观测这么一种授课方式

24:49.880 --> 24:51.880
就是我先给大家看一下效果

24:51.880 --> 24:54.880
我们今天晚上就开发这个效果出来

24:54.880 --> 24:56.880
把这个效果开发出来

24:56.880 --> 24:57.880
那么开发的过程中

24:57.880 --> 24:58.880
肯定要学习一些知识

24:58.880 --> 24:59.880
对吧

24:59.880 --> 25:00.880
肯定要学习一些知识

25:00.880 --> 25:01.880
通过这个知识的学习

25:01.880 --> 25:03.880
我们就把伍佑的东西学习掉

25:03.880 --> 25:05.880
我们用这种方式来学习

25:05.880 --> 25:07.880
做一个非常非常简单的页面

25:07.880 --> 25:08.880
一个样式也比较丑

25:08.880 --> 25:10.880
我以为没有这么去做这个样式

25:10.880 --> 25:12.880
稍微做了一个字体颜色

25:12.880 --> 25:14.880
就是一个商品和库存的管理

25:14.880 --> 25:16.880
这么一个小的应用

25:16.880 --> 25:18.880
大家我给大家演示功能的时候

25:18.880 --> 25:19.880
大家可以想象一下

25:19.880 --> 25:20.880
那么这个功能

25:20.880 --> 25:21.880
如果是要利用原生的节词

25:21.880 --> 25:22.880
怎么去写

25:22.880 --> 25:23.880
怎么去书写

25:23.880 --> 25:25.880
然后这里写上商品名称

25:25.880 --> 25:26.880
这里写上商品名称

25:26.880 --> 25:27.880
随便写吧

25:27.880 --> 25:29.880
这里是商品的库存

25:29.880 --> 25:31.880
点击添加

25:31.880 --> 25:33.880
你看就把商品加进来了

25:33.880 --> 25:35.880
而且这个是不是还原了

25:35.880 --> 25:37.880
这个文本库还原了

25:37.880 --> 25:38.880
这里可以加库存

25:38.880 --> 25:40.880
看没

25:40.880 --> 25:41.880
可以加库存

25:41.880 --> 25:43.880
可以减库存

25:43.880 --> 25:45.880
当库存减到一定值的时候

25:45.880 --> 25:47.880
它就显示售信

25:47.880 --> 25:48.880
就是没东西了

25:48.880 --> 25:50.880
不能再减了

25:50.880 --> 25:52.880
然后这里就显示了库存名

25:52.880 --> 25:53.880
这是一个文本库

25:53.880 --> 25:55.880
文本库里边可以改数据

25:55.880 --> 25:58.880
比方说我这里写上500

25:58.880 --> 25:59.880
你看这里数据变了

25:59.880 --> 26:01.880
是不是这里也跟着变了

26:01.880 --> 26:02.880
这里跟着变了

26:02.880 --> 26:04.880
那么这里也是600

26:04.880 --> 26:06.880
这里我们可以点三除

26:06.880 --> 26:07.880
可以把它删除掉

26:07.880 --> 26:09.880
就是实际上这么一个小的功能

26:09.880 --> 26:10.880
你要说这个东西

26:10.880 --> 26:11.880
用原生节词写

26:11.880 --> 26:12.880
能不能写肯定能写

26:12.880 --> 26:13.880
但是我们来看一下

26:13.880 --> 26:14.880
5U是怎么写的

26:14.880 --> 26:16.880
你看一下5U的写方式

26:16.880 --> 26:18.880
你学校之后你就不想用原生节词写了

26:18.880 --> 26:20.880
咱们来看一下

26:20.880 --> 26:22.880
首先我们要完成这个效果

26:22.880 --> 26:23.880
首先我们要建立一个页面

26:23.880 --> 26:25.880
这是肯定的

26:25.880 --> 26:28.880
这里建立文件夹了

26:28.880 --> 26:30.880
建立文件夹

26:30.880 --> 26:34.320
这里我们首先新建立页面

26:34.320 --> 26:36.320
就应这个页面

26:36.320 --> 26:40.910
新建立这么一个页面

26:40.910 --> 26:46.910
这是一个商品库存管理

26:46.910 --> 26:48.910
这个页面里边

26:48.910 --> 26:50.910
我们首先写上这么一个DIV

26:50.910 --> 26:52.910
这也是我们常见的做法

26:52.910 --> 26:53.910
开启一个DIV

26:53.910 --> 26:55.910
这个DIV我们给它一个ID

26:55.910 --> 26:56.910
随便给ID

26:56.910 --> 26:57.910
跟那一样市民其实都无所谓

26:57.910 --> 26:58.910
给它这么一个ID

26:58.910 --> 26:59.910
比方说给它一个APP

26:59.910 --> 27:00.910
ID为APP

27:00.910 --> 27:02.910
我们所有的功能

27:02.910 --> 27:03.910
全部写到这个DIV里边

27:03.910 --> 27:04.910
就是这些东西

27:04.910 --> 27:05.910
这些元素

27:05.910 --> 27:06.910
我们全部写到这里边

27:06.910 --> 27:07.910
以前我们咋写呢

27:07.910 --> 27:09.910
以前是不是在这里直接书写

27:09.910 --> 27:10.910
一天呆满了

27:10.910 --> 27:11.910
以前的写法

27:11.910 --> 27:12.910
现在不一样了

27:12.910 --> 27:13.910
现在我们希望

27:13.910 --> 27:15.910
用VU来控制这里的界面

27:15.910 --> 27:17.910
这里的界面要用VU来控制

27:17.910 --> 27:19.910
因此DIV里边写啥呢

27:19.910 --> 27:20.910
啥都不写

27:20.910 --> 27:21.910
你把DIV放着就完事了

27:21.910 --> 27:22.910
啥都不写

27:22.910 --> 27:24.910
接下来我们要引用GS的

27:24.910 --> 27:26.910
那么这个GS

27:26.910 --> 27:27.910
就是VU的GS

27:27.910 --> 27:28.910
我一个大家下载下来了

27:28.910 --> 27:29.910
就是这个GS

27:29.910 --> 27:30.910
你复制一下

27:30.910 --> 27:32.910
复制粘贴过来就行了

27:33.910 --> 27:34.910
VU解释

27:34.910 --> 27:35.910
说到这的话

27:35.910 --> 27:37.910
我给它讲一个

27:37.910 --> 27:38.910
讲个知识

27:38.910 --> 27:42.480
就是关于VU工程的建立

27:42.480 --> 27:44.480
关于创建VU工程

27:46.480 --> 27:47.480
VU工程

27:47.480 --> 27:49.480
创建VU工程的话

27:49.480 --> 27:51.480
通常情况下有两种做法

27:51.480 --> 27:53.480
第一种做法呢

27:54.480 --> 27:55.480
第一种做法就是

27:55.480 --> 27:58.480
直接在页面上

27:59.480 --> 28:02.480
引用VU.GS

28:02.480 --> 28:04.480
直接把就像接块面的样子

28:04.480 --> 28:05.480
直接引用这个接式

28:05.480 --> 28:06.480
直接用就完了

28:06.480 --> 28:07.480
这是第一种做法

28:07.480 --> 28:09.480
咱们这门客使用的就是这种做法

28:09.480 --> 28:12.480
第二种做法是使用

28:12.480 --> 28:14.480
使用那个

28:15.480 --> 28:16.480
构建工具

28:17.480 --> 28:20.480
或者说使用VU CLI

28:20.480 --> 28:21.480
刚才提到了

28:21.480 --> 28:22.480
VU CLI

28:22.480 --> 28:24.480
就是使用脚手架

28:24.480 --> 28:26.480
这东西叫做脚手架

28:27.480 --> 28:29.480
使用这个东西打建工程

28:30.480 --> 28:31.480
打建工程

28:31.480 --> 28:33.480
那么你们以后在开发过程中

28:33.480 --> 28:35.480
就在公司里面上班的时候

28:35.480 --> 28:37.480
你们用的是拿动方式来签VU工程

28:37.480 --> 28:39.480
肯定是第二种

28:40.480 --> 28:41.480
肯定是第二种

28:41.480 --> 28:43.480
甚至你可能要自己编写脚手架

28:43.480 --> 28:45.480
来打建工程都有可能

28:45.480 --> 28:48.480
公司觉得VU CLI里面有东西

28:48.480 --> 28:49.480
我们可能不太

28:49.480 --> 28:51.480
不是我们想要的东西

28:51.480 --> 28:52.480
我们可能得改造这个东西

28:52.480 --> 28:53.480
也得自己写个脚手架

28:53.480 --> 28:54.480
这也是有可能的

28:54.480 --> 28:56.480
我以前一个同学就遇到这种情况

28:56.480 --> 28:58.480
但是我们为什么售客的时候

28:58.480 --> 29:00.480
用第一种方式呢

29:00.480 --> 29:03.480
只要你把工程建好之后

29:03.480 --> 29:06.480
后标书写代码差不多

29:06.480 --> 29:08.480
几乎是一样的

29:08.480 --> 29:10.480
所以说你学会了

29:10.480 --> 29:12.480
使用第一种方式

29:12.480 --> 29:15.480
以后你们学习VU CLI之后

29:16.480 --> 29:18.480
打建工程打建好之后

29:18.480 --> 29:20.480
你写的代码没有多少差异

29:20.480 --> 29:21.480
这是第一个原因

29:21.480 --> 29:22.480
第二个原因

29:22.480 --> 29:23.480
是因为我们要

29:23.480 --> 29:25.480
如果说你要使用VU CLI

29:25.480 --> 29:26.480
来充建工程的话

29:26.480 --> 29:28.480
你可能会需要

29:28.480 --> 29:31.480
更多的前置知识

29:31.480 --> 29:32.480
需要的前置知识

29:32.480 --> 29:33.480
不然的话

29:33.480 --> 29:35.480
你把工程打建起来了

29:35.480 --> 29:36.480
但是同学脑袋里面

29:36.480 --> 29:37.480
脑袋上面全是问号

29:37.480 --> 29:39.480
你都不知道我在干嘛

29:39.480 --> 29:40.480
你这里面什么东西

29:40.480 --> 29:41.480
它怎么去执行的

29:41.480 --> 29:42.480
怎么去运作的

29:42.480 --> 29:43.480
完全不知道

29:43.480 --> 29:45.480
因为它需要很多很多的前置知识

29:45.480 --> 29:46.480
包括我们刚才讲的

29:46.480 --> 29:48.480
S6这些东西不提

29:48.480 --> 29:49.480
还包括什么呢

29:49.480 --> 29:52.480
还包括Note的解释

29:52.480 --> 29:53.480
因为角色加了

29:53.480 --> 29:55.480
它用到了Note的解释里面东西

29:55.480 --> 29:56.480
还包括什么呢

29:56.480 --> 29:58.480
Webpack就是构建工具

29:58.480 --> 30:00.480
构建工具当然不只Webpack

30:00.480 --> 30:01.480
还有一些其他的构建工具

30:01.480 --> 30:04.480
不过目前最火的是Webpack

30:04.480 --> 30:06.480
那么Webpack里面有各种各样的东西

30:06.480 --> 30:07.480
超级超级多

30:07.480 --> 30:09.480
什么dev server 背部这些东西

30:09.480 --> 30:10.480
超级多

30:10.480 --> 30:12.480
所以你得把Webpack学习了

30:12.480 --> 30:13.480
构建工具学习了

30:13.480 --> 30:15.480
然后还要学习什么

30:15.480 --> 30:17.480
还要学习SARS

30:17.480 --> 30:18.480
NES这些都得学习

30:18.480 --> 30:19.480
就是预编一期

30:19.480 --> 30:20.480
还要学习什么

30:20.480 --> 30:24.480
还要学习CSS module

30:24.480 --> 30:25.480
还要学习啥

30:25.480 --> 30:27.480
还要学习

30:27.480 --> 30:29.480
如果说你要彻底理解角色加的话

30:29.480 --> 30:33.480
你还得学习命令航开发

30:33.480 --> 30:35.480
命令航开发

30:35.480 --> 30:36.480
你还得学习这个东西

30:36.480 --> 30:38.480
所以它需要的前置知识

30:38.480 --> 30:40.480
特别特别多

30:40.480 --> 30:41.480
因此我们这门课

30:41.480 --> 30:43.480
就没有办法使用角色加

30:43.480 --> 30:44.480
来搭建工程

30:44.480 --> 30:45.480
明白这个意思吗

30:45.480 --> 30:46.480
不想的话

30:46.480 --> 30:47.480
我搭建的

30:47.480 --> 30:48.480
倒是可以给那边搭建起来

30:48.480 --> 30:49.480
搭建起来

30:49.480 --> 30:51.480
满脑袋问好都不知道他干嘛

30:51.480 --> 30:52.480
我在讲课的时候

30:52.480 --> 30:54.480
我希望我能够把一个东西讲清楚

30:55.480 --> 30:56.480
所以我们使用的是

30:56.480 --> 30:57.480
第一种方式

30:57.480 --> 30:58.480
不过没有关系

30:58.480 --> 30:59.480
没有任何关系

30:59.480 --> 31:01.480
就像你们学习原生介石开发一样

31:01.480 --> 31:02.480
你们以后在公司里面

31:02.480 --> 31:03.480
还会用原生介石开发吗

31:03.480 --> 31:04.480
不太会了

31:04.480 --> 31:05.480
不太会了

31:05.480 --> 31:06.480
至少得也得用介块去

31:06.480 --> 31:07.480
不过没关系

31:07.480 --> 31:09.480
原生介石是不是给你打好的基础

31:09.480 --> 31:10.480
就是我们现在的学习

31:10.480 --> 31:12.480
用的是第一种方式来使用无忧

31:12.480 --> 31:14.480
虽然是用的第一种方式

31:14.480 --> 31:16.480
但是学习的内容和知识

31:16.480 --> 31:17.480
跟第二种方式

31:17.480 --> 31:18.480
是没有什么区别的

31:18.480 --> 31:21.980
我先把这个解释清楚

31:25.380 --> 31:27.380
不会都不会

31:30.380 --> 31:32.380
但是讲不了

31:32.380 --> 31:33.380
讲不了这些东西

31:33.380 --> 31:34.380
太多了

31:34.380 --> 31:36.380
咱们都认为的课程里边

31:36.380 --> 31:38.380
后期的课程里边倒是有这些东西

31:38.380 --> 31:40.380
但是我们这个无忧课程

31:40.380 --> 31:41.380
六天时间

31:41.380 --> 31:43.380
它是讲不了这些东西的

31:43.380 --> 31:44.380
你想光讲漏这些

31:44.380 --> 31:45.380
是你这种多长时间

31:45.380 --> 31:47.380
讲vipac的这种多长时间

31:47.380 --> 31:49.380
一种你要再想讲

31:49.380 --> 31:50.380
无忧的核心知识

31:50.380 --> 31:51.380
那就讲不了了

31:51.380 --> 31:53.380
所以说我们集中精力讲这个

31:53.380 --> 31:54.380
没关系

31:54.380 --> 31:55.380
告诉大家没关系的

31:55.380 --> 31:57.380
就跟你们学习原生界式一样

31:57.380 --> 31:59.380
学习原生界的时候

31:59.380 --> 32:00.380
你们之后还不是

32:00.380 --> 32:01.380
不会用原生界式开发

32:01.380 --> 32:02.380
但是你

32:02.380 --> 32:04.380
是不是得学习原生界式吗

32:04.380 --> 32:06.380
是不是还是得学习

32:06.380 --> 32:07.380
是一样的

32:07.380 --> 32:09.380
开发方式是一样的

32:09.380 --> 32:10.380
这是这两个

32:10.380 --> 32:11.380
给它说清楚

32:11.380 --> 32:12.380
好

32:12.380 --> 32:13.380
那么接下来

32:13.380 --> 32:14.380
核心功能里边

32:14.380 --> 32:15.380
我们首先

32:15.380 --> 32:16.380
就是无忧界式

32:16.380 --> 32:17.380
打捞了

32:17.380 --> 32:18.380
对吧

32:18.380 --> 32:19.380
我们在页面上去引用它

32:19.380 --> 32:21.380
去引用这个无忧解释

32:22.380 --> 32:23.380
好

32:23.380 --> 32:24.380
然后我们要实现这个效果

32:24.380 --> 32:26.380
我们是不是得自己开个界式

32:26.380 --> 32:27.380
对吧

32:27.380 --> 32:28.380
我们自己再写一个

32:28.380 --> 32:29.380
vipa的界式

32:29.380 --> 32:31.380
就该取名为index的界式

32:31.380 --> 32:32.380
我们取一个

32:32.380 --> 32:34.380
就是我们自己写个界式

32:34.380 --> 32:35.380
那么这个界式里边

32:35.380 --> 32:36.380
肯定要用到无忧功能

32:36.380 --> 32:37.380
对吧

32:37.380 --> 32:39.380
使用无忧实现效果

32:39.380 --> 32:40.380
这个界式

32:40.380 --> 32:41.380
我们要做证明年事

32:41.380 --> 32:42.380
所以说我们在页面上

32:42.380 --> 32:44.380
是不是要引用这个界式

32:44.380 --> 32:46.380
index的界式

32:46.380 --> 32:47.380
得先引用无忧

32:47.380 --> 32:49.380
再引用我们自己的界式

32:49.380 --> 32:50.380
必须要这样子

32:52.380 --> 32:53.380
那么现在我们到这个

32:53.380 --> 32:54.380
结构写好之后

32:54.380 --> 32:55.380
接下来我们的代码

32:55.380 --> 32:56.380
就写到哪

32:56.380 --> 32:57.380
是不是写到index的界式里边

32:57.380 --> 32:58.380
好

32:58.380 --> 32:59.380
这个代码怎么写呢

32:59.380 --> 33:00.380
问题是

33:00.380 --> 33:02.380
你要使用无忧的话

33:02.380 --> 33:05.380
你要创建一个无忧对象

33:05.380 --> 33:06.380
这个无忧对象呢

33:06.380 --> 33:08.380
叫做无忧的实力

33:08.380 --> 33:09.380
我们把这个创建的

33:09.380 --> 33:11.380
无忧对象叫做无忧的实力

33:11.380 --> 33:12.380
那么这个实力

33:12.380 --> 33:13.380
什么意思

33:13.380 --> 33:14.380
就是通过

33:14.380 --> 33:15.380
通过6

33:15.380 --> 33:16.380
就这个代码

33:16.380 --> 33:20.080
6無忧

33:20.080 --> 33:21.080
得到的对象

33:21.080 --> 33:22.080
就是无忧实力

33:24.080 --> 33:25.080
那么现在我们来创建一个

33:25.080 --> 33:27.080
6一个无忧

33:27.080 --> 33:28.080
创建一个

33:28.080 --> 33:29.080
那么这个无忧

33:29.080 --> 33:30.080
是不是一个构造函数

33:30.080 --> 33:31.080
对不对

33:31.080 --> 33:32.080
那么这个构造函数

33:32.080 --> 33:33.080
哪来的

33:33.080 --> 33:34.080
是不是这个无忧的界式里面

33:34.080 --> 33:35.080
可以提供的构造函数

33:35.080 --> 33:36.080
对吧

33:36.080 --> 33:37.080
你把它引用起来了

33:37.080 --> 33:38.080
它就有这个构造函数了

33:38.080 --> 33:39.080
就这么简单

33:39.080 --> 33:40.080
创建这么一个无忧对象

33:40.080 --> 33:41.080
好

33:41.080 --> 33:42.080
这个无忧对象里边

33:42.080 --> 33:43.080
这个小货号里边

33:43.080 --> 33:44.080
是不是要写参数

33:44.080 --> 33:45.080
这个参数是什么

33:45.080 --> 33:46.080
这个参数

33:46.080 --> 33:48.080
它叫做配置对象

33:48.080 --> 33:50.080
它叫做配置对象

33:50.080 --> 33:51.080
就是你要写个对象

33:51.080 --> 33:52.080
来进行配置

33:52.080 --> 33:53.080
再写这么一个对象

33:53.080 --> 33:54.080
写这么一个对象

33:55.080 --> 33:56.080
config

33:56.080 --> 33:57.080
这个对象

33:57.080 --> 33:58.080
这就是个什么

33:58.080 --> 33:59.080
配置对象

34:00.080 --> 34:01.080
配置对象

34:01.080 --> 34:02.080
好

34:02.080 --> 34:03.080
那么我们把配置对象

34:03.080 --> 34:04.080
是不是传过来

34:04.080 --> 34:05.080
传过来

34:05.080 --> 34:06.080
然后它这里

34:06.080 --> 34:07.080
是不是会得到一个

34:07.080 --> 34:08.080
无忧的实力

34:08.080 --> 34:09.080
就是无忧对象

34:09.080 --> 34:10.080
我们可以接受一下

34:11.080 --> 34:12.080
这就是一个无忧的实力

34:12.080 --> 34:14.080
下面这句话的意思就是

34:14.080 --> 34:17.080
创建一个无忧的实力

34:18.080 --> 34:19.080
也就是说

34:19.080 --> 34:20.080
大家首先要理解的是

34:20.080 --> 34:21.080
这么一种结构

34:21.080 --> 34:22.080
大家要理解清楚

34:23.080 --> 34:24.080
你这里有个配置对象

34:24.080 --> 34:25.080
配置对象就是

34:25.080 --> 34:26.080
配置的无忧里边

34:26.080 --> 34:27.080
具备哪些功能

34:27.080 --> 34:28.080
要做什么事情

34:28.080 --> 34:30.080
就是各种各样的配置

34:30.080 --> 34:31.080
配置对象

34:31.080 --> 34:32.080
然后呢

34:32.080 --> 34:34.080
你要通过六一个无忧

34:34.080 --> 34:35.080
把配置这样传进去

34:35.080 --> 34:37.080
它会给你一个无忧的实力

34:37.080 --> 34:38.080
尽管你现在

34:38.080 --> 34:39.080
还不知道这个无忧的实力

34:39.080 --> 34:40.080
有什么用

34:40.080 --> 34:41.080
无忧的实力有什么东西

34:41.080 --> 34:42.080
但是你先把这个

34:42.080 --> 34:43.080
代码解构

34:43.080 --> 34:45.080
你理解好

34:45.080 --> 34:46.080
那么现在的concer

34:46.080 --> 34:47.080
没问题吧

34:47.080 --> 34:49.080
concer是ES6的东西

34:49.080 --> 34:50.080
concer是ES6的东西

34:50.080 --> 34:52.080
就是产量

34:52.080 --> 34:53.080
为啥不用挖

34:53.080 --> 34:54.080
挖挥污染权

34:54.080 --> 34:55.080
就变量啊

34:55.080 --> 34:56.080
concer不会啊

34:58.080 --> 35:00.080
还有那个就是

35:00.080 --> 35:01.080
快捷作用域

35:03.080 --> 35:05.080
都是我们使用concer的原因

35:05.080 --> 35:06.080
那么现在呢

35:06.080 --> 35:07.080
现在我们来看一下

35:07.080 --> 35:09.080
这个配置对象里边

35:09.080 --> 35:10.080
写什么东西

35:10.080 --> 35:11.080
你看这个代码

35:11.080 --> 35:12.080
是没发更改的对吧

35:12.080 --> 35:13.080
那么我们看一下

35:13.080 --> 35:14.080
这个配置对象里边

35:14.080 --> 35:15.080
写什么东西

35:15.080 --> 35:16.080
写哪些东西呢

35:16.080 --> 35:17.080
比方说我们在这里

35:17.080 --> 35:18.080
首先要确认一个标题

35:18.080 --> 35:19.080
要确认这么一个标题

35:19.080 --> 35:20.080
我们当然可以把标题

35:20.080 --> 35:21.080
直接写到这

35:21.080 --> 35:22.080
可不可以把标题

35:22.080 --> 35:23.080
直接写到这了

35:23.080 --> 35:24.080
可以没问题

35:24.080 --> 35:25.080
可以写到这

35:25.080 --> 35:26.080
但是呢

35:26.080 --> 35:27.080
我们更多的时候呢

35:27.080 --> 35:28.080
是希望

35:28.080 --> 35:29.080
无忧来帮我们

35:29.080 --> 35:30.080
选择那个标题

35:30.080 --> 35:31.080
如果是你直接写到这

35:31.080 --> 35:32.080
就相当于是静态一面了

35:32.080 --> 35:33.080
相当于是静态一面了

35:33.080 --> 35:34.080
就没什么好说的了

35:34.080 --> 35:35.080
它没有受到控制

35:35.080 --> 35:37.080
那么你最好是让无忧

35:37.080 --> 35:38.080
来控制这个东西

35:38.080 --> 35:39.080
怎么控制呢

35:39.080 --> 35:40.080
它配置里边

35:40.080 --> 35:41.080
有这么一个东西

35:41.080 --> 35:43.080
叫做template属性

35:43.080 --> 35:45.080
配置里边

35:45.080 --> 35:46.080
有这么一个东西

35:46.080 --> 35:47.080
叫做template属性

35:47.080 --> 35:48.080
它配置为一个什么呢

35:48.080 --> 35:50.080
配置为一个制服串

35:50.080 --> 35:52.080
它可以配置为一个制服串

35:52.080 --> 35:54.080
这个制服串里边写着啥

35:54.080 --> 35:55.080
它就到时候

35:55.080 --> 35:56.080
它就会渲染啥

35:56.080 --> 35:57.080
比方说我们这里可以写它

35:57.080 --> 35:59.080
可以写个AQE远处

36:00.080 --> 36:01.080
就这么简单

36:01.080 --> 36:02.080
你觉得无忧有多复杂

36:02.080 --> 36:03.080
它就这么简单

36:04.080 --> 36:05.080
复制一下

36:05.080 --> 36:06.080
扔过来

36:06.080 --> 36:07.080
好

36:07.080 --> 36:08.080
那么现在呢

36:08.080 --> 36:09.080
我们的页面

36:09.080 --> 36:11.710
咱们打开看一下

36:11.710 --> 36:12.710
有这个AQE吗

36:12.710 --> 36:13.710
有这个AQE远处吗

36:13.710 --> 36:14.710
是不是没有

36:14.710 --> 36:15.710
是不是看不见

36:15.710 --> 36:16.710
也不是配置的吗

36:16.710 --> 36:17.710
为什么看不见呢

36:17.710 --> 36:18.710
是因为这个原因

36:19.710 --> 36:20.710
是这个原因导致的

36:20.710 --> 36:21.710
什么原因呢

36:21.710 --> 36:22.710
就是

36:22.710 --> 36:23.710
现在你告诉他

36:23.710 --> 36:24.710
要渲染什么东西

36:24.710 --> 36:26.710
这个东西叫做磨板

36:26.710 --> 36:27.710
渲染的磨板

36:27.710 --> 36:28.710
我们以后还会详细讲

36:28.710 --> 36:30.710
还会详细讲磨板

36:30.710 --> 36:32.710
这个东西叫做渲染的磨板

36:32.710 --> 36:33.710
那么但是呢

36:33.710 --> 36:35.710
它不知道把这个渲染到哪儿去

36:35.710 --> 36:36.710
你这个页面

36:36.710 --> 36:37.710
可能有很多的AQE远处

36:37.710 --> 36:38.710
它渲染到哪儿去呢

36:38.710 --> 36:39.710
它不知道

36:39.710 --> 36:40.710
不知道

36:40.710 --> 36:42.710
那么你还需要一个配置

36:42.710 --> 36:43.710
来控制一下

36:43.710 --> 36:44.710
什么配置呢

36:44.710 --> 36:45.710
叫做EL

36:45.710 --> 36:47.710
它的全程叫做animate

36:47.710 --> 36:49.710
它的全程叫做animate

36:49.710 --> 36:50.710
我们这里写一点记点吧

36:50.710 --> 36:51.710
配置对象里边

36:51.710 --> 36:53.710
配置对象里边有什么东西呢

36:53.710 --> 36:55.710
一个是template

36:55.710 --> 36:57.710
一个template

36:57.710 --> 36:59.710
表示的是配置磨板

36:59.710 --> 37:01.710
配置磨板

37:01.710 --> 37:03.710
内雄是什么呢

37:03.710 --> 37:04.710
一个制补串

37:04.710 --> 37:05.710
一个制补串

37:05.710 --> 37:06.710
好

37:06.710 --> 37:07.710
那么现在呢

37:07.710 --> 37:08.710
第二个就是EL

37:08.710 --> 37:09.710
它的全程叫animate

37:09.710 --> 37:11.710
表示的是配置元素

37:11.710 --> 37:14.710
控制的元素

37:14.710 --> 37:16.710
就要控制哪个元素的渲染

37:16.710 --> 37:17.710
好

37:17.710 --> 37:18.710
那么这个EL里边

37:18.710 --> 37:19.710
它写的是什么呢

37:19.710 --> 37:21.710
写的是CSS选择器

37:21.710 --> 37:22.710
就是EL里边

37:22.710 --> 37:24.710
它写的是CSS选择器

37:24.710 --> 37:27.220
好

37:27.220 --> 37:28.220
比方说

37:28.220 --> 37:29.220
我们希望呢

37:29.220 --> 37:31.220
WUIU来控制这个DIV的渲染

37:31.220 --> 37:32.220
于是呢

37:32.220 --> 37:33.220
我们这里怎么写呢

37:33.220 --> 37:34.220
是不是写个警号

37:34.220 --> 37:35.220
App

37:35.220 --> 37:36.220
对吧

37:36.220 --> 37:37.220
于是呢

37:37.220 --> 37:38.220
这个WUIU

37:38.220 --> 37:39.220
配置对象里看

37:39.220 --> 37:40.220
它我们的渲染的磨板

37:40.220 --> 37:41.220
是这个

37:41.220 --> 37:42.220
那么这个渲染的元素呢

37:42.220 --> 37:43.220
就控制的元素是App

37:43.220 --> 37:45.220
控制的元素是ID为App的DIV

37:45.220 --> 37:46.220
好

37:46.220 --> 37:47.220
那么这样子一来了

37:47.220 --> 37:49.220
ID它就会被WUIU所控制

37:49.220 --> 37:50.220
到时候渲染的时候呢

37:50.220 --> 37:51.220
它就会在这里边进行渲染

37:51.220 --> 37:53.220
就这么个意思

37:53.220 --> 37:54.220
好

37:54.220 --> 37:55.220
然后呢

37:55.220 --> 37:56.220
我们

37:56.220 --> 37:57.220
还不是在里边渲染

37:57.220 --> 37:58.220
咱们来看一下结果

37:58.220 --> 38:00.220
最出来了

38:00.220 --> 38:01.220
最出来了A7元素

38:01.220 --> 38:02.220
对吧

38:02.220 --> 38:03.220
然后我们右键点检查

38:03.220 --> 38:05.220
我们来看一下

38:05.220 --> 38:08.220
你会发现DIV是不是没了

38:08.220 --> 38:09.220
那个DIV呢

38:09.220 --> 38:11.220
我们写到DIV跑哪去了

38:11.220 --> 38:12.220
我们写到DIV

38:12.220 --> 38:13.220
是不是没了

38:13.220 --> 38:14.220
你说这个DIV呢

38:14.220 --> 38:15.220
你这写到这里呢

38:15.220 --> 38:16.220
你不要认为你这里写到ID

38:16.220 --> 38:17.220
你就可以用ID选择

38:17.220 --> 38:18.220
现在给它设置一样子

38:18.220 --> 38:21.220
这个DIV会被WUIU所替换掉的

38:21.220 --> 38:22.220
它会被什么替换

38:22.220 --> 38:24.220
被模板所替换

38:24.220 --> 38:26.220
它会被模板所替换

38:26.220 --> 38:27.220
所以说你这里呢

38:27.220 --> 38:28.220
写的东西呢

38:28.220 --> 38:30.220
你不要认为它一定存在的

38:30.220 --> 38:31.220
它会消失

38:31.220 --> 38:33.220
它会被模板所替换

38:33.220 --> 38:34.220
但是呢

38:34.220 --> 38:35.220
这个区域已经被WUIU所控制

38:35.220 --> 38:36.220
接管控制了

38:36.220 --> 38:37.220
那么控制了有什么好处

38:37.220 --> 38:38.220
我一会就知道了

38:38.220 --> 38:39.220
好

38:39.220 --> 38:40.220
那么现在这一块有什么问题吗

38:40.220 --> 38:41.220
对

38:41.220 --> 38:42.220
以后就在ATEMIN里面写

38:42.220 --> 38:43.220
ATEMIN

38:43.220 --> 38:44.220
就在template里面写

38:44.220 --> 38:45.220
甚至呢

38:45.220 --> 38:46.220
你可以在template里面

38:46.220 --> 38:47.220
把它拿出来

38:47.220 --> 38:49.220
这是也是我们常见的一种做法

38:49.220 --> 38:52.220
就是模板

38:52.220 --> 38:53.220
好

38:53.220 --> 38:54.220
你甚至可以专门写个辩量

38:54.220 --> 38:55.220
template

38:55.220 --> 38:56.220
对吧

38:56.220 --> 38:57.220
是不是写到这

38:57.220 --> 38:58.220
专门写个辩量写到这

38:58.220 --> 38:59.220
然后呢

38:59.220 --> 39:00.220
把这个辩量

39:00.220 --> 39:01.220
作为它的什么

39:01.220 --> 39:02.220
做这个配置对象的属性

39:02.220 --> 39:03.220
对吧

39:03.220 --> 39:04.220
这样子尽量分开写

39:04.220 --> 39:05.220
所以也可以

39:05.220 --> 39:06.220
对吧

39:06.220 --> 39:07.220
而且呢

39:07.220 --> 39:08.220
你这里是不是可以用模板支付串

39:08.220 --> 39:09.220
是不是可以用模板支付串

39:09.220 --> 39:10.220
模板支付串

39:10.220 --> 39:11.220
是不是可以换

39:11.220 --> 39:12.220
对吧

39:12.220 --> 39:13.220
是可以换的

39:14.220 --> 39:15.220
好

39:15.220 --> 39:16.220
没问题吧

39:16.220 --> 39:17.220
就这一块

39:17.220 --> 39:18.220
这这一块

39:18.220 --> 39:19.220
好

39:19.220 --> 39:20.220
咱们接着看

39:20.220 --> 39:21.220
接着看

39:21.220 --> 39:22.220
那么现在呢

39:22.220 --> 39:23.220
我们只是显示一个HE元素

39:23.220 --> 39:24.220
它并没有具备任何的功能

39:24.220 --> 39:25.220
对吧

39:25.220 --> 39:26.220
那么我们希望的是

39:26.220 --> 39:27.220
比方说

39:27.220 --> 39:29.220
实现这么一个效果

39:29.220 --> 39:30.220
这个标题呢

39:30.220 --> 39:32.220
它是有可能发生变化的

39:32.220 --> 39:34.220
尽管在我们这个项目里边

39:34.220 --> 39:35.220
好像没有什么变化

39:35.220 --> 39:36.220
这个标题

39:36.220 --> 39:37.220
从头到尾都没有变化

39:37.220 --> 39:38.220
对吧

39:38.220 --> 39:39.220
那么如果说

39:39.220 --> 39:40.220
如果说

39:40.220 --> 39:41.220
这个标题

39:41.220 --> 39:43.220
它有可能发生变化的话

39:43.220 --> 39:45.220
那么你这个数据呢

39:45.220 --> 39:46.220
你就不能写到模板里边了

39:46.220 --> 39:48.220
模板里边表示什么呢

39:48.220 --> 39:51.220
模板里边表示要展示的东西

39:51.220 --> 39:54.220
要展示的东西

39:54.220 --> 39:55.220
好

39:55.220 --> 39:56.220
这是模板里面

39:56.220 --> 39:57.220
我们先把个基本要素写出来

39:57.220 --> 39:58.220
再给大家详细解释

39:58.220 --> 40:00.220
表示要展示什么东西

40:00.220 --> 40:01.220
那么现在展示东西里边

40:01.220 --> 40:02.220
有一块东西

40:02.220 --> 40:03.220
它是可能会变化的

40:03.220 --> 40:04.220
那么变化东西呢

40:04.220 --> 40:05.220
我们要干嘛呢

40:05.220 --> 40:07.220
我们要把它放到数据里边

40:07.220 --> 40:08.220
进行管理

40:08.220 --> 40:09.220
比方说这个标题内容

40:09.220 --> 40:10.220
它有可能会变化

40:10.220 --> 40:11.220
那么这个内容呢

40:11.220 --> 40:13.220
我们需要把它放到数据里边进行管理

40:13.220 --> 40:15.220
那么这个数据写到哪呢

40:15.220 --> 40:16.220
写到配置里边

40:16.220 --> 40:18.220
配置里边有这么一个配置

40:18.220 --> 40:20.220
叫做data

40:20.220 --> 40:22.220
它是个对象

40:22.220 --> 40:23.220
data

40:23.220 --> 40:24.220
好

40:24.220 --> 40:25.220
我们这里记一笔

40:25.220 --> 40:26.220
data

40:26.220 --> 40:29.220
表示的是

40:29.220 --> 40:32.220
和应该说就是

40:32.220 --> 40:33.220
关联的数据

40:33.220 --> 40:34.220
关联的数据

40:34.220 --> 40:36.220
或者说管理的数据

40:36.220 --> 40:37.220
数据

40:37.220 --> 40:39.220
该数据是享用式的

40:40.220 --> 40:41.220
什么叫享用式

40:41.220 --> 40:42.220
我们一会看到了

40:44.220 --> 40:45.220
享用式

40:45.220 --> 40:47.220
这是一个享用式的数据

40:47.220 --> 40:48.220
好比方说

40:48.220 --> 40:49.220
它里边有这么一个数据

40:49.220 --> 40:50.220
有这么一个属性

40:50.220 --> 40:51.220
叫做title

40:51.220 --> 40:52.220
标题

40:52.220 --> 40:54.220
标题我们就给它直接写上这个

40:54.220 --> 40:55.220
这个

40:55.220 --> 40:57.220
现在我们希望

40:57.220 --> 41:00.220
我们希望在模板在渲染的时候

41:00.220 --> 41:01.220
模板配置在这

41:01.220 --> 41:02.220
对吧

41:02.220 --> 41:03.220
模板在渲染的时候

41:03.220 --> 41:04.220
这一块东西

41:04.220 --> 41:05.220
来自于哪呢

41:05.220 --> 41:08.220
来自于数据里边的标题

41:08.220 --> 41:10.220
这个属性的名字里是随便写的

41:10.220 --> 41:12.220
这个配置里是不能乱写的

41:12.220 --> 41:13.220
必须是data

41:13.220 --> 41:15.220
这里要显示标题怎么显示的

41:15.220 --> 41:16.220
我告诉大家

41:16.220 --> 41:18.220
模板里面要显示标题

41:18.220 --> 41:21.220
在模板的元素内部

41:21.220 --> 41:24.220
要显示来自于数据的东西

41:24.220 --> 41:25.220
使用什么呢

41:25.220 --> 41:28.220
在模板里面可以使用差值

41:28.220 --> 41:30.220
差值

41:30.220 --> 41:31.220
差值是什么

41:31.220 --> 41:32.220
值得什么意思

41:32.220 --> 41:34.220
在模板中

41:34.220 --> 41:37.220
模板的元素内部

41:37.220 --> 41:38.220
在元素里边

41:38.220 --> 41:40.220
比方说这里有一个H1元素

41:40.220 --> 41:43.220
H1元素的内部使用

41:43.220 --> 41:45.220
两个大扩号

41:45.220 --> 41:48.220
这里可以写GS表达式

41:48.220 --> 41:50.220
你要使用这么一种语法

41:50.220 --> 41:51.220
两个大扩号

41:51.220 --> 41:52.220
两个大扩号

41:52.220 --> 41:54.220
里边写上GS表达式

41:54.220 --> 41:56.220
那么这个模板里面的环境

41:56.220 --> 41:58.220
我们这里先举例子

41:58.220 --> 41:59.220
然后以后起来就明白了

41:59.220 --> 42:01.220
模板环境

42:01.220 --> 42:07.780
默认就是data环境

42:07.780 --> 42:08.780
默认就是

42:08.780 --> 42:09.780
应该说不是data环境

42:09.780 --> 42:11.780
默认就是五幼实力环境

42:11.780 --> 42:12.780
我们先不说这个

42:12.780 --> 42:13.780
不要让其他东西搞不清楚

42:13.780 --> 42:15.780
好 我们看一下怎么写就完事了

42:15.780 --> 42:16.780
比方说这里

42:16.780 --> 42:18.780
我们要读取数据里边的标题

42:18.780 --> 42:19.780
我们怎么写呢

42:19.780 --> 42:21.780
这里边把标题拿出来

42:21.780 --> 42:23.780
直接Title放这儿就完事了

42:23.780 --> 42:25.780
就这么简单

42:25.780 --> 42:26.780
你看几行代码

42:26.780 --> 42:27.780
我们来过一下

42:27.780 --> 42:28.780
这是模板

42:28.780 --> 42:29.780
我们要选择的东西

42:29.780 --> 42:30.780
选择什么呢

42:30.780 --> 42:31.780
选择一个H1元素

42:31.780 --> 42:32.780
H1元素里边什么

42:32.780 --> 42:34.780
来自于一个GS表达式

42:34.780 --> 42:35.780
这个GS

42:35.780 --> 42:36.780
数据来自于哪

42:36.780 --> 42:37.780
里边的title

42:37.780 --> 42:39.780
来自于这个数据

42:39.780 --> 42:40.780
模板配置进去

42:40.780 --> 42:42.780
我们要空置的元素配置进去

42:42.780 --> 42:44.780
我们要空置的数据配置进去

42:44.780 --> 42:46.780
最后创建五幼实力

42:46.780 --> 42:49.780
生成一个五幼实力的对象

42:49.780 --> 42:50.780
然后我们看一下

42:50.780 --> 42:52.780
就会出现一个非常神奇的现象

42:52.780 --> 42:54.780
你看是不是渲染出来了

42:54.780 --> 42:55.780
是不是渲染出来了

42:55.780 --> 42:56.780
对吧

42:56.780 --> 42:57.780
说明什么呢

42:57.780 --> 42:58.780
说明这个是生销的

42:58.780 --> 42:59.780
对不对

42:59.780 --> 43:00.780
而且不仅如此

43:00.780 --> 43:01.780
大家看着

43:01.780 --> 43:05.100
我们不是拿到一个App吗

43:05.100 --> 43:06.100
这个App是啥

43:06.100 --> 43:08.100
App就是刚才我们那个五幼实力

43:08.100 --> 43:09.100
对吧

43:09.100 --> 43:10.100
五幼的实力

43:10.100 --> 43:11.100
我们通过五幼的实力

43:11.100 --> 43:13.100
可以更改数据

43:13.100 --> 43:14.100
刚才的数据不是title吗

43:14.100 --> 43:15.100
对不对

43:15.100 --> 43:16.100
好改一下

43:16.100 --> 43:17.100
你看着

43:17.100 --> 43:18.100
不要眨眼睛

43:18.100 --> 43:19.100
一回车

43:19.100 --> 43:20.100
你把这个数据一改

43:20.100 --> 43:21.100
你看这个界面是不是跟着改了

43:21.100 --> 43:23.100
这就是我们说的响应

43:23.100 --> 43:25.100
数据的变化

43:25.100 --> 43:28.100
它会导致界面发生变化

43:28.100 --> 43:29.100
重新渲染

43:29.100 --> 43:30.100
就是五幼它在盯着它看

43:30.100 --> 43:32.100
你这个数据变没变了

43:32.100 --> 43:33.100
数据变了

43:33.100 --> 43:35.100
它就把这个界面重新渲染

43:35.100 --> 43:36.100
重新渲染

43:36.100 --> 43:38.100
明白这个意思吗

43:38.100 --> 43:39.100
就是这个意思

43:39.100 --> 43:40.100
所以说我们这里配置的数据

43:40.100 --> 43:41.100
它是想用式的

43:41.100 --> 43:43.100
再看

43:43.100 --> 43:45.100
title改变一下

43:45.100 --> 43:47.100
你看是不是变了

43:47.100 --> 43:48.100
而且注意哦

43:48.100 --> 43:49.100
title我们在哪里写的

43:49.100 --> 43:51.100
是不是在App里面写的

43:51.100 --> 43:54.100
接下来我们开始来讲一些有意思的东西了

43:54.100 --> 43:55.100
这里涉及到一些原理

43:55.100 --> 43:57.100
它是怎么做的

43:57.100 --> 43:59.100
奇怪哦

43:59.100 --> 44:00.100
很奇怪

44:00.100 --> 44:02.100
我们这个title写的配置在哪呢

44:02.100 --> 44:04.100
是不是配置在配置对象里面

44:04.100 --> 44:06.100
data属性里面的title

44:06.100 --> 44:08.100
你说我们改标题应该改啥

44:08.100 --> 44:11.100
是不是改config.data.title

44:11.100 --> 44:12.100
这才是正确的做法

44:12.100 --> 44:14.100
改这个标题

44:14.100 --> 44:15.100
对不对

44:15.100 --> 44:16.100
改这个标题

44:16.100 --> 44:17.100
这里会发现标题

44:17.100 --> 44:19.100
改了到时候也可以变

44:19.100 --> 44:21.100
但是呢

44:21.100 --> 44:22.100
你会发现

44:22.100 --> 44:25.100
我们为什么没有去改这个东西呢

44:25.100 --> 44:28.100
为什么没有去config.data.title呢

44:28.100 --> 44:30.100
为什么没有去改它呢

44:30.100 --> 44:32.100
而转而去改了谁

44:32.100 --> 44:34.100
转而去改了App里面的title

44:34.100 --> 44:35.100
对吧

44:35.100 --> 44:37.920
转而去改了它

44:37.920 --> 44:39.920
转而去改了它

44:39.920 --> 44:41.920
那么我们凭什么App里面

44:41.920 --> 44:42.920
也有一个title属性的

44:42.920 --> 44:46.230
我们来看一下这个App对象

44:46.230 --> 44:48.230
看一下这个App对象

44:48.230 --> 44:49.230
App对象里面

44:49.230 --> 44:52.230
你看是不是有了这么一个title属性

44:52.230 --> 44:53.230
对吧

44:53.230 --> 44:54.230
是不是有这么一个title属性

44:54.230 --> 44:55.230
好

44:55.230 --> 44:57.230
那么这个title属性哪来的呢

44:57.230 --> 44:58.230
它是这样子

44:58.230 --> 45:01.230
当你创建一个五幼实力的时候

45:01.230 --> 45:04.800
这里我们记个笔记

45:04.800 --> 45:09.800
它使用当创建五幼实力的时候

45:09.800 --> 45:16.800
五幼会将下面的成员提升到

45:16.800 --> 45:18.800
五幼对象中

45:18.800 --> 45:21.800
五幼实力中

45:21.800 --> 45:24.800
下面的配置成员

45:24.800 --> 45:25.800
就是你创建一个五幼

45:25.800 --> 45:28.800
五幼实力是不通过六一个五幼来创建的

45:28.800 --> 45:30.800
你看这里是不通过一个六一个五幼

45:30.800 --> 45:31.800
把配置传进去创建的

45:31.800 --> 45:33.800
那么配置里面是不是有很多东西

45:33.800 --> 45:34.800
那么其中一个是data对吧

45:34.800 --> 45:36.800
那么五幼它会做什么事呢

45:36.800 --> 45:37.800
它会做这么一件事

45:37.800 --> 45:41.800
它首先是把data配置中的所有成员

45:41.800 --> 45:43.800
提升到五幼实力里面去

45:43.800 --> 45:45.800
你看我们data里面配置的东西

45:45.800 --> 45:46.800
就全部到五幼里面去了

45:46.800 --> 45:48.800
比如说data里面还可以配置很多东西

45:48.800 --> 45:51.800
比如说一个配置abc123

45:51.800 --> 45:52.800
随便配置

45:52.800 --> 45:53.800
咱们来看一下

45:53.800 --> 45:55.800
你看会发现这个五幼实力里面

45:55.800 --> 45:57.800
也会多一个abc属性

45:57.800 --> 45:58.800
是不是也多一个abc属性

45:58.800 --> 45:59.800
对吧

45:59.800 --> 46:01.800
它把提到五幼实力里面去了

46:01.800 --> 46:04.800
那么它为什么要这样做呢

46:04.800 --> 46:06.800
它这样做的目的

46:06.800 --> 46:08.800
data配置要提出去

46:08.800 --> 46:10.800
为什么要提data配置里面的东西

46:10.800 --> 46:12.800
是因为这样做的目的是

46:12.800 --> 46:15.800
为了实现响应式

46:15.800 --> 46:17.800
它是为了实现响应式的

46:17.800 --> 46:21.800
为什么它要用这种方式来实现响应式

46:21.800 --> 46:23.800
因为它要监控我们数据

46:23.800 --> 46:24.800
它到底没有发生变化

46:24.800 --> 46:26.800
它凭什么我给这个抬头复制

46:26.800 --> 46:27.800
它就变了呢

46:27.800 --> 46:30.800
是因为这个抬头复制的时候

46:30.800 --> 46:32.800
它是执行的一个函数

46:32.800 --> 46:34.800
五幼给你写好的函数

46:34.800 --> 46:36.800
你给它以运行这句话的时候

46:36.800 --> 46:38.800
实际上执行的是五幼的一个函数

46:38.800 --> 46:40.800
它怎么来说到这一点的

46:40.800 --> 46:43.800
大家见过这个东西吗

46:43.800 --> 46:45.800
obj

46:45.800 --> 46:46.800
defend

46:46.800 --> 46:47.800
property

46:47.800 --> 46:49.800
我记得我有天公开课都讲过的

46:49.800 --> 46:51.800
见过这个东西吗

46:51.800 --> 46:53.800
有没有见过

46:54.800 --> 46:55.800
是不是这个东西

46:55.800 --> 46:56.800
那么这个东西

46:56.800 --> 46:58.800
是不是可以配置set和get

46:58.800 --> 46:59.800
对吧

46:59.800 --> 47:00.800
那么在这个get里边

47:00.800 --> 47:01.800
是不是你要得到属性

47:01.800 --> 47:02.800
是不是要经过一个函数

47:02.800 --> 47:04.800
你设置属性是不是要经过一个函数

47:04.800 --> 47:06.800
它实际上就是把data

47:06.800 --> 47:08.800
它就便利data

47:08.800 --> 47:10.800
就是便利你这里配置对象里边的data

47:10.800 --> 47:11.800
就配置这个东西

47:11.800 --> 47:12.800
便利这个东西

47:12.800 --> 47:14.800
把便利的结果

47:14.800 --> 47:16.800
然后提到这个

47:16.800 --> 47:19.800
Apple里边去

47:19.800 --> 47:21.800
把便利的结果提到这个

47:21.800 --> 47:23.800
就是提到这个实力里边去

47:23.800 --> 47:24.800
五幼实力里边去

47:24.800 --> 47:26.800
于是实力里边的属性

47:26.800 --> 47:28.800
它全是通过这个东西来创建的

47:28.800 --> 47:29.800
敌犯property

47:29.800 --> 47:31.800
因此你该这个属性复制的时候

47:31.800 --> 47:33.800
它就知道你改了这个数据了

47:33.800 --> 47:34.800
它就知道该重新券了

47:34.800 --> 47:35.800
就是这么个意思

47:35.800 --> 47:36.800
它就通过这个东西

47:36.800 --> 47:38.800
来实现详情似的

47:38.800 --> 47:39.800
不过这里说一句

47:39.800 --> 47:41.800
五幼的3.0过后

47:41.800 --> 47:43.800
我们现在讲的是五幼2.0

47:43.800 --> 47:45.800
五幼3.0过后

47:45.800 --> 47:46.800
它不再使用这种方式了

47:46.800 --> 47:49.800
它要使用我们现在ES6里边

47:49.800 --> 47:51.800
新出来的就是proxy

47:51.800 --> 47:52.800
就对象代理

47:52.800 --> 47:53.800
对象代理

47:53.800 --> 47:54.800
大家听过没

47:54.800 --> 47:55.800
应该学过吧

47:55.800 --> 47:56.800
对吧

47:56.800 --> 47:58.800
ES6里边就有对象代理

47:58.800 --> 48:00.800
它要用对象代理实现了

48:00.800 --> 48:03.800
就是以前它是用敌犯property实现的

48:03.800 --> 48:05.800
它为了实现详意

48:05.800 --> 48:06.800
它会把它提出来

48:06.800 --> 48:07.800
它提出来的一个东西

48:07.800 --> 48:08.800
data配置

48:08.800 --> 48:09.800
以后我们会看到

48:09.800 --> 48:12.800
它还会提出来别的东西

48:12.800 --> 48:14.800
好 那么现在我们解释清楚了

48:14.800 --> 48:15.800
那么这里模板里边

48:15.800 --> 48:17.800
模板里边的环境是什么环境呢

48:17.800 --> 48:19.800
为什么可以直接写个台统呢

48:19.800 --> 48:21.800
因为在模板里边书写代码

48:21.800 --> 48:23.800
你可以认为它里边的Z是

48:23.800 --> 48:24.800
指向的是谁呢

48:24.800 --> 48:26.800
指向的就是那个

48:26.800 --> 48:27.800
5u的实力

48:27.800 --> 48:28.800
模板里边的Z

48:28.800 --> 48:30.800
指向的就是5u的实力

48:30.800 --> 48:32.800
你可以这样去理解

48:32.800 --> 48:34.800
所以说你可以使用

48:34.800 --> 48:35.800
实力里边的其他东西

48:35.800 --> 48:37.800
就是实力里边的所有东西都可以使用

48:37.800 --> 48:38.800
你看实力里边

48:38.800 --> 48:39.800
是不是这个5u实力里边

48:39.800 --> 48:40.800
是不是有台统这个属性

48:40.800 --> 48:41.800
所以说你在这里

48:41.800 --> 48:42.800
可以直接出写台统

48:42.800 --> 48:43.800
就是这个原因

48:43.800 --> 48:46.800
因为它的环境就是一个实力环境

48:46.800 --> 48:47.800
那么以后我们刚才看到了

48:47.800 --> 48:48.800
这个实力里边

48:48.800 --> 48:50.800
为什么还有浪漫起发动的一大堆东西呢

48:50.800 --> 48:52.800
你看一下这些属性

48:52.800 --> 48:53.800
我都现在不着急说

48:53.800 --> 48:54.800
这些属性是干嘛用的

48:54.800 --> 48:55.800
目前呢

48:55.800 --> 48:57.800
我们很多东西都用不上

48:57.800 --> 48:58.800
我们来看一下这些属性

48:58.800 --> 49:00.800
它的名字很奇怪

49:00.800 --> 49:02.800
它的名字前面是不是有个多了

49:02.800 --> 49:03.800
对吧

49:03.800 --> 49:05.800
也属性名字是前面一个多了

49:05.800 --> 49:07.800
有些属性前面是不是有个下滑线

49:07.800 --> 49:08.800
为什么会这样子

49:08.800 --> 49:09.800
它为什么要加多了

49:09.800 --> 49:11.800
要加下滑线呢

49:11.800 --> 49:15.800
它为什么要加这个多了和下滑线呢

49:15.800 --> 49:17.800
是不是为了防止

49:19.800 --> 49:22.800
防止名称冲突

49:22.800 --> 49:24.800
为了防止名称冲突

49:24.800 --> 49:25.800
为什么呢

49:25.800 --> 49:28.800
因为它会把你data里边配置的东西

49:28.800 --> 49:29.800
是不是提出去

49:29.800 --> 49:30.800
假如说你提到

49:30.800 --> 49:33.800
比如说你这里面有这么一个属性叫俱准

49:33.800 --> 49:35.800
有这么一个属性叫俱准

49:35.800 --> 49:36.800
它这里显示的是俱准

49:36.800 --> 49:37.800
这个属性

49:37.800 --> 49:39.800
那这样子一提的话

49:39.800 --> 49:40.800
由于五佑对象里边

49:40.800 --> 49:42.800
本身它自带了很多属性

49:42.800 --> 49:44.800
这些属性有些地方它会能发挥作用的

49:44.800 --> 49:46.800
目前我们没什么用

49:46.800 --> 49:48.800
但是有些时候会发挥作用的

49:48.800 --> 49:49.800
它里面有了一些属性

49:49.800 --> 49:51.800
如果说你不加处理的话

49:51.800 --> 49:52.800
这个属性一提出来

49:52.800 --> 49:54.800
是不是把之前的属性就覆盖掉了

49:54.800 --> 49:56.800
之前它自己内部的属性就覆盖掉了

49:56.800 --> 49:57.800
对不对

49:57.800 --> 50:00.800
所以说它会把自己特有的属性

50:00.800 --> 50:02.800
加上多了

50:02.800 --> 50:03.800
加上多了

50:03.800 --> 50:04.800
而你自己的属性

50:04.800 --> 50:06.800
你就不要去加多了下滑线了

50:06.800 --> 50:10.800
这是为了防止名称命名冲突

50:10.800 --> 50:12.800
这里写一下

50:12.800 --> 50:17.800
五佑会将自身

50:17.800 --> 50:20.800
五佑会将自身的成员

50:23.800 --> 50:29.800
名称前加上多了货下滑线

50:29.800 --> 50:31.800
那么到底加多了还是下滑线的

50:31.800 --> 50:32.800
是这样子

50:32.800 --> 50:33.800
它是这么个意思

50:33.800 --> 50:34.800
如果再加的是多了

50:34.800 --> 50:35.800
那么这个属性

50:35.800 --> 50:36.800
这个成员

50:36.800 --> 50:38.800
你可以使用的

50:38.800 --> 50:39.800
你可以使用的

50:39.800 --> 50:41.800
如果是下滑线的话

50:41.800 --> 50:42.800
那是它内部使用的

50:42.800 --> 50:43.800
你不要去使用

50:43.800 --> 50:45.800
加多了你可以使用它这个成员

50:45.800 --> 50:47.800
它提供了一些函数

50:47.800 --> 50:48.800
一些属性

50:48.800 --> 50:49.800
你是可以用的

50:49.800 --> 50:50.800
但是加下滑线的话

50:50.800 --> 50:51.800
你是不能用的

50:51.800 --> 50:53.800
就这么个意思

50:53.800 --> 50:56.800
它是为了防止命名冲突

50:56.800 --> 50:58.800
为了防止

50:58.800 --> 51:02.800
由于有提升的存在

51:02.800 --> 51:03.800
这个提升不是变量提升

51:03.800 --> 51:05.800
它是把这个配置里面的东西

51:05.800 --> 51:06.800
提到实力里面去

51:06.800 --> 51:08.800
所以说它要加上这个东西

51:08.800 --> 51:14.800
为了防止命名冲突

51:15.800 --> 51:18.800
就是关于无忧的实力里面的东西

51:18.800 --> 51:19.800
好来吧

51:19.800 --> 51:20.800
我们继续

51:20.800 --> 51:23.800
那么目前我们实现了这么一个标题

51:23.800 --> 51:24.800
这么一个标题

51:24.800 --> 51:26.800
那么接下来我们接着实现

51:26.800 --> 51:28.800
我们现在接下来要实现它

51:28.800 --> 51:30.800
下边还有个文本框

51:30.800 --> 51:32.800
还有一个列表

51:32.800 --> 51:33.800
对不对

51:33.800 --> 51:35.800
咱们先来实现这个列表

51:35.800 --> 51:36.800
或者说

51:36.800 --> 51:37.800
对吧

51:37.800 --> 51:38.800
我们现在实现这个列表

51:38.800 --> 51:40.800
现在这个列表

51:40.800 --> 51:42.800
那么这个列表怎么实现呢

51:43.800 --> 51:44.800
现在我们以后

51:44.800 --> 51:46.800
用无忧来开发的时候

51:46.800 --> 51:48.800
你会发现由于无忧享用式的存在

51:48.800 --> 51:50.800
我们现在是不是只要关注数据

51:50.800 --> 51:51.800
就完事了

51:51.800 --> 51:53.800
是不是只需要关注数据

51:53.800 --> 51:54.800
因为数据一变

51:54.800 --> 51:55.800
接面就跟着变了

51:55.800 --> 51:56.800
对吧

51:56.800 --> 51:57.800
一数据是啥

51:57.800 --> 51:58.800
接面就跟着实现了

51:58.800 --> 51:59.800
就完事了

51:59.800 --> 52:00.800
所以我们只需要关注数据

52:00.800 --> 52:01.800
就完事了

52:01.800 --> 52:02.800
那么我们现在下面有一个

52:02.800 --> 52:03.800
就是商品列表

52:03.800 --> 52:04.800
那么我们首先想到的是啥

52:04.800 --> 52:06.800
不是什么界面UOLI元素

52:06.800 --> 52:07.800
不是这个

52:07.800 --> 52:08.800
想到的是什么

52:08.800 --> 52:09.800
想到的是数据

52:09.800 --> 52:10.800
我这里应该有个啥

52:10.800 --> 52:11.800
是不是应该有个商品数据

52:11.800 --> 52:12.800
说大个字

52:13.800 --> 52:14.800
是一个商品数据

52:15.800 --> 52:20.140
商品数据里边

52:20.140 --> 52:21.140
每一个商品是不是一个对象

52:22.140 --> 52:23.140
对吧

52:23.140 --> 52:24.140
每一个商品是不是一个对象

52:25.140 --> 52:26.140
好

52:26.140 --> 52:27.140
每一个商品表

52:27.140 --> 52:28.140
商品里边有两个属性

52:28.140 --> 52:29.140
一个是name

52:29.140 --> 52:30.140
来吧

52:30.140 --> 52:31.140
我们随便写几个商品

52:31.140 --> 52:33.140
比如说华为手机

52:34.140 --> 52:35.140
stock

52:35.140 --> 52:36.140
stock表示库存

52:36.140 --> 52:37.140
库存的话比较10个

52:37.140 --> 52:38.140
10个

52:38.140 --> 52:39.140
好

52:39.140 --> 52:40.140
然后这里

52:40.140 --> 52:41.140
name

52:41.140 --> 52:42.140
为什么呢

52:42.140 --> 52:43.140
为那个就是小米手机

52:44.140 --> 52:45.140
好

52:45.140 --> 52:46.140
这里stock

52:46.140 --> 52:47.140
库存

52:47.140 --> 52:48.140
库存多少呢

52:48.140 --> 52:49.140
八个

52:49.140 --> 52:50.140
再来一个

52:50.140 --> 52:51.140
iPhone

52:52.140 --> 52:53.140
iPhone

52:53.140 --> 52:54.140
stock

52:54.140 --> 52:55.140
为11个

52:55.140 --> 52:56.140
比方说吧

52:56.140 --> 52:58.140
咱们写到这么一个商品数据

52:58.140 --> 52:59.140
你看我们配上哪

52:59.140 --> 53:00.140
是不是配上数据里边的

53:00.140 --> 53:01.140
我们以后呢

53:01.140 --> 53:02.140
做任何东西

53:02.140 --> 53:03.140
先想数据

53:03.140 --> 53:04.140
好

53:04.140 --> 53:05.140
数据想完了过后

53:05.140 --> 53:06.140
现在有数据了

53:06.140 --> 53:07.140
你就想着有数据了

53:07.140 --> 53:08.140
有了数据之后

53:08.140 --> 53:10.140
现在我们把数据渲染到页面上

53:10.140 --> 53:12.140
比方说我们这里写个DIV

53:12.140 --> 53:13.140
DIV里边

53:13.140 --> 53:14.140
然后你现在保存

53:14.140 --> 53:15.140
你看

53:16.140 --> 53:17.140
这边

53:17.140 --> 53:18.140
他把我戳了

53:18.140 --> 53:19.140
这个戳了

53:19.140 --> 53:20.140
大家要引起重视

53:20.140 --> 53:21.140
他说什么意思呢

53:21.140 --> 53:22.140
他说

53:22.140 --> 53:26.140
5u只能支持单个根元数

53:26.140 --> 53:29.140
模板里边必须要是单个根元数

53:29.140 --> 53:31.140
也就是你这里不能写一个

53:31.140 --> 53:32.140
A7又写DIV

53:32.140 --> 53:33.140
是不行的

53:33.140 --> 53:34.140
你必须要有个单个根元数

53:34.140 --> 53:35.140
把整个包起来

53:35.140 --> 53:37.140
那么我们这个东西简单

53:37.140 --> 53:38.140
就加个DIV在外面

53:38.140 --> 53:39.140
套一个就行了

53:39.140 --> 53:40.140
套一个就行了

53:42.140 --> 53:44.140
他必须要有单个根元数

53:44.140 --> 53:46.140
你不能有直接两个兄弟节点

53:46.140 --> 53:48.140
他根元数必须要注意

53:48.140 --> 53:51.140
因为他到时候会生成一个数形结构

53:51.140 --> 53:52.140
好

53:52.140 --> 53:53.140
咱们接着看

53:53.140 --> 53:54.140
那么现在到这里

53:54.140 --> 53:56.140
我们要显示很多商品

53:56.140 --> 53:57.140
我们数据哪来

53:57.140 --> 53:58.140
是不是来自于这

53:58.140 --> 53:59.140
第一件商品

53:59.140 --> 54:01.140
如果说我们直接手写的话

54:01.140 --> 54:03.140
你看直接手写怎么写

54:03.140 --> 54:05.140
如果说我们直接手写的话怎么写

54:05.140 --> 54:06.140
好 第一个Li

54:06.140 --> 54:08.140
Li里边

54:08.140 --> 54:09.140
商品的名称是啥

54:09.140 --> 54:11.140
名称是不是来自于哪

54:11.140 --> 54:14.140
怎么写PRODUGTS

54:14.140 --> 54:16.140
PRODUGTS

54:16.140 --> 54:18.140
第一项点Li

54:18.140 --> 54:19.140
是不是这样子写

54:19.140 --> 54:20.140
行不行 这样子写

54:20.140 --> 54:22.140
手想说行不行

54:22.140 --> 54:24.140
可不可以这样子写

54:24.140 --> 54:26.140
可不可以

54:26.140 --> 54:29.140
可不可以这样子写

54:29.140 --> 54:30.140
是不是可以

54:30.140 --> 54:31.140
对吧

54:31.140 --> 54:34.140
刷新一次

54:34.140 --> 54:35.140
这里头

54:35.140 --> 54:39.640
他说我写错了

54:39.640 --> 54:40.640
我这里写错了

54:40.640 --> 54:41.640
PRODUGTS

54:41.640 --> 54:42.640
PRODUGTS

54:42.640 --> 54:43.640
好 看一下吧

54:43.640 --> 54:44.640
看看能不能这些

54:44.640 --> 54:45.640
是不是就显示出来了

54:45.640 --> 54:46.640
对吧 就这么简单

54:46.640 --> 54:47.640
就这么简单

54:47.640 --> 54:48.640
而且呢

54:48.640 --> 54:49.640
而且这个数据呢

54:49.640 --> 54:50.640
不仅显示出来了

54:50.640 --> 54:52.640
而且它具有相应式

54:52.640 --> 54:53.640
而且具有相应式

54:53.640 --> 54:55.640
比方说我把第一项改一下

54:55.640 --> 54:57.640
比方说我把第一项改一下

54:57.640 --> 54:58.640
那个什么呢

54:58.640 --> 55:00.640
PRODUGTS

55:00.640 --> 55:02.640
App.PRODUGTS

55:02.640 --> 55:04.640
第一项

55:04.640 --> 55:05.640
给它复制

55:05.640 --> 55:06.640
重新复制

55:06.640 --> 55:07.640
重新复制为一个Name

55:07.640 --> 55:09.640
ABC

55:09.640 --> 55:10.640
Stalk

55:10.640 --> 55:11.640
一二三

55:11.640 --> 55:14.640
你看一下 给复制

55:14.640 --> 55:18.210
这样子复制

55:18.210 --> 55:19.210
这样子复制不行

55:19.210 --> 55:20.210
这样子复制不行

55:20.210 --> 55:22.210
我们以后会说为什么不行

55:22.210 --> 55:24.210
我们以后会说为什么不行

55:24.210 --> 55:25.210
得这样复制

55:25.210 --> 55:26.210
得这样复制

55:26.210 --> 55:28.210
调内ABC

55:28.210 --> 55:31.210
对吧

55:31.210 --> 55:35.220
都我吗

55:35.220 --> 55:36.220
你看看

55:36.220 --> 55:38.220
PRODUGTS

55:38.220 --> 55:40.220
调内

55:40.220 --> 55:41.220
看一下

55:41.220 --> 55:44.730
PRODUGTS

55:44.730 --> 55:45.730
调内

55:45.730 --> 55:47.730
没问题的呀

55:47.730 --> 55:50.100
没问题的呀

55:50.100 --> 55:52.100
得Stalk

55:52.100 --> 55:54.100
一二三

55:54.100 --> 55:56.100
我们还没有显示库存

55:56.100 --> 55:57.100
可以啊

55:57.100 --> 55:58.100
为什么刚才不行呢

55:58.100 --> 55:59.100
可以啊

55:59.100 --> 56:01.100
刚才我已经犯了错了

56:01.100 --> 56:03.100
刚才我已经犯了一个错了

56:03.100 --> 56:04.100
不能复制这个东西

56:04.100 --> 56:05.100
复制这个东西

56:05.100 --> 56:06.100
它内部已经出问题了

56:06.100 --> 56:07.100
不能直接给它复制

56:07.100 --> 56:08.100
以后我会说为什么

56:08.100 --> 56:10.100
你这样复制是没问题的

56:10.100 --> 56:12.100
这样复制是具有相应式的

56:12.100 --> 56:14.100
是可以修改这个对象的

56:14.100 --> 56:15.100
它修改了之后

56:15.100 --> 56:17.100
仍然可以具有相应式

56:17.100 --> 56:18.100
只不过

56:18.100 --> 56:19.100
这种数据的写法

56:19.100 --> 56:20.100
太麻烦了

56:20.100 --> 56:21.100
因为你真的要一对一个书写

56:21.100 --> 56:23.100
你也不知道这个数据有多少个

56:23.100 --> 56:25.100
是不是最好要用循环

56:25.100 --> 56:27.100
循环生存这个LI元素

56:27.100 --> 56:29.100
最好是用循环生存

56:29.100 --> 56:30.100
那么怎么来循环呢

56:30.100 --> 56:32.100
这里要介绍模板里面

56:32.100 --> 56:33.100
第二个东西

56:33.100 --> 56:35.100
模板里面刚才介绍差值对吧

56:35.100 --> 56:36.100
在元素内部

56:36.100 --> 56:37.100
可以使用这个表达式来差值

56:37.100 --> 56:38.100
那么模板里面

56:38.100 --> 56:39.100
还有另外一个东西

56:39.100 --> 56:41.100
叫做指定

56:41.100 --> 56:42.100
指定

56:42.100 --> 56:44.100
在模板里面书写的

56:44.100 --> 56:46.100
是在模板里面书写的

56:46.100 --> 56:47.100
模板里面

56:47.100 --> 56:48.100
template里面书写的

56:48.100 --> 56:49.100
叫指定

56:49.100 --> 56:50.100
指定书写在哪呢

56:50.100 --> 56:57.100
指定通常作为元素的属性存在

56:57.100 --> 56:59.100
名称上

56:59.100 --> 57:02.100
以V横杠开头

57:02.100 --> 57:04.100
是一个V横杠开头的

57:04.100 --> 57:05.100
叫做指定

57:05.100 --> 57:06.100
那么5u里面

57:06.100 --> 57:07.100
提供了很多很多的指定

57:07.100 --> 57:09.100
我们这就可能要介绍了一些

57:09.100 --> 57:10.100
常见的

57:10.100 --> 57:11.100
5u里面常见的指定

57:11.100 --> 57:12.100
其中一个指定

57:12.100 --> 57:13.100
叫做V4

57:13.100 --> 57:14.100
V4指定

57:14.100 --> 57:18.100
表示用于循环生成元素

57:18.100 --> 57:20.100
用于循环生成元素

57:20.100 --> 57:21.100
那么写到哪呢

57:21.100 --> 57:23.100
写到这个元素上面

57:23.100 --> 57:27.100
V4

57:27.100 --> 57:28.100
表示什么意思呢

57:28.100 --> 57:31.100
表示我要循环生成这个Li元素

57:31.100 --> 57:32.100
怎么循环呢

57:32.100 --> 57:34.100
它这里面有一个固定的语法

57:34.100 --> 57:35.100
叫做

57:35.100 --> 57:36.100
第一个是辨量名

57:36.100 --> 57:38.100
第二个是关键之音

57:38.100 --> 57:41.100
第三个是你的数组

57:41.100 --> 57:42.100
第三个是你的数组

57:42.100 --> 57:43.100
就这么个意思

57:43.100 --> 57:44.100
它什么意思呢

57:44.100 --> 57:47.100
循环这个product

57:47.100 --> 57:48.100
循环这个数组

57:48.100 --> 57:49.100
每循环一次

57:49.100 --> 57:51.100
把数组里面的数据

57:51.100 --> 57:52.100
就是个对象拿出来

57:52.100 --> 57:54.100
放到这个辨量item里边

57:54.100 --> 57:56.100
然后生成一个Li

57:56.100 --> 57:58.100
我再说一次

57:58.100 --> 58:01.540
代码 去掉

58:01.540 --> 58:02.540
循环这个数组

58:02.540 --> 58:04.540
每循环一次

58:04.540 --> 58:06.540
把它的数据取出来

58:06.540 --> 58:08.540
放到辨量item里边

58:08.540 --> 58:10.540
然后生成一个Li

58:10.540 --> 58:11.540
就这么个意思

58:12.540 --> 58:13.540
就这么个意思

58:13.540 --> 58:14.540
我们现在保存

58:14.540 --> 58:15.540
我们这里随便写个

58:15.540 --> 58:16.540
保存

58:16.540 --> 58:17.540
你看一下是不是生成了三个

58:17.540 --> 58:18.540
为什么是三个

58:18.540 --> 58:19.540
因为数组有三项

58:19.540 --> 58:20.540
数组有三项

58:20.540 --> 58:21.540
就这么简单

58:21.540 --> 58:22.540
就是v4指令

58:22.540 --> 58:24.540
Li里面显示啥呢

58:24.540 --> 58:25.540
是不是要插指

58:25.540 --> 58:26.540
显示啥

58:26.540 --> 58:29.540
显示是不是对象的

58:29.540 --> 58:31.540
就是每一次循环对象里边的

58:32.540 --> 58:33.540
不要说我们这里

58:33.540 --> 58:34.540
换个行

58:34.540 --> 58:35.540
看得更清楚一点

58:35.540 --> 58:37.540
我们用个spy元素吧

58:37.540 --> 58:38.540
显示的是啥呢

58:38.540 --> 58:40.540
显示的是item里边的

58:41.540 --> 58:42.540
name

58:42.540 --> 58:43.540
对不对

58:43.540 --> 58:44.540
显示的是这个东西

58:44.540 --> 58:45.540
你看一下是不是显示出来了

58:45.540 --> 58:47.540
比方说我们还要显示一个库存

58:47.540 --> 58:48.540
显示一个库存

58:48.540 --> 58:50.540
那么这里

58:50.540 --> 58:52.540
是不是显示item里边的stock

58:52.540 --> 58:53.540
对吧

58:53.540 --> 58:54.540
好

58:54.540 --> 58:55.540
你看一下

58:55.540 --> 58:56.540
是不是显示出来了

58:56.540 --> 58:57.540
这库存

58:57.540 --> 58:58.540
对不对

58:58.540 --> 58:59.540
库存这一块

58:59.540 --> 59:00.540
你可以用个央式来控制一下吧

59:00.540 --> 59:01.540
比方说这个

59:01.540 --> 59:02.540
给这个class

59:02.540 --> 59:03.540
stock

59:03.540 --> 59:05.540
给个库存的央式

59:05.540 --> 59:07.540
我们这里写个css

59:07.540 --> 59:08.540
简单写一下就完成

59:08.540 --> 59:10.540
我就在页面上写吧

59:11.540 --> 59:12.540
stock

59:12.540 --> 59:13.540
然后color

59:13.540 --> 59:14.540
f10

59:14.540 --> 59:16.540
就随便写个就行了

59:16.540 --> 59:17.540
可以加样子的

59:17.540 --> 59:19.540
跟以前没什么区别

59:19.540 --> 59:20.540
你看库存

59:20.540 --> 59:21.540
对吧

59:21.540 --> 59:22.540
就可以显示出来

59:22.540 --> 59:24.540
这就是显示

59:24.540 --> 59:26.540
而且它是具有响应式的

59:26.540 --> 59:27.540
大家看一下

59:27.540 --> 59:29.540
它是具有响应式的

59:29.540 --> 59:31.540
现在我们去找到这个product

59:31.540 --> 59:33.540
然后往里边加一下

59:33.540 --> 59:35.540
比方说我们之前加过的

59:35.540 --> 59:37.540
name为锤子手机

59:37.540 --> 59:38.540
stock为e

59:38.540 --> 59:39.540
锤子手机一般库存的不太主

59:39.540 --> 59:40.540
对吧

59:40.540 --> 59:42.540
咱们往里边加一项

59:42.540 --> 59:43.540
好

59:43.540 --> 59:44.540
我们看一下

59:44.540 --> 59:45.540
这里也多了一项

59:45.540 --> 59:46.540
为什么

59:46.540 --> 59:47.540
因为数据是响应式的

59:47.540 --> 59:49.540
你更改了这样的数据

59:49.540 --> 59:51.540
是不是吴又受到通知

59:51.540 --> 59:52.540
他受到了通知

59:52.540 --> 59:54.540
然后

59:54.540 --> 59:56.540
他就会重新渲染这个区域

59:56.540 --> 59:57.540
重新渲染这个区域

59:57.540 --> 59:58.540
那么重新渲染的时候

59:58.540 --> 59:59.540
是不是要重新循环

59:59.540 --> 01:00:00.540
重新循环

01:00:00.540 --> 01:00:02.540
是不是就可以拿到新的数据了

01:00:02.540 --> 01:00:04.540
这自然软件出来了

01:00:07.540 --> 01:00:08.540
咋

01:00:08.540 --> 01:00:09.540
扑洗是啥寒树

01:00:09.540 --> 01:00:13.110
扑洗是啥寒树

01:00:13.110 --> 01:00:14.110
兄弟

01:00:14.110 --> 01:00:15.110
醒醒

01:00:15.110 --> 01:00:16.110
这数组寒树扑洗

01:00:19.110 --> 01:00:20.110
是遭晕的吗

01:00:20.110 --> 01:00:21.110
这是个数组

01:00:21.110 --> 01:00:23.110
数组里边有个扑洗

01:00:23.110 --> 01:00:24.110
往里边加一下

01:00:24.110 --> 01:00:26.110
加一个数据

01:00:26.110 --> 01:00:29.320
这一块

01:00:29.320 --> 01:00:31.320
有没有同学有问题

01:00:34.020 --> 01:00:36.020
真的没问题吗

01:00:36.020 --> 01:00:37.020
真的没问题吗

01:00:40.020 --> 01:00:42.020
这里其实是有一个疑问的

01:00:42.020 --> 01:00:43.020
是有一个疑问的

01:00:43.020 --> 01:00:45.020
因为这里的app.producer

01:00:45.020 --> 01:00:46.020
扑洗

01:00:46.020 --> 01:00:47.020
我们刚才说了

01:00:47.020 --> 01:00:48.020
他为什么能收到通知

01:00:48.020 --> 01:00:50.020
是因为他重新给你

01:00:50.020 --> 01:00:51.020
他为了实现响应

01:00:51.020 --> 01:00:53.020
是他把这个提升出去了

01:00:53.020 --> 01:00:54.020
对吧

01:00:54.020 --> 01:00:55.020
把那个属性提升出去了

01:00:55.020 --> 01:00:57.020
但是你这里有给属性复职吗

01:00:59.020 --> 01:01:00.020
提升出去了一个属性重新复职

01:01:00.020 --> 01:01:01.020
他会收到通知

01:01:01.020 --> 01:01:02.020
对吧

01:01:02.020 --> 01:01:04.020
但是你这里有没有给属性重新复职

01:01:04.020 --> 01:01:05.020
没有

01:01:05.020 --> 01:01:07.020
我是调用数组里边的方法

01:01:07.020 --> 01:01:09.020
我调用的是数组方法

01:01:09.020 --> 01:01:10.020
是数组的方法

01:01:10.020 --> 01:01:12.020
是GS里边写好的方法

01:01:12.020 --> 01:01:14.020
无佑他凭什么知道我调用了

01:01:14.020 --> 01:01:16.020
调用了数组的扑洗方法呢

01:01:16.020 --> 01:01:18.020
他怎么知道我调用了数组的扑洗方法

01:01:18.020 --> 01:01:19.020
然后重新选择一面呢

01:01:19.020 --> 01:01:20.020
他并不知道

01:01:20.020 --> 01:01:22.020
所以说无佑给你

01:01:22.020 --> 01:01:24.020
说了一个什么事情呢

01:01:24.020 --> 01:01:25.020
他让把这个数组呢

01:01:25.020 --> 01:01:27.020
里边的很多方法给你重写了

01:01:27.020 --> 01:01:28.020
重新写了

01:01:28.020 --> 01:01:29.020
于是呢

01:01:29.020 --> 01:01:30.020
你去看到这个

01:01:30.020 --> 01:01:32.020
app.producer里边的扑洗呢

01:01:32.020 --> 01:01:33.020
我们来对比一下

01:01:33.020 --> 01:01:35.020
跟这个array里边的

01:01:35.020 --> 01:01:37.020
prototype里边的扑洗

01:01:37.020 --> 01:01:39.020
两个是不是一个东西呢

01:01:39.020 --> 01:01:40.020
他们不是一个东西

01:01:40.020 --> 01:01:41.020
有这个数组里边的扑洗方法

01:01:41.020 --> 01:01:43.020
它是被重写过的

01:01:43.020 --> 01:01:44.020
被重写过的

01:01:44.020 --> 01:01:46.020
这个说法叫做

01:01:46.020 --> 01:01:48.020
无佑的数组变异

01:01:48.020 --> 01:01:50.020
无佑的数组变异

01:01:50.020 --> 01:01:52.020
是不是可以重写过的

01:01:52.020 --> 01:01:53.020
所以说呢

01:01:53.020 --> 01:01:54.020
你在数组里面

01:01:54.020 --> 01:01:56.020
做各种各样的稍稍做

01:01:56.020 --> 01:01:58.020
也不叫稍稍做

01:01:58.020 --> 01:01:59.020
就是普通稍做的时候

01:01:59.020 --> 01:02:00.020
无佑他都能收到通知

01:02:00.020 --> 01:02:02.020
因为他可以重新把方法

01:02:02.020 --> 01:02:03.020
给你写了一遍

01:02:03.020 --> 01:02:05.020
用法是一样的

01:02:05.020 --> 01:02:06.020
但是呢

01:02:06.020 --> 01:02:07.020
刚才的

01:02:07.020 --> 01:02:09.020
为什么不生销呢

01:02:10.020 --> 01:02:11.020
你看啊

01:02:11.020 --> 01:02:12.020
这种情况

01:02:12.020 --> 01:02:13.020
我说

01:02:13.020 --> 01:02:15.020
直接给这个数组里面复制

01:02:15.020 --> 01:02:17.020
他这个东西为什么不生销呢

01:02:17.020 --> 01:02:18.020
为什么不生销呢

01:02:18.020 --> 01:02:19.020
就是因为他这个东西

01:02:19.020 --> 01:02:20.020
收不到通知了

01:02:20.020 --> 01:02:21.020
你这个数据变没变

01:02:21.020 --> 01:02:22.020
数据变了

01:02:22.020 --> 01:02:23.020
但是他收不到通知

01:02:23.020 --> 01:02:24.020
收不到通知

01:02:24.020 --> 01:02:25.020
为什么呢

01:02:25.020 --> 01:02:27.020
因为你这里是用锁印的话

01:02:27.020 --> 01:02:29.020
他是没有给锁印加上那个

01:02:29.020 --> 01:02:30.020
define property

01:02:30.020 --> 01:02:31.020
没有加上define property

01:02:31.020 --> 01:02:32.020
所以说

01:02:32.020 --> 01:02:34.020
他直接使用锁印的时候

01:02:34.020 --> 01:02:36.020
你是收不到这个通知的

01:02:36.020 --> 01:02:37.020
所以大家以后要注意

01:02:37.020 --> 01:02:39.020
在那个使用无佑的数组的时候

01:02:39.020 --> 01:02:41.020
千万不要这样子去

01:02:41.020 --> 01:02:42.020
不要这样子去

01:02:42.020 --> 01:02:43.020
那意思吧

01:02:43.020 --> 01:02:44.020
OK啊

01:02:45.020 --> 01:02:46.020
你可以直接

01:02:46.020 --> 01:02:47.020
更改这里边的属性没问题

01:02:47.020 --> 01:02:49.020
更改这里边的属性没问题

01:02:49.020 --> 01:02:50.020
改属性没问题

01:02:50.020 --> 01:02:51.020
但是你直接使用锁印的话

01:02:51.020 --> 01:02:53.020
他是收不到通知的

01:02:53.020 --> 01:02:54.020
好

01:02:54.020 --> 01:02:56.020
这是关于这一块

01:02:56.020 --> 01:02:57.020
好

01:02:57.020 --> 01:02:58.020
那么现在呢

01:02:58.020 --> 01:02:59.020
你看一下

01:02:59.020 --> 01:03:00.020
我们这里一块

01:03:00.020 --> 01:03:01.020
是不是就已经写的差不多了

01:03:01.020 --> 01:03:02.020
对吧

01:03:02.020 --> 01:03:03.020
这一块就写的差不多了

01:03:03.020 --> 01:03:05.020
那么我们继续按照这个思路来写

01:03:05.020 --> 01:03:07.020
我们前面前后两边

01:03:07.020 --> 01:03:09.020
加上各家上两个按钮

01:03:09.020 --> 01:03:11.020
前后两边

01:03:11.020 --> 01:03:13.020
一个按钮是减

01:03:13.020 --> 01:03:14.020
一个按钮是加

01:03:14.020 --> 01:03:15.020
我们来看一下

01:03:15.020 --> 01:03:17.020
5u里边事件的处理

01:03:17.020 --> 01:03:19.020
一个按钮是减

01:03:19.020 --> 01:03:20.020
一个按钮是加

01:03:20.020 --> 01:03:23.020
那么点减的时候

01:03:23.020 --> 01:03:25.020
我点减的时候

01:03:25.020 --> 01:03:27.020
我是要把这个item的stock减减

01:03:27.020 --> 01:03:28.020
对吧

01:03:28.020 --> 01:03:29.020
是吧

01:03:29.020 --> 01:03:30.020
把item stock减减

01:03:30.020 --> 01:03:31.020
然后点加的时候是吧

01:03:31.020 --> 01:03:32.020
item stock加加

01:03:32.020 --> 01:03:33.020
那么这个东西怎么来做呢

01:03:33.020 --> 01:03:34.020
在5u里边

01:03:34.020 --> 01:03:36.020
你可以给元素注册事件

01:03:36.020 --> 01:03:37.020
怎么注册事件呢

01:03:37.020 --> 01:03:39.020
还是通过指令

01:03:39.020 --> 01:03:40.020
好

01:03:40.020 --> 01:03:41.020
现在我们介绍第二个指令

01:03:41.020 --> 01:03:44.020
叫做VN

01:03:44.020 --> 01:03:48.020
用于注册事件

01:03:48.020 --> 01:03:49.020
用于注册事件

01:03:49.020 --> 01:03:50.020
就这个指令

01:03:50.020 --> 01:03:51.020
好

01:03:51.020 --> 01:03:52.020
那么这个指令怎么用呢

01:03:52.020 --> 01:03:53.020
它这样子用的

01:03:53.020 --> 01:03:54.020
比较给这个按钮注册事件

01:03:54.020 --> 01:03:55.020
不能再使用以前的什么

01:03:55.020 --> 01:03:57.020
add event nation 哪儿的

01:03:57.020 --> 01:03:58.020
不能使用这个的

01:03:58.020 --> 01:03:59.020
要用这种方式

01:03:59.020 --> 01:04:02.020
VN冒号

01:04:03.020 --> 01:04:04.020
然后在后边写上

01:04:04.020 --> 01:04:05.020
事件的名字

01:04:05.020 --> 01:04:06.020
什么名字

01:04:06.020 --> 01:04:08.020
click 写上这个名字

01:04:08.020 --> 01:04:09.020
点击过后干嘛呢

01:04:09.020 --> 01:04:12.020
item stock减减

01:04:12.020 --> 01:04:13.020
减减

01:04:13.020 --> 01:04:14.020
这个东西是不是改变属性

01:04:14.020 --> 01:04:16.020
改变属性它会收到通知的

01:04:16.020 --> 01:04:17.020
然后在这里

01:04:17.020 --> 01:04:20.020
VN item.stock加加

01:04:20.020 --> 01:04:21.020
就这么简单

01:04:21.020 --> 01:04:22.020
你看一个减减

01:04:22.020 --> 01:04:23.020
一个加加

01:04:23.020 --> 01:04:24.020
好 来吧

01:04:24.020 --> 01:04:26.020
好 这边

01:04:26.020 --> 01:04:27.020
减减

01:04:27.020 --> 01:04:28.020
你看 对于是不是已经实现了

01:04:28.020 --> 01:04:29.020
是不是特别特别简单

01:04:29.020 --> 01:04:31.020
为什么现在变得这么简单了

01:04:31.020 --> 01:04:33.020
因为我们现在不用去写什么

01:04:33.020 --> 01:04:34.020
多么操作了

01:04:34.020 --> 01:04:35.020
多么操作不用写了

01:04:35.020 --> 01:04:37.020
我们只管数据的变化就行了

01:04:37.020 --> 01:04:39.020
你点这个按钮

01:04:39.020 --> 01:04:40.020
是不是数据得减少

01:04:40.020 --> 01:04:42.020
数据一减少

01:04:42.020 --> 01:04:43.020
它是享用式的

01:04:43.020 --> 01:04:46.020
自然而然会重新生存界面

01:04:46.020 --> 01:04:47.020
对吧

01:04:47.020 --> 01:04:49.020
这就是给这个

01:04:49.020 --> 01:04:51.020
按钮注册事件用VN

01:04:51.020 --> 01:04:52.020
然后其他事件是不一样的

01:04:52.020 --> 01:04:53.020
什么

01:04:53.020 --> 01:04:54.020
harper 什么

01:04:54.020 --> 01:04:56.020
emosblue 这种一样的

01:04:56.020 --> 01:04:57.020
都是在后边写上

01:04:57.020 --> 01:04:58.020
事件名字就行了

01:04:58.020 --> 01:04:59.020
那么这个VN

01:04:59.020 --> 01:05:00.020
由于我们平时用的比较多

01:05:00.020 --> 01:05:02.020
所以说VU

01:05:02.020 --> 01:05:03.020
它给你做了一个

01:05:03.020 --> 01:05:05.020
就是减写

01:05:05.020 --> 01:05:06.020
余法堂

01:05:06.020 --> 01:05:07.020
余法堂是什么呢

01:05:07.020 --> 01:05:08.020
就是一个at

01:05:08.020 --> 01:05:09.020
你可以把VN

01:05:09.020 --> 01:05:11.020
减写为at

01:05:11.020 --> 01:05:12.020
要这里的

01:05:12.020 --> 01:05:13.020
clic

01:05:13.020 --> 01:05:14.020
可以减写为at

01:05:14.020 --> 01:05:15.020
没问题

01:05:15.020 --> 01:05:16.020
没问题的

01:05:16.020 --> 01:05:18.020
要是给它注册一个事件

01:05:18.020 --> 01:05:19.020
好 你看

01:05:19.020 --> 01:05:20.020
是不是完全一样的

01:05:20.020 --> 01:05:21.020
没问题的 对吧

01:05:21.020 --> 01:05:22.020
没问题的

01:05:22.020 --> 01:05:23.020
好

01:05:23.020 --> 01:05:24.020
那么这是一种写法

01:05:24.020 --> 01:05:25.020
直接把单码输掉到这儿

01:05:25.020 --> 01:05:27.020
但是单码是比较简单

01:05:27.020 --> 01:05:28.020
可以直接输掉到这儿

01:05:29.020 --> 01:05:30.020
那么如果说单码很多了

01:05:30.020 --> 01:05:31.020
你输掉到这儿

01:05:31.020 --> 01:05:32.020
就不太合适了

01:05:32.020 --> 01:05:33.020
那么我们希望

01:05:33.020 --> 01:05:34.020
有一个函数

01:05:34.020 --> 01:05:36.020
能够帮我们来处理

01:05:36.020 --> 01:05:37.020
一个函数来帮我们处理

01:05:37.020 --> 01:05:38.020
然后比方说

01:05:38.020 --> 01:05:39.020
我们能提供一个函数

01:05:39.020 --> 01:05:41.020
这里去调用这个函数

01:05:41.020 --> 01:05:43.020
来处理这个事件

01:05:43.020 --> 01:05:44.020
那么这个函数

01:05:44.020 --> 01:05:45.020
怎么来写呢

01:05:45.020 --> 01:05:46.020
写到哪呢

01:05:46.020 --> 01:05:47.020
写到配置里面

01:05:47.020 --> 01:05:48.020
就是如果说

01:05:48.020 --> 01:05:49.020
你有一些处理函数

01:05:49.020 --> 01:05:50.020
或者是一些普通函数

01:05:50.020 --> 01:05:51.020
你都可以把它写到配置里面

01:05:51.020 --> 01:05:52.020
配置里面

01:05:52.020 --> 01:05:53.020
我们刚才配置到

01:05:53.020 --> 01:05:54.020
有模板

01:05:54.020 --> 01:05:55.020
有什么元素

01:05:55.020 --> 01:05:56.020
对吧

01:05:56.020 --> 01:05:57.020
有这个数据

01:05:57.020 --> 01:05:59.020
这个叫做Message

01:05:59.020 --> 01:06:01.020
Message表示方法

01:06:01.020 --> 01:06:05.020
就是有哪些可以处理的方法

01:06:05.020 --> 01:06:07.020
我们现在回到配置对象里面

01:06:07.020 --> 01:06:10.020
你看都是有关联作用的

01:06:10.020 --> 01:06:12.020
Message里面是配置什么

01:06:12.020 --> 01:06:14.020
配置方法

01:06:14.020 --> 01:06:16.020
配置方法

01:06:16.020 --> 01:06:17.020
比方说

01:06:17.020 --> 01:06:18.020
我们在这里配置一个方法

01:06:18.020 --> 01:06:19.020
配置一个方法

01:06:19.020 --> 01:06:20.020
方法的名字

01:06:20.020 --> 01:06:22.020
就叫做ChangeStalk

01:06:22.020 --> 01:06:23.020
改变什么了

01:06:23.020 --> 01:06:25.020
改变这个方法的名字

01:06:25.020 --> 01:06:27.020
不是吧

01:06:27.020 --> 01:06:28.020
方法干嘛呢

01:06:28.020 --> 01:06:31.020
是改变库存

01:06:31.020 --> 01:06:32.020
你给我一个什么参数呢

01:06:32.020 --> 01:06:33.020
给我一个

01:06:33.020 --> 01:06:35.020
给我一个就是商品

01:06:35.020 --> 01:06:39.580
另外给我一个新的库存

01:06:39.580 --> 01:06:41.580
我来帮你改变库存

01:06:41.580 --> 01:06:42.580
那么这里边怎么写的

01:06:42.580 --> 01:06:44.580
比方说你给我传一个商品型来

01:06:44.580 --> 01:06:45.580
我就把商品的库存改一下

01:06:45.580 --> 01:06:46.580
改成新的库存

01:06:46.580 --> 01:06:47.580
你不就完了吗

01:06:47.580 --> 01:06:48.580
就这么简单

01:06:48.580 --> 01:06:50.580
改变库存

01:06:50.580 --> 01:06:51.580
那么这是个方法

01:06:51.580 --> 01:06:52.580
好

01:06:52.580 --> 01:06:54.580
那么现在我们方法写好了之后

01:06:54.580 --> 01:06:56.580
回到这个模板这里

01:06:56.580 --> 01:06:57.580
模板这里呢

01:06:57.580 --> 01:06:58.580
我们现在点击过后

01:06:58.580 --> 01:06:59.580
我们不希望自己来处理了

01:06:59.580 --> 01:07:01.580
我们希望方法来帮我们处理

01:07:01.580 --> 01:07:02.580
那么我们就可以调用方法

01:07:02.580 --> 01:07:03.580
怎么调用方法呢

01:07:03.580 --> 01:07:05.580
直接书写方法名称

01:07:05.580 --> 01:07:06.580
调用完事了

01:07:06.580 --> 01:07:07.580
好

01:07:07.580 --> 01:07:08.580
直接书写方法名称

01:07:08.580 --> 01:07:09.580
ChangeStalk

01:07:09.580 --> 01:07:10.580
你不知道两个参数吗

01:07:10.580 --> 01:07:11.580
第一个参数

01:07:11.580 --> 01:07:12.580
商品

01:07:12.580 --> 01:07:13.580
Item传给你

01:07:13.580 --> 01:07:14.580
然后呢

01:07:14.580 --> 01:07:15.580
新的库存

01:07:15.580 --> 01:07:16.580
原来的库存

01:07:16.580 --> 01:07:17.580
简一

01:07:17.580 --> 01:07:18.580
不就是新的库存吗

01:07:18.580 --> 01:07:19.580
就是减少

01:07:19.580 --> 01:07:20.580
对吧

01:07:20.580 --> 01:07:22.580
好那么这里加加

01:07:22.580 --> 01:07:23.580
加加

01:07:23.580 --> 01:07:24.580
ItemStalk

01:07:24.580 --> 01:07:25.580
是不是加一

01:07:25.580 --> 01:07:26.580
对吧

01:07:26.580 --> 01:07:27.580
就这么简单对吧

01:07:27.580 --> 01:07:28.580
传两个参数嘛

01:07:28.580 --> 01:07:29.580
商品传进去

01:07:29.580 --> 01:07:31.580
新的库存给你传进去

01:07:31.580 --> 01:07:32.580
然后你自己去玩家

01:07:32.580 --> 01:07:33.580
就是那么现在就是把它

01:07:33.580 --> 01:07:35.580
放到哪里处理呢

01:07:35.580 --> 01:07:36.580
放到就是

01:07:36.580 --> 01:07:37.580
明确里面

01:07:37.580 --> 01:07:38.580
用一个函数来处理

01:07:38.580 --> 01:07:39.580
这样子的结构更加清晰

01:07:39.580 --> 01:07:40.580
因为这里呢

01:07:40.580 --> 01:07:41.580
不处理任何逻辑了

01:07:41.580 --> 01:07:42.580
这里只调用函数

01:07:42.580 --> 01:07:44.580
在函数里面进行处理

01:07:44.580 --> 01:07:45.580
比方说函数里面

01:07:45.580 --> 01:07:46.580
我们就可以多判断

01:07:46.580 --> 01:07:48.580
做一些额外的处理

01:07:48.580 --> 01:07:50.580
如果说你给我的库存小于0

01:07:50.580 --> 01:07:51.580
那么我先把你

01:07:51.580 --> 01:07:53.580
你给我的参数值

01:07:53.580 --> 01:07:55.580
设置为小于0

01:07:55.580 --> 01:07:56.580
然后再处理

01:07:56.580 --> 01:07:57.580
你给我的库存

01:07:57.580 --> 01:07:58.580
是不是一定是

01:07:58.580 --> 01:07:59.580
不可能小于0的

01:07:59.580 --> 01:08:00.580
对吧

01:08:00.580 --> 01:08:01.580
我设置值的手

01:08:01.580 --> 01:08:02.580
一定不可能小于0

01:08:02.580 --> 01:08:03.580
对不对

01:08:03.580 --> 01:08:05.580
这就是改变库存

01:08:05.580 --> 01:08:07.900
看一下吧

01:08:07.900 --> 01:08:08.900
你看点到0过后

01:08:08.900 --> 01:08:09.900
是不是不能点了

01:08:09.900 --> 01:08:10.900
对吧

01:08:10.900 --> 01:08:11.900
不能点了

01:08:11.900 --> 01:08:12.900
开呗

01:08:12.900 --> 01:08:14.900
点到0过后就不能点了

01:08:14.900 --> 01:08:15.900
是不是特别简单

01:08:15.900 --> 01:08:16.900
就是5又复杂吗

01:08:16.900 --> 01:08:17.900
是不是5又复杂

01:08:17.900 --> 01:08:18.900
一点都复杂

01:08:18.900 --> 01:08:19.900
一点都复杂

01:08:19.900 --> 01:08:20.900
有点卡的话

01:08:20.900 --> 01:08:21.900
卡的话刷新项英文

01:08:26.450 --> 01:08:29.020
有点卡吗

01:08:29.020 --> 01:08:30.020
没看下东西

01:08:30.020 --> 01:08:31.020
我没看下东西

01:08:31.020 --> 01:08:32.020
我看下

01:08:33.020 --> 01:08:34.020
我手机

01:08:35.020 --> 01:08:37.020
手机没看完

01:08:38.020 --> 01:08:39.020
这怎么回事

01:08:39.020 --> 01:08:41.020
我是不是要打电信打电话了

01:08:46.860 --> 01:08:47.860
好

01:08:47.860 --> 01:08:48.860
现在我们这一块搞定了

01:08:48.860 --> 01:08:49.860
对吧

01:08:49.860 --> 01:08:50.860
这一块搞定了

01:08:50.860 --> 01:08:52.860
接下来我来研究一下

01:08:52.860 --> 01:08:54.860
因为我现在多了一个配置的方法

01:08:54.860 --> 01:08:55.860
方法里边的东西

01:08:55.860 --> 01:08:57.860
它为什么可以直接使用

01:08:57.860 --> 01:08:58.860
为什么可以直接使用方法

01:08:58.860 --> 01:08:59.860
就像用属性的样子

01:08:59.860 --> 01:09:00.860
直接使用属性

01:09:00.860 --> 01:09:01.860
对吧

01:09:01.860 --> 01:09:02.860
直接使用data里边的配置

01:09:02.860 --> 01:09:03.860
那么方法里边的配置

01:09:03.860 --> 01:09:04.860
为什么也可以直接使用呢

01:09:04.860 --> 01:09:05.860
咱们又来看

01:09:06.860 --> 01:09:08.860
它生成的这个5又实力

01:09:08.860 --> 01:09:09.860
app

01:09:09.860 --> 01:09:10.860
这个实力里边

01:09:10.860 --> 01:09:11.860
除了有什么produc

01:09:11.860 --> 01:09:12.860
你看是不是数组

01:09:12.860 --> 01:09:13.860
我们的数组对吧

01:09:13.860 --> 01:09:14.860
除了有这个title

01:09:14.860 --> 01:09:15.860
对吧

01:09:15.860 --> 01:09:16.860
是不是这个东西

01:09:16.860 --> 01:09:17.860
还有个啥呢

01:09:17.860 --> 01:09:19.860
还有是不是有个change stock

01:09:19.860 --> 01:09:21.860
所以有个change stock

01:09:21.860 --> 01:09:22.860
这个是啥啥

01:09:22.860 --> 01:09:23.860
是不是我们自己写的

01:09:23.860 --> 01:09:25.860
它会把方法提出去

01:09:25.860 --> 01:09:27.860
方法提出去的主要

01:09:28.860 --> 01:09:29.860
不是为了怎么响应

01:09:29.860 --> 01:09:30.860
主要是为了在模板里面

01:09:30.860 --> 01:09:31.860
方便使用

01:09:31.860 --> 01:09:32.860
因为模板的环境

01:09:32.860 --> 01:09:34.860
就是这个5又的实力对象

01:09:34.860 --> 01:09:36.860
它不把它提到模板里边

01:09:36.860 --> 01:09:37.860
它不好使用这个方法

01:09:37.860 --> 01:09:38.860
主要是说

01:09:38.860 --> 01:09:39.860
它的主要目的是为了好使用

01:09:39.860 --> 01:09:40.860
因此

01:09:40.860 --> 01:09:43.860
它除了把data配置里边

01:09:43.860 --> 01:09:44.860
提出去之外

01:09:44.860 --> 01:09:45.860
还会把什么提出去的

01:09:45.860 --> 01:09:47.860
还会把message配置

01:09:49.860 --> 01:09:50.860
它提出去

01:09:50.860 --> 01:09:52.860
是为了在模板中

01:09:52.860 --> 01:09:54.860
方便使用

01:09:54.860 --> 01:09:55.860
方便使用

01:09:55.860 --> 01:09:57.860
它是处于这么一个目的

01:09:57.860 --> 01:09:59.860
为了在模板中方便使用

01:10:01.860 --> 01:10:03.860
那么这是关于message配置

01:10:03.860 --> 01:10:04.860
也非常非常简单

01:10:04.860 --> 01:10:05.860
但是这里面

01:10:05.860 --> 01:10:06.860
这边不仅可以写一个方法

01:10:06.860 --> 01:10:07.860
可以写很多很多个

01:10:07.860 --> 01:10:09.860
另外在这里说一点

01:10:09.860 --> 01:10:11.860
这个方法里边的什么

01:10:11.860 --> 01:10:14.860
方法里边的这个就是z

01:10:14.860 --> 01:10:18.500
方法里边的z

01:10:18.500 --> 01:10:20.500
指向的是谁

01:10:20.500 --> 01:10:24.500
z指向的是5又实力

01:10:24.500 --> 01:10:26.500
指向的是5又实力

01:10:26.500 --> 01:10:27.500
也就是说这里如果说的

01:10:27.500 --> 01:10:28.500
要比较一下

01:10:28.500 --> 01:10:30.500
z是不是等于app

01:10:30.500 --> 01:10:31.500
要比较这个东西

01:10:31.500 --> 01:10:32.500
你看一下

01:10:35.500 --> 01:10:36.500
所以说

01:10:36.500 --> 01:10:37.500
z在这个方法里边

01:10:37.500 --> 01:10:39.500
它把z是给你控制过的

01:10:39.500 --> 01:10:41.500
方法里边的z是给你控制过的

01:10:41.500 --> 01:10:42.500
配置方法

01:10:42.500 --> 01:10:45.500
方法中的z

01:10:45.500 --> 01:10:50.500
指向5又实力

01:10:50.500 --> 01:10:52.500
指向5又实力

01:10:52.500 --> 01:10:54.500
就这么个意思

01:10:54.500 --> 01:10:55.500
没问题吧

01:10:55.500 --> 01:10:58.500
比方说我们就做一个小的例子

01:10:58.500 --> 01:11:00.500
比方说我们这里写个number

01:11:00.500 --> 01:11:01.500
写个number

01:11:01.500 --> 01:11:05.500
这里写个就是50

01:11:05.500 --> 01:11:06.500
那么这里比方说

01:11:06.500 --> 01:11:08.500
我们随便下写个例子

01:11:08.500 --> 01:11:09.500
下面一个H2

01:11:09.500 --> 01:11:10.500
H2

01:11:10.500 --> 01:11:12.500
那么这里显示这个number

01:11:12.500 --> 01:11:13.500
随便下写个例子

01:11:13.500 --> 01:11:15.500
这里把一个姿势讲解一下

01:11:15.500 --> 01:11:16.500
那么下面有两个按钮

01:11:16.500 --> 01:11:17.500
一个加一个减

01:11:17.500 --> 01:11:22.130
一个加一个减

01:11:22.130 --> 01:11:24.130
然后再一个加

01:11:24.130 --> 01:11:26.130
一个减一个加

01:11:26.130 --> 01:11:27.130
比方说减少

01:11:27.130 --> 01:11:29.130
或者是我们只要一个加

01:11:29.130 --> 01:11:30.130
只要一个加

01:11:30.130 --> 01:11:32.130
加的话注册个实验

01:11:32.130 --> 01:11:34.130
click

01:11:34.130 --> 01:11:35.130
加就是add

01:11:35.130 --> 01:11:37.130
比方说有这么一个方法

01:11:37.130 --> 01:11:38.130
add

01:11:38.130 --> 01:11:39.130
那么这个方法

01:11:39.130 --> 01:11:40.130
是不是没事里边要写

01:11:40.130 --> 01:11:41.130
输写这个方法add

01:11:41.130 --> 01:11:42.130
对吧

01:11:42.130 --> 01:11:43.130
输写这个方法

01:11:43.130 --> 01:11:44.130
那么在我们这个方法的时候

01:11:44.130 --> 01:11:47.130
我们要把这个number加1怎么加

01:11:47.130 --> 01:11:49.130
怎么加

01:11:49.130 --> 01:11:51.130
是不是z

01:11:51.130 --> 01:11:52.130
因为我们要改变的是谁

01:11:52.130 --> 01:11:55.130
改变的是5又实力里边的数据

01:11:55.130 --> 01:11:57.130
z.number

01:11:57.130 --> 01:11:58.130
对不对

01:11:58.130 --> 01:11:59.130
加加

01:11:59.130 --> 01:12:00.130
所以应该这样子写

01:12:00.130 --> 01:12:03.130
因为number是都保存到5又实力里边去了

01:12:03.130 --> 01:12:04.130
那个东西是想用式的

01:12:04.130 --> 01:12:07.130
应该改变的是z.number加加

01:12:07.130 --> 01:12:08.130
比方说这里加

01:12:08.130 --> 01:12:10.130
你看是不是加1了

01:12:10.130 --> 01:12:11.130
对不对

01:12:11.130 --> 01:12:13.130
这就是5又的它的做法

01:12:13.130 --> 01:12:15.130
这个z指向的是5又实力

01:12:15.130 --> 01:12:16.130
这个东西我说一下

01:12:16.130 --> 01:12:18.130
大家就明白了

01:12:19.130 --> 01:12:20.130
那么这是这一块

01:12:20.130 --> 01:12:21.130
这一块

01:12:21.130 --> 01:12:22.130
好了

01:12:22.130 --> 01:12:24.130
继续

01:12:24.130 --> 01:12:26.130
现在看这里

01:12:26.130 --> 01:12:27.130
看这里

01:12:27.130 --> 01:12:30.130
这个地方我们希望

01:12:30.130 --> 01:12:32.130
它有两种显示方式

01:12:32.130 --> 01:12:34.130
就是

01:12:34.130 --> 01:12:38.130
比方说我们这里

01:12:38.130 --> 01:12:40.130
到了0之后

01:12:40.130 --> 01:12:42.130
如果说你的商品库存为0

01:12:42.130 --> 01:12:44.130
我这里要显示两个字

01:12:44.130 --> 01:12:46.130
叫做受清

01:12:46.130 --> 01:12:50.270
要显示那么两个字

01:12:50.270 --> 01:12:53.270
我们只过这个商品的实力

01:12:53.270 --> 01:12:55.270
商品的数量到达0的时候

01:12:55.270 --> 01:12:56.270
它要显示受清

01:12:56.270 --> 01:12:57.270
那么怎么显示呢

01:12:57.270 --> 01:12:58.270
比方说

01:12:58.270 --> 01:12:59.270
它这里有两种情况

01:12:59.270 --> 01:13:00.270
第一种情况就是

01:13:00.270 --> 01:13:01.270
正常的情况就是这样子显示

01:13:01.270 --> 01:13:02.270
如果说你

01:13:02.270 --> 01:13:04.270
商品卖完了

01:13:04.270 --> 01:13:05.270
我们就用个i元数

01:13:05.270 --> 01:13:06.270
比方说我们用i元数

01:13:06.270 --> 01:13:07.270
我们就显示两个字

01:13:07.270 --> 01:13:08.270
受清

01:13:08.270 --> 01:13:10.270
受清

01:13:10.270 --> 01:13:11.270
那么比方说

01:13:11.270 --> 01:13:12.270
我们给它还可以

01:13:12.270 --> 01:13:13.270
给它一个内样式

01:13:13.270 --> 01:13:15.270
给它一个内样式

01:13:15.270 --> 01:13:18.270
叫做sold out

01:13:18.270 --> 01:13:19.270
来吧

01:13:19.270 --> 01:13:20.270
再写一个

01:13:20.270 --> 01:13:23.840
sold out

01:13:23.840 --> 01:13:26.840
写上一个color

01:13:26.840 --> 01:13:27.840
还用什么

01:13:27.840 --> 01:13:28.840
008C8C

01:13:28.840 --> 01:13:32.840
008C8C

01:13:32.840 --> 01:13:33.840
好 这一块

01:13:33.840 --> 01:13:34.840
受清

01:13:34.840 --> 01:13:35.840
那么这两个

01:13:35.840 --> 01:13:36.840
是不是只显示一个

01:13:36.840 --> 01:13:37.840
是不是只显示一个

01:13:37.840 --> 01:13:38.840
对吧

01:13:38.840 --> 01:13:39.840
只会显示一个

01:13:39.840 --> 01:13:40.840
那么这个是不是要判断了

01:13:40.840 --> 01:13:41.840
对不对

01:13:41.840 --> 01:13:42.840
要判断了

01:13:42.840 --> 01:13:43.840
那么这一块

01:13:43.840 --> 01:13:44.840
我们又给它介绍一个指令

01:13:44.840 --> 01:13:45.840
叫做

01:13:45.840 --> 01:13:48.840
vif

01:13:48.840 --> 01:13:49.840
表示判断

01:13:49.840 --> 01:13:51.840
判断的就是

01:13:51.840 --> 01:13:53.840
用于判断

01:13:53.840 --> 01:13:57.840
该元数是否生成

01:13:57.840 --> 01:13:59.840
该元数是否可以生成

01:13:59.840 --> 01:14:01.840
那么里边给的是一个表达式

01:14:01.840 --> 01:14:02.840
表达式为去

01:14:02.840 --> 01:14:03.840
就可以生成

01:14:03.840 --> 01:14:04.840
表达式不为去

01:14:04.840 --> 01:14:05.840
就不能生成

01:14:05.840 --> 01:14:06.840
就是给这么一个东西

01:14:06.840 --> 01:14:07.840
所以说这里

01:14:07.840 --> 01:14:11.840
span加上一个vif

01:14:11.840 --> 01:14:12.840
什么时候可以生成

01:14:12.840 --> 01:14:13.840
这个span元数呢

01:14:13.840 --> 01:14:14.840
什么时候可以生成

01:14:14.840 --> 01:14:15.840
是不是

01:14:15.840 --> 01:14:17.840
这个item.stock

01:14:17.840 --> 01:14:19.840
大于0的时候

01:14:19.840 --> 01:14:21.840
可以生成这个span元数

01:14:21.840 --> 01:14:22.840
对吧

01:14:22.840 --> 01:14:23.840
那么如果说

01:14:23.840 --> 01:14:24.840
这个条件不满足

01:14:24.840 --> 01:14:27.840
它还可以使用vls

01:14:27.840 --> 01:14:28.840
vls

01:14:28.840 --> 01:14:29.840
这是条件满足

01:14:29.840 --> 01:14:30.840
这是条件不满足

01:14:30.840 --> 01:14:31.840
对吧

01:14:31.840 --> 01:14:32.840
连着用就行了

01:14:32.840 --> 01:14:33.840
连着用

01:14:33.840 --> 01:14:34.840
它如果条件满足

01:14:34.840 --> 01:14:35.840
生成这个span元数

01:14:35.840 --> 01:14:36.840
条件不满足

01:14:36.840 --> 01:14:37.840
生成这个n元数

01:14:37.840 --> 01:14:38.840
就这么简单

01:14:38.840 --> 01:14:39.840
就可以实现一个

01:14:39.840 --> 01:14:41.840
这样的一个效果了

01:14:41.840 --> 01:14:43.840
那么这里看

01:14:43.840 --> 01:14:44.840
是不是可以生

01:14:44.840 --> 01:14:45.840
0

01:14:45.840 --> 01:14:46.840
这边受惩罪

01:14:46.840 --> 01:14:47.840
切换的元数

01:14:47.840 --> 01:14:48.840
你看元数

01:14:48.840 --> 01:14:49.840
你看一下这个元数

01:14:49.840 --> 01:14:51.840
你看是不是变成n元数了

01:14:51.840 --> 01:14:52.840
本来之前是span元数了

01:14:52.840 --> 01:14:53.840
变成n元数了

01:14:53.840 --> 01:14:54.840
注意看

01:14:54.840 --> 01:14:55.840
点击加号过后

01:14:55.840 --> 01:14:56.840
你看是不是变成span元数了

01:14:56.840 --> 01:14:57.840
对吧

01:14:57.840 --> 01:14:58.840
它会重新选的

01:14:58.840 --> 01:15:00.840
就是vif

01:15:00.840 --> 01:15:01.840
vif

01:15:01.840 --> 01:15:02.840
那么这里面

01:15:02.840 --> 01:15:04.840
除了用vif之外

01:15:04.840 --> 01:15:06.840
还可以使用vshow

01:15:06.840 --> 01:15:08.840
还可以使用vshow

01:15:08.840 --> 01:15:09.840
来看一下吧

01:15:15.540 --> 01:15:16.540
vif

01:15:16.540 --> 01:15:18.540
vl

01:15:18.540 --> 01:15:19.540
这里写啥

01:15:19.540 --> 01:15:22.540
vshow

01:15:22.540 --> 01:15:24.540
这就不能用vls了

01:15:24.540 --> 01:15:25.540
不能用vls了

01:15:25.540 --> 01:15:27.540
vif可以跟vls联用

01:15:27.540 --> 01:15:29.540
vshow的话你再从自己写

01:15:29.540 --> 01:15:31.540
item.stock

01:15:31.540 --> 01:15:33.540
等于0

01:15:33.540 --> 01:15:34.540
那么等于0的时候

01:15:34.540 --> 01:15:36.540
我显示这个东西

01:15:36.540 --> 01:15:37.540
不等于0的时候

01:15:37.540 --> 01:15:38.540
我显示这个

01:15:38.540 --> 01:15:39.540
大于0的时候

01:15:39.540 --> 01:15:40.540
显示这个

01:15:40.540 --> 01:15:41.540
那么它跟vif

01:15:41.540 --> 01:15:42.540
有什么区别呢

01:15:42.540 --> 01:15:43.540
大家看一下

01:15:43.540 --> 01:15:44.540
这是vshow

01:15:44.540 --> 01:15:45.540
你看下vshow

01:15:45.540 --> 01:15:46.540
是不是两个元数都在

01:15:46.540 --> 01:15:48.540
这两个生成的元数都在

01:15:48.540 --> 01:15:50.540
只不过其中一个是display and none

01:15:50.540 --> 01:15:52.540
它条件不满足的时候是display and none

01:15:52.540 --> 01:15:54.540
满足条件的时候就正常显示

01:15:54.540 --> 01:15:55.540
不满足的时候

01:15:55.540 --> 01:15:56.540
给它加了一个style

01:15:56.540 --> 01:15:57.540
display and none

01:15:57.540 --> 01:15:58.540
所以说它跟vif的

01:15:58.540 --> 01:15:59.540
vif不一样

01:15:59.540 --> 01:16:01.540
你看刚才的vif

01:16:01.540 --> 01:16:04.540
vif是元数它都不会生成

01:16:04.540 --> 01:16:05.540
元数都不会生成

01:16:05.540 --> 01:16:07.540
看一下这里

01:16:07.540 --> 01:16:08.540
点击

01:16:08.540 --> 01:16:09.540
你看

01:16:09.540 --> 01:16:11.540
i元数是不是没有生成

01:16:11.540 --> 01:16:13.540
到0

01:16:13.540 --> 01:16:14.540
i元数是不是出来了

01:16:14.540 --> 01:16:15.540
十百元数是不是消失了

01:16:15.540 --> 01:16:16.540
所以说这里

01:16:16.540 --> 01:16:18.540
它们也是有一些区别的

01:16:18.540 --> 01:16:19.540
有一些区别的

01:16:19.540 --> 01:16:20.540
其实这些区别

01:16:20.540 --> 01:16:22.540
会造成在5u的

01:16:22.540 --> 01:16:24.540
就是效率优化上

01:16:24.540 --> 01:16:26.540
会带来一些差异

01:16:26.540 --> 01:16:27.540
会带来一些差异

01:16:27.540 --> 01:16:28.540
那么具体什么差异

01:16:28.540 --> 01:16:29.540
那就必须要了解5u的

01:16:29.540 --> 01:16:30.540
核心原力了

01:16:30.540 --> 01:16:32.540
要了解核心原力了

01:16:32.540 --> 01:16:34.540
那东西就太多了

01:16:34.540 --> 01:16:36.540
咱们后边一个5u的课程里边

01:16:36.540 --> 01:16:38.540
是有详细讲这些东西的

01:16:38.540 --> 01:16:39.540
但是6u的课程里边

01:16:39.540 --> 01:16:40.540
我就是主要是关注

01:16:40.540 --> 01:16:43.540
怎么去用它来实现效果

01:16:43.540 --> 01:16:47.540
这里还对应一个就是V秀

01:16:47.540 --> 01:16:49.540
它也是用于

01:16:49.540 --> 01:16:51.540
判断元数适缚生成

01:16:51.540 --> 01:16:52.540
它们的区别

01:16:52.540 --> 01:16:53.540
我给大家记一下

01:16:53.540 --> 01:16:56.980
一个是Vif

01:16:56.980 --> 01:16:57.980
Vif的话

01:16:57.980 --> 01:16:59.980
就是决定

01:16:59.980 --> 01:17:01.980
它决定是元数适缚生成

01:17:01.980 --> 01:17:03.980
V秀的话决定元数适缚显示

01:17:03.980 --> 01:17:04.980
对吧

01:17:04.980 --> 01:17:05.980
显示

01:17:05.980 --> 01:17:10.980
Vif可以和VL联用

01:17:11.980 --> 01:17:15.980
或者和VL是一符

01:17:15.980 --> 01:17:16.980
所以一样的道理

01:17:16.980 --> 01:17:17.980
一符L是一符

01:17:17.980 --> 01:17:19.980
L是联用

01:17:19.980 --> 01:17:21.980
可以和这些联用的

01:17:21.980 --> 01:17:22.980
好吧

01:17:22.980 --> 01:17:24.980
这就是Vif

01:17:24.980 --> 01:17:26.980
这是关于这一块

01:17:26.980 --> 01:17:28.980
那么这里所以加了判断过后

01:17:28.980 --> 01:17:29.980
就可以根据不同的情况

01:17:29.980 --> 01:17:30.980
渲染不同的东西了

01:17:30.980 --> 01:17:31.980
当然有些东西说

01:17:31.980 --> 01:17:32.980
如果说都是适变元数的话

01:17:32.980 --> 01:17:33.980
其实你这里可以

01:17:33.980 --> 01:17:35.980
是不是可以写个三目运算符

01:17:35.980 --> 01:17:37.980
写个三目运算符也可以

01:17:37.980 --> 01:17:39.980
就这一块

01:17:39.980 --> 01:17:40.980
那么现在我们看

01:17:40.980 --> 01:17:41.980
你目标越来越近了

01:17:41.980 --> 01:17:42.980
那么接下来

01:17:42.980 --> 01:17:43.980
后面有个文笨框

01:17:43.980 --> 01:17:45.980
后面有个文笨框

01:17:45.980 --> 01:17:46.980
那么这个文笨框

01:17:46.980 --> 01:17:47.980
我们写到这后面

01:17:47.980 --> 01:17:49.980
一个Input元数

01:17:49.980 --> 01:17:50.980
有这么一个文笨框

01:17:50.980 --> 01:17:51.980
文笨框就用Lumber

01:17:51.980 --> 01:17:52.980
给它个最小值

01:17:52.980 --> 01:17:53.980
min為0

01:17:53.980 --> 01:17:55.980
这是ATM的知识

01:17:55.980 --> 01:17:56.980
这个没它说的吧

01:17:56.980 --> 01:17:57.980
max不要了

01:17:57.980 --> 01:17:59.980
那么这个文笨框

01:17:59.980 --> 01:18:01.980
可以控制库存

01:18:01.980 --> 01:18:02.980
可以控制库存

01:18:02.980 --> 01:18:03.980
你看这边

01:18:03.980 --> 01:18:04.980
加个文笨框

01:18:04.980 --> 01:18:05.980
文笨框我们可以

01:18:05.980 --> 01:18:06.980
设置一下样式

01:18:06.980 --> 01:18:08.980
设置一下样式

01:18:08.980 --> 01:18:10.980
这个文笨框设置为

01:18:13.980 --> 01:18:14.980
50个像素

01:18:14.980 --> 01:18:16.980
够了

01:18:16.980 --> 01:18:17.980
那么这个文笨框里边

01:18:17.980 --> 01:18:20.980
首先它要显示什么

01:18:20.980 --> 01:18:21.980
显示库存

01:18:21.980 --> 01:18:23.980
这里特别特别神奇

01:18:23.980 --> 01:18:25.980
要显示库存

01:18:25.980 --> 01:18:26.980
显示库存

01:18:26.980 --> 01:18:27.980
是不是要给文笨框

01:18:27.980 --> 01:18:28.980
设置Value值

01:18:28.980 --> 01:18:29.980
对不对

01:18:29.980 --> 01:18:30.980
Value值

01:18:30.980 --> 01:18:31.980
那么这个Value值

01:18:31.980 --> 01:18:32.980
给设置为啥呢

01:18:32.980 --> 01:18:34.980
是不是来自于Item.stop

01:18:34.980 --> 01:18:36.980
但是你能这样子写吗

01:18:36.980 --> 01:18:37.980
你能这样子写吗

01:18:37.980 --> 01:18:38.980
你不能这样子写

01:18:38.980 --> 01:18:39.980
兄弟

01:18:39.980 --> 01:18:40.980
你不能这样子写

01:18:40.980 --> 01:18:41.980
为什么没效果

01:18:41.980 --> 01:18:42.980
我把它换成这个设计

01:18:42.980 --> 01:18:43.980
就知道了

01:18:43.980 --> 01:18:44.980
为什么没效果

01:18:44.980 --> 01:18:45.980
你看如果是

01:18:45.980 --> 01:18:46.980
这是个普通的文笨框

01:18:46.980 --> 01:18:47.980
你这样子写Item.stop

01:18:47.980 --> 01:18:48.980
给它设置到Value

01:18:48.980 --> 01:18:50.980
你看是不是变成这个玩意了

01:18:50.980 --> 01:18:51.980
一个设置是什么

01:18:51.980 --> 01:18:53.980
一个设置是Item.元素

01:18:53.980 --> 01:18:54.980
元素的属性

01:18:54.980 --> 01:18:55.980
你该写啥就渲染啥

01:18:55.980 --> 01:18:56.980
对吧

01:18:56.980 --> 01:18:57.980
那么这就设置到一个问题

01:18:57.980 --> 01:19:00.980
如何绑定属性

01:19:00.980 --> 01:19:02.980
就是另外一个问题了

01:19:02.980 --> 01:19:03.980
又要使用指令

01:19:03.980 --> 01:19:05.980
叫做Vband

01:19:05.980 --> 01:19:09.980
它是用于绑定属性

01:19:09.980 --> 01:19:10.980
如果说你这个属性是写死的

01:19:10.980 --> 01:19:11.980
是静态内容

01:19:11.980 --> 01:19:12.980
那无所谓

01:19:12.980 --> 01:19:13.980
你直接写就完事了

01:19:13.980 --> 01:19:14.980
但是如果说像这种

01:19:14.980 --> 01:19:15.980
静态内容就直接写

01:19:15.980 --> 01:19:16.980
如果你的属性

01:19:16.980 --> 01:19:18.980
它的数据来源于

01:19:18.980 --> 01:19:20.980
来源于介式表达式

01:19:20.980 --> 01:19:21.980
来自于介式代码

01:19:21.980 --> 01:19:22.980
是不是得绑定属性

01:19:22.980 --> 01:19:24.980
那么要用Vband

01:19:24.980 --> 01:19:25.980
帽号

01:19:25.980 --> 01:19:26.980
Value

01:19:26.980 --> 01:19:27.980
Item.stop

01:19:27.980 --> 01:19:28.980
保存

01:19:28.980 --> 01:19:29.980
你看一下

01:19:29.980 --> 01:19:30.980
是不是显示出来了

01:19:30.980 --> 01:19:31.980
对不对

01:19:31.980 --> 01:19:32.980
显示出来了

01:19:32.980 --> 01:19:33.980
没问题吧

01:19:33.980 --> 01:19:34.980
没问题

01:19:35.980 --> 01:19:36.980
好吧

01:19:36.980 --> 01:19:38.980
那么这个Vband value

01:19:38.980 --> 01:19:40.980
写出来了

01:19:40.980 --> 01:19:42.980
那么这里还有一个就是于法堂

01:19:42.980 --> 01:19:43.980
它这里有一个

01:19:43.980 --> 01:19:44.980
因为这个绑定属性

01:19:44.980 --> 01:19:45.980
也是个常见的做法

01:19:45.980 --> 01:19:46.980
对吧

01:19:46.980 --> 01:19:47.980
于法堂

01:19:47.980 --> 01:19:48.980
于法堂是什么呢

01:19:48.980 --> 01:19:49.980
于法堂就是直接一个帽号

01:19:49.980 --> 01:19:50.980
直接一个帽号就完事了

01:19:50.980 --> 01:19:51.980
所以你这里

01:19:51.980 --> 01:19:52.980
你可都可以

01:19:52.980 --> 01:19:53.980
不用写Vband

01:19:53.980 --> 01:19:54.980
直接写个帽号

01:19:54.980 --> 01:19:55.980
前面跟个帽号

01:19:55.980 --> 01:19:56.980
Value

01:19:56.980 --> 01:19:57.980
Item.stop

01:19:57.980 --> 01:19:58.980
没问题

01:19:58.980 --> 01:19:59.980
你看是不是绑定进来了

01:19:59.980 --> 01:20:00.980
但是问题还没有完

01:20:00.980 --> 01:20:02.980
那么我这个文笨框

01:20:02.980 --> 01:20:03.980
编了之后

01:20:03.980 --> 01:20:04.980
它也得跟着变

01:20:04.980 --> 01:20:05.980
对吧

01:20:05.980 --> 01:20:07.980
是不是得把库存跟着变

01:20:07.980 --> 01:20:08.980
对吧

01:20:08.980 --> 01:20:09.980
也就是说我们这里

01:20:09.980 --> 01:20:10.980
是不是还要注册时间

01:20:10.980 --> 01:20:11.980
什么时间呢

01:20:11.980 --> 01:20:12.980
叫做input时间

01:20:12.980 --> 01:20:13.980
input时间

01:20:13.980 --> 01:20:14.980
大家知道input时间吧

01:20:14.980 --> 01:20:16.980
就是文笨改变的时间

01:20:16.980 --> 01:20:17.980
对吧

01:20:17.980 --> 01:20:18.980
你在打字

01:20:18.980 --> 01:20:19.980
往这边输入内容

01:20:19.980 --> 01:20:20.980
那么它就会触发

01:20:20.980 --> 01:20:21.980
这个input时间

01:20:21.980 --> 01:20:22.980
不断的触发

01:20:22.980 --> 01:20:25.980
那么在触发input时间之后

01:20:25.980 --> 01:20:27.980
我们这里是不是要改变

01:20:27.980 --> 01:20:31.820
要改变

01:20:31.820 --> 01:20:32.820
我们这里

01:20:32.820 --> 01:20:34.820
给它写个函数

01:20:34.820 --> 01:20:35.820
函数

01:20:36.820 --> 01:20:37.820
这里是

01:20:38.820 --> 01:20:40.820
还是用这个change stock吧

01:20:40.820 --> 01:20:41.820
还是用这个change stock

01:20:41.820 --> 01:20:42.820
还是用这个

01:20:42.820 --> 01:20:43.820
我们在这里边

01:20:43.820 --> 01:20:44.820
可以得到这个

01:20:44.820 --> 01:20:46.820
事件参数E

01:20:46.820 --> 01:20:47.820
我们刚才还是写个函数

01:20:47.820 --> 01:20:48.820
得了

01:20:48.820 --> 01:20:49.820
还是写个函数

01:20:49.820 --> 01:20:51.820
handle input

01:20:51.820 --> 01:20:52.820
处理input的事件

01:20:52.820 --> 01:20:54.820
这里有个事件参数E

01:20:54.820 --> 01:20:55.820
事件参数E

01:20:55.820 --> 01:20:56.820
我们来打印出来的

01:20:56.820 --> 01:20:57.820
事件参数E

01:20:57.820 --> 01:20:58.820
那么我们这里

01:20:58.820 --> 01:20:59.820
直接写它什么

01:20:59.820 --> 01:21:03.820
handle input

01:21:04.820 --> 01:21:05.820
写上这个函数

01:21:05.820 --> 01:21:06.820
你注意我现在的写法

01:21:06.820 --> 01:21:07.820
跟刚才不太一样

01:21:07.820 --> 01:21:08.820
刚才我们直接是

01:21:08.820 --> 01:21:09.820
调用函数对吧

01:21:09.820 --> 01:21:10.820
它有一些额外的

01:21:10.820 --> 01:21:11.820
参数需要传递

01:21:11.820 --> 01:21:12.820
我调用这个函数

01:21:12.820 --> 01:21:13.820
那么现在的写法

01:21:13.820 --> 01:21:14.820
是直接把函数明给它

01:21:14.820 --> 01:21:15.820
这两种写法

01:21:15.820 --> 01:21:16.820
不就都支持

01:21:16.820 --> 01:21:17.820
都支持

01:21:17.820 --> 01:21:18.820
那么这种直接给

01:21:18.820 --> 01:21:19.820
函数明的话

01:21:19.820 --> 01:21:20.820
那么它会把

01:21:20.820 --> 01:21:21.820
这个事件里边的

01:21:21.820 --> 01:21:22.820
参数给你带过去

01:21:22.820 --> 01:21:23.820
把这个

01:21:23.820 --> 01:21:24.820
就是原生的

01:21:24.820 --> 01:21:25.820
ATM里边的

01:21:25.820 --> 01:21:26.820
事件参数给你带过去

01:21:26.820 --> 01:21:27.820
好

01:21:27.820 --> 01:21:28.820
那么这个带过去过

01:21:28.820 --> 01:21:29.820
我们打印出来的参数E

01:21:29.820 --> 01:21:30.820
你看一下

01:21:30.820 --> 01:21:32.820
那么现在让我们改变

01:21:32.820 --> 01:21:33.820
改变

01:21:33.820 --> 01:21:34.820
你看一下

01:21:34.820 --> 01:21:35.820
是不是得到一个event

01:21:35.820 --> 01:21:36.820
对吧

01:21:36.820 --> 01:21:37.820
这个event

01:21:37.820 --> 01:21:39.820
event里边有这么一个东西

01:21:39.820 --> 01:21:41.820
叫做那个什么

01:21:41.820 --> 01:21:43.820
那个target

01:21:43.820 --> 01:21:44.820
target是不是就是

01:21:44.820 --> 01:21:45.820
我们的ATM元素

01:21:45.820 --> 01:21:46.820
对吧

01:21:46.820 --> 01:21:47.820
就是我们的ATM元素

01:21:47.820 --> 01:21:49.820
就是我们的动物元素对象

01:21:49.820 --> 01:21:50.820
target就是我们的

01:21:50.820 --> 01:21:51.820
动物元素对象

01:21:51.820 --> 01:21:52.820
所以说呢

01:21:52.820 --> 01:21:53.820
我们这里该干嘛

01:21:53.820 --> 01:21:54.820
干嘛呢

01:21:54.820 --> 01:21:56.820
我们这里是不是要把那个

01:21:59.820 --> 01:22:00.820
拿到这个

01:22:00.820 --> 01:22:01.820
拿到新的库存

01:22:01.820 --> 01:22:02.820
对吧

01:22:02.820 --> 01:22:03.820
点value

01:22:03.820 --> 01:22:04.820
是不是拿到新的库存

01:22:04.820 --> 01:22:05.820
我们这里输出

01:22:05.820 --> 01:22:06.820
输出

01:22:06.820 --> 01:22:08.820
一点target的value

01:22:08.820 --> 01:22:09.820
拿到新的库存

01:22:11.820 --> 01:22:12.820
看一下

01:22:12.820 --> 01:22:13.820
你看是不是拿到新的库存了

01:22:13.820 --> 01:22:15.820
然后把这个新的库存给谁

01:22:15.820 --> 01:22:16.820
是不是给

01:22:16.820 --> 01:22:17.820
对应的

01:22:17.820 --> 01:22:19.820
是不是给对应的那个就是

01:22:21.820 --> 01:22:23.820
给他对应的这个

01:22:23.820 --> 01:22:24.820
商品对象

01:22:24.820 --> 01:22:25.820
对吧

01:22:25.820 --> 01:22:26.820
把新的库存给商品对象

01:22:26.820 --> 01:22:28.820
其实我根本没有必要在这里写

01:22:28.820 --> 01:22:29.820
根本没有必要在这里写

01:22:29.820 --> 01:22:30.820
我们直接

01:22:30.820 --> 01:22:31.820
我们直接在这里

01:22:31.820 --> 01:22:32.820
直接处理就得了

01:22:32.820 --> 01:22:33.820
直接处理得了

01:22:33.820 --> 01:22:34.820
我们直接调用这个

01:22:34.820 --> 01:22:35.820
change stock

01:22:36.820 --> 01:22:37.820
直接调用这个

01:22:38.820 --> 01:22:39.820
change stock

01:22:39.820 --> 01:22:40.820
那么第1个参数传啥

01:22:40.820 --> 01:22:41.820
传item

01:22:41.820 --> 01:22:42.820
第2个参数传啥

01:22:43.820 --> 01:22:44.820
传那个就是

01:22:46.820 --> 01:22:47.820
item.stock

01:22:47.820 --> 01:22:49.820
或者我们直接在这里写也可以

01:22:49.820 --> 01:22:50.820
直接在这里写也可以

01:22:50.820 --> 01:22:52.820
item.stock等于

01:22:52.820 --> 01:22:53.820
等于什么呢

01:22:53.820 --> 01:22:54.820
等于那个

01:22:54.820 --> 01:22:55.820
视线参数

01:22:55.820 --> 01:22:57.820
event.target.value

01:22:57.820 --> 01:22:59.820
直接这样子写

01:22:59.820 --> 01:23:00.820
这样子写也可以

01:23:00.820 --> 01:23:01.820
没问题

01:23:02.820 --> 01:23:04.820
event.defend

01:23:04.820 --> 01:23:05.820
看一下

01:23:05.820 --> 01:23:06.820
这个变量名字叫啥呢

01:23:08.820 --> 01:23:12.330
事件参数

01:23:12.330 --> 01:23:13.330
event

01:23:13.330 --> 01:23:15.330
事件参数

01:23:16.330 --> 01:23:18.330
事件参数

01:23:21.410 --> 01:23:23.410
这个事件参数是e

01:23:23.410 --> 01:23:24.410
我看一下是e

01:23:25.410 --> 01:23:26.410
是不是e

01:23:26.410 --> 01:23:27.410
这个参数

01:23:28.410 --> 01:23:30.410
message.e is not defend

01:23:30.410 --> 01:23:31.410
这个事件参数

01:23:31.410 --> 01:23:32.410
好像在这

01:23:32.410 --> 01:23:33.410
window.event

01:23:35.410 --> 01:23:36.410
应该是这

01:23:37.410 --> 01:23:38.410
也不是

01:23:39.410 --> 01:23:40.410
这个事件参数一下子蒙了

01:23:40.410 --> 01:23:41.410
一下子忘了

01:23:41.410 --> 01:23:42.410
这个事件参数

01:23:42.410 --> 01:23:43.410
在哪了

01:23:43.410 --> 01:23:44.410
这个事件参数

01:23:45.410 --> 01:23:46.410
我想想

01:23:46.410 --> 01:23:47.410
我想想我想想

01:23:47.410 --> 01:23:48.410
或者说

01:23:48.410 --> 01:23:50.410
我们在这里直接写个函数呢

01:23:50.410 --> 01:23:51.410
我想想

01:23:51.410 --> 01:23:52.410
这个事件参数一下子

01:23:52.410 --> 01:23:53.410
忘了写到哪了

01:23:56.410 --> 01:23:57.410
看一下

01:23:57.410 --> 01:23:58.410
我看一下这个app对象

01:23:58.410 --> 01:23:59.410
我看一下这个app对象

01:23:59.410 --> 01:24:03.360
这个事件参数

01:24:04.360 --> 01:24:05.360
它放哪了

01:24:05.360 --> 01:24:06.360
等等

01:24:07.360 --> 01:24:08.360
一下子忘了这个地方了

01:24:09.360 --> 01:24:10.360
event

01:24:12.360 --> 01:24:14.360
我们看一下这个event是啥

01:24:15.360 --> 01:24:17.360
我们看一下是不是个event

01:24:17.360 --> 01:24:21.250
事件参数

01:24:27.730 --> 01:24:28.730
哎呀我一下子蒙了

01:24:28.730 --> 01:24:29.730
我一下子蒙了

01:24:29.730 --> 01:24:30.730
我一下子查一下

01:24:30.730 --> 01:24:31.730
这个事件参数一下子忘了

01:24:31.730 --> 01:24:32.730
忘了是什么了

01:24:32.730 --> 01:24:33.730
有没有人知道

01:24:33.730 --> 01:24:34.730
这个事件参数

01:24:34.730 --> 01:24:35.730
啊倒了event

01:24:36.730 --> 01:24:37.730
对对对

01:24:37.730 --> 01:24:39.730
它自带属性是对带多了的

01:24:40.730 --> 01:24:42.730
app里面多了event有吗

01:24:43.730 --> 01:24:45.730
多了event

01:24:45.730 --> 01:24:47.730
它会给你加上这么一个多了event

01:24:47.730 --> 01:24:48.730
是吧

01:24:48.730 --> 01:24:49.730
看一下

01:24:51.730 --> 01:24:52.730
对呀

01:24:52.730 --> 01:24:53.730
多了event

01:24:53.730 --> 01:24:54.730
它是给你加上这么一个内置属性

01:24:54.730 --> 01:24:56.730
叫做多了event

01:24:56.730 --> 01:24:57.730
这么一个属性

01:24:57.730 --> 01:24:58.730
这个属性里面

01:24:58.730 --> 01:24:59.730
就是刚才那个事件参数

01:24:59.730 --> 01:25:00.730
刚才那个事件参数

01:25:00.730 --> 01:25:01.730
我一下子蒙了

01:25:01.730 --> 01:25:02.730
那么这个事件参数里面

01:25:02.730 --> 01:25:03.730
就是刚才的一个

01:25:03.730 --> 01:25:04.730
叫 target.value

01:25:04.730 --> 01:25:07.730
你把它直接复制给这个库存

01:25:07.730 --> 01:25:08.730
是不是就变成响应式了

01:25:08.730 --> 01:25:09.730
对吧

01:25:09.730 --> 01:25:11.730
你把这个数据直接复制给这个

01:25:12.730 --> 01:25:13.730
对象的属性

01:25:13.730 --> 01:25:14.730
因为它是响应式的

01:25:14.730 --> 01:25:15.730
它一变

01:25:15.730 --> 01:25:17.730
是不是它的value值也跟着变了

01:25:17.730 --> 01:25:18.730
因为它是响应式的

01:25:18.730 --> 01:25:19.730
它的数据变了

01:25:19.730 --> 01:25:21.730
那么value值是不是也跟着变了

01:25:21.730 --> 01:25:22.730
对吧

01:25:22.730 --> 01:25:24.730
那么这样子就完成了一个双向绑定

01:25:24.730 --> 01:25:25.730
你看到没

01:25:25.730 --> 01:25:26.730
是完成了一个双向绑定

01:25:27.730 --> 01:25:28.730
看没

01:25:28.730 --> 01:25:29.730
双向绑定

01:25:30.730 --> 01:25:31.730
为什么双向绑定

01:25:31.730 --> 01:25:33.730
它这个文凳框

01:25:33.730 --> 01:25:34.730
文凳框的值

01:25:34.730 --> 01:25:36.730
来自于我们的数据

01:25:36.730 --> 01:25:37.730
文凳框一变化

01:25:37.730 --> 01:25:40.730
我们数据也会跟着变化

01:25:40.730 --> 01:25:42.730
我们数据决定了文凳框显示什么

01:25:42.730 --> 01:25:43.730
文凳框的操作

01:25:43.730 --> 01:25:44.730
决定了我的数据是什么

01:25:44.730 --> 01:25:45.730
是不是双向绑定

01:25:45.730 --> 01:25:46.730
对吧

01:25:46.730 --> 01:25:47.730
界面还会影响数据

01:25:47.730 --> 01:25:48.730
数据也会影响界面

01:25:48.730 --> 01:25:49.730
对吧

01:25:49.730 --> 01:25:50.730
就是双向绑定

01:25:50.730 --> 01:25:51.730
好

01:25:51.730 --> 01:25:53.730
那么这个单码就是

01:25:53.730 --> 01:25:54.730
经常要用到的单码

01:25:54.730 --> 01:25:57.730
我们平时写写的比较麻烦

01:25:57.730 --> 01:25:58.730
所以说

01:25:58.730 --> 01:25:59.730
为什么我忘了它

01:25:59.730 --> 01:26:00.730
因为平时我们不会这样子写

01:26:00.730 --> 01:26:02.730
我们平时是怎么写的呢

01:26:02.730 --> 01:26:06.730
这个单码可以简写为V mode

01:26:08.730 --> 01:26:09.730
V mode

01:26:09.730 --> 01:26:11.730
Item.stop

01:26:11.730 --> 01:26:12.730
这个单码

01:26:12.730 --> 01:26:13.730
就跟刚才我们的单码

01:26:13.730 --> 01:26:14.730
效果完全一样

01:26:14.730 --> 01:26:15.730
实际上这个V mode

01:26:15.730 --> 01:26:17.730
就是一个语法堂

01:26:17.730 --> 01:26:18.730
这个V mode

01:26:18.730 --> 01:26:22.170
就是一个语法堂

01:26:23.170 --> 01:26:25.170
不能这样注释

01:26:25.170 --> 01:26:26.170
得用ATM注释

01:26:26.170 --> 01:26:27.170
这次我这里没有块钱

01:26:27.170 --> 01:26:28.170
拿得出来

01:26:28.170 --> 01:26:29.170
就是下面这个写法

01:26:29.170 --> 01:26:31.170
给它看一下吧

01:26:31.170 --> 01:26:33.170
V mode

01:26:33.170 --> 01:26:35.170
Item.stop

01:26:35.170 --> 01:26:36.170
下面这个写法

01:26:36.170 --> 01:26:37.170
跟上面这个写法

01:26:37.170 --> 01:26:38.170
效果完全一样

01:26:38.170 --> 01:26:39.170
实际上下面那种写法

01:26:39.170 --> 01:26:40.170
V mode

01:26:40.170 --> 01:26:42.170
就是上面这个语法堂

01:26:42.170 --> 01:26:44.170
它给它绑定V6属性

01:26:44.170 --> 01:26:46.170
并且给它自动注册Input实现

01:26:46.170 --> 01:26:48.170
当Input的那种变化的时候

01:26:48.170 --> 01:26:49.170
V6变化的时候

01:26:49.170 --> 01:26:50.170
给它重新设置V6

01:26:50.170 --> 01:26:52.170
重新设置这个就是属性值

01:26:52.170 --> 01:26:54.170
这就是它的语法堂

01:26:54.170 --> 01:26:55.170
所以我们这里再介绍一个

01:26:55.170 --> 01:26:57.170
就是V mode

01:26:57.170 --> 01:26:59.170
它是一个语法堂

01:26:59.170 --> 01:27:03.170
用于实现双向绑定

01:27:03.170 --> 01:27:05.170
实际上

01:27:05.170 --> 01:27:08.170
是自动给你注册了

01:27:08.170 --> 01:27:10.170
给你绑

01:27:10.170 --> 01:27:12.170
是自动绑定的

01:27:12.170 --> 01:27:16.170
V属性值和注册了

01:27:16.170 --> 01:27:18.170
Input实现

01:27:18.170 --> 01:27:19.170
实际上就做了这么一个操作

01:27:19.170 --> 01:27:20.170
其他的没啥了

01:27:20.170 --> 01:27:21.170
其他的没啥了

01:27:21.170 --> 01:27:23.170
就是个V mode的实现

01:27:23.170 --> 01:27:24.170
好吧

01:27:24.170 --> 01:27:25.170
所以我们以后

01:27:25.170 --> 01:27:26.170
经常要实现双向绑定的时候

01:27:26.170 --> 01:27:27.170
直接填写

01:27:27.170 --> 01:27:29.170
用一个V mode就可以了

01:27:29.170 --> 01:27:30.170
那么这样子

01:27:30.170 --> 01:27:31.170
可以实现一样的效果

01:27:31.170 --> 01:27:32.170
完全一样的效果

01:27:32.170 --> 01:27:33.170
看没

01:27:33.170 --> 01:27:34.170
对吧

01:27:34.170 --> 01:27:35.170
那么你看

01:27:35.170 --> 01:27:36.170
这个数据变了

01:27:36.170 --> 01:27:37.170
是不是它也跟着变

01:27:37.170 --> 01:27:38.170
对吧

01:27:38.170 --> 01:27:39.170
我们点这个按钮数据变了

01:27:39.170 --> 01:27:40.170
是不是它也跟着变

01:27:40.170 --> 01:27:41.170
对吧

01:27:41.170 --> 01:27:42.170
为什么

01:27:42.170 --> 01:27:43.170
因为这个数据决定了

01:27:43.170 --> 01:27:44.170
它怎么显示

01:27:44.170 --> 01:27:45.170
而它变化的时候

01:27:45.170 --> 01:27:46.170
它是不是改变了数据

01:27:46.170 --> 01:27:47.170
改变了数据过后

01:27:47.170 --> 01:27:48.170
是不是其他地方也可以跟着变

01:27:48.170 --> 01:27:49.170
对吧

01:27:49.170 --> 01:27:50.170
就是双向绑定

01:27:51.170 --> 01:27:52.170
没问题吧

01:27:52.170 --> 01:27:53.170
这一块

01:27:53.170 --> 01:27:54.170
没问题吧

01:27:55.170 --> 01:27:56.170
快完了

01:27:56.170 --> 01:27:57.170
还没讲完

01:27:57.170 --> 01:27:58.170
还没有讲完

01:27:58.170 --> 01:27:59.170
还有

01:27:59.170 --> 01:28:00.170
还有

01:28:00.170 --> 01:28:01.170
还有三除

01:28:01.170 --> 01:28:02.170
三除来做个例子

01:28:02.170 --> 01:28:03.170
三除

01:28:04.170 --> 01:28:06.170
不着急

01:28:06.170 --> 01:28:08.170
我们反正一讲完为中止

01:28:08.170 --> 01:28:09.170
不在乎这个时间

01:28:09.170 --> 01:28:10.170
三除的话

01:28:10.170 --> 01:28:11.170
你不能用delete

01:28:11.170 --> 01:28:12.170
delete它是一个关键字

01:28:12.170 --> 01:28:13.170
得用remove

01:28:13.170 --> 01:28:14.170
remove

01:28:14.170 --> 01:28:16.170
这里我们写个函数吧

01:28:16.170 --> 01:28:17.170
写这么一个函数

01:28:18.170 --> 01:28:19.170
remove

01:28:19.170 --> 01:28:20.170
三除

01:28:20.170 --> 01:28:21.170
你给我传啥呢

01:28:21.170 --> 01:28:22.170
你不要说你给我传一个下标

01:28:22.170 --> 01:28:23.170
对吧

01:28:23.170 --> 01:28:24.170
下标是不是就可以删了

01:28:24.170 --> 01:28:25.170
对吧

01:28:25.170 --> 01:28:26.170
三除特别简单

01:28:26.170 --> 01:28:27.170
怎么删

01:28:27.170 --> 01:28:28.170
把这个数据里边

01:28:28.170 --> 01:28:29.170
从仪处一向

01:28:29.170 --> 01:28:30.170
你给我传个下标

01:28:30.170 --> 01:28:31.170
仪处一向

01:28:31.170 --> 01:28:32.170
z-product

01:28:32.170 --> 01:28:33.170
注意啊

01:28:33.170 --> 01:28:34.170
z-指向

01:28:34.170 --> 01:28:35.170
一定要注意

01:28:35.170 --> 01:28:37.170
z-指向的是f对向

01:28:37.170 --> 01:28:38.170
所以说这里

01:28:38.170 --> 01:28:39.170
这里的函数

01:28:39.170 --> 01:28:40.170
你是不能用箭头函数

01:28:40.170 --> 01:28:41.170
这里我说一句

01:28:41.170 --> 01:28:42.170
多说一句

01:28:42.170 --> 01:28:43.170
这个message

01:28:45.170 --> 01:28:46.170
不可以使用

01:28:46.170 --> 01:28:47.170
不能使用

01:28:47.170 --> 01:28:49.170
箭头函数

01:28:50.170 --> 01:28:51.170
函数

01:28:51.170 --> 01:28:52.170
会干扰

01:28:53.170 --> 01:28:54.170
会干扰

01:28:54.170 --> 01:28:55.170
5u

01:28:55.170 --> 01:28:56.170
绑定z

01:28:56.170 --> 01:28:57.170
因为5u

01:28:57.170 --> 01:28:58.170
知道它是把z

01:28:58.170 --> 01:28:59.170
把这里边的函数的z

01:28:59.170 --> 01:29:00.170
重新绑定过的

01:29:00.170 --> 01:29:02.170
因为你看到这里边的z

01:29:03.170 --> 01:29:04.170
好像是这些方法

01:29:04.170 --> 01:29:06.170
z都写到这个对象里边

01:29:06.170 --> 01:29:07.170
5u把它重新绑定过了

01:29:07.170 --> 01:29:08.170
绑定过了到哪儿

01:29:08.170 --> 01:29:10.170
绑定到5u实例里边去了

01:29:10.170 --> 01:29:12.170
放到5u实例里边去了

01:29:12.170 --> 01:29:14.170
它z指向的是5u实例

01:29:14.170 --> 01:29:15.170
我们是通过5u实例

01:29:15.170 --> 01:29:16.170
再调用这些方法

01:29:16.170 --> 01:29:17.170
所以说你这里

01:29:17.170 --> 01:29:18.170
不能去使用箭头函数

01:29:18.170 --> 01:29:19.170
你这里写到箭头函数

01:29:19.170 --> 01:29:20.170
这个z指向谁

01:29:20.170 --> 01:29:21.170
指向这个玩意儿

01:29:22.170 --> 01:29:23.170
指向这个对象

01:29:25.170 --> 01:29:26.170
它就不太正常了

01:29:26.170 --> 01:29:28.170
z-products

01:29:28.170 --> 01:29:29.170
splans

01:29:30.170 --> 01:29:31.170
splans

01:29:32.170 --> 01:29:33.170
三处

01:29:33.170 --> 01:29:34.170
你给我传一个index

01:29:34.170 --> 01:29:36.170
三处一个就完事了

01:29:36.170 --> 01:29:38.170
关键是你要把下标传给我

01:29:38.170 --> 01:29:39.170
那么这个raym

01:29:39.170 --> 01:29:40.170
怎么来传下标呢

01:29:40.170 --> 01:29:41.170
关键是怎么来传下标呢

01:29:41.170 --> 01:29:42.170
这里没有下标

01:29:42.170 --> 01:29:43.170
这里我们只得到什么

01:29:43.170 --> 01:29:44.170
只得到这个对象

01:29:44.170 --> 01:29:45.170
对吧

01:29:45.170 --> 01:29:46.170
商品对象

01:29:46.170 --> 01:29:47.170
没有得到下标

01:29:47.170 --> 01:29:48.170
那怎么办呢

01:29:48.170 --> 01:29:49.170
这里很简单

01:29:49.170 --> 01:29:50.170
你在循环的时候

01:29:50.170 --> 01:29:51.170
如果你需要下标

01:29:51.170 --> 01:29:53.170
你写个这样子写

01:29:53.170 --> 01:29:55.170
它是特别的语法

01:29:55.170 --> 01:29:56.170
它特殊的语法

01:29:56.170 --> 01:29:57.170
你可以这样子写

01:29:57.170 --> 01:29:58.170
那么这个就是得到

01:29:58.170 --> 01:29:59.170
它的数组里边每一项

01:29:59.170 --> 01:30:00.170
这个就是数组的下标

01:30:00.170 --> 01:30:02.170
你直接扔过来就完事了

01:30:02.170 --> 01:30:03.170
特别简单

01:30:03.170 --> 01:30:04.170
这个东西没什么好说的

01:30:04.170 --> 01:30:05.170
特别简单

01:30:05.170 --> 01:30:06.170
这就是下标

01:30:06.170 --> 01:30:07.170
来看一下

01:30:07.170 --> 01:30:08.170
三处

01:30:08.170 --> 01:30:09.170
这边

01:30:09.170 --> 01:30:10.170
三处

01:30:10.170 --> 01:30:11.170
是不是就删了

01:30:11.170 --> 01:30:13.170
就这么简单

01:30:13.170 --> 01:30:15.170
那么最后是添加

01:30:15.170 --> 01:30:16.170
添加

01:30:16.170 --> 01:30:17.170
因为我们现在都学的差不多了

01:30:17.170 --> 01:30:18.170
我们就直接把它做完了

01:30:18.170 --> 01:30:19.170
添加我们在上面写个DF

01:30:19.170 --> 01:30:20.170
你看一下

01:30:20.170 --> 01:30:21.170
体会一下

01:30:21.170 --> 01:30:22.170
我又是怎么写单码的

01:30:22.170 --> 01:30:23.170
你一般写个input

01:30:24.170 --> 01:30:27.170
然后命为0

01:30:28.170 --> 01:30:29.170
那么这里添加

01:30:29.170 --> 01:30:31.170
是不是要有个新的数据

01:30:31.170 --> 01:30:32.170
这里还要写个

01:30:32.170 --> 01:30:34.170
还有一个商品名称

01:30:34.170 --> 01:30:35.170
一个商品数量

01:30:35.170 --> 01:30:36.170
商品名称

01:30:36.170 --> 01:30:37.170
一个商品数量

01:30:37.170 --> 01:30:38.170
input

01:30:38.170 --> 01:30:40.170
商品名称

01:30:40.170 --> 01:30:42.170
名称

01:30:42.170 --> 01:30:44.170
这里是数量

01:30:44.170 --> 01:30:46.170
库存

01:30:46.170 --> 01:30:48.170
然后下面的一个按钮

01:30:48.170 --> 01:30:50.170
添加商品

01:30:50.170 --> 01:30:52.170
添加商品

01:30:52.170 --> 01:30:53.170
添加商品的时候

01:30:53.170 --> 01:30:54.170
我们这里

01:30:54.170 --> 01:30:55.170
是不是要注册事件

01:30:55.170 --> 01:30:56.170
比如说ADD

01:30:56.170 --> 01:30:58.170
添加一个商品

01:30:58.170 --> 01:30:59.170
我们直接写个函数名

01:30:59.170 --> 01:31:00.170
也可以

01:31:00.170 --> 01:31:01.170
如果说你没有什么

01:31:01.170 --> 01:31:02.170
额外的参数

01:31:02.170 --> 01:31:03.170
参数的传递的话

01:31:03.170 --> 01:31:04.170
直接写个函数名也可以

01:31:04.170 --> 01:31:05.170
添加的时候干嘛呢

01:31:05.170 --> 01:31:06.170
按照以前的想法

01:31:06.170 --> 01:31:07.170
我们是不是要想

01:31:07.170 --> 01:31:09.170
我们要获取

01:31:09.170 --> 01:31:10.170
get elements by ID

01:31:10.170 --> 01:31:12.170
获取文明方的数据

01:31:12.170 --> 01:31:13.170
要获取这个文明方的数据

01:31:13.170 --> 01:31:14.170
然后给它往这个数据

01:31:14.170 --> 01:31:16.170
数据里面加一项

01:31:16.170 --> 01:31:17.170
想法就错了

01:31:17.170 --> 01:31:18.170
一切都是数据

01:31:18.170 --> 01:31:20.170
连这个添加里面的东西

01:31:20.170 --> 01:31:21.170
全是数据

01:31:21.170 --> 01:31:22.170
全是数据

01:31:22.170 --> 01:31:23.170
那么我们在数据里面

01:31:23.170 --> 01:31:25.170
要来反映

01:31:25.170 --> 01:31:26.170
我们添加的东西

01:31:26.170 --> 01:31:27.170
怎么能反映呢

01:31:27.170 --> 01:31:28.170
数据里面就要写一个

01:31:28.170 --> 01:31:30.170
叫做6 product

01:31:30.170 --> 01:31:31.170
它是个对象

01:31:31.170 --> 01:31:33.170
新商品是不是个对象

01:31:33.170 --> 01:31:34.170
新商品是个对象吗

01:31:34.170 --> 01:31:35.170
一切都是数据

01:31:35.170 --> 01:31:36.170
要数据来控制

01:31:36.170 --> 01:31:38.170
界面都是根据数据来生成的

01:31:38.170 --> 01:31:40.170
新商品也是个对象

01:31:40.170 --> 01:31:42.170
因为每个商品都是个对象

01:31:42.170 --> 01:31:43.170
新商品自然不例外

01:31:43.170 --> 01:31:44.170
新商品

01:31:44.170 --> 01:31:45.170
新商品里面

01:31:45.170 --> 01:31:46.170
是不是一个name属性

01:31:46.170 --> 01:31:47.170
为什么空置不出来

01:31:47.170 --> 01:31:49.170
stock为什么0

01:31:49.170 --> 01:31:50.170
对不对

01:31:50.170 --> 01:31:51.170
新商品是不是这个玩意

01:31:51.170 --> 01:31:52.170
是不是这个玩意

01:31:52.170 --> 01:31:53.170
新商品

01:31:53.170 --> 01:31:54.170
一开始是不是这个玩意

01:31:54.170 --> 01:31:56.170
然后我们这里的文本框

01:31:56.170 --> 01:31:58.170
是不是用vmode

01:31:58.170 --> 01:31:59.170
双向绑定

01:31:59.170 --> 01:32:00.170
什么

01:32:00.170 --> 01:32:01.170
new product

01:32:01.170 --> 01:32:03.170
新商品的名称

01:32:03.170 --> 01:32:05.170
然后下面的文本框

01:32:05.170 --> 01:32:06.170
双向绑定

01:32:06.170 --> 01:32:07.170
新商品的

01:32:07.170 --> 01:32:08.170
什么呢

01:32:08.170 --> 01:32:09.170
新商品的stock

01:32:09.170 --> 01:32:10.170
这就完了

01:32:10.170 --> 01:32:12.170
这就完了

01:32:12.170 --> 01:32:13.170
没问题吧

01:32:13.170 --> 01:32:15.170
所以绑定新商品的stock

01:32:15.170 --> 01:32:16.170
就完事了

01:32:16.170 --> 01:32:18.170
然后我们来看一下吧

01:32:18.170 --> 01:32:19.170
你看名称

01:32:19.170 --> 01:32:20.170
库存0

01:32:20.170 --> 01:32:22.170
然后我们这里库存家家

01:32:22.170 --> 01:32:23.170
名称家家

01:32:23.170 --> 01:32:24.170
来看一下

01:32:24.170 --> 01:32:25.170
我们现在还没有点击添加商品

01:32:25.170 --> 01:32:26.170
看一下对象里面

01:32:26.170 --> 01:32:28.170
new product

01:32:28.170 --> 01:32:29.170
你看一下

01:32:29.170 --> 01:32:30.170
name

01:32:30.170 --> 01:32:31.170
是不是stock

01:32:31.170 --> 01:32:32.170
对吧

01:32:32.170 --> 01:32:33.170
没问题吧

01:32:33.170 --> 01:32:34.170
没问题吧

01:32:34.170 --> 01:32:35.170
是不是这样子就可以搞定了

01:32:35.170 --> 01:32:36.170
对不对

01:32:36.170 --> 01:32:37.170
就可以搞定了

01:32:37.170 --> 01:32:38.170
这里

01:32:38.170 --> 01:32:40.170
这里还有个小问题

01:32:40.170 --> 01:32:41.170
还有一个小问题

01:32:41.170 --> 01:32:42.170
就是它这里得到了

01:32:42.170 --> 01:32:43.170
是一个字幕串

01:32:43.170 --> 01:32:44.170
因为文本框

01:32:44.170 --> 01:32:45.170
对吧

01:32:45.170 --> 01:32:46.170
得到的是一个字幕串

01:32:46.170 --> 01:32:47.170
因为这是文本框

01:32:47.170 --> 01:32:48.170
它得到自然的字幕串

01:32:48.170 --> 01:32:49.170
如果说

01:32:49.170 --> 01:32:50.170
是的话

01:32:50.170 --> 01:32:51.170
那么你可以加修饰服

01:32:51.170 --> 01:32:52.170
这个修饰服

01:32:52.170 --> 01:32:53.170
我了解一下就行了

01:32:53.170 --> 01:32:55.170
因为修饰服

01:32:55.170 --> 01:32:57.170
东西呢

01:32:57.170 --> 01:32:58.170
在这里

01:32:58.170 --> 01:33:00.170
我们就不做声奖了

01:33:00.170 --> 01:33:01.170
加上这么一个修饰服

01:33:01.170 --> 01:33:02.170
点Lumber

01:33:02.170 --> 01:33:03.170
咱们再看

01:33:03.170 --> 01:33:07.120
这里

01:33:07.120 --> 01:33:10.120
我们看一下这个new product

01:33:10.120 --> 01:33:11.120
你看一下

01:33:11.120 --> 01:33:12.120
name

01:33:12.120 --> 01:33:13.120
你看是变成数字的

01:33:13.120 --> 01:33:14.120
对吧

01:33:14.120 --> 01:33:15.120
不但是支付错了

01:33:15.120 --> 01:33:16.120
数字

01:33:16.120 --> 01:33:17.120
这是个修饰服

01:33:17.120 --> 01:33:18.120
大家知道就这么东西就行了

01:33:18.120 --> 01:33:19.120
还有一些别的修饰服

01:33:19.120 --> 01:33:20.120
修饰服表示

01:33:20.120 --> 01:33:22.120
去掉守卫空格

01:33:22.120 --> 01:33:23.120
这些修饰服

01:33:23.120 --> 01:33:24.120
大家了解一下

01:33:24.120 --> 01:33:26.120
可以做一些辅助的功能

01:33:26.120 --> 01:33:28.120
修饰服其实我们还会自己写

01:33:28.120 --> 01:33:30.120
直播我们的课程里面

01:33:30.120 --> 01:33:31.120
就不去讲那么深的东西了

01:33:31.120 --> 01:33:32.120
这修饰服

01:33:32.120 --> 01:33:33.120
我们了解一下就行了

01:33:33.120 --> 01:33:36.430
这是关于Lumber

01:33:36.430 --> 01:33:38.430
那么Lumber我们就不写吧

01:33:38.430 --> 01:33:39.430
无所谓

01:33:39.430 --> 01:33:40.430
那么现在我们知道了

01:33:40.430 --> 01:33:41.430
这两个数据

01:33:41.430 --> 01:33:43.430
都绑定到新的对象里面去了

01:33:43.430 --> 01:33:45.430
那我们点天家商品干嘛

01:33:45.430 --> 01:33:46.430
你告诉我干嘛

01:33:46.430 --> 01:33:47.430
天家商品

01:33:47.430 --> 01:33:48.430
你跟着我学就行了

01:33:49.430 --> 01:33:52.430
我们点天家商品的时候干嘛

01:33:52.430 --> 01:33:53.430
要干嘛

01:33:59.750 --> 01:34:00.750
是不是铺洗啊

01:34:00.750 --> 01:34:03.750
往这个ZS Products

01:34:03.750 --> 01:34:05.750
里面铺洗一个

01:34:05.750 --> 01:34:06.750
什么

01:34:06.750 --> 01:34:07.750
这里填什么

01:34:07.750 --> 01:34:08.750
来

01:34:08.750 --> 01:34:09.750
告诉我这里填什么

01:34:09.750 --> 01:34:11.750
填什么

01:34:11.750 --> 01:34:14.130
Splash

01:34:14.130 --> 01:34:15.130
Splash

01:34:15.130 --> 01:34:17.130
为什么要用Splash呢

01:34:17.130 --> 01:34:21.570
ZS.6 Products

01:34:21.570 --> 01:34:22.570
对吧

01:34:22.570 --> 01:34:24.570
所以把我们的新的商品

01:34:24.570 --> 01:34:25.570
加进去

01:34:25.570 --> 01:34:26.570
是就完事了

01:34:26.570 --> 01:34:27.570
新的商品就记住

01:34:27.570 --> 01:34:28.570
这里的数据

01:34:28.570 --> 01:34:29.570
这里的界面就记住了

01:34:29.570 --> 01:34:30.570
新的商品的东西

01:34:30.570 --> 01:34:31.570
对吧

01:34:31.570 --> 01:34:32.570
加进去就完事了

01:34:32.570 --> 01:34:33.570
就这么简单

01:34:33.570 --> 01:34:34.570
这里纯粹是数据操作

01:34:34.570 --> 01:34:35.570
你看

01:34:35.570 --> 01:34:37.570
这里有异行动物操作吗

01:34:37.570 --> 01:34:38.570
有没有异行动物操作

01:34:38.570 --> 01:34:39.570
没有

01:34:39.570 --> 01:34:40.570
全是纯数据操作

01:34:40.570 --> 01:34:42.570
然后天家玩新商品过后

01:34:42.570 --> 01:34:43.570
我们干嘛

01:34:43.570 --> 01:34:45.570
新商品是不是在重新复制

01:34:45.570 --> 01:34:46.570
又还原

01:34:46.570 --> 01:34:47.570
要回够到原位嘛

01:34:47.570 --> 01:34:48.570
对吧

01:34:48.570 --> 01:34:50.570
还原成这样的这种状态

01:34:50.570 --> 01:34:51.570
新商品是不是重新还原成

01:34:51.570 --> 01:34:52.570
这种状态

01:34:52.570 --> 01:34:53.570
对吧

01:34:53.570 --> 01:34:54.570
就完了

01:34:54.570 --> 01:34:56.570
这里我们纯粹只控制数据

01:34:56.570 --> 01:34:57.570
你看

01:34:57.570 --> 01:34:58.570
我们现在数据和界面

01:34:58.570 --> 01:34:59.570
全部是分开的

01:34:59.570 --> 01:35:00.570
界面在这里控制

01:35:00.570 --> 01:35:02.570
我们写界面的时候

01:35:02.570 --> 01:35:03.570
写模板的时候

01:35:03.570 --> 01:35:04.570
我们只管模板

01:35:04.570 --> 01:35:05.570
只管模板

01:35:05.570 --> 01:35:07.570
然后写那个就是

01:35:07.570 --> 01:35:09.570
写这些配置的时候

01:35:09.570 --> 01:35:10.570
我们只管数据处理

01:35:10.570 --> 01:35:11.570
全部分开的

01:35:11.570 --> 01:35:12.570
数据变化

01:35:12.570 --> 01:35:13.570
模板就会跟着变

01:35:13.570 --> 01:35:15.570
就是它会重新渲染

01:35:15.570 --> 01:35:16.570
渲染这个模板

01:35:16.570 --> 01:35:17.570
那么现在来看一下

01:35:17.570 --> 01:35:19.570
随便写个

01:35:19.570 --> 01:35:20.570
新商品

01:35:20.570 --> 01:35:21.570
你看

01:35:21.570 --> 01:35:22.570
对吧

01:35:22.570 --> 01:35:23.570
就完了

01:35:23.570 --> 01:35:25.570
你写一下

01:35:25.570 --> 01:35:27.570
写点东西

01:35:27.570 --> 01:35:28.570
就完了

01:35:28.570 --> 01:35:29.570
对不对

01:35:29.570 --> 01:35:31.570
那么今天的效果

01:35:31.570 --> 01:35:32.570
给大家做出来了

01:35:32.570 --> 01:35:33.570
但是这里边还有一些东西

01:35:33.570 --> 01:35:35.570
我还没给大家说

01:35:35.570 --> 01:35:36.570
还没给大家说

01:35:36.570 --> 01:35:37.570
那么有些东西

01:35:37.570 --> 01:35:39.570
其实还是蛮深的

01:35:39.570 --> 01:35:40.570
比方说像那个模板

01:35:40.570 --> 01:35:41.570
这个模板

01:35:41.570 --> 01:35:43.570
还有很多种用法

01:35:43.570 --> 01:35:45.570
这个模板还有很多种用法

01:35:45.570 --> 01:35:46.570
有哪些用法

01:35:46.570 --> 01:35:48.570
这个模板可以写到这

01:35:48.570 --> 01:35:49.570
也可以写到哪

01:35:49.570 --> 01:35:50.570
也可以写到这

01:35:51.570 --> 01:35:52.570
看着

01:35:53.570 --> 01:35:54.570
我们把下面

01:35:54.570 --> 01:35:55.570
这里边的那种

01:35:55.570 --> 01:35:56.570
这里边的那种

01:35:57.570 --> 01:35:58.570
直接写到这

01:35:59.570 --> 01:36:00.570
可以这样子写的

01:36:00.570 --> 01:36:01.570
可以这样子写的

01:36:01.570 --> 01:36:03.570
你会发现效果是一样的

01:36:03.570 --> 01:36:04.570
我们把这个template去掉

01:36:04.570 --> 01:36:06.570
不配置这个模板

01:36:06.570 --> 01:36:07.570
不配置这个模板

01:36:07.570 --> 01:36:09.570
如果你没有配置模板的话

01:36:09.570 --> 01:36:10.570
它就会直接把

01:36:10.570 --> 01:36:12.570
你在页面中的写的东西

01:36:12.570 --> 01:36:13.570
拿来进一圈的

01:36:14.570 --> 01:36:15.570
你看效果是不是一样的

01:36:15.570 --> 01:36:16.570
对吧

01:36:16.570 --> 01:36:17.570
效果是一样的

01:36:17.570 --> 01:36:18.570
那么这个DIV

01:36:18.570 --> 01:36:19.570
它就不再是一个普通的DIV了

01:36:19.570 --> 01:36:21.570
它会被那个VU所控制

01:36:21.570 --> 01:36:22.570
是写到这

01:36:22.570 --> 01:36:23.570
但是我不推荐大家写到这

01:36:24.570 --> 01:36:25.570
因为我们以后

01:36:25.570 --> 01:36:26.570
中的页面肯定是比较复杂的

01:36:26.570 --> 01:36:27.570
越来越复杂

01:36:27.570 --> 01:36:28.570
那么写到这的话

01:36:28.570 --> 01:36:30.570
你不容易有分化项目

01:36:30.570 --> 01:36:32.570
不然对东西太多了

01:36:32.570 --> 01:36:33.570
写的东西太多了

01:36:33.570 --> 01:36:34.570
不推荐写到这

01:36:34.570 --> 01:36:35.570
我推荐写到这里

01:36:35.570 --> 01:36:36.570
template

01:36:36.570 --> 01:36:37.570
其实这里还有一些写法

01:36:37.570 --> 01:36:38.570
还有一些写法

01:36:38.570 --> 01:36:39.570
还可以配置什么呢

01:36:39.570 --> 01:36:40.570
给它看一下

01:36:40.570 --> 01:36:41.570
这里边

01:36:41.570 --> 01:36:42.570
其实这里边要去生瓜的话

01:36:42.570 --> 01:36:43.570
东西很多

01:36:43.570 --> 01:36:46.570
如果说你以后要应对面试的话

01:36:46.570 --> 01:36:48.570
应对面试的话

01:36:48.570 --> 01:36:49.570
你需要知道很多东西的

01:36:51.570 --> 01:36:52.570
光会用还不行

01:36:52.570 --> 01:36:53.570
还真不行

01:36:53.570 --> 01:36:54.570
我们这里

01:36:54.570 --> 01:36:55.570
大家学习完之后

01:36:55.570 --> 01:36:56.570
大家用五佑

01:36:56.570 --> 01:36:57.570
做的东西是没问题的

01:36:57.570 --> 01:36:58.570
但是你要说

01:36:58.570 --> 01:36:59.570
应付面试能够在公司里面

01:36:59.570 --> 01:37:00.570
去处理的话

01:37:00.570 --> 01:37:02.570
到企业去开发

01:37:02.570 --> 01:37:03.570
成为职业运动员的话

01:37:03.570 --> 01:37:05.570
那还天学一些东西

01:37:05.570 --> 01:37:06.570
那么这个render

01:37:06.570 --> 01:37:07.570
通过这个render

01:37:07.570 --> 01:37:08.570
也可以配置

01:37:08.570 --> 01:37:09.570
给它多说一点

01:37:09.570 --> 01:37:10.570
给它扩展一些知识

01:37:10.570 --> 01:37:11.570
那么这里边

01:37:11.570 --> 01:37:12.570
还会给你一个传一个函数

01:37:12.570 --> 01:37:14.570
叫createElement

01:37:14.570 --> 01:37:16.570
createElement

01:37:16.570 --> 01:37:17.570
那么关于模板

01:37:17.570 --> 01:37:18.570
这里说是关于模板

01:37:18.570 --> 01:37:19.570
多积极笔吧

01:37:19.570 --> 01:37:21.570
关于模板

01:37:21.570 --> 01:37:24.570
模板的配置

01:37:24.570 --> 01:37:28.570
模板可以直接书写

01:37:28.570 --> 01:37:30.570
模板的配置

01:37:30.570 --> 01:37:31.570
有几个

01:37:31.570 --> 01:37:32.570
顺便给大家说一点点就行了

01:37:32.570 --> 01:37:34.570
这里边要生瓜的话东西很多

01:37:34.570 --> 01:37:36.570
设计好底层员

01:37:36.570 --> 01:37:40.570
一个是页面中直接书写

01:37:40.570 --> 01:37:43.570
直接书写

01:37:43.570 --> 01:37:45.570
然后第二个是

01:37:45.570 --> 01:37:49.570
在template配置中书写

01:37:49.570 --> 01:37:50.570
就是我们这几颗用的东西

01:37:50.570 --> 01:37:53.570
我们这几颗是在template配置中书写的

01:37:53.570 --> 01:37:55.570
这是常见的说法

01:37:55.570 --> 01:37:57.570
常见

01:37:57.570 --> 01:37:58.570
第三种是

01:37:58.570 --> 01:38:01.570
在render中

01:38:01.570 --> 01:38:05.570
手动用函数创建

01:38:05.570 --> 01:38:07.570
这个东西

01:38:07.570 --> 01:38:08.570
涉及到render的话

01:38:08.570 --> 01:38:09.570
就是它底层实现原地的

01:38:09.570 --> 01:38:11.570
它真正的实现

01:38:11.570 --> 01:38:12.570
实现这个渲染

01:38:12.570 --> 01:38:13.570
是通过这个render来渲染的

01:38:13.570 --> 01:38:15.570
它这里边有传了一个函数进来

01:38:15.570 --> 01:38:18.570
这个函数可以帮助你来创建元素

01:38:18.570 --> 01:38:20.570
那么这里顺便说一下

01:38:20.570 --> 01:38:21.570
这里边东西特别特别多

01:38:21.570 --> 01:38:23.570
不要说我给大家创建一个元素吧

01:38:23.570 --> 01:38:24.570
创建一个元素

01:38:24.570 --> 01:38:27.940
不要说创建个H1元素

01:38:27.940 --> 01:38:29.940
Hello

01:38:29.940 --> 01:38:30.940
你看一下

01:38:30.940 --> 01:38:32.940
我们这里返回

01:38:32.940 --> 01:38:33.940
你看

01:38:33.940 --> 01:38:34.940
我们的配置的模板

01:38:34.940 --> 01:38:35.940
模板失销了

01:38:35.940 --> 01:38:37.940
它变成Hello了

01:38:37.940 --> 01:38:39.940
因为它真正其中用的是这个render

01:38:39.940 --> 01:38:40.940
你没有写render

01:38:40.940 --> 01:38:42.940
它才会从模板里边去读

01:38:43.940 --> 01:38:45.940
帮你生成这个render函数

01:38:45.940 --> 01:38:47.940
帮你生成这个render函数

01:38:47.940 --> 01:38:48.940
它是通过create element

01:38:48.940 --> 01:38:51.940
它有点类似于document的create element

01:38:51.940 --> 01:38:52.940
创建一个H1元素

01:38:52.940 --> 01:38:53.940
它类似Hello

01:38:53.940 --> 01:38:55.940
创建一个H1那种Hallow

01:38:55.940 --> 01:38:58.940
那么这里其实也在提醒我们啥了

01:38:58.940 --> 01:39:00.940
它不是通过

01:39:00.940 --> 01:39:06.090
就是render函数

01:39:06.090 --> 01:39:07.090
这就是听着玩

01:39:07.090 --> 01:39:08.090
听着玩

01:39:08.090 --> 01:39:09.090
顺便说多说几句

01:39:09.090 --> 01:39:11.090
render函数的参数

01:39:11.090 --> 01:39:14.090
是一个创建

01:39:14.090 --> 01:39:16.090
虚拟动元素

01:39:16.090 --> 01:39:19.090
虚拟动对象的方法

01:39:19.090 --> 01:39:20.090
有这个方法

01:39:20.090 --> 01:39:22.090
它还要创建虚拟动

01:39:22.090 --> 01:39:24.090
也就是说我们这里面写的东西

01:39:24.090 --> 01:39:26.090
都不是真实的动物

01:39:26.090 --> 01:39:27.090
真实的动物里面有这个东西吗

01:39:27.090 --> 01:39:28.090
能写这个玩意吗

01:39:28.090 --> 01:39:29.090
不能

01:39:29.090 --> 01:39:30.090
它是虚拟动

01:39:30.090 --> 01:39:32.090
为什么它需要虚拟动

01:39:32.090 --> 01:39:34.090
为什么需要虚拟动

01:39:34.090 --> 01:39:38.090
为什么需要虚拟动

01:39:38.090 --> 01:39:42.090
因为真实的动物操作

01:39:42.090 --> 01:39:45.090
特别慢

01:39:45.090 --> 01:39:46.090
特别慢

01:39:46.090 --> 01:39:47.090
它为了提高执行效率

01:39:47.090 --> 01:39:48.090
需要虚拟动

01:39:48.090 --> 01:39:49.090
那么

01:39:49.090 --> 01:39:51.090
如何把虚拟动物身体

01:39:51.090 --> 01:39:52.090
它最终肯定要显示到页面上

01:39:52.090 --> 01:39:54.090
肯定要形成真实的动物

01:39:54.090 --> 01:39:55.090
虚拟动物是什么

01:39:55.090 --> 01:39:56.090
就是一个介石对象

01:39:56.090 --> 01:39:58.090
就是一个普通的介石对象而已

01:39:58.090 --> 01:40:00.090
它怎么把普通的介石对象

01:40:00.090 --> 01:40:02.090
变成一个真实的动物对象

01:40:02.090 --> 01:40:04.090
这个过程又得讲很久了

01:40:04.090 --> 01:40:07.090
我们讲它的使用

01:40:07.090 --> 01:40:08.090
怎么去用

01:40:08.090 --> 01:40:09.090
没问题

01:40:09.090 --> 01:40:11.090
你要去了解更真实的东西

01:40:11.090 --> 01:40:14.090
要去找一个更好的工作

01:40:14.090 --> 01:40:15.090
更满意的薪水的话

01:40:15.090 --> 01:40:17.090
那你肯定要学习更神租的东西了

01:40:17.090 --> 01:40:19.090
原理级别的

01:40:19.090 --> 01:40:21.090
那么我这里就不撤远了

01:40:21.090 --> 01:40:22.090
总之你要知道

01:40:22.090 --> 01:40:23.090
你至少得得得知道

01:40:23.090 --> 01:40:26.090
这些东西全不是真正的动物元素

01:40:26.090 --> 01:40:27.090
不是真正的

01:40:27.090 --> 01:40:28.090
这在模板里边

01:40:28.090 --> 01:40:30.090
它会控制这个东西

01:40:30.090 --> 01:40:32.090
用这个东西来生成虚拟动物

01:40:32.090 --> 01:40:33.090
虚拟动物怎么生成的

01:40:33.090 --> 01:40:36.090
是通过create elements来生成的

01:40:36.090 --> 01:40:38.090
我们通常不会使用这个Render函数

01:40:38.090 --> 01:40:39.090
但是你知道有这么个配置

01:40:39.090 --> 01:40:40.090
有完事了

01:40:40.090 --> 01:40:41.090
关于模板的配置

01:40:41.090 --> 01:40:43.090
另外就是关于那个页面

01:40:43.090 --> 01:40:45.090
还关于刮仔配置

01:40:45.090 --> 01:40:48.090
我再说一下

01:40:48.090 --> 01:40:49.090
刮仔的配置

01:40:49.090 --> 01:40:52.090
什么叫刮仔呢

01:40:52.090 --> 01:40:53.090
在这

01:40:53.090 --> 01:40:56.090
刮仔的配置就在我们这里配置L

01:40:56.090 --> 01:40:58.090
配置Element刮仔的配置

01:40:58.090 --> 01:41:00.090
那么这个就是把我们的

01:41:00.090 --> 01:41:04.090
就是Wheel去控制ID为App的元素

01:41:04.090 --> 01:41:06.090
把控制就这个东西叫做刮仔

01:41:06.090 --> 01:41:07.090
叫刮仔

01:41:07.090 --> 01:41:08.090
那么刮仔呢

01:41:08.090 --> 01:41:10.090
有两种配置方式

01:41:10.090 --> 01:41:13.090
一种就是通过L来进行配置

01:41:13.090 --> 01:41:16.090
通过L进行配置

01:41:16.090 --> 01:41:19.090
另外一个就是使用

01:41:19.090 --> 01:41:24.090
使用Wheel实例中的Mount函数

01:41:24.090 --> 01:41:27.090
进行配置

01:41:27.090 --> 01:41:28.090
好

01:41:28.090 --> 01:41:29.090
那么比方说

01:41:29.090 --> 01:41:31.090
刚才我们是通过L进行配置的

01:41:31.090 --> 01:41:33.090
那么现在我们换一种做法

01:41:33.090 --> 01:41:35.090
创建好的实例过后

01:41:35.090 --> 01:41:37.090
我们在这里使用Mount

01:41:37.090 --> 01:41:39.090
来提供了一个内置的函数

01:41:39.090 --> 01:41:41.090
这里面写上什么App

01:41:41.090 --> 01:41:42.090
两种有啥区别呢

01:41:42.090 --> 01:41:43.090
区别不大

01:41:43.090 --> 01:41:44.090
比如说区别的话

01:41:44.090 --> 01:41:46.090
就在于有的时候呢

01:41:46.090 --> 01:41:48.090
我们可能需要先创建Wheel实例

01:41:48.090 --> 01:41:49.090
在中间呢

01:41:49.090 --> 01:41:50.090
要做一些事情

01:41:50.090 --> 01:41:51.090
通过Wheel实例做一些事情

01:41:51.090 --> 01:41:53.090
做完了这些事情过后呢

01:41:53.090 --> 01:41:54.090
我再去刮仔

01:41:54.090 --> 01:41:55.090
刮仔到页面上

01:41:55.090 --> 01:41:56.090
来控制页面

01:41:56.090 --> 01:41:58.090
有可能有这么一种需求

01:41:58.090 --> 01:41:59.090
那么这个时候呢

01:41:59.090 --> 01:42:00.090
就可以使用Mount了

01:42:00.090 --> 01:42:01.090
就可以使用Mount了

01:42:01.090 --> 01:42:02.090
你们以后呢

01:42:02.090 --> 01:42:03.090
肯定要学脚头架

01:42:03.090 --> 01:42:04.090
跑不了的

01:42:04.090 --> 01:42:05.090
你要学Wheel

01:42:05.090 --> 01:42:06.090
肯定要学脚头架

01:42:06.090 --> 01:42:07.090
那时候呢

01:42:07.090 --> 01:42:09.090
你就会遇到这么一些场景

01:42:09.090 --> 01:42:10.090
你看你会发现

01:42:10.090 --> 01:42:11.090
脚头架打点点出来的工程

01:42:11.090 --> 01:42:12.090
目的就是这样的写法

01:42:12.090 --> 01:42:13.090
对吧

01:42:17.660 --> 01:42:18.660
可以的参数是固定的

01:42:18.660 --> 01:42:20.660
是不可以修改的吗

01:42:20.660 --> 01:42:21.660
它参数有两个

01:42:21.660 --> 01:42:22.660
参数有两个

01:42:22.660 --> 01:42:23.660
第一个参数呢

01:42:23.660 --> 01:42:25.660
是你的元素名称

01:42:25.660 --> 01:42:27.660
这个元素名称有很多弄写法

01:42:27.660 --> 01:42:28.660
然后第二个参数呢

01:42:28.660 --> 01:42:29.660
是那个

01:42:29.660 --> 01:42:30.660
就是一个配置对象

01:42:30.660 --> 01:42:31.660
可以是一个

01:42:31.660 --> 01:42:33.660
可以选的东西都可以

01:42:33.660 --> 01:42:34.660
你可以是个字乎串

01:42:34.660 --> 01:42:36.660
也可以是一些指援数

01:42:36.660 --> 01:42:37.660
都可以

01:42:41.100 --> 01:42:42.100
再扩展点

01:42:42.100 --> 01:42:43.100
就要讲到它的就是

01:42:43.100 --> 01:42:44.100
原力的

01:42:44.100 --> 01:42:45.100
这个东西太多了

01:42:45.100 --> 01:42:46.100
它不是一时半会

01:42:46.100 --> 01:42:47.100
关键是不是说

01:42:47.100 --> 01:42:48.100
我说几分钟

01:42:48.100 --> 01:42:50.100
说几十二分钟就能讲完的

01:42:50.100 --> 01:42:52.100
它东西太多了

01:42:52.100 --> 01:42:53.100
它太多了

01:42:53.100 --> 01:42:55.100
它是一大块大块的东西

01:42:55.100 --> 01:42:56.100
我们这里呢

01:42:56.100 --> 01:42:57.100
给大家说一下

01:42:57.100 --> 01:42:59.100
让它知道有这么一些东西存在

01:42:59.100 --> 01:43:01.100
不要再傻乎乎地学了

01:43:01.100 --> 01:43:02.100
学了Wheel的实用功课

01:43:02.100 --> 01:43:04.100
就觉得自己天下无敌了

01:43:04.100 --> 01:43:06.100
要知道还有这些东西存在

01:43:07.100 --> 01:43:08.100
好了

01:43:08.100 --> 01:43:09.100
那今天我们看一下

01:43:09.100 --> 01:43:10.100
今天我一会儿

01:43:10.100 --> 01:43:12.100
会把实现效果的效果发表下来

01:43:12.100 --> 01:43:13.100
然后这里一个席题

01:43:13.100 --> 01:43:15.100
大家下去把它完成

01:43:15.100 --> 01:43:16.100
这四个实体大家看一下吧

01:43:16.100 --> 01:43:18.100
响应式的原力是什么

01:43:18.100 --> 01:43:20.100
我刚才讲过了对吧

01:43:20.100 --> 01:43:22.100
至于想一下怎么回答

01:43:22.100 --> 01:43:24.100
Wheel为什么要在自身前面加上个多乐符

01:43:24.100 --> 01:43:26.100
想想想怎么回答

01:43:26.100 --> 01:43:27.100
Wheel有种配置方法

01:43:27.100 --> 01:43:28.100
Z是指向谁

01:43:28.100 --> 01:43:30.100
Render template在英文中

01:43:30.100 --> 01:43:31.100
直接出现模板

01:43:31.100 --> 01:43:32.100
它方式有什么区别

01:43:32.100 --> 01:43:33.100
U先级是什么

01:43:33.100 --> 01:43:34.100
U先级

01:43:34.100 --> 01:43:36.100
U先级的话

01:43:36.100 --> 01:43:38.100
这个问题都超纲了

01:43:38.100 --> 01:43:39.100
这有点超纲了

01:43:39.100 --> 01:43:40.100
因为这是面试题

01:43:40.100 --> 01:43:42.100
面试题的话

01:43:42.100 --> 01:43:43.100
你必须要理解原理

01:43:43.100 --> 01:43:44.100
必须要理解原理

01:43:44.100 --> 01:43:46.100
它的U先级是这样子的

01:43:46.100 --> 01:43:48.100
Render U先级大于Template

01:43:48.100 --> 01:43:50.100
Template大于在页面中直接输写

01:43:50.100 --> 01:43:52.100
这是它的U先级

01:43:52.100 --> 01:43:54.100
它发现它没有配置Render

01:43:54.100 --> 01:43:56.100
OK 它就读Template

01:43:56.100 --> 01:43:58.100
Template里面配置去读页面

01:43:58.100 --> 01:43:59.100
这么来的

01:43:59.100 --> 01:44:01.100
通常我们不会在页面里面写

01:44:01.100 --> 01:44:02.100
好吧

01:44:05.100 --> 01:44:09.110
模板换行

01:44:09.110 --> 01:44:11.110
你直接换就完了

01:44:11.110 --> 01:44:13.110
你不是说直接换就完了吗

01:44:13.110 --> 01:44:14.110
还有啥

01:44:14.110 --> 01:44:16.110
模板换就直接换没

01:44:16.110 --> 01:44:17.110
还有啥呢

01:44:17.110 --> 01:44:19.110
换吧

01:44:19.110 --> 01:44:20.110
Mount是啥

01:44:20.110 --> 01:44:21.110
就是挂载

01:44:21.110 --> 01:44:22.110
因为你没有配置

01:44:22.110 --> 01:44:23.110
没有配置个L对吧

01:44:23.110 --> 01:44:25.110
它不知道我这个东西

01:44:25.110 --> 01:44:27.110
会影响哪个真实的动物元素

01:44:27.110 --> 01:44:29.110
会把英文中哪个真实的动物元素

01:44:29.110 --> 01:44:30.110
来控制

01:44:30.110 --> 01:44:31.110
来进行控制

01:44:31.110 --> 01:44:32.110
它不知道

01:44:32.110 --> 01:44:33.110
那么你可以在后边

01:44:33.110 --> 01:44:35.110
你可以一开始不告诉它

01:44:35.110 --> 01:44:36.110
那么这样子创建好了

01:44:36.110 --> 01:44:37.110
无忧实力过后

01:44:37.110 --> 01:44:38.110
它们找不到

01:44:38.110 --> 01:44:39.110
找不到控制的动物元素

01:44:39.110 --> 01:44:40.110
它就没有控制

01:44:40.110 --> 01:44:41.110
没有控制

01:44:41.110 --> 01:44:43.110
然后我们可能在中间

01:44:43.110 --> 01:44:46.110
可能之后会做一些事情

01:44:46.110 --> 01:44:47.110
然后做

01:44:47.110 --> 01:44:50.110
比方说应用插件之类的

01:44:50.110 --> 01:44:52.110
插件之类的

01:44:52.110 --> 01:44:53.110
比方说吧

01:44:53.110 --> 01:44:55.110
我们做了这么一些事情过后

01:44:55.110 --> 01:44:56.110
然后再使用这个

01:44:56.110 --> 01:44:58.110
再使用这个Mount

01:44:58.110 --> 01:45:01.110
最后再把它挂在进去

01:45:01.110 --> 01:45:03.110
这个东西跟配置这个L的作用是一样的

01:45:03.110 --> 01:45:05.110
作用是一样的

01:45:05.110 --> 01:45:10.110
与L的作用

01:45:10.110 --> 01:45:12.110
配置的作用一样

01:45:12.110 --> 01:45:13.110
只是先后顺序不一样

01:45:13.110 --> 01:45:14.110
我真的可以

01:45:14.110 --> 01:45:15.110
可以在最后去挂在

01:45:15.110 --> 01:45:16.110
对吧

01:45:16.110 --> 01:45:17.110
就这么个意思

01:45:17.110 --> 01:45:18.110
好了

01:45:18.110 --> 01:45:20.110
那我要召唤一下Molica了

01:45:20.110 --> 01:45:21.110
召唤一下Molica

01:45:21.110 --> 01:45:22.110
反正这几天

01:45:22.110 --> 01:45:24.110
我既要是每天的

01:45:24.110 --> 01:45:26.110
我要把我讲的东西

01:45:26.110 --> 01:45:27.110
肯定要跟你讲完

01:45:27.110 --> 01:45:29.110
Molica的热度又上3300了

01:45:29.110 --> 01:45:30.110
赶快看

01:45:30.110 --> 01:45:31.110
Molica在跳舞

01:45:31.110 --> 01:45:32.110
我要把我讲的东西

01:45:32.110 --> 01:45:33.110
要讲完

01:45:33.110 --> 01:45:34.110
然后呢

01:45:34.110 --> 01:45:35.110
能多少扩展点

01:45:35.110 --> 01:45:36.110
就多少扩展点

01:45:36.110 --> 01:45:37.110
但是呢

01:45:37.110 --> 01:45:38.110
扩展的东西呢

01:45:38.110 --> 01:45:39.110
肯定是有限的

01:45:39.110 --> 01:45:40.110
因为有些扩展

01:45:40.110 --> 01:45:41.110
它这到很多

01:45:41.110 --> 01:45:42.110
大头大头的知识

01:45:42.110 --> 01:45:43.110
它不是一两点

01:45:43.110 --> 01:45:44.110
你知道吗

01:45:45.110 --> 01:45:46.110
好

01:45:46.110 --> 01:45:47.110
我把东西

01:45:47.110 --> 01:45:48.110
我把东西放下去了

