WEBVTT

00:01.840 --> 00:06.240
声音应该没问题

00:06.240 --> 00:08.240
那咱们就来吧

00:08.240 --> 00:11.740
今天晚上咱们一定暗示下课

00:11.740 --> 00:13.740
就是不暗示下课

00:13.740 --> 00:16.440
是我这里记住这一块早点结束

00:16.440 --> 00:19.840
没办法 破语莫里卡的淫威

00:19.840 --> 00:23.040
咱们明天呢 莫里卡不在对吧

00:23.040 --> 00:25.640
洗干净等着吧 明天一定要到

00:25.640 --> 00:28.840
明天咱们讲嗨 把那个把这个

00:28.840 --> 00:31.840
之前拉了帐 全部给它补上

00:31.840 --> 00:33.840
好 咱们来吧

00:33.840 --> 00:35.840
昨天呢 我们讲到组件 是吧

00:35.840 --> 00:39.840
昨天好像一般人有点受不了了

00:39.840 --> 00:42.840
组件这一块 反正我们的终止呢

00:42.840 --> 00:45.840
就是说 不管怎么样吧

00:45.840 --> 00:47.840
能够让同学们呢 不管是从就业方面

00:47.840 --> 00:50.840
还是从技术方面 能够吸收到更多的知识

00:50.840 --> 00:54.840
咱们昨天讲组件 其实为什么会讲得慢呢

00:55.840 --> 00:58.840
一部分呢 是因为我在讲的过程中

00:58.840 --> 01:01.840
是插入了暗地的 这么一个暗地分析

01:01.840 --> 01:04.840
所以说有一部分时间呢 在暗地里边

01:04.840 --> 01:07.840
在暗地的逻辑里边 那一部分花了一些时间

01:07.840 --> 01:10.840
因此呢 我也是反复告诉同学们

01:10.840 --> 01:12.840
学技术 基础一定要打牢

01:12.840 --> 01:14.840
如果说你技术不打牢的话

01:14.840 --> 01:16.840
你学后边的新知识 你会发现

01:16.840 --> 01:17.840
前面的知识都没搞清楚

01:17.840 --> 01:19.840
你前面的知识没搞清楚的话

01:19.840 --> 01:22.840
那会导致你后边 你遇到了一本来

01:22.840 --> 01:25.840
不是新东西的 你认为都是新东西

01:25.840 --> 01:28.840
然后昨天就有同学对那个数据的snice方法

01:28.840 --> 01:30.840
不太熟悉 然后就造成这样的问题

01:30.840 --> 01:33.840
所以说 诚哥的介绍课程呢 没事多看几遍

01:33.840 --> 01:37.660
对你们肯定是有帮助的

01:37.660 --> 01:42.660
好 来吧 昨天我们还主见这一块

01:42.660 --> 01:44.660
主见这一块讲完了

01:44.660 --> 01:47.660
我们把主见这一块就已经讲完了

01:47.660 --> 01:49.660
还没有讲完 还差那么一点点

01:49.660 --> 01:51.660
第三天的效果里边

01:51.660 --> 01:55.660
我这里再简单说两句吧 简单说两句

01:55.660 --> 01:59.660
有的同学对主见这一块 特别是事件那一块

01:59.660 --> 02:01.660
觉得那一块很麻烦 很糟

02:01.660 --> 02:03.660
其实它这里是怎么回事呢

02:03.660 --> 02:09.660
它的根源在于主见它需要单向的数据流

02:09.660 --> 02:11.660
至于为什么需要单向的数据流

02:11.660 --> 02:13.660
它真的是一个哲学问题了

02:13.660 --> 02:15.660
那么你目前你就不用去管那么多

02:15.660 --> 02:18.660
你就记住 主见它是单向数据流的

02:18.660 --> 02:23.660
只有数据的所有者才有权力修改的数据

02:23.660 --> 02:27.660
主见通过属性传递过来的数据是不允许修改的

02:27.660 --> 02:28.660
比方说配角这里

02:28.660 --> 02:30.660
你看这里不是有很多属性吗

02:30.660 --> 02:32.660
这些属性是给谁给的 不是自己的

02:32.660 --> 02:34.660
对吧 是别人给的

02:34.660 --> 02:36.660
别人给我的当前业嘛

02:36.660 --> 02:38.660
别人给我的业总量

02:38.660 --> 02:41.660
别人给我的总数据量 都是别人给的

02:41.660 --> 02:44.660
别人的数据只有别人能修改 自己不能修改

02:44.660 --> 02:46.660
这就是主见的规则

02:46.660 --> 02:49.660
主见的数据一共修来是有两个地方

02:49.660 --> 02:51.660
一个是属性 一个是状态

02:51.660 --> 02:53.660
那么状态里面的数据自己能改

02:53.660 --> 02:55.660
属性里面的数据不能改

02:55.660 --> 02:56.660
这是规定

02:56.660 --> 02:59.660
其实这个东西在现实中的话也好举例子

02:59.660 --> 03:05.660
之前我楼下有一家快餐店

03:05.660 --> 03:06.660
也就是一家超音馆子

03:06.660 --> 03:10.660
有的时候随便吃点的话也会过去吃

03:10.660 --> 03:13.660
有的时候点一些菜 它人比较多

03:13.660 --> 03:15.660
味道还是挺好的 人比较多

03:15.660 --> 03:17.660
然后有的时候点标

03:17.660 --> 03:20.660
我们点标说你们邓哥过来了

03:20.660 --> 03:21.660
邓哥过来了

03:21.660 --> 03:23.660
来 我招待一下

03:23.660 --> 03:25.660
招待一下给他请他吃什么呢

03:25.660 --> 03:26.660
你们懂的 吃啥

03:26.660 --> 03:28.660
吃那个叫啥

03:28.660 --> 03:31.660
秋葵拌香菜

03:31.660 --> 03:33.660
请他吃秋葵拌香菜

03:33.660 --> 03:35.660
然后叫了个服务员

03:35.660 --> 03:36.660
给我们点一份

03:36.660 --> 03:37.660
服务员就告诉谁呢

03:37.660 --> 03:39.660
是不是告诉厨师 厨师就做

03:39.660 --> 03:41.660
做了过程中 厨师说

03:41.660 --> 03:44.660
今天咱们四川这边的秋葵不多了

03:44.660 --> 03:46.660
秋葵没有了 没有了怎么办呢

03:46.660 --> 03:48.660
我们给他换一下行不行

03:48.660 --> 03:50.660
过一会端上了一个

03:50.660 --> 03:52.660
比方说番茄榴兰饭

03:52.660 --> 03:54.660
这样行不行 肯定不行

03:54.660 --> 03:57.660
为什么不行 邓哥

03:57.660 --> 03:58.660
都高大上了一个人

03:58.660 --> 03:59.660
怎么能吃这种东西呢

03:59.660 --> 04:01.660
他一定要吃秋葵拌香菜

04:01.660 --> 04:03.660
所以说你不能

04:03.660 --> 04:04.660
你不是数据的所有者

04:04.660 --> 04:06.660
你没有权力给我修改

04:06.660 --> 04:08.660
就这么个意思

04:08.660 --> 04:10.660
那我遇到问题怎么办呢

04:10.660 --> 04:12.660
遇到一些情况怎么办呢

04:12.660 --> 04:14.660
我叫抛出事件

04:14.660 --> 04:15.660
然后你厨师

04:15.660 --> 04:16.660
这个材料没有了

04:16.660 --> 04:18.660
材料没有了怎么办

04:18.660 --> 04:19.660
材料没有了

04:19.660 --> 04:20.660
你告诉我一声

04:20.660 --> 04:22.660
要不然我不吃了

04:22.660 --> 04:23.660
要不然我换一盘菜

04:23.660 --> 04:24.660
我来决定

04:24.660 --> 04:26.660
我来决定怎么办

04:26.660 --> 04:27.660
这就是这么一个场景

04:27.660 --> 04:29.660
将这个分业的组建这一块

04:29.660 --> 04:31.660
你这些数据都不是我的

04:31.660 --> 04:33.660
我没有权力去修改

04:33.660 --> 04:35.660
我鬼知道你这些数据到底要不要改

04:35.660 --> 04:37.660
用户点了虾一页

04:37.660 --> 04:38.660
到底要不要分业

04:38.660 --> 04:40.660
到底要不要改业吗

04:40.660 --> 04:41.660
我也不清楚

04:41.660 --> 04:43.660
因为这是你的数据

04:43.660 --> 04:44.660
你又权力修改

04:44.660 --> 04:45.660
因此我怎么办呢

04:45.660 --> 04:47.660
当用户要改业码的时候

04:47.660 --> 04:49.660
我给你扔出一个事件

04:49.660 --> 04:50.660
给你扔出一个事件

04:50.660 --> 04:51.660
我给你

04:51.660 --> 04:52.660
我告诉你

04:52.660 --> 04:54.660
这个用户想把这个业码修改成这个

04:54.660 --> 04:55.660
行不行了

04:55.660 --> 04:56.660
到底能不能修改呢

04:56.660 --> 04:57.660
到底要怎么修改

04:57.660 --> 04:59.660
你去做这个事

04:59.660 --> 05:00.660
你去做这个事

05:00.660 --> 05:02.660
然后我这边在用的时候

05:02.660 --> 05:04.660
我这边在用的时候

05:04.660 --> 05:06.660
你看我是不是就注册了这个时间了

05:06.660 --> 05:07.660
我用微墨的

05:07.660 --> 05:09.660
其实我们当时是这么写的

05:09.660 --> 05:11.660
是这么写的

05:11.660 --> 05:13.660
等于current

05:13.660 --> 05:15.660
到了amount

05:15.660 --> 05:16.660
当时是这么写的

05:16.660 --> 05:17.660
我就注册这个时间

05:17.660 --> 05:20.660
你如果说用户想修改业码

05:20.660 --> 05:21.660
你把业码给我

05:21.660 --> 05:22.660
我干嘛呢

05:22.660 --> 05:24.660
我就做一件简单的事

05:24.660 --> 05:25.660
好吧

05:25.660 --> 05:26.660
我就修改吧

05:26.660 --> 05:27.660
我就把业码放到这个属性里边

05:27.660 --> 05:29.660
那我能不能不修改呢

05:29.660 --> 05:30.660
当然可以不修改

05:30.660 --> 05:32.660
我能不能重新换一个新的业码了

05:32.660 --> 05:33.660
也可以

05:33.660 --> 05:34.660
就是这个数据是我的

05:34.660 --> 05:37.660
我能够完全的控制它

05:37.660 --> 05:40.660
你没有这个球魁办案相拆了

05:40.660 --> 05:42.660
我完全可以换一个菜

05:42.660 --> 05:43.660
或者是我自己走人

05:43.660 --> 05:44.660
这个数据是我的

05:44.660 --> 05:46.660
我能够完全控制它

05:46.660 --> 05:47.660
就是这么个意思

05:47.660 --> 05:48.660
通过这个例子

05:48.660 --> 05:49.660
大家可以体会一下

05:49.660 --> 05:51.660
就是这个事件

05:51.660 --> 05:53.660
它到底是一个什么样的含义

05:55.660 --> 05:56.660
那么接下来我们继续

05:56.660 --> 05:58.660
昨天我们也不知道

05:58.660 --> 06:00.660
大家同学们下面有没有去把它完成

06:00.660 --> 06:01.660
一定要去把它完成

06:01.660 --> 06:04.660
这一块我们已经做到这里了

06:04.660 --> 06:06.660
现在我们已经能够完成分业了

06:06.660 --> 06:08.660
这是我们的效果

06:14.230 --> 06:16.230
目前我们已经完成分业了

06:16.230 --> 06:18.230
但是这个数据是假的

06:18.230 --> 06:20.230
这个数据是假的

06:20.230 --> 06:22.230
这个数据我们希望

06:22.230 --> 06:25.230
要用阿迦克斯进行远程请求

06:25.230 --> 06:28.230
那么现在我非常担心的问一句

06:28.230 --> 06:32.230
有没有同学不会阿迦克斯的Q个1

06:32.230 --> 06:35.230
不会阿迦克斯的Q个1

06:36.230 --> 06:38.230
有同学不会

06:38.230 --> 06:40.230
这个事情就这样子

06:40.230 --> 06:42.230
因为我这里确实没有时间

06:42.230 --> 06:44.230
去讲阿迦克斯

06:44.230 --> 06:47.230
那是也网络通信的那一块课程的知识

06:47.230 --> 06:50.230
这是最基础最基础的一个

06:50.230 --> 06:52.230
不能算是最基础

06:52.230 --> 06:54.230
最基础的ATM-CSSGS

06:54.230 --> 06:57.230
过了之后就要学习阿迦克斯了

06:57.230 --> 06:59.230
这是一个非常非常基础的课程

06:59.230 --> 07:03.230
但是监狱有些同学不会阿迦克斯

07:03.230 --> 07:05.230
所以说呢你不会的话你就听着玩

07:05.230 --> 07:08.230
就这一块这一小块你就听着玩

07:08.230 --> 07:11.230
对后边的学习没有什么影响

07:11.230 --> 07:13.230
没有什么影响

07:13.230 --> 07:15.230
说清楚了你这一块就听着玩

07:15.230 --> 07:19.230
就说这个数据我们希望从服务器获取

07:19.230 --> 07:21.230
因为我们的数据你看我访问百度

07:21.230 --> 07:23.230
访问新浪新闻对吧

07:23.230 --> 07:25.230
那些新闻的数据在不在我的电脑上

07:25.230 --> 07:26.230
不在吧

07:26.230 --> 07:28.230
它是不是要从远程获取

07:28.230 --> 07:30.230
在别的地方去获取这个数据

07:30.230 --> 07:32.230
别的地方去获取这个数据

07:32.230 --> 07:34.230
我怎么获取的自然诗用阿迦克斯

07:34.230 --> 07:37.230
那么这个阿迦克斯呢有些同学不会没关系

07:37.230 --> 07:39.230
我再说一次没关系你就听着玩这一块

07:39.230 --> 07:42.230
我把这个阿迦克斯封装一下写这么一个代码

07:42.230 --> 07:44.230
写好了之后哪怕你不会

07:44.230 --> 07:46.230
你后边都能接着写了

07:46.230 --> 07:48.230
我就写这么一个代码

07:48.230 --> 07:50.230
好这个代码呢我们把它放到一个文件夹

07:50.230 --> 07:51.230
叫ServiceS

07:51.230 --> 07:53.230
这也是我们通常的做法

07:53.230 --> 07:55.230
实际上我给大家讲这个过程中

07:55.230 --> 07:56.230
不仅是在讲伍佑

07:56.230 --> 07:57.230
你会发现呢

07:57.230 --> 08:01.230
我也在讲一些项目的常见的一些工程结构

08:01.230 --> 08:03.230
我们通常把它写到这个文件夹Service

08:03.230 --> 08:07.230
里面这个文件夹里面呢通常就用于做远程通信

08:07.230 --> 08:11.230
做远程通信就是我从远程去拿到数据

08:11.230 --> 08:15.230
那么这里呢我们新建一个文件给他取名为MovieService

08:15.230 --> 08:17.230
以后呢大家不管是用脚手架也好

08:17.230 --> 08:20.230
还是呢用我这种方式来搭建无忧工程

08:20.230 --> 08:22.230
都可以用类似的文件结构

08:22.230 --> 08:25.230
其实我们随着虽然说明天讲那个项目实战

08:25.230 --> 08:28.230
其实项目实战就已经贯穿到整个项目过程中了

08:29.230 --> 08:32.230
明天的项目实战呢5岁就是该加一个登录功能而已

08:32.230 --> 08:34.230
那么这里呢我们写上这么一个Service

08:34.230 --> 08:38.230
这里呢我们这里导出Default

08:38.230 --> 08:41.230
导出这么一个函数

08:41.230 --> 08:43.230
导出这么一个函数

08:43.230 --> 08:44.230
导出这么一个对象

08:44.230 --> 08:46.230
这个对象里面呢提供这么一个函数

08:46.230 --> 08:49.230
叫做Get Movies得到电影

08:49.230 --> 08:51.230
你给我传两个参数

08:51.230 --> 08:53.230
一个是夜马

08:53.230 --> 08:55.230
一个是夜容量

08:55.230 --> 08:56.230
你给我传两个参数

08:56.230 --> 08:58.230
我给你得到电影

08:58.230 --> 08:59.230
我给你得到电影数据

08:59.230 --> 09:01.230
但是呢由于

09:01.230 --> 09:03.230
但是呢由于这个撒加克斯请求

09:03.230 --> 09:05.230
是不是得一步得一步

09:05.230 --> 09:07.230
好那么现在呢我接下来写的代码

09:07.230 --> 09:09.230
会导致有些同学呢

09:09.230 --> 09:11.230
有些头晕

09:11.230 --> 09:12.230
有些头晕

09:12.230 --> 09:14.230
可能

09:14.230 --> 09:15.230
有些同学没见过一个代码

09:15.230 --> 09:16.230
有些同学呢可能见过

09:16.230 --> 09:17.230
就非常熟悉了

09:17.230 --> 09:18.230
就说这个同学之间呢

09:18.230 --> 09:19.230
差异比较大

09:19.230 --> 09:22.230
那么如果说你听不懂这一块

09:22.230 --> 09:24.230
根本不影响后边的学习

09:24.230 --> 09:27.230
好吧我这里就快速把这个函数写完

09:27.230 --> 09:29.230
我这里把它写成一个异步函数

09:29.230 --> 09:30.230
一个异步函数

09:30.230 --> 09:32.230
然后呢这里等待

09:32.230 --> 09:34.230
我们用Fate API来实现

09:34.230 --> 09:36.230
阿加克斯请求

09:36.230 --> 09:38.230
这里面呢就是Fate

09:38.230 --> 09:40.230
这里面要填写URL地址

09:40.230 --> 09:42.230
URL地址呢在这里数据接口

09:42.230 --> 09:43.230
在这里一块

09:43.230 --> 09:45.230
如果说你完全听不懂这一块

09:45.230 --> 09:46.230
没关系

09:46.230 --> 09:48.230
因为这一块是一块完整的课程知识

09:48.230 --> 09:50.230
我不可能在这里呢

09:50.230 --> 09:52.230
把这个整个课程给你讲一遍

09:52.230 --> 09:53.230
还比较长

09:53.230 --> 09:54.230
东西还比较多

09:54.230 --> 09:55.230
那么这一块呢

09:55.230 --> 09:56.230
你就直接到时候

09:56.230 --> 09:58.230
你就直接把我个代码复制过去完事了

09:58.230 --> 09:59.230
如果说你听不懂这一块

09:59.230 --> 10:01.230
那么这里呢我们使用Zing

10:01.230 --> 10:03.230
我一会告诉你这个函数怎么用就行了

10:10.800 --> 10:13.800
这里呢我们使用data是吧

10:13.800 --> 10:14.800
data是

10:14.800 --> 10:16.800
那么我们这对访问这个地址

10:16.800 --> 10:17.800
访问这个地址

10:17.800 --> 10:20.800
我现在只是给看的懂这个代码的同学说一下

10:20.800 --> 10:22.800
我们快速的把这一块过了

10:22.800 --> 10:23.800
如果说你听不懂

10:23.800 --> 10:24.800
加来之后

10:24.800 --> 10:26.800
把我这个代码直接copy过去

10:26.800 --> 10:28.800
我一会告诉你怎么用就完事了

10:28.800 --> 10:29.800
那么这里呢

10:29.800 --> 10:31.800
我们访问一下这个地址

10:31.800 --> 10:33.800
这个地址返回的就是一个数组

10:33.800 --> 10:37.800
就是一个所有电影的数组

10:37.800 --> 10:39.800
返回的就是一个所有电影的数组

10:39.800 --> 10:40.800
我们看一下吧

10:40.800 --> 10:41.800
有点检查

10:41.800 --> 10:43.800
这里有个网络通信

10:43.800 --> 10:45.800
点这个network网络通信

10:45.800 --> 10:46.800
我们这里刷新一次

10:46.800 --> 10:47.800
就这个玩意儿

10:47.800 --> 10:48.800
你看

10:48.800 --> 10:50.800
在我们的调试工具里边监控到

10:50.800 --> 10:51.800
它得到了就是一个数组

10:51.800 --> 10:52.800
看到没

10:52.800 --> 10:53.800
得到就是一个数组

10:53.800 --> 10:54.800
就这么一个数组

10:54.800 --> 10:55.800
好

10:55.800 --> 10:56.800
那么现在我们这个代码

10:56.800 --> 10:57.800
就把个数组拿到了

10:57.800 --> 10:58.800
就是Array

10:58.800 --> 10:59.800
这个数组拿到了

10:59.800 --> 11:01.800
得到所有电影的数组

11:01.800 --> 11:02.800
然后我们要进行分页

11:02.800 --> 11:03.800
怎么来分页

11:03.800 --> 11:04.800
因为我们昨天学习过了

11:04.800 --> 11:06.800
把这个数组用什么

11:06.800 --> 11:07.800
Sness

11:07.800 --> 11:08.800
Sness

11:08.800 --> 11:09.800
然后这里是

11:09.800 --> 11:10.800
夜码减1 成立

11:10.800 --> 11:11.800
配系Size

11:11.800 --> 11:12.800
我再说一次

11:12.800 --> 11:13.800
这里听不懂没关系

11:13.800 --> 11:15.800
不影响后边的学习

11:15.800 --> 11:17.800
因为没办法在这里

11:17.800 --> 11:18.800
把这一块知识讲了

11:18.800 --> 11:20.800
是真的没有办法了

11:20.800 --> 11:22.800
这一块我们就直接写完了

11:22.800 --> 11:23.800
直接写完了

11:23.800 --> 11:24.800
好

11:24.800 --> 11:25.800
写完了过后了

11:25.800 --> 11:26.800
这里这个函数

11:26.800 --> 11:27.800
这个函数就可以用了

11:27.800 --> 11:28.800
这个函数

11:28.800 --> 11:29.800
这个函数怎么用呢

11:29.800 --> 11:30.800
这个函数

11:30.800 --> 11:31.800
咱们来测试一下

11:31.800 --> 11:33.800
看一下这个函数怎么用

11:33.800 --> 11:34.800
我们这里

11:34.800 --> 11:35.800
加一个GS

11:35.800 --> 11:36.800
加一个测试的代码

11:36.800 --> 11:38.800
Test.js

11:38.800 --> 11:39.800
这是测试代码

11:39.800 --> 11:42.800
测试代码

11:42.800 --> 11:43.800
那么这里边

11:43.800 --> 11:44.800
我们去用一下

11:44.800 --> 11:45.800
这scripts

11:45.800 --> 11:46.800
保入

11:46.800 --> 11:47.800
点写杠

11:47.800 --> 11:48.800
src

11:48.800 --> 11:49.800
目录下面

11:49.800 --> 11:50.800
只需要学习怎么用就行了

11:50.800 --> 11:51.800
你完全

11:51.800 --> 11:52.800
如果你看懂当的最好

11:52.800 --> 11:53.800
你看不懂的话

11:53.800 --> 11:54.800
OK

11:54.800 --> 11:55.800
那么你就直接学习怎么用

11:55.800 --> 11:56.800
完事了

11:56.800 --> 11:57.800
代码其实没几

11:57.800 --> 11:58.800
你也不用去管这个代码

11:58.800 --> 11:59.800
你看不懂的话

11:59.800 --> 12:00.800
直接copy过去用就完了

12:00.800 --> 12:01.800
好

12:01.800 --> 12:02.800
那么到时候怎么用呢

12:02.800 --> 12:03.800
你看那里是不是导出一个对象

12:03.800 --> 12:04.800
对吧

12:04.800 --> 12:05.800
导出一个对象

12:05.800 --> 12:07.800
那么我们把对象导入

12:07.800 --> 12:08.800
import

12:08.800 --> 12:09.800
导入

12:09.800 --> 12:10.800
导入过后

12:10.800 --> 12:13.800
这里是mov service

12:13.800 --> 12:14.800
mov service

12:14.800 --> 12:15.800
from

12:15.800 --> 12:16.800
点写杠

12:16.800 --> 12:17.800
services

12:17.800 --> 12:18.800
mov service

12:18.800 --> 12:19.800
mov service

12:19.800 --> 12:20.800
点介式

12:20.800 --> 12:21.800
把对象导入

12:21.800 --> 12:22.800
这是不是我们对象

12:22.800 --> 12:24.800
对象里面不是提供了一个函数吗

12:24.800 --> 12:25.800
叫做getmov

12:25.800 --> 12:26.800
对吧

12:26.800 --> 12:27.800
是不是提供这么一个函数

12:27.800 --> 12:28.800
好

12:28.800 --> 12:29.800
那么比方说

12:29.800 --> 12:31.800
我希望获取第一页的电影

12:31.800 --> 12:32.800
怎么获取呢

12:32.800 --> 12:33.800
这里还没有写完

12:33.800 --> 12:34.800
这里还没有写完

12:34.800 --> 12:37.800
这里是

12:37.800 --> 12:38.800
我们这里返回了

12:38.800 --> 12:39.800
是一个对象

12:39.800 --> 12:41.800
返回一个对象

12:41.800 --> 12:43.800
toto

12:43.800 --> 12:45.800
ar.links

12:45.800 --> 12:47.800
然后data

12:48.800 --> 12:50.800
刚才就在

12:50.800 --> 12:52.800
我们有这样的返回

12:52.800 --> 12:53.800
返回一个对象

12:53.800 --> 12:54.800
现在我告诉你怎么用就行了

12:54.800 --> 12:55.800
你懂得自然懂

12:55.800 --> 12:56.800
告诉你怎么用就行了

12:56.800 --> 12:58.800
那么接下来getmov

12:58.800 --> 12:59.800
叫这个函数

12:59.800 --> 13:01.800
这是我们一写好的函数

13:01.800 --> 13:02.800
你看不懂

13:02.800 --> 13:03.800
你就直接用

13:03.800 --> 13:04.800
这个函数怎么用呢

13:04.800 --> 13:05.800
你要传两个参数

13:05.800 --> 13:06.800
第一个参数是頁

13:06.800 --> 13:07.800
比方说第一页

13:07.800 --> 13:09.800
第二个参数每页显示多少条

13:09.800 --> 13:11.800
比方说每页显示两条

13:11.800 --> 13:12.800
就这么个意思

13:12.800 --> 13:13.800
第一页

13:13.800 --> 13:14.800
每页显示两条

13:14.800 --> 13:16.800
那么它会从远程获取数据

13:16.800 --> 13:18.800
远程获取数据

13:18.800 --> 13:19.800
它需要一段时间

13:19.800 --> 13:20.800
它不是马上得到的

13:20.800 --> 13:21.800
对吧

13:21.800 --> 13:22.800
这是一个异步

13:22.800 --> 13:24.800
比方说你要有些点击事件

13:24.800 --> 13:26.800
它要点击之后才会发生

13:26.800 --> 13:29.800
那么这里远程获取也是一样

13:29.800 --> 13:32.800
它要等到获取到数据过后

13:32.800 --> 13:33.800
比方说这个网络比较卡

13:33.800 --> 13:35.800
它可能要10秒钟

13:35.800 --> 13:36.800
才能获取到数据

13:36.800 --> 13:37.800
它不可能说这个程序

13:37.800 --> 13:38.800
一直卡在这

13:38.800 --> 13:40.800
不可能说程序一直卡在这

13:40.800 --> 13:42.800
我们下面比方说出一句话

13:42.800 --> 13:43.800
程序结束

13:43.800 --> 13:45.800
它程序不可能一直卡在这

13:45.800 --> 13:47.800
不可能一直卡的

13:47.800 --> 13:50.800
所以说它要等到这个东西

13:50.800 --> 13:52.800
远程获取完了之后

13:52.800 --> 13:54.800
它会运行一个回调函数

13:54.800 --> 13:56.800
怎么来写这个回调函数呢

13:56.800 --> 13:58.800
后边我们接着写

13:58.800 --> 14:00.800
它有个任方法

14:00.800 --> 14:03.800
任里边就写的是回调函数

14:03.800 --> 14:05.800
回调函数里边

14:05.800 --> 14:06.800
这里写啥呢

14:06.800 --> 14:07.800
这个小货号里边写啥呢

14:07.800 --> 14:09.800
写的就是一个函数

14:09.800 --> 14:11.800
这里边写的就是个函数

14:11.800 --> 14:14.800
这个函数有一个参数

14:14.800 --> 14:16.800
这个函数的参数就是

14:16.800 --> 14:18.800
服务器的返回结果

14:18.800 --> 14:20.800
就是服务器的返回结果

14:20.800 --> 14:22.800
输出服务器返回结果

14:22.800 --> 14:24.800
从服务器那边得到的结果

14:24.800 --> 14:26.800
就从远程得到的结果

14:26.800 --> 14:27.800
我再说一下

14:27.800 --> 14:28.800
为什么要这样子写

14:28.800 --> 14:30.800
为什么不能直接用个辩量来接收呢

14:30.800 --> 14:32.800
比方说我们在这里

14:32.800 --> 14:34.800
用个辩量Movies来接收

14:34.800 --> 14:35.800
为什么不行呢

14:35.800 --> 14:36.800
因为它获取这个电影

14:36.800 --> 14:38.800
是需要一段时间的

14:38.800 --> 14:40.800
它不能说程序一直卡在这等着

14:40.800 --> 14:41.800
等你获取到了之后

14:41.800 --> 14:42.800
我们才接着运行

14:42.800 --> 14:44.800
那这个程序效率太低了

14:44.800 --> 14:46.800
比方说

14:46.800 --> 14:47.800
比方说吧

14:47.800 --> 14:48.800
有一个服务员

14:48.800 --> 14:50.800
餐厅里面有一个服务员

14:50.800 --> 14:52.800
他是不是只服务一个客户啊

14:52.800 --> 14:53.800
不是的对吧

14:53.800 --> 14:54.800
这个客户接待好了之后

14:54.800 --> 14:55.800
这个客户坐下了

14:55.800 --> 14:56.800
他点了菜

14:56.800 --> 14:58.800
我马上就去服务下一个客户了

14:58.800 --> 15:00.800
他不能说我这个客户

15:00.800 --> 15:01.800
还没有点好菜

15:01.800 --> 15:02.800
或者说点了菜

15:02.800 --> 15:03.800
还没有吃完

15:03.800 --> 15:04.800
我还没有解他账

15:04.800 --> 15:05.800
我就一直在那旁边等着

15:05.800 --> 15:06.800
等他吃完了饭

15:06.800 --> 15:07.800
我再去继续工作

15:07.800 --> 15:09.800
这样子太浪费资源了

15:09.800 --> 15:10.800
所以这里是一样的道理

15:10.800 --> 15:13.800
因为他远程请求了需要一段时间

15:13.800 --> 15:15.800
因此我不能说一直等在这里

15:15.800 --> 15:17.800
等在这里得到电影数据

15:17.800 --> 15:20.800
因此我这里注册了一个回调函数

15:20.800 --> 15:21.800
通过这种方式

15:21.800 --> 15:23.800
你不知道为什么要用这种方式

15:23.800 --> 15:24.800
你就把它写死

15:24.800 --> 15:25.800
写死就行了

15:25.800 --> 15:27.800
这里边写的就是我们的回调函数

15:27.800 --> 15:30.800
当这个电影数捕取到了之后

15:30.800 --> 15:33.800
他会把数据作为参数传给你

15:33.800 --> 15:35.800
他会把数据作为参数传给你

15:35.800 --> 15:36.800
这个参数的名字里随便写

15:36.800 --> 15:38.800
随便写什么名字

15:38.800 --> 15:40.800
传给你这个参数之后

15:40.800 --> 15:42.800
你这里就是你的服务器的数据

15:42.800 --> 15:43.800
你把这个数据输出就完事了

15:43.800 --> 15:45.800
好 咱们来看一下这个数据

15:45.800 --> 15:46.800
保存

15:47.800 --> 15:48.800
我们看一下这里

15:48.800 --> 15:49.800
实现效果

15:49.800 --> 15:51.800
这里我们点击右键检查

15:51.800 --> 15:52.800
然后我们看一下控制台

15:52.800 --> 15:54.800
控制台里边我们得刷新

15:54.800 --> 15:55.800
控制台里边

15:55.800 --> 15:57.800
你看一开始运行的程序结束

15:57.800 --> 15:58.800
对吧

15:58.800 --> 15:59.800
过了一会儿

15:59.800 --> 16:00.800
服务器得拿到结果了

16:00.800 --> 16:02.800
一看是不是过了一会儿才出现这个

16:02.800 --> 16:03.800
说明什么

16:03.800 --> 16:05.800
说明这个单码是不是异布的

16:05.800 --> 16:07.800
这个单码是要等一会儿才执行

16:07.800 --> 16:09.800
就有点类似于set-timeout的样子

16:09.800 --> 16:11.800
set-timeout是不是这种方式

16:11.800 --> 16:12.800
给一个回交函数

16:13.800 --> 16:15.800
就是等一会儿再执行

16:15.800 --> 16:16.800
等什么时候呢

16:16.800 --> 16:18.800
等服务器达到数据之后再执行

16:18.800 --> 16:20.800
那么执行过后输出的数据

16:20.800 --> 16:21.800
是不是就是服务器的结果

16:21.800 --> 16:23.800
你看服务器给我什么数据

16:23.800 --> 16:25.800
给我的是一个总数

16:25.800 --> 16:27.800
总数为26

16:27.800 --> 16:28.800
然后有一个数组

16:28.800 --> 16:30.800
当前这一页只有两条数据

16:30.800 --> 16:31.800
看到没

16:31.800 --> 16:32.800
是不是拿出来了

16:32.800 --> 16:33.800
对吧

16:33.800 --> 16:34.800
当前这一页只有两条数据

16:34.800 --> 16:36.800
总共的数据量是26

16:37.800 --> 16:38.800
没问题吧

16:42.800 --> 16:44.800
这里我给听得懂

16:44.800 --> 16:45.800
就是学过

16:45.800 --> 16:46.800
阿疆师同学说一下

16:46.800 --> 16:48.800
这一个单码是模拟的

16:48.800 --> 16:50.800
是模拟的一个请求

16:50.800 --> 16:51.800
一般来说的话

16:51.800 --> 16:53.800
服务器不太会直接给你返回

16:53.800 --> 16:54.800
所有数据的

16:54.800 --> 16:55.800
你要几条数据

16:55.800 --> 16:56.800
给你几条数据

16:56.800 --> 16:58.800
一般不会给你返回所有数据的

16:58.800 --> 17:00.800
但是我这里只是做一个

17:00.800 --> 17:01.800
接口的测试

17:01.800 --> 17:02.800
大家可以看一下这个网站

17:02.800 --> 17:03.800
这个网站的话

17:03.800 --> 17:05.800
就是专门来做一些接口测试的

17:05.800 --> 17:06.800
一些简单接口测试的

17:06.800 --> 17:08.800
这个网站它并没有带分业功能

17:08.800 --> 17:10.800
所以说我在这里做一个假分业

17:10.800 --> 17:12.800
当然这个话是说给

17:12.800 --> 17:14.800
听得懂阿疆诗的同学说的

17:14.800 --> 17:15.800
你听不懂阿疆诗

17:15.800 --> 17:16.800
没关系你直接拿来用就行了

17:16.800 --> 17:18.800
你知道怎么使用就行了

17:18.800 --> 17:19.800
就这样子用

17:19.800 --> 17:20.800
用都会吧

17:20.800 --> 17:22.800
这个东西没什么好说的

17:22.800 --> 17:23.800
这个东西很简单

17:23.800 --> 17:25.800
用这个方式很简单

17:25.800 --> 17:28.800
那么现在我们有了这个东西之后

17:28.800 --> 17:30.800
我们的工程需要改造一下

17:30.800 --> 17:32.800
在哪里改造呢在这里

17:32.800 --> 17:34.800
你看这里我们是

17:34.800 --> 17:36.800
之前用的是什么呢

17:36.800 --> 17:38.800
mock data 是魔力的数据

17:38.800 --> 17:40.800
对不对 是不是魔力的数据

17:40.800 --> 17:42.800
这数据是什么魔力的

17:42.800 --> 17:43.800
是假的

17:43.800 --> 17:44.800
你看我们这里数据

17:44.800 --> 17:46.800
是不是直接写死的呀

17:46.800 --> 17:48.800
这样子肯定不好

17:48.800 --> 17:50.800
这个数据肯定不是写死的

17:50.800 --> 17:53.800
应该是通过阿加克是请求获取的

17:53.800 --> 17:55.800
也就是说我们要通过这种方式

17:55.800 --> 17:57.800
来获取数据

17:57.800 --> 17:59.800
获取这么一种格式的数据

18:00.800 --> 18:02.800
跑上去了

18:02.800 --> 18:04.800
获取这么一种格式的数据

18:04.800 --> 18:06.800
一个对象有两个属性

18:08.800 --> 18:10.800
那么现在的问题是

18:10.800 --> 18:12.800
我怎么样才能

18:12.800 --> 18:13.800
获取这个数据呢

18:13.800 --> 18:15.800
如果说我把这个删了

18:15.800 --> 18:16.800
你看着

18:16.800 --> 18:17.800
我把这个删了

18:17.800 --> 18:18.800
魔力数据删了

18:18.800 --> 18:19.800
一删掉的话

18:19.800 --> 18:20.800
你看一下这里

18:20.800 --> 18:22.800
这东西是不是不能用了

18:22.800 --> 18:23.800
那问题就来了

18:23.800 --> 18:25.800
这里该写啥呢

18:25.800 --> 18:27.800
这里该写啥呢

18:27.800 --> 18:29.800
不能用了这个数据

18:29.800 --> 18:30.800
一下子就不能用了

18:30.800 --> 18:31.800
一下子就不能用了

18:31.800 --> 18:32.800
而且我们这个东西也没了

18:32.800 --> 18:34.800
computer也没了

18:34.800 --> 18:35.800
computer就是

18:35.800 --> 18:37.800
我们之前在这里进行分业的

18:37.800 --> 18:38.800
实际上有专门一个

18:38.800 --> 18:41.800
专门一个方法来帮我们进行分业

18:41.800 --> 18:42.800
刚才我们有专门一个方法

18:42.800 --> 18:43.800
叫get movies

18:43.800 --> 18:44.800
多少业

18:44.800 --> 18:45.800
每一项是多少条

18:45.800 --> 18:46.800
他来帮我们分业

18:46.800 --> 18:48.800
我们不用去自己写了

18:48.800 --> 18:50.800
那么这里怎么来处理这个问题呢

18:50.800 --> 18:52.800
这里不是movies的

18:52.800 --> 18:54.800
别成movies

18:54.800 --> 18:56.800
首先

18:56.800 --> 18:58.800
这里就不再是我们刚才

18:58.800 --> 18:59.800
直接达到数据了

18:59.800 --> 19:01.800
而要从远程获取

19:01.800 --> 19:03.800
那么既然要从远程获取的话

19:03.800 --> 19:06.800
远程获取是不是需要一段时间

19:06.800 --> 19:08.800
需要一段时间

19:08.800 --> 19:10.800
那么既然它需要一段时间

19:10.800 --> 19:12.800
那么这个时间之前

19:12.800 --> 19:14.800
就是获取到数据之前

19:14.800 --> 19:16.800
比方它需要一个小时

19:16.800 --> 19:17.800
我们说夸张一点

19:17.800 --> 19:19.800
它需要一个小时才能获取到数据

19:19.800 --> 19:20.800
那一个小时之前怎么办呢

19:20.800 --> 19:22.800
是有一个默认者

19:22.800 --> 19:23.800
初始者

19:23.800 --> 19:25.800
总数据量为0

19:25.800 --> 19:27.800
电影是一个空数组

19:27.800 --> 19:29.800
是不是初始者

19:29.800 --> 19:31.800
这个时候还没有拿到数据

19:31.800 --> 19:33.800
没有拿到数据自然总数为0

19:33.800 --> 19:35.800
电影是一个空数组

19:35.800 --> 19:37.800
那么接下来的一个重要问题

19:37.800 --> 19:39.800
这才接下来说的东西

19:39.800 --> 19:43.300
才是我们今天晚上的重点

19:43.300 --> 19:45.300
接下来的问题是

19:45.300 --> 19:47.300
我什么时候

19:47.300 --> 19:49.300
去获取这个数据呢

19:49.300 --> 19:51.300
我在哪个地方写代吗

19:51.300 --> 19:52.300
现在问题是

19:52.300 --> 19:54.300
这个东西完蛋了

19:54.300 --> 19:57.300
之前咱们做主见都没有遇到过这样的问题

19:57.300 --> 19:58.300
那么现在呢

19:58.300 --> 20:00.300
这节课我们可以遇到这样的问题了

20:00.300 --> 20:03.300
这是一个典型的在5u里面

20:03.300 --> 20:05.300
遇到的问题

20:05.300 --> 20:07.300
就是我要用远程

20:07.300 --> 20:08.300
就是我要用这个代码

20:08.300 --> 20:10.300
就是我要写这个代码

20:10.300 --> 20:11.300
这个代码我写哪呢

20:11.300 --> 20:12.300
问题是

20:12.300 --> 20:14.300
我能不能写字啊

20:14.300 --> 20:16.300
能不能把这个代码写字啊

20:16.300 --> 20:17.300
肯定不行

20:17.300 --> 20:18.300
那你这里咋写

20:18.300 --> 20:19.300
你告诉我这里咋写

20:19.300 --> 20:20.300
你输出了肯定不是输出

20:20.300 --> 20:21.300
你这个咋写呢

20:21.300 --> 20:23.300
是不是要改变

20:23.300 --> 20:26.300
Z点什么data

20:26.300 --> 20:28.300
和什么Z点头

20:28.300 --> 20:29.300
对吧

20:29.300 --> 20:30.300
因为这两个数据

20:30.300 --> 20:32.300
从服务器拿到之后

20:32.300 --> 20:33.300
从服务器拿到之后

20:33.300 --> 20:34.300
你看一下

20:34.300 --> 20:35.300
这从服务器拿到的数据

20:35.300 --> 20:36.300
是不是有这两个数据

20:36.300 --> 20:37.300
一个是总数

20:37.300 --> 20:38.300
一个是data是对吧

20:38.300 --> 20:39.300
是不是把这两个数据

20:39.300 --> 20:40.300
属性要改掉

20:40.300 --> 20:41.300
对不对

20:41.300 --> 20:42.300
要改掉这两个属性

20:42.300 --> 20:43.300
那么问题是

20:43.300 --> 20:44.300
我在这里能写这个Z吗

20:44.300 --> 20:45.300
是不是不能写

20:45.300 --> 20:46.300
代码肯定不能写这

20:46.300 --> 20:48.300
那么这个代码写哪呢

20:48.300 --> 20:49.300
这里要说到

20:49.300 --> 20:53.770
这里可以一个知识点

20:53.770 --> 20:54.770
在这

20:54.770 --> 20:56.770
叫做生命周期

20:56.770 --> 20:58.770
组建的生命周期

20:58.770 --> 20:59.770
说完整点

20:59.770 --> 21:01.770
就是组建

21:01.770 --> 21:02.770
就是实力

21:02.770 --> 21:03.770
组建实力

21:03.770 --> 21:04.770
或者是无佑实力

21:04.770 --> 21:05.770
他们生命周期都是一样的

21:05.770 --> 21:07.770
他的生命周期

21:07.770 --> 21:08.770
这里边的关键点

21:08.770 --> 21:11.770
就在于一个组建的运行过程中

21:11.770 --> 21:14.770
他从出生到死亡

21:14.770 --> 21:16.770
什么时候死亡

21:16.770 --> 21:18.770
比方说你一个组建

21:18.770 --> 21:19.770
利用了vif

21:19.770 --> 21:22.770
要么显示要么不显示

21:22.770 --> 21:23.770
一会儿他显示的时候

21:23.770 --> 21:25.770
是不是出生了

21:25.770 --> 21:26.770
他不显示的时候

21:26.770 --> 21:27.770
组建移除了

21:27.770 --> 21:29.770
移除他就死亡了

21:29.770 --> 21:30.770
移除就死亡了

21:30.770 --> 21:32.770
一个组建从出生到死亡

21:32.770 --> 21:33.770
他要经历过

21:33.770 --> 21:35.770
他要经历哪些函数

21:35.770 --> 21:36.770
这里有一张图

21:36.770 --> 21:37.770
我给大家看一下

21:41.770 --> 21:42.770
好 这里呢

21:49.850 --> 21:50.850
这个图

21:50.850 --> 21:51.850
我没有把copy过来

21:51.850 --> 21:55.740
把图copy过来一下

21:55.740 --> 21:56.740
把图片copy过来

22:02.180 --> 22:04.180
好 这个图片出来了

22:05.180 --> 22:06.180
这里的图

22:06.180 --> 22:08.180
它只是说了五幼实力

22:08.180 --> 22:09.180
一个五幼实力

22:09.180 --> 22:11.180
是通过六五幼来创建的

22:11.180 --> 22:13.180
但是对组建而言仍然一致

22:13.180 --> 22:15.180
仍然是一样的

22:15.180 --> 22:17.180
对于一个组建而言

22:17.180 --> 22:20.180
一个组建创建出来了之后

22:20.180 --> 22:22.180
他要经历过这么一些阶段

22:22.180 --> 22:23.180
我们简单的看一下

22:23.180 --> 22:24.180
其实这个图

22:24.180 --> 22:26.180
要贯穿整个五幼的学习

22:26.180 --> 22:27.180
哪怕你学习了五幼的

22:27.180 --> 22:28.180
原码分析部分

22:28.180 --> 22:29.180
都还要把这个图拿出来看

22:29.180 --> 22:31.180
所以这个图要看很多遍的

22:31.180 --> 22:32.180
所以我们这里呢

22:32.180 --> 22:34.180
以实用的角度为主

22:34.180 --> 22:37.180
讲解它最核心的内容

22:37.180 --> 22:38.180
这个五幼

22:38.180 --> 22:39.180
一个组建诞生之后

22:39.180 --> 22:41.180
它会经过这么一些函数

22:41.180 --> 22:44.180
一个叫做before create

22:45.180 --> 22:47.180
我们编写了编辑

22:47.180 --> 22:49.180
它会经过这么一些函数

22:49.180 --> 22:52.180
一个叫做before create

22:52.180 --> 22:53.180
这个函数是什么

22:53.180 --> 22:54.180
什么时候

22:54.180 --> 22:55.180
它是一个函数

22:55.180 --> 22:57.180
这个函数写到配置文件里边

22:57.180 --> 22:59.180
写到哪呢 写到这

23:00.180 --> 23:01.180
写到这

23:01.180 --> 23:04.180
你直接在那个配置对象里边写就行了

23:04.180 --> 23:08.180
比方说这个叫做before create

23:08.180 --> 23:09.180
这个函数

23:09.180 --> 23:11.180
你直接在写就完事了

23:11.180 --> 23:12.180
写了过这个函数

23:12.180 --> 23:13.180
什么时候运行了

23:13.180 --> 23:15.180
因为它这个特殊的名字

23:15.180 --> 23:17.180
因为它有一个特殊的名字

23:17.180 --> 23:18.180
这个名字呢

23:18.180 --> 23:20.180
它就是一个生命周期函数

23:20.180 --> 23:22.180
这里面会经过很多很多的函数

23:22.180 --> 23:23.180
你可以看到

23:23.180 --> 23:24.180
before create, created

23:24.180 --> 23:26.180
before mounted

23:26.180 --> 23:28.180
before update, updated

23:29.180 --> 23:31.180
它会经过这么多函数

23:31.180 --> 23:32.180
那么这些函数呢

23:32.180 --> 23:34.180
有先后的执行顺序

23:34.180 --> 23:35.180
这些就是生命周期函数

23:35.180 --> 23:37.180
从组建出生到死亡

23:37.180 --> 23:38.180
中间它会经过垃圾

23:38.180 --> 23:40.180
它会去自动执行哪些函数

23:40.180 --> 23:41.180
自动执行的

23:41.180 --> 23:42.180
你不用去调用

23:43.180 --> 23:45.180
那么这个函数是什么时候执行的

23:45.180 --> 23:46.180
如果你写了

23:46.180 --> 23:47.180
当然没写的话就无所谓了

23:47.180 --> 23:48.180
如果说你写了的话

23:48.180 --> 23:50.180
它什么时候执行呢

23:50.180 --> 23:51.180
它的执行时间点

23:51.180 --> 23:52.180
是在

23:54.180 --> 23:56.180
就是组建对象

23:56.180 --> 23:58.180
就是组建实力

23:58.180 --> 24:02.180
刚刚创建好之后

24:03.180 --> 24:05.180
一个组建的实力

24:05.180 --> 24:07.180
刚刚创建好之后

24:07.180 --> 24:08.180
它就会执行这个函数

24:08.180 --> 24:11.180
它执行的时间非常非常早

24:11.180 --> 24:12.180
找到什么时候呢

24:12.180 --> 24:13.180
此时

24:14.180 --> 24:17.180
组建实力中

24:17.180 --> 24:21.180
还没有挂展

24:21.180 --> 24:24.180
没有提升任何的数据

24:24.180 --> 24:26.180
任何的成员

24:26.180 --> 24:28.180
它找到这种时候

24:28.180 --> 24:29.180
也就是说

24:29.180 --> 24:30.180
如果说你在这个生命中间

24:30.180 --> 24:31.180
这个生命中间

24:31.180 --> 24:32.180
函数我们一般不会用

24:32.180 --> 24:33.180
了解一下就行了

24:33.180 --> 24:34.180
你在这个生命中间

24:34.180 --> 24:35.180
函数里边

24:35.180 --> 24:37.180
如果说你输出了Z10.

24:37.180 --> 24:39.180
比如说我们这里不是有数据吗

24:39.180 --> 24:40.180
Z10.current

24:40.180 --> 24:41.180
让大家看一下

24:41.180 --> 24:44.180
我们输出Z10.current

24:44.180 --> 24:45.180
输出

24:45.180 --> 24:46.180
那么我们这里

24:46.180 --> 24:47.180
到这边来看一下

24:47.180 --> 24:48.180
得到啥

24:48.180 --> 24:49.180
什么得到

24:49.180 --> 24:50.180
undefend

24:50.180 --> 24:51.180
对吧

24:51.180 --> 24:52.180
下面的错误不关它

24:52.180 --> 24:53.180
下面的错误

24:53.180 --> 24:54.180
下面说我们稍微改一下吧

24:54.180 --> 24:55.180
Movies

24:55.180 --> 24:56.180
现在到读的时候

24:56.180 --> 24:58.180
读到这个Movies

24:58.180 --> 25:01.180
到data里面的Movies

25:01.180 --> 25:02.180
那么这个时候

25:02.180 --> 25:03.180
你看

25:03.180 --> 25:04.180
undefend

25:04.180 --> 25:06.180
是没有这个数据

25:06.180 --> 25:07.180
它没有这个数据

25:07.180 --> 25:08.180
原来的意思吧

25:08.180 --> 25:10.180
也就是before create的时候

25:10.180 --> 25:11.180
调用这个函数的时候

25:11.180 --> 25:13.180
连实力里边数据都没有

25:13.180 --> 25:14.180
之前我们说过

25:14.180 --> 25:16.180
配置对象里边的data里边的配置

25:16.180 --> 25:17.180
像这里边的配置

25:17.180 --> 25:19.180
是不是会提升到实力里边去

25:19.180 --> 25:20.180
你看这个函数运行的时候

25:20.180 --> 25:22.180
连这个执行都还没有做

25:22.180 --> 25:23.180
那么这个时候

25:23.180 --> 25:24.180
它会运行这个函数

25:24.180 --> 25:25.180
如果说你希望在这里

25:25.180 --> 25:27.180
去做一些处理的话

25:27.180 --> 25:28.180
你就去做

25:28.180 --> 25:29.180
但是你要知道

25:29.180 --> 25:31.180
这个时候连提升都还没有做

25:31.180 --> 25:32.180
所以说你一般

25:32.180 --> 25:33.180
不会用到这个函数

25:33.180 --> 25:35.180
不会用到这个生命中的函数

25:35.180 --> 25:37.180
第二个函数

25:37.180 --> 25:39.180
叫做

25:39.180 --> 25:42.180
这个函数叫做created

25:42.180 --> 25:45.180
叫这个函数

25:45.180 --> 25:46.180
created

25:46.180 --> 25:47.180
那么这个函数

25:47.180 --> 25:49.180
是什么时候发生的呢

25:49.180 --> 25:50.180
就是

25:50.180 --> 25:52.180
组建

25:52.180 --> 25:53.180
已经

25:53.180 --> 25:55.180
组建实力中

25:55.180 --> 25:58.180
已经提升了

25:58.180 --> 25:59.180
该有的成员

25:59.180 --> 26:01.180
就是像什么data配置

26:01.180 --> 26:02.180
在data配置

26:02.180 --> 26:04.180
还有什么message配置

26:04.180 --> 26:05.180
computed配置

26:05.180 --> 26:06.180
props这些东西

26:06.180 --> 26:07.180
对吧

26:07.180 --> 26:08.180
它会提升到什么

26:08.180 --> 26:09.180
提升到那个

26:09.180 --> 26:10.180
就是实力里边去

26:10.180 --> 26:11.180
那么这件事情

26:11.180 --> 26:12.180
做完了之后

26:12.180 --> 26:13.180
它会运行这个函数

26:13.180 --> 26:14.180
它会运行这个函数

26:14.180 --> 26:16.180
但是

26:16.180 --> 26:18.180
此时

26:18.180 --> 26:20.180
没有渲染

26:20.180 --> 26:23.180
页面的任何内容

26:23.180 --> 26:25.180
它还没有渲染页面

26:25.180 --> 26:26.180
它页面还没有渲染

26:26.180 --> 26:27.180
那么这里

26:27.180 --> 26:28.180
给大家举个例子

26:28.180 --> 26:29.180
比方说你这里写个生命中函数

26:29.180 --> 26:31.180
created

26:33.180 --> 26:34.180
这个时候有没有数据呢

26:34.180 --> 26:35.180
我们输出一下

26:35.180 --> 26:36.180
你看一下有没有数据

26:36.180 --> 26:37.180
保存

26:37.180 --> 26:39.690
你看数据是不是出来了

26:39.690 --> 26:40.690
对吧

26:40.690 --> 26:41.690
数据有了

26:41.690 --> 26:42.690
数据是有了

26:42.690 --> 26:43.690
但是呢

26:43.690 --> 26:44.690
现在没有页面内容

26:44.690 --> 26:45.690
什么意思呢

26:45.690 --> 26:47.690
比方说我给这个div一个id

26:47.690 --> 26:48.690
mydiv

26:48.690 --> 26:49.690
随便写个

26:49.690 --> 26:50.690
那么如果说你在这里

26:50.690 --> 26:52.690
要用原生的动物操作

26:52.690 --> 26:53.690
document

26:54.690 --> 26:56.690
get element by id

26:56.690 --> 26:57.690
mydiv

26:57.690 --> 26:58.690
你看一下能不能得到

26:58.690 --> 27:00.690
能不能得到这个页面上的div

27:00.690 --> 27:01.690
看一下能不能得到

27:01.690 --> 27:02.690
保存

27:04.690 --> 27:05.690
数捺

27:05.690 --> 27:06.690
数得不到

27:06.690 --> 27:07.690
是得不到的

27:07.690 --> 27:08.690
为什么得不到呢

27:08.690 --> 27:09.690
因为这个时候

27:09.690 --> 27:12.690
页面还没有开始渲染

27:12.690 --> 27:14.690
还没有开始渲染

27:15.690 --> 27:16.690
这是关于这个

27:16.690 --> 27:17.690
这个函数

27:17.690 --> 27:18.690
关于这个函数

27:18.690 --> 27:19.690
creative

27:19.690 --> 27:20.690
好那么接下来我们继续看

27:20.690 --> 27:21.690
继续看

27:25.690 --> 27:26.690
好

27:26.690 --> 27:27.690
creative完了过来

27:27.690 --> 27:28.690
中间这一部分不用看

27:28.690 --> 27:29.690
跟我们目前没什么关系

27:29.690 --> 27:30.690
中间这一部分不用看

27:30.690 --> 27:31.690
往下走

27:31.690 --> 27:32.690
接下来

27:32.690 --> 27:33.690
它要

27:33.690 --> 27:35.690
它接下来要做这么一件事

27:35.690 --> 27:36.690
叫做

27:36.690 --> 27:37.690
又运行这个函数

27:37.690 --> 27:38.690
叫做before mount

27:38.690 --> 27:40.690
mount是什么

27:40.690 --> 27:41.690
叫做挂斩

27:42.690 --> 27:44.690
挂斩之前

27:44.690 --> 27:45.690
它又会运行这个函数

27:45.690 --> 27:46.690
因为它函数

27:46.690 --> 27:48.690
它是有顺序运行的

27:48.690 --> 27:50.690
叫做before mount

27:50.690 --> 27:51.690
它是什么呢

27:51.690 --> 27:53.690
它是组建

27:53.690 --> 27:55.690
即将完成

27:55.690 --> 27:57.690
即将进行渲染

27:57.690 --> 27:58.690
但是

27:58.690 --> 28:00.690
还没有进行渲染

28:00.690 --> 28:02.690
还没有进行渲染

28:03.690 --> 28:04.690
此时

28:04.690 --> 28:07.690
已经编译好模板

28:08.690 --> 28:10.690
渲染的所有条件

28:10.690 --> 28:11.690
已经满足

28:11.690 --> 28:13.690
就它已经可以渲染了

28:13.690 --> 28:14.690
它模板是要编译的

28:14.690 --> 28:15.690
就是我们这里写的模板

28:15.690 --> 28:17.690
它是要经过无幼编译的

28:17.690 --> 28:19.690
它是要把它转变成

28:19.690 --> 28:20.690
无幼可以识别的东西

28:20.690 --> 28:22.690
其实它最终就会转变成什么

28:22.690 --> 28:24.690
最终会转变成Render寒数

28:24.690 --> 28:25.690
我们之前说过

28:25.690 --> 28:26.690
咱们写的模板

28:26.690 --> 28:28.690
它最终会转变成Render那个配置

28:28.690 --> 28:29.690
那么这个时候

28:29.690 --> 28:30.690
它已经编译好了

28:30.690 --> 28:31.690
那么接下来

28:31.690 --> 28:33.690
但是还没有进行渲染

28:33.690 --> 28:34.690
所以说

28:34.690 --> 28:35.690
这个寒数里边

28:35.690 --> 28:36.690
它跟这个寒数一样

28:36.690 --> 28:37.690
我就不再写了

28:37.690 --> 28:38.690
这个寒数里边

28:38.690 --> 28:39.690
仍然是得不到

28:39.690 --> 28:41.690
以免的动物元素的

28:41.690 --> 28:42.690
仍然是得不到的

28:43.690 --> 28:44.690
那么接下来

28:44.690 --> 28:46.690
下面这个

28:46.690 --> 28:47.690
下面这个

28:47.690 --> 28:49.690
叫做Mounted

28:49.690 --> 28:51.690
Mounted

28:51.690 --> 28:53.690
这个是主件

28:53.690 --> 28:56.690
已经完成了渲染

28:56.690 --> 28:57.690
就是页面可见了

28:57.690 --> 28:59.690
页面已经有可见的东西了

28:59.690 --> 29:03.510
页面可见

29:03.510 --> 29:04.510
页面可见

29:04.510 --> 29:06.510
那么这个时候

29:06.510 --> 29:07.510
它会运行这个寒数

29:07.510 --> 29:08.510
所以在这个寒数

29:08.510 --> 29:10.510
是非常非常常见的

29:10.510 --> 29:12.510
给大家打一个重要

29:13.510 --> 29:15.510
因为在这个寒数里边

29:15.510 --> 29:16.510
你在这个寒数发生的时候

29:16.510 --> 29:17.510
在运行这个寒数的时候

29:17.510 --> 29:19.510
是不是页面就已经

29:19.510 --> 29:20.510
看得见了

29:20.510 --> 29:22.510
就已经看得见页面了

29:22.510 --> 29:23.510
所以说我们通常

29:23.510 --> 29:24.510
会在这个寒数里边

29:24.510 --> 29:25.510
处理很多事情

29:25.510 --> 29:26.510
或者在这个寒数里边

29:26.510 --> 29:27.510
进行处理

29:27.510 --> 29:28.510
为什么呢

29:28.510 --> 29:29.510
因为我们不希望

29:29.510 --> 29:31.510
我们的操作导致了页面

29:31.510 --> 29:32.510
用户都看不到东西

29:32.510 --> 29:33.510
比方说一个代码

29:33.510 --> 29:36.510
代码要执行很多很多东西

29:36.510 --> 29:38.510
如果说你写到前面

29:38.510 --> 29:39.510
这些寒数里边的话

29:39.510 --> 29:40.510
会导致什么

29:40.510 --> 29:41.510
你代码卡住

29:41.510 --> 29:43.510
那些代码可能要运行很久

29:43.510 --> 29:45.510
导致用户看不到东西

29:45.510 --> 29:46.510
因为它是一片空白

29:46.510 --> 29:47.510
因为那个时候页面

29:47.510 --> 29:48.510
还没有渲染

29:48.510 --> 29:50.510
所以说我们通常会写到

29:50.510 --> 29:51.510
这个寒数里边

29:51.510 --> 29:52.510
因为这个寒数里边

29:52.510 --> 29:53.510
页面已经渲染好了

29:53.510 --> 29:54.510
用户至少看得见东西了

29:54.510 --> 29:55.510
那么如果说你

29:55.510 --> 29:56.510
这个时候还要去

29:56.510 --> 29:57.510
处理一些问题的话

29:57.510 --> 29:59.510
那么在这里进行处理

29:59.510 --> 30:00.510
先让用户看得见东西

30:00.510 --> 30:01.510
提高这个响应速度

30:01.510 --> 30:02.510
对吧

30:02.510 --> 30:03.510
我们再去处理下一步事情

30:03.510 --> 30:04.510
所以说我们的

30:04.510 --> 30:05.510
阿加克斯请求

30:05.510 --> 30:06.510
写到哪个寒数里边

30:06.510 --> 30:07.510
就写到这个Mount

30:07.510 --> 30:09.510
这是一种非常非常常见的做法

30:10.510 --> 30:11.510
Mounty的

30:11.510 --> 30:12.510
就这么简单

30:12.510 --> 30:13.510
我就要说这个东西

30:13.510 --> 30:14.510
Mounty的

30:15.510 --> 30:17.510
当页面完成渲染之后

30:17.510 --> 30:18.510
一开始不是空数组吗

30:18.510 --> 30:19.510
对吧

30:19.510 --> 30:20.510
一开始渲染

30:21.510 --> 30:22.510
一开始说啥都没有

30:22.510 --> 30:23.510
对吧

30:23.510 --> 30:24.510
是不是啥都没有

30:24.510 --> 30:25.510
啥都没有吧

30:25.510 --> 30:26.510
因为空数组自然

30:26.510 --> 30:27.510
那个列表渲染不出来

30:27.510 --> 30:28.510
循环进不去

30:28.510 --> 30:29.510
好

30:29.510 --> 30:30.510
那么下面的总数

30:30.510 --> 30:31.510
页码总数是0

30:31.510 --> 30:32.510
对不对

30:32.510 --> 30:33.510
那么这个时候

30:33.510 --> 30:34.510
我干嘛呢

30:34.510 --> 30:35.510
我来进行

30:35.510 --> 30:36.510
获取数据

30:36.510 --> 30:37.510
在这里

30:38.510 --> 30:39.510
获取数据

30:39.510 --> 30:41.510
远程获取数据

30:41.510 --> 30:42.510
怎么获取呢

30:42.510 --> 30:43.510
我们就用刚才那个方法

30:43.510 --> 30:45.510
把这个导入进来

30:45.510 --> 30:48.080
把这个东西导入进来

30:48.080 --> 30:49.080
导入进来过后

30:49.080 --> 30:50.080
单码就这样子写

30:51.080 --> 30:52.080
可以复制一下

30:52.080 --> 30:53.080
对吧

30:53.080 --> 30:54.080
你可以复制一下

30:57.580 --> 30:58.580
好

30:58.580 --> 30:59.580
单码就这样写

30:59.580 --> 31:00.580
Movie service

31:00.580 --> 31:01.580
给什么位置

31:01.580 --> 31:02.580
这里第几页

31:02.580 --> 31:03.580
第几页

31:03.580 --> 31:05.580
是不是this.page

31:05.580 --> 31:07.580
this.current

31:07.580 --> 31:08.580
对吧

31:08.580 --> 31:09.580
这是我们的页码

31:09.580 --> 31:10.580
这么

31:10.580 --> 31:11.580
这么多页

31:11.580 --> 31:12.580
好

31:12.580 --> 31:13.580
每页钱多少条呢

31:13.580 --> 31:14.580
this.page size

31:14.580 --> 31:15.580
对吧

31:15.580 --> 31:16.580
每页钱多少条

31:16.580 --> 31:17.580
对不对

31:17.580 --> 31:18.580
这样子写

31:18.580 --> 31:19.580
传参数据

31:19.580 --> 31:20.580
好

31:20.580 --> 31:21.580
那么当我们拿到数据之后

31:21.580 --> 31:22.580
拿到数据之后

31:22.580 --> 31:23.580
数据里面不是有两个数据吗

31:23.580 --> 31:24.580
我们刚才看到过

31:24.580 --> 31:25.580
对吧

31:25.580 --> 31:26.580
有两个数据

31:26.580 --> 31:27.580
这个数据里面有两个数据

31:27.580 --> 31:28.580
拿两个数据

31:28.580 --> 31:29.580
一个是toto

31:29.580 --> 31:30.580
总数

31:30.580 --> 31:31.580
一个是data

31:31.580 --> 31:32.580
一个数组

31:32.580 --> 31:33.580
对不对

31:33.580 --> 31:34.580
是不是有这两个数据

31:34.580 --> 31:35.580
好了

31:35.580 --> 31:36.580
咱们来给数据进行复制

31:36.580 --> 31:37.580
怎么复制

31:37.580 --> 31:38.580
第2

31:38.580 --> 31:39.580
toto是不是要改

31:39.580 --> 31:40.580
改成啥

31:40.580 --> 31:41.580
改成risp

31:41.580 --> 31:42.580
第2

31:42.580 --> 31:43.580
toto

31:43.580 --> 31:44.580
然后this.data

31:44.580 --> 31:45.580
no

31:45.580 --> 31:46.580
movice

31:46.580 --> 31:47.580
是不是要改

31:47.580 --> 31:48.580
这一改是不是又响应式了

31:48.580 --> 31:49.580
对吧

31:49.580 --> 31:50.580
又响应式

31:50.580 --> 31:51.580
又重新

31:51.580 --> 31:53.580
它又进行重新渲染了

31:53.580 --> 31:54.580
重新渲染了

31:54.580 --> 31:55.580
等于什么

31:55.580 --> 31:56.580
risp

31:56.580 --> 31:57.580
data

31:57.580 --> 31:58.580
对不对

31:58.580 --> 31:59.580
就这样改了就完事了

31:59.580 --> 32:00.580
好

32:00.580 --> 32:01.580
一保存

32:01.580 --> 32:02.580
你看一下

32:02.580 --> 32:03.580
一开始

32:03.580 --> 32:04.580
是不是等一下

32:04.580 --> 32:05.580
一看

32:05.580 --> 32:06.580
看到东西

32:06.580 --> 32:07.580
稍微等一下

32:07.580 --> 32:10.580
这个远程有点卡

32:10.580 --> 32:11.580
所以现在出来了

32:11.580 --> 32:12.580
对吧

32:12.580 --> 32:13.580
对不对

32:13.580 --> 32:14.580
好

32:14.580 --> 32:15.580
点下一页

32:15.580 --> 32:17.580
点下一页的时候是叶码变了

32:17.580 --> 32:19.580
我先把这个东西搞定

32:19.580 --> 32:21.580
点下一页的时候是叶码变了

32:21.580 --> 32:23.580
叶码变了是不是要重新去获取数据

32:23.580 --> 32:24.580
对吧

32:24.580 --> 32:25.580
是不是要重新获取数据

32:25.580 --> 32:26.580
但是遗憾的是

32:26.580 --> 32:28.580
这个函数是不是只行一次

32:28.580 --> 32:30.580
你看这里的三个函数

32:30.580 --> 32:31.580
这几个函数

32:31.580 --> 32:34.580
它都会只行一次

32:34.580 --> 32:36.580
这些函数

32:36.580 --> 32:39.580
它都只执行一次

32:39.580 --> 32:41.580
它不会执行多次

32:41.580 --> 32:42.580
不会执行多次

32:42.580 --> 32:44.580
所以说这里我们要手动处理了

32:44.580 --> 32:45.580
比方说我们这里

32:45.580 --> 32:47.580
在没设置里面写上这么一个东西

32:47.580 --> 32:50.580
没设置配置里面

32:50.580 --> 32:51.580
写上这么一个

32:51.580 --> 32:53.580
也叫给它取个名字叫做get movies

32:53.580 --> 32:55.580
再封装一下

32:55.580 --> 32:57.580
再封装一下

32:57.580 --> 32:59.580
get movies

32:59.580 --> 33:02.580
然后我们在这里怎么写

33:02.580 --> 33:03.580
或者叫set movies

33:03.580 --> 33:06.580
设置我们的电影数据

33:06.580 --> 33:11.580
按照当前的夜码和夜容量

33:11.580 --> 33:16.580
重新设置电影和电影数据

33:16.580 --> 33:17.580
那么这个代码

33:17.580 --> 33:19.580
我们把这个东西放过来

33:19.580 --> 33:20.580
把这个东西放过来

33:20.580 --> 33:21.580
这样子封装一下

33:21.580 --> 33:22.580
再让它好调用一点

33:22.580 --> 33:23.580
那么一开始Mounted的时候

33:23.580 --> 33:24.580
在远程获取数据

33:24.580 --> 33:26.580
是不是调用this.set movies

33:26.580 --> 33:27.580
就对了

33:27.580 --> 33:28.580
把它封装了一下

33:28.580 --> 33:30.580
无非就是把它封装了一下

33:30.580 --> 33:32.580
this.set movies

33:32.580 --> 33:34.580
在这里调用这个函数

33:34.580 --> 33:36.580
这个函数就做了同样一件事情

33:36.580 --> 33:37.580
我只是给你封装了一下

33:37.580 --> 33:38.580
背后想多了

33:38.580 --> 33:40.580
只是给你封装了

33:40.580 --> 33:41.580
封装了一下

33:41.580 --> 33:42.580
这样子的方便一点

33:42.580 --> 33:43.580
那么之后夜码变了

33:43.580 --> 33:45.580
过后是不是要重新调用这个函数

33:45.580 --> 33:46.580
夜码变了之后

33:46.580 --> 33:47.580
是不是得重新调用

33:47.580 --> 33:48.580
那么怎么来办

33:48.580 --> 33:51.580
那么现在就不能用vmode了

33:51.580 --> 33:52.580
你看现在是不是灵活多了

33:52.580 --> 33:54.580
我刚才那个培肖逐渐

33:54.580 --> 33:55.580
这个培肖逐渐是不是不用改

33:55.580 --> 33:56.580
改的不用改

33:56.580 --> 33:58.580
因为它是扔出视线的

33:58.580 --> 34:00.580
那么我们这里把vmode拆开

34:00.580 --> 34:03.580
我们先打写的value

34:03.580 --> 34:04.580
对吧

34:04.580 --> 34:05.580
vmode就是这样子的

34:05.580 --> 34:07.580
input时间

34:07.580 --> 34:08.580
vmode是不是这样子写的

34:08.580 --> 34:09.580
create

34:09.580 --> 34:10.580
invent

34:10.580 --> 34:11.580
对不对 是不是这样子写的

34:11.580 --> 34:12.580
没问题吧

34:12.580 --> 34:13.580
就是这样子写的

34:13.580 --> 34:14.580
对不对

34:14.580 --> 34:16.580
就这样子写的

34:16.580 --> 34:17.580
那么input的时候

34:17.580 --> 34:21.580
我们重新给它换一个方法来处理

34:21.580 --> 34:22.580
handle

34:22.580 --> 34:24.580
handle就是签计

34:24.580 --> 34:25.580
配计签计

34:25.580 --> 34:27.580
运行这么一个函数

34:27.580 --> 34:29.580
运行这么一个函数

34:30.580 --> 34:31.580
頁马改变的时候

34:31.580 --> 34:32.580
运行这么一个函数

34:32.580 --> 34:33.580
这个函数有一个参数

34:33.580 --> 34:35.580
这个参数是谁传过来的

34:35.580 --> 34:36.580
是这个组件

34:36.580 --> 34:38.580
这个组件发生事件的时候

34:38.580 --> 34:40.580
他把这个参数给我传过来的

34:40.580 --> 34:41.580
要看得懂

34:41.580 --> 34:42.580
vmode

34:42.580 --> 34:44.580
它是跟这个两个东西写法是一致的

34:44.580 --> 34:45.580
input

34:45.580 --> 34:47.580
那么现在给了一个新的頁马

34:47.580 --> 34:48.580
新的頁马我们干嘛

34:48.580 --> 34:50.580
是不是一样的create

34:50.580 --> 34:51.580
等于NewPage

34:51.580 --> 34:53.580
无非那现在我们多做一件事

34:53.580 --> 34:57.580
就是重新设置电影的数据

34:57.580 --> 34:59.580
调用ZS

35:01.580 --> 35:03.580
更改新的頁马

35:03.580 --> 35:04.580
更改頁马

35:04.580 --> 35:06.580
然后重新设置电影数据

35:06.580 --> 35:08.580
因为你頁马一更改

35:08.580 --> 35:10.580
那么电影数据是不是重新设置的

35:10.580 --> 35:11.580
对吧

35:11.580 --> 35:12.580
它就运行函数

35:12.580 --> 35:13.580
把电影数据重新设置

35:13.580 --> 35:15.580
就这么简单

35:15.580 --> 35:16.580
好看一下这个结构

35:16.580 --> 35:18.580
有没有什么问题

35:19.580 --> 35:22.580
请求数据建议你不要写到create的里面

35:22.580 --> 35:24.580
create的里面

35:24.580 --> 35:26.580
你虽然说

35:26.580 --> 35:27.580
所以我告诉你

35:27.580 --> 35:28.580
为什么没有出问题

35:28.580 --> 35:30.580
因为请求需要一段时间

35:30.580 --> 35:32.580
等你把数据拿到之后

35:32.580 --> 35:34.580
它已经完成挂载了

35:34.580 --> 35:35.580
已经一般上已经显示了

35:35.580 --> 35:37.580
所以能够打看到一样的效果

35:37.580 --> 35:39.580
那如果说你是本地的系统

35:39.580 --> 35:41.580
它的速度非常快

35:41.580 --> 35:44.580
是不是就有可能会出问题

35:44.580 --> 35:46.580
是不是有可能会出问题

35:50.020 --> 35:52.020
哪里蒙蔽了

35:52.020 --> 35:54.020
哪里蒙蔽了

35:54.020 --> 35:56.020
写这个还是蒙蔽了吗

35:57.020 --> 35:58.020
我再说一次

35:58.020 --> 36:00.020
你这个阿迦克斯请求你听不懂

36:00.020 --> 36:01.020
你不要去管它

36:01.020 --> 36:03.020
你不然的话你后面就没发血了

36:03.020 --> 36:04.020
你要去纠结这个东西

36:04.020 --> 36:06.020
不要去纠结这个东西

36:06.020 --> 36:08.020
假设这就是一个系统函数

36:08.020 --> 36:10.020
介石自带的函数

36:10.020 --> 36:11.020
我就偏偏你们吧

36:11.020 --> 36:12.020
这是介石自带的函数

36:12.020 --> 36:14.020
介石里面有这么一个对象

36:14.020 --> 36:15.020
它里面提供了一个方法

36:15.020 --> 36:16.020
得到电影

36:16.020 --> 36:17.020
我也不知道介石

36:17.020 --> 36:18.020
它为什么需要得到电影

36:18.020 --> 36:20.020
反正它就提供了这么一个函数

36:20.020 --> 36:21.020
它里面传入一个页码

36:21.020 --> 36:23.020
传入一个夜容量

36:23.020 --> 36:25.020
然后呢

36:25.020 --> 36:26.020
得到一个对象

36:26.020 --> 36:27.020
得到一个对象

36:27.020 --> 36:28.020
对象里面有个认

36:28.020 --> 36:29.020
认这个函数

36:29.020 --> 36:30.020
里面传一个毁掉

36:30.020 --> 36:32.020
当服务器拿到结果之后

36:32.020 --> 36:33.020
前面固定

36:33.020 --> 36:34.020
你就把一个模板记住

36:34.020 --> 36:35.020
你不用去记

36:35.020 --> 36:36.020
你就把这个负质粘贴

36:36.020 --> 36:37.020
你知道每一个部分是啥

36:37.020 --> 36:38.020
这个是地方田业

36:38.020 --> 36:40.020
这个地方田业容量

36:40.020 --> 36:41.020
这个地方是服务器的数据

36:41.020 --> 36:43.020
服务器的数据格式是固定的

36:43.020 --> 36:44.020
格式是什么格式

36:44.020 --> 36:46.020
格式就是这样的格式

36:46.020 --> 36:47.020
就这样的格式

36:47.020 --> 36:48.020
格式固定的

36:48.020 --> 36:49.020
其他啥都不用管

36:49.020 --> 36:51.020
不然的话你后面就没发血了

36:51.020 --> 36:52.020
不要去纠结阿迦克斯

36:52.020 --> 36:54.020
而这个是一套课程的兄弟

36:54.020 --> 36:56.020
他不是说简单几句话就说完了的

36:56.020 --> 36:58.020
他是一套课程

36:58.020 --> 37:00.020
那么这里呢

37:00.020 --> 37:02.020
所以说服务器拿你只要知道

37:02.020 --> 37:03.020
这个地方田

37:03.020 --> 37:04.020
夜嘛是该这样填

37:04.020 --> 37:06.020
这个地方田业容量是该这样填

37:06.020 --> 37:07.020
是该这样填

37:07.020 --> 37:09.020
我把他包装了一个函数里面

37:09.020 --> 37:10.020
行吧

37:10.020 --> 37:11.020
那我就不包装函数吧

37:11.020 --> 37:12.020
不包装函数

37:12.020 --> 37:14.020
我就是写电重复代码而已

37:14.020 --> 37:16.020
不包装函数了

37:17.020 --> 37:18.020
不包装了

37:18.020 --> 37:20.020
重复代码就重复代码

37:20.020 --> 37:21.020
来吧

37:21.020 --> 37:22.020
重复代码就完了

37:22.020 --> 37:23.020
对不对

37:23.020 --> 37:25.020
刚才我只不过是包装了一个函数而已

37:25.020 --> 37:27.020
不要想多了

37:27.020 --> 37:29.020
这个东西是上节课的东西

37:29.020 --> 37:31.020
所以说每节课下来一定要去消化

37:31.020 --> 37:32.020
咱们的课程呢

37:32.020 --> 37:33.020
它是一个连续去

37:33.020 --> 37:34.020
它不是

37:34.020 --> 37:35.020
每节课是独立的

37:35.020 --> 37:37.020
它是一个连续的课程

37:37.020 --> 37:39.020
之前的课程一定要去消化

37:39.020 --> 37:40.020
一定要去消化

37:40.020 --> 37:43.020
那么现在的是不是能看懂一些了

37:43.020 --> 37:44.020
夹在完了之后

37:44.020 --> 37:46.020
等页面上显示了之后

37:46.020 --> 37:48.020
它无忧会自动的去调用这个函数

37:48.020 --> 37:49.020
你不用调用

37:49.020 --> 37:51.020
无忧是自动调用的

37:51.020 --> 37:52.020
调用那个函数的时候

37:52.020 --> 37:53.020
你干了什么事情呢

37:53.020 --> 37:55.020
你就去远程获取数据

37:55.020 --> 37:56.020
你不要管怎么远程获取数据的

37:56.020 --> 37:57.020
固定格式

37:57.020 --> 37:58.020
写词

37:58.020 --> 37:59.020
这是语法

37:59.020 --> 38:00.020
那么这个地方

38:00.020 --> 38:01.020
页码

38:01.020 --> 38:02.020
这个地方呢

38:02.020 --> 38:03.020
页容量填进去

38:03.020 --> 38:04.020
这个地方服气的结果

38:04.020 --> 38:05.020
我告诉你

38:05.020 --> 38:06.020
服气的结果是这样子

38:06.020 --> 38:08.020
那么你这里就直接写了

38:08.020 --> 38:09.020
我要改变数据

38:09.020 --> 38:10.020
把服气的总数拿到

38:10.020 --> 38:11.020
改变

38:11.020 --> 38:13.020
服气的data10里面的电量拿到

38:13.020 --> 38:14.020
改变

38:14.020 --> 38:15.020
那么分页

38:15.020 --> 38:16.020
页码改变之后

38:16.020 --> 38:17.020
页码改变之后

38:17.020 --> 38:19.020
为什么我现在不用vload了

38:19.020 --> 38:20.020
因为vload的话

38:20.020 --> 38:21.020
它是把页码改了

38:21.020 --> 38:22.020
就没说任何其他事情了

38:22.020 --> 38:23.020
对吧

38:23.020 --> 38:24.020
它把页码一改

38:24.020 --> 38:25.020
就完了

38:25.020 --> 38:27.020
实际上我们这里页码一变

38:27.020 --> 38:29.020
是不是得重新去拿数据

38:29.020 --> 38:31.020
是不是得重新去拿数据

38:31.020 --> 38:32.020
因此我这里呢

38:32.020 --> 38:34.020
需要把它展开了写

38:34.020 --> 38:35.020
需要注册这个事件

38:35.020 --> 38:37.020
input的事件展开了写

38:37.020 --> 38:38.020
那么这个事件里边呢

38:38.020 --> 38:40.020
我们把页码设置完了过后

38:40.020 --> 38:41.020
还要去做一件事

38:41.020 --> 38:43.020
重新拿电影数据

38:43.020 --> 38:44.020
这代码是不是一样的

38:44.020 --> 38:45.020
为什么刚才要提一个方法

38:45.020 --> 38:46.020
就是因为它代码一样的

38:46.020 --> 38:48.020
我拿着再重新写一遍了

38:50.020 --> 38:51.020
对吧

38:51.020 --> 38:53.020
就是我也看到很不舒服

38:53.020 --> 38:55.020
我也看到很不舒服

38:55.020 --> 38:56.020
这样子舒服一点

38:56.020 --> 38:58.020
就是把包装到没设置里面

38:58.020 --> 38:59.020
对吧

38:59.020 --> 39:00.020
因为没设置里面

39:00.020 --> 39:01.020
它本身就提到无用实力里面

39:01.020 --> 39:04.020
你当然可以用riss来调用

39:04.020 --> 39:05.020
那么这个地方

39:05.020 --> 39:07.020
其实生命周期我要讲的就没了

39:07.020 --> 39:08.020
就没了

39:08.020 --> 39:09.020
后边其实生命就是

39:09.020 --> 39:10.020
还有一些方法

39:10.020 --> 39:12.020
还有一些方法给大家看一下

39:12.020 --> 39:14.020
我们用的最多的就是这个

39:14.020 --> 39:15.020
这些东西我们平常都用不到

39:15.020 --> 39:16.020
平常都用不到

39:17.020 --> 39:18.020
还有这个

39:18.020 --> 39:20.020
这两个方法可能会用的

39:20.020 --> 39:22.020
就是它运行的比较频繁一点

39:24.020 --> 39:26.020
那么这个时候此时

39:29.020 --> 39:32.020
等待组建更新

39:32.020 --> 39:33.020
它等着了

39:34.020 --> 39:36.020
因为都已经完成渲染了

39:36.020 --> 39:37.020
对吧

39:37.020 --> 39:38.020
是不是要等着

39:38.020 --> 39:39.020
等什么等组建更新

39:39.020 --> 39:40.020
什么时候更新

39:40.020 --> 39:41.020
还记得吗

39:41.020 --> 39:42.020
我们之前说过

39:42.020 --> 39:43.020
什么时候更新

39:43.020 --> 39:47.020
当一个组建的属性或状态

39:47.020 --> 39:49.020
发生

39:49.020 --> 39:51.020
变化的时候

39:51.020 --> 39:53.020
会自动重新渲染

39:54.020 --> 39:55.020
如果说你当你的

39:55.020 --> 39:57.020
组建状态发生变化的时候

39:57.020 --> 39:59.020
状态或者是属性发生变化的时候

39:59.020 --> 40:01.020
你还要做一些额外的事情

40:01.020 --> 40:03.020
这个生命周期还是可以用到了

40:03.020 --> 40:05.020
一个是before update

40:05.020 --> 40:07.020
before update

40:07.020 --> 40:09.020
before update

40:09.020 --> 40:10.020
那么这个东西是

40:10.020 --> 40:16.020
当组建即将更新时的状态

40:16.020 --> 40:18.020
更新时

40:18.020 --> 40:20.020
组建即将更新

40:20.020 --> 40:22.020
但是还没有更新

40:22.020 --> 40:23.020
还没有更新

40:23.020 --> 40:24.020
那么这个时候

40:24.020 --> 40:29.020
就是此时你得到的数据

40:29.020 --> 40:31.020
数据是新的

40:31.020 --> 40:34.020
但是界面是旧的

40:34.020 --> 40:35.020
如果说你这个时候

40:35.020 --> 40:36.020
要做一些事情

40:36.020 --> 40:37.020
你去做

40:37.020 --> 40:40.020
我们一般也不会用这个函数

40:40.020 --> 40:41.020
有时候这个时候

40:41.020 --> 40:43.020
从data里面的

40:43.020 --> 40:44.020
拿到里面的数据

40:44.020 --> 40:45.020
拿到是最新的数据

40:45.020 --> 40:46.020
它数据已经改了

40:46.020 --> 40:49.020
但它界面还没有重新渲染

40:49.020 --> 40:50.020
还没有完成渲染

40:50.020 --> 40:52.020
界面还是以前的界面

40:52.020 --> 40:53.020
就是这个时间

40:53.020 --> 40:56.020
然后对应的时间叫做 update

40:56.020 --> 41:00.020
就组建已经完成更新

41:00.020 --> 41:05.020
此时数据和界面都是新的

41:05.020 --> 41:06.020
就这两个时间

41:06.020 --> 41:08.020
了解就行了

41:08.020 --> 41:09.020
然后接下来

41:09.020 --> 41:17.020
before destroy 和 destroy 的好理解

41:17.020 --> 41:20.020
当组建即将被销毁时

41:20.020 --> 41:21.020
什么时候被销毁

41:21.020 --> 41:22.020
这个组建不再显示的

41:22.020 --> 41:23.020
整个组建不再显示的

41:23.020 --> 41:24.020
通常情况下

41:24.020 --> 41:26.020
都是因为vif的存在

41:26.020 --> 41:27.020
这个指令

41:27.020 --> 41:28.020
vif放到组建上面

41:28.020 --> 41:29.020
这个组建有可能显示

41:29.020 --> 41:30.020
有可能不显示

41:30.020 --> 41:32.020
如果它突然只显示显示

41:32.020 --> 41:33.020
然后现在不显示的

41:33.020 --> 41:35.020
那么要把这个组建销毁掉

41:35.020 --> 41:36.020
要销毁这个组建的时候

41:36.020 --> 41:38.020
它会运行这个函数

41:38.020 --> 41:41.020
那么对应的 destroy 的

41:41.020 --> 41:48.020
这是当组建已经被销毁后

41:48.020 --> 41:49.020
那么运行这个函数

41:49.020 --> 41:51.020
一个是过去完成时

41:51.020 --> 41:52.020
对吧

41:52.020 --> 41:54.020
要说这个 destroy 的这个函数

41:54.020 --> 41:56.020
倒是有点连用

41:56.020 --> 41:57.020
一般情况下

41:57.020 --> 41:58.020
我们要销毁一些附带的职员

41:58.020 --> 41:59.020
比方有些组建

41:59.020 --> 42:00.020
它一开始的时候

42:00.020 --> 42:02.020
开了一个计时器

42:02.020 --> 42:05.020
用 sets interval 开了一个计时器

42:05.020 --> 42:06.020
那么这个组建销毁的时候

42:06.020 --> 42:07.020
你要把顺带

42:07.020 --> 42:09.020
把这个计时器给它清除掉

42:09.020 --> 42:10.020
就会写成这么一个代码

42:10.020 --> 42:12.020
我们就随便下写一个吧

42:12.020 --> 42:13.020
下写一个

42:13.020 --> 42:15.020
就有可能有可能有这么一个代码

42:15.020 --> 42:17.020
就是 money 的时候

42:17.020 --> 42:18.020
一开始的时候

42:18.020 --> 42:20.020
你开了一个计时器

42:20.020 --> 42:21.020
比方说你给它夹到碗了

42:21.020 --> 42:23.020
夹到那个 timer 里面

42:23.020 --> 42:28.020
就是 sets interval 开了一个计时器

42:28.020 --> 42:29.020
干啥事也无所谓

42:29.020 --> 42:31.020
每一秒钟做一件事

42:31.020 --> 42:32.020
然后呢

42:32.020 --> 42:34.020
这个组建如果被销毁过后

42:34.020 --> 42:35.020
一个计时器是不是得清除掉

42:35.020 --> 42:36.020
对不对

42:36.020 --> 42:37.020
得清除掉

42:37.020 --> 42:39.020
所以说你一般会写上这么一个

42:39.020 --> 42:42.590
dissuade

42:42.590 --> 42:43.590
dissuade

42:43.590 --> 42:45.590
then clear interval

42:45.590 --> 42:46.590
dissuade timer

42:46.590 --> 42:47.590
对吧

42:47.590 --> 42:48.590
我们一般就做这么一件事

42:48.590 --> 42:51.590
通常情况下也就做这么一件事

42:51.590 --> 42:53.590
其他也没啥

42:53.590 --> 42:55.590
其他就了解一下就行了

42:55.590 --> 42:56.590
生命周期里面

42:56.590 --> 42:58.590
对我们来说最重要的就是蒙体的

42:58.590 --> 42:59.590
就是蒙体的

42:59.590 --> 43:01.590
它不主色页面渲染

43:01.590 --> 43:02.590
它不会影响页面渲染

43:02.590 --> 43:03.590
页面正常渲染

43:03.590 --> 43:05.590
现在用户看见页面之后

43:05.590 --> 43:06.590
我们再去做别的事情

43:06.590 --> 43:07.590
对吧

43:07.590 --> 43:10.590
尽量让用户最快速度看到东西

43:10.590 --> 43:11.590
好 那么现在呢

43:11.590 --> 43:12.590
就出现这么一个效果

43:12.590 --> 43:14.590
好 那么现在点下页

43:14.590 --> 43:16.590
你看 点下页

43:16.590 --> 43:17.590
你看

43:17.590 --> 43:18.590
点下页 是不是

43:18.590 --> 43:20.590
用远程请求的感觉了

43:20.590 --> 43:21.590
对吧

43:21.590 --> 43:23.590
远程获取

43:23.590 --> 43:25.590
你看 是不是远程获取

43:25.590 --> 43:26.590
但是呢 现在还不是很好

43:26.590 --> 43:28.590
你看我们的效果是

43:28.590 --> 43:29.590
我们的效果

43:29.590 --> 43:30.590
点击过后

43:30.590 --> 43:32.590
三个字夹载中

43:32.590 --> 43:34.590
点击过后夹载中 对吧

43:34.590 --> 43:35.590
是不是这样子

43:35.590 --> 43:37.590
我想做出这么一种效果

43:37.590 --> 43:38.590
想做出这么一个效果

43:38.590 --> 43:39.590
这种效果

43:39.590 --> 43:41.590
那么这种效果怎么做呢

43:41.590 --> 43:43.590
这种效果我们需要新写个组件

43:43.590 --> 43:45.590
这个效果其实很好做

43:45.590 --> 43:46.590
我们新写个组件

43:46.590 --> 43:47.590
好 这里呢

43:47.590 --> 43:48.590
我们再接个文件

43:48.590 --> 43:49.590
交做呢

43:49.590 --> 43:50.590
因为我们这里相当于是

43:50.590 --> 43:52.590
谈了一个蒙程出来看没

43:52.590 --> 43:53.590
把整个页面遮住了

43:53.590 --> 43:55.590
不谈一个蒙程 对吧

43:55.590 --> 43:56.590
把整个页面遮住了

43:56.590 --> 43:57.590
所以说呢

43:57.590 --> 44:00.590
想做这么一个蒙程组件

44:00.590 --> 44:02.590
好 给它取名为

44:02.590 --> 44:04.590
model

44:04.590 --> 44:05.590
model

44:05.590 --> 44:07.590
这是个蒙程组件

44:07.590 --> 44:09.590
蒙程组件

44:09.590 --> 44:10.590
好 这里呢

44:10.590 --> 44:12.590
我们export

44:12.590 --> 44:17.540
defort

44:17.540 --> 44:20.540
导出一个组件

44:20.540 --> 44:23.430
template

44:23.430 --> 44:25.430
蒙程呢 就是一个div

44:25.430 --> 44:26.430
咱们给它写一些内样式嘛

44:26.430 --> 44:27.430
写一些内样式

44:27.430 --> 44:28.430
class

44:28.430 --> 44:29.430
model

44:29.430 --> 44:30.430
写这么一个内样式

44:30.430 --> 44:32.430
蒙程里面有个指的div

44:32.430 --> 44:33.430
不要说中间内容

44:33.430 --> 44:34.430
中间内容

44:34.430 --> 44:35.430
class

44:35.430 --> 44:36.430
center

44:36.430 --> 44:37.430
中间内容

44:37.430 --> 44:40.810
比方说随便写个加载中

44:40.810 --> 44:41.810
好 那么这里呢

44:41.810 --> 44:42.810
我们导出

44:42.810 --> 44:43.810
注意听哦

44:43.810 --> 44:45.810
有新字是马上来了

44:45.810 --> 44:47.810
导出这个蒙程

44:47.810 --> 44:48.810
然后呢

44:48.810 --> 44:49.810
我们在这个

44:49.810 --> 44:50.810
比方说嘛

44:50.810 --> 44:52.810
就在这个app里面去使用这个组件

44:52.810 --> 44:53.810
使用这个组件

44:53.810 --> 44:54.810
import

44:54.810 --> 44:55.810
model

44:55.810 --> 44:56.810
from

44:56.810 --> 44:58.810
就是地儿那个model

44:58.810 --> 45:01.760
点解释

45:01.760 --> 45:02.760
使用这个组件

45:02.760 --> 45:03.760
这个没问题吧

45:03.760 --> 45:04.760
把这个组件干嘛

45:04.760 --> 45:05.760
是不是要注册

45:05.760 --> 45:06.760
要注册组件

45:06.760 --> 45:08.760
要注册组件

45:08.760 --> 45:09.760
在这里注册组件

45:09.760 --> 45:11.760
这个东西要养成非常好

45:11.760 --> 45:13.760
就是要形成一个条件反射

45:13.760 --> 45:14.760
导入组件 注册组件

45:14.760 --> 45:16.760
然后在模板里面使用

45:16.760 --> 45:17.760
好 使用的话

45:17.760 --> 45:18.760
是不是把个蒙程拿进来就完事了

45:18.760 --> 45:19.760
对

45:19.760 --> 45:20.760
蒙程拿进来就完事了

45:20.760 --> 45:21.760
好 咱们来看一下吧

45:21.760 --> 45:23.760
当然现在没有任何效果

45:23.760 --> 45:25.760
没有任何效果

45:25.760 --> 45:26.760
东西呢

45:26.760 --> 45:28.760
我这可能有某个地方爆错了

45:28.760 --> 45:30.760
template is not defend

45:31.760 --> 45:33.760
它说蒙程组件里边

45:33.760 --> 45:34.760
我这写错了

45:35.760 --> 45:36.760
template

45:37.760 --> 45:39.760
好 那么现在你看一下下面

45:39.760 --> 45:40.760
是不是三个字夹带中

45:40.760 --> 45:41.760
对吧

45:41.760 --> 45:42.760
那么现在我们把央视给它设置一下

45:42.760 --> 45:44.760
给它设置一下央视

45:44.760 --> 45:45.760
其实这个央视呢

45:45.760 --> 45:46.760
我这里直接在这里写吧

45:46.760 --> 45:48.760
就在CSS里面写

45:48.760 --> 45:49.760
这个央视呢

45:49.760 --> 45:50.760
我再说两句吧

45:50.760 --> 45:51.760
这个央视呢

45:51.760 --> 45:52.760
实际上

45:52.760 --> 45:53.760
以后你们在公司里面

45:53.760 --> 45:55.760
真实的去进行开发的话

45:55.760 --> 45:56.760
央视还不是这样子写的

45:56.760 --> 45:58.760
可能要结合less

45:58.760 --> 45:59.760
结合SARS

45:59.760 --> 46:00.760
还要用脚

46:00.760 --> 46:01.760
还要用那个

46:01.760 --> 46:03.760
脚授架工具搭建出来

46:03.760 --> 46:05.760
把央视写到组件 文件里边

46:05.760 --> 46:06.760
就是把央视写到哪

46:06.760 --> 46:07.760
把央视写到这个文件里边

46:07.760 --> 46:09.760
这个文件里边既有模板

46:09.760 --> 46:10.760
又有功能 又带央视

46:10.760 --> 46:11.760
一个组件

46:11.760 --> 46:13.760
就是一个完整的功能块

46:13.760 --> 46:16.760
它有央视 有界面 有功能

46:16.760 --> 46:17.760
但是呢

46:17.760 --> 46:18.760
我们目前没办法

46:18.760 --> 46:20.760
因为没有学习脚授架

46:20.760 --> 46:22.760
脚授架就是更多的知识的

46:22.760 --> 46:23.760
好 那么给它写这么一个央视

46:23.760 --> 46:24.760
model

46:24.760 --> 46:27.760
先学习核心知识

46:27.760 --> 46:29.760
学习这个东西是 循序渐进的

46:29.760 --> 46:30.760
不要着急

46:30.760 --> 46:31.760
好 这里呢

46:31.760 --> 46:33.760
首先不把transit

46:33.760 --> 46:35.520
固定定位

46:35.520 --> 46:36.760
左边

46:36.760 --> 46:37.760
NAEPS 0

46:37.760 --> 46:39.760
这个没什么好说的

46:39.760 --> 46:41.760
没什么好说的

46:43.760 --> 46:45.760
那么那 background

46:45.760 --> 46:46.760
RGB A

46:47.760 --> 46:48.520
janeele

46:49.760 --> 46:50.760
这个我不感谢了

46:51.760 --> 46:52.760
model里边的center

46:52.760 --> 46:53.760
里面的dyv

46:53.760 --> 46:55.760
就这个 dyv

46:55.760 --> 46:56.760
哈

46:56.760 --> 46:58.760
好 这个DIV的话 我让它居中

46:58.760 --> 47:00.760
我让它居中 怎么居中

47:00.760 --> 47:02.760
left 50%

47:02.760 --> 47:04.760
precision absolute

47:04.760 --> 47:06.760
top 50%

47:06.760 --> 47:08.760
transform

47:08.760 --> 47:10.760
translate

47:10.760 --> 47:12.760
附了50%

47:12.760 --> 47:14.760
附了50%

47:14.760 --> 47:16.760
CSS3的居中方式 非常非常舒服

47:16.760 --> 47:18.760
相当舒服 自适应宽高

47:18.760 --> 47:20.760
然后居中

47:20.760 --> 47:22.760
这个设置个pending嘛

47:22.760 --> 47:24.760
pending是个相输

47:24.760 --> 47:26.760
难得设置了 直接来吧

47:26.760 --> 47:28.760
接下来看一下

47:28.760 --> 47:32.650
夹在中在哪 是在这

47:32.650 --> 47:34.650
三个字 夹在中 还没

47:34.650 --> 47:36.650
蒙城是不是出来了

47:36.650 --> 47:38.650
蒙城就出来了

47:38.650 --> 47:40.650
没有做啥

47:40.650 --> 47:42.650
我们只是选择这么一个组建而已

47:42.650 --> 47:44.650
个组建就是一个样式

47:44.650 --> 47:46.650
给它写了一些样式 蒙城就出来了

47:52.140 --> 47:55.140
好 接下来我们的问题是什么呢

47:55.140 --> 47:58.900
是关于这个组建的

47:58.900 --> 48:00.900
蒙城那个组建

48:00.900 --> 48:02.900
我们要多考虑一点

48:02.900 --> 48:04.900
跟着我的思路走

48:04.900 --> 48:06.900
我们这个组建里边

48:06.900 --> 48:08.900
我们目前显示的是

48:08.900 --> 48:10.900
三个字 夹在中

48:10.900 --> 48:12.900
但是我们一定是

48:12.900 --> 48:14.900
我们将来我们的系统里边

48:14.900 --> 48:16.900
蒙城里边一定显示的是这个玩意吗

48:16.900 --> 48:18.900
是不一定了

48:18.900 --> 48:20.900
这个地方的东西是不是不一定

48:20.900 --> 48:22.900
它是不是还有可能会

48:22.900 --> 48:24.900
显示一张图片 比如说广告

48:24.900 --> 48:26.900
谈一个广告出来是不是可能会显示一张图片啊

48:26.900 --> 48:30.270
如果说将来

48:30.270 --> 48:32.270
要谈一个登录框出来

48:32.270 --> 48:34.270
一看我们上网的时候

48:34.270 --> 48:36.270
没有登录 它会谈一个登录框出来

48:36.270 --> 48:38.270
那也是一个蒙城啊

48:38.270 --> 48:40.270
那这里是不是要写一个登录框

48:40.270 --> 48:42.270
就这里的可能性太多

48:42.270 --> 48:44.270
是不是这里的可能性非常多

48:44.270 --> 48:46.270
但是确定的只有一点

48:46.270 --> 48:48.270
它外面有一个D.A.V. model

48:48.270 --> 48:50.270
这里有一个D.A.V. center

48:50.270 --> 48:52.270
其他都没不确定

48:52.270 --> 48:54.270
这里边的东西是不是不确定

48:54.270 --> 48:56.270
是不是它有可能会非常非常多

48:56.270 --> 48:58.270
那么这种情况下怎么办

48:59.270 --> 49:00.270
哪个东西的CSS

49:00.270 --> 49:02.270
应这个是就是页面的CSS

49:02.270 --> 49:04.270
我在页面上直接用的

49:04.270 --> 49:06.270
应这个是页面上我们直接引用的CSS

49:06.270 --> 49:08.270
直接引用的CSS

49:11.710 --> 49:12.710
那么这个地方怎么办

49:12.710 --> 49:13.710
好 有一个同学非常聪明

49:13.710 --> 49:14.710
他知道

49:14.710 --> 49:15.710
这个东西我不知道对吧

49:15.710 --> 49:16.710
不知道怎么办

49:16.710 --> 49:17.710
用属性呗

49:17.710 --> 49:19.710
你给我传一个属性进来

49:19.710 --> 49:20.710
probs

49:20.710 --> 49:21.710
你给我传个属性进来

49:21.710 --> 49:23.710
比方说contents吧

49:23.710 --> 49:24.710
那么我们这里就很简单了

49:24.710 --> 49:26.710
我们渲染contents

49:26.710 --> 49:27.710
是不是这样子

49:27.710 --> 49:28.710
渲染contents就行了

49:28.710 --> 49:30.710
但是问题是

49:30.710 --> 49:32.710
那如果它不是一个制服串

49:32.710 --> 49:34.710
那这里写的不是一个制服串

49:34.710 --> 49:35.710
那这里还有D.A.V.

49:35.710 --> 49:37.710
还有安柳还有A元素怎么办

49:37.710 --> 49:39.710
那么这里可能是一个登陆框

49:39.710 --> 49:40.710
登陆框里边是不是还有D.A.V.

49:40.710 --> 49:42.710
还有什么乱七八糟的东西大推

49:42.710 --> 49:43.710
那又怎么办

49:43.710 --> 49:44.710
它怎么给我传

49:44.710 --> 49:46.710
怎么给我传呢

49:46.710 --> 49:48.710
没发传了

49:48.710 --> 49:50.710
现在问题是没发传了

49:50.710 --> 49:52.710
那么接下来我给大家看一个

49:52.710 --> 49:57.110
非常有意思的写法

49:57.110 --> 49:59.110
叫做snot

49:59.110 --> 50:04.130
什么意思

50:04.130 --> 50:05.130
不知道什么意思

50:05.130 --> 50:07.130
放这

50:07.130 --> 50:10.130
接下来我们到另外一边

50:10.130 --> 50:12.130
到这里

50:12.130 --> 50:13.130
你看着

50:13.130 --> 50:15.130
pager

50:15.130 --> 50:16.130
在这个app里边

50:16.130 --> 50:18.130
我们这里不在用这个组件吗

50:18.130 --> 50:19.130
在用这个组件

50:19.130 --> 50:22.130
看着发生一件非常神奇的事情

50:22.130 --> 50:23.130
摸到

50:23.130 --> 50:25.130
我在这里边可以写东西了

50:25.130 --> 50:26.130
之前我没有写过东西

50:26.130 --> 50:27.130
之前写的东西没用

50:27.130 --> 50:29.130
但是现在可以写东西了

50:29.130 --> 50:30.130
我写个

50:30.130 --> 50:31.130
这个玩意

50:31.130 --> 50:33.130
保存

50:33.130 --> 50:36.130
它显示这个玩意

50:36.130 --> 50:38.130
我这里写上

50:38.130 --> 50:39.130
一个啥呢

50:39.130 --> 50:41.130
一个汉字

50:41.130 --> 50:43.130
保存

50:43.130 --> 50:45.130
它是不是显示汉字

50:45.130 --> 50:46.130
对吧

50:46.130 --> 50:47.130
是不是显示汉字

50:47.130 --> 50:48.130
这里写上什么呢

50:48.130 --> 50:49.130
button

50:49.130 --> 50:50.130
一个按钮

50:50.130 --> 50:54.570
它显示一个按钮

50:54.570 --> 50:55.570
一个按钮

50:55.570 --> 50:57.570
你这里是不是还可以写D.A.V.

50:57.570 --> 50:58.570
还可以写任何东西

50:58.570 --> 51:01.570
什么都可以写了

51:01.570 --> 51:02.570
怎么回事呢

51:02.570 --> 51:05.570
这个玩意叫做插槽

51:05.570 --> 51:06.570
snot

51:06.570 --> 51:07.570
它叫做插槽

51:07.570 --> 51:09.570
它叫做插槽

51:09.570 --> 51:10.570
插槽的话

51:10.570 --> 51:12.570
那么这个是什么意思呢

51:12.570 --> 51:14.570
就是我预留一个空间出来

51:14.570 --> 51:15.570
这个空间放什么呢

51:15.570 --> 51:17.570
到时候你用这个组件的时候

51:17.570 --> 51:20.570
如果说你往这个组件的元素内容里边

51:20.570 --> 51:21.570
你数一遍你写啥

51:21.570 --> 51:22.570
你写的啥

51:22.570 --> 51:24.570
我到时候运行这个组件的时候

51:24.570 --> 51:25.570
现在这个组件的时候

51:25.570 --> 51:26.570
我就把你传

51:26.570 --> 51:28.570
我就会把你用这个组件的时候

51:28.570 --> 51:30.570
传这个元素内容放到哪儿

51:30.570 --> 51:32.570
放到这个插槽里边

51:32.570 --> 51:34.570
就这么简单

51:34.570 --> 51:35.570
很好理解是吧

51:35.570 --> 51:36.570
所以很好理解

51:36.570 --> 51:37.570
好

51:37.570 --> 51:38.570
这东西我肯定可以记住了

51:38.570 --> 51:39.570
放心

51:39.570 --> 51:40.570
这东西

51:41.570 --> 51:43.570
这东西叫做插槽

51:43.570 --> 51:45.570
插槽是什么呢

51:45.570 --> 51:48.570
插槽的作用

51:48.570 --> 51:52.570
插槽就是snot

51:52.570 --> 51:54.570
可以将

51:55.570 --> 51:58.570
元素内容

51:58.570 --> 52:02.570
插槽位置放置的是

52:02.570 --> 52:05.570
使用组件时

52:05.570 --> 52:08.570
传递的元素内容

52:08.570 --> 52:09.570
你传的啥

52:09.570 --> 52:10.570
我就给你放啥

52:10.570 --> 52:11.570
就是插槽

52:11.570 --> 52:13.570
这个插槽里想写哪儿写了

52:13.570 --> 52:14.570
按写哪儿写了

52:14.570 --> 52:15.570
随便你写了

52:15.570 --> 52:16.570
都可以

52:16.570 --> 52:17.570
这是snot

52:17.570 --> 52:18.570
所以非常简单

52:18.570 --> 52:20.570
非常非常简单

52:20.570 --> 52:22.570
这个插槽里边还可以写默认值

52:23.570 --> 52:24.570
默认值

52:24.570 --> 52:26.570
如果说你不传递的话

52:26.570 --> 52:28.570
插槽里这里写的东西还是蛮多的

52:28.570 --> 52:29.570
这种我们平常用的话

52:29.570 --> 52:30.570
一般就用这个东西够用了

52:30.570 --> 52:32.570
没有传东西

52:32.570 --> 52:34.570
没有传东西你看是不是默认值

52:34.570 --> 52:35.570
默认值

52:35.570 --> 52:37.570
如果你说你传的东西

52:37.570 --> 52:39.570
那就用你传的东西

52:39.570 --> 52:40.570
对不对

52:40.570 --> 52:42.570
就是插槽

52:42.570 --> 52:44.570
非常非常灵活的一个东西

52:44.570 --> 52:45.570
有了插槽的存在

52:45.570 --> 52:46.570
我们就可以写很多的

52:46.570 --> 52:48.570
公共组件出来

52:48.570 --> 52:51.570
而且插槽还可以给名字

52:51.570 --> 52:53.570
比如说有的时候你主件里边有几个插槽

52:53.570 --> 52:54.570
这个都是扩展知识的

52:54.570 --> 52:55.570
聊聊一下就行了

52:55.570 --> 52:58.570
有的时候你可以给这个插槽写个名字

52:58.570 --> 52:59.570
几个名字

52:59.570 --> 53:01.570
比方说我给他个name

53:01.570 --> 53:03.570
name abc

53:03.570 --> 53:05.570
你这样子写的

53:05.570 --> 53:06.570
这个插槽有名字了

53:06.570 --> 53:08.570
它叫做居名插槽

53:08.570 --> 53:09.570
你看现在有用吗

53:09.570 --> 53:10.570
没用了

53:10.570 --> 53:11.570
为什么呢

53:11.570 --> 53:12.570
因为你现在写的插槽

53:12.570 --> 53:13.570
你现在写的那种

53:13.570 --> 53:15.570
它只会放到默认插槽里边

53:15.570 --> 53:16.570
也就是它没有名字的插槽

53:16.570 --> 53:18.570
就是默认插槽

53:18.570 --> 53:19.570
没有名字的插槽

53:19.570 --> 53:20.570
就是默认插槽

53:20.570 --> 53:22.570
它只会放到默认插槽里边

53:22.570 --> 53:23.570
它不会放到哪

53:23.570 --> 53:24.570
它不会放到有名字的插槽里边

53:24.570 --> 53:26.570
如果说你要放到有名字的插槽里边

53:26.570 --> 53:27.570
怎么写呢

53:27.570 --> 53:28.570
你在这样子写

53:28.570 --> 53:29.570
这个东西聊一下就行了

53:29.570 --> 53:31.570
就听听就过了

53:31.570 --> 53:33.570
vace note

53:33.570 --> 53:34.570
用vace note指令

53:34.570 --> 53:36.570
给它指定名字abc

53:36.570 --> 53:38.570
它对应哪个插槽的名字

53:38.570 --> 53:41.570
它对应abc这个插槽的名字

53:41.570 --> 53:43.570
你要把名字该写出来了

53:43.570 --> 53:44.570
对应abc这个插槽

53:44.570 --> 53:46.570
这里面的内容放到哪个插槽

53:46.570 --> 53:48.570
放到abc这个插槽

53:51.570 --> 53:52.570
看一下啊

53:52.570 --> 53:53.570
写出来了吗

53:53.570 --> 53:57.710
没有爆出啊

53:57.710 --> 53:58.710
发信

53:59.710 --> 54:00.710
我看看啊

54:00.710 --> 54:01.710
再看一下

54:01.710 --> 54:04.710
temporalize vace note

54:05.710 --> 54:06.710
这边

54:06.710 --> 54:08.710
snot name abc

54:08.710 --> 54:09.710
插槽是有的

54:09.710 --> 54:10.710
有的

54:10.710 --> 54:12.710
我们这里写个默认指呢

54:12.710 --> 54:13.710
写个默认指

54:13.710 --> 54:14.710
默认指是生效的

54:14.710 --> 54:16.710
我这里拿写出来了

54:17.710 --> 54:20.710
temporalize vace note

54:20.710 --> 54:23.710
估计又是一个哪个单词写的问题

54:26.710 --> 54:27.710
这个地方

54:27.710 --> 54:28.710
帽号abc

54:28.710 --> 54:29.710
帽号abc不是等于abc

54:29.710 --> 54:30.710
帽号abc

54:30.710 --> 54:31.710
你看

54:31.710 --> 54:32.710
这边又生效了

54:32.710 --> 54:34.710
那么它就这个名字写到这

54:34.710 --> 54:35.710
名字就写到这

54:35.710 --> 54:36.710
那么这里呢

54:36.710 --> 54:38.710
这个名字就对应到这边的插槽名字

54:38.710 --> 54:40.710
对应到这边的插槽名字

54:40.710 --> 54:42.710
这是具名插槽

54:42.710 --> 54:43.710
具名插槽的好处在于

54:43.710 --> 54:45.710
你可以写多个插槽

54:45.710 --> 54:47.710
你可以写多个

54:47.710 --> 54:48.710
比方说这里呢

54:48.710 --> 54:49.710
有一个插槽

54:49.710 --> 54:51.710
我们还可以写两个插槽

54:51.710 --> 54:54.710
abc的东西放这个位置

54:54.710 --> 54:56.710
目前没有什么区别

54:56.710 --> 54:57.710
abc放这个位置

54:57.710 --> 54:58.710
bcd放这个位置

54:58.710 --> 54:59.710
那么这里呢

54:59.710 --> 55:00.710
你可以传的时候

55:00.710 --> 55:01.710
是不是可以分开传

55:01.710 --> 55:02.710
对不对

55:02.710 --> 55:03.710
分开传

55:03.710 --> 55:04.710
bcd

55:04.710 --> 55:05.710
bcd传一个a元数

55:05.710 --> 55:06.710
传一个a元数

55:07.710 --> 55:08.710
你看一下

55:09.710 --> 55:11.710
我的a元数呢

55:11.710 --> 55:12.710
我这边没保存

55:12.710 --> 55:13.710
保存

55:13.710 --> 55:15.710
你看a元数是放这

55:15.710 --> 55:16.710
a元数放这

55:16.710 --> 55:17.710
放后边

55:18.710 --> 55:20.710
它可以传多个插槽进去

55:20.710 --> 55:21.710
那么多个插槽

55:21.710 --> 55:22.710
具名插槽的作用

55:22.710 --> 55:23.710
主要是用来做布局的

55:23.710 --> 55:25.710
比方说我可以写个组件

55:25.710 --> 55:27.710
写个组件写两栏布局

55:27.710 --> 55:28.710
三栏布局

55:28.710 --> 55:30.710
比方说我这里随便举个例子

55:30.710 --> 55:32.710
大家有这么个印象就行了

55:32.710 --> 55:34.710
因为你们

55:34.710 --> 55:35.710
一时半会

55:35.710 --> 55:36.710
肯定还不设计到

55:36.710 --> 55:37.710
做一些公共组件

55:37.710 --> 55:38.710
这个还是有些难度的

55:38.710 --> 55:39.710
比方说我们这里

55:39.710 --> 55:40.710
做一个组件

55:40.710 --> 55:41.710
就是container

55:41.710 --> 55:42.710
随便写个

55:42.710 --> 55:43.710
那么这里是naps

55:43.710 --> 55:44.710
左边栏

55:44.710 --> 55:45.710
两栏布局

55:45.710 --> 55:46.710
假设

55:46.710 --> 55:47.710
这个是右边栏

55:47.710 --> 55:48.710
class

55:48.710 --> 55:49.710
right

55:49.710 --> 55:50.710
那么我们这里

55:50.710 --> 55:51.710
左边栏放啥

55:51.710 --> 55:52.710
我不知道

55:52.710 --> 55:53.710
我只是把央视写出来了

55:53.710 --> 55:54.710
我并不知道放啥

55:54.710 --> 55:55.710
那么左边栏我放啥呢

55:55.710 --> 55:56.710
用个插槽

55:56.710 --> 55:58.710
用一个插槽放这

55:58.710 --> 55:59.710
我不知道

55:59.710 --> 56:00.710
给我传呗

56:00.710 --> 56:01.710
给它个名字

56:01.710 --> 56:02.710
给它个名字

56:03.710 --> 56:04.710
name

56:04.710 --> 56:06.710
等于naps

56:06.710 --> 56:07.710
那么这里呢

56:07.710 --> 56:08.710
用个插槽

56:08.710 --> 56:10.710
name等于right

56:10.710 --> 56:11.710
right

56:11.710 --> 56:12.710
对吧

56:12.710 --> 56:13.710
用两个插槽

56:13.710 --> 56:14.710
那么你传的时候

56:14.710 --> 56:15.710
你看一下

56:16.710 --> 56:18.710
这里是right

56:18.710 --> 56:19.710
那么这边是不是左

56:19.710 --> 56:20.710
它这个东西会放到哪

56:20.710 --> 56:21.710
是不是放到这

56:21.710 --> 56:22.710
放到这个位置

56:22.710 --> 56:23.710
对吧

56:23.710 --> 56:24.710
放到左边

56:24.710 --> 56:25.710
就实现了左边蓝效果

56:25.710 --> 56:26.710
这个东西放到哪

56:26.710 --> 56:27.710
放到右边

56:27.710 --> 56:28.710
会放到右边

56:28.710 --> 56:30.710
但是我这些内样式都没有写

56:30.710 --> 56:31.710
都没有写

56:31.710 --> 56:32.710
举个例子

56:32.710 --> 56:33.710
我这里返回回去

56:33.710 --> 56:34.710
这东西了解就行了

56:34.710 --> 56:35.710
你只要知道

56:35.710 --> 56:36.710
插槽里边

56:36.710 --> 56:37.710
其实还有很多东西的

56:37.710 --> 56:38.710
还有很多东西的

56:38.710 --> 56:39.710
只不过我们目前

56:39.710 --> 56:41.710
学习的插槽就完全够用了

56:41.710 --> 56:43.710
就一个默认的插槽

56:43.710 --> 56:44.710
直接写就完事了

56:44.710 --> 56:45.710
加载中

56:45.710 --> 56:46.710
对吧

56:46.710 --> 56:48.710
加载中

56:48.710 --> 56:49.710
好

56:49.710 --> 56:50.710
那么现在这个model

56:50.710 --> 56:51.710
是不是非常灵活了

56:51.710 --> 56:52.710
这个组件

56:52.710 --> 56:53.710
这个组件就变得非常灵活了

56:53.710 --> 56:54.710
它只要它是一个盟城

56:54.710 --> 56:55.710
它可以是加载中

56:55.710 --> 56:57.710
也可以弹出登陆框

56:57.710 --> 56:58.710
也可以弹出一个广告

56:58.710 --> 56:59.710
啥都可以弹

56:59.710 --> 57:00.710
对吧

57:00.710 --> 57:01.710
它只是给的是这个样式

57:01.710 --> 57:02.710
中间是用了插槽

57:02.710 --> 57:03.710
你想打传打传

57:03.710 --> 57:05.710
因此我们可以利用这个model组件

57:05.710 --> 57:06.710
专门来做针对

57:06.710 --> 57:07.710
加载中

57:07.710 --> 57:08.710
咱们专门来做一个组件

57:08.710 --> 57:10.710
叫做loading组件

57:10.710 --> 57:11.710
这个组件专门来做

57:11.710 --> 57:12.710
加载中效果

57:12.710 --> 57:14.710
专门来做加载中效果

57:14.710 --> 57:15.710
这个组件特别好做

57:15.710 --> 57:16.710
给大家看一下

57:16.710 --> 57:18.710
因为有了盟城存在

57:18.710 --> 57:20.710
特别特别好做这个组件

57:20.710 --> 57:27.060
template

57:27.060 --> 57:28.060
导出

57:28.060 --> 57:29.060
export default

57:29.060 --> 57:30.060
导出

57:30.060 --> 57:31.060
template

57:31.060 --> 57:32.060
好

57:32.060 --> 57:33.060
那么这里我干嘛呢

57:33.060 --> 57:38.230
我就使用model

57:38.230 --> 57:39.230
就使用这个

57:39.230 --> 57:40.230
里边写

57:40.230 --> 57:41.230
写个div

57:41.230 --> 57:42.230
因为这里边想传啥传啥

57:42.230 --> 57:43.230
对吧

57:43.230 --> 57:44.230
div能不能传

57:44.230 --> 57:45.230
可以传

57:45.230 --> 57:46.230
加载中

57:46.230 --> 57:47.230
加载中

57:47.230 --> 57:49.230
我还可以给这个div设置一下样式

57:50.230 --> 57:51.230
设置一下样式

57:51.230 --> 57:53.230
比方说放size

57:53.230 --> 57:55.230
1.5页

57:55.230 --> 57:56.230
还有什么呢

57:56.230 --> 57:57.230
还有那个

57:57.230 --> 57:58.230
color

57:58.230 --> 57:59.230
白色

57:59.230 --> 58:00.230
可以设置样式的

58:00.230 --> 58:01.230
随便你设置

58:01.230 --> 58:03.230
这个东西是不是传到插槽里边去了

58:03.230 --> 58:06.230
那么就做出来这么一个loading组件

58:06.230 --> 58:07.230
这里还要注册

58:07.230 --> 58:09.230
注册component

58:09.230 --> 58:11.230
model

58:11.230 --> 58:12.230
就注册了

58:12.230 --> 58:13.230
这个组件就写好了

58:13.230 --> 58:15.230
就是利用刚才那个组件

58:15.230 --> 58:16.230
做了一个loading组件出来

58:16.230 --> 58:18.230
进一步进行的封装

58:18.230 --> 58:20.230
那你可以知道model这个组件

58:20.230 --> 58:22.230
是不是可以做出很多好玩的组件出来

58:22.230 --> 58:23.230
对吧

58:23.230 --> 58:24.230
好

58:24.230 --> 58:26.230
那么现在我们在app里边

58:26.230 --> 58:28.230
是不是可以直接使用loading

58:28.230 --> 58:30.230
使用什么loading组件

58:30.230 --> 58:32.930
loading

58:32.930 --> 58:33.930
你看这样子一层一层包装

58:33.930 --> 58:35.930
整个项目结构非常非常地清晰

58:35.930 --> 58:37.930
一个组件做一件事

58:37.930 --> 58:38.930
一个组件做一件事

58:38.930 --> 58:39.930
那么把loading组件注册进来

58:39.930 --> 58:40.930
不要

58:40.930 --> 58:42.930
我们就不直接去使用model了

58:42.930 --> 58:43.930
那个台原始了

58:43.930 --> 58:45.930
我们用那个更加高级的loading

58:45.930 --> 58:46.930
它给你封装了一下

58:46.930 --> 58:47.930
更加好用

58:47.930 --> 58:49.930
我们这里是不是直接使用loading就完事了

58:49.930 --> 58:50.930
对不对

58:50.930 --> 58:52.930
是不是直接使用loading就完事了

58:52.930 --> 58:53.930
保存

58:53.930 --> 58:54.930
你看一下

58:54.930 --> 58:56.930
所以加点东西的效果就出来了

58:56.930 --> 58:58.930
加点东西的效果就出来了

58:58.930 --> 58:59.930
好

58:59.930 --> 59:00.930
这个应该很简单吧

59:00.930 --> 59:01.930
对不对

59:05.930 --> 59:06.930
只能自动补权

59:06.930 --> 59:07.930
一天没有留言说

59:07.930 --> 59:08.930
因为我

59:08.930 --> 59:10.930
它就自动补权了

59:10.930 --> 59:11.930
我也不知道为什么自动补权

59:11.930 --> 59:13.930
它就自动补权了

59:13.930 --> 59:15.930
它就自动补权了

59:15.930 --> 59:16.930
就是写了写的按一下

59:16.930 --> 59:17.930
太补权

59:17.930 --> 59:18.930
它就自动补权了

59:18.930 --> 59:19.930
我也不知道为什么它能自动补权

59:19.930 --> 59:21.930
我也不知道按了啥插件

59:21.930 --> 59:22.930
然后呢

59:22.930 --> 59:23.930
这个loading插件就出来了

59:23.930 --> 59:24.930
但是呢

59:24.930 --> 59:25.930
这个loading插件是不是

59:25.930 --> 59:26.930
它有可能显示

59:26.930 --> 59:27.930
有可能不显示

59:27.930 --> 59:29.930
它是不是有可能显示

59:29.930 --> 59:30.930
有可能不显示

59:30.930 --> 59:31.930
好

59:31.930 --> 59:32.930
那么这里呢

59:32.930 --> 59:33.930
它到底显不显示

59:33.930 --> 59:34.930
我决定不了啊

59:34.930 --> 59:35.930
你这个loading图件是不是决定不了

59:35.930 --> 59:37.930
那是不是老问题来了

59:37.930 --> 59:38.930
probs

59:38.930 --> 59:39.930
对不对

59:39.930 --> 59:41.930
给我个数据一般

59:41.930 --> 59:42.930
秀

59:42.930 --> 59:43.930
到底要不要显示

59:43.930 --> 59:44.930
比方说我可以把它设置为

59:44.930 --> 59:45.930
给它一个默认值吗

59:45.930 --> 59:46.930
都可以

59:46.930 --> 59:48.930
秀这个数项

59:48.930 --> 59:49.930
Type是什么

59:49.930 --> 59:50.930
不认

59:50.930 --> 59:51.930
不认

59:51.930 --> 59:52.930
要不要

59:52.930 --> 59:53.930
不认

59:53.930 --> 59:54.930
好

59:54.930 --> 59:55.930
default

59:55.930 --> 59:56.930
默认值

59:56.930 --> 59:57.930
默认值是不显示的

59:57.930 --> 59:59.930
默认值不显示

59:59.930 --> 01:00:00.930
你可以给我传第一个

01:00:00.930 --> 01:00:01.930
让它显示

01:00:01.930 --> 01:00:02.930
把它传为去

01:00:02.930 --> 01:00:03.930
把它设为去

01:00:03.930 --> 01:00:04.930
它就显示

01:00:04.930 --> 01:00:05.930
把它设为forced

01:00:05.930 --> 01:00:06.930
它就不显示

01:00:06.930 --> 01:00:07.930
它来决定显不显示

01:00:07.930 --> 01:00:08.930
怎么来显呢

01:00:09.930 --> 01:00:11.930
简不简单

01:00:11.930 --> 01:00:12.930
很简单

01:00:12.930 --> 01:00:14.930
以后要说你用原生界式

01:00:14.930 --> 01:00:15.930
还要判断

01:00:15.930 --> 01:00:16.930
如果修为去

01:00:16.930 --> 01:00:17.930
然后要怎么样怎么样

01:00:17.930 --> 01:00:19.930
修为forced要怎么样怎么样

01:00:19.930 --> 01:00:21.930
麻烦

01:00:21.930 --> 01:00:23.930
从前一口气上

01:00:23.930 --> 01:00:25.930
上个一两个都麻烦

01:00:25.930 --> 01:00:27.930
现在一口气上五楼不费劲

01:00:27.930 --> 01:00:28.930
在广告里边不是这样说吗

01:00:28.930 --> 01:00:29.930
加上个为义父

01:00:29.930 --> 01:00:31.930
秀它为去显示

01:00:31.930 --> 01:00:32.930
它为forced不显示

01:00:32.930 --> 01:00:33.930
不就完了吗

01:00:33.930 --> 01:00:34.930
对不对

01:00:34.930 --> 01:00:35.930
加个为义父就完事了

01:00:35.930 --> 01:00:36.930
好

01:00:36.930 --> 01:00:38.930
那么现在有了这么一个东西之后

01:00:38.930 --> 01:00:39.930
在app里边

01:00:39.930 --> 01:00:41.930
是不是可以控制它显不显示的

01:00:41.930 --> 01:00:42.930
怎么控制它

01:00:42.930 --> 01:00:43.930
我们通过一个数据来控制

01:00:43.930 --> 01:00:45.930
凡是要控制界面

01:00:45.930 --> 01:00:46.930
注意啊以后编写无忧

01:00:46.930 --> 01:00:47.930
这个思维一定要转变过来

01:00:47.930 --> 01:00:49.930
凡是要控制界面

01:00:49.930 --> 01:00:50.930
一定是数据

01:00:50.930 --> 01:00:52.930
好那么这里要加个数据

01:00:52.930 --> 01:00:55.930
表示是否夹在中

01:00:55.930 --> 01:00:56.930
默认为forced

01:00:56.930 --> 01:00:57.930
什么叫夹在中

01:00:57.930 --> 01:00:59.930
就是正在远程获取数据

01:00:59.930 --> 01:01:00.930
对吧

01:01:00.930 --> 01:01:02.930
是否正在远程获取数据

01:01:02.930 --> 01:01:03.930
这个表示

01:01:03.930 --> 01:01:07.930
是否正在远程获取数据

01:01:07.930 --> 01:01:08.930
默认是没有

01:01:08.930 --> 01:01:10.930
一开始没有获取数据吗

01:01:10.930 --> 01:01:11.930
好

01:01:11.930 --> 01:01:13.930
然后什么时候把它设为去呢

01:01:13.930 --> 01:01:14.930
很简单

01:01:14.930 --> 01:01:17.930
你这里不在set some place吗

01:01:17.930 --> 01:01:18.930
不在设置电影吗

01:01:18.930 --> 01:01:20.930
设置电影是不是远程获取

01:01:20.930 --> 01:01:21.930
我先干嘛呢

01:01:21.930 --> 01:01:24.930
先把你这个东西计设成去

01:01:24.930 --> 01:01:27.240
好

01:01:27.240 --> 01:01:28.240
开始远程获取

01:01:28.240 --> 01:01:30.240
远程获取数据

01:01:30.240 --> 01:01:31.240
好

01:01:31.240 --> 01:01:32.240
什么时候获取完

01:01:32.240 --> 01:01:33.240
是不是在这里边就获取完了

01:01:33.240 --> 01:01:36.240
再把res是loading设为forced

01:01:36.240 --> 01:01:38.240
注意数据全是享用式的

01:01:38.240 --> 01:01:39.240
数据一遍界面跟那边

01:01:39.240 --> 01:01:40.240
一定要记住这个

01:01:40.240 --> 01:01:42.240
这是为了最核心的理念

01:01:42.240 --> 01:01:43.240
享用式数据

01:01:43.240 --> 01:01:45.240
数据一遍它就会变

01:01:45.240 --> 01:01:47.240
界面上怎么来依赖这个数据呢

01:01:47.240 --> 01:01:48.240
很简单

01:01:48.240 --> 01:01:50.240
这个组件不是需要一个属性修吗

01:01:50.240 --> 01:01:52.240
什么时候显示

01:01:52.240 --> 01:01:55.240
当一声loading为粗的时候是不是显示

01:01:55.240 --> 01:01:58.240
当这个数据是不是为去的时候还显示

01:01:58.240 --> 01:02:00.240
当它为去的时候

01:02:00.240 --> 01:02:01.240
组件显示

01:02:01.240 --> 01:02:04.240
当它为forced的时候不显示

01:02:04.240 --> 01:02:05.240
就写完了

01:02:05.240 --> 01:02:07.240
这种思维一定要转变过来

01:02:07.240 --> 01:02:12.300
看一下

01:02:12.300 --> 01:02:13.300
就完了

01:02:13.300 --> 01:02:17.810
没问题吧

01:02:17.810 --> 01:02:19.810
有时候和网络要卡一下

01:02:19.810 --> 01:02:20.810
没问题吧

01:02:20.810 --> 01:02:22.810
对不对

01:02:26.810 --> 01:02:28.810
要从效率上来说的话

01:02:28.810 --> 01:02:31.810
为维修去的时候好一些

01:02:31.810 --> 01:02:33.810
不过我们之前用的

01:02:33.810 --> 01:02:34.810
多的不是维修

01:02:34.810 --> 01:02:35.810
维修要好一些

01:02:35.810 --> 01:02:37.810
实际上这里维修要好一些

01:02:37.810 --> 01:02:40.810
维修和维修这两个东西

01:02:40.810 --> 01:02:41.810
我们之前讲过

01:02:41.810 --> 01:02:45.810
维修它会保留动物元素

01:02:45.810 --> 01:02:46.810
它会保留动物元素

01:02:46.810 --> 01:02:49.810
来减少无用底层对动物元素的操作

01:02:49.810 --> 01:02:52.810
它的效率会高一些

01:02:52.810 --> 01:02:53.810
但也不是一定的

01:02:53.810 --> 01:02:55.810
也有特殊情况

01:02:55.810 --> 01:02:57.810
这个东西就不展开了

01:02:57.810 --> 01:02:58.810
在这里不展开了

01:02:58.810 --> 01:03:01.810
因为我们要去申入它

01:03:01.810 --> 01:03:03.810
执行效率

01:03:03.810 --> 01:03:04.810
它的渲染流程

01:03:04.810 --> 01:03:06.810
要去申入到这些东西

01:03:06.810 --> 01:03:07.810
它扯的就远了

01:03:07.810 --> 01:03:10.810
但是我们这里确实用维修要好一点

01:03:10.810 --> 01:03:12.810
那么用维修吧

01:03:12.810 --> 01:03:13.810
也挺好的

01:03:13.810 --> 01:03:15.810
维修也挺好的

01:03:15.810 --> 01:03:16.810
挺好的

01:03:16.810 --> 01:03:18.810
一样的

01:03:18.810 --> 01:03:19.810
好

01:03:19.810 --> 01:03:21.810
那么这是关于这个

01:03:21.810 --> 01:03:24.810
至此主见这一块讲完

01:03:24.810 --> 01:03:27.810
主见这一块讲完了

01:03:27.810 --> 01:03:29.810
好

01:03:29.810 --> 01:03:32.810
然后我们今天还要急着来做

01:03:32.810 --> 01:03:33.810
还要急着来做

01:03:33.810 --> 01:03:34.810
等下传出去

01:03:34.810 --> 01:03:36.810
我要喝口水

01:03:36.810 --> 01:03:39.810
半动不动的正常的

01:03:39.810 --> 01:03:40.810
你学一个新知识的话

01:03:40.810 --> 01:03:42.810
一开始一定是很模糊的

01:03:42.810 --> 01:03:45.810
一开始一定很模糊的

01:03:45.810 --> 01:03:48.810
但是你学习了新知识之后

01:03:48.810 --> 01:03:49.810
你一定要去消化

01:03:49.810 --> 01:03:51.810
就是你要去反覆覆

01:03:51.810 --> 01:03:52.810
观看这个课程

01:03:52.810 --> 01:03:53.810
要去消化

01:03:53.810 --> 01:03:54.810
你不消化的话

01:03:54.810 --> 01:03:55.810
肯定是不行

01:03:55.810 --> 01:03:57.810
包括你学之前的

01:03:57.810 --> 01:03:58.810
乘客来介石课程

01:03:58.810 --> 01:03:59.810
是不是也在消化

01:03:59.810 --> 01:04:00.810
还得看很多遍

01:04:00.810 --> 01:04:05.490
对不对

01:04:05.490 --> 01:04:07.490
VOX今天讲不了了

01:04:07.490 --> 01:04:08.490
不过

01:04:08.490 --> 01:04:09.490
摸一颗

01:04:09.490 --> 01:04:10.490
懂了

01:04:10.490 --> 01:04:11.490
今天讲不了了

01:04:11.490 --> 01:04:14.490
明天咱们讲VOX

01:04:14.490 --> 01:04:15.490
因为这些东西

01:04:15.490 --> 01:04:17.490
它会颠覆你的开发方式

01:04:17.490 --> 01:04:19.490
有点运呼呼的正常的

01:04:19.490 --> 01:04:20.490
好

01:04:20.490 --> 01:04:21.490
今天我们看什么呢

01:04:21.490 --> 01:04:22.490
看这个

01:04:22.490 --> 01:04:25.490
第四天

01:04:25.490 --> 01:04:26.490
看这个

01:04:26.490 --> 01:04:30.020
一样的

01:04:30.020 --> 01:04:31.020
一样的

01:04:31.020 --> 01:04:32.020
没它区别

01:04:32.020 --> 01:04:33.020
你看一下

01:04:33.020 --> 01:04:35.020
我这个

01:04:35.020 --> 01:04:36.020
这个一面是不是做过了

01:04:36.020 --> 01:04:37.020
刚刚还做完

01:04:37.020 --> 01:04:38.020
才做完

01:04:38.020 --> 01:04:39.020
无非什么

01:04:39.020 --> 01:04:41.020
无非我给它加一个导航条

01:04:41.020 --> 01:04:43.020
给它加一个导航条

01:04:43.020 --> 01:04:45.020
它可以切换切换一面了

01:04:45.020 --> 01:04:46.020
你看切到首页一页

01:04:46.020 --> 01:04:48.020
而且切换一面的过程中

01:04:48.020 --> 01:04:49.020
你看一下

01:04:49.020 --> 01:04:51.020
浏览器有没有刷新

01:04:51.020 --> 01:04:52.020
是没有刷新

01:04:52.020 --> 01:04:53.020
对吧

01:04:53.020 --> 01:04:54.020
浏览器没有刷新

01:04:54.020 --> 01:04:55.020
地址变不变

01:04:55.020 --> 01:04:56.020
看地址变不变

01:04:56.020 --> 01:04:58.020
地址不是在变化

01:04:58.020 --> 01:04:59.020
但是浏览器没有刷新

01:04:59.020 --> 01:05:00.020
看没

01:05:00.020 --> 01:05:01.020
浏览器没有刷新

01:05:01.020 --> 01:05:02.020
好

01:05:02.020 --> 01:05:03.020
那咱们来试验这个效果

01:05:03.020 --> 01:05:04.020
这个效果呢

01:05:04.020 --> 01:05:05.020
我们要手动实现的话

01:05:05.020 --> 01:05:06.020
比较麻烦

01:05:06.020 --> 01:05:07.020
手动实现的原理很简单

01:05:07.020 --> 01:05:09.020
你给它注册时间吗

01:05:09.020 --> 01:05:10.020
这里给它注册时间

01:05:10.020 --> 01:05:11.020
点击它

01:05:11.020 --> 01:05:12.020
那么下面切换组件

01:05:12.020 --> 01:05:13.020
对不对

01:05:13.020 --> 01:05:14.020
是不是下面切换组件就完事了

01:05:14.020 --> 01:05:15.020
点击它切换组件

01:05:15.020 --> 01:05:16.020
点它切换组件

01:05:16.020 --> 01:05:17.020
对吧

01:05:17.020 --> 01:05:18.020
用被VALS

01:05:18.020 --> 01:05:19.020
对吧

01:05:19.020 --> 01:05:20.020
来切换组件就完事了

01:05:20.020 --> 01:05:21.020
这个东西倒是很简单

01:05:21.020 --> 01:05:23.020
改变地址就更简单了

01:05:23.020 --> 01:05:25.020
Z location

01:05:25.020 --> 01:05:27.020
给它复制就完事了

01:05:27.020 --> 01:05:28.020
关键是呢

01:05:28.020 --> 01:05:31.020
自己手动实现的有点麻烦

01:05:31.020 --> 01:05:32.020
我们这节课呢

01:05:32.020 --> 01:05:33.020
还要学习个东西

01:05:33.020 --> 01:05:34.020
就是5u rotor

01:05:34.020 --> 01:05:35.020
叫做路由

01:05:35.020 --> 01:05:37.020
它能够帮你

01:05:39.020 --> 01:05:41.020
它能够帮你切换组件

01:05:41.020 --> 01:05:42.020
我们这就学习5u rotor

01:05:42.020 --> 01:05:45.020
这两个都是企业经营用开发里边的东西

01:05:45.020 --> 01:05:47.020
5u核心里边还不包含的

01:05:47.020 --> 01:05:48.020
不包含的

01:05:48.020 --> 01:05:49.020
企业经营用开发里边

01:05:49.020 --> 01:05:50.020
还会包含这个东西

01:05:50.020 --> 01:05:51.020
那么这个东西呢

01:05:51.020 --> 01:05:54.020
我们这分明天讲5u x

01:05:54.020 --> 01:05:57.020
今天我们讲5u rotor

01:05:57.020 --> 01:05:59.020
好 第一个5u rotor

01:05:59.020 --> 01:06:02.020
它叫做5u路由

01:06:02.020 --> 01:06:04.020
路由

01:06:04.020 --> 01:06:06.020
路由的话简单来说的话

01:06:06.020 --> 01:06:09.020
我们可以这样子理解

01:06:09.020 --> 01:06:13.020
可以简单理解为

01:06:13.020 --> 01:06:19.020
当访问某个地址时

01:06:19.020 --> 01:06:22.020
显示

01:06:22.020 --> 01:06:24.020
就渲染某个组件

01:06:24.020 --> 01:06:26.020
这就是路由

01:06:26.020 --> 01:06:27.020
你可以这样认为

01:06:27.020 --> 01:06:28.020
路由就是这么个意思

01:06:28.020 --> 01:06:29.020
在5u里边

01:06:29.020 --> 01:06:32.020
在不同的上下文环境里边

01:06:32.020 --> 01:06:34.020
路由的概念是不一样的

01:06:34.020 --> 01:06:36.020
路由概念是不一样的

01:06:36.020 --> 01:06:37.020
就比方说

01:06:37.020 --> 01:06:38.020
我靠这两个字

01:06:38.020 --> 01:06:39.020
对吧

01:06:39.020 --> 01:06:40.020
不同的语气它的概念不一样

01:06:40.020 --> 01:06:41.020
不靠

01:06:41.020 --> 01:06:42.020
表示疑问

01:06:42.020 --> 01:06:44.020
表示在刺激

01:06:44.020 --> 01:06:45.020
不靠

01:06:45.020 --> 01:06:46.020
就表示疑问

01:06:46.020 --> 01:06:47.020
对吧

01:06:47.020 --> 01:06:48.020
不靠

01:06:48.020 --> 01:06:49.020
下一条

01:06:49.020 --> 01:06:50.020
对不对

01:06:50.020 --> 01:06:52.020
同样的两个字

01:06:52.020 --> 01:06:54.020
好 那么这个5u路由

01:06:54.020 --> 01:06:56.020
可以简单理解为

01:06:56.020 --> 01:06:57.020
当访问某个地址的时候

01:06:57.020 --> 01:06:58.020
渲染某个组件

01:06:58.020 --> 01:07:00.020
好 那么怎么来使用这个路由呢

01:07:00.020 --> 01:07:02.020
首先你要下载这个界式

01:07:02.020 --> 01:07:03.020
下载下来

01:07:03.020 --> 01:07:04.020
那么这里呢

01:07:04.020 --> 01:07:05.020
我已经下载下来了

01:07:05.020 --> 01:07:07.020
在第四篇效果里边

01:07:07.020 --> 01:07:08.020
放到额色层里边

01:07:08.020 --> 01:07:09.020
5u路由轮胎

01:07:09.020 --> 01:07:11.020
我复制一下

01:07:11.020 --> 01:07:13.020
放到这里

01:07:13.020 --> 01:07:14.020
放到这里

01:07:14.020 --> 01:07:15.020
拿过来了

01:07:15.020 --> 01:07:16.020
接下来了

01:07:16.020 --> 01:07:18.020
我们由于有两个组件

01:07:18.020 --> 01:07:20.020
在这里是不是切换组件

01:07:20.020 --> 01:07:22.020
其实在5u做开发业面

01:07:22.020 --> 01:07:23.020
开发就是应用的时候

01:07:23.020 --> 01:07:25.020
它是只有一个页面

01:07:25.020 --> 01:07:26.020
通常情况下

01:07:26.020 --> 01:07:27.020
都是只有一个页面

01:07:27.020 --> 01:07:28.020
因此我们看上去

01:07:28.020 --> 01:07:29.020
好像是在切换页面

01:07:29.020 --> 01:07:31.020
实际上是在切换组件

01:07:31.020 --> 01:07:33.020
切换下面的组件

01:07:33.020 --> 01:07:34.020
因此我们习惯上的

01:07:34.020 --> 01:07:35.020
还是感觉上

01:07:35.020 --> 01:07:36.020
还是认为它是页面

01:07:36.020 --> 01:07:38.020
因此我们在工程结构上

01:07:38.020 --> 01:07:40.020
会这样子来写工程结构

01:07:40.020 --> 01:07:41.020
我们建一个文件夹

01:07:41.020 --> 01:07:43.020
叫components

01:07:43.020 --> 01:07:44.020
这里边放啥呢

01:07:44.020 --> 01:07:46.020
放普通组件

01:07:46.020 --> 01:07:49.020
再建个文件夹

01:07:49.020 --> 01:07:51.020
再建个文件夹

01:07:51.020 --> 01:07:52.020
pages

01:07:52.020 --> 01:07:53.020
这里放啥

01:07:53.020 --> 01:07:54.020
这里放页面组件

01:07:54.020 --> 01:07:55.020
就是这组件很大

01:07:55.020 --> 01:07:57.020
感觉上像是一个页面

01:07:57.020 --> 01:07:58.020
其实还是一个组件

01:07:58.020 --> 01:07:59.020
没有啥区别

01:07:59.020 --> 01:08:00.020
只是我们感觉上

01:08:00.020 --> 01:08:01.020
它组件比较大

01:08:01.020 --> 01:08:02.020
像是一个页面

01:08:02.020 --> 01:08:03.020
那么我们把这个结构

01:08:03.020 --> 01:08:04.020
再划分一下

01:08:04.020 --> 01:08:06.020
我们把刚才写的所有组件

01:08:06.020 --> 01:08:08.020
全部扔进去

01:08:08.020 --> 01:08:10.020
全部扔到这里边去

01:08:10.020 --> 01:08:12.020
扔到components里边去

01:08:12.020 --> 01:08:13.020
那么自然它的路径

01:08:13.020 --> 01:08:14.020
这里要改一下

01:08:14.020 --> 01:08:16.020
Apple里边

01:08:16.020 --> 01:08:18.020
路径要稍微改一下

01:08:18.020 --> 01:08:20.020
这里它已经自动给你改过了

01:08:20.020 --> 01:08:22.020
components 这里

01:08:22.020 --> 01:08:24.020
去掉

01:08:24.020 --> 01:08:25.020
特色不要了

01:08:25.020 --> 01:08:27.020
特色不要了

01:08:27.020 --> 01:08:28.020
特色不在这

01:08:28.020 --> 01:08:29.020
再放着

01:08:29.020 --> 01:08:30.020
放着吧

01:08:30.020 --> 01:08:32.020
那么也跟目录下面

01:08:32.020 --> 01:08:33.020
跟目录下面

01:08:33.020 --> 01:08:36.020
只留index app

01:08:36.020 --> 01:08:37.020
index 负责起动

01:08:37.020 --> 01:08:40.020
Apple 跟组件

01:08:40.020 --> 01:08:42.020
然后我们的其他组件

01:08:42.020 --> 01:08:44.020
放到这里边

01:08:44.020 --> 01:08:46.020
其他组件全部放到这里边

01:08:46.020 --> 01:08:47.020
原来的意思

01:08:47.020 --> 01:08:48.020
咱们再看一下

01:08:48.020 --> 01:08:49.020
这个效果肯定是一样的

01:08:49.020 --> 01:08:51.020
没有啥区别

01:08:51.020 --> 01:08:53.020
这个肯定是一样的

01:08:53.020 --> 01:08:54.020
这里跑错了

01:08:54.020 --> 01:08:56.020
哪个应该是路径

01:08:56.020 --> 01:08:58.020
引用路径的时候出了问题

01:08:58.020 --> 01:08:59.020
它说啥呢

01:08:59.020 --> 01:09:00.020
它说找不到资源

01:09:00.020 --> 01:09:01.020
哪个地方找不到资源

01:09:02.020 --> 01:09:04.020
model.js

01:09:04.020 --> 01:09:06.020
model.js 找不到

01:09:06.020 --> 01:09:07.020
model.js

01:09:07.020 --> 01:09:09.020
我们看一下都哪里用的

01:09:09.020 --> 01:09:10.020
model 这里

01:09:10.020 --> 01:09:13.520
加上components

01:09:13.520 --> 01:09:15.520
加上components

01:09:15.520 --> 01:09:16.520
所以一样了

01:09:16.520 --> 01:09:19.520
把路径改了一下

01:09:19.520 --> 01:09:20.520
改了一下目录

01:09:20.520 --> 01:09:21.520
其他都一样了

01:09:21.520 --> 01:09:22.520
改了一下目录

01:09:22.520 --> 01:09:24.520
然后我们配件里边放啥呢

01:09:24.520 --> 01:09:26.520
放的是页面及组件

01:09:26.520 --> 01:09:27.520
就是组件很大

01:09:27.520 --> 01:09:29.520
看上去都像一个页面了

01:09:29.520 --> 01:09:30.520
那么这里边放啥呢

01:09:30.520 --> 01:09:31.520
一个电影页出来

01:09:31.520 --> 01:09:33.520
我们该写上一个movie

01:09:33.520 --> 01:09:36.520
配级.js

01:09:36.520 --> 01:09:38.520
这个地方的.js

01:09:38.520 --> 01:09:39.520
是不是就是这个电影页面

01:09:39.520 --> 01:09:40.520
就是这个玩意

01:09:40.520 --> 01:09:41.520
对不对

01:09:41.520 --> 01:09:42.520
就是这个玩意

01:09:42.520 --> 01:09:44.520
全选粘贴过来

01:09:44.520 --> 01:09:45.520
然后路径稍微改一下

01:09:45.520 --> 01:09:47.520
这是第2条鞋杠

01:09:47.520 --> 01:09:48.520
返回上一级目录

01:09:48.520 --> 01:09:49.520
找components

01:09:49.520 --> 01:09:50.520
返回上一级目录

01:09:50.520 --> 01:09:51.520
返回上一级目录

01:09:51.520 --> 01:09:52.520
返回上一级目录

01:09:52.520 --> 01:09:53.520
目录稍微改一下

01:09:53.520 --> 01:09:54.520
其他都一样

01:09:54.520 --> 01:09:56.520
做了一个页面组件出来

01:09:56.520 --> 01:09:57.520
那么app组件里边

01:09:57.520 --> 01:09:58.520
还写这个东西

01:09:58.520 --> 01:09:59.520
app组件里边

01:09:59.520 --> 01:10:00.520
就啥都不写了

01:10:00.520 --> 01:10:01.520
app组件里边

01:10:01.520 --> 01:10:02.520
就啥都不写了

01:10:02.520 --> 01:10:03.520
对吧

01:10:03.520 --> 01:10:08.220
这里边就啥都不写了

01:10:08.220 --> 01:10:12.320
这里边

01:10:12.320 --> 01:10:13.320
这里

01:10:13.320 --> 01:10:14.320
就啥都不写了

01:10:14.320 --> 01:10:15.320
啥都不写了

01:10:15.320 --> 01:10:16.320
就配置一个template就完了

01:10:16.320 --> 01:10:17.320
对吧

01:10:17.320 --> 01:10:18.320
app组件里边的非常非常简单了

01:10:18.320 --> 01:10:19.320
它是个更易用

01:10:19.320 --> 01:10:21.320
它主要来调度其他页面的

01:10:21.320 --> 01:10:22.320
比方说哪个页面呢

01:10:22.320 --> 01:10:24.320
我要调度这个页面

01:10:24.320 --> 01:10:26.320
我要调这个movie配级

01:10:26.320 --> 01:10:27.320
movie配级

01:10:27.320 --> 01:10:31.320
那么在这里写movie配级

01:10:31.320 --> 01:10:33.700
从哪里导入

01:10:33.700 --> 01:10:34.700
就是把它一层一层封装

01:10:35.700 --> 01:10:37.700
小组件组装成大组件

01:10:37.700 --> 01:10:39.700
配级是movie配级

01:10:39.700 --> 01:10:42.700
让整个项目的结构非常清晰

01:10:43.700 --> 01:10:44.700
这里

01:10:44.700 --> 01:10:45.700
components

01:10:46.700 --> 01:10:47.700
movie配级

01:10:47.700 --> 01:10:48.700
对吧

01:10:48.700 --> 01:10:49.700
是不是这样子

01:10:50.700 --> 01:10:51.700
好

01:10:51.700 --> 01:10:53.700
我们在这里要显示movie配级

01:10:53.700 --> 01:10:54.700
就这样子写

01:10:54.700 --> 01:10:55.700
就完事了

01:10:55.700 --> 01:10:56.700
对不对

01:10:56.700 --> 01:10:57.700
要显示这个页面

01:10:57.700 --> 01:10:58.700
对不对

01:10:58.700 --> 01:11:01.070
那我看一下

01:11:01.070 --> 01:11:02.070
哪里地方又是资源

01:11:02.070 --> 01:11:03.070
肯定还是资源

01:11:03.070 --> 01:11:05.070
配级是movie配级

01:11:05.070 --> 01:11:07.070
结构是

01:11:08.070 --> 01:11:09.070
这里边

01:11:09.070 --> 01:11:10.070
它说

01:11:11.070 --> 01:11:12.070
没保存

01:11:12.070 --> 01:11:13.070
没保存

01:11:13.070 --> 01:11:14.070
OK 是不是正常的

01:11:14.070 --> 01:11:15.070
一样的

01:11:15.070 --> 01:11:16.070
就把结构改了一下

01:11:16.070 --> 01:11:17.070
这个没问题吧

01:11:20.070 --> 01:11:22.070
这个结构就变得越来越清晰了

01:11:22.070 --> 01:11:23.070
越来越清晰了

01:11:23.070 --> 01:11:25.070
以前没有用这种方式写过结构

01:11:25.070 --> 01:11:27.070
很多人都没有用这种方式写

01:11:27.070 --> 01:11:29.070
这种方式写过结构更加清晰

01:11:29.070 --> 01:11:30.070
你用这种方式写熟练了

01:11:30.070 --> 01:11:32.070
原式的方式写一两个结构文件

01:11:32.070 --> 01:11:33.070
你是受不了的

01:11:33.070 --> 01:11:34.070
真的受不了

01:11:35.070 --> 01:11:37.070
所以你一定要去多细写

01:11:37.070 --> 01:11:38.070
多训练

01:11:38.070 --> 01:11:39.070
好 那么现在呢

01:11:39.070 --> 01:11:41.070
我们现在还没有用我们的路由对不对

01:11:41.070 --> 01:11:42.070
路由呢

01:11:42.070 --> 01:11:43.070
现在我们要切换

01:11:43.070 --> 01:11:44.070
比方说配级室里边

01:11:44.070 --> 01:11:45.070
还有一个页面

01:11:45.070 --> 01:11:46.070
还有index这个页面

01:11:46.070 --> 01:11:47.070
还有这个页面

01:11:47.070 --> 01:11:48.070
比方说

01:11:48.070 --> 01:11:49.070
template

01:11:49.070 --> 01:11:53.470
这首页

01:11:53.470 --> 01:11:54.470
这首页

01:11:54.470 --> 01:11:56.470
没有发生什么变化

01:11:56.470 --> 01:11:57.470
不是说写到一个配级室里边

01:11:57.470 --> 01:11:58.470
它就好像有什么不一样的

01:11:58.470 --> 01:11:59.470
是一样的

01:11:59.470 --> 01:12:01.470
是把目录结构改一下

01:12:01.470 --> 01:12:02.470
这首页

01:12:02.470 --> 01:12:03.470
它还是个组件

01:12:03.470 --> 01:12:04.470
你看有啥区别呢

01:12:04.470 --> 01:12:05.470
还是个组件

01:12:05.470 --> 01:12:06.470
那么template

01:12:06.470 --> 01:12:07.470
导出

01:12:07.470 --> 01:12:08.470
这是个首页

01:12:08.470 --> 01:12:10.470
好 那么现在我们有两个页面

01:12:10.470 --> 01:12:11.470
对不对

01:12:11.470 --> 01:12:13.470
我们希望它根据不同的地址

01:12:13.470 --> 01:12:14.470
宣传不同的页面

01:12:14.470 --> 01:12:16.470
这个东西咋处理呢

01:12:16.470 --> 01:12:17.470
我们自己处理起来呢

01:12:17.470 --> 01:12:18.470
比较麻烦

01:12:18.470 --> 01:12:19.470
我们来看一下

01:12:19.470 --> 01:12:20.470
它是怎么处理的

01:12:20.470 --> 01:12:21.470
它提供了这么一个GS

01:12:21.470 --> 01:12:23.470
叫做5u rotor

01:12:23.470 --> 01:12:24.470
下来大家可以

01:12:24.470 --> 01:12:25.470
我会把代码发下来

01:12:25.470 --> 01:12:27.470
大家可以用这个5u rotor

01:12:27.470 --> 01:12:28.470
用这个GS

01:12:28.470 --> 01:12:29.470
这个GS呢

01:12:29.470 --> 01:12:30.470
我们怎么导入呢

01:12:30.470 --> 01:12:31.470
很简单

01:12:31.470 --> 01:12:32.470
在页面上导入

01:12:32.470 --> 01:12:33.470
先导入5u

01:12:35.470 --> 01:12:36.470
再导入5u rotor

01:12:36.470 --> 01:12:37.470
因为它这个

01:12:37.470 --> 01:12:38.470
这种鞋发的GS呢

01:12:38.470 --> 01:12:39.470
它不是魔幻化的

01:12:39.470 --> 01:12:41.470
这种方式来导入

01:12:41.470 --> 01:12:42.470
5u rotor

01:12:42.470 --> 01:12:43.470
导入进来

01:12:43.470 --> 01:12:44.470
这两个导入进来

01:12:44.470 --> 01:12:45.470
先导入5u

01:12:45.470 --> 01:12:47.470
再导入5u rotor

01:12:47.470 --> 01:12:48.470
好 那么怎么用呢

01:12:48.470 --> 01:12:49.470
这个东西怎么用

01:12:49.470 --> 01:12:50.470
很简单

01:12:50.470 --> 01:12:51.470
几句话就说完了

01:12:51.470 --> 01:12:52.470
你看着

01:12:52.470 --> 01:12:53.470
特别特别简单

01:12:53.470 --> 01:12:54.470
配置

01:12:54.470 --> 01:12:55.470
就是配置

01:12:55.470 --> 01:12:56.470
在哪里配置

01:12:56.470 --> 01:12:57.470
在一开始配置

01:12:57.470 --> 01:12:58.470
哪里一开始配置

01:12:58.470 --> 01:13:00.470
在哪里一开始配置

01:13:00.470 --> 01:13:02.980
在这里

01:13:02.980 --> 01:13:04.980
启动的时候

01:13:04.980 --> 01:13:05.980
路由配置

01:13:06.980 --> 01:13:07.980
路由配置

01:13:07.980 --> 01:13:08.980
怎么配置呢

01:13:08.980 --> 01:13:09.980
6一个

01:13:09.980 --> 01:13:10.980
我们之前是6uu

01:13:10.980 --> 01:13:11.980
对吧

01:13:11.980 --> 01:13:12.980
创建个5u实力

01:13:12.980 --> 01:13:14.980
现在6u rotor

01:13:15.980 --> 01:13:18.980
创建一个5u的路由

01:13:19.980 --> 01:13:21.980
创建一个5u路由

01:13:21.980 --> 01:13:22.980
很简单

01:13:22.980 --> 01:13:23.980
这简单

01:13:23.980 --> 01:13:25.980
我觉得你看一下一个单

01:13:25.980 --> 01:13:26.980
你都明白了

01:13:26.980 --> 01:13:28.980
使用路由怎么用呢

01:13:28.980 --> 01:13:29.980
创

01:13:29.980 --> 01:13:31.980
根据一个配置对象

01:13:31.980 --> 01:13:33.980
创建路由

01:13:33.980 --> 01:13:34.980
这是第一步

01:13:35.980 --> 01:13:36.980
根据一个配置对象

01:13:36.980 --> 01:13:37.980
创建路由

01:13:41.060 --> 01:13:42.060
就在这件事

01:13:42.060 --> 01:13:43.060
就在这里做的是

01:13:43.060 --> 01:13:44.060
这个是个配置对象

01:13:44.060 --> 01:13:45.060
创建路由

01:13:45.060 --> 01:13:46.060
得到什么呢

01:13:46.060 --> 01:13:47.060
得到一个对象

01:13:47.060 --> 01:13:48.060
路由对象

01:13:49.060 --> 01:13:52.060
得到路由对象

01:13:52.060 --> 01:13:53.060
第二步

01:13:53.060 --> 01:13:54.060
然后

01:13:54.060 --> 01:13:58.060
将在创建5u实力时

01:14:00.060 --> 01:14:02.060
将路由对象

01:14:02.060 --> 01:14:03.060
配置到

01:14:03.060 --> 01:14:05.060
实力配置的

01:14:05.060 --> 01:14:06.060
rotor

01:14:06.060 --> 01:14:07.060
完了

01:14:07.060 --> 01:14:08.060
没了

01:14:08.060 --> 01:14:09.060
就这两步

01:14:09.060 --> 01:14:11.060
使用路由一共分两步

01:14:11.060 --> 01:14:12.060
第一步

01:14:12.060 --> 01:14:13.060
创建一个5u rotor对象

01:14:13.060 --> 01:14:14.060
给他一个配置

01:14:14.060 --> 01:14:15.060
这个配置我一会儿再讲

01:14:15.060 --> 01:14:17.060
然后得到一个对象

01:14:17.060 --> 01:14:18.060
这个对象里面配置到哪呢

01:14:18.060 --> 01:14:20.060
创建5u实力的时候

01:14:20.060 --> 01:14:21.060
取到这

01:14:21.060 --> 01:14:22.060
在这里进行配置

01:14:22.060 --> 01:14:23.060
rotor

01:14:23.060 --> 01:14:24.060
配置进来

01:14:24.060 --> 01:14:25.060
配置为他就行了

01:14:25.060 --> 01:14:27.060
由于边量名

01:14:27.060 --> 01:14:28.060
边量名

01:14:28.060 --> 01:14:29.060
跟那个属性名一样

01:14:29.060 --> 01:14:30.060
可以省略

01:14:30.060 --> 01:14:31.060
可以减弃

01:14:31.060 --> 01:14:33.060
但是如果说你这里写个2

01:14:33.060 --> 01:14:34.060
你不能在这里写2

01:14:34.060 --> 01:14:36.060
你要保证他的配置

01:14:36.060 --> 01:14:37.060
名称是rotor

01:14:37.060 --> 01:14:39.060
保证他配置的属性名是rotor

01:14:39.060 --> 01:14:40.060
这个东西

01:14:40.060 --> 01:14:41.060
懂得是吧

01:14:41.060 --> 01:14:42.060
这个东西懂得

01:14:42.060 --> 01:14:44.060
这不是5u的知识

01:14:44.060 --> 01:14:45.060
这是基本知识

01:14:46.060 --> 01:14:47.060
就完了

01:14:47.060 --> 01:14:48.060
这两步

01:14:48.060 --> 01:14:49.060
写完了

01:14:49.060 --> 01:14:50.060
好

01:14:50.060 --> 01:14:51.060
那么这里边写啥呢

01:14:51.060 --> 01:14:53.060
这里边可以有很多地方可以配置

01:14:53.060 --> 01:14:55.060
但是最关键的就是两个配置

01:14:55.060 --> 01:14:57.060
现在重点说

01:14:58.060 --> 01:15:00.060
路由的配置

01:15:00.060 --> 01:15:02.060
路由配置对象

01:15:02.060 --> 01:15:03.060
里边有哪些配置呢

01:15:03.060 --> 01:15:05.060
第一个配置就是

01:15:05.060 --> 01:15:06.060
rot

01:15:07.060 --> 01:15:09.060
路由规则配置

01:15:09.060 --> 01:15:10.060
这重点

01:15:10.060 --> 01:15:11.060
这最重要的

01:15:11.060 --> 01:15:14.060
这是会影响到

01:15:14.060 --> 01:15:16.060
怎么来切换组件的

01:15:16.060 --> 01:15:17.060
第二个配置是

01:15:17.060 --> 01:15:19.060
模式mode

01:15:19.060 --> 01:15:21.060
模式配置

01:15:21.060 --> 01:15:22.060
一共

01:15:22.060 --> 01:15:23.060
其他配置我们都不太用得到

01:15:23.060 --> 01:15:25.060
就这两个配置够了

01:15:25.060 --> 01:15:26.060
好

01:15:26.060 --> 01:15:28.060
那么比方说

01:15:28.060 --> 01:15:30.060
我们这里的

01:15:30.060 --> 01:15:31.060
我们这里配置什么呢

01:15:31.060 --> 01:15:32.060
配置rot

01:15:32.060 --> 01:15:33.060
配置为啥呢

01:15:33.060 --> 01:15:35.060
配置为一个数组

01:15:36.060 --> 01:15:38.060
数组每一项就是一个规则

01:15:38.060 --> 01:15:40.060
这个规则咋写的

01:15:40.060 --> 01:15:41.060
我边写边解释

01:15:41.060 --> 01:15:43.060
特别特别简单

01:15:43.060 --> 01:15:45.060
每个规则是一个对象

01:15:45.060 --> 01:15:47.060
对象里边有这么一些属性

01:15:47.060 --> 01:15:48.060
pass

01:15:48.060 --> 01:15:50.060
当你访问这样的地址的时候

01:15:51.060 --> 01:15:52.060
component

01:15:52.060 --> 01:15:54.060
我去渲染什么组件呢

01:15:56.060 --> 01:15:57.060
import

01:15:58.060 --> 01:15:59.060
home

01:15:59.060 --> 01:16:00.060
from

01:16:00.060 --> 01:16:01.060
叫鞋杠

01:16:01.060 --> 01:16:02.060
配置

01:16:02.060 --> 01:16:03.060
index

01:16:03.060 --> 01:16:04.060
叫解释

01:16:04.060 --> 01:16:06.060
我去渲染这个组件

01:16:06.060 --> 01:16:07.060
手艺嘛

01:16:07.060 --> 01:16:08.060
渲染这个组件

01:16:08.060 --> 01:16:10.060
渲染这个组件

01:16:10.060 --> 01:16:11.060
是不是这件啊

01:16:11.060 --> 01:16:13.060
简不简单

01:16:13.060 --> 01:16:14.060
告诉他

01:16:14.060 --> 01:16:16.060
当你访问这个地址的时候

01:16:16.060 --> 01:16:17.060
渲染这个组件

01:16:17.060 --> 01:16:18.060
然后呢

01:16:18.060 --> 01:16:19.060
第二个规则

01:16:19.060 --> 01:16:20.060
pass

01:16:22.060 --> 01:16:24.060
当你访问这样的路径的时候

01:16:24.060 --> 01:16:25.060
component

01:16:25.060 --> 01:16:29.650
渲染什么组件呢

01:16:29.650 --> 01:16:30.650
move

01:16:30.650 --> 01:16:35.620
渲染这个组件

01:16:35.620 --> 01:16:36.620
move配置

01:16:36.620 --> 01:16:37.620
move配置

01:16:37.620 --> 01:16:39.620
我们这里直接边将名随便写

01:16:39.620 --> 01:16:41.620
我们就用move

01:16:41.620 --> 01:16:43.620
没问题吧

01:16:43.620 --> 01:16:44.620
当你访问这个地址

01:16:44.620 --> 01:16:45.620
渲染这个组件

01:16:45.620 --> 01:16:46.620
当你访问这个地址

01:16:46.620 --> 01:16:47.620
就这么简单

01:16:47.620 --> 01:16:48.620
没了

01:16:49.620 --> 01:16:50.620
好

01:16:50.620 --> 01:16:51.620
最后一步

01:16:51.620 --> 01:16:53.620
还有最后一件事

01:16:53.620 --> 01:16:55.620
最后一件事是文字定义的

01:16:55.620 --> 01:16:56.620
就是

01:16:56.620 --> 01:16:58.620
在

01:16:58.620 --> 01:17:00.620
在合适的位置

01:17:01.620 --> 01:17:02.620
写上

01:17:03.620 --> 01:17:05.620
rotor

01:17:05.620 --> 01:17:06.620
vue

01:17:06.620 --> 01:17:07.620
组件

01:17:08.620 --> 01:17:10.620
表示

01:17:10.620 --> 01:17:12.620
路由匹配道的

01:17:13.620 --> 01:17:14.620
匹配道的组件

01:17:14.620 --> 01:17:16.620
渲染的位置

01:17:16.620 --> 01:17:17.620
就这么简单

01:17:17.620 --> 01:17:18.620
好

01:17:18.620 --> 01:17:19.620
什么意思

01:17:19.620 --> 01:17:20.620
当我们访问这样的路径的时候

01:17:20.620 --> 01:17:21.620
是不是要渲染home

01:17:21.620 --> 01:17:22.620
这个组件

01:17:22.620 --> 01:17:23.620
但是你甩它没

01:17:23.620 --> 01:17:24.620
没甩它

01:17:24.620 --> 01:17:26.620
因为我们估计渲染的是这个组件

01:17:26.620 --> 01:17:27.620
渲染的是不是app

01:17:27.620 --> 01:17:28.620
组件

01:17:28.620 --> 01:17:29.620
那么这个home

01:17:29.620 --> 01:17:30.620
组件放哪呢

01:17:30.620 --> 01:17:32.620
比方说我们现在访问的就是这个地址

01:17:32.620 --> 01:17:33.620
假如就访问这个地址

01:17:33.620 --> 01:17:34.620
那么home

01:17:34.620 --> 01:17:35.620
组件放哪呢

01:17:35.620 --> 01:17:37.620
你要在页面中

01:17:37.620 --> 01:17:38.620
要在组件里面

01:17:38.620 --> 01:17:39.620
使用一个东西

01:17:39.620 --> 01:17:40.620
什么东西呢

01:17:42.620 --> 01:17:44.620
要在组件里面使用一个东西

01:17:44.620 --> 01:17:45.620
叫做

01:17:48.130 --> 01:17:49.130
rotor vue

01:17:49.130 --> 01:17:50.130
使用这么一个东西

01:17:51.130 --> 01:17:52.130
当然了

01:17:52.130 --> 01:17:53.130
这个东西

01:17:53.130 --> 01:17:54.130
写法上去看出来

01:17:54.130 --> 01:17:56.130
是不是别人给我们做好的一个组件

01:17:56.130 --> 01:17:57.130
组件

01:17:57.130 --> 01:17:58.130
vue

01:17:58.130 --> 01:17:59.130
rotor给我们做好的一个组件

01:17:59.130 --> 01:18:00.130
这个玩意实际上是啥呢

01:18:02.130 --> 01:18:04.130
它实际上

01:18:04.130 --> 01:18:05.130
是vue

01:18:06.130 --> 01:18:07.130
rotor

01:18:07.130 --> 01:18:09.130
做好的

01:18:09.130 --> 01:18:10.130
一个组件

01:18:11.130 --> 01:18:12.130
并且

01:18:12.130 --> 01:18:13.130
进行了

01:18:13.130 --> 01:18:15.130
全局注册

01:18:15.130 --> 01:18:16.130
并且

01:18:16.130 --> 01:18:18.130
进行了全局注册

01:18:18.130 --> 01:18:19.130
就这么简单

01:18:20.130 --> 01:18:21.130
就这么简单

01:18:21.130 --> 01:18:22.130
当然你的组件使用方式

01:18:22.130 --> 01:18:23.130
我们之前也说过

01:18:23.130 --> 01:18:24.130
可以用什么

01:18:24.130 --> 01:18:25.130
rotor

01:18:25.130 --> 01:18:26.130
vue

01:18:26.130 --> 01:18:27.130
是不是大同风命名法

01:18:27.130 --> 01:18:28.130
都可以

01:18:29.130 --> 01:18:30.130
那么现在逻辑

01:18:30.130 --> 01:18:31.130
是不是全通了

01:18:31.130 --> 01:18:32.130
这个逻辑

01:18:32.130 --> 01:18:33.130
我们给一配置

01:18:33.130 --> 01:18:34.130
告诉你

01:18:34.130 --> 01:18:35.130
访问这个地址

01:18:35.130 --> 01:18:36.130
访问这个地址

01:18:36.130 --> 01:18:37.130
访问这个地址

01:18:37.130 --> 01:18:38.130
访问这个地址

01:18:38.130 --> 01:18:39.130
访问这个地址

01:18:39.130 --> 01:18:40.130
访问这个地址

01:18:40.130 --> 01:18:41.130
访问这个地址

01:18:41.130 --> 01:18:42.130
访问这个地址

01:18:44.130 --> 01:18:45.130
那前面写的

01:18:45.130 --> 01:18:46.130
是不是不动的

01:18:47.130 --> 01:18:48.130
这个地方写的

01:18:48.130 --> 01:18:49.130
是不是不会动的

01:18:50.130 --> 01:18:51.130
不动的

01:18:51.130 --> 01:18:53.130
不动的区域

01:18:54.130 --> 01:18:56.500
不动的区域

01:18:56.500 --> 01:18:57.900
去对吧

01:18:57.900 --> 01:18:58.900
这不会动的

01:18:58.900 --> 01:18:59.100
好

01:18:59.100 --> 01:19:00.300
你看一下

01:19:00.300 --> 01:19:00.700
什么

01:19:00.700 --> 01:19:04.330
movie page is not defined

01:19:04.330 --> 01:19:06.830
这个印的看一下

01:19:06.830 --> 01:19:12.870
movie page is not defined

01:19:12.870 --> 01:19:15.570
movie page is not defined

01:19:15.570 --> 01:19:16.370
哦

01:19:16.370 --> 01:19:17.770
是在这里

01:19:17.770 --> 01:19:18.870
在这里写错了

01:19:18.870 --> 01:19:19.870
这里要去掉了

01:19:19.870 --> 01:19:22.410
去掉了

01:19:22.410 --> 01:19:23.710
你看我访问这个地址

01:19:23.710 --> 01:19:24.310
看着啊

01:19:24.310 --> 01:19:27.410
我们后面加一个movie

01:19:27.410 --> 01:19:28.610
就访问到这个页面了

01:19:28.610 --> 01:19:29.210
看地址啊

01:19:29.210 --> 01:19:30.410
看地址

01:19:30.410 --> 01:19:32.410
我把这个movie去掉

01:19:32.510 --> 01:19:33.310
到这个页面了

01:19:33.310 --> 01:19:33.810
对吧

01:19:33.810 --> 01:19:35.210
到这个页面了

01:19:35.210 --> 01:19:35.710
就这么简单

01:19:35.710 --> 01:19:36.710
你看是根据不同的地址

01:19:36.710 --> 01:19:38.410
选择不同的组件了

01:19:38.410 --> 01:19:38.710
对吧

01:19:38.710 --> 01:19:39.310
就这么简单

01:19:40.810 --> 01:19:41.110
就不简单

01:19:41.110 --> 01:19:41.610
非常简单

01:19:41.610 --> 01:19:41.910
对吧

01:19:44.110 --> 01:19:45.010
配置多了

01:19:45.010 --> 01:19:45.810
那配置多了

01:19:49.610 --> 01:19:50.310
等一会

01:19:50.310 --> 01:19:51.110
等一会

01:19:51.110 --> 01:19:51.210
好

01:19:51.210 --> 01:19:51.810
那么接下来

01:19:51.810 --> 01:19:52.510
我们要做的事情

01:19:52.510 --> 01:19:54.210
要做成这样的效果

01:19:54.210 --> 01:19:55.310
要做成这样的效果

01:19:55.310 --> 01:19:55.710
哎

01:19:55.710 --> 01:19:56.910
跑了去了

01:19:56.910 --> 01:19:59.010
我们刚才的效果

01:19:59.010 --> 01:20:01.010
第四天的效果

01:20:01.010 --> 01:20:02.110
在这里

01:20:02.110 --> 01:20:02.810
要做成这个效果

01:20:02.810 --> 01:20:03.810
是不是特别简单

01:20:03.810 --> 01:20:04.510
对不对

01:20:04.510 --> 01:20:05.810
是不是特别简单

01:20:05.810 --> 01:20:07.810
你前面写上这么一个样式啊

01:20:07.810 --> 01:20:09.210
把这个头部搞定就行了

01:20:09.210 --> 01:20:10.310
直接复制过来了啊

01:20:10.310 --> 01:20:11.710
我就把这个代码复制过来了

01:20:11.710 --> 01:20:12.910
就是个lab元素

01:20:12.910 --> 01:20:14.210
我们copy一下

01:20:14.210 --> 01:20:15.410
copy element

01:20:15.410 --> 01:20:15.910
好

01:20:15.910 --> 01:20:17.710
那么我们把这个lab元素放哪呢

01:20:17.710 --> 01:20:18.710
我们直接放这吧

01:20:18.710 --> 01:20:19.210
直接放这

01:20:21.310 --> 01:20:21.810
直接放这

01:20:23.810 --> 01:20:24.510
lab元素

01:20:24.510 --> 01:20:25.510
你看里面a元素

01:20:25.510 --> 01:20:26.110
对吧

01:20:26.110 --> 01:20:27.210
a元素

01:20:27.210 --> 01:20:31.210
每个地方就是一个a元素

01:20:31.210 --> 01:20:32.310
这里有两个a元素

01:20:32.310 --> 01:20:33.310
我们样式都写好的

01:20:33.310 --> 01:20:34.910
样式我直接复制过来

01:20:34.910 --> 01:20:39.050
直接把样式代码复制过来

01:20:39.050 --> 01:20:39.350
好

01:20:39.350 --> 01:20:42.050
直接把样式代码复制过来啊

01:20:42.050 --> 01:20:44.350
因为样式不是我们的重点

01:20:44.350 --> 01:20:44.450
好

01:20:44.450 --> 01:20:45.750
那么我们直接把lab代码

01:20:45.750 --> 01:20:46.350
直接写这

01:20:46.350 --> 01:20:46.650
对吧

01:20:46.650 --> 01:20:47.550
直接写这

01:20:47.550 --> 01:20:47.750
好

01:20:47.750 --> 01:20:48.450
写这的话

01:20:48.450 --> 01:20:49.350
那么有几个a元素

01:20:49.350 --> 01:20:50.350
是不是两个

01:20:50.350 --> 01:20:51.450
一个a元素连接到哪

01:20:51.450 --> 01:20:53.050
怎么连接到这个就是

01:20:53.050 --> 01:20:54.350
啊

01:20:54.350 --> 01:20:55.250
写杠

01:20:55.250 --> 01:20:56.050
啊

01:20:56.050 --> 01:20:57.450
写杠

01:20:57.450 --> 01:20:58.950
啊

01:20:58.950 --> 01:20:59.150
对吧

01:20:59.150 --> 01:21:00.050
我们先这样子写吧

01:21:00.050 --> 01:21:00.150
啊

01:21:00.150 --> 01:21:00.850
我们先这样子写

01:21:02.850 --> 01:21:02.950
好

01:21:02.950 --> 01:21:03.850
这里

01:21:03.850 --> 01:21:05.250
手液

01:21:05.250 --> 01:21:06.550
一个a元素连接到哪

01:21:06.550 --> 01:21:07.750
是不是连接到movie

01:21:07.750 --> 01:21:08.050
对吧

01:21:08.050 --> 01:21:09.250
连接到movie

01:21:09.250 --> 01:21:12.120
电影液

01:21:12.120 --> 01:21:12.720
电影液

01:21:14.220 --> 01:21:14.520
好

01:21:14.520 --> 01:21:15.720
保存

01:21:15.720 --> 01:21:16.720
你看一下啊

01:21:16.720 --> 01:21:17.920
我们现在行不行啊

01:21:17.920 --> 01:21:19.320
你看一下我们现在行不行

01:21:19.320 --> 01:21:21.220
你看现在就已经出来了效果

01:21:21.220 --> 01:21:22.120
实现效果

01:21:22.120 --> 01:21:23.720
你看是不是手液电影液都出来了

01:21:23.720 --> 01:21:24.320
对吧

01:21:24.320 --> 01:21:25.120
都出来了

01:21:25.120 --> 01:21:26.020
就这么简单

01:21:26.020 --> 01:21:27.720
那么现在我们点击手液看能不能跳转啊

01:21:27.720 --> 01:21:28.220
点击手液

01:21:29.720 --> 01:21:30.720
这是啥呀

01:21:30.720 --> 01:21:32.120
你看一下这是啥呀

01:21:32.120 --> 01:21:34.020
他跳转到这个地址去了

01:21:34.020 --> 01:21:35.420
怎么回事呢

01:21:35.420 --> 01:21:36.420
而且他刷新页面了

01:21:36.420 --> 01:21:37.020
再看一下啊

01:21:37.020 --> 01:21:37.820
他刷新页面了

01:21:37.820 --> 01:21:39.120
你看一下点击手液

01:21:39.120 --> 01:21:40.120
刷新页面了

01:21:40.120 --> 01:21:40.920
这个问题

01:21:40.920 --> 01:21:42.620
我现在不好给你解释

01:21:42.620 --> 01:21:45.220
因为我们现在的用的开发方式呢

01:21:45.220 --> 01:21:47.920
是用的不是脚授架的开发方式

01:21:47.920 --> 01:21:50.620
我们是用的是这个level server

01:21:50.620 --> 01:21:52.620
因为听过我那个atm和cc的同学呢

01:21:52.620 --> 01:21:53.920
应该知道这个东西

01:21:53.920 --> 01:21:56.620
level server这个查件造成的问题

01:21:56.620 --> 01:21:58.420
是这个查件造成的问题啊

01:21:58.420 --> 01:21:59.620
我现在不好给你解释

01:21:59.620 --> 01:22:01.120
因为要解释这个东西的话

01:22:01.120 --> 01:22:04.020
你得理解什么叫做那个

01:22:04.520 --> 01:22:08.020
服务器的就是那个路径规则

01:22:08.020 --> 01:22:09.620
URI的路径规则

01:22:09.620 --> 01:22:11.920
现在不是很好解释啊

01:22:11.920 --> 01:22:12.820
大概的意思就是说

01:22:12.820 --> 01:22:14.320
如果说你这样子访问的话

01:22:14.320 --> 01:22:16.720
访问的是整个这个地址的跟路径

01:22:16.720 --> 01:22:18.520
访问的是整个这个地址的跟路径

01:22:18.520 --> 01:22:19.820
但是我们希望的是

01:22:19.820 --> 01:22:23.320
在之前的这个路径后面加上一个movie

01:22:23.320 --> 01:22:24.520
那么现在我们要怎么访问呢

01:22:24.520 --> 01:22:26.320
要这样子访问

01:22:26.320 --> 01:22:27.920
加上个警号

01:22:27.920 --> 01:22:30.520
之后呢A元加上个警号就行了

01:22:30.520 --> 01:22:32.820
这种访问模式呢叫做哈希模式

01:22:36.520 --> 01:22:38.420
路由模式里边有两种

01:22:38.420 --> 01:22:40.620
一种叫做哈希模式

01:22:42.320 --> 01:22:45.620
这个模式兼容性最好啊

01:22:45.620 --> 01:22:48.620
地址出现在警号后

01:22:52.420 --> 01:22:54.620
切换地址

01:22:54.620 --> 01:22:57.820
不会导致页面刷新

01:22:57.820 --> 01:22:59.020
不会导致页面刷新

01:22:59.120 --> 01:23:00.820
这种兼容性是最好的

01:23:00.820 --> 01:23:02.020
这是哈希模式

01:23:02.020 --> 01:23:03.320
因为我们的页面地址写到哪

01:23:03.320 --> 01:23:04.820
写到警号后边

01:23:04.820 --> 01:23:05.420
这是教授的吗

01:23:05.420 --> 01:23:07.120
你们以前学过的ASXS

01:23:07.120 --> 01:23:08.020
叫做某链接

01:23:08.020 --> 01:23:08.420
对吧

01:23:08.420 --> 01:23:09.020
某链接

01:23:09.020 --> 01:23:09.420
你看一下

01:23:11.420 --> 01:23:12.620
我们现在访问页面

01:23:12.620 --> 01:23:13.120
访问页面

01:23:13.120 --> 01:23:15.420
你看是不是都吹到警号后边

01:23:15.420 --> 01:23:16.720
警号后边对不对

01:23:16.720 --> 01:23:17.420
警号后边

01:23:17.420 --> 01:23:18.420
我们的路径访问

01:23:18.420 --> 01:23:19.120
写到movie

01:23:19.120 --> 01:23:20.320
是不是在警号后边

01:23:20.320 --> 01:23:21.020
对吧

01:23:21.020 --> 01:23:22.820
那么由于我们的路

01:23:22.820 --> 01:23:25.020
我们的静态页面还是这个页面

01:23:25.020 --> 01:23:25.220
对吧

01:23:25.220 --> 01:23:26.720
静态页面是没有变化的

01:23:26.720 --> 01:23:28.620
还是这个页面

01:23:29.620 --> 01:23:31.620
静态页面是不是还是这个页面

01:23:31.620 --> 01:23:32.020
对吧

01:23:32.020 --> 01:23:33.220
所以说我们切换的是什么

01:23:34.520 --> 01:23:35.920
切换的是某链接

01:23:35.920 --> 01:23:39.660
我这边保存吗

01:23:39.660 --> 01:23:41.960
切换的是它的某链接刷新

01:23:44.620 --> 01:23:45.020
你看

01:23:45.020 --> 01:23:45.920
首页 电影页

01:23:45.920 --> 01:23:47.320
看页面有是不是没有刷新

01:23:47.320 --> 01:23:48.420
对吧

01:23:48.420 --> 01:23:49.120
没有刷新

01:23:49.120 --> 01:23:50.220
切换的是它的某链接

01:23:50.220 --> 01:23:51.720
这个页面它是不会刷新的

01:23:51.720 --> 01:23:53.920
这种方式兼容性最好

01:23:53.920 --> 01:23:55.020
兼容性最好

01:23:55.020 --> 01:23:57.320
但是唯一的缺陷就是不是很好看

01:23:58.620 --> 01:23:59.720
不是很好看

01:23:59.720 --> 01:24:01.920
如果说你将把它做成好看的话

01:24:01.920 --> 01:24:03.920
那么你要可能要换一种模式

01:24:03.920 --> 01:24:07.420
第二种模式的话要讲起来的东西又多了

01:24:07.420 --> 01:24:08.520
因为你得理解

01:24:08.520 --> 01:24:11.020
而且无里边的叫做history

01:24:11.020 --> 01:24:12.920
history API

01:24:12.920 --> 01:24:14.320
它叫做browser模式

01:24:14.320 --> 01:24:15.520
也叫做history模式

01:24:17.520 --> 01:24:18.320
模式

01:24:18.320 --> 01:24:22.420
使用的是atm5的history

01:24:22.420 --> 01:24:25.120
history API

01:24:25.120 --> 01:24:28.420
它的现象是地址直接变化

01:24:28.420 --> 01:24:29.520
它不是出现在景号后面

01:24:29.520 --> 01:24:31.220
是直接整个地址变化

01:24:31.220 --> 01:24:34.420
并且页面不刷新

01:24:34.420 --> 01:24:35.820
并且页面不刷新

01:24:35.820 --> 01:24:37.420
这种模式的话

01:24:37.420 --> 01:24:41.220
那么如果说你用这种第一种哈希模式的话

01:24:41.220 --> 01:24:42.520
如果说你用哈希模式

01:24:42.520 --> 01:24:44.320
那么你可以这样子写没问题

01:24:44.320 --> 01:24:46.320
但是说如果说你用第二种模式的话

01:24:46.320 --> 01:24:47.320
你就不能用A元素了

01:24:47.320 --> 01:24:49.220
因为A元素它一定会导致刷新地址

01:24:49.220 --> 01:24:51.320
因为你这里不能写景号了

01:24:51.320 --> 01:24:51.920
不能写景号了

01:24:51.920 --> 01:24:54.220
我们聊一下第二种模式就行了

01:24:54.220 --> 01:24:55.920
因此如果说你用第二种模式的话

01:24:55.920 --> 01:24:58.620
你需要配置第一步

01:24:58.620 --> 01:25:00.320
你需要配置在哪里配置呢

01:25:00.320 --> 01:25:01.920
在这里

01:25:01.920 --> 01:25:03.720
这里的配置的时候

01:25:03.720 --> 01:25:05.420
除了roach配置之外

01:25:05.420 --> 01:25:06.620
你还要加上一个mod

01:25:06.620 --> 01:25:09.320
mod配置模式

01:25:09.320 --> 01:25:11.020
它默认是哈希

01:25:11.020 --> 01:25:12.720
你可以把它改成history

01:25:12.720 --> 01:25:14.220
改成history

01:25:14.220 --> 01:25:15.720
好改了之后

01:25:15.720 --> 01:25:18.420
同时你在页面中使用这个

01:25:18.420 --> 01:25:20.420
就不能使用A元素了

01:25:20.420 --> 01:25:23.760
你就不能使用A元素了

01:25:23.760 --> 01:25:25.860
跑到去了

01:25:25.860 --> 01:25:28.860
我们的页面中在这里

01:25:28.860 --> 01:25:29.960
你就不能使用A元素了

01:25:30.560 --> 01:25:33.360
而要用viurotr给你提供的一个组件

01:25:33.360 --> 01:25:38.060
叫做rotelink

01:25:38.060 --> 01:25:41.260
使用tag的提供这个组件来进行导航

01:25:41.260 --> 01:25:42.460
用这个组件进行导航

01:25:42.460 --> 01:25:44.060
那么把这个Rave属性变成啥了

01:25:44.060 --> 01:25:46.560
变成2

01:25:46.560 --> 01:25:47.560
我说一下这个组件

01:25:47.560 --> 01:25:49.160
这个组件非常有意思

01:25:49.160 --> 01:25:51.260
而且特别简单

01:25:51.260 --> 01:25:53.060
不知道将来应该没有机会了

01:25:53.060 --> 01:25:54.560
因为是常常

01:25:54.560 --> 01:25:57.860
大常哥给大家讲那个viu的原码分析

01:25:57.860 --> 01:25:58.860
他讲到原码分析的时候

01:25:58.860 --> 01:26:00.560
你会发现他写这个组件特别简单

01:26:00.560 --> 01:26:02.760
就启航待发就可以写出来

01:26:02.760 --> 01:26:05.560
那里要有很多前置知识

01:26:05.560 --> 01:26:10.960
这里我rotelink为大家记一笔

01:26:10.960 --> 01:26:13.560
导航就是切换页面

01:26:13.560 --> 01:26:16.560
我们要切换页面

01:26:16.560 --> 01:26:25.160
通常使用rotelink来切换页面

01:26:25.160 --> 01:26:28.660
通常使用这个来切换页面

01:26:29.160 --> 01:26:35.360
它可以自动匹配

01:26:35.360 --> 01:26:39.560
而自动使用配置中的模式

01:26:39.560 --> 01:26:41.660
自动使用配置中的模式

01:26:41.660 --> 01:26:45.160
并且不会刷新页面

01:26:45.160 --> 01:26:46.460
它会自动切换模式

01:26:46.460 --> 01:26:47.360
你配置的是哈奇

01:26:47.360 --> 01:26:49.160
它就用哈奇模式

01:26:49.160 --> 01:26:50.960
如果是你配置的是History

01:26:50.960 --> 01:26:52.460
它就用History模式

01:26:52.460 --> 01:26:54.260
所以说大家强烈建议大家使用这个

01:26:54.260 --> 01:26:55.660
不要使用A元素

01:26:55.660 --> 01:26:57.660
除非你真的想刷新页面

01:26:57.660 --> 01:26:59.860
它会自动它其实它生成啥呢

01:26:59.860 --> 01:27:01.960
它其实就是生成A元素

01:27:01.960 --> 01:27:08.660
本质上就是生成A元素

01:27:08.660 --> 01:27:10.760
它其实就是生成A元素

01:27:10.760 --> 01:27:14.160
所以说我们这里在使用的时候呢

01:27:14.160 --> 01:27:15.460
在这里

01:27:15.460 --> 01:27:17.660
使用的时候我们就这样子写

01:27:17.660 --> 01:27:19.960
它的链接地址用to作为链接地址

01:27:19.960 --> 01:27:23.710
看一下吧

01:27:23.710 --> 01:27:25.410
刷新页面

01:27:25.510 --> 01:27:27.910
那么现在我们显示首页

01:27:27.910 --> 01:27:29.310
电影页

01:27:32.310 --> 01:27:32.910
等一下

01:27:32.910 --> 01:27:33.610
你看

01:27:33.610 --> 01:27:35.010
这就可以显示了

01:27:35.010 --> 01:27:36.510
可以显示了

01:27:36.510 --> 01:27:37.710
至少可以显示了

01:27:37.710 --> 01:27:39.010
现在出现一个萌尘

01:27:39.010 --> 01:27:40.510
加载比较久一点

01:27:40.510 --> 01:27:43.860
加载比较久一点

01:27:43.860 --> 01:27:44.760
这里返回

01:27:44.760 --> 01:27:45.560
首页

01:27:45.560 --> 01:27:46.060
电影

01:27:46.060 --> 01:27:47.460
那么切换的哈奇模式

01:27:47.460 --> 01:27:49.360
我们目前默认尽量用哈奇模式

01:27:49.360 --> 01:27:50.560
尽量用哈奇模式

01:27:50.560 --> 01:27:52.460
因为目前的台湾环境下面

01:27:52.460 --> 01:27:53.460
由于没有脚头架

01:27:53.460 --> 01:27:54.560
没有微拍的支持

01:27:54.560 --> 01:27:55.360
用History模式

01:27:55.360 --> 01:27:56.860
有的时候要出一些问题

01:27:56.860 --> 01:27:57.860
尽量用哈奇模式

01:27:59.660 --> 01:28:02.770
尽量用哈奇模式

01:28:02.770 --> 01:28:03.570
又卡住了

01:28:03.570 --> 01:28:06.750
卡住了

01:28:06.750 --> 01:28:07.250
首页

01:28:07.250 --> 01:28:07.750
电影页

01:28:07.750 --> 01:28:08.050
对吧

01:28:08.050 --> 01:28:08.550
首页电影页

01:28:08.550 --> 01:28:09.450
是不是可以切换了

01:28:09.450 --> 01:28:09.650
好了

01:28:09.650 --> 01:28:10.950
这次的央视是怎么回事

01:28:10.950 --> 01:28:11.950
这个央视是这样子的

01:28:11.950 --> 01:28:13.250
你看它给你生成的是A元素

01:28:13.250 --> 01:28:13.850
对吧

01:28:13.850 --> 01:28:14.650
那个A元素

01:28:14.650 --> 01:28:16.950
它会给你自动加上央视

01:28:16.950 --> 01:28:19.350
给你自动加上央视

01:28:19.350 --> 01:28:20.450
什么央视呢

01:28:20.450 --> 01:28:21.350
我们看一下

01:28:21.350 --> 01:28:21.750
这次完了

01:28:21.750 --> 01:28:23.550
我们就交给莫里哈了

01:28:23.550 --> 01:28:24.850
给大家上一下就业课的姿势

01:28:24.850 --> 01:28:26.750
明天我们好好聊

01:28:26.750 --> 01:28:28.150
就是

01:28:28.150 --> 01:28:29.850
rotor link

01:28:29.850 --> 01:28:31.650
会自动添加

01:28:31.650 --> 01:28:36.050
自自动给A元素添加央视

01:28:36.050 --> 01:28:37.250
自动添加央视

01:28:37.250 --> 01:28:38.350
当

01:28:40.350 --> 01:28:43.850
当前的当前的地址

01:28:43.850 --> 01:28:48.450
如果匹配如果匹配路

01:28:48.450 --> 01:28:53.150
就是rotor link中的2的地址

01:28:54.550 --> 01:28:57.650
则会添加央视

01:28:58.350 --> 01:28:58.550
好

01:28:58.550 --> 01:28:59.450
你看一下啊

01:28:59.450 --> 01:29:00.850
当前我们的访问地址是什么

01:29:00.850 --> 01:29:01.450
是不是鞋杠

01:29:01.450 --> 01:29:01.950
首页

01:29:01.950 --> 01:29:02.250
对吧

01:29:02.250 --> 01:29:02.950
是不是首页

01:29:02.950 --> 01:29:03.350
鞋杠

01:29:03.350 --> 01:29:04.050
首页

01:29:04.050 --> 01:29:05.250
那么这个A元素

01:29:05.250 --> 01:29:05.750
这个A元素

01:29:05.750 --> 01:29:06.650
它是tool的地址

01:29:06.650 --> 01:29:07.550
是不是就是首页

01:29:07.550 --> 01:29:08.350
你看它tool的地址

01:29:08.350 --> 01:29:09.550
是不是就是首页

01:29:09.550 --> 01:29:10.250
ok

01:29:10.250 --> 01:29:11.650
它就会给你加上这个央视

01:29:11.650 --> 01:29:13.450
叫做rotor link

01:29:14.650 --> 01:29:16.750
一个reactive

01:29:16.750 --> 01:29:18.550
就是精确匹配到这个A元素

01:29:18.550 --> 01:29:19.150
就当前的地址

01:29:19.150 --> 01:29:20.350
精确匹配到这个A元素

01:29:20.350 --> 01:29:21.550
还会加上这个央视

01:29:21.550 --> 01:29:22.550
后边那个是什么呢

01:29:22.550 --> 01:29:25.150
后边那个叫做模糊匹配

01:29:25.150 --> 01:29:25.650
模糊匹配

01:29:25.650 --> 01:29:26.650
什么叫模糊匹配呢

01:29:26.650 --> 01:29:27.950
点击我们点击电影

01:29:27.950 --> 01:29:29.250
你看地址是不是变了

01:29:29.250 --> 01:29:30.150
地址变了之后

01:29:30.150 --> 01:29:31.150
你看第一个A元素

01:29:31.150 --> 01:29:32.450
是不是还有这个样子

01:29:32.450 --> 01:29:33.750
它还是认为是匹配的

01:29:33.750 --> 01:29:34.550
它没有精确匹配

01:29:34.550 --> 01:29:35.950
但是模糊匹配了

01:29:35.950 --> 01:29:37.250
为什么说模糊匹配呢

01:29:37.250 --> 01:29:38.050
因为它这个地址

01:29:38.050 --> 01:29:39.450
目前这个鞋杠movie

01:29:39.450 --> 01:29:41.250
是不是也鞋杠开头的

01:29:41.250 --> 01:29:43.150
它只要以鞋杠开头都算

01:29:43.150 --> 01:29:43.650
都算

01:29:43.650 --> 01:29:44.750
它就可以加这个样子

01:29:44.750 --> 01:29:46.250
也就是它一共控制两个样子

01:29:46.250 --> 01:29:47.950
一个是模糊匹配上当样子

01:29:47.950 --> 01:29:49.850
一个是精确匹配上当样子

01:29:49.850 --> 01:29:51.450
那我这里在CSS里边了

01:29:51.450 --> 01:29:52.750
给大家写了一个样子

01:29:52.750 --> 01:29:54.650
你看我的CSS里边

01:29:54.650 --> 01:29:55.950
给大家写了这么一个样子

01:29:55.950 --> 01:29:57.050
就这么个

01:29:57.950 --> 01:29:58.850
匹配配的样子

01:29:58.850 --> 01:29:59.650
给它拜光的

01:29:59.650 --> 01:30:01.150
给它设置了这个就完事了

01:30:01.150 --> 01:30:02.750
还可以做这么一个激活的效果

01:30:08.450 --> 01:30:09.550
下来好好去吸收一下吧

01:30:09.550 --> 01:30:10.550
我这里没说到时间了

01:30:10.550 --> 01:30:11.750
咱们明天慢慢聊

01:30:11.750 --> 01:30:12.850
明天我们好好聊

01:30:12.850 --> 01:30:13.450
不着急

01:30:14.650 --> 01:30:15.350
明天我们好好聊

01:30:15.350 --> 01:30:16.650
今天我主要说交给摩尼卡了

01:30:16.650 --> 01:30:17.850
其实这里还有一点点东西

01:30:17.850 --> 01:30:18.450
还没有讲完

01:30:18.450 --> 01:30:20.750
我们这里也不说习题了

01:30:20.750 --> 01:30:21.350
因为我们这里

01:30:21.350 --> 01:30:23.050
毕竟还有点点东西没讲完

01:30:23.050 --> 01:30:24.050
我们先交给摩尼卡

01:30:24.050 --> 01:30:24.550
好吗

01:30:25.550 --> 01:30:26.150
好不好

01:30:27.750 --> 01:30:28.750
我已经被下了

01:30:28.950 --> 01:30:29.550
回头吃饭了

01:30:31.250 --> 01:30:31.950
明天我们多聊点

01:30:36.370 --> 01:30:36.970
不好

01:30:36.970 --> 01:30:37.970
我不要理觉得

01:30:37.970 --> 01:30:38.970
我要我觉得

01:30:38.970 --> 01:30:39.570
我觉得好

01:30:39.570 --> 01:30:40.170
我觉得没问题

01:30:54.820 --> 01:30:55.420
听我的

01:30:55.420 --> 01:30:55.720
来

01:30:55.720 --> 01:30:56.320
听听就一颗

