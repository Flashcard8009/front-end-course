WEBVTT

00:00.000 --> 00:01.800
好嘞 那咱们开始上课

00:03.600 --> 00:07.000
间谍结合 先说一下 咱们这四天的接这么一个

00:08.200 --> 00:10.480
呃 到底讲啥啊 是这样

00:11.200 --> 00:13.120
呃 因为呢 现在咱们

00:13.960 --> 00:18.200
杜一在公益课里边 有一节有一个免费的公益课

00:18.640 --> 00:23.280
就咱们的伍佑 伍佑开发啊 讲了一些伍佑的开发基础

00:23.720 --> 00:25.360
咱们公益课不知道大家看到没有啊

00:26.880 --> 00:27.400
看一下来

00:28.600 --> 00:29.400
也是我讲的

00:31.000 --> 00:33.840
课程前端就一个

00:34.760 --> 00:37.640
基础入文课里边有一个伍佑

00:38.520 --> 00:40.440
我在这啊 零基础到实战

00:41.000 --> 00:44.760
就这个东西 呃 这个伍佑呢 他就讲到了伍佑里边的一些

00:45.560 --> 00:49.760
呃 基本的概念 以及了一些基础的开发 包括了一些案例

00:51.080 --> 00:52.200
呃 那么这是一个

00:52.880 --> 00:57.880
零基础零基础的课 但是呢 我们这四天的东西呢 他并不是零基础啊

00:58.400 --> 01:02.760
需要大家呢 对伍佑呢 有一定的了解 我们这四天的课从哪来的

01:03.320 --> 01:09.760
是来自于咱们后期的呃 全阶班的一个课 就是伍佑二 因为我们后期的全阶班讲了一个伍佑二

01:10.120 --> 01:15.640
还有一个伍佑三啊 我们先讲了伍佑二 那么伍佑二呢 这个课呢 咱们后期是分为两个阶段

01:16.880 --> 01:23.420
啊 有重音吗 我的声音有重音吗 我的声音还好吧

01:27.000 --> 01:31.480
还好是吧 没有没有吧 也有点刷新意想啊 重新让同学刷新意想啊 也不知道什么问题

01:32.040 --> 01:41.400
他有两个阶段 一个呢 是入门 一个是就意啊 我简单说一下啊 入门这个阶段的课呢 我们是有一个完整的项目

01:42.360 --> 01:47.800
就是你一边学习伍佑二 一边呢 学习他的知识 一边去推进这个项目

01:48.200 --> 01:53.160
你把这个伍佑的入门阶段学完了之后呢 你就可以 相当于是把整个项目就做完了

01:53.720 --> 02:00.680
这是入门阶段 入门阶段的东西呢 是相对来说是比较简单的 主要是让大家呢 能够通过学习这个入门

02:01.240 --> 02:10.680
能够使用这个伍佑二来去完成一个项目能干活啊 以后呢 在公司里边 绝大部分事情呢 都是在入门阶段的东西就可以够用了

02:11.400 --> 02:18.680
然后接着呢 是有一个就业阶段啊 这个东西的主 这个阶段的主要是搞定面试体育 因为我们知道现在的情况啊

02:20.710 --> 02:25.830
就是面试照火箭啊 工作领螺丝啊 说得这样说啊 确实有这么一个现象存在

02:26.310 --> 02:34.710
因为无论是前端还是后端 竞争都越来越激烈了啊 用咱们时髦一点话说就是内卷啊 卷的越来越厉害了

02:35.110 --> 02:39.750
竞争越来越激烈 所以说公司在面对的大量的求职者的时候呢 他可能

02:41.190 --> 02:44.150
邀请就会越来越高 所以说面试体呢 就会越来越难

02:45.190 --> 02:48.390
而询问到原理的地方呢 就会越来越多

02:49.110 --> 02:50.630
就是面试体的问题

02:51.590 --> 02:59.990
另外一个方面呢 就是你在工作中呢 其实像这些难道面试体啊 这些跟原理一切相关的东西 你需不需要了解呢

03:00.390 --> 03:07.670
我建议大家还是需要了解 因为你不能永远的去只是当一个马龙 怎么叫马龙呢 就是完成一些业务需求

03:07.990 --> 03:12.150
然后让你做个登录 让你做个文章列表 让你做个讲情

03:12.790 --> 03:15.430
这些非常常规的操作

03:16.150 --> 03:19.510
你如果说天天的面试是这样的开发的话 你的技术退化是很快的

03:20.470 --> 03:28.070
我们要去追求一些呃 更加能够锻炼自己的一些工作法规 比方说像一些公共组建的开发 这就难度一下就升

03:28.470 --> 03:33.350
升高了很多了 将于我们今天会有一个案例出来啊 那个案例的话你会发现

03:33.830 --> 03:35.510
你用一些基础的势力根本就搞不定

03:36.390 --> 03:41.430
所以像这种情况 像于公共组建的开发或者是一些呃 甚至是框架的开发

03:41.830 --> 03:47.110
你多多少少去设计一点啊 因为我们毕竟对于还是希望咱们的同学们能够出去过后

03:47.590 --> 03:55.990
不要去拿去拿一个几千块钱的工作能够尽量啊 上10k以上或者是20k以上尽量拿一个高薪的工作啊 这是咱们所追求的目标

03:56.470 --> 04:01.590
所以就业家当的咱们一方面呢 去讲这个面试题 一方面呢 去讲一些原理性的东西

04:02.070 --> 04:04.150
还就是入门阶段没有讲到的一些

04:04.870 --> 04:08.150
可能会遇到的一些API 我们都会讲到啊 在就业家当里面讲到

04:08.870 --> 04:12.390
这是咱们全阶班的课里面呢 咱们的阶段划分

04:13.030 --> 04:15.190
而我们这四天的这个课呢

04:15.990 --> 04:21.270
这个直播课呢 就是从就业阶段里面提出来的 所以说呢 你们心里边也还有一个数啊

04:21.750 --> 04:26.390
我们这几天的课可不是铭技术啊 它有一定难度 但是呢

04:27.270 --> 04:34.790
我精心的去设计了一下 因为咱们这四天的课我从一个就业阶段丢阶段我们课很多啊 我从中挑选了世界课出来

04:35.270 --> 04:39.350
呃 现在这世界课呢 是比较有代表性的 而且这世界课里边的

04:39.910 --> 04:45.430
呃 问到的面试题的机会率也比较大 而且它的难度也比较高 我从这里边挑选出来这么几节课

04:47.030 --> 04:48.950
但是呢 它就不是能临基础了

04:49.590 --> 04:54.630
你需要需要什么呢 你需要挥一点五佑 你至少要知道怎么去搭建五佑工程

04:55.110 --> 05:00.230
你至少要知道五佑里边怎么去做一个组建啊 这些基本的操作呢 你得挥

05:00.630 --> 05:03.270
啊 如果说一通说那我不会 我完全是临基础的

05:03.670 --> 05:12.390
那么这个课呢 你留在那儿吧 反正有路过的 你留在那儿 将来你一定用得上的 你只要接 你只要将来要走前端方向

05:13.110 --> 05:19.030
你肯定跑不过五佑的啊 肯定是 这个五佑肯定是你要学习的 那么这个课呢你早晚会用得上的

05:20.150 --> 05:22.790
好 这是咱们那个课呢 给大家说明一下啊

05:24.630 --> 05:27.990
好 那么今天晚上咱们就直接开始讲这个课了啊

05:28.950 --> 05:35.510
啊 临基础的话了 你可能这个就不知道我在干嘛了啊 你尽量听吧 你可能多多少少听听那种那么一点意识啊

05:38.390 --> 05:39.990
就业指挥五佑可以吗

05:42.390 --> 05:49.190
可以的 实际上是可以的 因为现在是这么一个情况 五佑和reacts呢 在国内的市场呢 评分求设

05:49.670 --> 05:54.550
就有些公司呢 他要求你会有reacts就可以了 别的公司呢 你要求了你指挥五佑就可以了

05:55.350 --> 06:04.070
那么如果说你两个只会其中一个的话 那么你的就业机率啊 就是你投简历的投简历的公司呢 练了就会少一些

06:04.470 --> 06:05.910
但是呢 找工作还是可以的啊

06:06.950 --> 06:10.070
好了 那咱们直接开始今天的面诗题 我们今天讲一道面诗题

06:11.590 --> 06:15.110
这段面诗题呢 就是问你 让你阐述一下

06:15.830 --> 06:19.990
五佑虚拟多母的理解 你是怎么去理解五佑的虚拟多母的

06:20.950 --> 06:26.310
这是一道非常常见的面诗题 对不对 像很多人会觉得这个在面诗的时候 经常会出现一个问题就是

06:27.430 --> 06:32.870
面诗官问你一道面诗题 特别像是那种惨数一个东西的面诗题 你可能几句话就回答出来了

06:33.510 --> 06:37.350
就回答完了 那这样的面诗题呢 你是拿不到高分的

06:38.070 --> 06:41.270
像我们这几天呢 都会讲每天每一天都会有对应的一道面诗题

06:41.750 --> 06:45.190
那么你听完了这几天的课的话 你会发现 像这些面诗题

06:46.150 --> 06:51.190
以后 如果说面诗官问到了 你可以给他聊半个小时 不带重样的

06:51.830 --> 06:55.910
我们现在的就业课呢 就需要达到这么一个效果 要能够经验面诗官

06:56.390 --> 07:02.630
甚至呢 我敢说 你们将来遇到的面诗官很多时候 你如果说他面诗官问到这样的问题

07:03.190 --> 07:06.390
你把我给你讲的东西给他回答出来 你会把他吓到的

07:06.870 --> 07:09.750
因为很多面诗官他自己都没有聊得那么深入啊

07:09.990 --> 07:12.550
所以这几天的课呢 我们讲的是会非常的深入的

07:12.950 --> 07:14.950
也就是可以聊的东西会非常非常多

07:15.910 --> 07:18.550
所以你们以后对面诗官要温柔一点啊 别把他吓到的

07:19.910 --> 07:22.390
那么如果说面对这样的问题的话 首先要告诉大家

07:22.870 --> 07:28.310
如果说面诗的时候 问道理 让你去闪述一个东西 你一定要干嘛 一定要知

07:30.070 --> 07:36.710
知无不言 言无不尽 就是你知道哪些东西就一定要全面的一股脑的组织号语言

07:37.350 --> 07:37.830
告诉他

07:38.550 --> 07:41.990
但是这些东西不要去背啊 虽然我今天晚上给你用文字的形式给你写了这么多

07:42.230 --> 07:44.550
但是不是说让你去背这些东西 你背不住的

07:45.030 --> 07:48.470
你背的很容易忘记了 而且你背的东西 你在面试的时候回答出来

07:48.870 --> 07:49.350
跟你

07:50.070 --> 07:53.910
你把他背出来 和你自己把他阐述出来 效果是完全两个效果

07:54.230 --> 07:55.350
因为平时高中的时候你

07:56.470 --> 07:58.390
背过课文吧 对吧 背过英语吧

07:58.950 --> 08:02.710
那你自己想一下吧 回想一下吧 你背课文的时候那种感觉

08:03.110 --> 08:05.830
跟你平时正常说话的那种感觉是完全不一样的

08:05.990 --> 08:09.590
所以千万不要去背啊 因此呢你只有一条路就是理解他

08:09.830 --> 08:13.670
你自己理解的越多 你能聊的东西就越多 你理解的东西越少

08:13.990 --> 08:16.390
你要是东西就越少 好 咱们来理解一下啊

08:17.110 --> 08:19.270
那么让你去产数对无忧虚的动物的理解

08:19.990 --> 08:21.990
我给大家提个一个总体的方向

08:23.190 --> 08:27.830
就要从四个方向去切入 一个是什么叫虚的动 一个是为什么要虚的动

08:28.310 --> 08:32.150
还有就是虚的动跟我们的真实动物有什么样的关系 还有什么样的转换关系

08:32.630 --> 08:34.150
还有就是那个我们的母版

08:35.350 --> 08:37.030
因为我们的无忧里面是不是用母版写的

08:37.750 --> 08:40.470
所有东西都是一个tenplay值吧 用母版写出来的东西

08:40.710 --> 08:43.590
那么这个母版里面的东西跟我们的虚的动有什么样的关系

08:44.230 --> 08:47.830
你要从这四个角度去产数 那里产数的内容就会非常的阳读

08:48.390 --> 08:48.950
你看吧

08:49.910 --> 08:53.510
如果说你之前了解不清楚这种面词题的话 那么听完了听完之后

08:53.830 --> 08:54.710
有非常清楚了

08:55.590 --> 08:58.550
好 当然我在讲这些东西的时候呢 一方面是讲了个面词题

08:58.790 --> 09:03.510
另一方面呢 我要通过这个面词题 告诉你们虚的动里面有哪些东西你需要知道

09:04.230 --> 09:05.190
好 我们就各个来啊

09:06.390 --> 09:09.350
你首先要找到第一个方向 就是什么到底什么是虚的动

09:09.750 --> 09:13.430
因为我们无忧里面的经常听说的啊 无忧里面用了虚的动的技术

09:13.670 --> 09:14.470
什么叫虚的动

09:15.590 --> 09:20.710
其实虚的动呢 它本质上呢 就是一个非常非常普通的介石对象

09:21.750 --> 09:25.510
就是一个介石对象 你看吧 我们在流量系里面不经常创建对象吧

09:26.070 --> 09:28.390
一个OV界 然后一个一个对象

09:29.350 --> 09:30.150
不就是一个对象吗

09:31.510 --> 09:35.270
虚动本质上就是这样一个对象 怎么它里面有一些特别的属性而已

09:35.910 --> 09:37.510
它搞不出来什么我们别的玩意了

09:37.750 --> 09:40.790
虚的动的本质就是个介石对象 你把这个点回答吧

09:41.190 --> 09:46.470
那么对象的目的是什么呢 它要用来做啥呢 它主要是用来描述我们的界面结构

09:47.030 --> 09:47.830
我举个例子啊

09:48.310 --> 09:48.950
比方说

09:49.830 --> 09:51.750
我这里呢 有这么一个东西

09:52.230 --> 09:55.270
那么这个东西呢 我就可以用一个虚的动物来描述 你看我怎么描述

09:55.670 --> 09:56.630
我可以这样的描述

09:57.190 --> 09:59.510
哎 我告诉他 我这里呢 有一个

10:00.150 --> 10:04.630
有一个动物元素 它的标签呢 是DEV

10:05.510 --> 10:10.150
这是一个对象吗 它里面一个属性嘛 tag 表示它的元素名字是DEV

10:11.110 --> 10:13.430
然后呢 它里面有个属性 ID

10:13.430 --> 10:16.150
这个ID我怎么表示呢 我用 ATTRS 来表示

10:16.470 --> 10:18.230
表示我这个元素有哪些属性

10:20.600 --> 10:20.920
ID

10:21.560 --> 10:22.920
ID的值是什么呢 APP

10:23.560 --> 10:26.520
你看是不是可以描述出来了吗 能描述出来吗 肯定能描述出来

10:27.160 --> 10:29.320
然后这个元素里边还有一些指指元素

10:29.880 --> 10:31.400
来吧 我们来看一下指指元素

10:31.800 --> 10:33.560
它指指元素呢 我们用 chill 来表示

10:34.360 --> 10:36.200
表示它的一些指元素 它是一个数组

10:37.240 --> 10:40.680
啊 因为它有可能有很多指元素 对吧 就是它的结构上是一个数组

10:41.160 --> 10:42.600
而数组的每一项呢

10:43.240 --> 10:47.160
又是一个对象 比方说这个数组里边 哎 这个指元素有一个 HE 对吧

10:47.400 --> 10:48.920
那我们来那个 HE

10:49.480 --> 10:50.600
HE又是一个对象

10:53.050 --> 10:54.250
太 HE

10:55.290 --> 11:00.650
它有属性吗 没有属性 没有属性 拉倒呗 那么这个 ATTR 实际上就是你的

11:03.270 --> 11:06.310
好 然后呢 它又没有指元素了 HE

11:06.950 --> 11:09.110
这个 AT 还是有指元素的啊 还是有的

11:09.590 --> 11:10.790
那它指元素是啥呢

11:11.030 --> 11:15.910
chill 数组啊 它指元素啥呢 它指元素肯定又是一个对象

11:16.310 --> 11:17.910
只要是一个节点 它就是一个对象

11:18.470 --> 11:19.750
那么这个指元素我们来看一下啊

11:20.150 --> 11:22.070
这个指元素它有没有太个属性呢

11:22.310 --> 11:25.750
它是什么 它是什么标签呢 它啥标签的不是 它是一个文本

11:29.300 --> 11:29.940
打长一点啊

11:30.660 --> 11:35.060
它是一个文本 那么这个文本呢 我注意到它的太个属性的就是 暗地蛋

11:35.860 --> 11:38.500
那有没有 有没有属性的这个话 肯定没有属性啊

11:38.820 --> 11:41.460
那么我给它一个特别的属性 叫做 HEX

11:41.460 --> 11:45.860
它的文本的值呢 是 HelloView

11:46.260 --> 11:47.940
你看 这样子不就没有描述出来吗

11:49.300 --> 11:54.420
嗯 你看啊 我们的这个DIV 是不是 就这个玩意儿

11:54.900 --> 11:59.140
对吧 然后呢 我们的属性ID 是不是有它

11:59.860 --> 12:03.780
对不对 然后呢 我们这个 HE 不就这个玩意儿吗

12:04.900 --> 12:06.900
啊 然后 HE 里边的指元素

12:07.380 --> 12:09.380
这个 HelloView 不就这个玩意儿吗

12:09.780 --> 12:12.740
所以把这个结构就描述出来了 尽管这个结构呢 看上去呢

12:13.700 --> 12:18.100
非常的不易阅读啊 但是这个结构不是让里面去阅读的啊 是给我们的程序来阅读的

12:18.500 --> 12:22.580
所以这个结构呢 就可以通过一个对象 就把我们的一个 HTML这个结构

12:22.820 --> 12:25.620
转换成了一个 JS 的对象结构 这就是虚拟动

12:26.660 --> 12:29.220
啊 这一块 听上去没啥问题吧

12:30.740 --> 12:31.940
这一块听上去没啥问题吧

12:32.660 --> 12:38.260
啊 你看这个对象 它会影响到我们的界面吗 它跟界面没有什么关系

12:38.580 --> 12:42.420
这个玩意儿就相当于你在JS里边 你给我来到一个这个东西

12:42.900 --> 12:48.580
啊 Note 就来一个这个东西 你说它跟界面有啥关系呢 我不是说我创建了这个对象 它就给我自动成成界面了

12:48.820 --> 12:50.580
这界面有关系吗 一点关系都没有

12:51.140 --> 12:52.660
啊 它就是一个普通的解释对象

12:53.140 --> 12:58.820
好 简直清楚了吧 这个对象它用一个特别的结构来描述我们界面上到底有啥

12:59.860 --> 13:01.620
它是用来描述界面结构的

13:02.420 --> 13:06.420
啊 以后我就会说到 哎 有时候可能有疑问了 为什么不直接使用

13:07.300 --> 13:12.020
哎天呗 不直接使用那个DOM呢 为什么还要用那个对象来描述呢 以后我们就知道了啊

13:13.220 --> 13:14.180
然后先让我继续看

13:15.860 --> 13:19.140
它这个对象跟我们的VU有什么关系呢

13:20.260 --> 13:26.740
现在要知道了啊 我们要跟VU联系一下了 在VU里边的每一个组件啊 注意哦 我说的是每一个组件

13:27.620 --> 13:29.940
它都有一个Render函数

13:30.660 --> 13:34.660
看着啊 这是我们的VU的一个工程

13:35.540 --> 13:37.380
这是不是一个VU组件 是吧

13:38.980 --> 13:42.500
这是VU的组件的配置对象 对吧 这是VU组件的配置对象

13:45.560 --> 13:50.920
它里边有很多配置 标准什么data啊 有什么computed啊 对吧 都是VU的常见一些配置

13:51.480 --> 13:54.120
还是message 其中有一个配置叫做Render

13:55.240 --> 13:57.080
有这么一个配置 它是一个函数

13:57.800 --> 13:59.080
啊 这个Render是一个函数

14:02.760 --> 14:06.280
那我们现在有没有配置这个Render 其实我们最开始是没有配置这个Render的

14:06.920 --> 14:12.760
没有配置这个Render 那为什么我这里要说每一个组件都有一个Render函数呢 为什么要这样说呢

14:13.720 --> 14:16.040
好 那么咱们全把这个东西要理解清楚

14:16.520 --> 14:21.560
这里呢 我这里先用一种最传统的方式 给大家看一个VU的写法啊

14:22.280 --> 14:29.480
我们这里有一个VU介石啊 是压出过后的VU介石 我们先不用嚼头加来吧 我们先用一个最传统的方式给大家看一下

14:30.600 --> 14:31.880
呃 这里随便写一个吧

14:32.520 --> 14:33.000
test

14:35.580 --> 14:37.100
好 我们这里呢 写个div

14:38.540 --> 14:41.260
啊 如果说没有学过VU的同学呢 可以稍微听一下啊

14:43.420 --> 14:48.540
我们去引用这个VU介石啊 这个VU介石引用之后了 它就可以给我们提供一个构造函数 对吧

14:50.540 --> 14:54.940
VU一个VU 它给我们提供一个构造函数 那么这里面写的是什么呢 写的就是组件配置

14:55.820 --> 14:56.460
组件配置

14:57.020 --> 14:59.900
这相当于是创建一个VU的组件 这里面写组件配置

15:00.860 --> 15:03.420
好 在配置里边呢 我们有很多配置 比方说有EA哦

15:03.820 --> 15:09.180
EA这个配置呢 就告诉它 VU要控制哪个区域 对吧 我们控制id为app的区域 VU控制这个区域

15:10.140 --> 15:13.340
好 然后这个区域比方要显示一个 ac ac里边要显示个标题

15:14.700 --> 15:20.460
然后呢 接下来我们又有这个配置啊 data 我们又哪些数据呢 比方说我们一个数据啊 抬头标题啊 hello

15:22.380 --> 15:24.620
有这么一个数据 那么就什么意思呢 就是把

15:25.260 --> 15:26.780
这个数据呢 显示到这一块

15:27.580 --> 15:28.380
就这么个意思

15:29.340 --> 15:31.900
好 接下来我们来看一下 运行出来

15:33.660 --> 15:36.700
能够显示出来对吧 没问题吧 显示出来一个Hello VU

15:37.500 --> 15:38.780
显示出来了吗 这个没问题

15:39.900 --> 15:44.940
这是跟这个话就不就冲突了吗 它不是说每一个组件都有Render函数吗 那现在这里有没有呢

15:45.340 --> 15:45.820
并没有

15:46.460 --> 15:50.060
那怎么来理解这个东西呢 它是这样子啊 我在 记得我在那个

15:50.540 --> 15:54.460
VU的工艺科里边也讲到了啊 我忘了我讲没讲到啊 应该是讲到了的

15:55.420 --> 15:55.740
嗯

15:56.460 --> 15:57.340
它怎么回事呢

15:57.900 --> 16:03.500
VU它在里边 如果说你没有配置Render函数 它有一套处理方案

16:06.780 --> 16:10.620
没有Render 找什么呢 它会找template

16:11.660 --> 16:12.620
它会找这个配置

16:13.500 --> 16:16.700
啊 如果说你现在有没有Render 没有 那么它会找这个配置

16:17.260 --> 16:17.660
template

16:18.540 --> 16:21.580
啊 那么如果说没有template呢

16:22.540 --> 16:24.140
没有template

16:25.420 --> 16:27.740
它就会找什么 找那个EL

16:29.020 --> 16:30.540
现在有没有EL配置

16:30.780 --> 16:33.100
有 对吧 如果说你言EL也没有的话 它就完蛋了

16:34.140 --> 16:35.420
那你少的看不见了

16:35.660 --> 16:36.940
就看到一个原始的结构

16:38.220 --> 16:43.340
那如果说它找到这个EL 它会怎么样呢 它会把这个EL的outer in

16:43.580 --> 16:46.140
outer 80秒 是不是 outer 80秒

16:46.940 --> 16:52.600
我们这里看一下啊 我们这个EL是相当于是用一个IT选择器

16:52.600 --> 16:57.720
IT选择器 是不是选择了它 对不对 那么说可以通过这个IT选择器拿到这个DIV

16:58.280 --> 17:00.280
Documents,Curry,Selector

17:00.840 --> 17:03.480
ID选择器 你看 这个ID选择器是从这里传过来的

17:03.880 --> 17:06.200
给它配置一个ID选择器 找ID为IP的DIV

17:06.680 --> 17:09.000
那么它就会用这个ID选择器拿到这个DIV

17:09.240 --> 17:10.280
你看 是不是拿到了

17:10.760 --> 17:13.880
把这个DIV的outer 80秒

17:14.360 --> 17:15.640
所以就这个东西

17:16.280 --> 17:19.480
它就会把这个东西做为template

17:19.720 --> 17:22.040
你不是没有template是吗 那我就找这个EL

17:22.360 --> 17:25.240
这个EL的outer 80秒 它就把它做为template

17:25.480 --> 17:28.440
那现在不就有了吗 对不对 好 有了template

17:28.440 --> 17:32.200
template是一个啥呀 做一个制服串啊 你看这个玩意不就是一个制服串吗

17:33.480 --> 17:36.840
它不是动物 也不是我们的训练动物 它啥都不是 它就是一个制服串

17:37.240 --> 17:40.280
接下来它会做一件事啊 把这个制服串编译

17:42.280 --> 17:44.120
编译template

17:44.360 --> 17:45.480
把它编译成什么

17:46.440 --> 17:47.080
编成

17:48.120 --> 17:48.600
一个

17:52.760 --> 17:53.640
不能没有

17:53.880 --> 17:56.040
每一个组件必须要有Render函数

17:56.280 --> 17:58.120
没有这个Render函数 它就不知道要宣传啥

17:58.920 --> 18:01.400
知道那意思吧 没有的话 它就会找template

18:01.640 --> 18:03.000
没有template它就找EL

18:03.240 --> 18:05.560
总之它最终要得到这个Render

18:05.560 --> 18:07.240
那有template呢 我们比方说啊

18:07.560 --> 18:10.120
我们这里 假设我们写上这么一个template

18:12.040 --> 18:14.760
有template的时候呢 它就不会去找这个东西了

18:15.000 --> 18:15.960
它就不会去找它了

18:16.280 --> 18:18.040
那么它就会直接使用template

18:18.040 --> 18:20.120
比方说我们这里呢 就随便写一个啊

18:20.680 --> 18:21.720
呃有EL吧

18:22.120 --> 18:22.760
这个EL

18:23.320 --> 18:24.360
呃 再来个Li

18:26.440 --> 18:28.200
Li里面要显示这个标题

18:29.560 --> 18:31.560
template就是一个制服串

18:31.560 --> 18:34.040
你看它有template 它找了一个Render 没有没有

18:34.040 --> 18:35.480
那么它就会找template

18:35.480 --> 18:36.760
template找到没找到了

18:36.760 --> 18:39.240
它会把这个template呢编译成为Render

18:40.600 --> 18:41.720
啊 你看是不是可以了

18:43.080 --> 18:44.760
好 那么接下来综点来了

18:45.320 --> 18:45.880
水滴

18:47.080 --> 18:49.000
那如果说我有Render呢

18:49.160 --> 18:51.560
就是你没有Render 它就会从这些地方

18:51.960 --> 18:53.400
去给我们生成一个Render

18:53.640 --> 18:55.480
那如果说你有Render函数呢

18:56.680 --> 18:58.680
它就认Render函数 其他都不认了

18:58.920 --> 19:00.120
就认这个Render函数

19:01.160 --> 19:03.320
那么这个Render函数是在干嘛的呢

19:03.720 --> 19:07.720
每一个Render函数 它都会返回一个虚拟动物数

19:08.360 --> 19:10.360
好 接下来我们把这一点理解清楚啊

19:10.920 --> 19:13.880
也就是说我们的虚拟动物在哪里创建的

19:14.040 --> 19:15.480
就在这个Render函数里边

19:15.480 --> 19:16.920
Render函数的作用就是

19:17.240 --> 19:20.200
目标就是创建虚拟动物

19:20.760 --> 19:21.400
什么意思呢

19:21.800 --> 19:26.200
就是表示这个组建到底要显示啥

19:27.160 --> 19:28.200
这就是Render的目标

19:29.000 --> 19:31.160
它怎么来描述这个组建到底要显示啥

19:31.480 --> 19:33.160
就是靠虚拟动物来显示

19:34.600 --> 19:36.200
那它怎么来生成虚拟动物呢

19:36.680 --> 19:39.080
我们刚才不能这样子做啊

19:39.400 --> 19:41.000
你不能再像刚才那样子啊

19:41.000 --> 19:43.480
用这种方式这样子方式太麻烦了啊

19:43.720 --> 19:45.800
也其实也不是说不可以 只是太麻烦了

19:46.520 --> 19:47.880
那么最好的用什么方式呢

19:48.840 --> 19:51.000
是这里边它会给你传一个函数进来

19:51.240 --> 19:53.160
这个函数我们通常用A起来表示啊

19:53.560 --> 19:55.320
叫hybrid 它表示抽象的啊

19:55.320 --> 19:57.560
抽象的一个动物数

19:58.120 --> 19:59.720
那么这里也可以换一个名字

19:59.720 --> 20:01.160
叫craze element也可以啊

20:01.160 --> 20:02.040
随便你换什么名字

20:02.040 --> 20:03.240
它只是一个形容差而已

20:03.400 --> 20:04.120
我们就用A起吧

20:04.760 --> 20:05.960
这是一个函数啊注意

20:06.520 --> 20:08.200
A起是一个函数

20:09.320 --> 20:12.440
专门用于创建虚拟动

20:12.840 --> 20:13.800
现在我们来看一下啊

20:14.120 --> 20:15.560
有了Render函数过后

20:15.560 --> 20:16.840
这些东西还有用吗

20:16.840 --> 20:17.560
像这个E

20:17.880 --> 20:19.720
EL里面的Alt-A 天表有用啊

20:19.720 --> 20:21.080
Temperate是有用啊都没用了

20:21.560 --> 20:22.840
原来说现在Render我啥都不写

20:23.400 --> 20:24.760
我们这里就输出一个Render

20:24.760 --> 20:25.320
你看一下

20:26.200 --> 20:26.680
Alt-N

20:27.480 --> 20:28.440
是不是就运行了Render

20:28.440 --> 20:29.480
因为它说啥都没有

20:29.800 --> 20:30.440
为什么呢

20:30.440 --> 20:31.960
因为它要显

20:31.960 --> 20:33.640
这个组件到底要显示啥

20:34.200 --> 20:36.200
它是取决于这个Render函数

20:36.200 --> 20:37.000
返回的东西

20:37.480 --> 20:38.040
返回啥

20:38.040 --> 20:39.000
返回一个虚拟动物

20:39.560 --> 20:40.920
那如果说你没有返回任何东西

20:40.920 --> 20:41.800
它就不知道要显示啥

20:42.440 --> 20:42.840
对吧

20:43.000 --> 20:44.440
现在有了Render 它就会运行Render

20:44.760 --> 20:45.880
那么现在我们就要问题

20:45.880 --> 20:46.840
我们现在就是

20:46.840 --> 20:48.920
要把这个界面重新给它构建出来

20:49.880 --> 20:51.800
或者是这个界面重新给它构建出来

20:51.800 --> 20:53.400
我们现在就用Render函数来实现

20:53.400 --> 20:54.200
看怎么实现啊

20:55.400 --> 20:57.240
我们可以利用这个Alt-N函数

20:57.240 --> 20:58.120
来去做一些事

20:58.760 --> 21:00.360
这个Alt-N函数有一些参数啊

21:00.920 --> 21:02.120
它实际上有三个参数

21:02.120 --> 21:03.080
我们一般来说

21:03.400 --> 21:04.280
参数都会用到

21:04.280 --> 21:05.000
一般都会用到

21:06.200 --> 21:07.560
第一个参数表示

21:08.040 --> 21:09.240
虚拟动物的名字

21:10.280 --> 21:11.480
好我们这里给它取个名字

21:12.040 --> 21:13.000
虚拟动物什么名字呢

21:13.000 --> 21:14.520
最开始上面是个DIV

21:14.520 --> 21:14.840
对不对

21:15.720 --> 21:16.200
DIV

21:20.180 --> 21:20.660
后边呢

21:21.140 --> 21:22.260
第二个参数呢是

21:22.260 --> 21:23.380
它里边的一些

21:23.380 --> 21:24.980
针对这个虚拟动物的一些配置

21:24.980 --> 21:26.980
比方说它有没有什么属性啊

21:26.980 --> 21:28.260
有没有什么时间啊

21:28.260 --> 21:30.260
有没有什么样式啊等等等等啊

21:30.260 --> 21:31.540
它的配置呢是一个对象

21:33.140 --> 21:34.420
我们这里打个注释啊

21:34.420 --> 21:37.620
就是虚拟动物的一些配置

21:38.580 --> 21:39.780
那么这里边有没有配置啊

21:39.780 --> 21:41.060
它有一个ID属性对吧

21:41.060 --> 21:42.340
那么ID属性我们怎么配置呢

21:42.420 --> 21:43.780
我们可以通过ATTRS

21:44.340 --> 21:46.180
你看跟我们之前写的那个数字一样的

21:46.180 --> 21:47.060
就IT属性

21:47.060 --> 21:48.260
它里边有哪些属性

21:48.900 --> 21:49.540
哪些属性呢

21:49.540 --> 21:50.340
有一个ID

21:50.340 --> 21:51.620
ID的值呢是i

21:52.980 --> 21:54.340
你看是不是描述出来那个虚拟动物

21:55.540 --> 21:57.060
啊我们来得到得到一下啊

21:57.060 --> 21:57.700
这个A7还说

21:57.700 --> 21:58.820
它就会反而回一个虚拟动物

21:59.460 --> 22:00.580
我们用微动物来表示

22:01.460 --> 22:02.420
输出一下这个微动物

22:03.780 --> 22:04.340
好

22:04.340 --> 22:05.060
保存啊

22:05.060 --> 22:05.380
你看

22:07.380 --> 22:08.580
是不是得到一个对象啊

22:08.580 --> 22:09.940
这个对象它不是动物对象

22:09.940 --> 22:10.980
它是一个虚拟动物对象

22:10.980 --> 22:12.580
也就是一个普通的介事对象

22:12.580 --> 22:13.460
它的属性并不多

22:14.420 --> 22:15.140
它属性多吗

22:16.180 --> 22:16.900
你们觉得多吗

22:19.860 --> 22:21.060
哎跟那个snapdome

22:21.060 --> 22:22.660
其实snapdome呢就是

22:22.660 --> 22:24.820
给了伍佑做了一个启发

22:24.820 --> 22:28.180
它就是用了那种思想来做的

22:29.140 --> 22:31.460
它里边本身并没有用那个snapdome

22:31.460 --> 22:33.060
但是能用到它的思想来做的

22:33.700 --> 22:34.820
它属性多吗

22:34.820 --> 22:36.980
你可能觉得它属性好像很多的样子

22:36.980 --> 22:38.100
但是你仔细看一下

22:38.100 --> 22:39.060
这是个虚拟动物

22:39.060 --> 22:40.260
然后我们来看一下真实动物

22:41.940 --> 22:44.820
我们用console dr吧

22:44.820 --> 22:46.100
document body

22:46.100 --> 22:47.380
你看一下真实动物的属性

22:47.380 --> 22:52.170
这样一对比起来是不是舒服多了

22:52.170 --> 22:53.690
然后再看我们的虚拟动物

22:53.690 --> 22:54.970
也是不是亲切多了

22:54.970 --> 22:56.570
它属性其实并不多

22:56.570 --> 22:58.170
我们来看一下关键的属性吧

23:00.090 --> 23:00.650
type

23:00.650 --> 23:02.650
是我们的标签名字

23:02.650 --> 23:04.170
然后data

23:04.170 --> 23:06.250
data里面就是我们给它的一些配置

23:06.250 --> 23:07.770
其中一个配置叫attrs

23:07.770 --> 23:10.090
所以描述我们id有app

23:10.090 --> 23:10.970
对吧

23:10.970 --> 23:13.130
好那么接下来我们问问大家有问题

23:15.750 --> 23:17.430
我现在生成了一个虚拟动物

23:17.430 --> 23:19.830
你觉得我界面上会不会有这个div

23:22.330 --> 23:24.010
我的界面上会不会有这个div

23:26.010 --> 23:26.410
有没有

23:29.750 --> 23:30.390
没有

23:30.390 --> 23:33.510
它只是一个js对象

23:33.510 --> 23:33.670
对吧

23:33.670 --> 23:35.270
它只是一个js对象

23:35.270 --> 23:36.550
跟我们界面上有啥关系

23:36.550 --> 23:37.430
我们见证啥都没有

23:38.070 --> 23:38.790
对吧

23:38.790 --> 23:39.670
它只是个js对象

23:39.670 --> 23:41.190
用来描述我们界面的

23:41.750 --> 23:42.790
意思是吧

23:42.790 --> 23:44.310
你只有怎么样才能有呢

23:44.870 --> 23:46.310
你是不是得把它返回啊

23:47.430 --> 23:47.750
对不对

23:47.910 --> 23:49.110
你把它返回

23:49.110 --> 23:50.150
返回了过后

23:50.150 --> 23:50.950
维又就知道了

23:50.950 --> 23:52.230
维又一掉了那个函数

23:52.230 --> 23:53.670
你给我返回了一个虚拟动物

23:53.670 --> 23:54.230
哦

23:54.230 --> 23:54.710
它就知道了

23:54.710 --> 23:56.710
原来你是想选择一个div

23:57.590 --> 23:59.030
你通过一个对象来描述

23:59.030 --> 24:00.550
现在这个a显然数没有什么特别的

24:00.550 --> 24:02.230
它就是帮我们生成一个对象而已

24:02.230 --> 24:02.470
啊

24:03.110 --> 24:04.710
原来你想选择一个div

24:04.710 --> 24:05.590
它里面有一个属性

24:05.590 --> 24:06.550
id为app

24:06.550 --> 24:07.350
它就知道了

24:07.350 --> 24:07.830
于是呢

24:07.830 --> 24:10.710
它最终会把它生成真实动物

24:10.710 --> 24:11.670
你看现在

24:11.670 --> 24:12.390
在看我们的animate

24:12.390 --> 24:12.870
只是有了

24:13.670 --> 24:14.790
这是真实的动物

24:15.670 --> 24:16.630
这是虚拟动物

24:17.270 --> 24:18.790
以为发现真实的动物

24:18.790 --> 24:20.550
是根据我们的虚拟动物

24:20.550 --> 24:21.270
宣传出来的

24:21.990 --> 24:24.230
这就是维又的操作过程

24:24.230 --> 24:25.430
当然这个过程的整个过程

24:25.430 --> 24:27.430
我们后边还会有更加详细的讲解

24:27.430 --> 24:29.110
今天晚上我们专门讨论虚拟动物

24:29.990 --> 24:30.230
好

24:30.230 --> 24:31.590
那么现在这个div有了

24:31.590 --> 24:33.110
我们今天要继续往里面写

24:33.110 --> 24:34.150
你看它第一个参数

24:34.710 --> 24:36.230
第二个参数是一个对象

24:36.230 --> 24:37.430
然后还有第三个参数呢

24:37.430 --> 24:39.270
换到不说还有第三个参数吗

24:39.270 --> 24:40.710
第三个参数是一个数组

24:41.590 --> 24:43.510
第三个参数内存其实蛮多的

24:43.510 --> 24:45.590
我们这里单讨论一下它的数组

24:45.670 --> 24:46.870
什么意思呢

24:46.870 --> 24:50.230
表示这个元数它里边有了那些东西

24:50.230 --> 24:52.310
你不是要用对象描述清楚吗

24:52.310 --> 24:53.430
你光是描述个div

24:53.430 --> 24:54.310
它里边的指援数呢

24:54.310 --> 24:55.270
你怎么描述呢

24:55.270 --> 24:55.430
对吧

24:55.430 --> 24:57.510
你可以通过这个第三个参数来描述

24:57.510 --> 24:58.870
把第三个参数表示指援数

24:59.990 --> 25:00.550
打入说

25:01.430 --> 25:02.230
表示指援数

25:03.830 --> 25:04.390
第一个参数

25:04.390 --> 25:04.950
第二个参数

25:04.950 --> 25:05.910
第三个参数

25:05.910 --> 25:06.150
好

25:06.150 --> 25:07.190
指援数有几个呢

25:07.190 --> 25:08.230
我们这里只有一个

25:08.230 --> 25:08.790
对吧

25:08.790 --> 25:09.830
那么这一个是什么

25:11.940 --> 25:13.940
这一个东西在数组里面

25:13.940 --> 25:14.580
应该对应啥呀

25:15.300 --> 25:17.380
还是一样跟我们之前分析的事一样的

25:17.380 --> 25:18.420
它也是一个对象

25:19.060 --> 25:20.180
这个对象你可以自己写

25:20.180 --> 25:21.700
但是你自己写非常麻烦

25:21.700 --> 25:24.500
你可以建议它通过这个h函数来产生

25:24.500 --> 25:24.980
对吧

25:24.980 --> 25:25.940
它也是一个对象

25:26.820 --> 25:28.260
它是什么东西呢

25:28.260 --> 25:30.180
它里边元数的名字是he

25:30.900 --> 25:31.540
对吧

25:31.540 --> 25:34.340
所以div里边有一个指援数

25:34.340 --> 25:35.540
元数的名字是he

25:35.540 --> 25:36.260
它有属性吗

25:36.260 --> 25:36.740
没有属性

25:36.740 --> 25:37.300
有样式吗

25:37.300 --> 25:37.780
没有样式

25:37.780 --> 25:38.260
有事件吧

25:38.260 --> 25:38.820
没有事件

25:40.100 --> 25:40.740
好

25:40.740 --> 25:42.340
然后这个he里边

25:42.340 --> 25:43.540
那么你说第二个参数

25:43.540 --> 25:44.820
我可以写个空对象

25:44.820 --> 25:45.860
但是也可以补写

25:45.860 --> 25:47.380
它可以省给第二个参数的

25:47.380 --> 25:48.180
它就没有配置

25:49.220 --> 25:50.900
那么这个he有指援数吗

25:51.860 --> 25:52.900
he有指援数吗

25:52.900 --> 25:53.700
有

25:53.700 --> 25:55.780
he的指援数是一个文本

25:55.780 --> 25:56.100
对吧

25:56.100 --> 25:56.660
是一个台头

25:56.660 --> 25:57.220
这个文本

25:57.860 --> 25:58.100
好了

25:58.100 --> 25:59.140
那么这个文本呢

25:59.140 --> 26:00.420
你可以把第三个参数

26:00.420 --> 26:01.940
直接写成一个字部串

26:01.940 --> 26:02.740
可不可以可以

26:02.740 --> 26:04.260
比方说我们这个随便写个

26:05.300 --> 26:07.220
现在我来给大家告诉大家什么意思

26:07.220 --> 26:08.020
有一个div

26:08.020 --> 26:09.540
它有一个id属性为arge

26:09.540 --> 26:10.980
然后它有一个有些指援数

26:10.980 --> 26:12.260
只有一个指援数

26:12.420 --> 26:14.180
这个指援数是he

26:14.180 --> 26:15.700
he也有一个指援数

26:15.700 --> 26:17.220
这个指援数是一个字部串

26:17.220 --> 26:18.580
这个字部串在5u里边

26:18.580 --> 26:20.580
它注意中会把它变成一个对象

26:20.580 --> 26:22.100
以后我们可以看一下

26:22.100 --> 26:22.260
好

26:22.260 --> 26:22.980
随便我们看效果

26:24.340 --> 26:25.300
出来没

26:25.300 --> 26:26.100
出不出来了

26:26.100 --> 26:27.380
div id

26:27.380 --> 26:28.660
he里边有一个字部串

26:29.460 --> 26:30.980
然后我们来看一下生成的vload

26:32.580 --> 26:33.300
输出一下

26:33.300 --> 26:34.020
生成的vload

26:37.260 --> 26:37.820
你看

26:37.820 --> 26:38.860
这是我们的div

26:39.500 --> 26:40.860
太狗div

26:40.860 --> 26:42.300
div里边有一些child

26:42.300 --> 26:42.700
看到没

26:43.660 --> 26:44.860
child里边又是个对象

26:44.860 --> 26:45.100
对吧

26:45.100 --> 26:46.700
只有一个只有一个指援数

26:46.700 --> 26:47.260
he

26:47.820 --> 26:48.300
看到没

26:48.300 --> 26:48.860
he

26:51.210 --> 26:51.610
太狗

26:51.610 --> 26:52.330
he

26:52.330 --> 26:52.730
然后呢

26:52.730 --> 26:53.370
我发现

26:53.370 --> 26:54.090
虚拟动物里边

26:54.090 --> 26:55.050
还有一些特殊的所向

26:55.050 --> 26:56.010
我们以后再看

26:56.010 --> 26:57.610
he里边有一个指援数

26:57.610 --> 26:58.730
我们之前给它写了啥

26:58.730 --> 27:00.570
给它给它写了一个是字无错对吧

27:00.570 --> 27:02.010
结果它变成了啥呀

27:02.010 --> 27:02.890
又变成了个对象

27:04.490 --> 27:04.970
看到没

27:04.970 --> 27:05.930
5u它的内部就是个

27:05.930 --> 27:06.810
a写还说的好处

27:06.810 --> 27:08.890
避免我们自己去创建对象很麻烦

27:08.890 --> 27:10.810
它会把这个字部串变成一个对象

27:10.810 --> 27:11.930
这对象是啥呀

27:11.930 --> 27:12.570
这对象

27:12.570 --> 27:13.450
太狗

27:13.610 --> 27:14.650
是一个文笨节点

27:14.650 --> 27:15.450
是个文笨节点

27:15.450 --> 27:15.690
一看

27:15.690 --> 27:16.170
这个太狗

27:16.170 --> 27:16.890
文笨节点

27:17.530 --> 27:19.050
所以它的太狗属性是undefined

27:19.050 --> 27:19.850
看到没

27:19.850 --> 27:21.130
它只有个太狗属性

27:21.130 --> 27:22.490
它里边有一些文笨

27:22.490 --> 27:23.610
这是它的虚拟动物结构

27:25.290 --> 27:26.090
能理解这个意思吧

27:26.890 --> 27:28.010
这就是整个过程

27:28.810 --> 27:28.970
好

27:28.970 --> 27:30.650
那么我们把这个虚拟节点

27:30.650 --> 27:31.530
它的根节点

27:31.530 --> 27:32.330
返回给谁

27:32.330 --> 27:33.210
返回给5u

27:33.210 --> 27:34.330
那么5u就知道了

27:34.330 --> 27:35.210
拿到这个根节点是不是

27:35.210 --> 27:36.250
就可以拿到它的虚拟准

27:36.250 --> 27:37.770
虚拟准里边还有虚拟准

27:37.770 --> 27:39.450
5u就可以拿到这个组件

27:39.450 --> 27:40.890
所有需要渲染的东西

27:40.890 --> 27:41.850
它就知道了

27:41.850 --> 27:42.810
原来你这个组件

27:42.810 --> 27:44.170
要宣传这么一些玩意

27:44.170 --> 27:45.370
那我就宣传变

27:45.370 --> 27:46.810
当然这个宣传过程还是复杂

27:46.810 --> 27:48.410
我们之后会讲解

27:48.410 --> 27:49.530
我就宣传变

27:49.530 --> 27:51.290
最终就不会生成真实动物

27:51.290 --> 27:52.010
放在这儿

27:53.370 --> 27:53.930
好

27:53.930 --> 27:55.930
那么这是一个组件的情况

27:57.130 --> 27:58.330
这是一个组件

27:58.330 --> 27:59.690
我们不说每一个组件

27:59.690 --> 28:00.890
都有人的函数吗

28:02.090 --> 28:03.450
如果说我们有多个组件

28:03.450 --> 28:04.890
因为我们知道在5u里边

28:04.890 --> 28:06.170
组件里边可以套组件

28:06.170 --> 28:07.130
组件里边可以套组件

28:07.130 --> 28:07.770
对吧

28:07.770 --> 28:09.530
我们如果说有多个组件

28:09.530 --> 28:11.290
它就会生成多个虚拟动物

28:11.450 --> 28:12.890
比方说我这里面有一个组件数

28:12.890 --> 28:14.330
这是我们的根组件

28:14.330 --> 28:16.330
根组件里面有两个植树件

28:16.330 --> 28:18.970
这个植树件又有两个植树件

28:18.970 --> 28:20.970
每一个组件数都有人的函数

28:20.970 --> 28:22.170
比方我在宣传它的时候

28:22.170 --> 28:22.650
我就知道了

28:22.650 --> 28:25.610
我要宣传一个虚拟动物数

28:25.610 --> 28:26.410
然后就根节点

28:26.410 --> 28:28.730
所以拿到所有的整个数了

28:28.730 --> 28:30.730
我其中一个节点

28:30.730 --> 28:32.810
我会发现这个节点

28:32.810 --> 28:35.130
比方说我这个节点是一个组件

28:35.130 --> 28:36.330
那么这个组件对应它

28:36.330 --> 28:38.010
它就会去找这个组件

28:38.010 --> 28:39.610
运行这个组件的Render

28:39.770 --> 28:41.210
所以又拿到一颗虚拟动物数

28:42.410 --> 28:43.050
对吧

28:43.050 --> 28:44.730
我这里有一个组件

28:44.730 --> 28:46.010
这个组件可能是它

28:47.610 --> 28:48.570
那么它也有人的

28:48.570 --> 28:49.850
它就会拿到这个虚拟动物数

28:49.850 --> 28:51.130
所以每一个组件

28:52.010 --> 28:52.970
不是说我们整个五有

28:52.970 --> 28:54.090
它只有一颗虚拟动物数

28:54.090 --> 28:55.530
它是每一个组件

28:55.530 --> 28:56.650
都有一个虚拟动物数

28:56.650 --> 28:58.170
因为它每一个组件都有一个Render

28:58.970 --> 29:00.010
懂我的意思吧

29:00.010 --> 29:02.010
所以它就会生成很多很多的虚拟动物数

29:02.730 --> 29:04.570
所以我们平时研究虚拟动物数

29:04.570 --> 29:06.490
就在一个组件里面研究就OK了

29:07.770 --> 29:09.530
这是什么是虚拟动物数

29:09.530 --> 29:10.970
看这一块大家有什么问题

29:13.930 --> 29:15.290
它这里边做了个判断

29:15.290 --> 29:16.250
如果说你不是对象

29:16.250 --> 29:17.050
那就是文明今天

29:19.290 --> 29:20.650
紫园数不是第三个参数吗

29:20.650 --> 29:22.490
实际上它的参数是比较灵活的

29:22.490 --> 29:24.250
它里边会做了大量的判断

29:24.250 --> 29:26.170
就是如果说你传两个参数

29:26.170 --> 29:28.810
那么我们怎么去分析这个参数结构

29:28.810 --> 29:29.610
你传三个参数

29:29.610 --> 29:30.490
我也怎么去分析

29:30.490 --> 29:31.610
我这里传两个参数

29:31.610 --> 29:33.130
它就认为你是省略掉了

29:33.130 --> 29:33.850
中间的配置

29:35.050 --> 29:36.250
而且第二个参数

29:36.250 --> 29:37.210
传的是一个字不串

29:37.210 --> 29:37.690
对吧

29:37.770 --> 29:38.730
那么它就认为

29:38.730 --> 29:40.170
你是传的直结点

29:40.170 --> 29:41.210
中间的配置你省略掉

29:41.210 --> 29:42.170
它里边做了判断的

29:43.370 --> 29:44.330
有什么问题吧这一块

29:44.330 --> 29:45.210
看还有什么问题

29:48.980 --> 29:49.780
好 没有问题

29:51.220 --> 29:51.860
咱们继续了

29:52.660 --> 29:53.540
那么现在我们知道了

29:53.540 --> 29:54.420
什么叫虚拟动物

29:54.420 --> 29:56.020
我们现在进一步了解一下吧

29:56.020 --> 29:56.820
我们来看一下之前

29:56.820 --> 29:58.340
我们打印出来的一个虚拟动物结构

29:58.980 --> 29:59.860
找一些关键属性

30:00.740 --> 30:02.100
其中有一个属性叫做Aeon

30:02.900 --> 30:04.420
这个属性的全面叫做Element

30:05.220 --> 30:06.260
它表示啥意思呢

30:06.260 --> 30:08.020
因为我们知道每一个虚拟动物

30:08.180 --> 30:09.780
它只是一个普通结实对象而已

30:10.580 --> 30:12.980
它并不能代表界面上真正显示的东西

30:12.980 --> 30:13.700
真正要显示出来

30:13.700 --> 30:14.820
必须要真实动

30:14.820 --> 30:15.460
对吧

30:15.460 --> 30:16.820
所以它每一个结实对象

30:16.820 --> 30:17.940
它里边有个对应

30:17.940 --> 30:18.900
就是每一个虚拟动物

30:18.900 --> 30:20.820
它会对应到一个真实的动物

30:21.780 --> 30:23.060
它通过什么属性对应呢

30:23.060 --> 30:23.780
它通过这个Aeon

30:24.820 --> 30:25.460
你看

30:25.460 --> 30:27.460
这个Aeon属性就对应到真实动物了

30:27.460 --> 30:28.020
DIV

30:30.020 --> 30:30.420
你看

30:30.420 --> 30:30.900
我指着它

30:30.900 --> 30:31.700
你看界面上

30:31.700 --> 30:32.740
是不是找到这个DIV了

30:33.380 --> 30:33.780
对不对

30:34.660 --> 30:36.340
然后我们再看里边的Children

30:36.500 --> 30:38.100
这里边是一个什么Ace元数

30:39.460 --> 30:40.260
Ace元数

30:41.060 --> 30:42.500
是不是这里有个M属性

30:42.500 --> 30:43.940
这个M属性是不是Ace

30:45.140 --> 30:45.460
看到没

30:46.020 --> 30:47.220
关于这个Aeon属性

30:47.220 --> 30:48.900
Element这个属性到底是哪来的

30:48.900 --> 30:50.100
它怎么生成出来的

30:50.980 --> 30:52.820
我们应该是明天还是后天吧

30:52.820 --> 30:53.780
本来有一天的课

30:53.780 --> 30:55.140
我会给大家详细讲解

30:55.140 --> 30:56.420
这边的过程还蛮复杂的

30:57.460 --> 30:57.620
好

30:57.620 --> 30:58.260
然后最后

30:58.260 --> 30:59.780
Ace里面不是有指节点吗

31:01.700 --> 31:02.100
你看

31:02.100 --> 31:02.900
指节点

31:02.900 --> 31:04.420
它不是一个元数

31:04.420 --> 31:05.540
指节点

31:05.540 --> 31:05.940
切准

31:07.300 --> 31:08.420
它不是一个元数

31:08.420 --> 31:09.460
它还可以为Undefine的

31:10.500 --> 31:11.380
它还可以为这个

31:12.260 --> 31:13.140
然后呢

31:13.140 --> 31:13.780
它的Aome呢

31:13.780 --> 31:15.140
就是一个文本节点

31:16.020 --> 31:17.140
它是个文本节点

31:18.500 --> 31:20.740
刚才的我这里好像没有写得很完善

31:20.740 --> 31:22.820
因为这里边我们之前不是要显示

31:22.820 --> 31:23.380
Title嘛

31:23.380 --> 31:23.940
对不对

31:23.940 --> 31:24.180
那

31:25.460 --> 31:26.580
大家觉得

31:26.580 --> 31:28.260
你们觉得我这里这样子写行吗

31:31.500 --> 31:32.460
因为觉得这样子写

31:32.460 --> 31:33.820
能不能把这个Title显示出来

31:40.650 --> 31:41.050
可以吗

31:46.580 --> 31:47.220
不行啊

31:47.220 --> 31:47.780
这样着实

31:47.780 --> 31:48.260
不行的

31:48.980 --> 31:50.820
因为你到了虚拟动物这一步的话

31:50.820 --> 31:52.420
你要老老实实地该显示啥

31:52.420 --> 31:54.180
你以后自己就一句声称

31:54.180 --> 31:56.180
你不能去写这个模办代码

31:56.180 --> 31:57.860
这个玩意叫做模办代码

31:59.140 --> 32:00.980
我刚刚看到这里应该说的

32:00.980 --> 32:01.620
还没有说

32:01.620 --> 32:03.220
以后我会详细的讲解

32:03.220 --> 32:04.100
模办科目的

32:04.660 --> 32:06.020
虚拟动物到底有什么关系

32:06.020 --> 32:07.220
以后我会详细的说

32:07.220 --> 32:08.580
所以这里边不能这样写

32:08.580 --> 32:09.220
你这样写的话

32:09.220 --> 32:10.100
它就会显示这个东西

32:10.820 --> 32:11.940
它不会理解的

32:11.940 --> 32:13.300
因此你这里要咋写呢

32:13.300 --> 32:15.140
你要去动态读这个属性

32:15.220 --> 32:15.780
怎么读呢

32:15.780 --> 32:17.700
因为我们知道这个Data属性呢

32:17.700 --> 32:18.500
Data里边的东西

32:18.500 --> 32:19.700
它会放到哪呢

32:19.700 --> 32:21.300
放到这个无诱实力里边去

32:22.020 --> 32:23.540
生存这个无诱实力里边去

32:24.500 --> 32:26.820
因此我们可以从这个实力里边去读

32:26.820 --> 32:28.260
怎么来找到这个实力呢

32:28.260 --> 32:28.900
通过Z

32:29.540 --> 32:31.380
Z就找到当前这个实力

32:31.380 --> 32:32.260
当前这个无诱对象

32:33.060 --> 32:34.020
然后里边呢

32:34.020 --> 32:35.060
有个属性就是Title

32:35.940 --> 32:36.980
你把这个东西放这

32:38.500 --> 32:38.980
保存

32:38.980 --> 32:39.220
你看

32:39.940 --> 32:40.580
不就出来了吗

32:41.300 --> 32:42.820
那我们看看虚拟动物里边的东西

32:43.780 --> 32:44.900
A型里边的气候准

32:44.900 --> 32:46.100
你看看这个文凳

32:46.100 --> 32:46.980
文凳就变成了

32:46.980 --> 32:47.380
诶

32:53.940 --> 32:54.500
找错了啊

32:56.740 --> 32:58.420
文凳是不是变成了哈勒比尤了

32:58.420 --> 32:58.820
对吧

32:58.820 --> 32:59.940
要动态的去读

32:59.940 --> 33:02.100
当然你可以在这里去做一些制服刷的拼接

33:02.100 --> 33:04.660
比方说你可以利用的ES6的模板制服刷

33:04.660 --> 33:05.780
在这里去做一些拼接

33:06.740 --> 33:08.020
我要显示标题

33:09.140 --> 33:09.860
然后然后前边

33:13.510 --> 33:14.630
高级帽号

33:14.630 --> 33:15.910
然后后边显示个标题

33:15.910 --> 33:16.790
于是就出来这个东西

33:17.670 --> 33:18.150
都可以

33:19.190 --> 33:21.430
这个玩意儿到底有啥用呢

33:21.430 --> 33:22.470
这个玩意儿

33:22.470 --> 33:24.390
我真的需要学习这个东西吗

33:24.390 --> 33:25.430
看看学电脱了行不行

33:25.430 --> 33:25.510
说

33:27.030 --> 33:28.630
如果说你要做马龙的话

33:28.630 --> 33:29.670
它确实是不需要

33:30.310 --> 33:30.710
但是呢

33:30.710 --> 33:32.550
如果说你要去拿一些高高薪的话

33:32.550 --> 33:33.830
你必须要知道

33:33.830 --> 33:35.510
因为有些场景下

33:35.510 --> 33:36.870
你还非他不可

33:36.870 --> 33:37.590
你没办法

33:38.390 --> 33:39.590
或者是你很难办

33:40.470 --> 33:41.990
我以后就会遇到这样的场景

33:43.110 --> 33:43.350
好

33:43.350 --> 33:43.590
ok

33:43.590 --> 33:44.710
这是咱们的虚拟动物

33:45.670 --> 33:46.310
好

33:46.310 --> 33:46.950
第二个问题

33:47.510 --> 33:48.870
为什么需要虚拟动物

33:49.350 --> 33:49.910
你搞出来的时候

33:49.910 --> 33:50.870
对大脱干嘛

33:51.750 --> 33:52.630
你觉得好玩吗

33:52.630 --> 33:53.990
你觉得是在恶心我们的吗

33:54.870 --> 33:55.910
那么为什么

33:55.910 --> 33:57.670
为什么他要搞这么一个东西

33:57.670 --> 33:58.230
出污染

34:00.470 --> 34:01.190
实际上呢

34:01.190 --> 34:02.550
我们如果说不用框架

34:03.110 --> 34:04.710
就是咱们平时上公开直播课

34:04.710 --> 34:05.750
做一些小的效果

34:05.750 --> 34:06.710
一个轮波图啊

34:06.710 --> 34:08.150
一些小的一些接动项呢

34:08.550 --> 34:09.590
不用框架上

34:09.590 --> 34:11.830
你有必要去搞一个虚拟动物出来吗

34:11.830 --> 34:12.630
没有必要

34:13.590 --> 34:16.150
就是因为我们前端变得复杂了

34:16.150 --> 34:17.750
因为上东西多了

34:18.390 --> 34:20.790
我们用原生的剂也是写写的要吐了

34:21.270 --> 34:22.710
快命都快没了

34:22.710 --> 34:23.510
所谓说呢

34:23.510 --> 34:25.110
有些框架就站出来了

34:25.110 --> 34:25.430
算了

34:25.430 --> 34:25.750
算了

34:25.750 --> 34:26.550
你们别玩了

34:26.550 --> 34:27.510
你还用我吧

34:27.510 --> 34:29.110
我把一些复杂的事情给你做了

34:29.670 --> 34:31.510
你去搞定这些简单的事情

34:31.510 --> 34:32.950
你按照我的方式去做

34:32.950 --> 34:33.670
不要穿上五佑

34:33.670 --> 34:35.030
他又搞了一套开发方式

34:35.030 --> 34:36.550
你按照我的方式去做

34:36.550 --> 34:37.670
就能实现效果

34:37.670 --> 34:38.870
而且做起来很轻松

34:39.670 --> 34:40.790
所以说出现了框架

34:40.790 --> 34:42.070
那么这些框架

34:42.070 --> 34:43.910
那么这些框架在设计的时候

34:43.910 --> 34:45.190
他就要考虑通用性

34:45.190 --> 34:48.390
我不能说只能在一个

34:48.390 --> 34:49.430
比方说学生管理系统里边

34:49.430 --> 34:50.950
我能用这个框架

34:50.950 --> 34:51.910
到了一个商城里边

34:51.910 --> 34:52.790
我就不能用了

34:52.790 --> 34:53.430
那不行的

34:53.430 --> 34:55.310
他必须要任何项目都能用

34:55.310 --> 34:56.710
他要考虑通用性

34:56.710 --> 34:57.950
所以说他要根据

34:57.950 --> 34:59.950
框架的设计的一些原则

34:59.950 --> 35:01.310
把这个框架设计出来

35:01.310 --> 35:03.790
那么这些东西我们不去讨论了

35:03.790 --> 35:04.630
我先去告诉你

35:04.630 --> 35:06.630
五佑在设计这个框架的时候

35:06.630 --> 35:08.350
他就是这么设计的

35:08.350 --> 35:10.950
他就设计了这么一个认诞函书

35:10.950 --> 35:12.430
那么他就要考虑了

35:12.430 --> 35:14.910
这个认诞函书我有两个选择

35:14.910 --> 35:17.630
第一个选择了就是

35:17.630 --> 35:19.270
直接干掉一个虚的动物的概念

35:19.270 --> 35:19.990
不要虚的动物的

35:19.990 --> 35:21.230
你全部过来真实动物

35:21.230 --> 35:22.830
因为真实动物他也可以生成一棵树

35:22.830 --> 35:23.430
对吧

35:23.430 --> 35:25.030
也就是我真实动物应该是怎么样子的

35:25.030 --> 35:28.470
应该是Document, Create, Element

35:28.470 --> 35:29.950
DIV

35:29.950 --> 35:31.430
是不是有生成一个DIV

35:31.430 --> 35:32.270
然后呢

35:32.270 --> 35:33.470
DIV里边

35:33.470 --> 35:34.430
给他设置ID

35:34.430 --> 35:34.910
为APP

35:34.910 --> 35:36.030
是不是可以

35:36.030 --> 35:37.510
告诉大家熟悉的代码环节了

35:37.510 --> 35:38.110
对吧

35:38.110 --> 35:39.670
然后呢

35:39.670 --> 35:41.710
我给这个DIV加一些指援树

35:41.710 --> 35:43.190
又生成一个SE元树

35:43.190 --> 35:45.870
Praise, Element

35:45.870 --> 35:46.550
SE的

35:46.550 --> 35:48.550
我不写了啊

35:48.550 --> 35:50.590
大概就是这么一个意思

35:50.590 --> 35:51.390
我有两个选择

35:51.390 --> 35:52.070
第一个选择就是

35:52.070 --> 35:53.110
我直接使用真实动物

35:53.110 --> 35:56.340
我不要指虚的动物

35:56.340 --> 35:58.180
然后第二个选择就是

35:58.180 --> 35:59.740
我使用虚的动物

35:59.740 --> 36:00.660
给他办回

36:00.660 --> 36:01.820
那么我们首先看

36:01.820 --> 36:02.900
比较容易想到了

36:02.900 --> 36:04.700
第一个选择到底行不行

36:04.700 --> 36:06.300
如果说我选择了他

36:06.300 --> 36:07.660
那就意味着什么呢

36:07.660 --> 36:10.420
就意味着我在运行Render函书的时候

36:10.420 --> 36:14.100
我要生成大量的真实动物

36:14.100 --> 36:17.100
这种情况在第一次加载的时候

36:17.100 --> 36:18.740
没有任何问题

36:18.740 --> 36:19.900
因为你第一次加载的时候

36:19.900 --> 36:21.700
你总归都要生成真实动物的

36:21.700 --> 36:23.820
哪怕你给他的是虚的动物

36:23.820 --> 36:24.940
最终都要生成真实动物

36:24.940 --> 36:26.460
所以真实动物的生成过程

36:26.460 --> 36:27.820
是避免不了的

36:27.820 --> 36:28.060
对吧

36:28.060 --> 36:29.340
你是无论你是个框架怎么玩

36:29.340 --> 36:30.540
最终必须要有真实动物

36:30.540 --> 36:32.500
我才能显示啊

36:32.500 --> 36:34.500
所以说第一次加载了

36:34.500 --> 36:35.940
确实这种情况下

36:35.940 --> 36:36.900
更加符合逻辑

36:36.900 --> 36:38.460
更加容易理解

36:38.460 --> 36:40.660
甚至更加快

36:40.660 --> 36:42.220
但是后续可不一样了

36:42.220 --> 36:43.820
因为我们知道这个Render函书

36:43.820 --> 36:46.060
它不是运行一次

36:46.060 --> 36:49.660
它是每一次数据变化都要运行的

36:49.660 --> 36:50.260
你看这里

36:50.260 --> 36:52.020
我们是不是用到这个抬头数据

36:52.020 --> 36:53.740
这个抬头数据一变

36:53.740 --> 36:56.140
我这个Render函书必须要重新运行

36:56.140 --> 36:57.300
不行 我们试一下

36:57.300 --> 36:58.860
我们把新创的这个5U

36:58.860 --> 37:00.500
保存到一个电量里面

37:00.500 --> 37:02.810
别

37:02.810 --> 37:04.730
好看的

37:04.730 --> 37:06.810
现在我用的是直接用Render函书来写的

37:06.810 --> 37:09.050
这是个再把数试掉的

37:09.050 --> 37:10.450
生成一个Render

37:10.450 --> 37:11.610
生成一个虚拟动

37:11.610 --> 37:12.290
虚拟动

37:12.290 --> 37:13.530
再返回虚拟动

37:13.530 --> 37:14.410
然后来看一下

37:14.410 --> 37:16.570
现在我们用VM点抬头

37:16.570 --> 37:17.450
去改它

37:17.450 --> 37:18.810
改这个东西

37:18.810 --> 37:21.450
通过它去改它

37:21.450 --> 37:22.130
能读出来吧

37:22.130 --> 37:22.450
读出来吧

37:22.450 --> 37:22.850
好了

37:22.850 --> 37:23.490
5U

37:23.490 --> 37:25.210
我们去改它

37:25.210 --> 37:25.970
你好

37:25.970 --> 37:27.450
5U

37:27.450 --> 37:28.730
我这样子一改

37:28.730 --> 37:29.610
改动了数据

37:29.610 --> 37:31.690
它会重新运行这个Render

37:31.690 --> 37:32.530
看没

37:32.530 --> 37:34.290
Render是不是重新运行

37:34.290 --> 37:35.170
为什么要重新运行

37:35.170 --> 37:36.570
因为我们界面变了

37:36.570 --> 37:37.450
你的数据变了

37:37.450 --> 37:39.090
你的界面就会跟着变

37:39.090 --> 37:41.050
所以说你必须要重新去运行

37:41.050 --> 37:44.290
重新去生产一个新的虚拟动

37:44.290 --> 37:45.490
高速5U

37:45.490 --> 37:46.530
之前的不能夭了

37:46.530 --> 37:47.770
我现在要给你告诉你

37:47.770 --> 37:49.690
新的界面长什么样子

37:49.690 --> 37:50.650
也有个DiV

37:50.650 --> 37:51.650
DiV里边有个APP

37:51.650 --> 37:52.730
DiV里边有个A7

37:52.730 --> 37:55.450
A7里边有个标题冒号

37:55.450 --> 37:57.050
后面就不是Hello5U了

37:57.050 --> 37:58.610
就是你好5U

37:58.610 --> 38:00.250
这个地方有变化

38:00.250 --> 38:01.170
高速5U

38:01.170 --> 38:02.570
我这个组件变了

38:02.570 --> 38:04.650
那么会生成一个新的虚拟动

38:04.650 --> 38:05.690
就这么个意思

38:05.690 --> 38:08.970
所以这个Render函数它会重复的运行

38:08.970 --> 38:11.170
那如果你再回来考虑这个问题

38:11.170 --> 38:13.730
如果说我这里创建真实动物

38:13.730 --> 38:15.130
第一次是没问题

38:15.130 --> 38:17.450
你用虚拟动物它最多还是要创建真实动物

38:17.450 --> 38:19.970
但是后续可不得了

38:19.970 --> 38:21.370
我只变了这个标题

38:21.370 --> 38:23.930
是不是我按你说我最希望的是什么

38:23.930 --> 38:25.050
你在真实动物里边

38:25.050 --> 38:27.290
最好就只给我改这个东西

38:27.290 --> 38:28.410
你A7都不要动

38:28.410 --> 38:30.010
最好只给我改这个东西

38:30.010 --> 38:31.450
是最好的

38:31.450 --> 38:33.450
但是如果说你用这种代码的话

38:33.450 --> 38:35.890
是不是就导致了每一次Render函数运行

38:35.890 --> 38:40.490
你都会创建一个全新的动物元素

38:40.490 --> 38:43.610
所以说5U为什么要去设计这个虚拟动物

38:43.610 --> 38:46.650
它的原因在于要尽量的减少

38:46.650 --> 38:48.210
没必要的

38:48.210 --> 38:50.970
真实动物的创建和更新

38:50.970 --> 38:52.610
它为什么要去减少这个地方呢

38:52.610 --> 38:54.210
为什么要去减少这一点呢

38:54.210 --> 38:55.530
因为真实的虚

38:55.530 --> 38:56.810
真实的动物

38:56.810 --> 38:59.770
创建真实的动物开销是非常大的

38:59.770 --> 39:02.170
改动真实的动物开销是非常大的

39:02.170 --> 39:03.890
移动真实的动物

39:03.890 --> 39:06.900
开销是非常大的

39:06.900 --> 39:07.700
就是这个原因

39:07.700 --> 39:09.620
我们可以来做个对比

39:09.620 --> 39:10.140
这里呢

39:11.420 --> 39:12.220
去写一个

39:12.220 --> 39:13.740
我们写一个对比

39:13.740 --> 39:19.390
对比

39:19.390 --> 39:21.110
这里边让我们写这么一个东西

39:21.110 --> 39:21.470
比较多

39:21.470 --> 39:23.510
我们这里就生成Temps

39:23.510 --> 39:28.080
生成一千万个

39:28.080 --> 39:30.360
我们先来生成一千万个解释对象

39:30.360 --> 39:31.680
我们看要多好时间

39:31.680 --> 39:33.280
首先我们用Consult

39:34.280 --> 39:35.280
Temps start

39:37.760 --> 39:38.760
Temps

39:39.640 --> 39:40.120
解释

39:40.120 --> 39:40.720
Objects

39:41.400 --> 39:43.560
生成一千万个解释对象

39:48.520 --> 39:49.440
每循环一次

39:49.440 --> 39:50.960
我就生成一个电量

39:50.960 --> 39:52.440
这个电量就是一个解对象

39:52.440 --> 39:52.960
给它个随便

39:52.960 --> 39:53.960
给它个Tag

39:53.960 --> 39:55.680
给它一个Agtl

39:55.680 --> 39:56.240
随便吧

39:56.240 --> 39:56.960
随便

39:56.960 --> 39:57.440
随便给

39:57.440 --> 39:58.480
我们就拍个Class

39:59.480 --> 40:00.080
随便给一个

40:01.320 --> 40:02.040
就下给一个

40:02.040 --> 40:04.480
然后我们循环结束之后

40:05.520 --> 40:06.200
记得时

40:06.800 --> 40:07.480
Temps end

40:08.120 --> 40:08.840
计时结束

40:09.520 --> 40:09.920
解释

40:09.920 --> 40:10.440
Objects

40:12.630 --> 40:13.630
这是做个标记

40:13.630 --> 40:14.830
这两个标记是对应的

40:14.830 --> 40:15.790
这是计时开始

40:15.790 --> 40:16.590
这是计时结束

40:16.590 --> 40:17.710
这两个标记要对应

40:18.230 --> 40:19.030
我们来看一下

40:20.430 --> 40:21.910
你会看到我生成一千万次

40:21.910 --> 40:24.110
这个解释对象的速度还是蛮快的

40:24.110 --> 40:25.350
100多毫秒就搞定了

40:27.150 --> 40:28.110
它跟界面有什么关系

40:28.110 --> 40:28.950
没有什么关系

40:29.430 --> 40:30.550
然后接下来我们来做个对比

40:31.230 --> 40:33.070
生成同样次数的

40:33.710 --> 40:34.470
多么对象

40:37.830 --> 40:38.990
生成一个真实的

40:38.990 --> 40:40.110
还听不到Objects

40:40.230 --> 40:40.710
我们这里呢

40:40.710 --> 40:41.990
就Objects就不是用这样写的

40:41.990 --> 40:43.270
就用Documents

40:45.030 --> 40:46.030
CreateElement

40:48.150 --> 40:48.590
也必

40:48.870 --> 40:49.110
好吧

40:49.110 --> 40:49.550
就这样子

40:49.990 --> 40:50.710
先让我们来看一下

40:51.790 --> 40:52.750
你看在这里一直转

40:55.270 --> 40:57.470
你看时间差距是不特别巨大

40:58.110 --> 40:59.550
我们界式对象的一千万个

40:59.550 --> 41:00.670
只剩用了100多毫秒

41:00.670 --> 41:03.510
而界ATM对象的用了5秒钟

41:04.270 --> 41:05.150
差距特别巨大

41:05.150 --> 41:05.910
再刷新看一下

41:06.550 --> 41:07.350
界式对象已经出来了

41:07.870 --> 41:09.670
但是ATM对象还在刷界

41:10.790 --> 41:11.430
用了4秒钟

41:12.150 --> 41:13.310
这就是他们的性能的差异

41:13.790 --> 41:15.670
所以说5.6它没有办法

41:17.470 --> 41:21.030
它这样的设计就导致到它最终注定

41:21.030 --> 41:22.190
就必须要用虚的动作

41:22.630 --> 41:23.710
因为它是这样的设计的

41:23.710 --> 41:25.470
它用Render喊出这种设计方式

41:25.830 --> 41:28.550
每次数据变化要重新运行Render

41:29.390 --> 41:30.870
那么就必须要避免

41:30.870 --> 41:33.150
在Render中反复地去创建真实动作

41:33.910 --> 41:34.550
明儿的意思吧

41:35.350 --> 41:37.350
所以说5.6它是这样的考虑

41:37.350 --> 41:39.590
它是从通过一个性能的角度

41:39.590 --> 41:40.590
去考虑这个问题

41:41.470 --> 41:42.790
那么为什么设计

41:42.790 --> 41:44.230
虚拟多么就能解决这个问题

41:44.230 --> 41:46.070
首先创建的是界式对象

41:46.590 --> 41:47.390
性能提高了

41:47.990 --> 41:49.390
那么你设计到另外一个问题

41:49.390 --> 41:51.270
那么这是一个界式对象

41:52.030 --> 41:53.670
我最重要让页面变化

41:53.670 --> 41:55.430
我最终还是在反映到页面上去

41:55.790 --> 41:56.830
我们的脑是这个样子

41:57.390 --> 41:58.350
我在反映到页面上去

41:58.350 --> 41:59.270
不要让我数据变了

41:59.590 --> 42:00.990
你重新运行Render

42:02.030 --> 42:04.590
它为什么就能刚好改动这个地方

42:04.590 --> 42:05.750
而不去改动Ace

42:05.750 --> 42:06.630
不去改动DIV

42:06.630 --> 42:07.630
它为什么可以做到呢

42:08.750 --> 42:09.390
那么就看着

42:13.160 --> 42:16.160
虚拟多么是如何转换成真实多么的

42:17.160 --> 42:19.160
而这里呢要分成两个部分来说

42:19.160 --> 42:20.160
你倒是回答的时候

42:20.160 --> 42:22.160
第一个就是首次渲染

42:23.160 --> 42:25.160
首次渲染那你不是给了它一个虚拟多么了吗

42:25.160 --> 42:27.160
你告诉它我要显示啥

42:27.160 --> 42:29.160
那它怎么变成真实多么呢

42:29.160 --> 42:31.160
首次渲染极其简单

42:32.160 --> 42:33.160
它就

42:33.160 --> 42:35.160
因为我们给它的虚拟多么是一个界式对象

42:36.160 --> 42:37.160
是一个数形结构

42:37.160 --> 42:38.160
这是一个节点

42:38.160 --> 42:39.160
是一个数形结构

42:39.160 --> 42:40.160
对吧 这是一个节点

42:40.160 --> 42:41.160
期间里面有 children

42:41.160 --> 42:42.160
children 里面还有 children

42:42.160 --> 42:43.160
是一个数形结构

42:44.160 --> 42:45.160
它就便利它

42:45.160 --> 42:46.160
如果说

42:46.160 --> 42:48.160
你听过咱们之前的算法节运用的话

42:49.160 --> 42:50.160
你就知道了

42:50.160 --> 42:51.160
咱们讲过了一个数形结构的便利

42:51.160 --> 42:53.160
有深度优先有广度优先

42:53.160 --> 42:54.160
它是用深度优先的去便利

42:55.160 --> 42:56.160
那么便利它

42:56.160 --> 42:57.160
便利它每一个节点

42:58.160 --> 42:59.160
它就知道了

42:59.160 --> 43:00.160
这是第一个界式对象

43:00.160 --> 43:01.160
我要生成一个DIV

43:01.160 --> 43:02.160
于是它就会用 document

43:03.160 --> 43:04.160
create elements

43:04.160 --> 43:05.160
创建一个DIV

43:05.160 --> 43:07.160
你告诉我它里面有一些属性

43:07.160 --> 43:10.160
OK 那我就去设置set attribute

43:10.160 --> 43:12.160
去设置它的 ID 为 F

43:12.160 --> 43:13.160
是不是很简单

43:13.160 --> 43:15.160
所以第一次渲染是特别简单的

43:15.160 --> 43:16.160
它就根据我们的虚拟动物

43:16.160 --> 43:19.160
直接出一个一个去创建真实动物

43:20.160 --> 43:21.160
虚拟动物是什么结构

43:21.160 --> 43:23.160
真实动物就是什么结构

43:23.160 --> 43:25.160
然后把这个真实动物

43:25.160 --> 43:26.160
挂展到页面中合适的位置

43:26.160 --> 43:27.160
什么叫合适的位置

43:27.160 --> 43:28.160
就挂展到这个地方

43:29.160 --> 43:31.160
就把这个元素替换掉

43:31.160 --> 43:32.160
直接给它干掉

43:33.160 --> 43:34.160
用我们的行得元素

43:34.160 --> 43:36.160
生成的行得元素带着它

43:37.160 --> 43:38.160
就这么个意思

43:38.160 --> 43:39.160
所以说有的时候

43:40.160 --> 43:42.160
面试题里面有这么一个东西

43:42.160 --> 43:47.160
就是一开始我去得到DVE documents

43:49.160 --> 43:51.160
这是非常简单的面试题

43:52.160 --> 43:53.160
IPP

43:53.160 --> 43:56.160
然后你创建了五幼之后

43:56.160 --> 44:00.370
我又去得到一个DIV2

44:01.370 --> 44:03.370
DIV2 documents

44:03.370 --> 44:04.370
又来Documents

44:05.370 --> 44:07.370
Disk elements for ID

44:07.370 --> 44:08.370
App

44:09.370 --> 44:10.370
就夹在中间

44:10.370 --> 44:11.370
五幼之创建就夹在中间

44:11.370 --> 44:15.370
它问你最终DIV1是不是等于DIV2

44:15.370 --> 44:16.370
你觉得是不是等于呢

44:16.370 --> 44:22.370
一不一样的这两个

44:22.370 --> 44:26.380
这是正儿版的面试题

44:26.380 --> 44:28.380
它是笔试题

44:29.380 --> 44:31.380
它不一样

44:31.380 --> 44:34.380
这个玩意它就直接给它干掉了

44:34.380 --> 44:38.380
后面就是用我们生成的行得动物

44:38.380 --> 44:40.380
创建的真实动物

44:40.380 --> 44:41.380
肯定是forged

44:42.380 --> 44:44.380
所以说它第一次选择其实很简单

44:44.380 --> 44:46.380
一个个去生成真实动物

44:46.380 --> 44:48.380
然后它会做一件事

44:48.380 --> 44:49.380
它把生成的真实动物

44:49.380 --> 44:51.380
给我们的虚拟动物对应起来

44:51.380 --> 44:53.380
这一点很重要

44:53.380 --> 44:55.380
今天晚上跟我们没什么关系

44:55.380 --> 44:58.380
但是后面几天这一点非常重要

44:58.380 --> 45:01.380
你看它又会设置虚拟动物的AM元素

45:01.380 --> 45:02.380
AM的属性

45:02.380 --> 45:03.380
把它设置为真实动物

45:03.380 --> 45:06.380
这样虚拟动物是不是跟真实动物对应起来了

45:06.380 --> 45:08.380
在手持宣言的过程中是不是对应起来了

45:08.380 --> 45:10.380
后面很重要

45:10.380 --> 45:11.380
大家记住

45:12.380 --> 45:14.380
如果说不是手持宣言的

45:14.380 --> 45:15.380
它是后续宣言的

45:15.380 --> 45:17.380
我们数据变化了

45:17.380 --> 45:19.380
想应是数据

45:19.380 --> 45:20.380
什么叫想应是数据

45:20.380 --> 45:21.380
数据变了

45:21.380 --> 45:23.380
有些事情要做

45:23.380 --> 45:24.380
数据变了

45:24.380 --> 45:25.380
Render还需要重新运行

45:25.380 --> 45:28.380
这样的数据就是想应是数据

45:28.380 --> 45:30.380
我们需要重新去宣言它

45:30.380 --> 45:32.380
重新运行Render

45:32.380 --> 45:33.380
那么这个时候

45:33.380 --> 45:36.380
它的做法就不能像之前那么粗暴了

45:36.380 --> 45:38.380
如果说在像之前那样子

45:38.380 --> 45:39.380
每一个虚拟动物

45:39.380 --> 45:41.380
它返回一个新的虚拟动物

45:41.380 --> 45:43.380
每次都返回的都是一个新的虚拟动物

45:43.380 --> 45:45.380
都是新创建的

45:45.380 --> 45:47.380
按照新的虚拟动物

45:47.380 --> 45:49.380
再去一个一个真实动物

45:49.380 --> 45:50.380
那就开销就大了

45:50.380 --> 45:52.380
所以说后续宣言的过程中

45:52.380 --> 45:53.380
它就没有这样做了

45:53.380 --> 45:56.380
它是把新生成的虚拟动物数

45:56.380 --> 45:59.380
和旧的虚拟动物数进行对比

45:59.380 --> 46:00.380
这就是跌幅

46:00.380 --> 46:01.380
跌幅呢

46:01.380 --> 46:03.380
我们将来是后天还是大后天

46:03.380 --> 46:05.380
反正有些人会讲这个跌幅

46:05.380 --> 46:06.380
这个过程还复杂

46:06.380 --> 46:08.380
它会对比

46:09.380 --> 46:12.380
哪两个虚拟动物是不一样的

46:12.380 --> 46:14.380
然后去改动真实的动物

46:14.380 --> 46:16.380
完成最终的效果

46:16.380 --> 46:18.380
比方说我这里给大家看一下

46:18.380 --> 46:22.210
你看

46:22.210 --> 46:24.210
这是一个新的虚拟动物数

46:24.210 --> 46:26.210
不是真的动物数

46:26.210 --> 46:28.210
它有对应的真实动物吗

46:28.210 --> 46:29.210
是没有

46:29.210 --> 46:31.210
我们数据变了

46:31.210 --> 46:33.210
比方说我们刚才

46:33.210 --> 46:34.210
在这儿

46:34.210 --> 46:36.210
我们把那个改动了

46:36.210 --> 46:37.210
数据变

46:37.210 --> 46:38.210
需要重新运行人大

46:38.210 --> 46:40.210
那么这一次重新运行人大

46:40.210 --> 46:42.210
它就是涵盖了这个过程

46:42.210 --> 46:44.210
它会首先运行人大

46:44.210 --> 46:47.210
它就不就是生成一个新的虚拟动物数吗

46:47.210 --> 46:48.210
不过这个新的虚拟动物数

46:48.210 --> 46:49.210
它是没有真实动物的

46:49.210 --> 46:51.210
没有对应的真实动物

46:51.210 --> 46:53.210
而我们的旧这个数

46:53.210 --> 46:54.210
是不是有真实动物

46:54.210 --> 46:57.210
旧数是不是第一次渲染出来的

46:57.210 --> 46:58.210
是不是第一次渲染出来的

46:58.210 --> 46:59.210
第一次渲染出来

46:59.210 --> 47:01.210
它是不是有一个M属性

47:01.210 --> 47:03.210
这个属性是不是有对应的真实动物

47:03.210 --> 47:04.210
对吧

47:04.210 --> 47:05.210
那么它对比的时候

47:05.210 --> 47:06.210
跟真实动物没什么关系

47:06.210 --> 47:07.210
我就对比虚拟动物

47:07.210 --> 47:08.210
你看这个东西

47:08.210 --> 47:09.210
跟这个东西一样吗

47:09.210 --> 47:10.210
一样

47:10.210 --> 47:11.210
OK 下一个

47:11.210 --> 47:12.210
这个东西跟这个东西一样吗

47:12.210 --> 47:13.210
一样 不动

47:13.210 --> 47:15.210
那么它还会做一件事

47:15.210 --> 47:17.210
把这个Alm这个引用放到这边

47:17.210 --> 47:19.210
也会设置它的Alm

47:19.210 --> 47:20.210
那么这个Alm就等于这个Alm

47:20.210 --> 47:22.210
我们之后讲Def的时候

47:22.210 --> 47:23.210
会想起说

47:23.210 --> 47:25.210
然后看这个节点

47:25.210 --> 47:26.210
看这个节点

47:26.210 --> 47:27.210
跟这个节点一样吗

47:27.210 --> 47:28.210
不一样了

47:28.210 --> 47:29.210
比方说

47:29.210 --> 47:30.210
假设不一样了

47:30.210 --> 47:31.210
不一样的时候

47:31.210 --> 47:32.210
这个时候

47:32.210 --> 47:34.210
它就会去找到

47:34.210 --> 47:36.210
旧的那颗数里边的真实动物

47:36.210 --> 47:37.210
直接去改这个真实动物

47:37.210 --> 47:38.210
也就是说我们

47:38.210 --> 47:39.210
就这样子就保证了

47:39.210 --> 47:41.210
我改动的真实动物是最少的

47:41.210 --> 47:43.210
你看这个真实动物没动

47:43.210 --> 47:44.210
这个真实动物没动

47:44.210 --> 47:46.210
我只有这两个虚拟动物变了

47:46.210 --> 47:47.210
所以说我改动这个真实动物

47:47.210 --> 47:48.210
就OK了

47:48.210 --> 47:50.210
这是它的改动方式

47:50.210 --> 47:52.210
它用这种方式

47:52.210 --> 47:54.210
来进行局部更新的

47:54.210 --> 47:55.210
所以说你会发现

47:55.210 --> 47:56.210
它对比的时候

47:56.210 --> 47:57.210
对比的时候虚拟动物

47:57.210 --> 47:59.210
因为它是GS对象的对比

47:59.210 --> 48:00.210
速度非常快

48:00.210 --> 48:01.210
而改动的时候

48:01.210 --> 48:02.210
改动的时候

48:02.210 --> 48:03.210
改动了真实动物

48:03.210 --> 48:05.210
你虚拟动物不一样的

48:05.210 --> 48:06.210
就要改动真实动物

48:06.210 --> 48:07.210
就这么个意思

48:07.210 --> 48:09.210
那么在我们这个场景里边

48:09.210 --> 48:10.210
我把台头一变了

48:10.210 --> 48:12.210
是不是生产新的虚拟动物

48:12.210 --> 48:13.210
那么就对比

48:13.210 --> 48:15.210
这个DIV跟之前的DIV

48:15.210 --> 48:16.210
好像没什么变化

48:16.210 --> 48:17.210
IG属性一样

48:17.210 --> 48:18.210
元素也一样

48:18.210 --> 48:19.210
没什么变化

48:19.210 --> 48:21.210
这个A11元素也没什么变化

48:21.210 --> 48:22.210
变化了就是这个支付串

48:22.210 --> 48:24.210
就是里边的一个文笨节点

48:24.210 --> 48:25.210
文笨节点有变化

48:25.210 --> 48:26.210
所以说它最终改动的

48:26.210 --> 48:29.210
只有这个文笨节点

48:29.210 --> 48:31.210
这是它的改动方式

48:31.210 --> 48:33.210
这一块有什么问题没

48:38.030 --> 48:39.030
没问题啊

48:44.500 --> 48:46.500
如果说没有写EO

48:46.500 --> 48:47.500
它哪里都不会挂载

48:47.500 --> 48:48.500
它啥都不会做

48:48.500 --> 48:49.500
我们来看一下吧

48:49.500 --> 48:51.500
如果说你没有写EO

48:51.500 --> 48:53.870
看一下

48:53.870 --> 48:54.870
一看

48:54.870 --> 48:58.250
那这个就肯定是

48:58.250 --> 48:59.250
得到处了

48:59.250 --> 49:00.250
两个DIV肯定是一样的

49:00.250 --> 49:01.250
我没有写EO

49:01.250 --> 49:02.250
你会发现它Render

49:02.250 --> 49:03.250
还是都没有运行

49:03.250 --> 49:04.250
它运行Render

49:04.250 --> 49:06.250
运行干嘛呢

49:06.250 --> 49:07.250
我都不知道要渲染到哪个位置

49:07.250 --> 49:09.250
所以说你没有写EO

49:09.250 --> 49:10.250
它不会渲染的

49:10.250 --> 49:11.250
当然我们也有一种

49:11.250 --> 49:13.250
写法在5EO里边

49:13.250 --> 49:15.250
你可以先不着急炫染

49:17.250 --> 49:18.250
你可以先生存这个

49:18.250 --> 49:19.250
不着急炫染

49:19.250 --> 49:20.250
不写这个EO

49:20.250 --> 49:22.250
然后在这里用什么

49:22.250 --> 49:23.250
应该都知道

49:23.250 --> 49:24.250
是不是可以用这个Mount

49:24.250 --> 49:25.250
对吧

49:25.250 --> 49:26.250
用这个方法

49:26.250 --> 49:27.250
我们的5EO对象里边

49:27.250 --> 49:28.250
有这个方法

49:28.250 --> 49:30.250
后边可能中间去说

49:30.250 --> 49:31.250
一些别的事情

49:31.250 --> 49:32.250
觉得实际差不多了

49:32.250 --> 49:34.250
然后在合适的时候

49:34.250 --> 49:35.250
我再去炫染

49:35.250 --> 49:36.250
炫染到哪了

49:36.250 --> 49:37.250
IDVIP

49:37.250 --> 49:39.250
这样子才会炫染

49:40.250 --> 49:41.250
我们后边会讲

49:41.250 --> 49:42.250
5EO的

49:42.250 --> 49:46.250
详细的炫染流程

49:46.250 --> 49:47.250
那么后边会想到

49:47.250 --> 49:50.250
那么这个时候就会运行Render

49:50.250 --> 49:52.250
看还是没有问题

49:52.250 --> 49:54.620
改变了局部

49:54.620 --> 49:57.620
就通过EM老舅不同

49:57.620 --> 49:58.620
对

49:58.620 --> 49:59.620
就是这样子

49:59.620 --> 50:01.620
它对比的是蓄力动物

50:01.620 --> 50:04.620
但是改动的是真实动物

50:04.620 --> 50:05.620
它不会改动蓄力动物

50:05.620 --> 50:08.620
它会改动的是真实动物

50:08.620 --> 50:09.620
后边我们讲

50:09.620 --> 50:10.620
炫染流程的时候

50:10.620 --> 50:11.620
会非常非常详细跟大家说

50:11.620 --> 50:13.620
它一步一步是这么做的

50:13.620 --> 50:14.620
好

50:14.620 --> 50:15.620
下一个

50:15.620 --> 50:17.620
你把前面三件回答到了

50:17.620 --> 50:19.620
其实就已经拿到很高的分数了

50:19.620 --> 50:20.620
然后下一个

50:20.620 --> 50:22.620
模板和蓄力动物的关系

50:22.620 --> 50:24.620
我们平时写蓄力动物吗

50:24.620 --> 50:25.620
不写

50:25.620 --> 50:26.620
你写这个东西

50:26.620 --> 50:28.620
你在吐血

50:28.620 --> 50:29.620
有的时候你没办法

50:29.620 --> 50:30.620
你还在写

50:30.620 --> 50:32.620
今天晚上就会遇到这种场景

50:32.620 --> 50:33.620
我们平时写的时候

50:33.620 --> 50:34.620
好像写的这个玩意

50:34.620 --> 50:35.620
特别是在我们的

50:35.620 --> 50:36.620
用雕塑架

50:36.620 --> 50:38.620
搭建的工程里边

50:38.620 --> 50:40.620
我们用雕塑架搭建的工程里边说的

50:40.620 --> 50:41.620
大量的单文件

50:41.620 --> 50:42.620
主件写的是它

50:42.620 --> 50:43.620
对吧

50:43.620 --> 50:44.620
拿写蓄力动物

50:44.620 --> 50:45.620
那么它会编译成为什么

50:45.620 --> 50:46.620
Render函数

50:46.620 --> 50:47.620
它帮我们编译

50:47.620 --> 50:48.620
所以我们写它

50:48.620 --> 50:49.620
要方便的都

50:49.620 --> 50:51.620
所以你心里边要清楚

50:51.620 --> 50:52.620
你这里写的对EV

50:52.620 --> 50:54.620
写的可不是真实动物

50:54.620 --> 50:56.620
它写的是蓄力动物

50:56.620 --> 50:57.620
最终它会生成

50:57.620 --> 50:59.620
到真实动物里边去

51:00.620 --> 51:01.620
写的是它

51:01.620 --> 51:03.620
那么它跟我们的

51:03.620 --> 51:04.620
蓄力动物有什么关系呢

51:04.620 --> 51:05.620
这就要说到

51:05.620 --> 51:07.620
无诱框架中有一个模块

51:07.620 --> 51:08.620
叫做compile

51:09.620 --> 51:10.620
就这么一个模块

51:10.620 --> 51:12.620
在无诱框架里边

51:12.620 --> 51:13.620
那么这个模块的

51:13.620 --> 51:14.620
主要作用就是

51:14.620 --> 51:16.620
它负责把我们的模板

51:16.620 --> 51:18.620
转换成Render函数

51:18.620 --> 51:19.620
而我们的Render函数

51:19.620 --> 51:20.620
要做什么事情呢

51:20.620 --> 51:21.620
就雕用之后

51:21.620 --> 51:23.620
得到蓄力动物

51:23.620 --> 51:24.620
所以说我们

51:24.620 --> 51:25.620
平时开发的时候

51:25.620 --> 51:27.620
是怎么写的呢

51:27.620 --> 51:28.620
是在这里写的对吧

51:28.620 --> 51:29.620
在Template这里

51:29.620 --> 51:30.620
可以写

51:30.620 --> 51:32.620
当中这种传统的写法

51:32.620 --> 51:34.620
一般不推荐使用

51:34.620 --> 51:35.620
在公司里边

51:35.620 --> 51:36.620
肯定是用

51:37.620 --> 51:38.620
所以我们一般是用

51:38.620 --> 51:39.620
单文件主件来写

51:39.620 --> 51:40.620
我们形容的模板

51:40.620 --> 51:41.620
那么这个模板

51:41.620 --> 51:43.620
它会被编译成为Render

51:43.620 --> 51:45.620
就这么简单

51:45.620 --> 51:47.620
那么编译的过程

51:47.620 --> 51:48.620
你可以面试观说一下

51:48.620 --> 51:49.620
它分为两步

51:49.620 --> 51:50.620
第一步

51:50.620 --> 51:51.620
它会把这个模板

51:51.620 --> 51:52.620
转换成AST

51:52.620 --> 51:54.620
叫做抽象语法数

51:54.620 --> 51:56.620
什么叫抽象语法数呢

51:56.620 --> 51:57.620
就是用一个

51:57.620 --> 51:58.620
数形结构

51:58.620 --> 52:00.620
来描述我们的东西

52:00.620 --> 52:02.620
多了解比较抽象

52:02.620 --> 52:05.450
给大家看一下

52:05.450 --> 52:06.450
这里边有一个

52:06.450 --> 52:08.450
抽象语法数的一个测试

52:08.450 --> 52:10.450
你看我左边写了个啥

52:10.450 --> 52:12.450
看得清楚了

52:12.450 --> 52:14.450
我左边写了一个atmail

52:14.450 --> 52:16.450
这是我们的atmail语言

52:16.450 --> 52:17.450
对吧

52:17.450 --> 52:18.450
它可以把这个东西

52:18.450 --> 52:21.450
转换成一个数形结构

52:21.450 --> 52:22.450
你看

52:22.450 --> 52:23.450
变成一个对象了

52:23.450 --> 52:24.450
一个个的对象了

52:24.450 --> 52:25.450
对吧

52:25.450 --> 52:26.450
对象整个对象

52:26.450 --> 52:27.450
叫做Program

52:27.450 --> 52:28.450
然后呢

52:28.450 --> 52:30.450
下面有个Template Note

52:30.450 --> 52:32.450
表示我有哪些节点

52:32.450 --> 52:33.450
我有一个节点

52:33.450 --> 52:34.450
叫Element

52:34.450 --> 52:35.450
一个节点

52:35.450 --> 52:36.450
对应到左边的那个

52:36.450 --> 52:38.760
黄色区域

52:38.760 --> 52:39.760
这个节点里边

52:39.760 --> 52:40.760
又有一些指节点

52:40.760 --> 52:41.760
看没

52:41.760 --> 52:42.760
指节点

52:42.760 --> 52:43.760
这个指节点呢

52:43.760 --> 52:44.760
是body

52:44.760 --> 52:45.760
看到没

52:45.760 --> 52:46.760
左边的黄色区域

52:46.760 --> 52:47.760
名字是body

52:47.760 --> 52:48.760
好 body里边呢

52:48.760 --> 52:49.760
又有两个指节点

52:49.760 --> 52:50.760
一个是se

52:50.760 --> 52:52.760
一个是p元素

52:52.760 --> 52:54.760
se里边呢

52:54.760 --> 52:56.760
有一个指节点

52:56.760 --> 52:57.760
文本

52:57.760 --> 52:58.760
看没

52:58.760 --> 52:59.760
所以有点像区立动物

52:59.760 --> 53:00.760
它不是区立动物

53:00.760 --> 53:01.760
它叫抽象语法数

53:01.760 --> 53:03.760
它会把它转换成这种状态

53:03.760 --> 53:05.760
其实之前同学有同学说

53:05.760 --> 53:06.760
这个伍佑呢

53:06.760 --> 53:09.760
是根据snab

53:09.760 --> 53:10.760
顶着我都打不出来

53:10.760 --> 53:12.760
snab动

53:12.760 --> 53:14.760
snab动其实它也是这样做的

53:14.760 --> 53:16.760
它先生成这个抽象语法数

53:16.760 --> 53:17.760
然后呢

53:17.760 --> 53:19.760
再把这个抽象语法数呢

53:19.760 --> 53:21.760
转换成人的函数

53:21.760 --> 53:22.760
有同学说

53:22.760 --> 53:27.460
这个抽象语法数

53:27.460 --> 53:29.460
怎么生成出来的呢

53:29.460 --> 53:32.460
这里边还要用到一些算法

53:32.460 --> 53:34.460
这个地方就有点复杂了

53:34.460 --> 53:36.460
这里边还要用到站

53:36.460 --> 53:38.460
要用到站

53:38.460 --> 53:39.460
我就不扯了

53:39.460 --> 53:40.460
不扯了

53:40.460 --> 53:42.460
这就扯到策略了

53:42.460 --> 53:44.460
总之它可以做到

53:44.460 --> 53:46.460
肯定是可以做到的

53:46.460 --> 53:49.460
这是关于那个

53:49.460 --> 53:51.460
模板是怎么生成人的函数的

53:51.460 --> 53:53.460
因为我们最终的人的函数呢

53:53.460 --> 53:54.460
就负责生成区立动

53:54.460 --> 53:55.460
对吧

53:55.460 --> 53:58.460
所以你写模板的时候

53:58.460 --> 54:00.460
它最终

54:00.460 --> 54:01.460
运行的时候

54:01.460 --> 54:03.460
运行的是人的函数

54:03.460 --> 54:04.460
以后了

54:04.460 --> 54:05.460
所以下课看

54:05.460 --> 54:06.460
如果时间还充足的话

54:06.460 --> 54:07.460
或者这几天哪天充足的时候

54:07.460 --> 54:08.460
你提醒我一下

54:08.460 --> 54:10.460
如果说真的非常想知道

54:10.460 --> 54:12.460
这个往下到底怎么去生成

54:12.460 --> 54:13.460
这个抽象语法数的

54:13.460 --> 54:15.460
哪天提醒我一下

54:15.460 --> 54:16.460
如果说时间充足的话

54:16.460 --> 54:18.460
我跟你们讲一讲

54:18.460 --> 54:19.460
对

54:19.460 --> 54:20.460
背部也是这样干的

54:20.460 --> 54:22.460
微拍也是这样干的

54:22.460 --> 54:23.460
这种抽象语法数

54:23.460 --> 54:28.470
就很多的框架工具里边都用到过

54:28.470 --> 54:29.470
就是要说复杂

54:29.470 --> 54:30.470
也不是特别复杂

54:30.470 --> 54:31.470
就是很凡数

54:31.470 --> 54:33.470
特别凡数

54:33.470 --> 54:34.470
好

54:34.470 --> 54:38.910
OK

54:38.910 --> 54:39.910
那么这个编译

54:39.910 --> 54:40.910
发生在什么时候

54:40.910 --> 54:41.910
什么叫编译

54:41.910 --> 54:42.910
就是先过生成这个

54:42.910 --> 54:43.910
再过生成人的函数

54:43.910 --> 54:45.910
就是把模板变成人的函数

54:45.910 --> 54:46.910
编译成什么时候发生的呢

54:46.910 --> 54:50.910
是在组建第一次加载的时候

54:50.910 --> 54:52.910
在这个时候发生的

54:52.910 --> 54:53.910
那么这个时候

54:53.910 --> 54:55.910
称之为运行式编译

54:55.910 --> 54:57.910
这是使用传统的方式引入

54:57.910 --> 54:58.910
什么叫传统的方式引入

54:58.910 --> 55:00.910
就这种方式

55:00.910 --> 55:02.910
你在页面上直接引一个界式

55:02.910 --> 55:03.910
那么就相当于是

55:04.910 --> 55:06.910
然后你用了模板是这个模板

55:06.910 --> 55:07.910
或者是这个模板

55:07.910 --> 55:09.910
表示我们把人的函数注释掉

55:09.910 --> 55:12.350
把人的函数注释掉

55:12.350 --> 55:14.350
用的是这个模板

55:14.350 --> 55:15.350
于是呢

55:15.350 --> 55:16.350
它就会把这个模板

55:16.350 --> 55:17.350
编译成为人的函数

55:17.350 --> 55:18.350
什么时候编译呢

55:18.350 --> 55:20.350
就第一次运行这个组建的时候

55:20.350 --> 55:21.350
它就会编译

55:21.350 --> 55:23.350
编译过后以后就不再编译了

55:23.350 --> 55:24.350
以后就反复地调用这个

55:24.350 --> 55:25.350
人的函数就行了

55:25.350 --> 55:26.350
相当于是你没有配置

55:26.350 --> 55:27.350
它光你配置了

55:27.350 --> 55:28.350
以后就反复地调用它就完成了

55:28.350 --> 55:30.350
编译只发生一次

55:30.350 --> 55:32.350
发生在第一次运行的时候

55:32.350 --> 55:34.350
就要运行式编译

55:34.350 --> 55:35.350
当然了你大家肯定

55:35.350 --> 55:36.350
应该能够想到

55:36.350 --> 55:39.350
这个编译是不是特别耗时间

55:39.350 --> 55:41.350
编译是很耗时间的

55:41.350 --> 55:42.350
最耗时间在哪呢

55:42.350 --> 55:43.350
就在这

55:43.350 --> 55:45.350
转换成抽象与法数

55:45.350 --> 55:47.350
这是非常耗时间的

55:47.350 --> 55:48.350
一个组建

55:48.350 --> 55:49.350
每个组建都要编译

55:49.350 --> 55:51.350
你如果说你这个界面上

55:51.350 --> 55:52.350
用到了两三百个组建

55:52.350 --> 55:53.350
都是非常正常的

55:53.350 --> 55:54.350
一个界面里边

55:54.350 --> 55:55.350
整个页面里边有两

55:55.350 --> 55:57.350
间接使用到两三百个组建

55:57.350 --> 55:58.350
非常正常

55:58.350 --> 55:59.350
副组建套植物件

55:59.350 --> 56:00.350
植物件再套植物件

56:00.350 --> 56:02.350
每一个组建都要编译

56:02.350 --> 56:03.350
不是说只有一个

56:03.350 --> 56:04.350
每一个组建的里边

56:04.350 --> 56:06.350
模板都要编译成人的海术

56:06.350 --> 56:09.350
然后这个时间就非常非常长了

56:09.350 --> 56:12.350
这种运行式编译并不可取

56:12.350 --> 56:13.350
我们应该用什么呢

56:13.350 --> 56:14.350
应该用郁编译

56:14.350 --> 56:16.350
什么叫做郁编译呢

56:16.350 --> 56:17.350
就是在运行之前

56:17.350 --> 56:19.350
这个单碼都还没有运行出来

56:19.350 --> 56:20.350
页面都还没有打开

56:20.350 --> 56:21.350
就给你编译好了

56:21.350 --> 56:22.350
那么这种编译呢

56:22.350 --> 56:24.350
是怎么来做的呢

56:24.350 --> 56:26.350
那你就必须要用无忧可力了

56:26.350 --> 56:27.350
必须要用这个的

56:27.350 --> 56:28.350
就是用那个小手架

56:28.350 --> 56:29.350
就是这个东西

56:29.350 --> 56:31.350
搭建出来的工程

56:31.350 --> 56:34.350
通过它来搭建出来的工程

56:34.350 --> 56:35.350
你会发现

56:35.350 --> 56:38.860
它根本就没有模板

56:38.860 --> 56:39.860
它打

56:39.860 --> 56:40.860
因为我们知道这个东西

56:40.860 --> 56:41.860
它我们的这个单碼

56:41.860 --> 56:42.860
是不能直接在浏览器里面运行的

56:42.860 --> 56:43.860
就把需要打包

56:43.860 --> 56:45.860
我们来打包一下吧

56:45.860 --> 56:47.860
我们必须要打包之后才能运行

56:47.860 --> 56:48.860
我们刚才看到的

56:48.860 --> 56:51.860
都是打包之后的结果

56:51.860 --> 56:53.860
我们用运行的打包命令

56:53.860 --> 56:58.450
NPM的装备

57:00.450 --> 57:02.450
我们可以非常容易验证出来

57:02.450 --> 57:05.450
它到底有没有这个DIV

57:05.450 --> 57:06.450
到介石里面

57:06.450 --> 57:07.450
现在是不是生成了目录

57:07.450 --> 57:09.450
这个目录里面说有些介石

57:09.450 --> 57:11.450
这个介石就打包出来的结果

57:11.450 --> 57:13.450
它最终运行的是这些介石

57:13.450 --> 57:16.450
我们就看一下

57:16.450 --> 57:18.450
有些人可能会把它理解成

57:18.450 --> 57:19.450
这个玩意打包出来的

57:19.450 --> 57:22.450
是不是变成它呀

57:22.450 --> 57:24.450
是不是变成了这个东西了

57:24.450 --> 57:25.450
那我们为了验证

57:25.450 --> 57:26.450
这一点非常简单

57:26.450 --> 57:28.450
我把这个东西复制一下

57:28.450 --> 57:29.450
我们看一下最终生成的介石里面

57:29.450 --> 57:31.450
有没有这个东西就行了

57:31.450 --> 57:37.860
有吗

57:37.860 --> 57:39.860
没有吧

57:39.860 --> 57:40.860
有吗

57:40.860 --> 57:42.860
没有吧

57:42.860 --> 57:43.860
说没有啊

57:43.860 --> 57:44.860
我找

57:44.860 --> 57:45.860
看这个就行了

57:45.860 --> 57:47.860
那它生成出来到底是咋的

57:47.860 --> 57:48.860
生成出来

57:48.860 --> 57:50.860
它是Render

57:50.860 --> 57:52.860
找一找啊

57:52.860 --> 57:56.420
我看一下这边

57:56.420 --> 57:58.420
这边多

58:03.310 --> 58:04.310
你看

58:04.310 --> 58:08.220
这不是

58:08.220 --> 58:09.220
还不好找啊

58:09.220 --> 58:10.220
这个玩意

58:10.220 --> 58:12.220
还不好找啊

58:12.220 --> 58:15.110
还不好找啊

58:15.110 --> 58:17.110
总的它生成出来是一个Render还说

58:17.110 --> 58:19.110
它不再是这个模板了

58:19.110 --> 58:20.110
不再是一个Template了

58:20.110 --> 58:22.110
不再会有这个字不错的

58:22.110 --> 58:24.110
并不存在的这种方式

58:24.110 --> 58:25.110
所以说这叫做预编译

58:25.110 --> 58:27.110
你看这个单码我现在运行了吗

58:27.110 --> 58:28.110
没有运行

58:28.110 --> 58:31.110
将来我们会把介石放到浏览器里面运行

58:31.110 --> 58:32.110
比如说我去打开这个页面

58:32.110 --> 58:34.110
它就会运行这个介石

58:34.110 --> 58:35.110
但它运行的时候

58:35.110 --> 58:36.110
就已经是Render还说了

58:36.110 --> 58:38.110
这叫做预编译

58:38.110 --> 58:39.110
那么这样子就避免了

58:39.110 --> 58:41.110
在运行的过程中去编译了

58:41.110 --> 58:43.110
打包的时候就去免帮你编译好了

58:43.110 --> 58:45.110
这是无忧可力的方式

58:45.110 --> 58:48.110
由于有这个原因

58:48.110 --> 58:49.110
所谓说无忧可力

58:49.110 --> 58:52.490
它会做一件事

58:52.490 --> 58:53.490
它会在打包的时候

58:53.490 --> 58:56.490
排除掉无忧中的compile模块

58:56.490 --> 58:57.490
因为它发现运行的过程中

58:57.490 --> 58:59.490
已经不需要编译了

58:59.490 --> 59:00.490
我早就

59:00.490 --> 59:02.490
我打包的时候就帮你编译好了

59:02.490 --> 59:03.490
所以说这个介石里面

59:03.490 --> 59:05.490
是不保含编译功能的

59:05.490 --> 59:07.490
这也就意味着啥呢

59:07.490 --> 59:08.490
如果说你在单码里面

59:08.490 --> 59:10.490
给我写这些东西

59:10.490 --> 59:12.490
你不写这个Template

59:13.490 --> 59:15.490
我们写这个Template行不行

59:15.490 --> 59:17.490
我这里写一个

59:21.490 --> 59:22.490
我们这样子写行不行

59:22.490 --> 59:24.490
我来试一下

59:26.490 --> 59:32.100
打开它

59:32.100 --> 59:33.100
啥都没发现是

59:33.100 --> 59:34.100
而且可以报一个错

59:36.100 --> 59:37.100
它告诉你

59:37.100 --> 59:39.100
这边有回数区的东西

59:39.100 --> 59:40.100
把它取掉

59:40.100 --> 59:41.100
它报了一个错

59:41.100 --> 59:42.100
它说

59:42.100 --> 59:45.100
你现在正在使用

59:46.100 --> 59:47.100
叫什么

59:51.100 --> 59:53.930
意思就是说

59:53.930 --> 59:55.930
你这个地方正在使用的是

59:55.930 --> 59:58.930
运行石是没有编译的

59:58.930 --> 01:00:00.930
没有编译模块的

01:00:00.930 --> 01:00:01.930
它说

01:00:01.930 --> 01:00:02.930
它说

01:00:02.930 --> 01:00:04.930
它说这个Template

01:00:04.930 --> 01:00:07.930
模板编译器是不可用的

01:00:07.930 --> 01:00:09.930
这个运行石是不可用的

01:00:09.930 --> 01:00:10.930
所以说

01:00:10.930 --> 01:00:11.930
因为我们打包出来的代码

01:00:11.930 --> 01:00:12.930
根本就没有编译模块的

01:00:12.930 --> 01:00:13.930
所以说

01:00:13.930 --> 01:00:14.930
它没法编译这个东西

01:00:14.930 --> 01:00:16.930
没法编译你这个植物串

01:00:16.930 --> 01:00:17.930
你还在意是吧

01:00:17.930 --> 01:00:19.930
它只能编译你上边那个

01:00:19.930 --> 01:00:20.930
Template这个节点

01:00:20.930 --> 01:00:22.930
把它编译成Render函数

01:00:22.930 --> 01:00:24.930
所以它没有

01:00:24.930 --> 01:00:25.930
没法编译这个植物串

01:00:25.930 --> 01:00:28.930
那如果说我真正的去想要

01:00:28.930 --> 01:00:29.930
让它编译怎么办

01:00:29.930 --> 01:00:30.930
编译这个植物串怎么办

01:00:30.930 --> 01:00:32.930
你需要做一个配置

01:00:32.930 --> 01:00:34.930
需要添加一个配置文件

01:00:34.930 --> 01:00:36.930
叫VU.config.js

01:00:38.930 --> 01:00:40.930
这里边要去导出一个东西

01:00:40.930 --> 01:00:41.930
导出

01:00:41.930 --> 01:00:43.930
这些基本的模块化语学

01:00:43.930 --> 01:00:44.930
你得知道

01:00:45.930 --> 01:00:47.930
导出里边一个叫做

01:00:47.930 --> 01:00:49.930
叫Rontain compiler

01:00:51.930 --> 01:00:52.930
把它设为True

01:00:52.930 --> 01:00:54.930
它是Moderns Force

01:00:54.930 --> 01:00:55.930
设为True过后

01:00:55.930 --> 01:00:56.930
那么我就知道了

01:00:56.930 --> 01:00:58.930
原来你告诉我了

01:00:58.930 --> 01:00:59.930
我打包的时候

01:00:59.930 --> 01:01:00.930
要把

01:01:00.930 --> 01:01:02.930
编译器顺便也加到打包结果里边

01:01:02.930 --> 01:01:03.930
这样子

01:01:03.930 --> 01:01:04.930
我在运行的过程中

01:01:04.930 --> 01:01:05.930
也可以编译

01:01:05.930 --> 01:01:06.930
你这样子写的过后

01:01:06.930 --> 01:01:07.930
我们再来看

01:01:07.930 --> 01:01:12.140
Template

01:01:12.140 --> 01:01:13.140
我现在不用这个Template

01:01:14.140 --> 01:01:15.140
不要了

01:01:15.140 --> 01:01:17.140
就是写个H1

01:01:21.220 --> 01:01:22.220
运行

01:01:28.240 --> 01:01:29.240
打开

01:01:32.240 --> 01:01:33.240
打开它

01:01:33.240 --> 01:01:35.240
你看是不是可以显示了

01:01:35.240 --> 01:01:36.240
现在是不是没爆错了

01:01:36.240 --> 01:01:37.240
但是这样子

01:01:37.240 --> 01:01:39.240
不建议大家这样去做

01:01:39.240 --> 01:01:41.240
不建议大家这样做

01:01:41.240 --> 01:01:42.240
因为这样做的

01:01:42.240 --> 01:01:43.240
不好的地方在于什么

01:01:43.240 --> 01:01:45.240
在于你打包结果多了一点

01:01:45.240 --> 01:01:46.240
大概多了10KB

01:01:46.240 --> 01:01:47.240
因为我们知道

01:01:47.240 --> 01:01:48.240
一个纪念室打包

01:01:48.240 --> 01:01:49.240
它会把无忧的代码

01:01:49.240 --> 01:01:50.240
和我们自己写的代码

01:01:50.240 --> 01:01:52.240
全部混在一起

01:01:52.240 --> 01:01:53.240
这是无忧的代码

01:01:53.240 --> 01:01:55.240
这是我们自己写的代码

01:01:55.240 --> 01:01:57.240
它会把它混在一起

01:01:57.240 --> 01:01:58.240
那么

01:01:58.240 --> 01:02:00.240
就会导致打包结果里面

01:02:00.240 --> 01:02:01.240
会不会变多

01:02:01.240 --> 01:02:03.240
因为它要加入编译的功能

01:02:03.240 --> 01:02:04.240
打包结果里面

01:02:04.240 --> 01:02:05.240
要加入编译的功能

01:02:05.240 --> 01:02:06.240
所以说

01:02:06.240 --> 01:02:07.240
我不建议大家打开

01:02:07.240 --> 01:02:08.240
如果说

01:02:08.240 --> 01:02:10.240
遇到一些特别

01:02:10.240 --> 01:02:11.240
非常特别的需求

01:02:11.240 --> 01:02:12.240
但是这种特别的需求

01:02:12.240 --> 01:02:13.240
我觉得也不存在

01:02:13.240 --> 01:02:14.240
一般来说

01:02:14.240 --> 01:02:15.240
不会开启这个东西

01:02:15.240 --> 01:02:16.240
它默认是force

01:02:16.240 --> 01:02:17.240
不会开启的

01:02:17.240 --> 01:02:18.240
这是无忧可逆的

01:02:18.240 --> 01:02:19.240
这就是我们的工程

01:02:19.240 --> 01:02:20.240
做了一些优化

01:02:20.240 --> 01:02:21.240
当然

01:02:21.240 --> 01:02:22.240
为什么我们的工程

01:02:22.240 --> 01:02:23.240
在实际的开发中

01:02:23.240 --> 01:02:24.240
要使用无忧可逆的

01:02:24.240 --> 01:02:25.240
去搭建工程

01:02:25.240 --> 01:02:26.240
为什么不用这种方式呢

01:02:26.240 --> 01:02:28.240
这是启动原因之一

01:02:28.240 --> 01:02:29.240
OK

01:02:29.240 --> 01:02:30.240
这一会

01:02:30.240 --> 01:02:31.240
大家能听懂吗

01:02:31.240 --> 01:02:36.410
你没什么问题

01:02:40.000 --> 01:02:42.000
为什么要打包才能运行

01:02:42.000 --> 01:02:45.440
不能直接npm装售

01:02:45.440 --> 01:02:46.440
问题是

01:02:46.440 --> 01:02:47.440
你npm装售

01:02:47.440 --> 01:02:49.440
它也是打包

01:02:49.440 --> 01:02:50.440
这个玩意

01:02:50.440 --> 01:02:51.440
它也是打包

01:02:51.440 --> 01:02:52.440
只不过

01:02:52.440 --> 01:02:53.440
它没有生成打包文件而已

01:02:54.440 --> 01:02:55.440
你知道吧

01:02:55.440 --> 01:02:56.440
那么这个玩意

01:02:56.440 --> 01:02:58.440
你要了解这一块的东西的话

01:02:58.440 --> 01:03:00.440
是有一个专门的课程

01:03:00.440 --> 01:03:01.440
叫做购建工具

01:03:03.750 --> 01:03:04.750
这购建工具

01:03:04.750 --> 01:03:06.750
它的主要作用就是

01:03:06.750 --> 01:03:08.750
我们平时用介石怎么用的

01:03:08.750 --> 01:03:09.750
都是用这种传统的方式

01:03:09.750 --> 01:03:11.750
一边上去引用一个介石

01:03:11.750 --> 01:03:12.750
然后再点

01:03:12.750 --> 01:03:13.750
写单

01:03:13.750 --> 01:03:14.750
写得舒服吗

01:03:14.750 --> 01:03:15.750
不舒服

01:03:16.750 --> 01:03:17.750
我们这里只用了一个

01:03:17.750 --> 01:03:18.750
无忧的介石

01:03:18.750 --> 01:03:19.750
而真实的项目里边

01:03:19.750 --> 01:03:21.750
我们可能要用几千个

01:03:21.750 --> 01:03:23.750
直接或间接的

01:03:23.750 --> 01:03:25.750
要使用到几千个介石

01:03:25.750 --> 01:03:27.750
那里这里一个个去写

01:03:27.750 --> 01:03:29.750
那里要发生多少次刑求

01:03:29.750 --> 01:03:31.750
我们往往是利用一些购建工具

01:03:31.750 --> 01:03:33.750
而且还要追到我们代码里边

01:03:33.750 --> 01:03:34.750
需要一些兼容性问题

01:03:34.750 --> 01:03:36.750
比方说CSS的兼容性

01:03:36.750 --> 01:03:38.750
还有介石的兼容性

01:03:38.750 --> 01:03:39.750
是不是都要考虑进去

01:03:39.750 --> 01:03:40.750
非常的麻烦

01:03:40.750 --> 01:03:42.750
所以我们就发明了一些工具

01:03:42.750 --> 01:03:43.750
这个工具

01:03:43.750 --> 01:03:45.750
可以让我们用非常烧的方式

01:03:45.750 --> 01:03:46.750
来写代码

01:03:46.750 --> 01:03:47.750
比方用这种方式

01:03:47.750 --> 01:03:48.750
是不是特别烧

01:03:49.750 --> 01:03:51.750
然后舒服服的写代码

01:03:51.750 --> 01:03:52.750
剩下的事情交给购建工具

01:03:52.750 --> 01:03:53.750
你去给我打包

01:03:54.750 --> 01:03:55.750
打包完了过后

01:03:55.750 --> 01:03:59.750
就是一个非常传统的介石

01:03:59.750 --> 01:04:00.750
就这个意思

01:04:03.750 --> 01:04:04.750
对东西打包出来了

01:04:04.750 --> 01:04:05.750
怎麽办

01:04:05.750 --> 01:04:07.750
所以说现在有一些工具

01:04:07.750 --> 01:04:08.750
比方说像

01:04:10.750 --> 01:04:11.750
叫什麽ES2

01:04:11.750 --> 01:04:12.750
ESU的

01:04:13.750 --> 01:04:14.750
或者是Vase

01:04:14.750 --> 01:04:15.750
都是一些非常不错的

01:04:15.750 --> 01:04:16.750
一些打包工具

01:04:16.750 --> 01:04:18.750
可以加速我们的打包过程

01:04:19.750 --> 01:04:20.750
还有什麽问题

01:04:20.750 --> 01:04:24.540
不能分离

01:04:24.540 --> 01:04:26.540
这是问权

01:04:26.540 --> 01:04:27.540
第四点提不动

01:04:27.540 --> 01:04:28.540
第四点

01:04:30.540 --> 01:04:31.540
你面试的时候

01:04:31.540 --> 01:04:33.540
至少要回答到一个关键的点

01:04:34.540 --> 01:04:35.540
就是

01:04:35.540 --> 01:04:37.540
模办跟蓄力动物的关系是什麽呢

01:04:37.540 --> 01:04:39.540
我们平时写的开发的时候

01:04:39.540 --> 01:04:40.540
都写的是模办

01:04:40.540 --> 01:04:41.540
都写的是这种东西

01:04:42.540 --> 01:04:43.540
写的是模办

01:04:43.540 --> 01:04:44.540
那么模办是不会

01:04:45.540 --> 01:04:46.540
到我们运行的过程中的

01:04:46.540 --> 01:04:47.540
就是运行过程中跟模办

01:04:47.540 --> 01:04:48.540
就没有关系

01:04:48.540 --> 01:04:49.540
运行的过程中

01:04:49.540 --> 01:04:51.540
是Render函数运行的

01:04:51.540 --> 01:04:53.540
所以说它必须要变成Render函数

01:04:53.540 --> 01:04:55.540
那么这个过程叫做编译

01:04:55.540 --> 01:04:57.540
模办是最终会编译成Render函数

01:04:57.540 --> 01:04:58.540
只不过呢

01:04:58.540 --> 01:05:00.540
我们如果说用传统的方式的

01:05:01.540 --> 01:05:02.540
编译发生的时间在哪呢

01:05:02.540 --> 01:05:04.540
是在运行GS代码的过程中

01:05:04.540 --> 01:05:05.540
它来编译的

01:05:05.540 --> 01:05:06.540
就是我们打开浏览器

01:05:06.540 --> 01:05:07.540
访问这个页面

01:05:07.540 --> 01:05:08.540
拿到GS的

01:05:08.540 --> 01:05:09.540
开始运行这个GS

01:05:09.540 --> 01:05:10.540
在这里进行编译的

01:05:11.540 --> 01:05:12.540
而我们使用

01:05:12.540 --> 01:05:13.540
无诱可利意大搭建工程的话

01:05:13.540 --> 01:05:14.540
它有一个预编译

01:05:15.540 --> 01:05:17.540
就是我写的这个代码

01:05:17.540 --> 01:05:18.540
是不能直接运行的

01:05:18.540 --> 01:05:19.540
因为浏览器看不懂

01:05:19.540 --> 01:05:20.540
浏览器看不懂

01:05:20.540 --> 01:05:21.540
浏览器把这个代码交给浏览器

01:05:21.540 --> 01:05:22.540
浏览器就蒙了

01:05:23.540 --> 01:05:24.540
这是啥玩意这是

01:05:24.540 --> 01:05:26.540
它根本就看不懂一个东西

01:05:26.540 --> 01:05:27.540
我们把这个代码

01:05:27.540 --> 01:05:28.540
处置粘贴

01:05:28.540 --> 01:05:29.540
交给浏览器

01:05:29.540 --> 01:05:30.540
就是啥玩意啊

01:05:30.540 --> 01:05:31.540
浏览器就直接蒙了

01:05:31.540 --> 01:05:32.540
根本就看不懂

01:05:32.540 --> 01:05:33.540
那么干嘛呀

01:05:33.540 --> 01:05:35.540
我们就必须要转换

01:05:35.540 --> 01:05:36.540
需要通过一些构建工具

01:05:36.540 --> 01:05:37.540
比方说现在这个无诱可利

01:05:37.540 --> 01:05:38.540
它要把我们

01:05:38.540 --> 01:05:39.540
这个代码要转换

01:05:39.540 --> 01:05:40.540
要进行打包

01:05:40.540 --> 01:05:41.540
打包成浏览器

01:05:41.540 --> 01:05:42.540
看得懂的代码

01:05:42.540 --> 01:05:43.540
变成这个代码

01:05:43.540 --> 01:05:44.540
压缩过后的

01:05:44.540 --> 01:05:46.540
打包过后它就能看懂了

01:05:46.540 --> 01:05:47.540
那么打包过后

01:05:47.540 --> 01:05:48.540
它就已经变成

01:05:48.540 --> 01:05:49.540
Render函数了

01:05:49.540 --> 01:05:50.540
这叫做预编译

01:05:50.540 --> 01:05:51.540
就是还没有在浏览器里面运行

01:05:51.540 --> 01:05:53.540
它就已经变成Render函数了

01:05:53.540 --> 01:05:54.540
将来在浏览器里面运行

01:05:54.540 --> 01:05:56.540
直接就运行的是Render函数

01:05:56.540 --> 01:05:57.540
不需要再编译了

01:05:57.540 --> 01:05:59.540
就是两个编译的时间点不一样

01:05:59.540 --> 01:06:01.540
你把这个回答到就ok了

01:06:03.540 --> 01:06:06.550
所以说你要注意的是

01:06:06.550 --> 01:06:08.550
在无诱在最终运行的时候

01:06:08.550 --> 01:06:09.550
运行的是Render函数

01:06:09.550 --> 01:06:10.550
而不是模办

01:06:10.550 --> 01:06:11.550
所以说模办中

01:06:11.550 --> 01:06:12.550
各种语法

01:06:12.550 --> 01:06:13.550
在虚拟通过通知

01:06:13.550 --> 01:06:14.550
都是不存在的

01:06:14.550 --> 01:06:15.550
他们都会变成

01:06:15.550 --> 01:06:17.550
虚拟动物的配置

01:06:17.550 --> 01:06:18.550
啥意思

01:06:18.550 --> 01:06:19.550
我来看一下吧

01:06:19.550 --> 01:06:25.810
我先运行出来

01:06:25.810 --> 01:06:29.910
啥意思

01:06:29.910 --> 01:06:30.910
就是我们平时写单码的时候

01:06:30.910 --> 01:06:32.910
把这些可以拿去把他去掉

01:06:38.300 --> 01:06:40.300
你看我们比方说在这里

01:06:40.300 --> 01:06:43.300
去做一些简单的事情

01:06:43.300 --> 01:06:45.300
比方说click

01:06:45.300 --> 01:06:47.300
做这个实现

01:06:47.300 --> 01:06:48.300
做这个实现

01:06:48.300 --> 01:06:50.300
然后点击的时候

01:06:50.300 --> 01:06:52.300
我们运行

01:06:52.300 --> 01:06:54.300
handle click

01:06:54.300 --> 01:06:55.300
运行一个方法

01:06:55.300 --> 01:06:57.300
message

01:06:57.300 --> 01:06:59.300
handle click

01:06:59.300 --> 01:07:06.660
输出 click

01:07:06.660 --> 01:07:07.660
对吧

01:07:07.660 --> 01:07:11.160
点击输出 click

01:07:11.160 --> 01:07:12.160
这出车

01:07:12.160 --> 01:07:13.160
这无诱里面模办出车实现

01:07:13.160 --> 01:07:14.160
对吧

01:07:14.160 --> 01:07:15.160
这样子写可以

01:07:15.160 --> 01:07:16.160
也可以用什么

01:07:16.160 --> 01:07:17.160
vn on

01:07:17.160 --> 01:07:18.160
都可以

01:07:18.160 --> 01:07:19.160
对吧

01:07:19.160 --> 01:07:20.160
都一样的

01:07:20.160 --> 01:07:21.160
或者说

01:07:21.160 --> 01:07:23.160
我们去加上一些

01:07:23.160 --> 01:07:25.160
vif

01:07:25.160 --> 01:07:26.160
要不要显示呢

01:07:26.160 --> 01:07:28.160
我们可以给他一个数据

01:07:28.160 --> 01:07:31.540
我写进非常简单的

01:07:32.540 --> 01:07:34.540
要不要显示呢

01:07:34.540 --> 01:07:36.540
取决这个数据是不是

01:07:36.540 --> 01:07:37.540
是去的话我就显示

01:07:37.540 --> 01:07:38.540
不是去的话

01:07:38.540 --> 01:07:40.540
我就不显示

01:07:40.540 --> 01:07:42.540
然后我们上面有个按钮

01:07:45.540 --> 01:07:46.540
点击的时候呢

01:07:46.540 --> 01:07:48.540
我切换这个显示状态

01:07:48.540 --> 01:07:50.540
去等于

01:07:50.540 --> 01:07:52.540
去变force

01:07:52.540 --> 01:07:56.770
force变出

01:07:56.770 --> 01:07:57.770
好

01:07:57.770 --> 01:07:58.770
非常简单的功能吧

01:07:58.770 --> 01:08:00.770
那么我们就来研究一下

01:08:02.770 --> 01:08:06.210
就这个玩意

01:08:06.210 --> 01:08:07.210
它变成

01:08:07.210 --> 01:08:08.210
我们刚才说了

01:08:08.210 --> 01:08:09.210
这个玩意一定会变成Render

01:08:09.210 --> 01:08:11.210
毫无疑问的

01:08:11.210 --> 01:08:13.210
Render里面还认识这个东西吗

01:08:13.210 --> 01:08:14.210
不认识

01:08:14.210 --> 01:08:15.210
Render里面还认识这个东西吗

01:08:15.210 --> 01:08:16.210
不认识

01:08:16.210 --> 01:08:17.210
那它变成Render

01:08:17.210 --> 01:08:19.210
又变成了什么样子了呢

01:08:19.210 --> 01:08:20.210
我来看一下吧

01:08:20.210 --> 01:08:21.210
它变成Render过去变成这个样子了

01:08:21.210 --> 01:08:22.210
我就用Render

01:08:22.210 --> 01:08:23.210
还是给你写一下

01:08:23.210 --> 01:08:25.210
Render

01:08:25.210 --> 01:08:26.210
我今天可能要加班啊

01:08:26.210 --> 01:08:27.210
可以吗

01:08:27.210 --> 01:08:29.210
有点心理准备啊

01:08:29.210 --> 01:08:30.210
比如说我把这个东西

01:08:30.210 --> 01:08:32.210
完全用Render给你写出来

01:08:32.210 --> 01:08:34.210
来吧我们来写呗

01:08:34.210 --> 01:08:35.210
H

01:08:35.210 --> 01:08:36.210
我们要生成一个什么呢

01:08:36.210 --> 01:08:38.210
生成一个DIV

01:08:38.210 --> 01:08:39.210
对不对

01:08:39.210 --> 01:08:41.210
ID为i

01:08:41.210 --> 01:08:43.210
所以这个参数是配置

01:08:43.210 --> 01:08:45.210
HTRs

01:08:45.210 --> 01:08:46.210
ID为i

01:08:46.210 --> 01:08:48.210
刚才写过了对吧

01:08:48.210 --> 01:08:49.210
一个参数

01:08:49.210 --> 01:08:51.210
这个配置

01:08:51.210 --> 01:08:52.210
好

01:08:52.210 --> 01:08:53.210
接下来呢

01:08:53.210 --> 01:08:54.210
是有一些指纸元数

01:08:54.210 --> 01:08:55.210
有哪两个指纸元数

01:08:55.210 --> 01:08:57.210
一个button一个H1

01:08:57.210 --> 01:09:00.210
我们先写这个button

01:09:00.210 --> 01:09:01.210
button

01:09:02.210 --> 01:09:03.210
它里面有数

01:09:03.210 --> 01:09:04.210
有配置吗

01:09:04.210 --> 01:09:05.210
有啊有注射事件

01:09:05.210 --> 01:09:06.210
那么这个事件什么写的呢

01:09:06.210 --> 01:09:08.210
事件是用一个on来配置的

01:09:08.210 --> 01:09:10.210
有这个东西会变成这个

01:09:10.210 --> 01:09:11.210
on

01:09:11.210 --> 01:09:12.210
什么事件呢

01:09:12.210 --> 01:09:13.210
叫click事件

01:09:13.210 --> 01:09:14.210
后面写的什么呢

01:09:14.210 --> 01:09:15.210
写的是一个函数

01:09:15.210 --> 01:09:17.210
我们可以用箭头函数啊

01:09:19.210 --> 01:09:20.210
on

01:09:20.210 --> 01:09:21.210
点击的时候

01:09:21.210 --> 01:09:22.210
你看这个玩意变成这个

01:09:22.210 --> 01:09:23.210
on click

01:09:23.210 --> 01:09:24.210
点击的时候

01:09:24.210 --> 01:09:25.210
它会运行这个函数

01:09:25.210 --> 01:09:26.210
这个函数干嘛呀

01:09:26.210 --> 01:09:29.210
把当前的秀变成

01:09:29.210 --> 01:09:30.210
相反的去

01:09:32.210 --> 01:09:33.210
第一个button

01:09:33.210 --> 01:09:34.210
button里面的纸呢

01:09:34.210 --> 01:09:35.210
叫toe

01:09:36.210 --> 01:09:37.210
button的配置

01:09:37.210 --> 01:09:38.210
button的纸呢

01:09:38.210 --> 01:09:39.210
叫做toe

01:09:40.210 --> 01:09:41.210
你看是吧

01:09:41.210 --> 01:09:42.210
button就生成出来了

01:09:42.210 --> 01:09:43.210
好

01:09:43.210 --> 01:09:44.210
接下来下面这个H1

01:09:44.210 --> 01:09:45.210
H1呢

01:09:45.210 --> 01:09:46.210
它可能有

01:09:46.210 --> 01:09:47.210
也可能没有

01:09:47.210 --> 01:09:48.210
对吧

01:09:48.210 --> 01:09:49.210
对吧

01:09:49.210 --> 01:09:50.210
也就是说

01:09:50.210 --> 01:09:51.210
后面这个元数

01:09:51.210 --> 01:09:52.210
它有可能有

01:09:52.210 --> 01:09:53.210
有可能没有

01:09:53.210 --> 01:09:54.210
这个地方

01:09:54.210 --> 01:09:55.210
所以说呢

01:09:55.210 --> 01:09:56.210
我们这个地方

01:09:56.210 --> 01:09:57.210
就怎么办呢

01:09:57.210 --> 01:09:58.210
我就用一个

01:09:58.210 --> 01:09:59.210
比方说

01:09:59.210 --> 01:10:00.210
z是秀

01:10:00.210 --> 01:10:01.210
有值吗

01:10:01.210 --> 01:10:02.210
有值的话

01:10:02.210 --> 01:10:03.210
我就给你生成一个

01:10:03.210 --> 01:10:04.210
H1元数

01:10:06.210 --> 01:10:07.210
然后呢

01:10:07.210 --> 01:10:08.210
H1元数还有一些配置

01:10:08.210 --> 01:10:09.210
叫on

01:10:09.210 --> 01:10:10.210
它这个代码是

01:10:10.210 --> 01:10:11.210
比较难看啊

01:10:11.210 --> 01:10:12.210
你们听这个意思就行了啊

01:10:12.210 --> 01:10:14.210
这个代码肯定比较难看

01:10:15.210 --> 01:10:16.210
点击的时候干嘛呀

01:10:16.210 --> 01:10:17.210
点击的时候

01:10:17.210 --> 01:10:18.210
我们运行z

01:10:18.210 --> 01:10:19.210
tando click

01:10:20.210 --> 01:10:21.210
所以我们运行的是啥

01:10:21.210 --> 01:10:22.210
点击的时候

01:10:22.210 --> 01:10:23.210
就这个click变成这个样子的

01:10:23.210 --> 01:10:24.210
on

01:10:24.210 --> 01:10:25.210
点击这个H1

01:10:25.210 --> 01:10:26.210
当点击的时候

01:10:26.210 --> 01:10:27.210
就运行这个

01:10:27.210 --> 01:10:28.210
运行z里边

01:10:28.210 --> 01:10:29.210
handle click

01:10:30.210 --> 01:10:31.210
运行里边的内容呢

01:10:31.210 --> 01:10:32.210
是hello

01:10:32.210 --> 01:10:33.210
w

01:10:33.210 --> 01:10:34.210
这是

01:10:34.210 --> 01:10:35.210
它为秀

01:10:35.210 --> 01:10:36.210
为q的时候

01:10:36.210 --> 01:10:38.210
那么它为force的时候呢

01:10:38.210 --> 01:10:39.210
那我给它传一个on的

01:10:39.210 --> 01:10:42.220
一番

01:10:42.220 --> 01:10:43.220
啥都不先说

01:10:44.220 --> 01:10:46.220
好 咱们来看一下吧

01:10:46.220 --> 01:10:47.220
我们把这个模板

01:10:47.220 --> 01:10:48.220
就去干掉了

01:10:48.220 --> 01:10:52.750
我直接用Render函数写

01:10:52.750 --> 01:10:54.750
效果完全一样的

01:10:54.750 --> 01:10:55.750
也就是说我们

01:10:55.750 --> 01:10:57.750
z把警到Render函数里边

01:10:57.750 --> 01:10:59.750
什么这些指令啊

01:10:59.750 --> 01:11:01.750
这些事件啊

01:11:01.750 --> 01:11:02.750
这些乱七八糟的东西

01:11:02.750 --> 01:11:03.750
都不存在了

01:11:03.750 --> 01:11:04.750
这些东西

01:11:04.750 --> 01:11:06.750
全是補版愚法

01:11:06.750 --> 01:11:07.750
方便我们写代码的

01:11:07.750 --> 01:11:08.750
方便我们写是

01:11:08.750 --> 01:11:09.750
写起来舒服的

01:11:09.750 --> 01:11:10.750
真正的

01:11:10.750 --> 01:11:11.750
真儿巴基在运行的时候

01:11:11.750 --> 01:11:12.750
根本就不存在

01:11:13.750 --> 01:11:14.750
这是

01:11:20.750 --> 01:11:21.750
对 你如果说

01:11:21.750 --> 01:11:22.750
完全没有五究基础的话

01:11:22.750 --> 01:11:23.750
你还是看看

01:11:23.750 --> 01:11:24.750
咱们那个免费课吧

01:11:24.750 --> 01:11:25.750
免费课

01:11:25.750 --> 01:11:26.750
非常简单的

01:11:26.750 --> 01:11:28.750
先把一些基础

01:11:29.750 --> 01:11:30.750
至少知道什么叫

01:11:30.750 --> 01:11:31.750
组建什么叫

01:11:31.750 --> 01:11:32.750
数据想用式

01:11:32.750 --> 01:11:33.750
这些东西都知道

01:11:33.750 --> 01:11:35.750
你一上来就听这个

01:11:35.750 --> 01:11:36.750
确实

01:11:36.750 --> 01:11:37.750
扛不住

01:11:37.750 --> 01:11:39.750
没有人这么干的

01:11:39.750 --> 01:11:40.750
但是没关系啊

01:11:40.750 --> 01:11:41.750
你如果说

01:11:41.750 --> 01:11:42.750
反正这个党东西

01:11:42.750 --> 01:11:43.750
这个东西有路博客

01:11:43.750 --> 01:11:44.750
你要学前端的话

01:11:44.750 --> 01:11:45.750
唯有你肯定得学

01:11:45.750 --> 01:11:47.750
那以后我们慢慢看

01:11:47.750 --> 01:11:51.340
好了

01:11:51.340 --> 01:11:52.340
训练动物是

01:11:52.340 --> 01:11:54.340
根据AST抽象出来的

01:11:55.340 --> 01:11:56.340
AST那剩表述

01:11:56.340 --> 01:11:58.340
我们写的模板的

01:11:58.340 --> 01:11:59.340
比方说吧

01:11:59.340 --> 01:12:00.340
我举个例子

01:12:00.340 --> 01:12:02.340
它说我们平时写模板的时候

01:12:02.340 --> 01:12:03.340
v4

01:12:03.340 --> 01:12:05.340
v4是不是要可以写v4

01:12:05.340 --> 01:12:06.340
那么这个v4

01:12:06.340 --> 01:12:07.340
比方说要循环一千次

01:12:07.340 --> 01:12:09.340
到了这个AST里边

01:12:09.340 --> 01:12:10.340
这个东西只有一个

01:12:10.340 --> 01:12:11.340
只有一个节点

01:12:13.340 --> 01:12:14.340
抽象游发书里边

01:12:14.340 --> 01:12:15.340
它只是一个DIV

01:12:15.340 --> 01:12:16.340
DIV里边8成

01:12:16.340 --> 01:12:17.340
8成里面有个A11

01:12:17.340 --> 01:12:18.340
A11里面有一个东西

01:12:18.340 --> 01:12:19.340
叫做v4

01:12:19.340 --> 01:12:20.340
它只是把它记录一下

01:12:20.340 --> 01:12:21.340
但是到了虚拟节点里边

01:12:21.340 --> 01:12:22.340
它就真人八经的

01:12:22.340 --> 01:12:23.340
生成了一千个

01:12:24.340 --> 01:12:26.340
我举个小例子

01:12:26.340 --> 01:12:27.340
就是AST

01:12:27.340 --> 01:12:28.340
它主要是描述

01:12:28.340 --> 01:12:29.340
5半里边写到啥

01:12:30.340 --> 01:12:31.340
虚拟动物的描述

01:12:31.340 --> 01:12:32.340
是我们界面上

01:12:32.340 --> 01:12:33.340
应该有啥

01:12:33.340 --> 01:12:34.340
这个两个是不是有差异的

01:12:40.640 --> 01:12:41.640
好

01:12:41.640 --> 01:12:42.640
那么今天的东西

01:12:42.640 --> 01:12:43.640
我们就讲到这了

01:12:43.640 --> 01:12:44.640
接下来是一个安定

01:12:45.640 --> 01:12:46.640
9.24

01:12:46.640 --> 01:12:47.640
要加块板

01:12:47.640 --> 01:12:49.950
要加块板

01:12:49.950 --> 01:12:50.950
这个安定

01:12:50.950 --> 01:12:51.950
就是现在

01:12:51.950 --> 01:12:52.950
你不是一个普通开发者了

01:12:52.950 --> 01:12:53.950
你是普通开发者

01:12:53.950 --> 01:12:54.950
肯定不会让你做这个

01:12:55.950 --> 01:12:56.950
你现在到了一家公司

01:12:56.950 --> 01:12:57.950
公司里边

01:12:57.950 --> 01:12:58.950
它有很多的产品线

01:13:00.950 --> 01:13:01.950
很多产品线里边

01:13:01.950 --> 01:13:02.950
都有遇到一个共同的需求

01:13:03.950 --> 01:13:04.950
就是我又有一篇文章

01:13:05.950 --> 01:13:06.950
我要生成这个文章的目录

01:13:08.950 --> 01:13:09.950
以前这个公司咋办的呢

01:13:10.950 --> 01:13:11.950
以前这个公司

01:13:11.950 --> 01:13:12.950
就是每个项目组

01:13:12.950 --> 01:13:13.950
比方你开发

01:13:14.950 --> 01:13:15.950
你开发商城的

01:13:15.950 --> 01:13:16.950
里边有一些

01:13:16.950 --> 01:13:18.950
带货的一些博客文章

01:13:18.950 --> 01:13:19.950
就把我生成目录

01:13:20.950 --> 01:13:21.950
那么你去做

01:13:22.950 --> 01:13:23.950
然后你这个项目组

01:13:24.950 --> 01:13:25.950
是搞定后台管理系统的

01:13:26.950 --> 01:13:27.950
后台管理系统里边

01:13:27.950 --> 01:13:29.950
有一些文件通知

01:13:29.950 --> 01:13:30.950
公司内部的文件通知

01:13:30.950 --> 01:13:31.950
那么里边是一篇文章

01:13:31.950 --> 01:13:32.950
我要生成它的目录

01:13:33.950 --> 01:13:34.950
它都有相同的需求

01:13:35.950 --> 01:13:36.950
于是呢

01:13:36.950 --> 01:13:37.950
这个项目经理就觉得

01:13:38.950 --> 01:13:40.950
我每一次项目都要去生成目录

01:13:40.950 --> 01:13:41.950
去特别麻烦

01:13:41.950 --> 01:13:42.950
我能不能去开发

01:13:42.950 --> 01:13:43.950
一个通用型的组件

01:13:44.950 --> 01:13:46.950
在任何项目里边都可以用

01:13:46.950 --> 01:13:47.950
你看这个就是搞几个开发了

01:13:48.950 --> 01:13:49.950
考虑的问题完全不一样

01:13:50.950 --> 01:13:51.950
那我能不能去这样做

01:13:52.950 --> 01:13:53.950
这个组件可以这样子也用

01:13:53.950 --> 01:13:55.950
这个组件名字叫做TOC

01:13:55.950 --> 01:13:57.950
叫title of content

01:13:58.950 --> 01:13:59.950
我把一些文章内容

01:13:59.950 --> 01:14:00.950
就全部扔进来

01:14:01.950 --> 01:14:02.950
全部扔进来

01:14:03.950 --> 01:14:04.950
通过这种方式

01:14:04.950 --> 01:14:05.950
好扔进来过后

01:14:05.950 --> 01:14:06.950
你这个组件要自动的

01:14:06.950 --> 01:14:08.950
帮我生成目录

01:14:09.950 --> 01:14:10.950
你想吧

01:14:10.950 --> 01:14:11.950
你如果说只学了

01:14:11.950 --> 01:14:12.950
唯有基础

01:14:12.950 --> 01:14:13.950
我看你怎么做

01:14:13.950 --> 01:14:14.950
你没法做

01:14:14.950 --> 01:14:15.950
啥意思呢

01:14:15.950 --> 01:14:16.950
我们接下来看

01:14:16.950 --> 01:14:18.950
下面这个TOC content

01:14:22.950 --> 01:14:23.950
关闭啊

01:14:28.630 --> 01:14:29.630
我这边呢

01:14:29.630 --> 01:14:30.630
就在做这个组件的时候

01:14:30.630 --> 01:14:31.630
我会做的比较简单

01:14:31.630 --> 01:14:32.630
因为如果我

01:14:32.630 --> 01:14:33.630
真人八经的

01:14:33.630 --> 01:14:34.630
要把它当成

01:14:34.630 --> 01:14:36.630
一个通用组件的开发的话

01:14:36.630 --> 01:14:37.630
你要封掉啊

01:14:38.630 --> 01:14:39.630
我以后的课件里边

01:14:39.630 --> 01:14:40.630
倒是做了一个比较

01:14:40.630 --> 01:14:42.630
功能比较完善的

01:14:42.630 --> 01:14:44.630
你们有兴趣的朋友可以看一下

01:14:44.630 --> 01:14:45.630
非常复杂的

01:14:45.630 --> 01:14:46.630
我这里呢

01:14:46.630 --> 01:14:47.630
就尽量简单

01:14:47.630 --> 01:14:48.630
给你们说这个意思就行了

01:14:48.630 --> 01:14:49.630
告诉你们

01:14:49.630 --> 01:14:50.630
为什么这个组件

01:14:50.630 --> 01:14:51.630
就需要用到

01:14:51.630 --> 01:14:52.630
轮道函数和虚动

01:14:55.460 --> 01:14:56.460
看一下这个组件

01:14:56.460 --> 01:14:57.460
这个组件

01:14:57.460 --> 01:14:58.460
做的事情特别简单

01:14:58.460 --> 01:14:59.460
我这里呢

01:14:59.460 --> 01:15:00.460
意思就是说

01:15:00.460 --> 01:15:02.460
你需要给我开发一个组件出来

01:15:03.460 --> 01:15:04.460
名字呢就叫做TOC

01:15:05.460 --> 01:15:06.460
这个组件

01:15:10.410 --> 01:15:11.410
我目前随便写个吧

01:15:11.410 --> 01:15:12.410
TOC

01:15:12.410 --> 01:15:13.410
然后呢

01:15:13.410 --> 01:15:14.410
这个组件呢

01:15:14.410 --> 01:15:15.410
我都拿的去写

01:15:15.410 --> 01:15:16.410
等下是扔着吧

01:15:16.410 --> 01:15:17.410
以后可能有用

01:15:17.410 --> 01:15:19.410
然后这个组件怎么用呢

01:15:19.410 --> 01:15:20.410
假设你写好了啊

01:15:20.410 --> 01:15:22.410
我倒入这个组件

01:15:22.410 --> 01:15:23.410
TOC

01:15:26.910 --> 01:15:28.910
Component TOC

01:15:28.910 --> 01:15:29.910
然后呢

01:15:29.910 --> 01:15:30.910
我去注册一下这个组件

01:15:30.910 --> 01:15:32.910
Component TOC

01:15:32.910 --> 01:15:33.910
好

01:15:33.910 --> 01:15:34.910
怎么用呢

01:15:34.910 --> 01:15:35.910
比方说我这

01:15:38.910 --> 01:15:40.910
我就把这个复制一下

01:15:40.910 --> 01:15:42.910
你们看一下就明白了

01:15:43.910 --> 01:15:45.910
都是一些测试代码

01:15:45.910 --> 01:15:50.910
折叠一下啊

01:15:50.910 --> 01:15:51.910
啥意思呢

01:15:51.910 --> 01:15:52.910
就是我把里边

01:15:52.910 --> 01:15:54.910
给它传一些内容进去

01:15:54.910 --> 01:15:55.910
你看有H1元数

01:15:55.910 --> 01:15:56.910
有H2元数

01:15:56.910 --> 01:15:57.910
有H2元数

01:15:57.910 --> 01:15:58.910
H1元数

01:15:58.910 --> 01:15:59.910
H2元数

01:15:59.910 --> 01:16:00.910
那么这些都是标题

01:16:00.910 --> 01:16:01.910
里面都是

01:16:01.910 --> 01:16:02.910
每个标题

01:16:02.910 --> 01:16:03.910
后边的内容对吧

01:16:03.910 --> 01:16:04.910
这标题

01:16:04.910 --> 01:16:05.910
标题内容

01:16:05.910 --> 01:16:06.910
那么啥意思呢

01:16:06.910 --> 01:16:07.910
你这个组件叫

01:16:07.910 --> 01:16:08.910
我传入的这些标题

01:16:08.910 --> 01:16:10.910
自动的生成一个目录

01:16:10.910 --> 01:16:11.910
最终的结果呢

01:16:11.910 --> 01:16:12.910
应该是这个样子

01:16:12.910 --> 01:16:13.910
下面这个样子

01:16:13.910 --> 01:16:15.910
而且点一下这个目录

01:16:15.910 --> 01:16:17.910
它还会能够链接到

01:16:17.910 --> 01:16:19.910
这个文章相应的位置

01:16:19.910 --> 01:16:20.910
你看

01:16:20.910 --> 01:16:22.910
这个组件要做出这件事情

01:16:22.910 --> 01:16:24.910
那你说这个图形大小

01:16:24.910 --> 01:16:26.910
也是懵的

01:16:26.910 --> 01:16:27.910
因为我们目前能看

01:16:27.910 --> 01:16:28.910
能够看出来的东西

01:16:28.910 --> 01:16:29.910
是什么呢

01:16:29.910 --> 01:16:30.910
这个组件里边

01:16:30.910 --> 01:16:31.910
给它传了个什么插槽

01:16:31.910 --> 01:16:32.910
对吧

01:16:32.910 --> 01:16:33.910
我那个伏约工艺科里边

01:16:33.910 --> 01:16:35.910
应该是讲过插槽的哦

01:16:36.910 --> 01:16:38.910
应该是讲过的啊

01:16:38.910 --> 01:16:39.910
插槽

01:16:43.250 --> 01:16:44.250
非常简单啊

01:16:44.250 --> 01:16:45.250
这个插槽

01:16:46.250 --> 01:16:48.250
也就是这个玩意儿

01:16:48.250 --> 01:16:49.250
它传过去了

01:16:49.250 --> 01:16:51.250
传到这边来了

01:16:51.250 --> 01:16:52.250
如果说你用传统的方式开发

01:16:52.250 --> 01:16:54.250
你都不知道打写这个玩意儿

01:16:54.250 --> 01:16:56.250
比方说你尝试写一下吧

01:16:56.250 --> 01:16:58.250
我这个组件里边有个插槽

01:16:58.250 --> 01:16:59.250
对吧

01:16:59.250 --> 01:17:01.250
这个东西就传到哪儿了

01:17:01.250 --> 01:17:03.250
看一下啊

01:17:03.250 --> 01:17:05.250
比方说我这里有个DIV

01:17:05.250 --> 01:17:07.250
给个内容是吗

01:17:07.250 --> 01:17:09.250
UCA Container

01:17:09.250 --> 01:17:10.250
那样子就一个DIV

01:17:10.250 --> 01:17:11.250
然后这个snot

01:17:11.250 --> 01:17:12.250
对吧

01:17:12.250 --> 01:17:13.250
这样子呢是比较简单的

01:17:13.250 --> 01:17:15.250
来运行看一下

01:17:15.250 --> 01:17:16.250
那么于是呢

01:17:16.250 --> 01:17:18.250
这边左边这个东西

01:17:18.250 --> 01:17:20.250
左边这个东西

01:17:20.250 --> 01:17:21.250
就这一坨

01:17:21.250 --> 01:17:22.250
就传到了这个位置

01:17:22.250 --> 01:17:23.250
对吧

01:17:23.250 --> 01:17:24.250
传到这个组件这个位置

01:17:24.250 --> 01:17:26.250
那边选择出来什么

01:17:26.250 --> 01:17:27.250
选择出来一个DIV

01:17:27.250 --> 01:17:28.250
然后一个snot

01:17:28.250 --> 01:17:29.250
对吧

01:17:29.250 --> 01:17:30.250
好

01:17:30.250 --> 01:17:31.250
咱们先运行出来看一下

01:17:31.250 --> 01:17:33.940
能不能选择出来

01:17:33.940 --> 01:17:34.940
能选择出来对吧

01:17:34.940 --> 01:17:35.940
我们把一个样式

01:17:35.940 --> 01:17:36.940
稍微的设置一下

01:17:36.940 --> 01:17:37.940
这个样式不是关键

01:17:37.940 --> 01:17:39.940
为了好看一点啊

01:17:39.940 --> 01:17:40.940
我在这个APP里边

01:17:40.940 --> 01:17:44.450
给它加上一个style

01:17:44.450 --> 01:17:46.450
设置个DIV吧

01:17:46.450 --> 01:17:49.450
外面再逃一个DIV吧

01:17:49.450 --> 01:17:53.870
然后呢

01:17:53.870 --> 01:17:54.870
给它跟那样式吧

01:17:54.870 --> 01:17:56.870
给它的ID就得了

01:17:56.870 --> 01:17:57.870
APP

01:17:57.870 --> 01:17:58.870
样式我写简单点啊

01:17:58.870 --> 01:17:59.870
样式不是关键

01:17:59.870 --> 01:18:00.870
然后呢

01:18:00.870 --> 01:18:01.870
我给它设置一个团图

01:18:01.870 --> 01:18:02.870
500的像素

01:18:02.870 --> 01:18:03.870
然后呢Marty

01:18:03.870 --> 01:18:04.870
0

01:18:04.870 --> 01:18:05.870
凹凸

01:18:05.870 --> 01:18:09.250
就是我们的文章

01:18:09.250 --> 01:18:10.250
现在呢

01:18:10.250 --> 01:18:11.250
我要让你

01:18:11.250 --> 01:18:12.250
用这个组件

01:18:12.250 --> 01:18:13.250
我们自动的帮助我

01:18:13.250 --> 01:18:15.250
生成一个目录在这

01:18:15.250 --> 01:18:16.250
然后呢

01:18:16.250 --> 01:18:17.250
点击这个目录里边东西

01:18:17.250 --> 01:18:18.250
还能跳到这个位置

01:18:18.250 --> 01:18:19.250
你看你想想

01:18:19.250 --> 01:18:20.250
你这个杂货吗

01:18:20.250 --> 01:18:24.260
嗯

01:18:24.260 --> 01:18:26.260
你现在没发写

01:18:26.260 --> 01:18:27.260
比方说你以后

01:18:27.260 --> 01:18:28.260
能写啊

01:18:28.260 --> 01:18:30.260
你看你把传组东西

01:18:30.260 --> 01:18:31.260
传组东西放到这

01:18:31.260 --> 01:18:32.260
这来了对吧

01:18:32.260 --> 01:18:33.260
放到这个snot里边

01:18:33.260 --> 01:18:34.260
5位就在这里

01:18:34.260 --> 01:18:35.260
加上一个目录嘛

01:18:35.260 --> 01:18:36.260
对吧

01:18:36.260 --> 01:18:37.260
这个toc

01:18:37.260 --> 01:18:38.260
加上那个目录吧

01:18:38.260 --> 01:18:39.260
我透过这里写一些A元数嘛

01:18:39.260 --> 01:18:40.260
是吧

01:18:40.260 --> 01:18:42.260
前APP1

01:18:42.260 --> 01:18:43.260
前APP1

01:18:43.260 --> 01:18:45.260
然后呢用个锚链接嘛

01:18:45.260 --> 01:18:46.260
连接到哪呢

01:18:46.260 --> 01:18:48.260
连接到这个SE的一个ID

01:18:48.260 --> 01:18:49.260
SE给他个ID

01:18:50.260 --> 01:18:51.260
比方说啊

01:18:51.260 --> 01:18:52.260
就能够想个办法

01:18:52.260 --> 01:18:53.260
个1

01:18:54.260 --> 01:18:55.260
取个例子啊

01:18:56.260 --> 01:18:57.260
1

01:18:57.260 --> 01:18:59.260
那么点击这个A元数

01:18:59.260 --> 01:19:00.260
到这了

01:19:00.260 --> 01:19:01.260
那我们试一下吧

01:19:01.260 --> 01:19:03.260
啊

01:19:04.260 --> 01:19:05.260
放到这

01:19:07.260 --> 01:19:08.260
IT

01:19:09.260 --> 01:19:10.260
我这没保存啊

01:19:10.260 --> 01:19:11.260
这边

01:19:11.260 --> 01:19:12.260
你看是不跳到这了

01:19:12.260 --> 01:19:13.260
放到这了

01:19:13.260 --> 01:19:15.260
然后稍微的设置一下样式啊

01:19:15.260 --> 01:19:16.260
把这个地方的设置

01:19:16.260 --> 01:19:18.260
设置成为固定定位

01:19:18.260 --> 01:19:19.260
比方说简单写一下

01:19:19.260 --> 01:19:20.260
非常简单的写一下

01:19:24.260 --> 01:19:25.260
然后呢

01:19:25.260 --> 01:19:27.260
toc

01:19:27.260 --> 01:19:30.260
然后给他随便设置个盘顶吧

01:19:30.260 --> 01:19:32.260
盘顶为20个相处

01:19:32.260 --> 01:19:34.260
然后呢给他设置一个

01:19:34.260 --> 01:19:36.260
啊男孩子吧

01:19:36.260 --> 01:19:37.260
2

01:19:38.260 --> 01:19:39.260
你看

01:19:39.260 --> 01:19:40.260
出来到了

01:19:40.260 --> 01:19:41.260
跳到了

01:19:41.260 --> 01:19:43.260
那能不能平滑的移过去呢

01:19:43.260 --> 01:19:44.260
也很简单吧

01:19:44.260 --> 01:19:45.260
平滑的移过去

01:19:45.260 --> 01:19:46.260
你在这里呢

01:19:46.260 --> 01:19:47.260
给页面上

01:19:47.260 --> 01:19:49.260
ATM的设置一个

01:19:49.260 --> 01:19:50.260
叫做

01:19:51.260 --> 01:19:52.260
score

01:19:52.260 --> 01:19:53.260
behave it

01:19:54.260 --> 01:19:56.260
就是平滑平滑滚动

01:19:56.260 --> 01:19:57.260
滚动ATM的时候

01:19:57.260 --> 01:19:58.260
平滑滚动

01:19:58.260 --> 01:19:59.260
这也很简单

01:19:59.260 --> 01:20:01.260
这些东西都是非常简单的东西啊

01:20:05.980 --> 01:20:06.980
放心了

01:20:06.980 --> 01:20:07.980
点击

01:20:09.980 --> 01:20:10.980
怎么只跳到这呢

01:20:10.980 --> 01:20:12.980
我从这里开始了

01:20:13.980 --> 01:20:14.980
好

01:20:15.980 --> 01:20:16.980
嗯

01:20:16.980 --> 01:20:17.980
对跳过来了是吧

01:20:18.980 --> 01:20:19.980
这样子也可以

01:20:19.980 --> 01:20:21.980
但是你现在发现问题没有

01:20:21.980 --> 01:20:23.980
你凭什么知道这里面有一个

01:20:23.980 --> 01:20:24.980
chapter 1呢

01:20:24.980 --> 01:20:25.980
凭什么知道呢

01:20:25.980 --> 01:20:27.980
那万一他不叫chapter 1

01:20:27.980 --> 01:20:28.980
叫chapter 2呢

01:20:28.980 --> 01:20:30.980
而且呢这个ID别人是没有给的呀

01:20:30.980 --> 01:20:31.980
你凭什么要别人给ID呢

01:20:31.980 --> 01:20:33.980
别人根本就没有打算给ID

01:20:33.980 --> 01:20:34.980
所以这个组建

01:20:34.980 --> 01:20:37.980
他承担了一个非常非常沉重的任务

01:20:37.980 --> 01:20:38.980
第一个沉重的任务就是

01:20:38.980 --> 01:20:40.980
我要自动的去生成这些A元素

01:20:40.980 --> 01:20:42.980
我都不知道有多少个A元素

01:20:42.980 --> 01:20:44.980
因为我不知道有多少个标题

01:20:44.980 --> 01:20:45.980
第二个沉重的任务

01:20:45.980 --> 01:20:46.980
我还要负责

01:20:46.980 --> 01:20:47.980
给他传

01:20:47.980 --> 01:20:49.980
给我传进来的这个snot

01:20:50.980 --> 01:20:51.980
里边每一个标题

01:20:51.980 --> 01:20:53.980
自动的加一个ID

01:20:54.980 --> 01:20:56.980
我这个组建有两个重要的任务

01:20:56.980 --> 01:20:57.980
第一个任务

01:20:57.980 --> 01:21:00.980
根据传入的

01:21:01.980 --> 01:21:04.980
所有A起元素

01:21:05.980 --> 01:21:07.980
生成A元素

01:21:08.980 --> 01:21:10.980
基本权传入所有的A起元素

01:21:10.980 --> 01:21:11.980
生成A元素

01:21:11.980 --> 01:21:12.980
第二个

01:21:13.980 --> 01:21:17.980
设置每一个A起元素的ID

01:21:17.980 --> 01:21:19.980
A元素要生成毛链接贸

01:21:20.980 --> 01:21:21.980
所以说呢

01:21:21.980 --> 01:21:22.980
它得有ID

01:21:24.980 --> 01:21:25.980
懂这个意思吧

01:21:25.980 --> 01:21:26.980
问题来了

01:21:26.980 --> 01:21:27.980
那怎么弄呢

01:21:28.980 --> 01:21:29.980
咋弄呢

01:21:29.980 --> 01:21:31.980
你用传统的方式跟妹搞不定

01:21:31.980 --> 01:21:32.980
你在用什么

01:21:32.980 --> 01:21:33.980
你在用Render喊出

01:21:34.980 --> 01:21:36.980
这些事情在Render里边去做

01:21:36.980 --> 01:21:38.980
他们就直接给他干掉

01:21:39.980 --> 01:21:40.980
直接写Render喊出

01:21:40.980 --> 01:21:42.980
因为你必须要去便利他

01:21:42.980 --> 01:21:43.980
每一个虚拟节点

01:21:43.980 --> 01:21:44.980
这个传统的权势

01:21:44.980 --> 01:21:45.980
因为我们知道

01:21:45.980 --> 01:21:47.980
这个传统的根本不是真实的动物

01:21:47.980 --> 01:21:48.980
传统的是虚拟动物

01:21:49.980 --> 01:21:50.980
对

01:21:50.980 --> 01:21:51.980
通过Render喊出来写

01:21:51.980 --> 01:21:52.980
看着啊

01:21:52.980 --> 01:21:53.980
看着啥啥写

01:21:54.980 --> 01:21:55.980
当然不是说你们以后出来

01:21:55.980 --> 01:21:56.980
就需要你们去干这个事情

01:21:56.980 --> 01:21:57.980
我只是告诉你们

01:21:57.980 --> 01:21:59.980
让你们至少能够体会到

01:22:00.980 --> 01:22:01.980
是有高级的事情可以看的

01:22:01.980 --> 01:22:03.980
不是说你天天只是直写业务的

01:22:05.980 --> 01:22:07.980
首先你怎么要去得到这一图

01:22:07.980 --> 01:22:08.980
怎么得到呢

01:22:08.980 --> 01:22:09.980
你可以通过

01:22:10.980 --> 01:22:11.980
直接告诉你

01:22:14.980 --> 01:22:15.980
得到插槽内容

01:22:16.980 --> 01:22:17.980
得到插槽

01:22:21.980 --> 01:22:23.980
中的所有虚拟动物

01:22:25.980 --> 01:22:26.980
我们得到一个V漏指

01:22:29.490 --> 01:22:30.490
V漏指

01:22:30.490 --> 01:22:31.490
出处一下

01:22:31.490 --> 01:22:32.490
看一下V漏指

01:22:33.490 --> 01:22:34.490
当然现在啥都不会显示

01:22:34.490 --> 01:22:35.490
因为我这里没盼回

01:22:36.490 --> 01:22:37.490
看一下吧

01:22:37.490 --> 01:22:42.360
通产

01:22:43.360 --> 01:22:44.360
我说了

01:22:44.360 --> 01:22:45.360
他说

01:22:49.800 --> 01:22:50.800
有28个虚拟动物

01:22:50.800 --> 01:22:51.800
你看是不是

01:22:52.800 --> 01:22:53.800
p元素虚拟动物

01:22:53.800 --> 01:22:54.800
H2虚拟动物

01:22:55.800 --> 01:22:56.800
对吧

01:22:57.800 --> 01:22:58.800
就得到虚拟动物的

01:22:59.800 --> 01:23:00.800
然后我们要干嘛

01:23:01.800 --> 01:23:03.800
我们是不是只需要拿到那些

01:23:05.800 --> 01:23:07.800
我们是不是只需要拿到那些啥

01:23:07.800 --> 01:23:09.800
那些H元素

01:23:09.800 --> 01:23:10.800
对不对

01:23:10.800 --> 01:23:11.800
我们只需要去找那些H元素

01:23:11.800 --> 01:23:13.800
CNAP元素我们不需要

01:23:13.800 --> 01:23:14.800
不是说最终不显示

01:23:14.800 --> 01:23:15.800
要显示的

01:23:15.800 --> 01:23:17.800
只是我现在不用去看它

01:23:17.800 --> 01:23:19.800
就要拿去拿每一个H元素

01:23:20.800 --> 01:23:21.800
那么我这里怎么办

01:23:21.800 --> 01:23:22.800
我们这里呢

01:23:22.800 --> 01:23:23.800
是不是可以拿到

01:23:25.800 --> 01:23:26.800
H的漏指

01:23:26.800 --> 01:23:27.800
是不是能拿到

01:23:28.800 --> 01:23:29.800
拿到所有的

01:23:32.800 --> 01:23:33.800
标题

01:23:34.800 --> 01:23:35.800
内容

01:23:35.800 --> 01:23:36.800
拿到标题内容

01:23:38.800 --> 01:23:39.800
标题元素

01:23:39.800 --> 01:23:40.800
就标题元素

01:23:41.800 --> 01:23:42.800
那我怎么拿

01:23:42.800 --> 01:23:43.800
是不是就通过V漏指

01:23:43.800 --> 01:23:46.800
可以用S5的FILTER

01:23:46.800 --> 01:23:47.800
是不是可以筛选

01:23:47.800 --> 01:23:48.800
对吧

01:23:48.800 --> 01:23:49.800
那么这些基础

01:23:49.800 --> 01:23:50.800
这是GS基础

01:23:50.800 --> 01:23:51.800
跟5有没有关系

01:23:51.800 --> 01:23:52.800
你这里拿到一个素组

01:23:52.800 --> 01:23:53.800
我要在素组里去筛选

01:23:53.800 --> 01:23:54.800
我不要这个H

01:23:54.800 --> 01:23:55.800
我不要这些P元素

01:23:55.800 --> 01:23:56.800
P元素我暂时不要

01:23:56.800 --> 01:23:58.800
我要去拿到每一个H元素

01:23:58.800 --> 01:23:59.800
怎么筛选

01:23:59.800 --> 01:24:00.800
是不是筛选

01:24:00.800 --> 01:24:01.800
每元素的

01:24:02.800 --> 01:24:03.800
我用剑团来说

01:24:03.800 --> 01:24:06.800
筛选这个元素的太个属性

01:24:07.800 --> 01:24:08.800
就这个太个属性

01:24:08.800 --> 01:24:09.800
它必须H开头

01:24:09.800 --> 01:24:10.800
所以做的比较简单

01:24:10.800 --> 01:24:12.800
当然最好用正轴表达式

01:24:12.800 --> 01:24:13.800
最好你写个正轴表达式

01:24:13.800 --> 01:24:15.800
就是Heading

01:24:15.800 --> 01:24:16.800
正轴表达式

01:24:16.800 --> 01:24:17.800
它一开

01:24:17.800 --> 01:24:18.800
你什么开头

01:24:18.800 --> 01:24:19.800
一H开头

01:24:19.800 --> 01:24:20.800
后面跟一个数字

01:24:20.800 --> 01:24:21.800
然后结束

01:24:22.800 --> 01:24:23.800
这是

01:24:23.800 --> 01:24:24.800
这个汇写吧

01:24:24.800 --> 01:24:25.800
测试一下

01:24:30.350 --> 01:24:31.350
它有匹配啥

01:24:31.350 --> 01:24:32.350
匹配

01:24:32.350 --> 01:24:33.350
匹配这种

01:24:33.350 --> 01:24:34.350
H2

01:24:34.350 --> 01:24:36.350
就不能就匹配出来了

01:24:36.350 --> 01:24:37.350
H3

01:24:37.350 --> 01:24:38.350
匹配H4

01:24:38.350 --> 01:24:39.350
我都没管

01:24:39.350 --> 01:24:40.350
H7

01:24:40.350 --> 01:24:41.350
H8

01:24:41.350 --> 01:24:42.350
我写的比较简单

01:24:42.350 --> 01:24:44.350
就是写的这么一个正轴表达式

01:24:44.350 --> 01:24:45.350
那么也就是说

01:24:45.350 --> 01:24:46.350
我这边呢

01:24:46.350 --> 01:24:53.980
我这边呢

01:24:53.980 --> 01:24:54.980
就是要通过

01:24:54.980 --> 01:24:56.980
什么样的匹配简单我需要

01:24:56.980 --> 01:24:58.980
就是要通过这个正轴表达式测试

01:24:58.980 --> 01:24:59.980
Heading

01:24:59.980 --> 01:25:00.980
Heading

01:25:00.980 --> 01:25:01.980
Heading

01:25:02.980 --> 01:25:03.980
Heading

01:25:03.980 --> 01:25:04.980
Heading

01:25:05.980 --> 01:25:06.980
对不对

01:25:06.980 --> 01:25:07.980
我要把那个

01:25:07.980 --> 01:25:09.980
每个匹配简单的太个属性拿出来

01:25:09.980 --> 01:25:11.980
看一下能不能通过一个正轴表达式的测试

01:25:11.980 --> 01:25:12.980
能通过我就保留

01:25:12.980 --> 01:25:13.980
不能通过就拿到

01:25:13.980 --> 01:25:14.980
我输出一下Heading

01:25:14.980 --> 01:25:15.980
Heading

01:25:15.980 --> 01:25:16.980
那么这样子

01:25:16.980 --> 01:25:17.980
你看这是

01:25:17.980 --> 01:25:18.980
全部的

01:25:18.980 --> 01:25:19.980
传入了全部的匹配简单

01:25:19.980 --> 01:25:20.980
这是我们

01:25:21.980 --> 01:25:23.980
得到了那个标

01:25:23.980 --> 01:25:24.980
只有标题的匹配简单

01:25:24.980 --> 01:25:25.980
你看什么9个

01:25:25.980 --> 01:25:26.980
拿到了

01:25:27.980 --> 01:25:28.980
拿到过干嘛呀

01:25:29.980 --> 01:25:30.980
拿到过后

01:25:30.980 --> 01:25:32.980
我要有两件事情要做

01:25:32.980 --> 01:25:33.980
第一个呢

01:25:33.980 --> 01:25:34.980
我先做这个吧

01:25:34.980 --> 01:25:35.980
给每个H元素

01:25:35.980 --> 01:25:37.980
设置每个H元素的ID

01:25:39.980 --> 01:25:40.980
我一个个来吧

01:25:41.980 --> 01:25:42.980
设置每个H元素的ID

01:25:42.980 --> 01:25:44.980
那我现在是不是要循环它

01:25:45.980 --> 01:25:46.980
FOR5循环

01:25:46.980 --> 01:25:47.980
用ES6的

01:25:47.980 --> 01:25:49.980
这些都是技术之色

01:25:49.980 --> 01:25:50.980
ID

01:25:50.980 --> 01:25:51.980
或者是你如果实在看不懂的话

01:25:51.980 --> 01:25:52.980
你用FOR5循环也行

01:25:55.480 --> 01:25:56.480
我就用FOR5循环

01:25:56.480 --> 01:25:57.480
顺便给你介绍一下吧

01:25:57.480 --> 01:25:59.480
就是循环这个

01:25:59.480 --> 01:26:00.480
循环这个数组

01:26:00.480 --> 01:26:01.480
每一循环一次

01:26:01.480 --> 01:26:02.480
放到这个边量里面

01:26:02.480 --> 01:26:03.480
就把数组的第一项

01:26:03.480 --> 01:26:05.480
放到它里面来运行循环题

01:26:05.480 --> 01:26:07.480
然后第二项放到它里面来运行循环题

01:26:07.480 --> 01:26:08.480
这就是这位ID

01:26:08.480 --> 01:26:09.480
或者是这位H

01:26:11.480 --> 01:26:12.480
这是FOR5循环

01:26:12.480 --> 01:26:13.480
非常好用的

01:26:14.480 --> 01:26:15.480
好

01:26:15.480 --> 01:26:16.480
每一循环一次

01:26:17.480 --> 01:26:18.480
我是不是要生成ID

01:26:18.480 --> 01:26:20.480
那ID我又怎么弄了

01:26:20.480 --> 01:26:22.480
ID是不是给这个复制了

01:26:23.480 --> 01:26:25.480
给这个data里边的

01:26:25.480 --> 01:26:26.480
我们之前说写过

01:26:26.480 --> 01:26:27.480
虚的动物里面说

01:26:27.480 --> 01:26:29.480
data里面有个什么HTRS

01:26:29.480 --> 01:26:30.480
然后里面有个ID

01:26:30.480 --> 01:26:31.480
对吧

01:26:31.480 --> 01:26:32.480
所以说呢

01:26:32.480 --> 01:26:34.480
如果说我这样的写呗

01:26:34.480 --> 01:26:35.480
看呀

01:26:35.480 --> 01:26:36.480
HED里面有没有data属性

01:26:36.480 --> 01:26:37.480
有data属性的话

01:26:37.480 --> 01:26:38.480
我就用data属性

01:26:38.480 --> 01:26:39.480
没有data属性的话

01:26:39.480 --> 01:26:40.480
我给它复制一个空队下

01:26:40.480 --> 01:26:42.480
因为你看我如果说

01:26:42.480 --> 01:26:43.480
没有配置的话

01:26:43.480 --> 01:26:45.480
它这个地方是undefined

01:26:45.480 --> 01:26:46.480
那如果说你这里

01:26:46.480 --> 01:26:47.480
你啥都不管

01:26:47.480 --> 01:26:50.480
你就直接拿一个data.httrs.id

01:26:50.480 --> 01:26:51.480
等于啥啥啥

01:26:51.480 --> 01:26:53.480
那就完蛋了

01:26:53.480 --> 01:26:54.480
那就要包出我们

01:26:54.480 --> 01:26:55.480
这个地方是undefined

01:26:55.480 --> 01:26:56.480
对吧

01:26:56.480 --> 01:26:57.480
所以说如果说你没

01:26:57.480 --> 01:26:58.480
有这个东西

01:26:58.480 --> 01:26:59.480
我就给你那个不变

01:26:59.480 --> 01:27:00.480
没有这个东西

01:27:00.480 --> 01:27:01.480
我就给你复制个空队下

01:27:01.480 --> 01:27:02.480
这是一种常见解法

01:27:02.480 --> 01:27:03.480
好

01:27:03.480 --> 01:27:04.480
那么这个地方

01:27:04.480 --> 01:27:05.480
至少这句话就保证了

01:27:05.480 --> 01:27:06.480
它里面一定有data属性了

01:27:06.480 --> 01:27:07.480
然后呢

01:27:07.480 --> 01:27:08.480
我再看

01:27:08.480 --> 01:27:10.480
有没有这个httr属性吗

01:27:11.480 --> 01:27:13.480
如果说

01:27:13.480 --> 01:27:14.480
一样的写法

01:27:14.480 --> 01:27:15.480
httr属性

01:27:15.480 --> 01:27:16.480
有的话

01:27:16.480 --> 01:27:17.480
我就直接用了

01:27:17.480 --> 01:27:18.480
没有的话

01:27:18.480 --> 01:27:19.480
我就给它一个空队下

01:27:19.480 --> 01:27:20.480
然后再写的话

01:27:20.480 --> 01:27:21.480
是安全的

01:27:21.480 --> 01:27:22.480
对吧

01:27:22.480 --> 01:27:23.480
这样的安全的

01:27:23.480 --> 01:27:24.480
然后表上

01:27:24.480 --> 01:27:26.480
随便给它复制个值吧

01:27:26.480 --> 01:27:28.480
随便给它弄浪费一个值

01:27:28.480 --> 01:27:29.480
弄浪费一个值

01:27:29.480 --> 01:27:30.480
你看一下

01:27:30.480 --> 01:27:31.480
现在的属性有了

01:27:31.480 --> 01:27:32.480
data.id

01:27:32.480 --> 01:27:33.480
插了插

01:27:33.480 --> 01:27:34.480
虚动是不是有了

01:27:34.480 --> 01:27:36.480
虚动有了过后

01:27:36.480 --> 01:27:37.480
我一会再一返回

01:27:37.480 --> 01:27:39.480
它会根据这个虚动

01:27:39.480 --> 01:27:40.480
真是懂

01:27:40.480 --> 01:27:41.480
对吧

01:27:41.480 --> 01:27:42.480
是不是这样子

01:27:43.480 --> 01:27:44.480
你看

01:27:44.480 --> 01:27:46.480
我小孩又在哭了

01:27:49.480 --> 01:27:50.480
这一块没问题吧

01:27:50.480 --> 01:27:51.480
这一块

01:27:56.390 --> 01:27:57.390
OK

01:27:57.390 --> 01:28:01.090
那这个id我复制了

01:28:01.090 --> 01:28:03.090
这个id我复制是为啥呢

01:28:03.090 --> 01:28:05.090
我复制为啥呢

01:28:06.090 --> 01:28:07.090
一般来说

01:28:07.090 --> 01:28:08.090
我告诉大家

01:28:08.090 --> 01:28:09.090
这个标题元素id呢

01:28:09.090 --> 01:28:11.090
一般是根据它的内容生成的

01:28:11.090 --> 01:28:13.090
一般是根据它的内容生成的

01:28:13.090 --> 01:28:15.090
有它内容是啥

01:28:15.090 --> 01:28:17.090
那么我就给它复制啥

01:28:17.090 --> 01:28:19.090
那我怎么样得到它的内容呢

01:28:19.090 --> 01:28:20.090
现在就遇到个问题

01:28:20.090 --> 01:28:21.090
怎么来得到这个id

01:28:21.090 --> 01:28:22.090
这个元素的内容呢

01:28:22.090 --> 01:28:23.090
那还不简单吗

01:28:23.090 --> 01:28:25.090
那还不简单

01:28:25.090 --> 01:28:27.090
我就写个辅助函数吧

01:28:27.090 --> 01:28:28.090
发个信

01:28:30.090 --> 01:28:31.090
你给我传一个虚拟节点

01:28:31.090 --> 01:28:33.090
我来得到虚拟节点的内容

01:28:33.090 --> 01:28:34.090
写个辅助函数

01:28:34.090 --> 01:28:41.810
得到虚拟节点的文本内容

01:28:41.810 --> 01:28:42.810
你别说这个函数

01:28:42.810 --> 01:28:44.810
很多人还写不出来

01:28:44.810 --> 01:28:47.810
它比较简单的写法是什么呢

01:28:47.810 --> 01:28:48.810
比较简单的写法

01:28:48.810 --> 01:28:49.810
我给你写两个版本啊

01:28:49.810 --> 01:28:50.810
比较简单的写法

01:28:50.810 --> 01:28:53.810
你至少要能够看懂简单的写法

01:28:53.810 --> 01:28:56.810
就是得到这个虚拟节点的确有准

01:28:56.810 --> 01:28:57.810
确有准

01:28:57.810 --> 01:28:59.810
后边有一个理由

01:28:59.810 --> 01:29:01.810
就是它第一个虚拟节点

01:29:01.810 --> 01:29:02.810
这是它是不是它第一个虚拟节点

01:29:02.810 --> 01:29:03.810
它里边的第一个虚拟节点

01:29:03.810 --> 01:29:05.810
它里边的第一个虚拟节点

01:29:05.810 --> 01:29:06.810
对吧

01:29:06.810 --> 01:29:07.810
然后只要写一个

01:29:07.810 --> 01:29:08.810
是最简单的写法了

01:29:08.810 --> 01:29:10.810
然后你看看能不能得到

01:29:10.810 --> 01:29:12.810
我们得到它的内容

01:29:16.460 --> 01:29:17.460
就是title

01:29:18.460 --> 01:29:20.460
把虚拟节点传进去

01:29:20.460 --> 01:29:21.460
得到它的内容

01:29:21.460 --> 01:29:22.460
那么如果说

01:29:22.460 --> 01:29:24.460
假设我们ID就是把它设置为它的内容

01:29:24.460 --> 01:29:25.460
就OK了

01:29:25.460 --> 01:29:26.460
假设我们这样做

01:29:26.460 --> 01:29:28.460
我们来看一下是不是可以呢

01:29:30.780 --> 01:29:31.780
ID chapter 1

01:29:31.780 --> 01:29:32.780
是不是可以

01:29:33.780 --> 01:29:34.780
还是可以的

01:29:34.780 --> 01:29:35.780
还是可以的

01:29:35.780 --> 01:29:36.780
答应出来一下吧

01:29:36.780 --> 01:29:37.780
title

01:29:39.780 --> 01:29:40.780
那这样这些

01:29:40.780 --> 01:29:41.780
肯定还是有隐患的

01:29:41.780 --> 01:29:43.780
你至少能看懂这一块吧

01:29:43.780 --> 01:29:44.780
至少能看懂这一块

01:29:44.780 --> 01:29:45.780
有什么隐患

01:29:45.780 --> 01:29:47.780
万一是这里面是这样子的

01:29:47.780 --> 01:29:48.780
它里面还包含了一些元素

01:29:48.780 --> 01:29:50.780
你这个元素是不是拿不到了

01:29:50.780 --> 01:29:52.780
那如果说元素的第一个呢

01:29:52.780 --> 01:29:53.780
你看一下

01:29:53.780 --> 01:29:54.780
首先看这种情况

01:29:54.780 --> 01:29:55.780
你看

01:29:55.780 --> 01:29:56.780
capital 1

01:29:56.780 --> 01:29:58.780
你这个玩意没拿到了

01:29:58.780 --> 01:29:59.780
然后如果说这个玩意是第一个

01:29:59.780 --> 01:30:01.780
那就更加晚淡了

01:30:02.780 --> 01:30:03.780
第一个是undefined

01:30:03.780 --> 01:30:04.780
因为这第一个节点

01:30:04.780 --> 01:30:05.780
它没有txt属性

01:30:06.780 --> 01:30:07.780
对吧

01:30:07.780 --> 01:30:08.780
所以说还是有隐患的

01:30:08.780 --> 01:30:10.780
那最好的应该怎么写呢

01:30:10.780 --> 01:30:11.780
get text

01:30:12.780 --> 01:30:14.780
应该这样子写

01:30:14.780 --> 01:30:16.780
判断一下vino的

01:30:17.780 --> 01:30:18.780
有txt属性吗

01:30:19.780 --> 01:30:20.780
如果说你没有txt属性

01:30:20.780 --> 01:30:21.780
说明什么

01:30:21.780 --> 01:30:22.780
你是文本节点

01:30:22.780 --> 01:30:24.780
文本节点就很简单了

01:30:24.780 --> 01:30:25.780
我反过来

01:30:25.780 --> 01:30:26.780
你这个节点的

01:30:26.780 --> 01:30:27.780
txt

01:30:27.780 --> 01:30:28.780
那如果说你不是文本节点

01:30:29.780 --> 01:30:30.780
那么你就是一个

01:30:30.780 --> 01:30:31.780
就是一个元素节点

01:30:31.780 --> 01:30:33.780
元素节点我就去找你的指元素

01:30:34.780 --> 01:30:35.780
把你指元素的

01:30:35.780 --> 01:30:37.780
每一个元素的文本拿出来

01:30:37.780 --> 01:30:38.780
拼接

01:30:38.780 --> 01:30:39.780
是不是他要拼接他

01:30:39.780 --> 01:30:41.780
说这里应该怎么反过来

01:30:41.780 --> 01:30:42.780
这边一个

01:30:43.780 --> 01:30:44.780
加油

01:30:44.780 --> 01:30:45.780
你尽量看吧

01:30:45.780 --> 01:30:46.780
如果这个实在看不懂的话

01:30:46.780 --> 01:30:47.780
你现在慢慢去消化

01:30:48.780 --> 01:30:49.780
那你可能接待吧

01:30:49.780 --> 01:30:50.780
可能写的比较少

01:30:50.780 --> 01:30:51.780
你至少能看懂上面的

01:30:51.780 --> 01:30:52.780
反正这个还说的意思

01:30:52.780 --> 01:30:53.780
就是拿到他的文本

01:30:54.780 --> 01:30:55.780
那我就应该这样子写

01:30:56.780 --> 01:30:58.780
应该用chill去map

01:30:59.780 --> 01:31:02.090
这是他一个指元素

01:31:02.090 --> 01:31:03.090
他一个指元素

01:31:03.090 --> 01:31:04.090
把每一个指元素

01:31:05.090 --> 01:31:06.090
生成一个制服串

01:31:07.090 --> 01:31:08.090
就他要对应一个文本节点

01:31:08.090 --> 01:31:10.090
他也要对应这个文本节点

01:31:10.090 --> 01:31:11.090
所以说

01:31:11.090 --> 01:31:12.090
我要把每一个节点的

01:31:12.090 --> 01:31:14.090
拿去get takes

01:31:14.090 --> 01:31:15.090
用低规的方式

01:31:16.090 --> 01:31:18.090
这样子拿到一个文本节点

01:31:18.090 --> 01:31:19.090
就拿到一个什么了

01:31:19.090 --> 01:31:20.090
拿到一个数组

01:31:20.090 --> 01:31:22.850
就拿到一个数组

01:31:22.850 --> 01:31:24.850
第一个数组的第一项就这个

01:31:24.850 --> 01:31:28.670
第二项就这个

01:31:28.670 --> 01:31:31.500
所以拿到一个数组

01:31:31.500 --> 01:31:33.500
它本来它是一个

01:31:33.500 --> 01:31:35.500
本来不是制服串的数组的

01:31:35.500 --> 01:31:36.500
本来数组里面

01:31:36.500 --> 01:31:37.500
每一项是一个对象

01:31:37.500 --> 01:31:38.500
是一个虚拟节点的对象

01:31:38.500 --> 01:31:40.500
我把对象印设成为一个数组

01:31:40.500 --> 01:31:41.500
一个制服串

01:31:41.500 --> 01:31:42.500
是用map

01:31:42.500 --> 01:31:43.500
然后就可以用交易

01:31:43.500 --> 01:31:44.500
一个

01:31:44.500 --> 01:31:45.500
制服串

01:31:46.500 --> 01:31:47.500
现在我们来看一下

01:31:49.500 --> 01:31:50.500
你看

01:31:50.500 --> 01:31:51.500
可以了

01:31:52.500 --> 01:31:53.500
你直接去看

01:31:53.500 --> 01:31:54.500
带码节制不多

01:31:54.500 --> 01:31:55.500
下一个map琢磨去

01:31:56.500 --> 01:31:57.500
这些都是要在

01:31:57.500 --> 01:31:58.500
解释基础部分

01:31:58.500 --> 01:31:59.500
叫锻炼起来的能力

01:31:59.500 --> 01:32:02.580
好了

01:32:02.580 --> 01:32:03.580
那现在我们拿到

01:32:03.580 --> 01:32:04.580
这个东西过后

01:32:04.580 --> 01:32:05.580
是拿到TITLE了

01:32:05.580 --> 01:32:06.580
那我们ID

01:32:06.580 --> 01:32:07.580
能够直接使用TITLE吗

01:32:07.580 --> 01:32:08.580
最好不要

01:32:08.580 --> 01:32:10.580
ID最好是全部小写

01:32:10.580 --> 01:32:11.580
然后不要有空白

01:32:11.580 --> 01:32:13.580
就把空白变成横杠

01:32:13.580 --> 01:32:14.580
这是普遍性的做法

01:32:14.580 --> 01:32:15.580
所以说

01:32:15.580 --> 01:32:16.580
这里再写个函数

01:32:16.580 --> 01:32:19.580
GenerateID

01:32:19.580 --> 01:32:20.580
你给我一个台头

01:32:20.580 --> 01:32:21.580
还给我一个制服串

01:32:21.580 --> 01:32:23.580
我把它生成一个ID的格式

01:32:23.580 --> 01:32:24.580
这个函数也非常简单

01:32:24.580 --> 01:32:25.580
就用一些证则表达式

01:32:25.580 --> 01:32:26.580
在操作就完事了

01:32:26.580 --> 01:32:28.580
首先我把这个东西

01:32:28.580 --> 01:32:30.580
to lower case

01:32:30.580 --> 01:32:32.580
然后能小写

01:32:32.580 --> 01:32:33.580
然后再replace

01:32:33.580 --> 01:32:35.580
用一个证则表达式

01:32:35.580 --> 01:32:37.580
就是把空白制服

01:32:37.580 --> 01:32:39.580
一个过多个空白制服

01:32:39.580 --> 01:32:41.580
你看这边都匹别到了

01:32:41.580 --> 01:32:42.580
有很多空白制服

01:32:42.580 --> 01:32:43.580
把空白制服

01:32:43.580 --> 01:32:45.580
例如替换成什么的一个横杠

01:32:45.580 --> 01:32:46.580
发挥

01:32:46.580 --> 01:32:47.580
很简单

01:32:47.580 --> 01:32:48.580
你给我一个制服串

01:32:48.580 --> 01:32:49.580
我先找人小写

01:32:49.580 --> 01:32:50.580
把它替换空白制服

01:32:50.580 --> 01:32:51.580
无论你有多好一个

01:32:51.580 --> 01:32:52.580
一个会多个

01:32:52.580 --> 01:32:53.580
就把它替换成一个横杠

01:32:53.580 --> 01:32:55.580
那么我们有这个函数过后

01:32:55.580 --> 01:32:57.580
ID就可以通过这个来生成

01:32:57.580 --> 01:33:06.300
区别里面是不是有ID了

01:33:06.300 --> 01:33:09.300
你看ID就生成出来了

01:33:09.300 --> 01:33:10.300
但是沐为的横杠

01:33:10.300 --> 01:33:11.300
我还没有去掉

01:33:11.300 --> 01:33:13.300
沐为的横杠没有去掉

01:33:13.300 --> 01:33:14.300
就是你要去掉沐为的横杠

01:33:14.300 --> 01:33:15.300
也很简单

01:33:15.300 --> 01:33:16.300
replace

01:33:16.300 --> 01:33:17.300
开出的横杠和沐为的横杠

01:33:17.300 --> 01:33:18.300
我都要去掉

01:33:18.300 --> 01:33:20.300
那我怎么来了

01:33:20.300 --> 01:33:21.300
我就这样来

01:33:21.300 --> 01:33:22.300
开头的横杠

01:33:22.300 --> 01:33:31.300
或者是沐为的横杠

01:33:31.300 --> 01:33:34.300
这样子

01:33:34.300 --> 01:33:36.300
开头的横杠

01:33:36.300 --> 01:33:37.300
或者是沐为的横杠

01:33:37.300 --> 01:33:39.300
那么我要把它去掉

01:33:39.300 --> 01:33:41.300
替换成空白制服串

01:33:41.300 --> 01:33:44.300
总规律是有办法的

01:33:44.300 --> 01:33:48.640
沐为的横杠去掉

01:33:48.640 --> 01:33:49.640
总规律是有想办法

01:33:49.640 --> 01:33:51.640
总规律可以搞定

01:33:51.640 --> 01:33:53.640
现在我们把这件事情做了

01:33:53.640 --> 01:33:55.640
每个A选择的ID搞定了

01:33:55.640 --> 01:33:56.640
你看这些蓄力演练

01:33:56.640 --> 01:33:59.640
都非常听话的加上了一个ID了

01:33:59.640 --> 01:34:00.640
现在有没有真实动物

01:34:00.640 --> 01:34:01.640
没有真实动物

01:34:01.640 --> 01:34:02.640
真实动物以后把蓄力动物一返回

01:34:02.640 --> 01:34:04.640
它就真实动物了

01:34:04.640 --> 01:34:05.640
现在还有一个问题

01:34:05.640 --> 01:34:07.640
就是要生成A远处

01:34:07.640 --> 01:34:09.640
生成A远处那太简单了

01:34:09.640 --> 01:34:11.640
一个head是不是就一个A远处

01:34:11.640 --> 01:34:12.640
是不是就是一个A远处

01:34:12.640 --> 01:34:13.640
所以说我这里可以准备

01:34:13.640 --> 01:34:15.640
每一个数组 links

01:34:15.640 --> 01:34:17.640
所以可以准备每个数组

01:34:17.640 --> 01:34:19.640
每生成一个

01:34:19.640 --> 01:34:20.640
每个head就是

01:34:20.640 --> 01:34:24.640
每个标题对应一个A远处

01:34:24.640 --> 01:34:25.640
A远处怎么来

01:34:25.640 --> 01:34:27.640
就往数组里面加一项没

01:34:27.640 --> 01:34:29.640
加什么

01:34:29.640 --> 01:34:31.640
蓄力动物

01:34:31.640 --> 01:34:33.640
A远处

01:34:33.640 --> 01:34:34.640
对吧

01:34:34.640 --> 01:34:36.640
A远处的什么属性呢

01:34:36.640 --> 01:34:38.640
ATTRS

01:34:38.640 --> 01:34:40.640
REF属性

01:34:40.640 --> 01:34:41.640
等于什么呢

01:34:41.640 --> 01:34:44.640
等于一个警号拼接上ID

01:34:44.640 --> 01:34:45.640
拼接上ID

01:34:45.640 --> 01:34:46.640
把它保存下

01:34:46.640 --> 01:34:53.340
保存个边量

01:34:53.340 --> 01:34:54.340
拼接上ID

01:34:54.340 --> 01:34:55.340
因为我这个A远处

01:34:55.340 --> 01:34:57.340
点击过要链接到对应的head

01:34:57.340 --> 01:34:59.340
就把ID拼过去

01:34:59.340 --> 01:35:00.340
生成A远处

01:35:00.340 --> 01:35:03.340
然后它的属性REF里面有ID

01:35:03.340 --> 01:35:05.340
然后A远处的内容是什么呢

01:35:05.340 --> 01:35:07.340
内容就是它的标题

01:35:07.340 --> 01:35:09.340
就是把title作为它的内容

01:35:09.340 --> 01:35:11.340
你看这个link是不是就出来了吗

01:35:11.340 --> 01:35:12.340
咱们打印出

01:35:12.340 --> 01:35:15.420
打印一下这个link

01:35:15.420 --> 01:35:17.420
刷新

01:35:17.420 --> 01:35:19.420
你看link是不是A远处出来了

01:35:19.420 --> 01:35:21.420
REF属性是不是拼接这个

01:35:22.420 --> 01:35:24.420
文本

01:35:24.420 --> 01:35:26.420
修正

01:35:26.420 --> 01:35:27.420
是不是在玩

01:35:27.420 --> 01:35:29.420
对吧

01:35:29.420 --> 01:35:30.420
它就完了呀

01:35:30.420 --> 01:35:31.420
那还干嘛呀

01:35:31.420 --> 01:35:33.420
那接下来就是返回了

01:35:33.420 --> 01:35:34.420
返回了返回个什么呢

01:35:34.420 --> 01:35:36.420
返回到知识文博伴里面打写的

01:35:36.420 --> 01:35:38.420
是不是一个DIV

01:35:38.420 --> 01:35:39.420
返回了是什么

01:35:39.420 --> 01:35:40.420
H一个DIV

01:35:40.420 --> 01:35:42.420
DIV里边

01:35:42.420 --> 01:35:44.420
有个啥呀

01:35:44.420 --> 01:35:45.420
有两个指示元素

01:35:45.420 --> 01:35:46.420
第一个指示元素呢

01:35:46.420 --> 01:35:47.420
是一个TOC

01:35:47.420 --> 01:35:49.420
是这个DIV

01:35:49.420 --> 01:35:50.420
它的内容是

01:35:50.420 --> 01:35:52.420
内容是我们用class

01:35:52.420 --> 01:35:54.420
ATTRS

01:35:54.420 --> 01:35:55.420
class

01:35:55.420 --> 01:35:56.420
为什么呢

01:35:56.420 --> 01:35:57.420
为TOC

01:35:57.420 --> 01:35:58.420
你看啊

01:35:58.420 --> 01:35:59.420
这个DIV

01:35:59.420 --> 01:36:00.420
根源素

01:36:00.420 --> 01:36:01.420
根源素里面

01:36:01.420 --> 01:36:02.420
第一个是一个DIV

01:36:02.420 --> 01:36:03.420
DIV内容是为TOC

01:36:03.420 --> 01:36:06.250
就相当于这个

01:36:06.250 --> 01:36:08.250
DIV

01:36:08.250 --> 01:36:10.250
DIV

01:36:10.250 --> 01:36:11.250
然后这里有个DIV

01:36:11.250 --> 01:36:12.250
内容是

01:36:12.250 --> 01:36:14.250
内容是

01:36:14.250 --> 01:36:15.250
为TOC

01:36:15.250 --> 01:36:16.250
对吧

01:36:16.250 --> 01:36:17.250
我们之前是这样写的吧

01:36:17.250 --> 01:36:18.250
然后这里边

01:36:18.250 --> 01:36:20.250
是不是生成大队A元素

01:36:20.250 --> 01:36:21.250
你说这个DIV的指源数

01:36:21.250 --> 01:36:22.250
是不是大队A元素

01:36:22.250 --> 01:36:24.250
一大队A元素是不是它

01:36:24.250 --> 01:36:26.250
是不是把这个A元素

01:36:26.250 --> 01:36:28.250
就直接

01:36:28.250 --> 01:36:30.250
给它放过来

01:36:30.250 --> 01:36:32.250
第一个DIV是

01:36:32.250 --> 01:36:33.250
搞定了

01:36:33.250 --> 01:36:34.250
好

01:36:34.250 --> 01:36:35.250
第二个是不是

01:36:35.250 --> 01:36:36.250
后面是不是就直接显示

01:36:36.250 --> 01:36:38.250
所有的

01:36:38.250 --> 01:36:39.250
就这个东西

01:36:39.250 --> 01:36:40.250
这个东西我再用个DIV

01:36:40.250 --> 01:36:41.250
包一下吧

01:36:41.250 --> 01:36:43.250
DIV

01:36:43.250 --> 01:36:44.250
然后这个DIV

01:36:44.250 --> 01:36:45.250
就没有什么样子

01:36:45.250 --> 01:36:46.250
就是把这个

01:36:46.250 --> 01:36:47.250
黑的

01:36:47.250 --> 01:36:48.250
就这个微豆子

01:36:48.250 --> 01:36:49.250
就之前

01:36:50.250 --> 01:36:52.250
这边喘怪的东西

01:36:52.250 --> 01:36:54.250
直接放到这个DIV里面显示

01:36:54.250 --> 01:36:56.250
那么以后下面有个DIV

01:36:56.250 --> 01:36:57.250
这个DIV里面

01:36:57.250 --> 01:36:58.250
显示的是什么

01:36:58.250 --> 01:37:00.250
就显示的是

01:37:00.250 --> 01:37:03.690
这边喘怪的所有这些东西

01:37:03.690 --> 01:37:04.690
我就生存这么一个

01:37:04.690 --> 01:37:06.690
因为我准备生存这么一个结构

01:37:06.690 --> 01:37:12.820
你看一下吧

01:37:12.820 --> 01:37:14.820
这个

01:37:14.820 --> 01:37:15.820
对应这个

01:37:15.820 --> 01:37:17.820
这个

01:37:17.820 --> 01:37:20.130
对应这个

01:37:20.130 --> 01:37:21.130
这个

01:37:21.130 --> 01:37:22.130
对应这个

01:37:22.130 --> 01:37:24.890
好

01:37:24.890 --> 01:37:25.890
那么这样子

01:37:25.890 --> 01:37:26.890
最终我们就看一下

01:37:26.890 --> 01:37:28.890
甚至出来的

01:37:28.890 --> 01:37:29.890
我作为的央视

01:37:29.890 --> 01:37:30.890
把这个A元素

01:37:30.890 --> 01:37:32.890
设为快捷元素吧

01:37:32.890 --> 01:37:34.890
A元素

01:37:34.890 --> 01:37:36.890
设为Display

01:37:36.890 --> 01:37:43.660
Block

01:37:43.660 --> 01:37:44.660
是自动生存目标

01:37:44.660 --> 01:37:45.660
而且都是一个

01:37:45.660 --> 01:37:46.660
通用性的东西

01:37:46.660 --> 01:37:47.660
这就是

01:37:47.660 --> 01:37:49.660
咱们利用这个

01:37:49.660 --> 01:37:52.660
虚拟动物节点

01:37:52.660 --> 01:37:53.660
能够去作业

01:37:53.660 --> 01:37:55.660
丰富的效果

01:37:58.660 --> 01:37:59.660
当然了

01:37:59.660 --> 01:38:00.660
我们做的还是有

01:38:00.660 --> 01:38:01.660
很多很多的缺陷

01:38:01.660 --> 01:38:02.660
这种逐渐就要把

01:38:02.660 --> 01:38:04.660
做好可不容易的

01:38:04.660 --> 01:38:05.660
可不容易的

01:38:05.660 --> 01:38:06.660
因为我们现在比较

01:38:06.660 --> 01:38:07.660
现在还没有

01:38:07.660 --> 01:38:08.660
还没有生成一个

01:38:08.660 --> 01:38:09.660
成绩结构

01:38:09.660 --> 01:38:10.660
看了没

01:38:10.660 --> 01:38:11.660
我们这里是

01:38:11.660 --> 01:38:12.660
一级标题

01:38:12.660 --> 01:38:13.660
一级标题里面有

01:38:13.660 --> 01:38:14.660
二级标题

01:38:14.660 --> 01:38:15.660
二级标题

01:38:15.660 --> 01:38:16.660
可能还有三级标题

01:38:16.660 --> 01:38:17.660
可能还有四级标题

01:38:17.660 --> 01:38:18.660
我这里有成绩结构吗

01:38:18.660 --> 01:38:19.660
没有

01:38:19.660 --> 01:38:20.660
然后呢

01:38:20.660 --> 01:38:21.660
我们这里呢

01:38:21.660 --> 01:38:22.660
如果说这个A级

01:38:22.660 --> 01:38:23.660
不是顶级的

01:38:23.660 --> 01:38:24.660
它可能是

01:38:24.660 --> 01:38:25.660
包含在一个DIV级别

01:38:25.660 --> 01:38:26.660
马上就蒙了

01:38:26.660 --> 01:38:27.660
这个A级它找不到了

01:38:27.660 --> 01:38:28.660
因为我只找了

01:38:29.660 --> 01:38:30.660
就找不到了

01:38:31.660 --> 01:38:32.660
你看是不是

01:38:32.660 --> 01:38:34.660
Chapter 1没了

01:38:35.660 --> 01:38:36.660
Chapter 1是不是没了

01:38:38.660 --> 01:38:39.660
这个还是有

01:38:39.660 --> 01:38:40.660
很多问题的

01:38:40.660 --> 01:38:41.660
而且呢

01:38:41.660 --> 01:38:42.660
如果说我生成的目录

01:38:42.660 --> 01:38:43.660
不是这个样式

01:38:43.660 --> 01:38:45.660
我还要改一些别的样式

01:38:45.660 --> 01:38:46.660
我怎么来控制样式

01:38:48.660 --> 01:38:50.660
这里面问题可多了

01:38:50.660 --> 01:38:51.660
稍微的

01:38:51.660 --> 01:38:52.660
我跟大家做了一个

01:38:52.660 --> 01:38:53.660
稍微的

01:38:53.660 --> 01:38:54.660
详细版本在这

01:38:55.660 --> 01:38:56.660
我这个版本呢

01:38:56.660 --> 01:38:57.660
看上去也就可能

01:38:57.660 --> 01:38:58.660
这里边我们用到了

01:38:58.660 --> 01:38:59.660
占的指示

01:38:59.660 --> 01:39:00.660
用到了输的

01:39:00.660 --> 01:39:01.660
低规的指示

01:39:01.660 --> 01:39:02.660
这里边

01:39:02.660 --> 01:39:03.660
有兴趣的同学

01:39:03.660 --> 01:39:04.660
可以看一下

01:39:04.660 --> 01:39:05.660
我这里边有个势力

01:39:05.660 --> 01:39:06.660
而且还用到了

01:39:06.660 --> 01:39:07.660
作用与插槽

01:39:07.660 --> 01:39:08.660
都是一些

01:39:08.660 --> 01:39:09.660
还有一些无忧的

01:39:09.660 --> 01:39:10.660
性节指示

01:39:10.660 --> 01:39:11.660
可以看一下

01:39:11.660 --> 01:39:12.660
将来如果说

01:39:12.660 --> 01:39:13.660
无忧里面学

01:39:13.660 --> 01:39:14.660
学通了过后

01:39:14.660 --> 01:39:15.660
可以回过来看一下

01:39:15.660 --> 01:39:16.660
能不能完成

01:39:16.660 --> 01:39:17.660
现在看来

01:39:17.660 --> 01:39:18.660
肯定搞不定的

01:39:18.660 --> 01:39:19.660
我这里扔在这

01:39:19.660 --> 01:39:20.660
将来可能有兴趣

01:39:20.660 --> 01:39:21.660
可以看一下

01:39:22.660 --> 01:39:23.660
好了

01:39:23.660 --> 01:39:24.660
今天晚上

01:39:24.660 --> 01:39:25.660
我们重点的

01:39:25.660 --> 01:39:26.660
不是说这个案例

01:39:26.660 --> 01:39:27.660
面试题

01:39:27.660 --> 01:39:28.660
通过这个面试题

01:39:28.660 --> 01:39:29.660
让大家去认识到

01:39:29.660 --> 01:39:30.660
咱们五幼里边

01:39:30.660 --> 01:39:31.660
还是有很多

01:39:31.660 --> 01:39:32.660
深入的东西

01:39:32.660 --> 01:39:33.660
而且这些深入的东西

01:39:33.660 --> 01:39:34.660
对我们开发

01:39:34.660 --> 01:39:35.660
实际上是有意义的

01:39:35.660 --> 01:39:36.660
不是说完全没有意义

01:39:37.660 --> 01:39:38.660
如果说你在

01:39:38.660 --> 01:39:39.660
一把这一块吃透了

01:39:40.660 --> 01:39:41.660
不说把这个案例写出来

01:39:41.660 --> 01:39:42.660
把这个面试题

01:39:42.660 --> 01:39:44.660
能够回答得非常好了

01:39:44.660 --> 01:39:45.660
你用自己的语言

01:39:45.660 --> 01:39:46.660
组织一下

01:39:46.660 --> 01:39:47.660
那么这方面

01:39:47.660 --> 01:39:48.660
试题能够

01:39:48.660 --> 01:39:49.660
按照我说的

01:39:49.660 --> 01:39:50.660
把它回答出来的话

01:39:50.660 --> 01:39:51.660
你一定会经验面试关的

01:39:51.660 --> 01:39:52.660
因为你讲的很多东西

01:39:52.660 --> 01:39:53.660
是非常深入的东西

