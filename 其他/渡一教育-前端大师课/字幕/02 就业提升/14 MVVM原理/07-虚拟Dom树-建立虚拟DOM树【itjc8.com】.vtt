WEBVTT

00:00.180 --> 00:02.180
hello 大家好啊

00:02.180 --> 00:06.180
这一集我们来讲这个便利我们这个道姆

00:06.180 --> 00:08.180
便利我们这个绑定的这个道姆

00:08.180 --> 00:11.180
然后把这些道姆都把它变成一颗

00:11.180 --> 00:13.180
这个讯你道姆书

00:14.180 --> 00:16.180
那实际上就是我们的Mount方法呗

00:17.180 --> 00:19.180
那如何来做

00:19.180 --> 00:21.180
首先我们写一个方法

00:22.180 --> 00:24.180
方式

00:34.180 --> 00:36.180
这么三个属性

00:36.180 --> 00:38.180
用这种方法来进行挂载

00:38.180 --> 00:40.180
用这种方法来进行挂载

00:40.180 --> 00:44.180
然后呢我们来设定一下

00:44.180 --> 00:45.180
来设定一下

00:45.180 --> 00:47.180
vm下滑线

00:47.180 --> 00:49.180
点下滑线

00:49.180 --> 00:50.180
vnode

00:50.180 --> 00:52.180
这个是vm的vnode

00:52.180 --> 00:53.180
是吧

00:53.180 --> 00:54.180
跟接点

00:54.180 --> 00:56.180
讯你道姆的跟接点

00:56.180 --> 00:57.180
等于construct

00:57.180 --> 00:58.180
vnode

00:58.180 --> 00:59.180
vm

00:59.180 --> 01:00.180
erm

01:00.180 --> 01:02.940
空

01:03.940 --> 01:05.940
我们需要传一个pyrin

01:08.950 --> 01:09.950
pyrin

01:11.950 --> 01:12.950
复及节点

01:12.950 --> 01:14.950
然后呢我们在最开始的时候

01:14.950 --> 01:15.950
跟节点的复及节点

01:16.950 --> 01:17.950
是没有的是吧

01:17.950 --> 01:19.950
跟节点是所有节点的主动

01:19.950 --> 01:20.950
所以它没有复节点

01:20.950 --> 01:22.950
所以就把这个空给的传进去

01:24.950 --> 01:26.950
然后呢我们在这个挂载了之后

01:26.950 --> 01:27.950
要进行

01:28.950 --> 01:30.950
进行这个

01:30.950 --> 01:31.950
预备确认

01:34.580 --> 01:35.580
这块咱们先不起

01:35.580 --> 01:37.580
因为render咱们还没有设计到

01:37.580 --> 01:38.580
先把节点进行挂载

01:38.580 --> 01:40.580
挂载完了之后再进行预备确认

01:41.580 --> 01:43.580
先来一个construct

01:43.580 --> 01:45.580
看这个construct的vnode

01:45.580 --> 01:47.580
我们到底该怎么做

01:47.580 --> 01:49.580
我们为了这个文件的正式一点

01:49.580 --> 01:51.580
为了让这个文件正式一点

01:51.580 --> 01:52.580
我们来一个xpart

01:52.580 --> 01:53.580
方式

01:55.580 --> 01:57.580
init mount

01:57.580 --> 01:59.580
让人传进来一个doe对象

02:00.580 --> 02:03.580
然后doe.part-tab

02:06.580 --> 02:07.580
dollard-mouse

02:08.580 --> 02:09.580
为啥呢

02:09.580 --> 02:10.580
我们要在这个

02:11.580 --> 02:12.580
原形上

02:13.580 --> 02:15.580
给它提供一个挂载的方法

02:15.580 --> 02:17.580
因为实际上在比如说这个voe

02:17.580 --> 02:18.580
在这个创建的时候

02:18.580 --> 02:19.580
你可以不传里面的

02:19.580 --> 02:20.580
是吧

02:20.580 --> 02:21.580
然后呢你可以之后

02:21.580 --> 02:23.580
然后呢再单独的来指定

02:23.580 --> 02:24.580
我来挂点到哪个节点

02:24.580 --> 02:25.580
是吧

02:25.580 --> 02:26.580
所以我们也这样

02:28.580 --> 02:30.580
doll等于document

02:31.580 --> 02:32.580
get element by d

02:35.980 --> 02:39.980
然后mouse-this-root-doll

02:39.980 --> 02:43.360
这个就是为了一个完善一点

02:43.360 --> 02:45.360
为了完善一点

02:47.670 --> 02:48.670
或者这块就传一个vn

02:49.670 --> 02:52.050
这个就是为了完善一点

02:52.050 --> 02:55.050
允许我们可以先不传 element

02:55.050 --> 02:56.050
e l 进行关联

02:57.050 --> 02:58.050
就是先把这个doe对象

02:58.050 --> 02:59.050
创建完了之后

02:59.050 --> 03:03.130
完了之后 我们再用这个 mount 方法进行挂载

03:05.170 --> 03:09.490
好了 然后回过头了 咱们说一下这个construct that we know的

03:10.090 --> 03:12.490
我们如何把这个虚拟当幕术给它建立起来

03:13.130 --> 03:16.090
这里面我们需要用到一个算法 就是深度优先搜索

03:20.720 --> 03:26.200
是吧 我们会发现我们在写框架的过程中 有很多的这个基础的东西都是我们

03:26.760 --> 03:31.280
都是需要我们用到很多的算法的是吧 深度优先搜索

03:31.560 --> 03:36.160
就是其中一个 有的很多同学就是问这些数的这些操作有没有什么意义

03:36.600 --> 03:40.840
在现实生活中有什么用 其实它的用处非常的大 用的地方也非常的多

03:41.560 --> 03:44.520
只是写一些普通的业务的时候我们经常用不到而已

03:45.440 --> 03:50.360
只是写一些普通的业务的时候我们用不到 但是实际上的这个东西却非常的

03:50.800 --> 03:51.400
有用 是吧

03:52.880 --> 03:56.360
那我们深度优先搜索 先来写一个呗 来一个

03:58.760 --> 03:59.880
light一个vnode

04:01.280 --> 04:04.280
等于空

04:07.000 --> 04:09.600
我们要创建这么一个vnode 是吧 当

04:11.120 --> 04:15.440
根结点 把这个东西发进来的时候 我们要有一个最开始的一个vnode

04:16.240 --> 04:19.280
咱们先来盘点 盘算一下 这个vnode都需要哪些东西

04:21.560 --> 04:22.200
light一个

04:23.480 --> 04:23.840
求准

04:28.620 --> 04:29.260
light一个

04:29.900 --> 04:30.380
txt

04:35.000 --> 04:36.520
我看一下啊

04:36.520 --> 04:37.360
txt呢

04:40.000 --> 04:40.960
我们写一个方法

04:42.080 --> 04:42.960
get node text

04:45.080 --> 04:46.320
为什么要有一个这样的方法

04:47.080 --> 04:50.920
是因为我也不确定这个节点里面有没有内容 是吧

04:51.520 --> 04:53.600
是吧 我自己也不确定这个节点有没有内容

04:55.360 --> 04:56.440
get node text

05:01.630 --> 05:04.270
你说什么样的节点里面有文本

05:04.670 --> 05:08.750
刚才是不是说了 只有txt的这种节点里有文本 是吧

05:10.630 --> 05:13.190
是吧 只有这种类型的节点里有文本

05:13.750 --> 05:19.230
是吧 其他的标签里面的 那都叫仔节点 那叫文本仔节点 那不是他的文本

05:20.670 --> 05:21.870
就像我们这里说的这个

05:23.030 --> 05:25.950
就像这个标签来说 有同学说 这个

05:26.750 --> 05:29.710
你这些内容 是这个死半的文本 实际上不是

05:30.510 --> 05:32.190
这是死半的文本仔节点

05:33.070 --> 05:37.310
也就是说这个死半之下还有个节点 只不过这个节点是文本节点而已

05:38.190 --> 05:39.390
这个可不是死半的

05:40.190 --> 05:40.590
txt

05:42.350 --> 05:46.510
然后它实际上是一个节点 是死半的一个字集 是死半的一个字集

05:48.110 --> 05:49.870
那我们回过头来看一下

05:50.470 --> 05:53.230
那也就是说只有文本节点里面才会有文本 是吧

05:55.670 --> 05:58.430
ELM 这是個Ilement 这是个实际的元素 是吧

05:58.950 --> 05:59.870
node type

06:00.710 --> 06:03.590
等于3的时候 只有这个时候才有文本 是吧

06:03.910 --> 06:09.030
return ELM的node value

06:11.540 --> 06:15.980
否则return 空串

06:18.220 --> 06:21.180
它如果是个文本节点 我们就给它返回文本内容

06:21.180 --> 06:23.500
如果它不是的话 我就给它返回一个空串

06:23.500 --> 06:26.940
这样的话就能保证我这个txt一直都有值

06:27.420 --> 06:29.500
它不会出现空的这种情况

06:32.170 --> 06:35.930
然后life data 等于空的 先用不着吗

06:36.730 --> 06:38.530
然后life node type

06:40.690 --> 06:42.970
node type 就是这个节点的类型

06:42.970 --> 06:45.570
我让它和元素的类型保持一致

06:47.570 --> 06:48.890
因为我们之后要判断

06:48.890 --> 06:50.530
它是节点还是遮纳的

06:50.970 --> 06:53.050
我们要让它与元素的这个type保持一致

06:53.770 --> 06:54.890
然后life一个tag

06:55.970 --> 07:02.370
让它就用元素的这个 element.nodeName

07:03.090 --> 07:06.850
让它用这个元素的这个节点类型

07:06.850 --> 07:09.250
你是div 那tag就是div

07:09.250 --> 07:11.730
你是ur 它就tag就是ur 你是span

07:11.730 --> 07:13.450
tag就是span 你是文本节点

07:13.450 --> 07:14.850
tag就是警tag

07:14.850 --> 07:16.130
这么个东西

07:17.130 --> 07:18.250
这是tag

07:18.250 --> 07:24.010
然后我们就让vnode等于你有一个vnode

07:26.210 --> 07:27.450
第一个tag节点

07:28.250 --> 07:31.410
第二个是啥来着 element

07:32.450 --> 07:33.650
然后三大要素嘛

07:33.650 --> 07:35.130
qio的q准是吧

07:36.410 --> 07:38.290
tags的data

07:39.050 --> 07:40.130
parent 看好了

07:40.130 --> 07:41.050
parent我怎么穿

07:42.010 --> 07:43.650
parent是传进来的是吧

07:43.650 --> 07:45.970
我就直接往里面写就行了

07:45.970 --> 07:46.730
然后node type

07:50.380 --> 07:54.620
然后还有一些属性自动出实化

07:54.620 --> 07:56.020
还有一些属性自动出实化

07:56.020 --> 07:56.660
不用我得传

07:58.820 --> 07:59.780
这就是在这

07:59.780 --> 08:02.060
我们来创建出来一个节点

08:02.060 --> 08:03.340
创建出来一个节点

08:03.340 --> 08:04.220
你看这个时候

08:06.060 --> 08:09.140
这个时候这个节点我们有了一些内容了

08:09.140 --> 08:10.140
有了一个节点了

08:10.140 --> 08:12.660
这是只是把我们当前的节点传进来是吧

08:12.660 --> 08:15.140
然后当前的元素还会有紫元素

08:16.220 --> 08:16.900
对吧

08:16.900 --> 08:19.020
当前的元素还会有紫元素

08:21.220 --> 08:22.500
这个紫元素在哪搞呢

08:24.980 --> 08:26.180
当前的元素还有紫元素

08:26.180 --> 08:26.820
对吧

08:26.820 --> 08:27.780
这个紫元素是啥

08:28.780 --> 08:32.740
这个紫元素是不是就是这个 element里面的

08:33.220 --> 08:33.700
对吧

08:33.700 --> 08:35.100
element里面有个这个

08:35.820 --> 08:37.260
let's一个chill

08:38.620 --> 08:41.220
等于 element

08:42.540 --> 08:43.180
vnode

08:43.180 --> 08:44.460
vnode.element

08:44.980 --> 08:46.180
点看好了

08:46.180 --> 08:48.020
这个里面有个chill的node

08:49.580 --> 08:50.820
这是原生的里面就有

08:50.820 --> 08:52.260
原生的里面就有

08:52.260 --> 08:54.700
这个是每一个元素下的这个node节点

08:55.980 --> 08:58.660
原生的下面就是每一个元素都会对应一个node节点

08:58.660 --> 08:58.980
是吧

08:59.980 --> 09:01.100
这是这个

09:01.100 --> 09:02.940
它下面这个紫的这个node节点

09:04.940 --> 09:06.020
然后呢

09:06.020 --> 09:08.060
我们需要把这些紫的节点

09:08.060 --> 09:10.220
都给它添加到我的这个孩子里

09:10.220 --> 09:10.500
是吧

09:10.500 --> 09:12.660
我这个孩子这个求准现在是个空的数组

09:12.660 --> 09:13.140
对吧

09:13.140 --> 09:14.180
我们在处理话的时候

09:14.180 --> 09:15.100
这个求准是个啥

09:16.380 --> 09:17.220
看一下啊

09:17.220 --> 09:19.340
处理话的时候这个求准是个空的数组

09:19.340 --> 09:19.740
对吧

09:19.740 --> 09:21.420
我需要把这些紫节点

09:21.420 --> 09:23.220
I girl的都给它弄进来

09:23.220 --> 09:24.140
怎么办

09:24.140 --> 09:24.700
出循环

09:27.300 --> 09:28.620
let's一个I等于0

09:28.980 --> 09:30.100
I小鱼

09:32.660 --> 09:35.100
chill子点烂子

09:35.100 --> 09:35.580
I加加

09:38.180 --> 09:40.860
然后我们让什么

09:40.860 --> 09:41.300
light

09:44.140 --> 09:45.140
chill的

09:46.060 --> 09:46.700
chill的

09:48.300 --> 09:49.340
node

09:49.340 --> 09:50.740
我们创建一个chill的node

09:50.740 --> 09:52.540
等于construct

09:53.420 --> 09:53.860
vnode

09:54.620 --> 09:54.980
看好了

09:54.980 --> 09:55.780
我调的是自己

09:56.980 --> 09:57.820
调的是自己

09:57.820 --> 09:58.700
地规是吧

09:58.700 --> 09:58.860
哎

09:58.860 --> 09:59.780
深度永远搜索

10:05.650 --> 10:06.210
vnode

10:07.850 --> 10:08.730
这就是一个深度

10:08.730 --> 10:09.490
永远搜索

10:09.490 --> 10:12.090
自己有多少个孩子

10:12.090 --> 10:13.650
我就循环便利多少遍

10:14.690 --> 10:16.210
自己有多少个孩子

10:16.210 --> 10:17.530
我就循环便利多少遍

10:19.570 --> 10:20.010
ok吧

10:21.730 --> 10:23.090
那这个下面啊

10:23.090 --> 10:24.490
我们假设啊

10:26.330 --> 10:28.730
有可能给我们返回出来多种情况

10:28.730 --> 10:30.130
其中一种情况就是

10:30.130 --> 10:30.410
if

10:33.130 --> 10:34.170
chill的node

10:35.090 --> 10:36.690
instance of vnode

10:37.770 --> 10:39.970
给我们返回的就是一个node节点

10:39.970 --> 10:41.810
那我们就给它添加进去是吧

10:41.810 --> 10:43.690
vnode.chill准

10:44.530 --> 10:45.370
.push

10:47.290 --> 10:47.610
push

10:48.770 --> 10:51.730
把我们这个获得到的这个节点给添加进去

10:52.730 --> 10:53.610
else

10:53.610 --> 10:54.570
没什么还有个else

10:55.410 --> 11:00.290
而说你这个construct vnode返回的不都是节点吗

11:00.290 --> 11:02.530
我们比如说下面我返回的不都是这个节点吗

11:02.530 --> 11:03.770
return vnode

11:03.770 --> 11:05.810
实际上不一定

11:05.850 --> 11:07.690
它有可能返回的是个节点数组

11:08.890 --> 11:12.530
这个是返回单一节点的时候

11:14.930 --> 11:18.650
这种情况是返回节点数组的时候

11:19.970 --> 11:22.530
我们可能会返回节点数组

11:22.530 --> 11:24.170
之所以什么情况下会讲

11:24.170 --> 11:25.810
会说这个返回节点数组

11:25.810 --> 11:27.930
咱们之后讲vfo的时候

11:27.930 --> 11:31.010
它下面可能会因为一个节点创建出了一坨节点

11:32.010 --> 11:33.730
所以说我们要在这块要

11:34.290 --> 11:36.450
先预先在预留上这边一个东西

11:38.210 --> 11:38.610
点

11:39.970 --> 11:40.330
q准

11:40.850 --> 11:43.930
等于vnode.chill准

11:44.530 --> 11:45.370
点construct

11:45.890 --> 11:47.130
这是数组的一个方法

11:47.130 --> 11:48.210
叫做数组的拼接

11:48.810 --> 11:49.890
大家应该都学过是吧

11:50.810 --> 11:51.410
chill的node

11:52.130 --> 11:55.970
这是把当前的这个q准和给我返回回来的这个数组

11:55.970 --> 11:56.690
进行拼接

11:56.690 --> 11:57.050
对

11:57.050 --> 11:57.810
给它拼在一块

11:57.810 --> 12:00.170
然后复制给q准这里面

12:00.170 --> 12:01.730
复制给q准这里面

12:04.370 --> 12:08.170
这样的话我们就完成了一个深度游言搜索

12:08.170 --> 12:09.810
我们就完成了一个深度游言搜索

12:11.970 --> 12:12.530
好了

12:13.290 --> 12:14.570
可以先看一下这个东西

12:14.570 --> 12:16.250
有没有什么逻辑上的问题

12:16.770 --> 12:18.290
我们先来创建一个节点

12:18.290 --> 12:19.450
这是当前的节点

12:19.450 --> 12:19.970
是吧

12:19.970 --> 12:22.370
然后我这个当前的节点下有仔节点

12:22.370 --> 12:23.730
但是有没有仔节点

12:23.730 --> 12:24.690
我自己说了不算

12:24.690 --> 12:27.490
我得看实际的标签下有没有仔节点

12:28.170 --> 12:30.090
只要实际的标签下有仔节点

12:30.090 --> 12:31.090
我就有仔节点

12:32.090 --> 12:33.730
然后最后我会有一个vnode

12:35.330 --> 12:36.250
我们来看一下

12:36.730 --> 12:38.290
回过来刷新

12:39.050 --> 12:39.730
倒了个错了

12:43.710 --> 12:44.950
它这块有一个

12:46.910 --> 12:50.110
这个引用vnode.js

12:50.110 --> 12:51.390
vnode.js

12:54.920 --> 12:57.040
刷新了之后我们来输出一下

12:58.280 --> 13:01.440
typed.下滑线vnode

13:01.840 --> 13:02.320
是吧

13:02.320 --> 13:04.200
这个就是虚拟动物数的更接链了

13:04.200 --> 13:04.760
是吧

13:04.760 --> 13:06.240
虚拟动物数的更接点了是吧

13:07.440 --> 13:07.840
好了

13:07.840 --> 13:08.720
我这个虚拟动物数

13:09.160 --> 13:10.280
对对vnode没啥问题

13:10.680 --> 13:12.600
element放上去了之后

13:12.600 --> 13:14.080
是指的整个了是吧

13:14.720 --> 13:15.480
env

13:15.480 --> 13:18.200
我们env还没有出说话

13:18.760 --> 13:20.080
然后拍润的vnode

13:20.080 --> 13:21.400
因为我当前是更接点

13:21.400 --> 13:22.440
所以拍润的vnode

13:22.440 --> 13:25.160
它是div time-rate的数组

13:25.160 --> 13:25.560
vnode

13:25.560 --> 13:26.840
Type4的文本vnode

13:27.360 --> 13:28.640
然后就是这个q准

13:28.640 --> 13:30.600
我这个下面有多少个仔节点

13:30.600 --> 13:31.160
对吧

13:31.680 --> 13:32.440
看一下

13:32.440 --> 13:33.440
第一个仔节点

13:34.360 --> 13:34.880
typed

13:37.200 --> 13:37.480
是吧

13:37.480 --> 13:38.640
第一个仔节点是typed

13:38.640 --> 13:39.000
是吧

13:40.560 --> 13:41.000
对吧

13:41.360 --> 13:42.680
第一个字节从这到这

13:42.680 --> 13:42.960
是吧

13:43.600 --> 13:44.520
没啥问题是吧

13:44.520 --> 13:46.280
第一个仔节点是跟咱说的一样是吧

13:47.440 --> 13:48.520
我这个这呢是吧

13:51.200 --> 13:51.680
然后呢

13:51.680 --> 13:52.480
它的这个tug

13:52.480 --> 13:53.480
是不是景typed

13:53.920 --> 13:54.760
对吧景typed

13:57.120 --> 13:58.560
然后第二个仔节点br

14:00.040 --> 14:01.000
也没啥问题是吧

14:01.520 --> 14:02.440
第二节点br

14:02.440 --> 14:04.160
第三个节点又是一堆文本

14:04.720 --> 14:05.600
是从这到这

14:05.680 --> 14:06.080
是吧

14:06.080 --> 14:07.120
它只有一个换号

14:07.120 --> 14:07.600
你看好了

14:07.600 --> 14:08.960
虽然只有一个换号

14:09.160 --> 14:09.840
但是呢

14:10.560 --> 14:12.000
这个typed里面只有一个换号

14:12.000 --> 14:12.680
但是呢

14:12.680 --> 14:13.840
它依然是一个节点

14:13.840 --> 14:15.200
它依然也得是一个节点

14:16.280 --> 14:17.080
下一个节点

14:17.200 --> 14:17.640
死半

14:19.240 --> 14:19.800
然后看啊

14:19.800 --> 14:21.960
这个死半里面是有仔节点的

14:22.280 --> 14:23.920
死半下面有个q准

14:23.920 --> 14:25.120
这个q准

14:26.240 --> 14:27.520
是死半里的内容

14:28.520 --> 14:30.200
这个q准是死半里的内容

14:30.720 --> 14:31.800
所以说这个

14:32.120 --> 14:32.920
再三强调

14:32.920 --> 14:35.400
这个串是死半的仔节点

14:35.480 --> 14:37.320
而不是死半的内容的一部分

14:38.840 --> 14:39.560
有同学认为

14:39.560 --> 14:40.360
这个不代表强

14:40.360 --> 14:41.120
就不是节点了

14:41.280 --> 14:41.800
不是这样的

14:43.160 --> 14:43.680
节点

14:43.880 --> 14:44.720
不一定代表强

14:45.600 --> 14:46.080
这样的话

14:46.080 --> 14:48.200
我们就基本上

14:48.200 --> 14:50.200
构建了一个虚拟刀木树的一个出行

14:53.320 --> 14:53.600
对的

14:55.600 --> 14:56.600
太子的点

14:58.480 --> 14:59.000
运动的

15:00.040 --> 15:01.040
我们就构建出来了

15:01.040 --> 15:02.600
一个虚拟刀木树的一个出行

15:03.600 --> 15:06.280
然后现在有了这个虚拟刀木树的出行了

15:06.880 --> 15:08.400
其实还不够完整

15:08.600 --> 15:10.240
当然现在还有很多东西都没有做

15:10.520 --> 15:12.280
比如说标签上的一些属性

15:13.360 --> 15:13.800
正大的

15:14.040 --> 15:14.960
然后还有一些渲染

15:14.960 --> 15:15.720
我们还都没有做

15:17.360 --> 15:17.960
没有关系

15:18.320 --> 15:20.400
咱们先把大体的几个块

15:20.400 --> 15:21.560
先给建立起来之后

15:21.880 --> 15:22.800
通过Render

15:23.160 --> 15:24.280
一关连就有了

15:24.520 --> 15:25.040
通过Render

15:25.040 --> 15:25.720
一关连就有了

15:26.040 --> 15:27.760
我们下一步做个什么

15:28.720 --> 15:30.440
下一步继续

15:30.840 --> 15:31.360
下一步

15:31.480 --> 15:33.880
我们先写个Render

15:34.480 --> 15:35.600
下一步我们先写个Render

15:36.120 --> 15:36.680
那

15:37.440 --> 15:38.200
自然哪儿写呢

15:38.680 --> 15:39.840
刚才记着我提到过了

15:39.840 --> 15:40.120
是吧

15:41.760 --> 15:43.440
Mount进行挂载了之后

15:43.720 --> 15:44.920
要进行预备渲染

15:45.240 --> 15:46.480
为什么要进行预备渲染呢

15:47.200 --> 15:49.280
我得把每一个节点里面

15:49.280 --> 15:51.440
有没有模板给它给挑出来

15:52.040 --> 15:52.320
是吧

15:52.960 --> 15:54.760
我们到了时候要有一个映射关系

15:54.760 --> 15:56.600
我们到了时候要有一个映射关系

15:57.120 --> 15:57.720
就比如说

15:57.960 --> 15:59.280
我改了一个字段

16:00.280 --> 16:02.040
有的时候你们可以自己想

16:02.040 --> 16:02.720
我改了一个

16:02.720 --> 16:03.400
比如说

16:04.200 --> 16:04.760
Counting的

16:05.280 --> 16:06.760
我把Pender改成Monkey了

16:07.160 --> 16:07.720
你们想想

16:08.440 --> 16:09.280
我这个Counting

16:09.280 --> 16:10.840
只可能用在一个地方

16:11.760 --> 16:12.520
不一定是吧

16:12.800 --> 16:14.600
它有可能不只用在一个地方

16:14.840 --> 16:16.480
它可能用在很多个地方

16:16.960 --> 16:17.360
对吧

16:18.120 --> 16:19.640
如果用在很多个地方的话

16:19.840 --> 16:20.960
那它都用在哪呢

16:21.480 --> 16:24.560
我总不能把整个道目数都便利一遍

16:25.080 --> 16:26.480
如果都便利一遍的话

16:26.480 --> 16:27.960
是不是性能也太差了

16:28.240 --> 16:30.400
所以我们必须要建立锁引

16:31.200 --> 16:32.680
建立渲染锁引

16:33.520 --> 16:35.120
所以说我们要在这个里面

16:35.120 --> 16:37.240
实际上进行预备渲染的时候

16:37.240 --> 16:38.560
就是建立

16:39.320 --> 16:40.600
渲染锁引

16:41.640 --> 16:45.960
通过模板找vnode

16:46.920 --> 16:48.520
通过vnode

16:49.480 --> 16:50.760
找模板

16:51.520 --> 16:54.440
你会发现整个框架的底层

16:54.440 --> 16:56.160
它都是在围绕着各种算法

16:57.080 --> 16:58.960
到了时候我们需要再便利

16:59.920 --> 17:01.360
这个数形结构了是吧

17:01.880 --> 17:02.880
这不是二叉数了是吧

17:02.880 --> 17:04.080
这就是个数形结构是吧

17:04.360 --> 17:06.160
便利数形结构建立

17:06.160 --> 17:08.400
所以便利数形结构建立

17:08.400 --> 17:10.600
所以这个就是进行预备渲染

17:10.600 --> 17:11.240
要做的事情

17:12.600 --> 17:13.680
那我们下一节课

17:13.680 --> 17:15.400
我们来说预备渲染

