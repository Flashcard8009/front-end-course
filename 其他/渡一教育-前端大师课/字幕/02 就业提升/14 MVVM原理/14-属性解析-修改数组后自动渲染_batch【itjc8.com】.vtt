WEBVTT

00:01.780 --> 00:03.780
Hello 大家好

00:03.780 --> 00:06.780
上一集咱们说了vivo 是吧

00:06.780 --> 00:08.780
我们用vivo的来进行了一下渲染

00:08.780 --> 00:12.780
我们能在页面上渲染出来

00:12.780 --> 00:14.780
粒子 是吧

00:14.780 --> 00:15.780
但是我们也说了

00:15.780 --> 00:17.780
如果我们修改了这个值

00:17.780 --> 00:18.780
我们修改了粒子

00:18.780 --> 00:20.780
你们的内容现在是不会变化的

00:20.780 --> 00:23.780
那我们这节课就来讲一下

00:23.780 --> 00:26.780
如何当我们修改了值了之后

00:26.780 --> 00:27.780
我们能发生变化

00:27.780 --> 00:29.780
首先修改了之后

00:29.780 --> 00:30.780
最后的东西是啥

00:30.780 --> 00:31.780
是proxy 是吧

00:31.780 --> 00:34.780
我们之前就直接装data

00:34.780 --> 00:37.780
然后一个name space

00:37.780 --> 00:39.780
我们再穿一个空块就可以

00:39.780 --> 00:41.780
因为它没有当前的prb

00:41.780 --> 00:49.780
它只要去渲染粒子的参数就可以了

00:49.780 --> 00:51.780
但是这块有一个问题

00:51.780 --> 00:52.780
什么问题呢

00:52.780 --> 00:56.780
就是当我们粒子发生变化的时候

00:56.780 --> 00:59.780
这个节点也得发生变化

00:59.780 --> 01:00.780
对吧

01:00.780 --> 01:02.780
它跟我们那个值改了不一样

01:02.780 --> 01:05.780
那个值改了的话

01:05.780 --> 01:06.780
过去有这个位置

01:06.780 --> 01:07.780
现在还是那个位置

01:07.780 --> 01:08.780
它有个对应的位置

01:08.780 --> 01:10.780
我们只要把对应的位置给改了就可以了

01:10.780 --> 01:11.780
但是粒子的这块

01:11.780 --> 01:13.780
如果发生了一些变化的话

01:13.780 --> 01:15.780
它很有可能会造成什么呢

01:15.780 --> 01:18.780
很有可能会造成很多的节点

01:18.780 --> 01:19.780
重新构建

01:19.780 --> 01:21.780
它有可能会造成一些节点

01:21.780 --> 01:22.780
重新构建

01:22.780 --> 01:23.780
所以说

01:23.780 --> 01:25.780
这种时候我们希望有一个方法

01:25.780 --> 01:27.780
就是rebuild

01:27.780 --> 01:30.780
来把我们需要构建的节点

01:30.780 --> 01:32.780
给它重新来一点

01:32.780 --> 01:34.780
给它重新的构建一个

01:34.780 --> 01:37.780
name space

01:37.780 --> 01:42.110
然后我们现在没有这个方法

01:42.110 --> 01:45.110
我希望把它写在mount里

01:45.110 --> 01:47.110
挂点这里

01:47.110 --> 01:56.220
mount.js

01:56.220 --> 01:58.220
mount里现在没有

01:58.220 --> 01:59.220
我们再重新写

02:00.220 --> 02:02.220
xpart

02:02.220 --> 02:04.220
方式

02:04.220 --> 02:06.220
我们来写一下rebuild的方法

02:06.220 --> 02:08.220
我们来写一下rebuild的方法

02:08.220 --> 02:10.220
有两个参数是吧

02:10.220 --> 02:11.220
一个是vm

02:11.220 --> 02:13.220
一个是template

02:13.220 --> 02:22.400
其实这个时候挺好写

02:22.400 --> 02:26.400
我们来拿取到template

02:26.400 --> 02:29.400
它的对应的一个节点

02:29.400 --> 02:31.400
我们要拿取到template的

02:31.400 --> 02:32.400
对应的一个节点

02:32.400 --> 02:34.400
其实从render里来找

02:36.400 --> 02:38.400
我们现在没有这些东西吧

02:38.400 --> 02:40.400
我们来写两个方法

02:40.400 --> 02:42.400
xpart

02:42.400 --> 02:43.400
什么呢

02:43.400 --> 02:46.400
get vnode

02:46.400 --> 02:49.400
by

02:49.400 --> 02:51.400
template

02:51.400 --> 02:56.470
方式

02:56.470 --> 02:58.470
传进来一个vnode

02:59.470 --> 03:02.470
我们需要的是让它传进来一个vnode

03:02.470 --> 03:04.470
传进来一个template

03:04.470 --> 03:06.470
根据template

03:06.470 --> 03:08.470
我们来找到vnode

03:08.470 --> 03:10.470
直接recent

03:10.470 --> 03:12.470
template tovnode

03:12.470 --> 03:14.470
点get

03:16.470 --> 03:18.470
我们把这个方法导出去

03:18.470 --> 03:20.470
导到mount里来

03:20.470 --> 03:22.470
render

03:33.590 --> 03:35.590
我们俩是放一个这个方法

03:35.590 --> 03:37.590
首先

03:37.590 --> 03:41.590
我们先把对应的虚拟节点给它找

03:41.590 --> 03:43.590
Light一个什么Light

03:43.590 --> 03:45.590
我们要找一个虚拟节点

03:45.590 --> 03:47.590
vertl

03:47.590 --> 03:49.590
vertl

03:49.590 --> 03:51.590
到吗

03:51.590 --> 03:53.590
vertl node

03:53.590 --> 03:55.590
get

03:55.590 --> 03:59.030
vnode by

03:59.030 --> 04:01.030
template

04:01.030 --> 04:03.030
它既然有review的

04:03.030 --> 04:05.030
它一定要告诉我从哪个节点开始review的

04:05.030 --> 04:07.030
这个review的一定是从哪个节点review的

04:07.030 --> 04:09.030
它必须要告诉我从哪个节点开始review的

04:09.030 --> 04:11.030
这个review的一定是从哪个节点review的

04:11.030 --> 04:13.030
哪个节点review的

04:13.030 --> 04:15.030
一定是从这个

04:17.030 --> 04:19.030
虚拟的这个节点开始review的

04:19.030 --> 04:21.030
从虚拟的这个节点开始review的

04:21.030 --> 04:23.030
到了时候我们在这个

04:23.030 --> 04:25.030
Render的时候

04:25.030 --> 04:27.030
我们Render的时候会在这块记录一下

04:27.030 --> 04:29.030
它说我是虚拟的

04:29.030 --> 04:31.030
也会给它记录

04:31.030 --> 04:33.030
我们从这块给它拿出来一个

04:33.030 --> 04:35.030
虚拟的这个节点

04:38.860 --> 04:40.860
然后Light

04:40.860 --> 04:41.860
等于0

04:41.860 --> 04:42.860
i

04:42.860 --> 04:43.860
小于

04:43.860 --> 04:47.170
vertl node.lans

04:53.810 --> 04:55.810
然后我们拿出来的东西

04:55.810 --> 04:57.810
都是一个数组是吧

04:57.810 --> 04:59.810
都是一个集合

04:59.810 --> 05:01.810
然后我们把vertl node

05:01.810 --> 05:03.810
点

05:03.810 --> 05:05.810
parent

05:05.810 --> 05:07.810
为啥点parent

05:07.810 --> 05:09.810
我们拿出来的是一个啥呀

05:09.810 --> 05:11.810
是一个虚拟的这个节点是吧

05:11.810 --> 05:13.810
这节点什么都没有是吧

05:13.810 --> 05:15.810
得找次的parent

05:15.810 --> 05:17.810
它的parent.elm

05:17.810 --> 05:19.810
的intel

05:19.810 --> 05:21.810
先给个清空

05:23.810 --> 05:25.810
我们把这个elm的intel

05:25.810 --> 05:27.810
先把这三个节点给它干掉

05:27.810 --> 05:29.810
把这三个节点给它干掉

05:29.810 --> 05:31.810
干掉了之后

05:33.810 --> 05:35.810
然后把我们这个虚拟节点再给放

05:35.810 --> 05:42.190
the

05:42.190 --> 05:47.360
open the chill

05:47.360 --> 05:49.360
vertl node.i.l

05:51.360 --> 05:53.360
我从来说老师你这为什么把这个

05:53.360 --> 05:55.360
我这个虚拟的节点给放过去

05:55.360 --> 05:56.360
你看啊

05:56.360 --> 05:58.360
最开始的时候是不是就是

05:58.360 --> 06:00.360
UL和那个虚拟节点

06:00.360 --> 06:02.360
只不过我一旦给它编译了之后

06:02.360 --> 06:03.360
一旦给它渲染之后

06:03.360 --> 06:05.360
这个节点就变成个虚拟的了

06:05.360 --> 06:07.360
下面出来的三个真实是吧

06:07.360 --> 06:09.360
我现在要做的什么

06:09.360 --> 06:10.360
把它打回原形

06:10.360 --> 06:12.360
打回成这种模板的这种形状

06:12.360 --> 06:14.360
打回原形

06:14.360 --> 06:16.360
打回成模板的这个形状

06:16.360 --> 06:17.360
然后呢

06:17.360 --> 06:19.360
然后重新的进行

06:19.360 --> 06:21.360
构建

06:21.360 --> 06:23.360
哎 冒下来

06:23.360 --> 06:25.360
打回到模板的这种形状

06:25.360 --> 06:26.360
然后light

06:26.360 --> 06:28.360
result

06:28.360 --> 06:30.360
这个时候把原有的理念都删了

06:30.360 --> 06:32.360
把虚拟节点填安全

06:32.360 --> 06:33.360
是不是就跟

06:33.360 --> 06:34.360
原先那一样的

06:34.360 --> 06:36.360
是不是就跟原先那一样的

06:36.360 --> 06:38.360
然后我再调用construct node

06:38.360 --> 06:41.360
我再重新构建一遍

06:41.360 --> 06:43.360
就相当于我在构建虚拟动物数

06:43.360 --> 06:45.360
从这个节点开始再重新构建

06:45.360 --> 06:46.360
是吧

06:46.360 --> 06:48.360
我不会全局全的重新构建

06:48.360 --> 06:51.360
我只把它影响到的这一小部分

06:51.360 --> 06:52.360
重新构建

06:52.360 --> 06:54.360
我只把这一小部分给重新构建

06:55.360 --> 06:57.360
vert node

06:57.360 --> 06:59.360
i

06:59.360 --> 07:01.360
点 变二

07:01.360 --> 07:03.360
vert node

07:03.360 --> 07:05.360
i

07:05.360 --> 07:06.360
点

07:06.360 --> 07:09.360
patterge

07:09.360 --> 07:12.360
我们把它的负极传进去

07:12.360 --> 07:14.360
把虚拟节点的负极传进去

07:14.360 --> 07:17.360
把虚拟的节点对应的道目传进去

07:17.360 --> 07:20.360
然后让它重新的构建进去

07:20.360 --> 07:21.360
这样的话

07:21.360 --> 07:23.360
它下面这些微闹的也好

07:23.360 --> 07:24.360
和闹的也好

07:24.360 --> 07:26.360
就重新的建立

07:26.360 --> 07:28.360
刚才的那一小部分

07:28.360 --> 07:29.360
不要

07:29.360 --> 07:31.360
它这种做法

07:31.360 --> 07:32.360
我们现在这种写法

07:32.360 --> 07:34.360
不用把整体的道目

07:34.360 --> 07:35.360
全都重新构建

07:35.360 --> 07:37.360
只把这一小个的局部

07:37.360 --> 07:38.360
哪一个局部呢

07:38.360 --> 07:40.360
就把这个例子的

07:40.360 --> 07:41.360
设计到的这一小个局部

07:41.360 --> 07:43.360
给它构建一遍

07:43.360 --> 07:44.360
其他的地方

07:44.360 --> 07:46.360
我们不能构建

07:46.360 --> 07:48.360
然后vert node

07:48.360 --> 07:50.360
i

07:50.360 --> 07:51.360
点

07:51.360 --> 07:52.360
pattern

07:52.360 --> 07:53.360
点

07:53.360 --> 07:54.360
虚拟

07:54.360 --> 07:59.040
点

07:59.040 --> 08:00.040
pattern

08:00.040 --> 08:02.040
点

08:02.040 --> 08:04.040
虚拟

08:04.040 --> 08:08.060
等于组织造成

08:08.060 --> 08:10.060
把它这个负极的这个虚拟

08:10.060 --> 08:12.060
再给重新的设置一点

08:12.060 --> 08:13.060
然后我们看

08:13.060 --> 08:15.060
这边修改了之后

08:15.060 --> 08:17.060
Render这边还能确定

08:17.060 --> 08:19.060
Render这边现在有问题了

08:19.060 --> 08:20.060
为啥

08:20.060 --> 08:22.060
它之前做的这些锁银

08:22.060 --> 08:23.060
有一些不准确的

08:23.060 --> 08:25.060
之前的锁银

08:25.060 --> 08:27.060
是基于之前的道目结构

08:27.060 --> 08:29.060
现在这个有点不好用了

08:29.060 --> 08:30.060
所以我们要做一个事情

08:30.060 --> 08:32.060
xpar的方式

08:34.060 --> 08:36.060
之前的锁银

08:36.060 --> 08:38.060
是基于之前的道目结构

08:38.060 --> 08:40.060
我们现在要重新的

08:40.060 --> 08:41.060
再构建一遍

08:41.060 --> 08:43.060
把之前的锁银拨弃掉

08:43.060 --> 08:45.060
clean map

08:45.060 --> 08:47.060
我们来写一下clean map

08:47.060 --> 08:49.060
其实很简单

08:49.060 --> 08:53.060
time to vnode.clean

08:53.060 --> 08:59.520
然后vnode to time.clean

08:59.520 --> 09:01.520
我们在这里面clean

09:01.520 --> 09:12.460
我们把这块来进行一下clean

09:12.460 --> 09:15.460
然后重新建一遍锁银

09:15.460 --> 09:17.460
好 重新建锁银

09:17.460 --> 09:20.460
可不会操作节点

09:20.460 --> 09:22.460
这块的性能是很高的

09:22.460 --> 09:24.460
我说重新建锁银

09:24.460 --> 09:26.460
是不是不太好

09:26.460 --> 09:28.460
这块的性能是不会很低的

09:28.460 --> 09:30.460
因为我这块不会动到

09:30.460 --> 09:32.460
这块prepare render

09:32.460 --> 09:34.460
这块不会动道目节点

09:34.460 --> 09:36.460
这会不会动道目节点

09:36.460 --> 09:38.460
然后就是proxy

09:38.460 --> 09:40.460
当我的proxy发生变化的时候

09:40.460 --> 09:41.460
我就review的一下

09:41.460 --> 09:43.460
然后重新的选择一下

09:43.460 --> 09:46.460
然后我再看一下这个

09:46.460 --> 09:48.460
来看一下这个render

09:48.460 --> 09:49.460
prepare这块

09:49.460 --> 09:53.730
找一下prepare render

09:55.730 --> 09:57.730
我看一下这块有没有问题

09:57.730 --> 09:59.730
再来重新来读一下

09:59.730 --> 10:01.730
prepare render

10:01.730 --> 10:03.730
我刚才感觉好像有点问题

10:03.730 --> 10:05.730
对 有点问题

10:05.730 --> 10:07.730
我们三的时候会解决

10:07.730 --> 10:08.730
能处理

10:08.730 --> 10:10.730
一的时候也能处理

10:10.730 --> 10:12.730
然后还有种情况

10:12.730 --> 10:14.730
就是我们刚才说的虚拟节点的事

10:14.730 --> 10:16.730
如果是虚拟节点的事

10:16.730 --> 10:23.640
vnode.node

10:23.640 --> 10:24.640
太好了

10:24.640 --> 10:26.640
如果是虚拟节点

10:26.640 --> 10:28.640
虚拟节点是不是也得勾结

10:28.640 --> 10:30.640
因为就像我们刚才说的

10:30.640 --> 10:33.640
我们这边一修改

10:33.640 --> 10:34.640
我们这边一修改

10:34.640 --> 10:36.640
我就得知道

10:36.640 --> 10:38.640
哪个东西变了

10:38.640 --> 10:40.640
是吧

10:40.640 --> 10:43.640
list对应的它都是虚拟节点

10:43.640 --> 10:45.640
list对应的都是虚拟节点

10:45.640 --> 10:46.640
如果是vfo这种

10:46.640 --> 10:48.640
vfo这种对应的都是虚拟节点

10:48.640 --> 10:50.640
它也得有摄像的指

10:50.640 --> 10:51.640
这个指只要一变了

10:51.640 --> 10:54.640
我们这整个虚拟节点对于重新选择

10:54.640 --> 10:55.640
所以说

10:55.640 --> 10:56.640
虚拟节点

10:56.640 --> 10:57.640
就说我们之前没有写这块

10:57.640 --> 10:58.640
是吧

10:58.640 --> 10:59.640
我现在来写一下

10:59.640 --> 11:01.640
set time to node

11:01.640 --> 11:10.640
vnode.node.data

11:10.640 --> 11:11.640
是吧

11:11.640 --> 11:12.640
vnode.data

11:12.640 --> 11:14.640
我们用上了这个值是吧

11:14.640 --> 11:17.640
还记着vnode.data

11:17.640 --> 11:20.640
在vfo这块

11:21.640 --> 11:23.640
这是data这个区域

11:23.640 --> 11:25.640
我把对下的母版存在

11:25.640 --> 11:26.640
就是list

11:26.640 --> 11:27.640
t in list

11:27.640 --> 11:29.640
我把这块取出来放在这

11:29.640 --> 11:31.640
这个值就是data

11:31.640 --> 11:35.640
也就是说当我们需要重新渲染的时候

11:35.640 --> 11:36.640
我们把data用上

11:36.640 --> 11:39.640
然后vnode

11:39.640 --> 11:42.640
给它做两个所以

11:42.640 --> 11:45.640
set vnode to template

11:45.640 --> 11:47.640
vnode.data

11:47.640 --> 11:49.640
vnode

11:50.640 --> 11:51.640
这样的话呢

11:51.640 --> 11:52.640
我们这种就比较全了

11:52.640 --> 11:53.640
是吧

11:53.640 --> 11:54.640
vnode.data

11:54.640 --> 11:55.640
虚拟节点的

11:55.640 --> 11:56.640
带属性标签的

11:56.640 --> 11:59.640
然后是普通标签的

11:59.640 --> 12:02.640
来看一下

12:02.640 --> 12:03.640
刷新一下

12:03.640 --> 12:04.640
没有什么问题是吧

12:04.640 --> 12:06.640
pist的list

12:06.640 --> 12:08.640
之前只有两个

12:08.640 --> 12:09.640
点push

12:09.640 --> 12:11.640
新增意义

12:12.640 --> 12:14.640
可以取个名叫倒管小狗

12:14.640 --> 12:18.640
然后它的年龄是21

12:19.640 --> 12:21.640
有点问题了是吧

12:21.640 --> 12:24.640
新增一个是没有什么问题了是吧

12:24.640 --> 12:27.640
新增一个确实新增了

12:27.640 --> 12:31.640
但是它好像没有进行渲染

12:31.640 --> 12:33.640
新增一个是新增了

12:33.640 --> 12:35.640
但是好像没有进行渲染

12:35.640 --> 12:38.640
那我们来看一下是哪有问题

12:41.640 --> 12:43.640
这种查错了这种时候就比较麻烦了

12:43.640 --> 12:46.640
因为现在整体已经比较复杂了

12:46.640 --> 12:48.640
整体的结构已经开始复杂起来了

12:48.640 --> 12:51.640
所以现在我们来看一下

12:51.640 --> 12:53.640
从哪来开始想

12:53.640 --> 12:55.640
新增一个没问题了

12:55.640 --> 12:56.640
代表的是rebuild

12:56.640 --> 12:58.640
这块整个都没有问题了是吧

12:58.640 --> 12:59.640
rebuild已经创建出来一个新的了

12:59.640 --> 13:01.640
其实就是runner data

13:01.640 --> 13:02.640
这块可能有问题了是吧

13:02.640 --> 13:04.640
runner data在获取的时候

13:04.640 --> 13:06.640
我们有没有能够从里面

13:06.640 --> 13:08.640
拿出来相应的node

13:09.640 --> 13:11.640
我们来看一下它的vnode

13:11.640 --> 13:12.640
现在对不对

13:19.410 --> 13:20.410
vnode

13:21.410 --> 13:23.410
这块有个url对吧

13:23.410 --> 13:24.410
在这个url里

13:24.410 --> 13:27.410
然后这个url下是一个ri

13:27.410 --> 13:30.410
这个rinode typev0是个虚拟节点

13:30.410 --> 13:32.410
然后这个ri下

13:32.410 --> 13:37.230
这个ri下

13:37.230 --> 13:39.230
只有一个text

13:39.230 --> 13:46.810
这个ri的node structure

13:46.810 --> 13:48.810
这个ri下

13:48.810 --> 13:50.810
只有一个这个

13:50.810 --> 13:51.810
这没有什么

13:51.810 --> 13:53.810
这没有我们虚拟的

13:53.810 --> 13:58.080
当我们建立得有问题是吧

13:58.080 --> 13:59.080
看一下

13:59.080 --> 14:05.980
我们现在这个虚拟道目

14:05.980 --> 14:07.980
这块建立得有问题

14:07.980 --> 14:08.980
我看一下

14:08.980 --> 14:10.980
ri

14:11.980 --> 14:13.980
url

14:13.980 --> 14:15.980
是这个没有问题了

14:15.980 --> 14:17.980
然后ri

14:17.980 --> 14:19.980
ri我移到这个ri上

14:19.980 --> 14:21.980
没有

14:21.980 --> 14:23.980
那也就是说

14:23.980 --> 14:26.980
mount的rebuild的这一块有问题

14:26.980 --> 14:29.540
是吧

14:29.540 --> 14:31.540
mount的rebuild的这块有问题

14:31.540 --> 14:33.540
那我们在rebuild的时候

14:33.540 --> 14:35.540
我先guide的template的vnode

14:35.540 --> 14:37.540
我来看一下这个vnode拿不拿到

14:37.540 --> 14:41.690
vnode

14:41.690 --> 14:53.700
这是vnode是吧

14:53.700 --> 14:55.700
拿到了是吧

14:55.700 --> 14:57.700
这个时候vnode是拿到了

14:57.700 --> 14:59.700
然后我们循环的

15:01.700 --> 15:03.700
我们循环的

15:03.700 --> 15:05.700
它可能

15:05.700 --> 15:07.700
属性只有一个是吧

15:07.700 --> 15:08.700
属性只有一个

15:08.700 --> 15:10.700
所以就只有这一圈

15:10.700 --> 15:12.700
vnode

15:12.700 --> 15:14.700
pirent.element

15:14.700 --> 15:15.700
把它的负极

15:15.700 --> 15:17.700
index.tml微空

15:17.700 --> 15:19.700
让它负极的index.tml微空

15:19.700 --> 15:21.700
然后

15:21.700 --> 15:23.700
把当前

15:23.700 --> 15:25.700
这个给它添加进去

15:25.700 --> 15:28.700
把当前的这个给它添加进去

15:28.700 --> 15:31.700
mountnode i的element

15:31.700 --> 15:32.700
是吧

15:32.700 --> 15:34.700
把我们这个虚拟的道目

15:34.700 --> 15:35.700
给它添加进去

15:35.700 --> 15:39.590
那我们来看一下

15:39.590 --> 15:45.340
vnode i有没有问题

15:45.340 --> 15:47.340
这个应该不是什么问题

15:47.340 --> 15:49.340
当年当时就直接存下来

15:49.340 --> 15:53.350
当时直接存下来

15:53.350 --> 15:55.350
然后

15:55.350 --> 15:57.350
重新建立这个节点

15:57.350 --> 16:00.350
vnode i的element

16:00.350 --> 16:03.350
vnode i的pirent

16:03.350 --> 16:07.660
重新建立节点的之后

16:07.660 --> 16:10.660
这块应该给我返回的是一个vnode是吧

16:10.660 --> 16:12.660
vnode

16:12.660 --> 16:14.660
然后这个vnode

16:14.660 --> 16:16.660
应该是一个虚拟节点

16:16.660 --> 16:18.660
应该是个虚拟道目

16:18.660 --> 16:20.660
这应该是一个新的虚拟道

16:20.660 --> 16:22.660
是一个新的虚拟道

16:22.660 --> 16:26.230
然后

16:26.230 --> 16:28.230
clear mic

16:28.230 --> 16:46.390
我看一下这个新的虚拟道

16:46.390 --> 16:48.390
这个是新的虚拟道

16:48.390 --> 16:52.340
这个和上面这个

16:52.340 --> 16:54.340
内容是一样的

16:54.340 --> 16:56.340
但是它俩这个对象

16:56.340 --> 16:58.340
已经是两个完全的对象

16:58.340 --> 17:00.340
应该是两个完全不同的对象

17:00.340 --> 17:02.340
然后我们

17:04.340 --> 17:06.340
clear的这一块

17:06.340 --> 17:12.790
clear的这一块

17:12.790 --> 17:14.790
clear的这一块

17:14.790 --> 17:16.790
clear的这一块之后

17:16.790 --> 17:18.790
prepare

17:18.790 --> 17:20.790
prepare

17:20.790 --> 17:22.790
然后

17:22.790 --> 17:24.790
构加了

17:26.790 --> 17:28.790
看似这块逻辑没有什么

17:28.790 --> 17:30.790
我把什么给删了

17:30.790 --> 17:32.790
看似这块的逻辑没有什么问题

17:32.790 --> 17:34.790
proxy在这呢

17:34.790 --> 17:36.790
rebuild

17:36.790 --> 17:38.790
rebuild

17:38.790 --> 17:42.740
rebuild

17:42.740 --> 17:44.740
rebuild

17:44.740 --> 17:46.740
rebuild

17:46.740 --> 17:48.740
rebuild

17:48.740 --> 17:50.740
rebuild

17:50.740 --> 17:52.740
rebuild

17:52.740 --> 17:54.740
rebuild

17:54.740 --> 17:56.740
rebuild

17:56.740 --> 17:58.740
rebuild

17:58.740 --> 18:00.740
rebuild

18:00.740 --> 18:06.040
rebuild

18:06.040 --> 18:08.040
rebuild

18:08.040 --> 18:10.040
rebuild

18:10.040 --> 18:12.040
rebuild

18:12.040 --> 18:15.610
rebuild

18:15.610 --> 18:17.610
rebuild

18:17.610 --> 18:19.610
rebuild

18:19.610 --> 18:21.610
rebuild

18:21.610 --> 18:23.610
rebuild

18:23.610 --> 18:25.610
rebuild

18:25.610 --> 18:27.610
rebuild

18:27.610 --> 18:29.610
rebuild

18:29.610 --> 18:38.490
rebuild

18:38.490 --> 18:40.490
rebuild

18:40.490 --> 18:42.490
rebuild

18:42.490 --> 18:44.490
rebuild

18:44.490 --> 18:46.490
rebuild

18:46.490 --> 18:48.490
rebuild

18:48.490 --> 18:50.890
康斯扎克的vnode这一块相当于没错

18:50.890 --> 18:53.290
那我们确实传进来的一个independence

18:53.290 --> 18:57.210
我们确实传进来的一个independence

18:57.210 --> 19:01.790
这个parent我这块没错吧

19:01.790 --> 19:03.890
parent还是它那个ur是吧

19:03.890 --> 19:08.530
负极的接电

19:08.530 --> 19:09.930
看一下啊

19:09.930 --> 19:14.020
parent是这儿的

19:14.020 --> 19:14.620
哪里呢?

19:14.620 --> 19:16.120
这是是吧

19:16.120 --> 19:18.720
Virtual mode i的parent

19:18.720 --> 19:19.820
这是它的负极接电

19:19.820 --> 19:23.940
我们来把这边打进去

19:23.940 --> 19:29.740
Virtual node i的parent

19:30.240 --> 19:38.090
我来看一下这个parent对不对

19:38.090 --> 19:47.700
这是它的i是吧

19:47.700 --> 19:55.640
是不是它这个负极接电有问题

19:55.640 --> 20:03.240
对吧

20:03.240 --> 20:04.440
是这个底下是吧

20:04.440 --> 20:07.240
等号后面是这个

20:07.240 --> 20:11.240
肯定是哪块手残的时候那什么了

20:11.240 --> 20:14.340
手机残就忘记了一个

20:14.340 --> 20:18.930
经常这样的

20:18.930 --> 20:26.620
应该重新加来一个

20:26.620 --> 20:28.720
啊这个是吧

20:28.720 --> 20:32.220
这个是这个vnode

20:32.220 --> 20:34.020
这个ur

20:34.020 --> 20:36.320
这个ur现在是没有问题的

20:36.320 --> 20:38.420
这个ur是没有问题的

20:38.420 --> 20:41.820
这个就是它的负极接电

20:41.820 --> 20:44.720
这就是它的负极接电

20:44.720 --> 20:47.020
负极接电也没有问题

20:47.020 --> 20:52.940
那construct node了之后为什么会有问题

20:52.940 --> 20:58.740
construct node了之后

20:58.740 --> 21:04.080
我们要做的是

21:04.080 --> 21:08.080
往这个virtual node i的parent上

21:08.080 --> 21:09.380
the children

21:09.480 --> 21:11.680
这是一个新的虚拟节点

21:11.680 --> 21:13.480
这是一个新的虚拟节点

21:13.480 --> 21:18.680
那我们让这个负极的求准是这个新的虚拟节点

21:18.680 --> 21:22.080
这个result是新的虚拟节点

21:22.080 --> 21:27.680
我让它的负极的求准

21:27.680 --> 21:38.840
这玩意不会评错了吧

21:38.840 --> 21:45.730
负极的求准是result

21:45.730 --> 21:48.330
让它的负极的求准是result

21:48.330 --> 21:52.330
这样的话我们再去

21:52.330 --> 21:53.230
变异的时候

21:53.230 --> 21:55.230
再去渲染的时候

21:55.230 --> 21:59.630
应该就不会有错了吧

21:59.630 --> 22:03.730
关键是我们这个最后拿到的这个result下面

22:03.730 --> 22:10.280
带不带新的讯定

22:10.280 --> 22:13.280
我们好像拿到这个新的result下面

22:13.280 --> 22:16.680
result 点

22:16.680 --> 22:18.180
求准点lans

22:18.180 --> 22:25.400
我输入一下它的孩子的这个数字

22:25.400 --> 22:32.560
我输入一下它这个孩子的数字

22:32.560 --> 22:34.160
一个是吧

22:34.160 --> 22:37.060
就是说我这个house抓到node的时候

22:37.060 --> 22:41.460
就没有创建出来新的节点

22:41.460 --> 22:44.810
是吧

22:44.810 --> 22:53.420
我在这个时候就没有创建出来新的节点

22:53.420 --> 22:54.220
我看一下

22:54.220 --> 22:57.820
我打印一下这个iLimit

22:57.820 --> 22:58.820
是不是我哪块

22:58.820 --> 23:02.720
肯定是之前用哪个值没有复制复到位

23:02.720 --> 23:05.520
workout node i

23:05.520 --> 23:06.120
点

23:06.120 --> 23:15.230
v2

23:15.230 --> 23:16.730
v4

23:16.730 --> 23:22.340
这些都有是吧

23:22.340 --> 23:23.940
那我们在这里面来看一下

23:23.940 --> 23:26.140
他到底是哪里走

23:26.140 --> 23:28.140
他会进到这里来

23:28.140 --> 23:28.640
然后呢

23:28.640 --> 23:33.150
他会被传到这里去

23:33.150 --> 23:37.050
vm dlm tyrant

23:37.050 --> 23:53.840
我打印一下这三修改

23:53.840 --> 23:54.640
这是啥来着

23:54.640 --> 23:58.440
vm vdue的对象

23:58.440 --> 24:00.240
iLimit

24:00.240 --> 24:03.970
这个和这个

24:03.970 --> 24:06.570
我们主要的是看的是这个

24:06.570 --> 24:12.460
然后

24:12.460 --> 24:15.040
然后呢

24:15.040 --> 24:16.940
然后标签v1

24:16.940 --> 24:19.940
然后我们看看他能不能再重新的走到

24:19.940 --> 24:21.440
这个v4里来

24:21.440 --> 24:26.800
能不能重新的走到这个v4里来

24:26.800 --> 24:32.940
看一下这个v4最后接受没接受了

24:32.940 --> 24:35.840
看solar点log

24:35.840 --> 24:39.540
elm parent

24:39.540 --> 24:41.540
instructions

24:41.540 --> 24:47.730
这么三个东西

24:47.730 --> 24:49.430
走进来了是吧

24:49.430 --> 24:51.030
vm是这个没有问题

24:52.030 --> 24:55.330
这个ul还是这个ul没有问题

24:55.330 --> 24:57.330
然后

24:57.330 --> 25:00.030
这个instructions

25:00.030 --> 25:01.830
也没有问题

25:01.830 --> 25:04.530
然后有了这些东西了之后

25:04.530 --> 25:10.330
我们的负极节点能不能remove到这个elm

25:10.330 --> 25:12.730
那现在这个负极节点里面都有啥

25:12.730 --> 25:18.080
负极节点里面

25:18.080 --> 25:23.280
remove掉这个elm

25:23.280 --> 25:24.880
remove掉这个

25:25.080 --> 25:27.380
刚才的这个节点

25:27.380 --> 25:30.480
我们来看一下这个怎么弄

25:30.480 --> 25:32.480
怎么弄

25:32.480 --> 25:37.680
我们要让负极的节点remove掉这个elm

25:37.680 --> 25:39.480
怎么办啊

25:39.480 --> 25:42.980
就是看我们remove了之后有没有行不行

25:42.980 --> 25:47.580
这个之前先打进去

25:47.580 --> 25:48.780
这三个没有问题

25:48.780 --> 25:50.080
那在这会打一

25:50.080 --> 25:51.780
这就是一步一步来来查查

25:51.780 --> 25:53.080
所以遇到这种问题呢

25:53.080 --> 25:54.080
我们不要着急

25:54.080 --> 25:55.180
不要

25:55.180 --> 25:57.580
不要觉得不好查什么的

25:57.580 --> 26:00.380
就是按照代码的顺序一步一步来

26:00.380 --> 26:02.880
那他既然要remove掉这个elm

26:02.880 --> 26:04.680
那我们首先要看

26:04.680 --> 26:06.980
这个里面现在都有点

26:06.980 --> 26:08.980
打印

26:08.980 --> 26:13.180
parent.elm

26:13.180 --> 26:18.860
.chill.nose.lense

26:18.860 --> 26:26.620
点nodechill.nose

26:26.620 --> 26:29.220
chill.nose.lense

26:29.220 --> 26:31.720
然后删出了之后

26:31.720 --> 26:33.620
点load

26:33.620 --> 26:39.920
parent.elm.chill.nose.lense

26:39.920 --> 26:46.130
好 看看这

26:46.130 --> 26:48.930
之前下面一个没有

26:48.930 --> 26:55.170
现在是零二了是吗

26:55.170 --> 26:58.790
那是零二

26:58.790 --> 27:12.020
然后他添加了一个空的文本

27:12.020 --> 27:16.600
一人一

27:16.600 --> 27:21.330
变成现在这个

27:21.330 --> 27:23.430
看着没有什么大的问题

27:23.530 --> 27:25.930
然后呢就是这里

27:25.930 --> 27:27.930
然后我们要调进这里来

27:27.930 --> 27:34.610
调进这个annelesisinstructions

27:34.610 --> 27:38.610
调进这里了之后

27:38.610 --> 27:40.610
在这里面我们就要创建节点了是吧

27:40.610 --> 27:42.610
创建节点了

27:42.610 --> 27:44.610
还是这里面打印了一个log

27:44.610 --> 27:46.610
我们来看一下有没有

27:46.610 --> 27:52.580
keyin list没有问题是吧

27:52.580 --> 27:54.580
keyin list都没有问题

27:54.580 --> 27:56.580
然后

27:57.080 --> 27:59.080
我们在这块创建节点是吧

27:59.080 --> 28:01.080
我直接打印一下最后

28:03.080 --> 28:05.080
result inside的lense

28:05.080 --> 28:07.080
所以打那个result inside

28:07.080 --> 28:10.610
是吧

28:10.610 --> 28:12.610
在这块还是有三个节点是吧

28:12.610 --> 28:19.190
一个节点两个节点三个节点是吧

28:19.190 --> 28:21.190
还是有三个节点

28:21.190 --> 28:23.190
然后呢有三个节点

28:23.190 --> 28:25.190
然后呢我们就扔出去了是吧

28:25.190 --> 28:27.190
扔出去了

28:27.190 --> 28:29.190
有三个节点啊

28:29.190 --> 28:32.880
我们就不管了

28:33.380 --> 28:35.380
然后在这

28:35.380 --> 28:40.490
result inside

28:40.490 --> 28:42.490
result它回去

28:42.490 --> 28:43.490
这个不用管

28:43.490 --> 28:45.490
下面生成的节点

28:45.490 --> 28:47.490
然后re-channel

28:47.490 --> 28:49.490
virtual note

28:49.490 --> 28:53.890
virtual note回到这

28:53.890 --> 28:57.330
然后呢我们这里面这个virtual note

28:57.330 --> 28:59.330
是有值的了

28:59.330 --> 29:01.330
这个virtual note是有值的了

29:01.330 --> 29:03.330
我们看一下它是不是有值

29:03.330 --> 29:05.330
搜了点log

29:05.330 --> 29:09.220
virtual note

29:09.220 --> 29:11.720
这就是一步一步的去打印这个结果

29:27.990 --> 29:31.810
怎么打印的两遍呢

29:31.810 --> 29:33.310
它下面还有个字类

29:33.310 --> 29:35.310
字节点是吧

29:35.310 --> 29:37.310
这个时候呢它是有值的了

29:37.310 --> 29:39.310
但是它这个时候

29:39.310 --> 29:41.310
下面的这个node呢

29:41.310 --> 29:47.630
是

29:47.630 --> 29:49.630
我知道

29:49.630 --> 29:51.630
这块

29:51.630 --> 29:53.630
确实还少了点东西

29:54.130 --> 29:56.130
当上面这块有值的时候

29:56.130 --> 29:58.130
当上面这块有值的时候

29:58.130 --> 30:00.130
我下面是不是

30:00.130 --> 30:02.130
这一块就得变点

30:02.130 --> 30:04.130
我们刚才取的什么

30:04.130 --> 30:08.020
item of the curve

30:08.020 --> 30:10.020
我们要看什么

30:10.020 --> 30:12.020
v-node

30:12.020 --> 30:14.020
node type

30:14.020 --> 30:19.250
是否为零

30:19.250 --> 30:21.250
看它是不是虚拟节点

30:21.250 --> 30:23.250
如果它是虚拟节点

30:23.250 --> 30:26.250
如果它不是虚拟节点的话

30:26.250 --> 30:28.250
我们之前那个方案没有问题

30:28.750 --> 30:30.750
如果是虚拟节点的话

30:30.750 --> 30:32.750
v-node type

30:32.750 --> 30:34.750
i-node

30:34.750 --> 30:36.750
i-node

30:36.750 --> 30:38.750
i-node

30:38.750 --> 30:40.750
q-node

30:40.750 --> 30:42.750
我们要用这个q-node

30:42.750 --> 30:44.750
看它是不是虚拟节点

30:44.750 --> 30:46.750
是虚拟节点的话得用这个方式

30:46.750 --> 30:48.750
拿到它负极的i-node的q-node

30:48.750 --> 30:50.750
得拿真实的物理上的

30:50.750 --> 30:52.750
不能拿这个

30:52.750 --> 30:54.750
虚假的

30:54.750 --> 30:56.750
不能拿这个当前的i-node

30:57.250 --> 31:01.970
这块是有点不一样的

31:03.970 --> 31:04.970
这样的话

31:04.970 --> 31:06.970
node这一块我们也能

31:06.970 --> 31:08.970
这块的话我能拿得到了吧

31:08.970 --> 31:09.970
我看一下

31:09.970 --> 31:11.970
lens

31:11.970 --> 31:13.970
它也不能用这个的lens了

31:13.970 --> 31:15.970
它也不能用这个的lens

31:15.970 --> 31:17.970
我们得设定

31:17.970 --> 31:19.970
light一个lens

31:19.970 --> 31:21.970
还得看它

31:21.970 --> 31:23.970
是否为零

31:23.970 --> 31:25.970
还得看它是否为虚拟节点

31:25.970 --> 31:27.970
如果是虚拟节点

31:28.470 --> 31:30.470
vnode.parent.erm

31:32.470 --> 31:34.470
q-node的lens

31:34.470 --> 31:38.870
否则的话就是这个点

31:38.870 --> 31:49.610
否则的话就是这个点

31:49.610 --> 31:51.610
然后我们

31:51.610 --> 31:53.610
这样

31:53.610 --> 31:57.500
就可以发挥了

31:57.500 --> 31:59.500
我们来试一下

31:59.500 --> 32:03.510
我们怎么来

32:03.510 --> 32:05.510
连最基本的这个都没有

32:11.620 --> 32:13.620
我来看一下

32:13.620 --> 32:15.620
q-node

32:16.120 --> 32:18.120
我来看一下

32:18.120 --> 32:21.620
q-node

32:21.620 --> 32:23.620
当它是虚拟节点的时候

32:23.620 --> 32:25.620
当它是虚拟节点的时候

32:25.620 --> 32:28.930
我们使用它

32:28.930 --> 32:30.930
负极的节点下的

32:30.930 --> 32:32.930
q-node

32:32.930 --> 32:34.930
我们在这先打印一下

32:34.930 --> 32:36.930
我们来打印一下

32:36.930 --> 32:44.340
试一下

32:44.340 --> 32:46.340
看看在这打印行不行

32:46.340 --> 32:48.340
不行

32:48.340 --> 32:50.340
它得是为零

32:50.340 --> 33:02.200
它得是为零

33:02.700 --> 33:04.700
它得是为零的行不行

33:04.700 --> 33:18.700
下一个判断条件

33:18.700 --> 33:20.700
我们给它加一个判断条件

33:20.700 --> 33:22.700
判断它这个node为零的时候

33:23.700 --> 33:27.580
判断它这个为零的时候

33:28.580 --> 33:30.580
我们看一下

33:30.580 --> 33:32.580
能不能打印得出来

33:32.580 --> 33:37.500
我来刷新一下

33:37.500 --> 33:41.640
看一下

33:41.640 --> 33:43.640
这种情况下

33:43.640 --> 33:45.640
我们能打印出来什么

33:45.640 --> 33:49.020
看一下这三个node没有问题

33:49.020 --> 33:51.020
然后我们

33:51.520 --> 33:53.520
那就把这块删掉吧

33:53.520 --> 33:55.520
这块没有问题

33:55.520 --> 33:57.520
然后我们找这个问题

33:57.520 --> 33:59.520
在这里

33:59.520 --> 34:01.520
Render里面

34:01.520 --> 34:03.520
Vnode这里

34:03.520 --> 34:05.520
我们加一个东西

34:05.520 --> 34:07.520
之前打了一行Number 1

34:07.520 --> 34:09.520
我们没有用

34:09.520 --> 34:11.520
然后我们把这个

34:11.520 --> 34:13.520
反正就是全局

34:13.520 --> 34:15.520
这是一个全局的变量

34:15.520 --> 34:17.520
一个公共的变量

34:18.020 --> 34:20.020
Number

34:20.020 --> 34:22.020
等于

34:22.020 --> 34:24.020
Number加价

34:26.020 --> 34:28.020
这样的话我们给每一个节点一个标识

34:28.020 --> 34:30.020
咱们给每一个节点一个标识

34:30.020 --> 34:32.020
然后我们来看一下

34:32.020 --> 34:34.020
每一个节点到底最后都变没变

34:34.020 --> 34:36.020
咱们其实最主要的就是看一下

34:36.020 --> 34:38.020
虚拟节点

34:38.020 --> 34:40.020
Test.node

34:40.020 --> 34:42.020
Vnode

34:44.020 --> 34:46.020
最开始的时候虚拟节点

34:46.520 --> 34:48.520
URI

34:48.520 --> 34:50.520
这个URI是虚拟节点是吧

34:50.520 --> 34:52.520
URI下的这个URI是虚拟节点是吧

34:52.520 --> 34:54.520
这个node太为零

34:54.520 --> 34:56.520
它的Number能为15

34:56.520 --> 34:58.520
它的Number能为15

34:58.520 --> 35:00.520
然后

35:00.520 --> 35:02.520
我们给它添加一个

35:02.520 --> 35:04.520
List.push

35:04.520 --> 35:10.450
Dog

35:10.450 --> 35:12.450
B 21

35:12.450 --> 35:15.450
然后这回我们改了东西了之后

35:15.450 --> 35:17.450
我们改了东西了之后

35:17.450 --> 35:19.450
我们再来看一下这个

35:19.950 --> 35:21.950
Vnode

35:21.950 --> 35:23.950
我们再来看一下这个Number

35:23.950 --> 35:25.950
像这个最外层的这个

35:25.950 --> 35:27.950
它是肯定不会变的是吧

35:27.950 --> 35:29.950
最外层的这个Number为1是吧

35:29.950 --> 35:31.950
我们发现最外层的这个节点根本就没有变化是吧

35:31.950 --> 35:33.950
然后这个内层UR

35:33.950 --> 35:36.950
这里面只有一个RI了是吧

35:36.950 --> 35:38.950
Note type为0

35:38.950 --> 35:40.950
它的Number已经从15变成25

35:40.950 --> 35:42.950
是吧

35:42.950 --> 35:44.950
这里面这个节点值就已经变了

35:44.950 --> 35:46.950
这么看的话

35:46.950 --> 35:48.950
我们这个Vnode这块是完全没有问题的

35:48.950 --> 35:50.950
Vnode这块应该是完全没有问题的

35:50.950 --> 35:52.950
Vnode如果没有问题的话

35:52.950 --> 35:54.950
我们就看一下Render

35:54.950 --> 35:57.950
Render在是哪儿调的呢

35:57.950 --> 35:59.450
是proxy这块调的

35:59.450 --> 36:01.450
我们调RenderData了之后

36:01.450 --> 36:03.450
调RenderData了之后

36:03.450 --> 36:05.450
到Render里

36:05.450 --> 36:07.450
这是吧

36:07.450 --> 36:09.450
然后它拿出来一个值

36:09.450 --> 36:12.450
然后Note type为3

36:12.450 --> 36:14.450
Note type为3的时候

36:14.450 --> 36:16.450
我们就打印是吧

36:16.950 --> 36:18.950
但是刚才这种你看

36:18.950 --> 36:21.950
它下面这三个节点它居然都有

36:21.950 --> 36:23.950
这下面这三个节点它居然都有

36:23.950 --> 36:25.950
有节点但是没渲染进去

36:25.950 --> 36:27.950
那咱们看一下这个节点的环境面量

36:27.950 --> 36:29.950
看一下这个Environment

36:30.950 --> 36:32.950
是k点A是吧

36:32.950 --> 36:34.950
环境面量也没有错

36:34.950 --> 36:36.950
那其实它就有可能是没走下去

36:36.950 --> 36:38.950
没走下去

36:38.950 --> 36:40.950
RenderNode的时候如果没走下去

36:40.950 --> 36:42.950
会是因为什么呢

36:43.950 --> 36:47.520
RenderNode

36:48.020 --> 36:51.520
Render这块可能

36:51.520 --> 36:53.520
这块应该是没有什么问题

36:53.520 --> 36:55.520
那就只有一种可能

36:55.520 --> 36:57.520
就是RenderNode的时候我们找不到这个模板

36:57.520 --> 36:59.520
我们来试一下

36:59.520 --> 37:03.540
我们看一下是不是找不到这个模板

37:03.540 --> 37:07.490
清空

37:07.490 --> 37:11.000
走

37:11.000 --> 37:13.000
果然是吧

37:13.000 --> 37:15.000
找不到这个模板

37:15.000 --> 37:17.000
找不到这个模板就证明在pre-pire的时候有问题

37:17.000 --> 37:19.000
建立所引的时候又没有建立进去

37:19.000 --> 37:21.000
我们看看pre-pire Render

37:21.000 --> 37:23.000
pre-pire Render

37:23.000 --> 37:25.000
文本节点的时候搜

37:25.000 --> 37:27.000
然后是虚拟节点的时候

37:27.000 --> 37:29.000
就给它也能建立

37:29.000 --> 37:31.000
然后retreat

37:31.000 --> 37:33.000
这也没啥问题

37:33.000 --> 37:35.000
这

37:35.000 --> 37:37.000
是吧

37:37.000 --> 37:39.000
这一块它只有是

37:39.000 --> 37:41.000
真的标签的时候才会往下走

37:41.000 --> 37:42.000
是吧

37:42.000 --> 37:43.000
它只有标签为

37:43.000 --> 37:45.000
这个type唯一的时候才会往下走

37:45.000 --> 37:47.000
但是我们虚拟节点它的type唯领

37:47.000 --> 37:49.000
它不往下走了

37:49.000 --> 37:51.000
这是之前我们写的

37:51.000 --> 37:53.000
一个地方居然写出坑了

37:53.000 --> 37:55.000
我们把这块给删掉

37:58.880 --> 38:00.880
我们它之所以没有往下走

38:00.880 --> 38:02.880
是因为它刚才

38:02.880 --> 38:04.880
标签node type唯一的时候才会往下走

38:04.880 --> 38:06.880
node type唯其他的值的时候

38:06.880 --> 38:07.880
它不往下走了

38:07.880 --> 38:08.880
这可不行

38:08.880 --> 38:10.880
这样的话应该就没有问题了

38:12.880 --> 38:13.880
对吧

38:13.880 --> 38:15.880
这是不是就删进去了

38:15.880 --> 38:17.880
这是不是就添进去了

38:17.880 --> 38:19.880
这就是lease

38:19.880 --> 38:21.880
这一块是之前多加了个eave

38:21.880 --> 38:23.880
多加了个eave

38:23.880 --> 38:25.880
这种都是基于之前代码写

38:25.880 --> 38:27.880
所以它这块写起来

38:27.880 --> 38:29.880
可能有一些地方就

38:29.880 --> 38:31.880
忽略了之前那些东西了

38:31.880 --> 38:33.880
但是不用着急

38:33.880 --> 38:35.880
咱们这种排错大家记住

38:35.880 --> 38:37.880
不要直接看了这个结果了之后

38:37.880 --> 38:39.880
就开始猜

38:39.880 --> 38:40.880
猜是猜不出来的

38:40.880 --> 38:41.880
就像刚才这样

38:41.880 --> 38:43.880
一步一步的去打印

38:43.880 --> 38:44.880
一步一步的去打印

38:44.880 --> 38:45.880
每一步的时候去打印

38:45.880 --> 38:47.880
然后根据这个结果来分析一下

38:47.880 --> 38:48.880
它这块也没有问题

38:48.880 --> 38:49.880
根据这个结果来分析

38:49.880 --> 38:50.880
这块也没有问题

38:50.880 --> 38:51.880
然后一步一步的找

38:51.880 --> 38:52.880
对吧

38:52.880 --> 38:53.880
最后找到了这

38:53.880 --> 38:55.880
我们是这样一步一步的找

38:55.880 --> 38:57.880
是一个正常的

38:57.880 --> 38:59.880
你在工作中一个最常用的

38:59.880 --> 39:01.880
一种排错的方式

39:01.880 --> 39:03.880
所以大家一定

39:03.880 --> 39:05.880
遇到问题了之后不要慌张

39:05.880 --> 39:07.880
不要就只盯着这种结果

39:07.880 --> 39:08.880
然后就点这块儿想

39:08.880 --> 39:09.880
你想想

39:09.880 --> 39:10.880
有的同学一问

39:10.880 --> 39:11.880
老师

39:11.880 --> 39:12.880
我这块儿为什么不对呢

39:12.880 --> 39:13.880
你打印这个结果

39:13.880 --> 39:15.880
中间隔着100来步

39:15.880 --> 39:16.880
哪一步出错了

39:16.880 --> 39:17.880
不知道

39:17.880 --> 39:18.880
是吧

39:18.880 --> 39:19.880
所以大家不要着急

39:19.880 --> 39:20.880
每一步自己

39:20.880 --> 39:21.880
一步一步的去打印

39:21.880 --> 39:22.880
然后去分析

39:22.880 --> 39:23.880
这个结果对不对

39:23.880 --> 39:24.880
时间长的就好了

39:24.880 --> 39:26.880
时间长的就好了

39:26.880 --> 39:27.880
好了

39:27.880 --> 39:29.880
那这个就是咱们

39:29.880 --> 39:31.880
vifle添加

39:31.880 --> 39:32.880
上一节课

39:32.880 --> 39:34.880
我们说了vifle的

39:34.880 --> 39:35.880
初始化的一个展现

39:35.880 --> 39:36.880
但是我们说了

39:36.880 --> 39:37.880
修改书组了之后

39:37.880 --> 39:38.880
它还不变

39:38.880 --> 39:39.880
这节课

39:39.880 --> 39:40.880
我们就说了

39:40.880 --> 39:41.880
添加

39:41.880 --> 39:42.880
然后它还有很多的

39:42.880 --> 39:44.880
这个名令

39:44.880 --> 39:45.880
比如说什么

39:45.880 --> 39:46.880
vband

39:46.880 --> 39:47.880
vion

39:47.880 --> 39:48.880
然后咱们之后

39:48.880 --> 39:49.880
一个来一起

39:49.880 --> 39:50.880
那我们这一节

39:50.880 --> 39:51.880
就先到这里

