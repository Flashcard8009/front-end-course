WEBVTT

00:01.580 --> 00:03.580
哈喽大家好

00:03.580 --> 00:06.580
上一集我们说的这个

00:07.580 --> 00:08.580
这个

00:08.580 --> 00:11.580
上一集我们说的这个东西

00:11.580 --> 00:13.580
执行了之后

00:13.580 --> 00:15.580
这个印面是吧

00:15.580 --> 00:18.580
执行了之后它有一些东西不显示

00:18.580 --> 00:19.580
我看看是不是这个

00:19.580 --> 00:22.960
过了

00:22.960 --> 00:23.960
重来

00:23.960 --> 00:31.560
我看看这是报啥错的

00:31.560 --> 00:41.980
它是哪个引不进来了

00:41.980 --> 00:43.980
我把哪个文件给改了吗

00:43.980 --> 00:49.910
把这个删了

00:49.910 --> 00:51.910
再刷新一下

00:51.910 --> 00:53.910
它这个请求发出去了

00:53.910 --> 00:55.910
请求都发出去了

00:55.910 --> 00:58.910
然后也能拿回来这个值了

00:58.910 --> 01:00.910
但是我们渲染不上来

01:00.910 --> 01:02.910
为什么呀

01:03.910 --> 01:06.910
我们这个集合是不是变了

01:06.910 --> 01:08.910
看这个渲染这块

01:08.910 --> 01:10.910
我们这个属于

01:10.910 --> 01:12.910
可以改变了什么呢

01:12.910 --> 01:13.910
改变了数组是吧

01:13.910 --> 01:15.910
是不是刚才这个改变了数组

01:15.910 --> 01:17.910
我发出去的

01:17.910 --> 01:19.910
如果不了解这个项目的话

01:19.910 --> 01:21.910
可以之前看一下这个项目

01:21.910 --> 01:23.910
我是直接改的是谁呢

01:23.910 --> 01:25.910
改的是这个数组

01:25.910 --> 01:27.910
改的是这个list

01:27.910 --> 01:29.910
如果变的是list

01:29.910 --> 01:31.910
它就会把它当作什么呢

01:31.910 --> 01:33.910
当作数组

01:33.910 --> 01:35.910
然后数组我们还没有重写

01:35.910 --> 01:37.910
整体修改的这个方法

01:37.910 --> 01:39.910
还没有重写什么整体修改的方法

01:39.910 --> 01:41.910
所以这块还是有点bug的

01:41.910 --> 01:43.910
我如果这个数组

01:43.910 --> 01:45.910
我要是给它铺是泡泡

01:45.910 --> 01:47.910
但是它如果是个数组

01:47.910 --> 01:49.910
我给它整体替换了

01:49.910 --> 01:51.910
它就先听不到

01:51.910 --> 01:53.910
所以在这一块还是有点问题的

01:53.910 --> 01:55.910
在这个set property的时候

01:55.910 --> 01:57.910
那我们要看一下

01:57.910 --> 01:59.910
先判断一下它是不是个数组

01:59.910 --> 02:01.910
就是个数组

02:01.910 --> 02:03.910
给它做整体替换的时候

02:03.910 --> 02:05.910
不用泡泡铺是做这些小改动的时候

02:05.910 --> 02:07.910
我也得能进行得到

02:07.910 --> 02:09.910
get the value

02:09.910 --> 02:11.910
我先把这个东西拿出来

02:11.910 --> 02:13.910
name space

02:13.910 --> 02:15.910
name space

02:15.910 --> 02:17.910
pro

02:17.910 --> 02:19.910
我先拿到这个value

02:19.910 --> 02:21.910
我得看这个value

02:21.910 --> 02:23.910
它是不是数组

02:25.910 --> 02:27.910
value

02:27.910 --> 02:29.910
instance of array

02:29.910 --> 02:31.910
有同学在说

02:31.910 --> 02:33.910
value instance of array

02:33.910 --> 02:35.910
instance of override

02:35.910 --> 02:37.910
我跟你说不能用instance of override

02:37.910 --> 02:39.910
是吧

02:39.910 --> 02:41.910
所以成立的话

02:41.910 --> 02:43.910
instance of override它也得成立

02:43.910 --> 02:45.910
所以说这块就用个array来判断就行了

02:45.910 --> 02:51.270
然后这块take else

02:51.270 --> 02:53.270
然后这块

02:53.270 --> 02:55.270
我跟你说

02:55.270 --> 02:58.580
你在这个数组里面写啥

02:58.580 --> 03:00.580
你这块就写出

03:00.580 --> 03:02.580
按照数组重做进行处理

03:02.580 --> 03:04.580
get the name space

03:04.580 --> 03:09.370
name

03:09.370 --> 03:14.020
name space

03:14.020 --> 03:16.020
pro

03:16.020 --> 03:18.020
然后rander date

03:18.020 --> 03:20.020
重建节点

03:20.020 --> 03:29.030
然后重新渲染

03:29.030 --> 03:31.030
重建节点

03:31.030 --> 03:33.030
然后重新渲染

03:33.030 --> 03:35.030
这样的方式

03:35.030 --> 03:37.030
它就能坚定到这个数据了

03:37.030 --> 03:39.030
刚才我们这种方式是坚定不到的

03:39.030 --> 03:41.030
刚才那种情况是坚定不到的

03:41.030 --> 03:45.880
它又怎么了

03:45.880 --> 03:47.880
有点节点了

03:47.880 --> 03:49.880
是吧

03:49.880 --> 03:51.880
这样的话它就把我的数据给拉过来了

03:51.880 --> 03:53.880
是吧

03:53.880 --> 03:55.880
有时候我叫monkey

03:55.880 --> 03:57.880
发动

03:57.880 --> 03:59.880
monkey hello

03:59.880 --> 04:01.880
它跟我一样就是红的

04:01.880 --> 04:03.880
比如说我把我的名字改成panda

04:03.880 --> 04:05.880
是吧

04:05.880 --> 04:07.880
所以我panda就变红了

04:07.880 --> 04:09.880
我们这样的话

04:09.880 --> 04:11.880
我们这个小框架基本上就算是完成了

04:11.880 --> 04:13.880
肯定是没有人家的权

04:13.880 --> 04:15.880
没有人家的大对吧

04:15.880 --> 04:17.880
这是肯定的毕竟我这个人力有限

04:17.880 --> 04:19.880
我这一点点写是吧

04:19.880 --> 04:21.880
但是我们可以完成这些基本的

04:21.880 --> 04:23.880
这些功能

04:23.880 --> 04:25.880
完成

04:25.880 --> 04:27.880
那这个就是我们的avm的

04:27.880 --> 04:29.880
框架的原理

04:29.880 --> 04:31.880
其实不只是这个wereact

04:31.880 --> 04:33.880
还有很多很多的mvm

04:33.880 --> 04:35.880
只是他们还没有出名

04:35.880 --> 04:37.880
但是它基本上的原理

04:37.880 --> 04:39.880
都是跟这个类似

04:39.880 --> 04:41.880
基本上的原理跟这个类似

04:41.880 --> 04:43.880
这个课就是带着大家来走一遍

04:43.880 --> 04:45.880
带着大家来走一遍

04:45.880 --> 04:47.880
这样的框架大概是按照什么样的顺序

04:47.880 --> 04:49.880
造出来的

04:49.880 --> 04:51.880
不要把这个目光仅限于在这个we上

04:51.880 --> 04:53.880
锁死的wereact

04:53.880 --> 04:55.880
如果你把这个目光给在这锁定了

04:55.880 --> 04:57.880
那你在写别的框架的时候

04:57.880 --> 04:59.880
或者是一些有的时候

04:59.880 --> 05:01.880
让你进到一个公司里的时候

05:01.880 --> 05:03.880
让你去写一些小的插件

05:03.880 --> 05:05.880
你就会实际的往上面靠

05:05.880 --> 05:07.880
然后你会发现靠不上

05:07.880 --> 05:09.880
所以不要给它写的太死

05:09.880 --> 05:11.880
不要把这个学这个原理的时候

05:11.880 --> 05:13.880
实际冲着wereact

05:13.880 --> 05:15.880
它也不是唯一的

05:15.880 --> 05:17.880
它也未必是最好的

05:17.880 --> 05:19.880
你只需要了解得了他们这些结构

05:19.880 --> 05:21.880
大概是按照什么样的形式给它弄出来的

05:21.880 --> 05:23.880
按照什么形式产生的

05:23.880 --> 05:25.880
就ok

05:25.880 --> 05:27.880
那好了那我们的这个课就先

05:27.880 --> 05:29.880
到这里

