WEBVTT

00:01.650 --> 00:03.650
哈喽 大家好啊

00:03.650 --> 00:07.650
上一集咱们简单的说了一下vmodel是吧

00:07.650 --> 00:11.650
有了vmodel之后我们就能实现双向数据保定了是吧

00:11.650 --> 00:15.650
我们这边data数据改 页面变化是吧

00:15.650 --> 00:19.650
然后框里的内容改 然后我们data也会跟着改

00:19.650 --> 00:21.650
双向的数据保定

00:21.650 --> 00:25.650
这样的话我们这一集来说一个新的

00:25.650 --> 00:29.650
来说一个新的 就是vfoil

00:29.650 --> 00:33.650
其实vmodel好像还差了一点是吧

00:33.650 --> 00:35.650
vmodel还差了一点

00:35.650 --> 00:37.650
vmodel还差了一个渲染这块

00:37.650 --> 00:39.650
现在我们是能够坚定到那里的属性

00:39.650 --> 00:43.650
然后跟我们坚定框里的内容

00:43.650 --> 00:45.650
然后给我们属性值给改了

00:45.650 --> 00:47.650
还有一块 还有一块就是渲染这一块

00:47.650 --> 00:49.650
还有一块就是渲染这一块

00:49.650 --> 00:53.650
渲染这一块就是我们在分析渲染的时候

00:53.650 --> 00:55.650
也就是说在prepare的时候

00:55.650 --> 01:03.650
我们过去只分析文本了是吧

01:03.650 --> 01:05.650
但是我们以后还得不但得分析文本

01:05.650 --> 01:09.650
我还得分析这种vnode这种情况

01:09.650 --> 01:11.650
我还得分析这种vnode的情况

01:11.650 --> 01:13.650
如果vnode改了的话

01:13.650 --> 01:15.650
我也得跟着改

01:15.650 --> 01:17.650
那我们这一节就先不说为分

01:17.650 --> 01:19.650
咱们这一节先不说为分

01:19.650 --> 01:21.650
把上一节少的这一块给说了

01:21.650 --> 01:24.650
在prepare这块我们在后面加以

01:24.650 --> 01:26.650
在这个之前吧

01:26.650 --> 01:28.650
在这块加一个

01:28.650 --> 01:32.650
我们在这边也写一个Analycesatr

01:32.650 --> 01:34.650
我们在这里面也创建一个这样的方法

01:34.650 --> 01:43.100
这样的方法

01:43.100 --> 01:47.100
我们在下面来创建一个方式

01:47.100 --> 01:55.130
vnvnode是吧

01:55.130 --> 01:59.130
我们一个传入这个prepare

01:59.130 --> 02:01.130
一个传入这个vnode

02:01.130 --> 02:03.130
一个传入这个vm

02:03.130 --> 02:05.130
一个整个对象

02:05.130 --> 02:07.130
一个传入的是当前的节点

02:07.130 --> 02:09.130
然后我们要分析的是啥

02:09.130 --> 02:13.140
我们要分析的是代属性的

02:13.140 --> 02:15.140
代属性的话

02:15.140 --> 02:19.140
要求nodetype必须唯一

02:19.140 --> 02:21.140
你不是标签

02:21.140 --> 02:23.140
你代什么属性的

02:23.140 --> 02:25.140
所以说不如果不等于

02:25.140 --> 02:27.140
我就认清

02:27.140 --> 02:29.140
然后我们来

02:29.140 --> 02:31.140
还是获取的这上面这些值

02:31.140 --> 02:35.140
lightattrnames等于

02:35.140 --> 02:39.140
vnode.erm

02:39.140 --> 02:41.140
这个是它的元素是吧

02:41.140 --> 02:45.140
getattr

02:45.140 --> 02:49.140
tribute name

02:49.140 --> 02:52.650
要这个方法来获取到

02:52.650 --> 02:54.650
它的所有的属性名

02:54.650 --> 02:56.650
然后来看它有没有

02:56.650 --> 02:58.650
vgamodo属性

02:58.650 --> 03:02.540
attrnames

03:02.540 --> 03:04.540
index of

03:04.540 --> 03:07.850
vgamodo

03:07.850 --> 03:09.850
大于负义

03:09.850 --> 03:11.850
我们看它有没有vmodo的属性

03:11.850 --> 03:13.850
如果有vmodo的属性呢

03:13.850 --> 03:15.850
怎么办

03:15.850 --> 03:17.850
如果有这个vmodo的属性呢

03:17.850 --> 03:19.850
那我这个节点

03:19.850 --> 03:21.850
也得被纳入我这期中是吧

03:21.850 --> 03:23.850
这个节点也得会被纳入我这个期中是吧

03:23.850 --> 03:25.850
set

03:25.850 --> 03:27.850
template to a vnode

03:27.850 --> 03:29.850
我们把这个里面的值

03:29.850 --> 03:31.850
放进去

03:31.850 --> 03:35.850
element.getattribute

03:35.850 --> 03:37.850
传入什么

03:37.850 --> 03:41.480
vgamodo

03:41.480 --> 03:43.480
把它对应的属性

03:43.480 --> 03:45.480
也就是我们这里的moda

03:45.480 --> 03:47.480
然后就它对应的节点

03:47.480 --> 03:49.480
再就是set vnode

03:49.480 --> 03:51.480
template

03:51.480 --> 03:53.480
这俩参数是一样的

03:53.480 --> 03:58.070
我就这样写进去

03:58.070 --> 04:00.070
这样就搞定了

04:00.070 --> 04:02.070
这样的话

04:02.070 --> 04:04.070
当我们vnode

04:04.070 --> 04:06.070
执行修改的时候

04:06.070 --> 04:08.070
obg.ex

04:08.070 --> 04:10.070
它就会对应到

04:10.070 --> 04:12.070
input的框了

04:12.070 --> 04:14.070
vnode就是input的框

04:14.070 --> 04:16.070
这个vnode它一定就是当前的

04:16.070 --> 04:18.070
input的框

04:18.070 --> 04:20.070
然后当我们在渲染的时候

04:20.070 --> 04:22.070
Render node

04:22.070 --> 04:24.070
之前是只考虑了

04:24.070 --> 04:26.070
v3的情况

04:26.070 --> 04:28.070
还有可能唯一

04:28.070 --> 04:30.070
v3是代表的是文本

04:30.070 --> 04:32.070
我们要渲染的是文本

04:32.070 --> 04:34.070
除了渲染文本之外

04:34.070 --> 04:37.580
我们还能渲染什么

04:37.580 --> 04:39.580
就是我们说的

04:39.580 --> 04:41.580
input的标签

04:45.400 --> 04:47.400
如果

04:47.400 --> 04:49.400
vnode的

04:49.400 --> 04:51.400
nodetype

04:51.400 --> 04:53.400
等于1

04:53.400 --> 04:55.400
并且

04:55.400 --> 04:57.400
vnode的tag

04:57.400 --> 04:59.400
它的标签得是input

04:59.400 --> 05:01.400
这样的话

05:01.400 --> 05:03.400
我们可以反过来渲染

05:03.400 --> 05:05.400
拿到这个楼版

05:05.400 --> 05:07.400
timeplace

05:07.400 --> 05:09.400
等于vnode

05:09.400 --> 05:11.400
二的timepage的概决

05:11.400 --> 05:13.400
用

05:13.400 --> 05:15.400
node来找到

05:15.400 --> 05:17.400
用修改的

05:17.400 --> 05:19.400
node来找到这个楼版

05:19.400 --> 05:22.710
然后if

05:22.710 --> 05:24.710
能找到对应的timeplace的值

05:26.710 --> 05:30.730
lens i等于0

05:30.730 --> 05:32.730
i小于

05:32.730 --> 05:34.730
timeplace

05:34.730 --> 05:36.730
lens

05:38.730 --> 05:40.730
lens

05:40.730 --> 05:42.730
timeplace value

05:42.730 --> 05:44.730
等于什么呢

05:44.730 --> 05:46.730
还是概子timeplace value

05:46.730 --> 05:48.730
哪个对象

05:48.730 --> 05:50.730
从哪后取这个值

05:50.730 --> 05:52.730
从哪后取这个值

05:52.730 --> 05:54.730
是不是就两个地方

05:54.730 --> 05:56.730
要么是vm的data

05:56.730 --> 05:58.730
全局的

05:58.730 --> 06:00.730
要么是当前环境下

06:00.730 --> 06:02.730
是吧

06:02.730 --> 06:04.730
当前环境下

06:04.730 --> 06:06.730
或许哪个值

06:06.730 --> 06:08.730
或许谁的值

06:08.730 --> 06:10.730
timeplate

06:10.730 --> 06:12.730
timeplace i

06:12.730 --> 06:14.730
这个是我们当前这个节点

06:14.730 --> 06:16.730
关联了多少个

06:16.730 --> 06:18.730
母版

06:18.730 --> 06:20.730
其实那没有那么多是吧

06:20.730 --> 06:22.730
其实如果有的话

06:22.730 --> 06:24.730
它也只有一个

06:24.730 --> 06:26.730
因为你这个v2m就只能有一个值是吧

06:26.730 --> 06:28.730
对

06:28.730 --> 06:30.730
这个节点关联了多少个母版

06:30.730 --> 06:32.730
还有多少个东西

06:32.730 --> 06:36.100
好

06:36.100 --> 06:38.100
这个就是拿到timeplace的value

06:38.100 --> 06:40.100
然后如果timeplace的value

06:40.100 --> 06:42.100
不为空

06:42.100 --> 06:44.100
那我们要怎么办

06:44.100 --> 06:48.250
怎么办

06:48.250 --> 06:50.250
我们是不是得把这个result

06:50.250 --> 06:52.250
给它改一下

06:54.250 --> 06:56.250
如果timeplace

06:56.250 --> 06:58.250
timeplace的不为空的话

06:58.250 --> 07:00.250
我们是不是得把这个的value

07:00.250 --> 07:03.560
给设置了一下

07:03.560 --> 07:05.560
就是其实就是input的value是吧

07:05.560 --> 07:07.560
设置成

07:07.560 --> 07:09.560
设置成我们取到的这个母版的值

07:09.560 --> 07:11.560
设置成我们这个取到的母版的值

07:11.560 --> 07:13.560
这回我们test

07:13.560 --> 07:22.180
1是吧

07:22.180 --> 07:24.180
然后test的ob

07:24.180 --> 07:26.180
-x是1对吧

07:26.180 --> 07:28.180
我如果让它等于6

07:28.180 --> 07:30.180
我需要得到的啥

07:30.180 --> 07:32.180
这里变

07:32.180 --> 07:34.180
这里也跟着变对吧

07:34.180 --> 07:36.180
没错

07:36.180 --> 07:38.180
是吧这两个都跟着变

07:38.180 --> 07:40.180
然后我如果这个改成7

07:40.180 --> 07:42.180
这里变了

07:42.180 --> 07:44.180
然后我test的obg.x

07:44.180 --> 07:46.180
等于9

07:46.180 --> 07:48.180
是吧它两个都变了

07:48.180 --> 07:50.180
这样的话我们就完成了

07:50.180 --> 07:52.180
对这种input的

07:52.180 --> 07:54.180
这种输入框的这种

07:54.180 --> 07:56.180
双向数据保定

07:56.180 --> 07:58.180
它既可以修改

07:58.180 --> 08:00.180
它既可以修改我们的data对象

08:00.180 --> 08:02.180
我们data对象改了之后

08:02.180 --> 08:04.180
它也可以变

08:04.180 --> 08:06.180
这样的话我们就真真真正的完成了

08:06.180 --> 08:08.180
这就是补充一下

08:08.180 --> 08:10.180
上一季跟我们没收到的东西

08:10.180 --> 08:12.180
然后下一集

08:12.180 --> 08:14.180
我们正式的来讲

08:14.180 --> 08:16.180
别搞瘋

