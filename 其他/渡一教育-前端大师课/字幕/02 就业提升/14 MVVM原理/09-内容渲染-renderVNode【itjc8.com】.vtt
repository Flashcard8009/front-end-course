WEBVTT

00:00.560 --> 00:02.560
Hello 大家好

00:02.560 --> 00:06.060
前几集我们说了构建虚拟道姆

00:06.060 --> 00:10.060
然后也说了创建了一个渲染的索隐

00:10.060 --> 00:12.060
再说完索隐了之后

00:12.060 --> 00:16.560
我们这一集来正式的开始渲染

00:16.560 --> 00:19.560
我希望在Initl之后

00:19.560 --> 00:21.560
Initl就是把所有东西都说出话了

00:21.560 --> 00:22.560
说出话了之后

00:22.560 --> 00:27.560
我只要轻轻的调用一下Z4.什么下滑线Render

00:27.560 --> 00:29.560
就能进行渲染

00:29.560 --> 00:31.560
当然了 这只是我的一个梦想

00:31.560 --> 00:35.560
所以我需要有这么一个Render的方法

00:35.560 --> 00:37.560
需要这么让一个Render的方法

00:37.560 --> 00:39.560
所以我来引入一下

00:39.560 --> 00:41.560
Import

00:41.560 --> 00:49.450
我希望可以有一个Render Mix in

00:49.450 --> 00:52.450
混入一个

00:52.450 --> 00:54.450
从哪儿混入呢

00:54.450 --> 00:57.450
从Render.js里

00:57.450 --> 00:59.450
当然现在还没有

00:59.450 --> 01:03.450
Render Mix传进去

01:03.450 --> 01:11.720
我希望是以这样的方式来混入进去

01:11.720 --> 01:14.720
Mix in

01:14.720 --> 01:17.720
当然这个方法我们现在还没有

01:17.720 --> 01:20.720
所以我们得来创建一个这个方法

01:20.720 --> 01:22.720
怎么玩

01:22.720 --> 01:25.720
我们还是跟其他的地方一样

01:25.720 --> 01:27.720
我们先找一个空地

01:27.720 --> 01:29.720
从这边

01:29.720 --> 01:31.720
Export

01:31.720 --> 01:32.720
Function

01:32.720 --> 01:33.720
叫啥来着

01:33.720 --> 01:36.720
Render Mix in

01:36.720 --> 01:38.720
把DOE传进来

01:38.720 --> 01:41.720
我们给这个DOE的原形上

01:41.720 --> 01:43.720
Prototype

01:43.720 --> 01:47.720
给它的原形上加一个方法

01:47.720 --> 01:51.670
Render方法

01:51.670 --> 01:53.670
然后呢

01:53.670 --> 01:55.670
我们来调用一个方法

01:55.670 --> 01:56.670
我希望来调用一个方法

01:56.670 --> 01:59.670
就能帮我来进行渲染

01:59.670 --> 02:06.970
调用Render Node

02:06.970 --> 02:09.970
传入一个Vn

02:09.970 --> 02:11.970
就是我给它传进去一个node

02:11.970 --> 02:12.970
它把这个node

02:12.970 --> 02:14.970
以及这个node之下的所有的接点

02:14.970 --> 02:15.970
全都给我渲染了

02:15.970 --> 02:16.970
我希望是这样的

02:16.970 --> 02:20.970
所以我就可以Render Node

02:20.970 --> 02:22.970
Z

02:22.970 --> 02:24.970
Z的Vn

02:24.970 --> 02:25.970
是吧

02:25.970 --> 02:27.970
我们把这个当前

02:27.970 --> 02:30.970
VUE对象的根结点给它传进去

02:30.970 --> 02:31.970
这样的话

02:31.970 --> 02:33.970
它就可以来进行渲染了

02:33.970 --> 02:35.970
我们看Render Node

02:35.970 --> 02:37.970
Render Node怎么写

02:37.970 --> 02:39.970
它其实还是要便利一个数学结构

02:39.970 --> 02:41.970
便利Vnode

02:41.970 --> 02:43.970
寻你当的数

02:43.970 --> 02:45.970
但是只有在一种情况下才渲染

02:45.970 --> 02:47.970
我们现在是要渲染什么

02:47.970 --> 02:49.970
我们是不是要渲染

02:49.970 --> 02:51.970
这些文本呢

02:51.970 --> 02:54.970
我们要把带有

02:54.970 --> 02:56.970
我们这个模板自付串的文本

02:56.970 --> 02:58.970
给它渲染成我们要的数据

02:58.970 --> 02:59.970
是吧

02:59.970 --> 03:00.970
要把这种文本

03:00.970 --> 03:01.970
特殊格式的文本

03:01.970 --> 03:03.970
给它渲染成数据

03:03.970 --> 03:04.970
那前提

03:04.970 --> 03:06.970
它本身得是个文本结点

03:06.970 --> 03:07.970
是吧

03:07.970 --> 03:08.970
如果它不是文本结点

03:08.970 --> 03:09.970
它连文本都没有

03:09.970 --> 03:10.970
我们就不用选了

03:10.970 --> 03:11.970
对吧

03:11.970 --> 03:12.970
它前提得是个文本结点

03:12.970 --> 03:14.970
那我们得判断

03:14.970 --> 03:16.970
Vnode的node type

03:16.970 --> 03:18.970
得等于3

03:18.970 --> 03:19.970
它是个文本结点

03:19.970 --> 03:20.970
我们才能选的

03:20.970 --> 03:24.970
是个文本结点

03:24.970 --> 03:26.970
否则呢

03:26.970 --> 03:27.970
否则呢

03:27.970 --> 03:28.970
否则呢

03:28.970 --> 03:29.970
我就让它去下下找去

03:29.970 --> 03:30.970
是吧

03:30.970 --> 03:31.970
就别带这儿了是吧

03:31.970 --> 03:33.970
否则就让它下下找去

03:33.970 --> 03:34.970
复评完

03:34.970 --> 03:35.970
来的一个i

03:35.970 --> 03:36.970
等于0

03:36.970 --> 03:38.970
i小鱼

03:38.970 --> 03:42.970
vnode.children的lens

03:42.970 --> 03:44.970
来 加加

03:44.970 --> 03:45.970
往下去

03:45.970 --> 03:46.970
Render node

03:46.970 --> 03:48.970
vm

03:48.970 --> 03:51.970
vnode.children

03:52.970 --> 03:53.970
哎

03:55.970 --> 03:57.970
如果它是文本结点

03:57.970 --> 03:58.970
我就看看能不能

03:58.970 --> 03:59.970
有没有需要渲染的

03:59.970 --> 04:01.970
如果它不是文本结点

04:01.970 --> 04:02.970
那我们这里除了文本结点

04:02.970 --> 04:03.970
那就是标签了

04:03.970 --> 04:04.970
对吧

04:04.970 --> 04:05.970
那就往下走去

04:05.970 --> 04:07.970
让它往下走去

04:07.970 --> 04:08.970
那好了

04:08.970 --> 04:11.970
是文本结点的话怎么办

04:11.970 --> 04:14.970
是文本结点的话怎么办

04:14.970 --> 04:15.970
是文本结点的话

04:15.970 --> 04:17.970
我们刚才是不是见了所引

04:17.970 --> 04:19.970
是不是能够通过node

04:19.970 --> 04:21.970
来找出所有的母版来

04:21.970 --> 04:22.970
是吧

04:22.970 --> 04:23.970
我们能通过node

04:23.970 --> 04:25.970
来找出所有的母版来

04:25.970 --> 04:26.970
Timeblades

04:28.970 --> 04:29.970
等于什么

04:29.970 --> 04:33.970
vnode.toTimeblade的点盖子

04:33.970 --> 04:34.970
我们把这个当前的

04:34.970 --> 04:36.970
这个结点传进去

04:36.970 --> 04:37.970
看看能拿出来

04:37.970 --> 04:38.970
一堆母版吗

04:38.970 --> 04:39.970
看看能不能拿出来

04:39.970 --> 04:40.970
母版

04:40.970 --> 04:42.970
一幅

04:43.970 --> 04:44.970
Timeblades

04:44.970 --> 04:46.970
就是我得能拿得出来直

04:46.970 --> 04:47.970
就代表的是

04:47.970 --> 04:50.970
我这个结点下是有母版的

04:50.970 --> 04:51.970
这样的话

04:51.970 --> 04:52.970
是代表我这个结点下有母版的

04:52.970 --> 04:53.970
你看一下

04:53.970 --> 04:55.970
总体的这个结构

04:55.970 --> 04:56.970
现在带马手

04:56.970 --> 04:57.970
还能看得清

04:57.970 --> 04:58.970
总体的这个结构

04:58.970 --> 05:00.970
就是如果传进来的是文本结点

05:00.970 --> 05:02.970
我就要渲染它

05:02.970 --> 05:04.970
如果传进来的不是文本结点

05:04.970 --> 05:06.970
那我就向下地规

05:06.970 --> 05:07.970
这是个地规

05:07.970 --> 05:08.970
向下地规

05:08.970 --> 05:10.970
我们这个便利数学结构的时候

05:10.970 --> 05:12.970
基本上到处都用的是地规

05:13.970 --> 05:14.970
然后我们来看一下

05:14.970 --> 05:16.970
light一个result

05:16.970 --> 05:17.970
等于

05:17.970 --> 05:20.970
we know.txt

05:20.970 --> 05:21.970
看好了

05:21.970 --> 05:23.970
这个txt我们是不变的

05:23.970 --> 05:25.970
这个txt是原来的这个串

05:25.970 --> 05:26.970
我们是不变的

05:26.970 --> 05:29.970
我们把它新动出来一个result

05:29.970 --> 05:30.970
然后我们要干嘛

05:30.970 --> 05:33.970
把所有的母版的形状的东西

05:33.970 --> 05:35.970
全都给它怎么样

05:35.970 --> 05:36.970
替换了

05:36.970 --> 05:38.970
全都给它替换成直

05:38.970 --> 05:40.970
但是有个前提

05:40.970 --> 05:42.970
这个直我得能拿得到

05:42.970 --> 05:43.970
对吧

05:43.970 --> 05:44.970
啥意思

05:44.970 --> 05:47.970
有一个content

05:47.970 --> 05:48.970
我这个data里面

05:48.970 --> 05:49.970
得有这个属性

05:49.970 --> 05:50.970
我才能渲染是吧

05:50.970 --> 05:51.970
没有这个属性

05:51.970 --> 05:52.970
我渲染什么的

05:52.970 --> 05:53.970
对吧

05:53.970 --> 05:55.970
前提是我得有这个属性

05:55.970 --> 05:57.970
那我到底有没有这个属性

05:57.970 --> 05:58.970
我也不知道

05:58.970 --> 05:59.970
我写一个方法来获取

05:59.970 --> 06:01.970
我来写一个方法来获取

06:03.970 --> 06:04.970
写一个什么

06:04.970 --> 06:09.790
写一个方式

06:09.790 --> 06:12.790
get template

06:12.790 --> 06:14.790
value

06:14.790 --> 06:21.940
写了一个objs

06:21.940 --> 06:27.940
然后写了一个template

06:27.940 --> 06:29.940
传出来一堆对象

06:29.940 --> 06:31.940
我要从这一堆的对象里面

06:31.940 --> 06:32.940
来找到有没有这个东西

06:32.940 --> 06:34.940
来找到有没有这个东西

06:34.940 --> 06:38.760
然后我看一下在哪儿掉

06:38.760 --> 06:40.760
我那戴满的

06:40.760 --> 06:42.760
random node

06:42.760 --> 06:43.760
是吧

06:43.760 --> 06:44.760
random node

06:44.760 --> 06:47.760
这块有个result

06:47.760 --> 06:48.760
是吧

06:48.760 --> 06:50.760
我们要拿到这个chart

06:50.760 --> 06:51.760
我们拿到这个chart

06:51.760 --> 06:52.760
拿到这个chart之后

06:52.760 --> 06:53.760
我希望怎么样

06:53.760 --> 06:59.760
我希望去get template value

06:59.760 --> 07:00.760
是吧

07:00.760 --> 07:02.760
我要把这个的值给它拿出来

07:02.760 --> 07:04.760
从哪里拿

07:04.760 --> 07:06.760
从vm的点

07:06.760 --> 07:07.760
data

07:07.760 --> 07:08.760
对吧

07:08.760 --> 07:09.760
从这个里面拿

07:09.760 --> 07:17.140
看看能不能从这个里面拿出来

07:17.140 --> 07:18.140
这个是当前

07:18.140 --> 07:19.140
这个

07:19.140 --> 07:20.140
节点

07:20.140 --> 07:24.710
我看放错地了是吧

07:24.710 --> 07:27.710
这个是当前节点的位置

07:27.710 --> 07:28.710
我来个方循环

07:28.710 --> 07:33.710
因为TimeLate是个什么

07:33.710 --> 07:35.710
TimeLate是个数组

07:35.710 --> 07:36.710
一个节点下

07:36.710 --> 07:46.780
可能有多个目版

07:46.780 --> 07:47.780
这样的话

07:47.780 --> 07:49.780
我们能够拿到一个什么

07:49.780 --> 07:52.780
能拿到一个value是吧

07:52.780 --> 07:56.780
template value

07:57.780 --> 07:58.780
这样的话

07:58.780 --> 07:59.780
我们就能拿到一个value

07:59.780 --> 08:04.310
然后我们来输出一下

08:04.310 --> 08:07.310
console.log

08:07.310 --> 08:11.310
template value

08:11.310 --> 08:12.310
我们来输出一下

08:12.310 --> 08:13.310
这个模板的值

08:13.310 --> 08:14.310
咱来输出一下

08:14.310 --> 08:16.310
这个模板的值

08:16.310 --> 08:17.310
雕rander

08:17.310 --> 08:18.310
我看一下

08:18.310 --> 08:19.310
能不能打印出来

08:19.310 --> 08:21.310
雕rander

08:21.310 --> 08:22.310
看一下

08:22.310 --> 08:23.310
我这里面还没写

08:23.310 --> 08:24.310
是吧

08:24.310 --> 08:28.310
这里面为什么是obgs

08:29.310 --> 08:30.310
为什么要传个数组

08:30.310 --> 08:32.310
直接就从一个地方来拿

08:32.310 --> 08:33.310
不就得了吗

08:33.310 --> 08:34.310
是因为这样的

08:34.310 --> 08:36.310
这块是一个预留

08:36.310 --> 08:38.310
为什么要这么写

08:38.310 --> 08:40.310
是因为我们当前

08:40.310 --> 08:43.310
当前节点的参数

08:43.310 --> 08:46.310
可以来自于

08:46.310 --> 08:48.310
due对象

08:48.310 --> 08:49.310
是吧

08:49.310 --> 08:50.310
或者是vue对象

08:50.310 --> 08:53.310
也可以来自于

08:53.310 --> 08:56.310
副级节点

08:56.310 --> 08:57.310
对吧

08:57.310 --> 08:59.310
我们最早的时候说的那个

08:59.310 --> 09:00.310
它有一个参数的问题

09:00.310 --> 09:03.310
比如说

09:03.310 --> 09:05.310
比如说我这块写一个

09:05.310 --> 09:06.310
li

09:06.310 --> 09:08.310
有个v-fo

09:08.310 --> 09:12.900
key

09:12.900 --> 09:13.900
in

09:13.900 --> 09:17.600
key的a

09:17.600 --> 09:19.600
你说key.a

09:19.600 --> 09:20.600
是来自于

09:20.600 --> 09:21.600
vue对象吗

09:21.600 --> 09:22.600
或者来自于

09:22.600 --> 09:23.600
due对象

09:23.600 --> 09:24.600
没有 是吧

09:24.600 --> 09:26.600
我们对象里面

09:26.600 --> 09:28.600
根本就没有key这么个变量

09:28.600 --> 09:29.600
对吧

09:29.600 --> 09:30.600
所以说

09:30.600 --> 09:31.600
下面这个节点

09:31.600 --> 09:34.600
它的参数未必是来自于

09:34.600 --> 09:36.600
跟路径

09:36.600 --> 09:38.600
也有可能是来自于

09:38.600 --> 09:40.600
它的副级节点

09:40.600 --> 09:42.600
也有可能是来自于

09:42.600 --> 09:43.600
它的副级节点

09:43.600 --> 09:45.600
有这种情况

09:45.600 --> 09:47.600
所以我们先给它预留一下

09:47.600 --> 09:48.600
我们先给它预留一下

09:48.600 --> 09:49.600
实际上

09:49.600 --> 09:50.600
它还可以来自于

09:50.600 --> 09:54.600
vno.env

09:54.600 --> 09:56.600
当然了

09:56.600 --> 09:57.600
这个env

09:57.600 --> 09:58.600
我们现在是空的

09:58.600 --> 09:59.600
我们可以先写上

09:59.600 --> 10:00.600
这个是来自于

10:00.600 --> 10:02.600
我当前的变量

10:02.600 --> 10:04.600
以及我全举的变量

10:04.600 --> 10:05.600
我当前的变量

10:05.600 --> 10:06.600
以及我全举的变量

10:08.600 --> 10:09.600
好了 有了这么一个东西

10:09.600 --> 10:10.600
我们来看一下

10:10.600 --> 10:11.600
能不能打印的出来

10:11.600 --> 10:14.600
我要不是还没写呢 是吧

10:14.600 --> 10:15.600
我们来写一下

10:15.600 --> 10:18.600
我要想获取这个里面的值

10:18.600 --> 10:22.810
怎么来获取

10:22.810 --> 10:24.810
复兵还 是吧

10:24.810 --> 10:25.810
因为这个objs

10:25.810 --> 10:26.810
它毕竟有多个 是吧

10:26.810 --> 10:29.810
Line的一个i等于0

10:29.810 --> 10:30.810
i小于objs

10:30.810 --> 10:32.810
lence

10:32.810 --> 10:33.810
i加加

10:33.810 --> 10:38.530
然后呢

10:38.530 --> 10:41.530
light一个time

10:41.530 --> 10:43.530
我希望我把这个obji

10:43.530 --> 10:46.530
和这个名放在这

10:46.530 --> 10:48.530
就有一个方法能够帮我给它

10:48.530 --> 10:49.530
把这个值给拿出来

10:49.530 --> 10:50.530
我这样的话

10:50.530 --> 10:54.530
我写一个工具

10:54.530 --> 10:55.530
我们创建一个包

10:55.530 --> 10:56.530
叫utails

10:56.530 --> 10:59.530
utails吧

10:59.530 --> 11:01.530
来创建一个类

11:01.530 --> 11:04.530
叫做objs

11:04.530 --> 11:09.570
utails

11:09.570 --> 11:10.570
然后呢

11:10.570 --> 11:11.570
我创建一个方法

11:11.570 --> 11:12.570
export

11:12.570 --> 11:13.570
function

11:13.570 --> 11:14.570
getValue

11:14.570 --> 11:16.570
传进来一个obj

11:16.570 --> 11:18.570
传进来一个

11:18.570 --> 11:19.570
什么呢

11:19.570 --> 11:20.570
传进来一个obj

11:20.570 --> 11:23.570
传进来一个

11:23.570 --> 11:25.570
什么内幕吧

11:25.570 --> 11:26.570
因为这个内幕

11:26.570 --> 11:27.570
可能是什么型

11:27.570 --> 11:28.570
可能是比如说

11:28.570 --> 11:30.570
刚才在key点

11:30.570 --> 11:31.570
你要说key的话

11:31.570 --> 11:32.570
我就直接看一下

11:32.570 --> 11:33.570
有没有就行了

11:33.570 --> 11:35.570
在点就麻烦了

11:35.570 --> 11:36.570
所以说

11:36.570 --> 11:37.570
我们要能兼容得了

11:37.570 --> 11:39.570
这样的情况

11:39.570 --> 11:40.570
如果obj

11:40.570 --> 11:41.570
什么都没有

11:41.570 --> 11:43.570
那就直接return

11:43.570 --> 11:44.570
obj

11:44.570 --> 11:45.570
如果obj

11:45.570 --> 11:46.570
啥都没有

11:46.570 --> 11:47.570
那就别拿了

11:47.570 --> 11:48.570
然后呢

11:48.570 --> 11:49.570
light

11:49.570 --> 11:53.580
一个name list

11:53.580 --> 11:56.580
等于name的split

11:56.580 --> 11:58.580
用什么来分隔

11:58.580 --> 11:59.580
用点来分隔

11:59.580 --> 12:00.580
是吧

12:00.580 --> 12:01.580
因为a.b

12:01.580 --> 12:02.580
是a

12:02.580 --> 12:03.580
这个属性下的b

12:03.580 --> 12:04.580
然后我这个name list

12:04.580 --> 12:07.580
它就有一个集合了

12:07.580 --> 12:09.580
然后我层层推进

12:09.580 --> 12:10.580
靠了

12:10.580 --> 12:12.580
如果是key.a

12:12.580 --> 12:13.580
当前属性下

12:13.580 --> 12:14.580
如果有的话

12:14.580 --> 12:15.580
当前对下里面

12:15.580 --> 12:17.580
是不是一定得有个key

12:17.580 --> 12:18.580
然后

12:18.580 --> 12:20.580
我在key对下里面在找a

12:20.580 --> 12:21.580
是吧

12:21.580 --> 12:22.580
所以说我要一层一层找

12:22.580 --> 12:25.580
先找最外层

12:25.580 --> 12:26.580
light time

12:26.580 --> 12:29.580
等于obj

12:29.580 --> 12:32.580
复运还

12:32.580 --> 12:33.580
light i

12:33.580 --> 12:34.580
i

12:34.580 --> 12:35.580
小鱼

12:35.580 --> 12:37.580
name list

12:37.580 --> 12:39.580
点lens

12:39.580 --> 12:42.580
来看一下

12:42.580 --> 12:45.580
这个eve

12:45.580 --> 12:48.580
time是当前这层路径是吧

12:48.580 --> 12:49.580
看看谁呢

12:49.580 --> 12:52.580
name list i

12:52.580 --> 12:53.580
最开始的时候

12:53.580 --> 12:54.580
这个i为几

12:54.580 --> 12:55.580
i为零是吧

12:55.580 --> 12:56.580
那就是这个key

12:56.580 --> 12:57.580
就这个key是吧

12:57.580 --> 12:58.580
我看这个time下

12:58.580 --> 12:59.580
有没有这个属性

12:59.580 --> 13:01.580
如果有这个属性

13:01.580 --> 13:02.580
怎么办

13:02.580 --> 13:07.790
我让time等于

13:07.790 --> 13:08.790
这个

13:08.790 --> 13:10.790
我就往下走一层

13:10.790 --> 13:12.790
如果没有这个属性

13:12.790 --> 13:18.960
return and define

13:18.960 --> 13:21.960
d5

13:21.960 --> 13:25.960
return and define

13:25.960 --> 13:27.960
如果最后走到了莫为了

13:27.960 --> 13:29.960
return time

13:29.960 --> 13:31.960
就这个

13:31.960 --> 13:33.960
这个也是一个递进的

13:33.960 --> 13:34.960
一种方式

13:34.960 --> 13:36.960
它可以用地规

13:36.960 --> 13:37.960
但是我没有用地规

13:37.960 --> 13:39.960
我用了一个复运还

13:39.960 --> 13:40.960
就像这种东西

13:40.960 --> 13:42.960
地规和循环都能做

13:42.960 --> 13:43.960
你们可以

13:43.960 --> 13:44.960
要是有兴趣的话

13:44.960 --> 13:45.960
可以自己想想

13:45.960 --> 13:47.960
这个地规的方式怎么来做

13:47.960 --> 13:50.960
这个是一层一层的去找

13:50.960 --> 13:51.960
复运还

13:51.960 --> 13:53.960
每循环一圈

13:53.960 --> 13:57.960
这个属性就递进一层

13:57.960 --> 13:59.960
通过这来递进

13:59.960 --> 14:00.960
复运还

14:00.960 --> 14:01.960
每循环一圈

14:01.960 --> 14:02.960
这个属性就递进一层

14:02.960 --> 14:03.960
这个是算法里面

14:03.960 --> 14:05.960
很常用的一个

14:05.960 --> 14:08.960
很常见的一种方式

14:08.960 --> 14:09.960
那我希望

14:09.960 --> 14:12.960
可以盖的Value

14:12.960 --> 14:14.960
我希望我可以盖的Value

14:14.960 --> 14:16.960
直接就可以拿到它

14:16.960 --> 14:18.960
那就是obgs的

14:18.960 --> 14:19.960
第二个

14:19.960 --> 14:22.960
然后拿出来哪个呢

14:22.960 --> 14:24.960
time plate name

14:24.960 --> 14:26.960
是吧

14:26.960 --> 14:29.960
如果

14:29.960 --> 14:31.960
time不等于空

14:31.960 --> 14:33.960
就代表拿出来的是吧

14:33.960 --> 14:34.960
return time

14:38.550 --> 14:39.550
然后呢

14:39.550 --> 14:41.550
不然的话就继续往下找

14:41.550 --> 14:42.550
走到最后了都没有

14:42.550 --> 14:44.550
那就是return

14:44.550 --> 14:47.380
空了

14:47.380 --> 14:49.380
就是return空了

14:49.380 --> 14:50.380
这个呢就是

14:50.380 --> 14:52.380
获取这里面的值

14:52.380 --> 14:53.380
层级

14:53.380 --> 14:55.380
以层级递进的方式来获取里面的值

14:55.380 --> 14:57.380
以层级递进的方式来获取里面的值

14:57.380 --> 14:58.380
然后我看看一下

14:58.380 --> 14:59.380
刚才咱俩调的

14:59.380 --> 15:00.380
刚才在这调的是吧

15:00.380 --> 15:01.380
我们来看一下

15:01.380 --> 15:03.380
我们能不能打印出来这个值

15:03.380 --> 15:12.720
obgs

15:12.720 --> 15:20.090
是吧

15:20.090 --> 15:22.090
能够打印出来这个值是吧

15:22.090 --> 15:23.090
panda

15:23.090 --> 15:24.090
panda say hello

15:24.090 --> 15:25.090
panda say hello

15:25.090 --> 15:26.090
是吧

15:26.090 --> 15:27.090
打印出来的三个

15:27.090 --> 15:28.090
是吧

15:28.090 --> 15:29.090
打印出来的三个

15:29.090 --> 15:31.090
这个它可以填的位置

15:31.090 --> 15:33.090
没有填的最顶上

15:33.090 --> 15:36.090
所以说

15:36.090 --> 15:38.090
我们这个功能上基本上就ok了是吧

15:38.090 --> 15:40.090
拿出来的这个值了之后

15:40.090 --> 15:42.090
我要做的事情是什么

15:42.090 --> 15:44.090
我要做的事情是不是替换

15:44.090 --> 15:47.090
我得先看看有没有这个值

15:47.090 --> 15:48.090
有值才能替换

15:48.090 --> 15:49.090
没有值你就当它没有是吧

15:49.090 --> 15:51.090
没有值你就当它没有

15:51.090 --> 15:53.090
有值的话怎么替换

15:53.090 --> 15:54.090
result

15:54.090 --> 15:59.090
等于result的replace

15:59.090 --> 16:01.090
替换方法对吧

16:01.090 --> 16:02.090
替换方法

16:02.090 --> 16:03.090
把谁给替换了呢

16:03.090 --> 16:06.090
带有这个母版的对吧

16:06.090 --> 16:08.090
我们得拼接一下

16:08.090 --> 16:10.090
因为现在这里面只有值了

16:10.090 --> 16:12.090
没有这个母版的这个

16:12.090 --> 16:16.420
扩号的

16:16.420 --> 16:18.420
把这样的结构的替换成

16:18.420 --> 16:21.420
替换成timeplay的value

16:21.420 --> 16:23.420
把这样的结构的替换成

16:23.420 --> 16:27.310
timeplay的value

16:27.310 --> 16:29.310
是吧就ok对吧

16:29.310 --> 16:31.310
最后一圈圈循环

16:31.310 --> 16:33.310
都完事了之后

16:33.310 --> 16:34.310
这个result的值

16:34.310 --> 16:35.310
是不是就是代表的

16:35.310 --> 16:37.310
这个当前节点的一个

16:37.310 --> 16:38.310
应该有的一个值了对吧

16:38.310 --> 16:40.310
那就we know的

16:40.310 --> 16:42.310
the element

16:42.310 --> 16:43.310
del

16:43.310 --> 16:44.310
now的value

16:44.310 --> 16:45.310
还知道这个值吧

16:45.310 --> 16:46.310
这个属性吧

16:46.310 --> 16:48.310
这个就是每一个标签里面

16:48.310 --> 16:49.310
都有个now的value

16:49.310 --> 16:51.310
如果你这个是个文本

16:51.310 --> 16:54.310
这个节点是个文本节点

16:54.310 --> 16:55.310
那它这个now的value

16:55.310 --> 16:57.310
就是你这个里面文本的内容

16:57.310 --> 16:59.310
然后我们重新给它设置一下

16:59.310 --> 17:01.310
设置成新的内容

17:01.310 --> 17:03.310
这样的话就完成了

17:03.310 --> 17:04.310
宣传是吧

17:04.310 --> 17:05.310
你好潘达

17:05.310 --> 17:06.310
潘达say hello

17:06.310 --> 17:08.310
潘达say hello

17:08.310 --> 17:09.310
这样的话

17:09.310 --> 17:10.310
我们就完成了

17:10.310 --> 17:12.310
最最基本的宣传

17:12.310 --> 17:13.310
当然了

17:13.310 --> 17:14.310
如果只有这样的话

17:14.310 --> 17:15.310
它这个we know意义

17:15.310 --> 17:16.310
就没有什么功能

17:16.310 --> 17:17.310
实际上这个

17:17.310 --> 17:18.310
也没有什么东西

17:18.310 --> 17:20.310
如果

17:20.310 --> 17:22.310
现在我们还有一些功能

17:22.310 --> 17:23.310
没有实现是吧

17:23.310 --> 17:25.310
比如说我修改了一下属性

17:25.310 --> 17:26.310
它这个值是不会变的

17:26.310 --> 17:27.310
是吧

17:27.310 --> 17:28.310
因为我们在这个proxy里面

17:28.310 --> 17:29.310
还没有做这样的功能

17:29.310 --> 17:30.310
是吧

17:30.310 --> 17:31.310
这个proxy里面

17:31.310 --> 17:32.310
我们当修改了之后

17:32.310 --> 17:33.310
还只是打印

17:33.310 --> 17:34.310
还什么都没有做

17:34.310 --> 17:36.310
我们要逐渐的

17:36.310 --> 17:37.310
把这些都给加进来

17:37.310 --> 17:38.310
还有一些参数是吧

17:38.310 --> 17:40.310
比如说这个wagon band

17:40.310 --> 17:41.310
vagon on

17:41.310 --> 17:42.310
corrected

17:42.310 --> 17:43.310
vfoil是吧

17:43.310 --> 17:44.310
咱们讲几个常用的

17:44.310 --> 17:45.310
vagon model

17:45.310 --> 17:46.310
这样的这个

17:46.310 --> 17:47.310
双向数据绑定

17:47.310 --> 17:49.310
咱们下一节

17:49.310 --> 17:50.310
课开始

17:50.310 --> 17:51.310
逐渐的来讲

17:51.310 --> 17:52.310
这一节课

17:52.310 --> 17:54.310
我们就主要的来说一下

17:54.310 --> 17:56.310
当我们触触画完了之后

17:56.310 --> 17:57.310
如何一次性的

17:57.310 --> 17:58.310
进行一次渲染

17:58.310 --> 17:59.310
进行一下渲染

17:59.310 --> 18:00.310
这个random know的

18:00.310 --> 18:01.310
以后会经常用

18:01.310 --> 18:02.310
哪个节点改了

18:02.310 --> 18:03.310
我们就random know的

18:03.310 --> 18:04.310
哪个节点

18:04.310 --> 18:05.310
哪个节点改了

18:05.310 --> 18:06.310
我们就random know的

18:06.310 --> 18:07.310
哪个节点

18:07.310 --> 18:08.310
这一节课

18:08.310 --> 18:10.310
我们就先到这里

