WEBVTT

00:00.690 --> 00:05.090
这就和说一下CS2F 这攻击

00:06.590 --> 00:13.490
上个之前先说一个事 这两天我有一个朋友聊天

00:13.990 --> 00:18.790
他跟我讲他那个公司里边 他手下的一些开发者

00:19.090 --> 00:22.590
前端后端又吵起来了 问他吵啥呢

00:22.890 --> 00:26.390
他说 他们是基于这么一个原因在吵

00:26.990 --> 00:31.790
前端呢 一个开发者呢 他说我们要去修改一个用户啊

00:31.790 --> 00:35.690
就在个人的信息 后端的接口呢 设计有问题

00:36.290 --> 00:38.190
因为后端的设计呢 他是这样子的

00:39.290 --> 00:42.590
这还是一个工作了两年的开发者 一个前端开发人员

00:43.690 --> 00:46.790
后端的设计解口呢 大概是这个样子啊 随便说一下

00:47.290 --> 00:48.490
然后你请求这个地址

00:49.490 --> 00:51.490
比方说update吧

00:51.890 --> 00:58.290
就user 用铺车请求 表示修改对吧 铺车请求这个地址

00:58.890 --> 01:02.690
请求这个地址呢 你带包里里边的数据带啥数据呢

01:02.690 --> 01:03.690
带一个阶层数据

01:04.690 --> 01:05.690
什么阶层数据呢

01:06.090 --> 01:08.190
这个阶层数据 比方说我们要修改姓名

01:08.190 --> 01:10.690
就在那里啥啥的吧 把姓名修改成这个

01:12.090 --> 01:13.490
年龄修改成这个

01:14.790 --> 01:17.390
是懂的意思吧 这表示修改用户

01:18.390 --> 01:21.190
他什么意思呢 他这个截口呢 设计的不合理

01:21.890 --> 01:24.590
应该怎么设计呢 他应该是这样子设计的

01:26.590 --> 01:27.990
后边是不是要带上一个id

01:28.490 --> 01:31.990
对不对 要修改哪个用户吗 你没有告诉我修改哪个用户怎么修改

01:31.990 --> 01:34.590
我不可能把全部用户都修改了 他是这个意思

01:34.590 --> 01:37.390
他要在地址那里边去也带一个id

01:37.390 --> 01:40.190
或者是呢 在body里边在这里带一个id

01:40.190 --> 01:41.590
总之要把这个id那带过去

01:42.190 --> 01:43.990
那么大家呢 想一想

01:44.890 --> 01:45.490
他说的对吗

01:47.490 --> 01:48.290
他说的对吗

01:50.190 --> 01:53.490
这个问题呢 我听到过后呢 我就想到一个事啊

01:53.490 --> 01:57.390
就是之前呢 我上课的时候呢 有一些同学毕业了过后

01:57.390 --> 02:00.290
也遇到一样的问题 有些同学是没有毕业的时候啊

02:00.290 --> 02:03.490
在做一些练习的时候 做一些效果的时候

02:03.490 --> 02:07.190
也会有这样的想法 这样的想法是极其错误的啊

02:07.190 --> 02:09.290
为什么说是错误的呢 因为

02:10.090 --> 02:11.490
你能修改别人的信息吗

02:12.490 --> 02:14.390
你是不是只能修改自己的信息啊

02:15.290 --> 02:17.290
别人的信息是别人有权力修改

02:17.290 --> 02:18.890
你怎么能去修改别人的信息的

02:19.490 --> 02:22.490
你如果说带这个id 表示咋意思呢

02:23.390 --> 02:26.790
人就是我只要登录了 有一种我只要能修改用户

02:26.790 --> 02:28.890
我是不是可以修改任何用户的信息都可以

02:29.790 --> 02:32.090
对不对 所以这个不合理啊

02:32.090 --> 02:34.590
你不能去带id的啊 除非你是超级管理员

02:34.590 --> 02:37.490
超级管理员的话可以 你任何东西都可以干

02:37.490 --> 02:38.890
但是一个普通的用户的话

02:38.890 --> 02:40.190
他只能修改自己的信息

02:40.190 --> 02:41.790
所以说不能带id的

02:41.790 --> 02:43.890
那有朋友说了啊 不带id

02:43.890 --> 02:46.190
我服务器怎么样知道修改哪个用户呢

02:47.190 --> 02:49.990
你不是有Cookie吗 你Cookie来干嘛的

02:49.990 --> 02:52.790
Cookie不就是你当前的用户信息吗

02:52.790 --> 02:54.990
对吧 一个里边不是有另牌吗

02:54.990 --> 02:56.090
你把这个另牌带过去

02:56.090 --> 02:58.090
服务器不就知道你是哪个用户了吗

02:58.090 --> 03:00.190
然后你修改他 他就会修改你的信息

03:00.190 --> 03:02.590
原来的意思吧 不要犯那种低级错误啊

03:03.490 --> 03:05.790
挺有意思的 反正他经常跟我讲一些

03:05.790 --> 03:07.490
非常奇葩的事情在公司里面

03:08.490 --> 03:10.890
发现了 其实工作了两年

03:10.890 --> 03:12.990
甚至三年的开发者

03:12.990 --> 03:14.790
不管是前段还是后段

03:14.790 --> 03:16.890
都有一些特别低级的错误

03:19.090 --> 03:19.990
从说这个东西呢

03:19.990 --> 03:21.490
一是当着大家引起警惕

03:21.490 --> 03:22.890
二是给大家一点信心

03:22.890 --> 03:24.890
不要把外面的世界想象的那么恐怖

03:24.890 --> 03:26.290
其实水货也多得很

03:27.490 --> 03:28.990
当然你邀请大公司的话

03:28.990 --> 03:31.290
那肯定要对自己要求高一点

03:31.290 --> 03:33.790
好 这是关于这个地方 我说一下

03:33.790 --> 03:35.390
另外我再顺便说一下啊

03:36.290 --> 03:38.890
访问个人信息的页面

03:38.890 --> 03:41.790
应该怎么样去设计URL地址

03:43.790 --> 03:47.490
个人信息 查看个个人信息

03:47.490 --> 03:49.490
就我的信息 自己的信息

03:51.690 --> 03:52.790
就我的信息吗

03:52.790 --> 03:54.990
应该怎么样去设计URL地址

03:54.990 --> 03:56.890
你不要给我来个这个地址啊

03:56.890 --> 04:03.290
不要说有的info 后边来一个id 123

04:03.290 --> 04:04.790
不管是id 还有什么编号嘛

04:04.790 --> 04:06.790
对吧 你不要给我来这个地址啊

04:06.790 --> 04:08.890
不要来 或者是呢

04:08.890 --> 04:11.190
一般来说个人我的信息的话

04:11.190 --> 04:12.490
如果说我的信息的话

04:12.490 --> 04:14.790
那么我们一般就是这个东西

04:14.790 --> 04:16.690
你是登陆的用户嘛

04:16.690 --> 04:16.990
对不对

04:16.990 --> 04:18.890
他就把登陆的用户的信息发过去

04:18.890 --> 04:20.590
然后拿到结果就行了

04:20.590 --> 04:22.090
不过有一些网站呢

04:22.090 --> 04:23.990
他后边会担上一些个性域名

04:25.090 --> 04:26.290
会担上一些个性域名

04:26.290 --> 04:27.390
比方说委员进

04:27.390 --> 04:29.890
那么可能他是这样的一个个性

04:29.890 --> 04:30.990
个性的后维在这里面

04:30.990 --> 04:32.490
个性的后维还可以配置

04:32.490 --> 04:33.390
那么这种情况下呢

04:33.390 --> 04:34.590
可以把这个信息带进来

04:34.590 --> 04:35.290
但是呢

04:35.290 --> 04:36.090
我们带进来的过后

04:36.090 --> 04:37.190
由于是我的信息

04:37.190 --> 04:38.690
我可以不用他

04:38.690 --> 04:39.890
不用他

04:39.890 --> 04:41.290
如果说我发现

04:41.290 --> 04:42.690
我的登陆信息

04:42.690 --> 04:43.790
就是现在这个后维

04:43.790 --> 04:45.490
那么我就渲染个人信息的页面

04:45.490 --> 04:46.690
就是因为你们知道

04:46.690 --> 04:48.090
在查看网页的时候

04:48.090 --> 04:49.290
你看自己的信息

04:49.290 --> 04:51.090
跟看别人的信息是不太一样的

04:51.090 --> 04:51.690
对不对

04:51.690 --> 04:52.390
看自己的信息

04:52.390 --> 04:54.890
里边是不是有很多的修改的空间

04:54.890 --> 04:56.690
别人的信息里边是没有的

04:56.690 --> 04:58.390
它是两套渲染逻辑

04:58.390 --> 04:59.390
原来的意思吧

04:59.390 --> 04:59.890
所以说呢

04:59.890 --> 05:00.990
我们就可以对比一下

05:00.990 --> 05:01.890
我们的登陆信息

05:01.890 --> 05:03.290
里边跟这个东西是不是匹配的

05:03.290 --> 05:04.190
而如果是匹配的话

05:04.190 --> 05:07.190
我们就渲染那个个人信息的东西

05:07.190 --> 05:08.190
以外的意思

05:08.190 --> 05:08.390
好

05:08.390 --> 05:09.790
最后顺便说一下

05:09.790 --> 05:10.790
说一下这个点

05:10.790 --> 05:11.090
好

05:11.090 --> 05:11.890
再讲回周杰克

05:14.190 --> 05:16.490
CSRF

05:16.490 --> 05:19.090
它的攻击特点和原理

05:19.090 --> 05:20.690
以及它如何防御

05:20.690 --> 05:21.290
这个东西呢

05:21.290 --> 05:24.990
实际上是一个非常非常古老的攻击方式

05:24.990 --> 05:27.190
防御起来了也不复杂

05:27.190 --> 05:27.590
但是呢

05:27.590 --> 05:28.190
你要注意

05:28.190 --> 05:29.690
如果说一旦不防御的话

05:30.690 --> 05:31.890
当然你们以后

05:31.890 --> 05:33.690
要不要自己写服务器都是个问题

05:33.690 --> 05:35.590
如果说你自己写服务器的话

05:35.590 --> 05:37.290
那你也要考虑一下这个问题

05:37.290 --> 05:38.690
它防御起来很简单

05:38.690 --> 05:40.090
但是如果你不防御的话

05:40.090 --> 05:42.290
可能会造成一些非常严重的后果

05:42.290 --> 05:44.790
就看有没有人在意你的网站了

05:44.790 --> 05:48.590
如果想攻击你的网站就很容易还是很容易被攻击的

05:48.590 --> 05:49.190
它什么意思呢

05:49.190 --> 05:51.190
它叫做跨站请求伪造

05:51.190 --> 05:52.790
它是一个伪造的请求

05:52.790 --> 05:53.790
怎么回事呢

05:53.790 --> 05:55.390
它的本质啊

05:55.390 --> 05:56.090
其实这些东西

05:56.090 --> 05:58.290
都是你可以面试的时候回答的话

05:58.290 --> 05:59.190
当然你不用去背

05:59.190 --> 06:00.190
把意识理解到

06:00.190 --> 06:01.990
然后面试回答的时候

06:01.990 --> 06:04.290
按照自己的理解回答就行了

06:04.290 --> 06:04.990
它的本质呢

06:04.990 --> 06:06.990
是那个恶意的网站

06:08.090 --> 06:10.090
把正常用户当成媒介

06:11.290 --> 06:13.290
正常用户被利用了

06:13.290 --> 06:14.990
他利用了正常用户

06:14.990 --> 06:17.190
通过模拟正常用户的操作

06:17.190 --> 06:19.790
就正常用户本身就有权限做这个操作

06:19.790 --> 06:22.790
然后他利用正常用户的操作

06:22.790 --> 06:25.790
不知不觉的让正常用户去做了这个操作

06:26.690 --> 06:27.490
从而达到

06:28.490 --> 06:29.490
攻击的目的

06:29.490 --> 06:30.290
攻击的是谁呢

06:30.290 --> 06:31.490
攻击的就是这个正常用户

06:31.490 --> 06:33.190
以前登陆过的站点

06:33.190 --> 06:34.490
你看他的原理就是这样

06:34.490 --> 06:35.190
他的就是

06:36.790 --> 06:37.690
流程就是这样子

06:37.690 --> 06:38.290
正常用户呢

06:38.290 --> 06:39.790
去访问了一个恶意网站

06:39.790 --> 06:40.890
这个恶意网他怎么去访问

06:40.890 --> 06:42.190
为什么会去访问恶意网站呢

06:42.190 --> 06:44.590
有可能是朋友圈里边分享出来了

06:44.590 --> 06:45.590
对吧

06:45.590 --> 06:47.990
有可能是到处一些广告

06:47.990 --> 06:49.890
有些广告链接让你点过去了

06:49.890 --> 06:51.190
总之点到一个恶意网站

06:51.190 --> 06:52.890
是非常非常容易的

06:52.890 --> 06:53.690
包括我

06:53.690 --> 06:54.490
我也不能保证

06:54.490 --> 06:55.590
我这个电脑都使用过程中

06:55.590 --> 06:57.490
完全没有访问过恶意网站

06:57.490 --> 06:59.690
有的时候不小心就点进去了

06:59.690 --> 07:01.290
点到一个恶意网站里边去了

07:02.490 --> 07:03.190
按理说

07:03.190 --> 07:04.290
他只是看了一个网页

07:04.290 --> 07:04.490
对吧

07:04.490 --> 07:06.090
他不会造成什么样的危险

07:06.090 --> 07:06.490
但是呢

07:06.490 --> 07:06.890
他有

07:06.890 --> 07:09.390
如果说你正常的网站没有做防御的话

07:09.390 --> 07:11.290
那么就可能会造成这种情况

07:11.290 --> 07:13.090
恶意网站给他响应那个

07:13.090 --> 07:13.890
一个东西

07:13.890 --> 07:14.790
甭管是啥东西吧

07:14.790 --> 07:16.190
比较说一个atmail

07:16.190 --> 07:17.090
响应那个atmail

07:17.090 --> 07:18.490
这个atmail里边带了一些

07:19.590 --> 07:20.890
恶意的代码

07:20.890 --> 07:23.490
这些恶意的代码就导致了正常用户

07:23.490 --> 07:25.390
在自己不知情的情况下

07:25.390 --> 07:26.290
莫名其妙的

07:26.290 --> 07:27.590
他都不知道

07:27.590 --> 07:29.890
然后去请求了正常战典

07:29.890 --> 07:32.090
然后导致了被受到攻击

07:32.090 --> 07:33.090
他整个过程就这样子

07:33.090 --> 07:34.490
我们在后面再详细说

07:34.490 --> 07:35.690
他整个原理是怎么回事的

07:35.690 --> 07:37.590
他为什么可以攻击到正常战典的

07:37.590 --> 07:38.490
这是两个网站嘛

07:38.490 --> 07:38.990
对不对

07:38.990 --> 07:39.490
他为什么

07:39.490 --> 07:41.290
然后这是咱们

07:41.290 --> 07:42.190
腾讯课堂

07:42.190 --> 07:42.590
这个呢

07:42.590 --> 07:44.790
是我做的一个网站

07:44.790 --> 07:45.890
那我这网站怎么去攻击

07:45.890 --> 07:46.690
腾讯课堂呢

07:46.690 --> 07:47.690
我没法直接攻击

07:47.690 --> 07:50.590
但是我可以利用腾讯课堂的

07:50.590 --> 07:53.090
正常用户去让他去攻击

07:53.190 --> 07:53.990
他的原理是这样子

07:55.490 --> 07:57.490
用户访问正常战典

07:57.490 --> 07:58.090
他一开始呢

07:58.090 --> 07:59.190
用户他访问了正常战典

07:59.190 --> 08:00.490
他登陆了

08:00.490 --> 08:00.890
于是呢

08:00.890 --> 08:02.490
我们的正常战典啊

08:02.490 --> 08:03.790
是不是给了他一个成功

08:03.790 --> 08:04.790
给他一个令牌

08:04.790 --> 08:05.590
对不对

08:05.590 --> 08:06.190
这个令牌呢

08:06.190 --> 08:07.690
可以保存到local storage

08:07.690 --> 08:09.190
也可以保存到cookie里边

08:09.190 --> 08:10.090
好像浏览器的话

08:10.090 --> 08:11.690
一般就保存到cookie

08:11.690 --> 08:13.890
那么用户他里边说有cookie了

08:13.890 --> 08:15.390
那又说没事啊

08:15.390 --> 08:16.090
这个cookie呢

08:16.090 --> 08:16.490
访问

08:16.490 --> 08:17.990
他只有访问正常战典的时候

08:17.990 --> 08:18.690
才会带过去

08:18.690 --> 08:19.190
对吧

08:19.190 --> 08:20.390
他访问我们的战典的时候

08:20.390 --> 08:21.290
恶意战典的时候

08:21.290 --> 08:22.390
根本不会带过去

08:22.390 --> 08:23.990
但是你看我可以这样子玩

08:25.090 --> 08:25.590
我现在呢

08:25.590 --> 08:26.290
给这个用户呢

08:26.290 --> 08:28.490
我就我就在网上倒数发吧

08:28.490 --> 08:29.490
倒数发

08:29.490 --> 08:30.490
我就给他发一些链接

08:30.490 --> 08:31.290
朋友圈啊

08:31.290 --> 08:33.090
还有qq那些东西乱加

08:33.090 --> 08:33.590
加一些

08:33.590 --> 08:35.490
而且群发一些邮件

08:35.490 --> 08:37.590
给他一些比较有吸引力的图片啊

08:37.590 --> 08:38.290
对吧

08:38.290 --> 08:40.090
一会找他去点击

08:40.090 --> 08:41.890
点击我们的恶意网站

08:41.890 --> 08:42.790
他只要进来了

08:42.790 --> 08:43.790
我就有机会了

08:43.790 --> 08:45.290
除非就是只要这个正常网

08:45.290 --> 08:46.290
战典没有防御

08:46.290 --> 08:47.090
我就有机会了

08:48.290 --> 08:50.890
当用户访问我们的恶意战典的时候呢

08:50.890 --> 08:53.190
恶意战典他通过某种形式

08:53.190 --> 08:55.590
去请求了这正常战典

08:55.590 --> 08:56.890
只要请求我以上

08:56.890 --> 08:57.790
访问我们的恶意网站

08:57.790 --> 08:59.190
我给他一段一段一天表

08:59.190 --> 09:00.290
这个一天表里面有啥呢

09:00.290 --> 09:01.690
比方说我随便来一个吧

09:01.690 --> 09:03.690
比方说我这里可以有这个东西

09:03.690 --> 09:05.790
我用一个1米几元数

09:05.790 --> 09:06.690
我一个1米几元数

09:06.690 --> 09:07.990
一个src地址

09:07.990 --> 09:09.690
去访问了正常战典

09:09.690 --> 09:10.190
比方说

09:12.390 --> 09:13.690
客点投球点客

09:13.690 --> 09:14.390
对吧

09:14.390 --> 09:16.390
是访问正常战典

09:16.390 --> 09:17.490
那么这个是不是个请求

09:17.490 --> 09:18.090
是不是请求

09:18.090 --> 09:19.790
正常用户拿到这个网页一宣展

09:19.890 --> 09:21.890
一宣展过后是不是把个请求就发出去了

09:21.890 --> 09:22.490
发到哪

09:22.490 --> 09:24.690
是不是发到正常战典里边去了

09:24.690 --> 09:26.090
由于这个正常战典

09:26.090 --> 09:27.490
他是不是跟那个令牌

09:27.490 --> 09:29.190
之前他登录过后的那个令牌

09:29.190 --> 09:30.490
他的御师匹配的

09:30.490 --> 09:32.190
是不是把令牌带过去了

09:32.190 --> 09:32.490
对不对

09:32.490 --> 09:33.990
令牌就会带过去了

09:33.990 --> 09:35.290
带过去的时候呢

09:35.290 --> 09:37.190
是不是就有可能完成攻击

09:37.190 --> 09:37.490
对吧

09:37.490 --> 09:39.490
比方说我这里

09:39.490 --> 09:41.890
比方说我们来一个比较夸张的吧

09:41.890 --> 09:44.290
支付宝八里配

09:44.290 --> 09:45.790
比方说吧

09:45.790 --> 09:47.890
假设支付宝

09:47.890 --> 09:49.490
他没有做跨域

09:49.590 --> 09:51.090
就是CS RF

09:51.090 --> 09:52.790
就是跨站那个占

09:52.790 --> 09:55.590
靠跨站稳请求维造攻击的防御

09:55.590 --> 09:56.690
他没有做防御

09:56.690 --> 09:57.390
没有做防御的

09:57.390 --> 09:58.090
而且呢

09:58.090 --> 09:59.290
他的转账

10:00.390 --> 10:01.990
转账呢是

10:01.990 --> 10:03.590
通过一个Gate请求完成的

10:03.590 --> 10:04.990
因为这里发出的是Gate请求吗

10:04.990 --> 10:05.690
假设啊

10:05.690 --> 10:06.990
假设

10:06.990 --> 10:08.190
那么他转账的地址呢

10:08.190 --> 10:09.490
就是API的请求地址呢

10:09.490 --> 10:10.690
可能是这样子

10:10.690 --> 10:11.390
全是

10:12.390 --> 10:14.590
啊在一些请求参数

10:14.590 --> 10:15.990
他可以扯我们请求的目标

10:15.990 --> 10:16.990
转转到哪个

10:16.990 --> 10:18.090
哪个账号呢

10:18.090 --> 10:19.490
转账到我的账号

10:19.490 --> 10:21.190
转账到我的账号

10:21.190 --> 10:22.090
金额说到了

10:22.090 --> 10:22.990
假设啊

10:22.990 --> 10:24.390
这谁不可能的啊

10:24.390 --> 10:24.890
假设呢

10:24.890 --> 10:25.690
我们转账

10:26.690 --> 10:27.290
1000块钱

10:27.290 --> 10:28.090
我也不要多了

10:28.090 --> 10:29.090
一个用户转一个

10:29.090 --> 10:30.390
给我转一个1000块钱

10:30.390 --> 10:30.990
就差不多了

10:30.990 --> 10:31.790
对吧

10:31.790 --> 10:33.890
那么我这样子请求

10:33.890 --> 10:34.690
正常用户

10:34.690 --> 10:35.490
访问我的网站

10:35.490 --> 10:37.090
我的网站里面有个这个东西

10:37.090 --> 10:37.990
他一请求过去

10:37.990 --> 10:39.290
是不是请求到正常站里

10:39.290 --> 10:39.790
正常站里面

10:39.790 --> 10:41.990
是不是他把他的LIM牌带过去了

10:41.990 --> 10:43.390
正常站里面他不知道啊

10:43.390 --> 10:43.890
这个玩意

10:43.890 --> 10:46.290
他不知道这个请求是来自于

10:46.290 --> 10:48.590
这个网站给的atmail里面的请求

10:48.590 --> 10:49.890
他不知道的

10:49.890 --> 10:51.790
那么他就认为这是个正常的样子

10:51.790 --> 10:53.290
LIM牌也带过来了

10:53.290 --> 10:54.490
请求的地址也正确

10:54.490 --> 10:55.990
请求的方法也是Gate对吧

10:55.990 --> 10:57.490
假设是Gate请求啊

10:57.490 --> 10:59.390
那么假设Gate请求他就可以转账

10:59.390 --> 11:00.390
一般不会

11:00.390 --> 11:02.490
那么这样子他是不是就反省转账了

11:02.490 --> 11:02.690
对吧

11:02.690 --> 11:04.290
那就很夸张了

11:04.290 --> 11:05.890
明白的意思吧

11:05.890 --> 11:07.490
抛射请求其实也可以

11:07.490 --> 11:09.190
比方说我给他演示一个抛射请求吧

11:10.990 --> 11:12.890
我这里呢

11:12.890 --> 11:13.790
我看一下啊

11:13.790 --> 11:18.140
我这里呢是这个

11:18.240 --> 11:19.140
评资一下

11:19.140 --> 11:20.140
评资一下

11:21.840 --> 11:22.640
我这个地方呢

11:22.640 --> 11:25.140
是把之前的那个分子

11:25.140 --> 11:25.940
就是那个

11:27.140 --> 11:29.240
刚刚讲完登陆的一个分子

11:29.240 --> 11:30.440
打过来了

11:30.440 --> 11:35.600
打开纽纳戏看一下啊

11:35.600 --> 11:38.000
Local House啊

11:38.000 --> 11:40.600
这是用户新任的站点

11:40.600 --> 11:42.000
用户新任的站点

11:42.000 --> 11:42.800
就这个站点

11:42.800 --> 11:44.000
就是我们之前呢

11:44.000 --> 11:45.100
我们来看一下把个代码

11:45.100 --> 11:46.600
一个世界上不用看了啊

11:46.600 --> 11:47.600
这个我们的页面呢

11:47.600 --> 11:51.200
就是有一个有两个文门框啊

11:51.400 --> 11:52.800
然后一个登陆

11:52.800 --> 11:54.400
登陆就是阿迦克斯请求

11:54.400 --> 11:55.400
Admin Logging

11:55.400 --> 11:55.700
对吧

11:55.700 --> 11:56.900
Pose请求啊

11:56.900 --> 11:58.000
就这个玩意

11:58.000 --> 11:59.300
把你带过去

11:59.300 --> 11:59.700
然后呢

11:59.700 --> 12:01.800
请求到底成功还是带我答应出来

12:01.800 --> 12:02.100
总之呢

12:02.100 --> 12:03.800
就是这是一个正常站点

12:03.800 --> 12:05.200
魔力支付宝啊

12:05.200 --> 12:06.100
这是个正常站点

12:06.100 --> 12:06.700
然后呢

12:06.700 --> 12:07.600
我可以登陆

12:07.600 --> 12:08.700
正常点登陆没问题吧

12:08.700 --> 12:10.400
这是一个非常正常的逻辑

12:10.400 --> 12:10.700
然后呢

12:10.700 --> 12:11.400
我们那个代码呢

12:11.400 --> 12:13.000
是之前的那个代码

12:13.000 --> 12:14.700
之前的那个就是

12:14.700 --> 12:15.300
登陆代码

12:15.300 --> 12:17.500
我们使用的是加密的Cookie

12:17.500 --> 12:18.800
没有加密

12:18.800 --> 12:19.800
加密了吗

12:19.800 --> 12:20.700
加密了的

12:20.700 --> 12:21.900
我们是最早的时候

12:21.900 --> 12:23.400
刚刚学习的Cookie过后了

12:23.400 --> 12:25.000
我使用了一个加密的Cookie

12:25.000 --> 12:26.000
发生了扣断

12:26.000 --> 12:26.900
当然用JWT

12:26.900 --> 12:27.900
如果说保存在Cookie里边

12:27.900 --> 12:29.200
是一样的道理

12:29.200 --> 12:29.300
好

12:29.300 --> 12:30.700
咱们来看一下吧

12:30.700 --> 12:32.200
我这里登陆

12:32.200 --> 12:34.000
ABC 123 123

12:34.000 --> 12:34.700
登陆

12:34.700 --> 12:34.900
好

12:34.900 --> 12:35.400
登陆成功了

12:35.400 --> 12:35.800
对吧

12:35.800 --> 12:36.900
那我这个站点里边

12:36.900 --> 12:37.700
是不是有Cookie了

12:39.200 --> 12:40.100
所以Cookie了

12:40.100 --> 12:40.600
对吧

12:40.600 --> 12:42.400
那么就现在是哪种情况

12:42.400 --> 12:43.700
他登陆成功了

12:43.700 --> 12:44.500
在正常站点里边

12:44.500 --> 12:45.000
登陆成功了

12:45.000 --> 12:46.200
有这个令牌了

12:46.200 --> 12:46.800
那么接下来呢

12:46.800 --> 12:48.000
我做一个恶意的站点

12:48.000 --> 12:49.200
这个站点非常好做

12:50.200 --> 12:50.800
非常好做

12:52.500 --> 12:53.500
我又不能

12:53.500 --> 12:54.000
恶意的站点

12:54.000 --> 12:55.300
我就写到这吧

12:55.300 --> 12:56.400
就假设这个地方

12:56.400 --> 12:57.200
有一个恶意的站点

12:57.200 --> 12:59.200
当然一般都是在别的服务器上

12:59.200 --> 13:00.500
我们要有一个证件

13:00.500 --> 13:01.300
来一个文件夹

13:01.300 --> 13:02.300
那么这个文件夹

13:02.300 --> 13:03.000
里边跟外面的东西

13:03.000 --> 13:03.700
没有任何关系

13:03.700 --> 13:05.000
就是另外一个网站的

13:05.000 --> 13:06.500
他做了一个恶意的站点

13:06.500 --> 13:07.100
我在这里呢

13:07.100 --> 13:09.600
建立一个文件

13:09.600 --> 13:10.300
别听不了

13:13.540 --> 13:14.540
这里边我写啥呢

13:14.540 --> 13:15.140
我这样子写

13:15.140 --> 13:16.640
看着啊

13:16.640 --> 13:18.340
我写个帮目标单

13:18.340 --> 13:19.140
这个标单

13:19.240 --> 13:20.240
我刚才说了

13:20.240 --> 13:21.240
Gate的请求很简单

13:21.240 --> 13:23.040
你用一个图片

13:24.040 --> 13:24.840
都可以搞定

13:24.840 --> 13:25.740
不仅是图片

13:25.740 --> 13:27.140
你用一个script元素

13:27.140 --> 13:27.940
另可以元素

13:27.940 --> 13:28.640
任何一个元素

13:28.640 --> 13:29.840
只要刘大棋在宣传的过程中

13:29.840 --> 13:30.840
他会发出请求的

13:30.840 --> 13:32.040
都可以搞定

13:32.040 --> 13:32.540
对不对

13:32.540 --> 13:33.240
那么这里呢

13:33.240 --> 13:35.040
我们就刚才使用的是图片

13:35.040 --> 13:35.740
那么现在呢

13:35.740 --> 13:36.840
我们看一下pose的请求

13:36.840 --> 13:37.840
他怎么来伪造

13:37.840 --> 13:38.640
一样的

13:38.640 --> 13:40.440
其实原理是一样的

13:40.440 --> 13:42.440
一个请求拿了

13:42.440 --> 13:43.840
我求请求正常站点

13:45.540 --> 13:46.640
5008

13:46.640 --> 13:47.540
这是我们的正常站点

13:47.540 --> 13:48.440
对不对

13:48.540 --> 13:49.640
请求拿个地址

13:49.640 --> 13:50.240
比方说

13:50.240 --> 13:52.040
我要去伪造这个用户

13:52.040 --> 13:53.240
我要去伪造干嘛

13:53.240 --> 13:53.940
我要去

13:53.940 --> 13:54.640
不是转账了

13:54.640 --> 13:56.140
我这个网站没有转账

13:56.140 --> 13:58.040
我就添加一个学生

13:58.040 --> 14:00.540
API student

14:00.540 --> 14:01.140
Messor的

14:01.140 --> 14:01.940
要写post

14:04.740 --> 14:06.140
有没有让你写这个封表

14:06.140 --> 14:07.940
让你用户不得点提交吗

14:07.940 --> 14:09.040
你不着急

14:09.040 --> 14:10.540
不着急

14:10.540 --> 14:10.840
来吧

14:12.640 --> 14:13.140
然后呢

14:13.140 --> 14:14.140
有一个input

14:14.140 --> 14:15.440
有一个input元素

14:16.840 --> 14:17.440
给他一个name

14:18.640 --> 14:19.440
学生

14:22.640 --> 14:23.440
学生

14:27.240 --> 14:28.340
这是我们的学生

14:28.340 --> 14:29.240
学生的那个

14:29.240 --> 14:30.840
有name有sex

14:30.840 --> 14:33.160
name

14:33.160 --> 14:37.560
sex

14:37.560 --> 14:39.460
我直接把它指甲写上

14:40.460 --> 14:41.560
value

14:41.560 --> 14:42.060
name呢

14:42.060 --> 14:43.960
比较是hack

14:43.960 --> 14:44.660
sex呢

14:44.660 --> 14:45.560
我就随便来一个吧

14:45.560 --> 14:46.260
0

14:46.260 --> 14:47.660
我要添加一个学生

14:47.660 --> 14:49.560
当然修改学生是一样的

14:49.560 --> 14:51.260
添加学生

14:51.260 --> 14:53.160
sex mobile

14:53.260 --> 14:53.660
来吧

14:53.660 --> 14:54.860
复制吧

14:54.860 --> 14:55.660
这是mobile

14:57.260 --> 14:58.260
value了就是

14:58.260 --> 14:59.260
1

14:59.260 --> 15:00.060
0

15:00.060 --> 15:00.260
1

15:00.260 --> 15:00.460
2

15:00.460 --> 15:00.660
3

15:00.660 --> 15:00.960
4

15:00.960 --> 15:01.160
5

15:01.160 --> 15:01.360
6

15:01.360 --> 15:01.560
7

15:01.560 --> 15:02.260
8

15:04.260 --> 15:04.760
input

15:07.360 --> 15:08.860
还有什么呢

15:08.860 --> 15:12.370
class id

15:12.370 --> 15:13.870
name

15:13.870 --> 15:15.870
class id

15:15.870 --> 15:16.870
value

15:16.870 --> 15:17.170
joke

15:19.070 --> 15:19.670
birthday

15:25.700 --> 15:27.900
birthday

15:27.900 --> 15:28.100
好

15:28.100 --> 15:28.900
value了

15:28.900 --> 15:30.400
我们就写一个0吧

15:30.400 --> 15:31.200
用时间戳

15:31.800 --> 15:33.200
好大家看一下

15:33.200 --> 15:33.900
这个网站

15:33.900 --> 15:35.200
那么现在的这个网站

15:35.200 --> 15:36.000
这个页面呢

15:36.000 --> 15:37.300
跟我们的服务器没有任何关系

15:37.300 --> 15:38.200
我刚才在这样子

15:38.200 --> 15:39.700
点击在翻转动显示

15:39.700 --> 15:41.600
在这里显示

15:41.600 --> 15:42.600
我们这里打开

15:43.900 --> 15:45.400
所以构建一个表单出来了

15:45.400 --> 15:46.300
对吧

15:46.300 --> 15:47.100
那么这个表单

15:47.100 --> 15:47.900
现在没有提交

15:47.900 --> 15:48.900
那我怎么提交呢

15:48.900 --> 15:50.600
我就可以用js提交

15:50.600 --> 15:52.200
你看我在这里写个js

15:54.700 --> 15:56.000
写个js

15:56.000 --> 15:56.400
然后呢

15:56.400 --> 15:57.200
我在这里呢

15:57.200 --> 15:58.900
得到这个风表单

15:58.900 --> 15:59.900
给他个id

15:59.900 --> 16:00.600
比较多

16:00.600 --> 16:00.900
danger

16:00.900 --> 16:01.100
foam

16:03.100 --> 16:04.000
dopment

16:04.000 --> 16:05.800
get element id

16:05.800 --> 16:06.600
danger

16:06.600 --> 16:06.800
foam

16:08.200 --> 16:09.700
然后直接来submit

16:10.900 --> 16:14.820
提交

16:14.820 --> 16:16.220
你看啊

16:16.220 --> 16:17.920
那我现在把这个地址

16:17.920 --> 16:20.020
比方说我们这个网站的地址

16:20.020 --> 16:21.120
我们这个网站的地址呢

16:22.120 --> 16:22.720
而且要假设

16:22.720 --> 16:23.320
随便一个地址

16:23.320 --> 16:24.120
我们把它达到

16:24.120 --> 16:25.120
达到我们的服务器上

16:25.120 --> 16:26.020
然后把这个地址

16:26.020 --> 16:27.120
分享给用户

16:27.120 --> 16:28.420
那么用户是不是就相当于是

16:28.420 --> 16:29.920
点开了这个网页

16:29.920 --> 16:30.620
点开这个网页

16:30.620 --> 16:32.920
这个网页里边有没有

16:32.920 --> 16:33.720
这个网页里边

16:33.720 --> 16:35.520
他并没有在这个网站里边登录过

16:35.520 --> 16:37.220
这是这个二亿网站

16:37.220 --> 16:39.120
他并没有在我们的二亿网站登录过

16:39.120 --> 16:40.320
但是我们二亿网站给他

16:40.320 --> 16:41.120
给他一个atmail

16:42.120 --> 16:42.920
给他一个atmail

16:44.320 --> 16:44.720
然后呢

16:44.720 --> 16:46.220
他你看啊

16:46.220 --> 16:47.520
给他atmail过后呢

16:47.520 --> 16:48.320
他就正常用户

16:48.320 --> 16:49.920
是不是会运行这个atmail

16:49.920 --> 16:50.220
对吧

16:50.220 --> 16:51.920
包括里面的js都会运行

16:51.920 --> 16:52.620
于是呢

16:52.620 --> 16:54.420
他就发送了一个表单请求

16:54.420 --> 16:55.420
到了正常网页

16:56.720 --> 16:57.620
那么这个正常

16:57.620 --> 16:58.920
那不是个请求是个伪造的

16:58.920 --> 17:00.720
是不是这个二亿网站与伪造的请求

17:00.720 --> 17:01.920
发送到了正常网站

17:01.920 --> 17:03.520
并且的把令牌附带过去了

17:04.420 --> 17:05.120
你明白的意思吗

17:05.920 --> 17:06.520
对不对

17:06.520 --> 17:07.120
那么他把个

17:07.120 --> 17:08.720
但是我们二亿网站

17:08.720 --> 17:10.920
虽然说他得不到用户的令牌

17:10.920 --> 17:11.320
但是呢

17:11.320 --> 17:12.720
我们可以利用用户

17:12.720 --> 17:13.920
用户被利用了

17:13.920 --> 17:15.920
他他莫名其妙的把个令牌

17:15.920 --> 17:17.720
发送到正常网站去了

17:17.720 --> 17:19.020
他就做了一个操作

17:19.020 --> 17:19.720
做了什么操作

17:19.720 --> 17:20.920
添加学生的操作

17:22.320 --> 17:24.320
这个操作用户都不知道怎么发生了

17:24.320 --> 17:25.320
然后就做了个操作了

17:25.320 --> 17:26.720
然后我们来看一下数据库里边

17:27.720 --> 17:28.720
点击右键刷新

17:29.920 --> 17:30.520
看最后一个

17:31.220 --> 17:32.520
就多了一个用户了

17:32.520 --> 17:33.020
对吧

17:33.020 --> 17:33.720
这就是

17:34.520 --> 17:35.920
抛射请求的伪造

17:35.920 --> 17:36.920
他真的可以伪造的

17:37.720 --> 17:38.320
那其实呢

17:38.320 --> 17:40.320
他还可以伪造的更加隐蔽一点

17:40.320 --> 17:41.520
比方说像这个东西呢

17:41.520 --> 17:42.520
用户一看不对就哪

17:42.520 --> 17:43.520
这傻话呀

17:43.520 --> 17:45.120
我们为什么别人给我分享一个地址

17:45.120 --> 17:45.720
分享过来

17:45.720 --> 17:46.920
我打开不过是这个玩意

17:46.920 --> 17:47.520
这什么玩意

17:47.520 --> 17:48.920
是不是引起警惕了

17:48.920 --> 17:49.520
那么这个时候

17:49.520 --> 17:50.920
他可能会报告服务器

17:50.920 --> 17:52.120
报告一个正常网站那边

17:52.120 --> 17:52.520
哎

17:52.520 --> 17:53.420
这为什么呢

17:53.420 --> 17:54.820
为什么会出现这个东西呢

17:54.820 --> 17:56.120
可能给他截个图

17:56.120 --> 17:57.520
那么那边一报发现

17:57.520 --> 18:00.120
啊这个是一个跨站请求伪造

18:00.120 --> 18:00.720
那怎么办呢

18:00.720 --> 18:02.520
正常网站那边可能要进行防御

18:02.520 --> 18:04.120
啊之前没有注意的

18:04.120 --> 18:04.920
那有一些

18:05.520 --> 18:07.720
恶意网站他伪造的更加

18:07.720 --> 18:09.420
就更加隐蔽

18:09.420 --> 18:11.020
就是服务器可能一直都没有发掘

18:11.020 --> 18:12.020
用户也没有发掘

18:12.020 --> 18:12.920
那他怎么伪造呢

18:12.920 --> 18:13.320
他这样子

18:14.220 --> 18:16.020
他不让用户直接谈问这个网页

18:16.020 --> 18:17.320
他可以勾件另一个网页

18:19.120 --> 18:21.420
然后这个网页是非常非常正常的

18:21.420 --> 18:23.320
一切都是正常正常的啊

18:23.320 --> 18:26.720
这是一个看上去极其正常的

18:26.720 --> 18:28.920
而且里边还有些很好玩的图片啊

18:28.920 --> 18:30.020
内容啊游戏啊对吧

18:30.020 --> 18:31.320
当你去玩啊

18:31.320 --> 18:32.920
看上去非常正常的网页

18:33.620 --> 18:35.720
然后他这个网页里边加了一个i3

18:38.400 --> 18:40.000
在i3里边去引用

18:40.800 --> 18:42.400
引用引用这个灯奖

18:43.300 --> 18:44.100
他引用这个

18:44.400 --> 18:46.400
那么相当于是不是把这个e-mail

18:46.500 --> 18:47.700
倒到这里边来了

18:47.700 --> 18:49.000
然后再把他隐藏掉

18:49.700 --> 18:50.300
display

18:51.200 --> 18:52.500
这样子用户看得出来吗

18:52.500 --> 18:53.100
看不出来

18:53.100 --> 18:54.600
那么他就不会提交到服务器了

18:54.800 --> 18:56.200
他就不知道发生了什么事

18:56.200 --> 18:57.500
莫名其妙的就发生了

18:57.500 --> 18:59.200
像正常网页发生了一个请求

18:59.200 --> 19:00.300
因为我们请求这个

19:00.400 --> 19:01.600
他这个会请求他对吧

19:01.600 --> 19:03.800
他里边是都会请求我们的正常网站

19:04.000 --> 19:05.500
对吧他会形成这么一种结构

19:05.500 --> 19:07.800
那么还让他让用户去运行这个index

19:08.000 --> 19:09.000
那么咱们再来看

19:09.200 --> 19:11.700
刚才呢把这个黑黑已经删掉了对吧

19:12.000 --> 19:13.300
好现在我们再运行这个

19:14.800 --> 19:16.000
看上去没问题对不对

19:16.800 --> 19:17.600
你会发现

19:18.400 --> 19:18.900
刷新

19:21.230 --> 19:22.130
是不是又出现了

19:22.330 --> 19:23.430
对吧啊

19:23.630 --> 19:24.630
他还是出问题了

19:25.430 --> 19:26.330
那么这个时候

19:27.430 --> 19:28.030
怎么办呢

19:28.030 --> 19:28.830
这就是夸张

19:29.330 --> 19:30.630
这就是CSRF啊

19:31.430 --> 19:31.830
怎么办呢

19:31.830 --> 19:33.630
防御有很多方式

19:33.630 --> 19:34.830
而且呢都不复杂

19:35.330 --> 19:36.030
我跟他说

19:36.230 --> 19:37.030
第一种方式

19:37.530 --> 19:39.130
要cookie的same sight

19:40.130 --> 19:41.030
这是什么意思呢

19:42.030 --> 19:43.730
现代的很多流量器啊

19:43.730 --> 19:45.730
就从谷歌chrome

19:46.030 --> 19:48.830
从五一这个版本开始

19:49.130 --> 19:50.730
他就已经支持这个东西了

19:51.430 --> 19:53.630
他就是为了解决CSRF

19:54.230 --> 19:56.130
那么这个问题的根源在哪呢

19:56.130 --> 19:59.930
根源在于正常用户在跨越占点的请求中

19:59.930 --> 20:01.230
他附带了cookie

20:01.830 --> 20:03.430
他把cookie给他附带过去了

20:03.630 --> 20:04.630
自动的附带过去了

20:04.730 --> 20:05.830
因为他发现同源凑里马

20:05.830 --> 20:07.030
他同一个域名对不对

20:07.030 --> 20:07.930
cookie是这个域名

20:07.930 --> 20:09.330
正常占点访问的请求呢

20:09.330 --> 20:10.030
也是个域名

20:10.030 --> 20:10.930
他就附带过去了

20:12.030 --> 20:12.830
但是呢

20:13.330 --> 20:14.230
你要知道啊

20:14.230 --> 20:16.530
用户是在哪个网页中附带过去了

20:16.630 --> 20:18.630
是在恶意占点的网页中

20:19.030 --> 20:20.630
把另一个占点的cookie附带

20:20.630 --> 20:21.830
到另一个占点里边去了

20:22.130 --> 20:24.530
那么cookie里边的一个属性叫same size

20:24.530 --> 20:25.630
就是为了防止这个事

20:26.330 --> 20:27.630
他不是cookie的标准

20:27.730 --> 20:28.030
但是呢

20:28.030 --> 20:29.130
浏览器里边啊

20:29.630 --> 20:31.530
谷歌的浏览器511这个版本之后呢

20:31.530 --> 20:32.930
他就已经支持这个东西了

20:33.730 --> 20:34.430
什么意思呢

20:34.630 --> 20:36.530
你只要在给率cookie的时候

20:36.530 --> 20:38.330
在第一步登陆成功过后

20:38.330 --> 20:39.930
正常占点他给cookie的时候

20:40.330 --> 20:41.830
就给这个cookie约束一下

20:42.030 --> 20:42.830
你这个cookie

20:43.530 --> 20:46.230
只能在我的页面中发送给我

20:46.630 --> 20:48.630
你不能在别人的页面中发送给我

20:49.430 --> 20:50.130
明白的意思吧

20:50.630 --> 20:51.230
所以说呢

20:51.430 --> 20:53.530
那么如果说你加上这个same size过后了

20:53.530 --> 20:54.330
他就有这个功能了

20:54.930 --> 20:56.330
same size目前呢

20:56.530 --> 20:57.330
他有三个值

20:57.330 --> 20:59.630
一个是 strict 严格

21:00.330 --> 21:02.530
表示所有夸占的请求

21:02.530 --> 21:03.630
什么叫夸占的请求

21:03.830 --> 21:04.830
我的页面

21:05.830 --> 21:07.130
我的页面是这个玩意

21:07.630 --> 21:09.230
我请求的页面

21:10.130 --> 21:10.930
是这个玩意

21:11.030 --> 21:11.730
是不是夸占的

21:11.730 --> 21:12.630
夸占的请求

21:12.830 --> 21:13.230
对吧

21:13.730 --> 21:15.930
那么凡是遇到夸占的请求

21:16.630 --> 21:17.930
如果是严格模式

21:18.030 --> 21:19.330
他都不会附带 cookie

21:20.330 --> 21:21.530
不会附带

21:21.530 --> 21:23.730
那么这个 cookie 另排不附带过去

21:23.730 --> 21:26.230
是不是这个伪造就无法完成了

21:26.730 --> 21:28.130
好另一个呢是宽松

21:28.230 --> 21:28.730
他第一个呢

21:28.730 --> 21:30.830
他有的时候会找出用户体验不好

21:31.230 --> 21:32.730
为什么说用户体验不好呢

21:32.830 --> 21:35.130
就是连超链接他都不会附带 cookie

21:35.330 --> 21:37.830
比方说我这个地址里边有一个超链接

21:38.130 --> 21:38.730
念叼到哪呢

21:38.730 --> 21:39.930
念叼到我们这个网站

21:39.930 --> 21:40.130
对吧

21:40.130 --> 21:41.330
我这个网站是登录过的

21:42.030 --> 21:43.130
然后我点击过去

21:43.130 --> 21:44.330
他是没有登录的

21:44.530 --> 21:46.530
为什么他不会发送 cookie 过去

21:46.930 --> 21:48.330
连超链都不会

21:48.730 --> 21:49.930
他这个太严格了

21:51.130 --> 21:52.530
其实呢我们很多时候呢

21:53.330 --> 21:54.330
防御的时候呢

21:54.430 --> 21:55.230
实际上不防御

21:55.230 --> 21:56.030
get 请求的

21:56.030 --> 21:56.530
get 请求

21:56.530 --> 21:58.430
因为我们不对数据做什么感动

21:58.630 --> 21:59.830
我们一般防御的是什么呢

21:59.830 --> 22:01.530
就是其他其他方式的请求

22:01.930 --> 22:03.130
所以说严格模式呢

22:03.130 --> 22:04.130
有点太严格了

22:04.430 --> 22:05.230
另一个是宽松

22:05.230 --> 22:06.330
宽松是比较好的

22:06.630 --> 22:08.230
他说所有的超链接呢

22:08.230 --> 22:09.430
我允许你带 cookie

22:09.630 --> 22:11.330
get 请求的表达我允许你带

22:11.530 --> 22:12.530
预夹带的链接

22:12.530 --> 22:13.530
你们学过无忧对吧

22:13.530 --> 22:15.230
叫做 pre-render

22:15.430 --> 22:17.230
那个链接的会发送 cookie

22:17.330 --> 22:18.830
其他的情况都不发送

22:19.530 --> 22:20.630
这种叫宽松

22:20.830 --> 22:22.030
浪了就是无限制

22:22.030 --> 22:24.030
那我就就像这种情况

22:24.230 --> 22:25.530
刚才颜色情况就是浪

22:25.930 --> 22:27.130
就是我可以带 cookie

22:27.830 --> 22:28.630
目前是浪

22:28.730 --> 22:30.330
这种方式是极其简单的

22:30.330 --> 22:31.730
那怎么做呢非常简单

22:31.830 --> 22:32.830
比方说我们在这里

22:34.430 --> 22:35.730
之前做登录在哪呢

22:35.930 --> 22:36.330
在这

22:38.030 --> 22:38.630
登录成功

22:38.630 --> 22:40.430
所以大家 cookie cookie 里边给他加一个

22:41.130 --> 22:42.430
same side

22:43.630 --> 22:44.830
给他写上一个 next

22:45.330 --> 22:45.830
宽松

22:46.730 --> 22:47.630
好 保存

22:47.830 --> 22:48.830
然后现在我们来登录

22:48.830 --> 22:49.630
登录试一下

22:50.030 --> 22:50.630
现在登录

22:53.230 --> 22:55.030
abc 123 123

22:55.130 --> 22:55.630
登录

22:56.230 --> 22:56.830
我们来看一下

22:56.830 --> 22:58.030
看一下网络请求

22:58.530 --> 22:59.530
网络请求里边

22:59.530 --> 23:01.630
你看服务器的响应结果

23:04.670 --> 23:05.270
cookie

23:05.870 --> 23:07.170
cookie 里边说一个 same side

23:07.270 --> 23:07.570
对吧

23:07.570 --> 23:09.370
也我看一下这里的 cookie 能不能看得到

23:09.470 --> 23:10.570
看得到一个 same side

23:12.270 --> 23:13.270
same side

23:13.770 --> 23:14.270
对啊

23:14.270 --> 23:14.970
为何发送

23:14.970 --> 23:16.970
锦线同意网站的链接

23:16.970 --> 23:17.470
看没

23:18.070 --> 23:19.270
好 那么这个东西发送过去了

23:19.270 --> 23:19.970
我们再来看

23:19.970 --> 23:20.970
这边能伪照吗

23:21.070 --> 23:22.270
点开右键检查

23:23.370 --> 23:24.270
这里刷新

23:24.770 --> 23:25.470
能伪照吗

23:25.670 --> 23:26.570
是forbidden的

23:26.570 --> 23:26.970
对吧

23:26.970 --> 23:27.870
你看那个请求

23:29.370 --> 23:30.370
他带不了 cookie 过去了

23:30.370 --> 23:30.670
一看

23:30.670 --> 23:31.870
request 里边有 cookie 吗

23:32.070 --> 23:33.170
没有 cookie 带过去了

23:33.170 --> 23:33.770
对不对

23:33.870 --> 23:34.670
带不过去了

23:34.970 --> 23:35.370
对吧

23:35.570 --> 23:35.970
好 所以说

23:35.970 --> 23:38.470
请求能不能到服务器肯定能到

23:38.470 --> 23:38.970
但是服务器

23:38.970 --> 23:39.770
他就有意拿不到 cookie

23:39.770 --> 23:40.970
他就认为你没有权限

23:41.170 --> 23:42.570
所以说这就是正常的情况了

23:42.970 --> 23:43.770
这是这种模式

23:43.770 --> 23:45.270
这种模式极其简单

23:45.870 --> 23:47.670
但是他这就有一个不好

23:48.370 --> 23:49.170
怎么不好呢

23:49.770 --> 23:50.970
他有个田地条件

23:50.970 --> 23:53.570
就是用户不能使用太久的浏览器

23:54.070 --> 23:56.070
有些用户过来用 xp 系统

23:56.070 --> 23:58.570
还在用 i6 像这些太久的浏览器

23:58.570 --> 23:59.570
不支持这东西

24:00.970 --> 24:03.670
那么像现在有一些互联

24:03.670 --> 24:05.070
很多的新的互联网产品

24:05.070 --> 24:06.470
哪都有已经不考虑这个东西了

24:06.470 --> 24:07.070
比方说

24:07.470 --> 24:09.270
你去开发一个新的互联网产品

24:09.670 --> 24:10.670
那么这个一般来说

24:10.670 --> 24:12.070
我们就默认用户用的是

24:12.070 --> 24:13.470
比较高版本的浏览器了

24:13.870 --> 24:15.170
至少支持ATM5了

24:15.170 --> 24:15.570
对吧

24:16.370 --> 24:17.570
那么这样的浏览器是没有

24:17.770 --> 24:19.170
使用这个属性是没有问题的

24:19.770 --> 24:22.870
但是如果说你去做一些政府的网站

24:23.270 --> 24:24.270
那么那些用户

24:24.270 --> 24:27.570
可能用了一些很古老的浏览器

24:27.870 --> 24:29.370
那么这个时候就会出问题了

24:30.270 --> 24:31.770
当然你可以在你浏览器端

24:31.770 --> 24:32.970
用介石验证一下

24:32.970 --> 24:34.170
看他的浏览器版本

24:34.470 --> 24:35.670
使用的是什么样的浏览器

24:35.670 --> 24:36.670
给他一些提示

24:37.270 --> 24:38.270
就这个东西

24:39.870 --> 24:41.170
我相信了以后

24:41.270 --> 24:42.870
这个CSRF

24:42.870 --> 24:45.170
慢慢的就会使用这个玩意来作为防御了

24:45.670 --> 24:46.670
好 接下来看第二个

24:46.670 --> 24:47.670
第二个防御方式

24:47.970 --> 24:48.670
是验证

24:48.670 --> 24:50.370
这个后面我就讲一讲原理就行了

24:50.370 --> 24:51.970
叫referrer和orange

24:52.470 --> 24:54.270
因为我们知道像这些请求

24:54.270 --> 24:56.370
你看像这些夸张的请求

24:56.470 --> 24:58.370
他会给浮览器带一个啥

24:58.570 --> 24:59.470
带一个这个东西

25:00.770 --> 25:02.770
他会给浮览器带一个就是orange

25:02.770 --> 25:03.270
对吧

25:03.870 --> 25:05.470
原来的原地址

25:05.470 --> 25:07.270
我们之前说学跨域的时候是不是学过

25:07.270 --> 25:08.870
但是跨域是基于阿迦克斯

25:08.870 --> 25:09.670
这个是不是阿迦克斯

25:09.670 --> 25:10.670
根本不是阿迦克斯

25:10.670 --> 25:11.170
对不对

25:11.570 --> 25:12.770
他是基于这个原

25:13.170 --> 25:15.170
那么会把这种原给浮览器

25:15.670 --> 25:17.670
那么浮览器可以通过这个原

25:17.670 --> 25:19.970
再对比一下我是不是允许的原

25:20.370 --> 25:21.570
如果说允许的话

25:21.870 --> 25:22.970
然后我就正常处理

25:22.970 --> 25:23.770
不允许的话

25:23.770 --> 25:24.970
就是允许他再带cookie

25:24.970 --> 25:25.970
cookie让他带过去

25:25.970 --> 25:26.770
但是然后呢

25:27.170 --> 25:28.570
我们通过这个东西来验证

25:28.570 --> 25:30.370
或者是你们刚才我们刚才说了

25:30.370 --> 25:31.570
可以用什么image

25:33.940 --> 25:35.440
刚才我们看到这个就是

25:36.340 --> 25:37.540
CSRF围造

25:38.140 --> 25:39.740
我怎么把这个夹板打开

25:40.640 --> 25:44.040
image通过这个是不是get请求请求过去

25:44.040 --> 25:44.540
对不对

25:44.540 --> 25:45.840
通过这个东西请求过去

25:49.350 --> 25:50.350
那么这个请求过去的时候

25:50.350 --> 25:51.650
他是会带一个refer

25:51.650 --> 25:53.250
我们之前讲了一个图片的

25:54.850 --> 25:56.250
防盗链是不是说过的

25:56.250 --> 25:57.250
他会带这个东西

25:57.250 --> 25:58.750
而带这个东西我们是不是可以浮览

25:58.750 --> 25:59.450
可以验证

25:59.450 --> 25:59.750
对不对

25:59.750 --> 26:02.850
是不是我们允许的原或者是一面

26:03.450 --> 26:03.650
好

26:03.650 --> 26:04.650
这种方式

26:06.850 --> 26:07.650
但是你要知道

26:07.650 --> 26:08.250
这种方式呢

26:08.250 --> 26:09.650
还是有一点点缺陷

26:09.650 --> 26:10.850
就是浏览器呢

26:11.050 --> 26:13.350
某一些流量器的refer是可以被用户禁用的

26:13.350 --> 26:13.850
但是

26:14.350 --> 26:15.750
但是一般用户不会禁用它

26:15.750 --> 26:17.350
但是如果说不小心设置到过后

26:17.350 --> 26:19.250
那可能这个用户容易被遭到攻击

26:19.750 --> 26:19.950
好

26:19.950 --> 26:20.550
这是这个

26:20.950 --> 26:21.150
好

26:21.150 --> 26:21.550
另一个呢

26:21.550 --> 26:22.950
是使用cookie令牌

26:23.950 --> 26:24.550
这种做法呢

26:24.550 --> 26:25.150
是什么呢

26:25.150 --> 26:27.150
它是要求每一次请求啊

26:27.650 --> 26:29.450
我不认那个cookie那个字段了

26:29.450 --> 26:31.550
我认什么在请求头里面的字段

26:31.950 --> 26:32.450
啊

26:32.450 --> 26:33.150
什么意思呢

26:34.250 --> 26:34.850
就是说

26:35.750 --> 26:36.750
前面都一样啊

26:36.750 --> 26:37.850
前面是完全一样的

26:37.850 --> 26:38.750
登陆成功

26:38.750 --> 26:39.450
完全一样

26:39.550 --> 26:41.150
但是后续请求的时候呢

26:41.150 --> 26:42.550
你必须要给我这种请求

26:42.550 --> 26:43.750
啊就是请求的时候

26:44.550 --> 26:45.650
要不然的请求头呢

26:45.650 --> 26:47.150
比方说带一个authorization

26:47.550 --> 26:47.750
对吧

26:47.750 --> 26:49.250
有点像那个getwt啊

26:49.250 --> 26:50.650
反正放到一个请求头里面

26:50.650 --> 26:51.450
但getwt啊

26:51.450 --> 26:52.050
我是之前说过

26:52.050 --> 26:53.950
他放到任何的地方都可以啊

26:54.250 --> 26:55.750
然后我们放到这个authorization里面

26:55.750 --> 26:56.550
放到token

26:56.550 --> 26:57.550
那么这种方式

26:57.550 --> 26:58.550
那么服气认啥

26:58.550 --> 26:59.350
他不认cookie

26:59.350 --> 27:00.150
他只认这个

27:00.650 --> 27:01.950
他只认请求头

27:01.950 --> 27:03.150
这也是一种方式

27:03.750 --> 27:04.150
啊

27:04.150 --> 27:04.750
这种方式呢

27:04.750 --> 27:06.250
会导致我们之前也演示过

27:06.250 --> 27:08.050
会导致客户上要多写点代码

27:08.150 --> 27:08.450
但是呢

27:08.450 --> 27:09.850
这种方式也是可以的

27:09.850 --> 27:10.850
为什么可以呢

27:10.850 --> 27:11.850
因为我们

27:12.050 --> 27:14.550
这边的自动请求发送过去的时候啊

27:14.550 --> 27:15.850
就这种请求发送过去的时候

27:15.850 --> 27:17.150
是浏览器自动给我们组装

27:17.150 --> 27:17.750
小举头了

27:17.750 --> 27:19.150
他不会给我们组装这个

27:19.650 --> 27:21.050
他不会给我们组装这个东西

27:21.450 --> 27:22.150
没啥意思吧

27:22.350 --> 27:23.950
是不是可以把一个token放到这

27:24.450 --> 27:24.750
甚至呢

27:24.750 --> 27:26.350
你还可以对他进行一些哈西编码

27:26.350 --> 27:27.350
比方说fnd5编码

27:27.350 --> 27:28.250
再发过去

27:28.550 --> 27:29.350
等等都可以

27:30.150 --> 27:30.250
好

27:30.250 --> 27:30.850
这是这个

27:31.650 --> 27:31.750
好

27:31.750 --> 27:32.650
还有一种方式呢

27:32.650 --> 27:33.950
是使用验证码

27:34.750 --> 27:35.250
哈

27:35.650 --> 27:36.750
就是你每一次

27:36.750 --> 27:38.050
反而是要更改数据

27:38.050 --> 27:39.350
要增加数据

27:39.350 --> 27:40.150
要删除数据

27:40.150 --> 27:41.350
都给我写验证码

27:41.650 --> 27:43.150
这种情况是非常厉害的

27:43.650 --> 27:44.950
基本上是没法伪造的

27:45.350 --> 27:46.350
那么这种方式呢

27:46.350 --> 27:47.950
就只不过要把正常的用户要逼通

27:48.050 --> 27:50.050
正常用户每一个操作都要写验证码

27:50.650 --> 27:51.850
像我们之前都试用了

27:52.050 --> 27:53.950
连续几次提交过后才写验证码

27:53.950 --> 27:54.350
对吧

27:54.650 --> 27:55.550
这是关于这个

27:56.450 --> 27:56.550
好

27:56.550 --> 27:57.050
下一个

27:57.650 --> 27:58.650
表达随机数

27:59.250 --> 27:59.950
这种做法呢

27:59.950 --> 28:02.350
也是比较以前比较常见啊

28:02.350 --> 28:03.350
现在也很少用了

28:03.350 --> 28:05.050
因为它是基于服务端圈上的

28:05.450 --> 28:06.150
他什么回上的

28:06.150 --> 28:06.750
他这样子

28:08.450 --> 28:08.950
你看啊

28:08.950 --> 28:10.550
我们来看一下流程

28:11.150 --> 28:11.850
他这样子的

28:13.860 --> 28:15.460
就是你登录成功过后

28:15.460 --> 28:17.460
我当你登录还是放到pocket里边

28:17.460 --> 28:19.960
我也没有以前的老伴们的浏览器里边

28:19.960 --> 28:21.160
如果说都是新版本的话

28:21.160 --> 28:22.660
第做第一个就够了啊

28:22.760 --> 28:24.860
老伴们的浏览器里边没有这个semi sight

28:25.660 --> 28:26.460
那么怎么办呢

28:26.460 --> 28:27.760
我们以前就这样来做

28:29.060 --> 28:31.260
客户端请求服务器

28:32.260 --> 28:33.460
请求是不到了服务器了

28:33.760 --> 28:35.360
请求服务器请求哪个页面呢

28:35.960 --> 28:38.560
请求添加学生的页面

28:40.460 --> 28:41.360
那么这个时候

28:42.360 --> 28:43.560
他是不是把cookie传过去了

28:43.960 --> 28:44.560
传递

28:45.160 --> 28:45.760
cookie

28:46.160 --> 28:47.160
好那么这个时候

28:47.260 --> 28:50.560
哎服务器看有cookie表示用户登录成功了

28:50.960 --> 28:52.460
登录成功过后呢

28:52.460 --> 28:54.760
我服务器是不是要给他一个页面

28:55.160 --> 28:56.260
给予一个页面

28:56.460 --> 28:59.060
但是呢我在给页面之前以前是服务端圈的

28:59.060 --> 29:00.960
不像现在就给的一个固定的页面

29:00.960 --> 29:03.160
然后呢样介石的客户端进行圈的

29:03.460 --> 29:05.560
以前是在服务器给你渲染好的页面

29:05.560 --> 29:06.560
然后一起发给你

29:06.960 --> 29:07.660
是这个意思

29:07.960 --> 29:10.560
好服务器拿到这个cookie过后发现你登录了

29:10.760 --> 29:11.660
登录了过后呢

29:11.660 --> 29:13.760
我就先这样做服务器

29:14.460 --> 29:15.060
第一步

29:15.560 --> 29:17.260
生成一个水积数

29:18.460 --> 29:19.160
放到

29:20.260 --> 29:20.960
谁行中

29:23.360 --> 29:24.360
放到一个谁行中

29:25.760 --> 29:26.560
好第二步

29:27.160 --> 29:27.960
然后呢

29:28.660 --> 29:29.460
生成

29:30.360 --> 29:31.460
页面时

29:32.460 --> 29:33.760
表单中

29:33.760 --> 29:35.260
因为我要他要添加角色吗

29:35.260 --> 29:36.760
我是不知道给他一个表单页面

29:36.760 --> 29:38.460
对吧我在表单中

29:38.460 --> 29:41.560
加入一个隐藏的表单语

29:41.560 --> 29:43.360
就是不影响用户的阅读

29:43.360 --> 29:44.860
不影响用户看着表单

29:45.060 --> 29:46.560
我给他加两个表单语

29:46.560 --> 29:47.660
相当于是这种型

29:47.660 --> 29:48.660
input

29:50.060 --> 29:52.260
input type等于

29:53.060 --> 29:55.260
这边v6值呢就只应该写上

29:55.660 --> 29:56.460
v6值等于什么呢

29:56.460 --> 29:57.860
我们比方说有模板引擎

29:57.860 --> 29:59.760
用那个什么1.s的模板引擎

29:59.760 --> 30:00.960
等于什么谁行

30:01.560 --> 30:02.960
那说某一个气质

30:03.360 --> 30:04.360
那就这么个意思

30:05.960 --> 30:06.560
一样吧

30:07.160 --> 30:08.160
好我就给他表单

30:08.160 --> 30:09.560
你能跟他增加这么一个东西

30:09.960 --> 30:11.660
那么用户那边得到了页面中

30:11.660 --> 30:12.460
看到一个表单

30:12.460 --> 30:14.360
哎添加一个学生学生的名字

30:14.360 --> 30:15.060
学生的账号

30:15.060 --> 30:17.960
学生的那个年龄姓别等等等等

30:17.960 --> 30:19.960
他表达里面是不是包含了这个东西

30:20.460 --> 30:22.160
一起给发送给客户端了

30:22.360 --> 30:23.560
然后呢客户端那边

30:24.560 --> 30:26.960
填写好信息后

30:27.460 --> 30:28.660
提销表单

30:29.260 --> 30:30.460
提销表达的时候

30:30.560 --> 30:32.360
是不是会自动

30:32.460 --> 30:34.260
因为我们这里有个隐藏的表单语嘛

30:34.260 --> 30:34.460
对吧

30:34.460 --> 30:35.360
我们给他个name

30:35.360 --> 30:36.060
比方说

30:38.060 --> 30:38.660
token嘛

30:39.060 --> 30:39.660
随便吧

30:39.760 --> 30:40.660
或者是哈西

30:43.080 --> 30:46.080
会自动提交隐藏的

30:46.480 --> 30:47.980
啊水积数

30:48.480 --> 30:48.780
对吧

30:48.780 --> 30:50.280
这个水积数是隐藏的表达里边了

30:50.280 --> 30:52.280
他会自动提交这个是隐藏的水积数

30:52.280 --> 30:53.780
他也是一个语嘛表单语

30:54.380 --> 30:56.180
好提到服务器过后服务器

30:56.780 --> 30:59.080
把水积数拿到

30:59.880 --> 31:01.080
啊服务器

31:01.080 --> 31:02.180
服务器过后又干完了

31:02.280 --> 31:04.680
先拿cookie啊拿到cookie

31:05.880 --> 31:08.780
判断是否登录登录过

31:08.780 --> 31:10.480
因为他每一次都因为这是adb

31:10.480 --> 31:11.780
请求无写无状态的

31:11.780 --> 31:13.180
所以说服务器每一次都要判断用户

31:13.180 --> 31:14.380
你没有登录过好

31:14.380 --> 31:15.380
如果说有登录过

31:15.480 --> 31:17.680
然后呢对比隐藏

31:17.880 --> 31:20.480
对比提交过来的水积数

31:20.780 --> 31:24.380
和之前的水积数是否一致

31:24.580 --> 31:26.080
如果说一次我就允许你操作

31:26.080 --> 31:27.280
不一致说明有问题

31:27.780 --> 31:30.180
等管是一致我操正常操作的

31:30.180 --> 31:32.080
还是你有问题正常操作的

31:32.180 --> 31:33.180
我都要终于建设

31:33.880 --> 31:34.780
清除

31:35.980 --> 31:37.580
因为这个水积数只能用一次

31:37.580 --> 31:41.060
清除掉水积数

31:41.360 --> 31:42.260
清除掉谁写

31:43.260 --> 31:44.160
中的水积数

31:44.760 --> 31:45.360
重新生产

31:45.360 --> 31:46.960
就是下一次的表单我要重新生产

31:46.960 --> 31:47.960
之前的水积数不能用了

31:47.960 --> 31:48.760
只能用一次

31:49.460 --> 31:50.460
好这是这个流程

31:51.160 --> 31:52.660
那么你想想这个流程下面

31:53.060 --> 31:54.060
正常的情况有没有问题

31:54.060 --> 31:54.760
没问题啊

31:54.760 --> 31:57.160
对吧我请求表达表达添加学生的表达

31:57.160 --> 31:58.460
因为我现在不是服务器宣的

31:58.460 --> 31:59.460
我就这里说一下

31:59.960 --> 32:01.460
我请求请求服务器

32:01.460 --> 32:03.960
我给了我就是请求服务器把估计传过去

32:03.960 --> 32:05.060
服务器看你真正成功了

32:05.060 --> 32:06.360
OK我给你这个页面

32:06.360 --> 32:07.360
其他还没有添加学生

32:07.360 --> 32:08.460
我只是给你这个页面

32:08.660 --> 32:10.060
我然后呢把这个sation

32:10.060 --> 32:11.560
升级能水积数放到sation里边

32:11.560 --> 32:12.360
然后呢生成页面

32:12.360 --> 32:13.960
页面中加上这么一个隐藏的

32:13.960 --> 32:15.460
那么客户端是不是拿到一个页面

32:15.460 --> 32:16.560
页面中是不是有个表达

32:16.560 --> 32:18.460
表达里面是不是有个隐藏的水积数

32:18.460 --> 32:19.660
对吧这服务器给我们的

32:19.960 --> 32:21.460
然后呢添加好信息过后提交表达

32:21.460 --> 32:23.460
那么就会自动提交隐藏的水积数

32:23.460 --> 32:24.560
服务器呢拿到cookie

32:25.060 --> 32:26.060
知道你登不过了

32:26.060 --> 32:27.460
然后再对比水积数

32:27.460 --> 32:29.460
一致那么就可以操作

32:29.460 --> 32:30.260
不管怎么情况

32:30.260 --> 32:31.660
这个水积数只能用一次

32:31.660 --> 32:32.860
下一次就不能再用了

32:32.860 --> 32:34.060
就是这么一种流程

32:34.060 --> 32:35.060
这种流程呢

32:35.560 --> 32:36.560
能伪造吗

32:36.960 --> 32:38.560
这种流程就没法伪造了

32:39.560 --> 32:40.660
为什么没法伪造呢

32:40.660 --> 32:41.660
你看一下我咋伪造呢

32:41.660 --> 32:42.660
你告诉我咋伪造

32:42.760 --> 32:43.460
我在这里呢

32:43.460 --> 32:44.160
生成一个表达

32:44.160 --> 32:44.960
这个表达那边

32:44.960 --> 32:46.360
我要写水积数我咋写

32:47.060 --> 32:47.860
我在这里要

32:47.860 --> 32:49.160
因为我不写水积数的话

32:49.160 --> 32:50.260
不写水积数的话

32:50.260 --> 32:51.660
我这个cookie能过去

32:51.660 --> 32:52.160
对吧

32:52.160 --> 32:52.760
你看这里

32:52.760 --> 32:53.660
cookie是能过去

32:53.660 --> 32:54.660
但是水积数过不去

32:55.260 --> 32:56.660
服务器那边保持那个水积数

32:56.660 --> 32:57.460
要保持一次的

32:57.460 --> 32:58.060
我过不去啊

32:58.060 --> 32:58.660
水积数

32:58.960 --> 32:59.860
所以说这里呢

32:59.860 --> 33:00.460
我就

33:00.860 --> 33:02.160
没有水积数是肯定不行的

33:02.160 --> 33:03.460
那我就他肯定不认的

33:03.460 --> 33:04.660
那我肯定要加一个水积数

33:04.660 --> 33:05.860
比方说我知道哪服务器

33:05.860 --> 33:06.960
给我的水积数的名字呢

33:06.960 --> 33:07.660
叫做token

33:07.660 --> 33:08.660
叫做什么呢

33:08.660 --> 33:09.660
哈希对吧

33:09.860 --> 33:11.460
那么返留着我写啥呢

33:12.660 --> 33:14.160
这水积数是水积生成的

33:14.160 --> 33:15.960
我也不知道个水积的值是多少

33:15.960 --> 33:17.060
每一次都是水积的

33:17.460 --> 33:17.960
对吧

33:17.960 --> 33:19.060
我不知道这个值是多少

33:19.060 --> 33:20.060
我是不是写不了了

33:20.360 --> 33:20.960
对不对

33:21.060 --> 33:22.560
那么就遇到这么一个情况

33:22.560 --> 33:23.360
所以说

33:23.460 --> 33:23.960
这种情况呢

33:23.960 --> 33:24.860
也可以防止

33:25.760 --> 33:26.660
也可以防止

33:27.260 --> 33:27.360
好

33:27.360 --> 33:29.060
这是这种情况

33:29.860 --> 33:30.260
好

33:30.960 --> 33:32.160
最后一种的就是我们现在的

33:32.160 --> 33:33.760
也是比较非常非常常见的

33:33.760 --> 33:34.860
叫做二次验证

33:35.260 --> 33:36.060
首先二次验证的

33:36.060 --> 33:37.260
就做一些关键操作

33:37.260 --> 33:38.160
比方说转账

33:39.160 --> 33:40.560
比方说查询那个

33:41.060 --> 33:41.860
通话记录

33:41.860 --> 33:43.560
一些关键操作的时候

33:43.760 --> 33:44.960
我要进行二次验证

33:45.260 --> 33:47.360
比方说发送一个验证码到手机

33:47.660 --> 33:49.060
或者是一个到邮箱

33:49.360 --> 33:50.460
或者是用指纹

33:50.460 --> 33:52.060
总资料进行二次验证

33:52.160 --> 33:53.060
那么这个时候呢

33:53.060 --> 33:53.960
你就跑不了了

33:53.960 --> 33:54.560
这个时候呢

33:54.560 --> 33:56.360
基本上用户一下就知道了

33:57.160 --> 33:58.760
你我访问你这个网站

33:58.760 --> 34:00.060
为什么会让我输入支付

34:00.060 --> 34:00.860
多少密码呢

34:01.360 --> 34:02.060
他一下就知道了

34:02.060 --> 34:03.360
他一下就明白过来了

34:04.060 --> 34:05.060
所以说二次验证呢

34:05.060 --> 34:06.660
也是一个非常非常好的方式

34:06.860 --> 34:08.060
在真实的开发里边

34:08.160 --> 34:08.860
实际的开发中

34:08.860 --> 34:09.860
我们目前

34:10.860 --> 34:11.860
一般用的是什么呢

34:11.860 --> 34:12.560
一般用这个

34:14.060 --> 34:14.760
或者是

34:15.860 --> 34:16.360
这个

34:16.860 --> 34:17.660
或者是这个

34:18.960 --> 34:20.360
这种情况已经很少用了

34:21.160 --> 34:22.060
或者和这个

34:22.260 --> 34:23.560
有的时候可以配合起来用

34:24.660 --> 34:25.460
像那个验证嘛

34:25.460 --> 34:27.260
这东西要用不逼风的

34:27.360 --> 34:28.160
那个表达水技术呢

34:28.160 --> 34:29.760
因为是一般是服务器渲染

34:29.760 --> 34:30.760
现在服务器渲染的

34:31.160 --> 34:31.960
都比较少了

34:32.560 --> 34:33.760
我们都是一般都是在科普端

34:33.760 --> 34:35.260
前后端分离的方式来渲染

34:35.460 --> 34:36.360
说这两种方式呢

34:36.360 --> 34:37.660
用的要少一些了

34:38.960 --> 34:39.360
你来了

34:39.360 --> 34:41.260
这是我们的 CSRF 攻击

34:41.460 --> 34:42.660
我们如何来去防御

34:43.060 --> 34:43.360
好了

34:43.360 --> 34:44.260
其他都没啥了

