WEBVTT

00:00.690 --> 00:06.130
这些扩展课程 也有这个东西了解一下啊 知道有这么回事就行了

00:07.010 --> 00:14.090
就是漏的里边呢耶稣魔幻化 从前年吧 现在是2020年从前年一

00:14.410 --> 00:23.090
2018年的时候呢 2018年10月份的样子啊 漏的就已经支持了这个耶稣魔幻化

00:23.690 --> 00:35.090
不过呢 到现在啊 都还不太成熟 说到目前呢 仍然是处于试验阶段 那么处于试验阶段的话 以后呢 就可能会有

00:36.250 --> 00:43.370
比较大的变动啊 说不好 所以说呢 大家了解一下 目前有这么回事就行了啊 关注着他的变化吧

00:43.890 --> 00:48.490
因为就算我觉得啊 就算他能够正式推出耶稣魔幻化标准

00:49.010 --> 00:53.650
嗯 很多的第三方库呢 可能还是用的是原来的老人用法

00:54.330 --> 00:56.210
所以说 这会导致呢

00:57.250 --> 01:10.690
就算要有这些第三方库要更新啊 他也需要一段时间啊 嗯 因此呢 大家呢 还不用不用太着急啊 现在呢 毕竟还在实验阶段 还没有正式推出 推出了过程还要等一段时间 要第三方库跟上

01:11.650 --> 01:16.890
嗯 我们的漏德里面呢 他是有一个问题就是 嗯 这问题呢 现在还不好解决

01:17.370 --> 01:21.490
就是要么呢 你的魔幻要么就是common.js 要么就是es

01:22.090 --> 01:27.130
你不能说我一个魔幻里面common.js和es混杂 这样子是不行的啊

01:27.690 --> 01:35.450
因为漏德里还考虑很多问题 因为我们知道es这个魔幻化标准呢 他在v8引擎里边 就是新版本的v8引擎里边

01:36.010 --> 01:41.650
好像在2017年吧 v8引擎就已经支持了es魔幻化的解析

01:42.570 --> 01:50.930
但是呢 es v8引擎虽然支持 但是漏德他就遇到一个麻烦就是说 因为他以前支持的是common.js 他不可能不可能去掉

01:51.650 --> 01:55.050
去掉的话呢 很多第三方库就不能用了 他说他必须要兼容

01:55.530 --> 02:00.370
他要做兼容的话就遇到一个问题 我们的common.js呢 他是要在一个函数环境里面运行

02:00.770 --> 02:07.650
对吧 所以一个函数环境 函数环境里边也可以用各种各种各样的东西 对吧 一些module啊或者module

02:08.010 --> 02:12.050
export啊 对不对啊 像这么这么一些东西的都可以在魔幻化里面使用

02:12.610 --> 02:20.050
那么 编程了es过通了es他不是一个函数环境啊 v8引擎根本就不会把它解析成为一个函数环境

02:20.570 --> 02:24.930
那么他们之间就存在着巨大的差异 这个差异呢 目前不是很好消除

02:25.490 --> 02:31.210
那么v8怎么办的呢 v8啊 不管那么多啊 管那些的是怎么带嘛 最终转换成一个函数环境

02:32.130 --> 02:36.610
对吧 最终都会转换成一个函数环境 所以说那是跟v8不太一样 因为load了

02:37.330 --> 02:41.250
脱离v8的他必须要做这种原生的知识就很麻烦这个问题

02:41.850 --> 02:45.010
所以说目前呢 我不知道他以后怎么去解决啊 目前呢

02:45.890 --> 02:51.170
你肯定是要么用common.js要么用es不能混账用的啊 就同一个模块也不是不能混账用的

02:51.890 --> 02:54.730
好 我们一个个说啊 实际上common.js的话 那个很简单

02:55.050 --> 03:00.370
就默认情况下呢 全都是common.js 就是你啥都不动 跟以前一样的解法 那全都是common.js

03:00.930 --> 03:06.130
因此目前load了还是推荐使用common.js 至少我推荐你使用common.js

03:06.930 --> 03:10.170
以后呢 怎么想我也说不好啊 不知他怎么去解决这个问题

03:10.690 --> 03:12.850
比如说他要做那个就是他必须要兼容

03:13.650 --> 03:17.490
必须要那两个字之间能够互操作啊 这个东西呢 我看他去怎么去解决

03:18.050 --> 03:19.570
好 另外一个呢 就是一也是啊

03:19.890 --> 03:23.090
就是文件的后维名呢 为

03:23.970 --> 03:27.410
就是我们什么情况下会变成es模块呢 一个一个模块

03:27.810 --> 03:31.810
他两种情况都可以 一个是呢 文件后维名为mjs

03:32.770 --> 03:35.410
好 另一个呢 就是在pacti 你他最近的

03:35.970 --> 03:39.570
这个模块最近的pacti.json里边呢 把它types呢 设为module

03:40.210 --> 03:43.010
这两种方式呢 都可以把它变成一个es模块

03:43.410 --> 03:46.930
比方说吧 我们这个index了ges对吧 我们把它变成es模块

03:47.250 --> 03:51.250
两种方式 第一种方式呢 是加上一个m啊 把它变成个m.json

03:51.810 --> 03:54.690
另一种方式呢 是在pacti.json里边呢 给他加一个type

03:55.330 --> 03:57.650
把它设为module 对吧 两种方式都可以

03:58.210 --> 04:02.210
好 当然这样子一加的话 整个工程里边全都是es模块了 就不能写common.js了

04:02.370 --> 04:06.290
对吧 如果说你这样子写的话 只是某一个模块 某一个模块

04:06.530 --> 04:08.050
能够使用es

04:08.610 --> 04:09.810
这样的意思吧

04:09.810 --> 04:12.690
OK 好 那么这是关于这样子的一个

04:13.650 --> 04:14.050
情况

04:14.930 --> 04:17.410
然后呢 接下来我们来说一下 它怎么来运行了

04:17.730 --> 04:20.050
就是我们目前呢 要运行es模块

04:20.610 --> 04:23.810
那么你必须要在运行的时候呢 要加上这么一个标记

04:24.210 --> 04:27.810
这个叫做experimental 而表示实验性质的模块化

04:28.370 --> 04:31.010
好 加上这个标记啊 就这么运行的 我们把它

04:31.330 --> 04:33.010
在这个 在这里边加个脚奔吧

04:33.890 --> 04:34.610
叫做start

04:36.050 --> 04:37.410
啊 就是load

04:37.890 --> 04:39.250
啊 加上这个标记

04:39.490 --> 04:40.850
然后呢 index

04:40.850 --> 04:43.250
那么这个是要写全名啊 要写全名的

04:43.970 --> 04:44.290
OK

04:45.090 --> 04:46.850
好 那么就是这样子来运行模块

04:47.330 --> 04:48.050
没了意思吧

04:48.050 --> 04:49.570
那当然现在运行的 我们来看一下啊

04:50.050 --> 04:51.650
嗯 npm start

04:53.010 --> 04:54.130
是没问题对吧

04:54.130 --> 04:56.770
那么它这个时候呢 有一个警告啊

04:56.770 --> 05:00.770
就说这个模块呢 目前就这种方式呢 目前是实验性质的

05:00.770 --> 05:02.130
啊 它会出现那么一个警告

05:02.770 --> 05:03.970
好 咱们来看一下啊

05:03.970 --> 05:05.890
如果说要用es的话 那怎么来用

05:05.890 --> 05:07.090
比方说我们新建个文件

05:07.890 --> 05:09.890
给它取名为adm.js

05:09.890 --> 05:12.690
那么这个东西呢也是一个es6的模块化

05:12.690 --> 05:16.050
好 咱们导出export导出default

05:16.770 --> 05:18.850
比方说导出 随便导出一个吧 导出一个5

05:19.890 --> 05:21.810
然后呢 我们再用export导出一个

05:23.410 --> 05:24.530
a等于1

05:25.250 --> 05:27.010
好 咱们看一下啊

05:27.010 --> 05:28.930
那么这边呢 我们用这种方式来导入

05:29.970 --> 05:31.090
obj from

05:32.130 --> 05:32.850
第二鞋杠

05:32.850 --> 05:35.410
哎 好 我们输出一下这个obj

05:35.490 --> 05:37.490
你看一下 这个就是一个es6的模块化

05:37.490 --> 05:40.210
对吧 那么它的原理呢 跟es6的模块化一样的

05:40.210 --> 05:42.690
因为本身也是v8引擎在处理嘛

05:43.970 --> 05:45.570
来 爆缩了啊

05:45.570 --> 05:46.130
到什么了

05:46.930 --> 05:50.290
嗯 无法找到这个模块

05:50.290 --> 05:52.050
啊 我们这里呢 把后裙饼盖加上

05:56.110 --> 05:56.590
再运行

05:57.150 --> 05:59.470
OK 那现在没问题了啊 要加上后裙饼

05:59.470 --> 06:01.710
那么这里呢 就是一个adm1d4x5

06:01.710 --> 06:03.150
对吧 那么就处理好了

06:04.030 --> 06:04.830
没了意思吧

06:04.830 --> 06:06.110
好 那么现在呢

06:06.110 --> 06:07.230
这个模块就加载出来了

06:07.310 --> 06:09.150
跟我们以前那个es6的模块呢

06:09.150 --> 06:10.590
其实是一样的啊

06:10.590 --> 06:11.310
其实是一样的

06:11.310 --> 06:12.910
它也是v8引擎解析的

06:14.430 --> 06:16.990
那么这个地方 如果说我们这个adm

06:16.990 --> 06:18.190
这个air这个东西

06:18.750 --> 06:20.030
如果说它那个

06:20.030 --> 06:22.590
它是用e它是用那个commonjax导出的

06:22.590 --> 06:23.150
不怎么样呢

06:23.790 --> 06:24.430
行不行呢

06:24.430 --> 06:25.790
啊 咱们来试一下啊

06:25.790 --> 06:27.630
我们再给它加一个commonjax导出

06:28.270 --> 06:28.750
export

06:29.470 --> 06:30.670
等于实物

06:31.470 --> 06:32.510
看一下这样子行不行

06:33.150 --> 06:33.790
它认不认

06:34.510 --> 06:35.390
啊 我们在这里运行

06:36.270 --> 06:37.710
那么这个时候就爆错了啊

06:37.710 --> 06:39.070
那么你看一下这个东西

06:39.070 --> 06:39.630
adder

06:39.630 --> 06:40.830
这个模块里边你看

06:40.830 --> 06:41.790
它就它说什么

06:41.790 --> 06:43.470
它说marge is not defend

06:43.470 --> 06:44.510
它marge不存在

06:45.150 --> 06:46.030
说明了啥呀

06:46.030 --> 06:48.990
说明了它把它看成是一个es的模块

06:48.990 --> 06:50.510
而es的模块的话

06:50.510 --> 06:52.590
它不是放到一个函数环境里边运行的

06:52.590 --> 06:52.990
对吧

06:52.990 --> 06:54.750
它是在引擎内部搞定的

06:54.750 --> 06:55.630
来隔离的

06:55.630 --> 06:57.550
那么它不在函数以环境里边运行

06:57.550 --> 06:58.430
那么这个东西marge

06:58.430 --> 07:00.830
它不会通过参数给你注入进来

07:00.830 --> 07:02.510
所以说你用不了这个marge

07:02.510 --> 07:04.430
这就是为什么你不能去混用

07:04.590 --> 07:05.230
就这个原因

07:05.870 --> 07:06.750
明白了意思吧

07:06.750 --> 07:07.150
好 OK

07:08.830 --> 07:10.190
好那么如果说这边是

07:10.830 --> 07:12.750
那如果说这边不是es6

07:12.750 --> 07:15.710
就是一个普通的模块

07:15.710 --> 07:17.710
那这个东西怎么能互操作呢

07:18.270 --> 07:19.150
我们看一下

07:19.150 --> 07:19.870
get

07:20.830 --> 07:21.310
那么现在呢

07:21.310 --> 07:23.390
我们把这个加上

07:23.390 --> 07:24.030
好 保存

07:24.030 --> 07:25.550
我们看一下这个东西能不能互操作

07:27.950 --> 07:28.750
运行 start

07:29.630 --> 07:30.350
你会看到了

07:30.350 --> 07:30.910
这个地方呢

07:30.910 --> 07:32.750
它也能够进行互操作

07:32.750 --> 07:34.910
它把marge.export导出

07:34.990 --> 07:35.710
作为什么

07:36.270 --> 07:37.950
作为那个default的导出

07:37.950 --> 07:39.150
作为default

07:39.150 --> 07:40.670
那么如果说你这里再加上

07:42.030 --> 07:42.750
那个就是

07:44.110 --> 07:45.390
我们这样子吧

07:45.390 --> 07:46.670
marge这样子

07:46.670 --> 07:48.510
我们在这里的导出

07:49.390 --> 07:51.550
用这种方式来导出一些东西

07:53.470 --> 07:53.630
a

07:55.550 --> 07:56.110
export

07:56.830 --> 07:56.990
b

07:58.350 --> 07:59.150
好 咱们来看一下

07:59.870 --> 08:01.550
如果说你用这种方式来导出的话

08:01.550 --> 08:02.990
那么你得到了模块呢

08:02.990 --> 08:03.790
它是这样子

08:03.870 --> 08:05.790
它也是把它放到default里边

08:06.190 --> 08:07.550
把它放到default里边

08:07.550 --> 08:08.510
那么这里呢

08:08.510 --> 08:09.150
是

08:09.150 --> 08:09.870
就这个东西

08:09.870 --> 08:11.310
也就是我们这里边导入的时候

08:11.310 --> 08:11.950
要怎么导出呢

08:11.950 --> 08:13.150
要用这种方式来导入

08:13.150 --> 08:13.550
对吧

08:13.550 --> 08:14.750
当然你在这里呢

08:14.750 --> 08:15.230
用那种

08:15.870 --> 08:17.310
就是居民导入也可以

08:17.310 --> 08:18.430
比较ab

08:18.430 --> 08:19.230
这样子也可以

08:19.230 --> 08:19.630
对吧

08:19.630 --> 08:20.110
也可以

08:20.110 --> 08:21.710
那么相当于是ab导入

08:22.510 --> 08:23.150
这样子也可以

08:23.150 --> 08:23.710
我们来看一下

08:26.990 --> 08:27.550
哦 不对不对

08:27.550 --> 08:28.350
哦 这样子不行了

08:28.350 --> 08:29.150
这样子不行了

08:29.150 --> 08:30.510
因为它放到default里边的

08:30.510 --> 08:31.310
所以说呢

08:31.310 --> 08:32.910
所以说这里还有一点糟

08:32.990 --> 08:34.110
还真的还有点糟

08:34.110 --> 08:35.150
你要用这种方式

08:35.150 --> 08:36.590
只能用默认的方式来导入

08:37.790 --> 08:39.150
只能用默认的方式来导入

08:39.150 --> 08:40.270
默认的方式就是

08:40.270 --> 08:41.550
把这个放到default里边去了

08:42.030 --> 08:42.510
对吧

08:42.510 --> 08:43.550
这是它默认的方式

08:43.550 --> 08:44.590
所以说这里边呢

08:44.590 --> 08:45.390
要互操作呢

08:45.390 --> 08:47.790
还是有很多绕的地方

08:47.790 --> 08:48.350
不太

08:48.350 --> 08:48.990
现在目前呢

08:48.990 --> 08:50.990
互操作肯定还是有很多的问题

08:50.990 --> 08:51.470
另外呢

08:51.470 --> 08:52.270
如果说

08:52.270 --> 08:53.390
如果说这个模块呢

08:53.390 --> 08:55.070
它是一个es6

08:55.790 --> 08:57.470
我们又把它变成es6

08:57.470 --> 08:59.470
它是一个es6的导出

08:59.470 --> 08:59.950
但是呢

08:59.950 --> 09:00.430
那边呢

09:00.430 --> 09:01.710
是一个comment介石

09:01.710 --> 09:02.510
那这样子行不行呢

09:02.590 --> 09:03.470
这样子就不行了

09:04.030 --> 09:05.150
这样子就不行了

09:05.150 --> 09:05.790
你看

09:05.790 --> 09:06.830
adder mgs

09:06.830 --> 09:07.790
因为这个东西呢

09:07.790 --> 09:08.590
以后require

09:08.590 --> 09:10.910
它一定会把它放到一个函数环境里边

09:10.910 --> 09:11.550
这个东西呢

09:11.550 --> 09:13.070
它不能是函数环境

09:13.070 --> 09:13.470
对吧

09:13.470 --> 09:14.350
不能是函数环境

09:14.350 --> 09:15.630
那就肯定要出问题

09:15.630 --> 09:15.790
好

09:15.790 --> 09:16.430
咱们来试一下

09:18.910 --> 09:19.790
start

09:19.790 --> 09:21.070
你看是不是要出问题

09:21.070 --> 09:21.390
对吧

09:21.390 --> 09:22.590
而且require is not defined

09:22.590 --> 09:23.310
因为说呢

09:23.310 --> 09:25.070
因为我这个是comment介石嘛

09:25.070 --> 09:26.670
因为我们这是es6模块

09:26.670 --> 09:28.110
所以把这个东西去掉

09:28.110 --> 09:29.070
去掉过后我们再来看吧

09:29.710 --> 09:29.870
好

09:29.870 --> 09:30.670
start的时候呢

09:30.670 --> 09:31.630
把它改一下

09:31.710 --> 09:32.590
改成介石

09:35.760 --> 09:36.160
运行

09:36.880 --> 09:37.040
好

09:37.040 --> 09:38.080
是不是还是要出问题

09:38.080 --> 09:38.400
对吧

09:38.400 --> 09:39.600
还是要出问题

09:39.600 --> 09:41.040
所以说这个东西呢

09:41.040 --> 09:41.680
互操作呢

09:41.680 --> 09:43.040
目前肯定要出很多问题了

09:43.040 --> 09:45.200
因为他们的实现原理都完全不一样

09:45.200 --> 09:45.520
因此呢

09:45.520 --> 09:46.080
我这里呢

09:46.080 --> 09:47.760
不就不告诉大家就是这里

09:47.760 --> 09:49.680
不说太多关于它的互操作

09:49.680 --> 09:50.800
只是告诉大家呢

09:50.800 --> 09:52.080
目前就目前

09:52.080 --> 09:54.560
如果说你一定要用这种方式的话

09:54.560 --> 09:55.440
全部都要用

09:56.080 --> 09:57.600
要么全部都用es

09:57.600 --> 09:59.920
要么的全部都用comment介石

09:59.920 --> 10:00.320
但是呢

10:00.320 --> 10:01.520
第三方模块的话呢

10:01.520 --> 10:02.800
它现在目前呢

10:02.880 --> 10:03.840
很多第三方模块

10:03.840 --> 10:05.040
都不太支持这种方式

10:05.760 --> 10:06.800
所以和这个东西呢

10:06.800 --> 10:07.440
目前呢

10:07.440 --> 10:10.000
还不太适合在真实的开发里面去应用

10:10.640 --> 10:12.080
将来我只是给大家说一下

10:12.080 --> 10:13.360
它目前打算做这个

10:13.360 --> 10:14.800
打算解决的问题了

10:14.800 --> 10:15.760
将来会怎么样

10:15.760 --> 10:16.640
我也不知道

10:16.640 --> 10:17.360
因为目前呢

10:17.360 --> 10:19.280
确实要解决这个问题的话

10:19.280 --> 10:20.240
最好了就是什么呢

10:20.240 --> 10:21.040
最好了就是那个

10:21.680 --> 10:22.240
vpeg

10:22.240 --> 10:23.680
vpeg可以轻松解决

10:23.680 --> 10:24.080
对吧

10:24.080 --> 10:25.840
它把所有的东西变成函数

10:25.840 --> 10:26.480
函数的环境

10:27.360 --> 10:27.920
另外呢

10:27.920 --> 10:29.680
就是还有个最后一个东西说一下

10:30.480 --> 10:31.280
把它变回来

10:33.550 --> 10:34.030
变回来

10:34.590 --> 10:35.150
这个东西呢

10:35.150 --> 10:36.030
就是说

10:36.030 --> 10:36.830
如果呢

10:36.830 --> 10:37.310
这里

10:37.310 --> 10:38.030
哎呀

10:38.030 --> 10:39.550
这要用那个comment介石

10:40.590 --> 10:41.470
要用es

10:43.230 --> 10:44.190
a叫m介石

10:45.870 --> 10:46.590
就是说这里呢

10:46.590 --> 10:47.070
导入呢

10:47.070 --> 10:47.550
它还用

10:47.550 --> 10:48.910
还可以用这种方式来导入

10:48.910 --> 10:50.670
就是你们学那个vpeg的时候

10:50.670 --> 10:51.390
也知道

10:51.390 --> 10:52.030
这个东西呢

10:52.030 --> 10:52.750
叫做什么呢

10:52.750 --> 10:53.870
叫做一步加载

10:53.870 --> 10:54.350
对吧

10:54.350 --> 10:54.910
因为我们知道

10:54.910 --> 10:56.190
这个es6的模块方呢

10:56.190 --> 10:57.070
它是静态的

10:57.070 --> 10:58.190
它一开始就把分

10:58.190 --> 10:59.630
把依赖分析出来加载进来

11:00.430 --> 11:00.830
但是呢

11:00.830 --> 11:02.110
用这种方式呢

11:02.110 --> 11:03.070
这是个草案

11:03.070 --> 11:03.550
目前呢

11:04.270 --> 11:04.910
还没有

11:04.910 --> 11:06.510
就是es的标准呢

11:06.510 --> 11:08.030
还没有成为正式的标准

11:08.030 --> 11:08.750
这是个草案

11:08.750 --> 11:09.470
那么这个东西呢

11:09.470 --> 11:10.830
可以通过

11:10.830 --> 11:11.950
一步的方式

11:11.950 --> 11:13.470
动态的去加载那种

11:13.470 --> 11:15.070
因为我们知道之前的静态加载

11:15.070 --> 11:16.110
是不是必须要写到

11:16.110 --> 11:17.790
每个文件的最前面

11:17.790 --> 11:18.830
不能放到函数里边

11:18.830 --> 11:20.430
也不能放到那个判断

11:20.430 --> 11:21.390
各种分枝里边

11:21.390 --> 11:21.790
对吧

11:21.790 --> 11:22.510
那么这种方式呢

11:22.510 --> 11:24.030
就可以放到任何地方了

11:24.030 --> 11:24.830
我们来看一下吧

11:26.430 --> 11:26.750
二

11:27.470 --> 11:27.790
好

11:27.790 --> 11:28.430
那么看一下

11:29.870 --> 11:30.350
印象

11:31.550 --> 11:31.710
好

11:31.710 --> 11:32.110
你看

11:32.110 --> 11:33.070
是不是还是可以得到结果

11:33.070 --> 11:33.390
对吧

11:33.950 --> 11:34.590
等于1

11:34.590 --> 11:35.230
Default呢

11:35.950 --> 11:36.590
等于5

11:36.590 --> 11:37.390
对吧

11:37.390 --> 11:38.030
OK

11:38.030 --> 11:38.190
好

11:38.190 --> 11:39.790
这就是关于这个note里边

11:39.790 --> 11:42.110
它对那个es模块化的支持

11:42.110 --> 11:43.070
了解一下就行了

11:43.070 --> 11:45.710
不太建议大家在实战中去使用

11:45.710 --> 11:47.390
毕竟目前不太成熟

11:47.390 --> 11:48.430
告诉这个目的呢

11:48.430 --> 11:49.310
主要是以后

11:49.310 --> 11:50.830
我也不招惠发生什么事

11:50.830 --> 11:51.790
平面反攻

11:51.790 --> 11:52.510
所以说

11:52.510 --> 11:53.470
这音乐程度这个课程

11:53.470 --> 11:55.550
你要考虑到以后的发展

11:55.550 --> 11:56.910
大家关注一下吧

11:56.910 --> 11:57.630
可能以后呢

11:57.630 --> 11:58.430
又会成为正式的

11:58.430 --> 11:59.470
它如果说能够解决

11:59.470 --> 12:00.830
这个互操作的问题的话

12:00.830 --> 12:02.510
以后可能会成为正式的

12:02.590 --> 12:03.630
一种标准

12:03.630 --> 12:03.870
好

12:03.870 --> 12:04.990
那么就是关于这几颗

12:04.990 --> 12:05.790
说一下就行了

