WEBVTT

00:00.370 --> 00:04.530
这节课我们到学习CORS的时候了

00:05.530 --> 00:09.330
这是一个跨域方案 它内容呢比较的多

00:09.330 --> 00:13.010
也是目前用的最多的跨域方案

00:13.010 --> 00:15.810
像之前那个接生坯的那种方式呢

00:15.810 --> 00:18.450
我们就几乎不再使用了

00:18.450 --> 00:19.970
现在把它改回去

00:19.970 --> 00:21.890
我们上节课讲这个

00:21.890 --> 00:23.410
就在这儿

00:23.410 --> 00:26.210
我们把它改回去 改成这种格式

00:26.210 --> 00:28.130
不再使用接生坯这种方式了

00:28.130 --> 00:29.570
接生坯这种方式太low了

00:30.930 --> 00:32.450
改回去一下

00:33.250 --> 00:34.770
把它扩起来

00:34.770 --> 00:37.250
这个地方 扩起来

00:39.170 --> 00:40.530
然后这边呢

00:40.530 --> 00:41.810
我们就是返回结果

00:41.810 --> 00:42.930
把这个return就行了

00:44.610 --> 00:45.490
好 下面不要了

00:47.650 --> 00:47.890
好

00:48.930 --> 00:49.410
行了啊

00:50.210 --> 00:51.010
改完之后呢

00:51.010 --> 00:52.850
我们这个页面里面的节词啊

00:52.850 --> 00:53.810
也该去掉了

00:55.170 --> 00:56.930
好 我们来看一下CORS

00:57.490 --> 00:59.010
这个呢我给它写了一个

00:59.010 --> 01:00.370
它的原理想解啊

01:00.370 --> 01:01.250
我把它热打开

01:02.370 --> 01:03.410
从这里起来看

01:04.530 --> 01:05.890
来吧 一步一来

01:05.890 --> 01:06.690
内容比较多

01:07.730 --> 01:09.250
接生坯呢它不是一个好的

01:09.250 --> 01:10.290
跨域解决方案

01:10.290 --> 01:10.850
为啥呢

01:10.850 --> 01:11.650
用两个问题

01:11.650 --> 01:11.970
对吧

01:11.970 --> 01:12.770
咱们上节课说了

01:13.330 --> 01:14.610
一个呢是它会打断

01:14.610 --> 01:15.570
服务器的消息格式

01:16.290 --> 01:17.570
因为接生坯呢

01:17.570 --> 01:20.050
它要求服务器响应一段GES代码

01:20.050 --> 01:21.410
它就不是接生格式了

01:21.410 --> 01:22.450
它是GES代码

01:23.010 --> 01:25.170
那么如果说在非跨域的情况下

01:25.170 --> 01:27.330
服务器它又需要响应一个

01:27.330 --> 01:28.610
正常的接生格式

01:28.610 --> 01:30.050
就是它要响应两种格式

01:30.050 --> 01:31.250
针对两种情况

01:31.410 --> 01:33.250
这样子给服务器造成了很多的麻烦

01:34.050 --> 01:34.850
另外一个呢

01:34.850 --> 01:36.450
它是只能完成GES的请求

01:36.450 --> 01:36.850
为什么呢

01:36.850 --> 01:37.970
因为接生坯的原因呢

01:37.970 --> 01:38.850
是浏览器端

01:38.850 --> 01:40.690
它生成了一个scripps元素

01:40.690 --> 01:42.610
而这个元素它只能发送GES的请求

01:43.010 --> 01:44.770
所以说这就是它两个很大的问题

01:44.770 --> 01:45.890
当然还有一些其他问题

01:46.370 --> 01:46.770
因此呢

01:46.770 --> 01:48.610
我们以前没有办法

01:49.570 --> 01:52.050
在HDP协议1.1出来之后呢

01:52.450 --> 01:53.970
CORS这种方式呢

01:53.970 --> 01:54.850
就应与而生了

01:54.850 --> 01:55.730
我们就不再

01:55.730 --> 01:57.650
不太会去使用接生坯这种方式了

01:57.650 --> 01:59.410
除非是一种非常非常老的系统

01:59.890 --> 02:00.770
我们一个说啊

02:01.330 --> 02:02.450
首先我来个概述

02:02.450 --> 02:05.010
看一下就是CORS啊

02:05.010 --> 02:06.210
它到底是一个什么东西

02:06.690 --> 02:09.970
它是基于HDP1.1的一种跨域解决方案

02:09.970 --> 02:13.810
它的全程叫做Cross Orange Resource Sharing

02:13.810 --> 02:17.010
叫做跨域支援共享

02:17.730 --> 02:19.650
就是服务器有很多资源对吧

02:19.650 --> 02:21.250
那么另外一个服务器呢

02:21.250 --> 02:22.210
它也有一些资源

02:22.210 --> 02:23.810
服务器与服务器之间

02:23.810 --> 02:25.010
要实现支援共享

02:25.010 --> 02:26.050
这是跨域的本质

02:26.050 --> 02:27.410
为什么这样说呢

02:27.410 --> 02:29.090
我们的意面是不是在一个服务器

02:29.890 --> 02:30.210
对吧

02:30.210 --> 02:31.490
是个资源服务器吗

02:31.490 --> 02:33.730
而我们的API接口在另一个服务器

02:33.730 --> 02:35.090
他们的预不一样

02:35.090 --> 02:35.570
对不对

02:35.570 --> 02:37.010
是不是要实现资源共享

02:37.010 --> 02:38.370
它就这么个意思啊

02:38.370 --> 02:39.890
它的总体思路是这样子

02:40.770 --> 02:43.330
之所以出现那个跨域问题呢

02:43.330 --> 02:44.450
是因为童言策略

02:44.450 --> 02:46.770
童言策略是为了安全对不对

02:46.770 --> 02:49.810
那么我们要实现资源共享了

02:49.810 --> 02:52.770
我们只需要一个简单的询问就可以了

02:52.770 --> 02:53.810
比如浏览器呢

02:54.370 --> 02:57.010
要跨域访问另一台服务器的资源

02:57.010 --> 02:58.210
需要那台服务器呢

02:58.930 --> 03:00.210
获得一个许可

03:00.210 --> 03:01.410
获得一个允许

03:01.410 --> 03:03.090
如果那台服务器说没问题

03:03.090 --> 03:04.450
就是我自己的人

03:04.450 --> 03:05.250
自己人

03:05.250 --> 03:06.530
或者说我比较开放

03:06.530 --> 03:07.410
我都可以给

03:07.410 --> 03:07.810
ok

03:07.810 --> 03:09.810
那么就可以允许跨域了

03:09.810 --> 03:12.370
说只需要经过一个简单的询问就可以了

03:12.370 --> 03:13.170
因此呢

03:13.170 --> 03:14.770
它就出现了下面这个模式啊

03:14.770 --> 03:15.890
浏览器里面

03:15.890 --> 03:18.450
我们可以向跨域的服务器

03:18.450 --> 03:19.810
发送一个消息

03:19.810 --> 03:21.490
我是一个来自跨域的请求

03:21.490 --> 03:21.650
对吧

03:21.650 --> 03:23.810
我把自己的身份标明

03:23.810 --> 03:25.090
我就是来自于跨域的

03:25.090 --> 03:25.650
我给你说明

03:26.370 --> 03:27.010
然后

03:27.010 --> 03:28.610
即便是这样子

03:28.610 --> 03:29.570
是否

03:29.570 --> 03:30.530
让我

03:30.530 --> 03:32.050
可以获取你的资源

03:32.050 --> 03:32.770
那么服务器呢

03:33.650 --> 03:35.730
通过来认证那个浏览器里面

03:35.730 --> 03:37.170
是不是能够允许它

03:37.170 --> 03:38.210
来获取你的资源

03:38.210 --> 03:38.450
ok

03:38.450 --> 03:39.410
那如果是允许的话

03:39.410 --> 03:40.530
那么就是

03:40.530 --> 03:41.810
搞啥一万维抗

03:41.810 --> 03:42.450
表示

03:42.450 --> 03:44.290
允许你的获取你的资源

03:44.290 --> 03:45.170
我的资源

03:45.170 --> 03:46.290
就这么个意思啊

03:48.130 --> 03:50.610
我们要知道的是一个请求啊

03:50.610 --> 03:52.290
它是可以负担很多信息的

03:52.290 --> 03:53.810
就让我们这里到一个简单请求

03:53.810 --> 03:55.170
这里一个请求过去

03:55.250 --> 03:56.610
它可能会负担很多信息

03:57.170 --> 03:58.530
而不同的信息呢

03:58.530 --> 03:59.490
可能会对服务器呢

03:59.490 --> 04:00.530
造成不同的影响

04:00.530 --> 04:01.410
比方说决立者

04:02.050 --> 04:03.250
如果说你一个请求

04:03.250 --> 04:04.530
只是获取一些班级

04:04.530 --> 04:05.650
获取一个学生

04:05.650 --> 04:06.770
可能影响比较小

04:06.770 --> 04:08.050
只是查讯一些数据嘛

04:08.050 --> 04:08.690
对不对

04:08.690 --> 04:09.090
但是呢

04:09.090 --> 04:09.890
我们会发生一些

04:09.890 --> 04:10.770
PoS请求

04:10.770 --> 04:11.570
增加数据

04:11.570 --> 04:12.130
对不对

04:12.130 --> 04:13.250
或者是PoS请求

04:13.250 --> 04:14.370
Delete请求

04:14.370 --> 04:15.810
修改和三组数据

04:16.370 --> 04:17.330
或者是呢

04:17.330 --> 04:18.770
给它一些Cookie

04:18.770 --> 04:19.250
我们要

04:19.890 --> 04:22.290
带权限的去访问一些数据

04:22.290 --> 04:23.010
那么这样子呢

04:23.010 --> 04:24.530
对服务器的影响的程度是

04:25.330 --> 04:26.450
多的少少不一样的

04:27.170 --> 04:28.770
为了更加的安全

04:28.770 --> 04:30.290
这个交互更加的安全呢

04:30.290 --> 04:33.330
这个CLRS这种协议里边

04:33.330 --> 04:34.130
还不像协议啊

04:34.130 --> 04:34.930
叫做规范

04:34.930 --> 04:36.130
规范里边呢

04:36.130 --> 04:39.250
它规定了三种不同的交互模式

04:39.250 --> 04:41.490
它们分别是简单请求

04:41.490 --> 04:44.050
需要与简的请求

04:44.050 --> 04:44.610
以及

04:44.610 --> 04:46.930
附带身份评证的请求

04:46.930 --> 04:48.770
这三种模式呢

04:48.770 --> 04:49.730
从上到下

04:49.730 --> 04:50.770
层层递进

04:50.770 --> 04:52.770
后边的请求

04:52.770 --> 04:54.210
可以做的是越来越多

04:54.370 --> 04:55.570
要求了

04:55.570 --> 04:56.610
交互的要求啊

04:56.610 --> 04:58.050
就越来越严格

04:58.050 --> 04:59.490
咱们下面就是

04:59.490 --> 05:01.010
分别来说一下这三种情况

05:01.010 --> 05:02.530
就是把这三种情况一学习完

05:02.530 --> 05:03.490
基本上就没了

05:03.490 --> 05:04.290
一个个来啊

05:04.290 --> 05:05.410
简单简单请求

05:06.370 --> 05:06.770
喝个水

05:13.730 --> 05:15.810
当浏览器端运行的一段

05:15.810 --> 05:17.010
借代码

05:17.010 --> 05:17.730
叫Aliens代码

05:18.450 --> 05:19.810
无论你是使用那个

05:19.810 --> 05:20.770
传统的方式

05:20.770 --> 05:23.490
XHR或者是非切API

05:24.290 --> 05:25.650
只要你是发售一段

05:25.650 --> 05:26.530
阿迦克斯代码

05:26.530 --> 05:27.330
那么浏览器呢

05:27.330 --> 05:29.170
它会首先判断

05:29.250 --> 05:30.610
你这个请求啊

05:30.610 --> 05:32.690
是属于哪一种请求模式

05:32.690 --> 05:33.730
到底是简单的

05:33.730 --> 05:34.290
还是这个

05:34.290 --> 05:34.770
还是这个

05:35.810 --> 05:37.010
那么它怎么来判断

05:37.010 --> 05:38.770
是不是简单请求呢

05:38.770 --> 05:39.570
简单请求判定

05:40.370 --> 05:41.410
如果你得请求

05:41.410 --> 05:43.010
同时满足以下条件

05:43.010 --> 05:45.010
其实我就带来把个文档读一遍

05:45.010 --> 05:45.570
我要说的话

05:45.570 --> 05:46.930
全部在文档里面了

05:46.930 --> 05:48.050
如果说你嫌我啰嗦的话

05:48.050 --> 05:49.010
你可以自己去看文档

05:50.770 --> 05:51.970
当你当这个请求

05:51.970 --> 05:53.890
同时满足以下条件的时候

05:53.890 --> 05:54.850
浏览器会认为

05:54.850 --> 05:56.370
它是一个简单请求

05:57.250 --> 05:58.130
同时满足

05:58.210 --> 05:59.170
第一个条件

05:59.970 --> 06:00.770
请求的方法

06:00.770 --> 06:01.730
它属于下面几种

06:01.730 --> 06:02.290
一种

06:02.290 --> 06:02.770
一个gass

06:02.770 --> 06:03.410
一个poster

06:03.410 --> 06:03.970
一个是head

06:04.530 --> 06:05.250
这三种方法

06:05.250 --> 06:05.970
随便一种

06:05.970 --> 06:07.090
它就属于一个简单请求

06:07.730 --> 06:09.330
但就是以第一个条件满足

06:09.970 --> 06:11.490
那么这个head请求是什么东西呢

06:12.450 --> 06:13.330
head请求是这样子

06:14.130 --> 06:15.090
就是有的时候呢

06:15.090 --> 06:16.210
它可能会出现这种情况

06:16.210 --> 06:18.450
我要在服务区下载一个大的文件

06:18.850 --> 06:19.650
一个文件很大

06:21.170 --> 06:22.210
但是我下载的时候

06:22.210 --> 06:23.570
我不知道这个文件很大

06:23.570 --> 06:24.290
我可能不知道

06:25.410 --> 06:25.970
服务区呢

06:25.970 --> 06:27.810
如果说立即把这个文件的

06:27.890 --> 06:29.330
数据读出来给我响应了

06:29.330 --> 06:30.690
会占用一些服务区资源

06:31.170 --> 06:33.010
可能客户端那边根本就不想一下

06:33.650 --> 06:35.970
所以说可以先发送一个head请求过去

06:36.530 --> 06:37.490
让服务区告诉我

06:37.490 --> 06:38.610
你这个文件有多大

06:39.330 --> 06:40.370
是什么样的文件

06:41.010 --> 06:41.890
它的一些信息

06:41.890 --> 06:43.010
通过head请求告诉我

06:43.490 --> 06:44.050
怎么来告诉我

06:44.050 --> 06:45.410
就通过消息头来告诉

06:45.410 --> 06:47.010
不用给我发文件的内容

06:47.730 --> 06:48.930
当我决定真正的

06:48.930 --> 06:50.130
要决定要去下载的时候

06:50.130 --> 06:52.050
你再去给我发一个响应题

06:52.050 --> 06:52.690
我们后面讲

06:53.730 --> 06:55.490
就是下载文件的时候再说吧

06:55.890 --> 06:56.850
这是个head请求

06:57.490 --> 06:58.930
只是这三种请求之一

06:58.930 --> 07:00.610
那么第一个条件就满足了

07:01.170 --> 07:01.970
好 第二条件

07:03.090 --> 07:05.570
请求头它仅包含安全的阻断

07:05.570 --> 07:07.170
常见的安全阻断是这些

07:07.170 --> 07:07.890
你自己看一下

07:08.370 --> 07:09.330
有些字都没见过

07:11.970 --> 07:13.410
有些请求头都知道没见过

07:13.410 --> 07:13.810
没关系

07:14.450 --> 07:15.170
就是说

07:15.170 --> 07:15.730
简单来说

07:15.730 --> 07:17.250
就是你的请求头里边

07:17.250 --> 07:18.610
没有一些额外的信息

07:19.170 --> 07:21.570
那么这些也是属于简单请求

07:22.770 --> 07:23.650
好 第三个情况

07:24.690 --> 07:26.210
就是你的请求头里边

07:26.690 --> 07:29.170
如果说包含了content type

07:29.170 --> 07:30.530
因为它是支持posed请求

07:30.530 --> 07:30.930
对吧

07:30.930 --> 07:32.210
它可能有消息体

07:32.210 --> 07:33.250
而有消息体的时候

07:33.250 --> 07:35.490
是不是可以要表明

07:35.490 --> 07:38.050
我的消息体是一个什么样的格式

07:38.050 --> 07:38.930
对不对

07:38.930 --> 07:40.610
如果说你包含了content type

07:41.170 --> 07:42.770
那么这种情况下

07:42.770 --> 07:45.730
这个content type只限于下面几个字

07:46.690 --> 07:47.250
纯文本

07:48.610 --> 07:50.850
那个上传文件的表单

07:50.850 --> 07:51.410
或者是

07:52.370 --> 07:54.370
这种 URL encoded的表单

07:54.930 --> 07:55.810
只限于这三种

07:56.850 --> 07:58.050
这三个条件

07:58.050 --> 07:59.330
如果说全部满足

07:59.330 --> 08:00.130
那么流量器

08:00.130 --> 08:01.090
它就会判定为

08:01.090 --> 08:02.210
它是一个简单请求

08:02.210 --> 08:03.330
就这么个意思

08:03.330 --> 08:04.130
下面是一个例子

08:05.490 --> 08:06.450
这些鼻子有点不舒服

08:06.450 --> 08:06.770
等一下

08:16.580 --> 08:17.140
一些例子

08:17.700 --> 08:19.620
下面我们使用了一些废且API

08:19.620 --> 08:21.540
来去发送一个阿迦克斯请求

08:21.540 --> 08:22.420
都是跨域发送

08:23.300 --> 08:24.020
我的请求例子

08:24.020 --> 08:25.300
就是一个测试例子

08:25.300 --> 08:26.180
就随便写了一个

08:26.180 --> 08:27.940
叫crossed demand.com

08:27.940 --> 08:29.940
比方说我们去请求这个例子

08:29.940 --> 08:31.220
是不是简单请求

08:31.220 --> 08:31.460
是

08:31.460 --> 08:32.020
为什么呢

08:32.020 --> 08:33.220
首先它是get请求

08:33.220 --> 08:33.620
对吧

08:33.700 --> 08:34.660
第一个条件是不满足

08:35.380 --> 08:36.340
那么第二条件

08:36.340 --> 08:38.020
还没有额外的请求头

08:38.020 --> 08:38.660
第三个条件

08:39.060 --> 08:40.660
content type是不是没有改动过

08:40.660 --> 08:41.220
对不对

08:41.220 --> 08:41.620
OK

08:41.620 --> 08:42.660
那么都是个简单请求

08:43.700 --> 08:44.180
下面这个

08:44.740 --> 08:46.500
下面这个请求方法是put

08:47.140 --> 08:48.020
是不是简单请求

08:48.020 --> 08:48.580
肯定不是了

08:49.300 --> 08:49.700
好

08:49.700 --> 08:50.260
下面这个

08:51.860 --> 08:52.980
它有什么问题呢

08:52.980 --> 08:54.180
它为什么不是简单请求呢

08:54.180 --> 08:56.420
因为它增加了额外的请求头

08:56.980 --> 08:58.500
就不是简单请求了

08:58.500 --> 08:59.300
下面这个

08:59.300 --> 09:00.420
请求方法是post

09:00.420 --> 09:01.620
是简单请求

09:01.620 --> 09:02.820
那么下面这个就不是了

09:02.820 --> 09:04.340
因为虽然仍然是post

09:04.340 --> 09:04.900
但是呢

09:04.900 --> 09:06.420
因为它改动了content type

09:07.060 --> 09:07.540
而且呢

09:07.540 --> 09:08.900
不是这三个动作一个

09:08.900 --> 09:09.700
对不对

09:09.700 --> 09:11.940
它变成了application.json

09:11.940 --> 09:13.300
不是简单请求了

09:13.300 --> 09:14.980
其实它这个逻辑是什么呢

09:14.980 --> 09:15.780
它逻辑就是

09:15.780 --> 09:18.100
虽然说我允许你添加

09:18.100 --> 09:19.300
用post请求

09:19.300 --> 09:20.020
但是呢

09:20.020 --> 09:22.020
我不允许你传递复杂数据

09:23.380 --> 09:24.020
你看如果说

09:24.020 --> 09:25.220
你使用这种格式的话

09:26.420 --> 09:28.260
是不是有可能你传递的数据

09:28.260 --> 09:29.460
是一个千套层次

09:29.460 --> 09:31.140
非常深的复杂数据

09:31.140 --> 09:31.620
对吧

09:31.700 --> 09:32.740
因为我们知道这个

09:32.740 --> 09:34.580
这种数据传递方式呢

09:34.580 --> 09:36.900
它能传递的就是一些简单的建设对

09:37.780 --> 09:38.180
但是呢

09:38.180 --> 09:39.780
你如果说application.json的话

09:39.780 --> 09:41.140
它可以传递很多复杂的数据

09:41.140 --> 09:42.500
像什么数据啊

09:42.500 --> 09:42.900
对不对

09:42.900 --> 09:44.020
数据里面再套对象啊

09:44.020 --> 09:45.140
对象里面再套对象啊

09:45.140 --> 09:45.540
这种

09:45.540 --> 09:47.620
它可以传递非常复杂的数据

09:47.620 --> 09:49.620
那么就有可能会导致服务器

09:49.620 --> 09:51.140
做一些很复杂的操作

09:51.140 --> 09:52.580
可能会产生一些复作用

09:53.220 --> 09:53.700
因此呢

09:53.700 --> 09:54.980
它认为这种请求呢

09:54.980 --> 09:56.980
就不是不能数据解散请求

09:56.980 --> 09:57.940
是这么个意思啊

09:58.820 --> 09:59.220
而且呢

09:59.220 --> 10:01.220
它为什么要不能让你有额外的请求头呢

10:01.220 --> 10:03.220
因为你有着额外的请求头说明呢

10:03.220 --> 10:06.020
有可能服务器会根据这些额外的请求头

10:06.020 --> 10:06.660
做一些

10:06.660 --> 10:08.660
带有很多负重的操作

10:08.660 --> 10:09.540
因此呢

10:09.540 --> 10:10.340
它认为这种

10:10.340 --> 10:11.380
这种做法呢

10:11.380 --> 10:12.020
也是会

10:12.740 --> 10:14.580
导致一些潜在的危险

10:14.580 --> 10:16.420
所以说它不认为是简单请求

10:16.420 --> 10:17.220
好

10:17.220 --> 10:19.220
那么如果说判定为简单请求

10:19.220 --> 10:20.180
它是怎么交货的呢

10:20.180 --> 10:20.660
它这样子

10:20.660 --> 10:21.380
非常简单啊

10:23.220 --> 10:24.420
在请求的时候呢

10:24.420 --> 10:26.260
浏览器它会自动的

10:26.260 --> 10:28.020
给你加一个origin

10:28.100 --> 10:29.620
origin是原来的意思

10:29.620 --> 10:31.060
就是原的意思

10:31.060 --> 10:32.500
加一个这个字段

10:32.500 --> 10:33.780
在请求头里边

10:33.780 --> 10:34.740
比方说吧

10:34.740 --> 10:35.380
我在

10:35.380 --> 10:36.340
我的页面呢

10:36.340 --> 10:37.540
是通过这个防蚊的

10:37.540 --> 10:38.580
就是我的静态页面

10:38.580 --> 10:39.620
通过这个防蚊的

10:40.260 --> 10:41.300
然后这个页面中呢

10:41.300 --> 10:42.740
就进行了一段戒严史

10:42.740 --> 10:43.860
这个戒严史代码呢

10:43.860 --> 10:44.740
造成了跨域

10:44.740 --> 10:46.340
比方说我们这种废弃

10:46.340 --> 10:47.540
请求另一个域

10:47.540 --> 10:47.940
对吧

10:47.940 --> 10:49.300
是不是造成了跨域

10:49.300 --> 10:49.940
好

10:49.940 --> 10:51.940
那么这个时候请求发送出去的时候

10:51.940 --> 10:52.980
它是一个简单请求

10:52.980 --> 10:54.100
发送出去的时候呢

10:54.100 --> 10:54.580
你看

10:54.580 --> 10:55.940
它会给你加一个

10:55.940 --> 10:57.460
请求头

10:57.540 --> 10:58.580
origin

10:58.580 --> 10:59.780
这个refer

10:59.780 --> 11:00.740
这个有点不用管

11:00.740 --> 11:01.780
refer表示

11:01.780 --> 11:03.460
我指向的

11:03.460 --> 11:04.740
就是

11:04.740 --> 11:06.660
我这个整个这个页面的地址

11:06.660 --> 11:09.220
就是我哪个页面发出的这个东西

11:09.220 --> 11:12.580
这个origin表示我的原

11:12.580 --> 11:13.460
什么叫原

11:13.460 --> 11:14.260
协议

11:14.260 --> 11:14.900
域名

11:14.900 --> 11:15.940
端口号

11:15.940 --> 11:17.060
就叫原

11:17.060 --> 11:18.580
我的原地址是什么

11:18.580 --> 11:20.100
我的原地址是这个

11:20.100 --> 11:21.620
就这么个意思

11:21.620 --> 11:23.300
那么最后一行

11:23.300 --> 11:24.180
就是origin

11:24.180 --> 11:26.100
它会告诉服务器

11:26.100 --> 11:27.300
我现在来访问你的

11:27.380 --> 11:28.820
我是跨域访问的

11:28.820 --> 11:30.020
那么跨域访问的时候

11:30.020 --> 11:31.140
我告诉你

11:31.140 --> 11:32.500
我是哪个域

11:32.500 --> 11:33.940
我是哪个原

11:33.940 --> 11:36.180
那么如果你允许我

11:36.180 --> 11:38.340
你请你明确的告诉我

11:38.340 --> 11:39.460
好的第一步

11:39.460 --> 11:41.140
第二步呢服务器就是明确告诉他了

11:41.140 --> 11:41.780
非常简单

11:41.780 --> 11:42.900
怎么要明确告诉他

11:42.900 --> 11:44.500
就是服务器在响应头的时候

11:44.500 --> 11:46.180
就正常响应就完事了

11:46.180 --> 11:47.780
在响应头里边呢

11:47.780 --> 11:48.980
给大家加一个

11:48.980 --> 11:50.260
叫xs

11:50.260 --> 11:50.740
ctl

11:50.740 --> 11:51.860
xsctl就表示

11:51.860 --> 11:53.300
就是访问控制

11:53.300 --> 11:54.500
耳道表示

11:54.500 --> 11:55.220
我允许

11:55.220 --> 11:55.860
访问控制中

11:55.860 --> 11:57.860
我允许的

11:57.860 --> 11:59.060
原

11:59.060 --> 12:01.060
如果说服务器允许这个原的话

12:01.060 --> 12:03.060
那么就可以给大家这个响应头里边

12:03.060 --> 12:04.100
再加上这么一个东西

12:04.100 --> 12:05.060
给他设置一个值

12:05.060 --> 12:06.020
设置什么值呢

12:06.020 --> 12:07.380
可以给他设置一个新号

12:07.380 --> 12:08.340
表示我很开放

12:08.340 --> 12:09.940
我什么人都允许

12:09.940 --> 12:11.940
或者说给他设置一个具体的原

12:11.940 --> 12:12.980
比方说把这个东西设置为

12:12.980 --> 12:14.020
这个atp-my-to-me

12:14.020 --> 12:14.180
对吧

12:14.180 --> 12:14.900
你不是访问吗

12:14.900 --> 12:16.180
我就设置你

12:16.180 --> 12:17.860
我就允许你访问

12:17.860 --> 12:19.860
其实呢这个东西呢

12:19.860 --> 12:20.500
有人说

12:20.500 --> 12:21.700
那我要允许别人怎么办

12:21.700 --> 12:23.220
他不允许写多个的

12:23.220 --> 12:23.940
所以这个东西

12:23.940 --> 12:25.300
你好好想一想

12:25.460 --> 12:26.580
实际上这两个东西

12:26.580 --> 12:28.420
对客户端对这个网站而言

12:28.420 --> 12:28.980
都一样

12:28.980 --> 12:29.620
对吧

12:29.620 --> 12:30.260
你去问他

12:30.260 --> 12:31.220
你去问一个服务器

12:32.180 --> 12:32.740
说

12:32.740 --> 12:34.020
你不允许我访问

12:34.020 --> 12:34.740
他告诉你

12:34.740 --> 12:36.420
我允许所有人访问

12:36.420 --> 12:37.220
或者说告诉你

12:37.220 --> 12:38.740
我就允许你去访问

12:38.740 --> 12:39.780
跟你有关系吗

12:40.580 --> 12:42.900
他允许所有人和跟你允许你

12:42.900 --> 12:43.780
对你来说是不是

12:43.780 --> 12:44.500
你全部一样的

12:44.500 --> 12:45.060
对不对

12:45.060 --> 12:46.420
说全部一样的

12:46.420 --> 12:47.460
你根本不care

12:47.460 --> 12:48.500
他允不允许别人

12:48.500 --> 12:49.140
对不对

12:49.140 --> 12:49.940
所以说呢

12:49.940 --> 12:50.500
这个点呢

12:51.620 --> 12:52.180
大家注意一下

12:52.180 --> 12:53.380
其实都一样的

12:53.380 --> 12:54.340
对一个客户端而言

12:54.340 --> 12:54.980
是都一样的

12:54.980 --> 12:56.180
一个访问返回什么都可以

12:57.700 --> 12:58.020
当然呢

12:58.020 --> 12:59.060
服务器要如果说

12:59.060 --> 13:00.020
要允许多个月的话

13:00.020 --> 13:00.980
他可以在这样做

13:00.980 --> 13:02.180
在服务器去维护一个

13:02.180 --> 13:03.700
可允许的列表

13:04.740 --> 13:05.540
那么如果说

13:05.540 --> 13:06.340
我访问的预议

13:06.340 --> 13:07.220
在这个列表中

13:07.220 --> 13:07.540
ok

13:07.540 --> 13:08.340
那我就给访问

13:08.340 --> 13:09.060
返回一个信号

13:09.700 --> 13:10.900
然后或者是

13:10.900 --> 13:11.620
我给你返回一个

13:11.620 --> 13:12.580
对应的运名就可以了

13:13.460 --> 13:15.380
这里面为了避免后续的麻烦

13:15.380 --> 13:16.180
建议大家

13:16.180 --> 13:18.180
强烈建议大家使用这种方式

13:18.180 --> 13:19.620
而不要使用这种方式

13:19.620 --> 13:21.060
因为后面有一个小的麻烦

13:21.860 --> 13:22.820
用这种方式就可以了

13:23.460 --> 13:23.540
好

13:23.540 --> 13:24.340
那么比方说

13:24.420 --> 13:25.780
服务器中出了以下的响应

13:25.780 --> 13:27.140
响应的ocs control

13:27.140 --> 13:28.020
orange

13:28.020 --> 13:29.540
然后把这东西响应过来

13:29.540 --> 13:30.260
就可以了

13:30.260 --> 13:31.220
那么另外一边去看

13:32.020 --> 13:32.660
你是不是

13:32.660 --> 13:34.500
我问你是不是能够允许我呢

13:34.500 --> 13:36.020
你告诉我能够允许我

13:36.580 --> 13:37.060
于是呢

13:37.060 --> 13:38.500
他就把这个响应的结果

13:38.500 --> 13:40.100
就顺利的交给解释

13:40.100 --> 13:42.260
其实之前的跨域问题

13:42.260 --> 13:43.940
请求有没有到达服务器

13:44.580 --> 13:46.420
实际上请求是到达了服务器的

13:47.140 --> 13:48.740
服务器也完成了响应

13:49.380 --> 13:50.340
只不过呢

13:50.340 --> 13:51.860
客户端这边不认

13:52.660 --> 13:53.620
客户端这边呢

13:54.180 --> 13:54.500
那个

13:55.300 --> 13:56.260
浏览器这边

13:56.260 --> 13:58.340
他没有把这个数据呢交给解释

13:58.980 --> 14:00.180
他给你阻止掉了

14:00.180 --> 14:01.620
他告诉你这个这个跨域

14:01.620 --> 14:03.060
可能有钱在的危险

14:03.060 --> 14:04.180
他给你阻止掉了

14:04.180 --> 14:05.220
他没有交给解释

14:05.940 --> 14:07.540
服务器如果说明确告诉他了

14:07.540 --> 14:08.660
我允许你这个鱼

14:08.660 --> 14:09.140
ok

14:09.140 --> 14:10.100
那么服务器都说了

14:10.100 --> 14:10.980
那我还什么说的呢

14:10.980 --> 14:11.940
我就不会阻止了

14:11.940 --> 14:13.780
我就把这个数据呢交给解释

14:13.780 --> 14:14.900
整个过程就这样子

14:14.900 --> 14:16.820
浏览器简单请求浏览器请求

14:16.820 --> 14:17.620
正常发动请求

14:17.620 --> 14:19.860
然后他会给你附加这么一个东西

14:20.500 --> 14:21.380
服务器响应的时候

14:21.380 --> 14:22.500
正常响应就完事了

14:22.580 --> 14:24.180
然后他给你附加这么一个东西

14:24.180 --> 14:24.740
就完事了

14:25.300 --> 14:25.620
好了

14:25.620 --> 14:28.180
我们来做一个简单请求的这么一个例子

14:28.180 --> 14:28.660
比方说

14:30.260 --> 14:31.220
我们的页面上呢

14:31.220 --> 14:32.980
有一个就用废棋吧

14:34.660 --> 14:35.540
来一个简单请求

14:37.140 --> 14:38.180
就用废棋 API

14:38.180 --> 14:39.300
我们去请求什么呢

14:39.300 --> 14:42.660
atdp localhost 5008

14:43.220 --> 14:44.260
api student

14:44.900 --> 14:46.180
去请用这个例子

14:46.180 --> 14:48.500
然后呢给他不用不用什么了

14:48.500 --> 14:49.620
就z

14:51.620 --> 14:51.940
接上

14:53.140 --> 14:55.060
再把输出就完事了

14:56.820 --> 14:57.140
输出

14:58.180 --> 14:58.820
行了

14:58.820 --> 15:00.820
我们来看一下目前有没有问题

15:00.820 --> 15:02.740
那么为了实现跨域这个效果

15:03.300 --> 15:03.780
所以说呢

15:03.780 --> 15:05.380
我这里呢就不能用

15:05.380 --> 15:06.580
不能用这种方式打开了

15:06.580 --> 15:07.380
就不能用那个就是

15:07.940 --> 15:09.700
服务器的那种方式打开了

15:09.700 --> 15:10.500
不能用这种方式

15:10.500 --> 15:12.260
这种方式肯定不会造成跨域

15:12.260 --> 15:13.300
我都没运行对吧

15:14.820 --> 15:15.780
这我们运行一下

15:21.490 --> 15:22.050
这个关了

15:24.160 --> 15:24.800
运行啊

15:24.800 --> 15:25.600
npm start

15:27.600 --> 15:27.840
好

15:27.920 --> 15:28.560
将来我看一下

15:30.000 --> 15:31.280
这种方式就不能用了

15:31.280 --> 15:33.280
因为这种方式肯定不会运行跨域的

15:33.280 --> 15:34.640
肯定不会就是遇到跨域的

15:34.640 --> 15:36.080
所以我们这两届跨域

15:36.080 --> 15:37.040
只能这样子讲

15:37.040 --> 15:38.080
给大家做一些测试

15:38.080 --> 15:39.360
只能这样子讲

15:39.360 --> 15:39.920
因为呢

15:39.920 --> 15:42.320
我们实在绝大部分时候

15:42.320 --> 15:44.800
就是中小项目里面的不会造成什么跨域

15:44.800 --> 15:46.560
因为都是在前端一个服务器里边

15:47.280 --> 15:49.520
我们的API接口和那个就是

15:49.520 --> 15:50.880
我们的这个就是

15:50.880 --> 15:52.560
静态资源都是在一个服务器

15:52.560 --> 15:54.080
所以不会造成跨域的

15:54.080 --> 15:55.680
我们只跨域指的是

15:55.760 --> 15:56.800
我们的静态资源

15:57.520 --> 15:59.360
和API接口可能不在一个服务器

15:59.360 --> 16:01.040
它可能会造成跨域

16:01.040 --> 16:02.720
你看现在不会有跨域的

16:02.720 --> 16:04.000
所以我要演示这个效果呢

16:04.000 --> 16:04.720
我这里这样吧

16:05.360 --> 16:06.080
我这边呢

16:06.080 --> 16:08.240
我就直接用那个文件的方式打开

16:09.760 --> 16:11.040
文件的方式

16:11.040 --> 16:11.680
你看一下

16:11.680 --> 16:12.400
现在跨域了

16:13.760 --> 16:14.560
现在跨域了

16:15.280 --> 16:16.880
哎呀说那跨域

16:16.880 --> 16:18.560
刚才我们不是说跨域能

16:18.560 --> 16:19.920
请求能到了服务器吗

16:19.920 --> 16:20.720
我们刚才说了

16:20.720 --> 16:22.240
请求是可以到了服务器的

16:22.240 --> 16:23.040
比较那么随便

16:23.040 --> 16:23.760
我们看一下吧

16:24.320 --> 16:25.440
我们在这个token

16:25.440 --> 16:26.080
Vidware里边

16:26.080 --> 16:27.040
我们在这里打个断点

16:29.040 --> 16:30.080
在解析token的时候

16:30.080 --> 16:31.440
我们随便打个断点

16:31.440 --> 16:31.840
然后呢

16:31.840 --> 16:33.600
我们把这个调式模式运行起来

16:34.320 --> 16:34.720
调式

16:35.600 --> 16:35.920
好

16:35.920 --> 16:36.320
接下来

16:36.320 --> 16:37.520
我们来刷新浏览器

16:37.520 --> 16:37.920
刷新

16:38.640 --> 16:40.000
你看是不是运行到服务器了

16:40.000 --> 16:41.280
是不是请求过来了

16:41.280 --> 16:41.600
对不对

16:42.400 --> 16:42.560
哎

16:42.560 --> 16:44.160
我也正常完成响应了

16:44.160 --> 16:44.960
我运行结束

16:45.840 --> 16:47.040
正常完成响应了

16:47.040 --> 16:48.080
只是那浏览器

16:48.080 --> 16:50.080
还没有把这个响应结果交亏浏览器

16:50.080 --> 16:50.720
就这么简单

16:51.520 --> 16:52.160
没了意思吧

16:52.800 --> 16:52.880
好

16:52.960 --> 16:53.600
这就是这一块

16:54.160 --> 16:54.480
然后呢

16:54.480 --> 16:56.000
我们来去看一下这个请求

16:56.000 --> 16:56.560
我们发送了

16:56.560 --> 16:57.200
这个是请求

16:57.200 --> 16:58.320
它出了一个问题

16:58.320 --> 16:58.960
你看

16:58.960 --> 16:59.920
我们这个orange

16:59.920 --> 17:01.200
是不是给它发送一个东西过去

17:01.200 --> 17:01.840
发送了什么

17:01.840 --> 17:02.240
NOW

17:02.960 --> 17:03.760
为什么是NOW

17:03.760 --> 17:05.360
因为我这是用文件的方式打开的

17:05.360 --> 17:06.160
它没有语

17:06.160 --> 17:06.480
对不对

17:06.480 --> 17:07.440
它就发送一个NOW

17:08.160 --> 17:10.080
那如果说我们用这种方式打开

17:10.080 --> 17:10.960
就要说我们在这里

17:11.680 --> 17:12.080
右键

17:12.720 --> 17:13.920
Open with level server

17:13.920 --> 17:14.320
你看这个

17:15.280 --> 17:15.920
你看这个语

17:15.920 --> 17:16.240
对吧

17:16.240 --> 17:17.520
这个语也是不一样的

17:17.520 --> 17:18.080
我们检查

17:18.960 --> 17:20.000
它也遇到跨语问题

17:20.560 --> 17:20.960
然后呢

17:20.960 --> 17:21.760
我们看一下这个

17:21.840 --> 17:23.040
就是网络通信

17:24.880 --> 17:25.680
它的orange

17:26.160 --> 17:26.560
你看

17:27.200 --> 17:27.920
说这个玩意

17:28.480 --> 17:28.880
看没

17:29.200 --> 17:29.840
说这个玩意

17:30.240 --> 17:31.120
就是它的语

17:31.120 --> 17:31.520
对不对

17:31.920 --> 17:33.600
它把东西发送到浮览器

17:33.600 --> 17:35.760
由于浮览器的享用结果里边

17:35.760 --> 17:36.800
它没有包含这个

17:37.360 --> 17:38.800
没有包含那个就是

17:38.800 --> 17:41.360
OXS CONTROL ALLOW ORANGY

17:41.360 --> 17:42.000
所以说呢

17:42.000 --> 17:43.120
它现在浏览器不

17:43.120 --> 17:45.120
逐字的把数据交给些也是

17:45.120 --> 17:45.280
好

17:45.280 --> 17:46.640
那么现在我们要做的就是

17:46.640 --> 17:48.640
在浏览器在浮览器这一边

17:49.360 --> 17:50.160
到浮览器这边来

17:50.720 --> 17:51.600
在浮览器这边

17:51.600 --> 17:52.960
我们来处理跨语问题

17:52.960 --> 17:53.760
怎么来处理呢

17:53.760 --> 17:54.880
我们在express里面

17:54.880 --> 17:56.480
我们完全可以使用一个中间键

17:58.240 --> 17:58.400
好

17:58.400 --> 17:59.520
比方说我们在这里

17:59.520 --> 18:00.240
新建个文件

18:01.280 --> 18:01.920
表示呢

18:02.720 --> 18:04.640
CORS MEDAWARE

18:07.700 --> 18:08.020
好

18:08.020 --> 18:09.060
写这么一个中间键

18:09.060 --> 18:09.780
然后我们导出

18:10.500 --> 18:11.460
导出一个函数

18:13.300 --> 18:13.620
呃

18:14.180 --> 18:14.660
来吧

18:14.660 --> 18:15.060
方形

18:18.420 --> 18:19.860
RigRisLegas

18:20.660 --> 18:20.820
好

18:20.820 --> 18:21.860
导出这么一个函数

18:21.860 --> 18:22.260
然后呢

18:22.260 --> 18:23.140
在这边

18:23.140 --> 18:23.780
Init里边

18:23.780 --> 18:25.540
我们在哪里用跨语呢

18:26.100 --> 18:26.980
我们可以在

18:28.980 --> 18:30.020
就是PoseCokey

18:30.020 --> 18:30.900
Cokey就行了

18:30.900 --> 18:31.460
就在这

18:31.460 --> 18:32.260
在这

18:32.260 --> 18:33.060
在后边

18:33.060 --> 18:34.020
我们使用那个

18:34.820 --> 18:36.180
AppAppUse

18:36.980 --> 18:37.620
来跨语

18:38.660 --> 18:39.620
CORS

18:39.620 --> 18:40.900
其实我们可以在Cokey之前

18:41.620 --> 18:42.100
说实话

18:42.100 --> 18:43.700
是可以在Cokey之前的

18:43.700 --> 18:44.900
在Cokey之前再弄吧

18:46.820 --> 18:48.100
因为我们尽量找一点吧

18:48.100 --> 18:49.460
因为如果说不允许跨语的话

18:49.460 --> 18:50.740
后边就不已交了对吧

18:50.740 --> 18:52.260
所以我们再之前弄吧

18:52.260 --> 18:52.740
Require

18:54.740 --> 18:55.380
CORS

18:55.860 --> 18:56.500
好

18:56.500 --> 18:57.460
我们来看一下怎么写

18:57.460 --> 18:58.580
我先一步一写

18:58.580 --> 19:00.180
首先来处理简单请求

19:00.980 --> 19:02.340
处理简单请求

19:03.700 --> 19:03.860
好

19:03.860 --> 19:05.460
简单请我们怎么来处理呢

19:05.460 --> 19:06.980
就是其实非常简单

19:06.980 --> 19:07.860
就是看一下

19:08.820 --> 19:11.220
这个Require的Headers里边

19:11.220 --> 19:12.980
这个就是想用头里边

19:13.460 --> 19:15.300
他有没有一个属性

19:15.300 --> 19:15.940
想用头里边

19:15.940 --> 19:17.620
他不是把他封装成一个对象吗

19:17.620 --> 19:18.180
对吧

19:18.180 --> 19:19.700
他有没有一个属性

19:19.700 --> 19:20.900
他的纸呢

19:20.900 --> 19:22.180
叫做这个Orange

19:23.140 --> 19:25.540
就是我们这个Orange

19:25.540 --> 19:28.580
栽不在这个想用头这个对象里边

19:28.580 --> 19:29.860
有没有这个属性

19:29.860 --> 19:31.140
如果说有的话

19:31.140 --> 19:32.420
那么怎么办呢

19:32.420 --> 19:33.460
我可以把

19:33.460 --> 19:34.980
我可以验证一下

19:34.980 --> 19:36.900
这个Orange是不是允许他跨语

19:36.900 --> 19:38.100
那么怎么验证呢

19:38.100 --> 19:38.820
比方说吧

19:38.820 --> 19:40.100
我举个例子吧

19:40.100 --> 19:41.140
比方说我们这里呢

19:41.140 --> 19:42.420
可以写个配置啊

19:42.420 --> 19:44.980
我们允许的AllowOrange

19:45.460 --> 19:46.740
比方说我们写个数组

19:46.740 --> 19:48.020
我们允许哪些语

19:48.020 --> 19:49.700
比方说我们允许的语

19:49.700 --> 19:55.060
是有一个就是127.0.0.1

19:55.060 --> 19:56.980
然后是什么呢

19:56.980 --> 19:58.660
5500

19:58.660 --> 20:00.180
5500

20:00.180 --> 20:01.860
还允许什么呢

20:01.860 --> 20:02.820
NOW对不对

20:02.820 --> 20:03.540
还允许NOW

20:03.540 --> 20:05.060
我们就

20:05.060 --> 20:07.140
我就用这个字不错吧

20:07.140 --> 20:07.860
NOW

20:07.860 --> 20:09.300
我看一下这边的语识啊

20:10.820 --> 20:11.780
NOW

20:11.780 --> 20:12.980
这个小小的N

20:13.940 --> 20:14.740
等等啊

20:14.740 --> 20:16.020
我们就把这些东西

20:16.020 --> 20:18.180
把这些东西就是拿到

20:18.180 --> 20:18.900
好

20:19.620 --> 20:20.420
然后呢

20:20.420 --> 20:21.940
我们现在就判断一下啊

20:21.940 --> 20:22.660
就是Orange

20:22.660 --> 20:23.540
它给我传过来了

20:23.540 --> 20:25.380
它肯定是一个跨语请求嘛

20:25.380 --> 20:26.420
那么我们现在判断一下

20:26.420 --> 20:26.980
那个语语呢

20:26.980 --> 20:28.260
再不在我们那个数组里边

20:28.260 --> 20:28.500
对吧

20:28.500 --> 20:30.260
我们再来一个并且呗

20:30.260 --> 20:31.220
并且什么呢

20:31.220 --> 20:33.540
Rake.headers的什么呢

20:33.540 --> 20:34.420
就是Allow

20:35.460 --> 20:37.620
AllowOranges Include

20:37.620 --> 20:39.700
包含什么呢

20:39.700 --> 20:42.100
Rake.headers.orange

20:42.100 --> 20:43.220
对不对

20:43.220 --> 20:44.820
如果说存在这个headers里边

20:44.820 --> 20:46.180
然后又包含它

20:46.180 --> 20:46.900
那么我们就是

20:46.900 --> 20:48.100
这就是跨语呗

20:48.260 --> 20:49.300
如果说允许的话

20:49.300 --> 20:50.100
我们怎么办

20:50.100 --> 20:51.060
是不是

20:51.060 --> 20:53.460
我们就给Race

20:53.460 --> 20:55.860
享用里边加上一个

20:55.860 --> 20:56.820
加上一个什么呢

20:56.820 --> 20:58.020
就headers

20:58.020 --> 20:59.780
给它设置一下一个享用头

20:59.780 --> 21:01.780
享用头设置什么呢

21:01.780 --> 21:02.980
Auxes

21:02.980 --> 21:04.660
Auxes

21:04.660 --> 21:09.540
ControlAllowOranges

21:09.540 --> 21:10.740
设置为什么值呢

21:10.740 --> 21:12.260
就可以直接把它设置为这个值

21:12.260 --> 21:12.820
对吧

21:12.820 --> 21:14.340
你既然我就在允许里

21:14.340 --> 21:14.660
OK

21:14.660 --> 21:16.180
那么我就设置为这个值

21:16.180 --> 21:17.940
你可以用这种方式来做

21:17.940 --> 21:19.380
最后无论如何

21:19.380 --> 21:21.940
我们都可以移交给那个next

21:23.220 --> 21:24.740
移交nest来处理

21:25.540 --> 21:25.940
对不对

21:25.940 --> 21:26.420
就完事了

21:27.700 --> 21:29.540
当然如果说你不允许跨语的话

21:29.540 --> 21:30.340
不允许跨语的话

21:30.340 --> 21:32.340
那么我们还可以在这里边判断

21:32.340 --> 21:32.900
不允许跨语的话

21:32.900 --> 21:33.780
我有什么都不做

21:33.780 --> 21:34.340
就这样子

21:35.780 --> 21:36.580
好就写完了

21:36.580 --> 21:37.300
咱们再来看一下

21:39.630 --> 21:39.950
小心

21:41.070 --> 21:41.390
你看

21:42.110 --> 21:42.910
就得到结果了

21:42.910 --> 21:43.230
对吧

21:43.230 --> 21:44.990
只不过这个结果是403

21:44.990 --> 21:45.870
没有权限

21:45.870 --> 21:46.910
为什么没权限呢

21:46.910 --> 21:48.350
因为这个Cookie出了问题

21:48.350 --> 21:49.550
所以我们在这里暂时

21:49.550 --> 21:50.910
先把之前的权限给去掉

21:51.550 --> 21:52.350
把这个权限

21:52.350 --> 21:54.750
把这个获取这个学生的权限

21:54.750 --> 21:55.390
给去掉

21:55.390 --> 21:56.030
不需要权限

21:56.830 --> 21:58.030
你看是不是拿到数据了

21:58.670 --> 21:58.990
对吧

21:59.870 --> 22:00.430
拿到数据了

22:01.550 --> 22:02.910
那么这就是这个的

22:02.910 --> 22:03.870
这个这里的情况

22:04.670 --> 22:05.310
这是这一块

22:07.630 --> 22:08.350
然后呢

22:08.350 --> 22:08.990
我们再来看

22:12.690 --> 22:13.570
这是简单请求

22:16.160 --> 22:16.480
这边

22:17.360 --> 22:19.440
第二个需要预见的请求

22:20.400 --> 22:22.960
什么时候就叫做需要预见的请求呢

22:22.960 --> 22:25.280
只要你不是简单请求

22:25.280 --> 22:27.760
那么你就是一个需要预见的请求

22:28.800 --> 22:30.640
那么这又是什么情况呢

22:30.640 --> 22:32.720
就是如果说你是简单请求的话

22:32.720 --> 22:33.760
服务器呢

22:33.760 --> 22:34.640
认为威胁不大

22:35.280 --> 22:35.760
但是呢

22:35.760 --> 22:38.000
如果说你是一个需要预见的请求的话

22:38.000 --> 22:40.160
就是不满足简单请求的条件

22:40.160 --> 22:41.840
你增加了一个额外的消息头

22:42.800 --> 22:43.920
你加了

22:43.920 --> 22:46.160
你设置一个特殊的content type

22:46.880 --> 22:48.400
或者是你是用了一个特殊的

22:48.880 --> 22:49.840
请求方法

22:49.840 --> 22:50.880
那么这种情况呢

22:50.880 --> 22:52.720
它就是一个带有预见的请求

22:52.720 --> 22:53.520
那么预见的请求

22:53.520 --> 22:54.880
它是按照这样的模式来进行的

22:55.520 --> 22:56.480
浏览器

22:56.480 --> 22:58.560
首先不发送真实的请求

22:58.560 --> 23:00.320
首先发送一个预见请求

23:00.320 --> 23:01.280
询问服务器

23:02.000 --> 23:02.720
我来了

23:02.720 --> 23:03.440
我要干嘛

23:03.440 --> 23:04.800
我表明身份

23:04.800 --> 23:05.680
我要干嘛

23:05.680 --> 23:06.720
到底要做什么事情

23:07.280 --> 23:09.680
首先问服务器是否允许

23:10.720 --> 23:12.960
如果说服务器允许了过后

23:12.960 --> 23:15.680
才去真正的发送这个真实请求

23:15.680 --> 23:17.600
直到服务器完成真实的响应

23:17.680 --> 23:18.640
这具体的过程是这样子

23:19.840 --> 23:21.040
还是一个例子

23:21.040 --> 23:22.560
比方说我这个右面东呢

23:22.560 --> 23:23.920
有下面的代码

23:23.920 --> 23:25.520
我去请求这个user

23:25.520 --> 23:26.960
表示注册一个用户

23:26.960 --> 23:28.560
然后请求方法suppose

23:28.560 --> 23:29.440
给它加了一些header

23:30.480 --> 23:31.760
给它改了content type

23:31.760 --> 23:33.040
所以不是一个简单请求了

23:33.040 --> 23:33.600
对吧

23:33.600 --> 23:34.720
然后给它加了一个body

23:34.720 --> 23:36.960
body就是一个阶层数据

23:37.840 --> 23:39.440
浏览器发现它不是一个简单请求

23:39.440 --> 23:41.040
于是按照下面的流程

23:41.040 --> 23:41.920
跟服务基因交互

23:48.270 --> 23:48.590
第一步

23:49.550 --> 23:51.790
浏览器首先发送一个预检

23:51.790 --> 23:52.990
首先检查一下

23:52.990 --> 23:54.430
我问一下服务器

23:54.430 --> 23:55.950
我这样做到底行不行

23:55.950 --> 23:56.750
你给我说一声

23:57.390 --> 23:58.750
这个预检请求

23:58.750 --> 24:00.030
它是没有任何请求体的

24:00.030 --> 24:01.950
就是通过消息头给它带一些信息

24:02.670 --> 24:03.310
可以看出

24:03.310 --> 24:03.870
这个请求

24:04.590 --> 24:06.030
不是我们发送的真实请求

24:06.670 --> 24:07.710
而且请求所中

24:07.710 --> 24:08.750
不包含我们的响应头

24:08.750 --> 24:09.390
也没有消息体

24:09.390 --> 24:10.270
这是个预检请求

24:10.270 --> 24:11.870
目的目的就是询问服务器

24:13.310 --> 24:15.230
预检请求它没有请求体

24:15.230 --> 24:15.630
所以说

24:16.030 --> 24:18.350
它是主要是询问

24:18.910 --> 24:19.870
它有上面的特征

24:19.870 --> 24:20.510
一个可看

24:20.510 --> 24:21.630
首先是请求方法

24:21.630 --> 24:22.510
它是OB型式

24:23.710 --> 24:25.070
就专门做预检请求的

24:25.790 --> 24:26.750
它没有消息体

24:26.750 --> 24:27.870
没有请求体

24:27.870 --> 24:30.510
请求头中它包含一些字段

24:30.510 --> 24:31.950
叫做一个是orange

24:31.950 --> 24:32.910
还是一样的

24:32.910 --> 24:33.950
一样的意思

24:33.950 --> 24:35.630
表明我是哪个源

24:36.270 --> 24:36.830
我来了

24:36.830 --> 24:38.510
然后接下来

24:38.510 --> 24:39.630
这个字段

24:40.350 --> 24:44.270
表示访问控制请求的方法

24:44.350 --> 24:45.630
就是我要请求理

24:45.630 --> 24:46.750
马上要请求理了

24:46.750 --> 24:47.870
我会用一个poster

24:47.870 --> 24:48.750
方法来请求理

24:49.310 --> 24:50.350
你看这里是不是poster

24:50.350 --> 24:50.670
请求

24:51.470 --> 24:52.510
表明我是要用poster

24:52.510 --> 24:53.390
方法来请求理

24:53.950 --> 24:54.830
然后还有这个

24:54.830 --> 24:55.950
sys control

24:55.950 --> 24:57.230
array quiz headers

24:57.230 --> 24:58.030
表明了

24:58.030 --> 24:59.150
我不仅要用poster

24:59.150 --> 24:59.870
方法请求理

24:59.870 --> 25:00.750
我还有一些

25:01.310 --> 25:02.750
可能会造成一些

25:03.230 --> 25:05.150
可能会有些意想不到的

25:05.150 --> 25:05.950
请求头

25:05.950 --> 25:07.550
比方说有这个ab

25:07.550 --> 25:08.430
还有content type

25:08.430 --> 25:09.070
对吧

25:09.070 --> 25:10.670
这些都不是

25:10.670 --> 25:11.710
标准的请求头

25:12.270 --> 25:12.510
那么

25:13.230 --> 25:14.750
把这种都带给你

25:14.750 --> 25:15.950
行不行

25:15.950 --> 25:16.910
问一下你

25:16.910 --> 25:17.870
这是第一步

25:18.750 --> 25:19.950
好第二步

25:19.950 --> 25:20.990
服务器如果说允许

25:20.990 --> 25:21.950
如果说不允许的话

25:21.950 --> 25:23.390
那么这里随便一个东西不写

25:23.390 --> 25:24.510
然后它都不允许

25:26.190 --> 25:27.550
或者是一个东西对不上

25:27.550 --> 25:28.190
它都不允许

25:29.070 --> 25:31.230
服务器如果说允许的话

25:31.230 --> 25:32.590
那么它就会这样子响应

25:33.630 --> 25:35.310
响应个200ok就行了

25:35.310 --> 25:36.990
然后主要是想用头里边

25:36.990 --> 25:38.030
响应体不用写

25:38.030 --> 25:39.230
不用写响应体

25:39.230 --> 25:40.190
然后响应头里边

25:40.190 --> 25:41.470
该带上这么一些东西

25:41.550 --> 25:43.230
第一个alot orange

25:43.230 --> 25:44.270
我允许的欲

25:44.270 --> 25:45.710
所以一样的跟简单请求一样

25:46.430 --> 25:47.630
可以写信号也可以写这个

25:48.430 --> 25:50.030
然后我允许的方法

25:50.750 --> 25:52.110
我允许的请求方法

25:52.110 --> 25:53.550
你不是要请求pose吗

25:53.550 --> 25:54.750
我就行

25:54.750 --> 25:55.470
pose可以

25:55.470 --> 25:56.590
我就告诉你pose可以

25:57.550 --> 25:59.150
然后我要请

25:59.150 --> 26:00.830
我允许的请求头

26:00.830 --> 26:01.950
你不是要请求头

26:01.950 --> 26:02.910
你比如说带了一些

26:02.910 --> 26:03.550
意想不到的东西

26:03.550 --> 26:04.910
ab content type

26:04.910 --> 26:05.790
我说没问题

26:05.790 --> 26:07.070
这些都是我想要的

26:07.070 --> 26:07.470
ok

26:07.470 --> 26:08.350
那么告诉客服团

26:08.350 --> 26:08.830
没问题

26:09.550 --> 26:11.790
也可以顺带告诉他这个东西

26:11.790 --> 26:12.910
这个东西可以写可不可以

26:13.630 --> 26:14.670
顺带告诉他这个东西

26:14.670 --> 26:15.070
就是说

26:15.790 --> 26:17.950
以后我们都是老朋友了

26:17.950 --> 26:18.510
对吧

26:18.510 --> 26:19.630
经常打交道

26:19.630 --> 26:21.790
所以说你以后就不用问我了

26:21.790 --> 26:23.550
在多长时间内不用问我了

26:23.550 --> 26:24.590
8万

26:24.590 --> 26:27.790
就是这么多秒内

26:27.790 --> 26:28.750
就是一天的时间

26:28.750 --> 26:30.110
我这里写的一天

26:30.110 --> 26:31.710
就这么多秒之内

26:31.710 --> 26:32.910
你可以不用去问我了

26:34.030 --> 26:36.350
如果说之后你还是同样的

26:36.430 --> 26:38.350
带有这些请求头

26:38.350 --> 26:39.550
或者是pose的请求

26:39.550 --> 26:40.430
欲也是一样的

26:40.430 --> 26:41.470
你留让器不用问了

26:41.470 --> 26:42.750
你直接来吧

26:42.750 --> 26:44.350
直接就挑过前两步

26:44.350 --> 26:45.230
就这么个意思

26:45.230 --> 26:46.190
有点那些就缓存

26:46.990 --> 26:48.270
是前两步对吧

26:48.270 --> 26:49.790
欲减完成之后

26:50.510 --> 26:52.750
留让器他要发动真实请求了

26:52.750 --> 26:53.790
既然服务器都说了

26:53.790 --> 26:54.350
没问题

26:54.350 --> 26:55.550
老大哥都说了

26:55.550 --> 26:56.030
没问题

26:56.030 --> 26:57.550
那么我就给他发动真实请求

26:58.190 --> 26:59.870
然后真实请求是一样的

26:59.870 --> 27:01.950
跟简单请求过程完全一样

27:01.950 --> 27:02.830
带一个orange

27:02.830 --> 27:04.830
服务器还是要给他想行这个东西

27:05.790 --> 27:06.430
简单

27:06.430 --> 27:07.710
因为他有可能有缓存

27:07.710 --> 27:09.470
万一服务器又不运行

27:09.470 --> 27:11.230
所以说还是要带这个东西

27:11.230 --> 27:12.030
就完了

27:12.030 --> 27:13.470
整个过程就这样子

27:13.470 --> 27:15.390
首先欲减响应

27:15.390 --> 27:16.990
然后真实请求响应

27:16.990 --> 27:17.630
完了

27:17.630 --> 27:18.670
就带

27:18.670 --> 27:20.030
就是这个是

27:20.030 --> 27:21.310
带欲减的请求

27:21.310 --> 27:22.270
咱们来试一下

27:23.070 --> 27:24.510
来处理带欲减的请求

27:24.510 --> 27:25.470
你看刚才就有问题

27:27.150 --> 27:28.110
刚才的这个地方

27:28.110 --> 27:31.150
我们是简单请求对吧

27:31.150 --> 27:32.350
是没问题的

27:32.350 --> 27:33.550
好 接下来我们来带

27:34.030 --> 27:35.550
搞一个就是

27:35.550 --> 27:36.270
欲减请求

27:37.870 --> 27:39.070
还是用废棋API

27:39.070 --> 27:39.470
废棋

27:41.470 --> 27:43.310
ADP还是这个例子

27:43.310 --> 27:45.630
localhost 5008

27:46.670 --> 27:48.030
API student

27:48.750 --> 27:50.270
比方说我们添加一个学生

27:51.150 --> 27:52.510
添加学生我看一下

27:52.510 --> 27:54.190
是不是需要全线

27:55.070 --> 27:55.630
全线呢

27:55.630 --> 27:56.350
这是对

27:56.350 --> 27:57.550
添加学生是需要全线的

27:57.550 --> 27:57.870
来吧

27:58.830 --> 27:59.310
message

28:00.110 --> 28:00.430
post

28:01.390 --> 28:02.990
而且呢我给他改动的

28:02.990 --> 28:04.030
content type

28:04.030 --> 28:04.910
我们headers

28:06.350 --> 28:06.990
改动一下

28:07.630 --> 28:09.470
content type

28:10.190 --> 28:10.590
v

28:11.310 --> 28:12.350
application

28:13.070 --> 28:13.870
接上

28:13.870 --> 28:15.630
然后再随便加一个请求头吧

28:15.630 --> 28:16.110
比方说

28:16.910 --> 28:17.630
随便来一个吧

28:18.990 --> 28:19.950
随便加一个

28:19.950 --> 28:21.230
这么个意思就行了

28:21.230 --> 28:22.190
好 headers

28:22.190 --> 28:23.070
然后还有什么东西

28:24.110 --> 28:24.830
好像没啥了

28:25.470 --> 28:26.190
好像没啥了

28:27.470 --> 28:28.350
我们来看一下

28:28.350 --> 28:29.070
修改一个学生

28:30.510 --> 28:31.070
都行

28:31.070 --> 28:32.590
这就不是一个简单请求了

28:32.590 --> 28:33.070
对吧

28:33.070 --> 28:33.870
然后来闻Z

28:36.910 --> 28:37.470
respe

28:37.470 --> 28:38.110
接上

28:39.150 --> 28:39.950
然后再Z

28:40.990 --> 28:41.390
输出

28:42.990 --> 28:43.950
好看一下这种情况

28:44.590 --> 28:45.070
到这边来

28:45.070 --> 28:45.390
刷新

28:45.950 --> 28:46.990
所以又出问题了

28:46.990 --> 28:47.710
对吧

28:47.710 --> 28:49.550
刚才简单请求已经搞定了

28:49.550 --> 28:50.830
但是现在又出问题了

28:51.470 --> 28:52.110
他说什么呢

28:52.750 --> 28:53.950
去请求这个地址的时候

28:53.950 --> 28:54.910
from orangie

28:54.910 --> 28:55.710
从这个圆

28:55.710 --> 28:55.950
lau

28:55.950 --> 28:56.510
这个圆

28:56.510 --> 28:57.790
因为我这就是文件打开

28:59.150 --> 29:00.430
被CLS

29:00.430 --> 29:01.950
就是规范阻止了

29:02.750 --> 29:03.150
为什么呢

29:03.150 --> 29:04.350
因为请求头里边

29:06.750 --> 29:07.630
就是服务器呢

29:07.630 --> 29:08.990
他不允许我这个

29:08.990 --> 29:10.270
就是不允许我这个

29:10.910 --> 29:11.950
这个这个是吗

29:13.070 --> 29:14.110
而 not headers

29:14.110 --> 29:16.110
他不允许我这个额外的请求方

29:16.270 --> 29:16.990
请求头

29:16.990 --> 29:18.670
因为服务器没有明确告诉我

29:18.670 --> 29:20.030
我们来看一下这个请求过程

29:20.750 --> 29:21.470
这得刷新

29:21.470 --> 29:22.110
你看这里

29:23.950 --> 29:25.710
他都没给你显示出来了

29:25.710 --> 29:26.510
对吧

29:26.510 --> 29:27.630
他都没给你显示

29:27.630 --> 29:28.750
没有给你显示个预件

29:28.750 --> 29:29.870
这个预件的内部完成了

29:29.870 --> 29:30.990
他没有给你显示

29:30.990 --> 29:31.550
那行吧

29:31.630 --> 29:32.750
那咱们在这边

29:33.870 --> 29:34.590
到服务器来

29:34.590 --> 29:34.990
这边来

29:36.110 --> 29:36.750
是一样的

29:37.710 --> 29:39.230
我们在这里可以处理

29:40.990 --> 29:43.550
处理预检请求

29:44.990 --> 29:46.190
预检请求怎么处理呢

29:46.190 --> 29:46.830
还是一样的

29:47.950 --> 29:49.230
我首先判断一下

29:49.230 --> 29:50.670
你的rake的method

29:50.670 --> 29:51.550
非常简单

29:51.550 --> 29:52.750
是不是等于什么

29:52.750 --> 29:53.550
options

29:54.750 --> 29:55.390
你看吧

29:55.390 --> 29:56.270
我们这里输出

29:56.830 --> 29:59.790
这是一个预检请求

30:00.350 --> 30:00.910
对吧

30:00.990 --> 30:02.430
我们首先判断一下这个

30:02.430 --> 30:04.430
这是不是预检请求

30:04.430 --> 30:05.150
我们来试一下

30:06.110 --> 30:07.070
这个请空一下

30:08.510 --> 30:08.910
刷新

30:09.790 --> 30:10.510
这边你看

30:10.510 --> 30:11.790
所以预检请求

30:11.790 --> 30:12.830
说明了你的请求方法

30:12.830 --> 30:13.710
是不是options

30:14.190 --> 30:14.510
对不对

30:15.150 --> 30:16.430
那么这种情况下

30:16.430 --> 30:17.950
我怎么来玩那个事情

30:17.950 --> 30:19.230
他会告诉我什么东西

30:19.230 --> 30:20.750
他是不是会告诉我这三个东西

30:23.390 --> 30:24.990
他会告诉我这三个东西

30:24.990 --> 30:25.710
对吧

30:25.710 --> 30:26.430
然后我做什么

30:26.430 --> 30:27.950
这个东西我们后边都会做

30:27.950 --> 30:28.990
Origin的处理的

30:28.990 --> 30:29.950
都是统一的

30:30.030 --> 30:31.310
对Origin的处理是统一的

30:31.950 --> 30:33.150
那么这个地方

30:33.150 --> 30:33.710
这两个

30:33.710 --> 30:35.470
是不是我们直接把这个请求里边的

30:35.470 --> 30:36.350
这个东西拿到

30:36.350 --> 30:38.110
给他响应过去就完事了

30:38.110 --> 30:39.070
只要我允许

30:39.070 --> 30:40.190
我就给他响应过去

30:40.190 --> 30:40.830
来吧

30:40.830 --> 30:41.790
我们这里就可以用

30:41.790 --> 30:42.990
res header

30:45.710 --> 30:46.350
这里是一个

30:46.350 --> 30:48.190
arxs control request a method

30:49.230 --> 30:50.350
加上arxs

30:51.390 --> 30:52.110
直接复制一下

30:54.510 --> 30:55.470
这是第一个

30:57.310 --> 30:57.710
不是

30:57.710 --> 30:58.590
这个是写过的

30:59.070 --> 30:59.390
这个

31:02.380 --> 31:03.740
然后把它设置为啥呢

31:05.740 --> 31:06.620
我把它设置为啥呢

31:06.620 --> 31:08.540
我把它设置为跟那个一样

31:08.540 --> 31:10.380
跟你请求的东西一样

31:10.380 --> 31:11.100
你请求的时候

31:11.100 --> 31:12.860
不是带一个这个东西过来吗

31:12.860 --> 31:13.420
对不对

31:13.420 --> 31:14.060
你看啊

31:14.060 --> 31:14.700
请求的时候

31:14.700 --> 31:15.900
是不是带这个东西过来

31:15.900 --> 31:16.300
哎

31:16.300 --> 31:17.260
我跟你设置一样

31:19.420 --> 31:20.060
我们可以从

31:20.060 --> 31:21.980
reg headers

31:23.500 --> 31:24.060
然后呢

31:25.900 --> 31:26.300
取到

31:26.940 --> 31:27.340
这个值

31:28.220 --> 31:28.540
对吧

31:28.540 --> 31:29.260
这是一个

31:29.260 --> 31:30.060
然后再来

31:32.720 --> 31:33.120
两个

31:33.120 --> 31:33.440
三个

31:34.800 --> 31:35.120
第二个

31:36.080 --> 31:37.040
headers

31:37.040 --> 31:37.680
一个是method

31:37.680 --> 31:38.400
一个是headers

31:41.810 --> 31:42.210
headers

31:45.730 --> 31:46.850
跟这边的就是

31:47.730 --> 31:47.810
哦

31:47.810 --> 31:48.770
这里写错了吧

31:48.770 --> 31:50.450
这边是request headers

31:51.730 --> 31:53.170
这边是allow headers

31:54.850 --> 31:55.570
还有大小写

31:55.570 --> 31:56.050
无所谓的

31:58.290 --> 31:58.690
好

31:58.690 --> 31:58.930
OK

31:59.810 --> 32:00.610
那么现在呢

32:00.610 --> 32:01.570
完成这两个对吧

32:01.570 --> 32:02.130
就完成了

32:02.690 --> 32:03.730
就完成了

32:03.730 --> 32:04.290
咱们来看一下

32:05.490 --> 32:05.890
刷新

32:07.330 --> 32:07.970
还有问题

32:09.010 --> 32:09.650
还有问题

32:11.490 --> 32:12.770
我看一下哪里有问题啊

32:13.890 --> 32:14.210
哦

32:15.170 --> 32:15.810
哎不对啊

32:15.810 --> 32:16.770
没问题了啊

32:16.770 --> 32:17.410
我看一下啊

32:18.370 --> 32:19.330
应该是没问题了

32:20.770 --> 32:21.970
还有问题

32:21.970 --> 32:23.330
哎我看一下怎么把那个

32:26.460 --> 32:27.180
我想一下啊

32:27.180 --> 32:27.980
我们在这里

32:27.980 --> 32:29.180
这里这个断点调试一下

32:31.520 --> 32:32.560
调试起来

32:33.680 --> 32:34.080
放心

32:34.960 --> 32:36.720
这是我们看一下这个request里边啊

32:37.360 --> 32:38.160
它的headers

32:40.990 --> 32:43.550
excess control requests headers

32:45.070 --> 32:45.710
没问题啊

32:45.710 --> 32:47.390
excess control requests headers

32:48.030 --> 32:48.590
headers

32:48.590 --> 32:48.990
在这

32:49.390 --> 32:50.510
然后呢request

32:50.510 --> 32:51.630
method都没问题

32:51.630 --> 32:55.470
我看一下

32:55.470 --> 32:56.190
没问题对吧

32:56.750 --> 32:57.550
这两个都是没问题的

32:57.550 --> 32:57.870
你看

32:57.870 --> 32:58.510
传递到a

32:59.150 --> 32:59.870
content type

32:59.870 --> 33:00.430
对不对

33:00.430 --> 33:01.230
是不是都没问题

33:02.030 --> 33:02.750
把读出来

33:03.550 --> 33:04.110
读出来

33:04.110 --> 33:04.750
然后呢

33:04.750 --> 33:05.790
orange is now

33:05.790 --> 33:06.590
啊也没问题

33:07.790 --> 33:08.190
呃

33:09.550 --> 33:10.910
我这里想印header

33:10.910 --> 33:12.190
啊给它加了这两个header

33:13.230 --> 33:15.150
excess control allow method

33:15.150 --> 33:17.390
excess control headers

33:17.390 --> 33:18.030
都没问题啊

33:19.870 --> 33:20.270
啊

33:20.270 --> 33:20.990
然后呢下一步

33:22.670 --> 33:23.310
下一步

33:23.310 --> 33:23.790
下一步

33:24.350 --> 33:25.310
我看一下request

33:27.970 --> 33:28.770
再加上两个了

33:28.770 --> 33:29.170
看到没

33:30.690 --> 33:31.810
orange header

33:31.810 --> 33:33.170
哎我这里得到是undefend

33:34.050 --> 33:35.650
哎为什么得到是undefend呢

33:37.170 --> 33:38.850
哦我这里多了多了这个东西

33:39.650 --> 33:40.530
啊多了这个东西

33:41.090 --> 33:41.730
好再来

33:43.570 --> 33:44.690
保存啊再来

33:45.250 --> 33:45.650
刷新

33:46.290 --> 33:47.490
啊这还有问题啊

33:47.490 --> 33:48.930
还有问题我们再来再来调试

33:50.770 --> 33:51.250
刷新

33:53.010 --> 33:53.410
再来

33:54.530 --> 33:55.330
呃下一步

33:57.170 --> 33:57.570
下一步

34:00.160 --> 34:01.440
这边再来啊再看

34:02.160 --> 34:03.760
我想印头

34:03.760 --> 34:04.560
想印头

34:05.120 --> 34:06.080
还是undefend

34:06.960 --> 34:08.320
我这两个地方取错了吗

34:09.040 --> 34:09.920
excess control

34:10.640 --> 34:13.040
request headers

34:14.320 --> 34:14.800
取错了

34:15.760 --> 34:17.680
excess control

34:18.240 --> 34:19.600
request headers

34:21.120 --> 34:22.160
哎这里难道区分大了

34:22.160 --> 34:23.200
也帮我试一下

34:23.200 --> 34:24.080
把别人小写

34:24.800 --> 34:26.800
c r m

34:27.600 --> 34:28.560
哦有可能会去

34:28.560 --> 34:29.920
他这里有可能区分大了

34:29.920 --> 34:31.520
写哦这这里是这样子

34:31.520 --> 34:33.920
他把他把他封装到对象里边去了

34:33.920 --> 34:34.880
封装对象里边去了

34:34.880 --> 34:35.520
他就必须要去

34:35.520 --> 34:36.480
他就会区分大了

34:36.480 --> 34:37.120
写了

34:37.120 --> 34:38.480
啊本来是不区分的啊

34:39.040 --> 34:40.160
一般是在不区分的

34:40.160 --> 34:41.680
ok那没问题了对吧

34:41.680 --> 34:42.400
没问题了

34:42.400 --> 34:43.840
至少没有跨越问题了对吧

34:43.920 --> 34:44.880
只是有一个什么问题

34:44.880 --> 34:46.800
只是有一个就是那个

34:46.800 --> 34:47.600
cookie的问题

34:47.600 --> 34:49.040
因为我cookie没有带过去

34:49.040 --> 34:50.880
你看寝球的时候是没有带cookie过去的

34:51.680 --> 34:53.920
request是没有带cookie对不对

34:53.920 --> 34:55.200
所以说有cookie的问题啊

34:55.200 --> 34:55.600
但是呢

34:56.400 --> 34:57.840
跨越的问题已经没了

34:57.840 --> 34:58.160
对不对

34:58.160 --> 34:59.280
所以得到相应结果了

34:59.280 --> 35:00.880
好这是预检寝球啊

35:02.160 --> 35:02.480
好

35:03.120 --> 35:03.600
最后一个

35:04.080 --> 35:06.640
就是附带身份平正的寝球

35:06.640 --> 35:07.600
就是cookie的问题了

35:09.040 --> 35:10.160
默认情况下呢

35:10.160 --> 35:11.680
这个阿加克斯跨越啊

35:11.680 --> 35:13.040
他并不会附带cookie

35:13.840 --> 35:15.680
那么这样子就会遇到刚才的问题啊

35:15.680 --> 35:17.280
需要一些全线的操作了

35:17.280 --> 35:19.280
他就就出了问题了

35:19.280 --> 35:20.560
那么这种情况下呢

35:20.560 --> 35:22.160
你就需要附带身份平正的

35:23.040 --> 35:24.720
那么为什么不带身份平正的

35:24.720 --> 35:25.520
因为身份平正的

35:25.520 --> 35:26.480
还要求更高啊

35:26.480 --> 35:28.240
他是不是可以做的事情更多了

35:28.240 --> 35:29.920
所以他一般不带身份平正的

35:29.920 --> 35:31.040
那么你可不可以带了

35:31.040 --> 35:32.160
可以带啊

35:32.160 --> 35:34.160
如果说你用那个传统的方式

35:34.160 --> 35:35.200
加上这么一个属性

35:36.000 --> 35:38.080
跨越的时候就会带了啊

35:38.080 --> 35:39.440
如果说你用非且api的话

35:39.440 --> 35:42.000
加上这么一个credential

35:42.160 --> 35:43.120
credential

35:43.120 --> 35:44.640
把加成include

35:44.640 --> 35:45.200
来试一下

35:47.040 --> 35:47.440
这边

35:48.880 --> 35:50.240
加上这么一个配置

35:50.240 --> 35:51.760
叫做incretuals

35:52.960 --> 35:53.760
提示的啊

35:54.480 --> 35:55.040
cretuals

35:55.920 --> 35:56.880
credentials

35:56.880 --> 35:57.920
把它设置为include

35:57.920 --> 35:58.720
它就三个字

35:58.720 --> 35:59.680
一个字是Omex

35:59.680 --> 36:00.400
Omex就不带

36:01.040 --> 36:01.680
不带

36:01.680 --> 36:02.800
我永远都不带cookie

36:03.840 --> 36:04.720
semi-orange

36:04.720 --> 36:05.440
表示的是

36:05.440 --> 36:06.400
只有同域

36:06.400 --> 36:07.520
就是没有跨域的时候

36:07.520 --> 36:08.320
我才会带cookie

36:09.440 --> 36:10.160
默认就这个

36:10.720 --> 36:11.360
include呢

36:11.440 --> 36:12.560
它是始终带cookie

36:12.560 --> 36:13.280
就这么个意思

36:14.080 --> 36:14.240
好

36:14.240 --> 36:15.360
那我们把cookie带上

36:16.320 --> 36:16.560
好

36:16.560 --> 36:17.120
咱们再来看

36:17.840 --> 36:18.320
刷新

36:18.320 --> 36:19.680
你看又遇到跨域问题了

36:19.680 --> 36:21.280
跨域没完没了

36:21.280 --> 36:22.480
又遇到跨域问题了

36:22.480 --> 36:24.320
那这又是怎么回事呢

36:24.320 --> 36:25.360
到底是怎么回事呢

36:25.360 --> 36:25.920
这个东西

36:26.400 --> 36:27.120
咱们又来看

36:29.200 --> 36:29.760
它是这样

36:30.320 --> 36:31.840
如果说带了cookie过后

36:31.840 --> 36:33.360
它要求更加严格了

36:33.840 --> 36:34.400
服务器

36:34.400 --> 36:35.840
你必须要明确告诉

36:35.840 --> 36:37.680
就服务器必须要明确告诉你

36:37.920 --> 36:38.880
允许cookie

36:39.440 --> 36:40.400
允许cookie才行

36:40.640 --> 36:42.880
如果说服务器没有明确告诉你的话

36:42.880 --> 36:44.800
那么你带的cookie还是不允许

36:44.800 --> 36:46.000
还是有跨域问题

36:46.560 --> 36:47.200
所以说呢

36:47.200 --> 36:47.840
现在呢

36:47.840 --> 36:48.800
怎么来明确告诉呢

36:48.800 --> 36:49.360
非常简单

36:49.360 --> 36:51.360
你只要在服务器给它想印一个结果

36:51.840 --> 36:54.560
orsys control allow crashers

36:54.560 --> 36:55.600
把它设为to

36:55.600 --> 36:56.480
就行了

36:56.480 --> 36:58.320
那咱们在服务器这边设置一下

36:59.680 --> 37:00.000
这边

37:00.960 --> 37:01.520
设置一下吧

37:02.160 --> 37:02.480
就在这

37:02.960 --> 37:03.440
统一设置

37:04.320 --> 37:04.720
race

37:06.320 --> 37:06.640
header

37:09.060 --> 37:09.620
就这个东西

37:09.620 --> 37:10.660
把它设置一下

37:13.420 --> 37:13.660
好

37:13.740 --> 37:14.220
复制

37:15.740 --> 37:16.860
怎么老是带这个

37:18.780 --> 37:19.020
好

37:19.020 --> 37:19.820
把它设为什么

37:19.820 --> 37:20.540
设为处

37:20.540 --> 37:21.180
就完成了

37:22.540 --> 37:22.860
好

37:22.860 --> 37:23.500
接下来我们再看

37:24.060 --> 37:24.540
小心

37:25.020 --> 37:25.740
是没问题的

37:26.300 --> 37:26.780
对吧

37:26.940 --> 37:27.500
没问题的

37:27.900 --> 37:28.700
那么只是呢

37:28.700 --> 37:29.020
这边

37:30.300 --> 37:30.940
天降用户

37:30.940 --> 37:31.500
这些都没有写

37:31.500 --> 37:31.820
对不对

37:31.820 --> 37:32.220
没有写

37:32.220 --> 37:33.100
如果说写的话

37:33.100 --> 37:33.980
是不是都没问题了

37:34.460 --> 37:34.860
对吧

37:34.860 --> 37:35.100
好

37:35.100 --> 37:36.780
这就是整个的跨域过程

37:36.780 --> 37:37.340
就没了

37:38.620 --> 37:39.500
最后一个点呢

37:39.500 --> 37:40.380
我补充一点

37:40.380 --> 37:41.580
就额外的补充

37:41.580 --> 37:42.540
就是说目前

37:42.540 --> 37:43.420
跨域过后呢

37:43.740 --> 37:47.180
你服务器给你响应了一些信息

37:47.180 --> 37:47.740
但是呢

37:47.740 --> 37:49.900
既然是只能拿到一些基本的响应头

37:50.540 --> 37:51.980
拿不到一些额外的响应头

37:52.620 --> 37:55.900
如果说你要让扣端去拿到额外的响应头的话

37:55.900 --> 37:56.780
你可以去配置

37:56.780 --> 37:57.660
就在响应的时候

37:57.660 --> 37:58.380
再加一个

37:58.540 --> 37:59.500
再加一个响应头

37:59.500 --> 38:00.540
就告诉扣端

38:00.540 --> 38:02.300
你可以去取什么样的响应头

38:02.300 --> 38:02.700
告诉他

38:02.700 --> 38:03.500
你可以取这个

38:03.500 --> 38:04.140
也可以取这个

38:04.140 --> 38:04.700
也可以取这个

38:04.700 --> 38:05.260
只要我有

38:06.060 --> 38:06.380
OK

38:06.380 --> 38:07.500
就是这个补充就完事了

38:07.980 --> 38:08.140
好

38:08.140 --> 38:09.100
那么这就是

38:09.100 --> 38:09.900
这里后面的内容

38:10.460 --> 38:11.420
讲了就是那个

38:12.380 --> 38:13.580
CLS

38:13.580 --> 38:15.580
有这种跨域方式的它的原理

38:15.580 --> 38:16.540
咱们下一步可能

38:16.540 --> 38:18.300
其实我们现在是手续代码对吧

38:18.300 --> 38:19.900
所以那么其实也没啥问题

38:19.900 --> 38:21.820
我们下一步可能可以去了解一个

38:21.820 --> 38:22.540
第三方库

38:22.540 --> 38:24.860
他已经帮你搞定了这个跨域问题了

38:24.860 --> 38:25.820
聊一下就行了

38:25.820 --> 38:27.100
咱们这里可以讲到这

38:27.100 --> 38:28.780
讲一下原理就可以了

