WEBVTT

00:00.500 --> 00:03.500
好 这些课咱们聊一聊关于魔力数据

00:03.500 --> 00:08.500
之所以讲这个课是因为我有好几次直播课

00:08.500 --> 00:12.500
发现同学们对这个魔力数据好像没有接触过

00:12.500 --> 00:15.500
这个应该是第三方库

00:15.500 --> 00:19.500
就是跟杰克瑞那些讲了之后就应该讲的

00:19.500 --> 00:23.500
但是前面的课我也不太清楚是一个什么样的情况

00:23.500 --> 00:24.500
没关系 这就是小事

00:24.500 --> 00:26.500
这东西也很简单 一节课就搞定了

00:26.500 --> 00:28.500
非常简单 给大家说一下

00:28.500 --> 00:31.500
这些课的东西跟那个Low的接识没关系

00:31.500 --> 00:33.500
它可以在Low的接识里边用

00:33.500 --> 00:35.500
也可以在浏览器里边用 都可以用的

00:35.500 --> 00:37.500
所以说你学的这一课到处可以用

00:37.500 --> 00:39.500
如果说你有需要的话都可以用

00:39.500 --> 00:42.500
另外它跟那个什么数据库啊

00:42.500 --> 00:44.500
sqlize 卖sql 没有一毛钱关系

00:44.500 --> 00:47.500
都是一个完整的独立的一个库

00:47.500 --> 00:49.500
它用了干嘛呢 它用了魔力数据的

00:49.500 --> 00:52.500
就是有的时候我们可能要做一些测试

00:52.500 --> 00:54.500
要拿一些数据做测试

00:54.500 --> 00:55.500
但是手上又没有数据

00:55.500 --> 00:56.500
那么这个时候呢

00:56.500 --> 00:58.500
我们就可以利用这个库来魔力一些数据

00:58.500 --> 00:59.500
当然魔力数据的话

00:59.500 --> 01:01.500
当然你可以自己去熟悉

01:01.500 --> 01:02.500
你写个数据

01:02.500 --> 01:03.500
或者写个对象你自己去魔力

01:03.500 --> 01:05.500
但是这个魔力的数据太少了

01:05.500 --> 01:07.500
它这个库可以魔力大量的数据

01:07.500 --> 01:09.500
非常的方便 给大家看一下吧

01:09.500 --> 01:11.500
因为我们现在出现的场景就是

01:11.500 --> 01:13.500
咱们的数据库里边没它数据

01:13.500 --> 01:15.500
比方说像那个学生表里边

01:15.500 --> 01:17.500
这个表里边简直就没数据

01:17.500 --> 01:20.500
我这个表起码要加上个500-600-700条数据

01:20.500 --> 01:21.500
我要多加一点数据

01:21.500 --> 01:23.500
到时候我要去查询

01:23.500 --> 01:24.500
才能方便一点

01:24.500 --> 01:26.500
所以说像这个班级表还好说

01:26.500 --> 01:27.500
班级表呢

01:27.500 --> 01:29.500
我们自己手动就可以搞定了

01:29.500 --> 01:30.500
这个学生表呢

01:30.500 --> 01:32.500
我们要好好去弄一下

01:32.500 --> 01:34.500
我们这里先搞定班级表吧

01:34.500 --> 01:36.500
我们来看一下魔力数据这个库

01:37.500 --> 01:38.500
特别简单

01:38.500 --> 01:39.500
这个库呢它是这样子

01:39.500 --> 01:40.500
我给大家一个链接

01:40.500 --> 01:41.500
大家进去看就行了

01:41.500 --> 01:42.500
特别简单 叫moke.js

01:42.500 --> 01:44.500
我印象中好像这个是

01:44.500 --> 01:45.500
国人做的一个库

01:45.500 --> 01:46.500
特别

01:46.500 --> 01:47.500
反正我只要看到

01:47.500 --> 01:48.500
中国人做的库

01:48.500 --> 01:50.500
我就觉得心里面挺舒服的

01:50.500 --> 01:52.500
照中国的技术也在发展

01:52.500 --> 01:53.500
moke.js

01:53.500 --> 01:54.500
我们来看一下点开始

01:57.500 --> 01:59.500
然后首先安装它

01:59.500 --> 02:00.500
我们这里安装

02:00.500 --> 02:01.500
安装它

02:01.500 --> 02:02.500
mpm i

02:02.500 --> 02:04.500
moke.js

02:04.500 --> 02:05.500
安装就行了

02:05.500 --> 02:06.500
特别简单

02:06.500 --> 02:07.500
安装了好之后

02:07.500 --> 02:08.500
它告诉你呢

02:08.500 --> 02:10.500
用法也非常非常的简单

02:10.500 --> 02:11.500
你直接把导信用就行了

02:11.500 --> 02:12.500
比方说咱们这里呢

02:12.500 --> 02:14.500
有很多时候

02:14.500 --> 02:15.500
我们在做后端的时候

02:15.500 --> 02:16.500
可能都会磨的一些数据

02:16.500 --> 02:17.500
包括在做前端的时候

02:17.500 --> 02:19.500
有的时候也需要这样做

02:19.500 --> 02:20.500
我们这里新建个文件

02:20.500 --> 02:22.500
给他取个名字叫moke

02:22.500 --> 02:23.500
表示我们这里的

02:23.500 --> 02:24.500
做数据模拟

02:24.500 --> 02:26.500
首先我们这里一些新建个文件

02:26.500 --> 02:27.500
这个东西模拟一下数据

02:27.500 --> 02:28.500
后面就没什么用了

02:28.500 --> 02:29.500
可以放在这儿

02:29.500 --> 02:31.500
给他建一个文件

02:31.500 --> 02:33.500
叫moke class

02:33.500 --> 02:35.500
模拟班级数据

02:35.500 --> 02:36.500
那么这里边咋写

02:36.500 --> 02:38.500
那么首先导入这个moke.js

02:40.500 --> 02:41.500
require

02:42.500 --> 02:43.500
moke.js

02:43.500 --> 02:44.500
这个东西是通用的

02:44.500 --> 02:45.500
前端也可以用

02:45.500 --> 02:46.500
看一下

02:46.500 --> 02:47.500
那么怎么来用呢

02:47.500 --> 02:48.500
它这个里边

02:48.500 --> 02:49.500
它有一个函数

02:49.500 --> 02:50.500
有一个函数叫moke

02:50.500 --> 02:51.500
就是模拟一些数据

02:51.500 --> 02:53.500
那么这里边要传一个对象

02:54.500 --> 02:55.500
这个对象啥意思呢

02:55.500 --> 02:58.500
这个对象就是模拟的数据的

02:58.500 --> 02:59.500
就是格式

02:59.500 --> 03:01.500
模拟的数据格式

03:01.500 --> 03:02.500
相当于是一些配置

03:02.500 --> 03:03.500
怎么模拟数据

03:03.500 --> 03:04.500
模拟什么样的数据

03:04.500 --> 03:06.500
那么这个就是一个配置

03:06.500 --> 03:07.500
现在就没了

03:07.500 --> 03:08.500
比如说我们就这样用就完事了

03:08.500 --> 03:09.500
实际上它还可以拦截

03:09.500 --> 03:10.500
阿迪克斯请求

03:10.500 --> 03:12.500
就是模拟一个阿迪克斯请求

03:12.500 --> 03:13.500
这样的话

03:13.500 --> 03:14.500
发动阿迪克斯请求的话

03:14.500 --> 03:15.500
会被它拦截

03:15.500 --> 03:16.500
然后呢

03:16.500 --> 03:18.500
返回给你一个模拟数据

03:18.500 --> 03:19.500
什么这个东西呢

03:20.500 --> 03:21.500
我们一般

03:21.500 --> 03:23.500
我反正个人不太用

03:23.500 --> 03:24.500
因为如果说

03:24.500 --> 03:25.500
我们要模拟远程数据的话

03:25.500 --> 03:27.500
我们自己一般就打一个服务器

03:27.500 --> 03:28.500
反正前段都要服务器的嘛

03:28.500 --> 03:29.500
对不对

03:29.500 --> 03:30.500
前段打一个服务器的

03:30.500 --> 03:31.500
前段模拟一些数据

03:31.500 --> 03:32.500
给它返回

03:32.500 --> 03:33.500
这样子呢

03:33.500 --> 03:34.500
效果更加生实一点

03:34.500 --> 03:35.500
不过有兴趣的朋友

03:35.500 --> 03:36.500
也可以看一下

03:36.500 --> 03:37.500
它可以拦截阿迪克斯请求的

03:37.500 --> 03:38.500
我们这里来看一下

03:38.500 --> 03:39.500
因为它是中文的

03:39.500 --> 03:40.500
所以非常简单

03:40.500 --> 03:42.500
我们这里还是按照官方的写法

03:42.500 --> 03:43.500
都一样

03:43.500 --> 03:45.500
只是主持个变相名而已

03:45.500 --> 03:46.500
它就比个函数

03:46.500 --> 03:47.500
叫moke

03:47.500 --> 03:48.500
moke里面

03:48.500 --> 03:49.500
那么返回的是什么呢

03:49.500 --> 03:51.500
返回的就是模拟的结果

03:51.500 --> 03:53.500
返回的就是模拟结果

03:53.500 --> 03:54.500
好

03:54.500 --> 03:55.500
咱们来看一下吧

03:55.500 --> 03:56.500
那么这个配置里边

03:56.500 --> 03:57.500
怎么写呢

03:57.500 --> 03:58.500
如果啥都不写

03:58.500 --> 03:59.500
你看一下

03:59.500 --> 04:00.500
我们输出一下这个

04:01.500 --> 04:02.500
啥都不写

04:02.500 --> 04:03.500
我们这里呢

04:03.500 --> 04:04.500
运行

04:08.500 --> 04:09.500
你看

04:09.500 --> 04:10.500
模拟出来不就是一个对象吗

04:10.500 --> 04:11.500
对不对

04:11.500 --> 04:12.500
模拟出来就是个空对象

04:12.500 --> 04:13.500
但这个对象里边啥都没有

04:13.500 --> 04:14.500
我这是我们不喜欢看到的

04:14.500 --> 04:15.500
我们希望还是有点东西

04:15.500 --> 04:16.500
比方说

04:16.500 --> 04:17.500
我们要模拟一个班级

04:17.500 --> 04:19.500
班级的名称

04:19.500 --> 04:20.500
我们来看一下吧

04:20.500 --> 04:22.500
我们来首先来熟悉一下

04:22.500 --> 04:24.500
熟悉一下它里边的模拟内容

04:25.500 --> 04:27.500
它里边有很多很多的写法

04:27.500 --> 04:28.500
我看一下在哪呢

04:29.500 --> 04:30.500
在这个

04:30.500 --> 04:31.500
文档里边

04:31.500 --> 04:32.500
应该是

04:32.500 --> 04:33.500
应该在这

04:34.500 --> 04:35.500
我看一下

04:35.500 --> 04:36.500
视力

04:36.500 --> 04:39.700
我记得有个地方

04:39.700 --> 04:40.700
他说的非常非常清楚

04:41.700 --> 04:45.620
看一下

04:45.620 --> 04:46.620
这里说的很清楚了

04:47.620 --> 04:48.620
看这个比看文档舒服

04:49.620 --> 04:50.620
就是它模板

04:50.620 --> 04:51.620
模板里边

04:51.620 --> 04:52.620
这个对象里边

04:52.620 --> 04:53.620
无非就是属性名

04:53.620 --> 04:54.620
属性值

04:54.620 --> 04:55.620
对不对

04:55.620 --> 04:56.620
它属性名表示的什么意思呢

04:56.620 --> 04:57.620
表示的是

04:58.620 --> 04:59.620
我这个地方

04:59.620 --> 05:00.620
我这个对象里边

05:00.620 --> 05:01.620
它的属性名

05:02.620 --> 05:04.620
第二个属性值表示什么意思呢

05:04.620 --> 05:05.620
它的属性名

05:05.620 --> 05:06.620
它对应着值

05:06.620 --> 05:07.620
它生存的规则

05:07.620 --> 05:08.620
我给大家举个例子

05:08.620 --> 05:09.620
你看这里

05:09.620 --> 05:10.620
比方说

05:10.620 --> 05:12.620
它这里有一个这么一个东西

05:13.620 --> 05:14.620
我们从

05:14.620 --> 05:15.620
从简单开始吧

05:15.620 --> 05:17.620
比方说我们这里写个属性

05:18.620 --> 05:19.620
表示什么意思呢

05:19.620 --> 05:20.620
我模拟这个对象

05:20.620 --> 05:21.620
它有个属性NAME

05:21.620 --> 05:22.620
它的值是什么呢

05:22.620 --> 05:23.620
比方说只是ABC

05:24.620 --> 05:25.620
怎么来看一下吧

05:25.620 --> 05:26.620
这就非常简单了

05:26.620 --> 05:27.620
对吧

05:28.620 --> 05:30.620
它就出现了一个NAME属性值为ABC

05:30.620 --> 05:31.620
这个对象有什么用呢

05:31.620 --> 05:32.620
你看着

05:32.620 --> 05:34.620
它还有更多的很有趣的写法

05:34.620 --> 05:35.620
比方说我们这里NAME

05:35.620 --> 05:37.620
还可以给它这样的写

05:37.620 --> 05:38.620
后边写上规则

05:38.620 --> 05:39.620
就是一个书杠

05:39.620 --> 05:40.620
后边写上规则

05:41.620 --> 05:43.620
比方说我们这里写上一个3

05:43.620 --> 05:44.620
到5

05:45.620 --> 05:46.620
那么这个是什么意思呢

05:46.620 --> 05:47.620
给大家看一下

05:47.620 --> 05:49.620
它就是后边的制服串

05:49.620 --> 05:51.620
它出现3到5次随机的

05:51.620 --> 05:53.620
属性NAME为NAME

05:53.620 --> 05:55.620
那么属性NAME的值是什么呢

05:55.620 --> 05:56.620
就是后边的制服串

05:56.620 --> 05:57.620
它出现3到5次

05:58.620 --> 05:59.620
看一下吧

05:59.620 --> 06:00.620
出现3次

06:00.620 --> 06:01.620
也没有4次的

06:01.620 --> 06:02.620
5次的

06:02.620 --> 06:03.620
3到5次

06:03.620 --> 06:04.620
就这么个意思

06:04.620 --> 06:05.620
它有很多很多的写法

06:05.620 --> 06:06.620
大家有兴趣的话

06:06.620 --> 06:07.620
可以自己看一下

06:07.620 --> 06:08.620
比方说

06:08.620 --> 06:09.620
它这里1到10

06:09.620 --> 06:10.620
它模拟出来就是这样子

06:10.620 --> 06:11.620
1到10之间的数据

06:11.620 --> 06:13.620
如果说这里还直线一个数字呢

06:13.620 --> 06:15.620
那么它就是只重复这么多次

06:16.620 --> 06:18.620
那么不同的类型

06:18.620 --> 06:19.620
还有不同的写法

06:19.620 --> 06:20.620
什么叫类型呢

06:20.620 --> 06:21.620
就是后边的类型

06:21.620 --> 06:22.620
后边是制服串

06:22.620 --> 06:23.620
那么就出现制服串重复

06:23.620 --> 06:24.620
好

06:24.620 --> 06:25.620
来看一下Lumber

06:25.620 --> 06:26.620
我们就看一下文章就行了

06:26.620 --> 06:27.620
给大家放大一点

06:28.620 --> 06:29.620
如果说后边是一个数字

06:29.620 --> 06:30.620
那么什么意思呢

06:30.620 --> 06:31.620
它表示

06:31.620 --> 06:32.620
这个是加1

06:32.620 --> 06:33.620
表示什么意思

06:33.620 --> 06:34.620
表示后边的数字呢

06:35.620 --> 06:36.620
为什么是201

06:37.620 --> 06:38.620
它应该写错了吧

06:38.620 --> 06:39.620
应该写错了

06:39.620 --> 06:40.620
它应该是

06:40.620 --> 06:41.620
20

06:42.620 --> 06:44.620
202吧

06:45.620 --> 06:49.080
看一下

06:50.080 --> 06:51.080
202

06:51.080 --> 06:52.080
应该是202

06:52.080 --> 06:53.080
那么又加1是什么意思呢

06:53.080 --> 06:55.080
就是如果说你生成多个数据的话

06:56.080 --> 06:57.080
我们现在还没有生成多个数据

06:57.080 --> 06:59.080
如果说你生成多个数据的话

06:59.080 --> 07:00.080
那么每一个数据

07:00.080 --> 07:01.080
它就有1是加1

07:01.080 --> 07:02.080
1是加1

07:02.080 --> 07:03.080
是这么个意思

07:03.080 --> 07:05.080
我们一会儿就会生成多个数据了

07:05.080 --> 07:06.080
一会儿就可以看得到了

07:06.080 --> 07:07.080
咱们继续看

07:08.080 --> 07:10.080
这里的1到100

07:11.080 --> 07:12.080
这里是什么意思呢

07:12.080 --> 07:14.080
1到100

07:15.080 --> 07:16.080
这是Lim Max

07:16.080 --> 07:18.080
那么后边就无所谓了

07:18.080 --> 07:20.080
后边就怎么写都无所谓了

07:20.080 --> 07:21.080
那么这个地方就是

07:21.080 --> 07:24.080
它生成一个1到多少之间的

07:24.080 --> 07:27.080
就是多少到多少之间的一个水积数

07:27.080 --> 07:29.080
生成多少到多少之间的一个水积数

07:29.080 --> 07:32.080
那么是不是可以轻松搞定水积数的范围

07:32.080 --> 07:34.080
那么后边你只要写个数字就行了

07:34.080 --> 07:35.080
随便你写什么数字

07:35.080 --> 07:36.080
比方说我们这里呢

07:36.080 --> 07:38.080
写成1到100

07:39.080 --> 07:40.080
1到100

07:40.080 --> 07:42.080
后边写个数字就随便写

07:42.080 --> 07:43.080
只要是数字就行了

07:43.080 --> 07:44.080
它就知道了

07:44.080 --> 07:45.080
生成的是数字

07:45.080 --> 07:47.080
然后生成1到100的数字

07:47.080 --> 07:49.080
后边那个东西主要是来确定内情的

07:49.080 --> 07:50.080
你随便写

07:50.080 --> 07:51.080
写个0也可以

07:51.080 --> 07:52.080
随便写的

07:52.080 --> 07:53.080
是这个

07:54.080 --> 07:55.080
像这些东西呢

07:55.080 --> 07:57.080
已经我要看着才能想得起来

07:57.080 --> 07:59.080
那么这个东西是生成小数

07:59.080 --> 08:01.080
后边是1到10位小数

08:01.080 --> 08:02.080
就这么个意思

08:02.080 --> 08:04.080
那么这个东西呢也是

08:04.080 --> 08:05.080
前面是固定的

08:05.080 --> 08:06.080
前面是固定的

08:06.080 --> 08:07.080
后边小数是不固定的

08:07.080 --> 08:09.080
生成一个水积的小数

08:09.080 --> 08:11.080
那么这个东西呢

08:11.080 --> 08:13.080
是生成3位的小数

08:13.080 --> 08:14.080
它不是点3

08:14.080 --> 08:15.080
是生成3位的小数

08:15.080 --> 08:17.080
那么这是生成10位的小数

08:17.080 --> 08:18.080
这个固定

08:18.080 --> 08:19.080
大家有兴趣的话可以自己看一下

08:19.080 --> 08:21.080
我们在中联讲什么呢

08:21.080 --> 08:22.080
中联讲这个

08:22.080 --> 08:23.080
讲数组

08:23.080 --> 08:24.080
就是说我们这里呢

08:24.080 --> 08:25.080
可能要生成一个数组

08:25.080 --> 08:27.080
比方说data石

08:27.080 --> 08:28.080
它要生成一个数组

08:28.080 --> 08:30.080
它的属性名是data石

08:30.080 --> 08:32.080
那么这个数组有多少箱呢

08:32.080 --> 08:34.080
这个数组呢有

08:34.080 --> 08:35.080
500

08:35.080 --> 08:36.080
这太多了

08:36.080 --> 08:37.080
大家看不清楚

08:37.080 --> 08:38.080
3到10箱嘛

08:38.080 --> 08:39.080
我们后边写完了过后

08:39.080 --> 08:40.080
再一起把它调大一点

08:40.080 --> 08:41.080
那么这里

08:41.080 --> 08:42.080
我们看生成一个数组

08:42.080 --> 08:44.080
数组的每一项是一个对象

08:44.080 --> 08:46.080
你看它是什么意思

08:46.080 --> 08:47.080
它指的是

08:47.080 --> 08:51.080
我要生成一个3到10的数组

08:51.080 --> 08:53.080
数组的每一项是一个对象

08:53.080 --> 08:57.540
我们看一下这个result

08:57.540 --> 08:58.540
运行

08:58.540 --> 08:59.540
你看

08:59.540 --> 09:01.540
是不是3到10个对象就出来了

09:01.540 --> 09:02.540
对不对

09:02.540 --> 09:04.540
每个对象就按照这个对象的规则来生成

09:04.540 --> 09:05.540
我们更多的时候

09:05.540 --> 09:06.540
是需要生成一个数组

09:06.540 --> 09:07.540
要模拟很多数据嘛

09:07.540 --> 09:09.540
那么如果说

09:09.540 --> 09:10.540
我想说

09:10.540 --> 09:11.540
对

09:11.540 --> 09:13.540
那个对象里面写什么呢

09:13.540 --> 09:14.540
我们这里也可以这样

09:14.540 --> 09:15.540
因为这个是模拟出来的结果

09:15.540 --> 09:16.540
结果里面有个什么呢

09:16.540 --> 09:17.540
有个data式对吧

09:17.540 --> 09:18.540
我们也可以直接在这里

09:18.540 --> 09:19.540
取这个data式

09:19.540 --> 09:21.540
它模拟出来是个对象

09:21.540 --> 09:22.540
对象里面取data式

09:22.540 --> 09:23.540
那么这里直接是

09:23.540 --> 09:25.540
直接就是个数组了

09:25.540 --> 09:26.540
看没

09:26.540 --> 09:28.540
那么我们个数组里面

09:28.540 --> 09:29.540
对象里面写什么呢

09:29.540 --> 09:30.540
写的规则跟刚才一样

09:30.540 --> 09:32.540
比方说咱们班级

09:32.540 --> 09:33.540
班级的时候

09:33.540 --> 09:35.540
我们写班级的时候呢

09:35.540 --> 09:38.540
跑哪去了

09:38.540 --> 09:40.540
班级

09:40.540 --> 09:41.540
class

09:41.540 --> 09:42.540
不是一个班级的名称

09:42.540 --> 09:44.540
和开班时间吗

09:44.540 --> 09:45.540
对不对

09:45.540 --> 09:46.540
好

09:46.540 --> 09:47.540
那咱们来写

09:47.540 --> 09:49.540
首先来写班级的名称

09:49.540 --> 09:50.540
那么的名称

09:50.540 --> 09:51.540
我们这里写啥呢

09:51.540 --> 09:52.540
这里

09:52.540 --> 09:53.540
那么的名称呢

09:53.540 --> 09:54.540
我们可以用

09:54.540 --> 09:55.540
前端D

09:55.540 --> 09:57.540
多少多少7

09:57.540 --> 09:58.540
对不对

09:58.540 --> 09:59.540
多少多少7

09:59.540 --> 10:00.540
那么我希望这个位置

10:00.540 --> 10:02.540
我希望这个位置呢

10:02.540 --> 10:03.540
从一开始给我排

10:03.540 --> 10:04.540
排多少个呢

10:04.540 --> 10:06.540
一共给我排个17个

10:06.540 --> 10:08.540
那么这个东西怎么来做呢

10:08.540 --> 10:09.540
这个东西怎么来做呢

10:09.540 --> 10:10.540
这个东西

10:10.540 --> 10:11.540
我们可以这样子

10:11.540 --> 10:12.540
可以在这里呢

10:12.540 --> 10:13.540
去加一个属性

10:13.540 --> 10:14.540
来加一个ID嘛

10:14.540 --> 10:15.540
因为它本身就有组件嘛

10:15.540 --> 10:16.540
组件虽然它自动生成的

10:16.540 --> 10:18.540
我们也可以给它自己写

10:18.540 --> 10:19.540
也可以的

10:19.540 --> 10:20.540
比方说ID

10:20.540 --> 10:21.540
我们就可以这样

10:21.540 --> 10:23.540
ID

10:23.540 --> 10:25.540
我们这里是不是可以用加1

10:25.540 --> 10:27.540
对不对

10:27.540 --> 10:28.540
是不是可以用加1

10:28.540 --> 10:30.540
然后后面随便写个数字

10:30.540 --> 10:31.540
那么就可以从

10:31.540 --> 10:33.540
从一开始

10:33.540 --> 10:34.540
一次加1

10:34.540 --> 10:35.540
好咱们来看一下

10:35.540 --> 10:36.540
ID

10:36.540 --> 10:37.540
我们生成一下

10:37.540 --> 10:38.540
我们先看ID

10:38.540 --> 10:39.540
看ID里面搞定

10:39.540 --> 10:40.540
ID是不是搞定了

10:40.540 --> 10:41.540
123456

10:41.540 --> 10:42.540
对吧

10:42.540 --> 10:43.540
这个ID就是

10:43.540 --> 10:44.540
生成多个数据的时候

10:44.540 --> 10:45.540
它一次每一个数据

10:45.540 --> 10:46.540
在之前的基础上

10:46.540 --> 10:47.540
地增

10:47.540 --> 10:48.540
ID

10:48.540 --> 10:49.540
那么这个时候

10:49.540 --> 10:50.540
地多少期呢

10:50.540 --> 10:51.540
我们就干脆直接用ID嘛

10:51.540 --> 10:52.540
我们反正都是

10:52.540 --> 10:53.540
模拟数据

10:53.540 --> 10:54.540
无所谓的

10:54.540 --> 10:55.540
那么这个地多少期

10:55.540 --> 10:56.540
这里怎么写呢

10:56.540 --> 10:57.540
这里呢

10:57.540 --> 10:58.540
我们用Add

10:58.540 --> 10:59.540
一个占位符

10:59.540 --> 11:00.540
占位符呢

11:00.540 --> 11:01.540
后面写上一个ID

11:01.540 --> 11:03.540
那么这个就表示的是

11:03.540 --> 11:05.540
这样的风格

11:05.540 --> 11:06.540
这个表示的是

11:06.540 --> 11:07.540
用一个占位符

11:07.540 --> 11:08.540
把这个我当前对象的ID

11:08.540 --> 11:11.050
读出来

11:11.050 --> 11:12.050
你看

11:12.050 --> 11:13.050
是不是D

11:13.050 --> 11:14.050
对吧

11:14.050 --> 11:15.050
我们生成多个呢

11:15.050 --> 11:16.050
生成

11:16.050 --> 11:17.050
16个吧

11:17.050 --> 11:20.050
16个班级

11:20.050 --> 11:21.050
咱们对于有些人有多个班级

11:21.050 --> 11:23.050
我也不知道

11:23.050 --> 11:24.050
那么现在是不是生成出来了

11:24.050 --> 11:25.050
就非常方便

11:25.050 --> 11:26.050
就可以生成这个对象

11:26.050 --> 11:28.050
然后开班时间

11:28.050 --> 11:30.050
Open Date

11:30.050 --> 11:31.050
开班时间

11:31.050 --> 11:33.050
开班时间是不是日期

11:33.050 --> 11:34.050
日期的话

11:34.050 --> 11:35.050
我们可以生成一个

11:35.050 --> 11:36.050
随机的日期

11:36.050 --> 11:37.050
我们看一下

11:37.050 --> 11:38.050
日期

11:38.050 --> 11:39.050
我记得

11:39.050 --> 11:41.050
Date

11:41.050 --> 11:42.050
这里没有Date

11:42.050 --> 11:43.050
我们看一下这里

11:43.050 --> 11:44.050
Date

11:44.050 --> 11:46.490
那么这里呢

11:46.490 --> 11:47.490
我们可以用这个

11:47.490 --> 11:48.490
占位符来

11:48.490 --> 11:49.490
随机的生成一个日期

11:49.490 --> 11:50.490
随机的生成一个日期

11:50.490 --> 11:51.490
来吧

11:51.490 --> 11:52.490
我们就用一个At

11:52.490 --> 11:54.490
后面还可以跟日期隔世

11:54.490 --> 11:56.490
看日期隔世是什么样子

11:56.490 --> 11:57.490
不过这个日期隔世

11:57.490 --> 11:58.490
我们无所谓了

11:58.490 --> 12:00.490
就直接随机生成一个日期

12:00.490 --> 12:01.490
完事了

12:01.490 --> 12:03.490
再来看

12:03.490 --> 12:05.930
运行

12:05.930 --> 12:06.930
你看

12:06.930 --> 12:07.930
是不是随机生成了一个日期

12:07.930 --> 12:08.930
不过日期呢

12:08.930 --> 12:09.930
好像感觉上

12:09.930 --> 12:10.930
不像在世

12:10.930 --> 12:11.930
不太像是真实的日期

12:11.930 --> 12:12.930
对吧

12:12.930 --> 12:13.930
1978年开班

12:13.930 --> 12:14.930
都无所谓的

12:14.930 --> 12:15.930
这个东西无所谓的

12:15.930 --> 12:16.930
反正都是测试数据

12:16.930 --> 12:17.930
对不对

12:17.930 --> 12:18.930
好那么这样子

12:18.930 --> 12:19.930
我们是不是生成了一个班级数据

12:19.930 --> 12:20.930
好

12:20.930 --> 12:21.930
现在班级数据

12:21.930 --> 12:23.930
如果你要拿去看吧

12:23.930 --> 12:24.930
随便你

12:24.930 --> 12:25.930
比方说

12:25.930 --> 12:26.930
要把班级数据

12:26.930 --> 12:27.930
加到数据库里面去怎么办

12:27.930 --> 12:28.930
我们就可以利用

12:28.930 --> 12:29.930
把这个模型导进来

12:29.930 --> 12:30.930
class

12:30.930 --> 12:31.930
require

12:33.930 --> 12:35.930
找到上年models

12:35.930 --> 12:37.930
class

12:38.930 --> 12:39.930
class里面不是

12:39.930 --> 12:40.930
可以有create

12:40.930 --> 12:41.930
如果说我要导入

12:41.930 --> 12:42.930
多个数据的话

12:42.930 --> 12:43.930
我们可以用bug

12:43.930 --> 12:44.930
create

12:44.930 --> 12:45.930
那么这个是

12:45.930 --> 12:46.930
给它一个数据

12:46.930 --> 12:47.930
它直接生成

12:47.930 --> 12:48.930
直接向数据库里面

12:48.930 --> 12:50.930
插入多条数据

12:50.930 --> 12:51.930
这是bugcreate

12:51.930 --> 12:52.930
它向数据库里面

12:52.930 --> 12:54.930
直接插入多条数据

12:54.930 --> 12:56.930
我们之前是一次一条

12:56.930 --> 12:57.930
对吧

12:57.930 --> 12:58.930
我们这里可以一次多条

12:58.930 --> 12:59.930
好来吧

12:59.930 --> 13:00.930
我们这里运行

13:00.930 --> 13:01.930
你看执行的社会语剧

13:01.930 --> 13:02.930
是不是

13:02.930 --> 13:03.930
insert into classes

13:03.930 --> 13:04.930
对吧

13:04.930 --> 13:05.930
是不是该插入了多少数据

13:05.930 --> 13:06.930
对不对

13:06.930 --> 13:07.930
videos

13:07.930 --> 13:08.930
多条数据再加进去了

13:08.930 --> 13:09.930
好

13:09.930 --> 13:12.430
咱们来看一下数据库

13:12.430 --> 13:13.430
班级表

13:13.430 --> 13:14.430
你看

13:14.430 --> 13:15.430
是不是出来了

13:15.430 --> 13:16.430
对不对

13:16.430 --> 13:17.430
出来了

13:17.430 --> 13:18.430
这就是这个

13:18.430 --> 13:19.430
这个模拟数据

13:19.430 --> 13:21.430
那么班级我们搞定了

13:21.430 --> 13:23.430
我们再来模拟一下学生

13:23.430 --> 13:26.430
student

13:26.430 --> 13:27.430
student

13:27.430 --> 13:29.430
mock student

13:29.430 --> 13:31.430
关于更多的mock的东西

13:31.430 --> 13:32.430
mock的库很简单

13:32.430 --> 13:33.430
很简单的

13:33.430 --> 13:34.430
一点都不复杂力

13:34.430 --> 13:35.430
大家一心就可以

13:35.430 --> 13:36.430
可以至于看一下

13:36.430 --> 13:37.430
也是中文文档

13:37.430 --> 13:38.430
我们再来

13:38.430 --> 13:39.430
导入这个mock

13:39.430 --> 13:41.430
非常的好用

13:43.430 --> 13:44.430
那么我们现在继续模拟

13:44.430 --> 13:45.430
mock数据

13:45.430 --> 13:46.430
然后还是一样

13:46.430 --> 13:47.430
我们还是要模拟一个学生数据

13:47.430 --> 13:49.430
所以说我们data

13:49.430 --> 13:51.430
给它比方说

13:51.430 --> 13:53.430
这里先5到10个

13:53.430 --> 13:54.430
我们先测试一下

13:54.430 --> 13:55.430
测试好了过后

13:55.430 --> 13:58.430
再把它设大一点

13:58.430 --> 14:00.430
这里我们result

14:00.430 --> 14:02.430
这边我们直接取出data

14:02.430 --> 14:04.430
我们自己输出result

14:04.430 --> 14:05.430
现在5到10个数据

14:05.430 --> 14:06.430
我们来模拟一下

14:06.430 --> 14:11.430
load mock

14:11.430 --> 14:12.430
student

14:12.430 --> 14:13.430
你看是不是5条数据

14:13.430 --> 14:14.430
一个来

14:14.430 --> 14:16.430
学生里边有什么数据

14:16.430 --> 14:18.430
学生里边有一个来

14:18.430 --> 14:20.430
一个有学生姓名

14:20.430 --> 14:21.430
学生姓名该怎么写呢

14:21.430 --> 14:22.430
学生姓名

14:22.430 --> 14:24.430
我希望它生成一个水积的名字

14:24.430 --> 14:27.430
这个库是支持水积的名字的

14:27.430 --> 14:29.430
因为它本身就是中文的

14:29.430 --> 14:30.430
所以说它支持水积的名字

14:30.430 --> 14:32.430
那么给它写上一个Chinese name

14:32.430 --> 14:34.430
就是C name

14:34.430 --> 14:36.430
那么这就是表示中文名字

14:36.430 --> 14:37.430
水积的中文名字

14:37.430 --> 14:40.430
给它看一下吧

14:40.430 --> 14:42.430
所以生成了一些水积的中文名字

14:42.430 --> 14:43.430
特别特别好用

14:43.430 --> 14:45.430
然后我们再来看

14:45.430 --> 14:46.430
除了有名字之外

14:46.430 --> 14:47.430
还有什么呢

14:47.430 --> 14:48.430
Burst Day

14:48.430 --> 14:49.430
Burst Day是不是可以用水积的日期

14:49.430 --> 14:50.430
对不对

14:50.430 --> 14:51.430
反正都是测试的

14:51.430 --> 14:54.430
不用太过纠结日期的正确性

14:54.430 --> 14:57.430
那么生成一个水积的日期

14:57.430 --> 14:58.430
就出来了

14:58.430 --> 14:59.430
Burst Day

14:59.430 --> 15:00.430
然后还有什么呢

15:00.430 --> 15:02.430
还有这个就是Sex

15:02.430 --> 15:04.430
就是性别

15:04.430 --> 15:06.430
性别我们用Q表示男

15:06.430 --> 15:07.430
Force表示女

15:07.430 --> 15:08.430
性别的话

15:08.430 --> 15:10.430
我们也可以用一个

15:10.430 --> 15:11.430
布利

15:11.430 --> 15:12.430
我们看一下

15:12.430 --> 15:13.430
就是Burst的水积

15:13.430 --> 15:14.430
该怎么写

15:14.430 --> 15:15.430
我查一下文档

15:15.430 --> 15:19.430
布利

15:19.430 --> 15:21.430
只要给个E就行了

15:21.430 --> 15:22.430
那么它就

15:22.430 --> 15:23.430
后面只要给个

15:23.430 --> 15:24.430
内形是Burst内形

15:24.430 --> 15:25.430
那么前面只要给它

15:25.430 --> 15:27.430
这个东西

15:27.430 --> 15:28.430
给它这个东西

15:28.430 --> 15:29.430
那么它就会自动

15:29.430 --> 15:31.430
帮你生成这个布尔

15:31.430 --> 15:32.430
自动生成

15:32.430 --> 15:33.430
它E表示Q

15:33.430 --> 15:34.430
E表示Force

15:34.430 --> 15:35.430
2表示Q

15:35.430 --> 15:36.430
所以说我们要用

15:36.430 --> 15:37.430
1到2是吧

15:37.430 --> 15:38.430
我们要用1到2

15:38.430 --> 15:39.430
我们来试一下就知道了

15:39.430 --> 15:43.060
这个东西一试就明白了

15:43.060 --> 15:44.060
不用去背

15:44.060 --> 15:45.060
1到2

15:45.060 --> 15:46.060
咱们这里是

15:46.060 --> 15:47.060
随便给个

15:47.060 --> 15:48.060
给Q给Force都一样

15:48.060 --> 15:49.060
这个东西主要是

15:49.060 --> 15:50.060
主要是用来确定内形的

15:50.060 --> 15:51.060
不然它不知道

15:51.060 --> 15:52.060
这个东西

15:52.060 --> 15:53.060
它生成出来是什么内形

15:53.060 --> 15:54.060
因为这里的1到2

15:54.060 --> 15:55.060
有很多含义的

15:55.060 --> 15:56.060
它可能是自不算

15:56.060 --> 15:57.060
重复1到2次

15:57.060 --> 15:59.060
可能是数字到1到2之间

15:59.060 --> 16:00.060
那么如果说你

16:00.060 --> 16:01.060
给它布尔的话

16:01.060 --> 16:02.060
就是Q和Force之间

16:02.060 --> 16:04.060
应该是这个意思

16:04.060 --> 16:05.060
有Q有Force

16:05.060 --> 16:06.060
对吧

16:06.060 --> 16:07.060
那就正确了

16:07.060 --> 16:08.060
那么就是Sex搞定了

16:08.060 --> 16:10.060
然后还有什么属性呢

16:10.060 --> 16:12.060
还有Mobile

16:12.060 --> 16:13.060
对吧

16:13.060 --> 16:14.060
Mobile这个属性

16:14.060 --> 16:15.060
Mobile这个属性

16:15.060 --> 16:16.060
表示的是什么

16:16.060 --> 16:17.060
电话号码

16:17.060 --> 16:18.060
电话号码

16:18.060 --> 16:19.060
我们可以用一个

16:19.060 --> 16:20.060
政策表达式

16:20.060 --> 16:21.060
可以用政策表达式

16:21.060 --> 16:22.060
给大家看一下

16:22.060 --> 16:24.060
政策表达式

16:24.060 --> 16:25.060
它这里可以写的

16:25.060 --> 16:26.060
就是说你后边

16:26.060 --> 16:27.060
可以跟一个政策表达式

16:27.060 --> 16:28.060
那么它会随机生成

16:28.060 --> 16:30.060
跟这个政策表达式

16:30.060 --> 16:32.060
满足这个政策表达式的

16:32.060 --> 16:33.060
就是

16:33.060 --> 16:34.060
字不串

16:34.060 --> 16:35.060
它会生成一个字不串

16:35.060 --> 16:37.060
能够满足这个政策表达式

16:38.060 --> 16:39.060
我看看里面有没有

16:39.060 --> 16:40.060
字带的电话号码

16:40.060 --> 16:41.060
好像没有

16:41.060 --> 16:42.060
没有

16:42.060 --> 16:43.060
我们就直接用那个

16:43.060 --> 16:44.060
政策表达式

16:44.060 --> 16:45.060
只用政策表达式

16:46.060 --> 16:47.060
好,来吧

16:47.060 --> 16:48.060
很简单的

16:48.060 --> 16:49.060
好,来吧

16:49.060 --> 16:50.060
这个电话号码

16:50.060 --> 16:51.060
第一个是不是1

16:51.060 --> 16:52.060
第二个是不是

16:52.060 --> 16:53.060
后边的数字

16:53.060 --> 16:54.060
我们就简单一点吧

16:54.060 --> 16:55.060
后边是一个数字

16:55.060 --> 16:56.060
然后这个数字

16:56.060 --> 16:57.060
重复多少次呢

16:57.060 --> 16:58.060
重复10次

16:58.060 --> 16:59.060
对吧

16:59.060 --> 17:00.060
10次

17:00.060 --> 17:01.060
那么我们的电话号码

17:01.060 --> 17:02.060
11位嘛

17:02.060 --> 17:03.060
第一个号码

17:03.060 --> 17:04.060
是1

17:04.060 --> 17:05.060
后边是重复10次的

17:05.060 --> 17:06.060
数字就完事了

17:06.060 --> 17:07.060
电话号码是不是出来了

17:07.060 --> 17:08.060
对不对

17:08.060 --> 17:09.060
电话号码就出来了

17:09.060 --> 17:10.060
那如果说

17:10.060 --> 17:11.060
原来说

17:11.060 --> 17:12.060
还有什么呢

17:12.060 --> 17:13.060
这个我们学生里面没有

17:13.060 --> 17:14.060
还有什么

17:14.060 --> 17:15.060
如果说还有这个

17:15.060 --> 17:16.060
居住地址

17:16.060 --> 17:17.060
学生的居住地址

17:17.060 --> 17:18.060
location

17:18.060 --> 17:19.060
假设嘛

17:19.060 --> 17:20.060
这个居住地址

17:20.060 --> 17:22.060
它也是可以随机生成的

17:22.060 --> 17:23.060
给大家看一下

17:24.060 --> 17:25.060
它有一个地址

17:25.060 --> 17:26.060
叫Ergis

17:28.060 --> 17:30.060
它有几种生成方式

17:30.060 --> 17:31.060
一个是region

17:31.060 --> 17:32.060
那么得到了是

17:32.060 --> 17:34.060
中国的地区

17:34.060 --> 17:35.060
地域

17:35.060 --> 17:37.060
Promise得到是省份

17:37.060 --> 17:38.060
随机随机的省份

17:38.060 --> 17:40.060
然后City得到了是

17:40.060 --> 17:41.060
城市

17:41.060 --> 17:42.060
随机的城市

17:42.060 --> 17:43.060
如果说City里面

17:43.060 --> 17:44.060
其他一个参数

17:44.060 --> 17:45.060
去

17:45.060 --> 17:47.060
那就表示把完整的地址

17:47.060 --> 17:48.060
把完整的地址

17:48.060 --> 17:49.060
写进来

17:49.060 --> 17:51.060
这还有随机的

17:51.060 --> 17:52.060
Country

17:52.060 --> 17:54.060
Country这里应该是指的是

17:54.060 --> 17:55.060
那个

17:55.060 --> 17:57.060
那个什么县的

17:57.060 --> 17:58.060
应该指的是县的

17:58.060 --> 18:00.060
咱们直接用那个

18:00.060 --> 18:02.890
这个

18:02.890 --> 18:03.890
来吧

18:04.890 --> 18:05.890
City去

18:05.890 --> 18:06.890
我们来看一下

18:06.890 --> 18:07.890
生成的学生

18:08.890 --> 18:09.890
是不是

18:09.890 --> 18:10.890
都出来了

18:10.890 --> 18:11.890
对不对

18:11.890 --> 18:12.890
非常的简单

18:12.890 --> 18:13.890
这是关于这个

18:13.890 --> 18:14.890
还可以生成

18:14.890 --> 18:15.890
随机的右边

18:15.890 --> 18:16.890
都可以

18:16.890 --> 18:17.890
那么这里是

18:17.890 --> 18:18.890
随机的数据

18:18.890 --> 18:19.890
然后这里还有一个

18:19.890 --> 18:20.890
还有一个就是

18:20.890 --> 18:21.890
它有一个外件

18:21.890 --> 18:22.890
因为我们的数据库里边

18:22.890 --> 18:23.890
你看学生标里边

18:23.890 --> 18:24.890
是一个外件

18:24.890 --> 18:25.890
class ID

18:25.890 --> 18:26.890
class ID那是我们需要的

18:26.890 --> 18:27.890
我们需要的

18:27.890 --> 18:28.890
class ID

18:28.890 --> 18:29.890
class ID

18:29.890 --> 18:31.890
我们可以来自于哪呢

18:31.890 --> 18:33.890
可以来自于一个随机数

18:33.890 --> 18:34.890
因为我们知道

18:34.890 --> 18:35.890
我们的那个

18:35.890 --> 18:37.890
刚才生成的班级呢

18:37.890 --> 18:38.890
班级是1到16

18:38.890 --> 18:39.890
对吧

18:39.890 --> 18:40.890
ID是1到16

18:40.890 --> 18:41.890
ok 那我们这里

18:41.890 --> 18:42.890
这里也是1到16之间水积

18:42.890 --> 18:43.890
好来吧

18:43.890 --> 18:44.890
我们这里的ID

18:44.890 --> 18:48.200
在1到16之间水积

18:48.200 --> 18:49.200
数字随便写

18:49.200 --> 18:50.200
那么只要

18:50.200 --> 18:51.200
后边是数字

18:51.200 --> 18:52.200
它就表示的是

18:52.200 --> 18:53.200
它是1到16之间的数字

18:53.200 --> 18:54.200
后边主要是用来

18:54.200 --> 18:55.200
确定内存的

18:55.200 --> 18:56.200
好来吧

18:56.200 --> 18:57.200
我们现在写好了

18:57.200 --> 18:58.200
我们这个都ok性不要了

18:58.200 --> 18:59.200
这个都ok性给它演示一下

18:59.200 --> 19:00.200
就行了

19:00.200 --> 19:02.200
好 接下来我们再运行

19:02.200 --> 19:04.200
你看

19:04.200 --> 19:05.200
是不是也有了

19:05.200 --> 19:06.200
对不对

19:06.200 --> 19:07.200
好 那么现在

19:07.200 --> 19:08.200
我们学生的数组是不是出来了

19:08.200 --> 19:09.200
出来的学生数组过后

19:09.200 --> 19:10.200
我们直接利用

19:10.200 --> 19:11.200
一个模型

19:11.200 --> 19:12.200
student

19:12.200 --> 19:13.200
我们上一课都写好了

19:13.200 --> 19:15.200
required

19:15.200 --> 19:17.200
models

19:17.200 --> 19:19.200
student

19:19.200 --> 19:22.280
student

19:22.280 --> 19:23.280
这些东西你们自己去写一下

19:23.280 --> 19:24.280
这个service

19:24.280 --> 19:25.280
我们上一课只写了一个

19:25.280 --> 19:27.280
后来自己把补权

19:27.280 --> 19:28.280
都很简单

19:28.280 --> 19:29.280
student

19:29.280 --> 19:30.280
然后我们这里调用

19:30.280 --> 19:32.280
bulk create

19:32.280 --> 19:34.280
result加进去

19:34.280 --> 19:36.280
好 这样子把学生数据给它模拟出来

19:36.280 --> 19:37.280
模拟多

19:37.280 --> 19:38.280
多好个呢 我就不是

19:38.280 --> 19:39.280
五到十个了

19:39.280 --> 19:42.720
我就是500到700个

19:42.720 --> 19:43.720
700个

19:43.720 --> 19:44.720
你随便给我来一些吧

19:44.720 --> 19:46.720
好 来吧 运行

19:46.720 --> 19:51.440
好 运行出来了

19:51.440 --> 19:52.440
这个数据很多

19:52.440 --> 19:54.440
我们直接停止

19:54.440 --> 19:55.440
接下来我们来看一下

19:55.440 --> 19:56.440
我们的表

19:56.440 --> 19:58.440
学生表

19:58.440 --> 19:59.440
右键刷新

19:59.440 --> 20:00.440
是不是数据就出来了

20:00.440 --> 20:01.440
对不对

20:01.440 --> 20:02.440
我的class ID呢

20:02.440 --> 20:03.440
等一下

20:03.440 --> 20:05.440
我的class ID呢

20:05.440 --> 20:06.440
class ID有问题是吧

20:06.440 --> 20:07.440
看一下

20:07.440 --> 20:09.440
class ID

20:09.440 --> 20:11.440
这个C没有大一些

20:11.440 --> 20:13.440
没有大一些

20:13.440 --> 20:15.440
然后我们再来试一下

20:15.440 --> 20:16.440
class ID

20:16.440 --> 20:20.070
我们这里把删除了

20:20.070 --> 20:22.070
我们这里把表删除了

20:22.070 --> 20:26.770
dent from students

20:26.770 --> 20:27.770
运行

20:27.770 --> 20:28.770
把删除了

20:28.770 --> 20:30.770
表给它清空

20:30.770 --> 20:34.770
接下来我们现在再测试一下

20:35.770 --> 20:36.770
再来测试一下

20:36.770 --> 20:39.140
运行

20:39.140 --> 20:40.140
运行

20:41.140 --> 20:42.140
我要输出

20:42.140 --> 20:46.990
输出这个result

20:46.990 --> 20:50.520
运行

20:50.520 --> 20:51.520
class ID出来了

20:51.520 --> 20:52.520
class ID出来了

20:52.520 --> 20:53.520
因为这个属性

20:53.520 --> 20:54.520
你们匹配不上的话

20:54.520 --> 20:55.520
它就硬设不到列

20:55.520 --> 20:56.520
不是说数据库

20:56.520 --> 20:57.520
它区分大小写

20:57.520 --> 20:58.520
数据库不区分大小写

20:58.520 --> 20:59.520
但是呢

20:59.520 --> 21:01.520
关键是属性的名字不对的话

21:01.520 --> 21:02.520
它就匹配不到列

21:02.520 --> 21:03.520
匹配不到这个就是

21:03.520 --> 21:04.520
它就不知道

21:04.520 --> 21:06.520
这个跟数据库是相关的

21:06.520 --> 21:07.520
它主要是跟数据库

21:07.520 --> 21:09.520
匹配的时候出了问题

21:09.520 --> 21:10.520
这里我们现在把

21:10.520 --> 21:14.620
加上

21:14.620 --> 21:16.620
这里我们先加个5到7条吧

21:16.620 --> 21:18.620
我们后面再多加一点

21:19.620 --> 21:21.620
OK我们再看一下吧

21:21.620 --> 21:22.620
右键刷新

21:23.620 --> 21:25.620
class ID还是出了问题是吧

21:25.620 --> 21:28.620
在大码里边去看一下

21:28.620 --> 21:33.050
在这边

21:36.050 --> 21:38.050
我好像知道了

21:38.050 --> 21:40.050
是因为我这里

21:40.050 --> 21:42.050
指导入了student

21:42.050 --> 21:44.050
这里有个小细节

21:44.050 --> 21:46.050
这里指导入了student

21:46.050 --> 21:47.050
这个模块

21:47.050 --> 21:48.050
这个模块

21:48.050 --> 21:51.050
它并没有设置关系

21:51.050 --> 21:52.050
这个模块

21:52.050 --> 21:53.050
它是没有设置

21:53.050 --> 21:55.050
跟class的关系的

21:55.050 --> 21:57.050
因此它在模块定义里边

21:57.050 --> 21:59.050
它是不可能存在class ID的

21:59.050 --> 22:00.050
在数据库里边存在

22:00.050 --> 22:02.050
但是在模块里边是不存在的

22:02.050 --> 22:04.050
在模型里边是不存在的

22:04.050 --> 22:05.050
因为它没有

22:05.050 --> 22:06.050
当说这个模块

22:06.050 --> 22:08.050
是没有不存在

22:08.050 --> 22:10.050
模型关联的

22:10.050 --> 22:12.050
我们只是在class这边关联了

22:12.050 --> 22:14.050
student对吧

22:14.050 --> 22:16.050
student这边没有关联class

22:16.050 --> 22:18.050
当我们单单引入student的时候

22:18.050 --> 22:20.050
它是没有跟class关联的

22:20.050 --> 22:21.050
那么我们这样子

22:21.050 --> 22:22.050
当然也不能在这里

22:22.050 --> 22:23.050
直接去跟class关联

22:23.050 --> 22:25.050
这样子会导致循环引用

22:25.050 --> 22:27.050
class引用student

22:27.050 --> 22:28.050
student引用class

22:28.050 --> 22:29.050
我们这里这样吧

22:29.050 --> 22:30.050
我这样子

22:30.050 --> 22:32.050
我把student和class

22:32.050 --> 22:34.050
都不要写关联了

22:34.050 --> 22:35.050
都不写了

22:35.050 --> 22:36.050
然后我们单独来

22:36.050 --> 22:37.050
拿一个文件

22:37.050 --> 22:38.050
专门来写关联

22:38.050 --> 22:39.050
这也是一种常见做法

22:39.050 --> 22:40.050
我说之前简单

22:40.050 --> 22:41.050
我就拿着去这样做了

22:41.050 --> 22:42.050
我们该取个名字

22:42.050 --> 22:44.050
叫set as a relation

22:45.050 --> 22:47.050
叫set as a relation

22:47.050 --> 22:48.050
设置关系

22:48.050 --> 22:50.050
这是个设置

22:50.050 --> 22:52.050
模型关系

22:52.050 --> 22:53.050
好来吧

22:53.050 --> 22:55.050
这里导入class

22:55.050 --> 22:57.050
require

22:57.050 --> 22:58.050
导入了

22:58.050 --> 23:00.050
调鞋杠class

23:00.050 --> 23:01.050
然后导入学生

23:01.050 --> 23:02.050
student

23:02.050 --> 23:03.050
我们把两个都关联上

23:03.050 --> 23:04.050
正向关联

23:04.050 --> 23:05.050
反向关联都给它弄上

23:05.050 --> 23:06.050
student

23:06.050 --> 23:08.050
class has many

23:08.050 --> 23:10.050
有很多的

23:10.050 --> 23:12.050
一个班级有很多的学生

23:13.050 --> 23:14.050
我们之前

23:14.050 --> 23:16.050
定义模型没有定义好

23:16.050 --> 23:17.050
然后一个学生

23:17.050 --> 23:18.050
belongs to

23:18.050 --> 23:20.050
属于一个班级

23:20.050 --> 23:21.050
我们把这个东西定义好

23:21.050 --> 23:22.050
那么这个relation

23:22.050 --> 23:23.050
在一开始就必须要运行

23:23.050 --> 23:24.050
在这里

23:24.050 --> 23:26.050
这里我们除了要运行

23:26.050 --> 23:27.050
同步之外还要运行

23:27.050 --> 23:29.050
同步我们现在没有运行的

23:29.050 --> 23:30.050
到时候最后

23:30.050 --> 23:31.050
就可以把它加上

23:31.050 --> 23:33.050
运行

23:33.050 --> 23:35.050
relations

23:35.050 --> 23:37.050
把个运行一下

23:37.050 --> 23:38.050
关系设置好

23:38.050 --> 23:39.050
然后再来看

23:39.050 --> 23:41.050
我们现在在运行的时候

23:41.050 --> 23:43.050
肯定是有关系的

23:43.050 --> 23:44.050
我们现在从

23:44.050 --> 23:45.050
运这个时候开始运行

23:45.050 --> 23:47.050
然后我们这里运行

23:47.050 --> 23:48.050
moke

23:48.050 --> 23:49.050
require

23:50.050 --> 23:51.050
moke

23:51.050 --> 23:53.050
moke students

23:54.050 --> 23:55.050
不是

23:55.050 --> 23:57.050
moke

23:57.050 --> 24:00.490
moke students

24:00.490 --> 24:01.490
students

24:01.490 --> 24:02.490
好

24:02.490 --> 24:03.490
行了

24:03.490 --> 24:04.490
咱们把这个两个

24:04.490 --> 24:05.490
我们直接就运行

24:05.490 --> 24:06.490
运这个时候了

24:06.490 --> 24:07.490
现在我们来看一下

24:07.490 --> 24:08.490
应该现在没问题了

24:08.490 --> 24:09.490
看一下吧

24:09.490 --> 24:10.490
loading

24:10.490 --> 24:11.490
这个时候

24:11.490 --> 24:13.490
loading

24:15.490 --> 24:16.490
好

24:16.490 --> 24:17.490
那么现在你看class id就出来了

24:17.490 --> 24:18.490
看没

24:18.490 --> 24:19.490
class id出来了

24:20.490 --> 24:22.490
然后我们到数据库里面去

24:22.490 --> 24:23.490
刷新

24:23.490 --> 24:24.490
数据出来了

24:24.490 --> 24:25.490
对吧

24:25.490 --> 24:26.490
class id有了

24:26.490 --> 24:27.490
行了

24:27.490 --> 24:29.490
那我们把这个数据再全部删除掉

24:29.490 --> 24:30.490
然后我们现在多生成一点

24:30.490 --> 24:32.490
生成个500到700

24:33.490 --> 24:35.490
生成这么多数据

24:35.490 --> 24:36.490
好 接下来运行

24:37.490 --> 24:39.490
好 停止

24:39.490 --> 24:40.490
到这边来

24:43.120 --> 24:44.120
右键

24:44.120 --> 24:45.120
刷新

24:45.120 --> 24:46.120
你看 是不是全都有了

24:47.120 --> 24:49.120
就500到700条学生

24:50.120 --> 24:52.120
之前删除的id它还保留着

24:52.120 --> 24:54.120
它之前删除的id就不能再用了

24:54.120 --> 24:55.120
它是一次往后排的

24:55.120 --> 24:56.120
这个不影响

24:56.120 --> 24:57.120
一点都不影响

24:57.120 --> 24:58.120
这里呢

24:58.120 --> 24:59.120
我们先看一下

24:59.120 --> 25:00.120
它生成了多少学生

25:01.120 --> 25:03.120
from students

25:04.120 --> 25:06.120
生成了521个学生

25:06.120 --> 25:07.120
对吧 够了

25:07.120 --> 25:08.120
够用了

25:08.120 --> 25:09.120
我就加了这么一些测试数据

25:09.120 --> 25:10.120
好

25:10.120 --> 25:11.120
这里呢

25:11.120 --> 25:13.120
我们就利用了moke来加了一些测试数据

25:13.120 --> 25:14.120
然后呢

25:14.120 --> 25:16.120
我们还有一个表是没有数据的

25:16.120 --> 25:17.120
看没

25:17.120 --> 25:18.120
还有什么表呢

25:18.120 --> 25:19.120
还有这个不可是表

25:19.120 --> 25:21.120
我之所以给大家设计这个表

25:21.120 --> 25:23.120
我设计这个表的目的是啥呢

25:23.120 --> 25:24.120
我设计这个表的目的是

25:24.120 --> 25:26.120
我们要做一个数据

25:26.120 --> 25:28.120
从网上去爬一些数据

25:28.120 --> 25:29.120
放进来

25:29.120 --> 25:30.120
把这些东西

25:30.120 --> 25:32.120
平时我们没这么用的

25:32.120 --> 25:34.120
因为你之前讲直播课

25:34.120 --> 25:35.120
发现这些问题

25:35.120 --> 25:36.120
我就在路播课里边

25:36.120 --> 25:37.120
把这些东西讲了

25:37.120 --> 25:39.120
这是我们下一个讲的内容

25:39.120 --> 25:40.120
第一个数据模拟

25:40.120 --> 25:41.120
大家跟着我做

25:41.120 --> 25:43.120
把这个数据模拟的数据加进去

25:43.120 --> 25:44.120
OK

25:44.120 --> 25:46.120
那么这是这一块内容

