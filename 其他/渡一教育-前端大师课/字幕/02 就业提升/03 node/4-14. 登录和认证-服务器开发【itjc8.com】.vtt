WEBVTT

00:00.000 --> 00:02.560
来啊 咱们花两节课的时间

00:03.060 --> 00:07.680
把这个登录认证服务器客户端整个流程走一遍啊

00:08.200 --> 00:10.500
不然的话我想 我在想嘛 这个东西

00:11.520 --> 00:14.080
我也不能确定你们之前学乌邮啊 还是后边学乌邮

00:14.340 --> 00:17.660
啊 乌邮也不能确定我之前讲的揭示还是后边讲

00:18.180 --> 00:22.520
呃 为什么不能确定啊 给大家说一下 因为这个课程啊 我担心它调 我知道吧

00:23.040 --> 00:28.420
因为我你们现在比方都在前面一点学 对吧 那么之后呢可能调到后边去了

00:28.640 --> 00:32.760
啊 可能可能后边又调到前面去了 说不准的 所以说我没有办法确定啊

00:33.280 --> 00:39.420
那讲乌邮的人呢 也没办法确定啊 乌邮三三老师讲的对吧 所以说这个东西前后端一起来做

00:39.680 --> 00:44.040
啊 这个东西怎么做啊 算了吧 还是我把它弄了吧 不然的话有没有

00:44.300 --> 00:48.140
到时候呢 整个流程没有走一遍啊 登录的时候呢 要要放蒙

00:49.160 --> 00:51.980
啊 我们把这个 我们现在搞定服务器啊 服务器比较简单

00:52.240 --> 00:56.080
就是服务器真的比较简单简单 它其实我们就用一个第三方库要接身为头坑

00:56.580 --> 00:57.600
就是JWT这个库啊

00:58.420 --> 01:04.260
实际上呢 它专门跟那个Express啊 它专门做了一个中间键啊 叫expressjwt

01:04.520 --> 01:10.140
你可以去看一下啊 写到这吧 你们有兴趣的话自己看一下 反正那个库呢 我是没啥兴趣用的

01:10.400 --> 01:11.940
expressjwt

01:12.700 --> 01:19.100
你可以至于看一下啊 这是专门给一个expressjwt中间键啊 它的它的一代库就是这个库

01:19.860 --> 01:26.260
就它里面就使用了这个库啊 我不太喜欢用这个库呢 是因为我想更灵活一点啊 因为本来我们也写不了多少袋嘛

01:26.480 --> 01:31.840
真的写不了多少 特别简单的 有了这个库支持过后呢 jwt就很简单了啊 我们把它安装一下先

01:33.640 --> 01:35.680
先安装一下 npm i

01:36.200 --> 01:38.240
接设 web 头坑

01:39.780 --> 01:45.440
为什么简单呢 它这个库啊 跟那个什么你什么web服务器啊 一点关系都没有 它就是一个做那个

01:45.680 --> 01:47.960
算法啊 然后把它变成一个头坑

01:49.000 --> 01:52.840
jwt定排 然后把个定排解出来 对吧 就完了 我看一下吧

01:53.860 --> 01:55.140
把这个东西做死掉

01:56.880 --> 02:03.520
来吧 这里怎么用呢 这里看它的文档说怎么用的 这里呢你直接直接把它弄不进来啊 require

02:04.800 --> 02:05.800
jwt require

02:06.960 --> 02:14.400
json web token 对吧 弄简单 我来简单的用一下啊 特别简单 然后呢 它里边有一个叫做sign

02:15.320 --> 02:16.760
对吧 加密嘛

02:17.600 --> 02:24.800
啊 给它传什么呢 第一个常识就是传payload的 黑带你都不用传了啊 黑带他自己帮你搞定了 因为黑带我们基本上固定嘛 对不对

02:24.860 --> 02:31.740
所以说你只需要把payload传给他就行了payload是什么呢 payload就是你一个对象 就是你要加的一些额外的信息啊 比方说我们加一个吧

02:32.940 --> 02:39.500
比方说这个用户的id id为1啊 比方说用户的姓名啊 姓名为啊 成个

02:41.140 --> 02:44.380
那就完了 就加就就这个吧 就是我们的payload的 对吧 就是一个对象

02:45.060 --> 02:51.020
然后呢 第二个常识呢 你传一个什么secret 就是我们的密要 对吧 因为他要生成第三部分 第三部分是不上密要

02:51.600 --> 02:57.240
对 对成加密算法嘛 他没人是对成加密啊 所以说你要给他个密要 这个密要呢 我们就随便拿一个吧

02:58.360 --> 02:58.760
secret

03:00.800 --> 03:06.640
啊 这个地方我们就来个元净啊 用元净给成个加密

03:08.400 --> 03:14.080
secret啊 第三个常识呢 是一些配置啊 也配置了 他都有默认的 如果说你要配置的话就配置的

03:14.460 --> 03:20.300
比方说你要配置什么呢 就是主题你可以配置的啊 这个obsync是有什么配置 算法呢 他没人是这个啊

03:20.300 --> 03:21.700
hsf6你都不用去改他

03:22.420 --> 03:28.540
然后not before啊 那之前就是在什么时间点之前 听众啊 你自己去玩啊 我们一般来配置的话就配置这个玩意儿

03:29.140 --> 03:35.660
多少时间内过期啊 这个地方配置啥 这个地方配置啥呢 配置就是多少秒后过期啊 比方说我们就

03:37.700 --> 03:44.060
3600秒 是吧 就是多少时间啊 多少那个一个小时后过期 对不对 这样子他就给你搞

03:44.080 --> 03:46.800
了一个jwt出来了 一个jwt令牌就出来了啊 token

03:47.900 --> 03:53.380
啊 我们输出一下 token 来吧 运行看一下吧 npm start

03:54.900 --> 04:00.780
这不就是jwt吧 就这个玩意 就是个字幕串嘛 给生成出来了 他跟什么服务系的都没有关系啊 你自己去搞

04:01.580 --> 04:10.180
就完了啊 对吧 好 那么这个token呢 如果说你要把它解出来 怎么解啊 把解出来 解出来的话 我们要有他提问这么一个方法要decode

04:10.760 --> 04:14.240
decode呢 你是要给他传一个token 啊 token进去 他就可以给你解

04:14.880 --> 04:24.720
把解出来 但是呢 这个方法是不会验证的啊 我们之前讲了token验证 他是不是要跟第三部分来重新编码 重新加密过后要进行验证 他这个东西只是解出来 他不会给你进行验证的

04:25.360 --> 04:32.200
知道吧 所以说呢 他这个地方是不用提供这个secrets的 那么咱们 咱们把解一下吧 嗯 decoded

04:33.160 --> 04:38.480
解出来 啊 decoded 比方说刻不当地传过来的把解出来啊 我们加在运行

04:39.460 --> 04:51.340
重新保存一下就可以运行了 对吧啊 你看 解出来是不是这个 对吧 他他是不是给你附带了那个payload里面 是不是给你附带了两个属性啊 对吧 因为你配置的啊 一个是创建时间 一个是那个过期时间 是不是给你附带进去了

04:51.740 --> 04:59.380
啊 过期时间不就加了3600毫秒吗 啊 加了3600秒 对不对 啊 当然这东西没有验证 你不要用这个啊 你要用什么呢 你要用那个

05:00.060 --> 05:04.020
jwt 那个verified 啊verified 怎么多的

05:04.840 --> 05:14.920
叫做verified okay 那么通过这个东西的话解出来 而且他会经过验证 验证通过了过后他给你解过来

05:15.440 --> 05:21.320
啊 如果说验证没有通过他就直接爆错了 他说解的时候呢还要传什么呢 你要传个token进去

05:21.960 --> 05:30.440
啊 你要传有什么呢 还要就是secrets啊secrets就是你的meal啊secrets传进去 第三个谈判就是options 没有什么传的了啊

05:30.860 --> 05:31.980
来吧 让他解一下

05:33.180 --> 05:38.420
是不是 你看 是不是仍然可以解出来 对吧 没问题 因为现在能验证通过 那比方说我们重新来一次吧

05:39.580 --> 05:43.220
expires in 啊 我们给他传递一个0

05:44.900 --> 05:52.660
就是已经过期了啊 零秒之后就过期了 你看是不是爆错了 对吧 他解出来告诉你什么呢 他说jwt expired

05:53.640 --> 06:01.440
是他的内部进行操作了 他说告诉你过期了 对不对 所以这里按照标准写呢 还是有好处啊 按照标准呢 他可以按照标准的属性来读

06:01.800 --> 06:04.720
不然的话你起到其他属性 他都不知道你过期的时间是多久

06:05.080 --> 06:10.840
好 那么这里呢 我们就可以用个揣开器对不对啊 揣开器 我们这里让你揣开器呢 就表示他有没过期

06:12.440 --> 06:19.820
啊 揣开器 这里能够输出啊 就是表示jwt无效

06:20.280 --> 06:26.840
不管他什么原因引起的那个就是无法验证通过 总之就是无效嘛 有可能过期了 有可能已经被创改了

06:27.160 --> 06:28.440
都是无效 对不对

06:29.240 --> 06:32.880
那么这里呢 你看jwt无效 就这么为 就这么为事啊 非常简单

06:33.640 --> 06:37.680
那么这个这个库呢 有了这个库之后呢 我们就可以来写我们的服务器的业务逻辑了

06:38.120 --> 06:44.200
我们的服务器呢 无非就是有两个操作吧 一个是办法jwt 一个是认证jwt 对吧 我们可以写个模块来做这个事

06:44.960 --> 06:46.160
哎 这边呢 我们就把那个

06:46.660 --> 06:48.220
这个

06:48.780 --> 06:54.140
重新打开啊 打开入式 然后呢 在route里边啊 给他加一个uq吧 加一个文件

06:55.340 --> 07:01.580
就叫我jwt吧好 这里面提供了两个方法啊 一个方法呢 是用来颁发export

07:03.180 --> 07:03.380
呃

07:04.380 --> 07:05.740
一个是用来publish

07:06.700 --> 07:08.180
颁发jwt

07:09.620 --> 07:10.260
打个入式啊

07:11.460 --> 07:11.820
这是

07:13.140 --> 07:14.460
颁发jwt

07:15.120 --> 07:16.480
好 一个方法呢 是用来

07:17.800 --> 07:19.240
验证啊jwt

07:19.680 --> 07:20.800
啊very 就是

07:21.800 --> 07:22.440
very fine

07:26.200 --> 07:27.240
一个方法是用来就是

07:28.000 --> 07:30.880
颁发jwt 一个方法是用来验证

07:31.760 --> 07:32.440
就这么个意思啊

07:33.360 --> 07:36.920
好 来吧 我们第一个方法啊 颁发jwt 我要考虑什么事情呢

07:37.480 --> 07:41.360
颁发jwt的时候 首先要确定过期时间 是不是那个那个库自动给你确定的

07:42.200 --> 07:44.240
啊 那么主题是什么

07:44.300 --> 07:49.900
就是我们要往jwt那个payload的里面 过期时间是不是我们也最好来传一个吧 传一个进来

07:50.900 --> 07:51.340
expire

07:52.820 --> 07:56.460
啊 就用max age吧 跟那个cookie差不多 对吧 max age

07:57.100 --> 07:57.820
啊 你传进来

07:58.460 --> 08:01.020
呃 然后呢 主题是什么 就是你要保存什么信息

08:01.980 --> 08:06.300
要保存用户 id 用户的姓名 还是什么保存一个对象 随便你啊 保存什么信息进来

08:06.860 --> 08:10.780
啊 就是我们用一个就是 uh inform啊 你把传一个对象进来啊

08:11.420 --> 08:13.300
max age呢 我给他个默认值嘛

08:13.880 --> 08:15.080
给他个默认值 例如说

08:16.080 --> 08:22.280
呃 一天 一天是多久 3600 x 1200对吧 3600秒 x 1200 x 1200个小时嘛

08:22.960 --> 08:29.680
啊 info呢 就是时间呢 我们给他传递一个默认值吧 而就是info 我们消息的话 默认就是个空对下 啥都没有

08:31.360 --> 08:34.560
啊 然后呢 还要就是确定必要啊 必要的话 我就在内部确定就行了

08:35.600 --> 08:36.400
确定一个secrets

08:37.440 --> 08:43.040
啊 就用 随便用一个吧 用原计嘛 这是必要呢 最好水机生成啊 水机生成啊 我们不好猜测

08:43.800 --> 08:51.480
嗯 然后呢 确定传输方式 就是你放了 cookie 里边呢 还是放了 awesome tk uh authorization 里边 到底还是两个都放了啊 我们这里呢 比方中两个都放呗

08:52.000 --> 08:58.920
好来吧 我们这个 那么既然要放 cookie 那我们是不是要给我一个就是 race 对吧 race对象 是吧 把这个东西给我

08:59.440 --> 09:01.760
好 那么我们把 race 就像起前面吧 后边两个默认值

09:02.920 --> 09:04.960
行了 那这里边我们就可以怎么来玩呢

09:06.120 --> 09:10.920
就这样吧 我们就用那个把那个导入进来 那个就是 g wt 导入进来

09:11.620 --> 09:15.380
quad 啊 接生头web token 然后呢 g wt

09:16.340 --> 09:25.460
我们给他用一个sign啊 就是签名啊 我们的payload 是什么呢 payload 就是那个info 对吧 我们要就是发放了这个对象

09:26.220 --> 09:33.420
然后呢secrets呢secrets 我们用这个secrets啊 内部的好 options 呢 options 呢 我们这里呢 写上一个 expire

09:35.020 --> 09:37.100
啊 给他写上 max age 对吧

09:37.960 --> 09:42.040
就行了 那么这个wt 是不是就完成了啊 得到一个什么了 得到一个 token

09:43.000 --> 09:51.760
对吧 得到个 token 好 拿到个 token 之后呢 我们要把他发送到哪呢 是不是要发送到那个就是可以发送 我们两个都来吧 一个sets cookie 啊 一个是

09:52.760 --> 09:55.720
来吧 两个都来 好 cookie 啊 添加到 cookie

09:57.600 --> 10:01.200
cookie 啊 怎么来添加到 cookie 呢 我们确定一个 cookie 的 key 嘛

10:03.000 --> 10:03.400
const

10:04.120 --> 10:05.120
cookie key

10:06.100 --> 10:12.580
就用 token 啊 好 然后呢 添加到 cookie 我们就可以用什么 race 里面的方法 对吧 cookie 对不对 所以有这个方法

10:13.100 --> 10:17.180
啊 我这里说一下之前好像讲错了啊 这个 cookie 的方法不是那个那个中间键带过来的啊

10:18.220 --> 10:25.220
不是那个中间键不是这个就是 cookie poser 啊 因为我平时用的时候一般都会加上这个中间键啊 所以说我以为是这个中间键带来的

10:25.220 --> 10:29.060
不是的啊 他原生就有啊 这个方法 cookie 中间键呢 他只是用来解析 cookie 的

10:29.580 --> 10:34.820
那么这个 cookie 方法里边啊 第一个传什么呢 cookie 的名称 对不对 cookie 的名称 我们就是用这个 cookie key 嘛

10:35.620 --> 10:44.860
啊 啊 这个 cookie 的值 cookie 的值传什么呢 就是这个 token 啊 然后呢 这个 option 里面不是有 max a 级吗 对不对

10:45.140 --> 10:52.300
是不是 max a 级 好 max a 级 我们传什么呢 就是 max a 级啊 cookie 的过期时间跟这个过期时间是一样的 对吧 过期时间一样

10:52.700 --> 11:00.220
啊 然后呢 还有啥呢 啊 还有 pass 啊 pass 的话 我们就这个吧 啊 读妹 读妹的话 我们就

11:00.940 --> 11:04.380
啊 就不写了吧 就当起了读妹 让你让自己搞定

11:05.320 --> 11:13.200
啊 写完了 对 cookie 是不是完成了 对不对 好 cookie 完成了啊 然后呢 就是添加还有一个就是因为你不能只考虑浏览器吧

11:13.200 --> 11:21.200
对吧 其他设备 cookie 肯定很不好用的啊 当然你不可添加 cookie 让浏览器跟大家一起走也行啊 这个主要是为专门为浏览器准备的

11:21.700 --> 11:27.740
啊 添加其他传输 啊 比方说我们给他添加一个 header header 是什么呢 header 就是一个

11:28.300 --> 11:29.980
authorization

11:30.780 --> 11:34.940
authorization 好 然后来给他添加一个 token 加进去 完事了

11:35.340 --> 11:40.460
对吧 就是办法wt 没问题吧 好 咱们来测试一下啊 我们到那个

11:41.580 --> 11:49.420
哎 这个就是我们之前写的 儿的命登录成功 登录成功过后 我们干嘛呢 我们就添加wt

11:50.140 --> 11:53.340
那现在解不了解wt 来吧 我们这里就不用这么搞事了啊

11:54.380 --> 11:57.660
谁信我们就不要了啊 谁信不要了 谁信我写了啊 去啊

11:58.660 --> 12:00.540
在这 谁信不要了

12:01.360 --> 12:06.000
啊 这里添加个wt啊 我们这里导入wt require

12:07.000 --> 12:12.360
上一集目录的wt 那么这边呢wt里边一个函数啊 叫做publish

12:13.480 --> 12:19.280
然后呢 传入一个 risk 对象 传入一个max age 啊max age 我这里说一下啊 这个东西呢 你可以服务器自行决定

12:20.000 --> 12:22.840
也可以让客户端决定 比方说你们有的时候登录的时候 是不是

12:23.560 --> 12:28.840
七天记住密码对不对 有没有这个选项 有的社会有对吧 有些网站他就可以做到这个东西

12:29.060 --> 12:34.780
让客户端自行决定啊 你多久过后就不用再不用再登录了啊 就是这么个意思啊

12:35.500 --> 12:44.260
那么这里呢也可以啊 让客户端来决定 都行啊 都行 那么这里呢 我就自行决定了吧 自行决定了啊 后边不传了啊 那他使用默认值 不传了

12:44.980 --> 12:49.500
啊 登录成功 那么就发放wt 好 咱们保存

12:50.660 --> 12:51.460
啊 保存试一下

12:53.060 --> 12:55.420
现在我们到postman里面去 来进行登录

12:59.510 --> 13:04.550
postman 哎 我之前说过登录啊 管理员登录 哎 拿出来

13:06.030 --> 13:07.830
来吧 登录一个 走一个

13:09.830 --> 13:10.270
做啥啊

13:11.390 --> 13:16.710
not a loud 怎么又出现这个 not a loud 又出现这个玩意了 是吧

13:17.430 --> 13:21.550
啊 又来断断断脸条是吧 要不我之前记得之前出现过了

13:22.410 --> 13:28.970
啊 什么玩意 什么玩意 这是 啊 咱们来试一下吧 这个地方 打个断点 看他又没运行到断点

13:30.810 --> 13:37.370
send 还是还是个问题是吧 呃 又来吧 又来 然后呢 我们在这里

13:39.450 --> 13:47.110
在那个就是token middleware里边 再来 真调过了又忘了

13:48.110 --> 13:52.630
还是出问题了是吧 还是出问题了 他token middleware都没都没有到

13:53.750 --> 13:55.950
是意思吧 他们这个地方都没有到

13:57.190 --> 13:59.990
呃 那我们看一下他执行到哪出了问题

14:02.150 --> 14:04.270
啊 应该又是这啊 应该又是这

14:06.270 --> 14:08.270
应该又是个跨越的跨越的一个地方

14:11.660 --> 14:13.460
嗯 我这里的orange

14:14.260 --> 14:16.340
哦 我这里还有个情况啊 就是没有判断

14:17.020 --> 14:24.660
有没有orange 他orange存不存在 我把orange打进出来啊 这个地方应该是运行到了 我们不用打印啊 我们这里就直接打个断点就行了

14:25.560 --> 14:26.040
好 再来

14:27.000 --> 14:38.720
这个地方orange 啊 啊 因为他这里没有跨越 像有些工具他没有跨越请求对吧 他就没有给你orange啊 或者是呢 有些工具他就不给你orange 那么这个地方呢 如果说orange根本就不存在

14:39.520 --> 14:40.960
orange 他不存在

14:42.120 --> 14:48.480
不存在的话一定是不是通过流烂器的对吧 是通过其他工具的通过其他工具的话我就不管了 那就不管了 那么就是callback

14:49.360 --> 14:50.880
对啊 callback now

14:51.920 --> 14:52.400
orange

14:54.490 --> 14:57.010
就完了 或者给他一个信号吧 这个信号也行

14:58.210 --> 14:59.970
ok 那么现在我们试一下啊

15:01.010 --> 15:02.410
哎 还 not not

15:06.100 --> 15:11.260
哎 这就不对哦 现在都不 现在都没有运行到这儿啊

15:12.260 --> 15:13.940
现在都没有运行到这个orange呢

15:15.060 --> 15:18.910
我这边没有调试 我看一下啊

15:20.030 --> 15:28.360
就是这个地方出了问题啊 然后地方呢 肯定他会到这个到这个callback呀 到这个callback

15:29.760 --> 15:30.560
他没有错误啊

15:32.560 --> 15:36.050
没有错误啊 next

15:37.650 --> 15:38.290
orange

15:41.740 --> 15:45.620
orange option是orange信号 没问题啊 rig race

15:49.510 --> 15:57.590
哦 没有结束是吧 我这里没结束啊 return 结束 你看这些是这些小的问题一大堆

15:58.230 --> 16:03.910
啊 所以都成功了 然后我们看一下服务器的响应结果啊 服务器的响应结果里面是一个java set cookie 对吧

16:04.210 --> 16:08.290
所以把这个jwt放到cookie里面去了 对吧 没问题吧

16:09.650 --> 16:17.010
max a级等于86 哦 这是好妙啊 这个地方的max a级是好妙 让我们调一下

16:17.490 --> 16:22.210
这个地方是好妙啊 所以说要存1000 然后他就认为是秒了 好的了

16:22.730 --> 16:28.170
信啊 你看 现在是个cookie没问题了 对吧 嗯 没问题了 然后呢这个

16:29.050 --> 16:33.890
orange信你看这里jwt数加过去了 对吧 那么现在办法皆由大家jwt数没问题

16:34.530 --> 16:40.530
对吧 那么这当然了 你可以也不用cookie啊 直接用一个就行啊 我们后边可以说一说直接用一个吧

16:41.450 --> 16:45.450
好 这个地方是不是做完了 好 那么现在另外一个地方就是要那个

16:46.770 --> 16:49.530
要解析了啊 就是认证jwt的

16:51.170 --> 16:58.890
就是要认证了 就是客户上给我传过来了 把jwt给我传过来了 那么你首先就要把获取到对吧 那么你现在既然从cookie里边办法了

16:59.290 --> 17:03.330
也也办法到他的消息头里边了 那么你获取的时候 是不是也要从cookie里边获取

17:04.210 --> 17:07.010
cookie里边没有再从这个地方获取 对吧 我们要写个逻辑

17:07.810 --> 17:13.650
像这些东西 像这些灵活的方式呢 就是我为什么不喜欢用那个他提供了expressjwt的过

17:13.650 --> 17:14.850
就算没有这种灵活的方式

17:15.850 --> 17:21.210
好 我们这里呢就直接来吧 那么你 我们现在呢首先从cookie中获取啊 尝试

17:22.330 --> 17:24.570
从cookie中获取

17:27.370 --> 17:31.370
好 来吧 我们这里先订个辩量啊 token 看token从哪来

17:32.350 --> 17:33.630
一开始就没有没有值吗

17:34.190 --> 17:39.230
好 从cookie中获取 怎么获取呢 我们就可以通过啊 你是吧 给我一个req对象

17:39.830 --> 17:43.430
对不对 说得给我一个req对象 那么我们从个req对象里边cookie

17:44.070 --> 17:46.790
cookie 是不是这里面去找什么 找token

17:47.710 --> 17:50.470
对吧 找了个token 好 看能不能找到啊

17:51.150 --> 17:51.350
token

17:52.350 --> 17:56.990
能不能找到 好 如果说token还是没有值 说明了cookie里边没有对吧

17:58.910 --> 17:59.390
cookie中

18:00.290 --> 18:04.850
没有 对不对 没有这个值 那么从哪里找啊 那么就尝试

18:06.290 --> 18:08.850
尝试 从header中找

18:09.650 --> 18:15.810
那么header里边我们一般规范的话 这要双方约定的啊 科普端那边需要通过这个authorization 传过来

18:16.370 --> 18:19.490
所以说我们这里呢应该从哪个地方呢 从req 第二

18:20.130 --> 18:21.650
headers 啊 然后呢

18:22.210 --> 18:26.930
authorization 从这个里边取 对不对 把个token取出来

18:27.790 --> 18:34.470
token 好 那么有没有可能取出来 还是没有值 还是没有值 说明啥 如果说取出来 还是没有值

18:36.590 --> 18:40.430
还是没有值 说明啥 说明没有 对吧 没有这个就是token

18:40.910 --> 18:45.310
没有token是什么意思呢 就是验证失败了 对吧 验证失败的话 我就给他返回一个null

18:46.230 --> 18:48.950
我就不报错了 返回个null 表示没有token

18:50.150 --> 18:55.710
那么现在报到这 是不是header里边有这个东西 有token传过来了 对吧 它通过header传过来了

18:55.970 --> 19:02.250
那传递的时候呢 它有可能有两种方式 一种是加带的个bearer 一般来说一般来说就带的个bearer

19:02.490 --> 19:07.050
还有一种可能是不带这个bearer 那就看你服务器怎么认了 你服务器要严格一点的话 就必须要给我带

19:07.490 --> 19:11.130
没有什么不带的 必须要给我带 还有一种就是我就不带

19:12.010 --> 19:17.610
那么就看你严不严格了 如果说你宽松一点的话 两种情况都处理一下 比如说我们这里有两个情况处理一下吧

19:18.010 --> 19:21.850
其实我就判断啥 判断你没有空格 对吧 bearer跟那个token之间是不是有个空格

19:22.390 --> 19:27.350
对不对 我就判断一下 有没有空格就完事了 怎么判断的特别简单 我们把这个token就用split

19:27.950 --> 19:33.950
用空格来分割一下 对吧 分割成两段 对不对 parts 分割成两段

19:34.630 --> 19:35.830
好 如果说这个parts

19:36.950 --> 19:37.590
derlance

19:39.430 --> 19:45.430
或者说我们我们是不是就取第二段 对吧 取第二呢 就我们直接取一嘛 我就直接省略一下

19:45.870 --> 19:47.950
分割出来一看 它的格式应该是这样子

19:48.930 --> 19:54.010
它这个authorization 到时候约定好它的格式呢 就是bearer

19:55.130 --> 19:55.650
这样下吧

19:56.890 --> 20:04.250
bearer 然后空格后边是token 对吧 所以说我们这里呢 把个header取出来过后呢 用空格分割一下 是不是取第二段

20:04.650 --> 20:10.050
对不对 那如果说他没有加这个东西 那取第二段是不是就有问题 对不对 所以有问题

20:11.330 --> 20:16.850
比方说吧 我们这里这样吧 把这个token分割出来啊 那么token呢 它又等于

20:17.190 --> 20:23.110
它是不是一个数组 对不对 分割成两个的数组啊 当然它数组是不是可能也只有一下 那么我们就等于token

20:23.630 --> 20:24.310
derlance

20:25.470 --> 20:31.230
如果说等于一 等于一嘛 如果说等于一 那么我就直接取你自己 取第一个

20:31.870 --> 20:38.030
对不对 如果说它等于二的话 那么它就是不只为一个 那么我们就取第二部分 对不对 token

20:38.870 --> 20:41.510
就这样去就完事了 最终我们把个token就拿到了

20:42.230 --> 20:46.070
好 拿到这个token之后呢 我们现在是不是要验证了 通过什么来验证

20:46.810 --> 20:47.770
通过那个就是

20:49.970 --> 20:54.050
cookies 我们用这个 为什么要用这种方式

20:55.530 --> 21:00.170
用这种方式 这样方式就可以在这里配置cookies的名称了 对吧 好 那么这里呢 我们要验

21:00.490 --> 21:05.330
就是看一下他有没有就是是不是有效的 我们就用什么gwt来进行验证

21:06.770 --> 21:09.610
然后token拿进去 然后secret放进去

21:10.490 --> 21:15.650
好 没了 那么他验证了有可能会验 验证出来是不是有个结果 对不对

21:16.030 --> 21:17.390
result 有个结果

21:18.430 --> 21:18.750
那么

21:19.870 --> 21:24.550
这个结果呢 我们如果说他没有爆出的话 就直接返回 我们用个check package

21:28.000 --> 21:31.200
好 直接返回result这个结果 好 如果说

21:32.200 --> 21:32.600
catch

21:34.520 --> 21:38.920
如果说他爆出了 是不是验证失败 验证失败我就返回落呗 只要反正返回落我就表示

21:39.640 --> 21:42.320
表示有问题 总之返回落我就有问题

21:43.240 --> 21:45.400
原来的意思吧 好 那么这是这一块

21:46.260 --> 21:51.300
啊 very fine 那么我们什么时候用呢 无非就在这吧 token middleware 是吧 我们之前写过这一块

21:51.860 --> 21:59.140
就在这里用嘛 好 那么这里呢 我们是不是写了两个吗 这两个都需要全线的啊 比方说这随便写了两个啊 需要全线的

21:59.540 --> 22:02.060
ok 那如果说他不需要全线 他不需要全线的话

22:03.140 --> 22:10.100
啊 那么我就直接往下走了 如果说他需要全线的话怎么办啊 他需要全线的话 我们是不是要验证

22:10.900 --> 22:13.100
啊 验证了个token 对不对 所以说我们把那个

22:14.000 --> 22:15.200
不用什么加密了啊

22:16.400 --> 22:20.360
jwt 一块上级目录jwt 也

22:21.160 --> 22:22.520
而就当前目录啊jwt

22:24.000 --> 22:33.080
他里面不是提供了一个方法吗 我们我们讲了一个方法啊 very fine 对吧 你给他一个啥 给他一个 rake 传进去就行了 他在帮你进行验证啊 得到一个 得到一个结果

22:33.640 --> 22:34.040
result

22:35.280 --> 22:39.600
啊 得到一个结果 也我们刚才那个登陆成功过后 我看啊 我这里写写了有问题吗

22:40.480 --> 22:43.000
啊 登陆成功好像有问题啊 我只传了一个这个

22:43.400 --> 22:49.080
然后呢 还有一个result没有传啊 maxa 呢 我们直接使用默认值吗 我们用df 让他使用默认值

22:49.320 --> 22:57.880
info 还没有传对不对 我还没有往里边保存东西 那保存什么东西呢 我们一般那就保存一个id嘛 啊 id 我也不用加密了啊 加什么呀 不用加密了

22:59.520 --> 23:03.760
因为现在有那个就是那个jwt 来保护 他不能篡改的

23:04.160 --> 23:08.240
好 所以我们这里呢 就直接把这个 id 给他传过去 当然你可以传很多的用户信息

23:08.820 --> 23:16.740
不过呢 我觉得吧 没必要 没必要 我直接把这个 id 传给你就行了啊 这都看你怎么想 如果说你传了很多信息过后呢

23:17.420 --> 23:26.380
服务器轻松一点 科普端那边事情就多了啊 科普端那边要自己去解析 因为他有很多信息嘛 他要获取自己的信息的时候 他就不用去

23:26.700 --> 23:30.820
问服务器了 对吧 直接从那个jwt 里面解析对吧 服务器的压力要小一点

23:31.220 --> 23:37.580
但是呢 他存在的时候 科普端麻烦一点 然后呢 科普端不是很安全啊 当然这些信息肯定是可以轻松的被解密的

23:38.300 --> 23:41.420
好 如果说你服务器的话 如果说你服务器

23:43.460 --> 23:49.220
只记录一个 id 科普端只记录一个 id 然后服务器那边 根据 id 从数据库来过去的话 服务器压力大一点

23:49.820 --> 23:52.420
他要做很多的事情 但是他跟个更安全 就看你选用哪一种

23:53.220 --> 23:56.180
那这里呢 我就只存个 id 吗 还是从数据库里面去查

23:56.780 --> 24:02.340
好 那么这里呢 我们就存一个 id 等于什么呢 等于这个value 对吧 再传个对象进去

24:03.080 --> 24:04.520
啊 g wt 说传过去了

24:05.440 --> 24:12.640
好 那么这边呢 他取出来是不是就是那个结果 对吧 他取出来可能还有过期时间 还有创建时间这种都有啊 我们只需要他里面的 id 就行了

24:13.320 --> 24:15.480
好 那么我们这里呢 就可以用一个

24:16.200 --> 24:20.920
保存到内 保存到哪呢 保存到这个 就是我们这里判断一下啊 判断一下 绿刀是有没有值

24:21.480 --> 24:24.560
如果说有值的话 那么说明 认证通过

24:25.440 --> 24:30.920
对吧 把解析出来了 认证通过 要是没有值的话 是不是认证实办啊 认证实办

24:32.640 --> 24:42.920
认证实办 我们是不是之前用写过 写过一个函数啊 瑞克瑞斯传进去啊 next 传进去就认证实办啊 认证通过了 通过了怎么办啊 通过了 我们就直接往后面移交啊

24:43.520 --> 24:44.880
next 往后边移交

24:46.680 --> 24:53.520
啊 认证实办 我就不移交了啊 认证通过的时候 我们就往后面移交 然后呢 在在瑞克里边 给他加一个属性吧

24:54.440 --> 24:55.040
user id

24:56.520 --> 24:59.640
或者是ardmin id 无所谓 随便取个什么名字 给他加一个进去

25:00.080 --> 25:01.200
result.id

25:02.180 --> 25:09.580
这个id是谁存的 就是我们之前在jwt里面存的 就在这里存的 好 咱们来走一下这个整个过程啊

25:10.140 --> 25:13.420
首先我们还是在登录一下 刚才改了一些代码 先登录一下

25:15.260 --> 25:16.540
登录 好 看一下

25:17.460 --> 25:18.380
是不是拿到了 对吧

25:19.380 --> 25:24.900
cookie 拿到了 我说啊 也拿到了 对吧 都可以拿了 两个都给你 这会增加一些传输量啊

25:25.680 --> 25:33.440
然后呢 现在呢 我们来认证 我们去做一个去写 在这里边打个端点吧 我们来看一下 调试一下

25:35.400 --> 25:35.720
就在这

25:36.960 --> 25:38.280
就在这里进行 打个端点

25:39.040 --> 25:42.920
好 我们这里来调试 运行 可以监控他每个运行过程

25:44.360 --> 25:49.440
哎 管理员 学生管理 我之前做过那个修改学生 对吧 好

25:50.400 --> 25:50.600
点进

25:51.180 --> 25:56.500
然后呢 我们进入到这个好函数啊 点这个 单步调试啊 进入

25:57.140 --> 26:01.700
就是这个函数 你看 首先呢 我们这一步步执行啊 点这个啊 我这就用快捷键了

26:02.500 --> 26:07.700
下一步 头盔是空的字幕出来的啊 然后呢 从cookie 里边取

26:08.260 --> 26:12.340
所以取出来了 取出来了 那么cookie 有没有值呢 如果说cookie 没有值 怎么样

26:14.340 --> 26:18.300
我这里只是看了没有值的啊 还没有看有值的情况

26:18.520 --> 26:19.560
看有值的情况

26:20.840 --> 26:27.560
对不对 是不是这个这个逻辑有问题 我这里只看了没有值的情况 是不是没有看有值的情况 说现在呢 有值的话

26:28.400 --> 26:34.960
他告诉我 没有传线啊 所以说还有一个有值的情况对不对 好 如果说有值的话

26:36.560 --> 26:38.800
我们这里这样吧 如果说token有值

26:42.130 --> 26:44.330
等一下啊 如果没有值 我从那个

26:45.090 --> 26:48.930
从那个黑带里边去取 黑带里边取不到 这两个都没有值 就会有绝称那

26:49.910 --> 26:54.830
然后呢 后边就是是不是就一定 要么就是从token里面 要么就从黑带里边取的 那么如果说黑带里边

26:55.710 --> 27:00.510
那么有值的话 是不是这样子去 我们这句话应该写下来对不对 所以应该写下来

27:01.550 --> 27:07.870
啊 啊 就是前面这段代码了 就是无论如何你要去取到这个token 无论你是从cookie 里边取 还是从黑带里边取

27:07.870 --> 27:11.030
对吧 这是从cookie 里边取 这是从黑带里边取 总之你要取到

27:11.830 --> 27:16.230
啊 两个取不到就直接结束了 没有意思啊 我们这样子写才对啊

27:17.050 --> 27:20.050
好 再来 再重新来 调试

27:21.570 --> 27:26.450
好 真的 好 首先楼上啊 然后进去 好 一步步来吧

27:27.930 --> 27:31.570
首先看token里面有没有值 有值 有值是不是直接进到这儿了 对吧

27:32.290 --> 27:35.090
所以在这儿去解析 解析出来是不是这个东西

27:39.810 --> 27:44.730
你看解析出来是不是这个东西 对吧 然后把这个返回啊 然后那么跳出去

27:45.710 --> 27:49.790
啊 那么这个result是不是有值的 对吧 有值的 然后从个result里面说取出id

27:50.430 --> 27:54.710
取出id 把它放到req对箱里边 那么方便后续的接口呢 方便获取

27:55.310 --> 27:59.070
对吧 就完事了啊 运行 然后呢 运行结束

27:59.870 --> 28:05.510
你看 数据完成添加了 都完成修改了 只不过这个 这个没有修改任何数据 对吧 没有修改任何数据

28:05.910 --> 28:09.870
好 OK 那么这是这个 那现在我们再来个试一下啊 把这个token删掉

28:10.330 --> 28:15.530
啊 把个token删掉 我没有cookie 啊 没有cookie现在呢 现在的逻辑呢

28:16.530 --> 28:20.530
我再来还是要调 运行出来 营积回来的啊 剩的

28:21.570 --> 28:26.170
啊 是不是没有没有权限 那么它整个走的逻辑我们还是看一下啊 用电端的调是看一下

28:26.490 --> 28:32.850
剩的 好 进去 哎 这个地方都要是闹了啊 要不要看 你们有兴趣自己去看啊 应该是没问题的

28:33.530 --> 28:39.650
啊 如果说那我们现在可以在header里边加啊 header里边不是可以加吗 我们把这个复制一下啊

28:41.840 --> 28:44.880
在这个header里边给他加上一个authorization

28:45.880 --> 28:48.920
好 这边呢 给他加进去啊 然后剩的

28:50.680 --> 28:54.960
哎 他说没有权限啊 没有权限是不是出问题了 那这个地方出问题了 然后断点调试

28:56.560 --> 28:58.480
剩的好 到这边来进去

29:00.160 --> 29:02.960
一步步走啊 然后呢 从这个地方authorization

29:03.760 --> 29:06.560
取取出来是什么呢 取出来是这个东西取出来的对啊

29:07.340 --> 29:11.180
他说如果说没有的话 还会拉哦 那个说如果说有的话 我们是被列车空格

29:11.740 --> 29:19.100
所以得到一个数组 对吧 他只有一项 如果长长度为一 我们就取第一项 如果说长度为二就取第二项

29:20.380 --> 29:24.140
投坑取出来是这个 没问题的呀 那么我看一下

29:24.780 --> 29:28.980
在走啊 他这个地方验证错误了 对吧 验证错误了

29:29.900 --> 29:33.260
呃 他为什么会有错误呢 这个验证啊 我这里把他错误写上啊

29:33.960 --> 29:38.700
我看这个是我是没复制完吗 还是什么回事

29:43.790 --> 29:46.630
他为什么会有验证错误呢 我们把个错误写上

29:47.950 --> 29:53.390
哎说 这样子可以观察到这个错误到底是什么错误啊 我们在直接的 直接的这个地方打个断点

29:54.070 --> 29:56.990
他不是爆错了吗 直接就错误的地方打个断点啊 现在

29:58.110 --> 29:58.990
啊 这没运行出来

30:00.870 --> 30:05.150
就是这样调试的 错误他说什么呢 jwt must be a stream

30:05.810 --> 30:13.720
他说我这个东西啊 是是一个时军啊 这个不是时军吗

30:15.760 --> 30:21.550
这不是时军是啥呀 他说我这个东西不是一个时军

30:23.740 --> 30:29.820
哎 为什么变成数字误了啊 我这个地方写错了对吧 我知道你们看那个看那个看那个字着急

30:32.520 --> 30:34.360
我只能说 and sorry

30:35.800 --> 30:39.800
好 来吧 说没问题对吧 我说来说去 那么我穿穿这种模式呢

30:42.940 --> 30:47.580
对吧 是不是也没问题 好那如果说我这里乱写格是呢

30:48.680 --> 30:53.520
呃 比较说吧 我这里把第二部分该篡改了啊 篡改了 然后再去

30:54.160 --> 30:59.360
是不是有问题对吧 ok 没问题啊 我们服务器这边啊 这两个重要的地方就写完了

30:59.840 --> 31:07.160
好 最后呢 我说一下啊 最后我们要添加一个接口 叫做互挨卖接口 服务器呢 我们反射车车登录的服务器 一般都有几个接口

31:08.140 --> 31:13.060
可能名字不一样 但是呢 这东西肯定是一样的 那我们把它放到耳朵命里边

31:14.300 --> 31:19.940
这个接口是怎么样子呢 它是这样子 我们首先get 啊get里边就是who am I 我是谁

31:22.740 --> 31:30.420
有这么一个接口 这个结果干嘛的呢 这个结果是这样子 就是你想啊 科普端那边是不是拿到一个token

31:31.180 --> 31:34.340
成功了吗 但它里边只有一个id 对吧 是没有用户信息的

31:34.920 --> 31:42.200
它只有一个id 那比较多它对自己管理 比方说一面它要显示 哎 当前都欢迎你 谁在谁 他是不是要获取自己的信息

31:42.800 --> 31:46.960
对不对啊 你不能说你给我传一个id过来 我把这个id的就是

31:47.800 --> 31:52.360
比方说你用get请求啊 你的地址男给我传一个id过来啊 有些同学呢 可能会这样子写

31:52.800 --> 31:59.040
给我传一个id过来 然后呢 我根据你传在id 啊 跟那个跟那个token没关系 对吧 我根据你传在id

32:00.020 --> 32:06.130
这样子肯定不行 为什么不行呢 张三登录了是不是可以传理式的id过来

32:07.090 --> 32:11.770
是不是可以这样子 那肯定不行啊 到张三登录了 他只能传张三自己的id 他自己的id在哪

32:12.170 --> 32:16.890
是不是就在token里面 对吧 所以说呢 你不用传任何东西 直接通过请求投

32:17.490 --> 32:22.010
给我附带过来token 附带头过来token 这边一验证 这边一验证是不是就可以了

32:22.690 --> 32:25.330
对吧 那么这里呢 我们再加上一个 加上一个地址

32:27.570 --> 32:33.530
额 介绍方法请求 请求什么了 请求的是api2min 然后呢

32:34.130 --> 32:35.010
who am i

32:36.170 --> 32:40.010
请求这个地址 这个地址要经过全线的 你只有登录了 你才能请求这个地址

32:40.770 --> 32:46.010
我要根据你的登录过后的请求 然后呢 从读取到你的什么id 你看id是不是

32:46.450 --> 32:50.370
到这个rid 有点id里面了 对吧 说明了 如果说代码到了这一块

32:51.170 --> 32:54.770
代码如果说到了这一块 是不是在rid对象里面就有一个id了 有点id了

32:55.390 --> 33:00.910
对不对 因为说如果说你没有uid的话 说明一认证一定没有通过 没有通过的话就直接认证失败了

33:01.430 --> 33:04.630
认证通过了是不是就一定有这个uid 我就可以把个uid取出来

33:05.150 --> 33:09.790
然后呢 从数据库里面去拿 对吧 从数据库里面去拿 那么这里呢 我们就可以在

33:09.990 --> 33:10.790
eudmin so

33:11.990 --> 33:14.550
然后呢 get eudmin代id

33:15.350 --> 33:17.830
然后呢 id是不是传进去 rig user id

33:18.110 --> 33:18.590
是不是传进去

33:19.430 --> 33:20.430
然后呢 是不是得到

33:21.590 --> 33:22.070
直接这一条

33:23.150 --> 33:23.670
得到这个

33:24.650 --> 33:25.410
用户的对象

33:26.290 --> 33:28.370
对吧 有这么一个借口啊 who am i

33:28.770 --> 33:29.450
好 咱们试一下

33:31.050 --> 33:32.690
这边呢 我们管理员的新加一个

33:33.730 --> 33:35.570
add request 新加一个啊

33:37.010 --> 33:37.970
叫做

33:39.570 --> 33:43.330
我是谁啊 就是谁登录 现在目前登录的人是谁

33:44.170 --> 33:46.170
啊 就请求哪个了 请求localhost

33:46.770 --> 33:47.490
5008

33:48.370 --> 33:50.810
啊 然后呢 api student

33:51.790 --> 33:52.310
student

33:52.710 --> 33:53.990
eudmin

33:56.310 --> 33:57.510
就请求 who am i

33:58.550 --> 33:59.910
好 就请求我是谁就行了

34:00.830 --> 34:01.510
好 现在请求

34:02.150 --> 34:05.350
我是谁呢 我啥都不是 我根本没有权利访问那个借口 因为我没有登录

34:05.670 --> 34:06.910
因为我要cookie删除了对吧

34:07.310 --> 34:10.830
post那个就魔力浏览器嘛 对吧 魔力浏览器里边

34:11.110 --> 34:15.390
他那个cookie他不会 只有自动附带 hooky 他没有不存在说自动附带那个

34:15.390 --> 34:16.390
orcerization那个头的

34:16.870 --> 34:18.070
对不对 所以说呢 我们这里呢

34:18.790 --> 34:19.830
要把这个复制一下

34:20.330 --> 34:23.530
放到header里边

34:24.530 --> 34:25.730
orcerization

34:26.730 --> 34:27.130
加进去

34:27.930 --> 34:30.530
一声的发送 你看是不是就获取到我的信息了

34:31.130 --> 34:31.330
对吧

34:32.130 --> 34:32.450
ok

34:32.930 --> 34:35.930
当然这个密码信息还是最好把删除掉在发送

34:36.730 --> 34:38.130
我就给他获取帐号信息啊

34:38.730 --> 34:40.530
当这个信息没什么意义可以啊删除掉

34:41.530 --> 34:42.530
好 就什么回事

34:42.930 --> 34:43.130
没了

34:44.130 --> 34:47.730
服务系这端还是比较好写的 客户端那边要稍微绕一点

34:48.630 --> 34:51.630
好 这是服务系端啊对登录和认证的处理

34:51.630 --> 34:54.030
那么就完了啊就这么几个方面一个是

34:55.030 --> 34:57.630
发单发这个jwt 一个是

35:00.630 --> 35:01.630
认证jwt

35:02.230 --> 35:04.230
一个是加一个互完完结合

35:05.230 --> 35:06.630
ok 这是关于服务系这一段

