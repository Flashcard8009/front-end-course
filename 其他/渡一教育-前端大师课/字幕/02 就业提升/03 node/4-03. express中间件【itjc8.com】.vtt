WEBVTT

00:00.370 --> 00:03.970
好 这就看到咱们来讲解一下一个非常非常重要的概念

00:03.970 --> 00:05.970
就是express里面的中间键

00:05.970 --> 00:08.970
诶 你们之前有没有听说过中间键

00:08.970 --> 00:12.970
之前呢 之前知识里面有没有接触过中间键

00:12.970 --> 00:15.970
如果说你之前是学的react过来的话

00:15.970 --> 00:18.970
应该是接触过那个reduct中间键

00:18.970 --> 00:21.970
应该是 如果说你没有学过react

00:21.970 --> 00:24.970
那我就说一下吧 其实也很简单的

00:24.970 --> 00:27.970
在用中间键之前呢 我们先把我们的工程结构改造一下吧

00:27.970 --> 00:30.970
这结构呢 我看的实在是有点不爽

00:30.970 --> 00:33.970
因为我们之前的三层架构里边说了 我们现在就做什么呢

00:33.970 --> 00:36.970
现在这两个层已经搞定了 对吧 然后还有这个路由层

00:36.970 --> 00:40.970
路由层这个东西呢 我们可以新建个文念甲

00:40.970 --> 00:44.970
就是API 或者叫做road

00:44.970 --> 00:47.970
或者叫road

00:47.970 --> 00:51.970
在这个文念甲里面去搞定路由层 我之前见过的对吧

00:51.970 --> 00:55.970
在这里面去搞定各种服务器的琴球

00:55.970 --> 00:58.970
好 来吧 我们这里在这里面去新建一个init

00:58.970 --> 01:01.970
init.js 然后呢 我们在这里面init.js

01:01.970 --> 01:05.970
再去require 这边

01:05.970 --> 01:08.970
road里面的init

01:08.970 --> 01:11.970
ok 那么这个index里面呢 我们就简单写了

01:11.970 --> 01:13.970
就一句话 现在没有什么可做的

01:13.970 --> 01:15.970
没有什么可做的 我们就一句话

01:15.970 --> 01:18.970
这一句话 我们就在这里面写到

01:18.970 --> 01:21.970
就把写到这里面去 所以说 怎么把写到这里面呢

01:21.970 --> 01:24.970
好 然后呢 我们再说回到

01:24.970 --> 01:27.970
就改这个就行了 改这个init就行了

01:27.970 --> 01:30.970
这个地方呢 我们这里说一下这个中间键啥意思

01:30.970 --> 01:33.970
这个中间键其实就是处理函数

01:33.970 --> 01:36.970
就这个玩意儿 这个玩意儿就是个中间键

01:36.970 --> 01:38.970
那为什么叫做中间键呢 它是这样子

01:38.970 --> 01:40.970
express呢 是支持这种模式的

01:40.970 --> 01:42.970
就是一个琴球到来来过后呢

01:42.970 --> 01:44.970
它交给express来进行处理

01:44.970 --> 01:47.970
一个press能里边它是不是有一个映射 对不对

01:47.970 --> 01:50.970
是不是有一个琴球方法 有一个琴球路径

01:50.970 --> 01:52.970
你看啊 琴球方法 琴球路径

01:52.970 --> 01:56.970
只要匹配上了过后呢 它就会运行相应的中间键

01:56.970 --> 01:59.970
那么它会运 它中间键有可能有很多

01:59.970 --> 02:02.970
也就是处理函数啊 它是有可能有很多的

02:02.970 --> 02:04.970
比方说我们这里写个handle

02:04.970 --> 02:06.970
我们这里呢 输出一个

02:06.970 --> 02:10.970
输出一个handle 就处理函数1

02:10.970 --> 02:12.970
然后呢 这里一个函数对吧

02:12.970 --> 02:13.970
我们可以再来一个函数

02:13.970 --> 02:16.970
我们这里呢 可以用换一个6吧

02:16.970 --> 02:20.540
然后呢 再来一个处理函数啊

02:20.540 --> 02:22.540
2号 第二个处理函数

02:22.540 --> 02:24.540
比如说它这里可以写多个处理函数呢

02:24.540 --> 02:26.540
对吧 一个处理函数就是个中间键

02:26.540 --> 02:28.540
那这是handle2 看呗

02:28.540 --> 02:31.540
然后呢 我们可以再来重新写

02:31.540 --> 02:33.540
只要匹配上了 它只要能匹配

02:33.540 --> 02:35.540
那么就是一个处理函数

02:35.540 --> 02:36.540
一个中间键

02:36.540 --> 02:39.540
然后呢 这里有一个处理函数3

02:39.540 --> 02:40.540
对吧

02:40.540 --> 02:42.540
好 咱们一部分一部分来认识

02:42.540 --> 02:45.540
现在呢 我们给它的它三个处理函数了

02:45.540 --> 02:48.540
那现在呢 我们看一下中间键的示意图

02:48.540 --> 02:49.540
当我们请出来了过后呢

02:49.540 --> 02:51.540
它会交个 首先交给第一个处理函数来处理

02:51.540 --> 02:53.540
处理完了过后呢 第一个处理函数

02:53.540 --> 02:55.540
它就可能完成响应了

02:55.540 --> 02:57.540
它也可能不响应 说不准的啊

02:57.540 --> 02:58.540
鬼知道它要干嘛

02:58.540 --> 03:01.540
然后呢 它有可能会交给第二个中间键

03:01.540 --> 03:02.540
就第二个处理函数

03:02.540 --> 03:04.540
第二个处理函数处理完了过后呢

03:04.540 --> 03:06.540
又可能会交给第三个中间键

03:06.540 --> 03:07.540
明儿的意思吧

03:07.540 --> 03:10.540
这就是中间键它的这种处理模式

03:10.540 --> 03:13.540
咱们还是记一下笔记吧

03:13.540 --> 03:15.540
记一下笔记

03:16.540 --> 03:19.540
中间键呢 它就是一个一个的处理函数

03:19.540 --> 03:22.540
那么它匹配上来过后呢 它会一次交给

03:22.540 --> 03:24.540
首先交给第一个处理函数

03:27.540 --> 03:28.540
中间键

03:29.540 --> 03:30.540
ok 在这里

03:31.540 --> 03:33.540
当匹配上

03:33.540 --> 03:37.540
匹配 当匹配到了请求后

03:37.540 --> 03:39.540
包括什么请求路径啊

03:39.540 --> 03:41.540
还有请求的方法啊之后

03:41.540 --> 03:44.540
那么它会根据这个印射表

03:44.540 --> 03:45.540
会请内部一个印射表

03:45.540 --> 03:47.540
那么这里边有很多的处理函数

03:47.540 --> 03:50.540
然后呢 交给

03:50.540 --> 03:53.540
第一个处理函数 进行处理

03:53.540 --> 03:55.540
处理请求

03:55.540 --> 03:56.540
那么处理的请

03:56.540 --> 03:57.540
放小一点

03:57.540 --> 04:00.980
在处理的请求的过程中

04:00.980 --> 04:01.980
它第一个处理函数

04:01.980 --> 04:02.980
它就有可能会交给

04:02.980 --> 04:04.980
后续的处理函数来处理

04:04.980 --> 04:05.980
明儿的意思吧

04:05.980 --> 04:06.980
好 咱们来试一下吧

04:06.980 --> 04:07.980
这个写完了过后

04:07.980 --> 04:08.980
我们这里都没有响应

04:08.980 --> 04:10.980
对吧 没有任何的响应消息体

04:10.980 --> 04:12.980
咱们呢 这里重新来

04:13.980 --> 04:15.980
好 运行完了过后

04:15.980 --> 04:17.980
在Postman里边去请求一下

04:17.980 --> 04:20.980
localhost

04:20.980 --> 04:23.980
5008 咱们请求一下60

04:23.980 --> 04:24.980
好 发动请求

04:24.980 --> 04:25.980
这里肯定得不到结果

04:25.980 --> 04:27.980
因为服务器没有给响应

04:27.980 --> 04:29.980
然后我们看一下这里请求

04:29.980 --> 04:30.980
服务器特别是运行的

04:30.980 --> 04:31.980
第一个处理函数

04:31.980 --> 04:32.980
对不对

04:32.980 --> 04:33.980
那为什么没有运行

04:33.980 --> 04:34.980
第二个也没有运行

04:34.980 --> 04:35.980
第三个呢

04:35.980 --> 04:37.980
是因为这样子的

04:37.980 --> 04:39.980
为什么后续没有运行

04:39.980 --> 04:40.980
后续的处理函数

04:40.980 --> 04:42.980
是因为我们要运行

04:42.980 --> 04:43.980
后续的处理函数

04:43.980 --> 04:46.980
需要我们手动的交给后续

04:46.980 --> 04:48.980
这个以非常类似于那个

04:48.980 --> 04:50.980
非常类似于那个就是

04:50.980 --> 04:51.980
Retax的那种模式

04:51.980 --> 04:53.980
那怎么来手动的交给

04:53.980 --> 04:54.980
后续处理函数呢

04:54.980 --> 04:55.980
它需要用到第三个函数

04:55.980 --> 04:56.980
叫做next

04:56.980 --> 04:58.980
next是一个方法

04:58.980 --> 04:59.980
这个方法就是

04:59.980 --> 05:01.980
运行后续的处理函数

05:01.980 --> 05:03.980
你可以在任何时候

05:03.980 --> 05:04.980
比方在这个处理函数里边

05:04.980 --> 05:05.980
你可以在任何时候

05:05.980 --> 05:08.980
把它交给后续的处理函数

05:08.980 --> 05:09.980
next

05:09.980 --> 05:10.980
不要在这里交给它

05:10.980 --> 05:11.980
那么第二个处理函数

05:11.980 --> 05:12.980
我们看现在就可以运行的

05:12.980 --> 05:13.980
保存一下

05:13.980 --> 05:15.980
然后在postman里面去重新请求

05:15.980 --> 05:16.980
然后我们看这边

05:16.980 --> 05:17.980
是不是运行的

05:17.980 --> 05:18.980
hander1

05:18.980 --> 05:19.980
hander2

05:19.980 --> 05:20.980
是不是这个运行的

05:20.980 --> 05:21.980
然后交给后续的处理函数

05:21.980 --> 05:22.980
这个东西是不是运行的

05:22.980 --> 05:23.980
对不对

05:23.980 --> 05:24.980
好 然后我们再来

05:24.980 --> 05:26.980
后续的处理函数也一样

05:26.980 --> 05:28.980
我们也可以继续往后交

05:28.980 --> 05:30.980
继续往后移交

05:30.980 --> 05:32.980
比方说我们这里的

05:32.980 --> 05:33.980
第二个处理函数

05:33.980 --> 05:34.980
我又继续往后移交

05:34.980 --> 05:35.980
那么移交到第三个

05:35.980 --> 05:36.980
如果说它不移交的话

05:36.980 --> 05:38.980
那么在这里就OK了

05:38.980 --> 05:39.980
就没了

05:39.980 --> 05:40.980
对不对

05:40.980 --> 05:41.980
那么第三个也可以继续往后移交

05:41.980 --> 05:42.980
尽管后面已经没有了

05:42.980 --> 05:44.980
因为我写一个中间键的时候

05:44.980 --> 05:46.980
我可能会写成一个单独的模块

05:46.980 --> 05:48.980
因此的我不知道

05:48.980 --> 05:49.980
我后面还有没有东西

05:49.980 --> 05:51.980
所以说我可以继续往后移交

05:51.980 --> 05:52.980
移交的话

05:52.980 --> 05:53.980
如果说它没有的话

05:53.980 --> 05:54.980
它就没有什么事情可以做了

05:54.980 --> 05:55.980
好 咱们再试一试

05:57.980 --> 05:58.980
这边

05:58.980 --> 05:59.980
发动请求

05:59.980 --> 06:01.980
好 这边我们来看

06:01.980 --> 06:02.980
123

06:02.980 --> 06:03.980
说完事了

06:03.980 --> 06:04.980
对不对

06:04.980 --> 06:05.980
就完事了

06:05.980 --> 06:07.980
三个处理函数运行的

06:07.980 --> 06:08.980
然后这个时候

06:08.980 --> 06:10.980
我会发现一个很神奇的现象

06:10.980 --> 06:11.980
客户端这边

06:11.980 --> 06:13.980
得到了一个404的消息

06:13.980 --> 06:15.980
而且看到的页面也是

06:15.980 --> 06:16.980
Kanazge 60

06:16.980 --> 06:18.980
得不到一个404的消息

06:18.980 --> 06:19.980
这是怎么回事呢

06:19.980 --> 06:20.980
它是这样子

06:20.980 --> 06:22.980
如果说你一直往后移交

06:22.980 --> 06:23.980
就到了第三个

06:23.980 --> 06:24.980
继续往后移交

06:24.980 --> 06:26.980
移交过后

06:26.980 --> 06:28.980
由于后续已经没有

06:28.980 --> 06:30.980
中间键来处理了

06:30.980 --> 06:32.980
那么这个时候

06:32.980 --> 06:33.980
Expressional

06:33.980 --> 06:34.980
它会验证你

06:34.980 --> 06:35.980
没有写消息体

06:35.980 --> 06:37.980
就是有没有结束这个请求

06:37.980 --> 06:38.980
这个请求

06:38.980 --> 06:39.980
这个响应有没有结束

06:39.980 --> 06:40.980
就是你有没有调应

06:40.980 --> 06:41.980
Response End

06:41.980 --> 06:42.980
对吧 我上天有学校的

06:42.980 --> 06:43.980
前面学校的

06:43.980 --> 06:45.980
有没有调用End

06:45.980 --> 06:46.980
如果说你没有调用End

06:46.980 --> 06:49.980
那么到了移交到最后一个之后

06:49.980 --> 06:51.980
就是最后一个你移交了

06:51.980 --> 06:53.980
它又没有结束请求

06:53.980 --> 06:54.980
那这个请求怎么办呢

06:54.980 --> 06:56.980
你告诉他怎么办

06:56.980 --> 06:57.980
那Express就认为

06:57.980 --> 06:58.980
既然你交给我了

06:58.980 --> 07:00.980
你都移交到最后一个了

07:00.980 --> 07:01.980
你都还没有结束请求

07:01.980 --> 07:03.980
OK 我就给你发送404

07:03.980 --> 07:04.980
没有这个请求

07:04.980 --> 07:05.980
实际上

07:05.980 --> 07:06.980
实际上我们服务器

07:06.980 --> 07:07.980
有没有收到请求

07:07.980 --> 07:08.980
肯定收到请求的

07:08.980 --> 07:09.980
那么Express

07:09.980 --> 07:10.980
它会给你响应一个消息码

07:10.980 --> 07:12.980
但是如果说你在前面的请求里边

07:12.980 --> 07:14.980
响应了消息码的

07:14.980 --> 07:15.980
比方说

07:15.980 --> 07:17.980
我们在前面的请求里边

07:17.980 --> 07:18.980
Status

07:18.980 --> 07:19.980
比方说200

07:19.980 --> 07:21.980
响应一个消息码

07:21.980 --> 07:23.980
好 我们再来看

07:23.980 --> 07:24.980
Send

07:24.980 --> 07:26.980
好 接下来 你看

07:26.980 --> 07:28.980
这边

07:28.980 --> 07:29.980
这边

07:29.980 --> 07:30.980
还是全部运行了 是吧

07:30.980 --> 07:31.980
那么因为

07:31.980 --> 07:33.980
我这里没有结束请求

07:33.980 --> 07:34.980
End

07:34.980 --> 07:35.980
那么现在我结束请求了

07:35.980 --> 07:37.980
对吧 结束请求处理了

07:37.980 --> 07:39.980
结束响应了

07:39.980 --> 07:40.980
但是这些东西要不要运行了

07:40.980 --> 07:41.980
还是要运行

07:41.980 --> 07:42.980
仍然是要运行的

07:42.980 --> 07:45.980
咱们来看一下吧

07:45.980 --> 07:47.980
把清空一下

07:47.980 --> 07:48.980
再来

07:48.980 --> 07:49.980
Send

07:49.980 --> 07:50.980
你看 是不是200 OK

07:50.980 --> 07:51.980
对不对

07:51.980 --> 07:52.980
然后结束了响应

07:52.980 --> 07:53.980
这边

07:53.980 --> 07:54.980
我们输出

07:54.980 --> 07:55.980
是不是三个目的都输出了

07:55.980 --> 07:56.980
对吧 中间都运行了

07:56.980 --> 07:57.980
因为你结束了响应

07:57.980 --> 07:58.980
结束了响应

07:58.980 --> 07:59.980
那么后续的

07:59.980 --> 08:00.980
你交给最后一个之后

08:00.980 --> 08:01.980
那么一个space一看

08:01.980 --> 08:02.980
哦 你已经完成了

08:02.980 --> 08:04.980
那我不需要处理了

08:04.980 --> 08:06.980
他发现你的响应没有结束

08:06.980 --> 08:07.980
那他才帮你变成1024

08:07.980 --> 08:08.980
没了意思吧

08:08.980 --> 08:10.980
这是他的处理方式

08:10.980 --> 08:11.980
大家要注意

08:11.980 --> 08:13.980
如果说你在前面的中间间里面

08:13.980 --> 08:15.980
已经处理的响应了

08:15.980 --> 08:17.980
那么后续就不能再处理了

08:17.980 --> 08:18.980
比方说你后续

08:18.980 --> 08:20.980
你又来一个Send

08:20.980 --> 08:21.980
ABC

08:21.980 --> 08:23.980
看一下这样子行不行呢

08:23.980 --> 08:25.980
往消息体里面写东西

08:25.980 --> 08:27.980
咱们运行

08:27.980 --> 08:28.980
好 这边

08:28.980 --> 08:29.980
你看有没有ABC

08:29.980 --> 08:30.980
是不是没有

08:30.980 --> 08:32.980
对吧 他这里就给你报了一个错误了

08:32.980 --> 08:33.980
对不对

08:33.980 --> 08:34.980
报说错误了什么呢

08:34.980 --> 08:35.980
他说无法设置

08:35.980 --> 08:37.980
就没有办法再设置了

08:37.980 --> 08:39.980
当已经完成了这个响应之后

08:39.980 --> 08:43.980
就不能再重新去运行了

08:43.980 --> 08:45.980
重新去往消息体里面写东西了

08:45.980 --> 08:46.980
没了意思吧

08:46.980 --> 08:47.980
但是后续的

08:47.980 --> 08:48.980
喊说还是会运行的

08:48.980 --> 08:49.980
比方说后续

08:49.980 --> 08:50.980
你可以做一些日子记录

08:50.980 --> 08:51.980
那些什么的东西

08:51.980 --> 08:52.980
对不对

08:52.980 --> 08:54.980
是不是可以使用这种模式

08:54.980 --> 08:56.980
好 那么这就是中间的处理模式

08:56.980 --> 08:58.980
然后我再给大家说一下

08:58.980 --> 09:00.980
中间里边还有一种情况

09:00.980 --> 09:01.980
就是报错

09:01.980 --> 09:02.980
你看刚才是不是报错了

09:02.980 --> 09:04.980
比方说我再举个例子

09:04.980 --> 09:06.980
比方说我们这里说

09:06.980 --> 09:07.980
报一个错误

09:07.980 --> 09:09.980
你一个new error

09:09.980 --> 09:11.980
报一个错误出来

09:11.980 --> 09:12.980
那么这个时候

09:12.980 --> 09:13.980
你不用调用那个时候了

09:13.980 --> 09:15.980
你不用调用了

09:15.980 --> 09:17.980
这种写法就相当于是

09:17.980 --> 09:22.890
你写了这么一句代码

09:22.890 --> 09:23.890
就相当于是写了这么一句代码

09:23.890 --> 09:25.890
你就那个时候可以传参数的

09:25.890 --> 09:26.890
这个参数是什么呢

09:26.890 --> 09:28.890
这个参数就是错误

09:28.890 --> 09:29.890
这个是参数的错误

09:29.890 --> 09:31.890
如果说在某一个中间间里边

09:31.890 --> 09:33.890
运行的过程中报了错

09:33.890 --> 09:34.890
或者是用这种写法

09:34.890 --> 09:35.890
传了一个错误进去

09:35.890 --> 09:36.890
当然我们平时看到的是这种

09:36.890 --> 09:37.890
对吧

09:37.890 --> 09:38.890
比方说我们运行一个喊数

09:38.890 --> 09:40.890
他报了错就相当于是这种代码

09:40.890 --> 09:41.890
对不对

09:41.890 --> 09:42.890
那么如果说他报了错

09:42.890 --> 09:43.890
那么这个时候

09:43.890 --> 09:46.890
他不会说把这个服务器就停了

09:46.890 --> 09:48.890
他停了后续的请求怎么办呢

09:48.890 --> 09:49.890
只是这一次请求报错

09:49.890 --> 09:50.890
他后续的请求就不要了

09:50.890 --> 09:51.890
所以他不会停止服务器

09:51.890 --> 09:52.890
他会怎么做呢

09:52.890 --> 09:53.890
你运行

09:53.890 --> 09:56.890
这句代码就相当于

09:56.890 --> 09:58.890
相当于运行的怎么了

09:58.890 --> 10:00.890
相当于运行的这个

10:00.890 --> 10:03.890
next new error

10:03.890 --> 10:04.890
是一样的

10:04.890 --> 10:06.890
咱们不信试一下吧

10:06.890 --> 10:08.890
我们把这个放过来

10:08.890 --> 10:09.890
报一个错误

10:09.890 --> 10:11.890
我们来看一下

10:11.890 --> 10:12.890
清空

10:12.890 --> 10:13.890
然后呢

10:13.890 --> 10:14.890
发生一个请求

10:14.890 --> 10:16.890
你看是不是得到错误了

10:16.890 --> 10:17.890
他会把错误的

10:17.890 --> 10:18.890
自己响应给克服端

10:18.890 --> 10:19.890
然后呢这边

10:19.890 --> 10:20.890
是不是报出一个错误

10:20.890 --> 10:21.890
对不对

10:21.890 --> 10:22.890
他错误就报出来了

10:22.890 --> 10:23.890
error ABC

10:23.890 --> 10:24.890
他只运行到第1个中间

10:24.890 --> 10:25.890
后续中间间

10:25.890 --> 10:26.890
是不是没有运行的

10:26.890 --> 10:27.890
那么他是这么一种逻辑

10:27.890 --> 10:29.890
如果说他发现了

10:29.890 --> 10:31.890
我们刚才把刚才的记录一下

10:35.890 --> 10:38.890
函数中需要手动的

10:39.890 --> 10:42.890
交给后续中间间处理

10:42.890 --> 10:43.890
如果说你需要的话

10:43.890 --> 10:44.890
你就交给后续中间间处理

10:44.890 --> 10:45.890
如果说你不需要的话

10:45.890 --> 10:47.890
你就给他处理完德了

10:47.890 --> 10:48.890
那么这个时候

10:48.890 --> 10:49.890
我们再说一下啊

10:49.890 --> 10:53.890
中间间处理的细节

10:53.890 --> 10:54.890
第一个呢就是

10:54.890 --> 10:55.890
我们刚才说的

10:55.890 --> 10:56.890
如果说

10:56.890 --> 10:59.890
如果后续已经没有了

10:59.890 --> 11:00.890
中间间

11:00.890 --> 11:02.890
就是我们最后最后中间间

11:02.890 --> 11:03.890
仍然移交给后续中间间

11:03.890 --> 11:04.890
但是后续已经没有了

11:04.890 --> 11:06.890
那么这个时候怎么办呢

11:06.890 --> 11:08.890
express发现

11:08.890 --> 11:11.890
如果那个

11:11.890 --> 11:14.890
响应没有结束

11:14.890 --> 11:15.890
没有结束的

11:15.890 --> 11:16.890
又交给他了

11:16.890 --> 11:17.890
他肯定要处理一下

11:17.890 --> 11:18.890
那怎么办

11:18.890 --> 11:19.890
他不可能永远不结束

11:19.890 --> 11:20.890
所以他怎么办

11:20.890 --> 11:21.890
他就这样子处理

11:21.890 --> 11:23.890
express会

11:23.890 --> 11:25.890
响应404

11:25.890 --> 11:27.890
404表示没有

11:27.890 --> 11:28.890
没有东西

11:28.890 --> 11:29.890
不要这意思吧

11:29.890 --> 11:31.890
那如果说

11:31.890 --> 11:37.890
如果中间间发生了错误

11:37.890 --> 11:39.890
发生了错

11:39.890 --> 11:41.890
那么这个时候怎么办呢

11:41.890 --> 11:43.890
不会停止服务器

11:43.890 --> 11:44.890
服务器是不会停止的

11:44.890 --> 11:46.890
他只是我掉落了一次Next

11:46.890 --> 11:48.890
给他传了一个错误

11:48.890 --> 11:49.890
相当于是

11:49.890 --> 11:54.890
相当于掉用了Next

11:54.890 --> 11:55.890
错误对象

11:55.890 --> 11:56.890
他相当于是这个

11:56.890 --> 11:57.890
掉用了一个错误对象

11:57.890 --> 11:58.890
那么这个时候

11:58.890 --> 12:00.890
express他会做这么一件事

12:00.890 --> 12:03.890
他会寻找后续的

12:03.890 --> 12:09.890
后续的错误处理中间间

12:09.890 --> 12:12.890
他会寻找后续错误处理的中间间

12:12.890 --> 12:13.890
如果说没有

12:13.890 --> 12:15.890
如果说没有后续处理的中间间

12:15.890 --> 12:17.890
如果没有

12:17.890 --> 12:19.890
则怎么样呢

12:19.890 --> 12:21.890
刚才看到的页面

12:21.890 --> 12:23.890
则响应一个500

12:23.890 --> 12:25.890
Internal Server Error

12:25.890 --> 12:27.890
则响应500

12:27.890 --> 12:29.890
记一下

12:29.890 --> 12:31.890
如果没有后续处理的

12:31.890 --> 12:32.890
错误处理中间间

12:32.890 --> 12:34.890
则响应500

12:34.890 --> 12:36.890
500就是服务器内部错误

12:36.890 --> 12:37.890
对不对

12:37.890 --> 12:38.890
那么也就是说

12:38.890 --> 12:40.890
我们可以获取到这个错误

12:40.890 --> 12:41.890
那怎么来获取呢

12:41.890 --> 12:43.890
比方说我们就可以

12:43.890 --> 12:44.890
怎么来获取

12:44.890 --> 12:45.890
我们比较下一个中间间

12:45.890 --> 12:46.890
Handle 2

12:46.890 --> 12:47.890
下一个中间间

12:47.890 --> 12:48.890
下一个中间间

12:48.890 --> 12:49.890
我们就给他传一个Error

12:49.890 --> 12:51.890
要传4个参数

12:51.890 --> 12:52.890
这第一个参数就是错误

12:52.890 --> 12:54.890
咱们把这个错误

12:54.890 --> 12:55.890
这个错误就是这里的错误

12:55.890 --> 12:56.890
就是这里的错误

12:56.890 --> 12:57.890
明白的意思吧

12:57.890 --> 12:59.890
比方说我们这里

12:59.890 --> 13:00.890
给他Send一下

13:00.890 --> 13:01.890
Send一下

13:01.890 --> 13:03.890
响应了一个错误

13:03.890 --> 13:05.890
响应了一个

13:05.890 --> 13:07.890
就是服务器发生的错误

13:07.890 --> 13:10.890
服务器发生的错误

13:10.890 --> 13:11.890
明白的意思吧

13:11.890 --> 13:13.890
咱们看一下吧

13:13.890 --> 13:14.890
再来看

13:14.890 --> 13:18.260
接下来我们再来重新运行

13:18.260 --> 13:19.260
Send

13:19.260 --> 13:20.260
你看是不是想用这个

13:20.260 --> 13:21.260
200 OK

13:21.260 --> 13:22.260
响应了服务器发生的错误

13:22.260 --> 13:24.260
然后这边是不是没有

13:24.260 --> 13:25.260
因为我们并没有输出它

13:25.260 --> 13:26.260
对不对

13:26.260 --> 13:27.260
三个中间间是不是都运行了

13:27.260 --> 13:28.260
我这里错误

13:28.260 --> 13:30.260
我这里处理的错误过后

13:30.260 --> 13:31.260
后续有正常运行的

13:31.260 --> 13:33.260
它就是这个中间间模型

13:33.260 --> 13:35.260
它就是一个一个往后面传递

13:35.260 --> 13:36.260
那么这个中间间

13:36.260 --> 13:38.260
看上去好像很复杂的样子

13:38.260 --> 13:39.260
其实一点都不复杂

13:39.260 --> 13:40.260
我们平时用它的时候

13:40.260 --> 13:41.260
怎么来用的

13:41.260 --> 13:42.260
我们就可以写一些

13:42.260 --> 13:44.260
非常有意思的中间间

13:44.260 --> 13:45.260
比方说

13:45.260 --> 13:46.260
我们可以写这么一个中间间

13:46.260 --> 13:48.260
就专门来处理

13:48.260 --> 13:50.260
就是来响应错误的中间间

13:50.260 --> 13:51.260
就比方说

13:53.260 --> 13:54.260
或者是中间间

13:54.260 --> 13:55.260
Middleware

13:55.260 --> 13:57.260
Middleware

13:57.260 --> 13:58.260
叫解释

13:58.260 --> 13:59.260
比方说我们自己写这么一个模块

13:59.260 --> 14:01.260
专门来处理错误的中间间

14:02.260 --> 14:05.260
处理错误的中间间

14:05.260 --> 14:06.260
好

14:06.260 --> 14:07.260
那么这个时候

14:07.260 --> 14:08.260
我们可以这样子

14:08.260 --> 14:10.260
我们之前不是有一个

14:10.260 --> 14:12.260
就是那个

14:12.260 --> 14:14.260
日字吗

14:14.260 --> 14:15.260
日字记录

14:15.260 --> 14:16.260
我们先不着急用日字记录

14:16.260 --> 14:17.260
比方说我们这里

14:17.260 --> 14:18.260
我们这里呢

14:18.260 --> 14:19.260
直接导出一个

14:19.260 --> 14:20.260
Module

14:20.260 --> 14:21.260
直接导出一个什么

14:21.260 --> 14:22.260
导出一个函数

14:22.260 --> 14:23.260
一个中间间就是个函数

14:23.260 --> 14:24.260
对吧

14:24.260 --> 14:25.260
Error 放前边

14:25.260 --> 14:26.260
Rig,Ris

14:26.260 --> 14:27.260
然后呢

14:29.260 --> 14:30.260
这是错误的处理的中间间

14:30.260 --> 14:31.260
那么错误处理的

14:31.260 --> 14:32.260
我就不往后移交了

14:32.260 --> 14:34.260
但是这个四个参数必须要写全

14:34.260 --> 14:35.260
不写全的话

14:35.260 --> 14:36.260
它就认为是一个普通中间间

14:36.260 --> 14:38.260
它就不是错误处理的中间间

14:38.260 --> 14:39.260
那么写全过后

14:39.260 --> 14:41.260
我们这里发现了错误

14:41.260 --> 14:42.260
如果说

14:42.260 --> 14:44.260
如果Error有值

14:44.260 --> 14:46.260
表示发生了错误

14:46.260 --> 14:47.260
发生了错误

14:47.260 --> 14:49.260
发生了错误怎么办呢

14:49.260 --> 14:51.260
我就给它响应一个

14:51.260 --> 14:52.260
Ris Send

14:53.260 --> 14:55.260
给它响应一个东西

14:55.260 --> 14:56.260
响应什么东西呢

14:56.260 --> 14:57.260
我们应该响应

14:57.260 --> 14:58.260
这么一个吧

14:58.260 --> 14:59.260
Code

14:59.260 --> 15:01.260
响应一个阶层格式的对象

15:01.260 --> 15:03.260
Code呢就是

15:03.260 --> 15:05.260
无办

15:05.260 --> 15:06.260
然后呢

15:06.260 --> 15:07.260
Message就是什么

15:07.260 --> 15:09.260
Error.Message

15:09.260 --> 15:10.260
对吧

15:10.260 --> 15:11.260
你看一下我们之前

15:11.260 --> 15:13.260
那个

15:13.260 --> 15:15.260
服务器

15:15.260 --> 15:16.260
就是验证了一块

15:16.260 --> 15:17.260
是不是会爆错

15:17.260 --> 15:18.260
对吧

15:18.260 --> 15:19.260
这里是不是可以被这里补货

15:19.260 --> 15:20.260
只要爆错

15:20.260 --> 15:21.260
就可以被这里补货

15:21.260 --> 15:23.260
那么我们把个错误消息

15:23.260 --> 15:25.260
Message来响应过去

15:25.260 --> 15:26.260
没了意思吧

15:26.260 --> 15:28.260
或者是我们直接把这个Error对象

15:28.260 --> 15:30.260
给它响应进去

15:30.260 --> 15:32.260
就这么一回事

15:32.260 --> 15:33.260
然后呢

15:33.260 --> 15:34.260
我们再把这个东西吧

15:34.260 --> 15:35.260
Status

15:35.260 --> 15:37.260
设置为无办

15:37.260 --> 15:39.260
这样就给它响应那个错误了

15:39.260 --> 15:41.260
那如果说Ls

15:41.260 --> 15:42.260
Ls

15:42.260 --> 15:43.260
如果说没有错误发生

15:43.260 --> 15:44.260
没有错误发生

15:44.260 --> 15:45.260
就交给下一个

15:45.260 --> 15:46.260
我啥都不管

15:46.260 --> 15:47.260
你看这个中间键是不是写好了

15:47.260 --> 15:48.260
写好了这个中间键之后呢

15:48.260 --> 15:50.260
我们在这边来看一下

15:50.260 --> 15:51.260
怎么来用这个中间键

15:51.260 --> 15:52.260
比方说刚才这个错误处理

15:52.260 --> 15:53.260
对吧

15:53.260 --> 15:55.260
我们在这里就可以直接写上Require

15:55.260 --> 15:56.260
然后Error.Message

15:56.260 --> 15:57.260
对吧

15:57.260 --> 15:59.260
直接把这个中间键放着就行了

15:59.260 --> 16:00.260
对不对

16:00.260 --> 16:01.260
是不是这么个道理

16:01.260 --> 16:02.260
好咱们来看一下啊

16:02.260 --> 16:03.260
那么这个时候呢

16:03.260 --> 16:05.260
我们就让它这个中间键来处理

16:05.260 --> 16:06.260
我们的错误

16:06.260 --> 16:08.260
我们到Postman来看一下

16:08.260 --> 16:09.260
Send

16:09.260 --> 16:10.260
你看得到了是不是

16:10.260 --> 16:11.260
一个节省格式

16:11.260 --> 16:12.260
对吧

16:12.260 --> 16:13.260
因为这个Error

16:13.260 --> 16:14.260
Error对象它蓄力

16:14.260 --> 16:15.260
蓄力化出来

16:15.260 --> 16:16.260
就是这个节省

16:16.260 --> 16:17.260
节省格式化过后呢

16:17.260 --> 16:18.260
就变成这个样子了

16:18.260 --> 16:19.260
所以说我们这样

16:19.260 --> 16:20.260
这样处理一下吧

16:20.260 --> 16:21.260
看一下这个Error

16:21.260 --> 16:23.260
是不是Error

16:23.260 --> 16:24.260
是不是这个玩意儿

16:24.260 --> 16:26.260
如果说是这个玩意儿的话

16:26.260 --> 16:28.260
那么咱们

16:28.260 --> 16:29.260
咱们呢就给它

16:29.260 --> 16:31.260
记录的是Error.Message

16:31.260 --> 16:32.260
然后我们这里

16:32.260 --> 16:34.260
这样子写一下吧

16:34.260 --> 16:36.260
我们最终响应的错误

16:37.260 --> 16:40.260
Error.OBG

16:40.260 --> 16:41.260
把这个地方写一下

16:43.260 --> 16:44.260
Code

16:44.260 --> 16:45.260
500

16:45.260 --> 16:46.260
然后呢

16:46.260 --> 16:47.260
Message

16:47.260 --> 16:48.260
这个东西放过来

16:50.260 --> 16:51.260
看它是不是Error

16:51.260 --> 16:53.260
如果说是Error对象的话

16:53.260 --> 16:54.260
那么就给它得到Message

16:54.260 --> 16:56.260
否则的话就是Error本身

16:56.260 --> 16:58.260
这样子咱们看一下吧

16:58.260 --> 17:00.260
把这个东西发送出去

17:01.260 --> 17:02.260
好

17:02.260 --> 17:03.260
保存

17:03.260 --> 17:04.260
这样我们来看一下

17:06.260 --> 17:07.260
到这个Postman

17:07.260 --> 17:08.260
发送

17:08.260 --> 17:09.260
你看说得到Message了

17:09.260 --> 17:10.260
对吧

17:10.260 --> 17:11.260
而且复兴了

17:11.260 --> 17:12.260
一切都正常的

17:12.260 --> 17:13.260
对不对

17:13.260 --> 17:14.260
我们只把消息给它响应过去了

17:14.260 --> 17:15.260
但是呢

17:15.260 --> 17:16.260
我要跟大家说一下

17:16.260 --> 17:18.260
使用中间键的时候呢

17:18.260 --> 17:20.260
我们通常不会去使用这个

17:20.260 --> 17:22.260
这种方式来使用中间键

17:22.260 --> 17:23.260
我们会使用什么方式呢

17:23.260 --> 17:24.260
会使用Use

17:24.260 --> 17:25.260
你看

17:25.260 --> 17:27.260
这个地方我们不写这儿了

17:27.260 --> 17:28.260
我写到下面

17:28.260 --> 17:30.260
我们通常使用中间键的时候

17:30.260 --> 17:31.260
会使用Use

17:31.260 --> 17:32.260
Use中间键

17:32.260 --> 17:33.260
那么Use的用法呢

17:33.260 --> 17:35.260
跟这个GSEPOS是一样的

17:35.260 --> 17:37.260
那么这里也写路径

17:37.260 --> 17:38.260
路径的话

17:38.260 --> 17:40.260
要说我们写Use

17:40.260 --> 17:41.260
后边我们写上中间键

17:41.260 --> 17:42.260
Require

17:43.260 --> 17:44.260
就是那个

17:44.260 --> 17:47.020
这儿写钢

17:48.020 --> 17:50.020
因为它错误处理一般发生在最后

17:50.020 --> 17:51.020
对不对

17:51.020 --> 17:52.020
所以说我们

17:52.020 --> 17:53.020
把它写到这儿

17:53.020 --> 17:54.020
没问题吧

17:54.020 --> 17:55.020
咱们写到

17:55.020 --> 17:56.020
或者是写到这儿吧

17:56.020 --> 17:57.020
我们错误处理一般的最后

17:57.020 --> 17:58.020
好

17:58.020 --> 17:59.020
咱们来看一下

17:59.020 --> 18:00.020
现在呢

18:00.020 --> 18:01.020
我们到Postman里面去

18:01.020 --> 18:03.020
如果说你是一个

18:03.020 --> 18:04.020
错误的进修

18:04.020 --> 18:05.020
你看

18:05.020 --> 18:06.020
不得到这个错误消息

18:06.020 --> 18:07.020
然后呢

18:07.020 --> 18:08.020
如果说你是一个

18:08.020 --> 18:09.020
没有错误的

18:09.020 --> 18:10.020
不要那么把注射掉

18:10.020 --> 18:11.020
没有错误

18:11.020 --> 18:12.020
我们在这里

18:12.020 --> 18:14.020
这里给他写上一个

18:14.020 --> 18:15.020
res send

18:15.020 --> 18:18.020
abc 123

18:18.020 --> 18:19.020
保存

18:19.020 --> 18:20.020
send

18:20.020 --> 18:21.020
诶

18:21.020 --> 18:22.020
它这里出问题了

18:22.020 --> 18:23.020
我这里没调用next

18:23.020 --> 18:24.020
对吧

18:24.020 --> 18:25.020
没有调用next

18:25.020 --> 18:28.100
好

18:28.100 --> 18:29.100
123

18:29.100 --> 18:30.100
对吧

18:30.100 --> 18:31.100
它就没有爆错

18:31.100 --> 18:32.100
对不对

18:32.100 --> 18:33.100
为什么我们要使用这个Use呢

18:33.100 --> 18:34.100
这个Use

18:34.100 --> 18:35.100
我们后边的耐技

18:35.100 --> 18:36.100
再详细讲解

18:36.100 --> 18:37.100
这个Use

18:37.100 --> 18:38.100
跟GSEPOS还有一个区别

18:38.100 --> 18:40.100
我们通常会使用Use

18:40.100 --> 18:41.100
来表示中间键

18:41.100 --> 18:42.100
这个Use

18:42.100 --> 18:44.100
可以不写第1个参数

18:44.100 --> 18:45.100
不写第1个参数的话

18:45.100 --> 18:47.100
它就可以匹配任何请求

18:47.100 --> 18:48.100
不要那意思吧

18:48.100 --> 18:49.100
它可以匹配任何请求

18:49.100 --> 18:50.100
你不用写信号了

18:50.100 --> 18:52.100
它就匹配任何请求

18:52.100 --> 18:53.100
任何请求里边爆错

18:53.100 --> 18:55.100
它都可以匹配到这

18:55.100 --> 18:56.100
咱们来看一下

18:56.100 --> 18:58.100
我们把错误再加上

18:58.100 --> 18:59.100
再加上

18:59.100 --> 19:00.100
那个时候

19:00.100 --> 19:01.100
每个中间键里边处理的话

19:01.100 --> 19:03.100
那个时候只能调用一次

19:03.100 --> 19:04.100
你看

19:04.100 --> 19:06.100
是不是又回到这个中间键了

19:06.100 --> 19:07.100
对吧

19:07.100 --> 19:08.100
其实我们简单的说一下

19:08.100 --> 19:10.100
简洁的说一下

19:10.100 --> 19:11.100
就是你中间键

19:11.100 --> 19:12.100
就是一个函数

19:12.100 --> 19:14.100
如果说你错误出的中间键

19:14.100 --> 19:15.100
要加4个参数

19:15.100 --> 19:16.100
其他的无所谓

19:16.100 --> 19:18.100
那么你在用中间键的时候

19:18.100 --> 19:19.100
怎么来用呢

19:19.100 --> 19:20.100
用使用Use

19:20.100 --> 19:21.100
来使用中间键

19:21.100 --> 19:22.100
Use

19:22.100 --> 19:23.100
那么Use

19:23.100 --> 19:24.100
我后续要强调一下

19:24.100 --> 19:25.100
其实我讲一下就行了

19:25.100 --> 19:28.100
Use其实很简单

19:28.100 --> 19:29.100
它的区别又在于什么呢

19:29.100 --> 19:31.100
它匹配的是基地址

19:31.100 --> 19:32.100
比方说你这里匹配跟Use

19:32.100 --> 19:34.100
那么这个地址它能匹配

19:34.100 --> 19:36.100
就是它动作的话

19:36.100 --> 19:37.100
无所谓GSEPOS

19:37.100 --> 19:38.100
全都能匹配

19:38.100 --> 19:40.100
跟动作无关

19:40.100 --> 19:42.100
然后它匹配的路径的时候

19:42.100 --> 19:45.100
它只要路径你这个开头就行

19:45.100 --> 19:47.100
你这个路径断开头

19:47.100 --> 19:49.100
比方说它能匹配怎么了

19:49.100 --> 19:51.100
它能匹配

19:51.100 --> 19:53.100
Use

19:53.100 --> 19:54.100
这种能匹配

19:54.100 --> 19:55.100
然后Use

19:55.100 --> 19:56.100
ABC能匹配

19:56.100 --> 19:58.100
然后Use

19:58.100 --> 20:00.100
123能匹配

20:00.100 --> 20:02.100
Use

20:02.100 --> 20:04.100
后边能匹配

20:04.100 --> 20:07.100
但是不能匹配

20:07.100 --> 20:08.100
不能匹配怎么了

20:08.100 --> 20:09.100
不能匹配

20:09.100 --> 20:10.100
鞋杠N

20:10.100 --> 20:11.100
鞋杠A

20:11.100 --> 20:13.100
鞋杠6是ABC

20:13.100 --> 20:15.100
这种东西都不能匹配

20:15.100 --> 20:16.100
上面是能匹配的

20:16.100 --> 20:17.100
就这么个意思

20:17.100 --> 20:19.100
Use匹配的范围更广

20:19.100 --> 20:21.100
因此我们在做一些通用的处理的时候

20:21.100 --> 20:24.100
一般会是用Use来作为中间键

20:24.100 --> 20:26.100
Use然后后边跟上中间键

20:26.100 --> 20:27.100
前面是路径跟中间键

20:27.100 --> 20:28.100
可以不写第一个参数

20:28.100 --> 20:29.100
不写第一个参数

20:29.100 --> 20:31.100
那就不匹配任何东西

20:31.100 --> 20:32.100
然后我再顺便说一下

20:32.100 --> 20:33.100
Use后边

20:33.100 --> 20:34.100
你在中间键里边

20:34.100 --> 20:36.100
是可以得到这个东西的

20:36.100 --> 20:38.100
我们再输出一下

20:38.100 --> 20:41.100
得到那个叫做BSUIL

20:41.100 --> 20:43.100
我们来输出看一下吧

20:43.100 --> 20:48.140
甚至

20:48.140 --> 20:49.140
看一下这边

20:49.140 --> 20:51.140
BSUIL是不是Use

20:51.140 --> 20:52.140
对吧

20:52.140 --> 20:53.140
那么就表示什么意思呢

20:53.140 --> 20:56.140
表示我们这里匹配到了这个基地址

20:56.140 --> 20:59.140
那么哪怕你表示这里是UseABC

20:59.140 --> 21:01.140
把这个区调

21:01.140 --> 21:03.140
Use鞋杠ABC

21:03.140 --> 21:04.140
咱们来看一下

21:04.140 --> 21:07.140
这边PostmanUse鞋杠ABC

21:07.140 --> 21:08.140
那么请求这个地址

21:08.140 --> 21:10.140
会经过哪些处理函数

21:10.140 --> 21:11.140
它会经过这个

21:11.140 --> 21:12.140
对吧

21:12.140 --> 21:13.140
这个能匹配上

21:13.140 --> 21:14.140
这个是必须要精确匹配

21:14.140 --> 21:15.140
对吧

21:15.140 --> 21:16.140
能够匹配上

21:16.140 --> 21:17.140
然后它也会经过这个

21:17.140 --> 21:18.140
对不对

21:18.140 --> 21:19.140
它会经过这两个来处理

21:19.140 --> 21:20.140
SIN

21:20.140 --> 21:21.140
得到这个

21:21.140 --> 21:22.140
那么这个东西

21:22.140 --> 21:23.140
是不是处理过了

21:23.140 --> 21:24.140
过后的

21:24.140 --> 21:25.140
那么这个处理的时候

21:25.140 --> 21:27.140
它里边可以获取到它的基地址

21:27.140 --> 21:29.140
基地址仍然是Use

21:29.140 --> 21:30.140
它获取的BSUIL

21:30.140 --> 21:32.140
是指的是这个

21:32.140 --> 21:33.140
原来的意思吧

21:33.140 --> 21:34.140
这是基地址

21:34.140 --> 21:35.140
我们后边都要用的

21:35.140 --> 21:38.520
现在可能还不太用得到

21:38.520 --> 21:40.520
这是BSUIL

21:40.520 --> 21:41.520
如果你是写一些

21:41.520 --> 21:42.520
通用的中间键的话

21:42.520 --> 21:43.520
我们一般会使用Use

21:43.520 --> 21:45.520
而不是某一个方法

21:45.520 --> 21:47.520
因为中间键它的使用范围很广

21:47.520 --> 21:48.520
那么我们刚才写了一个中间键

21:48.520 --> 21:49.520
对吧

21:49.520 --> 21:50.520
Airward-Madeware

21:50.520 --> 21:52.520
就是一个错误的处理中间键

21:52.520 --> 21:53.520
那还有什么中间键

21:53.520 --> 21:54.520
我们可以写呢

21:54.520 --> 21:56.520
可以玩的东西太多了

21:56.520 --> 21:57.520
比方说吧

21:57.520 --> 21:59.520
我们这里可以

21:59.520 --> 22:01.520
再写个中间键

22:01.520 --> 22:04.520
叫做Static-Madeware

22:05.520 --> 22:06.520
什么意思呢

22:06.520 --> 22:07.520
这个中间键用来干嘛呢

22:07.520 --> 22:08.520
这个中间键用来匹

22:08.520 --> 22:11.520
就是人来给静态资源

22:11.520 --> 22:13.520
表示我们这里怎么写呢

22:13.520 --> 22:14.520
我这里不写完

22:14.520 --> 22:16.520
我就是说这么一个意思

22:16.520 --> 22:19.520
Rig-Ris-Nest

22:19.520 --> 22:20.520
好

22:20.520 --> 22:21.520
我们看这么写

22:21.520 --> 22:23.520
我首先判断一下你这个

22:23.520 --> 22:25.520
Rig.Pass

22:25.520 --> 22:26.520
对吧

22:26.520 --> 22:27.520
你请求路径

22:27.520 --> 22:30.520
是不是以Start-Wise

22:30.520 --> 22:31.520
咱们知不错的

22:31.520 --> 22:32.520
不是一个Start-Wise吗

22:32.520 --> 22:34.520
是不是以API开头

22:34.520 --> 22:37.520
如果说你以API开头的话

22:37.520 --> 22:38.520
说明啥

22:38.520 --> 22:41.520
说明你请求的是

22:41.520 --> 22:42.520
请求的是什么呢

22:42.520 --> 22:44.520
API接口

22:44.520 --> 22:45.520
对不对

22:45.520 --> 22:46.520
是不是接手接口

22:46.520 --> 22:47.520
那么这种情况下

22:47.520 --> 22:48.520
我啥都不做

22:48.520 --> 22:50.520
我给你返回

22:50.520 --> 22:51.520
直接往后边移交

22:51.520 --> 22:53.520
然后L是

22:53.520 --> 22:55.520
如果说不是以API开头的

22:55.520 --> 23:00.520
说明你想要的是静态资源

23:00.520 --> 23:01.520
没了意思吧

23:01.520 --> 23:02.520
他你想要的是静态资源

23:02.520 --> 23:03.520
那么我们这就可以判断

23:03.520 --> 23:05.520
静态资源是否存在

23:05.520 --> 23:06.520
如果说存在的话

23:06.520 --> 23:07.520
那么我直接给你静态资源了

23:07.520 --> 23:09.520
当然我这里就懒得判断了

23:09.520 --> 23:11.520
说明这个伟大马这个意思

23:11.520 --> 23:13.520
如果静态资源存在

23:13.520 --> 23:15.520
我们之前都做过类似的事情

23:15.520 --> 23:16.520
你可以有兴趣的话

23:16.520 --> 23:17.520
可以把它做完

23:17.520 --> 23:18.520
然后我们怎么样呢

23:18.520 --> 23:21.520
我们就该想应静态资源

23:21.520 --> 23:23.520
我这里就用

23:23.520 --> 23:25.520
然后L是说静态资源不存在的话

23:25.520 --> 23:27.520
我继续往后移交

23:27.520 --> 23:29.520
是不是我们就可以写出这么一个

23:29.520 --> 23:31.520
静态资源处理的东西简直

23:31.520 --> 23:33.520
不过这个逻辑我把省略了

23:33.520 --> 23:34.520
没了意思吧

23:34.520 --> 23:35.520
那么我们来用一下

23:35.520 --> 23:37.520
我们来用了我们在这里

23:37.520 --> 23:39.520
现在这个东西删掉了

23:39.520 --> 23:41.520
静态资源我们首先验证一下

23:41.520 --> 23:42.520
你是不是静态资源

23:42.520 --> 23:45.520
APP这个use

23:45.520 --> 23:46.520
不写了

23:46.520 --> 23:48.520
不写的就是路径

23:48.520 --> 23:49.520
require

23:49.520 --> 23:51.520
调鞋杠

23:51.520 --> 23:54.520
static middleware

23:54.520 --> 23:55.520
写上

23:55.520 --> 23:57.520
好 写上之后我们来看一下

23:57.520 --> 23:59.520
这边的我们这里就判断

23:59.520 --> 24:01.520
直接用不出

24:01.520 --> 24:04.980
然后来

24:04.980 --> 24:06.980
接下来我们这里呢

24:06.980 --> 24:08.980
停止 这里重新来

24:08.980 --> 24:09.980
send

24:09.980 --> 24:11.980
你看

24:11.980 --> 24:12.980
来什么

24:12.980 --> 24:13.980
这里爆错了

24:13.980 --> 24:14.980
require.pass

24:14.980 --> 24:17.980
start with is not a function

24:17.980 --> 24:19.980
这个不是个字幕穿吗

24:19.980 --> 24:20.980
字幕穿里面不是个start with吗

24:20.980 --> 24:22.980
咱们来看一下吧

24:22.980 --> 24:25.980
我觉得字幕穿里面有一个start with

24:25.980 --> 24:26.980
字幕穿

24:26.980 --> 24:27.980
start

24:27.980 --> 24:29.980
start 还有一个s

24:29.980 --> 24:33.680
这里

24:33.680 --> 24:35.680
有一个s

24:35.680 --> 24:37.680
start with

24:37.680 --> 24:38.680
咱们来看一下

24:38.680 --> 24:39.680
现在我们请求的路径

24:39.680 --> 24:40.680
是不是以API看守的

24:40.680 --> 24:41.680
不是

24:41.680 --> 24:42.680
不是的话

24:42.680 --> 24:43.680
为什么给我

24:43.680 --> 24:45.680
想因静态资源呢

24:45.680 --> 24:46.680
不是的话他就进入l是对吧

24:46.680 --> 24:47.680
进入l是我们这里

24:47.680 --> 24:48.680
如果说文件存在

24:48.680 --> 24:50.680
然后我就把文件内容发送给你

24:50.680 --> 24:51.680
是不是一个静态资源

24:51.680 --> 24:52.680
对吧

24:52.680 --> 24:54.680
就是个静态资源

24:54.680 --> 24:55.680
没了意思吧

24:55.680 --> 24:56.680
如果说你

24:56.680 --> 24:58.680
文件不存在的话

24:58.680 --> 25:00.680
那么我就继续往后移交

25:00.680 --> 25:01.680
是这么个意思

25:01.680 --> 25:02.680
那么现在我们访问

25:02.680 --> 25:04.680
这个nose的时候

25:04.680 --> 25:05.680
访问这个nose ABC的时候

25:05.680 --> 25:06.680
是不是他就得不到

25:06.680 --> 25:07.680
对不对

25:07.680 --> 25:08.680
他就得不到

25:08.680 --> 25:09.680
因为我们没往后移交

25:09.680 --> 25:10.680
没往后移交

25:10.680 --> 25:11.680
是不是他得不到

25:11.680 --> 25:12.680
对不对

25:12.680 --> 25:14.680
这是关于这一块

25:14.680 --> 25:15.680
那么这静态资源处理

25:15.680 --> 25:16.680
实际上我给大家说一下

25:16.680 --> 25:17.680
express里面

25:17.680 --> 25:19.680
它有很多的内置的中间键

25:19.680 --> 25:20.680
咱们下一个课来说

25:20.680 --> 25:21.680
我们自然我们有

25:21.680 --> 25:22.680
这个中间键的概念过后

25:22.680 --> 25:23.680
我们可以做出一些

25:23.680 --> 25:25.680
在请求之前去做一些处理

25:25.680 --> 25:27.680
在请求之后去做一些处理

25:27.680 --> 25:28.680
或者在中间去做

25:28.680 --> 25:29.680
任何一些处理

25:29.680 --> 25:30.680
那么这是中间键的概念

25:30.680 --> 25:31.680
我们这些课

25:31.680 --> 25:33.680
其实平时我们写不写中间键的

25:33.680 --> 25:35.680
不多写的不多

25:35.680 --> 25:36.680
主要是写中间键的概念

25:36.680 --> 25:37.680
写的概念之后

25:37.680 --> 25:38.680
我们一般会使用

25:38.680 --> 25:40.680
别人写好的中间键

25:40.680 --> 25:41.680
是这么个意思

25:41.680 --> 25:43.680
咱们下一个课来学习一下

25:43.680 --> 25:44.680
express里面

25:44.680 --> 25:46.680
它自带的一些中间键

25:46.680 --> 25:47.680
咱这一课我想想

25:47.680 --> 25:48.680
还有啥

