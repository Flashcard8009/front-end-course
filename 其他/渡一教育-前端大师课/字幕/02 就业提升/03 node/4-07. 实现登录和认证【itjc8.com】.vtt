WEBVTT

00:00.180 --> 00:04.780
上期课我们做了这个东西

00:04.780 --> 00:07.580
登录成功过后给予token

00:07.580 --> 00:13.180
登录成功之后给它一个cookie

00:13.180 --> 00:16.580
然后我这里给大家说一下

00:16.580 --> 00:20.580
我们给予cookie的时候我们之前删了这东西

00:20.580 --> 00:24.180
实际上有一个第三方库叫做cookie poster

00:24.180 --> 00:26.780
它是一个express的中间键

00:26.980 --> 00:28.380
我们可以利用这个中间键

00:28.380 --> 00:31.580
可以更加方便更加优雅的来操作这个cookie

00:31.580 --> 00:34.180
可以去看一下它的稳当非常非常简单

00:34.180 --> 00:36.580
我们这里就先安装这个中间键

00:36.580 --> 00:42.540
先安装npmi cookie poster

00:42.540 --> 00:43.340
安装一下

00:43.340 --> 00:44.940
好 安装好了

00:44.940 --> 00:47.340
我们把它运行出来

00:47.340 --> 00:48.740
接下来我们到这边

00:48.740 --> 00:51.440
我们去向客户端发送一个cookie的时候

00:51.440 --> 00:54.540
实际上我们可以用这种模式

00:54.540 --> 00:58.940
是使用这种就是把这个cookie poster拿到

00:58.940 --> 00:59.940
先这样子

00:59.940 --> 01:04.600
先在我们的中间键里边再加进去

01:04.600 --> 01:09.800
加入cookie poster中间键

01:09.800 --> 01:11.700
中间键

01:11.700 --> 01:13.100
来吧

01:13.100 --> 01:15.300
app use

01:15.300 --> 01:15.800
好 这边

01:15.800 --> 01:16.800
首先它怎么用呢

01:16.800 --> 01:19.100
它首先要得到这个cookie poster

01:19.100 --> 01:23.900
cookie poster通过这个cookie poster得到

01:23.900 --> 01:26.900
拿到之后它都是一个函数

01:26.900 --> 01:30.500
这个函数调用之后它会返回一个中间键

01:30.500 --> 01:32.100
调用之后它会返回一个中间键

01:32.100 --> 01:34.000
所以说你调用之后直接把中间键放在这

01:34.000 --> 01:35.100
就完事了

01:35.100 --> 01:36.500
就这么简单

01:36.500 --> 01:39.300
这样子就加入了cookie poster了

01:39.300 --> 01:42.500
加入中间键之后它会发生什么呢

01:42.500 --> 01:49.500
加入之后会在req对象中注入一个属性

01:49.500 --> 01:50.300
注入什么属性

01:50.300 --> 01:53.300
注入cookie的属性

01:53.300 --> 02:01.100
用于获取所有请求传递过来的cookies

02:01.100 --> 02:07.000
好 第二个就是加入之后会在req对象中

02:07.000 --> 02:11.500
就是响应对象中注入cookie方法

02:11.500 --> 02:14.100
用于设置cookie

02:14.100 --> 02:14.400
对吧

02:14.400 --> 02:16.100
它就是有这么一个作用

02:16.100 --> 02:16.300
好

02:16.300 --> 02:17.300
那么有了这个东西过后

02:17.300 --> 02:19.100
我们在响应cookie的时候

02:19.100 --> 02:20.300
就可以不用这个代码了

02:20.300 --> 02:21.900
用什么代码呢

02:21.900 --> 02:23.700
race cookie

02:23.700 --> 02:25.600
通过这个东西来设置cookie

02:25.600 --> 02:27.200
第一个参数传cookie的名称

02:27.200 --> 02:28.700
我们就传token吧

02:28.700 --> 02:29.500
token

02:29.500 --> 02:34.300
第二个参数传的是cookie的就是值

02:34.300 --> 02:35.100
建制队

02:35.100 --> 02:35.600
它的值

02:35.600 --> 02:36.100
值是什么呢

02:36.100 --> 02:37.700
我们就用reout叫id

02:37.700 --> 02:38.800
就它的值

02:38.800 --> 02:41.000
第三个参数是一个配置对象

02:41.000 --> 02:43.700
这个配置对象里面就传cookie的各种属性

02:43.700 --> 02:45.800
什么pass等于鞋杠

02:45.800 --> 02:46.500
对吧

02:46.500 --> 02:48.300
还有什么do main

02:48.300 --> 02:50.500
什么local host

02:50.500 --> 02:51.600
这些东西你可以传递

02:51.600 --> 02:52.200
当然不传递的话

02:52.200 --> 02:53.800
就是默认值max age

02:53.800 --> 02:55.000
而最下这个max age

02:55.000 --> 02:56.300
它就不再是那个

02:56.300 --> 02:58.600
它不是那个秒数了

02:58.600 --> 03:00.900
它是好秒数

03:00.900 --> 03:03.000
就是多少好秒后过期

03:03.000 --> 03:05.000
这里呢你要换算一下

03:05.000 --> 03:05.700
这个好秒数呢

03:05.700 --> 03:07.200
比方说一个小时吧

03:07.200 --> 03:08.400
如果说7天的话

03:08.400 --> 03:09.300
你自己去乘

03:09.300 --> 03:11.200
比方说24小时一天

03:11.200 --> 03:12.600
然后7天对吧

03:12.600 --> 03:15.200
然后呢乘1000

03:15.200 --> 03:17.000
这样就是7天后过期

03:17.000 --> 03:18.700
好我们这样子就写了一个cookie

03:18.700 --> 03:19.200
对不对

03:19.200 --> 03:20.900
包括什么adb only

03:20.900 --> 03:21.900
adp only

03:21.900 --> 03:22.800
如果说你要写的话

03:22.800 --> 03:24.000
就把稍微触及完事了

03:24.000 --> 03:24.400
这些东西呢

03:24.400 --> 03:25.500
你们自己去设置啊

03:25.500 --> 03:27.300
我这就简单设置一下

03:27.300 --> 03:27.500
好了

03:27.500 --> 03:28.500
我们把改成这个样子

03:28.500 --> 03:32.780
我们再回到postman里面去

03:32.780 --> 03:33.680
到这个登录

03:33.680 --> 03:33.980
现在呢

03:33.980 --> 03:35.580
我们发送一个请求

03:35.580 --> 03:36.180
你看

03:36.180 --> 03:38.280
所以Value为6过期时间

03:38.280 --> 03:38.980
你们自己看

03:38.980 --> 03:39.280
然后呢

03:39.280 --> 03:40.880
我们的浏览器里边也可以

03:40.880 --> 03:44.960
来测试一下local host

03:44.960 --> 03:46.360
打开这个控台

03:46.360 --> 03:47.460
然后这里是

03:47.560 --> 03:49.260
其实你postman已经看得很清楚了

03:49.260 --> 03:50.660
你看这个headers

03:50.660 --> 03:51.160
setcookie

03:51.160 --> 03:51.760
你看一下

03:51.760 --> 03:52.460
是不是给力的

03:52.460 --> 03:53.660
这个数据都给力的

03:53.660 --> 03:53.860
好

03:53.860 --> 03:55.160
然后这边也可以设置一下

03:55.160 --> 03:57.960
比方说我们这里能设置这个abc

03:57.960 --> 03:59.360
123123

03:59.360 --> 03:59.660
登录

04:01.660 --> 04:02.160
locking

04:02.160 --> 04:03.660
你看一下吧

04:03.660 --> 04:06.560
这里边服务器给的小硬的setcookie

04:06.560 --> 04:07.260
是不是有了

04:07.260 --> 04:07.760
对不对

04:07.760 --> 04:08.360
然后我们看一下

04:08.360 --> 04:09.460
这边的cookie有没有加进去

04:11.360 --> 04:12.160
是不是加进去了

04:12.160 --> 04:13.760
而且过去时间是不是一周之后

04:13.760 --> 04:15.160
7天之后

04:15.160 --> 04:15.960
看没有

04:15.960 --> 04:17.260
7天之后过期

04:17.460 --> 04:19.060
这就是那个登录成功

04:19.060 --> 04:20.260
给他设置cookie

04:20.260 --> 04:20.760
对不对

04:20.760 --> 04:20.860
好

04:20.860 --> 04:22.460
那么这一步是不是完成了

04:22.460 --> 04:23.460
我们来看一下

04:23.460 --> 04:23.960
这一步

04:24.760 --> 04:25.660
这一步是完成了

04:25.660 --> 04:26.660
登录之后给一token

04:26.660 --> 04:27.060
但是呢

04:27.060 --> 04:29.060
我们要考虑到一个小的细节

04:29.060 --> 04:29.460
就是呢

04:29.460 --> 04:32.760
我们登录成功之后呢

04:32.760 --> 04:34.060
这个token

04:34.060 --> 04:36.660
我们目前是给通过这个cookie给予的

04:36.660 --> 04:37.360
对不对

04:37.360 --> 04:38.260
cookie给予的话

04:38.260 --> 04:39.860
他比较适配于浏览器

04:39.860 --> 04:40.660
因为浏览器呢

04:40.660 --> 04:42.360
他特别喜欢这个cookie

04:42.360 --> 04:42.860
cookie打了过

04:42.860 --> 04:43.760
他自动给夹了

04:43.760 --> 04:44.060
对吧

04:44.060 --> 04:45.360
而且自动管理

04:45.360 --> 04:46.560
但是你要考虑到一个问题

04:46.560 --> 04:47.360
我们这个服务器呢

04:47.360 --> 04:49.560
他有可能不是给浏览器用的

04:49.560 --> 04:51.860
他有可能是给手机端移动端用的

04:51.860 --> 04:53.360
然后其他的中端设备

04:53.360 --> 04:53.660
对吧

04:53.660 --> 04:55.360
非常多他有什么智能手表啊

04:55.360 --> 04:56.960
这些乱七八糟的用的

04:56.960 --> 04:57.960
那么这种情况下

04:57.960 --> 04:58.860
一个cookie呢

04:58.860 --> 04:59.560
能不能发酷给

04:59.560 --> 05:00.060
当然可以

05:00.060 --> 05:01.660
因为cookie他无非就是个响应头嘛

05:01.660 --> 05:02.360
对不对

05:02.360 --> 05:03.260
那么中端设备里边

05:03.260 --> 05:04.560
是不是可以投到这个响应头

05:04.560 --> 05:05.360
自行操作

05:05.360 --> 05:06.660
他不会自动操作了

05:06.660 --> 05:07.660
自行操作

05:07.660 --> 05:08.660
那么面对这种情况

05:08.660 --> 05:11.560
我们有一个不成文的规范

05:11.560 --> 05:13.260
就是浏览器的给cookie

05:13.260 --> 05:13.660
但是呢

05:13.660 --> 05:14.460
其他设备呢

05:14.460 --> 05:16.060
我们一般会给别的东西

05:16.060 --> 05:16.860
给给什么呢

05:16.860 --> 05:18.260
给header

05:18.260 --> 05:20.060
通过一个header给他

05:20.060 --> 05:20.860
那么这个header呢

05:20.860 --> 05:22.060
我们给他加一个

05:22.060 --> 05:22.660
我们也就是说

05:22.660 --> 05:23.660
我们这里呢

05:23.660 --> 05:25.760
还有可能会出现这种情况啊

05:25.760 --> 05:26.760
就是我们要加的这个

05:26.760 --> 05:27.060
对吧

05:27.060 --> 05:28.760
我们把它保存一下

05:28.760 --> 05:29.360
Value

05:29.360 --> 05:30.560
我们要加的这个纸呢

05:30.560 --> 05:31.660
是这个纸

05:31.660 --> 05:32.560
对不对

05:32.560 --> 05:32.760
好

05:32.760 --> 05:35.360
我们把个Value放上

05:35.360 --> 05:36.060
另一种就是

05:36.060 --> 05:37.660
我们除了要设置cookie之外呢

05:37.660 --> 05:38.660
我们可能还要

05:38.660 --> 05:40.060
针对其他的设备啊

05:40.060 --> 05:40.960
也许其他设备呢

05:40.960 --> 05:42.760
他不支持cookie的自动

05:42.760 --> 05:43.860
自动添加

05:43.860 --> 05:44.360
所以说呢

05:44.360 --> 05:44.660
我们一般呢

05:44.660 --> 05:46.460
会给他一个header

05:46.460 --> 05:46.760
啊

05:46.760 --> 05:47.560
这header的名称呢

05:47.560 --> 05:49.360
叫做Orcerization

05:49.360 --> 05:50.360
叫认证啊

05:50.360 --> 05:51.860
Orcerization

05:51.860 --> 05:53.860
Orcerization

05:53.860 --> 05:54.760
啊

05:54.760 --> 05:57.160
给他一个认证

05:57.160 --> 05:57.660
然后呢

05:57.660 --> 05:58.360
纸是什么呢

05:58.360 --> 05:59.960
纸就是这个Value

05:59.960 --> 06:01.560
我一般都会这样做啊

06:01.560 --> 06:02.360
针对不同的设备

06:02.360 --> 06:02.560
针对不同的设备

06:02.560 --> 06:03.360
针对不同的设备

06:03.360 --> 06:04.160
针对不同的设备

06:04.160 --> 06:04.360
针对不同的设备

06:04.360 --> 06:05.560
就两个都给他

06:05.560 --> 06:06.160
两个都给他

06:06.160 --> 06:06.660
不会出问题

06:06.660 --> 06:07.360
因为其他设备

06:07.360 --> 06:09.160
对其他设备来说

06:09.160 --> 06:10.560
cookie它无非就是一个制服创

06:10.560 --> 06:10.660
对吧

06:10.660 --> 06:12.160
它不会自动操作而已

06:12.260 --> 06:12.660
好

06:12.660 --> 06:13.460
咱们来看一下吧

06:13.460 --> 06:15.060
后续来里面用登录成功

06:15.060 --> 06:18.160
你看是不是给到一个Orcerization

06:18.160 --> 06:19.160
是不是6

06:19.160 --> 06:20.160
对不对

06:20.160 --> 06:21.560
6也给他了

06:21.560 --> 06:21.760
ok

06:21.760 --> 06:23.260
这就是那个

06:23.260 --> 06:25.860
这里的就是认证成功的时候的操作

06:25.860 --> 06:27.060
就是登录成功

06:27.060 --> 06:28.060
那么后续呢

06:28.060 --> 06:29.060
针对后续请求

06:29.060 --> 06:30.160
我们要进行认证

06:30.160 --> 06:31.160
怎么认证呢

06:31.160 --> 06:32.460
就是后边的请求来了

06:32.460 --> 06:33.260
每一次请求来了

06:33.260 --> 06:34.860
我都要去解析cookie

06:34.860 --> 06:36.260
或者是header

06:36.260 --> 06:36.960
啊

06:36.960 --> 06:37.760
也就是

06:37.760 --> 06:38.360
浏览器呢

06:38.360 --> 06:39.860
还会把直接把cookie给你发过来

06:39.860 --> 06:40.460
对不对

06:40.460 --> 06:41.160
那么

06:41.160 --> 06:41.660
其他的设备

06:41.760 --> 06:43.160
他会通过header

06:43.160 --> 06:43.760
啊

06:43.760 --> 06:45.260
那需要手动操作了

06:45.260 --> 06:47.260
通过header的Orcerization给你发过来

06:47.260 --> 06:49.660
总之后会把之前给他那个token给他发过来

06:49.660 --> 06:51.160
我们目前给的token比较简单

06:51.160 --> 06:51.960
就是个id

06:51.960 --> 06:52.660
对吧

06:52.660 --> 06:53.960
那么我们如何来针对

06:53.960 --> 06:55.560
如何来把进行解析呢

06:55.560 --> 06:56.560
我们最好的做法呢

06:56.560 --> 06:57.560
是写一个中间线

06:57.560 --> 06:59.560
比方说我们来这里写一个中间线

06:59.560 --> 07:00.360
比方说我们这里呢

07:00.360 --> 07:01.360
叫做os

07:02.960 --> 07:04.560
os表示认证啊

07:04.560 --> 07:05.860
或者叫做token吧

07:05.860 --> 07:09.960
token made aware

07:09.960 --> 07:11.360
那么这个中间干嘛呢

07:11.360 --> 07:13.960
这个中间线用于解析

07:13.960 --> 07:14.660
token

07:14.660 --> 07:15.860
用于解析token

07:15.860 --> 07:17.360
说他这里导出的话

07:17.360 --> 07:18.360
一定是导出一个什么

07:18.360 --> 07:19.260
导出一个函数

07:19.260 --> 07:19.760
对不对

07:19.760 --> 07:21.160
他一定是导出一个函数

07:21.160 --> 07:22.460
req,res

07:22.460 --> 07:23.460
还有一个next

07:24.460 --> 07:25.260
中间键嘛

07:26.260 --> 07:26.460
好

07:26.460 --> 07:27.560
那么这边怎么用呢

07:27.560 --> 07:30.860
这边我可以再加入了cookie之后啊

07:30.860 --> 07:31.460
这些东西呢

07:31.460 --> 07:33.360
我们都可以先不着急用了啊

07:33.360 --> 07:34.760
我们就在这

07:34.760 --> 07:35.960
就加入了cookie之后

07:35.960 --> 07:37.260
我们就可以解析cookie了

07:37.260 --> 07:37.760
对吧

07:37.760 --> 07:39.060
使用了cookie中间键过后

07:39.060 --> 07:40.460
我就可以解析cookie了

07:40.460 --> 07:40.860
于是呢

07:40.860 --> 07:41.360
在这里呢

07:41.360 --> 07:42.860
我们就应用

07:43.160 --> 07:43.760
哦

07:43.760 --> 07:44.760
就是token中间

07:46.360 --> 07:47.460
我们自己写的

07:47.460 --> 07:49.260
app use

07:49.260 --> 07:49.560
然后呢

07:49.560 --> 07:51.260
这边是一个token

07:51.260 --> 07:52.060
require

07:54.060 --> 07:55.660
token made aware

07:55.660 --> 07:56.960
把中间键应用进去

07:56.960 --> 07:58.660
这个中间键里面怎么写呢

07:58.660 --> 07:59.860
中间键写法就很简单

07:59.860 --> 08:01.460
它的逻辑是这样子的

08:01.460 --> 08:02.460
首先来解析

08:02.460 --> 08:03.260
有没有token

08:03.260 --> 08:03.960
对不对

08:03.960 --> 08:05.060
有没有token

08:05.060 --> 08:05.660
好

08:05.660 --> 08:07.160
如果说没有的话

08:07.160 --> 08:07.660
没有的话

08:07.660 --> 08:09.260
那我就表示啊

08:09.260 --> 08:10.060
没有通过

08:10.060 --> 08:12.260
就不允许你做任何事情

08:12.360 --> 08:13.260
好如果说通过了

08:13.260 --> 08:15.060
不后我就继续进行后续处理

08:15.060 --> 08:15.360
所以说呢

08:15.360 --> 08:16.260
我们这里要解析

08:16.260 --> 08:17.560
解析一个token

08:17.560 --> 08:18.160
对不对

08:18.160 --> 08:18.260
好

08:18.260 --> 08:18.760
那么这里呢

08:18.760 --> 08:19.860
我们可以定个辨量

08:19.860 --> 08:20.860
token

08:20.860 --> 08:22.460
定个辨量

08:22.460 --> 08:24.460
然后我们首先从cookie里面解析

08:24.460 --> 08:26.360
我们首先把cookie打印出来吧

08:26.360 --> 08:27.660
cookie打印出来

08:27.660 --> 08:29.860
req cookies

08:29.860 --> 08:31.360
通过这个东西

08:31.360 --> 08:32.760
它会注入这么一个属性

08:32.760 --> 08:33.860
你看我之前注射

08:33.860 --> 08:34.460
这个中间键呢

08:34.460 --> 08:36.060
它会加入这个属性cookie

08:36.060 --> 08:37.260
那么它会把cookie解析

08:37.260 --> 08:37.960
解析出来

08:37.960 --> 08:38.960
我们打印一下

08:38.960 --> 08:39.660
试一下

08:39.660 --> 08:40.560
加入中间键之后

08:40.560 --> 08:41.960
我们再用poster请求

08:43.160 --> 08:44.360
再用poster请求

08:45.660 --> 08:46.360
比方说吧

08:46.360 --> 08:47.560
我们这里poster请求

08:47.560 --> 08:48.660
这里肯定是不到结果了

08:48.660 --> 08:50.160
因为中间键没有往后移交

08:50.160 --> 08:50.760
对不对

08:50.760 --> 08:52.660
咱们来看一下控制台

08:52.660 --> 08:54.260
所以token的v6就出来了

08:54.260 --> 08:54.560
对不对

08:54.560 --> 08:56.160
所以它解析成一个对象了

08:56.160 --> 08:57.560
我们给我们的cookie里面

08:57.560 --> 08:59.160
有一个token属性v6

08:59.160 --> 08:59.960
对不对

08:59.960 --> 09:01.060
咱们把解析出来

09:01.060 --> 09:03.160
cookie室里面我们获取到token

09:03.160 --> 09:05.960
我们通过这个cookie室

09:05.960 --> 09:08.160
是不是能够获取到token

09:08.160 --> 09:08.760
对不对

09:08.760 --> 09:10.360
那有没有可能没有

09:10.360 --> 09:11.760
当然有可能比方说其他设备

09:11.760 --> 09:13.760
其他设备它不是通过token来传递的

09:13.760 --> 09:14.160
对吧

09:14.160 --> 09:15.960
那如果说没有的话

09:15.960 --> 09:17.060
那么我们怎么办呢

09:17.060 --> 09:18.960
我们从那个header中获取

09:18.960 --> 09:23.560
从header的authorization中获取

09:23.560 --> 09:24.960
如果说你没有这个token的话

09:24.960 --> 09:25.660
那么其他设备

09:25.660 --> 09:27.760
比方说我这个poster卖就模拟其他设备

09:27.760 --> 09:28.560
模拟其他设备的话

09:28.560 --> 09:30.760
它要给我添加一个响应头

09:30.760 --> 09:32.460
就是authorization

09:32.460 --> 09:33.760
就这么一个响应头

09:33.760 --> 09:35.360
要把这个6个传进来

09:35.360 --> 09:36.160
没意思吧

09:36.160 --> 09:37.560
它可能没有传cookie

09:37.560 --> 09:39.260
它把这个东西给我传进来了

09:39.260 --> 09:40.060
就其他设备

09:40.160 --> 09:41.460
以后你没学的移动端

09:41.460 --> 09:42.660
它就会遇到这种情况

09:42.660 --> 09:44.160
我们两个设备都要考虑

09:44.160 --> 09:45.460
那么我们这里如果说

09:45.460 --> 09:46.560
cookie里边没有

09:46.560 --> 09:48.460
我们就从header里面获取

09:48.460 --> 09:49.360
那怎么来获取呢

09:49.360 --> 09:50.960
就token重新给它复制

09:50.960 --> 09:52.160
Rake

09:52.160 --> 09:52.860
header

09:52.860 --> 09:53.460
对不对

09:53.460 --> 09:54.860
header是里边有个什么

09:54.860 --> 09:56.760
authorization

09:56.760 --> 09:59.760
所以从这里面获取

09:59.760 --> 10:01.060
对不对

10:01.060 --> 10:01.560
好

10:01.560 --> 10:02.760
那么如果说获取过后

10:02.760 --> 10:04.060
是不是还是有可能没有

10:04.060 --> 10:04.460
对吧

10:04.460 --> 10:05.660
cookie里边没有

10:05.660 --> 10:06.860
authorization是不是都没有

10:06.860 --> 10:08.460
两个都没有说明什么

10:08.460 --> 10:09.360
说明你没有权限

10:09.560 --> 10:10.460
你没有登录至少

10:10.460 --> 10:10.960
对不对

10:10.960 --> 10:11.660
你没有这个token

10:11.660 --> 10:12.960
至少你没有登录

10:12.960 --> 10:13.360
好

10:13.360 --> 10:15.560
那如果说你没有登录的话

10:15.560 --> 10:16.960
如果说这里还是没有

10:18.560 --> 10:19.260
说明什么

10:19.260 --> 10:20.760
说明没有登录

10:20.760 --> 10:21.860
没有认证过

10:21.860 --> 10:22.660
没有认证过的话

10:22.660 --> 10:24.160
我们写个函数可以在这里面

10:24.160 --> 10:24.760
写个函数

10:26.160 --> 10:27.760
没有认证过的话

10:27.760 --> 10:29.360
我们这个函数呢

10:30.760 --> 10:31.960
就写到这里一边吧

10:33.160 --> 10:33.360
算了

10:33.360 --> 10:34.960
写外面吧

10:34.960 --> 10:35.360
handle

10:36.360 --> 10:40.360
没有认证

10:43.360 --> 10:44.760
处理没有认证的情况

10:45.760 --> 10:48.760
处理没有认证的情况

10:48.760 --> 10:50.360
那么你还是要接受这些参数

10:50.360 --> 10:52.360
什么reg啊regs啊legs

10:52.360 --> 10:53.560
都给我接受过来

10:53.560 --> 10:56.160
没有认证的情况是什么回事

10:56.160 --> 10:57.360
那么我们没有认证的话

10:57.360 --> 10:58.360
我们就调那个函数

10:58.360 --> 10:58.760
handle

10:58.760 --> 10:59.960
not token

10:59.960 --> 11:01.360
regregs传进去

11:01.360 --> 11:01.960
legs

11:01.960 --> 11:03.160
没有认证

11:03.160 --> 11:03.460
好

11:03.460 --> 11:04.760
那想想没有认证那么干吗

11:05.160 --> 11:05.960
我们是不是可以给它

11:05.960 --> 11:07.460
直接响应一个结果

11:07.460 --> 11:08.260
send

11:08.260 --> 11:08.560
对不对

11:08.560 --> 11:10.060
直接响应一个结果

11:10.060 --> 11:10.660
这个结果呢

11:10.660 --> 11:12.660
我们之前好像写过这么一个

11:12.660 --> 11:14.860
写过这么一个东西啊

11:14.860 --> 11:15.660
get result

11:15.660 --> 11:16.260
get error

11:16.260 --> 11:16.760
对不对

11:16.760 --> 11:18.360
是不是这么一个东西

11:18.360 --> 11:18.860
好来吧

11:18.860 --> 11:20.260
我们就响应这个结果

11:20.260 --> 11:21.160
那么我们就导入

11:25.520 --> 11:26.020
require

11:27.620 --> 11:28.920
get send result

11:28.920 --> 11:30.420
get error这个方法

11:30.420 --> 11:32.620
我们给它想应一个错误

11:32.620 --> 11:34.620
直接给它返回一个错误

11:34.620 --> 11:35.420
错误消息呢

11:36.120 --> 11:37.320
你没有

11:37.320 --> 11:43.520
就是you have low token

11:45.120 --> 11:45.920
也懂得have token

11:45.920 --> 11:46.720
应该这样说

11:47.920 --> 11:52.920
you don't have any token to OCCIS

11:54.020 --> 11:54.820
OCCIS

11:57.520 --> 11:58.520
the API

12:00.120 --> 12:00.420
好

12:00.420 --> 12:02.020
就该加一个这个东西吧

12:02.020 --> 12:02.220
好

12:02.220 --> 12:02.620
加上过后

12:02.620 --> 12:04.320
我们给它一个就是响应码

12:04.420 --> 12:05.420
响应码的话

12:05.420 --> 12:06.620
我这边

12:06.620 --> 12:07.320
响应码在前面

12:07.320 --> 12:07.820
还是后面

12:07.820 --> 12:09.020
响应码在后边

12:09.020 --> 12:09.620
响应码的话

12:09.620 --> 12:10.820
给它个403

12:10.820 --> 12:12.220
表示的是

12:12.220 --> 12:13.720
表示的是那个就是

12:13.720 --> 12:14.620
一个没有权限的

12:14.620 --> 12:14.820
对吧

12:14.820 --> 12:15.520
我们会在这里

12:15.520 --> 12:16.420
给它加上一个stander

12:16.420 --> 12:18.120
是403

12:18.120 --> 12:19.620
表示没有权限

12:19.620 --> 12:19.920
好

12:19.920 --> 12:20.620
然后呢

12:20.620 --> 12:21.820
然后我们require end

12:21.820 --> 12:22.320
require end

12:22.320 --> 12:22.920
也不用写了

12:22.920 --> 12:24.320
它自动end了

12:24.320 --> 12:24.920
就完事了

12:24.920 --> 12:25.220
对不对

12:25.220 --> 12:25.920
我们return

12:25.920 --> 12:26.320
结束

12:26.320 --> 12:26.820
就不用写

12:26.820 --> 12:27.120
return

12:27.120 --> 12:28.120
就完事了

12:28.120 --> 12:29.420
那么这边我们就

12:29.420 --> 12:30.720
如果说没有认证的话

12:30.720 --> 12:32.420
那么我们是不是就结束了

12:32.420 --> 12:32.720
对吧

12:32.720 --> 12:33.720
我们return

12:33.720 --> 12:34.220
结束了

12:34.820 --> 12:34.920
好

12:34.920 --> 12:36.020
如果说有认证

12:36.020 --> 12:36.620
嗯

12:36.620 --> 12:37.620
有认证的话

12:37.620 --> 12:38.120
有认证的话

12:38.120 --> 12:39.220
我们是不是要验证

12:39.220 --> 12:39.820
对不对

12:39.820 --> 12:41.420
验证投坑

12:41.420 --> 12:42.020
你有这个投坑

12:42.020 --> 12:42.420
我看一下

12:42.420 --> 12:43.320
投坑有没有问题

12:43.320 --> 12:43.620
对不对

12:43.620 --> 12:45.220
是不是要验证投坑

12:45.220 --> 12:45.320
好

12:45.320 --> 12:46.420
那么验证投坑的话

12:46.420 --> 12:47.420
我们可以判断一下

12:47.420 --> 12:48.220
判断

12:48.220 --> 12:48.620
这里

12:48.620 --> 12:50.220
我们没有什么好验证的

12:50.220 --> 12:50.720
如果说验证

12:50.720 --> 12:51.420
没有通过的话

12:51.420 --> 12:52.820
是不是还是这种情况

12:52.820 --> 12:54.320
还是没有认证的情况

12:54.320 --> 12:54.920
对不对

12:54.920 --> 12:56.120
那如果说验证通过了

12:56.120 --> 12:56.620
过后呢

12:56.620 --> 12:57.220
我们怎么办

12:57.220 --> 12:59.420
往后续继续移交

12:59.420 --> 13:00.920
其他就没有了

13:00.920 --> 13:02.520
这就是写出了这么一个逻辑了

13:04.320 --> 13:05.620
我们来看一下吧

13:05.620 --> 13:05.820
好

13:05.820 --> 13:08.220
接下来我们去分业获取学生

13:08.220 --> 13:10.320
我们看一下能不能获取啊

13:10.320 --> 13:11.520
你看一下什么能获取

13:11.520 --> 13:12.520
为什么能获取呢

13:12.520 --> 13:14.420
因为我们的投证是验证通过的

13:14.420 --> 13:17.220
我们这里输出一下吧

13:17.220 --> 13:17.620
验证

13:17.620 --> 13:20.320
这是通过的啊

13:20.320 --> 13:22.220
认证通过

13:22.220 --> 13:22.420
好

13:22.420 --> 13:26.820
这个地方是认证没有通过

13:26.820 --> 13:30.820
认证未通过

13:30.820 --> 13:31.320
好

13:31.320 --> 13:33.930
我们再来看

13:33.930 --> 13:34.930
接下来我们再来请求

13:34.930 --> 13:36.630
请求学生

13:36.630 --> 13:37.430
你看一下是不是经过了

13:37.430 --> 13:38.030
这个中间见了

13:38.030 --> 13:38.530
认证通过

13:38.530 --> 13:39.930
因为他给他传递了

13:39.930 --> 13:40.530
token

13:40.530 --> 13:41.330
cookie对不对

13:41.330 --> 13:42.330
就是token传过去了

13:42.330 --> 13:43.430
说他认证通过了

13:43.430 --> 13:44.030
那么我们来看一下

13:44.030 --> 13:45.630
认证没有通过的情况

13:45.630 --> 13:46.630
我们怎么来做呢

13:46.630 --> 13:47.430
我们把这个

13:47.430 --> 13:49.130
把这个cookie给他删除掉

13:49.130 --> 13:51.530
这个cookies给他删除掉

13:51.530 --> 13:53.330
这个postman里面测试一下吧

13:53.330 --> 13:53.530
好

13:53.530 --> 13:53.830
然后呢

13:53.830 --> 13:55.430
我们再发送请求

13:55.430 --> 13:55.930
你看

13:55.930 --> 13:56.530
说得到了

13:56.530 --> 13:56.830
哎

13:56.830 --> 13:59.230
为什么是500呢

13:59.230 --> 14:00.630
呃

14:00.630 --> 14:02.130
我们这边肯定是认证没有通过

14:02.130 --> 14:02.330
对吧

14:02.330 --> 14:03.830
认证未通过

14:03.830 --> 14:05.230
还有什么呢

14:05.230 --> 14:07.330
Status

14:07.330 --> 14:08.430
呃

14:08.930 --> 14:10.130
instate

14:10.130 --> 14:10.930
status

14:10.930 --> 14:12.230
send

14:12.230 --> 14:12.930
send

14:12.930 --> 14:13.330
body

14:13.330 --> 14:15.130
status

14:15.130 --> 14:15.630
use

14:15.630 --> 14:16.230
race

14:16.230 --> 14:17.030
status

14:17.030 --> 14:19.540
send

14:19.540 --> 14:19.740
哎

14:19.740 --> 14:19.940
对啊

14:19.940 --> 14:20.740
对啊

14:20.740 --> 14:22.240
我没有用这种方式呢

14:22.240 --> 14:25.550
呃

14:25.550 --> 14:27.050
instate

14:27.050 --> 14:27.450
对啊

14:27.450 --> 14:28.150
对啊

14:28.150 --> 14:29.550
token middleware

14:29.550 --> 14:30.450
token middleware

14:30.450 --> 14:31.550
我是用status

14:31.550 --> 14:33.350
然后send呢

14:33.350 --> 14:33.850
哦

14:33.850 --> 14:34.750
我这个地方写出了

14:34.750 --> 14:36.650
这个403应该写到这

14:36.650 --> 14:38.350
应该写到这

14:38.350 --> 14:39.050
ok

14:39.050 --> 14:41.350
现在我们再来看

14:41.450 --> 14:42.250
send

14:42.250 --> 14:43.350
403对吧

14:43.350 --> 14:44.450
说明问题

14:44.450 --> 14:44.650
啊

14:44.650 --> 14:45.850
你看现在就不能不能通

14:45.850 --> 14:46.550
不能去

14:46.550 --> 14:47.750
因为他不会往后移交了

14:47.750 --> 14:48.250
对吧

14:48.250 --> 14:48.950
没有真正的情况

14:48.950 --> 14:50.350
就不会往后面移交了

14:50.350 --> 14:51.350
就这么个情况

14:51.350 --> 14:51.550
但是呢

14:51.550 --> 14:52.750
现在还能让出一个问题

14:52.750 --> 14:53.750
出了什么问题呢

14:53.750 --> 14:55.350
出了个登录的问题

14:55.350 --> 14:55.550
啊

14:55.550 --> 14:57.050
突然出来登录了这么一个问题

14:57.050 --> 14:57.550
什么问题

14:57.550 --> 14:58.450
你看登录

14:58.450 --> 14:59.850
现在也不能登录了

14:59.850 --> 15:00.550
你看吧

15:00.550 --> 15:01.550
我都不能登录了

15:01.550 --> 15:02.850
点登录

15:02.850 --> 15:04.550
他告诉我

15:04.550 --> 15:05.450
哎

15:05.450 --> 15:07.350
点登录为什么还能登录

15:07.350 --> 15:08.550
我把Cookie先去掉

15:08.550 --> 15:10.350
删除掉

15:10.450 --> 15:11.450
登录是不能登录了的

15:11.450 --> 15:11.950
啊

15:12.950 --> 15:13.150
好

15:13.150 --> 15:14.050
再来

15:14.050 --> 15:14.550
真的

15:15.750 --> 15:16.050
哎

15:16.050 --> 15:16.750
不对不对不对

15:16.750 --> 15:18.050
登录是不能登录的啊

15:18.050 --> 15:18.850
因为登录的话

15:18.850 --> 15:20.150
是不是也要进这个

15:20.150 --> 15:21.250
也要进这个认证

15:21.250 --> 15:23.250
他这认证为什么通过了呢

15:23.250 --> 15:23.350
啊

15:23.350 --> 15:23.750
也要进

15:23.750 --> 15:24.050
哦

15:24.050 --> 15:24.550
明白了

15:24.550 --> 15:25.650
我刚才在登录这里

15:25.650 --> 15:26.650
刚才设置的一个header

15:26.650 --> 15:27.650
就是Australization

15:27.650 --> 15:28.550
加了这么一个东西

15:28.550 --> 15:30.350
把这个东西去掉

15:30.350 --> 15:31.250
再把Cookie删掉

15:32.550 --> 15:33.050
删掉

15:33.050 --> 15:33.550
好

15:33.550 --> 15:34.350
那么现在比较说

15:34.350 --> 15:35.550
我现在都还没有登录过

15:35.550 --> 15:36.250
从来没有登录过

15:36.250 --> 15:37.050
我现在要登录

15:37.050 --> 15:38.350
是不是登录也不行了

15:38.350 --> 15:38.950
对不对

15:38.950 --> 15:39.850
你连登录都不行了

15:39.850 --> 15:40.650
所以说我们这里呢

15:40.650 --> 15:41.450
有一个问题就是

15:42.450 --> 15:44.450
并非所有的接口

15:46.050 --> 15:47.650
都需要认证过后

15:47.650 --> 15:49.250
才能才能访问

15:49.250 --> 15:50.550
有些接口是不需要认证的

15:50.550 --> 15:51.750
比方登录接口

15:51.750 --> 15:52.650
你就是没有认证

15:52.650 --> 15:53.950
才需要登录吗

15:53.950 --> 15:56.450
那你把这个接口都给我限制的

15:57.750 --> 15:59.850
我现在是不是没办法了

15:59.850 --> 16:00.250
所以说呢

16:00.250 --> 16:00.550
这里呢

16:00.550 --> 16:02.450
还有一个地方需要考虑啊

16:02.450 --> 16:03.950
就是你要做一个配置

16:03.950 --> 16:04.850
比方说我们在这里呢

16:04.850 --> 16:05.650
可以做一个配置

16:07.250 --> 16:07.350
啊

16:07.350 --> 16:08.950
那你可以写到单独一个模块里面

16:09.050 --> 16:09.850
config

16:09.850 --> 16:11.250
就是需要认证的

16:11.250 --> 16:14.550
就need token api

16:14.550 --> 16:16.150
需要认证的 api

16:16.150 --> 16:16.750
我们这里呢

16:16.750 --> 16:18.150
可以简单的做一下啊

16:18.150 --> 16:18.950
当然如果说

16:18.950 --> 16:20.250
你的系统再复杂一点的话

16:20.250 --> 16:22.150
还可能会根据用户的不同的身份

16:22.150 --> 16:23.850
你放访问不同的 api

16:23.850 --> 16:24.750
都有可能的

16:24.750 --> 16:25.250
所以说呢

16:25.250 --> 16:26.350
这个地方呢

16:26.350 --> 16:27.350
我们就简单的写吧

16:27.350 --> 16:27.950
再复杂的话

16:27.950 --> 16:29.050
就变成后段的东西了

16:29.050 --> 16:30.450
你说这个note介绍

16:30.450 --> 16:32.350
他讲起来是没完没了

16:32.350 --> 16:33.750
有这么一个问题

16:33.750 --> 16:36.050
我们不要说写上一些 api吧

16:36.050 --> 16:37.950
比方说我们请求什么 api 的时候

16:37.950 --> 16:39.450
要考虑这个问题呢

16:39.450 --> 16:41.450
一个是那个

16:41.450 --> 16:44.750
比方的请求的 api 是 api

16:44.750 --> 16:46.250
然后呢

16:46.250 --> 16:47.150
students

16:50.350 --> 16:52.350
我们看一下啊

16:52.350 --> 16:53.850
还要写一个请求的动作

16:53.850 --> 16:54.350
对不对

16:54.350 --> 16:55.850
method

16:55.850 --> 16:57.450
post

16:57.450 --> 16:59.150
请求poster的时候呢

16:59.150 --> 17:01.950
就是poster去请求这个地址的时候

17:01.950 --> 17:03.750
poster去请求这个地址的时候

17:03.750 --> 17:04.350
然后呢

17:04.350 --> 17:06.150
pass

17:06.150 --> 17:07.850
那么我们必须要认证的

17:08.350 --> 17:08.850
然后呢

17:08.850 --> 17:09.350
还有什么呢

17:09.350 --> 17:10.150
method

17:11.350 --> 17:12.750
比方说用 put

17:13.950 --> 17:15.950
去请求这个地址的时候

17:16.950 --> 17:18.050
api

17:18.050 --> 17:19.350
students

17:19.350 --> 17:20.950
然后后边是跟一个 id

17:20.950 --> 17:21.550
对吧

17:21.550 --> 17:23.150
那么这是一个地址规则

17:23.150 --> 17:24.850
那么我们有了这个东西过后呢

17:24.850 --> 17:26.850
我们在认证的时候

17:26.850 --> 17:28.450
我们首先看一下

17:28.450 --> 17:30.250
需不需要认证

17:30.250 --> 17:31.650
有这个几口需不需要认证

17:31.650 --> 17:32.850
我们怎么来判断呢

17:32.850 --> 17:34.050
我们就可以这样做

17:34.050 --> 17:34.850
letoken

17:34.850 --> 17:36.050
这是个数组对吧

17:36.050 --> 17:38.050
然后用 filter

17:38.050 --> 17:40.250
看一下里面满足条件的有几个

17:40.250 --> 17:41.950
是不是里面能够找到

17:41.950 --> 17:42.750
能够满足条件的

17:42.750 --> 17:45.250
或者是用什么 find 都可以

17:45.250 --> 17:46.050
find 不行

17:46.050 --> 17:47.050
find 是

17:48.450 --> 17:50.250
find 是直接给一个数据

17:50.250 --> 17:50.750
对吧

17:50.750 --> 17:51.850
大海不行

17:51.850 --> 17:53.850
咱们还是用 filter

17:53.850 --> 17:54.250
filter

17:55.950 --> 17:57.350
来 我们要去找

17:57.350 --> 17:58.350
那么我们这里找呢

17:58.350 --> 17:59.550
我们就 api

17:59.550 --> 18:01.650
把这个数组的每一项拿出来看一下

18:01.650 --> 18:03.850
看一下这个 api

18:03.850 --> 18:05.850
api

18:05.850 --> 18:08.050
这里边的一个 pass

18:08.050 --> 18:09.250
message

18:09.250 --> 18:11.850
是不是等于我们这一次请求的message

18:11.850 --> 18:14.450
就是我们的请求方法是不是匹配的

18:14.450 --> 18:14.950
然后呢

18:14.950 --> 18:15.750
还有一个什么呢

18:15.750 --> 18:17.750
还有一个就是路径是否匹配

18:17.750 --> 18:19.150
但是路径大家注意啊

18:19.150 --> 18:20.650
特别像那个铺扯这里

18:20.650 --> 18:21.050
是吧

18:21.050 --> 18:22.450
它这里是个路径规则

18:22.450 --> 18:24.050
而我们这边的路径是什么呢

18:24.050 --> 18:25.050
我们这里的路径

18:25.050 --> 18:27.850
就是我们现在要去匹配这个东西

18:27.850 --> 18:29.350
就有可能会出现这种情况

18:29.350 --> 18:33.250
匹配这个和我们具体的路径

18:33.250 --> 18:34.450
student

18:34.550 --> 18:35.950
比方说1771

18:35.950 --> 18:38.050
好比较这两个的话

18:38.050 --> 18:38.850
嗯

18:38.850 --> 18:40.250
要比较的是这两个东西

18:40.250 --> 18:40.850
对不对

18:40.850 --> 18:41.850
比较这两个东西

18:41.850 --> 18:43.150
它不是用相等的

18:43.150 --> 18:44.150
它是用什么呢

18:44.150 --> 18:46.350
它是要判这个规则是否满足

18:46.350 --> 18:48.150
那么要判的规则是否满足的话

18:48.150 --> 18:49.850
我们可以用一个第三方库啊

18:49.850 --> 18:50.550
库呢

18:50.550 --> 18:52.750
以前讲那个regs的时候都讲过

18:53.850 --> 18:56.250
就叫做 pass to

18:57.250 --> 18:58.150
就这个

18:58.150 --> 18:59.850
它会把一个路径规则

18:59.850 --> 19:00.950
转换成一个正载表达式

19:00.950 --> 19:01.950
你用正载表达式

19:01.950 --> 19:04.150
去验证你的路径是否匹配

19:04.250 --> 19:04.850
就这个库

19:04.850 --> 19:05.850
这个后面安装一下

19:07.250 --> 19:11.250
by pass to reg expression

19:11.950 --> 19:12.550
安装一下

19:13.150 --> 19:13.550
好

19:14.750 --> 19:15.450
安装到之后呢

19:15.450 --> 19:16.150
我们现在呢

19:16.150 --> 19:17.450
就再运行一下啊

19:17.450 --> 19:17.950
start

19:20.060 --> 19:20.260
好

19:20.260 --> 19:20.560
现在呢

19:20.560 --> 19:21.860
我们把这个库倒进来

19:21.860 --> 19:23.760
const require

19:24.560 --> 19:25.060
哪个库呢

19:25.060 --> 19:27.060
to pass to expression

19:28.560 --> 19:32.420
to expression

19:32.820 --> 19:33.020
好

19:33.020 --> 19:34.820
那么这里边它有一个函数

19:34.820 --> 19:35.320
叫做

19:35.320 --> 19:37.320
就叫做 pass to expression

19:37.920 --> 19:40.120
而我这有点忘了这个伙说实话

19:41.120 --> 19:41.220
好

19:41.220 --> 19:41.820
我们看一下吧

19:41.820 --> 19:42.220
这个库

19:42.820 --> 19:43.820
用法明白了

19:43.820 --> 19:44.720
用法就是这个玩意

19:44.720 --> 19:45.920
就是这个函数啊

19:45.920 --> 19:46.720
这个函数呢

19:46.720 --> 19:47.720
你怎么用呢

19:47.720 --> 19:49.220
你可以把这个函数呢

19:49.220 --> 19:50.320
去解析一下

19:50.320 --> 19:52.120
比方说你给给他一个路径规则

19:52.920 --> 19:54.020
给他一个路径规则

19:54.020 --> 19:55.820
他会给你返回一个正载表达式

19:58.330 --> 19:58.930
reg

19:58.930 --> 19:59.530
一个正载表达式

19:59.530 --> 20:00.930
我们把个正载表达式输出

20:00.930 --> 20:01.530
看一下吧

20:01.530 --> 20:02.430
把这个读识掉

20:04.500 --> 20:04.800
好

20:04.800 --> 20:05.500
再看一下啊

20:06.400 --> 20:06.900
poster

20:06.900 --> 20:07.600
里边去

20:07.600 --> 20:08.800
随便请求一个

20:08.800 --> 20:10.500
然后呢我们看一下服务器

20:10.500 --> 20:11.800
你看是不是得到正载表达式

20:11.800 --> 20:12.600
以API开头

20:12.600 --> 20:13.200
student开头

20:13.200 --> 20:15.100
后边可以是任意制服啊

20:15.100 --> 20:16.700
那么这这里是一个就是匹配的

20:16.700 --> 20:17.100
对不对

20:17.100 --> 20:18.000
是个潜在预算服

20:18.600 --> 20:19.700
那么我们这里呢

20:19.700 --> 20:21.000
用这个正载表达式去匹配

20:21.000 --> 20:21.200
咋了

20:21.200 --> 20:21.800
我们看一下

20:21.800 --> 20:22.800
能不能匹配地址啊

20:22.800 --> 20:23.800
march

20:23.800 --> 20:24.700
能不能匹配地址

20:24.700 --> 20:25.500
比方说我们的地址

20:25.500 --> 20:26.900
是API student

20:28.000 --> 20:28.700
1771

20:28.700 --> 20:29.400
看能不能匹配

20:31.000 --> 20:31.200
好

20:31.200 --> 20:32.300
这里运行

20:33.100 --> 20:34.000
这边我们来看一下

20:34.900 --> 20:36.200
宝座了是吧

20:36.200 --> 20:36.700
那是吧

20:36.700 --> 20:38.100
一个march是那方形

20:39.200 --> 20:39.900
or test

20:39.900 --> 20:40.500
or test

20:44.410 --> 20:44.610
好

20:44.610 --> 20:44.910
再来

20:46.010 --> 20:46.410
运行

20:46.910 --> 20:47.110
好

20:47.110 --> 20:47.510
看这边

20:48.010 --> 20:48.410
是吧

20:49.010 --> 20:50.110
我是输出的东西了

20:50.910 --> 20:51.710
输出的东西呢

20:53.310 --> 20:54.910
这是一开始我写到这了

20:54.910 --> 20:55.410
写到这了

20:55.410 --> 20:56.110
所以说

20:56.110 --> 20:57.710
这是一开始运行

20:57.710 --> 20:58.810
就是保存

20:58.810 --> 20:59.910
然后直接让他看一下

21:01.910 --> 21:02.210
去

21:02.210 --> 21:02.510
对吧

21:02.510 --> 21:03.210
所以认证通

21:03.210 --> 21:05.010
那就是这个是匹配的

21:05.010 --> 21:06.010
如果说这种地址呢

21:07.010 --> 21:08.210
是force不匹配的

21:08.210 --> 21:08.510
对吧

21:08.510 --> 21:10.510
所以说我们可以用这个东西来判断

21:10.510 --> 21:11.110
明儿的意思吧

21:11.210 --> 21:12.510
可以用这个东西来判断

21:12.510 --> 21:13.210
那么我们这边

21:13.210 --> 21:14.810
我们再起到这边来

21:17.200 --> 21:18.300
就是说这个地方

21:18.300 --> 21:20.400
我们要得到得到这个

21:21.100 --> 21:22.000
得到这个东西

21:22.800 --> 21:24.900
把这个转换成一个一个证则表达式

21:26.600 --> 21:28.100
然后用一个证则表达式

21:28.100 --> 21:29.400
去验证一下

21:29.400 --> 21:30.200
test

21:30.200 --> 21:31.000
去验证一下

21:31.000 --> 21:32.800
这个就是我们请求的地址

21:33.400 --> 21:34.600
我们请求的地址

21:34.600 --> 21:35.500
看一下这个东西

21:35.500 --> 21:36.400
能不能验证通过

21:36.400 --> 21:38.100
如果说两个都通过了

21:38.100 --> 21:38.600
是不是

21:39.400 --> 21:40.600
如果说这两个都通过了

21:40.600 --> 21:41.400
是不是就ok了

21:41.400 --> 21:41.700
对不对

21:41.700 --> 21:42.400
就返回去

21:43.700 --> 21:45.200
然后否则返回force

21:46.200 --> 21:48.100
或者直接把这个表达式返回就完事了

21:48.800 --> 21:49.300
也可以

21:50.800 --> 21:52.200
这一步我们得到什么了

21:52.200 --> 21:53.500
我们得到这个数组中

21:53.500 --> 21:55.800
有没有需要我们认证的

21:56.400 --> 21:57.700
那么得到一个结果对不对

21:58.300 --> 21:59.600
得到一个结果就是

22:00.500 --> 22:01.400
apis

22:01.400 --> 22:02.400
得到一个结果

22:02.400 --> 22:04.000
如果说这个结果里边

22:04.000 --> 22:06.100
没有没有匹配上任何一个

22:06.100 --> 22:06.800
就等于0

22:07.500 --> 22:08.800
没有匹配上任何一个

22:08.800 --> 22:10.500
那么我们就直接那个是

22:11.600 --> 22:12.700
交给后续处理

22:12.700 --> 22:13.700
然后来返回

22:13.700 --> 22:14.500
对不对

22:14.500 --> 22:15.500
我们就这样再处理

22:16.300 --> 22:16.500
好

22:16.500 --> 22:17.900
咱们在这现在再试一下

22:17.900 --> 22:19.200
没有没有匹配的

22:19.200 --> 22:20.000
我们就直接返回了

22:20.000 --> 22:21.400
然后到postman里边去

22:21.400 --> 22:23.300
现在我们在获取学生

22:23.300 --> 22:24.500
获取学生是不需要认证的

22:24.500 --> 22:24.900
对吧

22:24.900 --> 22:26.200
我们现在也没有Cookie

22:26.200 --> 22:26.900
好发送

22:27.300 --> 22:27.500
哎

22:27.500 --> 22:28.200
这出问题了

22:28.700 --> 22:29.400
这里包错了

22:29.400 --> 22:30.000
哎呀

22:30.000 --> 22:31.100
reg is not defend

22:31.700 --> 22:33.100
他说这个玩意是

22:34.700 --> 22:35.200
没有被

22:35.200 --> 22:35.300
哦

22:35.300 --> 22:36.500
就这里这里先出了

22:38.480 --> 22:39.180
重新包出来

22:40.180 --> 22:40.580
再来

22:41.780 --> 22:42.380
剩的

22:42.380 --> 22:43.580
你看现在是不是可以得到学生的

22:43.580 --> 22:44.580
他不需要认证

22:44.580 --> 22:45.180
对不对

22:45.180 --> 22:47.480
然后我们到那个修改学生的

22:47.480 --> 22:48.580
我们修改学生试一下

22:49.180 --> 22:50.380
是不是就需要认证了

22:50.380 --> 22:50.680
对吧

22:50.680 --> 22:52.280
这样子我们就可以根据不同的情况

22:52.280 --> 22:53.880
我们再用一个配置来搞定

22:53.880 --> 22:55.280
当然这种做法很多啊

22:55.780 --> 22:56.580
还有一种做法

22:56.580 --> 22:57.680
就是给大家说一下

22:57.680 --> 22:58.780
我比较喜欢另一种做法

22:58.780 --> 23:00.180
另一种方法对大家来说

23:00.680 --> 23:01.780
有点难了啊

23:02.680 --> 23:04.180
要接触多一些后端的话

23:04.180 --> 23:05.580
你就会有这种思想了

23:05.580 --> 23:07.580
就是说我可以把这个API里边的东西

23:07.580 --> 23:09.580
我们目前是直接用创建路由

23:09.580 --> 23:09.780
对吧

23:09.780 --> 23:11.380
用路由的这种方式来写的

23:11.380 --> 23:12.980
我可以把所有的API

23:12.980 --> 23:13.980
写成一个配置

23:14.680 --> 23:15.180
比方说啊

23:15.180 --> 23:16.580
我们这个API我可以这样子写

23:17.380 --> 23:17.980
export

23:18.780 --> 23:19.980
写成个对象

23:19.980 --> 23:21.980
那么这个写成一个数组

23:22.780 --> 23:23.680
我们可以写成个数组

23:23.680 --> 23:26.380
就是我这个这个里边有哪些API

23:26.380 --> 23:27.580
数组里面每一个是个对象

23:28.580 --> 23:30.180
匹配的Message是Post

23:32.180 --> 23:33.780
然后呢匹配的就是

23:33.780 --> 23:35.180
匹配的就是那个

23:35.180 --> 23:37.180
是不是需要登录

23:37.180 --> 23:38.180
need token

23:38.180 --> 23:39.180
是不是需要token

23:39.180 --> 23:40.180
我们把设为q

23:40.180 --> 23:41.280
handle

23:41.280 --> 23:42.380
我们的处理函数

23:42.580 --> 23:43.580
把它写成这种格式

23:44.980 --> 23:45.380
reg

23:45.380 --> 23:45.980
regs

23:45.980 --> 23:46.280
对不对

23:46.280 --> 23:48.080
我们把它写成这种格式

23:48.080 --> 23:49.180
没了意思吧

23:49.180 --> 23:49.580
然后呢

23:49.580 --> 23:51.580
专门来写个公共模块

23:51.580 --> 23:52.980
我们包括我们的路径

23:52.980 --> 23:53.180
对吧

23:53.180 --> 23:53.580
pass

23:54.880 --> 23:55.380
路径

23:55.380 --> 23:56.380
路径是什么呢

23:56.380 --> 23:57.180
写钢

23:57.180 --> 23:57.780
locking

23:57.780 --> 23:58.280
对不对

23:58.280 --> 23:59.580
还有基路径

23:59.580 --> 24:00.380
我们

24:00.380 --> 24:01.180
基础路径

24:01.180 --> 24:02.780
我们在这里通过这个导出吧

24:02.780 --> 24:03.780
再通过这个导出

24:03.780 --> 24:04.980
export

24:04.980 --> 24:05.780
base

24:05.780 --> 24:07.080
url

24:07.080 --> 24:08.380
基路径是API

24:09.980 --> 24:10.480
API

24:10.480 --> 24:12.780
url

24:12.780 --> 24:13.580
基路径

24:13.580 --> 24:14.880
那么这个pass是路径

24:14.880 --> 24:15.080
对吧

24:15.080 --> 24:16.380
我们把这些东西配置好

24:16.380 --> 24:18.180
一个请求接口就是一个配置

24:18.180 --> 24:18.980
好配置好

24:18.980 --> 24:21.180
然后通过一个公共的模块来读去

24:21.180 --> 24:22.680
就是读去这些东西

24:22.680 --> 24:25.080
读去这些所有的文件全部把读出来

24:25.080 --> 24:25.480
然后呢

24:25.480 --> 24:26.980
一个公共模块一下子刷

24:26.980 --> 24:28.780
把这些全部注册上

24:28.780 --> 24:30.180
为每一个模块生成一个rotor

24:30.180 --> 24:31.380
在干注册上

24:31.380 --> 24:32.480
不过车轮写法呢

24:32.480 --> 24:34.080
对你们说可能要复杂一点

24:34.080 --> 24:34.880
不是呢

24:34.880 --> 24:36.280
那么好写

24:36.280 --> 24:37.880
你们可以去尝试一下

24:37.880 --> 24:38.480
可以去尝试一下

24:38.480 --> 24:39.080
以前我写过了

24:39.080 --> 24:40.680
现在我不知道人哪去了

24:40.680 --> 24:41.180
这里呢

24:41.180 --> 24:42.580
是这个模式

24:42.580 --> 24:43.380
我们在这边呢

24:43.380 --> 24:44.980
用这个模式其实也可以

24:44.980 --> 24:46.280
如果说我写成刚才的模式的话

24:46.280 --> 24:46.980
就更加简单了

24:46.980 --> 24:47.780
根本不需要配置的

24:47.780 --> 24:47.980
对吧

24:47.980 --> 24:50.180
我们直接从这里边去读

24:50.180 --> 24:51.180
可以去读

24:51.180 --> 24:51.980
读到过后呢

24:51.980 --> 24:53.380
我看一下你需不需要登录

24:53.380 --> 24:53.580
对吧

24:53.580 --> 24:54.380
就完事了

24:54.380 --> 24:54.480
好

24:54.480 --> 24:56.980
这是都行啊都行

24:56.980 --> 24:57.180
好

24:57.180 --> 24:58.180
都是关于这一块

25:00.180 --> 25:00.980
那么现在呢

25:00.980 --> 25:02.080
我们就搞定了

25:02.080 --> 25:04.080
有些接口是可以不用登录的

25:04.080 --> 25:04.580
直接用

25:04.580 --> 25:05.880
有些接口是必须要登录的

25:05.880 --> 25:07.180
然后我们再来试验一下

25:07.180 --> 25:08.380
现在我们去登录

25:08.380 --> 25:09.980
登录接口是不可以用了

25:09.980 --> 25:10.580
对不对

25:10.580 --> 25:11.780
登录过后是不是有Cookie的

25:11.780 --> 25:13.580
Cookie过后是不是可以修改学生了

25:13.580 --> 25:13.880
对吧

25:13.880 --> 25:15.280
是不是可以修改学生了

25:15.280 --> 25:15.680
对吧

25:15.680 --> 25:16.280
ok

25:16.280 --> 25:16.380
好

25:16.380 --> 25:18.080
这就是我们就完成了

25:18.080 --> 25:18.680
什么了

25:18.680 --> 25:21.480
就完成了这个验证投坑

25:21.480 --> 25:21.680
好

25:21.680 --> 25:22.080
但是呢

25:22.080 --> 25:23.380
我们现在还有一个小的问题

25:23.380 --> 25:23.880
什么问题呢

25:23.880 --> 25:27.680
就是一个加密的问题

25:27.680 --> 25:28.680
就是我们的投坑啊

25:28.680 --> 25:29.280
保存的是什么

25:29.280 --> 25:30.780
保存的是用户id

25:30.780 --> 25:32.380
你看一下吧

25:32.380 --> 25:32.780
哎

25:32.780 --> 25:33.980
跑到去了

25:33.980 --> 25:35.480
cookies

25:35.480 --> 25:36.480
保存的是用户id

25:36.480 --> 25:37.280
对不对

25:37.280 --> 25:37.880
你看

25:37.980 --> 25:38.580
投坑为6

25:38.580 --> 25:39.880
直接这样子显示的

25:39.880 --> 25:41.580
这样子用名文显示的话

25:41.580 --> 25:42.980
不是那么安全

25:42.980 --> 25:43.980
有容易把它的

25:43.980 --> 25:46.280
就是一些关键信息暴露出去

25:46.280 --> 25:46.680
而且呢

25:46.680 --> 25:48.680
这个东西是不是特别容易伪造

25:48.680 --> 25:50.180
是不是特别容易伪造啊

25:50.180 --> 25:50.980
这个6

25:50.980 --> 25:52.480
啊别人如果说啊

25:52.480 --> 25:54.380
如果说你看着

25:54.380 --> 25:55.580
我现在呢是

25:55.580 --> 25:56.180
比方说吧

25:56.180 --> 25:58.380
我们这里就再加一个

25:58.380 --> 26:00.180
method

26:00.180 --> 26:01.680
get

26:01.680 --> 26:02.780
pass

26:02.780 --> 26:03.580
api

26:03.580 --> 26:06.460
student

26:06.460 --> 26:08.060
比方说我们加一个他啊

26:09.760 --> 26:10.460
加个他

26:10.460 --> 26:11.460
那么现在你看一下

26:11.460 --> 26:14.860
如果说我没有登录

26:14.860 --> 26:16.260
如果说我没有登录

26:16.260 --> 26:17.260
我去获取学生

26:18.860 --> 26:19.160
哎

26:19.160 --> 26:20.760
怎么还能获取到

26:20.760 --> 26:21.460
真的还能获取

26:21.460 --> 26:22.360
是这个是这个地方

26:22.360 --> 26:24.060
写纲的原因吗

26:24.060 --> 26:25.960
有可能是这个地方的原因啊

26:25.960 --> 26:26.760
呃

26:26.760 --> 26:28.960
我们这里不写写纲嘛

26:28.960 --> 26:29.160
好

26:29.160 --> 26:29.660
我们去剩的

26:31.360 --> 26:31.860
哎

26:31.860 --> 26:33.760
怎么还能获取学生呢

26:33.760 --> 26:35.560
APS student

26:35.560 --> 26:36.560
APS student

26:36.560 --> 26:37.960
get方法

26:37.960 --> 26:39.060
那么应该是

26:39.060 --> 26:40.660
应该是

26:40.660 --> 26:42.160
要通要经过验证的

26:42.160 --> 26:43.360
我们看Cookie是

26:43.360 --> 26:44.660
没有Cookie了

26:44.660 --> 26:46.960
为什么他们又经过验证呢

26:46.960 --> 26:48.660
这就奇怪了

26:48.660 --> 26:49.660
嗯看一下了

26:49.660 --> 26:50.460
这里是怎么回事

26:52.460 --> 26:58.390
这边我们输出一下这个APS

26:58.390 --> 26:59.190
好哎

26:59.190 --> 27:00.390
我点错了

27:00.390 --> 27:01.690
点错了点错了

27:01.690 --> 27:02.290
好这里

27:03.790 --> 27:04.590
这边看一下

27:05.590 --> 27:06.290
空数组

27:06.290 --> 27:07.690
所以说他没有匹配上

27:07.690 --> 27:09.390
这里边的东西没有匹配上

27:09.390 --> 27:12.090
然后我们在这里边再去打印一下

27:12.190 --> 27:13.290
APS method

27:13.290 --> 27:13.890
我们知道啊

27:13.890 --> 27:15.690
就是rake.method

27:15.690 --> 27:17.590
然后再打印一下rake.pass

27:21.560 --> 27:21.960
再来

27:23.060 --> 27:23.460
send

27:26.430 --> 27:27.130
get

27:28.330 --> 27:28.830
重新来

27:29.530 --> 27:30.330
倾空一下

27:32.790 --> 27:34.090
三个输出了三个

27:34.090 --> 27:35.890
呃这里是输出了

27:35.890 --> 27:37.290
因为我们输出有三项嘛

27:37.290 --> 27:37.790
对不对

27:38.490 --> 27:39.690
呃一个是rake pass

27:39.690 --> 27:40.290
一个是method

27:40.290 --> 27:42.190
都是get和APS student

27:43.390 --> 27:44.490
那么也就是这个地方

27:44.490 --> 27:45.290
他没有通过

27:45.290 --> 27:46.690
没有通过那个检查

27:47.490 --> 27:47.690
啊

27:47.690 --> 27:49.090
咱们来去试一下

27:49.090 --> 27:50.490
哦这个地方我写死了

27:50.490 --> 27:50.790
对吧

27:50.790 --> 27:52.290
我怎么能写死呢

27:52.290 --> 27:54.090
这是APS pass

27:54.090 --> 27:55.390
应该是这样子

27:55.390 --> 27:56.490
啊这样子应该没问题了

27:58.290 --> 27:58.890
知道这边来

27:59.590 --> 28:00.290
send

28:00.290 --> 28:00.890
放进去

28:00.890 --> 28:02.790
你看是不是没有没有没有这个没有

28:02.790 --> 28:04.790
这个就是登陆的权限了

28:04.790 --> 28:05.090
对吧

28:05.090 --> 28:06.390
没有分业获取学生的权限

28:06.390 --> 28:07.490
你只有登陆过后

28:07.490 --> 28:09.090
你才能分业获取学生

28:09.090 --> 28:10.090
变成这个样子了

28:10.090 --> 28:11.090
啊我们再把枯枚删掉

28:11.090 --> 28:12.490
我们来来做一个测试

28:13.390 --> 28:14.890
现在有一个很很严重的问题

28:14.890 --> 28:16.990
就是他可能会伪造枯枚

28:16.990 --> 28:17.490
比方说吧

28:20.090 --> 28:21.090
浏览器里边

28:21.090 --> 28:22.290
我们现在去访问这个

28:22.290 --> 28:24.090
就是localhost 5008

28:24.090 --> 28:24.390
对吧

28:24.390 --> 28:26.290
二等API student

28:26.290 --> 28:27.490
是不是直接可以访问

28:27.490 --> 28:28.290
这个是没问题的

28:28.290 --> 28:28.490
对吧

28:30.290 --> 28:30.990
为什么没问题

28:30.990 --> 28:32.990
因为浏览器里边是不是有这个Cookie

28:32.990 --> 28:33.590
有这个Cookie

28:33.590 --> 28:34.790
但是呢

28:34.790 --> 28:36.090
如果说你我没有登陆

28:36.090 --> 28:37.690
比方说我把个Cookie删了

28:37.690 --> 28:38.090
删除

28:39.490 --> 28:40.790
现在是不是不能访问

28:40.790 --> 28:42.090
但是如果说我现在不知道

28:42.090 --> 28:42.690
张浩密码

28:42.690 --> 28:44.290
你看我怎么来招国他

28:44.290 --> 28:45.090
我在这里呢

28:45.090 --> 28:45.890
直接用

28:45.890 --> 28:47.390
直接在浏览器里边

28:47.390 --> 28:48.490
写上一段介绍脚本

28:49.390 --> 28:50.790
document cookies

28:51.790 --> 28:53.790
等于token等于6

28:55.290 --> 28:55.990
然后呢

28:55.990 --> 28:57.990
pass等于邪纲

28:57.990 --> 28:59.790
do me等于localhost

29:00.390 --> 29:01.090
host

29:01.090 --> 29:02.690
然后再加上个max age

29:02.690 --> 29:03.290
等于

29:04.490 --> 29:05.290
3600

29:05.290 --> 29:06.690
一个小时过期

29:06.690 --> 29:07.790
一回车

29:07.790 --> 29:08.890
接下来我们再刷新

29:08.890 --> 29:09.890
是不是可以获取了

29:09.890 --> 29:10.690
是不是绕过的路了

29:10.690 --> 29:11.790
这会是被伪造的

29:11.790 --> 29:13.490
不是浮起办法的

29:13.490 --> 29:14.790
是不是出现这个问题

29:14.790 --> 29:15.690
那么怎么办呢

29:15.690 --> 29:17.290
我就让他不能伪造

29:17.290 --> 29:17.590
怎么办

29:17.590 --> 29:18.990
最简单的方式去加密

29:19.190 --> 29:19.990
怎么加密呢

29:19.990 --> 29:20.790
实际上这个库

29:20.790 --> 29:23.390
他给你提供了一个默认的加密方式

29:23.390 --> 29:23.990
就这个库

29:25.590 --> 29:27.190
就这个库给你提供了一个

29:27.190 --> 29:28.590
默认的加密方式

29:28.590 --> 29:29.890
他是用对称加密

29:29.890 --> 29:30.890
我们之前讲过那个

29:30.890 --> 29:32.090
好像加attps

29:32.090 --> 29:32.890
讲过这个加密

29:32.890 --> 29:33.390
对吧

29:33.390 --> 29:34.490
什么叫对称加密

29:34.490 --> 29:35.490
就是有个密钥

29:35.490 --> 29:36.190
你可以加密

29:36.190 --> 29:37.990
也可以用它解密

29:37.990 --> 29:39.390
那么你把密钥传给他

29:39.390 --> 29:39.790
就行了

29:39.790 --> 29:41.590
比方说给他传一个密钥

29:41.590 --> 29:42.690
就远近

29:42.690 --> 29:44.390
传一个密钥过去

29:44.390 --> 29:44.590
好

29:44.590 --> 29:45.990
那么现在呢

29:45.990 --> 29:47.290
我们怎么来加密呢

29:47.290 --> 29:49.790
当我们发送Cookie的时候

29:49.790 --> 29:51.190
当我们给他发送Cookie的时候

29:51.190 --> 29:52.990
给他传一个参数

29:52.990 --> 29:54.590
叫做

29:54.590 --> 29:56.590
传个参数叫做

29:56.590 --> 29:58.390
sign

29:58.390 --> 29:59.490
q

29:59.490 --> 30:00.990
给他传一个这么一个参数

30:00.990 --> 30:01.190
好

30:01.190 --> 30:02.090
你看着啊

30:02.090 --> 30:03.090
传了这个参数过后

30:03.090 --> 30:03.690
他的Cookie

30:03.690 --> 30:04.490
你随便点写他

30:04.490 --> 30:05.490
比方说你Cookie的

30:05.490 --> 30:07.290
只是这个ID对吧

30:07.290 --> 30:08.590
那么他就会加密

30:08.590 --> 30:09.690
对他进行加密

30:09.690 --> 30:10.390
咱们来试一下

30:12.090 --> 30:12.590
这边呢

30:12.590 --> 30:15.190
我们刷新一下

30:15.190 --> 30:16.590
这边我们把这个Cookie去掉

30:20.500 --> 30:20.900
删除

30:22.300 --> 30:23.100
刷新

30:23.100 --> 30:23.200
好

30:23.200 --> 30:24.000
那么现在呢

30:24.000 --> 30:25.000
没有办法访问了

30:25.000 --> 30:25.500
对不对

30:25.500 --> 30:25.800
然后呢

30:25.800 --> 30:26.600
我们去登录

30:26.600 --> 30:27.500
回到登录页

30:27.500 --> 30:28.000
去登录

30:29.300 --> 30:31.300
ABC 123 123

30:31.300 --> 30:32.400
点登录

30:32.400 --> 30:32.600
好

30:32.600 --> 30:33.400
点了登录过后

30:33.400 --> 30:34.000
我们来看一下

30:34.000 --> 30:38.640
我们的Cookie

30:38.640 --> 30:39.240
有个Cookie的

30:39.240 --> 30:39.540
你看

30:39.540 --> 30:41.240
这个是不是加密过后的

30:41.240 --> 30:42.240
虽然我只有一个E

30:42.240 --> 30:43.040
是不是经过了个密钥

30:43.040 --> 30:44.640
加密过后变成这个样子了

30:44.640 --> 30:46.440
由于你的密钥在服务器

30:46.440 --> 30:47.540
他很难拿到

30:47.540 --> 30:49.240
那么现在他现在在想伪造这个Cookie

30:49.240 --> 30:49.940
很难了

30:49.940 --> 30:51.540
因为他想伪造一个投狠的人

30:51.540 --> 30:51.940
6的Cookie

30:51.940 --> 30:53.040
他必须要加密

30:53.040 --> 30:54.440
必须要用我那个密钥加密

30:54.440 --> 30:55.940
他不知道我的密钥是啥

30:55.940 --> 30:57.240
是不是就很难伪造了

30:57.240 --> 30:57.840
对不对

30:57.840 --> 30:58.040
好

30:58.040 --> 30:58.540
那么现在呢

30:58.540 --> 31:00.240
把这个Cookie加密过后

31:00.240 --> 31:02.340
那么我们怎么来获取Cookie呢

31:02.340 --> 31:03.140
怎么来获取Cookie呢

31:03.140 --> 31:03.640
他是这样子

31:05.440 --> 31:05.840
现在呢

31:05.840 --> 31:07.840
我们去请求一下啊

31:07.840 --> 31:09.740
去请求一下那个分业获取学生

31:09.740 --> 31:11.640
看能不能得到了

31:11.640 --> 31:12.440
分业获取学生

31:13.540 --> 31:14.540
APS students

31:16.440 --> 31:17.140
说还是得不到

31:17.140 --> 31:18.240
为什么还是得不到呢

31:18.240 --> 31:20.340
因为他这边能够得到的Cookie啊

31:20.340 --> 31:21.640
就这边

31:21.640 --> 31:22.640
有点稍微有点绕啊

31:22.640 --> 31:24.840
大家要注意脑袋里面要动一下

31:24.840 --> 31:26.240
要想一下

31:26.240 --> 31:27.940
这边他获取到的Cookie呢

31:27.940 --> 31:29.940
他是为加密的Cookie

31:29.940 --> 31:32.440
而我们刚才的Cookie是加密过后的Cookie

31:32.440 --> 31:34.040
所以他用这种方式来获取呢

31:34.040 --> 31:34.740
他是获取不到的

31:34.740 --> 31:35.740
应该应该怎么获取呢

31:35.740 --> 31:36.640
应该用Sand

31:37.940 --> 31:40.640
Sand Cookies

31:40.640 --> 31:41.840
用这种方式来获取

31:41.840 --> 31:43.440
这种方式获取就可以了

31:43.440 --> 31:44.540
好刷新

31:44.540 --> 31:45.440
对吧

31:45.440 --> 31:46.940
他这边会自动给你解密

31:46.940 --> 31:48.940
我们把个Token打印出来可以

31:48.940 --> 31:52.270
Token

31:52.270 --> 31:52.770
好刷新

31:53.770 --> 31:55.170
好看一下服务器的

31:55.170 --> 31:55.770
是不是6

31:55.770 --> 31:56.970
就要解密出来了

31:56.970 --> 31:57.970
这种方式

31:57.970 --> 31:58.670
但这种方式呢

31:58.670 --> 31:59.570
我不是很推荐

31:59.570 --> 32:00.070
为什么呢

32:00.070 --> 32:02.070
因为你还考虑另外一个问题

32:02.070 --> 32:03.170
就是这个Head

32:03.970 --> 32:05.270
Head是不是要用同样的方式

32:05.270 --> 32:07.570
一模一样的方式来对他进行加密

32:07.570 --> 32:07.970
对不对

32:07.970 --> 32:09.570
所以要考虑这个问题

32:09.570 --> 32:09.970
而且呢

32:09.970 --> 32:11.470
我顺便可以给大家讲一讲

32:11.470 --> 32:14.170
如何来手动进行对称加密

32:14.170 --> 32:15.770
顺便给大家讲一讲吧

32:15.770 --> 32:16.570
我们可以在

32:16.570 --> 32:17.070
一到这里呢

32:17.070 --> 32:18.970
我们可以不用这个Sand Cookies

32:18.970 --> 32:20.070
我们手动给大家加密

32:20.070 --> 32:21.270
就是一个普通的Cookie

32:21.270 --> 32:22.370
手动给你加密

32:22.370 --> 32:23.970
不用你自己自动加密了

32:23.970 --> 32:24.870
也就是说这边

32:24.870 --> 32:26.770
我们这个Secret也可以不用了

32:26.770 --> 32:27.570
我只是给大家说一下

32:27.570 --> 32:29.370
还有它是具备这样的功能的

32:29.370 --> 32:30.370
是这么个意思

32:30.370 --> 32:30.970
然后这边呢

32:30.970 --> 32:33.170
自然也就是普通的Cookie

32:33.170 --> 32:34.570
普通的Cookie而已

32:34.570 --> 32:34.770
好

32:34.770 --> 32:37.270
那我们来说一下手动加密

32:37.270 --> 32:38.370
为了给大家演示手动加密

32:38.370 --> 32:41.480
我们先把这个注射掉

32:41.480 --> 32:42.580
就在这个

32:42.580 --> 32:43.180
哪里写呢

32:43.180 --> 32:44.780
我们就在UTO里面写一把

32:44.780 --> 32:45.680
新鲜的文件

32:45.680 --> 32:47.680
叫做Create

32:47.680 --> 32:48.680
Create

32:48.680 --> 32:50.880
叫GS

32:50.880 --> 32:52.780
有这么一个GS

32:52.880 --> 32:53.780
那么这个GS里面

32:53.780 --> 32:57.280
我们要提供两个方法

32:57.280 --> 32:58.980
一个方法是用于加密一个制服串

32:58.980 --> 33:01.180
一个方法是用于解密一个制服串

33:01.180 --> 33:01.980
Export

33:01.980 --> 33:02.580
导致一个方法

33:02.580 --> 33:06.520
一个是Increate

33:06.520 --> 33:07.020
方可信

33:07.020 --> 33:08.520
你给我一个制服串

33:08.520 --> 33:09.020
然后呢

33:09.020 --> 33:10.520
我给你返回一个加密的结果

33:10.520 --> 33:12.920
这是加密一个制服串

33:12.920 --> 33:15.220
加密一个制服串

33:15.220 --> 33:15.420
好

33:15.420 --> 33:15.920
另外一个呢

33:15.920 --> 33:18.220
是解密一个制服串

33:18.220 --> 33:22.700
Decraved

33:22.700 --> 33:24.000
当然加密解密这一块

33:24.000 --> 33:25.200
我不可能一人讲说按法的

33:25.200 --> 33:26.000
那个很深啊

33:26.000 --> 33:28.200
真的是非常非常深

33:28.200 --> 33:29.200
不可能一人讲说按法的

33:29.200 --> 33:30.100
就是讲怎么去用

33:30.100 --> 33:31.500
怎么去实现就行了

33:31.500 --> 33:33.100
实现一个对称加密

33:33.100 --> 33:34.700
这是Sand

33:34.700 --> 33:35.900
你给我一个加密过后的

33:38.700 --> 33:40.000
给我一个加密过后的制服串

33:40.000 --> 33:41.300
我给你解密

33:41.300 --> 33:45.530
解密一个制服串

33:45.530 --> 33:46.130
好来吧

33:46.130 --> 33:48.130
我们使用的加密说按法呢

33:48.130 --> 33:49.930
使用对称加密

33:49.930 --> 33:53.130
使用对称加密说按法

33:53.130 --> 33:54.130
对称加密说按法有很多

33:54.130 --> 33:54.930
我们这里使用

33:54.930 --> 33:57.630
最常见的AS算法

33:57.630 --> 33:59.430
AS算法它其实也有很多

33:59.430 --> 34:00.430
也有很多

34:00.430 --> 34:01.230
我们这里呢

34:01.230 --> 34:03.430
使用那个128位的

34:03.430 --> 34:04.130
128位

34:04.130 --> 34:06.430
就是密要是128位的算法

34:06.430 --> 34:06.930
那么这里呢

34:06.930 --> 34:08.630
你首先要准备好一个密要

34:08.630 --> 34:10.430
这个密要呢

34:10.430 --> 34:11.930
就Secret

34:11.930 --> 34:13.830
Secret

34:13.830 --> 34:16.230
准备这是密要

34:16.230 --> 34:16.930
密要

34:16.930 --> 34:19.530
密要必须要是128位的

34:19.530 --> 34:22.130
128位的密要

34:22.130 --> 34:24.430
位的密要

34:24.430 --> 34:26.030
那么这个密要是啥呢

34:26.030 --> 34:26.630
这个密要呢

34:26.630 --> 34:27.630
128位

34:27.630 --> 34:31.330
无非就是一个16

34:31.330 --> 34:34.630
16个字节的制服串

34:34.630 --> 34:35.630
对不对

34:35.630 --> 34:37.030
一个字节就是一个英文字母

34:37.030 --> 34:38.130
或者是数字

34:38.230 --> 34:39.030
U贴付钢吧

34:39.030 --> 34:39.830
就U贴付钢吧

34:39.830 --> 34:42.030
编码或者是ASK编码都行

34:42.030 --> 34:43.530
一个字母或者是数字

34:43.530 --> 34:45.430
就是一个字节

34:45.430 --> 34:46.830
16个字节是不是16个

34:46.830 --> 34:49.130
长度为16的一个制服串

34:49.130 --> 34:49.330
对不对

34:49.330 --> 34:50.830
当然不能有中文

34:50.830 --> 34:52.130
那么我们怎么呢

34:52.130 --> 34:53.430
得到一个长度为16的制服串

34:53.430 --> 34:54.830
当然你可以自己手动写

34:54.830 --> 34:55.630
手动写一个制服串

34:55.630 --> 34:56.530
长度为16

34:56.530 --> 34:56.830
但是呢

34:56.830 --> 34:58.430
我不是很推荐的那种做法

34:58.430 --> 34:59.530
一般我们密要的话

34:59.530 --> 35:01.330
一定要准备一个毫无意义的

35:01.330 --> 35:02.430
你不要搞什么生日啊

35:02.430 --> 35:04.330
自己的名字等于其实不好

35:04.330 --> 35:05.730
你要搞一个毫无意义的

35:05.730 --> 35:06.430
长度的制服串

35:06.430 --> 35:07.630
密要一般固定的

35:07.630 --> 35:09.330
一般密要都是比较固定的

35:09.330 --> 35:10.830
好那这里怎么写呢

35:10.830 --> 35:13.830
我们怎么来生成一个长度为16的制服串

35:13.830 --> 35:14.830
好这里呢

35:14.830 --> 35:17.630
我今天我以前讲那个rex的时候讲过的

35:17.630 --> 35:19.130
你可以用这种写法

35:19.130 --> 35:21.530
Mask.writer是不是称为一个水积数

35:21.530 --> 35:23.130
然后对这个水积数呢

35:23.130 --> 35:26.930
tosgin给他取一个的36

35:26.930 --> 35:28.330
36进字

35:28.330 --> 35:29.530
是不是包含数字

35:29.530 --> 35:30.830
还有26个英文字母

35:30.830 --> 35:31.130
对不对

35:31.130 --> 35:32.530
36进字嘛

35:32.530 --> 35:34.730
是不是得到这么一个制服串

35:34.730 --> 35:35.230
好然后呢

35:35.230 --> 35:38.130
我们取是不是可以取出8位

35:38.130 --> 35:38.330
对吧

35:38.330 --> 35:39.430
是不是取出8位

35:39.430 --> 35:40.530
好取出8位的话

35:40.530 --> 35:42.830
可能可以用snash付8

35:42.830 --> 35:44.530
是不是从刀鼠刀鼠之后

35:44.530 --> 35:46.330
就刀鼠第一位取出8位

35:46.330 --> 35:46.930
对吧

35:46.930 --> 35:47.430
取8位出来

35:47.430 --> 35:50.030
是不是长度为8的字母串就出来了

35:50.030 --> 35:52.530
然后再拼戒一次呗

35:52.530 --> 35:53.330
再拼戒一次

35:53.330 --> 35:54.930
不就是这个东西了吧

35:54.930 --> 35:55.930
就长度为16了

35:55.930 --> 35:57.930
好我们复制一下啊

35:57.930 --> 35:58.330
放在这

35:58.330 --> 35:59.430
这是我们的密要

35:59.430 --> 35:59.830
好密要

35:59.830 --> 36:00.930
那我们可以一般来说

36:00.930 --> 36:03.230
我们可以一般用一个buffer

36:03.230 --> 36:04.230
一个buffer是不是

36:04.230 --> 36:05.230
buffer的数组里面

36:05.230 --> 36:07.030
一个东西是不是就是一个字节

36:07.030 --> 36:07.230
对吧

36:07.230 --> 36:08.230
16个字节嘛

36:08.230 --> 36:09.730
给它设置成一个buffer

36:09.730 --> 36:10.830
buffer

36:10.830 --> 36:11.030
好

36:11.030 --> 36:12.230
你还要准备一个东西

36:12.230 --> 36:12.630
这个东西呢

36:12.630 --> 36:14.130
我就不好给大家解释了

36:14.130 --> 36:15.030
还要准备一个

36:15.030 --> 36:16.930
准备一个IV

36:16.930 --> 36:17.930
这个IV是什么呢

36:17.930 --> 36:19.030
叫做向量

36:19.030 --> 36:21.030
随机向量

36:21.030 --> 36:22.130
它是这么个意思

36:22.130 --> 36:23.330
它你要加密呢

36:23.330 --> 36:25.230
你需要一个密要

36:25.230 --> 36:25.930
A也是双方

36:25.930 --> 36:27.130
现在就是

36:27.130 --> 36:28.730
具体无形的是这种做法

36:28.730 --> 36:29.930
你一个密要呢

36:29.930 --> 36:31.430
还要配一个向量

36:31.430 --> 36:32.830
就是密要一般固定

36:32.830 --> 36:35.530
向量了一般不固定

36:35.530 --> 36:36.730
你要解密的时候

36:36.730 --> 36:38.130
你要用同样的向量

36:38.130 --> 36:41.130
和同样的密要来进行解密

36:41.130 --> 36:42.230
为什么要这样的做法呢

36:42.230 --> 36:43.930
因为密要一般是比较固定的

36:43.930 --> 36:45.430
万一你的密要泄露了

36:45.430 --> 36:46.330
还有一个保障

36:46.330 --> 36:47.230
就是一个向量

36:47.230 --> 36:48.730
它是随机的

36:48.730 --> 36:50.430
它每一次加密解密是随机的

36:50.430 --> 36:51.630
所以说呢

36:51.630 --> 36:52.830
避免这个问题

36:52.830 --> 36:53.930
当然你要解密的时候

36:53.930 --> 36:54.930
要提过同样的向量

36:54.930 --> 36:55.930
所以说这里的函数呢

36:55.930 --> 36:57.430
我们一般会这样子写

36:57.430 --> 36:59.530
marge the export

36:59.530 --> 37:00.930
导出

37:00.930 --> 37:02.530
导出的是一个函数

37:02.630 --> 37:03.630
这个函数呢

37:03.630 --> 37:05.030
它反回一个新的

37:05.030 --> 37:06.030
一个反回一个对象

37:06.030 --> 37:07.330
对象里面提供了两个方法

37:07.330 --> 37:09.830
increase stream

37:09.830 --> 37:10.630
加密

37:10.630 --> 37:12.530
另一个方法是解密

37:12.530 --> 37:14.030
decrease

37:14.030 --> 37:15.530
解密

37:15.530 --> 37:17.330
我们提供这么一个函数

37:17.330 --> 37:18.230
这个函数那一步呢

37:18.230 --> 37:19.330
就相当于是个高階函数

37:19.330 --> 37:20.030
你调整这个函数

37:20.030 --> 37:21.130
会得到一个对象

37:21.130 --> 37:22.630
这个对象里面要包含两个函数

37:22.630 --> 37:24.130
那么我在这个函数那一步呢

37:24.130 --> 37:25.730
准备好一个IV

37:25.730 --> 37:26.830
每次调用这个函数呢

37:26.830 --> 37:28.530
我就是使用的是相同的IV

37:28.530 --> 37:30.930
就这两个方法是使用的是相同的IV

37:30.930 --> 37:32.230
但是你重复的调用这个函数

37:32.330 --> 37:33.830
就是得到另一个IV了

37:33.830 --> 37:34.630
对吧

37:34.630 --> 37:35.530
那么这样子呢

37:35.530 --> 37:37.030
稍微安全一点

37:37.030 --> 37:38.730
好IV就完全水击了

37:38.730 --> 37:39.330
对吧

37:39.330 --> 37:41.930
我们就可以用得到一个IV

37:41.930 --> 37:43.630
const IV

37:43.630 --> 37:47.430
就是那个buffer from

37:47.430 --> 37:47.630
来吧

37:47.630 --> 37:49.930
我们就把这个复制一下吧

37:49.930 --> 37:51.630
这个不就是得到一个长度

37:51.630 --> 37:52.530
为16的字幕穿

37:52.530 --> 37:53.930
把它转换成buffer

37:53.930 --> 37:54.830
对不对

37:54.830 --> 37:55.730
把它转换成buffer

37:58.030 --> 37:59.230
那么现在呢

37:59.230 --> 38:01.030
写好了之后

38:01.030 --> 38:01.730
接下来呢

38:01.730 --> 38:03.530
我们再来进行加密

38:03.530 --> 38:03.730
好

38:03.730 --> 38:04.730
怎么加密呢

38:06.030 --> 38:07.330
那是怎么加密呢

38:07.330 --> 38:07.830
加密呢

38:07.830 --> 38:11.230
我们可以使用一个load里面提供的这个库

38:11.230 --> 38:12.130
叫做Crypto

38:14.400 --> 38:15.400
它是内置库

38:15.400 --> 38:16.500
不需要安装任何东西

38:17.400 --> 38:18.700
就这么一个库

38:18.700 --> 38:19.000
哎

38:19.000 --> 38:19.900
这里为什么包错了

38:21.400 --> 38:22.100
inv

38:23.800 --> 38:23.900
哦

38:23.900 --> 38:24.700
这里是const

38:26.400 --> 38:27.100
这个不要了啊

38:28.200 --> 38:28.400
好

38:28.400 --> 38:29.100
那么这个库里边

38:29.100 --> 38:31.400
还提供了很多的加密算法

38:31.400 --> 38:32.300
你可以通过这个

38:33.300 --> 38:35.600
crypto

38:37.600 --> 38:39.600
getCypress

38:39.600 --> 38:41.200
Cypress可以得到

38:41.200 --> 38:44.200
可以得到它支持的所有的加密算法

38:44.200 --> 38:45.000
你看一下吧

38:45.000 --> 38:45.600
results

38:47.100 --> 38:48.200
输出results

38:48.200 --> 38:49.300
我们在这边测试一下

38:50.500 --> 38:51.800
inv里面测试一下

38:51.800 --> 38:52.800
require

38:52.800 --> 38:55.800
导入那个就是ut里面的那个

38:55.800 --> 38:56.700
crypt

38:57.700 --> 38:58.400
保存

38:58.400 --> 38:58.800
你看

38:58.800 --> 39:00.200
这是它支持的所有的加密算法

39:00.200 --> 39:01.000
是不是很多

39:01.000 --> 39:01.600
对不对

39:01.600 --> 39:02.600
那么我们这里用啥的

39:02.600 --> 39:03.300
就用这个吧

39:03.300 --> 39:03.900
就用这个

39:03.900 --> 39:04.800
非常常见的

39:05.800 --> 39:06.500
用这个算法

39:07.600 --> 39:08.600
我们就用这个算法

39:08.600 --> 39:10.100
那么怎么来用呢

39:10.100 --> 39:11.100
在我们加密的时候

39:11.100 --> 39:12.300
我们可以用这个方法

39:12.300 --> 39:13.700
叫Crypto

39:13.700 --> 39:16.700
里边可以用createCypher

39:16.700 --> 39:17.100
iv

39:17.800 --> 39:18.900
然后第一个参数

39:18.900 --> 39:20.100
传递的加密算法

39:20.100 --> 39:21.300
我们就用这个

39:21.300 --> 39:23.300
128位的密钥

39:23.300 --> 39:24.300
模式是CBC

39:24.300 --> 39:25.400
模式又是啥意思呢

39:25.400 --> 39:26.400
这个东西太深了

39:26.400 --> 39:28.100
我们就不再多去解释了

39:28.100 --> 39:29.100
那涉及到密码学了

39:29.900 --> 39:30.700
第二个参数

39:30.700 --> 39:33.400
它传递的那个就是密钥secret

39:33.400 --> 39:34.100
第三个参数

39:34.100 --> 39:35.600
传递的iv

39:35.600 --> 39:36.400
传进去

39:36.400 --> 39:37.900
那么它会返回一个什么呢

39:37.900 --> 39:41.600
返回一个加密的函数

39:41.600 --> 39:42.800
返回一个加密的函数

39:42.800 --> 39:45.400
我们就用这个create来接受吧

39:45.400 --> 39:45.900
好

39:45.900 --> 39:46.500
那么接下来

39:46.500 --> 39:47.800
该怎么来操作呢

39:47.800 --> 39:49.000
通过这个加密函数

39:49.000 --> 39:51.000
它有一个方法叫update

39:51.000 --> 39:52.400
update呢

39:52.400 --> 39:55.000
就是你给它一个数据

39:55.000 --> 39:56.600
你要把你加密的数据给它

39:56.600 --> 39:57.500
是不是这个东西

39:57.500 --> 39:58.000
对不对

39:58.000 --> 39:59.400
还要传两个参数

39:59.400 --> 40:01.600
第二个参数呢

40:01.600 --> 40:03.800
是你传入的这个数据

40:03.800 --> 40:05.600
是什么类型

40:05.600 --> 40:07.500
你传入给它加密的这个数据

40:07.500 --> 40:08.400
是什么类型

40:08.400 --> 40:09.000
是什么类型呢

40:09.000 --> 40:11.000
就是有贴付钢8类型

40:11.000 --> 40:13.400
又贴付钢8

40:13.400 --> 40:15.000
你传入的是这个类型

40:15.000 --> 40:15.200
好

40:15.200 --> 40:16.800
你传出的是什么类型了

40:16.800 --> 40:18.100
就加密之后的是什么类型了

40:18.100 --> 40:20.900
加密之后我们也用有贴付钢8了

40:20.900 --> 40:22.500
两个类型都是这个类型

40:22.500 --> 40:22.600
好

40:22.600 --> 40:23.900
那么它会返回一个字母串

40:26.100 --> 40:26.900
返回一个字母串

40:26.900 --> 40:27.400
这个字母串

40:27.400 --> 40:28.600
不一定是加密的结果

40:28.700 --> 40:30.500
这个字母串你还要去拼接一下

40:30.500 --> 40:32.400
拼接一下它的另外一个方法的结果

40:32.400 --> 40:33.700
叫Final

40:33.700 --> 40:34.800
得到最终的结果

40:34.800 --> 40:35.800
然后最终的结果

40:35.800 --> 40:37.600
你仍然是使用有贴付钢8

40:37.600 --> 40:38.600
那么它为什么要这样做

40:38.600 --> 40:40.600
你要知道加密算法才行

40:40.600 --> 40:41.400
你不知道加密算法

40:41.400 --> 40:42.400
我都很难给你解释

40:42.400 --> 40:44.600
我们这里就这样测试一下吧

40:44.600 --> 40:45.400
Riddle

40:45.400 --> 40:45.600
好

40:45.600 --> 40:46.700
咱们再试一下

40:46.700 --> 40:47.700
这边导入了过后

40:47.700 --> 40:49.600
我们得到得到一个Cryptor

40:58.600 --> 41:00.600
单词好像写的有问题

41:00.600 --> 41:01.100
Cryptor

41:02.900 --> 41:03.100
好

41:03.100 --> 41:04.000
来吧

41:04.000 --> 41:06.500
然后我们通过它的Encrypt

41:06.500 --> 41:07.100
它里边一个

41:07.100 --> 41:08.100
它里边导

41:08.100 --> 41:10.500
它里边是个函数

41:10.500 --> 41:12.300
我们调用一下

41:12.300 --> 41:13.700
调用一下这个函数

41:13.700 --> 41:14.300
那么这里呢

41:14.300 --> 41:15.100
它就得到一个对象

41:15.100 --> 41:16.700
对象里边有个Encrypt

41:16.700 --> 41:17.300
加密一个

41:17.300 --> 41:18.800
比方说123

41:18.800 --> 41:21.820
看它加密的结果

41:21.820 --> 41:22.620
重新来

41:22.620 --> 41:22.920
保存

41:25.920 --> 41:27.520
这倒是加密的结果

41:27.520 --> 41:29.120
但是它怎么够这样子显示的

41:30.920 --> 41:32.120
我们用那个吧

41:32.120 --> 41:33.720
我们不用UTF-8刚刚导出了

41:33.720 --> 41:36.020
我们用那个16星值吧

41:36.020 --> 41:36.620
16星值

41:36.620 --> 41:38.220
因为它UTF-8变成弯码了

41:38.220 --> 41:38.820
对吧

41:38.820 --> 41:40.220
16星值

41:40.220 --> 41:40.820
用16星值

41:40.820 --> 41:42.020
你看这是加密的结果

41:43.120 --> 41:43.420
好

41:43.420 --> 41:44.520
解密呢

41:44.520 --> 41:45.520
解密是一样的

41:46.920 --> 41:48.620
解密的我们还是通过这个

41:48.620 --> 41:51.120
不是创建加密算法了

41:51.120 --> 41:52.620
创建解密算法

41:52.620 --> 41:54.220
叫做Create

41:55.220 --> 41:56.020
Disciple

41:56.020 --> 41:57.120
Disciple IV

41:57.120 --> 41:58.620
第一个参数的传是算法

41:58.620 --> 41:59.520
还是一样的算法

41:59.520 --> 42:00.020
对吧

42:00.020 --> 42:00.720
还是一样的算法

42:00.720 --> 42:01.720
我们把个算法复制过来

42:03.120 --> 42:06.320
然后密要Secret

42:06.320 --> 42:07.020
然后IV

42:07.020 --> 42:07.720
什么都一样

42:07.720 --> 42:08.320
传给它

42:08.320 --> 42:08.920
对不对

42:08.920 --> 42:09.120
好

42:09.120 --> 42:10.920
那么它返回的是一个解密

42:10.920 --> 42:11.720
解密器

42:12.720 --> 42:13.220
Decrypt

42:14.720 --> 42:16.020
解密的话是一样的

42:16.020 --> 42:16.720
是一样的

42:16.720 --> 42:17.620
通过Decrypt

42:19.620 --> 42:20.920
然后通过Update

42:22.120 --> 42:22.920
你给它的是什么

42:22.920 --> 42:25.020
给它的是一个加密过后的支付圈

42:25.020 --> 42:26.020
就是STR

42:26.020 --> 42:27.120
是加密过后的

42:27.120 --> 42:28.320
然后加密过后的支付圈

42:28.320 --> 42:28.920
是什么格式呢

42:28.920 --> 42:29.420
是Hex

42:29.420 --> 42:29.920
对吧

42:29.920 --> 42:31.120
我们之前加密完了过

42:31.120 --> 42:31.820
是不是Hex

42:31.820 --> 42:34.620
就是16斤之的格式的支付圈

42:34.620 --> 42:36.220
然后输出的支付圈是什么

42:36.220 --> 42:37.520
当然是UTF8

42:37.520 --> 42:38.720
UTF-8

42:38.720 --> 42:39.420
同样的道理

42:39.420 --> 42:40.320
这个协法是一样的

42:42.420 --> 42:43.220
这边

42:43.220 --> 42:45.320
我们再拼接一下Results

42:45.320 --> 42:46.520
拼接一下Decrypt

42:47.620 --> 42:47.920
Final

42:48.920 --> 42:49.520
Hex

42:49.520 --> 42:50.620
UTF8

42:51.920 --> 42:56.470
输出Result

42:56.470 --> 42:57.670
这里用点

42:57.670 --> 42:58.870
定一个辩量

42:58.870 --> 43:02.520
输出这个Result

43:02.620 --> 43:03.020
行了

43:03.020 --> 43:04.420
我们来解密一下

43:04.420 --> 43:06.420
首先我们加密加密123

43:06.420 --> 43:07.820
然后得到一个结果

43:07.820 --> 43:09.320
我们这里把它返回

43:09.320 --> 43:10.120
我们不输出了

43:10.120 --> 43:11.320
返回Result

43:13.520 --> 43:14.720
这边也是返回

43:17.960 --> 43:19.260
这边写好了

43:19.260 --> 43:20.660
这边是什么

43:20.660 --> 43:21.660
这个就去掉了

43:23.160 --> 43:23.460
好

43:23.460 --> 43:24.260
这边来

43:24.260 --> 43:25.760
我们得到一个加密过后的

43:27.960 --> 43:28.760
这是加密过后的

43:28.760 --> 43:30.160
我们输出一下

43:30.160 --> 43:31.460
加密之后

43:32.860 --> 43:34.360
然后得到了是这个

43:34.360 --> 43:35.560
然后解密

43:35.560 --> 43:36.260
Crypt

43:36.260 --> 43:38.060
然后是用Decrypt

43:38.060 --> 43:39.960
把这个加密过后的字幕刷放进去

43:39.960 --> 43:41.760
它会给我们进行解密

43:41.760 --> 43:43.460
就是orange

43:43.460 --> 43:44.560
原式的字幕刷

43:44.560 --> 43:45.960
这是解密之后

43:49.540 --> 43:50.440
那么这是orange

43:53.020 --> 43:54.820
保存看一下

43:54.820 --> 43:55.420
加密之后

43:55.420 --> 43:56.120
解密之后

43:56.120 --> 43:57.120
得到了

43:57.120 --> 43:58.220
对不对

43:58.220 --> 43:58.820
那么这里

43:58.820 --> 44:00.620
我们就可以用这种模式

44:00.620 --> 44:03.320
可以用这种模式来进行处理

44:03.320 --> 44:04.920
我们这边呢

44:05.920 --> 44:07.920
看一下啊

44:07.920 --> 44:09.120
我们这里呢

44:09.120 --> 44:10.420
这里是一个函数

44:10.420 --> 44:10.920
Iv

44:10.920 --> 44:12.920
我担心Iv不一样

44:12.920 --> 44:13.720
Iv我现在

44:13.720 --> 44:15.120
现在还是干脆这样吧

44:15.120 --> 44:17.520
我还是把Iv写一样吧

44:17.520 --> 44:17.920
不然的话

44:17.920 --> 44:19.620
我们那个程序结构都要重新设计了

44:19.620 --> 44:21.320
又把事情搞复杂了

44:21.320 --> 44:22.520
因为我们毕竟是前端

44:24.720 --> 44:27.020
我们把这个Iv就写成一样吧

44:27.020 --> 44:27.420
不然的话

44:27.420 --> 44:28.920
这个事情越整越复杂

44:31.320 --> 44:31.920
export

44:33.720 --> 44:34.520
到处两个字幕刷

44:35.320 --> 44:36.120
一个是加密

44:36.120 --> 44:36.720
increase

44:38.820 --> 44:39.620
这是加密的

44:40.720 --> 44:43.840
复杂过来

44:43.840 --> 44:45.340
再来一个解密的

44:45.340 --> 44:45.940
export

44:47.540 --> 44:48.140
decrypt

44:53.780 --> 44:58.850
解密

44:58.850 --> 44:59.650
ok

44:59.650 --> 45:00.450
一个加密

45:00.450 --> 45:03.490
一个解密

45:03.490 --> 45:04.090
然后呢

45:04.090 --> 45:05.090
这个Iv

45:05.090 --> 45:06.490
Iv我们还是把固定吧

45:06.490 --> 45:07.490
因为现在我们在

45:07.490 --> 45:09.690
现在我现在是一个什么问题呢

45:09.690 --> 45:10.590
就是我们如果说

45:10.590 --> 45:11.990
现在把Iv随机的话

45:11.990 --> 45:13.590
每一次重启服务器

45:13.590 --> 45:14.890
因为我们改动代码很频繁

45:14.890 --> 45:15.190
对吧

45:15.190 --> 45:15.990
每一次改动代码

45:15.990 --> 45:17.790
一保存是要重启服务器

45:17.790 --> 45:19.690
重启服务器这个Iv是不不一样了

45:19.690 --> 45:20.390
Iv不一样

45:20.390 --> 45:21.890
之前加密过后的token

45:21.890 --> 45:23.190
是不是现在就无销了

45:23.190 --> 45:24.190
Iv不一样了

45:24.190 --> 45:24.990
就解不开了

45:24.990 --> 45:25.690
就无销了

45:25.690 --> 45:25.990
所以说呢

45:25.990 --> 45:27.390
他又会遇到这样的问题

45:27.390 --> 45:29.390
刚才把Iv也固定吧

45:29.390 --> 45:29.890
我们这里呢

45:29.890 --> 45:37.300
把这个写一下

45:37.300 --> 45:38.100
加一个字幕出来

45:39.900 --> 45:41.100
Iv也固定

45:41.100 --> 45:41.500
行了

45:41.500 --> 45:41.900
那现在呢

45:41.900 --> 45:45.800
我们这边去掉

45:45.800 --> 45:46.600
回到这个

45:46.600 --> 45:48.300
就是我们的路由这边API

45:48.300 --> 45:49.700
首先是我们这里呢

45:49.700 --> 45:50.500
要进行加密

45:50.500 --> 45:52.100
对这个Vidio手动加密

45:52.100 --> 45:53.100
是不是导入这个

45:53.100 --> 45:54.700
导入我们自己写的户

45:54.700 --> 45:57.100
叫做Cryptor

45:57.100 --> 46:00.740
Require

46:00.740 --> 46:02.240
导入上级目录的

46:02.240 --> 46:05.840
上级目录的UTO下面的Crypt

46:05.840 --> 46:06.240
好

46:06.240 --> 46:06.840
这个里边

46:06.840 --> 46:09.440
他提供了一个方法

46:09.440 --> 46:11.140
就是Incrypt

46:11.140 --> 46:12.040
把Vidio放进去

46:12.040 --> 46:15.810
是不是加密

46:15.810 --> 46:16.910
重新干复职

46:16.910 --> 46:17.810
那么加密过后呢

46:17.810 --> 46:20.010
我再给他发送到token里边

46:20.010 --> 46:20.310
好

46:20.310 --> 46:21.310
现在那么这个header里边

46:21.310 --> 46:22.510
是不是也加密过后的

46:22.510 --> 46:23.510
再让我们来看一下

46:23.510 --> 46:25.010
登录

46:26.010 --> 46:27.710
这里爆错了

46:27.710 --> 46:29.010
他说什么呢

46:29.010 --> 46:31.340
重新

46:31.340 --> 46:32.540
重新来一次

46:32.540 --> 46:34.340
新的

46:34.340 --> 46:35.040
这里爆错了

46:35.040 --> 46:36.740
但是这里没显示

46:36.740 --> 46:38.840
data arguments must be type string

46:38.840 --> 46:42.840
or an instance of buffer

46:42.840 --> 46:45.140
type array

46:45.140 --> 46:47.440
data arguments

46:47.440 --> 46:48.240
它在哪里

46:48.240 --> 46:50.840
我在加密的时候爆错的

46:50.840 --> 46:54.840
加密的时候是secrets IV

46:55.040 --> 46:57.340
这两个都没问题

46:57.340 --> 46:59.740
我加密这个字幕圈

46:59.740 --> 47:00.940
我加密的字幕圈

47:00.940 --> 47:01.840
应该他这里

47:01.840 --> 47:03.540
我这里是写的是一个数字

47:03.540 --> 47:04.240
对吧

47:04.240 --> 47:07.840
把它转换成tooth string

47:07.840 --> 47:09.640
再先试一下

47:09.640 --> 47:09.840
好

47:09.840 --> 47:10.340
其实没问题了

47:10.340 --> 47:10.840
对吧

47:10.840 --> 47:12.140
然后那么看一下header是

47:12.140 --> 47:12.840
你看他返回的

47:12.840 --> 47:14.240
就是authorization

47:14.240 --> 47:16.340
是不是这个加密过后的

47:16.340 --> 47:16.840
然后呢

47:16.840 --> 47:19.040
我们再看一下他的cookie

47:19.040 --> 47:20.040
我们得到的cookie

47:20.040 --> 47:21.340
是不是加密过后的

47:21.340 --> 47:22.240
对不对

47:22.240 --> 47:22.440
好

47:22.440 --> 47:23.640
那么在解密的时候

47:23.640 --> 47:24.340
是不是一样的

47:24.340 --> 47:25.140
在解密的时候

47:25.140 --> 47:26.640
我们是不是手动处理

47:26.640 --> 47:27.840
也又来

47:27.840 --> 47:28.640
我们这里导入

47:31.440 --> 47:35.950
crepter

47:35.950 --> 47:36.950
一个登录

47:36.950 --> 47:38.150
你要把它做好的话

47:38.150 --> 47:41.520
是真不简单的

47:41.520 --> 47:42.720
你技术学到越久

47:42.720 --> 47:43.920
你越对技术抱有

47:43.920 --> 47:46.120
强烈的进位之心

47:46.120 --> 47:47.520
那么这里进解密

47:47.520 --> 47:48.020
那么同样的

47:48.020 --> 47:48.920
我们这里首先看一下

47:48.920 --> 47:49.820
有没有token

47:49.820 --> 47:50.420
没有

47:50.420 --> 47:51.520
如果说cookie里面没有

47:51.520 --> 47:52.920
我们从authorization里面读

47:52.920 --> 47:53.920
如果说都没有的话

47:53.920 --> 47:54.720
就没有认证

47:54.720 --> 47:54.920
对吧

47:54.920 --> 47:57.320
没有认证就认证会通过

47:57.320 --> 47:58.720
那么如果说有认证的话

47:58.920 --> 48:00.420
我们是不是把这个token

48:00.420 --> 48:02.020
把这个token放到哪呢

48:02.020 --> 48:03.320
是不是放到那个就是

48:03.320 --> 48:04.320
把它解密出来

48:04.320 --> 48:04.720
对不对

48:04.720 --> 48:05.920
crepter

48:05.920 --> 48:07.020
dcreate

48:07.020 --> 48:08.520
就是crepter

48:08.520 --> 48:09.520
这个是d

48:12.420 --> 48:13.220
为什么

48:13.220 --> 48:13.920
crepter

48:13.920 --> 48:17.710
dcreate

48:17.710 --> 48:18.810
然后token传进去

48:18.810 --> 48:20.210
是不是它进行解密

48:20.210 --> 48:20.710
解密过后

48:20.710 --> 48:22.310
是不是得到一个用户的id

48:22.310 --> 48:22.910
对不对

48:22.910 --> 48:24.210
userid

48:24.210 --> 48:25.410
获取用户id

48:25.410 --> 48:26.310
我们甚至可以

48:26.310 --> 48:28.210
甚至可以把这个用户id

48:28.210 --> 48:29.010
保存到哪呢

48:29.010 --> 48:30.610
保存瑞可对象里面

48:30.610 --> 48:32.410
然后交给后续处理

48:32.410 --> 48:33.910
我们把这个userid输出

48:35.910 --> 48:37.110
真正通过userid

48:37.110 --> 48:37.510
然后呢

48:37.510 --> 48:38.510
我们这里把userid

48:38.510 --> 48:40.410
保存到那个瑞可对象里面

48:40.410 --> 48:41.110
userid

48:41.110 --> 48:42.110
为什么保存到这呢

48:42.110 --> 48:43.310
这样子后续的处理

48:43.310 --> 48:45.210
是不是我要知道谁在操作这个接口

48:45.210 --> 48:46.910
是不是可以轻松的通过瑞可

48:46.910 --> 48:48.710
点userid就可以获取到了

48:48.710 --> 48:49.210
对不对

48:49.210 --> 48:49.810
后续的寝求

48:49.810 --> 48:51.710
就是可以通过这个东西获取到了

48:51.710 --> 48:52.210
比方的后续

48:52.210 --> 48:53.210
我们添加一个学生

48:53.210 --> 48:54.910
我要知道是哪个管理人在添加呢

48:54.910 --> 48:56.610
我就可以把这个通过这个瑞可点

48:56.610 --> 48:57.710
userid就可以获取到了

48:57.710 --> 49:01.010
然后再往后边移交

49:01.010 --> 49:01.210
好

49:01.210 --> 49:01.910
接下来我们再看

49:03.710 --> 49:07.210
现在我们分业获取学生

49:07.210 --> 49:08.310
分业获取学生能获取了

49:08.310 --> 49:08.710
对吧

49:08.710 --> 49:10.310
那么我们这里可以打印出来6

49:10.310 --> 49:10.510
对不对

49:10.510 --> 49:11.410
是不是把解密开了

49:11.410 --> 49:12.210
那么后续的寝求

49:12.210 --> 49:13.710
是不是可以通过这个东西来获取

49:13.710 --> 49:14.810
到底是谁在操作学生

49:14.810 --> 49:16.210
当然你需要的话就获取

49:16.210 --> 49:17.310
不需要的话就不获取

49:17.310 --> 49:18.710
当然你这里还可以进一步的

49:18.710 --> 49:19.610
通过这个userid

49:19.610 --> 49:21.310
是不是把整个user对象从数据库里面

49:21.310 --> 49:21.810
取出来

49:21.810 --> 49:22.710
都可以

49:22.710 --> 49:23.710
都可以

49:23.710 --> 49:23.810
好

49:23.810 --> 49:26.010
这就是这个

49:26.010 --> 49:28.010
我们登录的一个正常的流程

49:28.010 --> 49:30.410
很多时候你使用到这里的话

49:30.410 --> 49:33.310
就已经非常不错了

49:33.310 --> 49:35.310
你把登录能够搞定到这一块

49:35.310 --> 49:37.310
其实这个事情一般是后端做的

49:37.310 --> 49:38.410
我们前端只需要知道

49:38.410 --> 49:40.010
这个cookie的原理是什么

49:40.010 --> 49:41.510
怎么样跟辅助交互

49:41.510 --> 49:42.610
那么通过这个讲解

49:42.610 --> 49:44.110
通过我们对这个后端的讲解

49:44.110 --> 49:47.010
你就知道后端是怎么来处理一个cookie的

49:47.010 --> 49:48.410
那么其实这里还有一个问题

49:48.410 --> 49:49.010
还有一个问题

49:49.010 --> 49:49.910
我们要下一个讲

49:49.910 --> 49:52.110
讲jwt的解决

49:52.110 --> 49:52.810
什么问题

49:52.810 --> 49:54.110
我们下一个再说吧

49:54.110 --> 49:55.310
这一刻我们就讲到这

49:55.310 --> 49:57.810
这一刻其实就已经在一些中小型网站里面

49:57.810 --> 49:58.810
就已经完全够用了

49:58.810 --> 49:59.310
你写到这

50:00.610 --> 50:02.810
这是关于cookie的这么一个案例

50:02.810 --> 50:03.610
我们把个登录

50:03.610 --> 50:04.810
是不是就做完了

50:04.810 --> 50:05.810
对不对

50:05.810 --> 50:07.010
这是这一块东西

