WEBVTT

00:00.180 --> 00:04.180
好 咱们来看一下这个文件上传的这么一个场景

00:05.180 --> 00:10.680
实际上咱们以后啊 你到公司里边去用漏的介石开发服务器的话

00:11.180 --> 00:13.180
你不太会去建什么数据库

00:13.180 --> 00:16.180
就算要建的话都非常非常简单的一个数据库

00:16.180 --> 00:18.180
你可能会做一些日子记录

00:18.180 --> 00:21.180
你可能会处理文件上传

00:21.180 --> 00:23.180
可能后端的服务器它不管了

00:23.180 --> 00:26.180
然后后端的服务器我们之前做数据库是不是做了一个什么

00:26.180 --> 00:27.180
还有一个啥

00:27.180 --> 00:31.180
记着我有一个学生的那个表

00:31.180 --> 00:34.180
对吧 学生表里边好像没有

00:34.180 --> 00:36.180
学生表里边有个头像 学生的照片

00:36.180 --> 00:40.180
那么照片如果说要存照片的话一般存啥

00:40.180 --> 00:42.180
是不是存那个是路径对吧

00:42.180 --> 00:46.180
这个表 书籍表不是有一个书籍封面吗

00:46.180 --> 00:48.180
他存的是不是二进制的图片数据

00:48.180 --> 00:50.180
不是的 他存的是什么呢

00:50.180 --> 00:52.180
存的是一个图片路径 是一个字不算

00:52.180 --> 00:54.180
那么这个图片路径哪来了

00:54.180 --> 00:56.180
如果说你用别人的网站的图片的话

00:56.180 --> 00:58.180
当然就是一个别人网站的图片路径

00:58.180 --> 01:00.180
但是如果说你自己的网站

01:00.180 --> 01:02.180
让用户上传一个图片的话

01:02.180 --> 01:04.180
那路径肯定是你自己的 对吧

01:04.180 --> 01:05.180
所以我们就设立到一个问题

01:05.180 --> 01:06.180
怎么来得到这个图片路径

01:06.180 --> 01:08.180
那么这就设立到图片上传了

01:08.180 --> 01:12.180
用户把他自己本地的图片上传到了服务器

01:12.180 --> 01:14.180
我们也保存到了服务器

01:14.180 --> 01:15.180
服务器生存一个路径

01:15.180 --> 01:17.180
给他响应到客户端

01:17.180 --> 01:19.180
就是图片上传

01:19.180 --> 01:22.180
图片上传的可能你们将来

01:22.180 --> 01:23.180
这个说不准

01:23.180 --> 01:24.180
可能你们将来到公司里面去

01:24.180 --> 01:25.180
可能会让你来做

01:25.180 --> 01:27.180
可能会让钱专来处理

01:27.180 --> 01:28.180
因为这个毕竟是跟用户之间

01:28.180 --> 01:30.180
直接打交道的

01:30.180 --> 01:32.180
所以说可能会让钱专处理

01:32.180 --> 01:33.180
所以我们学一学

01:33.180 --> 01:34.180
这个图片上传

01:34.180 --> 01:35.180
图片上传呢

01:35.180 --> 01:37.180
它实际上你要了解两个东西

01:37.180 --> 01:39.180
一个是原理部分

01:39.180 --> 01:40.180
它到底是怎么

01:40.180 --> 01:42.180
一个文件不光是图片

01:42.180 --> 01:43.180
包括什么一个压缩包

01:43.180 --> 01:45.180
或者是一个文本文件

01:45.180 --> 01:46.180
所以随便什么文件

01:46.180 --> 01:48.180
我们平时唱传最多的就是图片

01:48.180 --> 01:52.180
一个文件它到底是怎么上传的

01:52.180 --> 01:54.180
这个地方要搞清楚

01:54.180 --> 01:56.180
那么到底是怎么上传的呢

01:56.180 --> 01:58.180
它是这样子

01:58.180 --> 02:00.180
首先你要理解原理

02:00.180 --> 02:02.180
其实咱们学习知识你要搞清楚

02:02.180 --> 02:04.180
我们学习技术说来说去

02:04.180 --> 02:05.180
就这么几个东西

02:05.180 --> 02:08.180
一个是基本知识

02:08.180 --> 02:09.180
什么语法

02:09.180 --> 02:10.180
这些东西你得学会

02:10.180 --> 02:11.180
这些东西都比较简单

02:11.180 --> 02:13.180
然后第二部分就是原理

02:13.180 --> 02:15.180
原理我们是不是讲了很多

02:15.180 --> 02:16.180
对不对

02:16.180 --> 02:17.180
每一个地方我基本上

02:17.180 --> 02:18.180
把原理告诉大家了

02:18.180 --> 02:20.180
原理是非常非常重要的

02:20.180 --> 02:22.180
学习到基本知识和原理之后

02:22.180 --> 02:25.180
你需要一些程序思维

02:25.180 --> 02:27.180
这个东西不太容易

02:27.180 --> 02:28.180
需要长期的训练

02:28.180 --> 02:30.180
很多年很多年的训练

02:30.180 --> 02:33.180
而且它是一个逐步低进的过程

02:33.180 --> 02:35.180
它不是说有和没有

02:35.180 --> 02:36.180
那这个太绝对了

02:36.180 --> 02:37.180
对吧

02:37.180 --> 02:38.180
你们都可以有

02:38.180 --> 02:39.180
都会有的

02:39.180 --> 02:40.180
你们现在也有

02:40.180 --> 02:41.180
只不过你们可能比较弱

02:41.180 --> 02:44.180
这是慢慢的长期的训练的过程

02:44.180 --> 02:46.180
它不是一处而就的

02:46.180 --> 02:48.180
有了这三个东西

02:48.180 --> 02:49.180
我们前端的学习

02:49.180 --> 02:51.180
再加上一个什么呢

02:51.180 --> 02:52.180
再加上一个官网

02:52.180 --> 02:55.180
就可以搞定几乎所有的事情了

02:55.180 --> 02:57.180
因为你看有些同学觉得

02:57.180 --> 02:58.180
看官网看不懂

02:58.180 --> 03:00.180
可能是这两个出了问题

03:00.180 --> 03:03.180
原理和程序思维可能出了问题

03:03.180 --> 03:04.180
就是它给

03:04.180 --> 03:05.180
官网的人

03:05.180 --> 03:06.180
他给你讲的

03:06.180 --> 03:07.180
他肯定不是说

03:07.180 --> 03:09.180
像一些什么百度之道

03:09.180 --> 03:11.180
百度经验这种很傻的

03:11.180 --> 03:12.180
告诉你

03:12.180 --> 03:13.180
第一步做什么

03:13.180 --> 03:14.180
第二步做什么

03:14.180 --> 03:15.180
打开一个什么

03:15.180 --> 03:16.180
然后点击某一个东西

03:16.180 --> 03:17.180
这个太傻了

03:17.180 --> 03:19.180
有些同学就喜欢看这个

03:19.180 --> 03:20.180
为什么呢

03:20.180 --> 03:23.180
因为它没有程序思维和原理的知识

03:23.180 --> 03:24.180
你只要具备了

03:24.180 --> 03:26.180
原理和程序思维的知识

03:26.180 --> 03:27.180
官网还会告诉你

03:27.180 --> 03:28.180
我这个东西

03:28.180 --> 03:30.180
我能够给你提供什么

03:30.180 --> 03:32.180
至于你用我这个东西

03:32.180 --> 03:33.180
哪去做什么

03:33.180 --> 03:34.180
我不管你

03:34.180 --> 03:36.180
你随便发挥你的想象

03:36.180 --> 03:37.180
我给你提供了一些能力

03:37.180 --> 03:38.180
你告诉你

03:38.180 --> 03:40.180
怎么去使用这个能力

03:40.180 --> 03:41.180
所以说

03:41.180 --> 03:42.180
你把前面三个东西

03:42.180 --> 03:43.180
具备了过后

03:43.180 --> 03:44.180
再看官网

03:44.180 --> 03:46.180
又非常简单了

03:46.180 --> 03:47.180
我们这个前端

03:47.180 --> 03:48.180
我觉得吧

03:48.180 --> 03:50.180
为什么我不这么看书看官网

03:50.180 --> 03:51.180
因为官网

03:51.180 --> 03:52.180
现在前端更新的速度很快

03:52.180 --> 03:54.180
输进了可能比较之后

03:54.180 --> 03:57.180
而且基本上前端官网

03:57.180 --> 04:00.180
能够解决的99.9%的问题了

04:00.180 --> 04:01.180
如果说你看官网

04:01.180 --> 04:02.180
解决不了问题

04:02.180 --> 04:03.180
那一定是看得不够仔细

04:03.180 --> 04:05.180
再仔细看一看

04:05.180 --> 04:07.180
如果说你看了几遍了

04:07.180 --> 04:08.180
被人解决的这个问题

04:08.180 --> 04:10.180
那你可能要去看他原码了

04:10.180 --> 04:11.180
可能官网里边

04:11.180 --> 04:12.180
一个需求太特殊了

04:12.180 --> 04:14.180
官网里边都没有说

04:14.180 --> 04:15.180
或者说根本就解决不了

04:15.180 --> 04:16.180
这个问题

04:16.180 --> 04:17.180
你可以在github上面

04:17.180 --> 04:19.180
去提交一个讨论

04:19.180 --> 04:20.180
讨论问一下

04:20.180 --> 04:21.180
这个官网到底能不能解决

04:21.180 --> 04:22.180
这个问题等等等等

04:22.180 --> 04:23.180
总之呢

04:23.180 --> 04:24.180
其实很多问题都可以通过

04:24.180 --> 04:26.180
这些看官网能够解决了

04:26.180 --> 04:27.180
但是前几条件

04:27.180 --> 04:28.180
你必须要有这些东西

04:28.180 --> 04:30.180
说回来

04:30.180 --> 04:33.180
我们这里还是先讲原理

04:33.180 --> 04:34.180
就是文件上

04:34.180 --> 04:36.180
他到底是一个怎么样的形式

04:36.180 --> 04:37.180
他其实就是一个

04:37.180 --> 04:39.180
跟ATTB协议相关的

04:39.180 --> 04:41.180
文件上传文的文件数据

04:41.180 --> 04:43.180
是不是也是一个数据

04:43.180 --> 04:44.180
他多大

04:44.180 --> 04:45.180
文件上传的数据比较大

04:45.180 --> 04:47.180
也是个二进之的

04:47.180 --> 04:48.180
文贯多大

04:48.180 --> 04:49.180
他肯定是一个数据

04:49.180 --> 04:50.180
对不对

04:50.180 --> 04:51.180
数据放哪呢

04:51.180 --> 04:52.180
应该放消息体里边

04:52.180 --> 04:53.180
对不对

04:53.180 --> 04:54.180
就是这么回事

04:54.180 --> 04:55.180
那么这个消息体里边的数据

04:55.180 --> 04:56.180
它是一个什么格式呢

04:56.180 --> 04:58.180
它肯定不能是阶层格式

04:58.180 --> 04:59.180
阶层格式能不能

04:59.180 --> 05:00.180
首先能不能

05:00.180 --> 05:01.180
从理论上来讲

05:01.180 --> 05:04.180
阶层格式能不能上传文件数据

05:04.180 --> 05:05.180
怎么不能

05:05.180 --> 05:06.180
肯定是可以的

05:06.180 --> 05:08.180
比方说你这样子

05:08.180 --> 05:11.180
只是我们通常没有这么做

05:11.180 --> 05:12.180
比方说你阶层格式

05:12.180 --> 05:13.180
阶层格式比方说

05:13.180 --> 05:15.180
我们的file data

05:15.180 --> 05:16.180
我们的文件数据

05:16.180 --> 05:17.180
是一个什么呢

05:17.180 --> 05:18.180
是一个buffer数据

05:18.180 --> 05:19.180
对吧

05:19.180 --> 05:20.180
二进之的buffer数据

05:20.180 --> 05:21.180
第一个位置

05:21.180 --> 05:22.180
比方说这样子

05:22.180 --> 05:23.180
是不是一个buffer数据

05:23.180 --> 05:24.180
很多很多

05:24.180 --> 05:25.180
很多很多

05:25.180 --> 05:26.180
是不是这样子

05:26.180 --> 05:27.180
对吧

05:27.180 --> 05:28.180
而且是一个十六进之的

05:28.180 --> 05:29.180
对不对

05:29.180 --> 05:31.180
是个buffer数据

05:31.180 --> 05:32.180
明儿的意思吧

05:32.180 --> 05:34.180
这不就是一个文件数据吗

05:34.180 --> 05:36.180
把它弄个buffer数据上传过去

05:36.180 --> 05:37.180
然后服端自行处理

05:37.180 --> 05:39.180
处理这个二进之数据

05:39.180 --> 05:40.180
只不过这种情况

05:40.180 --> 05:41.180
比较少一点

05:41.180 --> 05:42.180
我们更多的时候

05:42.180 --> 05:43.180
文件上传

05:43.180 --> 05:44.180
它是一种比较特殊的

05:44.180 --> 05:45.180
消息体格式

05:45.180 --> 05:47.180
但是不是一定的

05:47.180 --> 05:48.180
那么怎么来看呢

05:48.180 --> 05:50.180
我们给大家看一下

05:50.180 --> 05:51.180
这里呢

05:51.180 --> 05:52.180
我们比方说

05:52.180 --> 05:54.180
给百度上传一张图片

05:54.180 --> 05:56.180
我这里重新来一次吧

05:56.180 --> 05:58.180
刚才我测试了一下

05:58.180 --> 06:00.180
给百度上传一张图片

06:00.180 --> 06:01.180
我们用pose面

06:01.180 --> 06:02.180
选择pose请求

06:02.180 --> 06:04.180
因为我们请求消息体格比较多

06:04.180 --> 06:06.180
我们可以用pose请求

06:06.180 --> 06:07.180
首先我问大家

06:07.180 --> 06:08.180
理论上来讲

06:08.180 --> 06:10.180
get请求能不能上传图片

06:10.180 --> 06:12.180
理论上来讲

06:12.180 --> 06:15.180
怎么就不能呢

06:15.180 --> 06:17.180
get请求能不能有消息体

06:17.180 --> 06:18.180
还不是可以有

06:18.180 --> 06:19.180
既然你可以有消息体

06:19.180 --> 06:20.180
可以附带很多数据

06:20.180 --> 06:21.180
你可以上传

06:21.180 --> 06:22.180
只是通常情况下

06:22.180 --> 06:23.180
服务器不认你

06:23.180 --> 06:24.180
你可以把图片扔过去

06:24.180 --> 06:25.180
服务器不认你

06:25.180 --> 06:26.180
比方说像这里

06:26.180 --> 06:29.180
我用pose请求上传图片

06:29.180 --> 06:30.180
上传到百度

06:30.180 --> 06:31.180
百度认不认

06:31.180 --> 06:32.180
肯定不认

06:32.180 --> 06:33.180
但是图片有没有发生过去

06:33.180 --> 06:35.180
图片的数据有没有发生过去

06:35.180 --> 06:36.180
肯定发生过去了

06:36.180 --> 06:37.180
它认不认是一回事

06:37.180 --> 06:38.180
我发布发誓一回事

06:38.180 --> 06:39.180
来吧

06:39.180 --> 06:41.180
我们给百度发一个图片

06:41.180 --> 06:42.180
肯定不会甩我的

06:42.180 --> 06:43.180
我们消息体的格式

06:43.180 --> 06:45.180
那就选择formdata

06:45.180 --> 06:48.180
就不能是这种格式了

06:48.180 --> 06:50.180
也不能是我们的阶层格式

06:50.180 --> 06:51.180
阶层格式也不行了

06:51.180 --> 06:53.180
当然这两个原理性上是可以的

06:53.180 --> 06:56.180
只是很多服务器它不认

06:56.180 --> 06:57.180
现在formdata里边

06:57.180 --> 06:58.180
我们有选择一些键子队

06:58.180 --> 06:59.180
比方说我们给它

06:59.180 --> 07:02.180
还一样的A等于1 B等于2

07:02.180 --> 07:04.180
我们来直接发送一下

07:04.180 --> 07:05.180
我们没有图片

07:05.180 --> 07:06.180
没有任何文件

07:06.180 --> 07:08.180
发送一个请求到百度

07:08.180 --> 07:09.180
百度甩不甩我

07:09.180 --> 07:10.180
百度肯定不会甩我

07:10.180 --> 07:11.180
页面不存在

07:11.180 --> 07:13.180
总之它给我返回一个东西

07:13.180 --> 07:14.180
无所谓吧

07:14.180 --> 07:15.180
我们来看一下

07:15.180 --> 07:17.180
我们请求的内容

07:17.180 --> 07:18.180
关注请求

07:18.180 --> 07:21.180
我们这里看一下ATTP

07:21.180 --> 07:22.180
请求的内容

07:22.180 --> 07:23.180
我们看到它发送一些Cookie

07:23.180 --> 07:24.180
因为我这里

07:24.180 --> 07:25.180
百度保存了一些Cookie

07:25.180 --> 07:26.180
无所谓的

07:26.180 --> 07:27.180
你扔在这吧

07:27.180 --> 07:30.180
我这个东西Cookie是不暴露了

07:30.180 --> 07:31.180
有一点吓人啊

07:31.180 --> 07:33.180
兄弟

07:33.180 --> 07:34.180
没事

07:34.180 --> 07:37.180
这个里面我没有做过任何登录

07:37.180 --> 07:39.180
然后这边

07:39.180 --> 07:41.180
这边我们可以看到

07:41.180 --> 07:44.180
它这个请求消息头里边

07:44.180 --> 07:46.180
请求消息头里边

07:46.180 --> 07:48.180
它这里没有换行

07:48.180 --> 07:49.180
这个换行

07:49.180 --> 07:50.180
content type

07:50.180 --> 07:53.180
所以一个消息的格式

07:53.180 --> 07:54.180
对吧

07:54.180 --> 07:55.180
请求消息的格式

07:55.180 --> 07:56.180
它什么格式

07:56.180 --> 07:57.180
它不是接生

07:57.180 --> 07:58.180
也不是

07:58.180 --> 08:00.180
3W X3W form data

08:00.180 --> 08:01.180
URL encoded

08:01.180 --> 08:02.180
对吧

08:02.180 --> 08:03.180
也不是这个

08:03.180 --> 08:06.180
多部分的form data

08:06.180 --> 08:07.180
它是这么一种消息格式

08:07.180 --> 08:10.180
这个东西叫做MEI M1类型

08:10.180 --> 08:12.180
一种标准的互联网传输的

08:12.180 --> 08:13.180
描述类型的东西

08:13.180 --> 08:14.180
那么后边

08:14.180 --> 08:15.180
我给它

08:15.180 --> 08:16.180
这个东西没法放大了

08:16.180 --> 08:18.180
它其实这里没有换行

08:18.180 --> 08:21.180
这里实际上是没有换行的

08:21.180 --> 08:22.180
实际上是没有换行的

08:22.180 --> 08:23.180
它这里写不下了

08:23.180 --> 08:24.180
它给你换个行

08:24.180 --> 08:25.180
实际上是一行的

08:25.180 --> 08:26.180
它boundary

08:26.180 --> 08:27.180
boundary是什么呢

08:27.180 --> 08:29.180
就是边界

08:29.180 --> 08:31.180
分界线

08:31.180 --> 08:32.180
分界线

08:32.180 --> 08:34.180
它会给你随机生成一个制服串

08:34.180 --> 08:36.180
给你做一个分界线

08:36.180 --> 08:38.180
那么这个分界线前面有四个横杠

08:38.180 --> 08:39.180
无所谓

08:39.180 --> 08:40.180
总之这个制服串就是一个分界线

08:40.180 --> 08:41.180
它分割了什么呢

08:41.180 --> 08:43.180
分割了表单里面的每一个数据

08:43.180 --> 08:44.180
好

08:44.180 --> 08:45.180
接下来是消息体

08:45.180 --> 08:46.180
消息体里面

08:46.180 --> 08:49.180
它就会按照这个content type里面

08:49.180 --> 08:50.180
因为它指定的是这种格式

08:50.180 --> 08:51.180
所以说消息体

08:51.180 --> 08:53.180
它是用这种格式来构建的

08:53.180 --> 08:54.180
然后它会

08:54.180 --> 08:55.180
根据这个分界

08:55.180 --> 08:56.180
来分割每一个表单数据

08:56.180 --> 08:57.180
你看

08:57.180 --> 08:58.180
第一个分界

08:58.180 --> 08:59.180
那么第一个表单数据

08:59.180 --> 09:00.180
form data

09:00.180 --> 09:01.180
表单数据

09:01.180 --> 09:03.180
name 表单的键是什么呢

09:03.180 --> 09:04.180
键是对嘛

09:04.180 --> 09:05.180
键是a

09:05.180 --> 09:06.180
值呢是1

09:06.180 --> 09:07.180
换一行

09:07.180 --> 09:08.180
然后写个1

09:08.180 --> 09:09.180
第一个表单数据完了

09:09.180 --> 09:10.180
好

09:10.180 --> 09:11.180
第二个表单数据分割

09:11.180 --> 09:12.180
然后键是b

09:12.180 --> 09:13.180
值呢是2

09:13.180 --> 09:14.180
完了

09:14.180 --> 09:15.180
对吧

09:15.180 --> 09:16.180
后面就没东西了

09:16.180 --> 09:17.180
没东西就结束了

09:17.180 --> 09:19.180
这都是整个表单数据

09:19.180 --> 09:20.180
它是这么一种格式

09:20.180 --> 09:21.180
它既不是接生

09:21.180 --> 09:23.180
也不是我们之前传统的

09:23.180 --> 09:24.180
Url encoded

09:24.180 --> 09:26.180
它是这么一种格式

09:26.180 --> 09:27.180
那么这种格式

09:27.180 --> 09:29.180
它比较适合传输大数据

09:29.180 --> 09:30.180
比方说

09:31.180 --> 09:32.180
这里我们可以选择

09:32.180 --> 09:33.180
5

09:33.180 --> 09:34.180
文件的还是有个件

09:34.180 --> 09:35.180
还是一个建筑位吧

09:35.180 --> 09:36.180
对吧

09:36.180 --> 09:38.180
只不过文件的值呢

09:38.180 --> 09:39.180
值是什么呢

09:39.180 --> 09:41.180
值就是一个文件的

09:41.180 --> 09:43.180
恶金值数据

09:43.180 --> 09:44.180
所以说它建

09:44.180 --> 09:45.180
建我们随便给它一个

09:45.180 --> 09:46.180
比方说一个emg

09:46.180 --> 09:48.180
随便给一个

09:48.180 --> 09:49.180
这里我们选择一个文件

09:49.180 --> 09:50.180
我们这里随便选一个吧

09:50.180 --> 09:51.180
比方说选这个

09:51.180 --> 09:53.180
这是我写的一个图

09:53.180 --> 09:54.180
现在发生一个请求

09:54.180 --> 09:55.180
那么这就把文件

09:55.180 --> 09:56.180
上传到百度服务器了

09:56.180 --> 09:57.180
百度服务器

09:57.180 --> 09:58.180
它只是不认的

09:58.180 --> 09:59.180
平时说你是谁

09:59.180 --> 10:00.180
你给我上传个文件

10:00.180 --> 10:02.180
但是请求已经到了百度了

10:02.180 --> 10:03.180
这毫无疑问

10:03.180 --> 10:04.180
我们来看一下code

10:05.180 --> 10:06.180
我们再看

10:06.180 --> 10:07.180
这里content type

10:07.180 --> 10:08.180
还是在这

10:08.180 --> 10:09.180
它给你生成的一个

10:09.180 --> 10:10.180
就是一个分割服务

10:10.180 --> 10:11.180
然后那里看

10:11.180 --> 10:13.180
除了a等于eb等于2之外

10:13.180 --> 10:14.180
下面是不是多了一个

10:14.180 --> 10:15.180
件是什么

10:15.180 --> 10:16.180
件是emg

10:16.180 --> 10:17.180
对吧

10:17.180 --> 10:19.180
后面跟了一个叫file name

10:19.180 --> 10:21.180
就是我们本地的文件名字

10:21.180 --> 10:23.180
本地客户端这边

10:23.180 --> 10:24.180
就是我这边的文件名字

10:24.180 --> 10:25.180
是这个

10:25.180 --> 10:27.180
是不是这个

10:27.180 --> 10:29.180
然后我们它的类型

10:29.180 --> 10:30.180
还给你写了

10:30.180 --> 10:31.180
这一部分的类型

10:31.180 --> 10:32.180
它不是一个普通类型

10:32.180 --> 10:34.180
它是一个emg

10:34.180 --> 10:35.180
jpeg

10:35.180 --> 10:36.180
它是一个jpeg的图片

10:36.180 --> 10:37.180
那么这里边

10:37.180 --> 10:38.180
它就没给你显示了

10:38.180 --> 10:39.180
这里边是二净之数据

10:39.180 --> 10:40.180
很大的

10:40.180 --> 10:41.180
还不给你显示了

10:41.180 --> 10:42.180
没意思吧

10:42.180 --> 10:44.180
为什么说二净之数据很大呢

10:44.180 --> 10:46.180
为什么说文件数据很大呢

10:46.180 --> 10:47.180
一个图片

10:47.180 --> 10:48.180
至少也得一两kb

10:48.180 --> 10:49.180
你知道一两kb

10:49.180 --> 10:50.180
可以装多少个字符

10:50.180 --> 10:51.180
你想一想

10:51.180 --> 10:54.180
一个kb等于1024字节

10:54.180 --> 10:55.180
一个字节

10:55.180 --> 10:56.180
一个英文字符

10:56.180 --> 10:57.180
然后一个kb

10:57.180 --> 10:59.180
就是相当于1024个字节了

10:59.180 --> 11:01.180
就是说文件数据很大的

11:01.180 --> 11:02.180
对不对

11:02.180 --> 11:03.180
那么它把这个

11:03.180 --> 11:04.180
二净之数据给放这

11:04.180 --> 11:05.180
然后发送到服务器

11:05.180 --> 11:06.180
只是这里边

11:06.180 --> 11:07.180
我给你显示出来了

11:07.180 --> 11:08.180
但是数据在不在这

11:08.180 --> 11:09.180
在这

11:09.180 --> 11:10.180
对吧

11:10.180 --> 11:11.180
然后结束

11:11.180 --> 11:12.180
就是这样的数据

11:12.180 --> 11:13.180
那么文件到服务器

11:13.180 --> 11:14.180
就是这么一种格式

11:14.180 --> 11:15.180
那么能不能上上多个图片呢

11:15.180 --> 11:16.180
多个图片也可以

11:16.180 --> 11:18.180
比方说我们再来一个

11:19.180 --> 11:20.180
emg2

11:20.180 --> 11:21.180
再来一个图片

11:21.180 --> 11:23.180
这里选择一下

11:23.180 --> 11:24.180
再来一个图片

11:25.180 --> 11:26.180
吃瓜

11:26.180 --> 11:27.180
这是个gif

11:27.180 --> 11:29.180
再来一个emg

11:29.180 --> 11:31.180
我没图片

11:31.180 --> 11:32.180
没图片

11:32.180 --> 11:33.180
我随便几个图

11:33.180 --> 11:35.180
随便几个图

11:35.180 --> 11:37.180
然后下转

11:37.180 --> 11:38.180
出转

11:38.180 --> 11:39.180
来吧

11:40.180 --> 11:43.180
这边我再给哪个图片

11:43.180 --> 11:46.260
点击放

11:46.260 --> 11:48.260
再来一个这个

11:48.260 --> 11:50.260
发送

11:51.260 --> 11:52.260
得到响应了

11:52.260 --> 11:54.260
响应了肯定是不甩过的

11:54.260 --> 11:55.260
我们看一下

11:55.260 --> 11:56.260
你看是不是三张图片了

11:56.260 --> 11:57.260
emg图片数据

11:57.260 --> 11:58.260
emg2

11:58.260 --> 11:59.260
本地的图片

11:59.260 --> 12:00.260
图片的名称

12:00.260 --> 12:02.260
本地的图片名称有什么用呢

12:02.260 --> 12:03.260
服务器爱用就用

12:03.260 --> 12:04.260
不用就拉到

12:04.260 --> 12:05.260
总之把我把名称

12:05.260 --> 12:06.260
给你发送到服务器

12:06.260 --> 12:07.260
就是说我客户端

12:07.260 --> 12:08.260
这边是这个名称

12:08.260 --> 12:09.260
服务器那边

12:09.260 --> 12:10.260
一般来说

12:10.260 --> 12:11.260
服务器那边

12:11.260 --> 12:12.260
如果说他要处理的话

12:12.260 --> 12:14.260
一般会保存图片到服务器

12:14.260 --> 12:15.260
对吧

12:15.260 --> 12:16.260
服务器那边一般

12:16.260 --> 12:17.260
不会使用这个名称来保存的

12:17.260 --> 12:18.260
你想想为什么

12:19.260 --> 12:20.260
想想为什么服务器

12:20.260 --> 12:22.260
不会用这个名称来保存

12:22.260 --> 12:23.260
是不是这样子保存

12:23.260 --> 12:24.260
会重明

12:24.260 --> 12:25.260
比方说

12:26.260 --> 12:28.260
我们有个客户端一

12:28.260 --> 12:29.260
客户端一

12:29.260 --> 12:31.260
它里边有一张图片叫吃瓜

12:32.260 --> 12:33.260
叫吃瓜

12:35.260 --> 12:36.260
gif

12:36.260 --> 12:38.260
是不是上传到了服务器

12:41.260 --> 12:42.260
服务器保存了什么

12:42.260 --> 12:43.260
保存了

12:43.260 --> 12:44.260
如果说用这个名字的话

12:44.260 --> 12:45.260
它保存的结果是不是

12:45.260 --> 12:46.260
也是吃瓜

12:46.260 --> 12:47.260
gif

12:47.260 --> 12:48.260
应该一统一统的

12:48.260 --> 12:49.260
对吧

12:49.260 --> 12:50.260
然后那客户端二

12:50.260 --> 12:51.260
巧了

12:51.260 --> 12:53.260
它也有一个图片

12:53.260 --> 12:54.260
但是图片那种

12:54.260 --> 12:55.260
不一样的

12:55.260 --> 12:57.260
它的名字也叫做吃瓜

12:57.260 --> 12:58.260
叫gif

12:58.260 --> 13:00.260
然后它也上传到了同一个服务器

13:00.260 --> 13:01.260
因为我们服务器要接受

13:01.260 --> 13:02.260
多个客户端请求的

13:02.260 --> 13:03.260
对吧

13:03.260 --> 13:04.260
也上传到了服务器

13:04.260 --> 13:05.260
那么服务器

13:05.260 --> 13:06.260
它一路把它保存为吃瓜

13:06.260 --> 13:07.260
是不是把之前的图片

13:07.260 --> 13:08.260
就覆盖掉了

13:08.260 --> 13:09.260
那之前那个用户

13:09.260 --> 13:10.260
它吃瓜

13:10.260 --> 13:11.260
它就图片就变了

13:11.260 --> 13:12.260
那肯定是不行

13:12.260 --> 13:13.260
所以说服务器那一般

13:13.260 --> 13:15.260
会生成一个唯一的名字

13:15.260 --> 13:16.260
一个唯一的名字

13:16.260 --> 13:17.260
来保存图片

13:17.260 --> 13:18.260
它不会用一个原来的名字

13:18.260 --> 13:19.260
这个原来的名字

13:19.260 --> 13:21.260
只是给服务器做参考

13:21.260 --> 13:22.260
可能原来的名字

13:22.260 --> 13:23.260
给服务器参考一个什么

13:23.260 --> 13:25.260
参考它的后维名字

13:25.260 --> 13:26.260
其他都没啥了

13:26.260 --> 13:27.260
对不对

13:27.260 --> 13:29.260
来看这是第二张图片

13:29.260 --> 13:30.260
第三张图片

13:30.260 --> 13:31.260
对不对

13:31.260 --> 13:32.260
就是这种格式

13:32.260 --> 13:33.260
给服务器发过去了

13:33.260 --> 13:34.260
那么至于服务器怎么处理

13:34.260 --> 13:35.260
客户端肯定不管了

13:35.260 --> 13:36.260
服务器你爱怎么处理

13:36.260 --> 13:37.260
怎么处理

13:37.260 --> 13:38.260
总之你处理完了过后

13:38.260 --> 13:40.260
麻烦你告诉我一个图片路径

13:40.260 --> 13:41.260
就是你保存在哪儿了

13:41.260 --> 13:42.260
我到时候可以访问

13:42.260 --> 13:43.260
就这么个意思

13:43.260 --> 13:44.260
就是图片上传

13:44.260 --> 13:45.260
好

13:45.260 --> 13:46.260
那么它这里

13:46.260 --> 13:47.260
其实PoseMan

13:47.260 --> 13:48.260
给你提供了很多信息了

13:48.260 --> 13:49.260
他告诉你

13:49.260 --> 13:50.260
如果说你客户端

13:50.260 --> 13:52.260
这边要做图片上传的话

13:52.260 --> 13:54.260
要完成这个请求的话

13:54.260 --> 13:57.260
那么这是ATP原始的格式

13:57.260 --> 13:58.260
你用别的语言怎么来写

13:58.260 --> 13:59.260
C语言怎么写

13:59.260 --> 14:00.260
C下语怎么写

14:00.260 --> 14:01.260
它都告诉你了

14:01.260 --> 14:02.260
对吧

14:02.260 --> 14:03.260
包括我们的GS

14:03.260 --> 14:04.260
用廢棋API怎么写

14:04.260 --> 14:05.260
Gearware怎么写

14:05.260 --> 14:06.260
它都会告诉你

14:06.260 --> 14:07.260
不要说

14:07.260 --> 14:08.260
JavaScript怎么写

14:08.260 --> 14:09.260
JavaScript

14:09.260 --> 14:10.260
我难得看它那个玩意了

14:10.260 --> 14:11.260
我们直接在这边

14:11.260 --> 14:12.260
给大家做一下吧

14:12.260 --> 14:13.260
不要说我们来磨粒

14:13.260 --> 14:14.260
在一页面上来

14:14.260 --> 14:16.260
完成这个图片上传

14:16.260 --> 14:18.260
不要说我们这里一个音

14:19.260 --> 14:24.510
这边我们写

14:24.510 --> 14:25.510
我们有两种方式

14:25.510 --> 14:27.510
第一种方式是使用Foom表单

14:27.510 --> 14:29.510
是使用Foom表单的方式

14:29.510 --> 14:31.510
我们这里给它改个名字

14:31.510 --> 14:32.510
Foom

14:32.510 --> 14:34.510
Foom表单的方式

14:35.510 --> 14:37.510
IGC我们就写图片的

14:37.510 --> 14:38.510
我们上传的地址

14:38.510 --> 14:39.510
上传到哪儿呢

14:39.510 --> 14:40.510
我们这里写个接口吧

14:40.510 --> 14:41.510
我们先随便写个接口

14:41.510 --> 14:43.510
在API里面新建一个

14:43.510 --> 14:45.510
叫upload.js

14:45.510 --> 14:47.510
这里导出一个处理

14:47.510 --> 14:48.510
一个sports

14:48.510 --> 14:49.510
处理一下

14:49.510 --> 14:50.510
regress

14:53.510 --> 14:55.510
我们或者是

14:57.510 --> 14:58.510
用rotor吗

14:58.510 --> 14:59.510
还是可以用rotor

15:00.510 --> 15:01.510
express

15:02.510 --> 15:03.510
require

15:03.510 --> 15:04.510
express

15:06.510 --> 15:07.510
然后得到一个rotor

15:08.510 --> 15:09.510
express

15:12.660 --> 15:13.660
rotor

15:13.660 --> 15:15.660
然后是用rotorPost

15:15.660 --> 15:17.660
我们接受一个Post的请求

15:17.660 --> 15:18.660
然后来进行处理

15:18.660 --> 15:19.660
regress

15:19.660 --> 15:21.660
我这些先不处理吧

15:21.660 --> 15:22.660
我就给你直接用服务器

15:22.660 --> 15:23.660
想一个结果

15:23.660 --> 15:24.660
想一个

15:25.660 --> 15:28.660
服务器处理完成

15:28.660 --> 15:32.660
就是完成了图片的处理

15:32.660 --> 15:34.660
我们完成了

15:34.660 --> 15:35.660
然后给你想一个

15:35.660 --> 15:40.660
给你一个访问图片的路径

15:40.660 --> 15:41.660
我给你访问一个

15:41.660 --> 15:42.660
想一个访问图片的路径

15:42.660 --> 15:43.660
评借一个吧

15:43.660 --> 15:44.660
随便写

15:44.660 --> 15:45.660
就直接写实吧

15:45.660 --> 15:46.660
随便写一个

15:46.660 --> 15:47.660
下写一个

15:48.660 --> 15:49.660
通过什么访问呢

15:49.660 --> 15:50.660
通过upload

15:50.660 --> 15:52.660
这样子一个图片的名称

15:52.660 --> 15:53.660
点GPG

15:53.660 --> 15:54.660
告诉你一个访问的图片

15:54.660 --> 15:55.660
路径是这个

15:55.660 --> 15:56.660
我们就先随便写一个吧

15:56.660 --> 15:57.660
好

15:57.660 --> 15:58.660
那么写好这个路由过后

15:58.660 --> 16:00.660
我们在Init里面

16:00.660 --> 16:02.660
这里的加两个路由了

16:02.660 --> 16:03.660
我们再来一个

16:06.660 --> 16:07.660
upload

16:07.660 --> 16:08.660
访问这个地址的时候

16:08.660 --> 16:09.660
我们使用这个路由

16:09.660 --> 16:10.660
upload

16:10.660 --> 16:12.660
我们服务器搞定了

16:12.660 --> 16:13.660
对不对

16:13.660 --> 16:14.660
服务器搞定了

16:14.660 --> 16:15.660
那么我们到客户端

16:15.660 --> 16:16.660
我先把音线出来

16:16.660 --> 16:19.420
怎么

16:19.420 --> 16:20.420
宝错了

16:20.420 --> 16:21.420
再看一下

16:21.420 --> 16:22.420
start

16:23.420 --> 16:25.420
宝错了

16:25.420 --> 16:26.420
什么呢

16:26.420 --> 16:28.420
Rotor use

16:28.420 --> 16:30.420
这里没有导出

16:30.420 --> 16:31.420
对吧

16:35.420 --> 16:36.420
看一下

16:36.420 --> 16:37.420
现在应该没问题了

16:37.420 --> 16:38.420
宝错了

16:39.420 --> 16:40.420
没问题了

16:40.420 --> 16:41.420
到了这边

16:41.420 --> 16:42.420
那么这边

16:42.420 --> 16:43.420
我们这边

16:43.420 --> 16:44.420
客户端这边

16:44.420 --> 16:45.420
怎么去请求服务器呢

16:45.420 --> 16:46.420
我们就可以用

16:46.420 --> 16:47.420
最传统的模式

16:47.420 --> 16:48.420
就是用form表单

16:48.420 --> 16:49.420
这种模式

16:49.420 --> 16:50.420
现在前端已经很少用了

16:50.420 --> 16:51.420
我们开始看一下吧

16:51.420 --> 16:52.420
一个型就是我们请求地址

16:52.420 --> 16:53.420
请求地址写上

16:53.420 --> 16:55.420
写这个API loader

16:55.420 --> 16:56.420
对吧

16:56.420 --> 16:57.420
upload

16:57.420 --> 16:59.420
就是我们请求这个地址

16:59.420 --> 17:00.420
对不对

17:00.420 --> 17:01.420
然后Messor的

17:01.420 --> 17:02.420
肯定是post请求

17:02.420 --> 17:03.420
然后这个地方

17:03.420 --> 17:04.420
还有一个东西要写

17:04.420 --> 17:05.420
叫IncTab

17:05.420 --> 17:06.420
就是我们表单的

17:06.420 --> 17:09.420
就是我们整个请求的消息格式

17:09.420 --> 17:11.420
就不能用

17:11.420 --> 17:12.420
其他格式

17:12.420 --> 17:13.420
不能用这种格式

17:13.420 --> 17:14.420
用第二个

17:14.420 --> 17:15.420
multipods form data

17:15.420 --> 17:16.420
它会浏览器

17:16.420 --> 17:17.420
它会自动的帮助你

17:17.420 --> 17:19.420
勾件这个表单格式

17:19.420 --> 17:20.420
这个表单格式

17:20.420 --> 17:21.420
勾件起来还是挺麻烦的

17:21.420 --> 17:22.420
要用到二进字数据

17:22.420 --> 17:23.420
但是我们这里

17:23.420 --> 17:24.420
它会自动帮你勾件

17:24.420 --> 17:25.420
OK

17:25.420 --> 17:26.420
这就行了

17:26.420 --> 17:28.420
我们在这里边写上一些

17:28.420 --> 17:30.420
比方写上两个P元数吧

17:30.420 --> 17:31.420
一个是

17:31.420 --> 17:33.420
这个就是

17:33.420 --> 17:35.420
一个普通数据

17:35.420 --> 17:36.420
给它个n

17:36.420 --> 17:37.420
就a嘛

17:37.420 --> 17:40.420
然后再来一个是文件数据

17:40.420 --> 17:41.420
是不是file

17:41.420 --> 17:42.420
对不对

17:42.420 --> 17:46.940
比方说我们来个image

17:46.940 --> 17:47.940
就不要了

17:47.940 --> 17:48.940
对吧

17:48.940 --> 17:49.940
这是上传文件

17:49.940 --> 17:50.940
好 下面有个按钮

17:50.940 --> 17:51.940
提交

17:51.940 --> 17:53.940
就写完了

17:53.940 --> 17:55.940
现在我们来打开这个页面看一下

17:55.940 --> 17:57.940
我们怎么来访问这个页面

17:57.940 --> 17:58.940
我们可以使用

17:58.940 --> 18:00.940
localhost 5008

18:00.940 --> 18:01.940
不行

18:01.940 --> 18:02.940
用什么呢

18:02.940 --> 18:03.940
用fone

18:03.940 --> 18:05.940
所以访问到这个页面了

18:05.940 --> 18:07.940
好 访问到这个页面之后

18:07.940 --> 18:08.940
我们现在

18:08.940 --> 18:09.940
把这个就是

18:09.940 --> 18:10.940
第一个位置

18:10.940 --> 18:11.940
填个123

18:11.940 --> 18:12.940
好 第二个位置

18:12.940 --> 18:14.940
我们把这个打开

18:14.940 --> 18:15.940
把这个网络请求打开

18:16.940 --> 18:18.940
这里选择一个文件

18:18.940 --> 18:19.940
谁也选一个吧

18:20.940 --> 18:21.940
选一个文件

18:21.940 --> 18:22.940
然后点提交

18:22.940 --> 18:23.940
注意看网络请求

18:24.940 --> 18:26.940
是不是我们请求到这个页面

18:26.940 --> 18:27.940
页面刷新了

18:27.940 --> 18:28.940
我们请求到这个页面

18:28.940 --> 18:29.940
提交到这个页面

18:29.940 --> 18:30.940
那么服务器

18:30.940 --> 18:31.940
会给我一个响应

18:31.940 --> 18:32.940
响应了什么

18:32.940 --> 18:33.940
响应了这个东西

18:33.940 --> 18:34.940
这是传统的模式

18:34.940 --> 18:35.940
传统模式会刷新页面的

18:35.940 --> 18:36.940
然后我们来看一下这里的请求

18:36.940 --> 18:37.940
upload

18:37.940 --> 18:38.940
upload的请求的时候

18:38.940 --> 18:39.940
request headers

18:39.940 --> 18:40.940
你看是不是

18:40.940 --> 18:41.940
content type变成这个了

18:41.940 --> 18:43.940
然后给你生成了一个什么

18:43.940 --> 18:44.940
boundary

18:45.940 --> 18:46.940
表示一个分割服务

18:46.940 --> 18:47.940
然后这个表单

18:47.940 --> 18:48.940
他就没给你显示出来了

18:48.940 --> 18:49.940
这个请求的

18:49.940 --> 18:50.940
请求的消息体就没有显示出来了

18:50.940 --> 18:51.940
因为太大了

18:51.940 --> 18:52.940
他没有给你显示出来

18:52.940 --> 18:54.940
一会我们用阿迪克兹请求

18:54.940 --> 18:55.940
他会给你显示出来

18:55.940 --> 18:56.940
这是传统的方式

18:56.940 --> 18:57.940
是不是请求过去了

18:57.940 --> 18:59.940
这个图片已经到了服务器了

18:59.940 --> 19:00.940
只是服务器没有甩它

19:00.940 --> 19:01.940
没保存而已

19:01.940 --> 19:02.940
它是通过这个消息体

19:02.940 --> 19:03.940
就传到服务器了

19:04.940 --> 19:05.940
然后我们再来看

19:05.940 --> 19:06.940
另外一种模式

19:06.940 --> 19:07.940
另外一种模式是这样

19:10.320 --> 19:11.320
音点个声

19:11.320 --> 19:12.320
我们再写一个吧

19:15.590 --> 19:16.590
然后我们这里

19:16.590 --> 19:17.590
还是一个表单

19:17.590 --> 19:19.590
我们这里把表单就表单就不要了

19:19.590 --> 19:21.590
我们就把这个地方写一下

19:21.590 --> 19:22.590
用过来

19:22.590 --> 19:23.590
form就不要了

19:23.590 --> 19:24.590
我们用阿迦克斯的方式

19:24.590 --> 19:26.590
那么阿迦克斯的方式怎么写呢

19:26.590 --> 19:28.590
我们是表写个函数吧

19:28.590 --> 19:29.590
upload写个函数

19:29.590 --> 19:31.590
这个函数谁来调用呢

19:31.590 --> 19:33.590
就是当点击按钮的时候调用

19:33.590 --> 19:34.590
bouffments

19:34.590 --> 19:35.590
curries

19:35.590 --> 19:36.590
lector

19:36.590 --> 19:37.590
button

19:37.590 --> 19:38.590
简单写一下

19:38.590 --> 19:39.590
onclick

19:39.590 --> 19:40.590
当点击的时候

19:40.590 --> 19:41.590
调用这个函数upload

19:41.590 --> 19:43.590
那么这个upload函数里边

19:43.590 --> 19:44.590
我们是不是要得到

19:44.590 --> 19:45.590
这两个文闷框的值

19:45.590 --> 19:46.590
一个是文闷框

19:46.590 --> 19:47.590
文件上传

19:47.590 --> 19:49.590
我们来得到的两个input

19:49.590 --> 19:51.590
一个是input

19:51.590 --> 19:52.590
inputa

19:52.590 --> 19:54.590
document

19:54.590 --> 19:55.590
document

19:55.590 --> 19:56.590
query

19:56.590 --> 19:57.590
select

19:57.590 --> 19:58.590
找到什么呢

19:58.590 --> 20:00.590
找到name属性等于

20:00.590 --> 20:01.590
add

20:01.590 --> 20:04.590
然后是imp

20:04.590 --> 20:05.590
这个file

20:05.590 --> 20:06.590
当然你可以写到外面

20:06.590 --> 20:07.590
也可以select

20:07.590 --> 20:09.590
用结块带获取也行

20:09.590 --> 20:10.590
这个东西我给你们说一下

20:10.590 --> 20:11.590
原理就行了

20:12.590 --> 20:16.290
name的img

20:16.290 --> 20:17.290
img

20:18.290 --> 20:19.290
说写完了

20:19.290 --> 20:20.290
然后接下来怎么来

20:20.290 --> 20:21.290
上传文件呢

20:21.290 --> 20:22.290
你看一下postman

20:22.290 --> 20:24.290
其实都给你写出来了

20:24.290 --> 20:25.290
就是这么一段话

20:25.290 --> 20:26.290
就是说

20:26.290 --> 20:27.290
如果说你直接使用

20:27.290 --> 20:28.290
费协API

20:28.290 --> 20:29.290
自己来手动的

20:29.290 --> 20:30.290
构建消息体

20:30.290 --> 20:31.290
不要我们请求了

20:31.290 --> 20:32.290
请求的肯定是

20:32.290 --> 20:33.290
API upload的

20:33.290 --> 20:34.290
请求这

20:34.290 --> 20:35.290
然后来手动的

20:35.290 --> 20:36.290
构建这个消息体

20:36.290 --> 20:38.290
有点麻烦的

20:38.290 --> 20:39.290
非常非常麻烦的

20:39.290 --> 20:40.290
你要去搞定

20:40.290 --> 20:41.290
分割符

20:41.290 --> 20:42.290
还要去自己

20:42.290 --> 20:43.290
生成分割符

20:43.290 --> 20:44.290
太麻烦了

20:44.290 --> 20:45.290
因此为了避免这个问题

20:45.290 --> 20:46.290
它给你提供了

20:46.290 --> 20:47.290
formdata

20:47.290 --> 20:49.290
有些人应该学过吧

20:49.290 --> 20:50.290
formdata

20:50.290 --> 20:51.290
另一个

20:51.290 --> 20:52.290
formdata

20:52.290 --> 20:53.290
就是我们

20:53.290 --> 20:54.290
这个formdata

20:54.290 --> 20:56.290
它其实就是

20:56.290 --> 20:58.290
用帮助理

20:58.290 --> 20:59.290
构建

20:59.290 --> 21:00.290
构建什么呢

21:00.290 --> 21:02.290
构建那个就是

21:02.290 --> 21:03.290
叫做

21:03.290 --> 21:05.290
formdata

21:05.290 --> 21:07.290
格式的消息体

21:07.290 --> 21:08.290
它就是要帮你

21:08.290 --> 21:09.290
做这个事

21:09.290 --> 21:10.290
所以我们这里

21:10.290 --> 21:11.290
formdata

21:11.290 --> 21:12.290
它可以里边提供的API

21:12.290 --> 21:13.290
append

21:13.290 --> 21:15.290
添加建置队

21:15.290 --> 21:16.290
第一个建置队是什么呢

21:16.290 --> 21:17.290
第一个建置队

21:17.290 --> 21:18.290
建的名字是A

21:18.290 --> 21:19.290
直呢

21:19.290 --> 21:20.290
直就是一个文闷框的直

21:20.290 --> 21:21.290
对吧

21:21.290 --> 21:22.290
调白了

21:23.290 --> 21:24.290
formdata

21:24.290 --> 21:25.290
append

21:26.290 --> 21:27.290
第二个呢

21:27.290 --> 21:28.290
是文件

21:28.290 --> 21:29.290
对吧

21:29.290 --> 21:30.290
建设什么

21:30.290 --> 21:31.290
amg

21:31.290 --> 21:32.290
直是什么呢

21:32.290 --> 21:33.290
直就是文件的

21:33.290 --> 21:34.290
input file里边的

21:34.290 --> 21:35.290
什么

21:35.290 --> 21:36.290
一个属性叫files

21:36.290 --> 21:37.290
对吧

21:37.290 --> 21:38.290
这个没问题吧

21:38.290 --> 21:39.290
你看一下

21:39.290 --> 21:40.290
我们把这个

21:40.290 --> 21:41.290
复制一下

21:41.290 --> 21:42.290
这个在浏览器里边

21:42.290 --> 21:43.290
是可以获取的

21:43.290 --> 21:44.290
就是通过什么呢

21:44.290 --> 21:45.290
比方说我们这里

21:45.290 --> 21:46.290
有个辨量吧

21:46.290 --> 21:48.290
input file

21:48.290 --> 21:49.290
拿到

21:50.290 --> 21:51.290
比方说

21:51.290 --> 21:52.290
你看这个input file

21:54.290 --> 21:55.290
不就是这个东西吧

21:55.290 --> 21:56.290
对吧

21:56.290 --> 21:57.290
然后我们这里选个文件

21:57.290 --> 21:58.290
比方说选一个

21:58.290 --> 21:59.290
随便选个文件

21:59.290 --> 22:00.290
好

22:00.290 --> 22:01.290
然后我们看一下input file里边的

22:01.290 --> 22:02.290
一个属性叫files

22:02.290 --> 22:03.290
你看是个数组

22:03.290 --> 22:04.290
是一个伪数组

22:04.290 --> 22:05.290
对吧

22:05.290 --> 22:06.290
这个伪数组里边

22:06.290 --> 22:07.290
它是不是一个

22:07.290 --> 22:08.290
这里可以上传很多文件的

22:08.290 --> 22:09.290
它不是你

22:09.290 --> 22:10.290
可以上传一个

22:10.290 --> 22:11.290
它可以上传很多文件的

22:11.290 --> 22:12.290
只够默认的

22:12.290 --> 22:14.290
它只能是一个

22:14.290 --> 22:15.290
实际上可以上传很多

22:15.290 --> 22:16.290
我们以后看一下吧

22:16.290 --> 22:17.290
我们这个数组里边

22:17.290 --> 22:18.290
是不是有一个

22:18.290 --> 22:19.290
对不对

22:19.290 --> 22:21.290
他聊说文件里边的一些

22:21.290 --> 22:22.290
基本信息

22:22.290 --> 22:23.290
什么这个东西

22:23.290 --> 22:24.290
这个东西

22:24.290 --> 22:25.290
对吧

22:25.290 --> 22:26.290
上一次修改的时间

22:26.290 --> 22:27.290
对吧

22:27.290 --> 22:29.290
还有就是文件的

22:29.290 --> 22:30.290
本地的文件名字

22:30.290 --> 22:31.290
文件的尺寸

22:31.290 --> 22:32.290
对吧

22:32.290 --> 22:33.290
文件的类型

22:33.290 --> 22:34.290
所以给你

22:34.290 --> 22:35.290
有这么一些属性

22:35.290 --> 22:36.290
可以供你获取

22:36.290 --> 22:37.290
然后

22:37.290 --> 22:39.290
这是个文件对象

22:39.290 --> 22:40.290
刚才说了

22:40.290 --> 22:41.290
它可以上传多个

22:41.290 --> 22:43.290
而且就是multiple

22:43.290 --> 22:45.290
有这样的设置

22:45.290 --> 22:47.290
它这里可以选择多个文件上传

22:51.290 --> 22:52.290
它不认吗

22:52.290 --> 22:53.290
对啊

22:53.290 --> 22:54.290
multiple

22:54.290 --> 22:55.290
我们这里刷新一色

22:55.290 --> 23:00.390
这里是这个

23:00.390 --> 23:01.390
index

23:01.390 --> 23:03.390
这个页面

23:03.390 --> 23:04.390
就是可以不用这个

23:04.390 --> 23:05.390
index是这个页面

23:05.390 --> 23:06.390
这个页面才对

23:06.390 --> 23:08.390
这边给你

23:08.390 --> 23:09.390
可以上传多个

23:09.390 --> 23:10.390
选择三个

23:10.390 --> 23:11.390
好

23:11.390 --> 23:12.390
现在我们再来一次

23:13.390 --> 23:15.390
得到这个infoil

23:15.390 --> 23:16.390
然后

23:16.390 --> 23:17.390
我们来看一下files

23:17.390 --> 23:18.390
是不是有三个

23:18.390 --> 23:19.390
对不对

23:19.390 --> 23:20.390
有三个文件

23:20.390 --> 23:21.390
就这么个意思

23:21.390 --> 23:22.390
就这么个意思

23:22.390 --> 23:23.390
非常简单的

23:24.390 --> 23:25.390
那么这里

23:25.390 --> 23:26.390
它让你给它添

23:26.390 --> 23:27.390
添加一个文件

23:27.390 --> 23:28.390
如果说你要添加多个的话

23:28.390 --> 23:30.390
你挨载的循环添加就行了

23:30.390 --> 23:31.390
添加一个文件

23:31.390 --> 23:32.390
比方说我们再添加一个文件

23:32.390 --> 23:34.390
添加第一个就行了

23:34.390 --> 23:35.390
然后

23:35.390 --> 23:37.390
后边的这个文件的

23:37.390 --> 23:38.390
第三个参数还可以传一个

23:38.390 --> 23:39.390
就是

23:39.390 --> 23:40.390
相当于是这个

23:40.390 --> 23:41.390
第三个参数

23:41.390 --> 23:42.390
就相当于是这个玩意

23:43.390 --> 23:44.390
就这个玩意

23:44.390 --> 23:45.390
file name

23:45.390 --> 23:46.390
就本地的文件名字

23:46.390 --> 23:47.390
给它写到消息题里边

23:47.390 --> 23:48.390
那么给它写箱

23:48.390 --> 23:50.390
就是infoil

23:50.390 --> 23:52.390
files

23:52.390 --> 23:54.390
0.

23:54.390 --> 23:55.390
这样子构建了一个

23:55.390 --> 23:56.390
蜂蜜data

23:56.390 --> 23:57.390
如果说你要上传多个文件的话

23:57.390 --> 23:58.390
你一次循环

23:58.390 --> 23:59.390
给它添加就完事

24:00.390 --> 24:01.390
没啥意思吧

24:01.390 --> 24:02.390
你循环这个files

24:02.390 --> 24:03.390
美式循环

24:03.390 --> 24:04.390
给它往里边添加一个

24:04.390 --> 24:05.390
就完事了

24:07.390 --> 24:08.390
然后

24:08.390 --> 24:09.390
最哪一个

24:09.390 --> 24:10.390
哪一个

24:10.390 --> 24:12.390
直接循环

24:12.390 --> 24:13.390
foil

24:13.390 --> 24:14.390
循环什么的

24:14.390 --> 24:15.390
循环file

24:15.390 --> 24:17.390
就是infoil

24:17.390 --> 24:18.390
叫什么files

24:18.390 --> 24:19.390
对吧

24:19.390 --> 24:20.390
循环

24:20.390 --> 24:21.390
然后美式循环

24:21.390 --> 24:22.390
给它添加进去

24:23.390 --> 24:24.390
这里是什么的

24:24.390 --> 24:25.390
这里是file

24:25.390 --> 24:26.390
这里是什么的

24:26.390 --> 24:27.390
file.name

24:29.390 --> 24:30.390
对吧

24:30.390 --> 24:31.390
就把添加到

24:31.390 --> 24:33.390
蜂蜜data里边去了

24:33.390 --> 24:34.390
那么蜂蜜data

24:34.390 --> 24:35.390
会自动帮助你

24:35.390 --> 24:36.390
构建这个消息体格

24:36.390 --> 24:37.390
那么你这个body里边

24:37.390 --> 24:38.390
是不是只需要传一个

24:38.390 --> 24:39.390
蜂蜜data就行了

24:39.390 --> 24:40.390
美式的要传什么的

24:40.390 --> 24:41.390
美式的要传post

24:41.390 --> 24:42.390
这个毫无疑问的

24:43.390 --> 24:44.390
就没了

24:44.390 --> 24:45.390
就没了

24:45.390 --> 24:47.390
你看还有啥就没了

24:47.390 --> 24:48.390
那么接下来

24:48.390 --> 24:49.390
我们要做的就是

24:49.390 --> 24:51.390
当收到服务器的响应结果之后

24:51.390 --> 24:52.390
我们把响应结果

24:52.390 --> 24:54.390
解析成一个普通的文本

24:54.390 --> 24:56.390
因为它目前是得到一个普通文本

24:56.390 --> 24:59.390
然后再把响应结果输出

25:00.390 --> 25:01.390
保存

25:01.390 --> 25:02.390
咱们来看一下吧

25:02.390 --> 25:03.390
刷新

25:03.390 --> 25:05.390
然后现在我们去

25:05.390 --> 25:06.390
这里随便输入一个吧

25:06.390 --> 25:08.390
然后这里

25:08.390 --> 25:10.390
得到这个

25:10.390 --> 25:12.390
随便来一个吧

25:12.390 --> 25:13.390
就这个

25:13.390 --> 25:14.390
点击提交

25:14.390 --> 25:16.390
你看是不是得到服务器的响应结果了

25:16.390 --> 25:17.390
然后我们来观察一下

25:17.390 --> 25:18.390
Nestwork

25:18.390 --> 25:19.390
把这个取消重新来一次

25:20.390 --> 25:21.390
其实不用重新来一下

25:21.390 --> 25:22.390
你看

25:24.390 --> 25:25.390
request

25:25.390 --> 25:26.390
我们请求里边

25:26.390 --> 25:27.390
是不是content type

25:27.390 --> 25:28.390
对不对

25:28.390 --> 25:29.390
是不是这种格式

25:29.390 --> 25:31.390
它会自动把它变成这种格式

25:31.390 --> 25:32.390
因为你刚传的是一个

25:32.390 --> 25:33.390
蜂蜜data对象

25:33.390 --> 25:34.390
然后下面这个蜂蜜data

25:34.390 --> 25:35.390
你看无忧硕士

25:35.390 --> 25:36.390
你看一下

25:36.390 --> 25:37.390
是不是这种格式

25:37.390 --> 25:38.390
对不对

25:38.390 --> 25:39.390
articles它可以看得到

25:39.390 --> 25:40.390
a123

25:40.390 --> 25:41.390
下面是amg

25:41.390 --> 25:42.390
对吧

25:42.390 --> 25:43.390
是不是这个

25:43.390 --> 25:45.390
那如果说我上传多张图片了

25:46.390 --> 25:47.390
打开

25:49.390 --> 25:50.390
提交

25:50.390 --> 25:51.390
然后再看一下

25:52.390 --> 25:53.390
view source

25:53.390 --> 25:55.390
你看是不是多张图片

25:55.390 --> 25:56.390
第一张图片

25:56.390 --> 25:57.390
第二张图片是这个

25:57.390 --> 25:58.390
对吧

25:58.390 --> 25:59.390
第三张图片是

25:59.390 --> 26:00.390
下面是二锦子

26:00.390 --> 26:01.390
二锦子它没给显示出来

26:01.390 --> 26:02.390
这完了

26:02.390 --> 26:03.390
那么接下来

26:03.390 --> 26:04.390
刻不断就上传这样

26:04.390 --> 26:05.390
图片就这样的上传了

26:06.390 --> 26:07.390
那么接下来就是服务器了

26:07.390 --> 26:08.390
服务器怎么搞定

26:08.390 --> 26:10.390
来处理这个表单数据呢

26:10.390 --> 26:11.390
这个表单数据

26:11.390 --> 26:12.390
自己解析能不能解析

26:12.390 --> 26:13.390
肯定可以解析

26:13.390 --> 26:14.390
你读呗

26:14.390 --> 26:15.390
你怎么读

26:15.390 --> 26:16.390
你就按照这样的规则读

26:16.390 --> 26:17.390
读它的表单嘛

26:18.390 --> 26:19.390
首先这个表单格式

26:19.390 --> 26:21.390
我们之前的那两个是用不了的

26:22.390 --> 26:23.390
之前的这个

26:23.390 --> 26:24.390
这个就是什么

26:24.390 --> 26:25.390
解析这个什么

26:25.390 --> 26:26.390
Ui用英口地的

26:26.390 --> 26:27.390
这个解析的出来吗

26:27.390 --> 26:28.390
是不是解析不出来

26:28.390 --> 26:29.390
这个接生能解析的出来吗

26:29.390 --> 26:30.390
对吧

26:30.390 --> 26:31.390
这个请求体

26:31.390 --> 26:32.390
它不是个格式

26:32.390 --> 26:33.390
它解析不出来

26:33.390 --> 26:34.390
所以说这两个东西

26:34.390 --> 26:35.390
它解决不了

26:35.390 --> 26:37.390
那么我们能不能自行解析

26:37.390 --> 26:38.390
对吧

26:38.390 --> 26:39.390
我们可以解析写个中间件吗

26:39.390 --> 26:42.390
然后等那个消息头的

26:42.390 --> 26:43.390
content type等于什么

26:43.390 --> 26:44.390
等于那个

26:44.390 --> 26:46.390
multipart form data

26:46.390 --> 26:47.390
这种格式的时候

26:47.390 --> 26:48.390
我们怎么要读呢

26:48.390 --> 26:49.390
就把一个消息体呢

26:49.390 --> 26:51.390
一部分一部分读出来

26:51.390 --> 26:52.390
按照流的那种方式来读

26:52.390 --> 26:54.390
一部分一部分读出来

26:54.390 --> 26:55.390
每次读的时候

26:55.390 --> 26:56.390
有点复杂啊

26:56.390 --> 26:57.390
处理起来

26:57.390 --> 26:58.390
每次读的时候

26:58.390 --> 26:59.390
遇到这个是不是

26:59.390 --> 27:00.390
表示一个表单数据了

27:00.390 --> 27:01.390
好我们就看这个东西的

27:01.390 --> 27:02.390
后边的一些描述

27:02.390 --> 27:03.390
它是一个什么类型

27:03.390 --> 27:04.390
它又是一个文件

27:04.390 --> 27:06.390
接下来我们换一行再继续读

27:06.390 --> 27:07.390
后边就是二进制的

27:07.390 --> 27:08.390
我们把二进制读完

27:08.390 --> 27:09.390
读到什么时候

27:09.390 --> 27:10.390
读到这个时候

27:10.390 --> 27:11.390
连续的出现这么几个东西

27:11.390 --> 27:13.390
出现这个分割符的时候

27:13.390 --> 27:14.390
读到这个时候中止

27:14.390 --> 27:15.390
那么就把完整的二进制读出来

27:15.390 --> 27:16.390
读出来过后

27:16.390 --> 27:17.390
就把它保存到怎么样

27:17.390 --> 27:18.390
保存文件怎么样

27:18.390 --> 27:19.390
还你自行处理

27:19.390 --> 27:20.390
对吧

27:20.390 --> 27:21.390
但是呢

27:21.390 --> 27:22.390
这样子毕竟太麻烦了

27:22.390 --> 27:23.390
肯定是可以做到的

27:23.390 --> 27:24.390
毕竟太麻烦了

27:24.390 --> 27:25.390
所以说呢

27:25.390 --> 27:26.390
我们一般来说

27:26.390 --> 27:27.390
在express里面

27:27.390 --> 27:28.390
可以使用一个中间件

27:28.390 --> 27:29.390
能够帮我们解决

27:29.390 --> 27:30.390
这中间件叫什么呢

27:30.390 --> 27:31.390
叫mouter

27:32.390 --> 27:33.390
mouter表示什么意思

27:33.390 --> 27:34.390
就是服务器

27:34.390 --> 27:35.390
讲的是服务器

27:35.390 --> 27:36.390
如何来解析这个请求体

27:36.390 --> 27:37.390
就是mouter

27:37.390 --> 27:39.390
来我们来看一下它的官网

27:42.340 --> 27:44.340
它这个也有一段时间

27:44.340 --> 27:45.340
没更新了

27:45.340 --> 27:46.340
不过没关系

27:46.340 --> 27:47.340
这些东西都比较稳定的

27:47.340 --> 27:48.340
它就不需要再更新了

27:48.340 --> 27:49.340
我们来看一下

27:49.340 --> 27:53.040
它的中文文章

27:53.040 --> 27:54.040
咱们来看一下

27:54.040 --> 27:55.040
首先让你安装这个

27:55.040 --> 27:56.040
让我安装呗

27:57.040 --> 27:58.040
安装

27:58.040 --> 27:59.040
NPMI

27:59.040 --> 28:00.040
什么呢

28:00.040 --> 28:01.040
mouter

28:01.040 --> 28:02.040
安装

28:03.040 --> 28:05.040
我们再把这个文档

28:05.040 --> 28:06.040
先打开的看一下

28:06.040 --> 28:07.040
打开来看

28:07.040 --> 28:08.040
它并不多

28:08.040 --> 28:09.040
只有一点点

28:09.040 --> 28:10.040
用法非常简单

28:10.040 --> 28:11.040
它说怎么用呢

28:12.040 --> 28:13.040
当你使用这个

28:13.040 --> 28:14.040
express过后

28:14.040 --> 28:15.040
你导入这个mouter

28:15.040 --> 28:16.040
mouter

28:16.040 --> 28:17.040
你可以通过这个函数

28:17.040 --> 28:19.040
它给了你一个函数

28:19.040 --> 28:20.040
对不对

28:20.040 --> 28:21.040
它给了你一个函数

28:22.040 --> 28:23.040
这个函数

28:23.040 --> 28:24.040
通过这个函数

28:24.040 --> 28:25.040
可以创建一个

28:25.040 --> 28:27.040
叫做upload对象

28:27.040 --> 28:29.040
然后把这个upload对象

28:29.040 --> 28:30.040
调用这个single

28:30.040 --> 28:32.040
里面给你弄个

28:32.040 --> 28:33.040
这个东西

28:33.040 --> 28:34.040
然后把这个东西

28:34.040 --> 28:35.040
把这个玩意

28:35.040 --> 28:36.040
给你放到这个位置

28:36.040 --> 28:37.040
那么你想一想

28:37.040 --> 28:38.040
按照我们学过的

28:38.040 --> 28:39.040
原理知识

28:39.040 --> 28:40.040
就是你为什么

28:40.040 --> 28:41.040
看不懂文档

28:41.040 --> 28:42.040
看不懂它写的是什么

28:43.040 --> 28:44.040
你看着

28:44.040 --> 28:45.040
我教你怎么来分析

28:45.040 --> 28:46.040
这个部分

28:46.040 --> 28:48.040
它得到了是什么东西

28:48.040 --> 28:49.040
你首先告诉我

28:49.040 --> 28:50.040
这个部分得到

28:50.040 --> 28:51.040
是什么东西

28:52.040 --> 28:53.040
得到是什么东西呢

28:54.040 --> 28:55.040
得到了是不是

28:55.040 --> 28:56.040
就是一个函数

28:56.040 --> 28:57.040
它如果说

28:57.040 --> 28:58.040
它得到了不是一个函数

28:58.040 --> 28:59.040
它敢放这吗

29:00.040 --> 29:01.040
这个是不是讲过的

29:01.040 --> 29:02.040
对吧

29:02.040 --> 29:03.040
我们前面的时候

29:03.040 --> 29:04.040
是请求路径

29:04.040 --> 29:05.040
后边的表示什么

29:05.040 --> 29:06.040
一个一个的中间键

29:06.040 --> 29:07.040
对不对

29:07.040 --> 29:08.040
这个中间键放这

29:08.040 --> 29:09.040
后边我们继续往后处理

29:09.040 --> 29:10.040
对吧

29:10.040 --> 29:11.040
继续进一步处理

29:11.040 --> 29:12.040
所以它得到了

29:12.040 --> 29:13.040
一定是一个函数

29:13.040 --> 29:14.040
这个upload single

29:14.040 --> 29:15.040
包括upload array

29:15.040 --> 29:16.040
包括upload field

29:16.040 --> 29:18.040
只是得到了一个个函数

29:18.040 --> 29:19.040
那么这三个东西

29:19.040 --> 29:20.040
到底是什么东西

29:20.040 --> 29:21.040
放在前面

29:21.040 --> 29:22.040
那么我们来看一下

29:22.040 --> 29:23.040
得到的其实就是说白了

29:23.040 --> 29:24.040
就是个中间键

29:24.040 --> 29:25.040
然后看一下

29:25.040 --> 29:26.040
它前面的说明

29:26.040 --> 29:27.040
matter

29:27.040 --> 29:29.040
会添加一个body对象

29:29.040 --> 29:30.040
以及呢

29:30.040 --> 29:31.040
它添加一个啥

29:31.040 --> 29:32.040
以及一个啥啥啥

29:32.040 --> 29:34.040
到express的request对象中

29:34.040 --> 29:35.040
所以说

29:35.040 --> 29:36.040
经过它的处理过后

29:36.040 --> 29:37.040
这个req对象里面

29:37.040 --> 29:38.040
就会多了一些信息

29:38.040 --> 29:40.040
首先body对象

29:40.040 --> 29:41.040
对吧

29:41.040 --> 29:42.040
它是不是给你解析出来了

29:42.040 --> 29:44.040
之前我们学的express里面

29:44.040 --> 29:45.040
自带的两个中间键

29:45.040 --> 29:46.040
是解析不了的

29:46.040 --> 29:47.040
对吧

29:47.040 --> 29:48.040
那么它可以给你解析出来

29:48.040 --> 29:49.040
已经它会多一个file

29:49.040 --> 29:50.040
和files

29:50.040 --> 29:51.040
是不是可以

29:51.040 --> 29:52.040
可以

29:52.040 --> 29:54.040
它可以多了这两个对象了

29:54.040 --> 29:55.040
那么我们拆一拆file

29:55.040 --> 29:56.040
什么意思

29:56.040 --> 29:57.040
就是上传的文件

29:57.040 --> 29:58.040
files什么意思

29:58.040 --> 29:59.040
如果上传了多个文件

29:59.040 --> 30:00.040
是不是保存到数组里面

30:00.040 --> 30:01.040
对吧

30:01.040 --> 30:02.040
它就这么个意思

30:02.040 --> 30:03.040
它说

30:03.040 --> 30:05.040
body对象里面保存的是

30:05.040 --> 30:06.040
表达的文本域信息

30:06.040 --> 30:08.040
什么叫文本域信息

30:08.040 --> 30:09.040
就这种

30:09.040 --> 30:11.040
a等于1b等于2

30:11.040 --> 30:13.040
就保存到body里面

30:13.040 --> 30:14.040
那么文件信息

30:14.040 --> 30:16.040
是不是保存到file和files里面

30:16.040 --> 30:17.040
像这些是不是文件信息

30:17.040 --> 30:18.040
对不对

30:18.040 --> 30:20.040
要学会看文档

30:20.040 --> 30:21.040
不能一靠老师

30:21.040 --> 30:23.040
这个老师也帮不了一辈子

30:25.040 --> 30:26.040
那么再看

30:26.040 --> 30:27.040
file和files对象

30:27.040 --> 30:29.040
包含表达上传的文件信息

30:29.040 --> 30:30.040
然后再来看这个文档

30:31.040 --> 30:32.040
它说这个地方

30:32.040 --> 30:33.040
single什么意思

30:33.040 --> 30:34.040
这个难词

30:34.040 --> 30:35.040
表示一个

30:35.040 --> 30:36.040
你确定是它啥意思

30:36.040 --> 30:37.040
是不是处理单个文件

30:37.040 --> 30:38.040
我只处理一个

30:38.040 --> 30:39.040
你给我上传多个

30:39.040 --> 30:40.040
我只处理一个

30:40.040 --> 30:41.040
那么这里边的

30:41.040 --> 30:42.040
知误处理

30:42.040 --> 30:43.040
觉得它是什么意思呢

30:43.040 --> 30:44.040
你看它下面的注释

30:44.040 --> 30:45.040
它到后边

30:45.040 --> 30:46.040
我们就可以通过

30:46.040 --> 30:47.040
这个req.file

30:47.040 --> 30:48.040
来获取到什么呢

30:48.040 --> 30:50.040
获取到这个就是

30:50.040 --> 30:52.040
evata的文件的信息

30:52.040 --> 30:54.040
这个evata是什么呢

30:55.040 --> 30:56.040
不就是这个东西吧

30:57.040 --> 30:58.040
它就是通过这个东西来匹配

30:58.040 --> 30:59.040
对吧

30:59.040 --> 31:00.040
因为它并不知道

31:00.040 --> 31:01.040
你上传的文件

31:01.040 --> 31:03.040
它的表单的key值是什么

31:03.040 --> 31:04.040
所以说你告诉它是什么

31:04.040 --> 31:06.040
告诉它是表单key值

31:06.040 --> 31:07.040
对吧

31:07.040 --> 31:08.040
这个body得到的是文本语书

31:08.040 --> 31:09.040
如果存在的话

31:09.040 --> 31:10.040
就这么个意思

31:10.040 --> 31:11.040
然后呢

31:11.040 --> 31:12.040
第二个req.file

31:12.040 --> 31:14.040
就是有可能会上传多个文件

31:14.040 --> 31:16.040
有可能会上传多个文件

31:16.040 --> 31:17.040
那么这个地方是怎么意思呢

31:17.040 --> 31:18.040
这个地方

31:18.040 --> 31:19.040
其实它文档

31:19.040 --> 31:20.040
如果说写得更好一点

31:20.040 --> 31:21.040
一开始给你解释

31:21.040 --> 31:22.040
一开始没有解释的话

31:22.040 --> 31:23.040
你往后面看才知道

31:23.040 --> 31:25.040
这个12实际上是

31:25.040 --> 31:27.040
它允许的最多的文件数量

31:27.040 --> 31:28.040
因为它可以支持

31:28.040 --> 31:29.040
处理多个上传的文件的

31:29.040 --> 31:30.040
第一个

31:30.040 --> 31:31.040
它只处理一个

31:31.040 --> 31:32.040
其实我们很多时候

31:32.040 --> 31:33.040
只处理一个的

31:33.040 --> 31:34.040
那么它其实是

31:34.040 --> 31:36.040
可以同时处理多个的

31:36.040 --> 31:38.040
那么就用个req.file

31:38.040 --> 31:39.040
那么这里是

31:39.040 --> 31:41.040
对应了表单语的信息

31:41.040 --> 31:42.040
表单语

31:42.040 --> 31:43.040
比方说像刚才这里

31:43.040 --> 31:44.040
Postman

31:44.040 --> 31:45.040
表单语给它一面解释

31:45.040 --> 31:46.040
可以处理两个文件

31:46.040 --> 31:47.040
这是第一个文件

31:47.040 --> 31:48.040
这是第二个文件

31:48.040 --> 31:49.040
这个文件处理不了

31:49.040 --> 31:50.040
就是一面解二

31:50.040 --> 31:51.040
那么它是不是

31:51.040 --> 31:52.040
可以处理两个文件的

31:52.040 --> 31:53.040
就这么个意思

31:53.040 --> 31:54.040
然后再继续看

31:55.040 --> 31:56.040
那么后边的数字

31:56.040 --> 31:57.040
表示它最多处理几个

31:57.040 --> 31:58.040
不是

31:58.040 --> 31:59.040
一共创了1千1万个

31:59.040 --> 32:00.040
太夸张了

32:01.040 --> 32:02.040
那么后边

32:02.040 --> 32:03.040
就是req.file

32:03.040 --> 32:04.040
是一个数组

32:04.040 --> 32:05.040
数组里面可以保存

32:05.040 --> 32:07.040
这个文件的数组信息

32:08.040 --> 32:09.040
保底是文本域

32:09.040 --> 32:10.040
还有的

32:10.040 --> 32:11.040
还有这种情况就是

32:11.040 --> 32:12.040
这种情况

32:12.040 --> 32:13.040
它可以上传这么一个东西

32:13.040 --> 32:14.040
通过fields

32:14.040 --> 32:16.040
通过一个对象来配置

32:16.040 --> 32:18.040
一看一下就明白了

32:18.040 --> 32:19.040
它可以上传

32:19.040 --> 32:22.040
它可以处理不同的keyz

32:23.040 --> 32:24.040
的文件

32:24.040 --> 32:25.040
第一个keyz

32:25.040 --> 32:26.040
我允许你上

32:26.040 --> 32:27.040
最多一个

32:27.040 --> 32:28.040
第二个keyz

32:28.040 --> 32:29.040
我允许你有8个

32:29.040 --> 32:31.040
你看这里是不是有多个keyz

32:31.040 --> 32:32.040
一个keyz

32:32.040 --> 32:33.040
一面解有两个

32:33.040 --> 32:35.040
一面解2有一个

32:35.040 --> 32:37.040
它是有这么一个意思

32:37.040 --> 32:38.040
好了

32:38.040 --> 32:39.040
后边

32:39.040 --> 32:40.040
它告诉你

32:40.040 --> 32:41.040
如果说利用这种方式

32:41.040 --> 32:42.040
来写到前面的话

32:42.040 --> 32:43.040
通过这个中间键的处理

32:44.040 --> 32:46.040
那么最终得到的files

32:46.040 --> 32:47.040
它是一个对象

32:47.040 --> 32:48.040
而不是一个简单数组

32:48.040 --> 32:49.040
它对象什么格式呢

32:49.040 --> 32:50.040
就是keyz

32:50.040 --> 32:51.040
是一个数组

32:51.040 --> 32:52.040
这个玩意是一个数组

32:52.040 --> 32:53.040
这个玩意又是一个数组

32:54.040 --> 32:55.040
没什么意思

32:55.040 --> 32:56.040
有这么一个意思

32:57.040 --> 32:58.040
如果说

32:58.040 --> 32:59.040
你不想处理文件

32:59.040 --> 33:01.040
你就想处理一个简单的表单语

33:01.040 --> 33:03.040
就是这些文件我全部不看了

33:03.040 --> 33:04.040
看的不看

33:04.040 --> 33:05.040
我只处理什么a等于e b等于2

33:05.040 --> 33:06.040
这种文本语

33:06.040 --> 33:07.040
那么如果说

33:07.040 --> 33:08.040
这种情况的话

33:08.040 --> 33:09.040
你可以使用浪

33:09.040 --> 33:10.040
放到前面

33:10.040 --> 33:11.040
现在看懂了吧

33:11.040 --> 33:12.040
通过这么一解释

33:12.040 --> 33:13.040
就看懂了吧

33:13.040 --> 33:14.040
你要写说

33:14.040 --> 33:16.040
因为写文浪的人

33:16.040 --> 33:17.040
他并不是当老师的

33:17.040 --> 33:19.040
他并不是搞教育的

33:19.040 --> 33:20.040
所以他有的时候

33:21.040 --> 33:22.040
他就想当然了

33:22.040 --> 33:23.040
人家大家看得懂

33:23.040 --> 33:24.040
其实就是很多时候

33:24.040 --> 33:26.040
造成文档不好理解的原因

33:26.040 --> 33:27.040
但是你看多了

33:27.040 --> 33:28.040
你慢慢懂他什么意思

33:28.040 --> 33:29.040
这个连拆带蒙

33:29.040 --> 33:31.040
然后继续往下越懂

33:31.040 --> 33:32.040
基本上就知道什么意思了

33:32.040 --> 33:33.040
这个内容不多

33:33.040 --> 33:34.040
我们简单读一下

33:34.040 --> 33:35.040
然后再来用

33:36.040 --> 33:37.040
然后他告诉你

33:37.040 --> 33:39.040
每一个文件都有下面的信息

33:39.040 --> 33:40.040
什么叫文件都有下面的信息

33:40.040 --> 33:41.040
你看一下

33:41.040 --> 33:42.040
这个不是file

33:42.040 --> 33:44.040
这个reqfile不就是一个file

33:44.040 --> 33:45.040
这个文件它是个对象

33:45.040 --> 33:46.040
对象里面有些信息

33:46.040 --> 33:48.040
不就有这么些信息吗

33:48.040 --> 33:49.040
就是这么些信息

33:49.040 --> 33:50.040
你可以用

33:50.040 --> 33:51.040
你可以获取

33:51.040 --> 33:53.040
你可以获取这些信息

33:53.040 --> 33:54.040
我们一会再看

33:54.040 --> 33:55.040
我们现在知道了

33:55.040 --> 33:56.040
原来是这么回事

33:56.040 --> 33:57.040
可以获取这些信息

33:57.040 --> 33:58.040
然后他又告诉你

33:58.040 --> 33:59.040
通过这个matter

33:59.040 --> 34:02.610
通过这个玩意儿

34:02.610 --> 34:03.610
通过这个matter

34:03.610 --> 34:06.610
来创建了这个upload对象

34:06.610 --> 34:07.610
因为我们后面都是通过upload对象

34:07.610 --> 34:08.610
来得到

34:08.610 --> 34:09.610
那么通过这个matter

34:09.610 --> 34:10.610
来创建了upload对象

34:10.610 --> 34:11.610
这matter里面

34:11.610 --> 34:13.610
是可以传一些配置的

34:13.610 --> 34:14.610
那么这个matter里面

34:14.610 --> 34:15.610
有什么配置的

34:15.610 --> 34:16.610
matter配置的

34:16.610 --> 34:17.610
他告诉你disk

34:17.610 --> 34:18.610
disk表示什么意思

34:18.610 --> 34:20.610
在哪里存出文件

34:20.610 --> 34:21.610
就把文件

34:21.610 --> 34:22.610
就是你上传的文件

34:22.610 --> 34:23.610
我们服务器

34:23.610 --> 34:24.610
把这个文件存到哪

34:24.610 --> 34:26.610
还有什么文件的过滤器

34:26.610 --> 34:27.610
就是哪件文件可以接受

34:27.610 --> 34:28.610
就是比方说

34:28.610 --> 34:29.610
你过上传一个ES1

34:29.610 --> 34:31.610
可执行文件对服务器很危险

34:31.610 --> 34:32.610
比方说你过上传一个很大的压缩

34:32.610 --> 34:33.610
比方说我这些都不接受

34:33.610 --> 34:34.610
我只接受图片

34:34.610 --> 34:36.610
那么哪些文件是可以接受

34:36.610 --> 34:37.610
哪些文件不能接受的

34:37.610 --> 34:38.610
你要配置这个

34:38.610 --> 34:40.610
比方说里面只表示

34:40.610 --> 34:41.610
你过上

34:41.610 --> 34:43.610
我本来就让你上传一张照片

34:43.610 --> 34:45.610
你过上传了一个18G的游戏

34:45.610 --> 34:47.610
这个我肯定不允许

34:47.610 --> 34:48.610
因为说18G的游戏

34:48.610 --> 34:50.610
不是图片

34:50.610 --> 34:51.610
它没法上传

34:51.610 --> 34:52.610
但是你要知道

34:52.610 --> 34:53.610
它可以改名字

34:53.610 --> 34:54.610
它把后织名改成GPG

34:54.610 --> 34:55.610
不就上传了吗

34:55.610 --> 34:56.610
对不对

34:56.610 --> 34:57.610
所以说你这个

34:57.610 --> 34:59.610
限制上传的数据

34:59.610 --> 35:00.610
也是很有必要的

35:00.610 --> 35:01.610
比方说我最多允许你

35:01.610 --> 35:03.610
上传多少照

35:03.610 --> 35:04.610
超过这个数据不能上传了

35:04.610 --> 35:06.610
这个东西跟聚集体情况

35:06.610 --> 35:07.610
聚集来处理

35:07.610 --> 35:09.610
它可以接受任何上传的文件

35:09.610 --> 35:10.610
不仅是图片

35:10.610 --> 35:11.610
好了

35:11.610 --> 35:12.610
那么这个东西

35:12.610 --> 35:13.610
是配置包含

35:13.610 --> 35:14.610
就是这个File对象里面

35:14.610 --> 35:16.610
是不是包含文件的完整路径

35:17.610 --> 35:19.610
咱们来简单的来用一下吧

35:19.610 --> 35:20.610
我们看到这儿

35:20.610 --> 35:22.610
应该有这么点意思的

35:22.610 --> 35:23.610
简单的用一下

35:23.610 --> 35:24.610
其实你往后边看的话

35:24.610 --> 35:26.610
还可以给你说明一个东西

35:26.610 --> 35:27.610
他说

35:28.610 --> 35:30.610
永远不要将MART

35:30.610 --> 35:31.610
作为全聚中间键使用

35:31.610 --> 35:32.610
什么叫全聚中间键

35:32.610 --> 35:33.610
就像这样子

35:34.610 --> 35:35.610
全聚中间键

35:35.610 --> 35:36.610
不要这种方式来使用

35:36.610 --> 35:37.610
为什么呢

35:37.610 --> 35:39.610
因为它是有些恶意用户

35:39.610 --> 35:41.610
它可能会上传文件

35:41.610 --> 35:43.610
到一个没有预调到的路由

35:43.610 --> 35:45.610
比方说我添加一个学生

35:45.610 --> 35:47.610
跟上传文件有啥关系呢

35:47.610 --> 35:48.610
因为它可能

35:48.610 --> 35:49.610
我添加学生的时候

35:49.610 --> 35:50.610
给你上传一个文件

35:50.610 --> 35:51.610
可能

35:51.610 --> 35:52.610
会造成一些

35:52.610 --> 35:53.610
不可预调的后果

35:53.610 --> 35:54.610
所以说

35:54.610 --> 35:56.610
你只在上传文件的

35:56.610 --> 35:57.610
API的位置

35:57.610 --> 35:58.610
去使用它就行了

35:58.610 --> 35:59.610
那么是不是在这儿

35:59.610 --> 36:00.610
是不是在这儿

36:00.610 --> 36:01.610
好来吧

36:01.610 --> 36:02.610
这里呢

36:02.610 --> 36:03.610
我们写一个MART

36:04.610 --> 36:05.610
require

36:06.610 --> 36:09.050
写一个

36:09.050 --> 36:10.050
然后跟它

36:10.050 --> 36:11.050
根据它说的

36:11.050 --> 36:12.050
MART

36:12.050 --> 36:13.050
我创建它的时候

36:13.050 --> 36:14.050
是不是可以带一个配置

36:14.050 --> 36:15.050
叫Dest

36:15.050 --> 36:16.050
Destination

36:16.050 --> 36:17.050
Destination

36:17.050 --> 36:18.050
目标

36:18.050 --> 36:20.050
我要把文件存到哪儿去

36:20.050 --> 36:21.050
我存到哪儿

36:22.050 --> 36:23.050
我就存到这儿吧

36:24.050 --> 36:25.050
我就存到这儿

36:25.050 --> 36:26.050
Public目标下面的

36:26.050 --> 36:27.050
Upload文件

36:27.050 --> 36:28.050
好来吧

36:28.050 --> 36:29.050
我们存到这儿

36:29.050 --> 36:31.050
现在我们倒入一个PASS

36:32.050 --> 36:34.050
PASS给它个决定路径好一点

36:35.050 --> 36:36.050
PASS

36:37.050 --> 36:38.050
然后存到哪儿了

36:38.050 --> 36:39.050
PASS Result

36:39.050 --> 36:41.050
当前目标出发

36:41.050 --> 36:43.050
然后目标在哪儿呢

36:43.050 --> 36:45.050
目标是在API这个目标对吧

36:45.050 --> 36:47.050
然后返回上一级目楼

36:47.050 --> 36:48.050
返回上一级目标

36:48.050 --> 36:49.050
出不到Route目标

36:49.050 --> 36:50.050
再返回上一级目标

36:50.050 --> 36:51.050
出不到根目标

36:51.050 --> 36:52.050
根目标下面的Public

36:53.050 --> 36:55.050
然后再来一个

36:56.050 --> 36:57.050
Upload

36:58.050 --> 37:00.050
到这个Upload文件下

37:01.050 --> 37:02.050
没问题

37:02.050 --> 37:04.050
这是我们给它配置的目标

37:04.050 --> 37:05.050
得到了的是一个什么

37:05.050 --> 37:06.050
得到了的是一个Upload

37:06.050 --> 37:07.050
是不是有对象

37:07.050 --> 37:08.050
然后按照它的要求

37:08.050 --> 37:10.050
是不是把对象写在

37:10.050 --> 37:11.050
对吧写在

37:11.050 --> 37:12.050
然后调用一个方法叫Single

37:12.050 --> 37:14.050
我们现在只处理单个文件

37:14.050 --> 37:15.050
Single

37:15.050 --> 37:16.050
Single的话

37:16.050 --> 37:17.050
我们这里写上一个

37:17.050 --> 37:18.050
就是我们的key值

37:18.050 --> 37:19.050
key值是什么呢

37:19.050 --> 37:20.050
Image

37:20.050 --> 37:21.050
为什么是Image就是这里

37:21.050 --> 37:23.050
我们给它的key值Image

37:23.050 --> 37:25.050
当然我这里只处理了单个

37:25.050 --> 37:26.050
处理了单个

37:26.050 --> 37:27.050
如果它上很多个的话

37:27.050 --> 37:28.050
我只处理一个

37:28.050 --> 37:29.050
对不对

37:29.050 --> 37:30.050
好 那么现在呢

37:30.050 --> 37:31.050
我一保存

37:31.050 --> 37:32.050
它给你

37:32.050 --> 37:34.050
它自动给你创建这个目标

37:34.050 --> 37:35.050
这个目标一开始不存在对吧

37:35.050 --> 37:36.050
一创建这个目标

37:36.050 --> 37:37.050
那么另外呢

37:37.050 --> 37:38.050
这里给大家说一点

37:38.050 --> 37:39.050
就这个目标呢

37:39.050 --> 37:40.050
我们一般来说

37:40.050 --> 37:42.050
会从技术里面忽略掉

37:44.050 --> 37:46.050
就是pub的一个下面的upload

37:46.050 --> 37:47.050
我这个目标呢

37:47.050 --> 37:48.050
一般会忽略掉这个目标

37:48.050 --> 37:49.050
为什么呢

37:49.050 --> 37:50.050
因为服务器那边

37:50.050 --> 37:52.050
我们现在是本地的

37:52.050 --> 37:53.050
开发键弹测试的对吧

37:53.050 --> 37:54.050
乱七八糟上传一些

37:54.050 --> 37:56.050
这一图面需要到服务器吗

37:56.050 --> 37:57.050
这不需要到服务器

37:57.050 --> 37:58.050
服务器那边是有

37:58.050 --> 37:59.050
自己的upload文件夹

37:59.050 --> 38:00.050
它有自己的

38:00.050 --> 38:01.050
真实的客户上传的文件

38:01.050 --> 38:02.050
所以这个东西

38:02.050 --> 38:03.050
我们一般忽略掉

38:04.050 --> 38:05.050
好 那么现在呢

38:05.050 --> 38:06.050
我就写完了

38:06.050 --> 38:07.050
写完了过后

38:07.050 --> 38:08.050
我们再回到客户端

38:08.050 --> 38:09.050
你要看一下吧

38:09.050 --> 38:10.050
刷新的

38:10.050 --> 38:12.050
就123吧

38:12.050 --> 38:13.050
这里呢

38:13.050 --> 38:14.050
我就拿一个

38:15.050 --> 38:16.050
来的图片

38:17.050 --> 38:18.050
点击提交

38:20.810 --> 38:21.810
看服务器的响应结果

38:21.810 --> 38:22.810
所以服务器

38:22.810 --> 38:23.810
晚上正常响应

38:23.810 --> 38:24.810
然后我们到服务器看

38:25.810 --> 38:26.810
到服务器看

38:26.810 --> 38:27.810
是不是图片保存进来的

38:28.810 --> 38:29.810
哪是个图片

38:29.810 --> 38:30.810
这个后续鸣都没有

38:30.810 --> 38:31.810
他对

38:31.810 --> 38:32.810
他默认不会给你

38:32.810 --> 38:33.810
保存后续鸣

38:33.810 --> 38:34.810
因为他不仅仅是

38:34.810 --> 38:35.810
来处理图片的

38:35.810 --> 38:37.810
他可以处理任何文件

38:37.810 --> 38:38.810
不保存后续鸣

38:38.810 --> 38:39.810
是最安全的

38:39.810 --> 38:40.810
但是由于我们现在知道

38:40.810 --> 38:42.810
就是一个普通的图片

38:42.810 --> 38:43.810
所以说呢

38:44.810 --> 38:45.810
在图片的处理场景里面

38:45.810 --> 38:47.810
我们就希望他保留后续鸣了

38:47.810 --> 38:48.810
但他默认是没有保留的

38:48.810 --> 38:49.810
那怎么办呢

38:49.810 --> 38:50.810
我们以后看文章来解决

38:50.810 --> 38:51.810
总之肯定是可以解决的

38:51.810 --> 38:53.810
那这个文件是不是图片

38:53.810 --> 38:54.810
他肯定是个图片

38:54.810 --> 38:55.810
他肯定是个图片

38:56.810 --> 38:57.810
他不可能说不是图片

38:57.810 --> 38:58.810
咱们比方说吧

38:59.810 --> 39:00.810
给大家看一下吧

39:00.810 --> 39:01.810
我们现在在这里

39:01.810 --> 39:02.810
用一个MG元素

39:03.810 --> 39:05.810
在页面上写一个MG元素

39:05.810 --> 39:06.810
去引用他

39:07.810 --> 39:08.810
你看他是不是图片

39:09.810 --> 39:10.810
MG

39:11.810 --> 39:12.810
找到什么呢

39:12.810 --> 39:14.810
找到那个PubLake目录

39:15.810 --> 39:17.810
找到这个就是Upload

39:17.810 --> 39:18.810
Upload

39:18.810 --> 39:20.810
然后下面的就是这个文件

39:20.810 --> 39:21.810
你看他是不是图片了

39:23.810 --> 39:24.810
引这个

39:25.810 --> 39:26.810
保存

39:26.810 --> 39:27.810
好伤心

39:28.810 --> 39:30.810
这图片有问题啊

39:31.810 --> 39:32.810
我看一下啊

39:32.810 --> 39:33.810
看一下network

39:33.810 --> 39:42.620
这是怎么回事

39:43.620 --> 39:45.620
这个应该是没有问题的

39:46.620 --> 39:47.620
应该是没有问题的

39:50.130 --> 39:51.130
我看一下

39:52.130 --> 39:54.130
我这个请求这个路径

39:54.130 --> 39:56.130
请求的是这个路径

39:59.130 --> 40:00.130
请求的是这个路径

40:00.130 --> 40:01.130
没问题

40:01.130 --> 40:02.130
这路径是没问题的

40:03.130 --> 40:04.130
然后呢

40:04.130 --> 40:06.130
想用的结果

40:08.130 --> 40:09.130
明白了

40:10.130 --> 40:11.130
我这个路径

40:11.130 --> 40:12.130
被这个东西给我改了

40:12.130 --> 40:14.130
因为我犹豫没有后罪名

40:14.130 --> 40:15.130
对吧

40:15.130 --> 40:16.130
犹豫没有后罪名

40:16.130 --> 40:17.130
他被这个玩意给我改了

40:18.130 --> 40:19.130
被之前我们写的

40:19.130 --> 40:20.130
sorry

40:20.130 --> 40:21.130
这个玩意

40:21.130 --> 40:22.130
他把这个东西给我改了

40:22.130 --> 40:24.130
所以说还是有个后罪名好点

40:24.130 --> 40:25.130
因为有后罪名的话

40:25.130 --> 40:26.130
他就不会改我的这个

40:26.130 --> 40:27.130
因为他这个东西存在

40:27.130 --> 40:28.130
他会改我的什么呢

40:28.130 --> 40:29.130
改我的那个就是

40:30.130 --> 40:31.130
请求的

40:31.130 --> 40:32.130
真实的请求路径为

40:32.130 --> 40:33.130
index

40:33.130 --> 40:34.130
也挺没有

40:34.130 --> 40:36.130
他会把重定向到这个地方

40:36.130 --> 40:37.130
所以说呢

40:37.130 --> 40:38.130
我先这个东西先注释

40:38.130 --> 40:39.130
给他演示清楚了再说

40:40.130 --> 40:41.130
然后刷新

40:41.130 --> 40:42.130
你看图片不就显示出来了吗

40:42.130 --> 40:43.130
对不对

40:43.130 --> 40:44.130
最显示出来了

40:45.130 --> 40:46.130
顺便他试一个图片

40:46.130 --> 40:48.130
只不过还没有后罪名而已

40:48.130 --> 40:49.130
那么现在呢

40:49.130 --> 40:50.130
就有很多问题要解决

40:50.130 --> 40:52.130
比方说我要给他搞定

40:52.130 --> 40:53.130
后罪名怎么办

40:54.130 --> 40:55.130
那么他这里

40:55.130 --> 40:56.130
后边给你说了

40:56.130 --> 40:57.130
你可以配置这个东西

40:57.130 --> 40:58.130
storage

40:58.130 --> 41:00.130
叫做磁盘存储引擎

41:00.130 --> 41:02.130
叫做存储引擎

41:02.130 --> 41:03.130
他存储引擎可以有很多

41:03.130 --> 41:04.130
有磁盘存储

41:04.130 --> 41:05.130
有内存存储

41:05.130 --> 41:06.130
还可以发送到第三方

41:06.130 --> 41:07.130
不过他默认没有提供

41:07.130 --> 41:09.130
发送到第三方网站的

41:09.130 --> 41:10.130
比方说上传到

41:10.130 --> 41:11.130
溪流云啊

41:11.130 --> 41:12.130
这些东西

41:12.130 --> 41:13.130
他默认没有提供

41:13.130 --> 41:14.130
这些东西啊

41:14.130 --> 41:15.130
需要你自己去写

41:15.130 --> 41:16.130
那么怎么来上传到

41:16.130 --> 41:17.130
溪流云上传到一些

41:17.130 --> 41:18.130
CDN

41:18.130 --> 41:19.130
这个东西

41:19.130 --> 41:21.130
我们要讲第三方接口

41:21.130 --> 41:22.130
才能讲

41:22.130 --> 41:23.130
是另外一个课程

41:23.130 --> 41:24.130
这个课程不涉及的

41:24.130 --> 41:25.130
我就要看一下

41:25.130 --> 41:26.130
如何来存到磁盘

41:26.130 --> 41:27.130
存到磁盘的话

41:27.130 --> 41:28.130
他告诉你

41:28.130 --> 41:29.130
你可以使用这个

41:29.130 --> 41:30.130
disk storage

41:30.130 --> 41:31.130
通过model里面自带的

41:31.130 --> 41:32.130
他自带有两个

41:32.130 --> 41:33.130
一个是磁盘

41:33.130 --> 41:34.130
一个是内存

41:34.130 --> 41:35.130
就不存磁盘存内存

41:35.130 --> 41:36.130
一个是存到磁盘

41:36.130 --> 41:37.130
通过这个model

41:37.130 --> 41:38.130
通过这个调用这个

41:38.130 --> 41:40.130
disk storage

41:40.130 --> 41:42.130
能够给他进行配置

41:42.130 --> 41:43.130
然后得到一个

41:43.130 --> 41:44.130
storage对象

41:44.130 --> 41:45.130
你把这个storage

41:45.130 --> 41:46.130
配置到model storage

41:46.130 --> 41:48.130
存出引擎这里

41:48.130 --> 41:49.130
那么他就会按照这个

41:49.130 --> 41:50.130
存出的里边的规格

41:50.130 --> 41:51.130
来进行存出

41:51.130 --> 41:52.130
就这么个意思

41:52.130 --> 41:53.130
那怎么来用呢

41:53.130 --> 41:54.130
我们来看一下

41:54.130 --> 41:55.130
把个弹码复制一下

41:57.440 --> 41:58.440
也就是说

41:58.440 --> 41:59.440
他的意思就是说

41:59.440 --> 42:00.440
你不要再去配置

42:00.440 --> 42:01.440
这个什么呢

42:01.440 --> 42:02.440
配置这个disk了

42:03.440 --> 42:04.440
回到这个upload

42:04.440 --> 42:06.440
你不要再去配置

42:06.440 --> 42:07.440
这个disk了

42:07.440 --> 42:08.440
干嘛呢

42:08.440 --> 42:09.440
用这种方式

42:09.440 --> 42:13.260
设置一个storage

42:13.260 --> 42:14.260
然后呢

42:14.260 --> 42:15.260
这里把storage

42:15.260 --> 42:16.260
配置进去

42:16.260 --> 42:17.260
当然两个storage

42:17.260 --> 42:18.260
名字一样

42:18.260 --> 42:19.260
是不是可以简写

42:19.260 --> 42:20.260
好

42:20.260 --> 42:21.260
这个storage里边

42:21.260 --> 42:22.260
他又告诉你

42:22.260 --> 42:23.260
你可以配置什么呢

42:23.260 --> 42:24.260
这是一个磁盘

42:24.260 --> 42:25.260
他得到的是一个

42:25.260 --> 42:26.260
磁盘存出引擎

42:26.260 --> 42:27.260
那么这样子

42:27.260 --> 42:28.260
配置到这儿

42:28.260 --> 42:29.260
他就会把存到磁盘里边

42:29.260 --> 42:31.260
destination表示的是存到哪

42:32.260 --> 42:33.260
我这个文件

42:33.260 --> 42:34.260
应该存到哪

42:35.260 --> 42:36.260
你看一下

42:36.260 --> 42:37.260
他给你说的

42:37.260 --> 42:38.260
destination

42:39.260 --> 42:40.260
他问你

42:40.260 --> 42:41.260
你要告诉他

42:41.260 --> 42:42.260
他这个文件

42:42.260 --> 42:43.260
存到哪

42:43.260 --> 42:44.260
只不过呢

42:44.260 --> 42:45.260
你需要自己负责

42:45.260 --> 42:46.260
创建文件夹

42:46.260 --> 42:47.260
如果这个文件夹

42:47.260 --> 42:48.260
不存在的话

42:48.260 --> 42:49.260
你必须要自行负责创建

42:49.260 --> 42:50.260
比方说我这里就存在

42:50.260 --> 42:51.260
我哪里是创建的

42:51.260 --> 42:52.260
创建文件夹很简单

42:52.260 --> 42:53.260
对吧

42:53.260 --> 42:54.260
你们自己去创建

42:54.260 --> 42:55.260
如果说

42:55.260 --> 42:56.260
你们要整整的

42:56.260 --> 42:57.260
把你写的时候

42:57.260 --> 42:58.260
你可以自己去创建

42:58.260 --> 42:59.260
如果文件夹不存在的话

42:59.260 --> 43:00.260
那么这里呢

43:00.260 --> 43:01.260
我就打必说有了

43:01.260 --> 43:02.260
我就不拿来创建了

43:02.260 --> 43:03.260
那么这里呢

43:03.260 --> 43:04.260
他就通过这种

43:04.260 --> 43:05.260
这个毁掉函数

43:05.260 --> 43:06.260
cb

43:06.260 --> 43:07.260
这个毁掉函数

43:08.260 --> 43:09.260
然后呢

43:09.260 --> 43:10.260
通过第二个参数

43:10.260 --> 43:11.260
第一个参数

43:11.260 --> 43:12.260
没有错误的话

43:12.260 --> 43:13.260
就给他传第二个参数

43:13.260 --> 43:14.260
就是文件的路径

43:14.260 --> 43:15.260
实际路径

43:15.260 --> 43:16.260
那么路径在哪呢

43:16.260 --> 43:17.260
我们给他用pass

43:17.260 --> 43:18.260
来勾结一个绝对路径

43:18.260 --> 43:19.260
result

43:19.260 --> 43:20.260
就是DIR内

43:20.260 --> 43:21.260
当前目录

43:21.260 --> 43:22.260
然后返回上级

43:22.260 --> 43:23.260
返回上级

43:23.260 --> 43:24.260
然后public

43:24.260 --> 43:25.260
下面的upload

43:25.260 --> 43:26.260
对吧

43:26.260 --> 43:27.260
这是我们的路径

43:27.260 --> 43:28.260
你够把文件存到这

43:28.260 --> 43:29.260
存到这个目标

43:30.260 --> 43:31.260
对吧

43:31.260 --> 43:32.260
我们通过一个函数来返回

43:32.260 --> 43:33.260
没了意思吧

43:34.260 --> 43:35.260
那么前面两个参数掌

43:35.260 --> 43:36.260
你按用就用

43:36.260 --> 43:37.260
第一个参数是

43:37.260 --> 43:38.260
请求对象

43:38.260 --> 43:39.260
没什么好说的

43:39.260 --> 43:40.260
第一个参数是file

43:40.260 --> 43:41.260
就是我们

43:41.260 --> 43:43.260
它解析出来的文件对象

43:43.260 --> 43:44.260
就是我们之前说的这个

43:45.260 --> 43:46.260
就这个

43:46.260 --> 43:47.260
就是文件对象

43:47.260 --> 43:48.260
里面有很多信息

43:48.260 --> 43:49.260
对吧

43:49.260 --> 43:50.260
是这一部分

43:51.260 --> 43:52.260
file name

43:52.260 --> 43:53.260
file name是关键的

43:53.260 --> 43:54.260
就是文件的名称是啥

43:54.260 --> 43:55.260
就只需要给他

43:55.260 --> 43:56.260
有一个文件名是啥

43:56.260 --> 43:57.260
就行了

43:57.260 --> 43:58.260
那么这个文件名是啥

43:58.260 --> 43:59.260
他告诉你

43:59.260 --> 44:00.260
可以用这种方式

44:00.260 --> 44:01.260
比如说

44:01.260 --> 44:02.260
你可以读去file里边的

44:02.260 --> 44:03.260
field name

44:03.260 --> 44:04.260
field name

44:04.260 --> 44:06.260
field name是什么呢

44:06.260 --> 44:08.640
就这个

44:08.640 --> 44:09.640
读去这个

44:09.640 --> 44:10.640
读去这个

44:10.640 --> 44:12.640
然后加上一个横杠

44:12.640 --> 44:13.640
加上一个什么

44:13.640 --> 44:14.640
当前日期

44:14.640 --> 44:15.640
对吧

44:15.640 --> 44:16.640
比方说我自己来一个文件名

44:16.640 --> 44:17.640
那么就把文件名

44:17.640 --> 44:18.640
传过去就行了

44:18.640 --> 44:19.640
比方说我自己来

44:19.640 --> 44:20.640
生成一个文件名

44:21.640 --> 44:22.640
我们自己来写

44:22.640 --> 44:23.640
不用他这种方式了

44:24.640 --> 44:25.640
我们不是就是要

44:25.640 --> 44:26.640
搞定文件名吗

44:26.640 --> 44:27.640
文件名我打算用这种格式

44:29.640 --> 44:30.640
时间戳

44:31.640 --> 44:32.640
时间戳

44:32.640 --> 44:33.640
然后

44:33.640 --> 44:34.640
加上一个

44:35.640 --> 44:36.640
横杠

44:36.640 --> 44:37.640
加上一个横杠

44:37.640 --> 44:39.640
然后六位随机数

44:41.640 --> 44:42.640
六位随机

44:42.640 --> 44:45.080
随机制服

44:45.080 --> 44:46.080
然后

44:46.080 --> 44:48.080
第二文件后维

44:48.080 --> 44:50.080
我们打算用这种方式

44:50.080 --> 44:51.080
来完成文件名构建

44:51.080 --> 44:52.080
时间戳很简单

44:52.080 --> 44:54.080
时间戳就是time

44:54.080 --> 44:56.080
stamp

44:56.080 --> 44:57.080
时间戳用什么呢

44:57.080 --> 44:58.080
六位一个dead

44:58.080 --> 44:59.080
然后get time

44:59.080 --> 45:00.080
那么

45:00.080 --> 45:01.080
或者是dead now

45:01.080 --> 45:02.080
对不对

45:02.080 --> 45:03.080
就是个时间戳

45:05.080 --> 45:06.080
这就是个时间戳

45:07.080 --> 45:08.080
然后六位随机制服

45:08.080 --> 45:09.080
right

45:10.080 --> 45:11.080
str

45:11.080 --> 45:12.080
我们是不是玩过了

45:12.080 --> 45:14.080
怎么来用的

45:14.080 --> 45:15.080
以前咋玩的

45:17.080 --> 45:18.080
以前是咋玩的

45:19.080 --> 45:20.080
master.red

45:20.080 --> 45:21.080
0到1之间的随机数

45:21.080 --> 45:22.080
然后to stream

45:23.080 --> 45:24.080
36位

45:24.080 --> 45:25.080
对吧

45:25.080 --> 45:27.080
然后再来一个snice

45:29.080 --> 45:30.080
复个复6

45:30.080 --> 45:31.080
6位

45:31.080 --> 45:33.080
不就是六位随机制服吗

45:33.080 --> 45:35.080
6位随机制服

45:37.080 --> 45:38.080
保证文件名统

45:39.080 --> 45:42.080
然后再来一个文件后维

45:42.080 --> 45:44.080
那么文件后维是什么呢

45:44.080 --> 45:45.080
文件后维

45:45.080 --> 45:46.080
我们要通过file来获取

45:46.080 --> 45:48.080
这个file来获取

45:48.080 --> 45:50.080
这个file里面有个

45:50.080 --> 45:51.080
original name

45:51.080 --> 45:52.080
original name

45:52.080 --> 45:53.080
得到的是什么呢

45:53.080 --> 45:54.080
得到的是这个

45:54.080 --> 45:56.080
得到的是这个

45:56.080 --> 45:58.080
得到的是这个

45:58.080 --> 45:59.080
这个东西

45:59.080 --> 46:00.080
那么这个东西

46:00.080 --> 46:01.080
里面是有后维名

46:01.080 --> 46:02.080
对不对

46:02.080 --> 46:03.080
所以我们可以通过它

46:03.080 --> 46:05.080
通过它来获取

46:05.080 --> 46:06.080
来吧

46:06.080 --> 46:07.080
所以说我们这里

46:08.080 --> 46:09.080
original name

46:09.080 --> 46:11.080
就是用后计算机上的文件名称

46:12.080 --> 46:13.080
我们用它

46:13.080 --> 46:14.080
file

46:14.080 --> 46:15.080
通过它

46:15.080 --> 46:16.080
都是个名称

46:16.080 --> 46:17.080
然后我们可以用什么呢

46:17.080 --> 46:18.080
pass

46:18.080 --> 46:19.080
叫est name

46:19.080 --> 46:20.080
对吧

46:20.080 --> 46:21.080
可以通过它来得到后维名

46:21.080 --> 46:22.080
对不对

46:26.860 --> 46:27.860
加进去

46:27.860 --> 46:28.860
好

46:28.860 --> 46:29.860
然后我们无非就是把这个

46:29.860 --> 46:30.860
三个拼接起来

46:30.860 --> 46:31.860
是不是一个file name

46:31.860 --> 46:32.860
等于什么呢

46:32.860 --> 46:33.860
等于三个拼接起来

46:33.860 --> 46:34.860
一个是

46:34.860 --> 46:36.860
time stamp

46:36.860 --> 46:37.860
一个是

46:37.860 --> 46:38.860
red stream

46:39.860 --> 46:40.860
一个是

46:41.860 --> 46:42.860
est

46:42.860 --> 46:43.860
对吧

46:43.860 --> 46:44.860
三个拼接起来

46:44.860 --> 46:45.860
这个给个横杠

46:45.860 --> 46:48.500
好了

46:48.500 --> 46:49.500
写好了

46:49.500 --> 46:50.500
那么最后我们调一个毁掉函数

46:50.500 --> 46:51.500
没有错误

46:51.500 --> 46:52.500
没有错误

46:52.500 --> 46:54.500
然后我把这个file name传给你

46:54.500 --> 46:55.500
好

46:55.500 --> 46:56.500
保存

46:56.500 --> 46:59.000
你看一下

46:59.000 --> 47:00.000
现在

47:00.000 --> 47:01.000
刷新

47:01.000 --> 47:02.000
这里

47:02.000 --> 47:03.000
这个

47:03.000 --> 47:04.000
也没几区掉

47:04.000 --> 47:07.910
刷新

47:07.910 --> 47:08.910
好

47:08.910 --> 47:09.910
123

47:09.910 --> 47:10.910
拿一个吧

47:10.910 --> 47:12.910
拿一个接吃瓜

47:12.910 --> 47:13.910
提交

47:14.910 --> 47:16.910
完成了处理

47:16.910 --> 47:17.910
然后我们看一下服务器

47:17.910 --> 47:18.910
是不是完成了处理

47:18.910 --> 47:19.910
你看

47:19.910 --> 47:20.910
得到了

47:20.910 --> 47:21.910
是不是得到了

47:21.910 --> 47:22.910
前面是个时间戳

47:22.910 --> 47:24.910
后边是一个水积制服

47:24.910 --> 47:25.910
然后点gif

47:25.910 --> 47:26.910
是不是吃瓜

47:26.910 --> 47:27.910
对吧

47:27.910 --> 47:28.910
就完成了

47:28.910 --> 47:30.910
这个完全图片上传了

47:30.910 --> 47:31.910
那么后边

47:31.910 --> 47:32.910
我们要做的事情

47:32.910 --> 47:33.910
无非就是把这个图片

47:33.910 --> 47:34.910
响应个客户端

47:34.910 --> 47:35.910
那怎么来响应呢

47:35.910 --> 47:36.910
在这边

47:36.910 --> 47:37.910
是不是我们在这里

47:37.910 --> 47:38.910
要在这里完成响应

47:38.910 --> 47:39.910
对不对

47:39.910 --> 47:40.910
那么我该响应个客户端的

47:40.910 --> 47:41.910
响应个图片路径

47:41.910 --> 47:43.910
表示我们响应个接声格是吧

47:43.910 --> 47:44.910
那么要响应图片路径的话

47:44.910 --> 47:45.910
我要就要获取

47:45.910 --> 47:46.910
它之前的图片

47:46.910 --> 47:47.910
保存在哪的

47:47.910 --> 47:48.910
对吧

47:48.910 --> 47:49.910
都是水积的对不对

47:49.910 --> 47:50.910
保存在哪的

47:50.910 --> 47:51.910
我们知道

47:51.910 --> 47:52.910
它通过前面的中间键

47:52.910 --> 47:53.910
处理过后

47:53.910 --> 47:54.910
我们在这里

47:54.910 --> 47:55.910
会获取到一个什么的

47:55.910 --> 47:56.910
什么的

47:56.910 --> 47:57.910
会获取到一个req

47:57.910 --> 47:58.910
对象里面的一个file

47:58.910 --> 47:59.910
对不对

47:59.910 --> 48:00.910
这不可以获取到file

48:00.910 --> 48:01.910
如果水积上传多个的话

48:01.910 --> 48:02.910
可以获取到什么files

48:02.910 --> 48:03.910
我们再来

48:04.910 --> 48:06.910
再来一个吃瓜

48:06.910 --> 48:07.910
提交

48:08.910 --> 48:10.910
然后我们在这里

48:10.910 --> 48:12.910
看一下这个

48:13.910 --> 48:14.910
这个什么

48:14.910 --> 48:15.910
控制台

48:16.910 --> 48:17.910
field name

48:17.910 --> 48:18.910
image

48:18.910 --> 48:19.910
orange name

48:19.910 --> 48:20.910
就是客户端的文件名称

48:20.910 --> 48:21.910
对吧

48:21.910 --> 48:22.910
然后呢

48:22.910 --> 48:24.910
mi me type

48:24.910 --> 48:26.910
就是gf图片

48:26.910 --> 48:27.910
distance

48:27.910 --> 48:28.910
我们保存到这的

48:28.910 --> 48:29.910
是个决定路径

48:29.910 --> 48:30.910
然后呢

48:30.910 --> 48:31.910
file name

48:31.910 --> 48:33.910
我们的文件名是这个名

48:33.910 --> 48:34.910
pass

48:34.910 --> 48:35.910
整个路径

48:35.910 --> 48:36.910
整个路径

48:36.910 --> 48:37.910
就是完整的路径

48:37.910 --> 48:38.910
这个路径

48:38.910 --> 48:39.910
对吧

48:39.910 --> 48:40.910
给他想一个什么呢

48:40.910 --> 48:41.910
是不是文件名拿到就行了

48:41.910 --> 48:42.910
file name

48:42.910 --> 48:43.910
文件名拿到就行了

48:43.910 --> 48:44.910
我们刚想印到的什么呢

48:44.910 --> 48:45.910
就是我们的UIL地址

48:45.910 --> 48:47.910
访问的UIL地址等于什么呢

48:47.910 --> 48:48.910
等于

48:49.910 --> 48:50.910
upload

48:50.910 --> 48:51.910
对吧

48:51.910 --> 48:52.910
是不是请求这个

48:52.910 --> 48:53.910
请求这个地址

48:53.910 --> 48:54.910
然后呢

48:54.910 --> 48:55.910
后边跟上一个文件名

48:55.910 --> 48:56.910
文件名是什么

48:56.910 --> 48:58.910
就是req.file.file name

48:58.910 --> 48:59.910
对吧

48:59.910 --> 49:00.910
什么听见出来

49:00.910 --> 49:01.910
是不是就是访问这个的地址

49:01.910 --> 49:03.910
访问这个gf的地址

49:03.910 --> 49:04.910
然后呢

49:04.910 --> 49:05.910
我们把一个UIL地址呢

49:05.910 --> 49:06.910
通过一个接声格式也好

49:06.910 --> 49:07.910
任何格式也好

49:07.910 --> 49:08.910
想一个客户端

49:08.910 --> 49:09.910
我服务器处理完了

49:09.910 --> 49:10.910
我给你一个

49:10.910 --> 49:11.910
就是比方说

49:11.910 --> 49:12.910
扣的0

49:12.910 --> 49:13.910
message

49:13.910 --> 49:14.910
没有错误消息

49:14.910 --> 49:15.910
然后呢

49:15.910 --> 49:16.910
我们的地址呢

49:16.910 --> 49:17.910
data

49:17.910 --> 49:18.910
就这个UIL地址

49:18.910 --> 49:19.910
是不是想一个客户端

49:19.910 --> 49:20.910
就完事了

49:20.910 --> 49:21.910
那么客户端这边

49:21.910 --> 49:22.910
客户端这边呢

49:22.910 --> 49:23.910
我们就可以使用那个

49:23.910 --> 49:24.910
接声

49:24.910 --> 49:25.910
来解析

49:25.910 --> 49:26.910
输出这个认识

49:26.910 --> 49:27.910
来看一下吧

49:28.910 --> 49:32.890
刷新

49:32.890 --> 49:33.890
然后提交

49:35.890 --> 49:36.890
你看看

49:36.890 --> 49:37.890
是不是完成了

49:37.890 --> 49:38.890
对吧

49:38.890 --> 49:39.890
我们来访一下这个路径

49:39.890 --> 49:42.260
看一下能不能

49:42.260 --> 49:43.260
说可以拿到这个图片了

49:43.260 --> 49:44.260
那么客户端那边

49:44.260 --> 49:45.260
还可以进一步处理

49:45.260 --> 49:46.260
比方说客户端这边

49:46.260 --> 49:47.260
这样子

49:47.260 --> 49:48.260
客户端这边呢

49:48.260 --> 49:49.260
我们

49:50.260 --> 49:51.260
拿到这个路径里边

49:51.260 --> 49:53.260
路径里边是不是有个UIL属性

49:53.260 --> 49:54.260
UIL属性里边

49:54.260 --> 49:55.260
我们就可以用那个

49:55.260 --> 49:58.260
再给他加一个img元素

49:58.260 --> 49:59.260
img元素

49:59.260 --> 50:01.260
我们这里得到一个img

50:01.260 --> 50:05.790
img document

50:07.790 --> 50:09.790
我写的比较简单

50:09.790 --> 50:10.790
就大个大字

50:10.790 --> 50:11.790
我们把个原理讲清楚

50:11.790 --> 50:12.790
就行了

50:12.790 --> 50:13.790
大字就是这么个流程

50:14.790 --> 50:15.790
叫什么呢

50:15.790 --> 50:17.790
叫UIL

50:19.790 --> 50:20.790
叫data

50:20.790 --> 50:22.790
我们UIL是创了个data里边的

50:22.790 --> 50:23.790
节省格式data里边的

50:23.790 --> 50:24.790
来吧

50:24.790 --> 50:25.790
选择个文件

50:25.790 --> 50:26.790
上传

50:26.790 --> 50:27.790
提交

50:27.790 --> 50:29.790
服务器那边保存了

50:29.790 --> 50:31.790
服务器那边保存了

50:31.790 --> 50:33.790
服务器那边保存了GNF

50:33.790 --> 50:34.790
然后呢

50:34.790 --> 50:35.790
把路径

50:35.790 --> 50:36.790
想应给了客户端

50:36.790 --> 50:37.790
客户端那边生成

50:37.790 --> 50:38.790
把图片路径放进去

50:38.790 --> 50:39.790
那么这个时候

50:39.790 --> 50:40.790
读的是什么

50:40.790 --> 50:41.790
读的是

50:42.790 --> 50:43.790
是不是服务器的图片

50:43.790 --> 50:44.790
对不对

50:44.790 --> 50:45.790
就这么个流程

50:45.790 --> 50:46.790
比方说我们再换一个

50:47.790 --> 50:48.790
提交

50:49.790 --> 50:50.790
对不对

50:50.790 --> 50:51.790
OK

50:51.790 --> 50:52.790
那就完事了

50:52.790 --> 50:53.790
好了

50:53.790 --> 50:54.790
那么接下来

50:54.790 --> 50:55.790
再来说一下

50:55.790 --> 50:56.790
一些其他的

50:56.790 --> 50:57.790
一些细致末节的东西吧

50:57.790 --> 50:58.790
比方说

50:58.790 --> 51:00.790
他后边说

51:00.790 --> 51:02.790
limit

51:02.790 --> 51:03.790
就是限制

51:03.790 --> 51:04.790
就是有些图片

51:04.790 --> 51:05.790
不能太大了

51:05.790 --> 51:06.790
我们只要限制一下

51:06.790 --> 51:07.790
他的文件尺寸

51:07.790 --> 51:09.790
那么你可以配置这个limit

51:09.790 --> 51:10.790
那么来配置一下吧

51:11.790 --> 51:12.790
比方说我们这里

51:12.790 --> 51:13.790
Storage配置好了

51:13.790 --> 51:14.790
我们再配置一个limit

51:15.790 --> 51:16.790
limit

51:16.790 --> 51:17.790
他这里边有很多配置

51:17.790 --> 51:19.790
他告诉你哪些配置呢

51:19.790 --> 51:22.790
他说有field name size

51:23.790 --> 51:25.790
名字的最大长度

51:26.790 --> 51:28.790
就是field name size

51:28.790 --> 51:29.790
配置什么呢

51:29.790 --> 51:30.790
配置这个玩意儿

51:30.790 --> 51:32.790
配置了这个玩意儿的最大长度

51:32.790 --> 51:33.790
就这个名字可以写多长

51:33.790 --> 51:34.790
这个东西

51:34.790 --> 51:36.790
我们一般就拦着甩掉了

51:36.790 --> 51:37.790
这是这个

51:40.790 --> 51:41.790
这个

51:42.790 --> 51:43.790
field size

51:43.790 --> 51:45.790
field值的最大长度

51:45.790 --> 51:46.790
配置了什么呢

51:46.790 --> 51:47.790
配置了这种

51:47.790 --> 51:49.790
这种值最大长度

51:50.790 --> 51:51.790
field

51:51.790 --> 51:53.790
非文件的field的最大长度

51:53.790 --> 51:54.790
还有这个

51:54.790 --> 51:56.790
什么file size

51:56.790 --> 51:58.790
文件的最大长度

51:58.790 --> 52:00.790
文件的最大长度

52:00.790 --> 52:02.790
file是文件的最大数量

52:02.790 --> 52:04.790
就是这么一个意思

52:05.790 --> 52:06.790
那么比方说

52:06.790 --> 52:07.790
我们这里呢

52:07.790 --> 52:08.790
文件最大长度

52:08.790 --> 52:09.790
我们配置一下吧

52:10.790 --> 52:11.790
file size

52:11.790 --> 52:12.790
配置一下

52:12.790 --> 52:14.790
格式是怎么写的呢

52:14.790 --> 52:15.790
他默认是无线的

52:15.790 --> 52:16.790
无线肯定不好

52:16.790 --> 52:17.790
他说在这里

52:17.790 --> 52:18.790
该怎么写在这里

52:18.790 --> 52:19.790
可以找到

52:19.790 --> 52:20.790
file size

52:23.940 --> 52:24.940
integer

52:26.940 --> 52:28.940
file size

52:28.940 --> 52:30.940
integer是一个数字

52:30.940 --> 52:31.940
一个整数

52:32.940 --> 52:34.940
他说他表示的是

52:34.940 --> 52:35.940
字结束

52:35.940 --> 52:36.940
字结束

52:36.940 --> 52:38.940
默认值是infinity

52:38.940 --> 52:39.940
就是默认值是无穷大的

52:39.940 --> 52:41.940
那么这里的字价是字结束

52:41.940 --> 52:42.940
我最多允许

52:42.940 --> 52:44.940
10kb的图片吧

52:44.940 --> 52:45.940
好吧

52:45.940 --> 52:47.940
我最多允许10kb的图片

52:47.940 --> 52:52.940
我就写一个10x1024byte

52:52.940 --> 52:53.940
对吧

52:53.940 --> 52:54.940
1024字结

52:54.940 --> 52:55.940
好

52:55.940 --> 52:56.940
我们这里就设置好了

52:56.940 --> 52:57.940
保存

52:57.940 --> 52:58.940
我们再来一次

52:58.940 --> 52:59.940
这两个图片

52:59.940 --> 53:00.940
有没有超过10kb

53:00.940 --> 53:01.940
应该有

53:01.940 --> 53:02.940
应该有超过10kb

53:02.940 --> 53:04.940
来 提交

53:04.940 --> 53:05.940
你看

53:05.940 --> 53:06.940
服务器给你

53:06.940 --> 53:07.940
包了一个错

53:07.940 --> 53:09.940
告诉你什么

53:09.940 --> 53:10.940
internal server

53:10.940 --> 53:11.940
对不对

53:11.940 --> 53:12.940
所以internal server

53:12.940 --> 53:13.940
表示服务器那边

53:13.940 --> 53:14.940
包了一个错误

53:14.940 --> 53:15.940
那么这个错误

53:15.940 --> 53:16.940
是被谁补货到了

53:16.940 --> 53:18.940
是被之前那个补货到了

53:18.940 --> 53:20.940
是被这个玩意补货到了

53:21.940 --> 53:22.940
我们之前不是写过

53:22.940 --> 53:23.940
一个错误处理吗

53:23.940 --> 53:24.940
他跑了一个错误出来

53:24.940 --> 53:26.940
被他来补货到了

53:26.940 --> 53:27.940
对不对

53:27.940 --> 53:28.940
是这么个意思

53:28.940 --> 53:29.940
他被他补货到了

53:29.940 --> 53:30.940
那么这个时候

53:30.940 --> 53:31.940
我们扣到那边

53:31.940 --> 53:32.940
就收不到任何的消息了

53:32.940 --> 53:33.940
对不对

53:33.940 --> 53:34.940
因为500错误有很多情况

53:34.940 --> 53:35.940
他就收不到

53:35.940 --> 53:36.940
收不到这个消息了

53:36.940 --> 53:37.940
所以说呢

53:37.940 --> 53:38.940
这里呢

53:38.940 --> 53:39.940
我们还可以

53:39.940 --> 53:40.940
他还可以

53:40.940 --> 53:41.940
他这里告诉你

53:41.940 --> 53:42.940
你还可以处理一下

53:42.940 --> 53:43.940
后边

53:43.940 --> 53:44.940
他错误处理机制

53:44.940 --> 53:46.940
马尔特发生了错误过后

53:46.940 --> 53:47.940
他只是把错误

53:47.940 --> 53:48.940
跑给express

53:48.940 --> 53:49.940
如果说你要

53:49.940 --> 53:50.940
进一步处理的话

53:50.940 --> 53:52.940
你可以专门来写一个

53:52.940 --> 53:53.940
就是在后边进行处理

53:53.940 --> 53:54.940
我们这里有个

53:54.940 --> 53:55.940
中间键是最方便的

53:55.940 --> 53:56.940
对不对

53:56.940 --> 53:57.940
有个中间键来

53:57.940 --> 53:58.940
处理错误

53:58.940 --> 53:59.940
他的错误类型

53:59.940 --> 54:00.940
叫做matter

54:00.940 --> 54:01.940
matter error

54:01.940 --> 54:02.940
他是这个错误类型

54:02.940 --> 54:03.940
因此呢

54:03.940 --> 54:04.940
我们在这里

54:05.940 --> 54:07.940
这些东西是非常灵活的

54:07.940 --> 54:08.940
去处理就行了

54:08.940 --> 54:13.590
我们倒入这个matter

54:13.590 --> 54:14.590
永远学程序

54:14.590 --> 54:15.590
永远不要去使用

54:15.590 --> 54:17.590
被一个方式

54:17.590 --> 54:18.590
一开始你可以这样做

54:18.590 --> 54:19.590
但是你一定要知道

54:19.590 --> 54:20.590
这些东西处理起来

54:20.590 --> 54:21.590
非常灵活的

54:21.590 --> 54:22.590
matter

54:22.590 --> 54:23.590
然后呢

54:23.590 --> 54:24.590
我们这个error

54:24.590 --> 54:25.590
还有可能是一个

54:25.590 --> 54:26.590
我再前面判断一下吧

54:26.590 --> 54:28.590
如果error instance

54:28.590 --> 54:29.590
是一个matter

54:29.590 --> 54:30.590
里边的什么

54:30.590 --> 54:31.590
matter error

54:31.590 --> 54:32.590
他是这种错误

54:34.590 --> 54:35.590
如果说他是

54:35.590 --> 54:36.590
这种错误的话

54:36.590 --> 54:37.590
我们把这个错误

54:37.590 --> 54:38.590
浮起输出一下吧

54:39.590 --> 54:40.590
浮起输出一下

54:40.590 --> 54:41.590
看那个错误

54:41.590 --> 54:42.590
消息里边是啥

54:42.590 --> 54:43.590
然后呢

54:43.590 --> 54:44.590
我们res

54:44.590 --> 54:45.590
给他一个stand

54:46.590 --> 54:48.590
还是给他一个200吧

54:48.590 --> 54:49.590
然后我们主要是

54:49.590 --> 54:50.590
把个错误信息

54:50.590 --> 54:51.590
给他发送过去

54:51.590 --> 54:53.590
错误信息发送过去

54:54.590 --> 54:55.590
send

54:55.590 --> 54:56.590
给一次message

54:56.590 --> 54:57.590
给一次error

54:59.590 --> 55:00.590
error

55:04.970 --> 55:05.970
error.message

55:07.970 --> 55:08.970
好

55:08.970 --> 55:09.970
然后呢

55:09.970 --> 55:10.970
结束这个函数

55:10.970 --> 55:11.970
试一下吧

55:11.970 --> 55:12.970
我们来这里试一下

55:13.970 --> 55:14.970
现在呢

55:14.970 --> 55:15.970
我们在这里再刷新一次

55:15.970 --> 55:16.970
然后选择一个文件

55:16.970 --> 55:17.970
然后呢

55:17.970 --> 55:18.970
再提交

55:18.970 --> 55:19.970
报了一个错误

55:21.970 --> 55:22.970
我们这里再看一下

55:22.970 --> 55:23.970
浮起那边错误的

55:23.970 --> 55:24.970
错误的打印

55:24.970 --> 55:25.970
打印结果

55:25.970 --> 55:27.970
他说file too large

55:27.970 --> 55:28.970
too large

55:28.970 --> 55:29.970
他的消息的名字

55:29.970 --> 55:31.970
消息就是file too large

55:31.970 --> 55:32.970
ok

55:32.970 --> 55:33.970
那就行了

55:33.970 --> 55:34.970
那我就把这个错误

55:34.970 --> 55:35.970
直接发送过去

55:35.970 --> 55:36.970
两败

55:36.970 --> 55:37.970
为什么响应两败

55:37.970 --> 55:38.970
这边

55:39.970 --> 55:40.970
这边没有输出

55:40.970 --> 55:41.970
这边没有输出

55:42.970 --> 55:43.970
我们扣武档那边是没有输出

55:43.970 --> 55:44.970
现在的扣武档

55:44.970 --> 55:45.970
报了个错误是什么呢

55:45.970 --> 55:46.970
是因为我这个

55:46.970 --> 55:47.970
浮起响应的消息格式

55:47.970 --> 55:49.970
比较data为lau

55:49.970 --> 55:50.970
data是undefined

55:50.970 --> 55:51.970
undefined的

55:51.970 --> 55:52.970
我们把img src

55:52.970 --> 55:53.970
设为undefined的

55:53.970 --> 55:54.970
那肯定要出问题

55:54.970 --> 55:55.970
所以说我们这里

55:55.970 --> 55:56.970
先把个输出

55:56.970 --> 55:57.970
输出浮起的响应结果

55:57.970 --> 55:58.970
我们这里判断一下

55:59.970 --> 56:00.970
判断一下

56:00.970 --> 56:01.970
如果说risp的code

56:01.970 --> 56:02.970
有值

56:02.970 --> 56:03.970
就表示有错误

56:03.970 --> 56:04.970
对不对

56:04.970 --> 56:05.970
有错误的话

56:05.970 --> 56:06.970
我们ornat

56:06.970 --> 56:07.970
错误消息

56:07.970 --> 56:08.970
message

56:09.970 --> 56:10.970
ls的话

56:10.970 --> 56:11.970
表示没有错误

56:11.970 --> 56:12.970
没有错误的话

56:12.970 --> 56:13.970
我们把这个加进去

56:15.970 --> 56:16.970
加进去

56:17.970 --> 56:18.970
稍息

56:19.970 --> 56:20.970
来吧

56:22.970 --> 56:23.970
提交

56:23.970 --> 56:24.970
fire to large

56:24.970 --> 56:25.970
对吧

56:25.970 --> 56:26.970
你看浮起响应的

56:26.970 --> 56:27.970
code 500

56:27.970 --> 56:28.970
message fire to large

56:28.970 --> 56:29.970
对吧

56:29.970 --> 56:30.970
这个code

56:30.970 --> 56:31.970
也可以改一改

56:31.970 --> 56:32.970
随便你

56:32.970 --> 56:33.970
灵活处理

56:33.970 --> 56:34.970
就是什么回事

56:35.970 --> 56:36.970
看一下吃瓜

56:36.970 --> 56:37.970
吃瓜行不行

56:39.970 --> 56:40.970
有点狠了

56:40.970 --> 56:41.970
其实客户端那边

56:41.970 --> 56:43.970
为了提高用户体验

56:43.970 --> 56:44.970
客户端那边

56:44.970 --> 56:45.970
还可以在客户端那边

56:45.970 --> 56:46.970
先给你限制

56:46.970 --> 56:47.970
根本不让你上传

56:47.970 --> 56:49.970
我现在是在浮起判断的

56:49.970 --> 56:50.970
浮起一定要判断

56:50.970 --> 56:51.970
原因的

56:51.970 --> 56:52.970
还是我们之前讲的

56:52.970 --> 56:54.970
验证的浮起必须要验证的

56:54.970 --> 56:55.970
但是客户端那边

56:55.970 --> 56:56.970
也可以先做验证

56:56.970 --> 56:57.970
提高用户体验

56:57.970 --> 56:58.970
怎么验证呢

56:58.970 --> 56:59.970
你去白度一下

56:59.970 --> 57:01.970
这个东西我不再去说了

57:01.970 --> 57:02.970
就是客户端那边

57:03.970 --> 57:04.970
满满中要求

57:04.970 --> 57:05.970
浮起是一定要验证的

57:05.970 --> 57:07.970
我们给他提供到

57:07.970 --> 57:08.970
50KB吧

57:08.970 --> 57:09.970
50KB应该够了吧

57:11.970 --> 57:12.970
刷新

57:12.970 --> 57:13.970
再来吃个瓜

57:14.970 --> 57:15.970
你吃个瓜

57:16.970 --> 57:18.970
这个文件到底有多少他呀

57:18.970 --> 57:24.840
我有他100多KB啊

57:24.840 --> 57:25.840
这个文件

57:25.840 --> 57:26.840
那行吧我给你传一个

57:26.840 --> 57:27.840
150KB吧

57:28.840 --> 57:29.840
150KB

57:30.840 --> 57:31.840
一般的浮起不能印象太大了

57:31.840 --> 57:32.840
看具体情况

57:32.840 --> 57:34.840
总之根据具体情况来

57:34.840 --> 57:35.840
来吃个瓜

57:36.840 --> 57:37.840
现在就可以吃了

57:37.840 --> 57:39.840
现在这个东西

57:39.840 --> 57:40.840
太大了

57:40.840 --> 57:41.840
传不过去

57:41.840 --> 57:43.840
这是文件大小的

57:43.840 --> 57:45.840
我真的是不太像

57:45.840 --> 57:46.840
我后边讲了

57:46.840 --> 57:48.840
我希望能够自己看文道

57:48.840 --> 57:49.840
但是我有一不是直播客

57:49.840 --> 57:50.840
我又不担心

57:50.840 --> 57:51.840
担心你们又看不懂

57:52.840 --> 57:54.840
后边可以看一下这个吧

57:54.840 --> 57:55.840
File or Filter

57:55.840 --> 57:56.840
他表示说

57:56.840 --> 57:57.840
你这个文件

57:57.840 --> 57:58.840
什么文件可以跳过

57:58.840 --> 57:59.840
什么文件不能跳过

58:01.840 --> 58:03.840
那么这个东西就是

58:03.840 --> 58:05.840
文件的就是

58:05.840 --> 58:06.840
文件的那个

58:07.840 --> 58:08.840
类型的对吧

58:08.840 --> 58:09.840
文件的类型的

58:09.840 --> 58:10.840
如果说你有错误的话

58:10.840 --> 58:12.840
你可以拨一个错误出来

58:12.840 --> 58:13.840
甚至

58:13.840 --> 58:14.840
就这么个意思

58:14.840 --> 58:15.840
比方说吧

58:15.840 --> 58:16.840
我们File or Filter

58:16.840 --> 58:17.840
来写一个

58:18.840 --> 58:19.840
这里面再配置一个

58:19.840 --> 58:20.840
File or Filter

58:22.840 --> 58:23.840
File or Filter

58:23.840 --> 58:24.840
去配置一下

58:25.840 --> 58:26.840
一个函数

58:26.840 --> 58:27.840
它就是个函数

58:27.840 --> 58:28.840
函数里边

58:28.840 --> 58:29.840
它可以传一个Rake对象

58:29.840 --> 58:30.840
然后呢File对象

58:30.840 --> 58:31.840
问你这个文件

58:31.840 --> 58:32.840
允不允许

58:33.840 --> 58:34.840
要不要跳过

58:34.840 --> 58:35.840
允不允许

58:35.840 --> 58:36.840
就是它保存之前

58:36.840 --> 58:37.840
它就会问你

58:37.840 --> 58:38.840
这个文件的

58:38.840 --> 58:39.840
要不要处理

58:39.840 --> 58:40.840
那么我们判断一下

58:40.840 --> 58:41.840
文件的后罪名

58:41.840 --> 58:42.840
验证文件

58:42.840 --> 58:43.840
后罪名

58:44.840 --> 58:45.840
好怎么验证呢

58:45.840 --> 58:46.840
我们可以用这种方式

58:46.840 --> 58:48.840
还是用Pass的

58:48.840 --> 58:49.840
主要是验证一下

58:49.840 --> 58:50.840
文件的

58:50.840 --> 58:51.840
文件的什么

58:51.840 --> 58:52.840
我们可以用

58:52.840 --> 58:53.840
Original Name

58:53.840 --> 58:54.840
验证一下文件的

58:54.840 --> 58:55.840
把后罪名拿到

58:55.840 --> 58:56.840
对不对

58:58.840 --> 58:59.840
后罪名拿到

58:59.840 --> 59:00.840
那么我们这个

59:00.840 --> 59:01.840
可以写一个

59:01.840 --> 59:02.840
后罪名就是

59:02.840 --> 59:03.840
White List

59:03.840 --> 59:04.840
写个白名单

59:04.840 --> 59:05.840
后罪名我允许哪些

59:05.840 --> 59:06.840
允许.jpg

59:06.840 --> 59:08.840
允许.gif

59:08.840 --> 59:10.840
允许.png

59:10.840 --> 59:11.840
这些都允许

59:11.840 --> 59:13.840
其他就不要来了

59:13.840 --> 59:14.840
所以我们就判断一下

59:14.840 --> 59:15.840
非常简单

59:15.840 --> 59:17.840
这个债不在这个白名单当中

59:17.840 --> 59:19.840
如果说在这个白名单当中

59:19.840 --> 59:23.840
White List Include

59:24.840 --> 59:26.840
如果说在这个白名单当中

59:26.840 --> 59:28.840
那么就很简单了

59:28.840 --> 59:29.840
我就

59:30.840 --> 59:31.840
允许

59:31.840 --> 59:32.840
对不对

59:32.840 --> 59:33.840
有允许

59:33.840 --> 59:34.840
好 else 就不允许

59:34.840 --> 59:35.840
不允许的话

59:35.840 --> 59:36.840
我该报一个错

59:36.840 --> 59:38.840
如果说你该传Force的话

59:38.840 --> 59:39.840
他就是不报错

59:39.840 --> 59:40.840
他会直接跳舞

59:40.840 --> 59:41.840
我要报错了

59:41.840 --> 59:42.840
那么我就留一个Error

59:46.840 --> 59:48.840
来个评价个字不错吧

59:48.840 --> 59:50.840
yourestname

59:50.840 --> 59:51.840
of

59:51.840 --> 59:52.840
什么呢

59:52.840 --> 59:53.840
estname

59:53.840 --> 59:55.840
你这个后罪名

59:55.840 --> 59:56.840
not

59:57.840 --> 59:58.840
is not

59:58.840 --> 59:59.840
support

01:00:01.840 --> 01:00:03.840
不支持你这个文件后罪名

01:00:03.840 --> 01:00:04.840
对不对

01:00:04.840 --> 01:00:05.840
该报一个错误是完事了

01:00:05.840 --> 01:00:06.840
好 我们写好了过

01:00:06.840 --> 01:00:07.840
再来看吧

01:00:07.840 --> 01:00:08.840
我们现在到这里

01:00:08.840 --> 01:00:10.840
来个压缩吧

01:00:10.840 --> 01:00:11.840
来个压缩

01:00:11.840 --> 01:00:15.860
我把压缩包上传

01:00:15.860 --> 01:00:16.860
选择文件

01:00:16.860 --> 01:00:18.860
我现在选择个压缩包

01:00:18.860 --> 01:00:19.860
提交

01:00:19.860 --> 01:00:20.860
你看

01:00:20.860 --> 01:00:21.860
yourestname

01:00:21.860 --> 01:00:22.860
isnotsupport

01:00:22.860 --> 01:00:23.860
对不对

01:00:23.860 --> 01:00:24.860
就完事了

01:00:25.860 --> 01:00:27.860
这就是文件上传

01:00:27.860 --> 01:00:28.860
为了提高用户体验

01:00:28.860 --> 01:00:29.860
你客户端那边

01:00:29.860 --> 01:00:30.860
是不是

01:00:30.860 --> 01:00:31.860
因为这个元素

01:00:31.860 --> 01:00:32.860
它是可以限制文件

01:00:32.860 --> 01:00:33.860
扩展名的

01:00:33.860 --> 01:00:34.860
是可以限制的

01:00:34.860 --> 01:00:36.860
其实它没有办法强制限制的

01:00:36.860 --> 01:00:37.860
但是它可以显示

01:00:37.860 --> 01:00:38.860
它可以显示的

01:00:38.860 --> 01:00:39.860
你这里不显示

01:00:39.860 --> 01:00:40.860
对不对

01:00:40.860 --> 01:00:41.860
它可以显示的

01:00:41.860 --> 01:00:42.860
就在元素里面写

01:00:42.860 --> 01:00:43.860
写法叫啥呢

01:00:43.860 --> 01:00:45.860
就客户端那边也可以显示的

01:00:45.860 --> 01:00:46.860
客户端显示一定是

01:00:46.860 --> 01:00:47.860
服务器一定要显示的

01:00:47.860 --> 01:00:48.860
客户端显示

01:00:48.860 --> 01:00:49.860
只是为了提高用户体验

01:00:49.860 --> 01:00:51.860
这个玩意是显示啥呢

01:00:51.860 --> 01:00:52.860
叫Feature

01:00:52.860 --> 01:00:53.860
还有啥

01:00:53.860 --> 01:00:54.860
你去啥呀

01:00:54.860 --> 01:00:55.860
我现在忘了

01:00:56.860 --> 01:00:57.860
你们可以关这个视频的

01:00:57.860 --> 01:00:58.860
我这一刻已经讲完了

01:00:58.860 --> 01:01:00.860
然后我自己去查一下吧

01:01:02.860 --> 01:01:03.860
Input

01:01:04.860 --> 01:01:05.860
MDN

01:01:05.860 --> 01:01:08.300
去查一下

01:01:08.300 --> 01:01:09.300
Input元素的MDN

01:01:09.300 --> 01:01:10.300
它里面的属性

01:01:10.300 --> 01:01:11.300
全部给我列出来

01:01:11.300 --> 01:01:12.300
我看一下

01:01:16.760 --> 01:01:17.760
Accept

01:01:17.760 --> 01:01:18.760
好像是这个

01:01:19.760 --> 01:01:20.760
我这是啥语言啊

01:01:20.760 --> 01:01:23.260
这是

01:01:23.260 --> 01:01:28.330
中文

01:01:28.330 --> 01:01:29.330
Type

01:01:29.330 --> 01:01:30.330
Accept

01:01:30.330 --> 01:01:31.330
就这个

01:01:32.330 --> 01:01:35.980
就这个

01:01:35.980 --> 01:01:36.980
Accept

01:01:36.980 --> 01:01:37.980
等于什么呢

01:01:37.980 --> 01:01:39.980
等于Image

01:01:39.980 --> 01:01:40.980
信号

01:01:40.980 --> 01:01:41.980
OK

01:01:41.980 --> 01:01:42.980
刷新

01:01:42.980 --> 01:01:43.980
它只是在

01:01:47.260 --> 01:01:48.260
这就选择不了了

01:01:48.260 --> 01:01:49.260
这就选择不了了

01:01:49.260 --> 01:01:50.260
就这么个意思

01:01:52.260 --> 01:01:53.260
OK

01:01:53.260 --> 01:01:54.260
这就是那个

01:01:54.260 --> 01:01:56.260
整个的文件上传的流程

01:01:56.260 --> 01:01:57.260
就这么多了

