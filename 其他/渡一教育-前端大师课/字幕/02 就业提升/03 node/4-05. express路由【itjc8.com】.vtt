WEBVTT

00:00.300 --> 00:05.180
看一下我们的工程 现在我们越来越接近我们的目标了

00:05.180 --> 00:07.060
现在我们可以硬设静态资源了

00:07.060 --> 00:09.900
给它页面的对吧 我们服务器有这么一个功能

00:09.900 --> 00:11.740
给它我们想要的给它的页面

00:11.740 --> 00:14.980
那么这些页面的一般是用5u啊rex的一些打出来的对吧

00:14.980 --> 00:16.420
把它放到这就行了

00:16.420 --> 00:19.140
我们访问这个服务器呢就可以直接访问到一个页面了

00:19.140 --> 00:22.420
无非就是把这个服务器部署到真正的服务器上

00:22.420 --> 00:23.780
对吧 就可以远程访问的

00:24.500 --> 00:28.620
然后呢 我们也可以去解析body的各种格式的body

00:28.700 --> 00:31.460
这种格式的body啊 这种格式的body一般是怎么来的呢

00:32.380 --> 00:36.620
是非常传统的那种方式啊 就是通过那个forum表达的那种方式

00:37.300 --> 00:38.660
传过来的body就是这种body

00:39.580 --> 00:41.940
啊 就是atmos里边一个forum表达对吧

00:41.940 --> 00:42.580
forum元素

00:43.660 --> 00:46.380
通过那个提交啊 传过来的body就是这种格式的body啊

00:46.380 --> 00:48.140
默认的情况下就是这种格式的body

00:48.820 --> 00:51.140
然后呢 这种格式的body呢 我们也能解析了

00:51.140 --> 00:52.700
对吧 两种格式我们都支持

00:52.700 --> 00:56.260
当然如果说你这服务器呢 嗯 只想支持其中一种的话

00:56.260 --> 00:57.180
你去掉一个就行了

00:58.620 --> 01:01.540
那么解析完了过后面后面对API的处理

01:01.540 --> 01:05.780
比方我们添加一个学生 二三十个学生 修改一个学生 读取学生

01:05.780 --> 01:07.300
那么这些API的处理呢

01:07.860 --> 01:10.020
我们就可以读取到body的 对吧

01:10.020 --> 01:12.780
我们说一说我们先要对这两个东西解析

01:13.340 --> 01:15.420
好 解析完了过后 后续的干嘛了

01:15.780 --> 01:17.500
是不是该处理API了 对吧

01:18.020 --> 01:19.740
处理API的请求

01:19.740 --> 01:22.020
你看我们一个express就把这些东西全部分开了

01:22.660 --> 01:23.820
处理API的请求

01:24.300 --> 01:25.540
那么就是以API开头

01:26.140 --> 01:27.860
那么这个地方呢 我们来看一下啊

01:28.420 --> 01:31.580
如果说完了 以前传统的解法呢 是不是很好

01:32.420 --> 01:34.420
比方说我们这里gats

01:34.420 --> 01:36.660
那么这个地方呢 是应该是要得到

01:37.100 --> 01:39.380
这是添加学生 对不对

01:39.380 --> 01:40.500
pose请求嘛 对吧

01:40.500 --> 01:42.860
对同一个资源进行pose请求 添加学生

01:42.860 --> 01:45.940
然后那gats请求呢 就是获取学生 对不对

01:45.940 --> 01:47.060
获取学生

01:47.060 --> 01:48.660
还有pose请求呢

01:49.460 --> 01:51.780
pose请求呢 就是修改学生 对吧

01:52.780 --> 01:53.780
诶 扑直请求

01:55.220 --> 01:57.300
扑直请求表示修改学生

01:57.860 --> 02:00.420
对不对 当然呢 你可以传一个学生ID过来

02:00.420 --> 02:02.220
你可以给我传一个学生ID过来

02:02.220 --> 02:03.220
像这些东西啊

02:04.020 --> 02:06.060
实际上呢 这种做法呢 不是很好

02:06.060 --> 02:08.340
为什么不是很好呢 你看前边是不是在重复

02:09.380 --> 02:10.980
是不是在重复啊 对吧

02:10.980 --> 02:14.740
那有一天 如果说我的资源名字不叫学生 叫做steal

02:14.740 --> 02:17.820
也叫学生 对吧 要减写 我觉得这个API太长了

02:17.820 --> 02:19.860
那时候到处都要改 对不对

02:19.860 --> 02:21.540
这是一个不太好的写法

02:21.540 --> 02:23.620
当然呢 这种做法呢 无可厚非

02:24.340 --> 02:29.180
所以说呢 Express呢 还给你提供了一个非常方便的一个东西呢

02:29.180 --> 02:31.220
也非常简单 极其简单

02:31.220 --> 02:32.940
然后呢 能够解决这个问题

02:32.940 --> 02:34.740
什么东西呢 就是express录邮

02:35.940 --> 02:38.380
其实录邮本质是什么呢 本质就是一个中间键

02:39.220 --> 02:42.100
它就是根据用一个use啊 根据一个基地址

02:42.100 --> 02:43.340
然后交给录邮来处理

02:43.340 --> 02:45.140
在录邮里边再去分情况

02:45.140 --> 02:47.700
扑直请求 扑直请求 等等等等

02:47.700 --> 02:49.820
对吧 因为我们知道use是部分那个

02:49.820 --> 02:52.900
部分请求方法的 什么请求方法都可以 对吧

02:52.940 --> 02:55.340
所以说 那么我们这里怎么来写呢

02:55.340 --> 02:57.300
是这样子的 给它写个简易的啊

02:57.300 --> 03:00.940
express 我们通过这个rotor来创建一个录邮

03:02.100 --> 03:03.540
通过这种方式来创建一个录邮

03:04.660 --> 03:08.940
rotor 我们给它取名为student rotor

03:08.940 --> 03:10.740
创建一个学生录邮

03:10.740 --> 03:13.940
然后呢 接下来呢 我们在录邮里边进行配置

03:14.740 --> 03:16.540
其实这个录邮本身就是个中间键

03:16.540 --> 03:18.860
通过rotor创建的录邮本身就是个中间键

03:18.860 --> 03:20.780
那么后边我们配置怎么怎么来写呢

03:20.820 --> 03:23.140
我们后边就是这个 app.use

03:24.060 --> 03:27.780
任何请求方法 只要你能够匹配这样的基地址

03:27.780 --> 03:28.500
什么基地址呢

03:28.500 --> 03:31.340
以API开头然后对学生的操作

03:31.340 --> 03:33.100
我就交给这个录邮来处理

03:34.100 --> 03:35.780
你看这个意思吧 就写完了 对吧

03:35.780 --> 03:36.900
只要是这个基地址

03:36.900 --> 03:38.380
我就交给这个录邮来处理

03:38.380 --> 03:39.700
这个录邮尤其是就是个中间

03:40.700 --> 03:42.380
好 那么这个录邮是怎么处理的呢

03:42.380 --> 03:46.700
在录邮里边在针对这个基地址再去分情况

03:46.700 --> 03:48.500
那么我们这里写上student rotor

03:48.500 --> 03:51.940
比如说我们get 后边的用法跟一样的

03:51.940 --> 03:54.460
一样的get 如果说请求的是这个地址

03:55.260 --> 03:57.340
然后我们就 regress

03:59.060 --> 04:00.140
我们就这个是什么呢

04:00.140 --> 04:02.420
获取学生 对吧 获取学生

04:03.860 --> 04:08.820
然后如果说你是请rotor post基地址

04:09.420 --> 04:10.620
就是这个地址

04:10.620 --> 04:12.620
然后我们就添加学生

04:18.110 --> 04:19.110
添加学生

04:20.070 --> 04:21.070
看一下什么意思

04:21.990 --> 04:22.870
我们创建个录邮

04:22.870 --> 04:24.310
这个录邮本身就是个中间键

04:25.030 --> 04:26.070
然后把这个中间键

04:26.070 --> 04:27.590
如果说你请求的是这个基地址

04:28.950 --> 04:29.910
以这个地址开头

04:29.910 --> 04:31.630
那么我交给这个录邮来处理

04:31.630 --> 04:32.430
然后录邮里边

04:32.430 --> 04:34.110
它根据自己的情况去匹配

04:35.150 --> 04:36.510
匹配不上家就是司令室了

04:38.030 --> 04:40.990
匹配 如果说你得请求以这个基地址开头

04:40.990 --> 04:42.390
然后后续的路径

04:42.390 --> 04:43.390
如果是一个跟路径

04:43.390 --> 04:44.670
那么跟路径相当于是什么呢

04:44.670 --> 04:46.390
相当于是用get方法去请求

04:47.230 --> 04:48.670
get方法去请求谁呢

04:48.670 --> 04:50.470
请求这个 API student

04:50.670 --> 04:51.590
加上基地址

04:51.590 --> 04:52.630
再加上这个路径

04:52.630 --> 04:53.230
对不对

04:53.230 --> 04:54.390
相当于是这个跟路径

04:55.270 --> 04:56.910
如果说你要获取单个学生的话

04:56.910 --> 04:57.470
我们这样子

04:57.830 --> 04:59.550
比方说要获取单个学生

04:59.950 --> 05:01.310
是不是可以写个冒号ID

05:01.630 --> 05:01.990
对吧

05:01.990 --> 05:03.190
获取单个学生

05:03.830 --> 05:06.190
那么这里我们就相当于是用get请求

05:06.190 --> 05:06.910
哪个地址呢

05:06.910 --> 05:09.670
这个基地址再加上什么呢

05:09.670 --> 05:11.150
再加上一个ID

05:11.910 --> 05:12.830
请求这样的路径

05:12.830 --> 05:13.990
是不是就匹配到这了

05:13.990 --> 05:15.750
让这个路由来具体去处理

05:15.750 --> 05:18.750
那么后续的处理的做法是完全一样的

05:18.790 --> 05:19.510
这个 rake rake

05:19.510 --> 05:21.950
就是express里面的封装那个

05:21.950 --> 05:23.390
request和response

05:24.110 --> 05:24.910
你让它意思吧

05:24.910 --> 05:26.070
就是以这个基地址

05:26.070 --> 05:26.710
我就交给这个路由

05:26.710 --> 05:27.910
这个路由再去分情况

05:28.190 --> 05:28.590
对吧

05:28.590 --> 05:29.550
而且这个 rake

05:29.550 --> 05:30.590
跟我们上级课学的一样

05:30.590 --> 05:31.870
在说中间界内部

05:32.070 --> 05:33.150
你得到的pass

05:33.150 --> 05:34.750
就是基于这个地址的

05:34.750 --> 05:35.910
它是没有基地址的

05:35.910 --> 05:36.670
你要得到基地址

05:36.670 --> 05:38.030
要用什么 base URL

05:38.030 --> 05:38.550
对吧

05:38.550 --> 05:39.550
有这个 pass

05:39.550 --> 05:40.870
就是 rake.pass

05:41.790 --> 05:42.750
那么得到了是什么呢

05:42.750 --> 05:43.430
得到是这个

05:44.270 --> 05:45.430
所以它跟基地址无关

05:45.430 --> 05:46.150
那么这样子

05:46.150 --> 05:47.750
你基地址是不是可以随意改动

05:47.790 --> 05:49.430
有一天我不想用这个 API 开头了

05:49.430 --> 05:50.750
让我们可以换成 16

05:50.750 --> 05:51.430
对吧

05:51.430 --> 05:53.630
因为后续的规则一般都是统一的

05:53.870 --> 05:55.630
后续的规则一般不会怎么去改动

05:55.630 --> 05:57.870
而真正改动的是这个前面的基地址

05:57.870 --> 05:59.350
就对资源的名称

05:59.910 --> 06:00.870
所以我们这种做法

06:00.870 --> 06:03.630
更加符合我们真实的开发场景

06:03.630 --> 06:04.550
而且这种做法

06:04.550 --> 06:05.710
我们可以把分模块

06:05.710 --> 06:07.390
比方说我们在这个 rake

06:07.390 --> 06:08.230
现在我们三层架构

06:08.230 --> 06:09.790
现在是不是抓到这一块了

06:09.790 --> 06:10.430
路由城了

06:10.430 --> 06:10.910
对不对

06:10.910 --> 06:13.030
但路由城是不是要调用服务层的东西

06:13.030 --> 06:14.590
然后给它返回相应的结果

06:14.590 --> 06:15.510
我们可以在 rake 里面

06:15.590 --> 06:16.630
新建个文件夹

06:16.630 --> 06:18.110
比较取名为 API

06:18.110 --> 06:19.910
比方说我们这里就写一些

06:19.910 --> 06:21.470
express 路由

06:21.470 --> 06:24.590
然后提供对不同的资源的 API 处理

06:24.590 --> 06:25.830
我们这里的新建个文件

06:25.830 --> 06:27.270
比方说我们这里有个学生

06:27.270 --> 06:28.550
学生的学生

06:28.550 --> 06:29.510
针对学生的处理

06:29.510 --> 06:30.750
我们就建一个 student

06:30.950 --> 06:31.830
叫 js

06:32.190 --> 06:33.110
是这个逻辑吧

06:33.270 --> 06:36.190
然后我们就把这个东西就放过来

06:37.750 --> 06:39.150
这一部分的放得到的是什么

06:39.150 --> 06:41.870
得到的是就是针对学生的路由处理

06:42.950 --> 06:43.550
保住

06:44.070 --> 06:44.830
express

06:46.230 --> 06:46.790
require

06:47.950 --> 06:48.590
express

06:49.110 --> 06:50.230
导入这个express

06:50.230 --> 06:51.510
然后创建一个路由

06:51.510 --> 06:53.670
然后针对学生的路由处理

06:54.750 --> 06:56.230
针对学生的路由处理

06:56.230 --> 06:57.150
是不是可以这样子

06:57.430 --> 06:57.910
对吧

06:59.230 --> 07:01.710
然后我们这里就先暂时这样子写吧

07:01.710 --> 07:02.310
新的

07:03.270 --> 07:06.350
这是获取分页

07:06.350 --> 07:07.190
分页

07:07.190 --> 07:08.270
获取学生

07:08.830 --> 07:11.550
这个是获取单个学生

07:13.230 --> 07:14.710
这是输出

07:15.710 --> 07:16.470
res

07:16.470 --> 07:16.990
sind

07:16.990 --> 07:17.830
详细

07:17.830 --> 07:19.670
获取单个学生

07:20.270 --> 07:22.350
这边是添加一个学生

07:23.150 --> 07:23.830
sind

07:24.710 --> 07:26.510
添加一个学生

07:26.910 --> 07:27.230
好

07:27.230 --> 07:28.750
然后还有什么删除对吧

07:28.750 --> 07:29.310
rotor

07:29.310 --> 07:29.950
delete

07:32.070 --> 07:32.950
要给我个id

07:32.950 --> 07:34.710
你删除学生总得给我个id吗

07:35.110 --> 07:35.550
rig

07:35.550 --> 07:36.150
res

07:36.670 --> 07:37.470
这是

07:38.790 --> 07:39.670
这是res

07:39.670 --> 07:40.350
sind

07:41.590 --> 07:43.590
删除一个学生

07:44.070 --> 07:44.710
还有什么

07:44.750 --> 07:45.510
修改

07:45.510 --> 07:46.310
还有一个修改

07:46.950 --> 07:47.470
添加

07:47.470 --> 07:48.270
还有一个修改

07:48.630 --> 07:49.190
rotor

07:49.630 --> 07:50.150
put

07:51.830 --> 07:52.630
给我个id

07:52.630 --> 07:53.190
然后

07:54.030 --> 07:55.150
我修改一个学生

07:56.910 --> 07:58.910
我们这一刻就把这几个东西写完

07:58.910 --> 07:59.710
把学生写完了

07:59.710 --> 08:01.310
其实你就感觉上就差不多了

08:01.870 --> 08:05.950
这是修改一个学生

08:06.990 --> 08:07.630
写完了

08:08.990 --> 08:10.630
接下来我们在这边怎么用呢

08:10.630 --> 08:11.950
这边我们就可以这样子用

08:14.210 --> 08:14.850
又是

08:14.970 --> 08:16.410
反而是针对这个资源的处理

08:16.410 --> 08:17.210
我就把它交给谁

08:17.450 --> 08:18.450
交给require

08:20.730 --> 08:23.330
交给API下边的students

08:23.330 --> 08:24.530
交给students来处理

08:25.330 --> 08:26.050
没了意思吧

08:26.690 --> 08:27.490
就这么个意思

08:28.570 --> 08:28.810
好了

08:28.810 --> 08:29.330
这是

08:29.330 --> 08:30.330
那么这边我们怎么写

08:30.330 --> 08:31.170
我们来试一下

08:31.170 --> 08:32.610
先我们运行出来试一下

08:33.810 --> 08:34.810
npm start

08:36.370 --> 08:36.930
运行出来了

08:37.810 --> 08:38.370
保错了

08:38.970 --> 08:39.410
好了

08:41.210 --> 08:43.210
use requires

08:44.210 --> 08:45.330
哦 这里

08:45.330 --> 08:46.930
没有导出的

08:46.930 --> 08:48.330
merge export

08:48.330 --> 08:49.410
导出rotor

08:49.410 --> 08:50.410
把路由配置好了

08:50.410 --> 08:51.250
过后导出

08:52.010 --> 08:52.770
然后再看

08:54.170 --> 08:55.170
现在是不是完成了

08:55.170 --> 08:55.810
没问题

08:55.810 --> 08:57.050
接下来我们来看一下

08:57.050 --> 08:58.770
我们现在去请求学生

08:58.770 --> 08:59.970
接下来我们poster请求

08:59.970 --> 09:00.530
send

09:01.330 --> 09:01.810
下面

09:01.810 --> 09:03.130
你是不是添加一个学生

09:03.130 --> 09:03.610
对吧

09:03.610 --> 09:04.330
添加学生

09:04.330 --> 09:06.730
然后我们如果说用get请求

09:08.050 --> 09:09.570
分业获取学生

09:10.370 --> 09:12.170
然后这里我们用poster请求

09:13.090 --> 09:13.770
poster请求

09:13.770 --> 09:15.210
这里是404

09:15.210 --> 09:15.610
为什么

09:15.610 --> 09:16.770
因为我们没有加id

09:16.770 --> 09:18.450
针对id为三个学生

09:18.450 --> 09:20.330
比方说修改一个学生

09:20.330 --> 09:20.570
对吧

09:20.570 --> 09:21.610
是不是就搞定了

09:21.610 --> 09:22.490
那么接下来我们就

09:22.490 --> 09:23.890
无非就是把这个写完就完了

09:23.890 --> 09:25.090
其实我们赵杰克讲的

09:25.090 --> 09:26.450
这个路由就讲完了

09:26.450 --> 09:26.730
对吧

09:26.730 --> 09:28.170
后边针对

09:28.170 --> 09:29.450
什么二代命

09:29.450 --> 09:31.130
针对管理员的rotor

09:31.130 --> 09:32.010
一个字语去写

09:32.010 --> 09:33.250
一模一样的写法

09:33.250 --> 09:34.290
字语去写

09:34.290 --> 09:34.970
然后针对

09:34.970 --> 09:36.770
那个什么班级

09:36.770 --> 09:39.010
class的解释

09:39.010 --> 09:40.770
那么这个字语去写

09:40.770 --> 09:41.930
我这些都写完

09:42.250 --> 09:43.330
写法是一样的

09:43.330 --> 09:44.290
然后无非就在这边

09:44.290 --> 09:45.050
多导入几个

09:45.050 --> 09:45.810
对不对

09:45.810 --> 09:47.010
然后还有针对什么

09:47.010 --> 09:48.250
针对bock

09:48.250 --> 09:49.410
书籍的

09:49.410 --> 09:50.610
书籍的路由

09:50.610 --> 09:52.810
是不是在这里分模块去写

09:52.810 --> 09:53.290
对不对

09:53.290 --> 09:54.330
那么然后依次在

09:54.330 --> 09:55.570
这个音乐车里面导入

09:55.570 --> 09:59.700
我们比方说把写出来吧

09:59.700 --> 10:00.740
一共四个

10:00.740 --> 10:04.680
针对这个bock的

10:04.680 --> 10:07.960
针对这个class的班级的

10:10.240 --> 10:12.560
针对这个就是admin的

10:14.600 --> 10:15.200
对吧

10:15.280 --> 10:16.480
就是这个模式

10:16.480 --> 10:18.200
把分道路由里面进行处理

10:18.200 --> 10:18.840
那么我们设想了

10:18.840 --> 10:19.960
自己在模块里面处理的

10:19.960 --> 10:21.560
我们就写一个就行了

10:21.560 --> 10:21.840
好

10:21.840 --> 10:23.880
那当然这里我们必须要注释掉

10:23.880 --> 10:25.280
因为我这里这三个模块

10:25.280 --> 10:27.080
没有任何导出

10:27.080 --> 10:27.280
好

10:27.280 --> 10:28.160
然后我们到学生里面

10:28.160 --> 10:29.080
我们来写一下吧

10:29.080 --> 10:30.880
分页或许学生怎么写呢

10:30.880 --> 10:32.280
一分页或许学生是不是要通

10:32.280 --> 10:33.600
要给我传递页嘛

10:33.600 --> 10:34.760
页容量

10:34.760 --> 10:35.120
对不对

10:35.120 --> 10:35.640
我们看一下

10:35.640 --> 10:38.560
我们当时的业务逻辑成

10:38.560 --> 10:40.120
学生这里

10:40.120 --> 10:41.000
get students

10:41.000 --> 10:42.800
是不是还可以传递一些

10:42.800 --> 10:44.240
就是那个就是条件

10:44.240 --> 10:44.880
那么这条件

10:44.920 --> 10:46.080
你可以通过怎么来传递呢

10:46.080 --> 10:47.200
你可以通过query

10:47.200 --> 10:49.200
就是我们地址栏参数来传递

10:49.200 --> 10:51.560
就在问号后边的一东西来传递

10:51.560 --> 10:52.320
对吧

10:52.320 --> 10:52.520
好

10:52.520 --> 10:53.160
那么这里呢

10:53.160 --> 10:54.640
我就非常非常简单了

10:54.640 --> 10:55.360
我怎么来处理呢

10:55.360 --> 10:58.080
我就用这种最简单的方式

10:58.080 --> 10:59.720
就是still serve

10:59.720 --> 11:01.080
我们之前不是写过吗

11:01.080 --> 11:02.040
require

11:02.040 --> 11:02.920
点点解杠

11:02.920 --> 11:04.520
点点解杠 service is

11:04.520 --> 11:05.840
student service

11:05.840 --> 11:07.000
保住进来

11:07.000 --> 11:08.600
分页或许学生

11:08.600 --> 11:10.560
我们这里把它变成一部函数

11:10.560 --> 11:11.040
而think

11:12.800 --> 11:13.720
这里我怎么玩呢

11:13.720 --> 11:15.520
就是still serve

11:15.520 --> 11:17.200
然后get students

11:17.200 --> 11:17.400
对吧

11:17.400 --> 11:19.160
不是有这个方法吗

11:19.160 --> 11:20.800
你要给我传这么一些消息过来

11:20.800 --> 11:21.400
对不对

11:21.400 --> 11:23.040
那么这些什么配级

11:23.040 --> 11:24.280
names这些东西

11:24.280 --> 11:26.400
那么我们是不是可以在requ里面获取

11:26.400 --> 11:26.560
好

11:26.560 --> 11:27.400
我们来吧

11:27.400 --> 11:28.040
我们这里呢

11:28.040 --> 11:29.280
一个变量一个变量得到

11:29.280 --> 11:30.520
配级等于什么呢

11:30.520 --> 11:31.640
require.pkg

11:31.640 --> 11:35.960
require.query.pkg

11:35.960 --> 11:37.480
看一下一个地址栏参数里面

11:37.480 --> 11:38.320
有没有配级

11:38.320 --> 11:39.240
有没有业吗

11:39.240 --> 11:41.000
如果说没有的话

11:41.000 --> 11:41.520
没有的话

11:41.520 --> 11:43.280
我给它默认为一吗

11:43.280 --> 11:44.400
默认为一

11:44.400 --> 11:45.360
对不对

11:45.360 --> 11:46.840
当然了

11:46.840 --> 11:47.080
好

11:47.080 --> 11:48.560
这写上写在这吧

11:48.560 --> 11:48.880
然后呢

11:48.880 --> 11:50.160
names

11:50.160 --> 11:51.440
require.pkg

11:51.440 --> 11:52.480
有没有names

11:52.480 --> 11:53.960
如果说没有的话

11:53.960 --> 11:55.560
我默认为10

11:56.880 --> 11:57.240
然后呢

11:57.240 --> 11:57.760
还有什么呢

11:57.760 --> 11:59.200
还有那个就是

11:59.200 --> 12:00.400
这边还有啥

12:00.400 --> 12:01.400
还有sex

12:01.400 --> 12:02.760
就是性别

12:02.760 --> 12:04.360
性别

12:04.360 --> 12:05.920
require.pkg

12:05.920 --> 12:07.240
有没有性别

12:07.240 --> 12:08.520
有没有查询性别

12:08.520 --> 12:10.080
查询有查询性别的话

12:10.120 --> 12:11.240
那么有的话

12:11.240 --> 12:11.800
我用它

12:11.800 --> 12:12.560
如果说没有的话

12:12.560 --> 12:14.040
我就是附一

12:14.040 --> 12:15.000
对不对

12:15.000 --> 12:15.560
然后呢

12:15.560 --> 12:17.000
还有什么呢

12:17.000 --> 12:18.800
还有就是name

12:18.800 --> 12:19.480
对吧

12:19.480 --> 12:20.240
name

12:20.240 --> 12:22.080
require.name

12:22.080 --> 12:22.760
有没有呢

12:22.760 --> 12:23.200
没有的话

12:23.200 --> 12:24.880
我只控制不穿

12:24.880 --> 12:25.440
好就写好了

12:25.440 --> 12:26.760
然后一次把这些东西传过去

12:26.760 --> 12:27.160
对吧

12:27.160 --> 12:28.000
names

12:28.000 --> 12:28.680
传过去

12:28.680 --> 12:29.800
sex

12:29.800 --> 12:30.400
name

12:30.400 --> 12:32.040
你看APH就是这样开发出来的

12:32.040 --> 12:34.040
其实我们学习这个漏的解释

12:34.040 --> 12:35.200
很大的程度呢

12:35.200 --> 12:36.040
就是你们到公司里面

12:36.040 --> 12:37.600
一般不会去做这种APH

12:37.600 --> 12:38.520
一般都的话

12:38.520 --> 12:39.600
这都是后端做的

12:39.600 --> 12:40.480
如果说你要做的话

12:40.480 --> 12:41.520
都是极其简单的

12:41.520 --> 12:42.480
我们就通过这个例子

12:42.480 --> 12:44.160
来告诉你后端是怎么做的

12:44.160 --> 12:45.720
它是什么逻辑是什么

12:45.720 --> 12:47.680
然后我们这里二位等待一下

12:47.680 --> 12:48.600
等待一下

12:48.600 --> 12:49.840
然后得到一个结果

12:49.840 --> 12:50.680
result

12:50.680 --> 12:51.400
我们把这个结果

12:51.400 --> 12:52.280
是不是一个对象

12:52.280 --> 12:52.720
对不对

12:52.720 --> 12:53.760
然后send

12:53.760 --> 12:54.320
res

12:54.320 --> 12:54.680
send

12:54.680 --> 12:56.000
把这个对象

12:56.000 --> 12:58.040
返回

12:58.040 --> 12:59.320
保存

12:59.320 --> 13:00.600
接下来我们来看一下吧

13:00.600 --> 13:03.640
然后到那个postman里边去

13:03.640 --> 13:06.280
我们现在得到学生

13:06.280 --> 13:07.160
分页得到学生

13:07.160 --> 13:08.280
send

13:08.320 --> 13:09.000
你看一下

13:09.000 --> 13:10.640
下面是不是学生的数据就出来了

13:10.640 --> 13:10.920
对吧

13:10.920 --> 13:11.840
toto

13:11.840 --> 13:12.040
data

13:12.040 --> 13:12.560
s

13:12.560 --> 13:13.000
对不对

13:13.000 --> 13:14.680
说数据就出来了

13:14.680 --> 13:15.840
没有问题吧

13:15.840 --> 13:19.560
这就是这种处理模式

13:19.560 --> 13:21.480
然后这里我说一点

13:21.480 --> 13:23.920
很多情况下是这样子

13:23.920 --> 13:25.600
就是我们服务器的反应

13:25.600 --> 13:26.920
就是响应的消息

13:26.920 --> 13:29.160
有一种固定的格式

13:29.160 --> 13:31.440
一般来说都会有一种固定的格式

13:31.440 --> 13:32.320
什么固定的格式呢

13:32.320 --> 13:34.480
一般是这种格式

13:34.480 --> 13:35.360
响应的消息格式

13:35.360 --> 13:36.600
一般是这种

13:36.600 --> 13:38.160
code

13:38.280 --> 13:41.600
就是表示的是响应的

13:41.600 --> 13:43.520
响应的就是错误码

13:43.520 --> 13:44.520
有没有错误

13:44.520 --> 13:45.480
错误码是多少

13:45.480 --> 13:46.400
它不同的错误码

13:46.400 --> 13:47.600
对应到不同的错误

13:47.600 --> 13:49.720
一般会有这么一种硬射关系

13:49.720 --> 13:50.800
如果说没有错误的话

13:50.800 --> 13:52.320
我们就一般就是0

13:52.320 --> 13:53.080
还有一个message

13:53.080 --> 13:54.640
表示错误的消息

13:54.640 --> 13:55.880
表示错误的消息

13:55.880 --> 13:56.760
如果说没有消息的话

13:56.760 --> 13:57.840
就是个空之无串

13:57.840 --> 13:59.160
或者是辣

13:59.160 --> 13:59.680
好

13:59.680 --> 14:00.840
剩下的这个data

14:00.840 --> 14:03.480
它表示我真正的响应的结果

14:03.480 --> 14:05.040
我的结果我们把放到这

14:05.040 --> 14:07.160
就是统一消息格式

14:07.200 --> 14:10.440
当然也可以自行去写一个函数

14:10.440 --> 14:12.120
自行去写一个函数

14:12.120 --> 14:15.280
来封装这个响应的消息格式

14:15.280 --> 14:16.320
没了意思吧

14:16.320 --> 14:17.520
你可以自己去写一个

14:17.520 --> 14:18.520
就是工具内的函数

14:18.520 --> 14:19.560
去自己去封装

14:19.560 --> 14:20.760
我这也难得弄了

14:20.760 --> 14:23.040
这个我们就把

14:23.040 --> 14:24.480
还是弄一下吧

14:24.480 --> 14:27.040
就直接到这个API里边

14:27.040 --> 14:28.560
或者就是到这个roach里边

14:28.560 --> 14:29.680
就在这里写一个吧

14:29.680 --> 14:33.040
写个工具函数

14:33.040 --> 14:36.040
get send result

14:36.040 --> 14:39.000
这就导出一个就是函数的完事

14:39.000 --> 14:40.920
export导出一个函数

14:40.920 --> 14:43.320
你给我一个错误消息

14:46.080 --> 14:47.840
或者我们导出两个函数吧

14:49.320 --> 14:50.120
export

14:50.120 --> 14:53.400
一个是send error

14:53.400 --> 14:56.080
发送一个错误消息

14:56.080 --> 14:57.720
那么你给我一个什么呢

14:57.720 --> 15:00.400
get error

15:00.400 --> 15:02.080
你给我一个错误消息的格式

15:02.080 --> 15:03.720
你给我错误的消息

15:03.720 --> 15:04.920
你给我错误的消息嘛

15:06.520 --> 15:07.600
给我错误的消息嘛

15:07.600 --> 15:08.480
比方说错误消息嘛

15:08.480 --> 15:10.240
默认为500

15:10.240 --> 15:11.080
错误消息呢

15:11.080 --> 15:14.040
比方说默认为server

15:14.040 --> 15:15.000
interlog

15:15.000 --> 15:16.240
内部的错误

15:16.240 --> 15:17.440
export

15:17.440 --> 15:18.320
比方说吧

15:18.320 --> 15:19.360
给我错误消息嘛

15:19.360 --> 15:19.720
然后呢

15:19.720 --> 15:21.600
我给你封装一个错误消息格式

15:21.600 --> 15:23.120
反回来就是一个对象

15:23.120 --> 15:23.840
export

15:23.840 --> 15:25.640
就是这个code等于

15:25.640 --> 15:27.240
export

15:27.240 --> 15:30.640
message等于export

15:30.640 --> 15:31.880
然后既然有错误的话

15:31.880 --> 15:32.960
那么自然没有data

15:32.960 --> 15:33.320
对吧

15:33.320 --> 15:34.400
自然没有data这个出现

15:34.440 --> 15:36.000
当然也可以用data等于那

15:36.000 --> 15:36.800
没有东西

15:36.800 --> 15:39.520
一般的说就可以不用data这个出现

15:39.520 --> 15:39.760
好

15:39.760 --> 15:40.560
这是这个

15:40.560 --> 15:41.040
是不是很简单

15:41.040 --> 15:42.560
就把封装一下

15:42.560 --> 15:43.040
然后呢

15:43.040 --> 15:46.060
get result

15:46.060 --> 15:46.660
得到结果

15:46.660 --> 15:47.820
得到一个正常的结果

15:47.820 --> 15:49.740
那自然就没有没有这些消息了

15:49.740 --> 15:50.100
对吧

15:50.100 --> 15:51.220
给我一个result

15:51.220 --> 15:52.900
然后我给你返回一个code

15:52.900 --> 15:53.860
等于0

15:53.860 --> 15:55.380
message等于

15:55.380 --> 15:56.260
控制不穿

15:56.260 --> 15:56.780
然后呢

15:56.780 --> 15:59.020
result

15:59.020 --> 16:01.460
把data

16:01.460 --> 16:02.500
result

16:02.500 --> 16:03.140
就是一般的

16:03.140 --> 16:03.580
一般来说

16:03.580 --> 16:04.820
每个工程他会有自己的

16:04.820 --> 16:06.140
一套统一的

16:06.140 --> 16:08.060
服务器的API响应格式

16:08.060 --> 16:09.500
我们办办个格式写到这

16:09.500 --> 16:10.260
格式写到这的话

16:10.260 --> 16:11.980
然后在这边来

16:11.980 --> 16:14.020
到这个studio里面来

16:14.020 --> 16:15.180
我们说给导入这个

16:15.180 --> 16:17.340
导入这个模块

16:17.340 --> 16:19.100
require

16:19.100 --> 16:20.700
导入吧

16:20.700 --> 16:24.300
send message

16:24.300 --> 16:26.620
require

16:26.620 --> 16:28.380
导入这个上一个目录的

16:28.380 --> 16:30.740
get send result

16:30.740 --> 16:31.020
好

16:31.020 --> 16:31.500
那么这边呢

16:31.500 --> 16:32.580
我们就send message的时候

16:32.700 --> 16:33.900
我们就通过这个对象里面了

16:33.900 --> 16:34.780
什么呢

16:34.780 --> 16:36.580
get result

16:36.580 --> 16:37.700
把result传进去

16:37.700 --> 16:39.780
让它来帮助我们封装这个消息格式

16:39.780 --> 16:41.020
然后响应过去

16:41.020 --> 16:41.220
对吧

16:41.220 --> 16:41.860
非常简单

16:41.860 --> 16:43.100
自己搞定一下就行了

16:43.100 --> 16:43.300
另外

16:43.300 --> 16:44.260
那么之前不是写过这个

16:44.260 --> 16:45.500
error made aware吗

16:45.500 --> 16:47.620
那么这个地方是不是也可以

16:47.620 --> 16:48.060
对不对

16:48.060 --> 16:50.700
说这个地方也可以

16:50.700 --> 16:51.380
那么这个地方呢

16:51.380 --> 16:52.820
我们就设置为500

16:52.820 --> 16:53.300
然后呢

16:53.300 --> 16:53.660
send

16:53.660 --> 16:55.220
send什么呢

16:55.220 --> 16:56.660
导入这个

16:56.660 --> 17:00.780
get message

17:00.780 --> 17:01.980
然后

17:01.980 --> 17:03.660
当前require

17:03.660 --> 17:05.220
当前目录下面的

17:05.220 --> 17:08.100
get send result

17:08.100 --> 17:08.660
send什么呢

17:08.660 --> 17:09.500
get result

17:09.500 --> 17:12.260
get error

17:12.260 --> 17:14.300
错误消息是

17:14.300 --> 17:16.500
错误消息就让它自动吧

17:16.500 --> 17:17.580
error code让它自动

17:17.580 --> 17:18.020
OK

17:18.020 --> 17:18.820
就行了

17:18.820 --> 17:19.700
对吧

17:19.700 --> 17:20.300
那么这边呢

17:20.300 --> 17:21.300
我们就写好了一个get了

17:21.300 --> 17:23.020
分页获取学生

17:23.020 --> 17:24.900
我们再来看一下

17:24.900 --> 17:25.540
发动消息

17:25.540 --> 17:26.580
你看是不是

17:26.580 --> 17:28.420
发动消息应该不是这种格式了

17:28.420 --> 17:29.260
它应该不是这种格式

17:29.260 --> 17:30.540
没保存

17:30.540 --> 17:31.500
发动消息

17:31.500 --> 17:32.300
你看是不是这种格式

17:32.300 --> 17:33.020
code message

17:33.020 --> 17:33.300
data

17:33.300 --> 17:34.620
data里面有种数

17:34.620 --> 17:35.260
data是

17:35.260 --> 17:36.660
不表示我们的具体的数据

17:36.660 --> 17:38.260
整个就是我们的具体的数据了

17:38.260 --> 17:38.740
对吧

17:38.740 --> 17:39.740
如果说我们要分页的话

17:39.740 --> 17:43.060
我们可以怎么写呢

17:43.060 --> 17:43.780
我们要分页的话

17:43.780 --> 17:44.980
我们就可以这样

17:44.980 --> 17:46.700
get里面不是可以传一些参数吗

17:46.700 --> 17:46.980
对吧

17:46.980 --> 17:48.180
可以在这里写

17:48.180 --> 17:49.980
比方说我们传一个

17:49.980 --> 17:51.580
配级等于2

17:51.580 --> 17:52.700
等于2

17:52.700 --> 17:53.980
你看相当于在这里写

17:53.980 --> 17:55.540
其实本质就在这里写

17:55.540 --> 17:57.020
写到一个地址栏参数里面

17:57.020 --> 17:57.980
发送

17:57.980 --> 17:59.100
你看是不是第二页

17:59.100 --> 18:00.620
它这里是看不出来

18:00.620 --> 18:02.140
比方说我们再可以传一个那个

18:02.860 --> 18:05.180
性别等于1

18:05.180 --> 18:06.220
只查男同学

18:06.220 --> 18:07.540
是不是只有184

18:07.540 --> 18:10.500
通过这个地址能够查询出不同的结果了

18:10.500 --> 18:11.860
而且是分页的结果

18:11.860 --> 18:12.020
对吧

18:12.020 --> 18:13.660
这API就是这样来的

18:13.660 --> 18:13.820
好

18:13.820 --> 18:15.620
这是分页来获取

18:15.620 --> 18:17.420
那么获取单个学生的

18:17.420 --> 18:17.900
是一样的

18:17.900 --> 18:18.180
对吧

18:18.180 --> 18:18.900
是一样的

18:18.900 --> 18:20.220
student

18:20.220 --> 18:21.140
get student

18:21.140 --> 18:21.620
id

18:21.620 --> 18:21.820
对吧

18:21.820 --> 18:22.900
我们之前有过这个函数

18:22.900 --> 18:23.700
直接用就行了

18:23.700 --> 18:23.820
对吧

18:23.820 --> 18:25.140
这就是三层价格

18:25.140 --> 18:27.140
路由层调服务层的东西

18:27.140 --> 18:29.540
不直接使用数据层

18:29.540 --> 18:30.580
id给他传过去

18:30.580 --> 18:32.100
id不就是这个玩意吗

18:32.100 --> 18:32.660
对不对

18:32.660 --> 18:33.900
id就是这个玩意

18:33.900 --> 18:34.820
然后parent

18:34.820 --> 18:36.100
就是reg

18:36.100 --> 18:37.140
parent

18:38.420 --> 18:39.060
叫id

18:39.060 --> 18:39.420
就好

18:39.420 --> 18:40.580
东西玩事了

18:40.580 --> 18:42.660
然后得到这个结果

18:44.900 --> 18:45.500
await

18:45.500 --> 18:46.460
得到这个结果

18:49.540 --> 18:50.580
这里还没有

18:50.580 --> 18:51.860
还要上一个assign

18:53.580 --> 18:54.220
好

18:54.220 --> 18:54.980
得到这个过空

18:54.980 --> 18:56.020
然后我们还是一样的

18:56.020 --> 18:57.580
reg是send

18:57.580 --> 18:59.380
send的message

18:59.380 --> 19:00.820
get result

19:00.820 --> 19:01.980
把result传进去

19:02.820 --> 19:03.700
就完事了

19:03.700 --> 19:04.860
或许单个学生

19:04.860 --> 19:05.780
咱们看一下吧

19:06.660 --> 19:07.580
或许单个学生

19:07.580 --> 19:08.300
我看一下学生

19:08.300 --> 19:10.060
id有什么

19:10.060 --> 19:11.780
id1228

19:11.780 --> 19:12.540
来吧

19:12.540 --> 19:13.300
1228

19:13.300 --> 19:14.020
还是给他请求

19:14.020 --> 19:14.780
但是我给他id

19:14.780 --> 19:15.420
那么这个时候

19:15.420 --> 19:17.180
就或许的是单个学生

19:17.180 --> 19:17.820
看没有

19:17.820 --> 19:18.380
单个学生

19:20.740 --> 19:22.420
然后添加一个学生

19:22.420 --> 19:23.420
添加一个学生的话

19:23.420 --> 19:25.060
我们这里就

19:25.060 --> 19:26.340
还是一样的

19:26.340 --> 19:27.260
直接调服

19:27.260 --> 19:28.260
业务逻辑层就行了

19:28.260 --> 19:29.260
业务逻辑层都写好了的

19:30.260 --> 19:33.740
add student

19:33.740 --> 19:35.580
加一个学生

19:35.580 --> 19:35.900
obg

19:35.900 --> 19:36.940
那么是不是把消息体

19:36.940 --> 19:37.740
直接扔过去

19:37.740 --> 19:38.380
就完事了

19:38.380 --> 19:38.900
对不对

19:38.900 --> 19:39.300
body

19:39.300 --> 19:39.820
是不是消息体

19:39.820 --> 19:40.380
直接扔过去

19:40.380 --> 19:41.060
就完事了

19:41.060 --> 19:42.420
咱们await

19:42.420 --> 19:43.100
等待

19:45.100 --> 19:46.540
这里我们得到一个结果

19:47.540 --> 19:48.260
result

19:48.260 --> 19:48.860
得到一个结果

19:48.860 --> 19:49.660
因为我们之前写过

19:49.660 --> 19:50.700
写了个学生那一块

19:50.700 --> 19:52.700
写了个学生那一块

19:52.700 --> 19:53.820
他是有没有返回

19:53.820 --> 19:55.260
这个函数有没有返回

19:55.260 --> 19:56.740
添加一个学生

19:56.740 --> 19:58.540
有返回的

19:58.820 --> 19:59.860
那么得到这个结果

19:59.860 --> 20:00.660
得到这个结果

20:00.660 --> 20:02.700
然后我们把它res

20:02.700 --> 20:03.540
send

20:03.540 --> 20:05.020
send the message

20:05.020 --> 20:06.860
get result

20:06.860 --> 20:08.100
result 传进去

20:08.100 --> 20:08.780
那么大家注意

20:08.780 --> 20:10.260
就这个结果里面

20:12.260 --> 20:13.540
他是不是有可能爆错

20:13.540 --> 20:14.180
怎么爆错呢

20:14.180 --> 20:16.540
就是我们之前不是要验证

20:16.540 --> 20:17.140
对不对

20:17.140 --> 20:18.140
是不是有验证

20:18.140 --> 20:18.900
验证的话

20:18.900 --> 20:19.660
如果验证没有通过

20:19.660 --> 20:20.580
是不是不会爆错

20:20.580 --> 20:21.540
会爆错的话

20:21.540 --> 20:22.260
那么他就会

20:22.260 --> 20:24.260
这个地方是不是没法继续往后运行的

20:24.260 --> 20:25.540
那么是不是被我们的

20:25.540 --> 20:27.340
aromateware说捕获到了

20:27.340 --> 20:27.900
捕获到错误

20:27.900 --> 20:29.340
那么就给他反映了无败

20:29.340 --> 20:30.740
当然你可以根据不同的情况

20:30.740 --> 20:33.020
比方说错误的消息内行

20:33.020 --> 20:34.980
可以自行在业务逻辑层去封装

20:34.980 --> 20:36.700
不同的错误消息内行

20:36.700 --> 20:38.140
就是不同的aromateware下

20:38.140 --> 20:39.500
那么你可以根据错误的情况

20:39.500 --> 20:40.780
来给他反映不同的消息

20:40.780 --> 20:42.180
我真是懒得弄了

20:42.180 --> 20:43.980
就这么个意思

20:43.980 --> 20:45.100
比方说我们这里

20:45.100 --> 20:46.980
添加一个学生试一下

20:46.980 --> 20:47.980
post

20:47.980 --> 20:50.540
学生我们来去添加这个例子

20:50.540 --> 20:51.420
比方说包体里面啥

20:51.420 --> 20:51.900
这些传

20:51.900 --> 20:53.580
就传个a等于b等于2

20:53.580 --> 20:54.980
离开一下send

20:54.980 --> 20:55.660
这里爆错了

20:55.660 --> 20:56.900
这些出问题了

20:56.980 --> 20:57.900
怎么

21:01.100 --> 21:03.380
on handle the promise rejection

21:05.180 --> 21:09.900
所有模型

21:09.900 --> 21:11.500
这里出了问题

21:11.500 --> 21:12.860
我看一下

21:12.860 --> 21:14.020
这里包了一个错误

21:14.020 --> 21:14.660
但是错误呢

21:14.660 --> 21:16.300
没有交给他来处理

21:16.300 --> 21:17.820
他们也交到这里去

21:17.820 --> 21:19.060
我们看这里输出一个

21:20.220 --> 21:20.900
abc

21:22.220 --> 21:22.940
输出一下

21:22.940 --> 21:24.420
看他有为什么没有交过来

21:25.340 --> 21:26.420
再来发出去自行求

21:27.380 --> 21:28.460
abc没有运行

21:28.460 --> 21:28.900
对吧

21:30.140 --> 21:31.500
他应该把这个交过来才对

21:31.500 --> 21:32.180
对啊

21:32.180 --> 21:32.620
丢脸子

21:32.620 --> 21:33.420
我们来看一下

21:33.420 --> 21:34.100
我们在这里

21:34.380 --> 21:35.260
就这样子来做

21:38.210 --> 21:38.530
so

21:41.470 --> 21:42.790
明白了

21:42.790 --> 21:43.590
明白了

21:43.590 --> 21:44.230
我明白了

21:44.750 --> 21:45.990
这个地方是一步的

21:47.950 --> 21:48.750
他这个地方

21:48.750 --> 21:52.310
他是一个一步的错误

21:53.950 --> 21:55.270
一个一步的错误

21:55.910 --> 21:56.990
因为他这个函数

21:56.990 --> 21:58.030
瞬间就运行完了

21:58.030 --> 21:59.310
运行完了是一个promise

21:59.950 --> 22:02.670
是在promise里边发生了错误

22:04.870 --> 22:05.470
我想一下

22:05.470 --> 22:06.590
这个地方该怎么来搞

22:08.610 --> 22:10.130
我先我先测试一下

22:10.130 --> 22:11.290
在这个在这个里边

22:11.290 --> 22:12.490
我们直接抛出一个错误

22:12.490 --> 22:13.050
6

22:13.050 --> 22:13.490
a

22:18.820 --> 22:20.220
直接是直接抛出的错误

22:20.220 --> 22:20.700
试一下

22:24.550 --> 22:25.390
错误得到了

22:27.710 --> 22:28.910
错误消息得到了

22:28.910 --> 22:29.470
但是呢

22:29.470 --> 22:30.990
这边是没有运行的

22:30.990 --> 22:32.190
因为他是一一步的

22:32.190 --> 22:33.430
如果他不是一步的话

22:33.430 --> 22:34.350
就好办了

22:34.350 --> 22:37.930
我看一下先确定一下

22:37.930 --> 22:39.010
是不是一步的问题

22:40.290 --> 22:40.970
再发送

22:41.810 --> 22:44.730
果然他不是一不是一步的话

22:44.730 --> 22:46.730
那么就好办了

22:47.210 --> 22:49.770
但是由于他是一个一一步的

22:51.410 --> 22:52.490
就出现这个问题

22:53.090 --> 22:54.330
他这边补货不到了

22:55.210 --> 22:56.530
补货不到这边的错误了

22:57.530 --> 22:59.290
根本的原因是因为Express

22:59.290 --> 23:01.930
他这个一一步的支持不是很好

23:02.730 --> 23:03.610
KOA好一点

23:03.610 --> 23:05.610
KOA2他对一一步的支持非常好

23:06.050 --> 23:07.370
这个地方我们这样子干脆

23:07.770 --> 23:09.850
这样子总有解决办法的

23:11.250 --> 23:12.770
我以前解决那种解决

23:12.770 --> 23:15.170
这个问题的办法有点太过复杂了

23:15.170 --> 23:16.250
我给大家说个简单的

23:17.690 --> 23:18.530
这里我们这样子

23:18.530 --> 23:19.850
我们把这个函数包装一下

23:20.290 --> 23:20.730
其实这个东西

23:20.730 --> 23:22.050
我们可以这样子来处理

23:22.050 --> 23:23.970
比方说我们刚才像这个模式

23:24.490 --> 23:25.130
像这个地方

23:25.730 --> 23:26.730
这个地方我们其实

23:26.730 --> 23:27.930
如果说是以手写的话

23:27.930 --> 23:28.370
完全可以

23:28.370 --> 23:29.530
就是手写太麻烦了

23:30.250 --> 23:31.170
用个TryCache嘛

23:31.450 --> 23:31.850
对不对

23:32.890 --> 23:33.490
TryCache

23:34.250 --> 23:35.850
Cache不是开启到一个错误吗

23:35.850 --> 23:36.250
对不对

23:37.250 --> 23:38.450
开启到一个Error

23:38.690 --> 23:39.650
那么这个Error

23:39.650 --> 23:41.170
我们就手动用Next

23:42.050 --> 23:43.730
我们手动的用Next

23:44.730 --> 23:46.010
把它包装一下

23:46.290 --> 23:47.970
包装到那个时代里边去

23:48.330 --> 23:50.410
这样子由于用那个时代的显示调用

23:50.410 --> 23:51.970
那么它后续就可以出发了

23:52.170 --> 23:52.850
好 咱们来看一下

23:52.850 --> 23:53.970
这种模式肯定是可以的

23:54.570 --> 23:55.770
就是写线比较麻烦

23:57.490 --> 23:58.010
你看一下

23:58.570 --> 24:00.210
现在是不是出现了错误了

24:00.690 --> 24:01.050
对不对

24:01.730 --> 24:02.090
我们看

24:02.610 --> 24:03.090
没问题吧

24:03.730 --> 24:04.490
我们看一下控制台

24:05.370 --> 24:06.730
控制台这里

24:08.410 --> 24:08.930
打印出来

24:08.930 --> 24:10.050
为什么打印空对象呢

24:10.050 --> 24:10.330
这里

24:10.570 --> 24:11.330
我哪里在打印

24:14.060 --> 24:14.460
我哪里

24:14.940 --> 24:16.060
这个地方是哪里打印的

24:19.890 --> 24:20.610
再来说

24:20.970 --> 24:22.290
这打印空对象

24:23.650 --> 24:24.250
看一下

24:24.250 --> 24:24.850
先看一下

24:24.850 --> 24:26.050
这个东西哪里打印的

24:26.770 --> 24:27.810
这里边有没有扛收

24:28.330 --> 24:28.730
没有

24:29.090 --> 24:30.370
然后这里边也没有

24:30.650 --> 24:31.330
音列车里边

24:31.330 --> 24:32.610
音列车里边有扛收

24:33.690 --> 24:34.210
在这

24:35.330 --> 24:36.490
这是打印port

24:37.410 --> 24:38.810
那应该是学生这里

24:38.810 --> 24:39.530
学生

24:39.530 --> 24:40.650
学生service里边

24:41.850 --> 24:42.690
这里边有扛收

24:43.370 --> 24:43.890
在这里

24:44.450 --> 24:45.050
添加学生

24:50.360 --> 24:51.400
再看一看

24:52.000 --> 24:52.920
这个地方

24:52.920 --> 24:53.840
我们

24:56.500 --> 24:57.860
在students这里

24:58.220 --> 24:58.620
arrow

24:58.620 --> 25:00.340
我们把这个arrow打印出来看一下

25:00.340 --> 25:01.300
arrow打印出来

25:02.780 --> 25:03.180
看一下

25:04.180 --> 25:04.780
port

25:05.460 --> 25:05.940
发送

25:06.100 --> 25:06.460
然后了

25:06.460 --> 25:06.820
arrow

25:07.500 --> 25:08.300
这是我们的arrow

25:08.300 --> 25:08.660
对吧

25:08.860 --> 25:09.740
这是我们的arrow

25:09.740 --> 25:10.420
arrow对象

25:11.540 --> 25:13.340
然后到了这个就是

25:13.500 --> 25:14.780
arrow mid-wire里边

25:15.060 --> 25:16.340
我们这里判断了一下

25:16.580 --> 25:17.260
判断了一下

25:17.260 --> 25:18.740
arrow obj

25:18.980 --> 25:20.380
arrow obj没传进去

25:20.940 --> 25:23.140
第一个参数arrow我们不传

25:23.980 --> 25:25.460
第一个参数就是arrow obj

25:26.740 --> 25:27.340
obj

25:27.340 --> 25:27.860
这样子

25:29.020 --> 25:29.300
好

25:29.300 --> 25:29.780
来吧

25:32.700 --> 25:33.500
send里面设计

25:33.660 --> 25:35.180
你看我们的错误消息

25:36.780 --> 25:37.660
错误消息是不是

25:39.260 --> 25:40.140
这么多了一个

25:41.700 --> 25:43.420
standard code send

25:44.140 --> 25:46.620
get arrow obj

25:47.340 --> 25:49.180
arrow obj我们就不需要这个了

25:50.340 --> 25:51.380
直接用这个就行了

25:55.420 --> 25:55.620
好

25:55.620 --> 25:56.020
再来

25:56.660 --> 25:57.180
send

25:57.340 --> 25:58.220
那么现在我们就是

25:58.220 --> 25:59.420
这是我们想要的消息

25:59.420 --> 25:59.900
对吧

26:00.260 --> 26:01.140
这是错误消息

26:01.140 --> 26:02.820
告诉我错误发生在什么地方

26:02.820 --> 26:03.900
有哪些错误

26:04.340 --> 26:05.500
那么但是这种写法

26:05.620 --> 26:06.900
稍微麻烦了一点

26:07.220 --> 26:07.540
就这里

26:07.540 --> 26:09.140
我们每一次调用的时候

26:09.460 --> 26:10.100
每次调用的时候

26:10.100 --> 26:10.980
都要用一个shake action

26:10.980 --> 26:12.580
所以说我们刚才能写一个辅助函数

26:12.580 --> 26:13.740
来帮他包装一下

26:14.580 --> 26:15.380
帮他包装一下

26:15.380 --> 26:16.500
刚才有一个辅助函数

26:16.620 --> 26:17.020
我们这里

26:17.740 --> 26:19.820
就是刚才不是一个get send results

26:20.060 --> 26:20.540
对不对

26:22.700 --> 26:24.420
我们在这里再加个辅助函数

26:25.420 --> 26:27.980
叫做那个

26:28.500 --> 26:30.140
handler wipe

26:31.300 --> 26:32.420
就是来包装一下

26:32.420 --> 26:33.940
我们的handler就是处理函数

26:34.060 --> 26:34.900
来包装一下

26:35.100 --> 26:36.700
他其实他就提供的是什么呢

26:36.700 --> 26:38.620
他就提供的是一个处理函数

26:38.620 --> 26:40.020
一个异布的处理函数

26:40.180 --> 26:41.220
我们这里可以写个

26:41.340 --> 26:43.140
async handler

26:43.460 --> 26:44.620
async handler

26:44.740 --> 26:46.100
我们写个函数

26:46.100 --> 26:47.900
regress next

26:49.700 --> 26:50.380
包装一下

26:51.380 --> 26:54.580
这个地方

26:54.700 --> 26:55.780
对没问题

26:55.780 --> 26:57.580
然后你给我一个什么

26:57.580 --> 26:58.700
给我一个处理函数

26:58.700 --> 26:59.860
给我一个处理函数

26:59.860 --> 27:01.100
我本身是异布的

27:01.100 --> 27:01.380
对吧

27:01.380 --> 27:02.460
你给我一个处理函数

27:02.460 --> 27:03.580
那么我这个时候

27:03.580 --> 27:06.340
我就用我就调用handler这个函数

27:07.540 --> 27:08.660
我返回一个新的函数

27:08.660 --> 27:10.140
所以我返回一个新的函数

27:10.940 --> 27:12.500
regress next

27:13.220 --> 27:14.340
这个新的函数里边

27:14.580 --> 27:16.220
我就去调用你这个handler

27:17.980 --> 27:18.540
await

27:19.100 --> 27:19.620
handler

27:20.140 --> 27:21.100
他去调用他

27:23.020 --> 27:24.220
然后调用他

27:24.220 --> 27:26.100
调用完了过后了

27:26.100 --> 27:28.580
你给我得到这个handler的结果

27:30.020 --> 27:30.620
regress

27:30.820 --> 27:32.140
得到这个handler的结果

27:32.300 --> 27:33.460
得到了之后

27:33.740 --> 27:35.740
我们这里用一个check-in写包装一下

27:36.820 --> 27:38.220
这个可能有些人听不懂

27:38.220 --> 27:39.540
我来写完了看一下

27:40.420 --> 27:41.940
得到这个regress的结果

27:41.940 --> 27:45.380
然后我们这里使用ress send

27:47.260 --> 27:48.260
发送一个消息

27:48.420 --> 27:49.140
发送什么消息

27:49.140 --> 27:51.260
发送这个就是get error

27:51.580 --> 27:52.140
发送这个

27:52.380 --> 27:53.420
get result

27:56.530 --> 27:57.730
把这个result拿到

27:58.610 --> 27:59.450
发送消息

27:59.450 --> 28:00.130
catch

28:00.130 --> 28:01.450
如果说遇到了错误

28:02.210 --> 28:03.170
遇到了错误的话

28:03.170 --> 28:07.290
我们就用之前的就是用next

28:07.650 --> 28:08.770
把这个错误扔进去

28:09.330 --> 28:10.690
我们就写出来这么一个函数

28:10.970 --> 28:11.810
这个函数有什么用

28:11.810 --> 28:12.730
我告诉大家

28:12.850 --> 28:14.570
你给我传一个异布函数进来

28:14.970 --> 28:16.650
我给你返回一个处理函数

28:16.770 --> 28:17.610
我给你包装一下

28:17.770 --> 28:18.770
返回一个处理函数

28:18.970 --> 28:19.690
这个处理函数

28:19.690 --> 28:21.010
我就调用你这个异布函数

28:21.050 --> 28:22.810
得到你这个异布函数的结果

28:23.010 --> 28:25.650
然后如果说中间没有任何异常发生

28:25.650 --> 28:26.810
没有任何错误发生

28:26.810 --> 28:28.690
那我就把这个结果直接

28:29.090 --> 28:31.490
用刚才我们封装了这个函数

28:31.650 --> 28:32.410
封装一下

28:32.610 --> 28:33.610
封装成这种模式

28:33.610 --> 28:34.490
然后给你返回

28:34.810 --> 28:35.730
send 返回

28:35.850 --> 28:36.730
想印过去

28:36.890 --> 28:38.410
如果说你中间发生了错误的话

28:38.410 --> 28:39.290
我就调用next

28:39.290 --> 28:41.370
让后续的中间进来处理这个错误

28:41.970 --> 28:42.650
明白了意思吗

28:43.010 --> 28:43.810
这就是

28:44.010 --> 28:44.770
Handle的时候

28:44.770 --> 28:45.970
我们还要把一个传进去

28:45.970 --> 28:47.130
regress

28:47.250 --> 28:48.730
那个是把这个三个东西传进去

28:48.730 --> 28:50.650
因为你可能要用到这里边的东西

28:51.050 --> 28:52.290
我们把写成这种模式

28:52.290 --> 28:53.210
写成这种模式过后

28:53.210 --> 28:54.690
后续我们就这样来处理

28:55.770 --> 28:56.210
我们这里

28:56.210 --> 28:57.130
send的message里边

28:57.130 --> 28:57.890
我们就这里

28:58.370 --> 28:59.210
就不用这个玩了

28:59.210 --> 28:59.970
就用什么呢

29:00.090 --> 29:00.770
就用那个

29:00.890 --> 29:02.090
async handle

29:02.730 --> 29:04.330
就用这个解构一下

29:04.450 --> 29:05.370
那么像这个地方

29:05.370 --> 29:06.370
我们就怎么写了

29:06.650 --> 29:07.610
async handle

29:07.850 --> 29:09.570
把这个函数传进去

29:11.050 --> 29:11.770
明白了意思吧

29:12.530 --> 29:13.130
看

29:13.250 --> 29:13.970
async handle

29:13.970 --> 29:15.330
我把整个函数

29:16.010 --> 29:17.090
给作为参数传进去

29:17.090 --> 29:18.250
让你包装一下

29:18.250 --> 29:20.130
你这个函数是不是返回一个新的函数

29:20.490 --> 29:20.970
对不对

29:21.290 --> 29:21.810
你这个地方

29:22.250 --> 29:23.850
它会返回一个新的函数

29:24.450 --> 29:25.330
返回这个新的函数

29:25.330 --> 29:26.330
这个新的函数

29:26.330 --> 29:27.850
就是我们真正的处理函数

29:28.090 --> 29:29.170
它给你封装了一下

29:29.170 --> 29:30.690
那么这个地方我们写下就简单了

29:30.690 --> 29:31.930
我们这个地方就不用

29:31.930 --> 29:32.810
不用这个send了

29:32.810 --> 29:34.250
我们直接把一个返回就行了

29:34.370 --> 29:36.130
把我们正常的结果返回就完事了

29:36.130 --> 29:37.450
如果说遇到了错误

29:37.450 --> 29:39.330
如果说你返回了一个正常的结果

29:39.330 --> 29:40.050
你看这边

29:40.290 --> 29:41.210
它是不是就给你

29:41.210 --> 29:43.090
把这个正常的结果响应过去了

29:43.090 --> 29:44.010
你都少写一句代

29:44.010 --> 29:44.490
对吧

29:44.690 --> 29:45.890
如果说你中间出现的错误

29:45.890 --> 29:47.250
它会自动往后移交

29:47.810 --> 29:48.650
是不是这个逻辑

29:48.890 --> 29:50.690
那么这里我们把写成这种模式

29:51.490 --> 29:52.410
这边也是一样

29:52.570 --> 29:54.290
sync handler

29:57.940 --> 29:59.100
那么这边也是一样

29:59.100 --> 30:00.420
我这里就直接返回

30:02.100 --> 30:02.580
语通

30:02.860 --> 30:03.660
直接返回

30:05.340 --> 30:06.300
这边也是一样

30:06.300 --> 30:06.820
post

30:07.620 --> 30:09.020
sync handler

30:13.060 --> 30:13.340
好

30:13.340 --> 30:15.300
这边我这里不需要去揣开起来

30:15.300 --> 30:16.060
我直接返回

30:16.220 --> 30:18.100
这边写下就非常简单了

30:21.440 --> 30:21.880
对不对

30:21.880 --> 30:22.200
好

30:22.200 --> 30:22.800
咱们再看一下

30:23.600 --> 30:24.240
再看一下

30:24.480 --> 30:26.840
现在我们去添加

30:27.680 --> 30:28.320
出现问题

30:29.720 --> 30:30.560
看一下什么问题

30:35.160 --> 30:35.440
好了

30:35.440 --> 30:35.880
什么呢

30:36.080 --> 30:39.200
他说get request a callback function

30:39.200 --> 30:40.520
but got object

30:43.340 --> 30:46.980
他说他这个玩意儿需要得到的是一个

30:48.820 --> 30:50.860
他这个返回的不是一个函数

30:50.860 --> 30:51.860
我这里是一个函数

30:52.460 --> 30:53.420
怎么就不是函数了

30:53.580 --> 30:55.100
反回的是一个函数

30:57.380 --> 30:58.340
反回的是一个函数

30:59.340 --> 30:59.820
抽进来

31:01.420 --> 31:02.860
这种写法肯定是可以的

31:03.300 --> 31:04.860
我们再测试一下

31:04.860 --> 31:06.580
哪里写的问题

31:06.820 --> 31:08.220
一开始运行报错了

31:08.420 --> 31:08.860
他说

31:08.860 --> 31:11.300
get request a callback function

31:11.300 --> 31:12.900
but got object

31:13.780 --> 31:14.340
再来

31:14.340 --> 31:16.180
我们看一下哪个地方写的一个问题

31:20.420 --> 31:23.180
这个地方我们传一个一步函数进去

31:23.300 --> 31:24.740
然后调用这个函数

31:24.740 --> 31:26.940
他会返回一个新的函数

31:27.340 --> 31:29.380
他返回的肯定是一个新的函数

31:29.780 --> 31:30.740
是没问题的

31:34.510 --> 31:35.030
找一找

31:35.870 --> 31:40.030
a think handler

31:40.430 --> 31:41.790
我调用这个函数

31:41.790 --> 31:43.230
你给我一个handler

31:43.510 --> 31:45.430
然后我返回的是

31:45.950 --> 31:48.190
一个新的一步函数

31:49.270 --> 31:51.390
返回的是这么一个新的一步函数

31:54.490 --> 31:56.250
他告诉我这个a think handler

31:56.250 --> 31:58.010
返回的不是一步函数

31:59.010 --> 32:00.450
它是一个promise

32:00.650 --> 32:01.450
那肯定不对

32:01.650 --> 32:03.170
它肯定不是一个promise

32:03.650 --> 32:04.770
我们这里随便复制一个

32:04.770 --> 32:06.610
我们看一下哪一句写的

32:06.610 --> 32:07.250
出了问题

32:07.250 --> 32:08.410
我们把这个先注尸掉

32:08.650 --> 32:09.610
开始调错了

32:11.090 --> 32:12.330
这里还是出了问题

32:12.330 --> 32:13.570
那么我们把这个注尸掉

32:16.340 --> 32:17.020
再来

32:20.260 --> 32:20.900
你行

32:22.060 --> 32:23.220
这个地方没出问题了

32:23.220 --> 32:24.540
那么我们就先定位

32:24.540 --> 32:26.580
定位到错误是哪一句话报出来的

32:26.580 --> 32:28.460
我们把这个加上

32:28.940 --> 32:30.060
这个加上报了一个错误

32:30.060 --> 32:30.420
对吧

32:30.420 --> 32:31.380
那么我们这样子

32:31.380 --> 32:33.980
他说这个东西返回的不是一个函数

32:33.980 --> 32:34.700
那我就看一下

32:34.700 --> 32:35.980
他到底是不是一个函数

32:35.980 --> 32:37.340
我们就输出这个结果

32:37.900 --> 32:38.780
输出这个结果

32:38.780 --> 32:40.220
我们看一下他到底是不是一个函数

32:40.220 --> 32:41.100
我们把这个注尸掉

32:43.660 --> 32:44.980
他得到的是什么

32:44.980 --> 32:46.260
得到的是一个promise

32:46.260 --> 32:48.060
那么这个地方肯定有出了问题

32:48.060 --> 32:48.980
而SingHandler

32:48.980 --> 32:51.700
我把我传了一个异步函数进去

32:52.020 --> 32:54.140
你看我传了一个异步函数进去

32:54.140 --> 32:55.980
他给我返回的是一个promise

32:55.980 --> 32:57.220
那肯定是不对的

32:57.540 --> 32:58.700
那肯定是不对的

32:58.980 --> 32:59.620
这个函

32:59.620 --> 33:00.620
我们看一下这个

33:00.620 --> 33:02.180
这是一个函数

33:02.620 --> 33:04.300
我调用这个函数

33:06.380 --> 33:07.660
我调用这个函数

33:07.660 --> 33:09.100
应该返回的是这个

33:09.100 --> 33:11.140
他为什么会返回一个promise呢

33:12.020 --> 33:13.100
这个东西不是promise

33:13.100 --> 33:14.300
这是一个函数

33:15.540 --> 33:17.100
他为什么会告诉我

33:17.100 --> 33:18.460
返回的是一个promise

33:18.460 --> 33:20.860
那我这个也返回一个123

33:22.020 --> 33:24.420
他得到的是一个promise123

33:28.940 --> 33:30.380
我给他的是一个函数

33:30.380 --> 33:31.700
那我给他的是这个呢

33:32.820 --> 33:34.900
比方说我们还在测试

33:39.060 --> 33:40.740
这东西应该返回的是一个函数了吧

33:43.260 --> 33:44.740
明白了

33:44.740 --> 33:45.460
明白了

33:45.460 --> 33:46.140
我明白了

33:47.420 --> 33:49.180
我这个地方不应该写而SingHandler

33:49.500 --> 33:50.980
这个地方不应该写而SingHandler

33:50.980 --> 33:51.500
为什么

33:51.500 --> 33:52.740
因为这个地方写的而SingHandler

33:52.740 --> 33:54.740
标记的整个函数是一个promise

33:54.740 --> 33:55.940
他返回的一定是promise

33:55.940 --> 33:56.260
对吧

33:56.260 --> 33:57.740
这个地方我不应该写而SingHandler

33:57.740 --> 33:58.940
他就是给我一个函数

33:58.940 --> 33:59.940
我给他一个

33:59.940 --> 34:01.300
给他一个异部函数

34:01.300 --> 34:02.140
是这么一个意思

34:03.300 --> 34:03.940
错在这

34:04.740 --> 34:05.620
那么现在就对了

34:05.620 --> 34:06.980
现在是返回的是一个函数了

34:07.740 --> 34:08.420
这个错误

34:09.100 --> 34:09.740
不小心

34:09.740 --> 34:10.740
放下这个错误

34:11.340 --> 34:13.220
这里让我们把这个注射取消掉

34:13.220 --> 34:14.180
现在应该没问题了

34:15.220 --> 34:16.820
反正有问题我们就解决

34:17.900 --> 34:19.540
接下来我们搞定了之后

34:21.380 --> 34:22.300
现在没问题了

34:22.300 --> 34:23.300
然后我们SingHandler

34:23.740 --> 34:24.780
你看是不是搞定了

34:24.780 --> 34:25.100
对吧

34:25.100 --> 34:27.620
我们这样子写起来又简单

34:27.620 --> 34:29.180
我们这种写法又简单

34:29.180 --> 34:31.100
而且他会自动帮我们搞定错误

34:31.100 --> 34:33.420
而且自动发送正确的响应结果

34:33.420 --> 34:34.860
比方说我们这里能用gats

34:36.960 --> 34:38.360
你看是不是正确的响应结果

34:38.840 --> 34:39.360
对不对

34:40.120 --> 34:41.240
那么这些东西搞定了

34:41.920 --> 34:42.800
抛射请求了

34:42.800 --> 34:44.280
我们可以给他一个正确的

34:44.880 --> 34:45.280
来个正确

34:45.280 --> 34:46.400
他不是说我们Name

34:47.000 --> 34:48.040
没有Name

34:48.040 --> 34:49.160
没有Name是吧

34:49.160 --> 34:50.400
我们给他给他吧

34:50.400 --> 34:51.560
我们用节省格是吧

34:52.400 --> 34:53.160
给他一个Name

34:55.230 --> 34:56.310
Name等于

34:57.310 --> 34:58.230
比方说邓哥

35:00.390 --> 35:01.110
邓了

35:01.110 --> 35:01.550
老邓了

35:02.510 --> 35:02.950
邓哥

35:04.550 --> 35:05.910
然后还有什么Burst

35:05.910 --> 35:06.950
Burst还没有给他

35:06.950 --> 35:07.470
Burst

35:09.310 --> 35:10.110
Burst的话

35:10.110 --> 35:10.870
我们给他一个

35:12.470 --> 35:14.310
2020年1月1号

35:15.670 --> 35:17.230
然后还有什么Six

35:17.910 --> 35:19.310
Six没有给他

35:19.310 --> 35:20.070
新别的话

35:20.070 --> 35:20.670
给他一个

35:23.070 --> 35:23.510
Mobile

35:25.150 --> 35:26.110
给他一个

35:26.110 --> 35:26.950
随便吧

35:30.950 --> 35:31.950
再来一个

35:31.950 --> 35:32.550
还有什么

35:32.550 --> 35:33.550
还有ClassID

35:38.980 --> 35:39.900
给他一个数字

35:39.900 --> 35:40.740
13

35:41.540 --> 35:42.020
行了

35:42.020 --> 35:42.540
since

35:43.300 --> 35:43.780
他告诉我

35:44.300 --> 35:45.540
我生日有问题

35:45.540 --> 35:45.780
对吧

35:45.780 --> 35:46.940
生日我们之前有验证的

35:46.940 --> 35:47.620
有问题

35:47.620 --> 35:48.740
那么我们这里写上一个

35:48.740 --> 35:49.740
2010年

35:50.340 --> 35:51.020
since

35:51.020 --> 35:52.180
现在什么没问题了

35:52.180 --> 35:53.180
把扣的为0了

35:53.180 --> 35:53.660
没问题了

35:53.660 --> 35:54.260
那么这些东西

35:54.260 --> 35:56.060
是不是全部把给力了

35:56.060 --> 35:56.540
对吧

35:56.820 --> 35:57.580
新增的ID

35:57.580 --> 35:58.980
这些信息全部给力了

35:58.980 --> 35:59.220
对吧

35:59.220 --> 35:59.780
就新增了

35:59.780 --> 36:00.420
新增了一个邓哥

36:00.420 --> 36:01.300
我们看一下吧

36:01.300 --> 36:02.820
是不是真的新增了一个邓哥

36:02.820 --> 36:03.820
右键刷新

36:04.700 --> 36:04.940
对

36:04.940 --> 36:05.820
往下往下

36:06.460 --> 36:07.100
数据库里面

36:07.100 --> 36:08.100
是不是多了一个邓哥

36:08.700 --> 36:09.340
对不对

36:09.340 --> 36:09.500
好

36:09.500 --> 36:10.540
这是新增

36:10.540 --> 36:10.820
好

36:10.820 --> 36:12.060
那么我们3除了

36:12.060 --> 36:12.780
是一样的

36:12.780 --> 36:13.660
3除

36:13.660 --> 36:14.380
3除的学生

36:14.380 --> 36:16.500
我们也是用这种方式

36:17.700 --> 36:18.300
3除了

36:18.300 --> 36:20.700
我们得到的结果是

36:20.700 --> 36:23.900
3除DNet

36:25.830 --> 36:27.510
3除的是给

36:28.270 --> 36:29.270
给学生ID

36:30.030 --> 36:30.710
DNet

36:30.710 --> 36:31.470
Students

36:31.950 --> 36:33.310
RigParents

36:34.030 --> 36:34.750
点ID

36:34.750 --> 36:36.390
把这个动态的ID得到

36:36.390 --> 36:36.630
好

36:36.630 --> 36:37.390
来3除的学生

36:37.390 --> 36:38.190
来测试一下

36:38.630 --> 36:39.190
就是我们平时

36:39.190 --> 36:39.870
开发接口的时候

36:39.870 --> 36:40.430
就是这样子

36:40.430 --> 36:41.870
用Post面来测试就行了

36:42.070 --> 36:42.630
DNet

36:43.670 --> 36:44.430
去3除

36:45.190 --> 36:45.950
给一个ID

36:45.950 --> 36:46.950
一般来说

36:46.950 --> 36:48.750
DNet它不会给消息体的

36:48.750 --> 36:50.110
一般不会给消息体

36:50.110 --> 36:51.190
像DNet

36:51.190 --> 36:51.950
Gate

36:51.950 --> 36:52.310
对啊

36:52.310 --> 36:53.750
这些东西都不会给消息体

36:53.750 --> 36:54.790
像Post

36:54.790 --> 36:55.710
Post这些东西

36:55.710 --> 36:57.270
这些方法是给消息体的

36:58.070 --> 36:59.070
比方说3除ID

36:59.070 --> 37:00.910
刚才登革的ID是1793

37:00.910 --> 37:01.670
1793

37:01.670 --> 37:02.270
其实把这些东西

37:02.270 --> 37:03.470
你还可以保存

37:03.470 --> 37:04.270
把这些请求

37:04.270 --> 37:05.150
你可以保存下来

37:05.150 --> 37:06.190
抗吐下S

37:06.190 --> 37:06.870
保存起来

37:06.870 --> 37:07.630
比方说我们保存

37:07.630 --> 37:08.310
给它取个名字

37:09.710 --> 37:10.510
取个名字

37:11.750 --> 37:12.710
它问你保存哪

37:12.710 --> 37:14.030
你可以在这里新建一个

37:14.630 --> 37:15.430
新建一个

37:15.430 --> 37:17.390
比方说我们新建一个collection

37:17.390 --> 37:18.110
给它取个名字

37:18.110 --> 37:22.390
叫做学生管理系统

37:23.590 --> 37:24.470
接口测试

37:24.470 --> 37:25.150
那么在这里面

37:25.150 --> 37:26.470
还可以建一些纸文件夹

37:28.830 --> 37:29.630
add folder

37:30.630 --> 37:31.590
学生管理

37:32.150 --> 37:33.230
还有什么班级管理

37:33.230 --> 37:33.550
对吧

37:33.550 --> 37:33.950
那些东西

37:33.950 --> 37:35.350
我们可以把一些请求的测试

37:35.350 --> 37:36.390
都保存起来

37:36.390 --> 37:37.430
刚才我们去

37:37.430 --> 37:39.390
比方说我们刚才去新建了一个

37:40.070 --> 37:40.710
复制一下

37:42.270 --> 37:42.790
用这里

37:43.470 --> 37:46.030
新建一个API student

37:47.230 --> 37:48.710
这里是查询学生

37:48.710 --> 37:49.030
对吧

37:49.030 --> 37:49.790
查询学生的接口

37:49.790 --> 37:50.590
我们把保存一下

37:50.590 --> 37:51.550
抗吐下S

37:51.550 --> 37:52.190
保存了

37:52.190 --> 37:53.390
我们现在就选择

37:53.390 --> 37:55.110
学生管理系统的学生管理

37:55.110 --> 37:55.910
选到这

37:55.910 --> 37:57.190
然后给它取个名字

37:57.470 --> 37:58.390
分页

37:58.390 --> 37:59.550
获取学生

38:00.750 --> 38:01.470
保存

38:01.830 --> 38:02.350
保存过来

38:02.350 --> 38:03.190
你看点这个

38:03.190 --> 38:05.470
是不是就可以获得之前的接口测试了

38:05.470 --> 38:06.750
我们就可以反复的去测试

38:07.750 --> 38:09.030
后续了就方便一点

38:09.030 --> 38:10.110
一开始麻烦一点

38:10.110 --> 38:11.030
后续方便一点

38:11.350 --> 38:12.750
这里是dnet对吧

38:12.750 --> 38:14.350
dnet我们保存

38:14.350 --> 38:15.510
这是三处学生

38:16.830 --> 38:18.030
三处学生

38:18.870 --> 38:21.190
这我们还是保存到学生管理里面

38:21.190 --> 38:21.750
保存

38:21.750 --> 38:22.750
你看是不是有个三处学生

38:23.630 --> 38:25.110
到时候我们就可以切换过来

38:25.110 --> 38:26.270
来反复进行测试

38:26.750 --> 38:27.550
这里的三处学生

38:27.550 --> 38:29.070
那么就是个1793

38:29.070 --> 38:30.070
1793我们呢

38:30.070 --> 38:30.670
渗试一下

38:31.670 --> 38:32.950
这里报错了是吧

38:32.950 --> 38:34.190
应该是出了问题

38:37.550 --> 38:39.390
这边没有打印出来的东西

38:39.390 --> 38:39.990
dnet

38:40.670 --> 38:42.790
dnet完没写吗

38:42.790 --> 38:43.270
写了呀

38:44.350 --> 38:45.310
dnet student

38:46.390 --> 38:46.550
好

38:46.550 --> 38:47.470
这里又出问题了

38:47.470 --> 38:47.990
又出问题

38:47.990 --> 38:49.150
我们又来调

38:49.150 --> 38:50.870
首先我们在这里输出一个

38:50.870 --> 38:52.350
输出一个Rig

38:52.350 --> 38:53.910
Dear Parents ID

38:53.910 --> 38:55.750
看一下这个这句话有没有运行

38:58.060 --> 38:58.700
出问题

38:58.700 --> 39:00.300
我们平时开发的时候出问题是很多的

39:00.300 --> 39:00.620
对吧

39:01.380 --> 39:02.020
这里呢

39:02.020 --> 39:03.900
ID没有运行是吧

39:03.900 --> 39:04.580
所以没有运行

39:05.660 --> 39:06.300
dnet

39:06.300 --> 39:09.660
我们首先看一下请求的那个路径对不对

39:09.660 --> 39:10.740
dnet

39:10.740 --> 39:12.460
APS student 1793

39:12.460 --> 39:13.300
这都对的

39:13.300 --> 39:13.780
没问题的

39:14.860 --> 39:16.780
那么现在我们把这个东西注释掉

39:16.780 --> 39:18.420
首先我们看一下这个函数有没有运行

39:23.110 --> 39:24.070
这里保存一下

39:25.630 --> 39:26.270
接下来我们再来

39:27.550 --> 39:27.950
send

39:29.430 --> 39:29.590
好

39:29.590 --> 39:31.270
这个函数是根本没有运行是吧

39:32.190 --> 39:33.470
根本就没有运行的函数

39:34.750 --> 39:36.550
那么这个函数是被它来调用的

39:36.550 --> 39:37.830
那么我们又进它来去

39:37.830 --> 39:38.670
进它去看

39:38.670 --> 39:40.110
看这个函数有没有运行

39:43.390 --> 39:44.190
看一下这个函数

39:44.910 --> 39:45.870
这个函数有没有运行

39:48.390 --> 39:49.190
我们这里呢

39:49.190 --> 39:50.230
输出

39:50.230 --> 39:50.950
123

39:50.950 --> 39:51.630
随便输出一个

39:55.860 --> 39:56.980
这个函数也没有运行

39:57.620 --> 39:57.820
好

39:57.820 --> 39:58.780
那么咱们再来

39:59.380 --> 40:00.900
你需要说小范围

40:00.900 --> 40:02.860
我们现在呢就更加暴力一点

40:02.860 --> 40:03.500
我看到了

40:03.500 --> 40:04.260
我看到情况了

40:05.580 --> 40:06.020
是在这

40:06.020 --> 40:07.020
是在这

40:07.260 --> 40:08.100
这个东西是不要的

40:09.060 --> 40:09.820
这个东西是不要的

40:15.520 --> 40:16.280
这个东西

40:16.280 --> 40:17.080
这个分号不一样

40:17.760 --> 40:18.360
应该是这种

40:18.360 --> 40:18.960
这种型号

40:19.880 --> 40:20.280
看到了

40:20.800 --> 40:22.000
那么这里把这个删除掉

40:22.640 --> 40:23.040
没问题了

40:23.840 --> 40:24.920
现在我们把这个取掉

40:27.200 --> 40:27.400
好

40:27.400 --> 40:27.880
保存

40:27.880 --> 40:28.200
再来

40:29.120 --> 40:29.520
send

40:29.520 --> 40:30.080
OK

40:30.080 --> 40:30.480
没问题了

40:30.640 --> 40:31.560
删除了一个学生

40:31.560 --> 40:31.960
对吧

40:31.960 --> 40:33.200
这是表示删除了函数

40:33.200 --> 40:34.120
然后再删除

40:35.040 --> 40:35.840
就没有学生了

40:35.840 --> 40:36.240
对不对

40:36.240 --> 40:36.880
当然这个

40:36.880 --> 40:38.400
delete它是不需要body的

40:38.400 --> 40:39.160
不需要body

40:39.800 --> 40:40.080
保存

40:41.000 --> 40:41.160
好

40:41.160 --> 40:41.960
这是删除学生

40:42.680 --> 40:44.480
然后修改一个学生是一样的

40:44.480 --> 40:45.120
修改一个学生

40:45.120 --> 40:46.240
我们还是用这种写法

40:50.330 --> 40:54.770
这边我们就去用update student

40:54.770 --> 40:56.050
你给我传一个学生ID

40:56.050 --> 40:56.930
学生ID是不是在这

40:56.930 --> 40:58.130
require parents

40:58.130 --> 40:58.850
就ID

40:58.850 --> 40:59.370
对吧

40:59.370 --> 41:01.210
然后修改的内容

41:01.730 --> 41:02.410
修改的内容

41:02.410 --> 41:03.490
你给我这样子传递

41:03.490 --> 41:04.530
require body

41:04.530 --> 41:05.010
对吧

41:05.010 --> 41:06.130
在消息体里边

41:06.850 --> 41:07.530
当然一个修改

41:07.530 --> 41:08.770
我就没有做任何验证了

41:08.770 --> 41:10.250
按理说是要做验证的

41:10.250 --> 41:11.610
我们目前的验证的

41:11.650 --> 41:13.530
只是做了添加学生

41:13.530 --> 41:14.810
其他验证都没有做

41:15.810 --> 41:17.050
当然我们真实的开发里边

41:17.050 --> 41:18.250
是肯定把验证都做成的

41:18.930 --> 41:19.970
然后我们来这边

41:19.970 --> 41:21.130
就试一下

41:21.130 --> 41:21.530
poor

41:22.570 --> 41:24.330
修改1793这个学生

41:24.330 --> 41:25.610
1793好像没了

41:25.610 --> 41:26.610
对吧

41:26.610 --> 41:27.530
没了

41:27.530 --> 41:29.650
那么我们这里是1791吧

41:30.610 --> 41:31.010
修改这个

41:32.130 --> 41:33.410
1791这个学生

41:34.490 --> 41:35.810
现在这是三种学生

41:35.810 --> 41:37.090
我们新建一个吧

41:37.090 --> 41:38.010
adrequest

41:38.010 --> 41:38.850
新建一个

41:38.850 --> 41:40.130
这是修改学生

41:43.210 --> 41:43.930
保存

41:44.930 --> 41:46.130
修改学生

41:46.130 --> 41:47.090
给它改成铺子

41:48.090 --> 41:48.890
请求的例子

41:48.890 --> 41:49.810
localhost

41:50.530 --> 41:51.690
5008

41:51.690 --> 41:53.010
api students

41:54.210 --> 41:55.210
1791

41:56.210 --> 41:57.370
然后 body

41:57.370 --> 41:58.330
给它写一个吧

41:58.330 --> 41:59.730
修改成啥呢

41:59.730 --> 42:01.210
修改成

42:01.210 --> 42:02.770
新名修改一下吧

42:02.770 --> 42:03.650
name

42:03.650 --> 42:04.490
给它改成

42:06.690 --> 42:07.690
成歌

42:08.250 --> 42:08.650
然后呢

42:08.650 --> 42:09.810
bust date 给它改一下

42:09.810 --> 42:10.930
bust date

42:10.970 --> 42:11.490
改一下

42:11.490 --> 42:14.210
改成1990年1月1号

42:16.850 --> 42:17.370
好

42:17.370 --> 42:17.970
点击修改

42:19.050 --> 42:19.770
它告诉你

42:19.770 --> 42:20.450
修改成功了

42:20.450 --> 42:21.330
好

42:21.330 --> 42:22.530
我们在数据户里面去看一下

42:24.170 --> 42:24.610
刷新

42:26.920 --> 42:28.480
你看就变成成歌了

42:28.480 --> 42:28.920
对吧

42:28.920 --> 42:29.560
17

42:29.560 --> 42:30.160
对吧

42:30.160 --> 42:31.040
那灯格

42:31.040 --> 42:32.240
灯格说为什么没有3呢

42:32.240 --> 42:33.040
灯格其实3了

42:33.040 --> 42:34.160
你看dinated ad

42:34.920 --> 42:35.960
你看dinated ad

42:35.960 --> 42:36.760
是不是3了

42:36.760 --> 42:37.120
对吧

42:37.120 --> 42:38.280
把它删除了

42:38.280 --> 42:38.920
那么这里呢

42:38.920 --> 42:40.440
就把这个学生的接口

42:40.440 --> 42:41.480
是不是又写完了

42:41.480 --> 42:41.760
对不对

42:41.800 --> 42:42.640
然后写的过程中

42:42.640 --> 42:43.560
如果说出现了错误

42:43.560 --> 42:45.000
就慢慢去调

42:45.640 --> 42:46.000
好了

42:46.000 --> 42:47.120
就没啥了

42:47.120 --> 42:47.680
没啥了

42:47.680 --> 42:50.040
那么也可以用同样的方式去写出班级

42:50.040 --> 42:51.720
写出书籍

42:51.720 --> 42:53.560
这个管理员也可以把写出来

42:54.960 --> 42:57.760
这是关于这一块路由的处理

42:57.760 --> 42:59.920
这是我们就真实的开发一个API

42:59.920 --> 43:00.560
用loader接式

43:00.560 --> 43:01.480
开发一个API的话

43:01.480 --> 43:02.400
大概就是这个样子

43:02.880 --> 43:04.160
就是现在至少到现在

43:04.160 --> 43:05.160
80%的情况

43:05.520 --> 43:06.800
通过这种模式来写的话

43:06.800 --> 43:07.920
就基本上可以搞定的

43:08.160 --> 43:10.120
那么后续主要是解决一些

43:10.200 --> 43:12.200
比较的一些特殊的情况

43:12.200 --> 43:12.920
也特殊的情况

43:12.920 --> 43:14.320
那么可能要做

43:14.320 --> 43:15.560
有一些麻烦

43:15.560 --> 43:16.440
要单独来进行处理

43:16.440 --> 43:17.760
我们后面慢慢解释吧

43:17.760 --> 43:19.120
这是关于这个路由这一块

