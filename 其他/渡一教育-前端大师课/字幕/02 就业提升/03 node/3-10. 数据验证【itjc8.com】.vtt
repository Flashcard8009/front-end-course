WEBVTT

00:01.070 --> 00:05.850
现在是北京时间凌晨6点

00:06.630 --> 00:09.790
昨天晚上的饭来夫妻睡不着

00:09.790 --> 00:11.110
压腾的厉害

00:11.670 --> 00:13.990
睡不着咋办呢 感觉起来爽了

00:13.990 --> 00:15.790
给大家录节课吧

00:16.430 --> 00:20.770
咱们上一课呢 讲了这个moment时间

00:20.770 --> 00:21.870
时间的一个库

00:22.030 --> 00:24.070
这里我们讲数据验证

00:24.070 --> 00:26.670
我们之前挖了坑 我得把它填上

00:27.670 --> 00:30.030
数据验证呢 它是一个非常

00:30.030 --> 00:31.470
我不能说的太大声啊

00:31.470 --> 00:33.670
因为怕吵到隔壁的人

00:34.670 --> 00:37.270
数据验证呢 它是非常重要啊

00:38.270 --> 00:40.270
也是非常繁琐的操作

00:40.670 --> 00:42.070
我们之前也讲过啊

00:42.070 --> 00:43.270
数据验证呢

00:44.270 --> 00:46.270
发生在了这么几个地方

00:47.070 --> 00:48.270
数据验证的位置

00:48.870 --> 00:50.870
数据验证的位置

00:51.270 --> 00:52.670
它发生在这么几个地方

00:53.470 --> 00:55.670
一个地方的是前端

00:56.070 --> 00:57.470
就是那个

00:58.270 --> 01:00.070
或者叫客户端 浏览器

01:00.070 --> 01:01.270
或者是手机APP

01:02.270 --> 01:02.870
客户端

01:03.470 --> 01:04.470
那么这样的验证呢

01:04.470 --> 01:07.270
它不是为了安全 跟安全一毛钱关系没有

01:07.670 --> 01:09.870
因为我们知道 用任何工具的话

01:10.470 --> 01:13.070
都可以直接发送一个请求到服务器

01:13.270 --> 01:15.870
那么这些验证呢 纯粹是为了用户体验

01:18.070 --> 01:20.470
为了用户体验

01:23.160 --> 01:24.160
为什么这样说呢

01:24.160 --> 01:25.760
如果说你不验证的话

01:25.960 --> 01:27.360
你让用户去提交

01:27.560 --> 01:29.160
提交了信息过后

01:29.160 --> 01:30.160
他会发现

01:30.960 --> 01:31.960
我写了半天

01:31.960 --> 01:33.160
结果到处是错误

01:33.560 --> 01:34.360
你就不如

01:34.360 --> 01:36.160
他写的时候就告诉他

01:36.160 --> 01:37.160
他的错误在哪

01:37.160 --> 01:38.560
让他及时的更改

01:38.560 --> 01:39.160
对吧

01:39.160 --> 01:41.160
这就是提高用户体验的

01:42.760 --> 01:44.160
另一个验证的位置呢

01:44.160 --> 01:45.760
是业务逻辑层

01:47.560 --> 01:48.560
也就是服务层

01:49.160 --> 01:50.560
那么这一块的验证呢

01:50.560 --> 01:51.760
是为了保证

01:52.360 --> 01:53.960
业务完整性

01:56.060 --> 01:56.860
什么意思呢

01:57.060 --> 01:59.060
就是我们不能允许一些

01:59.060 --> 02:00.260
业务错误

02:00.260 --> 02:02.560
就是错误的信息存在

02:02.660 --> 02:04.060
比方说学生的姓名

02:04.860 --> 02:05.560
学生的姓名呢

02:05.560 --> 02:07.560
我不允许你出现了一个

02:09.060 --> 02:09.960
十几个制服

02:10.060 --> 02:11.160
二十几个制服

02:11.160 --> 02:11.560
对吧

02:11.560 --> 02:11.960
而且呢

02:11.960 --> 02:12.760
你必须要写

02:12.760 --> 02:14.260
也不能是一个空制服串

02:14.360 --> 02:15.960
这些都是为了业务的完整性

02:15.960 --> 02:17.460
它是有业务含义的

02:17.760 --> 02:18.860
比方说手机号

02:18.860 --> 02:19.860
手机号是就

02:19.860 --> 02:21.260
如果说没有业务含义的话

02:21.260 --> 02:22.360
就是一个制服串

02:22.660 --> 02:23.960
但是有了业务含义的话

02:23.960 --> 02:25.560
你第一位必须是一吧

02:26.060 --> 02:27.260
然后呢一共十一位

02:27.260 --> 02:28.760
但是都是业务含义

02:28.860 --> 02:29.060
对吧

02:29.060 --> 02:31.460
为了保证业务的完整性

02:32.160 --> 02:32.760
然后呢

02:32.860 --> 02:33.860
还有一个验证呢

02:33.860 --> 02:35.660
是数据互验证

02:36.460 --> 02:37.460
那么这个验证呢

02:37.460 --> 02:39.960
是为了保证数据完整性

02:40.060 --> 02:40.660
这个验证呢

02:40.660 --> 02:41.560
我们一般不做

02:41.860 --> 02:43.860
在中小型项目里边一般都不用做

02:44.460 --> 02:45.460
对于我们前段来说

02:45.460 --> 02:46.460
就更加不用做了

02:46.460 --> 02:46.760
啊

02:46.760 --> 02:47.660
因为它有的

02:47.660 --> 02:48.460
复杂的系统的话

02:48.460 --> 02:49.260
也跟你没有

02:49.360 --> 02:50.860
后段也跟你没有什么关系

02:51.860 --> 02:52.760
这个数据互验证

02:52.760 --> 02:53.560
它是为了

02:54.260 --> 02:55.260
保证这么一种情况

02:55.260 --> 02:56.760
因为业务验证啊

02:57.360 --> 02:58.960
业务逻辑层的验证啊

02:58.960 --> 03:00.960
它已经保证了数据完整性了

03:00.960 --> 03:02.960
因为业务完整数据一定完整

03:02.960 --> 03:03.760
数据都不完成了

03:03.760 --> 03:04.660
谈什么业务呢

03:04.660 --> 03:04.860
对吧

03:04.860 --> 03:07.160
业务也数据完成是最基本的

03:07.860 --> 03:09.760
那么为什么还要进行数据库验证呢

03:09.760 --> 03:12.560
是因为有可能的会出现一些特殊情况

03:13.260 --> 03:15.960
可能会直接对针对数据库进行操作

03:16.160 --> 03:17.760
而跳过业务逻辑层

03:18.260 --> 03:19.760
那么遇到这种情况的话

03:19.760 --> 03:22.060
那么数据库呢作为最后一道防线

03:22.260 --> 03:23.860
要保证数据的完整性

03:24.560 --> 03:28.160
这是我们验证最有可能会发生的这么几个地方

03:28.160 --> 03:29.260
其实还有一个地方

03:29.860 --> 03:31.460
就是在这个这一层

03:32.960 --> 03:33.960
在路由层

03:35.160 --> 03:36.660
也有可能会发生验证

03:36.760 --> 03:39.760
那么验证的主要是验证的接口格式是不正常

03:39.860 --> 03:40.960
因为接口格式呢

03:40.960 --> 03:43.160
不一定是业务逻辑层

03:43.360 --> 03:45.160
这边的数据格式啊

03:45.460 --> 03:48.360
那么可能要验证那个接口格式是不正常

03:49.760 --> 03:53.560
说这里主要是验证接口格式

03:53.860 --> 03:54.860
是否正常

03:56.460 --> 03:58.460
这一块呢我们目前呢还不涉及

03:59.060 --> 04:01.260
我们目前的验证的

04:01.760 --> 04:04.260
这一节后面讲的验证是业务逻辑层的验证

04:04.660 --> 04:07.060
那就这一块的验证非常非常的繁硕

04:07.260 --> 04:07.960
而且呢

04:08.760 --> 04:09.360
重要

04:09.660 --> 04:10.960
但是我们讲的时候呢

04:10.960 --> 04:12.660
因为我们毕竟是学前端嘛

04:13.060 --> 04:14.660
业务逻辑层绝大部分时候呢

04:14.660 --> 04:16.060
也不是由历代开发的

04:16.460 --> 04:18.860
跟数据甚至数据库跟你没有什么关系

04:18.860 --> 04:20.160
不过既然我们学在这

04:20.260 --> 04:21.760
我们还是简单的聊一聊

04:21.760 --> 04:22.960
业务逻辑层的验证

04:23.260 --> 04:24.260
至少让大家知道

04:24.660 --> 04:25.460
在后端呢

04:25.460 --> 04:26.560
他肯定要做验证的

04:26.560 --> 04:28.060
不是前端这个验证就完事了

04:28.660 --> 04:29.560
然后前端的验证呢

04:29.560 --> 04:31.660
你们学过一些第三方库

04:31.660 --> 04:32.160
对吧

04:32.260 --> 04:34.760
或者是你们学过Wheel Reactor里边

04:34.760 --> 04:35.960
不是都有一些

04:36.460 --> 04:36.960
库

04:37.160 --> 04:39.960
就是他的UI库里边都有一些验证嘛

04:40.060 --> 04:40.560
对不对

04:41.260 --> 04:42.560
那么这些可能我们虽然说

04:42.560 --> 04:44.160
学的是业务逻辑层的验证

04:44.160 --> 04:45.860
但是呢我们接触的

04:46.760 --> 04:47.760
第三方库啊

04:48.160 --> 04:48.960
相关库

04:49.460 --> 04:50.360
这些库呢

04:50.360 --> 04:52.160
他不仅是可以用在服务器

04:52.260 --> 04:53.560
也可以用在客户端

04:53.560 --> 04:55.560
也就是他既可以做前端的验证

04:55.560 --> 04:57.260
也可以做业务逻辑层的验证

04:57.260 --> 04:58.860
也可以做路由层的验证

04:59.460 --> 05:00.060
都可以

05:00.160 --> 05:01.760
所以说你学了过程了就通用了

05:02.260 --> 05:03.060
前端也可以用

05:03.460 --> 05:04.360
后端也可以用

05:04.560 --> 05:06.760
可以用在路由层也可以用在业务逻辑层

05:06.760 --> 05:07.460
都可以用了

05:08.760 --> 05:10.160
那么这里我要说一下啊

05:10.160 --> 05:11.960
就是我们学的那个OM框架

05:11.960 --> 05:12.860
就Securize

05:13.260 --> 05:15.360
他本身呢是支持验证功能的

05:15.360 --> 05:16.560
你们可以自己去看一下啊

05:16.560 --> 05:18.360
咱们之前给他发了官方文档

05:19.160 --> 05:20.360
他本身是支持的

05:20.560 --> 05:23.060
不过呢我不是很喜欢用他那个验证

05:23.260 --> 05:23.960
为什么呢

05:23.960 --> 05:25.260
因为他那个验证啊

05:25.460 --> 05:26.760
他既包含了

05:27.260 --> 05:28.760
就是他比较混杂

05:28.860 --> 05:30.460
他业务逻辑层也有啊

05:30.460 --> 05:32.460
数据库的验证也有啊

05:32.460 --> 05:34.460
数据库的验证叫做数据也约束

05:35.660 --> 05:36.560
他叫做约束

05:36.560 --> 05:37.960
大家如果说有兴趣的话啊

05:37.960 --> 05:39.460
这跟前端没有什么关系

05:39.960 --> 05:40.760
有兴趣的话

05:40.760 --> 05:42.460
可以在那个摆脆搜一下

05:42.460 --> 05:43.760
埋搜口约束

05:43.760 --> 05:45.160
也可以搜到大队的资料

05:45.260 --> 05:46.660
啊有很多很多的约束

05:48.160 --> 05:49.160
那么我们这里呢

05:49.160 --> 05:50.060
你刚才说了哪呢

05:50.860 --> 05:52.360
啊嗯没有睡觉啊

05:52.360 --> 05:53.260
脑袋有点昏

05:53.860 --> 05:54.660
刚才说了哪呢

05:54.660 --> 05:56.960
就是这个业务逻辑层的

05:56.960 --> 05:58.060
就是我们那个

05:58.460 --> 05:59.160
sacrulize啊

05:59.160 --> 06:00.560
他里边本来就包含验证

06:00.560 --> 06:01.660
那他这里呢

06:01.660 --> 06:03.760
他有包含业务的验证啊

06:03.860 --> 06:06.160
也有包含了数据库的验证

06:07.160 --> 06:08.460
所以说呢他比较混杂

06:08.460 --> 06:09.560
我不是很喜欢

06:09.760 --> 06:11.660
我喜欢比较把它分离开一点

06:12.160 --> 06:13.860
那么我们一般我一般的话

06:13.860 --> 06:16.360
会用一些第三方库来进行验证

06:16.760 --> 06:18.060
那么什么第三方库呢

06:18.160 --> 06:19.560
我再给大家介绍两个啊

06:19.560 --> 06:20.960
一个是叫做validator

06:21.560 --> 06:23.060
这个库呢我们这几颗不用

06:23.560 --> 06:25.360
这个库呢你们有个你们这一群看

06:25.760 --> 06:27.160
这个库是用来干嘛的呢

06:27.160 --> 06:29.360
它是用于验证

06:30.160 --> 06:31.660
某个制服串

06:31.860 --> 06:33.960
是否满足某个规则

06:34.360 --> 06:35.760
它是专门来验证制服串的

06:35.760 --> 06:37.660
它只能验证制服串啊

06:37.660 --> 06:39.160
咱们咱们看了一下啊

06:39.360 --> 06:40.860
他这个库呢他这个在这

06:41.660 --> 06:42.960
在validator

06:44.060 --> 06:46.160
给我把个地址啊给他发过来

06:48.420 --> 06:49.320
好那么这个库呢

06:49.320 --> 06:51.420
你可以看一下非常非常非常非常简单啊

06:51.420 --> 06:53.120
他里面就提供了很多的还说你看了

06:53.420 --> 06:54.420
一直没有啊

06:54.920 --> 06:57.320
验证这个玩意儿是不是一个那个

06:57.820 --> 06:59.620
啊是不是一个就是

07:01.220 --> 07:03.620
合法的啊邮箱地址

07:04.720 --> 07:07.420
啊你看啊还支持ES6导入对吧

07:07.920 --> 07:10.320
为了还就是为了去写信

07:10.320 --> 07:12.620
你还可以用这种方式来导入啊

07:12.920 --> 07:14.220
那你自己去下去看吧

07:14.220 --> 07:15.220
下面一个表格啊

07:15.220 --> 07:16.820
验了各种各样的规则验证

07:17.420 --> 07:19.020
对吧你把发行员愿意打开

07:19.020 --> 07:20.920
你看一下名字也基本上差不多了

07:20.920 --> 07:24.220
对吧还验证是不是一个正确的MIME内容

07:24.520 --> 07:25.920
对不对啊

07:26.320 --> 07:27.620
那么这里呢就是

07:28.120 --> 07:29.420
嗯这是这个库啊

07:29.420 --> 07:30.620
这个库呢我们这一刻用不到

07:30.620 --> 07:32.620
因为我们这一刻呢验证的

07:32.620 --> 07:34.520
我们这一刻要举的例子呢是这个

07:36.120 --> 07:38.120
student service里边添加学生

07:38.120 --> 07:39.720
我就举着一个例子就行了

07:39.720 --> 07:42.120
那么修改学生啊这些东西你们自行写搞定

07:42.820 --> 07:44.620
好添加学生这里呢我要对这个

07:44.820 --> 07:46.220
对象来进行验证

07:46.320 --> 07:48.020
因此呢对对象进行验证的

07:48.320 --> 07:49.620
嗯可以用那个库啊

07:49.620 --> 07:51.120
但是呢更加方便的呢

07:51.220 --> 07:52.220
是用另外一个库

07:52.320 --> 07:54.120
叫做它是名字名字差不多啊

07:54.120 --> 07:55.520
叫Validate.js

07:56.120 --> 07:58.320
它是用于验证对象的

07:58.920 --> 08:02.920
验证某个对象的属性

08:03.120 --> 08:07.020
是否满足某个规则啊某些规则

08:08.720 --> 08:09.920
好那么这是这个库啊

08:09.920 --> 08:11.120
这个库我们来看一下吧

08:13.720 --> 08:15.920
Validate.js

08:16.020 --> 08:16.720
就这个库

08:18.020 --> 08:20.020
啊复制一下啊它有个官方网站

08:22.320 --> 08:22.920
给它放在这

08:22.920 --> 08:25.020
所以我们就这结合呢就看到它的文档

08:25.020 --> 08:26.920
给大家讲一讲这个库怎么去使用

08:26.920 --> 08:28.620
其实用起来非常简单啊

08:29.320 --> 08:31.920
当然你首先得去安装这个库啊

08:31.920 --> 08:33.320
它有很多安装方式的

08:33.320 --> 08:35.120
我们这里肯定是用那个npm安装

08:35.120 --> 08:36.020
这毫无疑问的

08:36.420 --> 08:39.220
npm iValidate.js

08:39.420 --> 08:40.120
安装它

08:40.820 --> 08:41.620
好安装完了

08:42.320 --> 08:44.120
这个库安装好了之后呢

08:44.320 --> 08:45.620
咱们怎么来验证呢

08:45.720 --> 08:47.920
它里边是提供了

08:47.920 --> 08:49.720
我们看一下这个single value

08:50.920 --> 08:53.120
这个Validate.js

08:54.220 --> 08:55.820
不是这是对单个数据啊

08:55.820 --> 08:56.920
它除了对对象之外的

08:56.920 --> 08:58.720
也可以对单个数据进行验证啊

08:58.720 --> 09:00.520
这个东西我们显得有不到

09:00.820 --> 09:03.320
我们用的是那个nested

09:03.720 --> 09:05.620
就对一个对象来进行验证

09:06.120 --> 09:07.820
那么怎么对对象进行验证呢

09:07.920 --> 09:10.220
你看它里边其实给你提供了一个方法

09:11.320 --> 09:13.220
Validate.js里边给你提供了一个方法

09:13.720 --> 09:14.520
给大家看一下啊

09:15.020 --> 09:17.020
就在这有个库里边的有个Validate

09:17.020 --> 09:17.720
先倒进来

09:18.020 --> 09:18.620
require

09:19.820 --> 09:21.220
Validate.js

09:21.320 --> 09:21.920
倒进来

09:22.120 --> 09:23.820
那么这个对象里边啊

09:23.820 --> 09:25.020
它提供了一个方法

09:25.420 --> 09:26.420
就叫做Validate

09:26.420 --> 09:27.120
哈哈

09:27.220 --> 09:28.120
就叫做Validate

09:28.120 --> 09:28.920
叫Validate

09:28.920 --> 09:30.820
这个对象里边它有个方法叫Validate

09:32.420 --> 09:33.420
这个方法里边呢

09:33.420 --> 09:34.520
写两个参数

09:34.820 --> 09:36.520
第一个参数就是你要验证了对象

09:36.720 --> 09:37.520
所以这个对象

09:37.820 --> 09:38.120
对吧

09:38.120 --> 09:38.920
你要验证它

09:39.120 --> 09:39.720
第二个参数呢

09:39.720 --> 09:41.520
第二个参数呢是验证规则

09:41.920 --> 09:42.820
因为验证规则

09:42.920 --> 09:44.220
我们可能写的比较多

09:44.220 --> 09:46.220
所以说我单独来写一个验证规则

09:46.520 --> 09:47.420
我们这里来写一个

09:47.820 --> 09:49.020
ADD入

09:50.020 --> 09:51.620
或者就叫入

09:51.720 --> 09:52.820
这是验证规则

09:56.300 --> 09:56.900
这里呢

09:56.900 --> 09:58.700
这是验证规则

10:00.300 --> 10:00.700
好

10:01.000 --> 10:02.900
那么验证规则是也是一个对象

10:02.900 --> 10:03.300
当然呢

10:03.300 --> 10:04.300
我们验证的时候呢

10:04.300 --> 10:05.700
就会把这个验证规则

10:06.300 --> 10:06.900
传过来

10:08.500 --> 10:08.700
好

10:08.700 --> 10:10.700
我这里说一下这个方法啊

10:10.700 --> 10:12.200
它返回什么样的结果

10:12.300 --> 10:13.400
它返回一个结果

10:13.700 --> 10:14.600
这个结果呢

10:14.800 --> 10:16.200
如果说验证通过

10:16.600 --> 10:17.600
它就是undefined

10:19.400 --> 10:20.400
我们这里说一下啊

10:20.700 --> 10:21.600
就是result

10:23.100 --> 10:23.900
就是如果验

10:23.900 --> 10:24.400
不用说

10:24.400 --> 10:25.700
大家一看就明白了啊

10:25.700 --> 10:26.400
这也不是

10:26.800 --> 10:28.700
刚开始教那个那个

10:29.200 --> 10:30.200
邻居学的学员

10:30.400 --> 10:31.200
那么这现在呢

10:31.200 --> 10:32.500
就是如果说验证通过

10:32.500 --> 10:33.400
它就是undefined

10:33.500 --> 10:35.000
如果用验证没有通过

10:35.000 --> 10:37.100
那么它这里比较嫉妒的是错误信息

10:37.600 --> 10:39.200
那么现在肯定是验证通过了

10:39.200 --> 10:40.900
我们现在把这个result输出一下

10:41.900 --> 10:43.500
我把下面两句话注释掉了啊

10:43.500 --> 10:45.100
避免往数据库里边加东西

10:45.600 --> 10:47.100
我们把输出一下啊

10:47.200 --> 10:48.300
输出一下到这边来

10:48.900 --> 10:49.400
好

10:49.500 --> 10:49.900
这里呢

10:49.900 --> 10:50.700
我们就导入

10:51.100 --> 10:52.700
现在跟数据库没有任何关系

10:52.800 --> 10:54.800
我们这里就直接导入这个services

10:55.100 --> 10:55.500
然后呢

10:55.500 --> 10:56.600
student and service

10:57.500 --> 10:58.100
接收一下

10:58.600 --> 10:59.600
student so

11:00.800 --> 11:02.100
student so

11:02.300 --> 11:02.700
然后呢

11:02.700 --> 11:03.700
adstudent

11:03.900 --> 11:05.400
比方说我们这里啥都没写

11:06.700 --> 11:07.500
嗯

11:08.100 --> 11:08.700
啥都没写

11:08.700 --> 11:10.000
看一下能不能验证通过

11:12.940 --> 11:13.540
嗯

11:13.740 --> 11:14.940
load index

11:16.040 --> 11:17.340
是不是undefined了验证通过了

11:17.340 --> 11:18.840
为什么现在能验证通过呢

11:18.840 --> 11:20.140
是因为我没有写规则

11:20.340 --> 11:20.740
因此呢

11:20.740 --> 11:22.140
哪怕你给他传的是undefined

11:22.140 --> 11:23.240
他也验证通过了

11:23.740 --> 11:25.140
那么这个规则怎么写呢

11:25.440 --> 11:26.240
非常简单

11:26.440 --> 11:28.340
你不是针对对象来进行验证吗

11:28.740 --> 11:29.140
ok

11:29.140 --> 11:30.940
那么对象里边不是有很多属性吗

11:30.940 --> 11:32.340
那就一个一个属性写

11:33.440 --> 11:34.740
那么看哪一个属性

11:35.240 --> 11:36.840
每个每个属性的规则是什么

11:37.140 --> 11:37.940
那么一个个来

11:38.040 --> 11:39.440
比方学生里边有姓名

11:40.240 --> 11:41.740
姓名的话是必田的

11:42.140 --> 11:43.540
那怎么来写一个必田呢

11:43.540 --> 11:44.540
大家看这个文档

11:45.040 --> 11:47.040
这个文档下边有个Validators

11:47.140 --> 11:48.940
表叹里边支持的

11:49.840 --> 11:51.540
像自带的验证规则

11:51.840 --> 11:53.040
那么这有没有很多啊

11:53.040 --> 11:54.140
什么日期啊

11:54.540 --> 11:55.340
还有邮箱啊

11:55.340 --> 11:55.740
对吧

11:55.840 --> 11:57.040
必须要等于某个字啊

11:57.040 --> 11:58.440
必须要排除掉某个字啊

11:58.640 --> 12:00.240
还有格式啊等等等等

12:00.440 --> 12:02.240
必须要包含某一个字啊等等

12:02.240 --> 12:03.940
还有什么制服创的长度等等

12:03.940 --> 12:05.040
必须要是一个什么

12:05.240 --> 12:07.140
数字啊之类的

12:07.240 --> 12:07.740
对不对

12:07.740 --> 12:08.940
那么这几呢都东西呢

12:08.940 --> 12:10.640
都可以在作为验证规则

12:10.640 --> 12:12.040
那么我们这里看一下这个

12:12.240 --> 12:12.940
presence

12:13.040 --> 12:13.940
presence什么意思呢

12:13.940 --> 12:15.240
他表示要出席啊

12:15.240 --> 12:16.640
就是出席一个会议

12:17.140 --> 12:18.640
那么出席就是必须要存在

12:19.640 --> 12:20.340
当我们

12:20.340 --> 12:22.240
当他发现一个属性不存在

12:22.540 --> 12:24.240
或者是属性值得于now

12:24.240 --> 12:25.640
或者是undefined的时候呢

12:25.640 --> 12:27.840
他就表示这个验证没有通过

12:28.640 --> 12:29.240
我们这里呢

12:29.240 --> 12:30.840
把这个验证规则给他启用

12:31.240 --> 12:32.040
好怎么来启用呢

12:32.040 --> 12:33.240
就是name这个属性啊

12:33.340 --> 12:35.940
他里边针对name这个属性有很多的规则

12:35.940 --> 12:37.440
其中一个规则叫presence

12:37.840 --> 12:38.640
把设为q

12:38.940 --> 12:40.140
把设为出过后呢

12:40.440 --> 12:42.440
如果说你没有写那个name属性

12:43.140 --> 12:45.440
那么他他就他就会告诉你通过验证

12:45.740 --> 12:46.740
好咱们来看一下吧

12:47.540 --> 12:48.340
啊这里你看啊

12:48.340 --> 12:49.440
我们用这个规则去验证

12:49.440 --> 12:50.640
他得到一个验证结果

12:50.640 --> 12:52.440
刚才呢验证通过了是undefined

12:52.540 --> 12:53.740
然后我们再来运行试

12:54.240 --> 12:55.640
你看他得到的是一个对象

12:56.340 --> 12:57.440
他就不是undefined的了

12:57.740 --> 12:59.240
验证结果他是一个对象

12:59.240 --> 12:59.940
都reloud

13:00.440 --> 13:02.040
这对象里边有个属性name

13:02.040 --> 13:04.040
表示name这里一块没有验证通过

13:04.440 --> 13:05.840
那么他的错误消息是什么呢

13:05.840 --> 13:07.140
他放了一个数组里边

13:07.340 --> 13:08.440
为什么是个数组呢

13:08.740 --> 13:11.340
所以他有可能会有多个验证规则去验证他

13:11.540 --> 13:13.340
那么有可能有很多的都没有通过

13:13.440 --> 13:15.340
他会把所有的没通过的都告诉你

13:15.640 --> 13:16.640
好那么这里也告诉你

13:16.940 --> 13:18.640
name can't be blank

13:18.640 --> 13:18.940
对吧

13:18.940 --> 13:20.640
他个消息呢是默认消息

13:20.640 --> 13:21.840
但是那个消息呢你可以改

13:21.940 --> 13:22.640
怎么改呢

13:23.740 --> 13:24.640
你看一下这个吧

13:24.840 --> 13:25.840
我拿着去改他了

13:26.140 --> 13:27.440
啊就可以通过presence

13:27.440 --> 13:28.840
不要把他设为q的

13:29.240 --> 13:30.440
而把他设置为一个对象

13:30.440 --> 13:31.740
在对象里边一个message

13:32.140 --> 13:33.740
啊这个message就是验证消息

13:33.740 --> 13:35.040
你可以直接使用

13:35.140 --> 13:36.540
但是说这个验证消息呢

13:36.540 --> 13:37.640
我不想看到英文

13:37.840 --> 13:39.140
我想看中文怎么办

13:39.640 --> 13:42.140
啊这个东西呢大家不用慌

13:42.140 --> 13:43.940
因为这是服务器端的验证

13:43.940 --> 13:45.340
这不是给用户看的

13:45.840 --> 13:47.140
是给开发者看的

13:47.640 --> 13:50.040
所以说的这个英文就英文无所谓的

13:50.640 --> 13:52.640
那他不是给用户看的啊

13:52.740 --> 13:55.640
用户那边是要单独的在客户端进行验证的

13:55.640 --> 13:57.640
那个他要提示一个油耗的消息

13:57.940 --> 13:58.840
这个东西呢不用

13:59.140 --> 14:01.540
啊只要大概描述一下信息

14:01.740 --> 14:02.640
用什么都可以

14:03.140 --> 14:05.940
好这是关于这个就是验证规则啊

14:06.440 --> 14:07.140
presence去

14:07.240 --> 14:08.740
那么我们现在给他写一个啊

14:08.740 --> 14:10.540
那么现在我们就必须要写对象了

14:10.540 --> 14:12.240
没有对象他肯定没有内密属性嘛

14:12.340 --> 14:13.340
那么必须要有对象

14:13.440 --> 14:15.140
而且呢还要有内密属性

14:15.640 --> 14:17.240
好内密属性呢如果说是nau

14:17.540 --> 14:18.740
还是不行啊

14:18.740 --> 14:20.140
因为nau和undefend

14:20.940 --> 14:22.440
他都会导致他验证通不过

14:22.640 --> 14:25.640
但是呢他现在他是允许有空是空之无窜的

14:26.140 --> 14:27.440
啊他必须要允许是空

14:27.440 --> 14:29.040
他可以允许是空之无窜

14:29.340 --> 14:31.140
你看空之无窜是不是可得通过了

14:31.440 --> 14:33.540
那这个东西我们也是不希望看到的

14:33.640 --> 14:35.140
我们希望呢嗯

14:35.440 --> 14:37.540
空之无窜他也得认为是空

14:38.040 --> 14:39.140
那这个东西怎么办呢

14:39.440 --> 14:41.140
他告诉你啊其实这也可以说了

14:43.630 --> 14:44.130
嗯

14:46.600 --> 14:47.300
看一下啊

14:47.800 --> 14:49.200
他说的是啊

14:49.300 --> 14:52.000
如果说你可以设置个allow empty

14:52.300 --> 14:54.700
啊这个配置为force

14:55.200 --> 14:58.400
那么就可以不允许下面的这些纸

14:58.400 --> 15:00.700
什么空对象啊空输出啊空之无窜啊

15:00.700 --> 15:03.600
或者是里面几个空格的空白之无窜

15:03.700 --> 15:04.700
这也都不允许

15:05.100 --> 15:08.200
而allow empty什么意思就是允许空的

15:08.200 --> 15:10.400
对吧他不过是出啊允许空的

15:10.700 --> 15:12.500
啊他可以不允许你是那奥尔利范

15:12.500 --> 15:14.100
但是他允许是空之无窜

15:14.400 --> 15:16.100
那么这里呢我们就再给他配置一下

15:16.100 --> 15:17.200
就不要稍微出了

15:17.300 --> 15:18.200
给他配置一下

15:18.300 --> 15:20.100
配置里面我们写上allow

15:20.800 --> 15:21.500
amity

15:21.800 --> 15:24.200
那么给他稍微force啊不允许为空

15:24.700 --> 15:25.600
这样我们再看一下

15:26.800 --> 15:28.900
你看是不是又出现了个验证了啊

15:28.900 --> 15:29.800
他不能为空

15:30.000 --> 15:31.700
那么现在呢如果说给他写几个空

15:31.700 --> 15:32.700
空白之无窜呢

15:32.900 --> 15:33.600
行不行呢

15:34.600 --> 15:36.100
啊也是不行的

15:36.400 --> 15:38.600
看没啊必须要有值

15:39.000 --> 15:39.600
没什么意思吧

15:39.700 --> 15:40.800
这就是这个验证

15:41.600 --> 15:42.800
好这是present

15:42.900 --> 15:43.800
啊这是个二了

15:44.000 --> 15:45.100
啊这个这个玩意儿

15:45.800 --> 15:47.500
好这是这个验证规则

15:47.600 --> 15:49.600
那么那个name还有没有别的验证规则呢

15:49.800 --> 15:50.500
当然有

15:51.000 --> 15:53.400
那比如说你name给我写个这个玩意儿

15:56.660 --> 15:57.260
哈哈

15:57.760 --> 15:58.860
你给我写个这个玩意儿

15:59.460 --> 16:01.260
那么这个玩意儿他能不能验证通过了

16:01.760 --> 16:02.860
你看是不是可以验证通过了

16:02.860 --> 16:03.760
那显然是不行的

16:03.760 --> 16:05.360
对吧name应该是一个字无窜

16:05.660 --> 16:06.560
那怎么办呢

16:06.660 --> 16:08.560
我们可以用另外一个验证规则

16:08.760 --> 16:09.660
这里叫做type

16:10.560 --> 16:13.060
表示呢他的内行啊内行

16:13.260 --> 16:15.360
好咱们在这里啊这是一个验证规则

16:15.560 --> 16:17.060
第二个验证规则我们用内行

16:17.560 --> 16:18.160
注意啊

16:18.560 --> 16:18.960
嗯

16:20.360 --> 16:23.560
这个验证我们先写写了再说啊写了再说

16:25.360 --> 16:27.560
嗯现在呢我们这里呢写上一个

16:28.160 --> 16:30.060
内行是stream

16:30.460 --> 16:31.960
啊他这里支持很多内行

16:31.960 --> 16:32.460
可吧

16:32.860 --> 16:35.260
对吧那么我们这里必须要是一个字无窜的一行

16:35.560 --> 16:36.860
好咱们现在再来看一下

16:37.060 --> 16:38.860
现在来验证啊你看

16:39.060 --> 16:40.360
这个验证规则通不过了

16:40.360 --> 16:42.060
第一个通过了第二个没通过啊

16:42.060 --> 16:43.260
name must be a type

16:43.560 --> 16:45.060
be of type stream

16:45.160 --> 16:46.260
然后我们给他看一下啊

16:46.260 --> 16:47.760
刚才想要给他说的看一下

16:47.960 --> 16:49.860
如果说我们写个空数数

16:53.700 --> 16:55.200
啊你看是不是出现了两个也

16:55.300 --> 16:56.300
两个没有通过了

16:56.300 --> 16:58.700
他既不能是个空的啊同时呢

16:58.700 --> 17:01.100
又不能是他又他必须要是一个字无窜

17:01.100 --> 17:01.500
对不对

17:01.800 --> 17:03.700
那么现在呢你要满足验证规则

17:03.700 --> 17:05.100
是不是必须要写字无窜了

17:05.100 --> 17:06.400
而且不能是空字无窜

17:07.400 --> 17:08.700
但是这个字无窜呢

17:08.700 --> 17:11.100
可能会写很多的很多很多的数据

17:11.900 --> 17:12.300
对吧

17:12.500 --> 17:14.000
那么这个也是不合理的

17:14.000 --> 17:14.400
因此呢

17:14.400 --> 17:16.900
我们可以用字无窜的长度来控制他

17:17.300 --> 17:19.000
比方说这里我们也可以用的names

17:19.700 --> 17:21.500
names这个验证啊啊

17:22.900 --> 17:23.800
他他告诉你啊

17:23.800 --> 17:25.700
他可以有这么几个配置啊

17:25.700 --> 17:28.100
必须要等于多少个长度

17:28.500 --> 17:30.200
还有还有就是可以写范围

17:30.200 --> 17:31.700
最小长度最大长度

17:32.600 --> 17:34.100
好那么我们来可以写啊

17:34.300 --> 17:35.300
也就names

17:36.800 --> 17:37.300
啊

17:38.300 --> 17:38.900
叫什么

17:40.100 --> 17:40.900
minimum

17:42.500 --> 17:45.400
啊最少呢是长度呢为1

17:46.000 --> 17:47.100
啊最大呢

17:49.200 --> 17:51.700
长度呢为10吗

17:51.900 --> 17:52.900
啊你不能太多了

17:52.900 --> 17:53.500
名字

17:53.900 --> 17:55.600
最夸张的也就是10个字乎了

17:55.800 --> 17:57.100
对不对啊

17:57.500 --> 17:59.400
如果当然你要口味不过害的情况的话

17:59.400 --> 18:01.100
那你可怜还要还要去

18:01.400 --> 18:03.200
还要去设置宽放一点

18:03.500 --> 18:05.700
你看他说你的names呢太长了

18:06.200 --> 18:07.700
啊最长的就只有10个

18:08.200 --> 18:10.200
啊这些这些信息不是给用户看的啊

18:10.200 --> 18:11.800
你不用不用担心这些信息

18:12.000 --> 18:13.700
会暴露给用户不用的啊

18:13.700 --> 18:14.700
这些东西都是给

18:15.400 --> 18:16.300
开发者看的

18:17.000 --> 18:18.100
好那么这里是

18:18.400 --> 18:19.800
呃这个names的验证

18:19.800 --> 18:20.900
所以就差不多写完了

18:21.200 --> 18:21.500
对不对

18:21.500 --> 18:22.500
那么现在就names这个

18:22.500 --> 18:23.700
至少names这个属性

18:23.700 --> 18:25.600
这一个属性是不是非常安全了

18:25.600 --> 18:26.400
你随便怎么还

18:26.400 --> 18:28.400
你names中心必须要给我写这么去

18:29.000 --> 18:30.400
好那么我们可以用同样的方式

18:30.400 --> 18:31.600
来写后边的属性

18:31.700 --> 18:33.200
比方说咱们有个birthday

18:33.200 --> 18:33.700
对不对

18:34.200 --> 18:34.900
啊birthday

18:34.900 --> 18:36.000
嗯看一下啊

18:36.500 --> 18:38.100
在模型里边啊

18:38.100 --> 18:40.500
这个咱们的student

18:41.900 --> 18:43.500
啊这一个birthday

18:43.500 --> 18:45.100
哎这个birthday我越看越不爽

18:45.100 --> 18:46.300
爽了我把它改一下吧

18:46.800 --> 18:47.500
改成这个

18:48.700 --> 18:49.700
好改成这个啊

18:50.100 --> 18:51.500
我把它改一下改一下

18:51.600 --> 18:52.600
我这个实在是看

18:52.800 --> 18:53.900
看得不顺眼

18:54.300 --> 18:56.300
啊咱们呢这里呢使用那个

18:56.500 --> 18:57.800
导入啊导入那个

18:58.200 --> 18:59.300
啊这里我给他说一下啊

18:59.300 --> 19:01.300
因为我们有的有的有些事啊

19:01.400 --> 19:02.900
就是咱们一开始又必须要做的

19:02.900 --> 19:04.400
比方说统布数据库啊

19:04.700 --> 19:06.400
比方说设置数据库关系啊

19:06.400 --> 19:07.200
这东西对吧

19:07.200 --> 19:08.600
我们一开始又必须要做

19:08.700 --> 19:09.600
那么这个时候呢

19:09.600 --> 19:11.200
我们可以对每一个层

19:11.200 --> 19:13.000
比方说对数据访问层

19:13.100 --> 19:13.900
或者是对

19:14.400 --> 19:15.400
嗯服务层

19:15.400 --> 19:17.500
他都有一些一开始要做的事情

19:17.600 --> 19:19.200
那么我们在每一个层呢

19:19.200 --> 19:21.300
可以再建一个文件叫做init

19:21.800 --> 19:23.400
初始化这么一个文件

19:23.500 --> 19:25.300
这个文件呢就是把一开始要做的事情

19:25.300 --> 19:26.500
给他写到这个文件里边去

19:26.500 --> 19:28.400
比方说这个文件里边我们一开始要做啥呢

19:28.500 --> 19:29.700
一开始要做那个

19:29.900 --> 19:31.200
把关系导入

19:31.300 --> 19:31.800
对吧

19:32.400 --> 19:33.400
把关系设置好

19:33.700 --> 19:35.000
然后呢还要去做什么呢

19:35.000 --> 19:35.600
同步

19:35.700 --> 19:36.200
对不对

19:36.500 --> 19:37.900
同步数据库啊

19:37.900 --> 19:38.700
我们之前改了

19:38.700 --> 19:40.100
改了一下这个模型吗

19:40.100 --> 19:41.700
他要重新同步嘛

19:41.700 --> 19:42.200
对不对

19:42.500 --> 19:43.300
好那么现在呢

19:43.300 --> 19:45.400
这个这个音列程是不是写好了

19:45.800 --> 19:47.100
好这个音列程写好了过后

19:47.100 --> 19:49.700
可能别的层也有一些初始化的操作啊

19:49.800 --> 19:50.100
因此呢

19:50.100 --> 19:51.900
我们在这个根木炉下面再见一个啊

19:51.900 --> 19:52.600
这是一

19:52.900 --> 19:55.400
至少我的我比较喜欢的一种常见做法

19:55.600 --> 19:55.900
然后呢

19:55.900 --> 19:57.900
在根木炉下面建立一个音列车

19:57.900 --> 20:00.200
然后呢找到找到每一个层的音列车

20:00.400 --> 20:02.100
去导入一下去运行一下

20:02.200 --> 20:02.500
对吧

20:02.500 --> 20:04.000
然后呢在启动文件里边

20:04.000 --> 20:05.900
再直接用导入音列车

20:07.600 --> 20:08.300
没了意思吧

20:08.400 --> 20:10.700
总之呢就是我们一开始要做一些事啊

20:10.700 --> 20:12.200
把这些事呢放到每一个层

20:12.700 --> 20:13.700
啊放到每一个层

20:13.900 --> 20:14.300
好

20:14.400 --> 20:15.700
接下来咱们来运行一下啊

20:15.900 --> 20:17.100
我把这个地方去掉了

20:17.100 --> 20:18.500
我把这个locking到啊

20:18.500 --> 20:19.100
给他去掉

20:19.100 --> 20:20.300
免得这个就是

20:21.700 --> 20:22.400
太多了啊

20:23.400 --> 20:23.700
好

20:23.700 --> 20:24.900
接下来我来运行一下

20:26.140 --> 20:27.300
我把它改一下吧

20:27.300 --> 20:28.600
这真的是一件受不了

20:28.700 --> 20:30.200
他的单词写错了

20:30.700 --> 20:31.200
运行

20:34.790 --> 20:35.690
呃怎么了

20:37.290 --> 20:39.590
啊Burst Day啊Burst Day现在有个问题

20:39.690 --> 20:40.590
有什么问题呢

20:40.690 --> 20:41.890
就是说他现在呢

20:42.090 --> 20:42.690
你看啊

20:43.790 --> 20:45.190
student 设计表

20:46.790 --> 20:47.390
Burst Day

20:47.490 --> 20:48.590
那么他现在有个问题

20:48.590 --> 20:50.190
他不是说直接改名

20:51.390 --> 20:54.090
他是要把这个他再要把这一列删掉

20:54.190 --> 20:55.390
重新给你加一列

20:55.390 --> 20:56.390
他不是改名字啊

20:56.390 --> 20:58.190
因为他不知道你这个列就是原来

20:58.190 --> 21:00.490
就他就是对应原来这个列他不知道的

21:00.490 --> 21:02.390
所以他要把以前的这一列删掉

21:02.490 --> 21:03.690
然后重新改名字

21:04.090 --> 21:05.390
啊那么这个时候怎么办呢

21:05.390 --> 21:06.890
这个时候呢我们可以

21:07.290 --> 21:08.590
呃他现在

21:08.790 --> 21:10.890
现在问题是他新加了那一列啊

21:10.890 --> 21:12.590
他没有他没有默认值

21:13.090 --> 21:13.690
没了意思吧

21:13.890 --> 21:15.990
他新加了这一列没有默认值

21:16.190 --> 21:18.490
而我们的数据过里面数据很多

21:18.590 --> 21:19.990
导致了他没有默认值

21:19.990 --> 21:21.190
因为他新加一列嘛

21:21.390 --> 21:23.390
都是student 他要新加这一列Burst Day

21:23.690 --> 21:25.090
他由于没有默认值

21:25.090 --> 21:25.690
你看不能

21:25.690 --> 21:26.490
由于不能

21:26.690 --> 21:27.790
不允许围空

21:28.490 --> 21:30.390
导致了他里面不知道是填什么日期了

21:31.390 --> 21:32.290
他填了什么日期

21:32.290 --> 21:33.290
他不能想填

21:33.290 --> 21:33.990
填一个空

21:33.990 --> 21:35.590
空制期就是将来一公元

21:35.690 --> 21:36.690
公元零年

21:37.390 --> 21:38.590
啊公元零年

21:38.590 --> 21:40.390
那么公元零年对他来说是

21:40.790 --> 21:42.590
不是一个公元零年

21:42.890 --> 21:45.390
啊零零时零年

21:46.190 --> 21:48.190
啊他说这个不是一个正确的日期

21:48.390 --> 21:49.090
你看这意思吧

21:49.390 --> 21:51.590
所以说他这里不允许你这样做啊

21:51.790 --> 21:53.890
啊现在就把这个新的一列加不进去

21:53.890 --> 21:54.690
那怎么办呢

21:54.690 --> 21:55.990
是因为我们这里边有数据

21:55.990 --> 21:57.390
他不赶上我们的数据

21:57.490 --> 21:58.990
那么我们这里反正是测试数据

21:58.990 --> 22:00.490
打上了上就行了

22:02.940 --> 22:04.940
啊我们把这个直接建个查讯啊

22:07.810 --> 22:11.410
好delete from student

22:13.720 --> 22:14.520
好删掉了

22:15.020 --> 22:16.320
学生表面没有数据了

22:16.620 --> 22:17.320
好没有数据过后

22:17.320 --> 22:19.020
我们就可以运行这个命令了

22:19.820 --> 22:20.820
好同步完成

22:21.020 --> 22:22.820
看没好同步完成之后呢

22:22.820 --> 22:24.620
我们看一下大概是设计表

22:24.620 --> 22:26.420
这重新关放吧

22:26.420 --> 22:27.520
重新打开一次

22:28.620 --> 22:29.320
不保存

22:30.520 --> 22:32.120
关掉重新打开

22:32.920 --> 22:33.520
好现在

22:33.820 --> 22:34.820
Burst day该关了

22:34.820 --> 22:35.220
对吧

22:35.720 --> 22:36.720
不然实在受不了了

22:37.420 --> 22:38.120
那么现在呢

22:38.120 --> 22:39.320
我们这边

22:40.020 --> 22:42.720
嗯这边导入英内彩之后啊

22:42.920 --> 22:44.720
咱们再来一个把那个模型

22:44.720 --> 22:46.320
再来再把数据导入一些吧

22:46.320 --> 22:47.820
我们之前不是有mock数据吗

22:47.920 --> 22:48.420
对不对

22:48.920 --> 22:49.920
把用一下啊

22:50.020 --> 22:50.920
mock student

22:52.420 --> 22:54.420
mock student

22:58.090 --> 22:59.090
咱们来试一下啊

22:59.390 --> 23:00.790
把学生加进去

23:02.960 --> 23:03.460
运行

23:03.960 --> 23:05.660
哎这里出问题了

23:06.360 --> 23:06.960
到什么呢

23:08.760 --> 23:09.360
嗯

23:10.760 --> 23:12.560
feel the burst day

23:12.660 --> 23:14.960
does have default value

23:14.960 --> 23:16.160
啊这里我知道了

23:16.460 --> 23:18.860
这是我因为我们之前mock数据的时候啊

23:19.160 --> 23:20.360
你看直接移动的问题

23:20.360 --> 23:21.660
刚刚当时呢

23:21.660 --> 23:23.860
很多问题就是就是应该及时的去改

23:23.860 --> 23:24.860
不应该拖

23:25.360 --> 23:26.860
有的时候我也有这个毛病

23:29.120 --> 23:30.820
好那么现在呢我们加在运行

23:32.120 --> 23:32.520
ok

23:33.020 --> 23:33.620
搞定了

23:34.020 --> 23:36.220
接下来我们在这边看一下啊学生表

23:36.720 --> 23:37.820
对吧数据又回来了

23:38.120 --> 23:38.520
对不对

23:39.020 --> 23:40.420
好这是这一块啊

23:41.120 --> 23:43.120
那么现在我们把这个东西啊准备准备

23:43.120 --> 23:44.020
啊准备好了

23:45.220 --> 23:46.720
那么现在呢我们再回到这个啊

23:47.020 --> 23:48.620
嗯student service里边来

23:48.920 --> 23:50.320
现在我们要验证Burst day

23:51.120 --> 23:51.720
Burst day

23:54.630 --> 23:55.430
好验证这个

23:55.930 --> 23:56.730
嗯生日

23:56.830 --> 23:58.530
生日的话我们还是一样的

23:58.830 --> 24:00.530
同样的啊不允许

24:00.930 --> 24:01.630
你为空

24:02.530 --> 24:03.430
这是一样的规则

24:03.830 --> 24:05.630
那么生日的类型是什么呢

24:05.930 --> 24:07.430
要用说这个生日的类型呢

24:07.430 --> 24:08.330
应该是一个dead

24:08.430 --> 24:08.930
对吧

24:09.230 --> 24:10.430
但是呢这样子写不好

24:10.630 --> 24:12.330
虽然说他支持这个东西啊

24:12.330 --> 24:13.530
他支持这个东西

24:14.130 --> 24:15.130
但是呢并不好

24:15.230 --> 24:15.930
因为这样子呢

24:15.930 --> 24:18.530
他的类型啊就必须要是一个日期对象

24:19.230 --> 24:20.530
但是我们知道日期呢

24:20.630 --> 24:22.030
写法是非常灵活的

24:22.330 --> 24:23.930
可以是一个时间戳

24:24.330 --> 24:25.730
也可以是一个制服串

24:25.930 --> 24:26.330
对吧

24:26.430 --> 24:28.030
他不一定要是一个对象

24:28.830 --> 24:29.630
好因此呢

24:29.630 --> 24:31.130
我们对日期的处理呢

24:31.130 --> 24:32.130
往往不是

24:32.530 --> 24:34.430
嗯就是对日期类型的判断啊

24:34.630 --> 24:36.030
往往不是用这种方式

24:36.130 --> 24:37.130
使用什么方式呢

24:37.130 --> 24:38.330
使用这个dead time

24:38.730 --> 24:39.730
啊使用这个东西

24:40.130 --> 24:41.330
啊其实对此这个配置的

24:41.330 --> 24:42.630
对这次的元素啊

24:42.630 --> 24:43.530
就是验证了

24:43.530 --> 24:44.830
他跟dead time是一样的

24:44.930 --> 24:46.830
只是他只是他的一种特殊情况

24:47.530 --> 24:48.730
好这个dead time

24:49.330 --> 24:50.330
该怎么来验证呢

24:50.430 --> 24:51.230
他告诉你

24:52.130 --> 24:54.030
他说这个日期的验证啊

24:55.940 --> 24:56.440
嗯

24:57.240 --> 24:58.140
dead time value data

24:58.140 --> 24:59.440
这个日期的验证器

24:59.640 --> 25:01.740
可以用来验证日期和时间

25:03.340 --> 25:04.640
但是呢由于啊

25:04.840 --> 25:07.640
在介石里边日期的格式化啊

25:07.640 --> 25:10.040
日期的解析是非常弱的

25:11.240 --> 25:12.140
啊因此呢

25:12.140 --> 25:14.440
你可能要做一些额外的工作

25:15.040 --> 25:16.540
来让这个验证生效

25:16.740 --> 25:17.740
他就这么个意思

25:18.640 --> 25:21.640
这在这个验证验证

25:22.040 --> 25:23.840
器啊就是这个验证规则

25:24.640 --> 25:26.540
嗯使用的时候呢

25:26.540 --> 25:28.140
你应该先做这么一件事

25:28.340 --> 25:29.940
就是先提供两个方法

25:29.940 --> 25:30.840
一个是post

25:30.940 --> 25:31.940
一个是format

25:32.440 --> 25:33.140
这两个方法呢

25:33.140 --> 25:34.340
他分别用于啊

25:34.340 --> 25:35.240
这个post方法呢

25:35.240 --> 25:37.440
用于把任何一个数据

25:37.440 --> 25:39.140
除了 out 之外的数据

25:39.140 --> 25:40.540
还除了空之外的数据

25:40.540 --> 25:41.240
因为空的数据

25:41.240 --> 25:42.540
他不会经过这个验证的

25:43.440 --> 25:43.840
啊

25:43.940 --> 25:45.840
啊只要有数据

25:45.840 --> 25:47.440
他就会经过这个日期验证

25:47.640 --> 25:49.840
那么你需要把post

25:49.840 --> 25:50.640
这个方法呢

25:50.740 --> 25:53.840
用来解析任何一个非空的值

25:54.040 --> 25:55.040
就是你给你任何一个东西

25:55.040 --> 25:56.440
你要能够把它解析出来

25:56.740 --> 25:57.840
啊解析成一个什么呢

25:57.940 --> 25:59.640
解析成一个时间戳

26:00.540 --> 26:02.140
啊你就给他一个时间戳

26:02.240 --> 26:03.540
他把就是你

26:03.540 --> 26:05.040
你需要把任何数据

26:05.040 --> 26:06.840
转换成一个统一的时间戳

26:06.940 --> 26:08.140
然后他在验证的时候

26:08.140 --> 26:10.240
是通过这个时间戳来进行验证的

26:10.740 --> 26:11.440
明白的意思吧

26:11.940 --> 26:12.340
啊

26:12.540 --> 26:13.540
他这么个意思

26:14.440 --> 26:16.340
啊如果说验证失效

26:16.340 --> 26:18.140
如果说你觉得这个转换不了的话

26:18.140 --> 26:19.640
你就给他一个NAN

26:19.640 --> 26:20.340
那么他就知道了

26:20.340 --> 26:21.640
这个是验证无销的

26:22.640 --> 26:22.940
好

26:22.940 --> 26:24.040
咱们来试一下啊

26:24.540 --> 26:25.540
嗯这个

26:25.540 --> 26:26.740
这个我们首先

26:27.140 --> 26:28.740
写上这么一个东西

26:30.740 --> 26:31.740
写上这么一个东西

26:32.740 --> 26:34.140
就不再是type等于data了

26:34.140 --> 26:34.740
而是什么呢

26:34.740 --> 26:35.540
sd type

26:37.540 --> 26:39.140
他里边有什么样的配置呢

26:39.940 --> 26:41.340
他这里边有这么几个配置

26:41.340 --> 26:42.440
一个states only

26:42.740 --> 26:43.640
这什么意思呢

26:47.270 --> 26:48.370
这个东西什么意思呢

26:48.370 --> 26:49.970
这个东西指的指的是

26:49.970 --> 26:52.070
我只我只需要日期

26:52.070 --> 26:53.970
我不需要时间部分啊

26:53.970 --> 26:55.170
我只需要日期

26:55.670 --> 26:57.070
像我们的生日的话

26:57.170 --> 26:58.570
有没有他一般填的话

26:58.570 --> 26:59.570
也不会填几

26:59.870 --> 27:00.970
哪个小时哪个分钟

27:00.970 --> 27:02.370
哪个秒出生的对吧

27:02.370 --> 27:03.970
所以他只需要日期就行了

27:03.970 --> 27:05.570
因此呢我们把他设为

27:06.370 --> 27:06.870
好

27:07.370 --> 27:07.870
然后呢

27:07.870 --> 27:09.170
这这两个是什么配置呢

27:09.170 --> 27:11.170
这些东西都可以可选的啊

27:11.570 --> 27:12.570
而Ernest呢

27:12.570 --> 27:14.870
表示的是你的日期最早

27:14.970 --> 27:16.270
不能早于多少

27:17.170 --> 27:17.970
比方说吧

27:18.170 --> 27:19.570
咱们这个生日呢

27:20.070 --> 27:21.470
咱们这个生日你不能

27:22.070 --> 27:23.970
你不能是在100年前生的吧

27:23.970 --> 27:24.570
对吧

27:24.570 --> 27:26.370
你不能出生于100年前吗

27:26.370 --> 27:27.870
这个作为学生的话

27:27.870 --> 27:28.570
也有点夸张

27:28.570 --> 27:29.670
100岁我又扔了

27:29.670 --> 27:29.970
对吧

27:29.970 --> 27:31.470
100年前有点太夸张了

27:31.470 --> 27:31.670
好

27:31.670 --> 27:32.470
那么这个时候呢

27:32.470 --> 27:34.170
我们可以利用我们上级课的moment

27:34.170 --> 27:34.570
对吧

27:35.370 --> 27:36.470
moment require

27:37.870 --> 27:39.670
moment不让大家下去看了没有啊

27:39.870 --> 27:41.070
那个库里边东西很多的

27:41.670 --> 27:44.370
那么我们可以用给他一个时间戳嘛

27:44.370 --> 27:45.970
啊这个东西给任何格式都可以

27:46.070 --> 27:47.670
因为你给了任何格式呢

27:47.670 --> 27:49.470
到时候都会经过一个函数

27:49.470 --> 27:50.570
post来进行转换

27:50.570 --> 27:51.570
转换成时间戳

27:51.870 --> 27:52.870
你给他时间戳也可以

27:52.870 --> 27:53.870
给他一个字幕出来也可以

27:53.870 --> 27:54.870
都无所谓

27:54.870 --> 27:56.470
那么这里呢我就用时间戳嘛

27:56.870 --> 27:58.370
咱们使用moment

28:00.270 --> 28:01.570
用UTC记住啊

28:01.570 --> 28:03.170
咱们都用UTC啊

28:03.170 --> 28:03.770
服务器

28:03.870 --> 28:05.470
想都不用想啊用UTC

28:05.570 --> 28:06.670
得到当前时间

28:07.470 --> 28:09.370
在当前这个当前时间的moment

28:09.370 --> 28:10.070
设计数上

28:10.270 --> 28:10.870
然后呢

28:11.070 --> 28:12.370
再用这个substract

28:12.570 --> 28:13.470
啊substract

28:13.870 --> 28:15.070
减少100年

28:16.170 --> 28:18.270
啊写个y y表示年啊

28:18.270 --> 28:19.270
减少100年

28:19.670 --> 28:21.170
在当前时间减少100年

28:21.170 --> 28:22.070
是不是100年前

28:22.270 --> 28:22.670
对吧

28:22.670 --> 28:24.270
然后呢把这个100年前

28:24.270 --> 28:25.370
转换成时间戳

28:25.870 --> 28:27.070
这是最早的时间

28:27.070 --> 28:27.270
对吧

28:27.270 --> 28:28.770
最早也不能早于这个时间了

28:29.070 --> 28:29.970
你出生日期

28:30.170 --> 28:31.570
还有一个最迟的时间

28:32.570 --> 28:34.570
啊最迟的时间可以是现在

28:34.670 --> 28:36.970
你的出生日期不能刚刚今天出生吗

28:36.970 --> 28:38.270
这个也太夸张了啊

28:38.270 --> 28:40.370
或者说我们比方说学生至少得

28:40.770 --> 28:42.970
学变成至少得5岁嘛

28:43.170 --> 28:44.370
所以说你日期呢

28:44.570 --> 28:46.470
也不能moment

28:46.970 --> 28:47.670
UTC

28:48.870 --> 28:51.770
也不能晚于5年前

28:52.270 --> 28:54.870
也不能是晚于当前日期的5年前

28:54.970 --> 28:55.170
对吧

28:55.170 --> 28:56.270
我们把这些东西配置好

28:57.070 --> 28:57.770
不要这意思吧

28:58.070 --> 28:59.670
好配置好的过程能运行吗

28:59.870 --> 29:01.470
现在是不能运行的啊

29:01.470 --> 29:03.070
咱们现在是要出问题的

29:03.070 --> 29:03.870
咱们来试一下吧

29:07.520 --> 29:08.120
这个比方

29:12.720 --> 29:13.120
好

29:13.120 --> 29:14.720
那么现在能不能打开这个

29:14.720 --> 29:15.820
student serve啊

29:15.820 --> 29:16.320
然后

29:17.320 --> 29:19.220
这边我们给他传一个name

29:19.320 --> 29:20.920
name我们要好写的啊

29:21.520 --> 29:22.220
随便写个

29:22.720 --> 29:23.620
然后bust it

29:24.920 --> 29:25.920
我给他写个什么啊

29:26.020 --> 29:26.920
什么日期呢

29:27.420 --> 29:28.820
比方说我的生日吧

29:29.120 --> 29:30.620
我的生日是2000年

29:30.920 --> 29:31.320
啊

29:32.120 --> 29:32.920
3月5号

29:34.920 --> 29:35.720
好那么现在呢

29:35.720 --> 29:36.720
我们看一下能

29:37.520 --> 29:38.120
能行吗

29:41.160 --> 29:41.460
啊

29:41.560 --> 29:42.760
你看是不是包错了

29:42.760 --> 29:43.860
对不对他告诉你什么

29:44.160 --> 29:46.660
他现在呢没有办法解析这个日期

29:46.660 --> 29:48.060
这就是他没有办法比较

29:48.460 --> 29:49.660
因为你传的日期

29:49.660 --> 29:51.060
他格式太丰富了

29:51.360 --> 29:52.960
他没有办法用这个东西

29:53.160 --> 29:54.660
跟这个玩意儿进行比较

29:54.660 --> 29:56.860
他必须要得到一个统一的格式

29:56.860 --> 29:57.860
就是时间戳

29:58.060 --> 29:59.560
那么怎么来得到一个时间戳呢

29:59.560 --> 30:01.160
他告诉你要用这种方式

30:01.960 --> 30:02.460
就在这

30:02.960 --> 30:04.160
啊Validate里边

30:04.160 --> 30:05.760
他提供了一个扩展啊

30:05.760 --> 30:06.960
可以扩展他的方法

30:06.960 --> 30:07.960
扩展他的功能

30:08.260 --> 30:10.560
扩展什么功能的扩展Time的功能

30:10.660 --> 30:11.860
然后给他传一个对象进去

30:11.860 --> 30:12.860
扩展的两个方法

30:12.860 --> 30:14.360
一个是Pose一个是Format

30:14.960 --> 30:15.860
好咱们来写

30:16.060 --> 30:17.260
写完了你又是明白了

30:17.560 --> 30:19.460
那么由于这个是全局扩展

30:19.660 --> 30:21.660
是全局的全局生效的

30:21.960 --> 30:23.160
所以说呢我们这里呢

30:23.160 --> 30:24.960
可以在设备室里面写一个文件

30:24.960 --> 30:26.960
看看是那种类似的做法音列制

30:28.930 --> 30:29.330
哎

30:30.330 --> 30:30.830
哎呦

30:31.830 --> 30:35.070
这天啥呀

30:36.770 --> 30:38.470
啊写上这个音列程啊

30:38.770 --> 30:40.170
啊这个音列程呢他做什么呢

30:40.170 --> 30:40.870
就是做

30:41.170 --> 30:44.170
在服务端啊就是这个业务逻辑程

30:44.470 --> 30:45.770
他的一些初始化操作

30:46.370 --> 30:47.670
啊那么做什么初始化呢

30:47.670 --> 30:50.170
我们这里就无非的就对这个Validate

30:51.170 --> 30:51.870
require

30:52.670 --> 30:53.770
啊Validate

30:54.070 --> 30:54.870
第二件事

30:55.270 --> 30:57.070
对他的什么Validate

30:57.170 --> 30:59.170
extend扩展什么呢

30:59.170 --> 31:01.670
扩展Validate里边的有很多的验证器

31:01.670 --> 31:03.070
其中一个验证器叫detent

31:03.470 --> 31:05.770
啊其中一个验证器叫detent

31:05.970 --> 31:06.970
扩展他的功能

31:07.270 --> 31:09.570
那么后边呢写上扩展两个函数

31:09.570 --> 31:10.870
一个函数叫Pose

31:11.670 --> 31:12.570
这么一个函数

31:12.970 --> 31:14.470
他有第一个函数就Validate

31:14.970 --> 31:15.870
第一个函数是Options

31:15.870 --> 31:17.170
我们先写啊写好了

31:17.170 --> 31:18.370
然后再跟大家解释

31:20.270 --> 31:21.470
啊然后呢format

31:22.070 --> 31:23.170
这个函数Validate

31:23.470 --> 31:24.170
Options

31:25.870 --> 31:26.870
我给大家说一下啊

31:26.870 --> 31:28.470
扩展过后呢这个是什么意思

31:28.770 --> 31:30.770
Pose这个函数呢他用于什么呢

31:31.170 --> 31:31.570
啊

31:33.070 --> 31:33.970
函函数

31:35.170 --> 31:35.670
嗯

31:36.970 --> 31:38.870
会自动用于

31:39.270 --> 31:40.970
对把认了

31:41.170 --> 31:44.570
会自动用于日期格式转换

31:45.470 --> 31:46.670
日期格式转换

31:47.670 --> 31:50.170
他会在验证时

31:50.870 --> 31:52.170
自动触发

31:52.370 --> 31:54.270
啊就会自动触发这个函数

31:54.270 --> 31:55.470
然后来完成转换

31:55.770 --> 31:56.270
嗯

31:56.970 --> 31:57.970
他需要

31:58.270 --> 31:59.670
将任何数据

32:00.170 --> 32:01.370
啊任何数据

32:01.770 --> 32:03.170
转换为

32:04.070 --> 32:04.970
时间戳

32:05.670 --> 32:07.070
啊他就要把任何数据

32:07.070 --> 32:08.670
转换成时间戳返回

32:09.470 --> 32:11.170
如果无法转换

32:12.070 --> 32:13.970
返回NAN

32:14.370 --> 32:15.170
就这么个意思

32:15.570 --> 32:16.570
他就是这个含义

32:17.070 --> 32:18.270
什么时候会凋容他

32:18.370 --> 32:19.370
什么时候会凋容他

32:19.370 --> 32:20.070
他在这个时候

32:20.070 --> 32:21.770
比方说我们这里要验证这个日期了

32:21.770 --> 32:22.070
对吧

32:22.070 --> 32:24.270
他就会把这个日期作为值

32:24.470 --> 32:25.270
传进去

32:25.370 --> 32:26.570
传到这个Value里边去

32:26.770 --> 32:27.570
这个Value呢

32:27.570 --> 32:28.470
就会传入

32:29.070 --> 32:30.970
要验证的值啊

32:30.970 --> 32:32.770
就传入要转换的值

32:34.070 --> 32:35.970
啊他会把这个Value传

32:35.970 --> 32:38.070
把这个给的值传进去

32:38.270 --> 32:39.070
Option是呢

32:39.170 --> 32:41.270
Option是我们的验证配置

32:41.270 --> 32:42.670
就验证在下面里边

32:42.770 --> 32:44.970
就对针对这个属性的验证配置

32:45.570 --> 32:46.370
Option是

32:46.470 --> 32:49.270
是针对某个属性的

32:50.270 --> 32:52.770
属性的验证配置

32:53.070 --> 32:54.070
他会给你传过来

32:54.170 --> 32:55.470
啊这个验证配置对象

32:55.470 --> 32:56.770
整个对象会给你传过来

32:57.170 --> 32:57.870
没了意思吧

32:58.470 --> 32:59.870
啊他就这样子给你传递

33:00.570 --> 33:02.370
而且呢不仅仅是我们的值

33:02.370 --> 33:03.170
会被传进来

33:03.370 --> 33:04.070
当我们一看

33:04.070 --> 33:05.570
我们他要跟这个东西两个比较

33:05.570 --> 33:05.870
对吧

33:05.870 --> 33:07.270
他跟这两个东西比较

33:07.570 --> 33:08.770
那他怎么比较的呢

33:08.870 --> 33:10.070
他就是比较小于大于

33:10.070 --> 33:11.970
因为他得到时间戳过就可以比较了

33:11.970 --> 33:14.270
但是这两个东西是可以不用配置时间戳的

33:14.270 --> 33:15.670
是可以配置任何值的

33:15.770 --> 33:16.970
因此对于这两个东西

33:16.970 --> 33:19.670
他也要经过这个Pose来进行转换

33:19.670 --> 33:21.070
啊这个文档里面都有说明

33:21.870 --> 33:23.370
好所以说这个Pose帮忙很重要啊

33:23.370 --> 33:24.370
总之你要返回时间戳

33:24.370 --> 33:25.470
你要做的事情很简单

33:25.470 --> 33:27.170
就是把这个Value转换的时间戳

33:27.470 --> 33:27.970
那怎么转呢

33:27.970 --> 33:29.570
我们就完全可以利用Moment

33:39.230 --> 33:40.530
好倒进来啊

33:41.630 --> 33:42.230
Moment

33:43.330 --> 33:44.830
好既然我们在这里写

33:44.830 --> 33:45.430
怎么转换

33:45.430 --> 33:46.530
就是非常简单对吧

33:46.630 --> 33:47.430
我们这里呢

33:47.430 --> 33:48.830
无非他的配置里面呢

33:48.830 --> 33:50.430
他不是说有这个Date Only吗

33:50.430 --> 33:51.730
所以有这个配置存在

33:51.930 --> 33:52.430
对不对

33:52.630 --> 33:53.430
那么这个配置呢

33:53.430 --> 33:54.430
他Value去的时候呢

33:54.430 --> 33:55.230
我们就

33:55.830 --> 33:57.430
不需要你给我传小时分钟秒了

33:58.030 --> 33:59.030
他Value Force的时候呢

33:59.030 --> 34:01.230
就要给我传小时分钟秒

34:01.530 --> 34:02.030
对不对

34:02.130 --> 34:02.830
说这个道理

34:03.330 --> 34:04.030
好因此呢

34:04.030 --> 34:04.830
我们这里呢

34:05.430 --> 34:07.230
可以写一个format

34:09.130 --> 34:09.830
format

34:10.930 --> 34:13.330
啊我允许的日期格式

34:13.730 --> 34:14.630
允许的日期格式呢

34:14.630 --> 34:15.630
我认为啊

34:15.630 --> 34:18.230
比方说我默认是有这么几个日期格式

34:18.230 --> 34:19.030
我都允许

34:19.430 --> 34:23.030
连月日我允许啊

34:23.030 --> 34:23.630
然后呢

34:24.130 --> 34:24.730
嗯

34:25.030 --> 34:26.230
还有小时分钟秒啊

34:26.330 --> 34:28.230
小时分钟秒

34:28.830 --> 34:29.230
还有呢

34:29.230 --> 34:33.230
就是连月日

34:33.630 --> 34:34.830
就是单数的啊

34:34.830 --> 34:37.030
不用不用写两个小时分钟秒

34:37.130 --> 34:37.330
对吧

34:37.330 --> 34:38.530
这两个字我都是允许

34:38.530 --> 34:38.830
然后呢

34:38.830 --> 34:39.830
还允许时间戳

34:39.830 --> 34:41.230
时间戳我也允许

34:41.630 --> 34:42.830
好是默认的格式

34:42.930 --> 34:44.130
但是如果说我判断

34:44.530 --> 34:45.330
options

34:46.330 --> 34:47.230
that's only

34:48.830 --> 34:50.030
他只能写日期

34:50.030 --> 34:50.330
ok

34:50.330 --> 34:51.330
那我就把改一下

34:52.130 --> 34:52.430
对吧

34:52.430 --> 34:53.230
我就把改一下

34:53.730 --> 34:55.130
我这么这个玩意就不要了

34:55.230 --> 34:56.230
你只能写日期嘛

34:56.230 --> 34:57.430
这个玩意肯定不能要了

34:58.030 --> 34:58.430
对不对

34:58.430 --> 34:59.230
that's only

34:59.530 --> 35:00.730
啊只能写日期部分

35:01.130 --> 35:02.930
那么我这样子是不是得到一个

35:03.030 --> 35:04.130
我允许的格式

35:04.130 --> 35:06.030
然后使用moment转换就完事了

35:06.230 --> 35:06.830
moment

35:07.830 --> 35:10.530
moment utc啊主题一定要用 utc啊

35:10.530 --> 35:11.130
format

35:12.230 --> 35:12.730
对不对

35:12.930 --> 35:13.730
第一个啊

35:13.730 --> 35:14.630
第一个我要转换了

35:14.630 --> 35:15.390
我要转换的是什么

35:15.390 --> 35:15.830
value

35:15.830 --> 35:16.230
对吧

35:16.730 --> 35:17.430
通过这个

35:17.530 --> 35:18.730
我们的格式这个格式

35:18.730 --> 35:19.230
然后呢

35:19.230 --> 35:21.030
严格啊严格模式

35:21.730 --> 35:22.730
你能转换就转换

35:22.730 --> 35:23.430
转换不了呢

35:23.430 --> 35:24.730
他就是一个无效的日期

35:24.730 --> 35:25.130
然后呢

35:25.130 --> 35:26.130
把它转换的时间戳

35:26.130 --> 35:26.430
对吧

35:26.430 --> 35:27.030
我们说过

35:27.030 --> 35:27.830
用那个value

35:27.830 --> 35:28.530
或者是

35:28.730 --> 35:29.930
直接用个加号在前面

35:30.030 --> 35:31.030
表示把它转换成数字

35:31.030 --> 35:32.430
他就自动转换的时间戳了

35:32.430 --> 35:33.530
而且他会自动

35:33.830 --> 35:34.830
如果说他那个

35:35.630 --> 35:37.130
他这个就是不满足格式要求

35:37.130 --> 35:38.230
他就是NAN

35:38.730 --> 35:39.130
对不对

35:39.130 --> 35:40.630
我们之前都验证都学过的

35:41.430 --> 35:41.830
好

35:42.430 --> 35:43.630
那么这个铺子就写完了

35:44.030 --> 35:45.430
那么这个format是什么意思呢

35:45.430 --> 35:46.930
这个format寒说他是这样子

35:48.030 --> 35:49.130
这两个参数不用说了

35:49.130 --> 35:50.530
这两个参数是完全一样的

35:51.030 --> 35:51.730
format寒说呢

35:51.730 --> 35:53.530
他是用于

35:54.030 --> 35:55.030
显示

35:55.430 --> 35:57.230
错误消息时

35:58.330 --> 35:59.230
消息时

35:59.930 --> 36:00.930
使用的

36:01.430 --> 36:02.230
显示

36:02.930 --> 36:03.630
制服串

36:03.730 --> 36:04.830
就是有的时候比方说啊

36:04.830 --> 36:06.430
你你这个验证失败了

36:06.930 --> 36:08.030
那么他会告诉你

36:08.030 --> 36:09.730
你传的比方说你验证

36:09.730 --> 36:11.830
找于你的日期找于这个日期

36:11.830 --> 36:12.930
那么他会告诉你

36:12.930 --> 36:14.030
你写的日期

36:14.030 --> 36:15.630
然后找于哪一个日期

36:15.630 --> 36:17.830
那么写的时候是不是要显示一个制服串出来

36:18.030 --> 36:20.030
那么这个错误消息里面制服串里面

36:20.030 --> 36:21.830
他要显示的日期格式

36:21.830 --> 36:22.430
就是把它

36:23.130 --> 36:24.330
作为制服串的一部分

36:24.330 --> 36:25.430
那个日期内你

36:25.430 --> 36:26.830
你不能直接显示个时间错了

36:26.830 --> 36:27.630
里边他难看了

36:27.630 --> 36:27.930
对吧

36:28.430 --> 36:29.030
不好分

36:29.030 --> 36:29.630
不好

36:30.530 --> 36:30.930
没有办

36:30.930 --> 36:32.230
没有办法帮助我们分析

36:32.230 --> 36:32.830
所以说呢

36:32.930 --> 36:33.930
要用一个format

36:33.930 --> 36:35.030
他会调用这个format方法

36:35.030 --> 36:36.330
来显示这个错误消息

36:36.330 --> 36:38.230
这个东西主要是在显示错误消息的

36:39.030 --> 36:41.030
这个值就是用复传递的值

36:41.030 --> 36:42.630
那么options就是配置

36:42.730 --> 36:44.030
Internet我们这里呢

36:44.830 --> 36:45.430
可以使用什么

36:45.430 --> 36:46.630
也可以使用moment

36:47.730 --> 36:48.430
直接来吧

36:48.930 --> 36:49.630
moment

36:50.430 --> 36:52.630
然后utc把这个value装

36:52.630 --> 36:54.830
这个value肯定是时间错

36:54.930 --> 36:56.330
他会把这个时间错传进来

36:56.330 --> 36:59.030
因为调那个pose过后是不是得到一个时间错

36:59.030 --> 36:59.630
对不对

36:59.830 --> 37:01.630
那么这个value他肯定是时间错

37:01.630 --> 37:02.430
毫无疑问的

37:02.730 --> 37:03.630
那么这个

37:04.330 --> 37:06.230
转换成那个moment对象

37:06.230 --> 37:06.430
对吧

37:06.430 --> 37:07.430
然后用format

37:08.530 --> 37:10.630
把它转换成一个格式

37:10.630 --> 37:13.130
因为格式把它显示得到一个字幕串

37:13.130 --> 37:14.430
所以它返回的是一个什么呢

37:14.430 --> 37:15.430
返回的是一个字幕串

37:15.730 --> 37:17.030
那么这个格式是什么呢

37:17.030 --> 37:18.230
关键是还是要看一下

37:18.230 --> 37:19.230
是不是得此only

37:19.230 --> 37:21.030
我们这里用一个format

37:22.430 --> 37:28.430
年月日小时分钟

37:29.230 --> 37:30.030
或者这样吧

37:31.430 --> 37:32.430
如果判断一下

37:32.430 --> 37:35.330
如果说的options不是得此only

37:35.430 --> 37:37.230
那么我就再给你评价一点

37:37.730 --> 37:39.130
format再拼接一部分

37:40.230 --> 37:41.730
小时分钟

37:43.230 --> 37:43.730
对不对

37:44.230 --> 37:45.630
我们把format传进去

37:46.430 --> 37:47.730
OK这个就写完了

37:47.830 --> 37:48.230
对吧

37:48.230 --> 37:50.130
我们在service里面加那个inlet

37:50.230 --> 37:50.330
好

37:50.330 --> 37:51.930
这个inservice里面有一个inlet

37:51.930 --> 37:54.230
那么我们整体的初始化的时候呢

37:54.230 --> 37:55.630
我们还要去初始化一下

37:56.030 --> 37:57.730
service里面inlet

37:58.230 --> 37:58.630
对不对

37:59.530 --> 37:59.730
好

37:59.730 --> 38:00.430
那么这里呢

38:00.730 --> 38:01.230
搞定了

38:01.830 --> 38:02.030
好

38:02.030 --> 38:03.330
现在我们有了这个

38:03.530 --> 38:04.730
有的这个规则过后呢

38:04.730 --> 38:05.430
我们再来看

38:07.230 --> 38:07.730
你行

38:08.330 --> 38:08.830
你看

38:09.330 --> 38:10.930
现在是不是可以验证了

38:10.930 --> 38:11.930
而且验证是通过的

38:11.930 --> 38:12.230
对吧

38:12.230 --> 38:13.630
我们这个时间是正常的

38:14.530 --> 38:15.830
你看我就可以当学生

38:15.830 --> 38:16.030
对吧

38:16.030 --> 38:16.830
就可以学习

38:17.230 --> 38:17.830
那么现在呢

38:17.830 --> 38:19.330
如果说我给他传这个日期

38:20.730 --> 38:21.830
这个东西就穿越了

38:21.830 --> 38:22.030
是吧

38:22.030 --> 38:23.530
就存在穿越的学生了

38:23.530 --> 38:24.430
我们来看一下

38:24.830 --> 38:26.230
Burstyn must be

38:26.830 --> 38:30.230
不能早于1920年4月14号

38:30.530 --> 38:31.930
今天是4月14号

38:32.630 --> 38:34.630
那么不能早于这个时间

38:35.630 --> 38:36.430
就这么个意思

38:36.530 --> 38:38.030
那么现在就是肯定是报错了

38:38.030 --> 38:39.430
那如果说我给他传一个

38:39.630 --> 38:42.230
2020年

38:44.710 --> 38:45.210
他告诉你

38:45.210 --> 38:47.710
你的日期不能晚于2015年

38:48.310 --> 38:50.110
你看是不是就有这个验证规则

38:50.710 --> 38:51.110
对吧

38:51.410 --> 38:51.710
然后呢

38:51.710 --> 38:54.610
如果说我给他传递一个是一个错误的日期格式

38:55.110 --> 38:56.510
一个错误的日期格式

38:56.910 --> 38:57.810
那么这个时候呢

38:59.010 --> 39:01.210
他告诉你Burstyn must be a valid date

39:01.210 --> 39:02.110
他不是一个有效的

39:02.110 --> 39:03.810
他必须要是一个有效的日期

39:04.310 --> 39:04.710
对吧

39:05.210 --> 39:05.710
当然了

39:05.710 --> 39:08.010
如果说你还可以给他一个什么时间

39:08.410 --> 39:09.210
时间份

39:10.610 --> 39:11.410
这个行不行呢

39:11.410 --> 39:11.910
也不行

39:11.910 --> 39:13.310
因为我们写了date only的

39:13.610 --> 39:14.110
对不对

39:14.810 --> 39:15.910
这是关于这一块

39:16.410 --> 39:16.610
好

39:16.610 --> 39:17.210
这是验证

39:18.710 --> 39:19.410
Burstyn

39:19.610 --> 39:21.010
Burstyn先是搞定的

39:21.310 --> 39:21.710
对不对

39:21.710 --> 39:22.410
是搞定的

39:23.010 --> 39:23.710
那么

39:24.710 --> 39:25.410
Name搞定了

39:25.410 --> 39:26.110
Burstyn搞定了

39:26.110 --> 39:27.510
那么今天让我们看6

39:27.910 --> 39:28.510
性别

39:28.710 --> 39:29.610
性别也是一样

39:29.610 --> 39:30.510
你必须要填

39:30.910 --> 39:31.410
性别呢

39:31.410 --> 39:33.610
我们就可以不用去er到MT了

39:33.610 --> 39:36.110
因为性别他毕竟毕竟不是知误创

39:36.310 --> 39:36.810
对不对

39:37.010 --> 39:37.910
说你必须要填

39:37.910 --> 39:38.810
这个毫无疑问

39:38.810 --> 39:40.110
然后给他个Type

39:40.210 --> 39:41.710
内容必须是一个不利

39:42.810 --> 39:43.310
不利

39:43.410 --> 39:43.810
对吧

39:43.810 --> 39:44.710
必须是一个不

39:45.410 --> 39:45.510
好

39:45.510 --> 39:46.210
咱们来看一下

39:46.210 --> 39:46.910
现在呢

39:48.410 --> 39:49.510
2010年吗

39:52.450 --> 39:53.150
这个地方

39:53.450 --> 39:53.850
去掉

39:55.950 --> 39:56.450
性别

39:56.450 --> 39:57.550
性别不能为空

39:57.550 --> 39:58.050
对不对

39:58.050 --> 39:58.250
好

39:58.250 --> 39:59.650
那么咱们来把性别写上

39:59.950 --> 40:00.450
sex

40:01.050 --> 40:02.250
如果说这样的乱写

40:02.250 --> 40:02.950
行不行呢

40:04.750 --> 40:05.150
不行

40:05.150 --> 40:05.750
然后性别呢

40:05.750 --> 40:06.650
必须是一个Bur

40:06.650 --> 40:08.350
你看这些都验子都很详细的

40:08.750 --> 40:09.650
我们把它写为True

40:15.340 --> 40:15.540
好

40:15.540 --> 40:15.940
运行

40:15.940 --> 40:17.040
就是验子通过了

40:17.540 --> 40:17.740
对吧

40:17.740 --> 40:18.540
这是性别

40:19.140 --> 40:19.340
好

40:19.340 --> 40:19.840
再来啊

40:19.840 --> 40:20.840
性别完了

40:20.840 --> 40:21.440
过后呢

40:21.440 --> 40:22.840
我们还有一个什么Mobile

40:23.940 --> 40:24.440
对吧

40:24.640 --> 40:25.440
是Mobile

40:26.240 --> 40:27.640
这个是手机号

40:27.840 --> 40:29.440
手机号肯定是个知误创

40:29.440 --> 40:29.940
这毫无疑问

40:29.940 --> 40:31.140
不要认为手机号是一个

40:31.140 --> 40:31.640
那个

40:33.140 --> 40:34.640
不要认为手机号是那个

40:34.640 --> 40:35.640
那个

40:35.640 --> 40:36.240
数字啊

40:36.240 --> 40:37.140
我们讲过的

40:37.540 --> 40:37.940
所以说

40:37.940 --> 40:39.140
AllowMT

40:39.140 --> 40:39.540
Force

40:39.540 --> 40:40.440
不允许为空

40:40.840 --> 40:41.440
手机号

40:41.940 --> 40:42.140
好

40:42.140 --> 40:43.040
那么手机号呢

40:43.040 --> 40:43.740
我们

40:45.940 --> 40:48.140
允许的格式是什么呢

40:48.140 --> 40:48.340
对吧

40:48.340 --> 40:49.540
它是有格式的

40:49.740 --> 40:51.040
手机号是有格式的

40:51.140 --> 40:52.940
那么它我们就可以使用这个format

40:53.240 --> 40:54.740
它是写一个正常表达式

40:55.040 --> 40:55.340
对吧

40:55.340 --> 40:56.540
写一个正常表达式

40:56.540 --> 40:58.440
那么通过正常表达式去沿着

40:59.040 --> 40:59.840
非常简单

41:00.040 --> 41:00.240
好

41:00.240 --> 41:01.140
那咱们来吧

41:01.540 --> 41:01.740
好

41:01.740 --> 41:02.440
format

41:03.840 --> 41:05.240
我们直接写个正常表达式

41:05.340 --> 41:06.340
什么表达式呢

41:06.340 --> 41:07.340
就是

41:10.040 --> 41:11.240
第一个数字是1

41:11.240 --> 41:13.040
后边的是10个

41:13.640 --> 41:14.040
数字

41:14.040 --> 41:15.140
我们就简单写一些

41:15.540 --> 41:16.540
这就是个手机号

41:17.040 --> 41:17.440
对吧

41:17.440 --> 41:18.340
我们来看一下啊

41:18.540 --> 41:19.340
那么我们现在呢

41:19.340 --> 41:20.140
没有写手机号

41:20.140 --> 41:21.140
那肯定是不行的

41:22.540 --> 41:22.840
是吧

41:22.840 --> 41:23.940
手机号不能为空

41:23.940 --> 41:24.340
那行

41:24.340 --> 41:25.440
我们给它写个mobile

41:26.040 --> 41:26.640
手机号呢

41:26.640 --> 41:28.140
我们给它写上这个

41:28.840 --> 41:29.340
呃

41:29.740 --> 41:30.540
随便写一个吧

41:32.840 --> 41:33.240
呃

41:33.240 --> 41:33.840
随便写个

41:33.840 --> 41:34.640
我们来试一下

41:35.640 --> 41:37.840
如果手机号无效

41:37.840 --> 41:38.240
对不对

41:38.240 --> 41:39.040
手机号无效

41:39.040 --> 41:40.240
那么我们给它写正确啊

41:40.740 --> 41:42.640
12341234

41:43.640 --> 41:44.040
啊

41:45.540 --> 41:46.040
音效

41:46.540 --> 41:46.740
好

41:46.740 --> 41:47.840
现在是又一页通过了

41:47.840 --> 41:48.140
对吧

41:48.140 --> 41:49.040
这是手机号

41:49.840 --> 41:50.640
好在哪啊

41:50.840 --> 41:52.140
看一下学生里边还有啥

41:53.940 --> 41:55.640
模型学生

41:56.240 --> 41:58.540
学生手机号就没啥了

41:58.540 --> 41:59.040
对吧

41:59.140 --> 41:59.240
哦

41:59.240 --> 42:00.640
还有一个class id

42:01.440 --> 42:01.640
啊

42:01.640 --> 42:03.940
就是我们的班级id

42:03.940 --> 42:04.240
对吧

42:04.240 --> 42:05.140
这个东西也是

42:05.140 --> 42:08.640
也是必须要验证的class id

42:10.140 --> 42:10.940
班级id

42:11.340 --> 42:11.940
班级id呢

42:11.940 --> 42:13.540
肯定也是不能为空啊

42:13.540 --> 42:14.240
必须要有

42:15.240 --> 42:15.840
班级id呢

42:15.840 --> 42:17.140
而且要是一个数字

42:17.440 --> 42:18.040
但是数字呢

42:18.040 --> 42:19.340
我们有几种验证方式

42:19.340 --> 42:20.340
一种验证方式使用

42:20.340 --> 42:21.540
使用type内行

42:22.040 --> 42:22.640
内行的话

42:22.640 --> 42:22.940
这里呢

42:22.940 --> 42:23.740
我们使用这个

42:24.440 --> 42:24.740
type

42:24.740 --> 42:25.740
这里有个integer

42:25.740 --> 42:27.040
integer必须是整数

42:27.040 --> 42:28.640
number是可以是任何数字

42:29.140 --> 42:30.940
但是你使用integer的时候呢

42:30.940 --> 42:31.940
无论你使用integer

42:31.940 --> 42:32.440
还是number

42:32.440 --> 42:33.640
它都比较严格

42:34.340 --> 42:35.340
就必须要是一个

42:35.340 --> 42:36.140
真正的

42:36.140 --> 42:38.240
就必须要是一个就是那个

42:39.440 --> 42:39.940
哎

42:39.940 --> 42:41.140
在哪

42:41.140 --> 42:41.340
好

42:41.340 --> 42:41.840
我们这里呢

42:41.840 --> 42:43.540
把它的integer打开

42:44.540 --> 42:45.940
这个验证太严格了

42:45.940 --> 42:47.040
就是说我们如果说

42:47.040 --> 42:47.740
这个样子写了

42:47.740 --> 42:48.840
class id肯定要写

42:48.840 --> 42:50.240
不写的话肯定不行

42:50.240 --> 42:52.040
不写的话那个presence

42:52.040 --> 42:52.740
presence呢

42:52.740 --> 42:54.140
还是验证通不过的

42:54.140 --> 42:54.740
对吧

42:55.040 --> 42:55.240
好

42:55.240 --> 42:55.840
那么我们这里呢

42:55.840 --> 42:56.740
各样写上啊

42:57.340 --> 42:57.940
手机号

42:57.940 --> 42:58.340
不

42:58.340 --> 42:59.140
class id

43:00.140 --> 43:00.740
那么这里呢

43:00.740 --> 43:02.240
我们给他写上一个35

43:04.040 --> 43:04.740
比方这样子写

43:04.740 --> 43:05.340
看写不写

43:05.740 --> 43:06.340
35

43:06.840 --> 43:07.740
它是一个整数啊

43:07.740 --> 43:08.140
对不对

43:08.140 --> 43:08.540
但是呢

43:08.540 --> 43:08.940
他告诉你

43:08.940 --> 43:10.840
他必须要是一个integer

43:10.840 --> 43:11.240
啊

43:11.240 --> 43:12.940
因为他不不止字不串

43:12.940 --> 43:13.740
尽管这个字不串

43:13.740 --> 43:14.440
是一个数字

43:14.440 --> 43:15.340
但他不止时

43:15.740 --> 43:16.940
说这这是这种写法

43:16.940 --> 43:17.340
啊

43:17.740 --> 43:19.240
那么还有一种就是验证了

43:19.240 --> 43:20.940
稍微宽松一点叫做numberic

43:21.240 --> 43:21.540
啊

43:21.940 --> 43:22.740
就这个东西

43:23.040 --> 43:23.440
啊

43:23.440 --> 43:24.840
这种现在他只要是

43:24.840 --> 43:25.840
是一个数字

43:25.840 --> 43:26.040
啊

43:26.040 --> 43:26.740
他都行

43:27.840 --> 43:28.040
啊

43:28.040 --> 43:29.840
他只要是数字就行

43:30.040 --> 43:30.340
啊

43:30.340 --> 43:32.240
叫numberic quality

43:32.240 --> 43:32.840
啊

43:33.940 --> 43:34.740
这里呢

43:34.740 --> 43:35.540
有一个

43:35.540 --> 43:36.740
他有一个很多配置啊

43:36.740 --> 43:38.240
就是有为什么strict

43:38.540 --> 43:39.940
是不是严格的啊

43:39.940 --> 43:41.940
如果说你把strict开启的过后呢

43:42.540 --> 43:42.640
啊

43:42.640 --> 43:44.340
他必须要是一个真正的数字

43:44.340 --> 43:46.140
你字无算是不行的啊

43:46.740 --> 43:47.540
是这么个意思

43:47.640 --> 43:48.640
only integer

43:48.640 --> 43:50.040
就表示指示种数

43:50.540 --> 43:50.940
对吧

43:51.140 --> 43:51.440
好

43:51.440 --> 43:52.340
咱们来看一下吧

43:52.340 --> 43:53.440
我们就这样的来验证

43:54.340 --> 43:55.340
这个地方我们写上

43:55.340 --> 43:56.740
only reteger to

43:57.140 --> 43:57.540
啊

43:57.740 --> 43:58.440
strict

43:59.640 --> 44:00.140
force

44:00.340 --> 44:01.540
不要那么严格啊

44:01.540 --> 44:02.340
不要那么严格

44:02.540 --> 44:02.740
好

44:02.740 --> 44:03.440
咱们来看一下

44:03.440 --> 44:05.740
那么现在能不能能不能支持

44:07.840 --> 44:07.940
好

44:07.940 --> 44:08.940
你看是不是支持的

44:08.940 --> 44:09.440
对吧

44:09.540 --> 44:10.540
你这里写的是个数字

44:10.540 --> 44:12.440
尽管你放到制服圈里边还仍然支持

44:12.440 --> 44:13.740
但是如果说你写的不是

44:13.740 --> 44:14.640
不是数字

44:16.040 --> 44:16.240
啊

44:16.240 --> 44:16.640
就不是

44:16.640 --> 44:17.640
就就出问题了

44:17.640 --> 44:18.040
对吧

44:18.340 --> 44:19.840
或者说你写的是小数

44:22.040 --> 44:23.140
写的是小数

44:25.060 --> 44:26.060
所以也是问题了

44:26.160 --> 44:26.660
对不对

44:27.160 --> 44:27.360
啊

44:27.360 --> 44:27.560
当然了

44:27.560 --> 44:28.960
这里边还有很多的规则啊

44:28.960 --> 44:30.360
还包括就是最小啊

44:30.360 --> 44:32.160
就是必须要等于什么值

44:32.360 --> 44:33.060
必须啊

44:33.160 --> 44:34.860
greater than or equal to

44:34.860 --> 44:37.160
表示就是大于等于某个值啊

44:37.160 --> 44:38.060
less than

44:38.060 --> 44:39.460
表示小于啊

44:39.460 --> 44:41.260
less than or equal to

44:41.260 --> 44:43.060
表示小于等于某个值

44:43.060 --> 44:43.460
对吧

44:43.460 --> 44:43.560
啊

44:43.560 --> 44:44.660
就这个东西啊

44:44.660 --> 44:45.860
里面至于高低

44:45.860 --> 44:47.860
当然我们这里不需要那么多的验证了

44:47.860 --> 44:49.160
因为我们这里一定要判断

44:49.160 --> 44:51.260
他的班级是否存在

44:51.260 --> 44:52.660
你给我传的班级

44:52.660 --> 44:54.660
我到底数据库里边有没有这个班级

44:54.660 --> 44:55.260
对吧

44:55.260 --> 44:56.960
说判断班级是否存在

44:56.960 --> 44:58.260
那么这个东西怎么判断的

44:58.260 --> 44:59.260
他肯定没有这个规则

44:59.260 --> 45:00.260
他怎么可能有这个规则

45:00.260 --> 45:01.060
来想一想

45:01.060 --> 45:02.060
这是业务逻辑规则

45:02.060 --> 45:02.760
对吧

45:02.760 --> 45:03.960
那么这个时候呢

45:03.960 --> 45:05.360
你可以不用管他

45:05.360 --> 45:07.060
你先把这个验证通过了再说

45:07.060 --> 45:08.060
通过了一些验证过后

45:08.060 --> 45:09.960
我再来判断班级是否存在

45:09.960 --> 45:10.360
对吧

45:10.360 --> 45:11.360
这是一种方案

45:11.360 --> 45:11.860
一种方案呢

45:11.860 --> 45:13.460
我们就是直接写到

45:13.460 --> 45:15.960
这个把他挤称到这个验证规则里边

45:15.960 --> 45:17.560
那怎么来挤称到验证规则里边

45:17.560 --> 45:19.560
你就需要制定验证了

45:19.560 --> 45:20.860
怎么样制定验证了

45:20.860 --> 45:22.360
他的他的方式是这样子

45:23.560 --> 45:24.260
啊

45:24.260 --> 45:25.560
他你要制定验证的话

45:25.560 --> 45:26.960
你需要对这个validate

45:27.960 --> 45:28.760
validate

45:29.560 --> 45:30.260
里边的什么

45:30.260 --> 45:31.360
validate

45:31.860 --> 45:33.160
进行扩展

45:33.160 --> 45:34.660
里边加一个验证规则就行了

45:34.660 --> 45:35.060
对吧

45:35.060 --> 45:35.960
这里边有很多的

45:35.960 --> 45:37.960
他的验证规则其实全在这里边

45:37.960 --> 45:39.260
这是一个对象

45:39.260 --> 45:41.460
那么你在这里边加一个验证规则就完事了

45:41.460 --> 45:42.160
加什么验证规则

45:42.160 --> 45:42.560
名字呢

45:42.560 --> 45:43.360
随便取

45:43.360 --> 45:45.260
比方说你可以取一个就是

45:45.260 --> 45:46.960
class ID

45:46.960 --> 45:48.360
class exist

45:48.360 --> 45:50.460
判断那个班级是否存在

45:50.460 --> 45:50.660
对吧

45:50.660 --> 45:51.760
加一个函数

45:51.760 --> 45:52.660
这个函数

45:52.660 --> 45:54.060
就有一个参数validate

45:54.060 --> 45:55.260
判断这个validate是什么

45:55.260 --> 45:56.760
就是你要验证的值

45:56.760 --> 45:58.060
就是验证的班级

45:58.060 --> 45:59.560
班级ID是否存在

45:59.560 --> 46:01.260
然后你把它写好了之后

46:01.360 --> 46:02.460
写好了之后

46:02.460 --> 46:05.360
然后在这个class ID这里再加一个规则

46:05.360 --> 46:06.060
什么规则呢

46:06.060 --> 46:07.160
class exist

46:07.160 --> 46:08.560
把稍微处就完事了

46:08.560 --> 46:09.460
就这么简单

46:10.060 --> 46:10.960
就这么简单

46:10.960 --> 46:11.360
对吧

46:11.360 --> 46:12.460
那么这个时候

46:12.460 --> 46:13.360
class ID的时候

46:13.360 --> 46:14.560
他会去调用这个方法

46:14.560 --> 46:15.860
把class ID传进去

46:15.860 --> 46:16.960
来完成这个验证

46:17.560 --> 46:19.360
那么这个地方怎么来验证的

46:19.860 --> 46:21.460
如果说是同步的话

46:21.860 --> 46:23.560
那么如果说验证成功

46:23.560 --> 46:24.560
你就返回一个law

46:24.560 --> 46:25.460
返回一个undefined

46:25.460 --> 46:26.660
或者是这样子

46:26.660 --> 46:28.360
这样子是不是返回一个undefined

46:28.360 --> 46:28.860
对吧

46:28.860 --> 46:30.160
那么这样子是不是就验

46:30.360 --> 46:31.360
他就验证通过了

46:31.660 --> 46:32.160
通过了

46:32.160 --> 46:33.060
表示没问题

46:33.360 --> 46:34.260
如果说有问题的话

46:34.260 --> 46:35.160
你就返回一个字不算

46:35.160 --> 46:37.160
表示验证就是错误消息

46:37.160 --> 46:37.960
就这么简单

46:39.060 --> 46:40.360
但是这是同步的情况

46:40.360 --> 46:41.660
当然我们这里肯定是异步的

46:41.660 --> 46:42.160
对吧

46:42.160 --> 46:43.160
因为我们要从数据库里边

46:43.160 --> 46:44.360
去判断到班级是否存在

46:44.360 --> 46:45.360
肯定是异步的

46:45.560 --> 46:46.060
那怎么办呢

46:46.060 --> 46:47.460
我们先把异步写好再说

46:47.960 --> 46:48.760
写好再说

46:48.960 --> 46:50.560
那么我们这里的value

46:50.560 --> 46:51.760
我们就可以用class

46:52.460 --> 46:53.760
fand by pk

46:54.360 --> 46:55.160
value传进去

46:55.160 --> 46:56.360
班级ID传进去

46:56.960 --> 46:57.660
传进去过后了

46:57.660 --> 46:58.760
是不是拿到一个班级

46:59.060 --> 46:59.560
对不对

47:01.160 --> 47:03.160
拿到一个班级

47:03.360 --> 47:04.160
那么我们判断一下

47:04.160 --> 47:05.360
班级是否存在

47:05.760 --> 47:07.360
如果说c有值

47:07.560 --> 47:08.960
有值的话是班级存在

47:09.160 --> 47:09.960
存在的话

47:09.960 --> 47:11.160
是不是表示没问题

47:11.160 --> 47:11.460
没问题

47:11.460 --> 47:12.360
我就啥都不返回

47:12.960 --> 47:13.160
好

47:13.160 --> 47:14.260
如果说班级不存在的话

47:14.260 --> 47:15.460
我们返回一个错误消息

47:16.160 --> 47:16.860
怎么消息呢

47:17.260 --> 47:19.260
他会自动给你带上一个属性名

47:19.260 --> 47:20.660
前面会自动给你加上属性名

47:20.660 --> 47:21.860
所以属性名不用写了

47:21.960 --> 47:26.160
那么就是classID is not exist

47:27.260 --> 47:27.760
对不对

47:31.760 --> 47:33.260
好我们就把制定验证写好了

47:33.260 --> 47:33.960
但是你注意

47:33.960 --> 47:35.160
这是个异步验证

47:35.260 --> 47:36.360
因此你验证的时候

47:36.360 --> 47:37.860
你肯定不能用这种方案了

47:38.060 --> 47:39.660
因为这是个同步验证方式

47:39.760 --> 47:40.260
对吧

47:40.760 --> 47:42.760
你异步的鬼绕等到什么时候

47:42.960 --> 47:43.660
所以说这个时候

47:43.660 --> 47:44.660
你可以使用他的另一个

47:44.660 --> 47:45.460
还是叫sync

47:46.260 --> 47:46.860
sync

47:47.560 --> 47:48.960
通过这个异步验证

47:49.260 --> 47:50.460
通过这种方式来验证

47:50.560 --> 47:51.160
那么这种方式

47:51.160 --> 47:52.360
它是这种模式

47:52.760 --> 47:54.160
如果说验证通过

47:54.660 --> 47:55.660
它啥都不会做

47:55.960 --> 47:56.660
它就不会

47:56.660 --> 47:58.660
它就得不到任何东西

47:59.060 --> 48:00.660
验证通过得不到任何东西的

48:00.860 --> 48:01.960
如果说验证失败

48:03.160 --> 48:04.660
如果说验证失败的话

48:04.660 --> 48:06.160
那么它就会给你爆错

48:06.160 --> 48:08.460
相当于给你把这个promise

48:08.460 --> 48:10.160
给你使用reject车了

48:11.160 --> 48:12.160
相当于是这么一个意思

48:12.460 --> 48:13.460
所以说你这里呢

48:14.060 --> 48:15.460
我们这里可以这样写

48:16.360 --> 48:18.260
在这里先测试一下吧

48:18.860 --> 48:19.260
串

48:19.860 --> 48:20.460
去看一期

48:21.560 --> 48:22.060
看一期

48:22.960 --> 48:23.460
Azure

48:24.360 --> 48:25.160
输出Azure

48:26.260 --> 48:27.160
咱们来看一下

48:27.460 --> 48:28.960
如果验证通过它什么都不会做

48:29.260 --> 48:30.260
如果验证失败的话

48:30.260 --> 48:32.760
那么它就会打赢这个错误消息

48:32.760 --> 48:33.560
这个错误消息的格式

48:33.560 --> 48:34.860
跟之前是完全一样的

48:35.060 --> 48:36.160
比方说这个班级

48:36.160 --> 48:37.460
我是写的是34

48:37.460 --> 48:37.960
对不对

48:38.460 --> 48:39.460
好 咱们来看一下

48:40.260 --> 48:42.260
class id is not this

48:42.460 --> 48:43.260
所以进了这个

48:43.560 --> 48:44.660
进了这个开启了

48:44.860 --> 48:45.660
对吧 进到这了

48:46.160 --> 48:47.160
当然这个情况

48:47.160 --> 48:48.360
我们更多的时候

48:48.460 --> 48:49.760
在服务层这一边

48:49.760 --> 48:51.260
我们一般不去开启它

48:51.460 --> 48:52.960
它爆出就跟让它爆出

48:53.360 --> 48:54.160
我们就是要爆出

48:54.160 --> 48:55.260
本来就是要爆出的

48:55.960 --> 48:57.460
就算之前是同步方法的时候

48:57.460 --> 48:58.260
我也要爆出的

48:58.260 --> 48:58.860
知道吧

48:59.160 --> 49:00.560
我们之前是同步方法的时候

49:00.760 --> 49:02.160
这个东西的事

49:02.160 --> 49:02.660
看一下

49:05.460 --> 49:07.660
如果说我们之前写同步方法的时候

49:07.660 --> 49:08.060
我们

49:08.360 --> 49:09.360
我如果说把它写完的话

49:09.360 --> 49:10.060
就是这样子

49:10.560 --> 49:11.660
如果说result有值

49:11.660 --> 49:12.460
表示有错误

49:12.460 --> 49:13.060
对吧 有错误

49:13.060 --> 49:14.160
一定把它爆出错误

49:14.260 --> 49:15.160
是说result

49:15.660 --> 49:16.260
爆出错误

49:16.460 --> 49:16.760
对吧

49:16.860 --> 49:17.360
这个错误

49:17.360 --> 49:19.460
我们可以让路由层去处理

49:19.760 --> 49:20.460
让它去处理

49:20.460 --> 49:21.360
我这里不处理了

49:21.960 --> 49:23.260
那么这里我们

49:23.460 --> 49:24.660
既然它自己爆出错误了

49:24.660 --> 49:26.060
我肯定不会再补货它了

49:26.460 --> 49:27.660
再补货它有什么意义呢

49:27.860 --> 49:28.260
再补货它

49:28.260 --> 49:28.860
然后

49:29.060 --> 49:31.860
然后我再去把错误抛出一次

49:31.860 --> 49:32.560
没有必要

49:33.960 --> 49:34.560
位置

49:35.560 --> 49:37.060
所以说我们这里就直接这样做了

49:37.160 --> 49:38.260
如果说你验证通过

49:38.260 --> 49:39.460
你就继续往后面运行

49:39.460 --> 49:40.860
就把学生添加进去

49:41.060 --> 49:41.460
对吧

49:42.160 --> 49:43.760
验证通过就把学生添加进去

49:43.960 --> 49:44.860
验证失败了

49:44.860 --> 49:46.160
那肯定在这里就爆出了

49:46.160 --> 49:46.360
对吧

49:46.360 --> 49:47.360
添加不了学生

49:47.560 --> 49:48.360
那你看一下吧

49:49.060 --> 49:49.760
那现在呢

49:51.740 --> 49:52.240
你行

49:52.440 --> 49:53.840
你看是不是出了问题

49:54.040 --> 49:54.440
对吧

49:54.440 --> 49:54.940
出了问题

49:54.940 --> 49:56.440
这个学生肯定是没有添加进去的

49:56.840 --> 49:57.840
我们到这个

49:58.140 --> 49:59.240
视觉谷里面看一下

50:00.840 --> 50:01.340
小心

50:04.820 --> 50:06.420
你看最后一个肯定不是

50:06.620 --> 50:08.720
我们的数据肯定没有添加进去

50:08.720 --> 50:09.620
它验证失败了

50:09.620 --> 50:10.820
验证失败在这里爆出来

50:10.820 --> 50:11.820
就单码就中断了

50:11.820 --> 50:12.020
对吧

50:12.020 --> 50:13.720
把错误就跑到这来了

50:13.820 --> 50:14.220
因此呢

50:14.220 --> 50:15.420
我这里需要

50:15.620 --> 50:16.920
需要搞定错误的话

50:16.920 --> 50:18.020
那你就去搞定

50:18.020 --> 50:18.920
比方说我在这里

50:19.420 --> 50:20.020
开启

50:22.940 --> 50:23.440
也说

50:24.340 --> 50:25.840
我们把这个错误打印出来

50:26.240 --> 50:26.940
看一下吧

50:29.490 --> 50:30.690
你看错误是不打印出来了

50:30.690 --> 50:31.790
表示验证失败了

50:31.790 --> 50:32.290
对不对

50:32.790 --> 50:33.890
这是这一块

50:35.490 --> 50:36.590
那么我们就通过这个例子

50:36.590 --> 50:39.290
我们把这个添加学生是不是写完了

50:39.890 --> 50:40.090
对不对

50:40.090 --> 50:40.790
就写完了

50:41.990 --> 50:42.690
那么验证了

50:42.690 --> 50:43.790
其实就是这样做的

50:43.790 --> 50:44.790
验证其实就是这样做的

50:44.790 --> 50:46.690
其实也其他的都没啥了

50:47.090 --> 50:48.990
大家可以去去

50:48.990 --> 50:50.790
这个文章的其他的解释差不多了

50:50.790 --> 50:52.490
也没什么好解释的

50:52.890 --> 50:54.490
大家可以去可以可以看一下

50:54.490 --> 50:55.490
它的相关例子

50:56.490 --> 50:57.590
那么其他的函数呢

50:57.590 --> 50:58.490
其他的方法呢

50:58.490 --> 50:59.090
其实

50:59.390 --> 51:00.990
你说验证这个东西有什么技术含量

51:00.990 --> 51:01.890
它没有什么技术含量

51:01.890 --> 51:04.290
但是一定要心非常非常的喜

51:04.390 --> 51:05.290
非常非常的小心

51:05.290 --> 51:05.890
一个个喜

51:05.890 --> 51:07.490
还有个事情我还没有说

51:07.690 --> 51:08.290
还有个事

51:08.990 --> 51:10.990
就是有可能还会出现这种情况

51:11.590 --> 51:12.990
就是就是这个验证框

51:12.990 --> 51:14.390
就是这个验证库啊

51:15.390 --> 51:16.390
他也还没有

51:16.390 --> 51:17.490
他就有些东西呢

51:17.890 --> 51:18.490
是

51:18.990 --> 51:20.090
他只是做验证

51:20.690 --> 51:20.990
但是呢

51:20.990 --> 51:22.890
还没有对做数据做处理

51:23.190 --> 51:24.690
他有可能会出现这种情况

51:25.290 --> 51:26.690
我们添加的学生里面

51:26.690 --> 51:29.090
出现了一些我不希望看到的制断

51:30.290 --> 51:30.990
什么意思呢

51:31.790 --> 51:32.990
定内体的爱情

51:33.690 --> 51:34.790
或者是id

51:35.190 --> 51:36.790
这些我们添加学生的时候

51:36.790 --> 51:38.290
是不希望他出现的

51:38.890 --> 51:39.390
比方说

51:39.390 --> 51:40.090
deleted爱情

51:40.090 --> 51:40.890
该写一个

51:41.290 --> 51:42.790
2010年1月1号

51:43.190 --> 51:43.890
你看啊

51:43.990 --> 51:45.890
这个这个事情就有点可怕了

51:47.090 --> 51:47.490
3

51:48.290 --> 51:48.590
啊

51:48.590 --> 51:49.590
罗龙学院写一个

51:50.090 --> 51:50.790
好运行

51:51.790 --> 51:52.990
ok 运行完了

51:53.190 --> 51:54.490
他没有验证错误对吧

51:54.990 --> 51:55.790
右键刷新

51:58.090 --> 51:58.890
到最后一行

52:00.090 --> 52:00.890
他被删除了

52:00.890 --> 52:01.490
你看看

52:01.490 --> 52:02.990
deleted爱情被删除了

52:03.090 --> 52:03.290
啊

52:03.290 --> 52:04.090
就当地写了

52:04.190 --> 52:05.090
因为这个sacrifice啊

52:05.090 --> 52:06.690
他当你写的这个数据过后啊

52:07.290 --> 52:07.390
啊

52:07.390 --> 52:08.590
当你写的这个数据过后

52:08.590 --> 52:09.990
他如果说你写的这些

52:09.990 --> 52:11.590
就是他自己的这些数据啊

52:11.590 --> 52:12.890
他也会认的

52:12.990 --> 52:13.790
他会认的

52:14.290 --> 52:14.990
那么这个时候呢

52:14.990 --> 52:16.290
是我们不希望看到的

52:16.590 --> 52:16.990
因此呢

52:16.990 --> 52:18.390
我们在这里的还有一件事

52:18.390 --> 52:20.090
还有一件很重要的一件事要做

52:20.590 --> 52:22.590
就是我们在验证之前

52:22.990 --> 52:23.990
我们要做一件事

52:24.590 --> 52:26.190
就是只保留

52:26.590 --> 52:28.190
我们想保留的熟悉

52:28.190 --> 52:29.090
那么这个东西怎么办呢

52:29.090 --> 52:30.290
这个东西非常非常简单

52:30.290 --> 52:31.290
你不要把想复杂

52:31.390 --> 52:32.790
你自己写个函数据完事了

52:32.990 --> 52:33.990
比方说我们写个ut

52:33.990 --> 52:37.790
这个这么一个就是工具工具的文件夹

52:37.890 --> 52:38.890
给他写一个啊

52:39.090 --> 52:39.890
比方说

52:40.290 --> 52:42.590
对象的属性处理啊

52:42.690 --> 52:44.490
就是我们叫proper

52:44.690 --> 52:45.290
proper

52:45.890 --> 52:46.590
property

52:46.790 --> 52:47.490
helper

52:48.090 --> 52:49.490
调解识啊

52:49.690 --> 52:50.890
写这么一个模块

52:50.890 --> 52:52.490
这个模块的导出一些函数

52:52.590 --> 52:53.290
这些函数呢

52:53.290 --> 52:55.290
专门用于处理这个

52:55.790 --> 52:57.390
函数里面的就是一些属性

52:57.390 --> 52:58.590
跟属性相关的啊

52:58.590 --> 52:59.790
比方说我经常写的一些

52:59.790 --> 53:00.690
一些这些库

53:00.690 --> 53:02.290
但是这个楼单写里面也有啊

53:02.890 --> 53:04.690
怎么去掉的守卫空格啊

53:04.690 --> 53:04.990
对吧

53:04.990 --> 53:06.490
去到所有属性的守卫空格

53:06.490 --> 53:07.790
如果说是制服串的话

53:07.990 --> 53:09.190
或者是比较两个

53:09.190 --> 53:10.690
深度比较两个对象啊

53:10.790 --> 53:13.190
或者是比较两个对象的属性啊

53:13.190 --> 53:14.590
或者是从一个对象里面

53:14.590 --> 53:15.990
挑选一些属性出来

53:16.190 --> 53:17.190
或者从一个对象里面

53:17.190 --> 53:18.190
去掉一些属性

53:18.190 --> 53:19.390
我们都可以写对吧

53:19.590 --> 53:21.290
那么比方说我们这里写一个pick

53:22.690 --> 53:24.490
啊什么一个函数

53:24.790 --> 53:25.890
你给我一个对象

53:26.090 --> 53:28.690
然后呢给我一些对象的属性啊

53:28.690 --> 53:30.390
就是proper

53:30.990 --> 53:32.390
给我一些对象的属性

53:33.090 --> 53:34.290
那么我从这个对象中

53:34.290 --> 53:35.990
挑选你给定的属性

53:35.990 --> 53:37.190
其他的属性我不要了

53:37.590 --> 53:38.390
意思吧

53:38.390 --> 53:40.090
那么这个地方怎么在写呢

53:40.390 --> 53:41.290
这个地方打写

53:41.890 --> 53:42.990
这个地方还不好写吗

53:42.990 --> 53:44.090
你用一个FoNi

53:44.190 --> 53:46.190
你首先建立一个R6 OB借

53:46.290 --> 53:46.790
对吧

53:46.890 --> 53:47.990
建立一个空对象

53:48.590 --> 53:49.390
然后呢

53:49.790 --> 53:50.890
FoNi循环呗

53:51.090 --> 53:51.790
循环啥

53:51.790 --> 53:52.890
循环ob借嘛

53:53.090 --> 53:53.590
对吧

53:53.790 --> 53:56.190
当然潜力条件ob借要有值啊

53:56.190 --> 53:57.090
ob借得有值

53:57.090 --> 53:58.790
那么我们可以判断一下啊

53:58.990 --> 54:00.890
如果说ob借没有值

54:01.490 --> 54:02.390
没有值的话

54:02.390 --> 54:03.490
我直接给你返回

54:04.490 --> 54:05.590
返回这个ob借

54:05.890 --> 54:07.790
他那个对象都不是对吧

54:07.990 --> 54:08.690
或者是

54:09.690 --> 54:13.490
或者是typeob借

54:14.090 --> 54:14.990
不等于

54:16.090 --> 54:17.290
什么呢ob借

54:17.290 --> 54:18.190
他不是一个对象

54:18.190 --> 54:19.090
不是一个对象的话

54:19.090 --> 54:20.190
然后我直接给你返回

54:20.490 --> 54:21.390
他是一个对象

54:21.390 --> 54:21.690
是一个对象

54:21.690 --> 54:22.590
我新建个对象

54:22.590 --> 54:24.290
然后去循环他的每一个属性

54:24.490 --> 54:24.890
对吧

54:24.990 --> 54:26.190
循环他的每一个属性

54:26.490 --> 54:26.690
好

54:26.690 --> 54:28.090
那么判断一下啊

54:28.190 --> 54:29.590
判断一下我们这个属性啊

54:29.590 --> 54:30.290
这个key啊

54:30.290 --> 54:31.890
他在不在我们那个属主里面

54:32.290 --> 54:34.190
include key

54:34.390 --> 54:35.690
他在不在我们的属主里面

54:36.090 --> 54:37.590
如果说他在我们的属主里面

54:37.590 --> 54:38.890
是不是这个属性我要保留

54:39.190 --> 54:39.390
好

54:39.390 --> 54:42.290
那么我们就在里就newob借key

54:42.690 --> 54:44.290
等于ob借key

54:44.290 --> 54:45.290
就不就完了吗

54:45.290 --> 54:45.690
对吧

54:45.790 --> 54:46.390
就完了

54:46.390 --> 54:47.290
最后能把这个

54:47.890 --> 54:49.090
newob借返回

54:49.290 --> 54:50.290
那么其他的我不要了

54:50.290 --> 54:50.890
我就不要了

54:51.090 --> 54:52.290
pickpick就是挑选嘛

54:52.290 --> 54:53.090
挑选属性

54:53.790 --> 54:53.990
好

54:53.990 --> 54:56.190
那么这边我们就可以完全可以用这个pick

54:56.890 --> 54:57.790
utl里面

54:58.090 --> 54:59.890
就是解构吧

55:00.390 --> 55:00.990
require

55:02.690 --> 55:04.990
utl里面的proper

55:04.990 --> 55:05.590
help

55:05.890 --> 55:06.390
那么这里呢

55:06.390 --> 55:07.590
我们是使用pick

55:08.290 --> 55:09.490
挑选一些属性

55:09.590 --> 55:10.190
那么来吧

55:11.090 --> 55:11.590
我们这里呢

55:11.590 --> 55:13.390
就可以通过这个pick

55:13.390 --> 55:14.990
这个东西完全可以自己写啊

55:14.990 --> 55:16.590
重新给这个复职

55:16.590 --> 55:17.090
pick

55:17.890 --> 55:18.690
挑选这个

55:19.690 --> 55:20.790
stil ob借

55:20.790 --> 55:21.990
挑选哪些属性呢

55:21.990 --> 55:23.590
我们只需要啊

55:24.190 --> 55:25.090
只需要什么呢

55:25.090 --> 55:26.390
只需要那个就是

55:27.390 --> 55:28.490
看一下学生里边

55:30.790 --> 55:31.590
index

55:31.690 --> 55:33.490
只需要name birthday 6

55:34.090 --> 55:34.590
name

55:35.890 --> 55:36.690
birthday

55:38.390 --> 55:38.990
6

55:39.790 --> 55:40.390
然后呢

55:42.190 --> 55:42.890
还有什么呢

55:43.490 --> 55:45.090
mobile class id

55:45.390 --> 55:45.990
mobile

55:49.590 --> 55:50.090
class

55:50.090 --> 55:51.590
所以我给大家讲这些东西啊

55:51.590 --> 55:53.590
就是说你可以想象的后端啊

55:53.590 --> 55:56.390
他考虑到问题要比前端要多很多

55:57.090 --> 55:58.790
他考虑到很多的细节问题

55:59.090 --> 56:00.190
deleted id不要了

56:00.290 --> 56:01.090
deleted id

56:01.690 --> 56:02.090
不要了

56:02.990 --> 56:03.290
ok

56:03.290 --> 56:04.090
我们就写完了

56:04.890 --> 56:04.990
好

56:04.990 --> 56:06.790
接下来我们的在这边来

56:07.090 --> 56:07.390
然后呢

56:07.390 --> 56:08.590
我们现在运行一次

56:09.190 --> 56:10.490
我们这里可以把输出啊

56:10.490 --> 56:13.690
我们可以看一下我们的stil ob借

56:14.490 --> 56:15.090
输出

56:15.390 --> 56:16.190
好输出过后呢

56:16.190 --> 56:17.790
我们这里不要再给他加一些属性嘛

56:17.790 --> 56:18.590
a等于3

56:18.790 --> 56:19.490
b等于4

56:19.490 --> 56:19.690
对吧

56:19.690 --> 56:20.790
加一些乱七八糟的属性

56:20.790 --> 56:21.390
你看一下

56:22.490 --> 56:22.990
运行

56:23.890 --> 56:24.290
ok

56:24.290 --> 56:25.290
他只有这些属性

56:25.290 --> 56:25.490
对吧

56:25.490 --> 56:26.590
他只挑选了这些属性

56:26.590 --> 56:26.690
对吧

56:26.690 --> 56:28.690
这都是你完全你可以自己写的

56:29.390 --> 56:29.790
刷新

56:32.470 --> 56:32.770
对吧

56:32.770 --> 56:34.670
你看现在就不会干擾到其他地了

56:34.670 --> 56:34.770
对吧

56:34.770 --> 56:36.070
离开传id他也不认的

56:36.470 --> 56:36.770
对吧

56:36.970 --> 56:37.570
那么这样子呢

56:37.570 --> 56:40.170
才能保证我们的业务逻辑层呢

56:40.270 --> 56:41.170
他是稳固的

56:41.170 --> 56:42.570
你想想看

56:42.770 --> 56:44.470
现在这个add student

56:45.370 --> 56:47.270
是不是非常非常的稳固

56:47.470 --> 56:48.570
稳如泰山

56:49.070 --> 56:50.270
你随便怎么搞

56:50.570 --> 56:52.470
你不可能把数据搞乱的

56:52.770 --> 56:53.870
搞乱不了数据

56:54.170 --> 56:55.570
那他数据一定是正常的

56:55.670 --> 56:56.670
保证了每一

56:56.670 --> 56:57.670
每一个学生

56:57.670 --> 56:59.770
他的业务逻辑是正常的

56:59.970 --> 57:00.970
不可能出现在

57:01.170 --> 57:02.370
不可能出现一个学生

57:02.370 --> 57:03.270
他出生在未来

57:04.270 --> 57:05.270
不可能出现

57:05.370 --> 57:05.970
一个学生

57:05.970 --> 57:07.170
他的手机号是123

57:08.170 --> 57:08.570
对吧

57:08.570 --> 57:09.870
这些东西都是不可以保证

57:09.870 --> 57:11.470
不可能出现一个学生的姓名

57:11.670 --> 57:12.470
非常夸张

57:13.370 --> 57:14.170
因此我们就

57:14.470 --> 57:15.470
随便你怎么用

57:15.970 --> 57:17.770
你不用担心数据库里边数据

57:17.770 --> 57:18.170
数据

57:18.570 --> 57:20.270
业务至少他的业务

57:20.370 --> 57:20.970
是错误的

57:20.970 --> 57:21.770
不用担心的

57:22.070 --> 57:23.070
这就是业务逻辑层

57:23.070 --> 57:24.070
他要保证的事情

57:24.470 --> 57:25.670
有了业务逻辑层过后

57:25.670 --> 57:28.570
后面对所有的操作都要经过业务逻辑层

57:28.670 --> 57:30.670
不能单独直接去通过数据库操作

57:31.270 --> 57:31.870
没那么意思吧

57:32.070 --> 57:32.970
那么你想一想

57:33.070 --> 57:34.270
这个工作量还是蛮大的

57:34.470 --> 57:35.770
包括删除了这些东西

57:36.470 --> 57:37.270
一个写完

57:37.370 --> 57:38.370
那每一个方法

57:38.570 --> 57:39.670
你看花了多少时间

57:40.870 --> 57:41.770
工作量还是蛮大的

57:41.770 --> 57:43.270
但是这些事情你必须要做

57:43.570 --> 57:44.270
没办法的

57:44.970 --> 57:46.470
而且这个东西还不好用

57:47.170 --> 57:49.070
不好用一个非常方便的东西

57:49.070 --> 57:50.070
就直接给你生成了

57:50.070 --> 57:50.670
不太好用

57:50.670 --> 57:52.270
因为每一个业务都是独立的

57:52.270 --> 57:53.470
你不知道他的业务是啥

57:53.470 --> 57:54.670
所以说不可能存在说

57:55.670 --> 57:56.470
什么样的一个工具

57:56.470 --> 57:57.870
就直接刷给你生成了

57:58.070 --> 57:59.470
他又不知道你的业务是啥

57:59.570 --> 57:59.770
对不对

57:59.770 --> 58:00.870
每个业务是不一样的

58:01.470 --> 58:04.870
这是关于这一块我要讲的

58:05.070 --> 58:07.470
给大家体验一下后端的做的业务验证

