WEBVTT

00:00.300 --> 00:03.580
这就和他们说一下定时任务

00:03.580 --> 00:05.380
是这样子的

00:05.380 --> 00:07.580
就是有的时候咱们服务器呢

00:07.580 --> 00:10.140
不仅仅是用来处理请求

00:10.140 --> 00:12.860
可能那会有的时候呢

00:12.860 --> 00:14.860
会定期的做一些事

00:14.860 --> 00:16.700
这些商量跟请求没有什么关系

00:16.700 --> 00:19.740
比方说你要服务器有缓存

00:19.740 --> 00:22.060
甭管这个缓存在Redis里边还在哪

00:22.060 --> 00:24.540
你可能会定期的更新一下缓存

00:24.540 --> 00:26.940
比方说我们有些新闻数据

00:27.100 --> 00:31.660
比方说每隔半天

00:31.660 --> 00:34.460
12个小时我更新一下新闻数据

00:34.460 --> 00:36.620
或者是每隔6个小时

00:36.620 --> 00:40.300
比方说定期删除一些不再使用的文件

00:40.300 --> 00:42.540
你看我们之前不是学过文件上传吗

00:42.540 --> 00:43.340
对不对

00:43.340 --> 00:46.140
文件上传了之后

00:46.140 --> 00:48.540
我们把文件保存到了服务器

00:48.540 --> 00:49.580
比方说它投降吧

00:49.580 --> 00:51.100
投降保存到了服务器

00:51.100 --> 00:53.900
接下来它又重新上传了投降

00:53.900 --> 00:55.740
那之前的投降是不是没用了

00:55.820 --> 00:57.820
但是服务器可能没有删除

00:57.820 --> 00:59.020
这些没有使用的文件

00:59.020 --> 01:00.060
也无效的文件

01:00.060 --> 01:01.020
垃圾文件

01:01.020 --> 01:03.260
那么可能我们会定期清理一下

01:03.260 --> 01:05.980
比方说每天的凌晨

01:05.980 --> 01:07.740
每天的凌晨3点

01:07.740 --> 01:09.020
人少的时候

01:09.020 --> 01:11.500
我们服务器利用这些资源

01:11.500 --> 01:14.380
有些空前的时间把清理一下

01:14.380 --> 01:15.980
或者说那些数据库里边

01:15.980 --> 01:18.380
有些数据已经成了垃圾数据了

01:18.380 --> 01:19.340
没有什么意义了

01:19.340 --> 01:22.860
我们把这些数据定期用程序删除一下

01:22.860 --> 01:25.500
或者是我们不是学过爬虫吗

01:25.820 --> 01:27.340
爬一个电影数据

01:27.340 --> 01:29.340
一个电影数据不是电影更新的吗

01:29.340 --> 01:31.020
什么时候再重新爬一次呢

01:31.020 --> 01:32.220
比方说每两天

01:32.220 --> 01:34.940
每三天我们把个数据重新爬一次

01:34.940 --> 01:35.580
等等等等

01:35.580 --> 01:37.660
像这些都是属于定时任务

01:37.660 --> 01:39.020
它跟请求又没什么关系

01:39.020 --> 01:40.060
没有什么关系

01:40.060 --> 01:41.260
它就定期执行的

01:41.260 --> 01:43.420
就定期做一件事

01:43.420 --> 01:44.780
那么像这种事情

01:44.780 --> 01:47.580
其实你完全就可以用设置interval来说

01:47.580 --> 01:48.780
能不能当然可以

01:48.780 --> 01:50.620
比方说在Agg里边你可以写到哪呢

01:50.620 --> 01:52.860
你可以写到这个App.js里边

01:52.860 --> 01:55.100
其中过后你看设置一个定时器

01:55.260 --> 01:55.900
settingtable

01:55.900 --> 01:57.500
让它慢慢运行就行了

01:57.500 --> 02:00.060
但这样子它没有一个合理的规划

02:00.060 --> 02:01.740
你想想用settingtable来说

02:01.740 --> 02:04.620
比方说有很多的定时任务ABCDE

02:04.620 --> 02:07.260
每个的实行时间建格还不一样

02:07.260 --> 02:07.500
对吧

02:07.500 --> 02:08.700
你全部揉到一起

02:08.700 --> 02:10.620
你还真不是很好操作

02:10.620 --> 02:13.500
所以说在Agg.js里边

02:13.500 --> 02:15.900
它提供了它的自己的一套方案

02:15.900 --> 02:17.580
还在处理这种定时任务

02:17.580 --> 02:18.220
怎么处理呢

02:18.220 --> 02:19.980
其实很简单

02:19.980 --> 02:21.980
它认为它就是给你一个约定

02:21.980 --> 02:23.100
你的定时任务

02:23.100 --> 02:23.900
你放到哪呢

02:23.980 --> 02:25.500
放到App.schedule

02:25.500 --> 02:26.700
放到这个文件家里边

02:27.660 --> 02:28.220
schedule

02:29.180 --> 02:30.060
schedule什么意思

02:30.060 --> 02:31.100
就是计划

02:31.100 --> 02:32.460
计划任务的意思

02:32.460 --> 02:33.500
那么这里边写啥呢

02:33.500 --> 02:35.580
这里边就写各种各样的介石文件

02:35.580 --> 02:37.100
一个介石文件就是一个模块

02:37.100 --> 02:39.020
一个模块就是一个任务

02:39.020 --> 02:40.220
就是这么个意思

02:40.220 --> 02:41.340
它怎么写呢

02:41.340 --> 02:42.940
它的写法有两种

02:44.460 --> 02:46.620
我个人是比较推荐第一种

02:46.620 --> 02:47.900
第二种方式也可以

02:47.900 --> 02:49.500
第一种是导出一个内

02:50.380 --> 02:51.740
当它要执行任务的时候

02:51.740 --> 02:53.580
它会创建这个内的对象

02:53.660 --> 02:55.580
然后来执行香港的方法

02:56.220 --> 02:57.180
执行哪个方法呢

02:57.180 --> 02:58.540
你看我导出一个内对吧

02:58.540 --> 02:59.500
内要继承什么呢

02:59.500 --> 03:00.860
继承subscription

03:00.860 --> 03:01.660
就是什么意思

03:01.660 --> 03:02.460
订阅的意思

03:02.460 --> 03:02.780
对吧

03:02.780 --> 03:03.900
订阅一个任务

03:03.900 --> 03:06.060
继承这个内

03:06.060 --> 03:07.980
然后它里边有提供一个方法

03:07.980 --> 03:09.180
叫subscribe

03:09.180 --> 03:09.900
订阅

03:10.460 --> 03:11.340
这么一个方法

03:11.340 --> 03:14.060
当间隔时间到达过后

03:14.060 --> 03:15.580
它会创建这个内的实力

03:15.580 --> 03:17.580
然后执行这个方法就完事了

03:17.580 --> 03:19.580
而且在这个内的执行过程中呢

03:19.580 --> 03:20.620
它里边有Zis

03:20.620 --> 03:22.140
Zis里边有什么App

03:22.300 --> 03:22.780
有什么呢

03:22.780 --> 03:23.740
有context

03:23.740 --> 03:24.860
该有的都有

03:24.860 --> 03:25.500
有config

03:25.500 --> 03:26.700
该有的都有

03:26.700 --> 03:27.980
但是有些同学就问了

03:27.980 --> 03:28.620
这里边

03:28.620 --> 03:29.980
为什么还有context呢

03:29.980 --> 03:30.940
为什么还有这个玩意呢

03:32.380 --> 03:33.260
不是没有请求吗

03:33.260 --> 03:34.780
这个不是请求才会有的吗

03:34.780 --> 03:35.580
它是这样子的

03:35.580 --> 03:36.540
它会在内部呢

03:36.540 --> 03:38.300
给你模拟一个请求

03:38.300 --> 03:39.180
给你模拟一个请求

03:39.180 --> 03:40.460
这个东西我们不用管

03:40.460 --> 03:41.660
我们一般用context呢

03:41.660 --> 03:43.340
也就是用一下它里面的app

03:43.340 --> 03:44.700
但我们直接用app也可以

03:45.820 --> 03:46.700
另外的意思吧

03:46.700 --> 03:47.740
然后这个玩意是什么呢

03:47.740 --> 03:49.260
这个玩意必须是一个静态属性

03:50.300 --> 03:51.500
这个静态属性呢

03:51.580 --> 03:52.780
它要得到一个对象

03:52.780 --> 03:54.060
得到这么一个对象

03:55.100 --> 03:56.060
那么这个对

03:56.060 --> 03:56.780
这个对

03:56.780 --> 03:57.660
这个对象呢

03:57.660 --> 03:59.500
表示的就是一些配置

03:59.500 --> 04:01.740
一些这个就是任务的配置

04:01.740 --> 04:02.780
那一方面就要问了

04:02.780 --> 04:04.300
不是说配置要集中吗

04:04.300 --> 04:07.100
它说这里的配置为什么不放到config default里面呢

04:07.100 --> 04:08.700
它为什么不放到这呢

04:09.260 --> 04:10.140
你想想为什么

04:11.020 --> 04:12.780
因为任务有很多

04:12.780 --> 04:14.620
这只是其中一个任务

04:14.620 --> 04:15.100
对吧

04:15.100 --> 04:17.100
每个任务的配置是不是不太一样啊

04:17.100 --> 04:18.700
如果说你放到集中的话

04:18.700 --> 04:20.220
那就不好处理的

04:20.380 --> 04:21.500
就很难去指定

04:21.500 --> 04:23.500
这个配置是针对哪个任务的

04:23.500 --> 04:24.460
就很难去指定的

04:24.460 --> 04:25.900
所以说呢最好放在这里呢

04:25.900 --> 04:26.860
就比较好

04:26.860 --> 04:28.700
比较好就是放到一个任务里面

04:28.700 --> 04:29.660
你让人意识吧

04:29.660 --> 04:30.460
这是地冻协防

04:30.460 --> 04:32.620
地冻协防呢是导出一个对象

04:32.620 --> 04:34.060
地冻协防导出一个内嘛

04:34.060 --> 04:35.580
地冻协防导出一个对象

04:35.580 --> 04:38.140
那么对象里面提供一个task方法

04:38.140 --> 04:40.460
它会带出一个参数context

04:40.460 --> 04:43.420
于是呢当任务时间到达过后呢

04:43.420 --> 04:44.620
它就会执行这个方法

04:44.620 --> 04:46.220
把context可以传进来

04:46.220 --> 04:47.420
那么从context里面

04:47.420 --> 04:48.700
你是不是可以获取到app

04:48.700 --> 04:49.900
可以获取到别的东西

04:50.140 --> 04:51.100
对吧就这么个意思

04:51.900 --> 04:52.940
其实很简单的

04:52.940 --> 04:54.220
那么我们把这个复制一下

04:54.220 --> 04:55.740
比方说我们这里呢

04:55.740 --> 04:56.220
复制一下

04:57.180 --> 04:58.220
在这里呢新建文件

04:58.220 --> 04:59.420
比方说我们要做什么呢

04:59.420 --> 05:02.220
定期更新一下缓存

05:03.020 --> 05:03.980
我们把这个删掉

05:04.620 --> 05:05.580
这个之前打印吧

05:06.140 --> 05:07.420
定期更新一下缓存

05:10.460 --> 05:11.020
catch

05:12.140 --> 05:13.500
catch local

05:14.140 --> 05:16.220
我们不是之前缓存了这个地区吗

05:16.220 --> 05:16.620
对不对

05:16.620 --> 05:17.100
我们把了

05:18.780 --> 05:19.660
缓存了地区的

05:19.900 --> 05:20.460
那么现在呢

05:20.460 --> 05:22.380
我们把了这个地区缓存的

05:22.380 --> 05:24.620
每隔一段时间更新一下

05:25.580 --> 05:26.700
我们在这里怎么写呢

05:26.700 --> 05:28.140
你看看首先我们做一个配置

05:28.860 --> 05:29.900
schedule 配置

05:30.460 --> 05:31.580
配置里面的导出个对象

05:31.580 --> 05:32.780
对象里面就写配置

05:32.780 --> 05:34.060
这里边有两个配置

05:34.060 --> 05:34.460
interval

05:34.860 --> 05:37.420
就是每5秒钟

05:37.420 --> 05:38.140
这些错了

05:39.740 --> 05:41.020
em才是一分钟

05:42.860 --> 05:44.540
这里呢是每5秒钟

05:45.180 --> 05:45.980
下面人也是

05:47.340 --> 05:48.220
每5秒钟

05:50.460 --> 05:51.740
执行一次任务

05:51.740 --> 05:53.180
当然呢我们一般更新缓存

05:53.180 --> 05:54.060
没说那么频繁

05:54.060 --> 05:55.820
一般几个小时才更新一次

05:55.820 --> 05:57.100
像这种地区数据控呢

05:57.100 --> 05:58.620
其实甚至于我们

05:58.620 --> 05:59.900
几天更新一次都可以

06:00.620 --> 06:01.420
这么个意思

06:01.420 --> 06:03.500
每隔多少时间来执行一次

06:03.500 --> 06:04.620
time of awesome is

06:04.620 --> 06:06.060
我们稍后再说

06:06.060 --> 06:06.620
稍后再说

06:06.620 --> 06:08.380
这是我们针对一个任务的一些配置

06:08.940 --> 06:10.380
然后呢后边的subscribe

06:10.380 --> 06:10.940
catch

06:10.940 --> 06:11.740
这个东西是什么呢

06:11.740 --> 06:12.300
指的是

06:13.260 --> 06:15.100
当这时间到达之后

06:15.100 --> 06:16.140
该做什么事情

06:16.780 --> 06:17.820
指的这么一个函数

06:17.820 --> 06:18.700
那么这个函数里面呢

06:18.780 --> 06:19.740
就写要做的事情

06:19.740 --> 06:20.700
比方我们就写一句话

06:21.260 --> 06:21.900
更新缓存

06:22.540 --> 06:22.860
好

06:22.860 --> 06:24.140
那么我现在运行一下啊

06:26.620 --> 06:27.260
转转打开

06:29.100 --> 06:31.500
我们这里呢运行npm装

06:34.740 --> 06:35.460
我们就等着吧

06:38.780 --> 06:39.100
等着

06:39.580 --> 06:40.780
所以更新缓存出来了

06:40.780 --> 06:40.940
对吧

06:40.940 --> 06:42.300
我们并没有什么请求

06:42.300 --> 06:43.100
那么这些函数呢

06:43.100 --> 06:44.460
会不断的每5秒钟

06:44.460 --> 06:45.260
就运行一次

06:45.740 --> 06:46.700
要不就这么简单

06:48.220 --> 06:49.020
好了那么这是

06:49.580 --> 06:50.300
关于这个任务

06:50.300 --> 06:51.260
那么这里有我们写啥

06:51.260 --> 06:52.620
那么把写完上一点吧

06:52.620 --> 06:53.900
比方说我们可以

06:53.980 --> 06:55.340
之前不是在12倍时里面

06:55.340 --> 06:57.100
我们用了什么缓存

06:57.100 --> 06:57.340
对不对

06:57.900 --> 06:58.940
好了那么我认为呢

06:58.940 --> 06:59.660
这个里面呢

06:59.660 --> 07:00.940
我们直接使用缓存得了

07:01.580 --> 07:02.620
直接使用缓存得了

07:02.620 --> 07:03.420
我啥都不用管了

07:03.420 --> 07:04.140
对吧

07:04.140 --> 07:05.820
直接从得到这个provence

07:05.820 --> 07:07.500
直接返回这个provence就完事了

07:07.500 --> 07:08.380
provence

07:08.380 --> 07:08.940
这次

07:08.940 --> 07:10.940
后边什么事情都不用管了

07:10.940 --> 07:11.820
这些事情都不用管了

07:12.540 --> 07:13.420
直接使用缓存

07:14.140 --> 07:15.180
那包括这里呢

07:15.180 --> 07:16.460
我可以更加简单地写一下

07:17.740 --> 07:17.980
好

07:17.980 --> 07:18.540
这就完事了

07:18.540 --> 07:18.940
对吧

07:18.940 --> 07:20.460
正常我们可以直接一句话

07:20.460 --> 07:20.860
return

07:21.820 --> 07:23.260
直接使用缓存

07:23.260 --> 07:24.540
因为我们这里完全相信

07:24.540 --> 07:25.660
我们的缓存结果呢

07:25.660 --> 07:27.980
已经把这些provence保存了下来

07:28.620 --> 07:29.900
好那么怎么来缓存呢

07:29.900 --> 07:30.940
什么时候缓存呢

07:31.420 --> 07:32.860
问题是什么时候缓存呢

07:32.860 --> 07:34.460
当然这里还要做一件事啊

07:34.860 --> 07:35.660
因为它缓存的

07:35.660 --> 07:37.100
这个redis里面的缓存的是

07:37.820 --> 07:39.100
自补创是自补创

07:39.100 --> 07:39.500
所以说呢

07:39.500 --> 07:40.700
我们这里要用jsonPose

07:42.700 --> 07:43.500
稍微处理一下

07:45.100 --> 07:45.340
好

07:45.340 --> 07:45.900
在这边来

07:45.900 --> 07:46.860
那么我们这里呢

07:46.860 --> 07:47.500
什么时候缓存了

07:47.500 --> 07:50.060
我们就可以使用那个计划任务

07:50.620 --> 07:52.700
每隔一段时间就缓存一次

07:52.780 --> 07:53.820
比方说我们在这里呢

07:53.820 --> 07:55.260
要做法的就很简单

07:55.260 --> 07:56.380
每隔一段时间

07:56.380 --> 07:57.740
我就去请求远程

07:57.740 --> 07:57.980
对吧

07:57.980 --> 07:58.860
远程里边不是

07:58.860 --> 08:01.100
往app里边加了一个x小时吗

08:01.100 --> 08:01.980
对不对

08:01.980 --> 08:03.180
那么我们从配置里面

08:03.180 --> 08:04.620
把api base读出来

08:04.620 --> 08:06.060
然后呢请求这个地址

08:06.060 --> 08:07.580
是不是拿到小硬数据

08:07.580 --> 08:09.580
然后那么把小硬数换成到哪

08:09.580 --> 08:11.020
换成到redis里面

08:11.020 --> 08:11.260
对吧

08:11.260 --> 08:12.460
每隔一段时间去做一次

08:13.420 --> 08:15.020
比方说这样子做了过后呢

08:15.020 --> 08:15.580
我们再来看

08:20.990 --> 08:21.470
运行啊

08:24.100 --> 08:25.140
每隔5秒钟

08:25.140 --> 08:26.900
它会更新一次缓存

08:26.900 --> 08:28.260
现在我们去访问一下这个地址

08:32.160 --> 08:32.560
关掉啊

08:33.520 --> 08:34.320
那么现在呢

08:34.320 --> 08:35.040
是不是就出来了

08:35.040 --> 08:35.280
对吧

08:35.280 --> 08:36.240
这一数据出来了

08:36.240 --> 08:36.960
那么这一数据呢

08:36.960 --> 08:37.760
就是独特式

08:37.760 --> 08:39.040
缓存独特式缓存

08:39.040 --> 08:39.760
每隔5秒钟

08:39.760 --> 08:40.400
会更新一次

08:41.120 --> 08:42.320
当然这个时间有点短

08:43.200 --> 08:43.840
就这么简单

08:44.720 --> 08:45.440
要这意思吧

08:45.440 --> 08:45.680
好

08:45.680 --> 08:46.160
那么现在呢

08:46.160 --> 08:46.800
我们停止了

08:46.800 --> 08:47.280
停止了

08:47.280 --> 08:48.080
我们看接到往后看

08:49.120 --> 08:50.320
方式一方式二都可以

08:50.320 --> 08:51.920
我建议大家可以使用方式一

08:51.920 --> 08:53.200
因为这里边可以使用z

08:53.200 --> 08:54.240
获取到很多东西

08:54.240 --> 08:55.040
可以获取到什么呢

08:55.040 --> 08:56.480
你可以获取到z

08:57.360 --> 08:57.680
app

09:03.040 --> 09:04.800
但是如果说你用方式二的话

09:04.800 --> 09:06.080
那么config是它直接

09:06.080 --> 09:07.200
多于参数上进来

09:07.200 --> 09:08.240
你要过去app的话

09:08.240 --> 09:09.760
你就得使用这种方式

09:09.760 --> 09:11.040
config是app

09:15.120 --> 09:16.800
你就用这种方式来获取了

09:16.800 --> 09:17.440
这样的意思吧

09:18.400 --> 09:18.720
好

09:18.720 --> 09:19.040
第二呢

09:19.040 --> 09:20.640
就说一下这个schedule的配置

09:21.040 --> 09:21.840
就这里的配置

09:23.040 --> 09:23.840
就这里的配置

09:23.840 --> 09:24.640
返回了一个对象

09:24.640 --> 09:25.440
那么这边呢

09:25.440 --> 09:26.400
对象模式里边呢

09:26.400 --> 09:27.200
这个地方呢

09:27.200 --> 09:28.400
也是得到一个对象

09:28.400 --> 09:28.880
对吧

09:28.880 --> 09:29.520
这边配置

09:29.520 --> 09:30.240
配置该怎么写

09:30.960 --> 09:32.320
这里边一个个说吧

09:32.320 --> 09:33.120
一个是interval

09:33.120 --> 09:34.560
interval表示间隔时间

09:35.200 --> 09:36.720
那么这个间隔时间的协放呢

09:36.720 --> 09:37.520
它是一个制幅串

09:38.000 --> 09:39.040
那么这个制幅串怎么写呢

09:39.040 --> 09:40.000
你可以参考这个例子

09:41.120 --> 09:41.920
它是指的

09:41.920 --> 09:42.480
它那边

09:42.480 --> 09:44.400
内部使用了一个就是

09:44.400 --> 09:46.000
一个库叫做ms库

09:46.640 --> 09:47.200
这个库呢

09:47.200 --> 09:48.560
它可以把一些制幅串

09:48.560 --> 09:49.360
描述的时间呢

09:49.360 --> 09:50.400
转换成好妙

09:51.440 --> 09:52.720
随便看一看你就明白了

09:53.680 --> 09:55.360
两天转换的好妙

09:55.360 --> 09:56.240
就这个

09:56.240 --> 09:58.000
一天转换的好妙就这个

09:58.080 --> 09:58.800
10个小时

09:59.360 --> 10:00.320
2点5个

10:00.320 --> 10:01.200
这是啥呀

10:01.200 --> 10:02.560
hrs

10:02.560 --> 10:03.840
你自己下去看看吧

10:03.840 --> 10:04.960
你自己下去看看

10:04.960 --> 10:06.320
那么这里就指的是

10:06.320 --> 10:06.880
一分钟

10:06.880 --> 10:07.920
五秒钟

10:07.920 --> 10:09.360
这个是一年

10:09.360 --> 10:11.360
一年100好妙

10:11.360 --> 10:12.000
等等等等

10:13.040 --> 10:14.400
复三天是什么意思

10:15.200 --> 10:16.160
就是复的

10:16.160 --> 10:17.040
复到好妙数

10:17.040 --> 10:18.480
总之它用一个制幅串的方式

10:18.480 --> 10:21.840
来描述一个好妙数

10:22.880 --> 10:23.520
就这么意思

10:23.520 --> 10:24.560
就interval的配置

10:25.520 --> 10:26.880
然后接下来个地域

10:26.960 --> 10:28.080
还有一种配置方式

10:28.080 --> 10:29.200
是不使用interval

10:30.640 --> 10:32.240
使用这个叫chrome

10:32.240 --> 10:33.840
chrome表示计划任务的意思

10:33.840 --> 10:34.560
计算机里边

10:34.560 --> 10:36.320
叫做计划任务的意思

10:36.320 --> 10:37.440
它也是一个制幅串

10:37.440 --> 10:39.360
它表示的是执行任务的契机

10:40.160 --> 10:41.360
那么这种配置方式

10:41.360 --> 10:41.920
跟interval

10:41.920 --> 10:42.960
interval表示间隔时间

10:43.440 --> 10:44.720
它是执行任务的契机

10:44.720 --> 10:45.680
它跟interval

10:45.680 --> 10:46.240
一般来说

10:46.240 --> 10:47.760
我们只设置一个就可以了

10:47.760 --> 10:48.640
这两个之间

10:48.640 --> 10:50.240
逻辑上是有冲突的

10:50.240 --> 10:51.520
那么我们可以参考一下

10:51.520 --> 10:52.960
一个chrome怎么写呢

10:52.960 --> 10:54.320
可以参考一下这个

10:54.320 --> 10:55.200
叫chrome poster

10:56.000 --> 10:58.960
这个chrome它就支持chrome这种写法

10:58.960 --> 11:00.640
其实不光是乐德结石里边

11:00.640 --> 11:02.640
很多其他的一些语言里边

11:02.640 --> 11:04.080
一些第三方chrome

11:04.080 --> 11:05.840
它也支持chrome的写法

11:05.840 --> 11:07.680
用来表示一个计划

11:08.400 --> 11:11.280
计划的任务的时间点

11:11.280 --> 11:12.400
比方说举了一些例子

11:12.400 --> 11:13.600
比方说像这种写法

11:13.600 --> 11:15.840
来表示每隔三分钟执行一次

11:15.840 --> 11:16.880
这种写法来表示的是

11:17.440 --> 11:20.160
每周三的零成

11:20.800 --> 11:22.960
就是零点零分执行一次

11:23.840 --> 11:25.840
这个写法就表示每年

11:25.840 --> 11:30.800
就是每个12月24号零成零分

11:30.800 --> 11:32.160
星期几无所谓

11:32.160 --> 11:33.120
执行一次

11:33.120 --> 11:34.720
这几个地方的意思呢

11:34.720 --> 11:36.160
你写的看这里

11:36.160 --> 11:37.360
第一个点的表示的是

11:39.520 --> 11:42.320
秒钟分钟小时

11:43.040 --> 11:44.480
秒钟有六个是吧

11:44.480 --> 11:45.760
我这里就是少写了一个

11:47.200 --> 11:48.000
就是少写了一个

11:50.270 --> 11:53.790
零时零分零秒

11:57.100 --> 11:57.900
有这样的写

11:59.420 --> 12:00.540
那么这是小

12:01.340 --> 12:02.940
这个分钟

12:02.940 --> 12:05.260
就是秒分小时

12:06.060 --> 12:07.420
天月

12:08.300 --> 12:08.780
这个是

12:10.300 --> 12:11.260
也就是星期

12:11.260 --> 12:14.060
星期零和七都表示星期天

12:14.700 --> 12:16.140
一到六表示一到星期六

12:16.860 --> 12:17.500
这不个意思

12:18.300 --> 12:18.620
但是呢

12:18.620 --> 12:19.260
这个东西呢

12:19.260 --> 12:20.220
你可以一般来说

12:20.220 --> 12:22.460
我们可以不用去记得一些语法

12:22.460 --> 12:23.020
我们这里呢

12:23.020 --> 12:25.020
可以完全可以使用它的生成器

12:27.100 --> 12:28.700
这是一个也不是官方的

12:28.700 --> 12:29.980
网友自己做的一个生成器

12:29.980 --> 12:30.700
我觉得还可以

12:31.500 --> 12:33.580
比方说咱们那个例子

12:36.460 --> 12:37.260
父亲节

12:37.260 --> 12:38.460
每年的父亲节

12:39.180 --> 12:40.700
我要去执行一个任务

12:41.580 --> 12:42.140
那怎么办呢

12:42.140 --> 12:42.780
我比方说

12:42.780 --> 12:44.140
就是比方说父亲节里边

12:44.140 --> 12:45.740
我们经常会搞一些活动的

12:45.740 --> 12:47.340
活动类形式都是固定的

12:47.340 --> 12:47.740
页面

12:48.540 --> 12:49.340
功能都是固定的

12:49.900 --> 12:51.500
每年父亲节我就把功能上签

12:52.060 --> 12:52.780
那怎么做呢

12:52.780 --> 12:54.140
我就可以在这里呢

12:54.220 --> 12:54.860
指定一个

12:55.740 --> 12:56.700
年就不用管了

12:56.700 --> 12:57.020
每年

12:57.580 --> 12:58.700
那么分钟小时

12:58.700 --> 12:59.740
日分钟小时

13:00.380 --> 13:01.020
不管了

13:01.020 --> 13:01.740
分钟小时

13:02.380 --> 13:03.660
每年父亲节什么时候呢

13:04.300 --> 13:04.860
指定一个吧

13:05.420 --> 13:05.980
零分

13:05.980 --> 13:06.540
零秒

13:07.180 --> 13:07.580
零分

13:09.580 --> 13:10.300
上面的零点

13:11.500 --> 13:12.060
然后呢

13:12.860 --> 13:13.580
日期呢

13:13.580 --> 13:14.540
日期不用管

13:14.540 --> 13:15.500
管预月

13:16.220 --> 13:16.860
六月对吧

13:16.860 --> 13:17.740
父亲节是六月

13:18.540 --> 13:18.860
指定

13:19.820 --> 13:20.220
六月

13:21.420 --> 13:22.220
父亲节是六月

13:22.940 --> 13:26.060
每年六月的第三个星期天

13:26.860 --> 13:27.580
那么这里

13:28.220 --> 13:29.100
星期

13:29.980 --> 13:30.780
周期是从

13:31.260 --> 13:32.220
第三个星期

13:32.780 --> 13:33.020
从

13:34.220 --> 13:35.340
第三个星期天

13:37.650 --> 13:38.610
这这里啊

13:39.090 --> 13:39.890
这里这里

13:39.890 --> 13:42.610
第三个星期的

13:43.170 --> 13:43.810
星期天

13:45.090 --> 13:45.650
就这样去

13:45.650 --> 13:46.130
就完事了

13:46.690 --> 13:47.890
这就是你把这个

13:47.890 --> 13:49.330
这个Chrome表达式

13:49.330 --> 13:49.890
复制一下

13:49.890 --> 13:50.850
张克道理的就是

13:50.850 --> 13:51.890
表达式里边就完事了

13:52.450 --> 13:54.450
他可以精确的来指定那种

13:54.450 --> 13:55.730
任务的契机

13:56.770 --> 13:57.490
这是Chrome

13:57.890 --> 13:58.770
当然这两个呢

13:58.770 --> 13:59.890
还根据你的需要啊

13:59.890 --> 14:00.690
根据你的需要

14:00.690 --> 14:01.650
自行配置就完事了

14:02.450 --> 14:02.930
然后呢

14:02.930 --> 14:03.410
Type

14:03.410 --> 14:04.690
Type不值得是任务类型

14:04.690 --> 14:06.050
它支持两种配置

14:06.050 --> 14:07.010
一个是Worker

14:07.410 --> 14:08.530
Worker什么意思呢

14:08.530 --> 14:09.890
如果说你配置为Worker的话

14:09.890 --> 14:10.930
我们之前上几课

14:10.930 --> 14:12.610
好像是部署了一些课说的

14:13.330 --> 14:13.810
Work

14:13.810 --> 14:15.330
我们在Age启动过后

14:15.330 --> 14:16.050
是不是有多个

14:17.010 --> 14:17.650
进程

14:17.650 --> 14:18.130
对不对

14:18.130 --> 14:19.570
一个进程的就是一个Worker

14:20.130 --> 14:21.250
还包括一个Agent

14:22.610 --> 14:23.490
上几课的东西

14:24.290 --> 14:25.090
只有其中

14:25.090 --> 14:26.610
如果说你配置为Worker的话

14:26.610 --> 14:28.530
只有其中一个进程会执行

14:29.970 --> 14:31.090
只有其中一个Worker

14:31.090 --> 14:32.290
那到底是哪一个Worker呢

14:32.290 --> 14:33.570
Age会是随机指定

14:33.570 --> 14:34.690
哪当任务到哪之后

14:34.690 --> 14:35.490
还会随机指定

14:36.290 --> 14:37.730
还有一个能配置为All

14:37.730 --> 14:39.410
那表示的所有的Worker

14:39.410 --> 14:40.370
都会执行这个任务

14:41.010 --> 14:41.650
别人意识吧

14:42.450 --> 14:43.570
那么这里呢

14:43.570 --> 14:44.290
刚才有人来说

14:44.290 --> 14:45.650
我这里配置为All

14:45.650 --> 14:46.770
那为什么没有看到

14:47.730 --> 14:49.730
所有的就是进程都在执行呢

14:49.730 --> 14:50.610
我们来看一下

14:51.970 --> 14:53.090
你看我们更新缓存

14:54.210 --> 14:55.250
你看每五秒钟

14:55.250 --> 14:57.250
是不是只有只打印出了一个更新缓存

14:58.050 --> 14:59.650
那你说你有这么多进程

14:59.650 --> 15:01.570
那每个进程执行是不知道打印很多吗

15:02.210 --> 15:03.090
那怎么回事呢

15:03.090 --> 15:04.770
因为我们现在目前是开发模式

15:05.250 --> 15:06.130
开发模式下面呢

15:06.130 --> 15:07.410
它只给你启动了一个Worker

15:08.210 --> 15:10.050
那如果说我们要进入这个

15:10.050 --> 15:11.890
真正的生产环境去执行的话

15:11.890 --> 15:12.530
我们可以运行

15:12.530 --> 15:13.650
M3D方面配置过

15:14.530 --> 15:15.010
Start

15:15.010 --> 15:15.410
对吧

15:15.810 --> 15:16.850
我们可以运行这个

15:16.850 --> 15:17.490
再看一下吧

15:19.250 --> 15:20.130
我们把这个去掉

15:20.130 --> 15:20.610
不然的话

15:20.610 --> 15:21.330
还在后台运行

15:21.330 --> 15:22.450
我们看不到控制来的输出

15:23.010 --> 15:23.730
我们把这个去掉

15:24.370 --> 15:26.130
这样我们可以看到控制来的输出

15:26.850 --> 15:27.250
Start

15:30.450 --> 15:31.890
然后再来启动吧

15:31.890 --> 15:32.530
还有很多字

15:33.410 --> 15:34.210
启动完了过后呢

15:34.210 --> 15:35.330
每五秒钟

15:35.330 --> 15:35.890
我来看一下

15:37.570 --> 15:38.370
所以这么多

15:38.370 --> 15:39.890
这么多Worker在执行

15:39.890 --> 15:40.210
对吧

15:40.210 --> 15:41.170
每个Worker都在执行

15:41.650 --> 15:42.450
那么像这里呢

15:42.450 --> 15:44.210
我们在用Redis有这个必要吗

15:44.770 --> 15:45.970
有这个必要让每个

15:45.970 --> 15:47.730
每个进程都去执行一次吧

15:47.730 --> 15:48.770
所以没有这个必要

15:48.770 --> 15:49.090
对吧

15:49.090 --> 15:50.370
完全没有这个必要

15:50.370 --> 15:51.810
因为像Redis呢

15:52.610 --> 15:53.970
只要有一个进程更新的

15:53.970 --> 15:56.050
因为Redis它是一个独立的进程

15:56.050 --> 15:56.610
对吧

15:56.610 --> 15:58.370
你把那个进程的数据更新了

15:58.370 --> 15:59.490
那么其他进程的

15:59.490 --> 16:00.930
都会从那个进程里面读数据

16:00.930 --> 16:01.570
所以说没有必要

16:01.570 --> 16:02.930
让所有的Worker去执行

16:02.930 --> 16:04.370
它跟数据库是一样的

16:04.370 --> 16:05.570
数据库存在硬盘里边的

16:05.570 --> 16:05.970
对吧

16:05.970 --> 16:07.730
Redis呢是一个独立的进程

16:08.450 --> 16:09.730
那个进程Redis的进程

16:09.730 --> 16:11.170
在存放我们的数据

16:11.730 --> 16:12.770
所以我们只是在这

16:12.770 --> 16:13.490
在漏的里面

16:13.490 --> 16:14.930
通知这个进程存放数据

16:15.810 --> 16:16.690
不管我们漏的里面

16:16.690 --> 16:17.970
有多少个进程

16:18.930 --> 16:20.530
Redis进程是不是只有一个

16:20.850 --> 16:22.130
它里面的数据在它里面

16:22.130 --> 16:23.330
因此呢我们在这里呢

16:23.330 --> 16:25.410
直接使用那个Worker就可以了

16:26.130 --> 16:26.690
没问题

16:26.690 --> 16:27.410
没问题

16:28.290 --> 16:29.730
这是那个Type

16:30.370 --> 16:30.930
下面这个呢

16:30.930 --> 16:31.730
就是Inmediate

16:32.370 --> 16:33.730
如果它是为之为处的话

16:33.730 --> 16:35.170
那么这个任务呢

16:35.170 --> 16:36.850
启动的时候就会立即执行

16:36.850 --> 16:37.410
Inmediate

16:42.590 --> 16:43.390
把稍微处

16:43.390 --> 16:44.190
那么这个任务呢

16:44.190 --> 16:44.990
就会立即执行

16:44.990 --> 16:46.110
这个很简单

16:46.110 --> 16:47.230
M它是一个数据

16:48.270 --> 16:49.070
表示的是

16:49.070 --> 16:49.710
这个任务呢

16:49.710 --> 16:51.950
只在某些环境中才能执行

16:51.950 --> 16:52.830
比方到底这样配置

16:53.790 --> 16:54.590
prod

16:54.590 --> 16:55.070
什么意思呢

16:55.070 --> 16:55.630
这个任务呢

16:55.630 --> 16:56.910
只在生产环境执行

16:58.110 --> 17:00.590
因为它不在那个config里面

17:00.590 --> 17:01.150
知道吧

17:01.150 --> 17:01.870
它没办法

17:01.870 --> 17:03.070
它不在config里面

17:03.070 --> 17:03.390
因此呢

17:03.390 --> 17:04.590
还要区分一下环境

17:05.230 --> 17:06.430
在哪个环境里面执行

17:06.990 --> 17:08.190
Disable表示个开关

17:08.190 --> 17:09.390
如果你把稍微处的话

17:09.390 --> 17:10.190
就表示个任务呢

17:10.190 --> 17:11.310
目前是被禁用的

17:11.310 --> 17:12.030
就这么个意思

17:12.670 --> 17:13.310
好那么现在呢

17:13.310 --> 17:13.870
我们来看一下

17:15.630 --> 17:17.070
那这个效果是完全一样的

17:17.550 --> 17:18.910
那么只不过来现在呢

17:18.910 --> 17:20.030
就是启动过后了

17:20.030 --> 17:20.830
就会立即执行

17:21.310 --> 17:22.030
就这么个意思

17:23.070 --> 17:24.110
好了那么这就是

17:24.110 --> 17:25.630
咱们这个计划任务

17:25.630 --> 17:27.950
如果说你到时候需要在服务器上

17:27.950 --> 17:29.230
定期做一些事的话

17:29.230 --> 17:30.750
你可以使用这个计划任务

17:31.550 --> 17:32.350
官员计划任务

17:32.350 --> 17:33.710
还有一些更高级的操作

17:33.710 --> 17:35.390
不过希望我们来用不到

17:35.390 --> 17:36.190
如果说你需要的话

17:36.190 --> 17:37.310
你可以看一下官方文章

17:37.310 --> 17:38.270
官方文章是中文的

17:38.270 --> 17:39.230
你可以去看一下

17:39.230 --> 17:40.270
OK这是计划任务

17:40.270 --> 17:41.150
跟大家说一下

