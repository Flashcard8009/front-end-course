WEBVTT

00:00.430 --> 00:04.830
前面说了那么多呢 主要是做服务端宣传 对吧

00:05.390 --> 00:11.110
实际上前面讲的知识呢 很多在对单页应用程序呢 也是管用的 比方说中间键

00:11.510 --> 00:14.430
比方说日子记录 对吧 对单页应用程序都是管用的

00:15.110 --> 00:21.790
而我们开发单页应用程序的时候呢 无非就是在mvc里边少了一个啥呀 少了一个v

00:22.190 --> 00:25.510
对吧 其他都一样啊 你给我们画一下吧 mvc的结构

00:26.470 --> 00:26.670
呃

00:27.910 --> 00:28.350
mermaid

00:30.070 --> 00:34.950
我就说一遍说一下啊 这个马克当里面画图呢 我给建议大家来使用这个mermaid

00:35.790 --> 00:44.960
就使用这个粒子 使用这个粒子啊 我把这个链接贴出来吧

00:48.760 --> 00:51.040
mermaid 这会图

00:56.630 --> 00:57.950
我们在mvc里边啊

00:58.150 --> 00:58.670
graph

00:59.990 --> 01:00.390
m

01:01.350 --> 01:07.870
就是m 是模型 对吧 首先到c啊 c is controller 然后呢 交给谁呢 交给m

01:08.710 --> 01:12.790
然后呢 m 交给谁呢 交给v 对吧 他是c

01:13.710 --> 01:20.310
创建一个模型啊 得到一个模型 把模型的交给仕图 然后呢 仕图改变之后呢 他又会重新

01:21.670 --> 01:27.390
交给c啊 又会重新交给一个controller 就重新请求服务器 对吧 这是mvc模式

01:28.790 --> 01:41.710
而我们单页应用程序呢 就是少了一个什么呢 少了一个v 因为这个v啊 他是在服务器端的 是在服务器端宣传这个模板引擎 对吧 其中模板引擎来宣传这个仕图 宣传过后呢 把他交给客户端

01:41.990 --> 01:48.870
要客户端过后呢 再点了作为操作之后再重新请求服务器 是这么一种模式 而我们那个

01:49.870 --> 02:00.190
作单页应用程序的话 那么对于服务器来说的话 就只有一个c和一个m m 主要是起一个api作用 对吧 因为阿加克是请求 请求的谁呢 请求的还是c

02:00.630 --> 02:03.270
那么c呢 他创建一个模型 就直接扔给客户端了

02:03.990 --> 02:09.030
原来的意思吧 所以说呢 就少了一个v 仅此而已 其他的东西呢都没有什么变化

02:09.590 --> 02:17.110
而我们呢 我们一个说吧 首先是工程目录 我们如果说开发单页应用程序 比较说用vurrex呀 那么我们这个目录怎么搭建

02:17.590 --> 02:25.630
其实随便的 其实没有什么多少影响啊 随便的 跟那个我们讲之前讲那个露着结实的时候差不多

02:27.310 --> 02:30.910
讲露着结实的时候是不过讲过那个单页应用程序跟露的结合 对吧

02:32.430 --> 02:38.870
随便啊 这个你的客户端你是分开分成另外一个工程 另外一个文件夹写可以

02:39.310 --> 02:46.270
你把它写到自己的整写到这个目录下面也可以 随便说哪个目录都可以啊 因为呢我这里呢是使用的是

02:46.750 --> 02:56.550
github 我不可能再去再弄一个github 啊 大家操作起来比较麻烦 所以说我就干脆建到这吧 那我这里的工程结构呢 就是在这里建一个client文件夹

02:56.870 --> 03:04.950
啊 那么里边放什么vure代码也好 rex代码也好 随便啊 包括你用无力搭载的工程 反正总之总之放了一个文件牙里边去吧 对吧 你随便找个地方放

03:05.470 --> 03:11.470
那么我们这里呢就放到这吧 比方说啊 咱们在这里呢 使用一个vure create client

03:12.470 --> 03:17.870
创建一个client 选择那个啊就直接递个嘛 我之前

03:18.710 --> 03:19.230
搭过一个

03:20.870 --> 03:29.230
就是一个rotor加上一个vure 其他也没啥了 总之随便搭什么什么 随便怎么写啊 跟以前的vure写法是完全一样的 无非就放在给我粘甲里边去

03:29.910 --> 03:30.510
开发就行了

03:31.670 --> 03:38.990
好 这工程目录啊 然后呢 接下来 我们跟两个两个部分来说一个是开发阶段 一个是部署阶段 开发阶段其实非常非常简单

03:39.070 --> 03:43.470
就是一个服务器 因为一个他就承担了一个服务器的作用 对吧 你开启一个服务器

03:44.390 --> 03:51.510
然后呢 再开启个客户端 那玩就行了 这话没有什么好说的 比方说咱们开启个服务器 这服务器不就开了吗

03:52.310 --> 04:00.110
对不对啊 然后呢 服务器的这个这个这个底子对吧 然后呢 我们在在这个目录下面啊 打开中端

04:01.790 --> 04:04.870
再打开个中端啊 然后我们这里呢 运行无用

04:08.210 --> 04:16.050
不分开运行完事了啊 它们之间本身也就是交互的话 也就是交互一个API 把服务器提供API 然后客户端给他交互

04:16.370 --> 04:16.890
就完事了

04:20.210 --> 04:23.650
OK 是不是就完事了啊 没有什么东西 这是开发阶段

04:24.410 --> 04:31.490
那么无非就是说 我们可以把它稍微减化一下啊 像这种目录的话也可以稍微减化一下 因为我这里呢 要启动两个中端 对吧 毕竟

04:32.490 --> 04:36.490
有一点不方便 其实也没有什么不方便的啊 其中两个东西就两个中端嘛

04:37.010 --> 04:45.290
那如果说你想把它合并到一个中端里面 可不可以呢 当然可以啊 我就可以用这样这种写法 你看着啊 我就配置一下脚本 脚本里边呢 我这样配置

04:45.650 --> 04:46.130
把负责

04:48.130 --> 04:48.730
就这样配置

04:49.610 --> 05:00.330
啊 这样配置啥意思呢 就是说 我这里的配置个脚本啊 启动一个是启动ag 一个是启动viu 启动viu的时候呢 我进入这个client目录 然后呢 再去启动这个npm装设五启动viu

05:00.730 --> 05:08.010
对吧 进入这个目录过后再启动viu 然后呢 我把两个npm合并一下啊 我就写个div mini 先呢 启动这个

05:09.210 --> 05:18.370
服务器啊 然后呢 并行啊 你看我这里用了一个案子 对吧 并行就两个一起运行 这个呢 两个案子呢 是前面一个运行完了过后了 再运行后一个

05:18.770 --> 05:25.250
那么这里到一个并行啊 运行服务器和客户端同时运行 对吧 就是运行这个命令和这个命令同时运行

05:25.490 --> 05:30.410
就这样子合并起来啊 好保存一下 我再试一下吧 这样子呢 我们只需要一个一个动作就可以了

05:33.160 --> 05:34.360
npm装div

05:36.240 --> 05:38.480
然后你看服务器跟客户端啊 一起来运行

05:39.880 --> 05:46.080
运行出来了啊 当我们访问的话 开发阶段 你要开发viu的话 访问的是谁啊 访问的是客户端 对不对

05:46.640 --> 05:54.080
那么客户端里边 你看客户端的短口才在哪 8080 我们的服务器短口是七千的七零零一我这里之前好像配置过的

05:54.720 --> 06:01.320
配置成七千了 好像是啊 配置成七千了 那么这两个端口那时候说配置代理对吧 你配置就完事了啊 就是开发阶段

06:02.560 --> 06:06.560
好了 那么部属阶段呢 我要单独说一下 因为部属阶段呢 你要去

06:07.320 --> 06:10.800
气和这个viu 气和这个ag 因为ag呢 它的

06:11.520 --> 06:17.240
对单一应用程序的访问呢 要去承载单一应用程序的访问呢 需要有两个问题需要解决 一个问题呢就是

06:17.920 --> 06:22.280
我们viu是不是要打包 对不对 部属阶段是不是要打包 打包的时候呢

06:22.720 --> 06:27.640
他默认的是放到哪的 默认是放到电神目录下面的 对不对 克莱恩茨的电神目录下面的

06:28.200 --> 06:40.000
那么我们现在的服务器那边 是不是能不能访问不到这个地神目录 对不对 当你能不能配置的 当然可以配置啊 以至于配置就完了 总之呢 我们目标是他打包了结果了 再通过这个ag服务器要能够访问

06:40.520 --> 06:48.040
那怎么做呢 当然方式有很多啊 你可以配置一下ag 只像这个克莱恩茨的地神目录 可不可以可以

06:48.680 --> 06:54.280
也可以干嘛呢 也可以让他打包到哪 打包到这个public目录下面去 总归重用办法的啊

06:55.040 --> 07:06.040
那么现在呢 我们就把它打包成 打包到这个app.public目录下面去 那怎么做呢 根据viu啊 无论是viu还是rize数都可以控制的 对不对 那么我们这里呢 新鲜一个啊

07:07.120 --> 07:12.400
叫做viu.config.json 可以配置viu 那怎么配置呢 我这里复制一下

07:13.400 --> 07:26.800
不叫你这样配置完事了没 对不对啊 这里17000啊 这个地方是配置开发服务器啊 开发简单刚才没有说 就是有个在带你嘛 这个没什么好说的 主要是配置这个玩意儿 这个玩意儿配置的话 我就配置到啊

07:27.480 --> 07:36.800
返回上进目录 到什么app public目录里边去 对不对 那么这样子呢 打包就保留打包了 打包了 public目录的啊 咱们来试一下吧 打包

07:38.120 --> 07:38.640
停止啊

07:39.400 --> 07:45.720
那么打包的时候呢 我们也可以去配置一下mini啊 mini的话 我们加上一个bio的mini

07:47.920 --> 07:58.520
在这里 加上个bio的mini 这样子呢 我们运行这个bio的 那么就进入这个client目录 然后运行这个npm装bio的 然后打包 它打包的时候呢 由于我们现在配置的 对吧 配置到这儿了

07:59.000 --> 08:01.560
因此它也会打包到那个public目录 好 我们试一下

08:04.820 --> 08:05.820
npm装bio

08:06.820 --> 08:11.980
那么它又会进入client目录 然后打包啊 你看 public目录三了 然后重新给你打包

08:14.500 --> 08:30.180
对吧 好 那么现在的能不能访问到我们的这个就是呃 这里边的东西呢 对吧 这是打包的结果 能不能访问到的 好 我们来试一下啊 我们启动启动好我们的服务器 启动服务器因为是开发 因为是生产环境嘛 所以我们用start

08:31.460 --> 08:32.060
启动服务器

08:33.060 --> 08:35.620
啊 目前在5001万口啊

08:37.060 --> 08:42.660
运行出来 哎 为什么是这个呢 为什么没有运行这个index 为什么没有运行这个呢

08:43.380 --> 08:50.380
啊 不好意思 这个页面呢 你的怎么样才能运行 你的这样的运行啊 index 哎

08:51.180 --> 08:56.780
所以要运行public目录下面的index 而且没有所以要这样才能访问 是吧 这样才能访问得到

08:57.780 --> 09:00.780
原来的意思吧 那么现在的问题是

09:02.420 --> 09:09.660
他就多了一个public 这么一个浅坠 对不对 那么这不是这不是我们希望看到的 那么我们现在呢 希望了就是说

09:10.140 --> 09:15.100
呃 我们希望把这个浅坠去掉 那怎么去呢 我们就之前讲过了 对吧 就在

09:15.740 --> 09:19.660
配置里边加上一个prefix啊 static 里边加个配置啊 prefix

09:20.380 --> 09:21.980
把设为啊 写到

09:23.580 --> 09:28.380
啊 找个地方写吧 好了 么这样子一配置完了过后了我们停止啊

09:29.420 --> 09:36.580
然后再来运行index star 好 现在来刷新

09:37.540 --> 09:43.780
我们直接直接这样访问 index 设计来提供啊 直接这样访问 看是不是可以了 对不对 没问题了

09:44.820 --> 09:50.340
但是呢 现在有一个问题比方我们现在啊 这是第一个问题是不是解决了 解决完了 第二个问题就是

09:50.660 --> 09:56.980
我们来看吧 刷新一下是不是就没了 找不到页面了就没了 为什么会没了呢

09:57.620 --> 10:02.820
为什么会没了呢 因为现在呢 还只能通过这个地址才能访问到这个页面 对不对

10:03.620 --> 10:08.180
只能通过这个地址才能访问到页面 如果说你刷新了过后呢 它就访请求了这个地址的

10:08.260 --> 10:10.260
而这个地址是不是没有对应的controller

10:10.820 --> 10:14.420
你看我们在rotor里边配置的时候是没有没有这个这个地址啊

10:14.820 --> 10:19.060
而boss这个地址是不是没有对应的controller一刷新请求服务器服务器找不到的

10:19.140 --> 10:21.460
得到的适应式 所以遇到这样这么一个问题

10:21.860 --> 10:26.180
那么这个问题其实也很简单 对吧 以前express讲过 那么现在在ag里边

10:26.740 --> 10:29.540
时度是一样的 就是把任何请求地址

10:30.660 --> 10:38.180
都指向这个index.at秒 那怎么办呢 你看啊 我就这种这种做法 我首先呢把把这个public目录啊作为

10:39.220 --> 10:42.180
我的那个模板目录 我们之前的模板目录是不是无用

10:42.580 --> 10:46.660
对不对 是模板引擎渲染吗 那么我们现在把这个目录也作为模板目录

10:47.380 --> 10:53.940
这是第一步啊 我们来做一下啊 这里呢 要做一个配置 非常简单 就配置一下无用

10:54.660 --> 10:56.660
配置这啊

10:56.660 --> 11:01.330
把这个拿过来

11:01.330 --> 11:05.650
好 为什么这样的配置 为什么这个这个东西到底是啥呢 就是其实就是形成一个数组

11:05.650 --> 11:10.450
然后呢 把个数组里面用斗号分割来进行连接啊 因为它是一个字无窜嘛 对吧

11:10.450 --> 11:15.090
我们之前讲过 就是我们的试图在哪里去找 我们的模板在哪里去找

11:15.250 --> 11:18.770
可以配置多个目录 多个目录之间能用斗号分割 我就用个数组啊

11:19.090 --> 11:25.410
两个目录都行 你放到无忧的文件夹里边 放到啪啪的一层目录下面都行 总之呢 这里边都是模板啊 都是模板

11:26.130 --> 11:33.010
这是第一步 好 那么这样子做了过后呢 到时候我们是不是可以把这个音这个设定 当成模板 当然呢 这里边没有任何的

11:33.250 --> 11:36.130
什么意见是呢 模板代码 对吧 没有任何模板代码 那么就

11:36.610 --> 11:41.250
就什么都不处理啊 就把原封不动了 把后部断就完事了 把它当成模板

11:42.050 --> 11:46.130
好 那么什么时候来宣传这个模板呢 我们要配置路由 什么时候宣传的

11:46.610 --> 11:50.370
这样子来写 你看啊 到罗特里边去 前面我就上网了

11:52.850 --> 12:00.450
这样子来写 任何请求 无论你是gats还是poser 随便他们请求 当然你如果说你不需要poser的话 你就可以使用gats

12:01.330 --> 12:07.490
任何gats请求 是吧 匹配任何地址 你都交 我都把它交给home index来处理

12:08.130 --> 12:09.330
都把它交给他来处理

12:10.290 --> 12:15.410
那么如果说api怎么办呢 api比较说你就配置呗比较说你这里gats

12:16.130 --> 12:17.730
api news

12:18.050 --> 12:22.850
对吧 你这样子配置呗啊 然后交给什么呢 news index

12:23.810 --> 12:29.490
对吧 前面如果说匹配不到 前面的api都匹配不到 那么api的话就不用渲染试图了对吧 直接返回

12:29.570 --> 12:34.290
跟那个koa跟express是一样的啊 直接返回数据又行了啊 比方说我们在这里写个吧

12:35.090 --> 12:36.930
写个news

12:39.250 --> 12:41.330
全选 暂停过来啊 index

12:43.920 --> 12:46.000
那么这边呢 我们直接选上就完事了

12:49.120 --> 12:52.720
这个就是body 直接得到直就行了 对吧 给他一个数组嘛

12:53.760 --> 12:55.120
新闻嘛 啊title

12:56.240 --> 12:58.320
就直接写就行了 对吧 这就是api请求

12:58.960 --> 13:02.160
没问题吧 你当然这里要读出去后读service 随便你去说

13:02.560 --> 13:06.640
就是没有试图了 没有这个模板的 就是存出了api处理

13:07.440 --> 13:10.720
好了 那么我们在这边呢 昏迷这个社里边要干嘛呢

13:10.960 --> 13:12.960
这里边我要做的事情就只有一个了

13:13.680 --> 13:17.040
这些东西都没了啊 只有一个 就是我要渲染这个模板

13:17.200 --> 13:19.600
我要把这个模板渲染出来 怎么渲染呢 就这样渲染

13:19.840 --> 13:22.960
你这个谁啊 对吧 他会在个目录里面去找模板

13:23.040 --> 13:26.080
我们是不是可以找两个目录 一个是public目录 一个是无应目录

13:26.320 --> 13:30.320
他先从这里面去找 能不能找到个模板 可以对吧 那他就把渲染出去了

13:31.040 --> 13:34.880
就这么简单 就完了 你看吧 后边再处理一下就完事了

13:35.280 --> 13:36.000
接下来我们来看

13:37.040 --> 13:38.720
停止 npm start

13:41.680 --> 13:43.920
好 那么现在呢 我们刷新一下耳包子

13:44.640 --> 13:47.600
你看是不是没问题了 刷新一下手液

13:48.800 --> 13:51.920
手液还有点问题了 没问题了 把他给换出来

13:52.240 --> 13:56.240
耳包子没问题了 对吧 手液刷新 刷新 刷新 都没问题了

13:56.720 --> 14:00.320
因为现在的情况就是你请求一下 请求这个地址

14:00.720 --> 14:03.600
请求这个地址的时候 路径是什么 路径就一个鞋杠

14:04.400 --> 14:08.560
好 那么他去找呗 首先找他内部有静态资源对吧 首先匹配静态资源

14:08.720 --> 14:10.320
能不能匹配上吗 是匹配不上

14:11.120 --> 14:13.040
好 于是呢 就进入我们的路由处理

14:13.440 --> 14:16.720
那么看一下这个东西能匹配上吗 匹配不上 于是不是进入这了

14:16.960 --> 14:20.080
那么就交给谁来处理 Home Index 交给他来处理

14:20.240 --> 14:22.240
而他在干嘛 他就把这个东西卷上过去

14:23.520 --> 14:26.000
就这么简单的啊 你不要用匹配而包子

14:26.640 --> 14:28.800
也匹配而包子 那么匹配他的时候呢

14:29.520 --> 14:34.400
你看啊静态资源能匹配上吗 没有这个静态资源对吧 没有而包此个文件

14:35.440 --> 14:38.000
好 然后呢接下来呢 在那个

14:39.040 --> 14:40.400
是不是交给他 Home Index

14:41.040 --> 14:43.440
是不是还是选了一个同一个页面给他 对不对

14:44.480 --> 14:47.040
那么这些CSS GS 有没有问题的没问题

14:47.040 --> 14:50.960
因为请求CSS GS的时候呢 他会找到静态资源

14:51.120 --> 14:54.720
找到静态资源过后了 他就不会往后边的路由进行处理了

14:55.840 --> 14:57.760
就这么回事 这就是这一块

14:58.160 --> 15:00.960
这里我说明顺便说一下啊 实际上的Aegre里边呢

15:01.280 --> 15:04.320
看他的官方稳当了 他里边跟你说 他还给你

15:05.040 --> 15:05.680
他有一些

15:06.400 --> 15:08.640
整合过后的啊 这种方案

15:08.880 --> 15:11.280
比方说针对无密GS啊 针对什么

15:12.160 --> 15:16.560
nd啊 针对无誘啊 这些东西会有一些整合的方案

15:17.120 --> 15:20.080
但是呢 我个人觉得呢 不用去用他的那种方案

15:20.480 --> 15:22.480
因为呢 他那个东西呢 毕竟不是

15:23.280 --> 15:26.400
比方说啊 他给你把无誘整合到Aegre里边了

15:26.880 --> 15:29.120
看上去呢 好像是整合的还不错

15:29.840 --> 15:33.920
但是有一个问题就是说 那如果说无誘CD 角色下 他不断的更新

15:34.720 --> 15:37.120
而且呢 这个无誘呢 他本身也在不断的更新

15:37.280 --> 15:40.000
那么他那个整合能不能更上 就是遇到这么一个问题

15:40.560 --> 15:42.880
没人意识吧 所以说呢 我觉得呢

15:43.520 --> 15:45.280
嗯 这些技术呢 还是

15:45.840 --> 15:51.200
尽量的用官方的啊 用官方的比较好一点 而且呢 这个东西搭起来也并不复杂啊 如果说特别复杂的话

15:51.440 --> 15:52.800
可以看一看他的整合方啊

15:53.280 --> 15:54.320
啊 没有那么复杂

15:54.800 --> 15:59.280
其实他整合方呢 用起来也没有那么轻松啊 没有想象的那么轻松

15:59.920 --> 16:06.400
这种 这种中法呢 我觉得还是蛮好的比较 而且呢 也好理解啊 大家做起来也没有那么复杂

16:07.360 --> 16:11.040
好 这就是这两个阶段啊 开发阶段 我们就运行MPM装带补就行了

16:12.480 --> 16:17.280
那么生产环境要部署的时候呢 先运行必有的 打包到一个pub的一个部署 然后呢

16:17.680 --> 16:19.360
人道服务系在运行装就完事了

16:20.240 --> 16:22.240
好 这是关于这一块啊

