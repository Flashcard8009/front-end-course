WEBVTT

00:00.240 --> 00:05.240
到现在呢 我们已经使用了不少的Agg插件了

00:06.240 --> 00:09.240
实际上Agg插件是可以自行编写的

00:09.240 --> 00:11.240
是可以自己来写的

00:11.240 --> 00:13.240
那么这个插件的意义在哪呢

00:13.240 --> 00:16.240
插件的意义主要是扩展Agg的功能

00:16.240 --> 00:18.240
Agg还其实就是一套规范

00:18.240 --> 00:21.240
给你告诉你什么文件牙里边放什么

00:21.240 --> 00:22.240
就是一套规范

00:22.240 --> 00:24.240
那么还提供了这套规范之后呢

00:24.240 --> 00:25.240
你可以扩展它的功能

00:26.240 --> 00:28.240
那么如果这些功能扩展的功能

00:28.240 --> 00:29.240
它是可以化为页项目的

00:29.240 --> 00:31.240
比方说你做一个项目里边

00:31.240 --> 00:33.240
你会发现了我有一些常用的功能

00:33.240 --> 00:37.240
比方说什么商传文件到云

00:37.240 --> 00:42.240
就是对象存处云服务上面去

00:42.240 --> 00:46.240
比方说有些功能通过IP地址来获取

00:46.240 --> 00:49.240
它能够所在地里位置

00:49.240 --> 00:51.240
像这些类似的功能

00:51.240 --> 00:54.240
可能不同的项目里边都有通用性

00:54.240 --> 00:56.240
那么为了避免重复的去编写

00:56.240 --> 00:58.240
我们可以把这些通用性的东西

00:58.240 --> 01:00.240
提取出来形成了一个插件

01:00.240 --> 01:02.240
那么我们首先说一下

01:02.240 --> 01:04.240
插件怎么来编写

01:04.240 --> 01:06.240
实际上插件就是一个文件牙

01:06.240 --> 01:07.240
就是一个工程文件牙

01:08.240 --> 01:10.240
那么这个文件牙里边可以放什么

01:10.240 --> 01:11.240
这个东西没有什么好说的

01:11.240 --> 01:13.240
你看这个App.js

01:14.240 --> 01:16.240
是不是启动的时候运行

01:16.240 --> 01:17.240
App文件牙

01:17.240 --> 01:19.240
所以存放我们的主要代码

01:19.240 --> 01:20.240
extend

01:20.240 --> 01:22.240
是不是可以扩展Agg的功能

01:22.240 --> 01:24.240
Service

01:24.240 --> 01:26.240
是不是业务功能

01:26.240 --> 01:27.240
Medware

01:28.240 --> 01:29.240
中间键

01:29.240 --> 01:31.240
那么这里边还是不是还有一些配置

01:31.240 --> 01:33.240
说明了啥

01:33.240 --> 01:35.240
说明了我们整个的插件

01:35.240 --> 01:37.240
它跟我们的Agg目录是不是差不多的

01:37.240 --> 01:40.240
几乎是完全一样的

01:40.240 --> 01:41.240
对不对

01:41.240 --> 01:42.240
当然还有特色目录

01:42.240 --> 01:44.240
主要是为了测试插件功能的

01:45.240 --> 01:46.240
那么这个目录

01:46.240 --> 01:47.240
就是一个目录

01:47.240 --> 01:49.240
这样的目录就是一个插件

01:49.240 --> 01:51.240
你看这个插件里边

01:51.240 --> 01:52.240
是不是这个目录就描述了

01:52.240 --> 01:53.240
这个插件可以做啥

01:53.240 --> 01:54.240
可以做啥呢

01:54.240 --> 01:56.240
可以扩展Helper里边的东西

01:56.240 --> 01:58.240
可以扩展这些地方的东西

01:58.240 --> 02:00.240
你看我们之前用的一些插件

02:00.240 --> 02:01.240
我们之前说Helper里边

02:01.240 --> 02:02.240
是不是只有两个函数

02:02.240 --> 02:04.240
一个是Path4

02:04.240 --> 02:06.240
一个是URL4

02:06.240 --> 02:08.240
而实际上Helper里边

02:08.240 --> 02:09.240
是不是还有别的东西

02:09.240 --> 02:10.240
那那些别的东西哪来的

02:10.240 --> 02:12.240
就是被那些插件扩展的

02:12.240 --> 02:14.240
包括了还可以扩展Medware

02:14.240 --> 02:15.240
等等这些东西

02:15.240 --> 02:17.240
所以都可以在插件里面完成

02:18.240 --> 02:20.240
因此插件可以

02:21.240 --> 02:22.240
就是这么一个文件夹

02:22.240 --> 02:24.240
那么这个文件夹放哪儿呢

02:24.240 --> 02:25.240
放哪儿都可以

02:25.240 --> 02:27.240
它可以独立成为一个工程

02:27.240 --> 02:28.240
甚至呢跟这个目录

02:28.240 --> 02:29.240
跟我们的工程目录

02:29.240 --> 02:32.240
不再同一个目录下面都可以

02:32.240 --> 02:33.240
独立成一个工程

02:33.240 --> 02:35.240
到时候你写好了之后

02:35.240 --> 02:37.240
你就发不到npm上面

02:37.240 --> 02:39.240
然后在这个工程里边直接

02:39.240 --> 02:41.240
通过npm安装就行了

02:41.240 --> 02:42.240
对吧

02:42.240 --> 02:44.240
或者也可以放到

02:44.240 --> 02:45.240
主工程的Lab

02:45.240 --> 02:47.240
Plocking中放到这里边

02:47.240 --> 02:49.240
就是放到这个文件夹里边

02:49.240 --> 02:50.240
App

02:51.240 --> 02:52.240
等Lab

02:52.240 --> 02:53.240
找个目录

02:53.240 --> 02:54.240
先接个目录

02:54.240 --> 02:55.240
Lab

02:55.240 --> 02:57.240
然后这里边放一个Plocking

02:58.240 --> 02:59.240
插件

02:59.240 --> 03:00.240
放到这个目录下面

03:00.240 --> 03:01.240
也可以

03:02.240 --> 03:03.240
那么比方说吧

03:03.240 --> 03:04.240
我就放一个插件吧

03:04.240 --> 03:05.240
在这里边

03:05.240 --> 03:06.240
我们来写个插件

03:06.240 --> 03:07.240
插件就是个文件夹

03:07.240 --> 03:09.240
我们就要写个文件夹

03:09.240 --> 03:10.240
随便写个吧

03:10.240 --> 03:12.240
下写一个MyPlocking

03:13.240 --> 03:15.240
就我的插件

03:16.240 --> 03:17.240
然后呢

03:17.240 --> 03:18.240
我们这个文件夹

03:18.240 --> 03:20.240
我们来进入文件夹

03:20.240 --> 03:23.700
初识化

03:23.700 --> 03:24.700
这里

03:24.700 --> 03:26.700
npm init

03:26.700 --> 03:27.700
这里

03:28.700 --> 03:30.700
npm init

03:31.700 --> 03:32.700
很杠外

03:32.700 --> 03:33.700
直接生成

03:33.700 --> 03:34.700
npm

03:34.700 --> 03:35.700
拍点节省

03:35.700 --> 03:36.700
然后我这个插件干嘛呢

03:36.700 --> 03:37.700
我这个插件不做别的事情

03:37.700 --> 03:39.700
这里边可以做的事情很多

03:39.700 --> 03:40.700
你看这里边

03:40.700 --> 03:41.700
这些事情都可以做

03:41.700 --> 03:42.700
扩展功能

03:42.700 --> 03:43.700
写稍微室

03:43.700 --> 03:45.700
写madeware都可以做

03:45.700 --> 03:46.700
我们这里就扩展一下

03:46.700 --> 03:48.700
Helper里面的方法吧

03:48.700 --> 03:49.700
就是写个App念夹

03:49.700 --> 03:50.700
然后呢

03:50.700 --> 03:51.700
这里写个extend

03:51.700 --> 03:52.700
扩展

03:52.700 --> 03:53.700
扩展什么呢

03:53.700 --> 03:55.700
扩展Helper里面的功能

03:55.700 --> 03:56.700
我们这里导出

03:56.700 --> 03:57.700
marge

03:57.700 --> 03:58.700
要export

03:58.700 --> 03:59.700
导出

03:59.700 --> 04:00.700
导出

04:00.700 --> 04:02.700
比方说我们扩展个什么功能呢

04:02.700 --> 04:04.700
扩展一个

04:05.700 --> 04:06.700
say hello

04:06.700 --> 04:07.700
随便写个

04:07.700 --> 04:08.700
随便写一个

04:08.700 --> 04:09.700
输出

04:09.700 --> 04:13.300
这里

04:13.300 --> 04:14.300
say hello

04:14.300 --> 04:17.440
好了

04:17.440 --> 04:18.440
就扩展这么个功能

04:18.440 --> 04:20.440
有这么个意思就行了

04:20.440 --> 04:21.440
是不是就写好了个插件

04:21.440 --> 04:22.440
对不对

04:22.440 --> 04:23.440
就完事了

04:23.440 --> 04:24.440
当然呢

04:24.440 --> 04:25.440
你可以把这个

04:25.440 --> 04:26.440
这个目录呢

04:26.440 --> 04:27.440
不放这儿

04:27.440 --> 04:28.440
放了一个独立的文件

04:28.440 --> 04:29.440
夹里边去

04:29.440 --> 04:30.440
跟这个工程无关

04:30.440 --> 04:31.440
然后写完之后呢

04:31.440 --> 04:33.440
把它发布到npm上面

04:33.440 --> 04:34.440
然后呢在这边下载安装

04:34.440 --> 04:35.440
那么具体

04:35.440 --> 04:37.440
具体我们平时用哪一种方式呢

04:37.440 --> 04:38.440
一般来说

04:38.440 --> 04:39.440
我们用这种方式啊

04:39.440 --> 04:40.440
就是说

04:40.440 --> 04:42.440
当你刚刚开始觉得

04:42.440 --> 04:43.440
我编写个项目的时候

04:43.440 --> 04:44.440
觉得有些通用功能呢

04:44.440 --> 04:46.440
我想把它提成一个插件

04:46.440 --> 04:47.440
于是呢

04:47.440 --> 04:49.440
你可以首先在这里编写

04:49.440 --> 04:50.440
在这里编写的话

04:50.440 --> 04:51.440
是直接可以用的

04:51.440 --> 04:52.440
这插件是直接可以用的

04:53.440 --> 04:54.440
然后呢

04:54.440 --> 04:55.440
编写完了过后测试好了

04:55.440 --> 04:56.440
各种没没没问题了

04:56.440 --> 04:57.440
ok

04:57.440 --> 04:58.440
你可以把它提取到

04:58.440 --> 04:59.440
一个单独的工程里边

04:59.440 --> 05:01.440
把它发布到npm上面去

05:01.440 --> 05:02.440
意思吧

05:02.440 --> 05:03.440
我们可以用这种

05:03.440 --> 05:04.440
渐进式的开发方式

05:04.440 --> 05:05.440
好

05:05.440 --> 05:06.440
我们的插件就差不多写好了

05:06.440 --> 05:07.440
好

05:07.440 --> 05:08.440
那么接着就是

05:08.440 --> 05:09.440
插件的注意

05:09.440 --> 05:10.440
试一下啊

05:10.440 --> 05:11.440
就是哪些东西呢

05:11.440 --> 05:12.440
你要注意一下

05:12.440 --> 05:13.440
一个是插件里边

05:13.440 --> 05:14.440
它是没有独立的rotor

05:14.440 --> 05:15.440
和

05:15.440 --> 05:16.440
controller

05:16.440 --> 05:17.440
也就是说没有什么的

05:17.440 --> 05:18.440
没有这个东西

05:18.440 --> 05:20.440
没有这个rotor

05:20.440 --> 05:21.440
也没有什么

05:21.440 --> 05:23.440
rotor的东西

05:23.440 --> 05:24.440
为什么没有呢

05:24.440 --> 05:25.440
因为这个东西

05:25.440 --> 05:26.440
是不是跟业务

05:26.440 --> 05:27.440
是紧密相关的

05:27.440 --> 05:28.440
对吧

05:28.440 --> 05:29.440
rotor

05:29.440 --> 05:30.440
和这个controller

05:30.440 --> 05:31.440
是不是跟mvc

05:31.440 --> 05:32.440
对吧

05:32.440 --> 05:33.440
mvc里边的东西

05:33.440 --> 05:34.440
是跟业务

05:34.440 --> 05:35.440
密切相关的

05:35.440 --> 05:36.440
有一个请求过来了

05:36.440 --> 05:37.440
然后该怎么去处理

05:37.440 --> 05:39.440
我该处理哪些核心业务

05:39.440 --> 05:41.440
它是处理业务的

05:41.440 --> 05:42.440
所以和这一块的东西呢

05:42.440 --> 05:44.440
插件里面是不能编写的

05:44.440 --> 05:45.440
那如果说

05:45.440 --> 05:46.440
你想做一些通用的

05:46.440 --> 05:47.440
请求处理怎么办呢

05:47.440 --> 05:48.440
你写bidoyer

05:48.440 --> 05:49.440
写bidoyer是可以的

05:49.440 --> 05:50.440
当然

05:50.440 --> 05:52.440
插件里面也支持配置

05:52.440 --> 05:53.440
在配置里边

05:53.440 --> 05:56.440
是不是可以写一些传言让配置

05:56.440 --> 05:57.440
好

05:57.440 --> 05:59.440
第二个是插件没有plugin.js

05:59.440 --> 06:00.440
为什么呢

06:00.440 --> 06:02.440
它为什么有这个处理呢

06:02.440 --> 06:03.440
其实我们讲这些东西

06:03.440 --> 06:04.440
都是告诉大家

06:04.440 --> 06:05.440
怎么去设计一个

06:05.440 --> 06:07.440
优雅的一个系统

06:07.440 --> 06:08.440
为什么它插件里面

06:08.440 --> 06:10.440
不能包含plugin.js呢

06:10.440 --> 06:13.440
你想一想plugin.js是干嘛的

06:13.440 --> 06:15.440
是干嘛的呢

06:15.440 --> 06:16.440
是不是在启用别

06:16.440 --> 06:17.440
启用一些

06:17.440 --> 06:18.440
我们的工程中

06:18.440 --> 06:20.440
启不启用一些插件对吧

06:20.440 --> 06:22.440
那么这个权力

06:22.440 --> 06:26.440
应该是最终的工程来决定的

06:26.440 --> 06:27.440
这个工程决定

06:27.440 --> 06:29.440
要不要启用这些插件

06:29.440 --> 06:30.440
并不是由

06:30.440 --> 06:33.440
比如说你使用一个插件

06:33.440 --> 06:35.440
那个插件它把redis给你进用了

06:35.440 --> 06:37.440
但是你工程里面又想用redis

06:37.440 --> 06:38.440
这就矛盾了对不对

06:38.440 --> 06:39.440
说这些权力

06:39.440 --> 06:41.440
要交给最终的工程去完成

06:41.440 --> 06:42.440
你插件里面

06:42.440 --> 06:43.440
是没有权力

06:43.440 --> 06:45.440
对其他插件执手画脚的

06:45.440 --> 06:47.440
你管好你自己的事情就行了

06:47.440 --> 06:48.440
你自己写好插件过后

06:48.440 --> 06:49.440
将来你的工程里面

06:49.440 --> 06:50.440
要不要用这个插件

06:50.440 --> 06:51.440
要不要启用它

06:51.440 --> 06:53.440
由这个工程来决定

06:53.440 --> 06:54.440
包括其他插件

06:54.440 --> 06:55.440
比方说你插件里面

06:55.440 --> 06:56.440
一代的其他插件

06:56.440 --> 06:57.440
其他插件要不要启用

06:57.440 --> 06:58.440
由这个工程决定

06:58.440 --> 07:00.440
跟你是没有关系的

07:00.440 --> 07:01.440
所以说你插件了

07:01.440 --> 07:02.440
一定要保持自己的独立性

07:02.440 --> 07:05.440
自己知道自己的位置

07:05.440 --> 07:06.440
还有一个就是插件

07:06.440 --> 07:07.440
你需要在拍点节省中

07:07.440 --> 07:08.440
配置一个节点

07:08.440 --> 07:10.440
叫agplugin

07:10.440 --> 07:12.440
在这里边去配置一个节点

07:12.440 --> 07:16.440
叫做agplugin

07:16.440 --> 07:19.440
这里边要配置一些插件的信息

07:19.440 --> 07:20.440
配置什么信息呢

07:20.440 --> 07:21.440
首先是name

07:21.440 --> 07:24.440
name表示的是插件的名字

07:24.440 --> 07:27.440
表示的是插件的名字

07:27.440 --> 07:28.440
那么这个名字

07:28.440 --> 07:30.440
它的含义跟这个东西不一样

07:30.440 --> 07:31.440
这个玩意是npm的名字

07:31.440 --> 07:33.440
那么这个玩意是插件的名字

07:33.440 --> 07:35.440
那么这个名字会影响什么呢

07:35.440 --> 07:36.440
会影响我们到时候

07:36.440 --> 07:37.440
使用这个插件的时候

07:37.440 --> 07:38.440
你看一下plugin里边

07:38.440 --> 07:39.440
是不是配置个插件的名字

07:39.440 --> 07:40.440
这就是插件的名字

07:40.440 --> 07:42.440
没了意思吧

07:42.440 --> 07:44.440
它跟包的名字是不一样的

07:44.440 --> 07:45.440
这个是包的名字

07:45.440 --> 07:47.440
这是插件的名字

07:47.440 --> 07:48.440
所以说你要把名字告诉它

07:48.440 --> 07:50.440
到时候它在工程里面

07:50.440 --> 07:51.440
会启用金融的插件

07:51.440 --> 07:53.440
同时在config里边

07:53.440 --> 07:55.440
也会启用金融的插件

07:55.440 --> 07:56.440
对不对

07:56.440 --> 07:57.440
就这么个意思

07:57.440 --> 07:59.440
名字要告诉它

07:59.440 --> 08:00.440
名字比方说

08:00.440 --> 08:02.440
我们就给它写个myplugin

08:02.440 --> 08:03.440
我们就用托风

08:03.440 --> 08:05.440
小托风命名吧

08:05.440 --> 08:06.440
lame

08:06.440 --> 08:08.440
然后这个dependency也是

08:08.440 --> 08:09.440
这个什么意思呢

08:09.440 --> 08:10.440
就这个插件

08:10.440 --> 08:12.440
它要不要依赖别的插件

08:12.440 --> 08:13.440
这会影响什么

08:13.440 --> 08:15.440
如果说它还要依赖别的插件的话

08:15.440 --> 08:17.440
你在这里依次写上别的插件的名字

08:17.440 --> 08:19.440
只需要写名字就行了

08:19.440 --> 08:21.440
那么你这里不需要安装别的插件

08:21.440 --> 08:23.440
你的插件里面不要去安装别的插件

08:23.440 --> 08:24.440
为什么呢

08:24.440 --> 08:26.440
你只需要把依赖告诉它就行了

08:26.440 --> 08:27.440
因为到时候

08:27.440 --> 08:28.440
它这边

08:28.440 --> 08:30.440
它这边就是比较那么工程里面

08:30.440 --> 08:31.440
去使用的时候

08:31.440 --> 08:32.440
它要使用这个插件

08:32.440 --> 08:34.440
用npm安装好了之后

08:34.440 --> 08:35.440
它会使用这个插件

08:35.440 --> 08:36.440
那么它这个插件

08:36.440 --> 08:37.440
它要依赖别的

08:37.440 --> 08:38.440
让它让这个工程来决定

08:38.440 --> 08:39.440
去安装

08:39.440 --> 08:40.440
没了意思吧

08:40.440 --> 08:42.440
然后还有一个意思

08:42.440 --> 08:43.440
说

08:43.440 --> 08:44.440
它你写了这个

08:44.440 --> 08:45.440
写了这个配置过后

08:45.440 --> 08:46.440
到时候

08:46.440 --> 08:48.440
我们一看插件里面

08:48.440 --> 08:50.440
它也可以写这个抗费的文件

08:50.440 --> 08:51.440
所以可以写这些文件

08:51.440 --> 08:52.440
也可以写app介绍文件

08:52.440 --> 08:53.440
对吧

08:53.440 --> 08:54.440
那么你如果说

08:54.440 --> 08:55.440
这个插件依赖了别的插件

08:55.440 --> 08:57.440
别的插件是不是也有这些文件

08:57.440 --> 08:58.440
那么它就涉及到一个

08:58.440 --> 08:59.440
加载顺序的问题

08:59.440 --> 09:01.440
它一定是被依赖的先加载

09:01.440 --> 09:02.440
然后依赖

09:02.440 --> 09:04.440
它本身的后加载

09:04.440 --> 09:05.440
所以说你要告诉它的依赖关系

09:05.440 --> 09:07.440
我这里没有什么依赖关系

09:07.440 --> 09:08.440
还有一个依赖关系

09:08.440 --> 09:10.440
叫Optional Dependency

09:10.440 --> 09:11.440
这个东西是什么

09:11.440 --> 09:12.440
可选依赖

09:12.440 --> 09:14.440
有的时候有些依赖

09:14.440 --> 09:15.440
它有可能用

09:15.440 --> 09:16.440
有可能不用

09:16.440 --> 09:17.440
它叫可选依赖

09:17.440 --> 09:18.440
那么这个东西

09:18.440 --> 09:19.440
我们了解一下就行了

09:19.440 --> 09:20.440
下面是M5

09:20.440 --> 09:22.440
这个东西一般不用去配置

09:22.440 --> 09:23.440
它表示什么意思呢

09:23.440 --> 09:24.440
表示的是这个插件

09:24.440 --> 09:27.440
它需要在什么环境下面

09:27.440 --> 09:29.440
才能够被开启

09:29.440 --> 09:31.440
其他环境是不能被开启的

09:31.440 --> 09:32.440
就这么个意思

09:32.440 --> 09:33.440
这个东西

09:33.440 --> 09:34.440
我们一般来说

09:34.440 --> 09:35.440
根本没有什么关系

09:35.440 --> 09:36.440
好

09:36.440 --> 09:37.440
我们就写好了

09:37.440 --> 09:38.440
这就写好了插件

09:38.440 --> 09:39.440
如果说你插件

09:39.440 --> 09:40.440
是不是放到这个目录下面的

09:40.440 --> 09:42.440
你直接可以使用了

09:42.440 --> 09:43.440
直接可以使用了

09:43.440 --> 09:44.440
那怎么来使用了

09:44.440 --> 09:45.440
你看马上就可以使用

09:45.440 --> 09:47.440
Export

09:47.440 --> 09:50.440
MyPlugin

09:50.440 --> 09:52.440
你可以直接把它配置为粗

09:52.440 --> 09:54.440
还是用这种方式吧

09:54.440 --> 09:56.440
Enable

09:56.440 --> 09:57.440
Package

09:57.440 --> 09:58.440
不需要Package

09:58.440 --> 10:00.440
它在目录里面就有

10:00.440 --> 10:02.440
好了以为这个插件开启了过后

10:02.440 --> 10:03.440
我们来看一下App里面

10:03.440 --> 10:05.440
能不能去得到

10:05.440 --> 10:06.440
表示在这里吧

10:06.440 --> 10:08.440
我们能不能得到就是

10:09.440 --> 10:11.440
Helper里面的东西

10:11.440 --> 10:12.440
Context

10:12.440 --> 10:13.440
Helper

10:13.440 --> 10:14.440
然后

10:15.440 --> 10:16.440
刚写了什么寒书

10:16.440 --> 10:18.440
Say Hello

10:18.440 --> 10:20.440
就这样的寒书就行了

10:20.440 --> 10:22.440
它里面本身就打印

10:22.440 --> 10:23.440
保存

10:23.440 --> 10:28.160
现在我们去启动一下

10:28.160 --> 10:29.160
NPM

10:29.160 --> 10:30.160
然后

10:31.160 --> 10:35.370
RawDev

10:35.370 --> 10:36.370
抱错了

10:36.370 --> 10:37.370
等一下

10:38.370 --> 10:39.370
等一下我停止了

10:39.370 --> 10:41.370
我看一下抱着什么错

10:41.370 --> 10:43.370
NPMRawDev

10:43.370 --> 10:45.370
DevAge

10:45.370 --> 10:47.370
直接启动Age

10:47.370 --> 10:51.220
抱什么错

10:51.220 --> 10:52.220
还有什么呢

10:52.220 --> 10:54.220
无法找到

10:55.220 --> 10:57.220
Plugin.Lin

10:58.220 --> 11:01.220
它说是找不到这个插件

11:01.220 --> 11:03.220
我看一下这个插件的

11:04.220 --> 11:05.220
对对对

11:05.220 --> 11:06.220
这里还忘了写件事

11:06.220 --> 11:08.220
还要配置一下这个插件的路径

11:08.220 --> 11:09.220
因为它这个插件

11:09.220 --> 11:10.220
并不是打成一个NPM的包

11:10.220 --> 11:12.220
所以说我们要直接配置路径

11:12.220 --> 11:13.220
配置这个插件的路径

11:13.220 --> 11:14.220
来吧我们配置一下吧

11:14.220 --> 11:16.220
我们再导入PASS

11:16.220 --> 11:18.220
PASS

11:18.220 --> 11:20.220
直接配置这个路径

11:20.220 --> 11:22.220
PASS Result

11:22.220 --> 11:24.220
当前目录

11:24.220 --> 11:25.220
然后呢

11:25.220 --> 11:27.220
返回上级目录

11:27.220 --> 11:29.220
然后LabPlugin

11:29.220 --> 11:31.220
然后是MapPlugin

11:31.220 --> 11:33.220
OK把配置一下就行了

11:33.220 --> 11:34.220
好保存

11:34.220 --> 11:35.220
接下来我们再来看

11:35.220 --> 11:42.230
NPMRawDev

11:42.230 --> 11:44.230
Dev

11:44.230 --> 11:46.230
Dev

11:46.230 --> 11:48.230
好现在没问题了

11:48.230 --> 11:51.610
接下来我们访问一下

11:51.610 --> 11:53.610
然后看一下服务器的答应

11:58.030 --> 12:00.030
服务器的答应呢

12:00.030 --> 12:01.030
访问首页

12:01.030 --> 12:04.030
我访问那个7070

12:04.030 --> 12:05.030
这个首页

12:05.030 --> 12:06.030
好看一下

12:06.030 --> 12:08.030
shallow出出来了

12:08.030 --> 12:09.030
对不对

12:09.030 --> 12:11.030
这就是这个插件的使用

12:11.030 --> 12:13.030
当然你也可以

12:13.030 --> 12:15.030
其实你也可以把它变成NPM包的形式

12:15.030 --> 12:17.030
哪怕你写到这也可以变成NPM包的形式

12:17.030 --> 12:18.030
比方说怎么写呢

12:18.030 --> 12:20.030
比方说我们这里的包的名字叫什么呢

12:20.030 --> 12:22.030
包的名字叫做Agg

12:22.030 --> 12:23.030
插件的名字

12:23.030 --> 12:24.030
插件的名字啊

12:24.030 --> 12:25.030
包的名字就是插件里边

12:25.030 --> 12:26.030
包的名字呢

12:26.030 --> 12:28.030
一般是以Agg开头的

12:28.030 --> 12:29.030
这是个命名规范

12:29.030 --> 12:30.030
Agg

12:30.030 --> 12:31.030
MapPlugin

12:31.030 --> 12:32.030
对吧比方说啊

12:32.030 --> 12:33.030
我们这样子

12:33.030 --> 12:34.030
我们给它写账

12:34.030 --> 12:35.030
这个东西

12:35.030 --> 12:36.030
Package

12:36.030 --> 12:38.030
但是我们这里没有使用NPM安装对吧

12:38.030 --> 12:40.030
我们可以使用这种方式的安装

12:40.030 --> 12:42.030
就是NPM

12:42.030 --> 12:43.030
NPM这个命令呢

12:43.030 --> 12:44.030
它可以安装

12:44.030 --> 12:47.030
可以安装远程仓库里边的安装包

12:47.030 --> 12:49.030
它也可以安装本地的安装包

12:49.030 --> 12:51.030
你只要给它一个文件讲路径就行了

12:51.030 --> 12:53.030
那么这里呢我们使用相对路径

12:53.030 --> 12:55.030
当前目录下面的什么NAP

12:55.030 --> 12:57.030
下面的Plugin

12:57.030 --> 12:59.030
就这个目录的路径

12:59.030 --> 13:00.030
然后呢

13:00.030 --> 13:02.030
MapPlugin

13:02.030 --> 13:03.030
那么它这样子

13:03.030 --> 13:05.030
就会把这个目录的东西安装到

13:05.030 --> 13:07.030
LoadMarches里面

13:07.030 --> 13:08.030
好安装

13:08.030 --> 13:09.030
很快的啊

13:09.030 --> 13:10.030
因为是本地的嘛

13:10.030 --> 13:11.030
很快的

13:11.030 --> 13:13.030
好就安装完成了

13:13.030 --> 13:14.030
安装完成了过后了

13:14.030 --> 13:15.030
我们这里就直接可以使用了

13:15.030 --> 13:16.030
运行一下

13:16.030 --> 13:20.620
ROUND

13:20.620 --> 13:21.620
映出来了

13:21.620 --> 13:23.620
然后来我们这里访问一下刷新

13:23.620 --> 13:24.620
是不是得到之后了

13:24.620 --> 13:25.620
就这么简单

13:25.620 --> 13:28.620
这就是插件的开发

13:28.620 --> 13:29.620
其他的还有啥呢

13:29.620 --> 13:30.620
没啥了

13:30.620 --> 13:31.620
就是插件

