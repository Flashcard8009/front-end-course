WEBVTT

00:00.430 --> 00:03.830
好 咱们这麽可能来学习这个ag.js

00:04.230 --> 00:05.730
俗称 学个大

00:06.230 --> 00:09.030
这个ag.js到底是什麽玩意呢

00:09.030 --> 00:12.030
它实际上也是一个web服务器框架

00:12.030 --> 00:14.030
用来搭建web服务器的

00:14.230 --> 00:18.430
听到现在的同学们可能有些同学的内心是崩溃的

00:18.430 --> 00:20.430
你看你学了express

00:20.430 --> 00:22.030
学了koa对吧

00:22.030 --> 00:24.630
express本来就是一个web服务器框架

00:24.630 --> 00:27.430
然后呢koa又是一个web服务器框架

00:27.630 --> 00:29.430
这麽用来的一个ag呢

00:29.930 --> 00:32.430
其实呢还不止ag 还有一些

00:32.430 --> 00:34.430
没有必要学的太多了

00:35.430 --> 00:37.430
实际上呢是这样子

00:37.430 --> 00:39.430
你们学的这麽express也好

00:39.430 --> 00:41.430
koa也好

00:41.430 --> 00:43.430
还包括我们这门课的ag也好

00:43.430 --> 00:45.430
它们都属于上层应用

00:45.430 --> 00:47.430
就是

00:47.430 --> 00:52.430
搭建在底层漏的js基础上的上层应用

00:52.430 --> 00:54.430
说最核心的是什麽呢 是漏的js

00:55.430 --> 01:00.430
如果说你能够使用漏的js来写一个web服务器

01:00.430 --> 01:02.430
如果说你具有这样的能力的话

01:02.430 --> 01:04.430
那你学习express也好

01:04.430 --> 01:06.430
koa也好ag都不会太难

01:06.430 --> 01:09.430
而且呢你只要学习了其中一个

01:09.430 --> 01:11.430
其他的东西呢都类似的差不多

01:11.430 --> 01:13.430
所以说学习上层应用啊

01:13.430 --> 01:15.430
上层应用e4呢api比较多

01:15.430 --> 01:17.430
规范比较多

01:17.430 --> 01:19.430
规则也比较多

01:19.430 --> 01:21.430
另外呢他变化了也比较快

01:21.430 --> 01:24.430
而且呢同类的产品呢也比较多

01:24.430 --> 01:27.430
所以说面对这些上层应用的东西呢

01:27.430 --> 01:29.430
你不用去使心用备啊

01:29.430 --> 01:31.430
就好必说我非要

01:31.430 --> 01:33.430
一定要把它里面的每一个api

01:33.430 --> 01:35.430
它每一个规则都全部详细的高度

01:35.430 --> 01:37.430
你不能用这种方式来学

01:37.430 --> 01:39.430
那你应该怎麽来学呢

01:39.430 --> 01:40.430
应该关注它的原理

01:40.430 --> 01:42.430
它解决了什麽样的问题

01:42.430 --> 01:43.430
它是怎麽去解决的

01:43.430 --> 01:45.430
你把这个核心的东西搞清楚了

01:45.430 --> 01:48.430
过后呢你这些api的具体使用啊

01:48.430 --> 01:51.430
就没有必要太过在意了

01:51.430 --> 01:53.430
咱们在课程里面快速的浏览一下

01:53.430 --> 01:55.430
然后呢自己写一些小的应用

01:55.430 --> 01:56.430
小的案例就可以了

01:56.430 --> 01:58.430
将来忘了没关系

01:58.430 --> 02:00.430
你可以去查阅文档也可以搞定了

02:00.430 --> 02:02.430
对吧这是对付这个上层应用

02:02.430 --> 02:03.430
应该有的态度

02:03.430 --> 02:06.430
就是说用我们伟大的教员说的话

02:06.430 --> 02:10.430
就是战略上表示他

02:10.430 --> 02:12.430
战术上重视他

02:12.430 --> 02:14.430
所以要战略上表示他呢

02:14.430 --> 02:16.430
比方说我吃饭吃一碗饭

02:16.430 --> 02:18.430
我知道我战略上呢

02:18.430 --> 02:20.430
他一定能够吃完的

02:20.430 --> 02:21.430
不管结

02:21.430 --> 02:22.430
不管过程怎麽样

02:22.430 --> 02:23.430
我一定能够吃完他

02:23.430 --> 02:25.430
我们要有信心

02:25.430 --> 02:27.430
什么叫战术上重视他呢

02:27.430 --> 02:29.430
就是吃的过程呢

02:29.430 --> 02:30.430
我得一口一口吃

02:30.430 --> 02:31.430
慢慢来

02:31.430 --> 02:33.430
对我们学习其实也是一样

02:33.430 --> 02:34.430
一个介事

02:34.430 --> 02:36.430
我们这一刻呢就了解他

02:36.430 --> 02:38.430
到底要解决什麽样的问题

02:38.430 --> 02:40.430
以及呢他是怎麽去解决的

02:40.430 --> 02:42.430
有一个大致的概念

02:42.430 --> 02:44.430
有了这麽一个印象过后呢

02:44.430 --> 02:46.430
他的基本思路就知道了

02:46.430 --> 02:48.430
那麽我们就从战略上去分析他

02:48.430 --> 02:49.430
战了个很高的高度

02:49.430 --> 02:50.430
叫他去看他的话

02:50.430 --> 02:52.430
他其实很简单

02:52.430 --> 02:54.430
那麽什麽叫做战术上重视他呢

02:54.430 --> 02:56.430
那麽后边的课程就从

02:56.430 --> 02:57.430
除了这几课之外

02:57.430 --> 02:58.430
后边第二节第三节课

02:58.430 --> 03:01.430
那麽我们讲具体的知识的时候呢

03:01.430 --> 03:03.430
你要知道他里边东西还是蛮多的

03:03.430 --> 03:05.430
但是呢这些东西呢

03:05.430 --> 03:07.430
都是为这个战略服务的

03:07.430 --> 03:08.430
都是为他这个目的

03:08.430 --> 03:10.430
为了他这个思路服务的

03:10.430 --> 03:12.430
我们之后在公司里边

03:12.430 --> 03:13.430
如果说用到了X

03:13.430 --> 03:15.430
我们可以再去查阅这个视频

03:15.430 --> 03:16.430
查阅这个文档

03:16.430 --> 03:18.430
那就会轻松的解决了

03:18.430 --> 03:20.430
应该有这样的学习态度

03:20.430 --> 03:21.430
不然的话

03:21.430 --> 03:22.430
浅多东西很多

03:22.430 --> 03:23.430
而且特别是上层应用

03:23.430 --> 03:24.430
层出不穷

03:24.430 --> 03:26.430
不然的话你学不动的

03:26.430 --> 03:27.430
一定要站在

03:27.430 --> 03:28.430
一个很高的角度去看他

03:28.430 --> 03:30.430
他其实很简单的

03:30.430 --> 03:32.430
咱们来说一下Agg.js

03:32.430 --> 03:33.430
首先是概述

03:33.430 --> 03:34.430
就是他到底要解决

03:34.430 --> 03:36.430
什麽样的问题

03:36.430 --> 03:38.430
如果说没有这个Agg的话

03:38.430 --> 03:40.430
那麽我们回顾一下

03:40.430 --> 03:42.430
之前来开发一个服务器的话

03:42.430 --> 03:44.430
你可以想象到服务器里边

03:44.430 --> 03:46.430
可能要用到很多很多的东西

03:46.430 --> 03:48.430
比方说Db 数据库

03:48.430 --> 03:50.430
数据库是一个单独的技术

03:50.430 --> 03:52.430
然后在load.js里边

03:52.430 --> 03:53.430
通过一个数据库

03:53.430 --> 03:55.430
driver也就是驱动程序

03:55.430 --> 03:56.430
来去使用它

03:56.430 --> 03:58.430
当然数据库的底层用的是什麽

03:58.430 --> 03:59.430
还是load对吧

03:59.430 --> 04:01.430
因为我们学校是load的服务器

04:01.430 --> 04:02.430
还有一些第三方库

04:02.430 --> 04:04.430
比方说我们要用到一些工具

04:04.430 --> 04:06.430
什麽moments

04:06.430 --> 04:08.430
什麽那些验证框架

04:08.430 --> 04:09.430
等等等等

04:09.430 --> 04:10.430
一些第三方库

04:11.430 --> 04:12.430
这些东西

04:12.430 --> 04:14.430
而且我们还可能会遵循一些

04:14.430 --> 04:15.430
开发规范

04:15.430 --> 04:17.430
比方说什麽三层架构

04:17.430 --> 04:21.430
那些文件的名字

04:21.430 --> 04:22.430
文件雅的名字

04:22.430 --> 04:24.430
这些都属于开发规范

04:24.430 --> 04:26.430
每个公司可能也不太一样

04:26.430 --> 04:27.430
以及代码的出席规范

04:27.430 --> 04:28.430
怎麽去导出

04:28.430 --> 04:29.430
等等

04:29.430 --> 04:30.430
我们可能会用到一些

04:30.430 --> 04:31.430
开发规范

04:31.430 --> 04:33.430
而且我们当然最核心的是

04:33.430 --> 04:36.430
要用到ka或者是express

04:36.430 --> 04:38.430
来搭建一个微博服务器

04:38.430 --> 04:40.430
那麽在ka无论是ka也好

04:40.430 --> 04:41.430
还是express也好

04:41.430 --> 04:43.430
它里边是不是都会用到中间键

04:43.430 --> 04:45.430
那麽要用到哪些中间键

04:45.430 --> 04:47.430
是不是我们要自行去操作

04:47.430 --> 04:48.430
对吧

04:48.430 --> 04:49.430
有一些常用的中间键

04:49.430 --> 04:51.430
搭建工程的时候

04:51.430 --> 04:53.430
可能就会把它夹住进来

04:53.430 --> 04:54.430
总之呢

04:54.430 --> 04:55.430
我们如果说

04:55.430 --> 04:56.430
没有一个工具

04:56.430 --> 04:58.430
或者是有一个框架

04:58.430 --> 04:59.430
给我们规范的话

04:59.430 --> 05:00.430
那麽我们基本上

05:00.430 --> 05:01.430
就是零散的技术

05:01.430 --> 05:03.430
要把它合并造一起

05:03.430 --> 05:04.430
一看ka跟这个

05:04.430 --> 05:05.430
数据库

05:05.430 --> 05:06.430
跟这些第三方库

05:06.430 --> 05:07.430
跟开发规范有什麽关系呢

05:07.430 --> 05:08.430
没有任何关系

05:08.430 --> 05:09.430
对吧

05:09.430 --> 05:10.430
他们都是相互独立的

05:10.430 --> 05:11.430
我们可以灵活的

05:11.430 --> 05:13.430
把它组合在一起

05:13.430 --> 05:14.430
那麽如果说

05:14.430 --> 05:16.430
你用这种模式做开发的话

05:16.430 --> 05:17.430
当然你可以练习到很多东西

05:17.430 --> 05:19.430
也可以学习到很多东西

05:19.430 --> 05:20.430
但是呢

05:20.430 --> 05:23.430
你用这种方式开发效率太低了

05:23.430 --> 05:24.430
一是效率太低

05:24.430 --> 05:26.430
二是呢你整个开发过程呢

05:26.430 --> 05:28.430
你会发现一个开发者一个压

05:28.430 --> 05:30.430
如果说你到公司里边去

05:30.430 --> 05:31.430
跟同事之间

05:31.430 --> 05:33.430
都用那个

05:33.430 --> 05:34.430
都搭建微博服务器

05:34.430 --> 05:35.430
你会发现

05:35.430 --> 05:36.430
做同样的功能

05:36.430 --> 05:37.430
你们写出来的代码是

05:37.430 --> 05:38.430
完全不一样的

05:38.430 --> 05:39.430
那麽这就造成了

05:39.430 --> 05:41.430
在实际的工作中

05:41.430 --> 05:42.430
难以沟通

05:42.430 --> 05:43.430
所以造成这些问题

05:43.430 --> 05:45.430
他没有一个统一的规范

05:45.430 --> 05:46.430
到底用什麽样的库

05:46.430 --> 05:48.430
用ka还是用express

05:48.430 --> 05:49.430
怎麽去使用中间键

05:49.430 --> 05:50.430
用哪些中间键

05:50.430 --> 05:52.430
他没有一个统一的规范

05:52.430 --> 05:53.430
而且呢

05:53.430 --> 05:55.430
这样子做是不是很繁琐呀

05:55.430 --> 05:56.430
特别特别繁琐

05:56.430 --> 05:57.430
我们要东倒西倒

05:57.430 --> 05:59.430
一会导出这个

05:59.430 --> 06:00.430
一会导入这个

06:00.430 --> 06:01.430
到处要去导入导出

06:01.430 --> 06:03.430
也非常的不方便

06:03.430 --> 06:04.430
所以说

06:04.430 --> 06:06.430
他是用来解决这个问题的

06:06.430 --> 06:07.430
因此我们看

06:07.430 --> 06:09.430
express是怎麽解决的

06:09.430 --> 06:10.430
express的解决方式呢

06:10.430 --> 06:12.430
就是底层是note

06:12.430 --> 06:13.430
还是不便

06:13.430 --> 06:14.430
还是基于note的

06:14.430 --> 06:15.430
然后note上面

06:15.430 --> 06:16.430
不是我们学过了ka吗

06:16.430 --> 06:17.430
对不对

06:17.430 --> 06:18.430
说是这门课里的学习ka

06:18.430 --> 06:19.430
尽管ka呢

06:19.430 --> 06:21.430
是一个选修课程

06:21.430 --> 06:23.430
ka是搭建在note基础上的

06:23.430 --> 06:24.430
然后在ka上面呢

06:24.430 --> 06:26.430
note他制定了一套规范

06:26.430 --> 06:28.430
express他制定了一套规范

06:28.430 --> 06:31.430
就是我应该用哪些文件夹

06:31.430 --> 06:32.430
那麽文件夹里面

06:32.430 --> 06:33.430
每个文件夹表示什麽意思

06:33.430 --> 06:35.430
文件夹里面有哪些文件名

06:35.430 --> 06:37.430
它里面有一些规范

06:37.430 --> 06:38.430
基于这套规范呢

06:38.430 --> 06:40.430
他在对ka进行封装

06:40.430 --> 06:42.430
封装出了一个express

06:42.430 --> 06:46.430
而且是不仅仅是针对ka

06:46.430 --> 06:48.430
而且他还能够适用于

06:48.430 --> 06:49.430
什麽三层架构啊

06:49.430 --> 06:51.430
还适用于数据库啊对吧

06:51.430 --> 06:52.430
只不过他原生了

06:52.430 --> 06:54.430
是不带数据库的

06:54.430 --> 06:55.430
但是呢

06:55.430 --> 06:57.430
他是能够扩展数据库的

06:57.430 --> 06:59.430
就是说他在一套规范上面

06:59.430 --> 07:01.430
一套规范加上ka就是

07:01.430 --> 07:02.430
形成了egre

07:02.430 --> 07:03.430
那么egre里面呢

07:03.430 --> 07:05.430
他为了更加方便扩展

07:05.430 --> 07:07.430
他给你做了很多的egre插件

07:07.430 --> 07:08.430
有些是社区做的

07:08.430 --> 07:10.430
有些呢是他自己做的

07:10.430 --> 07:11.430
做了很多插件

07:11.430 --> 07:13.430
如果说你要扩展egre的功能的话

07:13.430 --> 07:15.430
你只需要安装他的插件就行了

07:15.430 --> 07:16.430
那麽我们开发者呢

07:16.430 --> 07:17.430
只需要去使用egre

07:17.430 --> 07:19.430
不需要去关注这些

07:19.430 --> 07:21.430
kaanload的这些东西

07:21.430 --> 07:23.430
底层的技术细节就不用关心了

07:23.430 --> 07:25.430
他一个是一个上层框架

07:25.430 --> 07:26.430
原来的意思吧

07:26.430 --> 07:28.430
ka给你封装了一下

07:28.430 --> 07:29.430
让我们用起来呢

07:29.430 --> 07:30.430
更加好用的

07:30.430 --> 07:32.430
而且呢他把我们常见的一些

07:32.430 --> 07:33.430
服务器的应用场景

07:33.430 --> 07:34.430
都给你集成在一起了

07:34.430 --> 07:36.430
你可以非常方便的

07:36.430 --> 07:38.430
来实现各种功能

07:38.430 --> 07:40.430
如果说本身的功能不够用的话

07:40.430 --> 07:41.430
就安装插件

07:41.430 --> 07:42.430
所以说我们

07:42.430 --> 07:44.430
如果说我们使用egre的话

07:44.430 --> 07:45.430
我们的开发的感

07:45.430 --> 07:46.430
体验是什麽的

07:46.430 --> 07:47.430
开发的体验就是

07:47.430 --> 07:49.430
我就用egre就行了

07:49.430 --> 07:50.430
如果说功能不足

07:50.430 --> 07:51.430
我就安装egre插件

07:51.430 --> 07:53.430
来补充他的功能

07:53.430 --> 07:54.430
其他的东西我一概不管

07:54.430 --> 07:56.430
按照egre给我们的开发

07:56.430 --> 07:58.430
流程去开发就完事了

07:58.430 --> 07:59.430
所以说这就是egre的作用

07:59.430 --> 08:01.430
那麽可以看到了egre的特点

08:01.430 --> 08:03.430
它就是整合了后端技术

08:03.430 --> 08:04.430
也常见的后端技术

08:04.430 --> 08:05.430
它给你整合了

08:05.430 --> 08:07.430
提供一战士开发的体验

08:07.430 --> 08:08.430
什麽要一战士开发的体验

08:08.430 --> 08:09.430
我不用去管别的了

08:09.430 --> 08:10.430
我就用egre

08:10.430 --> 08:11.430
从头用到尾

08:11.430 --> 08:12.430
那麽我就可以解决

08:12.430 --> 08:15.430
我的服务器99%的问题

08:15.430 --> 08:17.430
而且他制定了一套规范

08:17.430 --> 08:18.430
就统一了

08:18.430 --> 08:20.430
不同的开发者之间的

08:20.430 --> 08:22.430
一些沟通的问题

08:22.430 --> 08:24.430
张珊和李氏都用egre开发

08:24.430 --> 08:26.430
那开发出来的代码都差不多

08:26.430 --> 08:27.430
你看现在

08:27.430 --> 08:29.430
传统的后端服务器

08:29.430 --> 08:30.430
语言像夹吧

08:30.430 --> 08:32.430
你看不同的开发者

08:32.430 --> 08:34.430
开发出来的代码都差不多

08:34.430 --> 08:37.430
如果说写应用代码的话

08:37.430 --> 08:38.430
都差不多

08:38.430 --> 08:40.430
就是因为他有统一的开发规范

08:40.430 --> 08:42.430
而且他提供了各种插件

08:42.430 --> 08:43.430
如果说功能不够用的话

08:43.430 --> 08:45.430
可以通过插件来进行扩展

08:45.430 --> 08:49.740
另外egre还具有以下特点

08:49.740 --> 08:52.740
一个就是约定由于配置

08:52.740 --> 08:54.740
configuration over configuration

08:54.740 --> 08:55.740
什麽意思呢

08:55.740 --> 08:57.740
就是我们有的时候

08:57.740 --> 08:58.740
egre要做一些事

08:58.740 --> 09:00.740
可能他有些未知信息

09:00.740 --> 09:01.740
我们需要配置他

09:01.740 --> 09:03.740
但是如果说用配置的话

09:03.740 --> 09:04.740
会非常繁殊

09:04.740 --> 09:05.740
我们要写个配置文件

09:05.740 --> 09:07.740
如果说你学过了webpack

09:07.740 --> 09:09.740
是不是有很多的配置文件

09:09.740 --> 09:11.740
里面有很多的东西

09:11.740 --> 09:12.740
但是webpack

09:12.740 --> 09:13.740
它也是有很多约定的

09:13.740 --> 09:15.740
就是如果说你不写配置

09:15.740 --> 09:16.740
那麽我的默认配置是什麽

09:16.740 --> 09:17.740
就这个意思

09:17.740 --> 09:19.740
那么egre也是一样

09:19.740 --> 09:20.740
它本来有很多配置的

09:20.740 --> 09:21.740
你看它里面集成了

09:21.740 --> 09:22.740
这麽多技术

09:22.740 --> 09:23.740
这些技术之间

09:23.740 --> 09:25.740
如何来协助协同

09:25.740 --> 09:27.740
肯定就设计到很多配置

09:27.740 --> 09:29.740
但是它也可以完全不用配置

09:29.740 --> 09:31.740
基本上不用配置

09:31.740 --> 09:34.740
因为它里面有很多很多的约定

09:34.740 --> 09:36.740
就是你只要使用这个文件夹

09:36.740 --> 09:37.740
我就知道了

09:37.740 --> 09:38.740
这个文件夹是什麽意思

09:38.740 --> 09:39.740
你只要使用这个文件名

09:39.740 --> 09:40.740
我就知道了

09:40.740 --> 09:42.740
这个文件名是什麽意思

09:42.740 --> 09:44.740
它就用这种方式来处理的

09:44.740 --> 09:46.740
这种方式处理的过后

09:46.740 --> 09:49.740
我们的配置就写得很少很少了

09:49.740 --> 09:51.740
然后接下来是内置的

09:51.740 --> 09:52.740
多进程管理

09:52.740 --> 09:54.740
这个我们之后再说吧

09:54.740 --> 09:56.740
它里面是包含了就是有

09:56.740 --> 09:58.740
就是这个walker

09:58.740 --> 10:00.740
有很多的walker线程

10:00.740 --> 10:02.740
然后使用mvc模式

10:02.740 --> 10:03.740
有一同学对mvc模式呢

10:03.740 --> 10:04.740
我之前好像讲

10:04.740 --> 10:06.740
讲load的模板引擎的时候

10:06.740 --> 10:07.740
好像说过

10:07.740 --> 10:08.740
如果说你不太了解的话

10:08.740 --> 10:10.740
我们后边再说吧

10:10.740 --> 10:12.740
因为这几个说也不太合适

10:12.740 --> 10:13.740
时间太早了

10:13.740 --> 10:15.740
那么egre的应用场景是什麽呢

10:15.740 --> 10:17.740
什麽情况下我们可以使用egre呢

10:17.740 --> 10:19.740
实际上任何你只要

10:19.740 --> 10:21.740
去要搭建前端服务器

10:21.740 --> 10:22.740
你只要搭建服务器

10:22.740 --> 10:23.740
都可以使用egre

10:23.740 --> 10:25.740
比如说你搭建一个中间服务器

10:25.740 --> 10:26.740
不解释了吧

10:26.740 --> 10:27.740
对不对

10:27.740 --> 10:29.740
就是我们不处理业务数据

10:29.740 --> 10:31.740
业务数据在后端服务器上

10:31.740 --> 10:33.740
我只是处理一个中转

10:33.740 --> 10:35.740
那么中间服务器可以用egre

10:35.740 --> 10:37.740
你可以做一些日式记录啊

10:37.740 --> 10:39.740
或者是一些访问控制啊

10:39.740 --> 10:42.740
比如说或者是一些缓存啊等等等等

10:42.740 --> 10:44.740
可以做一些中间服务器

10:44.740 --> 10:45.740
另外一个纯后端服务器

10:45.740 --> 10:46.740
就是没有后端服务器

10:46.740 --> 10:48.740
你就自己就是后端服务器

10:48.740 --> 10:49.740
这种情况呢

10:49.740 --> 10:51.740
也适用于egre

10:51.740 --> 10:52.740
这都可以使用

10:52.740 --> 10:53.740
还包括什么呢

10:53.740 --> 10:55.740
当然不仅仅是这些啊

10:55.740 --> 10:56.740
还包括什么呢

10:56.740 --> 10:57.740
服务端渲染

10:57.740 --> 10:58.740
可以使用egre

10:58.740 --> 10:59.740
而且呢

10:59.740 --> 11:00.740
非服务端渲染啊

11:00.740 --> 11:02.740
就是reacts啊view

11:02.740 --> 11:03.740
搭建了一些

11:03.740 --> 11:05.740
单页应用程序呢

11:05.740 --> 11:06.740
也可以使用egre来拖管

11:06.740 --> 11:07.740
都可以

11:07.740 --> 11:08.740
对吧

11:08.740 --> 11:10.740
好那边他本身就是

11:10.740 --> 11:11.740
继续ka的ka能做的事情

11:11.740 --> 11:12.740
他是不是都能做

11:12.740 --> 11:13.740
对不对

11:13.740 --> 11:15.740
好这是关于这个

11:15.740 --> 11:16.740
egre的简介啊

11:16.740 --> 11:17.740
大概解决什么一个

11:17.740 --> 11:18.740
要有一个问题

11:18.740 --> 11:19.740
大家心里边有个数

11:19.740 --> 11:21.740
然后接下来就是说

11:22.740 --> 11:24.740
使用的话就轻松一点啊

11:24.740 --> 11:25.740
前面的要认真听

11:25.740 --> 11:27.740
后边的就轻松一点了啊

11:27.740 --> 11:28.740
哈罗沃尔的

11:28.740 --> 11:29.740
我们先写个哈罗沃尔的啊

11:29.740 --> 11:31.740
首先呢egre的官网是这个

11:31.740 --> 11:33.740
他没有明年中文网

11:33.740 --> 11:34.740
也不需要明年中文网

11:34.740 --> 11:36.740
因为他是阿里巴巴

11:36.740 --> 11:39.740
出品的一个企业仅应用微博框架

11:39.740 --> 11:41.740
他本身就支持中文的

11:41.740 --> 11:42.740
所以说你可以在这里边看

11:42.740 --> 11:45.740
他的教程其实也写得非常非常好

11:45.740 --> 11:46.740
然后呢

11:46.740 --> 11:47.740
搭建第一个工程

11:47.740 --> 11:49.740
搭建工程有两种方式

11:49.740 --> 11:50.740
一种是使用一个角度架

11:50.740 --> 11:53.740
我不是在学习阶段

11:53.740 --> 11:54.740
我不是很推荐使用角度架

11:54.740 --> 11:56.740
因为用角度架搭建出来的话

11:56.740 --> 11:57.740
你很多东西不明白

11:57.740 --> 11:58.740
要解释大堆

11:58.740 --> 12:00.740
所以说我们可以用手动的方式

12:00.740 --> 12:01.740
一步一步搭建

12:01.740 --> 12:02.740
然后搭建完了过后呢

12:02.740 --> 12:04.740
最后我们看一眼角度架

12:04.740 --> 12:05.740
你就搭开明白了

12:05.740 --> 12:07.740
原来角度架就是帮我们

12:07.740 --> 12:08.740
用手动搭建

12:08.740 --> 12:09.740
简化我们手动搭建

12:09.740 --> 12:10.740
仅此而已

12:10.740 --> 12:11.740
好来吧

12:11.740 --> 12:12.740
我们手动搭建

12:12.740 --> 12:13.740
怎么来搭建呢

12:13.740 --> 12:15.740
你要安装两个核心库

12:15.740 --> 12:17.740
一个呢叫做egre

12:18.740 --> 12:19.740
egre

12:20.740 --> 12:21.740
这个就是核心库了

12:21.740 --> 12:23.740
就相当于是你要安装ka

12:23.740 --> 12:24.740
那肯定得安装ka

12:24.740 --> 12:25.740
对不对

12:25.740 --> 12:26.740
这是核心库

12:26.740 --> 12:27.740
另外一个呢

12:27.740 --> 12:29.740
你是要安装这个egre-bin

12:29.740 --> 12:30.740
这是一个什么玩意呢

12:30.740 --> 12:32.740
它是提供了一些命令行工具

12:32.740 --> 12:34.740
给你提供了一个命令行

12:35.740 --> 12:37.740
我们平时用的时候呢

12:37.740 --> 12:38.740
肯定是用的是egre

12:38.740 --> 12:40.740
那么我们要用一些命令

12:40.740 --> 12:41.740
启动的时候呢

12:41.740 --> 12:42.740
我们可以用egre-bin

12:42.740 --> 12:43.740
我们安装

12:43.740 --> 12:45.740
用开发一代egre-bin

12:45.740 --> 12:46.740
因为在运行的时候呢

12:46.740 --> 12:50.500
实际上是不需要它的

12:50.500 --> 12:51.500
安装一个egre-bin

12:51.500 --> 12:54.390
好

12:54.390 --> 12:55.390
安装好了

12:55.390 --> 12:56.390
这两个过后呢

12:56.390 --> 12:57.390
我们开始编写贷码了

12:57.390 --> 12:58.390
怎么编写贷码呢

12:58.390 --> 12:59.390
egre里边呢

12:59.390 --> 13:00.390
它有很多的约定

13:00.390 --> 13:02.390
就是你要写什么文件夹

13:02.390 --> 13:03.390
你要写什么文件名

13:03.390 --> 13:04.390
不能乱写

13:04.390 --> 13:05.390
因为乱写的话

13:05.390 --> 13:06.390
它就找不到了

13:06.390 --> 13:08.390
你要追寻一定的规范

13:08.390 --> 13:09.390
什么规范呢

13:09.390 --> 13:10.390
就是它有这么两个文件夹

13:10.390 --> 13:11.390
一个是app

13:11.390 --> 13:12.390
一个是config

13:13.390 --> 13:15.390
一个文件夹

13:16.390 --> 13:18.390
一个文件夹叫做app

13:19.390 --> 13:20.390
app叫什么意思

13:20.390 --> 13:21.390
application

13:21.390 --> 13:22.390
就是应用

13:22.390 --> 13:23.390
我们的服务器应用

13:23.390 --> 13:25.390
里边的绝大部分代码

13:25.390 --> 13:27.390
都是写到这个目楼下面

13:27.390 --> 13:28.390
好

13:28.390 --> 13:29.390
另外一个文件夹叫config

13:29.390 --> 13:30.390
什么意思

13:30.390 --> 13:31.390
配置

13:31.390 --> 13:32.390
对吧

13:32.390 --> 13:33.390
有这么两个文件夹

13:33.390 --> 13:34.390
好

13:34.390 --> 13:35.390
app这个文件夹

13:35.390 --> 13:36.390
里边呢

13:36.390 --> 13:37.390
你要建立一个文件夹

13:37.390 --> 13:38.390
叫做controller

13:38.390 --> 13:39.390
这是必须要有的

13:39.390 --> 13:40.390
controller

13:40.390 --> 13:41.390
controller叫什么呢

13:41.390 --> 13:42.390
叫控制器

13:42.390 --> 13:43.390
那么控制器到底有什么意义呢

13:43.390 --> 13:44.390
我们一会再详细解释

13:44.390 --> 13:46.390
它主要是用来处理请求的

13:46.390 --> 13:48.390
就是请求到了服务器过后呢

13:48.390 --> 13:50.390
需要交给控制器来处理

13:50.390 --> 13:52.390
那么这个控制器里边

13:52.390 --> 13:53.390
它到底写啥呢

13:53.390 --> 13:55.390
它写的就是一个一个的

13:55.390 --> 13:56.390
gs文件

13:56.390 --> 13:57.390
一个gs文件

13:57.390 --> 13:59.390
就是一个控制器

13:59.390 --> 14:00.390
比方说

14:00.390 --> 14:02.390
我们在这里写上一个gs文件

14:02.390 --> 14:03.390
gs的文件名

14:03.390 --> 14:04.390
它没有要求

14:04.390 --> 14:06.390
比方说我们这里写上一个home

14:06.390 --> 14:07.390
叫gs

14:07.390 --> 14:09.390
那么在这里边写啥呢

14:09.390 --> 14:10.390
有这么一段代码

14:10.390 --> 14:11.390
把它复制过来

14:11.390 --> 14:12.390
home的gs里边

14:12.390 --> 14:14.390
我们把代码复制过来

14:14.390 --> 14:16.390
一会我再去详细解释

14:16.390 --> 14:18.390
总之这就是一个控制器

14:18.390 --> 14:20.390
这个控制器用来干嘛

14:20.390 --> 14:21.390
我再说一次

14:21.390 --> 14:23.390
用来处理请求

14:23.390 --> 14:25.390
然后这个控制器是不是写完了

14:25.390 --> 14:26.390
如果说有多个控制器的话

14:26.390 --> 14:28.390
我们在这里边写多个控制器就行了

14:28.390 --> 14:29.390
这现在我们后边再详细解释

14:29.390 --> 14:31.390
我们现在搞定一个Hello World

14:31.390 --> 14:32.390
然后接下来

14:32.390 --> 14:34.390
我们在App文件讲下面

14:34.390 --> 14:35.390
加上一个文件

14:35.390 --> 14:37.390
叫Rotor.js

14:37.390 --> 14:38.390
Rotor.js

14:38.390 --> 14:41.390
这个gs是用来配置路由的

14:41.390 --> 14:42.390
这个路由啥意思呢

14:42.390 --> 14:44.390
就是koa的路由

14:44.390 --> 14:45.390
或者是express的路由

14:45.390 --> 14:46.390
含义是一样的

14:46.390 --> 14:48.390
就是通过一个路径

14:48.390 --> 14:50.390
通过一个请求方法

14:50.390 --> 14:53.390
去匹配一个处理函数

14:53.390 --> 14:55.390
好 那么我们在这边写上啥呢

14:55.390 --> 14:57.390
复制一下

14:57.390 --> 14:58.390
你看啊

14:58.390 --> 15:01.390
我们在这边是用路由gats

15:01.390 --> 15:02.390
一个写杠

15:02.390 --> 15:04.390
Ctrl2 Home这个是啥意思呢

15:04.390 --> 15:06.390
就表示用gats

15:06.390 --> 15:07.390
当我们用gats请求

15:07.390 --> 15:09.390
请求这样的路径的时候

15:09.390 --> 15:10.390
交给什么来处理呢

15:10.390 --> 15:12.390
交给控制器里边的

15:12.390 --> 15:13.390
这个控制器

15:13.390 --> 15:14.390
Home这个控制器

15:15.390 --> 15:16.390
你看这个地方呢

15:16.390 --> 15:18.390
跟这边的文件名是对应的

15:18.390 --> 15:20.390
所以说这个文件名呢

15:20.390 --> 15:21.390
你可以随便命名

15:21.390 --> 15:22.390
但是呢只要跟这边对应

15:22.390 --> 15:24.390
跟Home这个控制器里边

15:24.390 --> 15:25.390
哪个方法呢

15:25.390 --> 15:27.390
应这个方法来处理

15:27.390 --> 15:28.390
通过这个函数来处理

15:28.390 --> 15:29.390
没了意思吧

15:29.390 --> 15:30.390
你看这个函数怎么处理的

15:30.390 --> 15:32.390
这个函数呢无非就是

15:32.390 --> 15:34.390
用这个koa学过吧

15:34.390 --> 15:36.390
通过context.body

15:36.390 --> 15:38.390
给它复制一个响应题

15:38.390 --> 15:40.390
就完事了

15:40.390 --> 15:41.390
好 那么现在呢

15:41.390 --> 15:42.390
我们这一块就做完了

15:42.390 --> 15:43.390
对不对

15:43.390 --> 15:44.390
好 接下来

15:44.390 --> 15:45.390
还不够文件讲呢

15:45.390 --> 15:46.390
我们现在目前呢

15:46.390 --> 15:47.390
必要的东西

15:47.390 --> 15:49.390
最少最少的东西就写完了

15:49.390 --> 15:51.390
然后接下来是config文件讲

15:51.390 --> 15:52.390
就配置

15:52.390 --> 15:53.390
配置呢目前呢

15:53.390 --> 15:54.390
只需要写一个配置就行了

15:54.390 --> 15:56.390
也在这里边新建一个配置文件

15:56.390 --> 15:57.390
这里边其实可以有很多配置

15:57.390 --> 15:59.390
后面会想起说

15:59.390 --> 16:01.390
configdefault.js

16:01.390 --> 16:03.390
这里主要是感受一下

16:03.390 --> 16:05.390
给它一个默认配置

16:05.390 --> 16:07.390
这个默认配置里边写什么呢

16:07.390 --> 16:09.390
导出一个配置

16:13.390 --> 16:15.390
你看它的配置是用这种方式来写的

16:15.390 --> 16:16.390
keyz

16:16.390 --> 16:17.390
这个东西是什么呢

16:17.390 --> 16:18.390
就是一个secret

16:18.390 --> 16:19.390
就是跟必要

16:19.390 --> 16:21.390
这个必要呢主要用来加密Cookie

16:21.390 --> 16:23.390
它里边会自动处理Cookie

16:23.390 --> 16:25.390
而且会对Cookie进行加密

16:25.390 --> 16:26.390
也要给它提供一个必要

16:26.390 --> 16:28.390
它能用于加密Cookie

16:28.390 --> 16:29.390
比方说这里

16:29.390 --> 16:30.390
我们就写个独一

16:30.390 --> 16:32.390
好 保存

16:32.390 --> 16:33.390
那么现在呢

16:33.390 --> 16:35.390
最少最少的东西就写完了

16:35.390 --> 16:36.390
代码就显成这个样子

16:36.390 --> 16:37.390
你看这里有个配置

16:37.390 --> 16:40.390
主要是跟Cookie相关的一个必要

16:40.390 --> 16:42.390
这边是一个控制器

16:42.390 --> 16:44.390
用来处理请求的

16:44.390 --> 16:45.390
当请求到来的时候

16:45.390 --> 16:46.390
我干嘛呢

16:46.390 --> 16:48.390
我给它一个Hello World

16:48.390 --> 16:49.390
然后这里是一个路由

16:49.390 --> 16:51.390
是来配置路由的

16:51.390 --> 16:52.390
这里就是

16:52.390 --> 16:53.390
如果说用get请求请求这个路径

16:53.390 --> 16:56.390
我就交给这个控制器的

16:56.390 --> 16:58.390
这个index来处理

16:58.390 --> 16:59.390
好了

16:59.390 --> 17:00.390
我们这里就写完了

17:00.390 --> 17:01.390
写完了之后呢

17:01.390 --> 17:03.390
我们现在去改动一下

17:03.390 --> 17:04.390
这个package.json

17:04.390 --> 17:05.390
改动一下这里

17:05.390 --> 17:08.390
把这里的脚本来改成这个

17:08.390 --> 17:09.390
改动一下脚本

17:09.390 --> 17:11.390
因为我们启动程序呢

17:11.390 --> 17:12.390
要怎么启动呢

17:12.390 --> 17:14.390
要通过它的命令行来启动

17:14.390 --> 17:15.390
AgeBin

17:15.390 --> 17:16.390
它提供一个命令行工具

17:16.390 --> 17:17.390
然后呢

17:17.390 --> 17:18.390
是开发模式

17:18.390 --> 17:19.390
至于生产环境的模式呢

17:19.390 --> 17:20.390
我们今后再说

17:20.390 --> 17:21.390
说写完了代码功后

17:21.390 --> 17:22.390
怎么部署

17:22.390 --> 17:23.390
之后再说

17:23.390 --> 17:26.390
我们现在是进入开发模式

17:26.390 --> 17:27.390
OK

17:27.390 --> 17:28.390
那么现在呢

17:28.390 --> 17:29.390
我们写好了

17:29.390 --> 17:30.390
接下来我们整个运行

17:30.390 --> 17:31.390
运行的方式极其简单

17:31.390 --> 17:32.390
我们可以通过

17:32.390 --> 17:34.390
npn装dip

17:34.390 --> 17:37.600
就可以运行了

17:37.600 --> 17:39.600
好 运行出来了

17:39.600 --> 17:40.600
运行出来了

17:40.600 --> 17:41.600
我们可以看到

17:41.600 --> 17:42.600
它告诉我

17:42.600 --> 17:44.600
服务器现在运行在哪呢

17:44.600 --> 17:47.600
运行在7001这个版口

17:47.600 --> 17:49.600
好 我们打开看一下

17:49.600 --> 17:51.600
你看 是不是出现了Hello World

17:51.600 --> 17:54.600
当我们请求这样的路径的时候

17:54.600 --> 17:56.600
当我们请求这样的路径的时候

17:56.600 --> 17:58.600
是不是交给了这个控制器

17:58.600 --> 18:00.600
这个控制器里边

18:00.600 --> 18:01.600
说有个Hello World

18:01.600 --> 18:03.600
而且代码可以更改的

18:03.600 --> 18:05.600
你好

18:05.600 --> 18:06.600
更改之后呢

18:06.600 --> 18:08.600
服务器它会重新启动

18:08.600 --> 18:09.600
会重新启动

18:09.600 --> 18:11.600
然后我们这里刷新

18:11.600 --> 18:12.600
变成D好了

18:12.600 --> 18:13.600
对不对

18:13.600 --> 18:14.600
好 OK

18:14.600 --> 18:15.600
这就是关于这个

18:15.600 --> 18:17.600
Agg的第一个应用

18:17.600 --> 18:19.600
Hello World

18:19.600 --> 18:21.600
好 接下来我们再看

18:21.600 --> 18:22.600
接下来我们运行完了过后

18:22.600 --> 18:23.600
接下来我们来了解一下

18:23.600 --> 18:24.600
它的核心概念

18:24.600 --> 18:26.600
刚才到底发生了什么事

18:26.600 --> 18:27.600
首先我们要知道

18:27.600 --> 18:28.600
刚才的整个过程里边

18:28.600 --> 18:30.600
是不是有很多约定

18:30.600 --> 18:32.600
包括对文件假的约定

18:32.600 --> 18:33.600
包括对文件明的约定

18:33.600 --> 18:35.600
那么这些约定的存在

18:35.600 --> 18:36.600
就减少了大量的配置

18:36.600 --> 18:38.600
其实我不用去告诉他

18:39.600 --> 18:40.600
你看这里

18:40.600 --> 18:42.600
你就会发现一些很神奇的现象

18:42.600 --> 18:43.600
这里的文件明

18:43.600 --> 18:44.600
是不是就是空置器的名字

18:44.600 --> 18:46.600
对吧 这是约定好的

18:46.600 --> 18:48.600
那么这里边的处理函数的

18:48.600 --> 18:49.600
函数的名字就是我们

18:49.600 --> 18:51.600
这边的处理函数的名字

18:51.600 --> 18:52.600
你看

18:52.600 --> 18:53.600
对不对

18:53.600 --> 18:54.600
而且呢

18:54.600 --> 18:55.600
我们的配置文件

18:55.600 --> 18:56.600
你不用告诉他配置文件在哪

18:56.600 --> 18:57.600
他就自动知道

18:57.600 --> 18:58.600
配置文件在康费格里边

18:58.600 --> 18:59.600
你也不用告诉他

18:59.600 --> 19:00.600
你在默认配置在哪

19:00.600 --> 19:02.600
他默认配置自动在这

19:02.600 --> 19:03.600
你也不用告诉他

19:03.600 --> 19:05.600
这个东西就是Cookie的secrets

19:05.600 --> 19:07.600
他自动就会读取这个名字的

19:08.600 --> 19:10.600
导出了这个名字

19:10.600 --> 19:12.600
Case表示secrets

19:12.600 --> 19:14.600
原来的意思吧

19:14.600 --> 19:15.600
这边都是约定

19:15.600 --> 19:17.600
包括这个文件夹的名字

19:17.600 --> 19:19.600
看这里的名字都是约定

19:19.600 --> 19:20.600
后面我们还会学习到

19:20.600 --> 19:21.600
很多很多的约定

19:21.600 --> 19:23.600
这些约定的你都不用去配

19:23.600 --> 19:24.600
你用一下

19:24.600 --> 19:26.600
基本上就知道大概怎么回事了

19:27.600 --> 19:29.600
这是关于他里边的约定

19:29.600 --> 19:30.600
另外一个

19:30.600 --> 19:31.600
他的运行流程

19:31.600 --> 19:32.600
他到底是发生了什么事

19:32.600 --> 19:34.600
当我们运行这个命令的时候

19:34.600 --> 19:36.600
他是不是经过这么一个过

19:36.600 --> 19:37.600
一些过程

19:37.600 --> 19:39.600
第一步他会生成配置

19:39.600 --> 19:40.600
怎么叫生成配置呢

19:40.600 --> 19:42.600
他会在启动的时候

19:42.600 --> 19:43.600
读取到我们这里的

19:43.600 --> 19:45.600
Config文念夹

19:45.600 --> 19:48.600
读取到我们的这个Rotor文念夹

19:48.600 --> 19:50.600
而且会读到什么

19:50.600 --> 19:52.600
Ctrl这些东西都会读到

19:52.600 --> 19:54.600
读到了之后

19:54.600 --> 19:56.600
然后他会在这里

19:56.600 --> 19:57.600
生成一个文念夹叫Rom

19:57.600 --> 19:59.600
这个文念夹里边生成出来了

19:59.600 --> 20:00.600
这个文念夹里边的东西

20:00.600 --> 20:01.600
都不用去看

20:01.600 --> 20:03.600
他就把我们这些里边的约定

20:03.600 --> 20:05.600
全部把它搞成配置

20:05.600 --> 20:07.600
最终他会自动把它变成配置

20:07.600 --> 20:09.600
变成配置过后了

20:09.600 --> 20:10.600
那么这些配置

20:10.600 --> 20:12.600
就会对我们后续的运行

20:12.600 --> 20:13.600
提供帮助

20:13.600 --> 20:15.600
提供支持

20:15.600 --> 20:16.600
这是生成配置

20:16.600 --> 20:18.600
第一步要做的事情

20:18.600 --> 20:20.600
接下来第二步要做的事情

20:20.600 --> 20:21.600
就是启动Agg

20:21.600 --> 20:22.600
那么Agg就开始启动了

20:22.600 --> 20:23.600
启动的时候会干嘛呢

20:23.600 --> 20:25.600
他会在内部创建一个KLA实力

20:25.600 --> 20:27.600
因为他最终是一号KLA

20:27.600 --> 20:29.600
来启动服务器的

20:29.600 --> 20:31.600
并且完成一些初始化工作

20:31.600 --> 20:33.600
然后监听7001端口

20:34.600 --> 20:36.600
比方我们目前看着去7001

20:36.600 --> 20:37.600
那个能不能改

20:37.600 --> 20:38.600
肯定是能改的

20:38.600 --> 20:41.600
接下来就等待请求了

20:41.600 --> 20:43.600
我们的瀏覽器里边去请求

20:43.600 --> 20:44.600
我们的网站

20:44.600 --> 20:47.600
请求的时候一定是Agg获取到了

20:47.600 --> 20:49.600
Agg获取到了过后

20:49.600 --> 20:51.600
他会使用

20:51.600 --> 20:53.600
他内部使用了KLA Rotar

20:53.600 --> 20:54.600
所以说我们这里的配置

20:54.600 --> 20:57.600
就是按照KLA Rotar的方式来配置的

20:57.600 --> 20:58.600
在这里

20:58.600 --> 21:00.600
他内部使用的是KLA Rotar

21:00.600 --> 21:02.600
那么这个Rotar

21:02.600 --> 21:03.600
去路由表中

21:03.600 --> 21:05.600
就是我们在这个配置的路由当中

21:05.600 --> 21:06.600
去匹配

21:06.600 --> 21:07.600
看哪一个能匹配上

21:07.600 --> 21:09.600
如果说匹配上了过后

21:09.600 --> 21:10.600
他完成一些操作过后

21:10.600 --> 21:11.600
他就会交给这个

21:11.600 --> 21:13.600
相应的这个地方来处理

21:13.600 --> 21:14.600
这个东西呢

21:14.600 --> 21:16.600
实际上叫做Agg获取

21:16.600 --> 21:17.600
这个东西是控制器

21:17.600 --> 21:19.600
这个玩意儿是Agg获取

21:19.600 --> 21:20.600
交给Agg获取来处理

21:20.600 --> 21:22.600
那么处理的时候呢

21:22.600 --> 21:24.600
它存取的是MVC模式

21:24.600 --> 21:25.600
MVC模式呢

21:25.600 --> 21:26.600
我们后续还会详细讲解

21:26.600 --> 21:27.600
我们这里呢

21:27.600 --> 21:29.600
只需要知道它是MVC就行了

21:29.600 --> 21:30.600
现在也不好解释

21:30.600 --> 21:32.600
它始终是交给

21:32.600 --> 21:34.600
Ctrl的Agg获取来处理的

21:34.600 --> 21:35.600
我们请求

21:35.600 --> 21:37.600
它一定不会有别的地方来处理

21:37.600 --> 21:41.600
它一定是Ctrl的Agg获取来处理

21:41.600 --> 21:42.600
那什么叫Ctrl呢

21:42.600 --> 21:46.600
Ctrl是继承自Agg的一个内

21:46.600 --> 21:48.600
叫做Ctrl

21:48.600 --> 21:49.600
Agg里边还有一个内

21:49.600 --> 21:50.600
Ctrl

21:50.600 --> 21:52.600
你只要继承自这个内

21:52.600 --> 21:54.600
并且你在Ctrl文件夹下边

21:54.600 --> 21:56.600
那你就是一个Ctrl

21:56.600 --> 21:57.600
并且你要把这个Ctrl挡住

21:57.600 --> 21:59.600
比如这个控制器

21:59.600 --> 22:01.600
里边又可以有很多个函数

22:01.600 --> 22:04.600
这些函数的名字没有要求

22:04.600 --> 22:06.600
并没有要求你这些函数写什么名字

22:06.600 --> 22:08.600
除非一些特殊情况

22:08.600 --> 22:10.600
那么这一年的每一个函数呢

22:10.600 --> 22:12.600
我们都把它称之为Agg

22:12.600 --> 22:14.600
这些Agg型都是有能力

22:14.600 --> 22:16.600
去处理请求的

22:16.600 --> 22:17.600
你看这个Agg型

22:17.600 --> 22:18.600
是不是有能力处理请求

22:18.600 --> 22:20.600
但它到底要不要处理请求

22:20.600 --> 22:22.600
处理什么样的请求

22:22.600 --> 22:24.600
处理什么请求方法

22:24.600 --> 22:25.600
处理什么请求路径

22:25.600 --> 22:28.600
完全是靠路由来配置的

22:28.600 --> 22:30.600
你看这样子是不是提高了灵活度

22:30.600 --> 22:32.600
将来有一天我希望

22:32.600 --> 22:33.600
在路由里边

22:33.600 --> 22:35.600
当请求这样的路径的时候

22:35.600 --> 22:36.600
我才去交这个Agg型

22:36.600 --> 22:37.600
那么这个Agg型呢

22:37.600 --> 22:39.600
是不是它就完全不知道

22:39.600 --> 22:41.600
到底的请求

22:41.600 --> 22:43.600
是什么样的请求路径

22:43.600 --> 22:44.600
什么样的请求方法到这儿的

22:44.600 --> 22:45.600
对吧

22:45.600 --> 22:47.600
那么我只需要处理我的逻辑就行

22:47.600 --> 22:49.600
比方说我这只就是首页

22:49.600 --> 22:51.600
我甭管首页的请求地址是啥

22:51.600 --> 22:53.600
我也甭管首页的请求方法是啥

22:53.600 --> 22:54.600
我总之首页该怎么处理

22:54.600 --> 22:55.600
我就处理

22:55.600 --> 22:57.600
然后在Rotor里面进行配置

22:58.600 --> 22:59.600
在这里配置

22:59.600 --> 23:00.600
那么这里就把这个

23:00.600 --> 23:02.600
Controller处理请求

23:02.600 --> 23:04.600
和具体的请求路径

23:04.600 --> 23:06.600
这些偶和是不是解开了

23:06.600 --> 23:07.600
对吧

23:07.600 --> 23:08.600
Controller里面只需要处理请求

23:08.600 --> 23:10.600
你什么都不用去管

23:10.600 --> 23:12.600
我这边去给你配置

23:12.600 --> 23:14.600
什么情况下你交给你再处理

23:14.600 --> 23:15.600
这里就是

23:15.600 --> 23:17.600
有这么一个逻辑在里面

23:17.600 --> 23:18.600
Controller表现一个内

23:18.600 --> 23:19.600
Agg型的表现的是

23:19.600 --> 23:22.600
Controller里面的一个实力方法

23:22.600 --> 23:23.600
好了

23:23.600 --> 23:24.600
这就是我们这几课

23:24.600 --> 23:26.600
要体验到的Aggs里面东西

23:26.600 --> 23:27.600
最重要的是Agg

23:27.600 --> 23:29.600
它要解决什么样的问题

23:29.600 --> 23:30.600
它要做整合

23:30.600 --> 23:32.600
把服务器的常见的一些开发

23:32.600 --> 23:33.600
常计用一些规范

23:33.600 --> 23:36.600
用一些Aggs插件来进行整合

23:36.600 --> 23:37.600
OK

23:37.600 --> 23:38.600
那么这就是这里说的那种

23:38.600 --> 23:40.600
而且还可以生成一个文件叫Logs

23:40.600 --> 23:41.600
对吧

23:41.600 --> 23:42.600
Logs里面呢

23:42.600 --> 23:43.600
它里面包含的就是一些

23:43.600 --> 23:46.600
请求的一些日字记录

23:46.600 --> 23:48.600
我们后面会说日字

23:48.600 --> 23:49.600
那么我们整门客

23:49.600 --> 23:51.600
Logs就是Agg结石

23:51.600 --> 23:52.600
我们怎么去讲呢

23:52.600 --> 23:54.600
我们主要是分成这么三块来讲

23:54.600 --> 23:55.600
一个是外边层面

23:55.600 --> 23:57.600
就是我们第一章

23:57.600 --> 23:59.600
主要是讲外边服务器

23:59.600 --> 24:00.600
用Agg怎么去搭建

24:00.600 --> 24:02.600
有一些常见的常计

24:02.600 --> 24:03.600
第二个呢

24:03.600 --> 24:04.600
就是关于Surface

24:04.600 --> 24:05.600
就是关于业务逻辑层

24:05.600 --> 24:07.600
我们三层架构嘛

24:07.600 --> 24:09.600
业务逻辑层怎么整合到Agg里面

24:09.600 --> 24:10.600
第三个呢

24:10.600 --> 24:11.600
就是讲数据库

24:11.600 --> 24:12.600
我们是反着讲

24:12.600 --> 24:13.600
对吧

24:13.600 --> 24:14.600
先讲外边服务器

24:14.600 --> 24:15.600
就是UI层

24:15.600 --> 24:16.600
就是服务层

24:16.600 --> 24:17.600
然后再讲

24:17.600 --> 24:18.600
业务逻辑层

24:18.600 --> 24:20.600
再讲数据层

24:20.600 --> 24:22.600
我们最后讲数据层

24:22.600 --> 24:23.600
然后再说一下

24:23.600 --> 24:24.600
Agg的一些高级概念

24:24.600 --> 24:25.600
就可以了

24:25.600 --> 24:26.600
OK

24:26.600 --> 24:28.600
那么这是关于Agg结石

24:28.600 --> 24:30.600
它的一些初始的体验

