WEBVTT

00:00.050 --> 00:03.070
好 我们这就把这个部署说了吧

00:03.330 --> 00:06.550
其实如果说像那个普通的一个漏的应用啊

00:06.550 --> 00:08.750
它去部署的话 其实特别简单

00:08.870 --> 00:11.690
对不对 你把这个漏的应用呢 上传到Gate

00:12.030 --> 00:15.130
然后呢 在服务系 从Gate上拿去下来

00:15.250 --> 00:16.430
安装一带

00:16.590 --> 00:20.090
然后启动起来 通过什么 通过什么启动呢 通过PMR

00:20.090 --> 00:23.090
对吧 通过这个东西来启动 就完事了

00:23.350 --> 00:28.550
如果说你这个漏的程序呢 是用构建工具打包出来的

00:28.750 --> 00:31.750
那么你就直接打包 用个什么FTP上传

00:31.750 --> 00:35.550
到服务器 那就完事了 然后用PMR来管理就完事了

00:35.550 --> 00:38.550
那么A个呢 也差不多 只不过呢

00:38.550 --> 00:43.050
它是不需要PMR的 就这个区别 我给大家说一下吧

00:43.050 --> 00:47.550
接下来稍微的解释一下 它为什么不需要PMR这个守护进程

00:47.550 --> 00:51.550
因为我们知道 为什么需要PMR呢

00:51.550 --> 00:54.050
你首先知道 在服务系当中 为什么需要PMR

00:54.050 --> 00:57.050
你们之前学过 应该学过服务系的部署的 对吧

00:57.050 --> 01:01.550
为啥需要PMR呢 因为漏的进程啊 它是不是只有一个

01:01.550 --> 01:03.550
启动漏的是不是只有一个进程

01:03.550 --> 01:08.550
而且呢 一个进程 那么就会造成一个什么问题呢

01:08.550 --> 01:13.050
就如果说这个进程里面 一旦发生了没有补货的异常

01:13.050 --> 01:15.550
基本上所有的利用程序都是这个样子

01:15.550 --> 01:18.550
只要发生了没有补货的异常 那个进程就直接退出了

01:18.550 --> 01:21.550
那你有时候呢 用一些软件 对吧

01:21.550 --> 01:25.050
那个软件突然爆错了 发生那个异常 你还能继续用吗

01:25.050 --> 01:28.550
你肯定是不能继续用的 它一般只是让你退出了

01:28.550 --> 01:32.550
未想应 或者是强制退出了 会遇到这种情况 对吧

01:32.550 --> 01:34.550
所以说呢 不是很稳定

01:34.550 --> 01:37.550
那么PMR呢 它就是它可以去启动一个进程

01:37.550 --> 01:41.550
就是PMR进程 它就去补货这些进程的异常

01:41.550 --> 01:45.550
然后补货过后呢 就在控制台 或者是在日子里面给你包裹错

01:45.550 --> 01:47.550
然后呢 并不做任何继续处理

01:47.550 --> 01:50.550
然后呢 重新启动一个进程 对吧

01:50.550 --> 01:52.550
补货过后 重新给你启动这个进程

01:52.550 --> 01:54.550
把这错误日子记录一下

01:54.550 --> 01:57.550
就这么个意思 他主要是管理其他进程的

01:57.550 --> 02:00.050
所以说我们需要一个稳定的PMR

02:00.050 --> 02:04.050
来处理这些其他进程

02:04.050 --> 02:06.050
但是呢 在Agg里边不需要了

02:06.050 --> 02:09.050
因为Agg呢 本身就是多进程模式

02:09.050 --> 02:12.050
简单的说一下 Agg Cluster

02:12.050 --> 02:15.050
这个玩意呢 它是一个Agg的内置插件

02:15.050 --> 02:17.050
你安装好Agg之后呢 它就自带了

02:17.050 --> 02:20.050
它的作用呢 是在Agg启动过后呢

02:20.050 --> 02:22.050
它会开启多个进程

02:22.050 --> 02:25.050
我们知道以前在Note的时候呢 学过了一个

02:25.050 --> 02:30.050
扩展指使 主进程可以开启多个指进程 对吧

02:30.050 --> 02:34.050
那么Agg呢 实际上它是运行在多个进程上的应用

02:34.050 --> 02:37.050
那么这些进程的指示是什么呢 一共有三个

02:37.050 --> 02:40.050
就Agg启动过后呢 一共有三种 不是三个

02:40.050 --> 02:42.050
三种进程 一个是主进程

02:42.050 --> 02:44.050
当然主进程只有一个 这毫无疑问的

02:44.050 --> 02:47.050
每个程序呢 最多只能有一个主进程

02:47.050 --> 02:50.550
有启动的时候呢 好多系统给它分配了指定进程

02:50.550 --> 02:53.550
这个进程在Agg里面呢 它是主要承担的是

02:53.550 --> 02:59.550
开启其他进程和管理其他进程的这么一个职责

02:59.550 --> 03:02.550
因此它的稳定性的要求极高

03:02.550 --> 03:04.550
你是不能绝对不能挂掉的

03:04.550 --> 03:06.550
主进程挂掉的话肯定就完蛋了

03:06.550 --> 03:07.550
谁也救不了你了

03:07.550 --> 03:10.550
你是肯定不能挂掉的 它就内置于PM2

03:10.550 --> 03:12.550
原来的意思吧

03:12.550 --> 03:14.550
所以说呢 有了这个东西存在了过后

03:14.550 --> 03:17.550
其实我们在Agg应用里面是无需PM2的

03:17.550 --> 03:19.550
我就是想跟大家解释清楚这一点

03:19.550 --> 03:22.550
其他也没啥了

03:22.550 --> 03:24.550
主要它主要负责管理其他进程

03:24.550 --> 03:27.550
然后呢 了解一下Worker进程和Agent进程

03:27.550 --> 03:30.550
这些东西呢 对我们的开发者来说呢

03:30.550 --> 03:32.550
关系不大 关系不大

03:32.550 --> 03:35.550
Worker进程呢 它也是由主进程开启的

03:35.550 --> 03:37.550
通常情况下呢 这个进程的数量

03:37.550 --> 03:40.550
跟这个CPU的核数是保持相一致的

03:40.550 --> 03:42.550
因为我知道在Note的监视里面

03:42.550 --> 03:44.550
是不是可以获取到CPU的核数 对吧 数量

03:44.550 --> 03:46.550
因此呢 开多少个Worker进程

03:46.550 --> 03:48.550
你不要去动它的数量的话

03:48.550 --> 03:51.550
它目前情况下呢 跟那个CPU的核数保持一致

03:51.550 --> 03:54.550
这个进程呢 主要是真的用于来处理

03:54.550 --> 03:56.550
用户的请求 用户的请求就是

03:56.550 --> 03:59.550
主进程监听嘛 它负责监听端口

03:59.550 --> 04:02.550
到了用户的请求拿到之后呢

04:02.550 --> 04:04.550
要做什么处理 扔给Worker进程

04:04.550 --> 04:06.550
它去运行那个函数

04:06.550 --> 04:10.550
处理函数主要是由Worker进程在运行

04:10.550 --> 04:13.550
没二例子吧

04:13.550 --> 04:15.550
那么具体交给哪个Worker进程呢

04:15.550 --> 04:16.550
那就不一定了

04:16.550 --> 04:19.550
这是由主进程跟它的算法来进行调度的

04:19.550 --> 04:21.550
我们也干预不了

04:21.550 --> 04:23.550
然后还有一个进程呢 就是A进程进程

04:23.550 --> 04:25.550
这个进程对我们开发者来说

04:25.550 --> 04:26.550
基本上是隐形的了

04:26.550 --> 04:28.550
我们平时呢 不会去接触它

04:28.550 --> 04:30.550
这个玩意呢 就相当于是一个密疏

04:30.550 --> 04:34.550
通常用于做一些张火内火砸火

04:34.550 --> 04:36.550
比如说 有的时候呢 客户专那边想

04:36.550 --> 04:38.550
传一个场面接过来

04:38.550 --> 04:40.550
Keeper Live 一个场面接

04:40.550 --> 04:41.550
那么这个时候呢

04:41.550 --> 04:43.550
Worker进程一般不会去做这种事

04:43.550 --> 04:44.550
比较消耗资源

04:44.550 --> 04:47.550
那么就让A进程进程 这种制度进程去做

04:47.550 --> 04:48.550
没二例子吧

04:48.550 --> 04:50.550
这个进程对我们开发者来说

04:50.550 --> 04:51.550
平时也没有什么

04:51.550 --> 04:52.550
它只有一个

04:52.550 --> 04:54.550
它是在运用程序启动的时候

04:54.550 --> 04:55.550
由主进程开启的

04:55.550 --> 04:56.550
它只有一个

04:56.550 --> 04:57.550
它不能有多个的

04:57.550 --> 04:59.550
这个进程也比较稳定的

04:59.550 --> 05:01.550
一般来说它是不会断

05:01.550 --> 05:03.550
它里边的所有異常都会这么比你补过掉

05:03.550 --> 05:08.550
它不会 就是因为異常而导致进程推出

05:08.550 --> 05:09.550
好了 就简单说一下

05:09.550 --> 05:12.550
总之呢 就是A个里边还是多进程的模式

05:12.550 --> 05:13.550
由于是多进程的

05:13.550 --> 05:14.550
它一个进程挂掉

05:14.550 --> 05:16.550
它不会影响其他进程

05:16.550 --> 05:17.550
主进程它有

05:17.550 --> 05:18.550
主进程是不会挂掉的

05:18.550 --> 05:20.550
主进程它会有自己的一套方式

05:20.550 --> 05:22.550
来管理其他进程

05:22.550 --> 05:23.550
比方说

05:23.550 --> 05:24.550
我个进程不小心挂掉了一个

05:24.550 --> 05:25.550
主进程一看

05:25.550 --> 05:26.550
那里挂掉了

05:26.550 --> 05:27.550
我就把你扔掉了

05:27.550 --> 05:28.550
把你销毁掉

05:28.550 --> 05:29.550
销毁掉过后呢

05:29.550 --> 05:30.550
我马上去启动一个新的进程

05:30.550 --> 05:31.550
新的我和新的进程

05:31.550 --> 05:33.550
保持数量跟CPU的核属一致

05:33.550 --> 05:35.550
就这么个意思

05:35.550 --> 05:36.550
好 就是说明这一点

05:36.550 --> 05:38.550
不需要无需这个PMR

05:38.550 --> 05:40.550
然后具体的用法呢

05:40.550 --> 05:42.550
你直接去用A个Cluster

05:42.550 --> 05:43.550
还不是那么方便

05:43.550 --> 05:45.550
建议你安装一个工具

05:45.550 --> 05:46.550
Egg Scripts

05:46.550 --> 05:47.550
这个东西就是

05:47.550 --> 05:48.550
主要是提供一些

05:48.550 --> 05:50.550
命令行的命令

05:50.550 --> 05:51.550
那么通过这个命令

05:51.550 --> 05:53.550
可以非常方便的管理

05:53.550 --> 05:55.550
就是启动和停滞

05:55.550 --> 05:56.550
那么当然

05:56.550 --> 05:58.550
这种启动和停滞是

05:58.550 --> 05:59.550
生产环境的

05:59.550 --> 06:00.550
就线上环境

06:00.550 --> 06:01.550
好 我们来看一下

06:01.550 --> 06:04.990
首先安装

06:04.990 --> 06:07.990
咱们的NPMI Egg Scripts

06:07.990 --> 06:08.990
安装

06:08.990 --> 06:12.130
安装好了之后呢

06:12.130 --> 06:14.130
我们只需要很简单的

06:14.130 --> 06:16.130
配置一个脚本就完成了

06:16.130 --> 06:17.130
再看吧

06:17.130 --> 06:18.130
在这里

06:18.130 --> 06:19.130
我们这个玩意就不要了

06:19.130 --> 06:21.130
不要了

06:21.130 --> 06:22.130
配置一个脚本

06:22.130 --> 06:24.130
好 那么这个是启动

06:24.130 --> 06:26.130
就是在生产环境中启动

06:26.130 --> 06:27.130
启动我们的服务

06:27.130 --> 06:28.130
就是我们写完代码了

06:28.130 --> 06:30.130
然后把个代码了

06:30.130 --> 06:31.130
通过一种方式

06:31.130 --> 06:32.130
上传到服务器

06:32.130 --> 06:34.130
一般来说通过keyz

06:34.130 --> 06:35.130
上传到服务器

06:35.130 --> 06:36.130
服务器那边呢

06:36.130 --> 06:39.130
是不是就NPMI Store

06:39.130 --> 06:40.130
就安装一代

06:40.130 --> 06:41.130
安装一代过后呢

06:41.130 --> 06:42.130
服务器那边

06:42.130 --> 06:43.130
直接运行start

06:43.130 --> 06:46.130
用一个迷你迅运行start就完成了

06:46.130 --> 06:48.130
好 那么这样子启动起来对吧

06:48.130 --> 06:49.130
启动起来过后呢

06:49.130 --> 06:50.130
将来一个参数的参数

06:50.130 --> 06:51.130
我们一会再说

06:51.130 --> 06:52.130
那就是启动

06:52.130 --> 06:54.130
这是停止就完成了

06:54.130 --> 06:56.130
好 咱们来试一下吧

06:56.130 --> 06:59.130
NPM Start

06:59.130 --> 07:02.570
看一下启动

07:02.570 --> 07:03.570
启动啊

07:03.570 --> 07:04.570
启动完了过后呢

07:04.570 --> 07:05.570
还告诉你监听了什么

07:05.570 --> 07:06.570
监听了5000端口

07:06.570 --> 07:07.570
因为我们之前呢

07:07.570 --> 07:08.570
好像做了个改动

07:08.570 --> 07:09.570
在这个prod里边

07:09.570 --> 07:11.570
做了个监控的设置为5000

07:11.570 --> 07:13.570
知道这个配置啥意思了吧

07:13.570 --> 07:15.570
所以就配置这个cluster了

07:15.570 --> 07:17.570
好 你看有什么区别呢

07:17.570 --> 07:20.570
区别就在于这个空置台

07:20.570 --> 07:21.570
这边是不是就结束了

07:21.570 --> 07:22.570
因为它是作为

07:22.570 --> 07:23.570
我这里呢给了一个参数

07:23.570 --> 07:25.570
这个参数的意思就是守护进程

07:25.570 --> 07:27.570
让你启动的时候呢

07:27.570 --> 07:29.570
以守护进程的方式来运行

07:29.570 --> 07:30.570
那么这个时候

07:30.570 --> 07:31.570
它就在后台运行了

07:31.570 --> 07:32.570
哪怕我们把这个关掉

07:32.570 --> 07:33.570
会不会影响呢

07:33.570 --> 07:34.570
不会影响

07:34.570 --> 07:35.570
我们来看一下

07:35.570 --> 07:37.570
Local House 5000

07:37.570 --> 07:39.570
是不是可以对吧

07:39.570 --> 07:40.570
127

07:40.570 --> 07:42.570
0.0.1

07:42.570 --> 07:43.570
对不对

07:43.570 --> 07:44.570
没问题吧

07:44.570 --> 07:46.570
刚才我一个放大说小

07:46.570 --> 07:48.570
这个没什么区别

07:48.570 --> 07:49.570
好 那么也就是说

07:49.570 --> 07:50.570
我们在服务器那边

07:50.570 --> 07:51.570
就像把一个服务器的

07:51.570 --> 07:53.570
运行中端关掉也没有事

07:53.570 --> 07:54.570
对吧 这是我们需要的

07:54.570 --> 07:56.570
因为它是用守护进程来完成的

07:56.570 --> 07:57.570
而且呢

07:57.570 --> 07:58.570
它比较稳定

07:58.570 --> 08:00.570
它不会轻易地挂掉

08:00.570 --> 08:01.570
对于我们服务器网站

08:01.570 --> 08:03.570
这一点是非常重要的

08:03.570 --> 08:05.570
如果说我们想停调怎么办呢

08:05.570 --> 08:06.570
我们想停调的话

08:06.570 --> 08:08.570
我们就可以利用

08:08.570 --> 08:12.740
如果说我们想停调的话

08:12.740 --> 08:14.740
就运行NPM说

08:15.740 --> 08:16.740
Stop

08:19.740 --> 08:21.740
主进程72797

08:21.740 --> 08:22.740
这样来进程ID

08:22.740 --> 08:23.740
正在停调

08:23.740 --> 08:24.740
停调了

08:25.740 --> 08:26.740
停调之后呢

08:26.740 --> 08:27.740
咱们去看一下

08:27.740 --> 08:28.740
刷新

08:28.740 --> 08:29.740
这边不能访问了

08:29.740 --> 08:30.740
就这么简单

08:31.740 --> 08:32.740
最后我们说一下

08:32.740 --> 08:34.740
这个启动和停止

08:34.740 --> 08:35.740
它那个脚笨的配置

08:35.740 --> 08:36.740
主要说要启动

08:36.740 --> 08:38.740
停止的话很简单

08:38.740 --> 08:39.740
启动的时候呢

08:39.740 --> 08:40.740
它是有很多参数可以指定的

08:40.740 --> 08:42.740
比方说指定的标题

08:42.740 --> 08:43.740
Title

08:43.740 --> 08:44.740
这个参数有什么意义呢

08:44.740 --> 08:46.740
就是给这个应用的取个名字

08:46.740 --> 08:48.740
你如果说不设置的话

08:48.740 --> 08:50.740
它默认的全程就是Agg server

08:50.740 --> 08:52.740
然后呢跟上你的这个名字

08:52.740 --> 08:54.740
跟上你的这个名字

08:54.740 --> 08:56.740
我们比方说我们这里取个名字吧

08:56.740 --> 08:58.740
给它取个DoE

08:58.740 --> 08:59.740
Agg

08:59.740 --> 09:00.740
取个名字

09:00.740 --> 09:02.740
这个取这个名字有什么意义呢

09:02.740 --> 09:04.740
我建议大家都取一下

09:04.740 --> 09:05.740
取这个名字有什么意义呢

09:05.740 --> 09:06.740
意义在于呢

09:06.740 --> 09:07.740
我们到时候停止的时候呢

09:07.740 --> 09:08.740
可以指定名字的

09:08.740 --> 09:10.740
我停止哪个Agg应用

09:10.740 --> 09:11.740
不然的话

09:11.740 --> 09:12.740
到时候一停止

09:12.740 --> 09:15.740
它可能把所有的Agg应用都给停了

09:15.740 --> 09:16.740
所以我们这里呢

09:16.740 --> 09:17.740
最好指定一下

09:17.740 --> 09:18.740
Agg

09:18.740 --> 09:20.740
只针对这个应用

09:20.740 --> 09:21.740
来停止和启动

09:21.740 --> 09:22.740
这是比较题

09:22.740 --> 09:23.740
其他的端口号

09:23.740 --> 09:25.740
你可以通过这个东西来改

09:25.740 --> 09:26.740
我们这里的端口号呢

09:26.740 --> 09:28.740
是在这个配置里面的

09:28.740 --> 09:29.740
你也可以直接在这里设置

09:29.740 --> 09:30.740
所以说端口号呢

09:30.740 --> 09:32.740
我们也不用在这里去设置的

09:32.740 --> 09:33.740
我们直接可以在

09:33.740 --> 09:34.740
命令里面去设置端口号

09:34.740 --> 09:35.740
对吧

09:35.740 --> 09:36.740
比方说我们在这里

09:36.740 --> 09:37.740
启动的时候呢

09:37.740 --> 09:39.740
我们是用Port

09:39.740 --> 09:40.740
5001

09:41.740 --> 09:42.740
对不对

09:42.740 --> 09:43.740
好

09:43.740 --> 09:44.740
我们来运行看一下

09:45.740 --> 09:46.740
Start

09:46.740 --> 09:49.310
运行

09:49.310 --> 09:50.310
5001

09:50.310 --> 09:51.310
对不对

09:51.310 --> 09:53.310
而且现在是守护进程的模式了

09:53.310 --> 09:54.310
这个demo

09:54.310 --> 09:55.310
表示是否允许

09:55.310 --> 09:57.310
以守护进程的模式运行

09:57.310 --> 09:59.310
就是我们刚才看到的效果

09:59.310 --> 10:00.310
然后呢

10:00.310 --> 10:01.310
这是运行环境

10:01.310 --> 10:02.310
默认就是prod

10:02.310 --> 10:03.310
你不用去设置它

10:03.310 --> 10:04.310
默认就是prod

10:04.310 --> 10:05.310
这就是一个

10:05.310 --> 10:06.310
线上环境的启动方式

10:06.310 --> 10:08.310
后面就是Workers

10:08.310 --> 10:10.310
线程数量

10:10.310 --> 10:12.310
后面就是CPU的合数一致

10:12.310 --> 10:14.310
后面就是ATPS的配置

10:14.310 --> 10:15.310
密钥文件

10:15.310 --> 10:17.310
证数文件路径

10:17.310 --> 10:18.310
这个东西

10:18.310 --> 10:19.310
那么这个东西

10:19.310 --> 10:21.310
我不建议你在Agg里面去使用

10:21.310 --> 10:22.310
就是ATP

10:22.310 --> 10:23.310
到底ATPS协议

10:23.310 --> 10:24.310
还是ATPS协议

10:24.310 --> 10:25.310
就用ATP协议

10:25.310 --> 10:26.310
因为呢

10:26.310 --> 10:27.310
我们一般来说呢

10:27.310 --> 10:28.310
福气海外面

10:28.310 --> 10:30.310
还会套上一个inj格式

10:30.310 --> 10:32.310
我们一般会在inj格式里面

10:32.310 --> 10:35.310
去设置ATPS协议

10:35.310 --> 10:36.310
就完事了

10:36.310 --> 10:37.310
所以说呢

10:37.310 --> 10:38.310
我们这边的部署呢

10:38.310 --> 10:39.310
也很简单

10:39.310 --> 10:40.310
就是把这个东西

10:40.310 --> 10:41.310
上红道福气

10:41.310 --> 10:42.310
福气那边运行

10:42.310 --> 10:43.310
个mini-start就完事了

10:43.310 --> 10:45.310
不需要PML

10:45.310 --> 10:46.310
好

10:46.310 --> 10:48.310
这就是关于这个

10:48.310 --> 10:49.310
当然你也可以

10:49.310 --> 10:50.310
把用PML来运行

10:50.310 --> 10:51.310
也没事

10:51.310 --> 10:52.310
咱们这里呢

10:52.310 --> 10:54.310
就是关于Agg的部署

10:54.310 --> 10:55.310
把这个地方说了

10:55.310 --> 10:56.310
主要是说一下

10:56.310 --> 10:57.310
告诉大家Agg里面

10:57.310 --> 10:58.310
是有多个进程的

