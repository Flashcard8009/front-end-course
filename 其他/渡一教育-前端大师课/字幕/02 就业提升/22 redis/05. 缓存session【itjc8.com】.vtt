WEBVTT

00:00.180 --> 00:04.820
好 说一下Redis里面另一个比较常见的应用

00:04.820 --> 00:07.660
除了缓存消息体之外

00:07.660 --> 00:10.780
咱们还有的时候会缓存一些session

00:10.780 --> 00:14.860
因为我知道以前session先来吧

00:14.860 --> 00:19.260
先我们来安装一下session

00:19.260 --> 00:23.500
就是expresssession 对吧 你也学过了

00:24.500 --> 00:28.980
然后这边use 先导入

00:30.380 --> 00:34.220
我们看一下吧 设计到相关库expresssession

00:34.220 --> 00:37.140
安装expresssession导入它

00:37.140 --> 00:38.660
不止 拉过来

00:38.660 --> 00:43.430
然后强迫正的原因 把这个改成const

00:43.430 --> 00:46.470
拿到个session了 然后use

00:46.470 --> 00:50.230
好像应该就是一个use session

00:50.230 --> 00:53.510
use session OK 里面传一下配置

00:53.510 --> 00:55.790
配置的话就配置一个secret

00:55.790 --> 00:57.430
其他也不用它的配置

00:57.430 --> 00:58.590
secret

00:58.590 --> 00:59.790
就这个玩意吧

00:59.830 --> 01:02.790
配置还是来一个吧 来一个dui

01:02.790 --> 01:04.070
secret要加密嘛 对吧

01:04.070 --> 01:07.510
因为它本身就是发送了复不端一个cookie

01:07.510 --> 01:09.270
就是session id

01:09.270 --> 01:13.350
id 然后加密 通过这个密要来加密

01:13.350 --> 01:15.430
然后那边复不端再访问过来的时候

01:15.430 --> 01:17.030
是不是把个session id带过来

01:17.030 --> 01:18.310
然后这边去拿到secret

01:18.310 --> 01:20.190
那么传统的情况下

01:20.190 --> 01:21.430
默认情况下

01:21.430 --> 01:23.310
这个session 它在loads

01:23.310 --> 01:25.870
也是这个程序里面的内存里面

01:25.870 --> 01:26.750
对不对 因为我们知道

01:26.750 --> 01:28.230
session可以存出任何数据

01:28.270 --> 01:30.950
存在哪的 存在服务器端的

01:30.950 --> 01:31.910
服务器端内存

01:31.910 --> 01:33.030
那么我们现在服务器端

01:33.030 --> 01:34.390
是不是loads接式程序

01:34.390 --> 01:37.790
那么现在是存在loads接式程序的内存里面的

01:37.790 --> 01:39.630
那么loads接式程序内存里面的

01:39.630 --> 01:41.230
到底有什么问题呢

01:41.230 --> 01:42.390
其实也没啥问题

01:42.390 --> 01:43.830
主要的问题就在于

01:43.830 --> 01:44.910
它没有持久化 对吧

01:44.910 --> 01:47.350
在内存里面程序一停止

01:47.350 --> 01:49.670
那么整个loads接式内存就消失了

01:49.670 --> 01:51.390
它没有持久化 对吧

01:51.390 --> 01:54.070
而且如果说存着量大的一台服务器

01:54.070 --> 01:55.070
是不是扛不住

01:55.070 --> 01:56.910
内存太多了 对吧 扛不住

01:56.950 --> 01:58.270
所以说它们可以用Redis

01:58.270 --> 01:59.790
Redis可以放到别的服务器上

01:59.790 --> 02:00.950
当然我这个就不严实了

02:00.950 --> 02:02.470
我就就在一台机关一上

02:02.470 --> 02:03.430
那么可以模拟

02:03.430 --> 02:05.510
就相当于是可以带帮到别的服务器上

02:05.510 --> 02:06.310
那么别的服务器

02:06.310 --> 02:08.630
Redis本身在内存里面速度很快

02:08.630 --> 02:11.590
然后同时它又能够持久化

02:11.590 --> 02:13.150
跟持盘同步

02:13.150 --> 02:14.670
所以就非常舒服了

02:14.670 --> 02:16.870
那么现在我们来测试一下

02:16.870 --> 02:17.790
访问这个请求地址

02:17.790 --> 02:19.390
哎 我给它session加一个值

02:21.150 --> 02:21.950
访问这个时候

02:21.950 --> 02:23.750
我给它session加一个值

02:23.750 --> 02:24.830
来吧

02:24.830 --> 02:28.350
这里我给它来一个regsession

02:28.350 --> 02:29.630
然后给它加一个值

02:29.630 --> 02:30.830
比方说加一个什么呢

02:31.830 --> 02:34.230
name等于A等于1

02:34.230 --> 02:35.150
就来随便来一个

02:36.710 --> 02:37.110
session

02:40.310 --> 02:41.510
b等于2

02:41.510 --> 02:43.710
然后我们发生一个消息

02:43.710 --> 02:51.280
表示session已经有值了

02:54.380 --> 02:55.620
已经有值了

02:58.820 --> 02:59.740
就这样子

02:59.740 --> 03:00.820
没问题吧

03:00.820 --> 03:02.260
咱们看一下吧

03:03.540 --> 03:07.060
要不然我在这里再来一个随机数吧

03:07.060 --> 03:08.380
用于区分

03:08.380 --> 03:09.740
red随机数

03:09.740 --> 03:10.540
max

03:10.540 --> 03:11.140
2

03:12.220 --> 03:12.500
好

03:12.500 --> 03:13.740
这个随性已经有值了

03:13.740 --> 03:14.220
对吧

03:14.220 --> 03:14.540
好

03:14.540 --> 03:14.820
send

03:15.900 --> 03:17.300
那么现在我们另外一个

03:17.300 --> 03:18.740
另外一个接口

03:18.740 --> 03:18.980
b

03:20.260 --> 03:22.860
那么这个接口就把随性的值读出来

03:22.860 --> 03:24.260
发送给科普端

03:24.260 --> 03:24.380
好

03:24.380 --> 03:24.740
来吧

03:24.740 --> 03:25.620
来看一下

03:25.620 --> 03:26.020
session

03:26.700 --> 03:31.380
来一个A

03:31.380 --> 03:33.300
直接把session发送过去

03:33.300 --> 03:33.580
对吧

03:33.580 --> 03:34.340
regsend

03:35.180 --> 03:36.020
regsession

03:37.580 --> 03:37.820
好

03:37.820 --> 03:38.580
发送过去

03:38.580 --> 03:39.220
行了

03:39.220 --> 03:40.300
咱们把这个启动起来

03:40.900 --> 03:41.460
loadable

03:43.460 --> 03:44.060
npx

03:44.780 --> 03:46.180
loadable index

03:47.100 --> 03:47.300
好

03:47.300 --> 03:47.700
接下来

03:47.700 --> 03:48.020
咦

03:48.020 --> 03:49.020
怎么了

03:49.020 --> 03:55.870
它说probredReceivedOptionC

03:55.870 --> 03:57.790
它说有一个地方已经过时了

03:58.270 --> 03:59.470
undefend

03:59.470 --> 04:01.190
它说这个东西ReceivedOption

04:01.190 --> 04:02.310
这现在又更新了吗

04:02.310 --> 04:03.230
ReceivedOption

04:03.230 --> 04:05.630
它必须要提供这个Option

04:05.630 --> 04:07.110
这个Option干嘛的

04:07.110 --> 04:09.990
我记得我之前讲那个loader介绍的时候还没有

04:09.990 --> 04:10.590
received

04:11.590 --> 04:12.190
received

04:14.030 --> 04:16.070
强制session

04:16.070 --> 04:18.950
保存到session store里边

04:18.950 --> 04:22.550
尽管session没有被改变

04:25.430 --> 04:26.270
明白了

04:26.270 --> 04:26.790
明白了

04:28.390 --> 04:29.510
received

04:29.510 --> 04:31.750
那么这个东西就跟我们一会儿要讲的东西有关

04:31.750 --> 04:32.790
received

04:33.790 --> 04:37.030
是不是要强制把session保存到

04:37.030 --> 04:38.390
保存到磁盘里边

04:38.390 --> 04:41.070
保存到另外一个仓库里边

04:41.070 --> 04:42.750
那么由于我这里没有仓库

04:42.750 --> 04:43.870
所以说保存也没有意义

04:43.870 --> 04:44.190
对不对

04:44.190 --> 04:45.430
我没有给它提供仓库

04:45.430 --> 04:46.630
也就是说

04:46.630 --> 04:49.110
它这个库是允许你给它提供仓库的

04:49.110 --> 04:50.270
就是一个数据仓库

04:50.270 --> 04:51.430
比方说像redis

04:51.430 --> 04:52.550
就可以存出数据的

04:52.550 --> 04:52.990
对吧

04:52.990 --> 04:54.430
那么它可以把session的数据

04:54.430 --> 04:56.190
保存到相应的地方

04:56.190 --> 04:57.870
就这么个意思

04:57.870 --> 04:59.310
那么我们这里给它设为force

04:59.310 --> 05:00.670
因为我现在还没有用redis

05:00.670 --> 05:01.150
对吧

05:01.150 --> 05:03.790
就把毛老师保存在存里边得了

05:03.790 --> 05:04.070
好

05:04.070 --> 05:05.870
现在我们保存

05:05.870 --> 05:07.950
那么上一个警告没了

05:07.950 --> 05:09.030
下一个警告又来了

05:09.030 --> 05:10.230
它说

05:10.230 --> 05:11.630
这个option没有设置

05:11.630 --> 05:12.750
必须要设置

05:12.750 --> 05:17.720
那我看一下这个option有什么意思呢

05:17.720 --> 05:19.760
强制一个session

05:19.760 --> 05:22.360
意思没有初识化的

05:22.360 --> 05:26.360
没有初识化的session也要不要保存到数据库

05:26.360 --> 05:28.400
又要不要保存到仓库里边

05:28.440 --> 05:30.520
就是没有没有初识化的session

05:30.520 --> 05:31.480
就从来没用过的session

05:31.480 --> 05:32.720
要不要保存到仓库里面

05:32.720 --> 05:33.520
那肯定不保存

05:35.520 --> 05:35.800
好

05:35.800 --> 05:36.480
现在没警告了

05:36.480 --> 05:36.720
对吧

05:36.720 --> 05:37.840
这警告就看一下文档

05:37.840 --> 05:39.400
他总不能解决的

05:39.400 --> 05:39.560
好

05:39.560 --> 05:42.800
那么现在我们进入了这个localhost927

05:44.400 --> 05:46.320
看一下a

05:46.320 --> 05:47.400
所以session也有值的

05:47.400 --> 05:48.800
那么现在有session的

05:48.800 --> 05:49.440
session在哪

05:49.440 --> 05:50.600
在load解释里面

05:50.600 --> 05:51.000
对吧

05:51.000 --> 05:52.040
session在load解释里面

05:52.040 --> 05:54.000
现在我们访问b

05:54.000 --> 05:54.560
b呢

05:54.560 --> 05:56.200
是不是就拿出来的数据了

05:56.200 --> 05:57.000
对不对

05:57.000 --> 05:57.920
有什么这些东西

05:57.960 --> 05:59.560
这些东西我们都不太需要

05:59.560 --> 06:00.040
都不太需要

06:00.040 --> 06:00.600
我们需要的是

06:00.600 --> 06:02.080
这是我们session存的数据

06:02.080 --> 06:02.760
对不对

06:02.760 --> 06:04.640
数据拿出来了

06:04.640 --> 06:04.800
好

06:04.800 --> 06:05.800
那么现在呢

06:05.800 --> 06:07.120
你看现在我们的数据

06:07.120 --> 06:08.680
这是b

06:08.680 --> 06:09.560
这是a

06:09.560 --> 06:11.360
那么现在我们模拟另外一个用户

06:13.520 --> 06:15.360
现在已经有值了

06:15.360 --> 06:16.760
已经有值我就不存了

06:16.760 --> 06:18.640
我来判断一下

06:18.640 --> 06:19.600
这里判断一下

06:19.600 --> 06:22.400
判断一下已经有值就不存了

06:22.400 --> 06:23.240
已经有值了

06:23.240 --> 06:25.640
表现我们只判断有值的话

06:25.640 --> 06:26.400
我就不存了

06:26.400 --> 06:27.800
没有值的话我才存

06:28.800 --> 06:29.080
好

06:29.080 --> 06:31.960
这样子控制一下

06:31.960 --> 06:32.720
刷新

06:32.720 --> 06:33.320
刷新

06:33.320 --> 06:33.520
好

06:33.520 --> 06:34.320
那么这边刷新

06:34.320 --> 06:35.160
刷新

06:35.160 --> 06:36.160
这边是不变的

06:36.160 --> 06:36.440
对吧

06:36.440 --> 06:37.040
不变的

06:37.040 --> 06:37.280
好

06:37.280 --> 06:38.400
那么现在就是session

06:38.400 --> 06:39.280
那么session的原理

06:39.280 --> 06:40.040
我都已经讲过了

06:40.040 --> 06:40.840
不再追溯了

06:40.840 --> 06:42.320
客户端存了一个session id

06:42.320 --> 06:43.040
那么这个id呢

06:43.040 --> 06:45.560
对应服务器的内存里面的一个keyz

06:45.560 --> 06:46.440
那么发过去过后

06:46.440 --> 06:47.600
他把cookie带过去

06:47.600 --> 06:49.000
服务器就可以在内存中

06:49.000 --> 06:50.120
通过这个session id

06:50.120 --> 06:51.320
来找到对应的对象

06:51.320 --> 06:52.640
session其实就是一个对象

06:52.640 --> 06:53.360
你看到没

06:53.360 --> 06:55.600
这边拿到的session就是一个对象

06:55.600 --> 06:56.480
就是个对象

06:56.560 --> 06:57.880
它是通过客户端

06:57.880 --> 06:59.200
cookie id来进行观点的

06:59.200 --> 07:00.800
session id来进行观点的

07:00.800 --> 07:00.960
好

07:00.960 --> 07:02.000
那么我们现在的模拟

07:02.000 --> 07:02.840
另外一个用户

07:02.840 --> 07:04.120
那现在另外一个用户的话

07:04.120 --> 07:06.080
我就用siphon的浏览器了

07:06.080 --> 07:07.680
放一个浏览器

07:07.680 --> 07:09.360
现在我们来访问a

07:09.360 --> 07:11.680
另外一个用户访问a

07:11.680 --> 07:12.520
然后呢

07:12.520 --> 07:14.480
听见一个表签页

07:14.480 --> 07:15.200
再来访问个b

07:17.440 --> 07:18.400
你看是不是不一样的

07:18.400 --> 07:18.760
对吧

07:18.760 --> 07:20.680
两个用户是不一样的

07:20.680 --> 07:22.240
那么也就说这两个用户了

07:22.240 --> 07:22.960
session id

07:22.960 --> 07:24.480
存在客户端的cookie里边

07:24.480 --> 07:25.760
session id是不是不一样

07:26.480 --> 07:27.480
那么也就是我们现在

07:27.480 --> 07:29.200
就是一个键子对不对

07:29.200 --> 07:31.720
一个键是不是session id

07:31.720 --> 07:32.440
只呢

07:32.440 --> 07:33.400
只就是一个对象

07:33.400 --> 07:33.640
对吧

07:33.640 --> 07:34.880
session的一个对象

07:34.880 --> 07:35.920
这就是一个

07:35.920 --> 07:37.560
那么正好是符合

07:37.560 --> 07:39.000
radius的存出方式

07:39.000 --> 07:40.320
那么我们怎么来存呢

07:40.320 --> 07:41.480
我们就可以利用这个

07:41.480 --> 07:42.120
这个裤

07:42.120 --> 07:43.880
correct radius这个裤

07:43.880 --> 07:45.160
这个裤它帮我们引寫好了

07:45.160 --> 07:46.760
专门来搞定这个

07:46.760 --> 07:48.360
搞定这个express station的

07:48.360 --> 07:49.560
专门来搞定它的

07:49.560 --> 07:50.560
好来吧

07:50.560 --> 07:53.040
现在我们停止

07:53.040 --> 07:53.840
安装这个裤

07:53.840 --> 07:55.440
它这个裤要依赖radius裤

07:55.440 --> 07:56.400
这个毫无疑问的

07:56.400 --> 07:58.640
我们为了

07:58.640 --> 07:59.800
为了使用

07:59.800 --> 08:01.160
使用应用到这个session里边

08:01.160 --> 08:02.160
所以说安装这个裤

08:02.160 --> 08:04.000
这些我们都安装了对吧

08:04.000 --> 08:06.320
我们只需要安装correct radius

08:06.320 --> 08:07.240
就行了

08:07.240 --> 08:08.360
用起来极其简单

08:09.800 --> 08:11.440
那么它告诉你怎么用呢

08:11.440 --> 08:12.880
它告诉你就这样用

08:12.880 --> 08:13.960
加上一个store就行了

08:15.240 --> 08:15.880
加上一个store

08:20.220 --> 08:21.460
然后这里边

08:21.460 --> 08:23.180
前面还要写两句

08:23.180 --> 08:28.510
radius

08:28.510 --> 08:29.430
把这个复制过来吧

08:30.390 --> 08:30.830
复制过来

08:32.710 --> 08:33.910
导入radius

08:33.910 --> 08:34.990
导入这个session

08:34.990 --> 08:36.190
session的用法一样

08:36.190 --> 08:37.230
跟后边的用法一样

08:37.230 --> 08:37.430
对吧

08:37.430 --> 08:38.910
就是用一个中间键

08:38.910 --> 08:40.750
然后这里通过这个裤

08:40.750 --> 08:41.590
它是一个函数

08:41.590 --> 08:42.510
通过这个函数

08:42.510 --> 08:43.710
把session传进去

08:43.710 --> 08:45.190
把session的裤传进去

08:45.190 --> 08:46.430
它会得到一个radius store

08:47.870 --> 08:48.950
接下来我们要做的就是

08:50.430 --> 08:51.630
在session里边

08:51.630 --> 08:53.070
中间键里边进行配置

08:53.070 --> 08:54.630
它里边有一个配置叫store

08:54.630 --> 08:55.910
然后配置为这个

08:55.910 --> 08:57.070
这个数据仓库

08:57.070 --> 08:58.790
就是我们radius的数据仓库

08:58.790 --> 09:00.430
然后数据仓库里边要用到radius

09:00.430 --> 09:02.310
所以说把这个client传给它

09:02.310 --> 09:03.910
这个client就来自于

09:03.910 --> 09:06.150
这个radius创建的客户端

09:06.150 --> 09:08.910
可以说这里可以直接用这个client

09:08.910 --> 09:10.870
把client传给它就完事了

09:10.870 --> 09:12.110
对不对

09:12.110 --> 09:12.670
完事了

09:12.670 --> 09:14.230
现在我们保存

09:14.230 --> 09:17.430
为了让我们看得更加清楚一点

09:17.430 --> 09:19.390
我这里的最好这样子吧

09:19.390 --> 09:23.480
client snacks

09:23.480 --> 09:24.280
第6个

09:24.280 --> 09:25.440
下标为6的数据库

09:25.440 --> 09:26.840
我们用这个数据库

09:26.840 --> 09:29.240
这样子看得更加清楚一点

09:29.240 --> 09:30.320
好了

09:30.320 --> 09:31.520
现在我们运行

09:31.560 --> 09:36.680
load nps load index

09:36.680 --> 09:36.920
好

09:36.920 --> 09:37.960
接下来我们来看

09:37.960 --> 09:38.840
这边我们来运行

09:38.840 --> 09:40.440
这个a刷新

09:40.440 --> 09:41.360
谁信有值的

09:41.360 --> 09:42.400
那么现在的值在哪呢

09:42.400 --> 09:43.760
现在的值就不在我们load

09:43.760 --> 09:44.760
接实的内存里边了

09:44.760 --> 09:45.720
在哪呢

09:45.720 --> 09:46.240
在哪

09:46.240 --> 09:48.800
在我们的radius那个程序的内存里边

09:48.800 --> 09:49.120
对吧

09:49.120 --> 09:50.640
radius是一个独立的进程

09:50.640 --> 09:51.640
它是有程序的

09:51.640 --> 09:53.080
在那个程序里边

09:53.080 --> 09:53.280
好

09:53.280 --> 09:55.360
咱们可以看一下我们的数据库

09:55.360 --> 09:55.880
点击

09:58.080 --> 10:00.000
不能隐藏

10:00.080 --> 10:01.080
我怎么把关闭了

10:02.800 --> 10:04.000
外观

10:04.000 --> 10:05.600
活动蓝

10:05.600 --> 10:07.480
点击右键radius

10:07.480 --> 10:09.080
看一下吧

10:09.080 --> 10:12.040
这边6刷新一下展开

10:12.040 --> 10:12.640
是不是有了

10:12.640 --> 10:13.120
对吧

10:13.120 --> 10:14.720
那么它的 key 兼值是什么

10:14.720 --> 10:16.400
兼值就是一个 c 型 id

10:16.400 --> 10:17.680
你看它就是个 c 型 id

10:19.280 --> 10:20.760
这个插件太恶心了

10:20.760 --> 10:22.320
这个兼值就是 c 型 id

10:22.320 --> 10:23.200
然后它的值呢

10:23.200 --> 10:25.800
就是一个序列化的 c 型对象

10:25.800 --> 10:26.880
就这么简单

10:26.880 --> 10:27.720
就这么简单

10:27.720 --> 10:29.280
然后你看吧

10:29.320 --> 10:31.000
c 型那么这边拿到的值

10:31.000 --> 10:32.800
你看是不是拿到值了

10:32.800 --> 10:33.120
对吧

10:33.120 --> 10:34.320
拿到值了

10:34.320 --> 10:36.160
然后如果说我们进入另外一个浏览器

10:36.160 --> 10:38.000
Safari里边再来一次

10:38.000 --> 10:40.520
另外一个就是模拟另外一个用户

10:40.520 --> 10:42.320
另外一个用户刷新

10:42.320 --> 10:43.000
拿到值

10:43.000 --> 10:43.720
这些都没问题

10:43.720 --> 10:45.800
然后我们看到这个

10:45.800 --> 10:47.360
这边肯定是有新的值了

10:47.360 --> 10:47.920
刷新

10:47.920 --> 10:48.280
你看

10:48.280 --> 10:49.880
所以多了一个 c 型 id 了

10:49.880 --> 10:50.520
对吧

10:50.520 --> 10:51.080
就这么简单

10:51.080 --> 10:52.200
这就是 c 型的本质

10:52.200 --> 10:53.120
一个 c 型 id

10:53.120 --> 10:55.040
对应一个值

10:55.040 --> 10:56.040
然后科普桑那边

10:56.040 --> 10:57.360
c 型里边存 c 型 id

10:57.400 --> 10:59.480
Cookie 那边由于Cookie有 c 型 id

10:59.480 --> 11:00.880
所以如果科普桑请求服务器的时候

11:00.880 --> 11:02.240
他会把 c 型 id 带过来

11:02.240 --> 11:03.000
那么服务器那边

11:03.000 --> 11:05.280
根据 c 型 id 去查询他对应的数据

11:05.280 --> 11:05.600
对不对

11:05.600 --> 11:06.880
存在服务器上的

11:06.880 --> 11:09.040
之前是存在 low 的接受的服务器上的

11:09.040 --> 11:12.680
那么现在存在的是 Redis 的程序里边了

11:12.680 --> 11:14.080
Redis 的程序里面是不是可以拆分

11:14.080 --> 11:15.520
拆分到不同的服务器

11:15.520 --> 11:16.520
就这么个意思

11:16.520 --> 11:17.440
这是关于 c 型

11:17.440 --> 11:19.000
那么后边的写法都是完全一样的

11:19.000 --> 11:19.520
没有什么区别

11:19.520 --> 11:21.400
就前面的配置一下就完成了

11:21.400 --> 11:24.160
当然这里边还可以配置什么 Ttl

11:24.160 --> 11:25.440
配置它的过期时间

11:25.440 --> 11:26.960
那么过期时间如果说不配置的话

11:26.960 --> 11:29.720
它默认跟那个 cookie 的过期时间一样

11:29.720 --> 11:31.040
跟那个 cookie 的过期时间

11:31.040 --> 11:33.280
就是你如果出去设置的 cookie 的过期时间

11:33.280 --> 11:34.920
那么跟 cookie 的过期时间一样

11:34.920 --> 11:35.960
但如果你设置的话

11:35.960 --> 11:37.640
那么就按照你设置来来

11:37.640 --> 11:40.040
比方说我这个 c 型 id 只有十秒钟

11:40.040 --> 11:40.880
保存

11:40.880 --> 11:41.480
那就看呗

11:44.320 --> 11:44.800
刷新

11:46.560 --> 11:48.520
然后这边来刷新

11:49.880 --> 11:50.280
Ttl

11:52.000 --> 11:52.800
快完了

11:52.800 --> 11:53.640
两秒钟

11:54.640 --> 11:56.360
你没了

11:56.360 --> 11:57.360
这个没了

11:57.360 --> 11:57.880
刷新

11:57.880 --> 11:59.000
你看声音就没了

11:59.000 --> 12:00.040
就这么简单

12:00.040 --> 12:01.440
这就是 Ttl

12:01.440 --> 12:02.800
根据情况自己来吧

12:02.800 --> 12:03.040
好了

12:03.040 --> 12:06.040
这就是关于 c 型的 radius 缓存

12:06.040 --> 12:07.880
其实 radius 我们再重申一下

12:07.880 --> 12:08.960
就是在做缓存的

12:08.960 --> 12:10.360
一般来说就是在做缓存

12:10.360 --> 12:12.560
也不会去做什么其他玩意

12:12.560 --> 12:14.240
它的优势在于

12:14.240 --> 12:15.680
存去数效率非常非常高

12:15.680 --> 12:16.800
因为它的内存力表

12:16.800 --> 12:19.920
而且同时可以一步的进行

12:19.920 --> 12:21.040
同步到磁盘

12:21.040 --> 12:23.040
但是你不能太相信那个玩意

12:23.600 --> 12:25.120
它有可能会造成数据丢失的

12:25.120 --> 12:26.920
它不像数据库那么严谨

12:26.920 --> 12:27.600
真正的就不像

12:27.600 --> 12:29.040
myscore 芒果DB那么严谨

12:29.040 --> 12:31.120
它有可能会造成数据丢失的

12:31.120 --> 12:32.720
因为它是做缓存的

12:32.720 --> 12:34.480
所以说丢失也无所谓

12:34.480 --> 12:35.360
我们的数据还在

12:35.360 --> 12:35.600
对吧

12:35.600 --> 12:36.800
还在真实的数据库里边

12:36.800 --> 12:38.600
还在myscore 芒果DB里边

12:38.600 --> 12:40.840
所以说不能说我用 radius

12:40.840 --> 12:42.040
就不用其他数据库了

12:42.040 --> 12:42.600
肯定不行了

12:42.600 --> 12:44.440
radius 就是来做缓存的

12:44.440 --> 12:44.640
OK

12:44.640 --> 12:46.400
这是关于 radius 的课程

12:46.400 --> 12:46.680
来了

