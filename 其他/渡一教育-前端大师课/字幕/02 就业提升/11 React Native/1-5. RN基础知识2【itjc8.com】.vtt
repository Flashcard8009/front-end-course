WEBVTT

00:00.180 --> 00:10.940
ok 啊 然后接下来咱们继续啊 上节课的话我们把这个rng 基础知识 把前面三个讲了啊 样式布局图片 然后文本输入

00:11.380 --> 00:20.940
以及这个按钮 那么现在的话你基本上就是整个试图的呈现啊 比如说文字的呈现 图片的呈现啊 包括就是

00:21.500 --> 00:25.540
如何和用户进行一个互动 那这些的话你现在是没有问题的

00:26.220 --> 00:29.420
好 然后接下来的话我们这边这节课的话我们把后面三个开了

00:30.020 --> 00:33.180
那首先第一个 第一个的话就是关于这个滚动试图

00:33.860 --> 00:40.420
ok 那滚动试图呢 其实就是我们这个移动端应用里面一个非常重要的操作 那就是这个滑屏

00:41.340 --> 00:46.580
啊 还记不记得我们之前在讲这个web app的时候 我们当时的滑屏操作是怎么做的

00:47.460 --> 00:52.140
我们当时的滑屏操作是不先把这个默认事件 我们先把它禁止了

00:53.020 --> 00:58.980
禁止掉了之后 然后我们使用什么呢 我们使用第三方库 我们当时使用的是这个sweeper.js

00:59.860 --> 01:01.340
是不是来做的这个滑屏效果

01:02.380 --> 01:09.660
啊 那在这个rn里面的话 他就直接给我们提供了这个滚动试图的这个组件 叫做screw view

01:10.500 --> 01:18.260
啊 他是一个通用的可滚动的这个容器啊 你可以在里面放入多个组件和试图啊 并且他可以就是

01:18.660 --> 01:19.540
是不同类型的

01:20.180 --> 01:26.700
而他可以是垂直滚动 也可以是水平滚动 通过这个horizontal属性来设置

01:27.460 --> 01:32.660
好 那我们这边让我们来看这么一个例子 ok 啊 先把这个我先把这个拿过来

01:35.670 --> 01:46.140
嗯 这边啊 这边的话我创建了一个对象 一个叫做log的对象 这个log对象里面 这边就记录了什么呢 记录了这个

01:46.820 --> 01:50.940
啊 图片他的一个地址 那就在这边记录了这个图片的宽膏

01:51.500 --> 01:54.460
好 然后就在这边 这边的话你得引入这个screwview

01:55.660 --> 01:56.140
screw

01:58.270 --> 01:59.350
screwview

02:00.310 --> 02:04.470
ok 把这个引入 引入之后 然后接下来在这边

02:05.670 --> 02:07.830
这边是关于这个screwview啊

02:09.350 --> 02:14.150
screwview 好在这边 你看最外层的话 你先包一个这个screwview

02:15.110 --> 02:23.110
就最外层screwview啊 代表什么呢 代表这个他是可以一个滚动的 他这边抱错包的什么

02:24.070 --> 02:34.870
没有 啊 这边没有结束 ok啊 然后里面 里面的话就放你这个很多很多的这个内容 那我们这边我们来看一下啊 然后这边我就直接拿过来了

02:36.070 --> 02:42.790
这边 我把这个内容 把拿过来啊 你看我这边放了什么 是放了一个这个text

02:43.350 --> 02:47.910
那放了什么很多个image 大家这边又是text image text image

02:48.310 --> 02:55.830
就是一段文字下面几张图片啊 一个文字下面几张图片 这个是我们经常就是经常遇到了一种场景

02:56.470 --> 02:58.710
对吧 好 大家我们这边我们保存一下

03:00.550 --> 03:03.470
保存了之后 然后这边他抱了个错 是吧 我们看一下

03:04.310 --> 03:06.070
天车啊 这个image他找不到

03:07.910 --> 03:11.990
把这image你把它引入进来啊 大家这边要重新保存

03:12.870 --> 03:18.870
OK啊 保存之后 然后就在这边你来看一下啊 你看我们这边的一个这个滚动的这个试图

03:19.190 --> 03:19.990
就做出来了

03:21.270 --> 03:27.030
看没有啊 整个这个可以滚动的啊 非常方便啊 就不像以前这个web app

03:27.270 --> 03:34.790
我要么自己写 自己写的话比较麻烦 是吧 那我就用这个第三方的这个库啊 当时用的是swiper.js

03:35.270 --> 03:37.590
那么这个rn里面他就直接给你提供了

03:38.150 --> 03:42.230
对吧 你这边要这个滚动啊 可以直接用这个screw view

03:42.790 --> 03:45.030
这是这个滚动这个试图

03:45.910 --> 03:49.590
好 下一个 下一个的话是关于这个长列表

03:50.390 --> 03:54.230
就是我们这个列表 列表的话也是一个非常常见的这个需求

03:55.190 --> 03:55.990
对吧

03:55.990 --> 04:00.630
啊 那我们这边的话在这个rn里面 他给我们提供了两种长列表的方式

04:00.950 --> 04:05.190
一种是flat list 一种是section list

04:05.350 --> 04:10.630
这两种的话他其实都是基于什么呢 都是基于这个screw view的

04:11.110 --> 04:14.470
他是在这个screw view的基础上 然后做的这个扩展

04:14.870 --> 04:18.870
啊 然后接下来延伸出的flat list or section list

04:19.990 --> 04:23.270
好 我们这边呢 我们先来看什么呢 先来看这个flat list

04:24.070 --> 04:29.270
flat list的话他是一个用于垂直滚动的这个列表

04:29.910 --> 04:35.030
啊 然后接下来他这边试就是更是于什么呢 更是于长列表数据

04:35.430 --> 04:36.710
各数可以增三

04:37.350 --> 04:39.990
然后和这个screw view 他不同的是什么呢

04:40.550 --> 04:41.510
flat list

04:42.230 --> 04:45.350
他不会立即渲染所有元素

04:45.830 --> 04:49.350
而是优先渲染屏幕上可见的元素

04:49.750 --> 04:52.550
那也就是说他在这边的话 是不是做了一个性能上面的优化

04:53.750 --> 04:57.670
对不对啊 比如说我这个列表的话 我这个东西非常非常的多

04:58.310 --> 05:00.710
啊 非常非常多表有100个 1000个

05:01.030 --> 05:02.950
对吧 我不可能全部把它渲染出来

05:03.350 --> 05:08.470
那我就干嘛呢 我先优先渲染屏幕上可见的啊

05:09.190 --> 05:11.430
啊 这个flat list他有两个属性

05:12.070 --> 05:15.270
一个是data 一个是render item

05:15.830 --> 05:17.750
data的话代表是你的数据员

05:18.230 --> 05:23.910
而这个render item他就是从你的数据员里面一个一个去解析啊

05:24.550 --> 05:26.150
好 然后我们这边我们来看个例子嘛

05:26.870 --> 05:27.670
来看个例子

05:28.630 --> 05:31.430
然后把这个 把这个注释掉

05:32.390 --> 05:33.590
啊 这个是screw view

05:33.590 --> 05:35.190
screw view我们也把它注释掉

05:36.150 --> 05:39.510
OK 好 然后再让我们这边呢 我们把这个flat list

05:41.110 --> 05:42.710
flat list

05:43.510 --> 05:44.390
把它引进来

05:45.430 --> 05:47.430
OK 然后这边首先的话最外层

05:48.070 --> 05:49.590
这边那是flat list

05:51.030 --> 05:53.670
啊 他里面不包东西啊 这边不包东西

05:53.670 --> 05:55.830
啊 这边flat list啊

05:55.910 --> 05:57.830
啊 这边他就写成一个单标签就可以了

05:58.550 --> 06:01.510
OK 好 然后接下来这边这边他就有两个

06:01.830 --> 06:04.230
一个是什么呢 一个是data

06:04.870 --> 06:07.830
另外一个是什么呢 另外一个是render item

06:08.550 --> 06:11.750
这两个啊 这两个也是就是必须要传的这个属性

06:12.390 --> 06:14.230
那首先这个data data是什么呢

06:14.550 --> 06:18.230
data的话就是你的数据啊 比如我们这边在外面

06:18.790 --> 06:19.990
我们来写一个这个数据

06:20.550 --> 06:23.990
const一个data啊 我们这边写成一个数据

06:24.950 --> 06:26.390
好 我们就把这个数据拿过来嘛

06:27.350 --> 06:28.470
就把这个数据拿过来

06:30.500 --> 06:34.100
这边啊 这个是我们的这个数据flat list的数据

06:34.740 --> 06:39.940
啊 这边注释写一下 这个是flat list所用数据

06:41.860 --> 06:46.100
所用数据 OK 好 然后接下来那这边data是不是

06:46.100 --> 06:48.740
就是应该是等价于什么 这不等于这的data

06:49.620 --> 06:53.460
对吧 好 OK 那这边就是data

06:54.180 --> 06:56.340
好 然后接下来这个render item

06:56.900 --> 07:01.460
render item的话 它对应了值是什么呢 它对应的值是一个函数

07:02.260 --> 07:06.020
OK 这边一个函数啊 然后现在在这个函数里面

07:06.020 --> 07:08.580
你需要返回一个组件

07:08.980 --> 07:11.540
对你最终的话需要返回一段这个gst

07:12.100 --> 07:14.660
啊 那你这边你可以就这边return

07:15.220 --> 07:17.540
返回一段gst

07:17.940 --> 07:21.140
好了 这个gst的话呢 我这边就用什么呢 就用这个text

07:21.940 --> 07:27.300
OK text 然后里面的内容呢 里面的内容的话 我们这边

07:27.620 --> 07:32.980
这边的话这个render item它会干嘛呢 它会去从这个数据员去拿每一项

07:33.700 --> 07:36.900
自动把每一项拿过来啊 拿过来之后呢 像我们这边

07:37.300 --> 07:40.900
我们这边通过结构来拿到数据员的每一项

07:41.460 --> 07:45.940
拿到之后然后接下来这里 这里我们就渲染item点

07:46.500 --> 07:49.060
因为我们这边是个对象嘛 是吧 item点key

07:49.380 --> 07:54.980
对应的是这个名字 对不对 所以这边就是应该是item点key

07:56.020 --> 08:00.660
OK 好 然后我们这边我们来看一下啊 我们这边保存

08:02.020 --> 08:06.500
你看 这边已经出来了啊 是不是已经出来了

08:06.980 --> 08:10.260
对不对 你看当我们这个列表因为内容不多啊 内容不多

08:10.980 --> 08:15.300
说这边那就已经就出来了 我这边在教案里面我还给了一个

08:16.660 --> 08:17.940
item给了一个样式

08:18.740 --> 08:21.140
把这个样式加上嘛 我就直接把拿过来

08:21.940 --> 08:25.220
这边有个样式 然后在这边的话你把这个样式加上

08:25.860 --> 08:28.580
等于一个style是点 item

08:29.460 --> 08:30.260
好 保存一下

08:31.540 --> 08:35.620
保存了之后然后接下来这边你来看一下 是每一项就出来了

08:37.140 --> 08:41.540
看到没有 每一项就出来了 这是关于这个flat list

08:42.100 --> 08:47.140
flat list这个是非常常用的啊 非常非常常用 一个这个常列表

08:47.540 --> 08:49.780
我这边让我比说我把这个数据加多一点

08:50.980 --> 08:57.220
我这边的话 再来再来啊 把这个数据加多加多之后 然后下这边保存一下

08:58.740 --> 09:02.020
好 保存了之后 然后接下来的话 我们这边我们来看一下

09:03.700 --> 09:06.340
这边 你看他是不是可以有一个这个滚动

09:07.700 --> 09:12.260
对不对 有一个滚动 好了刚才抱了一个错误啊 我看抱了个什么错误

09:13.220 --> 09:15.460
哦 这边的话他是说这个key

09:16.660 --> 09:17.620
key相同

09:20.580 --> 09:24.420
他说有多个多个这个key啊 就是我们这边的话

09:25.140 --> 09:29.940
这边的话我们应该是给他设置一个key啊 这个就和那个react

09:30.500 --> 09:34.020
是一样的对吧react你在设置这个多项的时候

09:34.580 --> 09:36.420
你在做这个数组

09:37.300 --> 09:42.420
数组的这个循环的时候你要设置一个key那这边的话也是一样啊 这边这个key的话

09:42.900 --> 09:45.060
我记得是key stick

09:46.020 --> 09:49.220
key structure啊 我看我看一下这个flat list的值不值得

09:51.220 --> 09:56.500
key啊 有看到没有 这边key structure啊 那你这边让你给他设置一下

09:59.450 --> 10:02.010
这边的话对应 d

10:04.170 --> 10:11.690
呃 这边应该是这里是吧 t 然后extractor啊对应的是什么呢 对应的也是一个函数

10:12.170 --> 10:18.890
啊 对应的也是一个函数 那我这边呢接受接受item然后一个index

10:19.450 --> 10:23.130
我们以什么来作为我们的key呢 就以这个index来作为我们的key

10:23.770 --> 10:26.330
好吧 好 大家我们这边我们保存一下

10:28.090 --> 10:31.210
ok 这次就ok了那就不会爆错了

10:32.010 --> 10:34.810
好 我们这边来看一下啊 那这边看不到什么效果

10:35.610 --> 10:36.250
这边是不是

10:36.890 --> 10:41.610
就是一个这个可以滚动的这个列表对不对 长列表

10:42.090 --> 10:44.410
啊啊 这边重新刷新一下呢

10:45.530 --> 10:51.770
再刷新一下 刷新了这边他重新打爆你看一下他会不会有那个错误 你看是不是就没有了

10:52.490 --> 10:55.210
对不对 这就没有那个错误了 ok

10:56.730 --> 10:57.770
这是关于这个

10:59.210 --> 11:00.330
关于flat list

11:01.210 --> 11:05.450
除了flat list以外 他还有一个叫做section list

11:06.330 --> 11:10.410
section list和flat list他的区别就是这个section list

11:10.490 --> 11:13.770
他带有什么呢 他带有一个这个标题

11:14.650 --> 11:19.290
啊 他带有一个标题 让他这边接受那么几个 首先的话是一个section

11:20.170 --> 11:24.810
这section list就相当于刚才的什么呢 就刚才相当于刚才的这个data

11:25.770 --> 11:29.770
看到没有 就相当于是这个data好 然后接下来的话这个

11:31.050 --> 11:33.450
render item render item是不和刚才是一样的

11:33.930 --> 11:40.170
就是虽然你这个数据的每一项啊每一项好 然后还有一个这个render section header

11:40.890 --> 11:43.690
虽然什么呢 就是虽然你的title

11:44.570 --> 11:47.610
啊 虽然你的title好 我们把这个例子我们把它写下吧

11:49.610 --> 11:52.810
好 把这个这个我把它折起来 我把它注射掉

11:54.920 --> 11:57.560
啊 注射掉好像就不能折起来是吧啊 没关系

11:58.280 --> 12:01.560
好 让大家我们这边的话我们先把那个section list

12:04.950 --> 12:08.310
是叫section list吧啊 对了section list

12:08.870 --> 12:10.310
先把这个section list

12:10.870 --> 12:13.270
你进来啊 这边是section list

12:13.910 --> 12:15.510
所用到的数据

12:19.100 --> 12:22.380
OK啊 我们这边仍然是const一个这个data

12:22.940 --> 12:25.820
等于他对应的是一个什么 是不是应该是个数组啊

12:26.460 --> 12:30.060
好 那数组然后这样我们把这边拿过来

12:32.710 --> 12:36.390
啊 你可以看到和刚才不一样的是刚才的话他这边的话就是

12:36.790 --> 12:38.630
数组里面是不是就是一项一项的数据

12:39.270 --> 12:42.150
他这边的话就是什么呢 他这边的对应虽然也是一项一项的数据

12:42.230 --> 12:45.350
但是他分为两个 一个是title 一个是data

12:45.910 --> 12:47.910
那边这个也是title data

12:48.630 --> 12:51.430
OK 好 然后这样我们这边把这个注射掉

12:53.190 --> 12:55.030
然后这边的话是section

12:56.070 --> 12:57.030
section list

12:57.830 --> 12:59.990
他也是就是写个单标签就可以了

13:01.270 --> 13:02.390
啊 写个单标签

13:03.110 --> 13:04.870
好 然后接下来这边的话就是

13:05.430 --> 13:09.110
首先的话他这边的话就不是data了 刚才这边是不是data等于data

13:09.750 --> 13:13.110
他这边就不是data了 他这边是什么呢 他这边是sections

13:14.150 --> 13:16.230
sections对应的是这个data

13:16.870 --> 13:19.910
好 然后接下来的话 这边的话这个render item

13:20.550 --> 13:22.470
啊 render item也和刚才是一样的

13:23.270 --> 13:26.070
啊 这边的话就是直接返回

13:27.350 --> 13:32.150
直接返回一个这个text这个组件啊 拿到这个item

13:32.710 --> 13:37.350
拿到他这边这里面的每一项啊拿到这里面的每一项

13:38.070 --> 13:39.590
这是这个render item

13:40.150 --> 13:45.910
然后除此之外的话 这边他还可以有一个什么呢 还可以有一个这个render section header

13:47.190 --> 13:51.190
看到没有啊 那这个质能提示太强大了 把这个稍微关一下

13:51.830 --> 13:55.670
这质能提示太强大了啊 这边的render section header

13:56.230 --> 13:59.750
这个是什么呢 这个就是渲染你的这个标题

14:00.630 --> 14:02.710
看到没有啊 渲染你的这个标题

14:03.270 --> 14:07.430
啊 渲染你的这个标题 然后接下来的话 这边的话通过结构拿到这个section

14:07.910 --> 14:13.670
拿到这个section section是什么 section就是你整个每一个这一项 看到没有啊 这个第一项

14:14.470 --> 14:19.190
第二项 然后接下来我这边的话 然后使用什么 是不是使用这个title

14:19.910 --> 14:26.150
对不对啊 我这边也是返回一个组件啊 也是返回一个组件啊 这边质能提示直接给我提示出来了啊

14:26.790 --> 14:30.950
啊 最后就是这个key key的话也是和这是一样的

14:31.910 --> 14:34.310
ok啊 来我们这边我们保存一下

14:36.150 --> 14:39.910
保存啊 保存了 然后这样我们这边我们过来看一下

14:40.630 --> 14:42.950
你看这边是不是出来了 你看这边是不是有个这个界

14:43.670 --> 14:44.790
这边有一个这个地

14:45.750 --> 14:50.870
看到没有啊 当然我现在的话 因为就是呃他比较靠上面

14:52.230 --> 14:55.110
比较靠上面 所以你看不到我这边我给他加一个样式

14:55.990 --> 14:57.750
我这边要加一个这个style

14:58.550 --> 15:05.750
style等于一个style是点list 然后在下面加一个list

15:08.890 --> 15:11.770
加一个list 这边的话给一个这个margin top吗

15:14.040 --> 15:16.600
margin top 给一个20

15:19.800 --> 15:22.920
给一个20好 然后再这边的话保存一下

15:25.160 --> 15:29.720
ok啊20 这边是不是就是稍微有个20的这个见觉 对不对 你看这边

15:30.280 --> 15:34.120
是出来了啊20你觉得不够这边的话 稍微多给一点

15:36.740 --> 15:42.500
ok 然后你看这边这边是不是有个标题啊 d 这边呢有一个这个g

15:43.300 --> 15:49.540
看到没有啊 这就是关于section list 他和flat和这个flat list 他们的根本

15:49.540 --> 15:52.020
区别就是他带一个什么呢 他带一个标题

15:52.660 --> 15:57.380
啊有就是我们在做开发的时候我们会遇到这种是不带标题的这种列表

15:57.860 --> 16:00.260
那你就可以使用这个section list

16:00.820 --> 16:02.260
啊 ok

16:03.860 --> 16:10.660
啊啊关于列表我们后面还会详细啊还会详细的来说包括这个列表他的这个下拉刷新啊

16:11.220 --> 16:18.900
上拉加载这些我们还会想说我们这边呢只是快速的把这里面的一些基础知识 我们把它过一遍啊

16:19.620 --> 16:20.820
你先有一个印象吗

16:21.780 --> 16:26.180
好这边关于这个section list 我们用到了四个属性section是

16:26.740 --> 16:33.060
Render item Render section header 还有这个key extract啊这四个我们是不是都用到了

16:33.780 --> 16:35.540
对吧啊你可以看一下

16:37.220 --> 16:44.180
啊然后最后一个最后一个就是网络链接啊我们在开发一个应用的时候我们往往还需要干嘛呢

16:44.580 --> 16:46.740
还需要从这个服务器上面

16:47.460 --> 16:51.860
去获取数据也就是我们这个数据的话不是说就是都是在本地的

16:52.580 --> 16:58.420
对吧我们是就是和服务器进行通信拿到数据然后进行一个渲染

16:59.220 --> 17:02.340
那在RN里面的话那支持什么呢支持使用这个fetch

17:02.900 --> 17:08.740
以及这个阿甲克斯来发送这个请求啊但现在的话一般都是推荐使用这个fetch

17:09.220 --> 17:13.860
因为fetch的话它是基于这个promise的解决了那个回掉dv的这个问题

17:14.580 --> 17:16.260
对吧但是你一定要注意啊

17:16.820 --> 17:22.900
就是他之前的话他是支持就是你是http协议没有问题

17:23.620 --> 17:26.740
但是现在现在的话就是默认你看我这写的有

17:27.300 --> 17:30.820
默认iOS的话他会阻止所有的http请求

17:31.700 --> 17:33.700
就让大家使用https

17:34.260 --> 17:38.900
把这个从安卓9开始也是默认阻止http请求

17:39.380 --> 17:45.220
也就是说你这个你如果发送的是http请求的话啊你这边可能会存在就是这个拿不到数据的

17:45.860 --> 17:48.580
情况啊说说你看我这边我这边还是

17:49.140 --> 17:53.380
用了什么呢就是去找了个接口这是那个cload那个

17:54.260 --> 17:59.220
cload的啊就load的这个社区里面提供的就有个叫做cload

18:00.020 --> 18:05.940
这是load接社区啊他这边提供了一个什么呢提供了一个api我从他这边拿的

18:06.820 --> 18:08.100
就这边这边是不是有个api

18:08.980 --> 18:14.100
对不对啊我从他这边拿的拿的这么一个api你这边你可以看一下

18:15.300 --> 18:17.620
怎么样啊拿到这些数据啊

18:18.260 --> 18:24.660
啊这个这个其实还有点麻烦啊还有点麻烦因为我之前我尝试了就是做一种

18:25.060 --> 18:30.500
那种自签名的啊就是自己在自己本地做这个https的这个签名

18:31.060 --> 18:35.140
呃他还不行他不认他必须是那种标准的那种https

18:35.780 --> 18:41.380
所以这个我们在后面在做的时候这个问题还挺麻烦的啊我想想

18:42.020 --> 18:44.500
后面讲课的时候我们用什么方法来解决

18:46.180 --> 18:49.700
啊但你平时做开发的时候这个其实和我们前端是无关的

18:50.180 --> 18:55.940
因为服务器那边的话是这个是什么是那个后端是不是提供给我们

18:56.740 --> 19:01.300
对不对啊我们平时做开发的时候然后他们那边把接口提供给我们我们直接

19:01.540 --> 19:03.780
直接正常发请求就可以了啊

19:04.340 --> 19:09.940
但我们现在因为我们没有https的这个服务器说现在的话就这个问题还挺麻烦的

19:10.660 --> 19:13.940
OK好我们这边来看一下吧来看一下这个网络请求

19:15.460 --> 19:17.460
这整个网络请求其实有点简单

19:18.420 --> 19:21.940
呃我们把这个写一下吧啊把这个

19:22.740 --> 19:26.020
注释掉啊这边这边的话发送

19:26.980 --> 19:35.320
网络请求啊发送网络请求啊我这边的话就是

19:36.680 --> 19:50.700
写一个这边的话view啊这边style等于一个style

19:51.660 --> 19:54.700
container啊然后接下来的话这里

19:56.060 --> 19:57.900
里面一个什么呢里面一个barton

19:59.500 --> 20:00.620
barton我们没有删吧

20:02.380 --> 20:07.260
呃删了是吧啊barton删了啊重新引一下啊这边barton

20:07.740 --> 20:10.620
barton然后接下来这边的话就是获取数据

20:11.180 --> 20:12.700
你看我我都容易写错

20:13.500 --> 20:17.740
是吧平时写了一个web写惯了他这次通过什么是不是通过title

20:18.700 --> 20:23.900
啊这边获取啊数据然后接下来这边有一个on price

20:24.940 --> 20:29.180
等于一个啊我们这边price handle

20:29.980 --> 20:32.780
啊on on price handle

20:33.420 --> 20:39.580
好然后接下来这边呢在这外面啊在这外面啊这边的function

20:40.940 --> 20:42.220
price handle

20:42.780 --> 20:47.180
OK啊在这里面这里面的话我们就干嘛呢我们这边呢

20:47.180 --> 20:52.300
我们这边呢就来请求啊请求的话这边呢就是使用什么呢直接使用废弃

20:53.500 --> 20:56.540
怎么样使用废弃然后你把这个链接拿过来

20:59.370 --> 21:03.930
拿过来好然后整体的话他会干嘛他会返回一个是不是promise

21:04.570 --> 21:10.010
啊promise要叫我们这边就可以点任拿到什么呢拿到他的响应

21:10.410 --> 21:15.050
拿到响应的话他是我记得他是二进子数据啊所以你这边啊调一下

21:15.610 --> 21:21.130
iis点接声啊把它转成一个这个接声啊然后接下这边

21:23.210 --> 21:23.610
这边

21:24.410 --> 21:25.130
iis

21:26.650 --> 21:29.690
啊这边呢我们就来打印一下log

21:30.650 --> 21:31.130
iis

21:32.250 --> 21:36.170
OK好然后接下这边呢就是点catch

21:37.130 --> 21:42.170
啊如果有错误啊有错误的话我们这边呢就打印一下

21:43.130 --> 21:44.810
打印一下这个错误

21:45.610 --> 21:52.890
OK好这边那就写完了啊这边其实就是使用什么呢就是使用废弃啊这个不是新知识这个不是二人的知识

21:53.530 --> 22:00.150
对吧啊来我们这边我们来看一下嘛啊这边让我先保存一下

22:02.390 --> 22:06.790
保存保存然后加这边是不是出来了啊出来了之后然后将我点击一下

22:08.310 --> 22:09.190
啊获取到没有

22:09.910 --> 22:11.270
这边数据就获取到了

22:12.230 --> 22:12.710
对不对

22:13.270 --> 22:20.950
就获取到了啊获取到了之后然后回头乱你拿这个数据你要做什么事情啊你要渲染啊要干嘛是不是你就做后续的工作

22:21.510 --> 22:22.150
这就可以了

22:23.110 --> 22:29.190
对不对啊这边的话其实这个啊获取数据这个的话没什么啊这个就是以前的知识

22:29.990 --> 22:30.310
OK

22:31.190 --> 22:39.510
啊我们整个这个啊整个这个二人基础知识啊我们这边呢就快速的过了一遍啊注意哈不是说

22:39.590 --> 22:43.350
整个二人这个知识就讲完了啊后面还有那么多张脸

22:44.230 --> 22:50.470
对不对你这边除了这啊这边的话后面还有这么多张这个是第一张对吧我们现在在这个位置

22:51.430 --> 22:57.030
在这个位置啊我们下一小节的话我们来看一个实战案例这才第一张啊后面还有这么多张脸

22:57.510 --> 23:02.310
对吧我们这边只是怎么了只是带你快速的体验这个啊二人

23:02.790 --> 23:05.830
相当于把他官方文档的这个位置

23:06.310 --> 23:09.830
就他这边不是有个盖的吗对吧有个盖子就是把这一块

23:10.710 --> 23:13.430
把这一块啊包含他这边有一个

23:14.550 --> 23:17.830
这里design里面啊有一个这个如何设置style

23:18.390 --> 23:24.870
然后接下来这个高度和宽度对吧然后内这个内奥成为是这个flagbox

23:25.510 --> 23:28.950
然后image啊也就是说把它整个这个盖的这一部分

23:29.590 --> 23:30.710
快速的过了一遍

23:31.430 --> 23:33.830
OK啊下来的话大家就是把

23:34.390 --> 23:39.190
整个这个基础知识啊就是包括前面后面啊但你如果就是

23:39.430 --> 23:43.190
听了上一节课你已经把前面的已经做了那你这节课就把后面这三个

23:43.830 --> 23:48.470
自己把它敲一敲啊稍微熟悉一下我建议你最好自己敲一遍

23:49.350 --> 23:53.510
知道吧最好敲一遍除了有些东西你也不用敲就是像这种data这种

23:54.150 --> 23:56.230
这种你不用敲对吧特别是啊

23:56.790 --> 24:01.910
特别是这个GSX这一块啊这个这个section list

24:02.550 --> 24:07.750
然后flatlist这些这些你敲一下敲一下你有一个印象印象要深一些

24:08.630 --> 24:13.430
好吧ok啊这节课就先到这里啊好再见

