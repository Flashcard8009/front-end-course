WEBVTT

00:00.370 --> 00:07.250
OK 欢迎回来 这节课咱们继续 哈 上一节课的话 我们已经把这个

00:08.210 --> 00:15.850
整个reactive 它的一个开发环境和一个预兰环境快速的搭建了 我们使用的是这个expo

00:16.490 --> 00:21.650
对吧 我希望你这边的话 你也已经把这个expo 把它下载好了

00:22.010 --> 00:28.730
然后把这个项目拉下来 然后跑起来 并且在你的这个手机上 已经能够成功的看到这个效果了

00:29.130 --> 00:35.330
OK 好 然后既然你这边的话 你把这个项目拉下来之后 我这边建议你 哈 我这边只是建议

00:35.770 --> 00:41.250
建议你干嘛呢 建议你这边的话 就是你背份一份 就我这边的话 你看我这边都是背份了的

00:42.170 --> 00:47.570
呃 一动端开发这里 我们是快速入门 是吧 快速入门这边

00:48.250 --> 00:51.170
看到没有啊 这个的话 就是我们上节课搭的这个案例

00:51.770 --> 00:57.730
啊 这个案例的话 啊 但你不背份也可以 因为回头的话 我会把我整整个这个资料发给大家

00:58.530 --> 01:06.490
对吧啊 你到时候的话 你这边反正你就记住嘛 这边第二小节就是快速搭建RN开发环境啊 这边的话有一个干净的项目

01:07.370 --> 01:10.970
干干净净的啊 你后面的话 你比如说在做那个实力的时候

01:11.530 --> 01:15.570
那接下来的话 你想比如从头再来的话 你这边的话 可以直接用这个干净的项目

01:16.090 --> 01:18.930
来做就可以了啊 我这边做了一个备份啊

01:19.650 --> 01:26.090
好 然后这是第三节课啊 第三节课我们这边来干嘛呢 我们这边的话来复习一下

01:26.410 --> 01:32.170
react的一些基础知识啊 这个的话 其实他也是这个官方教程啊 我给大家看一下

01:32.690 --> 01:34.890
就这边这边是有个概的 这是他官网

01:35.650 --> 01:40.490
官网的话 你看他这边 他这边的话 实际上就有一个什么呢 实际上就有一个教程

01:41.250 --> 01:48.650
看一看 首先这边是introdexing 这个是关于这个介绍啊 介绍完了之后 然后接下来的话 这边你看这里

01:49.650 --> 01:51.690
这里是不是就是有一个这个react

01:52.810 --> 01:56.210
fundamentals 什么呢 就是react的这个基础

01:57.330 --> 02:03.290
因为我们说了整个这个reactletio啊 就这个rn 他是基于什么 是不是基于这个react

02:04.090 --> 02:08.570
说你必须要会react啊 你如果不会这个react的话 那你这个

02:09.290 --> 02:14.210
rn你是没办法做的啊 如果现在听我视频的人 如果还有就是

02:14.890 --> 02:20.690
不会react的 那我建议你就先把这个视频停一下 先去把这个react

02:21.250 --> 02:27.410
先把他学习了啊 我们这个课程里面的话 不会就是细节的去介绍这个react的知识

02:28.170 --> 02:31.650
好不好啊啊 然后他这里他官网也是

02:31.970 --> 02:37.010
他这边他因为就是我们的整个rn他是基于react的 所以他这边的话也有这么一个小结

02:37.650 --> 02:41.810
啊 那么这么一个小结的话 他这边他就是会带着你复习一下 看到没有

02:42.130 --> 02:45.170
we are going to cover the core concept

02:45.890 --> 02:53.250
behind the reactor 就是我们会做一个整体的这个复习 复习什么呢 复习这个react的核心概念

02:53.890 --> 02:56.130
core concept 啊 核心概念

02:57.330 --> 03:00.810
那核心概念里面 然后他这边就主要讲到了这个component

03:00.810 --> 03:09.050
jsxpopsstat 啊 那我们这边的话 我们就跟着他的这个啊 跟着他的这个大纲 我们来复习一下

03:09.610 --> 03:16.650
那首先第一个 第一个的话是component 啊 这个component是什么 啊component是组件

03:17.450 --> 03:24.810
对吧 这个就没什么好说的了啊 就我们现在这个整个前端开发啊 不管你是开发这个web端

03:25.370 --> 03:32.490
就是pc端啊 无论你是pc端还是这个移动端 那都是采用的是组件化的这种开发

03:33.290 --> 03:39.450
那组件化开发有个最大的好处是什么呢 其实就是复用啊 其实复用啊 我们这个

03:40.010 --> 03:49.210
编程哈 我们写程序 我们程序员追求的这个终极目标就是复用啊 因为我们程序员其实是很难的 我们不想这个代码

03:50.010 --> 03:55.210
书写很多次啊 我们希望书写一次之后 然后接下来的话 就到处都可以用

03:55.610 --> 04:00.250
OK啊 你看这边这种组件化就把我们整个这个

04:01.290 --> 04:06.490
一平 你看是不是拆解成一个一个组件啊 你看这张图其实是相当形象的

04:07.210 --> 04:14.730
相当形象的一张图 你看就拆解成一个一个的组件啊 能够极大程度的复用代码

04:15.610 --> 04:19.370
OK啊 那么现在的话这个流行的这个三大框架

04:19.770 --> 04:26.170
无论是这个angline还是view还是这个react 它都是支持这个组件化开发的啊

04:26.810 --> 04:32.410
好 那在这个react里面 react里面的话 它支持两种形式的组件

04:33.050 --> 04:36.410
哪两种呢 一种的话叫做寒树式组件

04:37.050 --> 04:42.650
啊 这个寒树式组件的话以前又被称之为无状态 啊 但自从那个户客

04:43.290 --> 04:47.850
户客出来之后 那这个寒树式组件它自身也能够就是

04:48.330 --> 04:52.810
维持这个自身的状态了 OK好 那我们这边我们来看一下啊

04:53.690 --> 04:54.730
那我们这边看一下

04:55.770 --> 05:02.730
这里 嗯 这里的话首先的话这里就引入了啊 我们这边啊 比如说我们就引入一个这个text

05:03.690 --> 05:09.850
引入一个text啊 好 然后接下来我们这边这个text它就是一个什么呢 它就是个组件

05:10.410 --> 05:17.130
它是这个react native里面自带的组件啊 好 然后既然你这边啊 你就可以使用这个组件

05:17.690 --> 05:21.610
text OK 好 那我们这边呢我们写个Hello

05:23.210 --> 05:26.010
rn OK 好 我们保存一下

05:27.450 --> 05:33.130
我们这边保存一下 好 保存了之后 然后接下来的话 我们这边我们过来看一眼

05:34.490 --> 05:37.290
在这里 你看这边是不是出来了

05:38.010 --> 05:42.890
Hello rn啊 好 下面这个是什么 下面这个的话是样式

05:43.370 --> 05:47.690
啊 它这边通过这个style sheets点create 方法

05:48.330 --> 05:50.730
啊 我们这边把它写一下嘛 把它写一下

05:51.610 --> 05:54.730
它这边的话就是通过你这边不是有个这个style吗

05:56.250 --> 06:06.410
style style sheets 对吧 从这个react native里面引入的 它上面就有个什么呢 它上面就有一个create 方法

06:07.130 --> 06:13.450
OK 它就有一个create 方法啊create 方法里面你就传入一个配置对象

06:14.170 --> 06:21.930
啊 传入配置对象之后 然后你这边的话就可以来书写你的这个样式 比如我这边呢就书写啊 比如这边的话container

06:22.250 --> 06:25.290
它对应的又是一个什么呢 又是一个对象啊

06:25.770 --> 06:30.810
然后在这里面的话你就书写你的这个样式就可以了啊 比如它这边可以用的这个弹性和

06:31.530 --> 06:32.650
flex 1

06:33.370 --> 06:38.650
然后比如说这个背景颜色 然后我们把这个justify content设置一下center

06:40.170 --> 06:41.850
然后align items center

06:42.490 --> 06:49.050
ok 当你是光这样写的话还没用啊 比如我们现在我们保存一下 保存了之后 然后既然你这边看一下

06:50.090 --> 06:53.290
我们把这个把这个稍微收缩一下好不好

06:54.330 --> 06:56.410
我们把这个稍微收缩一下 然后这样子

06:57.850 --> 07:00.170
这样子啊 这样子方便大家看到效果

07:00.650 --> 07:05.530
好 你现在的话你这边那只是创建了样式 你注意啊 就下面的话

07:06.570 --> 07:14.010
啊 这边那只是创建样式 那你创建的样式你还需要把这个样式干嘛呢 挂在这上面

07:15.050 --> 07:20.330
ok 还需要挂在这上面啊 那你这边那就是通过什么呢 通过这个style

07:21.610 --> 07:25.850
style啊 然后等于对应的是一个这个

07:26.570 --> 07:33.770
这边啊 一个大库号大库号里面 然后这边的话是什么啊 我们这边还没有还没有那个把它存到一个便量里面

07:34.650 --> 07:35.930
好 我们这边styles

07:36.890 --> 07:42.490
看到没有 我们整个这一块啊 这一块创建的这个样式 我就把它复制到styles里面

07:42.810 --> 07:47.130
好 然后这边就对应什么呢 对应styles点container

07:47.850 --> 07:52.330
看到没有stylescontainer 是不是就是这一块样式啊 ok好 我们保存一下

07:52.730 --> 07:57.290
这边保存啊 这边的话他刷新

07:58.810 --> 08:07.880
呃 我看一下这边怎么失效了 哦 这里这里的话我们不应该挂在text上面啊 我们还是应该是

08:08.440 --> 08:13.080
拿一个这个view view的话其实就相当于什么呢 相当于以前的这个

08:14.040 --> 08:18.120
呃 以前那个就是html里面的div啊 相当于div

08:18.520 --> 08:22.280
所以我们这边的话其实应该是挂在这上面 写一下这边的话view

08:23.240 --> 08:30.200
然后这边的话把这个挂到这个view上面啊 然后把这个text

08:31.560 --> 08:36.120
放到这里面 ok好 然后在这边的话保存一下

08:37.960 --> 08:45.560
然后这保存我露屏他这个保存就失效了哈 我每次我得这样点一下 好你看这边这边是不是就跑到正中间去了

08:46.280 --> 08:54.440
对不对啊 当然关于这个啊 关于这个这个弹性和这边这个样式 我们后面再讲这个rn这个具体语法的时候啊 我们再来讲

08:54.920 --> 08:58.040
好吧啊 我们这 我们这边的话是复习这个react

08:58.520 --> 09:02.440
啊 复习react 好那这边的话你看这边呢 我是不是就创建了一个组件

09:03.000 --> 09:07.480
对不对 一个叫做app的这个组件 然后既然这边把它默认倒出

09:08.120 --> 09:11.080
啊 倒出的话 然后既然你这边的话要追twry一段什么

09:11.560 --> 09:13.960
这边要返回一段gs差

09:15.080 --> 09:21.160
对不对 你要返回一段gs差啊 ok 这是函数式组件

09:21.720 --> 09:28.520
好 除了这个函数式组件以外 我们的这个react他还支持什么 是不是支持这个类组件

09:29.240 --> 09:31.080
啊 我们把这个类组件我们来写一下

09:32.520 --> 09:36.440
那我们这边的话就是首先的话 你从这个react

09:37.400 --> 09:39.480
啊 你这边就需要import

09:40.520 --> 09:43.400
react 然后既然这边呢 把那个component

09:45.000 --> 09:51.800
component 拿出来 好 然后既然这边的话export 建议大家自己敲一下

09:53.480 --> 09:59.000
default 然后接下来class app 对吧 然后既然这边的extence

10:00.840 --> 10:01.720
extence

10:04.540 --> 10:06.940
那个tence谁 是不是这个component

10:07.820 --> 10:13.500
对吧 你这边如果你这边不引的话 你这边不解构的话 那你这边那就是应该是react

10:14.060 --> 10:20.140
连component 是不是这样子啊 你如果这边这边刚才你解构拿出来的话 那这边就直接一个tence

10:20.620 --> 10:21.180
component

10:21.740 --> 10:26.860
啊 好 然后加在这里面 里面的话 是不是就要求你有一个扔点方法

10:29.080 --> 10:33.640
对吧啊 扔点方法 然后接下来你这边那干嘛呢 是返回一段

10:34.360 --> 10:39.720
js 查 在扔点方法里面啊 返回这js 查的话 那我们这边啊 我们就写这个嘛

10:41.720 --> 10:46.680
就写这个view 然后里面一段这个text

10:47.960 --> 10:52.520
啊啊 就这个就这个 ok 好 然后既然我们这边我们保存一下

10:55.340 --> 10:57.100
保存了之后 然后既然这边来看一下

10:58.700 --> 11:05.100
啊 是不是出来了 对不对 也同样出来了啊 这个就是他支持的这种两种方式

11:05.660 --> 11:09.980
一种是函数式组件 一种是这个类组件啊 这个的话在

11:11.020 --> 11:14.380
在这个笔记上面有啊 在这有 ok

11:15.420 --> 11:20.220
看我刚才那个我也 我也给你放上去吧 刚才那个

11:21.900 --> 11:26.620
你放在这好吧 我把它注释掉 export这个app

11:27.500 --> 11:30.940
啊 然后这边把这个拿过来

11:31.900 --> 11:37.740
来 来 过来 我这边让我就是这个是类的方式 你回头你这边看的话就好看是吧

11:38.380 --> 11:47.020
快速的可以看啊 这边这边那是这边是函数的方式啊 我这边写个注释 这个是函数式

11:48.380 --> 11:53.900
主件 ok 把他注释掉好 然后既然这边这边那是这个类组件

11:57.000 --> 12:02.280
类组件把这个文字也改了吧 这个是函数式

12:03.400 --> 12:05.320
主件啊 这个

12:06.520 --> 12:09.080
这个是类组件

12:10.040 --> 12:11.560
ok 好

12:13.160 --> 12:16.680
好 然后接下来 接下来我们继续啊

12:18.440 --> 12:23.480
好 接下来的话这边就是关于接使插啊 接使插这个没什么好说的啊

12:23.960 --> 12:30.680
就你无论是函数式组件还是这个类组件 他都需要返回什么呢 都需要返回一段接使插

12:31.400 --> 12:38.520
那这个接使插他是这个react给我们提供的一种语法 用来描述什么 是描述这个段目结构的

12:39.400 --> 12:45.320
对不对啊 他本身的话他就是怎么了 其实就是这个描述这个虚拟段目这个结构

12:45.960 --> 12:52.040
他本质上其实是通过这个react点create element方法来创建了这个虚拟段目对象

12:53.560 --> 12:58.280
只不过你用这个方法来创建的话是不是太麻烦了 对不对 我这边我举了个例子

12:59.240 --> 13:03.320
比如我们现在的话 我们想描述一个什么样的结构呢 我们想描述一个这样子的结构

13:03.800 --> 13:08.520
一个dwa下面有个he h1下面pp下面有个ur ur下面有三个力

13:09.080 --> 13:15.000
啊一个很简单的结构 但是你如果用他就是这个react点create element方法

13:15.480 --> 13:17.960
用这个方法来创建的话 你看你这边这样子写

13:18.840 --> 13:20.840
麻烦麻烦 是不是相当麻烦

13:21.720 --> 13:26.520
对不对啊 那我如果让你描述一个非常复杂的这个页面啊 你看我们这边才

13:27.160 --> 13:36.440
这么几句对吧 几句这个这个样式不是样式结构啊 才几句这么结构 你这边写的话就要写成这个样子

13:37.160 --> 13:45.400
相当相当麻烦 那你正常的话你这个你开发一个应用啊 你那个一平啊光就写一平的话 那这边你如果用这种

13:45.880 --> 13:48.200
方式来写啊 那简直是会死人的

13:49.080 --> 13:53.240
对不对啊 说他就给我们提供了什么呢 他就给我们提供了这个gs差

13:53.960 --> 13:56.600
他告诉你你可以干嘛呢 你可以采用这种方式

13:57.800 --> 14:02.280
所以类似于html的这种语法的这种描述方式

14:03.160 --> 14:12.840
对不对啊 但是你这边你自己头脑要清晰啊 你自己头脑一定要清晰 他这个看着虽然像是html 但是他是不是html

14:14.280 --> 14:15.720
他是不是 html

14:16.680 --> 14:23.960
对吧 他是什么呀 他这个的话 他这个看上去像html 但其实是什么 其实是gs对象

14:24.840 --> 14:27.000
啊 就是你的那个虚拟动物对象

14:27.880 --> 14:29.640
ok啊 这点一定要清晰

14:30.440 --> 14:38.120
啊 然后关于这个gs差 gs差的话有如下的一些这个特点啊 这个的话在之前学这个reactor的时候

14:38.680 --> 14:42.120
大家应该都是学过的啊 我们这边再简单来看一下嘛

14:42.840 --> 14:47.720
啊 首先这个gs差里面 你可以使用什么呢 可以使用这个javascript表达社

14:48.280 --> 14:51.640
表达是写在这个花扩号里面啊 比如说我们这边

14:53.000 --> 14:55.480
啊 我们这边类组件啊 然后大家我们这边一个

14:56.840 --> 15:00.040
这边啊 花扩号 然后我们这边写表达是比如1加

15:00.920 --> 15:01.720
1加1

15:02.840 --> 15:06.360
对吧 那回头让他这边的这个表达是他就会做一个这个计算

15:07.240 --> 15:08.760
那回头啊 这边是吧 2

15:09.720 --> 15:16.600
对吧啊 然后接下来不能使用语句只能使用表达社啊 这点一定要注意啊

15:17.160 --> 15:22.840
在gs差里面你是不能写语句的啊 你只能写表达社 什么叫表达社

15:23.640 --> 15:26.600
所有表达社就是最终能得到一个值的东西

15:27.240 --> 15:33.320
就称之为表达社啊 什么叫语句 那比如说你以前写的流程控制是不是就是语句

15:34.280 --> 15:39.560
对不对啊 我们之前我们就说流程控制语句 我们不会说流程控制表达社

15:40.200 --> 15:45.400
对不对 那你以前学的流程控制 无论是这个义符也好 还是这个复讯环也好

15:45.960 --> 15:48.120
啊 while 这些这些是不是都是语句

15:48.600 --> 15:52.280
对不对 比如我这边取了个例子 你这边比如说义符 else

15:53.080 --> 15:54.840
他是什么 他是语句

15:55.640 --> 15:59.560
啊 那你这义符要是不能写怎么办 那你可以通过这个

16:00.120 --> 16:01.640
是不是你可以通过其他的方式

16:02.600 --> 16:05.960
对吧 你可以通过比如说这边这个三元运算符

16:07.720 --> 16:11.800
啊 然后在这个接视差中 如果要设置这个class啊 不能

16:12.600 --> 16:16.040
像HTML那样子直接输写class 因为他是对象

16:16.840 --> 16:19.160
说你这边的话就是要写成class name

16:19.960 --> 16:26.200
啊 那他可以是数组 数组里面的每一项是这个接视差 那叫这个是注射啊 注射是这样子写的

16:27.160 --> 16:33.480
ok 啊 但上面这个势力啊 上面这个势力是在这个pc端的情况下

16:34.280 --> 16:43.480
我们这个RN里面 RN里面他就是全部都是什么呢 全是这个reactive里面 他给我们提供的类制组件

16:44.280 --> 16:50.280
ok 这个也是我上级课反复强调的啊 就是在RN中你输写这个接视差

16:50.600 --> 16:53.400
那这个接视差的话就不会像这个样子啊

16:53.880 --> 16:57.480
这个的话是什么呢 这个是我们在开发pc端网页的时候

16:58.360 --> 17:06.600
对吧 他里面有什么div啊 h1啊p啊 那现在的话我们这边我们做这个RN的开发 他就没有这些标签了

17:07.400 --> 17:14.600
啊 这些标签通通没有 绝代之的是什么呢 绝代之的就是这个RN他给我们提供的一些组件

17:15.560 --> 17:19.080
啊 这边比如说这个text 我们后期的话我们会学习

17:19.480 --> 17:25.480
他究竟给我们提供了哪些组件啊 包括我们到时候还会学一些这个第三方的一些组件库啊

17:26.360 --> 17:32.360
ok啊 那这边这个text 然后这边这边写了个名字啊

17:33.000 --> 17:37.000
这个也很简单 就这边这边你写一个名字

17:38.200 --> 17:41.800
我看这边是在哪定一个辩量啊 我们就在这吧 就在这定一个辩量

17:42.280 --> 17:46.120
啊 比如 net net 一个nem等于一个细节

17:47.320 --> 17:53.480
对吧啊 然后加这边呢 就是内组件 然后加这边nem啊 然后我们保存一下

17:55.640 --> 17:58.600
啊 保存之后 然后加这边来看一下 是出来了

17:59.560 --> 18:00.920
对不对 ok

18:02.840 --> 18:07.320
啊 这是关于接时差 然后接下来的话是这个pops

18:08.040 --> 18:14.120
这也是相当重要的一个特性 pop 是什么 pop 是一个组件接收

18:14.440 --> 18:18.040
外部给他传递过来的这个数据

18:18.840 --> 18:25.800
对不对 比如说外部我再使用一个这个组件的时候啊 然后我使用你这个组件 然后我要往你这个组件

18:26.200 --> 18:27.720
传递一些数据过来

18:28.440 --> 18:32.280
那我在这个数据 这个数据内部的话 那个组件内部的话

18:32.760 --> 18:35.400
我通过什么 这边我就通过这个pops

18:36.120 --> 18:41.960
来进行一个接收 对不对啊 来 我们看这里 这里的话有一个例子啊

18:43.320 --> 18:49.880
啊 这边的话是有一个cat这个组件啊 然后接下来的话 这边有个coffee啊 我们把这个例子写一下嘛

18:51.560 --> 18:56.040
我把这边把它注释掉啊 我们这边呢 就是pops

18:57.800 --> 19:01.000
pops pop 是的话 我们比如说这边 are export

19:01.880 --> 19:04.840
export default

19:06.840 --> 19:10.440
default 然后function app

19:12.200 --> 19:16.760
ok 好 然后大家这里面这里面的话 返回一段这个gst

19:18.200 --> 19:23.640
啊 返回到gst 然后我们在这里的话 我们就干嘛呢 我们就使用另外一个组件

19:27.930 --> 19:31.930
啊 我们在这里的话就是再来定一个组件啊 这边呢 就是方形

19:32.890 --> 19:37.930
啊 取个名字嘛 我看我这边叫什么 cat 是吧 好就叫cat

19:38.810 --> 19:44.730
就叫cat 然后他是不是也得返回一段gst啊 然后他返回这边就是这个view

19:46.870 --> 19:51.430
ok 好 然后既然我在这边 这边的话我就可以使用啊 我这边的话view

19:53.530 --> 19:56.010
view 然后我里面的话我就可以使用这个组件

19:57.690 --> 20:00.410
对吧 cat 这个组件啊 我这边多用几份

20:01.370 --> 20:05.290
啊 然后这样我这边让我就给你传递一个什么呢 传递一个内幕

20:06.250 --> 20:11.770
不要内幕细节啊 这边的话内幕比如说张三

20:12.410 --> 20:14.330
大家这边内幕等于一个

20:15.210 --> 20:19.690
理事 ok 那我这边的话我就可以干嘛呀 我这边是不是可以接受

20:20.410 --> 20:23.290
对不对啊 我这边就通过什么接受 通过pops

20:24.330 --> 20:28.570
对不对 就像接受参数一样啊 非常自然 非常自然就接受到了

20:28.650 --> 20:34.330
接受到了之后 然后接下来我在这边我是不是就可以使用 对吧 我这边比如哈喽

20:36.250 --> 20:39.370
哈喽 然后他接受到他是一个对象啊 他是个对象

20:39.930 --> 20:42.650
这边pops.name

20:43.530 --> 20:47.930
可不可以啊 他是一个对象啊 我们这边让我们保存一下

20:50.280 --> 20:55.270
那么保存啊 保存之后 然后我们来看一下啊

20:56.150 --> 21:00.150
啊 这边他在更新啊 这边看一下

21:01.110 --> 21:08.870
text stream must be render with a text啊 这边这边他得在这个text里面

21:11.030 --> 21:20.810
必须在text里面啊 让我们这边保存一下 ok 这出来了

21:21.850 --> 21:24.410
啊 我这边手机出来了啊 这边模拟器还没出来

21:25.050 --> 21:27.450
稍等一下 我手机这边已经出来了

21:28.410 --> 21:30.410
嗯 我重新刷新一下吧

21:32.490 --> 21:37.380
我先刷一下 ok 啊 这边是不是出来了

21:38.260 --> 21:45.460
你看一下是不是出来了啊 出来这边把那个把那个加上 这边style 等于这个保存一下

21:48.900 --> 21:57.140
ok 这里是不是出来了 对不对哈喽解解哈喽张三哈喽理事 你要注意就什么呢 注意这里他接收的是一个对象

21:57.460 --> 22:00.820
啊 为什么 因为我这边有可能是传递多个 是吧

22:01.220 --> 22:07.620
我这边 age age的话对应你最你 age的话 你这边想传数字的话 这边是不是得加这个花扩活

22:08.340 --> 22:13.300
对不对 有18啊 这边 age 等于一个比较19

22:14.180 --> 22:17.460
然后 age 等于一个20

22:18.180 --> 22:20.740
ok好 然后既然在这边 这边的话 我们就

22:21.620 --> 22:24.020
再来一个啊 比如说我今年

22:26.420 --> 22:30.900
我今年多少岁 这边是不是还是通过pops啊 pop 是点什么

22:31.460 --> 22:34.100
点 age 然后既然这边睡

22:35.460 --> 22:37.060
对吧啊 让我们保存

22:39.690 --> 22:44.010
出出来了 ok 啊 这就是关于这个pops

22:44.730 --> 22:52.650
啊 就是外部我在使用你这个组件的时候啊 我这边给你传递这个参数或者说传递数据

22:53.050 --> 22:54.810
内部的话通过这个pops

22:55.450 --> 22:56.090
来拿到

22:56.970 --> 22:58.010
好吧啊

22:58.970 --> 22:59.770
啊 除了这个

23:00.970 --> 23:04.010
函数式组件啊 我们还有种方式 是不是内组件

23:04.650 --> 23:07.690
内组件这个我就不写了啊 你这边看一下通过什么

23:08.250 --> 23:12.570
通过constructor 这里面有一个这个pops啊啊 大家这边super

23:12.890 --> 23:17.210
然后pops对吧啊 自从这个reactor的那个hook

23:18.010 --> 23:22.890
出来之后啊 慢慢就是很多场景下 大家都是去用这个函数式组件了

23:23.530 --> 23:27.050
内组件的话 现在慢慢开始就是用的比较少了啊

23:28.170 --> 23:29.850
好 然后接下来的话这个state

23:30.730 --> 23:35.450
state的话就是什么呢 state的话就是我们组件自身的这个数据

23:36.170 --> 23:37.210
刚才那个pops

23:37.690 --> 23:41.930
pops 是不是外部在使用我这个组件的时候 是不是跟我传递过来的

23:42.730 --> 23:45.210
啊 但这个state state是什么呢 state 是

23:46.650 --> 23:47.770
呃 就是我自身的

23:48.490 --> 23:49.210
啊 我自身的

23:49.770 --> 23:52.170
早期的话只有这个内组件

23:52.810 --> 23:57.130
它可以维护这个组件的状态啊 我们这边我们来把这个例子看一下

23:57.850 --> 24:02.010
这边呢 导出了一个内组件 内组件里面 然后接下来这边是state

24:02.730 --> 24:05.610
对吧 state 我自身维护了一个这个状态

24:06.250 --> 24:10.010
啊 维护了个状态之后 然后这样我这边就可以通过什么呢 通过这个

24:10.810 --> 24:12.250
z是点state

24:13.050 --> 24:17.050
点 is hungry 是不是拿到我自身的状态的这个字啊

24:18.250 --> 24:23.450
对不对 然后这样我要设置 设置的话通过什么呢 通过z是点state

24:24.730 --> 24:26.810
通过这个来进行一个设置

24:27.610 --> 24:32.730
这是早期 早期的话只有内组件能够维护这个状态

24:33.290 --> 24:36.650
所以早期的话那个函数函数组件被称之为无状态

24:37.210 --> 24:41.130
又被称之为这种展示性组件 因为它只是做这个展示

24:41.690 --> 24:45.450
更多情况下就是做一个展示 但现在的话有了户口之后

24:46.170 --> 24:48.650
就不一样了啊 让我们这边我们来看一下户口

24:50.010 --> 24:54.890
户口基本的户口要会啊一定要会啊 来我们这边让我们来看一下

24:57.430 --> 25:01.430
好 我们首先首先的话在这边 这边的话你得引入

25:02.150 --> 25:05.990
对吧 你得引入 use啊什么 use state

25:07.190 --> 25:13.830
对吧 use state 完事的时候我们在哪呢 我们就在这好不好 就在这个cat这里

25:14.310 --> 25:18.310
啊 在这里这里的话你就通过什么呀 这边我们就可以const

25:18.870 --> 25:22.710
啊 然后一个数组等于一个什么呢 等于一个use state

25:23.430 --> 25:28.070
啊 use state这个use state就是刚才我们这边引入的啊 它是一个函数

25:28.470 --> 25:33.190
好 然后在这边括号里面传入什么 是不是传入你的初始值

25:34.230 --> 25:37.990
对不对 传入出这个初始值 那比我们这边初始值是1

25:38.790 --> 25:44.230
好 然后接下来这边的话就会给你返回两个东西啊 我这边用数这个数组来接受一下

25:44.790 --> 25:48.070
啊 我们这边呢就是叫做这个嘛 叫做count

25:49.110 --> 25:52.070
count和一个set count

25:53.670 --> 25:58.070
ok 一个这个count count的话是接受它的这个初始值

25:58.630 --> 26:03.510
然后这个set count set count是用来设置什么 是不是设置这个count的

26:04.390 --> 26:07.910
对吧 然后接下来我们这边的话我们在这里

26:08.870 --> 26:11.590
我们这边呢我们加上啊 然后技术器

26:14.420 --> 26:15.540
技术器

26:18.740 --> 26:20.900
技术器啊 然后在这边上就是

26:21.540 --> 26:24.740
是不是直接用count对不对 直接使用这边count

26:25.140 --> 26:26.980
好 我们这边我们保存一下 我们来看一下

26:29.540 --> 26:34.500
好 这里这里是不是出来了 对不对 这里就出来了

26:34.900 --> 26:39.300
好 然后接下来我如果想要改变改变这个自身的这个状态值

26:39.300 --> 26:44.740
比如我现在是不是有一个这个count这个值啊 对不对 我想改变 我想改变的话这边通过什么

26:45.460 --> 26:47.380
是不是通过这个set count

26:48.660 --> 26:54.740
对不对 应该通过这个set count啊 让我这边的话我们这样子 我们搞一个button

26:55.140 --> 27:02.420
啊 这个这个button啊 也是啊 里面给我们提供的 这个我们后面会看的啊 会学的

27:03.140 --> 27:05.460
好 然后接下来的话 这边的话button

27:08.630 --> 27:10.950
button 然后他有一个这个title

27:11.830 --> 27:19.030
title是必须要给的啊 这边呢 是比如说修改值 比如我们叫个庆计嘛

27:20.710 --> 27:22.070
或者叫做count加加

27:22.550 --> 27:24.070
count加加

27:24.070 --> 27:26.790
好 这边你看 这里就会有一个button

27:27.670 --> 27:28.950
你看 这边是不是有个button

27:28.950 --> 27:34.550
好 然后在这边呢 你可以给他绑一个4件 而这边呢 是on price

27:35.990 --> 27:43.100
ok啊对应对应的话 这边啊 这里这里的话就应该是什么

27:43.820 --> 27:48.140
这里的话就是应该是 是不是调用这个set count

27:48.700 --> 27:50.460
对不对 然后 count加1

27:50.460 --> 27:53.740
然后count加1 然后我们这边保存一下

27:56.300 --> 28:00.620
ok 保存了之后 然后叫我们这边我们来看一下 你看我这边让我点击

28:01.180 --> 28:03.580
你看这个技术器啊 后面的这个数字

28:04.540 --> 28:06.940
是不是在自征 对不对啊 这边

28:07.980 --> 28:10.460
是在自征 对不对 点快点啊 这边

28:11.260 --> 28:13.900
ok 那你看我现在的话 我这个主键

28:14.540 --> 28:19.340
这个主键内部是不是就可以自身来维护一个状态了

28:20.300 --> 28:25.020
对不对啊 这个的话就是react跟我们提供的这个hook

28:26.460 --> 28:31.740
后面的话 如果不出意外的话 我写主键的话 都会通过什么呢 都会通过这个

28:32.540 --> 28:36.220
韩数式主键 然后接下来通过这个hook来写

28:36.780 --> 28:39.660
好吧啊 因为这个hook的话也是一种大趋势

28:40.220 --> 28:45.660
你可以看到现在他这个官方的例子啊 官方的例子很多其实都是用这个韩数式主键

28:46.460 --> 28:52.220
来写的啊 当然他这个他其实他这个官方他其实给你提供两个版本

28:53.100 --> 28:59.260
他没有 这边会有这个function components 然后也会给你提供什么呢 也会给你提供这个class components

29:00.140 --> 29:02.060
看到没有 也会给你提供这个版本

29:02.860 --> 29:11.020
ok啊 这就是关于整个这一小节啊 这一小节的话 我们其实就是什么呢 就是跟着这个官方文档

29:11.500 --> 29:16.540
把这个react的这个核心概念啊 这几个核心概念 我们把它过了一遍

29:17.100 --> 29:24.220
好 我这边建议你啊 建议你你下来 除了就是把我这些课听完之外 你把这篇文档

29:24.780 --> 29:26.620
react这个fundamentals

29:27.420 --> 29:29.740
把这篇啊 把它看一下

29:30.540 --> 29:39.100
好不好啊 慢慢要学会去看 看这个官网的这个文档了啊 你如果觉得英文吃力 你看那个吗 看中文吗

29:39.980 --> 29:45.100
对不对 他不是有中文吗react native然后中文网

29:47.180 --> 29:48.620
还有中文网啊

29:49.980 --> 29:55.420
这里 然后在这里有个文档 他这个中文网我看一下还可以其实

29:56.060 --> 30:01.820
就紧跟这个英文这个官网啊 这个翻译速度还可以 你就看这个嘛

30:02.540 --> 30:06.140
对不对 你看这个总看得懂吗 对不对 把这一小节看一下

30:06.140 --> 30:11.180
好吧 ok 好 这节课就先到这里啊 好 再见

