WEBVTT

00:00.180 --> 00:10.180
ok 好这个的话是咱们移动端哈就是这个微博 app 哈不是说整个移动端就仅仅是这个微博 app 呃最后一捷克

00:10.180 --> 00:17.180
那最后一捷克的话我们主要来看一下就是呃一些这个微博 app 相关的一些常见的这个问题

00:17.180 --> 00:23.180
那这个的话也就是移动端你在被这个面试的时候经常容易被问到的问题

00:23.180 --> 00:30.180
然后这边挪了这么几个哈挪了这么四个 ok 这四个的话是非常典型的问题

00:30.180 --> 00:40.180
也就是在早期的时候经常会被问到啊首先第一个第一个的话就是要求你说一下什么是300毫秒的这个延迟问题

00:40.180 --> 00:47.180
那这个东西的话我们在之前的话是不是讲过的对不对啊我们之前在最早的时候

00:47.180 --> 00:54.180
我今天是讲实配的时候还是讲事件的时候我们讲过的为什么会有300毫秒延迟问题啊

00:54.180 --> 01:02.180
你要弄清楚这个的话你就首先的话要知道那一段历史对吧当时在那个07年的时候当时那个苹果公司

01:02.180 --> 01:11.180
他发布这个iphone啊但是那个时候的话我们的那个网页啊就网站里面的网页他都是针对于什么

01:11.180 --> 01:21.180
是不是都是针对于大屏幕的那个时候没有什么移动端网页啊你现在的话你来看移动端网页和这个pc端网页是明显不一样的

01:21.180 --> 01:27.180
对不对啊我这边让我举个例子比如说我这边让我们随便开个吗比如开个百度吗

01:27.180 --> 01:37.180
百度啊百度你看pc端是这个样子的对不对让移动端的话他是什么样子移动端的话你这边你刷新一下啊移动端是这个样子的

01:37.180 --> 01:55.180
看了没有啊再比如说再举个例子比如说游民星空啊以前经常喜欢去游民星空上面看一些这个游戏的资讯啊比如游民星空啊游民星空你这边你刷新一下

01:56.180 --> 01:57.180
哎

01:58.180 --> 02:00.180
啊第一个ok

02:01.180 --> 02:10.180
啊他这边怎么以啊那这边以是以这个我们这边3w的形式 ok 你看这个的话是游民星空这个pc端的

02:11.180 --> 02:18.180
可没有你打开的话是这个样子的啊这个就是一个pc端的网页好然后接下来的话你这边的话如果用手机端来打开

02:19.180 --> 02:25.180
如果用手机端来打开手机端打开的话那这边让我们刷新一下你看他就是这个样子的

02:26.180 --> 02:34.180
可没有明显和这个pc端是不一样你这边你可以两个对比一下啊这边游民星空

02:36.180 --> 02:38.180
游民星空

02:39.180 --> 02:47.180
啊这边你两个对比一下啊一个是这个pc端的怎么样pc端啊一个是什么呢一个是这个移动端的

02:48.180 --> 02:57.180
对不对啊这个的话是目前就是做这个啊web app一个比较主流的这个方案就什么呢就我pc做一套

02:58.180 --> 03:05.180
然后那个手机就是移动端做一套啊很多都是这样子的我比如我再举个例子吗比如说

03:06.180 --> 03:07.180
网易新闻

03:08.180 --> 03:11.180
对吧我们找一个新闻吗比如网易新闻这边

03:12.180 --> 03:19.180
这是网易新闻对吧他这个pc端是这个样子的好你把这个链接你把它复制复制了之后然后接下来到这边

03:20.180 --> 03:24.180
你来到这边看到没有好他的这个移动端的话就是这个样子的

03:25.180 --> 03:28.180
可不可以啊这个呢就是目前一个主流的方案

03:29.180 --> 03:35.180
回到我们刚才的哈说回刚才刚才的话然后当时是在什么的当时是在2007年

03:36.180 --> 03:41.180
2007年的话那个时候没有专门为这个移动端设置的这个网易

03:42.180 --> 03:51.180
那怎么办呢那就强行把那个一个pc端的网易强行放到一个手机里面啊就类似于什么呢类似于这个样子

03:51.180 --> 03:57.180
就比如说我现在我现在这个是不是pc端的对不对然后接下来我用手机的浏览器打开

03:57.180 --> 04:01.180
手机浏览器打开之后让他也是这个样子我们这边用这个iphone

04:02.180 --> 04:08.180
啊你看啊那个时候打开也是这个样子那打开这个样子的话你没办法看啊

04:09.180 --> 04:14.180
对不对你pc的话你打开这个网易还可以你如果是这个移动设备这样子打开

04:14.180 --> 04:20.180
是不是太小了说他允许你干嘛呢允许你这样子进行说放啊就是我这边双机

04:21.180 --> 04:27.380
双机之后我可以对这个网易进行一个说放啊说放之后然后在这边你可以移动对吧这样子移动

04:27.780 --> 04:33.780
移动之后让家你要看哪一块说早期的话是这样子啊这样子来解决这个问题的

04:34.380 --> 04:39.380
但是呢就会涉及到一个问题就是我在双机的时候我可能双机的这一块

04:40.580 --> 04:42.980
双机的这一块是什么呢双机这块刚好是链接

04:44.100 --> 04:50.180
刚好是链接的话你这边的话你这个双机你双机你按下第一次还没等你第二次按下去的时候

04:50.380 --> 04:51.780
他是不是就做了一个跳转呀

04:52.980 --> 04:56.180
对不对啊说说这边的话就是啊这里应该写的有啊

04:57.080 --> 05:04.780
在这里啊假设你这边是一个这个链接而链接当你点击了这个一次屏幕之后啊浏览器的话

05:05.080 --> 05:10.080
他不知道你是要干嘛呢是要这个把这个网易放大还是说就是要打开这个链接

05:10.580 --> 05:14.280
说他采用一个什么方式呢他就等待300毫秒

05:15.280 --> 05:20.680
看了没有他就等300毫秒300毫秒之后如果你第二次还没按下说明什么

05:21.080 --> 05:27.480
说明你只是单纯的点击这个链接想要跳转啊如果这个300毫秒也累你又按了第二下

05:28.280 --> 05:32.680
说明什么说明你是要放大对不对这就是非常有名的

05:33.680 --> 05:37.680
非常有名的这个300毫秒延迟问题啊

05:38.180 --> 05:43.580
好然后后面的话就是很多就是其他的这个浏览器啊也就是复制了这个iPhone

05:43.680 --> 05:48.880
Safari浏览器他的这个约定啊什么双指说放呀这些啊都有

05:48.980 --> 05:54.780
说这个300毫秒延迟问题啊也就一直都有啊比较出名ok

05:55.980 --> 05:59.780
好了那怎么解决呢那首先第一个第一个的话就是禁止说放

06:00.880 --> 06:03.780
禁止说放就我现在我连说放都禁止了

06:04.680 --> 06:08.680
对吧那就压根也就不存在这个问题了啊但这个的话会有个缺点

06:09.080 --> 06:09.480
怎么呢

06:10.380 --> 06:14.280
就是你有些时候我们还是希望通过双指来进行这个说放的

06:14.780 --> 06:17.380
对吧你现在完全不能够进行说放了啊

06:17.980 --> 06:22.680
好说一下就是在14年的时候啊从这个空三十二开始

06:23.080 --> 06:26.480
这个谷歌的话他解决了这个300毫秒延迟的这个问题

06:27.080 --> 06:29.080
也就是说你只要定义了这个view port

06:29.580 --> 06:31.880
他就不会有这个300毫秒延迟的问题

06:32.280 --> 06:34.080
这个我记得在之前也说过的

06:34.780 --> 06:38.280
对不对啊好的方法二方法二的话就是什么呢

06:38.280 --> 06:42.180
就是使用移动端专属的触摸实践啊

06:42.180 --> 06:44.980
就是我们之前一直用的那个特齐那一套

06:45.780 --> 06:50.380
对吧你就不要再用click了啊你就用这个特齐啊使用这个特齐

06:50.380 --> 06:54.380
事件的话首先第一个他的页面想一速度要更快一些啊

06:54.380 --> 06:58.380
用户体验也要好一些啊那也不会有这些问题啊

06:59.380 --> 07:03.580
啊这是第一个300毫秒延迟问题啊第二个是什么呢

07:03.580 --> 07:07.180
第二个就是这个点击穿透问题啊点击穿透的话

07:07.180 --> 07:09.580
我们在之前的课程中是不是也讲过

07:10.880 --> 07:14.480
对吧也讲过啊什么叫做点击穿透啊

07:14.480 --> 07:19.280
就是我两个这个元素重叠在一起啊上面的话元素

07:19.280 --> 07:22.180
有一个什么呢有一个这个特齐特齐事件

07:22.180 --> 07:23.680
那点击之后他要消失

07:24.680 --> 07:27.280
下面的话有一个什么呢有一个这个click事件

07:27.380 --> 07:29.980
那就默认会触发click事件的元素

07:29.980 --> 07:34.580
比如什么A标签啊表单元素呀或者带click事件的元素

07:35.280 --> 07:39.380
那你点击上面你这个特齐啊点击了之后让消失之后

07:39.380 --> 07:44.380
那下面的这个元素他的这个click事件也会被触发

07:45.380 --> 07:50.180
啊这个就是非常出这个出名的叫做点击穿透问题

07:50.180 --> 07:53.680
ok怎么解决呢啊这边呢我们是通过什么

07:53.780 --> 07:56.380
阻止默认事件来解决的

07:57.080 --> 07:59.980
我们说过在移动端写网页的话很多东西都要干嘛

07:59.980 --> 08:01.580
是不是都要阻止默认事件

08:02.380 --> 08:05.780
阻止了之后然后接下来的话很多东西是不是都要你自己去写

08:06.380 --> 08:08.380
包括什么包括我们之前的那个滑屏

08:09.680 --> 08:13.480
对不对啊包括之前的花瓶也要自己去写啊

08:14.480 --> 08:17.080
好然后这是第二个然后叫第三个

08:17.780 --> 08:20.980
第三个的话就是什么呢第三个就是一项出问题

08:21.980 --> 08:25.480
啊这个的话也是非常有名的啊一项出问题

08:25.980 --> 08:29.180
什么是一项出问题啊这个呢其实我们也是讲过的

08:30.280 --> 08:32.280
啊也讲过了这个是什么呢

08:32.580 --> 08:36.580
就是我们在最早在讲那个适配的时候大家还记不记得

08:36.980 --> 08:40.980
我们但是在讲适配的时候我们说过就是有一个像素的概念

08:41.480 --> 08:44.980
分为了什么呢分为设备像素和css像素

08:46.280 --> 08:48.280
那么设备像素和css像素的话

08:48.280 --> 08:54.180
它并不是说是完全的一比一的关系啊它有可能是一一比二或者一比三

08:54.680 --> 08:57.680
啊就是看你是一这个两倍频还是三倍频

08:58.280 --> 08:59.880
对吧比如说我们这边的话

09:01.280 --> 09:01.880
啊这个

09:03.080 --> 09:07.480
这个iphone678啊这边我记得可以显示这个设备像素比

09:08.680 --> 09:14.980
在哪啊啊这里啊你这边iphone678你看这边dpr2说明它就是一个两倍频

09:15.680 --> 09:17.680
对吧你这边如果是678

09:18.680 --> 09:20.280
他就是什么他就是一个三倍频

09:21.280 --> 09:26.080
对吧那有他说那有没有四倍频的啊没有啊一般你这个一个css像素

09:26.880 --> 09:34.680
到达那个一比三的这个比例他就已经非常超高清了啊你再高清的话其实人的肉眼也看不出来了

09:35.480 --> 09:40.080
这也是为什么这么多年来这个dpr最高也就是3.0了ok

09:40.480 --> 09:44.680
所以那个设计师在出图的时候是不是也会出一倍图两倍图三倍图

09:45.680 --> 09:46.880
对吧ok

09:47.880 --> 09:53.280
好然后接下来这里的话就会导致一个问题啊这里就会导致一个叫做一项数问题

09:53.680 --> 09:54.680
什么叫做一项数问题

09:55.280 --> 09:59.480
就是以前我们在pc端的时候不存在这个问题啊比如说我们这边这个设计稿

10:00.080 --> 10:03.880
这边呢是一项数是吧一项数呢那我就写epx

10:04.680 --> 10:05.080
ok了

10:05.680 --> 10:10.280
对吧但是你如果在移动端的话你如果写这个一项数

10:10.680 --> 10:13.680
那他可能会比这个实际的看着要粗一些

10:14.480 --> 10:19.480
为什么因为你这边的一项数是什么是不是css项数

10:20.580 --> 10:27.080
你的这个css项数然后加对应的其实是几个如果是两倍平的话是不是对应的是这个两个项数

10:27.680 --> 10:30.080
如果是这个三倍平的话是不是对应的是三个项数

10:30.780 --> 10:32.680
就是设备项数啊我这边试着

10:33.480 --> 10:40.480
对不对啊说你这边的话一个项数其实可能对应了两个设备项数甚至三个设备项数

10:41.480 --> 10:48.480
ok啊让我这边让我设计师的话可能就是我设计师这边的这个一项数可能就是指的是一个设备项数

10:49.280 --> 10:56.880
那这个怎么解决呢啊网络上也有各种各样的方案什么通过这个呃白眼光的image啊通过什么

10:57.680 --> 11:00.880
背景阴影啊什么的啊反正杂七杂八的有很多解决方案

11:01.280 --> 11:04.280
但其实的话这个问题我们已经解决了

11:05.280 --> 11:07.080
啊我们已经解决了我们在哪解决了

11:07.880 --> 11:11.280
啊还记不记得我们当时在讲适配的时候我们是不是通过这个remo

11:12.480 --> 11:15.880
对吧我们通过这个remo计算出一个基准值

11:16.280 --> 11:21.880
然后面的话是不是就是所有粮出来的像素都在这个remo基础上是不进行一个

11:22.680 --> 11:24.280
转换对不对

11:24.680 --> 11:28.080
所以这边呢其实也非常简单啊这个就是我们之前用的那个啊

11:28.480 --> 11:29.480
这就我们之前用的那个

11:29.980 --> 11:32.680
那我们这边呢现在的话那个一项数就写成什么

11:33.280 --> 11:36.280
是不是就写成0.01remo

11:37.480 --> 11:38.280
是不是就ok了

11:39.280 --> 11:45.080
对吧写成0.01remo啊这是关于这个一项数啊直接通过这种方式

11:45.480 --> 11:50.480
就解决了啊也不需要其他的什么添加委员数啊什么乱七八糟的啊

11:52.080 --> 11:53.280
好然后接下最后一个

11:54.280 --> 11:59.280
最后一个的话是移动端app有哪些类型啊这个一定要分清楚啊

12:00.080 --> 12:04.080
这个有的同学就是移动端学了半天他都不知道自己学的这个移动端

12:04.480 --> 12:06.980
啊就目前在做的这个究竟是什么

12:08.080 --> 12:14.280
对吧这咱们现在移动端应用的话其实分为三大类啊这个我记得我好像讲过吧

12:15.080 --> 12:21.480
啊记不清楚了啊我这边再说一下啊就是分是哪三大类了首先第一个是微博app

12:22.080 --> 12:24.280
啊整个我们这门客是不是就叫做微博app

12:25.280 --> 12:28.280
对吧然后还有一个什么呢还有一个叫做netiv

12:28.980 --> 12:29.480
app

12:30.380 --> 12:33.480
netiv app的话就是这个原生应用啊

12:33.980 --> 12:37.080
然后接下来还有一个什么呢还有一个hybrid app

12:37.880 --> 12:42.280
ok 那我们一个一个来看那首先第一个第一个呢是这个微博app

12:42.880 --> 12:47.080
微博app呢其实本质上就是指的什么呢本质上指的就是网页

12:47.980 --> 12:53.780
啊他和那个pc端的这个网页其实是没什么太大区别的啊你以前在pc上做的时候是吧

12:53.780 --> 12:57.780
网页是在pc流览器里面打开那我现在做的网页的话就是在哪里

12:58.180 --> 13:01.780
是不是在啊手机上的这个流览器里面打开

13:02.780 --> 13:05.780
对不对啊这个其实就是微博app

13:05.980 --> 13:09.180
ok 那微博app他是不能在商店中下载的

13:09.580 --> 13:15.580
他主要是什么呢主要是在这个移动设备中打开啊就是移动设备的这个浏览器中打开

13:16.180 --> 13:20.580
ok 使用的技术也是传统的html.js和css

13:21.180 --> 13:24.580
啊也就是以前你在pc端你是怎么写网页的

13:24.780 --> 13:27.780
那你这边这个微博app那就也是怎么写

13:28.580 --> 13:34.780
对吧啊我们这边呢我们这门客讲了这个微博app你仔细回忆一下其实新知识其实并不多

13:35.880 --> 13:41.180
对吧基本上就是以前是怎么写的现在也是这么写啊只不过有些时候的话就会显得比较麻烦

13:41.980 --> 13:45.980
啊比如说我要阻止默认事件阻止了之后我连滑平都得自己去写

13:47.080 --> 13:50.380
对不对比较麻烦而已啊这是微博app

13:50.980 --> 13:53.780
好然后接下来话这个netive app

13:54.180 --> 13:58.380
啊netive app就是指的是什么指的是原声应用啊

13:58.980 --> 14:05.380
然后这个安卓安卓的话有安卓的这个原声应用iOS有iOS的原声应用啊

14:05.380 --> 14:08.980
并且的话就是不同的手机系统你这边要给他们写原声应用的话

14:09.480 --> 14:15.280
然后用的语言都不一样啊比如安卓的话用的是什么呢安卓用的是这个java

14:15.880 --> 14:19.880
那iOS用的是object这个objective c

14:20.380 --> 14:24.880
啊但现在的话这个iOS的话可以用这个swift了啊

14:24.880 --> 14:27.880
那这个安卓的话也可以用一个好像叫做那个cotli

14:29.880 --> 14:35.880
啊原声app他有个好处什么呢他好处就是他的这个兼容性他就不存在什么兼容性

14:36.580 --> 14:38.980
对不对他的用户体验一定是最好的

14:39.980 --> 14:41.380
啊用户体验一定是最好的

14:42.080 --> 14:49.180
啊为什么因为他你这边呢就是本身就是在这个人家的这个手机操作系统的这个平台上面是不是做这个开发

14:49.680 --> 14:54.180
那各种的这种就是原声接口是不是想调用就调用对不对

14:54.180 --> 14:58.680
只要这个操作系统给你提供你就可以调用啊说他的体验是最好的

14:59.080 --> 15:03.280
那他的缺点就是什么呢他的缺点的话就是这个开发成本是不是比较高啊

15:04.580 --> 15:09.880
对吧啊我作为一个老板我现在的话想开发一个这个应用啊开发这个应用的话

15:09.880 --> 15:16.580
那我还得去找两拨人啊一拨的话是这个安卓开发安卓的一拨的话是开发这个iOS的

15:17.380 --> 15:21.180
对吧啊那这个前面的这个微博app他就不存在这个问题

15:21.680 --> 15:27.080
但微博app他有没有自身的缺陷呢也有啊比如说很多这个

15:27.880 --> 15:29.880
就是原声的接口我调不了

15:31.280 --> 15:35.680
哎呀我调不了很多原声的接口我都调不了为什么因为你是这个网页啊

15:36.480 --> 15:42.480
对不对你运行在浏览器里面你区区一个浏览器这边的话我是不允许你调各种这种原声接口的

15:43.080 --> 15:44.280
我会认为非常的危险

15:45.180 --> 15:51.180
对不对啊第二个的话就是你这个微博app他体验啊不会比那个列体为app好

15:51.780 --> 15:52.980
因为你本质上是网页

15:53.780 --> 16:01.880
对不对啊你回头的话你要进行一个页面切换呀之类的不会比这个原声应用他的体验好啊各种各样的这个接口也调不到

16:02.580 --> 16:04.780
第三个话就是微博app的话他是什么

16:05.480 --> 16:09.280
就我们刚刚讲了只能在哪里打开是不只能在浏览器里面打开

16:10.680 --> 16:13.680
对吧你看我们上课的时候我们打开是不是都是在浏览器里面打开的

16:14.880 --> 16:20.280
对不对你就没办法像这个原声app一样啊他就是你可以打包成一个app

16:20.780 --> 16:23.780
回头的话可以把它上传到这个应用市场里面

16:24.780 --> 16:30.680
回头用户可以下载啊这一点的话你是不行的你要依赖于什么呢依赖于浏览器啊

16:31.180 --> 16:35.980
但微博app他有没有好处呢他也有好处什么好处开发框呀

16:36.580 --> 16:41.580
这成本低啊对不对我开发一套袋嘛什么两个平台都可以爬

16:42.080 --> 16:48.280
对不对我管你是ios还是android你总得有浏览器吗对不对你只要有浏览器你就可以打开网页吗

16:48.980 --> 16:50.880
啊我们微博app本质是不是就是网页

16:51.980 --> 16:59.880
对不对啊说他也有好处ok啊最后一个最后一个叫做这个harbert这个hybert app

17:00.380 --> 17:02.380
啊就是什么呢就是混合应用

17:03.180 --> 17:10.680
混合应用的话它是介于微博app和这个lativeapp两者之间的一种这个app的这种形式

17:11.580 --> 17:13.580
啊最典型的就是那个uniapp

17:14.380 --> 17:16.980
uniapp的话其实就是一个hybert app

17:17.580 --> 17:23.380
啊他这边那就是什么呢他这边那就是允许你使用这个写网页的方式

17:23.980 --> 17:29.380
是不是来书写这个应用书写了之后然后接下来干嘛呢接下来的话把这个应用

17:30.380 --> 17:36.580
打包到这个vibreview里面就外层套一个壳啊这个vibreview我们之前是不是讲过的

17:37.380 --> 17:41.580
对不对我记得我们之前是在雷小节好像是在第二小节吧

17:42.380 --> 17:49.680
啊这里vibreview我是不是介绍过的对不对啊说这里的话他就是什么呢他就是允许你使用这种

17:50.380 --> 17:56.880
开发网页的技术来开发你的这个应用开发完了之后的外层给你套一个这个vibreview的这个壳

17:57.880 --> 18:00.080
这个的话vibreview呢它是这个原生的

18:00.780 --> 18:07.280
这个原生应用里面的一个这个主键啊套了这个壳之后然后回头的话你就可以干嘛呢你就可以进行打包了

18:08.280 --> 18:15.320
啊打包之后呢这样你可以发布到什么呢可以发布到这个商店里面啊最终的话以这个app的形式来打开

18:16.080 --> 18:19.520
啊这个的话是目前来讲比较流行的一种方式

18:20.000 --> 18:25.280
就这个hybert app啊比如说现在非常非常流行的就是那个uniapp

18:26.080 --> 18:29.880
对不对那那个uniapp就是一个典型的hybert app

18:30.480 --> 18:32.880
啊你这个开发的时候你使用什么呢使用vioe

18:33.480 --> 18:39.480
对吧使用vioe技术来进行开发开发完了之后然后接下来干嘛呢然后接下来的话这个

18:40.400 --> 18:46.760
发布啊进行一个打包他他也提供那个云打包打包完了之后然后下发布就可以了

18:48.480 --> 18:53.600
啊这是关于这个移动端app他的这个类型啊这个一定要分得清楚啊不要就是

18:54.320 --> 18:55.840
呃这一块啥啥分不清

18:56.680 --> 19:00.040
对吧我们现在学的是什么我们现在学的是这个web app

19:01.040 --> 19:04.800
好吧我们学的是这个就我们整个这门课是这个web app

19:06.240 --> 19:14.320
啊回头的话然后也会有关于这个hybert app的啊这个的话就不要想了啊这个类题vip啊这个啊这个的话我说想

19:14.680 --> 19:20.440
这个的话其实我们后面的话也会有相应的课程这个的话典型的代表什么呢典型代表就是那个rn

19:21.440 --> 19:30.240
react native啊这个的话可能有的同学听过有同学没听过啊这react native呢他其实就是什么呢他其实就是开发的是原生应用

19:31.000 --> 19:34.960
啊他开发的就是原生应用啊这个我们后面出这门课的时候我们再说

19:35.800 --> 19:47.160
好吧好大家这个hybert的app这个的话是那个比较典型的uniapp这个的话咱们也是有相应的这个课程的啊大家回头感兴趣的话可以去看一看

19:48.160 --> 19:56.720
好吧OK啊这边就给大家总结了这么四个常见的问题啊但还有一些其他常见的问题

19:57.120 --> 20:05.760
但这些其他常见问题的话我觉得就是把它单独拎出来没有太大必要啊这边的话我们来看一下嘛这个的话就是我们的那个前端

20:06.720 --> 20:11.120
这个移动端面试题会走啊里面分了这么几个部分这个是小程序的

20:11.720 --> 20:18.720
是吧小程序现在也是个重点啊这个是uniapp的uniapp是不是就是那个刚说的hybert的app啊对不对

20:19.240 --> 20:21.800
好大家第三个部分第三个部分就是

20:23.800 --> 20:31.200
就是这边啊其他的移动端的相关题目啊那这边呢这个单击穿透这个是不是刚说了对不对

20:32.000 --> 20:40.200
好然后这个自适应布局啊这个自适应布局啊其实也就和你pc端其实是差不多的

20:40.680 --> 20:45.080
对吧啊其他的什么这个怎么做好用户体验这些这些呢你就大致看一下

20:45.800 --> 20:52.920
好那至于这个这个什么背景图片抹忽这个就干嘛了这个的话你就用这个二倍图或者三倍图就解决了

20:53.560 --> 20:55.240
那还有一些像这些啊

20:55.880 --> 21:02.800
什么如何解决长时间按住页面出现散退这些问题的话啊他有些是什么呢有些是通过一行代码

21:03.520 --> 21:09.880
通过一行代码来解决啊这些问题的话有些时候有些他是就是在最早的时候

21:10.600 --> 21:11.400
出现了问题

21:12.120 --> 21:17.320
ok就早期的时候现在的话这些问题有很多很多这些问题他其实已经消失了

21:18.120 --> 21:19.000
已经不存在了

21:19.960 --> 21:25.680
ok 你看我们在开发的时候其实没有遇到这些问题对不对什么散退啊啊然后这个什么

21:26.440 --> 21:33.120
内阴影啊这些根本没有遇到啊说这些的话你就大致的你这个漏一眼有那么一个印象就可以了

21:33.840 --> 21:39.800
好吧啊其他的话我这边让我看一下哈什么圆脚失效啊这些那其实都是通过这个一行代码

21:40.280 --> 21:44.080
调整一下就可以了啊大家这个是这个300秒延迟

21:44.960 --> 21:52.360
对吧啊其他的话这边其他的话我觉得就没什么需要单独拎出来讲的了啊

21:53.200 --> 21:55.560
啊这个这个呢是这个波号啊波号

21:57.080 --> 22:01.800
其他的话就没有什么需要单独拎出来讲的哈这些是配这些是不是之前是讲过的

22:02.960 --> 22:03.160
对吧

22:04.160 --> 22:04.640
啊

22:05.400 --> 22:11.840
那pwa那一下这边这个单位啊ok啊这个呢回头大家可以自己把它过一下

22:12.560 --> 22:20.360
好吧这个面试题啊我这边就把这四个啊这四个我觉得比较典型的我把它单独拎出来啊给他说一下

22:21.240 --> 22:29.640
ok好我们整个这门客的话就到这里啊希望通过这门客的话同学们能够这个对这个web app

22:30.200 --> 22:33.840
有一个整体的这个认识啊不再去畏惧这个东西

22:34.520 --> 22:38.240
对吧人家说开发这个vivo app你感觉听都没听过这个就说不过去

22:39.040 --> 22:42.920
对不对啊然后vivo app里面一些常见的一些这个操作

22:44.000 --> 22:53.040
啊你要这个啊就比如滑平啊这些对吧然后阻止默认事件之后呢如何滑平啊如何点击啊这些常见的操作你要挥

22:53.880 --> 22:57.320
ok好这门客就到这里啊再见

