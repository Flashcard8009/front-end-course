WEBVTT

00:00.000 --> 00:02.000
好了 同学们 咱们继续来搞

00:02.000 --> 00:07.600
那这堂课呢 主要是讲 关于说 如果把store啊 如果把路由放进去

00:07.600 --> 00:09.800
包括他们放下来之后 我们要注意什么

00:09.800 --> 00:11.800
这是咱们这堂课的一个重点

00:11.800 --> 00:17.600
ok 这呢 这个第四堂课的这个代码呢 跟第三堂课代码一模一样

00:17.600 --> 00:22.600
我只把一些没用的什么这个old dates 它把一些这个重复的文件删掉了

00:22.600 --> 00:24.600
剩下的跟上堂课的一样

00:24.600 --> 00:30.600
只不过在这里面 在这个咱们配置好的环境基础上 加入路由 加入这个vuex

00:30.600 --> 00:34.600
ok 那咱们还是先进入到这样的一个路径下

00:34.600 --> 00:37.600
然后把用的这个路由啊 这一通装进去

00:37.600 --> 00:41.600
npm i什么的vuex 以及vuerouter 是吧

00:41.600 --> 00:47.600
ok 那咱们先搞路由 搞完路由咱们再找搞这个vuex

00:47.600 --> 00:54.600
ok 那在src components 这里面有一个demo了 对吧

00:54.600 --> 00:57.600
那咱就把它当成一个自主键 咱们在这里面再搞一个

00:57.600 --> 01:01.600
假如叫home.rel 啊 主页 好吧

01:01.600 --> 01:07.550
诶 嗯 这是什么

01:07.550 --> 01:11.550
诶 defaults

01:11.550 --> 01:14.550
诶 h1

01:14.550 --> 01:21.550
诶 h1 什么的 这个我是后面面

01:21.550 --> 01:24.550
啊 后面面 ok

01:24.550 --> 01:27.550
然后在这里面呢 我们这个有两个组件

01:27.550 --> 01:29.550
有两个组件之后我们在这干嘛呢

01:29.550 --> 01:33.550
诶 说明一个router.js啊 搞起来我们的路由

01:33.550 --> 01:37.550
啊 路由的话就用咱们这两个组件啊 用两个咱们这两个组件

01:37.550 --> 01:43.550
然后在这里面干嘛呢 这个 import view

01:43.550 --> 01:46.550
from view

01:46.550 --> 01:50.550
啊 把这个路由 import viewrouter

01:50.550 --> 01:54.550
from viewrouter

01:54.550 --> 01:57.550
啊 然后 view.use

01:57.550 --> 01:59.550
viewrouter

01:59.550 --> 02:02.550
啊 然后咱们在生成实力的时候利用工程模式

02:02.550 --> 02:06.550
导出的是一个函数的同样 在这生产路由的时候也一样

02:06.550 --> 02:09.550
export default

02:09.550 --> 02:13.550
default 一个function

02:13.550 --> 02:16.550
啊 在这里面 const 一个router

02:16.550 --> 02:19.550
对于有一个viewrouter

02:19.550 --> 02:23.550
诶 然后把这个router返回

02:23.550 --> 02:28.340
诶 ok 啊

02:28.340 --> 02:32.340
然后在这里面再来配置一下 记住咱们服务端渲染

02:32.340 --> 02:35.340
啊 服务端渲染这个配置

02:35.340 --> 02:38.340
啊 首先 第一个 然后下说的

02:38.340 --> 02:42.340
诶 下说第一个什么呢 是咱们的模式

02:42.340 --> 02:45.340
mode 这个一定是hissure

02:45.340 --> 02:49.340
啊 一定是这个咱们用hassure啊 因为你hassure访问的时候

02:49.340 --> 02:54.340
呃 浏览器它只能拿到这个几号前面的 后面的路径是拿不到

02:54.340 --> 02:56.340
啊 所以说咱们用hissure

02:56.340 --> 03:00.340
啊 然后这个下面就是咱们这个入词的一个配置

03:00.340 --> 03:02.340
啊 在这呢咱们不多谢啊

03:02.340 --> 03:04.340
这些两个 一个是咱们的更路径

03:04.340 --> 03:06.340
啊 然后这里面动态路由

03:06.340 --> 03:08.340
component

03:08.340 --> 03:10.340
啊 component

03:10.340 --> 03:12.340
import

03:12.340 --> 03:15.340
呃 上级目录 诶

03:15.340 --> 03:19.340
呃 当前目录下的component 下面的

03:19.340 --> 03:22.340
home.rew

03:22.340 --> 03:25.340
啊 然后再来一个

03:25.340 --> 03:30.610
有什么demo

03:30.610 --> 03:32.610
component

03:32.610 --> 03:37.110
import

03:37.110 --> 03:39.110
嗯

03:39.110 --> 03:41.110
component 下面的

03:41.110 --> 03:43.110
这个这个demo.rew

03:43.110 --> 03:46.110
对吧 诶 两个啊 两个

03:46.110 --> 03:49.110
别的话就没什么了 咱们在这就引入了什么

03:49.110 --> 03:52.110
两个组件啊 就是引入两个组件

03:52.110 --> 03:54.110
别的话就没啥了 好吗

03:54.110 --> 03:57.110
那OK 那回来啊 如果是hassure 这样

03:57.110 --> 03:59.110
回到 回到咱们的这个

03:59.110 --> 04:01.110
这个这个这个这个 诶 慢点

04:01.110 --> 04:03.110
呃 回到apview 这里面

04:03.110 --> 04:05.110
啊 那这个东西就

04:05.110 --> 04:08.110
呃 这个 先回到这里吧 先回到这里

04:08.110 --> 04:10.110
他们的 import

04:10.110 --> 04:11.110
create

04:11.110 --> 04:13.110
呃 router

04:13.110 --> 04:15.110
然后 当前录下的

04:15.110 --> 04:17.110
router.js

04:17.110 --> 04:19.110
啊 然后在这里面干嘛的

04:19.110 --> 04:21.110
把router放进去 对吧

04:21.110 --> 04:23.110
couse 它一个router

04:23.110 --> 04:25.110
一个create router

04:25.110 --> 04:27.110
返回的是一个

04:27.110 --> 04:30.110
router追向 这也能进来就行了

04:30.110 --> 04:32.110
对吧 是不是

04:32.110 --> 04:35.110
返回的是个router啊 没问题

04:35.110 --> 04:37.110
OK 那回到这里面

04:37.110 --> 04:39.110
这个home 回到这个apview

04:39.110 --> 04:41.110
这里面的话 咱就不这么搞了

04:41.110 --> 04:44.110
就这个hassure可以留着啊

04:44.110 --> 04:46.110
然后下面这个 组件的引入啊 这些东西都干掉

04:46.110 --> 04:48.110
干嘛呢 咱给它换成

04:48.110 --> 04:51.110
router link

04:51.110 --> 04:54.110
啊 以及router view

04:54.110 --> 04:57.940
啊 然后这里面什么呢

04:57.940 --> 04:58.940
我们的home

04:58.940 --> 05:00.940
啊 叫熟业

05:00.940 --> 05:03.940
啊 这个是demo

05:03.940 --> 05:06.940
啊 然后这个

05:06.940 --> 05:08.940
图

05:08.940 --> 05:13.080
哎 跟路径

05:13.080 --> 05:15.080
然后这个呢

05:15.080 --> 05:18.080
哎 这个是demo

05:18.080 --> 05:19.080
那

05:19.080 --> 05:21.080
OK 那是路由配完了

05:21.080 --> 05:22.080
啊 路由配完了

05:22.080 --> 05:23.080
那路由配完了

05:23.080 --> 05:25.080
对于我们这个code来说

05:25.080 --> 05:27.080
就这样了 对吧 你想挑就挑

05:27.080 --> 05:29.080
哎 那对于服务器来说不一样

05:29.080 --> 05:31.080
那当你访问刚demo的时候

05:31.080 --> 05:35.080
那其实是我们这边是能拿到demo的

05:35.080 --> 05:37.080
也就是说在我们的这个服务器

05:37.080 --> 05:39.080
在这里面啊 我们这里面

05:39.080 --> 05:41.080
你如果访问的这个

05:41.080 --> 05:43.080
哎 如果你访问的这个

05:43.080 --> 05:44.080
是刚demo

05:44.080 --> 05:46.080
那我们在这required URL

05:46.080 --> 05:48.080
它就是刚demo

05:48.080 --> 05:50.080
哇 所以说它是能拿到的

05:50.080 --> 05:52.080
啊 它是能拿到的

05:52.080 --> 05:53.080
那所以说

05:53.080 --> 05:54.080
那所以说干嘛呢

05:54.080 --> 05:55.080
这个url啊

05:55.080 --> 05:57.080
我们要用 用什么呢

05:57.080 --> 05:59.080
就是那你说在

05:59.080 --> 06:00.080
在前段的话

06:00.080 --> 06:01.080
我挑demo的话

06:01.080 --> 06:03.080
前段路由管理了对吧

06:03.080 --> 06:05.080
在服务段我想挑demo怎么办

06:05.080 --> 06:06.080
那这个时候我首先

06:06.080 --> 06:08.080
第一步我要把这个url拿到

06:08.080 --> 06:10.080
啊 我要拿到这个url

06:10.080 --> 06:11.080
哎 const

06:11.080 --> 06:15.080
一个url等于required URL

06:15.080 --> 06:17.080
哎 这写错了

06:19.080 --> 06:20.080
嗯 URL

06:20.080 --> 06:22.080
啊 我先把这个拿到

06:22.080 --> 06:23.080
拿到之后干嘛呢

06:23.080 --> 06:24.080
我们在这

06:24.080 --> 06:25.080
哎 这个

06:25.080 --> 06:26.080
Render to run的时候

06:26.080 --> 06:28.080
把这个url传进去

06:28.080 --> 06:30.080
啊 或者说

06:30.080 --> 06:31.080
这么传个对象

06:31.080 --> 06:33.080
啊 url传个对象

06:33.080 --> 06:34.080
那这个对象

06:34.080 --> 06:36.080
这个东西干嘛呢

06:36.080 --> 06:37.080
可以被咱们

06:37.080 --> 06:38.080
这个导入

06:38.080 --> 06:39.080
可以作为参数

06:39.080 --> 06:41.080
传到咱们的这个

06:41.080 --> 06:43.080
哎 solo entry.js在这

06:43.080 --> 06:44.080
啊 有一个参数

06:44.080 --> 06:45.080
啊 说一下文

06:45.080 --> 06:46.080
contents

06:46.080 --> 06:49.080
ctx啊 给名人ctx

06:49.080 --> 06:50.080
那包括说

06:50.080 --> 06:51.080
那传到这里面

06:51.080 --> 06:52.080
咱们能知道

06:52.080 --> 06:53.080
ctx URL

06:53.080 --> 06:54.080
就是我们的路由对吧

06:54.080 --> 06:55.080
那包括说在这

06:55.080 --> 06:56.080
干嘛呢

06:56.080 --> 06:57.080
ok 来个router

06:59.080 --> 07:00.080
来个router 是吧

07:00.080 --> 07:01.080
那原则上

07:01.080 --> 07:02.080
我们直接在这

07:02.080 --> 07:03.080
router

07:03.080 --> 07:05.080
哎 点push

07:05.080 --> 07:07.080
ctx是可以的对吧

07:07.080 --> 07:08.080
啊 原则上

07:08.080 --> 07:09.080
这样就可以了

07:09.080 --> 07:10.080
但是防止

07:10.080 --> 07:11.080
啊 防止什么呢

07:11.080 --> 07:12.080
一步组建

07:12.080 --> 07:13.080
包括说

07:13.080 --> 07:14.080
可能一些一步操作

07:14.080 --> 07:15.080
直接这么搞的话

07:15.080 --> 07:16.080
可能

07:16.080 --> 07:17.080
这个时间不上

07:17.080 --> 07:18.080
或者尊不上

07:18.080 --> 07:19.080
怎么办呢

07:19.080 --> 07:20.080
咱们这里面

07:21.080 --> 07:24.080
一个new promise

07:24.080 --> 07:27.080
啊 result

07:28.080 --> 07:29.080
reject

07:31.080 --> 07:32.080
然后在这里面

07:32.080 --> 07:33.080
在这里面

07:33.080 --> 07:35.080
完成刚才那个操作

07:35.080 --> 07:38.080
啊 完成刚才这个操作

07:38.080 --> 07:39.080
那什么呢

07:39.080 --> 07:40.080
这个

07:40.080 --> 07:41.080
哎 拿到这个路由

07:41.080 --> 07:42.080
对吧

07:42.080 --> 07:43.080
哎 反过这个app

07:43.080 --> 07:44.080
那反过app的话

07:44.080 --> 07:45.080
就就就不是这个了

07:45.080 --> 07:46.080
对吧 应该是什么

07:46.080 --> 07:47.080
resolve

07:47.080 --> 07:48.080
app

07:48.080 --> 07:49.080
对吧

07:49.080 --> 07:50.080
哎 应该是这个样子

07:50.080 --> 07:51.080
啊

07:51.080 --> 07:52.080
那同时呢

07:52.080 --> 07:53.080
对于我们刚才说了

07:53.080 --> 07:54.080
一步组建

07:54.080 --> 07:55.080
包括路由加载的时候

07:55.080 --> 07:56.080
啊 干嘛呢

07:56.080 --> 07:57.080
我们这个

07:57.080 --> 07:58.080
这个

07:58.080 --> 07:59.080
要判断一下

07:59.080 --> 08:00.080
那所以说

08:00.080 --> 08:01.080
哎 执行一个

08:01.080 --> 08:02.080
路由的生命周期海

08:02.080 --> 08:03.080
这个周期海

08:03.080 --> 08:04.080
这个这个事件

08:04.080 --> 08:05.080
啊 already

08:05.080 --> 08:06.080
就是这个路由准备

08:06.080 --> 08:07.080
这个这个加载完了

08:07.080 --> 08:08.080
ready

08:08.080 --> 08:09.080
啊 already

08:09.080 --> 08:10.080
干嘛呢

08:10.080 --> 08:11.080
也是两个参数

08:11.080 --> 08:12.080
两个参数啊

08:12.080 --> 08:13.080
第二个参数

08:13.080 --> 08:14.080
我们直接是失败

08:14.080 --> 08:15.080
reject

08:15.080 --> 08:16.080
干嘛呢 就是

08:16.080 --> 08:17.080
你跳的这个

08:17.080 --> 08:18.080
我们得判断一下

08:18.080 --> 08:19.080
这个路准备存存在吗

08:19.080 --> 08:20.080
对不对

08:20.080 --> 08:21.080
如果不存在

08:21.080 --> 08:22.080
404嘛

08:22.080 --> 08:23.080
对吧

08:23.080 --> 08:24.080
ok

08:24.080 --> 08:25.080
那第一个呢

08:25.080 --> 08:26.080
第一个参数

08:26.080 --> 08:27.080
也是一个函数

08:27.080 --> 08:29.080
也是个函数

08:29.080 --> 08:30.080
然后在这

08:30.080 --> 08:31.080
啊 这就

08:31.080 --> 08:32.080
那就不在这写了

08:32.080 --> 08:33.080
啊

08:33.080 --> 08:34.080
就在这里面啊

08:34.080 --> 08:35.080
ready

08:35.080 --> 08:36.080
干嘛呢

08:36.080 --> 08:37.080
那首先

08:37.080 --> 08:38.080
我得判断一下

08:38.080 --> 08:39.080
判断什么呢

08:39.080 --> 08:40.080
就是

08:40.080 --> 08:41.080
哎

08:41.080 --> 08:42.080
就是

08:42.080 --> 08:43.080
判断

08:43.080 --> 08:44.080
当

08:44.080 --> 08:45.080
前

08:45.080 --> 08:46.080
路由下

08:46.080 --> 08:47.080
是否

08:47.080 --> 08:48.080
存在

08:48.080 --> 08:49.080
组建

08:49.080 --> 08:50.080
啊

08:50.080 --> 08:51.080
那这个方法

08:51.080 --> 08:52.080
我不知道对吧

08:52.080 --> 08:53.080
那其实这个呢

08:53.080 --> 08:54.080
就跟大家怎么说呢

08:54.080 --> 08:55.080
就是

08:55.080 --> 08:56.080
呃

08:56.080 --> 08:58.080
我拿这个打开吧

08:58.080 --> 08:59.080
就是

08:59.080 --> 09:00.080
咱们在学

09:00.080 --> 09:01.080
语的时候不可能

09:01.080 --> 09:02.080
所有文档都给大家

09:02.080 --> 09:03.080
讲的是一些常用的

09:03.080 --> 09:04.080
啊

09:04.080 --> 09:05.080
那所以说

09:05.080 --> 09:06.080
这个东西干嘛呢

09:06.080 --> 09:07.080
就是

09:07.080 --> 09:08.080
当你用到

09:08.080 --> 09:09.080
或者看到

09:09.080 --> 09:10.080
其他文档

09:10.080 --> 09:11.080
的时候

09:11.080 --> 09:12.080
你才

09:12.080 --> 09:13.080
会想

09:13.080 --> 09:14.080
哎 这个东西是这么用的

09:14.080 --> 09:15.080
包括当时给大家讲

09:15.080 --> 09:16.080
大家觉得

09:16.080 --> 09:17.080
不用

09:17.080 --> 09:18.080
然后还得记

09:18.080 --> 09:19.080
对吧

09:19.080 --> 09:20.080
哎

09:20.080 --> 09:21.080
没有路特

09:21.080 --> 09:22.080
嗯

09:22.080 --> 09:25.220
哎

09:25.220 --> 09:26.220
等会啊

09:26.220 --> 09:27.220
API

09:27.220 --> 09:28.220
对

09:28.220 --> 09:29.220
然后咱们在这

09:29.220 --> 09:31.220
你看这个

09:31.220 --> 09:35.370
嗯

09:35.370 --> 09:36.370
哪去了

09:36.370 --> 09:37.370
哎

09:37.370 --> 09:38.370
路特实力的方法

09:40.370 --> 09:41.370
already

09:41.370 --> 09:42.370
对吧

09:42.370 --> 09:43.370
这个是咱们用的这个方法

09:43.370 --> 09:44.370
啊

09:44.370 --> 09:45.370
就是

09:45.370 --> 09:46.370
关联的医部组建

09:46.370 --> 09:47.370
去保护断血染

09:47.370 --> 09:48.370
和刻护断

09:48.370 --> 09:49.370
输出一致

09:49.370 --> 09:50.370
啊

09:50.370 --> 09:52.870
呃

09:52.870 --> 09:53.870
然后咱刚才

09:53.870 --> 09:54.870
要用的是这个

09:54.870 --> 09:55.870
啊

09:55.870 --> 09:56.870
get matches components

09:56.870 --> 09:57.870
干嘛呢

09:57.870 --> 09:58.870
返回目标位置

09:58.870 --> 10:00.870
或者当前路由匹配的

10:00.870 --> 10:01.870
这个组建

10:01.870 --> 10:02.870
数

10:02.870 --> 10:03.870
是不是

10:03.870 --> 10:04.870
如果当前路由

10:04.870 --> 10:05.870
有匹配的组建

10:05.870 --> 10:06.870
那说明这个是一个

10:06.870 --> 10:07.870
哎

10:07.870 --> 10:08.870
正确的路由

10:08.870 --> 10:09.870
对吧

10:09.870 --> 10:10.870
如果这个路由

10:10.870 --> 10:11.870
没有匹配的组建

10:11.870 --> 10:12.870
说明你访问的是一个

10:12.870 --> 10:13.870
错路由

10:13.870 --> 10:14.870
错路由的话

10:14.870 --> 10:15.870
就304吧

10:15.870 --> 10:16.870
找不到对吧

10:16.870 --> 10:17.870
哎

10:17.870 --> 10:18.870
那所以说在这

10:18.870 --> 10:19.870
干嘛呢

10:19.870 --> 10:20.870
那这样的话

10:20.870 --> 10:21.870
刚才我们看这个

10:21.870 --> 10:22.870
API他咋说的

10:22.870 --> 10:23.870
呃

10:23.870 --> 10:24.870
这个返回

10:24.870 --> 10:25.870
组建数组

10:25.870 --> 10:26.870
他可能是多个组建

10:26.870 --> 10:27.870
对吧

10:27.870 --> 10:28.870
哎

10:28.870 --> 10:29.870
就明明是多什么的

10:29.870 --> 10:30.870
是吧

10:30.870 --> 10:31.870
哎

10:31.870 --> 10:32.870
所以说在这干嘛呢

10:32.870 --> 10:33.870
const

10:33.870 --> 10:34.870
一个

10:34.870 --> 10:35.870
match

10:35.870 --> 10:36.870
mach

10:36.870 --> 10:37.870
mach

10:37.870 --> 10:38.870
mach

10:38.870 --> 10:39.870
mach

10:39.870 --> 10:40.870
mach

10:40.870 --> 10:41.870
mach

10:41.870 --> 10:42.870
mach

10:42.870 --> 10:43.870
mach

10:43.870 --> 10:44.870
mach

10:44.870 --> 10:45.870
mach

10:45.870 --> 10:46.870
mach

10:46.870 --> 10:47.870
mach

10:47.870 --> 10:48.870
mach

10:48.870 --> 10:49.870
对吧

10:49.870 --> 10:50.870
没写错吧

10:50.870 --> 10:51.870
这个

10:52.870 --> 10:53.870
复制一下

10:57.400 --> 10:58.400
没错吧

10:59.400 --> 11:01.400
这个呢反而这是个数组

11:01.400 --> 11:02.400
对吧

11:02.400 --> 11:03.400
反而这是个数组

11:03.400 --> 11:04.400
那所以说

11:04.400 --> 11:05.400
我们就判断一下

11:05.400 --> 11:06.400
如果

11:06.400 --> 11:07.400
如果什么

11:07.400 --> 11:08.400
如果这个

11:08.400 --> 11:09.400
这个户

11:09.400 --> 11:11.400
the length

11:11.400 --> 11:12.400
啊

11:12.400 --> 11:13.400
如果是

11:13.400 --> 11:14.400
怎么着

11:14.400 --> 11:15.400
就是这个小

11:15.400 --> 11:16.400
这个这个这个

11:16.400 --> 11:17.400
它反而一定是数组

11:17.400 --> 11:19.400
如果怎么怎么0

11:19.400 --> 11:20.400
怎么着

11:20.400 --> 11:21.400
是一个废物

11:21.400 --> 11:22.400
是吧

11:22.400 --> 11:23.400
ok return

11:23.400 --> 11:24.400
reject

11:24.400 --> 11:25.400
哎

11:25.400 --> 11:26.400
还会对象

11:26.400 --> 11:27.400
code

11:27.400 --> 11:28.400
404

11:28.400 --> 11:29.400
对吧

11:29.400 --> 11:30.400
哎

11:30.400 --> 11:31.400
找不到

11:31.400 --> 11:32.400
找不到

11:32.400 --> 11:33.400
那如果成功了呢

11:33.400 --> 11:34.400
那干嘛呢

11:34.400 --> 11:36.400
咱把这个再返回

11:36.400 --> 11:37.400
再返回

11:37.400 --> 11:38.400
然后同时呢

11:38.400 --> 11:40.400
咱回到幅端这里面

11:40.400 --> 11:41.400
幅端这里面

11:41.400 --> 11:42.400
做一下判断

11:42.400 --> 11:43.400
干嘛呢

11:43.400 --> 11:44.400
如果什么呢

11:44.400 --> 11:46.400
如果Iwarder code

11:46.400 --> 11:47.400
啊

11:47.400 --> 11:48.400
等于什么

11:48.400 --> 11:49.400
404

11:49.400 --> 11:50.400
对吧

11:50.400 --> 11:51.400
哎

11:51.400 --> 11:52.400
404

11:52.400 --> 11:53.400
那干嘛呢

11:53.400 --> 11:58.400
咱就res.staters

11:58.400 --> 11:59.400
啊

11:59.400 --> 12:00.400
404

12:00.400 --> 12:01.400
啊

12:01.400 --> 12:02.400
24

12:02.400 --> 12:03.400
什么呢

12:03.400 --> 12:04.400
这个

12:04.400 --> 12:07.400
页面去活性了

12:07.400 --> 12:08.400
啊

12:08.400 --> 12:09.400
找不到了

12:10.400 --> 12:11.400
404了

12:11.400 --> 12:14.400
是吧

12:14.400 --> 12:15.400
ok

12:15.400 --> 12:16.400
那这个时候干嘛呢

12:16.400 --> 12:17.400
咱们重新

12:17.400 --> 12:18.400
打包一下

12:18.400 --> 12:20.400
npm

12:20.400 --> 12:21.400
run一个

12:21.400 --> 12:22.400
server

12:22.400 --> 12:31.960
build server

12:31.960 --> 12:32.960
然后npm

12:32.960 --> 12:33.960
run一个

12:33.960 --> 12:34.960
build

12:34.960 --> 12:39.620
cleant

12:39.620 --> 12:40.620
然后

12:40.620 --> 12:42.620
cd

12:42.620 --> 12:44.620
s

12:44.620 --> 12:45.620
cd

12:45.620 --> 12:47.620
server

12:47.620 --> 12:48.620
node

12:48.620 --> 12:49.620
indexer.js

12:49.620 --> 12:50.620
对吧

12:50.620 --> 12:52.620
ok那这个时候来吧

12:52.620 --> 12:53.620
我们看一下

12:53.620 --> 12:54.620
比如说

12:54.620 --> 12:55.620
哎

12:56.620 --> 12:57.620
localhost

12:57.620 --> 12:58.620
123.6

12:58.620 --> 12:59.620
哎

12:59.620 --> 13:00.620
服务器错误

13:00.620 --> 13:01.620
看看是什么问题啊

13:01.620 --> 13:02.620
干什么问题

13:02.620 --> 13:07.940
什么

13:07.940 --> 13:08.940
cannot read

13:08.940 --> 13:09.940
push

13:09.940 --> 13:10.940
off and defend

13:10.940 --> 13:14.700
在这

13:14.700 --> 13:17.200
router

13:17.200 --> 13:18.200
create app

13:18.200 --> 13:19.200
create app

13:19.200 --> 13:20.200
慢点

13:20.200 --> 13:21.200
js

13:23.200 --> 13:24.200
哦

13:24.200 --> 13:25.200
这没返回对吧

13:25.200 --> 13:28.470
遇到错误

13:28.470 --> 13:29.470
不要慌啊

13:30.470 --> 13:31.470
所以说

13:31.470 --> 13:32.470
那这出错了的话

13:32.470 --> 13:34.470
咱需要重新打包啊

13:34.470 --> 13:44.270
重新打包

13:44.270 --> 13:45.270
嗯

13:45.270 --> 13:52.450
往这里面

13:52.450 --> 13:53.450
是吧

13:53.450 --> 13:54.450
ok

13:54.450 --> 13:56.450
回来再刷新

13:56.450 --> 13:57.450
哎

13:57.450 --> 13:58.450
页面去虎

13:58.450 --> 13:59.450
行了找不到404

13:59.450 --> 14:00.450
是吧

14:00.450 --> 14:01.450
哎

14:01.450 --> 14:02.450
看看是哪儿的问题啊

14:02.450 --> 14:03.450
嗯

14:04.450 --> 14:05.450
又抱错了

14:14.860 --> 14:15.860
哎

14:15.860 --> 14:16.860
看看啊

14:16.860 --> 14:23.660
呃

14:23.660 --> 14:24.660
arrow

14:24.660 --> 14:25.660
啊

14:25.660 --> 14:28.660
cannot set headers after

14:28.660 --> 14:30.660
layout32cleant

14:31.660 --> 14:32.660
哎

14:32.660 --> 14:33.660
问题啊

14:33.660 --> 14:34.660
难道是这儿的问题吗

14:45.610 --> 14:46.610
哎对啊

14:47.610 --> 14:48.610
来看一下

14:49.610 --> 14:53.580
嗯

14:53.580 --> 14:54.580
你对

14:54.580 --> 14:55.580
我觉得不应该是这儿的问题啊

14:56.580 --> 14:59.020
看看

14:59.020 --> 15:01.020
cannot set headers

15:01.020 --> 15:03.020
呃是难道后面啊啊

15:03.020 --> 15:05.020
这个地方得return

15:05.020 --> 15:06.020
对吧

15:06.020 --> 15:07.020
你发送完请求再发送

15:07.020 --> 15:08.020
这不太合适啊

15:09.020 --> 15:12.810
哎

15:12.810 --> 15:13.810
404

15:14.810 --> 15:17.890
url

15:20.780 --> 15:21.780
然后我们这

15:23.780 --> 15:25.780
ctx.url

15:25.780 --> 15:26.780
哈哈哈

15:27.780 --> 15:28.780
好

15:28.780 --> 15:29.780
直接不开玩笑

15:39.190 --> 15:40.190
这这这铺着

15:40.190 --> 15:41.190
这是

15:41.190 --> 15:42.190
这

15:45.720 --> 15:46.720
哎对

15:46.720 --> 15:47.720
这这会儿应该没问题了啊

15:51.720 --> 15:52.720
刷新

15:52.720 --> 15:53.720
还是找不到

15:55.720 --> 15:56.720
哎那不能呢

16:03.100 --> 16:04.100
404

16:05.100 --> 16:06.100
呃

16:06.100 --> 16:07.100
传了对象url

16:07.100 --> 16:08.100
然后

16:08.100 --> 16:10.100
传到这里面来

16:10.100 --> 16:11.100
啊ctx

16:11.100 --> 16:13.100
铺是url

16:13.100 --> 16:15.100
还是说我们路由没配置

16:16.100 --> 16:17.100
那不对啊

16:18.100 --> 16:19.100
对吧

16:19.100 --> 16:26.980
这问题送哪儿呢

16:35.500 --> 16:36.500
哎

16:37.500 --> 16:38.500
不等于你

16:40.500 --> 16:41.500
怎么搞的

16:46.630 --> 16:47.630
那这

16:47.630 --> 16:49.630
哎这个地方只需要打

16:49.630 --> 16:50.630
这个打包

16:50.630 --> 16:51.630
客户五端就

16:51.630 --> 16:52.630
哎

16:53.630 --> 16:54.630
好

16:54.630 --> 16:55.630
这个地方我们只需要打

16:55.630 --> 16:56.630
服务端的这个入口就可以了

16:56.630 --> 16:57.630
因为这

16:58.630 --> 16:59.630
搞个探号

16:59.630 --> 17:01.630
正常或者说没有等于等于

17:01.630 --> 17:02.630
人也行啊

17:02.630 --> 17:03.630
看看条件的问题

17:03.630 --> 17:05.630
这还有问题啊

17:06.630 --> 17:07.630
对吧

17:07.630 --> 17:08.630
这还能存在吗

17:08.630 --> 17:09.630
啊对吧

17:09.630 --> 17:10.630
home demo

17:10.630 --> 17:11.630
啊你包括说

17:11.630 --> 17:13.630
具有这个为我的特性

17:13.630 --> 17:14.630
没有任何问题

17:14.630 --> 17:15.630
啊你包括说

17:15.630 --> 17:16.630
你从这刷新的话

17:16.630 --> 17:18.630
啊只不过他在

17:18.630 --> 17:19.630
你看啊

17:19.630 --> 17:20.630
如果你在这刷新

17:20.630 --> 17:21.630
他返回的是具有

17:21.630 --> 17:23.630
demo的这样的一个内容

17:24.630 --> 17:27.200
对吧

17:27.200 --> 17:28.200
你返回的是demo

17:28.200 --> 17:29.200
这样的内容

17:29.200 --> 17:30.200
啊

17:30.200 --> 17:31.200
但如果你在首页刷新

17:31.200 --> 17:32.200
你返回的就是

17:32.200 --> 17:34.200
哎首页的这样的内容

17:34.200 --> 17:35.200
ok啊

17:35.200 --> 17:36.200
出一点小差距

17:36.200 --> 17:37.200
但是问题不大

17:37.200 --> 17:39.200
问题不大跟老师马虎造成的

17:39.200 --> 17:40.200
呃这个uil

17:40.200 --> 17:41.200
传给他

17:41.200 --> 17:42.200
他呢传到这来

17:42.200 --> 17:43.200
啊传到这来

17:43.200 --> 17:44.200
然后刚开始呢

17:44.200 --> 17:46.200
这个地方跳转的时候

17:46.200 --> 17:47.200
应该跳转我们的uil

17:47.200 --> 17:48.200
对吧

17:48.200 --> 17:49.200
哎传过来的这个参数

17:49.200 --> 17:51.200
这个这个杀人嘛

17:51.200 --> 17:52.200
然后这个地方呢

17:52.200 --> 17:53.200
判断出了错误啊

17:53.200 --> 17:55.200
就是说这个如果有组件

17:55.200 --> 17:57.200
这个这个正常跳转没有组件

17:57.200 --> 17:58.200
404

17:58.200 --> 17:59.200
哎没有问题啊

17:59.200 --> 18:01.200
行了那这是咱们的那个路由

18:01.200 --> 18:02.200
咱们的路由

18:03.200 --> 18:05.200
问题不大啊问题不大

18:05.200 --> 18:07.200
来那把这些东西都关掉啊

18:07.200 --> 18:08.200
都关掉都关掉

18:08.200 --> 18:09.200
哎这也关掉

18:09.200 --> 18:10.200
关掉他

18:10.200 --> 18:11.200
路由完事干嘛呢

18:11.200 --> 18:13.200
来再放放咱们的那个store

18:13.200 --> 18:15.200
啊那你说store路由的话

18:15.200 --> 18:16.200
就注意到这些就行了

18:16.200 --> 18:18.200
啊我们这个store

18:19.200 --> 18:21.200
哎那store的话

18:21.200 --> 18:22.200
跟我平常用有啥区别吗

18:22.200 --> 18:24.200
一样啊只不过在这里

18:24.200 --> 18:26.200
咱们说的是数据预取

18:28.200 --> 18:30.200
啊什么的就是我这个页面

18:30.200 --> 18:31.200
在加载之前他竟然

18:31.200 --> 18:32.200
地方都登录啊

18:32.200 --> 18:34.200
或者互聚用户信息之类的

18:34.200 --> 18:36.200
啊你之后该会许出去

18:36.200 --> 18:37.200
会许出去

18:37.200 --> 18:38.200
只不过在这里面

18:38.200 --> 18:39.200
当我们想提前

18:39.200 --> 18:40.200
跟着页面来的时候

18:40.200 --> 18:42.200
已经把数据放进去的时候

18:42.200 --> 18:43.200
会用到这个

18:43.200 --> 18:44.200
OK啊那同样

18:44.200 --> 18:45.200
我们把这个

18:45.200 --> 18:46.200
评过来

18:46.200 --> 18:49.200
impose view from view

18:50.200 --> 18:51.200
啊

18:51.200 --> 18:55.200
impose view x from view x

18:57.200 --> 18:58.200
啊

18:58.200 --> 19:01.200
然后view.use view

19:01.200 --> 19:03.200
a view x

19:04.200 --> 19:05.200
啊

19:05.200 --> 19:06.200
然后同样

19:06.200 --> 19:07.200
同理啊

19:07.200 --> 19:08.200
导出一个还处

19:08.200 --> 19:10.200
export default

19:10.200 --> 19:11.200
一个function

19:12.200 --> 19:14.200
const a store

19:15.200 --> 19:18.200
等于有一个view x.store

19:20.200 --> 19:21.200
OK

19:22.200 --> 19:23.200
把这个store返回

19:23.200 --> 19:24.200
注意

19:24.200 --> 19:25.200
别再出错了

19:25.200 --> 19:26.200
然后在这里面

19:26.200 --> 19:28.200
比方说我们想要一个名字

19:28.200 --> 19:29.200
比方说在这里面

19:29.200 --> 19:30.200
给一个state

19:31.200 --> 19:32.200
state

19:32.200 --> 19:33.200
什么的

19:33.200 --> 19:34.200
这个name

19:34.200 --> 19:35.200
啊

19:35.200 --> 19:36.200
默认是公帕

19:36.200 --> 19:37.200
啊

19:38.200 --> 19:40.200
然后干嘛呢

19:42.200 --> 19:43.200
诶

19:43.200 --> 19:44.200
没有

19:44.200 --> 19:46.200
还说state

19:46.200 --> 19:47.200
然后干嘛呢

19:47.200 --> 19:48.200
我们想改变世界当中值

19:48.200 --> 19:49.200
需要mutation

19:49.200 --> 19:50.200
对吧

19:50.200 --> 19:51.200
mutations

19:51.200 --> 19:52.200
里面设置一个

19:52.200 --> 19:53.200
还说叫sign name

19:54.200 --> 19:55.200
state

19:56.200 --> 19:57.200
value

19:57.200 --> 19:59.200
把什么的state

19:59.200 --> 20:00.200
点name

20:00.200 --> 20:02.200
等于我们传进来的这个value

20:02.200 --> 20:03.200
啊没毛病

20:03.200 --> 20:04.200
然后那

20:04.200 --> 20:05.200
既然是一曲的话

20:05.200 --> 20:06.200
可能我们去方请求啊

20:06.200 --> 20:07.200
读书一库

20:07.200 --> 20:08.200
他一定是个ebo操作

20:08.200 --> 20:09.200
啊这是定定的了

20:09.200 --> 20:10.200
那所以说

20:10.200 --> 20:11.200
我们想

20:11.200 --> 20:12.200
ebo去改变

20:12.200 --> 20:13.200
这个世界当中值的话

20:13.200 --> 20:14.200
还用到我们的action

20:15.200 --> 20:16.200
对吧

20:18.200 --> 20:19.200
在

20:19.200 --> 20:20.200
在这里面

20:20.200 --> 20:21.200
用的叫干name

20:22.200 --> 20:23.200
啊

20:23.200 --> 20:24.200
commade

20:26.200 --> 20:27.200
好吧

20:27.200 --> 20:28.200
commade

20:28.200 --> 20:29.200
然后在这

20:29.200 --> 20:30.200
在这干嘛呢

20:30.200 --> 20:31.200
我们这个

20:31.200 --> 20:32.200
模拟一个ebo

20:32.200 --> 20:33.200
模拟一个ebo

20:33.200 --> 20:34.200
比方说

20:34.200 --> 20:35.200
在这

20:35.200 --> 20:38.200
return a new promise

20:38.200 --> 20:39.200
干嘛呢

20:39.200 --> 20:40.200
就返回一个

20:40.200 --> 20:41.200
这个这个这个

20:41.200 --> 20:42.200
这个有延迟返回啊

20:42.200 --> 20:43.200
要不要

20:43.200 --> 20:44.200
咱要是如果去

20:44.200 --> 20:45.200
复杂写一口的话

20:45.200 --> 20:46.200
就就

20:46.200 --> 20:48.200
时间相对长一点啊

20:48.200 --> 20:49.200
就这样

20:49.200 --> 20:50.200
就拿一个

20:50.200 --> 20:52.200
定日期来代替

20:52.200 --> 20:54.200
resolve

20:54.200 --> 20:56.700
干嘛呢

20:56.700 --> 20:57.700
在这里面

20:57.700 --> 20:58.700
哎

20:58.700 --> 20:59.700
三才冒险

20:59.700 --> 21:01.700
但是你发送这个

21:01.700 --> 21:03.700
请求也一样啊

21:03.700 --> 21:04.700
哎

21:04.700 --> 21:05.700
咱说

21:05.700 --> 21:06.700
三百毫秒

21:06.700 --> 21:07.700
这想时间挺慢的

21:07.700 --> 21:08.700
三百毫秒干嘛呢

21:08.700 --> 21:09.700
哎

21:09.700 --> 21:10.700
resolve

21:10.700 --> 21:12.700
返回一个ssr

21:12.700 --> 21:14.700
返回一个这样的名字

21:14.700 --> 21:16.700
返回一个这样的名字

21:16.700 --> 21:17.700
ok

21:18.700 --> 21:19.700
点儿子n

21:19.700 --> 21:20.700
Value

21:21.700 --> 21:22.700
干嘛呢

21:22.700 --> 21:23.700
commade

21:23.700 --> 21:24.700
哎

21:24.700 --> 21:26.700
这个叫set name

21:26.700 --> 21:28.700
然后并且把这个Value传过去

21:29.700 --> 21:30.700
对吧

21:30.700 --> 21:31.700
哎

21:31.700 --> 21:32.700
没啥毛病

21:32.700 --> 21:33.700
没啥问题

21:34.700 --> 21:35.700
ok

21:35.700 --> 21:36.700
那好

21:36.700 --> 21:37.700
那回到假日

21:37.700 --> 21:38.700
回到咱们的这个

21:38.700 --> 21:39.700
这个这个这个

21:39.700 --> 21:40.700
这个home 组建当中

21:40.700 --> 21:41.700
应该什么都没有吧

21:41.700 --> 21:42.700
对吧

21:42.700 --> 21:43.700
在这

21:43.700 --> 21:44.700
在这

21:44.700 --> 21:45.700
欢迎

21:46.700 --> 21:47.700
哎

21:47.700 --> 21:48.700
谁呢

21:48.700 --> 21:49.700
我们的这个 name

21:50.700 --> 21:53.910
对吧

21:53.910 --> 21:54.910
欢迎这个 name

21:55.910 --> 21:56.910
那这个时候干嘛呢

21:56.910 --> 21:57.910
哎

21:57.910 --> 21:58.910
首先

21:58.910 --> 21:59.910
我们得把这个

21:59.910 --> 22:01.910
数据 name 拿过来对吧

22:01.910 --> 22:02.910
import

22:03.910 --> 22:04.910
什么的

22:04.910 --> 22:05.910
map

22:05.910 --> 22:06.910
state

22:08.910 --> 22:09.910
from

22:10.910 --> 22:11.910
view x

22:12.910 --> 22:14.910
computed

22:14.910 --> 22:15.910
pot

22:16.910 --> 22:22.490
mapstate

22:23.490 --> 22:24.490
什么的 name

22:25.490 --> 22:26.490
对吧

22:26.490 --> 22:27.490
哎

22:27.490 --> 22:28.490
那好

22:28.490 --> 22:29.490
你不再不考虑

22:29.490 --> 22:30.490
什么的咱们的这个

22:30.490 --> 22:31.490
数据预取之前

22:31.490 --> 22:32.490
你是不是我们可能是

22:32.490 --> 22:33.490
created

22:33.490 --> 22:34.490
对吧

22:34.490 --> 22:35.490
在这个组建

22:35.490 --> 22:36.490
完成之后

22:36.490 --> 22:37.490
发送个请求

22:37.490 --> 22:38.490
这个干嘛呢

22:38.490 --> 22:39.490
只行

22:39.490 --> 22:42.490
this.dollarstore.dispatch

22:43.490 --> 22:44.490
patch

22:44.490 --> 22:45.490
对吧

22:45.490 --> 22:46.490
dispatch 什么的

22:46.490 --> 22:47.490
这个gifname

22:48.490 --> 22:50.490
去把名字写错

22:50.490 --> 22:51.490
别写错名字

22:51.490 --> 22:52.490
就得了

22:52.490 --> 22:53.490
没问题

22:53.490 --> 22:54.490
然后这个manage s

22:54.490 --> 22:55.490
咱把这个store

22:55.490 --> 22:56.490
放进来

22:56.490 --> 22:58.490
import

22:58.490 --> 22:59.490
create

22:59.490 --> 23:00.490
store

23:00.490 --> 23:02.490
stor

23:02.490 --> 23:03.490
from

23:03.490 --> 23:05.490
当前录影下的store

23:06.490 --> 23:07.490
对吧

23:07.490 --> 23:08.490
ok

23:08.490 --> 23:09.490
那你把它拿过来

23:09.490 --> 23:10.490
store

23:11.490 --> 23:12.490
然后

23:12.490 --> 23:13.490
也到处

23:13.490 --> 23:15.490
之后还有用

23:15.490 --> 23:16.490
store

23:16.490 --> 23:18.490
那没有啥问题

23:20.490 --> 23:22.490
cost.store

23:22.490 --> 23:24.490
等于create

23:24.490 --> 23:26.490
store

23:27.490 --> 23:28.490
对吧

23:30.490 --> 23:31.490
ok

23:31.490 --> 23:32.490
ok

23:32.490 --> 23:33.490
没问题

23:33.490 --> 23:35.490
这是manage s

23:35.490 --> 23:36.490
也完事了

23:36.490 --> 23:37.490
这个

23:37.490 --> 23:38.490
他也完事

23:38.490 --> 23:39.490
这个

23:39.490 --> 23:40.490
这也完事了对吧

23:40.490 --> 23:41.490
正常来说

23:41.490 --> 23:42.490
就是我们会有created

23:42.490 --> 23:43.490
对吧

23:43.490 --> 23:44.490
创建

23:44.490 --> 23:45.490
那别创建

23:45.490 --> 23:46.490
在服务端的话

23:46.490 --> 23:47.490
对吧

23:47.490 --> 23:48.490
你或者说

23:48.490 --> 23:49.490
你在created

23:49.490 --> 23:50.490
也行

23:50.490 --> 23:51.490
或者你monty的

23:51.490 --> 23:52.490
挂载的时候

23:52.490 --> 23:53.490
你在请求

23:53.490 --> 23:54.490
是吧

23:54.490 --> 23:55.490
那你在服务端的时候

23:55.490 --> 23:56.490
干嘛呢

23:56.490 --> 23:57.490
有些还说是没法执行的

23:57.490 --> 23:58.490
没法执行

23:58.490 --> 23:59.490
那怎么办呢

23:59.490 --> 24:00.490
怎么办呢

24:00.490 --> 24:01.490
就是

24:01.490 --> 24:02.490
这个

24:02.490 --> 24:03.490
在服务端

24:03.490 --> 24:04.490
要搞的话

24:04.490 --> 24:05.490
干嘛呢

24:05.490 --> 24:06.490
我们在这里面

24:06.490 --> 24:07.490
自定义一个清单函数

24:07.490 --> 24:08.490
叫什么都行

24:08.490 --> 24:09.490
叫什么都行

24:09.490 --> 24:10.490
比方说

24:10.490 --> 24:11.490
你就叫get date

24:11.490 --> 24:13.490
当然说官方给的一个名

24:13.490 --> 24:14.490
叫

24:15.490 --> 24:16.490
get

24:16.490 --> 24:17.490
get

24:17.490 --> 24:18.490
叫什么都行

24:18.490 --> 24:19.490
这是一个函单函数

24:19.490 --> 24:20.490
叫啥都行

24:20.490 --> 24:22.490
然后这个函数干嘛呢

24:23.490 --> 24:25.490
这个函数是暴露给服务端

24:25.490 --> 24:27.490
就是说在我们便利组建的时候

24:27.490 --> 24:28.490
它应该有这个函单方法

24:28.490 --> 24:29.490
那个时候没有z

24:29.490 --> 24:31.490
我没办法通过z去访的

24:31.490 --> 24:32.490
所以说

24:32.490 --> 24:33.490
我把这个store回传

24:33.490 --> 24:34.490
store

24:34.490 --> 24:35.490
store回传

24:35.490 --> 24:37.490
然后在这里面干嘛呢

24:38.490 --> 24:40.490
让我们这个store

24:41.490 --> 24:43.490
点dispatch

24:43.490 --> 24:44.490
什么的

24:45.490 --> 24:47.490
回传

24:47.490 --> 24:48.490
OK

24:48.490 --> 24:50.490
这个组建有这个方法

24:50.490 --> 24:52.490
我怎么知道这个组建有这个方法呢

24:52.490 --> 24:54.490
还回到咱们入口

24:54.490 --> 24:55.490
组建这里面来

24:55.490 --> 24:56.490
在这呢

24:56.490 --> 24:57.490
我是知道

24:57.490 --> 25:00.490
当前组建的所有的东西了

25:00.490 --> 25:01.490
对吧

25:01.490 --> 25:02.490
既然它返回的是什么

25:02.490 --> 25:03.490
返回的是个数组

25:03.490 --> 25:04.490
是吧

25:04.490 --> 25:05.490
返回是个数组

25:05.490 --> 25:07.490
那是不是我就得判断

25:07.490 --> 25:09.490
哪些数组

25:09.490 --> 25:11.490
或者说哪些组建

25:11.490 --> 25:13.490
有我们定义好的

25:13.490 --> 25:14.490
这个sync date的这个方法

25:14.490 --> 25:16.490
让它去执行就可以了

25:16.490 --> 25:17.490
对吧

25:17.490 --> 25:18.490
那可能有多个

25:18.490 --> 25:19.490
而且这里面

25:19.490 --> 25:20.490
可能都是一步请求

25:20.490 --> 25:22.490
所以说这里面我们还要变

25:22.490 --> 25:23.490
那咋搞呢

25:24.490 --> 25:25.490
这个

25:25.490 --> 25:27.490
promise.all

25:27.490 --> 25:28.490
什么的

25:28.490 --> 25:31.490
这个match the complements.map

25:31.490 --> 25:34.490
我们的component干嘛呢

25:34.490 --> 25:35.490
判断一下

25:35.490 --> 25:38.490
如果这个component

25:38.490 --> 25:39.490
有

25:40.490 --> 25:42.490
sync

25:43.490 --> 25:44.490
如果有这个方法

25:44.490 --> 25:45.490
干嘛呢

25:45.490 --> 25:47.490
让它执行这个方法

25:47.490 --> 25:50.700
sync date

25:50.700 --> 25:51.700
把谁呢

25:51.700 --> 25:52.700
把store回传

25:52.700 --> 25:53.700
那意味着这里面

25:53.700 --> 25:54.700
要拿一个store

25:55.700 --> 25:56.700
所以说咱们

25:56.700 --> 25:57.700
当时都导出了

25:57.700 --> 25:58.700
store

25:58.700 --> 25:59.700
把store回传

25:59.700 --> 26:00.700
让它去调用

26:00.700 --> 26:01.700
让它去调用

26:01.700 --> 26:02.700
然后

26:02.700 --> 26:04.700
完事之后

26:04.700 --> 26:05.700
Z

26:05.700 --> 26:06.700
什么呢

26:06.700 --> 26:08.700
这个这个这个

26:08.700 --> 26:09.700
我们上面

26:09.700 --> 26:10.700
不有一个

26:10.700 --> 26:11.700
这个

26:11.700 --> 26:12.700
不有一个ctx

26:12.700 --> 26:13.700
对吧

26:13.700 --> 26:14.700
那对于它来说

26:14.700 --> 26:15.700
干嘛呢

26:15.700 --> 26:16.700
我们可以把

26:16.700 --> 26:17.700
这个

26:17.700 --> 26:18.700
修改完之后的store

26:18.700 --> 26:19.700
回传回去

26:19.700 --> 26:21.700
ctx.state

26:21.700 --> 26:25.700
等于store.state

26:25.700 --> 26:26.700
那这个时候

26:36.900 --> 26:37.900
就这么简简单单的

26:37.900 --> 26:38.900
一句话

26:38.900 --> 26:39.900
就这么一句话

26:39.900 --> 26:40.900
怎么着呢

26:40.900 --> 26:42.900
它做了好多事

26:42.900 --> 26:43.900
干嘛呢

26:43.900 --> 26:44.900
首先

26:44.900 --> 26:45.900
这个这个js

26:45.900 --> 26:46.900
加在之后

26:46.900 --> 26:47.900
就执行

26:47.900 --> 26:48.900
执行完之后

26:48.900 --> 26:49.900
干嘛呢

26:49.900 --> 26:50.900
它会把我们这个数据

26:50.900 --> 26:51.900
放到哪

26:51.900 --> 26:52.900
放到

26:52.900 --> 26:53.900
全局上

26:53.900 --> 26:54.900
挂载到这个

26:54.900 --> 26:55.900
window.init

26:55.900 --> 26:56.900
InitialState

26:56.900 --> 26:57.900
这个属性上

26:58.900 --> 26:59.900
什么呢

26:59.900 --> 27:00.900
window.init

27:11.900 --> 27:12.900
这个属性上

27:12.900 --> 27:13.900
这个属性上

27:13.900 --> 27:14.900
而且并且

27:14.900 --> 27:16.900
就是执行一段js

27:16.900 --> 27:18.900
注入到我们的天标当中

27:18.900 --> 27:19.900
就这样的一个操作

27:19.900 --> 27:20.900
然后完事之后

27:20.900 --> 27:21.900
把什么呢

27:21.900 --> 27:22.900
rezo

27:22.900 --> 27:23.900
我们的app

27:24.900 --> 27:25.900
然后到这

27:25.900 --> 27:26.900
什么呢

27:26.900 --> 27:27.900
reject

27:29.900 --> 27:30.900
或者说

27:30.900 --> 27:31.900
什么的

27:31.900 --> 27:32.900
catch.reject

27:37.380 --> 27:40.780
对吧

27:40.780 --> 27:41.780
然后这个时候

27:41.780 --> 27:42.780
这个时候

27:42.780 --> 27:43.780
我们先给它

27:43.780 --> 27:44.780
跑一下

27:44.780 --> 27:51.580
感受一下

27:51.580 --> 27:52.580
因为这个扣断

27:52.580 --> 27:53.580
也得打爆

27:53.580 --> 27:54.580
因为我们加入store

27:59.190 --> 28:00.190
好了

28:00.190 --> 28:01.190
来看看

28:02.190 --> 28:03.190
刷新

28:03.190 --> 28:04.190
欢迎SSR

28:04.190 --> 28:05.190
你看

28:05.190 --> 28:06.190
这个闪的

28:06.190 --> 28:08.190
是created执行的时候

28:08.190 --> 28:10.190
我们重点看的是什么呢

28:11.190 --> 28:12.190
网易元代码

28:12.190 --> 28:13.190
下面

28:32.300 --> 28:33.300
放了点js

28:39.060 --> 28:40.060
没问题

28:51.240 --> 28:52.240
是不是我们服务

28:52.240 --> 28:53.240
没有充气

28:57.600 --> 28:58.600
是还是不是呢

29:00.600 --> 29:01.600
是

29:03.600 --> 29:04.600
看到了吗

29:04.600 --> 29:05.600
它会在全局上

29:05.600 --> 29:06.600
挂在这个属性过

29:06.600 --> 29:07.600
什么都没做

29:07.600 --> 29:09.600
只是回传了一个state

29:09.600 --> 29:10.600
它就把这个name

29:10.600 --> 29:12.600
SSR放过来了

29:12.600 --> 29:13.600
那放过来之后

29:13.600 --> 29:15.600
放过来之后干嘛呢

29:15.600 --> 29:16.600
这个时候就要

29:16.600 --> 29:17.600
咱们的客户端

29:17.600 --> 29:19.600
客户端要进行一个操作

29:19.600 --> 29:20.600
真的

29:20.600 --> 29:21.600
我们

29:21.600 --> 29:22.600
把你这个store

29:22.600 --> 29:23.600
拿过来

29:24.600 --> 29:25.600
干嘛呢

29:25.600 --> 29:26.600
因为你这个

29:26.600 --> 29:27.600
取完成的

29:27.600 --> 29:28.600
并且放到全局上

29:28.600 --> 29:29.600
干嘛呢

29:29.600 --> 29:30.600
我要把你原有的数据

29:30.600 --> 29:32.600
进行一个替换

29:32.600 --> 29:33.600
进行就是

29:33.600 --> 29:35.600
我这是新取来的

29:35.600 --> 29:36.600
新取来的

29:36.600 --> 29:37.600
干嘛呢

29:37.600 --> 29:38.600
我们判断一下

29:38.600 --> 29:39.600
如果

29:39.600 --> 29:40.600
如果什么的

29:40.600 --> 29:41.600
扔到上有没有这个属性

29:41.600 --> 29:42.600
哪个属性

29:42.600 --> 29:43.600
刚刚

29:43.600 --> 29:45.600
这个initial state

29:45.600 --> 29:49.170
这个拿过来

29:49.170 --> 29:51.170
有没有这个属性

29:51.170 --> 29:52.170
对吧

29:52.170 --> 29:53.170
如果

29:53.170 --> 29:54.170
如果有这个属性

29:54.170 --> 29:55.170
怎么着呢

29:55.170 --> 29:56.170
我进行一个

29:56.170 --> 29:57.170
数据的替换

29:57.170 --> 29:59.170
同样store

29:59.170 --> 30:01.170
调用replay state

30:02.170 --> 30:03.170
就把一些

30:03.170 --> 30:05.170
这个新数据的话的属性

30:05.170 --> 30:06.170
给它替换上去

30:06.170 --> 30:07.170
window点

30:08.170 --> 30:10.170
initial state

30:10.170 --> 30:11.170
给它放上去

30:11.170 --> 30:12.170
来

30:12.170 --> 30:13.170
那这个时候

30:13.170 --> 30:14.170
我们重新打包

30:14.170 --> 30:15.170
再看一下

30:15.170 --> 30:16.170
客户端打包

30:17.170 --> 30:18.170
服务端没变化

30:18.170 --> 30:19.170
对吧

30:19.170 --> 30:20.170
服务端不动

30:21.170 --> 30:22.170
然后只要

30:22.170 --> 30:24.170
把服务重启一下

30:24.170 --> 30:25.170
来

30:25.170 --> 30:26.170
这个时候来

30:29.380 --> 30:32.070
哎

30:32.070 --> 30:33.070
这怎么还会

30:33.070 --> 30:34.070
刷新一下呢

30:35.070 --> 30:39.750
console

30:44.280 --> 30:45.280
我们的客户端

30:45.280 --> 30:46.280
需要给我打包

30:46.280 --> 30:47.280
不需要了

30:50.940 --> 30:52.940
如果它上面有这个属性

30:52.940 --> 30:53.940
那就把这个属性

30:53.940 --> 30:54.940
替换上去

31:01.540 --> 31:02.540
来

31:02.540 --> 31:03.540
这个地方

31:03.540 --> 31:05.540
这个地方是不是手沾了

31:07.540 --> 31:09.540
还是说多写了

31:09.540 --> 31:10.540
对吧

31:10.540 --> 31:11.540
应该是没替换成功

31:11.540 --> 31:12.540
没替换成功

31:13.540 --> 31:16.680
来

31:16.680 --> 31:17.680
对吧

31:17.680 --> 31:18.680
这是啥问题呢

31:20.680 --> 31:21.680
来

31:21.680 --> 31:22.680
重新搞一下

31:22.680 --> 31:33.540
客户端也打一下

31:34.540 --> 31:35.540
之前调试的时候

31:35.540 --> 31:36.540
可能

31:36.540 --> 31:37.540
这个就改了一下

31:38.540 --> 31:39.540
这会的话

31:39.540 --> 31:40.540
应该没啥问题

31:40.540 --> 31:41.540
看着

31:42.540 --> 31:43.540
这个

31:43.540 --> 31:44.540
包括这个组件

31:44.540 --> 31:45.540
也没毛病

31:45.540 --> 31:46.540
来

31:46.540 --> 31:47.540
再试一下

31:47.540 --> 31:52.900
应该刚才就是

31:53.900 --> 31:54.900
对吧

31:54.900 --> 31:55.900
你会发现

31:55.900 --> 31:56.900
这个东西

31:56.900 --> 31:57.900
它不是请求来的

31:58.900 --> 31:59.900
就是它不像刚才闪一下

31:59.900 --> 32:00.900
它是随着页面

32:00.900 --> 32:01.900
一起来的

32:02.900 --> 32:03.900
要展现这个效果

32:03.900 --> 32:04.900
包括说你说demo

32:04.900 --> 32:05.900
OK 我刷新demo的时候

32:05.900 --> 32:06.900
这个时候

32:06.900 --> 32:07.900
我再先问手艺

32:07.900 --> 32:08.900
这个大家记住

32:08.900 --> 32:09.900
这个不是请求了

32:09.900 --> 32:10.900
这个是本地路由

32:10.900 --> 32:11.900
对吧

32:11.900 --> 32:12.900
这个SSR是走的

32:12.900 --> 32:13.900
created

32:13.900 --> 32:14.900
但是如果在

32:14.900 --> 32:15.900
当前路径

32:15.900 --> 32:16.900
这个操作都是在

32:16.900 --> 32:17.900
服装完成的

32:18.900 --> 32:19.900
OK

32:19.900 --> 32:20.900
一波三执的

32:20.900 --> 32:21.900
中途出点小问题

32:21.900 --> 32:22.900
但是都还好

32:22.900 --> 32:23.900
都还好

32:23.900 --> 32:24.900
都是一些

32:24.900 --> 32:25.900
这个思想没错

32:25.900 --> 32:26.900
就是一些小细节的问题

32:27.900 --> 32:28.900
那么关于这个路由

32:28.900 --> 32:30.900
包括说UX

32:31.900 --> 32:32.900
大家能注意的

32:32.900 --> 32:33.900
就这些东西

32:34.900 --> 32:35.900
至于其他的

32:35.900 --> 32:36.900
跟正常一样使用

32:36.900 --> 32:37.900
没啥都说的

32:37.900 --> 32:38.900
好了

32:38.900 --> 32:39.900
那咱们这堂课

32:39.900 --> 32:40.900
就到这

