WEBVTT

00:00.240 --> 00:03.240
本档和我们了解一下渲染器

00:03.240 --> 00:10.240
渲染器在Sreader-JS里面充当了一个渲染页面的一个角色

00:10.240 --> 00:15.240
我们可以先想象一下一个电影放映的一个过程

00:15.240 --> 00:19.240
我们渲染器其实充当放映的设备

00:19.240 --> 00:25.240
放映的设备,我们可以放映的设备控制了那些功能

00:25.240 --> 00:30.240
首先放映的一些设备在我们电源里面放映的设备

00:30.240 --> 00:37.240
第一点它要控制的是可以控制的是放映的位置,对不对

00:37.240 --> 00:39.240
放映的位置

00:39.240 --> 00:43.240
我应该渲染到这个大屏幕上的哪一个位置

00:43.240 --> 00:45.240
我们是可以控制的,对吧

00:45.240 --> 00:48.240
那第二点呢,第二点是不是分辨率啊

00:48.240 --> 00:51.240
还记得大家上学的时候

00:51.240 --> 00:54.240
老师在放那个渾能片的时候

00:54.240 --> 00:57.240
那个头影是不是可以调分辨率的,对吧

00:57.240 --> 01:00.240
那这个我们也是可以调解的

01:00.240 --> 01:01.240
然后还可以设置什么

01:01.240 --> 01:04.240
是不是还有一个颜色通道,对不对

01:04.240 --> 01:05.240
通道

01:05.240 --> 01:07.240
那这个颜色通道是指什么

01:07.240 --> 01:10.240
你可以想象之前在学校里面

01:10.240 --> 01:13.240
老师在给大家放渾能片的时候

01:13.240 --> 01:15.240
放头影的时候

01:15.240 --> 01:18.240
那那个页面展示出来那个头影

01:18.240 --> 01:21.240
有的时候它就是发蓝,有的时候发黑,对不对

01:21.240 --> 01:24.240
那那个就是颜色通道的一个问题啊

01:24.240 --> 01:28.240
那这都是我们这个设备都可以来设置的,对不对

01:28.240 --> 01:30.240
那除此之外我们还可以设置什么

01:30.240 --> 01:33.240
还可以设置一个方向的一个大小,对吧

01:33.240 --> 01:35.240
放映

01:35.240 --> 01:37.240
就是渲染

01:37.240 --> 01:39.240
渲染的大小,对不对

01:39.240 --> 01:40.240
渲染的大小

01:40.240 --> 01:45.240
就是我们最后要渲染到这个屏幕上的一个大小

01:45.240 --> 01:47.240
渲染到屏幕上的大小

01:47.240 --> 01:49.240
那这些都是我们来设置的,对吧

01:49.240 --> 01:51.240
我们现在能想到的

01:51.240 --> 01:52.240
是不是就这些,对吧

01:52.240 --> 01:54.240
现在能想到这些

01:54.240 --> 01:56.240
那我们的渲染器啊

01:56.240 --> 01:57.240
也就

01:57.240 --> 01:58.240
渲染器也可以

01:58.240 --> 02:02.240
我们的渲染器也是可以来操作这些值的

02:02.240 --> 02:04.240
也是可以来操作这些值的

02:04.240 --> 02:07.240
我们也是有属性可以进行操作的

02:07.240 --> 02:10.240
那我们接下来就来看一下我们这个渲染器

02:10.240 --> 02:13.240
它是如何进行配置这些属性的

02:13.240 --> 02:14.240
好吧

02:14.240 --> 02:16.240
那可以回过头来看一下

02:16.240 --> 02:18.240
我们的这个渲染器的一个接口,对不对

02:18.240 --> 02:20.240
我们找一下啊

02:20.240 --> 02:21.240
Renderer,对不对

02:21.240 --> 02:22.240
渲染器

02:22.240 --> 02:24.240
找一下啊,这里

02:24.240 --> 02:25.240
在这儿

02:25.240 --> 02:26.240
在这儿,对吧

02:26.240 --> 02:28.240
WebgrRenderer

02:28.240 --> 02:31.240
可能有一些同学在看渲染器的这个接口的时候

02:31.240 --> 02:33.240
这一部分文档的时候

02:33.240 --> 02:35.240
大家发现这块有四个,对吧

02:35.240 --> 02:37.240
四个接口

02:37.240 --> 02:39.240
那这四个接口有什么区别啊

02:39.240 --> 02:40.240
来简单的先来说一下

02:40.240 --> 02:42.240
他们四个的一个区别

02:44.240 --> 02:46.240
WebgrRenderer

02:46.240 --> 02:50.240
这就是我们普遍使用的一个渲染器的一个构造函术

02:50.240 --> 02:52.240
一个构造函术

02:52.240 --> 02:54.240
那我们上面这些呢

02:54.240 --> 02:55.240
上面这些啊

02:55.240 --> 02:58.240
只要它是有这个Renderer target

02:58.240 --> 03:00.240
这样的一个标识的

03:00.240 --> 03:02.240
只要是有Renderer target

03:02.240 --> 03:03.240
这样标识的

03:03.240 --> 03:04.240
它都代表是

03:04.240 --> 03:06.240
还有缓冲区的

03:06.240 --> 03:07.240
还有缓冲的

03:07.240 --> 03:08.240
缓存的

03:08.240 --> 03:09.240
还有缓存的

03:09.240 --> 03:11.240
一个渲染器

03:11.240 --> 03:13.240
都是还有缓存的一个渲染器

03:13.240 --> 03:14.240
你可以看一下

03:14.240 --> 03:15.240
这是一个缓冲区

03:15.240 --> 03:16.240
对不对

03:16.240 --> 03:17.240
就是Renderer

03:17.240 --> 03:19.240
WebgrRenderer target

03:19.240 --> 03:21.240
它是一个缓冲区

03:21.240 --> 03:22.240
看到了吧

03:23.240 --> 03:24.240
那也就是说

03:24.240 --> 03:27.240
我们它会把我们这个渲染的一些

03:28.240 --> 03:30.240
一些内容啊

03:30.240 --> 03:32.240
都存到你这个缓冲区当中去

03:32.240 --> 03:34.240
都存到你的缓冲区当中去

03:34.240 --> 03:36.240
然后取值的时候

03:36.240 --> 03:37.240
取一些样式的时候

03:37.240 --> 03:39.240
我们都可以直接从缓冲区里来去

03:39.240 --> 03:41.240
我们这个Renderer

03:41.240 --> 03:42.240
Renderer

03:42.240 --> 03:44.240
每一次在渲染的时候

03:44.240 --> 03:46.240
它是重新的去汇制的

03:46.240 --> 03:49.240
它是你在写你的代码的时候

03:49.240 --> 03:50.240
在写代码的时候

03:50.240 --> 03:51.240
它每次汇制的时候

03:51.240 --> 03:53.240
都是重新的去汇制

03:53.240 --> 03:55.240
并不是从缓冲区里来去去了

03:55.240 --> 03:56.240
那你起来

03:56.240 --> 03:57.240
还是直接渲染到我们的

03:57.240 --> 03:59.240
这个页面上去的

04:00.240 --> 04:02.240
这是这次个的一个区别

04:02.240 --> 04:03.240
然后再来说一下

04:03.240 --> 04:04.240
我们这个Renderer

04:04.240 --> 04:06.240
它线上的这些属性

04:06.240 --> 04:08.240
分别都有哪些

04:08.240 --> 04:09.240
它是一个构造函数

04:09.240 --> 04:10.240
对不对

04:10.240 --> 04:11.240
我们之前在用的时候

04:11.240 --> 04:13.240
直接是用New 关键字来构造的

04:13.240 --> 04:14.240
对吧

04:14.240 --> 04:15.240
我们直接里面

04:15.240 --> 04:16.240
没有传任何的参数

04:16.240 --> 04:18.240
直接来构造出这样的一个渲染器

04:18.240 --> 04:19.240
对吧

04:19.240 --> 04:21.240
那其实我们这个构造函数

04:21.240 --> 04:22.240
我们Renderer

04:22.240 --> 04:24.240
Web 这样Renderer的构造函数

04:24.240 --> 04:26.240
它还是可以传入一些参数的

04:26.240 --> 04:28.240
那它组传的这个参数

04:28.240 --> 04:30.240
其实就是对我们的这个设备

04:30.240 --> 04:31.240
对我们要渲染到

04:31.240 --> 04:34.240
我们这个页面上的一个配置

04:34.240 --> 04:36.240
那我们要渲染到页面上的这个配置

04:36.240 --> 04:38.240
都需要你配置哪些呢

04:38.240 --> 04:39.240
就是哪些你可以控制呢

04:39.240 --> 04:41.240
就是我们刚才总结的这些

04:41.240 --> 04:42.240
可以吧

04:42.240 --> 04:43.240
总结的这些

04:43.240 --> 04:44.240
那放置的位置

04:44.240 --> 04:47.240
这个是我们可以动它的

04:47.240 --> 04:49.240
可以修改它的一个位置

04:49.240 --> 04:50.240
对吧

04:50.240 --> 04:52.240
可以通过Renderer

04:52.240 --> 04:53.240
渲染器承认的一些方法

04:53.240 --> 04:55.240
来定义

04:55.240 --> 04:56.240
来定义

04:56.240 --> 04:58.240
那我们再一个一个来看一下

04:58.240 --> 05:01.240
它的一个配置项

05:01.240 --> 05:03.240
来一个一个来看一下它的配置项

05:03.240 --> 05:05.240
它的配置项里面有

05:05.240 --> 05:06.240
第一个是Curus

05:06.240 --> 05:08.240
这个Curus代表的是

05:08.240 --> 05:11.240
我们最终渲染出来

05:11.240 --> 05:13.240
会把我们这个

05:13.240 --> 05:15.240
渲染出来的这个图像

05:15.240 --> 05:18.240
放到一个Curus里面

05:18.240 --> 05:20.240
一个Curus画布里面

05:20.240 --> 05:22.240
那这个Curus

05:22.240 --> 05:24.240
其实就是设置这个画布的

05:24.240 --> 05:26.240
如果你页面上

05:26.240 --> 05:27.240
自己已经定义了

05:27.240 --> 05:29.240
这样的一个标签了

05:29.240 --> 05:30.240
Curus这个标签的话

05:30.240 --> 05:31.240
我们就可以直接

05:31.240 --> 05:33.240
把这个Curus拿过来

05:33.240 --> 05:35.240
那如果你要是没有定义的话

05:35.240 --> 05:37.240
你就可以不用传这个参数

05:37.240 --> 05:38.240
那这个参数

05:38.240 --> 05:39.240
它就会自动给你

05:39.240 --> 05:41.240
创建一个Curus标签

05:41.240 --> 05:44.240
会给你自动创建一个Curus标签

05:44.240 --> 05:47.240
但是它这个Curus

05:47.240 --> 05:48.240
它只是会给你

05:48.240 --> 05:50.240
创建一个Curus标签

05:50.240 --> 05:53.240
它并不会去给你把自动的

05:53.240 --> 05:54.240
它并不会自动的

05:54.240 --> 05:55.240
把这个Curus

05:55.240 --> 05:57.240
渲染到你的页面里面去

05:57.240 --> 05:58.240
那我们如何

05:58.240 --> 06:01.240
我们如果要是想要

06:01.240 --> 06:02.240
把这个图像

06:02.240 --> 06:04.240
渲染到我们的页面里面去的话

06:04.240 --> 06:05.240
我们是不是就需要

06:05.240 --> 06:07.240
你手动的动态的

06:07.240 --> 06:10.240
去添加我们这个Curus标签

06:10.240 --> 06:11.240
对吧

06:11.240 --> 06:13.240
那如果你页面里面有

06:13.240 --> 06:14.240
这个Curus的标签的话

06:14.240 --> 06:16.240
我们就不需要再去

06:16.240 --> 06:18.240
手动去往页面里面添加了

06:18.240 --> 06:19.240
我们直接先获取一下

06:19.240 --> 06:20.240
那个Curus标签

06:20.240 --> 06:21.240
然后传递

06:21.240 --> 06:23.240
这个Curus这个属性就可以了

06:23.240 --> 06:24.240
好吧

06:24.240 --> 06:25.240
那就是Curus

06:25.240 --> 06:27.240
然后第二个参数

06:27.240 --> 06:29.240
CountX的

06:29.240 --> 06:32.240
CountX的代表的是你这个

06:32.240 --> 06:34.240
上下文对不对

06:34.240 --> 06:36.240
一个文单词的一个含义是

06:36.240 --> 06:37.240
上下文就像对吧

06:37.240 --> 06:38.240
上下文

06:38.240 --> 06:41.240
那它是用来将这个

06:41.240 --> 06:43.240
渲染器附加到

06:43.240 --> 06:45.240
一有的渲染器身上的

06:45.240 --> 06:47.240
就是说如果你页面里面

06:47.240 --> 06:48.240
已经有了一个渲染器了

06:48.240 --> 06:51.240
我们是可以往里面渲染的

06:51.240 --> 06:52.240
可以往里面渲染的

06:52.240 --> 06:53.240
也就是说

06:53.240 --> 06:54.240
就相当于什么

06:54.240 --> 06:56.240
就相当于你在放置一个

06:56.240 --> 06:57.240
影片的时候

06:57.240 --> 06:58.240
放置一个电影的时候

06:58.240 --> 07:00.240
如果你已经有这个设备了

07:00.240 --> 07:02.240
你已经有放电影的一个设备了

07:02.240 --> 07:04.240
我直接把这个

07:04.240 --> 07:05.240
把我的图像

07:05.240 --> 07:06.240
放到我这个设备里面

07:06.240 --> 07:07.240
是不是就可以了

07:07.240 --> 07:08.240
我不需要自己

07:08.240 --> 07:10.240
才去买一个设备了对不对

07:10.240 --> 07:12.240
这就是这个功能

07:12.240 --> 07:14.240
就是这个CountX的功能

07:14.240 --> 07:16.240
那我们再接着往下

07:16.240 --> 07:18.240
再接着往下就是下一个

07:18.240 --> 07:20.240
Precision对吧

07:20.240 --> 07:21.240
Precision

07:21.240 --> 07:23.240
它代表着着测器的一个精度

07:23.240 --> 07:25.240
这个

07:25.240 --> 07:26.240
这个单词

07:26.240 --> 07:27.240
是不是大家比较熟悉

07:27.240 --> 07:29.240
在我们的WebJR里面

07:29.240 --> 07:31.240
在我讲着测器那一部分

07:31.240 --> 07:34.240
说过这个精度的一个问题

07:34.240 --> 07:35.240
对吧

07:35.240 --> 07:37.240
我们每一个测器都有一个精度的

07:37.240 --> 07:38.240
那我们这个

07:38.240 --> 07:39.240
顶电测器

07:39.240 --> 07:41.240
它的精度默认是Hype

07:41.240 --> 07:42.240
对吧

07:42.240 --> 07:44.240
Hype代表是高精度的

07:44.240 --> 07:45.240
那我们这个片源测器

07:45.240 --> 07:47.240
它是没有一个默认精度的

07:47.240 --> 07:49.240
所以我们在写这个

07:49.240 --> 07:50.240
片源测测器的时候

07:50.240 --> 07:52.240
在用WebJR

07:52.240 --> 07:54.240
写片源测测器的时候

07:54.240 --> 07:55.240
我们是不是就需要

07:55.240 --> 07:57.240
你自己去设置一下

07:57.240 --> 07:59.240
这个测测器的一个精度

07:59.240 --> 08:01.240
我们那时候设置的是中精度的

08:01.240 --> 08:02.240
对吧

08:02.240 --> 08:03.240
中度的

08:03.240 --> 08:04.240
那在这里

08:04.240 --> 08:05.240
在这里

08:05.240 --> 08:07.240
SSR.js里面

08:07.240 --> 08:09.240
我们在渲染器里面

08:09.240 --> 08:10.240
我们也可以在

08:10.240 --> 08:12.240
渲染器的这个过渡函数里面

08:12.240 --> 08:14.240
去传入这个值

08:14.240 --> 08:15.240
这个值

08:15.240 --> 08:16.240
它会把这个值

08:16.240 --> 08:18.240
作为着色器的一个精度

08:18.240 --> 08:19.240
可以吧

08:19.240 --> 08:20.240
然后这个值

08:20.240 --> 08:22.240
它默认是Hype

08:22.240 --> 08:23.240
就是默认是高精度

08:23.240 --> 08:25.240
那如果

08:25.240 --> 08:26.240
如果

08:26.240 --> 08:28.240
你想兼容一些

08:28.240 --> 08:29.240
其他的一些

08:29.240 --> 08:31.240
比较老一点的设备的话

08:32.240 --> 08:34.240
或者是

08:34.240 --> 08:36.240
一些

08:36.240 --> 08:38.240
显示器

08:38.240 --> 08:40.240
或者是你的

08:40.240 --> 08:42.240
电脑并不是很好的一些设备的话

08:42.240 --> 08:44.240
我们可以用中精度的

08:44.240 --> 08:46.240
可以用中精度的

08:48.240 --> 08:50.240
你可以看一下这里

08:50.240 --> 08:52.240
它有一个介绍

08:52.240 --> 08:53.240
简单来看一下

08:53.240 --> 08:55.240
这里面有一些什么避免的

08:55.240 --> 08:57.240
你要避免的一些事情

08:57.240 --> 08:58.240
还有这些

08:58.240 --> 09:00.240
你要保留的一些事情

09:00.240 --> 09:01.240
比较好的一些事情

09:01.240 --> 09:03.240
就是这个属性可以设置的

09:03.240 --> 09:04.240
对吧

09:04.240 --> 09:05.240
那一般来说

09:05.240 --> 09:06.240
我们

09:06.240 --> 09:08.240
现在用高精度就可以了

09:08.240 --> 09:09.240
所以这个属性

09:09.240 --> 09:11.240
大家可以不用去设置

09:11.240 --> 09:13.240
它会用默认的就可以了

09:13.240 --> 09:15.240
那如果你想要

09:15.240 --> 09:16.240
兼容一些比较

09:16.240 --> 09:18.240
设备比较旧的

09:18.240 --> 09:20.240
设备比较旧的

09:20.240 --> 09:22.240
我们就可以把它改成

09:22.240 --> 09:24.240
这个Mend Gimp

09:24.240 --> 09:25.240
对吧

09:25.240 --> 09:27.240
Mend Gimp

09:27.240 --> 09:29.240
Mend Gimp

09:29.240 --> 09:31.240
是这么读的嘛

09:31.240 --> 09:33.240
用文发音不是很准

09:33.240 --> 09:34.240
大家可以去查一下

09:34.240 --> 09:35.240
对吧

09:35.240 --> 09:36.240
就是这个中精度的

09:36.240 --> 09:38.240
大家可以设置一下中精度

09:38.240 --> 09:39.240
好吧

09:39.240 --> 09:40.240
然后再接着

09:40.240 --> 09:41.240
下一个Alpha

09:41.240 --> 09:43.240
还有下面这个

09:43.240 --> 09:45.240
这两个属性

09:45.240 --> 09:47.240
Primity

09:47.240 --> 09:49.240
是这么读的嘛

09:49.240 --> 09:51.240
什么Alpha

09:51.240 --> 09:52.240
这两个值

09:52.240 --> 09:54.240
其实设置的都是一个

09:54.240 --> 09:56.240
颜色通道的一个问题

09:56.240 --> 09:57.240
它默认

09:57.240 --> 09:58.240
默认的一个颜色通道

09:58.240 --> 10:00.240
它只有RGB

10:00.240 --> 10:01.240
它没有一个A

10:01.240 --> 10:02.240
没有透明度

10:02.240 --> 10:03.240
没有透明度的

10:03.240 --> 10:05.240
也就是这个Alpha

10:05.240 --> 10:06.240
Alpha

10:06.240 --> 10:08.240
它的默认值为False

10:08.240 --> 10:10.240
代表是它是没有这个透明度的

10:10.240 --> 10:11.240
那如果你希望

10:11.240 --> 10:13.240
把在Converse身上

10:13.240 --> 10:14.240
加上这个透明度的话

10:14.240 --> 10:15.240
我们就需要给它

10:15.240 --> 10:16.240
改成处

10:16.240 --> 10:18.240
改成处

10:18.240 --> 10:20.240
那如果改成处的话

10:20.240 --> 10:21.240
它又会有一个问题

10:21.240 --> 10:23.240
就是你在渲染这个页面的时候

10:23.240 --> 10:25.240
默认的A值

10:25.240 --> 10:27.240
它都会是0

10:27.240 --> 10:28.240
默认的A值都是0

10:28.240 --> 10:29.240
就是都是透明的

10:29.240 --> 10:30.240
所以你可能

10:30.240 --> 10:32.240
你在设置这个颜色的时候

10:32.240 --> 10:34.240
你在设置这个Converse

10:34.240 --> 10:35.240
画布的颜色的时候

10:35.240 --> 10:37.240
可能你就看不到这个颜色了

10:37.240 --> 10:38.240
它显示的都是白色

10:38.240 --> 10:39.240
对吧

10:39.240 --> 10:40.240
因为它是透明的嘛

10:40.240 --> 10:41.240
对吧

10:41.240 --> 10:42.240
所以啊

10:42.240 --> 10:43.240
这里

10:43.240 --> 10:44.240
你可以给它设为False

10:44.240 --> 10:45.240
你可以给它设为处

10:45.240 --> 10:46.240
但是

10:46.240 --> 10:48.240
看你自己的一个需求了

10:48.240 --> 10:49.240
对不对

10:49.240 --> 10:51.240
看你自己的需求了

10:51.240 --> 10:52.240
然后在下面这个

10:52.240 --> 10:53.240
还有一个Alpha

10:53.240 --> 10:54.240
对吧

10:54.240 --> 10:56.240
这个Alpha代表的是你这个

10:56.240 --> 10:58.240
颜色是否

10:58.240 --> 11:00.240
是否有这个预成啊

11:00.240 --> 11:02.240
这个单词叫预成的一个意思

11:02.240 --> 11:03.240
什么是预成啊

11:03.240 --> 11:04.240
就是

11:04.240 --> 11:06.240
如果你有颜色叠加的话

11:06.240 --> 11:09.240
它会进行一个颜色成绩的一个运算

11:09.240 --> 11:10.240
颜色成绩的一个运算

11:10.240 --> 11:12.240
它是左成

11:12.240 --> 11:13.240
能理解吧

11:13.240 --> 11:14.240
就是说这个颜色

11:14.240 --> 11:15.240
我们之前是不是也说

11:15.240 --> 11:16.240
颜色你也可以用这个

11:16.240 --> 11:18.240
像量的表示对吧

11:18.240 --> 11:20.240
或者用矩阵表示都可以

11:20.240 --> 11:22.240
然后它就可以进行这样的一个

11:22.240 --> 11:24.240
像量成绩或者颜色成绩

11:24.240 --> 11:25.240
对

11:25.240 --> 11:26.240
矩阵成绩

11:26.240 --> 11:28.240
它会进行一个左成

11:28.240 --> 11:29.240
能理解吧

11:29.240 --> 11:30.240
左成啊

11:30.240 --> 11:32.240
这就是一个颜色叠加的一个

11:32.240 --> 11:33.240
问题

11:33.240 --> 11:34.240
然后它默认是处啊

11:34.240 --> 11:36.240
就是如果你有颜色叠加的话

11:36.240 --> 11:38.240
它会进行这个颜色的一个成绩的

11:38.240 --> 11:39.240
一个运算啊

11:39.240 --> 11:41.240
然后再接着就是

11:41.240 --> 11:42.240
下面这个

11:42.240 --> 11:43.240
是

11:43.240 --> 11:44.240
这个

11:44.240 --> 11:45.240
怎么读的

11:45.240 --> 11:47.240
安特勒尔斯吧

11:47.240 --> 11:48.240
我也不知道怎么读啊

11:48.240 --> 11:49.240
大家自己回去查一下

11:49.240 --> 11:50.240
可以吧

11:50.240 --> 11:51.240
啊这个是

11:51.240 --> 11:52.240
这个属性啊

11:52.240 --> 11:53.240
这个属性它是

11:53.240 --> 11:54.240
代表的是

11:54.240 --> 11:55.240
是否执行抗拒止人

11:55.240 --> 11:57.240
什么是是否执行抗拒止啊

11:57.240 --> 11:58.240
拒止啊

11:58.240 --> 11:59.240
其实就是

11:59.240 --> 12:00.240
呃

12:00.240 --> 12:01.240
如果

12:01.240 --> 12:02.240
它要是为first的话

12:02.240 --> 12:04.240
代表是不执行抗拒止对不对

12:04.240 --> 12:05.240
那也就是说

12:05.240 --> 12:07.240
我们在绘制一个图像的时候

12:07.240 --> 12:09.240
它可能就会有一些个拒止

12:09.240 --> 12:10.240
啊

12:10.240 --> 12:11.240
这个拒止

12:11.240 --> 12:12.240
我这么说

12:12.240 --> 12:14.240
可能也没有什么太大的一个

12:14.240 --> 12:15.240
印象啊

12:15.240 --> 12:16.240
一会我们来试一下

12:16.240 --> 12:17.240
可以吧

12:17.240 --> 12:18.240
我们来试一下啊

12:19.240 --> 12:20.240
我们现在来试吧

12:20.240 --> 12:21.240
现在来试

12:21.240 --> 12:22.240
可以吧

12:22.240 --> 12:23.240
我们来传递这样的一个参数

12:23.240 --> 12:24.240
现在来看一下

12:24.240 --> 12:25.240
我们现在的一个效果

12:25.240 --> 12:26.240
是什么样子

12:26.240 --> 12:28.240
这是我们上一堂课的一个代码

12:28.240 --> 12:29.240
我们直接打开一下

12:29.240 --> 12:30.240
打开一下

12:30.240 --> 12:31.240
你看

12:31.240 --> 12:32.240
它现在是这样的一个效果

12:32.240 --> 12:33.240
看到了吧

12:33.240 --> 12:34.240
这样的一个效果

12:34.240 --> 12:35.240
然后你可以看一下

12:35.240 --> 12:36.240
我再给它加上

12:36.240 --> 12:39.740
加上这个属性

12:39.740 --> 12:40.740
ok

12:40.740 --> 12:41.740
叫

12:41.740 --> 12:42.740
哎

12:42.740 --> 12:43.740
怎么怎么拼的了

12:43.740 --> 12:44.740
我给它拿过来

12:44.740 --> 12:45.740
可以吧

12:45.740 --> 12:47.740
啊

12:47.740 --> 12:48.740
这个啊

12:48.740 --> 12:49.740
这些属性

12:49.740 --> 12:50.740
如果你记不住

12:50.740 --> 12:51.740
不要紧啊

12:51.740 --> 12:52.740
我都没记住呢

12:52.740 --> 12:53.740
对不对

12:53.740 --> 12:54.740
我给大家讲这么讲

12:54.740 --> 12:55.740
我都没记住呢

12:56.740 --> 12:57.740
这个

12:57.740 --> 12:58.740
只要你知道的

12:58.740 --> 13:00.740
你知道有这么一个功能

13:00.740 --> 13:01.740
然后

13:01.740 --> 13:02.740
我们自己去查一下

13:02.740 --> 13:03.740
这个文档就可以了

13:03.740 --> 13:04.740
就来看一下

13:04.740 --> 13:05.740
刷新

13:05.740 --> 13:06.740
你可以看到

13:06.740 --> 13:08.740
感觉有一点点区别

13:08.740 --> 13:09.740
什么区别

13:09.740 --> 13:10.740
你可以发现

13:10.740 --> 13:11.740
我加上这个值之后

13:11.740 --> 13:12.740
它有点光滑了

13:12.740 --> 13:13.740
对不对

13:13.740 --> 13:14.740
你看

13:14.740 --> 13:15.740
每一条线都很光滑

13:15.740 --> 13:16.740
你看我再不给它加呢

13:16.740 --> 13:17.740
我不加这个值

13:17.740 --> 13:18.740
你发现

13:18.740 --> 13:19.740
它会有一点点锯齿

13:19.740 --> 13:20.740
看到了吗

13:20.740 --> 13:22.740
这里都会有锯齿的吧

13:22.740 --> 13:23.740
尤其旋转的时候

13:23.740 --> 13:24.740
你看到更清晰

13:24.740 --> 13:25.740
对不对

13:25.740 --> 13:26.740
我们给它加上之后

13:26.740 --> 13:28.740
它就不会有这样的一个锯齿了

13:28.740 --> 13:29.740
看到了吧

13:29.740 --> 13:31.740
还有没有那样的一个锯齿了

13:31.740 --> 13:32.740
这就是

13:32.740 --> 13:33.740
是否抗锯齿啊

13:33.740 --> 13:35.740
然后我们再接着

13:35.740 --> 13:36.740
啊

13:36.740 --> 13:37.740
我们也同时设置

13:37.740 --> 13:38.740
设一下这个

13:38.740 --> 13:39.740
cours

13:39.740 --> 13:40.740
还有

13:40.740 --> 13:41.740
还有这个

13:41.740 --> 13:42.740
还有啥呢

13:42.740 --> 13:43.740
还有这个alpha

13:43.740 --> 13:44.740
可以吧

13:44.740 --> 13:45.740
我们都试一下

13:45.740 --> 13:46.740
先设一个cours

13:46.740 --> 13:47.740
如果我们的页面里面

13:47.740 --> 13:48.740
有cours的话

13:48.740 --> 13:49.740
对吧

13:49.740 --> 13:50.740
我说

13:50.740 --> 13:51.740
如果有cours的话

13:51.740 --> 13:52.740
我们就可以用这个cours

13:52.740 --> 13:53.740
对吧

13:53.740 --> 13:54.740
cours

13:54.740 --> 13:55.740
我给它设一个id

14:00.500 --> 14:01.500
可以吧

14:01.500 --> 14:02.500
然后我给

14:02.500 --> 14:03.500
这个cours

14:03.500 --> 14:04.500
设一个高度

14:04.500 --> 14:05.500
一个宽度

14:05.500 --> 14:06.500
Heght

14:06.500 --> 14:07.500
高度

14:07.500 --> 14:08.500
500

14:08.500 --> 14:09.500
宽度

14:10.500 --> 14:11.500
500

14:11.500 --> 14:13.500
我这块设置完了之后

14:13.500 --> 14:14.500
下面这个

14:14.500 --> 14:15.500
渲染器

14:15.500 --> 14:16.500
这设置大小

14:16.500 --> 14:17.500
是不是也应该改了一下

14:17.500 --> 14:18.500
对吧

14:18.500 --> 14:19.500
直接改成500

14:19.500 --> 14:22.710
500就行了

14:22.710 --> 14:23.710
500

14:24.710 --> 14:25.710
可以吧

14:25.710 --> 14:26.710
然后我们可以

14:26.710 --> 14:28.710
把这个o-cours拿过来

14:29.710 --> 14:31.710
我在前面先定义一下

14:31.710 --> 14:32.710
这个o-cours

14:32.710 --> 14:33.710
我说一个o-cours

14:33.710 --> 14:34.710
对吧

14:34.710 --> 14:37.710
等于document.getElementByD

14:40.280 --> 14:41.280
o-cours

14:42.280 --> 14:43.280
say

14:43.280 --> 14:44.280
anvs

14:44.280 --> 14:45.280
对吧

14:45.280 --> 14:46.280
OK吧

14:46.280 --> 14:47.280
我们可以看一下

14:47.280 --> 14:48.280
效果啊

14:48.280 --> 14:49.280
其实是一样的

14:49.280 --> 14:50.280
我们刷新一下

14:50.280 --> 14:51.280
啊

14:51.280 --> 14:52.280
你可以看到我现在

14:52.280 --> 14:53.280
是不是就渲染到

14:53.280 --> 14:54.280
我们的cours身上了

14:54.280 --> 14:55.280
然后你可以看一下

14:55.280 --> 14:56.280
我这块如果再改回

14:56.280 --> 14:58.280
到我刚才的那个效果样式啊

14:58.280 --> 15:00.280
把我这个大小

15:00.280 --> 15:01.280
宽度

15:01.280 --> 15:02.280
高度

15:02.280 --> 15:03.280
我再给它改回去

15:03.280 --> 15:04.280
我把这个先高配一遍

15:04.280 --> 15:09.280
然后给它改回去

15:09.280 --> 15:10.280
我把这个大小

15:10.280 --> 15:11.280
改回去

15:13.280 --> 15:14.280
OK

15:14.280 --> 15:15.280
然后我这里

15:15.280 --> 15:16.280
控制一下

15:17.280 --> 15:18.280
把这个

15:18.280 --> 15:20.280
把这个cours再给它复制上

15:20.280 --> 15:21.280
对吧

15:21.280 --> 15:22.280
然后我们再来看一下

15:22.280 --> 15:23.280
它现在的一个效果

15:23.280 --> 15:24.280
你可以看到

15:24.280 --> 15:25.280
现在还是这样

15:25.280 --> 15:26.280
对不对

15:26.280 --> 15:27.280
我们可以看一下

15:27.280 --> 15:29.280
cours的一个大小啊

15:29.280 --> 15:30.280
来我们可以看一下

15:30.280 --> 15:31.280
cours大小

15:31.280 --> 15:32.280
cours大小

15:32.280 --> 15:33.280
我们你发现

15:33.280 --> 15:34.280
我这块

15:34.280 --> 15:36.280
用完这个size-size之后

15:36.280 --> 15:37.280
size-size之后

15:37.280 --> 15:39.280
我cours大小时候变化了

15:39.280 --> 15:40.280
对不对

15:40.280 --> 15:42.280
它不是原来的这个

15:42.280 --> 15:43.280
500了对不对

15:43.280 --> 15:44.280
对吧

15:44.280 --> 15:45.280
因为我们这个size-size

15:45.280 --> 15:47.280
它直接是在

15:47.280 --> 15:49.280
这个cours身上

15:49.280 --> 15:51.280
添加的这个一样

15:51.280 --> 15:52.280
这个大小

15:52.280 --> 15:53.280
OK吧

15:53.280 --> 15:55.280
它是在这个标签身上添加的

15:55.280 --> 15:56.280
行间样式

15:57.280 --> 15:58.280
能更上吧

15:58.280 --> 15:59.280
那这是这个

15:59.280 --> 16:00.280
那如果我们这里面

16:00.280 --> 16:01.280
cours有大小的话

16:01.280 --> 16:02.280
我们就不需要再去

16:02.280 --> 16:04.280
设置这个cours的一个大小了

16:04.280 --> 16:05.280
对不对

16:05.280 --> 16:07.280
这就是这个cours

16:08.280 --> 16:10.280
我们就可以设置这个cours的一个

16:10.280 --> 16:11.280
渲染的一个花布的位置

16:11.280 --> 16:12.280
对吧

16:12.280 --> 16:13.280
渲染的花布

16:13.280 --> 16:14.280
那我们这回是不是

16:14.280 --> 16:15.280
就可以定义

16:15.280 --> 16:16.280
我们这cours的一个位置了

16:16.280 --> 16:18.280
我现在就可以通过CSS

16:18.280 --> 16:20.280
来操作我们这cours的一个位置

16:20.280 --> 16:21.280
对不对

16:21.280 --> 16:23.280
就是我们渲染区域的一个位置

16:23.280 --> 16:24.280
我们直接来

16:24.280 --> 16:26.280
给这个cours

16:26.280 --> 16:28.280
CNVS

16:28.280 --> 16:30.280
给它加个Position

16:30.280 --> 16:32.280
不用先不加Position了

16:32.280 --> 16:33.280
来个margin

16:33.280 --> 16:35.280
0 auto

16:35.280 --> 16:36.280
左右剧中

16:36.280 --> 16:37.280
可以看一下

16:37.280 --> 16:38.280
是不是它左右剧中了

16:38.280 --> 16:39.280
没有 是吧

16:39.280 --> 16:40.280
我没有给它设置宽度

16:40.280 --> 16:41.280
对不对

16:41.280 --> 16:42.280
给它设置一个宽度

16:42.280 --> 16:44.280
宽度500像素

16:44.280 --> 16:46.280
高度500像素

16:46.280 --> 16:47.280
可以看一下

16:47.280 --> 16:48.280
刷新一下

16:48.280 --> 16:50.280
好像没设置上

16:50.280 --> 16:52.280
是不是cours

16:52.280 --> 16:53.280
margin好像包式

16:53.280 --> 16:54.280
对吧

16:54.280 --> 16:56.280
给它来个display

16:56.280 --> 16:59.720
block

16:59.720 --> 17:01.720
block看一下

17:01.720 --> 17:02.720
刷新一下

17:02.720 --> 17:03.720
这回是不是可以了

17:03.720 --> 17:05.720
我们刚才为什么包式

17:05.720 --> 17:07.720
就是因为cours的这个元素

17:07.720 --> 17:09.720
它本身是一个inland blocks

17:09.720 --> 17:11.720
inland block的一个元素

17:11.720 --> 17:12.720
我们怎么来测试

17:12.720 --> 17:13.720
它是不是inland block

17:13.720 --> 17:14.720
我给大家一个

17:14.720 --> 17:15.720
万标签

17:15.720 --> 17:16.720
你可以看一下

17:16.720 --> 17:19.720
然后把这个block注释掉

17:19.720 --> 17:20.720
可以吧

17:21.720 --> 17:22.720
刷新一下

17:22.720 --> 17:23.720
你可以看到

17:23.720 --> 17:24.720
它俩是不是并列了

17:24.720 --> 17:25.720
对吧

17:25.720 --> 17:26.720
它也并列了

17:26.720 --> 17:27.720
所以然后我这个cours

17:27.720 --> 17:28.720
是不是还可以设置宽高

17:28.720 --> 17:30.720
所以我们这个cours

17:30.720 --> 17:32.720
它是一个inland block的一个元素

17:32.720 --> 17:34.720
航机框元素

17:34.720 --> 17:35.720
对吧

17:35.720 --> 17:36.720
ok吧

17:36.720 --> 17:39.720
那这是我们这个

17:39.720 --> 17:40.720
这是我们这个cours

17:40.720 --> 17:42.720
然后可能还有同学

17:42.720 --> 17:43.720
会发现一个问题

17:43.720 --> 17:44.720
什么问题呢

17:44.720 --> 17:46.720
你可以发现我这个cours

17:46.720 --> 17:47.720
明明cours在上面

17:47.720 --> 17:48.720
sman在下边

17:48.720 --> 17:51.720
为什么span上前面去了呢

17:51.720 --> 17:52.720
对吧

17:52.720 --> 17:53.720
为什么span上前面去了

17:53.720 --> 17:56.720
这是因为在我们这个

17:56.720 --> 17:58.720
sump3.js里面

17:58.720 --> 18:00.720
它是会把你的cours

18:00.720 --> 18:02.720
给你剪切这个元素

18:02.720 --> 18:04.720
给你剪切下来

18:04.720 --> 18:05.720
然后放在

18:05.720 --> 18:07.720
当你渲染的时候

18:07.720 --> 18:08.720
当你渲染的时候

18:08.720 --> 18:09.720
我们再给它听家

18:09.720 --> 18:10.720
你看我这块

18:10.720 --> 18:13.720
是不是也给它document.pandchild了

18:13.720 --> 18:14.720
对吧

18:14.720 --> 18:15.720
我直接给它拿过来了

18:15.720 --> 18:16.720
看到了吗

18:16.720 --> 18:17.720
这是我们给它拿过来了

18:17.720 --> 18:18.720
如果没有这句话的话

18:18.720 --> 18:19.720
我们再来看

18:19.720 --> 18:20.720
它是不是就可以

18:20.720 --> 18:21.720
就换过来了

18:21.720 --> 18:22.720
对吧

18:22.720 --> 18:24.720
这还是这个问题

18:24.720 --> 18:26.720
如果你加上cours的话

18:26.720 --> 18:28.720
这两句我们都可以

18:28.720 --> 18:29.720
不用添加了

18:29.720 --> 18:30.720
对吧

18:30.720 --> 18:31.720
这两个功能

18:31.720 --> 18:32.720
我们就不用添加了

18:32.720 --> 18:33.720
因为这两个功能

18:33.720 --> 18:35.720
跟我直接操作cours

18:35.720 --> 18:37.720
直接在页面上写cours

18:37.720 --> 18:39.720
它的效果是一样的

18:39.720 --> 18:40.720
对不对

18:40.720 --> 18:42.720
所以注意这一点

18:42.720 --> 18:43.720
如果你这块

18:43.720 --> 18:45.720
要是页面上有cours的话

18:45.720 --> 18:47.720
我们就不需要再去添加cours了

18:47.720 --> 18:48.720
对不对

18:48.720 --> 18:50.720
不需要再去宣染cours了

18:50.720 --> 18:51.720
OK

18:51.720 --> 18:52.720
这就是cours

18:52.720 --> 18:54.720
然后再接着往下

18:54.720 --> 18:55.720
我们再来看

18:55.720 --> 18:58.720
还有什么contacts的

18:58.720 --> 18:59.720
contacts的

18:59.720 --> 19:01.720
我们现在没有办法试

19:01.720 --> 19:03.720
这个是已经宣染到

19:03.720 --> 19:05.720
EU的宣染期当中

19:05.720 --> 19:06.720
对吧

19:06.720 --> 19:07.720
我们现在只有一个宣染期

19:07.720 --> 19:08.720
所以这个

19:08.720 --> 19:09.720
现在没有这样的一个值

19:09.720 --> 19:10.720
那这个没有的话

19:10.720 --> 19:12.720
我们就等到什么时候

19:12.720 --> 19:13.720
有这样一个需求的时候

19:13.720 --> 19:14.720
再直接拿过来用

19:14.720 --> 19:15.720
可以吗

19:15.720 --> 19:16.720
再拿过来用

19:16.720 --> 19:17.720
再给大家测试

19:17.720 --> 19:18.720
OK

19:18.720 --> 19:19.720
然后再接着

19:19.720 --> 19:20.720
Position

19:20.720 --> 19:21.720
对吧

19:21.720 --> 19:22.720
Position

19:22.720 --> 19:23.720
我们可以给大家设置一下

19:23.720 --> 19:24.720
你可以看一下

19:24.720 --> 19:25.720
有什么效果

19:25.720 --> 19:27.720
应该是没有任何的一个效果的

19:27.720 --> 19:32.720
M,E,DI,M,E,DI,U,MP

19:32.720 --> 19:33.720
对吧

19:33.720 --> 19:35.720
可以看一下

19:35.720 --> 19:36.720
稍微信一下

19:36.720 --> 19:38.720
好像感觉没有太大的一个效果

19:38.720 --> 19:39.720
对不对

19:39.720 --> 19:40.720
其实

19:40.720 --> 19:41.720
这就是一个分辨率

19:41.720 --> 19:42.720
不是不能说分辨率

19:42.720 --> 19:45.720
就是这个精度的一个问题

19:45.720 --> 19:46.720
就是在计算的时候

19:46.720 --> 19:47.720
着色器在计算的时候

19:47.720 --> 19:50.720
它会把你的这个

19:50.720 --> 19:52.720
你的这些数据

19:52.720 --> 19:53.720
对吧

19:53.720 --> 19:54.720
你的这些

19:54.720 --> 19:56.720
像一个顶链的一个位置

19:56.720 --> 19:57.720
进行一些运算

19:57.720 --> 19:59.720
对不对

19:59.720 --> 20:00.720
当我这个动画

20:00.720 --> 20:01.720
执行一些动画的时候

20:01.720 --> 20:02.720
我们都会有一些

20:02.720 --> 20:04.720
试图的一个矩阵

20:04.720 --> 20:05.720
然后进行一个运算

20:05.720 --> 20:06.720
对不对

20:06.720 --> 20:07.720
试图矩阵

20:07.720 --> 20:08.720
或者投用矩阵

20:08.720 --> 20:09.720
然后我们都需要

20:09.720 --> 20:11.720
用这些东西进行运算的

20:11.720 --> 20:12.720
那这些运算的话

20:12.720 --> 20:14.720
我们的一个精度是多少

20:14.720 --> 20:17.720
这个就是分为这么三档

20:17.720 --> 20:18.720
一个是低精度

20:18.720 --> 20:19.720
一个是中精度

20:19.720 --> 20:20.720
还有高精度

20:20.720 --> 20:22.720
它默认是一个高精度的值

20:22.720 --> 20:24.720
默认是一个高精度的值

20:24.720 --> 20:26.720
那这块我们

20:26.720 --> 20:27.720
我刚才也说了

20:27.720 --> 20:29.720
如果你要是想

20:29.720 --> 20:31.720
兼容一些这个

20:31.720 --> 20:33.720
低这个

20:33.720 --> 20:35.720
设备比较老的

20:35.720 --> 20:36.720
这种设备的话

20:36.720 --> 20:38.720
你可以用一个中精度的

20:38.720 --> 20:39.720
对吧

20:39.720 --> 20:42.720
然后我们再接着往下

20:42.720 --> 20:44.720
再接着往下

20:44.720 --> 20:45.720
就是这个Alpha

20:45.720 --> 20:47.720
Alpha刚才没有说

20:47.720 --> 20:48.720
对吧

20:48.720 --> 20:49.720
Alpha它是一个

20:49.720 --> 20:50.720
Carwards

20:50.720 --> 20:51.720
它是不包含

20:51.720 --> 20:53.720
在我们这个3.js里面

20:53.720 --> 20:54.720
Carwards

20:54.720 --> 20:56.720
它是不包含Alpha

20:56.720 --> 20:58.720
通道的

20:58.720 --> 20:59.720
这个颜色通道的

20:59.720 --> 21:00.720
那如果你想让它

21:00.720 --> 21:03.720
给它加上这个Alpha

21:03.720 --> 21:04.720
就怎么拼呢

21:04.720 --> 21:05.720
ARPHA

21:05.720 --> 21:06.720
对吧

21:06.720 --> 21:07.720
ARPHA

21:07.720 --> 21:08.720
Alpha

21:08.720 --> 21:10.720
如果你想给它加上的话

21:10.720 --> 21:11.720
我们直接给它

21:11.720 --> 21:12.720
设置这个Alpha为处

21:12.720 --> 21:13.720
就可以了

21:13.720 --> 21:14.720
我们这个来看一下效果

21:14.720 --> 21:15.720
你可以发现

21:15.720 --> 21:16.720
这黑色都没了

21:16.720 --> 21:17.720
对不对

21:17.720 --> 21:18.720
为什么黑色没了

21:18.720 --> 21:19.720
因为它的一个Alpha

21:19.720 --> 21:20.720
这个通道

21:20.720 --> 21:22.720
它默认值为0了

21:22.720 --> 21:23.720
对不对

21:23.720 --> 21:24.720
这个默认值为0了

21:24.720 --> 21:25.720
0的话

21:25.720 --> 21:26.720
是不是就是透明的

21:26.720 --> 21:27.720
对吧

21:27.720 --> 21:28.720
透明的

21:28.720 --> 21:29.720
那一透明

21:29.720 --> 21:30.720
黑色一透明

21:30.720 --> 21:31.720
是不是就变白了

21:31.720 --> 21:32.720
任何颜色一透明

21:32.720 --> 21:33.720
是不是就没了

21:33.720 --> 21:34.720
这个颜色

21:34.720 --> 21:35.720
对吧

21:35.720 --> 21:36.720
然后再接着

21:36.720 --> 21:38.720
下面这个

21:38.720 --> 21:40.720
是否假设颜色有

21:40.720 --> 21:42.720
预程对吧

21:42.720 --> 21:43.720
可以给它写一下

21:43.720 --> 21:45.720
现在应该没有任何的一个效果

21:45.720 --> 21:47.720
因为我没有颜色的一个渐变

21:47.720 --> 21:48.720
对吧

21:48.720 --> 21:50.720
like a frost

21:50.720 --> 21:51.720
我没有颜色的渐变

21:51.720 --> 21:53.720
所以这个

21:53.720 --> 21:54.720
但是你还是会有

21:54.720 --> 21:56.720
一点点感觉的看到了吗

21:56.720 --> 21:58.720
预程和没有预程的话

21:58.720 --> 21:59.720
你还是会有

21:59.720 --> 22:00.720
一点感觉的吧

22:00.720 --> 22:01.720
它的颜色是不是

22:01.720 --> 22:03.720
有的地方是不一样的

22:03.720 --> 22:04.720
看到了吗

22:04.720 --> 22:05.720
如果你不进行

22:05.720 --> 22:06.720
预程的话

22:06.720 --> 22:08.720
它就会直接拿过来

22:08.720 --> 22:09.720
拿过来的话

22:09.720 --> 22:10.720
这个颜色就会有

22:10.720 --> 22:12.720
一点点的误差

22:12.720 --> 22:13.720
误差

22:13.720 --> 22:14.720
你可以看

22:14.720 --> 22:16.720
我不给它加这个的话

22:16.720 --> 22:18.720
你看它的颜色就很

22:18.720 --> 22:20.720
均匀对吧

22:20.720 --> 22:22.720
这就是我们这个

22:22.720 --> 22:24.720
颜色预程

22:24.720 --> 22:26.720
这个属性

22:26.720 --> 22:28.720
这个属性

22:28.720 --> 22:30.720
那可能会有同学就问

22:30.720 --> 22:31.720
有同学会问

22:31.720 --> 22:32.720
为什么我不加这个

22:32.720 --> 22:33.720
不让它

22:33.720 --> 22:34.720
不让它做成绩的话

22:34.720 --> 22:35.720
这样的一个效果

22:35.720 --> 22:37.720
这就是一个颜色渐变的

22:37.720 --> 22:38.720
一个问题了

22:38.720 --> 22:39.720
颜色渐变的一个问题

22:39.720 --> 22:41.720
我们的颜色块

22:41.720 --> 22:42.720
我们可以看一下

22:42.720 --> 22:43.720
颜色块的一个问题

22:43.720 --> 22:45.720
你可以查一下

22:45.720 --> 22:47.720
颜色

22:48.720 --> 22:51.610
我们找一下

22:53.610 --> 22:54.610
我看一下

22:54.610 --> 22:55.610
找一个图

22:55.610 --> 22:56.610
哪个图比较

22:56.610 --> 23:00.690
更接近呢

23:02.690 --> 23:03.690
我们的颜色

23:03.690 --> 23:04.690
其实它是一个

23:04.690 --> 23:05.690
类似于立方体的

23:05.690 --> 23:06.690
一个样子

23:06.690 --> 23:07.690
它是一个立方体

23:07.690 --> 23:08.690
然后每一格的颜色

23:08.690 --> 23:10.690
你看就像

23:10.690 --> 23:13.690
这还不完全准确对不对

23:13.690 --> 23:14.690
没有是吧

23:14.690 --> 23:15.690
我们可以搜一下

23:15.690 --> 23:19.690
RGB的颜色空间

23:21.690 --> 23:22.690
我们可以看一下

23:22.690 --> 23:23.690
找一下图片

23:23.690 --> 23:24.690
还在这

23:25.690 --> 23:29.580
刚才的这个

23:29.580 --> 23:30.580
看一下这个

23:30.580 --> 23:31.580
这个图

23:31.580 --> 23:32.580
大家可以看一下这个图

23:32.580 --> 23:34.580
我们的RGB的颜色空间

23:34.580 --> 23:36.580
它是一个空间立方体的

23:36.580 --> 23:37.580
一个样子

23:37.580 --> 23:38.580
空间立方体的样子

23:38.580 --> 23:40.580
这边是绿的

23:40.580 --> 23:41.580
到这块是绿的

23:41.580 --> 23:43.580
然后这边是红色的

23:43.580 --> 23:44.580
这块是蓝色的

23:44.580 --> 23:45.580
所以呢

23:45.580 --> 23:46.580
它是

23:46.580 --> 23:48.580
通过这样的一个空间

23:48.580 --> 23:49.580
进行一个叠加

23:49.580 --> 23:50.580
颜色叠加

23:50.580 --> 23:51.580
对不对

23:51.580 --> 23:52.580
颜色叠加

23:52.580 --> 23:53.580
然后我们可以看一下

23:53.580 --> 23:54.580
我们现在的这个效果

23:54.580 --> 23:55.580
它为什么会出现

23:55.580 --> 23:57.580
这样的一个变化的颜色

23:57.580 --> 23:58.580
我明明有

23:58.580 --> 23:59.580
每个面的颜色

23:59.580 --> 24:00.580
是不是都是绿色

24:00.580 --> 24:01.580
对吧

24:01.580 --> 24:02.580
它怎么做到呢

24:02.580 --> 24:03.580
就是因为

24:03.580 --> 24:04.580
我们给它

24:04.580 --> 24:05.580
设置绿色之后

24:05.580 --> 24:06.580
它是不是有叠加

24:06.580 --> 24:07.580
每个点的颜色

24:07.580 --> 24:08.580
叠加了

24:08.580 --> 24:09.580
对不对

24:09.580 --> 24:10.580
颜色一叠加之后

24:10.580 --> 24:11.580
它又不知道取谁了

24:11.580 --> 24:12.580
当你接下来

24:12.580 --> 24:13.580
它不知道取谁了

24:13.580 --> 24:15.580
然后它就随便取一个值

24:15.580 --> 24:17.580
取一个最近的一个值

24:17.580 --> 24:19.580
取一个最近的一个值

24:19.580 --> 24:21.580
取一个最近的一值之后

24:21.580 --> 24:22.580
它又会发现

24:22.580 --> 24:23.580
不是蓝色就是红色

24:23.580 --> 24:24.580
对不对

24:24.580 --> 24:25.580
你可以

24:25.580 --> 24:27.580
这是一个立方体的空间

24:27.580 --> 24:28.580
它里面很多

24:28.580 --> 24:29.580
很多块的

24:29.580 --> 24:30.580
所以它可能就是

24:30.580 --> 24:32.580
不是蓝色就是绿色

24:32.580 --> 24:33.580
也有可能是

24:33.580 --> 24:34.580
其他的一个颜色

24:34.580 --> 24:35.580
对不对

24:35.580 --> 24:36.580
所以我们

24:36.580 --> 24:37.580
很深的这个绿色

24:37.580 --> 24:39.580
会有一点点的一个区别

24:39.580 --> 24:41.580
所以我们看到的这个冰框

24:41.580 --> 24:43.580
它会有这样的一个颜色

24:43.580 --> 24:44.580
OK吧

24:44.580 --> 24:47.580
那这是我们这个颜色左乘

24:47.580 --> 24:48.580
那如果你这个颜色

24:48.580 --> 24:50.580
进行一个成绩之后

24:50.580 --> 24:51.580
左乘之后

24:51.580 --> 24:54.580
可能它就是用偏向

24:54.580 --> 24:55.580
更加偏向我们

24:55.580 --> 24:57.580
更最接近的这个颜色

24:57.580 --> 24:58.580
对不对

24:58.580 --> 24:59.580
左乘之后

24:59.580 --> 25:00.580
它又更加偏向我们这个

25:00.580 --> 25:02.580
你设置的这个颜色了

25:03.580 --> 25:04.580
OK吧

25:04.580 --> 25:06.580
这是我们这个

25:06.580 --> 25:07.580
这几个属性

25:07.580 --> 25:08.580
对不对

25:08.580 --> 25:09.580
我们再过来看一下

25:09.580 --> 25:10.580
刚才还有什么

25:10.580 --> 25:11.580
没有说

25:11.580 --> 25:12.580
在接着往下

25:12.580 --> 25:13.580
这块还有一个

25:13.580 --> 25:17.580
绘图缓存的一个

25:17.580 --> 25:18.580
模板缓存

25:18.580 --> 25:19.580
对不对

25:19.580 --> 25:20.580
这是

25:20.580 --> 25:22.580
是否至少有一个

25:22.580 --> 25:23.580
八位的模板缓存

25:23.580 --> 25:25.580
那这个也是一样的

25:25.580 --> 25:26.580
就是

25:26.580 --> 25:28.580
你是否想要

25:28.580 --> 25:30.580
让这个图形

25:30.580 --> 25:31.580
你在绘着这个图形

25:31.580 --> 25:33.580
是否需要有一个缓存

25:33.580 --> 25:34.580
如果你想要有的话

25:34.580 --> 25:35.580
你就可以给它

25:35.580 --> 25:36.580
设置为处

25:36.580 --> 25:37.580
如果不想要有

25:37.580 --> 25:38.580
就是为 false

25:38.580 --> 25:40.580
一般它默认值为处

25:40.580 --> 25:42.580
为什么默认值为处呢

25:42.580 --> 25:43.580
就是

25:43.580 --> 25:44.580
我们在绘着一个图形的时候

25:44.580 --> 25:46.580
你是不是希望它一直存在

25:46.580 --> 25:47.580
对吧

25:47.580 --> 25:48.580
你不能说一直存在

25:48.580 --> 25:50.580
你是希望它是

25:50.580 --> 25:51.580
在我们渲染的时候

25:51.580 --> 25:52.580
它会存在

25:52.580 --> 25:53.580
对不对

25:53.580 --> 25:54.580
那我们就需要给它

25:54.580 --> 25:56.580
来这样的一个缓存

25:56.580 --> 25:58.580
你可以给它设置一下

25:58.580 --> 25:59.580
那你看

25:59.580 --> 26:01.580
我给它设置成 false 有什么效果

26:01.580 --> 26:04.580
这都是性能优化的一个

26:04.580 --> 26:05.580
一个问题了

26:05.580 --> 26:06.580
我们可以看一下

26:06.580 --> 26:08.580
我如果给它来一个 false

26:08.580 --> 26:10.580
而且没有任何的一个

26:10.580 --> 26:12.580
区别对吧

26:13.580 --> 26:14.580
可以看一下

26:14.580 --> 26:15.580
感觉有区别吗

26:15.580 --> 26:17.580
好像没有太大的一个区别对不对

26:17.580 --> 26:18.580
没有太大的区别

26:18.580 --> 26:20.580
那这个属性其实用来就是

26:20.580 --> 26:21.580
这个

26:22.580 --> 26:24.580
性能优化的一个问题

26:24.580 --> 26:25.580
性能优化的

26:25.580 --> 26:26.580
然后我们再接上往下

26:26.580 --> 26:27.580
就是这个

26:27.580 --> 26:29.580
下面这个属性

26:29.580 --> 26:31.580
perceal drawing buffer

26:31.580 --> 26:33.580
是否保留缓存

26:33.580 --> 26:36.580
直到手动删除或被覆盖

26:36.580 --> 26:39.580
这也是操作缓存的

26:39.580 --> 26:40.580
下面这是

26:40.580 --> 26:42.580
是否需要这样的一个缓存

26:42.580 --> 26:44.580
那下面这是

26:44.580 --> 26:47.580
是否保留这个缓存

26:47.580 --> 26:49.580
是否保留这个缓存

26:49.580 --> 26:50.580
如果你需要的话

26:50.580 --> 26:52.580
我们就可以给它置为处

26:52.580 --> 26:53.580
对不对

26:53.580 --> 26:54.580
你可以看一下

26:54.580 --> 26:56.580
至于缓存这一部分的

26:56.580 --> 26:57.580
问题

26:57.580 --> 26:59.580
是不是都是性能优化的一个问题

26:59.580 --> 27:00.580
对不对

27:00.580 --> 27:01.580
你可以想一下

27:01.580 --> 27:02.580
我们之前在讲

27:02.580 --> 27:03.580
webgl的时候

27:03.580 --> 27:05.580
说这个

27:05.580 --> 27:06.580
再说缓存的时候

27:06.580 --> 27:08.580
是不是都是

27:08.580 --> 27:10.580
都是因为

27:10.580 --> 27:12.580
如果我们这个页面

27:12.580 --> 27:14.580
如果我们页面有很多

27:14.580 --> 27:16.580
复杂的一个图形的话

27:16.580 --> 27:18.580
我们出现这种缓存

27:18.580 --> 27:20.580
或者是这种

27:20.580 --> 27:21.580
缓充区

27:21.580 --> 27:23.580
是不是更加好一点对吧

27:23.580 --> 27:25.580
更加友好一点

27:25.580 --> 27:26.580
这样的话

27:26.580 --> 27:28.580
不需要每次都去渲染了

27:28.580 --> 27:29.580
对不对

27:29.580 --> 27:31.580
我们只需要一次性的

27:31.580 --> 27:33.580
渲染到我们的页面上去

27:33.580 --> 27:34.580
对吧

27:34.580 --> 27:36.580
这是我们这个缓存

27:36.580 --> 27:37.580
这是缓存

27:37.580 --> 27:39.580
还有这个缓存区

27:39.580 --> 27:41.580
然后我们再接着往下

27:41.580 --> 27:43.580
就是这个

27:43.580 --> 27:44.580
power

27:44.580 --> 27:45.580
pref...

27:45.580 --> 27:46.580
prefer

27:46.580 --> 27:48.580
prefusion

27:48.580 --> 27:49.580
对吧

27:49.580 --> 27:50.580
这么读吗

27:50.580 --> 27:52.580
怎么感觉读错了

27:52.580 --> 27:53.580
preference

27:53.580 --> 27:54.580
preference

27:54.580 --> 27:55.580
powerpreference

27:55.580 --> 27:56.580
它代表的是

27:56.580 --> 27:58.580
提示用户代理怎样的配置

27:58.580 --> 27:59.580
更用

27:59.580 --> 28:02.580
更适用于当前的web这样环境

28:02.580 --> 28:04.580
这个你可能看不懂

28:04.580 --> 28:05.580
这个你就直接不用管它了

28:05.580 --> 28:06.580
可以吧

28:06.580 --> 28:08.580
这个大家不需要太管它了

28:09.580 --> 28:11.580
一般就是直接来个

28:11.580 --> 28:12.580
default就可以了

28:12.580 --> 28:13.580
好吧

28:13.580 --> 28:14.580
然后下面这个

28:14.580 --> 28:15.580
deep

28:15.580 --> 28:17.580
代表的是这个深度缓存

28:17.580 --> 28:18.580
就是

28:18.580 --> 28:20.580
我们在绘制一个3D图形的时候

28:20.580 --> 28:21.580
是不是需要这样的一个

28:21.580 --> 28:22.580
深度缓存

28:22.580 --> 28:23.580
对吧

28:23.580 --> 28:25.580
因为在配置

28:25.580 --> 28:27.580
在绘制一个3D图形的话

28:27.580 --> 28:28.580
它是有一个厚度的

28:28.580 --> 28:29.580
有一个深度的

28:29.580 --> 28:30.580
对不对

28:30.580 --> 28:31.580
那这个深度

28:31.580 --> 28:32.580
我们就希望它

28:32.580 --> 28:33.580
可以有一个缓存

28:33.580 --> 28:34.580
因为我们不同的点

28:34.580 --> 28:36.580
我们可能要有很多个点

28:36.580 --> 28:37.580
对不对

28:37.580 --> 28:38.580
那每一个点

28:38.580 --> 28:39.580
它都有这样的一个深度的话

28:39.580 --> 28:40.580
我们是不是就需要

28:40.580 --> 28:41.580
有这样的一个缓存

28:42.580 --> 28:44.580
这是这个deep

28:44.580 --> 28:46.580
然后再接着

28:46.580 --> 28:47.580
就是这个

28:47.580 --> 28:48.580
下面这个

28:48.580 --> 28:50.580
也是对深度的一个进行

28:50.580 --> 28:52.580
对深度的一个缓存

28:52.580 --> 28:53.580
一个操作

28:54.580 --> 28:55.580
那其实这两个

28:55.580 --> 28:58.580
都是对深度缓存的一个操作

29:00.580 --> 29:01.580
只不过一个是操作

29:01.580 --> 29:02.580
是否含有

29:02.580 --> 29:04.580
是否有这个缓存

29:04.580 --> 29:05.580
另一个是

29:05.580 --> 29:07.580
操作的是这个缓存

29:09.580 --> 29:11.580
缓存的一个大小

29:11.580 --> 29:12.580
缓存的一个大小

29:13.580 --> 29:14.580
就跟我们

29:14.580 --> 29:15.580
下面这个

29:15.580 --> 29:16.580
下面这个

29:16.580 --> 29:17.580
会图缓存

29:17.580 --> 29:18.580
是一样的

29:18.580 --> 29:19.580
只不过

29:19.580 --> 29:20.580
上面这是会图的

29:20.580 --> 29:21.580
对不对

29:21.580 --> 29:22.580
下面这个是

29:23.580 --> 29:24.580
对于深度的一个缓存

29:25.580 --> 29:26.580
这是他们的一个区别

29:26.580 --> 29:27.580
然后简单了解一下

29:27.580 --> 29:28.580
有这么几个参数

29:28.580 --> 29:29.580
可以吧

29:29.580 --> 29:30.580
简单了解一下

29:30.580 --> 29:31.580
有这么几个参数

29:32.580 --> 29:33.580
然后除了这些之外

29:33.580 --> 29:35.580
我们在对相身上

29:35.580 --> 29:37.580
你构造出来的对相身上

29:37.580 --> 29:39.580
它还有一些属性

29:39.580 --> 29:40.580
还有一些属性

29:40.580 --> 29:41.580
我们可以来用

29:41.580 --> 29:42.580
像我们刚才说的

29:42.580 --> 29:43.580
Size Size

29:43.580 --> 29:44.580
对不对

29:44.580 --> 29:45.580
可以看一下

29:45.580 --> 29:46.580
Size Size

29:46.580 --> 29:47.580
我们也可以来直接设置的

29:47.580 --> 29:48.580
Size Size

29:48.580 --> 29:49.580
这是一个方法

29:49.580 --> 29:51.580
然后还有什么

29:51.580 --> 29:52.580
DOM Element

29:52.580 --> 29:53.580
DOM Element

29:53.580 --> 29:54.580
就直接获取到

29:54.580 --> 29:56.580
这个Countless元素了

29:56.580 --> 29:57.580
可以吧

29:57.580 --> 29:58.580
直接获取到Countless元素了

29:58.580 --> 29:59.580
然后这个Context

29:59.580 --> 30:01.580
获取的是你个

30:02.580 --> 30:04.580
使用你这个

30:04.580 --> 30:05.580
等会儿我看一下

30:05.580 --> 30:06.580
Context

30:06.580 --> 30:08.580
渲染期末日使用

30:08.580 --> 30:10.580
这个HTML

30:10.580 --> 30:11.580
Countless Element

30:11.580 --> 30:12.580
Context

30:12.580 --> 30:13.580
从这个到

30:13.580 --> 30:15.580
获取渲染环境

30:15.580 --> 30:16.580
这个说白了

30:16.580 --> 30:17.580
就是获取我们

30:17.580 --> 30:18.580
刚才传过来的

30:18.580 --> 30:19.580
这个Context

30:19.580 --> 30:20.580
对吧

30:20.580 --> 30:22.580
说白了就是获取那个

30:22.580 --> 30:24.580
然后再接着

30:24.580 --> 30:25.580
再接着往下

30:25.580 --> 30:26.580
我们再来看

30:26.580 --> 30:27.580
还有啥

30:27.580 --> 30:28.580
就是再接着往下

30:28.580 --> 30:30.580
应该就是说

30:30.580 --> 30:31.580
内容

30:31.580 --> 30:32.580
这块有个

30:32.580 --> 30:33.580
这个Info

30:33.580 --> 30:34.580
对吧

30:34.580 --> 30:35.580
这个Info

30:35.580 --> 30:36.580
这个Info

30:36.580 --> 30:37.580
是一个对象

30:37.580 --> 30:38.580
它怎样写的

30:38.580 --> 30:39.580
一个对象

30:39.580 --> 30:40.580
包含了有关图形

30:40.580 --> 30:42.580
把内存和渲染过程的

30:42.580 --> 30:43.580
一些类系统的信息

30:43.580 --> 30:44.580
对不对

30:44.580 --> 30:45.580
这就是其实

30:45.580 --> 30:46.580
就是一个

30:46.580 --> 30:47.580
渲染期的一些信息

30:47.580 --> 30:48.580
自己想写

30:48.580 --> 30:49.580
你就可以写

30:49.580 --> 30:50.580
不想写

30:50.580 --> 30:51.580
你就可以不用

30:51.580 --> 30:52.580
对不对

30:52.580 --> 30:54.580
然后我们再接着往下

30:54.580 --> 30:55.580
再接着往下

30:55.580 --> 30:56.580
就是方法

30:56.580 --> 30:57.580
这一部分

30:57.580 --> 30:58.580
我们用的比较多

30:58.580 --> 30:59.580
方法

30:59.580 --> 31:00.580
应该就是

31:00.580 --> 31:01.580
轻

31:01.580 --> 31:02.580
这个初始化

31:02.580 --> 31:03.580
如果我们初始化

31:03.580 --> 31:04.580
这个组色器的时候

31:04.580 --> 31:05.580
我们希望让它

31:05.580 --> 31:06.580
把它的一些颜色

31:06.580 --> 31:07.580
组色器的一些

31:07.580 --> 31:08.580
颜色缓冲区

31:08.580 --> 31:09.580
给它清理一下

31:09.580 --> 31:10.580
我们就可以用

31:10.580 --> 31:11.580
Clear

31:11.580 --> 31:12.580
Clear Color

31:12.580 --> 31:13.580
是这些

31:13.580 --> 31:14.580
在我们WebGL里面

31:14.580 --> 31:15.580
是不是也有

31:15.580 --> 31:16.580
对不对

31:17.580 --> 31:19.580
然后再接着就是Clear

31:19.580 --> 31:20.580
Clear Deep

31:20.580 --> 31:21.580
代表是清除

31:21.580 --> 31:22.580
清除这个

31:22.580 --> 31:23.580
深度的一个缓存

31:23.580 --> 31:24.580
对吧

31:24.580 --> 31:26.580
然后这个Clear Stay

31:26.580 --> 31:27.580
Stay Co

31:27.580 --> 31:28.580
是这么多的

31:28.580 --> 31:29.580
它代表是

31:29.580 --> 31:30.580
这个

31:30.580 --> 31:32.580
清除模板缓存

31:32.580 --> 31:33.580
然后Clear

31:33.580 --> 31:34.580
它给的

31:34.580 --> 31:35.580
它其实

31:35.580 --> 31:36.580
清楚的就是一个

31:36.580 --> 31:37.580
这个

31:37.580 --> 31:38.580
渲染器的一个缓存

31:38.580 --> 31:39.580
渲染器的一个缓存

31:40.580 --> 31:42.580
然后再接着往下

31:44.580 --> 31:45.580
再接着往下

31:45.580 --> 31:46.580
Compile这个方法

31:46.580 --> 31:47.580
Compile这个方法

31:47.580 --> 31:48.580
其实就是获取

31:48.580 --> 31:49.580
这个

31:49.580 --> 31:51.580
编译的一些

31:51.580 --> 31:52.580
信息

31:52.580 --> 31:53.580
信息

31:56.210 --> 31:57.210
编译的一个信息

31:57.210 --> 31:58.210
你可以自己

31:58.210 --> 31:59.210
一会我们去打印一下

31:59.210 --> 32:00.210
可以吧

32:00.210 --> 32:02.210
我们可以在这里打印一下先

32:02.210 --> 32:04.210
console.log

32:05.210 --> 32:06.210
Renderer

32:07.210 --> 32:08.210
pr.compile

32:10.210 --> 32:11.210
pr1对吧

32:11.210 --> 32:12.210
我们可以看一下

32:12.210 --> 32:13.210
是什么

32:13.210 --> 32:14.210
刷新

32:15.210 --> 32:16.210
刷新

32:16.210 --> 32:17.210
我们可以看一下

32:17.210 --> 32:18.210
在这里面

32:18.210 --> 32:19.210
它打印的

32:20.210 --> 32:21.210
我这是

32:21.210 --> 32:22.210
打印的那个

32:22.210 --> 32:23.210
我看一下

32:27.840 --> 32:28.840
打印的是一个方式

32:28.840 --> 32:29.840
对不对

32:29.840 --> 32:30.840
我们执行一下

32:30.840 --> 32:31.840
这个呢

32:31.840 --> 32:33.840
看它发挥的是什么

32:33.840 --> 32:34.840
刷新

32:35.840 --> 32:36.840
报了个错

32:36.840 --> 32:37.840
ID is not defined

32:37.840 --> 32:38.840
我们看一下

32:38.840 --> 32:39.840
这个怎么用

32:39.840 --> 32:40.840
Compile

32:42.840 --> 32:43.840
Compile

32:43.840 --> 32:44.840
这是方法

32:44.840 --> 32:45.840
编译的这个方法

32:45.840 --> 32:46.840
然后

32:46.840 --> 32:47.840
里面

32:47.840 --> 32:48.840
穿一个

32:48.840 --> 32:49.840
场景

32:49.840 --> 32:50.840
穿一个

32:50.840 --> 32:52.840
穿一个场景

32:52.840 --> 32:53.840
对吧

32:54.840 --> 32:55.840
syn

32:56.840 --> 32:57.840
syn

32:57.840 --> 32:59.840
一个相机

32:59.840 --> 33:00.840
crimer

33:00.840 --> 33:01.840
对吧

33:02.840 --> 33:03.840
这就是用来测试的

33:03.840 --> 33:04.840
对不对

33:04.840 --> 33:05.840
它就是用来测试的

33:05.840 --> 33:07.840
编译的一个信息

33:09.840 --> 33:10.840
然后我们再接着

33:10.840 --> 33:11.840
往下

33:11.840 --> 33:12.840
往下看一下

33:12.840 --> 33:13.840
往下还有啥

33:14.840 --> 33:15.840
往下

33:16.840 --> 33:17.840
Gate Contacts

33:17.840 --> 33:18.840
或许这个当前的

33:18.840 --> 33:19.840
外部这样的环境

33:20.840 --> 33:22.840
然后还有下面

33:22.840 --> 33:23.840
这个

33:24.840 --> 33:25.840
Gate

33:25.840 --> 33:26.840
Pixel

33:26.840 --> 33:27.840
Reduce

33:27.840 --> 33:28.840
代表的是或许

33:28.840 --> 33:29.840
设备的一个像素笔

33:29.840 --> 33:31.840
我们在这个

33:32.840 --> 33:34.840
我们在我们的Colors

33:34.840 --> 33:35.840
不能说Colors

33:35.840 --> 33:36.840
在我们的这个

33:36.840 --> 33:38.840
Spreader GS

33:38.840 --> 33:39.840
Renderer

33:39.840 --> 33:40.840
渲染期身上

33:40.840 --> 33:41.840
我们可以或许到

33:41.840 --> 33:42.840
这个渲染

33:42.840 --> 33:43.840
设备像素笔

33:43.840 --> 33:44.840
那既然它有

33:44.840 --> 33:45.840
或许

33:45.840 --> 33:46.840
是不是就应该有设置

33:46.840 --> 33:47.840
对吧

33:47.840 --> 33:48.840
我们没错

33:48.840 --> 33:49.840
我们下面是有一个

33:49.840 --> 33:50.840
设置的

33:50.840 --> 33:51.840
有一个叫Site

33:52.840 --> 33:53.840
看Site

33:55.840 --> 33:56.840
Pixel

33:56.840 --> 33:57.840
这么读的话

33:57.840 --> 33:58.840
Pixel

33:58.840 --> 33:59.840
Reduce

33:59.840 --> 34:00.840
Reduce

34:00.840 --> 34:02.840
代表的是设置这个像素笔

34:02.840 --> 34:04.840
那一般我们设置这个像素笔

34:04.840 --> 34:05.840
跟我们

34:05.840 --> 34:07.840
设备的一个像素笔

34:07.840 --> 34:08.840
是一样的

34:08.840 --> 34:09.840
那设备像素笔怎么来设置

34:09.840 --> 34:10.840
是不是就设置这个

34:12.840 --> 34:13.840
这怎么读的了

34:13.840 --> 34:14.840
我们来设置一下吧

34:14.840 --> 34:15.840
先

34:16.840 --> 34:17.840
在这里

34:17.840 --> 34:18.840
我们来Renderer

34:19.840 --> 34:20.840
re ndr

34:20.840 --> 34:21.840
dr

34:21.840 --> 34:22.840
dr

34:22.840 --> 34:23.840
它对吧

34:27.840 --> 34:28.840
有一个Device

34:29.840 --> 34:31.840
Windows.Device

34:31.840 --> 34:32.840
Device

34:32.840 --> 34:33.840
Device

34:33.840 --> 34:34.840
Person

34:34.840 --> 34:35.840
Reduce

34:36.840 --> 34:37.840
Pixel

34:37.840 --> 34:38.840
Reduce

34:38.840 --> 34:39.840
是不是

34:39.840 --> 34:40.840
我们就直接给它

34:40.840 --> 34:41.840
设置一下就行了

34:42.840 --> 34:43.840
那这个属性

34:43.840 --> 34:44.840
用来做什么

34:44.840 --> 34:45.840
这个属性就是

34:45.840 --> 34:46.840
为了防止

34:46.840 --> 34:47.840
如果你这是一个

34:47.840 --> 34:49.840
高分辨率的

34:49.840 --> 34:50.840
一个显示屏的话

34:50.840 --> 34:52.840
它的一个样式

34:52.840 --> 34:55.840
会有所影响

34:55.840 --> 34:56.840
对不对

34:56.840 --> 34:57.840
选出来的效果

34:57.840 --> 34:58.840
有所影响

34:58.840 --> 34:59.840
会模糊的一个效果

34:59.840 --> 35:00.840
那如果我们

35:00.840 --> 35:01.840
给它加上这个

35:01.840 --> 35:02.840
这句话的话

35:02.840 --> 35:03.840
它会根据

35:03.840 --> 35:05.840
设备的一个

35:05.840 --> 35:06.840
像素笔

35:06.840 --> 35:08.840
进行去改变我们

35:08.840 --> 35:09.840
这个里面的一个

35:09.840 --> 35:10.840
像素的一个

35:10.840 --> 35:11.840
像素笔

35:11.840 --> 35:12.840
对吧

35:12.840 --> 35:13.840
ZSS像素的一个

35:13.840 --> 35:14.840
一个大小

35:15.840 --> 35:16.840
然后我们再借着

35:16.840 --> 35:17.840
往下看一下

35:17.840 --> 35:18.840
还有什么

35:18.840 --> 35:19.840
还有个Side Size

35:19.840 --> 35:20.840
对不对

35:20.840 --> 35:21.840
Side Size

35:21.840 --> 35:22.840
会设置

35:22.840 --> 35:23.840
我们Colors的一个大小

35:23.840 --> 35:24.840
它就是

35:24.840 --> 35:26.840
调整我们Colors的一个大小

35:26.840 --> 35:28.840
然后还有Gaith Size吧

35:28.840 --> 35:29.840
下面有Side

35:29.840 --> 35:30.840
应该有Gaith

35:30.840 --> 35:31.840
Gaith Size就是

35:31.840 --> 35:32.840
获取现在的

35:32.840 --> 35:33.840
Colors的一个大小

35:33.840 --> 35:34.840
那这就是

35:34.840 --> 35:35.840
我们这个渲染器

35:35.840 --> 35:36.840
这一部分

35:36.840 --> 35:37.840
对吧

35:37.840 --> 35:39.840
渲染器这一部分

35:39.840 --> 35:40.840
我们可以再打印一下

35:40.840 --> 35:42.840
这个Renderer.Gaith

35:42.840 --> 35:43.840
Pixel

35:43.840 --> 35:44.840
Pi

35:44.840 --> 35:45.840
X

35:45.840 --> 35:46.840
ER

35:46.840 --> 35:47.840
R2

35:47.840 --> 35:48.840
TIO

35:51.280 --> 35:52.280
可以看一下

35:54.280 --> 35:55.280
是不是给你打印出来了

35:55.280 --> 35:56.280
放回了

35:56.280 --> 35:57.280
对吧

35:57.280 --> 35:58.280
1.1

35:58.280 --> 35:59.280
我们给它

35:59.280 --> 36:00.280
切换一下设备

36:00.280 --> 36:01.280
刷新一下

36:01.280 --> 36:02.280
3

36:03.280 --> 36:04.280
可以吧

36:04.280 --> 36:05.280
这是3对不对

36:05.280 --> 36:06.280
是这个

36:06.280 --> 36:07.280
OK吧

36:07.280 --> 36:08.280
以上就是

36:08.280 --> 36:09.280
我们这个渲染器

36:09.280 --> 36:10.280
这一部分内容

36:10.280 --> 36:11.280
那渲染器

36:11.280 --> 36:12.280
这一部分

36:12.280 --> 36:13.280
我们最常设置的

36:13.280 --> 36:14.280
其实就是

36:14.280 --> 36:16.280
来

36:16.280 --> 36:17.280
最常设置的

36:17.280 --> 36:18.280
就是这个Colors

36:18.280 --> 36:19.280
对吧

36:19.280 --> 36:20.280
然后还有这个

36:20.280 --> 36:21.280
这个值

36:21.280 --> 36:22.280
这个怎么读

36:22.280 --> 36:23.280
搜一下

36:23.280 --> 36:24.280
查一下

36:24.280 --> 36:25.280
这个怎么读的

36:25.280 --> 36:26.280
读一下

36:28.280 --> 36:29.280
听一下

36:31.280 --> 36:32.280
Antialians

36:32.280 --> 36:33.280
Antialius

36:33.280 --> 36:34.280
对吧

36:34.280 --> 36:35.280
Antialius

36:35.280 --> 36:36.280
Antialius

36:36.280 --> 36:38.280
代表是否挺平滑

36:38.280 --> 36:39.280
对不对

36:40.280 --> 36:42.280
抗拒持

36:42.280 --> 36:43.280
它会看起来

36:43.280 --> 36:45.280
你的图像

36:45.280 --> 36:46.280
比较圆润

36:46.280 --> 36:47.280
对不对

36:47.280 --> 36:48.280
OK

36:48.280 --> 36:49.280
那本堂课

36:49.280 --> 36:50.280
我们就先到这

36:50.280 --> 36:51.280
我们

36:51.280 --> 36:52.280
具体

36:52.280 --> 36:54.280
具体来使用

36:54.280 --> 36:55.280
这个渲染器的时候

36:55.280 --> 36:56.280
我们到时候

36:56.280 --> 36:57.280
在

36:57.280 --> 37:00.280
在做一些小的Demo

37:00.280 --> 37:01.280
或者小的项目的时候

37:01.280 --> 37:02.280
我们再来

37:02.280 --> 37:03.280
详细来说

37:03.280 --> 37:04.280
那本堂课

37:04.280 --> 37:05.280
我们就先到这

37:05.280 --> 37:06.280
本堂课

37:06.280 --> 37:07.280
主要就是

37:07.280 --> 37:08.280
让大家了解一下

37:08.280 --> 37:09.280
渲染器里面的一些功能

37:09.280 --> 37:10.280
好吧

37:10.280 --> 37:11.280
咱们下次

