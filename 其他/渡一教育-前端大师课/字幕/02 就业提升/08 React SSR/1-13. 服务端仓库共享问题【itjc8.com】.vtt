WEBVTT

00:00.690 --> 00:04.130
这一刻咱们来解决一些小的问题

00:04.130 --> 00:06.830
首先第一个问题我之前没注意

00:06.830 --> 00:11.630
就是服务端的打包结果有点太夸张了

00:11.630 --> 00:13.570
比方说我们再打包一次吧

00:13.570 --> 00:15.570
npm装dev

00:15.570 --> 00:18.090
因为我之前忘了把配置加上了

00:18.090 --> 00:20.210
可能有些同学都很着急了

00:20.210 --> 00:21.530
我一直没加上

00:21.530 --> 00:24.490
服务端打包结果太大了

00:24.490 --> 00:26.810
7万多行带 太大了

00:26.810 --> 00:28.410
所以我们这里再加上

00:28.410 --> 00:31.690
就是之前我们在前几一课就说了的

00:31.690 --> 00:35.690
叫做load extranos

00:35.690 --> 00:37.610
require 导入

00:37.610 --> 00:40.050
webpack load extranos

00:40.050 --> 00:42.010
然后把这个加上

00:42.010 --> 00:45.890
叫做 extranos 加上

00:45.890 --> 00:50.250
这个服端它就不会打包load module下面的东西

00:50.250 --> 00:52.010
OK 咱们来看一下吧

00:52.010 --> 00:56.450
npm装dev

00:56.450 --> 00:58.130
那么现在没问题了

00:58.210 --> 01:00.530
服务端打包

01:00.530 --> 01:02.410
怎么还这么大

01:02.410 --> 01:04.730
服务端 只有1000多号耐马了

01:04.730 --> 01:06.050
就小了很多了

01:06.050 --> 01:07.610
这还是开发模式的吧

01:07.610 --> 01:09.810
生产环境的话更小一点

01:09.810 --> 01:10.490
OK

01:10.490 --> 01:12.650
那么这里是把这个问题解决

01:12.650 --> 01:14.130
然后现在我们重点的问题是解决

01:14.130 --> 01:17.450
这个问题就是服务端目前的这么一种情况

01:17.450 --> 01:20.290
服务端只有一个store 只有一个倉库

01:20.290 --> 01:21.530
因为我们倉库是写实的

01:21.530 --> 01:23.290
你看这个倉库

01:23.290 --> 01:25.410
因为我们知道模块会缓存嘛

01:25.410 --> 01:27.010
你看倉库

01:27.010 --> 01:29.170
倉库它直接建好了一个倉库直接导出了

01:29.170 --> 01:29.650
对吧

01:29.650 --> 01:30.970
那么这个耐马它会缓存

01:30.970 --> 01:33.770
所以说每一次请求实际上用的是同一个倉库

01:33.770 --> 01:34.970
这样子不好的

01:34.970 --> 01:35.410
为什么

01:35.410 --> 01:37.450
因为有的时候我们要根据不同的用户

01:37.450 --> 01:38.970
得得到不同的数据

01:38.970 --> 01:41.450
所以说倉库不能写实

01:41.450 --> 01:42.570
而且你每一个请求

01:42.570 --> 01:44.090
比方你请求首页

01:44.090 --> 01:48.130
你比方说之前 之前一个张三

01:48.130 --> 01:50.530
张三请求过电影页

01:50.530 --> 01:51.330
对吧

01:51.330 --> 01:54.530
然后你是请求首页

01:54.570 --> 01:57.170
那么他又会把电影数据达到

01:57.170 --> 01:58.290
会有这么一个问题

01:58.290 --> 01:58.570
对吧

01:58.570 --> 01:59.930
我们之前也演示过这个问题

01:59.930 --> 02:01.450
不要用完魔力一下吧

02:01.450 --> 02:02.690
现在已经启动了

02:02.690 --> 02:04.250
我们现在魔力张三

02:04.250 --> 02:07.010
张三去请求了电影页

02:07.010 --> 02:08.690
你看说电影数据达到了

02:08.690 --> 02:08.970
对吧

02:08.970 --> 02:10.690
这个这些东西我们都解决了

02:10.690 --> 02:11.690
电影数据达到了

02:11.690 --> 02:14.130
然后现在理事去请求首页

02:16.250 --> 02:18.570
另外一个用户去请求首页

02:18.570 --> 02:20.890
你会看到它的原来马里边也有电影数据

02:20.890 --> 02:21.290
为什么呢

02:21.290 --> 02:22.570
因为张三请求过电影

02:22.570 --> 02:23.890
这个是很不合理的

02:23.890 --> 02:25.130
因为我们服务性的

02:25.130 --> 02:26.010
他只要没停机

02:26.010 --> 02:27.330
他的内存始终是在的

02:27.330 --> 02:30.130
每一个请求的

02:30.130 --> 02:32.290
他都使用的是同一个仓库

02:32.290 --> 02:33.530
所以说这个是不合理的

02:33.530 --> 02:34.970
我们应该改造一下

02:34.970 --> 02:37.370
让每一个请求使用不同的仓库

02:37.370 --> 02:38.170
那么自然而然

02:38.170 --> 02:39.290
这样的操作方式

02:39.290 --> 02:42.290
我们就应该变换一下

02:42.290 --> 02:44.090
就应该变换一下

02:44.090 --> 02:44.530
就这样子

02:44.530 --> 02:45.730
我们把它导出一个

02:45.730 --> 02:46.690
导出为一个函数

02:46.690 --> 02:48.330
叫做mixedone

02:48.330 --> 02:49.890
导出为这么一个函数

02:49.890 --> 02:52.330
这个函数反回一个仓库

02:52.370 --> 02:54.450
每次调整的返回一个新的仓库

02:55.650 --> 02:56.850
返回一个新的仓库

02:56.850 --> 02:58.730
然后我们把这个函数导出

02:59.730 --> 03:00.890
先把写成这个样子

03:00.890 --> 03:02.850
然后我们客户端一部分来改

03:02.850 --> 03:04.210
有些地方需要改动

03:04.210 --> 03:05.130
客户端这一块

03:05.130 --> 03:06.530
客户端肯定是只用

03:06.530 --> 03:08.450
只用的是唯一的一个仓库

03:08.450 --> 03:10.890
所以说mixedone导出进来

03:10.890 --> 03:12.010
然后我们在仓库的

03:12.010 --> 03:13.450
直接在这里创建

03:13.450 --> 03:15.050
就不要在函数里面了

03:15.050 --> 03:15.890
直接在这里创建

03:15.890 --> 03:17.810
因为客户端使用的是同一个仓库

03:18.890 --> 03:21.210
因为每个用户是一个客户端

03:21.570 --> 03:24.130
所以每个人用自己的独立的一份仓库

03:24.130 --> 03:25.090
只要你刷新页面

03:25.090 --> 03:27.050
又重新来出实化仓库

03:27.050 --> 03:28.010
只要你不刷新页面

03:28.010 --> 03:29.650
使用的是同一个仓库

03:29.650 --> 03:30.570
我们可以这样的写

03:30.570 --> 03:32.010
客户端很好改

03:32.010 --> 03:34.730
然后服务器那边改动就比较大了一点

03:34.730 --> 03:36.010
之前这个小问题没注意

03:36.010 --> 03:39.130
所以说咱们手动配置SSR的话

03:39.130 --> 03:40.690
肯定是没有生产力的

03:40.690 --> 03:42.770
就是主要是熟悉原地

03:42.770 --> 03:43.690
那么一个个来

03:43.690 --> 03:45.850
首先App这个组建的仓库

03:45.850 --> 03:47.570
就不能直接在这里来了

03:47.570 --> 03:48.450
应该怎么样

03:48.450 --> 03:50.450
你也不能在服务器的每一个地方

03:50.450 --> 03:52.250
去通过调用函数去创建一个

03:52.250 --> 03:54.730
那么每一个地方都用的是不同的仓库了

03:54.730 --> 03:57.810
应该是一次请求使用同一个仓库

03:57.810 --> 03:59.050
所以仓库应该从哪里来

03:59.050 --> 04:00.050
应该从这里来

04:01.130 --> 04:01.970
在Render的时候

04:01.970 --> 04:03.050
一次请求对吧

04:03.050 --> 04:04.410
这是请求的处理函数

04:04.410 --> 04:06.410
那么我们在这里去导入

04:06.410 --> 04:07.250
make store

04:07.850 --> 04:08.450
爽

04:08.450 --> 04:09.450
第二鞋缸

04:10.450 --> 04:11.450
第二鞋缸

04:11.450 --> 04:12.410
store

04:12.410 --> 04:13.530
那么我在哪里创建仓库

04:13.530 --> 04:14.450
也不能在这里

04:14.450 --> 04:16.250
因为在这里的话又在请求之外了

04:16.250 --> 04:16.770
对吧

04:16.770 --> 04:17.490
你在请求之外

04:17.490 --> 04:19.090
就是所有的请求又通用一个仓库了

04:19.130 --> 04:20.250
所以说你在这里创建

04:20.730 --> 04:21.930
在这里创建仓库

04:23.090 --> 04:23.610
const

04:23.610 --> 04:24.330
store

04:24.330 --> 04:25.410
make store

04:25.410 --> 04:26.570
创建一个仓库

04:26.570 --> 04:27.290
然后这个仓库

04:27.290 --> 04:28.730
就会传递给其他仓库

04:28.730 --> 04:30.890
因为他们每一次请求使用的是同一个

04:30.890 --> 04:31.850
所以说其他的地方

04:31.850 --> 04:32.810
我们要改造一下

04:32.810 --> 04:33.810
比方说一个个来

04:33.810 --> 04:35.290
App这个组件里边

04:35.290 --> 04:36.410
它就不能用仓库了

04:36.410 --> 04:37.570
需要给我传过来

04:38.250 --> 04:38.610
store

04:38.610 --> 04:39.170
传过来

04:39.730 --> 04:40.290
对吧

04:40.290 --> 04:40.810
OK

04:40.810 --> 04:42.490
那么这里我们就在App里边

04:42.490 --> 04:43.890
把仓库给它传过去

04:43.890 --> 04:44.290
store

04:50.090 --> 04:51.330
loaddata里边

04:51.330 --> 04:52.370
它也需要仓库

04:52.370 --> 04:52.650
对吧

04:52.650 --> 04:53.170
也需要仓库

04:53.170 --> 04:54.010
它不能这样来

04:54.010 --> 04:55.210
应该传过去

04:55.810 --> 04:56.330
store

04:56.970 --> 04:57.530
OK

04:57.530 --> 04:58.970
那么这边loaddata

04:58.970 --> 05:00.250
我们给它传过去

05:00.250 --> 05:01.050
store

05:01.050 --> 05:01.930
把这个仓库

05:01.930 --> 05:03.050
创建的仓库给它传过去

05:03.050 --> 05:04.610
那么保证这个组件也好

05:04.610 --> 05:06.050
这个东西使用的是同一个仓库

05:06.050 --> 05:06.610
对吧

05:06.610 --> 05:07.890
然后再来

05:07.890 --> 05:09.770
还有哪里

05:09.770 --> 05:10.810
还有get a tmail

05:10.810 --> 05:11.970
get a tmail

05:11.970 --> 05:14.050
那么这个地方也需要一个仓库

05:14.050 --> 05:15.690
因为我要把仓库的数据

05:15.690 --> 05:16.970
序列化到页面上

05:16.970 --> 05:17.450
对吧

05:17.570 --> 05:19.290
那么我们这里

05:19.290 --> 05:20.730
自己不能导住了

05:20.730 --> 05:21.290
我们在这里

05:21.290 --> 05:22.450
把仓库给它传进去

05:23.610 --> 05:24.490
稍微改造一下

05:25.290 --> 05:25.570
OK

05:25.570 --> 05:27.450
那么现在应该差不多了吧

05:27.450 --> 05:28.610
应该差不多了

05:28.610 --> 05:29.290
保存

05:29.290 --> 05:30.690
那咱们来看一下

05:30.690 --> 05:32.450
现在启动好了

05:32.450 --> 05:32.930
刷新

05:34.010 --> 05:34.370
OK

05:34.370 --> 05:35.690
那么这些都是没问题的

05:35.690 --> 05:36.250
你看手页

05:36.250 --> 05:36.570
没有

05:36.570 --> 05:37.050
对吧

05:37.050 --> 05:37.570
电影页

05:38.570 --> 05:39.050
电影页

05:40.210 --> 05:40.570
怎么

05:42.450 --> 05:43.890
怎么它跳转页面了

05:43.890 --> 05:45.570
应该是哪里出了问题

05:45.570 --> 05:46.570
应该是哪里出了问题

05:46.570 --> 05:47.730
我们重新来一次吧

05:49.930 --> 05:50.730
还要调一下

05:50.730 --> 05:52.290
它为什么会刷新页面

05:52.290 --> 05:54.050
那应该是有GS爆错

05:54.050 --> 05:55.770
应该是有GS爆错

05:55.770 --> 05:57.410
我看一下GS爆错怎么回事

05:57.410 --> 05:58.530
看看xs动

05:58.530 --> 05:59.810
before initialization

06:02.090 --> 06:02.570
我看一下吧

06:04.250 --> 06:05.050
什么意思

06:05.050 --> 06:05.690
哦

06:05.690 --> 06:06.450
这个地方

06:06.450 --> 06:07.250
这个地方写错了

06:07.250 --> 06:08.290
没有参数

06:08.290 --> 06:09.210
没有参数

06:09.210 --> 06:09.330
好

06:09.330 --> 06:09.570
刷新

06:10.690 --> 06:11.450
GS爆错的话

06:11.450 --> 06:12.410
它导致个瑞丹

06:12.410 --> 06:13.730
瑞丹是失销了

06:13.730 --> 06:14.930
电影页面

06:14.930 --> 06:15.770
好

06:16.650 --> 06:17.090
电影页面

06:17.090 --> 06:18.730
我们来看一下刷新一次

06:18.730 --> 06:19.850
刷新一次电影页面

06:19.850 --> 06:21.130
看原代嘛

06:21.130 --> 06:22.090
电影数据拿出来了

06:22.090 --> 06:22.450
对吧

06:22.450 --> 06:24.090
然后我们看客户端的控制台

06:24.090 --> 06:25.450
我们之前做过的

06:25.450 --> 06:26.930
表示不需要加转数据了

06:26.930 --> 06:27.890
没问题

06:27.890 --> 06:29.370
然后那电影首页

06:29.370 --> 06:30.490
刷新

06:30.490 --> 06:30.970
你看一下

06:30.970 --> 06:32.170
每一次请求是不一样的

06:32.170 --> 06:32.450
对吧

06:32.450 --> 06:33.570
每次请求

06:33.570 --> 06:35.010
就借新建两个仓库

06:35.010 --> 06:36.810
这一次仓库里边没有电影数据

06:36.810 --> 06:36.970
好

06:36.970 --> 06:37.610
那么这一样子

06:37.610 --> 06:38.450
我们看控制台

06:38.450 --> 06:39.330
到电影页面了

06:39.330 --> 06:40.450
由于它没有这个数据

06:40.450 --> 06:40.770
对吧

06:40.770 --> 06:42.410
客户端是需要加转数据的

06:42.410 --> 06:42.610
好

06:42.610 --> 06:43.570
这些都没问题了

06:43.610 --> 06:44.250
对吧

06:44.250 --> 06:44.490
OK

06:44.490 --> 06:45.730
把这个地方的小细节

06:45.730 --> 06:47.370
给大家处理一下

06:47.370 --> 06:48.450
大家把跟着感一下

