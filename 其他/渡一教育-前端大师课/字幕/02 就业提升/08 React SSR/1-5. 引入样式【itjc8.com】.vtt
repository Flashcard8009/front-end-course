WEBVTT

00:00.620 --> 00:03.340
好 这节课怎么来继续来做

00:03.340 --> 00:05.980
现在我们这节课解决样式问题

00:05.980 --> 00:09.220
如果我们现在在页面上要加入一些样式

00:09.220 --> 00:12.140
有全局样式 有局部样式

00:12.140 --> 00:15.660
我们知道这个样式我们目标是要做什么

00:15.660 --> 00:18.100
我们目标是要做成这么两件事

00:18.100 --> 00:19.500
我给大家记一下

00:19.500 --> 00:23.610
大家想一想我们要做啥

00:23.610 --> 00:29.370
两件事 第一件事就是在页面原代码中

00:29.530 --> 00:32.370
加入一个另一个元素

00:32.370 --> 00:36.090
然后连接到样式文件

00:36.090 --> 00:37.890
那么你要连接到样式文件

00:37.890 --> 00:40.490
是不是得首先有样式文件

00:40.490 --> 00:43.330
那么我们第一步还要就是利用

00:43.330 --> 00:47.850
webpack来生成样式文件

00:47.850 --> 00:49.930
这是我们这里的课 还要做了两件事

00:49.930 --> 00:51.970
利用webpack来生成样式文件

00:51.970 --> 00:54.530
一个在页面上要加入一个另一个元素

00:54.530 --> 00:55.530
连接到样式文件

00:55.530 --> 00:57.890
那么样式是不是就搞定了

00:58.010 --> 01:00.450
那么当然这里边还有一些细节的问题

01:00.450 --> 01:02.610
怎么一个来说

01:02.610 --> 01:04.770
首先我们这里先

01:04.770 --> 01:06.450
因为我们要安装样式文件

01:06.450 --> 01:08.890
所以说我们肯定要安装两个webpack插件

01:08.890 --> 01:15.650
一个是webpack叫mini.css

01:15.650 --> 01:17.770
还记得吧 extract

01:17.770 --> 01:19.010
plug in

01:19.010 --> 01:21.090
另外一个是cssloader

01:21.090 --> 01:23.050
这两个都是必须安装的

01:23.050 --> 01:24.290
好 让它安装吧

01:24.290 --> 01:26.090
那么接下来我们在代码里边

01:26.090 --> 01:27.410
去写一下样式文件

01:27.450 --> 01:28.730
我这里写两个

01:28.730 --> 01:29.730
一个是全局的

01:29.730 --> 01:31.730
一个是主件内部的

01:31.730 --> 01:33.210
全局的话我把它写到这儿

01:37.210 --> 01:38.450
全局写到这儿

01:38.450 --> 01:41.970
然后我们这里新建一个global.css

01:41.970 --> 01:44.370
那么这里面我们就写一个啥

01:44.370 --> 01:46.570
我们就写一个body吧

01:46.570 --> 01:47.610
body

01:47.610 --> 01:51.250
然后我们给它加上一个penny

01:51.250 --> 01:53.410
penny 50个项素

01:53.410 --> 01:56.890
还加啥

01:56.930 --> 01:59.690
就行了吧 随便写一个全局的样式

01:59.690 --> 02:01.970
那么全局的样式我要引用它

02:01.970 --> 02:03.250
不但它不会打包的

02:03.250 --> 02:04.210
我要引用它

02:04.210 --> 02:05.850
那么怎么引用呢

02:05.850 --> 02:07.810
全局的样式是这样子

02:07.810 --> 02:09.530
你想一想

02:09.530 --> 02:10.890
这里我们用两个端

02:10.890 --> 02:12.810
一个端是在客户端

02:12.810 --> 02:14.530
一个端是在服务器端

02:14.530 --> 02:16.970
那么到底在客户端引用还是在服务器端引用

02:17.970 --> 02:20.010
我们好好想一想

02:21.250 --> 02:22.330
怎么引用呢

02:23.170 --> 02:24.370
是这样子的

02:24.810 --> 02:27.410
我们在客户端和服务端都要引用

02:27.410 --> 02:29.050
因为我们要保持同购嘛

02:29.050 --> 02:31.210
服务端跟客户端是要一样的

02:31.210 --> 02:33.370
所以我们在两个方向都要引用它

02:34.530 --> 02:35.650
abdel.css

02:35.650 --> 02:39.090
global.css

02:39.810 --> 02:41.610
我们在这里引用一下

02:41.610 --> 02:42.970
在服务端也引用一下

02:45.370 --> 02:46.490
那么这里呢

02:46.490 --> 02:48.650
这里是不是就引用好了

02:48.650 --> 02:50.050
对吧 就引用好了

02:50.050 --> 02:53.570
实际上我们其实仔细分析一下

02:54.410 --> 02:55.530
我刚才说的还有点问题

02:55.530 --> 02:56.570
还有点小问题

02:56.570 --> 02:58.970
那么服务端实际上是可以不引用的

02:58.970 --> 02:59.530
为什么呢

02:59.530 --> 03:00.770
因为我们做样式

03:00.770 --> 03:03.850
其实就是为了生成一个样式文件

03:03.850 --> 03:05.370
就是为了生成一个样式文件

03:05.370 --> 03:06.890
那么这个样式文件的话

03:06.890 --> 03:07.930
有两个wipe

03:07.930 --> 03:10.450
对吧 服务端有一个 客户端有一个

03:10.450 --> 03:11.490
有两个wipe

03:11.490 --> 03:12.770
那么任何一个wipe

03:12.770 --> 03:13.570
是不是打包过后来

03:13.570 --> 03:15.170
它都可以生成样式文件

03:15.170 --> 03:15.450
对吧

03:15.450 --> 03:17.410
我们可以利用任何一个wipe来打包

03:17.410 --> 03:18.850
来生成样式文件

03:18.850 --> 03:22.370
那么我们只需要让其中一方来生成样式文件就可以了

03:22.370 --> 03:23.530
反正都是一样的

03:23.570 --> 03:24.570
一来都是一样的

03:24.570 --> 03:26.930
所以说我们只要其中一方来生成样式文件

03:26.930 --> 03:28.410
另一方就不用生成了

03:28.410 --> 03:29.290
没有这意思吧

03:29.290 --> 03:32.650
因此我们只要第一步要生成样式文件

03:32.650 --> 03:35.250
我们样式文件只要拿一个wipe来生成就行了

03:35.250 --> 03:37.690
所以说我们可以让客户端

03:37.690 --> 03:39.210
可以让客户端引用

03:39.210 --> 03:40.890
服务端可以像这种样式

03:40.890 --> 03:42.010
服务端就不引用

03:42.010 --> 03:43.170
服务端就不引用

03:43.170 --> 03:45.410
对吧 这种样式是不是受影响的

03:45.410 --> 03:46.090
没有这意思吧

03:46.090 --> 03:49.050
那么我们服务端不引用这个样式

03:49.050 --> 03:51.570
客户端引用就行了

03:51.810 --> 03:54.450
然后另外是一个局部样式

03:54.450 --> 03:57.970
局部样式当然两个引用里面没什么问题

03:57.970 --> 04:00.050
局部样式的话我们就有一点差异

04:00.050 --> 04:01.290
我这个地方要做完了过后

04:01.290 --> 04:04.250
你才能真正理解这个全局的逻辑是什么

04:04.250 --> 04:08.010
局部我们在Home逐渐里面

04:08.010 --> 04:10.770
Home有一个页面里面写一个自己的样式

04:10.770 --> 04:12.930
因这个是CSS

04:12.930 --> 04:16.450
那么这里我们写了一个类样式

04:16.450 --> 04:17.770
叫做Beauty

04:18.770 --> 04:21.010
Bottom

04:22.050 --> 04:25.050
就是那个漂亮的按钮

04:25.050 --> 04:27.490
然后我们这里给它一个波段

04:27.490 --> 04:28.290
一个项素

04:28.290 --> 04:29.570
solid

04:29.570 --> 04:32.650
然后一个333

04:32.650 --> 04:33.770
随便写一个吧

04:33.770 --> 04:35.170
然后那byground

04:35.170 --> 04:37.250
我们给它写一个light blue

04:37.250 --> 04:38.930
一个亮蓝色

04:38.930 --> 04:40.890
我这里的稍微加深一点

04:40.890 --> 04:42.170
稍微加深一点

04:42.170 --> 04:45.720
然后我们给它写一个hover

04:45.720 --> 04:46.680
hover

04:46.680 --> 04:48.200
然后把byground

04:49.200 --> 04:51.640
我们再大概写一下

04:51.640 --> 04:53.200
这是个局部样式

04:53.200 --> 04:54.800
然后我们在Home逐渐里面

04:54.800 --> 04:56.600
你看有个全局样式一个局部样式

04:56.600 --> 04:58.720
Home逐渐里面我们去引用这个样式

04:58.720 --> 05:00.520
那么我们把引用到Bottom里面

05:00.520 --> 05:02.160
那么引用到Bottom里面的话

05:02.160 --> 05:03.360
我们有两种做法

05:03.360 --> 05:05.600
一种是直接用这种方式来导入

05:05.600 --> 05:07.040
直接用这种方式

05:07.040 --> 05:10.720
就是index.css

05:10.720 --> 05:13.720
然后我们在这里使用class name

05:13.720 --> 05:15.000
是什么Beauty

05:15.000 --> 05:15.640
Bottom

05:15.640 --> 05:17.480
这是第一种做法

05:17.480 --> 05:19.560
第二种做法我们是使用

05:19.560 --> 05:21.760
css module

05:21.760 --> 05:24.680
我们把配置到这里面

05:24.680 --> 05:25.720
client里面

05:25.720 --> 05:26.720
配置到这里面

05:26.720 --> 05:30.610
我们在这里配置个module

05:30.610 --> 05:32.370
就是先不着急这吧

05:32.370 --> 05:33.690
我们还继续说这

05:33.690 --> 05:35.730
就说我们在导入性来过后

05:35.730 --> 05:36.530
导入性来过后

05:36.530 --> 05:38.130
我们这里是用这种方式

05:38.130 --> 05:39.530
大家也写过了

05:39.530 --> 05:42.170
style是beauty

05:42.170 --> 05:43.330
beauty button

05:43.330 --> 05:45.170
当然是个妥妨秘密法

05:45.170 --> 05:45.810
明儿这是吧

05:45.810 --> 05:48.970
我们可以用这种方式来进行书写

05:49.410 --> 05:50.650
那么要使用这种方式的话

05:50.650 --> 05:51.610
那么客户端

05:51.610 --> 05:53.170
我们在客户端配置一下

05:53.170 --> 05:53.890
客户端这里

05:53.890 --> 05:56.090
我们的module里面

05:56.090 --> 05:58.600
rules

05:58.600 --> 06:00.640
我们是不是要配置一个css的loader

06:00.640 --> 06:01.360
对吧

06:01.360 --> 06:03.040
那么css loader

06:03.040 --> 06:04.840
首先我们找到

06:04.840 --> 06:06.720
凡是以css结尾的文件

06:06.720 --> 06:09.440
我们交给哪些loader的运行的

06:09.440 --> 06:11.280
第一个肯定是css loader

06:11.280 --> 06:13.640
那么css loader处理完了之后

06:13.640 --> 06:14.680
前面要交给谁

06:14.680 --> 06:17.240
交给我们刚才安装的查件

06:17.280 --> 06:25.030
叫做mini css extract plugin

06:25.030 --> 06:28.720
require mini

06:28.720 --> 06:30.080
交给他

06:30.080 --> 06:30.520
不着急

06:30.520 --> 06:31.240
我要写完

06:31.240 --> 06:33.240
我们来同意解释一下

06:33.240 --> 06:33.880
loader

06:33.880 --> 06:35.240
当然这个东西

06:35.240 --> 06:36.840
我们还要给谁呢

06:36.840 --> 06:39.640
还要给那个就是加个查件

06:39.640 --> 06:41.680
这里

06:41.680 --> 06:44.560
有一个mini css

06:44.560 --> 06:45.560
然后给他指定一下

06:45.560 --> 06:47.120
它的文件的路径

06:47.120 --> 06:47.800
文件的路径

06:47.800 --> 06:50.440
我们把放到那个css的目录下面

06:50.440 --> 06:51.840
css的目录下面

06:51.840 --> 06:55.160
然后这里就用一个hash

06:55.160 --> 06:57.280
就有一个bundle

06:57.280 --> 06:58.240
第二

06:58.240 --> 06:59.480
hash

06:59.480 --> 07:00.880
css

07:00.880 --> 07:01.080
好

07:01.080 --> 07:02.160
大家分析一下

07:02.160 --> 07:03.440
我们来分析一下

07:03.440 --> 07:06.720
现在我们在客户端这一块

07:06.720 --> 07:08.360
因为这个配置是通用的

07:08.360 --> 07:10.320
服务端和客户端通用的

07:10.320 --> 07:12.720
那么客户端这一块的话

07:12.720 --> 07:14.160
我们引用了样式

07:14.160 --> 07:15.040
对吧

07:15.040 --> 07:16.320
通用的地方引用了样式

07:16.360 --> 07:18.280
然后这个地方引用了拳击样式

07:18.280 --> 07:19.320
是不是都有依赖

07:19.320 --> 07:20.560
那么他这个vipack

07:20.560 --> 07:21.680
我们客户端的vipack

07:21.680 --> 07:22.640
他经过打包

07:22.640 --> 07:24.400
他从index的gss开始

07:24.400 --> 07:25.800
他依赖app

07:25.800 --> 07:27.880
app又依赖这个css

07:27.880 --> 07:28.880
然后呢

07:28.880 --> 07:30.720
这个地方又依赖这个配置

07:30.720 --> 07:32.640
这个配置又依赖这个css

07:32.640 --> 07:32.960
对吧

07:32.960 --> 07:34.480
他是不是可以把我们的

07:34.480 --> 07:36.320
客户端这一块是不是非常完整了

07:36.320 --> 07:37.920
他们会把我们的完整样式

07:37.920 --> 07:39.240
依赖全部找到

07:39.240 --> 07:40.480
然后每一个样式

07:40.480 --> 07:42.040
他经过vipack打包

07:42.040 --> 07:44.080
是不是就生成到文件里面去了

07:44.080 --> 07:45.720
因此对于客户端这一块

07:45.760 --> 07:47.120
生成这个css文件

07:47.120 --> 07:48.000
就已经不成

07:48.000 --> 07:49.320
不成为任何问题了

07:49.320 --> 07:49.760
对吧

07:49.760 --> 07:50.800
我们来试一下

07:50.800 --> 07:51.880
咱们之前也写过

07:51.880 --> 07:53.080
客户端打包的命令

07:53.080 --> 07:58.040
npmrongdevbuildclient

07:58.040 --> 07:58.480
你看一下

07:58.480 --> 07:59.120
客户端打包

07:59.120 --> 08:00.880
他就已经能够正常打包了

08:01.960 --> 08:02.240
好

08:02.240 --> 08:07.180
你行

08:07.180 --> 08:07.460
好

08:07.460 --> 08:07.820
ok

08:07.820 --> 08:08.380
他已经完成了

08:08.380 --> 08:09.340
我们开启要watch的

08:09.340 --> 08:09.700
是吧

08:09.700 --> 08:10.260
那么public

08:10.260 --> 08:11.220
你看一下

08:11.220 --> 08:13.220
css出来了

08:13.220 --> 08:13.820
是不是

08:13.820 --> 08:15.540
加了一个sourcemap

08:15.540 --> 08:16.500
是不是就出来了

08:16.500 --> 08:18.060
说说现在的打包样式文件

08:18.060 --> 08:19.380
就已经没有问题了

08:19.420 --> 08:20.900
但是现在有一个问题

08:20.900 --> 08:22.980
就是服务端打包

08:22.980 --> 08:24.820
服务端打包会出问题

08:24.820 --> 08:26.380
服务端打包为什么会出问题呢

08:26.380 --> 08:27.260
咱们来看一下

08:27.260 --> 08:28.460
我们现在就直接的

08:28.460 --> 08:30.100
先不着急

08:30.100 --> 08:31.820
客户端单独来打包服务器端

08:31.820 --> 08:32.780
看行不行

08:32.780 --> 08:35.340
wrongdevbuild

08:35.340 --> 08:37.140
然后server

08:37.140 --> 08:38.540
看服端打包会不会出问题

08:41.220 --> 08:42.220
你看是不是出问题了

08:42.220 --> 08:42.780
为什么

08:42.780 --> 08:44.660
因为服务端的vipack配置文件

08:44.660 --> 08:47.180
他解析不了这个css

08:47.180 --> 08:47.860
对吧

08:47.900 --> 08:50.660
他解析他是解析不了这个css的

08:50.660 --> 08:53.060
因此服务端打包的社会出问题

08:53.060 --> 08:53.700
那么服务

08:53.700 --> 08:55.140
有的人就想问了

08:55.140 --> 08:56.420
那服务端打包的话

08:56.420 --> 08:57.860
我就完全一样的

08:57.860 --> 08:59.860
一样的配置就完成了

08:59.860 --> 09:01.620
那么一样的配置的话

09:01.620 --> 09:02.620
有个什么样的结果了

09:02.620 --> 09:04.340
这个文件是不是生成了两次

09:04.340 --> 09:04.940
对吧

09:04.940 --> 09:05.900
你用一样的结果

09:05.900 --> 09:07.060
客户端打包生成一次

09:07.060 --> 09:08.060
服务端打包生成一次

09:08.060 --> 09:09.820
当然这个不会造成什么问题

09:09.820 --> 09:10.940
也不会有什么影响

09:10.940 --> 09:12.180
但是没必要

09:12.180 --> 09:13.300
没必要

09:13.300 --> 09:15.220
那么我们来仔细分析一下

09:15.220 --> 09:17.100
因为我们只需要打包成一个文件

09:17.340 --> 09:18.740
不需要把两个打包

09:18.740 --> 09:20.700
服务端 客户端都去生成这个文件

09:20.700 --> 09:21.980
而且服务端打包的结果

09:21.980 --> 09:23.020
是在dash木楼下面

09:23.020 --> 09:23.620
对吧

09:23.620 --> 09:24.300
dash木楼下面

09:24.300 --> 09:25.340
生成一个文件有什么意义

09:25.340 --> 09:26.380
它是运行在服务系的

09:26.380 --> 09:27.780
我们只需要生成到这就行了

09:27.780 --> 09:29.700
生成了客户端的代码就行了

09:29.700 --> 09:31.860
好好理一下

09:31.860 --> 09:33.420
但是服务端也不能不管

09:33.420 --> 09:34.900
也不能不管这个样式

09:34.900 --> 09:36.620
就是说什么意思呢

09:36.620 --> 09:40.940
我们现在的目标就是客户端

09:40.940 --> 09:46.100
客户端具有完整的样式依赖

09:46.100 --> 09:49.460
就像为什么客户端要有完整的样式依赖

09:49.460 --> 09:51.380
因为客户端要打不到这个位置

09:51.380 --> 09:52.380
它要打不到这个位置

09:52.380 --> 09:54.180
形成客户端的

09:54.180 --> 09:56.420
就是直接放到客户端运行的文件

09:56.420 --> 09:56.980
对吧

09:56.980 --> 09:58.580
要生成到这个位置

09:58.580 --> 10:00.700
所以说它必须要有完整的样式依赖

10:00.700 --> 10:01.620
经过什么呢

10:01.620 --> 10:04.820
经过mini CSS extracts

10:04.820 --> 10:09.980
plugging进行打包

10:09.980 --> 10:11.860
那么生成样式文件

10:11.860 --> 10:13.180
都是客户端的工作

10:13.180 --> 10:15.620
客户端的wpike的工作

10:15.660 --> 10:16.580
不是客户端的工作

10:16.580 --> 10:17.980
是客户端wpike的工作

10:19.780 --> 10:21.340
那么现在服务端

10:22.260 --> 10:23.780
服务端它已经生成了

10:23.780 --> 10:25.620
已经生成了这个样式文件了

10:25.620 --> 10:26.980
那么服务器端

10:28.380 --> 10:30.740
它可以没有完整的样式依赖

10:30.740 --> 10:31.180
为什么呢

10:31.180 --> 10:32.740
因为它会无生成文件

10:32.740 --> 10:34.420
它就需要那么完整的干嘛了

10:34.420 --> 10:39.100
服务端可以没有完整的样式依赖

10:39.100 --> 10:46.460
但是必须保证生成的代码中

10:46.460 --> 10:54.250
代码中那样式和客户端保持一致

10:54.250 --> 10:55.290
这是什么意思呢

10:55.290 --> 10:57.450
这个地方我们要梳理一下

10:57.450 --> 11:00.010
就是客户端你看这个page是

11:00.010 --> 11:02.050
客户端这里

11:02.050 --> 11:04.130
我们这里的比方说它生成一个哈希纸

11:04.130 --> 11:04.490
对吧

11:04.490 --> 11:05.330
它生成一个哈希纸

11:05.330 --> 11:06.930
比方说哈希纸是abc

11:06.930 --> 11:09.810
客户端生成的哈希纸是abc

11:09.930 --> 11:12.290
你不能说服务端给我生成的哈希纸

11:12.290 --> 11:13.250
就是beauty barton

11:13.250 --> 11:14.530
那么比方说

11:14.530 --> 11:17.210
那么就说造成那样式的差异了

11:17.210 --> 11:19.730
虽然说我们样式的文件是引用过来了

11:19.730 --> 11:21.450
但是那样式是不是造成差异了

11:21.450 --> 11:26.090
然后服务端给我生成的是beauty barton

11:26.090 --> 11:27.930
就是远方不动的样式

11:27.930 --> 11:30.370
那么这就是个

11:30.370 --> 11:31.890
比方说是个哈希

11:31.890 --> 11:33.290
那是不是造成那样式的差异了

11:33.290 --> 11:34.450
服务端给我一个那样式

11:34.450 --> 11:36.010
客户端又想给另一个那样式

11:36.010 --> 11:37.930
是不是就产生了不同构了

11:37.970 --> 11:38.290
对吧

11:38.290 --> 11:40.170
它就不是统钩的问题了

11:40.170 --> 11:41.250
对吧

11:41.250 --> 11:44.450
所以说服务端它要考虑这个点

11:44.450 --> 11:45.970
它就服务端生成的那样式

11:45.970 --> 11:47.290
就是你不用生成样式文件

11:47.290 --> 11:49.810
但是你的那样式要跟客户端保持一致

11:49.810 --> 11:50.690
对吧

11:50.690 --> 11:53.250
另外服务端的这个像这种就不需要了

11:53.250 --> 11:55.050
像这种就不需要写了

11:55.050 --> 11:56.090
像这种

11:56.090 --> 11:57.450
这种服务端就不需要写了

11:57.450 --> 11:58.050
为什么呢

11:58.050 --> 11:59.970
因为这个东西不存在那样式

11:59.970 --> 12:00.250
对吧

12:00.250 --> 12:01.770
它只是说我依赖它

12:01.770 --> 12:03.650
那么这个让客户端依赖生成文件就行了

12:03.650 --> 12:05.050
反正到时候页面一引用

12:05.050 --> 12:07.090
就把整个文件就引用过来了

12:07.130 --> 12:09.010
所以说像那种没有那样式的

12:09.010 --> 12:10.450
我们就可以不用管

12:10.450 --> 12:11.330
不用管

12:11.330 --> 12:12.730
那么只有那种像

12:12.730 --> 12:14.210
开启的loaded modules

12:14.210 --> 12:15.490
这种那样式的时候

12:15.490 --> 12:16.290
我们要处理一下

12:16.290 --> 12:17.810
也就是说再说直白一点

12:17.810 --> 12:20.170
在公共的组建部分

12:20.170 --> 12:23.050
服务端是要考虑这个那样式的

12:23.050 --> 12:24.210
考虑这个那样式的

12:24.210 --> 12:27.290
在那个就是各自的代码部分的

12:27.290 --> 12:28.890
是可以不用考虑的

12:28.890 --> 12:32.050
处分了这个Global CAC是里面还有那样式

12:32.050 --> 12:33.170
除非还有那样式

12:33.170 --> 12:34.730
那么这里比方说Styles

12:34.770 --> 12:36.330
那么Home里边要用

12:38.130 --> 12:39.450
当然比方说这里有个DIV

12:39.450 --> 12:40.890
DIV要用这里边的东西

12:40.890 --> 12:42.170
拉越还是要考虑

12:42.170 --> 12:43.490
但是没有这种情况的话

12:43.490 --> 12:45.690
像这种直接引用的话是不用考虑的

12:45.690 --> 12:46.490
对吧

12:46.490 --> 12:47.690
我经常解释

12:47.690 --> 12:49.330
这里边是有点绕的

12:49.330 --> 12:52.330
因此服务端我们的目标

12:52.330 --> 12:55.410
仅仅是要保证那样式一致

12:55.410 --> 12:57.730
它跟那样式要跟客户端完全一致

12:57.730 --> 12:58.610
像这种地方

12:58.610 --> 12:59.890
它不存在那样式

12:59.890 --> 13:00.730
OK那就OK

13:00.730 --> 13:01.930
你就没什么问题

13:02.530 --> 13:02.770
好

13:02.770 --> 13:04.330
那怎么来保证呢

13:04.370 --> 13:05.210
怎么来保证的

13:05.210 --> 13:07.210
我们就肯定要改这个

13:07.210 --> 13:09.010
服务端的WPAC代码

13:09.010 --> 13:10.010
服务端WPAC代码

13:10.010 --> 13:11.010
我们来看一下

13:11.010 --> 13:12.290
我们还是要

13:12.290 --> 13:13.570
首先要解析CSS

13:13.570 --> 13:16.130
不然服务端那边也有对CSS依赖

13:16.130 --> 13:16.890
它解析不了

13:16.890 --> 13:19.450
所以我们这里还是要解析CSS

13:20.650 --> 13:21.290
Test

13:21.290 --> 13:22.490
一样的代码

13:22.490 --> 13:23.930
CSS

13:24.930 --> 13:26.290
然后这里Use

13:27.170 --> 13:28.370
CSSloader

13:28.370 --> 13:29.930
但是光有CSSloader不够

13:29.930 --> 13:31.250
我这里还要开启

13:31.250 --> 13:33.370
刚才CSSloader还没有开启

13:33.410 --> 13:34.850
还没有开启的个什么

13:34.850 --> 13:35.810
Modules

13:36.570 --> 13:38.210
把CSSModules开启

13:39.610 --> 13:41.330
那么光有CSSloader还不够

13:41.930 --> 13:43.050
前面还有什么呢

13:43.050 --> 13:44.570
因为我要把CSSloader

13:44.570 --> 13:46.610
因为CSSloader它反而回来的结果

13:47.370 --> 13:48.370
不太好用的

13:48.370 --> 13:49.370
特别不好用

13:49.370 --> 13:51.090
其实它已经可以用了

13:51.090 --> 13:51.690
可以用了

13:51.690 --> 13:53.250
但是它反而回来的结果

13:53.250 --> 13:55.210
不是一个简单的对象

13:55.210 --> 13:57.330
就是服装了CSS结果

13:57.330 --> 13:58.690
它不是一个简单的对象

13:59.650 --> 14:00.370
这样说

14:00.370 --> 14:01.450
我们这里

14:01.690 --> 14:02.730
这个地方

14:02.730 --> 14:03.690
本来是一个对象的

14:03.690 --> 14:03.930
对吧

14:03.930 --> 14:05.530
一个对象里面有个Beauty

14:06.050 --> 14:09.650
一个BeautyButton

14:09.650 --> 14:11.010
这里是个哈希子

14:11.010 --> 14:12.210
本来是这么一个对象的

14:12.210 --> 14:13.610
我们这里可以把哈希子拿过来

14:13.610 --> 14:14.130
对吧

14:14.130 --> 14:17.050
但是CSSloader它有这个数据在里边

14:17.050 --> 14:18.570
但是它的对象它是一个数组

14:18.570 --> 14:20.730
数组里面还有很多额外的信息

14:20.730 --> 14:22.250
所以说不太好用

14:22.250 --> 14:23.970
因此我们还需要一个CSS

14:23.970 --> 14:25.850
还需要一个loader对它进一步处理

14:25.850 --> 14:27.970
把那些乱七八糟的信息过滤掉

14:27.970 --> 14:28.970
我们只需要

14:28.970 --> 14:30.290
也不用帮我生成文件

14:30.330 --> 14:32.930
我只需要生成的哈希子

14:32.930 --> 14:33.730
我只需要这个

14:33.730 --> 14:34.690
其他我不需要

14:35.770 --> 14:36.570
懂我的意思吧

14:36.570 --> 14:37.850
所以说我们这一块

14:37.850 --> 14:38.850
该怎么来处理呢

14:38.850 --> 14:41.970
这一块我们就需要用另外一个插件

14:41.970 --> 14:43.290
另外一个loader

14:43.290 --> 14:45.130
这loader的名字我有点忘了

14:46.290 --> 14:48.210
因为我们用这个loader其实也可以

14:48.210 --> 14:50.890
用MiddleCSS Extractor Pocket也可以

14:50.890 --> 14:52.410
只不过那个玩意

14:53.690 --> 14:54.770
它会帮你生成文件

14:54.770 --> 14:55.850
我不喜欢生成文件

14:55.850 --> 14:56.650
服务端

14:56.650 --> 14:58.370
这loader我们看一下

14:58.370 --> 14:59.570
就这个

14:59.650 --> 15:02.050
isomorphic loader

15:02.050 --> 15:02.890
isomorphic什么意思

15:02.890 --> 15:03.570
就同购的

15:03.570 --> 15:06.130
它就是用来生成一个哈希子

15:06.130 --> 15:07.650
就是要生成一个哈希子

15:07.650 --> 15:10.010
就是来生成把CSS loader的结果

15:10.010 --> 15:12.050
生成一个简单的对象

15:12.050 --> 15:13.450
所以说我们安装一下它

15:14.690 --> 15:16.290
另外它其实还有些别的功能

15:16.290 --> 15:18.370
比方是把央式的内容

15:18.370 --> 15:20.250
可以通过一个字母创拿出来

15:20.250 --> 15:22.010
不过这些东西我们现在都不需要

15:24.340 --> 15:25.980
我们这里复制一下

15:26.460 --> 15:27.060
安装

15:27.620 --> 15:28.700
那么有了这个东西过后

15:28.700 --> 15:30.980
我们只需要把这个玩意儿写到

15:31.540 --> 15:33.180
这个位置就可以了

15:33.740 --> 15:34.740
那么这样一只一来

15:34.740 --> 15:36.460
服务端它也可以生成了

15:36.460 --> 15:37.540
也可以生成了

15:37.940 --> 15:39.340
不过不信我们试一下

15:43.420 --> 15:44.740
npm

15:44.740 --> 15:45.540
rwam

15:46.660 --> 15:47.340
dev

15:47.340 --> 15:48.140
我们来看一下

15:50.430 --> 15:51.230
好 打包出来

15:52.190 --> 15:53.470
哎 这也爆错了是吧

15:53.950 --> 15:54.510
打爆什么

15:59.930 --> 16:00.570
等一下啊

16:00.570 --> 16:02.010
我们再来重新来打包一次

16:02.650 --> 16:03.650
应该是没有错误的

16:04.210 --> 16:05.090
那么重新打包一次

16:05.090 --> 16:05.530
看一下

16:09.760 --> 16:11.040
好 没问题

16:11.040 --> 16:12.240
那咱们访问一下

16:12.240 --> 16:13.640
localhost8080

16:15.240 --> 16:17.080
好 这里我们点击右键

16:17.080 --> 16:18.120
看一下原代码

16:18.120 --> 16:20.080
看服务器生成的原代码里边

16:20.080 --> 16:21.520
那个就是button

16:21.880 --> 16:23.040
有没有class

16:23.560 --> 16:24.320
没有 是吧

16:25.320 --> 16:27.720
这样子我们在这里看一下

16:27.720 --> 16:29.400
我们在这里先打印一下

16:29.400 --> 16:30.840
把style打印出来

16:31.240 --> 16:32.080
打印出来

16:32.840 --> 16:33.440
看一下

16:33.560 --> 16:35.120
我们看一下code1的打印结果

16:36.640 --> 16:37.120
小心

16:38.240 --> 16:38.840
beautybutton

16:38.840 --> 16:41.400
我这里是大写跟小写

16:42.120 --> 16:43.560
这是code1的打印结果

16:43.960 --> 16:45.480
code1的打印结果是没问题的

16:45.920 --> 16:49.400
然后看一下服务器端的打印结果

16:49.880 --> 16:50.920
服务器端的打印结果

16:51.520 --> 16:52.280
我们看一下这里

16:54.970 --> 16:56.010
服务团没有这个

16:56.010 --> 16:57.370
服务器它这个插件

16:57.370 --> 16:58.290
它就是这个loader

16:58.290 --> 16:59.770
它给你提供了这么一些

17:00.010 --> 17:00.730
这么一些函数

17:00.730 --> 17:02.690
可以得到一些生成那种的

17:02.850 --> 17:04.250
那么我们这些函数都不需要

17:04.250 --> 17:05.810
我们主要是需要它那个就是

17:06.490 --> 17:08.250
转换过后的那个哈希值

17:08.690 --> 17:10.090
那么这里我没有开启

17:10.290 --> 17:11.290
服务端没有开启

17:13.330 --> 17:14.130
marge is

17:14.770 --> 17:15.730
没有开启marge is

17:15.730 --> 17:16.570
code1开启了

17:16.570 --> 17:17.450
服务端没有开启

17:18.490 --> 17:18.690
好

17:18.690 --> 17:20.450
再来重新重新来一次

17:21.290 --> 17:21.450
好

17:21.450 --> 17:21.890
运行

17:24.120 --> 17:24.360
好

17:24.360 --> 17:25.080
这里刷新

17:26.520 --> 17:26.760
好

17:26.760 --> 17:27.280
这里呢

17:29.480 --> 17:30.200
变成横杠了

17:30.600 --> 17:31.520
这是横杠了

17:32.000 --> 17:32.840
这是横杠

17:33.160 --> 17:33.720
我们这里

17:36.340 --> 17:37.420
这个属性名字

17:37.620 --> 17:39.020
我刚才不要用横杠了吧

17:39.020 --> 17:40.260
横杠写写太不方便了

17:40.900 --> 17:41.740
不用用横杠了

17:42.740 --> 17:44.340
太不方便了

17:44.340 --> 17:46.340
我们就这里还是用styles

17:47.340 --> 17:48.540
beauty

17:49.140 --> 17:49.740
button

17:50.340 --> 17:50.940
ok

17:51.940 --> 17:52.220
好

17:52.220 --> 17:52.940
这样子刷新

17:53.540 --> 17:53.820
好了

17:53.820 --> 17:55.140
那么现在刻不端这里面

17:55.140 --> 17:56.340
得到这个结果了

17:56.340 --> 17:56.660
对吧

17:56.660 --> 17:58.140
服务器那边你看一下

17:58.340 --> 17:59.740
服务器那边我们打印出来了

18:01.140 --> 18:01.740
刷新

18:04.540 --> 18:06.220
你看服务器端是不是也有

18:06.220 --> 18:06.500
对吧

18:06.500 --> 18:07.260
服务器端也有

18:07.460 --> 18:08.460
也有这个结果

18:08.460 --> 18:09.740
那么两个结果你对比一下

18:09.740 --> 18:11.340
是不是服务器跟刻不端是一样的

18:11.540 --> 18:13.020
那么现在我们来看一下元旦

18:13.660 --> 18:14.420
看一下元旦吧

18:14.420 --> 18:15.180
元旦吧里边

18:15.180 --> 18:16.900
button里边是不是就有一个class了

18:17.260 --> 18:17.460
好

18:17.460 --> 18:18.780
咱们一个来分析

18:18.780 --> 18:19.940
一个一个来分析

18:20.260 --> 18:21.700
首先服务器端

18:22.220 --> 18:23.420
服务器端打包

18:23.540 --> 18:24.340
打包的时候

18:24.340 --> 18:25.420
它不生成文件

18:26.220 --> 18:27.500
它是不生成文件的

18:27.740 --> 18:29.260
它只是把我们css

18:29.260 --> 18:32.740
loader里边的转换的内样式

18:33.340 --> 18:34.340
给我们拨出来

18:34.340 --> 18:34.980
扔出来

18:34.980 --> 18:36.340
然后提供了一些自己的方法

18:36.340 --> 18:37.780
这些自己的方法我们都不用

18:38.020 --> 18:39.860
所以说我们在服务器端打包

18:39.860 --> 18:41.140
根据入口文件打包

18:41.140 --> 18:41.980
因这个时候

18:41.980 --> 18:44.740
你找找找依赖就找到这了

18:45.540 --> 18:46.860
因为这个home是功用的

18:47.060 --> 18:48.780
服务器跟刻不端都要用的

18:48.900 --> 18:49.980
那么这个也找到这

18:49.980 --> 18:50.820
找到这的话

18:50.820 --> 18:52.140
一看也这里有依赖

18:52.140 --> 18:53.460
那么服务器端一看这个依赖

18:53.460 --> 18:54.140
也打印出来

18:54.140 --> 18:54.980
是不是就这个东西

18:55.620 --> 18:56.620
下面的这个几个方法

18:56.620 --> 18:57.460
我们都用不到

18:57.460 --> 18:58.180
是不是这个东西

18:58.180 --> 18:59.100
这个东西就出来了

18:59.620 --> 19:02.700
因此我们把拿到这个class name的时候

19:02.700 --> 19:05.380
服务端它就仅仅是把这个样式

19:05.380 --> 19:06.460
给它复制过去

19:07.300 --> 19:09.020
然后刻不端这边

19:09.020 --> 19:10.620
我们来看刻不端是不一样的

19:10.700 --> 19:12.860
一样的是你能够拿到这个那样式

19:13.060 --> 19:14.860
但是刻不端还有个额外的事情

19:14.860 --> 19:15.700
刻不端还要做什么

19:15.700 --> 19:18.100
还要把他这个CSS生成到这

19:18.100 --> 19:20.300
生成到这个CSS文件夹下面

19:20.500 --> 19:22.460
那为什么我们现在样式还看不到了

19:22.460 --> 19:23.540
这不是那样式已经出来了吗

19:23.540 --> 19:24.300
还看不到了

19:24.420 --> 19:26.820
是因为我们目前整个页面里边

19:26.820 --> 19:28.060
有没有引用这个那样式

19:28.060 --> 19:30.060
有没有引用这个CSS文件

19:30.340 --> 19:32.180
就是刻不端生成这个CSS文件

19:32.180 --> 19:34.980
服务端在响应这个atm结果的时候

19:34.980 --> 19:36.060
是不是还没有引用

19:36.060 --> 19:37.420
还没有引用这个link文件

19:37.420 --> 19:38.380
link元素

19:38.420 --> 19:39.700
所以说我们现在到了第二步

19:40.140 --> 19:41.020
到了第二步

19:42.140 --> 19:42.540
好

19:42.540 --> 19:45.060
那么这一步跟介石就是一样的了

19:45.060 --> 19:46.460
我们之前写过这么一个介石

19:46.460 --> 19:46.940
对吧

19:47.300 --> 19:49.020
生成一个scripps元素

19:49.020 --> 19:51.820
那么现在我们生成一个link元素一样的

19:52.020 --> 19:53.100
我们这里看一下

19:53.220 --> 19:54.940
get links

19:57.450 --> 19:58.930
link稍微感一下就行了

19:59.810 --> 20:03.410
首先我们读的目录是CSS文件夹

20:03.730 --> 20:04.690
是读的这个目录

20:04.970 --> 20:08.170
然后我们找到CSS文件

20:09.130 --> 20:11.530
然后我们生成一个就是link元素

20:11.530 --> 20:12.210
link

20:14.140 --> 20:14.620
小小的

20:14.860 --> 20:15.260
link

20:16.020 --> 20:18.340
我们的链接地址是

20:18.700 --> 20:21.220
CSS下面的file

20:23.060 --> 20:24.100
这是我们之前写过的

20:24.100 --> 20:24.900
不再重复了

20:25.460 --> 20:25.620
好

20:25.620 --> 20:28.140
这样子我们就生成了一个link元素了

20:28.140 --> 20:28.580
对吧

20:28.580 --> 20:29.060
好

20:29.580 --> 20:30.580
我们把这个

20:31.140 --> 20:32.820
在这个就是index里边

20:32.820 --> 20:34.100
在这个render里边

20:34.100 --> 20:36.420
我们这里在这个位置生成link元素

20:36.660 --> 20:37.060
好

20:39.360 --> 20:40.120
导入

20:40.800 --> 20:41.560
import

20:41.920 --> 20:43.000
get links

20:43.560 --> 20:44.000
from

20:44.640 --> 20:45.560
get links

20:47.000 --> 20:47.920
在这里导入

20:48.800 --> 20:48.960
好

20:48.960 --> 20:50.960
这样子我们请求的时候

20:50.960 --> 20:53.080
服务器就会把link放到这个位置

20:53.080 --> 20:54.680
那么我们的页面上的也刷新

20:54.680 --> 20:55.080
你看

20:55.560 --> 20:56.160
哎我这

20:59.420 --> 20:59.900
没问题的

20:59.900 --> 21:00.580
没问题的

21:02.300 --> 21:03.020
这里刷新

21:04.060 --> 21:04.540
刷新

21:06.100 --> 21:07.100
哦这里改

21:07.420 --> 21:09.260
这里为什么没有重新打包呢

21:09.660 --> 21:10.740
应该是重新打包啊

21:10.740 --> 21:11.700
我这里改动了

21:11.860 --> 21:12.700
代码改动了

21:12.900 --> 21:13.980
应该要重新打包

21:16.390 --> 21:17.230
我看一下啊

21:17.510 --> 21:18.710
这里保存一次

21:19.310 --> 21:20.390
没有重新打包呢

21:20.390 --> 21:22.230
我看一下拍个节省文件

21:23.790 --> 21:25.550
呃这个bio的server

21:28.100 --> 21:28.820
vpeg

21:29.420 --> 21:30.980
server.js

21:31.580 --> 21:32.340
没问题啊

21:33.540 --> 21:34.100
war sheet

21:34.100 --> 21:35.420
war sheet都是开起来的

21:35.420 --> 21:36.700
都是开起来war sheet的

21:37.500 --> 21:38.700
没有重新打包

21:38.700 --> 21:39.740
哎这个起的怪了

21:39.740 --> 21:40.380
那里

21:40.860 --> 21:41.700
那里出问题了

21:41.700 --> 21:42.780
卡住了刚才啊

21:42.780 --> 21:43.580
应该是卡住了

21:43.580 --> 21:43.740
好

21:43.740 --> 21:44.660
这里重新打包了

21:44.660 --> 21:45.420
好刷新

21:46.340 --> 21:46.580
好

21:46.580 --> 21:47.660
你看刷新

21:47.940 --> 21:48.500
那么这里呢

21:48.500 --> 21:49.820
是不是link就出来了

21:49.820 --> 21:50.780
得多了一个这个东西

21:50.780 --> 21:51.180
是吧

21:51.180 --> 21:51.980
多了一个这个东西

21:51.980 --> 21:52.740
我们把去掉

21:53.660 --> 21:54.380
给是links

21:54.380 --> 21:55.420
把这个东西去掉

21:57.940 --> 21:58.180
好

21:58.180 --> 21:58.940
这个东西去掉

21:58.940 --> 22:00.100
ok保存

22:00.780 --> 22:02.140
好这里呢刷新

22:03.180 --> 22:04.540
哎他又没有重新打包

22:04.540 --> 22:06.580
哎这个地方出什么情况

22:07.140 --> 22:07.860
好刷新

22:07.860 --> 22:08.220
好

22:08.220 --> 22:09.500
那么这个link是不是出来了

22:09.500 --> 22:10.260
好这里呢

22:10.260 --> 22:10.940
我们刷新

22:10.940 --> 22:11.460
你看

22:11.460 --> 22:12.100
是不是

22:12.620 --> 22:13.700
整个样式就出来了

22:13.780 --> 22:15.100
我们来看一下整个样式

22:15.100 --> 22:15.740
我们这里呢

22:15.740 --> 22:17.300
链接到了这个css文件

22:17.300 --> 22:18.060
css文件

22:18.060 --> 22:19.620
我们看一下这个css文件啊

22:19.620 --> 22:21.100
呃css

22:21.860 --> 22:22.580
啊你看

22:22.580 --> 22:23.420
是不是body

22:23.420 --> 22:24.500
全具样式也有了

22:24.500 --> 22:25.780
我们自己的内样式啊

22:25.780 --> 22:26.620
好本都有了

22:26.620 --> 22:27.140
对吧

22:27.140 --> 22:27.460
ok

22:27.460 --> 22:28.420
那么就现在就出来了

22:28.420 --> 22:28.540
啊

22:28.540 --> 22:29.180
这个效果

22:29.180 --> 22:31.620
而且这就是样式的处理啊

22:32.100 --> 22:34.300
呃这里边可能要绕一个圈啊

22:34.300 --> 22:35.020
这个绕几个圈

22:35.020 --> 22:35.740
其实整体呢

22:35.740 --> 22:36.580
是比较简单的

22:36.580 --> 22:37.500
整体就是

22:37.780 --> 22:38.660
只要你

22:38.660 --> 22:40.060
利用客户端去

22:40.060 --> 22:41.940
利用客户端这个webpack啊

22:41.940 --> 22:43.220
去生成这个

22:43.260 --> 22:45.460
按照依赖去生成这个css文件

22:46.100 --> 22:46.580
然后呢

22:46.580 --> 22:48.300
服务端在响应的时候呢

22:48.300 --> 22:49.940
去引用这个css文件

22:50.420 --> 22:51.700
为了避免服务器端

22:51.700 --> 22:53.420
那个内样式跟客户端不一致

22:53.420 --> 22:56.020
所以说服务端也要开启cssloader啊

22:56.260 --> 22:58.260
保证了这个生成的内样式呢

22:58.260 --> 22:59.780
跟客户端是一致的

22:59.780 --> 23:01.420
然后只要只要这三点保证

23:01.420 --> 23:02.860
呃就是你搞定了

23:02.860 --> 23:04.420
那么这个样式处理就完事了

23:04.420 --> 23:05.180
那就结束了

23:05.540 --> 23:05.740
好

23:05.740 --> 23:07.500
这是关于样式处理这一块

23:07.500 --> 23:08.660
所以说咱们这个课啊

23:08.940 --> 23:10.100
呃sr这个课呢

23:10.100 --> 23:11.300
是一个极大称者

23:11.420 --> 23:12.420
你前面的东西呢

23:12.420 --> 23:13.340
掌握了人劳工了

23:13.340 --> 23:14.500
其实没有什么新知识啊

23:14.500 --> 23:16.140
这东西你们具体想想办法呢

23:16.140 --> 23:16.900
相信有些同学呢

23:16.900 --> 23:18.580
也能够想到怎么来处理

23:18.740 --> 23:22.020
呃呃呃就是对前面知识的应用

23:22.300 --> 23:22.740
好

23:22.820 --> 23:24.420
那么这是这一块的知识

