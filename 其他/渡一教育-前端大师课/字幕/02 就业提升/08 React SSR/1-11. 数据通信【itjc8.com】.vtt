WEBVTT

00:00.820 --> 00:02.820
好 我们接着上节课来做

00:02.820 --> 00:05.820
上节课咱们来建立了这么一个仓库

00:05.820 --> 00:07.820
仓库里边也加了一些东西

00:07.820 --> 00:09.820
你会发现了这些仓库里边的东西

00:09.820 --> 00:12.820
跟服务端和客户端是没有什么关系的

00:12.820 --> 00:15.820
因为我们仓库的本身就是跨平台的

00:15.820 --> 00:17.820
只不过有一个小的细节

00:17.820 --> 00:19.820
就是为了在浏览器里边好调试

00:19.820 --> 00:23.820
所以说我们在客户端这一块加上这么一句话

00:23.820 --> 00:26.820
OK 那么这是仓库这里边的东西

00:26.820 --> 00:29.820
当然这个判断是不是浏览器

00:29.820 --> 00:32.820
有很多种方式 比方说你还可以用这种方式来判断

00:32.820 --> 00:36.820
Type Window 是不是不等于On Define

00:36.820 --> 00:38.820
这种东西你可以判断

00:38.820 --> 00:40.820
有很多种方式你甚至可以把它写成一个单独的模块

00:40.820 --> 00:42.820
来帮助你进行判断

00:42.820 --> 00:45.820
OK 那么这里我们搞定了上节课这件事

00:45.820 --> 00:46.820
我们继续来写仓库

00:46.820 --> 00:49.820
这些东西基本上跟SSR

00:49.820 --> 00:51.820
还是没有直接的关系

00:51.820 --> 00:53.820
我们只是做一些准备

00:53.820 --> 00:56.820
仓库这里边我们目前还没有设计到一些副作用

00:56.820 --> 00:59.820
就是我们的Action里边都是一些简洁的Action

00:59.820 --> 01:02.820
你看 这些东西都是简洁的Action

01:02.820 --> 01:04.820
都没有设计到副作用

01:04.820 --> 01:06.820
那我们如果说要副作用怎么办呢

01:06.820 --> 01:09.820
比方说我们要Rx请求 马上就来做

01:09.820 --> 01:11.820
那怎么来办呢

01:11.820 --> 01:16.820
这个时候我们就可以利用一些Redux的插件

01:16.820 --> 01:18.820
那么用什么插件呢

01:18.820 --> 01:20.820
也可以用Sunk 可以用Promise

01:20.820 --> 01:22.820
也可以用Sock都是可以的

01:22.820 --> 01:23.820
那么这里呢我们就简单一点

01:23.820 --> 01:25.820
比方说用一个

01:27.820 --> 01:30.820
比方说用Sunk

01:30.820 --> 01:33.820
ReduxSunk

01:33.820 --> 01:34.820
安装一下

01:34.820 --> 01:37.190
好 安装

01:37.190 --> 01:39.190
然后我们在Action里边

01:39.190 --> 01:41.190
我们先准备一些Service

01:41.190 --> 01:44.190
就先准备一些Rx请求的一些方法

01:44.190 --> 01:46.190
好 咱们这里先建个文件甲

01:46.190 --> 01:48.190
给它写个Services

01:48.190 --> 01:51.190
好 这个文件甲里边我们建立这么一个文件

01:51.190 --> 01:53.190
比方说跟电影相关的

01:54.190 --> 01:56.190
或许电影数据的

01:56.190 --> 01:58.190
MovieService

01:58.190 --> 01:59.190
叫JS

01:59.190 --> 02:02.190
那么在这里边我们导出一些

02:02.190 --> 02:03.190
请求电影相关的

02:03.190 --> 02:04.190
比方说我们这里有什么呢

02:04.190 --> 02:06.190
有一个API 有什么一个接口

02:06.190 --> 02:09.500
我们来给大家看一下吧

02:09.500 --> 02:13.260
访问这个例子

02:13.260 --> 02:15.260
你看 是不是就拿到了电影数据了

02:15.260 --> 02:17.260
对吧 我们来检查一下

02:18.260 --> 02:19.260
Let's Work

02:19.260 --> 02:21.260
检查一下

02:21.260 --> 02:22.260
好 你看到

02:22.260 --> 02:24.260
这里我们也拿到了

02:24.260 --> 02:26.260
这两个东西表示没有错误

02:26.260 --> 02:27.260
这是错误消息

02:27.260 --> 02:28.260
然后这个是总数

02:28.260 --> 02:31.260
这个是当前的电影数据

02:31.260 --> 02:32.260
我返回了十条数据

02:32.260 --> 02:33.260
这是个分业的

02:33.260 --> 02:35.260
不过我们要做的事情

02:35.260 --> 02:37.260
跟分业没有什么关系

02:37.260 --> 02:39.260
我们就这里不管分业了

02:39.260 --> 02:41.260
OK 那么这里我们就搞定了

02:41.260 --> 02:43.260
搞定了之后

02:43.260 --> 02:46.260
咱们来写上这么一个Service

02:46.260 --> 02:48.260
这个Service我们要请求

02:48.260 --> 02:50.260
我们就可以利用一个Action

02:50.260 --> 02:51.260
为什么大家说

02:51.260 --> 02:53.260
为什么不用费起API要用Action

02:53.260 --> 02:54.260
是因为这样子

02:54.260 --> 02:56.260
因为我们这个请求

02:56.260 --> 02:59.260
将来可能在服务端也会去请求

02:59.260 --> 03:01.260
现在我们的结构

03:01.260 --> 03:03.260
大概要乘之为这么个样子

03:03.260 --> 03:05.260
虽然我们这几刻还不会设计

03:05.260 --> 03:08.260
我们先这里写上一个PPD

03:08.260 --> 03:10.260
大家看一下

03:10.260 --> 03:12.260
目前我们是这样子

03:12.260 --> 03:14.260
我们这里是不是有个服务器

03:14.260 --> 03:15.260
有个服务器

03:15.260 --> 03:17.260
就是我们的SSR服务器

03:17.260 --> 03:19.260
Express

03:19.260 --> 03:21.260
Express

03:21.260 --> 03:23.260
SSR

03:23.260 --> 03:24.260
我们的服务器端

03:24.260 --> 03:25.260
是不是这样子

03:25.260 --> 03:27.260
在哪里

03:27.260 --> 03:28.260
Service

03:28.260 --> 03:30.260
这里是不是一个Express服务器

03:30.260 --> 03:32.260
那么这个服务器

03:32.260 --> 03:34.260
主要来渲染页面的

03:34.260 --> 03:35.260
主要是来渲染页面的

03:35.260 --> 03:37.260
我们把它叫做前端服务器

03:37.260 --> 03:39.260
或者叫中间层

03:39.260 --> 03:42.580
前端服务器

03:42.580 --> 03:44.580
或者叫中间层

03:44.580 --> 03:46.580
它来干嘛呢

03:46.580 --> 03:48.580
它主要是来提供页面的

03:48.580 --> 03:49.580
帮你进行服务端渲染

03:49.580 --> 03:51.580
然后给你一些静态资源

03:51.580 --> 03:52.580
我们要静态资源

03:52.580 --> 03:54.580
就在Public目录下面的静态资源

03:54.580 --> 03:55.580
对吧

03:55.580 --> 03:56.580
在这里边的静态资源

03:56.580 --> 03:57.580
给你提供

03:57.580 --> 03:59.580
那么我们的浏览器在哪呢

03:59.580 --> 04:00.580
我们浏览器是

04:00.580 --> 04:02.580
访问的是前端服务器

04:03.580 --> 04:05.580
这里

04:05.580 --> 04:07.580
这是浏览器

04:07.580 --> 04:10.580
浏览器它访问的是前端服务器

04:10.580 --> 04:12.580
它跟前端服务器进行交互

04:14.580 --> 04:17.580
我们这里写上一个箭头

04:17.580 --> 04:19.580
画上箭头

04:19.580 --> 04:21.580
应该是个双向箭头

04:21.580 --> 04:23.580
这是跟前端服务器进行交互

04:23.580 --> 04:25.580
而我们现在还有一个服务器

04:25.580 --> 04:27.580
就是我们的数据服务器

04:27.580 --> 04:29.580
数据服务器

04:29.580 --> 04:31.580
那么这个东西技术是什么呢

04:31.580 --> 04:32.580
可能是java

04:32.580 --> 04:33.580
可能是java

04:33.580 --> 04:34.580
可能是别的东西

04:34.580 --> 04:35.580
可能是cjava

04:35.580 --> 04:36.580
就是一些传统的服务器

04:36.580 --> 04:38.580
当然也可以用漏的解释来说

04:38.580 --> 04:40.580
那么这是数据服务器

04:40.580 --> 04:42.580
那么这才是一个典型的

04:42.580 --> 04:43.580
前后端分离模式

04:43.580 --> 04:45.580
数据服务器

04:45.580 --> 04:46.580
那么这个数据服务器

04:46.580 --> 04:47.580
跟浏览器的一些都没关系了

04:47.580 --> 04:48.580
它就是提供一些接口

04:48.580 --> 04:49.580
比方我们刚才看到的

04:49.580 --> 04:50.580
访问这个地址

04:50.580 --> 04:52.580
那么访问的就是数据服务器

04:52.580 --> 04:54.580
咱们现在形成的模式

04:54.580 --> 04:56.580
是我们前端服务器

04:56.580 --> 04:58.580
这里

04:58.580 --> 05:02.720
咱们的前端服务器

05:02.720 --> 05:04.720
要跟我们的数据服务器进行交互

05:06.720 --> 05:09.720
是由前端服务器和数据服务器交互的

05:09.720 --> 05:10.720
明白了意思吗

05:10.720 --> 05:12.720
那么现在我们这里

05:12.720 --> 05:14.720
要写上一个x

05:14.720 --> 05:16.720
为什么要用x小事呢

05:16.720 --> 05:19.720
因为我们真正的去请求数据服务器

05:19.720 --> 05:20.720
是谁在请求

05:20.720 --> 05:23.720
是前端服务器在请求

05:23.720 --> 05:24.720
明白了意思吗

05:24.720 --> 05:26.720
不是浏览器直接请求数据服务器

05:26.720 --> 05:28.720
是前端服务器在请求

05:28.720 --> 05:29.720
所以说

05:29.720 --> 05:31.720
要在服务器端发送请求的话

05:31.720 --> 05:33.720
就跟阿加克斯这些东西

05:33.720 --> 05:34.720
就没有什么关系了

05:34.720 --> 05:35.720
就属于什么

05:35.720 --> 05:38.720
就属于是纯粹的AGB请求了

05:38.720 --> 05:39.720
那么这个东西

05:39.720 --> 05:40.720
我们要用x小事

05:40.720 --> 05:41.720
因为飞起的API

05:41.720 --> 05:42.720
它是浏览器端的

05:42.720 --> 05:43.720
我们现在不是在浏览器端

05:43.720 --> 05:44.720
直接发送请求

05:44.720 --> 05:46.720
而是在前端服务器发送请求

05:46.720 --> 05:47.720
好

05:47.720 --> 05:48.720
所以说我们这里

05:48.720 --> 05:51.720
要真正的去请求我们的这个东西

05:51.720 --> 05:52.720
这个玩意

05:52.720 --> 05:55.720
那么我们应该使用x小事

05:55.720 --> 05:57.720
x小事安装一下

05:57.720 --> 05:59.720
那么接下来我们继续思考

05:59.720 --> 06:00.720
我们先把这个请求搞定

06:00.720 --> 06:02.720
这个东西还是有点少的

06:02.720 --> 06:04.720
那如果说我们要发送

06:04.720 --> 06:05.720
因为我们浏览器里边

06:05.720 --> 06:06.720
要宣传数据

06:06.720 --> 06:07.720
有可能到时候

06:07.720 --> 06:08.720
要触发一些x

06:08.720 --> 06:09.720
要宣传数据

06:09.720 --> 06:12.720
那么他肯定要发送阿加克斯请求的

06:12.720 --> 06:14.720
那他发送阿加克斯请求

06:14.720 --> 06:15.720
他能不能直接请求

06:15.720 --> 06:17.720
我们的数据服务器

06:17.720 --> 06:19.720
通常来说是不行的

06:19.720 --> 06:21.720
尽管我这个数据服务器

06:21.720 --> 06:22.720
我是给你做了跨域

06:22.720 --> 06:23.720
但是实际上

06:23.720 --> 06:24.720
你们将来在公司里边

06:24.720 --> 06:26.720
是不允许你这样做的

06:26.720 --> 06:28.720
他是不允许你跨域的

06:28.720 --> 06:30.720
而且这个数据服务器

06:30.720 --> 06:32.720
很有可能他都不是公开的

06:32.720 --> 06:34.720
他没给你公开出来

06:34.720 --> 06:36.720
他只是放到了

06:36.720 --> 06:37.720
就是服务器的内部

06:37.720 --> 06:39.720
内部就是比方说

06:39.720 --> 06:41.720
就是这两个东西放到

06:41.720 --> 06:42.720
一台服务器上

06:42.720 --> 06:44.720
那么他们之间可以相互请求

06:44.720 --> 06:45.720
有可能会出现这种情况

06:45.720 --> 06:46.720
所以说呢

06:46.720 --> 06:47.720
当然小公司会出现

06:47.720 --> 06:48.720
大公司还是分离的

06:48.720 --> 06:50.720
总之他是内部允许访问

06:50.720 --> 06:52.720
外部是不允许访问的

06:52.720 --> 06:53.720
所以浏览器你直接去访问

06:53.720 --> 06:54.720
他是肯定不行的

06:54.720 --> 06:55.720
那怎么办呢

06:55.720 --> 06:56.720
那怎么办

06:56.720 --> 06:58.720
那么我们这里叫做代理的

06:58.720 --> 06:59.720
我们浏览器请求谁

06:59.720 --> 07:01.720
请求我们的前端服务器

07:01.720 --> 07:03.720
请求我们这一块的服务器

07:03.720 --> 07:05.720
而我们这一块的服务器

07:05.720 --> 07:06.720
再把它代理出去

07:06.720 --> 07:07.720
请求数据服务器

07:07.720 --> 07:09.720
然后把数据服务器拿到东西

07:09.720 --> 07:10.720
返回过来

07:10.720 --> 07:12.720
然后再交给浏览器

07:12.720 --> 07:13.720
给浏览器的感觉是什么

07:13.720 --> 07:14.720
我请求的是他

07:14.720 --> 07:16.720
能得到的结果是他的结果

07:16.720 --> 07:17.720
但是浏览器不知道是他的结果

07:17.720 --> 07:18.720
浏览器就是知道

07:18.720 --> 07:19.720
我请求他

07:19.720 --> 07:20.720
他就给了我一个结果

07:20.720 --> 07:22.720
实际上具体的过程是他

07:22.720 --> 07:24.720
去帮你做了转发

07:24.720 --> 07:25.720
来去请求他

07:25.720 --> 07:26.720
然后拿到浏览器

07:26.720 --> 07:27.720
因此这里呢

07:27.720 --> 07:28.720
我们用两点需要考虑

07:28.720 --> 07:29.720
重点来了

07:31.720 --> 07:32.720
我们用两个点需要考虑

07:32.720 --> 07:34.720
也就是说我们这个请求

07:34.720 --> 07:36.720
在浏览器端

07:36.720 --> 07:37.720
浏览器端

07:37.720 --> 07:39.720
请求的是什么

07:39.720 --> 07:41.720
是前端服务器

07:41.720 --> 07:42.720
有中间层

07:44.720 --> 07:46.720
然后中间层代理

07:47.720 --> 07:48.720
就是转发

07:48.720 --> 07:49.720
转发请求

07:49.720 --> 07:51.720
这是浏览器端请求的

07:51.720 --> 07:52.720
第二呢

07:53.720 --> 07:54.720
第二是这样子

07:54.720 --> 07:57.720
第二呢就是我们的服务器端

07:57.720 --> 07:58.720
我们的服务器端

07:58.720 --> 08:00.720
他也有可能直接请求

08:00.720 --> 08:01.720
这个数据服务器

08:01.720 --> 08:03.720
就是浏览器没有请求他

08:03.720 --> 08:04.720
他也可能直接去请求他

08:04.720 --> 08:05.720
为什么

08:05.720 --> 08:06.720
我们要做预讯的

08:06.720 --> 08:07.720
什么意思呢

08:07.720 --> 08:08.720
就是说我们浏览器

08:08.720 --> 08:10.720
不是SSR服务器吗

08:10.720 --> 08:12.720
我们要发送给他一个页面

08:12.720 --> 08:13.720
那个页面上比方有个电影列表

08:13.720 --> 08:15.720
那电影里面的数据是啥呢

08:15.720 --> 08:16.720
我们服务器

08:16.720 --> 08:17.720
是不是在发送页面之前

08:17.720 --> 08:19.720
先要去从这里拿数据

08:19.720 --> 08:21.720
拿到数据过后再把电影列表填充

08:21.720 --> 08:23.720
再把整个完整的页面发给浏览器

08:23.720 --> 08:25.720
虽然说我们这节课不涉及

08:25.720 --> 08:26.720
但是呢

08:26.720 --> 08:28.720
我们要把这个结构先做好

08:28.720 --> 08:30.720
就说我们的请求有两个层面

08:30.720 --> 08:32.720
一个是服务器端

08:32.720 --> 08:34.720
请求

08:34.720 --> 08:36.720
直接请求

08:36.720 --> 08:37.720
他不是转发

08:37.720 --> 08:38.720
是直接请求

08:38.720 --> 08:41.720
那个数据服务器

08:41.720 --> 08:45.100
所以说有这么两种情况

08:45.100 --> 08:47.100
而这两种情况肯定是有差异的

08:47.100 --> 08:48.100
肯定是有差异的

08:48.100 --> 08:50.100
那咱们来看一下

08:50.100 --> 08:51.100
那么我们这里安装好了

08:51.100 --> 08:53.100
一个小时之后

08:53.100 --> 08:54.100
我们在这里surface

08:54.100 --> 08:55.100
先搞定surface

08:55.100 --> 08:56.100
我们先把surface搞定

08:56.100 --> 08:57.100
再去搞定这个

08:57.100 --> 08:59.100
再去搞定这个store

08:59.100 --> 09:00.100
surface里面

09:00.100 --> 09:02.100
我们

09:02.100 --> 09:03.100
那么这边

09:03.100 --> 09:05.100
我们导出一个函数

09:05.100 --> 09:07.100
导出这么一个函数

09:07.100 --> 09:09.100
然后就是

09:09.100 --> 09:10.100
getmovies

09:10.100 --> 09:12.100
给我传一个page

09:12.100 --> 09:14.100
给我传一个limit

09:14.100 --> 09:15.100
把这个两个传给我

09:15.100 --> 09:17.100
给它摸论值

09:17.100 --> 09:18.100
然后这边要发送请求

09:18.100 --> 09:20.100
那我们怎么请求呢

09:20.100 --> 09:22.100
你看我们这里写的时候

09:22.100 --> 09:24.100
我们肯定导入exus

09:24.100 --> 09:26.100
他们导入exus

09:26.100 --> 09:28.100
fromexus

09:28.100 --> 09:30.100
这里我们按照以往的写法

09:30.100 --> 09:31.100
是怎么写

09:31.100 --> 09:33.100
我们把这个做成一部还说

09:33.100 --> 09:34.100
exus

09:34.100 --> 09:35.100
请求

09:35.100 --> 09:37.100
跟服务器和客户团没关系的

09:37.100 --> 09:38.100
那么请求get

09:38.100 --> 09:39.100
哪个地址呢

09:39.100 --> 09:41.100
写缸API

09:41.100 --> 09:42.100
请求的是哪

09:42.100 --> 09:43.100
请求我们的数据服务器

09:43.100 --> 09:45.100
请求的是我们的数据服务器

09:45.100 --> 09:47.100
API movie

09:47.100 --> 09:50.100
那么钱序写不写呢

09:50.100 --> 09:52.100
钱序写不写

09:52.100 --> 09:53.100
原来这么说

09:53.100 --> 09:54.100
钱序写

09:54.100 --> 09:55.100
写的话

09:55.100 --> 09:56.100
那么这个钱序

09:56.100 --> 09:58.100
怎么写才好了

09:58.100 --> 09:59.100
你会发现怎么写都不好

09:59.100 --> 10:01.100
遥遥你怎么写呢

10:01.100 --> 10:02.100
你原来这么说

10:02.100 --> 10:04.100
这样子写

10:04.100 --> 10:06.100
麻烦来了

10:06.100 --> 10:07.100
为什么麻烦来了

10:07.100 --> 10:08.100
因为我们这个方法

10:08.100 --> 10:10.100
我们刚才说了

10:10.100 --> 10:12.100
服务器是不是可以直接去请求

10:12.100 --> 10:13.100
浏览器呢

10:13.100 --> 10:14.100
也可以去

10:14.100 --> 10:15.100
也可以请求

10:15.100 --> 10:17.100
都要用同一个方法去请求的

10:17.100 --> 10:19.100
而浏览器请求的时候

10:19.100 --> 10:21.100
请求的是我们前端服务器

10:21.100 --> 10:23.100
而不是我们直接请求这个服务器

10:23.100 --> 10:24.100
不是这个服务器

10:24.100 --> 10:25.100
对吧

10:25.100 --> 10:27.100
只有服务器请求的时候

10:27.100 --> 10:28.100
只有服务器请求的时候

10:28.100 --> 10:30.100
才是我们的这个地址

10:30.100 --> 10:32.100
而浏览器请求的是一个代理

10:32.100 --> 10:35.100
是一个前端服务器的中间层

10:36.100 --> 10:38.100
中间层服务器

10:38.100 --> 10:39.100
所以说呢

10:39.100 --> 10:41.100
这个东西是不是跟浏览器和服务器有关系

10:41.100 --> 10:42.100
他们不一样的

10:42.100 --> 10:43.100
对吧

10:43.100 --> 10:44.100
那有些人说不写

10:44.100 --> 10:45.100
不写的话

10:45.100 --> 10:46.100
有些人说

10:46.100 --> 10:47.100
配置钱序对吧

10:47.100 --> 10:49.100
一个小时可以配置钱序的

10:49.100 --> 10:50.100
那么这个钱序

10:50.100 --> 10:51.100
是不是也有区别

10:51.100 --> 10:52.100
对吧

10:52.100 --> 10:53.100
是不是也有区别

10:53.100 --> 10:54.100
所以说呢

10:54.100 --> 10:55.100
这个地方呢

10:55.100 --> 10:56.100
那么就要处理了

10:56.100 --> 10:57.100
怎么处理呢

10:57.100 --> 10:58.100
我们就可以单独来开一个库

10:58.100 --> 10:59.100
开一个模块

10:59.100 --> 11:01.100
给它写成一个request

11:01.100 --> 11:02.100
叫js

11:03.100 --> 11:04.100
那么这个块呢

11:04.100 --> 11:05.100
是这样子

11:05.100 --> 11:07.100
那么这个request.js

11:07.100 --> 11:08.100
这一块啊

11:09.100 --> 11:10.100
我们就这里呢

11:10.100 --> 11:12.100
导出一个x小时的实力

11:12.100 --> 11:14.100
我们导出x小时

11:14.100 --> 11:15.100
因为我知道x小时

11:15.100 --> 11:16.100
你们都学过

11:16.100 --> 11:17.100
它里边呢

11:17.100 --> 11:18.100
是可以有一个方法

11:18.100 --> 11:19.100
叫create

11:19.100 --> 11:21.100
创建一个x小时实力

11:21.100 --> 11:23.100
那么这个创建实力的时候呢

11:23.100 --> 11:24.100
我们就可以根据

11:24.100 --> 11:25.100
不同的情况

11:25.100 --> 11:26.100
来进行创建

11:27.100 --> 11:28.100
啥意思呢

11:28.100 --> 11:29.100
就说我们这里呢

11:29.100 --> 11:30.100
可以这样子

11:30.100 --> 11:31.100
create

11:32.100 --> 11:33.100
这里边呢

11:33.100 --> 11:35.100
我们写上一个

11:35.100 --> 11:36.100
baseuil

11:36.100 --> 11:37.100
就基础的路径

11:37.100 --> 11:39.100
就是你这后边写

11:39.100 --> 11:40.100
后边我们去使用

11:40.100 --> 11:41.100
这个实力的时候

11:41.100 --> 11:44.470
它会返回一个实力

11:44.470 --> 11:45.470
那么我们最后呢

11:45.470 --> 11:46.470
把这个实力导出

11:46.470 --> 11:47.470
就说到时候呢

11:47.470 --> 11:49.470
我们去请求的时候呢

11:49.470 --> 11:50.470
要用什么请求

11:50.470 --> 11:51.470
要用这个instance

11:51.470 --> 11:53.470
要用这个实力来请求

11:53.470 --> 11:54.470
所以说我们到时候呢

11:54.470 --> 11:56.470
导入了就是request

11:57.470 --> 11:58.470
request

11:58.470 --> 11:59.470
那么这里呢

11:59.470 --> 12:00.470
我们使用的是request

12:00.470 --> 12:01.470
请求

12:01.470 --> 12:02.470
那么用它去请求的时候呢

12:02.470 --> 12:04.470
因为它本身就配置

12:04.470 --> 12:05.470
创建好的实力

12:05.470 --> 12:06.470
那么这个实力里边

12:06.470 --> 12:07.470
已经配置了uil

12:07.470 --> 12:08.470
对吧

12:08.470 --> 12:09.470
好那么这个uil

12:09.470 --> 12:10.470
怎么写呢

12:10.470 --> 12:11.470
怎么写呢

12:11.470 --> 12:12.470
是不是我们

12:12.470 --> 12:13.470
同样的要判断

12:13.470 --> 12:14.470
浏览器和服务器

12:14.470 --> 12:15.470
不一样的

12:15.470 --> 12:16.470
不一样的

12:16.470 --> 12:17.470
判断一下

12:17.470 --> 12:19.470
如果说你是一个

12:20.470 --> 12:21.470
浏览器

12:22.470 --> 12:24.470
不等于online

12:24.470 --> 12:25.470
online

12:25.470 --> 12:26.470
那么这个是什么

12:26.470 --> 12:27.470
服务器

12:27.470 --> 12:28.470
else 呢

12:28.470 --> 12:30.470
这是浏览器

12:30.470 --> 12:33.470
那么我们服务器和浏览器

12:33.470 --> 12:34.470
create 这里边配置

12:34.470 --> 12:35.470
是不是不一样

12:35.470 --> 12:37.470
那么我们这里写个配置

12:38.470 --> 12:40.470
config 这个配置

12:40.470 --> 12:41.470
那么后边呢

12:41.470 --> 12:43.470
我们就使用这个配置

12:43.470 --> 12:44.470
这个配置呢

12:44.470 --> 12:45.470
服务器端config

12:45.470 --> 12:47.470
bsurl

12:47.470 --> 12:48.470
那么是不是不一样的

12:48.470 --> 12:49.470
它是什么呢

12:49.470 --> 12:51.470
它就是我们的这个服务器

12:51.470 --> 12:53.470
是这个东西

12:54.470 --> 12:56.470
浏览器端config

12:56.470 --> 12:57.470
然后呢

12:57.470 --> 12:58.470
bsurl 它又不一样的

12:58.470 --> 12:59.470
它是我们本机服务器

12:59.470 --> 13:00.470
对吧

13:00.470 --> 13:01.470
本机服务器

13:01.470 --> 13:02.470
甚至我们就可以不写了

13:02.470 --> 13:03.470
因为不写的话

13:03.470 --> 13:04.470
浏览器就是

13:04.470 --> 13:05.470
就是请求的是啥

13:05.470 --> 13:06.470
不写的话就请求的是

13:06.470 --> 13:07.470
本机

13:07.470 --> 13:08.470
对吧

13:08.470 --> 13:09.470
就是本地服务器

13:09.470 --> 13:10.470
就是这个

13:10.470 --> 13:11.470
页面从哪个服务器来的

13:11.470 --> 13:12.470
页面从哪个服务器来的

13:12.470 --> 13:13.470
不就从啥来的吗

13:13.470 --> 13:14.470
对吧

13:14.470 --> 13:15.470
那么在这个页面上请求

13:15.470 --> 13:16.470
就是这个服务器

13:16.470 --> 13:17.470
同样的服务器

13:17.470 --> 13:18.470
所以说

13:18.470 --> 13:19.470
浏览器我们就不要这个bsurl

13:19.470 --> 13:20.470
甚至不要

13:20.470 --> 13:21.470
甚至不要

13:22.470 --> 13:23.470
看明白了吧

13:23.470 --> 13:24.470
OK

13:24.470 --> 13:25.470
那么这样子

13:25.470 --> 13:26.470
instance

13:26.470 --> 13:27.470
来吧

13:27.470 --> 13:28.470
那么现在我们去请求

13:28.470 --> 13:29.470
请求这个地方

13:29.470 --> 13:31.470
然后给他一些参数

13:31.470 --> 13:32.470
参数

13:33.470 --> 13:34.470
params

13:34.470 --> 13:35.470
参数

13:35.470 --> 13:36.470
page

13:37.470 --> 13:38.470
limit

13:38.470 --> 13:39.470
OK

13:40.470 --> 13:41.470
好

13:41.470 --> 13:42.470
那么现在我们去await

13:42.470 --> 13:43.470
得到

13:43.470 --> 13:44.470
得到这个

13:44.470 --> 13:45.470
小音结果

13:45.470 --> 13:46.470
resp

13:47.470 --> 13:48.470
好

13:48.470 --> 13:49.470
最后呢

13:49.470 --> 13:50.470
发挥

13:50.470 --> 13:51.470
resp.data

13:51.470 --> 13:52.470
OK

13:52.470 --> 13:53.470
那么现在我们这个服务方法

13:53.470 --> 13:54.470
就先好了

13:54.470 --> 13:55.470
来试一下

13:55.470 --> 13:56.470
来试一下

13:56.470 --> 13:57.470
看行不行

13:57.470 --> 13:58.470
怎么来试呢

13:58.470 --> 13:59.470
我们这样子

13:59.470 --> 14:00.470
我们在服务器端

14:00.470 --> 14:02.470
随便找个地方吧

14:02.470 --> 14:03.470
来找个地方

14:03.470 --> 14:04.470
来测试一下

14:04.470 --> 14:05.470
测试一下

14:07.470 --> 14:10.420
全导入

14:10.420 --> 14:11.420
from

14:11.420 --> 14:12.420
来自于哪呢

14:12.420 --> 14:14.420
来自于services

14:14.420 --> 14:15.420
对吧

14:17.420 --> 14:18.420
services

14:19.420 --> 14:20.420
movyservices

14:20.420 --> 14:21.420
现在服务器端

14:21.420 --> 14:22.420
直接请求

14:22.420 --> 14:23.420
getmovys

14:23.420 --> 14:24.420
看行不行

14:25.420 --> 14:26.420
这里

14:26.420 --> 14:27.420
getmovys

14:27.420 --> 14:28.420
参数就不写了

14:28.420 --> 14:30.800
z

14:30.800 --> 14:31.800
输出

14:31.800 --> 14:32.800
服务器的小音的结果

14:32.800 --> 14:33.800
然后呢

14:33.800 --> 14:34.800
我们再在客户端

14:34.800 --> 14:35.800
再试一下

14:35.800 --> 14:37.800
客户端这里再试一下

14:37.800 --> 14:38.800
客户端这里

14:38.800 --> 14:39.800
我们就在这里导入

14:39.800 --> 14:41.800
测试一下吧

14:41.800 --> 14:42.800
from

14:42.800 --> 14:43.800
得到一些

14:43.800 --> 14:44.800
services

14:45.800 --> 14:46.800
movys service

14:49.180 --> 14:50.180
getmovys

14:50.180 --> 14:51.180
那么其实呢

14:51.180 --> 14:52.180
肯定是没有问题的

14:52.180 --> 14:53.180
因为我们现在

14:53.180 --> 14:54.180
做的是服务器

14:54.180 --> 14:55.180
客户端无关的

14:55.180 --> 14:56.180
所以说是没问题的

14:58.180 --> 14:59.180
咱们来试

14:59.180 --> 15:00.180
咱们来试

15:00.180 --> 15:01.180
不不不

15:01.180 --> 15:02.180
还是有问题的

15:02.180 --> 15:03.180
大家可以想象

15:03.180 --> 15:04.180
问题在哪

15:04.180 --> 15:05.180
还是有问题的

15:05.180 --> 15:06.180
不能说没问题

15:06.180 --> 15:07.180
round

15:08.180 --> 15:12.340
运行出来

15:13.340 --> 15:14.340
8080

15:14.340 --> 15:15.340
咱们来访问一下

15:15.340 --> 15:17.340
localhost8080

15:17.340 --> 15:18.340
接下来

15:18.340 --> 15:19.340
我们来看一下

15:19.340 --> 15:24.730
这个服务器端

15:27.490 --> 15:28.490
这里出问题了

15:28.490 --> 15:29.490
这里出问题了

15:29.490 --> 15:30.490
它说什么意思呢

15:31.490 --> 15:32.490
它说

15:33.490 --> 15:35.490
服务器端出了问题

15:36.490 --> 15:37.490
我们看一下

15:37.490 --> 15:39.490
服务器端应该打印出结果了

15:39.490 --> 15:40.490
对吧

15:40.490 --> 15:41.490
那么客户端

15:41.490 --> 15:42.490
也没打印出结果

15:42.490 --> 15:43.490
看一下客户端

15:44.490 --> 15:45.490
客户端

15:45.490 --> 15:46.490
没有结果

15:46.490 --> 15:47.490
没有结果

15:47.490 --> 15:48.490
客户端打印出这么一个结果

15:48.490 --> 15:49.490
很神奇

15:49.490 --> 15:50.490
我们以后再解释

15:50.490 --> 15:51.490
那么我们看一下

15:51.490 --> 15:52.490
服务器端

15:52.490 --> 15:53.490
它出了什么问题

15:53.490 --> 15:54.490
服务器端

15:54.490 --> 15:55.490
它说connect

15:59.020 --> 16:00.020
它说连接失败

16:01.020 --> 16:02.020
连接失败

16:03.020 --> 16:04.020
我看一下

16:05.020 --> 16:06.020
怎么连接失败

16:07.020 --> 16:10.020
找到Movie Service

16:12.020 --> 16:14.020
请求API Movie

16:15.020 --> 16:16.020
API Movie

16:16.020 --> 16:18.020
然后我们这里配置的是

16:20.020 --> 16:21.020
也没问题

16:21.020 --> 16:22.020
也没问题

16:23.020 --> 16:24.020
但是它这边告诉我

16:24.020 --> 16:26.020
是请求失败

16:28.020 --> 16:29.020
我检查一下

16:29.020 --> 16:30.020
看到底是什么情况

16:31.020 --> 16:32.020
这样子

16:32.020 --> 16:34.020
我们来测试一下

16:34.020 --> 16:37.020
在这里我这里打印一下

16:37.020 --> 16:39.020
打印一下config

16:39.020 --> 16:41.020
看一下打印出来到底是啥

16:41.020 --> 16:42.020
保存

16:42.020 --> 16:43.020
重新来一次

16:44.020 --> 16:45.020
打印出来这个地址

16:45.020 --> 16:48.020
BaseURL这个地址是没问题的

16:48.020 --> 16:49.020
是没问题的

16:49.020 --> 16:50.020
那为什么出问题的

16:50.020 --> 16:52.020
是我BaseURL写错了吗

16:52.020 --> 16:53.020
明白了

16:53.020 --> 16:54.020
BaseURL大写

16:55.020 --> 16:56.020
不然它没生效

16:56.020 --> 16:57.020
它没生效

16:57.020 --> 16:58.020
没生效就会导致什么

16:58.020 --> 16:59.020
导致服务器

16:59.020 --> 17:01.020
它也去请求这样的地址

17:02.020 --> 17:03.020
服务器它也去请求这样的地址

17:03.020 --> 17:06.020
因为服务器它前面是没有办法给你

17:06.020 --> 17:07.020
像浏览器那样子

17:07.020 --> 17:08.020
正常给你补权的

17:08.020 --> 17:10.020
所以说服务器那边就出问题了

17:10.020 --> 17:12.020
这里我们把改一下

17:12.020 --> 17:14.020
改成这个东西大写了

17:14.020 --> 17:16.020
那么现在我们来看一下

17:16.020 --> 17:19.670
保存

17:20.670 --> 17:21.670
重新启动一下

17:23.670 --> 17:24.670
启动出来了

17:25.670 --> 17:27.670
这里还是出了问题了

17:27.670 --> 17:28.670
还是出了问题

17:28.670 --> 17:29.670
我们还是看一下

17:29.670 --> 17:31.670
这里config没加进去

17:32.670 --> 17:33.670
保存

17:33.670 --> 17:35.670
现在服务器拿到了数据了

17:35.670 --> 17:37.670
服务器那边请求是不正常的

17:37.670 --> 17:39.670
能够正常的请求到数据

17:39.670 --> 17:41.670
服务器正常请求了

17:41.670 --> 17:43.670
现在我们关注客户端

17:43.670 --> 17:44.670
服务器那边删除掉

17:44.670 --> 17:46.670
它能正常就行了

17:46.670 --> 17:47.670
删除掉

17:48.670 --> 17:49.670
现在主要是关注客户端

17:49.670 --> 17:51.670
客户端能不能正常请求了

17:51.670 --> 17:52.670
我们再来看

17:52.670 --> 17:53.670
刷新

17:54.670 --> 17:56.670
我们看到客户端去请求了哪

17:56.670 --> 17:57.670
请求了API

17:58.670 --> 17:59.670
这边刷新

18:00.670 --> 18:02.670
客户端去请求了服务器

18:02.670 --> 18:04.670
得到这个结果

18:04.670 --> 18:05.670
我们来看一下网络请求

18:05.670 --> 18:06.670
我们请求的是谁

18:06.670 --> 18:08.670
请求的是Movie配级1

18:08.670 --> 18:09.670
你看一下

18:09.670 --> 18:10.670
请求的是这个

18:10.670 --> 18:12.670
APIMovie配级1

18:12.670 --> 18:13.670
请求这个东西

18:13.670 --> 18:15.670
为什么他给我服务器返回的结果

18:15.670 --> 18:16.670
结果是这个玩意

18:16.670 --> 18:17.670
你看Preview

18:17.670 --> 18:18.670
他返回的是这个玩意

18:18.670 --> 18:19.670
40是not found

18:19.670 --> 18:20.670
这怎么回事

18:20.670 --> 18:21.670
就是因为

18:21.670 --> 18:22.670
我们现在浏览器端

18:22.670 --> 18:23.670
请求的时候

18:23.670 --> 18:25.670
他请求的不是数据服务器

18:25.670 --> 18:27.670
而请求的是我们前端中间层

18:28.670 --> 18:29.670
也就是我们这个地址

18:29.670 --> 18:30.670
是发送到哪

18:30.670 --> 18:31.670
请求这个地址

18:31.670 --> 18:33.670
发送到我们自己的服务器

18:33.670 --> 18:34.670
是发送到这

18:34.670 --> 18:36.670
是不是被我们的服务器接受到了

18:36.670 --> 18:37.670
我们的服务器接受到

18:37.670 --> 18:38.670
怎么办

18:38.670 --> 18:39.670
他看一下你是不是

18:39.670 --> 18:40.670
public目录下面

18:40.670 --> 18:41.670
有没有这个文件

18:41.670 --> 18:42.670
都没有

18:42.670 --> 18:44.670
然后交给谁来渲染

18:44.670 --> 18:46.670
交给SSR来渲染

18:46.670 --> 18:47.670
SSR一渲染

18:47.670 --> 18:49.670
发现你这个东西

18:49.670 --> 18:50.670
我们在路由里面找不到

18:50.670 --> 18:52.670
在router里面找不到

18:52.670 --> 18:54.670
找不到的话就是404

18:54.670 --> 18:55.670
所以说

18:55.670 --> 18:56.670
他认为服务器端

18:56.670 --> 18:57.670
认为你这个东西

18:57.670 --> 18:58.670
请求的是哪

18:58.670 --> 18:59.670
请求一个页面

18:59.670 --> 19:00.670
请求的是一个页面

19:01.670 --> 19:02.670
所以说我们现在要搞定的恋事

19:02.670 --> 19:03.670
那怎么搞定的

19:03.670 --> 19:05.670
就是希望我们浏览器

19:05.670 --> 19:07.670
去请求我们前端服务器的时候

19:07.670 --> 19:08.670
前端服务器能够转发

19:08.670 --> 19:09.670
我们的请求到这

19:09.670 --> 19:12.670
凡是遇到我们以API开头的

19:12.670 --> 19:13.670
我们把它转发到这

19:13.670 --> 19:14.670
对吧

19:14.670 --> 19:15.670
那么这个时候就需要用到一个

19:15.670 --> 19:17.670
当然我们自己手写也可以

19:17.670 --> 19:18.670
就是个转发

19:18.670 --> 19:20.670
我们通常会用一个裤

19:20.670 --> 19:21.670
叫做这个裤

19:21.670 --> 19:26.110
叫做attpproxy

19:28.110 --> 19:29.110
叫madeware

19:30.110 --> 19:31.110
用这个裤

19:31.110 --> 19:33.110
来进行服务器的转发

19:33.110 --> 19:34.110
请求的转发

19:34.110 --> 19:35.110
那么这个裤怎么用呢

19:35.110 --> 19:36.110
特别简单

19:36.110 --> 19:37.110
跟express会回来

19:37.110 --> 19:39.110
就是混载用就行了

19:39.110 --> 19:41.110
我们按照官方文档

19:41.110 --> 19:42.110
复制一下

19:42.110 --> 19:44.110
在我们启动服务器的时候

19:44.110 --> 19:46.110
导入这个createproxy

19:46.110 --> 19:47.110
madeware

19:47.110 --> 19:50.110
就是添加一个代理的中间键

19:50.110 --> 19:52.110
那么什么时候发生代理呢

19:52.110 --> 19:53.110
我们不能得到这个时候

19:53.110 --> 19:54.110
得到这个时候

19:54.110 --> 19:55.110
它就给我结货了

19:55.110 --> 19:57.110
就被那个东西结货了

19:57.110 --> 19:58.110
就被那个

19:58.110 --> 20:00.110
SSR结货了

20:00.110 --> 20:02.110
所以我们在它之前

20:02.110 --> 20:04.110
写上一个use

20:04.110 --> 20:06.110
反而是我们以API开头

20:06.110 --> 20:07.110
要请求

20:07.110 --> 20:08.110
我们要交给这个中间键

20:08.110 --> 20:09.110
来进行处理

20:09.110 --> 20:10.110
那怎么来写呢

20:10.110 --> 20:11.110
你看啊

20:11.110 --> 20:12.110
它这里边给你写了一个

20:12.110 --> 20:14.110
我们直接复制过来吧

20:14.110 --> 20:16.110
直接复制过来

20:16.110 --> 20:19.490
这句话直接复制过来

20:19.490 --> 20:20.490
稍微把它改一下

20:20.490 --> 20:22.490
特别简单

20:22.490 --> 20:23.490
通过它可以创建一个

20:23.490 --> 20:25.490
express中间键

20:25.490 --> 20:27.490
那么把我们这样的请求

20:27.490 --> 20:28.490
转发到哪呢

20:28.490 --> 20:30.490
转发到

20:30.490 --> 20:32.490
转发到这

20:33.490 --> 20:35.490
就这个地址

20:35.490 --> 20:38.490
5005好像是什么样

20:38.490 --> 20:39.490
看一下

20:39.490 --> 20:40.490
就转发到这

20:40.490 --> 20:41.490
当然你可以把它做成一个模块

20:41.490 --> 20:43.490
把这个制服刷导出

20:43.490 --> 20:44.490
避免重复代码

20:44.490 --> 20:45.490
也可以

20:45.490 --> 20:46.490
转发到这

20:46.490 --> 20:47.490
明儿的意思吧

20:47.490 --> 20:48.490
那么我们现在

20:48.490 --> 20:49.490
这样子写了之后

20:49.490 --> 20:50.490
我们再来保存

20:50.490 --> 20:51.490
现在看一下

20:51.490 --> 20:53.490
看一下我们前端

20:53.490 --> 20:56.490
浏览器这边再刷新

20:57.490 --> 20:58.490
看一下

20:58.490 --> 21:00.490
除了问题是吧

21:00.490 --> 21:01.490
没安装

21:01.490 --> 21:02.490
还没安装

21:02.490 --> 21:06.440
安装一下

21:06.440 --> 21:07.440
attp

21:07.440 --> 21:08.440
proxy

21:08.440 --> 21:09.440
madeware

21:09.440 --> 21:13.390
复制一下吧

21:13.390 --> 21:14.390
安装一下

21:15.390 --> 21:16.390
安装好了之后

21:16.390 --> 21:17.390
我们之后的前端

21:17.390 --> 21:18.390
浏览器的请求了

21:18.390 --> 21:19.390
就请求了它

21:19.390 --> 21:21.390
然后它帮我们进行转发

21:21.390 --> 21:22.390
然后它本身

21:22.390 --> 21:23.390
也可以直接去请求它

21:23.390 --> 21:24.390
对吧

21:24.390 --> 21:26.390
这个结构了我们就打通了

21:26.390 --> 21:27.390
好

21:27.390 --> 21:28.390
npm装

21:32.500 --> 21:34.500
还出问题了

21:34.500 --> 21:36.500
还说不存在

21:36.500 --> 21:38.500
还说不存在

21:38.500 --> 21:40.500
怎么会不存在呢

21:40.500 --> 21:41.500
这里的

21:41.500 --> 21:43.500
require

21:43.500 --> 21:44.500
attp

21:44.500 --> 21:45.500
proxy

21:45.500 --> 21:46.500
没问题

21:49.500 --> 21:50.500
现在打包成功了

21:50.500 --> 21:51.500
没问题

21:51.500 --> 21:52.500
我们再来一次

21:52.500 --> 21:53.500
是没问题的

21:53.500 --> 21:56.580
OK

21:56.580 --> 21:57.580
打包成功

21:57.580 --> 21:58.580
那么现在

21:58.580 --> 21:59.580
我们再

21:59.580 --> 22:00.580
这边再请求一次

22:00.580 --> 22:01.580
你看

22:01.580 --> 22:02.580
刷新

22:02.580 --> 22:04.580
拿到数据了

22:04.580 --> 22:05.580
拿到正常数据了

22:05.580 --> 22:07.580
我们就形成了这么一个结构了

22:07.580 --> 22:08.580
好

22:08.580 --> 22:09.580
那么现在我们

22:09.580 --> 22:10.580
这个请求是打通了的

22:10.580 --> 22:11.580
对吧

22:11.580 --> 22:12.580
打通了请求之后

22:12.580 --> 22:13.580
我们再来转过来

22:13.580 --> 22:14.580
去写这个store

22:14.580 --> 22:15.580
写这个仓库

22:15.580 --> 22:16.580
仓库里面

22:16.580 --> 22:17.580
我们要去

22:17.580 --> 22:19.580
创建一个x

22:19.580 --> 22:20.580
创建一个x

22:20.580 --> 22:21.580
这个x的名称

22:21.580 --> 22:22.580
我们给它改一个

22:22.580 --> 22:23.580
加个名称

22:23.580 --> 22:24.580
表示

22:24.580 --> 22:26.580
fetch movies

22:26.580 --> 22:28.580
fetch movies

22:28.580 --> 22:29.580
fetch movies

22:29.580 --> 22:30.580
我们这里

22:30.580 --> 22:31.580
写上这么一个

22:31.580 --> 22:33.580
名字

22:33.580 --> 22:34.580
movies

22:34.580 --> 22:36.580
fetch movies

22:36.580 --> 22:37.580
那么这个东西是有副作用的

22:37.580 --> 22:38.580
对吧

22:38.580 --> 22:39.580
我们要远程请求

22:39.580 --> 22:40.580
所以说我们这里

22:40.580 --> 22:42.580
利用一个中间线

22:42.580 --> 22:44.580
叫做reducts

22:44.580 --> 22:45.580
sunk

22:45.580 --> 22:47.580
这个中间线

22:47.580 --> 22:48.580
那么这个中间线

22:48.580 --> 22:49.580
可以让你的action

22:49.580 --> 22:50.580
创建函数

22:50.580 --> 22:51.580
可以让action

22:51.580 --> 22:52.580
创建函数

22:52.580 --> 22:54.580
叫做fetch movies

22:54.580 --> 22:55.580
那么它可以

22:55.580 --> 22:57.580
返回一个

22:57.580 --> 22:58.580
返回一个

22:58.580 --> 23:00.580
你给我传一个配级

23:01.580 --> 23:02.580
配级

23:02.580 --> 23:04.580
和limit进来

23:04.580 --> 23:06.580
我给你返回一个函数

23:06.580 --> 23:07.580
这个函数

23:07.580 --> 23:08.580
就是一个异部函数

23:08.580 --> 23:10.580
可以是一个异部函数

23:10.580 --> 23:12.580
而这个函数里面

23:12.580 --> 23:13.580
包含dispatch

23:13.580 --> 23:14.580
dispatch

23:14.580 --> 23:15.580
那么通过dispatch

23:15.580 --> 23:16.580
我们可以触发

23:16.580 --> 23:17.580
别的action

23:17.580 --> 23:18.580
对吧

23:18.580 --> 23:19.580
还记得吗

23:19.580 --> 23:20.580
咱们来看一下sunk

23:20.580 --> 23:23.850
reductsunk

23:30.250 --> 23:31.250
你看

23:31.250 --> 23:32.250
那么通过我们的

23:32.250 --> 23:33.250
action创建函数

23:33.250 --> 23:34.250
它可以返回一个函数

23:34.250 --> 23:35.250
这个函数

23:35.250 --> 23:36.250
可以是异部的

23:36.250 --> 23:37.250
那么在这个函数里面

23:37.250 --> 23:39.250
来完成副作用的处理

23:39.250 --> 23:40.250
好来吧

23:40.250 --> 23:41.250
我们来写这个函数

23:41.250 --> 23:42.250
当我们调用它的时候

23:42.250 --> 23:43.250
实际上我们最终

23:43.250 --> 23:44.250
是要调用哪呢

23:44.250 --> 23:45.250
使用去导入

23:45.250 --> 23:46.250
导入这个

23:46.250 --> 23:48.250
导入我们的

23:48.250 --> 23:50.250
user service

23:50.250 --> 23:52.250
movie service

23:52.250 --> 23:54.560
导入它

23:54.560 --> 23:55.560
然后这里有一个方法

23:55.560 --> 23:56.560
getmovies

23:56.560 --> 23:57.560
所以我们这里

23:57.560 --> 23:58.560
实际上需要调用它

23:58.560 --> 23:59.560
调用它

23:59.560 --> 24:00.560
wait

24:00.560 --> 24:01.560
getmovies

24:01.560 --> 24:02.560
那么这里的配级

24:02.560 --> 24:04.560
我们就是配级

24:04.560 --> 24:05.560
limit

24:06.560 --> 24:07.560
那么去

24:07.560 --> 24:08.560
得到它的结果

24:10.560 --> 24:11.560
然后它的结果之后

24:11.560 --> 24:12.560
我们这里

24:12.560 --> 24:13.560
是不是就可以设置

24:13.560 --> 24:14.560
设置数据了

24:14.560 --> 24:15.560
对吧

24:15.560 --> 24:16.560
就可以设置数据了

24:16.560 --> 24:17.560
我们去触发这个action

24:17.560 --> 24:18.560
来设置数据

24:18.560 --> 24:19.560
好来吧

24:19.560 --> 24:20.560
我们去触发这个action

24:20.560 --> 24:21.560
disparch

24:22.560 --> 24:23.560
disparch

24:23.560 --> 24:24.560
那么disparch

24:24.560 --> 24:25.560
什么呢

24:25.560 --> 24:29.060
disparch这个action types

24:29.060 --> 24:30.060
第二

24:31.060 --> 24:32.060
disparch

24:32.060 --> 24:33.060
我们通过这个action

24:33.060 --> 24:34.060
创建函数

24:34.060 --> 24:35.060
data

24:35.060 --> 24:36.060
通过它的创建函数

24:36.060 --> 24:37.060
data传进去

24:37.060 --> 24:38.060
data

24:38.060 --> 24:39.060
我们看一下

24:39.060 --> 24:40.060
这个服务器的响应结果

24:41.060 --> 24:42.060
响应结果是data

24:43.060 --> 24:44.060
那么把这个data传进去

24:44.060 --> 24:45.060
好传进去过后

24:45.060 --> 24:46.060
通过它来去触发一个action

24:46.060 --> 24:48.060
让它去帮我们设置数据

24:48.060 --> 24:49.060
对吧

24:49.060 --> 24:50.060
帮它设置电影

24:50.060 --> 24:51.060
那么这里

24:51.060 --> 24:52.060
以为这个disparch

24:53.060 --> 24:54.060
我看一下

24:54.060 --> 24:55.060
OK没问题

24:55.060 --> 24:56.060
没问题

24:56.060 --> 24:57.060
OK那么现在我们去触发一下

24:57.060 --> 24:58.060
就完事了

24:58.060 --> 24:59.060
就把action创建函数写好了

25:00.060 --> 25:01.060
那么这里就完事了

25:01.060 --> 25:02.060
就完事了

25:02.060 --> 25:03.060
那么这里写完了之后

25:03.060 --> 25:05.060
我们是不是要应用中间键

25:05.060 --> 25:06.060
对吧

25:06.060 --> 25:07.060
在store里面应用中间键

25:07.060 --> 25:08.060
那么应用中间键

25:08.060 --> 25:09.060
这一块又出了一个问题

25:09.060 --> 25:10.060
因为我们浏览器团

25:10.060 --> 25:11.060
是用这种方式

25:11.060 --> 25:12.060
对吧

25:12.060 --> 25:13.060
用的这种方式来作为中间键

25:13.060 --> 25:15.060
那么这种方式

25:15.060 --> 25:16.060
我们就没有用什么

25:16.060 --> 25:17.060
没有用这个

25:17.060 --> 25:18.060
create middleware

25:21.060 --> 25:23.060
Apply middleware

25:23.060 --> 25:24.060
就没有用这个东西

25:24.060 --> 25:25.060
那么怎么来办呢

25:25.060 --> 25:26.060
就在浏览器团

25:26.060 --> 25:27.060
怎么来使用中间

25:27.060 --> 25:28.060
在额外的中间

25:28.060 --> 25:29.060
我们来看一下

25:29.060 --> 25:30.060
如果说你把这个去掉

25:31.060 --> 25:32.060
你把这个去掉

25:32.060 --> 25:33.060
它这里会提示你

25:33.060 --> 25:34.060
刷新

25:34.060 --> 25:36.500
别激动

25:39.260 --> 25:40.260
刷新一下

25:40.260 --> 25:42.260
它文档上会说

25:42.260 --> 25:44.260
就是关于一个调试工具

25:44.260 --> 25:46.260
调试工具里面会说

25:46.260 --> 25:47.260
应该怎么来处理

25:47.260 --> 25:48.260
刷新一下

25:48.260 --> 25:49.260
OK

25:49.260 --> 25:50.260
那么现在看一下

25:50.260 --> 25:51.260
它怎么来说的

25:51.260 --> 25:54.470
怎么来处理的

25:54.470 --> 25:55.470
那么这里

25:55.470 --> 25:56.470
它就里面就有说明

25:56.470 --> 25:58.470
如果说你要应用中间键的话

25:58.470 --> 25:59.470
你要这么写

25:59.470 --> 26:03.040
你得先这么写

26:03.040 --> 26:04.040
这么写了之后

26:05.040 --> 26:07.040
这个东西它是用type scripts

26:07.040 --> 26:08.040
这里不用

26:10.800 --> 26:11.800
这里有一个compose

26:11.800 --> 26:12.800
compose在哪呢

26:12.800 --> 26:13.800
在这

26:15.800 --> 26:16.800
然后我们在这里

26:16.800 --> 26:17.800
应用中间键的时候

26:17.800 --> 26:18.800
是这样子写的

26:18.800 --> 26:19.800
我看一下

26:19.800 --> 26:20.800
是这样子写的

26:23.800 --> 26:24.800
通过这个函数

26:25.800 --> 26:26.800
通过这个函数

26:26.800 --> 26:27.800
然后

26:28.800 --> 26:29.800
这里边

26:29.800 --> 26:30.800
这下边

26:30.800 --> 26:34.880
Apply Middle Wears

26:35.880 --> 26:36.880
我们把Apply Middle Wears

26:36.880 --> 26:37.880
放到函数里边

26:37.880 --> 26:39.880
开给你建设这么一个函数

26:39.880 --> 26:40.880
那么这个

26:40.880 --> 26:41.880
Middle Wears放什么呢

26:41.880 --> 26:42.880
就放我们的

26:42.880 --> 26:43.880
就是dux上课

26:43.880 --> 26:44.880
就放这个东西

26:44.880 --> 26:45.880
对吧

26:45.880 --> 26:46.880
放这个东西

26:46.880 --> 26:47.880
咱们来看一下

26:47.880 --> 26:48.880
就是

26:48.880 --> 26:49.880
dux上课

26:50.880 --> 26:51.880
在哪里应用的

26:53.880 --> 26:54.880
就不用以忘了

26:55.880 --> 26:56.880
这里

26:56.880 --> 26:57.880
上课

26:57.880 --> 27:01.150
倒入进来

27:01.150 --> 27:02.150
这里边

27:02.150 --> 27:03.150
我们把上课加进去

27:03.150 --> 27:05.150
那么课无端是不是加进去了

27:05.150 --> 27:06.150
课无端就用这种方式来加

27:06.150 --> 27:07.150
那么服务端

27:07.150 --> 27:08.150
服务端是用

27:08.150 --> 27:09.150
传统的方式

27:09.150 --> 27:11.150
Apply Middle Wears

27:11.150 --> 27:12.150
上课

27:12.150 --> 27:13.150
加进去

27:13.150 --> 27:14.150
OK

27:14.150 --> 27:15.150
那么现在的服务端也好

27:15.150 --> 27:16.150
课无端也好

27:16.150 --> 27:17.150
都有这个Store

27:17.150 --> 27:18.150
对吧

27:18.150 --> 27:19.150
保存

27:19.150 --> 27:20.150
咱们来看一下

27:20.150 --> 27:21.150
SSR

27:21.150 --> 27:22.150
刷新

27:22.150 --> 27:23.150
那么课无端

27:23.150 --> 27:24.150
你看

27:24.150 --> 27:25.150
是不是有了这个东西

27:25.150 --> 27:26.150
有了这个调试工具了

27:26.150 --> 27:27.150
对吧

27:27.150 --> 27:28.150
好

27:28.150 --> 27:29.150
那么现在我们在课无端去触发一下

27:29.150 --> 27:30.150
这个X

27:30.150 --> 27:31.150
触发一下

27:31.150 --> 27:32.150
试一下

27:32.150 --> 27:33.150
看行不行

27:33.150 --> 27:34.150
好

27:34.150 --> 27:35.150
这里我们点击Dispatcher

27:35.150 --> 27:36.150
Type

27:36.150 --> 27:37.150
我们给它写上一个

27:37.150 --> 27:39.150
我们刚才的Type是咋

27:39.150 --> 27:40.150
年龄大了

27:40.150 --> 27:41.150
老收回忘事

27:42.150 --> 27:46.150
那么没有

27:46.150 --> 27:47.150
没有那个

27:47.150 --> 27:49.150
没有那个就是

27:49.150 --> 27:50.150
参数

27:50.150 --> 27:51.150
不给它参数

27:51.150 --> 27:52.150
当然要给

27:52.150 --> 27:53.150
可不可以给参数

27:53.150 --> 27:54.150
当然也可以

27:54.150 --> 27:55.150
可以给

27:55.150 --> 27:56.150
不给它

27:56.150 --> 27:57.150
不给它

27:57.150 --> 27:58.150
让它自己搞定

27:58.150 --> 27:59.150
它自己搞定

27:59.150 --> 28:01.150
去触发这个X

28:01.150 --> 28:05.550
我看一下

28:05.550 --> 28:06.550
没问题

28:06.550 --> 28:07.550
没问题

28:07.550 --> 28:08.550
去触发这个X

28:08.550 --> 28:10.550
咱们来

28:10.550 --> 28:12.550
Dispatch一下

28:12.550 --> 28:13.550
还不行

28:13.550 --> 28:15.550
因为这个X

28:15.550 --> 28:17.550
它不是通过名字触发的

28:17.550 --> 28:18.550
因为它不能

28:18.550 --> 28:20.550
不能给它一个直接的对象

28:20.550 --> 28:21.550
给的不是一个直接的对象

28:21.550 --> 28:22.550
是这么一个函数

28:22.550 --> 28:23.550
是这么一个函数

28:23.550 --> 28:24.550
那怎么办

28:24.550 --> 28:26.550
我们这样子

28:26.550 --> 28:27.550
我们这样子

28:27.550 --> 28:28.550
把Stone

28:28.550 --> 28:30.550
保存到Windows里面来测试一下

28:30.550 --> 28:32.550
把Stone保存到Windows里面

28:32.550 --> 28:33.550
Type

28:33.550 --> 28:34.550
Windows

28:34.550 --> 28:36.550
是不是等于X

28:36.550 --> 28:37.550
是不是等于

28:37.550 --> 28:38.550
等于

28:38.550 --> 28:40.550
Windows

28:40.550 --> 28:41.550
是不是不等于

28:41.550 --> 28:42.550
等于

28:42.550 --> 28:44.550
Undefend

28:45.550 --> 28:46.550
如果说不等于Undefend

28:46.550 --> 28:47.550
就是客户端

28:47.550 --> 28:48.550
客户端的话

28:48.550 --> 28:49.550
我们把Stone保存一下

28:49.550 --> 28:50.550
然后X

28:50.550 --> 28:52.550
我们也把保存一下

28:52.550 --> 28:54.990
Import

28:54.990 --> 28:56.990
这里倒入

28:56.990 --> 28:57.990
Xs

28:58.990 --> 28:59.990
Movies

28:59.990 --> 29:00.990
这里面

29:00.990 --> 29:01.990
我们倒入

29:01.990 --> 29:02.990
FedgeMovies

29:02.990 --> 29:03.990
把这个东西

29:03.990 --> 29:05.990
保存起来

29:05.990 --> 29:06.990
FedgeMovies

29:06.990 --> 29:07.990
主要是测试

29:07.990 --> 29:08.990
测试一下

29:08.990 --> 29:10.990
FedgeMovies

29:10.990 --> 29:11.990
保存起来过后

29:11.990 --> 29:12.990
我们在浏览器看一下

29:12.990 --> 29:13.990
刷新

29:14.990 --> 29:15.990
浏览器里面就有这么一个东西了

29:15.990 --> 29:16.990
Stone

29:16.990 --> 29:17.990
你看

29:17.990 --> 29:18.990
窗库是不是有了

29:18.990 --> 29:19.990
然后放大一点

29:19.990 --> 29:21.990
FedgeMovies

29:21.990 --> 29:22.990
调整它

29:22.990 --> 29:23.990
是不是得到一个X

29:23.990 --> 29:24.990
X创建

29:24.990 --> 29:25.990
返回的是一个

29:25.990 --> 29:26.990
函数

29:26.990 --> 29:27.990
那么现在我们来

29:27.990 --> 29:28.990
触发一下

29:28.990 --> 29:30.990
Stone Dispatch

29:30.990 --> 29:35.200
FedgeMovies

29:36.200 --> 29:37.200
那么触发完了过后

29:37.200 --> 29:39.200
我们在窗库里面去看一下

29:39.200 --> 29:41.200
就大个

29:41.200 --> 29:43.200
看一下State

29:43.200 --> 29:44.200
数据

29:44.200 --> 29:45.200
你看数据

29:45.200 --> 29:46.200
Movies里面是有了

29:46.200 --> 29:47.200
是不是有数据了

29:47.200 --> 29:48.200
对不对

29:48.200 --> 29:49.200
OK

29:49.200 --> 29:50.200
那么这里

29:50.200 --> 29:51.200
就没问题了

29:51.200 --> 29:52.200
就没问题了

29:53.200 --> 29:54.200
那么这里

29:54.200 --> 29:55.200
就是

29:57.200 --> 29:58.200
这个

29:58.200 --> 29:59.200
窗库里面的副作用

29:59.200 --> 30:00.200
它的处理方式

30:00.200 --> 30:01.200
它的处理方式

30:01.200 --> 30:02.200
那么现在

30:02.200 --> 30:03.200
我们这个窗库

30:03.200 --> 30:04.200
还没有完全跟我们的

30:04.200 --> 30:05.200
组建

30:05.200 --> 30:06.200
连接起来

30:06.200 --> 30:07.200
组建里面还没有使用到

30:07.200 --> 30:08.200
窗库

30:08.200 --> 30:09.200
没有去触发这些东西

30:09.200 --> 30:10.200
那么我们先把这些

30:10.200 --> 30:12.200
测试的东西先浪了

30:12.200 --> 30:13.200
我们下节课

30:13.200 --> 30:14.200
来搞定

30:14.200 --> 30:15.200
在组建里面

30:15.200 --> 30:16.200
在某些组建

30:16.200 --> 30:17.200
页面里面

30:17.200 --> 30:18.200
一开始

30:18.200 --> 30:19.200
我就去

30:19.200 --> 30:20.200
标用一些数据

30:20.200 --> 30:21.200
去执行一些数据

30:21.200 --> 30:22.200
我们先把这个代码

30:22.200 --> 30:23.200
测试代码上了

30:23.200 --> 30:24.200
然后刚才服务器

30:24.200 --> 30:25.200
这边我们再把代码

30:25.200 --> 30:26.200
改一下

30:26.200 --> 30:27.200
刚才我们用Require

30:27.200 --> 30:28.200
对吧

30:28.200 --> 30:29.200
服装用Require

30:29.200 --> 30:30.200
当然没问题

30:30.200 --> 30:32.200
但是我们还是统一写法

30:33.200 --> 30:34.200
还是统一用Import

30:34.200 --> 30:35.200
用ES6的方式

30:35.200 --> 30:36.200
因为反正要

30:36.200 --> 30:37.200
经过打包的

30:37.200 --> 30:38.200
经过微派打包

30:38.200 --> 30:39.200
这里的Create

30:39.200 --> 30:40.200
加上去

30:41.200 --> 30:42.200
OK

30:42.200 --> 30:43.200
那么现在我们把代码

30:43.200 --> 30:44.200
改造成这个样子

30:44.200 --> 30:46.200
这也可能玩了过后

30:46.200 --> 30:47.200
大家跟着做一下

30:47.200 --> 30:48.200
两个方面

30:48.200 --> 30:49.200
一个是打通

30:49.200 --> 30:50.200
这种模式

30:50.200 --> 30:51.200
把这个模式打通

30:51.200 --> 30:53.200
另外一个是在这里

30:54.200 --> 30:56.200
在搞定仓库里面的数据

30:56.200 --> 30:58.200
搞定仓库里面的x

30:58.200 --> 31:00.200
大家下去做一下

