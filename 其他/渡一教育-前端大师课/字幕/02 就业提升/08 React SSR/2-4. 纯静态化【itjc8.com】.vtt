WEBVTT

00:01.260 --> 00:05.260
我们这节课呢来开始讲静态化

00:05.260 --> 00:07.260
就这个东西

00:07.260 --> 00:10.900
这个东西是新出来的东西

00:10.900 --> 00:14.900
目前呢这个next.js呢是9的版本

00:14.900 --> 00:16.900
那么这个9的版本呢

00:16.900 --> 00:19.900
它新出来这么一个静态化的功能

00:19.900 --> 00:21.900
而且呢我研究了一下它的文档

00:21.900 --> 00:23.900
它静态化的功能

00:23.900 --> 00:25.900
我之前小看它了

00:25.900 --> 00:27.900
特别强大

00:27.900 --> 00:29.900
学完了之后呢只能用两个字

00:29.900 --> 00:30.900
争相来形容

00:30.900 --> 00:33.900
所以说我们会多花几页课来讲静态化

00:33.900 --> 00:34.900
功能非常强大

00:34.900 --> 00:37.900
而且呢像这个知识啊你在全网的时候

00:37.900 --> 00:41.900
除了谷歌里边还有一点内容之外

00:41.900 --> 00:44.900
国内的百度既是完全受到的

00:44.900 --> 00:46.900
因为它是新出来的东西

00:46.900 --> 00:48.900
只能去研究文档

00:48.900 --> 00:50.900
这个静态化是什么意思呢

00:50.900 --> 00:51.900
我给大家解释一下

00:51.900 --> 00:53.900
这个功能呢我稍微做了一些优化

00:53.900 --> 00:54.900
比方说不是优化

00:54.900 --> 00:56.900
把一些无关型的东西删除掉了

00:56.900 --> 00:57.900
什么电影详情

00:57.900 --> 00:58.900
我们目前用不到

00:58.900 --> 00:59.900
只有一个电影业

00:59.900 --> 01:01.900
一个首业

01:01.900 --> 01:03.900
然后呢导航栏

01:03.900 --> 01:04.900
做一个优化

01:04.900 --> 01:06.900
只有一个首业和电影

01:06.900 --> 01:08.900
好那么这个静态化是什么东西呢

01:08.900 --> 01:10.900
我给大家解释一下

01:10.900 --> 01:12.900
我们这里呢建一个PPT

01:17.530 --> 01:18.530
需要大家理解一下

01:18.530 --> 01:20.530
它为什么要这样做

01:20.530 --> 01:22.530
我们之前呢

01:22.530 --> 01:24.530
做了两种模式出来

01:24.530 --> 01:26.530
一种叫做Client

01:27.530 --> 01:29.530
ClientSideRender

01:30.530 --> 01:32.530
叫做客户端渲染

01:32.530 --> 01:34.530
最开始的传统模式

01:34.530 --> 01:36.530
然后呢服务器呢只提供

01:36.530 --> 01:38.530
就是前端服务器

01:38.530 --> 01:40.530
提供静态资源

01:42.530 --> 01:43.530
所有都是静态资源

01:43.530 --> 01:45.530
那么这样子的

01:45.530 --> 01:47.530
客户端的压力会非常大

01:47.530 --> 01:48.530
就是我们传统的东西

01:48.530 --> 01:50.530
我们给大家画个图吧

01:50.530 --> 01:52.530
这里我们加一个箭头

01:54.530 --> 01:55.530
客户端

01:55.530 --> 01:56.530
还有一个就是数据服务器

01:56.530 --> 01:57.530
那么前端服务器

01:57.530 --> 01:59.530
还充当一个代理的功能

01:59.530 --> 02:01.530
还有一个代理的功能

02:01.530 --> 02:03.530
那么这样子呢

02:03.530 --> 02:04.530
压力会比较大

02:04.530 --> 02:06.530
客户端服务器跟前端服务器之间

02:06.530 --> 02:08.530
交互的话

02:08.530 --> 02:09.530
那么由于前端服务器

02:09.530 --> 02:10.530
它承担的工作就很少

02:10.530 --> 02:12.530
它只提供一个静态资源

02:12.530 --> 02:13.530
就是我们的页面

02:13.530 --> 02:14.530
GS

02:14.530 --> 02:15.530
CSS这些东西

02:15.530 --> 02:17.530
已经呢代理转发下琴球

02:19.530 --> 02:21.530
然后呢很多的渲染工作

02:21.530 --> 02:23.530
全部交给客户端完成

02:23.530 --> 02:24.530
就前端服务器呢

02:24.530 --> 02:25.530
给它的就是一个空页面

02:25.530 --> 02:27.530
只有一个DIV ITV route

02:27.530 --> 02:28.530
这是我们传统的做法

02:28.530 --> 02:29.530
传统的话

02:29.530 --> 02:30.530
我们之前讲过

02:30.530 --> 02:32.530
第一 导致白屏

02:32.530 --> 02:33.530
第二呢

02:33.530 --> 02:34.530
会导致那个

02:36.530 --> 02:38.530
SEOU化出问题

02:38.530 --> 02:39.530
因为我们搜索引擎的话

02:39.530 --> 02:41.530
读到了它就是一个空间面

02:41.530 --> 02:43.530
不利于SEO

02:43.530 --> 02:44.530
好 于是呢

02:44.530 --> 02:45.530
我们就转换成为

02:45.530 --> 02:46.530
下面这种模式

02:46.530 --> 02:48.530
叫做SSR

02:48.530 --> 02:49.530
也就是客户端

02:49.530 --> 02:50.530
要不要渲染

02:50.530 --> 02:51.530
要渲染

02:51.530 --> 02:52.530
接管后续渲染

02:53.530 --> 02:55.530
客户端这里的

02:55.530 --> 02:57.530
只是只做后续渲染

02:57.530 --> 02:59.530
也就是我们之前说的注水

02:59.530 --> 03:00.530
对吧 注水

03:02.530 --> 03:03.530
注水

03:03.530 --> 03:05.530
也就是说后续渲染

03:05.530 --> 03:07.530
就是我们后面什么点击按钮

03:07.530 --> 03:08.530
动态交互

03:08.530 --> 03:09.530
这些东西

03:09.530 --> 03:10.530
跟服务器没有关系的

03:10.530 --> 03:11.530
那么它做这个事

03:11.530 --> 03:12.530
那么剩下的呢

03:12.530 --> 03:14.530
前端服务器要多一个功能了

03:14.530 --> 03:17.530
就是要返回渲染页面

03:17.530 --> 03:19.530
它就不是纯粹的静态资源了

03:19.530 --> 03:21.530
静态资源只有那个什么呢

03:21.530 --> 03:22.530
只有GS啊

03:22.530 --> 03:24.530
CSS啊这东西

03:24.530 --> 03:25.530
就没有页面了

03:25.530 --> 03:26.530
而返回怎么呢

03:26.530 --> 03:27.530
渲染结果

03:27.530 --> 03:29.530
渲染的页面

03:29.530 --> 03:30.530
就是把渲染工作

03:30.530 --> 03:31.530
交给前端服务器来完成

03:31.530 --> 03:33.530
那么它的压力一下就大了

03:33.530 --> 03:35.530
为什么说它的压力一下大了呢

03:35.530 --> 03:36.530
这种模式呢

03:36.530 --> 03:38.530
虽然说能够解决白屏的问题

03:38.530 --> 03:40.530
能够解决那个SEO的问题

03:40.530 --> 03:41.530
但是呢

03:41.530 --> 03:43.530
前端服务器的压力比较大

03:43.530 --> 03:44.530
为什么说压力比较大

03:44.530 --> 03:46.530
因为它渲染需不需要时间啊

03:46.530 --> 03:48.530
需不需要耗费CPU

03:48.530 --> 03:49.530
是不是也需要

03:49.530 --> 03:51.530
那么我们以前呢

03:51.530 --> 03:52.530
是每一个用户

03:52.530 --> 03:54.530
比如说我们有1000个用户

03:54.530 --> 03:55.530
那么每一个用户呢

03:55.530 --> 03:57.530
在自己的浏览器里边渲染

03:57.530 --> 03:58.530
对吧

03:58.530 --> 03:59.530
耗费的是它自己的资源

03:59.530 --> 04:00.530
跟我们服务器没有关系

04:00.530 --> 04:01.530
那么

04:01.530 --> 04:02.530
比如说1000台

04:02.530 --> 04:03.530
1000个用户啊

04:03.530 --> 04:04.530
就有1000台计算机

04:04.530 --> 04:05.530
对吧

04:05.530 --> 04:06.530
它们各自渲染各自的

04:06.530 --> 04:08.530
就把压力分攤了

04:08.530 --> 04:09.530
那么现在呢

04:09.530 --> 04:10.530
所有的人

04:10.530 --> 04:11.530
1000个用户

04:11.530 --> 04:13.530
都要我们一个前端服务器

04:13.530 --> 04:14.530
来渲染

04:14.530 --> 04:15.530
当然你可以搭机群

04:15.530 --> 04:17.530
那搭机群肯定赶不上用户的数量啊

04:17.530 --> 04:18.530
对吧

04:18.530 --> 04:19.530
现在办呢

04:19.530 --> 04:20.530
这又是一个问题了

04:20.530 --> 04:21.530
就是一个问题了

04:21.530 --> 04:22.530
以前的能解决

04:22.530 --> 04:24.530
解决的方式就是静态化

04:24.530 --> 04:25.530
但是呢

04:25.530 --> 04:26.530
要使用一些别的

04:26.530 --> 04:27.530
一些第三方的裤啊

04:27.530 --> 04:28.530
第三方的工具

04:28.530 --> 04:29.530
就特别的麻烦

04:29.530 --> 04:30.530
那么现在呢

04:30.530 --> 04:32.530
这个NTX介石呢

04:32.530 --> 04:34.530
它已经非常好的支持静态化了

04:34.530 --> 04:36.530
也就是我们不用安装别的

04:36.530 --> 04:37.530
就靠它的东西

04:37.530 --> 04:38.530
就已经很好

04:38.530 --> 04:39.530
支持静态化了

04:39.530 --> 04:40.530
静态化是什么意思呢

04:40.530 --> 04:42.530
给大家下面再画一个图

04:44.530 --> 04:45.530
那么这个图呢

04:45.530 --> 04:46.530
是这样子

04:46.530 --> 04:47.530
还是一样

04:47.530 --> 04:48.530
客户乱这里呢

04:48.530 --> 04:49.530
注水

04:49.530 --> 04:50.530
然后就加入事件

04:50.530 --> 04:51.530
然后完成后续渲染

04:51.530 --> 04:52.530
那么

04:52.530 --> 04:53.530
前端服务器

04:53.530 --> 04:55.530
除了提供静态资源

04:55.530 --> 04:56.530
除了代理之外呢

04:56.530 --> 04:58.530
还要做一件事

04:58.530 --> 04:59.530
就是

04:59.530 --> 05:01.530
预与渲染页面

05:01.530 --> 05:02.530
预与渲染页面

05:02.530 --> 05:04.530
我们这里呢

05:04.530 --> 05:08.160
这里再画一个框框

05:08.160 --> 05:10.160
前端服务器还要做这么一件事

05:10.160 --> 05:12.160
我们把它叫做

05:12.160 --> 05:17.160
生成静态页面

05:17.160 --> 05:18.160
我们比方说

05:18.160 --> 05:20.160
我们之前的静态页面

05:20.160 --> 05:21.160
跟现在的静态页面不一样

05:21.160 --> 05:22.160
静态的静态页面

05:22.160 --> 05:23.160
是不是只有一个

05:23.160 --> 05:24.160
对吧

05:24.160 --> 05:25.160
单页应用程序嘛

05:25.160 --> 05:26.160
只有一个

05:26.160 --> 05:27.160
DIV IDV入手

05:27.160 --> 05:28.160
里面就没了

05:28.160 --> 05:29.160
那么这里的静态页面

05:29.160 --> 05:30.160
是有内容的

05:30.160 --> 05:31.160
也就是说

05:31.160 --> 05:32.160
我们前端服务器呢

05:32.160 --> 05:34.160
它不是每一次请求

05:34.160 --> 05:35.160
去渲染一次页面

05:35.160 --> 05:36.160
而是一开始

05:36.160 --> 05:38.160
就把静态页面生成好

05:38.160 --> 05:40.160
生成好了之后呢

05:40.160 --> 05:42.160
客户端在

05:42.160 --> 05:44.160
在这个客户端在请求的时候呢

05:44.160 --> 05:45.160
就把静态页面给它

05:45.160 --> 05:46.160
比方说

05:46.160 --> 05:47.160
我举个例子

05:47.160 --> 05:48.160
我们这里呢

05:48.160 --> 05:49.160
不是有两个页面吗

05:49.160 --> 05:50.160
一个是什么

05:50.160 --> 05:51.160
电影页

05:51.160 --> 05:52.160
一个是手页

05:52.160 --> 05:53.160
对吧

05:53.160 --> 05:54.160
有两个页面

05:54.160 --> 05:55.160
那么实际上

05:55.160 --> 05:56.160
真正的页面

05:56.160 --> 05:57.160
是不是只有一个

05:57.160 --> 05:58.160
真正的页面

05:58.160 --> 05:59.160
只有一个

05:59.160 --> 06:00.160
我们之前学过的

06:00.160 --> 06:01.160
只有一个

06:01.160 --> 06:02.160
就是我们传统的模式

06:02.160 --> 06:03.160
那么如果说

06:03.160 --> 06:04.160
你租成服务端

06:04.160 --> 06:05.160
就是服务端渲染的话

06:05.160 --> 06:06.160
那么服务端压力就很大

06:06.160 --> 06:07.160
每一次请求

06:07.160 --> 06:08.160
都要渲染一次

06:08.160 --> 06:09.160
每一次请求都渲染一次

06:09.160 --> 06:10.160
其实呢

06:10.160 --> 06:11.160
你仔细观察会发现

06:11.160 --> 06:13.160
很多页面啊

06:13.160 --> 06:15.160
它们没有必要

06:15.160 --> 06:16.160
每一次请求都去渲染

06:16.160 --> 06:18.160
比方说咱们的手页

06:18.160 --> 06:20.160
不然我们目前的手页

06:20.160 --> 06:21.160
就这么一行文字

06:21.160 --> 06:22.160
你渲染个啥呀

06:22.160 --> 06:23.160
就渲染

06:23.160 --> 06:24.160
你每一次请求

06:24.160 --> 06:25.160
有必要去

06:25.160 --> 06:26.160
每一次请求渲染一次

06:26.160 --> 06:27.160
每一次请求渲染一次

06:27.160 --> 06:28.160
不都一样吗

06:28.160 --> 06:29.160
对吧

06:29.160 --> 06:30.160
还有这个电影页

06:30.160 --> 06:31.160
服务端

06:31.160 --> 06:32.160
如果说服务端渲染的话

06:32.160 --> 06:33.160
是不是每一次请求

06:33.160 --> 06:34.160
都要来一次

06:34.160 --> 06:35.160
每一次请求都来一次

06:35.160 --> 06:36.160
对吧

06:36.160 --> 06:37.160
还要去撇撇路游

06:37.160 --> 06:38.160
非常的麻烦

06:38.160 --> 06:39.160
那么其实它都一样的

06:39.160 --> 06:40.160
都一样的

06:40.160 --> 06:42.160
那么这个时候呢

06:42.160 --> 06:43.160
像这种东西呢

06:43.160 --> 06:44.160
就没有必要为

06:44.160 --> 06:46.160
每一次请求去渲染一次呢

06:46.160 --> 06:48.160
就是白白的增加了

06:48.160 --> 06:49.160
服务端的压力

06:49.160 --> 06:50.160
于是呢

06:50.160 --> 06:52.160
我们就可以在一开始的时候

06:52.160 --> 06:54.160
生成多个静态页面

06:54.160 --> 06:56.160
我们根据我们的路游

06:56.160 --> 06:58.160
根据我们的就是

06:58.160 --> 06:59.160
页面的数量

06:59.160 --> 07:00.160
以及呢我们的页面内容

07:00.160 --> 07:02.160
先就把就是

07:02.160 --> 07:04.160
预先就把这个静态页面渲染好

07:04.160 --> 07:05.160
什么

07:05.160 --> 07:06.160
比方说生成这个

07:06.160 --> 07:07.160
index的ATML

07:07.160 --> 07:08.160
对吧

07:08.160 --> 07:09.160
然后呢

07:09.160 --> 07:10.160
move

07:10.160 --> 07:11.160
move掉ATML

07:11.160 --> 07:12.160
对吧

07:12.160 --> 07:13.160
就把这个东西

07:13.160 --> 07:14.160
全部生成好

07:14.160 --> 07:16.160
生成好了之后呢

07:16.160 --> 07:18.160
后续的处理呢

07:18.160 --> 07:20.160
我们把画过来

07:21.160 --> 07:23.160
后续的处理呢

07:23.160 --> 07:25.160
我们就直接把这个静态页面给它了

07:25.160 --> 07:27.160
我们就不用再去

07:27.160 --> 07:29.160
根据请求再去重新渲染了

07:29.160 --> 07:31.160
直接把这个静态页面给它

07:31.160 --> 07:32.160
没了意思吧

07:32.160 --> 07:33.160
这种静态页面跟这个静态页面

07:33.160 --> 07:34.160
是不一样的

07:34.160 --> 07:35.160
是不一样的

07:35.160 --> 07:36.160
这个东西

07:36.160 --> 07:37.160
这个静态页面是根据

07:37.160 --> 07:38.160
RACT主键

07:38.160 --> 07:39.160
渲染出来的静态页面

07:39.160 --> 07:41.160
只不过我一开始

07:41.160 --> 07:42.160
有渲染好

07:42.160 --> 07:43.160
然后呢

07:43.160 --> 07:44.160
后续的客户端请求

07:44.160 --> 07:45.160
直接把个静态页面给它

07:45.160 --> 07:46.160
当然这个静态页面

07:46.160 --> 07:47.160
还引用了介石

07:47.160 --> 07:48.160
然后呢

07:48.160 --> 07:49.160
让客户端可以运行介石

07:49.160 --> 07:51.160
来完成后续的接管

07:51.160 --> 07:52.160
有了后续的渲染是

07:52.160 --> 07:53.160
后续的客户端

07:53.160 --> 07:54.160
这边是没有任何问题的

07:54.160 --> 07:55.160
对吧

07:55.160 --> 07:57.160
我们就使用这种模式

07:57.160 --> 07:58.160
那么这种模式的话

07:58.160 --> 07:59.160
以前呢

07:59.160 --> 08:00.160
要借助一些第三方库

08:00.160 --> 08:01.160
一些工具来实现

08:01.160 --> 08:02.160
那么现在呢

08:02.160 --> 08:03.160
好多了

08:03.160 --> 08:04.160
现在呢

08:04.160 --> 08:05.160
那个是介石

08:05.160 --> 08:06.160
天生就可以实现了

08:06.160 --> 08:07.160
那么天生的实现了

08:07.160 --> 08:08.160
我

08:08.160 --> 08:09.160
我看

08:09.160 --> 08:11.160
仔细看了一下文档

08:11.160 --> 08:13.160
确实实现得非常不错

08:13.160 --> 08:14.160
那么我们

08:14.160 --> 08:15.160
这里呢

08:15.160 --> 08:16.160
就给大家这几节课

08:16.160 --> 08:17.160
给大家介绍

08:17.160 --> 08:19.160
如何来去生存静态页面

08:19.160 --> 08:20.160
其他遇到了问题

08:20.160 --> 08:22.160
当我们工程建立好了之后呢

08:22.160 --> 08:23.160
我们这里呢

08:23.160 --> 08:25.160
我们运行一下啊

08:25.160 --> 08:26.160
Roundale

08:26.160 --> 08:27.160
其实之前呢

08:27.160 --> 08:28.160
我们就已经看到了

08:28.160 --> 08:30.160
页面上有个东西

08:30.160 --> 08:32.160
给大家看一下啊

08:32.160 --> 08:35.730
等它运行完成

08:35.730 --> 08:38.940
我们这里呢

08:38.940 --> 08:40.940
打开Localhost

08:40.940 --> 08:42.940
3000

08:42.940 --> 08:43.940
这个U卡

08:43.940 --> 08:44.940
OK

08:44.940 --> 08:45.940
好了

08:45.940 --> 08:46.940
那么现在呢

08:46.940 --> 08:48.940
我们来看一下啊

08:48.940 --> 08:49.940
现在呢

08:49.940 --> 08:50.940
我们这里呢

08:50.940 --> 08:51.940
看到页面右下角

08:51.940 --> 08:52.940
有个东西啊

08:52.940 --> 08:54.940
叫做PrayRenderPage

08:54.940 --> 08:55.940
有这么一个东西

08:55.940 --> 08:56.940
那么这个东西呢

08:56.940 --> 08:57.940
它就在提示你

08:57.940 --> 08:59.940
它现在新加入这个功能啊

08:59.940 --> 09:00.940
那么然后点击过来

09:00.940 --> 09:01.940
调整到文档

09:01.940 --> 09:02.940
然后告诉你

09:02.940 --> 09:03.940
它现在呢

09:03.940 --> 09:04.940
有这么一个东西叫做

09:04.940 --> 09:05.940
Static

09:05.940 --> 09:07.940
静态的Optimization

09:07.940 --> 09:08.940
優化

09:08.940 --> 09:10.940
静态優化器

09:10.940 --> 09:12.940
那么这个东西开启了之后

09:12.940 --> 09:14.940
它默认就是开启了

09:14.940 --> 09:15.940
开启了之后呢

09:15.940 --> 09:17.940
它就会根据你具体的情况

09:17.940 --> 09:19.940
来生成页面

09:19.940 --> 09:20.940
它会知道哪些页面

09:20.940 --> 09:21.940
是需要静态圈

09:21.940 --> 09:23.940
是需要静态化的

09:23.940 --> 09:25.940
哪些页面是不需要静态化的

09:25.940 --> 09:26.940
是不能静态化的

09:26.940 --> 09:27.940
那么这里呢

09:27.940 --> 09:28.940
我给大家说一下啊

09:28.940 --> 09:29.940
这里边

09:29.940 --> 09:31.940
我们有这么几个概念

09:31.940 --> 09:32.940
大家要清楚

09:32.940 --> 09:34.940
一个呢叫做PrayRender

09:34.940 --> 09:36.940
PrayRender

09:36.940 --> 09:37.940
这东西叫什么呢

09:37.940 --> 09:38.940
叫做

09:38.940 --> 09:39.940
预渲染

09:39.940 --> 09:40.940
预渲染

09:40.940 --> 09:41.940
那么预渲染呢

09:41.940 --> 09:43.940
有两种方式

09:43.940 --> 09:45.940
一种叫做静态预渲染

09:45.940 --> 09:46.940
我们把它叫做

09:46.940 --> 09:47.940
S

09:47.940 --> 09:48.940
叫做什么呢

09:48.940 --> 09:49.940
S

09:49.940 --> 09:50.940
G

09:50.940 --> 09:51.940
S

09:51.940 --> 09:52.940
SG

09:52.940 --> 09:54.940
它的全程叫做

09:54.940 --> 09:55.940
Surfer

09:56.940 --> 09:57.940
Static

09:57.940 --> 09:59.940
Generation

09:59.940 --> 10:00.940
什么意思呢

10:00.940 --> 10:01.940
表示的是

10:01.940 --> 10:04.940
服务端静态

10:04.940 --> 10:06.940
生静态化

10:06.940 --> 10:07.940
服务端静态化

10:07.940 --> 10:09.940
那么这是第1种方式预渲染

10:09.940 --> 10:10.940
第2种方式呢

10:10.940 --> 10:11.940
叫做

10:11.940 --> 10:12.940
就是我们学过的

10:12.940 --> 10:13.940
SSR

10:13.940 --> 10:15.940
叫做Server

10:15.940 --> 10:17.940
Side

10:17.940 --> 10:19.940
Render

10:19.940 --> 10:21.940
就是我们之前传统的方式的

10:21.940 --> 10:23.940
叫做服务器

10:23.940 --> 10:25.940
服务端

10:25.940 --> 10:27.940
服务端

10:27.940 --> 10:28.940
那么这两种方式

10:28.940 --> 10:29.940
他们都是

10:29.940 --> 10:31.940
他们是都可以用的

10:31.940 --> 10:32.940
针对每个页面

10:32.940 --> 10:34.940
他们可以可能会使用不同的方式

10:34.940 --> 10:35.940
比方说对手液的话

10:35.940 --> 10:37.940
他可能使用服务端宣传

10:37.940 --> 10:38.940
服务端宣传什么意思

10:38.940 --> 10:39.940
就是我们传统的

10:39.940 --> 10:40.940
每一次请求

10:40.940 --> 10:41.940
哪一个

10:41.940 --> 10:42.940
每一次请求宣传一次给他

10:42.940 --> 10:44.940
每一次请求宣传一次给他

10:44.940 --> 10:45.940
那么针对另外一些页面呢

10:45.940 --> 10:47.940
他可能会使用静态化宣传

10:47.940 --> 10:48.940
那么就是比方说

10:48.940 --> 10:49.940
比方说

10:49.940 --> 10:50.940
Archulis

10:50.940 --> 10:51.940
Movies

10:51.940 --> 10:52.940
那么这个页面呢

10:52.940 --> 10:53.940
他就会使用静态化宣传

10:53.940 --> 10:54.940
那么就说

10:54.940 --> 10:55.940
我们一开始呢

10:55.940 --> 10:56.940
就生成一些静态的东西

10:56.940 --> 10:57.940
那么到时候

10:57.940 --> 10:58.940
后续请求的话

10:58.940 --> 10:59.940
直接给他静态的

10:59.940 --> 11:00.940
就不需要再为每一个请求

11:00.940 --> 11:01.940
去宣传一次了

11:01.940 --> 11:03.940
明白这个意思吧

11:03.940 --> 11:05.940
因为宣传是需要花费时间的

11:05.940 --> 11:06.940
会让客户端一直在等待

11:06.940 --> 11:08.940
等待服端宣传完成

11:08.940 --> 11:09.940
那么有了静态页面之后呢

11:09.940 --> 11:11.940
我们就直接得到静态页面结果了

11:11.940 --> 11:13.940
静态页面是非常快的

11:13.940 --> 11:14.940
好那么这就是

11:14.940 --> 11:16.940
两种预宣染方式

11:16.940 --> 11:17.940
而这个东西

11:17.940 --> 11:19.940
我们刚才看到的这个东西

11:19.940 --> 11:21.940
他就叫做预宣染优化

11:21.940 --> 11:23.940
预宣染优化

11:23.940 --> 11:24.940
那么预宣染优化

11:24.940 --> 11:25.940
是什么意思呢

11:25.940 --> 11:26.940
他就会根

11:26.940 --> 11:27.940
他就会根据我们的页面

11:27.940 --> 11:29.940
每一个页面的不同情况

11:29.940 --> 11:32.940
来决定针对不同的页面

11:32.940 --> 11:34.940
我该使用服务端宣传

11:34.940 --> 11:37.940
还是使用的是服务端静态化

11:37.940 --> 11:38.940
那么他怎么来决定呢

11:38.940 --> 11:40.940
默认情况下

11:40.940 --> 11:41.940
他有这么一个原则

11:41.940 --> 11:43.940
就尽量的开启服务端静态化

11:43.940 --> 11:44.940
这也是那个时机

11:44.940 --> 11:46.940
也是在9.0版本过后强推的一个东西

11:46.940 --> 11:48.940
确实做得非常好

11:48.940 --> 11:50.940
那么他怎么来判断呢

11:50.940 --> 11:52.940
如果说你一个页面

11:52.940 --> 11:54.940
我们现在还需要一些知识

11:54.940 --> 11:55.940
才知道具体怎么判断的

11:55.940 --> 11:57.940
我们这里就简单说一下

11:57.940 --> 11:59.940
如果说他发现一个页面

11:59.940 --> 12:01.940
他没有动态内容

12:01.940 --> 12:03.940
那么他就会把它当成静态

12:03.940 --> 12:05.940
于是我们可以看到我们的首页

12:05.940 --> 12:06.940
有没有什么动态内容

12:06.940 --> 12:08.940
没有全都是写死的对吧

12:08.940 --> 12:10.940
我们的电影页全都是写死的

12:10.940 --> 12:13.940
于是这一次他们渲染的时候

12:13.940 --> 12:16.940
就是使用的是静态化

12:16.940 --> 12:17.940
好那么静态化

12:17.940 --> 12:18.940
我们怎么来验证呢

12:18.940 --> 12:20.940
验证他有没有生存静态化呢

12:20.940 --> 12:22.940
我们在这里呢

12:22.940 --> 12:24.940
输出一个东西

12:24.940 --> 12:27.940
这个东西叫做

12:27.940 --> 12:30.940
index render

12:31.940 --> 12:33.940
那么我们再输出一下

12:33.940 --> 12:35.940
movie是你一边也输出一下

12:35.940 --> 12:37.940
这是movie render

12:37.940 --> 12:38.940
那么如果说他渲染了

12:38.940 --> 12:40.940
那就一定会运行

12:40.940 --> 12:42.940
一定会输出这么一个结果

12:42.940 --> 12:43.940
如果他渲染了

12:43.940 --> 12:44.940
一定会输出这么一个结果

12:44.940 --> 12:46.940
那么咱们来看一下

12:46.940 --> 12:48.940
好我们这里呢

12:48.940 --> 12:49.940
保存已经成功了

12:49.940 --> 12:51.940
接下来我们来看一下控制台

12:51.940 --> 12:56.890
好这里呢我们刷新

12:56.890 --> 12:58.890
那浏览器那边肯定要运行

12:58.890 --> 12:59.890
浏览器那边是毫无疑问要运行的

12:59.890 --> 13:00.890
这个跑不掉的

13:00.890 --> 13:02.890
因为浏览器会接管后续的渲染流程

13:02.890 --> 13:04.890
我们关键是看服务端有没有运行

13:04.890 --> 13:06.890
运行了对吧

13:06.890 --> 13:07.890
运行了我们再来刷新一次

13:07.890 --> 13:08.890
看有没有运行

13:08.890 --> 13:10.890
就会发现还是运行了

13:10.890 --> 13:11.890
这又是为什么呢

13:11.890 --> 13:12.890
不是说预浅染吗

13:12.890 --> 13:13.890
预浅染它就不会为

13:13.890 --> 13:15.890
每一个请求去渲染一次

13:15.890 --> 13:17.890
对吧那为什么会这样子呢

13:17.890 --> 13:19.890
是因为这个功能啊

13:19.890 --> 13:21.890
它只有在

13:21.890 --> 13:23.890
就是在开发环境里边

13:23.890 --> 13:24.890
它是不会启用的

13:24.890 --> 13:26.890
开发环境里边是不会启用的功能的

13:26.890 --> 13:28.890
它只有在生产环境里边才会启用

13:28.890 --> 13:30.890
因为开发环境我们要调试嘛

13:30.890 --> 13:31.890
我们改了代码

13:31.890 --> 13:33.890
你如果说你用预浅染之后呢

13:33.890 --> 13:34.890
你代码就不变了对吧

13:34.890 --> 13:35.890
你这东西就不变了

13:35.890 --> 13:36.890
所以说呢

13:36.890 --> 13:38.890
它不会这样子做

13:38.890 --> 13:39.890
它不会这样子做

13:39.890 --> 13:40.890
因此呢

13:40.890 --> 13:41.890
它开发模式是不会启用的

13:41.890 --> 13:42.890
那怎么才能启用呢

13:42.890 --> 13:43.890
我们要打包

13:43.890 --> 13:44.890
你看着啊

13:44.890 --> 13:45.890
我们这里呢

13:45.890 --> 13:46.890
为了大家看得清楚一点

13:46.890 --> 13:48.890
我把这个Nex文件夹删掉

13:48.890 --> 13:50.890
这里呢我们用

13:50.890 --> 13:51.890
NpmRomBuild

13:51.890 --> 13:53.890
也就是运行的是NexBuild

13:53.890 --> 13:54.890
运行这个名字

13:54.890 --> 13:55.890
来打包

13:55.890 --> 13:57.890
给大家看一下

14:00.390 --> 14:02.700
稍等一会儿啊

14:02.700 --> 14:04.700
你会发现有一些

14:04.700 --> 14:06.700
比较神奇的现象

14:06.700 --> 14:07.700
稍微等一下

14:07.700 --> 14:08.700
稍微再等一下

14:09.700 --> 14:11.700
因为它这里干嘛呢

14:11.700 --> 14:15.700
它就在启用优化生产环境

14:15.700 --> 14:18.140
勾件

14:18.140 --> 14:20.140
估计这里卡住了

14:20.140 --> 14:25.310
等一下吧

14:25.310 --> 14:27.310
这个跑线我不知道怎么回事

14:27.310 --> 14:29.310
一直经常会卡住

14:29.310 --> 14:33.480
算了

14:33.480 --> 14:34.480
重新来一次吧

14:34.480 --> 14:36.480
它应该是卡住了

14:36.480 --> 14:37.480
应该不是程序卡住了

14:37.480 --> 14:39.480
是我们那个跑线卡住了

14:39.480 --> 14:41.480
经常都会卡住

14:41.480 --> 14:45.580
我们现在什么都没有做

14:45.580 --> 14:46.580
什么都没有做

14:46.580 --> 14:48.580
那么它就自动的启用了

14:48.580 --> 14:49.580
这个功能

14:49.580 --> 14:50.580
就是自动优化

14:50.580 --> 14:51.580
那么大家看一下

14:51.580 --> 14:52.580
它这里呢告诉我

14:52.580 --> 14:54.580
我的页面有三个

14:54.580 --> 14:55.580
一个是404页面

14:55.580 --> 14:56.580
一个是呢

14:56.580 --> 14:57.580
首页

14:57.580 --> 14:58.580
那么这个是模板

14:58.580 --> 14:59.580
不用管它

14:59.580 --> 15:00.580
这个是模尾页

15:00.580 --> 15:01.580
电影页

15:01.580 --> 15:02.580
一共就三个页面

15:02.580 --> 15:03.580
每个页面呢

15:03.580 --> 15:04.580
它的尺寸

15:04.580 --> 15:05.580
可以说了

15:05.580 --> 15:06.580
然后第一次加这个页面

15:06.580 --> 15:07.580
最多最终

15:07.580 --> 15:09.580
要加载多少个资源

15:10.580 --> 15:11.580
那么现在的

15:11.580 --> 15:12.580
大家看前面一个圈圈

15:12.580 --> 15:13.580
对吧

15:13.580 --> 15:14.580
前面一个圈圈

15:14.580 --> 15:15.580
那么下面我们来看一下

15:17.580 --> 15:18.580
下面有个图例

15:18.580 --> 15:19.580
它有这么一个

15:19.580 --> 15:20.580
这个叫什么

15:20.580 --> 15:21.580
那么打对吧

15:21.580 --> 15:23.580
如果说是这个符号的话

15:23.580 --> 15:25.580
那么表示是服务端渲染

15:25.580 --> 15:26.580
就对针对这个页面

15:26.580 --> 15:27.580
比方说

15:27.580 --> 15:28.580
这个首页

15:28.580 --> 15:29.580
如果说是这个符号

15:29.580 --> 15:30.580
那么就表示这个首页的话

15:30.580 --> 15:31.580
我没有静态化

15:31.580 --> 15:32.580
我只是

15:32.580 --> 15:33.580
那么我使用的是服务端渲染

15:33.580 --> 15:34.580
就是为每一次请求

15:34.580 --> 15:35.580
我渲染一遍

15:35.580 --> 15:36.580
每一次请求渲染一遍

15:36.580 --> 15:37.580
是这么个意思

15:37.580 --> 15:38.580
那么下面这个

15:39.580 --> 15:40.580
Static

15:40.580 --> 15:41.580
Static

15:41.580 --> 15:42.580
这个玩意

15:42.580 --> 15:43.580
就叫做静态化

15:43.580 --> 15:44.580
静态化有两种

15:45.580 --> 15:46.580
静态化有两种

15:47.580 --> 15:48.580
那么这里

15:48.580 --> 15:49.580
还不能这样说

15:49.580 --> 15:50.580
一种说静态化

15:50.580 --> 15:51.580
静态化有两种

15:51.580 --> 15:52.580
第一种

15:52.580 --> 15:54.580
叫做存静态化

15:56.580 --> 15:57.580
存静态化

15:57.580 --> 15:58.580
这是我们测解可谅讲的

15:58.580 --> 15:59.580
比较简单的

15:59.580 --> 16:00.580
第二种

16:00.580 --> 16:01.580
叫做SS

16:04.580 --> 16:05.580
叫什么

16:05.580 --> 16:06.580
叫做

16:06.580 --> 16:07.580
SSG

16:07.580 --> 16:08.580
SSG

16:08.580 --> 16:09.580
就是我们刚才说的

16:09.580 --> 16:10.620
叫做什么

16:10.620 --> 16:11.620
server

16:11.620 --> 16:12.620
服务端

16:12.620 --> 16:14.620
Static Generator

16:17.730 --> 16:18.730
那么我们这几个 Red Cat

16:18.730 --> 16:20.730
看到的是存静态化

16:20.730 --> 16:21.730
大家看一下

16:21.730 --> 16:22.730
大家看一下一个

16:22.730 --> 16:24.730
比较神奇的现象

16:24.730 --> 16:25.730
你看我们在这里

16:25.730 --> 16:26.730
因为它

16:27.730 --> 16:30.730
我们输出了 endex render

16:31.730 --> 16:32.730
输出了

16:33.730 --> 16:34.730
我们现在請求

16:35.730 --> 16:36.730
我们在刚才的购物件

16:36.730 --> 16:37.850
我们服务对话

16:37.850 --> 16:39.890
服务器都还没运行 怎么可能请求呢

16:39.890 --> 16:42.410
我们刚才在购物件 也就是在购物件阶段

16:42.410 --> 16:44.530
他就把这两个输出了 说明什么

16:44.530 --> 16:48.450
在打包阶段 他就已经运行了我们的渲染

16:48.450 --> 16:50.010
他就已经运行了渲染

16:50.010 --> 16:51.930
好 那么我们来看一下这个图例

16:51.930 --> 16:54.810
他肯定不是服务端 服务端渲染了现在

16:54.810 --> 16:56.930
那么现在是什么呢

16:56.930 --> 16:59.170
SSG也不是 我们下一课讲这个东西

16:59.170 --> 17:03.810
SSG 那么这一课我们看到Static就是纯净态化

17:03.810 --> 17:05.490
他用的是纯净态化

17:05.490 --> 17:06.730
纯净态化是什么意思呢

17:06.730 --> 17:08.290
就是在我们打包的时候

17:08.290 --> 17:10.850
他就把我们那些需要纯净态化的页面

17:10.850 --> 17:12.730
他这个东西分一分析 谁在分析

17:12.730 --> 17:14.330
就这个东西在分析

17:14.330 --> 17:16.890
他分析出来 这些页面都可以纯净态化

17:16.890 --> 17:18.450
包括我们什么四零四啊

17:18.450 --> 17:20.050
movies都可以纯净态化

17:20.050 --> 17:23.130
那么他就会把这些东西全部变成一个

17:23.130 --> 17:26.410
真真正正的净态页面

17:26.410 --> 17:27.610
好 咱们来看一下吧

17:27.610 --> 17:30.450
看一下是不是一个真真正正的净态页面呢

17:30.450 --> 17:31.650
我们在这里呢

17:31.650 --> 17:33.610
找到那个是打包的结果

17:33.610 --> 17:36.250
这里一个server server里面一个Static

17:36.290 --> 17:37.370
这里还有两个

17:37.370 --> 17:38.490
因为我们运行的两次

17:38.490 --> 17:41.490
每一次运行的他有个哈希纸不一样的

17:41.490 --> 17:42.610
咱们来看一下

17:42.610 --> 17:46.010
四零四index movies

17:46.010 --> 17:48.170
那么我进去index看一下

17:48.170 --> 17:50.410
你看这些东西是不是全在页面里面了

17:50.410 --> 17:51.690
他不用运行任何东西

17:51.690 --> 17:53.850
页面上就已经全部包含了

17:53.850 --> 17:57.010
所以说到现在我们就形成了这么一个场景

17:57.010 --> 17:59.130
他在打包的时候就生存了净态页面

17:59.130 --> 18:01.290
那么后续刻不断请求的时候

18:01.290 --> 18:03.730
他直接把净态页面扔给你就完事了

18:03.730 --> 18:05.010
直接扔给你就完事了

18:05.010 --> 18:06.130
好 咱们来看一下吧

18:06.170 --> 18:07.810
看一下是不是这样子

18:07.810 --> 18:09.410
那么现在不是开发环境了

18:09.410 --> 18:11.290
我们现在要运行服务器怎么运行的

18:11.290 --> 18:13.690
就不是MPM装dev了

18:13.690 --> 18:15.330
应该是MPMstart

18:15.330 --> 18:17.250
就这个mini

18:17.250 --> 18:19.330
用这个

18:19.330 --> 18:20.410
Nexstart

18:20.410 --> 18:21.250
那么他会

18:21.250 --> 18:24.050
他就会运行这个Nexem模组下面打包结果

18:24.050 --> 18:25.170
咱们来看一下

18:25.170 --> 18:27.810
start

18:27.810 --> 18:29.770
那么现在我们来看一下

18:29.770 --> 18:33.410
这里边我们再刷新运行

18:33.410 --> 18:34.570
你看是不是得到首页了

18:34.610 --> 18:36.690
电影页刷新

18:36.690 --> 18:37.890
电影页

18:37.890 --> 18:39.650
然后我们来看一下服务器这边

18:39.650 --> 18:40.730
有输出吗

18:40.730 --> 18:42.290
因这个事Render有输出吗

18:42.290 --> 18:43.010
没有吧

18:43.010 --> 18:44.610
Movie是Render有输出吗

18:44.610 --> 18:45.570
是不是也没有

18:45.570 --> 18:45.890
对吧

18:45.890 --> 18:47.370
因为它是纯净态化的

18:47.370 --> 18:48.690
它是纯净态化的

18:48.690 --> 18:50.930
所以说服务端就直接把净态页面给你了

18:50.930 --> 18:54.450
他这个时候就对任何请求都没有服务端宣传了

18:54.450 --> 18:56.170
那么全是给了一个净态页面

18:56.170 --> 18:58.010
这样子就极大的优化了

18:58.010 --> 18:59.730
它的效率

18:59.730 --> 19:01.290
服务圈压力就没那么大了

19:01.290 --> 19:03.770
给你净态页面的压力就非常小了

19:03.970 --> 19:05.330
没有这个意思吧

19:05.330 --> 19:05.490
好

19:05.490 --> 19:06.970
那么不要再来一个

19:06.970 --> 19:08.290
再来一个

19:08.290 --> 19:11.250
如果说我这个index

19:11.250 --> 19:12.650
在这里边

19:12.650 --> 19:14.210
在这里边比方说吧

19:14.210 --> 19:16.970
我们这里边如果说去做了这么一件事

19:16.970 --> 19:18.330
生成一个水积数

19:18.330 --> 19:19.650
你看我在这里呢

19:19.650 --> 19:21.530
生成一个水积数

19:21.530 --> 19:22.170
Mesh

19:22.170 --> 19:23.010
Render

19:23.010 --> 19:24.330
你会发现一个神奇的现象

19:24.330 --> 19:28.460
你们自己想一想会有什么样的结果

19:29.620 --> 19:30.700
重新打包

19:35.700 --> 19:36.500
打包的时候

19:36.500 --> 19:37.780
这会有一个什么样的结果呢

19:37.820 --> 19:38.820
就像我们打包的时候

19:38.820 --> 19:39.700
它就会进行渲染

19:39.700 --> 19:39.900
对吧

19:39.900 --> 19:41.060
因为它是静态化的

19:41.060 --> 19:41.820
所以我们打包的时候

19:41.820 --> 19:43.260
它就会进行渲染

19:43.260 --> 19:45.460
你看全是静态化的

19:45.460 --> 19:46.180
那么打包的时候

19:46.180 --> 19:46.780
渲染过后了

19:46.780 --> 19:48.780
它就把水积数已经生成进去了

19:48.780 --> 19:49.020
对吧

19:49.020 --> 19:50.140
已经生成进去了

19:50.140 --> 19:51.700
那么现在如果说我们这里

19:51.700 --> 19:52.220
Rone

19:52.220 --> 19:54.220
Dev

19:54.220 --> 19:55.020
Start

19:55.020 --> 19:55.660
运行

19:55.660 --> 19:57.940
那么我们来看一下客户端这一块

19:57.940 --> 19:59.260
这一块

19:59.260 --> 20:00.340
行不行了

20:00.340 --> 20:01.500
客户端这一块

20:01.500 --> 20:02.340
我们这里刷新

20:04.420 --> 20:05.060
刷新

20:05.060 --> 20:06.580
你会看到

20:06.580 --> 20:07.460
是不是有一个抖动

20:07.460 --> 20:08.140
客户端这边

20:08.140 --> 20:09.140
是不是有一个抖动

20:09.140 --> 20:09.900
为什么呢

20:09.900 --> 20:12.460
你会看到服务器给我们的水积数

20:12.460 --> 20:14.020
全部都是一样的

20:14.020 --> 20:15.660
0.109

20:15.660 --> 20:17.020
然后我们再刷新

20:17.020 --> 20:18.060
然后我们再看

20:18.060 --> 20:20.140
再看服务器给我们的结果

20:20.140 --> 20:21.340
右键看它原来

20:21.340 --> 20:22.860
服务器给我们的还是0.109

20:22.860 --> 20:23.420
为什么

20:23.420 --> 20:25.220
因为服务器给我们的是静态一面

20:25.220 --> 20:26.020
在打包的时候

20:26.020 --> 20:27.660
就已经生成好的静态一面

20:27.660 --> 20:28.900
到了客户端这边

20:28.900 --> 20:31.060
我们又要重新渲染

20:31.060 --> 20:32.500
重新渲染是不是把改变了

20:32.500 --> 20:33.100
对吧

20:33.100 --> 20:35.860
那么就会形成这么一个效果

20:35.900 --> 20:36.900
没有意思吧

20:36.900 --> 20:37.740
OK

20:37.740 --> 20:38.940
那又说说我

20:38.940 --> 20:41.500
希望服务软每一次运行也是水积的

20:41.500 --> 20:44.180
如果说你希望服务软每一次运行也是水积的

20:44.180 --> 20:45.820
那肯定不能用这种方式

20:45.820 --> 20:47.820
肯定不能用纯净态化

20:47.820 --> 20:51.340
那么可以用我们下节课要学的SSG

20:51.340 --> 20:52.100
没有意思吧

20:52.100 --> 20:54.180
那么这里可能我们先给大家介绍一下

20:54.180 --> 20:56.220
纯净态化是怎么回事

20:56.220 --> 20:57.460
它有什么样的好处

20:57.460 --> 20:58.900
它来解决什么样的问题

20:58.900 --> 21:00.020
以及它是怎么做的

21:00.020 --> 21:01.020
它做的法很简单

21:01.020 --> 21:02.180
就是在打包的时候

21:02.180 --> 21:03.540
把这些东西全部渲染一遍

21:03.540 --> 21:05.220
该样全部渲染一遍

21:05.220 --> 21:07.220
好一渲染过去形成了

21:07.220 --> 21:08.820
形成了真真正正的

21:08.820 --> 21:09.860
ATM

21:09.860 --> 21:10.860
真正的ATM

21:10.860 --> 21:12.020
纯的ATM页面

21:12.020 --> 21:14.340
然后后续的请求就不再渲染了

21:14.340 --> 21:15.300
直接给它

21:15.300 --> 21:16.860
当然前提条件

21:16.860 --> 21:19.300
事要这个页面它本身是纯净态的

21:19.300 --> 21:21.420
如果说这个页面是服务端渲染的

21:21.420 --> 21:22.020
那就不行

21:22.020 --> 21:24.820
那这个页面每次请求还得渲染一次

21:24.820 --> 21:26.580
只针对了一些纯净态的页面

21:26.580 --> 21:28.660
我就直接把今天页面给你

21:28.660 --> 21:29.820
好大家下去试一下

21:29.820 --> 21:30.860
这东西非常了不起

21:30.860 --> 21:32.780
非常好用的

21:32.820 --> 21:35.220
好那么这里就是这些可能

21:35.220 --> 21:36.980
那种要纯净态的东西

21:36.980 --> 21:38.660
当然纯净态的东西

21:38.660 --> 21:39.820
它是用于什么场景

21:39.820 --> 21:41.820
就哪些要纯净态的

21:41.820 --> 21:42.780
那么肯定是

21:42.780 --> 21:44.980
希望所有人看到的都一样

21:44.980 --> 21:46.780
也不能说跟不同的用户

21:46.780 --> 21:48.180
看到的就先差万别

21:48.180 --> 21:50.620
那个这个东西肯定不行

21:50.620 --> 21:53.220
那么一定是所有用户看到一样的

21:53.220 --> 21:54.420
看到一样的这个区域

21:54.420 --> 21:56.500
当然这个地方还可以不断的延伸

21:56.500 --> 21:58.380
有时候同学说

21:58.380 --> 22:00.780
这个页面上可能有些动态内容

22:00.780 --> 22:03.220
比方说下面要加点一个评论

22:03.220 --> 22:04.900
或者是显示一些广告

22:04.900 --> 22:07.740
那么这些广告是根据用户来生成出来的

22:07.740 --> 22:09.700
不同的用户看到的广告会不一样

22:09.700 --> 22:11.980
那么这个时候大家想一想

22:11.980 --> 22:12.620
问题来了

22:12.620 --> 22:13.820
这个问题抛给你们了

22:13.820 --> 22:14.380
像这个问题

22:14.380 --> 22:17.260
大家如果说你技术功力不太深厚的话

22:17.260 --> 22:20.060
或者是你的技术经验不太多的话

22:20.060 --> 22:22.700
那么这个东西可能可以很容易迷惑人

22:22.700 --> 22:25.340
比方说我们现在就学到纯净态化技术

22:25.340 --> 22:26.900
我们刚才我刚才的问题是

22:27.740 --> 22:30.100
把那个就是

22:30.100 --> 22:34.860
如果说根据每一个用户要显示不同的广告

22:34.860 --> 22:35.860
放到这儿

22:35.860 --> 22:37.260
那么这个时候

22:37.260 --> 22:39.340
适不适合用纯净态化

22:39.340 --> 22:40.340
好好想一想

22:40.340 --> 22:45.000
首先他肯定要明确的是

22:45.000 --> 22:47.280
一旦纯净态化所有用户看到都是一样的

22:47.280 --> 22:51.400
那么这个时候适不适合用纯净态化呢

22:51.400 --> 22:53.800
我知道你们答案

22:53.800 --> 22:55.320
但是我告诉你适合

22:55.320 --> 22:57.760
还是适合用纯净态化

22:57.760 --> 22:58.480
为什么

22:59.040 --> 23:00.720
那么你想一想

23:00.720 --> 23:04.040
我们之所以学习服务端券展的问题在哪

23:04.040 --> 23:07.480
之所以学习服务端券展的原因在哪

23:07.480 --> 23:08.760
第一

23:08.760 --> 23:10.280
防止白平

23:10.280 --> 23:10.760
对吧

23:10.760 --> 23:12.160
第二

23:12.160 --> 23:13.400
优化SEO

23:13.400 --> 23:14.360
那么两个问题

23:14.360 --> 23:15.120
一个问题

23:15.120 --> 23:16.600
一个问题看

23:16.600 --> 23:18.440
那么服务端交给我的结果

23:18.440 --> 23:19.240
没有广告

23:19.240 --> 23:20.600
就广告了一块没有

23:20.600 --> 23:22.200
显示没显示出来

23:22.200 --> 23:24.720
影不影响我们整个页面的观感

23:24.720 --> 23:26.400
所以不影响他不是个广告吗

23:26.400 --> 23:26.880
对吧

23:26.920 --> 23:28.760
只是个广告而已

23:28.760 --> 23:30.520
跟白平就没什么关系

23:30.520 --> 23:32.680
因为我们重要的一种权都是出来了

23:32.680 --> 23:32.960
对吧

23:32.960 --> 23:34.400
只是一个广告不同而已

23:34.400 --> 23:36.120
所以说我把广告不要他宣传

23:36.120 --> 23:37.880
不要力够宣传广告

23:37.880 --> 23:38.120
好

23:38.120 --> 23:39.720
第二

23:39.720 --> 23:41.240
那么如果说

23:41.240 --> 23:44.760
那个SEO

23:44.760 --> 23:46.760
广告需不需要SEO

23:46.760 --> 23:47.600
不需要吧

23:47.600 --> 23:49.440
一广告越多还不利于SEO

23:49.440 --> 23:49.680
对吧

23:49.680 --> 23:51.160
我们还不希望

23:51.160 --> 23:54.360
就是说以前看到我们网上到到处的是广告

23:54.400 --> 23:55.640
因此

23:55.640 --> 23:57.640
他仍然是可以是进化的

23:57.640 --> 23:58.560
比方说我们这个地方

23:58.560 --> 24:00.480
只要是只要是所谓用户看到的一样

24:00.480 --> 24:01.120
OK

24:01.120 --> 24:04.200
那么我们就可以利用客户端的后续券

24:04.200 --> 24:04.480
对吧

24:04.480 --> 24:06.400
比方说我们在这里怎么用呢

24:06.400 --> 24:07.160
用一个

24:07.160 --> 24:07.720
比方说

24:11.700 --> 24:12.620
Ragged

24:12.620 --> 24:13.380
怎么睡的

24:14.620 --> 24:15.700
那么这里呢

24:15.700 --> 24:16.780
我们这里写一个

24:16.780 --> 24:17.540
EOS

24:17.540 --> 24:18.980
而Fax

24:18.980 --> 24:19.420
稍等一下

24:19.420 --> 24:28.580
把手机关一下

24:28.580 --> 24:29.020
好

24:29.020 --> 24:29.900
那么我们这里EOS

24:29.900 --> 24:30.380
而Fax

24:30.380 --> 24:30.540
对吧

24:30.540 --> 24:32.980
那么之前我们在客户端搞定

24:32.980 --> 24:33.900
我们在客户端搞定

24:33.940 --> 24:34.940
比方说我们在这里

24:34.940 --> 24:37.340
使用一个UserFax

24:37.340 --> 24:38.740
那么这里我们写上

24:38.740 --> 24:39.820
一开始的时候

24:39.820 --> 24:40.500
我们干嘛

24:40.500 --> 24:41.260
夹载广告

24:41.260 --> 24:41.820
对吧

24:41.820 --> 24:43.940
夹载广告数据

24:43.940 --> 24:44.460
对不对

24:44.460 --> 24:45.780
我们一开始就可以这样玩

24:45.780 --> 24:46.940
一开始广告是没有的

24:46.940 --> 24:47.460
对吧

24:47.460 --> 24:48.260
一开始是没有的

24:48.260 --> 24:49.020
比方说

24:49.020 --> 24:51.820
我们这里写上一个UserState

24:51.820 --> 24:54.220
UserState

24:54.220 --> 24:56.380
这里我们用一个UserState

24:56.380 --> 24:57.980
它能用内图键也行

24:57.980 --> 24:58.420
也行

24:58.420 --> 24:59.380
都一样的

24:59.380 --> 25:01.340
那么ADVS

25:01.340 --> 25:02.900
ADVS

25:02.900 --> 25:03.500
广告

25:03.540 --> 25:04.980
广告数组

25:04.980 --> 25:05.540
那么这里

25:05.540 --> 25:06.420
一个空数组

25:06.420 --> 25:07.140
一开始空数组

25:07.140 --> 25:08.380
空数组自然就显示不出来

25:08.380 --> 25:08.860
对吧

25:08.860 --> 25:09.500
那么这里

25:09.500 --> 25:11.260
我们有个UI

25:11.260 --> 25:12.940
那么UI是哪里

25:12.940 --> 25:14.660
来自广告数组的循环

25:14.660 --> 25:15.820
Map

25:15.820 --> 25:17.180
ADV

25:17.180 --> 25:17.580
显示什么

25:17.580 --> 25:18.620
广告的名称

25:18.620 --> 25:19.260
广告的名称

25:19.260 --> 25:20.220
一个超链接

25:20.220 --> 25:22.300
一个超链接广告的名称

25:22.300 --> 25:24.020
Map

25:24.020 --> 25:25.020
一个超链接

25:25.020 --> 25:26.660
广告的名称

25:26.660 --> 25:28.500
ADV.link

25:28.500 --> 25:29.540
然后广告的链接

25:31.740 --> 25:32.940
ADV.link

25:32.940 --> 25:34.500
当然广告就不用用路由了

25:34.500 --> 25:36.540
广告就挑战到其他网站了

25:36.540 --> 25:38.060
Target Blank

25:39.340 --> 25:40.540
你看

25:40.540 --> 25:41.980
那么现在我们来在这里

25:43.780 --> 25:45.580
当我们这里完成之后

25:45.580 --> 25:47.820
我们就Set ADVS

25:47.820 --> 25:49.780
给它放一些广告进去

25:49.780 --> 25:52.180
比方说这里就是阿迦克知情球来的广告

25:52.180 --> 25:53.940
我们这里再加几条广告

25:53.940 --> 25:54.900
link

25:54.900 --> 25:57.960
这是百度

25:57.960 --> 25:59.160
百度

25:59.160 --> 26:01.040
然后呢

26:01.040 --> 26:02.440
百度

26:02.440 --> 26:03.080
OK

26:03.120 --> 26:04.680
那么这里是

26:04.680 --> 26:05.800
新浪

26:07.000 --> 26:08.680
新浪

26:08.680 --> 26:09.480
那怎么没有

26:09.480 --> 26:10.960
怎么能没有独一呢

26:10.960 --> 26:12.080
独一

26:12.080 --> 26:12.920
哪一个

26:12.920 --> 26:14.360
这里是独一

26:14.360 --> 26:15.360
EDU

26:15.360 --> 26:16.400
抵抗

26:16.400 --> 26:16.840
OK

26:16.840 --> 26:19.240
那么现在我们来看一下

26:19.240 --> 26:21.000
我们现在重新来一次

26:21.000 --> 26:23.840
完整的走一次这个流程

26:23.840 --> 26:25.520
我们现在运行NPM

26:25.520 --> 26:26.760
当然开发模式就可以了

26:26.760 --> 26:27.360
开发模式

26:27.360 --> 26:29.240
因为它为了方便调试

26:29.240 --> 26:30.960
所以说不会有静态化的

26:30.960 --> 26:32.320
Rombill

26:32.360 --> 26:35.080
我们在真实的环境里面打包

26:36.360 --> 26:36.520
好

26:36.520 --> 26:37.240
打包的时候

26:37.240 --> 26:38.480
我们来看一下

26:38.480 --> 26:40.480
我们看它生成出来的页面结果

26:40.480 --> 26:42.800
有没有广告

26:42.800 --> 26:43.840
有没有

26:43.840 --> 26:44.840
那肯定是没有的

26:44.840 --> 26:46.040
肯定是没有的

26:46.040 --> 26:47.800
为什么说肯定是没有的呢

26:47.800 --> 26:49.600
我们来看一下

26:49.600 --> 26:50.760
那个是

26:50.760 --> 26:51.720
server

26:51.720 --> 26:52.400
static

26:52.400 --> 26:53.320
就在这

26:53.320 --> 26:54.560
那么我们来看一下

26:54.560 --> 26:55.120
生成的

26:55.120 --> 26:57.160
这个社里面有没有广告

26:57.160 --> 26:57.920
广告呢

26:57.920 --> 26:59.280
我们的广告是哪去了

26:59.280 --> 27:01.320
你看一下广告

27:01.560 --> 27:02.520
是不是没有广告

27:02.520 --> 27:02.920
对吧

27:02.920 --> 27:03.760
没有广告

27:03.760 --> 27:05.880
这个水技术后面有没有

27:05.880 --> 27:06.480
为什么

27:06.480 --> 27:08.640
因为我们知道服务端是无论如何

27:08.640 --> 27:10.320
都没有办法去运行这个玩意的

27:10.320 --> 27:10.600
对吧

27:10.600 --> 27:13.240
这个东西是已经渲染完成之后的事情

27:13.240 --> 27:15.040
因此服务端已经渲染完了

27:15.040 --> 27:16.880
所以说服务端渲染的时候

27:16.880 --> 27:18.480
这个是不是伪空束组

27:18.480 --> 27:20.320
因此它渲染不出来这个东西

27:20.320 --> 27:21.640
渲染不出来

27:21.640 --> 27:22.760
但是客户端

27:22.760 --> 27:24.320
那么它静态页面里面是没有的

27:24.320 --> 27:25.920
但是静态页面我们也不需要它有

27:25.920 --> 27:26.240
对吧

27:26.240 --> 27:27.200
不需要它有

27:27.200 --> 27:28.320
那么我们这里

27:28.320 --> 27:30.600
客户端这里接管后续的渲染

27:30.640 --> 27:32.720
这个东西是在客户端运行的

27:32.720 --> 27:34.600
所以说我们这里

27:34.600 --> 27:36.800
再去运行启动

27:36.800 --> 27:38.920
NPU Start

27:38.920 --> 27:39.800
通过这个例子

27:39.800 --> 27:41.040
大家可以想象的到

27:41.040 --> 27:42.800
很多传统都可以这样子来做

27:42.800 --> 27:43.000
好

27:43.000 --> 27:44.520
咱们刷新

27:44.520 --> 27:45.000
你看

27:45.000 --> 27:45.840
就显示出来了

27:45.840 --> 27:46.480
对吧

27:46.480 --> 27:47.480
显示出来了

27:47.480 --> 27:48.680
显示出来了

27:48.680 --> 27:49.840
怎么这么丑了

27:53.600 --> 27:55.280
怎么这么丑

27:55.280 --> 27:56.120
行吧

27:56.120 --> 27:57.040
行吧

27:57.040 --> 27:58.120
无所谓吧

27:58.200 --> 28:00.840
这里我放一个Li

28:00.840 --> 28:02.720
我们就说没有Li

28:04.960 --> 28:07.680
当然要重新打包了

28:07.680 --> 28:09.480
因为我们现在访问的是静态页面

28:09.480 --> 28:11.600
静态页面必须要重新打包

28:11.600 --> 28:12.720
但是我们也可以看到

28:12.720 --> 28:13.800
这东西是谁宣扬出来的

28:13.800 --> 28:14.360
是客户端

28:14.360 --> 28:16.680
因为服务器给我们的结果

28:16.680 --> 28:18.280
是没有的

28:18.280 --> 28:19.080
你看

28:20.080 --> 28:21.800
在这里UL是没有的

28:21.800 --> 28:22.920
那么通过这个例子

28:22.920 --> 28:23.720
大家可以知道

28:23.720 --> 28:26.080
可以延伸出很多场景

28:26.080 --> 28:28.000
比方说一篇文章

28:28.000 --> 28:29.480
文章又有什么文章内容

28:29.480 --> 28:31.440
文章标题和评论

28:31.440 --> 28:33.720
文章是不是所有用户看到都一样的

28:33.720 --> 28:35.160
不可能说你看这篇文章

28:35.160 --> 28:36.520
跟我看的不一样

28:36.520 --> 28:37.040
都是

28:37.040 --> 28:39.160
当然前提条件是同一篇文章

28:39.160 --> 28:40.480
你看到的同一篇文章

28:40.480 --> 28:41.360
跟我看的内容不一样

28:41.360 --> 28:42.000
那是不可能的

28:42.000 --> 28:42.480
对吧

28:42.480 --> 28:45.320
我还目前没有见过这么奇葩的需求

28:45.320 --> 28:46.760
但是这个页面中

28:46.760 --> 28:48.840
除了文章是主体数据

28:48.840 --> 28:51.040
那么我们就可以把静态化

28:51.040 --> 28:53.160
那么有没有差异性的数据

28:53.160 --> 28:54.920
有什么评论

28:54.920 --> 28:55.400
对吧

28:55.400 --> 28:56.440
评论是差异性的数据

28:58.000 --> 29:00.720
客户端来接管后续宣展

29:00.720 --> 29:01.920
我们评论这一块

29:01.920 --> 29:03.200
如果说当然前提条件

29:03.200 --> 29:04.280
如果说你评论这一块

29:04.280 --> 29:05.960
不希望它SEO的话

29:05.960 --> 29:06.760
那么OK

29:06.760 --> 29:10.280
交款给客户端来进行后续宣展

29:10.280 --> 29:12.400
明白的意思吧

29:12.400 --> 29:15.160
那么这个东西就是静态化

29:15.160 --> 29:16.920
存静态化

29:16.920 --> 29:18.240
OK

29:18.240 --> 29:20.600
当然存静态化

29:20.600 --> 29:22.480
不能覆盖所有的场景

29:22.480 --> 29:24.000
在有一些场景下边

29:24.000 --> 29:25.320
可能比较特殊

29:25.320 --> 29:26.600
那么咱们下一课来说

29:26.600 --> 29:29.960
SSG叫做服务端静态生成

29:29.960 --> 29:30.280
好

29:30.280 --> 29:31.440
那么下一个课来看

29:31.440 --> 29:33.040
SSG这一块内容比较多

