WEBVTT

00:00.750 --> 00:02.750
咱们接着上集合来做

00:02.750 --> 00:06.750
这集合咱们的目标是要在服务端渲染REx组建

00:06.750 --> 00:10.750
我们目前是给它一个写实的ATM对吧

00:10.750 --> 00:13.750
请求任何地址 给它显示这个东西

00:13.750 --> 00:16.750
那么这一部分我们希望不是写实的一个字幕串

00:16.750 --> 00:18.750
是一个组建的渲染结果

00:18.750 --> 00:20.750
我们把组建的渲染结果放这

00:20.750 --> 00:23.750
因为我们以前学习REx的时候

00:23.750 --> 00:26.750
都是在客户端渲染在浏览器里面渲染组建

00:26.750 --> 00:28.750
那么服务性能不能渲染组建呢

00:29.750 --> 00:31.750
那肯定是说得通的

00:31.750 --> 00:33.750
如果说服务器不能渲染组建的话

00:33.750 --> 00:35.750
那么这门客就没有意义了

00:35.750 --> 00:37.750
因为我们之前讲REx的时候

00:37.750 --> 00:39.750
告诉大家REx的东西

00:39.750 --> 00:41.750
它跟那个浏览器是没有关系的

00:41.750 --> 00:43.750
是没有什么关系的

00:43.750 --> 00:46.750
它只是其实就是来搞定这个虚的洞

00:46.750 --> 00:50.750
那么我们跟浏览器有关系的是哪一个部分呢

00:50.750 --> 00:52.750
跟浏览器有关系的是个REx洞

00:52.750 --> 00:54.750
是这个东西

00:54.750 --> 00:56.750
是不是这个东西跟浏览器有关系

00:56.750 --> 00:58.750
那么其实这个东西呢

00:58.750 --> 01:01.750
它不仅仅是可以把一个虚拟动物节点

01:01.750 --> 01:03.750
渲染成真实的动物节点

01:03.750 --> 01:04.750
它还有一个作用

01:04.750 --> 01:07.750
就是可以把虚拟动物节点渲染成一个制服串

01:07.750 --> 01:09.750
而渲染成一个制服串之后呢

01:09.750 --> 01:11.750
我们只需要把这个制服串放这

01:11.750 --> 01:12.750
是不是就完事了

01:12.750 --> 01:14.750
因此服务端渲染来个原理

01:14.750 --> 01:15.750
其实特别简单

01:15.750 --> 01:17.750
就是我们写号REx组建

01:17.750 --> 01:18.750
然后让这个东西

01:18.750 --> 01:20.750
把我们的组建渲染成一个制服串

01:20.750 --> 01:22.750
然后我们把制服串放到这个位置

01:22.750 --> 01:24.750
就发送给客户端

01:24.750 --> 01:25.750
就自然看到渲染的结果了

01:25.750 --> 01:27.750
这就是服务端渲染

01:27.750 --> 01:29.750
那咱们来写一下

01:29.750 --> 01:30.750
我们这些课的目标

01:30.750 --> 01:32.750
是要在服务器渲染REx组建

01:32.750 --> 01:33.750
有很多问题需要解决

01:33.750 --> 01:34.750
我们一个个来

01:34.750 --> 01:36.750
首先我们在SRC里边

01:36.750 --> 01:37.750
去建立一个REx组建

01:37.750 --> 01:38.750
先建个文件夹吧

01:38.750 --> 01:40.750
比方说我们建立一个Pages

01:42.750 --> 01:45.750
页面里边去加一个组建

01:45.750 --> 01:46.750
加一个什么组建呢

01:46.750 --> 01:48.750
比方说加一个Home组建

01:48.750 --> 01:49.750
Home组建

01:49.750 --> 01:50.750
我们一般来说组建就是一个目录

01:50.750 --> 01:51.750
对吧

01:51.750 --> 01:53.750
这里边也可以有CSS

01:53.750 --> 01:54.750
一些资源都在里边

01:54.750 --> 01:55.750
好

01:55.750 --> 01:56.750
咱们在这里边写上一个

01:56.750 --> 01:58.750
index.jsx

01:58.750 --> 01:59.750
OK

01:59.750 --> 02:01.750
那么我们在这里去

02:01.750 --> 02:02.750
注意都是服务器端

02:02.750 --> 02:04.750
跟客户端没有一毛钱关系

02:04.750 --> 02:06.750
然后我们安装

02:06.750 --> 02:08.750
安装REx

02:08.750 --> 02:09.750
REx 都

02:09.750 --> 02:11.750
把这两个安装了

02:11.750 --> 02:12.750
好 让它安装

02:12.750 --> 02:14.750
然后我们在这里边写上

02:14.750 --> 02:16.750
一个函数组建

02:16.750 --> 02:18.750
写上一个函数组建

02:18.750 --> 02:19.750
Import Rex

02:19.750 --> 02:22.750
然后倒出一个函数

02:22.750 --> 02:27.470
Export Default

02:27.470 --> 02:29.470
函数组建

02:29.470 --> 02:31.470
这只能提示用面了

02:32.470 --> 02:33.470
好 返回呢

02:33.470 --> 02:34.470
返回一个就是

02:34.470 --> 02:35.470
H1

02:35.470 --> 02:36.470
返回一个H1

02:36.470 --> 02:37.470
然后呢

02:37.470 --> 02:39.470
这是Home

02:39.470 --> 02:40.470
页面

02:40.470 --> 02:41.470
好了

02:41.470 --> 02:42.470
我们就写好了

02:42.470 --> 02:43.470
对吧

02:43.470 --> 02:44.470
那么接下来呢

02:44.470 --> 02:45.470
我们要怎么来写呢

02:45.470 --> 02:46.470
写这个代码呢

02:46.470 --> 02:48.470
首先到Server这边

02:48.470 --> 02:50.470
到Server这边

02:50.470 --> 02:51.470
到Server这边

02:51.470 --> 02:52.470
我们刚才说了

02:52.470 --> 02:53.470
我们要把这个组建

02:53.470 --> 02:55.470
选择成一个制服串放置

02:55.470 --> 02:56.470
选择成一个制服串放置

02:56.470 --> 02:57.470
那我们这里呢

02:57.470 --> 02:58.470
怎么来操作呢

02:58.470 --> 03:00.470
我们可以利用这种方式

03:00.470 --> 03:01.470
Import

03:02.470 --> 03:03.470
倒入什么呢

03:03.470 --> 03:05.470
倒入这个Home组建

03:05.470 --> 03:06.470
From

03:06.470 --> 03:07.470
叫斜槓

03:07.470 --> 03:08.470
Patches

03:08.470 --> 03:09.470
Home

03:09.470 --> 03:10.470
倒入这个Home组建

03:10.470 --> 03:11.470
倒入了Home组建之后呢

03:11.470 --> 03:13.470
我们要干嘛

03:13.470 --> 03:14.470
现在呢

03:14.470 --> 03:16.470
我们要利用REx

03:16.470 --> 03:17.470
我们把写在上面去

03:17.470 --> 03:18.470
这是ES6的

03:18.470 --> 03:19.470
火花代码

03:19.470 --> 03:20.470
写到这上面

03:20.470 --> 03:21.470
利用REx

03:21.470 --> 03:22.470
Dome里边的东西

03:22.470 --> 03:23.470
RExDome

03:25.470 --> 03:26.470
From

03:26.470 --> 03:27.470
RExDome

03:27.470 --> 03:28.470
利用它这里边的东西

03:28.470 --> 03:30.470
它里边的东西呢

03:30.470 --> 03:31.470
之前呢

03:31.470 --> 03:32.470
我们可以把它

03:32.470 --> 03:33.470
选择成一个真实动物元素

03:33.470 --> 03:34.470
放到页面

03:34.470 --> 03:35.470
但是现在已经在服务器了

03:35.470 --> 03:36.470
它没有真实的

03:36.470 --> 03:37.470
没有页面

03:37.470 --> 03:38.470
根本就没不存在页面

03:38.470 --> 03:39.470
所以说

03:39.470 --> 03:40.470
你生成个动物元素

03:40.470 --> 03:41.470
是没用的

03:41.470 --> 03:42.470
因此呢

03:42.470 --> 03:43.470
我们这里呢

03:43.470 --> 03:44.470
就不太是以前那种方法了

03:44.470 --> 03:45.470
以前怎么做的

03:45.470 --> 03:46.470
以前是RExDome

03:47.470 --> 03:48.470
Dome

03:48.470 --> 03:49.470
然后Render

03:49.470 --> 03:50.470
是用这种方式

03:50.470 --> 03:51.470
我们把Home主键

03:51.470 --> 03:52.470
是不是写在那儿

03:52.470 --> 03:53.470
Home主键写在那儿

03:53.470 --> 03:55.470
然后Document

03:55.470 --> 03:56.470
这里哪有Document

03:56.470 --> 03:57.470
根本就没有这个东西

03:57.470 --> 03:58.470
根本就没有页面

03:58.470 --> 03:59.470
那么现在呢

03:59.470 --> 04:00.470
我们不再用Render了

04:00.470 --> 04:01.470
而用它里边的

04:01.470 --> 04:02.470
另外一个函数

04:02.470 --> 04:04.470
叫做Render

04:05.470 --> 04:06.470
它这里边

04:06.470 --> 04:07.470
Server里边

04:07.470 --> 04:08.470
Server里边

04:08.470 --> 04:09.470
它有这么一个东西

04:11.470 --> 04:13.470
Render toStream

04:13.470 --> 04:14.470
有这个RExDome

04:14.470 --> 04:15.470
这个Code里边

04:15.470 --> 04:16.470
它这个Server

04:16.470 --> 04:17.470
字幕录下面

04:17.470 --> 04:19.470
它打包了一个

04:19.470 --> 04:20.470
就是GS

04:20.470 --> 04:21.470
一个模块

04:21.470 --> 04:22.470
这个模块里边

04:22.470 --> 04:23.470
有一个叫Render toStream

04:23.470 --> 04:24.470
就是把我们的一个

04:24.470 --> 04:26.470
把我们的一个主键

04:26.470 --> 04:27.470
渲染成一个字幕串

04:27.470 --> 04:28.470
渲染成一个字幕串

04:28.470 --> 04:30.470
我们在这里接受一下吧

04:30.470 --> 04:31.470
有时候说

04:31.470 --> 04:32.470
为什么写到这儿

04:32.470 --> 04:33.470
为什么不写外面

04:33.470 --> 04:34.470
是因为什么呢

04:34.470 --> 04:35.470
是因为我们是

04:35.470 --> 04:36.470
每一次请求过来

04:36.470 --> 04:37.470
才进行渲染

04:37.470 --> 04:38.470
对吧

04:38.470 --> 04:39.470
而不是服务器

04:39.470 --> 04:40.470
启动的时候就渲染好

04:40.470 --> 04:41.470
那么就发给

04:41.470 --> 04:42.470
每一个请求

04:42.470 --> 04:43.470
区别在哪儿呢

04:43.470 --> 04:44.470
区别在

04:44.470 --> 04:45.470
如果说你写上面

04:46.470 --> 04:47.470
就是

04:50.980 --> 04:51.980
Component

04:52.980 --> 04:53.980
Component

04:53.980 --> 04:55.980
ATM

04:55.980 --> 04:56.980
这是我们主键的

04:56.980 --> 04:57.980
主键的ATM代码

04:57.980 --> 04:58.980
渲染出来了

04:58.980 --> 04:59.980
如果说你写上面的话

04:59.980 --> 05:00.980
那么会导致一个

05:00.980 --> 05:01.980
什么结果呢

05:01.980 --> 05:02.980
那么你就是给

05:02.980 --> 05:03.980
每一个用户看到的东西

05:03.980 --> 05:04.980
就完全一样了

05:04.980 --> 05:05.980
其实我们

05:05.980 --> 05:06.980
做到后边

05:06.980 --> 05:07.980
你知道

05:07.980 --> 05:08.980
每个用户

05:08.980 --> 05:09.980
看到的东西

05:09.980 --> 05:10.980
是不一定一样的

05:10.980 --> 05:11.980
而且可能还会

05:11.980 --> 05:12.980
根据不同的

05:12.980 --> 05:13.980
请求地址

05:13.980 --> 05:14.980
来给它不同的东西

05:14.980 --> 05:15.980
当然我们目前

05:15.980 --> 05:16.980
肯定是一样的

05:16.980 --> 05:17.980
但是为了后边

05:17.980 --> 05:18.980
给大家解释清楚

05:18.980 --> 05:19.980
肯定要写到

05:19.980 --> 05:20.980
根据不同的请求

05:20.980 --> 05:21.980
来给它返回不同的

05:22.980 --> 05:23.980
就是主键确认的结果

05:25.980 --> 05:26.980
目前是一样的

05:26.980 --> 05:27.980
这里我们写字

05:27.980 --> 05:28.980
然后我们在这里

05:28.980 --> 05:29.980
输出一下

05:29.980 --> 05:31.980
输出一下Component

05:31.980 --> 05:35.380
ATM

05:35.380 --> 05:36.380
OK

05:36.380 --> 05:37.380
那么代码

05:37.380 --> 05:39.380
其实就写好了

05:39.380 --> 05:40.380
但是这里有

05:40.380 --> 05:42.380
好多好多问题

05:42.380 --> 05:44.380
你觉得代码能运行吗

05:44.380 --> 05:45.380
肯定是运行不了

05:45.380 --> 05:47.380
为啥运行不了呢

05:47.380 --> 05:48.380
你看

05:49.380 --> 05:50.380
这个代码弄的

05:50.380 --> 05:51.380
皆是能识别

05:51.380 --> 05:53.380
这个Yes6代码

05:53.380 --> 05:54.380
只不过要做一些

05:54.380 --> 05:55.380
特殊的处理

05:55.380 --> 05:56.380
不过目前肯定是

05:56.380 --> 05:57.380
识别不了

05:57.380 --> 05:58.380
另外呢

05:58.380 --> 05:59.380
能识别这个玩意吗

06:00.380 --> 06:01.380
能识别这个

06:01.380 --> 06:02.380
JSX表达是吗

06:02.380 --> 06:03.380
是不是也识别不了

06:03.380 --> 06:04.380
这个代码是没法运行的

06:04.380 --> 06:06.380
比方说你现在运行一下

06:06.380 --> 06:07.380
我们来看一下吧

06:07.380 --> 06:10.070
NPMROM

06:10.070 --> 06:11.070
我们上一课

06:11.070 --> 06:13.070
觉得DevStart

06:13.070 --> 06:14.070
来运行一下

06:14.070 --> 06:15.070
你看

06:15.070 --> 06:16.070
出了好多问题

06:16.070 --> 06:17.070
首先第一个问题

06:17.070 --> 06:19.070
Yes6代码根本就识别不了

06:19.070 --> 06:20.070
那么你觉得

06:20.070 --> 06:21.070
你把它转换成

06:21.070 --> 06:22.070
Require行不行

06:22.070 --> 06:23.070
Require是可以的

06:23.070 --> 06:24.070
Require是可以的

06:24.070 --> 06:25.070
但这个东西又识别不了了

06:25.070 --> 06:26.070
这个玩意

06:26.070 --> 06:27.070
JSX

06:27.070 --> 06:28.070
还有这个东西

06:28.070 --> 06:30.070
是不是都识别不了

06:30.070 --> 06:31.070
所以说这里面问题很多

06:31.070 --> 06:32.070
那么像这些问题

06:32.070 --> 06:33.070
怎么解决呢

06:33.070 --> 06:35.070
大家想想怎么解决

06:35.070 --> 06:36.070
是不是这些东西

06:36.070 --> 06:37.070
我们可以编译

06:37.070 --> 06:38.070
用WebPack来编译

06:38.070 --> 06:39.070
把它打包

06:39.070 --> 06:40.070
打包是不是就完了

06:40.070 --> 06:41.070
对吧

06:41.070 --> 06:42.070
所以说我们这里

06:42.070 --> 06:43.070
要利用WebPack来打包

06:43.070 --> 06:44.070
把它打包成一个

06:44.070 --> 06:45.070
正常的代码

06:45.070 --> 06:46.070
因为我们知道

06:46.070 --> 06:47.070
像这个东西

06:47.070 --> 06:48.070
WebPack可以打包

06:48.070 --> 06:49.070
把它变成了一个

06:49.070 --> 06:50.070
创建虚礼节点的代码

06:50.070 --> 06:51.070
因为Require里面

06:51.070 --> 06:53.070
有一个CreateElement

06:53.070 --> 06:54.070
来创建一个虚礼节点

06:54.070 --> 06:55.070
只不过我们目前

06:55.070 --> 06:56.070
其实也可以这样写

06:56.070 --> 06:57.070
只不过我们目前写下来

06:57.070 --> 06:58.070
就比较麻烦

06:58.070 --> 06:59.070
我们还是希望

06:59.070 --> 07:00.070
用JSX来打包

07:00.070 --> 07:02.070
所以我们要利用WebPack

07:02.070 --> 07:03.070
OK

07:03.070 --> 07:04.070
我们这里

07:04.070 --> 07:05.070
WebPack这东西

07:05.070 --> 07:06.070
不要认为是浏览器

07:06.070 --> 07:07.070
才能用的

07:07.070 --> 07:08.070
它就是在打包的

07:08.070 --> 07:09.070
它管理是什么环境

07:09.070 --> 07:11.070
我们这里来安装

07:11.070 --> 07:12.070
WebPack

07:12.070 --> 07:14.070
WebPackCD

07:14.070 --> 07:16.070
有大对问题要解决

07:16.070 --> 07:17.070
我们这里安装

07:17.070 --> 07:18.070
那么自然

07:18.070 --> 07:19.070
跟目录下面

07:19.070 --> 07:22.070
去写一个WebPack的配置

07:22.070 --> 07:24.070
WebPackConfig.js

07:24.070 --> 07:26.070
写这么一个配置

07:26.070 --> 07:28.070
然后我们这里导出

07:28.070 --> 07:30.070
Export

07:30.070 --> 07:32.070
导出Mode

07:32.070 --> 07:34.070
这是我们以前讲过的

07:34.070 --> 07:36.070
Development

07:38.070 --> 07:40.070
SourceMap加上

07:40.070 --> 07:42.070
DevTools

07:42.070 --> 07:43.070
DevTools

07:43.070 --> 07:45.070
SourceMap

07:45.070 --> 07:46.070
SourceMap

07:46.070 --> 07:47.070
加上

07:47.070 --> 07:48.070
打包什么呢

07:48.070 --> 07:50.070
我们的入口文件在哪呢

07:50.070 --> 07:51.070
入口文件在server.js

07:51.070 --> 07:52.070
对吧

07:52.070 --> 07:53.070
我们可以写上

07:53.070 --> 07:54.070
Enter

07:54.070 --> 07:57.070
入口文件在server.js

07:57.070 --> 07:58.070
server

07:58.070 --> 08:00.070
后面可以省略了

08:00.070 --> 08:01.070
OK

08:01.070 --> 08:02.070
那么写了过后

08:02.070 --> 08:04.070
现在打包看行不行呢

08:04.070 --> 08:06.070
我们来打包一下

08:06.070 --> 08:08.070
NPX WebPack

08:08.070 --> 08:09.070
打包

08:09.070 --> 08:10.070
看行不行

08:11.070 --> 08:12.070
那么它这个时候

08:12.070 --> 08:14.070
打包到时候给我打包了

08:14.070 --> 08:16.070
还有一个就是Map

08:16.070 --> 08:17.070
打包都是打包了

08:17.070 --> 08:19.070
但是问题是啥

08:19.070 --> 08:20.070
大家看一下

08:20.070 --> 08:21.070
问题呢是

08:21.070 --> 08:23.070
它有一些东西识别不了

08:23.070 --> 08:24.070
什么东西识别不了了

08:24.070 --> 08:25.070
像这个

08:25.070 --> 08:26.070
JSX

08:26.070 --> 08:27.070
是不是识别不了

08:27.070 --> 08:28.070
那么JSX

08:28.070 --> 08:30.070
识别不了是不是要转换

08:30.070 --> 08:32.070
因为WebPack很傻的

08:32.070 --> 08:34.070
它不知道这个JSX

08:34.070 --> 08:36.070
它不知道这个JSX是什么东西

08:36.070 --> 08:37.070
因此它识别不了

08:37.070 --> 08:38.070
识别不了的话

08:38.070 --> 08:39.070
我们需要转换

08:39.070 --> 08:40.070
那么怎么来转换了

08:40.070 --> 08:41.070
我们是不是可以利用

08:41.070 --> 08:42.070
BIBLE

08:42.070 --> 08:43.070
BIBLE的进行转换

08:43.070 --> 08:45.070
所以说我们还要安装BIBLE

08:45.070 --> 08:46.070
NPM

08:46.070 --> 08:47.070
BI

08:49.070 --> 08:50.070
BIBLE当然要利用WebPack的话

08:50.070 --> 08:52.070
肯定还要安装一个对应的BIBLEloader

08:52.070 --> 08:53.070
Core

08:53.070 --> 08:54.070
BIBLE的API

08:54.070 --> 08:56.070
还有什么BIBLE

08:57.070 --> 08:58.070
loader

08:58.070 --> 09:00.070
另外我们BIBLE里面

09:00.070 --> 09:02.070
要转换JSX的代码

09:02.070 --> 09:03.070
它还需要一个东西

09:03.070 --> 09:04.070
就是BIBLE预设

09:04.070 --> 09:05.070
咱们都学习过的

09:05.070 --> 09:06.070
默认的BIBLE预设

09:06.070 --> 09:07.070
有这么一个东西

09:07.070 --> 09:09.070
就是我们之前学习的时候

09:09.070 --> 09:10.070
BIBLE预设是这个

09:10.070 --> 09:11.070
Precious M

09:11.070 --> 09:12.070
BIBLE预设

09:12.070 --> 09:14.070
实际上还有一个预设

09:14.070 --> 09:15.070
Precious

09:15.070 --> 09:16.070
Precious

09:16.070 --> 09:17.070
React

09:17.070 --> 09:19.070
那么它专门来转换React代码的

09:19.070 --> 09:20.070
所以说我们还要安装这个

09:20.070 --> 09:21.070
那么这个东西安装了

09:21.070 --> 09:22.070
这个东西我觉得不用安装

09:22.070 --> 09:24.070
因为我们现在是loader环境

09:24.070 --> 09:26.070
loader环境肯定是兼容

09:26.070 --> 09:28.070
ES6,ES7,ES8都兼容的

09:28.070 --> 09:29.070
对吧

09:29.070 --> 09:30.070
你只要是新版本能loader

09:30.070 --> 09:32.070
服务器你不用考虑这种兼容性

09:32.070 --> 09:34.070
我们只需要去转换React代码就行了

09:34.070 --> 09:36.070
所以说我们把这个东西安装上

09:36.070 --> 09:37.070
OK

09:37.070 --> 09:38.070
安装这么三个

09:38.070 --> 09:40.070
那么跟它安装

09:40.070 --> 09:42.070
我们这里要配置

09:42.070 --> 09:44.070
loader

09:44.070 --> 09:45.070
对吧

09:45.070 --> 09:46.070
module

09:46.070 --> 09:47.070
我们配置一下

09:47.070 --> 09:48.070
loader

09:50.070 --> 09:51.070
module

09:54.070 --> 09:55.070
这什么

09:55.070 --> 09:56.070
弱势

09:56.070 --> 09:57.070
这里边规则

09:57.070 --> 09:58.070
第一个Test

09:59.070 --> 10:01.070
当我们匹配到什么文件

10:01.070 --> 10:03.070
当我们匹配到GSX的文件

10:03.070 --> 10:05.070
或者是GS文件

10:05.070 --> 10:06.070
这两个文件

10:06.070 --> 10:07.070
我们都需要通过

10:07.070 --> 10:09.070
因为我们知道React的

10:09.070 --> 10:11.070
主件文件可以是GS

10:11.070 --> 10:12.070
可以是GSX

10:12.070 --> 10:14.070
反而是匹配到GS

10:14.070 --> 10:15.070
GS大概温号

10:15.070 --> 10:17.070
GS可以出现0次或1次

10:17.070 --> 10:19.070
那么可以匹配GS文件

10:19.070 --> 10:20.070
可以匹配GSX文件

10:20.070 --> 10:21.070
那么匹配到之后

10:21.070 --> 10:22.070
我们使用

10:23.070 --> 10:24.070
使用什么呢

10:24.070 --> 10:26.070
使用那个就是byboardloader

10:26.070 --> 10:27.070
byboardloader

10:27.070 --> 10:28.070
对吧

10:28.070 --> 10:29.070
使用它

10:29.070 --> 10:31.070
byboardloader里面是有预设的

10:31.070 --> 10:32.070
是有预设的

10:32.070 --> 10:33.070
预设我们可以直接配置到这

10:33.070 --> 10:35.070
也可以单独来配置一个文件

10:35.070 --> 10:37.070
byboard的文件来进行配置

10:37.070 --> 10:38.070
我们直接配置到这

10:39.070 --> 10:42.070
那么这里我们把配置配置成个对象

10:42.070 --> 10:44.070
loader是什么

10:44.070 --> 10:46.070
是byboardloader

10:46.070 --> 10:48.070
那么它有预设

10:48.070 --> 10:49.070
Options

10:49.070 --> 10:50.070
Options

10:50.070 --> 10:51.070
那么presets

10:51.070 --> 10:52.070
presets

10:52.070 --> 10:53.070
预设是不是一个数组

10:53.070 --> 10:55.070
它可以配置很多预设

10:55.070 --> 10:56.070
其中一个预设

10:56.070 --> 10:58.070
就是我们的byboard

10:58.070 --> 10:59.070
presets

10:59.070 --> 11:00.070
那个什么

11:00.070 --> 11:01.070
react

11:01.070 --> 11:02.070
对吧

11:02.070 --> 11:03.070
就用配置这个预设

11:03.070 --> 11:04.070
然后还要思考一下

11:04.070 --> 11:06.070
就这个预设

11:06.070 --> 11:07.070
它能干嘛的

11:07.070 --> 11:08.070
它是不是来解决

11:08.070 --> 11:10.070
就是来解析我们的

11:10.070 --> 11:12.070
jsx代码的

11:12.070 --> 11:14.070
它对那些loaded modules

11:14.070 --> 11:16.070
目录需不需要解析

11:16.070 --> 11:17.070
不需要解析

11:17.070 --> 11:18.070
你去把这些目录里面

11:18.070 --> 11:19.070
因为我们依赖

11:19.070 --> 11:20.070
这个目录里面很多东西

11:20.070 --> 11:21.070
那如果说你把

11:21.070 --> 11:22.070
这个目录里面也去解析的话

11:22.070 --> 11:24.070
那反而就是

11:24.070 --> 11:26.070
就是降低了

11:26.070 --> 11:27.070
就是构建速度

11:27.070 --> 11:28.070
所以说我们应该

11:28.070 --> 11:29.070
排除了这个目录

11:29.070 --> 11:30.070
再说一次

11:30.070 --> 11:31.070
因为这个东西

11:31.070 --> 11:32.070
只对我们的代码里面

11:32.070 --> 11:34.070
jsx代码解析

11:34.070 --> 11:35.070
因为这里面是不存在

11:35.070 --> 11:36.070
jsx代码的

11:36.070 --> 11:37.070
所以这里面的东西

11:37.070 --> 11:38.070
是不需要解析的

11:38.070 --> 11:39.070
因此我们在

11:39.070 --> 11:40.070
这个loaded里面

11:40.070 --> 11:42.070
再排除一个exclude

11:42.070 --> 11:43.070
排除什么呢

11:43.070 --> 11:45.070
排除loaded modules

11:45.070 --> 11:47.070
排除这个目录

11:47.070 --> 11:48.070
好了

11:48.070 --> 11:49.070
现在就写完了

11:49.070 --> 11:50.070
那么写完之后

11:50.070 --> 11:51.070
我们再来打包

11:51.070 --> 11:52.070
再来试一下

11:52.070 --> 11:53.070
npxwpack

11:53.070 --> 11:54.070
还是肯定有

11:54.070 --> 11:55.070
还是有问题的

11:55.070 --> 11:56.070
不着急

11:56.070 --> 11:57.070
他说

11:57.070 --> 11:58.070
他说

11:58.070 --> 11:59.070
那个

11:59.070 --> 12:00.070
我们的配置有问题

12:00.070 --> 12:01.070
对吧

12:01.070 --> 12:02.070
exclude

12:02.070 --> 12:04.070
exclude

12:04.070 --> 12:06.070
配置在这

12:06.070 --> 12:07.070
配置在这

12:07.070 --> 12:09.070
就是我们针对这个jsx

12:09.070 --> 12:10.070
或者是js文件

12:10.070 --> 12:12.070
排除掉loaded modules

12:12.070 --> 12:13.070
目录

12:13.070 --> 12:14.070
然后排除掉之后

12:14.070 --> 12:16.070
那么我们自己的代码里面

12:16.070 --> 12:17.070
才会使用这个

12:17.070 --> 12:18.070
白箔load来进行处理

12:18.070 --> 12:19.070
ok

12:19.070 --> 12:20.070
我们再来一次

12:20.070 --> 12:21.070
npxwpack

12:21.070 --> 12:23.070
ok

12:23.070 --> 12:24.070
好看一下

12:25.070 --> 12:26.070
还是出了问题

12:26.070 --> 12:27.070
那么咱们看一下

12:27.070 --> 12:28.070
这个问题出在哪呢

12:28.070 --> 12:29.070
他说

12:29.070 --> 12:30.070
这些问题一看

12:30.070 --> 12:31.070
大部分都差不多

12:31.070 --> 12:33.070
can't resolve fs

12:33.070 --> 12:34.070
那个模块

12:34.070 --> 12:35.070
can't resolve net

12:35.070 --> 12:36.070
模块

12:36.070 --> 12:37.070
什么意思

12:37.070 --> 12:38.070
他提示一啥

12:38.070 --> 12:39.070
就是说

12:39.070 --> 12:40.070
他打包的时候

12:40.070 --> 12:41.070
因为他只是说

12:41.070 --> 12:42.070
这个loaded modules

12:42.070 --> 12:43.070
目录

12:43.070 --> 12:44.070
他不再

12:44.070 --> 12:45.070
不再应用loader

12:45.070 --> 12:46.070
对吧

12:46.070 --> 12:47.070
他不应用loader

12:47.070 --> 12:49.070
但是他要不要去打包loaded modules

12:49.070 --> 12:50.070
肯定是要打包的

12:50.070 --> 12:51.070
对吧

12:51.070 --> 12:52.070
这个目录肯定是要打包的

12:52.070 --> 12:53.070
但是在这个目录里边

12:53.070 --> 12:54.070
他用到了一些loaded

12:54.070 --> 12:55.070
js代码

12:55.070 --> 12:56.070
就loader环境里边代码

12:56.070 --> 12:57.070
你像这些东西

12:57.070 --> 12:58.070
是loaded的内置模块

12:58.070 --> 12:59.070
对吧

12:59.070 --> 13:00.070
那么

13:00.070 --> 13:01.070
vpeg很傻的

13:01.070 --> 13:02.070
他默认是

13:02.070 --> 13:03.070
他默认认为

13:03.070 --> 13:04.070
我们的打包的js

13:04.070 --> 13:05.070
是在浏览器里边运行的

13:05.070 --> 13:06.070
因此

13:06.070 --> 13:07.070
他会去找这个模块

13:07.070 --> 13:08.070
结果他找不到

13:08.070 --> 13:09.070
根本就找不到这个模块

13:09.070 --> 13:10.070
对吧

13:10.070 --> 13:11.070
他的loaded modules

13:11.070 --> 13:12.070
目录里边

13:12.070 --> 13:13.070
还找不到这种内置模块

13:13.070 --> 13:14.070
所以说他就

13:14.070 --> 13:15.070
找不到模块

13:15.070 --> 13:16.070
他就说

13:16.070 --> 13:17.070
can't resolve

13:17.070 --> 13:18.070
无法找到这个模块

13:18.070 --> 13:19.070
就当上这么一个问题

13:19.070 --> 13:20.070
因此我们现在

13:20.070 --> 13:21.070
要解决的问题就是

13:21.070 --> 13:22.070
要告诉vpeg

13:22.070 --> 13:23.070
我们的这个东西

13:23.070 --> 13:24.070
是在loader

13:24.070 --> 13:25.070
环境里边运行的

13:25.070 --> 13:26.070
你不要那么傻

13:26.070 --> 13:27.070
你看这些东西

13:27.070 --> 13:28.070
是loaded内置模块

13:28.070 --> 13:29.070
所以说我们这里

13:29.070 --> 13:30.070
给他一个page

13:31.070 --> 13:32.070
告诉他

13:32.070 --> 13:33.070
我们这里是loader环境

13:33.070 --> 13:34.070
而不是浏览器环境

13:34.070 --> 13:35.070
默认是browser

13:35.070 --> 13:36.070
对吧

13:36.070 --> 13:37.070
默认是浏览器环境

13:37.070 --> 13:38.070
好我们这样子

13:38.070 --> 13:39.070
已经显得过后再来打包

13:39.070 --> 13:40.070
好

13:40.070 --> 13:42.070
npxvpeg

13:42.070 --> 13:43.070
看一下

13:43.070 --> 13:44.070
还有没有问题

13:44.070 --> 13:46.960
OK

13:46.960 --> 13:47.960
那么这样子打包过后

13:47.960 --> 13:48.960
还又出了一个问题

13:48.960 --> 13:49.960
打包到是结束了

13:49.960 --> 13:50.960
还又出了一个问题

13:50.960 --> 13:51.960
他说

13:51.960 --> 13:52.960
can't resolve

13:52.960 --> 13:53.960
pages home

13:53.960 --> 13:54.960
啥意思呢

13:54.960 --> 13:55.960
就是说

13:55.960 --> 13:56.960
我们的目前

13:56.960 --> 13:57.960
它是这样子

13:57.960 --> 13:58.960
你看我们这里

13:58.960 --> 14:00.960
我们目前倒入的是

14:00.960 --> 14:01.960
pages home

14:01.960 --> 14:02.960
对吧

14:02.960 --> 14:03.960
默认情况下

14:03.960 --> 14:04.960
因为我们只写了个目录

14:04.960 --> 14:06.960
它会读什么index.js文件

14:06.960 --> 14:07.960
它为什么是读的

14:07.960 --> 14:08.960
它首先会读这个文件

14:08.960 --> 14:10.960
index.js的文件

14:10.960 --> 14:11.960
对吧

14:11.960 --> 14:12.960
但是呢

14:12.960 --> 14:13.960
它读这个后续名是啥

14:13.960 --> 14:15.960
后续名它默认的是js

14:15.960 --> 14:16.960
而不是jsx

14:16.960 --> 14:18.960
那么我们要希望它读

14:18.960 --> 14:20.960
它后续名去读这个jsx

14:20.960 --> 14:21.960
怎么办呢

14:21.960 --> 14:23.960
默认是读index.js

14:23.960 --> 14:24.960
它读的是js

14:24.960 --> 14:25.960
而不是x

14:25.960 --> 14:26.960
那么没有js文件

14:26.960 --> 14:27.960
它就读不到

14:27.960 --> 14:28.960
所以说它这个模块

14:28.960 --> 14:29.960
它又告诉你找不到

14:29.960 --> 14:30.960
找不到这个模块

14:30.960 --> 14:31.960
因此我们这里

14:31.960 --> 14:32.960
要告诉它

14:32.960 --> 14:33.960
给它配置一个扩展名

14:33.960 --> 14:35.960
我们可以在这样的配置

14:35.960 --> 14:36.960
看一下吧

14:36.960 --> 14:37.960
这个也有点忘了

14:37.960 --> 14:39.960
我也拍一个

14:39.960 --> 14:40.960
像这些配置忘了

14:40.960 --> 14:41.960
你查一下就行了

14:41.960 --> 14:44.960
那个就是中文的

14:44.960 --> 14:45.960
配置

14:45.960 --> 14:48.960
配置里边有一个result

14:48.960 --> 14:49.960
解析

14:49.960 --> 14:50.960
解析里边我们配置一个

14:50.960 --> 14:51.960
配置一个这个吧

14:51.960 --> 14:52.960
而lias

14:52.960 --> 14:53.960
然后再加一个extension是吧

14:53.960 --> 14:54.960
而lias

14:54.960 --> 14:55.960
就是配置一个

14:55.960 --> 14:56.960
关联的目录

14:56.960 --> 14:57.960
关联的目录

14:57.960 --> 14:58.960
我们把配置上

14:58.960 --> 15:02.720
这个是叫做result

15:02.720 --> 15:05.720
那么这里我们先配置一个lias

15:06.720 --> 15:07.720
这个东西

15:07.720 --> 15:08.720
我们后边

15:08.720 --> 15:09.720
写下来可能要方便一点

15:09.720 --> 15:10.720
而lias

15:10.720 --> 15:12.720
我们配置一个就行了

15:12.720 --> 15:14.720
一个ata

15:14.720 --> 15:15.720
一个ata

15:15.720 --> 15:16.720
ata就表示这么一个目录

15:16.720 --> 15:18.720
就表示src目录

15:18.720 --> 15:20.720
咱们在这里使用一个pass

15:20.720 --> 15:21.720
因为要解决的路径

15:21.720 --> 15:25.720
require pass

15:26.720 --> 15:28.720
这边我们写上pass

15:29.720 --> 15:30.720
result

15:31.720 --> 15:33.720
当前目录下边的src目录

15:33.720 --> 15:35.720
那么用ata就关联到src

15:35.720 --> 15:37.720
那么之后我们导入一个包的时候

15:37.720 --> 15:38.720
如果说我们写了个ata

15:38.720 --> 15:39.720
就表示src目录了

15:39.720 --> 15:40.720
这样子

15:40.720 --> 15:42.720
在成绩比较深的时候

15:42.720 --> 15:43.720
是比较方便的

15:43.720 --> 15:44.720
里面学到560

15:44.720 --> 15:45.720
肯定都懂得我在说什么

15:45.720 --> 15:47.720
那么这里我们把这个配置好

15:47.720 --> 15:49.720
然后再配置一个extensions

15:49.720 --> 15:53.290
extensions

15:53.290 --> 15:54.290
extensions

15:54.290 --> 15:55.290
我看一下

15:56.290 --> 15:58.290
复制一下

15:58.290 --> 15:59.290
extensions

15:59.290 --> 16:00.290
然后它是个数组

16:00.290 --> 16:02.290
那么我们给它配置一些扩展名

16:02.290 --> 16:04.290
比方说.jsx

16:04.290 --> 16:05.290
包括什么csx

16:05.290 --> 16:06.290
一个配置上吧

16:06.290 --> 16:07.290
咱们敢弄上

16:07.290 --> 16:09.290
OK就这样吧

16:09.290 --> 16:11.290
好写到这儿

16:11.290 --> 16:12.290
好写好了之后

16:12.290 --> 16:13.290
我们再来

16:13.290 --> 16:15.290
再打包NPS Webpack

16:19.460 --> 16:20.460
你看现在是正确了

16:20.460 --> 16:21.460
对吧打包完成了

16:21.460 --> 16:23.460
那打包的结果有点大

16:23.460 --> 16:24.460
有点大

16:24.460 --> 16:25.460
1.16兆

16:25.460 --> 16:26.460
为什么结果有点大

16:26.460 --> 16:28.460
因为它把loaded margin

16:28.460 --> 16:30.460
目录里面的东西也关联进来了

16:30.460 --> 16:31.460
也放到打包结果里面了

16:31.460 --> 16:33.460
因为我们用了express

16:33.460 --> 16:34.460
用了rex

16:34.460 --> 16:35.460
用了rex.dont

16:35.460 --> 16:36.460
它就把里面的东西

16:36.460 --> 16:37.460
所有东西全部打包进来了

16:37.460 --> 16:39.460
所以说内容特别特别的多

16:39.460 --> 16:41.460
因此我希望了

16:41.460 --> 16:42.460
它不要把loaded margin

16:42.460 --> 16:43.460
目录的东西弄进来

16:43.460 --> 16:45.460
因为我们现在是loader环境

16:45.460 --> 16:46.460
我们肯定

16:46.460 --> 16:47.460
不适量浏览器

16:47.460 --> 16:48.460
我们这个东西发布出去了

16:48.460 --> 16:49.460
本身就是loader环境

16:49.460 --> 16:50.460
但服务器端执行的

16:50.460 --> 16:51.460
服务器端肯定要安装

16:51.460 --> 16:52.460
这个loaded margin目录

16:52.460 --> 16:53.460
所以我们不希望把它

16:53.460 --> 16:54.460
把这些东西打包进来

16:54.460 --> 16:56.460
因此我们这里可以用什么

16:56.460 --> 16:57.460
把排除掉

16:57.460 --> 16:59.460
用这个extras

16:59.460 --> 17:01.460
用这个东西把排除掉

17:01.460 --> 17:02.460
那么这个东西

17:02.460 --> 17:03.460
我们以前讲过

17:03.460 --> 17:04.460
讲vpeg的时候讲过

17:04.460 --> 17:05.460
就是说高速

17:05.460 --> 17:06.460
vpeg哪些

17:06.460 --> 17:08.460
本来就是外部的东西

17:08.460 --> 17:09.460
你不需要参与到打包结果

17:09.460 --> 17:11.460
那么我们这里怎么告诉呢

17:11.460 --> 17:12.460
就告诉他loaded margin

17:12.460 --> 17:13.460
目录里面的东西不用打包

17:13.460 --> 17:15.460
那么这个loaded margin

17:15.460 --> 17:16.460
里面这么多东西

17:16.460 --> 17:17.460
你怎么来告诉他呢

17:17.460 --> 17:18.460
那么这个地方

17:18.460 --> 17:19.460
我们可以使用一个cool

17:19.460 --> 17:20.460
使用一个cool的名字

17:20.460 --> 17:21.460
叫做这个

17:21.460 --> 17:23.460
vpegload extras

17:23.460 --> 17:24.460
叫做这个名字

17:24.460 --> 17:25.460
那么通过这个cool

17:25.460 --> 17:26.460
可以轻松的排除掉

17:26.460 --> 17:27.460
loaded margin目录

17:27.460 --> 17:29.460
那么我们这里安装一下这个cool

17:29.460 --> 17:31.460
NPMI 很刚递

17:31.460 --> 17:33.460
安装

17:33.460 --> 17:35.460
好 让它安装

17:35.460 --> 17:36.460
然后我们在这边

17:36.460 --> 17:38.460
就写导入这个cool

17:38.460 --> 17:41.460
叫做loaded extras

17:41.460 --> 17:43.460
require

17:43.460 --> 17:46.460
叫做vpegloaded extras

17:46.460 --> 17:47.460
导入进来

17:47.460 --> 17:48.460
那么这个cool

17:48.460 --> 17:50.460
它是一个方法

17:51.460 --> 17:52.460
我看一下

17:52.460 --> 17:53.460
是一个方法

17:53.460 --> 17:54.460
是一个方法

17:54.460 --> 17:55.460
调用 调到它过后

17:55.460 --> 17:57.460
它就反而回到一个

17:57.460 --> 17:59.460
反而回到一个就是这里的配置

17:59.460 --> 18:00.460
告诉他

18:00.460 --> 18:01.460
告诉这个 extras

18:01.460 --> 18:03.460
那么哪些东西说要排除掉

18:03.460 --> 18:04.460
那么loaded margin

18:04.460 --> 18:05.460
它会需要排除掉

18:05.460 --> 18:06.460
OK

18:06.460 --> 18:07.460
那么我们这里保存一下

18:07.460 --> 18:09.460
接下来我们再来打包

18:09.460 --> 18:12.830
npxvpeg

18:12.830 --> 18:13.830
打包 你看

18:13.830 --> 18:14.830
现在是不是小多了

18:14.830 --> 18:16.830
Made.js 只有6.7 kb

18:16.830 --> 18:17.830
就小多了

18:17.830 --> 18:19.830
其实loaded环境也不需要

18:19.830 --> 18:20.830
这个source map

18:20.830 --> 18:22.830
也不需要这个source map

18:22.830 --> 18:24.830
因此我们把这个设备浪

18:25.830 --> 18:27.830
source map主要是给浏览器环境用的

18:28.830 --> 18:29.830
好 再打包

18:29.830 --> 18:32.460
OK

18:32.460 --> 18:34.460
现在是不是只有6 kb了

18:34.460 --> 18:35.460
就小多了

18:35.460 --> 18:37.460
好 那我们再来改造一下代码

18:37.460 --> 18:38.460
代码要稍微改造一下

18:38.460 --> 18:40.460
因为我们这个server.js

18:40.460 --> 18:41.460
我们就希望统一

18:41.460 --> 18:42.460
像require

18:42.460 --> 18:43.460
我们就不希望写了

18:43.460 --> 18:45.460
我们都希望用es6的语法

18:45.460 --> 18:47.460
express

18:47.460 --> 18:49.460
from

18:49.460 --> 18:50.460
express

18:51.460 --> 18:52.460
好 那么看一下

18:52.460 --> 18:54.460
还有哪一require没有

18:54.460 --> 18:55.460
好像没了

18:55.460 --> 18:57.460
咱们再来运行一下

18:58.460 --> 18:59.460
打包 都是一样的

18:59.460 --> 19:01.460
因为vpeg他支持两种模后的话

19:01.460 --> 19:02.460
都支持

19:02.460 --> 19:03.460
交给vpeg就行了

19:03.460 --> 19:04.460
好 打包

19:04.460 --> 19:05.460
好 打包之后

19:05.460 --> 19:07.460
我们再来运行一下

19:07.460 --> 19:08.460
看行不行

19:08.460 --> 19:09.460
我们运行哪一个

19:09.460 --> 19:10.460
运行的就不是这个了

19:10.460 --> 19:11.460
不能运行这个了

19:11.460 --> 19:12.460
运行打包之后的结果

19:12.460 --> 19:13.460
怎么弄

19:13.460 --> 19:15.460
这个source map没去掉

19:15.460 --> 19:17.460
好 那么我们这里

19:17.460 --> 19:18.460
运行一下

19:18.460 --> 19:19.460
运行哪一个

19:19.460 --> 19:21.460
des目录下面的me

19:21.460 --> 19:22.460
你看

19:22.460 --> 19:23.460
都可以

19:23.460 --> 19:24.460
对吧 可以

19:24.460 --> 19:25.460
接下来

19:25.460 --> 19:26.460
我们来看一下

19:26.460 --> 19:27.460
看一下行不行

19:27.460 --> 19:29.460
我们这里来访问localhost

19:29.460 --> 19:31.460
8080

19:31.460 --> 19:32.460
一回车

19:32.460 --> 19:33.460
他说什么呢

19:33.460 --> 19:35.460
rex is not different

19:35.460 --> 19:36.460
这里包了一个错

19:36.460 --> 19:37.460
rex is not different

19:37.460 --> 19:38.460
什么意思呢

19:38.460 --> 19:39.460
就是说

19:39.460 --> 19:40.460
因为我们这个地方

19:40.460 --> 19:42.460
我们使用的是jsx表达式

19:42.460 --> 19:43.460
你看一下

19:43.460 --> 19:44.460
最后打包的结果

19:44.460 --> 19:45.460
jsx表达式

19:45.460 --> 19:46.460
一定会被转换成这个

19:46.460 --> 19:47.460
quate elements

19:47.460 --> 19:48.460
对吧 会被转换成这个东西

19:48.460 --> 19:49.460
所以说

19:49.460 --> 19:50.460
这个东西

19:50.460 --> 19:52.460
它一定要用到rex里面的API

19:52.460 --> 19:53.460
我们以前讲过的吧

19:53.460 --> 19:54.460
反而是使用了jsx

19:54.460 --> 19:56.460
你是不是得导入rex

19:56.460 --> 19:58.460
导入rex

19:58.460 --> 20:00.460
保存 再重新打包

20:00.460 --> 20:04.540
NPS Webpack

20:04.540 --> 20:06.540
好 重新打包之后

20:06.540 --> 20:07.540
我们来看一下

20:07.540 --> 20:09.540
然后再来运行load

20:09.540 --> 20:11.540
des目录下面的me

20:11.540 --> 20:13.540
接下来刷新

20:13.540 --> 20:14.540
这里显示出来了

20:14.540 --> 20:15.540
说服务器启动了

20:15.540 --> 20:17.540
然后再看控制台

20:17.540 --> 20:18.540
看到没

20:18.540 --> 20:19.540
看到没

20:19.540 --> 20:20.540
这个玩意是哪来的

20:20.540 --> 20:21.540
这个字幕串哪来的

20:21.540 --> 20:23.540
这个字幕串是不是

20:23.540 --> 20:25.540
这里

20:25.540 --> 20:28.540
这个东西是不是来自于

20:28.540 --> 20:30.540
就这里的输出

20:30.540 --> 20:32.540
说来自于这里的输出

20:32.540 --> 20:33.540
没问题吧

20:33.540 --> 20:34.540
这里的输出

20:34.540 --> 20:36.540
因为我们这里得到了

20:36.540 --> 20:37.540
确认出来是一个字幕串

20:37.540 --> 20:38.540
它把字幕串输出了

20:38.540 --> 20:40.540
于是这里就输出了字幕串

20:40.540 --> 20:42.540
它为什么输出两次呢

20:42.540 --> 20:44.540
或者是这个问题

20:44.540 --> 20:46.540
为什么输出两次呢

20:46.540 --> 20:48.540
我们只请求了一次

20:48.540 --> 20:49.540
为什么输出两次

20:49.540 --> 20:50.540
是这样子

20:50.540 --> 20:51.540
不是我手走了刷新了

20:51.540 --> 20:52.540
是这样子

20:52.540 --> 20:54.540
因为我们目前

20:54.540 --> 20:56.540
访问这个页面的时候

20:56.540 --> 20:58.540
浏览器它有一种机制

20:58.540 --> 20:59.540
它会去访问

20:59.540 --> 21:00.540
它第一次访问一个页面的时候

21:00.540 --> 21:02.540
它还要去请求服务器

21:02.540 --> 21:05.180
这个东西

21:05.180 --> 21:06.180
对吧

21:06.180 --> 21:07.180
是不是请求这个东西

21:07.180 --> 21:09.180
就是我们浏览器图标

21:09.180 --> 21:10.180
请求这个东西

21:10.180 --> 21:11.180
它也会被这里收到

21:11.180 --> 21:12.180
这也会接受这个请求

21:12.180 --> 21:14.180
因为它这里接受任何请求

21:14.180 --> 21:15.180
所以说这个问题

21:15.180 --> 21:16.180
我们要归避一下

21:16.180 --> 21:19.180
那问题是怎么归避呢

21:19.180 --> 21:20.180
其实很简单

21:20.180 --> 21:22.180
咱们去下载一个图标就行了

21:22.180 --> 21:24.180
因为你们以后的开发网页

21:24.180 --> 21:25.180
肯定是要有这个图标的

21:25.180 --> 21:27.180
所以说你去下载一个

21:27.180 --> 21:28.180
咱们就是

21:28.180 --> 21:29.180
当然不是下载一个

21:29.180 --> 21:31.180
你们是设计师学里做好的

21:31.180 --> 21:33.180
你们是你们网站的一个logo

21:33.180 --> 21:34.180
一个小图标

21:34.180 --> 21:35.180
比方说像这个Webpack

21:35.180 --> 21:36.180
看这里一个小图标

21:36.180 --> 21:37.180
对吧

21:37.180 --> 21:38.180
那干脆是这样子吧

21:38.180 --> 21:40.180
我就直接用rex的小图标

21:40.180 --> 21:41.180
我去整一下

21:41.180 --> 21:42.180
整个它的

21:45.180 --> 21:47.180
我把它这个下载下来

21:48.180 --> 21:49.180
好

21:49.180 --> 21:50.180
这个下载下来之后

21:50.180 --> 21:52.180
我们把这个图标保存在哪呢

21:52.180 --> 21:54.180
我就把它复制一下

21:54.180 --> 21:56.180
把保存到一个public目录里边去

21:56.180 --> 21:58.180
保存到一个静态目录

21:58.180 --> 22:00.180
public里面学过webpack

22:00.180 --> 22:01.180
应该知道

22:01.180 --> 22:03.180
学过那个express

22:03.180 --> 22:04.180
应该知道

22:04.180 --> 22:05.180
那放到这

22:05.180 --> 22:06.180
放到这它就能访问了吗

22:06.180 --> 22:08.180
还是不能访问

22:08.180 --> 22:09.180
还是不能访问

22:09.180 --> 22:10.180
你现在去访问一下

22:10.180 --> 22:11.180
手动访问一下

22:11.180 --> 22:13.180
5 icon

22:13.180 --> 22:14.180
sio

22:14.180 --> 22:15.180
得到了还是这个页面

22:15.180 --> 22:16.180
对吧

22:16.180 --> 22:17.180
我们的express里面

22:17.180 --> 22:19.180
他这时候所有的请求都给他

22:19.180 --> 22:20.180
这个页面

22:20.180 --> 22:21.180
随便你什么请求

22:21.180 --> 22:22.180
他都是

22:22.180 --> 22:24.180
随便你什么请求他都是这个页面

22:24.180 --> 22:26.180
那么现在我们要做的就是

22:26.180 --> 22:27.180
我们要把这个目录

22:27.180 --> 22:29.180
硬设成为一个静态目录

22:29.180 --> 22:30.180
就是说如果说这个目录里面

22:30.180 --> 22:31.180
有相应的文件

22:31.180 --> 22:32.180
我就把相应的文件给你

22:32.180 --> 22:34.180
而不是给你这么一个东西

22:34.180 --> 22:35.180
好了怎么来做呢

22:35.180 --> 22:37.180
我们就可以利用

22:37.180 --> 22:39.180
use 使用一个中间键

22:39.180 --> 22:42.180
那么这里呢使用express static

22:42.180 --> 22:44.180
我们把public目录下面的东西

22:44.180 --> 22:47.180
把public目录下面的东西给他

22:47.180 --> 22:48.180
就是把它作为静态资源

22:48.180 --> 22:50.180
只要你public目录下面

22:50.180 --> 22:51.180
根据你的路径

22:51.180 --> 22:52.180
访问的路径

22:52.180 --> 22:53.180
我们从public里面去找

22:53.180 --> 22:54.180
如果找到了过后

22:54.180 --> 22:55.180
就直接给你

22:55.180 --> 22:57.180
我就不用再走后边了

22:57.180 --> 22:58.180
找不到再走后边

22:58.180 --> 22:59.180
那么这样子一写

22:59.180 --> 23:02.620
我们再重新来一次

23:02.620 --> 23:03.620
npx webpack

23:03.620 --> 23:06.620
重新打包

23:06.620 --> 23:08.620
然后呢

23:08.620 --> 23:12.620
npm run

23:12.620 --> 23:14.620
然后是那个

23:14.620 --> 23:17.620
load dist index

23:17.620 --> 23:19.620
OK那么现在呢

23:19.620 --> 23:20.620
我们再来看一下

23:20.620 --> 23:22.620
如果说我们访问这个

23:22.620 --> 23:24.620
你看是不是得到个图标了

23:24.620 --> 23:25.620
对吧这里也没有打印

23:25.620 --> 23:27.620
因为我们这个代码是没有运作的

23:27.620 --> 23:29.620
也被这里接货了

23:29.620 --> 23:30.620
好如果说我们访问

23:30.620 --> 23:33.620
现在在访问去访问首页

23:33.620 --> 23:34.620
那么你看这里是不是

23:34.620 --> 23:35.620
只输出了一次

23:35.620 --> 23:37.620
对吧只输出了一次

23:37.620 --> 23:38.620
非常简单对吧

23:38.620 --> 23:39.620
那么接下来呢

23:39.620 --> 23:40.620
我们现在知道了

23:40.620 --> 23:41.620
我们的rex

23:41.620 --> 23:42.620
渲染出来的一个字不算

23:42.620 --> 23:44.620
我们只需要把这个字不算放到哪了

23:44.620 --> 23:45.620
放到这个位置

23:45.620 --> 23:46.620
对吧我们用字不算拼接

23:46.620 --> 23:47.620
然后放到这个位置

23:47.620 --> 23:48.620
就可以了

23:48.620 --> 23:50.620
啊就可以了

23:50.620 --> 23:52.620
好OK那么咱们来保存

23:52.620 --> 23:54.620
啊这里停止重新来一次

23:54.620 --> 23:56.620
呃先

23:56.620 --> 23:58.620
打包

23:58.620 --> 24:00.620
好打包完了过后呢

24:00.620 --> 24:01.620
我们再来

24:01.620 --> 24:03.620
好这样子运行出来

24:03.620 --> 24:05.620
好小心啊你看

24:05.620 --> 24:07.620
是不是就把rex的主键

24:07.620 --> 24:08.620
渲染出来了对吧

24:08.620 --> 24:09.620
你看我们元代吧

24:09.620 --> 24:11.620
那么这个东西是服务器渲染

24:11.620 --> 24:12.620
出来的

24:12.620 --> 24:13.620
那么通过这个元代码查看

24:13.620 --> 24:14.620
因为这个元代码呢

24:14.620 --> 24:16.620
其实就是从服务器得到的结果

24:16.620 --> 24:17.620
点击右键查看元代码

24:17.620 --> 24:18.620
就是从服务器得到的结果

24:18.620 --> 24:20.620
那么可以很清楚的看到

24:20.620 --> 24:22.620
这是服务器直接交给客户端了

24:22.620 --> 24:23.620
那么浏览器他根本就不知道

24:23.620 --> 24:25.620
服务器是怎么渲染出来的

24:25.620 --> 24:26.620
他无所谓的

24:26.620 --> 24:28.620
浏览器他给我什么我就渲染什么

24:28.620 --> 24:30.620
就给他一个完整的一天没页面

24:30.620 --> 24:32.620
OK那么现在呢服务端渲染就搞定了

24:32.620 --> 24:33.620
对吧

24:33.620 --> 24:34.620
呃当然以后还有很多问题啊

24:34.620 --> 24:36.620
现在我们搞定了一个初步的服务器

24:36.620 --> 24:37.620
服务器端渲染

24:37.620 --> 24:38.620
呃这里呢

24:38.620 --> 24:40.620
我们稍微的去作为对工程呢

24:40.620 --> 24:41.620
做一下处理

24:41.620 --> 24:42.620
呃首先的第一个呢

24:42.620 --> 24:43.620
就是关于这个

24:43.620 --> 24:45.620
排挤点节省啊

24:45.620 --> 24:46.620
就重新配置一下

24:46.620 --> 24:48.620
因为我们现在设计到两件事

24:48.620 --> 24:50.620
一件事呢是我们运行啊

24:50.620 --> 24:52.620
运行的话我就不再去运行啥

24:52.620 --> 24:54.620
不再去运行这个src目录下面的

24:54.620 --> 24:55.620
12本了对吧

24:55.620 --> 24:56.620
不再去运行这个了

24:56.620 --> 24:57.620
我们去转而运行啥呢

24:57.620 --> 24:58.620
转而运行这个

24:58.620 --> 25:00.620
DESM目录下面的Mate对吧

25:00.620 --> 25:01.620
这个Mate的名字呢

25:01.620 --> 25:02.620
其实也可以重新取一下

25:02.620 --> 25:03.620
比方说我们这里呢

25:03.620 --> 25:05.620
可以生成一个就是Output

25:05.620 --> 25:09.180
呃生成一下这个东西

25:09.180 --> 25:12.180
呃我们给他设置一个filing

25:12.180 --> 25:13.180
filing的嘛

25:13.180 --> 25:14.180
因为是服务器端嘛

25:14.180 --> 25:15.180
我们也不用给哈希直

25:15.180 --> 25:16.180
服务器端的话

25:16.180 --> 25:17.180
因为它是固定的

25:17.180 --> 25:18.180
也不存在缓存

25:18.180 --> 25:19.180
因为缓存的话是浏览器端的

25:19.180 --> 25:20.180
对吧

25:20.180 --> 25:21.180
服务器端的话不存在缓存

25:21.180 --> 25:22.180
所以说我们直接给他

25:22.180 --> 25:23.180
一个文件名

25:23.180 --> 25:25.180
文件名就是叫做server吧

25:25.180 --> 25:26.180
server的解释

25:26.180 --> 25:28.180
这样子的可以非常明显的看出

25:28.180 --> 25:29.180
这个DESM目录下面的

25:29.180 --> 25:30.180
是服务器端的代码

25:30.180 --> 25:32.180
是在运行在漏的环境里边了

25:32.180 --> 25:33.180
好我们这样子来写一下啊

25:33.180 --> 25:34.180
然后这边的话

25:34.180 --> 25:36.180
我们把这个删除掉

25:36.180 --> 25:37.180
好那么这边的话

25:37.180 --> 25:38.180
到时候就会运行什么

25:38.180 --> 25:40.180
DESM目录下面的server对吧

25:40.180 --> 25:41.180
server的解释好

25:41.180 --> 25:42.180
这是第一个脚本

25:42.180 --> 25:43.180
第二个脚本呢

25:43.180 --> 25:45.180
我们还要写个build

25:45.180 --> 25:46.180
build

25:46.180 --> 25:48.180
那么这个东西呢是

25:48.180 --> 25:49.180
是使用webpack

25:49.180 --> 25:51.180
webpack来进行打包

25:51.180 --> 25:52.180
打包什么呢

25:52.180 --> 25:53.180
打包就是到了这个DESM目录

25:53.180 --> 25:54.180
ok

25:54.180 --> 25:55.180
那么现在呢

25:55.180 --> 25:57.180
我们来再来运行看一下

25:57.180 --> 25:58.180
我们现在怎么来写呢

25:58.180 --> 26:00.180
就是npm run build

26:00.180 --> 26:01.180
对吧

26:01.180 --> 26:02.180
然后先打包

26:02.180 --> 26:04.180
run dev build

26:04.180 --> 26:05.180
我们是开发环境

26:05.180 --> 26:06.180
dev build

26:06.180 --> 26:07.180
打包

26:07.180 --> 26:09.180
好打包完了过后呢

26:09.180 --> 26:10.180
我们干嘛呢

26:10.180 --> 26:15.500
我们再运行npm run dev start

26:15.500 --> 26:16.500
ok

26:16.500 --> 26:17.500
那么现在呢

26:17.500 --> 26:18.500
你看是不是运行出来了

26:18.500 --> 26:19.500
对吧

26:19.500 --> 26:20.500
就运行出来了

26:20.500 --> 26:21.500
好

26:21.500 --> 26:22.500
但是呢

26:22.500 --> 26:23.500
每一次都要运行

26:23.500 --> 26:24.500
两个命令

26:24.500 --> 26:25.500
确实呢不太方便

26:25.500 --> 26:26.500
因此呢

26:26.500 --> 26:27.500
我们希望呢

26:27.500 --> 26:28.500
有这么一个东西

26:28.500 --> 26:29.500
就是运行

26:29.500 --> 26:30.500
运行一个命令

26:30.500 --> 26:31.500
就把这两个命令

26:31.500 --> 26:32.500
一起运行了

26:32.500 --> 26:33.500
那怎么办呢

26:33.500 --> 26:34.500
这里呢

26:34.500 --> 26:35.500
我给大家介绍一个工具

26:35.500 --> 26:38.450
叫做npm run

26:38.450 --> 26:39.450
就这么一个工具

26:39.450 --> 26:40.450
那么这个工具呢

26:40.450 --> 26:41.450
它就可以运行多

26:41.450 --> 26:42.450
一起运行多个脚本

26:42.450 --> 26:43.450
好

26:43.450 --> 26:44.450
咱们来安装一下

26:44.450 --> 26:45.450
npm i

26:45.450 --> 26:46.450
横杠D

26:46.450 --> 26:48.450
npm run

26:48.450 --> 26:49.450
它给你提供一个

26:49.450 --> 26:50.450
命令行工具

26:50.450 --> 26:51.450
然后呢

26:51.450 --> 26:52.450
可以让你运行

26:52.450 --> 26:53.450
同时运行多个脚本

26:53.450 --> 26:54.450
好

26:54.450 --> 26:55.450
咱们来看一下

26:55.450 --> 26:56.450
怎么来写

26:56.450 --> 26:57.450
我们来看

26:57.450 --> 26:58.450
npm上看一下

26:58.450 --> 26:59.450
叫做npm run

26:59.450 --> 27:00.450
哦

27:00.450 --> 27:01.450
点进去

27:01.450 --> 27:02.450
这里呢

27:02.450 --> 27:03.450
这里呢

27:03.450 --> 27:04.450
这里呢

27:04.450 --> 27:05.450
这里呢

27:05.450 --> 27:06.450
这里呢

27:07.450 --> 27:08.450
这里呢

27:08.450 --> 27:09.450
他说了怎么用

27:09.450 --> 27:10.450
点击过后

27:10.450 --> 27:14.740
看一下怎么用

27:14.740 --> 27:15.740
下面有例子

27:15.740 --> 27:16.740
你看非常简单

27:16.740 --> 27:17.740
就使用这个命令

27:17.740 --> 27:18.740
run or

27:18.740 --> 27:19.740
那么就可以运行这三个脚本

27:19.740 --> 27:20.740
对吧

27:20.740 --> 27:21.740
就可以运行这三个脚本

27:21.740 --> 27:22.740
好

27:22.740 --> 27:24.740
那么它默认的是

27:24.740 --> 27:25.740
一次运行的

27:25.740 --> 27:26.740
什么

27:26.740 --> 27:27.740
就先运行

27:27.740 --> 27:28.740
其中一个

27:28.740 --> 27:29.740
再运行

27:29.740 --> 27:30.740
第二个再运行

27:30.740 --> 27:31.740
第三个

27:31.740 --> 27:32.740
如果说你希望

27:32.740 --> 27:33.740
同时运行的话

27:33.740 --> 27:34.740
那么你建议你使用这个

27:34.740 --> 27:35.740
加上一个参数

27:35.740 --> 27:36.740
parallel

27:36.740 --> 27:37.740
同时运行两个脚本

27:37.740 --> 27:38.740
好

27:38.740 --> 27:39.740
因为我们这两个脚本

27:39.740 --> 27:41.740
实际上是没有什么冲突的

27:41.740 --> 27:42.740
也是同样说

27:42.740 --> 27:43.740
我是不是要先打包

27:43.740 --> 27:44.740
然后再start

27:44.740 --> 27:45.740
其实不需要的

27:45.740 --> 27:46.740
因为这个start

27:46.740 --> 27:47.740
一开始过后

27:47.740 --> 27:48.740
它就可以监控这个文件

27:48.740 --> 27:50.740
它就会一直监控这个文件

27:50.740 --> 27:51.740
那么如果说

27:51.740 --> 27:52.740
start先运行

27:52.740 --> 27:53.740
那么它监控了

27:53.740 --> 27:54.740
你再必要的

27:54.740 --> 27:55.740
再打包的话

27:55.740 --> 27:56.740
那么打包结果

27:56.740 --> 27:57.740
是不是会改动它

27:57.740 --> 27:58.740
一改动它的话

27:58.740 --> 27:59.740
它又会重新运行

27:59.740 --> 28:00.740
所以说不存在的

28:00.740 --> 28:01.740
那么咱们运行运行就可以了

28:01.740 --> 28:02.740
咱们呢

28:02.740 --> 28:03.740
这里再写个脚本

28:03.740 --> 28:04.740
这个脚本

28:04.740 --> 28:06.740
我们就给他写上这么一句话

28:06.740 --> 28:08.740
并行运行两个命令

28:08.740 --> 28:09.740
哪两个命令呢

28:09.740 --> 28:10.740
一个start

28:10.740 --> 28:12.740
一个是dev build

28:12.740 --> 28:13.740
就这样子

28:13.740 --> 28:14.740
并行运行两个命令

28:14.740 --> 28:15.740
当然了

28:15.740 --> 28:16.740
也可以这样子

28:16.740 --> 28:17.740
dev直接个新号

28:17.740 --> 28:18.740
一个新号

28:18.740 --> 28:19.740
就是dev冒号

28:19.740 --> 28:20.740
后面的所有命令

28:20.740 --> 28:21.740
对这种命令

28:21.740 --> 28:22.740
全部一起运行

28:22.740 --> 28:23.740
好

28:23.740 --> 28:24.740
保存

28:24.740 --> 28:25.740
咱们把这个东西安装好了

28:25.740 --> 28:26.740
之后再来看

28:26.740 --> 28:28.740
npm run dev

28:29.740 --> 28:30.740
你看

28:30.740 --> 28:31.740
是不是两个命令

28:31.740 --> 28:32.740
load more

28:32.740 --> 28:33.740
然后wap

28:33.740 --> 28:34.740
都要运行的

28:34.740 --> 28:35.740
好

28:35.740 --> 28:36.740
刷新

28:36.740 --> 28:38.740
接下来我们来改动一下代码

28:39.740 --> 28:40.740
改动一下代码

28:40.740 --> 28:41.740
这里

28:41.740 --> 28:42.740
我们这里把它写一下

28:42.740 --> 28:43.740
在这个地方

28:43.740 --> 28:44.740
写一个

28:44.740 --> 28:45.740
一面

28:45.740 --> 28:46.740
一二

28:46.740 --> 28:47.740
保存

28:47.740 --> 28:48.740
刷新

28:48.740 --> 28:49.740
刷新

28:49.740 --> 28:52.250
刷新

28:52.250 --> 28:54.250
这里还有个问题

28:54.250 --> 28:55.250
还有个问题

28:55.250 --> 28:57.250
因为我这里写到之后

28:57.250 --> 28:59.250
load more是监控了的

28:59.250 --> 29:00.250
但是webpack没有监控

29:00.250 --> 29:01.250
它没有重新打包

29:01.250 --> 29:02.250
没有重新打包

29:02.250 --> 29:04.250
它就没有重新生成到这

29:04.250 --> 29:05.250
没有重新生成到这

29:05.250 --> 29:06.250
这个文件就没有变化

29:06.250 --> 29:07.250
没有变化了就还是之前的

29:07.250 --> 29:09.250
所以说我们这里还要加一个

29:09.250 --> 29:11.250
webpack里边加一个watch

29:12.250 --> 29:13.250
watch

29:13.250 --> 29:14.250
监控

29:14.250 --> 29:15.250
好

29:15.250 --> 29:16.250
那么这个写好了之后

29:16.250 --> 29:17.250
我们再来重新运行

29:17.250 --> 29:26.160
run dev

29:26.160 --> 29:27.160
OK

29:27.160 --> 29:28.160
这个怎么回事

29:28.160 --> 29:29.160
显示这个

29:29.160 --> 29:30.160
存了

29:30.160 --> 29:32.470
run dev

29:32.470 --> 29:33.470
运行

29:33.470 --> 29:34.470
OK

29:34.470 --> 29:35.470
好

29:35.470 --> 29:36.470
接下来刷新

29:36.470 --> 29:37.470
好

29:37.470 --> 29:38.470
接下来我们再来改一下

29:38.470 --> 29:39.470
改成

29:39.470 --> 29:40.470
改回去吧

29:40.470 --> 29:41.470
保存

29:41.470 --> 29:42.470
好

29:42.470 --> 29:44.470
之后我们这里再刷新

29:46.470 --> 29:47.470
这里出问题了

29:47.470 --> 29:49.470
是不是包错了

29:49.470 --> 29:50.470
我看一下

29:50.470 --> 29:52.470
webpack

29:53.470 --> 29:54.470
重新打包了

29:54.470 --> 29:55.470
倒是重新打包了

29:55.470 --> 29:56.470
那么这个server

29:56.470 --> 29:58.470
server文件也改动了

29:58.470 --> 30:00.470
为什么没有重新变化呢

30:00.470 --> 30:01.470
没有重新变化

30:01.470 --> 30:02.470
我再看一下

30:02.470 --> 30:03.470
这个到底是哪里有问题

30:03.470 --> 30:04.470
watch

30:05.470 --> 30:06.470
我这里不是src

30:06.470 --> 30:08.470
我只在监控了src

30:08.470 --> 30:09.470
应该监控什么dash目录

30:09.470 --> 30:10.470
监控dash目录

30:10.470 --> 30:11.470
而不是src目录

30:11.470 --> 30:12.470
再来

30:13.470 --> 30:14.470
就很多小问题

30:14.470 --> 30:16.470
小细节需要一个个去解决

30:17.470 --> 30:18.470
OK

30:18.470 --> 30:19.470
再来刷新

30:19.470 --> 30:20.470
好

30:20.470 --> 30:21.470
现在我们再来

30:21.470 --> 30:22.470
这里改动

30:22.470 --> 30:23.470
保存

30:23.470 --> 30:24.470
好

30:24.470 --> 30:25.470
再刷新

30:25.470 --> 30:26.470
你看就没问题了

30:26.470 --> 30:27.470
好

30:27.470 --> 30:28.470
接下来我们把这个工程

30:28.470 --> 30:29.470
就整大点差不多了

30:29.470 --> 30:30.470
然后最后一个小细节

30:30.470 --> 30:32.470
我们把这个东西改动一下

30:32.470 --> 30:33.470
因为我现在server.js

30:33.470 --> 30:34.470
里边代码

30:34.470 --> 30:35.470
其实有点

30:35.470 --> 30:36.470
怎么说呢

30:36.470 --> 30:37.470
有点繁数

30:37.470 --> 30:38.470
对吧

30:38.470 --> 30:39.470
有点繁数

30:39.470 --> 30:40.470
那么我们希望这个

30:40.470 --> 30:41.470
这个样子

30:41.470 --> 30:42.470
我把这个东西

30:42.470 --> 30:43.470
作为一个

30:43.470 --> 30:44.470
作为一个函数

30:44.470 --> 30:46.470
放到一个包里边

30:46.470 --> 30:48.470
那么保持server.js

30:48.470 --> 30:49.470
尽量的简洁

30:49.470 --> 30:50.470
我们把这个东西

30:50.470 --> 30:51.470
放到一个包里边

30:51.470 --> 30:52.470
让它来完成

30:52.470 --> 30:53.470
就是渲染的工作

30:53.470 --> 30:54.470
好

30:54.470 --> 30:55.470
那么我们这里

30:55.470 --> 30:56.470
既然服务端

30:56.470 --> 30:57.470
服务端我们这里

30:57.470 --> 30:58.470
可能有多个文件

30:58.470 --> 30:59.470
我干脆去建一个文件夹

30:59.470 --> 31:00.470
server

31:00.470 --> 31:01.470
建这么一个文件夹

31:01.470 --> 31:03.470
然后这里边写上

31:03.470 --> 31:04.470
index.js

31:04.470 --> 31:05.470
我们把这个代码

31:05.470 --> 31:06.470
来拷贝过来

31:06.470 --> 31:08.470
拷贝过来

31:08.470 --> 31:09.470
OK

31:09.470 --> 31:10.470
然后呢

31:10.470 --> 31:11.470
这个代码

31:11.470 --> 31:12.470
拷贝过来之后

31:12.470 --> 31:13.470
我们再把这个东西

31:13.470 --> 31:14.470
复制过去

31:14.470 --> 31:15.470
我们再新建个文件

31:15.470 --> 31:18.470
给它取名一个叫做

31:18.470 --> 31:19.470
叫rander

31:19.470 --> 31:20.470
rander.js

31:20.470 --> 31:21.470
那么这个rander

31:21.470 --> 31:22.470
我们就把这个东西

31:22.470 --> 31:24.470
导出

31:24.470 --> 31:26.470
把这个东西导出

31:26.470 --> 31:27.470
rander

31:27.470 --> 31:28.470
我们这里可以使用

31:28.470 --> 31:30.470
就是es6

31:30.470 --> 31:31.470
export

31:31.470 --> 31:32.470
defort

31:32.470 --> 31:33.470
把这个东西导出

31:33.470 --> 31:34.470
当然这个东西

31:34.470 --> 31:35.470
里边要用到一些

31:35.470 --> 31:36.470
用到一些玩意

31:36.470 --> 31:37.470
我们把一次弄过来

31:37.470 --> 31:38.470
什么rex

31:38.470 --> 31:39.470
home

31:39.470 --> 31:40.470
这些东西全部弄过来

31:40.470 --> 31:42.470
OK

31:42.470 --> 31:43.470
放过来

31:43.470 --> 31:44.470
没问题吧

31:44.470 --> 31:45.470
没问题

31:45.470 --> 31:46.470
然后呢

31:46.470 --> 31:47.470
我们这里呢

31:47.470 --> 31:48.470
再看一下

31:48.470 --> 31:49.470
看一下

31:49.470 --> 31:51.470
这边我们就不导入

31:51.470 --> 31:52.470
导入这个rander

31:52.470 --> 31:54.470
rander.js

31:54.470 --> 31:55.470
rander

31:55.470 --> 31:56.470
那么把rander

31:56.470 --> 31:57.470
放这

31:57.470 --> 31:59.470
把rander这个函数放这

31:59.470 --> 32:00.470
没问题吧

32:00.470 --> 32:01.470
就形成这么一种结构

32:01.470 --> 32:02.470
这个结构就

32:02.470 --> 32:04.470
就清晰减减很多了

32:04.470 --> 32:05.470
没问题吧

32:05.470 --> 32:06.470
然后这一块

32:06.470 --> 32:07.470
其实都还可以

32:07.470 --> 32:08.470
拆分

32:08.470 --> 32:09.470
把这个东西

32:09.470 --> 32:10.470
我们把它叫做

32:10.470 --> 32:11.470
一般来说

32:11.470 --> 32:12.470
就是一个

32:12.470 --> 32:13.470
选择一个跟主键

32:13.470 --> 32:14.470
选择一个跟主键

32:14.470 --> 32:15.470
目前的跟主键

32:15.470 --> 32:16.470
只有一个home

32:16.470 --> 32:17.470
那么之后呢

32:17.470 --> 32:18.470
跟主键里面

32:18.470 --> 32:19.470
可能还有路由

32:19.470 --> 32:20.470
那些东西

32:20.470 --> 32:21.470
所以说呢

32:21.470 --> 32:22.470
我们这里

32:22.470 --> 32:23.470
还是做出这么一个跟主键

32:23.470 --> 32:24.470
这里呢

32:24.470 --> 32:25.470
我们新建个文件

32:25.470 --> 32:26.470
app.js

32:26.470 --> 32:27.470
是个跟主键

32:27.470 --> 32:28.470
那么这个跟主键

32:28.470 --> 32:29.470
我们可以

32:29.470 --> 32:30.470
这里呢

32:30.470 --> 32:31.470
直接

32:31.470 --> 32:32.470
导出

32:32.470 --> 32:33.470
import

32:33.470 --> 32:35.470
导出

32:35.470 --> 32:36.470
这是跟主键

32:36.470 --> 32:37.470
没有什么属性

32:37.470 --> 32:38.470
目前没有什么属性

32:38.470 --> 32:39.470
我们这里呢

32:39.470 --> 32:40.470
就使用home

32:40.470 --> 32:41.470
直接返回

32:41.470 --> 32:43.470
home

32:43.470 --> 32:44.470
那么这里呢

32:44.470 --> 32:46.470
把home放过去

32:46.470 --> 32:47.470
把这个home放过去

32:47.470 --> 32:48.470
好

32:48.470 --> 32:49.470
那么这边呢

32:49.470 --> 32:50.470
渲染的时候呢

32:50.470 --> 32:52.470
就渲染这个app

32:52.470 --> 32:53.470
就把封装一下

32:53.470 --> 32:54.470
之后呢

32:54.470 --> 32:55.470
我们如果说

32:55.470 --> 32:56.470
要在跟主键里面

32:56.470 --> 32:57.470
加东西的话

32:57.470 --> 32:58.470
就在这里控制

32:58.470 --> 32:59.470
跟以前是一样的

32:59.470 --> 33:00.470
app

33:00.470 --> 33:01.470
好

33:01.470 --> 33:02.470
那么现在写完了

33:02.470 --> 33:03.470
写完了

33:03.470 --> 33:04.470
我们这里呢

33:04.470 --> 33:05.470
重新运行式

33:06.470 --> 33:07.470
npm

33:08.470 --> 33:09.470
看一下吧

33:09.470 --> 33:10.470
诶

33:10.470 --> 33:11.470
这里报错了是吧

33:11.470 --> 33:12.470
诶

33:12.470 --> 33:13.470
报错了

33:13.470 --> 33:14.470
我们来看一下

33:14.470 --> 33:15.470
哪里出了问题

33:15.470 --> 33:16.470
呃

33:16.470 --> 33:18.470
cannot find module

33:18.470 --> 33:19.470
pages home

33:19.470 --> 33:20.470
哦

33:20.470 --> 33:21.470
这个pages home

33:21.470 --> 33:22.470
home

33:22.470 --> 33:23.470
这个mood

33:23.470 --> 33:24.470
那么我们要返回

33:24.470 --> 33:25.470
上级目录

33:25.470 --> 33:26.470
当然也可以使用

33:26.470 --> 33:27.470
at

33:27.470 --> 33:28.470
没问题

33:28.470 --> 33:29.470
好

33:29.470 --> 33:30.470
OK

33:30.470 --> 33:31.470
那么现在呢

33:31.470 --> 33:32.470
我再看

33:32.470 --> 33:33.470
没问题了

33:34.470 --> 33:35.470
保存

33:35.470 --> 33:36.470
刷新

33:36.470 --> 33:37.470
好

33:37.470 --> 33:38.470
现在都没问题了

33:38.470 --> 33:39.470
现在我们就搭

33:39.470 --> 33:40.470
搭建了一个服务端的

33:40.470 --> 33:41.470
一个基本的

33:41.470 --> 33:42.470
结构就出来了

33:42.470 --> 33:43.470
好

33:43.470 --> 33:44.470
接下来呢

33:44.470 --> 33:45.470
大家呢

33:45.470 --> 33:46.470
就是跟着我

33:46.470 --> 33:47.470
按照我的这种方式呢

33:47.470 --> 33:48.470
把它做一遍

33:48.470 --> 33:49.470
不然的话

33:49.470 --> 33:50.470
你后边就没有印象了

33:50.470 --> 33:51.470
就跟不上了

33:51.470 --> 33:52.470
把它做一遍

33:52.470 --> 33:53.470
OK

33:53.470 --> 33:54.470
那么这是关于服务器端

33:54.470 --> 33:55.470
使用rex主键

33:55.470 --> 33:56.470
就完成了

