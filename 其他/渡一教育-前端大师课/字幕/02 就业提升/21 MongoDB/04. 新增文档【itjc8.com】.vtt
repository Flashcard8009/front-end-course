WEBVTT

00:00.300 --> 00:06.420
呃 之前呢 我是打算把那个珍珊感啊 然后呢 做一个

00:07.340 --> 00:08.620
一节课 把全部讲完

00:09.620 --> 00:17.300
后来的规划一下 好像不行啊 这样子的话 个时长的话就太长了啊 咱们还是一部分一部分 踏踏实实的 把它分开讲

00:18.220 --> 00:25.860
就是有的时候呢 讲课了 他也会有些急躁啊 想一下子把讲完 就还是慢慢来分开讲嘛

00:26.580 --> 00:30.820
每一节课呢 我都会讲两种操作 比方说这节课呢 咱们讲新增

00:31.660 --> 00:34.820
新增一个文大到这个集合里面去

00:35.540 --> 00:41.500
那么新增的时候呢 我会讲两种操作 一种是原生操作 就直接使用命令行该怎么去操作

00:42.260 --> 00:46.100
一种呢 是使用猛够时来操作 为什么要讲两种呢 因为我也不能

00:46.620 --> 00:49.460
百分百确定你们以后的公司里面就一定用猛够时

00:49.940 --> 00:58.060
原生操作呢 我们咱们还是要讲一下啊 有的时候呢 万一你到公司里面去 可能会用到一些原生操作啊 当然这些东西你全部都不用去备

00:58.980 --> 01:04.260
用到什么呢 去查阅一下文档 你看这些东西我全都给你能写成文档了啊 一查阅一下就完事了

01:05.020 --> 01:09.740
嗯 在上课之前呢 大家做一件事啊 就是上节课呢 咱们不是有一个

01:12.060 --> 01:12.660
运行一下啊

01:13.660 --> 01:20.660
咱们不是有个警告吗 对不对 这个警告是什么呢 这个警告呢 我去查了一下它的官网文档啊 它是它是这样子的

01:20.980 --> 01:27.420
就是它的新版本里边呢 创建索引的方式 索引是什么 我们之前定义模型是不是有索引

01:27.740 --> 01:31.340
对不对 这样这个东西是索引 这个东西也是索引 叫做唯一索引

01:32.180 --> 01:35.900
索引的出现的目的呢 是为了提高后续的查询速度

01:36.780 --> 01:40.540
因此呢 像唯一这个东西它也算是索引啊

01:41.380 --> 01:47.260
但是呢 它在新版本里面 猛哥是在新版本里面了 它对索引的处理呢 有跟旧版本有差异

01:47.940 --> 01:50.140
但是呢 为了兼容旧版本 它没有去

01:51.020 --> 01:58.260
自动的去完成这个差异的更新 因此呢 需要你手动的去处理一下啊 那么处理的方式呢 它已经告诉你呢 就是

01:59.220 --> 02:05.940
让你使用use create index instead 它说 它说建索引的要用另外一个函数来进行创建

02:06.300 --> 02:12.740
那但是我们在这里配置了之后呢 它会在内部自动调用这个函数 但是由于它是 它用的是 目前用的是旧版本的方式

02:13.020 --> 02:17.180
因此呢 我们这里呢 需要做一个简单的处理 就在创建连接这里

02:18.340 --> 02:24.940
在这里去配置一下 通过这个set函数呢 可以配置一些全局的一些行为 这里边写的是建字队

02:26.820 --> 02:29.860
建了就名字叫做use create index

02:30.860 --> 02:34.740
使用这个函数啊 使用这个create index函数呢 创建那个

02:35.300 --> 02:36.980
所引啊 value 的把设为去

02:38.700 --> 02:42.060
ok 那么这样子就没问题了啊 老春啊 停止

02:43.940 --> 02:49.660
好 现在没问题了啊 把这个警告搞定 第二件事呢 是把这个模型稍微做一下更改

02:50.300 --> 02:53.740
第一个更改地方呢 是这个locking id 这个locking id呢 我们把这个

02:55.180 --> 03:00.100
数据 就是把这个就是数据呢 就最少最小的长度给它设为算

03:00.900 --> 03:02.300
设小一点啊 方便测试

03:03.180 --> 03:07.220
一会儿写测试的时候老是要报错啊 另外一个呢 就是password

03:08.300 --> 03:14.620
密码这一块呢 当时我没有考虑的非常好啊 就是这个密码呢 在数据库里面一般是用md5 编码

03:15.020 --> 03:21.140
对不对 md5 加密过后来存出 所以它的长度呢 你不用去限制 因为md5 加密过后呢 是固定长度

03:21.380 --> 03:23.340
所以把个密码的长度限制给它去了

03:24.220 --> 03:29.980
另外一个呢 就是给它加一个属性啊 方便后边在讲查询的时候呢 方便使用

03:30.140 --> 03:32.740
一个是 age 有加一个 age 属性

03:33.620 --> 03:36.900
age 呢 就内形了就是 number 啊 表示年龄

03:37.820 --> 03:44.740
require 回去 有个默认值 给它个默认值嘛 有默认值的话就不需要这个require 对吧

03:45.700 --> 03:46.500
默认值呢 我

03:47.660 --> 03:57.220
是吧 好行了啊 给它一个年龄 其他的模型这里呢就改完了啊 然后呢 接着再做一件事啊 就是安装一下loadm

03:59.180 --> 04:00.060
安装一下loadm

04:03.040 --> 04:06.760
方便呢 我们更改了单码之后呢 它能够自动重启

04:08.240 --> 04:10.120
把这些这些事情先做一下

04:11.320 --> 04:15.720
然后呢 同样的在这个拍点节省里面呢 我们去一会儿要去配置一下啊loadm index

04:17.040 --> 04:19.400
好了 在这里边我们配置一下啊配置人start

04:20.560 --> 04:25.960
这里边写上loadm index 把这些准备工作再做一下啊

04:28.190 --> 04:28.870
m team start

04:30.510 --> 04:36.430
好了 差不多了啊 然后我们之前看一下数据库里面有没有东西啊 之前有个东西把他

04:37.230 --> 04:37.590
删除掉

04:38.710 --> 04:45.630
啊 删除的时候呢 也可以把整个集合删除掉啊 做collection啊 把整个集合删除掉也可以 这里呢我们把这个删除掉吧

04:45.990 --> 04:46.990
订队字 document

04:48.110 --> 04:49.430
OK 那行了啊

04:50.750 --> 04:56.550
那么现在呢 我们来开始来讲这个新增的操作 增生改啥嘛 CRUD嘛 C create

04:57.030 --> 05:02.670
好 我们首先看那个mongo DB的原生操作 要看原生操作的话 我们直接打开一个命令行 我们先开一个吧

05:04.430 --> 05:09.030
啊 打开一个命令行 呃 这个命令行里面呢 我们首先调用命令啊mongo

05:09.950 --> 05:19.310
对吧 进入这个互动啊 就是交互式命令行 进去了过后呢 我们就可以写一些一些这个语句代码来完成对数据的新增

05:19.670 --> 05:23.630
那么新增的时候呢 我们是之前是不是讲过有两个对吧 一个是insert one

05:24.230 --> 05:25.910
增加新增一个文档对象

05:26.710 --> 05:34.670
啊 一个是insert many 那么这个地方呢 要填一个数组啊 新增一系列的文档对象 那么其中还有一个叫insert

05:35.350 --> 05:40.190
insert它既可以新增一个 也可以新增多个啊 来来来 试一下吧

05:41.230 --> 05:50.030
db 好 后边写上什么 写上你的就是集合的名字 集合的名字呢 我们这里是什么 users 对吧 users insert

05:50.510 --> 05:54.590
啊 比方说我们这里新增一个对象嘛 一个对象里边 我们写上一个

05:55.590 --> 05:58.990
login id abc

06:00.750 --> 06:07.230
好 回车 它这里给了一个结果啊 这个结果呢 是一个对象 对象里边有个属性叫insert

06:07.590 --> 06:15.510
表示什么呢 表示你新增了多少个啊 真正的新增了多少个 就在数据库里面完成了新增多少个呢 一个啊 number

06:16.830 --> 06:17.510
insert

06:18.510 --> 06:25.550
插入的数量啊 有一个啊 这是添加一个对吧 那么我们这里按concult叫r刷新

06:26.790 --> 06:31.190
那样是不是就只有一个啊 那么现在大家可以看到这个原生的环境下边的

06:31.830 --> 06:37.750
有没有进行验证啊 我们之前是不是定义了结构对不对 结构里边是不是有各种验证 那这里有没有验证

06:38.270 --> 06:44.430
是不是没有没有进行验证 那么说明了什么呢 说明我们的结构里边的各种验证啊 是不是那个

06:44.950 --> 06:51.910
猛固是给你提供的 而不是原生的就有的 对不对啊 所以说这里的他没有进行验证 好 咱们来再新增一个

06:52.550 --> 07:00.350
好 在新增一个的时候呢 他告诉你inert等于0就没有完成新增 他告诉你是不是发生了一个错误 什么错误呢 他说

07:00.710 --> 07:10.470
重复的件 什么重复的件 knocking it 为abc 对吧 是不是又重复了 哎 这就奇怪了 不是说不验证吗 为什么他会出现这个地方有验证呢

07:11.110 --> 07:11.910
啊 你看一下这里

07:12.910 --> 07:18.910
这里是不是有利可 对吧 唯一的 knocking it 是唯一的 那么这里为什么会验证了 这里给大家解释一下啊

07:19.350 --> 07:25.190
就是说我们在数据库里边呢 虽然说没有这些验证 但是呢 他是有锁引的

07:25.790 --> 07:31.710
锁引是数据库里边真实存在的 像我们在定义模型的时候呢 在这里是不是定义了锁引index

07:32.110 --> 07:33.710
这里是不是定义了锁引 唯一锁引

07:34.710 --> 07:39.430
有利可 实际上这里定义了唯一锁引就不需要这个锁引 它本身就有锁引了

07:40.230 --> 07:46.510
因此呢 这个就是我们这个锁引这个这个东西呢 它会到数据库 在数据库里边会在真实存在

07:46.950 --> 07:52.830
那么由于数据库里边有唯一锁引 所以说你在数据库直接直接直接去操作这个数据库的时候呢

07:53.110 --> 07:57.950
你会发现啊 这个锁引是不能重复的 但是这是唯一锁引啊 但是不能重复的

07:59.030 --> 08:03.670
好 那么这里我给大家说一下啊 因此呢 我再给大家提醒一下 就锁引这个东西呢

08:03.750 --> 08:09.190
它不属于验证的范畴 它不是验证 它就是一个锁引 唯一锁引 它不是验证的

08:09.830 --> 08:11.550
好 这是咱们这一块

08:12.990 --> 08:13.870
好 这是新增

08:15.550 --> 08:21.270
新增 好 那么现在呢 这里给大家说了啊 蒙古斯中的所有验证规则在远征操作中无效

08:21.790 --> 08:24.590
锁引它不是验证 接下来我们重点说这个蒙古斯

08:25.030 --> 08:28.830
蒙古斯操作数据库呢 要新增一条数据呢 其实特别简单

08:29.550 --> 08:34.310
有两种方式 一种是使用面向对象的模式啊 就是六一个对象 然后呢

08:34.910 --> 08:40.510
改了过后了 怕保存 所以跟那个secret ice 以前你们学斗有结实的时候 学那个买捨口的个

08:41.550 --> 08:45.070
um 方向 是不是一样的啊 好 咱们来看一下吧

08:46.430 --> 08:49.670
找到这个index 比较多 我们在这里呢 写上一个

08:50.910 --> 08:56.070
呃 写上一个两种写法都写一下吧 一个我们写个对象 我们要新增哪个对象呢

08:56.670 --> 08:59.350
我们要新增的是一个对象的有locking id

09:00.710 --> 09:05.430
为比方说有点一啊locking password

09:06.870 --> 09:11.630
随便写一个吧啊 然后呢 写上内比方成个

09:13.390 --> 09:19.350
然后呢 再写上一个 age 啊 年龄啊 年龄让它默认吧 还有什么呢 还有adress

09:20.190 --> 09:23.750
住址啊 province province

09:26.220 --> 09:27.420
然后呢 city

09:29.300 --> 09:29.900
哈尔滨

09:31.340 --> 09:39.020
好 随便来一个吧 然后接下来我们来创建啊 新建一个就是文档到数据库里边去 怎么新建呢 首先你要导入这个模型

09:40.660 --> 09:45.820
模型是什么呢 模型是user 是一个用户的模型啊 有在里边我们用create

09:45.820 --> 09:48.820
6一个u的对象

09:48.820 --> 09:50.820
把这个ob线传进去

09:50.820 --> 09:52.820
保存一下

09:52.820 --> 09:53.820
u

09:53.820 --> 09:56.820
然后接下来我们就叫做u的save

09:56.820 --> 09:57.820
直接叫做u的save

09:57.820 --> 09:59.820
那么save里面有一个回调函数

09:59.820 --> 10:01.820
就是你完成了之后

10:01.820 --> 10:03.820
得到了信息

10:03.820 --> 10:05.820
比方说我们回调函数写个吧

10:05.820 --> 10:07.820
回调函数是node接式模式

10:07.820 --> 10:08.820
第一个参数是sr

10:08.820 --> 10:10.820
第二参数是完成的结果

10:10.820 --> 10:11.820
result

10:11.820 --> 10:13.820
输出一下result

10:14.820 --> 10:15.820
保存

10:16.820 --> 10:17.820
我们看一下

10:17.820 --> 10:18.820
这边

10:18.820 --> 10:20.820
你看是不是添加完了

10:20.820 --> 10:21.820
A9S8Node

10:21.820 --> 10:23.820
它的iHow 为空输组

10:23.820 --> 10:25.820
这些都是默认值

10:25.820 --> 10:27.820
node iDNode password name

10:27.820 --> 10:29.820
是不是就完事了

10:29.820 --> 10:31.820
那么这里就是新增

10:31.820 --> 10:33.820
而且打印出来的结果

10:33.820 --> 10:35.820
ID已经分配过来了

10:35.820 --> 10:37.820
result就是ID

10:37.820 --> 10:38.820
非常简单

10:38.820 --> 10:39.820
而且save函数

10:39.820 --> 10:40.820
它也可以使用

10:40.820 --> 10:41.820
这是回调模式

10:41.820 --> 10:42.820
它也可以使用什么

10:42.820 --> 10:44.820
也可以使用面相

10:44.820 --> 10:45.820
也可以使用

10:45.820 --> 10:47.820
一步模式

10:47.820 --> 10:48.820
也可以使用一步模式

10:48.820 --> 10:49.820
比方说我们把代码

10:49.820 --> 10:51.820
放到sync函数里面

10:51.820 --> 10:55.380
我们在这里

10:55.380 --> 10:56.380
写上

10:56.380 --> 10:57.380
这个地方

10:57.380 --> 10:59.380
我们用await

10:59.380 --> 11:00.380
打到这个结果

11:00.380 --> 11:01.380
result

11:01.380 --> 11:03.380
输出result

11:03.380 --> 11:06.700
保存

11:06.700 --> 11:07.700
没调用是吧

11:07.700 --> 11:09.700
调一下函数

11:09.700 --> 11:10.700
保存

11:10.700 --> 11:11.700
那么现在它爆错

11:11.700 --> 11:12.700
爆错的原因是

11:12.700 --> 11:14.700
因为node iD重复了

11:14.700 --> 11:16.700
我们在写成node iD2

11:16.700 --> 11:17.700
保存

11:17.700 --> 11:18.700
你看是不是正常的

11:18.700 --> 11:19.700
对吧

11:19.700 --> 11:20.700
它

11:20.700 --> 11:22.700
之后我们讲什么新增

11:22.700 --> 11:23.700
修改

11:23.700 --> 11:24.700
删除

11:24.700 --> 11:25.700
还有查学等等

11:25.700 --> 11:26.700
它都是有两种方式

11:26.700 --> 11:27.700
可以输写

11:27.700 --> 11:28.700
一种是回调

11:28.700 --> 11:29.700
一种是使用一步的模式

11:29.700 --> 11:31.700
当然使用一步的模式的话

11:31.700 --> 11:32.700
更加容易阅读

11:32.700 --> 11:33.700
代码写出来更加漂亮一点

11:33.700 --> 11:35.700
我们一般使用一步模式

11:35.700 --> 11:37.700
这是第种方式来创建

11:37.700 --> 11:39.700
第二种方式

11:39.700 --> 11:41.700
第二种方式是直接使用

11:41.700 --> 11:42.700
模型里面的函数

11:42.700 --> 11:43.700
来创建对象

11:43.700 --> 11:45.700
这个地方就是写模型的名称

11:45.700 --> 11:46.700
比方说第二种方式

11:46.700 --> 11:47.700
第二种方式

11:47.700 --> 11:51.740
我们来试一下

11:51.740 --> 11:52.740
第二种方式

11:52.740 --> 11:53.740
第二种方式

11:53.740 --> 11:56.740
我们使用这种写法

11:56.740 --> 11:58.740
user create

11:58.740 --> 11:59.740
直接创建

11:59.740 --> 12:01.740
你给它一个模型

12:01.740 --> 12:02.740
模型在哪呢

12:02.740 --> 12:03.740
上面这个模型

12:03.740 --> 12:04.740
就是你的文档

12:04.740 --> 12:05.740
文档对象

12:05.740 --> 12:06.740
你把文档对象

12:06.740 --> 12:07.740
直接给它

12:07.740 --> 12:09.740
然后等待它

12:09.740 --> 12:10.740
等待它

12:10.740 --> 12:11.740
完成了结果之后

12:11.740 --> 12:12.740
我们看一下

12:13.740 --> 12:14.740
输出

12:15.740 --> 12:17.740
然后我们这里写user3

12:18.740 --> 12:19.740
你看

12:19.740 --> 12:21.740
user3加进去了

12:21.740 --> 12:22.740
然后我们看一下数据库

12:22.740 --> 12:23.740
数据库里面

12:23.740 --> 12:24.740
我们要刷新

12:25.740 --> 12:26.740
你看是不是这里

12:26.740 --> 12:27.740
user1

12:27.740 --> 12:28.740
user2

12:28.740 --> 12:29.740
user3

12:29.740 --> 12:30.740
是不是都有了

12:30.740 --> 12:31.740
对不对

12:31.740 --> 12:32.740
非常简单

12:32.740 --> 12:33.740
之前那个就是

12:33.740 --> 12:34.740
直接在数据库里面加了

12:34.740 --> 12:35.740
没有进行验证

12:36.740 --> 12:37.740
这是

12:37.740 --> 12:39.740
两种添加方式

12:39.740 --> 12:40.740
当然这个东西

12:40.740 --> 12:41.740
crease这个函数

12:41.740 --> 12:42.740
还有一个特点就是

12:42.740 --> 12:44.740
可以传入多个对象

12:44.740 --> 12:45.740
还可以传入多个对象

12:45.740 --> 12:47.740
比方说我们这里有两个

12:47.740 --> 12:51.300
obj1

12:51.300 --> 12:52.300
user4

12:52.300 --> 12:53.300
user5

12:53.300 --> 12:54.300
好

12:54.300 --> 12:55.300
那么这里我们可以传入

12:55.300 --> 12:56.300
obj1

12:56.300 --> 12:57.300
obj2

12:57.300 --> 12:59.300
当然你也可以直接把对象字面量

12:59.300 --> 13:00.300
是不是直接放这

13:00.300 --> 13:01.300
对吧

13:01.300 --> 13:02.300
直接放在这一样的

13:02.300 --> 13:03.300
保存

13:03.300 --> 13:04.300
好 这样子一来呢

13:04.300 --> 13:06.300
诶 这里报错了是吧

13:06.300 --> 13:08.300
obj2 is not defined

13:08.300 --> 13:09.300
这里写错了

13:09.300 --> 13:10.300
obj2 is not defined

13:10.300 --> 13:11.300
好 保存

13:11.300 --> 13:12.300
好 来看

13:12.300 --> 13:13.300
它得到返回的结果

13:13.300 --> 13:14.300
是不是一个数组

13:14.300 --> 13:15.300
因为你该加了两个嘛

13:15.300 --> 13:16.300
对不对

13:16.300 --> 13:17.300
是不是一个数组

13:17.300 --> 13:18.300
数组里面第一项

13:18.300 --> 13:19.300
就是完成了添加的

13:19.300 --> 13:20.300
第一个对象

13:20.300 --> 13:21.300
第二项就是完成

13:21.300 --> 13:22.300
添加的第二个对象

13:22.300 --> 13:23.300
就这么简单

13:23.300 --> 13:24.300
另外的crease还出来

13:24.300 --> 13:26.300
还可以接受一个数组

13:26.300 --> 13:27.300
就是我们这里不是

13:27.300 --> 13:28.300
把它展开写的嘛

13:28.300 --> 13:29.300
对不对

13:29.300 --> 13:30.300
实际上它也可以接受一个数组

13:30.300 --> 13:31.300
这个数组里面

13:31.300 --> 13:32.300
放多个对象

13:32.300 --> 13:33.300
都是可以的

13:33.300 --> 13:35.300
这就是用crease的方式

13:35.300 --> 13:36.300
来创建

13:36.300 --> 13:37.300
是不是要比直接创建一个

13:37.300 --> 13:38.300
用各种函数

13:38.300 --> 13:39.300
创建要更加灵活一点

13:39.300 --> 13:40.300
而且创建单个

13:40.300 --> 13:42.300
也可以创建多个

13:42.300 --> 13:44.300
都是关于这一块

13:44.300 --> 13:45.300
好

13:45.300 --> 13:47.300
咱们去看下面的一些细节

13:47.300 --> 13:48.300
对不对

13:48.300 --> 13:49.300
API接口实际上

13:49.300 --> 13:50.300
是非常简单的

13:50.300 --> 13:51.300
咱们注意一下细节就行了

13:51.300 --> 13:52.300
第一个细节

13:52.300 --> 13:53.300
就是mongous

13:53.300 --> 13:54.300
它会为每一个对象

13:54.300 --> 13:57.300
添加一个五一键下发线ID

13:57.300 --> 13:58.300
不要让它这里

13:58.300 --> 14:00.300
你看

14:00.300 --> 14:03.300
咱们在数据库里边

14:03.300 --> 14:05.300
创新一下

14:05.300 --> 14:06.300
你看每一个对象里边

14:06.300 --> 14:07.300
数一个ID

14:07.300 --> 14:08.300
对吧

14:08.300 --> 14:09.300
它类型是object ID

14:09.300 --> 14:10.300
我们之前讲过了

14:10.300 --> 14:12.300
就是它会为每一个对象

14:12.300 --> 14:13.300
创建一个ID

14:13.300 --> 14:15.300
但是它不仅仅是文档对象

14:15.300 --> 14:17.300
而且它的纸对象里边

14:17.300 --> 14:19.300
它也会创建ID

14:19.300 --> 14:20.300
啥意思呢

14:20.300 --> 14:21.300
你看这个arctress

14:21.300 --> 14:23.300
是不是一个纸对象

14:23.300 --> 14:24.300
这个arctress

14:24.300 --> 14:25.300
是不是object

14:25.300 --> 14:26.300
是纸对象

14:26.300 --> 14:27.300
那么这个玩意里边

14:27.300 --> 14:28.300
它也会出现ID

14:28.300 --> 14:29.300
看不看

14:29.300 --> 14:30.300
那么这个数据里边

14:30.300 --> 14:31.300
会不会出现

14:31.300 --> 14:33.300
数据里边目前没有出现

14:33.300 --> 14:34.300
目前

14:34.300 --> 14:35.300
因为它数据里边没东西吧

14:35.300 --> 14:36.300
就算有东西的话

14:36.300 --> 14:37.300
也不会出现

14:37.300 --> 14:38.300
咱们比方说

14:38.300 --> 14:39.300
再来一个

14:40.300 --> 14:41.300
用object

14:43.870 --> 14:44.870
object

14:44.870 --> 14:50.360
那么给它加上一个nob

14:50.360 --> 14:51.360
诚哥

14:51.360 --> 14:52.360
诚哥喜欢啥呢

14:52.360 --> 14:53.360
诚哥

14:53.360 --> 14:54.360
我们用登哥吧

14:54.360 --> 14:55.360
登哥的爱好

14:55.360 --> 14:56.360
大家比较明确一点

14:57.360 --> 14:58.360
这里是

14:59.360 --> 15:00.360
秋葵

15:01.360 --> 15:02.360
香菜

15:03.360 --> 15:04.360
这里咱们用6

15:06.360 --> 15:07.360
保存

15:08.360 --> 15:09.360
你看是不是完成了

15:09.360 --> 15:10.360
好 接下来

15:10.360 --> 15:12.360
我们到数据库里边去看一下

15:12.360 --> 15:13.360
数据库里边

15:13.360 --> 15:14.360
刷新

15:14.360 --> 15:16.360
这边nob有两个对象

15:16.360 --> 15:18.360
那么这两个由于是字无串

15:18.360 --> 15:19.360
它不是一个对象

15:19.360 --> 15:20.360
你看Stune

15:20.360 --> 15:21.360
它不是对象

15:21.360 --> 15:22.360
所以说它没有给它加上ID

15:22.360 --> 15:23.360
它也没法加

15:23.360 --> 15:24.360
对不对

15:24.360 --> 15:25.360
它只是个字无串而已

15:25.360 --> 15:26.360
但是如果说

15:26.360 --> 15:27.360
nob数据里边

15:27.360 --> 15:30.360
它是一个一个的对象

15:30.360 --> 15:31.360
它不是字无串

15:31.360 --> 15:34.360
那么它会为每一个对象加上ID

15:34.360 --> 15:35.360
这种状况

15:35.360 --> 15:36.360
实际上是非常好的

15:36.360 --> 15:37.360
好处在于什么呢

15:37.360 --> 15:38.360
好处在于

15:38.360 --> 15:39.360
比方说像这个数据里边

15:39.360 --> 15:40.360
如果说它是对象的话

15:40.360 --> 15:41.360
那么是不是有可能

15:41.360 --> 15:42.360
其他信息都是重复的

15:42.360 --> 15:44.360
那么我们要选取其中一个

15:44.360 --> 15:46.360
最好就是用ID来选取

15:46.360 --> 15:48.360
下标也是有可能会变化的

15:48.360 --> 15:50.360
最好就是用ID去选取

15:50.360 --> 15:52.360
用它的唯一编号

15:52.360 --> 15:54.360
对象也好

15:54.360 --> 15:56.360
它的数据里边有对象也好

15:56.360 --> 15:57.360
总之只要遇到了位象

15:57.360 --> 15:58.360
它会自动给它加上ID

15:58.360 --> 16:00.360
这是它原生的操作里边不具备的

16:01.360 --> 16:02.360
这是它第一个细节

16:02.360 --> 16:03.360
Mango里的第一个细节

16:04.360 --> 16:06.360
如果说你有一天

16:06.360 --> 16:07.360
有一些特殊的原因

16:07.360 --> 16:09.360
你不希望它给你

16:09.360 --> 16:11.360
给它只对象生成ID

16:11.360 --> 16:12.360
那怎么办呢

16:12.360 --> 16:14.360
你只需要在相应的schema中

16:14.360 --> 16:15.360
去配置ID为Force

16:15.360 --> 16:16.360
什么意思

16:16.360 --> 16:17.360
就是我再说一下就行了

16:17.360 --> 16:18.360
一般来说

16:18.360 --> 16:19.360
我们都需要这个ID的

16:19.360 --> 16:21.360
比方说我们的User里边

16:21.360 --> 16:22.360
有一个Adress

16:22.360 --> 16:23.360
我们不希望它生成ID

16:23.360 --> 16:24.360
怎么办

16:24.360 --> 16:25.360
我们在这里

16:25.360 --> 16:28.360
给它加上一个ID为Force

16:29.360 --> 16:30.360
给它看一下

16:32.360 --> 16:34.360
这里我们给它改成UL7

16:36.360 --> 16:37.360
保存

16:37.360 --> 16:38.360
你看

16:38.360 --> 16:39.360
Adress里边是不是没有ID的

16:39.360 --> 16:41.360
之前的Adress里边

16:41.360 --> 16:42.360
都是有ID的

16:42.360 --> 16:43.360
现在是不是没有了

16:43.360 --> 16:44.360
那么你在数据户里边去看一下

16:44.360 --> 16:45.360
你可以看得很清楚

16:45.360 --> 16:46.360
数据户里边

16:46.360 --> 16:47.360
我们这个Adress

16:47.360 --> 16:48.360
是不是只有两个字段

16:49.360 --> 16:50.360
这是这个

16:51.360 --> 16:52.360
这是第一个细节

16:52.360 --> 16:53.360
第二细节

16:53.360 --> 16:54.360
是Mango在创建文档的时候

16:54.360 --> 16:56.360
它会自动生成一个字段

16:56.360 --> 16:58.360
就是两个下方线V

16:58.360 --> 16:59.360
我们来看一下

17:00.360 --> 17:02.360
在这里面

17:02.360 --> 17:03.360
生成一个字段

17:03.360 --> 17:04.360
而且都是0

17:04.360 --> 17:05.360
对不对

17:05.360 --> 17:06.360
它是在新增一个文档的时候

17:06.360 --> 17:07.360
它就会自动给你生成这个字段

17:07.360 --> 17:09.360
那么这个字段有什么用呢

17:09.360 --> 17:12.360
这个字段是Mango在内部的去

17:12.360 --> 17:14.360
管理一些并发冲突的

17:14.360 --> 17:16.360
那么并发冲突到底是什么

17:16.360 --> 17:17.360
它又有什么样的问题

17:17.360 --> 17:18.360
为什么加这个字段

17:18.360 --> 17:20.360
就可以做一些控制

17:20.360 --> 17:22.360
那么我们的后续课程里边去讲解

17:22.360 --> 17:24.360
如果说将来你在写

17:24.360 --> 17:25.360
真实代码的时候

17:25.360 --> 17:28.360
如果说不希望它生成这个

17:28.360 --> 17:29.360
这个字段

17:29.360 --> 17:30.360
那么也非常简单

17:30.360 --> 17:31.360
你在Skama配置里面

17:31.360 --> 17:33.360
把它加上一个VersionKey

17:33.360 --> 17:34.360
等于Force

17:34.360 --> 17:35.360
比方在这里

17:35.360 --> 17:37.360
我们把这个就写了

17:37.360 --> 17:38.360
说一下就行了

17:39.360 --> 17:40.360
它这个Skama

17:40.360 --> 17:41.360
创建Skama的时候有两个配置

17:41.360 --> 17:43.360
第一个配置就写个对象

17:43.360 --> 17:44.360
这里是不是写了个对象

17:44.360 --> 17:45.360
对吧

17:45.360 --> 17:46.360
然后还可以给第二个参数

17:46.360 --> 17:48.360
第二个参数就是一个配置

17:48.360 --> 17:49.360
配置里面有一些信息可以写

17:49.360 --> 17:50.360
比方说你的VersionKey

17:50.360 --> 17:52.360
你把它设为Force

17:52.360 --> 17:54.360
那么它就不会生成这个

17:54.360 --> 17:55.360
下方线V的

17:55.360 --> 17:56.360
好 试一下吧

17:56.360 --> 17:58.360
然后这里写个留着吧

17:59.360 --> 18:00.360
你看

18:00.360 --> 18:01.360
是不是没有这个下方线

18:01.360 --> 18:02.360
就是钢肥了

18:02.360 --> 18:03.360
对吧

18:04.360 --> 18:05.360
刷新

18:06.360 --> 18:07.360
是不是刚没变了

18:07.360 --> 18:08.360
对吧

18:08.360 --> 18:09.360
这里我说一下

18:09.360 --> 18:10.360
取掉

18:10.360 --> 18:11.360
加回来

18:11.360 --> 18:13.360
这个后续可能会有用的

18:13.360 --> 18:15.360
接下来再往下看

18:15.360 --> 18:16.360
第三个

18:16.360 --> 18:18.360
第三个细节的就是Mango

18:18.360 --> 18:20.360
它总是会触发验证的

18:20.360 --> 18:21.360
比方说我们

18:21.360 --> 18:22.360
无论是使用哪一种模式

18:22.360 --> 18:24.360
比方说这个模式

18:24.360 --> 18:25.360
第一种模式的时候

18:25.360 --> 18:26.360
save的时候

18:26.360 --> 18:27.360
它会触发验证

18:27.360 --> 18:29.360
如果说验证失大

18:29.360 --> 18:31.360
它就会抛出一个错误

18:31.360 --> 18:32.360
如果说你用回掉模式的话

18:32.360 --> 18:33.360
它错误放在第1个参数

18:33.360 --> 18:35.360
如果说你用异部的模式的话

18:35.360 --> 18:36.360
那么它错误了

18:36.360 --> 18:38.360
就会作为Promise Reject

18:38.360 --> 18:39.360
这个状态

18:39.360 --> 18:40.360
那么这里

18:41.360 --> 18:42.360
如果说你

18:42.360 --> 18:43.360
还包括这种方式

18:43.360 --> 18:44.360
Creator的时候

18:44.360 --> 18:45.360
还直接会进行验证

18:46.360 --> 18:48.360
如果说你不希望

18:48.360 --> 18:49.360
进行验证的话

18:49.360 --> 18:51.360
那么你可以配置

18:51.360 --> 18:53.360
Vanidate before save with force

18:53.360 --> 18:55.360
那么配置的方式有两种

18:55.360 --> 18:56.360
第一种方式

18:56.360 --> 18:57.360
是直接在Skama里面

18:57.360 --> 18:58.360
进行配置

18:58.360 --> 19:00.360
就Vanidate before force

19:00.360 --> 19:01.360
比方说

19:01.360 --> 19:03.360
如果说我这里Retreats没有写

19:03.360 --> 19:04.360
没有写

19:04.360 --> 19:05.360
保存

19:05.360 --> 19:06.360
你看

19:06.360 --> 19:07.360
是不是报了一个错误

19:07.360 --> 19:08.360
对不对

19:08.360 --> 19:09.360
它说什么

19:09.360 --> 19:11.360
User the validation error

19:11.360 --> 19:13.360
是不是一个验证错误

19:13.360 --> 19:15.360
用户的验证失敗

19:15.360 --> 19:17.360
而Retreats

19:17.360 --> 19:19.360
就是个属性的路径

19:19.360 --> 19:20.360
就是Retreats

19:20.360 --> 19:22.360
它是必须要填写的

19:22.360 --> 19:24.360
这是这么一个错误

19:24.360 --> 19:26.360
如果说有填写的

19:27.360 --> 19:29.360
但是我只写了City

19:29.360 --> 19:32.250
没有写Provance

19:32.250 --> 19:33.250
保存

19:33.250 --> 19:34.250
你看

19:34.250 --> 19:35.250
下面又写一个错误了

19:35.250 --> 19:36.250
错误是什么

19:36.250 --> 19:37.250
Pass province

19:37.250 --> 19:38.250
Promance这个属性

19:38.250 --> 19:40.250
是必须要填写的

19:41.250 --> 19:43.250
这是关于这个错误的验证

19:43.250 --> 19:44.250
它在这里

19:44.250 --> 19:45.250
这个时候会验证错误

19:45.250 --> 19:46.250
如果说你要补货错误的话

19:46.250 --> 19:48.250
你可以用check-in

19:48.250 --> 19:49.250
你们之前都学过

19:49.250 --> 19:50.250
漏了解写

19:50.250 --> 19:51.250
如果说你以后在做

19:51.250 --> 19:52.250
API的时候

19:52.250 --> 19:53.250
要把发生错误的时候

19:53.250 --> 19:54.250
要给客户专

19:54.250 --> 19:55.250
响应一个错误消息

19:55.250 --> 19:56.250
那么你是不是可以写个

19:56.250 --> 19:57.250
Express中间键

19:57.250 --> 19:58.250
对不对

19:58.250 --> 20:00.250
那么这里还会拨出错误

20:00.250 --> 20:01.250
比如说要补货错误的话

20:01.250 --> 20:02.250
用check-in写

20:02.250 --> 20:03.250
这个不写

20:03.250 --> 20:05.250
这是关于这个错误的

20:05.250 --> 20:06.250
第一种方式

20:06.250 --> 20:07.250
就是它默认的情况下

20:07.250 --> 20:09.250
它会验证错误

20:09.250 --> 20:10.250
就是进行验证

20:10.250 --> 20:11.250
如果说你像

20:11.250 --> 20:12.250
进行这个行为的话

20:12.250 --> 20:13.250
有两种方式

20:13.250 --> 20:14.250
第一种方式是在

20:14.250 --> 20:15.250
这个schema里边

20:15.250 --> 20:16.250
schema里面同样的

20:16.250 --> 20:18.250
写上第二拆数

20:18.250 --> 20:21.250
叫做Validate Before Save

20:21.250 --> 20:22.250
当保存的时候

20:22.250 --> 20:24.250
是否触发验证

20:24.250 --> 20:25.250
你把它设为Force

20:25.250 --> 20:27.250
那么它就不触发验证了

20:27.250 --> 20:28.250
保存

20:28.250 --> 20:33.990
我们现在下面看一下

20:33.990 --> 20:34.990
保存

20:34.990 --> 20:36.990
为什么

20:36.990 --> 20:38.990
它这里验证其实已经通过了

20:38.990 --> 20:39.990
你看错误都不一样了

20:39.990 --> 20:40.990
因为我们说过

20:40.990 --> 20:42.990
这个就是

20:42.990 --> 20:44.990
锁印对唯一锁印的话

20:44.990 --> 20:45.990
它不是算验证

20:45.990 --> 20:46.990
它不算验证

20:46.990 --> 20:47.990
它这验证实际上

20:47.990 --> 20:48.990
已经通过了

20:48.990 --> 20:49.990
它只是唯一锁印的失败了

20:49.990 --> 20:51.990
改成9

20:51.990 --> 20:52.990
保存

20:52.990 --> 20:53.990
你刚是不是可以加进去了

20:53.990 --> 20:54.990
它只有个city

20:54.990 --> 20:55.990
它没有perference

20:55.990 --> 20:56.990
对不对

20:56.990 --> 20:57.990
它就是把这东西配置一下

20:57.990 --> 20:58.990
这东配置的

20:58.990 --> 20:59.990
它影响方面很广

20:59.990 --> 21:00.990
它会影响到一个模型

21:00.990 --> 21:01.990
所有的情况

21:01.990 --> 21:03.990
它都会影响到

21:03.990 --> 21:04.990
所有的模型

21:04.990 --> 21:06.990
它都不会验验证

21:06.990 --> 21:08.990
如果说你要再精确一点配置的话

21:08.990 --> 21:09.990
你可以配置到

21:09.990 --> 21:10.990
你可以把这东西配置到哪呢

21:10.990 --> 21:12.990
配置到你创建的时候

21:12.990 --> 21:13.990
比方说这一次创建

21:13.990 --> 21:14.990
我不需要验证

21:14.990 --> 21:16.990
其他的创建我都需要验证

21:16.990 --> 21:18.990
那怎么办呢

21:18.990 --> 21:19.990
那么这边就不配置了

21:19.990 --> 21:20.990
就默认情况下

21:20.990 --> 21:22.990
所有的都叫做进行验证

21:22.990 --> 21:23.990
然后在这边

21:23.990 --> 21:26.990
我们在这里去配置一下

21:26.990 --> 21:28.990
把最后参数写成一个

21:28.990 --> 21:31.990
写成一个配置对象

21:31.990 --> 21:32.990
第二参数写成一个配置对象

21:32.990 --> 21:33.990
那么第一个参数

21:33.990 --> 21:35.990
你要把它写成一个数组

21:35.990 --> 21:38.990
我一会说为什么

21:38.990 --> 21:40.990
那么这里我们写上一个就是

21:40.990 --> 21:41.990
Van

21:41.990 --> 21:42.990
刚才那个杂写的

21:42.990 --> 21:44.990
名字一长串

21:44.990 --> 21:48.990
Van days before

21:48.990 --> 21:49.990
复制一下

21:49.990 --> 21:53.070
把色为forced

21:53.070 --> 21:55.070
只是在这一次创建的时候

21:55.070 --> 21:56.070
不经意验证

21:56.070 --> 21:59.070
好 保存

22:00.070 --> 22:01.070
又重复了

22:04.070 --> 22:05.070
你看是不是验证通过了

22:05.070 --> 22:06.070
对吧

22:06.070 --> 22:07.070
我给他传了一个数组

22:07.070 --> 22:08.070
他返回一个数组

22:08.070 --> 22:09.070
那么我解释一下

22:09.070 --> 22:11.070
为什么这里需要传一个数组呢

22:11.070 --> 22:12.070
你想一想

22:12.070 --> 22:13.070
如果说你不传数组的话

22:13.070 --> 22:15.070
你是不是传了两个对象进去

22:15.070 --> 22:17.070
你传了两个对象进去的话

22:17.070 --> 22:18.070
是不是有起义

22:18.070 --> 22:19.070
他有时候可能会认为

22:19.070 --> 22:20.070
你是要把这个东西

22:20.070 --> 22:21.070
你是要传了多个对象

22:21.070 --> 22:22.070
你是把第一个对象

22:22.070 --> 22:23.070
和第二个对象

22:23.070 --> 22:24.070
都要保存到数据库

22:24.070 --> 22:25.070
他就不会认为

22:25.070 --> 22:26.070
第二个参数

22:26.070 --> 22:27.070
它是一个配置的

22:28.070 --> 22:30.070
你要区分一下

22:30.070 --> 22:31.070
他如果说

22:31.070 --> 22:32.070
他发现第一个参数是数组

22:32.070 --> 22:33.070
那么他就会认为

22:33.070 --> 22:34.070
后续的参数呢

22:34.070 --> 22:35.070
第二参数就是一个配置

22:35.070 --> 22:37.070
他这样才区分了开

22:37.070 --> 22:38.070
这是为什么这里

22:38.070 --> 22:40.070
要写数组的原因

22:40.070 --> 22:42.070
当然你再用save的时候

22:42.070 --> 22:43.070
你这个配置直接放这儿就行了

22:43.070 --> 22:44.070
因为save

22:44.070 --> 22:45.070
它只保存单个对象

22:45.070 --> 22:46.070
对不对

22:46.070 --> 22:49.070
这是关于验证如何来进用

22:49.070 --> 22:50.070
那么这里呢

22:50.070 --> 22:51.070
我再顺便说一下

22:51.070 --> 22:53.070
关于验证的更多信息

22:53.070 --> 22:54.070
一个是

22:54.070 --> 22:56.070
如果说你在保存到

22:56.070 --> 22:57.070
数据库之前

22:57.070 --> 22:59.070
就想进行一次验证

22:59.070 --> 23:01.070
刚才在这里就想进行一次验证

23:01.070 --> 23:03.070
我现在不着急保存到数据库

23:03.070 --> 23:04.070
我想先验证

23:04.070 --> 23:05.070
那怎么办呢

23:05.070 --> 23:06.070
非常简单

23:06.070 --> 23:07.070
你就用模型

23:07.070 --> 23:09.070
你没有一个方法叫validate

23:09.070 --> 23:10.070
你把这个

23:10.070 --> 23:11.070
你要验证对象传进去

23:11.070 --> 23:12.070
他就会帮你进行验证

23:12.070 --> 23:13.070
同样的他是异步的

23:13.070 --> 23:14.070
如果说

23:14.070 --> 23:15.070
他验证失败

23:15.070 --> 23:16.070
他会给你报出

23:16.070 --> 23:17.070
好 报出

23:17.070 --> 23:18.070
你看是报出了

23:18.070 --> 23:19.070
他告诉你

23:19.070 --> 23:21.070
pervance undefend

23:21.070 --> 23:22.070
对不对

23:22.070 --> 23:23.070
是不是验证失败了

23:23.070 --> 23:24.070
对吧

23:24.070 --> 23:25.070
你可以直接

23:25.070 --> 23:26.070
要急保存到数据库

23:26.070 --> 23:28.070
先进行一次验证之后

23:28.070 --> 23:29.070
根据巨头的情况

23:29.070 --> 23:30.070
具体去使用

23:30.070 --> 23:32.070
我这里只能把这些API介绍给你

23:32.070 --> 23:35.070
有可能你会用到的API

23:35.070 --> 23:36.070
另外一个

23:36.070 --> 23:37.070
就是我们刚才说的

23:37.070 --> 23:40.070
就是验证的错误的

23:40.070 --> 23:42.070
消息内容是validating error

23:42.070 --> 23:43.070
验证错误

23:43.070 --> 23:44.070
而我们的索应

23:44.070 --> 23:45.070
在数据库里面

23:45.070 --> 23:46.070
表示有一个索应

23:46.070 --> 23:48.070
它不属于验证的范畴

23:48.070 --> 23:50.070
就尽管这个约束不满足的话

23:50.070 --> 23:52.070
也不会导致验证失败

23:52.070 --> 23:53.070
而且索应错误

23:53.070 --> 23:54.070
是抛出了什么

23:54.070 --> 23:55.070
monger error

23:55.070 --> 23:56.070
什么叫monger error

23:56.070 --> 23:58.070
就真正的去执行数据库的时候

23:58.070 --> 23:59.070
发生了错误

23:59.070 --> 24:00.070
而验证这一块

24:00.070 --> 24:01.070
发生在数据库里面

24:01.070 --> 24:02.070
没有

24:02.070 --> 24:03.070
它是发生在monger故事里面

24:03.070 --> 24:05.070
发生在介事里面的

24:05.070 --> 24:07.070
原理是吧

24:07.070 --> 24:08.070
那么接下来

24:08.070 --> 24:09.070
下一个细节

24:09.070 --> 24:10.070
其实就说一下

24:10.070 --> 24:11.070
create的函数的本质

24:11.070 --> 24:12.070
我们用的create函数

24:12.070 --> 24:14.070
实际上跟新创的对象

24:14.070 --> 24:16.070
本质上是一样的

24:16.070 --> 24:17.070
它等效于什么呢

24:17.070 --> 24:18.070
比方你用create

24:18.070 --> 24:19.070
这里写一个dog

24:19.070 --> 24:20.070
这里写一个option

24:20.070 --> 24:22.070
等效于你是把

24:22.070 --> 24:23.070
新建一个对象

24:23.070 --> 24:24.070
然后把它保存

24:24.070 --> 24:25.070
把配置传进去

24:25.070 --> 24:27.070
是一样的

24:27.070 --> 24:28.070
如果说你要传入

24:28.070 --> 24:29.070
多个稳当的话

24:29.070 --> 24:30.070
那么create相当于

24:30.070 --> 24:31.070
在内部创下的一个循环

24:31.070 --> 24:33.070
循环你传入的所有的稳当

24:33.070 --> 24:34.070
然后每一个稳当

24:34.070 --> 24:36.070
去调整这种方式

24:36.070 --> 24:37.070
所以说create的本质

24:37.070 --> 24:39.070
跟六这种本质

24:39.070 --> 24:40.070
是一样的

24:40.070 --> 24:41.070
没有什么区别

24:41.070 --> 24:43.070
接下来再下一个

24:43.070 --> 24:44.070
无论你使用哪一种方式

24:44.070 --> 24:46.070
就是你使用save的方式

24:46.070 --> 24:47.070
也好

24:47.070 --> 24:50.070
还是使用create的方式

24:50.070 --> 24:51.070
也好

24:51.070 --> 24:52.070
那么最终都会得到

24:52.070 --> 24:53.070
一个模型实力

24:53.070 --> 24:54.070
就是我们在这里

24:54.070 --> 24:55.070
看到的模型实力

24:55.070 --> 24:56.070
就这个玩意

24:56.070 --> 24:57.070
就是模型实力

24:57.070 --> 24:58.070
这个模型实力

24:58.070 --> 24:59.070
我们这一次

24:59.070 --> 25:00.070
还不是会怎么用得到

25:00.070 --> 25:01.070
我们可以以后

25:01.070 --> 25:02.070
试验一下

25:02.070 --> 25:03.070
这个模型实力

25:03.070 --> 25:05.070
会被Mangus持续跟踪

25:05.070 --> 25:07.070
你只要对这个模型的

25:07.070 --> 25:08.070
实力的任何修改

25:08.070 --> 25:09.070
它都会被记录

25:09.070 --> 25:10.070
一旦你重新调

25:10.070 --> 25:11.070
这个save方法

25:11.070 --> 25:12.070
它就会对模型

25:12.070 --> 25:13.070
重新更改

25:13.070 --> 25:14.070
那么这个东西

25:14.070 --> 25:17.070
跟secret nice

25:17.070 --> 25:18.070
是不是一样的

25:18.070 --> 25:19.070
secret nice

25:19.070 --> 25:20.070
也有这个功能

25:20.070 --> 25:21.070
是吧

25:21.070 --> 25:22.070
它一个模型实力

25:22.070 --> 25:23.070
咱们来试一下吧

25:23.070 --> 25:25.770
比方说我们这里

25:25.770 --> 25:27.770
再来一个

25:27.770 --> 25:31.460
要进行验证

25:31.460 --> 25:33.460
我们把这个稍微改一下

25:33.460 --> 25:35.460
11了

25:35.460 --> 25:36.460
然后呢

25:36.460 --> 25:38.460
得到这个模型过后

25:38.460 --> 25:39.460
我们在这里

25:39.460 --> 25:40.460
使用result

25:40.460 --> 25:41.460
改一下

25:41.460 --> 25:42.460
改一下它的

25:42.460 --> 25:44.460
就是locking id

25:44.460 --> 25:46.460
等于

25:46.460 --> 25:47.460
改了之后

25:47.460 --> 25:48.460
result

25:48.460 --> 25:49.460
save

25:49.460 --> 25:52.460
再保存

25:53.460 --> 25:54.460
保存

25:54.460 --> 25:55.460
我们来试一下

25:56.460 --> 25:57.460
下一个

25:58.460 --> 25:59.460
重新来

25:59.460 --> 26:00.460
改成12

26:01.460 --> 26:02.460
保存

26:02.460 --> 26:03.460
这里保错了

26:03.460 --> 26:05.460
它pervince没信

26:05.460 --> 26:07.460
pervince

26:07.460 --> 26:11.780
保存

26:11.780 --> 26:12.780
那么现在

26:12.780 --> 26:13.780
没有保错了

26:13.780 --> 26:14.780
没有保错了

26:14.780 --> 26:15.780
然后接下来

26:15.780 --> 26:16.780
我们来看一下

26:16.780 --> 26:17.780
数据库里边

26:18.780 --> 26:19.780
数据库里边

26:19.780 --> 26:20.780
这个地方

26:20.780 --> 26:21.780
它的locking id

26:21.780 --> 26:22.780
是变成凳格了

26:22.780 --> 26:24.780
它是怎么

26:24.780 --> 26:25.780
让一个过程

26:25.780 --> 26:26.780
它是首先你

26:26.780 --> 26:27.780
创建了一个对象

26:27.780 --> 26:28.780
对象里边的locking id

26:28.780 --> 26:29.780
是什么

26:29.780 --> 26:30.780
是这个东西

26:30.780 --> 26:31.780
有点12

26:31.780 --> 26:32.780
然后

26:32.780 --> 26:33.780
接下来

26:33.780 --> 26:35.780
你又去把对象的locking id

26:35.780 --> 26:36.780
改了过重新保存

26:36.780 --> 26:37.780
重新保存

26:37.780 --> 26:38.780
因为这个是模型

26:38.780 --> 26:39.780
重新保存过后

26:39.780 --> 26:40.780
是不是会覆盖掉

26:40.780 --> 26:42.780
它又会去自动操作数据库

26:42.780 --> 26:43.780
去覆盖掉

26:43.780 --> 26:44.780
它之前的数据

26:44.780 --> 26:46.780
覆盖掉之前的locking id

26:46.780 --> 26:47.780
就这么个意思

26:47.780 --> 26:48.780
这就是这一块

26:48.780 --> 26:50.780
修改是不是也非常简单

26:50.780 --> 26:52.780
也是修改的其中一种方式

26:52.780 --> 26:53.780
修改有很多方式的

26:53.780 --> 26:54.780
至少有两种方式

26:54.780 --> 26:55.780
我下面可详细说

26:56.780 --> 26:57.780
这里是关于

26:59.780 --> 27:00.780
模型的跟踪

27:02.780 --> 27:03.780
最后一个细节

27:03.780 --> 27:04.780
就是亲征对象的时候

27:04.780 --> 27:05.780
如果说

27:05.780 --> 27:06.780
你遇到了schema里边

27:06.780 --> 27:07.780
没有定理的字段

27:07.780 --> 27:08.780
它会直接忽略

27:08.780 --> 27:09.780
什么意思呢

27:09.780 --> 27:10.780
就是如果说我在这里面

27:10.780 --> 27:11.780
写一个

27:11.780 --> 27:12.780
在我们的结构里边

27:12.780 --> 27:13.780
并不存在的字段

27:13.780 --> 27:14.780
那么这种情况下

27:14.780 --> 27:15.780
会怎么样呢

27:15.780 --> 27:16.780
猛故事

27:16.780 --> 27:17.780
会直接把这个字段

27:17.780 --> 27:18.780
给你忽略掉

27:18.780 --> 27:19.780
好 咱们来试一下

27:19.780 --> 27:21.780
比方说这里有12

27:21.780 --> 27:24.150
保存

27:24.150 --> 27:25.150
诶 这里又保存了

27:25.150 --> 27:26.150
哎呀

27:27.150 --> 27:29.150
哦 这里不能再改成凳格了

27:30.150 --> 27:32.150
那么现在的指呢

27:32.150 --> 27:34.150
用一下有13

27:34.150 --> 27:35.150
好 保存

27:35.150 --> 27:37.590
没问题了

27:37.590 --> 27:38.590
这里没保存了

27:38.590 --> 27:40.590
然后我们在这里面去看一下

27:42.590 --> 27:43.590
你看

27:43.590 --> 27:44.590
我们本来是写的一个

27:44.590 --> 27:46.590
属性名字叫做abc

27:46.590 --> 27:47.590
但是这个abc

27:47.590 --> 27:48.590
这个属性有没有呢

27:48.590 --> 27:49.590
它没有

27:49.590 --> 27:50.590
为什么呢

27:50.590 --> 27:51.590
就是猛故事给你处理的

27:51.590 --> 27:53.590
不是说这个MangoDB给你处理的

27:53.590 --> 27:54.590
你要知道有哪些东西

27:54.590 --> 27:55.590
是猛故事处理的

27:55.590 --> 27:56.590
哪些东西是MangoDB处理的

27:56.590 --> 27:57.590
所以说我们在这里面

27:57.590 --> 27:58.590
做一个对比

27:58.590 --> 28:00.590
把两种情况都给大家说一下

28:00.590 --> 28:01.590
好了

28:01.590 --> 28:02.590
那么这节课新增就完了

28:02.590 --> 28:04.590
新增还是算比较简单的

28:04.590 --> 28:05.590
MangoDB呢

28:05.590 --> 28:06.590
操作里边

28:06.590 --> 28:07.590
稍微复杂一点的

28:07.590 --> 28:09.590
其实也都不算复杂

28:09.590 --> 28:10.590
就是API比较多一点的

28:10.590 --> 28:11.590
也就是

28:11.590 --> 28:13.590
查询和修改了一块

28:13.590 --> 28:15.590
像新增和山土都比较简单

28:15.590 --> 28:17.590
好 这是关于新增

