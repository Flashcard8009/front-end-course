WEBVTT

00:01.460 --> 00:06.460
各位同学 大家好 这期课我们继续文章列表制作的一个学习

00:06.460 --> 00:11.460
那么本节课呢 我们来实现一下上拉加载更多的这样一个效果

00:11.460 --> 00:14.460
我们先来看一下完成的这个例子里面

00:14.460 --> 00:19.460
当我们刷新这个界面的时候 其实我们展示的数据并不是

00:19.460 --> 00:21.460
一次性的把所有的数据都给加载回来

00:21.460 --> 00:26.460
那这个里面呢 其实它是有一些这个数据的限制的

00:26.460 --> 00:28.460
也就是说这里面有一个长度的限制

00:28.460 --> 00:33.460
给多少条呢 这个里面我们出示化的时候会给它7条或者6条数据

00:33.460 --> 00:35.460
总之呢 是让它站满一平就可以了

00:35.460 --> 00:38.460
然后呢 这样呢 会有一个性能上的节省

00:38.460 --> 00:42.460
当我去滚动到底部 也就是说出底的时候

00:42.460 --> 00:44.460
这个时候呢 我会有一个加载的过程

00:44.460 --> 00:46.460
你看这时候呢 就会发送一个请求

00:46.460 --> 00:48.460
那在这个请求的过程当中呢

00:48.460 --> 00:51.460
它有把第二页数据给进行一个加载 最后呢

00:51.460 --> 00:53.460
给它展示一个这种没有数据了啊

00:53.460 --> 00:55.460
然后呢 我们还可以看一下

00:55.460 --> 00:56.460
当我刷新界面的时候

00:56.460 --> 00:59.460
刚才啊 在这个整个的一个数据渲染之前

00:59.460 --> 01:02.460
是不是有一个正在加载的这么一个效果 对吧

01:02.460 --> 01:05.460
包括这个底下的没有数据了

01:05.460 --> 01:08.460
以及我们的这个正在加载这个效果是怎么来的呢

01:08.460 --> 01:10.460
我们可以借助一个插件

01:10.460 --> 01:12.460
这个插件叫什么呢 叫油泥炉的帽

01:12.460 --> 01:14.460
然后呢 它来帮我们实现

01:14.460 --> 01:17.460
当前展示的是在这个加载状态

01:17.460 --> 01:19.460
还是说没有数据这一块

01:19.460 --> 01:22.460
并且呢 我们在做的时候还要注意点是什么呢

01:22.460 --> 01:25.460
就是我们在这个给后端传递

01:25.460 --> 01:27.460
咖啡范的基础上

01:27.460 --> 01:30.460
我们还需要给它传递一个当前展示的

01:30.460 --> 01:33.460
我们每一页要展示数据的一个长度

01:33.460 --> 01:36.460
包括我们当前需要递几件数据

01:36.460 --> 01:39.460
这些呢 都是要我们考虑的一个问题

01:39.460 --> 01:40.460
那么接下来呢

01:40.460 --> 01:43.460
我们就用代码的形式来实现一下

01:43.460 --> 01:46.460
我们这种上当加载的这样一个功能

01:46.460 --> 01:48.460
我们打开这个编辑器

01:48.460 --> 01:49.460
打开编辑器之后呢

01:49.460 --> 01:52.460
首先第一步 我们要把这个油泥炉的帽

01:52.460 --> 01:54.460
这个插件来给进行一个下载

01:54.460 --> 01:56.460
并且呢 进行一个使用

01:56.460 --> 01:58.460
这个呢 如何来实现呢

01:58.460 --> 02:00.460
我们啊 到这个工具里面

02:00.460 --> 02:02.460
然后这里面有一个插件安装

02:02.460 --> 02:04.460
在这个插件安装里面

02:04.460 --> 02:06.460
这里面有以安装的插件 对吧

02:06.460 --> 02:09.460
然后呢 如果说你这里面找不到咋办呢

02:09.460 --> 02:11.460
那你这里面点击安装器插件

02:11.460 --> 02:14.460
安装器插件 下面有一个前往插件市场

02:14.460 --> 02:16.460
到这个里面呢 进行查找

02:16.460 --> 02:18.460
选择全部 这里面搜索

02:18.460 --> 02:22.460
UniLoadGamal

02:22.460 --> 02:24.460
然后呢 点击搜索

02:24.460 --> 02:27.460
搜索之后 这里面有一个UniLoadMal

02:27.460 --> 02:28.460
加在更多

02:28.460 --> 02:31.460
这个呢 就是跳转了它的这个指定界面

02:31.460 --> 02:33.460
在这个里面呢 我也给同学们写上了

02:33.460 --> 02:34.460
如果说找不到咋办

02:34.460 --> 02:37.460
直接在这个里面进行搜索 也是OK的

02:37.460 --> 02:38.460
怎么使用呢

02:38.460 --> 02:40.460
我们可以看一下它这个API文档

02:40.460 --> 02:42.460
使用效果呢 是使用起来啊

02:42.460 --> 02:44.460
它的这个API比较简单

02:44.460 --> 02:46.460
它呢 支持ezcom的一个规范

02:46.460 --> 02:48.460
也就是说 你不需要直接

02:48.460 --> 02:49.460
Import的形式给它导入

02:49.460 --> 02:52.460
再通过Components来进行一个注册

02:52.460 --> 02:55.460
因为它支持ezcom这个规范

02:55.460 --> 02:57.460
那我们直接的啊 在这个模板里面

02:57.460 --> 03:00.460
Template里面 直接使用就OK了

03:00.460 --> 03:02.460
然后这里面 给一个Status

03:02.460 --> 03:04.460
Status下面这个帽呢 就是我们

03:04.460 --> 03:06.460
当前的一个状态值 这里面有什么

03:06.460 --> 03:09.460
有这个帽Loading 以及我们的Nome

03:09.460 --> 03:11.460
然后这些是可选择

03:11.460 --> 03:13.460
注意啊 它是一个触者化的时候

03:13.460 --> 03:14.460
那这是个死书印

03:14.460 --> 03:16.460
如果说你加了个帽号

03:16.460 --> 03:18.460
那这就是一个动态值 对不对

03:18.460 --> 03:20.460
一会呢 我们也会这个通过啊

03:20.460 --> 03:22.460
给另一个动态值 让它进行

03:22.460 --> 03:24.460
是否是这个加载中

03:24.460 --> 03:26.460
还是说已经没有更多数据的

03:26.460 --> 03:27.460
这样一个处理啊

03:27.460 --> 03:29.460
包括底下呢 它这里面有一些

03:29.460 --> 03:31.460
Icon type 也就是说

03:31.460 --> 03:33.460
这里面有Snow啊 雪花啊

03:33.460 --> 03:35.460
还有这个Loading圆圈啊

03:35.460 --> 03:37.460
还有这个Auto自动啊

03:37.460 --> 03:38.460
然后这些都有啊

03:38.460 --> 03:40.460
然后呢 可以让我们来进行选择

03:40.460 --> 03:42.460
包括它的一些颜色处理

03:42.460 --> 03:44.460
那我们就简单的使用一下 怎么办

03:44.460 --> 03:46.460
首先呢 把它给下载啊

03:46.460 --> 03:48.460
下载 我们点击这里面

03:48.460 --> 03:50.460
使用HBO的插导入插件

03:50.460 --> 03:51.460
这个里面让我们登录一下

03:51.460 --> 03:54.460
那我们就开始登录一下

03:54.460 --> 03:56.460
登录的时候 点击记住我

03:56.460 --> 03:58.460
OK 登录完成之后

03:58.460 --> 04:00.460
那使用HBO的插导入插件

04:00.460 --> 04:02.460
这个里面有一个提示信息

04:02.460 --> 04:03.460
告诉你一个版本

04:03.460 --> 04:04.460
我们打开HBO的插

04:04.460 --> 04:06.460
看一下啊 到我们的这个项目里面

04:06.460 --> 04:08.460
项目里面 我们确定

04:08.460 --> 04:10.460
确定之后 OK

04:10.460 --> 04:12.460
那现在就已经可以啊

04:12.460 --> 04:13.460
进行安装了

04:13.460 --> 04:14.460
安装完成之后呢

04:14.460 --> 04:15.460
我们就可以进行使用了

04:15.460 --> 04:17.460
咋使用 就像我们刚才说的

04:17.460 --> 04:19.460
它这个支持EZcom

04:19.460 --> 04:20.460
那我们直接的

04:20.460 --> 04:22.460
就给它在他们类的模板上使用

04:22.460 --> 04:23.460
就可以

04:23.460 --> 04:25.460
所以说 我在这个里面复制代码

04:25.460 --> 04:27.460
回到我们的这个界面里面

04:27.460 --> 04:29.460
界面里面我们应该在哪个里面使用呢

04:29.460 --> 04:30.460
其实我们这个里面

04:30.460 --> 04:32.460
我们是不是应该是

04:32.460 --> 04:34.460
在这个滚头列表里面使用

04:34.460 --> 04:35.460
对吧 所以说呢

04:35.460 --> 04:37.460
我们打开Components

04:37.460 --> 04:38.460
首先呢 这个里面

04:38.460 --> 04:39.460
我们肯定得操作ListCard

04:39.460 --> 04:41.460
那我们就先给它打开啊

04:41.460 --> 04:43.460
然后呢 我们再打开这个ListItem

04:43.460 --> 04:45.460
在这个ListItem里面

04:45.460 --> 04:47.460
它有一个ScrollWheel

04:47.460 --> 04:49.460
然后这里面有一个Wheel 对不对

04:49.460 --> 04:50.460
ScrollWheel里面

04:50.460 --> 04:51.460
然后我们在这个下面

04:51.460 --> 04:53.460
可以写一个什么呢

04:53.460 --> 04:55.460
这个是它每一个选项卡对吧

04:55.460 --> 04:56.460
选卡的中期

04:56.460 --> 04:58.460
然后呢 我在这个里面使用

04:58.460 --> 05:00.460
UniGunLoadMau 就行啊

05:00.460 --> 05:02.460
UniGunLoadMau OK

05:02.460 --> 05:04.460
在这里面进行一个添加

05:04.460 --> 05:06.460
添加之后 我先给它一个Status

05:06.460 --> 05:08.460
Status 初始化的时候

05:08.460 --> 05:09.460
给它一个Loading啊

05:09.460 --> 05:12.460
先让 看一下它的这个展示效果

05:12.460 --> 05:14.460
那我们回到我们的这个代码里面

05:14.460 --> 05:17.460
此时我们应该就能看到这样一个效果

05:17.460 --> 05:19.460
对吧 我们来刷新一下

05:19.460 --> 05:20.460
刷新一下

05:20.460 --> 05:22.460
然后你看到最底下啊

05:22.460 --> 05:24.460
最底下是不是有一个正在加载

05:24.460 --> 05:25.460
那现在最起码来说

05:25.460 --> 05:26.460
它呢 你已经引入了

05:26.460 --> 05:27.460
引入之后

05:27.460 --> 05:28.460
那我们接下来啊

05:28.460 --> 05:30.460
继续处理其他的相关内容

05:30.460 --> 05:31.460
刚才那样说了

05:31.460 --> 05:33.460
如果说你想实现这种

05:33.460 --> 05:35.460
我们上拉加载更多

05:35.460 --> 05:36.460
那首先要保证一点

05:36.460 --> 05:37.460
就是什么呢

05:37.460 --> 05:39.460
你首次获取数据的时候

05:39.460 --> 05:41.460
你不能一次性全部都获取来

05:41.460 --> 05:42.460
因为我们现在是一次性

05:42.460 --> 05:44.460
把所有的18条数据都获取了

05:44.460 --> 05:45.460
那我们这个里面呢

05:45.460 --> 05:46.460
就可以做一个调整

05:46.460 --> 05:47.460
也就是说

05:47.460 --> 05:49.460
我们初始化获取数据的时候

05:49.460 --> 05:51.460
我们可以少获取一点

05:51.460 --> 05:53.460
比如说我们这里面获取6条数据

05:53.460 --> 05:55.460
然后呢 我们第二次加载的时候

05:55.460 --> 05:57.460
再进行下一次数据的获取

05:57.460 --> 05:58.460
那这里面就需要

05:58.460 --> 06:02.460
我们前端跟后端的一个联动操作了

06:02.460 --> 06:03.460
前端做什么呢

06:03.460 --> 06:04.460
前端给后端传一个

06:04.460 --> 06:06.460
需要获取哪一页的数据

06:06.460 --> 06:08.460
以及呢 每一页的长度

06:08.460 --> 06:10.460
后端接收到这个值之后

06:10.460 --> 06:12.460
通过我们的一个Skip

06:12.460 --> 06:13.460
以及Limit操作

06:13.460 --> 06:15.460
其实跟我们Mongols差不多

06:15.460 --> 06:17.460
然后通过这种操作之后呢

06:17.460 --> 06:19.460
我们来指定匹配过滤后的数据

06:19.460 --> 06:21.460
返回给前端就OK了

06:21.460 --> 06:23.460
好的 那我们来实现一下

06:23.460 --> 06:24.460
实现一下咋做呢

06:24.460 --> 06:26.460
首先我们先来做前端的这一部分

06:26.460 --> 06:27.460
前端这一部分

06:27.460 --> 06:29.460
其实我们传递数据的时候

06:29.460 --> 06:30.460
是在这个里面

06:30.460 --> 06:31.460
我们传递数据

06:31.460 --> 06:33.460
因为之前只传了一个Cartify

06:33.460 --> 06:35.460
其他的数据我们也没传递

06:35.460 --> 06:36.460
那这时候咋办呢

06:36.460 --> 06:37.460
我们这时候

06:37.460 --> 06:39.460
需要再添加两个参数

06:39.460 --> 06:41.460
两个参数分辨是啥呢

06:41.460 --> 06:42.460
其实我们这里面

06:42.460 --> 06:44.460
可以给它一个配置

06:44.460 --> 06:45.460
以及我们的这个

06:45.460 --> 06:47.460
显示多少条数据

06:47.460 --> 06:48.460
Page Size

06:48.460 --> 06:49.460
所以说在这里面就写一下

06:49.460 --> 06:51.460
第一个呢 给它一个配置

06:51.460 --> 06:52.460
然后这个值是啥呢

06:52.460 --> 06:53.460
值呢 我们一会儿

06:53.460 --> 06:55.460
再这个全局定一下

06:55.460 --> 06:56.460
对不对

06:56.460 --> 06:58.460
然后还有一个是我们的Page Size

06:58.460 --> 06:59.460
Page Size和Page

06:59.460 --> 07:01.460
我在这个Data里面

07:01.460 --> 07:02.460
来定一下

07:02.460 --> 07:03.460
首先呢

07:03.460 --> 07:05.460
我们配置给它一个E

07:05.460 --> 07:06.460
然后呢 我们这里面

07:06.460 --> 07:07.460
Page Size

07:07.460 --> 07:08.460
每页显示多少条数据

07:08.460 --> 07:10.460
每页我让它显示六条数据

07:10.460 --> 07:11.460
就OK了

07:11.460 --> 07:12.460
之后呢 我在这个里面

07:12.460 --> 07:13.460
添加一下

07:13.460 --> 07:14.460
这一次点

07:14.460 --> 07:15.460
Page Size

07:15.460 --> 07:16.460
然后呢

07:16.460 --> 07:17.460
我在这个Page下面

07:17.460 --> 07:19.460
写上这一次点Page

07:19.460 --> 07:20.460
OK

07:20.460 --> 07:21.460
前端暂时处理完成了

07:21.460 --> 07:22.460
处理完成之后呢

07:22.460 --> 07:24.460
我们就回到云寒书

07:24.460 --> 07:25.460
云寒书里面

07:25.460 --> 07:27.460
继续相关的这个操作

07:27.460 --> 07:29.460
那我们回到云寒书里面

07:29.460 --> 07:31.460
找到GuideArticleList

07:31.460 --> 07:33.460
然后打开Index

07:33.460 --> 07:35.460
之前我们用聚合

07:35.460 --> 07:37.460
做了一些这个匹配的这个查询

07:37.460 --> 07:38.460
然后呢

07:38.460 --> 07:39.460
做的是比较简单的

07:39.460 --> 07:41.460
那我们接下来要做啥呢

07:41.460 --> 07:42.460
就是在这个基础上

07:42.460 --> 07:43.460
我们要做一些

07:43.460 --> 07:45.460
其他的相关操作

07:45.460 --> 07:46.460
也就是说

07:46.460 --> 07:47.460
其实现在啊

07:47.460 --> 07:49.460
你首先要做的第一件事

07:49.460 --> 07:50.460
就是我们

07:50.460 --> 07:51.460
除了这个Cartify

07:51.460 --> 07:53.460
在前端获取之后

07:53.460 --> 07:54.460
我们还可以获取一个什么呢

07:54.460 --> 07:55.460
Page

07:55.460 --> 07:56.460
然后呢

07:56.460 --> 07:57.460
我这个Page

07:57.460 --> 07:58.460
给它一个摸直

07:58.460 --> 07:59.460
叫Page等一

07:59.460 --> 08:00.460
并且呢

08:00.460 --> 08:01.460
PageSide

08:01.460 --> 08:02.460
PageSide

08:02.460 --> 08:03.460
如果说你不传

08:03.460 --> 08:04.460
那我直接的

08:04.460 --> 08:05.460
就给你10条数据

08:05.460 --> 08:06.460
没人让你展示10条

08:06.460 --> 08:07.460
OK

08:07.460 --> 08:08.460
这个呢

08:08.460 --> 08:09.460
就是我们的一个业务逻辑

08:09.460 --> 08:10.460
获取到他们俩之后

08:10.460 --> 08:11.460
那这个时候呢

08:11.460 --> 08:13.460
我们在这个匹配的时候

08:13.460 --> 08:14.460
我们要做一些

08:14.460 --> 08:15.460
相关的操作了

08:15.460 --> 08:16.460
也就是说

08:16.460 --> 08:17.460
在这个结束之前

08:17.460 --> 08:18.460
我们要做一个什么呢

08:18.460 --> 08:20.460
做一个过滤

08:20.460 --> 08:21.460
那做一个过滤

08:21.460 --> 08:22.460
第一个

08:22.460 --> 08:23.460
我使用一个Scap

08:23.460 --> 08:24.460
这个Scap啊

08:24.460 --> 08:25.460
是干嘛用的

08:25.460 --> 08:26.460
它呢

08:26.460 --> 08:28.460
其实和我们的这个Mongos

08:28.460 --> 08:29.460
非常相似

08:29.460 --> 08:30.460
指定查询

08:30.460 --> 08:31.460
返回结果时

08:31.460 --> 08:32.460
从指定序列后的

08:32.460 --> 08:33.460
一个结果

08:33.460 --> 08:34.460
开始返回

08:34.460 --> 08:35.460
常用于分页

08:35.460 --> 08:36.460
那我们这个里面

08:36.460 --> 08:38.460
就做一个过滤就可以了

08:38.460 --> 08:39.460
那我这里面怎么过滤

08:39.460 --> 08:41.460
其实就是用这个PageSide

08:41.460 --> 08:42.460
尝一个谁

08:42.460 --> 08:43.460
尝一个Page

08:43.460 --> 08:44.460
过滤多少条

08:44.460 --> 08:45.460
对吧

08:45.460 --> 08:46.460
然后但是我们那个

08:46.460 --> 08:47.460
其实呢

08:47.460 --> 08:48.460
应该是从0开始

08:48.460 --> 08:49.460
那我就是Page-1

08:49.460 --> 08:50.460
对吧

08:50.460 --> 08:51.460
这样就OK了

08:51.460 --> 08:52.460
然后

08:52.460 --> 08:53.460
这个里面

08:53.460 --> 08:54.460
你要注意一下

08:54.460 --> 08:55.460
就是什么呢

08:55.460 --> 08:56.460
首页

08:56.460 --> 08:58.460
第一页的数据

08:58.460 --> 09:01.460
是从0开始的

09:01.460 --> 09:02.460
这个呢

09:02.460 --> 09:03.460
我们要清楚一下

09:03.460 --> 09:04.460
这是第一步

09:04.460 --> 09:05.460
我们使用Scap

09:05.460 --> 09:06.460
进行过滤

09:06.460 --> 09:07.460
第二个呢

09:07.460 --> 09:08.460
是我们每一页展示

09:08.460 --> 09:09.460
多少条数据

09:09.460 --> 09:10.460
那我们使用一个什么

09:10.460 --> 09:11.460
Limit

09:11.460 --> 09:12.460
Limit呢

09:12.460 --> 09:13.460
就是使用这种

09:13.460 --> 09:14.460
PageSide的形式

09:14.460 --> 09:15.460
就OK了

09:15.460 --> 09:16.460
然后这里面

09:16.460 --> 09:17.460
再给大家写一个注释

09:17.460 --> 09:18.460
这个叫什么

09:18.460 --> 09:19.460
每一页展示

09:19.460 --> 09:20.460
多少条数据

09:20.460 --> 09:24.460
每一页返回多少条数据

09:24.460 --> 09:25.460
OK

09:25.460 --> 09:26.460
这个呢就写完了

09:26.460 --> 09:27.460
写完了之后

09:27.460 --> 09:28.460
来试一下

09:28.460 --> 09:29.460
本地测试打测试

09:29.460 --> 09:30.460
其实我们这个Cartify线

09:30.460 --> 09:31.460
没喘

09:31.460 --> 09:32.460
肯定会有包错

09:32.460 --> 09:33.460
对吧

09:33.460 --> 09:34.460
那么这里面呢

09:34.460 --> 09:35.460
定义一个什么

09:35.460 --> 09:36.460
配置运行参数

09:36.460 --> 09:37.460
我们在这个里面

09:37.460 --> 09:38.460
先做一个本地测试

09:38.460 --> 09:40.460
也不是通过前段测试了

09:40.460 --> 09:41.460
我们直接在这里面

09:41.460 --> 09:42.460
来搞一下

09:42.460 --> 09:43.460
Cartify等于一个什么呢

09:43.460 --> 09:45.460
我们这里面写一个全部

09:45.460 --> 09:46.460
OK

09:46.460 --> 09:47.460
来试一下

09:47.460 --> 09:48.460
全部

09:48.460 --> 09:49.460
好的

09:49.460 --> 09:50.460
那定义完成之后

09:50.460 --> 09:51.460
我这里面

09:51.460 --> 09:52.460
就要做这个

09:52.460 --> 09:53.460
本地运行运行数的

09:53.460 --> 09:54.460
一个操作了

09:54.460 --> 09:55.460
然后我们看一下

09:55.460 --> 09:56.460
它的这个运行结果

09:56.460 --> 09:57.460
运行结果成功之后

09:57.460 --> 09:58.460
这里面返回了一个什么

09:58.460 --> 09:59.460
10条

09:59.460 --> 10:01.460
因为我们没有传那个

10:01.460 --> 10:02.460
默认的那个配置

10:02.460 --> 10:04.460
以及配置赛子

10:04.460 --> 10:05.460
那它目前就给我返回

10:05.460 --> 10:06.460
10条数据

10:06.460 --> 10:07.460
对吧

10:07.460 --> 10:08.460
这是第一个

10:08.460 --> 10:09.460
当我们获取了之后

10:09.460 --> 10:10.460
其实要做Fade In

10:10.460 --> 10:11.460
我们这里面

10:11.460 --> 10:12.460
还有一个问题

10:12.460 --> 10:13.460
是什么问题呢

10:13.460 --> 10:14.460
我们在返回数据

10:14.460 --> 10:15.460
给客户端的时候

10:15.460 --> 10:17.460
其实不光要是返回一个什么

10:17.460 --> 10:18.460
返回一个

10:18.460 --> 10:20.460
我们当前的这个过滤后的

10:20.460 --> 10:21.460
结果

10:21.460 --> 10:22.460
我们这里面

10:22.460 --> 10:23.460
还要返回一个数量

10:23.460 --> 10:24.460
也就是说

10:24.460 --> 10:25.460
你现在有多少条数据

10:25.460 --> 10:26.460
对吧

10:26.460 --> 10:27.460
这个呢

10:27.460 --> 10:28.460
要返回给前端

10:28.460 --> 10:29.460
否则呢

10:29.460 --> 10:30.460
我们做起这个分页

10:30.460 --> 10:31.460
是比较麻烦的

10:31.460 --> 10:32.460
那我这里面就写一下

10:32.460 --> 10:33.460
返回多少

10:33.460 --> 10:37.460
返回当前匹配的

10:37.460 --> 10:41.460
选项里面的数据总数

10:41.460 --> 10:42.460
也就是说

10:42.460 --> 10:43.460
你有多少条记录值

10:43.460 --> 10:46.460
你这个都要给我前端返回去

10:46.460 --> 10:48.460
给前端返回去怎么来

10:48.460 --> 10:49.460
我这个调低一点

10:49.460 --> 10:50.460
这个呢

10:50.460 --> 10:51.460
我们就来写一下

10:51.460 --> 10:52.460
首先呢

10:52.460 --> 10:54.460
我定一个Constant

10:54.460 --> 10:56.460
等于我们的这个

10:56.460 --> 10:57.460
avate

10:57.460 --> 10:58.460
avate这里面

10:58.460 --> 11:00.460
通过db.collection

11:00.460 --> 11:01.460
然后呢

11:01.460 --> 11:02.460
这个里面

11:02.460 --> 11:04.460
我们指定这个article

11:04.460 --> 11:05.460
对吧

11:05.460 --> 11:07.460
然后指定这个article之后

11:07.460 --> 11:09.460
这里面使用这种ware的形式

11:09.460 --> 11:11.460
进行一个查询

11:11.460 --> 11:12.460
那这里面

11:12.460 --> 11:13.460
我写第一个

11:13.460 --> 11:14.460
这个里面

11:14.460 --> 11:15.460
我要接一个什么

11:15.460 --> 11:16.460
接一个查询对象

11:16.460 --> 11:17.460
是不是matchobj

11:17.460 --> 11:18.460
对吧

11:18.460 --> 11:19.460
然后matchobj

11:19.460 --> 11:20.460
后面使用一个count

11:20.460 --> 11:21.460
这样呢

11:21.460 --> 11:23.460
我就能得到一个什么

11:23.460 --> 11:24.460
我们可以看一下

11:24.460 --> 11:25.460
它的这个

11:25.460 --> 11:26.460
总数的这个值

11:26.460 --> 11:27.460
ok

11:27.460 --> 11:28.460
我们来试一下

11:28.460 --> 11:31.460
这个里面还是本地来运行一下

11:31.460 --> 11:32.460
然后呢

11:32.460 --> 11:34.460
我们看一下它的测试结果

11:34.460 --> 11:35.460
好了

11:35.460 --> 11:36.460
你会发现

11:36.460 --> 11:37.460
这个里面呢

11:37.460 --> 11:38.460
已经给我返回了

11:38.460 --> 11:40.460
这里面有一个applicate dose

11:40.460 --> 11:41.460
然后呢

11:41.460 --> 11:42.460
这里面有一个toto18

11:42.460 --> 11:43.460
也就是说

11:43.460 --> 11:44.460
march

11:44.460 --> 11:45.460
是一个对象

11:45.460 --> 11:46.460
这里面呢

11:46.460 --> 11:47.460
会有一个toto属性

11:47.460 --> 11:48.460
然后呢

11:48.460 --> 11:49.460
我们使用这个toto属性

11:49.460 --> 11:50.460
其实就是我们

11:50.460 --> 11:51.460
整个的这个

11:51.460 --> 11:52.460
全部数据的一个总长度

11:52.460 --> 11:53.460
然后我们拿到这个

11:53.460 --> 11:54.460
之后呢

11:54.460 --> 11:55.460
做分业

11:55.460 --> 11:56.460
前端呢

11:56.460 --> 11:57.460
再处理一些业务逻辑

11:57.460 --> 11:58.460
就ok了

11:58.460 --> 11:59.460
那这个怎么返回前端呢

11:59.460 --> 12:01.460
之前我们是直接返回了

12:01.460 --> 12:02.460
一个list的data

12:02.460 --> 12:03.460
这个里面呢

12:03.460 --> 12:04.460
我们就给他调整一下

12:04.460 --> 12:05.460
怎么来调整

12:05.460 --> 12:06.460
把这个list的data

12:06.460 --> 12:08.460
我们先给他进行一个复制

12:08.460 --> 12:09.460
之后呢

12:09.460 --> 12:10.460
在这个里面

12:10.460 --> 12:11.460
我使用这种

12:11.460 --> 12:13.460
使用这种对象的形式

12:13.460 --> 12:15.460
给他做一个data的返回

12:15.460 --> 12:17.460
article list在这里面

12:17.460 --> 12:18.460
第一个是我们的这个

12:18.460 --> 12:19.460
list

12:19.460 --> 12:20.460
表

12:20.460 --> 12:21.460
data

12:21.460 --> 12:22.460
这是第一个值

12:22.460 --> 12:23.460
那第二个呢

12:23.460 --> 12:24.460
就是什么呢

12:24.460 --> 12:25.460
就是我们要获取的

12:25.460 --> 12:26.460
这个toto值

12:26.460 --> 12:27.460
toto值

12:27.460 --> 12:28.460
我们也看到了

12:28.460 --> 12:29.460
这个toto呢

12:29.460 --> 12:30.460
是在一个对象里面

12:30.460 --> 12:31.460
那我们怎么办

12:31.460 --> 12:32.460
我们可以在这里面

12:32.460 --> 12:33.460
做一个结构对吧

12:33.460 --> 12:34.460
那我这里面

12:34.460 --> 12:35.460
toto ok

12:35.460 --> 12:36.460
结构完成之后

12:36.460 --> 12:37.460
那我这里面就省事了

12:37.460 --> 12:38.460
这里面什么都不用写了

12:38.460 --> 12:39.460
对吧

12:39.460 --> 12:40.460
直接隔这里面一搞

12:40.460 --> 12:41.460
就ok了

12:41.460 --> 12:42.460
这个呢

12:42.460 --> 12:43.460
就是我们需要返回

12:43.460 --> 12:44.460
一个前端的数据

12:44.460 --> 12:45.460
那我们看一眼

12:45.460 --> 12:46.460
对不对

12:46.460 --> 12:47.460
同样的再继续一个

12:47.460 --> 12:48.460
本地运行

12:48.460 --> 12:49.460
因为本地运行

12:49.460 --> 12:50.460
速度比较快

12:50.460 --> 12:51.460
我们就先上

12:51.460 --> 12:52.460
的一个数据库里面

12:52.460 --> 12:53.460
所以说

12:53.460 --> 12:54.460
我们也不用担心

12:54.460 --> 12:55.460
它的一个数据

12:55.460 --> 12:56.460
是不正确的

12:56.460 --> 12:57.460
这个问题

12:57.460 --> 12:58.460
好了

12:58.460 --> 12:59.460
首先我们看

12:59.460 --> 13:00.460
data是一个对象

13:00.460 --> 13:01.460
这里面有一个

13:01.460 --> 13:02.460
article list的

13:02.460 --> 13:03.460
这并且呢

13:03.460 --> 13:04.460
这里面有一个toto

13:04.460 --> 13:05.460
那这个就说明什么呢

13:05.460 --> 13:06.460
我们已经正确的返回了

13:06.460 --> 13:08.460
当你正确返回之后

13:08.460 --> 13:09.460
那再回到

13:09.460 --> 13:10.460
我们的article list里面

13:10.460 --> 13:11.460
我们再做一个

13:11.460 --> 13:12.460
什么操作呢

13:12.460 --> 13:13.460
原来之前

13:13.460 --> 13:14.460
我们做的时候

13:14.460 --> 13:15.460
其实这个里面

13:15.460 --> 13:16.460
我们的article list

13:16.460 --> 13:17.460
是直接拿出来的

13:17.460 --> 13:18.460
对不对

13:18.460 --> 13:19.460
那此时

13:19.460 --> 13:20.460
我们就不复制了

13:20.460 --> 13:22.460
否则我们不能正确到

13:22.460 --> 13:24.460
获取到它的这个值

13:25.460 --> 13:26.460
我们在这个里面

13:26.460 --> 13:27.460
打印一下

13:27.460 --> 13:28.460
可以看一下

13:28.460 --> 13:29.460
这个article list

13:29.460 --> 13:31.460
以及我们的这个toto

13:31.460 --> 13:32.460
是否正确

13:32.460 --> 13:34.460
然后回到这个界面里面

13:34.460 --> 13:36.460
我们刷新一下界面

13:36.460 --> 13:37.460
刷新一下界面

13:37.460 --> 13:38.460
你会发现

13:38.460 --> 13:39.460
正常显示的

13:39.460 --> 13:40.460
是不是

13:40.460 --> 13:41.460
18条总数

13:41.460 --> 13:42.460
这个呢

13:42.460 --> 13:43.460
我们就是

13:43.460 --> 13:44.460
现在已经做到了一个什么

13:44.460 --> 13:45.460
已经正确的

13:45.460 --> 13:46.460
拿到这个数据了

13:46.460 --> 13:47.460
那么接下来

13:47.460 --> 13:49.460
把分页的一些相关逻辑

13:49.460 --> 13:50.460
做一个处理

13:50.460 --> 13:51.460
就OK了

13:51.460 --> 13:52.460
我们先来看一下

13:52.460 --> 13:54.460
我们这个数据长度

13:54.460 --> 13:55.460
因为我们刚才

13:55.460 --> 13:56.460
已经做了一个限制

13:56.460 --> 13:57.460
其实我们在这个里面

13:57.460 --> 13:58.460
也可以查询到

13:58.460 --> 14:00.460
到getarticle list里面

14:00.460 --> 14:02.460
我们的这个传递参数里面

14:02.460 --> 14:03.460
有一个配置

14:03.460 --> 14:04.460
是1

14:04.460 --> 14:05.460
然后呢

14:05.460 --> 14:07.460
配置赛子是这个6

14:07.460 --> 14:08.460
也就是说

14:08.460 --> 14:09.460
现在其实应该是

14:09.460 --> 14:10.460
返回6条数据

14:10.460 --> 14:11.460
我们查一下

14:11.460 --> 14:13.460
123456

14:13.460 --> 14:14.460
OK

14:14.460 --> 14:15.460
6条数据就没有了

14:15.460 --> 14:16.460
6条数据没有

14:16.460 --> 14:17.460
那这时候呢

14:17.460 --> 14:18.460
就应该开始

14:18.460 --> 14:19.460
给我们进行

14:19.460 --> 14:20.460
一个数据的加载了

14:20.460 --> 14:21.460
也就是说

14:21.460 --> 14:23.460
重新进行数据的

14:23.460 --> 14:24.460
一个请求

14:24.460 --> 14:25.460
那这个怎么来做

14:25.460 --> 14:26.460
其实我们知道

14:26.460 --> 14:27.460
在我们的这个

14:27.460 --> 14:28.460
处理的时候

14:28.460 --> 14:29.460
我们需要知道

14:29.460 --> 14:30.460
什么时间

14:30.460 --> 14:31.460
是到底了

14:31.460 --> 14:32.460
那这个有没有办法

14:32.460 --> 14:33.460
判断呢

14:33.460 --> 14:34.460
其实是有的

14:34.460 --> 14:35.460
因为它呢

14:35.460 --> 14:36.460
我们这个list的item里面

14:36.460 --> 14:37.460
我们先把这个

14:37.460 --> 14:38.460
干掉

14:38.460 --> 14:39.460
不保存

14:39.460 --> 14:40.460
list的item里面

14:40.460 --> 14:42.460
因为我们使用了sqlview

14:42.460 --> 14:43.460
这个sqlview里面

14:43.460 --> 14:45.460
它是有一些事件的

14:45.460 --> 14:46.460
首先就有一个事件

14:46.460 --> 14:47.460
是什么呢

14:47.460 --> 14:48.460
我们的这个sqlview

14:48.460 --> 14:51.460
这里面有一个to lower

14:51.460 --> 14:52.460
这个事件

14:52.460 --> 14:53.460
咱们可以通过这个

14:53.460 --> 14:54.460
sqlview to lower

14:54.460 --> 14:55.460
事件的一个监听

14:55.460 --> 14:56.460
来判断一下

14:56.460 --> 14:58.460
当前我们的滚动

14:58.460 --> 14:59.460
是否到底了

14:59.460 --> 15:00.460
如果说到底了

15:00.460 --> 15:01.460
我们怎么办

15:01.460 --> 15:03.460
我们就使用一个loader mall

15:03.460 --> 15:04.460
那这个

15:04.460 --> 15:05.460
定义一个事件

15:05.460 --> 15:07.460
那这个loader mall干嘛

15:07.460 --> 15:08.460
我们其实就是去

15:08.460 --> 15:09.460
加载更多

15:09.460 --> 15:10.460
就OK了吧

15:10.460 --> 15:11.460
对吧

15:11.460 --> 15:12.460
我们在这个里面

15:12.460 --> 15:13.460
定义一下

15:13.460 --> 15:14.460
这里面

15:14.460 --> 15:15.460
loader mall

15:15.460 --> 15:16.460
然后呢

15:16.460 --> 15:17.460
这里面打印一个

15:17.460 --> 15:18.460
就OK

15:18.460 --> 15:19.460
给同学们看一下

15:20.460 --> 15:21.460
undate

15:21.460 --> 15:22.460
如果说你到底之后

15:22.460 --> 15:23.460
肯定会处罚这个事件

15:23.460 --> 15:24.460
处罚这个事件

15:24.460 --> 15:25.460
这个就会被执行

15:25.460 --> 15:26.460
对吧

15:26.460 --> 15:27.460
那我们的这个

15:27.460 --> 15:28.460
实现的这个逻辑

15:28.460 --> 15:29.460
就是这样了

15:29.460 --> 15:30.460
我们来看一眼

15:30.460 --> 15:31.460
你会发现到底了

15:31.460 --> 15:32.460
到底了

15:32.460 --> 15:33.460
它马上就实现了

15:33.460 --> 15:34.460
对不对

15:34.460 --> 15:35.460
也就是说

15:35.460 --> 15:36.460
通知我们到底了

15:36.460 --> 15:37.460
通知到底怎么办

15:37.460 --> 15:38.460
我们的这个数据操作

15:38.460 --> 15:39.460
其实都在哪里

15:39.460 --> 15:40.460
都在我们的

15:40.460 --> 15:41.460
这个article list里面的

15:41.460 --> 15:42.460
所以说在这个里面

15:42.460 --> 15:43.460
我们要做一个什么

15:43.460 --> 15:44.460
事件的发送

15:44.460 --> 15:45.460
也就是说在这个里面

15:45.460 --> 15:46.460
你将这个事件

15:46.460 --> 15:48.460
获取到的这个结果

15:48.460 --> 15:49.460
到底这个结果

15:49.460 --> 15:50.460
你发送给谁呢

15:50.460 --> 15:51.460
发送给article list的

15:51.460 --> 15:52.460
由article list的

15:52.460 --> 15:53.460
重新

15:53.460 --> 15:54.460
然后呢

15:54.460 --> 15:55.460
再组织一次的

15:55.460 --> 15:56.460
数据请求

15:56.460 --> 15:57.460
就OK了

15:57.460 --> 15:58.460
那这时候

15:58.460 --> 15:59.460
使用一个

15:59.460 --> 16:00.460
这一次点

16:00.460 --> 16:01.460
Dollar Emit

16:01.460 --> 16:02.460
我发送一个事件

16:02.460 --> 16:03.460
自定义事件

16:03.460 --> 16:05.460
那这个叫loader mall

16:05.460 --> 16:07.900
也就是说

16:07.900 --> 16:08.900
进行加载

16:08.900 --> 16:10.900
更多的这样一个事件

16:10.900 --> 16:12.900
那我article list的里面

16:12.900 --> 16:14.900
在这个list的item下

16:14.900 --> 16:15.900
对这个事件

16:15.900 --> 16:16.900
就做一个监听

16:16.900 --> 16:17.900
监听

16:17.900 --> 16:18.900
我就在后面

16:18.900 --> 16:19.900
继续写

16:19.900 --> 16:20.900
这里面有一个

16:20.900 --> 16:21.900
add loader mall

16:21.900 --> 16:22.900
等于一个什么呢

16:22.900 --> 16:25.900
等于一个loader mall date

16:25.900 --> 16:26.900
好吧

16:26.900 --> 16:27.900
我们加在

16:27.900 --> 16:28.900
更多的数据

16:28.900 --> 16:29.900
在这个里面

16:29.900 --> 16:31.900
就是在master的里面

16:31.900 --> 16:32.900
我们定一下

16:32.900 --> 16:33.900
到这个里面

16:33.900 --> 16:35.900
定一个

16:35.900 --> 16:37.900
add loader mall date

16:37.900 --> 16:39.900
在上面一行

16:39.900 --> 16:40.900
写一下

16:40.900 --> 16:41.900
loader mall date

16:41.900 --> 16:43.900
然后直接在这个里面

16:43.900 --> 16:45.900
给同学们写一个注释

16:45.900 --> 16:46.900
这是

16:46.900 --> 16:48.900
到底加在

16:48.900 --> 16:50.900
更多

16:50.900 --> 16:51.900
内容

16:51.900 --> 16:52.900
事件

16:52.900 --> 16:53.900
OK

16:53.900 --> 16:54.900
这里面

16:54.900 --> 16:55.900
我们再打印一下

16:55.900 --> 16:57.900
到底的这个出发

16:57.900 --> 16:59.900
看是不是可行

16:59.900 --> 17:00.900
OK

17:00.900 --> 17:01.900
然后呢

17:01.900 --> 17:02.900
我们刷新一下界面

17:02.900 --> 17:03.900
这样快一些

17:03.900 --> 17:04.900
当我们到底之后

17:04.900 --> 17:05.900
OK

17:05.900 --> 17:06.900
Andate的

17:06.900 --> 17:07.900
这个已经执行了

17:07.900 --> 17:08.900
也就是说

17:08.900 --> 17:09.900
在我们的article list的

17:09.900 --> 17:10.900
vail下面的

17:10.900 --> 17:11.900
35行执行了

17:11.900 --> 17:12.900
那也就是说

17:12.900 --> 17:13.900
我们坚定到这个事件了

17:13.900 --> 17:14.900
坚定到这个事件

17:14.900 --> 17:16.900
我们其实现在要做什么

17:16.900 --> 17:17.900
我们直接是不是

17:17.900 --> 17:18.900
重新进行数据请求

17:18.900 --> 17:19.900
就OK了

17:19.900 --> 17:20.900
也就是说

17:20.900 --> 17:21.900
那我这里面

17:21.900 --> 17:22.900
再组织一次

17:22.900 --> 17:23.900
事件的这个请求

17:23.900 --> 17:24.900
我们知道

17:24.900 --> 17:25.900
事件请求函数是哪一个

17:25.900 --> 17:26.900
是不是我们这个

17:26.900 --> 17:27.900
数据请求函数

17:27.900 --> 17:28.900
是不是这个

17:28.900 --> 17:29.900
也就是说

17:29.900 --> 17:31.900
这个是数据请求函数

17:31.900 --> 17:32.900
那这个数据请求函数

17:32.900 --> 17:33.900
我再进行一次调用

17:33.900 --> 17:34.900
是不是就OK了

17:34.900 --> 17:35.900
也就是说

17:35.900 --> 17:36.900
在这个里面

17:36.900 --> 17:37.900
我们直接做一个

17:37.900 --> 17:38.900
这次点

17:38.900 --> 17:39.900
下号件

17:39.900 --> 17:40.900
guide

17:40.900 --> 17:41.900
article list的

17:41.900 --> 17:42.900
但是呢

17:42.900 --> 17:43.900
你这个里面

17:43.900 --> 17:44.900
刚才你是使用的

17:44.900 --> 17:45.900
第一个数据

17:45.900 --> 17:46.900
如果说你到底之后

17:46.900 --> 17:47.900
你这里面

17:47.900 --> 17:48.900
是不是得

17:48.900 --> 17:49.900
做一个数据的

17:49.900 --> 17:50.900
加加套做了

17:50.900 --> 17:51.900
也就是说

17:51.900 --> 17:52.900
此时你去请求的

17:52.900 --> 17:53.900
这个数据

17:53.900 --> 17:54.900
应该是什么呢

17:54.900 --> 17:55.900
应该是我们的

17:55.900 --> 17:56.900
这个配置加加

17:56.900 --> 17:58.900
那我这里面写一下

17:58.900 --> 17:59.900
这次点

17:59.900 --> 18:00.900
配置加加

18:00.900 --> 18:01.900
OK

18:01.900 --> 18:05.170
那咱们来看一下

18:05.170 --> 18:06.170
刷新一下界面

18:06.170 --> 18:07.170
同样的

18:07.170 --> 18:08.170
刷新完界面之后

18:08.170 --> 18:09.170
往下走

18:09.170 --> 18:10.170
OK

18:10.170 --> 18:11.170
这里面有一个报错

18:11.170 --> 18:12.170
有一个name的报错

18:12.170 --> 18:13.170
我们看一下

18:13.170 --> 18:14.170
load them all

18:14.170 --> 18:17.170
然后这次点配置加加

18:17.170 --> 18:19.170
之后这次点guide

18:19.170 --> 18:20.170
article list的

18:20.170 --> 18:22.170
name是哪一个报错

18:22.170 --> 18:23.170
我们来抽一行

18:23.170 --> 18:24.170
51行

18:24.170 --> 18:26.170
到51行

18:26.170 --> 18:27.170
这里面有一个报错

18:27.170 --> 18:29.170
article total

18:29.170 --> 18:31.170
这次点dollar ATP

18:31.170 --> 18:32.170
这个里面有一个问题

18:32.170 --> 18:33.170
是啥问题呢

18:33.170 --> 18:34.170
就是我们这里面

18:34.170 --> 18:35.170
是传了一个

18:35.170 --> 18:36.170
comment index

18:36.170 --> 18:37.170
但是我这个里面

18:37.170 --> 18:38.170
现在没有index

18:38.170 --> 18:39.170
那我这里面

18:39.170 --> 18:40.170
给它一个

18:40.170 --> 18:42.170
这次点active index

18:42.170 --> 18:43.170
这样是不是就能保证

18:43.170 --> 18:44.170
我们指定的

18:44.170 --> 18:46.170
当前选项卡的这一项

18:46.170 --> 18:47.170
也就是说

18:47.170 --> 18:48.170
全部数据

18:48.170 --> 18:49.170
进行一个数据的获取

18:49.170 --> 18:50.170
对不对

18:50.170 --> 18:51.170
我们再进行来

18:51.170 --> 18:52.170
这个数据请求

18:52.170 --> 18:53.170
那看数据请求的时候

18:53.170 --> 18:54.170
我们在这个里面

18:54.170 --> 18:55.170
看就OK了

18:55.170 --> 18:56.170
然后一二

18:56.170 --> 18:57.170
对不对

18:57.170 --> 18:58.170
又搞了一二

18:58.170 --> 18:59.170
搞了一二之后

18:59.170 --> 19:00.170
我们看一下

19:00.170 --> 19:01.170
它的传递参数

19:01.170 --> 19:02.170
配置二

19:02.170 --> 19:04.170
之后我们再发送

19:04.170 --> 19:05.170
又去加载

19:05.170 --> 19:06.170
但是加载加载

19:06.170 --> 19:07.170
你会发现

19:07.170 --> 19:08.170
比如说

19:08.170 --> 19:10.170
最后再加载的时候

19:10.170 --> 19:11.170
它没有数据了

19:11.170 --> 19:12.170
然后并且

19:12.170 --> 19:13.170
它现在已经loading了

19:13.170 --> 19:14.170
那这个原因是啥呢

19:14.170 --> 19:15.170
这个原因

19:15.170 --> 19:16.170
其实这里面很好理解

19:16.170 --> 19:18.170
我们打开pumbrace

19:18.170 --> 19:19.170
看一下最后一次

19:19.170 --> 19:20.170
加载这么一个过程

19:20.170 --> 19:21.170
那最后一次

19:21.170 --> 19:22.170
加载过程里面

19:22.170 --> 19:23.170
这时候

19:23.170 --> 19:24.170
你看

19:24.170 --> 19:25.170
我们这个里面

19:25.170 --> 19:26.170
要做了一个

19:26.170 --> 19:27.170
我把这个解开

19:27.170 --> 19:29.170
其实我们加载数据的时候

19:29.170 --> 19:30.170
我们加载的是

19:30.170 --> 19:31.170
第几页数据

19:31.170 --> 19:32.170
是不是已经是

19:32.170 --> 19:33.170
第四页数据了

19:33.170 --> 19:34.170
通过我们

19:34.170 --> 19:36.170
不断的对这个配置加加

19:36.170 --> 19:37.170
但是呢

19:37.170 --> 19:38.170
我们现在这个数据有没有

19:38.170 --> 19:39.170
其实我们这个数据

19:39.170 --> 19:40.170
是不是已经空了

19:40.170 --> 19:41.170
也就是说

19:41.170 --> 19:43.170
那这个里面有可能是什么

19:43.170 --> 19:44.170
没有这个数据

19:44.170 --> 19:45.170
对不对

19:45.170 --> 19:46.170
并且呢

19:46.170 --> 19:47.170
我们这个数据

19:47.170 --> 19:48.170
还有一个问题

19:48.170 --> 19:49.170
这里面

19:49.170 --> 19:50.170
给同学们再看一眼

19:50.170 --> 19:51.170
当我这个里面

19:51.170 --> 19:52.170
去刷新的时候

19:52.170 --> 19:54.170
加载

19:54.170 --> 19:55.170
加载完了之后

19:55.170 --> 19:56.170
你会发现

19:56.170 --> 19:58.170
我们的这个总长是多少

19:58.170 --> 19:59.170
咱们在这个里面

19:59.170 --> 20:00.170
给同学们看一眼

20:00.170 --> 20:01.170
现在当前的

20:01.170 --> 20:02.170
这个数据的总长

20:02.170 --> 20:04.170
我们直接找到articleList的吧

20:04.170 --> 20:05.170
articleList的

20:05.170 --> 20:06.170
还有

20:06.170 --> 20:07.170
那这个里面

20:07.170 --> 20:08.170
其实是呢

20:08.170 --> 20:09.170
我把第二页的数据

20:09.170 --> 20:10.170
给替换过来了

20:10.170 --> 20:11.170
然后呢

20:11.170 --> 20:12.170
同时展示的

20:12.170 --> 20:13.170
还是六条数据

20:13.170 --> 20:14.170
那这个就不对了

20:14.170 --> 20:15.170
因为呢

20:15.170 --> 20:16.170
因为我们这里面

20:16.170 --> 20:17.170
是不是得需要

20:17.170 --> 20:18.170
做一个什么事

20:18.170 --> 20:19.170
我们是不是得需要

20:19.170 --> 20:20.170
做一个追加操作啊

20:20.170 --> 20:21.170
所以说

20:21.170 --> 20:22.170
你在复职的时候

20:22.170 --> 20:23.170
也就是说在这个为止

20:23.170 --> 20:25.170
我们复职的时候

20:25.170 --> 20:27.170
不应该是直接的

20:27.170 --> 20:28.170
像这个

20:28.170 --> 20:29.170
这次的articleList的

20:29.170 --> 20:30.170
给他把这个

20:30.170 --> 20:31.170
每一次新职

20:31.170 --> 20:32.170
都给他复职过去

20:32.170 --> 20:33.170
我们要做什么呢

20:33.170 --> 20:34.170
我们要在这个里面

20:34.170 --> 20:35.170
做一个追加操作

20:35.170 --> 20:36.170
如何来实现

20:36.170 --> 20:37.170
追加操作呢

20:37.170 --> 20:38.170
我这里面

20:38.170 --> 20:39.170
可以使用一个什么的

20:39.170 --> 20:40.170
变量

20:40.170 --> 20:41.170
那我这里面

20:41.170 --> 20:42.170
写一个什么

20:42.170 --> 20:43.170
oldList

20:43.170 --> 20:45.170
那oldList的等于谁呢

20:45.170 --> 20:46.170
就是我们这个

20:46.170 --> 20:47.170
获取到的

20:47.170 --> 20:49.170
这个articleList啊

20:49.170 --> 20:52.170
这一次的articleDate

20:52.170 --> 20:54.170
然后下面的currentIndice

20:54.170 --> 20:55.170
但是呢

20:55.170 --> 20:56.170
这里面有一个问题

20:56.170 --> 20:57.170
什么问题呢

20:57.170 --> 20:58.170
你看啊

20:58.170 --> 20:59.170
我给你打印一下

20:59.170 --> 21:00.170
我这里面打印一个

21:00.170 --> 21:02.170
oldList

21:02.170 --> 21:03.170
并且呢

21:03.170 --> 21:04.170
我在这里面

21:04.170 --> 21:05.170
给他一个return的操作

21:05.170 --> 21:06.170
咱们来看一眼

21:06.170 --> 21:07.170
这个结果啊

21:07.170 --> 21:09.170
我们可以看一下

21:09.170 --> 21:10.170
刷新一下

21:10.170 --> 21:11.170
刷新一下

21:11.170 --> 21:12.170
出指画的时候

21:12.170 --> 21:13.170
它是安迪范的

21:13.170 --> 21:14.170
那这个安迪范的

21:14.170 --> 21:15.170
就干达了

21:15.170 --> 21:16.170
也就是说

21:16.170 --> 21:17.170
第一次其实

21:17.170 --> 21:18.170
它是什么

21:18.170 --> 21:19.170
没有这个值的

21:19.170 --> 21:20.170
对不对

21:20.170 --> 21:21.170
那没有这个值

21:21.170 --> 21:22.170
咋办呢

21:22.170 --> 21:23.170
那没有这个值

21:23.170 --> 21:24.170
其实我让它等于一个什么

21:24.170 --> 21:25.170
或者是

21:25.170 --> 21:26.170
等于一个空数组

21:26.170 --> 21:27.170
那这样我就定一个数组

21:27.170 --> 21:28.170
这个数组干嘛呢

21:28.170 --> 21:29.170
这个数组

21:29.170 --> 21:30.170
就是专门

21:30.170 --> 21:31.170
把每次请求的

21:31.170 --> 21:32.170
给做一个push操作

21:32.170 --> 21:33.170
也就是说

21:33.170 --> 21:34.170
我们这里面

21:34.170 --> 21:36.170
oldList.push

21:36.170 --> 21:37.170
push谁呢

21:37.170 --> 21:38.170
push我们每次

21:38.170 --> 21:39.170
请求过来的

21:39.170 --> 21:40.170
这个add list的

21:40.170 --> 21:41.170
我们给它做一个解构

21:41.170 --> 21:42.170
然后最后呢

21:42.170 --> 21:44.170
这个old list

21:44.170 --> 21:45.170
就能把

21:45.170 --> 21:46.170
每一次请求

21:46.170 --> 21:47.170
也就是说

21:47.170 --> 21:48.170
第一页 第二页

21:48.170 --> 21:49.170
然后以至于

21:49.170 --> 21:50.170
后面

21:50.170 --> 21:51.170
好多一页的数据

21:51.170 --> 21:52.170
它都能给做一个收集

21:52.170 --> 21:53.170
收集完成之后

21:53.170 --> 21:54.170
它就在我们

21:54.170 --> 21:55.170
当前的

21:55.170 --> 21:56.170
这个对象里面

21:56.170 --> 21:57.170
指定的这一项里面

21:57.170 --> 21:59.170
我们给它做一个

21:59.170 --> 22:00.170
一直追加的

22:00.170 --> 22:01.170
这样一个操作

22:01.170 --> 22:02.170
对不对

22:02.170 --> 22:03.170
我们可以来看一下

22:03.170 --> 22:04.170
打开我们的这个view

22:04.170 --> 22:05.170
然后呢

22:05.170 --> 22:06.170
刷新一下界面

22:06.170 --> 22:07.170
刷新一下界面

22:07.170 --> 22:08.170
这时候

22:08.170 --> 22:09.170
肯定有第一个数据

22:09.170 --> 22:10.170
咱也不看那个

22:10.170 --> 22:11.170
sorry啊

22:11.170 --> 22:12.170
这个还看不到

22:12.170 --> 22:13.170
那我们直接怎么办呢

22:13.170 --> 22:14.170
这个里面

22:14.170 --> 22:15.170
我们还得在这个

22:15.170 --> 22:16.170
控制台里面

22:16.170 --> 22:17.170
来进行一个查看

22:17.170 --> 22:18.170
首先

22:18.170 --> 22:19.170
初始化的时候

22:19.170 --> 22:20.170
它有六条数据

22:20.170 --> 22:21.170
对不对

22:21.170 --> 22:22.170
当我再去加载的时候

22:22.170 --> 22:23.170
这里面又是

22:23.170 --> 22:24.170
12条数据了

22:24.170 --> 22:25.170
对吧

22:25.170 --> 22:26.170
那如果说

22:26.170 --> 22:27.170
我想调整

22:27.170 --> 22:28.170
上面那个值

22:28.170 --> 22:29.170
也就是说

22:29.170 --> 22:30.170
这个OdeList的本质

22:30.170 --> 22:32.170
是不是就是把这个

22:32.170 --> 22:33.170
ArticleList

22:33.170 --> 22:34.170
给它做一个替换

22:34.170 --> 22:35.170
就ok了

22:35.170 --> 22:37.170
那这样就能保证什么

22:37.170 --> 22:38.170
我们一直在这个

22:38.170 --> 22:39.170
原有数据的基础上

22:39.170 --> 22:40.170
进行一个

22:40.170 --> 22:42.170
累加的这么一个操作

22:42.170 --> 22:43.170
也就是说

22:43.170 --> 22:44.170
一个追加的操作

22:44.170 --> 22:45.170
咱们来看一下

22:45.170 --> 22:47.170
当我滚动到底之后

22:47.170 --> 22:48.170
这个时候

22:48.170 --> 22:49.170
往上划

22:49.170 --> 22:50.170
一页两页

22:50.170 --> 22:51.170
三页四页

22:51.170 --> 22:52.170
五页六页

22:52.170 --> 22:53.170
然后你会发现

22:53.170 --> 22:54.170
七八九十

22:54.170 --> 22:55.170
十一十二

22:55.170 --> 22:56.170
是不是把所有的这个数据

22:56.170 --> 22:57.170
都已经

22:57.170 --> 22:58.170
第二页

22:58.170 --> 22:59.170
包括第一页的数据

22:59.170 --> 23:00.170
它都做了一个

23:00.170 --> 23:01.170
追加操作

23:01.170 --> 23:02.170
对不对

23:02.170 --> 23:03.170
因为我现在请求的是什么

23:03.170 --> 23:04.170
是不是这个

23:04.170 --> 23:05.170
第二页的一个数据

23:05.170 --> 23:06.170
配置2

23:06.170 --> 23:08.170
然后咱们还可以看一下

23:08.170 --> 23:09.170
什么

23:09.170 --> 23:10.170
ArticleList的里面

23:10.170 --> 23:11.170
此时它存了

23:11.170 --> 23:12.170
12条数据

23:12.170 --> 23:13.170
那这个就ok了

23:13.170 --> 23:14.170
之后

23:14.170 --> 23:15.170
我再比如说

23:15.170 --> 23:16.170
再获取第三页数据

23:16.170 --> 23:17.170
这也没问题

23:17.170 --> 23:18.170
对不对

23:18.170 --> 23:19.170
那这个呢

23:19.170 --> 23:20.170
就是我们一个

23:20.170 --> 23:21.170
优化的一个操作方案

23:21.170 --> 23:22.170
那这一步

23:22.170 --> 23:23.170
给同学们写一下

23:23.170 --> 23:24.170
就是说

23:24.170 --> 23:25.170
追加

23:25.170 --> 23:27.170
每一次的一个什么

23:27.170 --> 23:30.170
的请求数据结果

23:30.170 --> 23:31.170
ok

23:31.170 --> 23:32.170
好的

23:32.170 --> 23:33.170
那这个搞定之后

23:33.170 --> 23:35.170
咱们再来看一个问题

23:35.170 --> 23:36.170
其实这里面

23:36.170 --> 23:37.170
就是我们处理一个

23:37.170 --> 23:38.170
bug的问题了

23:38.170 --> 23:39.170
接下来

23:39.170 --> 23:40.170
啥问题呢

23:40.170 --> 23:41.170
你看

23:41.170 --> 23:42.170
当我这个里面

23:42.170 --> 23:43.170
请求一页

23:43.170 --> 23:44.170
ok

23:44.170 --> 23:45.170
再请求第二页

23:45.170 --> 23:46.170
此时呢

23:46.170 --> 23:47.170
应该是什么

23:47.170 --> 23:48.170
三页数据了

23:48.170 --> 23:49.170
两页

23:49.170 --> 23:50.170
那咱们再来一页

23:50.170 --> 23:51.170
ok

23:51.170 --> 23:52.170
到底之后

23:52.170 --> 23:53.170
这又有一页了

23:53.170 --> 23:54.170
有一页

23:54.170 --> 23:55.170
是不是三页了

23:55.170 --> 23:56.170
对吧

23:56.170 --> 23:57.170
你会发现

23:57.170 --> 23:58.170
这个时候有问题

23:58.170 --> 23:59.170
啥问题呢

23:59.170 --> 24:00.170
就现在这个

24:00.170 --> 24:01.170
前端开发没有数据了

24:01.170 --> 24:02.170
它的原因

24:02.170 --> 24:04.170
其实我们很好理解

24:04.170 --> 24:05.170
是因为啥呢

24:05.170 --> 24:07.170
你每次发请求的时候

24:07.170 --> 24:09.170
比如说由于我刚才在这个

24:09.170 --> 24:10.170
我们直接的这个里面

24:10.170 --> 24:11.170
全部里面

24:11.170 --> 24:12.170
做了一个操作

24:12.170 --> 24:13.170
做了一个啥操作呢

24:13.170 --> 24:14.170
就是说

24:14.170 --> 24:15.170
我在这个全部里面

24:15.170 --> 24:16.170
已经把这个配置

24:16.170 --> 24:17.170
调整为三了

24:17.170 --> 24:18.170
那此时

24:18.170 --> 24:19.170
你再到前端开发里面

24:19.170 --> 24:20.170
去发请求的时候

24:20.170 --> 24:21.170
你这时候

24:21.170 --> 24:23.170
是不是对这个

24:23.170 --> 24:24.170
发起请求的时候

24:24.170 --> 24:25.170
参数

24:25.170 --> 24:26.170
进行一个重置操作

24:26.170 --> 24:27.170
对不对

24:27.170 --> 24:28.170
那没有做重置操作

24:28.170 --> 24:29.170
这时候就导致

24:29.170 --> 24:31.170
我们去获取前端

24:31.170 --> 24:33.170
因为前端开发的数据不多

24:33.170 --> 24:34.170
然后不多怎么办呢

24:34.170 --> 24:36.170
你这时候又想进行一个啥呢

24:36.170 --> 24:37.170
分析啥取

24:37.170 --> 24:39.170
此时你使得这个业数

24:39.170 --> 24:40.170
不正确

24:40.170 --> 24:41.170
那咋办呢

24:41.170 --> 24:42.170
我这里面还得把这个

24:42.170 --> 24:44.170
前端开发调成

24:44.170 --> 24:45.170
并且呢

24:45.170 --> 24:46.170
我们后端开发这一块

24:46.170 --> 24:47.170
也得调成什么

24:47.170 --> 24:48.170
也得指定为一

24:48.170 --> 24:50.170
但是指定为一就可以了吗

24:50.170 --> 24:52.170
其实也不对啊

24:52.170 --> 24:53.170
未来说不对呢

24:53.170 --> 24:54.170
你看一眼

24:55.170 --> 24:56.170
当我们在这个

24:56.170 --> 24:57.170
全部这一块

24:57.170 --> 24:58.170
假如说我这里面

24:58.170 --> 24:59.170
ok

24:59.170 --> 25:00.170
现在是两页数据

25:00.170 --> 25:01.170
我们可以看一下

25:01.170 --> 25:02.170
这个view这一块

25:02.170 --> 25:03.170
article list的里面

25:03.170 --> 25:04.170
咱们这里面

25:04.170 --> 25:05.170
0

25:05.170 --> 25:06.170
有两页数据

25:06.170 --> 25:07.170
对不对

25:07.170 --> 25:08.170
配置是2

25:08.170 --> 25:09.170
当我去到前端开发的时候

25:09.170 --> 25:10.170
此时它没有数据

25:10.170 --> 25:12.170
咱不用管它啊

25:12.170 --> 25:13.170
你没有数据

25:13.170 --> 25:14.170
然后呢

25:14.170 --> 25:15.170
我再回过来的时候

25:15.170 --> 25:16.170
其实我现在

25:16.170 --> 25:17.170
是不是还可以

25:17.170 --> 25:18.170
进行请求的发送

25:18.170 --> 25:19.170
也就是说

25:19.170 --> 25:20.170
第一对不对

25:20.170 --> 25:21.170
如果说你给他调成一了

25:21.170 --> 25:22.170
那我再去请求

25:22.170 --> 25:23.170
这个是不是也乱套了

25:23.170 --> 25:24.170
所以说我们这里面

25:24.170 --> 25:25.170
得设计一种结构

25:25.170 --> 25:26.170
什么结构呢

25:26.170 --> 25:28.170
就是我们要保存

25:28.170 --> 25:30.170
每一样的一个什么呢

25:30.170 --> 25:31.170
它有一个描述对象

25:31.170 --> 25:32.170
这个描述对象

25:32.170 --> 25:33.170
指的是什么呢

25:33.170 --> 25:35.170
当前你请求了几页数据

25:35.170 --> 25:36.170
然后呢

25:36.170 --> 25:38.170
你这个数据里面

25:38.170 --> 25:39.170
请求了几页数据

25:39.170 --> 25:40.170
这是第一个

25:40.170 --> 25:41.170
第二个是什么呢

25:41.170 --> 25:42.170
我们直接的

25:42.170 --> 25:43.170
这个里面

25:43.170 --> 25:44.170
现在啊

25:44.170 --> 25:45.170
就是说

25:45.170 --> 25:46.170
它的一个加载状态

25:46.170 --> 25:47.170
比如说如果说

25:47.170 --> 25:48.170
你全部都请求完了

25:48.170 --> 25:49.170
像我这种

25:49.170 --> 25:50.170
最后都请求完了

25:50.170 --> 25:51.170
那你直接是不是

25:51.170 --> 25:52.170
已经就是说

25:52.170 --> 25:53.170
你提示一个

25:53.170 --> 25:54.170
是不是有一个

25:54.170 --> 25:55.170
这种效果

25:55.170 --> 25:56.170
那这个怎么来实现呢

25:56.170 --> 25:58.170
这个其实也非常好实现

25:58.170 --> 26:00.170
我们因为已经定义了一个

26:00.170 --> 26:01.170
这个里面

26:01.170 --> 26:03.170
有一个article data

26:03.170 --> 26:04.170
这个article data

26:04.170 --> 26:05.170
是个做啥的呢

26:05.170 --> 26:07.170
就是按我们选项卡的

26:07.170 --> 26:08.170
一个分类

26:08.170 --> 26:09.170
来进行指定

26:09.170 --> 26:10.170
k值

26:10.170 --> 26:11.170
然后将所有值

26:11.170 --> 26:12.170
指定为k值

26:12.170 --> 26:13.170
这样呢

26:13.170 --> 26:14.170
每一项

26:14.170 --> 26:15.170
来进行数据的填充

26:15.170 --> 26:16.170
那其实我们这里面

26:16.170 --> 26:17.170
还可以做一个什么呢

26:17.170 --> 26:18.170
load date

26:18.170 --> 26:19.170
load date

26:19.170 --> 26:20.170
也是一个对象

26:20.170 --> 26:21.170
这个对象

26:21.170 --> 26:22.170
其实和它差不多

26:23.170 --> 26:24.170
但是我这个load date

26:24.170 --> 26:25.170
里面

26:25.170 --> 26:26.170
填充的内容

26:26.170 --> 26:27.170
它是做什么呢

26:27.170 --> 26:28.170
把每一个选项卡里面的

26:28.170 --> 26:29.170
这个状态

26:29.170 --> 26:30.170
然后呢给它做一个保存

26:30.170 --> 26:31.170
并且呢

26:31.170 --> 26:32.170
把当前

26:32.170 --> 26:33.170
已经加载到第几页

26:33.170 --> 26:34.170
我们直接

26:34.170 --> 26:35.170
也给它做一个保存

26:35.170 --> 26:36.170
就ok了

26:36.170 --> 26:37.170
这个里面

26:37.170 --> 26:38.170
其实我就不要配置了

26:38.170 --> 26:39.170
我分闷别类的

26:39.170 --> 26:40.170
每一项里面

26:40.170 --> 26:41.170
专门传

26:41.170 --> 26:42.170
它指定的

26:42.170 --> 26:43.170
那一个配置

26:43.170 --> 26:44.170
就ok了

26:44.170 --> 26:46.170
这个怎么来实现呢

26:46.170 --> 26:47.170
出色化的时候

26:47.170 --> 26:48.170
它是什么都没有的

26:48.170 --> 26:49.170
对不对

26:49.170 --> 26:50.170
那我到哪个里面

26:50.170 --> 26:51.170
有呢

26:51.170 --> 26:53.170
在这个guidearticle list

26:53.170 --> 26:54.170
下面

26:54.170 --> 26:55.170
也就是说我开始进行

26:55.170 --> 26:56.170
数据请求了

26:56.170 --> 26:57.170
对不对

26:57.170 --> 26:58.170
那我这里面

26:58.170 --> 26:59.170
先进行一个什么呢

26:59.170 --> 27:00.170
指定

27:00.170 --> 27:01.170
每一个

27:02.170 --> 27:03.170
选项

27:03.170 --> 27:04.170
每一个

27:04.170 --> 27:06.170
或者是分类里面的

27:07.170 --> 27:09.170
分类里面的

27:09.170 --> 27:11.860
页数信息

27:11.860 --> 27:12.860
ok

27:12.860 --> 27:13.860
如何来做呢

27:13.860 --> 27:14.860
我这里面就判断一下

27:14.860 --> 27:15.860
如果说

27:15.860 --> 27:16.860
这次

27:16.860 --> 27:18.860
load date

27:18.860 --> 27:20.860
然后它下面的什么呢

27:21.860 --> 27:22.860
如果说它没有这一项

27:22.860 --> 27:23.860
那其实出色化的时候

27:23.860 --> 27:24.860
是不是

27:24.860 --> 27:25.860
肯定没有这一项

27:25.860 --> 27:26.860
对吧

27:26.860 --> 27:27.860
因为它是一个空对象

27:27.860 --> 27:28.860
假如说

27:28.860 --> 27:29.860
你要是没有这一项的话

27:29.860 --> 27:31.860
那我给你扩展一下

27:31.860 --> 27:33.860
这一次点load date

27:33.860 --> 27:35.860
下画里面的

27:35.860 --> 27:36.860
然后呢

27:36.860 --> 27:38.860
我让它重新等于一个指

27:38.860 --> 27:39.860
等于一个什么指呢

27:39.860 --> 27:41.860
等于我们的这个配置

27:41.860 --> 27:42.860
这里面

27:42.860 --> 27:43.860
写一个一

27:43.860 --> 27:44.860
然后呢

27:44.860 --> 27:45.860
咱们说了

27:45.860 --> 27:46.860
这里面还有一个loading

27:46.860 --> 27:47.860
效果对吧

27:47.860 --> 27:49.860
那我把这个loading效果

27:49.860 --> 27:51.860
添加一下

27:51.860 --> 27:52.860
loading

27:52.860 --> 27:53.860
让它正在加载中

27:53.860 --> 27:54.860
之后呢

27:54.860 --> 27:55.860
我给它一个什么

27:55.860 --> 27:56.860
总数啊

27:56.860 --> 27:57.860
偷偷

27:57.860 --> 27:58.860
偷偷呢

27:58.860 --> 28:00.860
其实我们是返回的是什么

28:00.860 --> 28:01.860
每一项的

28:01.860 --> 28:02.860
比如说我们一开始

28:02.860 --> 28:03.860
选择这个

28:03.860 --> 28:04.860
分类

28:04.860 --> 28:06.860
就是为全部的这一项

28:06.860 --> 28:07.860
其实它是18条

28:07.860 --> 28:08.860
当我们选择其他的

28:08.860 --> 28:09.860
它可能没有这些数据

28:09.860 --> 28:10.860
对不对

28:10.860 --> 28:11.860
所以说呢

28:11.860 --> 28:12.860
每一项里面

28:12.860 --> 28:13.860
其实还是有一个总数

28:13.860 --> 28:14.860
在这个里面的

28:14.860 --> 28:15.860
那我这时候呢

28:15.860 --> 28:16.860
就加一个偷偷

28:16.860 --> 28:17.860
那你加完这些

28:17.860 --> 28:18.860
要做一个啥事呢

28:18.860 --> 28:19.860
我这个去

28:19.860 --> 28:20.860
请求数据的时候

28:20.860 --> 28:21.860
这个这次点

28:21.860 --> 28:22.860
配置就不需要了

28:22.860 --> 28:23.860
对吧

28:23.860 --> 28:24.860
我要指定的

28:24.860 --> 28:25.860
那一项的

28:25.860 --> 28:26.860
这个信息

28:26.860 --> 28:27.860
那我这里面

28:27.860 --> 28:28.860
就可以写一个

28:28.860 --> 28:29.860
这次点

28:29.860 --> 28:30.860
loading date

28:30.860 --> 28:31.860
下里面的

28:31.860 --> 28:32.860
中控号

28:32.860 --> 28:34.860
current index

28:34.860 --> 28:35.860
点一个什么呢

28:35.860 --> 28:36.860
我们取他的

28:36.860 --> 28:37.860
一个配置

28:37.860 --> 28:38.860
是不是就可以了

28:38.860 --> 28:39.860
也就是说

28:39.860 --> 28:40.860
做这么一个操作啊

28:40.860 --> 28:41.860
那做完这个操作之后

28:41.860 --> 28:42.860
如果说

28:42.860 --> 28:43.860
我们拿到这个

28:43.860 --> 28:44.860
偷偷之后

28:44.860 --> 28:45.860
那我们直接的

28:45.860 --> 28:46.860
是不是已经拿到数据了吗

28:46.860 --> 28:47.860
这时候

28:47.860 --> 28:48.860
数据的时候

28:48.860 --> 28:49.860
我们是不是可以

28:49.860 --> 28:50.860
把这个偷偷

28:50.860 --> 28:51.860
给做一个处理啊

28:51.860 --> 28:52.860
对吧

28:52.860 --> 28:54.860
在哪个里面处理

28:54.860 --> 28:55.860
在这个里面处理啊

28:55.860 --> 28:56.860
如果说我们

28:56.860 --> 28:57.860
这个都已经做完了

28:57.860 --> 28:58.860
我直接在这

28:58.860 --> 28:59.860
这次点

28:59.860 --> 29:00.860
loading date

29:00.860 --> 29:01.860
当获取到偷偷之后

29:01.860 --> 29:02.860
那我直接的

29:02.860 --> 29:03.860
里面的

29:03.860 --> 29:05.860
current index

29:05.860 --> 29:06.860
然后呢

29:06.860 --> 29:08.860
点偷偷

29:08.860 --> 29:11.860
就等于我们

29:11.860 --> 29:12.860
获取到的这个偷偷

29:12.860 --> 29:13.860
是不是就可以了

29:13.860 --> 29:15.860
等于我们获取到

29:15.860 --> 29:16.860
从后段

29:16.860 --> 29:18.860
OK那经过这个操作之后

29:18.860 --> 29:19.860
其实我们这一项里面

29:19.860 --> 29:21.860
就应该有值了

29:21.860 --> 29:22.860
我们来看一眼

29:22.860 --> 29:23.860
这个数据

29:23.860 --> 29:24.860
好的

29:24.860 --> 29:25.860
请求数据

29:25.860 --> 29:26.860
回到我们 will

29:26.860 --> 29:27.860
看article list

29:27.860 --> 29:28.860
你会发现

29:28.860 --> 29:29.860
这个时候

29:29.860 --> 29:31.860
我们除了article date之外

29:31.860 --> 29:32.860
还有一个loaded date

29:32.860 --> 29:33.860
loaded date

29:33.860 --> 29:34.860
地零像

29:34.860 --> 29:35.860
是loading

29:35.860 --> 29:36.860
然后配置是一

29:36.860 --> 29:37.860
偷偷是18

29:37.860 --> 29:38.860
那这个

29:38.860 --> 29:39.860
是不是没啥问题啊

29:39.860 --> 29:40.860
我们现在啊

29:40.860 --> 29:41.860
不做比其他

29:41.860 --> 29:42.860
做我们直接

29:42.860 --> 29:43.860
到第二项

29:43.860 --> 29:44.860
第二项里面

29:44.860 --> 29:45.860
你看这里面

29:45.860 --> 29:46.860
loaded date

29:46.860 --> 29:47.860
又加了一个什么

29:47.860 --> 29:48.860
loading

29:48.860 --> 29:49.860
配置一

29:49.860 --> 29:50.860
然后它的总数呢

29:50.860 --> 29:51.860
也就是说

29:51.860 --> 29:52.860
前段开发的一块

29:52.860 --> 29:53.860
它代表什么意思呢

29:53.860 --> 29:55.860
只有五条数据对不对

29:55.860 --> 29:57.860
那这个是它的一个处理

29:57.860 --> 29:59.860
那这个就处理完了之后

29:59.860 --> 30:01.860
现在就能解决一个什么问题呢

30:01.860 --> 30:03.860
当我去每次加载的时候

30:03.860 --> 30:05.860
它都用自己的这个分页

30:05.860 --> 30:06.860
来做一个操作

30:06.860 --> 30:07.860
是不是就可以了

30:07.860 --> 30:08.860
但是这个

30:08.860 --> 30:09.860
我们这里面啊

30:09.860 --> 30:10.860
还有一个问题

30:10.860 --> 30:11.860
是需要处理一下

30:11.860 --> 30:12.860
啥问题呢

30:12.860 --> 30:14.860
就是你现在已经指定了这个loading

30:14.860 --> 30:16.860
我们是不是要给这个list

30:16.860 --> 30:17.860
item里面

30:17.860 --> 30:18.860
要给它传过去啊

30:18.860 --> 30:19.860
对不对

30:19.860 --> 30:20.860
因为一会还有什么

30:20.860 --> 30:22.860
加载全部都已经加载完成

30:22.860 --> 30:23.860
这么一个过程对吧

30:23.860 --> 30:24.860
也就是说

30:24.860 --> 30:25.860
得放到这个里面

30:25.860 --> 30:26.860
那这个咋做呢

30:26.860 --> 30:28.860
我们回到这个

30:28.860 --> 30:29.860
article list的里面

30:29.860 --> 30:30.860
那现在

30:30.860 --> 30:31.860
既然我们可以传

30:31.860 --> 30:32.860
那个list的item

30:32.860 --> 30:33.860
给你们一项

30:33.860 --> 30:34.860
就是说

30:34.860 --> 30:35.860
我们这个列表里面

30:35.860 --> 30:36.860
传那个

30:36.860 --> 30:38.860
我们的这个article list的

30:38.860 --> 30:39.860
那我们还可以传一个什么

30:39.860 --> 30:41.860
传一个loaded date

30:41.860 --> 30:42.860
对不对

30:42.860 --> 30:43.860
那我这里面

30:44.860 --> 30:45.860
等于什么呢

30:45.860 --> 30:46.860
就是等于

30:46.860 --> 30:48.860
我们刚才过滤的loaded date

30:48.860 --> 30:49.860
然后这个loaded date呢

30:49.860 --> 30:51.860
指定一个index

30:51.860 --> 30:52.860
ok

30:52.860 --> 30:53.860
那这样就传递过去了

30:53.860 --> 30:54.860
传递过去啊

30:54.860 --> 30:55.860
直接的之后

30:55.860 --> 30:56.860
那我们直接的

30:56.860 --> 30:57.860
在这个里面

30:57.860 --> 30:58.860
list的item

30:58.860 --> 30:59.860
我们要调整一下

30:59.860 --> 31:01.860
到list的item里面

31:01.860 --> 31:03.860
我们这里面是有一个probs

31:03.860 --> 31:04.860
probs啊

31:04.860 --> 31:05.860
给它调整一下结构

31:05.860 --> 31:06.860
那这个里面

31:06.860 --> 31:07.860
有一个article list的

31:07.860 --> 31:09.860
有一个article list的之后

31:09.860 --> 31:10.860
我们在这个里面

31:10.860 --> 31:11.860
再扩展一个什么属性

31:11.860 --> 31:12.860
叫loaded date

31:12.860 --> 31:14.860
loaded date

31:14.860 --> 31:15.860
loaded date呢

31:15.860 --> 31:16.860
就是我们接收的这个纸

31:16.860 --> 31:17.860
接收这个纸

31:17.860 --> 31:18.860
首先我们规定一下

31:18.860 --> 31:19.860
什么呢

31:19.860 --> 31:20.860
它的tab

31:20.860 --> 31:21.860
tab呢

31:21.860 --> 31:22.860
应该是arbeject

31:22.860 --> 31:23.860
对吧

31:23.860 --> 31:24.860
在这个里面呢

31:24.860 --> 31:25.860
我们再给它一个

31:25.860 --> 31:26.860
默认值default

31:26.860 --> 31:28.860
这里面写一个对象

31:28.860 --> 31:30.860
return出去

31:30.860 --> 31:31.860
return出去

31:31.860 --> 31:32.860
我们就给它一个loading

31:32.860 --> 31:33.860
loading呢

31:33.860 --> 31:34.860
默认值

31:34.860 --> 31:35.860
给它一个loading

31:35.860 --> 31:36.860
ok 这就可以了

31:36.860 --> 31:37.860
可以之后

31:37.860 --> 31:38.860
我们将这个静态的

31:38.860 --> 31:39.860
sliders

31:39.860 --> 31:40.860
调整为动态的

31:40.860 --> 31:41.860
调整为动态的之后

31:41.860 --> 31:42.860
我们将这个loading

31:42.860 --> 31:43.860
变成一个自付创了

31:43.860 --> 31:44.860
那这时候呢

31:44.860 --> 31:45.860
我们就来判断一下

31:45.860 --> 31:47.860
如果说loaded date

31:47.860 --> 31:48.860
点loading

31:48.860 --> 31:49.860
有值的话

31:49.860 --> 31:50.860
也就是说这一个

31:50.860 --> 31:51.860
有值我就使用它

31:51.860 --> 31:52.860
否则那我就使用

31:52.860 --> 31:53.860
这个loading

31:53.860 --> 31:54.860
是不是就可以了

31:54.860 --> 31:55.860
那这时候

31:55.860 --> 31:56.860
我们再来看一下

31:56.860 --> 31:57.860
这个结果

31:57.860 --> 31:58.860
我们刷新一下界面

31:58.860 --> 31:59.860
刷新一下界面

31:59.860 --> 32:00.860
现在你看不出来

32:00.860 --> 32:01.860
啥效果

32:01.860 --> 32:02.860
但是呢

32:02.860 --> 32:03.860
我这个值啊

32:03.860 --> 32:04.860
是应该是

32:04.860 --> 32:05.860
已经传递过去了

32:05.860 --> 32:06.860
我们可以看一下

32:06.860 --> 32:07.860
List的item

32:07.860 --> 32:08.860
那这时候

32:08.860 --> 32:09.860
这里面是不是有一个值

32:09.860 --> 32:10.860
配置

32:10.860 --> 32:11.860
18

32:11.860 --> 32:12.860
对不对

32:12.860 --> 32:13.860
然后它是一个loading效果

32:13.860 --> 32:14.860
那接下来

32:14.860 --> 32:15.860
我们就做一个什么呢

32:15.860 --> 32:16.860
如果说你全部都

32:16.860 --> 32:17.860
请求完成之后

32:17.860 --> 32:18.860
那你这里面

32:18.860 --> 32:19.860
是不是得有一个什么

32:19.860 --> 32:20.860
处理的操作啊

32:20.860 --> 32:21.860
如果说你一直没有

32:21.860 --> 32:22.860
处理的操作

32:22.860 --> 32:23.860
你看啊

32:23.860 --> 32:24.860
它是一直在加载

32:24.860 --> 32:25.860
一直在加载

32:25.860 --> 32:26.860
对不对

32:26.860 --> 32:27.860
这样不断的在加载过程

32:27.860 --> 32:28.860
其实不断的加载过程

32:28.860 --> 32:29.860
这个里面

32:29.860 --> 32:30.860
它数据

32:30.860 --> 32:31.860
48条数据了

32:31.860 --> 32:32.860
48条数据

32:32.860 --> 32:33.860
然后咱们再看一下

32:33.860 --> 32:34.860
这个里面

32:34.860 --> 32:35.860
数据也不少

32:35.860 --> 32:36.860
然后为什么

32:36.860 --> 32:37.860
每次都能返回

32:37.860 --> 32:38.860
只是parmerise

32:38.860 --> 32:39.860
配置1

32:39.860 --> 32:40.860
没加是因为

32:40.860 --> 32:41.860
它一直在请求

32:41.860 --> 32:42.860
第一二的数据

32:42.860 --> 32:43.860
这个里面

32:43.860 --> 32:44.860
我们去哪个里面

32:45.860 --> 32:46.860
那这个里面

32:46.860 --> 32:47.860
我们要怎么做呢

32:47.860 --> 32:49.860
其实回到代码里面

32:49.860 --> 32:50.860
回到代码里面

32:50.860 --> 32:52.860
我们还是找到什么

32:52.860 --> 32:53.860
我们的article list

32:53.860 --> 32:54.860
在这个里面

32:54.860 --> 32:55.860
做一下调整

32:55.860 --> 32:56.860
我们在这个

32:56.860 --> 32:57.860
加载loader mode的时候

32:57.860 --> 32:58.860
其实这里面

32:58.860 --> 32:59.860
是不是隔这一块

32:59.860 --> 33:00.860
loader mode

33:00.860 --> 33:01.860
这里面

33:01.860 --> 33:02.860
还是用这种

33:02.860 --> 33:03.860
这次点配置加加

33:03.860 --> 33:04.860
实际上

33:04.860 --> 33:05.860
如果说你再做

33:05.860 --> 33:06.860
这次点配置加加

33:06.860 --> 33:07.860
这个就不合适了

33:07.860 --> 33:09.860
那我们应该调整一下

33:09.860 --> 33:10.860
调整一个啥呢

33:10.860 --> 33:11.860
我们这个

33:11.860 --> 33:13.860
把这次点配置加加

33:13.860 --> 33:15.860
给它调整为什么呢

33:15.860 --> 33:16.860
我们使用指定的

33:16.860 --> 33:17.860
这次点loader data

33:17.860 --> 33:18.860
然后这里面

33:18.860 --> 33:20.860
是这次点一个什么

33:20.860 --> 33:21.860
active index

33:21.860 --> 33:22.860
对吧

33:22.860 --> 33:24.860
当前的这一项

33:24.860 --> 33:25.860
然后呢

33:25.860 --> 33:26.860
我们直接的

33:26.860 --> 33:28.860
让它里面的配置

33:28.860 --> 33:29.860
做一个什么加加

33:29.860 --> 33:30.860
那这样呢

33:30.860 --> 33:31.860
我们就能处理

33:31.860 --> 33:32.860
这个问题

33:32.860 --> 33:33.860
咱们先把这个问题

33:33.860 --> 33:34.860
解决一下

33:34.860 --> 33:35.860
来看一眼

33:35.860 --> 33:36.860
刷新界面

33:36.860 --> 33:37.860
重新来搞一下

33:37.860 --> 33:38.860
然后呢

33:38.860 --> 33:39.860
我们把这个

33:39.860 --> 33:40.860
给注掉此时

33:40.860 --> 33:41.860
第一页

33:41.860 --> 33:42.860
第二页再去加

33:42.860 --> 33:43.860
第三页

33:43.860 --> 33:44.860
当我加在完成之后

33:44.860 --> 33:45.860
这里面再加的时候

33:45.860 --> 33:46.860
你会发现

33:46.860 --> 33:47.860
我们这个数据

33:47.860 --> 33:48.860
应该是什么

33:48.860 --> 33:49.860
没有数据了

33:49.860 --> 33:50.860
不要说没有数据

33:50.860 --> 33:51.860
你看这里面

33:51.860 --> 33:52.860
这是不是没有指了

33:52.860 --> 33:53.860
对吧

33:53.860 --> 33:54.860
一直是空指

33:54.860 --> 33:55.860
但这个呢

33:55.860 --> 33:56.860
没有调整

33:56.860 --> 33:57.860
然后还有一个啥问题呢

33:57.860 --> 33:58.860
就是说你不应该

33:58.860 --> 33:59.860
再去发请求了

33:59.860 --> 34:00.860
对吧

34:00.860 --> 34:01.860
所以说在这个里面

34:01.860 --> 34:02.860
我们要做一个限制条件

34:02.860 --> 34:03.860
那也就是我们最后

34:03.860 --> 34:05.860
要实现的这么一块

34:05.860 --> 34:08.860
什么时候去处发这个

34:08.860 --> 34:09.860
因为处理时间

34:09.860 --> 34:10.860
肯定是每次都处发的

34:10.860 --> 34:11.860
但这个里面

34:11.860 --> 34:13.860
我们要有一个条件判断

34:13.860 --> 34:16.860
当达到某一个条件的时候

34:16.860 --> 34:18.860
那我直接就让你停止了

34:18.860 --> 34:19.860
就可以了

34:19.860 --> 34:20.860
也就是说这里面

34:20.860 --> 34:21.860
有一个return操作

34:21.860 --> 34:22.860
那这是啥条件呢

34:22.860 --> 34:23.860
我们这里面

34:23.860 --> 34:24.860
可以想一下

34:24.860 --> 34:25.860
你看我现在

34:25.860 --> 34:26.860
在这个里面

34:26.860 --> 34:27.860
咱们直接的

34:27.860 --> 34:29.860
把它先给注掉一下

34:29.860 --> 34:30.860
当我最后

34:30.860 --> 34:31.860
现在已经把所有数据

34:31.860 --> 34:33.860
都拿过来之后

34:33.860 --> 34:34.860
刷新一下

34:34.860 --> 34:35.860
然后没有数据的时候

34:35.860 --> 34:36.860
我们再来看一眼

34:36.860 --> 34:37.860
你看当我把

34:37.860 --> 34:39.860
这个所有数据都拿完成之后

34:39.860 --> 34:40.860
这个里面

34:40.860 --> 34:42.860
我们再看这个view里面的数据

34:42.860 --> 34:45.860
到我们的这个article list

34:45.860 --> 34:46.860
你瞅一眼这个

34:46.860 --> 34:47.860
当我这个loaded data里面

34:47.860 --> 34:48.860
是不是18条数据

34:48.860 --> 34:49.860
对吧

34:49.860 --> 34:50.860
然后它跟谁匹配了

34:50.860 --> 34:52.860
是不是和这个里面的数据匹配了

34:52.860 --> 34:53.860
也就是说

34:53.860 --> 34:55.860
它俩长度是不是完全一致了

34:55.860 --> 34:56.860
这是不是18条

34:56.860 --> 34:57.860
然后loaded data里面

34:57.860 --> 34:58.860
指定这一项

34:58.860 --> 34:59.860
是不是也18条

34:59.860 --> 35:00.860
如果说

35:00.860 --> 35:01.860
它既然都已经

35:01.860 --> 35:02.860
你拿到的数据

35:02.860 --> 35:03.860
和总数已经匹配了

35:03.860 --> 35:04.860
那我直接是不是可以

35:04.860 --> 35:05.860
给你return干掉了

35:05.860 --> 35:06.860
对不对

35:06.860 --> 35:07.860
这是第一点

35:07.860 --> 35:08.860
第二点就是什么呢

35:08.860 --> 35:09.860
我们调整一下

35:09.860 --> 35:11.860
这个loading的这个状态

35:11.860 --> 35:12.860
否则呢

35:12.860 --> 35:13.860
我们后面那个

35:13.860 --> 35:14.860
不是白写了吗

35:14.860 --> 35:15.860
对不对

35:15.860 --> 35:16.860
我们写的意义

35:16.860 --> 35:18.860
就是让它把这个值改变

35:18.860 --> 35:19.860
变成什么呢

35:19.860 --> 35:20.860
没有更多数据

35:20.860 --> 35:21.860
是不是就可以了

35:21.860 --> 35:22.860
所以说我们就来

35:22.860 --> 35:23.860
做一部分这个操作

35:23.860 --> 35:25.860
把这个eve条件打开之后

35:25.860 --> 35:27.860
那我们就可以在这个里面

35:27.860 --> 35:28.860
来写

35:28.860 --> 35:29.860
怎么写呢

35:29.860 --> 35:30.860
这里面首先判断

35:30.860 --> 35:31.860
它的长度

35:31.860 --> 35:32.860
如果说

35:32.860 --> 35:33.860
load的data

35:33.860 --> 35:34.860
下面指定的那一项

35:34.860 --> 35:35.860
哪一项

35:35.860 --> 35:39.860
this.active index.toto

35:39.860 --> 35:41.860
它要是等于等于什么呢

35:41.860 --> 35:43.860
我们this.article.data

35:43.860 --> 35:46.860
下面的this.active index

35:46.860 --> 35:47.860
一个什么呢

35:47.860 --> 35:48.860
deluxe

35:48.860 --> 35:50.860
如果说它俩长度相等的

35:50.860 --> 35:51.860
首先这时候

35:51.860 --> 35:52.860
return它不去请求数据了

35:52.860 --> 35:54.860
这是我们的第一步

35:54.860 --> 35:55.860
我们一次的来验证

35:55.860 --> 35:56.860
再刷新一下

35:56.860 --> 35:58.860
看它是否还进行

35:58.860 --> 35:59.860
数据请求

35:59.860 --> 36:00.860
走你

36:00.860 --> 36:01.860
OK 一个

36:01.860 --> 36:02.860
然后呢

36:02.860 --> 36:03.860
我们再去请求

36:03.860 --> 36:04.860
两页之后

36:04.860 --> 36:05.860
三页

36:05.860 --> 36:06.860
然后三页之后

36:06.860 --> 36:07.860
你会发现

36:07.860 --> 36:08.860
它一直不去请求数据了

36:08.860 --> 36:09.860
那这个里面

36:09.860 --> 36:10.860
最后一次数据请求

36:10.860 --> 36:11.860
它是能拿回数据的

36:11.860 --> 36:12.860
并且

36:12.860 --> 36:13.860
拿回数据之后

36:13.860 --> 36:14.860
它也会给它一个复制

36:14.860 --> 36:15.860
三页之后就OK了

36:15.860 --> 36:16.860
其实没有数据了

36:16.860 --> 36:17.860
对吧

36:17.860 --> 36:18.860
这个好理解

36:18.860 --> 36:19.860
然后你在这个里面

36:19.860 --> 36:20.860
要做点啥事呢

36:20.860 --> 36:21.860
其实你不光是return

36:21.860 --> 36:22.860
我这个里面

36:22.860 --> 36:23.860
现在是不是应该

36:23.860 --> 36:24.860
把这个正代加载

36:24.860 --> 36:25.860
要改变一下

36:25.860 --> 36:26.860
并且我把

36:26.860 --> 36:27.860
当前这个页说

36:27.860 --> 36:28.860
给做一个存储

36:28.860 --> 36:29.860
要一会儿

36:29.860 --> 36:30.860
你是不是转过来之后

36:30.860 --> 36:31.860
去请求数据

36:31.860 --> 36:32.860
这个就尴尬了

36:32.860 --> 36:33.860
对吧

36:33.860 --> 36:34.860
那我们就给这个

36:34.860 --> 36:35.860
Z4.loadDate

36:35.860 --> 36:37.860
重新进行一个复制

36:37.860 --> 36:38.860
是不是就可以了

36:38.860 --> 36:39.860
也就是说在这个里面

36:39.860 --> 36:41.860
Z4.loadDate

36:41.860 --> 36:43.860
然后下面的

36:43.860 --> 36:44.860
Z4.activeIndice

36:44.860 --> 36:45.860
这一项

36:45.860 --> 36:46.860
就是当前那一个对象

36:46.860 --> 36:49.860
让它重新进行一个复制

36:49.860 --> 36:50.860
那复制结果是什么呢

36:50.860 --> 36:51.860
就是原来的

36:51.860 --> 36:52.860
Z4.

36:52.860 --> 36:55.860
我们的一个loadDate

36:55.860 --> 36:58.860
下面的Z4.activeIndice

36:58.860 --> 36:59.860
做一个解构

36:59.860 --> 37:00.860
解构完了之后

37:00.860 --> 37:01.860
这是第一个解构

37:01.860 --> 37:02.860
第二个解构

37:02.860 --> 37:04.860
是变成一个新对象

37:04.860 --> 37:05.860
这个新对象里面

37:05.860 --> 37:07.860
我们把它的这个loading

37:07.860 --> 37:08.860
改一下

37:08.860 --> 37:09.860
这个叫什么

37:09.860 --> 37:10.860
叫NoMode

37:10.860 --> 37:11.860
说明没有更多数据了

37:11.860 --> 37:12.860
然后呢

37:12.860 --> 37:13.860
把这个配置

37:13.860 --> 37:14.860
给做一个存储

37:14.860 --> 37:15.860
配置呢

37:15.860 --> 37:17.860
就是我们Z4.loadDate

37:17.860 --> 37:18.860
下面的一个什么

37:18.860 --> 37:20.860
Z4.activeIndice配置

37:20.860 --> 37:22.860
把这个配置给加一下

37:22.860 --> 37:23.860
当然了

37:23.860 --> 37:24.860
我们这个配置

37:24.860 --> 37:25.860
不加也可以

37:25.860 --> 37:26.860
对不对

37:26.860 --> 37:27.860
因为我们直接

37:27.860 --> 37:28.860
只改变它一个什么

37:28.860 --> 37:30.860
改变它的这个

37:30.860 --> 37:32.860
里面的这个值啊

37:32.860 --> 37:34.860
这样我不加这个配置了

37:34.860 --> 37:35.860
我们直接改变

37:35.860 --> 37:36.860
它这个loading

37:36.860 --> 37:37.860
是不是就可以了

37:37.860 --> 37:38.860
从这里面

37:38.860 --> 37:39.860
我们给它做一个

37:39.860 --> 37:40.860
改变就ok了

37:40.860 --> 37:42.860
那咱们看一下行不行啊

37:43.860 --> 37:45.860
我们刷新一下界面之后

37:45.860 --> 37:46.860
咱们直到现在

37:46.860 --> 37:47.860
肯定是不去夹载的

37:47.860 --> 37:48.860
对吧

37:48.860 --> 37:49.860
不去夹载的

37:49.860 --> 37:50.860
我们就从这个

37:50.860 --> 37:51.860
ArticleList里面

37:51.860 --> 37:52.860
来进行查看

37:52.860 --> 37:53.860
到这个里面

37:53.860 --> 37:54.860
首先第一样

37:54.860 --> 37:55.860
ok

37:55.860 --> 37:56.860
现在变成二

37:56.860 --> 37:57.860
然后呢

37:57.860 --> 37:59.860
变成三变成三之后

37:59.860 --> 38:00.860
这里面

38:00.860 --> 38:01.860
现在啊

38:01.860 --> 38:02.860
它这个没改

38:02.860 --> 38:03.860
没改的原因市场啊

38:03.860 --> 38:04.860
其实你看啊

38:04.860 --> 38:06.860
它这个是不是和我们的这个

38:06.860 --> 38:08.860
之前说的这个问题

38:08.860 --> 38:09.860
是一样的

38:09.860 --> 38:11.860
我们改变对象里面的

38:11.860 --> 38:12.860
某一个

38:12.860 --> 38:14.860
指定的这个属性的时候

38:14.860 --> 38:15.860
此时呢

38:15.860 --> 38:16.860
不会影响重新的

38:16.860 --> 38:17.860
进行数据的一个

38:17.860 --> 38:18.860
宣传出发

38:18.860 --> 38:19.860
那我直接使用

38:19.860 --> 38:22.860
Z4.DollarFalseUpdate

38:22.860 --> 38:23.860
咱们直接

38:23.860 --> 38:25.860
学的这个view里面

38:25.860 --> 38:26.860
是不是有这个falsupdate

38:26.860 --> 38:27.860
我强制进行

38:27.860 --> 38:28.860
页面的更新

38:28.860 --> 38:29.860
咱们看一下

38:29.860 --> 38:30.860
这个结果是不是可以啊

38:30.860 --> 38:31.860
好的

38:31.860 --> 38:32.860
依次的往下走

38:32.860 --> 38:34.860
回到ArticleList里面

38:34.860 --> 38:35.860
咱们再注意

38:35.860 --> 38:37.860
看这个loaddata里面啊

38:37.860 --> 38:38.860
第二页

38:38.860 --> 38:39.860
第三页

38:39.860 --> 38:40.860
nomo

38:40.860 --> 38:41.860
现在没有更多数据了

38:41.860 --> 38:42.860
那此时页面

38:42.860 --> 38:43.860
是不是就更新了

38:43.860 --> 38:44.860
页面更新之后

38:44.860 --> 38:45.860
它会影响我们

38:45.860 --> 38:46.860
第二页渲染吗

38:46.860 --> 38:47.860
其实这个不会的

38:47.860 --> 38:48.860
我们看一下

38:48.860 --> 38:49.860
第二页

38:49.860 --> 38:50.860
第二页在这个里面呢

38:50.860 --> 38:51.860
是这个配置一

38:51.860 --> 38:52.860
偷偷

38:52.860 --> 38:53.860
对不对

38:53.860 --> 38:54.860
它也不会去

38:54.860 --> 38:55.860
再出发

38:55.860 --> 38:56.860
然后这里面也是什么

38:56.860 --> 38:58.860
没有更多数据了

38:58.860 --> 38:59.860
直接在这个里面展示出来了

38:59.860 --> 39:00.860
对吧

39:00.860 --> 39:01.860
然后我们再看第三条

39:01.860 --> 39:02.860
第三条呢

39:02.860 --> 39:03.860
是后段开发

39:03.860 --> 39:05.860
这里面也是没有更多数据

39:05.860 --> 39:06.860
然后这个里面

39:06.860 --> 39:07.860
哎

39:07.860 --> 39:08.860
这就不对了

39:08.860 --> 39:09.860
这个不对是啥原因呢

39:09.860 --> 39:10.860
其实啊

39:10.860 --> 39:11.860
刚才啊

39:11.860 --> 39:12.860
如果说我们这个

39:12.860 --> 39:13.860
站满整平的时候

39:13.860 --> 39:14.860
还好理解

39:14.860 --> 39:15.860
这里面没有数据了

39:15.860 --> 39:16.860
但是如果说

39:16.860 --> 39:17.860
你要是这种情况下

39:17.860 --> 39:18.860
正在加弹

39:18.860 --> 39:19.860
是不是没有意义

39:19.860 --> 39:20.860
显示出来对不对

39:20.860 --> 39:21.860
因为它本身就两条数据

39:21.860 --> 39:22.860
所以说

39:22.860 --> 39:23.860
那我们这里面

39:23.860 --> 39:24.860
要做一个什么

39:24.860 --> 39:25.860
判断

39:25.860 --> 39:26.860
并不是说

39:26.860 --> 39:27.860
每次你揉的帽

39:27.860 --> 39:29.860
都会进行一个显示

39:29.860 --> 39:30.860
那这时候

39:30.860 --> 39:31.860
我们什么时候

39:31.860 --> 39:33.860
来让它显示呢

39:33.860 --> 39:34.860
这个里面

39:34.860 --> 39:35.860
我们可以写一个条件啊

39:35.860 --> 39:36.860
vif

39:36.860 --> 39:37.860
ok

39:38.860 --> 39:39.860
vgif

39:39.860 --> 39:41.860
然后vif

39:41.860 --> 39:42.860
vgif

39:42.860 --> 39:43.860
等于干什么呢

39:43.860 --> 39:44.860
如果说

39:44.860 --> 39:45.860
我们的这个

39:45.860 --> 39:47.860
article list

39:47.860 --> 39:48.860
假如说

39:48.860 --> 39:49.860
它这个长度

39:49.860 --> 39:50.860
对不对

39:50.860 --> 39:51.860
首先呢

39:51.860 --> 39:52.860
它要是等于等于0

39:52.860 --> 39:53.860
或者是什么呢

39:53.860 --> 39:54.860
我们这里面

39:54.860 --> 39:55.860
再写一个条件

39:55.860 --> 39:56.860
就是article list

39:56.860 --> 39:58.860
点lans

39:58.860 --> 40:00.860
它要是大于1平

40:00.860 --> 40:01.860
那大于1平

40:01.860 --> 40:02.860
至于这个

40:02.860 --> 40:03.860
十几条

40:03.860 --> 40:04.860
你自己考虑啊

40:04.860 --> 40:05.860
比如说

40:05.860 --> 40:06.860
它都是小图展示的

40:06.860 --> 40:07.860
那可能会多一些对不对

40:07.860 --> 40:08.860
那假如说

40:08.860 --> 40:09.860
要是大于7的话

40:09.860 --> 40:10.860
我再让它

40:10.860 --> 40:11.860
进行一个展示

40:11.860 --> 40:13.860
是不是就ok了对吧

40:13.860 --> 40:14.860
那这样就能保证

40:14.860 --> 40:15.860
如果说

40:15.860 --> 40:16.860
它数据少的时候

40:16.860 --> 40:17.860
那它就别展示了

40:17.860 --> 40:18.860
是不是

40:18.860 --> 40:19.860
那我们来看一下

40:19.860 --> 40:20.860
效果是否可行啊

40:20.860 --> 40:22.860
咱们回到这个

40:22.860 --> 40:23.860
从第一页开始啊

40:23.860 --> 40:24.860
我去加载

40:24.860 --> 40:25.860
加载

40:25.860 --> 40:26.860
ok 再继续加载

40:26.860 --> 40:27.860
没有更多数据了对吧

40:27.860 --> 40:28.860
那我回到第二页

40:28.860 --> 40:29.860
第二页这个里面

40:29.860 --> 40:30.860
它就不展示的

40:30.860 --> 40:31.860
因为什么

40:31.860 --> 40:32.860
因为它本身

40:32.860 --> 40:33.860
它这个也没有数据

40:33.860 --> 40:34.860
并且呢

40:34.860 --> 40:35.860
我们是让它做什么

40:35.860 --> 40:36.860
做它这个

40:36.860 --> 40:38.860
就是大于我们的这个

40:38.860 --> 40:39.860
7的时候

40:39.860 --> 40:40.860
再做一个展示啊

40:40.860 --> 40:41.860
后端开发这一块

40:41.860 --> 40:42.860
是不是也没有更多数据

40:42.860 --> 40:43.860
你往上一滑

40:43.860 --> 40:44.860
其实是没有其他的了

40:44.860 --> 40:45.860
然后移动端开发

40:45.860 --> 40:46.860
ok 这个呢

40:46.860 --> 40:47.860
就是正常的了

40:47.860 --> 40:49.860
然后我们再切换其他的

40:49.860 --> 40:50.860
是不是可以啊对吧

40:50.860 --> 40:51.860
那这个呢

40:51.860 --> 40:53.860
我们上拉加载的

40:53.860 --> 40:55.860
一个完整的制作

40:55.860 --> 40:56.860
啊

40:56.860 --> 40:57.860
然后里面呢

40:57.860 --> 40:58.860
其实这个内容啊

40:58.860 --> 40:59.860
不少人

40:59.860 --> 41:01.860
包括我们云寒数的

41:01.860 --> 41:03.860
以及我们前台的

41:03.860 --> 41:04.860
一个优化操作

41:04.860 --> 41:06.860
这个里面主要

41:06.860 --> 41:07.860
核心是什么呢

41:07.860 --> 41:08.860
我们就是借助这个

41:08.860 --> 41:09.860
三方插件

41:09.860 --> 41:10.860
并且呢

41:10.860 --> 41:11.860
监听了一个

41:11.860 --> 41:12.860
四颗肉的一个

41:12.860 --> 41:13.860
四颗肉

41:13.860 --> 41:14.860
突拉弯的这么一个事件

41:14.860 --> 41:15.860
然后呢

41:15.860 --> 41:17.860
根据这两个条件

41:17.860 --> 41:18.860
我们进行一个什么

41:18.860 --> 41:20.860
继续加载数据的

41:20.860 --> 41:22.860
展示的这样一个过程啊

41:22.860 --> 41:23.860
好的

41:23.860 --> 41:24.860
那本节课就到这里

