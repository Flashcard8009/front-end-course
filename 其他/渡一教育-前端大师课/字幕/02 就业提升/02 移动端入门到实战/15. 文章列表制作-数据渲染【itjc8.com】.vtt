WEBVTT

00:00.880 --> 00:05.280
各位同学 大家好 这期课我们继续文章列表的一个制作

00:05.280 --> 00:09.480
那么本节课我们来实现一下文章列表里面数据的一个渲染

00:09.480 --> 00:14.080
如何来做 那么首先我们是要通过定义一个云寒树

00:14.080 --> 00:16.580
在这个云寒树里面我们操作数据库

00:16.580 --> 00:18.580
从数据库里面拿到数据

00:18.580 --> 00:21.480
然后我们将这个数据返回给前端

00:21.480 --> 00:25.580
前端拿到这个数据之后进行我们的一个渲染操作

00:25.580 --> 00:27.180
我们知道卡片有好多种

00:27.180 --> 00:31.480
然后我们依次根据它的这个分类进行不同的一个渲染

00:31.480 --> 00:36.280
最后我们再根据我们的选项卡的一个分类实现一个动态的

00:36.280 --> 00:39.680
根据我们分类进行一个数据渲染就OK了

00:39.680 --> 00:42.780
好的 那我们现在就开始来进行一个制作

00:42.780 --> 00:47.480
首先我们开始定义我们的云寒树在这个glow的function下面

00:47.480 --> 00:51.980
我们新建一个云寒树在这个里面

00:51.980 --> 00:55.480
新建云寒树这个名字叫由于它也是获取

00:55.480 --> 00:59.480
然后这里面叫getarticle list

00:59.480 --> 01:05.280
OK 创建完了之后这里面给它改一下名

01:05.280 --> 01:08.280
article list

01:08.280 --> 01:11.780
创建好之后这个是一个初始的模板

01:11.780 --> 01:13.280
初始模板我们怎么做呢

01:13.280 --> 01:15.780
首先我们要获取数据库的引用

01:15.780 --> 01:21.480
这个里面就是constdb等于unicload.database

01:21.480 --> 01:25.380
然后之后我们在这里面进行一个数据库的操作

01:25.380 --> 01:28.380
然后并且对这个数据进行一个获取

01:28.380 --> 01:30.180
怎么来获取其实非常简单

01:30.180 --> 01:36.880
我们直接的在这个里面const list等于waitdb.collection

01:36.880 --> 01:40.080
collection得连接一个我们的这个数据表

01:40.080 --> 01:41.180
那数据表是啥呢

01:41.180 --> 01:45.280
在这个里面我们可以看一下到我们的云数据库

01:45.280 --> 01:47.180
找到我们的这个article list

01:47.180 --> 01:49.680
其实这个article找到这个article

01:49.680 --> 01:51.480
article就是我们的这个数据表

01:51.480 --> 01:54.980
所以说在这个里面添一个什么article

01:54.980 --> 01:56.980
然后拿到这个集合之后呢

01:56.980 --> 02:00.980
找到它之后我通过盖的方法获取它的一个所有

02:00.980 --> 02:02.880
最后呢我返回给前端

02:02.880 --> 02:04.080
返回给前端是什么呢

02:04.080 --> 02:05.980
就是这个code0

02:05.980 --> 02:09.580
然后把这个list.data给它返回去

02:09.580 --> 02:11.980
那我直接的在这个里面list.data

02:11.980 --> 02:13.580
ok这个就搞定了

02:13.580 --> 02:15.380
搞定之后呢我们来做一下测试

02:15.380 --> 02:18.980
首先保证我们这个数据能正常的一个获取

02:18.980 --> 02:20.280
那在这个里面我们怎么办

02:20.280 --> 02:23.780
我直接的在这个里面本地运行云函数

02:23.780 --> 02:26.180
来查看一下它的这个运行结果

02:26.180 --> 02:29.680
ok啊这个里面是已经获取到这个结果了

02:29.680 --> 02:32.180
结果是18条我们打印一下

02:32.180 --> 02:35.780
这里面呢是我们所有的这个相关的这个数据

02:35.780 --> 02:40.380
然后呢我们就可以通过这个数据来进行一个渲染

02:40.380 --> 02:42.380
但是这里面现在有一个问题啊

02:42.380 --> 02:44.680
我格式化一下同学们就可以看到了

02:44.680 --> 02:47.780
其实我们现在渲染这个文章列表的时候

02:47.780 --> 02:49.180
它的这个文章内容啊

02:49.180 --> 02:50.780
其实是没有必要渲染的

02:50.780 --> 02:52.180
这内容什么时候渲染呢

02:52.180 --> 02:54.180
是在这个详情界面的时候

02:54.180 --> 02:55.880
我们才渲染就ok了

02:55.880 --> 02:57.180
所以说在这个里面呢

02:57.180 --> 02:59.880
我们单纯的这样操作数据过不行

02:59.880 --> 03:00.380
怎么办呢

03:00.380 --> 03:06.480
这里面就涉及到一个我们UniClo的里面的一个聚合操作

03:06.480 --> 03:07.680
什么叫聚合操作呢

03:07.680 --> 03:09.680
其实我们可以简单理解为啊

03:09.680 --> 03:12.780
就是一些相对复杂的一个查询

03:12.780 --> 03:14.680
所以说在这个list的获取的时候

03:14.680 --> 03:17.680
我们不能直接用这种概态的形式

03:17.680 --> 03:18.380
那我们这里面啊

03:18.380 --> 03:20.380
直接就写聚合操作

03:20.380 --> 03:21.980
聚合操作这里面

03:21.980 --> 03:23.680
Agrate这个是什么

03:23.680 --> 03:24.580
它这个里面啊

03:24.580 --> 03:27.380
获取数据库集合的一个聚合操作实力

03:27.380 --> 03:29.180
这里面有这个相关的一篇

03:29.180 --> 03:29.680
同学们呢

03:29.680 --> 03:30.980
可以查看一下

03:30.980 --> 03:33.380
首先如果说我使用了Agrate的方法

03:33.380 --> 03:34.880
就开启了它的聚合

03:34.880 --> 03:35.380
之后呢

03:35.380 --> 03:36.580
我在这个里面啊

03:36.580 --> 03:38.880
使用这个project方法

03:38.880 --> 03:40.180
那这个project的方法呢

03:40.180 --> 03:44.380
其实就可以对我们的这个相关的内容进行过滤

03:44.380 --> 03:47.380
这个有点像我们的这个mango数据库啊

03:47.380 --> 03:48.180
这时候呢

03:48.180 --> 03:50.580
我这个content不想让它返回

03:50.580 --> 03:51.280
那我怎么写

03:51.280 --> 03:53.280
我直接的这个里面content

03:53.280 --> 03:54.580
我就给它一个什么

03:54.580 --> 03:55.180
0

03:55.180 --> 03:57.180
是不是很像我们的这个mango

03:57.180 --> 03:57.780
对不对

03:57.780 --> 04:00.580
我们mango其实是不是也这样操作啊

04:00.580 --> 04:02.380
然后你这样操作完了之后

04:02.380 --> 04:03.180
这个里面呢

04:03.180 --> 04:04.680
当你所有的这个

04:04.680 --> 04:06.980
一些我们相应的处理结束之后呢

04:06.980 --> 04:08.480
我这里面写一个案的

04:08.480 --> 04:08.780
ok

04:09.780 --> 04:10.980
那这个代表什么意思呢

04:10.980 --> 04:11.480
这个啊

04:11.480 --> 04:13.580
代表着我们整个操作的一个结束

04:13.580 --> 04:14.080
最后呢

04:14.080 --> 04:16.180
你就开始正常的给我一个输出

04:16.180 --> 04:17.180
就ok了

04:17.180 --> 04:17.380
好的

04:17.380 --> 04:18.280
我们写完之后呢

04:18.280 --> 04:19.280
作为一个保存

04:19.280 --> 04:20.580
先来看一下结果

04:20.580 --> 04:23.080
我们还是本地运行运汉数

04:23.080 --> 04:23.980
运行完成之后

04:23.980 --> 04:25.780
你会发现还18个结果

04:25.780 --> 04:26.780
那这18个结果

04:26.780 --> 04:29.580
相比我们刚才这个运行的时候

04:29.580 --> 04:30.280
少了很多

04:30.280 --> 04:32.380
我们来格式化看一下

04:32.380 --> 04:33.380
此时你会发现

04:33.380 --> 04:35.380
我们的这个content是不是就没有了

04:35.380 --> 04:37.280
那这时候没有content之后

04:37.280 --> 04:39.980
我们是不是就可以给前端传递过去了

04:39.980 --> 04:40.480
对不对

04:40.480 --> 04:41.080
那这时候呢

04:41.080 --> 04:41.980
我们前端啊

04:41.980 --> 04:42.780
其实呢

04:42.780 --> 04:45.880
就可以进行数据的一个获取了

04:45.880 --> 04:46.680
当然我这个里面

04:46.680 --> 04:48.080
还可以给他一个什么呢

04:48.080 --> 04:49.080
给他一个信息啊

04:49.080 --> 04:52.080
这里面叫数据获取成功

04:53.380 --> 04:53.780
ok

04:53.780 --> 04:54.780
给定成功之后

04:54.780 --> 04:56.280
那我们现在就开始

04:56.280 --> 04:59.080
对前端进行一个相关操作

04:59.080 --> 05:00.780
那进行前端操作之前呢

05:00.780 --> 05:01.280
这个里面

05:01.280 --> 05:02.080
还有一个问题

05:02.080 --> 05:02.980
就是什么呢

05:02.980 --> 05:03.980
我们这个里面啊

05:03.980 --> 05:05.780
刚才是在本地做的测试

05:05.780 --> 05:06.380
那现在呢

05:06.380 --> 05:09.980
我们要将这个运汉数进行一个上传部署

05:09.980 --> 05:10.380
这个呢

05:10.380 --> 05:11.780
同学们不要忘了啊

05:11.780 --> 05:13.580
当他上传部署成功之后

05:13.580 --> 05:15.880
那我们直接的就可以通过前端啊

05:15.980 --> 05:17.280
进行一个调用了

05:17.280 --> 05:18.480
那就ok了

05:18.480 --> 05:19.180
怎么来做

05:19.180 --> 05:21.280
首先我们前端要调用

05:21.280 --> 05:23.180
那这里面我们就要想一下

05:23.180 --> 05:24.780
在哪个组件

05:24.780 --> 05:27.080
或者是页面里面来进行使用

05:27.080 --> 05:28.380
其实你会发现啊

05:28.380 --> 05:30.680
我们这个整个的这个列表

05:30.680 --> 05:31.980
是不是在list的里面

05:31.980 --> 05:32.680
所以说呢

05:32.680 --> 05:33.580
我们这个啊

05:33.580 --> 05:37.980
可以通过components下面的这个list

05:37.980 --> 05:39.380
也就是说article list的

05:39.380 --> 05:42.580
我们可以进行一个数据的获取操作

05:42.580 --> 05:45.180
那如何来实现这个article list的里面

05:45.280 --> 05:46.380
数据获取操作呢

05:46.380 --> 05:47.780
这个时候我们想啊

05:47.780 --> 05:50.180
向他的这个文章列表触实化就要宣展

05:50.180 --> 05:51.080
所以说怎么办

05:51.080 --> 05:51.780
越早越好

05:51.780 --> 05:52.480
那这个时候呢

05:52.480 --> 05:54.880
我们就可以使用他的一个生命周期

05:54.880 --> 05:55.980
但是在组件里啊

05:55.980 --> 05:58.580
他不能使用这种onload的生命周期

05:58.580 --> 05:59.580
他只能使用什么呢

05:59.580 --> 06:00.780
和我们的这个vivo很像

06:00.780 --> 06:02.580
我们在creatate里面

06:02.580 --> 06:04.880
来做这件事就可以了

06:04.880 --> 06:06.080
然后我在这里面写一下

06:06.080 --> 06:06.780
这一次点

06:06.780 --> 06:09.880
下号线getarticlelist

06:11.080 --> 06:11.380
ok

06:11.380 --> 06:13.180
我定义这样一个方法啊

06:13.180 --> 06:13.880
这个方法呢

06:13.880 --> 06:15.080
是专门的

06:15.080 --> 06:17.380
我们用来做数据的请求

06:17.380 --> 06:18.880
在这里给大家写一下

06:18.880 --> 06:20.280
那这个是get

06:20.280 --> 06:25.380
嗯进行数据的一个请求获取啊

06:25.380 --> 06:25.880
ok

06:26.380 --> 06:27.580
嗯来实现一下啊

06:27.580 --> 06:29.380
这里面使用async

06:29.380 --> 06:30.480
因为它是

06:30.480 --> 06:32.180
肯定反回一个promise对象

06:32.180 --> 06:34.080
那我这里面就写一个async

06:34.080 --> 06:36.180
async一个关键字

06:36.180 --> 06:39.780
写后面跟一个getarticle list

06:39.780 --> 06:40.480
在这个里面呢

06:40.480 --> 06:41.580
我就打印个值

06:41.580 --> 06:44.580
couns的res等于wait

06:44.580 --> 06:45.680
那这里面怎么调用

06:45.680 --> 06:48.580
这一次点到那咱们有一个http

06:48.580 --> 06:51.080
然后我这里面就可以来进行调用

06:51.080 --> 06:53.180
但是atp方法是外面扩展的

06:53.180 --> 06:53.580
不要紧

06:53.580 --> 06:54.580
我们先写完了

06:54.580 --> 06:55.080
之后呢

06:55.080 --> 06:56.180
再进行一个扩展

06:56.180 --> 06:57.180
也是ok的

06:57.180 --> 06:58.380
我这里面atp

06:58.380 --> 07:03.380
给他扩展一个什么getarticle list

07:03.380 --> 07:04.580
这么一个方法

07:04.580 --> 07:05.480
然后这个方法里

07:05.480 --> 07:07.580
我们暂时先不需要传旨啊

07:07.580 --> 07:09.480
直接的就把这个方法给定义完成

07:09.480 --> 07:10.280
就ok了

07:10.280 --> 07:10.680
最后呢

07:10.680 --> 07:11.980
如果说调上成功之后

07:11.980 --> 07:14.480
我们打印一下它的这个反回值

07:14.480 --> 07:16.280
那这时候我们就回到

07:16.280 --> 07:18.280
阿甲克斯的interface

07:18.280 --> 07:20.280
这里面有一个home interface

07:20.280 --> 07:21.680
我继续写啊

07:21.680 --> 07:22.080
然后呢

07:22.080 --> 07:22.780
这个是什么呢

07:22.780 --> 07:26.280
就是获取文章列表

07:26.280 --> 07:27.380
在这个里面写下

07:27.380 --> 07:33.280
expot constgetarticle list的等于data

07:33.280 --> 07:33.880
然后呢

07:33.880 --> 07:35.980
调用我们封装好的这个

07:35.980 --> 07:37.780
阿甲克斯方法

07:37.780 --> 07:40.080
之后里面给他进行一个

07:40.080 --> 07:41.080
内幕的指定

07:41.080 --> 07:41.580
内幕呢

07:41.580 --> 07:43.580
其实和我们的这个接口的名字

07:43.580 --> 07:44.780
是完全一致的

07:44.780 --> 07:45.180
然后呢

07:45.180 --> 07:45.780
后面啊

07:45.780 --> 07:47.280
如果说你传参数的话

07:47.280 --> 07:49.180
这里面有一个data

07:49.180 --> 07:50.080
我们再来看一下

07:50.080 --> 07:52.280
这个atp这个方法里面啊

07:52.280 --> 07:52.680
其实呢

07:52.680 --> 07:54.480
我们之前封装的时候啊

07:54.480 --> 07:55.680
我们这里面有这个name

07:55.680 --> 07:56.380
有四个size

07:56.380 --> 07:56.880
但是呢

07:56.880 --> 07:58.680
我们对这个data没做处理

07:58.680 --> 07:59.180
现在呢

07:59.180 --> 08:00.380
我们要添加一下

08:00.380 --> 08:01.880
为什么要这样做

08:01.880 --> 08:02.580
因为呢

08:02.580 --> 08:03.680
我们接下来啊

08:03.680 --> 08:06.280
在这个请求文章列表的时候

08:06.280 --> 08:08.680
会涉及到一个分页的制作

08:08.680 --> 08:09.180
包括呢

08:09.180 --> 08:11.180
我们文章的一个分类获取

08:11.180 --> 08:12.180
那这里面呢

08:12.180 --> 08:14.080
都需要给后端传题数据

08:14.080 --> 08:14.880
所以说呢

08:14.880 --> 08:17.080
我在这里面指定一个date

08:17.080 --> 08:17.380
ok

08:18.480 --> 08:19.280
写好之后呢

08:19.280 --> 08:20.180
那此时呢

08:20.180 --> 08:22.880
如果说前台发起调用的话

08:22.880 --> 08:24.880
他就会触发我们的这个云寒数

08:24.880 --> 08:25.580
云寒数呢

08:25.580 --> 08:27.480
去数据库里面给我们查询

08:27.480 --> 08:28.280
查询到之后

08:28.280 --> 08:30.480
给我们进行数据的一个返回

08:30.480 --> 08:32.380
我们来看一下是否可行啊

08:32.380 --> 08:32.880
在这个里面

08:32.880 --> 08:33.580
你会发现啊

08:33.580 --> 08:34.380
十八条数据

08:34.380 --> 08:35.480
是不是都已经过来了

08:35.480 --> 08:36.080
对不对

08:36.080 --> 08:37.580
那我们现在就可以做什么

08:37.580 --> 08:38.080
第一波

08:38.080 --> 08:40.680
我们就可以进行一个主动的渲染了

08:40.680 --> 08:41.780
怎么来渲染呢

08:41.780 --> 08:44.580
我们依次的向后来进行传递

08:44.580 --> 08:45.480
首先来说啊

08:45.480 --> 08:47.680
就是在我们这个article里面

08:47.680 --> 08:49.280
这个list item

08:49.280 --> 08:52.580
其实我们是没有给他进行这个值的传递的

08:52.580 --> 08:53.280
对不对

08:53.280 --> 08:54.180
那此时呢

08:54.180 --> 08:56.080
如果说我们已经获取到了数据

08:56.080 --> 08:58.380
那我这里面就可以给他每一个传递

08:58.380 --> 09:00.380
一个什么article list

09:00.380 --> 09:00.780
ok

09:01.780 --> 09:03.280
这个是一个动态值

09:03.280 --> 09:05.580
所以说这里面加一个帽号

09:05.580 --> 09:07.580
这就是article list的

09:07.580 --> 09:09.280
那article list的给他一个什么呢

09:09.280 --> 09:11.180
给他一个article list的

09:11.180 --> 09:14.380
但是我们没有定义这个article list的

09:14.380 --> 09:14.980
咋办呢

09:14.980 --> 09:16.980
我在这里面就定义一下

09:16.980 --> 09:17.980
article list的

09:17.980 --> 09:18.480
哎呀

09:18.480 --> 09:20.780
等于我们的这个帽号

09:20.780 --> 09:22.680
把它给加一个引号

09:22.680 --> 09:23.180
然后呢

09:23.180 --> 09:25.680
我把这个值在我们的data里面

09:25.680 --> 09:26.880
可以做一个定义

09:26.880 --> 09:27.880
那处置化的时候

09:27.880 --> 09:29.480
给他一个空的数组

09:29.480 --> 09:29.780
之后

09:29.780 --> 09:31.380
如果说我获取到数据之后

09:31.380 --> 09:33.080
那我在这里面做一件事

09:33.080 --> 09:34.880
这次点article list的

09:34.880 --> 09:37.180
等于我们的一个返回值

09:37.180 --> 09:38.180
返回值这一块

09:38.180 --> 09:39.880
因为他我们已经知道

09:39.880 --> 09:41.380
是一个数组列表

09:41.380 --> 09:42.380
那我们直接的

09:42.380 --> 09:44.180
也给他辨量名改一下

09:45.280 --> 09:46.080
改好了之后

09:46.080 --> 09:46.680
此时呢

09:46.680 --> 09:48.380
我们将这个article list的

09:48.380 --> 09:50.280
就已经传递到我们的

09:50.280 --> 09:52.580
这个list的item下面了

09:52.580 --> 09:54.780
那我们到这个list的item下面

09:54.780 --> 09:55.380
现在呢

09:55.380 --> 09:57.580
就可以进行一个接收了

09:57.580 --> 09:58.280
probs

09:58.280 --> 10:01.080
我们这里面写一个什么article list的

10:02.680 --> 10:03.280
也就是说

10:03.280 --> 10:05.480
把刚才我们需要传递的这个值

10:05.480 --> 10:06.380
给他传过来

10:06.380 --> 10:07.580
那他是一个什么类型

10:08.380 --> 10:10.080
也就是说他是一个数组

10:10.080 --> 10:12.280
之前我们循环渲染的是

10:12.280 --> 10:13.680
这个item list的

10:13.680 --> 10:14.380
那现在呢

10:14.380 --> 10:14.780
这个呢

10:14.780 --> 10:16.480
就可以say goodbye了

10:16.480 --> 10:18.780
我们直接的把这个article list的

10:18.780 --> 10:20.780
放在我们的这个

10:20.780 --> 10:23.180
将要循环的这个卡片里面啊

10:23.180 --> 10:24.080
那此时

10:24.080 --> 10:26.080
其实我们现在还可以改一步操作啊

10:26.080 --> 10:27.280
是哪一个操作呢

10:27.280 --> 10:28.780
我们这个list

10:28.780 --> 10:31.080
这个卡的里面的这个key啊

10:31.080 --> 10:32.480
是使用的index

10:32.480 --> 10:33.480
这个index呢

10:33.480 --> 10:34.680
如果说我一次渲染

10:34.680 --> 10:35.880
ok没有问题啊

10:35.880 --> 10:36.380
但是呢

10:36.380 --> 10:37.980
如果说我多次渲染的时候

10:37.980 --> 10:38.780
这个index

10:39.480 --> 10:40.380
会发生混乱

10:40.380 --> 10:40.780
怎么办呢

10:40.780 --> 10:42.180
我这里面就不用他了

10:42.180 --> 10:45.880
因为我们每个里面都有这种id啊

10:45.880 --> 10:47.380
也就是说每一条记录值

10:47.380 --> 10:48.780
都有它的一个指定id

10:48.780 --> 10:50.880
那我这里面就使用item.id

10:50.880 --> 10:54.180
来给他指定一个k就ok了

10:54.180 --> 10:55.680
那这样我们定义完成之后

10:55.680 --> 10:57.280
你会发现有抱错了

10:57.280 --> 10:57.880
对吧

10:57.880 --> 10:58.280
抱错呢

10:58.280 --> 10:59.280
我们给调整一下

10:59.280 --> 10:59.980
是因为什么呢

10:59.980 --> 11:01.480
少写了一个豆号啊

11:01.480 --> 11:02.780
再来看一眼啊

11:02.780 --> 11:03.180
好的

11:03.180 --> 11:03.780
此时呢

11:03.780 --> 11:04.680
应该是可以了

11:04.680 --> 11:05.180
对吧

11:05.180 --> 11:05.780
那可以了

11:05.780 --> 11:06.980
之后我们来看一眼啊

11:06.980 --> 11:08.980
这个时候你会发现啊

11:08.980 --> 11:10.180
数据好像是多了

11:10.180 --> 11:10.580
对吧

11:10.580 --> 11:11.580
那怎么来查看

11:11.580 --> 11:13.580
我们是否正常的获取到了

11:13.580 --> 11:16.480
我们在这个里面使用dv2s

11:16.480 --> 11:18.480
我们找到这个article list

11:18.480 --> 11:20.580
此时你看到这个article list的

11:20.580 --> 11:22.380
获取到18条数据

11:22.380 --> 11:22.980
对不对

11:22.980 --> 11:23.880
并且呢

11:23.880 --> 11:26.080
我们在这个listitem里面

11:26.080 --> 11:28.580
通过profs也可以获取到这数据

11:28.580 --> 11:29.880
那继续操作

11:29.880 --> 11:30.380
怎么办

11:30.380 --> 11:32.080
我们给这个list card

11:32.080 --> 11:33.080
进行一个传递

11:33.080 --> 11:34.280
是不是就ok了

11:34.280 --> 11:36.380
那我传递其实这个artem

11:36.380 --> 11:38.380
是不是我们需要传递的这个质啊

11:38.380 --> 11:39.880
那我在这个里面使用

11:39.880 --> 11:40.680
是不是就可以了

11:40.680 --> 11:41.380
所以说呢

11:41.380 --> 11:44.980
那我接下来直接的操作就可以了啊

11:44.980 --> 11:45.980
如何来操作呢

11:45.980 --> 11:46.580
这时候呢

11:46.580 --> 11:49.780
我就回到我们的那个list card里面

11:49.780 --> 11:52.880
继续的进行一个数据的渲染就可以了

11:52.880 --> 11:54.380
此时我这个artem

11:54.380 --> 11:56.780
当时因为咱们做模拟数据的时候

11:56.780 --> 11:57.280
这个呢

11:57.280 --> 11:58.780
已经定义好了

11:58.780 --> 11:59.180
它呢

11:59.180 --> 12:00.780
就是一个object的例行

12:00.780 --> 12:01.780
所以说我们拿来

12:01.780 --> 12:04.480
直接的就可以使用了就可以啊

12:04.480 --> 12:05.080
那这时候呢

12:05.080 --> 12:06.380
我们依次再来渲染啊

12:06.380 --> 12:08.880
首先是这个基础卡片

12:08.880 --> 12:09.980
那基础卡片呢

12:09.980 --> 12:12.780
这个image肯定是一个动态的啊

12:12.780 --> 12:13.380
动态的

12:13.380 --> 12:14.780
我们怎么来使用呢

12:14.780 --> 12:15.880
这个值就不要了

12:15.880 --> 12:16.780
我们要什么呢

12:16.780 --> 12:18.480
我们直接的在这个里面

12:18.480 --> 12:19.880
给它的这个

12:19.880 --> 12:21.180
一个获取到的数据

12:21.180 --> 12:23.380
给它渲染进去就可以了

12:23.380 --> 12:24.580
那这个数据是个啥呢

12:24.580 --> 12:26.380
我们在这里面丑一眼啊

12:26.380 --> 12:27.380
它有一个什么呢

12:27.380 --> 12:30.980
我们找到这个mod等于一个被子的数据啊

12:30.980 --> 12:31.480
有的呢

12:31.480 --> 12:32.880
它这个是不正常的

12:32.880 --> 12:35.780
mod等于被子的这里面有一个cover

12:35.780 --> 12:36.280
cover呢

12:36.280 --> 12:39.580
我们将这个值给它进行一个渲染啊

12:39.580 --> 12:40.380
这里面是个数组

12:40.380 --> 12:41.780
同学们要注意一下啊

12:41.780 --> 12:43.080
我在这个里面写一下

12:43.080 --> 12:43.480
就是什么

12:43.480 --> 12:46.180
就是我们获取到的这个cover

12:46.180 --> 12:46.680
然后呢

12:46.680 --> 12:48.680
它下面的地零下给它放进去

12:48.680 --> 12:49.780
是不是就可以了

12:49.780 --> 12:51.880
那再回到我们的这个界面上

12:51.880 --> 12:52.580
你会发现啊

12:52.580 --> 12:54.080
此时我们这个和平天银

12:54.080 --> 12:54.980
是不是渲染进去了

12:54.980 --> 12:55.580
对不对

12:55.580 --> 12:56.080
然后啊

12:56.080 --> 12:56.980
咱们再往里瞅

12:56.980 --> 12:57.980
你会发现

12:57.980 --> 12:58.780
有的时候呢

12:58.780 --> 12:59.680
它这个没有数据

12:59.680 --> 13:00.880
没有数据是因为啥

13:00.880 --> 13:01.880
我们点一下

13:01.880 --> 13:03.080
查看一眼

13:03.080 --> 13:03.880
查看一眼

13:03.880 --> 13:05.180
到这个list

13:05.180 --> 13:05.980
指定的list

13:05.980 --> 13:06.780
cut里面啊

13:06.780 --> 13:08.080
来进行查看

13:08.080 --> 13:10.860
刷新一下

13:10.860 --> 13:12.160
好的刷新之后

13:12.160 --> 13:13.260
我们向下

13:13.260 --> 13:15.760
向下找到我们的这个

13:15.760 --> 13:17.260
公共博物院这一条啊

13:17.260 --> 13:17.960
哎

13:17.960 --> 13:19.960
它这个还动不了啊

13:19.960 --> 13:20.460
那怎么办

13:20.460 --> 13:21.860
我们直接在这个里面

13:21.860 --> 13:22.260
list

13:22.260 --> 13:25.060
cut打开它的这个获取到的item

13:25.060 --> 13:27.060
你会发现这个cover是空的

13:27.060 --> 13:27.860
那这个时候呢

13:27.860 --> 13:29.060
其实有时候啊

13:29.060 --> 13:30.160
服务器给我们返回啊

13:30.160 --> 13:30.760
没有图片

13:30.760 --> 13:31.860
没有图片打扮的

13:31.860 --> 13:33.360
那这个里面我们就要做一个判断

13:33.360 --> 13:34.160
啥判断呢

13:34.160 --> 13:36.160
如果说你这个纸有的话

13:36.160 --> 13:37.260
那我使用你这个纸

13:37.260 --> 13:38.660
假如说你这个纸没有

13:38.660 --> 13:40.460
我就使用我本地的一张图片

13:40.460 --> 13:41.460
就ok了

13:41.460 --> 13:43.260
所以说我要判断一下

13:43.260 --> 13:44.760
itemcover下面的零

13:44.760 --> 13:45.760
有没有这个纸

13:45.760 --> 13:46.360
如果说有

13:46.360 --> 13:47.460
我使用它否则

13:47.460 --> 13:49.360
那那我使用我自己的图片

13:49.360 --> 13:50.860
我们自己也有这个图片啊

13:50.860 --> 13:52.860
slydake下面会有一个

13:52.860 --> 13:53.660
什么图片呢

13:53.660 --> 13:54.660
我们这里面找到

13:54.660 --> 13:56.660
slydake下面有一个mg

13:56.660 --> 13:59.760
mg下面有一个logo.gopeg

13:59.760 --> 14:01.460
是不是我们都要与这个logo

14:01.460 --> 14:01.960
对不对

14:01.960 --> 14:03.160
那我就可以使用它

14:03.160 --> 14:08.660
mg下面的我们的这个logo.gopeg

14:08.660 --> 14:10.260
ok使用它之后

14:10.260 --> 14:11.260
那我们来看一眼啊

14:11.260 --> 14:11.760
此时呢

14:11.760 --> 14:12.660
你会发现

14:12.660 --> 14:15.060
如果说你这个cover下面的零

14:15.060 --> 14:16.860
也就是说它是一个空数组

14:16.860 --> 14:18.560
代表着我们没有图片资源

14:18.560 --> 14:19.960
那我这时候就使用本地的

14:19.960 --> 14:20.560
就可以了

14:20.560 --> 14:21.160
对不对

14:21.160 --> 14:21.460
这个呢

14:21.460 --> 14:22.860
就是我们的一个操作

14:22.860 --> 14:23.660
继续渲染啊

14:23.660 --> 14:24.560
渲染的时候

14:24.560 --> 14:25.860
这时候渲染什么

14:25.860 --> 14:27.860
就渲染我们的这个title

14:27.860 --> 14:28.560
也就是说

14:28.560 --> 14:31.060
把这个标题给进行一下处理

14:31.560 --> 14:32.360
怎么来处理

14:32.360 --> 14:34.060
我们回到这个里面

14:34.060 --> 14:36.160
故宫博物院这块就可以

14:36.160 --> 14:37.360
say goodbye了

14:37.360 --> 14:39.860
这里面使用item.tile

14:39.860 --> 14:40.960
ok可以了

14:40.960 --> 14:41.760
然后这个呢

14:41.760 --> 14:43.560
有一个精彩直播

14:43.560 --> 14:45.560
那我们精彩直播是个啥东西

14:45.560 --> 14:46.360
我们看一下

14:46.360 --> 14:47.860
这里面应该有一个什么

14:47.860 --> 14:48.560
casi-fi

14:48.560 --> 14:49.160
对不对

14:49.160 --> 14:50.260
有一个分类

14:50.260 --> 14:54.560
那这里面就是item.casi-fi

14:54.560 --> 14:55.260
好了

14:55.260 --> 14:56.260
完成之后呢

14:56.260 --> 14:57.160
最后一个

14:57.160 --> 14:58.560
就是我们的这个人数

14:58.560 --> 14:59.060
这一个

14:59.060 --> 15:00.660
也就是说有多少访问量

15:00.660 --> 15:01.560
访问量这一块

15:01.560 --> 15:02.260
我们看什么

15:02.260 --> 15:05.560
这里面有一个browards count

15:05.560 --> 15:06.360
那我们直接的

15:06.360 --> 15:07.860
就使用这个就可以了

15:07.860 --> 15:09.360
也就是说浏览的次数

15:09.360 --> 15:09.960
对不对

15:09.960 --> 15:11.660
那我们给他写一下

15:11.660 --> 15:13.560
这个叫什么browards count

15:13.560 --> 15:14.860
给他复制一下

15:14.860 --> 15:15.160
好的

15:15.160 --> 15:16.360
到我们这个里面

15:16.360 --> 15:17.560
回到这个里面

15:17.560 --> 15:18.360
293

15:18.360 --> 15:19.160
肯定不对了

15:19.160 --> 15:19.560
对不对

15:19.560 --> 15:21.460
因为我们访问的人比较多

15:21.460 --> 15:22.160
那在这个里面

15:22.160 --> 15:24.760
就是item.browards count

15:24.760 --> 15:25.260
好的

15:25.260 --> 15:27.260
我们经过这个操作之后

15:27.260 --> 15:29.260
那现在我们这个里面

15:29.260 --> 15:30.460
应该是搞定了

15:30.460 --> 15:31.660
也就是说基础图

15:31.660 --> 15:32.760
基础图搞定之后

15:32.760 --> 15:34.160
我们再处理一下多图

15:34.160 --> 15:37.660
和这个大图的一个处理啊

15:37.660 --> 15:39.360
那来到多图模式之后

15:39.360 --> 15:40.060
这个里面呢

15:40.060 --> 15:41.360
首先第一个问题啊

15:41.360 --> 15:44.160
我们把这个Title给处理一下

15:44.160 --> 15:45.960
Title处理就是他

15:45.960 --> 15:48.860
我们给他干掉

15:48.860 --> 15:51.260
换成我们的item.title

15:51.260 --> 15:52.360
好的

15:52.360 --> 15:53.660
第二个是要处理啥呢

15:53.660 --> 15:55.460
第二个就是要处理

15:55.460 --> 15:57.860
我们的这个循环的这个图片啊

15:57.860 --> 15:59.460
那这个循环这个图片

15:59.460 --> 16:00.360
是个啥东西啊

16:00.360 --> 16:00.860
其实呢

16:00.860 --> 16:03.360
我们要找到第一个多图的一块

16:03.360 --> 16:05.160
你看他也是这个cover对不对

16:05.160 --> 16:06.260
但是这个cover呢

16:06.260 --> 16:08.560
和我们刚才这个cover有点区别

16:08.560 --> 16:09.360
他不光

16:09.360 --> 16:10.360
他不光是有图

16:10.360 --> 16:10.760
而且呢

16:10.760 --> 16:12.060
这个图还挺多

16:12.060 --> 16:13.160
但我们只需要几张

16:13.160 --> 16:14.060
三张是不是

16:14.060 --> 16:14.460
所以说

16:14.460 --> 16:16.460
我在这个里面循环线的时候

16:16.460 --> 16:17.560
我这个就不使用三了

16:17.560 --> 16:19.460
我使用什么item.cover

16:19.460 --> 16:19.860
然后呢

16:19.860 --> 16:21.860
我做一个什么截取啊

16:21.860 --> 16:23.660
那截取三张是不是就可以了

16:23.660 --> 16:25.260
那也就是说slides

16:25.260 --> 16:28.360
我们从零开始截取啊

16:28.360 --> 16:29.860
从零截取截取几张

16:29.860 --> 16:31.560
截取三张是不是就可以了

16:31.560 --> 16:32.060
之后呢

16:32.060 --> 16:34.960
我把每一个图片给进行一个渲染

16:34.960 --> 16:35.760
就可以了

16:35.760 --> 16:37.360
然后把这个给他改一遍啊

16:38.660 --> 16:39.760
这个叫mg

16:39.760 --> 16:40.360
之后呢

16:40.360 --> 16:43.460
把这个src这个属性给他干掉

16:43.460 --> 16:44.360
干掉之后

16:44.360 --> 16:47.760
我们在这个里面使用一个动态属性

16:47.760 --> 16:49.560
就把这个mg给他放上去

16:49.560 --> 16:50.160
是不是可以

16:51.560 --> 16:51.760
好的

16:51.760 --> 16:52.560
我们来看一眼啊

16:52.560 --> 16:53.460
他是否可行

16:54.860 --> 16:56.260
刷新一下界面

16:56.260 --> 16:58.160
应该是会对这个图片啊

16:58.160 --> 16:59.160
有一个更改

16:59.160 --> 17:01.260
刚来这个图片有时候夹带是比较慢的

17:01.260 --> 17:02.660
我们这个可以等一下

17:02.660 --> 17:03.460
123

17:03.460 --> 17:03.860
ok

17:03.860 --> 17:04.760
是不是搞定了

17:04.760 --> 17:05.560
搞定之后

17:06.560 --> 17:09.460
一次的再把他的这个分类给做一下处理

17:10.860 --> 17:13.460
那就是item.cf

17:14.460 --> 17:15.460
定义完成之后

17:15.460 --> 17:18.460
同样的是我们的这个浏览人数

17:18.460 --> 17:20.860
item.browers

17:21.860 --> 17:22.260
number

17:22.260 --> 17:22.660
对不对

17:22.660 --> 17:24.560
browers count

17:26.660 --> 17:27.660
好的完成之后

17:27.660 --> 17:28.860
我们再来看一下

17:28.860 --> 17:32.560
首先来讲这个多图模式应该是可以了

17:32.560 --> 17:33.860
我们看一眼是不是可以

17:33.860 --> 17:34.460
item

17:34.460 --> 17:36.160
这里面有一个NN

17:36.160 --> 17:37.360
NN是啥意思

17:37.360 --> 17:38.460
这里面是下了

17:38.460 --> 17:41.890
先调整一下

17:41.890 --> 17:42.790
173

17:42.790 --> 17:44.290
是不是刚才已经刷出来了

17:44.290 --> 17:44.590
ok

17:44.590 --> 17:45.390
这个是可以了

17:45.390 --> 17:45.890
最后呢

17:45.890 --> 17:49.790
我们再来处理一下这个大图的一个渲染

17:49.790 --> 17:51.290
大图渲染同样的

17:51.290 --> 17:52.890
我们要知道这个图片啊

17:52.890 --> 17:53.390
图片呢

17:53.390 --> 17:55.890
其实他和这个单图是一样的

17:55.890 --> 17:58.890
我们只需要使用一张就可以了

17:58.890 --> 17:59.790
那使用一张呢

17:59.790 --> 18:00.290
这个了

18:00.290 --> 18:01.290
为了保险几件

18:01.290 --> 18:01.990
我们要怎么办

18:01.990 --> 18:04.090
看一下他的这个返回质量

18:04.090 --> 18:04.990
我们查一下

18:04.990 --> 18:07.990
这个我们看到的这个里面

18:07.990 --> 18:10.290
点击到这个大图的部分

18:10.290 --> 18:11.590
点击到大图部分

18:11.590 --> 18:13.190
这里面有一个listcard

18:13.190 --> 18:14.890
我们看他的这个carver

18:14.890 --> 18:15.290
carver呢

18:15.290 --> 18:17.090
其实这里面也返回了两张

18:17.090 --> 18:17.790
返回两张呢

18:17.790 --> 18:18.290
那怎么办

18:18.290 --> 18:19.890
我用一张是不是就可以了

18:19.890 --> 18:21.190
那也就是说

18:21.190 --> 18:22.790
maul src

18:22.790 --> 18:27.690
我这个里面就是item.carver

18:27.690 --> 18:29.090
然后呢下面的0

18:29.090 --> 18:29.890
是不是就可以

18:29.890 --> 18:32.490
也就是说使用他的这个大图

18:32.490 --> 18:32.990
之后呢

18:32.990 --> 18:35.290
我们依次的来处理一下

18:35.290 --> 18:39.790
这个是我们的item.一个title

18:39.790 --> 18:47.460
然后这个是item.castify

18:47.460 --> 18:48.060
好

18:48.060 --> 18:49.060
定义完成之后

18:49.060 --> 18:49.560
最后呢

18:49.560 --> 18:51.960
同样是他的这个浏览人数

18:51.960 --> 18:54.260
把这个复制一下就ok了

18:54.260 --> 18:55.960
把这个给替换掉

18:55.960 --> 18:58.160
那我们此时最后再来看一眼啊

18:58.160 --> 19:00.460
这个大图应该是也正常的

19:00.460 --> 19:01.960
就我们做了一个渲染啊

19:02.960 --> 19:03.960
好的找到这个里面

19:03.960 --> 19:04.760
你会发现啊

19:04.760 --> 19:05.360
这个时候呢

19:05.360 --> 19:06.760
我们大图是不是也进来了

19:06.760 --> 19:07.260
对吧

19:07.260 --> 19:08.660
那我们一个基本渲染啊

19:08.660 --> 19:10.160
到这里面就ok了

19:10.160 --> 19:11.460
但这里面有一个问题

19:11.460 --> 19:12.560
是什么问题呢

19:12.560 --> 19:13.160
就是你看啊

19:13.160 --> 19:15.760
我现在是在这个前端开发

19:15.760 --> 19:17.760
当我点击后端开发的时候

19:17.760 --> 19:19.160
包括移动端开发

19:19.160 --> 19:20.460
以及直上生活

19:20.460 --> 19:21.160
你会发现

19:21.160 --> 19:22.760
我们在这个里面渲染的时候

19:22.760 --> 19:23.860
其实呢

19:23.860 --> 19:25.760
他这个都是相同的内容

19:25.760 --> 19:26.360
那这个呢

19:26.360 --> 19:27.460
就要涉及到

19:27.560 --> 19:30.660
我们进行一个分类的处理了

19:30.660 --> 19:33.160
如何来进行这个分类的处理呢

19:33.160 --> 19:34.260
我们可以看一下

19:34.260 --> 19:36.060
完成的这个案例里面

19:36.060 --> 19:38.260
其实我们在渲染选项卡的时候

19:38.260 --> 19:40.160
这里面有一个问题是啥问题呢

19:40.160 --> 19:42.160
我们当时在做渲染的时候

19:42.160 --> 19:45.060
其实我们只是把后端的这个返回数据

19:45.060 --> 19:46.260
给他做了一个渲染

19:46.260 --> 19:46.960
但是呢

19:46.960 --> 19:48.460
在这个后端返回数据里

19:48.460 --> 19:50.260
他是没有全部这一项的

19:50.260 --> 19:51.860
那我们实现的这个案例里面

19:51.860 --> 19:52.960
他是有全部这一项

19:52.960 --> 19:53.860
那打扮呢

19:53.860 --> 19:54.760
我们这个里面啊

19:54.760 --> 19:56.760
就需要对后端的返回数据

19:56.760 --> 19:58.060
做一个扩展

19:58.060 --> 19:58.460
然后呢

19:58.460 --> 19:59.460
扩展之后

19:59.460 --> 20:02.960
我们依次的这个点击每一项的时候

20:02.960 --> 20:03.560
这时候呢

20:03.560 --> 20:05.760
我们可以获取到他一个什么呢

20:05.760 --> 20:06.960
他的一个索引值

20:06.960 --> 20:08.360
包括他的一个分类

20:08.360 --> 20:09.960
然后我们拿到这个分类

20:09.960 --> 20:12.560
向后端进行数据的请求

20:12.560 --> 20:13.960
这个时候请求呢

20:13.960 --> 20:17.060
就是按需来进行一个数据的请求

20:17.060 --> 20:17.760
那此时呢

20:17.760 --> 20:21.360
就可以获得我们需要的指定的那个指了啊

20:21.360 --> 20:22.860
那我们就来实现一下

20:22.860 --> 20:23.660
怎么来实现呢

20:23.660 --> 20:26.860
我们先把这个全部给他填充进去啊

20:26.860 --> 20:27.960
那这个当时

20:27.960 --> 20:32.360
我们是在这个index界面下面来进行的一个什么

20:32.360 --> 20:34.160
获取数据的一个操作

20:34.160 --> 20:34.660
所以说呢

20:34.660 --> 20:35.960
我们找到他们

20:35.960 --> 20:39.360
找到我们的这个学习项目打开之后

20:39.360 --> 20:41.460
pages下面有一个index

20:41.460 --> 20:43.960
这里面有一个index.will

20:43.960 --> 20:46.060
那哪一块是进行数据获取

20:46.060 --> 20:47.760
其实这一块label list

20:47.760 --> 20:51.260
是不是做这个复制的一个数据获取啊

20:51.260 --> 20:52.960
在这个数据获取里面呢

20:52.960 --> 20:56.860
我们这样给他做一个展开啊

20:56.860 --> 20:57.860
这个呢展开呢

20:57.860 --> 21:00.660
我使用一个什么三个点的形式点点点

21:00.660 --> 21:02.960
把这个获取到数组展开

21:02.960 --> 21:03.460
前面呢

21:03.460 --> 21:05.560
我添加一个添加一个什么呢

21:05.560 --> 21:07.560
就叫内幕等于一个

21:07.560 --> 21:09.360
我们的这个名字叫全部

21:09.360 --> 21:10.060
ok

21:10.060 --> 21:11.160
那这样操作之后呢

21:11.160 --> 21:11.660
此时呢

21:11.660 --> 21:15.060
他就应该是把这个全部给我们添加上了

21:15.060 --> 21:16.160
添加上之后

21:16.160 --> 21:16.860
那现在呢

21:16.860 --> 21:19.260
我们就要做一个什么事呢

21:19.260 --> 21:20.660
当我们划过的时候

21:20.660 --> 21:21.560
比如说或者说

21:21.560 --> 21:22.960
我们点击的时候

21:22.960 --> 21:26.360
我们根据我们的这个当前的这一项

21:26.360 --> 21:28.260
来进行一个数据的获取

21:28.260 --> 21:29.160
是不是就可以了

21:29.160 --> 21:29.660
对不对

21:29.660 --> 21:30.560
我们现在啊

21:30.560 --> 21:34.460
要向后端进行一个分类的传递

21:34.460 --> 21:35.060
也就是说

21:35.060 --> 21:36.960
现在当我点击的时候

21:36.960 --> 21:39.360
我把这个当前点击的这一项值呢

21:39.360 --> 21:40.760
给后端传递过去

21:40.760 --> 21:41.160
然后呢

21:41.160 --> 21:43.960
后端根据我传递过去的这个值

21:43.960 --> 21:45.360
来进行

21:45.360 --> 21:46.360
筛选之后

21:46.360 --> 21:48.860
给我返回一个指定的数据

21:48.860 --> 21:49.360
那这个呢

21:49.360 --> 21:49.960
里面呢

21:49.960 --> 21:50.760
我们怎么来做呢

21:50.760 --> 21:52.560
我们可以先做后端啊

21:52.560 --> 21:52.960
后端呢

21:52.960 --> 21:53.760
比较好做啊

21:53.760 --> 21:56.160
我们回到我们的这个云寒数

21:56.160 --> 21:57.360
到这个云寒数里面

21:57.360 --> 21:59.860
这里面有一个get article list的

21:59.860 --> 22:01.960
我们刚才定义的

22:01.960 --> 22:02.560
那其实呢

22:02.560 --> 22:03.560
这时候我们知道

22:03.560 --> 22:06.060
肯定要接收前端传递的值了

22:06.060 --> 22:08.060
所以说你接收前端传递值

22:08.060 --> 22:09.960
那这里面我们就定一下

22:09.960 --> 22:10.560
couns的

22:10.560 --> 22:13.660
比如说前端给我一会传递过一个什么呢

22:13.660 --> 22:14.560
cassify

22:14.560 --> 22:16.360
那cassify从哪个里面获取

22:16.360 --> 22:19.860
就从我们的这个event里面进行一个获取

22:19.860 --> 22:21.060
到它之后

22:21.060 --> 22:23.260
我们根据这个cassify

22:23.260 --> 22:26.660
来给我们进行一个数据的指定的

22:26.660 --> 22:28.260
一个数据返回

22:28.260 --> 22:29.260
那怎么来做呢

22:29.260 --> 22:30.260
我在这个里面啊

22:30.260 --> 22:31.560
就可以写一下了

22:31.560 --> 22:35.060
假如说你要是不等于全部

22:35.060 --> 22:35.860
那这个时候呢

22:35.860 --> 22:36.860
我们直接的

22:36.860 --> 22:39.560
就让你进行一个分门别类的

22:39.560 --> 22:40.460
给我一个返回

22:40.460 --> 22:41.460
如果说你等于全部

22:41.460 --> 22:41.760
ok

22:41.760 --> 22:42.460
那我什么都不做

22:42.460 --> 22:43.060
是不是

22:43.060 --> 22:43.460
这个呢

22:43.460 --> 22:44.260
就可以啊

22:44.260 --> 22:45.160
那我们怎么来实现

22:45.160 --> 22:46.260
我这里面写一下

22:46.260 --> 22:46.860
比如说

22:46.860 --> 22:48.860
如果说你要是不等于

22:48.860 --> 22:50.460
我们的这个全部

22:50.460 --> 22:50.960
啊

22:50.960 --> 22:51.760
那我咋做呢

22:51.760 --> 22:52.960
我这里面啊

22:52.960 --> 22:54.660
可以定一个对象

22:54.660 --> 22:56.560
那我这里面lightobj

22:56.560 --> 22:57.560
等于一个

22:58.760 --> 22:59.260
空对象

22:59.260 --> 23:01.960
如果说你要是不等于全部的话

23:01.960 --> 23:04.160
我这个里面就给obj

23:04.160 --> 23:05.560
扩展一下obj

23:05.560 --> 23:06.760
等于一个新的对象

23:06.760 --> 23:08.060
那这个新的对象里面呢

23:08.060 --> 23:10.060
我把这个cassify给写入

23:10.060 --> 23:10.760
写入之后

23:10.760 --> 23:12.160
这个obj是干嘛的

23:12.160 --> 23:13.060
其实这个obj呢

23:13.060 --> 23:15.260
我再给他描述清楚点啊

23:15.260 --> 23:17.260
是一个匹配对象匹配上

23:17.260 --> 23:19.960
那匹配我们当前指定的这个分类

23:19.960 --> 23:20.460
然后呢

23:20.460 --> 23:21.760
我这个matchobj

23:21.760 --> 23:24.960
就可以在这个聚合的操作里面

23:24.960 --> 23:26.560
我们进行一个使用了

23:26.560 --> 23:28.060
通过什么来使用呢

23:28.060 --> 23:29.560
我们开启聚合之后

23:29.560 --> 23:30.260
首先呢

23:30.260 --> 23:32.360
我们来进行一个匹配

23:32.360 --> 23:32.860
匹配呢

23:32.860 --> 23:34.760
我就把这个matchobj

23:34.760 --> 23:36.260
给他进行一个传递

23:36.260 --> 23:37.060
那这样呢

23:37.060 --> 23:38.760
他找到我们指定分类之后

23:38.760 --> 23:40.560
并且把我们内容过滤掉

23:40.560 --> 23:41.560
过滤掉之后

23:41.560 --> 23:43.160
再给我们进行一个什么

23:43.160 --> 23:45.060
返回就ok了

23:45.060 --> 23:46.360
我们可以来测试一下

23:46.360 --> 23:47.760
如何来实现测试

23:47.760 --> 23:48.460
在这个里面呢

23:48.460 --> 23:49.560
我们可以啊

23:49.560 --> 23:51.460
配置一个运行参数

23:51.460 --> 23:51.960
那这里面

23:51.960 --> 23:53.260
我们传了一个卡贼范

23:53.260 --> 23:53.560
对不对

23:53.560 --> 23:55.360
那我就写一下卡贼范

23:55.360 --> 23:56.560
假如说卡贼范

23:56.560 --> 23:58.660
如果说他要是等于全部

23:58.660 --> 24:00.260
那这里面是不是给我返回所有

24:00.260 --> 24:00.760
对吧

24:00.760 --> 24:01.960
我写一下全部

24:03.160 --> 24:04.160
ok保存一下

24:04.160 --> 24:05.460
保存一下之后

24:05.460 --> 24:08.060
我这里面本地运行一下

24:08.060 --> 24:09.060
让同学们看一下

24:10.960 --> 24:12.260
好的本地运行之后

24:12.260 --> 24:14.160
你会发现这个里面是18条

24:14.160 --> 24:14.660
对不对

24:14.660 --> 24:15.760
但是我要换一下

24:15.860 --> 24:16.760
换一下之啥呢

24:16.760 --> 24:17.760
比如说我在这个里面

24:17.760 --> 24:18.460
随便找一个

24:18.460 --> 24:20.060
假如说他叫前端开发

24:20.060 --> 24:21.760
那我这里面就写一下

24:21.760 --> 24:22.760
前端开发

24:22.760 --> 24:24.060
此时我传这个卡贼范

24:24.060 --> 24:25.960
就不是这个全部了

24:25.960 --> 24:27.560
前端开发

24:27.560 --> 24:28.460
ok保存一下

24:28.460 --> 24:29.060
保存一下

24:29.060 --> 24:31.860
我们在本地运行运行数

24:31.860 --> 24:33.260
咱们再来试一下

24:33.260 --> 24:34.460
此时你会发现

24:34.460 --> 24:35.960
他给我返回5条数据

24:35.960 --> 24:36.960
那这5条数据

24:36.960 --> 24:39.260
就是匹配好的前端开发

24:39.260 --> 24:40.260
我们这里面不格式化

24:40.260 --> 24:41.360
也可以看到这里面

24:41.360 --> 24:42.760
是不是前端开发

24:42.760 --> 24:43.260
对不对

24:43.260 --> 24:44.360
后端相关的内容

24:44.360 --> 24:46.060
是不是都已经Pass掉了

24:46.060 --> 24:48.760
这个就是我们需要的一个操作

24:48.760 --> 24:49.960
那我们定义好它之后

24:49.960 --> 24:52.760
那此时保证了我们后端没问题

24:52.760 --> 24:53.260
咋办

24:53.260 --> 24:54.960
这时候我们要上传部署

24:56.160 --> 24:57.760
当你上传部署完成之后

24:57.760 --> 24:58.460
那这时候呢

24:58.460 --> 24:59.960
我们就要开始进行

24:59.960 --> 25:02.360
我们前端的一个处理了

25:02.360 --> 25:03.360
前端处理回到哪

25:03.360 --> 25:05.360
回到我们这个Articles的里面

25:05.360 --> 25:06.360
我们再来看一下

25:06.360 --> 25:07.860
首先我们看界面

25:07.860 --> 25:08.660
什么时候

25:08.660 --> 25:09.860
比如说触者化的时候

25:09.860 --> 25:10.860
那你这时候呢

25:10.860 --> 25:12.260
你要给他传地值

25:12.260 --> 25:13.260
那传地值

25:13.260 --> 25:14.760
你触者化的时候给他传地厂

25:14.760 --> 25:17.060
是不是得要把这个全部给他传过去

25:17.060 --> 25:18.660
所以说在我们这个里面

25:18.660 --> 25:20.960
我们直接的最早的时候调用

25:20.960 --> 25:21.660
是啥没有

25:21.660 --> 25:22.260
对吧

25:22.260 --> 25:22.660
也就是说

25:22.660 --> 25:23.460
那这个时候

25:23.460 --> 25:25.260
我们这个GateArticles的里面

25:25.260 --> 25:27.460
其实他是需要接一个值的

25:27.460 --> 25:28.660
那这个值是个啥样呢

25:28.660 --> 25:30.960
其实这里面就应该是一个对象

25:30.960 --> 25:33.960
对象里面有一项这个Carsify

25:33.960 --> 25:34.760
那Carsify呢

25:34.760 --> 25:36.560
就是我们定一好的一个值

25:36.560 --> 25:37.760
那这个值我们传上

25:37.760 --> 25:38.760
触者化我们知道

25:38.760 --> 25:39.760
肯定是传零

25:39.760 --> 25:40.360
对不对

25:40.360 --> 25:41.960
那我们能不能拿到这个零

25:41.960 --> 25:42.660
这个里面呢

25:42.660 --> 25:44.060
我们就要看一下了

25:44.060 --> 25:44.760
我们在这个里面

25:44.760 --> 25:46.060
其实有没有这个零

25:46.060 --> 25:46.760
有啊

25:46.760 --> 25:47.360
在哪呢

25:47.360 --> 25:48.660
我们可以找到

25:48.660 --> 25:49.760
现在你这个里面

25:49.760 --> 25:51.760
是不是给我们从index

25:51.760 --> 25:53.460
传过来一个Activindex

25:53.460 --> 25:55.860
也就是说当前激活的这个index

25:55.860 --> 25:56.260
对吧

25:56.260 --> 25:57.560
那我们可以打印一下

25:57.560 --> 25:59.460
这个index值来看一眼

26:00.960 --> 26:03.060
我们刷新自己的这个界面

26:03.060 --> 26:04.560
来丑验啊

26:04.560 --> 26:06.560
Activindex有问题啊

26:06.560 --> 26:11.570
这个里面我使用Z次来进行调用

26:11.570 --> 26:13.470
OK刷新一下界面啊

26:13.470 --> 26:15.170
刚才是没有刷新界面啊

26:15.170 --> 26:15.670
此时呢

26:15.670 --> 26:17.270
我进行这个界面刷新

26:17.270 --> 26:19.070
好像还有点卡顿啊

26:19.070 --> 26:20.570
重新的来进行一下刷新

26:20.570 --> 26:22.670
你会发现这个Activindex

26:22.670 --> 26:24.270
是不是已经获取到了对不对

26:24.270 --> 26:25.470
那他有这个零

26:25.470 --> 26:26.270
没问题啊

26:26.270 --> 26:26.770
然后呢

26:26.770 --> 26:27.570
你拿到这个零

26:27.570 --> 26:28.670
其实没有意义啊

26:28.670 --> 26:30.070
我们是不是要传一个中文

26:30.070 --> 26:30.570
对吧

26:30.570 --> 26:31.370
那你这时候

26:31.370 --> 26:33.670
我可以通过这个Activindex

26:33.670 --> 26:35.070
我还能获取到一个值

26:35.070 --> 26:36.370
还能获取到一个啥值

26:36.370 --> 26:37.970
我们是不是还有一个label list

26:37.970 --> 26:38.470
对吧

26:38.470 --> 26:39.070
那这时候呢

26:39.070 --> 26:40.270
我再打印一个什么

26:40.270 --> 26:42.070
Z次点label list

26:42.070 --> 26:43.370
来看一眼啊

26:43.370 --> 26:43.970
两个值

26:43.970 --> 26:46.670
是不是都能正常的进行一个获取

26:46.670 --> 26:48.170
如果说能正常进行获取

26:48.170 --> 26:48.970
那就没问题

26:48.970 --> 26:50.970
假如说不能进行正常获取

26:50.970 --> 26:52.570
那我们就需要一些相关的

26:52.570 --> 26:54.270
其他处理了啊

26:54.270 --> 26:55.570
loading时间比较长

26:55.570 --> 26:56.770
是因为我这个网啊

26:56.770 --> 26:57.870
相对有一点慢

26:57.870 --> 26:58.570
我可以编译的

26:58.570 --> 26:59.670
有点慢

26:59.670 --> 27:00.170
可以了

27:00.170 --> 27:00.570
可以了

27:00.570 --> 27:01.070
到这里面

27:01.070 --> 27:01.770
你会发现

27:01.770 --> 27:04.070
这里面有个问题尴尬了

27:04.070 --> 27:05.070
啥问题呢

27:05.070 --> 27:06.170
我们这个啊

27:06.170 --> 27:07.670
label list的没有获取到

27:07.670 --> 27:09.170
是因为啥没有获取到的

27:09.170 --> 27:09.870
因为我们这个

27:09.870 --> 27:12.770
是不是从这个后端获取的数据内容

27:12.770 --> 27:13.370
但是呢

27:13.370 --> 27:14.970
你初识化的时候

27:14.970 --> 27:17.270
直接的在我们这个creating里面

27:17.270 --> 27:18.770
直接就做这个操作了

27:18.770 --> 27:21.370
即使你这个组件比我们这个index

27:21.370 --> 27:22.170
加在执行版

27:22.170 --> 27:22.770
但是呢

27:22.770 --> 27:24.470
你有一个异不请求操作

27:24.470 --> 27:24.870
所以说

27:24.870 --> 27:26.870
这里面就设计到同不任务和异不任务

27:26.870 --> 27:27.970
他的一个肯定慢

27:27.970 --> 27:28.970
那这个事咋做呢

27:28.970 --> 27:30.170
其实非常简单啊

27:30.170 --> 27:31.270
我们在学vio的时候

27:31.270 --> 27:32.570
是不是都学warch啊

27:32.570 --> 27:33.770
也就是说我们created

27:33.770 --> 27:36.370
暂时先不进行一个数据获取了

27:36.370 --> 27:37.670
我们在这个warch里面

27:37.670 --> 27:39.170
我们先听一个值

27:39.170 --> 27:40.570
如果说你label list的

27:40.570 --> 27:43.470
已经把这个数据都获取完成之后

27:43.470 --> 27:45.070
也就是说请求成功之后

27:45.070 --> 27:47.570
那你一定是会有一个什么变化的

27:47.570 --> 27:51.470
这里面就会发生一个什么new value

27:51.470 --> 27:51.970
然后呢

27:51.970 --> 27:54.370
还会有一个old value

27:54.370 --> 27:54.870
对吧

27:54.870 --> 27:55.970
这里面有两个值

27:55.970 --> 27:57.970
然后在这个里面打印一下什么

27:57.970 --> 27:58.670
new value

27:58.670 --> 28:01.170
看一下你如果说请求完成之后

28:01.170 --> 28:02.370
获取到的这个内容

28:02.370 --> 28:04.670
是不是在这里面能获取到啊

28:04.670 --> 28:06.170
我们来试一下

28:06.170 --> 28:06.670
此时呢

28:06.670 --> 28:08.370
还是从其刷新界面

28:08.370 --> 28:09.170
刷新界面之后

28:09.170 --> 28:09.270
哎

28:09.270 --> 28:10.370
这个速度比较快了

28:10.370 --> 28:10.970
对吧

28:10.970 --> 28:12.270
然后咱们再来看一样

28:12.270 --> 28:12.870
你刷新之后

28:12.870 --> 28:13.870
你会发现这个时候

28:13.870 --> 28:14.570
我们是不是

28:14.570 --> 28:16.170
这个数据就已经获取到了

28:16.170 --> 28:17.070
对吧

28:17.070 --> 28:18.070
二十二行打印啊

28:18.070 --> 28:19.070
那你数据获取到之后

28:19.070 --> 28:20.070
并且这个

28:20.070 --> 28:21.470
我们的这个零

28:21.470 --> 28:22.370
也可以获取到

28:22.370 --> 28:22.870
那咋办

28:22.870 --> 28:24.870
那我直接的就是

28:24.870 --> 28:26.870
把这个里面的这个内容啊

28:26.870 --> 28:29.070
在这个里面进行数据请求

28:29.070 --> 28:29.870
是不是就可以了

28:29.870 --> 28:30.870
也就是说

28:30.870 --> 28:31.970
我们在哪个里面做

28:31.970 --> 28:34.170
就是在这个article list

28:34.170 --> 28:36.570
里面的这个watch里面做啊

28:36.570 --> 28:37.170
做啥呢

28:37.170 --> 28:38.970
我们直接把这句话给复制过来

28:40.670 --> 28:41.870
此时你能拿到

28:41.870 --> 28:43.070
那我这里面就是

28:43.070 --> 28:45.170
guide article list

28:45.170 --> 28:45.470
好的

28:45.470 --> 28:47.470
那你guide article list

28:47.470 --> 28:48.170
之后

28:48.170 --> 28:49.370
我在这个时候

28:49.370 --> 28:51.170
那我就能保证什么

28:51.170 --> 28:53.870
我既能获取到这个active index

28:53.870 --> 28:55.570
还能获取到这个

28:55.570 --> 28:56.770
label list

28:56.770 --> 28:57.470
那此时

28:57.470 --> 28:58.670
我直接的给他传

28:58.670 --> 29:00.670
这个cut to five的时候

29:00.670 --> 29:02.170
我们就可以这么传了

29:02.170 --> 29:03.470
我们直接这样啊

29:03.470 --> 29:04.670
cut to five等于

29:04.670 --> 29:06.870
这次点label

29:06.870 --> 29:08.070
这里面重新写下

29:09.370 --> 29:10.470
label list

29:10.470 --> 29:13.070
下面的这次点active index

29:13.070 --> 29:13.670
ok

29:13.670 --> 29:14.670
这样是不是可以了

29:14.670 --> 29:15.470
也就是说出手话

29:15.470 --> 29:16.670
最起码能保证它

29:16.670 --> 29:19.370
正常的进行一个数据的获取啊

29:19.370 --> 29:20.070
我们来试一下

29:20.070 --> 29:21.070
看可不可以啊

29:21.970 --> 29:22.370
好的

29:22.370 --> 29:23.670
刷新一下界面啊

29:23.670 --> 29:24.470
刷新一下界面

29:24.470 --> 29:26.370
你会发现这个没有请求啊

29:26.370 --> 29:27.570
没有请求是因为啥

29:27.570 --> 29:28.770
我们要丑业啊

29:28.770 --> 29:31.470
这个里面是不是传过去内容了

29:31.470 --> 29:33.570
这里面有这个cut to five

29:33.570 --> 29:35.270
内幕等于一个全部

29:35.270 --> 29:36.170
那不对啊

29:36.170 --> 29:36.670
cut to five

29:36.670 --> 29:37.970
我们只要一个什么

29:37.970 --> 29:40.070
只要一个内幕属性就ok了

29:40.070 --> 29:40.570
对不对

29:40.570 --> 29:42.470
但是现在我们传了一个对象啊

29:42.470 --> 29:42.970
所以说呢

29:42.970 --> 29:44.470
我们这里面调整一下

29:44.470 --> 29:45.970
当你获取到它之后

29:45.970 --> 29:47.670
我这里面active

29:47.670 --> 29:48.770
label list

29:48.770 --> 29:50.570
Z star active index之后

29:50.570 --> 29:51.770
我们再加一个什么

29:51.770 --> 29:52.470
内幕属性

29:52.470 --> 29:54.270
保证它是一个中文

29:54.270 --> 29:54.670
ok

29:54.670 --> 29:55.370
再来试一下

29:56.870 --> 29:57.270
好了

29:57.270 --> 29:59.470
那如果说我们指定的这个

29:59.470 --> 30:01.370
把正常的指示给传过去之后

30:01.370 --> 30:02.070
那这时候呢

30:02.070 --> 30:04.970
它就给我们返回了一个正确的这个内容

30:04.970 --> 30:05.570
对吧

30:05.570 --> 30:06.870
那返回正确内容之后

30:06.870 --> 30:07.770
这是第一步

30:07.770 --> 30:09.270
我们出手话搞定了

30:09.270 --> 30:09.970
出手话搞定了

30:09.970 --> 30:11.370
这个里面还有一个什么呢

30:11.370 --> 30:12.670
我们点击的时候

30:12.670 --> 30:14.070
比如说前端开发

30:14.070 --> 30:14.570
哎

30:14.570 --> 30:16.370
直接的我这个移动端开发

30:16.370 --> 30:17.870
是不是这个时候

30:17.870 --> 30:19.870
你也需要就是说

30:19.870 --> 30:21.770
把这个数据得给处理一下

30:21.770 --> 30:22.170
对吧

30:22.170 --> 30:22.870
那这时候呢

30:22.870 --> 30:24.870
我们就得需要做一件事了

30:24.870 --> 30:25.870
做一件什么事呢

30:25.870 --> 30:28.770
我们得知道当前页面发生改变了

30:28.770 --> 30:30.270
那现在我们要明确一点

30:30.270 --> 30:32.370
能不能知道当前一面发生改变了

30:32.370 --> 30:32.970
其实这个事呢

30:32.970 --> 30:34.070
我们是能做到的

30:34.070 --> 30:35.270
在哪个里面呢

30:35.270 --> 30:37.770
因为我们有一个change current index

30:37.770 --> 30:38.370
对不对

30:38.370 --> 30:39.170
我们比如说

30:39.170 --> 30:40.470
不管是你点击上面

30:40.470 --> 30:41.570
还是点击下面呢

30:41.570 --> 30:43.970
我们都会处发它的这个

30:43.970 --> 30:45.870
current index的一个改变

30:46.870 --> 30:47.870
那这个时候呢

30:47.870 --> 30:49.570
我们把这个current

30:49.570 --> 30:50.370
给打印一下

30:50.370 --> 30:52.170
也就是说当前夹载的

30:52.170 --> 30:55.070
这个我们当前的这个界面啊

30:55.070 --> 30:56.170
然后刷新一下

30:56.170 --> 30:58.470
123走你全部来了

30:58.470 --> 30:59.170
是不是啊

30:59.170 --> 30:59.870
来了之后

30:59.870 --> 31:00.370
那咋办呢

31:00.370 --> 31:01.870
我们直接的太慢了

31:01.870 --> 31:03.070
有一张图片

31:03.070 --> 31:04.470
它是没有缓存啊

31:04.470 --> 31:06.170
那我直接的在这个里面

31:06.170 --> 31:07.070
我看一下

31:07.070 --> 31:08.370
把这个缓存给夹起来

31:08.370 --> 31:09.770
没讲缓存啊

31:09.770 --> 31:10.970
已经夹了缓存了

31:10.970 --> 31:12.670
它还是有点请求变慢

31:12.670 --> 31:13.170
到时候呢

31:13.170 --> 31:15.370
我调整一下图片地址就ok了

31:15.370 --> 31:16.670
然后我划一下

31:16.670 --> 31:17.370
你会发现

31:17.370 --> 31:18.670
1和23

31:18.670 --> 31:19.570
是不是都有啊

31:19.570 --> 31:20.570
然后点击上面

31:20.570 --> 31:21.170
点击上面

31:21.170 --> 31:22.970
你也会处发下面的一个改变

31:22.970 --> 31:23.670
那这个趁着

31:23.670 --> 31:25.570
其实就是看我这个内容

31:25.570 --> 31:26.470
发生改变的时候

31:26.470 --> 31:27.470
出发的对不对

31:27.470 --> 31:28.170
那此时

31:28.170 --> 31:29.870
你既然现在能拿到这个

31:29.870 --> 31:32.470
当前的指定这个corner index

31:32.470 --> 31:33.870
那我是不是可以通过

31:33.870 --> 31:34.770
这个corner index

31:34.770 --> 31:36.370
获取到我们的这个

31:36.370 --> 31:37.670
指定的这一项值了

31:37.670 --> 31:38.270
对不对

31:38.270 --> 31:38.870
那这个啊

31:38.870 --> 31:40.970
咋做处理呢

31:40.970 --> 31:41.470
这个里面

31:41.470 --> 31:42.570
我们做处理的时候

31:42.570 --> 31:43.070
其实呢

31:43.070 --> 31:44.170
我们不能啊

31:44.170 --> 31:46.570
一直使用那个active index

31:46.570 --> 31:47.570
那所以说怎么办呢

31:47.570 --> 31:48.170
我这个里面啊

31:48.170 --> 31:49.570
要给他调整一下

31:49.570 --> 31:50.570
调整啥呢

31:50.570 --> 31:51.870
比如说我在watch的时候

31:51.870 --> 31:52.570
我这个时候呢

31:52.570 --> 31:54.170
其实可以使用一个什么

31:54.170 --> 31:56.370
这次点active index

31:56.370 --> 31:57.370
给他传过去

31:57.370 --> 31:58.370
那如果说

31:58.370 --> 31:59.770
我直接的在这个

31:59.770 --> 32:01.570
change current index的时候

32:01.570 --> 32:03.770
我肯定也是要做数据请求了

32:03.770 --> 32:04.270
对不对

32:04.270 --> 32:04.870
这次点

32:04.870 --> 32:05.470
下线

32:05.470 --> 32:06.970
get article list的

32:06.970 --> 32:08.570
那我这时候传的是什么呢

32:08.570 --> 32:10.170
就是我们的这个current

32:10.170 --> 32:11.170
是不是就ok了

32:11.170 --> 32:11.570
也就是说

32:11.570 --> 32:13.170
把这个current给传过去

32:13.170 --> 32:14.070
就可以了

32:14.070 --> 32:15.370
然后我在这个里面

32:15.370 --> 32:16.370
就接一个什么吗

32:17.970 --> 32:19.970
current index

32:19.970 --> 32:20.470
之后呢

32:20.470 --> 32:23.770
我把这个active index给他改变一下

32:23.770 --> 32:25.170
改变一个什么呢

32:25.170 --> 32:26.670
current index

32:26.670 --> 32:27.670
是不是就可以了

32:27.670 --> 32:29.270
那我们再来看一下

32:29.270 --> 32:30.570
通过刚才的操作

32:30.570 --> 32:31.970
我们都做了什么事呢

32:31.970 --> 32:34.670
首先我们刚才最初选数据的时候

32:34.670 --> 32:37.570
我们这个两个值都是使用的

32:37.570 --> 32:39.070
我们data里面啊

32:39.070 --> 32:40.870
都是使用这个props里面

32:40.870 --> 32:41.970
传递过来的值

32:41.970 --> 32:42.670
那现在呢

32:42.670 --> 32:45.470
由于我们需要坚定页面改变的时候

32:45.470 --> 32:47.470
重新进行数据的一个请求

32:47.470 --> 32:48.170
所以说呢

32:48.170 --> 32:50.370
我把这个值让给他做了一个调整

32:50.370 --> 32:52.070
如果说你页面改变的时候

32:52.070 --> 32:54.670
我会获取到你当前的

32:54.670 --> 32:56.370
这个页面的一个索引值

32:56.370 --> 32:57.370
然后在这个里面呢

32:57.370 --> 32:58.770
还是使用label list的

32:58.770 --> 32:59.170
但是呢

32:59.170 --> 33:01.370
current index改变一下

33:01.370 --> 33:03.070
进行一个数据的获取

33:03.070 --> 33:04.870
就是做了这么一个操作啊

33:04.870 --> 33:05.870
我们再来看一下

33:05.870 --> 33:08.070
比如说我这个里面刷新一下界面

33:08.070 --> 33:10.570
先保证它的这个

33:10.570 --> 33:12.170
出指化的时候是好用的

33:12.170 --> 33:13.570
但是这里面有一个爆错

33:13.570 --> 33:15.370
我们看一下这里面是

33:15.370 --> 33:19.770
current index

33:19.770 --> 33:21.670
index

33:21.670 --> 33:22.870
少写了一个e啊

33:22.870 --> 33:23.970
来重新做一下

33:23.970 --> 33:24.970
不要紧啊

33:24.970 --> 33:26.770
然后看眼好的

33:26.770 --> 33:27.970
这个呢是没问题啊

33:27.970 --> 33:30.270
然后我们再看一下请求这一块

33:30.270 --> 33:30.970
请求这一块

33:30.970 --> 33:32.870
假如说我点前端开发

33:32.870 --> 33:33.770
那他这个里面

33:33.770 --> 33:35.070
就应该给我怎么办

33:35.070 --> 33:37.170
重新的进行一个

33:37.170 --> 33:39.070
我们的这个请求发送对不对

33:39.070 --> 33:39.770
那此时呢

33:39.770 --> 33:41.670
他获得的应该是指定的

33:41.670 --> 33:43.570
都是前端的这个内容啊

33:43.570 --> 33:45.170
如果说点后端开发

33:45.170 --> 33:46.570
那你会发现这个时候

33:46.570 --> 33:48.170
他应该是给我

33:48.170 --> 33:50.170
做这个后端内容的一个获取

33:50.170 --> 33:50.770
是不是

33:50.770 --> 33:52.770
这个里面就对了

33:52.770 --> 33:53.570
来我们再看

33:53.570 --> 33:55.270
职场生活是不是没问题

33:55.270 --> 33:56.370
然后我们再回去啊

33:56.370 --> 33:57.770
比如说到移动端开发

33:57.770 --> 33:58.370
ok

33:58.370 --> 33:59.870
这里面又获取到数据

33:59.870 --> 34:00.270
然后呢

34:00.270 --> 34:01.370
我再到职场生活

34:01.370 --> 34:03.070
其实也没啥问题啊

34:03.070 --> 34:03.870
但这里面呢

34:03.870 --> 34:06.070
还是有一个问题啊

34:06.070 --> 34:06.670
什么问题呢

34:06.670 --> 34:08.470
你看啊

34:08.470 --> 34:09.370
我们这个数据

34:09.370 --> 34:09.970
其实呢

34:09.970 --> 34:11.370
我们经过刚才的这个

34:11.370 --> 34:12.670
滑动操作之后

34:12.670 --> 34:14.270
比如说点击全部

34:14.270 --> 34:16.570
那其实最最初日画的时候

34:16.570 --> 34:18.170
这个全部里面的这个数据啊

34:18.170 --> 34:19.470
就已经获取到了

34:19.470 --> 34:20.070
所以说呢

34:20.070 --> 34:22.070
我在这个后期

34:22.070 --> 34:23.470
如果说滚动到最后

34:23.470 --> 34:25.470
假如说再想回到前面

34:25.470 --> 34:27.970
重新进行内容查看的时候

34:27.970 --> 34:28.970
我们啊

34:28.970 --> 34:29.470
其实呢

34:29.470 --> 34:31.970
是没有必要再进行数据发送的

34:31.970 --> 34:32.370
所以说

34:32.370 --> 34:32.970
这个里面

34:32.970 --> 34:34.870
我们就需要设计到一个问题

34:34.870 --> 34:35.470
是什么呢

34:35.470 --> 34:38.070
我们前端进行一个数据的

34:38.070 --> 34:39.870
缓存操作

34:39.870 --> 34:42.370
那这个缓存操作是什么意思呢

34:42.370 --> 34:43.070
就是说

34:43.070 --> 34:43.770
如果说啊

34:43.770 --> 34:44.870
你已经有数据了

34:44.870 --> 34:46.670
那我就不需要再

34:46.670 --> 34:47.270
对你啊

34:47.270 --> 34:48.970
进行一个数据请求了

34:48.970 --> 34:49.470
这样呢

34:49.470 --> 34:52.470
就能减少我们后端的一个负担

34:52.470 --> 34:52.970
也就是说

34:52.970 --> 34:54.770
把请求压力给减少了

34:54.770 --> 34:55.770
那咋来实现呢

34:55.770 --> 34:57.070
其实我们这里面啊

34:57.070 --> 34:58.070
就要调整一下

34:58.070 --> 34:59.770
之前的这个代码了

34:59.770 --> 35:01.470
我们最早定义的时候

35:01.470 --> 35:02.370
这里面定义了

35:02.370 --> 35:04.270
是一个article list

35:04.270 --> 35:05.670
那它是以数组的形式

35:05.670 --> 35:06.270
每次呢

35:06.270 --> 35:07.870
都进行重新的渲染

35:07.870 --> 35:08.470
那这时候呢

35:08.470 --> 35:09.570
我给他调整一下

35:09.570 --> 35:10.470
调整一个什么呢

35:10.470 --> 35:12.470
我们叫他article data

35:12.470 --> 35:13.070
并且呢

35:13.070 --> 35:15.570
把他的这个结构给他改一下

35:15.570 --> 35:15.970
结构呢

35:15.970 --> 35:16.870
改成一个什么样呢

35:16.870 --> 35:19.070
改成我们一个对象的形式

35:19.070 --> 35:21.470
来进行内容的一个接收

35:21.470 --> 35:22.570
嗯对象呢

35:22.570 --> 35:23.470
形式内容接收

35:23.470 --> 35:24.170
那这个里面

35:24.170 --> 35:25.170
我们就要处理一下了

35:25.170 --> 35:25.870
对不对

35:25.870 --> 35:27.170
我们这个里面啊

35:27.170 --> 35:28.070
把对象

35:28.070 --> 35:29.570
它里面啊

35:29.570 --> 35:30.570
这caron index

35:30.570 --> 35:31.470
是不是可以代表

35:31.470 --> 35:32.770
选项卡上面的每一项

35:32.770 --> 35:33.270
对不对

35:33.270 --> 35:34.170
那我这里面呢

35:34.170 --> 35:36.470
使用每一项的索引值作为k

35:36.470 --> 35:36.970
然后呢

35:36.970 --> 35:38.770
我们根据这个k啊

35:38.770 --> 35:41.770
指定的收集对应的相关k的

35:41.770 --> 35:42.670
一个数据

35:42.670 --> 35:44.070
那我这里面就可以写一下

35:44.070 --> 35:46.770
这一次点article data

35:46.770 --> 35:47.170
然后呢

35:47.170 --> 35:48.370
这里面扩展一个属性

35:48.370 --> 35:49.170
扩展啥属性呢

35:49.170 --> 35:50.270
caron index

35:50.270 --> 35:52.770
等于我们的这个article list

35:52.770 --> 35:53.370
ok

35:53.370 --> 35:54.170
这种写法啊

35:54.170 --> 35:55.570
我们使用这种形式

35:55.570 --> 35:56.670
那写完成之后呢

35:56.670 --> 35:57.570
这个里面啊

35:57.570 --> 35:58.870
我们在渲染的时候

35:58.870 --> 35:59.370
这个时候

35:59.370 --> 36:01.370
就不能用这个article list的了

36:01.370 --> 36:02.270
我们就用什么

36:02.270 --> 36:03.870
就用这个article data

36:03.870 --> 36:04.870
article data呢

36:04.870 --> 36:06.070
这里面指定一个什么呢

36:06.070 --> 36:07.770
指定我们这个index

36:07.870 --> 36:08.770
把这个index

36:08.770 --> 36:09.870
只给它传过去

36:09.870 --> 36:10.970
就ok了啊

36:10.970 --> 36:11.370
并且呢

36:11.370 --> 36:11.970
我们这里面啊

36:11.970 --> 36:13.970
只要看到索引值是index的

36:13.970 --> 36:15.270
我们都给它换一下

36:15.270 --> 36:15.870
这叫什么呢

36:15.870 --> 36:16.770
item

36:18.170 --> 36:19.670
点下滑线id

36:19.670 --> 36:20.470
ok啊

36:20.470 --> 36:20.770
好的

36:20.770 --> 36:22.070
那我们经过这个操作之后

36:22.070 --> 36:23.970
咱们来看一下是否可行啊

36:23.970 --> 36:25.470
我们刷新一下界面

36:25.470 --> 36:26.270
刷新一下界面

36:26.270 --> 36:27.270
你会发现啊

36:27.270 --> 36:28.170
这时候呢

36:28.170 --> 36:29.470
内容没有渲染

36:29.470 --> 36:30.370
那内容没有渲染

36:30.370 --> 36:30.970
是因为啥呢

36:30.970 --> 36:32.670
是因为我们来看一下

36:32.670 --> 36:33.770
首先来丑验

36:33.770 --> 36:34.670
这个

36:34.670 --> 36:37.670
我们刚才做的这个article list

36:38.670 --> 36:41.770
里面的内容是否有展示啊

36:41.770 --> 36:43.970
找到我们的这个article list的里面

36:43.970 --> 36:46.970
你会发现我们这个article data

36:46.970 --> 36:47.570
其实呢

36:47.570 --> 36:48.370
这个里面啊

36:48.370 --> 36:49.570
它是有这些数据的

36:49.570 --> 36:50.170
对不对

36:50.170 --> 36:51.070
有这些数据

36:51.070 --> 36:52.770
但是没处发我们的这个

36:52.770 --> 36:53.970
试图重新渲染

36:53.970 --> 36:55.070
这是因为啊

36:55.070 --> 36:55.970
我们在veo里面

36:55.970 --> 36:57.070
其实都已经学过

36:57.070 --> 36:58.670
如果说对这种复杂对象

36:58.670 --> 37:00.870
比如说我们这个数组

37:00.870 --> 37:03.270
或者是我们的这个对象啊

37:03.270 --> 37:03.770
如果说

37:03.770 --> 37:06.970
你想给他重新进行一个扩展的话

37:07.070 --> 37:07.870
那这时候呢

37:07.870 --> 37:10.670
他不会二次的对这个对象里面

37:10.670 --> 37:12.570
在只做一个动态监听

37:12.570 --> 37:13.570
这个也就是说

37:13.570 --> 37:15.370
为什么我们在veo3里面

37:15.370 --> 37:17.470
要把原来的define property

37:17.470 --> 37:19.970
换成proxy这种代理的形式

37:19.970 --> 37:22.370
就是专门处理数组和对象

37:22.370 --> 37:23.770
产生的这种问题

37:23.770 --> 37:25.170
那我们有没有解决方法呢

37:25.170 --> 37:25.570
有啊

37:25.570 --> 37:26.770
有两种形式

37:26.770 --> 37:27.970
我们可以处发

37:27.970 --> 37:29.670
用dollar false update

37:29.670 --> 37:30.970
来进行处发对待

37:30.970 --> 37:32.070
还可以通过什么呢

37:32.070 --> 37:33.670
我们之前使用的这种

37:33.670 --> 37:37.270
这次点dollar set的一个形式来做啊

37:38.270 --> 37:39.670
dollar set指定

37:39.670 --> 37:42.070
我们的这次点article data

37:42.070 --> 37:42.670
ok

37:42.670 --> 37:44.070
然后我们需要选什么

37:44.070 --> 37:45.270
curry index

37:45.270 --> 37:46.070
后面一个指的

37:46.070 --> 37:47.770
就是我们的这个article list的

37:47.770 --> 37:48.770
那这样做完之后

37:48.770 --> 37:50.870
是不是我们就可以处发

37:50.870 --> 37:51.870
他的这个试图

37:51.870 --> 37:53.970
重新做了一次更新

37:53.970 --> 37:54.670
对不对

37:54.670 --> 37:55.770
那我们来看一眼啊

37:55.770 --> 37:57.170
我们经过这个操作之后

37:57.170 --> 37:59.070
看的是否能进行一个渲染

37:59.070 --> 38:00.370
是不是这样就正常了

38:00.370 --> 38:00.970
对不对

38:00.970 --> 38:01.770
那这样正常之后

38:01.770 --> 38:02.670
当我改变的时候

38:02.670 --> 38:03.270
你说这个

38:03.270 --> 38:04.970
我们需要做一个什么操作呢

38:04.970 --> 38:06.470
既然我们已经收集了

38:06.470 --> 38:07.270
收集了之后

38:07.270 --> 38:08.870
那我们这个里面啊

38:08.870 --> 38:11.370
就不能直接的一味的往里填充了

38:11.370 --> 38:11.770
对不对

38:11.770 --> 38:13.170
也就是说一直调用

38:13.170 --> 38:14.170
什么时候去调用

38:14.170 --> 38:15.870
这里面有两个条件了

38:15.870 --> 38:18.070
如果说我们这一次

38:18.070 --> 38:18.770
一个什么

38:18.770 --> 38:20.570
这次点article data

38:20.570 --> 38:21.870
下面的这个

38:22.770 --> 38:24.270
current对吧

38:24.270 --> 38:26.670
假如说我们现在要没有这一下

38:26.670 --> 38:27.270
没有这一下

38:27.270 --> 38:27.670
怎么办

38:27.670 --> 38:29.670
我这前面添一个非啊

38:29.670 --> 38:31.270
如果说你没有这一下

38:31.270 --> 38:31.970
或者呢

38:31.970 --> 38:34.570
我们当前获取到的这一项呢

38:34.570 --> 38:35.770
它是一个空

38:35.770 --> 38:36.370
那也就是说

38:36.370 --> 38:38.270
这一次点article data

38:38.270 --> 38:39.470
下面的

38:39.470 --> 38:40.670
C-O-R-I-N-T

38:40.670 --> 38:42.770
current.lunce

38:42.770 --> 38:43.270
lunce呢

38:43.270 --> 38:45.270
我这里面或者是写一个什么

38:45.270 --> 38:45.670
非

38:45.670 --> 38:46.770
那非是不是代表着

38:46.770 --> 38:47.870
他没有数据啊

38:47.870 --> 38:49.870
那假如说是这两种情况下

38:49.870 --> 38:51.570
那我怎么办

38:51.570 --> 38:52.270
那我这里面

38:52.270 --> 38:53.170
这一次点

38:53.170 --> 38:54.470
get article list的

38:54.470 --> 38:55.970
然后再去请求

38:55.970 --> 38:56.870
假如说你有数据了

38:56.870 --> 38:57.970
那我就不做这个

38:57.970 --> 38:59.970
重新的这个请求出发了啊

38:59.970 --> 39:00.770
那我们来试一下

39:00.770 --> 39:02.070
是否可行

39:02.070 --> 39:02.570
ok

39:02.570 --> 39:03.370
这个行不行

39:03.370 --> 39:03.970
得看哪啊

39:03.970 --> 39:05.870
得看这个network啊

39:05.870 --> 39:07.570
我们刷新一下界面

39:07.570 --> 39:08.470
刷新一些界面

39:08.470 --> 39:09.370
到这个里面

39:09.370 --> 39:10.070
首先呢

39:10.070 --> 39:11.670
把这个给清空一下

39:11.670 --> 39:13.870
我们点到这个前端开发这一块

39:13.870 --> 39:15.670
你会发现他请求数据了

39:15.670 --> 39:17.570
然后我们再回到后端开发

39:17.570 --> 39:20.070
这里面都是一次的进行数据请求

39:20.070 --> 39:20.470
但是呢

39:20.470 --> 39:21.670
我现在想往回点

39:21.670 --> 39:23.270
比如说点击全部

39:23.270 --> 39:23.870
你会发现

39:23.870 --> 39:25.670
此时他是不是没有进行数据请求

39:25.670 --> 39:26.170
也就是说

39:26.170 --> 39:28.170
那我再回到这个前端这一块

39:28.170 --> 39:29.670
他也没有发数据请求

39:29.670 --> 39:30.270
那这样呢

39:30.270 --> 39:31.870
就实现了一个什么

39:31.870 --> 39:33.670
我们给他这个数据

39:33.670 --> 39:35.570
做了一个缓存的操作

39:35.570 --> 39:36.170
对不对

39:36.170 --> 39:36.970
那这样就是

39:36.970 --> 39:40.170
减少了我们服务器的一个压力啊

39:40.170 --> 39:41.270
其实

39:41.270 --> 39:41.470
好的

39:41.470 --> 39:42.070
那这个呢

39:42.070 --> 39:45.770
就是我们本节课数据渲染的整个过程

39:45.770 --> 39:46.970
我们这几个就到这里

