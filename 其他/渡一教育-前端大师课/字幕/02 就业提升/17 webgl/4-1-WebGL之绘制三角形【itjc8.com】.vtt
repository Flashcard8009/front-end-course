WEBVTT

00:00.370 --> 00:04.850
本堂课我们学习如何绘制三角形

00:04.850 --> 00:07.730
上一堂课我们学会织点

00:07.730 --> 00:10.090
这一堂课我们绘制三角形

00:10.090 --> 00:12.730
三角形还分成几种三角形

00:12.730 --> 00:14.730
第一种就是普通的三角形

00:14.730 --> 00:18.050
如果我们来传第六个顶点的话

00:18.050 --> 00:19.810
六种六个顶点

00:19.810 --> 00:21.850
它会织的普通三角形

00:21.850 --> 00:24.930
就是我们通过上一堂课学的

00:24.930 --> 00:26.490
Jaw Wrist这个方法

00:26.490 --> 00:28.970
第一个参数它传的是一个图形

00:29.090 --> 00:31.130
我上一堂课传的是Pont

00:31.130 --> 00:34.290
然后这一堂课我们来传递一下三角形

00:34.290 --> 00:37.250
三角形它除了普通三角形之外

00:37.250 --> 00:40.730
还有其他的像三角形扇

00:40.730 --> 00:45.650
像三角扇 三角带

00:45.650 --> 00:46.490
看到了吗

00:46.490 --> 00:47.690
它们到底有什么区别

00:47.690 --> 00:48.690
我们一个也来说

00:48.690 --> 00:50.210
可以吧

00:50.210 --> 00:52.650
那第一个三角形就不用多说了

00:52.650 --> 00:55.730
它根据一个有六个顶点

00:55.730 --> 00:57.530
每三个顶点是一个三角形

00:57.530 --> 00:58.330
对吧

00:58.370 --> 01:00.890
那三角形的数量就等于顶点数比上

01:00.890 --> 01:02.850
除以一个三

01:02.850 --> 01:03.250
对不对

01:03.250 --> 01:05.010
三个点合成一个三角形

01:05.010 --> 01:06.130
对吧

01:06.130 --> 01:08.250
那除了这样的一个普通三角形之外

01:08.250 --> 01:11.930
我们还可以实现一个三角带

01:11.930 --> 01:13.570
它三角带

01:13.570 --> 01:15.770
我们只需要传递第一个参数

01:15.770 --> 01:19.930
就这个Jaw Wrist这个参数

01:19.930 --> 01:23.690
传递这个Tranquil Strip就可以了

01:23.690 --> 01:25.010
它就代表三角带

01:25.010 --> 01:28.690
那三角带它是会是什么样的一个三角形

01:28.690 --> 01:30.690
我们可以看一下

01:30.690 --> 01:32.290
我们有六个顶点

01:32.290 --> 01:32.610
对吧

01:32.610 --> 01:33.850
六个顶点

01:33.850 --> 01:37.770
它六个顶点会组合成这样的一个三角形

01:37.770 --> 01:39.010
它是怎么组合呢

01:39.010 --> 01:39.970
就是第一个顶点

01:39.970 --> 01:40.650
第二个顶点

01:40.650 --> 01:41.370
第三个顶点

01:41.370 --> 01:42.130
相连

01:42.130 --> 01:44.090
然后再接着前三个弦

01:44.090 --> 01:44.810
你顶点相连

01:44.810 --> 01:46.610
然后再二三四再相连

01:46.610 --> 01:48.050
再三四五再相连

01:48.050 --> 01:49.130
再四五六再相连

01:49.130 --> 01:51.530
是这样的一个连接的方式

01:51.530 --> 01:53.250
让你解释吧

01:53.250 --> 01:54.530
是这样连接的一个方式

01:54.530 --> 01:57.170
也就是说它们的顶点是有重复的一个部分

01:57.170 --> 01:57.970
看到了吧

01:57.970 --> 02:01.050
一二三二三四三四五四五六

02:01.050 --> 02:01.530
对吧

02:01.530 --> 02:03.810
它是这样形成一个三角形

02:03.810 --> 02:05.090
三角带的

02:05.090 --> 02:06.010
那这样的话

02:06.010 --> 02:08.250
我们汇制出来的三角形有多少个

02:08.250 --> 02:11.370
是不是应该是顶点数减去二个

02:11.370 --> 02:11.610
对吧

02:11.610 --> 02:13.090
这样是四个三角形吗

02:13.090 --> 02:14.890
对吧

02:14.890 --> 02:17.610
那这个汇制的三角形的数量

02:17.610 --> 02:19.170
就是顶点数减二

02:19.170 --> 02:20.570
那除了三角带之外

02:20.570 --> 02:22.090
它还有个三角扇

02:22.090 --> 02:23.650
那三角扇是一样的

02:23.690 --> 02:26.090
三角扇是由一个点出发

02:26.090 --> 02:29.890
与其他的五个点进行一个相连

02:29.890 --> 02:31.450
与其他的点进行相连

02:31.450 --> 02:33.810
形成的一个三角形扇

02:33.810 --> 02:34.730
三角扇

02:34.730 --> 02:37.250
我就是写错了

02:37.250 --> 02:38.290
三角扇

02:38.290 --> 02:43.650
那这个三角扇它能汇制出的一个图形数量的什么

02:43.650 --> 02:46.090
它等于顶点数减二

02:46.090 --> 02:48.170
等于顶点数减二

02:48.170 --> 02:49.810
那我们在汇制三角形的时候

02:49.810 --> 02:51.290
该如何汇制呢

02:51.290 --> 02:53.330
我们上一堂课是不是说

02:53.410 --> 02:54.490
汇制点的时候

02:54.490 --> 02:55.890
我们只需要调用一下

02:55.890 --> 02:57.090
这个

02:57.090 --> 02:58.530
这个方法

02:58.530 --> 02:58.970
对吧

02:58.970 --> 03:00.130
然后把我们点

03:00.130 --> 03:01.930
坐标通过这个

03:01.930 --> 03:02.210
呃

03:02.210 --> 03:03.210
上面

03:03.210 --> 03:04.570
谈过上面的这个

03:04.570 --> 03:05.690
i-tribute

03:05.690 --> 03:06.410
呃

03:06.410 --> 03:07.290
war tax

03:07.290 --> 03:08.490
i-tribute

03:08.490 --> 03:10.930
三F这种方式进行一个传递

03:10.930 --> 03:11.330
对吧

03:11.330 --> 03:12.650
那这是一个顶点

03:12.650 --> 03:13.010
对不对

03:13.010 --> 03:15.010
这是每次只穿一个顶点

03:15.010 --> 03:17.210
但是如果我们顶点多了

03:17.210 --> 03:19.850
就像我们今天要做的这个三角形

03:19.850 --> 03:22.050
那我们是不是不可能是一个顶点

03:22.050 --> 03:22.650
一个顶点

03:23.290 --> 03:23.690
对吧

03:23.690 --> 03:24.690
你不可能是一个顶点

03:24.690 --> 03:25.130
一个顶点

03:25.130 --> 03:26.090
传吧

03:26.090 --> 03:27.010
那

03:27.010 --> 03:30.330
那我们应该怎么来传会更好一点呢

03:30.330 --> 03:32.290
这我们在webjr里面

03:32.290 --> 03:35.210
就出现了一个东西叫

03:35.210 --> 03:37.090
缓冲区

03:37.090 --> 03:38.850
就出现了缓冲区

03:38.850 --> 03:41.370
那这个缓冲区是什么意思呢

03:41.370 --> 03:44.290
它其实就是我们把所有的顶点

03:44.290 --> 03:45.890
都放在缓冲区里面

03:45.890 --> 03:47.930
然后我们在顶点

03:47.930 --> 03:50.010
着色器里面去汇制顶点的时候

03:50.010 --> 03:52.410
是从缓冲区里面去拿的

03:52.410 --> 03:54.890
那我们之前没有用到缓冲区的时候

03:54.890 --> 03:58.010
它的顶点是直接传到我们顶点着色器的

03:58.010 --> 03:59.490
可以吧

03:59.490 --> 04:00.170
那这样的话

04:00.170 --> 04:01.290
我们缓冲区

04:01.290 --> 04:03.770
对象我们缓冲区它是比较大的

04:03.770 --> 04:04.530
对吧

04:04.530 --> 04:06.050
我们缓冲区是比较大的

04:06.050 --> 04:09.130
所以我们就可以存出很多个顶点

04:09.130 --> 04:11.050
让你解释吧

04:11.050 --> 04:11.810
那好

04:11.810 --> 04:13.010
我们再接着往下

04:13.010 --> 04:14.690
再接着往下来

04:14.690 --> 04:16.770
来了解一下缓冲区的一个作用

04:16.770 --> 04:18.210
其实读一下吧

04:18.210 --> 04:19.890
就是对于一个图形来说

04:19.930 --> 04:21.930
可能需要很多个顶点组成

04:21.930 --> 04:23.010
对吧

04:23.010 --> 04:23.650
那这样的话

04:23.650 --> 04:24.970
就需要一个图形中

04:24.970 --> 04:27.170
所有的顶点的全部

04:27.170 --> 04:27.970
所有的顶点

04:27.970 --> 04:30.970
全部都要传入到顶点着色器当中去

04:30.970 --> 04:32.770
然后才能把图片

04:32.770 --> 04:34.210
才能把图形画出来

04:34.210 --> 04:34.730
对吧

04:34.730 --> 04:40.370
那WebJR就就提供了这样的一种机制

04:40.370 --> 04:43.010
叫缓冲区对象

04:43.010 --> 04:46.570
那它就是可以一次性的去向着色器里面

04:46.570 --> 04:51.250
去传入多个顶点数据的

04:51.250 --> 04:52.490
可以吧

04:52.490 --> 04:56.250
这是缓冲区就是这么一个东西

04:56.250 --> 05:01.690
它可以一次性的向着色器中传入多个顶点的数据

05:01.690 --> 05:06.170
然后缓冲区对象是WebJR系统中的一块区域

05:06.170 --> 05:07.170
那我刚才说了

05:07.170 --> 05:07.690
对了

05:07.690 --> 05:11.010
它是WebJR系统中的一个一部分

05:11.010 --> 05:11.650
对不对

05:11.650 --> 05:14.450
那可以一次性的向其添入

05:14.450 --> 05:15.330
这都是废话了

05:15.330 --> 05:15.610
对吧

05:15.610 --> 05:16.690
刚才已经说过了

05:16.690 --> 05:17.290
不多说了

05:17.290 --> 05:18.610
可以吧

05:18.610 --> 05:19.210
OK

05:19.210 --> 05:21.250
那我们如何使用这个缓冲区呢

05:21.250 --> 05:23.730
我们还是把上一堂课代码拿过来

05:23.730 --> 05:26.530
上一堂课代码在这对吧

05:26.530 --> 05:28.610
上一堂课我们是传入了几个点

05:28.610 --> 05:30.170
然后让它汇制对不对

05:30.170 --> 05:32.810
然后我们下面部分应该在这

05:32.810 --> 05:35.090
这是我们往里传入的点

05:35.090 --> 05:37.290
颜色的一些信息对不对

05:37.290 --> 05:38.210
那这个颜色

05:38.210 --> 05:41.050
这个颜色我就先让它传死了

05:41.050 --> 05:41.570
可以吧

05:41.570 --> 05:42.770
传一个颜色

05:42.770 --> 05:44.770
或者这个颜色我就先不让它传

05:44.770 --> 05:45.450
可以吧

05:45.490 --> 05:46.930
我先不让它传这块

05:48.450 --> 05:49.210
或者是

05:49.210 --> 05:50.410
还要传一下吧

05:50.410 --> 05:51.930
在这里我传一下

05:51.930 --> 05:58.210
JR.WartaxAttributeRF

05:58.210 --> 06:00.010
来一个A-color

06:00.010 --> 06:01.930
我把这个颜色传进去

06:01.930 --> 06:04.050
这个color什么颜色呢

06:04.050 --> 06:06.690
来个3F

06:06.690 --> 06:08.250
RGB A4

06:08.250 --> 06:10.290
4F

06:10.290 --> 06:14.170
来一个255

06:14.170 --> 06:17.010
来个1

06:17.010 --> 06:18.090
1

06:18.090 --> 06:20.050
0

06:20.050 --> 06:22.250
1

06:22.250 --> 06:22.690
可以吧

06:24.050 --> 06:24.970
OK吧

06:24.970 --> 06:28.290
然后我们先这样

06:28.290 --> 06:29.970
然后把color这块可以去掉了

06:29.970 --> 06:30.290
对不对

06:30.290 --> 06:32.770
中间这块都可以删掉了

06:32.770 --> 06:35.410
这块绑定时间这就需要了

06:35.410 --> 06:37.090
然后我们最后要汇制的时候

06:37.090 --> 06:38.570
把汇制的这个拿出来

06:38.570 --> 06:39.250
可以吧

06:39.250 --> 06:42.210
或者是这个我们先注释掉吧

06:42.210 --> 06:44.130
然后再来一个

06:44.130 --> 06:44.970
汇制三角形

06:44.970 --> 06:45.290
对吧

06:45.290 --> 06:46.130
放个圣

06:46.130 --> 06:47.130
拿个圣

06:47.130 --> 06:49.420
可以吧

06:49.420 --> 06:50.820
汇制这个三角形

06:50.820 --> 06:51.820
那汇制三角形

06:51.820 --> 06:54.220
我是不是需要把顶点数据都传进去

06:54.220 --> 06:55.780
然后刚才说我们要传到哪

06:55.780 --> 06:57.340
是不是传到缓中区当中去

06:57.340 --> 06:57.900
对吧

06:57.900 --> 07:00.580
那缓中区怎么来创建的

07:00.580 --> 07:02.380
怎么来取呢

07:02.380 --> 07:03.420
怎么来存呢

07:03.420 --> 07:04.980
我们一个一个来

07:04.980 --> 07:06.140
一点一步一步来

07:07.380 --> 07:10.540
第一步我们首先需要创建缓中区

07:10.540 --> 07:11.660
创建缓中区的话

07:11.660 --> 07:13.900
我们只需要通过JR身上的一个方法

07:13.900 --> 07:15.740
叫CreateBuffer一个方法

07:15.740 --> 07:17.700
然后我们来创建一下吧

07:17.700 --> 07:18.700
这里

07:18.700 --> 07:19.860
在上面创建吧

07:19.860 --> 07:21.660
因为缓中区它是一个区域

07:21.660 --> 07:23.020
那我们在上面创建一个

07:23.020 --> 07:25.340
我们就一直在用就可以了

07:25.340 --> 07:28.540
叫Buffer或者叫PositionBuffer

07:28.540 --> 07:29.140
对吧

07:29.140 --> 07:36.620
比Ur8v2等于JR.CreateBuffer比Ur8v2

07:36.620 --> 07:37.180
可以吧

07:37.180 --> 07:39.180
创建这样的一个缓中区

07:39.180 --> 07:40.900
那创建完缓中区之后

07:40.900 --> 07:41.820
我们可以看一下

07:41.900 --> 07:44.540
我们这个WebJR内部的一个变化

07:44.540 --> 07:47.140
它就是在我们的WebJR系统里面

07:47.140 --> 07:49.180
去新增了一个缓中区的项

07:49.180 --> 07:49.900
看到了吧

07:49.900 --> 07:51.540
那WebJR里面

07:51.540 --> 07:53.820
它自己也有一些缓中区

07:53.820 --> 07:55.380
像这个Ur8v4

07:55.380 --> 07:58.980
代表的是这个顶点的一个数据的缓中区

07:58.980 --> 08:02.380
然后上面这个JRElementOr8v4

08:02.380 --> 08:05.060
代表是顶点的这个

08:05.060 --> 08:06.740
所引的一个缓中区

08:07.860 --> 08:09.020
那这些吧

08:09.020 --> 08:11.780
那这两个缓中区是我们最终要用到的

08:12.260 --> 08:14.460
那我们现在创建完这个缓中区

08:14.460 --> 08:15.180
怎么办呢

08:15.180 --> 08:17.580
怎么用到我们这个JRElementOr8v4

08:17.580 --> 08:19.340
我们就需要与它俩

08:19.340 --> 08:21.660
把我们现在创建这个缓中区

08:21.660 --> 08:25.300
与我们的Or8v4进行一个相连接

08:25.300 --> 08:27.380
你可以与Or8v4连接

08:27.380 --> 08:29.700
也可以与ElementOr8v4连接

08:29.700 --> 08:30.420
那这样的话

08:30.420 --> 08:32.980
就看你的数据到底是什么了

08:32.980 --> 08:35.540
是顶点的这个所引值

08:35.540 --> 08:37.740
还是顶点的一个位置

08:37.740 --> 08:38.580
可以吧

08:38.580 --> 08:39.380
那我们如果写

08:39.380 --> 08:41.980
我们现在写就写一个顶点的位置

08:41.980 --> 08:42.500
可以吧

08:42.500 --> 08:44.900
那我们就与第一个缓中区进行连接

08:44.900 --> 08:45.660
就行了

08:45.660 --> 08:47.460
那如何连接呢

08:47.460 --> 08:48.580
如何绑定呢

08:48.580 --> 08:51.820
我们就通过JL身上的一个方法

08:51.820 --> 08:54.260
叫BandBuffer这个方法

08:54.260 --> 08:56.980
可以绑定我们这个缓中区

08:56.980 --> 08:58.580
那BandBuffer这个方法

08:58.580 --> 08:59.420
它身上

08:59.420 --> 09:02.980
它这个方法里面需要传递两个参数

09:02.980 --> 09:04.620
第一个参数叫Target

09:04.620 --> 09:06.740
这个Target就是我们刚才所说的

09:06.740 --> 09:08.740
这个缓中区的一个

09:08.740 --> 09:09.540
一个类型

09:09.540 --> 09:10.620
就是两个缓中区

09:10.620 --> 09:12.380
刚才是不是说两个缓中区

09:12.380 --> 09:15.180
一个是顶点数据的一个缓中区

09:15.180 --> 09:17.420
另一个是顶点所引值的缓中区

09:17.420 --> 09:18.020
对吧

09:18.020 --> 09:19.820
那你就自己想绑哪个

09:19.820 --> 09:20.420
就绑哪个

09:20.420 --> 09:21.620
你用哪个数据

09:21.620 --> 09:23.180
你就绑定哪个

09:23.180 --> 09:25.100
那我们现在要绑定的是Or8v4

09:25.100 --> 09:25.580
对不对

09:25.580 --> 09:28.580
原因是我们要传统的是顶点数据

09:28.580 --> 09:29.980
然后第二个

09:29.980 --> 09:32.220
参数是你创建的

09:32.220 --> 09:33.980
是你创建的这个

09:33.980 --> 09:35.780
带绑定的缓中区的一个对象

09:35.820 --> 09:37.260
就是你创建的这个缓中区

09:37.260 --> 09:37.900
那你解释吧

09:37.900 --> 09:39.180
那我们来试一下

09:39.180 --> 09:39.860
用一下

09:39.860 --> 09:41.900
jr.bandbuffer

09:41.900 --> 09:42.180
对吧

09:43.980 --> 09:49.330
然后第一个应该是jr.rebuffer

09:49.330 --> 09:50.770
Ur8v2

09:50.770 --> 09:52.330
然后第二个possession

09:52.330 --> 09:54.690
就是我们刚才创建的这个buffer

09:54.690 --> 09:56.130
可以吧

09:56.130 --> 09:58.450
那我们绑定完buffer之后

09:58.450 --> 10:00.090
还要做什么呢

10:00.090 --> 10:00.730
你可以看一下

10:00.730 --> 10:01.850
绑定完buffer之后

10:01.850 --> 10:03.850
我们的内部一个变化

10:03.850 --> 10:05.090
绑定完buffer之后

10:05.090 --> 10:07.250
内部其实就是把我们这个

10:07.250 --> 10:09.930
Ur8v4和我们缓中区的一个

10:09.930 --> 10:12.690
和我们刚才创建的缓中区对象

10:12.690 --> 10:14.130
它俩进行一个相连

10:14.130 --> 10:14.850
那这样的话

10:14.850 --> 10:16.130
我们在缓中区对象里面

10:16.130 --> 10:17.650
进行一个操作的话

10:17.650 --> 10:19.970
我们也会改变我们内部的这个buffer

10:19.970 --> 10:20.650
那你解释吧

10:20.650 --> 10:21.810
内部的一个数据

10:21.810 --> 10:22.690
然后接下来

10:22.690 --> 10:24.170
我们就需要往我们的

10:24.170 --> 10:26.210
缓中区里面去写数据了

10:26.210 --> 10:26.850
对不对

10:26.850 --> 10:28.250
那如何写数据呢

10:28.250 --> 10:30.250
我们还是通过一个方法

10:30.250 --> 10:32.290
叫buffer data这个方法

10:33.170 --> 10:34.690
buffer data这个方法

10:34.770 --> 10:38.210
我们可以往缓中区里面写入数据

10:38.210 --> 10:40.610
那buffer data这个方法

10:40.610 --> 10:42.810
它有三个参数

10:42.810 --> 10:44.690
第一个参数叫target

10:44.690 --> 10:45.490
这个target的

10:45.490 --> 10:49.690
就说我们要绑定到哪一个缓中区上去

10:49.690 --> 10:51.810
你是绑定到我们的这个

10:53.650 --> 10:55.570
顶点数据的那个缓中区

10:55.570 --> 10:56.570
还是绑定到

10:56.570 --> 10:59.250
顶点所因值的那个缓中区当中去呢

10:59.250 --> 11:00.010
对吧

11:00.010 --> 11:01.610
这是二选一的

11:01.610 --> 11:03.610
这个第一个参数是二选一的

11:04.930 --> 11:06.290
然后第二参数是data

11:06.290 --> 11:08.570
代表的是我们要写入的一个数据

11:08.570 --> 11:09.330
然后注意

11:09.330 --> 11:12.370
它的这个data必须要是类型化数组

11:12.370 --> 11:13.690
什么是类型化数组

11:13.690 --> 11:15.090
就是我们

11:15.090 --> 11:17.490
因为我们着色器里面

11:17.490 --> 11:18.610
着色器语言里面

11:18.610 --> 11:21.170
它是强类型数据

11:21.170 --> 11:22.050
对吧

11:22.050 --> 11:23.330
它是强类型数据

11:23.330 --> 11:25.290
强类型数据是什么呢

11:25.290 --> 11:29.330
就是我要是声明哪一种数据类型的话

11:29.330 --> 11:30.450
我复职的时候

11:30.450 --> 11:33.370
必须要复职这种数据类型的数据

11:33.410 --> 11:35.810
就相当于我如果是

11:35.810 --> 11:36.770
如果这个变量

11:36.770 --> 11:38.730
它是一个flow的浮电型的

11:38.730 --> 11:40.890
你必须要复职一个浮电型

11:40.890 --> 11:43.530
即使你写的是1

11:43.530 --> 11:45.690
如果你要是写的是1

11:45.690 --> 11:46.730
它就会给你报错的

11:46.730 --> 11:48.610
因为1它是一个整形的

11:48.610 --> 11:51.490
但如果你写1.0它就没有问题

11:51.490 --> 11:54.330
因为1.0它是它自己的

11:54.330 --> 11:55.770
刚才我说的

11:55.770 --> 11:56.890
它是一个浮电型的

11:56.890 --> 11:57.130
对吧

11:59.050 --> 12:00.130
它是一个浮电型的

12:00.130 --> 12:03.330
它又满足这个类型的一个条件

12:03.370 --> 12:05.290
所以它就不会报错

12:05.290 --> 12:08.930
所以这个data必须要使类型花数组

12:08.930 --> 12:10.050
那类型花数组

12:10.050 --> 12:12.050
它会把你的数据

12:12.050 --> 12:15.210
转化成一个强类型的数据

12:15.210 --> 12:17.810
那这些把法转换成强类型的语言

12:17.810 --> 12:19.130
强类型数据语言

12:20.290 --> 12:20.930
OK吧

12:20.930 --> 12:22.330
然后我们再接下来

12:23.570 --> 12:25.330
再接下来第三个才说

12:25.330 --> 12:26.050
第三个才说

12:26.050 --> 12:27.050
它表示的是

12:27.050 --> 12:30.970
程序将如何使用存储在缓冲区

12:30.970 --> 12:32.730
对象中的数据

12:33.410 --> 12:34.330
那这个

12:36.330 --> 12:37.770
它的值也是固定的

12:37.770 --> 12:38.850
固定有三种

12:38.850 --> 12:40.810
第一种叫static照

12:40.810 --> 12:41.530
代表的是

12:41.530 --> 12:44.930
只会向缓冲区对象中写入一次数据

12:44.930 --> 12:46.410
但是需要多次汇制

12:46.410 --> 12:50.050
也就是说我们如果要用static照的话

12:50.050 --> 12:51.530
我们这个数据写入

12:51.530 --> 12:53.250
它会只写入一次

12:53.250 --> 12:55.210
但是会汇制多次

12:55.210 --> 12:55.890
让你解释吧

12:55.890 --> 12:57.690
它会在渲染我们的页面的时候

12:57.690 --> 13:01.570
它会多次的去汇制的

13:01.690 --> 13:03.930
然后第二个值是这个

13:03.930 --> 13:05.570
Stream

13:05.570 --> 13:08.850
StreamDream

13:08.850 --> 13:09.890
Stream照

13:09.890 --> 13:10.210
对吧

13:10.210 --> 13:11.650
Stream照

13:11.650 --> 13:12.410
代表的是

13:12.410 --> 13:14.890
只会向缓冲区对象中写入一次

13:14.890 --> 13:16.410
但是汇制如果敢自挨

13:16.410 --> 13:19.370
但是有同学就会问了

13:19.370 --> 13:21.450
说这个和这个有什么区别

13:23.930 --> 13:25.650
一个是

13:25.650 --> 13:26.530
这个

13:26.530 --> 13:27.610
上面这个

13:27.610 --> 13:28.650
止火

13:29.810 --> 13:30.330
这个

13:30.330 --> 13:31.010
第二个

13:31.010 --> 13:32.650
就是Stream照

13:32.650 --> 13:35.370
它是先写入

13:35.370 --> 13:37.210
写入完了之后

13:37.210 --> 13:38.850
去汇制

13:38.850 --> 13:40.330
它会汇制如果敢自

13:40.330 --> 13:42.010
它会不断的去汇制

13:42.010 --> 13:42.690
让你解释吧

13:42.690 --> 13:43.890
这个Stream照

13:43.890 --> 13:45.290
它是不断的去汇制

13:45.290 --> 13:46.210
而上面这个

13:46.210 --> 13:50.490
是根据你自己写的图形

13:50.490 --> 13:52.130
它进行一个汇制

13:52.130 --> 13:53.810
让你解释吧

13:53.810 --> 13:55.330
自己写的进行一个汇制

13:55.330 --> 13:58.050
那我们一般用的就是第一个

13:58.050 --> 13:59.690
那为什么会一般用第一个

13:59.730 --> 14:00.530
就是

14:02.530 --> 14:04.890
就是希望我们用户

14:04.890 --> 14:05.770
不会

14:05.770 --> 14:06.770
希望我们的这个

14:06.770 --> 14:07.730
lubjr

14:07.730 --> 14:09.490
不会频繁的去改变我们的

14:09.490 --> 14:11.650
这个缓冲区的一个数据

14:11.650 --> 14:12.850
可以吧

14:12.850 --> 14:14.210
它不会频繁的去改变我们

14:14.210 --> 14:18.780
缓冲区的一个数据

14:18.780 --> 14:20.620
那我们这个也来写一下

14:20.620 --> 14:21.420
可以吧

14:21.420 --> 14:22.460
接下来

14:22.460 --> 14:24.780
jr.bufferdata

14:24.780 --> 14:27.590
对吧

14:27.590 --> 14:28.510
bufferdata

14:28.510 --> 14:29.990
里面传入三个参数

14:29.990 --> 14:30.910
第一个参数

14:30.910 --> 14:32.990
缓冲区的一个位置

14:33.030 --> 14:33.750
lubjr.buffer

14:33.750 --> 14:34.270
对吧

14:34.270 --> 14:35.710
然后第二个参数data

14:35.710 --> 14:36.950
data它要是一个

14:36.950 --> 14:38.910
这个类型化数组

14:38.910 --> 14:41.070
那这个类型化数组怎么来写

14:41.070 --> 14:43.950
类型化数组我们通过一个方法就可以了

14:43.950 --> 14:45.510
通过这么几种方法

14:45.510 --> 14:46.710
这么几种方法

14:46.710 --> 14:47.830
一般我们用到的是

14:47.830 --> 14:49.030
float32位的

14:49.030 --> 14:51.710
代表是单经度32位辅典数

14:51.710 --> 14:53.430
然后它这块还告诉你

14:53.430 --> 14:55.190
这每个元素所占的字节数

14:55.190 --> 14:56.110
了解一下

14:56.110 --> 14:56.830
可以吧

14:56.830 --> 14:58.150
然后这个字节数有什么用

14:58.150 --> 14:59.190
一会我们再来说

14:59.190 --> 15:00.270
好吧

15:00.270 --> 15:01.310
一会我们再来说

15:01.310 --> 15:02.670
然后我们就先用一下它

15:02.670 --> 15:04.510
float32位

15:05.510 --> 15:06.350
另有一个

15:06.350 --> 15:07.550
它是一个构造还数

15:07.550 --> 15:09.390
float32位

15:09.390 --> 15:11.190
然后里面传的是数组

15:11.190 --> 15:12.830
那数组里面就是我们这个

15:14.030 --> 15:15.310
顶点的一些数据了

15:15.310 --> 15:15.790
对吧

15:15.790 --> 15:18.590
那我要给它写一些数据吧

15:18.590 --> 15:19.950
来个50相速

15:19.950 --> 15:21.550
50相速开始

15:21.550 --> 15:22.030
对吧

15:22.030 --> 15:25.350
于我现在写的是我们这个cowars的作标

15:25.350 --> 15:27.150
为什么我主要写cowars作标

15:27.150 --> 15:28.830
就是因为我们这个

15:28.830 --> 15:30.670
这里是不是已经给它转化了

15:30.670 --> 15:31.190
对不对

15:31.550 --> 15:32.750
这里已经给它转换了

15:33.910 --> 15:36.070
就是说我们只需要传递cowars的作标

15:36.070 --> 15:36.510
就可以了

15:36.510 --> 15:40.350
不需要再传递一个web-jr的一个作标了

15:40.350 --> 15:41.470
可以吧

15:41.470 --> 15:42.470
两个

15:42.470 --> 15:43.550
5050

15:43.550 --> 15:46.710
然后5050

15:46.710 --> 15:49.110
再往下

15:49.110 --> 15:50.110
再往下

15:50.110 --> 15:50.870
这样吧

15:54.310 --> 15:55.870
50100

15:55.870 --> 15:56.390
可以吧

15:56.390 --> 15:57.350
50100

15:57.350 --> 15:57.870
然后

15:59.230 --> 15:59.870
再接着

15:59.870 --> 16:01.390
100

16:01.390 --> 16:01.950
可以吧

16:01.950 --> 16:02.950
这是一个三角形

16:02.950 --> 16:03.830
对不对

16:03.830 --> 16:05.790
然后我们现在已经传完了

16:05.790 --> 16:07.030
然后第三个参数

16:07.030 --> 16:08.510
还有第三个参数

16:08.510 --> 16:09.790
是d2

16:09.790 --> 16:10.390
d2

16:10.390 --> 16:10.990
d2

16:10.990 --> 16:11.190
d2

16:11.190 --> 16:11.470
对吧

16:13.470 --> 16:14.750
snatic照吧

16:14.750 --> 16:16.110
t,a,t,i,c

16:16.110 --> 16:17.230
snatic

16:17.230 --> 16:18.750
d,r,a,w

16:18.750 --> 16:19.790
对吧

16:19.790 --> 16:20.430
ok

16:20.430 --> 16:22.270
那我们现在是不是已经把这个写完了

16:22.270 --> 16:22.750
对吧

16:22.750 --> 16:24.830
接下来我们还要做

16:24.830 --> 16:26.430
还要

16:26.430 --> 16:29.030
现在我们看一下我们这个内部的一个变化吧

16:29.030 --> 16:31.670
刚刚我是不是已经输完数据了

16:31.670 --> 16:32.510
然后你可以看一下

16:32.510 --> 16:34.390
我缓冲区对象里面已经有数据了

16:34.390 --> 16:34.750
对吧

16:34.750 --> 16:35.910
是变成这样了

16:35.910 --> 16:36.710
外面这样里面

16:36.710 --> 16:38.110
缓冲区对象

16:38.110 --> 16:40.670
它里面是有数据的

16:40.670 --> 16:42.710
然后接下来我们是不是应该把这个

16:42.710 --> 16:44.110
缓冲区

16:44.110 --> 16:45.950
缓冲区对象拿过来用了

16:45.950 --> 16:46.230
对吧

16:46.230 --> 16:47.510
里面的数据拿过来用

16:47.510 --> 16:48.750
怎么来用呢

16:48.750 --> 16:50.510
我们就需要

16:50.510 --> 16:53.790
首先要需要把我们这个数据分配给谁

16:53.790 --> 16:55.950
就是在顶点着册器中

16:55.950 --> 16:59.390
我们哪一个变量用我们这个数据

16:59.390 --> 16:59.750
可以吧

16:59.750 --> 17:01.310
哪一个变量用我们这个数据

17:01.310 --> 17:02.310
我们通过这个方法

17:02.310 --> 17:04.030
or tax attribute

17:04.030 --> 17:04.470
这个吧

17:04.470 --> 17:05.990
没有语诺

17:05.990 --> 17:07.070
主意

17:07.070 --> 17:09.630
attribute pointer 这个方法

17:09.630 --> 17:12.550
然后它会传递这么几个参数

17:12.550 --> 17:13.830
参数比较多

17:13.830 --> 17:15.110
然后我给它放大一点

17:15.110 --> 17:16.790
可能大家看不清是吧

17:16.790 --> 17:17.870
参数比较多

17:17.870 --> 17:18.830
第一个参数

17:18.830 --> 17:21.310
代表的是你要分配的一个存储位置

17:21.310 --> 17:22.030
其实说白了

17:22.030 --> 17:23.310
就是你获取到之前

17:23.310 --> 17:26.670
我们获取到的这个顶点的一个位置

17:26.670 --> 17:26.990
对吧

17:26.990 --> 17:29.990
那个顶点位置的这个变量

17:29.990 --> 17:33.860
我们获取到的顶点位置这个变量

17:33.860 --> 17:35.900
然后第二个是size

17:35.900 --> 17:37.860
代表的是每一个顶点

17:37.860 --> 17:40.020
我们刚才写的这个数据

17:40.020 --> 17:41.500
它的一个分量数

17:41.500 --> 17:42.100
那理解吧

17:42.100 --> 17:43.900
每一个顶点它的一个分量数

17:43.900 --> 17:46.940
那我们要写在这个作标里面

17:46.940 --> 17:47.340
对吧

17:47.340 --> 17:48.660
就是位置这个里面

17:48.660 --> 17:50.340
我们位置是不是这块有position

17:50.340 --> 17:50.620
对吧

17:50.620 --> 17:51.940
这个position

17:51.940 --> 17:52.700
我们来写一下

17:52.700 --> 17:53.860
在这块直接写下

17:53.900 --> 17:55.740
那我这个账函数就不需要了

17:55.740 --> 17:56.740
在这都写了

17:56.740 --> 17:57.140
来

17:57.140 --> 17:59.180
jl点

17:59.180 --> 17:59.780
jl点

17:59.780 --> 18:01.700
war tax

18:01.700 --> 18:03.340
war tax

18:03.340 --> 18:04.780
叫itribute

18:04.780 --> 18:05.220
对吧

18:05.220 --> 18:06.060
我看一下

18:06.060 --> 18:07.460
war tax

18:07.460 --> 18:08.740
itribute

18:08.740 --> 18:10.340
ponder

18:10.340 --> 18:12.580
attribute

18:12.580 --> 18:14.020
pr

18:14.020 --> 18:15.220
对吧

18:15.220 --> 18:16.500
然后第一个参数

18:16.500 --> 18:17.740
第一个参数的location

18:17.740 --> 18:18.220
对不对

18:18.220 --> 18:20.180
是它的一个存储位置

18:20.180 --> 18:22.780
就是我们这个a-position

18:22.780 --> 18:25.020
这个a-position

18:25.020 --> 18:26.220
然后第二个参数是什么

18:26.220 --> 18:27.620
第二个参数是一个size

18:27.620 --> 18:28.100
对吧

18:28.100 --> 18:31.100
是我们在这个环冲区里面拿的

18:31.100 --> 18:32.540
这个数据

18:32.540 --> 18:36.540
就是作为这个环冲区里面拿的数据的个数

18:36.540 --> 18:37.740
就是每一个顶点

18:37.740 --> 18:40.380
每一个顶点拿的数据的个数

18:40.380 --> 18:42.700
并且这个数据

18:42.700 --> 18:45.420
还是描述我们这个顶点位置的

18:45.420 --> 18:45.780
对吧

18:45.780 --> 18:47.260
那我们这是不是就是两个

18:47.260 --> 18:47.820
对不对

18:47.820 --> 18:48.380
两

18:48.380 --> 18:50.380
那我们这块写点二

18:50.380 --> 18:51.140
再接着

18:51.140 --> 18:52.220
第三个参数

18:52.220 --> 18:53.340
它是一个type

18:53.340 --> 18:55.100
这个type代表是这个

18:55.100 --> 18:58.140
你的数据类型

18:58.140 --> 18:59.580
数据的一个类型

18:59.580 --> 19:01.620
那我们要的是不是一个浮电型的

19:01.620 --> 19:01.980
对吧

19:01.980 --> 19:03.180
我们要的是一个浮电型

19:03.180 --> 19:05.180
那我们这块就可以传递一个浮电型的

19:05.180 --> 19:08.300
FR OET

19:08.300 --> 19:08.620
来

19:08.620 --> 19:10.740
我们再接着往下

19:10.740 --> 19:11.420
再接着往下

19:11.420 --> 19:11.940
第三

19:11.940 --> 19:13.020
第四个参数

19:13.020 --> 19:15.380
代表的是是否归一化

19:15.380 --> 19:16.780
数据是否归一化

19:16.780 --> 19:18.660
那这个数据是否归一化

19:18.660 --> 19:23.220
它的用处一般是在这个无符号整形里面

19:23.260 --> 19:25.380
那它这个是否归一化

19:25.380 --> 19:26.780
到底代表什么意思呢

19:26.780 --> 19:28.220
它代表的就是

19:30.460 --> 19:32.100
如果我们的数据

19:32.100 --> 19:34.420
如果我们的数据超过了

19:36.100 --> 19:37.180
超过了

19:37.180 --> 19:39.540
超过了我们这个0到1之间

19:39.540 --> 19:43.980
并且它还要是在我们这个数据类型之内

19:43.980 --> 19:44.580
了解吗

19:44.580 --> 19:45.820
数据类型之内

19:45.820 --> 19:49.580
它会把你这个数据转化成0到1之间

19:49.580 --> 19:51.620
或者是-1到1之间的数

19:51.780 --> 19:54.420
那是0到1还是-1到1就看的类型了

19:54.420 --> 19:57.540
是有符号的还是无符号的

19:57.540 --> 19:58.900
可以吧

19:58.900 --> 20:02.180
那这是这个是否归一化

20:02.180 --> 20:03.260
再多说一句

20:03.260 --> 20:04.460
这个是否归一化

20:04.460 --> 20:05.980
它是

20:05.980 --> 20:07.420
这个

20:07.420 --> 20:10.820
适用于所有的这个非浮电数据的

20:10.820 --> 20:12.220
非浮电型数据的

20:12.220 --> 20:12.620
也就是说

20:12.620 --> 20:16.580
如果你要是写浮电型的数据的话

20:16.580 --> 20:17.860
它是不好使的

20:17.860 --> 20:18.420
那你解释吧

20:18.420 --> 20:19.260
不管你设置处

20:19.260 --> 20:20.540
还是放浮测不好使的

20:20.580 --> 20:24.140
那如果它要是一个非浮电型数据的话

20:24.140 --> 20:25.900
你在传入False的时候

20:25.900 --> 20:29.820
它会以你自己写的那个作标为基准

20:29.820 --> 20:30.500
那你解释吧

20:30.500 --> 20:33.180
那如果你要是传入的是处

20:33.180 --> 20:35.140
它会

20:35.140 --> 20:37.860
它会根据一个公式

20:37.860 --> 20:39.700
因为不同的这个

20:39.700 --> 20:42.860
是不同的数据

20:42.860 --> 20:44.100
不同的数据

20:44.100 --> 20:45.700
它的一个公式是不一样的

20:45.700 --> 20:48.380
但是它都会根据那个数据

20:49.100 --> 20:51.340
根据那个公式进行一个计算

20:51.340 --> 20:51.940
那你解释吧

20:51.940 --> 20:53.980
那大家如果想要了解这个公式的话

20:53.980 --> 20:55.780
大家可以去网上去找一下

20:55.780 --> 20:57.140
好吧

20:57.140 --> 20:59.900
那我们这里我们就不让它归一化数据了

20:59.900 --> 21:02.940
我们直接就写自己

21:02.940 --> 21:06.740
直接用自己写的这个数据

21:06.740 --> 21:07.820
可以吧

21:07.820 --> 21:09.140
用原始数据

21:09.140 --> 21:09.620
ok

21:09.620 --> 21:11.700
然后这是我们这个归一化的问题

21:11.700 --> 21:12.820
然后最后一个

21:12.820 --> 21:14.340
倒数第二个

21:14.340 --> 21:15.580
才是我叫Tree的

21:15.580 --> 21:16.420
它代表的是

21:16.460 --> 21:19.860
相铃两个顶点间的字节数

21:19.860 --> 21:21.740
相铃两个顶点间的字节数

21:21.740 --> 21:22.820
那我们可以看一下

21:22.820 --> 21:24.780
我们现在这两个顶点之间

21:24.780 --> 21:26.100
我们点两个顶点之间

21:26.100 --> 21:28.100
是不是没有中间没有任何的数据

21:28.100 --> 21:28.740
对不对

21:28.740 --> 21:31.700
也就是说他们两个顶点之间的数据

21:31.700 --> 21:33.140
字节数就是为0了

21:33.140 --> 21:34.740
可以吗

21:34.740 --> 21:36.660
那我们一会儿再来说这个

21:36.660 --> 21:38.980
相铃两个顶点间的数据

21:38.980 --> 21:40.140
字节数的一个问题

21:40.140 --> 21:41.060
可以吧

21:41.060 --> 21:41.500
那好

21:41.500 --> 21:44.300
我们现在先把它写成0

21:44.340 --> 21:46.420
先把它写成0了

21:46.420 --> 21:47.940
最后两个到底有什么用

21:47.940 --> 21:48.900
我们一会儿再来说

21:48.900 --> 21:50.220
我前的是不是还少一个

21:50.220 --> 21:51.260
少一个是否归一化

21:51.260 --> 21:51.500
对吧

21:51.500 --> 21:52.500
False

21:52.500 --> 21:56.580
False

21:56.580 --> 21:59.060
然后我们再接着往下

21:59.060 --> 22:00.620
我类型写了

22:00.620 --> 22:02.500
是否归一化写了

22:02.500 --> 22:06.500
然后两个景点间的字节数

22:06.500 --> 22:07.780
然后我这块默认为0

22:07.780 --> 22:08.660
它代表什么意思

22:08.660 --> 22:11.780
其实我这块写0和写字节数

22:11.780 --> 22:14.060
每一位的每一个数据

22:14.060 --> 22:17.460
它的字节数乘以我们这个顶点

22:17.460 --> 22:20.180
当前它的顶点的分量数是一样的

22:20.180 --> 22:25.020
就相当于0和4乘以2

22:25.020 --> 22:26.260
它是一样的

22:26.260 --> 22:27.420
一会儿再来说

22:27.420 --> 22:28.500
它俩为什么是一样的

22:28.500 --> 22:28.820
可以吧

22:28.820 --> 22:30.500
我这块写写0

22:30.500 --> 22:31.340
然后再接着

22:31.340 --> 22:32.060
最后一个

22:32.060 --> 22:34.060
它代表是两个顶点

22:34.060 --> 22:37.540
从指定缓冲区对象中的偏一辆

22:37.540 --> 22:38.020
对不对

22:38.020 --> 22:41.100
它是两个顶点

22:41.100 --> 22:42.300
你要取数据的话

22:42.300 --> 22:43.820
我要取到这个数据

22:43.820 --> 22:46.300
它的一个偏一辆是多少

22:46.300 --> 22:51.300
我是从这块开始取这两个数据

22:51.300 --> 22:52.500
还是从后面这一位

22:52.500 --> 22:54.100
还是取两个数据

22:54.100 --> 22:56.420
我们这个是不是应该是从顶点位

22:56.420 --> 22:58.100
所以我们这块都全是0

22:58.100 --> 23:00.260
然后现在我们是不是已经

23:00.260 --> 23:03.300
已经给它分配完了

23:03.300 --> 23:03.620
对吧

23:03.620 --> 23:05.460
已经分配完这个缓冲区了

23:05.460 --> 23:10.940
缓冲区已经给它分配到每一个编辆身上了

23:10.940 --> 23:11.580
对吧

23:11.580 --> 23:12.980
已经分配到编辆身上了

23:13.020 --> 23:13.940
接下来

23:13.940 --> 23:16.460
我们接下来就要启用这个

23:16.460 --> 23:18.780
启用这个编辆

23:18.780 --> 23:19.860
启用这个编辆

23:19.860 --> 23:20.660
那你解释吧

23:20.660 --> 23:22.260
启用这个编辆

23:22.260 --> 23:24.060
也相当于启用缓冲区

23:25.460 --> 23:25.980
可以吗

23:25.980 --> 23:27.460
也相当于启用缓冲区

23:27.460 --> 23:28.900
然后再说启用缓冲区之前

23:28.900 --> 23:29.620
我们来看一下

23:29.620 --> 23:31.660
我们刚才做的事

23:31.660 --> 23:34.260
刚才就是把这个数据绑定完了之后

23:34.260 --> 23:36.500
然后让这个缓冲区对象

23:36.500 --> 23:38.780
与我们的编辆有一个连接

23:38.780 --> 23:39.180
对不对

23:39.180 --> 23:39.860
有个连接

23:39.860 --> 23:41.060
把它连上

23:41.060 --> 23:42.500
但是它有个开关

23:42.500 --> 23:43.180
那这个开关

23:43.180 --> 23:44.180
我们需要给它闭上

23:44.180 --> 23:47.620
它才能真正的进行一个连接

23:47.620 --> 23:48.020
对吧

23:48.020 --> 23:49.100
真正的进行一个连接

23:49.100 --> 23:50.940
那这个闭上怎么办呢

23:50.940 --> 23:52.100
还是通过一个方法

23:52.100 --> 23:55.260
叫enable word tax re

23:55.260 --> 23:57.500
那这个前面还有一个

23:57.500 --> 23:58.380
还有个值

23:58.380 --> 23:59.460
就叫这个

23:59.460 --> 24:01.300
来我写一下吧

24:01.300 --> 24:02.380
这块

24:02.380 --> 24:03.140
我们用的话

24:03.140 --> 24:05.180
我们需要写上这个类型

24:05.180 --> 24:06.020
jr点

24:06.020 --> 24:10.380
enable b a n a b re

24:10.380 --> 24:10.660
对吧

24:10.700 --> 24:12.940
enable word tax re

24:12.940 --> 24:13.860
t ex

24:13.860 --> 24:16.340
然后itbttri b

24:16.340 --> 24:19.300
因为我们这是itb的一个

24:19.300 --> 24:21.980
因为我们这是itb的类型的数据

24:21.980 --> 24:22.460
对不对

24:22.460 --> 24:24.380
所以我们这块必须要加上itb

24:24.380 --> 24:25.780
然后re

24:25.780 --> 24:27.460
r2以外

24:27.460 --> 24:29.580
a r2以外

24:29.580 --> 24:30.100
可以吧

24:30.100 --> 24:33.780
然后我们把这个location传进去

24:33.780 --> 24:35.100
就是a just position

24:35.100 --> 24:35.820
可以吧

24:35.820 --> 24:36.780
然后我们接下来

24:36.780 --> 24:37.460
绘制一下

24:37.460 --> 24:38.340
就是通过

24:38.340 --> 24:39.020
jr点

24:39.020 --> 24:40.660
dr is

24:40.660 --> 24:41.980
dr a w

24:41.980 --> 24:46.230
dr a w

24:46.230 --> 24:46.670
绘制

24:46.670 --> 24:47.710
然后绘制的话

24:47.710 --> 24:49.910
我们这里是不是就需要传计三角形了

24:49.910 --> 24:50.950
对不对

24:50.950 --> 24:53.270
这都需要传三角形了

24:53.270 --> 24:54.470
三角形是不是就是这个

24:54.470 --> 24:55.470
trangle

24:55.470 --> 24:57.470
trangles对吧

24:57.470 --> 24:58.590
应该是jr点

24:58.590 --> 25:01.470
t r i a n g r e s

25:01.470 --> 25:03.190
然后第二个参数

25:03.190 --> 25:05.230
是你这个

25:05.230 --> 25:05.910
然后我们看一下

25:05.910 --> 25:06.550
再回过头来

25:06.550 --> 25:07.790
看一下第二参数

25:07.790 --> 25:09.030
从哪个顶点开始回制

25:09.030 --> 25:09.350
对吧

25:09.350 --> 25:10.830
那我们从第零个顶点回制

25:10.830 --> 25:11.830
对不对

25:11.830 --> 25:13.790
然后最后

25:13.790 --> 25:14.430
最后一个

25:14.430 --> 25:15.350
绘制这个图形

25:15.350 --> 25:16.990
我们需要用到的顶点数

25:16.990 --> 25:18.430
那这是三个对不对

25:18.430 --> 25:19.630
我们现在来看一下

25:19.630 --> 25:20.030
是不是

25:20.030 --> 25:21.590
是不是绘制出来了

25:21.590 --> 25:22.910
打开

25:22.910 --> 25:23.150
哎

25:23.150 --> 25:23.950
是不是出来了

25:23.950 --> 25:24.670
看到了吗

25:24.670 --> 25:25.510
这一块

25:25.510 --> 25:27.310
看到这一了吗

25:27.310 --> 25:29.470
可以看到吧

25:29.470 --> 25:30.110
看的是不是

25:30.110 --> 25:31.710
这个颜色有点

25:31.710 --> 25:32.630
不是很好看

25:32.630 --> 25:32.950
对吧

25:32.950 --> 25:34.830
这颜色不是很

25:34.830 --> 25:36.150
那个

25:36.150 --> 25:37.390
很炸眼

25:37.430 --> 25:38.670
我们刷新用红色

25:38.670 --> 25:39.510
是不是会好一点

25:39.510 --> 25:39.790
对吧

25:39.790 --> 25:40.790
用红色好一点

25:40.790 --> 25:41.590
但报了个错

25:41.590 --> 25:42.590
班里万特也是

25:42.590 --> 25:43.230
脑底饭

25:43.230 --> 25:45.270
我是不是把这个班里万特

25:45.270 --> 25:46.230
哎呀

25:46.230 --> 25:48.790
我是把班里万特给删掉了

25:48.790 --> 25:49.390
对不对

25:49.390 --> 25:50.310
猪尸掉了

25:50.310 --> 25:54.110
然后我们把这个给删掉吧

25:54.110 --> 25:55.270
或者这块猪尸吧

25:55.270 --> 25:56.950
这个猪尸吧

25:56.950 --> 25:57.470
可以吧

25:57.470 --> 25:58.270
那我们现在是不是

25:58.270 --> 25:59.710
就实现了一个三角形

25:59.710 --> 26:00.390
再刷新一下

26:00.390 --> 26:01.030
它就没有了

26:01.030 --> 26:02.830
对吧

26:02.830 --> 26:03.590
这回是不是就没有

26:03.590 --> 26:05.350
实现了这个三角形

26:05.350 --> 26:06.710
那我们再回过头来

26:06.710 --> 26:08.710
再说一下

26:08.710 --> 26:09.710
再说一下

26:09.710 --> 26:11.550
最后两个参数

26:11.550 --> 26:13.230
这两个参数的一个问题

26:13.230 --> 26:14.030
但还说

26:14.030 --> 26:15.350
倒数第二个参数

26:15.350 --> 26:16.630
倒数第二个参数是什么呢

26:16.630 --> 26:17.310
倒数第二个参数

26:17.310 --> 26:18.870
我们再回过头来看一下

26:18.870 --> 26:20.630
好

26:20.630 --> 26:21.470
倒数第二个参数

26:21.470 --> 26:22.430
它说的是这个

26:22.430 --> 26:24.270
相铃两个顶面间的字节数

26:24.270 --> 26:24.630
对吧

26:24.630 --> 26:26.670
那这个参数到底有什么问题

26:26.670 --> 26:28.830
那我们都知道

26:28.830 --> 26:31.110
我在会职一个点的时候

26:31.110 --> 26:32.230
一个顶点的时候

26:32.230 --> 26:34.070
那顶点的一些信息

26:34.070 --> 26:35.830
那除了

26:35.870 --> 26:37.310
除了我们的这个

26:37.310 --> 26:39.070
顶点坐标之外

26:39.070 --> 26:40.550
就是它的位置坐标之外

26:40.550 --> 26:42.110
是不是还可能有这个

26:42.110 --> 26:43.470
如果你要是会是点的话

26:43.470 --> 26:45.550
它可能还有这个点的大小

26:45.550 --> 26:46.230
对不对

26:46.230 --> 26:48.790
例如我这块会是一个点

26:48.790 --> 26:49.550
我这块写的是

26:49.550 --> 26:50.230
Points

26:50.230 --> 26:52.350
Punts

26:52.350 --> 26:54.270
Points

26:54.270 --> 26:56.310
Punts

26:56.310 --> 26:57.350
那这样的话

26:57.350 --> 26:58.070
我们刷新一下

26:58.070 --> 26:58.990
你看

26:58.990 --> 26:59.910
它现在是这么大

26:59.910 --> 27:00.150
对吧

27:00.150 --> 27:00.470
这么大

27:00.470 --> 27:00.870
为什么呢

27:00.870 --> 27:01.630
就是因为我们的

27:01.630 --> 27:02.230
Points

27:02.230 --> 27:02.710
Size

27:02.710 --> 27:03.950
我是不是设认10了

27:03.950 --> 27:05.150
对吧

27:05.190 --> 27:06.430
就好像10了

27:06.430 --> 27:08.350
那我如果想设置

27:08.350 --> 27:11.430
多个不同大小的这个点

27:11.430 --> 27:12.550
那这个点的大小

27:12.550 --> 27:16.150
我是不是就需要重新的去传进去

27:16.150 --> 27:16.550
对吧

27:16.550 --> 27:18.310
这里就需要传进去了

27:18.310 --> 27:19.710
那我们上面就需要

27:19.710 --> 27:20.590
你声明一下

27:20.590 --> 27:22.030
Float

27:22.030 --> 27:23.310
来个FROET

27:23.310 --> 27:24.270
Float

27:24.270 --> 27:26.270
来一个

27:26.270 --> 27:27.150
前面应该是

27:27.150 --> 27:27.670
Astribute

27:27.670 --> 27:27.950
对吧

27:27.950 --> 27:28.830
Astribute

27:28.830 --> 27:30.990
然后Float

27:30.990 --> 27:31.790
Size

27:31.790 --> 27:32.790
对不对

27:32.790 --> 27:36.120
Points size

27:36.120 --> 27:36.680
可以吧

27:36.680 --> 27:37.640
然后我们这块复职

27:37.640 --> 27:38.480
就是Points size

27:38.480 --> 27:41.000
对吧

27:41.000 --> 27:42.600
然后我们需要传递这个大小

27:42.600 --> 27:42.920
对吧

27:42.920 --> 27:43.800
那每一个点

27:43.800 --> 27:45.040
大小都不一样的话

27:45.040 --> 27:46.800
我的点

27:46.800 --> 27:49.080
每一个点

27:49.080 --> 27:50.040
它的一个大小

27:50.040 --> 27:53.120
是不是也是它自己顶点的一个性质

27:53.120 --> 27:53.520
对不对

27:53.520 --> 27:54.760
顶点的一个属性

27:54.760 --> 27:56.120
那我们就可以把这个点

27:56.120 --> 27:58.520
也存在这个缓中区当中去

27:58.520 --> 27:59.640
例如我例如

27:59.640 --> 28:01.560
第一个点是10.0

28:01.560 --> 28:05.040
第二个点是20.0

28:05.040 --> 28:05.880
第三个点

28:05.880 --> 28:08.480
是30.0

28:08.480 --> 28:09.480
可以吗

28:09.480 --> 28:10.800
我就希望的是

28:10.800 --> 28:11.800
第三个值

28:11.800 --> 28:15.200
它是这个顶点的一个

28:15.200 --> 28:16.520
顶点的一个大小

28:16.520 --> 28:17.840
那我们应该怎么来做

28:17.840 --> 28:20.400
我这个获取再过来

28:20.400 --> 28:21.240
到这

28:21.240 --> 28:24.240
这块是不是要往我的

28:24.240 --> 28:25.800
这个存储位置上

28:25.800 --> 28:27.240
去绑定我的缓充区了

28:27.240 --> 28:27.800
对不对

28:27.800 --> 28:29.200
绑定我的缓充区数据了

28:29.200 --> 28:30.440
绑定我的数据了

28:30.440 --> 28:32.600
那这块绑定的是我们一个位置

28:32.600 --> 28:33.040
对吧

28:33.040 --> 28:35.040
位置我们需要的是几个分量

28:35.080 --> 28:37.080
是不是前两个是代表位置

28:37.080 --> 28:38.120
那我们这块传二

28:38.120 --> 28:38.560
对吧

28:38.560 --> 28:39.920
并且每一个都应该是一个

28:39.920 --> 28:41.920
flow的浮电型的

28:41.920 --> 28:43.360
然后再接下来

28:43.360 --> 28:45.080
第二第三个参数是否归一化

28:45.080 --> 28:45.840
我不让它归一化

28:45.840 --> 28:46.480
就 false

28:46.480 --> 28:47.040
对不对

28:47.040 --> 28:48.480
那第四个参数

28:48.480 --> 28:50.840
第四个参数刚才看的是什么

28:50.840 --> 28:51.480
再过来

28:51.480 --> 28:52.320
第四个参数

28:52.320 --> 28:54.600
是两个顶点间的字结束

28:54.600 --> 28:55.120
对不对

28:55.120 --> 28:55.880
那我们可以看一下

28:55.880 --> 28:57.240
这两个顶点之间

28:57.240 --> 28:58.800
它的字结束多少

28:58.800 --> 28:59.920
字结束是什么样子的

28:59.920 --> 29:03.790
我们画一个图

29:03.790 --> 29:04.910
在这再新增一个

29:07.990 --> 29:08.990
来

29:08.990 --> 29:18.030
再画一下

29:18.030 --> 29:19.030
这样不好再重

29:19.030 --> 29:20.030
这么画

29:20.030 --> 29:22.030
画几个方块

29:22.030 --> 29:23.030
可以吧

29:23.030 --> 29:24.030
每个方块

29:24.030 --> 29:26.030
带一个每个点的一个

29:28.030 --> 29:30.030
每个顶点的 x y 做标

29:33.600 --> 29:34.600
我就把我所有的数据都

29:34.600 --> 29:35.600
摆在这

29:35.600 --> 29:37.600
可以把我所有的数据

29:37.600 --> 29:38.600
我一共几个

29:38.600 --> 29:39.600
刚才是九个是吧

29:39.600 --> 29:41.600
2468

29:41.600 --> 29:43.600
2468

29:43.600 --> 29:44.600
还差一个

29:44.600 --> 29:45.600
九个

29:45.600 --> 29:46.600
对不对

29:46.600 --> 29:48.600
然后第一个我输入的是什么

29:48.600 --> 29:49.600
5510

29:49.600 --> 29:50.600
对吧

29:50.600 --> 29:51.600
这里面写的

29:51.600 --> 29:54.620
50

29:54.620 --> 29:58.250
这字体写小一点

29:58.250 --> 29:59.250
14

29:59.250 --> 30:09.880
可以吧

30:11.880 --> 30:12.880
14

30:21.090 --> 30:22.090
这样吧

30:22.090 --> 30:26.940
我再重重重整一下

30:26.940 --> 30:28.940
随便说V一下

30:28.940 --> 30:36.090
OK

30:38.090 --> 30:39.090
OK

30:39.090 --> 30:40.090
5510

30:40.090 --> 30:41.090
对吧

30:41.090 --> 30:42.090
10.0

30:45.680 --> 30:46.680
然后

30:46.680 --> 30:47.680
这是

30:47.680 --> 30:49.680
50100

30:49.680 --> 30:50.680
对吧

30:50.680 --> 30:51.680
100

30:51.680 --> 30:55.180
然后20.0

30:55.180 --> 30:56.180
对不对

30:56.180 --> 30:57.180
然后这是

30:57.180 --> 30:58.180
100

31:00.180 --> 31:01.180
100

31:02.180 --> 31:03.180
30.0

31:03.180 --> 31:04.180
对吧

31:04.180 --> 31:05.180
30.0

31:06.180 --> 31:07.180
OK

31:07.180 --> 31:08.180
是这样的吧

31:08.180 --> 31:09.180
那我的每一个

31:09.180 --> 31:11.180
每一个顶点

31:11.180 --> 31:12.180
每一个顶点

31:12.180 --> 31:14.180
它的大小是不是从这到这

31:14.180 --> 31:15.180
顶点是从这

31:16.180 --> 31:17.180
到这

31:17.180 --> 31:21.160
对吧

31:21.160 --> 31:22.160
从这到这

31:22.160 --> 31:24.160
这是第一个顶点的数据

31:24.160 --> 31:25.160
第二个顶点数据就是这样

31:25.160 --> 31:26.160
到这

31:27.160 --> 31:28.160
对吧

31:28.160 --> 31:29.160
第三个顶点数据

31:29.160 --> 31:30.160
到这

31:31.160 --> 31:32.160
对不对

31:32.160 --> 31:34.160
那每两个顶点数据之间

31:34.160 --> 31:36.160
我们要传的这个值

31:36.160 --> 31:37.160
这个值

31:37.160 --> 31:40.160
也就是每两个顶点数据之间的一个

31:40.160 --> 31:42.160
字结束

31:42.160 --> 31:43.160
那每一个

31:43.160 --> 31:44.160
我们现在画的这个

31:44.160 --> 31:46.160
因为我现在用的是

31:46.160 --> 31:47.160
U

31:47.160 --> 31:49.160
Float32

31:49.160 --> 31:51.160
这个类型化数组对吧

31:51.160 --> 31:52.160
我们可以看一下

31:52.160 --> 31:54.160
Float32的类型化数组

31:54.160 --> 31:55.160
它的每一个元素

31:55.160 --> 31:56.160
占几个字节

31:56.160 --> 31:57.160
它是占四个字节的

31:57.160 --> 31:59.160
也就是说我们这个

31:59.160 --> 32:00.160
在这里

32:00.160 --> 32:01.160
在这里

32:02.160 --> 32:03.160
往上画吧

32:04.160 --> 32:05.160
每一个字

32:08.160 --> 32:09.160
这块

32:09.160 --> 32:12.560
到这

32:12.560 --> 32:13.560
这之间

32:15.560 --> 32:16.560
这之间

32:16.560 --> 32:17.560
它是

32:17.560 --> 32:18.560
四个字节

32:21.000 --> 32:22.000
四

32:22.000 --> 32:23.000
字节

32:23.000 --> 32:26.340
可以吧

32:26.340 --> 32:27.340
这是四字节

32:28.340 --> 32:29.340
OK

32:29.340 --> 32:30.340
然后我们顶点

32:30.340 --> 32:31.340
是不是这一部分

32:31.340 --> 32:32.340
对吧

32:32.340 --> 32:33.340
每两个顶点之间

32:33.340 --> 32:34.340
每两个顶点之间

32:34.340 --> 32:35.340
它的一个字结束

32:35.340 --> 32:36.340
怎么来算呢

32:36.340 --> 32:38.340
是从顶点的

32:38.340 --> 32:39.340
骑士的

32:39.340 --> 32:40.340
这个数据

32:40.340 --> 32:41.340
就是这个

32:41.340 --> 32:42.340
第一个顶点

32:42.340 --> 32:43.340
它的一起位置在这

32:43.340 --> 32:44.340
对不对

32:44.340 --> 32:45.340
这是0

32:45.340 --> 32:46.340
对不对

32:46.340 --> 32:47.340
然后第二顶点

32:47.340 --> 32:48.340
在这

32:48.340 --> 32:49.340
这是

32:49.340 --> 32:50.340
这是几

32:50.340 --> 32:51.340
这是一共三个

32:51.340 --> 32:52.340
对吧

32:52.340 --> 32:53.340
三个数据

32:53.340 --> 32:54.340
对吧

32:54.340 --> 32:55.340
那我们

32:55.340 --> 32:57.340
它俩之间的一个字节数

32:57.340 --> 32:58.340
是多少

32:58.340 --> 33:00.340
就是3×4

33:00.340 --> 33:02.340
这就是3×4

33:02.340 --> 33:03.340
它这块

33:03.340 --> 33:05.340
应该是4×3

33:05.340 --> 33:06.340
或者3×4都可以

33:06.340 --> 33:07.340
这个4是怎么来的

33:07.340 --> 33:08.340
4是

33:08.340 --> 33:10.340
每一个数据的字节数

33:10.340 --> 33:12.340
每一个元素的一个字节数

33:12.340 --> 33:13.340
数据里面

33:13.340 --> 33:14.340
每一个元素的字节数

33:15.340 --> 33:16.340
然后

33:16.340 --> 33:18.340
这个3是怎么来的

33:18.340 --> 33:19.340
我们

33:19.340 --> 33:20.340
描述一个顶点

33:20.340 --> 33:22.340
我们用到了多少个数据

33:22.340 --> 33:24.340
包括它的一个顶点数据

33:24.340 --> 33:26.340
还有其他的一个数据

33:26.340 --> 33:27.340
我们在这里

33:27.340 --> 33:28.340
是不是还有

33:28.340 --> 33:29.340
这个顶点的

33:29.340 --> 33:30.340
大小的这个数据

33:30.340 --> 33:32.340
这都算是一个顶点的一些数据

33:32.340 --> 33:33.340
顶点

33:33.340 --> 33:35.340
所有的数据

33:35.340 --> 33:37.340
那是不是这样的话

33:37.340 --> 33:38.340
就是4×3

33:38.340 --> 33:39.340
那这个

33:39.340 --> 33:40.340
这个参数

33:40.340 --> 33:41.340
大家是不是就知道了

33:41.340 --> 33:43.340
然后第三个值

33:43.340 --> 33:44.340
第三个值代表是偏一亮

33:44.340 --> 33:46.340
那它偏一亮是什么意思呢

33:46.340 --> 33:47.340
我通过

33:47.340 --> 33:48.340
是不是可以知道

33:48.340 --> 33:50.340
每一个顶点

33:50.340 --> 33:51.340
每一个顶点

33:51.340 --> 33:52.340
它占的一个字节数

33:52.340 --> 33:53.340
对吧

33:53.340 --> 33:54.340
每一个顶点

33:54.340 --> 33:55.340
它占的一个字节数

33:55.340 --> 33:57.340
所有的数据占的字节数

33:57.340 --> 33:58.340
然后每个数据都占4位

33:58.340 --> 33:59.340
对不对

33:59.340 --> 34:00.340
那我这样

34:00.340 --> 34:01.340
每一个顶点

34:01.340 --> 34:02.340
我就画出来了

34:02.340 --> 34:03.340
对不对

34:03.340 --> 34:04.340
每一个顶点

34:04.340 --> 34:05.340
我通过刚才传入的这个参数

34:05.340 --> 34:06.340
我就可以把

34:06.340 --> 34:07.340
每一个顶点都画出来了

34:07.340 --> 34:08.340
我知道

34:08.340 --> 34:09.340
这一部分代表一个顶点

34:09.340 --> 34:10.340
这一部分代表一个顶点

34:10.340 --> 34:11.340
这一部分代表一个顶点

34:11.340 --> 34:13.340
那哪些数据

34:13.340 --> 34:14.340
每一个顶点

34:14.340 --> 34:15.340
哪些数据

34:16.340 --> 34:17.340
这个

34:18.340 --> 34:20.340
哪些数据代表的是我的

34:20.340 --> 34:21.340
顶点位置

34:21.340 --> 34:23.340
哪些数据代表的是我

34:23.340 --> 34:25.340
这个顶点大小呢

34:25.340 --> 34:26.340
我是不是对需要

34:26.340 --> 34:28.340
还需要再判断一下

34:28.340 --> 34:30.340
这个数据的一个偏一亮

34:30.340 --> 34:31.340
对吧

34:31.340 --> 34:33.340
那我们现在这里

34:33.340 --> 34:34.340
要传的是

34:34.340 --> 34:35.340
我们这个顶点的位置

34:35.340 --> 34:36.340
对不对

34:36.340 --> 34:37.340
顶点的位置的话

34:37.340 --> 34:38.340
是不是应该是

34:38.340 --> 34:39.340
从零开始

34:39.340 --> 34:40.340
当前这个顶点

34:40.340 --> 34:41.340
是不是又拿出来了

34:41.340 --> 34:42.340
五十五十十

34:42.340 --> 34:44.340
又拿出来这三个数据

34:44.340 --> 34:45.340
然后从零号开始

34:45.340 --> 34:46.340
我去拿数据

34:46.340 --> 34:47.340
取几个呢

34:47.340 --> 34:48.340
取两个对不对

34:48.340 --> 34:49.340
因为我们这前面

34:49.340 --> 34:50.340
是两个分量嘛

34:50.340 --> 34:51.340
对不对

34:51.340 --> 34:52.340
然后我们这块就是零

34:52.340 --> 34:53.340
那我们再接着传

34:53.340 --> 34:54.340
传一个

34:54.340 --> 34:55.340
那个Position Size

34:55.340 --> 34:56.340
可以吧

34:57.340 --> 34:58.340
这块

34:58.340 --> 34:59.340
这块我们应该传的什么了

34:59.340 --> 35:00.340
Uniform吧

35:01.340 --> 35:03.340
FORM

35:04.340 --> 35:06.340
然后我们这里传一个

35:07.340 --> 35:09.340
传一个Position Size

35:09.340 --> 35:10.340
对吧

35:10.340 --> 35:11.340
那我们需要获取一下

35:11.340 --> 35:13.340
Position Size的这个位置

35:13.340 --> 35:14.340
拿过来

35:15.340 --> 35:16.340
诶

35:16.340 --> 35:17.340
这应该是它

35:18.340 --> 35:19.340
Position Size

35:19.340 --> 35:23.380
TOSI

35:23.380 --> 35:25.380
这个Pond Size

35:25.380 --> 35:26.380
Pond Size

35:27.380 --> 35:28.380
这块是Pond Size

35:28.380 --> 35:29.380
MNT

35:29.380 --> 35:30.380
SSE

35:30.380 --> 35:31.380
我们就是

35:31.380 --> 35:32.380
I should build

35:32.380 --> 35:33.380
类型吧

35:33.380 --> 35:34.380
对不对

35:34.380 --> 35:35.380
我们是I should build

35:35.380 --> 35:36.380
类型

35:36.380 --> 35:37.380
那我们下面也是I should build

35:37.380 --> 35:38.380
这些错了

35:39.380 --> 35:40.380
ATTRIB

35:41.380 --> 35:44.010
可以吧

35:44.010 --> 35:45.010
然后我们里面

35:45.010 --> 35:47.010
传的是Position Size

35:49.010 --> 35:50.010
可以吧

35:50.010 --> 35:51.010
这是Position Size

35:51.010 --> 35:52.010
然后我们再接着

35:52.010 --> 35:54.010
应该用几个分量

35:54.010 --> 35:55.010
我们Position Size

35:55.010 --> 35:56.010
有几个分量

35:56.010 --> 35:57.010
比如说它的一个大小

35:57.010 --> 35:58.010
有几个分量

35:58.010 --> 35:59.010
就一个吧

35:59.010 --> 36:00.010
对不对

36:00.010 --> 36:01.010
就一个30、10、20

36:01.010 --> 36:02.010
就是吧

36:02.010 --> 36:03.010
都是

36:03.010 --> 36:04.010
这个就是它的一个分量

36:04.010 --> 36:05.010
这属于它的一个分量

36:06.010 --> 36:07.010
然后

36:07.010 --> 36:08.010
接下来

36:08.010 --> 36:09.010
最后一个

36:09.010 --> 36:10.010
偏一亮

36:10.010 --> 36:11.010
我们中间这个

36:11.010 --> 36:12.010
是不是一样的

36:12.010 --> 36:13.010
每一个顶点

36:13.010 --> 36:14.010
它要用多少个数据

36:15.010 --> 36:16.010
多少个字节

36:16.010 --> 36:17.010
那

36:17.010 --> 36:18.010
接下来

36:18.010 --> 36:19.010
它的一个偏一亮

36:19.010 --> 36:20.010
它偏一亮

36:20.010 --> 36:21.010
我拿到这个顶点之后

36:21.010 --> 36:23.010
我是不是需要从1、2

36:23.010 --> 36:24.010
2×4个字节

36:24.010 --> 36:25.010
开始取

36:25.010 --> 36:26.010
对不对

36:26.010 --> 36:27.010
开始取

36:27.010 --> 36:29.010
那我们这块就要传的是

36:29.010 --> 36:31.010
4×2

36:31.010 --> 36:32.010
或者2×4

36:32.010 --> 36:33.010
都可以

36:33.010 --> 36:34.010
我这写错地位置了

36:34.010 --> 36:36.010
这块传应该放在这

36:36.010 --> 36:37.010
放在这

36:37.010 --> 36:38.010
可以

36:38.010 --> 36:39.010
能理解吧

36:40.010 --> 36:41.010
这样我们就可以了

36:41.010 --> 36:42.010
然后最后

36:42.010 --> 36:43.010
我们还需要

36:43.010 --> 36:44.010
让它启用一下

36:44.010 --> 36:45.010
对吧

36:45.010 --> 36:46.010
R点

36:46.010 --> 36:47.010
Able

36:47.010 --> 36:48.010
它

36:48.010 --> 36:50.010
PontSize

36:50.010 --> 36:51.010
Pont

36:51.010 --> 36:52.010
IN

36:52.010 --> 36:53.010
PO

36:53.010 --> 36:54.010
IN

36:54.010 --> 36:55.010
PontSize

36:55.010 --> 36:56.010
OK吧

36:56.010 --> 36:57.010
然后我们这回再来看一下

36:57.010 --> 36:58.010
它的一个顶点

36:58.010 --> 36:59.010
我刷新

36:59.010 --> 37:00.010
发现是不是不一样了

37:00.010 --> 37:01.010
10、23、10

37:01.010 --> 37:02.010
对吧

37:03.010 --> 37:04.010
这就是我们缓冲区

37:05.010 --> 37:06.010
绘制三角形

37:07.010 --> 37:08.010
会绘制了

37:08.010 --> 37:09.010
对不对

37:09.010 --> 37:10.010
那我们再加一点难度

37:10.010 --> 37:11.010
可以吧

37:11.010 --> 37:12.010
我这会再改成

37:12.010 --> 37:13.010
Tranquil

37:13.010 --> 37:14.010
TRI

37:14.010 --> 37:15.010
AMG

37:15.010 --> 37:16.010
RES

37:16.010 --> 37:17.010
再加一点难度

37:17.010 --> 37:18.010
我做一个

37:19.010 --> 37:21.010
交互性的一个三角形

37:21.010 --> 37:22.010
就是我鼠标

37:22.010 --> 37:23.010
鼠标点

37:23.010 --> 37:25.010
然后我点三个点

37:25.010 --> 37:27.010
它会给我形成一个三角形

37:27.010 --> 37:28.010
这样的一个三角形

37:28.010 --> 37:29.010
可以吧

37:29.010 --> 37:30.010
那怎么来实现呢

37:30.010 --> 37:31.010
我们接下来

37:31.010 --> 37:32.010
是不是也需要一个

37:32.010 --> 37:33.010
绑定一个事件

37:33.010 --> 37:34.010
对吧

37:34.010 --> 37:35.010
绑定一个点击事件

37:35.010 --> 37:36.010
这样

37:37.010 --> 37:38.010
那我们也把这个打开吧

37:38.010 --> 37:39.010
把这个打开

37:39.010 --> 37:40.010
然后把这个

37:41.010 --> 37:42.010
把另外打开

37:43.010 --> 37:44.010
接下来

37:44.010 --> 37:45.010
我们这里

37:46.010 --> 37:47.010
要做什么

37:47.010 --> 37:48.010
是不是

37:48.010 --> 37:49.010
要获取到我们

37:49.010 --> 37:51.010
每次点击的一个位置

37:51.010 --> 37:52.010
然后保存下来

37:52.010 --> 37:53.010
对吧

37:53.010 --> 37:54.010
获取到每次点击的

37:54.010 --> 37:55.010
那我们这块有铺匙

37:55.010 --> 37:56.010
对吧

37:56.010 --> 37:57.010
然后我们这个

37:57.010 --> 37:58.010
Size

37:58.010 --> 38:00.010
可以给它写一个

38:00.010 --> 38:01.010
都行

38:01.010 --> 38:02.010
你要想写的话

38:02.010 --> 38:03.010
就可以写

38:03.010 --> 38:04.010
然后我们现在

38:04.010 --> 38:05.010
绘制三角形

38:05.010 --> 38:06.010
对于这个Size

38:06.010 --> 38:07.010
有没有什么意义了

38:07.010 --> 38:08.010
那这个Size

38:08.010 --> 38:09.010
我就放在这吧

38:09.010 --> 38:10.010
可以吧

38:10.010 --> 38:11.010
Size

38:11.010 --> 38:12.010
就10

38:12.010 --> 38:13.010
10.0

38:13.010 --> 38:14.010
可以吧

38:17.010 --> 38:18.010
这里啊

38:18.010 --> 38:19.010
来个Pont

38:20.010 --> 38:21.010
Size吧

38:21.010 --> 38:22.010
这叫Size

38:22.010 --> 38:23.010
Size

38:23.010 --> 38:24.010
来个10.0

38:24.010 --> 38:25.010
可以吧

38:26.010 --> 38:27.010
然后X,Y

38:27.010 --> 38:28.010
做标

38:28.010 --> 38:29.010
我是不是可以拿到

38:29.010 --> 38:30.010
对吧

38:30.010 --> 38:31.010
拿到

38:31.010 --> 38:32.010
然后我们铺匙进去

38:32.010 --> 38:33.010
那这回

38:33.010 --> 38:34.010
我是不是就需要

38:34.010 --> 38:35.010
判断一下Ponts的

38:35.010 --> 38:36.010
一个长度

38:36.010 --> 38:37.010
对吧

38:37.010 --> 38:39.010
如果它要是

38:39.010 --> 38:40.010
是

38:40.010 --> 38:41.010
三的背书的话

38:41.010 --> 38:42.010
对吧

38:42.010 --> 38:43.010
它如果要是

38:43.010 --> 38:44.010
三的背书的话

38:44.010 --> 38:45.010
这个顶点

38:45.010 --> 38:46.010
它是三的背书的话

38:46.010 --> 38:47.010
我才能让它

38:47.010 --> 38:48.010
绘制三角形

38:48.010 --> 38:50.700
对吧

38:50.700 --> 38:51.700
那我们再接下来

38:51.700 --> 38:53.700
绘制三角形

38:53.700 --> 38:54.700
来个

38:54.700 --> 38:55.700
判断一下

38:55.700 --> 38:56.700
F

38:56.700 --> 38:57.700
Ponts

38:58.700 --> 38:59.700
点Lans

39:00.700 --> 39:01.700
取对三取于

39:01.700 --> 39:02.700
对吧

39:02.700 --> 39:03.700
对三取于

39:03.700 --> 39:04.700
等于等于0

39:05.700 --> 39:07.700
它如果等于等于0的话

39:07.700 --> 39:08.700
我们进行一个绘制

39:08.700 --> 39:09.700
对吧

39:09.700 --> 39:10.700
绘制的时候

39:11.700 --> 39:12.700
往缓冲区里面

39:12.700 --> 39:13.700
去添加数据

39:13.700 --> 39:14.700
对不对

39:14.700 --> 39:15.700
然后这些

39:15.700 --> 39:16.700
我们就都需要拿过来了

39:16.700 --> 39:17.700
对吧

39:17.700 --> 39:18.700
拿出来了

39:18.700 --> 39:19.700
看一下

39:19.700 --> 39:20.700
这些

39:20.700 --> 39:21.700
Ctrl-X

39:21.700 --> 39:27.770
都放在这里

39:27.770 --> 39:28.770
那我们绑内缓冲区的位置

39:28.770 --> 39:30.770
应该往上放

39:30.770 --> 39:35.960
往上放

39:35.960 --> 39:36.960
OK吧

39:36.960 --> 39:38.960
然后我们再接着往下

39:38.960 --> 39:40.960
哪里需要我们变

39:40.960 --> 39:41.960
取于我这块Ponts

39:41.960 --> 39:42.960
是不是应该往里放

39:42.960 --> 39:43.960
对不对

39:43.960 --> 39:45.960
这应该是Ponts

39:46.960 --> 39:47.960
Ponts拿过来

39:50.460 --> 39:52.460
然后我们Ponts

39:52.460 --> 39:53.460
Ponts它不是一个数组

39:53.460 --> 39:54.460
对吧

39:54.460 --> 39:55.460
我们需要的是一个数组

39:55.460 --> 39:56.460
那我这会

39:56.460 --> 39:58.460
这会我们就直接铺实

39:58.460 --> 39:59.460
x,y,size

39:59.460 --> 40:00.460
可以吧

40:00.460 --> 40:01.460
这会直接铺实的是

40:01.460 --> 40:04.460
x倒号,y倒号

40:04.460 --> 40:05.460
可以这么传吧

40:05.460 --> 40:07.460
10.0

40:07.460 --> 40:09.460
你可以看好包式

40:09.460 --> 40:10.460
我们在这里打印下

40:10.460 --> 40:11.460
Ponts

40:11.460 --> 40:17.050
Pu,I,T,S

40:17.050 --> 40:18.050
OK

40:18.050 --> 40:19.050
然后我们再接着往下

40:19.050 --> 40:20.050
好像这块成的

40:20.050 --> 40:21.050
是不是就不是3了

40:21.050 --> 40:22.050
不一定是3了

40:22.050 --> 40:23.050
对吧

40:23.050 --> 40:24.050
这块是3

40:24.050 --> 40:25.050
因为我们就是传的是3

40:25.050 --> 40:26.050
那这3

40:26.050 --> 40:27.050
这是3

40:27.050 --> 40:28.050
这是2

40:28.050 --> 40:29.050
没问题

40:29.050 --> 40:31.050
这应该都没有问题

40:31.050 --> 40:33.050
然后我们再往下

40:33.050 --> 40:35.050
这块是一共多少个点

40:35.050 --> 40:36.050
会支

40:36.050 --> 40:38.050
是不是就根据我的Ponts来定

40:38.050 --> 40:39.050
对吧

40:39.050 --> 40:41.050
Ponts对6取于

40:41.050 --> 40:42.050
对

40:42.050 --> 40:43.050
是对级取于

40:43.050 --> 40:44.050
我们看一下

40:44.050 --> 40:45.050
3个

40:45.050 --> 40:46.050
对3取于

40:46.050 --> 40:47.050
对吧

40:47.050 --> 40:48.050
对3取于

40:48.050 --> 40:49.050
Ponts.lans

40:49.050 --> 40:51.050
对3取于

40:51.050 --> 40:52.050
不是对3取于

40:52.050 --> 40:54.050
就除以3取整

40:54.050 --> 40:55.050
对吧

40:55.050 --> 40:57.050
除以3取整

40:57.050 --> 40:59.420
这个

40:59.420 --> 41:02.310
我们就放在这

41:02.310 --> 41:03.310
是不是就可以了

41:03.310 --> 41:04.310
因为我们这块

41:04.310 --> 41:05.310
都已经对3取于为0了

41:05.310 --> 41:07.310
那它这块肯定是

41:07.310 --> 41:08.310
是一个整数

41:08.310 --> 41:09.310
这回来看一下

41:09.310 --> 41:10.310
现在来看一下

41:10.310 --> 41:11.310
刷新

41:11.310 --> 41:12.310
1

41:12.310 --> 41:13.310
1

41:13.310 --> 41:14.310
是不是可以

41:14.310 --> 41:15.310
对吧

41:15.310 --> 41:16.310
刷新

41:16.310 --> 41:17.310
1,2,3

41:17.310 --> 41:19.310
但是发现好像还有Color

41:19.310 --> 41:21.310
这是因为我这块有Color

41:21.310 --> 41:22.310
这块看到了吗

41:22.310 --> 41:23.310
我这里

41:23.310 --> 41:25.310
把这个颜色给去掉了

41:25.310 --> 41:26.310
那我这个颜色

41:26.310 --> 41:27.310
让它变成白色吧

41:27.310 --> 41:28.310
变成00

41:28.310 --> 41:29.310
可以吧

41:29.310 --> 41:31.310
00

41:32.310 --> 41:33.310
刷新

41:33.310 --> 41:34.310
这回

41:34.310 --> 41:35.310
是不是可以

41:35.310 --> 41:38.070
是不是可以

41:38.070 --> 41:40.070
会支很多三角形

41:40.070 --> 41:41.070
1,2,3

41:41.070 --> 41:43.070
可以吗

41:43.070 --> 41:44.070
这是我们这个

41:44.070 --> 41:45.070
会支三角形

41:45.070 --> 41:46.070
鼠标

41:46.070 --> 41:48.070
点击会支三角形

41:48.070 --> 41:50.070
到现在为止

41:50.070 --> 41:51.070
我们三角形

41:51.070 --> 41:52.070
这一堂课

41:52.070 --> 41:53.070
就讲完了

41:53.070 --> 41:55.070
那希望大家回去自己

41:55.070 --> 41:56.070
去实现一下

41:56.070 --> 41:57.070
可以吧

41:57.070 --> 41:58.070
那我把这些

41:58.070 --> 41:59.070
没有用的地方

41:59.070 --> 42:00.070
我们就删一删

42:01.070 --> 42:02.070
OK吧

42:02.070 --> 42:04.070
然后我会

42:04.070 --> 42:06.070
把这个

42:06.070 --> 42:08.070
把这个代码写一点注释

42:08.070 --> 42:10.070
便于大家去观看

42:10.070 --> 42:11.070
可以吧

42:11.070 --> 42:12.070
那咱们今天这堂课

42:12.070 --> 42:13.070
就先到这

