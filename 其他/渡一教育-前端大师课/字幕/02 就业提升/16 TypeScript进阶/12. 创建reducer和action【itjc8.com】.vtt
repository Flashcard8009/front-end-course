WEBVTT

00:00.690 --> 00:03.770
Hello 大家好 我是杜亦教育 为本城城乡时 元俊

00:04.270 --> 00:06.570
这节课呢 我们继续来开发

00:07.090 --> 00:08.370
这个电影系统的客户端

00:08.630 --> 00:10.410
上节课呢 我们做了什么事呢

00:10.670 --> 00:12.970
我们把这个阿加克斯请求搞定了对吧

00:13.230 --> 00:15.290
把这个工程呢 也清理了一下

00:15.790 --> 00:17.590
那么这节课呢 我们做啥呢

00:18.090 --> 00:20.650
咱们还有很多事情要做啊 我们来理一理

00:20.910 --> 00:22.710
还有啥事情要做呢 还有见面

00:22.970 --> 00:24.750
见面 我们动作还没开始动 对吧

00:25.270 --> 00:27.050
还有就是那个路由

00:27.050 --> 00:31.150
就是挑转见面的啊 挑转夜面的 我们也没开始做

00:31.650 --> 00:33.710
然后还有个什么呢 还有一个redux

00:33.970 --> 00:34.990
就是状态管理

00:35.490 --> 00:36.270
状态管理

00:36.770 --> 00:39.330
那么咱们今天做啥呢 这里刻做啥呢

00:39.850 --> 00:40.610
做状态管理

00:40.870 --> 00:42.930
我们先做状态管理 其实无所谓的啊

00:43.190 --> 00:48.290
看个人习惯 如果你习惯做见面 或者是习惯先选路由也行啊也行

00:48.810 --> 00:50.850
我这里呢习惯上先把这个

00:51.110 --> 00:52.650
该管理的状态的管理的

00:53.370 --> 00:57.470
在我们的这个见面里边呢 就是我们的系统里边 我们要先看一下吧

00:58.230 --> 01:01.570
有一个表格 就是显示电影的表格

01:02.330 --> 01:03.870
我们来看一下我们的见面啊

01:06.710 --> 01:08.510
我们的见面里面呢 有这么一个表格

01:08.770 --> 01:14.130
我这里呢就强行给他加一个需求啊 就是说我把这个表格的数据呢

01:14.390 --> 01:19.510
给他放到状态管理里边 放到redux里边 让redux来帮我们管理这个数据

01:20.030 --> 01:22.850
关于这个redux啊 我帮大家回忆一下啊

01:23.310 --> 01:25.430
大家肯定是学过的这个redux

01:26.390 --> 01:28.190
这个redux这个东西呢

01:28.690 --> 01:32.530
首先它是大型项目中使用啊 大型项目中

01:33.050 --> 01:34.830
项目中使用

01:35.090 --> 01:38.410
一般的小型项目或者是微型项目的话呀

01:38.930 --> 01:41.230
一般都用不到它啊 没有必要去使用它

01:41.750 --> 01:43.530
然后另外一个呢就是

01:43.790 --> 01:46.610
redux呢 不是必须使用的 它是可选的

01:46.810 --> 01:49.390
就是说不是所有的 不是啊

01:49.890 --> 01:52.970
不是所有的状态数据

01:53.990 --> 01:56.550
都需要放到啊redux中

01:57.310 --> 02:00.630
这也是redux的官方稳当 特别强调的一点啊

02:00.890 --> 02:02.430
就说不要走火入魔

02:02.690 --> 02:07.050
你什么东西都往redux里面放 其实不一定是好的做法

02:07.550 --> 02:12.550
好 那么我们这里呢 我们这里用redux来管理啥呢 就管理这个表格

02:12.830 --> 02:14.730
因为我们可以认为啊

02:15.090 --> 02:19.170
这个电影的数据啊 它可能会在多个地方显示

02:19.530 --> 02:24.290
所以说呢 它这里面的数据呢 我希望它能够在不同的界面里边

02:24.530 --> 02:26.610
在不同的组件中都可能会使用

02:26.850 --> 02:29.930
所以说我把这一块的数据啊 把它放到redux里边

02:30.690 --> 02:32.530
好 关于redux里边呢 我们

02:33.370 --> 02:35.690
知道它里面有三个东西 一个是action

02:36.690 --> 02:41.050
action用来做什么呢 action是一个平面对象啊 一个平面对象

02:42.050 --> 02:45.330
也就是我们之前常说的plane object

02:45.730 --> 02:47.170
就是一个普通的对象

02:47.650 --> 02:49.290
这个对象中来做什么事情呢

02:49.570 --> 03:01.250
它描述了数据变化的方式

03:01.570 --> 03:05.330
就是这个数据要怎么变化 需要通过action来描述

03:05.730 --> 03:07.490
其实这些东西呢 大家都是学过的

03:07.650 --> 03:10.010
因此呢 我这里简单的提一下

03:10.370 --> 03:11.490
还有一个是reduser

03:12.650 --> 03:16.610
它表示的是数据变异

03:17.010 --> 03:23.530
或者说变化的具体内容

03:24.370 --> 03:26.050
就是数据它怎么去变化

03:27.050 --> 03:29.690
你给我一个action 那么我通过这个action呢

03:29.730 --> 03:31.490
来完成对数据的变化

03:31.530 --> 03:36.490
于是它需要一个action来触发

03:37.450 --> 03:39.810
其实reduser的本质呢 就是一个函数 对吧

03:39.850 --> 03:40.650
大家都学过的

03:41.250 --> 03:42.610
最后呢 是一个store

03:43.050 --> 03:47.890
表示存储数据的仓库

03:48.850 --> 03:51.130
一个应用程序 一个reaction程序呢

03:51.170 --> 03:52.850
只有一个数据仓库

03:53.330 --> 03:55.890
好 那么这里呢 我们首先啊 这几课

03:55.890 --> 03:58.810
我们搞定action和reduser

03:58.850 --> 04:00.010
以及数据的存储

04:00.210 --> 04:01.370
好 我先搞定它

04:02.170 --> 04:04.450
首先呢 我在src这个目录下边呢

04:04.450 --> 04:06.170
我去新建一个文件夹

04:06.170 --> 04:08.410
就给它取名为Redux吧

04:08.970 --> 04:10.570
就这里呢 看大家怎么去做

04:10.610 --> 04:13.810
有些同学呢 喜欢习惯上就直接

04:13.850 --> 04:16.890
在src里边去建什么action文件夹

04:16.930 --> 04:18.530
去建Redux文件夹

04:18.570 --> 04:20.050
那看你自己习惯了啊

04:20.090 --> 04:21.290
我这里习惯上呢

04:21.330 --> 04:23.450
把数据状态的管理

04:23.490 --> 04:25.490
全部放到一个统一的跟目录下边

04:25.530 --> 04:26.530
就是Redux

04:27.090 --> 04:28.410
我在这个文件夹里边呢

04:28.410 --> 04:29.970
我去新建这么一些东西

04:30.010 --> 04:31.450
一个是action

04:31.890 --> 04:33.490
表示这里面存放的是什么呢

04:33.530 --> 04:35.450
存放的是 加个说明

04:35.570 --> 04:36.730
存放的是

04:36.970 --> 04:41.010
action的相关的创建函数

04:43.370 --> 04:44.810
是文件夹中

04:46.170 --> 04:47.330
文件夹中

04:48.050 --> 04:51.570
存放的是action的创建函数

04:52.610 --> 04:53.770
好 这是这个文件夹

04:55.050 --> 04:57.930
下一个 我们写个Reducers

04:59.210 --> 05:00.650
好 也该加个说明

05:02.410 --> 05:03.130
加个说明

05:03.890 --> 05:05.370
表示这个文件夹

05:05.410 --> 05:09.810
此文件夹中存放的是Reducer

05:11.170 --> 05:13.010
好 那么我们一个个来

05:13.370 --> 05:15.610
首先我们要做Redux的话

05:15.650 --> 05:16.970
看个人习惯

05:17.010 --> 05:19.370
有些同学习惯先写action

05:19.410 --> 05:21.450
有些同学先写Reducers

05:21.930 --> 05:23.090
我的做法呢

05:23.090 --> 05:25.930
我的就是习惯上了

05:25.970 --> 05:30.290
我会先写Reducer里边的数据状态

05:31.210 --> 05:32.650
我会先写数据状态

05:33.010 --> 05:35.050
那么我们在开发的过程中

05:35.290 --> 05:37.290
还会把我们的TS

05:37.330 --> 05:39.370
学习的TS融入进去

05:39.810 --> 05:41.450
因为我们毕竟是学TS吧

05:41.490 --> 05:43.330
如果能不能用以前的开发方式

05:43.370 --> 05:45.130
可以 没有任何问题

05:45.650 --> 05:46.570
本身是支持的

05:46.570 --> 05:48.450
因为再说一次

05:48.970 --> 05:50.970
TS 不要嫌我啰嗦

05:51.250 --> 05:54.130
TS它是一个可选的类型系统

05:54.170 --> 05:55.890
因此利用以前的那种方式

05:55.890 --> 05:57.370
开发是没有任何问题的

05:57.610 --> 05:59.530
只不过现在我们加了TS过后

05:59.690 --> 06:03.050
我们希望能够获得更多的类型检查

06:03.610 --> 06:05.250
所以说在Reducers里边

06:05.650 --> 06:08.130
我们这里不是要控制电影的数据

06:09.010 --> 06:10.250
电影的数据状态

06:10.370 --> 06:12.090
我们首先看这个表格

06:12.330 --> 06:14.010
这个表格要用到哪些数据

06:14.250 --> 06:16.210
这个界面中需要哪些数据

06:16.290 --> 06:17.570
那么我们把这些数据

06:18.010 --> 06:19.530
首先给它描述出来

06:19.530 --> 06:20.810
它的类型是啥

06:21.090 --> 06:22.090
先给它描述出来

06:22.530 --> 06:24.010
好 这里我新建一个文件

06:24.170 --> 06:25.130
给它取个名字

06:25.250 --> 06:27.970
叫做MovieReducer

06:28.490 --> 06:29.490
MovieReducer

06:29.810 --> 06:30.690
给它取个名字

06:30.970 --> 06:34.050
好 在这里边我们先来描述一下

06:34.210 --> 06:37.610
用一个接口来描述电影的状态

06:39.170 --> 06:44.290
描述电影列表的状态

06:44.690 --> 06:45.410
内形

06:45.650 --> 06:47.090
我们先把内形给它描述出来

06:47.090 --> 06:48.250
先不着急写数据

06:48.730 --> 06:51.930
我们希望整个Reducers里边的所有东西

06:52.250 --> 06:54.450
都能够获得完整的类型检查

06:55.330 --> 06:58.170
好 如何来描述电影列表的类型状态

06:58.370 --> 06:59.330
我们想一想

06:59.330 --> 07:00.690
就看着这个界面想

07:00.930 --> 07:03.250
我们这个界面中需要哪些数据

07:03.850 --> 07:05.210
首先是一个电影的数组

07:05.730 --> 07:06.730
这个考核无疑问

07:06.930 --> 07:08.370
所以说我们这里

07:08.810 --> 07:10.130
新建一个Interface

07:10.370 --> 07:11.090
直接把它导出

07:12.210 --> 07:13.370
新建一个Interface

07:13.370 --> 07:15.170
给它取个名字叫做

07:15.570 --> 07:18.250
iMovieState

07:18.970 --> 07:20.250
表示一个数据状态

07:20.610 --> 07:21.650
它里边有哪些东西

07:21.970 --> 07:24.450
首先它有一个数组

07:24.450 --> 07:25.930
那么我们用data来表示

07:26.290 --> 07:27.330
这个是个什么数组

07:27.810 --> 07:29.690
就是一个电影的数组

07:30.370 --> 07:32.370
我们上节课是不是写过这个iMovie

07:32.890 --> 07:36.330
iMovie这个描述电影类型的这么一个接口

07:36.450 --> 07:37.490
那么这里可以用上了

07:37.610 --> 07:39.570
它是一个iMovie的数组

07:40.450 --> 07:42.450
好 第一个属性我们就把它写出来了

07:43.290 --> 07:44.130
然后继续

07:45.170 --> 07:46.450
还有哪些东西呢

07:46.610 --> 07:48.210
除了一个电影数组之外

07:48.610 --> 07:51.370
是不是还有什么当前第几页

07:51.610 --> 07:53.650
每页显示多少条

07:54.170 --> 07:55.450
搜索关键字

07:56.050 --> 07:57.450
还有这么一些东西

07:58.570 --> 07:59.770
那么这些东西

07:59.930 --> 08:02.810
我们认为是查询条件

08:03.370 --> 08:05.450
condition查询条件

08:06.010 --> 08:08.330
而查询条件是个什么类型呢

08:08.490 --> 08:09.370
我们来看一下

08:09.370 --> 08:11.570
咱们上节课写到这个类型能不能用

08:12.010 --> 08:12.970
我们来看一下上节课

08:12.970 --> 08:14.770
我们写的comment types

08:15.250 --> 08:16.130
这个类型里边

08:16.330 --> 08:18.050
你看这里不是一个查询条件吗

08:18.210 --> 08:18.730
对不对

08:19.090 --> 08:20.330
这个查询条件

08:20.490 --> 08:21.770
那么这个东西是不是能用

08:22.090 --> 08:22.490
对吧

08:22.530 --> 08:23.170
能用

08:23.970 --> 08:25.570
那么这个查询条件里边

08:25.970 --> 08:28.970
之前是全部是可选的

08:28.970 --> 08:29.410
对吧

08:29.530 --> 08:31.090
全部是可选的参数

08:31.250 --> 08:34.490
那这里我们可以把它稍微控制一下

08:34.490 --> 08:36.930
把它变成全部都是必填的

08:37.330 --> 08:38.970
全部都是必填的

08:39.330 --> 08:40.610
假设我们有这样的需求

08:41.130 --> 08:42.530
我强行给你们加个需求

08:42.770 --> 08:45.130
假设我这里要做一个类型出来

08:45.130 --> 08:48.330
把这个接口变成里边的

08:48.330 --> 08:49.250
所谓的字段

08:49.250 --> 08:50.050
所谓的属性

08:50.290 --> 08:52.210
全部变成必填的

08:52.250 --> 08:53.370
而不是可选的

08:54.090 --> 08:55.290
那么这个时候怎么做呢

08:55.530 --> 08:56.370
这个时候咋做

08:56.770 --> 08:58.730
我们可以比方说写这么一个新的类型

08:59.250 --> 09:00.490
写这么一个新的类型

09:00.770 --> 09:04.770
叫做I movie condition

09:05.210 --> 09:06.050
这个类型

09:06.570 --> 09:07.410
我们用type

09:08.530 --> 09:08.730
好

09:08.730 --> 09:09.370
这个类型

09:11.210 --> 09:14.570
它是根据这个类型演算出来的

09:14.570 --> 09:16.290
根据它来演算出来的

09:16.650 --> 09:18.330
我是强行给你们加的需求

09:19.010 --> 09:20.730
不然的话像那些类型演算

09:20.730 --> 09:21.650
我们就

09:22.130 --> 09:24.010
因为都是可选的类型系统

09:24.010 --> 09:25.530
所以说你可以补这样子写

09:25.690 --> 09:28.370
所以说强加一个需求给你们

09:28.650 --> 09:30.250
因为我们学过了类型演算

09:30.250 --> 09:30.610
对吧

09:30.610 --> 09:31.530
练习一下

09:32.010 --> 09:32.210
好

09:32.210 --> 09:35.050
现在我希望通过它来得到一个新的类型

09:35.050 --> 09:37.770
这个类型跟它的属性是一样的

09:37.970 --> 09:41.010
只是把可选的变成了必填

09:41.290 --> 09:42.050
怎么做呢

09:42.290 --> 09:43.770
因为我们学过的知识

09:44.090 --> 09:45.450
是不是required

09:45.930 --> 09:46.850
required

09:47.370 --> 09:48.970
然后加上一个范形

09:49.250 --> 09:50.050
什么范形的

09:50.050 --> 09:51.370
就是那边接口的类型

09:51.650 --> 09:53.170
IsearchCondition

09:54.530 --> 09:54.730
好

09:54.730 --> 09:56.130
这样子一来到这里面的东西

09:56.130 --> 09:56.530
你看

09:56.530 --> 09:57.890
是不是全部变成必填了

09:58.330 --> 09:59.090
就这么简单

09:59.610 --> 10:00.810
我定义这么一个类型

10:01.210 --> 10:01.610
好

10:01.650 --> 10:02.730
那么这个Condition里边

10:02.890 --> 10:05.850
我们就可以写上ImovieCondition

10:06.890 --> 10:08.130
它有这么一个条件

10:08.570 --> 10:09.450
有条件

10:09.890 --> 10:11.890
除了有条件有数据之外

10:11.890 --> 10:12.890
还有啥呢

10:13.210 --> 10:15.210
条件里面就包含了搜索关键字

10:15.330 --> 10:17.170
包含了当前是第几页

10:17.570 --> 10:18.770
每页显示多少条

10:18.810 --> 10:20.450
所以都有了

10:21.010 --> 10:22.410
还差一些什么东西呢

10:22.410 --> 10:23.930
还差其实还差一个数据

10:23.930 --> 10:25.970
叫做总记录数

10:25.970 --> 10:27.170
总记录数

10:27.610 --> 10:27.810
好

10:27.810 --> 10:29.610
我们这里写上偷偷

10:30.570 --> 10:31.490
总记录数

10:33.090 --> 10:33.570
Lambar

10:34.810 --> 10:37.370
这个表示总记录数

10:37.930 --> 10:39.970
这个上面这个打成注释

10:40.170 --> 10:41.530
这是查询条件

10:42.250 --> 10:42.770
条件

10:42.770 --> 10:43.170
当然了

10:43.170 --> 10:45.010
这个注释其实最好是这样子来的

10:45.450 --> 10:46.370
最好是这样子来的

10:46.770 --> 10:47.810
查询条件

10:50.180 --> 10:50.660
条件

10:50.660 --> 10:52.220
这样子我们在使用的时候

10:52.220 --> 10:56.060
能够可以显示它的这些文档注释

10:57.380 --> 10:59.500
这个是总记录数

11:00.900 --> 11:01.100
好

11:01.100 --> 11:02.860
上边是一个电影的数组

11:03.700 --> 11:04.980
上边是个电影的数组

11:06.380 --> 11:07.260
电影的数组

11:09.750 --> 11:10.350
数组

11:11.510 --> 11:11.950
好

11:12.110 --> 11:13.470
然后我们再想一想

11:13.470 --> 11:14.510
还有没有呢

11:15.310 --> 11:17.190
其实根据你的开发经验的话

11:17.310 --> 11:18.350
这里还可以想到

11:18.350 --> 11:20.110
就算你想不到也没事

11:20.310 --> 11:21.150
我们坐着坐着

11:21.150 --> 11:23.390
你会发现还差一个东西

11:23.830 --> 11:24.870
差一个啥东西呢

11:25.030 --> 11:26.950
是否正在夹展

11:27.350 --> 11:30.990
就是是否正在读取这个电影的数据

11:31.350 --> 11:32.830
所以说我们这里还差一个数据

11:33.350 --> 11:34.590
如果有一点开发经验的话

11:34.590 --> 11:36.390
应该知道这里还差这么一个数据

11:36.390 --> 11:37.230
一声漏定

11:37.750 --> 11:39.070
是否正在夹展

11:39.070 --> 11:39.790
它是个布尔

11:42.040 --> 11:45.200
是否正在夹展数据

11:46.200 --> 11:46.400
好

11:46.400 --> 11:48.960
我们先不着急去开发具体的功能

11:49.480 --> 11:51.280
先把这个内形给他约束好

11:51.480 --> 11:53.960
以前在JS没有内形约束

11:53.960 --> 11:55.200
我们只能闷着头写

11:55.480 --> 11:56.400
写错了的话

11:56.400 --> 11:57.520
他也不会告诉我们

11:57.720 --> 12:00.120
中途写的过程中也没有智能提示

12:00.360 --> 12:03.280
那我希望获得严格的内形检查

12:03.520 --> 12:04.560
在TS里面

12:04.560 --> 12:07.000
我们就可以把这些内形来表述清楚

12:07.880 --> 12:08.080
好

12:08.080 --> 12:09.600
我们首先搞定这么一件事

12:10.040 --> 12:12.920
描述了这么一个电影的状态

12:13.840 --> 12:15.280
电影的状态就是这样的内形

12:15.920 --> 12:17.600
电影状态

12:18.160 --> 12:19.000
就这么一个内形

12:20.000 --> 12:20.560
好了

12:20.560 --> 12:21.480
那么现在呢

12:21.480 --> 12:22.760
我在回过头去

12:23.000 --> 12:24.720
有了这个状态信息过后

12:24.720 --> 12:25.360
我们就知道了

12:25.960 --> 12:27.960
咱们的X应该杂写

12:27.960 --> 12:29.320
我们就非常清楚了

12:29.800 --> 12:30.000
好

12:30.000 --> 12:30.880
我们在X里边

12:31.320 --> 12:34.080
我们新建一个X

12:34.360 --> 12:37.000
给他取个名字叫做Movie

12:37.000 --> 12:38.920
Movie Actions

12:39.280 --> 12:40.600
或者是Movie Actions

12:40.880 --> 12:41.440
写实

12:41.880 --> 12:42.960
建策每个文件

12:43.480 --> 12:43.840
好

12:43.840 --> 12:45.280
Action实际上是什么呢

12:45.280 --> 12:47.560
这里面就写的是一个一个的函数

12:47.800 --> 12:49.360
调用这些函数呢

12:49.360 --> 12:52.960
能够创建一个一个的Action

12:53.400 --> 12:55.320
能够创建一个一个的Action

12:55.320 --> 12:56.840
所以这个文件里面写上了

12:56.840 --> 12:59.800
就是写Action的创建

13:00.640 --> 13:02.320
创建函数

13:03.160 --> 13:03.600
好

13:03.600 --> 13:06.040
比方说我们这里可以写这么一个函数

13:06.480 --> 13:07.200
写这么一个函数

13:07.200 --> 13:07.720
方形

13:09.640 --> 13:10.920
这个Action的名字呢

13:10.920 --> 13:12.560
我们可以这样子给他取一个名字

13:14.160 --> 13:14.800
Get

13:16.440 --> 13:16.920
A

13:17.200 --> 13:18.320
应该是不是AD

13:18.960 --> 13:20.760
这个表格应该是

13:21.280 --> 13:23.360
Save Movies

13:24.120 --> 13:24.640
Action

13:25.320 --> 13:26.600
比方说有这么一个函数

13:27.320 --> 13:29.280
这个函数它反回一个Action

13:30.280 --> 13:31.200
反回一个Action

13:31.680 --> 13:32.600
这个Action呢

13:32.960 --> 13:34.600
它要能够把电影

13:35.560 --> 13:37.360
就是产生一个电影的数组

13:37.880 --> 13:39.840
和电影的总数

13:40.280 --> 13:41.560
产生一个电影的数组

13:41.560 --> 13:42.840
和一个电影的总数

13:42.840 --> 13:44.120
产生这么一个Action

13:44.360 --> 13:45.520
这个Action的将来

13:45.640 --> 13:47.120
会放到Reducer里面

13:47.440 --> 13:49.600
来保存到状态里面去

13:50.680 --> 13:52.480
回忆一下以前的Redux的知识

13:53.120 --> 13:55.640
于是这里我们要反回一个Action对象

13:56.160 --> 13:56.360
好

13:56.360 --> 13:57.800
这个Action对象咋写呢

13:57.800 --> 13:59.400
Action里面是不是有Type

13:59.400 --> 13:59.840
对吧

14:00.120 --> 14:01.000
Type对不对

14:01.320 --> 14:02.320
Type呢

14:02.560 --> 14:03.000
什么呢

14:03.000 --> 14:03.720
什么函数呢

14:03.720 --> 14:05.200
我们比方说给他取这么一个函数

14:05.200 --> 14:07.160
Movie Save

14:08.160 --> 14:09.200
比方说取这么一个函数

14:09.560 --> 14:11.240
表示保存一个电影

14:11.560 --> 14:12.480
保存一个电影

14:13.240 --> 14:14.400
然后呢

14:14.400 --> 14:16.200
我们还是要把电影的数据给他

14:16.200 --> 14:17.120
他才能保存

14:17.840 --> 14:19.960
还要给他写一个Movie是

14:20.400 --> 14:22.120
电影的数据从哪里来了

14:23.200 --> 14:24.520
哪里来电影的数据

14:25.120 --> 14:27.800
回忆一下以前的Action这里的写法

14:28.240 --> 14:28.760
Action呢

14:28.760 --> 14:30.000
我们从这里电影的数据

14:30.000 --> 14:31.800
我也不知道要保存哪些电影

14:32.080 --> 14:34.360
所以说你得通过这个函数

14:34.360 --> 14:36.320
来告诉我电影的数据

14:36.960 --> 14:39.200
然后还要告诉我上了电影的总数

14:39.320 --> 14:40.720
一共有多少个电影

14:40.840 --> 14:43.400
把电影的总数和电影的数据告诉我

14:43.760 --> 14:45.840
那么我这里的Action可以这样子写

14:46.080 --> 14:46.880
Payload

14:47.600 --> 14:49.360
以前不知道大家是不是这种写法

14:49.520 --> 14:51.520
Payload我们表示负债

14:51.840 --> 14:52.840
表示负债

14:54.840 --> 14:55.800
或者叫债贺

14:56.640 --> 14:58.720
就是附加的一些信息

14:58.720 --> 15:01.600
我们的操作类型是Movie Save

15:01.600 --> 15:02.800
要保存一些电影

15:03.080 --> 15:04.240
保存电影要到哪了

15:04.240 --> 15:06.720
保存电影不是加到数据户

15:07.160 --> 15:08.600
现在我们是在田端

15:08.600 --> 15:09.600
是在客户端

15:09.840 --> 15:12.600
把数据保存到仓库里边

15:12.920 --> 15:14.200
保存到这个仓库里边

15:14.200 --> 15:15.000
是这么个意思

15:15.600 --> 15:16.880
我拿到了一些电影

15:16.880 --> 15:19.040
我把这些电影的保存到仓库里边

15:19.440 --> 15:20.760
这是操作类型

15:21.120 --> 15:21.840
操作类型

15:21.840 --> 15:24.040
就到时候将会决定

15:24.040 --> 15:25.920
调用哪个Reducer

15:26.120 --> 15:27.480
Reducer我现在还没有写

15:28.600 --> 15:30.200
然后操作的在后

15:30.240 --> 15:31.040
表示的是

15:31.040 --> 15:33.000
我这个操作要附加哪些信息

15:33.000 --> 15:34.000
我会告诉你

15:35.000 --> 15:36.880
比方说到时候Reducer写的时候

15:37.040 --> 15:38.880
我看到了你的操作类型

15:38.880 --> 15:39.760
是保存电影

15:39.760 --> 15:41.080
那么你得把电影告诉我

15:41.600 --> 15:42.680
有多少个电影

15:43.280 --> 15:44.760
有电影的数据

15:44.760 --> 15:46.040
以及电影的总数

15:46.040 --> 15:46.840
你得告诉我

15:47.360 --> 15:50.040
所以说我把这两个东西放到Payload里边

15:50.160 --> 15:52.400
咱们的Action都统一使用这种格式

15:52.720 --> 15:54.360
比方说我们的系统里边

15:54.480 --> 15:57.440
咱们的Action统一使用这种格式

15:57.560 --> 15:58.440
有一个类型

15:58.440 --> 15:59.320
操作类型

15:59.320 --> 16:01.440
有一个有效在后

16:01.880 --> 16:03.400
把一些附加的信息传过来

16:04.160 --> 16:04.960
好Payload里面

16:04.960 --> 16:06.200
我们可以这样子写

16:07.000 --> 16:07.760
Movies

16:08.920 --> 16:09.520
偷偷

16:10.040 --> 16:10.920
就这样子写

16:12.600 --> 16:14.200
这是以前的写法

16:14.200 --> 16:15.320
现在爆出不用管它

16:15.360 --> 16:17.200
因为它是有隐私的NL类型

16:18.800 --> 16:19.920
这是以前的写法

16:19.920 --> 16:21.200
以前的写法这样子行不行

16:21.400 --> 16:22.480
肯定是可以的

16:22.640 --> 16:24.200
你WDG加个NL

16:24.400 --> 16:25.920
你甚至你觉得加NL不爽

16:25.920 --> 16:28.440
你可以在TXConfig里边

16:28.640 --> 16:30.360
所以把这个去掉就完事了

16:30.600 --> 16:31.560
这个什么哪里

16:32.680 --> 16:33.320
我看一下

16:34.160 --> 16:34.880
在

16:35.360 --> 16:37.240
就是NL

16:37.800 --> 16:39.520
把NL类型去掉

16:39.680 --> 16:40.680
我再加个配置

16:41.520 --> 16:42.240
加个配置

16:42.680 --> 16:43.520
Input

16:44.120 --> 16:44.920
Input

16:45.080 --> 16:45.600
NL

16:45.600 --> 16:46.520
No Input

16:46.520 --> 16:46.920
Sit

16:46.920 --> 16:47.160
NL

16:47.160 --> 16:48.040
把视为Force

16:48.840 --> 16:49.640
把视为Force

16:49.640 --> 16:50.280
不就完了吗

16:50.280 --> 16:50.760
对不对

16:51.040 --> 16:51.720
不就完了吗

16:52.920 --> 16:54.040
你看现在就不爆出了

16:55.120 --> 16:56.240
当然这不是重点

16:56.240 --> 16:57.720
这里爆出是因为我没有导出

16:58.280 --> 16:59.240
我这里没有导出

16:59.600 --> 17:00.400
他要要求

17:01.000 --> 17:03.320
他要求就是每一个文件都是一个模块

17:03.320 --> 17:04.040
他要把导出

17:04.040 --> 17:05.360
一导出就不会爆出了

17:05.960 --> 17:07.040
一导出就不会爆出了

17:07.400 --> 17:08.280
这不是重点

17:08.280 --> 17:10.280
也就是说我这里要说的事情是什么

17:10.680 --> 17:11.600
我这里要说的事

17:11.600 --> 17:12.200
就是说

17:12.720 --> 17:14.040
咱们使用Redux

17:14.240 --> 17:16.400
完全可以使用以前的做法

17:16.400 --> 17:17.480
没有任何问题

17:17.480 --> 17:19.960
只不过不能获得类型检查而已

17:20.240 --> 17:20.880
比方说这里

17:20.880 --> 17:22.320
我返回了这么一个东西

17:22.720 --> 17:24.400
到时候Reducer里面去用的时候

17:24.400 --> 17:25.400
他鬼知道里面

17:25.400 --> 17:26.560
你给了那些属性

17:26.920 --> 17:27.800
早就忘完了

17:27.800 --> 17:28.240
对吧

17:28.360 --> 17:30.320
其实咱们以前不知道同学们

17:30.320 --> 17:31.840
有没有做过那种大型项目

17:32.520 --> 17:34.320
如果你有做个大型项目的话

17:34.600 --> 17:37.160
那么就会深刻的体会到

17:37.600 --> 17:38.760
在写Redux这里

17:38.760 --> 17:40.360
就非常非常的烦

17:40.760 --> 17:43.240
因为我是把很多东西都分开写的

17:43.960 --> 17:45.560
但是这些东西又有联系

17:45.560 --> 17:47.000
你看我写Action的时候

17:47.440 --> 17:49.320
这里返回的Action要用到哪

17:49.560 --> 17:50.920
是不是要用到Reducer里边

17:51.400 --> 17:53.360
写Reducer的时候

17:53.360 --> 17:55.640
我早就忘了Action是什么格式了

17:55.880 --> 17:56.760
早就忘记了

17:57.080 --> 17:58.200
那么又没有类型检查

17:58.200 --> 17:59.200
我只有两边

17:59.200 --> 18:00.280
翻来覆去看

18:00.280 --> 18:00.960
去对照

18:01.080 --> 18:02.440
经常容易出问题

18:03.040 --> 18:04.680
于是现在有了TS

18:04.680 --> 18:06.760
你尽管可以像以前那样子做

18:06.880 --> 18:08.800
但是给你提供了新的机会

18:08.800 --> 18:10.440
就是加入类型检查

18:11.120 --> 18:13.000
我可以对每一个Action

18:13.000 --> 18:14.520
进行类型的检查

18:15.160 --> 18:15.480
好

18:15.480 --> 18:16.320
我们来比方说

18:16.560 --> 18:17.280
比方说

18:18.400 --> 18:20.520
我这里要产生一个Action

18:21.200 --> 18:23.040
那么其实我可以先定一下

18:23.040 --> 18:24.360
这里就是一个类型

18:24.680 --> 18:25.920
其实它就是一个类型

18:26.240 --> 18:27.000
我们先定一下

18:27.000 --> 18:28.640
这个Action的类型不完了吗

18:29.560 --> 18:32.520
其实我们可以自行写一个接口

18:32.520 --> 18:33.520
来进行限定

18:34.720 --> 18:36.080
其实在Reducer里边

18:36.120 --> 18:37.560
你安装好Reducer之后

18:37.800 --> 18:40.200
它里边其实已经给你写好了一些类型了

18:40.640 --> 18:41.360
我们来看一下

18:41.800 --> 18:42.880
比方说我们这里

18:43.720 --> 18:46.080
安装一下Reducer

18:46.360 --> 18:47.600
ADDReducer

18:47.960 --> 18:48.480
安装一下

18:50.780 --> 18:52.300
其实Reducer你安装好了过

18:52.300 --> 18:54.980
它本身就已经帮你写了

18:55.100 --> 18:56.180
它的声明文件了

18:56.180 --> 18:57.420
所以说你不用自己去写

18:57.420 --> 18:59.460
不用去安装什么TypesReducer

18:59.460 --> 19:00.220
不用去安装了

19:00.780 --> 19:02.740
你直接安装好Reducer过后

19:02.740 --> 19:04.420
它就已经带了声明文件了

19:05.180 --> 19:06.020
我们来看一下

19:06.500 --> 19:07.060
来看一下

19:08.460 --> 19:10.300
我们找到Rodemarjust里边去

19:10.300 --> 19:11.740
在Rodemarjust里面去

19:11.740 --> 19:13.900
好我们这里输入Reducer

19:15.460 --> 19:17.540
你看在Reducer里面你看一下

19:17.540 --> 19:20.180
我们是不是有一个index.d.ts

19:20.180 --> 19:20.620
对吧

19:20.940 --> 19:22.940
index.d.ts

19:23.460 --> 19:25.460
那么这个东西其实是啥了

19:25.460 --> 19:28.180
其实就是一个声明文件

19:28.700 --> 19:30.500
它里面声明了很多很多的关于

19:30.500 --> 19:32.460
跟Reducer相关的一些类型

19:32.700 --> 19:33.580
已经声明好了

19:34.220 --> 19:35.460
那么这里面

19:35.460 --> 19:36.980
它其实给我们提供了一个东西

19:37.620 --> 19:39.780
提供了一个东西叫做Action

19:40.340 --> 19:42.020
比方说我这里先随便写

19:42.020 --> 19:43.180
把这个Action打出来

19:43.700 --> 19:44.260
Action

19:45.780 --> 19:48.020
这里我们要把这个Reducer

19:49.180 --> 19:50.100
导入进来

19:50.100 --> 19:51.300
导入一下Reducer

19:53.450 --> 19:53.930
导入一下

19:53.930 --> 19:55.170
它提示不出来

19:55.170 --> 19:56.170
它提示不出来

19:56.530 --> 19:57.130
你看

19:57.650 --> 19:58.410
有这么一个东西

19:58.410 --> 19:59.410
有这么一个东西

19:59.650 --> 20:00.210
Action

20:00.210 --> 20:02.850
我们按F12转到定义看一下

20:03.370 --> 20:06.090
其实Action就是很简单很简单

20:06.450 --> 20:07.370
它是个啥玩意儿了

20:07.370 --> 20:08.610
它就是一个普通接口

20:08.810 --> 20:10.730
它可以定义了这么一个类型

20:11.130 --> 20:12.650
它表示每一个Action

20:12.650 --> 20:14.690
都至少得有一个属性Type

20:15.210 --> 20:16.170
你想是不是这样子

20:16.530 --> 20:19.010
每一个Action都至少得有一个属性Type

20:19.490 --> 20:23.930
而且Type的类型T可以是任何类型

20:23.930 --> 20:26.330
也就是类型T可以是任何类型

20:26.610 --> 20:28.530
当然如果你看着它不爽的话

20:28.530 --> 20:30.450
你完全可以使用别的类型

20:30.650 --> 20:31.930
你自己去写个类型

20:32.210 --> 20:32.730
也没事

20:32.930 --> 20:33.650
也无所谓

20:34.410 --> 20:35.490
那么比方说

20:35.530 --> 20:39.410
咱们定义一个Action的一个标准格式

20:39.410 --> 20:41.010
就是每一个Action

20:41.410 --> 20:44.130
每一个Action都得有一个Type属性

20:44.490 --> 20:46.170
都得有一个Panel的属性

20:46.410 --> 20:48.490
比方说咱们每一个Action

20:48.490 --> 20:50.650
都必须要有这么两个属性

20:50.970 --> 20:52.330
必须要有这么两个属性

20:52.810 --> 20:53.530
那么这个时候

20:53.570 --> 20:54.690
如果我们要定义的话

20:54.690 --> 20:55.490
怎么定义呢

20:55.690 --> 20:56.690
我们可以这样定义

20:57.050 --> 20:58.770
因为这个Action是公共的

20:58.770 --> 21:01.170
所以说我们可以在这里新建一个文件

21:03.850 --> 21:05.210
ComAction

21:05.850 --> 21:06.450
Types

21:08.500 --> 21:09.860
我们建议这么一个文件

21:09.860 --> 21:11.500
我们把各种Action的类型

21:11.540 --> 21:12.700
都放到这个文件里边

21:13.260 --> 21:14.260
就是公共的类型

21:14.260 --> 21:16.860
通用的Action类型都放到这里边

21:16.860 --> 21:18.260
这里面代码几十不多

21:18.260 --> 21:19.540
比方说我们导出

21:19.540 --> 21:20.900
我们可以模仿

21:21.020 --> 21:23.460
模仿Ridder式里边那种鞋发

21:23.620 --> 21:25.060
导出这么一个Action

21:26.700 --> 21:27.220
Interface

21:27.220 --> 21:28.180
那么都以I开头

21:28.980 --> 21:30.460
ActionType

21:31.140 --> 21:33.140
我们Action的类型

21:33.580 --> 21:34.300
Action的类型

21:34.780 --> 21:35.780
或者是不要这个Type

21:35.780 --> 21:36.700
就简洁一点

21:37.500 --> 21:38.500
那么是一个什么类型

21:39.180 --> 21:40.620
给我传两个范形

21:41.380 --> 21:42.620
给我传两个范形

21:43.300 --> 21:43.580
好

21:43.580 --> 21:44.660
第一个范形的是啥

21:45.180 --> 21:47.900
第一个范形表示Type的类型

21:48.500 --> 21:50.740
第二个范形表示Panel的范形

21:50.740 --> 21:52.100
这两个字母里随便取

21:52.620 --> 21:53.340
随便取

21:54.060 --> 21:55.100
而Type的类型

21:55.140 --> 21:57.180
我认为它必须要是一个制幅创

21:57.180 --> 21:58.180
限制一下

21:58.220 --> 21:59.820
你看我们所学的

22:00.700 --> 22:02.300
TS的知识就可以应用进来了

22:03.060 --> 22:03.660
当然了

22:03.660 --> 22:04.420
当然

22:04.700 --> 22:06.220
完全可以不这样做

22:06.380 --> 22:07.500
完全可以不这样做

22:07.540 --> 22:08.860
既然我们在学习TS

22:08.900 --> 22:10.060
我肯定要多讲一点

22:10.060 --> 22:10.460
对吧

22:11.620 --> 22:13.260
T可以必须是一个制幅创

22:13.260 --> 22:14.300
我管理具体是啥

22:14.460 --> 22:15.500
必须是一个制幅创

22:15.860 --> 22:17.500
这个P的类型是啥

22:17.780 --> 22:18.820
可以是任何类型

22:19.260 --> 22:20.260
为什么要传两个

22:20.380 --> 22:21.580
因为I个形里边

22:21.740 --> 22:22.940
它有两个范形

22:23.140 --> 22:23.980
一个是Type

22:24.620 --> 22:25.980
一个是Type这个范形

22:26.380 --> 22:27.220
Type这个范形

22:27.580 --> 22:29.020
它的类型就是T

22:29.740 --> 22:31.860
一个是Panel的范形

22:32.700 --> 22:34.420
这个范形的类型是P

22:35.380 --> 22:37.860
我们做出这么一个公共的类型出来

22:38.460 --> 22:39.980
不管你是啥X型

22:39.980 --> 22:42.660
你都必须要是这两个类型

22:42.980 --> 22:44.260
必须要是这两个类型

22:44.900 --> 22:45.420
好吧

22:45.580 --> 22:46.780
我们做了这么一个

22:46.780 --> 22:48.340
自己定义了这么一个公共的类型

22:48.340 --> 22:48.820
当然了

22:48.820 --> 22:51.340
如果你想用它官方给你提供的类型

22:51.340 --> 22:52.020
也可以

22:52.820 --> 22:55.340
只不过每个项目有自己的情况不同

22:55.580 --> 22:58.140
所以说我这里自己去开发一个X型的类型

22:58.860 --> 22:59.140
好

22:59.140 --> 23:00.140
写好了之后

23:00.820 --> 23:01.780
我们到这边来

23:02.380 --> 23:04.380
来定义每一个的X型

23:04.900 --> 23:05.580
比方说这里

23:06.140 --> 23:07.820
保存一些电影

23:08.380 --> 23:10.620
保存电影这么一个X型

23:11.100 --> 23:12.820
那么它得到了X型的类型是啥

23:13.220 --> 23:14.020
我们来定义一下

23:14.620 --> 23:16.460
我们用类型别名来定义

23:17.260 --> 23:18.060
好比方说

23:18.340 --> 23:20.500
我们给大家取个名字叫做

23:20.740 --> 23:21.620
Save

23:22.100 --> 23:23.100
Movie

23:23.580 --> 23:24.380
Movies

23:25.140 --> 23:25.700
X型

23:26.140 --> 23:27.660
比方说该取这么一个名字

23:28.220 --> 23:29.300
这个X型的类型

23:29.740 --> 23:31.780
是不是可以根据这个接口做出来

23:32.100 --> 23:32.660
对不对

23:33.580 --> 23:34.140
跑了去了

23:34.660 --> 23:36.020
根据这个接口做出来

23:36.460 --> 23:39.860
因为每一个X型都是这个接口的格式

23:39.980 --> 23:41.620
只不过它具体的类型不一样

23:42.020 --> 23:42.460
所以说了

23:42.460 --> 23:44.820
这个类型我们完全可以根据这个接口做出来

23:44.820 --> 23:46.580
iX型

23:46.900 --> 23:47.660
这个接口

23:48.260 --> 23:48.780
好

23:48.780 --> 23:49.660
首先

23:50.140 --> 23:51.180
首先第一个

23:51.500 --> 23:52.820
这个地方跑了一下

23:54.060 --> 23:54.460
这里

23:55.460 --> 23:56.380
这个玩意儿

23:56.700 --> 23:59.300
这个玩意儿的类型是不是可以确定的

23:59.420 --> 24:00.420
是不是可以确定的

24:00.740 --> 24:02.780
我们可以比方说就用这个制服创

24:03.260 --> 24:04.620
就用这个制服创

24:05.180 --> 24:06.580
甚至你把这个制服创了

24:06.580 --> 24:08.180
也可以甚至可以把它做成什么

24:08.180 --> 24:08.980
做成没据

24:08.980 --> 24:09.860
做成没据

24:10.460 --> 24:11.580
就用这个制服创吧

24:12.180 --> 24:12.420
好

24:12.420 --> 24:13.340
那么比方说

24:13.780 --> 24:14.460
第一个类型

24:14.460 --> 24:16.460
T这里用一个字面量类型

24:17.260 --> 24:17.700
好

24:17.700 --> 24:18.300
Doha

24:19.220 --> 24:20.820
然后下一个Panel的类型

24:21.820 --> 24:22.700
Panel的类型

24:22.820 --> 24:24.100
我们可以用一个字面量

24:24.100 --> 24:25.380
字面量对象来做

24:25.700 --> 24:26.700
Panel的类型

24:27.180 --> 24:28.220
Movies

24:28.580 --> 24:29.580
Movies

24:30.380 --> 24:31.340
是一个什么类型

24:31.540 --> 24:33.220
是一个Movies的数组

24:34.220 --> 24:34.620
对吧

24:34.620 --> 24:35.220
是不是

24:36.500 --> 24:37.700
就这个地方的类型

24:37.780 --> 24:39.420
对象Movies的这个数项

24:39.420 --> 24:40.700
是不是一个Movies的数组

24:41.100 --> 24:41.660
对不对

24:41.820 --> 24:43.940
然后Total是一个

24:43.940 --> 24:44.620
什么呢

24:44.700 --> 24:45.700
是一个Number

24:45.940 --> 24:46.860
是一个Number

24:47.940 --> 24:48.300
好

24:48.300 --> 24:49.140
你看一下

24:49.460 --> 24:51.020
咱就把这个类型做出来了

24:51.580 --> 24:52.820
咱们指着它看一下

24:53.580 --> 24:54.540
指着它看一下

24:54.980 --> 24:55.460
好

24:55.500 --> 24:58.020
那么它的类型就相当于是写了一个啥

24:58.020 --> 24:59.700
就相当于是写到这么一个东西

24:59.980 --> 25:01.260
我这样子来解释吧

25:01.540 --> 25:03.420
这个地方的大家可能觉得有点绕

25:03.940 --> 25:06.900
就相当于是下面的代码Movies

25:07.180 --> 25:07.740
来个性

25:08.260 --> 25:09.020
相当于是啥

25:09.420 --> 25:10.700
相当于是下面这个代码

25:11.380 --> 25:12.060
Type

25:13.540 --> 25:14.380
Movie

25:15.540 --> 25:16.420
Sev

25:17.980 --> 25:18.420
不是

25:19.300 --> 25:20.100
对了

25:20.100 --> 25:20.460
没问题

25:21.700 --> 25:22.500
然后呢

25:23.020 --> 25:23.780
Total

25:24.340 --> 25:24.780
不是

25:25.060 --> 25:26.220
Panel的

25:26.500 --> 25:27.340
Panel的

25:27.740 --> 25:28.580
然后是这个

25:32.500 --> 25:34.020
相当于是我写到这么一个类型

25:34.820 --> 25:36.620
这样子写了

25:36.620 --> 25:37.860
它会多写一个属性

25:37.860 --> 25:40.020
多写一个Type和Panel的

25:40.300 --> 25:41.300
那么通过这种写法

25:41.340 --> 25:42.980
就不用写在这样的属性了

25:43.020 --> 25:44.940
因为我们之前已经做了一个翻译型了

25:45.100 --> 25:46.540
已经把这个翻译型做好了

25:46.700 --> 25:48.700
这个翻译型就差类型

25:48.700 --> 25:50.900
你把Type的类型告诉他

25:50.900 --> 25:52.340
把Panel的类型告诉他

25:52.340 --> 25:53.700
那么这个类型就做好了

25:54.220 --> 25:54.660
好

25:54.660 --> 25:56.460
那么这边我们用上面这种写法

25:56.460 --> 25:57.420
更加舒服一点

25:59.100 --> 26:00.660
用下面这个写法

26:01.820 --> 26:02.860
更加舒服一点

26:03.020 --> 26:06.060
直接通过这个Action来制作一个新的类型

26:06.260 --> 26:07.940
我们把两个类型告诉他

26:07.940 --> 26:09.060
一个Type的类型

26:09.060 --> 26:09.740
一个

26:10.260 --> 26:11.660
就是Panel的类型

26:12.180 --> 26:13.420
做出这么一个Action

26:13.660 --> 26:14.180
因此呢

26:14.180 --> 26:15.740
这个函说要返回什么类型

26:15.900 --> 26:17.740
我们就可以在一开始进行约束

26:17.740 --> 26:18.420
返回啥

26:18.460 --> 26:21.100
返回SevMovieAction这么一个类型

26:21.300 --> 26:22.180
返回这个玩意儿

26:23.060 --> 26:23.540
好吧

26:23.540 --> 26:24.700
其实你这一块

26:24.700 --> 26:26.940
你这一块其实还可以给他做一个类型出来

26:27.140 --> 26:28.620
你都还可以给他做一个类型出来

26:28.620 --> 26:29.140
这一块

26:30.180 --> 26:31.140
Panel的类型

26:31.140 --> 26:32.460
还可以继续给他做

26:33.060 --> 26:34.140
比方说我们这里

26:35.300 --> 26:36.580
这里可以这样来写

26:37.220 --> 26:39.340
可以把这个东西再提成一个类型

26:40.060 --> 26:41.020
算了我不写了

26:41.020 --> 26:41.940
算了我不写了

26:41.940 --> 26:42.940
你们自己去搞定

26:42.940 --> 26:43.740
总之呢

26:44.060 --> 26:46.060
我们类型这里是很灵活的

26:46.420 --> 26:47.980
你要把它做得很细的话

26:47.980 --> 26:49.300
是可以继续拆分的

26:49.300 --> 26:50.260
没有任何问题

26:51.180 --> 26:52.340
做好了这么一个Type

26:52.340 --> 26:54.340
那么这里我们就返回了是这个类型

26:54.700 --> 26:54.980
好

26:54.980 --> 26:55.740
参数的类型

26:55.780 --> 26:56.980
我们可以给他限制一下

26:57.180 --> 26:57.900
参数的类型

26:57.900 --> 27:00.020
这里首先要给我一个Movie的数数

27:00.660 --> 27:02.860
头统的是总的记录数

27:02.860 --> 27:03.700
给我一个Number

27:05.020 --> 27:05.260
好

27:05.260 --> 27:06.020
那么这个

27:06.660 --> 27:08.500
Ig型的创建函数是不是写好了

27:09.020 --> 27:10.460
这个创建函数又写好了

27:10.460 --> 27:12.020
CMovie Ig型

27:13.580 --> 27:13.860
好

27:13.860 --> 27:15.300
我们可以用这种方式来导出

27:15.420 --> 27:16.980
到时候我们可以用这种方式来导出

27:17.220 --> 27:18.780
就是统一导出

27:19.020 --> 27:20.220
统一导出一个对象

27:20.500 --> 27:22.780
对象里面包含了各种Ig型的写法

27:23.660 --> 27:24.700
包含了各种Ig型

27:24.860 --> 27:27.540
这样子外面用起来要稍微方便一点

27:27.740 --> 27:28.340
看你自己

27:28.340 --> 27:29.140
看你自己

27:29.460 --> 27:30.860
当然也可以一个一个导出

27:31.660 --> 27:32.820
导出了这么一个对

27:32.820 --> 27:34.780
一个Ig型的创建函数

27:35.300 --> 27:35.460
好

27:35.460 --> 27:36.020
我们继续来

27:37.340 --> 27:37.940
我们想一想

27:38.300 --> 27:40.140
我们要变化这个数据

27:40.300 --> 27:41.820
电影的状态要发生变化

27:41.820 --> 27:45.420
除了加电影加总数之外

27:45.580 --> 27:46.540
还有什么呢

27:46.660 --> 27:47.620
还有这个对吧

27:47.900 --> 27:50.020
设置夹载状态

27:50.380 --> 27:51.780
设置适逢夹载状态

27:51.900 --> 27:53.500
那么这里我们要产生一个Ig型

27:57.260 --> 27:57.460
好

27:57.460 --> 27:58.020
方形

27:58.820 --> 27:59.820
叫做set

28:01.700 --> 28:02.220
楼顶

28:04.260 --> 28:06.660
设置夹载状态的Ig型

28:08.140 --> 28:08.300
好

28:08.300 --> 28:09.180
那么这个Ig型

28:10.100 --> 28:11.940
这个Ig型它要不要参数呢

28:12.140 --> 28:13.060
肯定要一个参数

28:13.060 --> 28:13.380
对吧

28:13.380 --> 28:14.420
你要告诉我

28:14.580 --> 28:15.860
你要设置的状态

28:15.860 --> 28:17.380
是不是正在夹载

28:17.380 --> 28:19.180
是不是夹载中的状态

28:19.500 --> 28:20.540
你告诉我一个布尔

28:22.100 --> 28:23.020
大家可以回忆一下

28:23.020 --> 28:24.140
以前的Redux的知识

28:24.140 --> 28:26.700
我这里不可能把Redux重新讲一遍

28:27.380 --> 28:27.820
好

28:27.820 --> 28:30.740
这里我们有这么一个参数

28:31.180 --> 28:33.380
表示你告诉我是否正在夹载

28:33.380 --> 28:34.780
然后返回了是一个啥

28:35.140 --> 28:36.580
返回了说是又是一个Ig型

28:36.780 --> 28:37.340
对不对

28:37.340 --> 28:39.020
说是我们又可以来做这个内容

28:39.820 --> 28:40.700
我就写到这吧

28:41.260 --> 28:41.900
就写到这

28:42.340 --> 28:43.460
又来做一个Ig型

28:43.700 --> 28:45.340
这个Ig型的名字叫做set

28:45.340 --> 28:47.180
楼顶Ig型

28:47.900 --> 28:48.580
s大型

28:49.940 --> 28:50.380
好

28:50.380 --> 28:52.620
那么这里还是一样的做法

28:52.820 --> 28:54.340
通过这个来创建一个Ig型

28:54.820 --> 28:55.420
好

28:55.900 --> 28:57.140
Type的内容是啥

28:57.140 --> 28:58.180
就一个字面量

28:58.180 --> 28:59.820
Type的内容是一个字面量

28:59.820 --> 29:02.260
就该取个名字叫做movie

29:03.260 --> 29:04.060
set

29:04.060 --> 29:04.740
楼顶

29:05.460 --> 29:06.620
一个字面量内容

29:06.620 --> 29:07.780
有了这些内容约束

29:07.780 --> 29:08.500
你不用担心

29:08.500 --> 29:09.700
它一定不能写错了

29:09.700 --> 29:10.900
一定不会写错了

29:11.500 --> 29:12.340
逗号

29:12.620 --> 29:12.780
好

29:12.780 --> 29:13.540
下一个

29:13.700 --> 29:15.180
payload的内容

29:15.300 --> 29:16.020
是不是布尔

29:16.020 --> 29:16.660
布林

29:17.260 --> 29:18.420
payload的内容

29:18.420 --> 29:19.140
就是布林

29:19.860 --> 29:20.180
好

29:20.180 --> 29:21.420
这里我们把返回

29:21.420 --> 29:22.500
返回这么一个Ig型

29:23.500 --> 29:23.780
好

29:23.820 --> 29:25.620
然后我们就这里就直接返回了

29:26.420 --> 29:26.540
好

29:26.540 --> 29:27.820
你这里如果你写错了

29:28.380 --> 29:29.100
比方说

29:29.100 --> 29:30.580
有些同学可能写成这样子了

29:31.180 --> 29:31.940
写成这样子了

29:31.940 --> 29:33.380
还在撒不打气的在你写

29:33.860 --> 29:34.820
那肯定他要抱错

29:34.940 --> 29:35.860
他会提示你

29:35.860 --> 29:37.180
你这个地方写的有问题

29:37.540 --> 29:40.100
那比方说我们这里还是用使用的Type

29:40.100 --> 29:42.460
打出双硬号过后

29:42.460 --> 29:43.780
你看他马上又提示你的

29:44.100 --> 29:45.140
他为什么能提示你

29:45.140 --> 29:46.940
因为我们现在他清楚的知道

29:46.940 --> 29:48.660
返回的内容一定是这个内容

29:48.860 --> 29:51.100
而这个内容的Type值是一个字面量

29:51.100 --> 29:52.140
你只能取这个值

29:52.780 --> 29:54.140
你看现在是不是限定时了

29:54.620 --> 29:55.140
对不对

29:55.740 --> 29:56.740
然后呢

29:57.060 --> 29:58.060
返回的payload的

29:58.060 --> 29:59.260
你看没有写的话

29:59.260 --> 30:01.100
他会提示你必须要写这个属性

30:01.260 --> 30:03.020
payload必须要是一个布尔

30:03.020 --> 30:03.940
如果你敢写个对象

30:03.940 --> 30:04.980
你马上抱错了

30:05.380 --> 30:06.940
就会获得内容检查

30:06.940 --> 30:07.420
看到没

30:08.140 --> 30:09.860
payload必须是一个布尔

30:09.860 --> 30:10.940
布尔来自于哪呢

30:10.940 --> 30:11.820
就是ease loading

30:13.220 --> 30:16.060
这是设置加载状态的Ig型

30:16.060 --> 30:17.340
我们这里打个注射吧

30:19.500 --> 30:20.420
按他打注射

30:21.020 --> 30:22.140
大家知道这个意思就行了

30:22.300 --> 30:23.740
我命名是比较规范的

30:23.740 --> 30:25.940
大家应该能看得清楚这是什么东西

30:26.660 --> 30:27.260
好下一个

30:27.780 --> 30:28.300
下一个

30:28.300 --> 30:29.420
想想还有啥呢

30:30.300 --> 30:31.060
还有啥呢

30:33.260 --> 30:34.340
电影

30:34.620 --> 30:35.940
保存电影有了

30:35.940 --> 30:37.420
保存总记录书有了

30:37.420 --> 30:38.500
改变总记录书

30:38.940 --> 30:39.620
然后呢

30:39.620 --> 30:41.340
设置加载状态有了

30:41.740 --> 30:43.380
然后还有设置查询条件

30:43.380 --> 30:43.820
对吧

30:43.820 --> 30:45.660
设置各种查询条件

30:45.660 --> 30:46.980
咱们先不管异布

30:47.460 --> 30:48.700
先不管副作用

30:50.060 --> 30:51.980
设置查询条件

30:52.060 --> 30:53.420
我们这里sets

30:53.420 --> 30:54.260
condition

30:54.260 --> 30:55.860
设置查询条件

30:56.300 --> 30:57.660
那么你要给我一个啥呢

30:57.660 --> 30:59.020
肯定要给我一个查询条件

30:59.460 --> 31:00.060
对不对

31:00.060 --> 31:01.700
你肯定要给我一个查询条件

31:02.700 --> 31:03.740
查询条件呢

31:03.740 --> 31:04.580
你得给我

31:04.580 --> 31:05.700
给我一个查询条件

31:05.700 --> 31:06.740
我来帮你设置

31:07.340 --> 31:07.540
好

31:07.540 --> 31:08.300
那么这个时候

31:08.300 --> 31:10.380
这个查询条件是啥类型

31:11.260 --> 31:12.340
查询条件

31:13.740 --> 31:15.940
那么之前咱们做了一个类型

31:16.180 --> 31:17.780
就是imvcondition

31:17.780 --> 31:18.260
对吧

31:18.260 --> 31:19.860
这是查询条件

31:19.860 --> 31:21.340
这是查询条件

31:21.500 --> 31:23.980
那么这里我们可以使用这个类型

31:24.260 --> 31:25.300
但是这个类型里面

31:25.300 --> 31:26.700
所有的都是必选的

31:26.700 --> 31:27.260
你看看

31:27.540 --> 31:28.820
所有的都是必选的

31:29.180 --> 31:31.580
但是我这里改变X型的时候

31:31.700 --> 31:33.220
我希望是可选的

31:33.500 --> 31:34.340
这啥意思

31:34.620 --> 31:35.260
好啥意思

31:35.260 --> 31:37.020
大家可能这里绕不清楚

31:37.020 --> 31:38.020
是因为以前

31:38.020 --> 31:40.580
其实我们已经有这个逻辑了

31:41.020 --> 31:43.380
其实我们以前在做这个Redux的时候

31:43.380 --> 31:44.860
你们是有这个逻辑的

31:45.020 --> 31:47.220
只是你们没有特别去关注它

31:47.420 --> 31:49.020
那么现在有了类型系统过后

31:49.020 --> 31:50.380
我们要用类型来描述

31:50.460 --> 31:52.620
就要特别关注这些隐含的逻辑

31:52.620 --> 31:53.940
因为你不去关注它的话

31:53.940 --> 31:55.300
就非常容易出问题

31:55.780 --> 31:57.020
首先我要解释一下

31:57.020 --> 31:59.100
这里我为什么要把它变成必选

31:59.660 --> 32:00.460
为什么呢

32:00.700 --> 32:02.580
因为如果是可选的话

32:02.580 --> 32:04.820
这就会导致这里的查询条件

32:04.820 --> 32:06.460
有可能会出现缺失

32:07.180 --> 32:08.180
一个状态里边

32:08.180 --> 32:09.700
查询条件一定是奇的

32:09.980 --> 32:11.180
一定是奇的

32:11.380 --> 32:12.900
它不能出现缺失的

32:13.740 --> 32:17.020
那这里为什么不需要可选的

32:17.020 --> 32:17.860
必选的呢

32:17.860 --> 32:19.500
这里为什么又不需要必选的

32:20.220 --> 32:22.020
因为我这里设置条件的时候

32:22.020 --> 32:23.980
可能只设置其中一两个条件

32:24.340 --> 32:25.220
我设置它的条件

32:25.220 --> 32:26.980
不需要把每一个条件全部设置完

32:26.980 --> 32:28.860
比方说我只需要把它翻到第二页

32:28.860 --> 32:31.420
我只需要给它设置一个配级为二就行了

32:31.620 --> 32:33.020
不需要再重新去设置

32:33.020 --> 32:33.940
里面车呀

32:34.140 --> 32:34.940
还有什么的

32:35.100 --> 32:36.780
也不需要再重新去设置什么

32:36.780 --> 32:37.300
那个

32:38.900 --> 32:39.500
替纸

32:40.140 --> 32:41.100
查询关键纸

32:41.460 --> 32:43.940
我也就说这里设置条件的时候

32:43.940 --> 32:45.820
我给这个条件对象

32:45.820 --> 32:47.980
是可以缺少缺金少两的

32:48.140 --> 32:49.620
可以缺少一些属性

32:49.900 --> 32:51.260
但是你在状态里面

32:51.260 --> 32:53.420
必须是不是必须要齐全的

32:53.780 --> 32:55.620
你的状态里面必须要是齐全的

32:56.020 --> 32:57.020
就这么一个逻辑

32:57.540 --> 32:58.500
把个逻辑想通

32:58.500 --> 33:01.140
其实以前的我们也是在开发的过程中

33:01.140 --> 33:02.580
也暗喊了这个逻辑

33:02.580 --> 33:05.380
只是大家没有特别去关注而已

33:05.700 --> 33:06.860
那么现在有了类型系统

33:06.860 --> 33:09.220
我们要特别关注这些逻辑的细节

33:10.580 --> 33:12.260
有了类型系统的严格限制之后

33:12.260 --> 33:13.900
我们就越不容易出错

33:14.740 --> 33:16.620
于是这里我给的查询条件

33:16.620 --> 33:18.740
就是iSearchCondition

33:19.260 --> 33:20.380
就是这个调运条件

33:21.900 --> 33:22.780
得到的是什么

33:22.780 --> 33:23.740
得到的是

33:24.420 --> 33:25.900
我们再来一个x形变

33:26.380 --> 33:31.020
setConditionAction

33:31.740 --> 33:32.700
这里加上Action

33:33.860 --> 33:34.900
这个Action的类型

33:35.340 --> 33:37.340
我们还是通过iAction来做出来

33:37.660 --> 33:38.380
来做出来

33:39.620 --> 33:40.420
Type的类型

33:40.500 --> 33:44.380
给大家设置一下MovieSetCondition

33:44.540 --> 33:45.540
这type的类型

33:46.820 --> 33:50.020
然后Action的附加的东西

33:50.020 --> 33:53.220
就是再后就这个类型

33:53.500 --> 33:54.300
是它的再后

33:55.340 --> 33:56.540
我们做出这么一个类型

33:56.660 --> 33:57.900
然后反回了是咋呢

33:57.900 --> 33:59.020
反回了就是这个Action

33:59.340 --> 34:00.660
Action创建还说吗

34:00.660 --> 34:02.100
那么它反回来肯定是这个Action

34:03.100 --> 34:04.900
那么这个Action我们返回一个

34:05.060 --> 34:05.980
返回一个Action

34:06.340 --> 34:08.700
Type它马上就会提示你只能写这个

34:08.940 --> 34:10.500
没别的写法只能写这个

34:10.900 --> 34:13.300
然后它的条件Payload的

34:13.660 --> 34:14.860
有的时候你写的不小心

34:14.860 --> 34:15.900
你可能写成这个样子的

34:16.820 --> 34:17.620
写成这个样子的

34:17.620 --> 34:18.260
它会爆错

34:18.260 --> 34:19.100
它会提示你

34:19.340 --> 34:20.500
你这个格式不对

34:20.700 --> 34:21.860
因为Action里边

34:21.860 --> 34:23.820
它有一个属性是Payload的

34:23.820 --> 34:24.540
你必须要写

34:24.860 --> 34:26.180
你马上就想起了

34:26.180 --> 34:28.340
我只要用这个属性名

34:29.300 --> 34:29.580
好了

34:29.580 --> 34:31.060
我们又写了一个Action创建函数

34:31.580 --> 34:34.140
我现在把这两个函数放到Reduce上里边

34:34.940 --> 34:37.660
放到这个统一的导出里边

34:38.660 --> 34:40.820
导出什么用起来比较方便一点

34:42.100 --> 34:42.540
好

34:42.540 --> 34:44.700
写的好了这么三个Action了

34:44.980 --> 34:46.100
一个是设置状态

34:46.100 --> 34:48.420
一个是设置条件

34:48.420 --> 34:50.140
一个是设置楼顶状态

34:50.140 --> 34:51.380
一个是设置这个玩意儿

34:51.900 --> 34:52.500
还有啥呢

34:52.500 --> 34:53.020
我们看一下

34:53.420 --> 34:54.140
还有啥呢

34:55.260 --> 34:56.100
还有啥我想想

34:58.260 --> 34:59.500
还有删除对吧

34:59.820 --> 35:02.620
可能要剪掉一个Action

35:02.900 --> 35:05.780
可能要删除掉一个Action

35:06.620 --> 35:07.900
这个删除呢

35:07.900 --> 35:08.660
我们来想一想

35:08.660 --> 35:11.100
删除这里我们再写一个Action

35:11.380 --> 35:12.140
再写一个Action

35:13.100 --> 35:13.740
删个Action

35:14.140 --> 35:16.540
Dynad Action

35:17.060 --> 35:17.940
Dynad Action

35:18.540 --> 35:19.180
给我一个什么

35:19.180 --> 35:20.140
给我一个ID

35:20.740 --> 35:21.900
给我一个ID字幕创

35:22.300 --> 35:25.580
那么我把这个相应的电影给你删掉

35:25.580 --> 35:26.420
给你删掉

35:26.420 --> 35:28.020
当然这个删不是从数据库里面删

35:28.020 --> 35:29.220
不要去想象什么

35:29.220 --> 35:30.820
发生阿加克斯请求

35:31.700 --> 35:33.620
然后去请求数据库

35:33.620 --> 35:35.060
等下给你没关系

35:35.460 --> 35:37.100
这里的删除是指啥

35:37.100 --> 35:38.860
是指从这里删除

35:39.460 --> 35:40.700
是指从这里删除

35:40.700 --> 35:41.940
是这么个意思

35:42.100 --> 35:43.100
从这里删除

35:43.100 --> 35:44.580
从状态里面去删除

35:44.580 --> 35:45.980
就仓库里面去删掉

35:45.980 --> 35:47.500
跟什么数据库那些没关系

35:47.820 --> 35:49.180
注意要保持纯净

35:50.020 --> 35:50.980
那么同样的道理

35:50.980 --> 35:53.020
这里要返回一个Action

35:54.900 --> 35:55.500
这里

35:56.940 --> 35:58.420
应该怎么写Dynad

35:59.260 --> 36:00.940
Dynad Action

36:01.340 --> 36:02.380
那么一样的

36:02.380 --> 36:03.580
我们根据它来做出来

36:04.700 --> 36:05.300
做出来

36:05.660 --> 36:07.940
它的ActionType的内容

36:07.940 --> 36:08.900
给他写一个

36:09.260 --> 36:09.860
Type的内容

36:09.860 --> 36:12.820
那就是MovieDynad

36:13.340 --> 36:13.860
Dynad

36:15.140 --> 36:15.860
然后

36:16.180 --> 36:18.380
它的在后

36:18.380 --> 36:20.060
就是附加的信息

36:20.060 --> 36:20.940
是一个字幕创

36:20.940 --> 36:21.700
也就是ID

36:22.460 --> 36:23.380
也就是这里的ID

36:24.500 --> 36:24.900
好

36:24.900 --> 36:26.020
返回的是这么一个Action

36:26.580 --> 36:27.780
DynadAction

36:28.660 --> 36:29.420
我这里写错了

36:29.420 --> 36:29.740
对吧

36:31.380 --> 36:32.060
重迷迷一下

36:34.180 --> 36:34.700
好到这里

36:34.700 --> 36:36.580
我们返回Type

36:37.540 --> 36:37.900
好

36:38.780 --> 36:39.540
然后

36:39.820 --> 36:40.620
Painload

36:40.620 --> 36:41.860
你只能这样子写

36:41.860 --> 36:42.380
不这样写它

36:42.380 --> 36:42.900
报错

36:43.380 --> 36:43.580
好

36:43.580 --> 36:43.980
这里

36:44.380 --> 36:44.860
到处

36:46.620 --> 36:46.740
好

36:46.740 --> 36:47.140
你看一下

36:47.140 --> 36:48.620
我们现在Action是不是写完了

36:48.820 --> 36:50.460
Action的创建函数写完了

36:50.780 --> 36:52.020
其实我们写的过程中

36:52.020 --> 36:53.140
是不是多了一些代码

36:53.580 --> 36:55.100
肯定会多一些代码

36:55.300 --> 36:56.700
但是多了这些代码了

36:56.700 --> 36:57.500
你不要认为

36:57.500 --> 36:59.580
它浪费了很多时间

36:59.740 --> 37:02.740
比方说我们之前写一个Action的创建

37:02.740 --> 37:04.260
写这些Action的创建函数

37:04.460 --> 37:06.940
咱们之前用了15分钟

37:07.340 --> 37:08.340
写完这个东西

37:08.540 --> 37:09.900
那现在我可能用了

37:10.260 --> 37:11.860
20分钟或者是25分钟

37:11.860 --> 37:12.900
多了10分钟

37:12.900 --> 37:14.020
但是你要知道

37:14.020 --> 37:16.180
我们用这10分钟换来了什么呢

37:16.180 --> 37:17.740
换来了以后写代码

37:17.740 --> 37:19.980
怎么在Reduce里面去处理这些代码的时候

37:19.980 --> 37:21.140
就不会出错了

37:21.140 --> 37:22.260
就不会出问题了

37:22.540 --> 37:24.580
至少什么属性名字写错了

37:24.580 --> 37:26.260
那一型没有

37:26.260 --> 37:27.580
没有比较匹配上

37:27.580 --> 37:28.820
那么这些问题

37:28.820 --> 37:30.500
就不会把它带到运行中了

37:30.620 --> 37:31.820
因此花了些时间

37:31.820 --> 37:33.260
实际上是真的是值得的

37:33.380 --> 37:35.060
而且越是大型的项目

37:35.060 --> 37:36.740
就越需要这个东西

37:38.020 --> 37:40.460
以后大家如果接触了大型项目的话

37:40.460 --> 37:42.260
就能深刻的体会到这一点

37:42.260 --> 37:44.420
没有内询检查是多么的恐怖

37:46.660 --> 37:48.020
那么Action创建函数

37:48.020 --> 37:48.860
咱们写的差不多了

37:48.860 --> 37:51.580
如果可能有遗漏

37:51.580 --> 37:53.420
可能有遗漏的话

37:53.420 --> 37:54.460
我们之后再补吧

37:54.900 --> 37:57.060
现在呢Action写完了之后

37:57.060 --> 37:58.980
我们再来看Reducers

37:59.300 --> 38:00.140
再来看这边

38:00.820 --> 38:02.500
现在有一个电影状态了

38:02.700 --> 38:03.860
有个内询约束了

38:04.940 --> 38:07.140
我们现在再去做什么

38:07.460 --> 38:10.260
再去给他定一个默认的状态

38:10.260 --> 38:11.900
咱们写Reducers不就这样写的吗

38:12.340 --> 38:13.220
还能砸血了

38:13.980 --> 38:15.620
咱们来定一个默认的状态

38:16.460 --> 38:18.340
Default state

38:19.100 --> 38:20.620
默认的状态内询是啥

38:20.900 --> 38:22.860
内询是不是MV state

38:22.860 --> 38:24.060
还能是啥呢

38:24.380 --> 38:24.940
对不对

38:24.940 --> 38:26.100
他只能肯定是这个

38:27.660 --> 38:29.460
他的内询肯定是MV state

38:30.380 --> 38:31.820
那么这里面缺他哪些属性

38:31.860 --> 38:32.980
你指着他去看一下

38:32.980 --> 38:34.060
缺少很多属性

38:34.060 --> 38:34.820
什么data

38:35.540 --> 38:36.140
data

38:36.140 --> 38:36.700
来呗

38:37.460 --> 38:39.980
默认的电影数组是不是空数组

38:40.260 --> 38:40.820
对不对

38:41.220 --> 38:42.420
你看一下data指着他

38:42.420 --> 38:43.860
他告诉你是个MV的数组

38:43.860 --> 38:44.660
你给他个空数组

38:44.660 --> 38:45.220
默认值

38:46.380 --> 38:47.180
默认状态

38:47.500 --> 38:48.060
然后呢

38:48.060 --> 38:48.980
还有啥呢

38:49.340 --> 38:50.140
还有啥呢

38:50.460 --> 38:52.220
还有他会提示你

38:52.220 --> 38:53.300
还有condition

38:53.820 --> 38:55.260
condition这个属性

38:56.220 --> 38:57.140
他是一个啥呢

38:57.140 --> 38:58.300
我们指着他看一下

38:58.660 --> 39:01.060
他是一个Isearch condition

39:01.100 --> 39:03.820
把他变成了所有可选必填的

39:04.140 --> 39:05.420
那么这里呢

39:05.420 --> 39:06.420
复制

39:06.420 --> 39:07.300
复制的时候

39:07.300 --> 39:08.820
还以为要提示你缺失属性

39:08.820 --> 39:09.140
看到没有

39:09.140 --> 39:11.180
缺失配级limit key

39:11.180 --> 39:13.460
我们这些东西就可以根据他的提示

39:13.460 --> 39:14.180
Isearch

39:14.380 --> 39:15.700
默认第一页

39:15.900 --> 39:16.660
然后呢

39:16.660 --> 39:17.380
limit

39:17.380 --> 39:18.620
默认为10

39:18.620 --> 39:20.220
每页显示10条

39:20.220 --> 39:20.900
然后呢

39:20.900 --> 39:22.780
t值查询关键值

39:22.780 --> 39:23.660
默认为

39:24.380 --> 39:24.900
空

39:25.060 --> 39:25.980
默认为空

39:27.100 --> 39:27.620
好

39:27.620 --> 39:28.940
然后咱们再继续

39:28.940 --> 39:30.380
还有哪些属性要写呢

39:30.380 --> 39:31.820
你指着他看一下

39:31.820 --> 39:33.300
还插啥呢

39:33.300 --> 39:34.500
还插

39:34.860 --> 39:36.140
这个头头

39:36.660 --> 39:37.620
还插头头

39:38.340 --> 39:38.980
总

39:39.260 --> 39:40.540
总记录数

39:40.540 --> 39:41.260
头头

39:42.220 --> 39:43.380
那么他是一个

39:43.380 --> 39:44.220
多少值呢

39:44.460 --> 39:45.460
总数为0

39:45.660 --> 39:47.260
比方说一开始的时候

39:47.260 --> 39:48.660
总的记录数为0

39:48.820 --> 39:49.940
还插啥呢

39:50.660 --> 39:52.140
还插一个

39:52.140 --> 39:52.820
is loading

39:52.820 --> 39:53.820
is loading

39:55.540 --> 39:56.340
is loading

39:56.980 --> 39:57.580
我试一下

39:57.700 --> 39:59.860
他能不能自动来生成

40:01.340 --> 40:02.420
不行

40:02.420 --> 40:03.220
不行

40:03.780 --> 40:05.060
不能自动生成

40:05.060 --> 40:06.260
不能自动生成

40:06.820 --> 40:07.220
好

40:07.220 --> 40:08.140
那么这里呢

40:09.660 --> 40:10.700
我们就什么写吧

40:10.700 --> 40:11.540
is loading

40:11.540 --> 40:12.780
把它设为force

40:12.780 --> 40:13.940
适逢正在夹载

40:13.940 --> 40:15.180
默认值为force

40:16.100 --> 40:16.860
OK

40:16.860 --> 40:18.580
那现在我们就搞定了

40:18.580 --> 40:20.580
搞定了这个默认状态

40:20.940 --> 40:21.260
好

40:21.260 --> 40:22.460
有了默认状态之后

40:22.780 --> 40:24.180
我们最后导出的是啥

40:24.180 --> 40:25.740
导出的是一个函数

40:25.740 --> 40:26.380
对不对

40:26.500 --> 40:28.180
导出的是一个函数

40:28.180 --> 40:29.220
就是

40:29.500 --> 40:30.220
move

40:30.260 --> 40:31.660
move这个函数

40:31.860 --> 40:32.780
导出一个函数

40:32.780 --> 40:33.780
就是一个move reduce

40:33.780 --> 40:34.340
这个函数

40:34.780 --> 40:36.420
这个函数可以是个匿名函数

40:36.780 --> 40:37.980
因为它是默认导出

40:38.700 --> 40:38.860
好

40:38.860 --> 40:41.460
这个函数里边是不是要接受一个状态

40:41.700 --> 40:42.900
就之前的状态

40:42.900 --> 40:43.700
你要告诉我

40:44.460 --> 40:45.860
之前的状态告诉我

40:45.940 --> 40:47.340
那么这个状态啥类型

40:48.060 --> 40:49.060
状态啥类型

40:49.900 --> 40:50.580
状态是不是

40:50.580 --> 40:51.860
imove

40:52.260 --> 40:53.500
state这个类型

40:53.660 --> 40:54.260
对吧

40:54.420 --> 40:56.060
imove state这个类型

40:56.420 --> 40:56.660
好

40:56.660 --> 40:58.300
这个状态是不是有默认值

40:58.420 --> 40:59.460
默认值是啥

40:59.620 --> 41:00.780
就是default

41:01.260 --> 41:02.180
state

41:03.380 --> 41:05.660
其实跟以前的写法有多少区别呢

41:05.660 --> 41:06.660
你想一想

41:06.940 --> 41:08.580
跟以前的写法有多少区别呢

41:09.020 --> 41:10.420
无非就是以前写的时候

41:10.420 --> 41:11.140
没有这个玩意儿

41:11.380 --> 41:11.860
对吧

41:11.900 --> 41:12.780
没有这个玩意儿

41:12.980 --> 41:14.180
然后没有这个玩意儿

41:14.340 --> 41:14.940
对不对

41:15.180 --> 41:16.460
那你这里写错就写错了

41:16.460 --> 41:17.700
那你自己慢慢去招呗

41:18.020 --> 41:19.540
那么现在无非就多了这个东西

41:19.540 --> 41:20.460
就多了这个东西

41:20.460 --> 41:21.420
有多少区别呢

41:21.860 --> 41:22.620
没有啥区别

41:22.620 --> 41:23.140
对不对

41:23.420 --> 41:24.500
没有啥区别

41:25.740 --> 41:26.100
好

41:26.100 --> 41:26.940
然后呢

41:27.660 --> 41:29.180
第二个采讼是不是x

41:29.180 --> 41:29.820
对不对

41:30.100 --> 41:31.140
要传一个x

41:31.140 --> 41:31.660
过来

41:32.300 --> 41:32.980
好

41:33.300 --> 41:34.340
这里的x

41:34.340 --> 41:35.500
形是啥类型

41:36.780 --> 41:37.460
这里的x

41:37.460 --> 41:38.420
形式啥类型

41:38.740 --> 41:39.420
想一想

41:42.020 --> 41:42.260
好

41:42.260 --> 41:43.940
要改变一个电影的状态

41:43.940 --> 41:45.100
它总归上通过x

41:45.100 --> 41:45.980
形来触发的

41:46.740 --> 41:48.020
要改变电影的状态

41:48.300 --> 41:49.100
总归要通过x

41:49.100 --> 41:49.820
形来触发

41:50.220 --> 41:51.100
那么这些的x

41:51.100 --> 41:52.620
形是不是有很多种情况

41:52.740 --> 41:53.340
对不对

41:54.180 --> 41:55.460
有很多种情况

41:55.580 --> 41:56.860
它有可能是这个

41:56.980 --> 41:58.260
有可能是通过

41:58.300 --> 41:59.980
有可能内形是这个x

42:00.460 --> 42:01.940
有可能内形是这个x

42:02.100 --> 42:03.060
有可能是它

42:03.180 --> 42:04.220
也有可能是它

42:04.460 --> 42:05.740
是不是有很多种情况

42:06.180 --> 42:06.780
对不对

42:06.780 --> 42:07.940
那么这里呢

42:07.940 --> 42:09.380
我们可以怎么做呢

42:09.620 --> 42:10.500
可以怎么做

42:10.500 --> 42:11.420
其实像这些内景

42:11.420 --> 42:12.980
我们都可以把导出去

42:12.980 --> 42:14.500
导出去那边可能要用的

42:15.180 --> 42:16.500
把这些内形都导出去吧

42:17.540 --> 42:18.100
导出

42:20.910 --> 42:21.950
导出这些内想

42:22.710 --> 42:23.230
好

42:23.230 --> 42:25.190
那么有这么多情况的话

42:25.190 --> 42:26.310
那么我这里呢

42:26.510 --> 42:28.150
就再导出一个内想

42:28.470 --> 42:29.670
再导出一个内想

42:29.910 --> 42:31.030
这个内想的就是

42:31.590 --> 42:33.990
movie actions

42:34.870 --> 42:36.630
把所有的action汇种

42:37.150 --> 42:38.350
随着action汇种

42:38.350 --> 42:39.310
怎么汇种呢

42:39.590 --> 42:40.910
就是使用联合内想

42:40.910 --> 42:41.670
就这么简单

42:41.670 --> 42:42.750
没有什么特别的

42:42.870 --> 42:44.030
就是使用联合内想

42:44.150 --> 42:46.310
因为action它有这么一些情况

42:46.310 --> 42:47.590
那么有每一个情况

42:47.590 --> 42:48.990
都可能会出现在这边

42:49.310 --> 42:50.870
所以说导出一个联合内想

42:51.470 --> 42:52.550
把这些action

42:52.670 --> 42:53.790
汇一下种

42:54.550 --> 42:55.870
然后set

42:56.230 --> 42:57.670
condition action

42:57.790 --> 43:00.630
还有什么set loading action

43:00.750 --> 43:01.830
还有什么

43:02.870 --> 43:04.390
denate action

43:04.790 --> 43:06.270
把这些action汇个种

43:06.790 --> 43:07.590
你看一下

43:07.830 --> 43:08.390
汇个种

43:10.670 --> 43:12.190
这样子汇种完成之后

43:13.110 --> 43:14.470
汇种完成之后

43:14.550 --> 43:15.190
那么

43:15.670 --> 43:17.590
组合起来这么一个新的内想

43:17.910 --> 43:18.630
于是呢

43:18.630 --> 43:20.230
这个内想就可以在这边使用了

43:20.230 --> 43:21.470
这个action是哪内想

43:21.790 --> 43:23.190
是不是这些情况都有可能

43:23.190 --> 43:24.190
movie actions

43:24.470 --> 43:25.310
都有可能

43:26.110 --> 43:27.190
然后接下来

43:27.350 --> 43:29.590
神奇的事情发生了

43:29.830 --> 43:30.830
什么神奇的是

43:31.070 --> 43:32.350
你看一下x里面

43:33.630 --> 43:34.310
哇

43:34.710 --> 43:36.870
它居然可以推断出有type值

43:36.910 --> 43:37.950
有pano的值

43:37.950 --> 43:39.110
它居然可以推断出来

43:39.590 --> 43:40.350
这怎么回事呢

43:40.350 --> 43:41.910
这是不是汇种之后了吗

43:42.310 --> 43:43.190
它会发现

43:43.310 --> 43:45.230
ts非常智能的发现

43:45.390 --> 43:46.830
这些内想里边

43:46.830 --> 43:48.350
无论是啥内想

43:48.710 --> 43:50.150
无论是啥内想

43:50.190 --> 43:51.950
它一定有一个值

43:52.150 --> 43:53.030
就是type

43:53.790 --> 43:55.590
它会把它共同的东西提出来

43:56.390 --> 43:57.190
它一定有一个值

43:57.190 --> 43:57.950
就是type

43:58.590 --> 44:00.150
那么这个type是哪内想呢

44:00.190 --> 44:01.510
这个type你看一下

44:01.830 --> 44:04.270
它居然可以推断出这样子推断出来

44:04.390 --> 44:06.830
它是这四个字面两内想的联合

44:07.830 --> 44:10.230
它是这四个字面两内想的联合

44:10.830 --> 44:12.350
所以它这样子可以推断出来的

44:12.470 --> 44:14.030
ts可以自动帮你搞定

44:14.310 --> 44:16.310
在ts的官方稳当里边

44:16.310 --> 44:19.670
它把这个现象叫做可变实的联合

44:19.990 --> 44:21.390
可变实的联合

44:22.350 --> 44:24.390
就是我这里的联合内想

44:24.790 --> 44:26.630
使用了这样的联合内想过后了

44:26.830 --> 44:30.030
它是能够推导出这些联合内想共有的东西

44:30.350 --> 44:31.390
共有的东西

44:31.670 --> 44:33.270
并且每一个成员

44:33.590 --> 44:35.390
比如说这里面有type属性

44:35.390 --> 44:36.190
这里面也有type

44:36.190 --> 44:37.070
这里面也有type

44:37.070 --> 44:38.310
这里面也有type

44:38.710 --> 44:40.190
每一个type的值

44:40.270 --> 44:42.390
每一个type的内想约束它不一样

44:42.550 --> 44:43.190
于是

44:43.270 --> 44:44.990
但是它一定有type属性

44:45.230 --> 44:46.830
于是这里可以使用type属性

44:47.030 --> 44:48.470
那么约束不一样的话

44:48.470 --> 44:50.310
它就把这些约束变成联合内想

44:51.270 --> 44:52.350
就把这些type约束

44:52.390 --> 44:54.710
每一个type约束做成一个联合

44:55.270 --> 44:57.710
它非常非常精准的可以推导出来

44:58.510 --> 45:00.310
那么这里既然有这个东西

45:00.310 --> 45:00.950
那就简单了

45:00.950 --> 45:01.430
对吧

45:01.630 --> 45:03.310
我可以怎么做switch

45:03.310 --> 45:03.550
对吧

45:03.550 --> 45:05.430
我们以前这样子写的

45:05.590 --> 45:06.910
然后axing点

45:07.270 --> 45:08.070
axing点

45:09.350 --> 45:09.830
type

45:10.110 --> 45:11.190
axing点type

45:11.430 --> 45:11.670
好

45:11.670 --> 45:12.430
第二case

45:13.710 --> 45:15.390
你看给你提供选择

45:15.390 --> 45:16.350
你能写错吗

45:16.390 --> 45:19.110
以前写Ridak是不是经常写错我这个玩意儿

45:19.430 --> 45:20.510
那现在能写错吗

45:20.790 --> 45:22.190
现在肯定写不错不了

45:22.190 --> 45:22.590
对吧

45:22.630 --> 45:23.710
现在肯定错不了

45:23.990 --> 45:24.230
好

45:24.230 --> 45:25.190
这里我们一个个来

45:26.670 --> 45:29.190
首先是movie比较说dnx

45:29.550 --> 45:31.870
你要删除的时候我要做啥

45:32.270 --> 45:32.790
一次写

45:33.390 --> 45:34.790
然后case

45:35.550 --> 45:36.190
movie

45:38.390 --> 45:39.030
dnx

45:40.070 --> 45:40.790
你要

45:41.270 --> 45:41.990
你要啥

45:42.150 --> 45:42.910
你要

45:43.150 --> 45:44.150
删除写了对吧

45:44.710 --> 45:46.750
你要保存的时候我要做啥

45:47.630 --> 45:48.430
movie save

45:48.550 --> 45:49.710
保存的时候我要做啥

45:49.910 --> 45:51.750
然后接着写case

45:52.310 --> 45:53.390
sets condition

45:56.670 --> 45:57.630
你要设置

45:58.230 --> 45:59.750
条件的时候我要做啥

46:01.030 --> 46:02.310
都是要改变状态的

46:02.790 --> 46:04.430
然后还有啥呢

46:04.670 --> 46:05.470
sets

46:06.190 --> 46:07.190
sets

46:07.790 --> 46:08.390
还有啥

46:08.430 --> 46:08.910
哪一个

46:09.030 --> 46:09.830
sets loading

46:10.150 --> 46:11.030
sets loading

46:11.870 --> 46:12.350
break

46:13.630 --> 46:14.510
你要设置

46:14.990 --> 46:16.430
加载状态的时候我要做啥

46:17.470 --> 46:20.030
那么一会我会分别去写函数来处理

46:20.150 --> 46:21.190
我不在这里处理了

46:21.990 --> 46:23.830
然后我们这里再看一个神奇的现象

46:24.630 --> 46:25.990
代码到了这儿

46:26.110 --> 46:26.990
我们来看一下

46:26.990 --> 46:29.830
xing的payload

46:32.920 --> 46:33.520
哇

46:34.200 --> 46:35.760
这真的强

46:36.000 --> 46:37.000
你看到没

46:37.520 --> 46:39.000
看到payload啥那一行没

46:39.600 --> 46:40.480
制服串

46:41.480 --> 46:41.760
好

46:41.760 --> 46:43.400
你可能觉得怎么回事

46:43.600 --> 46:45.240
还没反应过来是怎么回事对吧

46:45.280 --> 46:46.080
那一看这边

46:46.840 --> 46:47.640
xing

46:48.120 --> 46:48.920
payload

46:49.560 --> 46:51.000
保存的时候payload是啥

46:51.640 --> 46:53.120
保存的时候payload他知道

46:53.360 --> 46:54.320
他是一个对象

46:55.920 --> 46:56.720
来看这边

46:57.320 --> 46:59.040
xing的payload

46:59.640 --> 47:00.800
你看一下这里是啥

47:02.800 --> 47:04.120
是Isearch

47:04.400 --> 47:05.200
condition

47:05.800 --> 47:06.440
哇靠

47:06.440 --> 47:08.560
它是在不同的case里边

47:08.600 --> 47:11.800
它能推荡出payload的情况是不一样的

47:12.280 --> 47:13.440
这就是我刚才说的

47:13.880 --> 47:15.400
可辨识的联合

47:15.400 --> 47:17.520
这个联合内容是可以分辨出来了

47:17.800 --> 47:18.880
可辨识

47:19.360 --> 47:20.080
联合

47:20.960 --> 47:23.360
这个联我们外面是用了一个联合类型

47:23.560 --> 47:24.880
但它联合类型

47:24.880 --> 47:26.160
这个type值一确定

47:26.160 --> 47:27.320
它马上就能推荡出

47:27.320 --> 47:28.600
这个payload是什么类型

47:28.960 --> 47:30.120
因为不同的type值

47:30.120 --> 47:31.480
它对应了不同的payload

47:31.880 --> 47:33.440
如果type值等于这个的话

47:33.440 --> 47:34.640
payload是一个制服串

47:34.880 --> 47:35.840
type值等于这个的话

47:35.840 --> 47:38.160
payload是一个字面上对象

47:38.360 --> 47:39.160
是个对象

47:39.400 --> 47:40.400
好type值等于这个的话

47:40.400 --> 47:42.400
payload是一个Isearch

47:42.400 --> 47:43.120
condition

47:43.560 --> 47:44.720
它是可以推荡出来的

47:44.720 --> 47:46.720
当然这边就是个布尔对吧

47:46.720 --> 47:47.520
就是个布尔

47:47.520 --> 47:48.200
payload的

47:48.400 --> 47:49.240
只要它看一下

47:49.800 --> 47:50.320
看没

47:50.480 --> 47:51.280
就是个布尔

47:51.880 --> 47:53.680
它是可以做到这种情况的

47:54.480 --> 47:55.480
那么一这样整来

47:55.480 --> 47:57.040
它也方便了

47:57.040 --> 47:59.080
我这里不用去担心它的内容有问题了

47:59.320 --> 47:59.520
好

47:59.520 --> 48:01.880
我们现在就一次去写这些函数

48:02.240 --> 48:03.480
来搞定这些

48:04.880 --> 48:05.840
数据的变化

48:06.400 --> 48:07.240
一个个来吧

48:07.680 --> 48:10.320
首先是电影的保存这个函数

48:10.840 --> 48:12.440
相当于是我们写这么一个函数

48:13.240 --> 48:14.040
写这么一个函数

48:15.240 --> 48:16.880
save movie

48:16.920 --> 48:18.080
好你给我一个啥呢

48:18.080 --> 48:19.280
给我一个state

48:19.280 --> 48:20.160
状态

48:20.160 --> 48:21.360
状态内容是啥

48:21.360 --> 48:23.360
是不是还是I move a state对吧

48:23.360 --> 48:24.520
还是这个内容

48:24.520 --> 48:26.320
然后给我一个action

48:26.320 --> 48:27.760
给我一个action

48:28.760 --> 48:29.880
action啥内容

48:29.880 --> 48:31.280
action内容是啥

48:31.280 --> 48:32.440
保存电影

48:32.920 --> 48:33.880
保存电影的话

48:33.880 --> 48:34.880
action啥内容

48:34.880 --> 48:35.880
是不是那边有

48:36.360 --> 48:36.880
对不对

48:36.880 --> 48:37.880
这边有这些内容

48:37.880 --> 48:38.880
有这个内容

48:38.880 --> 48:41.880
使用save movie action

48:41.880 --> 48:42.880
是这个内容

48:43.880 --> 48:44.880
好来吧

48:45.880 --> 48:47.880
来保存呗

48:47.880 --> 48:48.880
来保存呗

48:48.880 --> 48:49.880
返回的是这个啥

48:49.880 --> 48:52.880
返回的是不是也是I move a state

48:52.880 --> 48:53.880
对不对

48:53.880 --> 48:54.880
返回的也是这个

48:54.880 --> 48:55.880
其实你这里可以发现

48:56.880 --> 48:58.880
是不是每一个action的处理函数

48:58.880 --> 48:59.880
就是reducer

48:59.880 --> 49:01.880
像这些reducer处理函数

49:01.880 --> 49:04.880
它第一个参数一定是I move a state对吧

49:05.880 --> 49:07.880
它第一个参数一定是I move a state

49:08.880 --> 49:09.880
好

49:09.880 --> 49:10.880
后面这个参数

49:10.880 --> 49:13.880
后面这个返回指是不是一定是这个玩意儿

49:14.880 --> 49:15.880
好

49:15.880 --> 49:16.880
那么我们每一次写这个喊说

49:16.880 --> 49:17.880
都要去写

49:17.880 --> 49:18.880
觉得很麻烦

49:18.880 --> 49:19.880
总觉得很麻烦

49:19.880 --> 49:20.880
那么这个时候

49:20.880 --> 49:22.880
我们可以用一种简单的方式来处理

49:22.880 --> 49:23.880
怎么处理呢

49:23.880 --> 49:25.880
我们跟action那边差不多

49:25.880 --> 49:26.880
我们用这种方式来做

49:27.880 --> 49:33.880
要取名一个reducer type

49:33.880 --> 49:34.880
reducer type

49:35.880 --> 49:36.880
ts

49:36.880 --> 49:38.880
其实它官方也做了相应的类型的

49:38.880 --> 49:39.880
在Redux的官方里面

49:39.880 --> 49:41.880
也做了一个相应的类型的

49:41.880 --> 49:42.880
叫做reducer

49:43.880 --> 49:44.880
来看一下吧

49:44.880 --> 49:45.880
顺便找个地方写一下

49:45.880 --> 49:46.880
reducer

49:47.880 --> 49:49.880
f12转到定义

49:49.880 --> 49:50.880
你看一下

49:50.880 --> 49:53.880
这是官方给你写的reducer这个函数

49:53.880 --> 49:55.880
你是不是可以直接用它对吧

49:55.880 --> 49:56.880
其实我们可以直接用它的

49:56.880 --> 49:58.880
实际上可以直接用它的

49:58.880 --> 49:59.880
你看这个函数

49:59.880 --> 50:01.880
其实就是一个

50:01.880 --> 50:02.880
我刚才想写的自己写的话

50:02.880 --> 50:03.880
就是想写这个东西

50:03.880 --> 50:05.880
也可以直接使用官方的

50:05.880 --> 50:07.880
reducer的它的格式给你写好了

50:07.880 --> 50:08.880
你看到没有

50:08.880 --> 50:09.880
就是这种格式

50:09.880 --> 50:11.880
之前的状态S

50:11.880 --> 50:12.880
他也不知道是什么类型

50:12.880 --> 50:13.880
你可告诉他

50:13.880 --> 50:15.880
告诉他之前的状态S类型

50:15.880 --> 50:16.880
那么之前的状态S类型

50:16.880 --> 50:17.880
返回的一定是S类型

50:17.880 --> 50:18.880
你看看

50:18.880 --> 50:19.880
这个函数返回的一定是S类型

50:19.880 --> 50:21.880
那么你再把I个型的类型告诉他

50:21.880 --> 50:23.880
那么这个类型就做好了

50:23.880 --> 50:25.880
你可以完全可以这样的来做

50:25.880 --> 50:27.880
所以说这里的单码可以杂写了

50:27.880 --> 50:29.880
我也不去自己

50:29.880 --> 50:30.880
我也不自己装逼了

50:30.880 --> 50:32.880
我也不去写这个东西了

50:32.880 --> 50:33.880
删除掉

50:34.880 --> 50:35.880
那么这边呢

50:36.880 --> 50:37.880
这边

50:37.880 --> 50:38.880
写这个函数的时候

50:38.880 --> 50:39.880
我可以杂写了

50:39.880 --> 50:40.880
我可以这样子写

50:40.880 --> 50:41.880
大家看着

50:42.880 --> 50:43.880
换一种写法

50:44.880 --> 50:45.880
我可以这样子写

50:46.880 --> 50:48.880
save movie

50:48.880 --> 50:49.880
这个函数

50:49.880 --> 50:50.880
给他约束一下类型

50:50.880 --> 50:51.880
啥类型呢

50:52.880 --> 50:53.880
reducer

50:53.880 --> 50:54.880
reducer

50:54.880 --> 50:55.880
好reducer的类型是咋的

50:55.880 --> 50:57.880
I movie state

50:57.880 --> 50:58.880
好

50:58.880 --> 50:59.880
I个型的类型是咋的

50:59.880 --> 51:02.880
save movie action

51:02.880 --> 51:03.880
好

51:03.880 --> 51:04.880
这样约束过后

51:04.880 --> 51:05.880
这样的复制

51:05.880 --> 51:07.880
你看一下state action

51:08.880 --> 51:10.880
然后这个state推到推到

51:10.880 --> 51:11.880
你看一下

51:11.880 --> 51:12.880
是不是I movie state

51:12.880 --> 51:13.880
好

51:13.880 --> 51:14.880
I个型推到出来

51:14.880 --> 51:15.880
是这个I个型

51:15.880 --> 51:17.880
这个函数必须要有返回值

51:17.880 --> 51:18.880
返回的类型

51:18.880 --> 51:19.880
也必须是

51:19.880 --> 51:21.880
这个I movie state

51:21.880 --> 51:22.880
我这样子写的

51:22.880 --> 51:23.880
就方便多了

51:23.880 --> 51:24.880
好

51:24.880 --> 51:25.880
来吧

51:25.880 --> 51:26.880
来保存

51:26.880 --> 51:27.880
保存咋保存

51:28.880 --> 51:29.880
咋保存

51:29.880 --> 51:30.880
直接来

51:31.880 --> 51:32.880
我们现在有了

51:32.880 --> 51:34.880
i個型里边有啥

51:34.880 --> 51:35.880
给你提供了啥

51:35.880 --> 51:36.880
给你提供了movase

51:36.880 --> 51:37.880
对吧

51:37.880 --> 51:38.880
给你提供了toto

51:38.880 --> 51:39.880
给你提供了这两个东西

51:39.880 --> 51:40.880
那你把这两个东西

51:40.880 --> 51:42.880
覆盖掉这个data和toto

51:42.880 --> 51:43.880
不完了吗

51:43.880 --> 51:44.880
对不对

51:44.880 --> 51:45.880
覆盖掉这两个字就完事了

51:45.880 --> 51:46.880
还能做啥呢

51:46.880 --> 51:47.880
对不对

51:47.880 --> 51:48.880
好

51:48.880 --> 51:49.880
那这里

51:49.880 --> 51:50.880
我们直接返回

51:50.880 --> 51:51.880
直接返回

51:51.880 --> 51:52.880
以前咋写的

51:52.880 --> 51:53.880
是不是overget

51:54.880 --> 51:55.880
对不对

51:55.880 --> 51:56.880
把之前的state拿出来

51:56.880 --> 51:58.880
不能改变之前的state

51:58.880 --> 51:59.880
要先用两个大括号

51:59.880 --> 52:00.880
然后

52:00.880 --> 52:02.880
把之前的state拿出来

52:02.880 --> 52:03.880
然后呢

52:03.880 --> 52:04.880
再给他加一个对象

52:04.880 --> 52:06.880
加一个对象

52:06.880 --> 52:07.880
加一个对象

52:07.880 --> 52:08.880
就是

52:09.880 --> 52:10.880
data

52:10.880 --> 52:12.880
data为一个新的字

52:12.880 --> 52:15.880
新的字在培诺的movase里边

52:15.880 --> 52:16.880
然后呢

52:16.880 --> 52:17.880
还有一个什么toto

52:17.880 --> 52:18.880
对吧

52:18.880 --> 52:19.880
toto呢

52:19.880 --> 52:21.880
给他一个新的字

52:21.880 --> 52:23.880
培诺的toto

52:23.880 --> 52:24.880
就这样子写

52:24.880 --> 52:25.880
对吧

52:25.880 --> 52:26.880
就这样子写

52:26.880 --> 52:27.880
当然你也可以使用

52:27.880 --> 52:29.880
es6的写法

52:29.880 --> 52:30.880
es6里边

52:30.880 --> 52:32.880
使用展开运算幅

52:32.880 --> 52:34.880
使用展开运算幅

52:34.880 --> 52:35.880
也行

52:35.880 --> 52:37.880
先把这个之前的状态展开

52:37.880 --> 52:39.880
先把之前的状态展开

52:39.880 --> 52:40.880
然后呢

52:40.880 --> 52:41.880
重新给一些属相

52:41.880 --> 52:43.880
重新给一些属相复制

52:44.880 --> 52:46.880
重新给这个data复制

52:46.880 --> 52:48.880
重新给这个toto复制

52:48.880 --> 52:49.880
也行

52:49.880 --> 52:50.880
看你自己

52:50.880 --> 52:51.880
好

52:51.880 --> 52:52.880
这个是不是写完了

52:52.880 --> 52:54.880
那么这边干嘛

52:54.880 --> 52:56.880
move save的时候

52:56.880 --> 52:58.880
move

52:58.880 --> 52:59.880
然后

52:59.880 --> 53:00.880
把什么传进去

53:00.880 --> 53:01.880
你这里不可能出错的

53:01.880 --> 53:02.880
乱一下要爆错的

53:02.880 --> 53:04.880
把state传进去

53:04.880 --> 53:05.880
把x型传进去

53:05.880 --> 53:06.880
做完事了

53:06.880 --> 53:07.880
完事了

53:07.880 --> 53:08.880
这里的x型

53:08.880 --> 53:10.880
一定能够匹配到这边

53:10.880 --> 53:12.880
因为类型是匹配的

53:12.880 --> 53:13.880
好吧

53:13.880 --> 53:15.880
你看这个x型

53:15.880 --> 53:18.880
一定能够匹配到这边

53:18.880 --> 53:19.880
好

53:19.880 --> 53:20.880
这是保存电影

53:20.880 --> 53:21.880
还有哪些呢

53:21.880 --> 53:22.880
电影

53:22.880 --> 53:24.880
设置电影的条件

53:24.880 --> 53:25.880
来吧

53:25.880 --> 53:26.880
方形

53:26.880 --> 53:28.880
set

53:28.880 --> 53:30.880
condition

53:30.880 --> 53:32.880
设置电影的条件

53:32.880 --> 53:33.880
好

53:33.880 --> 53:34.880
是不是一样的

53:34.880 --> 53:36.880
我就把这个复制一下

53:36.880 --> 53:37.880
复制一下

53:37.880 --> 53:38.880
来吧

53:38.880 --> 53:39.880
改个名字

53:39.880 --> 53:40.880
set condition

53:40.880 --> 53:42.880
设置电影条件

53:42.880 --> 53:44.880
它的类型约束为reducer

53:44.880 --> 53:46.880
前面一个一样不动

53:46.880 --> 53:48.880
当然你可以再给它

53:48.880 --> 53:50.880
再给它为了写的方便

53:50.880 --> 53:52.880
你可以再给它做一个类型

53:52.880 --> 53:53.880
方便使用

53:53.880 --> 53:55.880
movie reducer

53:55.880 --> 53:56.880
你可以这样子写

53:56.880 --> 53:59.880
就是你完全可以灵活的去处理

53:59.880 --> 54:01.880
imove

54:01.880 --> 54:02.880
set

54:03.880 --> 54:04.880
那么这个是个方形

54:04.880 --> 54:05.880
它不知道x型的名字

54:05.880 --> 54:07.880
它不知道x型的类型是啥

54:07.880 --> 54:09.880
你只要告诉我x型的类型就行了

54:09.880 --> 54:11.880
其他的我已经给你订好了

54:11.880 --> 54:12.880
所以说这边

54:12.880 --> 54:13.880
可以使用movie reducer

54:13.880 --> 54:14.880
可以少写这么一个东西

54:14.880 --> 54:16.880
这个东西可以少写一个

54:16.880 --> 54:18.880
懂这个意思吗

54:18.880 --> 54:19.880
懂这个意思吗

54:19.880 --> 54:20.880
非常简单的

54:20.880 --> 54:22.880
到这里也是一样

54:22.880 --> 54:25.880
我只需要订那个x型的类型就行了

54:25.880 --> 54:26.880
好

54:26.880 --> 54:27.880
这次condition

54:27.880 --> 54:28.880
x型的类型是什么呢

54:28.880 --> 54:30.880
肯定是一个

54:30.880 --> 54:31.880
search

54:31.880 --> 54:32.880
condition

54:32.880 --> 54:33.880
对吧

54:33.880 --> 54:35.880
x型的类型是这个

54:35.880 --> 54:36.880
是这个

54:36.880 --> 54:37.880
我们来看一下

54:37.880 --> 54:38.880
对吧

54:38.880 --> 54:39.880
是这样吗

54:39.880 --> 54:40.880
我们来看一下

54:40.880 --> 54:41.880
好像不是

54:41.880 --> 54:43.880
之前的x型的类型是啥

54:43.880 --> 54:44.880
其实如果你这样子写了

54:44.880 --> 54:46.880
它马上会提示的一个问题

54:46.880 --> 54:47.880
到时候

54:47.880 --> 54:48.880
你看

54:48.880 --> 54:49.880
如果你这样子写了

54:49.880 --> 54:51.880
看这里肯定要爆错

54:51.880 --> 54:53.880
那么这里雕的时候肯定也要爆错

54:53.880 --> 54:55.880
比方说setcondition

54:55.880 --> 54:58.880
它是不让你出现这个错误的

54:58.880 --> 55:00.880
它出处有了类型检查过后

55:00.880 --> 55:01.880
它就出现不了这个错误

55:01.880 --> 55:02.880
它说类型不一样

55:02.880 --> 55:04.880
它这里的类型是啥

55:04.880 --> 55:05.880
它这里的类型是啥

55:05.880 --> 55:07.880
它这里的类型的名字

55:07.880 --> 55:08.880
这个名字

55:08.880 --> 55:09.880
我们来看一下

55:09.880 --> 55:10.880
这边的名字

55:10.880 --> 55:11.880
跑下去了

55:11.880 --> 55:12.880
无非x型是

55:12.880 --> 55:14.880
它这边的名字叫做setconditionx型

55:14.880 --> 55:16.880
而你这里的类型

55:16.880 --> 55:17.880
使用的是search

55:17.880 --> 55:18.880
condition

55:18.880 --> 55:19.880
肯定不一样的

55:19.880 --> 55:20.880
肯定不一样的

55:20.880 --> 55:23.880
这里的setcondition

55:23.880 --> 55:25.880
应该使用这个类型

55:25.880 --> 55:27.880
这个类型倒入进来

55:29.880 --> 55:31.880
搞定这里的时候

55:31.880 --> 55:32.880
你看这里就不爆错了

55:32.880 --> 55:33.880
这里不爆错了

55:33.880 --> 55:39.880
设置电影的条件

55:39.880 --> 55:41.880
那么条件这一块

55:41.880 --> 55:43.880
条件这一块

55:43.880 --> 55:44.880
condition

55:44.880 --> 55:45.880
是不是要重新复制

55:45.880 --> 55:47.880
要保持这个函数的存进

55:47.880 --> 55:50.880
要对条件这一块重新复制

55:50.880 --> 55:51.880
怎么重新复制呢

55:51.880 --> 55:52.880
在这里边

55:52.880 --> 55:54.880
这些都是以前的知识

55:54.880 --> 55:55.880
现在没有什么关系

55:55.880 --> 55:56.880
都是以前的知识了

55:56.880 --> 55:58.880
重新复制的时候

55:58.880 --> 56:01.880
是不是要把之前的状态的

56:01.880 --> 56:03.880
条件展开

56:03.880 --> 56:05.880
展开之前的条件

56:05.880 --> 56:08.880
然后把现在的条件

56:08.880 --> 56:10.880
现在x型里边

56:10.880 --> 56:11.880
你看

56:13.880 --> 56:14.880
x型里边

56:14.880 --> 56:15.880
不是有payload吗

56:15.880 --> 56:16.880
对不对

56:16.880 --> 56:17.880
payload它的类型

56:17.880 --> 56:19.880
payload的是不是条件

56:19.880 --> 56:21.880
payload的是不是条件

56:21.880 --> 56:22.880
searchcondition

56:22.880 --> 56:24.880
把这里面的条件

56:24.880 --> 56:25.880
如果有的话

56:25.880 --> 56:27.880
就覆盖掉前面的条件

56:27.880 --> 56:29.880
就做这么简单的事

56:29.880 --> 56:31.880
给条件重新复制

56:31.880 --> 56:33.880
这是以前的知识

56:33.880 --> 56:36.880
我这里就不去细咎这些东西了

56:36.880 --> 56:37.880
不然的话

56:37.880 --> 56:38.880
我又要讲ts

56:38.880 --> 56:40.880
又要讲瑞大克斯

56:40.880 --> 56:41.880
那这个课程

56:41.880 --> 56:42.880
我就不知道讲到

56:42.880 --> 56:43.880
侯联马约去了

56:43.880 --> 56:45.880
这里不多说了

56:45.880 --> 56:47.880
searchcondition

56:47.880 --> 56:48.880
然后movie

56:48.880 --> 56:49.880
searchloading

56:49.880 --> 56:51.880
是不是一样的

56:51.880 --> 56:53.880
过来

56:53.880 --> 56:55.880
这个x型的类型是啥呢

56:55.880 --> 56:57.880
叫做

56:57.880 --> 56:59.880
searchcondition

56:59.880 --> 57:01.880
这个类型

57:01.880 --> 57:03.880
searchloading

57:03.880 --> 57:07.640
那么这个函数

57:07.640 --> 57:08.640
改变的是啥呢

57:08.640 --> 57:09.640
改变的不是condition

57:09.640 --> 57:10.640
改变的是什么

57:10.640 --> 57:12.640
isloading

57:12.640 --> 57:13.640
isloading

57:13.640 --> 57:15.640
改变的是这个东西

57:15.640 --> 57:16.640
改变为啥呢

57:16.640 --> 57:19.640
改变为x型的payload

57:19.640 --> 57:22.640
改变为x型的payload

57:23.640 --> 57:25.640
x型的payload是啥类型

57:25.640 --> 57:26.640
x型的payload

57:26.640 --> 57:27.640
我看一下

57:27.640 --> 57:29.640
这里写错了

57:29.640 --> 57:30.640
这里写错了

57:30.640 --> 57:33.640
叫setloading.exe

57:33.640 --> 57:34.640
payloader就是不儿

57:34.640 --> 57:35.640
对吧

57:35.640 --> 57:36.640
payloader是不儿

57:36.640 --> 57:37.640
那么isloading也是不儿

57:37.640 --> 57:38.640
类型是匹配的

57:38.640 --> 57:39.640
好

57:39.640 --> 57:40.640
那么这里调用

57:40.640 --> 57:44.640
setloading.exe

57:46.640 --> 57:47.640
好

57:47.640 --> 57:49.640
电影三处

57:49.640 --> 57:51.640
电影三处

57:51.640 --> 57:53.640
Denet movie

57:53.640 --> 57:54.640
那么这里手动写一次

57:54.640 --> 57:56.640
movie reducer

57:56.640 --> 57:57.640
我们自己做的类型

57:57.640 --> 57:59.640
把x型的类型告诉他

57:59.640 --> 58:01.640
那就是Denetx

58:01.640 --> 58:03.640
Denetx

58:03.640 --> 58:04.640
告诉他

58:04.640 --> 58:05.640
然后

58:06.640 --> 58:07.640
导入

58:07.640 --> 58:09.640
就是设置函数

58:09.640 --> 58:11.640
setx

58:11.640 --> 58:14.400
好

58:14.400 --> 58:15.400
这里返回

58:15.400 --> 58:17.400
返回的一个新的状态

58:17.400 --> 58:19.400
原来的状态展开

58:19.400 --> 58:21.400
然后新的状态哪些要变

58:21.400 --> 58:22.400
哪些要变

58:23.400 --> 58:24.400
好

58:24.400 --> 58:26.400
你要三处电影

58:26.400 --> 58:28.400
三处电影

58:28.400 --> 58:30.400
电影的数组是不是得变

58:30.400 --> 58:32.400
电影的数组是不是得变

58:32.400 --> 58:33.400
那肯定得变

58:33.400 --> 58:35.400
电影的数组肯定得变

58:35.400 --> 58:36.400
好

58:36.400 --> 58:37.400
你三处你按id再三处

58:37.400 --> 58:38.400
对吧

58:38.400 --> 58:39.400
所以电影的数组变成啥了

58:39.400 --> 58:42.400
变成之前的数组

58:42.400 --> 58:44.400
然后filter

58:44.400 --> 58:45.400
filter

58:45.400 --> 58:47.400
把那些电影拿到

58:47.400 --> 58:48.400
拿到这个电影的id

58:48.400 --> 58:50.400
用id去比较

58:50.400 --> 58:52.400
id不等于

58:52.400 --> 58:54.400
你这个id里面不是

58:54.400 --> 58:56.400
你这个id里面不是

58:56.400 --> 58:58.400
传那个id过来吗对吧

58:58.400 --> 59:00.400
都是以前的知识

59:00.400 --> 59:02.400
都是你传那个id过来

59:02.400 --> 59:04.400
你传那个id过来

59:04.400 --> 59:06.400
那么我用这个id去比较

59:06.400 --> 59:08.400
只保留那些id不等于

59:08.400 --> 59:10.400
你三处的id的电影

59:10.400 --> 59:12.400
你要三个电影

59:12.400 --> 59:14.400
那么我把这个id排除掉

59:14.400 --> 59:16.400
那剩下的电影了就肯定要保留的

59:16.400 --> 59:18.400
重新给这个数组复制

59:18.400 --> 59:20.400
这件事我们把它做了

59:20.400 --> 59:22.400
然后还有什么要变呢

59:22.400 --> 59:24.400
还有什么要变

59:24.400 --> 59:26.400
这个东西要变

59:26.400 --> 59:28.400
就是电影的总数

59:28.400 --> 59:29.400
总数要减1

59:29.400 --> 59:30.400
total

59:30.400 --> 59:31.400
等于什么

59:31.400 --> 59:33.400
stat.total-1

59:33.400 --> 59:35.400
还有啥呢

59:35.400 --> 59:36.400
就没啥了对吧

59:36.400 --> 59:38.400
三处就做完了

59:38.400 --> 59:40.400
三处

59:40.400 --> 59:42.400
三处stat.exe

59:42.400 --> 59:46.540
好了

59:46.540 --> 59:48.540
就差不多了吧

59:48.540 --> 59:49.540
reducer

59:49.540 --> 59:50.540
就写完了

59:50.540 --> 59:52.540
reducer就写完了

59:52.540 --> 59:54.540
好reducer写完了之后

59:54.540 --> 59:56.540
看一下这节课

59:56.540 --> 59:57.540
讲了这么久了

59:57.540 --> 59:59.540
要不我们这节课就到这吧

59:59.540 --> 01:00:00.540
就到这

01:00:00.540 --> 01:00:02.540
我们这节课把

01:00:02.540 --> 01:00:04.540
action

01:00:04.540 --> 01:00:06.540
把reducer来搞定

01:00:06.540 --> 01:00:07.540
剩下我们下节课

01:00:07.540 --> 01:00:08.540
再把剩下的测试

01:00:08.540 --> 01:00:09.540
仓库

01:00:09.540 --> 01:00:11.540
合并reducer这些事情来搞定

01:00:11.540 --> 01:00:13.540
我们这节课先到这

01:00:13.540 --> 01:00:15.540
因为东西讲的有点多

01:00:15.540 --> 01:00:17.540
其实大家需要大家消化一下

01:00:17.540 --> 01:00:18.540
这里呢

01:00:18.540 --> 01:00:19.540
在写的时候

01:00:19.540 --> 01:00:20.540
其实变化有多少呢

01:00:20.540 --> 01:00:21.540
变化也没有

01:00:21.540 --> 01:00:22.540
大家想象的那么恐怖

01:00:22.540 --> 01:00:24.540
就是多了一些类型检查

01:00:24.540 --> 01:00:26.540
为每一个reducer

01:00:26.540 --> 01:00:27.540
设置一下类型

01:00:27.540 --> 01:00:28.540
这样子的好处在于

01:00:28.540 --> 01:00:29.540
不容易出错

01:00:29.540 --> 01:00:30.540
你这里随便找个地方

01:00:30.540 --> 01:00:31.540
你随便找个地方

01:00:31.540 --> 01:00:32.540
你给我写个错误试试

01:00:32.540 --> 01:00:33.540
一个试试

01:00:33.540 --> 01:00:34.540
你肯定是不能

01:00:34.540 --> 01:00:36.540
不可能写错的这些地方

01:00:36.540 --> 01:00:38.540
虽然我们多加了一些代码

01:00:38.540 --> 01:00:39.540
其实这些代码

01:00:39.540 --> 01:00:40.540
大家写熟了之后

01:00:40.540 --> 01:00:42.540
也非常非常快

01:00:42.540 --> 01:00:43.540
但是这样子以来

01:00:43.540 --> 01:00:44.540
你运行的时候

01:00:44.540 --> 01:00:46.540
你就有安全感

01:00:46.540 --> 01:00:49.540
这个安全感是很难获得的

01:00:49.540 --> 01:00:50.540
你以前写代码

01:00:50.540 --> 01:00:52.540
我心里面总是悬的

01:00:52.540 --> 01:00:53.540
我不知道哪个地方

01:00:53.540 --> 01:00:54.540
写的有问题

01:00:54.540 --> 01:00:55.540
但是现在的写代码

01:00:55.540 --> 01:00:57.540
我可以确定之前写的

01:00:57.540 --> 01:00:59.540
至少我单词不会写错

01:00:59.540 --> 01:01:00.540
至少我内行不会用错

01:01:00.540 --> 01:01:01.540
对吧

01:01:01.540 --> 01:01:02.540
我可以有这么一个

01:01:02.540 --> 01:01:03.540
安全感存在

01:01:03.540 --> 01:01:05.540
这个安全感是很难得的

01:01:05.540 --> 01:01:06.540
好了

01:01:06.540 --> 01:01:07.540
我们这节课先做到这里

01:01:07.540 --> 01:01:08.540
我们下节课

01:01:08.540 --> 01:01:09.540
再继续来说

01:01:09.540 --> 01:01:10.540
继续来说这里

01:01:10.540 --> 01:01:11.540
这个东西

01:01:11.540 --> 01:01:12.540
好了

01:01:12.540 --> 01:01:13.540
要时间比较长

01:01:13.540 --> 01:01:14.540
好

01:01:14.540 --> 01:01:15.540
这一课

01:01:15.540 --> 01:01:16.540
x型和reducer

01:01:16.540 --> 01:01:17.540
先完成再说

01:01:17.540 --> 01:01:18.540
好吧

01:01:18.540 --> 01:01:19.540
那么这一块

01:01:19.540 --> 01:01:20.540
到这里了

01:01:20.540 --> 01:01:21.540
拜拜

