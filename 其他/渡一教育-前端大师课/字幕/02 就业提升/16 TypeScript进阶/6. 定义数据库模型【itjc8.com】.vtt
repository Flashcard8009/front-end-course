WEBVTT

00:00.750 --> 00:03.750
接下来是数据库

00:04.250 --> 00:06.250
我们要完成数据库的功能

00:06.750 --> 00:08.250
数据库

00:09.250 --> 00:12.750
这一块我说一下吧

00:13.250 --> 00:18.750
数据库这里我们选择的数据库是大家熟悉的芒果地壁

00:19.250 --> 00:24.750
但是这个数据库现在目前常用的驱动有两个

00:25.250 --> 00:26.750
就是数据库驱动

00:27.250 --> 00:31.250
有两个 一个是官方的芒果地壁这个驱动

00:31.750 --> 00:33.750
另外一个驱动是Mongus

00:34.250 --> 00:35.750
Mongus这个驱动

00:36.250 --> 00:39.750
当然Mongus这个驱动也是根据官方的驱动做出来的

00:40.250 --> 00:41.750
给它优化了一些功能

00:42.250 --> 00:44.250
当然比较好用好用的多

00:44.750 --> 00:46.750
但是很遗憾的是

00:47.250 --> 00:54.750
这两个驱动对TS的支持不是太好

00:55.250 --> 00:57.250
这两个驱动都有这样的问题

00:57.750 --> 00:59.250
对TS的支持不是很友好

00:59.750 --> 01:04.250
没有完整的没有特别完善的类型检查

01:04.750 --> 01:07.250
有些地方会缺失掉一些类型检查

01:07.750 --> 01:09.250
这是这两个的问题

01:09.750 --> 01:12.750
另外一个数据库驱动我讲一讲

01:13.250 --> 01:15.750
其他的数据库驱动

01:16.750 --> 01:20.750
其中有一个驱动叫做Type OIM

01:21.250 --> 01:23.750
这个驱动大家可能没听说过

01:23.750 --> 01:30.250
这个驱动程序它是完全使用TS编写的

01:30.750 --> 01:33.750
而且是基云内的

01:34.250 --> 01:38.750
也就是说我们可以直接使用这个实体内

01:39.250 --> 01:40.750
在上面加一些注解

01:41.250 --> 01:41.750
不是叫注解

01:42.250 --> 01:45.250
加一些装饰器就可以完成数据库的硬设

01:45.750 --> 01:49.750
它就可以把我们内的对象保存到数据库里边

01:50.250 --> 01:51.750
这样子其实是最好的

01:51.750 --> 01:53.750
但是很遗憾的是

01:54.250 --> 01:58.750
这个库对MongoDB它有支持不好

01:59.250 --> 02:01.250
对MongoDB支持不好

02:02.250 --> 02:07.250
对什么MySQL Server一些传统的关系型数据库

02:07.750 --> 02:08.750
它支持的很好

02:09.250 --> 02:11.250
但是对于这种非关系型数据库

02:11.750 --> 02:12.750
就是MongoDB这种数据库

02:13.250 --> 02:14.250
它支持的不是很好

02:14.750 --> 02:16.250
因此数据库这一块

02:16.750 --> 02:18.250
如果你要使用MongoDB的话

02:19.250 --> 02:20.250
目前没有一个

02:20.750 --> 02:23.750
如果你要使用TS来编写MongoDB的话

02:24.250 --> 02:26.250
目前没有一个完美的解决办法

02:26.750 --> 02:27.250
没有

02:27.750 --> 02:28.750
目前还找不到

02:29.250 --> 02:30.250
等待时间吧

02:30.750 --> 02:31.750
给他们一些时间

02:32.250 --> 02:35.750
让他们对TS以后支持好一点

02:36.250 --> 02:37.750
那现在怎么办呢

02:38.250 --> 02:39.250
我这里说的是

02:39.750 --> 02:41.250
没有完美的解决办法

02:41.750 --> 02:43.250
那肯定是前提条件

02:43.750 --> 02:44.750
肯定是由于GS的

02:45.250 --> 02:48.250
就是说我们TS是介绍的超级

02:48.750 --> 02:49.750
你就是不加内情检查

02:50.250 --> 02:51.750
也比GS要好得多

02:52.250 --> 02:54.250
但是我们如果要追求完美的话

02:54.750 --> 02:57.250
目前还找不到完美的解决办法

02:58.250 --> 03:00.750
所以说目前我们只能二选一

03:01.250 --> 03:05.250
MongoDB或者是Type OIM

03:05.750 --> 03:06.750
Type OIM里面

03:07.250 --> 03:09.250
它对MongoDB的肯比较多

03:10.250 --> 03:11.750
我当时是用了一下

03:12.250 --> 03:13.250
它肯比较多

03:13.250 --> 03:16.750
特别是如果建立多个集合

03:17.250 --> 03:18.750
多个稳当集合的话

03:19.250 --> 03:22.250
到时候关联起来会有很多很多的麻烦

03:22.750 --> 03:25.750
所以说我目前还不太建议你

03:26.250 --> 03:27.750
如果你使用MongoDB的话

03:28.250 --> 03:29.250
不太建议你使用这个玩意儿

03:29.750 --> 03:30.750
如果你要使用MySQL

03:31.250 --> 03:32.250
或者是SQL Server

03:32.750 --> 03:33.750
或者是Oracle

03:34.250 --> 03:36.750
像这些传统型的关系型数据库

03:37.250 --> 03:38.750
你完全可以使用它没什么问题

03:39.250 --> 03:40.250
但是如果你要使用MongoDB

03:40.750 --> 03:41.750
不建议你使用它

03:42.250 --> 03:43.750
所以说我们这里

03:44.250 --> 03:47.250
二选一的话还是选MongoDB

03:47.750 --> 03:48.250
使用这个数据库

03:48.750 --> 03:50.250
并且这个数据库驱动

03:50.750 --> 03:52.250
大家也是用的比较熟了

03:52.750 --> 03:54.250
我们使用这个数据库驱动

03:54.750 --> 03:57.250
首先我们来安装MongoDB

03:58.750 --> 04:00.250
这里停止

04:02.250 --> 04:03.250
这里我们使用一样

04:04.250 --> 04:07.250
来添加一个MongoDB

04:07.750 --> 04:08.250
安装

04:10.830 --> 04:11.830
稍微等一下

04:14.830 --> 04:15.830
怎么卡住了

04:18.410 --> 04:20.410
安装完成

04:20.910 --> 04:21.910
安装完成之后

04:22.410 --> 04:23.410
我们就可以使用这个

04:23.910 --> 04:25.910
跟以前一样来使用MongoDB

04:26.410 --> 04:28.410
我们这里可以建立这么一个文件夹

04:29.410 --> 04:31.910
SRC下面建立一个文件夹DB

04:32.910 --> 04:34.910
表示这里面存放一些数据库的文件

04:35.910 --> 04:39.410
然后DB里面我们新建一些文件

04:39.910 --> 04:42.410
首先我们要建立MongoDB

04:42.910 --> 04:43.410
还记得吗

04:43.410 --> 04:46.410
我们要做什么建立一个schema

04:46.910 --> 04:48.410
就是schema怎么翻译

04:49.410 --> 04:51.410
结构对吧建立一个数据库结构

04:51.910 --> 04:52.910
我们这里取个名字

04:53.410 --> 04:55.410
由于我们只有一个一张表

04:55.910 --> 04:57.910
也就是说一个集合

04:58.410 --> 05:00.910
我们就使用movieschema

05:01.910 --> 05:02.910
后续名为TS

05:03.910 --> 05:06.410
以前咋做的建立schema咋做的

05:06.910 --> 05:09.410
我们首先要导入MongoDB

05:09.910 --> 05:11.410
导入MongoDB

05:12.410 --> 05:13.410
M大写吧

05:13.910 --> 05:14.410
MongoDB

05:14.910 --> 05:16.410
FromMongoDB

05:16.910 --> 05:17.910
导入进来

05:18.410 --> 05:21.410
导入进来过后我们继续写

05:21.910 --> 05:22.410
这个MongoDB

05:22.910 --> 05:23.910
那么导入进来过后

05:24.410 --> 05:26.410
我们可以通过它里面的一个函数

05:26.910 --> 05:28.410
叫做schema函数

05:28.910 --> 05:29.910
你会发现现在一个问题

05:30.410 --> 05:30.910
啥问题

05:31.410 --> 05:32.410
没有智能提示

05:32.910 --> 05:34.910
没有智能提示是怎么回上的

05:35.410 --> 05:36.410
我们指着这个MongoDB

05:36.910 --> 05:37.410
指着它

05:37.910 --> 05:39.910
实际上它现在不知道它是什么类型

05:40.410 --> 05:41.410
它现在推断不出来它的类型

05:41.910 --> 05:42.910
怎么回事

05:43.410 --> 05:43.910
怎么回事

05:44.410 --> 05:44.910
你看指着它这里

05:45.410 --> 05:46.410
它说找不到声明文件

05:46.910 --> 05:48.410
找不到这个模块的声明文件

05:49.410 --> 05:50.410
因此导致了这样的问题

05:50.910 --> 05:51.410
怎么回事

05:51.910 --> 05:53.410
是因为它是用GS写的

05:53.910 --> 05:55.410
它不是用TS写的

05:55.910 --> 05:58.410
并且它目前这个库里边

05:58.910 --> 06:00.410
还没有给我们提动声明文件

06:00.910 --> 06:03.410
因此我们需要去安装

06:03.910 --> 06:05.410
安装它的声明文件

06:05.910 --> 06:06.410
单独安装

06:06.910 --> 06:07.410
它声明文件在哪

06:07.910 --> 06:09.410
跟我们之前露的是一样的

06:10.910 --> 06:11.410
在这

06:11.910 --> 06:12.410
ADD

06:12.910 --> 06:13.410
横杠地

06:13.910 --> 06:14.910
Types下面

06:15.410 --> 06:15.910
声明文件

06:16.410 --> 06:16.910
Mongo's

06:17.910 --> 06:18.410
把这个安装进来

06:20.790 --> 06:21.290
安装好了

06:21.790 --> 06:23.790
安装好了之后我们再来看

06:24.290 --> 06:25.790
这里它包了一个错误

06:26.290 --> 06:28.790
它说它没有默认导出

06:29.290 --> 06:30.290
没有默认导出

06:30.790 --> 06:31.290
啥意思

06:31.790 --> 06:32.290
我们见过这个错误的

06:33.290 --> 06:34.790
就是说它里边的东西

06:35.290 --> 06:36.290
它导出的时候是怎么导出的

06:36.790 --> 06:38.290
它导出的时候是用这种方式导出的

06:38.790 --> 06:39.790
Exports

06:40.290 --> 06:42.290
那么这种方式导出的话

06:42.790 --> 06:44.290
我要用Es6的方式导入

06:44.790 --> 06:45.290
怎么办

06:45.790 --> 06:46.290
我们以前做过的

06:46.790 --> 06:47.290
怎么办

06:47.790 --> 06:49.290
配置一下

06:49.790 --> 06:51.290
这里写上那个配置

06:51.790 --> 06:52.790
EsMaju

06:53.290 --> 06:54.290
Interrupt

06:54.790 --> 06:55.290
把社会处

06:56.290 --> 06:58.290
用EsMaju的方式来解决

06:59.290 --> 07:00.290
解决这样的问题

07:01.290 --> 07:01.790
好

07:02.290 --> 07:03.790
那么现在我们把导入之后

07:04.290 --> 07:05.290
我们就可以看到

07:05.790 --> 07:08.290
这里边已经有了完整的类型检查

07:08.790 --> 07:09.790
它有各种各样的类型

07:10.790 --> 07:12.790
其中有一个叫Skema

07:13.290 --> 07:13.790
Skema

07:14.290 --> 07:14.790
你看一下

07:15.290 --> 07:15.790
其实我现在

07:16.290 --> 07:18.790
比方说我现在已经很久没有用过MangoDB了

07:19.290 --> 07:19.790
我忘了它怎么写了

07:20.290 --> 07:21.290
我隐隐约约

07:21.790 --> 07:22.790
只记得它有一个Skema

07:23.290 --> 07:24.790
我当我打出来过后

07:25.290 --> 07:25.790
它就会提示我

07:26.290 --> 07:26.790
它是一个啥

07:27.790 --> 07:28.790
它是一个Class

07:29.290 --> 07:30.290
它是一个内

07:30.790 --> 07:31.790
那内应该怎么样

07:32.290 --> 07:33.790
是不是应该创建一个对象

07:34.290 --> 07:36.790
应该去6一个Skema

07:37.290 --> 07:38.290
来创建一个对象

07:39.290 --> 07:40.290
而创建对象的时候

07:40.790 --> 07:41.790
它会是不是在提示里

07:42.290 --> 07:43.790
它可以进行配置

07:44.290 --> 07:44.790
第一个配置

07:45.290 --> 07:46.790
第一个参数表示Defination

07:47.790 --> 07:48.290
表示定义

07:48.790 --> 07:50.290
定义这个结构

07:50.790 --> 07:51.790
定义这个结构

07:52.290 --> 07:52.790
电影

07:53.290 --> 07:54.790
有哪些东西你把它定义下来

07:55.790 --> 07:57.790
第二个参数是一些额外的配置

07:58.290 --> 07:59.290
比方说我们回忆一下

07:59.790 --> 08:00.290
VersionT

08:00.790 --> 08:02.290
你看有智能提示就不会写错了

08:02.790 --> 08:04.290
VersionT把它设为Force

08:04.790 --> 08:05.290
不然的话

08:05.290 --> 08:06.790
它会自动给你生存什么呢

08:07.290 --> 08:08.790
它会给你自动生存一些

08:09.290 --> 08:11.290
就是一个版本号

08:11.790 --> 08:12.790
不让它自动生存版本号

08:14.290 --> 08:16.290
好 第一个参数里面是一个电影对象

08:16.790 --> 08:18.290
那电影对象里面是不是要配置

08:18.790 --> 08:20.790
我们知道之前的属性一个个来呗

08:21.290 --> 08:21.790
一个个来

08:22.290 --> 08:23.290
好 第一个Name

08:24.790 --> 08:26.290
是一个支付串

08:26.790 --> 08:27.290
是一个支付串

08:27.790 --> 08:29.790
好 那么它现在其实大家已经发现了

08:30.290 --> 08:32.790
TS令程包了一个警告

08:33.290 --> 08:33.790
包了一个错误

08:34.290 --> 08:34.790
它说什么呢

08:35.290 --> 08:37.290
它说这个表达是我没有使用

08:37.790 --> 08:38.790
没有使用这个表达是

08:39.290 --> 08:40.790
就是我们以前怎么写的这个代码

08:41.290 --> 08:41.790
以前是怎么写的

08:42.290 --> 08:43.790
会用一个变量来接收对吧

08:44.290 --> 08:44.790
会用一个变量来接收

08:45.290 --> 08:46.290
我们来接受一下

08:46.790 --> 08:48.290
Movie Schema

08:48.790 --> 08:49.290
Movie Schema

08:49.790 --> 08:50.790
用个变量接收一下就完成了

08:53.290 --> 08:54.790
这里它又包了一个警告

08:55.290 --> 08:57.290
这个错误说一下

08:57.790 --> 08:58.790
这个错误指的是

08:59.290 --> 09:01.290
它像这种属性的列表

09:02.290 --> 09:04.290
属性的列表它要求你每一个属性之后

09:04.290 --> 09:05.290
加一个兜号

09:05.790 --> 09:07.290
不管它是不是最后一个属性

09:07.790 --> 09:09.290
每一个属性之后加一个兜号

09:09.790 --> 09:12.290
这其实也是一种代码风格吧

09:13.290 --> 09:15.790
如果你们公司使用那种风格的话

09:16.290 --> 09:18.290
那你老老实实把这个兜号再加上

09:19.290 --> 09:21.290
如果你们公司没有使用那种风格的话

09:21.790 --> 09:23.790
你把这个配置给它取消掉

09:24.290 --> 09:25.790
把这个配置配置一下

09:27.290 --> 09:29.290
在这边TS令程这里

09:30.290 --> 09:31.290
加上那个配置

09:31.790 --> 09:33.290
把它设置为Force就完成了

09:35.290 --> 09:38.290
这里我们要一式去书写电影的属性

09:38.790 --> 09:41.290
有些人说你这里不是有重复代码吗

09:41.790 --> 09:43.290
你这里边写了一次属性

09:43.790 --> 09:45.290
我这里要重新去写一次属性

09:45.790 --> 09:46.790
是不是有重复代码

09:47.290 --> 09:47.790
对不对

09:48.290 --> 09:49.290
是不是有重复代码

09:49.790 --> 09:50.790
当然是有重复代码

09:51.290 --> 09:52.290
当然是有重复代码

09:52.790 --> 09:53.790
这个没办法

09:54.290 --> 09:55.290
这就是我说的不完美

09:55.790 --> 09:56.790
没办法

09:57.790 --> 09:58.290
然后这里

09:58.790 --> 09:59.790
Arius

10:00.790 --> 10:02.790
也是一个制不错的输出

10:05.870 --> 10:06.870
然后继续

10:07.370 --> 10:07.870
还有啥呢

10:08.370 --> 10:10.870
还有这个TimeLog

10:11.870 --> 10:13.870
TimeLog是Number数字

10:14.870 --> 10:15.870
还有啥呢

10:16.370 --> 10:17.870
还有It'sHot

10:18.370 --> 10:18.870
It'sHot

10:19.870 --> 10:20.870
是一个Ball

10:22.370 --> 10:22.870
还有啥

10:23.870 --> 10:24.870
It'sCommit

10:25.370 --> 10:25.870
It'sClassic

10:26.370 --> 10:26.870
这些都是Ball

10:30.370 --> 10:30.870
还有啥

10:32.870 --> 10:33.870
It'sClassic

10:35.870 --> 10:36.370
不利

10:36.870 --> 10:37.370
还有啥

10:38.370 --> 10:39.370
还有Description

10:41.370 --> 10:43.370
这个地方是一个制不错

10:44.370 --> 10:44.870
还有啥

10:45.870 --> 10:46.870
还有Poster

10:47.370 --> 10:48.370
也是个制不错

10:49.370 --> 10:50.370
这个没办法

10:50.370 --> 10:52.370
这个重复代码我们现在是解决不了的

10:52.370 --> 10:52.870
没办法

10:53.370 --> 10:54.370
我们这里把它写完了

10:54.870 --> 10:57.870
这里又有一个TSNint的错误

10:58.370 --> 10:59.370
他说

11:00.870 --> 11:01.370
他说啥呢

11:01.370 --> 11:02.870
他说这个Arius

11:03.870 --> 11:04.870
他没有按照

11:05.370 --> 11:06.370
这个排序

11:06.870 --> 11:07.870
没有按照什么

11:08.370 --> 11:10.370
就是那个字母顺序排序

11:10.370 --> 11:11.870
他没有按照字母顺序排序

11:11.870 --> 11:12.370
啥意思呢

11:12.370 --> 11:15.370
就是说他应该这个A开头的属性

11:15.870 --> 11:17.370
应该写前边

11:17.370 --> 11:18.370
就是这些属性

11:18.870 --> 11:19.870
就是这些列表

11:19.870 --> 11:21.870
应该按照字母的顺序排序

11:22.870 --> 11:24.370
我这个东西实在是有点

11:24.370 --> 11:25.370
受不了

11:25.370 --> 11:26.370
实在是有点受不了

11:26.370 --> 11:27.370
把这个配置取消掉了

11:28.870 --> 11:30.870
如果你们公司有这样的要求的话

11:30.870 --> 11:31.870
你需要把它写上

11:32.370 --> 11:34.370
我以前做一个项目的时候有这么一个要求

11:34.870 --> 11:36.370
因为它搞入的东西比较多

11:36.870 --> 11:37.870
设为Force

11:39.370 --> 11:40.370
设置好了之后

11:40.870 --> 11:43.870
那么这里我们就得到这么一个结构了

11:43.870 --> 11:44.870
得到这么一个结构了

11:45.870 --> 11:48.370
那么现在我们要讨论一个问题

11:48.370 --> 11:49.370
这种写法

11:49.370 --> 11:51.370
我们目前这种写法

11:51.370 --> 11:54.370
跟以前的GS是没有任何差别的

11:54.370 --> 11:55.870
除了有智能提示之外

11:55.870 --> 11:57.870
当然这样子有了智能提示

11:57.870 --> 11:58.870
已经非常非常好了

11:58.870 --> 11:59.370
对吧

11:59.370 --> 12:00.870
你不容易写错

12:00.870 --> 12:03.870
比方说你这个地方把K变成了小写

12:03.870 --> 12:04.870
它马上就爆错了

12:04.870 --> 12:06.870
你看以前是得不到这样的提示的

12:07.370 --> 12:08.870
现在不容易出错了

12:08.870 --> 12:09.870
这是一个好处

12:09.870 --> 12:11.870
但是还有一个根本的

12:11.870 --> 12:13.870
很严重的问题没有解决

12:13.870 --> 12:16.870
就是以前咱们在书写MangoDB的时候

12:16.870 --> 12:18.870
就Mango-z的时候

12:18.870 --> 12:19.870
我们得到一个集合

12:19.870 --> 12:22.870
得到一个集合过后是没有内雄检查的

12:22.870 --> 12:24.870
得不到任何的内雄检查

12:24.870 --> 12:26.870
就是说我们得到这个集合

12:26.870 --> 12:27.870
明明是一个电影的集合

12:27.870 --> 12:29.870
但是我们循环

12:29.870 --> 12:31.870
去循环每一个电影对象的时候

12:31.870 --> 12:32.870
得不到它里边的属性

12:32.870 --> 12:34.870
它不知道这里面有哪些属性

12:34.870 --> 12:36.870
因此我们最好希望

12:36.870 --> 12:40.870
这个Mango-z能够把内雄检查

12:40.870 --> 12:42.870
给我们加上

12:42.870 --> 12:44.870
到时候我们通过它来取数据的时候

12:44.870 --> 12:45.870
能够清楚的知道

12:45.870 --> 12:47.870
我们要取哪些数据

12:47.870 --> 12:49.870
取的数据每个属性是什么意思

12:49.870 --> 12:50.870
是什么内雄

12:50.870 --> 12:52.870
什么意思

12:52.870 --> 12:56.870
就是要加上一些内雄检查

12:56.870 --> 12:57.870
怎么加

12:57.870 --> 12:58.870
其实很简单

12:58.870 --> 13:00.870
当你使用了

13:00.870 --> 13:02.870
这个TS过后

13:02.870 --> 13:04.870
允许你

13:04.870 --> 13:06.870
在使用这个Skeema的时候

13:06.870 --> 13:10.240
给它加一个翻雄

13:10.240 --> 13:11.240
给它加一个翻雄

13:11.240 --> 13:14.240
这个翻雄就代表的是

13:14.240 --> 13:15.240
你这个模型的

13:15.240 --> 13:17.240
每一个字段的内雄

13:17.240 --> 13:19.240
这个翻雄就代表的是

13:19.240 --> 13:22.240
这个集合

13:22.240 --> 13:24.240
它里边每一个属性的内雄

13:24.240 --> 13:26.240
有一种人说

13:26.240 --> 13:27.240
这个属性的内雄

13:27.240 --> 13:28.240
不是我配置在这吗

13:28.240 --> 13:29.240
大家注意

13:29.240 --> 13:31.240
这个东西是GS代

13:31.240 --> 13:33.240
你看这里的书写

13:33.240 --> 13:35.240
跟以前是一样的

13:35.240 --> 13:36.240
S大写的

13:36.240 --> 13:38.240
你看这个数组是这样子书写的

13:38.240 --> 13:40.240
这里写的是GS代

13:40.240 --> 13:43.240
是在运行的时候生效的

13:43.240 --> 13:45.240
而不是在编译的时候生效

13:45.240 --> 13:47.240
是在运行的时候生效的

13:47.240 --> 13:49.240
所以说这里的配置

13:49.240 --> 13:51.240
不能够帮助它进行

13:51.240 --> 13:52.240
内雄的推断

13:52.240 --> 13:54.240
无法完成内雄的推断

13:54.240 --> 13:56.240
那么这个时候怎么办

13:56.240 --> 13:57.240
咋办

13:57.240 --> 13:58.240
我们在这里

13:58.240 --> 14:00.240
可以使用

14:00.240 --> 14:01.240
可以使用什么样子

14:01.240 --> 14:03.240
可以使用一个接口

14:03.240 --> 14:05.240
来定义它的内雄

14:05.240 --> 14:07.240
我们这里可以使用一个

14:07.240 --> 14:08.240
interface

14:08.240 --> 14:09.240
两个取名字

14:09.240 --> 14:12.240
iMovie

14:12.240 --> 14:14.240
定义这么一个接口

14:14.240 --> 14:16.240
这个接口里边

14:16.240 --> 14:18.240
重新写一次

14:18.240 --> 14:19.240
把S小写

14:19.240 --> 14:21.240
这个地方提出来

14:21.240 --> 14:22.240
所以觉得有点麻烦

14:22.240 --> 14:23.240
重复了多少次了

14:23.240 --> 14:24.240
这个代码

14:24.240 --> 14:25.240
这里一次

14:25.240 --> 14:26.240
这边一次

14:26.240 --> 14:27.240
然后这边一次

14:27.240 --> 14:28.240
重复了很多次了

14:28.240 --> 14:29.240
好

14:29.240 --> 14:30.240
那这里

14:30.240 --> 14:31.240
可以取巧

14:31.240 --> 14:32.240
我们可以取巧

14:32.240 --> 14:33.240
怎么取巧呢

14:33.240 --> 14:35.240
我们让这个接口

14:35.240 --> 14:36.240
iMovie

14:36.240 --> 14:37.240
去继承

14:37.240 --> 14:38.240
也是天子

14:38.240 --> 14:40.240
接口不是可以继承吗

14:40.240 --> 14:41.240
继承谁呢

14:41.240 --> 14:42.240
继承内

14:42.240 --> 14:45.560
继承Movie

14:45.560 --> 14:47.560
好 这样子一继承过后

14:47.560 --> 14:49.560
这样子一继承过后

14:49.560 --> 14:51.560
你想啊

14:51.560 --> 14:52.560
继承过后

14:52.560 --> 14:54.560
Movie内里边的所有的字段

14:54.560 --> 14:55.560
所有的属性

14:55.560 --> 14:56.560
是不是它里边都有了

14:56.560 --> 14:57.560
对不对

14:57.560 --> 14:58.560
它里边都有了

14:58.560 --> 14:59.560
好

14:59.560 --> 15:01.560
然后我再把这个接口

15:01.560 --> 15:02.560
放过来

15:02.560 --> 15:04.560
再把这个接口放过来

15:04.560 --> 15:05.560
好

15:05.560 --> 15:06.560
这样子写了

15:06.560 --> 15:07.560
就差不多了

15:07.560 --> 15:08.560
就差不多了

15:08.560 --> 15:09.560
好 但是呢

15:09.560 --> 15:10.560
但是呢

15:10.560 --> 15:11.560
我这里要说一个问题

15:11.560 --> 15:13.560
在Movie里边

15:13.560 --> 15:14.560
它要要求

15:14.560 --> 15:15.560
这个接口呢

15:15.560 --> 15:17.560
你要去继承另外一个

15:17.560 --> 15:20.560
Movie里边提供的一个内容

15:20.560 --> 15:21.560
为什么呢

15:21.560 --> 15:22.560
因为你看这个接口里边

15:22.560 --> 15:23.560
我们继承了Movie过后

15:23.560 --> 15:25.560
是不是还少了一些东西

15:25.560 --> 15:26.560
少了啥

15:26.560 --> 15:28.560
是不是少了ID

15:28.560 --> 15:29.560
还少了啥

15:29.560 --> 15:31.560
还少了一些函数

15:31.560 --> 15:32.560
比方说C5函数

15:32.560 --> 15:33.560
对吧

15:33.560 --> 15:34.560
还少了一些C5函数

15:34.560 --> 15:36.560
还少了一些实用的函数

15:36.560 --> 15:37.560
因此呢

15:37.560 --> 15:38.560
我们这里这个接口

15:38.560 --> 15:41.560
除了拥有自己的这些成员之外

15:41.560 --> 15:43.560
还要拥有

15:43.560 --> 15:45.560
因为它是数据库的对象

15:45.560 --> 15:46.560
因此呢

15:46.560 --> 15:48.560
还要拥有一些常用的函数啊

15:48.560 --> 15:49.560
比方说组建ID啊

15:49.560 --> 15:50.560
这些东西

15:50.560 --> 15:51.560
那么这些东西在哪呢

15:51.560 --> 15:53.560
这些东西我们不用自己写

15:53.560 --> 15:54.560
这些东西已经有了

15:54.560 --> 15:55.560
在哪呢

15:55.560 --> 15:58.560
在Mongus Documents里边

15:58.560 --> 16:01.560
所以说你这个接口去继承两个东西

16:01.560 --> 16:02.560
一个东西呢

16:02.560 --> 16:03.560
是Movie

16:03.560 --> 16:04.560
一个东西呢

16:04.560 --> 16:06.560
就是我们自己的定义的内容

16:06.560 --> 16:07.560
一个东西呢

16:07.560 --> 16:09.560
是Mongus.Document

16:09.560 --> 16:10.560
表示它是一个文档

16:10.560 --> 16:11.560
它是一个文档

16:11.560 --> 16:12.560
好

16:12.560 --> 16:13.560
这样子一继承了

16:13.560 --> 16:14.560
这个接口里边

16:14.560 --> 16:16.560
既拥有了它的东西

16:16.560 --> 16:18.560
又拥有了它的东西

16:18.560 --> 16:19.560
好

16:19.560 --> 16:21.560
我们把这个接口的内容呢

16:21.560 --> 16:24.560
作为我们的这里啊

16:24.560 --> 16:26.560
在内形检查期间

16:26.560 --> 16:27.560
我们使用的内形

16:27.560 --> 16:28.560
注意啊

16:28.560 --> 16:29.560
这里的写的内形啊

16:29.560 --> 16:30.560
写的范形

16:30.560 --> 16:32.560
指的是在内形检查期间

16:32.560 --> 16:34.560
就是我们编写代码的时候

16:34.560 --> 16:36.560
它推荐出来的内形

16:36.560 --> 16:37.560
而这里的内形呢

16:37.560 --> 16:39.560
是在运行的过程中

16:39.560 --> 16:40.560
它的内形

16:40.560 --> 16:41.560
这一切的根源啊

16:41.560 --> 16:42.560
都是因为GS

16:42.560 --> 16:44.560
它没有内形检查

16:44.560 --> 16:45.560
而TS呢

16:45.560 --> 16:47.560
目前还不是

16:47.560 --> 16:49.560
不太愿意

16:49.560 --> 16:52.560
参与运行时的内形检查

16:52.560 --> 16:53.560
为什么不太愿意呢

16:53.560 --> 16:55.560
因为它会影响效率

16:55.560 --> 16:56.560
在运行时的内形检查

16:56.560 --> 16:57.560
它会加入很多的代码

16:57.560 --> 16:59.560
它会影响执行效率

16:59.560 --> 17:00.560
所以说目前呢

17:00.560 --> 17:02.560
TS还没有涉及

17:02.560 --> 17:04.560
运行时的内形检查

17:04.560 --> 17:06.560
所以导致了这样的问题

17:06.560 --> 17:07.560
这样的问题呢

17:07.560 --> 17:08.560
目前还找不到

17:08.560 --> 17:10.560
一个完美的解决办法

17:10.560 --> 17:11.560
但是代码呢

17:11.560 --> 17:12.560
其实写的多少

17:12.560 --> 17:13.560
多不多呢

17:13.560 --> 17:14.560
也不多

17:14.560 --> 17:15.560
这些代码是不是

17:15.560 --> 17:16.560
以前介石也在写

17:16.560 --> 17:17.560
对不对

17:17.560 --> 17:19.560
只加了这么一句话而已

17:19.560 --> 17:20.560
好

17:20.560 --> 17:21.560
最后呢

17:21.560 --> 17:22.560
我们导出

17:22.560 --> 17:23.560
用以前的写法

17:23.560 --> 17:24.560
导出

17:24.560 --> 17:25.560
导出啥呢

17:25.560 --> 17:26.560
导出mongus

17:26.560 --> 17:28.560
里边不是一个mod

17:28.560 --> 17:29.560
对吧

17:29.560 --> 17:30.560
mod

17:30.560 --> 17:31.560
通过这个函数

17:31.560 --> 17:32.560
通过这个函数

17:32.560 --> 17:34.560
来导出一个东西

17:34.560 --> 17:35.560
导出什么呢

17:35.560 --> 17:37.560
导出mod

17:37.560 --> 17:39.560
导出movie

17:39.560 --> 17:40.560
我们的数据库

17:40.560 --> 17:41.560
这个表

17:41.560 --> 17:42.560
不是表

17:42.560 --> 17:43.560
这个集合呢

17:43.560 --> 17:44.560
叫做movie

17:44.560 --> 17:45.560
然后呢

17:45.560 --> 17:46.560
schema

17:46.560 --> 17:48.560
我们的结构

17:48.560 --> 17:50.560
使用movie schema

17:50.560 --> 17:51.560
导出这么关呀

17:51.560 --> 17:53.560
导出这个东西

17:53.560 --> 17:54.560
好

17:54.560 --> 17:55.560
导出的时候呢

17:55.560 --> 17:56.560
其实

17:56.560 --> 17:57.560
其实导出的时候

17:57.560 --> 17:58.560
你看

17:58.560 --> 17:59.560
它有内形推断的

17:59.560 --> 18:00.560
我们看一下

18:00.560 --> 18:01.560
内形推断

18:01.560 --> 18:02.560
它推断出来是什么呢

18:02.560 --> 18:03.560
它什么也没推断出来

18:03.560 --> 18:04.560
它并不知道

18:04.560 --> 18:05.560
你这一块导出的

18:05.560 --> 18:07.560
就是一个movie对象

18:07.560 --> 18:08.560
导出的就是个movie

18:08.560 --> 18:09.560
因此呢

18:09.560 --> 18:10.560
这里呢

18:10.560 --> 18:11.560
其实我们还得用

18:11.560 --> 18:12.560
范形告诉他

18:12.560 --> 18:13.560
还得用范形告诉他

18:13.560 --> 18:14.560
我们导出的东西呢

18:14.560 --> 18:15.560
是一个movie

18:15.560 --> 18:17.560
导出的是一个movie

18:17.560 --> 18:18.560
总之呢

18:18.560 --> 18:20.560
你现在先别管

18:20.560 --> 18:22.560
如果你现在很理解不了

18:22.560 --> 18:23.560
不知道为什么要这样做

18:23.560 --> 18:24.560
先别管

18:24.560 --> 18:25.560
先别管

18:25.560 --> 18:26.560
我们先这样子写

18:26.560 --> 18:27.560
一会儿呢

18:27.560 --> 18:28.560
我们写到后边

18:28.560 --> 18:29.560
去使用这个数据库的时候

18:29.560 --> 18:30.560
你就明白了

18:30.560 --> 18:31.560
为什么这样做

18:31.560 --> 18:32.560
有什么样的好处

18:32.560 --> 18:33.560
你就明白了

18:33.560 --> 18:34.560
好

18:34.560 --> 18:35.560
这样子呢

18:35.560 --> 18:36.560
就是我们再说一次

18:36.560 --> 18:37.560
这个代码呢

18:37.560 --> 18:38.560
跟以前是一样的

18:38.560 --> 18:39.560
是一样的

18:39.560 --> 18:41.560
跟以前结构怎么写

18:41.560 --> 18:42.560
现在怎么写

18:42.560 --> 18:43.560
只不过呢

18:43.560 --> 18:44.560
这里加了一个范形

18:44.560 --> 18:45.560
然后表示

18:45.560 --> 18:47.560
就是编译期间

18:47.560 --> 18:48.560
写代码的时候

18:48.560 --> 18:50.560
他要进行的类型检查

18:50.560 --> 18:51.560
使用什么样的类型

18:51.560 --> 18:53.560
来作为检查的目标

18:53.560 --> 18:54.560
那么这里我该写的

18:54.560 --> 18:55.560
结构

18:55.560 --> 18:56.560
这个结构呢

18:56.560 --> 18:58.560
必须要去继承它

18:58.560 --> 19:00.560
必须要去继承它

19:00.560 --> 19:01.560
然后呢

19:01.560 --> 19:02.560
我们可以

19:02.560 --> 19:03.560
如果已经有了

19:03.560 --> 19:04.560
一个内的话

19:04.560 --> 19:05.560
你可以去继承这个内

19:05.560 --> 19:06.560
就不用去重复

19:06.560 --> 19:07.560
书写代码了

19:07.560 --> 19:08.560
你就直接使用

19:08.560 --> 19:09.560
这个内里边的成员

19:09.560 --> 19:10.560
好

19:10.560 --> 19:11.560
就加这个东西

19:11.560 --> 19:12.560
然后呢

19:12.560 --> 19:13.560
这个导出的时候

19:13.560 --> 19:15.560
把这个范形放账

19:15.560 --> 19:17.560
就加这两个东西

19:17.560 --> 19:18.560
你先别管

19:18.560 --> 19:19.560
把加上

19:19.560 --> 19:20.560
加上之后呢

19:20.560 --> 19:21.560
我们在后边看一下

19:21.560 --> 19:23.560
它有什么样的作用

19:23.560 --> 19:24.560
好

19:24.560 --> 19:25.560
有了这个东西之后

19:25.560 --> 19:26.560
我们再来写个

19:26.560 --> 19:27.560
数据库的配置

19:27.560 --> 19:29.560
db.ts

19:29.560 --> 19:30.560
好

19:30.560 --> 19:31.560
这个里边呢

19:31.560 --> 19:32.560
我们就是连接数据库

19:32.560 --> 19:34.560
然后导出这个数据库里面

19:34.560 --> 19:35.560
一些那些什么东西

19:35.560 --> 19:36.560
统一导出

19:36.560 --> 19:37.560
这里呢

19:37.560 --> 19:38.560
我们首先导入

19:38.560 --> 19:40.560
猫库

19:40.560 --> 19:42.560
猫库

19:42.560 --> 19:44.560
猫库

19:44.560 --> 19:45.560
好

19:45.560 --> 19:46.560
导入进来

19:46.560 --> 19:47.560
导入进来过后呢

19:47.560 --> 19:48.560
这里边

19:48.560 --> 19:49.560
它不是提供了一个

19:49.560 --> 19:50.560
韩束

19:50.560 --> 19:51.560
叫Connect

19:51.560 --> 19:52.560
对吧

19:52.560 --> 19:53.560
连接

19:53.560 --> 19:54.560
连接数据库

19:54.560 --> 19:55.560
好

19:55.560 --> 19:56.560
首先给一个连接字母创

19:56.560 --> 19:57.560
连接字母创

19:57.560 --> 19:58.560
是怎么写的

19:58.560 --> 19:59.560
猫库db

19:59.560 --> 20:00.560
对吧

20:00.560 --> 20:01.560
然后呢

20:01.560 --> 20:03.560
localhost

20:03.560 --> 20:06.560
然后27017

20:06.560 --> 20:07.560
然后写杠

20:07.560 --> 20:08.560
后边写上什么呢

20:08.560 --> 20:10.560
写上数据库的名字

20:10.560 --> 20:11.560
数据库的名字

20:11.560 --> 20:12.560
我们就给它取名为

20:12.560 --> 20:15.560
movdb

20:15.560 --> 20:16.560
好

20:16.560 --> 20:17.560
写好了

20:17.560 --> 20:18.560
然后呢

20:18.560 --> 20:19.560
后边是有配置

20:19.560 --> 20:20.560
有配置

20:20.560 --> 20:21.560
你这样写的话

20:21.560 --> 20:22.560
它会包一个警告的

20:22.560 --> 20:23.560
应该有些同学都记得

20:23.560 --> 20:25.560
我们应该写上这个东西

20:25.560 --> 20:27.560
usnew urlposer

20:27.560 --> 20:28.560
其实现在已经好了多了

20:28.560 --> 20:29.560
它有智能体式的

20:29.560 --> 20:30.560
对吧

20:30.560 --> 20:31.560
稍微true

20:31.560 --> 20:32.560
好

20:32.560 --> 20:34.560
连接完成之后

20:34.560 --> 20:35.560
连接完成之后呢

20:35.560 --> 20:36.560
这是一个异步的

20:36.560 --> 20:39.560
写一个异步的韩束

20:39.560 --> 20:40.560
连接完成之后

20:40.560 --> 20:42.560
我们输出一个东西

20:42.560 --> 20:44.560
console log

20:44.560 --> 20:50.560
是连接数据库成功

20:50.560 --> 20:53.560
连接数据库成功

20:53.560 --> 20:54.560
好

20:54.560 --> 20:55.560
连接成功之后呢

20:55.560 --> 20:57.560
我们再导出

20:57.560 --> 20:58.560
导出

20:58.560 --> 20:59.560
导出啥呢

20:59.560 --> 21:01.560
我们导出一个一个的

21:01.560 --> 21:02.560
就是模型吧

21:02.560 --> 21:03.560
把这些movey

21:03.560 --> 21:04.560
把这些movey

21:04.560 --> 21:06.560
这些东西全部导出

21:06.560 --> 21:07.560
如果这里面还有什么

21:07.560 --> 21:08.560
电影院

21:08.560 --> 21:09.560
还有用户

21:09.560 --> 21:10.560
各种各样的结构

21:10.560 --> 21:11.560
我们把一次导出

21:11.560 --> 21:12.560
统一通过这个

21:12.560 --> 21:13.560
这个文件来导出

21:13.560 --> 21:15.560
这个是我习惯的做法

21:15.560 --> 21:16.560
不知道大家怎么做

21:16.560 --> 21:17.560
无所谓

21:17.560 --> 21:18.560
总归

21:18.560 --> 21:20.560
一把数据库连接就行了

21:20.560 --> 21:21.560
在定义

21:21.560 --> 21:22.560
定义结构的时候呢

21:22.560 --> 21:23.560
加上这个

21:23.560 --> 21:24.560
加上这两个位置

21:24.560 --> 21:25.560
加上范小

21:25.560 --> 21:27.560
其他的都一样

21:27.560 --> 21:28.560
好

21:28.560 --> 21:29.560
这里呢

21:29.560 --> 21:30.560
我们先把那个导入

21:30.560 --> 21:32.560
先把这个movey导入

21:32.560 --> 21:33.560
从这个

21:33.560 --> 21:35.560
当前目的下面的movey schema

21:35.560 --> 21:36.560
导入

21:36.560 --> 21:37.560
导入过后呢

21:37.560 --> 21:38.560
我们在这里统一导出

21:38.560 --> 21:40.560
movey

21:40.560 --> 21:41.560
movey

21:41.560 --> 21:42.560
movey

21:42.560 --> 21:44.560
为什么要有大货号扩起来

21:44.560 --> 21:46.560
为什么

21:46.560 --> 21:48.560
因为你这里

21:48.560 --> 21:50.560
通过这种方式导出的话

21:50.560 --> 21:52.560
它必须要导出一个声明

21:52.560 --> 21:54.560
就是要导出一个方形

21:54.560 --> 21:55.560
比方说

21:55.560 --> 21:56.560
要导出一个函数方形

21:56.560 --> 21:57.560
或者导出一个变量

21:57.560 --> 21:58.560
哇

21:58.560 --> 22:00.560
总之要声明

22:00.560 --> 22:02.560
但是如果我导出一个变量的话

22:02.560 --> 22:03.560
我直接导出一个

22:03.560 --> 22:05.560
以存在的变量的话

22:05.560 --> 22:06.560
它不允许的

22:06.560 --> 22:08.560
那这种情况下呢

22:08.560 --> 22:10.560
也要用两个大货号把它扩起来

22:10.560 --> 22:12.560
当然如果你可以用默认导出也行

22:12.560 --> 22:14.560
但是我这里不太合适

22:14.560 --> 22:15.560
用默认导出

22:15.560 --> 22:16.560
为什么呢

22:16.560 --> 22:17.560
因为

22:17.560 --> 22:18.560
这个文件里边呢

22:18.560 --> 22:19.560
将来呢

22:19.560 --> 22:20.560
它可能还有隐缘

22:20.560 --> 22:21.560
还要导出隐缘

22:21.560 --> 22:23.560
还要导出用户

22:23.560 --> 22:24.560
还要导出各种各样的对象

22:24.560 --> 22:25.560
数据库对象

22:25.560 --> 22:26.560
都从这里导出

22:26.560 --> 22:28.560
所以说不太合适

22:28.560 --> 22:31.560
用那个默认导出不太合适

22:31.560 --> 22:32.560
好

22:32.560 --> 22:33.560
我们就用这种方式

22:33.560 --> 22:34.560
将来呢

22:34.560 --> 22:35.560
如果我们做了

22:35.560 --> 22:38.560
一个隐缘的结构

22:38.560 --> 22:39.560
那么这里呢

22:39.560 --> 22:40.560
我们还要导出隐缘

22:40.560 --> 22:41.560
总之这个文件呢

22:41.560 --> 22:43.560
我们提供一个入口文件

22:43.560 --> 22:44.560
通过这个文件

22:44.560 --> 22:48.560
我们可以导入数据库里的所有东西

22:48.560 --> 22:49.560
好

22:49.560 --> 22:50.560
有了这个东西过后呢

22:50.560 --> 22:51.560
我们再来看一下

22:51.560 --> 22:53.560
来测试一下

22:53.560 --> 22:54.560
测试一下

22:54.560 --> 22:55.560
好

22:55.560 --> 22:56.560
我们这里呢

22:56.560 --> 22:58.560
我们这里是

22:58.560 --> 22:59.560
通过

22:59.560 --> 23:01.560
通过这个

23:01.560 --> 23:03.560
导入一个地币

23:03.560 --> 23:06.560
这个地币里面的move

23:06.560 --> 23:08.560
导入地币里面的move

23:08.560 --> 23:10.560
from

23:10.560 --> 23:14.560
地币里边的move

23:14.560 --> 23:17.560
从地币里面导入个move

23:17.560 --> 23:19.560
好像在叫这个名字不太好

23:19.560 --> 23:20.560
对吧

23:20.560 --> 23:21.560
叫这个move的名字

23:21.560 --> 23:22.560
这个名字不太好

23:22.560 --> 23:24.560
因为跟这边的名字重复了

23:24.560 --> 23:26.560
容易造成混淆

23:26.560 --> 23:27.560
应该是这样子

23:27.560 --> 23:28.560
这样子来吧

23:28.560 --> 23:29.560
我把数据库里面的

23:29.560 --> 23:30.560
所有对象呢

23:30.560 --> 23:32.560
把它叫做move mode

23:32.560 --> 23:35.560
把它重新命个名字

23:35.560 --> 23:37.560
move mode

23:37.560 --> 23:39.560
后来在上面重新命个名字

23:39.560 --> 23:41.560
move mode

23:41.560 --> 23:43.560
数据库的模型

23:43.560 --> 23:44.560
数据库模型

23:44.560 --> 23:47.560
那么这边使用的是move mode

23:47.560 --> 23:48.560
这样子好一点

23:48.560 --> 23:50.560
区分一下

23:50.560 --> 23:51.560
好

23:51.560 --> 23:52.560
那么这边呢

23:52.560 --> 23:53.560
我们就使用

23:53.560 --> 23:54.560
导入的是什么呢

23:54.560 --> 23:56.560
导入的是move mode

23:56.560 --> 23:57.560
这里我写错了

23:57.560 --> 23:59.560
是这个地币文件下边的

23:59.560 --> 24:01.560
这个地币.ts

24:01.560 --> 24:02.560
也或者是

24:02.560 --> 24:03.560
你可以这里写

24:03.560 --> 24:04.560
index.ts

24:04.560 --> 24:05.560
也行

24:05.560 --> 24:08.560
我们写index.ts

24:08.560 --> 24:09.560
好

24:09.560 --> 24:10.560
那这边呢

24:10.560 --> 24:11.560
就写着稍微舒服一点

24:11.560 --> 24:12.560
直接导入地币就行了

24:12.560 --> 24:14.560
因为它默正读的就是index

24:14.560 --> 24:15.560
好

24:15.560 --> 24:17.560
写好之后

24:17.560 --> 24:19.560
那我们来用一下

24:19.560 --> 24:20.560
来用一下

24:20.560 --> 24:21.560
move mode

24:21.560 --> 24:22.560
里边

24:22.560 --> 24:23.560
你看

24:23.560 --> 24:25.560
我给提供了好多好多东西

24:25.560 --> 24:26.560
对不对

24:26.560 --> 24:27.560
提供了好多东西

24:27.560 --> 24:28.560
那我们来用一下呗

24:28.560 --> 24:30.560
我们这里通过

24:30.560 --> 24:32.560
通过这个fand

24:32.560 --> 24:34.560
来找到

24:34.560 --> 24:36.560
来找到所有的

24:36.560 --> 24:38.560
找到所有的就是电影

24:38.560 --> 24:39.560
好

24:39.560 --> 24:40.560
找到之后呢

24:40.560 --> 24:41.560
我们通过z

24:41.560 --> 24:42.560
它是个异部的对吧

24:42.560 --> 24:44.560
通过z来找到所有的电影

24:44.560 --> 24:45.560
好

24:45.560 --> 24:46.560
来看一下

24:46.560 --> 24:48.560
这个ms得到的是什么类型呢

24:48.560 --> 24:50.560
大家看一下

24:50.560 --> 24:51.560
你看

24:51.560 --> 24:52.560
现在就有类型推断了

24:52.560 --> 24:54.560
他知道我们这一块

24:54.560 --> 24:55.560
找的是一个什么数组

24:55.560 --> 24:57.560
找的是一个电影的数组

24:57.560 --> 24:58.560
那么也就是说

24:58.560 --> 25:00.560
这个地方

25:00.560 --> 25:01.560
ms它是一个

25:01.560 --> 25:02.560
电影的数组

25:02.560 --> 25:04.560
那我们是不是可以循环它

25:04.560 --> 25:05.560
for each

25:05.560 --> 25:06.560
每一循环

25:06.560 --> 25:07.560
是不是有电影

25:07.560 --> 25:08.560
而每一个电影

25:08.560 --> 25:09.560
是不是有

25:09.560 --> 25:11.560
你看一下这些数项

25:11.560 --> 25:12.560
areals

25:12.560 --> 25:13.560
地区

25:13.560 --> 25:14.560
tabs

25:14.560 --> 25:16.560
内行

25:16.560 --> 25:18.560
电影的name数项名称

25:18.560 --> 25:19.560
对不对

25:19.560 --> 25:20.560
这些全部都

25:20.560 --> 25:21.560
都有了

25:21.560 --> 25:23.560
这些有的前提条件

25:23.560 --> 25:25.560
是因为它这里推断出来

25:25.560 --> 25:27.560
是一个move的数组

25:27.560 --> 25:29.560
它凭什么能够推断出来

25:29.560 --> 25:30.560
是move的数组

25:30.560 --> 25:31.560
就是靠这里

25:31.560 --> 25:33.560
就是靠这里

25:33.560 --> 25:35.560
给它加了这两个方形

25:35.560 --> 25:36.560
明白这个意思吗

25:36.560 --> 25:38.560
为什么要加这两个方形

25:38.560 --> 25:39.560
就是为了这里

25:39.560 --> 25:41.560
我们能够得到内行的推断

25:41.560 --> 25:44.560
能够得到内行的约束

25:44.560 --> 25:45.560
好

25:45.560 --> 25:46.560
咱们来试一下吧

25:46.560 --> 25:47.560
当然现在一个电影都没有

25:47.560 --> 25:48.560
一个电影都没有

25:48.560 --> 25:49.560
我们来试一下吧

25:49.560 --> 25:50.560
试一下

25:50.560 --> 25:51.560
看它要不要爆错

25:51.560 --> 25:53.560
主要是看它要不要爆错

25:53.560 --> 25:54.560
我们这里输出

25:54.560 --> 25:55.560
直接输出

25:55.560 --> 25:56.560
console log

25:56.560 --> 25:57.560
ms

25:58.560 --> 25:59.560
输出一下

25:59.560 --> 26:00.560
看一下

26:02.560 --> 26:04.560
这里怎么回事

26:04.560 --> 26:08.120
它说多了一行

26:08.120 --> 26:09.120
多了一行

26:12.120 --> 26:13.120
运行一下

26:13.120 --> 26:15.120
主要是看它要不要爆错

26:15.120 --> 26:16.120
运行

26:20.610 --> 26:21.610
稍微等一下

26:21.610 --> 26:22.610
数据库连接成功

26:22.610 --> 26:23.610
得到了一个空数组

26:23.610 --> 26:24.610
那么说明没有爆错

26:24.610 --> 26:25.610
没有爆错

26:25.610 --> 26:26.610
那就是好消息

26:26.610 --> 26:27.610
就没有问题

26:27.610 --> 26:29.610
而且数据库已经连接成功了

26:29.610 --> 26:30.610
那么现在

26:30.610 --> 26:32.610
我们就把数据库这一块

26:32.610 --> 26:33.610
数据库这一块

26:33.610 --> 26:37.610
至少把结构和数据库的连接

26:37.610 --> 26:38.610
搞定了

26:38.610 --> 26:40.610
其实代码多吗

26:40.610 --> 26:41.610
不多

26:41.610 --> 26:42.610
代码多什么了

26:42.610 --> 26:44.610
跟以前多的哪些代码

26:44.610 --> 26:45.610
没有多什么代码

26:45.610 --> 26:47.610
以前这里不也是这样子写的吗

26:47.610 --> 26:49.610
只不过多了这一行

26:49.610 --> 26:50.610
多了这个地方

26:50.610 --> 26:51.610
多了这个地方

26:51.610 --> 26:55.610
但是我们花一点点时间

26:55.610 --> 26:56.610
去写了这么个代码

26:56.610 --> 26:57.610
是不是安全多了

26:57.610 --> 26:59.610
可以得到更完善的内行检查了

26:59.610 --> 27:01.610
实际上是好事

27:01.610 --> 27:02.610
好

27:02.610 --> 27:05.610
这几课搞定数据库这一块

27:05.610 --> 27:06.610
那么下几课

27:06.610 --> 27:08.610
我们再来写一些方法

27:08.610 --> 27:11.610
写一些函数来处理数据库

27:11.610 --> 27:12.610
来处理数据库

27:12.610 --> 27:13.610
比方说增长改啥

27:13.610 --> 27:14.610
好

27:14.610 --> 27:16.610
我们这几课先到这里

27:16.610 --> 27:17.610
拜拜

