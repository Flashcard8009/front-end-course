WEBVTT

00:00.560 --> 00:03.880
大家好 我是独一教育 微博前程讲师 袁晋

00:04.400 --> 00:06.700
我们上节课呢 做了

00:06.960 --> 00:09.520
真正改查 对吧 四个方法了

00:10.040 --> 00:14.120
还差一个 就是查询多个 查询多个电影

00:14.900 --> 00:20.260
这个方法呢 为了测试啊 我们需要多加一些电影数据进去

00:20.520 --> 00:22.840
需要多加一些电影的数据

00:23.340 --> 00:28.980
这边呢 我们看一下 这里电影里边 关注一下海豹这一块

00:29.340 --> 00:33.340
海豹这一块 我当时是可选的 对吧 是可选的 那没什么问题了

00:33.840 --> 00:36.920
OK 我们这里可以模拟一些电影数据加进去啊

00:37.180 --> 00:40.240
加一些电影数据进去 方便我们后边的进行测试

00:40.760 --> 00:42.800
这边呢 我们就在这里模拟吧

00:43.320 --> 00:44.340
我就在这里模拟

00:44.600 --> 00:46.380
我想加个

00:46.900 --> 00:49.200
100个电影吧 加个100个电影

00:49.460 --> 00:52.020
我这里呢 可以这样子 循环100次

00:52.780 --> 00:55.340
循环100次 方便我们后面测试啊 主要是

00:57.140 --> 00:57.900
这里呢

00:59.180 --> 01:00.220
循环100次

01:00.480 --> 01:04.060
100部电影 然后呢 我这里最好写个水积数啊

01:04.300 --> 01:06.360
最好写个水积函数 电磁软函

01:07.900 --> 01:09.160
然后最小值

01:10.700 --> 01:11.480
最大值

01:13.260 --> 01:16.600
然后产生一个最小值到最大值之间的一个水积数

01:16.860 --> 01:19.660
啊 这个函数呢 没什么好说的 真的是没什么好说的

01:20.180 --> 01:22.740
就是一个箱件 然后直接返回呗

01:23.000 --> 01:24.280
mass floor

01:25.000 --> 01:26.220
然后 mass

01:26.480 --> 01:27.040
redon

01:27.300 --> 01:29.600
然后乘以deck加上命

01:30.380 --> 01:32.680
这个东西你写的滚瓜烂手了啊

01:33.200 --> 01:35.240
产生又有这么一个水积函数啊

01:35.760 --> 01:40.360
然后每循环一次呢 添加一部电影啊 添加一部电影

01:40.620 --> 01:42.920
我这里就直接六一个电影对象吧

01:43.180 --> 01:44.460
六一个母币对象

01:46.240 --> 01:47.280
创建一个电影

01:47.540 --> 01:51.880
然后给它里面的一些属性负责 比方说电影的名字 我们就直接写电影

01:52.640 --> 01:54.400
电影凭借上一个i加一吧

01:55.160 --> 01:57.520
啊 凭借上一个i加一就这样写吧

01:58.040 --> 02:01.360
然后电影的地区啊 上映地区

02:01.860 --> 02:03.400
地区的话

02:03.660 --> 02:04.940
这个地区

02:05.200 --> 02:06.720
随便写吧啊 随便写

02:06.980 --> 02:11.860
中国大陆啊 比方说再加上一个美国随便写个啊 都一样

02:12.620 --> 02:17.740
电影的内想啊 电影的内想随便写啊 写去 主要是做测试的啊

02:18.500 --> 02:20.540
然后加个动作啊

02:20.800 --> 02:21.320
动作

02:22.340 --> 02:23.880
然后

02:24.140 --> 02:26.180
还有啥呢 还有啥呢

02:26.700 --> 02:29.780
is is classic 把说明处吧

02:30.540 --> 02:31.300
随便写

02:31.820 --> 02:33.620
然后 description

02:35.140 --> 02:35.920
description

02:36.420 --> 02:40.780
Poster不写的啊 电影时长我们的随机 电影时长随机 guess right

02:42.060 --> 02:43.080
在

02:43.840 --> 02:44.860
就

02:45.640 --> 02:47.440
应该是70到

02:48.420 --> 02:52.500
一百二百四十之间 随机吧 随机一个数字

02:53.020 --> 02:54.300
然后还能还能有啥呢

02:55.060 --> 02:56.860
没啥了吧 还有啥

02:58.140 --> 03:00.180
没啥 没啥 就没啥了啊

03:00.700 --> 03:04.300
好 没啥 写完了之后呢 我们直接调用move service

03:04.540 --> 03:08.380
里边的一个函数 add 添加一部电影 添加一部电影

03:08.900 --> 03:11.220
把这电影对象传进去啊 传进去

03:12.220 --> 03:12.980
然后

03:14.020 --> 03:14.540
还有啥

03:15.060 --> 03:17.100
就完了对吧 就完了啊

03:17.500 --> 03:18.140
没有啥了啊

03:18.700 --> 03:21.980
好 我们保存一下啊 保存一下 然后这里运行

03:22.940 --> 03:23.940
npm 资料队伍

03:24.580 --> 03:26.260
他肯定要运行一会啊 咱们

03:27.140 --> 03:29.660
不用等他啊 那他慢慢运行吧 让他慢慢运行

03:30.380 --> 03:30.700
好

03:31.860 --> 03:33.980
现在呢 我们加了一些电影数据进去

03:33.980 --> 03:38.140
然后一会呢 就会有很多的电影到数据库啊 就会有很多的电影到数据库

03:38.860 --> 03:43.540
然后呢 我们这边会需要一个方法来查询很多的电影

03:43.980 --> 03:45.020
我们需要写个函数

03:45.760 --> 03:48.600
public static 而sync 他是一部的

03:49.160 --> 03:53.240
然后这里呢 我们直接写fang 就不是按照id来查询了

03:53.560 --> 03:57.680
是根据一些条件来查询电影 根据一些条件来查询电影

03:58.280 --> 04:00.920
好 那么这个地方 第一个问题出现了

04:01.600 --> 04:04.160
我这个参数 有没有参数首先

04:05.600 --> 04:11.440
肯定有参数 没有参数的话 你查那里只能把全部电影查出来 这个不太合适

04:11.920 --> 04:14.640
我们可能只查启动一部分 比方说第一页

04:15.280 --> 04:22.280
每页显示10条 或者是第三页每页显示5条等等啊 我们根据一定的情况查一部分电影

04:22.680 --> 04:26.680
还有可能呢 会进行搜索 就是按照电影的名称呢 来进行搜索

04:27.240 --> 04:31.000
也就是说 这里呢 我们可能得要给的信息很多 就是要给一个条件

04:32.040 --> 04:35.400
要给一个条件 关键是这个条件是什么类型呢

04:36.280 --> 04:40.280
啊 这个条件我们可以分析出 这里面应该有啥 应该有第几页

04:41.080 --> 04:44.080
应该有每页显示多少条 对吧 应该有这些信息

04:44.540 --> 04:51.620
还应该有啥呢 还应该有一个搜索关键字 对吧 我们可以分析出啊 这个条件里边呢 应该有三个信息

04:52.940 --> 04:59.260
这个条件里边 应该有三个信息 一个是page 页码 一个是limit

05:00.500 --> 05:02.180
还有个是啥呢 还有个是key

05:04.100 --> 05:11.180
page 呢 表示当前是第几页 limit 呢 表示每页显示多少条 然后key 呢 表示的是查询的关键字

05:11.840 --> 05:13.920
因此的这个condition 啊 应该是一个对象

05:15.080 --> 05:23.880
那么在ts里边 反而是设计到对象的地方呢 我们最好了对他进行约束 可以用接口也可以用一个类啊 对他这进行约束

05:24.560 --> 05:31.400
好 于是呢 我们想到这一点的话 我们就可以认为这里我需要新加一个类啊 在 entity 是里边 我们要新加一个类

05:31.760 --> 05:36.800
这个类呢 表示查询条件啊 查询条件 给他写个名字叫search

05:37.420 --> 05:37.900
condition

05:39.180 --> 05:50.500
因为我们可以发现 无论是电影也好 还是我们将来有可能会开发的影院 有可能会开发的用户 这些呢 可能都需要查询条件 因此呢 我把它做成一个公共的类

05:51.220 --> 05:51.340
来

05:52.220 --> 05:57.740
包含各种各样的查询条件 我们这里导出啊 导出一个内 这个内的名字就叫做search

05:58.340 --> 05:58.860
condition

05:59.820 --> 06:00.460
有这么一个内

06:01.460 --> 06:04.740
好 这个内里边呢 我们有哪些属性要设置呢

06:05.160 --> 06:08.280
其实我们刚才分析出来了 旧三个属性 一个是

06:09.320 --> 06:11.640
page 页码 啥类箱

06:13.160 --> 06:14.160
number number

06:14.920 --> 06:21.400
并且呢 页码我还可以给他复制一个默认值 对吧 如果你没有设置这个属性的话 我可以给你个默认值一

06:22.880 --> 06:25.440
默认为第一页 public

06:27.320 --> 06:32.920
public 然后limit 就这个叫做夜容量啊 夜容量这个是number

06:33.660 --> 06:39.980
每页显示10条啊 默认显示10条 当然你可以改啊 可以改啊 我们这里是那个注释啊 这是夜码

06:41.140 --> 06:46.940
从一开始 从一开始 好 这个是呢 这个表示啥呢 这个表示的是

06:48.420 --> 06:54.340
夜容量 就是每页显示多少条 夜容量 也就是每页的

06:54.980 --> 06:57.260
记录数啊 有多少条数据

06:58.300 --> 06:59.820
好 这个默认呢 为10

07:00.720 --> 07:04.120
还有一个啥呢 还有一个就是查询关键字T

07:04.920 --> 07:11.200
他是一个字无串啊 他是一个字无串 嗯 默认值的话就一个空字无串吧 就一个空字无串

07:11.880 --> 07:12.800
好 这个表示的是

07:14.080 --> 07:19.600
查询条件 查询条件 查询关键字 或者叫做搜索

07:20.400 --> 07:23.520
关键字 默认为一个空字无串

07:24.800 --> 07:27.040
好了 写了这些属性过后 我们马上要想

07:27.500 --> 07:33.020
这个对象啊 到时候这个对象是从客户端传过来的 对吧 有可能是从客户端传过来的

07:33.580 --> 07:35.980
那么从客户端传过来的话 那他有可能

07:36.700 --> 07:41.100
也是一个品面对象 那么他也有可能在运行的时候也需要验证

07:41.740 --> 07:44.980
所以说呢 在对这里的处理的时候啊 我们跟

07:45.540 --> 07:50.940
入位的处理其实是一样的 第一个呢 要对他进行验证 第二个呢 要对他进行转换

07:51.580 --> 07:56.580
实际上是一样的跟这边啊 跟这边这种 加各种各样的装饰器啊进行验证 这样子

07:57.100 --> 08:01.820
安全啊 最不容易出问题 大家以前写程序呢 可能很少关注这些地方

08:02.660 --> 08:08.100
就像出问题了 我们 我们总觉得应该是自己写单码的习惯不好啊 或者是哪个地方不小心

08:08.500 --> 08:10.820
其实呢 我告诉大家很多时候不是你的问题

08:11.460 --> 08:14.540
是因为语言本身缺少了内询检查 他们给你检查出来

08:15.260 --> 08:22.060
那么我们这里呢 尽量的给他一些约束 让他可以尽量的在运行过程中把这些问题避免掉

08:22.840 --> 08:26.840
好 我们可以跟部分一样啊 我们在这里面去书写一些检查

08:27.880 --> 08:33.320
比方说这个地方 由于他有了默认值 由于他有了默认值 他一定不会委空啊 一定不会委空

08:33.320 --> 08:36.640
所以说我们非空检查了就不需要了啊 不需要非空检查了

08:37.000 --> 08:44.240
我们还可以做哪些检查了 比方说这是个数字 对吧 那么首先啊 首先我们要使用啊 这个

08:45.280 --> 08:46.320
意思 int

08:47.300 --> 08:48.060
也是 int

08:48.460 --> 08:50.780
来对他进行检查啊 对他进行检查

08:51.380 --> 08:57.020
如果出 避免他出 避免他出现什么情况了 避免他给我一个小数 对吧 避免他给我一个小数

08:57.740 --> 09:00.700
这里我们书写上啊 页嘛必须是

09:01.980 --> 09:02.820
啊 整数

09:04.780 --> 09:13.460
啊 这是这个检查 然后呢 还有什么样的验证规则呢 比方说还有最小值对吧 最小值对小值的话是1啊

09:14.200 --> 09:18.960
没设计啊 最小值是一 那就说啊 页嘛 最小值

09:20.160 --> 09:24.640
为一 如果你给我传个负数 给我传个零我都是不认的啊 都是不认的

09:25.280 --> 09:31.000
好 最大只我们就不限制了啊 鬼才知道他有多多多少的页嘛 不知道了 最大只我不限制了

09:31.720 --> 09:37.400
好 下面呢 页容量啊 页容量 页容量也是一样的啊 首先他必须是一个数字

09:38.380 --> 09:43.900
啊 必须是一个数字一个整数啊 然后呢 他的最小值呢 也至少为一

09:45.260 --> 09:50.940
最小值啊 至少为一 其实是一样的 这就先把写好 这是页容量啊

09:51.780 --> 09:56.340
页容量啊 下面这个啊 也是页容量

09:57.060 --> 10:01.460
他必须是都是必须是整数 我这里啊 应该是最小值为一 对吧

10:02.540 --> 10:04.060
最小值为一

10:04.360 --> 10:10.760
好 下面的搜索关键字啊 搜索关键字这个东西好像没有什么可限制的

10:11.320 --> 10:17.520
没有啥可限制的啊 验证规则现在我们差不多就写好了啊 验证规则写好了 然后接下来

10:18.680 --> 10:26.720
接下来我们要写的是啊 就是内形转换 就是把一个平面对象转换成这个对象的时候 你要告诉他这些信息啊 还记得吗

10:27.400 --> 10:31.640
告诉他这些信息 像我们这里练习的两遍 大家应该就清楚啊 这里该怎么去携带嘛

10:32.460 --> 10:37.380
好 这里呢 我们首先告诉他你转换的时候呢 麻烦你啊 把它转换成一个数字

10:39.460 --> 10:41.340
把它转换成一个数字 number

10:43.700 --> 10:50.900
好 这是这个地方 下面这个啊 你转换这个粘面车的时候呢 也把它转换成数字啊 也把它转换成数字

10:51.220 --> 10:55.580
这个地方呢 你转换的时候呢 麻烦你把它转换成啊 把它转换成字不串

10:56.560 --> 11:05.880
好 那么这个地方就写好了 我们回归一下啊 看还有什么地方要写的啊 还有怎么地方要写的 好像就没啥了啊 就没啥了

11:06.760 --> 11:14.360
好 写了这两个过后呢 按照以前move里这里面的写法啊 按照move里这里面的写法 是不是这里面我们也要写个Validis this

11:14.920 --> 11:19.480
也要写一个什么 也要写一个transfoam 对吧 也要写这么两个东西

11:20.340 --> 11:25.540
好 那么这个在书写的过程中 大家可以发现啊 其实我们如果把这个地方复制过来的话

11:26.220 --> 11:31.660
我们直接把这个代码复制过来 稍微改一改 其实就可以了 但是这样子一来的话 会不会造成重复代码啊

11:32.500 --> 11:37.860
啊 是不是会造成重复代码 对不对 会造成重复代码 其实呢 那么我们写到这儿啊

11:38.380 --> 11:41.780
就应该可以发现 无论是像这个实体内也好

11:42.700 --> 11:48.500
还是像这个实体内也好 他们都有一些共同的行为啊 都有一些共同的行为

11:49.160 --> 11:52.760
因此呢 我们可以把这两个行为抽象出来

11:53.480 --> 11:56.840
形成到负类里边的方法 因此呢 我可以写个负类

11:57.480 --> 12:01.880
这两个内呢 都去继承负类 那么把他们的共同的东西呢 提取到负类里边

12:02.440 --> 12:07.600
像这种思想啊 这种开发方式 大家应该慢慢的习惯这种开发方式

12:08.240 --> 12:11.360
我们把抽象 把内里边的重复代码提取到负类里边去

12:12.160 --> 12:14.480
好 因此呢 我们这里可以写这么一个负类

12:15.480 --> 12:20.500
这个负类的名字呢 我们给他取个名字啊 叫做Base entity

12:22.340 --> 12:26.540
就是基础的一个实体内 基础的一个实体内

12:27.100 --> 12:31.820
那么这个负类呢 我是不希望它能创建对象的 因此呢 我把它设置为abstract

12:32.260 --> 12:37.140
把它设置为抽象内 把它设置为抽象内 给他取个名字啊Base entity

12:38.100 --> 12:42.980
他里边提供啥呢 他里边提供一些公共的行为啊 公共的行为 比方说

12:43.960 --> 12:51.360
他提供啥行为呢 首先我们看到这里 这里有个Vanity z 是对吧 Vanity z 是好 我们把这个东西提到负类里边去

12:52.720 --> 12:58.120
好 提过去的时候呢 我们先把这个导入进来啊 先把这个确实的模块导入进来 导入进来过后

12:59.120 --> 13:05.080
我们这里要想一个问题啊 想一个问题 当我们去验证的时候啊 验证的时候

13:05.600 --> 13:08.720
呃 我们要 这样子写是不是就结束了

13:09.700 --> 13:13.300
是不是就完了 我们好好理解啊 理解 是不是就完了

13:14.100 --> 13:24.180
也就是他 我们在验证这个对象的时候 实际上我是不care 你到底是一个电影 还是一个影院 还是一个用户 还是一个查证条件 我是不太care 这些的

13:24.620 --> 13:31.580
啊 我只需要根据这个规则去验证就完事了啊 就完事了 所以说这里我们就写完了其实啊 就已经写完了

13:32.660 --> 13:37.540
好 写完了之后呢 你看一下啊 哦 这里好 换一个行啊 不然有贴室令车包缩

13:38.320 --> 13:44.240
好 写完了之后 我们在电影里边 比方说啊 电影里边 我们要做的是啥呢 我们要做的事情其实就是

13:44.880 --> 13:45.440
exchange

13:46.280 --> 13:49.000
继承啥 继承base entity

13:49.760 --> 13:55.360
就继承他 继承他的之后 你看一下我这边是不是可以少写一个了啊 都可以少写一个了

13:56.160 --> 14:00.280
这个函数我们不写了啊 因为附内里面已经已经帮我们做了这个事了 我们可以不写了

14:01.480 --> 14:04.600
好 然后我们再看这个这个函数 这是个静态函数

14:05.380 --> 14:06.900
静态函数 好

14:08.260 --> 14:10.820
我们假设把这个静态函数写到附内里边去

14:12.420 --> 14:16.500
好 假设啊 我们把这个静态函数写到这个附内里边去

14:17.300 --> 14:21.980
好 写进去过后呢 我们先别管其他的 这里爆错 先让他爆错吧

14:22.860 --> 14:25.980
我们来看一下静态的函数能继承吗

14:27.700 --> 14:33.540
我们来试一下啊 试一下 如果能继承的话 就意味着我们可以通过这个move

14:35.100 --> 14:36.620
啊 我们看一下数据加好了没有

14:37.940 --> 14:39.660
啊 你加好了啊 加好了 ok

14:40.540 --> 14:45.020
我们可以如果能够继承的话 那么也就意味着我可以通过这个move

14:45.900 --> 14:51.100
来得到这个静态函数 全是不 你看 可不可以继承 也就是他发现

14:51.940 --> 14:57.100
静态函数也是可以继承的啊 也是可以进程的 我们可以通过move来调用这个函数

14:57.500 --> 14:58.380
来调用这个函数

14:59.300 --> 15:04.420
好了 那既然这样的话 既然如此啊 既然如此 我们在这里

15:05.580 --> 15:12.420
啊 我们在这里 我们就可以把这个把这个transform作为静态函数放到负责里边去 放到bass 连接体里边去

15:13.260 --> 15:16.500
好 放进去过后 我们马上发现问题了 什么问题呢

15:17.540 --> 15:22.540
你看这个玩意儿啊 这个玩意儿 这个东西 这里写啥呢

15:23.620 --> 15:24.860
他有可能是movie

15:26.140 --> 15:33.020
还有可能是啥 还有没有可能是search condition 对吧 我们要转换吧 转换的目标他可能是转换成电影

15:33.640 --> 15:39.240
也可能会转换成其他的东西 那么这里到底转换成啥了 是不是不清楚啊

15:40.400 --> 15:43.800
但是无论这里这里转换成啥 这个代码格式都是一样的

15:44.680 --> 15:52.960
啊 将来我们还会写影院 还会写用户 那么都可能会放到这个位置 那么这个地方如何来适应不同的内容

15:54.160 --> 15:57.160
啊 同学们想一想 如何来适应不同的内容

15:58.140 --> 16:03.340
哎 我们之前学过的一个知识就可以拍上用场了 什么知识呢 反省

16:05.060 --> 16:11.340
无非就是有个反省内省嘛 对吧 无非就是个内省而已 啊 还能试啥呢

16:12.820 --> 16:13.820
无非就是个内省嘛

16:15.700 --> 16:16.980
好 你只要把

16:17.820 --> 16:23.180
这个内省传给我啊 只要把这个内省传给我就可以了啊 只要把这个内省传给我就可以了

16:23.860 --> 16:26.660
好 那么这里这里呢 他出现了一些问题

16:27.260 --> 16:28.140
出现啥问题呢

16:29.180 --> 16:32.740
这些问题的就是这个地方 is tensor 他不知道这个t是啥

16:33.820 --> 16:36.940
啊 他不知道这个t是啥 这个t应该是个啥呢

16:38.140 --> 16:39.580
啊 这里我先把这个导进来啊

16:41.100 --> 16:48.740
这个t应该是啥呢 这个t呢应该是一个构造函数啊 应该是一个内的名字 对吧 应该是一个内的名字

16:49.660 --> 16:54.100
好 那么内的名字我怎么来约束呢 那你看一下这个函数他是咋约束的

16:54.840 --> 17:02.880
这个函数他第一个参数也要传一个内的名字 对吧 他传要传一个内的名字 他咋约束的呢 他是用了这么一个东西叫class type

17:03.240 --> 17:07.240
好 我们再研究一下吧啊 就既然看到这儿了 我们就要研究一下他是怎么写的

17:08.120 --> 17:12.400
f12转到第一 他第一个参数啊 第一个参数

17:13.240 --> 17:18.120
啊 就是这里 第一个参数呢 就必须是一个啊 必须是一个内啊 必须是一个内

17:18.760 --> 17:23.240
好 那么我们看一下这个这个地方咋写的呢 f12转到第一

17:25.080 --> 17:30.120
你看是咋写的 其实就是我们之前学习过的 对吧 就是我们之前学习过的

17:30.560 --> 17:38.080
就是一个构造函数的约束啊 约束他为一个构造函数 构造函数是啥玩意儿 构造函数是不是就是内 对不对

17:38.720 --> 17:41.240
构造函数就是内啊 就是内

17:42.080 --> 17:46.800
所以说呢 所以说那这个东西啊 其实我们可以通过这个

17:47.440 --> 17:53.400
内情别名来告诉他这个是一个什么样的内就完事了 当然你可以直接使用内

17:53.540 --> 17:58.420
构造函数来进行约束 好 比方说吧 我们这里直接是用构造函数来进行约束

17:59.260 --> 18:04.580
他必须是一个啥呢 他必须是一个啊 构造函数就是一个6

18:05.460 --> 18:10.100
啊 还 构造函数参数无所谓 你随便写啊 构造函数参数无所谓的

18:10.660 --> 18:13.580
然后这个构造函数的返回的内情是啥 返回的内情应该是t

18:14.700 --> 18:18.580
返回的内情应该是t 你想想是不是这个道理啊 想想啊

18:19.400 --> 18:20.600
这个地方是不是这个道理

18:21.520 --> 18:25.360
他是一个构造函数 那么他返回的内情是不是一定是啊 一定是t

18:25.880 --> 18:33.560
对不对啊 这样子呢 对他进行的约束啊 表示他是一个构造函数 当然你也可以使用啊

18:33.560 --> 18:36.640
我们刚才看到了一个 别人已经给你做好的这个

18:38.360 --> 18:45.880
这个跑了去了 这个class type啊 也可以使用这个啊 我们这里也可以使用啊 class type

18:48.610 --> 18:51.250
t 也可以用这么方式来进行约束

18:52.250 --> 19:00.130
好吧 那么这样子一约束的话 那么这个t呢 他就是啊 他就是必须要传一个内啊 必须要传一个内情

19:01.650 --> 19:05.010
好 但但是这样子一约束过后 你看他还是抱错

19:06.450 --> 19:10.090
他说什么呢 他说t呢 仅表示内情

19:10.770 --> 19:16.970
但是此处呢 却作为只来使用啊 却作为只来使用 这是啥意思呢

19:17.870 --> 19:22.390
其实这里呢 其实这个地方啊 我们要这样子来思考

19:23.550 --> 19:29.790
这个t这个东西啊 他编译过后还在不在 想想这个问题啊 我们之前讲犯行

19:30.830 --> 19:36.830
t s里边的犯行编译过后到j s里边还存不存在了 这不存在了

19:37.550 --> 19:42.230
肯定就没了 那如果你是允许的方个t在这 那运行的时候这个t是啥了

19:42.890 --> 19:47.890
所以一定什么都不是 对不对 所以说这些东西只是在起单码期间

19:48.490 --> 19:53.410
来做内行检查的 他在运行的过程中 早就不存在了啊 早就不存在了

19:54.090 --> 20:01.450
像一些后端语言的话 倒是可以啊 后端语言可以 像谁下巴呀 像加瓦呀 他们在运行的时候 仍然有内行

20:01.930 --> 20:06.210
但是呢 像ts在运行的时候 内情就消失了 其实我

20:07.070 --> 20:12.230
中心的希望 将来ts能够参与运行过程中的内行检查 那就太好了

20:13.590 --> 20:18.030
但是现在呢 是没办法的啊 因此呢 你这里是不能使用t的 那怎么办

20:19.350 --> 20:23.750
其实你不用想那么多 你看他是咋做的吗 你看他是咋做的

20:24.310 --> 20:27.470
这个play class他不就是也要做这个事吗 对不对

20:28.190 --> 20:35.510
他第一个参数是t 然后呢 就是第一个犯行是t 但是呢 他要求你传一个参数 把内民传进来

20:35.970 --> 20:41.210
你要把内的名字传进来 所以说呢 这里呢 我们可以完全去仿造

20:42.130 --> 20:44.850
他的做法 我这里呢 也只传一个参数t

20:46.210 --> 20:52.850
你 我要求你把你的内民传过来 内民传过来 跟这里做成一样就完成了啊

20:53.370 --> 20:54.370
这是class type

20:58.790 --> 21:02.270
一把你的内民传过来 那我这里判断的是咋的 判断的是这个玩意

21:03.030 --> 21:04.030
是吧 判断的是他

21:04.290 --> 21:09.890
然后返回的就是t 跟这边做成一样就完事了啊 跟这边做成一样就完事了

21:11.370 --> 21:15.010
好 当然你这样子一改 那么之前的一些调用是不是要跟着改啊

21:15.770 --> 21:20.690
之前的调用也要跟着改啊 也要跟着改 所以说呢 那么在在这边来

21:22.290 --> 21:27.210
到了这里 到了就是之前我们谁的movee社会室里边 之前的有些地方要跟着改啊

21:27.690 --> 21:31.370
这就是ts的好处 他会告诉你哪些地方出了问题啊 你需要进行修改

21:31.830 --> 21:36.550
那么这里呢 我们把他改成什么movee 把内传进去 这里也是一样

21:37.390 --> 21:38.990
我们这里 把movee

21:41.270 --> 21:44.830
movee 跟内传进去 把他帮我们进行处理

21:46.190 --> 21:54.630
好 这样的设置其实就完事了 对吧 就完事了 如果你觉得这样有一点怪啊 比方说那个movee里边这么还要传个movee呢

21:54.870 --> 21:58.950
你觉得有点怪 那么我建议了可以这样子来处理啊 可以这样子来处理

21:59.490 --> 22:08.130
在bass entity里边啊 我们给他换个名字吧 啊 给他换一个名字啊 这里呢我们换成protec的 让外面不能调用这个

22:08.890 --> 22:14.010
让外面不能调用这个 我们给他换一个名字叫做比如说bass transform

22:14.610 --> 22:18.290
啊 叫做bass transform 啊 只能指内调用

22:18.850 --> 22:23.610
外边不能调用 我这里都提供了一些基础的功能啊 就是使用那个功能呢 我把你

22:24.130 --> 22:28.490
功能代码重复代码给你封装好啊 使用这个基础的功能给你封装好

22:29.010 --> 22:31.650
然后纸内呢 你去提供你自己的竞谈函数

22:32.410 --> 22:34.730
然后调用复类的个竞谈函数就完事了

22:35.490 --> 22:39.450
好 就是这里 我们把这个名字盖一下 把它变成protec的 外面不能使用

22:40.090 --> 22:45.170
好 然后纸内里边呢 纸内里边 然后这啊 我们把这个地方取消注释

22:45.730 --> 22:49.810
然后这个地方呢 纸内里面提供自己的竞谈函数 啊 transform

22:50.450 --> 22:52.850
然后呢 这里边 我们去调用复类的

22:54.690 --> 22:57.730
super 复类的是啊 全是bass transform

22:58.510 --> 23:03.510
这样子来处处理啊 把内传进去 那么这里我就去非常清楚了 我肯定转换的是电影

23:04.630 --> 23:09.430
对吧 因为电影 我们现在在电影内里边 因此的转换的肯定是电影

23:10.310 --> 23:15.070
好 转换的对象的就是play object 啊 我们把它形成这种结构

23:16.070 --> 23:18.670
啊 形成这种结构 你看一下啊 好看一下

23:20.110 --> 23:25.990
复类里边提供一个基础的功能 这个基础的功能呢 是帮助纸内去实现他们自己的函数的

23:26.690 --> 23:30.970
只能纸内调用啊 为什么我要把它做成这样子呢 因为

23:31.770 --> 23:38.690
用者很麻烦啊 以前在这样子用 用者很麻烦 因为我已经是电影了啊 我通过电影来调用的话 肯定得到的是电影

23:39.090 --> 23:44.210
所以说 我觉得以前很麻烦 因此呢 我在复类里边呢 这样子来处理啊 这样子来处理

23:45.210 --> 23:52.370
好 然后纸内里边呢 去写自己的函数啊 把它写得更加简洁一点 用起来更加方便一点 其实咱们做开发

23:53.110 --> 24:01.550
有这么一个思想啊 就是定义一个东西的时候呢 麻烦一点 其实无所谓 因为我们定义的话 只写一次

24:02.070 --> 24:08.470
而调用可能会很多很多地方都要调用它 尽量让调用的变得简单 变得符合逻辑

24:09.670 --> 24:14.070
好 这里写好了 那么这边也是一样啊 这边也是一样 我们这里去继承复类

24:14.750 --> 24:22.270
一天子base entity 继承复类 继承复类之后呢 我他就本身就有了 by the days 了啊 本身就有了 所以我们不用写了

24:23.110 --> 24:31.630
transform里面呢 我们也可以跟电影一样啊 跟电影一样 这里呢 我们直接啊 这里就不是反过来不是move it 了 反过来是search 康迭性

24:32.390 --> 24:33.830
直接return super

24:35.150 --> 24:41.470
base transform 就是search 康迭性 然后呢是play object

24:43.150 --> 24:49.230
你看 两个纸内只关心自己有差异的地方 公共的地方呢 我们把它提到负累里边去了

24:49.970 --> 24:53.650
啊 这种方式要学会啊 要学会啊 这是关于

24:55.010 --> 25:00.650
纸内啊 就是这个提趋公共代码的问题 我们把公共代码提到这 那以后我们要加影院

25:01.210 --> 25:10.330
加用户 你想啊 是不是很简单了 我们只需要去继承负累就完事了啊 只需要把负累继承了 把属性那些写好 这样的事情呢 我们不用管了

25:11.690 --> 25:16.370
啊 这是关于这一块啊 好 写好了这个search 康迭性过后

25:17.350 --> 25:20.990
我们看一下我们的思维啊 一开始呢 我们是写这个方法

25:21.710 --> 25:24.670
啊 这里我换回来了啊 换成以前的那种写法

25:27.560 --> 25:35.560
啊 一开始呢 我们是写这个函数 写这个函数的时候呢 发现有一个参数条件 我们发现条件呢 需要一个内形来约束

25:35.920 --> 25:38.920
于是呢 我们写了这个内形 而写这个内形的时候呢

25:40.560 --> 25:44.800
写完了之后呢 做了一些啊 验证规则 以及转换规则的处理

25:45.260 --> 25:51.460
做完了之后呢 我们要发现写函数的时候 发现有重复代码 于是呢 我们把重复代码提到负累里边去了

25:51.940 --> 25:52.980
提到负累里边去了

25:53.820 --> 25:57.300
好 这样子一层一层的完成这个代码 现在我们再回到这

25:58.580 --> 26:03.740
就回到这 其实我们写代码就是像这样子 就跟函数调用一样 我们调用一个函数的时候 发现哎

26:04.020 --> 26:10.740
我要定义这个我要先定义这个函数 而我定义这个函数的时候呢 发现哎 这个参数要约束啊 一层一层的往下走

26:11.980 --> 26:14.260
好 那么这里我可以进行约束了 约束为啥

26:15.260 --> 26:19.260
约束为啥 约束肯定是为search condition 约束为它

26:20.500 --> 26:21.860
好 接下来另外一个问题

26:23.420 --> 26:29.180
反挥啥 你看我们写的爱马就是这样子 一层一层往下走 遇到问题了我们再解决它

26:30.180 --> 26:31.020
反挥的是啥呢

26:32.700 --> 26:41.540
我们要找到很多的电影对吧 要找到很多的电影 因此呢 我们这里反挥的应该是啥 应该是一个电影的数组

26:42.380 --> 26:43.020
就这么简单

26:44.820 --> 26:54.220
反挥的是一个电影的数组 这是我们反回的结果 但是你这样的写发现爆错了啊 如果是结实的话 我就又蒙了啊 我又开始不停的写

26:54.660 --> 26:58.940
都没有发现这个错误 但是现在呢 我发现这个错误了 为什么他在告诉你 他说

27:00.060 --> 27:02.380
啊 他说 一步函数

27:03.700 --> 27:05.820
返回必须是一个promise

27:06.860 --> 27:11.980
对不对 肯定是对的嘛 他是一个一步函数 怎么怎么能不是一个promise呢

27:12.760 --> 27:14.280
返回的一定是一个promise

27:15.720 --> 27:22.680
ok 把改成正确的 好 现在函数没有返回啊 现在函数还没有返回啊 我们需要返回过后才能解决这个错误

27:23.560 --> 27:26.280
好 那么我们开始写这个函数啊 写这个函数

27:27.400 --> 27:34.760
首先这里得到了有可能有可能是个啥呢 有可能是一个平面对象 对不对 所以有可能是个平面对象

27:35.600 --> 27:39.080
好 那么既然他有可能是个平面对象啊 所以说我们这里呢

27:39.540 --> 27:41.220
啊 我们把之前的代码呢

27:41.780 --> 27:45.140
copy过来啊 内情转换数据验证啊 把它copy过来

27:45.940 --> 27:51.260
你看这个地方还是有重复代码 对吧 还是能还是会出现重复代码 这个重复代码呢

27:51.780 --> 28:00.860
我就像我之前说的你可以用装饰器来解决 但是由于那个东西呢 对大家呢 目前比较复杂啊 可能很多同学 因为我讲这个视频课

28:02.140 --> 28:05.420
也不太清楚各位同学的真实的水平 可能

28:06.040 --> 28:11.840
差别比较大 因此呢 我尽量的满足绝大部分同学不讲那么复杂了啊 就不讲那么复杂了

28:12.720 --> 28:17.440
啊 这个是查询啊 查询说查询电影

28:19.600 --> 28:23.880
好 首先内情转换 我现在要转换的就是search condition

28:24.840 --> 28:27.920
它里面提供了transform这个函数 看一下

28:28.760 --> 28:33.240
transform这个函数 转换过后可以得到一个对象啊 当前的跟内的对象

28:33.980 --> 28:36.860
完成转换 转换啥呢 转换这个condition

28:37.740 --> 28:43.660
比如他进行转换 转换之后呢 该有默认值的地方 他就有了默认值了啊 其他关键

28:47.140 --> 28:52.100
啊 转换之后呢 该有默认值的就有了默认值啊 然后变成了这个内的对象

28:52.780 --> 28:59.660
然后再进行数据验证啊 看一下有没有问题啊 验证一下验证谁呢 验证的是啊search condition

29:00.620 --> 29:02.620
Validate this

29:03.620 --> 29:04.020
啊 这里

29:05.820 --> 29:06.060
这里

29:06.900 --> 29:14.060
不存在属性啊 不存在属性Validate这件事 怎么回事啊 我们看一下 它说你这个哦哦哦 我写错了啊

29:14.620 --> 29:22.380
我这里写错了 应该是应该是应该是跟condition啊  Condition来调用啊 你看这样的错误呢 我们在ts里面就很容易避免了

29:24.460 --> 29:27.700
应该是通过它来调用对吧 通过它来调用啊

29:28.360 --> 29:33.440
conobj 随便变个名字吧 通过它来调用 因为它有可能是平面对象

29:34.120 --> 29:36.600
它有可能是个平面对象 所以说通过它来调用

29:37.400 --> 29:42.040
好 调用完了之后呢 得到一个 eros 啊 得到一个 eros 那么看一下这个

29:42.760 --> 29:46.880
长度啊 是不是大云林的 如果大云林表示有错误啊 有错误

29:47.360 --> 29:54.880
好 有错误的话 也就是说 这里他还提醒我们 有错误的情况下呢 也要返回一个错误的数据啊 返回一个错误的数据

29:55.860 --> 29:59.220
好 我们这里好 去

30:01.060 --> 30:06.180
我们返回一个错一个制服创的数据啊 如果有错误的话 我们要返回一个制服创的数据

30:07.500 --> 30:10.860
好 得到这个错误之后啊 如果没有错误

30:12.900 --> 30:18.260
如果没有错误 那么就要进行这么做什么做查询了啊 跟之前是一样的

30:19.140 --> 30:23.740
好 怎么来查询呢 我们有分业对吧 有业容量

30:24.480 --> 30:30.040
有业码 有查询条件 我们一个个来呗 大家应该写过这样的代码啊

30:30.680 --> 30:36.800
好 我们查询啥 查询movie mode 查询这个玩意儿 这个玩意儿里边不是有一个

30:37.360 --> 30:41.160
函数叫fan的对吧 fan的的时候呢 是不是要给

30:42.760 --> 30:46.480
发到的时候 是不是要给条件 对不对 给条件好 这个条件咋写

30:47.560 --> 30:51.080
啊 这个条件咋写 我们查询 我们要进行模糊查询

30:51.980 --> 30:54.700
我们要按照这个关键字来进行模糊查询

30:55.500 --> 30:58.340
好 模糊查询的时候呢 我们查询哪个 哪个属性呢

30:59.380 --> 31:08.100
查询的是电影的名字啊 这个名字它是一个是一个什么条件呢 是一个模糊查询的条件啊 这属于mongus

31:08.380 --> 31:13.540
mongus的api的一些东西 啊 帮大家回忆一下啊 如果忘了同学呢

31:14.140 --> 31:20.100
去参考一下里面之前学习的课程或者是参考一下mongus的api 我这里不细讲啊

31:20.840 --> 31:27.440
查询的是条件是名字必须要满足这个条件 这个条件是个正载表达式啊 regex 正载表达式

31:28.320 --> 31:32.480
啊 要满足这样的正载表达式 什么正载表达式呢 我这里要新建一个正载表达式

31:33.360 --> 31:39.120
regex 啊 正载表达式的就是内容啊 内容就是什么 内容就是

31:40.560 --> 31:44.440
就是这个 康迭性 key 这就是它的内容

31:45.680 --> 31:47.480
啊 通读一次啊

31:48.420 --> 31:54.100
内容转换 转换成一个条件对象 转换之后验证数据是不正确的

31:54.980 --> 31:59.740
如果有错误的话 反回错误 没有错误进行查询 查询的时候给个条件

32:00.620 --> 32:03.700
要满要这个电影的名字要满足这样的条件

32:04.300 --> 32:09.300
就是他要有一个正载表达式匹配 匹配啥呢 匹配这个正载表达式

32:09.900 --> 32:14.140
我们用用这个查询关键字来构建一个正载表达式 然后匹配它

32:15.120 --> 32:19.120
好 这个查询结果 查询出来的结果 让我们继续来 继续处理

32:19.840 --> 32:23.560
还要做分页 对吧 还要分页 把查询结果来进行分页

32:24.040 --> 32:24.540
skip

32:25.640 --> 32:32.400
啊 就是skip表示吗 就是挑过 挑过多少数据啊 挑过多少数据

32:33.120 --> 32:39.600
好 挑过多少数据呢 然后这里我们挑过啊 应该是分页应该怎么写 是不是 康迭性

32:40.020 --> 32:44.660
点配级 减1 成义 康迭性 点limit

32:46.100 --> 32:50.460
这个没问题吧 分页大家应该做过的吧 应该做过分页的啊

32:51.420 --> 32:57.900
挑过多少 多少数据呢 当前如果页码是1 那么挑过是0条数据对吧 就是1-10

32:58.700 --> 33:06.780
如果当前页码是2 那么就是2-1 等于1 1x多少limit 比较每页前是10条 当前页码是2

33:07.560 --> 33:12.680
那挑过多少 挑过10 对不对 那么就1-2-1 等于1 1x10

33:13.760 --> 33:17.920
好 这是挑过啊 挑过 然后呢 继续啊 还要

33:18.920 --> 33:21.720
还有一个limit 我们要取多少个呢

33:22.680 --> 33:24.720
刚刚你挑过了前面10条 你是不是还有

33:25.560 --> 33:30.880
两三百条 对不对 我们要取多少个数据呢 取康迭性limit

33:31.860 --> 33:37.220
好 这就是分页的写法啊 这是分页的写法 最终呢 我们通过这个函数来得到这么一个

33:38.780 --> 33:45.740
movies 电影的数组 等待它来完成一个电影数据的获取

33:47.380 --> 33:51.780
好 那么最终呢 我们就获取到这个电影数据啊 就获取到这个电影数据

33:52.420 --> 33:56.020
movies 获取到这个电影数据

33:57.000 --> 33:59.120
好 这个函数就写完了

34:00.400 --> 34:03.440
咱们来测试一下啊 测试一下这个函数啊 这么正确

34:04.760 --> 34:06.400
好 到这里来来测试一下

34:08.800 --> 34:11.480
接着呢 我们找到这个movies service啊 movies service

34:12.080 --> 34:14.000
movies service

34:15.640 --> 34:18.960
好 这里面呢 我们调用它里面的什么方法呢 就是fan

34:20.160 --> 34:20.680
fan的方法

34:21.580 --> 34:24.180
它要让我给个条件啊 我就必须要给个条件

34:25.020 --> 34:28.500
给个条件呢 我们比方说啊 给一个

34:29.780 --> 34:31.140
这么一个条件 呃

34:32.260 --> 34:34.180
payche 呃 payche为

34:35.660 --> 34:39.060
或者是我们这样子 创建这么一个对象啊 创建这么一个对象

34:41.860 --> 34:42.340
condition

34:44.220 --> 34:47.940
我们比方说测试一下平面对象嘛 测试一下 这是个平面对象

34:48.720 --> 34:51.120
这个条件里边 我们有name 呃不是 有

34:52.480 --> 34:56.840
payche payche只该复制为一啊 只该复制为一 其他条件不给

34:57.160 --> 35:00.520
因为其他条件都有默认值 对吧 都有默认值啊 把他放过去

35:01.440 --> 35:03.120
好 我们来看一下它查询结果啊 z

35:05.120 --> 35:05.600
查询的结果

35:08.120 --> 35:10.440
这里 我们 这里 输出

35:11.320 --> 35:16.240
输出 看看能不能查询出10条电影 而且是第一个

35:16.620 --> 35:26.550
第一页的10条电影 看能不能查询出来啊 保存 稍微等一下啊 看一下我们的数据

35:28.510 --> 35:31.230
啊 就得到了10条电影了啊 得到了10条电影

35:31.870 --> 35:33.630
啊 看我这里不数了啊

35:34.750 --> 35:39.470
不数了 肯定是10条电影 我们这里输出一下这个吧 输出一下个数组的长度

35:42.430 --> 35:43.550
输出一下数组的长度

35:49.610 --> 35:53.810
诶 这里查询有问题对吧 有问题 他得到了数据是

35:55.330 --> 35:56.690
得到多少了 多少数据啊

35:57.930 --> 36:03.690
1215啊 得到了是1215 1000多条 我有这么多电影吗 我看一下啊

36:04.650 --> 36:10.900
我有这么多电影吗 这个太恐怖了 我怎么加了这么多数据啊

36:12.060 --> 36:13.180
啊 我刚才应该是

36:14.300 --> 36:17.980
啊 应该是重复的保存 他重复的运行刚才在添加代码啊

36:18.580 --> 36:23.740
加了很多数据 那现在问题是为什么会出现这么多 我现在查询并没有查询这么多啊

36:24.200 --> 36:27.200
我并没有查询这么多 我来看一下啊 怎么回事

36:28.600 --> 36:31.120
我们这里使用了limit啊 使用了limit

36:32.480 --> 36:36.360
使用limit 我们只取这么多条 这里呢 我们输出一下啊

36:37.720 --> 36:43.400
啊 我明白了 我明白了 因为我这里使用的是这个玩意儿来进行查询的

36:44.120 --> 36:47.880
而我们我们应该使用啥 应该使用转换后的对象

36:49.120 --> 36:53.360
对吧 因为转换后的对象才有没有的属性值呢 还会有默认值

36:54.360 --> 36:59.880
它会有各种默认值 比方说关键值我这里没有写 那么关键值呢应该是一个空置无串

37:00.400 --> 37:03.720
limit没有写 limit应该是一个啊 就是

37:04.800 --> 37:10.600
一个时 对吧 表示夜容量为时 因此呢 我应该用这个东西来进行查询啊 应该用它

37:11.320 --> 37:14.040
好 这个地方我写错了啊 把这地方改了一下

37:15.400 --> 37:15.720
保存

37:16.720 --> 37:17.600
好 我再来看一下

37:21.880 --> 37:24.880
好 查询出来了十条电影 十条电影

37:25.860 --> 37:27.540
好 我们再来看一下有错误的场景

37:28.180 --> 37:32.380
好 夜码如果我写了个字幕创啊 当然字幕创它转换过后呢

37:33.180 --> 37:38.220
它会变成数字啊 它会变成数字 那我们这里看一下给夜码给了一个零

37:40.750 --> 37:42.590
看一下 查询定零夜

37:44.030 --> 37:47.750
啊 这里抱错了啊 夜码最小 夜码最小只为一

37:48.630 --> 37:49.630
啊 夜码最小只为一

37:50.470 --> 37:52.550
好 这就是我们这个地方的查询

37:53.210 --> 37:57.050
好 这个地方的查询呢 其实还有一个问题

37:57.610 --> 37:59.050
不知道大家能不能发现啊

38:00.410 --> 38:02.490
我这个查询结果里边

38:03.450 --> 38:06.130
只能得到电影的数组

38:07.450 --> 38:11.290
但是我要得到的信息 除了电影的数组之外

38:11.650 --> 38:14.850
我还要得到一个信息 得到啥信息呢

38:15.050 --> 38:16.850
得到这个电影有多少个

38:17.850 --> 38:20.650
得到这个电影有多少条啊 一共有多少条电影

38:21.550 --> 38:24.750
你看我们到时候到夜面上要做分页 是不是一定要知道这个信息

38:25.450 --> 38:30.050
除了知道有电影的数数组之外 我们还要知道一共有多少电影

38:30.550 --> 38:33.350
就是电影的记录数啊 总数

38:34.450 --> 38:38.750
因此的电影总数到时候 我们倒是很好查啊 电影的总数是很好查的

38:40.350 --> 38:43.750
电影的总数是什么呢 电影的总数是这么一个东西啊

38:44.250 --> 38:46.150
我们直接 always movie mode

38:47.150 --> 38:49.750
啊 你们之前学的猫骨子的时候应该都学过对吧

38:50.250 --> 38:50.750
嗯

38:52.250 --> 38:52.750
court

38:53.450 --> 38:55.350
court document

38:55.850 --> 38:56.650
court document

38:57.450 --> 39:02.050
这里呢 我给他 给他 或者是我们先翻的吧 翻的过后再

39:02.650 --> 39:04.050
再使用court document

39:04.950 --> 39:07.650
先找到这些电影 满足强量的电影 找到

39:07.750 --> 39:08.650
然后呢 我得到

39:09.250 --> 39:11.250
他有一共有多少个数量

39:11.850 --> 39:14.250
我们想把这个东西和这个东西一起返回

39:15.450 --> 39:16.350
明白我的意思吗

39:16.650 --> 39:20.050
我要把第一总数和这个电影的数组一起返回

39:20.850 --> 39:22.950
因此呢 这边

39:24.150 --> 39:24.750
这边

39:25.950 --> 39:28.250
我返回来就不是一个电影的数组了

39:28.350 --> 39:31.450
就是如果成功的话 返回来就不是一个电影的数组了

39:31.550 --> 39:32.650
应该是一个啥呢

39:33.150 --> 39:34.050
应该是一个啥

39:34.550 --> 39:39.450
如果成功 如果成功的话 返回来应该是一个别的东西 什么东西呢

39:40.250 --> 39:41.750
返回来是一个movies

39:41.950 --> 39:43.950
这个玩意儿是一个电影的数组

39:44.750 --> 39:47.550
并且还有个属性court

39:48.050 --> 39:50.050
这个是一个number

39:50.850 --> 39:52.150
返回来是这么一个东西

39:52.750 --> 39:53.450
懂我意思吗

39:53.950 --> 39:54.950
我们最后返回来

39:55.150 --> 39:57.250
如果成功的话 返回来是这么一个东西

39:57.450 --> 40:00.550
如果单码太急了 你觉得这个单码看的太急了

40:00.550 --> 40:00.950
ok

40:01.550 --> 40:03.950
你写这么一个接口 你这里写个接口

40:04.750 --> 40:06.450
export interface

40:07.350 --> 40:11.150
就是我们写个接口名字叫做search result

40:11.850 --> 40:12.850
search result

40:13.350 --> 40:14.750
好 这个results里边呢

40:15.150 --> 40:16.350
我们得到哪些东西呢

40:16.450 --> 40:21.250
得到的是一个是court

40:21.550 --> 40:24.150
总数是一个number

40:25.050 --> 40:25.850
然后还有什么呢

40:25.950 --> 40:27.650
还有一个是data

40:28.350 --> 40:29.850
data是我们具体的数据

40:30.250 --> 40:31.550
是某一个东西的数组

40:31.850 --> 40:33.150
是某一个东西的数组

40:33.250 --> 40:33.850
什么东西的数组

40:33.950 --> 40:34.750
无非的数组

40:36.550 --> 40:37.650
是不是我们应该这样子写

40:38.050 --> 40:38.550
对不对

40:38.750 --> 40:39.750
我们应该这样子写

40:40.750 --> 40:44.550
好 这个接口报错是因为这里要

40:44.650 --> 40:46.250
接口他要让你写个i

40:46.450 --> 40:47.550
他要让你写个i

40:49.350 --> 40:50.350
这里报错

40:50.350 --> 40:51.550
我们看一下这里的错误

40:52.250 --> 40:53.750
他说我们少了分号

40:53.750 --> 40:54.150
对吧

40:54.150 --> 40:55.950
少了分号写上面

40:57.150 --> 40:58.350
好 骑士写到这儿

40:58.350 --> 40:59.550
就是像我们写在嘛

40:59.550 --> 41:00.450
就是这样子

41:00.650 --> 41:01.550
我们一开始呢

41:01.550 --> 41:02.650
眼界很短

41:02.950 --> 41:03.650
写的写的呢

41:03.650 --> 41:05.150
慢慢的把眼界打开了

41:05.350 --> 41:06.650
你看我们之前呢

41:06.650 --> 41:07.650
我们这里我们知道

41:08.050 --> 41:10.050
我这里还要获得一个数量

41:10.050 --> 41:10.350
对吧

41:10.350 --> 41:11.950
我们还要获得个电影的数量

41:11.950 --> 41:13.650
所以我们开始在这里写这个接口

41:13.750 --> 41:14.650
写这个类型

41:15.050 --> 41:16.250
直接写个字面量类型

41:16.250 --> 41:17.250
它里面有两个属性

41:17.250 --> 41:18.150
一个电影的数数

41:18.250 --> 41:19.550
一个是数量

41:19.850 --> 41:20.650
然后写了过后呢

41:20.650 --> 41:21.250
我们发现

41:21.250 --> 41:22.850
这种写法太急了

41:22.850 --> 41:23.950
看着太急了

41:24.150 --> 41:25.150
而且将来呢

41:25.150 --> 41:27.850
如果我下面还有一些查询函数的话

41:28.350 --> 41:29.650
还有一些查询方法的话

41:29.650 --> 41:31.150
可能也要用到这个类型

41:31.250 --> 41:31.650
于是呢

41:31.650 --> 41:33.350
我们又把眼界打开

41:33.350 --> 41:35.150
我们把它做成了一个接口

41:35.850 --> 41:36.750
好做接口的时候

41:36.850 --> 41:37.750
我们马上想到

41:37.950 --> 41:38.550
哎

41:38.850 --> 41:40.150
这个地方我们是电影

41:40.150 --> 41:41.550
那将来我要做用户

41:41.850 --> 41:43.950
尽管我们现在这个系统里面不做用户

41:44.050 --> 41:45.250
但是我会告诉你啊

41:45.650 --> 41:47.650
如果你以后要做更多的东西的话

41:47.750 --> 41:49.650
我们如何来把它变得更加通用

41:50.150 --> 41:51.450
你看做用户的话

41:51.450 --> 41:53.250
查询用户是不是也是这种格式

41:54.050 --> 41:56.950
而查询影院是不是也是这种格式

41:57.250 --> 41:57.850
对吧

41:57.950 --> 41:58.850
是这个意思吧

41:59.750 --> 41:59.950
好

41:59.950 --> 42:00.450
所以说呢

42:00.450 --> 42:01.950
这个地方可以做成公共的

42:02.550 --> 42:04.050
可以做成一个公共的类型

42:04.150 --> 42:05.850
我们可以把它写到ng体里边

42:06.050 --> 42:07.550
或者专门建一个文念家

42:07.650 --> 42:09.750
什么公共类型来进行书写

42:09.950 --> 42:10.650
都可以

42:11.250 --> 42:11.450
好

42:11.450 --> 42:12.350
我们比方见证吧

42:12.550 --> 42:13.050
见证

42:13.250 --> 42:15.650
该取个名字叫comment types

42:16.350 --> 42:17.250
公共类型

42:18.050 --> 42:18.850
公共类型

42:19.350 --> 42:21.350
这里面我们导出一些公共的类型啊

42:21.750 --> 42:22.450
你像这个东西

42:22.450 --> 42:24.650
我们就完全可以把它做成一个公共的类型

42:25.150 --> 42:26.250
该取个它的名字

42:26.350 --> 42:27.150
就叫做

42:27.650 --> 42:29.550
i search result

42:30.950 --> 42:32.250
查询的结果

42:32.550 --> 42:34.150
不管你是用户也好

42:34.350 --> 42:35.750
还是电影也好

42:36.450 --> 42:37.650
还是什么玩意也好

42:37.850 --> 42:39.350
你总会有一个查询结果

42:39.750 --> 42:40.650
查询结果

42:41.250 --> 42:43.150
好查询结果里边

42:43.650 --> 42:45.050
查询结果里边

42:45.450 --> 42:46.450
那么这里边呢

42:46.450 --> 42:47.850
我们可以给它规定

42:48.050 --> 42:49.850
规定有这么一些东西

42:50.550 --> 42:51.150
总数

42:51.250 --> 42:52.250
这个是必须要要的

42:52.750 --> 42:54.950
表示数据总数

42:56.350 --> 42:57.250
好这个呢

42:57.750 --> 42:59.250
查询结果肯定是个数组

42:59.250 --> 43:01.050
但是我不知道是什么数组

43:01.950 --> 43:03.850
我不能假设为电影数组

43:04.050 --> 43:05.650
那我如果以后做用户怎么办呢

43:06.450 --> 43:07.050
怎么办

43:07.450 --> 43:08.650
翻译型是不是又来了

43:08.750 --> 43:10.250
这翻译型非常非常好用

43:11.650 --> 43:12.250
这是

43:13.050 --> 43:13.850
这是这个

43:16.050 --> 43:16.850
数据

43:17.050 --> 43:18.050
查询数据

43:18.250 --> 43:19.250
查询的数据

43:20.750 --> 43:23.450
还有可能会出现查询的错误

43:23.450 --> 43:23.950
对吧

43:24.050 --> 43:26.050
还有可能会出现查询的错误

43:26.150 --> 43:28.050
那么我们再给它一个

43:28.850 --> 43:29.450
arrow

43:29.850 --> 43:30.450
查询错误

43:30.450 --> 43:31.650
是一个制服错数

43:32.050 --> 43:33.050
是一个制服错数

43:33.650 --> 43:35.650
这是查询的错误

43:36.150 --> 43:37.250
我们把一起封装

43:37.450 --> 43:38.050
一起封装

43:38.050 --> 43:38.650
封装好

43:39.650 --> 43:40.650
写这么一个结果

43:41.750 --> 43:42.550
数据总数

43:42.950 --> 43:43.850
查询的数据

43:44.250 --> 43:45.050
查询的错误

43:46.350 --> 43:47.750
好有了这个东西过后呢

43:47.750 --> 43:48.650
我们就这边

43:49.350 --> 43:51.850
这边来来改造一下这个函数

43:52.250 --> 43:53.650
它反回什么最合适

43:54.150 --> 43:55.250
反回啥最合适

43:56.050 --> 43:57.750
反回这么一个东西最合适

43:58.650 --> 43:59.450
反回啥呢

43:59.850 --> 44:03.850
i search results movie

44:04.850 --> 44:05.450
一看一下

44:05.950 --> 44:07.450
反回这个东西是不是最合适的

44:07.750 --> 44:08.850
反回这么一个东西

44:09.550 --> 44:11.850
好由于我给它限制的内词为movie

44:11.850 --> 44:12.550
于是呢

44:12.650 --> 44:13.650
一会使用的时候

44:13.650 --> 44:15.750
这个t的这个位置会变成了movie了

44:16.150 --> 44:17.250
就变成了movie了

44:18.250 --> 44:18.650
好

44:18.650 --> 44:20.550
我们这样子写写好了之后

44:20.550 --> 44:22.450
我们来看来观察一下啊

44:22.850 --> 44:24.750
先做数据验证啊

44:24.750 --> 44:26.150
先做数据验证

44:26.350 --> 44:27.750
验证完了过后

44:27.950 --> 44:29.350
如果有错误

44:29.950 --> 44:31.050
如果有错误

44:31.050 --> 44:32.350
我应该反回啥呢

44:33.350 --> 44:34.350
反回啥

44:34.550 --> 44:35.750
反回cult

44:36.550 --> 44:38.350
你啊总数我都没有查

44:38.350 --> 44:40.150
一群总数就你啊

44:40.350 --> 44:41.150
data

44:41.550 --> 44:42.750
空数组啊

44:42.750 --> 44:43.750
现在有内行检查

44:43.750 --> 44:45.450
你看看它要让你这个内行

44:45.450 --> 44:46.750
符合这个内行的要求

44:47.150 --> 44:48.450
好如果有错误的话

44:48.450 --> 44:49.550
那么就erus

44:49.750 --> 44:51.750
erus把这个错误给他给他就行了

44:52.350 --> 44:53.350
这个数据给他

44:53.450 --> 44:54.750
这是有错误的情况

44:55.150 --> 44:56.750
好如果没有错误的情况

44:56.750 --> 44:57.950
我们反回的是啥呢

44:58.250 --> 44:59.550
反回的是啊

44:59.950 --> 45:00.550
cult

45:01.150 --> 45:03.950
多少就是这个就是这个辩量对吧

45:04.150 --> 45:06.150
当辩量名和属性名移植的时候

45:06.150 --> 45:07.350
直接使用辩量名

45:07.950 --> 45:09.750
好如果就是data

45:09.750 --> 45:11.050
data是啥movice

45:11.550 --> 45:12.250
movice

45:13.550 --> 45:15.750
好然后是错误错误

45:15.750 --> 45:17.050
肯定是个空数组啊

45:17.050 --> 45:18.050
肯定是个空数组

45:19.550 --> 45:22.150
好我们用这种方式来进行反回

45:22.550 --> 45:23.550
来书写一个代码

45:25.460 --> 45:27.960
好这里还有一个ts nint的错误

45:27.960 --> 45:28.760
看在哪啊

45:29.260 --> 45:30.760
我看这个ts nint的错误在哪

45:30.860 --> 45:31.460
我在这

45:31.860 --> 45:32.660
空行太多

45:33.960 --> 45:35.160
好那么这里写完了

45:35.960 --> 45:37.360
现在写到之后呢

45:37.460 --> 45:39.060
我们再回到回到这边来看

45:40.160 --> 45:40.860
那么现在呢

45:40.860 --> 45:42.660
这个result是个啥玩意

45:42.660 --> 45:43.660
我们可以判断

45:43.960 --> 45:45.460
如果这个result的

45:46.060 --> 45:48.960
erus.nint大于0

45:49.560 --> 45:50.260
说明啥

45:50.260 --> 45:51.260
所以有错误

45:51.460 --> 45:53.460
好我们输出错误

45:53.760 --> 45:55.960
result.erus

45:56.960 --> 45:58.660
好如果没有错误的话

45:58.660 --> 46:00.460
我们输出什么呢

46:00.660 --> 46:03.060
输出电影每一个电影的名字吧

46:03.560 --> 46:05.360
啊这里我们输出每一个电影的名字

46:05.560 --> 46:06.560
result.data

46:07.060 --> 46:08.460
得到电影的电影的输出

46:08.660 --> 46:09.760
你看现在的我们就知道了

46:09.760 --> 46:10.460
这个data

46:11.460 --> 46:12.760
是一个电影的输出

46:13.460 --> 46:13.860
好

46:14.860 --> 46:16.460
哦这里我们应该写写这个啊

46:16.760 --> 46:17.660
我这里写错了

46:17.860 --> 46:19.060
我们自己应该写这个

46:19.460 --> 46:20.900
iresult.imov

46:20.900 --> 46:22.660
啊这是数据库的查询结果

46:22.860 --> 46:24.360
啊imov写成这个

46:24.560 --> 46:25.260
才是正确

46:26.460 --> 46:28.060
好这里data我们循环它

46:28.260 --> 46:29.960
输出它每一个名字

46:30.660 --> 46:31.260
好来吧

46:32.860 --> 46:36.560
输出每一个电影的名字

46:39.120 --> 46:40.820
啊咱们来看一下啊来看一下

46:41.520 --> 46:42.120
保存

46:44.460 --> 46:45.560
好稍等一下啊

46:46.660 --> 46:47.660
好有错误

46:48.460 --> 46:49.660
没有完成查询

46:50.360 --> 46:51.060
好我们来看

46:51.660 --> 46:52.660
没有错误的情况

46:53.560 --> 46:54.260
yema1

46:55.860 --> 46:56.460
保存

46:59.390 --> 47:01.190
啊电影1到电影9

47:01.690 --> 47:02.190
对吧

47:02.590 --> 47:03.390
没问题吧

47:03.790 --> 47:05.890
啊啊第一个是流浪地球啊

47:06.090 --> 47:07.590
1到9一共10条数据

47:07.790 --> 47:08.690
啊第二页

47:09.390 --> 47:11.090
应该是10到多少

47:11.290 --> 47:12.590
10到19对吧

47:13.290 --> 47:14.090
10到19

47:14.790 --> 47:16.290
啊第三页

47:17.390 --> 47:18.790
啊我来测试一下啊

47:19.390 --> 47:21.190
默认是每页显示10条

47:22.290 --> 47:23.590
啊20到29

47:23.690 --> 47:25.490
那么我现在里面测限制一下

47:25.490 --> 47:26.890
每页只显示5条

47:27.290 --> 47:28.790
每页只显示5条数据

47:29.290 --> 47:29.990
保存一下

47:32.100 --> 47:34.100
啊看一下啊来测试一下

47:34.100 --> 47:36.200
你看是5条数据搞定了

47:36.500 --> 47:37.400
好我们再测试一下

47:37.400 --> 47:39.200
给他一个查询关键字啊

47:39.500 --> 47:40.800
给他一个查询关键字

47:41.000 --> 47:42.400
我们最后来输出总数吧

47:42.500 --> 47:43.600
再输出一个总数

47:44.800 --> 47:45.600
总数

47:46.100 --> 47:47.900
总数是M点

47:48.900 --> 47:50.200
总数是result

47:50.700 --> 47:51.500
点code

47:52.100 --> 47:52.800
总数

47:53.700 --> 47:55.700
啊这里给他个查询关键字

47:55.900 --> 47:57.300
先不给先不给关键字吧

47:57.300 --> 47:58.500
我们看一下总数是多少

47:59.800 --> 48:00.400
保存一下

48:03.020 --> 48:03.920
总数是

48:04.620 --> 48:05.620
1215啊

48:05.620 --> 48:06.920
对加了数据太多了啊

48:06.920 --> 48:07.920
加了太多数据了

48:08.620 --> 48:09.820
然后我们再来看

48:09.920 --> 48:10.920
给他一个查询

48:10.920 --> 48:11.920
啊给他个查询

48:12.220 --> 48:13.920
查询一零

48:14.920 --> 48:16.220
因为前面两个字是一样的

48:16.220 --> 48:17.520
我们就模糊查询一零

48:20.620 --> 48:21.520
查出来是多少

48:22.320 --> 48:23.620
一共25条数据

48:23.820 --> 48:24.920
一共25条数据

48:25.120 --> 48:27.720
现在查在25条数据里面查了5条出来

48:27.820 --> 48:28.320
每一

48:28.420 --> 48:29.820
然后查每页5条

48:30.320 --> 48:31.220
然后第三页

48:32.120 --> 48:33.620
好那么这个查询方法

48:33.620 --> 48:34.520
我们就搞定了

48:35.520 --> 48:37.020
花的时间有点多啊

48:37.120 --> 48:39.320
但是因为我们考虑到了更多的细节

48:39.920 --> 48:41.320
比方说我们这里的

48:41.720 --> 48:42.920
加了内情

48:42.920 --> 48:44.120
内情约束

48:44.420 --> 48:45.620
然后返回结果呢

48:45.620 --> 48:46.920
我们写了一个通用的

48:47.320 --> 48:48.420
社区绿道子

48:48.620 --> 48:50.420
当然这些事情你不做可不可以

48:51.120 --> 48:52.120
可不可以不做

48:52.320 --> 48:53.420
当然可以不做

48:53.720 --> 48:55.120
跟以前接识的一样的一个

48:55.120 --> 48:56.820
一有二杂鞋就返回个n里呗

48:57.120 --> 48:59.420
啊你只如果你觉得麻烦的话

48:59.420 --> 49:00.420
你可以返回个n里

49:00.920 --> 49:02.220
但是呢你获得不了

49:02.320 --> 49:03.120
内情检查

49:04.020 --> 49:05.920
啊然后我们做了这件事情过后

49:06.020 --> 49:06.720
以后

49:07.120 --> 49:08.620
像其他的用户啊

49:08.720 --> 49:10.620
影院啊这些是不是可以通用了

49:10.620 --> 49:12.120
这个玩意儿就可以通用了

49:12.520 --> 49:14.520
我们这里提出了提出了一个附类

49:14.720 --> 49:16.320
如果我们以后做用户

49:16.720 --> 49:18.020
做啊

49:18.020 --> 49:20.020
影院做其他的实体的时候

49:20.020 --> 49:21.720
是不是可以继承了可以通用了

49:22.320 --> 49:23.120
尽管呢

49:23.120 --> 49:25.120
如果我只考如果我做系统的时候

49:25.120 --> 49:26.920
只考虑我们当前这个点

49:27.020 --> 49:28.520
把当前的问题解决就完事

49:29.020 --> 49:31.620
那会给以后造成很多很多的麻烦

49:31.820 --> 49:33.520
所以说文系写代码的时候

49:33.520 --> 49:36.420
尽管我做的内容只做一个电影

49:36.520 --> 49:38.320
但是我会把这些东西也考虑到

49:38.320 --> 49:41.320
也告诉大家我们应该去这样去思考

49:41.620 --> 49:43.120
啊考虑的长远一点

49:43.620 --> 49:45.620
啊我经常说做项目的时候

49:45.620 --> 49:47.620
让你一流出接口啊

49:47.620 --> 49:50.420
一流出呆码的空间

49:50.620 --> 49:51.720
帮助以后呢

49:51.720 --> 49:54.020
方便以后扩展功能

49:54.220 --> 49:55.820
说的就是这个意思啊

49:55.820 --> 49:56.720
说的就是这个意思

49:58.020 --> 49:58.720
好了啊

49:58.720 --> 50:00.820
那么我们这里呢完成了

50:01.320 --> 50:02.420
查询了对吧

50:02.420 --> 50:03.620
那数据库的操作

50:04.320 --> 50:06.120
对电影这块的数据库的操作

50:06.120 --> 50:07.120
就全部做完了

50:07.620 --> 50:08.820
好那么接下来呢

50:08.820 --> 50:11.520
就是做express的接口了

50:11.520 --> 50:13.020
提供给外部的

50:13.520 --> 50:15.120
提供给attp请求

50:15.420 --> 50:16.720
请求者来进行访问

50:16.920 --> 50:18.520
通过接口来进行访问数据

50:19.020 --> 50:20.420
好关键点啊

50:20.420 --> 50:21.220
我们把这个

50:22.420 --> 50:23.520
数据库先搞定

50:23.920 --> 50:24.720
好那么接下来呢

50:24.720 --> 50:26.920
大家还是跟着我把这个代码

50:27.120 --> 50:27.820
书写出来啊

50:27.820 --> 50:29.620
按照你们自己的底线书写出来

50:30.120 --> 50:31.220
这一块我相信呢

50:31.220 --> 50:33.620
比俄罗斯方块的一块要简单很多啊

50:33.920 --> 50:36.520
因为你们以前是学过这个猫故事的

50:37.380 --> 50:37.920
好了啊

50:37.920 --> 50:39.720
那么我们这里呢

50:39.720 --> 50:41.220
这里可能就到此结束了啊

50:41.720 --> 50:43.020
ok 拜拜

