WEBVTT

00:00.690 --> 00:02.690
咱们接着来啊

00:02.690 --> 00:06.690
不知道前边的代码大家能不能理解啊

00:06.690 --> 00:11.690
我建议了大家至少要能够达到这么一个理解程度

00:11.690 --> 00:13.690
就是说前面代码呢

00:13.690 --> 00:14.690
见了这些内啊

00:14.690 --> 00:19.690
你如果实在不清楚它是为什么这样子去写啊

00:19.690 --> 00:20.690
这个我可以理解

00:20.690 --> 00:24.690
因为你们第一次进出面向对象

00:24.690 --> 00:27.690
所以说这种写坊呢可能不是很

00:27.690 --> 00:29.690
就写的不是很顺畅啊

00:29.690 --> 00:33.690
至少呢你可能不太清楚它为什么要这样去操作

00:33.690 --> 00:35.690
这种情况呢我能理解

00:35.690 --> 00:38.690
但是呢这些内既然建出来了啊

00:38.690 --> 00:39.690
把它写好了

00:39.690 --> 00:42.690
你至少得知道如何去使用它

00:42.690 --> 00:43.690
这是最低要求

00:43.690 --> 00:46.690
如果这一块你都不太清楚的话

00:46.690 --> 00:48.690
我建议你先不要着急往后看

00:48.690 --> 00:51.690
先自己去尝试使用一下

00:51.690 --> 00:53.690
看它各种情况怎么去操作

00:53.690 --> 00:56.690
你可以在上一课不是咱们做了一些例子吗

00:57.690 --> 00:59.690
做了一个小DEMON

00:59.690 --> 01:00.690
把运行出来啊

01:00.690 --> 01:02.690
给大家看一下啊

01:02.690 --> 01:06.690
那你至少呢能够把这个小DEMON把它做出来

01:06.690 --> 01:09.690
可以熟悉一下这个内怎么去使用

01:09.690 --> 01:11.690
你至少要达到这么一个目标之后呢

01:11.690 --> 01:13.690
我们才继续往下学

01:13.690 --> 01:15.690
就这样的一个效果

01:15.690 --> 01:17.690
当然了你可以再测试一下像左一动

01:17.690 --> 01:18.690
像右一动

01:18.690 --> 01:19.690
该怎么来处理

01:19.690 --> 01:20.690
如何来移除

01:20.690 --> 01:21.690
如何贴点显示的

01:21.690 --> 01:23.690
就是把这些东西呢先用熟

01:23.690 --> 01:25.690
把这个内的结构先用熟

01:25.690 --> 01:27.690
假如这个内已经给你写好了

01:27.690 --> 01:28.690
你怎么去使用

01:28.690 --> 01:29.690
首先把这个搞清楚

01:29.690 --> 01:32.690
搞清楚之后呢我们再继续往下学

01:32.690 --> 01:33.690
ok

01:33.690 --> 01:35.690
这结构呢

01:35.690 --> 01:37.690
东西就有点复杂了啊

01:37.690 --> 01:39.690
会带有点难度了

01:39.690 --> 01:42.690
这结构呢咱们会开发

01:42.690 --> 01:44.690
开发

01:44.690 --> 01:46.690
方块的组合类

01:46.690 --> 01:48.690
方块的组合类

01:48.690 --> 01:49.690
什么意思呢

01:49.690 --> 01:51.690
就是说我们的俄罗斯方块里边

01:51.690 --> 01:52.690
你看这些

01:52.690 --> 01:54.690
每一个俄罗斯方块啊

01:54.690 --> 01:55.690
整体

01:55.690 --> 01:56.690
就这个东西

01:56.690 --> 01:58.690
它其实是由一个一个的小方块

01:58.690 --> 02:00.690
组成的啊再看这

02:00.690 --> 02:02.690
你看这个方块

02:02.690 --> 02:04.690
所以也是由一个一个的小方块

02:04.690 --> 02:05.690
组成的对吧

02:05.690 --> 02:07.690
所以说呢我们这里呢会先开发

02:07.690 --> 02:08.690
这么一个

02:08.690 --> 02:11.690
方块的组合啊这么一个类

02:11.690 --> 02:13.690
他专门来处理方块的组合

02:13.690 --> 02:14.690
的如何来进行组合

02:14.690 --> 02:16.690
组合之后呢

02:16.690 --> 02:18.690
怎么来操作啊操作它的话

02:18.690 --> 02:20.690
应该是操作一个整体

02:20.690 --> 02:22.690
好我们来开发这么一个东西

02:22.690 --> 02:24.690
其实方块组合呢其实本质上

02:24.690 --> 02:25.690
非常简单

02:25.690 --> 02:27.690
就是一个小方块的数组对不对

02:27.690 --> 02:28.690
这个应该可以想到吧

02:28.690 --> 02:30.690
就是一个小方块的数组啊

02:30.690 --> 02:32.690
我们之前建议了一个小方块

02:32.690 --> 02:33.690
其实呢这里呢我们可以再建议

02:33.690 --> 02:34.690
多个小方块

02:34.690 --> 02:36.690
其实也是一样的比方说啊

02:36.690 --> 02:38.690
按照上一节目的指示啊

02:38.690 --> 02:40.690
咱们这里建了一个小方块对吧

02:40.690 --> 02:42.690
那么我们这里可以复制一下啊

02:42.690 --> 02:44.690
再建一个小方块

02:44.690 --> 02:46.690
比方这里

02:46.690 --> 02:48.690
我们sq2

02:48.690 --> 02:52.130
再建一个小方块

02:52.130 --> 02:55.130
这个坐标呢我给他设置为4

02:55.130 --> 02:56.130
x为4

02:56.130 --> 02:58.130
这个呢sq2

02:58.130 --> 02:59.130
然后点击的时候呢除了

02:59.130 --> 03:01.130
第一个方块呢它的

03:01.130 --> 03:03.130
y做不要增加呢第二个方块

03:03.130 --> 03:04.130
y做不要也要增加

03:04.130 --> 03:06.130
一出的时候呢除了

03:06.130 --> 03:08.130
第一个方块啊要移除

03:08.130 --> 03:10.130
第二个方块呢也要移除其实是一样的

03:10.130 --> 03:12.130
就是建立一个数组啊把存起来

03:12.130 --> 03:14.130
我们这里建立两个对吧

03:14.130 --> 03:16.130
你可以把这两个放到数组里边

03:16.130 --> 03:18.130
天降的时候也是一样啊

03:18.130 --> 03:20.130
也是一样的

03:20.130 --> 03:22.130
好咱们来看一下啊

03:22.130 --> 03:24.130
保存一下

03:24.130 --> 03:26.130
你看不就两个小方块了吗对吧

03:26.130 --> 03:28.130
移动的时候

03:28.130 --> 03:29.130
移动的时候怎么回事啊

03:29.130 --> 03:31.130
哦这里这里写错了啊

03:31.130 --> 03:34.130
点击移动的时候这里是sq2啊

03:34.130 --> 03:36.130
sq2

03:36.130 --> 03:38.130
啊保存一下

03:38.130 --> 03:39.130
OK

03:39.130 --> 03:41.130
现在移动你看不就整体移动了吗对不对

03:41.130 --> 03:44.130
其实它原理上是非常非常简单的

03:44.130 --> 03:46.130
好我们现在需要这么一个内

03:46.130 --> 03:48.130
来控制这么一个小方块的组合

03:48.130 --> 03:50.130
好这里呢我们新建一个内

03:50.130 --> 03:52.130
给它取名为square

03:52.130 --> 03:54.130
group

03:54.130 --> 03:56.130
小方块的组合内

03:56.130 --> 03:58.130
当然你看我们现在建立的内的位置啊

03:58.130 --> 04:00.130
是建在core这个文件夹的

04:00.130 --> 04:02.130
而不是建在v2这个文件夹的

04:02.130 --> 04:04.130
说明呢这个内里边

04:04.130 --> 04:06.130
它处理的只有存数据

04:06.130 --> 04:08.130
啊只做存数据的处理

04:08.130 --> 04:10.130
跟显示没有任何关系

04:10.130 --> 04:12.130
好我们导出这么一个内啊

04:12.130 --> 04:14.130
export class

04:14.130 --> 04:16.130
square

04:16.130 --> 04:17.130
group

04:19.130 --> 04:21.130
好我们现在就开始思考了

04:21.130 --> 04:23.130
写好了内之后呢马上就要去想

04:23.130 --> 04:26.130
这个内里边有哪些属性

04:26.130 --> 04:28.130
有哪些属性呢

04:28.130 --> 04:30.130
其实我们最容易想到的

04:30.130 --> 04:32.130
它既然是一个方块的组合

04:32.130 --> 04:34.130
应该有什么样的属性

04:34.130 --> 04:36.130
是不是应该有一个

04:36.130 --> 04:38.130
一个数组对吧一个方块的

04:38.130 --> 04:40.130
数组啊这里边应该有一个方块的

04:40.130 --> 04:41.130
数组

04:41.130 --> 04:43.130
OK我们先把这个属性啊

04:43.130 --> 04:45.130
private写出来

04:45.130 --> 04:47.130
squares

04:47.130 --> 04:49.130
然后呢我们

04:49.130 --> 04:51.130
约束一下啊它的内想呢

04:51.130 --> 04:53.130
是一个square的数组

04:53.130 --> 04:55.130
啊它是一个数组

04:55.130 --> 04:57.130
好这个数组呢我们其实

04:57.130 --> 04:59.130
可以给它付一个默认值啊

04:59.130 --> 05:01.130
可以给它付一个默认值

05:01.130 --> 05:03.130
我们后边呢那也可以不付

05:03.130 --> 05:05.130
我们在构造函数里面对它进行初始化

05:05.130 --> 05:06.130
也行

05:06.130 --> 05:08.130
写好这个数组之后我们

05:08.130 --> 05:10.130
这个地方有一个难点

05:10.130 --> 05:12.130
我们得想一想

05:12.130 --> 05:14.130
这个数组里边的东西

05:14.130 --> 05:16.130
啊就是这个数组里边的东西

05:16.130 --> 05:18.130
它能不能变化

05:18.130 --> 05:20.130
我们先想这个问题

05:20.130 --> 05:22.130
一个一个来啊

05:22.130 --> 05:24.130
这里的不要着急千万不要浮躁

05:24.130 --> 05:26.130
这里一个个来

05:26.130 --> 05:28.130
首先是

05:28.130 --> 05:30.130
组合内中

05:30.130 --> 05:32.130
有的属性

05:32.130 --> 05:34.130
第一个属性呢就是

05:34.130 --> 05:36.130
小方块的数组

05:36.130 --> 05:38.130
我们首先要思考一个问题

05:38.130 --> 05:40.130
思考

05:40.130 --> 05:42.130
该数组的

05:42.130 --> 05:44.130
组成

05:44.130 --> 05:46.130
该数组的组成

05:46.130 --> 05:48.130
能不能

05:48.130 --> 05:50.130
发生变化

05:50.130 --> 05:52.130
首先思考这么一个问题啊

05:52.130 --> 05:54.130
其实你仔细想一想

05:54.130 --> 05:56.130
我们在对照游戏里面看一下啊

05:56.130 --> 05:58.130
对照游戏里面看一下

05:58.130 --> 06:00.130
再重新开始啊

06:00.130 --> 06:02.130
好这个好比方说啊

06:02.130 --> 06:04.130
这么一个小方块

06:04.130 --> 06:06.130
这么一个方块的组合

06:06.130 --> 06:08.130
你看这个方块的组合的话

06:08.130 --> 06:10.130
其实就是一个数组

06:10.130 --> 06:12.130
这个数组里面击入了

06:12.130 --> 06:14.130
两块对吧数组有四项

06:14.130 --> 06:16.130
那么这个东西是啥呢

06:16.130 --> 06:18.130
这个东西其实就是一个

06:18.130 --> 06:20.130
这个对象啊square group的对象

06:20.130 --> 06:22.130
那么既然是它的对象的话

06:22.130 --> 06:24.130
你想一想啊

06:24.130 --> 06:26.130
这个数组

06:26.130 --> 06:28.130
它能不能变化

06:28.130 --> 06:30.130
它能不能能在运行的过程中突然加一项

06:30.130 --> 06:32.130
或者是突然移出一项

06:32.130 --> 06:34.130
或者是改变数组的位置

06:34.130 --> 06:36.130
有没有可能呢

06:36.130 --> 06:38.130
实际上是没有可能的啊

06:38.130 --> 06:40.130
有可能有这么两个疑问

06:40.130 --> 06:42.130
一个是消除

06:42.130 --> 06:44.130
消除我们现在不管

06:44.130 --> 06:46.130
我们现在做的是这个方块

06:46.130 --> 06:48.130
做的是整个这个方块

06:48.130 --> 06:50.130
消除是另外一个东西

06:50.130 --> 06:52.130
另外一个东西我们后边再处理

06:52.130 --> 06:54.130
现在不管消除

06:54.130 --> 06:56.130
不考虑消除的话

06:56.130 --> 06:58.130
一个俄罗斯方块只要创建好了

06:58.130 --> 07:00.130
它的形状就固定了对吧

07:00.130 --> 07:02.130
形状固定就表示这个数组里边

07:02.130 --> 07:04.130
一共就这么一项

07:04.130 --> 07:06.130
比方这个数组一共就有

07:06.130 --> 07:08.130
一二三四有四项对不对

07:08.130 --> 07:10.130
这个数组也是四项

07:10.130 --> 07:12.130
只是它的排列做标不一样而已

07:12.130 --> 07:14.130
因此我们会发现

07:14.130 --> 07:16.130
这个数组的内容是不能随便增加的

07:16.130 --> 07:18.130
也不能随便减少

07:18.130 --> 07:20.130
因此我想把这个数组

07:20.130 --> 07:22.130
做成一个啥呢

07:22.130 --> 07:24.130
做成一个止毒的数组

07:24.130 --> 07:26.130
这个数组是止毒的

07:26.130 --> 07:28.130
因此我这里写法上

07:28.130 --> 07:30.130
我会这样子写

07:30.130 --> 07:32.130
Red

07:32.130 --> 07:34.130
OnlyGrid

07:34.130 --> 07:36.130
然后

07:36.130 --> 07:38.130
然后

07:38.130 --> 07:40.130
使用一个范形

07:40.130 --> 07:42.130
这个是什么数组

07:42.130 --> 07:44.130
这个是一个小方块的数组

07:44.130 --> 07:46.130
把它做成一个止毒的数组

07:46.130 --> 07:48.130
或者我们用这种语法也可以

07:48.130 --> 07:50.130
Red Only

07:50.130 --> 07:52.130
然后Square

07:52.130 --> 07:54.130
两个中文号都是讲过的对吧

07:54.130 --> 07:56.130
我们把它做成这么一个数组

07:56.130 --> 07:58.130
这是第一个问题

07:58.130 --> 08:00.130
要理解清楚

08:00.130 --> 08:02.130
我们可以回答

08:02.130 --> 08:04.130
不能发生变化

08:04.130 --> 08:06.130
是止毒数组

08:06.130 --> 08:08.130
好

08:08.130 --> 08:10.130
我们先把这个问题搞定

08:10.130 --> 08:12.130
搞定了之后呢

08:12.130 --> 08:14.130
我也在思考下一个问题

08:14.130 --> 08:16.130
思考

08:16.130 --> 08:18.130
该数组的

08:18.130 --> 08:20.130
每一项

08:20.130 --> 08:22.130
从何而来

08:22.130 --> 08:24.130
这个数组里边

08:24.130 --> 08:26.130
有很多的

08:26.130 --> 08:28.130
可能会装一些小方块

08:28.130 --> 08:30.130
那么到底装几个小方块

08:30.130 --> 08:32.130
每一个小方块的坐标

08:32.130 --> 08:34.130
又是谁

08:34.130 --> 08:36.130
每一个小方块的坐标在哪

08:36.130 --> 08:38.130
装几个小方块

08:38.130 --> 08:40.130
那么这个东西

08:40.130 --> 08:42.130
该怎么来处理

08:42.130 --> 08:44.130
这也是本节课的一个难点

08:44.130 --> 08:46.130
要有一定的想象力

08:46.130 --> 08:48.130
或者是一定的逻辑思维

08:48.130 --> 08:50.130
我们现在开发的类是什么

08:50.130 --> 08:52.130
开发的类是这么一个类

08:52.130 --> 08:54.130
这个类里边

08:54.130 --> 08:56.130
它有一个小方块的组合

08:56.130 --> 08:58.130
那么这个小方块怎么来进行组合呢

08:58.130 --> 09:00.130
怎么来进行组合呢

09:00.130 --> 09:02.130
这个位置又如何来定呢

09:02.130 --> 09:04.130
好

09:04.130 --> 09:06.130
这里呢其实我们可以

09:06.130 --> 09:08.130
做出我们按照逻辑来说的话

09:08.130 --> 09:10.130
我们可以这样子来描述

09:10.130 --> 09:12.130
我们这里写一下

09:12.130 --> 09:14.130
可以这样子描述

09:14.130 --> 09:16.130
一个方块

09:16.130 --> 09:18.130
一个方块的组合

09:18.130 --> 09:20.130
他们如何进行组合

09:20.130 --> 09:22.130
他们的坐标如何排列

09:22.130 --> 09:24.130
取决于

09:24.130 --> 09:26.130
方块

09:26.130 --> 09:28.130
取决于组合的形状

09:28.130 --> 09:30.130
对不对

09:30.130 --> 09:32.130
是不是

09:32.130 --> 09:34.130
我只要把形状给它固定了

09:34.130 --> 09:36.130
那么他们移动的时候

09:36.130 --> 09:38.130
要左移动呢就

09:38.130 --> 09:40.130
每一个坐横坐标就减1

09:40.130 --> 09:42.130
要右移动呢

09:42.130 --> 09:44.130
每一个横坐标就加1

09:44.130 --> 09:46.130
应该是这么一个逻辑

09:46.130 --> 09:48.130
要向下移动呢

09:48.130 --> 09:50.130
每一个重坐标加1

09:50.130 --> 09:52.130
要向上移动呢

09:52.130 --> 09:54.130
我们这个游戏里面好像没有向上移动

09:54.130 --> 09:56.130
要向上移动呢

09:56.130 --> 09:58.130
坐标就减1

09:58.130 --> 10:00.130
最重要的是

10:00.130 --> 10:02.130
要确定它的形状

10:02.130 --> 10:04.130
它的形状要确定下来

10:04.130 --> 10:06.130
好这个形状

10:06.130 --> 10:08.130
我们用什么样的数据内形来描述呢

10:08.130 --> 10:10.130
什么叫做形状

10:10.130 --> 10:12.130
什么叫做形状

10:12.130 --> 10:14.130
形状是什么

10:14.130 --> 10:16.130
形状就是

10:16.130 --> 10:18.130
这些坐标的相对位置

10:18.130 --> 10:20.130
对不对

10:20.130 --> 10:22.130
形状就是坐标的相对位置

10:22.130 --> 10:24.130
形状其实就是

10:24.130 --> 10:26.130
一系列坐标的组合

10:26.130 --> 10:28.130
比方说我们可以这样子来定

10:28.130 --> 10:30.130
什么叫形状呢

10:30.130 --> 10:32.130
我们这里先纪别

10:32.130 --> 10:34.130
因为我想到的话

10:34.130 --> 10:36.130
我会这样去思考

10:36.130 --> 10:38.130
形状指的是

10:38.130 --> 10:40.130
一组

10:40.130 --> 10:42.130
相对

10:42.130 --> 10:44.130
坐标的组合

10:44.130 --> 10:46.130
这叫做形状

10:46.130 --> 10:48.130
这个组合里边呢

10:48.130 --> 10:50.130
该组合中

10:50.130 --> 10:52.130
有一个特殊

10:52.130 --> 10:54.130
坐标

10:54.130 --> 10:56.130
表示形状的

10:56.130 --> 10:58.130
中心

10:58.130 --> 11:00.130
这表示形状

11:00.130 --> 11:02.130
有一个特殊坐标表示

11:02.130 --> 11:04.130
形状的中心

11:04.130 --> 11:06.130
这句话是啥意思呢

11:06.130 --> 11:08.130
我这里举个例子

11:08.130 --> 11:10.130
比方说我要表达这么一个形状

11:10.130 --> 11:12.130
我要表达这么一个形状

11:12.130 --> 11:14.130
我要先确定

11:14.130 --> 11:16.130
这个形状的中心在哪

11:16.130 --> 11:18.130
这个形状的中心在哪

11:18.130 --> 11:20.130
中心在哪呢

11:20.130 --> 11:22.130
中心在这

11:22.130 --> 11:24.130
对不对

11:24.130 --> 11:26.130
这个小方块

11:26.130 --> 11:28.130
中间这个小方块表示中心

11:28.130 --> 11:30.130
那么我首先把中心点

11:30.130 --> 11:32.130
认为它的坐标

11:32.130 --> 11:34.130
它的相对坐标是0和0

11:34.130 --> 11:36.130
所以我这里说的坐标

11:36.130 --> 11:38.130
指的是在这个形状的

11:38.130 --> 11:40.130
范畴里的坐标是一个相对坐标

11:40.130 --> 11:42.130
而指的不是整个游戏面板的坐标

11:42.130 --> 11:44.130
指的不是整个游戏面板的坐标

11:44.130 --> 11:46.130
那是绝对坐标

11:46.130 --> 11:48.130
那是他说应该显示的位置

11:48.130 --> 11:50.130
我现在说的坐标

11:50.130 --> 11:52.130
是以这个形状为中心

11:52.130 --> 11:54.130
把这个中心点作为0和0

11:54.130 --> 11:56.130
然后其他的点呢

11:56.130 --> 11:58.130
根据这个中心点

11:58.130 --> 12:00.130
来表示它的相对坐标

12:00.130 --> 12:02.130
比方说我要描述这么一个形状

12:02.130 --> 12:04.130
我应该怎么来描述呢

12:04.130 --> 12:07.700
我这里开个计识吧

12:07.700 --> 12:11.710
我可以这样描述

12:11.710 --> 12:13.710
它中心点的坐标是

12:13.710 --> 12:15.710
0

12:15.710 --> 12:17.710
中心点的坐标是0

12:17.710 --> 12:19.710
那么左边那个小方块

12:19.710 --> 12:21.710
那么它的坐标应该是多少呢

12:21.710 --> 12:23.710
应该是多少

12:23.710 --> 12:25.710
是不是就是负10

12:25.710 --> 12:27.710
对吧负10

12:27.710 --> 12:29.710
那么左边这一块

12:29.710 --> 12:31.710
左边这一块

12:31.710 --> 12:33.710
就应该是负1

12:33.710 --> 12:37.090
负10

12:37.090 --> 12:39.090
然后上边这一块呢

12:39.090 --> 12:41.090
上边这一块应该是啥

12:41.090 --> 12:43.090
上边这一块就应该是

12:43.090 --> 12:45.090
是啥呢

12:45.090 --> 12:47.090
就应该是

12:47.090 --> 12:49.090
是啥呢

12:49.090 --> 12:51.090
就应该是

12:51.090 --> 12:53.090
多少0负1

12:53.090 --> 12:55.090
对不对

12:55.090 --> 12:57.090
那么下边这一块呢应该是啥

12:57.090 --> 12:59.090
下边这一块就应该是

12:59.090 --> 13:01.090
0

13:01.090 --> 13:03.090
1

13:03.090 --> 13:05.090
那么我们把4个坐标

13:05.090 --> 13:07.090
组合成一个数组

13:07.090 --> 13:09.090
一看是不是个形状就描述出来了

13:09.090 --> 13:11.090
能理解吗

13:11.090 --> 13:13.090
好好想一想

13:13.090 --> 13:15.090
我们现在要做的是

13:15.090 --> 13:17.090
刚过的形状以及它的中心点在哪

13:17.090 --> 13:19.090
为什么要确定中心点呢

13:19.090 --> 13:21.090
因为到时候我要移动的时候呢

13:21.090 --> 13:23.090
我是看跟中心点的坐标

13:23.090 --> 13:25.090
它的相对位移来进行移动的

13:25.090 --> 13:27.090
现在不要管那么多

13:27.090 --> 13:29.090
中心点我们后标一定会用到的

13:29.090 --> 13:31.090
你想到时候要旋转

13:31.090 --> 13:33.090
旋转的时候是不是也要按照中心点来旋转

13:33.090 --> 13:35.090
因此呢中心点是一定要确定的

13:35.090 --> 13:37.090
这是可能需要一些

13:37.090 --> 13:39.090
经验和逻辑思维

13:39.090 --> 13:41.090
我首先会想到一个中心点是一定要确定下来的

13:41.090 --> 13:43.090
那么我既然要描述的形状

13:43.090 --> 13:45.090
我就必须要知道

13:45.090 --> 13:47.090
每一个坐标它相对于中心点

13:47.090 --> 13:49.090
如果把中心点

13:49.090 --> 13:51.090
把它认为是零和零

13:51.090 --> 13:53.090
那么其他的坐标

13:53.090 --> 13:55.090
应该是相对于中心点

13:55.090 --> 13:57.090
来产生的

13:57.090 --> 13:59.090
能理解这个意思吧

13:59.090 --> 14:01.090
其他的坐标应该要相对于中心点来产生

14:01.090 --> 14:03.090
因此呢我们只要

14:03.090 --> 14:05.090
把中心点确定为零零

14:05.090 --> 14:07.090
这个形状就可以通过一系列坐标

14:07.090 --> 14:09.090
来进行描述

14:09.090 --> 14:11.090
注意这个坐标啊指的是

14:11.090 --> 14:13.090
形状这一块的相对坐标

14:13.090 --> 14:15.090
而指的不是说

14:15.090 --> 14:17.090
这个方块在整个面板里面哪个位置

14:17.090 --> 14:19.090
不是的,随便它的哪个位置

14:19.090 --> 14:21.090
它们的相对坐标都是一致的

14:21.090 --> 14:23.090
明白这个意思吗

14:23.090 --> 14:25.090
OK啊,我们把这个先理清楚

14:25.090 --> 14:27.090
那么这个我们就知道了

14:27.090 --> 14:29.090
可以使用这么一个数组

14:29.090 --> 14:31.090
来描述它的形状

14:31.090 --> 14:33.090
这么一个数组

14:33.090 --> 14:36.530
来描述它的形状

14:36.530 --> 14:38.530
每个小数组是x y

14:38.530 --> 14:40.530
好,那么比方说这个形状

14:40.530 --> 14:42.530
我们再来看一下啊

14:42.530 --> 14:44.530
这个形状你首先确定中心点在哪

14:44.530 --> 14:46.530
中心点在哪呢,我可以认为在这

14:46.530 --> 14:48.530
我可以认为在这

14:48.530 --> 14:50.530
好,那么这个地方是中心点的话

14:50.530 --> 14:52.530
是中心点的话

14:52.530 --> 14:54.530
那么这里呢,我们就可以设置

14:54.530 --> 14:56.530
它的相对位置呢

14:56.530 --> 14:58.530
应该是这么一个数组

14:58.530 --> 15:00.530
第一个坐标是-20

15:00.530 --> 15:02.530
-20

15:02.530 --> 15:04.530
然后呢,第二个坐标是-10

15:04.530 --> 15:06.530
然后第三个坐标呢

15:06.530 --> 15:08.530
是-0

15:08.530 --> 15:10.530
里面就是中心点

15:10.530 --> 15:12.530
中心点始终是-0

15:12.530 --> 15:14.530
然后第四个坐标是多少呢

15:14.530 --> 15:16.530
是-0-1

15:16.530 --> 15:18.530
对不对

15:18.530 --> 15:20.530
我们通过这样的描述呢

15:20.530 --> 15:22.530
就可以把形状描述出来

15:22.530 --> 15:24.530
好,于是呢,现在多了一个内形了

15:24.530 --> 15:26.530
这个内形表示的是形状

15:26.530 --> 15:28.530
表示的是形状

15:28.530 --> 15:30.530
好,那么这里呢

15:30.530 --> 15:32.530
我们就可以在这里边写

15:32.530 --> 15:34.530
这么一个内形

15:34.530 --> 15:36.530
再导出一个内形

15:36.530 --> 15:38.530
一个内形

15:38.530 --> 15:40.530
给它取个名字吧

15:40.530 --> 15:42.530
取个名字叫-shape

15:42.530 --> 15:44.530
形状

15:44.530 --> 15:46.530
形状它写实是什么内形呢

15:46.530 --> 15:48.530
我其实这里也可以不用揭可

15:48.530 --> 15:50.530
用什么呢,用type

15:50.530 --> 15:52.530
用那个内形点名

15:52.530 --> 15:54.530
形状是什么呢,形状其实就是一个数组

15:54.530 --> 15:56.530
揭可反而不太好做

15:56.530 --> 15:58.530
用内形点名还好一点

15:58.530 --> 16:00.530
形状就是一个数组

16:00.530 --> 16:02.530
一个什么的数组

16:02.530 --> 16:04.530
一个坐标的数组

16:04.530 --> 16:06.530
它里边有一个特殊坐标

16:06.530 --> 16:08.530
那就是0和0

16:08.530 --> 16:10.530
形状

16:12.530 --> 16:14.530
就是方块的组合是一个什么形状

16:14.530 --> 16:16.530
OK

16:16.530 --> 16:18.530
我只要知道了形状

16:18.530 --> 16:20.530
我只要知道了形状

16:20.530 --> 16:22.530
同时

16:22.530 --> 16:24.530
我知道了

16:24.530 --> 16:26.530
中心点的真实坐标

16:26.530 --> 16:28.530
那么你想一想

16:28.530 --> 16:30.530
我知道了形状和

16:30.530 --> 16:32.530
中心点的真实坐标

16:32.530 --> 16:34.530
每一个小方块

16:34.530 --> 16:36.530
我是不是就可以创建了

16:36.530 --> 16:38.530
再加上一个颜色

16:38.530 --> 16:40.530
再加上一个颜色

16:40.530 --> 16:42.530
也就是说这里我需要知道了哪些信息呢

16:42.530 --> 16:44.530
我需要知道的是

16:44.530 --> 16:47.970
第一个

16:47.970 --> 16:49.970
如果

16:49.970 --> 16:51.970
知道了

16:51.970 --> 16:53.970
这些东西

16:53.970 --> 16:55.970
一个是形状

16:55.970 --> 16:57.970
第二个

16:57.970 --> 16:59.970
中心点坐标

16:59.970 --> 17:01.970
中心点坐标不是0吗

17:01.970 --> 17:03.970
表述形状的时候

17:03.970 --> 17:05.970
我这里说的中心点坐标

17:05.970 --> 17:07.970
指的是这个中心点在

17:07.970 --> 17:09.970
边板里边的坐标

17:09.970 --> 17:11.970
这个中心点在边板里边的坐标

17:11.970 --> 17:13.970
比方说这个中心点

17:13.970 --> 17:15.970
它的坐标应该是多少呢

17:15.970 --> 17:17.970
应该是我们画一画

17:17.970 --> 17:19.970
一 二 三 四 五 六

17:19.970 --> 17:21.970
那么

17:21.970 --> 17:23.970
就是第六

17:23.970 --> 17:25.970
多少航呢

17:25.970 --> 17:27.970
大概是第七航

17:27.970 --> 17:29.970
那么我指的是这个坐标

17:29.970 --> 17:31.970
中心点坐标确定下来了

17:31.970 --> 17:33.970
形状又知道了

17:33.970 --> 17:35.970
那么每一个小方块它的坐标是不是确定下来了

17:35.970 --> 17:37.970
根据相对位置就确定下来了

17:37.970 --> 17:39.970
确定下来了之后呢

17:39.970 --> 17:41.970
然后我们就可以

17:41.970 --> 17:43.970
根据中心点坐标

17:43.970 --> 17:45.970
根据形状还根据一个颜色

17:45.970 --> 17:47.970
颜色

17:47.970 --> 17:49.970
颜色

17:49.970 --> 17:51.970
来产生

17:51.970 --> 17:53.970
如果它知道这些东西的话

17:53.970 --> 17:55.970
就可以

17:55.970 --> 17:57.970
颜色至小方块的速度了

17:57.970 --> 17:59.970
颜色至小方块的速度了

17:59.970 --> 18:01.970
想象是不是这个逻辑呢

18:01.970 --> 18:03.970
是不是这个逻辑

18:03.970 --> 18:05.970
因此呢

18:05.970 --> 18:07.970
你要创建一个square group的时候

18:07.970 --> 18:09.970
我们写个各道寒朔

18:09.970 --> 18:11.970
刷个腿

18:11.970 --> 18:13.970
你要创建这个

18:13.970 --> 18:15.970
一个小方块的组合的时候

18:15.970 --> 18:17.970
你需要告诉我们什么呢

18:17.970 --> 18:19.970
需要告诉我们的是形状

18:19.970 --> 18:21.970
我们可以用一个

18:21.970 --> 18:23.970
就是个参数

18:23.970 --> 18:28.430
要需要告诉我形状

18:28.430 --> 18:30.430
然后呢还需要告诉我

18:30.430 --> 18:32.430
还需要告诉我的事

18:32.430 --> 18:34.430
还需要告诉我的事

18:34.430 --> 18:36.430
除了形状之外

18:36.430 --> 18:38.430
还需要告诉我

18:38.430 --> 18:40.430
中心点坐标

18:40.430 --> 18:42.430
中心点坐标

18:42.430 --> 18:44.430
我们把它取名为center point

18:44.430 --> 18:46.430
center point

18:46.430 --> 18:48.430
内情是point

18:48.430 --> 18:50.430
中心点坐标需要告诉我

18:50.430 --> 18:52.430
还需要告诉我什么呢

18:52.430 --> 18:54.430
还需要告诉我颜色

18:54.430 --> 18:56.430
这不错

18:56.430 --> 18:58.430
这些东西告诉我过后

18:58.430 --> 19:00.430
我是不是就可以设置这个数组了

19:00.430 --> 19:02.430
我在各道寒朔里边就可以设置这个数组了

19:02.430 --> 19:04.430
经过甭管怎么算吧

19:04.430 --> 19:06.430
我经过一系列的操作

19:06.430 --> 19:08.430
就可以设置这个数组了

19:08.430 --> 19:10.430
先把这个问题想通

19:10.430 --> 19:12.430
我只要告诉我形状

19:12.430 --> 19:14.430
中心点坐标以及颜色就可以设置数组

19:14.430 --> 19:16.430
现在呢我们再一个一个看这个参数

19:16.430 --> 19:18.430
第一个是形状

19:18.430 --> 19:20.430
形状

19:20.430 --> 19:22.430
那么这个东西呢

19:22.430 --> 19:24.430
既然是个方块的组合

19:24.430 --> 19:26.430
那么方块组合一定要有形状

19:26.430 --> 19:28.430
这么一个属性对吧

19:28.430 --> 19:30.430
所以说我觉得这个东西呢

19:30.430 --> 19:32.430
应该是一个属性

19:32.430 --> 19:34.430
应该可以把它设置成一个属性

19:34.430 --> 19:36.430
于是呢

19:36.430 --> 19:38.430
我在笔记里边再加一个

19:38.430 --> 19:40.430
除了这个小方块数组之外

19:40.430 --> 19:42.430
还有一个形状的数组

19:42.430 --> 19:44.430
形状

19:44.430 --> 19:46.430
这么一个就是属性

19:46.430 --> 19:48.430
我这里呢

19:48.430 --> 19:50.430
就直接

19:50.430 --> 19:52.430
就是在构造函数参数这里

19:52.430 --> 19:54.430
把它做成一个属性

19:54.430 --> 19:56.430
那么这样它就直接完成复制了

19:56.430 --> 19:58.430
然后中心点坐标呢

19:58.430 --> 20:00.430
中心点坐标是不是也可以把它做成一个属性

20:00.430 --> 20:02.430
因为中心点坐标是不是要变化的

20:02.430 --> 20:04.430
你看一会可以移动对吧

20:04.430 --> 20:06.430
可以移动这个中心点坐标

20:06.430 --> 20:08.430
因此中心点坐标呢也是可以变化的

20:08.430 --> 20:10.430
所以说中心点坐标呢

20:10.430 --> 20:12.430
也怕做成一个属性

20:12.430 --> 20:14.430
颜色呢其实这里呢

20:14.430 --> 20:16.430
也可以把它做成属性

20:16.430 --> 20:18.430
这里有三个属性

20:18.430 --> 20:20.430
那么当我雕用这个构造函数之后

20:20.430 --> 20:22.430
雕用它之后

20:22.430 --> 20:24.430
那么这三个属性是不是全部有值了

20:24.430 --> 20:26.430
全部有值了

20:26.430 --> 20:28.430
加上下滑线

20:28.430 --> 20:30.430
全部有值了

20:30.430 --> 20:32.430
好接下来呢我们要做的一件事情就是

20:32.430 --> 20:34.430
在这里

20:34.430 --> 20:36.430
设置小方块的数组

20:36.430 --> 20:38.430
好这个时候呢

20:38.430 --> 20:40.430
大家好好去思考一下

20:40.430 --> 20:42.430
如何根据这些信息

20:42.430 --> 20:44.430
你看它这是别人传给我的

20:44.430 --> 20:46.430
传给我的信息

20:46.430 --> 20:48.430
如何根据这些信息

20:48.430 --> 20:50.430
来设置小方块的数组

20:50.430 --> 20:52.430
怎么设置呢

20:52.430 --> 20:54.430
首先这个数组的长度有多少

20:54.430 --> 20:56.430
长度有多少

20:56.430 --> 20:58.430
很简单嘛

20:58.430 --> 21:00.430
这个数组的长度

21:00.430 --> 21:02.430
跟这个形状的这个数组的长度是不是一致的

21:02.430 --> 21:04.430
你形状里面有四个方块

21:04.430 --> 21:06.430
那么我这里肯定要产生四个小方块

21:06.430 --> 21:08.430
对不对

21:08.430 --> 21:10.430
那么形状里面有四个坐标

21:10.430 --> 21:12.430
它就有四个坐标

21:12.430 --> 21:14.430
形状这里面有两个坐标

21:14.430 --> 21:16.430
那也就是说

21:16.430 --> 21:18.430
我这个形状里面

21:18.430 --> 21:20.430
每一个坐标

21:20.430 --> 21:22.430
其实我就可以对应的产生一个小方块

21:22.430 --> 21:24.430
就可以对应的产生一个小方块

21:24.430 --> 21:26.430
好因此呢

21:26.430 --> 21:28.430
我这里可以这样子来做

21:28.430 --> 21:30.430
循环

21:30.430 --> 21:32.430
循环这个share

21:32.430 --> 21:34.430
这是一个形状吧

21:34.430 --> 21:36.430
它实际上是一个数组

21:36.430 --> 21:38.430
一个坐标的数组

21:38.430 --> 21:40.430
然后循环它

21:40.430 --> 21:42.430
每一个循环可以得到一个坐标

21:42.430 --> 21:44.430
看一下

21:44.430 --> 21:46.430
在描述形状的时候

21:46.430 --> 21:48.430
每一个相对位置的坐标

21:48.430 --> 21:50.430
那么我就可以根据这个

21:50.430 --> 21:52.430
相对位置坐标

21:52.430 --> 21:54.430
来创建一个square

21:54.430 --> 21:56.430
创建一个小方块

21:56.430 --> 21:58.430
明白这个意思吗

21:58.430 --> 22:00.430
我在这里可以创建这么一个小方块

22:00.430 --> 22:02.430
好我们来试一下

22:02.430 --> 22:04.430
每一个坐标知道了

22:04.430 --> 22:06.430
中心点的坐标也知道了

22:06.430 --> 22:08.430
这是形状

22:08.430 --> 22:10.430
好好了理一下

22:10.430 --> 22:12.430
比方说是相对位置

22:12.430 --> 22:14.430
然后中心点坐标

22:14.430 --> 22:16.430
我们知道了

22:16.430 --> 22:18.430
比方说中心点是5和5

22:18.430 --> 22:20.430
比方说中心点是5和5

22:20.430 --> 22:22.430
中心点的坐标是5和5

22:22.430 --> 22:24.430
那么其他的坐标是不是全部确定下来的

22:24.430 --> 22:26.430
因此我们这个至少是可以算的

22:26.430 --> 22:28.430
这里我们就可以

22:28.430 --> 22:30.430
创建一个square

22:32.430 --> 22:34.430
创建一个6一个square

22:34.430 --> 22:36.430
创建了square之后

22:36.430 --> 22:38.430
有哪些东西要设置呢

22:38.430 --> 22:40.430
这是square

22:40.430 --> 22:42.430
它的colour

22:42.430 --> 22:44.430
颜色等于this

22:44.430 --> 22:46.430
colour

22:46.430 --> 22:48.430
把颜色复制过去

22:48.430 --> 22:50.430
然后呢还要设置啥呢

22:50.430 --> 22:52.430
怎么显示先不管

22:52.430 --> 22:54.430
它的坐标呢

22:54.430 --> 22:56.430
坐标是啥

22:56.430 --> 22:58.430
好我们来算一下坐标

22:58.430 --> 23:00.430
比方说中心

23:00.430 --> 23:02.430
如果这个坐标是中心点

23:02.430 --> 23:04.430
如果这个坐标是0和0

23:04.430 --> 23:06.430
就是中心点的坐标

23:06.430 --> 23:08.430
大家能理解这个意思吗

23:08.430 --> 23:10.430
一定要好好理解一下

23:10.430 --> 23:12.430
上边是描述形状的相对坐标

23:12.430 --> 23:14.430
下边是在面板里边的坐标

23:14.430 --> 23:16.430
也把好好理解一下

23:16.430 --> 23:18.430
那么这个形状

23:18.430 --> 23:20.430
中心点的坐标是0和0

23:20.430 --> 23:22.430
那么中心点在面板里边的坐标

23:22.430 --> 23:24.430
是5和5

23:24.430 --> 23:26.430
那么中心点的

23:26.430 --> 23:28.430
这个小方块

23:28.430 --> 23:30.430
它的坐标是不是就是5和5

23:30.430 --> 23:32.430
那如果是这个坐标呢

23:32.430 --> 23:34.430
这个坐标呢

23:34.430 --> 23:36.430
形状的这个位置

23:36.430 --> 23:38.430
那么它的小方块坐标是多少呢

23:38.430 --> 23:40.430
中心点是5和5

23:40.430 --> 23:42.430
那么是不是0加上中心点的坐标

23:42.430 --> 23:44.430
然后-1加上中心点的y坐标

23:44.430 --> 23:46.430
是不是完事了

23:46.430 --> 23:48.430
好好去理一下这一块

23:48.430 --> 23:50.430
好好去思考一下

23:50.430 --> 23:52.430
首先要思考这个是什么意思

23:52.430 --> 23:54.430
这个表示的是相对位置

23:54.430 --> 23:56.430
指的是相对位置

23:56.430 --> 23:58.430
就是如果中心点是0和0

23:58.430 --> 24:00.430
如果中心点是0和0

24:00.430 --> 24:02.430
这个坐标

24:02.430 --> 24:04.430
那其他的方块在哪个位置

24:04.430 --> 24:06.430
描述的是这个东西

24:06.430 --> 24:08.430
那么现在的中心点是5和5

24:08.430 --> 24:10.430
那么其他的方块是不是

24:10.430 --> 24:12.430
一次把重坐标相加就完事了

24:12.430 --> 24:14.430
我们把这个一定要理清楚

24:14.430 --> 24:16.430
这个很重要的

24:16.430 --> 24:18.430
这里面呢

24:18.430 --> 24:20.430
每个小方块的坐标我们就知道该怎么算了

24:20.430 --> 24:22.430
x应该是多少呢

24:22.430 --> 24:24.430
x应该是

24:24.430 --> 24:26.430
中心点坐标加上

24:26.430 --> 24:28.430
它这个相对坐标

24:28.430 --> 24:30.430
x

24:30.430 --> 24:32.430
y坐标呢

24:32.430 --> 24:34.430
应该是中心点坐标

24:34.430 --> 24:36.430
这里写出了

24:36.430 --> 24:38.430
中心点的y坐标

24:38.430 --> 24:40.430
加上p-y

24:40.430 --> 24:42.430
就可以把这个设置出来了

24:42.430 --> 24:44.430
好咱们来试一下了

24:44.430 --> 24:46.430
咱们来试一下

24:46.430 --> 24:48.430
我这里还需要把它加到数组里面去

24:48.430 --> 24:50.430
我这里可以先设置一个数组

24:50.430 --> 24:52.430
AR

24:52.430 --> 24:54.430
它的内容是square

24:54.430 --> 24:58.900
一个数组

24:58.900 --> 25:00.900
先设置一个数组

25:00.900 --> 25:02.900
然后每一次

25:02.900 --> 25:04.900
创建了一个小方块之后

25:04.900 --> 25:06.900
把它加到这个数组里面去

25:06.900 --> 25:08.900
push

25:08.900 --> 25:10.900
pushsq

25:10.900 --> 25:12.900
把这个小方块加到这个数组里面去

25:12.900 --> 25:13.900
最后呢

25:13.900 --> 25:14.900
这个循环结束过后

25:14.900 --> 25:16.900
这个数组里面是不是东西就出来了

25:16.900 --> 25:18.900
东西就出来了

25:18.900 --> 25:20.900
出来之后呢我们就可以把这个数组

25:20.900 --> 25:22.900
这个AR

25:22.900 --> 25:24.900
复这个square

25:24.900 --> 25:26.900
这里我们就可以

25:26.900 --> 25:28.900
zsquares

25:28.900 --> 25:30.900
复之为什么AR

25:30.900 --> 25:32.900
有些朋友说为什么

25:32.900 --> 25:34.900
我不直接在这里进行push

25:34.900 --> 25:36.900
不在这里进行往数组里面加呢

25:36.900 --> 25:38.900
是因为

25:38.900 --> 25:40.900
是因为这个是个

25:40.900 --> 25:42.900
只读的数组是加不了的

25:42.900 --> 25:44.900
是不能调用改变数组的函数的

25:44.900 --> 25:46.900
我们只能这样子行

25:46.900 --> 25:48.900
没问题的是一样的道理

25:48.900 --> 25:50.900
通过这个够多函数

25:50.900 --> 25:52.900
我们就把这个数组搞定了

25:52.900 --> 25:54.900
就搞定了这个数组

25:54.900 --> 25:56.900
好那么咱们来测试一下

25:56.900 --> 25:58.900
咱们在页面上来测试一下

25:58.900 --> 26:00.900
这里呢由于这些小方块

26:00.900 --> 26:02.900
都没有去设置什么

26:02.900 --> 26:04.900
都没有设置显示者

26:04.900 --> 26:06.900
我这个地方呢我写一个访问器吧

26:06.900 --> 26:08.900
我写个访问器

26:08.900 --> 26:10.900
这个访问器呢把这些小方块

26:10.900 --> 26:12.900
提供给外面访问

26:12.900 --> 26:14.900
squares

26:14.900 --> 26:16.900
当然你不能设置它你是不能设置它的

26:16.900 --> 26:18.900
我只提供你访问

26:18.900 --> 26:20.900
squares

26:20.900 --> 26:22.900
每一个呢是一个

26:22.900 --> 26:24.900
小方块的数组

26:24.900 --> 26:26.900
我自己推断吧

26:26.900 --> 26:28.900
squares

26:28.900 --> 26:30.900
好写个访问器

26:30.900 --> 26:32.900
把这个暴露在外边

26:32.900 --> 26:34.900
好咱们来测试一下

26:34.900 --> 26:36.900
到index里边去

26:36.900 --> 26:38.900
然后呢这边我可以这样子写

26:38.900 --> 26:40.900
这样子写

26:40.900 --> 26:42.900
我这里呢新建一个

26:42.900 --> 26:44.900
new一个square group

26:44.900 --> 26:46.900
新建一个

26:46.900 --> 26:48.900
组合小方块的组合

26:48.900 --> 26:50.900
它让我传递一个形状

26:50.900 --> 26:52.900
好让我传递一个形状

26:52.900 --> 26:54.900
它是一个作标的数组对吧

26:54.900 --> 26:56.900
那么给它一个数组

26:56.900 --> 26:58.900
以后再来写

26:58.900 --> 27:00.900
写完成

27:00.900 --> 27:02.900
然后中心点作标

27:02.900 --> 27:04.900
中心点作标的话给它一个x

27:04.900 --> 27:06.900
中心点作标就3

27:06.900 --> 27:08.900
y的话就2

27:08.900 --> 27:10.900
就随便写一个

27:10.900 --> 27:12.900
然后呢颜色

27:12.900 --> 27:14.900
颜色的话就是红色吧

27:14.900 --> 27:18.660
好创建这么一个东西

27:18.660 --> 27:20.660
group

27:20.660 --> 27:22.660
然后这个数组里边

27:22.660 --> 27:24.660
这个形状呢我就用这个描述吧

27:24.660 --> 27:26.660
就用这个描述

27:26.660 --> 27:28.660
我们来看一下

27:28.660 --> 27:30.660
这里只不过不是这样子写的

27:30.660 --> 27:32.660
x和y,x0-1

27:32.660 --> 27:34.660
x0-1

27:34.660 --> 27:36.660
x0-1

27:36.660 --> 27:38.660
这边

27:38.660 --> 27:40.660
这边是什么呢

27:40.660 --> 27:42.660
x

27:42.660 --> 27:44.660
多少

27:44.660 --> 27:46.660
-1,y0

27:46.660 --> 27:48.660
这边

27:48.660 --> 27:50.660
x0

27:50.660 --> 27:52.660
y0

27:52.660 --> 27:54.660
这边

27:54.660 --> 27:56.660
这边是啥呢

27:56.660 --> 27:58.660
这边是0-1

27:58.660 --> 28:00.660
x0-1

28:00.660 --> 28:02.660
好

28:02.660 --> 28:04.660
这是它的形状

28:04.660 --> 28:06.660
一个作标的数组

28:06.660 --> 28:08.660
这是它的中心点作标

28:08.660 --> 28:10.660
形状的意思表示

28:10.660 --> 28:12.660
假设中心点的作标在零和零

28:12.660 --> 28:14.660
假设中心点的作标在零和零

28:14.660 --> 28:16.660
那么其他的相对作标是什么

28:16.660 --> 28:18.660
好,颜色红色

28:18.660 --> 28:20.660
然后这里面

28:20.660 --> 28:22.660
我给它每一个

28:22.660 --> 28:24.660
它里面不是有很多小方块吗

28:24.660 --> 28:26.660
我给它每一个小方块

28:26.660 --> 28:28.660
给它设置一下这个东西

28:28.660 --> 28:30.660
设置一下显示者

28:30.660 --> 28:32.660
设置一下显示者

28:32.660 --> 28:34.660
我们看一下能不能显示出来

28:34.660 --> 28:36.660
咱们来看一下能不能显示出来

28:36.660 --> 28:38.660
保存一下

28:40.660 --> 28:42.660
刷新一下

28:42.660 --> 28:44.660
你看是不是显示出来了

28:44.660 --> 28:46.660
我只要给它一个形状

28:46.660 --> 28:48.660
给它一个中心点作标

28:48.660 --> 28:50.660
那么它就显示出来了

28:50.660 --> 28:52.660
那么之后要移动的话

28:52.660 --> 28:54.660
我改的是什么

28:54.660 --> 28:56.660
改的是什么,改的是不是形状

28:56.660 --> 28:58.660
想一想

28:58.660 --> 29:00.660
我一会要移动这个俄罗斯方块

29:00.660 --> 29:02.660
要移动这个东西

29:02.660 --> 29:04.660
那么改的是什么,改的是不是形状

29:04.660 --> 29:06.660
不是形状,形状它也不会变

29:06.660 --> 29:08.660
它不会变化形状的

29:08.660 --> 29:10.660
那么改的是什么呢

29:10.660 --> 29:12.660
改的是中心点作标

29:12.660 --> 29:14.660
改的是中心点作标

29:14.660 --> 29:16.660
中心点作标把它改成四和五

29:16.660 --> 29:18.660
这里,刷新一次

29:18.660 --> 29:20.660
你看,是不是变了

29:20.660 --> 29:22.660
所以到时候改的是中心点作标

29:22.660 --> 29:24.660
在程序运行的过程中呢

29:24.660 --> 29:26.660
我们会更改它的中心点作标

29:26.660 --> 29:28.660
好,那么现在呢

29:28.660 --> 29:30.660
比方说我要实现这个功能

29:30.660 --> 29:32.660
向下移动

29:32.660 --> 29:34.660
移动谁,移动的是中心点

29:34.660 --> 29:36.660
因为中心点一变,其他地方就会跟这边

29:36.660 --> 29:38.660
所以说呢,我现在希望呢

29:38.660 --> 29:40.660
在这里

29:40.660 --> 29:42.660
当我向下移动的时候

29:42.660 --> 29:44.660
当我向下移动的时候

29:44.660 --> 29:46.660
那么我要更改什么呢

29:46.660 --> 29:48.660
在这里

29:48.660 --> 29:50.660
更改

29:50.660 --> 29:52.660
中心点作标

29:52.660 --> 29:54.660
因为其他作标都是

29:54.660 --> 29:56.660
根据中心点算出来的

29:56.660 --> 29:58.660
好,中心点作标怎么改呢

29:58.660 --> 30:00.660
怎么改呢

30:00.660 --> 30:02.660
我们在这个代码里边

30:02.660 --> 30:04.660
我们中心点作标

30:04.660 --> 30:06.660
实际上是一个什么,是一个

30:06.660 --> 30:08.660
属性对吧,这个属性是私有的

30:08.660 --> 30:10.660
所有的属性都是私有的

30:10.660 --> 30:12.660
那么这个属性呢

30:12.660 --> 30:14.660
我可以允许它进行修改

30:14.660 --> 30:16.660
我先设置两个防蚊器

30:16.660 --> 30:18.660
get

30:18.660 --> 30:20.660
center

30:20.660 --> 30:22.660
这样子

30:22.660 --> 30:24.660
get

30:24.660 --> 30:26.660
center point

30:26.660 --> 30:28.660
内容是point

30:28.660 --> 30:30.660
反回的是啥呢,反回的是

30:30.660 --> 30:32.660
this center point

30:32.660 --> 30:34.660
设置一个get的防蚊器

30:34.660 --> 30:36.660
再设置一个set的防蚊器

30:36.660 --> 30:38.660
set

30:38.660 --> 30:40.660
center point

30:40.660 --> 30:42.660
这里呢

30:42.660 --> 30:44.660
内容是point

30:44.660 --> 30:46.660
这里写上

30:46.660 --> 30:48.660
this center point

30:48.660 --> 30:50.660
好,那么这样子

30:50.660 --> 30:52.660
我就可以复制了

30:52.660 --> 30:54.660
就可以给中心点位置复制了

30:54.660 --> 30:56.660
当然了,这个作标里边

30:56.660 --> 30:58.660
它的

30:58.660 --> 31:00.660
它的两个属性都是

31:00.660 --> 31:02.660
只读的,你只能重新给它复制这个作标

31:02.660 --> 31:04.660
好,来一遍,跟之前一样

31:04.660 --> 31:06.660
更改中心点作标,很简单

31:06.660 --> 31:08.660
第二,它不是

31:08.660 --> 31:10.660
sql,怎么写成这个

31:10.660 --> 31:12.660
上面这个

31:12.660 --> 31:14.660
就是这个group

31:14.660 --> 31:16.660
group,它不是一个center point吗

31:16.660 --> 31:18.660
重新给它复制

31:18.660 --> 31:20.660
复制为啥呢

31:20.660 --> 31:22.660
x不变

31:22.660 --> 31:24.660
group,center point的x

31:24.660 --> 31:26.660
y作标呢

31:26.660 --> 31:28.660
复制为center point

31:28.660 --> 31:30.660
y作标加1

31:30.660 --> 31:32.660
就完事了,对吧

31:32.660 --> 31:34.660
我给它重新复制center point

31:34.660 --> 31:36.660
好,保存一下

31:36.660 --> 31:38.660
好,我们点击向下一动

31:38.660 --> 31:40.660
都没有,为啥没动

31:40.660 --> 31:42.660
这里为啥没动

31:42.660 --> 31:44.660
没动的原因

31:44.660 --> 31:46.660
不是说它作标没有变化

31:46.660 --> 31:48.660
我们来打印一下吧

31:48.660 --> 31:50.660
打印一下this group

31:50.660 --> 31:52.660
不是

31:52.660 --> 31:54.660
打印一下group的center point

31:54.660 --> 31:56.660
打印一下

31:56.660 --> 31:58.660
保存

31:58.660 --> 32:00.660
为什么现在没有自动刷新呢

32:00.660 --> 32:02.660
我把它不扣

32:02.660 --> 32:04.660
应该是之前加了一些代码的时候

32:04.660 --> 32:06.660
它之前有爆错

32:06.660 --> 32:08.660
导致了

32:08.660 --> 32:10.660
后续没有那个

32:10.660 --> 32:12.660
开发服务器出问题了

32:12.660 --> 32:17.760
重新运行一下

32:17.760 --> 32:19.760
稍等一下

32:19.760 --> 32:23.390
这里,再来

32:23.390 --> 32:25.390
把控制台打开

32:25.390 --> 32:27.390
打开这个控制台

32:27.390 --> 32:29.390
然后这里我们点向下一动

32:29.390 --> 32:31.390
点击3

32:31.390 --> 32:33.390
4,5,6,看到没

32:33.390 --> 32:35.390
数据是不是正确的

32:35.390 --> 32:37.390
那为什么没刷新呢

32:37.390 --> 32:39.390
为什么没刷新

32:39.390 --> 32:41.390
那我们想一想

32:41.390 --> 32:43.390
想一想这个道理啊

32:43.390 --> 32:45.390
我改它中心点作标的时候

32:45.390 --> 32:47.390
它每一个小方块的

32:47.390 --> 32:49.390
作标有没有发生改变

32:49.390 --> 32:51.390
我用这种代码的格式

32:51.390 --> 32:53.390
我这里只改了它这个属性值

32:53.390 --> 32:55.390
只改了中心点

32:55.390 --> 32:57.390
作标的属性值

32:57.390 --> 32:59.390
改这个中心点的时候

32:59.390 --> 33:01.390
这些属性有没有发生变化

33:01.390 --> 33:03.390
就是这些square

33:03.390 --> 33:05.390
里面的作标有没有发生变化

33:05.390 --> 33:07.390
实际上是没有的

33:07.390 --> 33:09.390
没有发生任何变化

33:09.390 --> 33:11.390
我只改了它中心点的属性

33:11.390 --> 33:13.390
打印一下

33:13.390 --> 33:15.390
我再打印一下这个小方块

33:15.390 --> 33:17.390
这个group里面

33:17.390 --> 33:19.390
squares

33:19.390 --> 33:21.390
我们来看一下

33:21.390 --> 33:23.390
我们点向下

33:23.390 --> 33:25.390
向下移动一个

33:25.390 --> 33:27.390
再向下移动一个

33:27.390 --> 33:29.390
我们来对比一下吧

33:29.390 --> 33:31.390
第一次

33:31.390 --> 33:33.390
我们得到中心点作标是33

33:33.390 --> 33:34.390
没问题

33:34.390 --> 33:36.390
然后下面每一个作标呢

33:36.390 --> 33:37.390
我们来看一下

33:37.390 --> 33:39.390
每一个作标

33:39.390 --> 33:40.390
31

33:40.390 --> 33:41.390
第一个作标是31

33:41.390 --> 33:42.390
我们就看第一个就行了吧

33:42.390 --> 33:44.390
然后第二个再点向下呢

33:44.390 --> 33:47.390
它的中心点的y作标增加1了

33:47.390 --> 33:49.390
然后这些小方块的作标

33:49.390 --> 33:50.390
你看一下

33:50.390 --> 33:51.390
所以还是31

33:51.390 --> 33:53.390
它没有随着中心点而变化

33:53.390 --> 33:55.390
因为你没有写任何代码来控制

33:55.390 --> 33:57.390
你只改变了这个属性值而已

33:57.390 --> 33:59.390
所以说到这一块呢

33:59.390 --> 34:03.390
当我们去设置中心点的作标的时候

34:03.390 --> 34:06.390
那么它会导致其它的作标

34:06.390 --> 34:08.390
也会发生变化

34:08.390 --> 34:10.390
就这些小方块的作标也会发生变化

34:10.390 --> 34:11.390
因此我们

34:11.390 --> 34:13.390
你看这个访问器的好处就出来了

34:13.390 --> 34:15.390
我们设置某一个属性的时候

34:15.390 --> 34:17.390
我会去做一些额外的操作

34:17.390 --> 34:19.390
当我去设置它的时候

34:19.390 --> 34:21.390
我要同时

34:21.390 --> 34:23.390
同时设置啥呢

34:23.390 --> 34:25.390
设置其他

34:25.390 --> 34:27.390
所有小方块

34:27.390 --> 34:29.390
都一项的作标

34:29.390 --> 34:32.390
这里怎么去设置小方块的作标呢

34:32.390 --> 34:34.390
之前是不是设置过的

34:34.390 --> 34:35.390
设置过的

34:35.390 --> 34:37.390
在构造函数里面是不是做过这件事情的

34:37.390 --> 34:38.390
对吧

34:38.390 --> 34:40.390
所以说这里要做的事情是很简单

34:40.390 --> 34:42.390
重新把这个事情再做一遍

34:42.390 --> 34:43.390
不会完了吗

34:43.390 --> 34:45.390
循环当前的形状

34:45.390 --> 34:47.390
形状里面每循环一次

34:47.390 --> 34:49.390
得到一个相对位置

34:49.390 --> 34:50.390
得到这么一个位置

34:50.390 --> 34:51.390
然后根据这个位置

34:51.390 --> 34:52.390
根据中心点的作标

34:52.390 --> 34:54.390
来重新设置作标就完事了

34:54.390 --> 34:56.390
只不过了现在不是要重新创建速度

34:56.390 --> 34:59.390
而现在是要设置这个速度里面

34:59.390 --> 35:01.390
某一项

35:01.390 --> 35:04.390
所以说这里能把这个锁印加上

35:04.390 --> 35:05.390
锁印加上

35:05.390 --> 35:07.390
那么这个速度里面锁印是哪一个

35:07.390 --> 35:09.390
我们在这里面就设置哪一个

35:09.390 --> 35:11.390
这些就不创建对象了

35:11.390 --> 35:12.390
颜色也不管了

35:12.390 --> 35:14.390
只是设置作标

35:14.390 --> 35:16.390
只是设置作标

35:16.390 --> 35:18.390
那么哪一个小方块的作标呢

35:18.390 --> 35:19.390
就是this

35:19.390 --> 35:22.390
squares

35:22.390 --> 35:25.390
设置当前这个小方块的作标

35:26.390 --> 35:28.390
跟之前是不一样的

35:28.390 --> 35:30.390
没有什么区别

35:30.390 --> 35:32.390
保存一下

35:32.390 --> 35:35.390
现在我们再来看向下移动

35:35.390 --> 35:37.390
你看是不是整体移动了

35:37.390 --> 35:39.390
只需要更改它的

35:39.390 --> 35:42.390
更改它的就是中心点作标就完事了

35:42.390 --> 35:44.390
你看咱们这个内就已经做的

35:44.390 --> 35:45.390
差不多了

35:45.390 --> 35:48.390
至少把这个功能做出来了

35:48.390 --> 35:50.390
那么我们再来测试一下

35:50.390 --> 35:53.390
测试一下它的向右移动

35:53.390 --> 35:56.390
向右移动

35:56.390 --> 35:58.390
向右移动

35:58.390 --> 36:00.390
然后再测试

36:00.390 --> 36:02.390
向左移动

36:02.390 --> 36:06.390
向左移动

36:06.390 --> 36:08.390
然后再测试一下向下移动

36:08.390 --> 36:10.390
向上移动

36:10.390 --> 36:14.390
一天up

36:14.390 --> 36:18.390
一天right

36:18.390 --> 36:20.390
一天left

36:20.390 --> 36:21.390
一天up

36:21.390 --> 36:22.390
向上移动

36:22.390 --> 36:26.220
好咱们来试一下

36:26.220 --> 36:27.220
试一下

36:27.220 --> 36:29.220
我们这里刚才做了向下移动

36:29.220 --> 36:31.220
然后再做两个

36:31.220 --> 36:33.220
再做两个

36:33.220 --> 36:37.220
一天up

36:37.220 --> 36:38.220
向上移动

36:38.220 --> 36:40.220
那么就是Y-1

36:40.220 --> 36:42.220
然后再来

36:42.220 --> 36:44.220
向左移动

36:44.220 --> 36:47.220
那么现在后面就很方便了对吧

36:47.220 --> 36:48.220
向左移动

36:48.220 --> 36:51.220
然后左移动的话就是X-1

36:51.220 --> 36:52.220
Y-1

36:52.220 --> 36:55.220
向右移动

36:55.220 --> 36:58.220
我们只需要改做它的中心点就行了

36:58.220 --> 36:59.220
向右移动

36:59.220 --> 37:04.220
然后来这边是X-1

37:04.220 --> 37:05.220
咱们来看一下

37:05.220 --> 37:06.220
向下

37:06.220 --> 37:07.220
向右

37:07.220 --> 37:08.220
向左

37:08.220 --> 37:09.220
向上

37:09.220 --> 37:11.220
你看是不是可以随着进行控制了

37:11.220 --> 37:12.220
对不对

37:12.220 --> 37:13.220
OK

37:13.220 --> 37:14.220
我们只需要去控制它的中心点

37:14.220 --> 37:15.220
坐标就行了

37:15.220 --> 37:16.220
这是这么一个类的写法

37:16.220 --> 37:23.340
我再把这个类的代码给大家看一遍

37:23.340 --> 37:25.340
差不多是这么一个类的代码

37:25.340 --> 37:27.340
当然这个类有没有开发完呢

37:27.340 --> 37:28.340
其实还有一些东西

37:28.340 --> 37:29.340
不着急

37:29.340 --> 37:30.340
不着急

37:30.340 --> 37:31.340
我们后边再说

37:31.340 --> 37:32.340
然后这里

37:32.340 --> 37:34.340
我再看一遍这个

37:34.340 --> 37:38.340
这个Types里面新加的这个形状

37:38.340 --> 37:39.340
再看一下这个index

37:39.340 --> 37:40.340
因为有些同学呢

37:40.340 --> 37:41.340
向来可能要跟他去写

37:41.340 --> 37:43.340
所以说给大家过一遍

37:43.340 --> 37:45.340
过一遍这个代码

37:45.340 --> 37:46.340
好

37:46.340 --> 37:47.340
这是这节课的内容

37:47.340 --> 37:50.340
我们开发出了这么一个方块的组合类

37:50.340 --> 37:51.340
它其实

37:51.340 --> 37:52.340
它做的事情很简单

37:53.340 --> 37:55.340
它很多事情都没有做

37:55.340 --> 37:57.340
什么旋转那些东西

37:57.340 --> 37:58.340
都还没有做

37:58.340 --> 37:59.340
不过没关系

37:59.340 --> 38:01.340
我们先做一个最简单的出来

38:01.340 --> 38:04.340
它只做一件事就是组合方块

38:04.340 --> 38:06.340
把方块进行组合

38:06.340 --> 38:09.340
然后我们就可以属意的控制这个组合了

38:09.340 --> 38:10.340
就可以控制这个组合了

38:10.340 --> 38:11.340
打到控制的目的

38:11.340 --> 38:13.340
我们先把这个类写

38:13.340 --> 38:15.340
这也是这个小节的知识

38:15.340 --> 38:16.340
下来呢

38:16.340 --> 38:17.340
大家把这个东西完成

38:17.340 --> 38:19.340
就咱们面向对象开发是那种

38:19.340 --> 38:20.340
见尽式的

38:20.340 --> 38:22.340
一点一点多出来的

38:22.340 --> 38:24.340
每一个内容只关心一部分的功能

38:24.340 --> 38:25.340
下来呢

38:25.340 --> 38:27.340
把这个内做出来

38:27.340 --> 38:29.340
然后理解这个那个逻辑

38:29.340 --> 38:30.340
好了

38:30.340 --> 38:31.340
那么这一块就到这里了

38:31.340 --> 38:32.340
拜拜

