WEBVTT

00:00.620 --> 00:06.000
好 这些课呢 我们来讲一讲如何来发布咱们的声明文件

00:07.020 --> 00:08.820
发布的这一块呢

00:09.580 --> 00:12.900
我简单说一下啊 就这里呢 它分为两种情况

00:13.420 --> 00:14.700
第一种情况是

00:15.720 --> 00:17.020
当前工程

00:17.520 --> 00:19.300
当前工程

00:20.080 --> 00:21.620
使用TS开发

00:22.120 --> 00:26.480
本身就是使用TS开发的 那么你要把这个工程发布出去

00:26.980 --> 00:30.580
这种情况下呢 你如何发布呢 就非常非常简单的啊

00:30.700 --> 00:33.440
没什么好说的 这里呢 我们就直接

00:34.720 --> 00:37.780
直接打包啊 打包

00:39.060 --> 00:40.100
我们直接打包

00:40.360 --> 00:43.420
打包完成过后呢 根据我们之前的配置啊

00:43.680 --> 00:47.260
他就会把这个声明文件给你生成好 你看就已经生成好了

00:48.020 --> 00:50.840
生成好了之后呢 你要做的事情就非常简单了

00:51.100 --> 00:52.380
也就是说你要做啥

00:52.640 --> 00:53.660
你就把这个文件讲

00:53.920 --> 00:55.440
发不出去 有暗事

00:55.700 --> 00:58.020
按照以前你们学的npm

00:58.280 --> 00:59.800
发布npm的包

01:00.000 --> 01:02.560
的支持呢 直接把它发布出去 有暗事了

01:02.820 --> 01:04.620
所以这种情况非常简单啊

01:04.880 --> 01:05.640
就是

01:06.920 --> 01:10.240
打包啊 编译完成后 编译完成后

01:11.780 --> 01:13.580
将编译结果

01:13.840 --> 01:15.880
所在文件夹

01:16.640 --> 01:17.420
直接

01:18.440 --> 01:19.460
发布到

01:20.240 --> 01:21.000
npm上

01:21.260 --> 01:21.760
即可

01:22.280 --> 01:23.560
这种方式非常非常简单

01:23.820 --> 01:26.380
跟以前用npm发布没有任何区别

01:27.400 --> 01:29.700
好 第二种情况 主要说第二种情况

01:30.260 --> 01:33.340
如果你是为别人开发的啊

01:33.840 --> 01:36.160
为其他第三方库

01:37.680 --> 01:38.460
开发的

01:39.480 --> 01:41.020
就是声明文件

01:43.580 --> 01:47.160
如果你是这种情况的话 就像我们之前这样子

01:47.420 --> 01:49.200
假设楼搭起那个库

01:49.460 --> 01:51.760
他没有声明文件 我们自己呢

01:52.020 --> 01:56.120
我嫌这没事 我就做点贡献吧 我把他呢

01:56.380 --> 01:57.920
给他写了一些声明文件

01:58.540 --> 02:02.220
我想把这些声明文件发布出去 让别人可以使用

02:02.480 --> 02:04.380
也就是说了 这种情况是做什么呢

02:04.640 --> 02:05.600
是发布到

02:06.720 --> 02:07.600
taps下面

02:07.860 --> 02:08.880
发布到这里边

02:10.280 --> 02:11.560
那么这种情况呢

02:11.800 --> 02:15.600
要稍微流程稍微麻烦一点啊 其实也没有多麻烦

02:16.200 --> 02:16.840
怎么做呢

02:17.080 --> 02:21.480
首先你要进到这么一个gizh hub的就是一个开源项目

02:21.720 --> 02:22.760
找到这个开源项目

02:23.000 --> 02:23.520
叫做

02:23.780 --> 02:26.080
这是微软官方的这么一个开源项目啊

02:26.340 --> 02:27.360
叫做definity

02:27.560 --> 02:29.360
definity

02:29.620 --> 02:30.640
definitly

02:30.900 --> 02:32.940
definitly tapped

02:33.200 --> 02:37.300
表示就是定义类型的这么一个开源项目

02:37.560 --> 02:41.140
找到这个开源项目之后呢 你首先点这个fork

02:41.400 --> 02:42.420
点这个fork

02:42.680 --> 02:43.440
我们把它记一下

02:43.700 --> 02:45.240
因为我这里不好演示呢

02:45.480 --> 02:46.200
这个

02:46.460 --> 02:49.840
一会要拷贝这个工程时间太久了啊

02:50.100 --> 02:52.400
这个外网的项目要拷贝几个小时

02:52.660 --> 02:53.680
所以说这个

02:53.940 --> 02:55.720
我就没法演示了 我就直接说吧

02:55.980 --> 02:56.500
第一步

02:57.560 --> 02:58.240
第一步

02:58.480 --> 02:59.360
第一步做它呢

02:59.600 --> 03:04.220
就是进入gizh hub的开源项目

03:05.760 --> 03:07.300
拿个开源项目就是这个开源项目

03:08.580 --> 03:09.600
把gizh含过来

03:10.120 --> 03:11.640
进到这个开源项目

03:11.900 --> 03:13.180
然后呢第二步

03:13.700 --> 03:14.200
fork

03:14.720 --> 03:15.740
到自己的

03:16.520 --> 03:17.540
开源口罩

03:18.820 --> 03:20.620
我们把它使用fork啊

03:20.860 --> 03:22.140
这是gizh的姿势啊

03:22.400 --> 03:23.680
你们肯定是学过gizh的

03:25.220 --> 03:26.500
通过gizh呢把它

03:26.840 --> 03:29.000
加到自己的开源口里边点fork

03:29.000 --> 03:30.400
加到自己的开源口里边

03:30.640 --> 03:32.200
那么这个加过去过后啊

03:32.440 --> 03:33.320
点了之后加过

03:33.320 --> 03:34.480
你看我现在就加过去了

03:34.480 --> 03:35.920
啊这个这个速度很快的

03:36.280 --> 03:37.560
加过去过后呢

03:37.680 --> 03:39.280
我们要把自己的这个工程呢

03:39.280 --> 03:40.280
拷贝到本地

03:40.920 --> 03:41.680
第三步

03:43.440 --> 03:45.400
从自己的

03:45.920 --> 03:47.360
开源口中

03:48.040 --> 03:50.000
克农到本地

03:50.240 --> 03:51.480
克农到本地就是gizh

03:51.480 --> 03:52.520
克农这个命令

03:52.600 --> 03:53.600
把这个开源库啊

03:53.600 --> 03:54.400
就把这个地址

03:54.520 --> 03:55.600
以自己的开源库

03:55.820 --> 03:56.660
克农到本地

03:57.140 --> 03:58.260
克农到本地过后呢

03:58.260 --> 03:59.740
然后在本地边写代码

04:00.420 --> 04:02.380
啊可以新建个分支吧

04:02.380 --> 04:04.180
啊也可以新建个分支

04:04.580 --> 04:05.220
本地

04:05.700 --> 04:07.020
新建分支

04:07.380 --> 04:09.060
比方说你要开发一个

04:09.100 --> 04:10.420
楼大喜的分支啊

04:10.420 --> 04:11.620
比方说你可以

04:11.620 --> 04:13.220
例如你开发一个

04:13.220 --> 04:14.500
埋楼大喜

04:14.500 --> 04:15.580
后面可以写上个版本

04:15.580 --> 04:16.740
好啊比方说

04:16.740 --> 04:17.860
10.3这个版本

04:18.100 --> 04:19.420
你可以新建一个分支

04:19.740 --> 04:20.420
然后

04:20.740 --> 04:22.500
在新分支中开发

04:23.660 --> 04:24.580
在新

04:25.080 --> 04:27.120
新分支中

04:27.320 --> 04:28.120
进行

04:29.480 --> 04:30.280
声明

04:30.720 --> 04:32.080
文件的开发

04:32.400 --> 04:33.840
那么把声明文件放哪

04:34.240 --> 04:35.920
你要把声明文件放这个位置

04:36.520 --> 04:37.720
啊他这里面有个目录

04:37.720 --> 04:38.600
叫taps目录

04:38.600 --> 04:39.640
对他方答应啊

04:39.720 --> 04:40.480
taps目录

04:41.240 --> 04:42.320
那么你要到本地呢

04:42.320 --> 04:43.440
进到这个目录过后

04:43.720 --> 04:44.720
啊在这个目录里面

04:44.720 --> 04:46.040
里边呢去新建一个文件

04:46.040 --> 04:48.240
你看这里面已经有很多很多的目录了

04:48.400 --> 04:49.200
啊非常非常多

04:49.200 --> 04:50.080
他到上面说

04:50.280 --> 04:53.640
他说一共有啊4773个目录

04:53.640 --> 04:54.000
但是呢

04:54.000 --> 04:56.100
我现在只能显示以前啊

04:56.100 --> 04:57.100
只给你显示以前

04:57.100 --> 04:58.060
实在太多了

04:58.500 --> 04:59.420
好这里面呢

04:59.420 --> 05:01.340
你要去新建一个文件夹啊

05:01.340 --> 05:02.700
新建一个文件夹

05:02.700 --> 05:03.900
具体的做法就是

05:04.220 --> 05:05.420
啊在

05:05.860 --> 05:06.700
taps

05:07.420 --> 05:08.300
目录中

05:08.740 --> 05:10.580
新建文件夹

05:10.940 --> 05:11.740
这个文件夹呢

05:11.740 --> 05:13.220
你给他取个合适的名字

05:13.220 --> 05:14.180
比方说你

05:14.300 --> 05:15.820
啊设置的内存库呢

05:15.820 --> 05:17.140
升班楼大喜对吧

05:17.140 --> 05:18.460
你可以就去一个楼大喜

05:18.460 --> 05:19.580
但是很遗憾的是

05:19.580 --> 05:20.740
楼大喜呢已经

05:20.780 --> 05:21.860
已经被使用了啊

05:21.860 --> 05:23.300
已经使用了这个文件夹了

05:23.300 --> 05:25.280
所以说你可以取一下其他名字

05:25.280 --> 05:26.800
会取一些其他名字

05:27.000 --> 05:28.560
新建文件夹啊

05:28.560 --> 05:30.840
在新的文件夹中

05:31.120 --> 05:32.480
进行啊

05:32.480 --> 05:33.800
开发生命文件

05:35.080 --> 05:36.240
啊第第四步

05:36.240 --> 05:37.400
当你开发完成

05:37.400 --> 05:39.040
测试了一些的没问题之后呢

05:39.040 --> 05:41.880
第五步就是上传分支啊

05:41.880 --> 05:43.880
就是应该叫铺洗啊

05:43.880 --> 05:44.880
铺洗分支

05:45.280 --> 05:47.680
到你的开源库

05:48.720 --> 05:50.080
就把你这个分支

05:50.080 --> 05:51.600
发不到你的库里面啊

05:51.600 --> 05:52.880
就铺洗到这个浮起

05:52.880 --> 05:54.460
这个应该很简单对吧

05:54.460 --> 05:56.260
啊发布出去过后呢

05:56.260 --> 05:58.180
然后你要回到啊

05:58.180 --> 05:59.060
第六步

06:00.180 --> 06:05.580
到呃官方的开源库中啊

06:05.580 --> 06:07.580
提交破request

06:07.580 --> 06:08.980
啊这些都是都是

06:08.980 --> 06:09.980
githl的知识啊

06:09.980 --> 06:12.380
相信大家应该是知道什么意思

06:12.380 --> 06:15.380
我们到了官方的内存库到这边

06:16.180 --> 06:17.460
啊到了哎不是

06:18.060 --> 06:19.460
啊官方的内存库这边

06:19.460 --> 06:21.860
你去新建一个破request

06:21.960 --> 06:23.360
啊就相当于是说啊

06:23.360 --> 06:24.760
我要给你提交一些东西

06:24.760 --> 06:26.360
你帮我审核一下啊

06:26.360 --> 06:28.160
去新建一个破request

06:28.160 --> 06:29.760
那么提交之后呢

06:29.760 --> 06:32.160
啊就是第七步呢

06:32.160 --> 06:34.160
就是等待官方审核

06:34.160 --> 06:38.560
等待官方管理员审核

06:38.560 --> 06:41.160
啊审核了大概需要一天的时间啊

06:41.160 --> 06:42.760
大概需要一天的时间

06:42.760 --> 06:43.760
审核通过过后呢

06:43.760 --> 06:45.860
他就会把你这个分支啊

06:45.860 --> 06:46.760
你写的代码呢

06:46.760 --> 06:49.060
合并到他的主分支去啊

06:49.060 --> 06:50.560
审核通过之后

06:50.560 --> 06:53.560
啊会将你的分支代码

06:53.560 --> 06:56.560
合并到主分支

06:56.560 --> 06:57.560
合并进去

06:57.560 --> 06:59.560
合并进去过后呢

06:59.560 --> 07:00.560
啊就可以使用啊

07:00.560 --> 07:02.560
他就会发布啊

07:02.560 --> 07:04.560
啊然后发布

07:04.560 --> 07:06.560
发布到npm

07:06.560 --> 07:07.560
发布之后

07:07.560 --> 07:08.560
你就包拾后

07:08.560 --> 07:09.560
我们就可以从npm上面

07:09.560 --> 07:11.560
去下载啊你的库了

07:11.560 --> 07:12.560
怎么安装你的库呢

07:12.560 --> 07:13.560
包拾安装的时候呢

07:13.560 --> 07:14.560
啊之后

07:14.560 --> 07:16.560
我们就可以从npm上面

07:16.560 --> 07:18.560
去下载啊你的库了

07:18.560 --> 07:19.560
怎么安装你的库呢

07:19.560 --> 07:20.560
啊之后

07:20.560 --> 07:23.560
就可以通过命令

07:23.560 --> 07:25.560
啊这样的命令

07:25.560 --> 07:28.560
npm怎么安装安装

07:28.560 --> 07:30.560
然后taps

07:30.560 --> 07:31.560
你的

07:31.560 --> 07:32.560
你的

07:32.560 --> 07:33.560
就是

07:33.560 --> 07:34.560
啊

07:34.560 --> 07:36.560
你发布的库名

07:37.560 --> 07:38.560
这个库名呢

07:38.560 --> 07:39.560
就对应到你的目录啊

07:39.560 --> 07:40.560
就对应到你的

07:40.560 --> 07:41.560
这里的目录

07:41.560 --> 07:43.560
就这里的目录

07:43.560 --> 07:45.560
啊那么对应到你的库名呢

07:45.560 --> 07:46.560
就发布出去了

07:46.560 --> 07:47.560
这样就发布出去了

07:47.560 --> 07:49.560
啊那么这就是

07:49.560 --> 07:50.560
他整个的过程啊

07:50.560 --> 07:51.560
整个的过程

07:51.560 --> 07:52.560
如果你有一天啊

07:52.560 --> 07:53.560
显得没错

07:53.560 --> 07:54.560
你希望给一些

07:54.560 --> 07:55.560
第三方的库

07:55.560 --> 07:56.560
发现一些第三方的库

07:56.560 --> 07:58.560
还没有写生命文件

07:58.560 --> 07:59.560
那你可以去

07:59.560 --> 08:00.560
尝试给他写一个

08:00.560 --> 08:01.560
写一个过后呢

08:01.560 --> 08:02.560
按照这样的流程

08:02.560 --> 08:04.560
啊发布到就是taps

08:04.560 --> 08:06.560
这个官方库里边

08:06.560 --> 08:07.560
好了啊

08:07.560 --> 08:08.560
这就是说一下发布

08:08.560 --> 08:09.560
就其实我说这一块呢

08:09.560 --> 08:11.560
主要的目的还不是说

08:11.560 --> 08:12.560
告诉大家

08:12.560 --> 08:13.560
啊你们是怎么去发

08:13.560 --> 08:15.560
你们应该怎么去发布

08:15.560 --> 08:16.560
主要的目的

08:16.560 --> 08:17.560
是让大家知道

08:17.560 --> 08:19.560
别人写的库

08:19.560 --> 08:20.560
他是怎么发布的

08:20.560 --> 08:21.560
啊了解一下

08:21.560 --> 08:22.560
别人写的库

08:22.560 --> 08:23.560
他是怎么发布的

08:23.560 --> 08:24.560
就是这么一个流程

08:24.560 --> 08:25.560
好了啊

08:25.560 --> 08:26.560
我们那么

08:26.560 --> 08:27.560
我们生命文件

08:27.560 --> 08:28.560
这个章节呢

08:28.560 --> 08:29.560
就到此结束了

08:29.560 --> 08:30.560
啊至此呢

08:30.560 --> 08:31.560
咱们ts呢

08:31.560 --> 08:33.560
学习呢

08:33.560 --> 08:35.560
基本上是学习完了啊

08:35.560 --> 08:36.560
基本上没有什么东西了

08:36.560 --> 08:38.560
ts 99%的

08:38.560 --> 08:40.560
我们要使用的指示呢

08:40.560 --> 08:41.560
我们都在这个

08:41.560 --> 08:42.560
课程中学习到了

08:42.560 --> 08:44.560
那么后边呢就是

08:44.560 --> 08:45.560
项目实战

08:45.560 --> 08:46.560
一个完整的项目

08:46.560 --> 08:47.560
来练习一下

08:47.560 --> 08:48.560
我们学习到了

08:48.560 --> 08:50.560
TypeScript的知识

08:50.560 --> 08:51.560
ok啊

08:51.560 --> 08:53.560
咱们这节课啊

08:53.560 --> 08:54.560
这个章节就到此结束了

08:54.560 --> 08:55.560
ok

08:55.560 --> 08:56.560
拜拜

