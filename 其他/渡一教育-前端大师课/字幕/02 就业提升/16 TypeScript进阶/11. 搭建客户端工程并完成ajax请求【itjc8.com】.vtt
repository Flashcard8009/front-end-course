WEBVTT

00:00.750 --> 00:06.250
好了 支持呢 我们开发完了服务器的接口

00:06.250 --> 00:08.750
现在呢 我们要搞一个客户端了

00:08.750 --> 00:11.750
客户端这一块呢 按照我们以前的分析啊

00:11.750 --> 00:14.750
客户端这一块我们要使用的技术呢

00:14.750 --> 00:18.750
是rex全家统 然后配合上ts

00:18.750 --> 00:24.750
其实呢 在技术部分呢 我们已经使用了rex来搭建了这么一个客户端的环境

00:24.750 --> 00:27.750
对吧 我们现在呢 继续用这种方式啊

00:28.750 --> 00:31.750
其实呢 这一块呢 我先把这个文件夹散掉

00:31.750 --> 00:34.750
我一会我们自动使用才生成

00:34.750 --> 00:37.750
其实这一块我要说一下啊 就是说

00:37.750 --> 00:43.750
客户端这一块也可以使用 自己手动使用webpack来进行搭建

00:43.750 --> 00:48.750
只不过呢 我由于我们这门客 主要是讲ts

00:48.750 --> 00:52.750
涉及到webpack的知识呢 我们会专门打一个门客层来讲

00:53.750 --> 00:58.750
我们这里还是使用rex的脚手架来完成这样的搭建

00:58.750 --> 01:03.750
之前我们也分析过 在客户端这一块rex的脚手架

01:03.750 --> 01:10.750
rex的脚手架有很多 官方的脚手架是create-rex

01:10.750 --> 01:12.750
对吧 如果你要做服务端渲染的话

01:12.750 --> 01:15.750
应该可以使用next.js这个脚手架

01:15.750 --> 01:19.750
如果你其实也可以选择arly的这个脚手架

01:20.750 --> 01:22.750
其实也不错 我用了一下其实也不错

01:22.750 --> 01:27.750
这里我选择的是官方的脚手架 也就是create-rex app

01:27.750 --> 01:31.750
为什么选择它呢 因为它用的人对多

01:31.750 --> 01:36.750
目前的话 至少很多同学学习rex的时候使用的都是这个脚手架

01:36.750 --> 01:39.750
所以说我用你们熟悉的脚手架就行了

01:39.750 --> 01:43.750
这里面我们先用这个脚手架来搭建好这么一个

01:43.750 --> 01:45.750
那帮我们生成这个工程

01:45.750 --> 01:49.750
好 我们这里使用create-rex app

01:49.750 --> 01:54.750
然后这里面我们给它工程取个名字 就是client 就是我们的客户端

01:54.750 --> 01:59.750
然后这里我给它指定我们的语言使用的是type script

01:59.750 --> 02:02.750
好了 回录 它这都帮我们生成吧

02:02.750 --> 02:05.750
我们先不管它 这都帮我们生成

02:05.750 --> 02:07.750
生成的过程中呢 我们先说一下

02:07.750 --> 02:10.750
由于我们客户端用的是全家筒

02:10.750 --> 02:14.750
所以说设计到很多东西 比如说路由

02:14.750 --> 02:17.750
比如说状态处理rex

02:17.750 --> 02:19.750
还有一个uicool nd

02:19.750 --> 02:24.750
那么我们如何把这些东西跟ts进行结合呢

02:24.750 --> 02:28.750
这是我们主要的开发的时候 主要关注的问题

02:28.750 --> 02:30.750
就是如何跟ts来结合

02:30.750 --> 02:33.750
其实它具体怎么去实现功能 这个都无所谓了

02:33.750 --> 02:35.750
因为大家都做过的 对吧

02:35.750 --> 02:39.750
在做这些之前 在使用这些全家筒之前

02:39.750 --> 02:41.750
我们先要做一件事 就是

02:41.750 --> 02:44.750
我们整个过程会设计到阿迦克斯请求 对吧

02:44.750 --> 02:46.750
所以说我们可能要先做一件事

02:46.750 --> 02:50.750
先做一下就是完成阿迦克斯请求

02:50.750 --> 02:52.750
把阿迦克斯请求封装一下

02:52.750 --> 02:54.750
因此我们的开发顺序

02:54.750 --> 02:57.750
我们开发顺序是先开发阿迦克斯请求

02:57.750 --> 03:02.750
先开发客户端的API请求功能

03:02.750 --> 03:04.750
先把这个功能开发好

03:04.750 --> 03:06.750
开发好之后我们再说其他的事情

03:06.750 --> 03:09.750
好吧 我看一下大家完成没有

03:09.750 --> 03:10.750
好 大家完成了

03:10.750 --> 03:13.750
那我现在进入这个目录 进入这个目录去测试一下

03:13.750 --> 03:15.750
去测试一下

03:15.750 --> 03:17.750
进到这个目录里面去

03:17.750 --> 03:20.750
怎么开了这么多窗口啊 闪除掉

03:20.750 --> 03:23.750
这个地方我们把服务器启动起来吧

03:23.750 --> 03:25.750
把服务器启动起来

03:25.750 --> 03:29.750
这里右键中央打开 启动服务器

03:29.750 --> 03:31.750
NPM装备

03:32.750 --> 03:34.750
当服务器运行着 我们不管它了

03:34.750 --> 03:38.750
我们后边在这里进入这个Client这个目录

03:39.750 --> 03:41.750
好 这里我们把客户端也运行起来

03:41.750 --> 03:43.750
客户端也运行起来

03:47.750 --> 03:51.750
看一下 先看一下能不能运行的通

03:51.750 --> 03:55.750
它说什么 它说客户端这里也想使用3000那个端口

03:55.750 --> 03:58.750
但是3000那个端口已经被服务器占用了

03:58.750 --> 04:00.750
它问你是不是要选择另外一个端口

04:00.750 --> 04:02.750
当然是的

04:02.750 --> 04:04.750
OK 选择

04:04.750 --> 04:06.750
它打开了浏览器 表示了这个客户端

04:06.750 --> 04:08.750
它选择端口是3001

04:08.750 --> 04:10.750
它把这个客户端运行起来

04:10.750 --> 04:13.750
让它运行一会儿 第一次要经过一些编译

04:13.750 --> 04:15.750
好 关于这个工程的解释

04:15.750 --> 04:17.750
就是一些配置文件里面的东西

04:17.750 --> 04:20.750
这些解释我们以前在学习

04:20.750 --> 04:23.750
这个基础部分就已经解释过了

04:23.750 --> 04:25.750
所以说这里我不再解释了

04:26.750 --> 04:28.750
我这里主要说一下这个点

04:28.750 --> 04:31.750
就是在这个SRC目录下边

04:31.750 --> 04:34.750
其实我们以前见到过这么一个文件

04:34.750 --> 04:39.750
叫做reactapp.nv.d.ts

04:39.750 --> 04:42.750
以前我们不知道这个玩意儿是啥

04:42.750 --> 04:45.750
那现在我们知道了 这个玩意儿是啥呢

04:45.750 --> 04:48.750
这个玩意儿就是一个声明文件

04:48.750 --> 04:51.750
这个声明文件里边 它啥都没有写

04:51.750 --> 04:54.750
但是导入了一个内雄

04:54.750 --> 04:57.750
我们知道用三鞋线指令表示了

04:57.750 --> 05:00.750
把另外一个声明的东西导入进来

05:00.750 --> 05:02.750
这个内雄在哪儿呢

05:02.750 --> 05:04.750
另外一个声明文件在哪儿呢

05:04.750 --> 05:06.750
我们来看一下它里边声明上什么东西

05:06.750 --> 05:09.750
我们在这边漏的马居士下边

05:09.750 --> 05:13.750
这里搜索一下react.script

05:13.750 --> 05:17.750
大家看 搜索出来了这么一个文件夹

05:17.750 --> 05:18.750
这个文件夹里边

05:18.750 --> 05:20.750
它是安装在漏的马居士里边的

05:20.750 --> 05:23.750
这个文件夹里边有这么一个nv

05:23.750 --> 05:26.750
nv下面有这么一个东西

05:26.750 --> 05:28.750
它相当于是把这个东西导入进来了

05:28.750 --> 05:31.750
它相当于是把这个玩意儿导入进来了

05:31.750 --> 05:32.750
导入进来的过后

05:32.750 --> 05:36.750
给你看一下这个玩意儿声明了啥

05:36.750 --> 05:38.750
它声明了这么一些东西

05:38.750 --> 05:42.750
马居信号信号是通配服

05:42.750 --> 05:44.750
匹配前面任意的东西

05:44.750 --> 05:46.750
然后.bmp

05:46.750 --> 05:48.750
信号.gif

05:48.750 --> 05:50.750
信号.jpg

05:50.750 --> 05:52.750
信号.svg

05:52.750 --> 05:54.750
它为什么要去做这样的模块声明

05:54.750 --> 05:57.750
它为什么要去做这样的模块声明

05:57.750 --> 06:00.750
它相当于是默认导出一个制服串

06:00.750 --> 06:03.750
你看随便声明那个东西是个制服串类型

06:03.750 --> 06:04.750
然后导出

06:04.750 --> 06:06.750
相当于它声明了什么意思呢

06:06.750 --> 06:09.750
如果你去导入这样的一个模块的时候

06:09.750 --> 06:10.750
得到了是一个制服串

06:10.750 --> 06:14.750
它相当于是做了这么一个声明

06:14.750 --> 06:16.750
那它为什么要去做这个声明呢

06:16.750 --> 06:18.750
我们来看一下

06:18.750 --> 06:21.750
我们的这个势力程序中有这么一个svg

06:21.750 --> 06:23.750
这是一个图片

06:23.750 --> 06:25.750
用svg来描述的一个图片

06:26.750 --> 06:27.750
这个图片里面

06:27.750 --> 06:29.750
这个地方它用到了这个图片

06:29.750 --> 06:31.750
你看.logsvg

06:31.750 --> 06:33.750
它用到了这个图片

06:33.750 --> 06:34.750
那么你想一想

06:34.750 --> 06:38.750
在ts里面允许你这样在导入模块吗

06:38.750 --> 06:40.750
它允不允许你这样导入模块

06:40.750 --> 06:42.750
肯定是不行

06:42.750 --> 06:44.750
ts里面它只能导入ts

06:44.750 --> 06:45.750
对吧

06:45.750 --> 06:47.750
只能导入ts的模块

06:47.750 --> 06:49.750
你怎么能导出一张图片呢

06:49.750 --> 06:51.750
所以说如果没有那一块的声明的话

06:51.750 --> 06:52.750
这里要爆错的

06:52.750 --> 06:54.750
那一块的声明表示什么意思呢

06:54.750 --> 06:56.750
就定义了

06:56.750 --> 06:58.750
因为ts它不知道这个模块是啥意思

06:58.750 --> 07:00.750
得到了结果啥类型

07:00.750 --> 07:01.750
它并不知道

07:01.750 --> 07:03.750
但是有了这个模块的声明

07:03.750 --> 07:05.750
就相当于是告诉了ts

07:05.750 --> 07:08.750
当我导入后续名为svg的图片的时候

07:08.750 --> 07:09.750
导入的是啥呢

07:09.750 --> 07:11.750
导入的是一个字母串

07:11.750 --> 07:13.750
你看它推断出来是个字母串

07:13.750 --> 07:15.750
这就是那个模块的作用

07:15.750 --> 07:16.750
也就是说以后

07:16.750 --> 07:18.750
如果你们要手动搭建工程

07:18.750 --> 07:20.750
手动用vpack搭建工程的话

07:20.750 --> 07:22.750
不要忘记做这么一件事

07:22.750 --> 07:24.750
就像类似于这样的写法

07:24.750 --> 07:25.750
vpackscript

07:25.750 --> 07:26.750
这种写法

07:26.750 --> 07:28.750
远这个svg这里

07:28.750 --> 07:29.750
svg这里

07:29.750 --> 07:30.750
它导出的是啥呢

07:30.750 --> 07:32.750
导出的是一个字母串

07:32.750 --> 07:34.750
导出的是个字母串

07:34.750 --> 07:35.750
好

07:35.750 --> 07:37.750
我把这个地方说一下

07:37.750 --> 07:38.750
咱们来说一下

07:38.750 --> 07:39.750
其他都没啥

07:39.750 --> 07:41.750
其他都没有啥

07:41.750 --> 07:42.750
好 那么这里边呢

07:42.750 --> 07:44.750
我们还是跟往常一样

07:44.750 --> 07:46.750
安装一个ts的印子

07:46.750 --> 07:48.750
还是安装一个ts的印子

07:48.750 --> 07:50.750
或者我们不安装了吧

07:50.750 --> 07:52.750
我们反正也不是在公司里面开发

07:52.750 --> 07:54.750
我们重点讲的也是ts

07:54.750 --> 07:56.750
ts另策的话

07:56.750 --> 07:57.750
服务器那边我们用的

07:57.750 --> 07:58.750
建的已经够多了

07:58.750 --> 08:00.750
那这里面我们不管了

08:00.750 --> 08:03.750
好 那么这个工程搭建好了之后

08:03.750 --> 08:05.750
现在我们先搞定一件事

08:05.750 --> 08:07.750
这个界面其实已经出来了

08:07.750 --> 08:09.750
这个界面先不管它吧

08:09.750 --> 08:10.750
先不管这个界面

08:10.750 --> 08:11.750
我们先搞定一件事

08:11.750 --> 08:12.750
什么事呢

08:12.750 --> 08:15.750
就是做阿加赫斯请求

08:15.750 --> 08:17.750
先把这个功能的开发完了

08:17.750 --> 08:19.750
开发完了再说

08:19.750 --> 08:21.750
好 这里我新建一个文件夹

08:21.750 --> 08:23.750
给它取名为services

08:23.750 --> 08:25.750
这个文件夹里边

08:25.750 --> 08:27.750
专门来处理各种阿加赫斯请求

08:27.750 --> 08:29.750
现在我们在客户端了

08:29.750 --> 08:31.750
对 现在我们在客户端了

08:31.750 --> 08:33.750
我们要处理阿加赫斯请求

08:33.750 --> 08:36.750
这里面我新建这么一个文件

08:36.750 --> 08:39.750
比方说我们给它取个名字叫做

08:39.750 --> 08:43.750
mov service ts

08:43.750 --> 08:45.750
新建这么一个文件

08:45.750 --> 08:46.750
这个文件里边

08:46.750 --> 08:48.750
我们可以用内德方式

08:48.750 --> 08:50.750
反正我们多练习一下

08:50.750 --> 08:52.750
关于内德点写 多练习一下

08:52.750 --> 08:54.750
这里我们导出一个内

08:54.750 --> 08:57.750
这个内的名字叫做mov service

08:57.750 --> 08:59.750
这个大家做啥呢

08:59.750 --> 09:01.750
来处理各种阿加赫斯请求

09:01.750 --> 09:04.750
跟电影相关的阿加赫斯请求

09:04.750 --> 09:06.750
好 这个内里边

09:06.750 --> 09:08.750
我们会提供一些函数

09:08.750 --> 09:10.750
来帮助我们来完成

09:10.750 --> 09:12.750
阿加赫斯请求

09:12.750 --> 09:13.750
什么函数呢

09:13.750 --> 09:14.750
一个个来

09:14.750 --> 09:17.750
首先是添加一个电影

09:17.750 --> 09:19.750
我们一个个来 增长改啥

09:19.750 --> 09:21.750
首先添加一个电影

09:21.750 --> 09:22.750
这些函数呢

09:22.750 --> 09:24.750
我们也可以使用静态的

09:24.750 --> 09:26.750
public static

09:26.750 --> 09:28.750
添加一个电影

09:28.750 --> 09:30.750
add

09:30.750 --> 09:32.750
添加

09:32.750 --> 09:34.750
你要告诉我一个啥呢

09:34.750 --> 09:35.750
你要告诉我一个啥

09:35.750 --> 09:36.750
我才能添加电影

09:36.750 --> 09:38.750
你是不是要告诉我一个电影对象

09:38.750 --> 09:39.750
对不对

09:39.750 --> 09:41.750
好 那么这个电影对象

09:41.750 --> 09:43.750
mov是不是要约束一下

09:43.750 --> 09:44.750
以前我们都随便写的

09:44.750 --> 09:46.750
对吧 现在要约束了

09:46.750 --> 09:48.750
那么这个电影对象的约束呢

09:48.750 --> 09:50.750
这个电影对象的约束呢

09:50.750 --> 09:52.750
我们可以使用接口

09:52.750 --> 09:53.750
可以使用接口

09:53.750 --> 09:55.750
我们在这里

09:55.750 --> 09:57.750
找出一个interface

09:57.750 --> 09:59.750
找出一个immov

09:59.750 --> 10:01.750
一个电影

10:01.750 --> 10:03.750
接口 电影对象里面有哪些东西

10:03.750 --> 10:05.750
id

10:05.750 --> 10:06.750
制服串

10:06.750 --> 10:08.750
还有哪些name

10:08.750 --> 10:09.750
制服串

10:09.750 --> 10:10.750
有些朋友可能想到了

10:10.750 --> 10:12.750
我们服务器是不是写过的

10:12.750 --> 10:14.750
服务器是不是写过这个接口的

10:14.750 --> 10:16.750
服务器也写过这样的内

10:16.750 --> 10:17.750
对不对

10:17.750 --> 10:20.750
那么这里会导致有重複代码

10:20.750 --> 10:21.750
这个重複代码

10:21.750 --> 10:23.750
指的是服务端的从

10:23.750 --> 10:24.750
服务端的代码

10:24.750 --> 10:25.750
某些内容

10:25.750 --> 10:27.750
跟客户端的内容是共用的

10:28.750 --> 10:32.320
有的时候

10:32.320 --> 10:33.320
有的时候

10:33.320 --> 10:34.320
有下面这个问题

10:34.320 --> 10:36.320
服务器和客户端

10:36.320 --> 10:38.320
会共用

10:38.320 --> 10:40.320
共用

10:40.320 --> 10:42.320
一个内容

10:42.320 --> 10:43.320
某些内容是共用的

10:43.320 --> 10:45.320
然后这里

10:45.320 --> 10:47.320
那么这个时候怎么处理呢

10:47.320 --> 10:49.320
这个时候最好的处理方式

10:49.320 --> 10:51.320
史实

10:51.320 --> 10:53.320
史实

10:53.320 --> 10:57.320
就是如果要处理

10:57.320 --> 11:01.320
此处的重複代码问题

11:01.320 --> 11:03.320
最佳做法

11:03.320 --> 11:05.320
是自己

11:05.320 --> 11:07.320
自行使用

11:07.320 --> 11:08.320
webpack

11:08.320 --> 11:10.320
搭建工程

11:10.320 --> 11:11.320
整个工程里边

11:11.320 --> 11:13.320
它包含了服务器

11:13.320 --> 11:14.320
包含了客户端

11:14.320 --> 11:16.320
你自己用webpack来进行搭建

11:16.320 --> 11:17.320
搭建工程

11:17.320 --> 11:18.320
但是呢

11:18.320 --> 11:20.320
由于我们这个课

11:20.320 --> 11:21.320
我想

11:21.320 --> 11:23.320
尽量的专注于

11:23.320 --> 11:25.320
TS

11:25.320 --> 11:27.320
不要设计太多其他的技术

11:27.320 --> 11:29.320
因为我也不太清楚

11:29.320 --> 11:30.320
我听这个课的同学

11:30.320 --> 11:32.320
他的之前学习了哪些东西

11:32.320 --> 11:34.320
所以说尽量的弱化

11:34.320 --> 11:35.320
其他的东西

11:35.320 --> 11:37.320
因此我不打算这样去做了

11:37.320 --> 11:39.320
不打算这样去做了

11:39.320 --> 11:40.320
我们后边会专门去

11:40.320 --> 11:42.320
开一个webpack的课程

11:42.320 --> 11:43.320
大家注意

11:43.320 --> 11:45.320
关注一下

11:45.320 --> 11:46.320
我们到

11:46.320 --> 11:48.320
专门的webpack课程里边

11:48.320 --> 11:50.320
再去说这些问题

11:50.320 --> 11:51.320
我们这里

11:51.320 --> 11:53.320
就不管这些问题了

11:53.320 --> 11:55.320
现在我们就手动写一遍

11:55.320 --> 11:56.320
手动写一遍

11:56.320 --> 11:58.320
有name还有啥呢

11:58.320 --> 11:59.320
我们看一下服务器端

11:59.320 --> 12:01.320
扩避过来吧

12:01.320 --> 12:02.320
扩避过来吧

12:02.320 --> 12:03.320
其实扩避过来

12:03.320 --> 12:05.320
也可以省很多事了

12:05.320 --> 12:06.320
movie

12:06.320 --> 12:08.320
把这些东西复作过来

12:08.320 --> 12:11.320
把这些装饰器给去掉

12:11.320 --> 12:14.320
把这些装饰器给去掉

12:16.320 --> 12:17.320
去掉

12:17.320 --> 12:18.320
这里

12:18.320 --> 12:20.320
去掉

12:20.320 --> 12:22.320
这里去掉

12:22.320 --> 12:24.320
这里去掉

12:24.320 --> 12:26.320
这里去掉

12:26.320 --> 12:28.320
去掉

12:28.320 --> 12:30.320
这里去掉

12:30.320 --> 12:32.320
去掉

12:32.320 --> 12:34.320
去掉

12:34.320 --> 12:35.320
好了

12:35.320 --> 12:36.320
那么现在

12:36.320 --> 12:38.320
我们把电影的内箱做出来了

12:38.320 --> 12:40.320
就这么一个电影内箱

12:40.320 --> 12:42.320
搞出一个iMovie

12:42.320 --> 12:43.320
有这么一个结合

12:43.320 --> 12:44.320
iMovie

12:44.320 --> 12:45.320
那么添加的时候

12:45.320 --> 12:46.320
这个电影自然是一个iMovie

12:46.320 --> 12:48.320
是这么一个内箱

12:48.320 --> 12:49.320
什么内箱

12:49.320 --> 12:50.320
这里我

12:50.320 --> 12:52.320
不敢说什么问题了

12:52.320 --> 12:53.320
不敢说什么

12:56.140 --> 12:57.140
那么添加电影

12:57.140 --> 12:58.140
我们怎么添加呢

12:58.140 --> 13:00.140
我们这里可以用

13:00.140 --> 13:02.140
浏览器这一边的废棋

13:02.140 --> 13:03.140
废棋API

13:03.140 --> 13:05.140
也可以使用什么

13:05.140 --> 13:06.140
actuals

13:06.140 --> 13:07.140
也可以使用actuals

13:07.140 --> 13:08.140
看你自己喜欢用哪一种

13:08.140 --> 13:10.140
我这里使用actuals

13:11.140 --> 13:13.140
先停止

13:13.140 --> 13:15.140
这里我们安装

13:15.140 --> 13:17.140
12ADD

13:17.140 --> 13:18.140
actuals

13:18.140 --> 13:20.140
actuals它本身是

13:20.140 --> 13:22.140
加了内箱声明的

13:22.140 --> 13:23.140
所以说

13:23.140 --> 13:24.140
我们不需要去安装

13:24.140 --> 13:26.140
它的内箱库了

13:26.140 --> 13:28.140
稍微等一下

13:28.140 --> 13:32.630
安装好了

13:32.630 --> 13:33.630
actuals之后

13:33.630 --> 13:34.630
我们这边就可以

13:34.630 --> 13:35.630
导入actuals

13:35.630 --> 13:37.630
来进行actuals请求了

13:37.630 --> 13:39.630
这里导入 import

13:39.630 --> 13:41.630
actuals

13:41.630 --> 13:42.630
actuals

13:44.630 --> 13:46.630
导入进来

13:46.630 --> 13:47.630
那么这边

13:47.630 --> 13:48.630
我们就可以使用

13:48.630 --> 13:49.630
actuals来进行请求了

13:49.630 --> 13:50.630
那么自然而然

13:50.630 --> 13:51.630
可以想到

13:51.630 --> 13:52.630
这个函数是一个

13:52.630 --> 13:53.630
异步的函数

13:53.630 --> 13:54.630
因为这些代码

13:54.630 --> 13:55.630
没什么好说的

13:55.630 --> 13:56.630
所以我写得比较快了

13:56.630 --> 13:58.630
post请求

13:58.630 --> 13:59.630
请求服务器

13:59.630 --> 14:01.630
请求服务器哪个地址呢

14:01.630 --> 14:03.630
这里马上要想到这个问题

14:03.630 --> 14:06.630
你现在是在客户端

14:06.630 --> 14:08.630
客户端的端口是多少

14:08.630 --> 14:10.630
目前在客户端

14:10.630 --> 14:12.630
客户端的端口

14:12.630 --> 14:13.630
是多少呢

14:13.630 --> 14:15.630
是3001

14:15.630 --> 14:16.630
你在客户端里边

14:16.630 --> 14:18.630
去请求什么地址呢

14:18.630 --> 14:19.630
如果你请求的地址

14:19.630 --> 14:20.630
是这样的地址

14:20.630 --> 14:22.630
比如说api move

14:22.630 --> 14:23.630
请求这样的地址

14:23.630 --> 14:24.630
那么如果你这个时候

14:24.630 --> 14:26.630
去请求

14:26.630 --> 14:29.630
请求api move

14:29.630 --> 14:30.630
这个地址的话

14:30.630 --> 14:31.630
注意中

14:31.630 --> 14:33.630
请求的地址是啥呢

14:33.630 --> 14:36.630
slocalhost3001

14:36.630 --> 14:38.630
api move

14:38.630 --> 14:39.630
对吧

14:39.630 --> 14:40.630
是这样的地址

14:40.630 --> 14:41.630
因为你省略掉了

14:41.630 --> 14:42.630
省略掉了协议名

14:42.630 --> 14:43.630
省略掉了端口

14:43.630 --> 14:44.630
那么协议

14:44.630 --> 14:45.630
协议

14:45.630 --> 14:46.630
主机名

14:46.630 --> 14:47.630
以及端口

14:47.630 --> 14:50.630
都是使用当前网站的东西

14:50.630 --> 14:51.630
所以说请求到

14:51.630 --> 14:52.630
最终结果

14:52.630 --> 14:53.630
请求了这个地址

14:53.630 --> 14:55.630
这显然是不满足要求的

14:55.630 --> 14:57.630
我们希望请求啥呢

14:57.630 --> 14:59.630
我们希望请求的是3000

14:59.630 --> 15:01.630
这个端口

15:01.630 --> 15:02.630
所以说

15:02.630 --> 15:05.630
现在有一个问题

15:05.630 --> 15:06.630
现在有一个问题就是

15:06.630 --> 15:08.630
我得把它写全

15:08.630 --> 15:10.630
好这样子写全的话

15:10.630 --> 15:12.630
倒是你能请求得到

15:12.630 --> 15:14.630
倒是你能请求得到

15:14.630 --> 15:15.630
但是呢

15:15.630 --> 15:17.630
这样子一是写的麻烦

15:17.630 --> 15:18.630
二是以后

15:18.630 --> 15:20.630
如果这一块更改了

15:20.630 --> 15:21.630
如果这一块更改了

15:21.630 --> 15:23.630
那是不是又不能用了

15:23.630 --> 15:24.630
服务器端如果端口变了

15:24.630 --> 15:26.630
比方说部署到服务器过后

15:26.630 --> 15:28.630
部署到真实的服务器过后

15:28.630 --> 15:29.630
那么这边一变

15:29.630 --> 15:31.630
那是不是又不能用了

15:31.630 --> 15:32.630
所以说呢

15:32.630 --> 15:33.630
这里在开发阶段

15:33.630 --> 15:35.630
我们希望使用代理

15:35.630 --> 15:36.630
关于这一块呢

15:36.630 --> 15:37.630
有些同学知道

15:37.630 --> 15:38.630
有些同学可能不知道

15:38.630 --> 15:39.630
不管你知不知道

15:39.630 --> 15:40.630
那么这里呢

15:40.630 --> 15:42.630
我用一种最简单的方式来做

15:42.630 --> 15:44.630
就是在package.json里边

15:44.630 --> 15:47.630
在下边给他加一个选项

15:47.630 --> 15:48.630
在角色加里边

15:48.630 --> 15:49.630
他支持这样的选项

15:49.630 --> 15:51.630
proxy表示代理

15:51.630 --> 15:52.630
代理的地址呢

15:52.630 --> 15:54.630
就是你如果没有加端口号

15:54.630 --> 15:55.630
没有加组精灵的话

15:55.630 --> 15:57.630
我们相当于是把它

15:57.630 --> 15:59.630
定向到这个地址

15:59.630 --> 16:01.630
localhost3000

16:01.630 --> 16:03.630
把它定向到这个地址

16:03.630 --> 16:05.630
加这么一个简单的一句话就行了

16:05.630 --> 16:07.630
使用代理

16:07.630 --> 16:09.630
好我们再来看一下

16:09.630 --> 16:10.630
再来看一下

16:10.630 --> 16:11.630
好这边

16:11.630 --> 16:13.630
我们这边就可以补写这个了

16:13.630 --> 16:14.630
就补写这个了

16:14.630 --> 16:15.630
我们先写个gats吧

16:15.630 --> 16:16.630
好先写这个

16:16.630 --> 16:18.630
先写post

16:18.630 --> 16:20.630
好然后poster请求过后呢

16:20.630 --> 16:22.630
我们要把这个数据给他

16:22.630 --> 16:23.630
poster请求里面

16:23.630 --> 16:24.630
第二个参数就是数据

16:24.630 --> 16:25.630
数据呢我们要给他

16:25.630 --> 16:27.630
数据呢就是这个move

16:27.630 --> 16:28.630
move给他

16:28.630 --> 16:30.630
好那他去完成请求

16:30.630 --> 16:31.630
完成请求之后

16:31.630 --> 16:33.630
服务器这边有响应结果

16:33.630 --> 16:35.630
对吧有响应的结果

16:35.630 --> 16:37.630
我们把这个响应结果得到

16:37.630 --> 16:39.630
这里可以解构

16:39.630 --> 16:41.630
解构服务器响应结果

16:41.630 --> 16:42.630
响应结果data

16:42.630 --> 16:43.630
把解构出来

16:43.630 --> 16:44.630
把解构出来

16:44.630 --> 16:46.630
好解构出来过后呢

16:46.630 --> 16:48.630
这里有位置啊

16:48.630 --> 16:49.630
等待

16:49.630 --> 16:51.630
好解构出来之后呢

16:51.630 --> 16:53.630
这个data就是服务器的响应消息体

16:53.630 --> 16:55.630
以前的可能你们习惯的协访

16:55.630 --> 16:56.630
有可能是这样子

16:56.630 --> 16:58.630
都是服务器先拿到这个

16:58.630 --> 17:00.630
紫然后respect的data

17:00.630 --> 17:02.630
通过这样子来读去到

17:02.630 --> 17:04.630
服务器的响应的消息体

17:04.630 --> 17:05.630
这也可以

17:05.630 --> 17:07.630
我这里就写简单一点的

17:07.630 --> 17:08.630
我直接解构

17:08.630 --> 17:10.630
解构为data

17:10.630 --> 17:11.630
data解构出来

17:11.630 --> 17:13.630
然后这里我直接发挥这个data

17:13.630 --> 17:15.630
好我们来试一下

17:15.630 --> 17:18.630
试一下能不能完成一个电影的添加

17:18.630 --> 17:20.630
我们到index.tsx里面去

17:20.630 --> 17:22.630
我们先不管有些界面

17:22.630 --> 17:23.630
move到先不管

17:23.630 --> 17:24.630
我们先这里

17:24.630 --> 17:28.630
通过调用move service

17:28.630 --> 17:29.630
第二

17:29.630 --> 17:30.630
什么呢

17:31.630 --> 17:34.630
add添加一个电影

17:34.630 --> 17:35.630
添加电影的时候

17:35.630 --> 17:36.630
我们给它一些属性

17:36.630 --> 17:38.630
电影的名字

17:38.630 --> 17:40.630
abc随便写

17:40.630 --> 17:42.630
电影的time amount

17:42.630 --> 17:43.630
多少时间

17:43.630 --> 17:44.630
时间的话

17:44.630 --> 17:46.630
三分钟随便写

17:46.630 --> 17:48.630
电影的taps

17:48.630 --> 17:49.630
内详

17:49.630 --> 17:51.630
体区随便写

17:51.630 --> 17:53.630
然后arrious

17:53.630 --> 17:54.630
地区

17:54.630 --> 17:55.630
地区

17:55.630 --> 17:56.630
大部分

17:56.630 --> 17:57.630
随便写

17:57.630 --> 17:59.630
然后arrious

17:59.630 --> 18:00.630
isHeart

18:00.630 --> 18:01.630
isHeart

18:01.630 --> 18:04.630
isClassic

18:04.630 --> 18:07.630
isCommit

18:07.630 --> 18:08.630
isTrue

18:08.630 --> 18:10.630
剩下两个属性

18:10.630 --> 18:11.630
好像是可选的了

18:11.630 --> 18:12.630
还有什么

18:12.630 --> 18:13.630
还有什么没写

18:13.630 --> 18:15.630
你只能看一下

18:15.630 --> 18:16.630
它说

18:16.630 --> 18:18.630
还有什么id

18:18.630 --> 18:20.630
id的话

18:20.630 --> 18:21.630
这个id的话

18:21.630 --> 18:22.630
我们做成可选吧

18:22.630 --> 18:23.630
因为id

18:23.630 --> 18:24.630
我们添加的时候

18:24.630 --> 18:25.630
也用不到对吧

18:25.630 --> 18:26.630
id的话

18:26.630 --> 18:27.630
做成可选

18:27.630 --> 18:29.630
都是服务器传给我们的

18:29.630 --> 18:31.630
都是服务器传给我们的

18:31.630 --> 18:33.630
因此我们把做成可选

18:33.630 --> 18:34.630
好

18:34.630 --> 18:35.630
现在写好了

18:35.630 --> 18:36.630
我们来试一下

18:36.630 --> 18:37.630
能不能完成添加

18:41.630 --> 18:43.630
输出服务器的响应结果

18:43.630 --> 18:45.630
试一下

18:45.630 --> 18:48.900
看行不行

18:53.690 --> 18:54.690
刷新一下

18:54.690 --> 19:00.300
稍等

19:00.300 --> 19:02.300
我们还没启动起来

19:02.300 --> 19:03.300
还没启动起来

19:03.300 --> 19:06.300
npm-zone

19:06.300 --> 19:07.300
错了

19:07.300 --> 19:09.300
npm-start

19:09.300 --> 19:11.300
启动客户端

19:11.300 --> 19:12.300
启动起来

19:12.300 --> 19:14.300
看一下这个请求有没有成功

19:14.300 --> 19:18.450
稍微的等一下

19:18.450 --> 19:24.450
看一下这个控制台

19:24.450 --> 19:31.820
稍微等一下

19:31.820 --> 19:32.820
这可以有点

19:32.820 --> 19:33.820
第一次加载

19:33.820 --> 19:34.820
它又要编译很多东西

19:34.820 --> 19:35.820
它不管要打包

19:35.820 --> 19:37.820
还要去运行TLS

19:37.820 --> 19:38.820
好

19:38.820 --> 19:39.820
发动成功了

19:39.820 --> 19:40.820
你看这个请求

19:40.820 --> 19:41.820
是不是打到数据了

19:41.820 --> 19:43.820
就拿到这个数据了

19:43.820 --> 19:44.820
我们得到这个id

19:44.820 --> 19:46.820
就得到这么一东西

19:46.820 --> 19:47.820
好

19:47.820 --> 19:48.820
我们不仅可以

19:48.820 --> 19:50.820
我们不仅可以

19:50.820 --> 19:51.820
拿到这个data

19:51.820 --> 19:52.820
拿到data

19:52.820 --> 19:54.820
而且它目前

19:54.820 --> 19:55.820
我们一个问题就是

19:55.820 --> 19:56.820
data的内形是n

19:56.820 --> 19:58.820
是n的内形

19:58.820 --> 20:00.820
那肯定不太合适

20:00.820 --> 20:01.820
为啥不太合适呢

20:01.820 --> 20:02.820
因为我这里

20:02.820 --> 20:04.820
明明非常清楚的知道

20:04.820 --> 20:07.820
完成了这个请求过后

20:07.820 --> 20:09.820
完成了这个请求过后

20:09.820 --> 20:11.820
我们要得到一个结果

20:11.820 --> 20:13.820
这个结果肯定是一个promise

20:13.820 --> 20:15.820
我们之前讲反复的提到过

20:15.820 --> 20:16.820
一个一步的函数

20:16.820 --> 20:18.820
它一定是promise

20:18.820 --> 20:21.820
那么这个promise对象

20:21.820 --> 20:24.820
它完成之后是一个什么东西呢

20:24.820 --> 20:27.820
它完成之后是一个啥玩意儿呢

20:27.820 --> 20:28.820
是一个啥玩意儿

20:28.820 --> 20:29.820
那么这边

20:29.820 --> 20:31.820
是不是有几种情况

20:31.820 --> 20:33.820
哪些情况呢

20:33.820 --> 20:35.820
一个是成功

20:35.820 --> 20:36.820
成功返回的格式呢

20:36.820 --> 20:38.820
是这样的格式

20:38.820 --> 20:40.820
L维空制补串

20:40.820 --> 20:42.820
要是成功

20:42.820 --> 20:43.820
然后呢

20:43.820 --> 20:45.820
还有一个就是

20:45.820 --> 20:46.820
data

20:46.820 --> 20:47.820
data有一个数据

20:47.820 --> 20:48.820
对吧

20:48.820 --> 20:49.820
一个数据

20:49.820 --> 20:50.820
data有一个数据

20:50.820 --> 20:51.820
都是成功的格式

20:51.820 --> 20:53.820
如果是错误呢

20:53.820 --> 20:55.820
错误的格式是这样子

20:55.820 --> 20:56.820
arrow

20:56.820 --> 20:58.820
now

20:58.820 --> 21:00.820
arrow是空制补串

21:00.820 --> 21:02.820
有数据的

21:02.820 --> 21:04.820
然后data为now

21:04.820 --> 21:05.820
对吧

21:05.820 --> 21:07.820
还有什么样的返回结果呢

21:07.820 --> 21:09.820
还有这种返回结果

21:09.820 --> 21:11.820
arrow

21:11.820 --> 21:12.820
这里呢

21:12.820 --> 21:14.820
返回的是

21:14.820 --> 21:16.820
空制补串

21:16.820 --> 21:17.820
然后呢

21:17.820 --> 21:19.820
page

21:19.820 --> 21:20.820
头头

21:20.820 --> 21:21.820
总的数据量

21:21.820 --> 21:22.820
多少多少

21:22.820 --> 21:23.820
还有data

21:23.820 --> 21:25.820
是一个啥的数据

21:25.820 --> 21:27.820
一共有这么三种返回结果

21:27.820 --> 21:28.820
对不对

21:28.820 --> 21:29.820
ok

21:29.820 --> 21:31.820
那么这三种返回结果呢

21:31.820 --> 21:34.820
我们可以把它约束成一个一个的内容

21:34.820 --> 21:37.820
来描述这三种返回结果

21:37.820 --> 21:38.820
好咱们来试一下

21:38.820 --> 21:39.820
新建一个文件

21:39.820 --> 21:42.820
取名为comment types

21:42.820 --> 21:44.820
这是浮起的返回结果

21:44.820 --> 21:46.820
浮起的返回结果

21:46.820 --> 21:47.820
返回结果有三种情况

21:47.820 --> 21:49.820
一种是错误的情况

21:49.820 --> 21:51.820
定格interface

21:51.820 --> 21:53.820
表示response

21:53.820 --> 21:55.820
或者叫以ipad合吧

21:55.820 --> 21:56.820
Iresponse

21:56.820 --> 21:58.820
arrow

21:58.820 --> 21:59.820
这是错误的格式

21:59.820 --> 22:00.820
错误的格式

22:00.820 --> 22:01.820
它一定是一种格式

22:01.820 --> 22:02.820
就是arrow

22:02.820 --> 22:04.820
为空制补串

22:04.820 --> 22:06.820
arrow为stream

22:06.820 --> 22:07.820
一个制补串

22:07.820 --> 22:10.820
然后data为low

22:10.820 --> 22:11.820
一定是这种格式

22:11.820 --> 22:12.820
这是错误

22:12.820 --> 22:13.820
好

22:13.820 --> 22:14.820
来看一下

22:14.820 --> 22:15.820
data为low

22:15.820 --> 22:16.820
没问题

22:16.820 --> 22:18.820
我们再来

22:18.820 --> 22:19.820
还有两种情况

22:19.820 --> 22:20.820
一种是正确的情况

22:20.820 --> 22:21.820
response data

22:21.820 --> 22:23.820
这种情况

22:23.820 --> 22:25.820
就是返回的是一个

22:25.820 --> 22:27.820
就是正确的数据

22:27.820 --> 22:29.820
那么arrow一定是一个空制补串

22:29.820 --> 22:31.820
一定是一个空制补串

22:31.820 --> 22:33.820
然后data

22:33.820 --> 22:34.820
data是啥呢

22:34.820 --> 22:36.820
data有可能

22:36.820 --> 22:37.820
它有可能是low

22:37.820 --> 22:38.820
也可能是别的

22:38.820 --> 22:40.820
它可能是任何数据

22:40.820 --> 22:42.820
因此这里我们可以把它用成一个范形

22:42.820 --> 22:44.820
data

22:44.820 --> 22:46.820
是一个范形t

22:46.820 --> 22:47.820
是一个范形t

22:47.820 --> 22:49.820
这里写的啥

22:49.820 --> 22:50.820
data就是啥

22:50.820 --> 22:51.820
我们把它做成一个通用的

22:51.820 --> 22:54.820
来描述服务器的返回结果

22:54.820 --> 22:56.820
这样方便我们后边写结构的

22:56.820 --> 22:58.820
写函数的时候进行处理

22:58.820 --> 23:00.820
还有一种是pagedata

23:00.820 --> 23:02.820
Iresponse

23:02.820 --> 23:03.820
pagedata

23:03.820 --> 23:05.820
那么这个时候

23:05.820 --> 23:06.820
它返回的是什么

23:06.820 --> 23:08.820
arrow为空制补串

23:08.820 --> 23:11.820
然后还有一个偷偷为number

23:11.820 --> 23:13.820
偷偷为number

23:13.820 --> 23:14.820
还有一个是啥呢

23:14.820 --> 23:15.820
还有一个是data

23:15.820 --> 23:18.820
data是一个数据

23:18.820 --> 23:19.820
你看

23:19.820 --> 23:21.820
我们把这三服务器返回的

23:21.820 --> 23:22.820
这三种情况

23:22.820 --> 23:24.820
全部给它描述出来

23:24.820 --> 23:26.820
描述出来的好处在什么呢

23:26.820 --> 23:28.820
我们来这边来看

23:28.820 --> 23:30.820
这边再来看一下

23:30.820 --> 23:32.820
当我们有了这样的类型描述之后

23:32.820 --> 23:34.820
因为现在我讲的比较快了

23:34.820 --> 23:36.820
前面已经学习了很多知识了

23:36.820 --> 23:38.820
这一块讲的稍微快一点

23:38.820 --> 23:40.820
到了这边

23:40.820 --> 23:42.820
当处理完成之后

23:42.820 --> 23:44.820
你看一下这个add函数

23:44.820 --> 23:45.820
它要返回的是啥呢

23:45.820 --> 23:47.820
它无非又是两种情况

23:47.820 --> 23:48.820
有错误和没错误为

23:48.820 --> 23:50.820
无非就是这两种情况

23:50.820 --> 23:52.820
这两种情况我们来

23:52.820 --> 23:54.820
用一个联合类型来处理吧

23:54.820 --> 23:55.820
联合类型

23:55.820 --> 23:57.820
其中一种情况是

23:57.820 --> 24:00.820
Iresponse

24:00.820 --> 24:02.820
就是正常的情况

24:02.820 --> 24:03.820
正常的情况

24:03.820 --> 24:06.820
浮气返回的数据是imv

24:06.820 --> 24:08.820
这是浮气返回的数据

24:08.820 --> 24:09.820
你看一下

24:09.820 --> 24:11.820
把这个imv传进去

24:11.820 --> 24:13.820
这样的一个类型得到了是啥呢

24:13.820 --> 24:15.820
得到了是不是这个东西

24:15.820 --> 24:17.820
这里就变成mv了

24:17.820 --> 24:18.820
对不对

24:18.820 --> 24:19.820
没问题吧

24:19.820 --> 24:21.820
我们把这个传进去

24:21.820 --> 24:23.820
另外一种情况

24:23.820 --> 24:25.820
另外一种情况是错误的情况

24:25.820 --> 24:28.820
我们用Iresponse

24:28.820 --> 24:30.820
有这么两种情况

24:30.820 --> 24:31.820
有这么两种情况

24:31.820 --> 24:34.820
这是add这个函数反复的结果

24:34.820 --> 24:35.820
当你这样子写了之后

24:35.820 --> 24:36.820
我们再来看

24:36.820 --> 24:37.820
这边

24:37.820 --> 24:38.820
这个data

24:38.820 --> 24:41.820
就能获得完整的类型检查了

24:41.820 --> 24:42.820
它要么是错误的

24:42.820 --> 24:44.820
要么是有数据的

24:44.820 --> 24:45.820
那么我们来看一下

24:45.820 --> 24:46.820
这个data里面

24:46.820 --> 24:48.820
他说

24:48.820 --> 24:49.820
两个类型一合并的话

24:49.820 --> 24:50.820
他就认为

24:50.820 --> 24:52.820
这个data有可能是imv

24:52.820 --> 24:53.820
有可能是mv

24:53.820 --> 24:54.820
错误的时候就是mv

24:54.820 --> 24:55.820
对吧

24:55.820 --> 24:56.820
arrow

24:56.820 --> 24:57.820
它只能是一个支付串

24:57.820 --> 24:58.820
只能是一个支付串

24:58.820 --> 24:59.820
我们就可以判断

24:59.820 --> 25:00.820
arrow有没有值

25:00.820 --> 25:01.820
有值的话怎么样怎么样

25:01.820 --> 25:03.820
没有值的话怎么样怎么样

25:03.820 --> 25:04.820
我们就可以判断了

25:04.820 --> 25:05.820
比方说我可以判断

25:05.820 --> 25:06.820
data

25:06.820 --> 25:07.820
arrow有没有值

25:07.820 --> 25:08.820
如果有值的话

25:08.820 --> 25:10.820
那么这个data里面

25:10.820 --> 25:11.820
data里面

25:11.820 --> 25:13.820
那么它就是

25:13.820 --> 25:15.820
这个data

25:15.820 --> 25:17.820
它里面的数据

25:17.820 --> 25:19.820
它里面传过来的数据是哪

25:19.820 --> 25:20.820
如果

25:20.820 --> 25:22.820
或者我们在这里输出有错误

25:22.820 --> 25:23.820
直接输出错误

25:23.820 --> 25:25.820
data点

25:25.820 --> 25:26.820
data点

25:26.820 --> 25:28.820
如果没有错误的话

25:28.820 --> 25:30.820
我们就输出一些电影的信息

25:30.820 --> 25:31.820
就可以去做了

25:31.820 --> 25:32.820
对吧

25:32.820 --> 25:33.820
当然我们也可以通过

25:33.820 --> 25:34.820
这个来排断

25:34.820 --> 25:36.820
判断data点data

25:36.820 --> 25:38.820
这个是整个消息体

25:38.820 --> 25:40.820
或者我们这里用这个

25:40.820 --> 25:42.820
表示整个消息体

25:42.820 --> 25:43.820
整个消息体里边

25:43.820 --> 25:45.820
有错误消息

25:45.820 --> 25:48.820
有具体的数据

25:48.820 --> 25:49.820
好

25:49.820 --> 25:50.820
OK

25:50.820 --> 25:51.820
那么这里我们就搞定了

25:51.820 --> 25:52.820
这个点事了

25:52.820 --> 25:53.820
好

25:53.820 --> 25:54.820
这就是

25:54.820 --> 25:55.820
在接口里边

25:55.820 --> 25:56.820
在arrow请求的时候

25:56.820 --> 25:57.820
我们也可以再加上

25:57.820 --> 25:59.820
一些类型的元素

25:59.820 --> 26:00.820
好

26:00.820 --> 26:01.820
咱们继续写

26:01.820 --> 26:02.820
写了一个添加

26:02.820 --> 26:03.820
还没有完呢

26:03.820 --> 26:04.820
还要写啥

26:04.820 --> 26:06.820
还要写修改

26:06.820 --> 26:07.820
edits

26:07.820 --> 26:08.820
修改

26:08.820 --> 26:09.820
修改的时候

26:09.820 --> 26:10.820
你要传一个id进来

26:10.820 --> 26:12.820
传一个id

26:12.820 --> 26:13.820
支付串

26:13.820 --> 26:14.820
还要传一个什么呢

26:14.820 --> 26:15.820
move对象进来

26:15.820 --> 26:17.820
还要传一个move对象

26:17.820 --> 26:18.820
move

26:18.820 --> 26:20.820
我们可以重复的去使用

26:20.820 --> 26:21.820
这个类型

26:21.820 --> 26:22.820
好

26:22.820 --> 26:23.820
修改过后

26:23.820 --> 26:24.820
返回的是啥呢

26:24.820 --> 26:25.820
修改过后

26:25.820 --> 26:27.820
返回的也有可能是错误

26:27.820 --> 26:28.820
也有可能

26:28.820 --> 26:29.820
我们看看之前

26:29.820 --> 26:30.820
服务器返回的是啥

26:30.820 --> 26:32.820
服务器这边

26:32.820 --> 26:35.820
move roads

26:35.820 --> 26:36.820
move roads

26:36.820 --> 26:37.820
看一下

26:37.820 --> 26:38.820
修改的时候

26:38.820 --> 26:39.820
返回的是啥

26:39.820 --> 26:40.820
修改的时候

26:40.820 --> 26:41.820
有可能有错误

26:41.820 --> 26:43.820
有可能有正确

26:43.820 --> 26:45.820
正确的话返回的是一个true

26:45.820 --> 26:46.820
返回的是一个true

26:46.820 --> 26:47.820
所以说这里边

26:47.820 --> 26:49.820
我们这里约束的话

26:49.820 --> 26:51.820
跟服务器保持一致

26:51.820 --> 26:53.820
I raise bounce data

26:54.820 --> 26:56.820
这种情况

26:56.820 --> 26:57.820
另一种情况

26:57.820 --> 26:58.820
就是有错误的情况

26:58.820 --> 27:00.820
I raise bounce error

27:00.820 --> 27:02.820
这两个情况

27:02.820 --> 27:03.820
好

27:03.820 --> 27:06.820
那么修改是一样的

27:06.820 --> 27:08.820
const

27:09.820 --> 27:10.820
awaits

27:10.820 --> 27:12.820
这里代码没什么好说的

27:12.820 --> 27:13.820
exus

27:13.820 --> 27:14.820
put

27:14.820 --> 27:15.820
put

27:15.820 --> 27:16.820
api

27:16.820 --> 27:17.820
move

27:17.820 --> 27:18.820
把id传进去

27:18.820 --> 27:20.820
凭接上id

27:20.820 --> 27:21.820
把id传过去

27:21.820 --> 27:23.820
然后把move传过去

27:23.820 --> 27:25.820
得到响应结果

27:26.820 --> 27:28.820
这里也搞定了

27:28.820 --> 27:29.820
这里也搞定了

27:29.820 --> 27:31.820
下面

27:31.820 --> 27:32.820
还有啥呢

27:32.820 --> 27:33.820
还有三除对吧

27:33.820 --> 27:35.820
dn

27:35.820 --> 27:37.820
dn的话只需要一个id就行了

27:37.820 --> 27:39.820
只需要一个id

27:39.820 --> 27:41.820
dn的时候有可能有错误

27:41.820 --> 27:43.820
有可能

27:43.820 --> 27:45.820
就是直接正确的

27:45.820 --> 27:46.820
我记得好像当时

27:46.820 --> 27:47.820
做三除的时候

27:47.820 --> 27:49.820
没有其他错误的情况

27:49.820 --> 27:51.820
正确的时候直接是一个错误

27:51.820 --> 27:53.820
做三除的时候

27:53.820 --> 27:54.820
再看一下

27:54.820 --> 27:55.820
做三除的时候

27:55.820 --> 27:57.820
正确的话就直接是一个错误

27:57.820 --> 27:58.820
所以说这边

27:58.820 --> 27:59.820
我们这里

27:59.820 --> 28:01.820
使用dn

28:01.820 --> 28:03.820
把id传过去

28:03.820 --> 28:05.820
你去搞定就行了

28:07.820 --> 28:09.820
这是关于三除

28:09.820 --> 28:10.820
也是一样的

28:10.820 --> 28:11.820
最后

28:11.820 --> 28:12.820
还有两个函数

28:12.820 --> 28:14.820
一个是根据id

28:14.820 --> 28:16.820
来得到一个

28:16.820 --> 28:18.820
根据id来得到一个电影对象

28:18.820 --> 28:21.820
get movie by id

28:21.820 --> 28:23.820
传一个id进来

28:23.820 --> 28:24.820
我给你返回的是一个啥呢

28:24.820 --> 28:27.820
返回的是一个电影对象

28:27.820 --> 28:28.820
返回的是一个电影对象

28:28.820 --> 28:31.820
也就是i response data

28:31.820 --> 28:32.820
i movie

28:32.820 --> 28:34.820
这是正常的情况

28:34.820 --> 28:36.820
不正常的情况是有错误

28:36.820 --> 28:37.820
有错误

28:37.820 --> 28:38.820
我们看一下当时

28:38.820 --> 28:39.820
我们写的代码

28:39.820 --> 28:40.820
得到根据id

28:40.820 --> 28:42.820
得到一个电影的话

28:42.820 --> 28:44.820
是有可能会有错误的对吧

28:44.820 --> 28:46.820
看一下有没有可能有错误

28:46.820 --> 28:48.820
有没有可能有错误

28:50.820 --> 28:52.820
这个地方是没有错误的

28:52.820 --> 28:53.820
是不会有错误的

28:53.820 --> 28:54.820
它要么是movie

28:54.820 --> 28:55.820
要么是now

28:55.820 --> 28:56.820
所以说这里

28:56.820 --> 28:57.820
我们返回的结果

28:57.820 --> 28:59.820
就是服务器保持一致

28:59.820 --> 29:00.820
这里的内形

29:00.820 --> 29:01.820
要么是movie

29:01.820 --> 29:03.820
要么是now

29:03.820 --> 29:05.820
就是这里不管怎么去绕

29:05.820 --> 29:07.820
你要能绕的过来

29:07.820 --> 29:08.820
这是一个ebo

29:08.820 --> 29:09.820
所以说它是promise

29:09.820 --> 29:11.820
ebo完成之后返回的是啥呢

29:11.820 --> 29:12.820
返回的是一个

29:12.820 --> 29:13.820
正常的响应结果

29:13.820 --> 29:15.820
这个响应结果里边

29:15.820 --> 29:17.820
具体的数据是什么内形的

29:17.820 --> 29:18.820
有可能是move

29:18.820 --> 29:19.820
有可能是now

29:19.820 --> 29:21.820
要么绕清楚

29:21.820 --> 29:23.820
这里边我们一样的方式

29:23.820 --> 29:24.820
一样的方式

29:24.820 --> 29:26.820
只不过把这里改成get

29:26.820 --> 29:27.820
get

29:27.820 --> 29:29.820
这是根据id来得到

29:29.820 --> 29:31.820
好 最后一个查询

29:31.820 --> 29:33.820
查询

29:33.820 --> 29:36.820
get movies

29:36.820 --> 29:37.820
查询

29:37.820 --> 29:38.820
查询的话

29:38.820 --> 29:40.820
你是不是要给我一些查询条件

29:40.820 --> 29:42.820
是不是要给我一些查询条件

29:42.820 --> 29:43.820
好 查询条件

29:43.820 --> 29:46.820
我们也可以把它做成公共的内形

29:46.820 --> 29:47.820
查询条件

29:47.820 --> 29:49.820
把它做成一个公共的内形

29:49.820 --> 29:51.820
好 导出一个接口

29:51.820 --> 29:56.820
i search results

29:56.820 --> 29:58.820
跟之前的内形是一样的

29:58.820 --> 30:00.820
跟之前的内形是一样的

30:00.820 --> 30:01.820
在这儿

30:01.820 --> 30:02.820
我们看一下

30:02.820 --> 30:03.820
之前是在哪写的

30:03.820 --> 30:05.820
之前服务端的内形

30:05.820 --> 30:07.820
这是查询条件

30:07.820 --> 30:09.820
之前写的是一个内

30:09.820 --> 30:10.820
写的是一个内

30:10.820 --> 30:11.820
那这里我们也写个内容

30:11.820 --> 30:12.820
不写写内

30:12.820 --> 30:14.820
我们写个同样的名字

30:14.820 --> 30:19.820
search condition

30:19.820 --> 30:21.820
这里面有哪些呢

30:21.820 --> 30:22.820
一个是可选的配级

30:22.820 --> 30:24.820
它是个数字

30:24.820 --> 30:25.820
可选的配级

30:25.820 --> 30:27.820
然后是limit

30:27.820 --> 30:30.820
可选的也是一个数字

30:30.820 --> 30:32.820
还有啥内形呢

30:32.820 --> 30:34.820
还有器

30:34.820 --> 30:36.820
可选的

30:36.820 --> 30:40.820
是一个字母串

30:40.820 --> 30:42.820
这是查询条件

30:42.820 --> 30:44.820
那么你要做查询的时候

30:44.820 --> 30:45.820
查询电影的时候

30:45.820 --> 30:47.820
是不是要给我一个查询条件

30:47.820 --> 30:48.820
肯定性

30:48.820 --> 30:49.820
给我一个查询条件

30:49.820 --> 30:53.820
i search

30:53.820 --> 30:54.820
给我这个查询条件

30:54.820 --> 30:55.820
那么我这里呢

30:55.820 --> 30:57.820
就把这个条件作为地址

30:57.820 --> 30:58.820
来参数

30:58.820 --> 31:00.820
去请求服务器

31:00.820 --> 31:01.820
exus

31:01.820 --> 31:02.820
地址

31:02.820 --> 31:03.820
请求这个地址

31:03.820 --> 31:05.820
movie

31:05.820 --> 31:07.820
传递参数

31:07.820 --> 31:08.820
参数在exus里面

31:08.820 --> 31:09.820
这样配置啊

31:09.820 --> 31:10.820
这样配置参数

31:10.820 --> 31:11.820
你看exus里面

31:11.820 --> 31:13.820
它又配置的是parals

31:13.820 --> 31:14.820
就这个东西

31:14.820 --> 31:16.820
它不同意就很烦

31:16.820 --> 31:17.820
没关系啊

31:17.820 --> 31:18.820
我们直接把这个

31:18.820 --> 31:20.820
condition传过来

31:20.820 --> 31:22.820
把这个参数传过去

31:22.820 --> 31:23.820
来请求服务器

31:23.820 --> 31:26.820
把得到服务器的响应结果

31:26.820 --> 31:28.820
接下来是一样的

31:28.820 --> 31:34.600
这里

31:34.600 --> 31:35.600
这里

31:35.600 --> 31:36.600
把它返回

31:36.600 --> 31:37.600
做完事了

31:37.600 --> 31:38.600
不过这里

31:38.600 --> 31:39.600
我们还要去设置一下

31:39.600 --> 31:40.600
它的响应

31:40.600 --> 31:41.600
返回类型

31:41.600 --> 31:42.600
返回类型是 promise

31:42.600 --> 31:44.600
这个毫无疑问

31:44.600 --> 31:45.600
那么这个时候

31:45.600 --> 31:47.600
是不是一个 page data

31:47.600 --> 31:48.600
对吧

31:48.600 --> 31:49.600
有一个分页的数据

31:49.600 --> 31:50.600
因此我这里

31:50.600 --> 31:51.600
给它写上

31:51.600 --> 31:52.600
写上啥呢

31:52.600 --> 31:57.600
I response page data

31:57.600 --> 31:58.600
那么每一个数据

31:58.600 --> 31:59.600
是啥类型

31:59.600 --> 32:00.600
每一个数据

32:00.600 --> 32:01.600
是 i move 类型

32:01.600 --> 32:02.600
我们把这些类型

32:02.600 --> 32:04.600
给它约束好

32:04.600 --> 32:05.600
约束好的好处

32:05.600 --> 32:06.600
好处在于

32:06.600 --> 32:07.600
这个data

32:07.600 --> 32:08.600
本来是 any 类型

32:08.600 --> 32:09.600
但是这样子

32:09.600 --> 32:10.600
约束过后

32:10.600 --> 32:11.600
我们到时候

32:11.600 --> 32:12.600
使用起来就很舒服了

32:12.600 --> 32:13.600
你被看着

32:13.600 --> 32:14.600
写类型的时候麻烦

32:14.600 --> 32:15.600
你写熟了

32:15.600 --> 32:16.600
也就那么回事

32:17.600 --> 32:19.600
我们来做一下

32:19.600 --> 32:20.600
比方说

32:20.600 --> 32:22.600
我们这里写一个

32:22.600 --> 32:24.600
get the movies

32:24.600 --> 32:25.600
要传一个条件

32:25.600 --> 32:26.600
你看现在就不能乱写了

32:26.600 --> 32:27.600
要传个条件

32:27.600 --> 32:29.600
条件的话

32:29.600 --> 32:30.600
比方说

32:30.600 --> 32:31.600
啥都不传

32:31.600 --> 32:32.600
啥都不传一个默认值

32:32.600 --> 32:33.600
对吧

32:33.600 --> 32:34.600
完成之后

32:34.600 --> 32:35.600
我们得到所有的电影

32:35.600 --> 32:37.600
看一下

32:37.600 --> 32:38.600
我们指着它看一下

32:39.600 --> 32:40.600
它就能

32:40.600 --> 32:41.600
它就能清楚的知道

32:41.600 --> 32:42.600
它是一个

32:42.600 --> 32:44.600
浮现的响应结果

32:44.600 --> 32:45.600
这个响应结果

32:45.600 --> 32:46.600
里面有哪些东西呢

32:46.600 --> 32:47.600
有data

32:47.600 --> 32:48.600
有toto

32:48.600 --> 32:49.600
有error

32:49.600 --> 32:50.600
你看这些信息

32:50.600 --> 32:51.600
是不是很清楚了

32:51.600 --> 32:52.600
这些信息就非常清楚了

32:52.600 --> 32:53.600
好

32:53.600 --> 32:54.600
这里面

32:54.600 --> 32:55.600
我们得到data

32:55.600 --> 32:56.600
来进行循环

32:56.600 --> 32:57.600
循环

32:57.600 --> 32:58.600
你看一下data

32:58.600 --> 32:59.600
什么类型

32:59.600 --> 33:00.600
它类型

33:00.600 --> 33:01.600
imv的数组

33:01.600 --> 33:02.600
你看每一个地方

33:02.600 --> 33:03.600
都有类型推到了

33:03.600 --> 33:04.600
说一起

33:04.600 --> 33:06.600
虽然我们一开始

33:06.600 --> 33:07.600
做的事情

33:07.600 --> 33:08.600
有点麻烦

33:08.600 --> 33:09.600
但是后边呢

33:09.600 --> 33:10.600
我们用的就非常舒服

33:10.600 --> 33:11.600
name

33:11.600 --> 33:13.600
可能要输出电影

33:13.600 --> 33:14.600
电影的

33:14.600 --> 33:15.600
你看其他的东西

33:15.600 --> 33:16.600
都可以输出

33:16.600 --> 33:17.600
也都可以输出

33:17.600 --> 33:18.600
amma

33:18.600 --> 33:19.600
taps

33:19.600 --> 33:20.600
都可以输出

33:21.600 --> 33:22.600
我们输出看一下

33:22.600 --> 33:25.490
试一下吧

33:25.490 --> 33:26.490
你看

33:26.490 --> 33:27.490
这样的输出

33:27.490 --> 33:28.490
就输出出来了

33:28.490 --> 33:29.490
而且有完整的类型检查

33:29.490 --> 33:30.490
和电影型推到

33:30.490 --> 33:31.490
好

33:31.490 --> 33:32.490
比方说

33:32.490 --> 33:33.490
每下第二页

33:33.490 --> 33:34.490
可以一起看

33:34.490 --> 33:35.490
全是有类型检查的

33:35.490 --> 33:36.490
第二页

33:36.490 --> 33:37.490
好

33:37.490 --> 33:38.490
第二页

33:38.490 --> 33:39.490
好

33:39.490 --> 33:40.490
我们先把这个

33:40.490 --> 33:41.490
阿加克斯

33:41.490 --> 33:43.490
这个请求接口

33:43.490 --> 33:44.490
先搞定

33:44.490 --> 33:45.490
先不说什么

33:45.490 --> 33:46.490
全家统治类的东西

33:46.490 --> 33:48.490
先搞定最技术的功能

33:48.490 --> 33:49.490
阿加克斯接口

33:49.490 --> 33:50.490
搞定了之后

33:50.490 --> 33:51.490
我们再说剩下的事情

33:51.490 --> 33:52.490
好

33:52.490 --> 33:53.490
搞定了之后

33:53.490 --> 33:54.490
我们接下来

33:54.490 --> 33:55.490
要做的事情

33:55.490 --> 33:56.490
就是要处理界面

33:56.490 --> 33:57.490
处理界面

33:57.490 --> 33:58.490
处理什么

33:58.490 --> 33:59.490
状态

33:59.490 --> 34:00.490
因为dux

34:00.490 --> 34:01.490
处理状态

34:01.490 --> 34:02.490
还用rotor

34:02.490 --> 34:03.490
来处理界面的跳转

34:03.490 --> 34:04.490
等等

34:04.490 --> 34:05.490
我们在做这些事情

34:05.490 --> 34:06.490
之前呢

34:06.490 --> 34:07.490
我们已经做好了

34:07.490 --> 34:08.490
这个时候

34:08.490 --> 34:09.490
我们先把这些界面的

34:09.490 --> 34:10.490
乱七八糟的东西

34:10.490 --> 34:11.490
给它删除掉

34:11.490 --> 34:12.490
没有用的

34:12.490 --> 34:13.490
就给它删除掉

34:13.490 --> 34:14.490
像这个service worker

34:14.490 --> 34:17.490
这是PWA里面的东西

34:17.490 --> 34:18.490
PWA里面的东西

34:18.490 --> 34:19.490
这个玩意

34:19.490 --> 34:21.490
大家有可能有些朋友

34:21.490 --> 34:22.490
没有接触的PWA

34:22.490 --> 34:23.490
那这个东西

34:23.490 --> 34:24.490
直接删掉就完了

34:24.490 --> 34:25.490
删掉

34:25.490 --> 34:26.490
删掉了

34:26.490 --> 34:27.490
在in这个手里边

34:27.490 --> 34:28.490
去掉

34:28.490 --> 34:29.490
去掉

34:29.490 --> 34:31.490
这个service worker去掉

34:31.490 --> 34:33.490
在工程清理一下

34:33.490 --> 34:34.490
太乱了

34:34.490 --> 34:35.490
东西太多了

34:35.490 --> 34:36.490
然后呢

34:36.490 --> 34:37.490
这个什么tests

34:37.490 --> 34:38.490
这个文件

34:38.490 --> 34:39.490
有些同学呢

34:39.490 --> 34:40.490
可能没有学过

34:40.490 --> 34:41.490
就是测试

34:41.490 --> 34:42.490
因此呢

34:42.490 --> 34:43.490
不要了

34:43.490 --> 34:44.490
不要了

34:44.490 --> 34:45.490
删掉

34:45.490 --> 34:46.490
然后css里边

34:46.490 --> 34:47.490
这个css

34:47.490 --> 34:48.490
我们暂时也不要了吧

34:48.490 --> 34:49.490
暂时也不要了

34:49.490 --> 34:50.490
然后这里面

34:50.490 --> 34:51.490
全部清理一下

34:51.490 --> 34:52.490
清理一下

34:52.490 --> 34:53.490
先拿起来

34:53.490 --> 34:54.490
把东西清理一下

34:54.490 --> 34:55.490
好

34:55.490 --> 34:56.490
然后这里边

34:56.490 --> 34:57.490
这里边

34:57.490 --> 34:59.490
我们先

34:59.490 --> 35:01.490
就输出一个hallowware的

35:01.490 --> 35:03.490
也为这个内密

35:03.490 --> 35:04.490
全部都没了

35:04.490 --> 35:05.490
全部去掉

35:05.490 --> 35:10.490
输出一个hallowware

35:10.490 --> 35:12.490
然后in这个手

35:12.490 --> 35:13.490
css

35:13.490 --> 35:14.490
这个保留吧

35:14.490 --> 35:15.490
这个保留

35:15.490 --> 35:18.490
其他的都没啥了

35:18.490 --> 35:19.490
这边

35:19.490 --> 35:21.490
这边没啥

35:21.490 --> 35:22.490
这边没啥

35:22.490 --> 35:23.490
我们把这个测试的代码

35:23.490 --> 35:24.490
全清除掉

35:24.490 --> 35:25.490
先清除掉

35:25.490 --> 35:26.490
保存一下

35:26.490 --> 35:27.490
保存一下

35:27.490 --> 35:29.490
把工程清理一下

35:29.490 --> 35:30.490
清理干净点

35:30.490 --> 35:31.490
这个logo不要了

35:31.490 --> 35:32.490
不要了

35:32.490 --> 35:33.490
看一下

35:34.490 --> 35:35.490
好

35:35.490 --> 35:36.490
我们先做成这个样子

35:36.490 --> 35:37.490
那么我们后边

35:37.490 --> 35:38.490
再来一个一个说

35:38.490 --> 35:39.490
具体怎么去完成

35:39.490 --> 35:41.490
先把阿迦克斯考虑

35:41.490 --> 35:42.490
好

35:42.490 --> 35:43.490
我们这几课就到这里了

35:43.490 --> 35:45.490
这一课做了什么事情

35:45.490 --> 35:46.490
清理一下工程

35:46.490 --> 35:47.490
然后实现了

35:47.490 --> 35:49.490
阿迦克斯的

35:49.490 --> 35:51.490
请求访问

35:51.490 --> 35:52.490
实现这么多功能

35:52.490 --> 35:53.490
我也后边开发了

35:53.490 --> 35:54.490
做准备

35:54.490 --> 35:55.490
好了

35:55.490 --> 35:56.490
这一课到这里了

35:56.490 --> 35:57.490
拜拜

