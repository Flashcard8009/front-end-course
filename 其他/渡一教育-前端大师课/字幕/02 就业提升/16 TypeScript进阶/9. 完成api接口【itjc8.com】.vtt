WEBVTT

00:01.000 --> 00:03.800
OK 大家好 我是对教育卫尾简单养世元金

00:04.600 --> 00:08.200
好了 那我们现在呢 把数据库这一块已经搞定了啊

00:08.200 --> 00:11.000
已经写好了这么一个movie service

00:11.000 --> 00:14.000
啊 当然如果你要做其他的 比方说用户啊

00:14.000 --> 00:17.200
做影院啊 一次去写这些函数就完事了啊

00:17.200 --> 00:20.000
去一次去建这些内写这些函数完事

00:20.600 --> 00:24.000
好 那么现在呢 就服务器端呢 我们就查最后东西了

00:24.000 --> 00:26.000
就是 API 接口啊

00:26.000 --> 00:30.600
我们通过 atdp 请求请求这些接口呢 来获得相应的信息

00:31.600 --> 00:35.400
好 这里呢 我们需要用选择一个服务器的

00:36.400 --> 00:41.400
啊 API 请求接口的一个框架啊 这里呢 有两种选择啊

00:41.400 --> 00:46.000
一种是使用 express 一种呢 是使用 ka 这两种呢

00:46.000 --> 00:49.000
都是目前比较流行的啊

00:50.000 --> 00:53.000
漏的介石端他的服务器框架啊

00:53.000 --> 00:57.600
这边呢 我们选择的是 express 因为我考虑到了大部分同学呢

00:57.600 --> 01:03.600
都可能之前学习的 express 啊 可能也有可能有些同学接触的是 ka

01:03.600 --> 01:06.600
啊 这个其实无所谓的 因为这两个东西都差不多

01:06.600 --> 01:11.800
嗯 如果你学习了 express 再去学习 ka 的话是非常非常简单的

01:11.800 --> 01:17.200
因为 ka 他这个东西就是 express 的原班人嘛做出来的

01:17.200 --> 01:20.000
而且呢他的核心理念并没有发生变化啊

01:20.000 --> 01:23.200
只是 ka 里面多了一个啊 就是支持异部

01:24.000 --> 01:31.820
好 我们这里呢就使用 express 啊 ok啊 我们这里先安装啊先安装啊

01:31.820 --> 01:36.820
清空一下啊安装 express 啊 ya add express

01:38.120 --> 01:42.820
好安装好了之后呢 由于这个玩意他是用介石写的啊

01:42.820 --> 01:46.820
他并没有内询 因此呢 我们还要去安装他的一个内询库

01:46.820 --> 01:54.820
我们安装一样 add 这个横杠地啊 内询库 types 嗯 这里面写上 express

01:54.820 --> 02:01.820
好 我们安装这个内询库啊安装之后呢 express 这个框架呢 我就能得到内询检查了

02:01.820 --> 02:06.820
ok啊 我怎么安装完了好安装完了之后呢 我们这里在index 里边啊

02:06.820 --> 02:09.820
我们来书写一个简单的 express 代码

02:09.820 --> 02:17.820
首先呢 我们导入 express 啊 express from express啊导入进来

02:17.820 --> 02:23.820
导入进来的过后呢 我们就可以啊 通过 express 通过这么一个函数

02:23.820 --> 02:28.820
来创建 express 的一个实力啊 就是创建一个应用程序

02:28.820 --> 02:32.820
一个服务器的应用程序啊 我们来得到他啊

02:33.820 --> 02:37.820
跟以前的介石写法是一样的啊 并没有什么样的区别啊

02:37.820 --> 02:44.820
得到这么一个服务器对象得到他之后呢 我们就可以啊 使用什么呢 使用他里边的啊

02:45.820 --> 02:53.820
use 啊 use 来为 express 添加一些中间键 就是当请求发生的时候呢 他要进啊

02:53.820 --> 02:58.820
当我们匹配到一个地址的时候 他要怎么来处理啊 添加中间键 中间键的本质

02:58.820 --> 03:04.820
我们都是中间键的本质就是一个函数 对吧 就是一个处理函数啊

03:04.820 --> 03:09.820
像这些呢 都是以前咱们学习 express 的知识了啊 我们随便写一下吧啊 随便写一下

03:10.820 --> 03:16.820
好 这里呢 比方说我当我请求啊 当我请求这个接口的时候 apm movie

03:16.820 --> 03:22.820
当我请求这个地址的时候呢 我希望经过一定的处理啊 经过什么处理呢 你看后边他告诉你了

03:22.820 --> 03:31.820
你要书写啥呢 后边书写的是一个数组 这个数组呢 就是类型是 request handler的数组啊

03:31.820 --> 03:38.820
现在有ts 内询检查之后呢 我就可以清楚的知道我这里应该写什么样的参数 什么参数呢 你可以

03:38.820 --> 03:44.820
这里一次写啊 他是一个 他是一个圣语参数 你看面 他加了三个点 是一个圣语参数

03:44.820 --> 03:50.820
这里可以一次写一些处理程序 每个处理程序的内询呢 就是request handler

03:50.820 --> 03:56.820
好 如果你忘记了这里应该写什么样的格式的函数 其实你可以点击着f12 转到定义

03:56.820 --> 04:01.820
他会提示你 你这里写的是啥呢 写的就是这里request handler

04:01.820 --> 04:11.820
好 我们再按f12 转到定义 他就会告诉你 这个handler他应该有哪些参数呢 可以有request 第一个参数

04:11.820 --> 04:20.820
response 第二个参数 下一个中间键next 对吧 好 那么我们可以用这种格式来写书写这个函数

04:20.820 --> 04:29.820
当然 根据我们ts里面的类型兼容性 我们可以使用压子编形法 就是对函数匹配这一块呢

04:29.820 --> 04:36.820
你要用到多少 写多少 比方说我只需要请求对象和响应对象 那么我只需要这两个参数够了

04:36.820 --> 04:41.820
第三个参数我可以不写 是可以不写的 没问题 好 那么这里呢 我们就可以用一个

04:41.820 --> 04:48.820
比方说箭头函数吧 req req 让他自动帮我们推断出来 这两个参数的类型 你看指着他

04:48.820 --> 04:56.820
他就是一个request的类型 res 就是一个response的类型 有了类型推倒之后呢 我们后边在这里边写单码就非常非常的

04:56.820 --> 05:05.820
轻松了 你看我要得到一个就是请求过来的query 就是请求过来参数 你看他有智能提示的

05:05.820 --> 05:12.820
如果要得到请求过来的params 也有智能提示的 像这些以前的写法呢 以前没有智能提示

05:12.820 --> 05:19.820
但是现在我们拥有了 因为我们现在用的是ts 好 这里呢 我们做一个简单的测试吧

05:19.820 --> 05:26.820
就叫send 直接发送 直接响应一个结果 响应一个结果 比方说Hello

05:26.820 --> 05:36.820
好 我们来测试一下 测试一下 然后呢 我们这里让他监听 listen 监听一个端口 比方说监听

05:37.820 --> 05:42.820
三千 比方三千端端口 好 那么咱们来测试一下啊

05:45.820 --> 05:54.820
啊 运行出来 好 运行出来之后呢 我们打开浏览器啊 来测试一下这个请求三千端口 请求这个地址能不能得到一个Hello

05:54.820 --> 05:56.820
好 咱们这里打开浏览器

05:57.820 --> 06:14.820
这里我们输入 localhost 3000 然后 api movie 回车啊 好 那可以看到 咱们请求的结果呢 得到Hello啊 这么一个支付串 说明咱们服务器这里呢 已经简单的一个服务器了 就已经搭建完成了

06:15.820 --> 06:25.820
好 那么现在呢 我们要做的是做什么呢 就是当他请求这个接口的时候 根据不同的请求方法 比方说get请求 比方说put请求

06:26.820 --> 06:31.820
poster请求等等啊 根据不同的请求方法来去做不同的处理

06:32.820 --> 06:38.820
那么这里呢 我们就可以使用 express 的什么东西呢 路由对吧 我们可以使用 express 的路由

06:38.820 --> 06:46.820
好 这里我在 src 目楼下边新建一个文件夹啊 大家以前应该也是这样做的吧 对吧 建立这么个roads 文件夹

06:47.820 --> 06:53.820
这个文件夹里边每一个文件就是一个路由配置啊 就是一个路由啊 我们又见了新建一个文件啊

06:53.820 --> 07:01.820
新建一个文件 比方说我们这里写个movie road 写这么一个文件

07:01.820 --> 07:06.820
好 写好这个文件之后呢 我们在这个文件里边去建立一个路由啊 建立一个路由

07:07.820 --> 07:14.820
比方说我们以前扎写的啊 这里导入一个press 从这里啊 express 导入进来

07:15.820 --> 07:22.820
导入进来过后呢 这个里边还有个函数啊 express 里边有个函数叫做rotor 你看现在有智能提示你就不会写错了

07:23.820 --> 07:33.820
有这么一个函数 这个函数呢他返回的是一个啥呢 返回的是一个rotor对象啊 就是一个路由对象啊 返回的是一个rotor对象一个路由对象

07:34.820 --> 07:37.820
好 那么这里我们写上写上rotor 这么一个路由

07:38.820 --> 07:46.820
好 然后呢 我们对这个路由进行配置啊 比方说我们要这个路由呢 有有一个getter方法啊 表示当我们使用getter请求的时候

07:47.820 --> 07:53.820
当我们使用getter请求请求这个地址的时候啊 基地址来请求这个地址的时候

07:54.820 --> 08:03.820
我们运行一个处理函数啊 你看这里他提示你还你要写的函数呢 还是request handler 还是我们之前的格式的函数

08:04.820 --> 08:09.820
好 我们这里得到啊 你再输写一代吧 好 这里呢我们直接响应啊 直接响应

08:10.820 --> 08:14.820
这是一个getter请求啊 这是一个getter请求

08:15.820 --> 08:18.820
好 我们再来啊 再写一个rotor post

08:19.820 --> 08:26.820
当我们用post请求的时候呢 我们做另外的处理啊 我们先把个格式写好啊 这里我们输写 send

08:27.820 --> 08:33.820
这是个post请求啊 这是个post请求啊 然后呢我们再继续写啊

08:34.820 --> 08:36.820
把这个几个写好啊

08:37.820 --> 08:42.820
rotor post请求呢 我们一般是做修改啊 一般用这个请求方法做修改

08:43.820 --> 08:46.820
但是不是一定的啊 就看你自己 我们通常会这样做

08:47.820 --> 08:49.820
啊 这是个post请求啊

08:50.820 --> 08:52.820
这是个post请求

08:53.820 --> 08:58.820
好 我们先把这些东西写好 然后还有啥呢 嗯 修改还有删除对吧

08:59.820 --> 09:08.820
删除dnet 好 删除 删除你如果你请求这个地址的话 那么我们输出啊 你是这是一个删除请求

09:10.820 --> 09:12.820
Rest send

09:13.820 --> 09:14.820
dnet请求

09:15.820 --> 09:16.820
dnet请求

09:17.820 --> 09:25.820
好 那么我们写好了这么四个请求的配置 最后呢 我们把这个路由导出 export default

09:26.820 --> 09:34.820
导出这个rotor啊 导出这个路由啊 把导出好 导出之后呢 我们到这边啊 都是以前的知识 没什么好讲的

09:35.820 --> 09:43.820
到了这边 我们去把这个导入啊 把这个导入就是movie rotor from movie

09:44.820 --> 09:54.820
对不对啊 应该是roads movie rotor啊 wrote好 我们把导入进来过后呢 我们在这里中间建这一块啊

09:55.820 --> 10:01.820
当我们去请求这个地址的时候 当我们去请求他的时候 我可以把这个中间建复制过去

10:02.820 --> 10:08.820
那也就是说 我请求这个地址呢 让这个中间建来进行处来进行处理 让这个路由来进行处理

10:09.820 --> 10:16.820
好 我们来试一下啊 保存 重新保存试一下 保存之后呢 我们这里再刷新啊 你看得到的是get的型球

10:17.820 --> 10:20.820
在浏览器里边非常容易 非常容易发送一个get的型球

10:21.820 --> 10:30.820
但是如果来发送其他请求的话 我们需要使用一个工具 这个工具叫做postman 应该大家都知道这个工具对吧 我们测试的时候啊

10:31.820 --> 10:42.820
使用postman进行测试测试这个接口 我们这里打开postman啊 如果没有的同学呢 可以去网上下载一个啊 非常非常简单啊 就是用来测试接口的

10:43.820 --> 10:51.820
我这里呢 打找到postman 安装在哪呢 我看一下啊 postman啊这个啊 打开它

10:53.820 --> 11:01.820
有的同学呢 喜欢把它安装成一个浏览 谷歌浏览器的插件也没问题啊 也可以 他本身也可以作为谷歌浏览器的一个插件

11:02.820 --> 11:03.820
好 稍微等一下啊

11:05.820 --> 11:10.820
然后呢 这里面呢 为了以后方便啊 为了以后方便我这里呢

11:10.820 --> 11:15.820
做这么一个处理 就是我在这里呢 新建一个啊 新建一个工程

11:16.820 --> 11:19.820
就是给他取个名字叫做movie system

11:20.820 --> 11:30.820
我们创建了每个工程啊 创建了工程之后呢 我那个工程里边去添加一些啊 添加一些接口的测试啊 右键啊 添加一些

11:31.820 --> 11:36.820
其实我们这里直接直接写完 写了过后保存一下就行了 对吧 直接写了保存一下就行了

11:36.820 --> 11:39.820
我这看一下啊 我有一段时间没用过这个玩意啊

11:40.820 --> 11:47.820
add 啊add request 添加一个琴球啊 这里添加一个好 给他添加取个名字啊 比方说

11:48.820 --> 11:53.820
get 啊 就是获取单个啊 获取单个

11:55.820 --> 12:03.820
电影啊 获取单个电影啊 给他一个描述啊 保存一下啊 这里你看多了这么一个琴球了啊 多了这么一个琴球了

12:03.820 --> 12:06.820
啊 我看一下这个字体能不能放大一点

12:09.820 --> 12:16.820
可以放大一点 这样看得清楚一点啊 好 这里获取单个电影 我们请求哪个地址呢 我们就请求

12:17.820 --> 12:26.820
localhost 3000然后api 写杠movie 请求这个地址 我们点send啊 发送请求

12:27.820 --> 12:31.820
你看得到的结果啊 是个get请求

12:32.820 --> 12:37.820
好 那么get请求呢 我们现在把他的功能完成啊 得到单个电影

12:38.820 --> 12:44.820
现在我们比方说啊 这个请求我们是要得到单个电影 那么得到单个电影的话 是不是要告诉他一个id

12:45.820 --> 12:47.820
对吧 我要把一个电影的id来告诉他

12:48.820 --> 12:54.820
所以说呢 这里的请求呢 我们可以让他通过地址栏参数把id传过来

12:54.820 --> 12:58.820
这个地址栏参数呢 有两种传法啊 大家应该都清楚

12:59.820 --> 13:05.820
地址栏参数里边有两种传法 比方说他可以用这种地址来进行传递啊 比方说localhost

13:06.820 --> 13:14.820
3000然后api movie 然后呢 通过这种方式 把id放到这 把id放到这

13:15.820 --> 13:21.820
这是这种传递参数的方式 传递数据的方式 这种传递数据的方式呢 我用中文的话才真不好解释

13:21.820 --> 13:28.820
这个东西叫啥 这个应该叫真不好解释 但是英文里边使用的是这个东西来表示的

13:29.820 --> 13:31.820
就这个部分呢 是放到哪呢 放到这里边了

13:32.820 --> 13:35.820
好 这是这种方式 另一种方式呢 是使用这种方式来传递

13:36.820 --> 13:41.820
api movie 这里用温耗的方式来进行传递

13:42.820 --> 13:46.820
用这种方式来进行传递 这种方式呢 参数是放到哪呢 参数呢叫做query

13:47.820 --> 13:49.820
这是两种方式啊 这是两种方式

13:50.820 --> 13:56.820
好了 但是有的时候呢 有一些框架呢 他并没有严格区分这两个单词啊 有的时候容易搞混淆

13:57.820 --> 14:00.820
但是呢 大家心里面要知道啊 这是两种参数传递的方式

14:01.820 --> 14:05.820
我这里呢 打算使用第1种啊 因为一会我们查询的时候想要使用第2种

14:06.820 --> 14:11.820
所以说我们把区分一下啊 我这里打算使用第1种 第1种怎么做呢 非常简单啊

14:12.820 --> 14:16.820
我们表示你在这个请求地址基础上 在这个请求的地址的基础上

14:16.820 --> 14:19.820
后边呢 有一个参数 用帽号来表示参数

14:20.820 --> 14:23.820
这个参数的名字呢 叫做id啊 随便给他取个名字

14:24.820 --> 14:28.820
好 那么到时候呢 他这样子请求过后 这样子请求过后

14:29.820 --> 14:33.820
他就会把啊 这个路由 他就会自动的把这一块的数据呢

14:34.820 --> 14:36.820
放到id地面啊 放到id地面

14:37.820 --> 14:40.820
好 那这里我们怎么获取呢 获取的方式很简单

14:40.820 --> 14:43.820
这个很简单 就是RigPyrons

14:44.820 --> 14:50.820
这个Pyrons是个对象 这个对象里面呢 就是对应到这里面的参数

14:51.820 --> 14:56.820
这里只有一个参数 id 那么我们通过这个对象来获取到他的id

14:57.820 --> 15:01.820
好 有同学发现了 已经发现了 这里他没有智能提示

15:02.820 --> 15:06.820
他没有智能提示 为什么呢 你看他的内想 nd

15:07.820 --> 15:13.820
他为什么要做成nd内想 他没办法 你真的是太难为他了 他没办法

15:14.820 --> 15:17.820
他并不知道你这里要写id 对吧 他怎么知道你这个地方要写id呢

15:18.820 --> 15:21.820
你可能写别的其他玩意儿 比如说我们这里可以写movieid

15:22.820 --> 15:26.820
对吧 他并不知道你要写s啊 所以说他做这个内想的时候 没有办法 只能用nd

15:27.820 --> 15:31.820
好 OK 那么我们把他的id获取到 好 获取到过后呢

15:31.820 --> 15:38.820
我们得到 得到这个id movieid得到 好 我们把他的id输出看一下 能不能得到这个id

15:39.820 --> 15:46.820
movieid 好 get movieid拼接一下 保存一下

15:47.820 --> 15:50.820
然后呢 我们再来重新请求看一下 能不能得到这个id

15:51.820 --> 15:55.820
好 这边呢 我们给他传一个id 传一个id 先随便传一个吧

15:55.820 --> 16:04.820
先随便传一个synd 你看 所以id获取到了 服务器把id获取到了 并且回传给了客户端

16:05.820 --> 16:12.820
好 那么这边我得到了id过后 得到了id过后 那么我们要怎么办 我们要去用这个id呢

16:13.820 --> 16:18.820
获取一个电影对象 获取一个电影对象 那之前是不是已经写好了 现在不用去

16:19.820 --> 16:21.820
在这个地方呢 你就不用去管什么数据库这些东西了

16:21.820 --> 16:26.820
直接通过我们之前写好的东西 就是movie service

16:27.820 --> 16:32.820
用它的静态函数get a friend by id

16:33.820 --> 16:42.820
把movieid获取到 把movieid传进去 然后得到一个啥呢 得到的就是一个电影对象

16:43.820 --> 16:49.820
movie电影对象 好 这样子写了过后 我们用鼠标指着这个电影对象看一下

16:49.820 --> 16:53.820
它是一个啥对象 你会发现它是一个promise

16:54.820 --> 17:00.820
那你看ts就是这个好处 它时时刻刻在提醒你得到的东西是什么玩意 是什么内容

17:01.820 --> 17:08.820
比方说你像在这里获取到在电影的名字 你能获取到吗 你底耳的话你会发现 哦 原来这个东西是一个promise

17:09.820 --> 17:14.820
以前在ges里面 你根本就不知道这个是啥玩意 你就一次写这个代码写走了 后来才发现出了问题

17:14.820 --> 17:18.820
那么他这里马上就会提示你 你这个东西是一个promise对象

17:19.820 --> 17:28.820
咋办 咋办 是不是应该等待 对不对 应该用二位子来等待 但是用二位子的话他前提条件必须这里是和sync

17:30.820 --> 17:36.820
好 总之呢 我们这样子一看 就对了 他有可能是个电影 有可能是闹 你看

17:37.820 --> 17:42.820
通过这种提示啊 就非常的舒服 你在这里要获取电影的东西 你看能获取吗

17:42.820 --> 17:49.820
不能获取 因为他有可能是闹 对吧 好 这个时候要完成享用了 要进行享用

17:50.820 --> 17:58.820
好 这里就涉及到一个问题 我们服务器呢 想应给客户端的结果 往往是一种标准格式

17:59.820 --> 18:07.820
就是服务器 想应 服务器的接口的想应格式 啊 想应格式

18:07.820 --> 18:18.820
想应格式 往往是一种标准格式 这个标准格式呢 每个公司呢 有自己的差异啊 有些公司呢 使用一种 有些公司使用另一种

18:19.820 --> 18:24.820
其实都无所谓 不管你是什么样的公司 往往都会有一种标准格式

18:25.820 --> 18:30.820
这个标准格式呢 比方说我们这里约定一下 约定一下 这个格式呢 大概是这个样子

18:30.820 --> 18:36.820
啊 如果有错误啊 如果有错误的话 那么他想应的格式应该是这样子

18:37.820 --> 18:42.820
就是啊 错误消息 也说啊 错误消息

18:43.820 --> 18:49.820
啊 当然这个错误消息有可能是一个数组啊 当然我们算了吧 不用数组啊 不用数组 就一个字五串

18:50.820 --> 18:58.820
表示错误消息 然后呢 有一个data啊 data 设计到的设计到的对象呢 这个一定是闹啊 一定是闹

18:58.820 --> 19:08.820
啊 一定是闹 或者不要这个对象都可以啊 不要这么做简单一点吧 尽量简单一点 想应的就是一个带有error的对象啊 有个错误消息

19:09.820 --> 19:15.820
这是有错误的情况 好然后呢 正常的情况呢 正常的情况

19:17.820 --> 19:23.820
想应的是什么呢 想应的是这么一个东西啊 错误消息没有啊 没有错误消息啊

19:24.820 --> 19:30.820
这个如果有错误的话 他有错误消息 如果是正常的情况的话 他就没有错误消息啊 没有错误消息的话

19:31.820 --> 19:40.820
就直接想应啊 直接想应一个结果 或者是用这种格式啊 我都把个error带上 error为闹 或者是error为空置五串

19:41.820 --> 19:50.820
啊 然后data里边呢 想应的是数据啊数据 这是正常的情况啊 咱们假设这样的规定吧啊 假设这样的规定啊

19:50.820 --> 19:55.820
有错误的话 我们还是给他带一个data啊 用统一的格式data为闹

19:56.820 --> 20:02.820
假设啊 我们有这么一种统一的数据格式想应 然后再比方说啊 再比方说

20:04.820 --> 20:10.820
有的时候呢 有些公司还喜欢给他加这个加个code 想应吧 是一个数字 0表示成功

20:11.820 --> 20:16.820
或者是200表示成功啊 比方说404找不到资源啊等等等等啊 我这里就不做了啊

20:16.820 --> 20:21.820
看不同的公司 还有不同的要求 还有的时候呢 他要想应分页的数据

20:22.820 --> 20:27.820
分页的数据 分页的数据的话 他想应的格式是这样子的 因为分页里边有一些额外信息

20:28.820 --> 20:35.820
啊错误没有错误啊 如果有错误的话 当然就变成了第种情况了啊 没有错误 没有错误

20:36.820 --> 20:40.820
然后呢 数据呢 他是一个什么东西的数据啊 他一定是一个东西的数据

20:41.820 --> 20:48.820
因为分页嘛 对吧 然后呢 还有一个code 或者叫做toto 总数 总数呢 是一个数字

20:49.820 --> 20:53.820
一共有多少个数据啊 他是把一个总数要带出来

20:54.820 --> 21:00.820
而于是呢 我们服务端啊 就会出现这么三种情况的想应结果

21:01.820 --> 21:07.820
出现这三种情况的想应结果 为了统一这种想应格式啊 因为我们现在做的是电影

21:07.820 --> 21:15.820
那保不齐咱们之后还会做什么永远啊 用户啊 这些东西啊 我们要考虑的深远一点

21:16.820 --> 21:22.820
因此呢 无论你是做什么样的想应 你都会只有这三种想应情况 对吧 只有这三种想应情况

21:23.820 --> 21:31.820
所以说呢 我们怎么样呢 我们可以这样子来处理啊 我们新建一个内专门来处理想应结果

21:32.820 --> 21:38.820
专门来处理想应结果 比方说这个内的名字呢 我给他取个名字啊 叫做response helper

21:39.820 --> 21:47.970
表示想应的帮助内 他专门来帮助你处理想应结果

21:48.970 --> 21:57.970
我们导出一个内 response 之所以我要去做这些事 是因为我想的比较深远啊 就是以后我要考虑到以后处理起来尽量的方便

21:58.970 --> 22:05.970
如果你把这些想应结果分别的去写到这些路由啊 写到这些里边的话 就会导致一个问题

22:06.970 --> 22:11.970
以后我们一旦更改想应结果 要到处去看 这种格式要到处去看 就很麻烦

22:12.970 --> 22:18.970
因此呢 我们专门写这么一个东西来完成想应 好 这里边呢 给我们提供了一些静态的函数

22:19.970 --> 22:24.970
就有点类似于那个什么movie service 对吧 给我们提供了一些静态的函数

22:24.970 --> 22:32.970
这些静态的函数呢 用于什么呢 就用于来进行想应 好 比方说第一个函数啊 我们想用一个错误

22:33.970 --> 22:40.970
错误send error 想用一个错误 想用错误的话 你是不是要把错误消息告诉我

22:41.970 --> 22:47.970
对不对 你要告诉我错误消息啊 好 我们这里呢 写一个错误消息啊 error

22:48.970 --> 22:55.970
这个 error 呢 他有可能是一个制服串 有可能你直接把一个错误消息的制服串给我

22:56.970 --> 23:05.970
也有可能呢 你给我一个制服串的数组啊 比方说咱们在movie service 里面得到错误的消息 是不是都是数组 对吧 有可能有很多的错误消息

23:06.970 --> 23:11.970
有可能呢 你给我一个制服串数组啊 他有可能有两种类型啊 我来帮你完成想应

23:12.970 --> 23:17.770
好 这里怎么来做呢 我判断一下吧啊 判断一下啊 如果

23:18.970 --> 23:25.970
error 是一个制服串啊 或者叫做这样子来判断啊 eray 意思 eray 看他是不是一个数组

23:27.970 --> 23:34.970
如果他是一个数组的话 我怎么想应呢 怎么想应 是不是要把这个数组拼接成一个制服串

23:35.970 --> 23:39.970
反回出去啊 因为我们的标准格式里边错误的话 只有一个制服串

23:40.970 --> 23:44.970
所以说我们可以把这个制服串拼接一下啊 拼接一下 如果他是啊

23:45.970 --> 23:50.970
如果他是一个数组的话啊 如果他是一个数组的话 那么我这里就定一个辩量啊 定个辩量

23:53.970 --> 23:57.970
nate eray 定一个辩量是制服串啊 制服串

23:58.970 --> 24:05.970
如果他如果这个 eray 是一个数组的话 那么我们这里给这个辩量复制 复制为啥呢 把这个数组使用交易

24:06.970 --> 24:13.970
用兜号或者是用分号来进行拼接啊 拼接成一个制服串 如果他是一个数组 else的话

24:14.970 --> 24:20.970
else 那么他就是一个制服串了啊 这个 eray 就是一个制服串 制服串的话我们直接复制啊 直接复制

24:21.970 --> 24:27.970
那么你想一想 通过这么一段代码 是不是这个辩量里边保存的一定是一个错误制服串 对不对

24:28.970 --> 24:33.970
一定是一个错误制服串 好 那么这里呢 完成响应啊 完成响应

24:34.970 --> 24:39.970
好 怎么来完成响应呢 响应的时候是不是你要告诉我一个告诉我一个啥

24:40.970 --> 24:48.970
我要响应 是不是要告诉我这个东西 response对象 你得把他告诉我 那么他怎么来告诉我呢

24:49.970 --> 24:52.970
再加个参数呗 加个参数

24:54.970 --> 24:58.970
把这个 response对象告诉我 这个参数啥类型呢 啥类型

24:58.970 --> 25:06.970
啥类型 好 这里呢 写类型的时候 你不知道他是啥类型 你就看这边是啥类型 你指着他看一下啥类型

25:07.970 --> 25:13.970
叫做 response这个类型 你管他是啥 对吧 我们要的就是这个东西 你该约定一下啊 限制一下

25:14.970 --> 25:18.970
把导入进来 从express里面导入这个类型 导入进来

25:19.970 --> 25:22.970
我们要的就是这个类型 好 完成响应 那响应呗

25:22.970 --> 25:24.970
那响应呗 res sender

25:25.970 --> 25:28.970
生了啥呢 生了一个对象 一个接生格式的对象

25:29.970 --> 25:34.970
啊 这对象里边啊 按照这个标准格式 响应的错误啊 错误

25:35.970 --> 25:40.970
arrow 是啥呢 那就是这个辩量 对吧 就是这个辩量的值作为错误消息

25:41.970 --> 25:47.970
data固定为law 没有数据 啊 因为都发生错误了吗 还有什么数据的 没有数据

25:48.970 --> 25:50.970
好 这样子呢 我们可以完成响应

25:51.970 --> 25:54.970
好 这是这种情况啊 这种情况

25:55.970 --> 25:58.970
表示响应一个错误 打上个注释吧

25:59.970 --> 26:05.970
这个表示响应一个错误 响应一个错误 下面两个参数的注释 难得写了

26:06.970 --> 26:10.970
好 响应错误 然后我们再来看一个响应正常的情况

26:11.970 --> 26:19.970
public static send 响应data 响应一个数据 响应一个正常的数据

26:20.970 --> 26:26.970
那么这里响应数据的时候呢 我们要传递什么呢 你只需要把数据传给我就行了 只需要你把数据传给我

26:27.970 --> 26:30.970
好 OK 那么这里呢 这个数据是什么类型呢

26:31.970 --> 26:34.970
那可能就千奇百怪了 各种各样的类型都有可能

26:35.970 --> 26:38.970
所以说这个数据呢 类型直接给它设置为n你

26:39.970 --> 26:44.970
直接给它设置为n你 就完成了 任何类型数据都可能会被响应

26:45.970 --> 26:48.970
好 那么这里呢 我们就直接书写啊 当然还是要给我一个这个东西

26:49.970 --> 26:51.970
还是要给我一个response对象

26:52.970 --> 26:56.970
我们之所以再说一次啊 我们之所以去做这些事 主要是为了以后更加方便而已

26:57.970 --> 27:02.970
race send 直接响应一个结果 就是帮它封装一下 封装一下响应

27:03.970 --> 27:08.970
正常的就是一个arrow一个data对吧 一个arrow 没有数据啊 没有错误消息

27:09.970 --> 27:16.970
然后一个data 一个data 表示的是这里的数据 数据数据就是就是这个参数

27:16.970 --> 27:21.970
直接拿去响应就完事了 这是响应一个正常的数据

27:22.970 --> 27:26.970
这是响应一个普通数据

27:27.970 --> 27:31.970
好 还有一种情况的是响应分页数据 响应的是分页数据

27:32.970 --> 27:42.470
好 咱们来 这里呢 我们要响应一个分页数据 就是send page data

27:43.470 --> 27:48.470
响应一个分页数据 那么分页数据是一个啥玩意儿呢

27:49.470 --> 27:53.470
分页数据我们之前做过这么一个实体common types

27:54.470 --> 27:58.470
不就是这个玩意儿吗 对吧 分页数据是不是这个玩意儿 就是这个玩意儿对不对

27:59.470 --> 28:02.470
所以说呢 你其实呢 你完全可以直接把这个东西传给我就行了

28:03.470 --> 28:08.470
我来帮助你处理剩下的事情 你把我这个东西给我 我来处理怎么去响应

28:08.470 --> 28:14.470
好 这边呢 我们就可以啊 要求他给我一个啥呢 给我一个

28:15.470 --> 28:19.470
i search 我们把导入进来吧

28:20.470 --> 28:25.470
这里 我们result 他们内容是i search results

28:26.470 --> 28:29.470
好 他是一个翻型 他是一个翻型

28:30.470 --> 28:32.470
那么这里呢 我们也可以把这个函数做成一个翻型

28:33.470 --> 28:35.470
因为这个函数它并不知道 它并不知道

28:35.470 --> 28:41.470
它并不知道 它这个每一个分页数据是什么 它并不知道啊 因此呢 我们可以把它做成一个翻型

28:42.470 --> 28:44.470
总之你把数据给我 我给你响应就完成了

28:45.470 --> 28:49.470
好 拿到这个数据过后呢 还要给我一个什么一样的啊 response

28:51.470 --> 28:54.470
给我一个响应对象 那么我帮你完成响应

28:55.470 --> 28:58.470
好 这里响应的时候呢 我们就可以这样判断啊 就可以这样判断

28:59.470 --> 29:03.470
判断一下啊 你这个结果里边有错误没 有没有错误

29:03.470 --> 29:10.470
啊 有没有错误 如果发现你这个结果里边有错误的情况下啊 就是有错误

29:11.470 --> 29:16.470
如果发现你有错误的话 我怎么办 我打扮了 我是不是

29:17.470 --> 29:21.470
调用这个函数 完成错误响应就完成了 对不对 把错误给你

29:22.470 --> 29:26.470
你完成错误的响应就完成了 好 我们就调用 this send error

29:28.470 --> 29:31.470
好 把这个错误给你 result errors

29:32.470 --> 29:36.470
然后呢 把 response对象给你 你去完成错误的响应

29:37.470 --> 29:42.470
else 如果没有错误 如果没有错误 我们就要响应分业数据了

29:43.470 --> 29:49.470
就是 send 响应分业的数据 分业的数据呢 我们有哪些呢

29:50.470 --> 29:54.470
首先啊 我们刚刚刚才看到了我们的分业数据 error 空的 复制下来

29:55.470 --> 30:01.850
error 是空的 error 是空的 没有错误消息 好 这个数据呢

30:02.850 --> 30:05.850
数据就来自于哪儿呢 来自于 result 里面的 data

30:06.850 --> 30:12.850
来自于这个 偷偷呢 表示总数啊 总数 好 总数的话来自于哪儿呢

30:13.850 --> 30:18.850
来自于 result 里面的 called 就想完了啊

30:19.850 --> 30:26.540
响应分业数据 打扮个出示 响应分业数据

30:29.500 --> 30:34.500
好好看一下啊 我们之所以这样做 再说一次 是为了统一响应的格式

30:35.500 --> 30:40.500
那么以后响应的时候呢 我就可以通过这个内 里面的响应函数来完成响应

30:41.500 --> 30:44.500
好 写好了之后 我们回到这边啊 回到这边

30:45.500 --> 30:49.500
好 OK 那么现在呢 我得到这个目为对象了 是不是有可能有错误 对吧

30:50.500 --> 30:55.500
有可能有错误啊 不是有可能有错误啊 有可能没有数据 对吧

30:56.500 --> 30:59.500
有可能没有数据 我管理有没有数据啊 没有 只要没错误就行 对吧

30:59.500 --> 31:04.500
有没有数据他不叫错误啊 就表示没得到嘛 对不对 表示没有得到

31:05.500 --> 31:08.500
好 所以说这里呢 我就直接想一个正常结果 我们调用

31:09.500 --> 31:14.500
response helper send data

31:15.500 --> 31:20.500
把movey传进去 把response对象传进去 让它来帮我们完成响应

31:21.500 --> 31:24.500
好 this is get 咱们来试一下啊 来试一下

31:24.500 --> 31:28.500
来试一下 保存一下啊 这边发送请求

31:29.500 --> 31:34.500
好 稍微等一下啊 第一次连接数据后呢 会有有点慢啊 需要点时间

31:35.500 --> 31:40.500
好 请求 把我们看一下啊 是不是报错了啊 这里报错了啊 我们看一下什么错误

31:42.500 --> 31:46.500
啊 他说 他说啥呢

31:47.500 --> 31:51.500
他说你这个制服串啊 就你这个制服串啊

31:52.500 --> 32:01.500
就你这个制服串 他想把他作为条件跟id 去匹配啊 想作为条件 用id 去匹配

32:01.500 --> 32:07.500
但是呢 这个东西是没有办法转换成opt 结成id的 因为我们在数据库里边啊 像芒果DB里边

32:08.500 --> 32:12.500
他的id的类型啊 他不是一个制服串 id的类型呢 是一个opt 结成id

32:13.500 --> 32:16.500
但是你传的这个id呢 他转换不了 他报了这个错误

32:17.500 --> 32:20.500
这个错误呢 倒是应该报啊 不是说这个错误有问题 这个错误是正常的啊

32:21.500 --> 32:27.500
但是呢 我不希望这个错误呢 影响到响应啊 如果你是在surface里边的话

32:27.500 --> 32:31.500
就应该报这个错误啊 确实没办法转换成id啊 那怎么办呢

32:32.500 --> 32:38.500
所以说 那这里呢 我们可以处理一下啊 可以处理一下 就是这里这里的错误呢

32:38.500 --> 32:42.500
我不希望在客服端那边啊 影响到客服端的访问 所以说这里我们可以处理一下

32:43.500 --> 32:46.500
那怎么处理呢 我们这里可以用这种方式啊 可以用这种方式

32:47.500 --> 32:50.500
揣揣开启啊来补货错误

32:52.500 --> 32:57.500
这里这个错误呢 我再说一次啊 这个错误是应该出现的 出现是没问题的

32:57.500 --> 33:00.500
因为你这个id确实无法转换 那不报说怎么办呢

33:01.500 --> 33:06.500
我只是不希望客服端影响到客服端的访问 所以说呢 在请求接口里边

33:07.500 --> 33:12.500
我处理这个这个问题啊 如果你认为这个错误 压隔不应该出现

33:13.500 --> 33:17.500
那就不应该在这里处理 应该在哪里处理呢 应该在service里面处理

33:18.500 --> 33:21.500
那就是你想法不一样的话 那么你处理的位置就不一样

33:22.500 --> 33:26.500
看你怎么去思考这个问题 我这里呢认为这个错误呢 这个错误

33:27.500 --> 33:31.500
只是不应该在请求的时候发生 那么其他的时候该发生就发生

33:32.500 --> 33:36.500
我只是说我在这里先处理 好处理的时候呢 我怎么办呢 如果发生了错误啊

33:36.500 --> 33:42.500
如果发生了错误啊 发生了错误 我这里呢就

33:43.500 --> 33:47.500
发送一个now 发送一个now就完事了 ok

33:48.500 --> 33:52.500
他这里报错了啊 他还有一个参数 还有一个参数

33:54.500 --> 33:58.500
这里出来个问题啊 他说什么呢 他说我加个空格

33:59.500 --> 34:02.500
好吧 我们再来看一下啊 再来看一下

34:03.500 --> 34:04.500
发送

34:05.500 --> 34:09.500
你看得到一个now 咱们再来看一下啊 再来看一下

34:10.500 --> 34:13.500
给他一个正常的id 那么随便找一个吧

34:14.500 --> 34:18.500
随便找一个id给他复制一下

34:19.500 --> 34:23.500
好 这边来 给他个id 得到了这个电影的数据

34:24.500 --> 34:28.500
ok啊 那么现在呢 我们这个接客搞定了啊 这个接客搞定了

34:28.500 --> 34:32.500
这个接客搞定了啊 我们这里把保存一下啊 保存一下个接客保存

34:34.500 --> 34:36.500
好 然后我们这里再新建一个请求

34:37.500 --> 34:46.500
这个是 比方说这个是获取多个电影 获取多个电影

34:47.500 --> 34:51.500
保存一下 好获取多个电影的时候呢 我们可能希望这样子来传递

34:51.500 --> 34:55.500
我们这样子来查询 localhost 3000 api movie

34:56.500 --> 35:00.500
好 这里时候呢 我们肯定会传一些参数啊 我们参数可以在这里写

35:01.500 --> 35:04.500
就是params 看这里他用的又用的是params

35:05.500 --> 35:09.500
但是实际上呢 他这里写的参数呢 是在问号后边 你看没有 是在问号后边

35:10.500 --> 35:14.500
就有些不同的场景上的交法不一样 这个就很烦

35:15.500 --> 35:20.500
但是我是把params呢 看成啥呢 看成是这种格式 才是params

35:21.500 --> 35:24.500
像这种格式呢 像这种格式呢 我们把它叫做query

35:25.500 --> 35:29.500
但是有些不同的地方 他的交法又不一致

35:30.500 --> 35:36.500
好 这里呢 我给他一个配级1 比方第一页 利密城呢 给他比方三

35:37.500 --> 35:45.500
keyz呢 比方说查询的关键字呢 比方说查询的是啥呢 查询的关键字是1

35:46.500 --> 35:50.500
我们希望访问这个接口的时候 访问这个接口的时候

35:51.500 --> 35:55.500
他就知道试询的数据 但是他现在给我的报的错了 是404

35:56.500 --> 36:01.500
他说没有服务器没有 没有地址可以处理 没有路由可以处理这个琴球

36:02.500 --> 36:06.500
服务器没有处理这个琴球 服务器返回了一个404 表示不存在

36:07.500 --> 36:11.500
这个地址不存在 那为什么呢 因为这个地址呢 现在匹配不上这个玩意儿

36:12.500 --> 36:15.500
所以匹配不上 这个地址要传一个id的

36:16.500 --> 36:19.500
你看这里 传id的吗 肯定是没有传的

36:19.500 --> 36:23.500
所以说这里我们还需要写个路由来处理多个电影的琴球

36:24.500 --> 36:27.500
也是get琴球 琴球的地址呢 就是这个地址

36:28.500 --> 36:32.500
就是当前 基于当前这个地址 就是基于基地址的地址

36:33.500 --> 36:35.500
不给他加任何行动玩意儿了

36:36.500 --> 36:39.500
在这个琴球里边呢 他可能会传了一些参数进来

36:40.500 --> 36:45.500
我们来处理 根据参数来进行查询 查询所有的电影

36:46.500 --> 36:50.500
那么之前呢 我们写过 在Movie Service里面是不是写过

36:51.500 --> 36:56.500
就是fan的 传一个对象进去 传啥对象

36:57.500 --> 37:01.500
查对象 传的这个对象是不是就是这个query

37:02.500 --> 37:05.500
就是这个query对象 对吧 传的就是这个query对象

37:06.500 --> 37:08.500
所以说我们这里传递啥呢 read query

37:10.500 --> 37:13.500
把这个琴球对象传过去 那么现在大家明白了吧

37:14.500 --> 37:17.500
这个query是一个平面对象

37:18.500 --> 37:20.500
因为这个query是谁给他的

37:21.500 --> 37:23.500
是poster man 也是琴球给他的

37:24.500 --> 37:26.500
然后这里给他的肯定是一个 肯定是一个平面对象

37:27.500 --> 37:32.500
这就是为什么我之前要去把他平面对象转换成内的对象的原因

37:33.500 --> 37:35.500
因为平面对象里面他没有函数

37:36.500 --> 37:38.500
也没有各种装饰器 缺少一些东西

37:39.500 --> 37:41.500
所以说我需要把平面对象的转换成内的对象

37:41.500 --> 37:42.500
就是这个原因

37:43.500 --> 37:46.500
在运行的过程中 他可能会得到一些内行为nl的对象

37:47.500 --> 37:49.500
你看 内行为nl 他都当是一个平面对象

37:50.500 --> 37:51.500
我需要进行转换 这就是他的原因

37:52.500 --> 37:57.500
好 这里fand 最后得到一个结果 就是search result

37:58.500 --> 38:00.500
我这里 得到一个结果result

38:01.500 --> 38:03.500
好 我们想要把这个result来进行响应

38:04.500 --> 38:07.500
那我之前是不是写过这个函数 对吧

38:07.500 --> 38:12.500
response helper里边 他有这个函数 send page data

38:13.500 --> 38:16.500
传一个啥 传一个Isearch result进来

38:17.500 --> 38:19.500
那这个result是不是就是Isearch result

38:20.500 --> 38:21.500
这里没等待 没有等待

38:22.500 --> 38:24.500
好 你看 如果我没有等待的话 我把它传进去

38:25.500 --> 38:26.500
如果我没有等待的话

38:28.500 --> 38:29.500
我把它传进去

38:30.500 --> 38:32.500
他仍然会爆出 还提示我们 你这里有问题

38:33.500 --> 38:35.500
这个参数是不匹配的 还有一个参数

38:36.500 --> 38:39.500
result 你这里有问题 看这个参数 有问题

38:40.500 --> 38:43.500
参数不匹配 你看 马上就发现问题了

38:44.500 --> 38:45.500
我这里忘了等待 你看以前的话

38:46.500 --> 38:49.500
我是不是要等到运行的过程中 发现到底哪里有问题

38:50.500 --> 38:51.500
想了半天 我发现这里有问题

38:52.500 --> 38:54.500
那他这样的马上提示你 我马上就可以更改了

38:55.500 --> 38:57.500
这就是内行检查的好处 明白这个意思吗

38:58.500 --> 38:59.500
好 我们保存一下

39:01.500 --> 39:03.500
保存一下 那么这边

39:04.500 --> 39:05.500
现在我们来请求一下

39:08.500 --> 39:12.500
请求 你看 我得到了3条 是3条吧

39:13.500 --> 39:14.500
里面是等于3 看一下是不是3条

39:15.500 --> 39:16.500
1条 2条 3条

39:17.500 --> 39:20.500
好 3条数据 总数呢 224 244

39:21.500 --> 39:24.500
总数为什么变少了 是因为我这里写了查询关键字

39:25.500 --> 39:29.500
好 如果不写查询关键字 把这个勾掉 去掉

39:30.500 --> 39:31.500
发送 你看

39:31.500 --> 39:34.500
你看 那就是多少条数据

39:38.500 --> 39:39.500
那么就是多少条数据

39:40.500 --> 39:42.500
1215 对吧 就这么多条数据

39:43.500 --> 39:45.500
我可以不写页码 可以不写页码

39:46.500 --> 39:47.500
那么默认就是第一页 可以不写利密车

39:48.500 --> 39:49.500
那么默认就是10条数据

39:50.500 --> 39:51.500
每页10条数据

39:52.500 --> 39:53.500
每页10条

39:54.500 --> 39:56.500
这就是好处 我们可以写 可以不写

39:57.500 --> 39:59.500
保存一下 这是这个接口

39:59.500 --> 40:01.500
你看接口做起来就非常的

40:02.500 --> 40:04.500
轻松加愉快了 对吧 非常的舒服了

40:05.500 --> 40:07.500
好 再来啊 新建一个请求

40:08.500 --> 40:12.500
这里呢 我们现在要做啥呢 要做添加 添加电影

40:14.500 --> 40:15.500
添加电影

40:18.500 --> 40:21.500
添加电影 我们选择一个请求方法 选择Post

40:22.500 --> 40:23.500
Post请求

40:24.500 --> 40:25.500
请求的地址呢 是Local Host

40:25.500 --> 40:28.500
Local Host 3000

40:29.500 --> 40:31.500
然后API Movie

40:32.500 --> 40:33.500
使用Post的方式来请求

40:34.500 --> 40:37.500
Post的方式来请求的话 我们首先发送一下请求

40:38.500 --> 40:39.500
发现他匹配到了这个接口

40:40.500 --> 40:41.500
匹配到了Post

40:42.500 --> 40:44.500
好 那么这里面要做啥呢

40:45.500 --> 40:47.500
就是把它消息体力比较传冠的数据

40:49.500 --> 40:51.500
最终其实调用啥 就是调用这个玩意

40:52.500 --> 40:53.500
Movie Service

40:54.500 --> 40:56.500
怎么 ADD 对吧

40:57.500 --> 40:58.500
添加一个电影

40:59.500 --> 41:00.500
把什么拿来添加呢

41:01.500 --> 41:04.500
把你消息体里边传过来的数据

41:05.500 --> 41:06.500
这是Express的知识

41:07.500 --> 41:08.500
好 消息体里边是啥呢

41:09.500 --> 41:12.500
消息体明白就是Request对象里面的Body这个属性

41:13.500 --> 41:14.500
其实写到这里有些同学应该知道

41:15.500 --> 41:16.500
这里要出问题的

41:17.500 --> 41:18.500
什么问题 因为这个Body对象需要解析

41:19.500 --> 41:20.500
需要有一个东西来进行解析

41:21.500 --> 41:22.500
谁来进行解析呢

41:23.500 --> 41:26.500
需要你先在创建Express之后进行一下配置

41:27.500 --> 41:28.500
它是一个中间键

41:29.500 --> 41:30.500
是一个中间键

41:31.500 --> 41:32.500
这个中间键来自于哪呢

41:33.500 --> 41:34.500
来自于Express.json

41:36.500 --> 41:40.500
这句话是配置中间键

41:41.500 --> 41:43.500
用于解析啥呢

41:45.500 --> 41:47.500
消息体就是请求体

41:48.500 --> 41:50.500
请求消息体中的

41:51.500 --> 41:53.500
接生格式数据

41:54.500 --> 41:55.500
那么它就要求啥呢

41:56.500 --> 41:57.500
要求你请求的时候

41:58.500 --> 41:59.500
要使用这种格式

42:00.500 --> 42:01.500
请求的时候使用这种格式

42:02.500 --> 42:03.500
Body

42:04.500 --> 42:05.500
Body里面还有各种各样的格式对吧

42:06.500 --> 42:07.500
这个大家都应该都知道吧

42:08.500 --> 42:10.500
学习ttp协议的时候应该就学习了

42:11.500 --> 42:12.500
所以它消息体里边呢

42:13.500 --> 42:14.500
还有formdata

42:15.500 --> 42:16.500
有这个玩意儿

42:17.500 --> 42:18.500
等等

42:19.500 --> 42:21.500
总之它消息体里面有各种各样的格式

42:22.500 --> 42:23.500
我们这里要选择什么格式呢

42:24.500 --> 42:25.500
原式格式

42:26.500 --> 42:27.500
原式格式里边的

42:28.500 --> 42:29.500
Application.json

42:30.500 --> 42:31.500
选择这种格式

42:32.500 --> 42:33.500
就是我要给它一个接生格式的支付刷

42:35.500 --> 42:36.500
为什么要用接生格式而不用这种格式呢

42:37.500 --> 42:38.500
这种格式其实也可以

42:39.500 --> 42:40.500
但是这种格式不是很好传数据

42:41.500 --> 42:42.500
因为我们知道

42:43.500 --> 42:44.500
电影里边它是有数据数据的

42:45.500 --> 42:46.500
电影里面有数据数据

42:46.500 --> 42:47.500
因此我们用这种格式

42:48.500 --> 42:49.500
选择这种格式

42:50.500 --> 42:52.500
好那么比方说我给它传递一些数据

42:53.500 --> 42:54.500
传递一些数据

42:57.580 --> 42:58.580
比方说电影的名称

42:59.580 --> 43:00.580
接什么

43:01.580 --> 43:02.580
电影的名称

43:03.580 --> 43:04.580
名称是复联室

43:06.580 --> 43:07.580
复联室

43:08.580 --> 43:09.580
然后电影的时间

43:10.580 --> 43:11.580
摊浪

43:12.580 --> 43:13.580
时间是多长

43:14.580 --> 43:15.580
是120分钟

43:16.580 --> 43:17.580
然后电影的

43:18.580 --> 43:19.580
内层市场是一个数组

43:20.580 --> 43:21.580
是一个数组

43:22.580 --> 43:23.580
内层是

43:24.580 --> 43:25.580
科幻

43:26.580 --> 43:27.580
科幻篇

43:28.580 --> 43:29.580
差不多了吧

43:30.580 --> 43:31.580
我来试一下

43:32.580 --> 43:33.580
到这边来

43:34.580 --> 43:36.580
我们添加一个把波击里面传过的数据

43:37.580 --> 43:38.580
作为参数添加过去

43:39.580 --> 43:40.580
你看

43:41.580 --> 43:42.580
为什么要进行

43:43.580 --> 43:44.580
转换

43:45.580 --> 43:46.580
就是平面对象转换成内的对象

43:47.580 --> 43:48.580
你看这里如果不转换的话

43:49.580 --> 43:50.580
怎么来进行验证了

43:51.580 --> 43:52.580
所以要进行转换

43:52.580 --> 43:53.580
它是一个平面对象

43:54.580 --> 43:55.580
好等待它完成

43:56.580 --> 43:57.580
等待它完成

43:57.580 --> 43:58.580
等待之后

43:59.580 --> 44:00.580
这里得到一个结果

44:01.580 --> 44:02.580
得到一个结果

44:03.580 --> 44:04.580
这里把它写成一步的

44:05.580 --> 44:06.580
这里我们看一下

44:07.580 --> 44:08.580
它有可能是一个字不串

44:09.580 --> 44:10.580
数组

44:10.580 --> 44:11.580
就是有错误

44:11.580 --> 44:12.580
有可能是一个电影对象

44:13.580 --> 44:15.580
所以说这里面我们判断一下

44:16.580 --> 44:17.580
如果array

44:18.580 --> 44:19.580
意思array

44:20.580 --> 44:21.580
如果它是一个数组

44:22.580 --> 44:23.580
如果它是一个数组

44:23.580 --> 44:24.580
那么说明是不是有错误

44:25.580 --> 44:26.580
有错误咋来

44:27.580 --> 44:28.580
send error

44:29.580 --> 44:30.580
把错误响应出去

44:31.580 --> 44:32.580
把错误进行响应

44:33.580 --> 44:34.580
把它传一个respawns对象进去

44:36.580 --> 44:37.580
这是有错误的情况

44:37.580 --> 44:38.580
l是没有错误

44:39.580 --> 44:40.580
没有错误的话

44:40.580 --> 44:41.580
我们直接响应

44:42.580 --> 44:43.580
这个对象

44:44.580 --> 44:45.580
send data

44:45.580 --> 44:46.580
对象扔进去

44:47.580 --> 44:48.580
这是没有错误的情况

44:49.580 --> 44:50.580
保存一下

44:51.580 --> 44:52.580
利用之前写好的函数

44:52.580 --> 44:53.580
来搞定这个事情

44:54.580 --> 44:55.580
你看有错误的话

44:55.580 --> 44:56.580
它推断出来

44:56.580 --> 44:57.580
类型保护

44:57.580 --> 44:58.580
它这里判断

44:58.580 --> 44:59.580
进行了判断

44:59.580 --> 45:00.580
到了判断里边

45:00.580 --> 45:01.580
它一定是一个数组

45:01.580 --> 45:03.580
因此它把它推断出来是一个数组

45:04.580 --> 45:05.580
l是里边

45:05.580 --> 45:07.580
它就一定是一个mv了

45:08.580 --> 45:09.580
类型推断是非常舒服的

45:10.580 --> 45:11.580
保存一下

45:11.580 --> 45:12.580
我们这里

45:12.580 --> 45:13.580
然后再来发送请求

45:13.580 --> 45:14.580
来看一下

45:14.580 --> 45:15.580
发送请求

45:16.580 --> 45:17.580
这个请求

45:18.580 --> 45:19.580
看一下

45:19.580 --> 45:20.580
应该有可能

45:20.580 --> 45:21.580
可能爆错了

45:22.580 --> 45:23.580
有一个地方爆错了

45:23.580 --> 45:24.580
我们来看一下

45:24.580 --> 45:25.580
什么地方爆错了

45:25.580 --> 45:26.580
它说

45:27.580 --> 45:28.580
它说说什么了

45:28.580 --> 45:30.580
它说不能读取

45:30.580 --> 45:31.580
这个属性

45:32.580 --> 45:33.580
VanityZ

45:34.580 --> 45:35.580
VanityZ

45:36.580 --> 45:37.580
undefend

45:37.580 --> 45:38.580
也就是说

45:38.580 --> 45:39.580
它说啥呢

45:39.580 --> 45:41.580
它说这个东西有可能是undefend

45:41.580 --> 45:43.580
我们来打印出来一下

45:43.580 --> 45:44.580
看怎么回事

45:44.580 --> 45:46.580
它说这个body有可能是undefend

45:46.580 --> 45:47.580
保存一下

45:48.580 --> 45:49.580
重新来

45:51.580 --> 45:52.580
请求

45:55.210 --> 45:56.210
咱们看一下

45:56.210 --> 45:58.210
这个body是undefend

45:58.210 --> 45:59.210
Body是

45:59.210 --> 46:00.210
这边我没保存

46:00.210 --> 46:02.210
我这边还没保存

46:02.210 --> 46:03.210
我说怎么回事

46:03.210 --> 46:04.210
如果你没有

46:04.210 --> 46:06.210
没有应用这句话的话

46:06.210 --> 46:07.210
它是解析不了

46:07.210 --> 46:09.210
解析不了这个消息体的

46:09.210 --> 46:11.210
所以说它会是undefend

46:11.210 --> 46:12.210
我们再来

46:12.210 --> 46:13.210
send

46:14.210 --> 46:15.210
好

46:15.210 --> 46:16.210
这里没问题了

46:16.210 --> 46:17.210
没问题了

46:17.210 --> 46:18.210
好

46:18.210 --> 46:20.210
那么咱们看一下

46:20.210 --> 46:21.210
这边

46:21.210 --> 46:22.210
好

46:22.210 --> 46:23.210
把这个取掉

46:23.210 --> 46:24.210
这个取掉

46:24.210 --> 46:26.780
好

46:26.780 --> 46:27.780
再来

46:27.780 --> 46:29.780
主要看它的响应结果

46:30.780 --> 46:31.780
这边

46:31.780 --> 46:34.280
send

46:34.280 --> 46:35.280
好

46:35.280 --> 46:36.280
得到的响应结果

46:36.280 --> 46:37.280
我们看一下下面

46:37.280 --> 46:38.280
你看

46:38.280 --> 46:40.280
它告诉我的错误消息

46:40.280 --> 46:42.280
我现在有了错误消息

46:42.280 --> 46:43.280
它告诉我

46:43.280 --> 46:44.280
现在有哪些错误

46:44.280 --> 46:45.280
它说电影地区

46:45.280 --> 46:46.280
地区是数组

46:46.280 --> 46:47.280
上映地区

46:47.280 --> 46:48.280
至少有一个

46:48.280 --> 46:50.280
我们这里的地区都没写

46:50.280 --> 46:51.280
对吧

46:51.280 --> 46:52.280
所以说我们写上地区

46:52.280 --> 46:54.280
你看现在就很舒服了

46:54.280 --> 46:56.280
然后这里是地区

46:56.280 --> 46:58.280
地区是美国

46:58.280 --> 46:59.280
美国

46:59.280 --> 47:01.280
首映地区是美国

47:02.280 --> 47:03.280
发动请求

47:03.280 --> 47:04.280
现在还有错误

47:04.280 --> 47:05.280
它说时长过长

47:05.280 --> 47:06.280
时长最小一分钟

47:06.280 --> 47:08.280
那么时长我不是设置的吗

47:08.280 --> 47:09.280
仔细检查

47:09.280 --> 47:11.280
发现原来这里少写了

47:11.280 --> 47:13.280
这个L应该是大写的

47:13.280 --> 47:15.280
再发动请求

47:15.280 --> 47:17.280
天下成功了

47:17.280 --> 47:18.280
你看

47:18.280 --> 47:20.280
现在这个接口

47:20.280 --> 47:23.280
是不是文件很多了

47:23.280 --> 47:25.280
它不容易出错了

47:25.280 --> 47:27.280
而且有了严格的内情检查

47:27.280 --> 47:28.280
你再也不用担心

47:28.280 --> 47:29.280
数据库里面保存了

47:29.280 --> 47:31.280
一些断期拔刀的数据

47:31.280 --> 47:33.280
数据库保存的数据一定是正确的

47:33.280 --> 47:35.280
我们把这个保存一下

47:35.280 --> 47:37.280
这个保存一下

47:37.280 --> 47:39.280
这里

47:40.280 --> 47:42.280
保存一下

47:43.280 --> 47:44.280
保存

47:44.280 --> 47:46.280
这就是天佳电影

47:46.280 --> 47:48.280
天佳电影

47:53.170 --> 47:55.170
多了一个Gate

47:56.170 --> 47:59.740
天佳电影保定了

47:59.740 --> 48:01.740
还有啥

48:01.740 --> 48:03.740
我们这里可把做完

48:03.740 --> 48:06.740
还有就是修改电影

48:06.740 --> 48:08.740
修改电影

48:08.740 --> 48:10.740
修改电影

48:10.740 --> 48:14.500
我们来看一下

48:14.500 --> 48:16.500
点击修改电影

48:16.500 --> 48:18.500
它首先是一个铺扯型球

48:18.500 --> 48:19.500
一个铺扯型球

48:19.500 --> 48:20.500
请求什么地址呢

48:20.500 --> 48:22.500
Nocalhost

48:22.500 --> 48:24.500
3000API Movie

48:24.500 --> 48:27.500
使用铺扯型球去请求这个地址的时候

48:27.500 --> 48:29.500
表示修改电影

48:29.500 --> 48:30.500
修改电影的时候

48:30.500 --> 48:31.500
你同样的

48:31.500 --> 48:33.500
跟得到单个电影一样

48:33.500 --> 48:35.500
是不是要给我一个ID

48:35.500 --> 48:36.500
你不告诉我

48:36.500 --> 48:37.500
你要修改哪个电影吗

48:37.500 --> 48:38.500
对不对

48:38.500 --> 48:40.500
要告诉我一个ID

48:40.500 --> 48:42.500
要把电影的ID告诉我

48:42.500 --> 48:44.500
告诉我之后

48:44.500 --> 48:45.500
那么我们可以想象得到

48:45.500 --> 48:47.500
ID是不是也有可能会出问题

48:47.500 --> 48:48.500
对不对

48:48.500 --> 48:49.500
也有可能会出问题

48:49.500 --> 48:50.500
所以

48:50.500 --> 48:52.500
这里我们用Trackatch

48:52.500 --> 48:54.500
在这里经济书写

48:54.500 --> 48:56.500
这个ID

48:56.500 --> 48:58.500
我们切下去正常的代码

48:58.500 --> 48:59.500
如果出了问题的话

48:59.500 --> 49:01.500
我们返回一个错误就行了

49:02.500 --> 49:04.500
修改电影

49:04.500 --> 49:05.500
我们这里

49:05.500 --> 49:07.500
使用Movie Service里边

49:07.500 --> 49:09.500
不是一个Editor

49:09.500 --> 49:11.500
ID传进去

49:13.500 --> 49:14.500
没问题吧

49:14.500 --> 49:15.500
这个没问题吧

49:15.500 --> 49:17.500
ID传进去

49:17.500 --> 49:18.500
然后你要修改电影对象

49:18.500 --> 49:20.500
是不是通过请求体传给我

49:21.500 --> 49:23.500
把ID传过来

49:24.500 --> 49:25.500
返回的是一个啥呢

49:25.500 --> 49:27.500
返回的是一个错误的数组

49:30.500 --> 49:32.500
返回的是一个错误的数组

49:32.500 --> 49:34.500
如果这个数组的长度

49:35.500 --> 49:37.500
没有写的位置对吧

49:37.500 --> 49:39.500
看这些都到处有提示

49:39.500 --> 49:41.500
你如果不小心

49:41.500 --> 49:43.500
根本就不存在不小心写错这个问题

49:43.500 --> 49:46.500
如果这个数组的长度大于0

49:46.500 --> 49:48.500
是不是有错误

49:48.500 --> 49:49.500
有错误

49:49.500 --> 49:51.500
有错误咋办

49:51.500 --> 49:52.500
有错误咋办

49:52.500 --> 49:53.500
有错误是不是

49:53.500 --> 49:55.500
响应错误就完事了

49:55.500 --> 49:57.500
send error

50:00.500 --> 50:01.500
错误

50:01.500 --> 50:02.500
错误的话

50:02.500 --> 50:05.500
我们就直接把这个错误对象

50:05.500 --> 50:06.500
错误的数组扔进去

50:06.500 --> 50:08.500
让它帮我们完成响应

50:08.500 --> 50:09.500
有错误

50:09.500 --> 50:10.500
响应错误

50:10.500 --> 50:12.500
如果ID有问题

50:12.500 --> 50:14.500
如果ID出了问题

50:14.500 --> 50:16.500
ID出了问题会进入catch

50:16.500 --> 50:17.500
出了问题的话

50:17.500 --> 50:19.500
我们也响应一个错误吧

50:19.500 --> 50:21.500
也响应一个错误

50:21.500 --> 50:23.500
那么这里表示说

50:25.500 --> 50:26.500
响应一个错误

50:26.500 --> 50:27.500
错误的消息

50:27.500 --> 50:28.500
再写个错误消息

50:28.500 --> 50:30.500
表示ID错误

50:31.500 --> 50:33.500
这两种情况都响应一个错误

50:34.500 --> 50:36.500
如果是正确的话

50:36.500 --> 50:37.500
我们要响应啥呢

50:37.500 --> 50:38.500
我们要响应

50:39.500 --> 50:40.500
修改的话

50:40.500 --> 50:42.500
没啥好响应的对吧

50:42.500 --> 50:43.500
没啥好响应的

50:43.500 --> 50:45.500
那就send data to

50:45.500 --> 50:47.500
响应一个to

50:47.500 --> 50:48.500
响应个to

50:48.500 --> 50:50.500
表示修改成功

50:50.500 --> 50:51.500
修改成功

50:51.500 --> 50:52.500
就完事了

50:53.500 --> 50:54.500
这是修改做法

50:54.500 --> 50:56.500
我们来看一下

50:56.500 --> 50:58.500
这些字型规定吧

50:58.500 --> 50:59.500
如果在公司里边的话

50:59.500 --> 51:01.500
公司会有规定的

51:01.500 --> 51:02.500
这里

51:02.500 --> 51:03.500
修改

51:03.500 --> 51:05.500
我要传一个ID过去

51:06.500 --> 51:07.500
来吧

51:07.500 --> 51:08.500
修改哪个

51:08.500 --> 51:09.500
就修改这个ID吧

51:09.500 --> 51:11.500
就修改这个ID

51:11.500 --> 51:12.500
然后呢

51:12.500 --> 51:14.500
我要在消息体里边

51:14.500 --> 51:16.500
写上这些东西

51:16.500 --> 51:18.500
消息体里边

51:18.500 --> 51:19.500
我要修改啥呢

51:19.500 --> 51:21.500
比方说我要把这个电影的名字

51:21.500 --> 51:23.500
修改成为

51:25.500 --> 51:26.500
电影的名字

51:26.500 --> 51:28.500
修改成为

51:28.500 --> 51:29.500
随便写

51:29.500 --> 51:31.500
再把这个电影的

51:32.500 --> 51:34.500
什么time on time and on

51:35.500 --> 51:37.500
修改成为

51:37.500 --> 51:39.500
比方说

51:40.500 --> 51:42.500
这样随便写

51:42.500 --> 51:44.500
好 发送型球

51:44.500 --> 51:46.500
下面告诉我错误

51:46.500 --> 51:47.500
这个时常有问题

51:47.500 --> 51:49.500
时常必须是整数

51:49.500 --> 51:51.500
好 OK 那么我们把时常修改一下

51:51.500 --> 51:53.500
修改成3333

51:53.500 --> 51:55.500
发送型球

51:55.500 --> 51:57.500
好 Data to

51:57.500 --> 51:58.500
表示修改成功了

51:58.500 --> 52:00.500
我们看一下数据库

52:00.500 --> 52:02.500
这个是哪个电影啊

52:02.500 --> 52:04.500
这个是哪个电影

52:04.500 --> 52:06.500
电影52

52:06.500 --> 52:08.500
好 来吧

52:08.500 --> 52:10.500
电影52

52:10.500 --> 52:12.500
我在哪里去找52啊

52:12.500 --> 52:13.500
51

52:13.500 --> 52:14.500
52

52:14.500 --> 52:16.500
好 看一下啊

52:16.500 --> 52:19.500
我们的电影名称

52:19.500 --> 52:21.500
是这个吗 AB

52:21.500 --> 52:23.500
不是这个

52:23.500 --> 52:24.500
不是这个

52:24.500 --> 52:26.500
New

52:26.500 --> 52:27.500
我在哪里去找

52:27.500 --> 52:28.500
重新换一个吧

52:28.500 --> 52:29.500
换一个

52:29.500 --> 52:30.500
就这个

52:30.500 --> 52:34.000
换这个ID

52:34.000 --> 52:36.000
我在哪里去找

52:36.000 --> 52:37.000
我在这里

52:37.000 --> 52:39.000
重新换一个ID

52:39.000 --> 52:41.000
Send

52:41.000 --> 52:43.000
好 修改成功

52:43.000 --> 52:44.000
然后看这边

52:44.000 --> 52:46.000
看这边这个ID

52:46.000 --> 52:47.000
A9

52:47.000 --> 52:49.000
我重新打开一次

52:49.000 --> 52:51.000
下一A9

52:51.000 --> 52:52.000
看一下啊

52:52.000 --> 52:53.000
你看Name属性修改了

52:53.000 --> 52:55.000
Time on now

52:55.000 --> 52:56.000
修改了

52:56.000 --> 52:58.000
OK 搞定了

52:58.000 --> 53:00.000
好 这是关于

53:00.000 --> 53:02.000
这是关于修改

53:02.000 --> 53:04.000
那最后删除

53:04.000 --> 53:06.000
简单了 是吧 很简单了

53:06.000 --> 53:08.000
删除的话给我个ID

53:08.000 --> 53:10.000
再把它复制一下

53:10.000 --> 53:12.000
复制一下

53:12.000 --> 53:13.000
好 ID的话

53:13.000 --> 53:15.000
我们这里使用删除功能

53:15.000 --> 53:17.000
使用删除功能

53:17.000 --> 53:18.000
Sync

53:18.000 --> 53:19.000
这里

53:19.000 --> 53:21.000
这里是Denet

53:21.000 --> 53:22.000
Denet

53:22.000 --> 53:23.000
把ID传进去就行了

53:23.000 --> 53:24.000
其他的不用管

53:24.000 --> 53:25.000
ID传进去

53:25.000 --> 53:26.000
它完成删除

53:26.000 --> 53:27.000
删除的话

53:27.000 --> 53:28.000
它没有返回结果

53:28.000 --> 53:29.000
没有任何返回结果

53:29.000 --> 53:31.000
因为删除它认为不会出错

53:31.000 --> 53:32.000
不会出错

53:32.000 --> 53:33.000
那么有可能

53:33.000 --> 53:34.000
在这里可能出的错误

53:34.000 --> 53:36.000
就是IT你给我传错了

53:36.000 --> 53:38.000
我没法进行解析

53:38.000 --> 53:39.000
其他的话不会出错的

53:39.000 --> 53:40.000
好 我们这里

53:40.000 --> 53:42.000
直接想一个正确的结果就行了

53:42.000 --> 53:44.000
如果是正常情况下的话

53:44.000 --> 53:45.000
那么就不会出错了

53:45.000 --> 53:47.000
好 这是删除

53:47.000 --> 53:49.000
好 咱们来试一下

53:50.000 --> 53:52.000
这里修改 保存一下

53:52.000 --> 53:53.000
再添加一个

53:54.000 --> 53:56.000
ADD request

53:56.000 --> 53:58.000
这是删除电影

53:58.000 --> 54:00.000
删除电影

54:00.000 --> 54:01.000
保存

54:01.000 --> 54:02.000
好 这边呢

54:02.000 --> 54:04.000
把它改成Denet请求

54:04.000 --> 54:05.000
请求例子

54:05.000 --> 54:06.000
localhost

54:06.000 --> 54:07.000
3000

54:07.000 --> 54:08.000
API

54:08.000 --> 54:09.000
movie

54:09.000 --> 54:11.000
传个ID

54:11.000 --> 54:12.000
我靠 我要

54:13.000 --> 54:14.000
来吧 就它吧

54:14.000 --> 54:15.000
就它

54:15.000 --> 54:17.000
好 这个ID复制一下

54:17.000 --> 54:19.000
我要一个电影啊 删了

54:20.000 --> 54:22.000
好 发送请求

54:23.000 --> 54:24.000
好 电影结果委屈

54:24.000 --> 54:26.000
表示删除成功

54:26.000 --> 54:27.000
好 我们来看一下

54:27.000 --> 54:29.000
这个电影还存存在

54:29.000 --> 54:30.000
这个记一下

54:30.000 --> 54:31.000
11A9

54:31.000 --> 54:32.000
我们看一下

54:34.000 --> 54:36.000
下一页 11A9没了

54:36.000 --> 54:38.000
对吧 这个电影被删除掉了

54:39.000 --> 54:40.000
好了 那么现在呢

54:40.000 --> 54:41.000
增商改查

54:41.000 --> 54:43.000
这四个接口

54:43.000 --> 54:45.000
全部搞定了

54:46.000 --> 54:48.000
好 那么服务器完了吗

54:48.000 --> 54:50.000
其实服务器还有一件事

54:50.000 --> 54:51.000
我们还没有做

54:51.000 --> 54:54.000
就是上传一个

54:54.000 --> 54:55.000
图片

54:56.000 --> 54:58.000
电影封面吧 对不对

54:58.000 --> 55:00.000
它是有可能会有一个图片的

55:00.000 --> 55:01.000
因此呢

55:01.000 --> 55:03.000
上传电影封面

55:03.000 --> 55:05.000
我们要进行图片的上传处理

55:05.000 --> 55:06.000
还没有做

55:06.000 --> 55:08.000
我们这个小节先到这吧

55:08.000 --> 55:10.000
我们下个小节来解决

55:10.000 --> 55:11.000
图片上传的问题

55:11.000 --> 55:13.000
我们这里

55:13.000 --> 55:14.000
这个小节到这结束了

55:14.000 --> 55:16.000
大家下来跟着我写一遍

55:16.000 --> 55:19.000
这些都是很简单很轻松愉快的事情了

55:19.000 --> 55:21.000
就把这些接口写出来就行了

55:21.000 --> 55:22.000
因为有很多的方法

55:22.000 --> 55:24.000
已经帮我们做了很多的事情了

55:24.000 --> 55:26.000
我一时一调整就完事了

55:26.000 --> 55:28.000
OK 咱们这一刻到这里了

55:28.000 --> 55:30.000
拜拜

