WEBVTT

00:00.940 --> 00:04.380
哈喽 大家好 我是独一教育 我也有钱能讲师 元晶

00:05.380 --> 00:07.860
啊 我咱们咱们上节课呢 讲了这个

00:08.780 --> 00:11.180
这布局对吧 布局组建

00:11.940 --> 00:15.500
啊 现在呢 我们就一次把这个页面就完成吧

00:16.060 --> 00:22.580
啊 我们这里有三个页面 一个是添加电影 一个是修改电影 然后一个是电影的列表

00:23.540 --> 00:28.580
啊 先做哪一个呢 我们先做这个电影列表吧 先做这个页面

00:29.020 --> 00:30.380
好吧 先把运行出来啊

00:31.300 --> 00:34.900
这里我们npm start 运行出来

00:36.180 --> 00:41.420
呀 怎么了 哦 没有进入这个目录啊 cd client

00:42.980 --> 00:44.700
清楚一下啊 npm start

00:45.980 --> 00:49.420
哦 然后服务器这边也要启动起来 服务器这边

00:50.900 --> 00:58.380
cd server 哦 这边要停止了对吧 服务器那边占用了端口

00:59.060 --> 01:00.500
服务器那边要占用3000端口

01:01.420 --> 01:04.460
好 这边先把服务器启动起来 npm 装对

01:05.740 --> 01:08.380
然后这边再进入客户端

01:10.100 --> 01:16.460
cd client 然后使用npm start 启动一下客户端

01:21.640 --> 01:28.080
好 这里切换一下端口啊 先把运行出来 那么我们这里要去完成这么一个表格的话

01:29.040 --> 01:33.920
有这种有集中做法啊 有些同学呢 可能就喜欢直接把这个

01:34.800 --> 01:37.600
nd 啊 nd 里边的逐渐就直接往这里面扔

01:38.280 --> 01:45.400
其实呢 我不是很推荐这样的做法 为什么呢 因为页面的话尽量的保持纯净

01:46.000 --> 01:48.960
页面是啥 页面其实是你可以把它想象成

01:49.400 --> 01:54.040
它去组合去使用各种各样的组件 就是你已经做好了一些组件了

01:54.560 --> 01:57.920
那么页面上的去组装这些组件 把它形成一个页面

01:58.280 --> 02:04.000
最好是形成这么一种结构 为什么呢 因为比方说啊 我们这里做 看个猫眼

02:04.560 --> 02:13.300
电影的这个效果效果页面 这个效果页面里边呢 我们这里啊 你可以看到这里有一个电影的表格对吧

02:13.620 --> 02:19.380
这个电影的表格 那么有有可能的话 这个电影的表格可能会出现在其他的位置

02:20.100 --> 02:20.540
比方说

02:21.420 --> 02:29.020
啊 你看这个位置啊 将来如果我们要开发什么远线管理啊 之类的东西 你看这里是不是也有电影表格 还有两个对不对

02:29.860 --> 02:35.100
因此呢 我们最好的话是把这些东西呢 做成一个各的组件 可以方便从用

02:35.980 --> 02:43.420
对吧 好 那么这里呢 我们就还用这种方式啊 我们在这里建议这么一个文件夹叫做components

02:44.180 --> 02:53.020
我们把电影的列表 就是个电影的表格呢 做成一个组件啊 做成一个组件 然后在页面上的去使用这个组件就行了

02:53.780 --> 02:58.700
好吧 好 那这里呢 我们就新建一个文件 给他取个名字 叫做

02:59.580 --> 03:01.140
movie table

03:02.060 --> 03:03.500
tss

03:04.940 --> 03:10.620
好 写这么个文件啊 这个文件呢 其实就是导出一个内组件 export

03:11.660 --> 03:15.060
default class 继承

03:15.860 --> 03:18.740
然后是导入啥 导入react

03:19.860 --> 03:21.980
react fromreact

03:22.780 --> 03:26.860
好 这里继承啥呢 继承react the component

03:27.820 --> 03:33.780
好 写这么一个组件啊 我们先写 先写个最简单的 又就一个文字 把它显示出来就完事了

03:34.780 --> 03:44.060
return 这里我们就写一个he 啊 显示出来就行了 是电影的表格组件

03:45.020 --> 03:47.420
我们先把这个组件用起来啊 先把这个组件用起来

03:48.060 --> 03:54.180
然后这个组件在哪里用呢 目前呢 只有在这个页面才用啊 moving list 在这个页面会用到这个组件

03:54.660 --> 03:56.900
好 那么这个页面里边呢 我就

03:58.500 --> 04:01.820
这里啊 把导入进来 import

04:02.620 --> 04:03.100
mov

04:03.980 --> 04:05.340
table from

04:06.500 --> 04:07.340
再返回上一集

04:08.740 --> 04:09.620
再返回上一集

04:10.740 --> 04:11.500
component

04:12.340 --> 04:12.940
mov table

04:13.860 --> 04:18.340
好 那么这里呢 去使用这个组件啊 直接使用就完事了 直接来

04:22.040 --> 04:25.400
好 这样子写好了之后啊 我们看一下页面上

04:26.120 --> 04:30.720
能不能正常的显示这个组件了啊 这里电影列表进去看一下 ok

04:31.400 --> 04:36.720
这个组件呢 我们可以看到啊 正常的显示出来了 那么接下来呢 我就来完成

04:38.200 --> 04:40.000
这个组件啊 就来完成这个组件

04:41.440 --> 04:43.840
好 这个组件我们首先要思考一个问题

04:44.640 --> 04:49.960
这个组件 它肯定需要一些数据 对吧 我们先别管怎么去显示 我们先

04:50.880 --> 04:59.720
先我们把这个数据想通 它肯定是需要一些数据 那么它需要的数据呢 是要通过属性来传递的

05:00.600 --> 05:05.320
它需要哪些数据呢 它需要的数据这个内形是什么呢 我们先把这个想通

05:06.480 --> 05:14.680
啊 就是这个组件它需要一些数据 你看这边 这个表格吧 它要显示出来 把它做成个组件的话 它需要一些数据

05:15.640 --> 05:17.320
啊 它需要哪些数据呢

05:18.040 --> 05:24.840
我来理一理啊 首先电影的数据是不是要 你得给我一个电影的数据吧 好

05:25.640 --> 05:33.080
一共有多少页 是不是 我得啊 我得取到对吧 呃 然后当前是第几页 这个数据得给我吧

05:33.960 --> 05:41.160
然后呢 你要搜索的话 查询关键制 你得给我吧 对不对 好 因此呢 因此呢

05:41.720 --> 05:48.920
这个组件啊 这个组件它需要的数据实际上是啥呀 实际上是不是之前我们写了大个字的时候

05:50.600 --> 05:52.120
这个数据 来看一下

05:53.560 --> 06:01.560
是不是就是这个数据 就是我们仓库里边的电影状态这种数据结构 你把这个数据结构给我就行了 给我就行了

06:02.520 --> 06:12.200
当然了 你如果不 如果可不可以不使用这种结构 你要去自己啊 自己去做一种结构出来 可不可以 当然也可以啊 当然也可以

06:12.440 --> 06:17.640
只不过 这里呢啊 不是说这里的结构一定要跟仓库里边一样啊 不是这个意思啊

06:18.120 --> 06:25.320
只是说 这种情况下啊 这里碰巧了 它的需要的数据呢 刚好跟仓库一样啊 仓库一致

06:26.040 --> 06:33.240
啊 可不可以不一致 当然可以不一致啊 那么我们知道瑞拉克斯里边呢 是可以进行映射的 是吧 是可以进行映射的

06:33.320 --> 06:39.800
因此呢 可以不一致 没有任何问题啊 当然这里很简单 它是一致的 因此呢 按照我们基础部分

06:40.920 --> 06:46.840
所讲的啊 一个内组间 一个内组间里边如何来约束它的属性的内形呢

06:47.720 --> 06:53.480
就在这里写上翻行啊 告诉他咱们的属性呢 是什么内形 是一个imv

06:53.800 --> 06:59.720
mv state 是这么一个内形 对吧 通过这种告诉他

07:00.360 --> 07:04.680
ok 现在这么一写的话 你看 这里马上就爆错了啊 这边就爆错了

07:05.160 --> 07:13.080
他为什么要爆错 在提示里啊 你说好了不是要有这些这些属性吗 你看这个imv state里边有啥 有什么dead only

07:13.880 --> 07:18.360
有dead condition total is loading

07:18.680 --> 07:20.200
和total page

07:21.480 --> 07:25.480
他有这么一些属性 因此呢 需要你给他传递

07:26.120 --> 07:30.200
但是你这里传递了吗 你这里一个都没有传递啊 实际上一个都没有传递

07:30.760 --> 07:34.120
好 那你这里怎么来传递呢 怎么来传递呢

07:35.160 --> 07:40.600
我们是不是要使用react redux 对吧 现在的情况呢 是啥呢

07:41.400 --> 07:44.440
是啊 仓库里边

07:45.480 --> 07:48.200
有数据啊 有数据

07:49.080 --> 07:55.720
但没有界面 仓库他有数据 他数据都是齐的 而且这些数据的变化了 他都有相应的

07:56.040 --> 07:58.120
相应的操作 但是他没有界面

07:59.000 --> 08:01.800
好 另外一边呢 move a table

08:02.760 --> 08:04.600
主件有界面

08:05.560 --> 08:11.400
到时候我们会把界面给他做出来 他有界面 但是没有数据

08:12.920 --> 08:17.640
你看 天生了一顿 对吧 我们把这两个一结合起来就完成了

08:18.200 --> 08:25.240
好 这个怎么来结合呢 要通过一个cool 就是react redux 这些都是你们学过的啊

08:25.720 --> 08:26.520
好 我们这里

08:27.800 --> 08:29.000
好 去安装一下这个cool

08:29.560 --> 08:30.040
停止

08:31.000 --> 08:36.920
啊 这里是用react redux

08:37.240 --> 08:38.120
安装这个cool

08:40.200 --> 08:41.080
稍等一下啊

08:41.800 --> 08:45.080
这个cool呢 他是没有声明文件的 也就是他

08:45.720 --> 08:49.080
直接用ts写的啊 他没有用ts做声明文件

08:49.480 --> 08:53.080
因此呢 这个cool呢 你需要去安装一下他的内形cool

08:53.320 --> 08:56.440
内形cool在taps里边 你需要手动安装一下就行了

08:57.160 --> 08:58.360
好 我们这里安装一下啊

08:59.320 --> 09:00.920
ya add 横杠d

09:01.880 --> 09:02.200
taps

09:04.120 --> 09:06.840
react redux

09:07.320 --> 09:09.080
OK 把内形cool给安装一下

09:10.120 --> 09:12.760
啊 用法跟之前是一样的啊 没有什么区别

09:13.960 --> 09:18.600
啊 这个会很简单 就是连接的 对吧 他提供了一个connect 函数

09:19.080 --> 09:22.520
啊 提供了一个connect函数 我觉得直接在这里来吧

09:23.320 --> 09:24.920
input connect

09:29.320 --> 09:32.520
fromreact redux

09:33.080 --> 09:36.680
从这个cool里面倒入进来 他里面提供了一个函数叫connect

09:37.240 --> 09:39.080
connect函数 连接

09:39.400 --> 09:41.880
其实连接这个词呢 是非常非常形象的

09:42.200 --> 09:43.160
怎么形象呢 你看吧

09:43.720 --> 09:46.680
仓库里边有数据 他没有见面 他差见面对吧

09:47.000 --> 09:49.160
mvtable这个组件呢 有见面 但没数据

09:49.880 --> 09:53.800
那么通过连接 把数据连过去啊 数据连过去

09:54.120 --> 09:56.280
就把这里面的数据呢 作为属性

09:57.240 --> 09:59.560
传递给这个组件 然后就连接

10:00.120 --> 10:01.320
好 连接怎么做呢

10:01.720 --> 10:05.640
啊 我们以前都写过了 对吧 你至少得提供这么一个东西啊

10:05.960 --> 10:08.440
你如果啥都不提供的话 那就那连接没什么意义

10:08.920 --> 10:12.680
你可以要提供这么一个东西 一个函数啊 一个函数

10:14.600 --> 10:19.160
叫做map step to props 对吧

10:19.480 --> 10:22.680
这个名字其实你随便取名字 但是通过这个名字呢

10:22.760 --> 10:27.800
我们知道这个函数做啥呢 就是映射一个状态

10:28.440 --> 10:31.400
就是仓库里边的数据到哪呢 到哪

10:32.040 --> 10:37.400
到属性啊 写这么一个函数 好 这个函数呢 有个函数会传递给你

10:37.800 --> 10:40.120
这个函数呢 就是state 就是状态

10:40.600 --> 10:42.360
这个状态什么类型呢 该约束一下啊

10:42.920 --> 10:46.440
状态什么 啥类型 状态的类型是不是就是仓库里边的

10:47.000 --> 10:47.640
这个啊

10:47.960 --> 10:48.920
哎 跑到去了

10:50.200 --> 10:52.520
就丢事了 就这个I root state

10:53.000 --> 10:55.720
就相当于是这个东西 对吧 仓库里边的这个东西

10:55.960 --> 10:56.920
I root state

10:57.320 --> 11:01.640
好 该约束一下啊 就是整个仓库里的名里边的根状态

11:02.120 --> 11:04.280
啊 整个仓库里边的根状态

11:04.520 --> 11:06.600
整个仓库的数据也结构

11:07.640 --> 11:10.120
好 那么给你这个东西过后呢 你返回啥呢

11:10.520 --> 11:11.720
啊 你返回啥呢

11:11.960 --> 11:14.520
返回啥 返回了是不是就是state

11:14.680 --> 11:15.480
state 第二

11:16.040 --> 11:18.120
movie 对不对 返回就是返回这个东西

11:18.600 --> 11:22.520
因为这个table这个组件 需要的是不是就一个I move state

11:22.520 --> 11:24.280
就完事了 对吧 你给他就完事了

11:24.520 --> 11:26.520
那这个movie是不是就刚好是他想要的

11:26.920 --> 11:28.520
对不对 刚好是他想要的

11:28.920 --> 11:30.680
好 把这个movie直接返回就行了

11:31.400 --> 11:35.400
好 当然你可以减一些啊 你可以减一些 减些成一个箭头函数随便你

11:36.120 --> 11:38.200
好 总之呢 写好这个函数过后呢

11:38.440 --> 11:39.720
我们使用connect

11:39.960 --> 11:40.840
啊connect

11:41.800 --> 11:43.560
然后把这个函数传进去啊

11:44.120 --> 11:47.000
把这个map states to props传进去

11:47.640 --> 11:49.720
传去过后呢 我们以前咋用的

11:50.280 --> 11:53.400
这个返回的是一个啥 返回的又是一个函数

11:54.200 --> 11:56.440
这个函数呢 叫做高阶组件

11:56.840 --> 11:58.600
返回的是一个高阶组件

11:58.920 --> 11:59.720
啊 就这里

12:01.560 --> 12:04.360
我可能这里可能主要是帮大家复习一下啊

12:04.600 --> 12:06.760
可能在讲的项目的过程中

12:07.080 --> 12:09.400
很多时候是帮大家复习 都是以前学过的

12:10.360 --> 12:11.720
啊hoc

12:12.040 --> 12:16.840
高阶组件 表示的是 他返回的是一个函数啊 这个函数是个高阶组件

12:17.400 --> 12:19.560
也就是说这个高阶组件的用法呢 就是说

12:20.360 --> 12:23.560
你传入一个组件啊 他返回给你一个新的组件

12:24.280 --> 12:26.840
好 我们传入一个组件吧 我们传入一个组件

12:27.480 --> 12:28.360
movie table

12:29.720 --> 12:30.840
啊movie table

12:31.320 --> 12:33.640
然后他返回的是一个啥 一个新的组件

12:34.200 --> 12:35.240
啊 一个新的组件

12:35.720 --> 12:36.200
const

12:37.160 --> 12:39.960
啊 我们把他取名字movie container

12:40.360 --> 12:43.320
啊 学习reactor的时候 你应该接触过这么一个概念啊

12:43.640 --> 12:46.120
叫展示组件和容器组件

12:46.840 --> 12:50.440
像这个movie table啊 他就是个展示组件 他存作展示的

12:50.840 --> 12:54.520
我把界面给你展示出来 我没有数据 你数据全部告诉我就行了

12:54.920 --> 12:59.480
啊 什么数据的变化 我也不知道该怎么处理 我全部作为事件给你扔出去

12:59.880 --> 13:02.280
总之我没 我只做展示 只做存展示

13:02.760 --> 13:05.720
什么叫容器组件呢 容器组件就是没有界面

13:06.040 --> 13:09.320
但是我给你提供数据 他可以为展示组件提供数据

13:09.880 --> 13:13.080
啊 他在处理状态的 他是在处理状态的

13:13.720 --> 13:16.360
这个呢 我们可以把它叫做容器组件啊

13:17.000 --> 13:19.320
他不是什么DIV的那种容器啊 两把刷

13:20.120 --> 13:24.600
啊 总之呢 我们通过这种方式啊 就得到了一个容得到这个一个新的组件

13:24.920 --> 13:28.520
我们把这个新的组件啊 就可以应用进去啊 应用进去

13:29.720 --> 13:30.440
明白这个意思吗

13:31.160 --> 13:33.160
ok啊 好 那么这个

13:34.120 --> 13:38.200
这种呢 还可以进行减一些啊 还可以进行减一些

13:39.560 --> 13:43.000
啊 写成这种格式 跟以前的西方没大区别啊

13:44.440 --> 13:45.800
做一个新的组件出来

13:47.560 --> 13:52.600
啊 甚至呢 由于由于这个页面上呢 你看一下这个页面 其实也没有啥东西对不对

13:53.080 --> 13:58.120
他没有别的东西了 他只有一个表格 因此呢 你甚至可以直接把这个导出啊

13:58.520 --> 13:59.800
你甚至可以把直接导出

14:00.760 --> 14:01.240
export

14:02.200 --> 14:04.520
default 直接把这个玩意导出都可以

14:05.960 --> 14:07.720
这里 我们就把下面的个删掉了啊

14:09.000 --> 14:13.400
啊 这样子也没问题啊 也没问题 好 把运行出来啊 把运行出来

14:16.780 --> 14:21.430
npm start 好 稍等一下啊

14:23.270 --> 14:26.150
啊 让他慢慢去运行吧 好 我们到这边来

14:26.630 --> 14:32.310
让他慢慢运行啊 好 这里呢 我把数据给他打通了啊 把数据给他传过去了

14:33.030 --> 14:40.070
好 那么这边呢 我们来测试一下啊 测试一下 看能不能获得这些数据啊 我们这里给他写个生命周期函数

14:41.110 --> 14:41.990
component

14:42.550 --> 14:43.350
component

14:43.910 --> 14:44.550
dedemount

14:45.190 --> 14:45.750
dedemount

14:47.110 --> 14:49.190
啊 看一下能不能获得数据啊

14:50.470 --> 14:51.670
这里console log

14:53.270 --> 14:54.310
zdir props

14:55.350 --> 14:59.830
常库里面的数据 该答应出来 其实这里呢 你不要假设他为常库里面的数据

15:00.230 --> 15:06.710
在这个组件里边 你是并不知道他的数据哪来的啊 我们这里不要去做这种假设啊 保存一下

15:07.990 --> 15:13.050
啊 看一下这个控制台里面 稍等啊

15:15.620 --> 15:22.020
这里怎么回事啊 这边啊 他有个警告 一个警告倒是不影响啊 不影响啥

15:22.420 --> 15:29.620
这个警告呢 他是说 他是说你这里啊 这个reaction没用了啊 倒这个reaction没用了 那你不如把他删了

15:30.580 --> 15:30.980
ok

15:31.940 --> 15:32.980
3吧

15:35.590 --> 15:36.870
好 这里看一下啊

15:38.230 --> 15:43.270
到这边来 我们看一下这个电影列表 进入电影列表的时候 他报错了

15:44.470 --> 15:45.750
啊 看一下报什么错啊

15:47.110 --> 15:51.670
他说无法找到常库 对吧 无法找到store

15:52.310 --> 15:57.830
在上下文中无法找到store 这是怎么回事呢 我们这里还忘了做一件事啊 还忘了做一件事

15:58.310 --> 16:04.310
就是在这 我们 我们要把这个redux的仓库啊 要使用到我们的工程中

16:04.870 --> 16:09.350
还要做一件事啊 就是要加一个根节点 对吧 要为整个应用程序加一个根节点

16:09.670 --> 16:16.870
好 我们把导入进来啊 以前都做过的 对吧 这里呢 我也忘了啊reaction redux

16:17.670 --> 16:23.190
好 这里边 我们导入一个provider 对吧 一个数据提供器

16:24.070 --> 16:27.190
他做一个根节点 把整个应用程序包起来

16:28.150 --> 16:33.830
为整个应用程序 为整个组建数提供啊 提供数 提供数据

16:34.390 --> 16:37.590
那么这里呢 他提示你有问题 什么问题呢 他说

16:38.230 --> 16:43.830
你还有一个属性是必须要配置的 就是store这个属性必须要配置 ok 我们配置呗

16:44.390 --> 16:50.870
store 配置为啥呢 配置为我们从仓库里边把这个store导入进来啊 咱们之前不是写了仓库吗

16:51.590 --> 16:53.030
把这个store导入进来

16:56.860 --> 16:57.180
from

16:59.980 --> 17:00.620
redux

17:02.700 --> 17:08.170
store 把这个仓库导入进来啊 store

17:09.450 --> 17:20.620
好 保存一下啊 再来看 这里电影列表进去啊 你看

17:21.660 --> 17:26.700
电影列表里边 我们打印出来了 什么东西就在这东西打印出来了啊

17:27.500 --> 17:28.220
这东西都有了

17:29.500 --> 17:34.860
好了 那么有了这些东西之后啊 有了这些东西之后 我们就可以

17:35.500 --> 17:42.380
在这边啊 有些人有的数据了吧 对不对 我们在这边就可以显示一个表格了啊 就可以把表格显示出来

17:43.100 --> 17:46.940
那么现在呢 我们希望的是啊 用的是nd

17:47.420 --> 17:53.100
不是自己写表格 用nd的组建来显示表格 好 我们这里呢 可以找到nd的官方文档

17:53.900 --> 17:57.100
啊 可以找到nd的官方文档

17:58.380 --> 18:01.500
看一下它里边表格啊 表格是撒写的

18:04.180 --> 18:09.860
主建其实就是个table啊 就是个table 我们看着文档做吧 因为这里表格的东西呢比较多

18:12.820 --> 18:13.700
好 稍等一下啊

18:15.300 --> 18:18.980
哎 他说这里为什么说是英国的 然后这里是确实是中文

18:23.350 --> 18:28.150
好 这就是个表格 表格的最基础用法无非就是给他两个属性

18:28.870 --> 18:34.790
一个属性的是data source 表示数据源 也就是一个数组 就是电影的数组 对吧

18:35.350 --> 18:44.550
另一个属性的是一个列的配置 他要显示哪些列啊 列的配置 其实基础上呢 基本上你有了这两个属性之后了就够了啊就够了

18:45.350 --> 18:52.310
好 我们这里呢 可以这样来做啊 我们这里先导入这个表格 从nd里面导入这个表格

18:53.430 --> 18:54.070
table

18:54.870 --> 19:05.350
然后from nd 好 从这里边呢 导入一个表格 然后这里显示啥呢 显示的是无非就是一个table 对吧 无非显示就是这么个玩意

19:06.790 --> 19:07.990
好 显示一个table

19:09.350 --> 19:15.030
好 这个table里边有两个属性 我们要给他复制 一个是data source 给他复制

19:15.590 --> 19:24.550
还有一个属性是啥呢 是close 给他复制 给他复制这两个属性就完事了 我们指着他看一下啊 这个data source

19:25.110 --> 19:30.150
他告诉你 也要得到的是一个什么 是一个数组啊 一个数组

19:30.950 --> 19:37.430
因此呢 我们只要给他一个数组就完事了啊 只要给他一个数组就完事了 实际上这个table是一个翻译型啊

19:37.830 --> 19:47.430
实际上这个table是一个翻译型啊 因此呢 你这里呢 有没有给他指定那个类型t 所以说你给他的数组呢 随便吧 你只要给他就完事了啊 就是一个普通对象数组而已

19:48.230 --> 19:53.750
好吧 好 我们这里呢 可以用这种方式啊 get

19:54.950 --> 20:04.230
在这里面写个方法get data source 其实我这里不用get data source了 直接从属性里面取就完事了 对吧 this props

20:05.110 --> 20:11.670
属性里面不是有一个你看有智能提示的啊 有个data你看 是不是电影数组啊 把电影数组给他就完事了

20:12.310 --> 20:21.110
这就是我们要显示的数据 好close呢 这个列的配置呢 确实需要写一些啊 列的配置需要写一些 我们这里呢 写个函数吧

20:21.750 --> 20:27.590
啊 我们这里写个私有的函数 只要只需要自己用就行了 别人不不需要用好get

20:28.550 --> 20:29.270
close

20:29.990 --> 20:38.390
啊 写这么一个函数 这个函数呢 来获取列的配置啊 来获取列的配置 好 这里面配置有点多啊 肯定有点多

20:38.950 --> 20:46.550
我们就这里先返回 先返回一列吧 先返回一列 好 列的配置里面每一个列呢 它就是一个对象

20:47.110 --> 20:53.670
你看这边 每一个列就是一个对象 title表示啥意思呢 title表示这个列的啊

20:54.230 --> 20:59.510
这个列的啥 这个列的标题啊 这个标题 先列的配置这里 我们指着他看一下

20:59.990 --> 21:04.390
他告诉你啊 他告诉你这个列的配置是啥呢 本质上是啥 就是一个

21:04.950 --> 21:09.270
叫做column props i move的一个数据

21:09.670 --> 21:14.390
啊 你都不用管它是啥 你把这东西复制一下 作为这个函数的反回类型就完事了

21:14.870 --> 21:19.590
啊 作为这个函数的反回类型就完事了 我们把这里修复一下啊 导入进来

21:20.070 --> 21:24.950
啊 导入进来啊 就是这么一个 就是这么一个数据啊 一个

21:25.510 --> 21:29.110
一个数据 那么这里面就可以获得智能提示了 你看 这样子

21:30.310 --> 21:36.230
title 你看就智能提示了 好 这里呢 我们写上啊 电影的名称

21:37.110 --> 21:37.990
电影的名称

21:39.990 --> 21:42.710
好 然后呢 还有什么要配置的呢

21:43.670 --> 21:49.510
还有这个data index 啊 data index 这个表示啥意思 这个表示的是

21:49.990 --> 21:58.950
这引力要显示的属性名啊 要显示的属性名 那么属性名显示啥呢 显示的是mv里边的啥呢 mv里边的

21:59.910 --> 22:02.070
name啊 mv里边的name

22:02.630 --> 22:07.750
对吧 mv里边有有这个name属性 因此呢 我这里要显示啊 mv里边的name

22:08.150 --> 22:13.990
好 写到这呢 你会发现呢 他这里写的有点不太好啊

22:15.110 --> 22:20.070
其实也不是说不太好吧 嗯 他可能考虑的问题更更加

22:20.870 --> 22:25.430
通用一点啊 就是什么意思呢 就是说是这里呢 他没有智能提示

22:26.470 --> 22:28.870
我这里呢 肯定是设置了他的属性名 对吧

22:30.150 --> 22:35.190
设置的是这个mv的属性名 但是呢 他这里没有智能提示啊 没有智能提示 为什么呢

22:35.510 --> 22:42.310
因为他对他的类型约束这一块啊 我们转到定义看一下啊 f12转到定义 你看一下这个

22:43.510 --> 22:49.350
column props啊 看一下这里 他这个data index啊 是个可选的属效

22:49.670 --> 22:54.710
这个data index他是一个字幕创 他用的是字幕创约束啊 他用的是字幕创约束

22:55.670 --> 22:59.750
如果我希望获得智能提示的话 大家想一想 我这里应该怎么写

23:00.710 --> 23:04.550
如果我要获得智能提示的话 想想我这里应该怎么写

23:05.750 --> 23:13.190
我这里是不是可以把它写成qft 对吧 好 比方说这样该改了一下 改了一下过后了

23:13.670 --> 23:18.870
qft表示什么意思 表示t里边的所有的属性名的

23:19.590 --> 23:24.470
联合类型 对吧 好 我这里可以 这样子写了之后呢 我们看一下啊 看一下这边

23:26.790 --> 23:33.830
你看 是不是能够获得智能提示的啊 这样子要舒服一点啊 要舒服一点 好 我们继续写啊 就第一列

23:34.390 --> 23:43.430
然后第二列 第二列 第二列名字 电影名字 电影名字还有啥 我们看一下data index吧 我忘了就从这里面去找一找

23:44.310 --> 23:49.270
呃 地区啊 地区还有什么海豹对吧 海豹

23:50.150 --> 23:55.910
啊 我们看一下显示一个地区吧 啊 地区 areas

23:56.790 --> 24:01.750
啊 这里地区 好 咱们来看一下啊 咱们来看一下显示出来啥样子

24:02.390 --> 24:05.350
好 这可能是呢 我就可以通过啊 this

24:06.230 --> 24:11.830
第二get可能是来得到啊 列的配置啊 两个内容是匹配的 那没有什么问题

24:12.310 --> 24:15.110
好 我一会呢 列的配置就全部写到这啊 全部写到这

24:15.910 --> 24:19.670
好 保存一下 咱们看一下表格数据能不能显示出来

24:21.110 --> 24:25.270
啊 咱们看一下啊 表格的样子倒是出来了 数据没有

24:26.150 --> 24:28.630
数据跑哪去了 数据是哪去了

24:29.350 --> 24:34.390
怎么回事呢 是因为仓库里边啊 仓库里边现在呢 还没有数据

24:35.350 --> 24:37.910
还没有数据 你看我们仓库里边是加了那个

24:38.870 --> 24:42.870
就是日治中间建的 他有仓库的变化的话 那么他会打印到控制台

24:43.430 --> 24:45.190
说明现在仓库里边还没有数据

24:45.830 --> 24:50.390
仓库里边为什么没有数据呢 是因为仓库里边我还没有去触发啥呢

24:50.710 --> 24:51.990
还没有去触发那个

24:53.110 --> 24:53.510
就是

24:54.470 --> 24:58.870
仓库里边是不是要能够触发啊 一个远程的请求 对吧

24:59.190 --> 25:03.670
我们现在要去触发这个x形来完成这样的操作 好 那么这里呢

25:03.670 --> 25:10.340
一个问题就是什么史呢 这个史呢 这个史呢 这个史呢

25:10.340 --> 25:15.220
这个史呢 这个史呢 这个史呢 这个史呢 这个史呢

25:15.220 --> 25:19.940
这个史呢 这个史呢 这个史呢 这个史呢

25:20.260 --> 25:25.060
来完成这样的操作 好 那么这里呢 一个问题就是什么时候

25:25.700 --> 25:28.260
触发呢 什么时候触发

25:30.540 --> 25:34.540
这里呢 其实取决于你怎么去想这个问题啊

25:35.100 --> 25:38.140
如果你认为是进入这个页面之后

25:38.700 --> 25:42.780
我们就要触发这个x形的话 那么你应该把这个触发x形的操作呢

25:42.780 --> 25:45.340
写到页面的生命周期里边 对吧

25:46.220 --> 25:48.940
如果你认为触发这个x形的操作呢 是

25:49.500 --> 25:53.740
放到组建里边 就是进入这个组建过后呢 就可能要触发

25:53.740 --> 25:56.620
那么你应该把触发的操作呢 写到组建的

25:57.180 --> 25:59.900
相应的生命周期函数里边 就看你去怎么想

26:00.860 --> 26:03.340
前端目前这一块呢 没有形成一个

26:04.140 --> 26:06.700
最佳解决方案 也就是最佳实践

26:07.340 --> 26:12.380
因此呢 才会有这么多的脚手架啊 各种脚手架呢 有不同的处理方式

26:13.260 --> 26:17.740
这里呢 我们选一种吧 比方说我们就再练习一下 就顺便练习一下啊

26:18.060 --> 26:22.460
我们之前不是做了这个东西吗 不做这个config 是吧 对吧

26:22.860 --> 26:27.100
映射的属性 我们还没有去练习 映射事件 对吧 我们就来练习一下

26:27.660 --> 26:31.740
OK呢 我们就在这个组建里边啊 写一个生命周期函数

26:32.060 --> 26:34.780
然后在这儿啊 写个生命周期函数叫component

26:35.260 --> 26:36.220
比方说deadmont

26:37.500 --> 26:39.900
就是组建完成夹载之后啊

26:40.460 --> 26:43.420
组建完成夹载之后 我要扔出一个事件

26:43.900 --> 26:46.140
在这个事件里边呢 有可能啊

26:46.620 --> 26:51.980
当然你可以做任何事情 我这里呢 有可能会出会去触发一个action来获取数据

26:52.540 --> 26:57.100
啊 比方说我写这么一个事件 好这个事件呢 我要通过这个属性扔出去

26:57.660 --> 27:01.660
对吧 我要通过一个属性把这个事件啊 给它扔出去

27:02.700 --> 27:05.820
那么这样子一来 我的属性里边是不是要多一个事件啊

27:06.460 --> 27:13.020
对不对 我的属性里边要多一个事件好 我这里呢 我们写这么一个属性的内形

27:13.980 --> 27:18.220
你看现在要遇到一些问题啊 就是这里我应该怎么怎么写呢 我应该是这样子写的

27:18.940 --> 27:22.380
这里 这里代码应该是这样子写的

27:24.140 --> 27:27.740
嗯 怎么回事 我的键牌咋了 为什么太不接起不了作用了

27:29.500 --> 27:32.220
没事 我这样子写吧 直接写吧 嗯 如果

27:32.780 --> 27:36.060
当前的属性中 比方有个事件啊 叫做onload

27:36.780 --> 27:40.860
onload 完成夹载之后啊 完成夹载之后的事件

27:43.140 --> 27:45.700
我这里 我把这个关了 重新打开一次啊 我这个

27:47.940 --> 27:52.180
键盘有些智能体制不起作用了 键盘的一些键不起作用了

27:55.910 --> 28:03.000
稍等一下啊 先写吧啊 一会再说 再说这个问题

28:03.560 --> 28:10.840
好 我如果发现这个属性里边啊 这个属性里边有这么一个事件的话 那么我们这里呢 要去调用这个事件啊

28:12.280 --> 28:15.080
onload这个事件 如果有的话 我们要去调用

28:16.520 --> 28:18.200
好 写好了之后呢 他要爆错

28:18.920 --> 28:22.280
他为什么要爆错呢 因为根据当前的这个

28:23.080 --> 28:27.480
属性的内形啊 就是props的内形 这个内形里边有没有这个onload

28:28.280 --> 28:30.440
是没有 他说不存在这个onload

28:31.080 --> 28:36.680
那怎么办了这个时候 我们可以再给他加一些属性呗 对不对 给他加一些属性

28:37.160 --> 28:41.560
接口吗 接口是不是可以继承的 对不对 可以继承 好 我们这里呢

28:42.200 --> 28:44.360
自己再自己再写个接口 interface

28:44.680 --> 28:49.000
props啊 给他取名为itable

28:49.720 --> 28:52.760
immovi table props

28:53.480 --> 28:58.760
好 用这个接口呢 去继承啊 去继承immovi state

28:59.720 --> 29:04.120
好 然后给他加一些属性不完了嘛 对不对啊 有个onload的啊

29:04.360 --> 29:10.760
这是一个函数 函数内形呢 他没有参数啊 返回内形握以的 你去做一些事就行了啊 表示

29:11.480 --> 29:15.180
给他个注释啊 大个注释

29:16.220 --> 29:18.220
好 表示的是什么 表示的是

29:20.300 --> 29:23.980
完成加载之后的

29:25.340 --> 29:27.980
事件 完成加载之后的事件

29:29.020 --> 29:32.540
好 加了属性过后呢 我们把这个东西放过来 这东西放过来

29:33.020 --> 29:34.700
那你看 现在这边不爆错了啊

29:35.420 --> 29:37.980
好 有了这个事件过后呢 我们再到这边来

29:38.700 --> 29:41.660
再到这边 无非逆手这边来 好 之前呢

29:42.300 --> 29:46.780
我映射了属性 对吧 映射了属性 那么现在呢 我还要映射事件

29:47.740 --> 29:50.780
好 方可行 方可行 map

29:52.460 --> 29:55.580
dispatch to props

29:57.180 --> 30:01.820
再写一个函数 映射一个事件 好 这个事件里边呢 他要提供一个dispatch

30:02.780 --> 30:03.980
要提供一个dispatch

30:04.700 --> 30:07.260
提供一个dispatch参数呢 这个什么类型呢

30:07.500 --> 30:10.860
这个类型呢 其实别人已经给你做好了啊 你直接用就行了

30:11.100 --> 30:15.340
dispatch这个类型呢 在瑞大克斯里面本身就有 对吧 就叫做dispatch

30:16.380 --> 30:18.540
直接导入进来就完事了啊 导入进来就完事了

30:19.980 --> 30:24.460
好 这个dispatch 那么它是一个翻型 这个翻型表示action的类型

30:24.860 --> 30:28.940
表示的是action的类型 那么action的类型呢 我们这里可以用啥呢

30:29.740 --> 30:31.820
可以用我们之前写过的这个

30:32.540 --> 30:35.580
在仓库里边写过了这个action type

30:35.580 --> 30:37.580
不是在这个move action里边

30:37.980 --> 30:42.060
因为我这里是触发跟move相关的action 对吧 我们把这个moveaction给它放进来

30:42.860 --> 30:44.940
给它放进来修复一下 导入

30:46.140 --> 30:48.300
好 在这里边呢 我要返回啥呢

30:48.860 --> 30:52.460
我要返回啥 我要返回的是什么呢 我要返回的就是

30:54.060 --> 30:57.580
相应的这个属性啊 相应的这个属性 就是相应的这个事件

30:58.140 --> 31:00.940
好 返回的时候呢 这里是没有智能提示的

31:01.500 --> 31:03.900
你不知道有哪些事件啊 你是没有智能提示的

31:04.460 --> 31:06.700
好 如果要获得智能提示

31:07.420 --> 31:12.060
咋办 如果你要获得智能提示 你是不是要在这里约束一下

31:12.620 --> 31:14.140
约束一下返回内行

31:14.700 --> 31:18.940
这个函数的返回内行 对不对啊 如果你不想获得智能提示 那就无所谓了

31:18.940 --> 31:20.700
你不想获得内行检查 那你随便

31:21.500 --> 31:25.020
如果你想要获得内行检查 那你肯定要约束一下返回内行

31:25.580 --> 31:29.100
那么返回内行我咋约束呢 你看这里又出问题了

31:29.820 --> 31:32.140
我这个返回内行能不能约束为这个玩意儿呢

31:33.100 --> 31:37.740
能不能约束为他 你不能约束为他呀 你约束为他的话 那么

31:38.220 --> 31:41.660
就意味着他的属性也要全部给 对吧 你这样约束的话

31:42.060 --> 31:45.580
你要光写一个onload还不行 你光写一个onload还不行

31:46.220 --> 31:49.100
你还得给一些属性啊 属性你也得给

31:49.660 --> 31:51.820
那这样子不合理 对不对 不合理

31:52.380 --> 31:57.100
所以说呢 我们这里应该怎么办呢 我们这里可以用这种方式来处理

31:57.980 --> 32:01.580
你属性是啥 属性是这个 对吧 属性已经写好了 是这个

32:02.380 --> 32:07.420
那么你的事件呢 事件呢 我们专门来定义一个结果 专门来写事件

32:08.540 --> 32:12.780
i movie table event事件

32:13.900 --> 32:16.540
事件专门来写这么一个结果来定义事件

32:17.100 --> 32:20.860
然后这是事件刚才那个呢 i movie state

32:21.500 --> 32:26.220
i movie state 是属性对吧 这里面包含的是属性 这里面包含的是事件

32:26.700 --> 32:29.180
然后这里边我怎么写呢 我就可以这样子写

32:30.460 --> 32:32.060
i movie state

32:32.780 --> 32:36.060
用交叉类型把两个东西联合起来说就完事了

32:37.340 --> 32:38.940
movi table events

32:40.060 --> 32:44.780
要用交叉类型啊 不是联合类型 联合类型的话是可以是这个可以是这个

32:45.100 --> 32:51.340
而交叉类型的话是两个把它连把他东西呢放到一起啊 相当于是混合 把混合到一起

32:52.380 --> 32:55.260
好 这样子写了过后呢 你看这边我就可以这样操作了啊

32:55.500 --> 33:00.060
这边是映射属性对吧 我这里甚至可以给你返回一个叫i movie state

33:00.620 --> 33:07.020
可以给他标注一下 好 这里呢是什么是事件事件的话 i movie state

33:07.740 --> 33:09.580
i movie table

33:11.660 --> 33:17.500
看一下啊 这边 i movie table 把导出啊 export导出 i movie table events

33:18.700 --> 33:20.300
好 我这里可以约束于这个类型了

33:21.260 --> 33:25.340
啊 如果你希望获得类型的检查的话 你肯定要这样做

33:26.460 --> 33:30.460
好 这样子写的过后呢 你看 现在就有提示了啊 unload 是不是啊

33:31.020 --> 33:34.940
啊 他是一个函数啊 你刚如果乱复值的话 肯定不行 他是一个函数

33:35.260 --> 33:41.100
好 这个函数呢 没有参数啊 没有参数 unload 的时候要做啥呢 要做啥 是不是就dispatch一下啊

33:41.580 --> 33:47.420
dispatch 什么呢 来自于一个x型的创建函数 就是movix

33:47.900 --> 33:49.900
创建一个啊 废起movix

33:51.660 --> 33:55.500
条件 条件是啥呢 好 这里怎么来获得

33:56.380 --> 34:02.140
条件啊 其实这里的条件应该来自于哪啊 应该来应该来自于哪

34:04.060 --> 34:05.980
应该来自于哪 是不是来自于

34:07.420 --> 34:14.300
仓库里边的条件啊 或者是一个默认值啊 或者是一个初始值都可以啊 来自于仓库的条件或者是

34:15.180 --> 34:20.460
一个默认值啊 刚刚仓库里边本身就有条件 对吧 我们可以给他一个仓库的条件

34:20.780 --> 34:28.060
如果你希望啊 以后切换组件的时候 仓库要重新完成初始化啊 重新回到最初的状态 那么你给一个默认值

34:28.300 --> 34:30.220
好 我们这里可以给他一个默认值啊

34:30.780 --> 34:36.460
好 这里有这么一些数据要填写啊 配几位1 limit为10啊

34:36.860 --> 34:41.020
然后呢 T呢 要为一个空的支付创啊 把这个条件写上

34:41.580 --> 34:45.420
好 写上之后呢 他抱错了啊 他抱错了 他说什么呢

34:46.860 --> 34:52.300
他说你这个参数呢 不能复制给movie action的参数 是怎么回事呢

34:52.940 --> 35:00.140
怎么回事呢 是因为我这里的action啊 他这个这个东西返回的是一个函数啊 返回的是一个函数

35:00.380 --> 35:04.940
那这里的返回的是啥呢 这里处理得到了东西是啥呢 这里得到的东西呢

35:05.660 --> 35:09.900
是一个普通的action对象 啥意思啊 就是我们之前遇到那个问题

35:10.300 --> 35:14.540
就是action的他本来是一个普通对象 对吧 他要求有type属性 有payload属性

35:14.860 --> 35:18.540
是一个普通对象的 但是呢 由于你这里触发的是一个函数

35:19.020 --> 35:23.420
我们这里是用上可写的 对吧 这个函数运行完了之后 他触发的是一个函数

35:23.740 --> 35:29.500
因此呢 他不满足这个内容匹配 那这里呢 我们简单处理一下吧 这里不用纠结了啊 我们简单处理一下

35:29.740 --> 35:33.260
把这个地质趴行呢 这里直接设置为Ending 设置为Ending就完事了

35:34.220 --> 35:39.020
好 写好之后呢 我们把这个东西 这个东西都放到Connect是那边

35:39.740 --> 35:43.980
map dispatch props 好 放进去 我们再保存

35:44.860 --> 35:48.860
好 我们再到一面上看一下 再到一面上看一下啊

35:51.370 --> 35:56.810
哎 我这里停止了 怎么停止了啊 刚才关掉一次对吧 关了一次

35:56.810 --> 36:00.250
OK 我们这里把重新运行起来啊 先把服务器启动起来

36:01.210 --> 36:04.570
先启动服务器 然后呢 再启动客服端

36:05.290 --> 36:09.290
client 然后再启动客服端npm start

36:11.130 --> 36:18.010
啊 我们这里做慢慢做啊 不要着急 享受这个做的过程 因为这个表格这里呢 有很多地方要讲解

36:23.860 --> 36:27.300
好了 那现在呢 我把启动起来啊 等一下我来看一下这个页面

36:27.700 --> 36:32.100
现在我们可以映射属性 也可以映射事件了啊 也可以映射事件了

36:32.500 --> 36:35.460
当然有些地方呢 我没有把它处理得太复杂 比方说这里要做到

36:35.940 --> 36:40.180
要做到完整的类型检查的话 处理起来没有那么简单的啊 因此呢 有些

36:40.740 --> 36:45.300
用ts啊 我去个人觉得吧 不要走火入魔啊 你不要走火入魔

36:46.340 --> 36:54.660
你他是用来解决方便你开发代码的啊 但是呢 有些地方呢 你要去做一些类型检查 跟一些枯结合型来做类型检查的

36:54.900 --> 37:00.900
确实不太方便 除非非常非常大型的系统 或者是公司里面有严格的要求 你可能要去做

37:01.380 --> 37:07.300
否则的话 你如果公司里面没有严格的要求的话 尽量以自己啊 方便自己为主

37:07.940 --> 37:12.900
好 这里运行出来了啊 我们看一下电影列表啊 你看数据是不是出来了啊 数据就出来了

37:14.180 --> 37:19.620
好 那么现在呢 显示了电影的名称 显示了电影的地区 我们再一步一步来做啊

37:20.020 --> 37:25.060
我们可以看到这个地区这里呢 有点问题 我们希望地区之间呢 用一个兜号分隔

37:26.020 --> 37:35.060
我希望地区之间用一个兜号分隔 那么这个时候咋做啊 这是以前的知识啊 没有什么难的 好 地区这里呢 我们要特殊处理一下

37:35.460 --> 37:41.300
由地区这里的数据呢 他不仅仅是直接 他不是直接显示这个数项

37:41.860 --> 37:43.780
而是 他要把这个数项

37:44.340 --> 37:47.620
他是一个数组嘛 对吧 这个数项是一个数组 他要把这个数项呢

37:48.100 --> 37:53.300
裁分出来 然后来进行啊 把它转换成字布串 他本来是一个数组 把它转换成字布串

37:53.780 --> 37:59.780
那么这个东西怎么来处理呢 实际上这个东西在在这里边有提到啊 就是说你可以使用

37:59.780 --> 38:03.380
Render这个函数啊 你看这里 比方说他要显示这个玩意

38:03.700 --> 38:09.380
你看显示这个玩意 这个玩意肯定不是直接显示一个属性值就完事了 对吧 他要显示一些其他的组件

38:09.700 --> 38:11.380
那么这个时候呢 你可以使用Render

38:12.180 --> 38:19.860
Render这个函数里边呢 他能够提能够给你提供啥呢 能够给你提供当前你属性的文本以及

38:20.500 --> 38:23.380
整个这个对象啊 整个这个对象

38:24.180 --> 38:28.980
好 那么比方说 我们这里呢 在Render的时候啊 我们这里编写个Render

38:30.100 --> 38:36.260
啊 你看有这种提示的啊 Render里边呢 给提供一个text啊 一个record啊 一个record

38:37.380 --> 38:41.700
这是写这么一个函数啊 这个Render要返回一个东西啊 你看

38:42.260 --> 38:47.060
如果你以前忘了返回 他是不会爆错的 但是现在你必须要返回 你必须要返回一个东西

38:47.540 --> 38:53.540
用于显示的东西 Render返回的是什么呢 比方说 我们返回的是

38:55.540 --> 38:58.740
一个he元数 随便写 好 保存一下

39:00.020 --> 39:03.860
到这边来看一下啊 那和这里就显示了一个he元数了

39:04.660 --> 39:09.140
懂这个意思吗 好 所以要这里呢 要显示什么 完全有力自己来决定

39:09.860 --> 39:15.860
好 这个tags是啥呢 我们把这个tags和record打印出来看一下是啥 text和record

39:17.220 --> 39:26.310
record打印出来看一下是啥啊 这里我刷新识啊

39:28.630 --> 39:30.710
这里又包了两个错 我们等一下看什么错误

39:31.750 --> 39:35.350
好 打印出来过后呢 我们看一下Render打印出来啊 在前面

39:39.380 --> 39:42.260
等一下啊 我们等一下说这个错误啊 等一下说这个错误啊

39:43.540 --> 39:46.340
我看一下在哪呢 我这些全都是对啊

39:47.060 --> 39:52.340
开发 程序开发不需要势力 这些全都是对吧

39:52.740 --> 39:57.540
一个是就是tags表示啥意思呢 就表示这个属性的值啊 就是个属性的值

39:58.020 --> 39:59.860
其实我们可以用这个属性 用prob

40:01.940 --> 40:04.660
怕容易混淆 就用这个tags 表示个属性的值

40:05.300 --> 40:09.860
一个数组 而这个record表示啥呢 这个record表示的是当前那个对象

40:10.100 --> 40:12.660
当前那个对象啊 全都是 我怎么看不见呢

40:13.220 --> 40:15.220
好 那么这里呢 我们要显示啥呢

40:15.700 --> 40:19.940
返回的是一个啥 我们就直接返回的一个制服串啊 直接就返回一个制服串

40:20.260 --> 40:22.740
就是我这个record都不要了 对吧 都不需要了

40:24.660 --> 40:30.660
这里tags呢 我们可以对他约束一下啊 他实际上是一个啥呢 是一个数组啊 是一个数组

40:31.140 --> 40:37.540
好 那么这里呢 我们可以啊 这里这样子写啊 tags 约束一下啊 扩起来约束一下

40:38.340 --> 40:41.700
他是一个数组 他是一个什么数组呢 他是一个制服串的数组

40:42.180 --> 40:48.420
啊 是个制服串的数组 好 那么这里呢 返回的是什么呢 text join join 斗号分隔

40:49.540 --> 40:53.640
好 保存 咱们来看一下 好 你看

40:54.600 --> 40:59.640
是不是显示出来了啊 斗号分隔啊 斗号分隔 或者说你用斗号加一个空格来进行分隔

41:00.840 --> 41:03.800
这样子分开一点啊 好 差不多了

41:04.440 --> 41:08.360
好 接下来我再说一下这里的错误啊 这里的错误之前没有注意

41:08.840 --> 41:15.320
这里的错误就是他没有key子啊 没有key子 这个key子是怎么回事呢 这个key子是咋回事呢 就是说

41:16.680 --> 41:22.680
呃 咱们之前你们学着react的时候 反而是要宣扬一些兄弟元素的时候

41:23.400 --> 41:28.600
宣扬一些兄弟元素的时候 是不是要给每一个兄弟元素一个key子来提高他的宣扬效率

41:28.600 --> 41:33.480
对吧 至于他为什么能提高宣扬效率 他是react的支持了啊 我这里就不会扯远了

41:33.640 --> 41:36.360
又要设立到react了 就是虚拟动物宣扬的方式

41:38.440 --> 41:42.200
总之我们需要给他一个key子来提高宣扬的效率

41:42.920 --> 41:43.560
而这里呢

41:44.360 --> 41:50.280
由于这里他有很多的兄弟节点 因为他要宣扬一个表格嘛 他又产生很多的兄弟节点 他并不知道

41:50.840 --> 41:52.200
每个兄弟节点的key子是什么

41:52.760 --> 41:58.280
因此呢 我们要把这个key呢手动给他啊 我们在这个table里边 其他一点提示你的 对吧

41:58.600 --> 42:03.080
他提示你说 你应该在这个table里边啊 设置一个叫做row key

42:03.640 --> 42:06.840
说是设置一个row key 就是每一行的key子是什么

42:07.400 --> 42:11.400
好 我们这里设置一下啊row key 有这种提示的

42:12.040 --> 42:17.080
好 设置为啥呢 我们指的他什么类型 你看一下 就是个字不错的一行啊 就个字不错的一行

42:17.400 --> 42:20.760
好 我们这里呢 设置为什么呢 为下滑线id

42:22.600 --> 42:25.560
好 保存一下 好 你看现在是不是不爆错了

42:26.440 --> 42:32.600
ok啊 我们把这两个搞定了啊 这两列搞定了 然后我们继续写啊 还有很多的列 我们要一个个处理

42:33.320 --> 42:38.520
啊 表哥这里的东西有点多啊 其实大部分东西都是你前面学过的啊 第一个

42:40.920 --> 42:44.680
是内详啊 内详电影的内详 那么这里现在是taps

42:45.240 --> 42:50.200
好 type 是不是一样的 对不对 这里的处理是一样的啊 处理是一样的 好 我们继续啊

42:51.000 --> 42:51.400
然后

42:52.680 --> 42:55.400
内详我们看一下 写个去看一下看一下

42:56.120 --> 43:01.480
好 然后呢 我想来第一点给他加个图片啊 加个图片 就来显示他的

43:01.960 --> 43:10.360
就是那个啥 显示他的封面图啊 显示他的封面图啊 加一个图片吧 加一个图片

43:11.160 --> 43:14.520
好 那么第一点啊 我在名字前边加一列

43:16.440 --> 43:21.960
加一列 显示封面图 也就是显示的是poster 啊 poster 这个署项

43:22.840 --> 43:29.960
好 这个封面图呢 他有可能有 有可能没有啊 他有可能有封面图 有可能没有封面图

43:30.440 --> 43:37.240
所以说 这里呢 我们要处理一下啊 他到底有没有封面图呢 我们在宣传的时候呢 要看一下 这里肯定要用宣传函数

43:38.040 --> 43:41.960
你不能直接把这个属性放过来 要这个图片地址干嘛呢 对不对

43:42.600 --> 43:46.120
肯定不能直接放过来 因此呢 我们这里需要一个宣传函数来帮我们搞定

43:46.760 --> 43:53.240
好 这个图片的地址src啊 就是emg url 或者叫poster 直接把个属性名写过来吧

43:53.800 --> 43:55.880
poster 写过来 好 表示的是

43:56.280 --> 44:03.560
这个封面图 那么这里呢 我判断一下 如果有封面图的话啊 如果有封面图的话 那我就反悔个啥

44:04.440 --> 44:08.600
反悔了个啥 反悔一个emg 元素呗 对不对 反悔个emg 元素啊

44:09.720 --> 44:15.160
好 这个emg 元素呢 给他一个src src属性呢 等于啥呢 就等于这个poster 对不对

44:15.880 --> 44:23.320
好 如果没有封面图的话啊 如果没有封面图的话 我可以给他一个默认图片啊 比方说给他一个默认图片

44:23.800 --> 44:28.840
而默认图片呢 我们这里 我在桌面上放了一张默认图片 给他看一下啊 就这张图片

44:29.400 --> 44:34.360
我就给他这张图片啊 好 我这里呢 把这个图片加到加到工程里边去

44:35.080 --> 44:40.200
好 我这里该出了src 建立个文件夹而set 存放一些签入的资源

44:41.800 --> 44:47.640
好 加进去啊 那么这里呢 我们可以使用这种方式把图片放进来 图片的路径放 导入进来

44:48.120 --> 44:58.280
import 因为我这里也是强行去用一下啊 用一下这个图片资源 因为我们这个项目里边 如果这里不用的话 我就不知道什么时候用了

44:58.680 --> 45:02.600
sets 啊 导入这个default poster

45:04.600 --> 45:09.560
导入这个图片 好 这是默认的图片 好 如果没有图片的话 我就使用这张图片

45:10.280 --> 45:14.440
好 这里src导入他 好 看一下啊 这是封面图

45:15.240 --> 45:21.590
封面 好 你看 封面图就出来了

45:22.550 --> 45:29.430
但这个封面图呢 太难看了 真的是太难看了 啊 控制一下吧 啊 控制一下这个封面图的样式

45:29.910 --> 45:36.230
好 封面图的样式呢 我们可以在这个 在这里加个样式吧 加个样式 class

45:37.830 --> 45:44.470
class name table table poster 啊 表格里边的封面图

45:45.430 --> 45:48.070
要加个样式啊 我们在这里同意写这个样式

45:48.870 --> 45:56.230
啊 当然我再说一次啊 样式呢 你完全可以把它放 把它写成一个单独的文件啊 这只有这个主键来用

45:57.030 --> 46:03.430
也可以呢 把它放到一个同意的样式里边 因为我们这个后台里边同样本来样式就不多啊 我就把它放到同一样式里边去

46:04.390 --> 46:12.310
好 这个叫做table poster 啊 table poster 好 给他设置一下图片的宽度

46:13.030 --> 46:17.590
宽度的话 给他设置一个不要那么高了啊 不要那么大了 50个像素吧

46:18.870 --> 46:21.510
哎 有点意思的 对吧 有点意思的

46:22.310 --> 46:27.510
啊 那么封面图这一块搞定了啊 封面图这一块搞定了 或者给他个边框吧 薄的

46:29.110 --> 46:36.790
然后给他两个像素啊 一个像 两个像素soli的边框颜色用白色 咱们来看一下啊

46:37.750 --> 46:40.390
哎 这样子啊 看得就清楚了啊 这一个封面图

46:41.270 --> 46:49.110
好吧 呃 好 那么封面图搞定了啊 封面图搞定了 然后继续看啊 我们还有哪些数据要

46:49.990 --> 46:50.550
显示出来

46:52.470 --> 46:58.870
呃 我们还有哪些数据呢 名称地区啊 我们来这里看一下 因为他有智能提示的 我们来看一下这里还有哪些数据

46:59.750 --> 47:03.270
呃 这里我把它复制一下啊 复制一下 到这边来

47:04.230 --> 47:10.630
明这个data index里边还有哪些呢 地区显示的 id不用显示 id没什么好显示的

47:11.270 --> 47:16.710
表数就不在表格里面显示的啊 表格里面就不显示表数了 还有个时长对吧 时长

47:17.350 --> 47:23.350
好 我们还是用render吧 因为我要后面要加两个字分钟啊 我们还是用一个render

47:24.150 --> 47:31.800
render啊 一个函数啊 这里有就text啊 就是time

47:32.520 --> 47:38.280
好 然后这里返回的是time long 啊 凭借一个两个字分钟

47:39.240 --> 47:48.710
啊 多少分钟啊 保存一下啊 120分钟 ok 没问题了啊 那剩下的还有这么几个属性

47:50.870 --> 47:55.270
还有这么几个属性 怎么属性啊 就是这里啊

47:56.470 --> 48:01.190
还有这么几个属性 就是这个属性的指名字叫做ease hot

48:02.150 --> 48:04.310
ease call me is classic

48:05.110 --> 48:11.110
这三个属性 这三个属性呢 我希望把它显示成啥了 我希望把它显示成一个开关

48:12.150 --> 48:18.310
可以操作的啊 就正在热印即将上引进点影片啊 这是可以操作的啊 这里不是名称 这里是

48:19.030 --> 48:24.630
时长啊 这里是可以操作的三个东西可以操作啊 我们给他取个名字

48:25.350 --> 48:29.190
叫做正在热印啊 正在热印

48:30.390 --> 48:32.550
那么要使用这个属性ease hot

48:33.350 --> 48:40.390
好 这个属性呢 它显示的是一个组件啊 显示的是个组件 那么这种方式呢 大家也操作过对吧 我们这里只要返回个组件就完事了

48:40.710 --> 48:49.670
我们之前不返回个he吗 那肯定还可以返回其他组件 好 返回个什么组件呢 返回我们在表格里面看一下啊 这里我先打开一个窗客

48:50.550 --> 48:55.990
表格里面我们去看一下一个开关组件啊 开关组件 我给他一个开关组件

48:57.190 --> 49:03.750
这里找一找输一起啊 名字叫输一起啊 就这个组件开关啊 这么一个样式

49:04.310 --> 49:10.790
啊 我们只只需要使用他最基本的用法就完事了啊 打开就表示如果他打开了就表示的是这个开关啊

49:11.270 --> 49:15.590
就表示的是正在热印 如果他关闭了就表示没有正在热印 那就完事了

49:16.070 --> 49:22.230
好 那么这里呢 我们只需要去写这个组件就完事了啊 把这个复制一下啊 复制一下

49:23.510 --> 49:27.910
好 放过来 返回这个组件啊 把这个组件导入进来

49:29.030 --> 49:29.750
啊 导入进来

49:31.430 --> 49:35.430
好 导入进来过后呢 我们这里有些东西要配置啊 一个是

49:36.710 --> 49:39.750
一个是他的选中状态

49:40.310 --> 49:48.790
然后选中状态要根据他来复制 对吧 选中状态是根据他来复制的 那么这里我们看一下啊 他里面有一个属相

49:49.270 --> 49:50.630
有个属相叫做

49:52.070 --> 50:01.670
找一找啊 找一找 这个default对 就是个default checks啊 就default checks 就是一开始是选中呢还是没有选中

50:02.230 --> 50:05.990
你告诉他这个默认选中状态 他一开始是选中还是没有选中

50:06.550 --> 50:16.230
好 选中还是没有选中 那么取决于谁呢 取决于这个属性值对吧 那么他是个布尔 你看 这里是个布尔 那么直接复制为这个一直 hot 就完事了 对吧

50:16.630 --> 50:18.230
直接复制为一直 hot 就完事了

50:19.270 --> 50:25.110
好 那么这是默认选中状态 好 接下来我们先不管这个昂签级啊 先不管昂签级 好 保存

50:26.550 --> 50:27.030
保存

50:28.790 --> 50:33.590
好 然后呢你看现在没有选中 那么我们现在试一下啊 在数据库里面给他改一个值

50:34.550 --> 50:35.110
改一个值

50:36.950 --> 50:37.990
我们进数据库啊

50:39.030 --> 50:45.270
我们一块一块做不着急 进数据库然后到这边来改一个一直 hot 啊

50:46.390 --> 50:50.950
这里 edit edit 把这个一直 hot 改为 true

50:51.990 --> 50:56.150
看一下能不能选中啊 保存 啊 这里呢 我们刷新

50:58.150 --> 51:04.870
啊 你看数据选中了 好 那么这一块搞定了啊 我把界面稍微放小一点 不然太大了 好 这一块搞定了

51:05.670 --> 51:08.710
好 这一块搞定了之后呢 我们现在呢

51:09.830 --> 51:13.670
要搞定他就是变化 他变化的时候要做什么

51:14.630 --> 51:23.350
他变化的时候是不是又要改变数据了啊 又要改变数据 而这个改变数据呢 我发现啊 以前咱们仓库里面还没做对吧 好像还没有做

51:23.670 --> 51:28.310
啊 那么现在呢 我们把这个做了吧 把这个功能做了 之前没有想到啊 现在我把想到了

51:28.470 --> 51:31.430
把做了 好 那这里呢 有个事件叫 unchange

51:32.630 --> 51:35.590
当改变的时候我要做啥呢

51:36.470 --> 51:43.990
当改变的时候要做啥 是不是要触发一个事件 你这个在在这个组件里面能不能去完成对数据的操作

51:44.950 --> 51:54.550
不能 这里面你是不能去改变什么属性啊 改变数据库发生啊 家客是请求的啊 不能 因为这是仓库的职责啊 因为这些都这些数据全在仓库里面

51:54.870 --> 52:02.150
你要跟仓库保持一致 所以说这个 unchange啊 你这里不能进行任何处理 你只能扔出事件啊 只能扔出事件

52:02.950 --> 52:10.150
好 扔出事件的时候呢 我们这里要写这么一个事件 现在要多一个事件了 什么事件呢 叫做 un

52:11.270 --> 52:12.070
啊 什么

52:13.350 --> 52:16.470
hot unhot change

52:17.110 --> 52:18.150
unhot change

52:18.950 --> 52:21.510
就是当当当那个啥呢 就是当

52:22.470 --> 52:23.110
is hot

52:25.270 --> 52:26.310
change 当那个

52:27.190 --> 52:29.270
适逢热印啊 适逢热印

52:29.990 --> 52:35.590
改变的时候的事件 那么你可以想象得到那一会儿即将商业是不是也有改变事件

52:36.070 --> 52:38.870
对不对 也有改变事件 还有什么呢 还有

52:39.830 --> 52:39.990
啊

52:40.790 --> 52:46.870
适逢经典影片那一块是不是也有改变事件 那这样子这样子的话我要这里写三个事件

52:47.430 --> 52:53.030
没这个必要 我们写一个事件就行了啊 我们就写一个 unswitch change

52:54.310 --> 52:58.150
当开关改变的时候的事件 这个事件里边

52:59.270 --> 53:03.910
我会告诉你三个东西啊 我会告诉你这么三个东西 第一个东西

53:05.350 --> 53:09.190
你不用返回 你不用返回任何东西给我啊 不用返回任何东西给我

53:09.670 --> 53:15.270
你只啊你我你我告诉你这三个东西 什么东西呢 第一个第一个东西

53:16.150 --> 53:20.230
是内形 是什么东西改变的 是正在热印改变的

53:20.870 --> 53:24.230
还是说啊即将上映改变的 还是说

53:24.950 --> 53:31.350
呃 什么就是经典影片改变的内形 那么内形这里是不是可以用质面量约束

53:31.830 --> 53:33.750
对不对 is hot

53:34.630 --> 53:35.910
有可能是这个属性改变的

53:36.710 --> 53:41.430
有可能的是 is coming 这个属性改变的啊 总之懂我意思吧 可以用

53:42.390 --> 53:45.590
这个质面量类型能不能用美举

53:46.390 --> 53:51.670
所以也可以用美举对不对 美举也可以吧 美举也可以

53:51.990 --> 53:56.790
啊 因此呢 我把它做成美举吧 因为我们好像这里还没用 用到过美举对吧 练习一下嘛

53:57.750 --> 53:59.270
好 美举的话 我打算写到这

53:59.910 --> 54:02.390
啊 公共内形里边啊 写到公共内形里边

54:02.790 --> 54:04.150
好 我们这里导出一个美举

54:05.350 --> 54:05.990
好 赢了

54:06.630 --> 54:07.430
表示的是

54:07.830 --> 54:08.070
呃

54:09.670 --> 54:09.910
呃

54:10.870 --> 54:11.990
switch type

54:13.350 --> 54:14.150
switch type

54:14.630 --> 54:15.510
或者叫做

54:16.710 --> 54:22.390
啊 就这样子写吧 总之取个名字 其实这个名字取的不是很好啊 这样子写 hot

54:24.390 --> 54:25.110
is hot

54:25.830 --> 54:27.510
然后 is coming

54:29.510 --> 54:30.630
啊 is coming

54:31.830 --> 54:33.430
然后呢 什么意思

54:34.070 --> 54:34.710
还有啥

54:35.110 --> 54:36.230
呃 classic

54:38.070 --> 54:39.430
is classic

54:40.630 --> 54:45.910
啊 目前的默认 目前的他真实的值得给他保持一字就完成了 当然也可以不写真实的字

54:46.950 --> 54:53.030
好了 写好了之后啊 写好了之后 那么我们到这边来 这个type呢就可以约数为switch type

54:54.710 --> 54:55.510
啊switch type

54:56.310 --> 54:57.190
啊约数为这个字

54:57.670 --> 55:04.150
好 这是第一个参数 第二个参数是不是要给他改变之后的字 对吧 改变之后的状态啊

55:04.790 --> 55:05.270
呃

55:06.230 --> 55:06.630
change

55:07.510 --> 55:08.630
就是new state

55:09.270 --> 55:11.590
啊改变之后的状态 那么这个是个布尔

55:12.230 --> 55:13.750
啊布尔 我会把这个告诉你

55:14.390 --> 55:15.190
还有啥呢

55:15.510 --> 55:16.390
还有啥要告诉他

55:17.510 --> 55:20.630
你要改变数据 你是不是把得把id告诉他呀

55:21.670 --> 55:23.910
你把id要告诉他呀 不然他怎么改变了

55:24.230 --> 55:25.590
他去找谁改变谁呢

55:25.750 --> 55:26.790
好 你要告诉他id

55:28.790 --> 55:31.590
啊给他这么三个东西啊 有这么一个

55:31.990 --> 55:33.750
有这么一个函数啊 给他三个东西

55:34.310 --> 55:36.310
好 这个函数什么时候调用呢 就在这里调用

55:37.830 --> 55:40.470
啊 当改变的时候 调用哪个函数呢

55:41.670 --> 55:44.630
改变的时候呢 我们能够获取到新的值啊 你看啊

55:45.270 --> 55:45.750
我们这里

55:46.790 --> 55:48.630
改变的时候啊 改变的时候

55:49.350 --> 55:51.030
我们这里是可以获得新的值的

55:52.070 --> 55:54.790
我们看一下他下面的就是实践啊

55:55.510 --> 55:57.430
哦 看这啊 这个unchange

55:58.150 --> 55:59.590
你看这是个函数 他告诉你的

56:00.150 --> 56:02.070
告诉你的啥呢 告诉你的这个check值

56:02.870 --> 56:04.630
这个新的值是啥 是个布尔类型

56:05.190 --> 56:06.390
新的值是个布尔类型

56:06.790 --> 56:07.990
好 那么我们就来呗

56:08.950 --> 56:10.790
他会告诉我一个新的值啊

56:11.030 --> 56:11.590
lvr

56:11.990 --> 56:13.830
一个新的值 那肯定是个布尔类型

56:13.830 --> 56:15.670
因为在ts里面有类型推到

56:16.070 --> 56:17.430
他说这个函数是布尔类型

56:17.430 --> 56:19.270
反正新的值那肯定是布尔类型

56:20.230 --> 56:22.230
好 指着他看一下啊 你看布尔

56:22.950 --> 56:25.510
好 那么得到新的值过后 我们要做什么呢

56:25.670 --> 56:28.070
我们要判断 有没有注册过这个函数啊

56:28.070 --> 56:29.590
其实不用判断的 他肯定要

56:30.070 --> 56:32.070
给我传递这个函数 不用判断了啊

56:32.390 --> 56:34.390
因为我这里没有设置可选

56:34.630 --> 56:36.790
我没有设置可选 所以他必须要传递

56:37.430 --> 56:39.830
如果你设置为可选的话 那么你可以不传递

56:40.230 --> 56:43.110
我这里既然设置了不可选 那你必须要传递

56:43.110 --> 56:43.990
所以说不用判断了

56:44.470 --> 56:45.910
就是直接得到什么呢

56:46.630 --> 56:47.110
得到

56:48.950 --> 56:51.190
呃 zs props

56:52.230 --> 56:55.190
你看一下 在ts里面的好处就在于

56:55.750 --> 56:57.590
像这个地方zs是不是出问题了

56:58.470 --> 57:01.590
zs的指向出问题了 因此呢你是得不到这个 props的

57:02.390 --> 57:05.830
你是得不到的 你别想写 他不会让你写的

57:06.710 --> 57:08.310
啊 你是得不到这个东西的

57:08.470 --> 57:10.950
因为他这一时当前指向的是啥 指向的是这个玩意儿

57:11.830 --> 57:13.190
column props

57:13.590 --> 57:14.630
指向的是这个东西

57:15.430 --> 57:16.630
为什么会指向这个东西

57:16.870 --> 57:18.870
因为我这里使用了普通函数的写法

57:19.670 --> 57:21.270
所以说这里在体识里应该怎么写

57:21.430 --> 57:22.710
这里应该用箭头函数了

57:23.270 --> 57:24.230
因为我要获得zs

57:24.790 --> 57:25.830
好 再看zs

57:26.310 --> 57:27.110
诶 现在就对了

57:28.070 --> 57:28.470
props

57:28.470 --> 57:29.030
那就对了

57:29.590 --> 57:30.950
好 那你看

57:31.270 --> 57:33.830
ts里面 我们书写这个zs呢就不太容易出错了

57:34.630 --> 57:36.310
好 然后props

57:36.470 --> 57:37.270
第二 什么呢

57:37.750 --> 57:40.150
呃 找到这个

57:40.550 --> 57:40.950
un

57:41.990 --> 57:43.030
switch change

57:43.270 --> 57:45.270
要给他传三个东西 第一个内详

57:45.670 --> 57:46.790
好 内详这里传啥

57:47.430 --> 57:48.230
内详这里传啥

57:48.230 --> 57:49.590
是不是内详这里就传递

57:49.910 --> 57:52.710
呃switch type 直接传递就行了啊

57:53.670 --> 57:55.430
switch type

57:56.070 --> 57:56.550
第二

57:56.950 --> 57:57.670
is hot

57:58.070 --> 57:58.870
传递这个内详

57:59.510 --> 58:01.110
然后呢 还要传递啥

58:01.430 --> 58:03.110
还要传递new state

58:03.110 --> 58:04.390
就state就是new var

58:05.270 --> 58:06.710
就上面这个蚕数的值

58:07.270 --> 58:09.110
还要传递啥 还要传递id

58:09.270 --> 58:10.710
好 这里id咋办呢

58:11.670 --> 58:13.430
id的话 我们需要第二个蚕数啊

58:13.670 --> 58:14.870
就是这一行的记录

58:15.030 --> 58:16.230
我们把这个记录找到

58:16.950 --> 58:18.070
好 这个记录里边

58:18.150 --> 58:19.190
你看这个记录啥内详

58:19.190 --> 58:20.630
你看 出处都有内询推到

58:21.350 --> 58:22.230
出处都有内询推到

58:22.230 --> 58:24.150
你写起来到代码的话

58:24.630 --> 58:25.750
是不用担心的啊

58:25.750 --> 58:26.950
他只要内询推到出来了

58:26.950 --> 58:27.990
就一定是这个内询

58:28.230 --> 58:29.030
好 record

58:29.350 --> 58:30.230
找到这个id

58:30.870 --> 58:31.670
他传过去

58:31.910 --> 58:33.430
啊 这里爆错

58:33.670 --> 58:34.790
他这里会爆错

58:34.950 --> 58:35.830
爆错的原因呢

58:35.830 --> 58:36.390
他说

58:36.550 --> 58:38.390
这个id那是可选的啊

58:38.390 --> 58:39.830
他有可能是undefined

58:39.990 --> 58:41.350
他有可能是undefined的

58:41.510 --> 58:41.990
那么

58:41.990 --> 58:43.590
但是他这个地方的要求

58:43.590 --> 58:45.030
id必须要是个字母串

58:45.670 --> 58:47.270
好 面对这种情况呢

58:47.270 --> 58:48.230
我们好好想一想

58:48.230 --> 58:49.590
这里有没有可能是undefined

58:50.790 --> 58:52.230
这里有没有可能是undefined

58:52.950 --> 58:54.390
这里不可能是undefined对吧

58:54.390 --> 58:56.230
所以说我们这里直接加个感嘆号

58:56.470 --> 58:57.270
告诉他

58:57.270 --> 58:58.710
去掉这个undefined内询

58:59.430 --> 59:00.070
好 ok

59:00.070 --> 59:01.670
我们就把这个地方写好了

59:02.230 --> 59:03.350
以后了这个事件过后

59:03.350 --> 59:04.710
外面就需要去用这个事件

59:04.710 --> 59:06.150
你看这里马上就提示你

59:06.790 --> 59:07.910
贴实就是个好处

59:07.910 --> 59:08.870
他很严格

59:08.870 --> 59:10.630
他这里提示你还差一个东西

59:10.630 --> 59:11.510
还差个啥

59:11.670 --> 59:12.470
还差一个

59:15.030 --> 59:16.630
还差一个事件没有处理

59:16.630 --> 59:17.270
叫on

59:17.270 --> 59:17.830
sweat1000

59:17.830 --> 59:19.110
你看马上就在提示你

59:19.110 --> 59:20.390
要去处理这个东西

59:21.030 --> 59:21.830
好 这个东西呢

59:21.990 --> 59:23.030
我们同样的

59:23.590 --> 59:24.310
我们同样的

59:24.310 --> 59:25.270
这里他告诉你

59:25.270 --> 59:26.230
要写三个参数

59:26.230 --> 59:27.750
那为什么你不写参数也可以

59:28.870 --> 59:29.990
不写参数为什么可以

59:30.790 --> 59:32.310
这不是我们之前学过的吗

59:32.310 --> 59:32.710
对不对

59:33.590 --> 59:34.630
在ts里边

59:35.910 --> 59:37.110
参数的匹配

59:37.510 --> 59:38.710
参数可以少

59:38.710 --> 59:40.630
但是你可以不能多

59:41.110 --> 59:41.670
不能多

59:42.230 --> 59:43.030
因此这个参数

59:43.030 --> 59:43.990
我们直接复制过来呗

59:44.790 --> 59:45.510
复制过来呗

59:47.030 --> 59:47.750
第一个内箱

59:48.630 --> 59:49.030
内箱

59:49.030 --> 59:50.710
其实我们这里的不需要写

59:50.710 --> 59:51.910
这个内箱约束了对吧

59:51.910 --> 59:53.350
因为他可以自动推到出来

59:54.390 --> 59:55.430
可以推到出来

59:55.430 --> 59:56.470
一般Type内箱

59:57.030 --> 59:57.430
内箱

59:58.070 --> 59:59.350
内箱可以推到出来

59:59.990 --> 01:00:00.710
好那么这里呢

01:00:00.710 --> 01:00:03.030
我们肯定要去触发仓库的改变事件

01:00:03.590 --> 01:00:05.270
触发仓库的改变事件

01:00:05.270 --> 01:00:07.190
那我们这里在仓库里边写一个呗

01:00:07.750 --> 01:00:08.630
写一个呗

01:00:08.630 --> 01:00:09.990
仓库里边来吧

01:00:10.390 --> 01:00:10.710
来

01:00:11.750 --> 01:00:13.030
在仓库里边呢

01:00:13.030 --> 01:00:14.710
我们在这里写一个

01:00:16.470 --> 01:00:17.910
仓库在哪

01:00:18.150 --> 01:00:19.990
在这里X里边再写一个

01:00:20.150 --> 01:00:20.950
再写一个X

01:00:22.390 --> 01:00:23.590
这个X呢

01:00:24.310 --> 01:00:24.790
这里啊

01:00:26.810 --> 01:00:29.130
我们再写一个X的创建函数

01:00:29.530 --> 01:00:34.330
这是ChangeSwitchX

01:00:35.770 --> 01:00:37.210
你要给我一个啥东西呢

01:00:37.690 --> 01:00:40.010
你要给我的东西包含三个

01:00:40.650 --> 01:00:42.090
一个是内箱

01:00:43.130 --> 01:00:44.810
是不跟这边一样的对不对

01:00:45.210 --> 01:00:46.090
跟这边一样的

01:00:46.890 --> 01:00:48.090
是Switch

01:00:50.410 --> 01:00:51.850
SwitchType

01:00:53.050 --> 01:00:53.770
内箱

01:00:53.770 --> 01:00:54.970
还有一个是什么

01:00:54.970 --> 01:00:56.090
新的值

01:00:56.090 --> 01:00:56.650
对吧

01:00:56.650 --> 01:00:57.690
是一个布尔

01:00:57.690 --> 01:00:58.410
还有一个是什么呢

01:00:58.410 --> 01:00:59.850
ID是一个支付串

01:00:59.850 --> 01:01:00.970
你给我这三个东西

01:01:02.010 --> 01:01:02.890
给我这三个东西

01:01:02.890 --> 01:01:04.330
我来完成改变

01:01:04.570 --> 01:01:05.690
我来完成改变

01:01:06.490 --> 01:01:08.730
好那么反回的是什么呢

01:01:08.730 --> 01:01:09.850
反回的是一个X

01:01:10.570 --> 01:01:11.770
反回的是一个X

01:01:12.570 --> 01:01:13.850
好那么这个X呢

01:01:13.850 --> 01:01:15.610
我们还是给他约束一下吧

01:01:15.610 --> 01:01:16.650
给他约束一下

01:01:18.010 --> 01:01:18.890
生成一个X

01:01:19.370 --> 01:01:20.250
这些事情呢

01:01:20.250 --> 01:01:21.690
就是按部就办了做就行了

01:01:22.650 --> 01:01:25.050
MovieSwitch

01:01:26.170 --> 01:01:30.650
Movie应该是MovieChangeSwitchX

01:01:31.370 --> 01:01:32.410
这么一个X

01:01:32.810 --> 01:01:33.850
好然后呢

01:01:35.610 --> 01:01:38.410
我们这里给他复制为这个X

01:01:39.130 --> 01:01:41.050
使用那个之前怎么说的

01:01:41.050 --> 01:01:41.610
都忘了

01:01:41.850 --> 01:01:42.650
IX

01:01:43.210 --> 01:01:44.090
IX

01:01:44.410 --> 01:01:44.970
翻译响

01:01:45.210 --> 01:01:50.890
那么X的Type只能给他取为MovieSwitch吧

01:01:51.210 --> 01:01:51.850
Switch

01:01:52.330 --> 01:01:53.210
然后呢

01:01:53.210 --> 01:01:55.690
X的就是Penel的字呢

01:01:55.690 --> 01:01:56.410
Penel的字呢

01:01:56.410 --> 01:01:58.250
我们给他直接给了一个对象吧

01:01:58.810 --> 01:02:00.650
我们给直接给给给一个对象

01:02:00.650 --> 01:02:01.450
就这个对象

01:02:02.490 --> 01:02:03.370
就这个对象

01:02:04.650 --> 01:02:05.850
直接给这么一个对象

01:02:06.570 --> 01:02:08.330
这个对象有三个属性

01:02:08.330 --> 01:02:09.370
有三个属性

01:02:09.690 --> 01:02:12.010
一个两个三个三个属性

01:02:12.730 --> 01:02:14.090
好写这么一个X

01:02:14.330 --> 01:02:16.010
好这个X写好了过后

01:02:16.010 --> 01:02:19.130
约束为这个约束为这个函数的

01:02:19.850 --> 01:02:25.450
函数的函数的函数的函数的函数

01:02:26.570 --> 01:02:27.130
好

01:02:27.130 --> 01:02:28.010
哎这里怎么回事

01:02:28.890 --> 01:02:30.810
我这里少写个间括号对吧

01:02:30.810 --> 01:02:31.930
我少写个间括号

01:02:31.930 --> 01:02:32.410
OK

01:02:33.050 --> 01:02:34.410
好了那么这个函数

01:02:34.410 --> 01:02:35.770
我们来搞定这个函数啊

01:02:35.770 --> 01:02:37.450
这个函数要返回一个啥呢

01:02:37.450 --> 01:02:39.850
返回一个X型Type的字

01:02:39.850 --> 01:02:40.650
就是这个字

01:02:41.050 --> 01:02:42.170
这个Penel的字

01:02:43.210 --> 01:02:44.090
Penel的字

01:02:45.530 --> 01:02:46.410
必须是个对象

01:02:46.410 --> 01:02:47.610
这个对象里面有Type

01:02:47.930 --> 01:02:48.570
Type的字

01:02:48.730 --> 01:02:49.370
就是Type

01:02:50.170 --> 01:02:51.130
New var

01:02:51.930 --> 01:02:52.410
ID

01:02:52.410 --> 01:02:53.530
直接刚正过去了

01:02:53.530 --> 01:02:54.570
直接刚正过去

01:02:55.290 --> 01:02:56.810
好那么这个X型产生过后

01:02:56.810 --> 01:02:58.250
这些东西要改一改对吧

01:02:58.250 --> 01:02:59.450
这些地方要改一改

01:03:00.170 --> 01:03:02.890
这个所有的X型里面要包含这个

01:03:03.290 --> 01:03:04.090
包含这个东西

01:03:04.570 --> 01:03:07.210
然后这个X型还要加入到这里

01:03:08.250 --> 01:03:10.330
好我们把X型的创建函数写好了

01:03:10.730 --> 01:03:12.090
写好了创建函数之后

01:03:12.090 --> 01:03:14.090
我们再来写这个Reducer

01:03:14.650 --> 01:03:15.210
Reducer

01:03:16.170 --> 01:03:17.850
好这里呢我们改变

01:03:17.850 --> 01:03:18.570
改变

01:03:20.010 --> 01:03:20.570
Const

01:03:21.530 --> 01:03:24.890
新建一个函数switch

01:03:26.250 --> 01:03:27.770
ChangeSwitch

01:03:30.740 --> 01:03:33.220
好这里MovieReducer

01:03:34.340 --> 01:03:36.100
它加上一个X型

01:03:36.420 --> 01:03:37.780
X型的内容是

01:03:39.860 --> 01:03:40.500
Movie

01:03:41.300 --> 01:03:42.020
Movie

01:03:43.380 --> 01:03:44.820
MovieSwitch

01:03:45.540 --> 01:03:53.990
MovieChangeSwitch X

01:03:54.950 --> 01:03:56.710
MovieChangeSwitch X

01:03:56.710 --> 01:03:57.350
导入进来

01:03:58.630 --> 01:03:59.350
导入进来

01:04:02.230 --> 01:04:02.870
看一下啊

01:04:03.270 --> 01:04:03.910
这边

01:04:04.390 --> 01:04:05.750
哦这边没导出啊

01:04:05.750 --> 01:04:06.790
我说怎么回事

01:04:06.790 --> 01:04:07.430
没导出

01:04:08.070 --> 01:04:08.950
啊导出啊

01:04:09.430 --> 01:04:09.910
导出

01:04:10.630 --> 01:04:11.430
好那这边来

01:04:12.390 --> 01:04:13.350
导入进来啊

01:04:14.630 --> 01:04:15.270
导入进来

01:04:15.670 --> 01:04:17.430
好那么这里呢给它复辞

01:04:17.750 --> 01:04:18.790
复辞为一个函数

01:04:18.790 --> 01:04:19.670
那么这个函数呢

01:04:19.990 --> 01:04:20.470
拥有

01:04:22.390 --> 01:04:23.830
拥有什么之前的

01:04:24.550 --> 01:04:25.110
状态

01:04:25.510 --> 01:04:26.950
拥有什么的X型

01:04:28.230 --> 01:04:28.790
就是这里呢

01:04:28.790 --> 01:04:30.310
它就不知道在提示里该怎么去写

01:04:30.950 --> 01:04:33.830
好这里呢我们返回一个新的状态

01:04:34.150 --> 01:04:35.750
要改变这个switch嘛

01:04:35.750 --> 01:04:36.150
对吧

01:04:36.150 --> 01:04:37.190
返回一个新的状态

01:04:37.670 --> 01:04:39.350
那么这里呢涉及到一个问题啊

01:04:40.390 --> 01:04:41.110
涉及到一个问题

01:04:41.670 --> 01:04:42.870
我现在呢

01:04:43.670 --> 01:04:45.990
我现在的这个X型里面给我们提供了啥呢

01:04:46.950 --> 01:04:49.270
提供了playload里面包含了id

01:04:49.830 --> 01:04:50.870
包含了新的值

01:04:51.670 --> 01:04:52.950
包含了这个type

01:04:55.430 --> 01:04:57.350
我们要根据这三个值

01:04:58.390 --> 01:05:00.230
从哪里去改变状态

01:05:00.230 --> 01:05:02.230
从当前状态里边的

01:05:03.030 --> 01:05:05.190
这个当前状态里边

01:05:05.190 --> 01:05:06.390
我们把这上面注释掉

01:05:07.750 --> 01:05:08.950
这个data是不是输主

01:05:09.670 --> 01:05:13.270
我们要从这个输主里边去找到那个对象

01:05:14.230 --> 01:05:16.630
先从输主里面去找到对象

01:05:16.630 --> 01:05:17.910
这里呢就没有了

01:05:17.910 --> 01:05:19.990
就是没有不是一两不能完成的

01:05:19.990 --> 01:05:21.190
所以第一步

01:05:21.190 --> 01:05:26.470
先根据id找到对象找到对象

01:05:27.190 --> 01:05:29.190
好我们来找一下stats

01:05:30.070 --> 01:05:31.510
stats 第二data

01:05:32.150 --> 01:05:35.750
用fand嘛用fand来找到对象

01:05:36.310 --> 01:05:37.350
找到啥呢就是

01:05:39.030 --> 01:05:41.430
id要相同要等于什么呢

01:05:41.590 --> 01:05:43.430
等于action的playload

01:05:45.430 --> 01:05:47.350
先把这个电影对象找到

01:05:48.310 --> 01:05:49.910
先把这个电影对象找到

01:05:50.710 --> 01:05:52.150
找到过后有没有可能是空

01:05:52.870 --> 01:05:55.590
你看一下指着它还会告诉你它有可能是undefand

01:05:56.150 --> 01:05:56.550
对吧

01:05:57.110 --> 01:05:59.110
所以说呢我们这里判断一下

01:05:59.590 --> 01:06:01.830
如果这个电影对象没有指是undefand

01:06:03.270 --> 01:06:04.230
那还改变啥呢

01:06:04.230 --> 01:06:05.350
我直接返回去完事了

01:06:05.830 --> 01:06:07.350
直接就不改变了

01:06:08.070 --> 01:06:09.110
这个状态不变

01:06:10.070 --> 01:06:11.830
好如果不为undefand

01:06:11.830 --> 01:06:13.190
如果不为undefand

01:06:13.190 --> 01:06:14.790
你看到了代码到了95行

01:06:14.790 --> 01:06:15.670
他有内勤保护

01:06:16.230 --> 01:06:17.830
他发现如果代码到了95行

01:06:17.830 --> 01:06:19.030
他一定不是undefand

01:06:19.670 --> 01:06:21.510
如果不是undefand的话

01:06:21.510 --> 01:06:22.710
那么这个时候

01:06:22.710 --> 01:06:25.350
我能不能直接在这里去重新再设置值

01:06:25.910 --> 01:06:26.710
比方说一直hot

01:06:26.710 --> 01:06:27.670
我重新再设置值

01:06:27.670 --> 01:06:28.230
可不可以

01:06:29.350 --> 01:06:30.390
千万别这么干

01:06:31.190 --> 01:06:32.390
因为你这个对象

01:06:33.110 --> 01:06:35.110
GS基础里面就讲到这个问题了

01:06:35.110 --> 01:06:37.190
对象之间传递的是什么

01:06:37.350 --> 01:06:39.350
是引用是地址

01:06:39.830 --> 01:06:42.150
你这个对象是不是跟数组里面那个对象

01:06:42.150 --> 01:06:43.670
只像的是同一块类传空间

01:06:44.230 --> 01:06:46.550
你改变了他是不是数组里面也跟着改了

01:06:47.750 --> 01:06:48.710
不能这样去做

01:06:48.710 --> 01:06:49.990
不能去这样做

01:06:50.390 --> 01:06:51.590
那应该怎么办的

01:06:52.230 --> 01:06:53.190
应该怎么办的

01:06:53.190 --> 01:06:55.110
应该你把这个对象复制

01:06:55.110 --> 01:06:57.190
复制出来形成一个新的对象

01:06:57.670 --> 01:06:58.950
怎么来复制一个对象

01:06:59.990 --> 01:07:01.430
怎么来复制一个对象

01:07:01.430 --> 01:07:02.230
对象克龙

01:07:03.270 --> 01:07:03.990
怎么来克龙

01:07:05.110 --> 01:07:05.590
cost

01:07:06.310 --> 01:07:07.110
new movie

01:07:08.150 --> 01:07:11.670
用es6的展开运算幅

01:07:11.670 --> 01:07:13.270
把原对象的所有属性展开

01:07:13.270 --> 01:07:14.070
是不是克龙了

01:07:14.710 --> 01:07:15.990
克龙一个新的对象

01:07:16.870 --> 01:07:18.150
好克龙了新的对象

01:07:18.150 --> 01:07:20.630
那你就方便了

01:07:20.630 --> 01:07:21.910
你就随便改

01:07:21.910 --> 01:07:22.550
不管你

01:07:22.550 --> 01:07:23.590
我随便改就行了

01:07:23.590 --> 01:07:25.190
好改哪个属性呢

01:07:25.750 --> 01:07:27.030
该哪个属性的问题是

01:07:28.070 --> 01:07:28.710
哪个属性

01:07:29.430 --> 01:07:31.990
好要改修改的属性名

01:07:32.870 --> 01:07:36.150
是不是跟这个x里边的这个payload

01:07:36.870 --> 01:07:37.430
new bar

01:07:38.070 --> 01:07:39.990
这个type的属性值是一样的

01:07:40.630 --> 01:07:41.110
对不对

01:07:41.110 --> 01:07:42.950
type里边要修改的是ease heart

01:07:42.950 --> 01:07:44.230
那么这里要修改的是

01:07:44.230 --> 01:07:44.870
是啥呢

01:07:44.870 --> 01:07:45.670
也是ease heart

01:07:46.230 --> 01:07:46.550
对不对

01:07:47.190 --> 01:07:48.950
type里面要修改的是ease call me

01:07:48.950 --> 01:07:51.190
那么这里修改的属性值也是ease call me

01:07:51.190 --> 01:07:52.630
所以说要修改哪个属性值呢

01:07:53.030 --> 01:07:53.510
要修改

01:07:53.510 --> 01:07:54.390
你可以进行判断

01:07:54.790 --> 01:07:55.830
也可以用这种方式

01:07:56.310 --> 01:07:57.030
用签名

01:07:57.590 --> 01:07:58.230
用签名

01:07:58.710 --> 01:08:00.470
我们反正到现在好像没有讲过

01:08:00.470 --> 01:08:01.270
这个所引签名

01:08:01.270 --> 01:08:01.510
对吧

01:08:01.510 --> 01:08:02.150
我们这里就

01:08:02.150 --> 01:08:03.030
顺便提一提

01:08:03.750 --> 01:08:04.390
好这里呢

01:08:04.950 --> 01:08:10.550
我们就可以把这个x里面的payload里面的什么type放进来

01:08:11.430 --> 01:08:12.150
你看这个type

01:08:13.910 --> 01:08:14.710
这个switch type

01:08:15.350 --> 01:08:17.430
它里面是不是跟属性值是对应的

01:08:17.910 --> 01:08:18.310
对不对

01:08:18.310 --> 01:08:18.950
是对应的

01:08:19.750 --> 01:08:20.550
所以说这里呢

01:08:20.550 --> 01:08:21.430
我们可以把放进来

01:08:22.150 --> 01:08:23.110
修改这个属性

01:08:23.670 --> 01:08:24.390
修改这个属性

01:08:25.750 --> 01:08:27.030
好把它修改成啥呢

01:08:27.510 --> 01:08:28.870
就直接给它复制就完成了

01:08:28.870 --> 01:08:29.270
对吧

01:08:29.270 --> 01:08:29.910
修改成啥了

01:08:29.910 --> 01:08:33.110
修改成x的payload的的new bar

01:08:34.550 --> 01:08:36.150
我们一个问题一个问题处理

01:08:36.950 --> 01:08:37.350
现在我们

01:08:37.830 --> 01:08:39.990
有一些同学可能已经有点晕了啊

01:08:40.710 --> 01:08:41.990
是一层一层过来的

01:08:42.550 --> 01:08:45.670
就是我在做组建的一块发现的一个问题啊

01:08:45.670 --> 01:08:46.150
我要

01:08:46.150 --> 01:08:48.230
我之前忘了写仓库里边的一个东西

01:08:48.710 --> 01:08:49.270
那没关系

01:08:49.270 --> 01:08:50.470
我挨大家写呗

01:08:50.470 --> 01:08:51.750
组建里面抛出事件

01:08:52.150 --> 01:08:52.630
好

01:08:52.630 --> 01:08:53.670
在事件处理的时候

01:08:53.670 --> 01:08:55.430
我要往仓库里面去触发x型

01:08:55.430 --> 01:08:56.870
但是我发现缺少这个x型

01:08:56.870 --> 01:08:57.830
我就写的x型

01:08:57.830 --> 01:08:58.790
如果x型过后呢

01:08:58.790 --> 01:09:00.550
我就需要一个reducer来处理

01:09:00.550 --> 01:09:01.670
要改变仓库

01:09:01.830 --> 01:09:03.670
我就去写这个reducer

01:09:03.830 --> 01:09:04.870
是一层一层过来的

01:09:05.430 --> 01:09:06.710
大家平时做开发的时候

01:09:07.510 --> 01:09:08.630
谁也没有办法

01:09:09.270 --> 01:09:10.790
哪怕是神仙也没办法

01:09:10.790 --> 01:09:13.190
我一开始就能把所有的问题全部考虑到

01:09:13.190 --> 01:09:14.070
那肯定是

01:09:14.070 --> 01:09:15.350
考做到中途的时候

01:09:15.350 --> 01:09:16.710
回回头有预想

01:09:16.710 --> 01:09:18.230
之前确实有些问题呢

01:09:18.230 --> 01:09:19.270
没有考虑周全

01:09:19.270 --> 01:09:19.830
没关系

01:09:19.830 --> 01:09:20.870
我们回头去改就行了

01:09:22.230 --> 01:09:23.270
好对象克隆

01:09:23.270 --> 01:09:24.310
克隆完了过后

01:09:24.310 --> 01:09:25.830
就是我改变他的这个属性

01:09:26.390 --> 01:09:27.430
改变他相应的属性

01:09:27.830 --> 01:09:28.790
改变完了过后

01:09:29.750 --> 01:09:30.390
就完了吧

01:09:30.390 --> 01:09:31.110
肯定没有啊

01:09:32.070 --> 01:09:33.830
我要把这个东西重新放进去

01:09:33.830 --> 01:09:34.310
对吧

01:09:34.310 --> 01:09:35.110
我要把这个对象

01:09:37.590 --> 01:09:41.830
将对象重新放入到宿主

01:09:42.710 --> 01:09:43.750
我要做这么一件事

01:09:43.750 --> 01:09:46.230
就之前这个data里边

01:09:46.230 --> 01:09:47.270
这个宿主

01:09:47.270 --> 01:09:49.350
当然你不能去改变这个宿主

01:09:49.350 --> 01:09:50.790
你只能返回一个新的宿主

01:09:50.790 --> 01:09:52.390
你只能得到一个新的宿主

01:09:52.950 --> 01:09:54.230
重新放到宿主里边

01:09:54.950 --> 01:09:55.670
并且呢

01:09:56.310 --> 01:09:56.790
并且

01:09:57.350 --> 01:09:58.630
他的位置还不能变

01:09:58.630 --> 01:10:00.150
他的位置还不能变

01:10:00.310 --> 01:10:01.590
那你想想这个地方怎么做

01:10:02.550 --> 01:10:03.030
想想呗

01:10:03.510 --> 01:10:04.470
这个地方该怎么做

01:10:05.590 --> 01:10:06.550
好怎么做呢

01:10:07.350 --> 01:10:09.670
其实我们的课程真的挺好的

01:10:09.670 --> 01:10:11.030
真的不是吹牛啊

01:10:11.590 --> 01:10:13.030
可以学到好多好多东西

01:10:13.670 --> 01:10:14.630
像这个地方呢

01:10:15.190 --> 01:10:15.910
我估计吧

01:10:15.910 --> 01:10:19.110
如果你没有在公司里面去参加过真实的项目的话

01:10:19.110 --> 01:10:19.590
你可能

01:10:20.390 --> 01:10:21.430
不知道该怎么去处理

01:10:21.430 --> 01:10:22.950
可能要去用循环

01:10:22.950 --> 01:10:24.870
其实这里用这种方式非常舒服

01:10:25.350 --> 01:10:26.230
给大家看一下啊

01:10:27.110 --> 01:10:27.590
action

01:10:28.230 --> 01:10:28.550
step

01:10:29.510 --> 01:10:30.790
step

01:10:31.750 --> 01:10:32.230
data

01:10:32.230 --> 01:10:33.270
宿主啊对吧

01:10:33.990 --> 01:10:34.390
map

01:10:35.270 --> 01:10:35.750
映射

01:10:36.550 --> 01:10:37.350
进行映射

01:10:38.150 --> 01:10:40.950
通过原宿主来映射出一个新的宿主

01:10:42.230 --> 01:10:43.590
好映射的时候呢

01:10:44.070 --> 01:10:45.030
我们这样子来写

01:10:45.830 --> 01:10:46.630
判断一下

01:10:47.750 --> 01:10:49.430
如果地点id

01:10:50.230 --> 01:10:51.030
等于了

01:10:51.910 --> 01:10:53.110
等于了什么呢

01:10:53.110 --> 01:10:53.830
action的

01:10:54.390 --> 01:10:55.430
payload的id

01:10:56.870 --> 01:10:58.390
那么这一项是不是要改变了

01:10:58.870 --> 01:10:59.750
改变了这一项

01:10:59.750 --> 01:11:00.390
对不对

01:11:00.390 --> 01:11:01.430
那么映射的时候

01:11:01.430 --> 01:11:02.870
我返回new movie

01:11:04.970 --> 01:11:05.690
l是的话

01:11:05.690 --> 01:11:06.570
我返回的是什么

01:11:06.570 --> 01:11:07.290
就返回d

01:11:07.290 --> 01:11:08.570
原宿主的对象不动

01:11:10.170 --> 01:11:11.450
通过这种映射的方式

01:11:11.450 --> 01:11:11.850
你看

01:11:12.330 --> 01:11:13.290
没有改变的数据

01:11:13.290 --> 01:11:14.730
是不是一次放回去了

01:11:14.730 --> 01:11:16.170
放到新宿主里面去了

01:11:16.170 --> 01:11:16.570
好

01:11:16.570 --> 01:11:17.690
如果要改变的数据呢

01:11:17.690 --> 01:11:19.770
我就返回了一个新的new movie对象

01:11:19.770 --> 01:11:20.890
那么通过这种方式

01:11:20.890 --> 01:11:21.690
我就可以得到

01:11:22.090 --> 01:11:23.610
跟原宿主一模一样的

01:11:23.610 --> 01:11:25.290
只有一项改变的宿主

01:11:26.410 --> 01:11:28.090
得到一个new data

01:11:30.120 --> 01:11:30.360
好

01:11:30.360 --> 01:11:31.640
最后返回状态

01:11:31.640 --> 01:11:32.520
最后返回状态

01:11:32.520 --> 01:11:33.720
那么状态就很简单了

01:11:34.280 --> 01:11:36.760
就是把原来的State展开

01:11:36.760 --> 01:11:37.960
原来State展开

01:11:37.960 --> 01:11:39.800
然后加上一个data

01:11:40.280 --> 01:11:40.760
new data

01:11:41.400 --> 01:11:42.280
把宿主覆盖掉

01:11:42.920 --> 01:11:43.720
用一个新的宿主

01:11:43.720 --> 01:11:45.080
把之前的宿主覆盖掉

01:11:45.080 --> 01:11:45.720
就完事了

01:11:46.840 --> 01:11:47.640
無畏遇丢失了

01:11:47.640 --> 01:11:48.120
就完事了

01:11:48.760 --> 01:11:48.920
好

01:11:48.920 --> 01:11:49.640
咱们写了这么多

01:11:49.640 --> 01:11:50.600
来测试一下吧

01:11:50.600 --> 01:11:51.160
来测试一下

01:11:51.160 --> 01:11:52.680
其实现在已经可以测试了

01:11:52.680 --> 01:11:53.640
已经可以测试了

01:11:54.200 --> 01:11:54.680
好

01:11:54.680 --> 01:11:56.200
咱们来试一下

01:11:56.200 --> 01:11:56.760
试一下

01:11:57.480 --> 01:11:58.120
这里呢

01:11:58.120 --> 01:12:01.320
我们到这个mov list里边去

01:12:02.440 --> 01:12:03.240
mov list

01:12:03.720 --> 01:12:04.360
到这里面去

01:12:05.080 --> 01:12:05.800
这里面我做啥

01:12:06.360 --> 01:12:07.560
这里面我要dispatch

01:12:08.680 --> 01:12:09.560
dispatch

01:12:09.560 --> 01:12:11.640
然后这里面通过mov action

01:12:12.840 --> 01:12:13.960
得到一个action

01:12:14.680 --> 01:12:15.720
change switch

01:12:16.760 --> 01:12:17.320
action

01:12:17.320 --> 01:12:17.720
好

01:12:17.720 --> 01:12:18.600
type人进去

01:12:19.320 --> 01:12:21.240
new state人进去

01:12:21.880 --> 01:12:23.320
然后id人进去

01:12:23.320 --> 01:12:24.520
让他去改变吧

01:12:24.520 --> 01:12:25.480
我不管了

01:12:25.480 --> 01:12:26.120
你去改变吧

01:12:26.920 --> 01:12:27.560
保存

01:12:28.120 --> 01:12:29.000
咱们来看一下

01:12:30.520 --> 01:12:30.680
好

01:12:30.680 --> 01:12:32.440
我们这里刷新一下页面

01:12:32.440 --> 01:12:33.320
刷新一下页面

01:12:33.800 --> 01:12:35.480
然后我们把控制台打开

01:12:35.960 --> 01:12:36.680
控制台打开

01:12:37.320 --> 01:12:38.680
把这个先清除掉

01:12:38.680 --> 01:12:39.720
我们来看一下

01:12:39.720 --> 01:12:40.680
能不能成功

01:12:42.040 --> 01:12:42.520
点一下

01:12:43.560 --> 01:12:43.880
好

01:12:43.880 --> 01:12:45.320
我们首先看触发的action

01:12:45.320 --> 01:12:46.600
触发的action这么准确

01:12:47.400 --> 01:12:49.720
mov switch没有什么问题

01:12:49.720 --> 01:12:51.480
mov switch没有什么问题

01:12:51.480 --> 01:12:52.440
然后payload

01:12:53.320 --> 01:12:54.120
payload里边

01:12:54.600 --> 01:12:55.880
然后这里dova

01:12:56.600 --> 01:12:58.920
type的也是easy hot

01:12:58.920 --> 01:12:59.800
没问题

01:12:59.800 --> 01:13:01.240
然后看一下最终的结果

01:13:01.880 --> 01:13:02.680
状态的改变

01:13:03.640 --> 01:13:04.760
状态的变化

01:13:05.400 --> 01:13:06.600
你看一下状态的变化

01:13:07.640 --> 01:13:08.280
这里

01:13:08.280 --> 01:13:09.800
我们找到这找到这

01:13:10.680 --> 01:13:11.880
状态的变化的话

01:13:11.880 --> 01:13:13.320
这里是easy

01:13:14.520 --> 01:13:15.320
classic

01:13:15.880 --> 01:13:16.760
easy hot

01:13:17.320 --> 01:13:18.520
状态没有变对吧

01:13:18.520 --> 01:13:19.880
那么这里出了问题

01:13:19.880 --> 01:13:20.600
我看一下

01:13:20.600 --> 01:13:21.960
那么看一下reducer

01:13:21.960 --> 01:13:23.480
为什么我要找到reducer里面

01:13:23.480 --> 01:13:25.320
我们不去查看其他的问题

01:13:25.400 --> 01:13:27.720
因为我发现action是对的

01:13:27.720 --> 01:13:29.080
action是没有问题的

01:13:29.080 --> 01:13:30.680
所以说它只能在这里面出问题

01:13:31.320 --> 01:13:33.000
我发现这里是灰色的对吧

01:13:33.000 --> 01:13:34.040
这里是暗色的

01:13:34.040 --> 01:13:35.880
说明这个地方没有加到这

01:13:35.880 --> 01:13:37.000
没有加到这

01:13:37.000 --> 01:13:38.040
我们这里加上

01:13:39.000 --> 01:13:41.000
case switch

01:13:41.960 --> 01:13:44.680
好 这里return

01:13:45.240 --> 01:13:47.400
调用这个change switch state

01:13:47.960 --> 01:13:48.440
action

01:13:50.360 --> 01:13:51.240
好 再保存

01:13:51.240 --> 01:13:52.600
再来试一试

01:13:55.130 --> 01:13:55.690
好 这里

01:13:56.410 --> 01:13:58.250
点开

01:13:58.250 --> 01:13:59.050
点开

01:13:59.050 --> 01:13:59.770
我们看一下

01:13:59.770 --> 01:14:00.490
下一个

01:14:00.490 --> 01:14:01.130
第二个电影

01:14:02.410 --> 01:14:04.090
我们改变的是第二个电影

01:14:05.530 --> 01:14:06.170
easy hot

01:14:06.570 --> 01:14:07.850
easy hot仍然没有变

01:14:07.850 --> 01:14:08.490
仍然没有变

01:14:08.490 --> 01:14:09.530
那么我们继续调试

01:14:09.530 --> 01:14:10.250
继续调试

01:14:10.250 --> 01:14:11.850
因为我们发现action是正确的

01:14:12.170 --> 01:14:13.050
action是正确的

01:14:13.050 --> 01:14:15.610
那么也就是我们一定是在reducer里面出了问题

01:14:16.170 --> 01:14:17.930
调试的话就是用这种方式来调试

01:14:17.930 --> 01:14:18.970
看一下到底是

01:14:18.970 --> 01:14:19.850
界面的问题呢

01:14:19.850 --> 01:14:21.130
传递的数据有问题呢

01:14:21.130 --> 01:14:22.410
还是reducer有问题

01:14:22.650 --> 01:14:24.730
我们要在这里呢去打印一些东西吧

01:14:24.890 --> 01:14:26.010
比方说这个type

01:14:26.010 --> 01:14:27.290
type我们可以看到

01:14:27.530 --> 01:14:29.210
type可以看到是正确的

01:14:29.610 --> 01:14:31.370
这里的type值

01:14:32.650 --> 01:14:33.690
type值正确的

01:14:33.690 --> 01:14:35.210
然后panel的呢

01:14:36.010 --> 01:14:37.290
panel的liuva

01:14:37.530 --> 01:14:38.570
这些都是正确的

01:14:38.570 --> 01:14:40.330
这个type值一直hot都是正确的

01:14:40.730 --> 01:14:42.410
然后呢我们来看一下

01:14:42.410 --> 01:14:42.890
这里

01:14:43.530 --> 01:14:45.210
我们把这个新宿主输出

01:14:45.210 --> 01:14:46.890
直接把这个新宿主输出

01:14:49.140 --> 01:14:49.700
console

01:14:50.020 --> 01:14:50.660
liu data

01:14:50.820 --> 01:14:52.260
看一下一个新宿主有没有问题

01:14:52.580 --> 01:14:53.060
保存

01:14:54.260 --> 01:14:55.540
好 来看一下

01:14:57.060 --> 01:14:57.540
这里

01:14:57.940 --> 01:14:58.500
取消

01:14:59.540 --> 01:15:00.100
输出

01:15:00.420 --> 01:15:01.540
新的宿主

01:15:02.820 --> 01:15:05.380
新的宿主的一直hot是处对吧

01:15:05.380 --> 01:15:06.740
新的宿主是没问题的

01:15:06.980 --> 01:15:08.580
那么新的宿主没问题的话

01:15:08.580 --> 01:15:10.340
它覆盖到原宿主的话应该

01:15:11.380 --> 01:15:12.820
哦 我明白了 我明白了

01:15:12.820 --> 01:15:14.340
你看这个属性有问题对吧

01:15:14.580 --> 01:15:16.020
我怎么给它加了一个属性

01:15:16.020 --> 01:15:18.580
给它加了一个liu data属性

01:15:18.580 --> 01:15:19.940
所以说这里呢应该怎么写呢

01:15:19.940 --> 01:15:21.140
应该写成data

01:15:21.620 --> 01:15:22.180
这样子写

01:15:22.660 --> 01:15:24.100
覆盖原来的属性data

01:15:24.820 --> 01:15:26.340
就通过这样来调试

01:15:26.340 --> 01:15:29.220
首先你要确定到底是你界面的问题

01:15:29.460 --> 01:15:30.260
还是你

01:15:30.740 --> 01:15:32.020
常库的问题

01:15:32.020 --> 01:15:33.300
看什么呢 看axing

01:15:33.540 --> 01:15:34.820
如果axing是正确的

01:15:34.820 --> 01:15:36.660
那说明界面给它传递的东西

01:15:36.660 --> 01:15:37.460
一定是正确的

01:15:37.780 --> 01:15:40.740
那么你要去检查你的常库的问题

01:15:40.980 --> 01:15:42.420
要去检查常库的问题

01:15:43.780 --> 01:15:45.380
好 这样子写好了之后呢

01:15:45.780 --> 01:15:46.660
那么我们改变

01:15:46.660 --> 01:15:47.700
我们再来看一次吧

01:15:48.660 --> 01:15:49.700
现在应该没问题了

01:15:50.580 --> 01:15:51.140
看一次

01:15:51.540 --> 01:15:52.660
然后看一下move

01:15:53.140 --> 01:15:53.940
好 第二个

01:15:54.260 --> 01:15:54.900
第二个电影

01:15:56.340 --> 01:15:57.620
一直hot为粗了

01:15:57.860 --> 01:15:59.540
常库里面就得到改变了

01:16:00.580 --> 01:16:01.940
其实呢 我这里想到了

01:16:01.940 --> 01:16:04.020
刚才其实我们在做那个table的时候

01:16:04.420 --> 01:16:05.060
这个地方呢

01:16:05.060 --> 01:16:07.700
我们最好其实还不要用d4切个字

01:16:07.940 --> 01:16:09.620
这样子呢 它不受控的这个逐渐

01:16:09.940 --> 01:16:10.660
应该用什么呢

01:16:10.660 --> 01:16:11.700
应该用切个字

01:16:12.100 --> 01:16:12.980
应该用切个字

01:16:13.220 --> 01:16:14.580
这样子的逐渐是受控的

01:16:14.580 --> 01:16:15.380
是受控的

01:16:15.540 --> 01:16:16.340
就什么意思呢

01:16:16.660 --> 01:16:17.540
就是说如果

01:16:17.940 --> 01:16:19.540
如果比方说我这里没有触发视线

01:16:19.940 --> 01:16:20.660
没有触发视线

01:16:20.660 --> 01:16:21.220
我们来看一下

01:16:23.580 --> 01:16:24.940
一点是没有反应的

01:16:25.100 --> 01:16:25.900
没有反应的

01:16:26.220 --> 01:16:27.260
它要保证啥呢

01:16:27.260 --> 01:16:30.300
它要保证你这个视缝选中

01:16:30.300 --> 01:16:33.020
始终根据这个字

01:16:33.260 --> 01:16:34.220
保持一致

01:16:34.220 --> 01:16:35.980
视缝选中始终根据它

01:16:35.980 --> 01:16:37.020
来保持一致

01:16:37.020 --> 01:16:38.460
把它变成一个受控逐渐

01:16:39.100 --> 01:16:40.060
好 这样子呢

01:16:40.060 --> 01:16:40.780
它的指呢

01:16:40.780 --> 01:16:41.980
始终跟常库里面的一致

01:16:41.980 --> 01:16:43.100
或者是保持一致的

01:16:43.420 --> 01:16:44.220
是保持一致的

01:16:44.220 --> 01:16:44.860
现在就可以了

01:16:45.260 --> 01:16:46.700
因为常库也跟着改变了

01:16:46.940 --> 01:16:47.820
保持一致

01:16:48.460 --> 01:16:49.420
但是现在还有一个问题

01:16:49.420 --> 01:16:51.340
就是没有发送阿迦克斯请求 对吧

01:16:51.500 --> 01:16:53.100
没有发送阿迦克斯请求

01:16:53.340 --> 01:16:53.980
那么这里呢

01:16:53.980 --> 01:16:56.540
我们还需要写一个副作用的处理

01:16:56.540 --> 01:16:57.660
就是X型里边

01:16:57.660 --> 01:16:59.260
还要写个副作用的处理

01:16:59.260 --> 01:17:01.420
来处理阿迦克斯请求

01:17:01.420 --> 01:17:02.380
好 那么这里呢

01:17:02.380 --> 01:17:03.660
我们就写这么一个呗

01:17:03.660 --> 01:17:04.540
写这么一个

01:17:04.540 --> 01:17:06.380
再来一个方式

01:17:06.860 --> 01:17:08.460
就是

01:17:08.940 --> 01:17:09.820
Change

01:17:09.820 --> 01:17:11.020
刚才我们写的啥名字

01:17:11.020 --> 01:17:11.900
ChangeSwitch

01:17:11.900 --> 01:17:12.700
X型 对吧

01:17:12.700 --> 01:17:13.900
ChangeSwitch

01:17:13.900 --> 01:17:15.260
我们就不写这个X型了

01:17:15.580 --> 01:17:17.260
好 给我一个啥呢

01:17:17.980 --> 01:17:18.940
是一样的

01:17:18.940 --> 01:17:20.140
还是给我这些东西

01:17:20.380 --> 01:17:21.100
不变

01:17:21.100 --> 01:17:21.820
不变

01:17:22.540 --> 01:17:23.820
然后我来做啥呢

01:17:24.860 --> 01:17:26.060
我来做啥呢

01:17:26.060 --> 01:17:27.340
我这里约束一下

01:17:27.900 --> 01:17:28.860
反正或者是这个东西

01:17:31.160 --> 01:17:32.920
反正或者是一个SunkX型

01:17:33.160 --> 01:17:33.880
约束一下

01:17:35.800 --> 01:17:37.000
这里没什么变化

01:17:37.000 --> 01:17:38.120
好 这里Return

01:17:39.640 --> 01:17:40.520
看一下前面怎么写的

01:17:41.240 --> 01:17:41.880
Dispatch

01:17:41.880 --> 01:17:42.360
Async

01:17:43.320 --> 01:17:43.960
Dispatch

01:17:47.270 --> 01:17:47.910
好 这里呢

01:17:47.910 --> 01:17:48.630
我们做什么

01:17:48.630 --> 01:17:49.590
要做哪些事情呢

01:17:50.070 --> 01:17:53.030
先触发改变状态

01:17:53.030 --> 01:17:54.950
然后再发送一个阿迦克斯请求吧

01:17:55.030 --> 01:17:56.470
我们就做这件事

01:17:56.790 --> 01:17:59.030
好 这里先触发Dispatch

01:17:59.190 --> 01:18:00.310
改变状态

01:18:00.310 --> 01:18:01.990
就是我们之前写的这个函数

01:18:01.990 --> 01:18:03.430
ChangeSwitch

01:18:03.430 --> 01:18:04.070
X型

01:18:04.310 --> 01:18:05.750
把参数一次传过去

01:18:05.750 --> 01:18:06.230
Type

01:18:06.710 --> 01:18:07.590
NewVar

01:18:08.230 --> 01:18:10.390
然后ID先传过去

01:18:10.710 --> 01:18:13.270
然后触发就是当前仓库的数据改变

01:18:13.270 --> 01:18:13.990
然后呢

01:18:13.990 --> 01:18:15.990
我们再慢慢去发送阿迦克斯请求

01:18:16.470 --> 01:18:17.430
阿迦克斯请求呢

01:18:17.430 --> 01:18:19.030
是用MovieService里边

01:18:19.030 --> 01:18:21.510
不是有一个就是Editor 对吧

01:18:21.510 --> 01:18:22.150
Editor

01:18:22.710 --> 01:18:23.510
Editor

01:18:25.270 --> 01:18:26.550
给我一个ID

01:18:26.550 --> 01:18:27.670
ID给他

01:18:28.390 --> 01:18:29.510
再给他一个啥的

01:18:29.510 --> 01:18:30.870
再给他一个Movie对象

01:18:30.870 --> 01:18:32.390
给他一个Movie对象

01:18:32.390 --> 01:18:33.350
Movie对象里面

01:18:33.350 --> 01:18:35.350
但是我不需要给他完整的Movie对象

01:18:35.350 --> 01:18:37.030
因为我这里只改变啥

01:18:37.350 --> 01:18:38.390
我只改变啥

01:18:38.390 --> 01:18:39.510
我只改变

01:18:40.470 --> 01:18:41.110
这个

01:18:41.750 --> 01:18:43.350
相应的这个属性对吧

01:18:43.350 --> 01:18:44.950
EaseHot这个属性

01:18:44.950 --> 01:18:46.710
还有什么EaseComing这个属性

01:18:46.710 --> 01:18:48.230
只改变相应的属性

01:18:48.230 --> 01:18:48.790
因此呢

01:18:48.790 --> 01:18:49.830
我这里写个对象

01:18:50.230 --> 01:18:50.870
写个对象呢

01:18:50.870 --> 01:18:51.510
我比方说

01:18:51.510 --> 01:18:52.950
我要改变EaseHot

01:18:53.510 --> 01:18:55.030
我只需要改变这个属性对象了

01:18:55.510 --> 01:18:56.630
但是他现在要爆错

01:18:57.670 --> 01:18:58.870
为什么要爆错呢

01:18:58.870 --> 01:19:00.310
是因为我们之前

01:19:00.310 --> 01:19:01.830
写MovieService的时候

01:19:01.830 --> 01:19:03.110
你看这些问题

01:19:03.110 --> 01:19:04.870
不可能一开始就全部考虑到

01:19:04.870 --> 01:19:05.590
非常完整

01:19:06.230 --> 01:19:08.070
我们当时可能没考虑到

01:19:08.070 --> 01:19:09.510
就是修改的时候呢

01:19:09.510 --> 01:19:10.950
他有可能只修改一部分

01:19:11.830 --> 01:19:13.110
他可能不会修改那么多

01:19:13.110 --> 01:19:14.710
可能只会修改一部分

01:19:15.350 --> 01:19:15.830
因此呢

01:19:15.830 --> 01:19:17.510
这个Movie里边

01:19:17.510 --> 01:19:18.630
它全部都是必选的

01:19:18.630 --> 01:19:19.190
你看

01:19:19.190 --> 01:19:20.550
这东西全部都是必选的

01:19:21.510 --> 01:19:22.070
因此呢

01:19:22.070 --> 01:19:22.950
我们这一块呢

01:19:22.950 --> 01:19:24.870
可以把可以进行这样的处理

01:19:24.870 --> 01:19:26.150
可以进行这样的处理

01:19:26.950 --> 01:19:27.510
怎么处理呢

01:19:27.510 --> 01:19:28.150
大家想一想

01:19:29.990 --> 01:19:30.790
Service里边

01:19:31.910 --> 01:19:32.310
在这里

01:19:33.670 --> 01:19:34.710
我们这里怎么处理呢

01:19:34.710 --> 01:19:36.310
就是修改的时候

01:19:36.310 --> 01:19:37.990
我们可以用内形远算

01:19:38.550 --> 01:19:39.670
把它变成Parsho

01:19:41.750 --> 01:19:43.270
所有的属性全部可选

01:19:43.910 --> 01:19:45.270
所有的属性全部可选

01:19:45.750 --> 01:19:46.070
OK

01:19:46.070 --> 01:19:47.030
我们把它做成这样子

01:19:47.830 --> 01:19:48.710
好那么这边

01:19:48.710 --> 01:19:49.430
一来

01:19:49.430 --> 01:19:50.150
这样子一来

01:19:50.310 --> 01:19:51.670
那么这边就不会包错了

01:19:51.670 --> 01:19:52.950
因为你想修改的时候

01:19:53.510 --> 01:19:54.630
我想修改那些

01:19:54.630 --> 01:19:55.510
就修改那些

01:19:55.510 --> 01:19:55.990
对吧

01:19:55.990 --> 01:19:57.270
我不一定要全部修改

01:19:57.990 --> 01:19:58.310
好

01:19:58.310 --> 01:19:58.710
这里呢

01:19:58.710 --> 01:20:00.150
我们这里

01:20:00.950 --> 01:20:01.750
这里就不包错了

01:20:01.750 --> 01:20:02.310
对吧

01:20:02.310 --> 01:20:03.590
好那么这里具体打写呢

01:20:04.470 --> 01:20:05.110
具体打写呢

01:20:05.110 --> 01:20:05.910
你可以判断

01:20:06.470 --> 01:20:07.910
可以根据这个Type只来判断

01:20:08.390 --> 01:20:09.510
但是没有必要

01:20:09.510 --> 01:20:10.230
没有必要

01:20:10.230 --> 01:20:11.350
你就直接这样子来

01:20:12.710 --> 01:20:13.190
这样子来

01:20:13.990 --> 01:20:15.190
用一个锁印表达式

01:20:15.190 --> 01:20:16.470
用一个锁印表达式

01:20:17.030 --> 01:20:17.910
这个锁印表达

01:20:17.910 --> 01:20:19.910
就是这个属性表达式

01:20:20.230 --> 01:20:20.870
表示这里呢

01:20:20.870 --> 01:20:21.750
通过这个纸

01:20:21.750 --> 01:20:23.350
刷出这个属性名字啥

01:20:24.150 --> 01:20:24.950
好属性的纸呢

01:20:24.950 --> 01:20:25.830
当然就是溜发

01:20:26.230 --> 01:20:26.950
就是溜发

01:20:28.710 --> 01:20:30.070
好我们写好这么一个

01:20:30.070 --> 01:20:30.630
这么一个X

01:20:31.190 --> 01:20:32.550
好因为这个X过后呢

01:20:32.550 --> 01:20:33.110
在这边

01:20:33.510 --> 01:20:33.910
在

01:20:35.270 --> 01:20:35.750
界面上

01:20:36.950 --> 01:20:37.670
Movie List

01:20:38.870 --> 01:20:39.430
在这里

01:20:39.430 --> 01:20:40.390
我们就Dispatch

01:20:40.390 --> 01:20:41.270
不是这个东西了

01:20:41.270 --> 01:20:42.150
就Dispatch

01:20:42.150 --> 01:20:43.030
迁击Switch

01:20:44.390 --> 01:20:44.790
好了

01:20:44.790 --> 01:20:45.430
来看一下

01:20:47.720 --> 01:20:48.200
看一下发动

01:20:48.200 --> 01:20:48.680
有没有发动

01:20:48.680 --> 01:20:49.480
阿迦克斯请求

01:20:52.200 --> 01:20:52.680
看一下

01:20:52.680 --> 01:20:53.400
网络请求

01:20:54.360 --> 01:20:54.840
点一下

01:20:56.120 --> 01:20:57.480
看一下请求是不是发生了

01:20:57.480 --> 01:20:58.440
发生了请求了

01:20:59.480 --> 01:21:00.440
那么这个请求

01:21:00.440 --> 01:21:01.480
传递到了服务器

01:21:01.480 --> 01:21:03.320
把ID传递过去

01:21:03.320 --> 01:21:03.800
然后呢

01:21:04.360 --> 01:21:05.960
改变的数据是EaseHeart

01:21:05.960 --> 01:21:06.600
WeForce

01:21:07.640 --> 01:21:08.520
然后再点一下

01:21:09.640 --> 01:21:10.280
你看

01:21:10.280 --> 01:21:11.560
改变的数据是EaseHeart

01:21:11.560 --> 01:21:11.880
WeTrue

01:21:12.520 --> 01:21:13.400
下边再点开

01:21:14.280 --> 01:21:15.240
EaseHeart

01:21:15.240 --> 01:21:15.640
WeTrue

01:21:16.440 --> 01:21:17.880
好为了再进一步测试

01:21:17.880 --> 01:21:18.680
我们刷新一次

01:21:19.080 --> 01:21:19.720
刷新一次

01:21:20.120 --> 01:21:20.840
你看这些状态

01:21:20.840 --> 01:21:21.560
是不是保留下来了

01:21:22.280 --> 01:21:22.600
对不对

01:21:23.960 --> 01:21:24.280
好了

01:21:24.280 --> 01:21:25.080
这是热印

01:21:25.320 --> 01:21:26.520
那么热印做完了

01:21:26.920 --> 01:21:27.720
那你剩下的东西

01:21:27.720 --> 01:21:28.520
是不是一下就出来了

01:21:29.080 --> 01:21:29.800
你只要做完了

01:21:29.800 --> 01:21:30.600
一个就完事了

01:21:30.600 --> 01:21:31.720
正在热印

01:21:32.200 --> 01:21:33.080
然后是什么呢

01:21:33.560 --> 01:21:34.680
即将上印

01:21:35.640 --> 01:21:36.520
即将上印

01:21:37.400 --> 01:21:37.880
上印

01:21:38.920 --> 01:21:39.960
这是IsComing

01:21:40.280 --> 01:21:40.920
IsComing

01:21:43.420 --> 01:21:43.820
Coming

01:21:44.460 --> 01:21:45.900
那么这里相关的属性呢

01:21:46.540 --> 01:21:47.420
没写错吧

01:21:47.420 --> 01:21:48.060
IsComing

01:21:48.060 --> 01:21:48.940
这不可能写错的

01:21:48.940 --> 01:21:49.260
对吧

01:21:49.260 --> 01:21:49.660
写错了

01:21:49.660 --> 01:21:50.220
还要提示我

01:21:50.700 --> 01:21:51.260
好这里呢

01:21:51.820 --> 01:21:52.540
使用没去

01:21:52.540 --> 01:21:53.180
IsComing

01:21:54.540 --> 01:21:55.020
继续写

01:21:55.820 --> 01:21:56.700
这是即将上印

01:21:56.700 --> 01:21:58.380
还有一个就是经典影片

01:21:58.860 --> 01:22:00.220
经典影片

01:22:00.860 --> 01:22:01.580
好这里是

01:22:02.380 --> 01:22:04.380
IsClassic

01:22:04.940 --> 01:22:06.060
啊还不可能写错的

01:22:06.380 --> 01:22:07.260
IsClassic

01:22:08.460 --> 01:22:09.580
哇你看这是不是就完了

01:22:10.220 --> 01:22:11.020
咱们来看一下啊

01:22:13.670 --> 01:22:15.190
好即将上印打开

01:22:15.750 --> 01:22:16.790
经典影片打开

01:22:17.270 --> 01:22:18.550
这个随便打开一些啊

01:22:18.550 --> 01:22:19.590
这个关掉关掉

01:22:20.230 --> 01:22:21.030
好刷新

01:22:22.230 --> 01:22:23.270
你看是没问题的

01:22:23.830 --> 01:22:24.390
没问题吧

01:22:25.270 --> 01:22:25.590
好

01:22:26.550 --> 01:22:28.230
好那么这一块写完了

01:22:28.230 --> 01:22:30.230
哇这一刻讲到时间有点长对吧

01:22:30.230 --> 01:22:32.310
因为表格这里设计到知识很多

01:22:32.310 --> 01:22:32.870
而且呢

01:22:32.870 --> 01:22:34.070
我们在做表格的过程中

01:22:34.070 --> 01:22:34.950
发现之前呢

01:22:34.950 --> 01:22:36.230
有些没有考虑到的呢

01:22:36.230 --> 01:22:38.710
我们也把它去进行了处理

01:22:38.710 --> 01:22:40.790
说花费的时间有点长啊

01:22:40.790 --> 01:22:41.830
其实还有什么东西呢

01:22:41.830 --> 01:22:42.710
就没有啥东西的啊

01:22:42.710 --> 01:22:43.270
后面就是

01:22:43.990 --> 01:22:44.790
编辑和

01:22:45.670 --> 01:22:47.590
删除了啊编辑和删除

01:22:47.590 --> 01:22:49.110
那我们下一课再完成吧

01:22:49.110 --> 01:22:50.150
下一课再完成

01:22:50.150 --> 01:22:51.510
我们这一课呢

01:22:51.510 --> 01:22:52.390
不要讲太多了

01:22:52.390 --> 01:22:53.830
好不可能大家接受不了

01:22:53.830 --> 01:22:54.790
先做啊

01:22:54.870 --> 01:22:55.510
先做

01:22:55.510 --> 01:22:57.830
不管我这里花了一个多小时的时间啊

01:22:57.830 --> 01:22:58.790
好像是一个多小时

01:22:59.510 --> 01:23:00.870
我这里花了这么多时间

01:23:00.870 --> 01:23:01.590
那么你们呢

01:23:01.590 --> 01:23:02.950
我不管你们花多少时间

01:23:02.950 --> 01:23:04.790
一定要先做成这个样子

01:23:04.790 --> 01:23:06.790
然后再去看后边的课程啊

01:23:07.350 --> 01:23:08.710
因为初学者的话

01:23:08.710 --> 01:23:10.390
一开始ts用不熟

01:23:10.390 --> 01:23:11.830
可能会加上有些同学

01:23:11.830 --> 01:23:15.190
可能连reacts啊和这个nd啊

01:23:15.190 --> 01:23:16.230
这些都没有用熟

01:23:16.230 --> 01:23:19.110
可以花会花会花费更多的时间

01:23:19.670 --> 01:23:20.390
都没关系啊

01:23:20.390 --> 01:23:21.190
我们慢一点啊

01:23:21.190 --> 01:23:22.550
慢一点不用着急

01:23:22.550 --> 01:23:23.270
做这个项目呢

01:23:23.270 --> 01:23:24.230
要有过日子的心

01:23:24.950 --> 01:23:27.430
咱们毕竟是学习新知识嘛

01:23:27.430 --> 01:23:28.470
等你用熟了之后呢

01:23:28.470 --> 01:23:29.670
你做的就很快了

01:23:29.670 --> 01:23:30.230
好吧

01:23:30.230 --> 01:23:32.630
你先把它做成这个样子

01:23:32.630 --> 01:23:33.110
然后呢

01:23:33.110 --> 01:23:35.030
再我再再继续看后边的课程

01:23:35.830 --> 01:23:36.550
好那么这一课呢

01:23:36.550 --> 01:23:37.910
我们到这里了啊

01:23:37.910 --> 01:23:39.670
表格呢做了一部分啊

01:23:39.670 --> 01:23:40.550
我们后边的部分呢

01:23:40.550 --> 01:23:42.390
在实际上的课程中再进行讲解

01:23:42.390 --> 01:23:43.910
ok好这一课到这了啊

01:23:43.910 --> 01:23:44.310
拜拜

