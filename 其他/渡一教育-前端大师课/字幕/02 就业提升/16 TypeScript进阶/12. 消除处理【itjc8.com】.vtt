WEBVTT

00:00.940 --> 00:04.940
好 我们接着解决剩下的两个问题

00:04.940 --> 00:07.940
就处理之后还有哪些事情要做

00:07.940 --> 00:12.940
第一个问题呢 这几课我们来解决就是消除方块的处理

00:12.940 --> 00:16.940
如何来消除方块 解决这么一个问题

00:16.940 --> 00:19.940
好 消除方块的话 我们来画个图啊

00:19.940 --> 00:24.940
帮助大家理解这一块 这一块最后一个复杂点了

00:24.940 --> 00:27.940
后面真的是没有什么复杂的吧

00:27.940 --> 00:32.940
好 消除方块的处理 我这里给大家画个图啊

00:32.940 --> 00:38.940
就比方说我们是有这么一个界面啊

00:38.940 --> 00:40.940
这么一个界面

00:40.940 --> 00:42.940
这个框框啊 就是外面的界面

00:42.940 --> 00:45.940
然后这里面的摆了一些方块的啊

00:45.940 --> 00:48.940
这里不用这样子摆吧

00:48.940 --> 00:51.940
摆了一些方块 一个方块 两个方块

00:51.940 --> 00:54.940
这一方块全部是放到数组里面的啊

00:54.940 --> 00:58.940
就可以在数组里面得到这些方块 三个方块

00:58.940 --> 01:03.940
其实我要判断如何来是不是应该消除呢

01:03.940 --> 01:06.940
我们首先要找到一个问题的点就是

01:06.940 --> 01:11.940
我们消除的是哪一行 哪一行的方块应该消除

01:11.940 --> 01:14.940
我们从感官上来说应该是哪一行的

01:14.940 --> 01:18.940
应该是摆满的那一行 摆满的那一行

01:18.940 --> 01:20.940
会被消除掉

01:20.940 --> 01:22.940
那么这里就涉及到一个问题

01:22.940 --> 01:27.940
什么叫做摆满的那一行

01:27.940 --> 01:30.940
什么叫做摆满的那一行

01:30.940 --> 01:32.940
我们可以这样子认为

01:32.940 --> 01:35.940
什么叫做摆满呢

01:35.940 --> 01:38.940
摆满的意思指的是

01:38.940 --> 01:40.940
在这一行里边

01:40.940 --> 01:43.940
比方说这是第七行

01:43.940 --> 01:45.940
比方说这是第七行

01:45.940 --> 01:47.940
在这一行里边

01:47.940 --> 01:50.940
它找到了方块数量

01:50.940 --> 01:52.940
找到了方块数量

01:52.940 --> 01:57.940
刚好等于了整个界面的宽度

01:57.940 --> 01:58.940
对不对

01:58.940 --> 02:00.940
我如果能在一行

02:00.940 --> 02:03.940
找到这一行的方块数量

02:03.940 --> 02:08.940
刚好等于了整个的宽度

02:08.940 --> 02:11.940
就整个界面的宽度

02:11.940 --> 02:12.940
那是不是这一行的方块

02:12.940 --> 02:13.940
是不是都要消除

02:13.940 --> 02:15.940
对不对 都要消除

02:15.940 --> 02:19.940
所以说这里面的关键点在于

02:19.940 --> 02:22.940
给我一个行号

02:22.940 --> 02:25.940
第几行 就是什么

02:25.940 --> 02:26.940
就是Y座标

02:26.940 --> 02:28.940
给我一个Y座标

02:28.940 --> 02:32.940
我去找到这个Y座标中

02:32.940 --> 02:34.940
所有的方块对象

02:34.940 --> 02:36.940
我要找到这个东西

02:36.940 --> 02:37.940
找到这个Y座标中

02:37.940 --> 02:38.940
所有的方块对象

02:38.940 --> 02:40.940
就是Y座标给我一个7

02:40.940 --> 02:41.940
那么我要找到

02:41.940 --> 02:43.940
Y座标等于7的所有方块

02:43.940 --> 02:45.940
这件事情就变得很简单了

02:45.940 --> 02:47.940
这件事我们可以在这里面做

02:47.940 --> 02:49.940
可以在这里面做

02:49.940 --> 02:51.940
在Teras入

02:51.940 --> 02:52.940
因为这个是个存计算

02:52.940 --> 02:54.940
是根据规则来进行的存计算

02:54.940 --> 02:57.940
我想把存计算的

02:57.940 --> 02:59.940
都统一放到这个内里面

02:59.940 --> 03:01.940
它专门做各种运算

03:01.940 --> 03:04.940
根据规则做各种运算

03:04.940 --> 03:06.940
再写个精彩函数

03:06.940 --> 03:08.940
这个函数我们是这样子写

03:08.940 --> 03:13.940
就是 get 9 squares

03:13.940 --> 03:17.940
得到一行的所有的方块

03:17.940 --> 03:19.940
好 你给我传一个啥呢

03:19.940 --> 03:22.940
给我传当前已存在的方块

03:22.940 --> 03:24.940
是一个数组

03:24.940 --> 03:26.940
然后再给我传一个啥呢

03:26.940 --> 03:27.940
再给我传一个行号

03:27.940 --> 03:29.940
就是Y座标

03:29.940 --> 03:30.940
Y座标

03:30.940 --> 03:31.940
那么这里

03:31.940 --> 03:32.940
打个注释

03:32.940 --> 03:33.940
我要做啥

03:33.940 --> 03:35.940
我要根据

03:35.940 --> 03:37.940
Y座标

03:37.940 --> 03:39.940
得到

03:39.940 --> 03:41.940
所有

03:41.940 --> 03:43.940
得到

03:43.940 --> 03:45.940
该

03:45.940 --> 03:47.940
所有

03:47.940 --> 03:49.940
Y座标

03:49.940 --> 03:52.940
为此值

03:52.940 --> 03:56.940
此值的方块

03:56.940 --> 03:58.940
就是在这个数组里面

03:58.940 --> 04:00.940
我要找到哪些方块的Y座标

04:00.940 --> 04:01.940
刚好等于这个Y座标

04:01.940 --> 04:02.940
那是不是内行

04:02.940 --> 04:03.940
对不对

04:03.940 --> 04:04.940
OK 那么这里呢

04:04.940 --> 04:06.940
怎么来处理呢

04:06.940 --> 04:07.940
怎么处理

04:07.940 --> 04:09.940
我们这里就可以用这种方式

04:09.940 --> 04:10.940
用这种方式

04:10.940 --> 04:11.940
就是直接返回

04:11.940 --> 04:13.940
其实一点都不复杂

04:13.940 --> 04:14.940
一个 z

04:15.940 --> 04:16.940
不是一个函数filter吗

04:16.940 --> 04:17.940
对不对

04:17.940 --> 04:18.940
有这个函数

04:18.940 --> 04:20.940
这个函数里面

04:20.940 --> 04:21.940
每个方块拿到

04:21.940 --> 04:23.940
我找哪些方块呢

04:23.940 --> 04:25.940
找这个方块的Y座标

04:25.940 --> 04:27.940
刚好等于这个Y的

04:27.940 --> 04:29.940
所以一句话就写完了

04:29.940 --> 04:31.940
所以一句话就写完了

04:31.940 --> 04:32.940
通过这个函数

04:32.940 --> 04:33.940
我可以找到

04:33.940 --> 04:35.940
甚至我都可以不用写个函数

04:35.940 --> 04:36.940
写个函数的目的呢

04:36.940 --> 04:37.940
是你们帮你们

04:37.940 --> 04:39.940
把这个思维理清楚

04:39.940 --> 04:40.940
我要做什么事

04:40.940 --> 04:42.940
我把这个Y座标上

04:42.940 --> 04:43.940
所有的方块

04:43.940 --> 04:44.940
全部得到

04:44.940 --> 04:45.940
通过这个函数

04:45.940 --> 04:46.940
当然你完全可以

04:46.940 --> 04:47.940
不写个函数

04:47.940 --> 04:48.940
因为现在有这个filter

04:48.940 --> 04:50.940
这个函数就非常非常的方便

04:50.940 --> 04:52.940
好 那么

04:52.940 --> 04:54.940
有了这个辅助函数过后

04:54.940 --> 04:56.940
我们来尝试着去写一下

04:56.940 --> 04:59.940
尝试着去写一下消除

04:59.940 --> 05:01.940
我就把它设为Private

05:01.940 --> 05:02.940
私有的

05:02.940 --> 05:03.940
我只在

05:03.940 --> 05:05.940
它是帮助我来进行消除的

05:05.940 --> 05:06.940
好

05:06.940 --> 05:09.940
给它写一个函它的函数

05:09.940 --> 05:10.940
消除

05:10.940 --> 05:12.940
消除这里给它取个名字

05:12.940 --> 05:14.940
取个名字

05:14.940 --> 05:15.940
消除

05:15.940 --> 05:16.940
消除

05:16.940 --> 05:17.940
就是delete

05:17.940 --> 05:18.940
delete squares

05:18.940 --> 05:19.940
就消除

05:19.940 --> 05:21.940
消除方块

05:21.940 --> 05:23.940
好 这个函数

05:23.940 --> 05:24.940
你要告诉我什么东西呢

05:24.940 --> 05:25.940
你只需要告诉我

05:25.940 --> 05:27.940
现在有哪些方块

05:28.940 --> 05:30.940
我会返回给你一个啥呢

05:30.940 --> 05:31.940
返回给你一个数字

05:31.940 --> 05:33.940
表示消除了几行

05:36.940 --> 05:38.940
这个函数干嘛

05:38.940 --> 05:39.940
这个函数

05:39.940 --> 05:41.940
消除

05:41.940 --> 05:42.940
就是从

05:42.940 --> 05:45.940
已存在的方块中

05:45.940 --> 05:47.940
进行消除

05:48.940 --> 05:53.940
并返回消除的行数

05:53.940 --> 05:55.940
做这么一件事

05:55.940 --> 05:58.940
好 怎么消除

05:58.940 --> 06:00.940
怎么消除呢

06:00.940 --> 06:03.940
我们可以这样做

06:03.940 --> 06:04.940
可以怎么做

06:04.940 --> 06:06.940
可以这样来

06:06.940 --> 06:07.940
比方说

06:07.940 --> 06:09.940
我们的数组有这么一些

06:09.940 --> 06:11.940
白蓝光级八道的一些方块

06:11.940 --> 06:13.940
它们全是放到数组里边了

06:13.940 --> 06:15.940
我怎么做呢

06:15.940 --> 06:17.940
我首先

06:17.940 --> 06:18.940
获取到

06:18.940 --> 06:20.940
这个数组里边

06:20.940 --> 06:23.940
最小的Y座标

06:23.940 --> 06:26.940
和最大的Y座标

06:26.940 --> 06:27.940
这个能不能做到

06:27.940 --> 06:28.940
肯定是可以做到的

06:28.940 --> 06:30.940
但是尽管还不知道怎么做

06:30.940 --> 06:32.940
但是肯定是可以做到的

06:32.940 --> 06:34.940
这个肯定是没有问题的

06:34.940 --> 06:37.940
首先能够获取到最小的Y座标

06:37.940 --> 06:39.940
和最大的Y座标

06:39.940 --> 06:41.940
那么把这个获取到了之后

06:41.940 --> 06:43.940
是不是一个循环

06:43.940 --> 06:45.940
两个最小的和最大的

06:45.940 --> 06:46.940
直接进行循环

06:46.940 --> 06:47.940
每次循环看那一行

06:47.940 --> 06:48.940
有没有满

06:48.940 --> 06:50.940
满了就完了

06:50.940 --> 06:51.940
还有啥呢

06:51.940 --> 06:52.940
就没啥了

06:52.940 --> 06:53.940
因此呢

06:53.940 --> 06:54.940
这里首先

06:54.940 --> 06:57.940
获得一个Y座标的数组

06:57.940 --> 06:59.940
第一步

06:59.940 --> 07:00.940
获得

07:00.940 --> 07:01.940
获得

07:01.940 --> 07:04.940
Y座标数组

07:04.940 --> 07:06.940
怎么获取

07:06.940 --> 07:07.940
很简单吧

07:07.940 --> 07:08.940
用什么

07:08.940 --> 07:09.940
用Map

07:09.940 --> 07:11.940
像这些ES5里边

07:11.940 --> 07:12.940
出来了很多的

07:12.940 --> 07:14.940
这种使用性的函数

07:14.940 --> 07:15.940
是非常非常方便

07:15.940 --> 07:17.940
非常舒服的

07:17.940 --> 07:18.940
直接用Map

07:18.940 --> 07:19.940
音设

07:19.940 --> 07:21.940
把每一个小方块

07:21.940 --> 07:23.940
它的Y座标拿到

07:23.940 --> 07:26.940
拿到每一个小方块的Y座标

07:26.940 --> 07:28.940
把Y座标拿到

07:28.940 --> 07:30.940
拿到之后

07:30.940 --> 07:31.940
我们就得到

07:31.940 --> 07:33.940
Y座标的数组

07:33.940 --> 07:35.940
Y座标的数组

07:35.940 --> 07:36.940
YS

07:36.940 --> 07:37.940
Y座标的数组

07:37.940 --> 07:39.940
那么从这个数组里边

07:39.940 --> 07:40.940
是不是可以获取

07:40.940 --> 07:42.940
DW出来了

07:42.940 --> 07:44.940
获取

07:44.940 --> 07:47.940
最大和最小的

07:47.940 --> 07:48.940
Y座标

07:48.940 --> 07:50.940
既然Y座标的数组都拿到了

07:50.940 --> 07:51.940
那么获取最大和最小

07:51.940 --> 07:53.940
那还不简单吧

07:53.940 --> 07:54.940
最大

07:54.940 --> 07:55.940
MaxY

07:55.940 --> 07:56.940
等于什么

07:56.940 --> 07:58.940
等于Max.Max

07:58.940 --> 08:00.940
把这个数组展开

08:00.940 --> 08:01.940
完成了

08:01.940 --> 08:02.940
对不对

08:02.940 --> 08:03.940
这是个Number的数组

08:03.940 --> 08:05.940
取一个最大只

08:05.940 --> 08:06.940
好最小的

08:06.940 --> 08:08.940
最小的Y座标

08:08.940 --> 08:10.940
Max

08:10.940 --> 08:11.940
Lin

08:11.940 --> 08:13.940
最小只

08:13.940 --> 08:14.940
所以拿到了

08:14.940 --> 08:15.940
最小的Y座标

08:15.940 --> 08:17.940
和最大的Y座标拿到了

08:17.940 --> 08:18.940
那么来呗

08:18.940 --> 08:19.940
第三步

08:20.940 --> 08:23.940
循环判断

08:23.940 --> 08:25.940
循环判断

08:25.940 --> 08:26.940
判断啥

08:26.940 --> 08:27.940
判断

08:27.940 --> 08:28.940
每一行

08:28.940 --> 08:30.940
是否可消除

08:30.940 --> 08:31.940
循环判断

08:31.940 --> 08:32.940
每一行

08:32.940 --> 08:35.940
是否可以消除

08:35.940 --> 08:36.940
来吧

08:36.940 --> 08:37.940
判断吧

08:37.940 --> 08:38.940
好

08:38.940 --> 08:40.940
出使值从最小的

08:40.940 --> 08:42.940
Y座标开始

08:42.940 --> 08:44.940
小于等于

08:44.940 --> 08:46.940
最大的Y座标

08:46.940 --> 08:47.940
你看

08:47.940 --> 08:49.940
在这个范围内去循环

08:49.940 --> 08:50.940
好

08:50.940 --> 08:52.940
每一次循环

08:52.940 --> 08:53.940
每一次循环

08:53.940 --> 08:55.940
就是从上而下

08:55.940 --> 08:57.940
从上而下进行循环

08:57.940 --> 08:59.940
每一次循环

08:59.940 --> 09:01.940
要做啥事呢

09:01.940 --> 09:03.940
是不是看一下这一行

09:03.940 --> 09:05.940
把这一行所有的

09:05.940 --> 09:06.940
每个循环就是个Y吧

09:06.940 --> 09:08.940
我这里干脆写Y算了

09:08.940 --> 09:09.940
干脆写Y算了

09:09.940 --> 09:10.940
大家看

09:10.940 --> 09:11.940
好理解一点

09:11.940 --> 09:12.940
这就是Y座标

09:12.940 --> 09:13.940
从最小的开始

09:13.940 --> 09:14.940
到最大只之间

09:14.940 --> 09:15.940
每一次循环

09:15.940 --> 09:17.940
可以拿到一个Y座标

09:17.940 --> 09:19.940
拿到这个Y座标过后

09:19.940 --> 09:21.940
我们就可以用这个函数

09:21.940 --> 09:24.940
来得到这一行的所有方块

09:24.940 --> 09:25.940
对吧

09:25.940 --> 09:28.940
拿到这个Y座标过后

09:28.940 --> 09:31.940
我们就可以得到

09:31.940 --> 09:34.940
得到这一行的squares

09:34.940 --> 09:35.940
所有方块

09:35.940 --> 09:39.940
通过get9squares

09:39.940 --> 09:42.940
把这个Z传进去

09:42.940 --> 09:44.940
然后再把这个Y传进去

09:44.940 --> 09:45.940
是不是就得到

09:45.940 --> 09:47.940
这一行的所有的方块

09:47.940 --> 09:49.940
接下来看啥

09:49.940 --> 09:50.940
怎么来判断

09:50.940 --> 09:52.940
是不是可以消除

09:52.940 --> 09:54.940
都讲过的

09:54.940 --> 09:55.940
判断啥

09:55.940 --> 09:59.940
判断这个方块的数量

09:59.940 --> 10:02.940
是不是等于了

10:02.940 --> 10:03.940
等于了啥呢

10:03.940 --> 10:06.940
等于了整个面板的宽度

10:06.940 --> 10:08.940
整个面板的宽度

10:08.940 --> 10:10.940
宽度有6格

10:10.940 --> 10:12.940
刚好这一行有6个小格子

10:12.940 --> 10:13.940
那是不是可以消了

10:13.940 --> 10:15.940
整个面板的宽度

10:15.940 --> 10:17.940
是保存在配置里面的

10:17.940 --> 10:19.940
panel size宽度

10:19.940 --> 10:20.940
你看为什么要做配置

10:20.940 --> 10:21.940
因为到处要用

10:21.940 --> 10:23.940
不然到处要改

10:23.940 --> 10:25.940
宽度的话到处要改

10:25.940 --> 10:26.940
如果相等

10:26.940 --> 10:27.940
是不是可以消除

10:27.940 --> 10:32.940
这一行可以消除

10:32.940 --> 10:34.940
可以消除

10:34.940 --> 10:37.940
那么接下来想一想

10:37.940 --> 10:39.940
怎么消除

10:39.940 --> 10:42.940
什么叫做消除

10:43.940 --> 10:44.940
这件事呢

10:44.940 --> 10:45.940
我现在

10:45.940 --> 10:46.940
我现在确实

10:46.940 --> 10:48.940
我给大家说这句话的时候

10:48.940 --> 10:49.940
我都还没想好

10:49.940 --> 10:50.940
那么没关系

10:50.940 --> 10:51.940
我觉得这一块

10:51.940 --> 10:52.940
肯定是设计到

10:52.940 --> 10:53.940
不是一两句

10:53.940 --> 10:55.940
大家马上解决的

10:55.940 --> 10:56.940
干脆

10:56.940 --> 10:57.940
我反而是遇到这种问题

10:57.940 --> 10:58.940
我想都不用想

10:58.940 --> 10:59.940
这是我在实现

10:59.940 --> 11:00.940
一个函数过程中

11:00.940 --> 11:01.940
遇到了一些复杂问题

11:01.940 --> 11:03.940
扔出来提成一个函数

11:03.940 --> 11:05.940
这些开发习惯了

11:05.940 --> 11:06.940
大家要学会

11:06.940 --> 11:07.940
好

11:07.940 --> 11:08.940
消除

11:08.940 --> 11:09.940
一行

11:09.940 --> 11:11.940
一行

11:11.940 --> 11:13.940
告诉我啥

11:13.940 --> 11:14.940
告诉我

11:14.940 --> 11:17.940
所谓的存在的方块

11:17.940 --> 11:18.940
再告诉我

11:18.940 --> 11:20.940
你要消除的内行的方块

11:20.940 --> 11:22.940
那也是个数组

11:22.940 --> 11:23.940
当然这个数组

11:23.940 --> 11:25.940
肯定是从这个数组里面出来的

11:25.940 --> 11:26.940
对吧

11:26.940 --> 11:28.940
肯定是从这个数组里面出来的

11:28.940 --> 11:30.940
当然你也可以做什么

11:30.940 --> 11:32.940
也可以给我一个行号

11:32.940 --> 11:33.940
也可以给我一个行号

11:33.940 --> 11:35.940
也行都行

11:35.940 --> 11:37.940
给我一个行号

11:37.940 --> 11:39.940
我把这一行的方块

11:39.940 --> 11:40.940
给你消除掉

11:40.940 --> 11:42.940
直接给你消除掉

11:42.940 --> 11:43.940
好

11:43.940 --> 11:45.940
那么

11:45.940 --> 11:46.940
我们这里返回个布尔吧

11:46.940 --> 11:48.940
表示是否消除了

11:48.940 --> 11:49.940
返回个布尔

11:49.940 --> 11:50.940
是否消除

11:50.940 --> 11:51.940
如果消除了

11:51.940 --> 11:52.940
如果确实能消除

11:52.940 --> 11:53.940
我把消除了过后

11:53.940 --> 11:54.940
我给你返回一个true

11:54.940 --> 11:55.940
如果不能消除的话

11:55.940 --> 11:56.940
我就可以返回force

11:56.940 --> 11:57.940
那么这里呢

11:57.940 --> 11:59.940
其实我就把个代码拿下来了

11:59.940 --> 12:02.940
就把这个代码拿下来了

12:02.940 --> 12:04.940
那么这一行是可以消除的

12:04.940 --> 12:06.940
把歪传给我了

12:06.940 --> 12:08.940
那么这边呢

12:08.940 --> 12:10.940
我就去调用这个函数

12:10.940 --> 12:12.940
res

12:12.940 --> 12:14.940
一个res传进去

12:14.940 --> 12:16.940
然后外状不要传进去

12:16.940 --> 12:18.940
这些开发习惯大家一定要学会

12:18.940 --> 12:20.940
就是不要把一个函数写得太复杂了

12:20.940 --> 12:23.940
把复杂的东西全部分开

12:23.940 --> 12:25.940
拿上注释

12:25.940 --> 12:29.940
这是指的是消除一行

12:29.940 --> 12:31.940
刚才这个函数是判断

12:31.940 --> 12:33.940
全都把写得非常非常分开

12:33.940 --> 12:34.940
这是判断

12:34.940 --> 12:36.940
根据外状不要判断

12:36.940 --> 12:37.940
有多好的方块

12:37.940 --> 12:39.940
到这里呢就是消除的这一行的方块

12:39.940 --> 12:41.940
当然你觉得这个函数太简单了

12:41.940 --> 12:43.940
你完全可以不要这个函数

12:43.940 --> 12:44.940
不要这个函数

12:44.940 --> 12:46.940
那么直接在这里

12:46.940 --> 12:47.940
直接在这里

12:47.940 --> 12:48.940
一样的写

12:48.940 --> 12:49.940
直接把拿过来写

12:49.940 --> 12:50.940
也行都行

12:50.940 --> 12:51.940
那现在你不要这个函数吗

12:51.940 --> 12:53.940
因为之前呢

12:53.940 --> 12:54.940
我可能觉得这个函数有点复杂

12:54.940 --> 12:56.940
结果一写也这么简单

12:56.940 --> 12:57.940
那就不要了

12:57.940 --> 12:58.940
这些都是开发习惯

12:58.940 --> 12:59.940
觉得这个函数太简单了

12:59.940 --> 13:01.940
没有必要提成函数

13:01.940 --> 13:03.940
那就可以不要

13:03.940 --> 13:04.940
好我们这里

13:04.940 --> 13:06.940
通过得到这个Y 得到

13:06.940 --> 13:07.940
这一行的所有的方块

13:07.940 --> 13:09.940
发现这个方块

13:09.940 --> 13:12.940
跟这个游戏面板的宽度是一样的

13:12.940 --> 13:13.940
那么就表示

13:13.940 --> 13:15.940
这一行确实可以消了

13:15.940 --> 13:17.940
确实可以消了

13:17.940 --> 13:19.940
那怎么消除呢

13:19.940 --> 13:20.940
怎么消呢

13:20.940 --> 13:22.940
消除的时候做哪些事

13:25.940 --> 13:29.940
消除时做哪些事

13:29.940 --> 13:34.450
首先界面上是不是一定没了

13:34.450 --> 13:37.450
从界面上移除

13:37.450 --> 13:38.450
对不对

13:38.450 --> 13:39.450
界面肯定没了

13:39.450 --> 13:41.450
我们一点点来说吧

13:41.450 --> 13:43.450
界面上移除

13:43.450 --> 13:46.450
这个简单怎么移除呢

13:46.450 --> 13:48.450
就是找

13:48.450 --> 13:50.450
这不是一个方块的数组吗

13:50.450 --> 13:51.450
对不对

13:51.450 --> 13:52.450
方块的数组

13:52.450 --> 13:53.450
那么这一方块

13:53.450 --> 13:54.450
全部从界面上消失

13:54.450 --> 13:55.450
全部移除掉

13:55.450 --> 13:57.450
怎么移除呢

13:57.450 --> 13:59.450
缩一起循环它

13:59.450 --> 14:00.450
每一个方块拿到

14:00.450 --> 14:02.450
每一个方块里面

14:02.450 --> 14:03.450
不是一个VU吗

14:03.450 --> 14:04.450
VU2

14:04.450 --> 14:06.450
如果它有值的话

14:06.450 --> 14:07.450
这里判断一下吧

14:07.450 --> 14:09.450
如果它有值的话

14:09.450 --> 14:11.450
VU2有值

14:11.450 --> 14:12.450
有值的话表示

14:12.450 --> 14:14.450
它已经在界面上显示了

14:14.450 --> 14:15.450
所以这里是处理的数据

14:15.450 --> 14:17.450
它不包含界面的

14:17.450 --> 14:19.450
它不能假设界面一定存在

14:19.450 --> 14:22.450
如果这个界面也确实有值

14:22.450 --> 14:24.450
确实在界面上显示了

14:24.450 --> 14:28.450
那么雕用它里面的

14:28.450 --> 14:32.450
雕用它里面的remove

14:32.450 --> 14:33.450
你看

14:33.450 --> 14:35.450
之前我写remove的方法

14:35.450 --> 14:36.450
这个时候

14:36.450 --> 14:38.450
其实我就已经想到这了

14:38.450 --> 14:39.450
已经想到这了

14:39.450 --> 14:40.450
将来它要消除

14:40.450 --> 14:41.450
它要从界面上移除掉

14:41.450 --> 14:42.450
因此呢

14:42.450 --> 14:43.450
我在界面的接口里边

14:43.450 --> 14:45.450
加了这么一个remove

14:45.450 --> 14:46.450
这不是给大家吹牛

14:46.450 --> 14:47.450
是真的想到了

14:47.450 --> 14:48.450
其实这个想到也不难

14:48.450 --> 14:49.450
对吧

14:49.450 --> 14:51.450
大家都可以想到

14:51.450 --> 14:53.450
这一行可以消除

14:53.450 --> 14:54.450
那么最终

14:54.450 --> 14:56.450
这是做了一件事

14:56.450 --> 14:58.450
从界面移除

14:58.450 --> 15:00.450
第一件事

15:00.450 --> 15:04.450
从界面中移除掉

15:05.450 --> 15:07.450
那么我们先把这件事做了吧

15:07.450 --> 15:09.450
做了在说剩下的事情

15:09.450 --> 15:11.450
界面如果能够消除

15:11.450 --> 15:13.450
这个判断的为真能够消除

15:13.450 --> 15:14.450
那么最后呢

15:14.450 --> 15:16.450
我肯定要返回一个处

15:16.450 --> 15:18.450
表示已经移除掉了

15:18.450 --> 15:19.450
否则的话

15:19.450 --> 15:20.450
如果判断没有通过

15:20.450 --> 15:21.450
返回force

15:21.450 --> 15:23.450
这是消除一行

15:23.450 --> 15:25.450
我们先做这么一件事

15:25.450 --> 15:26.450
从界面里面移除

15:26.450 --> 15:29.450
那么这里呢

15:29.450 --> 15:31.450
一次移除就完事了

15:31.450 --> 15:33.450
一次移除就完事了

15:33.450 --> 15:34.450
好这里

15:34.450 --> 15:35.450
我们看一下判断

15:35.450 --> 15:37.450
这里我要返回移除了几行

15:37.450 --> 15:38.450
对吧移除了几行

15:38.450 --> 15:39.450
我要判断一下

15:39.450 --> 15:41.450
如果这个返回为真

15:41.450 --> 15:43.450
就表示这一行已经被移除了

15:43.450 --> 15:44.450
已经被移除的话

15:44.450 --> 15:47.450
我要用个技术器来加1

15:47.450 --> 15:49.450
用个技术器

15:49.450 --> 15:52.450
那么这里那么加加

15:52.450 --> 15:55.450
移除了一行那么加加

15:55.450 --> 15:57.450
return

15:57.450 --> 16:00.450
把这个数字返回

16:00.450 --> 16:03.450
最后就返回移除了几行

16:03.450 --> 16:04.450
我们先做这么一件简单的事

16:04.450 --> 16:05.450
把它看一下这个代码

16:05.450 --> 16:07.450
好好理解一下

16:07.450 --> 16:08.450
很简单就是

16:08.450 --> 16:10.450
就是打到最小的外座标

16:10.450 --> 16:11.450
最大的外座标

16:11.450 --> 16:13.450
然后在这个范围内循环

16:13.450 --> 16:15.450
每循环一次去删除这一行

16:15.450 --> 16:16.450
看能不能删

16:16.450 --> 16:18.450
能删的话加1

16:18.450 --> 16:19.450
也表示删掉一行了

16:19.450 --> 16:21.450
最后返回这一行

16:21.450 --> 16:23.450
好这样我们看一下吧

16:23.450 --> 16:24.450
看一下

16:24.450 --> 16:26.450
到界面里面去

16:26.450 --> 16:28.450
好处理的时候

16:28.450 --> 16:30.450
不要忘记现在在做什么

16:30.450 --> 16:32.450
处理的操作

16:32.450 --> 16:36.450
除了把这些加进去之外

16:36.450 --> 16:38.450
在切换方块之前

16:38.450 --> 16:40.450
先把它打散

16:40.450 --> 16:42.450
加到这个存在的数组里边去

16:42.450 --> 16:44.450
加进去过后在切换方块之前

16:44.450 --> 16:46.450
是不是要移除啊

16:46.450 --> 16:48.450
处理移除

16:48.450 --> 16:51.450
我们这里得到一个数字吧

16:51.450 --> 16:53.450
移除了几行

16:53.450 --> 16:55.450
通过terrors入

16:55.450 --> 16:57.450
这里innet spares

16:57.450 --> 16:58.450
它提供了这么一个函数

16:58.450 --> 16:59.450
你看该私有化的

16:59.450 --> 17:00.450
我已经私有化了

17:00.450 --> 17:02.450
你不可能去调用其他函数的

17:02.450 --> 17:04.450
你把以存在的方法给我

17:04.450 --> 17:05.450
剩下的是交给我了

17:05.450 --> 17:07.450
让我来去帮你搞定

17:07.450 --> 17:09.450
好最后我们输出一下

17:09.450 --> 17:11.450
移除了几行

17:11.450 --> 17:12.450
保存一下

17:12.450 --> 17:14.450
咱们来看一下

17:14.450 --> 17:16.450
它现在能有移除功能了

17:16.450 --> 17:18.450
我们开始

17:18.450 --> 17:21.450
这个操作起来不太好操作

17:21.450 --> 17:23.450
下

17:23.450 --> 17:24.450
下

17:24.450 --> 17:26.450
不靠

17:26.450 --> 17:28.450
下

17:28.450 --> 17:35.860
这

17:35.860 --> 17:37.860
下

17:37.860 --> 17:39.860
旋转

17:39.860 --> 17:40.860
下

17:40.860 --> 17:42.860
好移除了一行看没

17:42.860 --> 17:43.860
打印出来了

17:43.860 --> 17:44.860
之前都是移除一行

17:44.860 --> 17:45.860
让打印出来移除一行

17:45.860 --> 17:48.860
那为什么它悬空了呀

17:48.860 --> 17:50.860
它为什么悬空了

17:50.860 --> 17:53.860
因为你现在只是在介面上

17:53.860 --> 17:55.860
把它移除掉了

17:55.860 --> 17:57.860
只是在介面上把它移除掉了

17:57.860 --> 18:00.860
并没有真正的把它

18:00.860 --> 18:03.860
真正的把它从竖竹里面移除掉

18:03.860 --> 18:04.860
而且呢

18:04.860 --> 18:07.860
就算从竖竹里面移除掉了

18:07.860 --> 18:09.860
你也没有去改动它剩下的坐标

18:09.860 --> 18:10.860
对不对

18:10.860 --> 18:11.860
剩下的这一方法

18:11.860 --> 18:12.860
坐标是不是要改

18:12.860 --> 18:13.860
是不是要跑下来

18:13.860 --> 18:14.860
对不对

18:14.860 --> 18:15.860
现在别管

18:15.860 --> 18:16.860
我们后面说

18:16.860 --> 18:17.860
一个胜负判断的问题

18:17.860 --> 18:18.860
现在我们就看这里

18:18.860 --> 18:20.860
移除掉这一行过后

18:20.860 --> 18:22.860
比这一行比

18:22.860 --> 18:24.860
这一行有个Y坐标

18:24.860 --> 18:26.860
那么Y坐标比这个小的

18:26.860 --> 18:28.860
是不是全部要加一

18:28.860 --> 18:29.860
对不对

18:29.860 --> 18:30.860
是不是这个道理

18:30.860 --> 18:32.860
移除了这一行过后

18:32.860 --> 18:34.860
剩下的Y坐标比这个小的

18:34.860 --> 18:36.860
是不是要全部加一

18:36.860 --> 18:37.860
OK

18:37.860 --> 18:38.860
好

18:38.860 --> 18:40.860
那么我们就可以知道了

18:40.860 --> 18:43.860
这里如果我移除掉了之后呢

18:43.860 --> 18:44.860
消除一行

18:44.860 --> 18:46.860
从介面移除掉之后

18:46.860 --> 18:48.860
还要做一件事

18:48.860 --> 18:50.860
还要做啥事呢

18:50.860 --> 18:53.860
第二件事

18:53.860 --> 18:55.860
剩下的

18:56.860 --> 19:00.860
Y坐标比当前的

19:00.860 --> 19:04.860
Y小的方块

19:04.860 --> 19:06.860
Y加一

19:06.860 --> 19:07.860
做这么一件事

19:07.860 --> 19:08.860
好

19:08.860 --> 19:09.860
这件事情很简单

19:09.860 --> 19:11.860
一个Z是

19:11.860 --> 19:12.860
一个Z是

19:12.860 --> 19:14.860
什么叫剩下的

19:14.860 --> 19:15.860
过滤

19:15.860 --> 19:17.860
Filter

19:17.860 --> 19:18.860
过滤

19:18.860 --> 19:20.860
找到那些哪个

19:20.860 --> 19:21.860
什么方块

19:21.860 --> 19:24.860
就是方块的坐标Y

19:24.860 --> 19:26.860
比当前这个Y

19:26.860 --> 19:28.860
要小的方块

19:28.860 --> 19:30.860
是不是在上面的

19:30.860 --> 19:32.860
小的是不是在上面的

19:32.860 --> 19:33.860
Y坐标往下增加

19:33.860 --> 19:35.860
那么小就在上面的

19:35.860 --> 19:37.860
你把这一行销了

19:37.860 --> 19:38.860
把这一行销了过后

19:38.860 --> 19:40.860
你的Y坐标比这个小的

19:40.860 --> 19:42.860
那么找到他们

19:42.860 --> 19:44.860
然后循环

19:44.860 --> 19:46.860
练习变成

19:46.860 --> 19:47.860
循环他们

19:47.860 --> 19:49.860
然后把每一个

19:49.860 --> 19:50.860
这些坐标的

19:50.860 --> 19:51.860
每一个Y坐标的

19:51.860 --> 19:52.860
X不变

19:52.860 --> 19:53.860
X不变

19:53.860 --> 19:55.860
然后Y坐标

19:55.860 --> 19:57.860
Point

19:57.860 --> 19:59.860
Y坐标

19:59.860 --> 20:00.860
要加一

20:00.860 --> 20:01.860
对不对

20:01.860 --> 20:02.860
要加一

20:02.860 --> 20:03.860
好

20:03.860 --> 20:04.860
这是这件事

20:04.860 --> 20:05.860
好

20:05.860 --> 20:06.860
咱们来试一下

20:06.860 --> 20:09.620
来试一下

20:09.620 --> 20:10.620
这里呢

20:10.620 --> 20:12.620
开始

20:12.620 --> 20:14.620
我一个正常一点的

20:14.620 --> 20:16.620
开始

20:16.620 --> 20:18.620
右

20:18.620 --> 20:20.620
下

20:20.620 --> 20:21.620
右

20:21.620 --> 20:22.620
左

20:22.620 --> 20:23.620
下

20:23.620 --> 20:24.620
左

20:24.620 --> 20:25.620
下

20:25.620 --> 20:27.930
右

20:27.930 --> 20:28.930
旋转

20:28.930 --> 20:31.370
下

20:31.370 --> 20:33.370
哎看现在是不是正确了

20:33.370 --> 20:34.370
正确了

20:34.370 --> 20:36.370
但是你会发现有问题没

20:36.370 --> 20:38.370
还有啥问题

20:38.370 --> 20:40.370
还有啥问题

20:40.370 --> 20:42.370
好这是一个问题啊

20:42.370 --> 20:43.370
这个问题我们等会再解决

20:43.370 --> 20:45.370
其实还有问题的这里

20:45.370 --> 20:46.370
这里

20:46.370 --> 20:47.370
还有什么问题呢

20:47.370 --> 20:48.370
大家看一下

20:48.370 --> 20:49.370
我这个问题呢

20:49.370 --> 20:50.370
我不是很好给大家

20:50.370 --> 20:52.370
能够做得出来

20:52.370 --> 20:53.370
他要

20:53.370 --> 20:55.370
我这样子吧

20:55.370 --> 20:56.370
我这样子

20:56.370 --> 20:58.370
为了测试方便啊

20:58.370 --> 20:59.370
我这里把

20:59.370 --> 21:01.370
全部做成这个玩意吧

21:01.370 --> 21:04.370
全部做成这个square shape

21:04.370 --> 21:07.370
全部做成这个square shape

21:07.370 --> 21:08.370
全部做它

21:08.370 --> 21:09.370
做成它

21:09.370 --> 21:10.370
开始

21:10.370 --> 21:12.370
下

21:12.370 --> 21:13.370
下

21:13.370 --> 21:15.370
大家看一下啊

21:15.370 --> 21:17.370
我先看这个问题

21:17.370 --> 21:19.370
好

21:19.370 --> 21:21.370
下

21:21.370 --> 21:22.370
对

21:22.370 --> 21:24.370
等一下啊

21:25.370 --> 21:26.370
不对不对不对

21:26.370 --> 21:27.370
还不是这个问题

21:27.370 --> 21:29.370
我想想啊

21:29.370 --> 21:31.370
这个地方没有问题了

21:31.370 --> 21:32.370
这个地方就没有问题了

21:32.370 --> 21:34.370
因为我之前想错了

21:34.370 --> 21:36.370
因为我之前想了啥呢

21:36.370 --> 21:37.370
我之前说这个地方

21:37.370 --> 21:38.370
如果删除了过后

21:38.370 --> 21:40.370
这里要y要减1

21:40.370 --> 21:41.370
y减1

21:41.370 --> 21:42.370
因为以前我们在做

21:42.370 --> 21:43.370
这个输出的操作的时候

21:43.370 --> 21:44.370
往往都是这样做的

21:44.370 --> 21:45.370
对吧

21:45.370 --> 21:46.370
y做过要减1

21:46.370 --> 21:48.370
然后重新看一下这一行

21:48.370 --> 21:50.370
但是现在实际上是不用了

21:50.370 --> 21:53.370
因为它是从最小的y开始的

21:53.370 --> 21:56.370
就是从上到下进行消除的

21:56.370 --> 21:58.370
它是从上到下进行消除的

21:58.370 --> 22:00.370
因此每消除一行

22:00.370 --> 22:02.370
它只会影响到之前的

22:02.370 --> 22:04.370
上面的内行

22:04.370 --> 22:06.370
它是这样子消的

22:06.370 --> 22:07.370
它是这样子

22:07.370 --> 22:08.370
从上到下消的

22:08.370 --> 22:09.370
比方说

22:09.370 --> 22:10.370
看这一行

22:10.370 --> 22:11.370
这一行能不能消

22:11.370 --> 22:12.370
这一行不能消

22:12.370 --> 22:13.370
又看这一行

22:13.370 --> 22:14.370
这一行如果能消的话

22:14.370 --> 22:16.370
它只会影响到之前的

22:16.370 --> 22:18.370
它不会影响到之后的

22:18.370 --> 22:19.370
不会影响到之后的

22:19.370 --> 22:20.370
所以说这样子

22:20.370 --> 22:21.370
已经没问题了

22:21.370 --> 22:23.370
只剩下最后一个问题了

22:23.370 --> 22:26.370
就是它为什么又选空了

22:26.370 --> 22:27.370
为什么呢

22:27.370 --> 22:28.370
是这样子

22:28.370 --> 22:31.370
你只是在界面上给它消了

22:31.370 --> 22:35.370
目前只是在界面上移除掉了

22:35.370 --> 22:36.370
就在这

22:36.370 --> 22:38.370
你目前只是从界面移除了

22:38.370 --> 22:40.370
然后把剩下的y做标增加

22:40.370 --> 22:42.370
但是你看这个数组里边

22:42.370 --> 22:44.370
它的东西是不是全在

22:44.370 --> 22:46.370
这些被消除的那些对象

22:46.370 --> 22:48.370
在数组里边还在

22:48.370 --> 22:50.370
因此移动的时候

22:50.370 --> 22:53.370
根据这个数组来判断是否能移动的

22:53.370 --> 22:54.370
那接下来的问题呢

22:54.370 --> 22:55.370
就是你要从

22:55.370 --> 22:56.370
把这些东西

22:56.370 --> 22:58.370
从数组里边移除掉

22:58.370 --> 22:59.370
怎么移除

22:59.370 --> 23:02.370
那还不简单吗

23:02.370 --> 23:04.370
这个exist

23:04.370 --> 23:05.370
exist

23:05.370 --> 23:07.370
然后怎么样

23:07.370 --> 23:08.370
然后index

23:08.370 --> 23:10.370
index

23:10.370 --> 23:11.370
得到那个锁印

23:11.370 --> 23:12.370
对吧

23:12.370 --> 23:13.370
得到那个锁印

23:13.370 --> 23:15.370
哪个锁印的就是

23:15.370 --> 23:18.370
把当前这一项传进去

23:18.370 --> 23:19.370
把当前的对象传进去

23:19.370 --> 23:21.370
看它的锁印是多少

23:21.370 --> 23:23.370
锁印是多少

23:23.370 --> 23:25.370
拿到这个锁印之后

23:25.370 --> 23:27.370
然后从数组里边移除掉

23:27.370 --> 23:29.370
exist

23:29.370 --> 23:30.370
index

23:30.370 --> 23:31.370
移除一个

23:31.370 --> 23:33.370
就完事了

23:33.370 --> 23:35.370
送数组里面也可以移除掉了

23:35.370 --> 23:36.370
就完了

23:36.370 --> 23:38.370
我们来看一下

23:38.370 --> 23:40.370
开始

23:40.370 --> 23:42.370
下

23:42.370 --> 23:44.370
下

23:44.370 --> 23:46.370
下

23:46.370 --> 23:48.370
下

23:48.370 --> 23:50.370
下

23:50.370 --> 23:51.370
你看

23:51.370 --> 23:52.370
就没问题了

23:52.370 --> 23:54.370
其实你还可以把数组打印出来看一下

23:54.370 --> 23:56.370
肯定是移除掉了

23:56.370 --> 23:57.370
肯定是移除掉了

23:57.370 --> 23:59.370
那么这一块

23:59.370 --> 24:01.370
消除这里就没问题了

24:01.370 --> 24:03.370
我并且能够得到

24:03.370 --> 24:04.370
能够得到啥呢

24:04.370 --> 24:05.370
它消除的数量

24:05.370 --> 24:07.370
得到的数量有什么用

24:07.370 --> 24:09.370
将来我计分的时候

24:09.370 --> 24:11.370
我计算它有多少分

24:11.370 --> 24:13.370
它一次性消除的越多

24:13.370 --> 24:14.370
它分数越高

24:14.370 --> 24:16.370
这个会影响到后边的计分

24:16.370 --> 24:18.370
那么现在我们先不管

24:18.370 --> 24:19.370
先得到再说

24:19.370 --> 24:21.370
好 最后

24:21.370 --> 24:22.370
还有个问题

24:22.370 --> 24:24.370
就是消除已经搞定了

24:24.370 --> 24:26.370
那么

24:26.370 --> 24:28.370
就是游戏适逢结束了

24:28.370 --> 24:33.090
游戏适逢结束

24:33.090 --> 24:35.090
刚才总结一下吧

24:35.090 --> 24:37.090
消除是做哪些事

24:37.090 --> 24:39.090
从界面上移除

24:39.090 --> 24:41.090
然后还要做哪些事呢

24:41.090 --> 24:43.090
从exist

24:43.090 --> 24:45.090
数组中移除

24:46.090 --> 24:47.090
还要做哪些事呢

24:47.090 --> 24:49.090
还要改变

24:49.090 --> 24:50.090
外座标

24:50.090 --> 24:52.090
就是有些方块的外座标

24:52.090 --> 24:53.090
要改变

24:53.090 --> 24:55.090
这次关于

24:55.090 --> 24:56.090
出底之后

24:56.090 --> 24:58.090
消除方块的处理

24:58.090 --> 24:59.090
搞定了

24:59.090 --> 25:00.090
那么至下最后一块的

25:00.090 --> 25:01.090
游戏适逢结束

25:01.090 --> 25:02.090
大家可以想一想

25:02.090 --> 25:03.090
游戏适逢结束

25:03.090 --> 25:05.090
其实已经比较简单了

25:05.090 --> 25:06.090
大家可以思考一下

25:06.090 --> 25:07.090
OK

25:07.090 --> 25:08.090
好了

25:08.090 --> 25:10.090
那么这里可能有到这里的

25:10.090 --> 25:11.090
跟着做一遍

25:11.090 --> 25:13.090
如果你前面的都经历过了

25:13.090 --> 25:15.090
做这一块就已经非常非常简单了

25:15.090 --> 25:16.090
因为核心功能

25:16.090 --> 25:18.090
都已经分布在不同的内里边了

25:18.090 --> 25:19.090
我们已经做完了

25:19.090 --> 25:20.090
游戏这个内呢

25:20.090 --> 25:22.090
其实就是把它整合一下

25:22.090 --> 25:23.090
好了

25:23.090 --> 25:24.090
那这里可以到这里了

25:24.090 --> 25:25.090
拜拜

