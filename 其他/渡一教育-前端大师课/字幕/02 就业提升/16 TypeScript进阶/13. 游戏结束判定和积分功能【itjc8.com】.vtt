WEBVTT

00:01.630 --> 00:02.950
来吧 咱们继续呗

00:03.870 --> 00:07.550
最后了 就是判断游戏是否结束

00:08.270 --> 00:11.830
也是在触底的时候判断的 这方块触底的时候

00:11.830 --> 00:13.510
我要判断游戏是否结束

00:14.310 --> 00:16.670
我们再找这个game 这个内啊

00:17.670 --> 00:20.830
之前呢 在触底里边我们做了这么一些事了 保存

00:22.030 --> 00:25.430
就是小方块 然后呢 该移除的移除

00:26.070 --> 00:27.630
移除完了过后切换

00:28.510 --> 00:33.990
什么时候在什么位置进行游戏结束的判断呢

00:34.710 --> 00:39.230
应该在什么位置啊 其实你仔细思考一下这个问题啊

00:39.910 --> 00:45.230
游戏的判断应该在什么时候进行的 应该是在切换方块的时候

00:46.190 --> 00:52.870
就在这 切换方块的时候要判断游戏是否结束

00:53.510 --> 00:58.430
就是说切换了这个方块 切换了之后呢 你看一下我们做了什么事了 之前

00:59.750 --> 01:03.590
我们在这切换方块 转到第一啊 F12转到第一

01:04.590 --> 01:11.150
切换方块的时候呢 你看一下啊 那么我们把当前的方块呢 设置为下一个方块 对吧

01:11.590 --> 01:13.390
然后做了一大堆事情

01:14.390 --> 01:21.350
做了做这些事情之前呢 我们把这个方块切换过来了 你看这里 我们在设置他的中心点做标

01:21.950 --> 01:22.630
就在这个位置

01:23.590 --> 01:31.910
这个位置在做什么 在设置这个方块的中心点做标 就是把出现的方块放在中间啊 把出现的方块放在中间

01:32.630 --> 01:41.030
那么这个时候就有可能会出问题 什么问题呢 大家看一下啊 你看一下这个这个颜色一直在变 为什么一直在变了

01:41.670 --> 01:46.990
是因为之前的方块把当前的方块给覆盖掉了 把当前的方块给覆盖掉了

01:47.750 --> 01:49.630
所以说我们应该在这个位置

01:50.350 --> 01:57.470
就是把下一个方块移过来 当成当前方块 然后呢 设置了当前方块的中心点做标

01:58.310 --> 02:01.270
设置了之后 这个时候就有可能出问题

02:02.470 --> 02:03.270
有可能出问题

02:05.110 --> 02:07.630
什么问题呢 就是当前方块

02:08.790 --> 02:14.270
一出现出现时 出现这个方块的时候 就会导致了什么呢

02:15.270 --> 02:20.950
就已经和之前的方块重叠了

02:22.710 --> 02:30.110
就是这个方块刚刚出现都还没有等下落啊 还没有等他等于进行任何的操作 就已经跟之前的方块重叠了

02:30.430 --> 02:32.390
那么这个时候是不是个游戏该结束了

02:33.070 --> 02:38.790
还还能玩吗 这个游戏 没法玩了 方块一出现就已经重叠了 他就没法玩了这个游戏

02:39.510 --> 02:46.030
因此呢 我们应该在这个时候来判断游戏是不是结束 是不是结束 就看这个方块

02:47.070 --> 02:48.750
设置了中心点做标之后

02:49.950 --> 02:51.390
然后呢 这个时候

02:52.390 --> 02:57.030
之前的方块跟之前的方块有没有重叠啊 有没有重叠

02:57.830 --> 03:06.630
当然那你可以等到什么 等可以稍微延后一点 比方说等下一个方块出来之后啊 然后等切换显示之前

03:07.630 --> 03:13.830
等切换显示之前就下一个方块出来之后 等切换显示之前也可以啊 也可以 就看你自己

03:14.270 --> 03:17.550
我觉得就要这就要这进行判断嘛 就要这处理就得了

03:18.270 --> 03:25.430
好 其实要判断当前那个方块是不是跟之前跟那个之前的方块是不是有重叠

03:26.390 --> 03:27.030
怎么判断呢

03:28.150 --> 03:34.070
怎么判断 我们之前写了那么多的函数了 在这个里边不是有个函数吗

03:34.990 --> 03:35.870
堪哀目

03:37.030 --> 03:41.270
这个位置是否有效 把方块移动到这个位置是否有效

03:41.950 --> 03:48.430
所以说这里我们判断的东西很简单 就是去调用这个函数 叫做堪哀目

03:50.350 --> 03:55.150
形状 传进去 形状是啥 当前方块的

03:56.110 --> 03:57.710
shap 雄状给他

03:58.750 --> 04:06.110
目标点位置 我还移动吗 不移动 就当前位置 就这个方块的位置 看一下是不是有问题

04:06.870 --> 04:08.870
啊 目标点位置就是当前位置

04:09.710 --> 04:14.670
this current 当前这个方块的 current point

04:16.430 --> 04:19.750
当前这个方块的 with a center point这个位置

04:20.710 --> 04:22.710
然后呢 还有啥 还有

04:23.710 --> 04:27.910
当前以存在的方块也给他 把这些东西给他全部给你

04:28.430 --> 04:33.350
好 你看一下 你别看别的了 就看我目前这个位置是不是正常的

04:34.070 --> 04:37.630
好 如果能够移动到目前这个位置 那还ok

04:39.190 --> 04:40.750
那还行 那还能继续玩

04:42.270 --> 04:43.830
你还可以进行各种操作

04:44.670 --> 04:50.070
但是如果出现这种情况 这个位置都已经不行了 就这个位置都已经不行了

04:50.790 --> 04:54.550
那么还能玩吗 对游戏 不能玩了 游戏结束

04:55.750 --> 05:03.030
游戏结束 游戏结束做啥呢 首先状态改变game standards 改变状态

05:04.070 --> 05:10.390
把它变为什么呢 over 游戏结束了 玩不了了这个游戏 已经结束了

05:11.270 --> 05:13.190
好 然后呢 还有啥呢

05:14.950 --> 05:25.470
我们看啊 还有什么东西要要要变化了 tamer 是不是这东西应该清空了 计时器该没有了啊 游戏都结束了 也不要有计时了啊 clear interval

05:26.510 --> 05:28.510
大家当前的就是计时器清空

05:29.870 --> 05:38.790
还有啥呢 把这个计时器设为on the side 设为on the side 那么下一次游戏再重新开始的时候呢 一切从来

05:39.510 --> 05:41.790
ok 好 把它设为on the side

05:43.870 --> 05:51.750
好 玩笑了 这就是游戏结束 好 咱们来看一下啊 看一下游戏是否能正常结束了 现在开始

05:54.030 --> 05:56.750
下啊 老是想去点这个鼠标下

05:57.950 --> 06:02.830
游戏结束了 玩不了了这个啊 这个地方玩不了了 他不再进行下一次游戏了

06:03.630 --> 06:09.030
好 我们再来试啊 再看一下啊 开始下下下

06:10.430 --> 06:11.630
啊 给他自行下落

06:14.600 --> 06:21.920
好 游戏结束了 结束了 为什么颜色还变了一次呢 为什么颜色还变了一次 是因为后边代码还运行了一次

06:22.480 --> 06:31.600
后边代码还运行了一次 其实这里呢 已经可以写retel 已经写可以写个retel 把这个函数直接结束 不要再进行了啊 后边已经没法进行下去了

06:32.320 --> 06:34.960
好 保存一下 咱们再来看一下啊 开始

06:35.880 --> 06:38.560
下下下下

06:39.800 --> 06:44.800
好 再看一次啊 我们换 把方块换一下吧 换一下方块

06:46.480 --> 06:48.120
看一下 到这个

06:50.040 --> 06:52.920
嗯 在哪儿啊 切换啊

06:53.760 --> 06:56.840
哦 在这terrors里边 把这些注射取消掉

06:57.840 --> 07:04.160
把这些注射取消掉 好 保存一下啊 我们这里在重新开始 刷新意思

07:05.360 --> 07:07.960
啊 开始 啊 这里

07:09.240 --> 07:13.320
诶 这里出问题了对吧 这里出问题了 我们看一下哪里的哪里有问题

07:14.280 --> 07:23.360
呃 我们看一下这里输出一句话 输出console log 游戏结束 看一下是不是一开始他就游戏结束了 还是我们代码那里写对问题

07:24.280 --> 07:30.680
啊 这里点开始 点开始游戏就结束了 是吧 好 我们再看一下啊 查一下这个地方是哪里出了问题

07:31.520 --> 07:34.920
我把当前这个方块的形状给他

07:36.200 --> 07:37.200
然后呢 再把

07:38.280 --> 07:40.440
当前方块的中心点坐标给他

07:41.320 --> 07:44.040
然后再把当前已存在的方块给他

07:44.880 --> 07:52.400
他如果啊 不能移动到目前这个位置 那么游戏就结束了 那他现在返回了就是force

07:54.160 --> 08:01.640
我看一下啊 哪里出了问题 好 我试着把这个打印出来看一下啊 这里有个错误

08:03.200 --> 08:06.960
有可能是我之前的某一些地方有些蛋麻了 起了一个bug

08:08.120 --> 08:13.960
好吧 是中心点坐标打出打印出来看一下啊 看一下 这里点开始

08:15.320 --> 08:18.960
啊 这个没问题 我们再刷新啊 刚才是一开始就就不能下落了

08:20.520 --> 08:22.320
啊 这里还没问题 再刷新啊

08:23.320 --> 08:25.080
点开始

08:26.920 --> 08:27.120
下

08:28.720 --> 08:33.280
啊 这里游戏结束了 游戏结束了应该是这个方块出了问题 这个方块

08:34.040 --> 08:38.200
这个方块我们看一下啊 我把这两个中心点坐标是4和0

08:39.080 --> 08:41.720
中心点是这个位置 中心点是4和0

08:43.120 --> 08:49.720
哦 他这个中心点坐标坐标有问题啊 如果中心点坐标的 y 坐标是0的话 你想一想啊

08:50.160 --> 08:55.680
如果中心点的 y 坐标是0的话 一出现的话 他这个东西是不是负一 你看这个 y 坐标是不是负一

08:56.480 --> 09:02.480
那就不行啊 这个地方有问题啊 那那应该是这个函数出的问题 这个函数出的问题

09:03.800 --> 09:10.360
这个函数 就是重新设置中心点坐标这个函数出的问题 他中心点坐标不应该是0

09:11.080 --> 09:14.920
y 坐标不应该是0 我们当时是向下移动的 我们看一下啊 这个函数

09:15.640 --> 09:18.640
之前是设置的有问题的 我看一下

09:19.840 --> 09:21.320
哦 是这个地方 这个地方

09:22.400 --> 09:29.560
哦 我们应该是设置啥 应该设置中心点的坐标 对吧 中心点的 y 坐标加一 我干嘛去把每一个方块加一呢

09:30.800 --> 09:36.080
应该是你的问题啊 哦 这里重新设置一下啊 center point 加设作为这个

09:38.400 --> 09:40.200
应该是中心点的 y 坐标加一

09:46.580 --> 09:48.100
好 再试一下啊

09:49.100 --> 09:50.100
开始

09:51.100 --> 09:54.100
现在没问题的 嗯 正确了 下

09:55.100 --> 09:56.100
下下

09:57.100 --> 09:58.100
让他自行结束

10:00.100 --> 10:06.100
啊 结束了啊 自行结束了 那么这样子一来呢 就是说啊 如果你

10:07.100 --> 10:17.100
就是到这啊 到游戏结束这里啊 就是如果你把这个新的方块出现过后 设置到中心点坐标出现了之后呢 就已经导致的吗

10:18.100 --> 10:24.100
没有办法啊 进行游戏了 那么这个时候游戏结束了 我说过啊 这个 这个代码呢 可以写到这

10:24.900 --> 10:31.900
也可以写到这 啊 也可以写到这 就等下一个方块出现之后 然后再来处理这个问题 也行啊 也行

10:32.540 --> 10:38.100
好 最后呢 这个小地方呢 还有个 还有个小bug啊 一个小bug 非常不起眼的bug 大家看一下

10:38.940 --> 10:41.420
就在这啊 就在这 就是

10:42.420 --> 10:43.420
呃 我们这里

10:45.420 --> 10:50.420
开始吧 开始 下下下 大家注意看这个区啊 注意看这个区

10:52.420 --> 10:58.420
你看 游戏结束后 他有个跳动 他为什么会跳动呢 他是这样子啊 他是这样子

10:59.420 --> 11:04.420
他之前呢 就是他 他这个下一个方块 给他复制到当前这个方块

11:05.420 --> 11:11.420
当前这个方块呢 他显示到哪了呢 他显 就是这个代码不管你写到这 还是写到这都有这个问题

11:12.420 --> 11:20.420
就当前这个方块 他目前啊 代码运行到这的时候 他目前还是在显示在这个区域的 对吧 显示到这个区域的

11:21.420 --> 11:27.420
然后呢 你给他重新设置了中心点坐标 重新设置了中心点坐标 是不是他就相当有移动

11:28.420 --> 11:33.420
有移动 因为这边要宽一些嘛 是吧 因为按照这边的宽度来设置中心点坐标 是不是

11:34.420 --> 11:39.420
对于相对于这边比较窄的区域来说啊 那么他的坐标会往右移

11:40.420 --> 11:48.420
然后呢 本来是没事的 因为一会儿啊 他要显示到左边的主面板里边 设置的中心点坐标本来是没事的啊 本来是没事的

11:49.420 --> 11:56.420
但是呢 由于啊 由于游戏已经结束了 他没后办法把他放到主面板里边来了

11:57.420 --> 11:58.420
因此呢 就导致了这个问题

11:59.420 --> 12:03.420
那么这里怎么解决呢 其实很简单 游戏结束了 这里还出现吗

12:04.420 --> 12:09.420
这不出现了 对不对 不出现了 因此呢 你可以做这点 做这样一件事

12:10.420 --> 12:19.420
游戏结束了过后了 你把这个啊 他的512 就是每一个小方块的啊 去循环他 循环每一个小方块

12:20.420 --> 12:29.420
然后掉了他的512啊 如果如果有值的话 如果你的512有值的话 那么掉了512的人物移除掉

12:29.420 --> 12:37.420
移除掉 不再显示 就完事了 OK 好 保存一下啊 看一下 开始下下下下

12:38.420 --> 12:45.420
好 游戏结束 这里搞定了游戏结束的功能 游戏结束的功能就搞定了

12:46.420 --> 12:50.420
那么游戏结束过后 总归要重新开始 对吧 总归要重新开始

12:51.420 --> 12:56.420
那么重新开始过后呢 又需要重新初始化游戏 重新初始化游戏

12:56.420 --> 13:01.420
然后再运行start 再运行这个start 函数 重新开始

13:02.420 --> 13:06.420
好 那么这个start里面呢 我们就可以在这里面处理啊 就开始的时候进行处理

13:07.420 --> 13:10.420
如果游戏已经是正在游戏的状态 我们之前写了代码

13:11.420 --> 13:15.420
如果已经是正在游戏的状态 那么什么都不做

13:16.420 --> 13:25.420
好 那么这里呢 还有一种情况 从游戏结束啊 到什么呢 到开始

13:26.420 --> 13:31.420
这种情况 如果当前的游戏状态 就是已经结束的状态

13:32.420 --> 13:41.420
Gamestankers表示 over 游戏已经结束的状态 那么这个时候呢 要进行一些初始化操作

13:42.420 --> 13:48.420
初始化操作 哪些初始化操作呢 就是把游戏回到最 回归到最初的状态

13:49.420 --> 13:52.420
回归到最开最原始的样子 哪些初始化操作呢

13:52.420 --> 13:57.420
其实你这里可以写个函数 专门写个函数 比如说这里 写个函数

13:58.420 --> 14:04.420
Private Init初始化操作 那么这里呢 就调容一下就行了 就是从游戏结束

14:05.420 --> 14:08.420
到游戏开始呢 要进行一下初始化 要把之前的东西要清理一下

14:09.420 --> 14:13.420
哪些初始化操作 首先是 以存在的方块是不是该没了

14:14.420 --> 14:18.420
以存在的方块还能有吗 要没了 对吧 然后呢 下一个方块

14:18.420 --> 14:28.420
Nexterus 下一个方块 是不是要重新来 就是重新设置一下下一个方块

14:29.420 --> 14:33.420
就是Private Terus 重新产生一个下一个方块

14:34.420 --> 14:40.420
那么重新产生了下一个方块之后 是不是按照之前的做法

14:41.420 --> 14:46.420
我们之前在构造函数里边 以及在这里面都做了类似的事情

14:47.420 --> 14:53.420
修Next 调用这个 调用它 来显示下一个方块

14:54.420 --> 14:59.420
当然我们在之前呢 再重新设置一下 再重新设置一下下一个方块的中心点作标

15:00.420 --> 15:03.420
当然你大家可以看到 这三具代码呢 往往是连在一起的

15:04.420 --> 15:06.420
这三行代码往往都是连在一起的

15:07.420 --> 15:12.420
无论是这 还是这 当然前面有初始化操作 就相当于是这里

15:13.420 --> 15:15.420
就相当于是这样子去

15:16.420 --> 15:20.420
Nexterus 相当于是这样子去 对吧

15:21.420 --> 15:25.420
你看这三行代码 这三行代码是连在一起的

15:26.420 --> 15:30.420
我们再来看 然后一会儿呢 我们当时是切换方块的一块

15:31.420 --> 15:32.420
切换方块的时候

15:34.420 --> 15:38.420
切换方块的时候 我们看到这个代码

15:39.420 --> 15:41.420
这个代码是不是也是连在一起的

15:41.420 --> 15:43.420
也是连在一起的 这里

15:43.420 --> 15:45.420
这个可以写前面 没问题的

15:46.420 --> 15:48.420
你看这些代码都是连在一起的 对吧

15:48.420 --> 15:50.420
那么这个代码呢 就是重复代码

15:50.420 --> 15:53.420
我们可以再写个函数 写个私有函数来处理它

15:55.420 --> 15:56.420
这个函数名字就要做

16:01.420 --> 16:02.420
创建一个下一个方块

16:03.420 --> 16:04.420
这个函数 重新处理一下

16:04.420 --> 16:06.420
把这个东西扔到这个函数里边

16:06.420 --> 16:07.420
就尽量减少重复代码

16:07.420 --> 16:10.420
这些都是 因为现在都已经进入尾声了 对吧

16:10.420 --> 16:14.420
其实现在各种写法呢 都不会造成大的问题了

16:15.420 --> 16:18.420
但是呢 我们尽量还是把代码写的好一点

16:20.420 --> 16:21.420
产生下一个方块

16:22.420 --> 16:24.420
这边也是 把这边重复代码去掉

16:25.420 --> 16:28.420
这重复代码产生下一个方块

16:30.930 --> 16:32.930
这里报了个错 哪里报错 我看一下

16:33.930 --> 16:36.930
没有出实话表达是 对吧

16:36.930 --> 16:38.930
这个地方我以前解释过

16:38.930 --> 16:42.930
就是说 TS 现在还没有那么智能

16:42.930 --> 16:44.930
它在勾造函数里边

16:44.930 --> 16:47.930
它如果没有发现你对它进行的复制

16:47.930 --> 16:49.930
它就认为这个东西没有出实话

16:49.930 --> 16:51.930
实际上我是复了指的

16:51.930 --> 16:53.930
我是调用这个函数来复指的

16:53.930 --> 16:54.930
但是它不能发现

16:54.930 --> 16:56.930
目前 TS 还没有那么智能

16:56.930 --> 16:58.930
还不能发现这一点

16:58.930 --> 17:00.930
所以说呢 这里怎么办

17:00.930 --> 17:02.930
这里呢 为了让它不报错

17:02.930 --> 17:04.930
为了让它不报错

17:04.930 --> 17:06.930
我们先随便给它复个字吧

17:06.930 --> 17:08.930
先随便给它复个字

17:12.930 --> 17:14.930
这纯粹是为了让它不报错

17:14.930 --> 17:16.930
纯粹是为了让它不报错

17:16.930 --> 17:18.930
这个其实不是我们代码的问题

17:18.930 --> 17:20.930
我们代码写的没问题

17:20.930 --> 17:22.930
只是它识别不了

17:22.930 --> 17:24.930
它识别不了出实话的操作

17:24.930 --> 17:26.930
因此会有这样的问题

17:26.930 --> 17:28.930
这就代码打个注射

17:28.930 --> 17:30.930
没有实际含义的代码

17:30.930 --> 17:32.930
就是有的时候呢

17:32.930 --> 17:34.930
像这种严格的操作

17:34.930 --> 17:36.930
我们也可以取消掉

17:36.930 --> 17:38.930
不要让它去检查属性的复出值

17:38.930 --> 17:40.930
因为它现在呢

17:40.930 --> 17:42.930
就这种情况有点烦人

17:42.930 --> 17:44.930
本来我们是复了出值的

17:44.930 --> 17:46.930
但是它认为我们没有复出值

17:46.930 --> 17:48.930
因为它检查的

17:48.930 --> 17:50.930
就是看构造函数里面

17:50.930 --> 17:52.930
有没有复指的

17:52.930 --> 17:54.930
我们调用函数复指它检查不到

17:54.930 --> 17:56.930
没有任何实际含义的代码

17:56.930 --> 17:58.930
只是

17:58.930 --> 18:00.930
只是

18:00.930 --> 18:02.930
为了不让

18:02.930 --> 18:04.930
不让

18:04.930 --> 18:06.930
TX保存

18:06.930 --> 18:08.930
打上个注射远了到时候看

18:08.930 --> 18:10.930
看了个代码莫名其妙

18:10.930 --> 18:12.930
好,然后呢,我们再看一下

18:12.930 --> 18:14.930
出实话

18:14.930 --> 18:16.930
出实话的时候做什么呢

18:16.930 --> 18:18.930
就是首先把当前的东西清理一下

18:18.930 --> 18:20.930
然后呢

18:20.930 --> 18:22.930
创建一个新的下一个方块

18:22.930 --> 18:24.930
还有啥呢

18:24.930 --> 18:26.930
暂时来说就没啥了

18:26.930 --> 18:28.930
OK,我们来试验一下

18:28.930 --> 18:30.930
这里呢

18:30.930 --> 18:32.930
点开始,我们就可以重新开始

18:32.930 --> 18:34.930
开始

18:34.930 --> 18:36.930
下

18:36.930 --> 18:38.930
左边

18:38.930 --> 18:40.930
下

18:40.930 --> 18:42.930
这边

18:42.930 --> 18:44.930
下

18:44.930 --> 18:46.930
游戏结束了

18:46.930 --> 18:48.930
那么现在在空置里没有任何意义了

18:48.930 --> 18:50.930
没有任何用了

18:50.930 --> 18:52.930
好,我们再点开始

18:52.930 --> 18:54.930
有个问题

18:54.930 --> 18:56.930
之前我们只是把它清空了

18:56.930 --> 18:58.930
但它之前的东西

18:58.930 --> 19:00.930
还在见面里边

19:00.930 --> 19:02.930
还在见面里面显示出来了

19:02.930 --> 19:04.930
所以说我要把它显示要清空

19:04.930 --> 19:06.930
显示要清空

19:06.930 --> 19:08.930
这个好说

19:08.930 --> 19:10.930
你说你不是说这里

19:10.930 --> 19:12.930
不关心显示吗

19:12.930 --> 19:14.930
不关心显示吗,为什么你这里要关心显示呢

19:14.930 --> 19:16.930
我想把清空再说吧

19:16.930 --> 19:18.930
一个Z

19:18.930 --> 19:20.930
循环它

19:20.930 --> 19:22.930
我这里其实没有

19:22.930 --> 19:24.930
我这里确实是

19:24.930 --> 19:26.930
动了显示

19:26.930 --> 19:28.930
但是你要知道

19:28.930 --> 19:30.930
跟之前是一样的

19:30.930 --> 19:32.930
我这里只是知道什么时候要去

19:32.930 --> 19:34.930
调用5U2里面的函数

19:34.930 --> 19:36.930
但是呢我不去管

19:36.930 --> 19:38.930
这5U2是怎么实现的

19:38.930 --> 19:40.930
它到底,只是说它到底显示在哪儿

19:40.930 --> 19:42.930
我不去管

19:42.930 --> 19:44.930
关心这样的问题

19:44.930 --> 19:46.930
但是什么时候显示

19:46.930 --> 19:48.930
什么时候要触发相应的显示方法

19:48.930 --> 19:50.930
这个是我要处理的

19:50.930 --> 19:52.930
这是要处理的

19:52.930 --> 19:54.930
调用一下这个函数

19:54.930 --> 19:56.930
一输掉就完成了

19:56.930 --> 19:58.930
咱们再看

19:58.930 --> 20:00.930
开始

20:00.930 --> 20:02.930
下

20:02.930 --> 20:04.930
下

20:04.930 --> 20:06.930
结束了

20:06.930 --> 20:08.930
重新开始

20:08.930 --> 20:10.930
一切又重来了

20:10.930 --> 20:12.930
这里

20:12.930 --> 20:14.930
这个没出来是吧

20:14.930 --> 20:16.930
当前这个方块没出来

20:16.930 --> 20:18.930
这个问题

20:18.930 --> 20:20.930
游戏开始

20:20.930 --> 20:22.930
初始化操作

20:22.930 --> 20:24.930
初始化了之后

20:24.930 --> 20:26.930
状态改变

20:26.930 --> 20:28.930
如果没有当前方块

20:28.930 --> 20:30.930
当时游戏结束过后

20:30.930 --> 20:32.930
游戏结束过后

20:32.930 --> 20:34.930
前这些问题我们

20:34.930 --> 20:36.930
不可能面面俱到的想到

20:36.930 --> 20:38.930
出了问题我们看

20:38.930 --> 20:40.930
原来是这么回事

20:40.930 --> 20:42.930
游戏结束过后还有一件事情要做

20:42.930 --> 20:44.930
或者是在游戏初始化的时候

20:44.930 --> 20:46.930
回到最初的状态

20:46.930 --> 20:48.930
什么叫最初状态

20:48.930 --> 20:50.930
就是跟这个类的属性的默认值一样

20:50.930 --> 20:52.930
默认值一样

20:52.930 --> 20:54.930
就这样初始状态

20:54.930 --> 20:56.930
那么初始状态的时候我们还要做一件事

20:56.930 --> 20:58.930
就是把当前的方块

20:58.930 --> 21:00.930
设置为昂级片

21:00.930 --> 21:02.930
当前没有方块

21:02.930 --> 21:04.930
最开始的时候是没有方块

21:04.930 --> 21:06.930
不然的话

21:06.930 --> 21:08.930
到时候你看开始游戏过后

21:08.930 --> 21:10.930
它要判断的

21:10.930 --> 21:12.930
如果当前没有方块

21:12.930 --> 21:14.930
开始

21:14.930 --> 21:16.930
然后下

21:16.930 --> 21:18.930
下

21:18.930 --> 21:20.930
游戏结束

21:20.930 --> 21:22.930
开始

21:22.930 --> 21:24.930
现在没问题了

21:24.930 --> 21:26.930
游戏结束

21:26.930 --> 21:28.930
开始

21:28.930 --> 21:30.930
那么整个游戏的进程

21:30.930 --> 21:32.930
包括暂停

21:32.930 --> 21:34.930
开始

21:34.930 --> 21:36.930
暂停

21:36.930 --> 21:38.930
对方操作

21:38.930 --> 21:40.930
开始

21:40.930 --> 21:42.930
整个游戏的进程

21:42.930 --> 21:44.930
暂停

21:44.930 --> 21:46.930
以及游戏结束

21:46.930 --> 21:48.930
我们都能控制了

21:48.930 --> 21:50.930
目前来讲都能控制了

21:50.930 --> 21:52.930
最后

21:52.930 --> 21:54.930
游戏都能控制了

21:54.930 --> 21:56.930
那么我们把这个地方

21:56.930 --> 21:58.930
我看一下

21:58.930 --> 22:00.930
游戏师傅结束

22:00.930 --> 22:02.930
已经搞定了

22:02.930 --> 22:04.930
那么最后我们把这个地方讲了

22:04.930 --> 22:06.930
就是积分

22:06.930 --> 22:08.930
这个游戏

22:08.930 --> 22:10.930
随着我们游戏的不断进行

22:10.930 --> 22:12.930
随着我们游戏的不断进行

22:12.930 --> 22:14.930
那么这个积分

22:14.930 --> 22:16.930
会越来越多

22:16.930 --> 22:18.930
我们家的分数会越来越多

22:18.930 --> 22:20.930
那么这个积分

22:20.930 --> 22:22.930
把这个地方搞定

22:22.930 --> 22:24.930
积分其实很简单了

22:24.930 --> 22:26.930
这一块就已经是尾声了

22:26.930 --> 22:28.930
非常简单了

22:28.930 --> 22:30.930
这里我们建立一个属性

22:30.930 --> 22:32.930
给它取个名字

22:32.930 --> 22:36.430
表示分数

22:36.430 --> 22:38.430
积分

22:38.430 --> 22:40.430
分数一开始当然是0

22:40.430 --> 22:42.430
那么我们可以想象到

22:42.430 --> 22:44.430
一会初始化的时候

22:44.430 --> 22:46.430
游戏结束过后重新开始

22:46.430 --> 22:48.430
是不是积分要回到0

22:48.430 --> 22:50.430
这些我们都可以想象到

22:50.430 --> 22:52.430
按照命名习惯

22:52.430 --> 22:54.430
我们还是给它加个下滑线

22:56.430 --> 22:58.430
有了积分过后

22:58.430 --> 23:00.430
积分什么时候增加

23:00.430 --> 23:02.430
什么时候增加积分

23:02.430 --> 23:04.430
什么时候呢

23:04.430 --> 23:06.430
是不是在消除的时候

23:06.430 --> 23:08.430
在消除的时候

23:08.430 --> 23:10.430
消除的时候

23:10.430 --> 23:12.430
这个时候我们要增加积分

23:12.430 --> 23:14.430
而且根据不同的

23:14.430 --> 23:16.430
消除的杭数

23:16.430 --> 23:18.430
增加的积分不一样

23:18.430 --> 23:20.430
在这个时候

23:20.430 --> 23:22.430
要增加积分

23:22.430 --> 23:24.430
分数要增加

23:24.430 --> 23:26.430
那么这个点我可以写个杭数

23:26.430 --> 23:28.430
专门来处理这个问题

23:28.430 --> 23:30.430
给滴滴score

23:30.430 --> 23:32.430
你给我一个什么

23:33.430 --> 23:35.430
消除的杭数给我

23:35.430 --> 23:37.430
那么我来帮你增加积分

23:44.430 --> 23:46.430
怎么增加积分呢

23:46.430 --> 23:48.430
积分怎么增加

23:48.430 --> 23:50.430
增加积分的话

23:50.430 --> 23:52.430
我们可以按照这样的规则

23:52.430 --> 23:54.430
比方说我就随便想

23:54.430 --> 23:56.430
这些规则你们自己去想

23:56.430 --> 23:58.430
比方说消益航就是

23:58.430 --> 24:00.430
10分

24:00.430 --> 24:02.430
消益航

24:02.430 --> 24:04.430
30分

24:04.430 --> 24:06.430
判断呗

24:08.430 --> 24:10.430
如果等于0

24:10.430 --> 24:12.430
如果等于0的话

24:12.430 --> 24:14.430
就不说了

24:14.430 --> 24:16.430
直接回去玩事了

24:16.430 --> 24:18.430
lcf

24:18.430 --> 24:20.430
lcf

24:20.430 --> 24:22.430
如果消了益航的话

24:22.430 --> 24:24.430
当前的分数

24:24.430 --> 24:26.430
加上10分吧

24:26.430 --> 24:28.430
lcf

24:28.430 --> 24:30.430
消益航的话

24:30.430 --> 24:32.430
这里怎么去算啊你们自己去定

24:32.430 --> 24:34.430
这些游戏规则

24:34.430 --> 24:36.430
消益航的话

24:36.430 --> 24:38.430
那么分数可以给你多一点啊

24:38.430 --> 24:40.430
比方说25分

24:40.430 --> 24:42.430
lcf

24:42.430 --> 24:44.430
消了3航的话

24:44.430 --> 24:46.430
消了3航

24:46.430 --> 24:48.430
this score

24:48.430 --> 24:50.430
多少呢

24:50.430 --> 24:52.430
多少分呢

24:52.430 --> 24:54.430
3航的话给他加个

24:54.430 --> 24:56.430
50分吧

24:56.430 --> 24:58.430
鼓励你多消几航

24:58.430 --> 25:00.430
4航

25:00.430 --> 25:02.430
4航的话100分

25:02.430 --> 25:04.430
就这样去加吧

25:04.430 --> 25:06.430
好那么这个分数是不是就改变了

25:06.430 --> 25:08.430
通过这种方式就改变了

25:08.430 --> 25:10.430
好那么这是分数的变化

25:10.430 --> 25:12.430
分数的变化

25:12.430 --> 25:14.430
咱们来试一下吧

25:14.430 --> 25:16.430
每次分数改变过后呢

25:16.430 --> 25:18.430
我们来输出一下这个分数

25:18.430 --> 25:20.430
输出一下这个分数

25:20.430 --> 25:22.430
cf

25:22.430 --> 25:24.430
我们来看一下我们的区分

25:24.430 --> 25:26.430
开始

25:26.430 --> 25:28.430
下

25:28.430 --> 25:30.430
下

25:30.430 --> 25:32.430
这边下

25:32.430 --> 25:34.430
旋转

25:34.430 --> 25:36.430
下

25:36.430 --> 25:38.430
10分没问题

25:38.430 --> 25:40.430
下

25:40.430 --> 25:42.430
左

25:42.430 --> 25:44.430
下

25:44.430 --> 25:48.700
下

25:48.700 --> 25:50.700
台南操作啊这个玩意

25:50.700 --> 25:55.870
下

25:55.870 --> 25:57.870
旋转

25:57.870 --> 25:59.870
这是增加了20分

25:59.870 --> 26:01.870
他有航没消掉

26:01.870 --> 26:03.870
这里有bug

26:03.870 --> 26:05.870
他有一航没消掉

26:05.870 --> 26:07.870
有一航没消掉

26:07.870 --> 26:09.870
之前的代码还有一些bug

26:09.870 --> 26:11.870
稍微调一下

26:11.870 --> 26:13.870
调一下

26:13.870 --> 26:15.870
之前的消除那里

26:15.870 --> 26:17.870
是在这里消除的

26:17.870 --> 26:19.870
这里他没有消掉

26:19.870 --> 26:21.870
我们来看一下这里的代码

26:21.870 --> 26:23.870
当时是什么回事

26:23.870 --> 26:25.870
两航一起消

26:25.870 --> 26:27.870
看一下

26:27.870 --> 26:29.870
问题是不是出在这个函数

26:29.870 --> 26:31.870
这个函数里面

26:31.870 --> 26:35.180
我看到了

26:35.180 --> 26:37.180
这个地方

26:37.180 --> 26:39.180
我这个代码

26:39.180 --> 26:41.180
不应该写到这

26:41.180 --> 26:43.180
不应该写到这

26:43.180 --> 26:45.180
为啥呢

26:45.180 --> 26:47.180
这个数组啊是

26:47.180 --> 26:49.180
我们这一航

26:49.180 --> 26:51.180
整个这一航要消除的方块

26:51.180 --> 26:53.180
对吧

26:53.180 --> 26:55.180
那么我把这一航

26:55.180 --> 26:57.180
我在循环这个数组

26:57.180 --> 26:59.180
每循环一次

26:59.180 --> 27:01.180
我都找到比他小的Y

27:01.180 --> 27:03.180
然后给他加一了

27:03.180 --> 27:05.180
这个地方有问题

27:05.180 --> 27:07.180
这个地方不应该这样做对吧

27:07.180 --> 27:09.180
应该是把这东西提到外边来

27:09.180 --> 27:11.180
把这一航消完了之后

27:11.180 --> 27:13.180
把这一航消完了之后

27:13.180 --> 27:15.180
然后

27:15.180 --> 27:17.180
再把剩下的

27:17.180 --> 27:19.180
剩下的方块

27:19.180 --> 27:21.180
然后做表加1

27:21.180 --> 27:23.180
Y比他小的加1

27:23.180 --> 27:25.180
在循环里边做的话

27:25.180 --> 27:27.180
又会导致他加了多次

27:27.180 --> 27:29.180
这里是仪处

27:29.180 --> 27:31.180
数组中

27:31.180 --> 27:33.180
之前的bug没发现

27:33.180 --> 27:35.180
我都没发现当时

27:35.180 --> 27:37.180
咱们再试一下

27:37.180 --> 27:39.180
再试一下

27:39.180 --> 27:41.180
我们这里把分数再打印出来

27:41.180 --> 27:43.180
试一下

27:43.180 --> 27:45.180
看一下现在对不对

27:45.180 --> 27:47.180
现在我好好看一下

27:47.180 --> 27:49.180
这里

27:49.180 --> 27:51.180
下

27:51.180 --> 27:53.180
下

27:53.180 --> 27:55.180
下

27:55.180 --> 27:57.180
下

27:57.180 --> 27:59.180
这个旋转

27:59.180 --> 28:01.180
转不了了

28:01.180 --> 28:03.180
我

28:03.180 --> 28:05.180
这太难操作了

28:05.180 --> 28:07.180
我把那个

28:07.180 --> 28:09.180
我把这个游戏

28:09.180 --> 28:11.180
宽高射大一点

28:11.180 --> 28:13.180
我现在懒得射

28:13.180 --> 28:15.180
因为这个还是要用代码写

28:15.180 --> 28:17.180
我这里再测试一下

28:17.180 --> 28:19.180
这个方块不好

28:19.180 --> 28:21.180
再测试一下

28:21.180 --> 28:23.180
下

28:23.180 --> 28:25.180
下

28:25.180 --> 28:27.180
旋转

28:27.180 --> 28:30.560
下

28:30.560 --> 28:34.380
旋转

28:34.380 --> 28:36.380
现在对了

28:36.380 --> 28:40.210
现在应该对了

28:40.210 --> 28:44.540
旋转

28:44.540 --> 28:46.540
我不浪费时间了

28:46.540 --> 28:48.540
这个地方有问题

28:48.540 --> 28:50.540
这是G分

28:50.540 --> 28:52.540
我们后面加了键盘操作过后

28:52.540 --> 28:54.540
再测试了

28:54.540 --> 28:56.540
那么G分

28:56.540 --> 28:58.540
我们也搞定了

28:58.540 --> 29:00.540
最后一件事

29:00.540 --> 29:02.540
我们在下一节课

29:02.540 --> 29:04.540
下一个小节

29:04.540 --> 29:06.540
就是把整个游戏

29:06.540 --> 29:08.540
变得更加

29:08.540 --> 29:10.540
用户体验更加好一点

29:10.540 --> 29:12.540
更加容易操作

29:12.540 --> 29:14.540
那么我们下节课再说吧

29:14.540 --> 29:16.540
其实就是收尾的工作了

29:16.540 --> 29:18.540
下节课就是把介面的一些

29:18.540 --> 29:20.540
给它完善一下

29:20.540 --> 29:22.540
那么我们这里可以到这里了

29:22.540 --> 29:24.540
功能全部开发完善

29:24.540 --> 29:26.540
开发完成了

29:26.540 --> 29:28.540
那么这里可以到这里了

29:28.540 --> 29:30.540
拜拜

