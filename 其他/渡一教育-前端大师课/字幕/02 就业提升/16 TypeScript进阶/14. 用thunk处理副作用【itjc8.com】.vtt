WEBVTT

00:00.620 --> 00:06.180
好 我们这节课就把Redux这里就结束了

00:06.180 --> 00:11.060
Redux这一块还剩下一个东西就是关于异部的操作

00:11.060 --> 00:12.940
就是有副作用的操作

00:12.940 --> 00:15.900
这一块我们有很多的选择

00:15.900 --> 00:19.500
就是处理Redux里面的副作用的话

00:19.500 --> 00:20.900
我们有很多的选择

00:20.900 --> 00:26.260
比方说咱们可以使用副作用的话

00:26.260 --> 00:29.340
我们可以使用最简单的Sunk 对吧

00:29.460 --> 00:34.100
Sunk这个库它代码一共就十多行吧

00:34.100 --> 00:36.540
十多二十行代码非常简单

00:36.540 --> 00:39.260
然后这个库它很简单

00:39.260 --> 00:42.780
它处理起来并不是很犹豫

00:42.780 --> 00:45.060
另外一个库还有一些给它介绍一下

00:45.060 --> 00:48.180
就是第一个是Redux Sunk

00:48.180 --> 00:50.340
还有一个是Redux Saga

00:50.340 --> 00:53.700
Redux Saga在处理大型项目里面的副作用

00:53.700 --> 00:56.780
它的处理方式实际是目前来讲

00:56.780 --> 00:58.940
Redux里面最好的一种方式

00:58.940 --> 01:04.060
但是Saga这个玩意特别是对于初学者来说

01:04.060 --> 01:05.740
难度非常非常的高

01:05.740 --> 01:08.340
它要用到GS里面的生成器

01:08.340 --> 01:11.340
很多初学者对生成器这一块

01:11.340 --> 01:14.860
就学习了本身就有很大的困难

01:14.860 --> 01:19.700
然后再去学Saga的话就导致了很多的疑惑

01:19.700 --> 01:26.020
然后后边于是阿里巴巴

01:26.060 --> 01:28.980
这个公司它出来一个对Saga的封装

01:28.980 --> 01:32.460
封装库叫做Deva

01:32.460 --> 01:33.780
它不仅是一个封装库

01:33.780 --> 01:36.460
而且它还是一个脚手架

01:36.460 --> 01:39.220
它还可以用它来搭建工程

01:39.220 --> 01:42.860
然后现在目前阿里巴巴对Deva这一块

01:42.860 --> 01:45.860
它也好像也没有砸维护了

01:45.860 --> 01:47.900
因为它现在又出了一个新的脚手架

01:47.900 --> 01:50.980
叫UmiJS

01:50.980 --> 01:53.980
它也是基于Saga的这种解决方案

01:54.020 --> 01:59.220
并且UmiJS里边它还融入了Deva这个框架

01:59.220 --> 02:01.900
还融入了一些其他的乱七八糟的东西

02:01.900 --> 02:03.300
总之这里处理副作用

02:03.300 --> 02:05.220
我们有很多很多的方案

02:05.220 --> 02:09.980
但是我相信了大家应该接触的是Sunk

02:09.980 --> 02:10.620
对吧

02:10.620 --> 02:12.340
应该接触的是这个方案

02:12.340 --> 02:14.820
所以说这里我们使用最简单的方式

02:14.820 --> 02:17.340
因为我们本门客是讲的是上来

02:17.340 --> 02:18.860
讲的是TS

02:18.860 --> 02:20.580
TS才是文主角

02:20.580 --> 02:23.180
像这些东西应该是属于Ridax

02:23.260 --> 02:25.780
也就是React全家同一边的东西

02:25.780 --> 02:28.100
我们不做过多的去生纠

02:28.100 --> 02:30.420
我们选择一个最简单的

02:30.420 --> 02:32.100
把它抛起来就完事了

02:32.100 --> 02:34.300
我们选择使用Sunk

02:34.300 --> 02:34.980
好吧

02:34.980 --> 02:38.140
那么Sunk我们首先安装一下它的裤

02:38.140 --> 02:39.460
我们先安装

02:39.460 --> 02:43.060
Yang, ADD, Redux,Sunk

02:43.060 --> 02:44.380
先让它安装

02:44.380 --> 02:45.700
这里我说一下这个裤吧

02:45.700 --> 02:50.300
这个裤里边它自己本身就带了类型系统

02:50.300 --> 02:51.980
就带了声明文件的

02:51.980 --> 02:56.180
所以说你没有必要去安装Types

02:56.180 --> 02:57.980
安装那个类型裤里面的东西了

02:57.980 --> 02:59.100
就没有必要了

02:59.100 --> 02:59.980
你直接用就行了

02:59.980 --> 03:01.780
它本身就有类型声明

03:01.780 --> 03:03.100
在使用的过程中

03:03.100 --> 03:04.940
它里边有一些坑

03:04.940 --> 03:07.220
就是Sunk这里面会带来一些坑

03:07.220 --> 03:09.580
这些坑它有各种各样的解决办法

03:09.580 --> 03:11.020
其实也不能算坑了

03:11.020 --> 03:13.700
就是使用起来会有一些麻烦

03:13.700 --> 03:15.620
会有一些麻烦的地方在那

03:15.620 --> 03:17.460
这里为什么包错了

03:17.460 --> 03:18.020
我重新关了

03:18.020 --> 03:19.660
重新打开一下

03:19.660 --> 03:21.580
它会有一些麻烦的地方

03:21.580 --> 03:23.380
关于这些麻烦的地方

03:23.380 --> 03:25.020
我们遇到了时候再说吧

03:25.020 --> 03:26.380
再说吧

03:26.380 --> 03:27.260
我们先来用

03:27.260 --> 03:29.060
先来用

03:29.060 --> 03:31.380
首先我们到X型里面去

03:31.380 --> 03:33.860
Sunk它就是更改的是啥

03:33.860 --> 03:36.660
更改的是X型的创建函数

03:36.660 --> 03:37.260
对吧

03:37.260 --> 03:38.540
我们到X型里面去

03:38.540 --> 03:41.380
之前我们写了一些X型的创建函数

03:41.380 --> 03:45.140
但是这些函数返回的是一个平面对象

03:45.140 --> 03:47.940
因此异部处理没法解决

03:47.940 --> 03:49.940
那么Sunk它的好处在于

03:49.980 --> 03:51.820
像这些X型的创建函数

03:51.820 --> 03:54.340
它不仅可以返回一个平面对象

03:54.340 --> 03:58.260
还可以返回一个函数

03:58.260 --> 04:00.900
由这个函数来处理副作用

04:00.900 --> 04:03.540
也就是Sunk它的核心做法

04:03.540 --> 04:07.380
那么这里我们写这么一个X型创建函数

04:07.380 --> 04:08.500
是跟Sunk相关的

04:08.500 --> 04:09.940
它是带有副作用的

04:09.940 --> 04:11.700
这个函数我给大家注释

04:11.700 --> 04:15.460
就是根据条件

04:15.460 --> 04:19.260
获取电影的数据

04:19.260 --> 04:25.460
从服务器获取电影的数据

04:25.460 --> 04:27.780
那么这个函数肯定是带有副作用的

04:27.780 --> 04:30.900
因为涉及到异部的操作远程请求

04:30.900 --> 04:34.580
因此这个函数我会把它做成一个Sunk的函数

04:34.580 --> 04:36.060
那么这个函数该取个名字

04:36.060 --> 04:39.660
比方说FetchMovies

04:39.660 --> 04:40.980
你要给我传一个什么

04:40.980 --> 04:42.780
你肯定要给我传个条件

04:42.780 --> 04:43.980
根据条件来获取

04:43.980 --> 04:44.420
对吧

04:44.420 --> 04:46.140
你肯定要给我传一个条件

04:46.140 --> 04:48.740
条件给我

04:48.820 --> 04:49.940
条件啥类型

04:49.940 --> 04:51.700
条件是我们之前写过的类型

04:51.700 --> 04:52.260
对吧

04:52.260 --> 04:53.860
SearchCondition

04:53.860 --> 04:55.020
这个类型

04:55.020 --> 04:56.460
把条件给我吧

04:56.460 --> 04:58.220
给我条件过后

04:58.220 --> 04:59.900
我返回的是一个啥呢

04:59.900 --> 05:02.220
返回的是一个函数

05:02.220 --> 05:02.420
对吧

05:02.420 --> 05:03.820
以前我们写上课的时候

05:03.820 --> 05:04.620
不就这样写的吗

05:04.620 --> 05:04.900
对吧

05:04.900 --> 05:07.580
Dispatch

05:07.580 --> 05:12.140
然后还有什么GasStats这些东西

05:12.140 --> 05:13.180
我们返回的是一个啥

05:13.180 --> 05:14.500
返回的是一个函数

05:14.500 --> 05:14.740
对吧

05:14.740 --> 05:16.420
返回的是一个函数

05:16.420 --> 05:18.220
但是现在我们这样子写

05:18.260 --> 05:19.140
没有什么问题

05:19.140 --> 05:19.700
实际上

05:19.700 --> 05:21.020
直接写就完事了

05:21.020 --> 05:22.420
实际上没有什么问题

05:22.420 --> 05:24.500
只不过我这里面

05:24.500 --> 05:26.820
不能获得类型推断

05:26.820 --> 05:27.940
它类型出不来

05:27.940 --> 05:29.580
因为它不知道这个玩意是啥

05:29.580 --> 05:32.100
它也不知道这个东西跟伤口有啥关系

05:32.100 --> 05:33.820
所以它这个类型出不来

05:33.820 --> 05:35.740
于是我要约束一下

05:35.740 --> 05:37.300
我这里要约束一下

05:37.300 --> 05:40.060
约束一下这个函数的返回结果

05:40.060 --> 05:42.140
返回结果肯定是一个函数

05:42.140 --> 05:42.500
对吧

05:42.500 --> 05:43.380
返回了你看

05:43.380 --> 05:45.180
返回的是一个函数吗

05:45.180 --> 05:47.500
返回结果肯定是一个函数

05:47.540 --> 05:49.940
那么这个函数是啥类型的函数呢

05:49.940 --> 05:52.180
它的每一个参数是啥类型的

05:52.180 --> 05:54.540
那么这个地方要进行约束

05:54.540 --> 05:56.180
就这个地方有点麻烦

05:56.180 --> 05:57.380
首先给大家说一下

05:57.380 --> 05:58.820
这个地方有点麻烦

05:58.820 --> 06:01.020
这个地方应该返回什么呢

06:01.020 --> 06:02.260
实际上桑克里边

06:02.260 --> 06:03.780
给我们做了一个东西

06:03.780 --> 06:04.780
做了一个东西

06:04.780 --> 06:06.580
叫做桑克

06:06.580 --> 06:07.900
我这里没导入进来

06:07.900 --> 06:08.700
把导入进来吧

06:10.380 --> 06:11.500
import

06:11.500 --> 06:13.700
它给我们做了一个类型出来

06:13.700 --> 06:14.700
redux

06:14.700 --> 06:17.060
redux

06:17.060 --> 06:18.940
等一下

06:18.940 --> 06:19.980
怎么回事

06:19.980 --> 06:21.500
我是没安装成功吗

06:21.500 --> 06:22.620
redux

06:22.620 --> 06:24.300
桑克我强行打出来吧

06:24.300 --> 06:25.700
强行打出来

06:25.700 --> 06:28.500
这里怎么回事

06:28.500 --> 06:29.940
这里没有

06:29.940 --> 06:31.700
我这里把包好去掉

06:31.700 --> 06:32.820
包好去掉

06:32.820 --> 06:35.380
这里就怎么推断不出来了

06:35.380 --> 06:38.700
这里是一个叫做桑克

06:38.700 --> 06:40.580
ax型的东西

06:40.580 --> 06:41.300
桑克x型的

06:41.300 --> 06:43.260
我的智能骑士怎么全部没了

06:43.300 --> 06:45.380
把这个viscote关掉

06:45.380 --> 06:46.780
重新打开一次

06:46.780 --> 06:49.870
重新打开一次

06:49.870 --> 06:51.870
莫名其妙又没了

06:51.870 --> 06:54.350
把这个优良器关闭掉

06:54.350 --> 06:54.830
好

06:54.830 --> 06:55.990
我们再试一下

06:57.830 --> 06:59.150
桑克

06:59.150 --> 07:01.910
我的智能骑士怎么没了

07:01.910 --> 07:03.470
所有的智能骑士没了

07:03.470 --> 07:04.230
出来了

07:04.230 --> 07:05.150
终于出来了

07:05.150 --> 07:06.390
桑克x型

07:06.390 --> 07:08.070
它提供了这么一个东西

07:08.070 --> 07:08.750
桑克x型

07:08.750 --> 07:10.390
它是一个类型

07:10.390 --> 07:12.150
你看F12转到定义

07:12.150 --> 07:12.910
你会发现

07:12.910 --> 07:14.470
它其实是一个类型

07:14.510 --> 07:16.190
桑克x型是啥

07:16.190 --> 07:17.750
它其实是一个类型别名

07:17.750 --> 07:19.350
这些乱七八糟的方形

07:19.350 --> 07:20.790
先不看

07:20.790 --> 07:22.190
这是它的名字

07:22.190 --> 07:23.270
那么它是一个什么东西

07:23.270 --> 07:24.070
你看一下

07:24.070 --> 07:25.790
它是不是就是一个函数

07:25.790 --> 07:26.070
对吧

07:26.070 --> 07:28.430
就是一个函数

07:28.430 --> 07:31.670
这个函数反回一个结果

07:31.670 --> 07:35.270
也就是说我们到这里

07:35.270 --> 07:37.350
这里这个飞行movies

07:37.350 --> 07:39.590
函数反回的是啥呢

07:39.590 --> 07:43.190
反回的是一个桑克x

07:43.230 --> 07:45.510
反回的是这么一个东西

07:45.510 --> 07:47.070
我们先把这个东西搞定

07:47.070 --> 07:48.270
当然前提条件

07:48.270 --> 07:49.270
我再说一次

07:49.270 --> 07:52.390
就是说我们可以完全可以不使用它

07:52.390 --> 07:52.990
不使用它

07:52.990 --> 07:54.150
你想写啥写啥

07:54.150 --> 07:55.070
这里全是n立嘛

07:55.070 --> 07:55.630
对吧

07:55.630 --> 07:56.990
跟以前的写法一样

07:56.990 --> 07:59.430
但是如果你要获得类型检查的话

07:59.430 --> 08:01.030
你就给它写上

08:01.030 --> 08:02.150
好写上之后

08:02.150 --> 08:03.430
这里它爆错

08:03.430 --> 08:06.950
它说它有四个类型参数

08:06.950 --> 08:08.910
它有四个类型参数

08:08.910 --> 08:09.070
好

08:09.070 --> 08:10.310
我们一个个看吧

08:10.310 --> 08:12.070
一个个看

08:12.070 --> 08:13.470
好 第一个类型参数

08:13.470 --> 08:14.390
看一下

08:14.390 --> 08:16.430
第一个类型参数它是个翻型

08:16.430 --> 08:18.430
第一个类型参数是r

08:18.430 --> 08:20.390
这个r表示啥意思呢

08:20.390 --> 08:22.870
r表示的是你要告诉它

08:22.870 --> 08:26.910
你这个函数它的反回值是啥

08:26.910 --> 08:29.270
你这个函数它的反回值是啥

08:29.270 --> 08:30.950
反回值的类型是啥

08:30.950 --> 08:33.430
像这个函数里面我们通常不返回

08:33.430 --> 08:34.950
通常都不会返回

08:34.950 --> 08:36.390
但是呢

08:36.390 --> 08:37.270
但是呢

08:37.270 --> 08:39.830
这个函数往往是一个异不的函数

08:39.830 --> 08:40.550
你想啊

08:40.550 --> 08:41.830
我们这里是不是

08:41.870 --> 08:44.150
我这里是不是要做那个

08:44.150 --> 08:45.550
获取电影

08:45.550 --> 08:46.390
对吧

08:46.390 --> 08:48.390
那么获取电影是不是异不的

08:48.390 --> 08:49.510
肯定我们要等待它嘛

08:49.510 --> 08:49.990
对吧

08:49.990 --> 08:50.350
因此呢

08:50.350 --> 08:51.430
我们很有可能呢

08:51.430 --> 08:54.430
在这里会把这个函数做成一个异不的函数

08:54.430 --> 08:56.110
那么它是一个异不的函数

08:56.110 --> 08:57.830
异不的函数

08:57.830 --> 08:59.390
是不是就有反回值了

08:59.390 --> 09:00.030
对不对

09:00.030 --> 09:00.790
它就有反回值了

09:00.790 --> 09:03.270
我们换一个行写吧

09:03.270 --> 09:05.070
异不的函数它就有反回值了

09:05.070 --> 09:05.790
因此呢

09:05.790 --> 09:07.310
我们第一个翻型呢

09:07.310 --> 09:08.830
它写的是啥呢

09:08.830 --> 09:10.230
指的它后会告诉你

09:10.230 --> 09:13.910
第一个R指的是函数的返回类型

09:13.910 --> 09:15.670
好函数的返回类型是啥呢

09:15.670 --> 09:16.590
Promise

09:16.590 --> 09:16.830
对吧

09:16.830 --> 09:18.710
异不的函数它一定返回的是Promise

09:18.710 --> 09:19.950
当然这个根据情况啊

09:19.950 --> 09:21.350
你自行来定义

09:21.350 --> 09:21.990
自行定义

09:21.990 --> 09:22.950
总之它高速

09:22.950 --> 09:23.950
你告诉它的就是

09:23.950 --> 09:26.030
这个函数的返回结果

09:26.030 --> 09:28.390
就这里就是return的结果

09:28.390 --> 09:29.510
当然它是一个异不的函数

09:29.510 --> 09:31.350
返回的一定是Promise

09:31.350 --> 09:33.070
那么Promise是一个异不任务

09:33.070 --> 09:33.750
异不任务的

09:33.750 --> 09:35.950
它异不要求你使用翻型

09:35.950 --> 09:39.350
就是任务完成之后得到的结果是啥

09:39.510 --> 09:40.230
任务完成之后

09:40.230 --> 09:41.910
我这里也不需要得到啥结果

09:41.910 --> 09:42.750
也就是说

09:42.750 --> 09:44.110
这个里面填写的是啥呢

09:44.110 --> 09:48.790
填写的是函数里边return的结果

09:48.790 --> 09:49.750
你return一个字部串

09:49.750 --> 09:51.110
那你这就是字部串

09:51.110 --> 09:54.870
当然这个函数我们往往没有必要去做什么return

09:54.870 --> 09:55.110
对吧

09:55.110 --> 09:57.310
直接到合适的时候

09:57.310 --> 09:58.990
我们Dispatch就完事了

09:58.990 --> 10:00.710
没有必要return

10:00.710 --> 10:03.070
因此翻型的第一个参数

10:03.070 --> 10:04.990
我们该写出来

10:04.990 --> 10:06.790
这第一个参数

10:06.790 --> 10:08.630
第二个参数

10:08.630 --> 10:10.550
第二个参数是State

10:10.550 --> 10:11.070
你为什么要

10:11.070 --> 10:13.030
他为什么需要这个东西呢

10:13.030 --> 10:14.070
就是State的类型

10:14.070 --> 10:17.310
就是整个网站里边

10:17.310 --> 10:21.350
跟节点那个状态的类型

10:21.350 --> 10:22.950
为什么要告诉他这个东西呢

10:22.950 --> 10:25.230
是因为你看这个GateState

10:25.230 --> 10:27.030
他里边不是要传个GateState过来吗

10:27.030 --> 10:27.270
对吧

10:27.270 --> 10:28.950
这就是以前我们用过的

10:28.950 --> 10:30.110
通过这个GateState

10:30.110 --> 10:31.390
我们是不是可以得到

10:31.390 --> 10:34.030
可以得到他的当前系统里面的状态

10:34.030 --> 10:34.630
对吧

10:34.670 --> 10:37.030
当前系统的状态就可以得到了

10:37.030 --> 10:39.190
因此他要完成类型推导的话

10:39.190 --> 10:40.190
你要告诉他

10:40.190 --> 10:41.590
我们整个网站

10:41.590 --> 10:44.150
他的状态是什么

10:44.150 --> 10:46.830
而目前我们还没有一个定义

10:46.830 --> 10:49.710
定义整个网站的状态

10:49.710 --> 10:51.670
因此我们这里去加一个定义

10:51.670 --> 10:53.350
加个定义

10:53.350 --> 10:55.910
我们到root reducer里边来

10:55.910 --> 10:57.550
root reducer里边来

10:57.550 --> 10:59.230
这里面我们可以给他定义一个

10:59.230 --> 11:00.950
整个网站的状态

11:00.950 --> 11:03.030
整个网站的状态

11:03.070 --> 11:04.910
导出吧

11:04.910 --> 11:07.310
导出interface

11:07.310 --> 11:10.750
i root state

11:10.750 --> 11:12.190
就整个网站的状态

11:12.190 --> 11:13.230
整个网站的状态里边

11:13.230 --> 11:14.750
我们有一个movie

11:14.750 --> 11:15.910
有一个movie

11:15.910 --> 11:18.670
movie的类型是imovie

11:18.670 --> 11:23.390
imovie state

11:23.390 --> 11:25.110
如果以后有影院的话

11:25.110 --> 11:26.230
就依次写

11:26.230 --> 11:29.270
依旧依次写Cinema

11:29.270 --> 11:31.510
然后如果有用户的话

11:31.550 --> 11:32.870
你就依次写

11:32.870 --> 11:33.830
等等

11:33.830 --> 11:35.750
我们把整个网站

11:35.750 --> 11:42.630
整个网站的跟状态

11:42.630 --> 11:44.110
跟状态定义到这

11:44.110 --> 11:45.550
定义一个内详

11:45.550 --> 11:46.790
那么有了这个内详过后

11:46.790 --> 11:48.790
我们就可以把这个内详写到这来

11:48.790 --> 11:51.110
作为他的第二个犯情参数

11:51.110 --> 11:53.030
所以这里有点麻烦

11:53.030 --> 11:54.790
大家可以

11:54.790 --> 11:57.430
我首先说可以在这里

11:57.430 --> 11:58.950
就给他保持n例

11:58.950 --> 12:00.430
反复内详就n例算了

12:00.470 --> 12:01.550
那就n例算了

12:01.550 --> 12:04.190
那么这些参数

12:04.190 --> 12:06.230
你得不到内详检查

12:06.230 --> 12:08.070
如果公司里面没有要求的话

12:08.070 --> 12:09.270
你又怕麻烦的话

12:09.270 --> 12:10.430
你可以这样做

12:10.430 --> 12:12.550
但是如果公司里面有要求

12:12.550 --> 12:14.950
要求你们编写代码的时候

12:14.950 --> 12:18.230
必须要全部加上内详检查

12:18.230 --> 12:18.830
那么怎么办

12:18.830 --> 12:20.190
就这样做

12:20.190 --> 12:21.550
总之你加了之后

12:21.550 --> 12:23.110
他就有内详检查了

12:23.110 --> 12:24.710
这是第二个犯情

12:24.710 --> 12:27.870
第三个犯情是e

12:27.870 --> 12:29.230
这个东西我们不管

12:29.230 --> 12:29.910
这个东西不管

12:29.950 --> 12:30.510
为什么呢

12:30.510 --> 12:32.550
它是额外的参数

12:32.550 --> 12:34.670
就是使用中间键的时候

12:34.670 --> 12:36.430
给它传入的额外的参数

12:36.430 --> 12:38.870
这个参数我们不需要

12:38.870 --> 12:39.510
不需要的话

12:39.510 --> 12:40.350
我们就给它定义为

12:40.350 --> 12:41.870
on define就完事了

12:41.870 --> 12:45.870
或者是n例就完事了

12:45.870 --> 12:46.070
好

12:46.070 --> 12:48.830
最后一个最后一个犯情是e

12:48.830 --> 12:50.270
e这个犯情是什么内询呢

12:50.270 --> 12:54.990
它问你的是ag型的内询

12:54.990 --> 12:57.030
那么ag型的内询是啥呢

12:57.030 --> 12:58.350
ag型的内询是啥呢

12:58.350 --> 13:01.350
我们这里可以使用

13:01.350 --> 13:03.710
可以使用个n例或者是什么东西

13:03.710 --> 13:06.030
比方说我们这里不是定义了ag型吗

13:06.030 --> 13:07.830
定义了一个allag型对吧

13:07.830 --> 13:09.030
movieag型式

13:09.030 --> 13:09.350
OK

13:09.350 --> 13:13.190
那么我们这里ag型的内询是movieag型式

13:13.190 --> 13:15.150
movieag型式

13:15.150 --> 13:16.750
我们这样来定义

13:16.750 --> 13:18.270
这样来定义

13:18.270 --> 13:18.510
好

13:18.510 --> 13:19.350
定义之后

13:19.350 --> 13:20.670
这边就有内询检查了

13:20.670 --> 13:21.190
你看

13:21.190 --> 13:23.510
dispatch它能够获得它的内询

13:23.510 --> 13:26.350
然后getState它能够获得它的内询

13:26.350 --> 13:28.310
都能获取到了

13:28.310 --> 13:29.950
其实代码也不多

13:29.950 --> 13:31.070
就是要你绕一下

13:31.070 --> 13:33.510
这里有四个犯情参数

13:33.510 --> 13:36.430
你需要去知道每一个犯情参数的含义

13:36.430 --> 13:37.990
它是什么

13:37.990 --> 13:38.310
OK

13:38.310 --> 13:40.030
那么就依次来写

13:40.030 --> 13:42.190
我要从服务器获取电影的数据

13:42.190 --> 13:44.390
你给我传递了一个surge

13:44.390 --> 13:45.630
condition对吧

13:45.630 --> 13:46.910
你给我传递了这么一个东西

13:46.910 --> 13:48.070
surge condition

13:48.070 --> 13:50.030
那么这个surge condition我们看一下

13:50.030 --> 13:52.510
就是我们之前写过的

13:52.510 --> 13:53.510
有这么三个东西

13:53.510 --> 13:54.430
你给我传过来就行了

13:54.430 --> 13:56.790
我来帮你完成电影的获取

13:56.830 --> 13:58.830
首先我要做的一件事情

13:58.830 --> 14:00.510
第一件事就是什么

14:00.510 --> 14:03.590
设置夹载状态

14:03.590 --> 14:05.150
设置夹载状态

14:05.150 --> 14:06.190
那么还记得吗

14:06.190 --> 14:07.310
怎么做的

14:07.310 --> 14:08.750
就用dispatch

14:08.750 --> 14:10.190
dispatch

14:10.190 --> 14:11.750
dispatch一个x形

14:11.750 --> 14:12.710
哪个x形呢

14:12.710 --> 14:13.990
就是set

14:13.990 --> 14:16.750
set loadingx形

14:16.750 --> 14:18.150
调用这个函数

14:18.150 --> 14:19.590
来创建一个x形

14:19.590 --> 14:21.070
我们给它一个抓夹载状态

14:21.070 --> 14:22.390
q

14:22.390 --> 14:24.230
设置夹载状态为q

14:24.230 --> 14:25.550
当然我们可以想象得到

14:25.550 --> 14:30.150
最后我们要关闭夹载状态

14:30.150 --> 14:31.070
夹载完成之后

14:31.070 --> 14:32.310
我们要关闭夹载状态

14:32.310 --> 14:34.190
好dispatch

14:34.190 --> 14:36.030
set loadingx

14:36.030 --> 14:38.150
为force

14:38.150 --> 14:40.110
夹载状态搞定

14:40.110 --> 14:42.350
然后第二步

14:42.350 --> 14:43.870
还要设置条件

14:43.870 --> 14:44.270
对吧

14:44.270 --> 14:45.190
设置条件

14:45.190 --> 14:46.830
你给我传了一些条件过来

14:46.830 --> 14:48.270
这些条件都是可选的

14:48.270 --> 14:48.670
对吧

14:48.670 --> 14:49.470
都是可选的

14:49.470 --> 14:50.990
因为看这里边

14:50.990 --> 14:51.950
加了问号的

14:51.950 --> 14:52.870
每个都加了问号的

14:52.870 --> 14:54.110
是可选的

14:54.110 --> 14:54.950
你可以

14:54.990 --> 14:57.230
也就是说其他条件保持不变

14:57.230 --> 14:58.670
好你给我传那个条件过来了

14:58.670 --> 15:00.230
我们这里要设置条件

15:00.230 --> 15:01.950
那又来dispatch

15:01.950 --> 15:04.550
set conditionx

15:04.550 --> 15:06.150
把条件传进去

15:06.150 --> 15:07.430
条件传进去

15:07.430 --> 15:08.590
来设置条件

15:08.590 --> 15:10.510
因为这个x形创建函数

15:10.510 --> 15:11.870
它的condition类型

15:11.870 --> 15:13.630
它也是Isearch

15:13.630 --> 15:14.190
condition

15:14.190 --> 15:15.670
一字的类型一字

15:15.670 --> 15:17.190
没问题

15:17.190 --> 15:18.630
好设置完了条件过后

15:18.630 --> 15:20.790
是不是要获取电影了

15:20.790 --> 15:23.550
获取电影对象

15:23.710 --> 15:24.870
获取电影对象

15:24.870 --> 15:26.390
就是服务器的数据

15:26.390 --> 15:28.550
获取服务器数据

15:28.550 --> 15:29.230
那么这个时候

15:29.230 --> 15:30.470
我们要用到之前写的

15:30.470 --> 15:33.350
阿迦克斯movyservice

15:33.350 --> 15:37.430
然后这里面有getmovys

15:37.430 --> 15:38.350
这个函数

15:38.350 --> 15:39.590
这个函数要传一个什么呢

15:39.590 --> 15:41.390
传一个条件

15:41.390 --> 15:42.230
好这个时候

15:42.230 --> 15:43.950
有些同学就可以想了

15:43.950 --> 15:45.470
那这个条件是不是就直接

15:45.470 --> 15:47.910
把这个condition传进去了

15:47.910 --> 15:49.150
你想一想

15:49.150 --> 15:51.270
这里其实容易犯错误的

15:51.270 --> 15:52.950
要好好想想这个逻辑

15:52.990 --> 15:55.310
是不是把这个condition传进去了

15:55.310 --> 15:56.150
不对

15:56.150 --> 15:56.990
为什么不对呢

15:56.990 --> 15:58.510
我给大家举个例子吧

15:58.510 --> 15:59.230
比方说

16:00.510 --> 16:02.430
我现在仓库里边

16:02.430 --> 16:03.390
仓库里边

16:04.750 --> 16:06.550
仓库里边这个condition的条件

16:06.550 --> 16:07.750
是这个样子的

16:07.750 --> 16:08.510
是这个样子的

16:10.190 --> 16:12.670
配级为1

16:12.670 --> 16:15.830
然后limit为20

16:15.830 --> 16:20.030
然后key有一个就是查询

16:20.070 --> 16:21.070
比方说

16:22.230 --> 16:25.270
复仇者有一个查询

16:25.270 --> 16:27.110
这是仓库里边的条件

16:27.110 --> 16:27.910
然后呢

16:27.910 --> 16:29.230
现在呢

16:29.230 --> 16:31.190
你现在做了这么一件事啊

16:31.190 --> 16:32.510
你要dispatch

16:34.670 --> 16:36.510
你的x里边

16:36.510 --> 16:38.150
传了一个x里边

16:38.150 --> 16:40.510
你的条件是给到新的一个条件

16:40.510 --> 16:42.030
给了一个新的条件

16:42.030 --> 16:43.390
这个新的条件呢

16:43.390 --> 16:45.670
你只写的一个页码

16:45.670 --> 16:46.950
页码为2

16:46.950 --> 16:48.630
你要翻到第二页

16:48.630 --> 16:49.990
那么你想一想

16:50.270 --> 16:52.510
我这个条件只有一个配级等于2

16:52.510 --> 16:55.350
你能用这个条件去查服务器吗

16:56.350 --> 16:57.390
不对吧

16:57.390 --> 16:59.190
你应该是把这个条件

16:59.190 --> 17:01.190
覆盖了仓库

17:01.190 --> 17:02.790
覆盖掉仓库的条件

17:02.790 --> 17:04.230
把这里变成2

17:04.230 --> 17:05.590
覆盖掉仓库之后

17:05.590 --> 17:07.830
然后重新从仓库里边取出

17:07.830 --> 17:09.750
仓库的当前所有条件

17:09.750 --> 17:10.350
对吧

17:10.350 --> 17:12.350
让这个所有条件再发送到服务器

17:13.230 --> 17:15.030
懂我这个意思吗

17:15.030 --> 17:16.710
你不能直接把这个东西

17:16.710 --> 17:18.630
当成条件去请求服务器

17:18.670 --> 17:20.670
因为这个数据量有缺失

17:20.670 --> 17:23.470
这个条件只是来覆盖仓库里边的条件的

17:23.470 --> 17:26.790
我们要从重新从仓库里边取出来

17:26.790 --> 17:28.670
把这个东西当成请求条件

17:29.750 --> 17:32.390
所以说这个条件不是condition

17:32.390 --> 17:33.670
我们应该怎么样呢

17:33.670 --> 17:37.230
应该从仓库里边取出这个条件

17:37.230 --> 17:38.630
我们定一个变量

17:38.630 --> 17:39.870
表示curl,condition

17:39.870 --> 17:42.590
表示当前的条件应该通过getState

17:43.710 --> 17:45.790
从仓库里面取出来

17:45.790 --> 17:47.630
你看现在有了内行约束过后

17:47.670 --> 17:49.510
我们这里就可以获得内行检查了

17:49.510 --> 17:51.830
你看点Movie看到没

17:51.830 --> 17:53.350
为什么是能够得表出来

17:53.350 --> 17:55.030
因为它的内行可以推愣出来

17:55.030 --> 17:56.550
是I-rootState

17:58.390 --> 17:59.430
是这个玩意儿

17:59.430 --> 18:01.670
那么这里面就有Movie对吧

18:01.670 --> 18:04.670
好Movie里面由于Movie它有内行定义

18:04.670 --> 18:06.270
所以说我们这里可以取出

18:06.270 --> 18:07.550
Movie里边的条件

18:08.990 --> 18:10.150
好把这个条件取出来

18:10.150 --> 18:12.270
用这个条件去请求服务器

18:12.270 --> 18:13.270
应该这么来操作

18:14.310 --> 18:15.870
好请求完服务器过后

18:15.870 --> 18:17.350
那么这个是一步的对吧

18:17.350 --> 18:22.710
等待它等待它得到服务器的响应结果

18:22.710 --> 18:24.350
拿到服务器响应结果过后

18:24.350 --> 18:29.510
做什么更改仓库的数据

18:29.510 --> 18:31.310
仓库里面不是存在什么电影

18:31.310 --> 18:32.910
总业数这些数据对吧

18:32.910 --> 18:35.110
我们把这个服务器的返回结果

18:35.110 --> 18:37.350
拿出来更改仓库的数据

18:37.350 --> 18:39.750
好那么这里我们就使用

18:41.790 --> 18:42.830
dispatch

18:42.830 --> 18:45.110
dispatch

18:46.110 --> 18:47.990
然后调用这个x

18:47.990 --> 18:50.230
叫saveMoviesx

18:50.230 --> 18:51.270
调用这个x

18:51.270 --> 18:53.630
好这个x里面要传一些东西

18:53.630 --> 18:54.950
第一个是电影的数据

18:54.950 --> 18:56.630
那么服务器那边返回的

18:56.630 --> 18:58.630
有data是个电影的数据

18:58.630 --> 18:59.630
好传进去

18:59.630 --> 19:02.070
第二参数是总数

19:02.070 --> 19:04.310
总的记录数

19:04.310 --> 19:06.190
那么服务器返回的结果

19:06.190 --> 19:07.190
有这个toto

19:07.190 --> 19:08.110
给它传进去

19:08.630 --> 19:09.190
OK

19:09.190 --> 19:10.470
那么通过这种方式

19:10.470 --> 19:11.830
我们就完成了

19:12.390 --> 19:13.350
这个

19:14.230 --> 19:15.070
这个的编写

19:15.070 --> 19:16.030
这个上课

19:16.030 --> 19:17.550
这个x的编写

19:18.430 --> 19:18.950
好

19:18.950 --> 19:20.510
那么把这个函数复制一下

19:20.510 --> 19:21.550
我们把它导出

19:21.550 --> 19:22.710
导出

19:22.710 --> 19:23.950
我们一会测试一下

19:24.710 --> 19:26.230
好那么这边我们写完了

19:26.230 --> 19:27.270
当然我只写的一个

19:27.270 --> 19:28.550
我们先来测试一下

19:28.550 --> 19:29.430
先来测试一下

19:29.430 --> 19:30.750
看有什么样的问题

19:30.750 --> 19:32.150
这里遇到一个标码

19:32.150 --> 19:33.270
这些代码都是一样的

19:33.270 --> 19:34.630
跟你以前没有什么区别

19:34.630 --> 19:35.750
你看这一部分代码

19:35.750 --> 19:36.830
跟你以前完全一致

19:36.830 --> 19:38.110
没有什么区别

19:38.110 --> 19:39.470
主要的区别在这

19:39.470 --> 19:41.550
加了一个内形约数

19:41.590 --> 19:42.350
我再说一次

19:42.350 --> 19:43.190
这些内形约数

19:43.190 --> 19:44.790
你就是你尽量做

19:44.790 --> 19:45.590
能做的话

19:45.590 --> 19:46.470
你能理解的话

19:46.470 --> 19:47.670
就尽量做

19:47.670 --> 19:49.590
不做也没事

19:49.590 --> 19:51.030
不做也没事

19:51.030 --> 19:51.750
不做的话

19:51.750 --> 19:52.670
他就认为是

19:52.670 --> 19:53.750
比方说这个加个冒号

19:53.750 --> 19:54.350
n

19:54.350 --> 19:55.390
完事了对吧

19:55.390 --> 19:56.270
完事了

19:56.270 --> 19:57.270
因为你加了n过后

19:57.270 --> 19:58.470
就跟以前是一样的

19:58.470 --> 19:59.870
跟以前j是一样的了

20:00.910 --> 20:01.670
因为j里面

20:01.670 --> 20:02.150
他就不知道

20:02.150 --> 20:03.510
他这些东西是啥类型

20:04.230 --> 20:05.790
好这边写完了之后

20:05.790 --> 20:07.630
现在我们要应用中间键

20:07.630 --> 20:07.990
对吧

20:07.990 --> 20:09.670
要应用中间键

20:09.670 --> 20:10.310
好这边

20:10.350 --> 20:11.310
我们把这个中间键

20:11.310 --> 20:12.510
导入进来

20:12.510 --> 20:13.430
export

20:13.430 --> 20:14.510
sunk

20:14.510 --> 20:16.790
from redux

20:16.790 --> 20:17.950
sunk

20:17.950 --> 20:19.790
把这个sunk导入进来

20:19.790 --> 20:21.270
导入进来之后

20:21.270 --> 20:22.750
我们到这边

20:22.750 --> 20:24.550
到这边index里面

20:24.550 --> 20:25.430
来测试一下

20:25.430 --> 20:26.470
来测试一下

20:26.470 --> 20:28.630
我把这两行删除掉

20:28.630 --> 20:29.870
删除掉

20:29.870 --> 20:30.870
然后这边

20:30.870 --> 20:32.150
我们来测试一下

20:32.150 --> 20:33.270
dispatch 啥呢

20:33.270 --> 20:34.510
dispatch一个sunk

20:34.510 --> 20:36.870
我看刚才应用进来没有

20:36.870 --> 20:38.750
好像还没有应用进来对吧

20:38.750 --> 20:40.110
还没有apply

20:40.190 --> 20:41.790
所以sunk要写到前边

20:41.790 --> 20:42.910
这是以前的字词

20:42.910 --> 20:44.190
sunk要写到前边

20:44.190 --> 20:45.070
logger

20:45.070 --> 20:46.870
logger写到最后

20:46.870 --> 20:48.710
这个顺序的要求

20:48.710 --> 20:49.390
好这里面

20:49.390 --> 20:50.670
我dispatch的时候

20:50.670 --> 20:52.110
使用

20:52.110 --> 20:53.550
这个fetch

20:53.550 --> 20:55.230
怎么说

20:55.230 --> 20:57.310
fetch movies

20:57.310 --> 20:58.670
得不到吗

20:58.670 --> 21:02.150
应该是movie action里面的fetch movies

21:02.150 --> 21:05.070
通过调用这个函数来获取电影

21:05.070 --> 21:06.910
这个函数有一个参数

21:06.910 --> 21:08.350
参数就是条件

21:08.430 --> 21:10.910
条件的话比方说给他一个page2

21:10.910 --> 21:12.030
都是可选的嘛

21:12.030 --> 21:12.590
对吧

21:12.590 --> 21:14.150
所以给他一个page2

21:14.150 --> 21:16.110
但是现在他爆错了

21:16.110 --> 21:16.710
我这里就是

21:16.710 --> 21:18.110
这里就是一个麻烦点

21:18.110 --> 21:20.190
有个比较麻烦的点

21:20.190 --> 21:21.350
他为什么爆错呢

21:21.350 --> 21:23.430
是因为这样子的

21:23.430 --> 21:25.550
其实我能体会到

21:25.550 --> 21:26.590
redux

21:26.590 --> 21:27.750
这个内形编写着

21:27.750 --> 21:29.110
他的无赖

21:29.110 --> 21:30.790
为什么他要爆错呢

21:30.790 --> 21:32.350
是因为这个dispatch

21:32.350 --> 21:34.390
这个dispatch这个函数

21:34.390 --> 21:36.350
他是redux编写的

21:36.350 --> 21:37.790
因此他的内形声明

21:37.790 --> 21:40.110
是由redux来声明的

21:40.110 --> 21:42.510
而redux在声明这个dispatch

21:42.510 --> 21:43.830
这个函数的时候

21:43.830 --> 21:45.910
他给他进行了这样的约束

21:45.910 --> 21:47.790
你看一下

21:47.790 --> 21:49.390
我先解释一下

21:49.390 --> 21:52.110
他为什么会这样子

21:52.110 --> 21:54.030
他在声明这个dispatch的时候

21:54.030 --> 21:55.430
他做了这么一个约束

21:55.430 --> 21:56.310
就是说

21:56.310 --> 21:58.030
你这里边的参数

21:58.030 --> 22:00.310
得给我传一个action

22:00.310 --> 22:02.870
你得给我传一个action作为参数

22:02.870 --> 22:04.630
而一个action是什么内形呢

22:04.630 --> 22:05.270
一个action

22:05.310 --> 22:07.030
至少有个内形是type

22:07.030 --> 22:07.910
它是一个对象

22:07.910 --> 22:09.550
至少有个内形是type

22:09.550 --> 22:11.590
一个数据是type

22:11.590 --> 22:15.310
但是我们现在给他传递的东西

22:15.310 --> 22:16.950
是一个啥呢

22:16.950 --> 22:19.950
我调用非情不为止

22:19.950 --> 22:21.710
返回的东西是啥

22:21.710 --> 22:23.550
调用这个函数返回的东西是啥

22:23.550 --> 22:25.310
返回的是这么一个玩意儿

22:25.310 --> 22:26.990
返回的是一个函数

22:26.990 --> 22:28.670
哪有type属性啊

22:28.670 --> 22:29.510
这是一个函数

22:29.510 --> 22:31.310
他哪有type属性啊

22:31.310 --> 22:34.430
因此这里出现了内形不匹配

22:34.430 --> 22:37.590
我们在桑克里边返回的是一个函数

22:37.590 --> 22:41.350
这个函数会被桑克这个中间键所处理

22:41.350 --> 22:42.070
但是呢

22:42.070 --> 22:44.390
Redux他不知道

22:44.390 --> 22:45.630
他怎么能默认你

22:45.630 --> 22:47.510
他无法默认

22:47.510 --> 22:49.830
知道有桑克这个中间键

22:49.830 --> 22:51.990
会来处理这个问题

22:51.990 --> 22:52.590
所以说呢

22:52.590 --> 22:55.830
他在写这个dispatch的时候啊

22:55.830 --> 22:57.950
他没有去考虑这个问题

22:57.950 --> 22:59.150
没有考虑这个问题

22:59.150 --> 23:01.550
他只让你给他一个action

23:01.550 --> 23:01.950
但是呢

23:01.950 --> 23:04.190
我们这里要给他给他的是一个函数

23:04.190 --> 23:06.510
所以说出现了内形不匹配

23:06.510 --> 23:08.670
那么这个代码实际上是没有问题的

23:08.670 --> 23:09.310
因为我们知道

23:09.310 --> 23:11.590
这个函数会被谁处理呢

23:11.590 --> 23:13.350
会被桑克中间键所处理

23:13.350 --> 23:15.910
不是被Redux直接处理的

23:15.910 --> 23:17.270
因此这里怎么办呢

23:17.270 --> 23:19.030
这里有两种做法

23:19.030 --> 23:20.310
第一种做法

23:20.310 --> 23:22.750
四个人都能理解

23:22.750 --> 23:23.710
很简单

23:23.710 --> 23:26.910
你我把这里变成n里五玩意儿了吗

23:26.910 --> 23:28.270
内形断言

23:28.270 --> 23:29.590
把它变成n里

23:29.590 --> 23:31.310
挑过内形检查就完事了

23:31.310 --> 23:33.750
这是最简单的做法啊

23:33.750 --> 23:35.550
因为我们清楚的知道

23:35.550 --> 23:37.510
这里的代码我们是没有写错的

23:37.510 --> 23:38.590
是没有问题的

23:38.590 --> 23:39.510
但是为了绕过

23:39.510 --> 23:41.430
内形检查确实出了问题

23:41.430 --> 23:43.670
那么为了绕过他这个检查的话

23:43.670 --> 23:44.710
直接内形断言

23:44.710 --> 23:47.030
把这个地方设成n里

23:47.030 --> 23:48.670
而另外一种做法呢

23:48.670 --> 23:50.390
是这样做的

23:50.390 --> 23:52.350
另外一种做法

23:52.350 --> 23:54.110
是在这在这

23:54.110 --> 23:56.590
在应用这个中间键的时候啊

23:56.590 --> 23:58.670
在应用这个中间键的时候

23:58.670 --> 24:00.830
其实我们是有机会

24:00.830 --> 24:03.070
有机会来更改掉

24:03.070 --> 24:04.670
dispatch的签名的

24:04.670 --> 24:07.470
是能够更改掉dispatch的签名的

24:07.470 --> 24:09.070
你看一下这个中间键啊

24:09.070 --> 24:09.990
这个中间键

24:09.990 --> 24:12.070
他其实有一些犯行参数

24:12.070 --> 24:13.470
有一些犯行参数

24:13.470 --> 24:14.830
这些犯行参数呢

24:14.830 --> 24:18.230
都能够影响到dispatch的

24:18.230 --> 24:20.030
相应的参数值

24:20.030 --> 24:20.470
因此呢

24:20.470 --> 24:22.270
redax他考虑到了这个问题

24:22.270 --> 24:23.750
他在这个地方

24:23.750 --> 24:26.070
他在这个地方给你做了一个处理

24:26.070 --> 24:29.870
就是如果你要想更改dispatch里面的参数

24:29.870 --> 24:31.550
dispatch里面的参数内形的话

24:31.590 --> 24:33.590
你可以在这里进行处理

24:33.590 --> 24:34.830
进行处理

24:34.830 --> 24:36.310
那么这个sunk的中间键

24:36.310 --> 24:38.750
他刚好就做了这么一个内形出来

24:38.750 --> 24:41.310
我不说这么多了

24:41.310 --> 24:42.430
我解释那么多了

24:42.430 --> 24:43.830
我们直接来吧

24:43.830 --> 24:45.510
sunk你这里写个这个东西

24:45.510 --> 24:46.390
us

24:46.390 --> 24:47.630
us

24:47.630 --> 24:49.870
然后这里写个sunk

24:49.870 --> 24:51.270
madeware

24:51.270 --> 24:52.990
sunkmadeware

24:52.990 --> 24:54.670
你写个这么个东西

24:54.670 --> 24:56.390
你写了之后呢

24:56.390 --> 24:57.270
你写了之后

24:57.270 --> 24:58.030
这个东西呢

24:58.030 --> 24:59.590
它是有一些犯行的

24:59.590 --> 25:01.070
有些犯行的

25:01.070 --> 25:02.030
第一个犯行呢

25:02.030 --> 25:04.750
就是状态的内行

25:04.750 --> 25:06.470
状态的内行

25:06.470 --> 25:07.510
好状态的内行

25:07.510 --> 25:08.470
我们用啥

25:08.470 --> 25:11.070
是不是之前一个Iroos state

25:11.070 --> 25:13.310
状态的内行写出来

25:13.310 --> 25:13.590
好

25:13.590 --> 25:15.190
第二个犯行呢

25:15.190 --> 25:16.750
第一个犯行是x的内行

25:16.750 --> 25:18.590
不过x它有默认值

25:18.590 --> 25:19.390
这个1的内行呢

25:19.390 --> 25:20.190
就是耳外参数

25:20.190 --> 25:21.190
它也有默认值

25:21.190 --> 25:22.630
后面两个我都不写了

25:22.630 --> 25:23.550
我都不写了

25:23.550 --> 25:24.990
我就写一个就行了

25:24.990 --> 25:26.470
就写一个

25:26.470 --> 25:27.950
写好了之后呢

25:27.950 --> 25:30.270
我们再来看这个index

25:30.310 --> 25:31.390
它不爆错了

25:31.390 --> 25:32.470
它就不爆错了

25:32.470 --> 25:33.150
为什么不爆错

25:33.150 --> 25:35.470
一看这个dispatch的内行已经被更改了

25:35.470 --> 25:36.310
已经被更改了

25:38.350 --> 25:38.510
好

25:38.510 --> 25:38.910
这一块呢

25:38.910 --> 25:40.710
就是这两种解决办法

25:40.710 --> 25:41.830
两种解决办法

25:41.830 --> 25:43.310
有点稍微有点绕

25:43.310 --> 25:44.390
有点麻烦

25:44.390 --> 25:45.070
不过呢

25:45.070 --> 25:47.470
好处在于你又可以获得内行检查了

25:48.470 --> 25:48.670
好

25:48.670 --> 25:49.750
咱们来试一下

25:49.750 --> 25:51.030
试一下

25:51.030 --> 25:51.510
我这里呢

25:51.510 --> 25:53.030
把数据库开起来

25:53.030 --> 25:53.830
把服务器开起来

25:55.390 --> 25:57.150
首先我们进入server

25:57.150 --> 25:58.190
把服务器开起来

25:58.190 --> 25:58.670
np

25:59.630 --> 26:00.630
ZoneDev

26:02.030 --> 26:02.190
好

26:02.190 --> 26:03.270
让服务器运行起来

26:03.270 --> 26:03.630
然后呢

26:03.630 --> 26:05.870
我们这里添加一个控制台

26:06.870 --> 26:07.990
这里进入Client

26:09.150 --> 26:12.230
然后这里我们把客户端也运行起来

26:12.230 --> 26:13.190
看一下啊

26:13.190 --> 26:14.710
这个dispatch有没有成功

26:17.150 --> 26:18.310
稍微等一下啊

26:18.310 --> 26:22.360
端口改一下

26:22.360 --> 26:23.080
稍微等一下

26:23.080 --> 26:23.760
我们来看一下

26:23.760 --> 26:24.840
这个客户端这里边

26:24.840 --> 26:27.360
有没有正常能够请求到服务器

26:27.360 --> 26:28.880
然后能够获得正确的数据

26:28.920 --> 26:29.640
并且呢

26:29.640 --> 26:34.900
正确的去设置仓库里面的各个状态

26:34.900 --> 26:36.660
稍微的等一下

26:42.470 --> 26:43.510
好运行出来了啊

26:43.510 --> 26:44.270
我们来看一下啊

26:44.270 --> 26:46.230
首先看一下网络请求这边

26:46.230 --> 26:48.590
你看服务器的请求发生了

26:48.590 --> 26:50.030
发生了服务器的请求

26:50.030 --> 26:50.990
请求的是什么呢

26:50.990 --> 26:52.030
无畏这个地址对吧

26:52.030 --> 26:52.990
配级为二

26:52.990 --> 26:54.670
另一层默认值为十

26:54.670 --> 26:55.550
t呢

26:55.550 --> 26:56.350
没有值啊

26:56.350 --> 26:57.110
没有值

26:57.110 --> 26:59.670
那么得到了服务器正确的详细结果

26:59.670 --> 27:00.430
然后这边呢

27:00.430 --> 27:02.550
我们看有没有保存到仓库里边啊

27:02.550 --> 27:04.110
调用了set loading

27:04.110 --> 27:05.350
调用了set condition

27:05.350 --> 27:07.830
调用了set loading

27:07.830 --> 27:08.430
最终呢

27:08.430 --> 27:11.030
我们的数据看一下仓库里面的数据

27:11.030 --> 27:11.390
是吧

27:11.390 --> 27:12.590
你看是不是就有了

27:12.590 --> 27:13.630
condition

27:13.630 --> 27:14.710
data

27:14.710 --> 27:15.510
data

27:15.510 --> 27:16.470
然后呢

27:16.470 --> 27:17.150
is loading

27:17.150 --> 27:17.670
toto

27:17.670 --> 27:18.830
这些都有了

27:18.830 --> 27:19.230
都有了

27:20.390 --> 27:20.670
好

27:20.670 --> 27:21.670
那么现在呢

27:21.670 --> 27:23.950
我们搞定了这一块的东西过后呢

27:23.950 --> 27:25.430
那我们就继续写啊

27:25.430 --> 27:28.570
把它写完啊

27:28.570 --> 27:30.370
这里是获取电影对吧

27:30.370 --> 27:31.330
获取电影

27:31.330 --> 27:34.050
还有什么情况下要异步呢

27:34.090 --> 27:35.450
有些同学说翻页

27:35.450 --> 27:36.770
翻页还是这个

27:36.770 --> 27:38.770
翻页里把页码给它改一下就行了

27:38.770 --> 27:39.690
还是这个

27:39.690 --> 27:41.250
没变化的

27:41.250 --> 27:42.090
然后呢

27:42.090 --> 27:43.090
我们还要使用

27:43.090 --> 27:45.450
还要加上一个删除

27:45.450 --> 27:47.810
dynate movie

27:47.810 --> 27:50.770
dynate movie这个函数是不是之前有啊

27:50.770 --> 27:52.410
之前是dynate action对吧

27:52.410 --> 27:54.810
我们这里用dynate movie

27:54.810 --> 27:55.490
传一个啥呢

27:55.490 --> 27:57.450
传一个id进来

27:57.450 --> 27:58.490
传一个id进来

27:58.490 --> 27:59.570
那么同样的道理啊

27:59.570 --> 28:02.620
把这个复制一下

28:02.620 --> 28:04.940
其实你可以把它做成一个内容

28:04.980 --> 28:06.860
你可以把它做成一个内容

28:06.860 --> 28:07.660
对吧

28:07.660 --> 28:07.860
好

28:07.860 --> 28:08.420
那么这里呢

28:08.420 --> 28:11.220
我们返回返回个啥呢

28:11.220 --> 28:14.420
dispatch

28:14.420 --> 28:16.700
然后getState

28:16.700 --> 28:17.860
getState

28:17.860 --> 28:20.140
getState其实都没有必要使用了啊

28:20.140 --> 28:20.620
没必要

28:20.620 --> 28:22.500
我们只需要一个dispatch就行了

28:22.500 --> 28:24.060
说好了有三个谈数

28:24.060 --> 28:25.100
但是我们只用

28:25.100 --> 28:27.540
只会用到其中一个

28:27.540 --> 28:27.940
好

28:27.940 --> 28:29.540
dispatch里边

28:29.540 --> 28:30.700
它是一个ebo的啊

28:30.700 --> 28:31.740
肯定是一个ebo的

28:31.740 --> 28:33.140
sync

28:34.300 --> 28:34.580
好

28:34.620 --> 28:35.100
然后呢

28:35.100 --> 28:35.620
这里边呢

28:35.620 --> 28:37.180
我们去处理啊

28:37.180 --> 28:38.540
首先我删除的话

28:38.540 --> 28:40.220
我首先要做啥呢

28:40.220 --> 28:41.820
首先去

28:41.820 --> 28:43.300
首先调用dispatch

28:44.740 --> 28:45.500
然后

28:47.180 --> 28:49.060
先调用这个is loading吧

28:49.060 --> 28:49.700
is loading

28:51.060 --> 28:52.100
这个dispatch

28:53.380 --> 28:54.740
set

28:54.740 --> 28:56.900
is set loading

28:56.900 --> 28:57.620
exit

28:57.620 --> 28:58.980
把它设为去

28:58.980 --> 29:00.380
先把它设为加载状态

29:00.380 --> 29:00.780
然后呢

29:00.780 --> 29:01.140
以后呢

29:01.140 --> 29:03.660
我把它设为关闭加载状态

29:03.660 --> 29:05.340
先把这个事情做了

29:05.340 --> 29:06.620
force

29:06.620 --> 29:07.340
然后呢

29:07.340 --> 29:08.380
在关闭

29:08.380 --> 29:09.660
在打开关闭之间呢

29:09.660 --> 29:11.740
我们首先去运行服务器啊

29:11.740 --> 29:13.220
运行服务器

29:13.220 --> 29:14.980
呃服务器的请求

29:14.980 --> 29:16.900
就是movie service啊

29:16.900 --> 29:17.860
dinnet

29:17.860 --> 29:18.620
删除

29:18.620 --> 29:19.860
把id传进去啊

29:19.860 --> 29:20.580
id传进去

29:20.580 --> 29:22.580
去等待服务器处理完成

29:22.580 --> 29:23.940
处理完成之后呢

29:23.940 --> 29:25.260
我们再来dispatch

29:26.940 --> 29:27.980
dispatch

29:27.980 --> 29:29.180
set

29:29.180 --> 29:30.020
呃

29:30.020 --> 29:32.140
应该是dinnet action

29:32.140 --> 29:33.580
dinnet action

29:34.580 --> 29:35.140
好

29:35.140 --> 29:36.420
把这个id传进去

29:36.420 --> 29:37.060
让他去

29:37.060 --> 29:39.500
在本地仓库里边去完成删除啊

29:39.500 --> 29:42.980
删除本地仓库中的数据

29:44.620 --> 29:45.260
好了啊

29:45.260 --> 29:45.900
那么这里呢

29:45.900 --> 29:47.500
我们就把这个函数也写出来了

29:47.500 --> 29:47.660
好

29:47.660 --> 29:48.420
把这个函数

29:49.660 --> 29:51.140
放过去啊

29:51.140 --> 29:52.180
放过去

29:52.180 --> 29:54.060
那么这边我们来调用试一下啊

29:54.060 --> 29:54.980
调用试一下

29:54.980 --> 29:56.260
我们得到了第二页的数据

29:56.260 --> 29:58.500
我们看一下第二页的数据里面有哪些电影

29:59.660 --> 30:01.580
随便找个电影吧

30:01.580 --> 30:02.540
这个电影

30:02.540 --> 30:03.420
我想把它删掉

30:04.420 --> 30:05.980
我这里把删掉

30:05.980 --> 30:07.220
把这个电影删掉

30:08.220 --> 30:08.460
好

30:08.460 --> 30:09.180
复制一下

30:10.060 --> 30:10.580
这里

30:10.580 --> 30:11.420
我们stop

30:12.620 --> 30:14.540
然后dispatch

30:14.540 --> 30:15.660
dispatch

30:15.660 --> 30:16.380
其实这里呢

30:16.380 --> 30:17.420
我们要等待一下

30:17.420 --> 30:18.540
因为第一个dispatch呢

30:18.540 --> 30:19.220
它是一步的

30:19.220 --> 30:20.060
还没有结束

30:20.060 --> 30:22.140
我们可以用zin

30:22.140 --> 30:24.300
来等待第一个完成

30:24.300 --> 30:25.100
完成之后呢

30:25.100 --> 30:26.340
我们再来做删除

30:26.340 --> 30:27.500
再来做删除

30:29.340 --> 30:29.860
stop

30:30.860 --> 30:32.300
dispatch

30:32.340 --> 30:35.100
然后是movieaction

30:35.100 --> 30:36.020
dynetaction

30:37.740 --> 30:38.220
dynet

30:39.100 --> 30:39.980
dynetemovie

30:41.060 --> 30:41.300
好

30:41.300 --> 30:42.460
把这个id传进去

30:43.500 --> 30:44.380
传进去

30:44.380 --> 30:44.540
好

30:44.540 --> 30:45.340
去完成删除

30:46.260 --> 30:46.380
好

30:46.380 --> 30:47.300
咱们试一下啊

30:47.300 --> 30:48.100
保存试一下

30:50.390 --> 30:50.750
好

30:50.750 --> 30:51.630
因为看到

30:51.630 --> 30:53.070
除了保存的电

30:53.070 --> 30:54.310
得到电影之后

30:54.310 --> 30:54.990
之外呢

30:54.990 --> 30:56.190
我们还得到了

30:56.190 --> 30:57.510
还删除了一个电影

30:57.510 --> 30:59.070
我们看删除完成之后

30:59.070 --> 30:59.830
它的数据

30:59.830 --> 31:01.350
你看是不是就只有9个了

31:02.070 --> 31:04.430
只有9个数据了

31:04.430 --> 31:06.150
以前是10条数据的

31:06.150 --> 31:07.470
那么并且呢

31:07.470 --> 31:08.910
总数也减了1

31:09.750 --> 31:10.950
网络请求呢

31:10.950 --> 31:11.910
也发生了

31:14.430 --> 31:15.390
网络请求

31:16.390 --> 31:17.230
怎么回事啊

31:17.750 --> 31:19.110
你看网络请求呢

31:19.110 --> 31:20.190
也发生了啊

31:20.190 --> 31:21.350
删除dynet

31:21.350 --> 31:23.390
还去调用这个服务器接口

31:23.390 --> 31:24.270
服务器呢

31:24.270 --> 31:25.350
表示删除成功

31:26.150 --> 31:26.670
好吧

31:26.670 --> 31:27.310
那么现在呢

31:27.310 --> 31:28.390
我们就处理了

31:28.390 --> 31:30.190
整个工程里边的副作用

31:30.190 --> 31:31.350
就得到了处理

31:31.350 --> 31:31.830
好

31:31.830 --> 31:33.950
那么Redux这一块

31:33.950 --> 31:35.190
我们就编写完成了

31:35.190 --> 31:36.270
编写完成了

31:36.270 --> 31:37.230
然后我想到这里呢

31:37.230 --> 31:40.310
我发现一个之前没有想到的一个点

31:40.310 --> 31:41.950
还有一个点没有想到

31:41.950 --> 31:44.110
就是说我们的movie里边呢

31:44.110 --> 31:45.350
就是这个状态里边

31:45.350 --> 31:46.710
其实还有一些东西的

31:46.710 --> 31:47.990
还有一些东西

31:47.990 --> 31:50.150
比方说还有应该还有这个

31:50.150 --> 31:50.630
还有这个

31:50.630 --> 31:52.190
当前页码

31:52.190 --> 31:53.910
当前页码是多少

31:53.910 --> 31:55.790
curr page

31:55.790 --> 31:57.470
当前页码

31:57.470 --> 31:58.510
当前页码已经有了

31:58.510 --> 31:58.950
对吧

31:58.950 --> 31:59.710
就是条件

31:59.710 --> 32:00.350
就是条件

32:00.390 --> 32:01.550
这个是有的

32:01.550 --> 32:02.510
page

32:02.510 --> 32:03.590
还少什么东西

32:03.590 --> 32:05.190
还少一个总页数

32:05.190 --> 32:06.390
少了一个总页数

32:06.390 --> 32:07.550
把加上吧

32:07.550 --> 32:08.830
total page

32:08.830 --> 32:10.230
总页数要算的

32:10.230 --> 32:11.550
计算的

32:11.550 --> 32:11.710
好

32:11.710 --> 32:12.910
这是总页数

32:12.910 --> 32:14.270
把这个数据加上

32:14.270 --> 32:15.710
我这里想到了就把加上

32:15.710 --> 32:17.670
因为后边早晚要加的

32:17.670 --> 32:19.190
总页数

32:19.190 --> 32:19.390
好

32:19.390 --> 32:20.150
这个总页数呢

32:20.150 --> 32:20.910
你看

32:20.910 --> 32:22.350
因为ts的好处在于

32:22.350 --> 32:23.790
你不用怕改代嘛

32:23.790 --> 32:24.950
你改了过后呢

32:24.950 --> 32:26.110
如果有问题的地方了

32:26.110 --> 32:27.710
自然会给你爆出

32:27.710 --> 32:27.910
好

32:27.910 --> 32:28.630
那么这个地方呢

32:28.630 --> 32:30.030
我们要加上一个总页数

32:30.030 --> 32:32.310
默认值里面加上的总页数

32:32.310 --> 32:33.990
total page

32:33.990 --> 32:35.550
总页数

32:35.550 --> 32:36.510
总页吗

32:36.510 --> 32:37.390
不是总记录数

32:37.390 --> 32:38.830
是总页数

32:38.830 --> 32:39.950
总页数的话

32:39.950 --> 32:41.430
默认为0

32:41.430 --> 32:43.190
默认为0

32:43.190 --> 32:43.430
好

32:43.430 --> 32:44.470
现在呢

32:44.470 --> 32:46.550
什么时候改变这个数据呢

32:46.550 --> 32:47.990
你在保存电影的时候

32:47.990 --> 32:50.030
其实就可以改变这个数据了

32:50.030 --> 32:51.030
你保存电影的时候

32:51.030 --> 32:52.030
不是得拿到了总

32:52.030 --> 32:52.990
总记录数吗

32:52.990 --> 32:53.670
对吧

32:53.670 --> 32:55.390
那么是不是可以改变这个数据了

32:55.390 --> 32:55.550
好

32:55.550 --> 32:57.230
我们来设置一下

32:57.230 --> 32:59.390
total page

32:59.430 --> 33:01.550
总页数应该等于多少呢

33:01.550 --> 33:03.590
总页数是总记录数

33:04.990 --> 33:05.550
x

33:06.790 --> 33:07.870
pnote

33:07.870 --> 33:08.670
total

33:08.670 --> 33:10.110
总记录数

33:10.110 --> 33:11.270
除亿啥呢

33:12.190 --> 33:13.550
除亿页容量

33:13.550 --> 33:14.830
就是每页显示多少条

33:14.830 --> 33:16.110
一共有多少条数据

33:16.110 --> 33:17.790
每页显示多少条数据

33:17.790 --> 33:20.110
那么相处就是总页数

33:20.110 --> 33:21.150
每页显示多少条数据呢

33:21.150 --> 33:22.950
在condition

33:22.950 --> 33:23.830
列面车里面

33:23.830 --> 33:24.310
对吧

33:24.310 --> 33:25.870
这是页容量

33:25.870 --> 33:27.070
页容量

33:27.070 --> 33:27.190
好

33:27.190 --> 33:29.070
这个相处有可能是小数

33:29.070 --> 33:30.550
因此我们这里

33:30.550 --> 33:31.630
怎么来取整

33:31.630 --> 33:33.310
应该向上取整

33:33.310 --> 33:35.310
还是向下取整

33:35.310 --> 33:37.150
向上还是向下

33:37.150 --> 33:39.070
应该是向上取整

33:39.070 --> 33:40.430
哪怕你多一条

33:40.430 --> 33:41.550
多一两条数据

33:41.550 --> 33:42.830
我都要

33:42.830 --> 33:45.870
我都要1加1

33:45.870 --> 33:47.790
向上取整

33:47.790 --> 33:51.110
我们这里就直接把总页数给你设置好

33:51.110 --> 33:53.150
设置好总页数

33:53.150 --> 33:53.590
好了

33:53.590 --> 33:54.790
那么我们这里设置好了之后

33:54.790 --> 33:56.470
我们再来看一下

33:56.470 --> 33:57.270
再来看一下这边

33:59.070 --> 34:01.030
那么现在我们这里看一下

34:01.030 --> 34:02.790
这个next state

34:02.790 --> 34:04.790
next state

34:04.790 --> 34:06.750
看一下这里

34:06.750 --> 34:08.070
movie

34:08.070 --> 34:08.830
好

34:08.830 --> 34:10.190
头说配级122页

34:10.190 --> 34:10.710
是吧

34:10.710 --> 34:12.390
这个东西也计算出来了

34:12.390 --> 34:14.350
也计算出来了

34:14.350 --> 34:14.630
好

34:14.630 --> 34:17.950
另外一个有可能会改变总页数的地方

34:17.950 --> 34:20.150
另外一个有可能会改变总页数的地方

34:20.150 --> 34:20.750
在哪呢

34:20.750 --> 34:22.710
就在于三处这一块

34:22.710 --> 34:23.630
三处这一块

34:23.630 --> 34:25.150
也有可能会改变总页数

34:25.150 --> 34:26.550
因为总季度数减少了

34:26.550 --> 34:27.150
对吧

34:27.150 --> 34:29.030
总页数它只跟什么有关系

34:29.030 --> 34:30.590
跟那个

34:30.590 --> 34:31.710
总季度数

34:31.710 --> 34:33.310
总季度数会有关

34:33.310 --> 34:35.230
总季度数会有关系

34:35.230 --> 34:35.390
好

34:35.390 --> 34:36.590
因此在这里呢

34:36.590 --> 34:39.310
我们也需要去改变

34:39.310 --> 34:40.670
总页数

34:40.670 --> 34:42.510
偷偷配级

34:42.510 --> 34:43.350
等于啥呢

34:43.350 --> 34:44.590
等于

34:44.590 --> 34:45.630
一样的

34:45.630 --> 34:46.790
一样的

34:46.790 --> 34:49.350
当前的总总数减1

34:49.350 --> 34:50.750
因为现在少了一条数据

34:50.750 --> 34:51.270
对吧

34:51.270 --> 34:52.630
减1过后

34:52.630 --> 34:54.550
再处理什么呢

34:54.550 --> 34:56.310
再处理

34:56.750 --> 34:58.470
当前的

34:58.470 --> 35:01.070
当前的条件里面的limit

35:01.070 --> 35:02.790
其实你可以把它写成专门几个函数

35:02.790 --> 35:03.710
来帮你算

35:03.710 --> 35:04.870
来帮你算

35:06.230 --> 35:08.230
然后sell

35:08.230 --> 35:09.910
向上取证

35:09.910 --> 35:10.110
好

35:10.110 --> 35:11.110
这个地方

35:11.110 --> 35:13.990
它也有可能会改变总页数

35:13.990 --> 35:16.190
也有可能会改变的

35:16.190 --> 35:17.990
还有什么地方可能会改变的

35:17.990 --> 35:20.350
还有这个地方也有可能会改变

35:20.350 --> 35:21.790
set condition

35:21.790 --> 35:23.990
你设置的条件过后

35:23.990 --> 35:24.550
对吧

35:24.550 --> 35:26.070
你设置的条件过后

35:26.070 --> 35:28.190
是不是也有可能会改变总页数

35:28.190 --> 35:28.910
对不对

35:28.910 --> 35:29.110
好

35:29.110 --> 35:30.630
那么这里怎么处理呢

35:30.630 --> 35:31.390
这里咋处理呢

35:31.390 --> 35:32.870
我们可以这样子来做

35:32.870 --> 35:34.150
把这个新的状态

35:34.150 --> 35:35.710
先保存了一个对象里面

35:35.710 --> 35:36.270
新的状态

35:36.270 --> 35:38.230
先保存了一个对象

35:38.230 --> 35:40.710
然后重新设置这个对象

35:40.710 --> 35:43.190
重新设置个对象

35:43.190 --> 35:44.790
就是new state

35:44.790 --> 35:46.710
这对象的什么

35:46.710 --> 35:47.590
total page

35:47.590 --> 35:49.110
重新设置它的纸

35:49.110 --> 35:50.270
它的纸为啥呢

35:50.270 --> 35:51.670
为

35:51.670 --> 35:52.710
又来了

35:52.710 --> 35:53.470
mass

35:53.470 --> 35:55.190
叫sell

35:55.230 --> 35:56.590
一样的

35:56.590 --> 35:59.030
先达到它的总页数

35:59.030 --> 35:59.990
总纪录数

35:59.990 --> 36:01.110
total

36:01.110 --> 36:02.470
然后除异

36:02.470 --> 36:03.430
除异啥呢

36:03.430 --> 36:04.670
new state里面

36:04.670 --> 36:05.670
condition

36:05.670 --> 36:07.670
limit

36:07.670 --> 36:07.950
好

36:07.950 --> 36:10.510
最后把这个新的对象返回

36:10.510 --> 36:10.670
好

36:10.670 --> 36:12.550
有些同学有这里可能有两个疑问

36:12.550 --> 36:13.510
第一个疑问呢

36:13.510 --> 36:15.190
你为什么要去保存到一个新对象

36:15.190 --> 36:17.110
不像刚才那样子直接来算了

36:17.110 --> 36:18.430
是因为不太好弄

36:18.430 --> 36:21.590
因为我这里使用total page来算的时候呢

36:21.590 --> 36:22.990
就会遇到一个问题

36:22.990 --> 36:24.070
我这个总

36:24.110 --> 36:25.470
总数我知道的哪里取

36:25.470 --> 36:26.550
就在state里面取

36:26.550 --> 36:26.830
对吧

36:26.830 --> 36:27.470
取总数

36:27.470 --> 36:28.590
这个我没问题

36:28.590 --> 36:29.590
那么这个limit

36:29.590 --> 36:31.270
我在哪里取呢

36:31.270 --> 36:32.470
我limit在哪里取呢

36:32.470 --> 36:33.870
这会遇到一个麻烦

36:33.870 --> 36:35.310
因为limit呢

36:35.310 --> 36:37.270
它有可能在这里边

36:37.270 --> 36:38.190
因为这个x里面

36:38.190 --> 36:40.950
panel里面可能会传递一个limit过来

36:40.950 --> 36:42.190
但是它是可选的

36:42.190 --> 36:43.350
注意它里面是可选的

36:43.350 --> 36:44.870
它也可能不传递

36:44.870 --> 36:46.870
不传递的话就要在这里面去找

36:46.870 --> 36:47.390
对吧

36:47.390 --> 36:48.590
那么这里其实你可以

36:48.590 --> 36:51.310
也可以用一个三目运算符来判断

36:51.310 --> 36:52.790
但是我就不想这个判断

36:52.790 --> 36:56.630
所以说我先把之前其他的纸先搞定

36:56.630 --> 36:58.230
先搞定其他的纸

36:58.230 --> 37:00.110
融合成一个新对象之后

37:00.110 --> 37:02.550
我们把新对象里面的东西拿出来算

37:02.550 --> 37:04.030
我可以用这种方式

37:04.030 --> 37:04.310
好

37:04.310 --> 37:05.270
第二个问题呢

37:05.270 --> 37:06.790
有可能有些同学叫问了

37:06.790 --> 37:08.790
你这里不是副作用吗

37:08.790 --> 37:12.910
不是说这里面不能给属性副职吗

37:12.910 --> 37:14.630
什么叫副作用

37:14.630 --> 37:15.990
什么叫存函数

37:15.990 --> 37:19.190
存函数指的是函数的返回结果

37:19.190 --> 37:21.150
只跟参数有关

37:21.230 --> 37:22.990
只要你能保证这一点

37:22.990 --> 37:25.910
那么它就是一个存函数

37:25.910 --> 37:27.350
函数的运行结果

37:27.350 --> 37:29.350
它只跟参数有关系

37:29.350 --> 37:30.590
那么这个地方

37:30.590 --> 37:32.350
我只是定了个变量而已

37:32.350 --> 37:34.550
这个变量只是来辅助我们

37:34.550 --> 37:36.310
生成最终的结果的

37:36.310 --> 37:39.310
对这个变量的变化是没有什么问题的

37:39.310 --> 37:40.950
是没有什么问题的

37:40.950 --> 37:41.830
明白这个意思吗

37:41.830 --> 37:43.230
而且这个变量

37:43.230 --> 37:44.590
更改这个变量的值

37:44.590 --> 37:47.510
也不会导致之前的状态发生变化

37:47.510 --> 37:48.750
因为它是一个新的对象

37:48.750 --> 37:49.550
你看看

37:49.550 --> 37:51.030
它是一个新的对象

37:51.070 --> 37:52.910
是把之前的值复制过来的

37:52.910 --> 37:54.710
因此它不会导致它变化的

37:54.710 --> 37:56.470
所以这里没有问题的

37:56.470 --> 37:59.670
我们把这里的这个地方都搞定

37:59.670 --> 38:02.350
那么现在我们整个工程的做的

38:02.350 --> 38:04.670
就把Ridax这一块

38:04.670 --> 38:07.110
至少把Ridax这一块做完了

38:07.110 --> 38:07.750
好吧

38:07.750 --> 38:08.830
好那么下来

38:08.830 --> 38:12.470
大家把这个有副作用的代码

38:12.470 --> 38:14.950
用Sunk来处理一下

38:14.950 --> 38:16.310
来处理一下

38:16.310 --> 38:18.590
这是我们本节课的东西

38:18.590 --> 38:20.030
因为我再强调一次

38:20.110 --> 38:23.590
咱们因为我是讲的是TS

38:23.590 --> 38:24.950
所以说我没有办法

38:24.950 --> 38:27.670
你要说我自己写代码会这样写吗

38:29.070 --> 38:31.150
我自己写代码也会这样子写

38:31.150 --> 38:34.150
可能还写得更加更加绕一点

38:34.150 --> 38:35.390
但是

38:35.390 --> 38:37.790
但是我觉得对一个初学者来说

38:37.790 --> 38:39.390
没有必要这样子写

38:39.390 --> 38:41.870
但是我在讲这个TS

38:41.870 --> 38:43.510
所以说我一定要把它讲到

38:43.510 --> 38:46.590
你可能现在不能理解

38:46.590 --> 38:48.030
但是因为这个视频

38:48.070 --> 38:50.150
你这个视频可以一直反复观看的

38:50.150 --> 38:52.390
将来你到了公司里面发现

38:52.390 --> 38:52.590
哇

38:52.590 --> 38:54.870
这个公司里面居然要求那么高

38:54.870 --> 38:56.830
对所有的东西都要有类型检查

38:56.830 --> 38:59.110
那么包括这个Sunk这个副作用这一块

38:59.110 --> 39:00.270
也要有类型检查

39:00.270 --> 39:01.030
那怎么办呢

39:01.030 --> 39:03.510
你看一下这个视频是不是搞定了

39:03.510 --> 39:04.430
我告诉大家

39:04.430 --> 39:05.630
在百度里面

39:05.630 --> 39:07.270
你很少能看到这些东西

39:07.270 --> 39:09.590
基本上是看不到的

39:09.590 --> 39:11.830
可能你如果你英文很好的话

39:11.830 --> 39:12.790
你可以去谷歌里面

39:12.790 --> 39:13.710
收有很多资料

39:13.710 --> 39:16.110
但是百度我这样给大家说吧

39:16.110 --> 39:16.830
真爱生命

39:18.030 --> 39:18.510
对

39:18.510 --> 39:20.470
这个直播里面好像不太合适说这些内容

39:20.470 --> 39:21.070
对吧

39:21.070 --> 39:21.950
不太合适说这些

39:21.950 --> 39:22.870
行了

39:22.870 --> 39:25.150
如果以后遇到这个问题

39:25.150 --> 39:26.270
遇到这些问题

39:26.270 --> 39:29.550
你就到这个视频里面来看一看

39:29.550 --> 39:31.350
就可以搞定了

39:31.350 --> 39:31.830
好了

39:31.830 --> 39:34.510
那么咱们这一刻就到这结束了

39:34.510 --> 39:36.230
我们这一刻搞定了Ridax

39:36.230 --> 39:37.510
但是现在我们还有一个问题

39:37.510 --> 39:38.750
就是Ridax

39:38.750 --> 39:41.270
它没有跟我们的组建来联用

39:41.270 --> 39:43.630
还没有伸出到我们组建里边去

39:43.630 --> 39:44.790
不着急

39:44.790 --> 39:47.870
我们先开发好Ridax的数据系统

39:47.910 --> 39:49.150
我们先开发好之后

39:49.150 --> 39:50.790
先扔这儿放这儿

39:50.790 --> 39:53.790
我们将来要用的时候再拿出来用

39:53.790 --> 39:54.310
好吧

39:54.310 --> 39:54.550
好

39:54.550 --> 39:56.430
我们这一刻就到这里了

39:56.430 --> 39:56.830
拜拜

