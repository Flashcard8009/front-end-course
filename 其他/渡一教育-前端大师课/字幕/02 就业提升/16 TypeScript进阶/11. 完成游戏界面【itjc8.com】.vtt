WEBVTT

00:01.200 --> 00:04.600
好了 终于我们到了最后一节课了

00:04.600 --> 00:07.600
就是这个项目的最后一节课

00:07.600 --> 00:10.800
这节课我们要把整个游戏就完成

00:10.800 --> 00:13.000
其实这节课就没有什么难度了

00:13.000 --> 00:14.800
如果你前边搞清楚的话

00:14.800 --> 00:17.800
那么这节课是真的一点难度没有了

00:17.800 --> 00:21.000
就是修修改改可能有些bug我们要调一下

00:21.000 --> 00:25.400
那么这节课我们要做的事情就是完成游戏界面

00:25.400 --> 00:27.400
完成游戏界面

00:27.400 --> 00:29.800
也就是说现在的其实功能已经做完了

00:29.800 --> 00:31.800
就差游戏界面

00:31.800 --> 00:33.600
好 完成游戏界面

00:33.600 --> 00:36.600
其实我们之前也做了这么一种模式了

00:36.600 --> 00:38.600
就是写了这么一个接口

00:38.600 --> 00:42.100
game512在不同的游戏阶段

00:42.100 --> 00:45.100
在不同的游戏阶段要处理的一些事情

00:45.100 --> 00:46.600
有这么一个接口

00:46.600 --> 00:51.600
然后这个接口里边提供了两个方法

00:51.600 --> 00:55.600
一个是在创建了下一个方块的时候

00:55.600 --> 00:57.600
那么要调整的函数

00:58.600 --> 01:01.600
就是把下一个方块作为当前方块

01:01.600 --> 01:04.600
来进行切换的时候有这么一个函数要调用

01:04.600 --> 01:06.600
我们之前写了这么两个函数

01:06.600 --> 01:09.600
无非我们这节课就是给这里多加一些函数

01:09.600 --> 01:11.600
相当于是

01:11.600 --> 01:14.600
你可以把这个game看成是一个组件

01:14.600 --> 01:17.600
它有各种各样的事件需要你去处理

01:17.600 --> 01:20.600
那么这里我就可以去多写一些函数

01:20.600 --> 01:23.600
比方说写这么一个函数init

01:23.600 --> 01:25.600
这个函数就是初始化

01:25.600 --> 01:32.600
完成界面的初始化

01:32.600 --> 01:36.600
而初始化的过程中可能需要一个游戏对象

01:36.600 --> 01:39.600
游戏对象里边比方说有游戏的状态

01:39.600 --> 01:42.600
有游戏的一些相应的方法

01:42.600 --> 01:44.600
它可能会需要这么一个游戏对象

01:44.600 --> 01:45.600
那么没关系

01:45.600 --> 01:47.600
我就把这个游戏对象传给你游戏

01:50.600 --> 01:52.600
这个游戏对象传给你

01:52.600 --> 01:54.600
有这么一个方法

01:54.600 --> 01:55.600
先写到这儿

01:55.600 --> 01:57.600
我们一会儿再想到再写吧

01:57.600 --> 01:58.600
我们先写这么一个方法

01:58.600 --> 02:00.600
好这个方法什么时候调用呢

02:00.600 --> 02:02.600
我们到游戏内里边去

02:02.600 --> 02:04.600
游戏内里边不是要给我传一个512对吧

02:04.600 --> 02:07.600
在构造函数里面给我传了个512进来

02:07.600 --> 02:10.600
那么什么时候完成界面的初始化

02:10.600 --> 02:12.600
是不是创建游戏的时候

02:12.600 --> 02:14.600
刚刚好创建游戏制的时候

02:14.600 --> 02:17.600
就应该完成游戏的初始化了

02:17.600 --> 02:19.600
所以说这个位置呢

02:19.600 --> 02:23.600
我们就可以直接调用512的

02:24.600 --> 02:26.600
512的init

02:26.600 --> 02:28.600
它要传一个游戏对象

02:28.600 --> 02:30.600
我在哪里去获取一个游戏对象

02:30.600 --> 02:32.600
跑到哪里去获取一个游戏对象

02:32.600 --> 02:34.600
是不是就是把当前那个游戏对象给它

02:34.600 --> 02:36.600
当前这个不就是游戏对象的

02:36.600 --> 02:38.600
我们现在在游戏内里边

02:38.600 --> 02:40.600
z就表示的是游戏对象

02:40.600 --> 02:42.600
我就把我这个游戏对象给你

02:42.600 --> 02:43.600
那你去完成初始化吧

02:43.600 --> 02:44.600
我不管了

02:45.600 --> 02:48.600
好那么初始化的时候要做哪些事呢

02:48.600 --> 02:50.600
有什么事情要做呢

02:50.600 --> 02:53.600
我们到这个内里面了

02:53.600 --> 02:54.600
这个内不是之前

02:54.600 --> 02:57.600
就是实现游戏的显示的吗对吧

02:57.600 --> 02:58.600
好那么这个内里面

02:58.600 --> 03:00.600
我们就可以去做各种各样

03:00.600 --> 03:02.600
跟显示相关的事

03:02.600 --> 03:03.600
它要做的事情

03:03.600 --> 03:05.600
无非就是去实现这个接口

03:05.600 --> 03:06.600
现在这个接口编了

03:06.600 --> 03:08.600
它需要多了一个方法对吧

03:08.600 --> 03:09.600
多了一个方法

03:09.600 --> 03:10.600
OK那么这个方法

03:10.600 --> 03:11.600
我把实现

03:11.600 --> 03:12.600
实现

03:12.600 --> 03:13.600
这里呢

03:13.600 --> 03:14.600
它用这种模式来导入

03:14.600 --> 03:15.600
我觉得没必要

03:15.600 --> 03:16.600
没必要

03:16.600 --> 03:18.600
直接在这里

03:18.600 --> 03:19.600
在这里

03:20.600 --> 03:21.600
或者你不写这个

03:21.600 --> 03:22.600
不写这个

03:22.600 --> 03:23.600
它也能推断出来

03:23.600 --> 03:24.600
它不行

03:24.600 --> 03:25.600
它不能推断出来

03:25.600 --> 03:27.600
必须要写

03:27.600 --> 03:28.600
好那么没事

03:28.600 --> 03:30.600
我们就写这么一个函数

03:30.600 --> 03:32.600
写这么一个函数就完成初始化

03:32.600 --> 03:35.600
初始化的时候要做哪些事呢

03:35.600 --> 03:36.600
要做哪些事

03:36.600 --> 03:39.600
其实整个初始化的过程

03:39.600 --> 03:40.600
涉及到很多很多的事情

03:40.600 --> 03:43.600
第一件事情就是设置宽高

03:43.600 --> 03:46.600
设置一些区域的宽高

03:46.600 --> 03:48.600
设置哪些区域的宽高呢

03:48.600 --> 03:49.600
你看这里

03:49.600 --> 03:51.600
我们有这个主面版区域

03:51.600 --> 03:52.600
有这个next

03:52.600 --> 03:54.600
就是下一个

03:54.600 --> 03:56.600
就是显示了方块的区域

03:56.600 --> 03:58.600
好那么这里的宽高呢

03:58.600 --> 03:59.600
其实我们是之前是配置过的

03:59.600 --> 04:01.600
在哪里配置的呢

04:01.600 --> 04:02.600
在这个gameconfig

04:02.600 --> 04:04.600
这里面进行配置的对吧

04:04.600 --> 04:05.600
那么现在我们把它改一下

04:05.600 --> 04:09.600
比方说这里宽度为16

04:09.600 --> 04:11.600
高度为20

04:11.600 --> 04:12.600
这个next size

04:12.600 --> 04:14.600
6和6吧

04:14.600 --> 04:15.600
6x6

04:15.600 --> 04:17.600
我们要根据这里的配置

04:17.600 --> 04:20.600
来去设置这两个区域的宽高

04:20.600 --> 04:21.600
那之前呢

04:21.600 --> 04:23.600
我们是直接写死的对吧

04:23.600 --> 04:24.600
现在我肯定不写死了

04:24.600 --> 04:27.600
我用代码的方式来进行设置

04:27.600 --> 04:28.600
怎么设置呢

04:28.600 --> 04:30.600
其实无非就是获取这两个元素

04:30.600 --> 04:31.600
对吧

04:31.600 --> 04:32.600
而这两个元素呢

04:32.600 --> 04:34.600
经常要用到就是游戏面板

04:34.600 --> 04:37.600
那个元素和游戏下一个方块

04:37.600 --> 04:39.600
那个区域的元素

04:39.600 --> 04:40.600
要经常用到

04:40.600 --> 04:42.600
因此呢我可以把它做成一个属性

04:42.600 --> 04:44.600
这些事情就非常轻松了

04:44.600 --> 04:46.600
一个是next

04:46.600 --> 04:47.600
来自于哪呢

04:47.600 --> 04:49.600
来自于dolar

04:49.600 --> 04:50.600
next

04:50.600 --> 04:52.600
然后还有一个就是panel

04:52.600 --> 04:54.600
游戏面板那个动物

04:54.600 --> 04:57.600
来自于panel

04:57.600 --> 04:59.600
先把它做成两个属性

04:59.600 --> 05:01.600
那之前这些东西就可以改一下了

05:01.600 --> 05:04.600
改成resnext动

05:04.600 --> 05:06.600
这个地方改一下

05:06.600 --> 05:09.600
改成respanel动

05:09.600 --> 05:10.600
好

05:10.600 --> 05:11.600
设置宽高的时候

05:11.600 --> 05:14.600
无非就是设置两个动物对象的宽高

05:14.600 --> 05:15.600
来吧

05:15.600 --> 05:17.600
一个是panel动

05:17.600 --> 05:19.600
设置它的css

05:19.600 --> 05:21.600
里面一个宽度

05:21.600 --> 05:22.600
宽度

05:22.600 --> 05:25.600
宽度的话怎么设置

05:25.600 --> 05:27.600
来自于游戏的配置

05:27.600 --> 05:28.600
gameconfig

05:28.600 --> 05:30.600
就来自于这个类的配置

05:30.600 --> 05:32.600
我们要动它的设置

05:32.600 --> 05:33.600
这个配置的话

05:33.600 --> 05:36.600
里面有一个panel size宽度

05:36.600 --> 05:38.600
但是大家注意

05:38.600 --> 05:41.600
这个宽度是指的是逻辑宽度

05:41.600 --> 05:43.600
逻辑宽度

05:43.600 --> 05:44.600
就是说这个是表示

05:44.600 --> 05:46.600
一行有多少个格子

05:46.600 --> 05:47.600
它不表示的咋了

05:47.600 --> 05:50.600
不表示说我这一行必须是

05:50.600 --> 05:51.600
多少相处

05:51.600 --> 05:53.600
它指的是格式的宽度

05:53.600 --> 05:55.600
因此你不能光把这个东西拿出来

05:55.600 --> 05:57.600
你还要参照啥呢

05:57.600 --> 05:59.600
还要参照这边

05:59.600 --> 06:01.600
这边有个配置配几config

06:01.600 --> 06:02.600
还记得吗

06:02.600 --> 06:03.600
当时我们配置的是

06:03.600 --> 06:06.600
每一个在显示的时候

06:06.600 --> 06:08.600
每一个格子的相处宽度

06:08.600 --> 06:10.600
和相处高度

06:10.600 --> 06:12.600
为什么要用这样的方式呢

06:12.600 --> 06:15.600
但这两个文件都是分开的

06:15.600 --> 06:18.600
因为一个是跟数据相关的配置

06:18.600 --> 06:20.600
一个是跟显示相关的配置

06:20.600 --> 06:21.600
是两罢算

06:21.600 --> 06:23.600
这里配置的是相处值

06:23.600 --> 06:24.600
因此这里做法很简单

06:24.600 --> 06:25.600
就是这个地方

06:25.600 --> 06:27.600
乘以

06:27.600 --> 06:31.600
pgconfig.square size width

06:31.600 --> 06:33.600
宽度写出来了

06:33.600 --> 06:35.600
然后高度也一样的

06:35.600 --> 06:39.230
复制一下

06:40.230 --> 06:42.230
太子

06:42.230 --> 06:43.230
太子

06:43.230 --> 06:44.230
高度设置好了

06:44.230 --> 06:46.230
宽高度设置好了

06:46.230 --> 06:47.230
继续

06:47.230 --> 06:50.230
下一个是next.css

06:50.230 --> 06:52.230
一样的

06:52.230 --> 06:53.230
没有什么区别

06:53.230 --> 06:55.230
复制一下

06:55.230 --> 06:58.230
这里的panel size

06:58.230 --> 07:00.230
改成next.size

07:00.230 --> 07:01.230
这个panel size

07:01.230 --> 07:02.230
改一下

07:02.230 --> 07:03.230
就没了

07:03.230 --> 07:04.230
对吧

07:04.230 --> 07:05.230
还有啥呢

07:05.230 --> 07:06.230
没了

07:06.230 --> 07:07.230
保存一下

07:08.230 --> 07:09.230
这个宽高

07:09.230 --> 07:10.230
还行吧

07:10.230 --> 07:11.230
还可以

07:11.230 --> 07:13.230
这个宽高设置好了

07:13.230 --> 07:14.230
设置好了

07:14.230 --> 07:15.230
宽高之后

07:15.230 --> 07:16.230
我们还有哪些事情

07:16.230 --> 07:17.230
要出使的话呢

07:17.230 --> 07:18.230
第二步

07:18.230 --> 07:19.230
还要做什么呢

07:19.230 --> 07:20.230
还有事件

07:20.230 --> 07:21.230
对吧

07:21.230 --> 07:22.230
註册键盘事件

07:22.230 --> 07:24.230
註册键盘事件

07:24.230 --> 07:26.230
那么键盘什么事件呢

07:26.230 --> 07:28.230
就是keydown事件

07:28.230 --> 07:30.230
我们直接给整个document

07:30.230 --> 07:31.230
整个页面

07:31.230 --> 07:32.230
去註册键盘事件

07:32.230 --> 07:33.230
keydown

07:33.230 --> 07:34.230
你看这些事情

07:34.230 --> 07:35.230
都是分开做的

07:35.230 --> 07:36.230
跟数据无关

07:36.230 --> 07:37.230
专门放到一个内在处理

07:37.230 --> 07:38.230
以后我们把它

07:38.230 --> 07:39.230
界面要变

07:39.230 --> 07:40.230
只需要变这个文件

07:40.230 --> 07:41.230
就行了

07:41.230 --> 07:42.230
其他东西不动

07:42.230 --> 07:43.230
一样的做法

07:43.230 --> 07:45.230
好当键盘按一下的时候

07:45.230 --> 07:47.230
我们注册一个函数

07:47.230 --> 07:49.230
这个事件参数里边

07:49.230 --> 07:51.230
不是有一个东西叫做

07:51.230 --> 07:53.230
什么叫做keycode

07:53.230 --> 07:54.230
对吧

07:54.230 --> 07:55.230
叫这么个玩意

07:55.230 --> 07:56.230
保存一下

07:56.230 --> 07:57.230
试一下

07:57.230 --> 07:58.230
我们按一下键盘

07:58.230 --> 07:59.230
A

07:59.230 --> 08:00.230
B

08:00.230 --> 08:01.230
CD

08:01.230 --> 08:02.230
你看

08:02.230 --> 08:03.230
这边有数字出来了

08:03.230 --> 08:05.230
按一下光标

08:05.230 --> 08:06.230
因为我们玩

08:06.230 --> 08:07.230
玩都是方块的话

08:07.230 --> 08:08.230
一般用光标的控制

08:08.230 --> 08:09.230
按一下上

08:09.230 --> 08:10.230
三十八

08:10.230 --> 08:11.230
左

08:11.230 --> 08:12.230
三十七

08:12.230 --> 08:13.230
右

08:13.230 --> 08:14.230
三十九

08:14.230 --> 08:15.230
下

08:15.230 --> 08:16.230
四十

08:16.230 --> 08:17.230
一就是什么

08:17.230 --> 08:18.230
左

08:18.230 --> 08:19.230
上

08:19.230 --> 08:20.230
右

08:20.230 --> 08:21.230
下

08:21.230 --> 08:22.230
是三十八

08:22.230 --> 08:23.230
到四十

08:23.230 --> 08:24.230
对吧

08:24.230 --> 08:25.230
左

08:25.230 --> 08:26.230
上

08:26.230 --> 08:27.230
右

08:27.230 --> 08:28.230
下

08:28.230 --> 08:29.230
OK

08:29.230 --> 08:30.230
再控制一下

08:30.230 --> 08:31.230
键盘事件

08:31.230 --> 08:32.230
那么我们这里判断一下

08:32.230 --> 08:33.230
如果

08:33.230 --> 08:34.230
keycode

08:34.230 --> 08:35.230
按左的时候

08:35.230 --> 08:36.230
怎么办

08:36.230 --> 08:37.230
你看这game对象

08:37.230 --> 08:38.230
是不是要用到了

08:38.230 --> 08:39.230
如果离一开始

08:39.230 --> 08:40.230
没有做这个函数的时候

08:40.230 --> 08:41.230
想不到

08:41.230 --> 08:42.230
需要这个game对象

08:42.230 --> 08:43.230
那么

08:43.230 --> 08:44.230
你做着做着

08:44.230 --> 08:45.230
就发现

08:45.230 --> 08:46.230
我要用这个game对象了

08:46.230 --> 08:48.230
因为当我按键盘

08:48.230 --> 08:49.230
按左的时候

08:49.230 --> 08:51.230
是不是要控制game对象里边的

08:51.230 --> 08:52.230
调为它的函数

08:52.230 --> 08:53.230
control left

08:53.230 --> 08:54.230
对不对

08:54.230 --> 08:55.230
调为这个函数

08:55.230 --> 08:56.230
好

08:56.230 --> 08:57.230
lc

08:57.230 --> 08:59.230
如果e的keycode

08:59.230 --> 09:00.230
等于三十八

09:00.230 --> 09:01.230
那就按了上

09:01.230 --> 09:03.230
按了上的话要做什么

09:03.230 --> 09:06.230
是不是control rotate

09:06.230 --> 09:07.230
旋转

09:07.230 --> 09:08.230
lc

09:08.230 --> 09:10.230
按了keycode

09:10.230 --> 09:11.230
哪个键

09:11.230 --> 09:12.230
比方说

09:12.230 --> 09:14.230
三十九

09:14.230 --> 09:16.230
按了三十九

09:16.230 --> 09:17.230
那么这个时候

09:18.230 --> 09:19.230
做什么呢

09:19.230 --> 09:20.230
game

09:20.230 --> 09:21.230
三十九是右

09:21.230 --> 09:22.230
right

09:22.230 --> 09:24.230
control right

09:24.230 --> 09:25.230
然后

09:25.230 --> 09:26.230
如果是按的下的话

09:26.230 --> 09:27.230
lc

09:27.230 --> 09:28.230
keycode

09:28.230 --> 09:30.230
如果是按的下的话

09:30.230 --> 09:31.230
事实

09:32.230 --> 09:33.230
如果是按的下

09:33.230 --> 09:34.230
那么这个时候

09:34.230 --> 09:35.230
我们使用

09:36.230 --> 09:37.230
什么

09:37.230 --> 09:39.230
control down

09:39.230 --> 09:40.230
control down

09:40.230 --> 09:42.230
这注册键盘事件

09:42.230 --> 09:43.230
那咱们来试一下

09:43.230 --> 09:45.230
激动人心的时候来了

09:45.230 --> 09:46.230
终于可以用键盘控制了

09:46.230 --> 09:47.230
来 开始

09:48.230 --> 09:50.230
我就现在用键盘控制了

09:52.230 --> 09:54.230
这舒服多了对吧

09:54.230 --> 09:55.230
舒服太多了

09:55.230 --> 09:57.230
好像我设置得太宽了

09:58.230 --> 09:59.230
没关系

09:59.230 --> 10:00.230
没关系

10:00.230 --> 10:01.230
我们这里稍微改一下

10:01.230 --> 10:02.230
它就没有那么宽了

10:02.230 --> 10:03.230
稍微改一下吧

10:04.230 --> 10:05.230
这里改成

10:06.230 --> 10:07.230
12吧

10:07.230 --> 10:08.230
改成12

10:08.230 --> 10:09.230
改成12好

10:09.230 --> 10:10.230
开始

10:11.230 --> 10:12.230
来了

10:13.230 --> 10:14.230
稍微的玩一下

10:15.230 --> 10:16.230
销益行

10:16.230 --> 10:17.230
顺便测试一下

10:17.230 --> 10:18.230
有没有什么问题

10:20.230 --> 10:22.740
这边

10:25.620 --> 10:26.620
没什么问题

10:26.620 --> 10:27.620
目前没发现什么问题

10:27.620 --> 10:28.620
好了

10:28.620 --> 10:30.620
目前我们键盘控制就搞定了

10:30.620 --> 10:31.620
键盘控制搞定

10:32.620 --> 10:33.620
然后还有什么事呢

10:34.620 --> 10:35.620
还有什么事呢

10:35.620 --> 10:36.620
还要显示分数

10:36.620 --> 10:37.620
对不对

10:37.620 --> 10:38.620
还要显示分数

10:39.620 --> 10:41.620
显示分数的话

10:41.620 --> 10:43.620
显示分数的话

10:43.620 --> 10:44.620
我看那个是面板

10:44.620 --> 10:46.620
我觉得还是有点小

10:46.620 --> 10:47.620
把它设为

10:48.620 --> 10:49.620
或者先不动

10:49.620 --> 10:50.620
先不动

10:50.620 --> 10:51.620
我在这里面去设置一下

10:51.620 --> 10:52.620
那个是什么

10:52.620 --> 10:53.620
设置一下tip

10:53.620 --> 10:54.620
这个di位

10:54.620 --> 10:55.620
设置一下这个tip

10:55.620 --> 10:56.620
这个di位

10:56.620 --> 10:58.620
然后让它margin left

10:58.620 --> 10:59.620
打margin left

11:00.620 --> 11:01.620
eam

11:01.620 --> 11:02.620
稍微靠右一点

11:02.620 --> 11:03.620
稍微靠右一点

11:04.620 --> 11:05.620
OK

11:05.620 --> 11:06.620
那差不多了

11:06.620 --> 11:07.620
再设置一个border

11:07.620 --> 11:08.620
看一下

11:08.620 --> 11:09.620
看一下它的范围

11:09.620 --> 11:10.620
就这个di位

11:10.620 --> 11:11.620
就这个di位

11:12.620 --> 11:13.620
在这

11:13.620 --> 11:14.620
OK

11:14.620 --> 11:15.620
我们先写到这吧

11:15.620 --> 11:16.620
先写到这

11:16.620 --> 11:17.620
然后

11:17.620 --> 11:19.620
下面我还要显示分数

11:19.620 --> 11:21.620
还要显示一个分数

11:21.620 --> 11:22.620
就这里

11:22.620 --> 11:23.620
那个时候下面

11:23.620 --> 11:24.620
我还要写个di位

11:24.620 --> 11:25.620
还显示分数

11:25.620 --> 11:26.620
score

11:26.620 --> 11:27.620
显示分数

11:27.620 --> 11:28.620
分数就显示到这里面

11:28.620 --> 11:29.620
好

11:29.620 --> 11:30.620
显示分数的话

11:30.620 --> 11:32.620
那么又设计到一个问题了

11:32.620 --> 11:34.620
我什么时候显示分数

11:36.620 --> 11:38.620
什么时候显示分数

11:39.620 --> 11:41.620
应该是由谁决定的呢

11:41.620 --> 11:42.620
是不是应该是由game

11:42.620 --> 11:43.620
这个

11:43.620 --> 11:44.620
他在决定的

11:44.620 --> 11:45.620
他分数变化过后

11:45.620 --> 11:46.620
是不是要重新显示分数

11:47.620 --> 11:48.620
对不对

11:48.620 --> 11:49.620
分数发生变化之后

11:49.620 --> 11:51.620
就要重新显示分数

11:51.620 --> 11:52.620
那么也就是说

11:54.620 --> 11:55.620
就是老办法又来了

11:55.620 --> 11:56.620
对吧

11:56.620 --> 11:57.620
score

11:57.620 --> 11:58.620
score

11:59.620 --> 12:01.620
在接口里边写这么一个函数

12:01.620 --> 12:02.620
写这么一个方法

12:02.620 --> 12:03.620
让你去实现

12:03.620 --> 12:05.620
我会把这个分数给力

12:05.620 --> 12:07.620
我会给力这个分数

12:07.620 --> 12:08.620
然后

12:08.620 --> 12:09.620
他是个number

12:09.620 --> 12:10.620
然后你去显示吧

12:10.620 --> 12:11.620
我不管了

12:11.620 --> 12:12.620
你去显示就完事了

12:13.620 --> 12:14.620
好

12:14.620 --> 12:15.620
那么这个score

12:15.620 --> 12:16.620
什么时候调用呢

12:16.620 --> 12:17.620
是在game里边

12:17.620 --> 12:19.620
当分数变化的时候

12:19.620 --> 12:21.620
进行调用

12:21.620 --> 12:22.620
分数变化

12:22.620 --> 12:23.620
你看这里不是在变化吗

12:23.620 --> 12:24.620
对不对

12:24.620 --> 12:26.620
这里变化完了分数之后

12:26.620 --> 12:28.620
我们去调用这个函数

12:32.620 --> 12:34.620
我把当前的分数给力

12:34.620 --> 12:35.620
你去把显示出来

12:36.620 --> 12:37.620
这是这个地方

12:37.620 --> 12:39.620
要显示分数

12:39.620 --> 12:40.620
还有什么呢

12:40.620 --> 12:42.620
还有就是游戏初始化

12:42.620 --> 12:44.620
重新开始的时候

12:44.620 --> 12:45.620
分数要归零

12:45.620 --> 12:46.620
对吧

12:46.620 --> 12:47.620
分数要归零

12:47.620 --> 12:48.620
那么这个时候

12:48.620 --> 12:49.620
也要显示分数

12:49.620 --> 12:50.620
总之分数变化的时候

12:50.620 --> 12:51.620
都要显示分数

12:51.620 --> 12:53.620
总之分数发生变化

12:53.620 --> 12:54.620
都要显示分数

12:54.620 --> 12:55.620
或者说

12:55.620 --> 12:56.620
很多办法可以处理

12:56.620 --> 12:57.620
比方说

12:57.620 --> 12:58.620
我们用访问器

12:58.620 --> 12:59.620
也可以处理

12:59.620 --> 13:00.620
我刚才的地方删了

13:00.620 --> 13:02.620
刚才这个地方删掉

13:02.620 --> 13:04.620
然后在访问器里面进行处理

13:04.620 --> 13:05.620
就像我们之前

13:05.620 --> 13:06.620
这个小方块的样子

13:06.620 --> 13:08.620
在访问器里面处理

13:08.620 --> 13:09.620
然后这里

13:09.620 --> 13:11.620
我们设置一个访问器

13:11.620 --> 13:13.620
public

13:13.620 --> 13:14.620
gate

13:14.620 --> 13:15.620
score

13:15.620 --> 13:17.620
gatescore

13:17.620 --> 13:18.620
return

13:18.620 --> 13:20.620
zscore

13:20.620 --> 13:21.620
然后public

13:21.620 --> 13:23.620
setscore

13:23.620 --> 13:25.620
也给我设置一个值的时候

13:25.620 --> 13:27.620
给我设置一个值的时候

13:27.620 --> 13:28.620
那么我这里

13:28.620 --> 13:30.620
除了我要把这个分数

13:30.620 --> 13:31.620
这个值设置完成

13:31.620 --> 13:33.620
我还要去调用一下

13:33.620 --> 13:34.620
512

13:34.620 --> 13:36.620
setscore

13:36.620 --> 13:37.620
你凡是设置的分数

13:37.620 --> 13:39.620
我都要去控制一下

13:39.620 --> 13:40.620
都去控制一下

13:40.620 --> 13:42.620
把这个分数给你

13:42.620 --> 13:43.620
我们通过访问器

13:43.620 --> 13:44.620
也可以搞定

13:44.620 --> 13:45.620
那么后边

13:45.620 --> 13:47.620
我们在设置分数的时候

13:47.620 --> 13:48.620
都使用访问器的方式了

13:48.620 --> 13:49.620
比方说这里

13:49.620 --> 13:51.620
这个其实也可以把它

13:51.620 --> 13:53.620
视为private

13:53.620 --> 13:54.620
也可以把它视为视为视为

13:54.620 --> 13:55.620
也可以视为公有的

13:55.620 --> 13:56.620
其实无所谓的

13:56.620 --> 13:57.620
其实无所谓的

13:57.620 --> 13:58.620
那么这里

13:58.620 --> 13:59.620
我们看一下

13:59.620 --> 14:01.620
哪些地方设置的分数

14:01.620 --> 14:02.620
setscore

14:02.620 --> 14:03.620
我们这里

14:03.620 --> 14:04.620
我找一找

14:04.620 --> 14:05.620
这个地方

14:05.620 --> 14:07.620
我们就可以把个下环线去掉

14:07.620 --> 14:09.620
让它用访问器的方式

14:09.620 --> 14:10.620
来给它设置值

14:10.620 --> 14:11.620
我们再来

14:11.620 --> 14:12.620
这里

14:12.620 --> 14:14.620
这里也是一样

14:20.070 --> 14:22.070
把这个变成setscore

14:22.070 --> 14:24.070
把这些地方变成setscore

14:24.070 --> 14:25.070
这样子

14:25.070 --> 14:27.070
你只要给它一个设置值

14:27.070 --> 14:28.070
它就相当于是

14:28.070 --> 14:30.070
运行了相应的函数

14:30.070 --> 14:32.070
就相当于是运行的函数

14:32.070 --> 14:33.070
你给它设置值

14:33.070 --> 14:35.070
就相当于是运行的函数

14:35.070 --> 14:36.070
好,那么这边

14:36.070 --> 14:37.070
又回到这边来

14:37.070 --> 14:39.070
这边又要实现函数了

14:39.070 --> 14:40.070
对不对

14:40.070 --> 14:41.070
又要实现函数了

14:41.070 --> 14:42.070
ok,那么又

14:42.070 --> 14:44.070
再加一个dome元素

14:44.070 --> 14:46.070
就是scoredome

14:48.070 --> 14:50.070
就是panel

14:50.070 --> 14:52.070
不是,scoredome

14:53.070 --> 14:54.070
好,那么这里

14:54.070 --> 14:55.070
修score

14:55.070 --> 14:56.070
做什么呢?

14:56.070 --> 14:57.070
非常简单

14:57.070 --> 14:59.070
就是setscoredome

14:59.070 --> 15:00.070
然后atmail

15:00.070 --> 15:02.070
设置分数为score

15:02.070 --> 15:03.070
完事了

15:03.070 --> 15:04.070
完事了

15:04.070 --> 15:07.070
然后tostream

15:07.070 --> 15:08.070
把它转换成支付串

15:08.070 --> 15:10.070
因为它需要一个支付串

15:10.070 --> 15:12.070
好了,那么有了这个函数过后

15:12.070 --> 15:13.070
我们再看一下

15:13.070 --> 15:14.070
再看一下

15:15.070 --> 15:16.070
开始

15:18.700 --> 15:19.700
这里

15:20.700 --> 15:21.700
先消一行

15:21.700 --> 15:22.700
先消一行

15:25.140 --> 15:26.140
好,你看

15:26.140 --> 15:27.140
这个分数是不是出来了

15:27.140 --> 15:28.140
10

15:28.140 --> 15:29.140
这个分数

15:29.140 --> 15:30.140
但是你会发现

15:30.140 --> 15:32.140
这个分数只有消了之后

15:32.140 --> 15:33.140
才会出来

15:33.140 --> 15:34.140
一开始不会出来

15:34.140 --> 15:35.140
那是因为它一开始

15:35.140 --> 15:36.140
没有调用这个函数

15:36.140 --> 15:38.140
它并没有调用这个函数

15:38.140 --> 15:39.140
那简单

15:39.140 --> 15:41.140
我在gaming的构造函数里面去

15:41.140 --> 15:42.140
然后调用

15:42.140 --> 15:44.140
v2的

15:44.140 --> 15:46.140
score

15:46.140 --> 15:48.140
把分数给你

15:48.140 --> 15:49.140
把分数给你

15:49.140 --> 15:50.140
你去调用一次

