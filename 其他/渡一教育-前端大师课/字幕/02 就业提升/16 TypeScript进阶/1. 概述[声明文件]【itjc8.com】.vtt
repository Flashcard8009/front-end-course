WEBVTT

00:00.620 --> 00:03.440
大家好 我是杜亦教育 为保抢张奖师 元静

00:03.700 --> 00:06.520
这一刻我们来看一下TS里边的

00:07.020 --> 00:07.780
声明文件

00:08.820 --> 00:14.180
好 关于声明文件 我们做一个章节 我们分为这么三个部分来讲

00:14.440 --> 00:15.980
一个部分是概述

00:17.000 --> 00:17.780
概述

00:18.040 --> 00:22.120
就简单的了解一下 什么叫声明文件 它有什么样的作用

00:22.640 --> 00:26.480
然后呢 第二个部分呢 我们讲一讲声明文件的编写

00:26.980 --> 00:28.020
编写

00:28.420 --> 00:31.860
如何来手动了去编写一些声明文件

00:32.880 --> 00:35.700
然后最后的部分呢 我们来了解声明文件的发布

00:36.980 --> 00:39.020
就是咱们如何把这个声明文件发布出去

00:39.540 --> 00:41.580
好 我们分为这么三个部分啊

00:42.100 --> 00:45.420
首先我们第一节课啊 了解一下关于概述

00:45.940 --> 00:48.240
就是声明文件 它到底是一个什么东西

00:48.760 --> 00:49.780
好 第一个问题

00:50.800 --> 00:52.080
什么是声明文件

00:52.860 --> 00:54.900
什么是声明文件

00:55.120 --> 00:59.200
它肯定是一个文件 对吧 都说了是一个文件了 肯定是一个文件

00:59.720 --> 01:02.020
什么是声明文件呢 非常非常简单

01:02.280 --> 01:03.300
在TS中

01:03.560 --> 01:05.080
后罪名

01:05.340 --> 01:06.120
那就是

01:06.380 --> 01:06.880
以

01:07.660 --> 01:08.420
这个后罪名

01:08.680 --> 01:09.180
点

01:09.440 --> 01:10.980
D点TS

01:11.500 --> 01:13.020
结尾的文件

01:13.280 --> 01:14.300
就是声明文件

01:14.560 --> 01:16.100
比方说我们在工程里边

01:16.360 --> 01:17.640
随便找个位置

01:17.900 --> 01:19.680
就在src这个目录下边吧

01:19.940 --> 01:20.960
随便找一个位置啊

01:21.220 --> 01:22.240
新建一个文件

01:22.500 --> 01:23.260
随便写啊

01:23.460 --> 01:24.500
就Test

01:24.760 --> 01:25.260
点

01:26.020 --> 01:27.300
D点TS

01:27.820 --> 01:29.100
这就是一个声明文件

01:29.360 --> 01:30.640
非常非常简单啊

01:31.400 --> 01:33.960
好 然后这是第一个问题啊 什么是声明文件

01:34.480 --> 01:38.320
第二个问题呢 是声明文件啊

01:38.580 --> 01:39.740
声明文件

01:40.000 --> 01:41.400
有什么作用

01:42.160 --> 01:43.440
它来干嘛的

01:43.960 --> 01:46.520
这里呢 就要稍微多说一点了啊

01:46.780 --> 01:49.580
就是有的时候呢 我们写的代码啊

01:49.840 --> 01:51.880
不一定是用TS写的

01:52.380 --> 01:54.140
不一定是用TS写的

01:54.400 --> 01:56.940
有可能呢 是之前已经写好的代码

01:57.200 --> 01:58.240
是用GS写的

01:58.740 --> 02:00.780
那么这种代码呢 如何

02:01.040 --> 02:05.140
跟TS代码进行结合呢 就会遇到一些问题

02:05.900 --> 02:08.980
因为TS代码去用这些GS的

02:09.240 --> 02:10.260
代码的时候呢

02:10.520 --> 02:13.720
TS代码里边是没有类型约束的 对吧

02:13.980 --> 02:15.380
是没有类型约束的

02:15.640 --> 02:17.940
那么TS代码啊

02:18.200 --> 02:18.980
这不有点热啊

02:19.480 --> 02:20.500
那么TS代码

02:20.700 --> 02:22.500
他读GS代码的时候啊

02:22.760 --> 02:25.320
就是TS代码去读GS代码的时候

02:25.840 --> 02:27.880
少了一个东西啊 得不到

02:28.380 --> 02:29.160
得不到

02:29.660 --> 02:30.440
类型

02:31.200 --> 02:33.000
得不到类型声明

02:33.500 --> 02:34.280
他不知道

02:34.540 --> 02:36.080
这些里边有哪些类型

02:36.340 --> 02:38.360
就是GS代码里边有哪些类型他不知道

02:38.880 --> 02:41.440
那么就涉及到一个问题啊 我们如何

02:41.960 --> 02:43.480
把一个GS代码

02:43.740 --> 02:47.320
他的类型啊 各种函数啊 参数啊 变量啊

02:47.580 --> 02:50.400
把这些类型呢 告诉这个TS代码

02:50.700 --> 02:51.740
就涉及到这么一个问题

02:52.000 --> 02:54.960
那么这个时候怎么做呢 就可以使用声明文件

02:55.220 --> 02:58.140
声明一下GS代码里边的类型

02:58.640 --> 03:01.200
我们不去改动这个代码 代码不动

03:01.460 --> 03:05.040
我们只是给他新加一个文件 新加一个文件

03:05.300 --> 03:07.280
来告诉使用者

03:07.540 --> 03:09.400
他里边的类型到底是什么

03:09.660 --> 03:11.700
比方说咱们之前啊

03:11.960 --> 03:14.780
在TS代码里边不是经常写这么一些代码吗 对吧

03:15.040 --> 03:15.980
Consult 对吧

03:16.240 --> 03:17.080
控制台

03:17.340 --> 03:18.620
Consult log

03:19.340 --> 03:20.620
你看我们写这些代码

03:20.880 --> 03:23.940
以及呢 我们可能会写什么set timeout啊

03:24.200 --> 03:25.240
写这么一些代码

03:26.000 --> 03:26.760
等等等等

03:27.020 --> 03:29.580
那么写这个代码的时候呢 大家发现没有啊

03:30.100 --> 03:33.940
这个代码 这些函数啊 这些对象啊 函数啊 这些东西

03:34.200 --> 03:35.980
不是我们自己写的 对吧

03:36.240 --> 03:38.280
不是我们写的 那是别人写的

03:38.540 --> 03:42.380
那你想一想 这些函数啊 对象这些东西是谁写的

03:42.640 --> 03:44.180
是Lodges写的 对吧

03:44.440 --> 03:46.480
是在Lodges里边的函数

03:47.200 --> 03:49.560
那么这些函数呢 他本来是用J写的

03:49.820 --> 03:51.100
而不是用TS写的

03:51.600 --> 03:55.700
那么我们这里为什么能够得到类型检查呢 你看一下 他有类型检查的

03:55.960 --> 03:58.500
他知道啊 这里是一个什么类型

03:58.760 --> 04:00.300
反回类型是for的 你看

04:00.560 --> 04:04.400
这个set timeout啊 这里是个函数 你看他有类型检查的

04:04.920 --> 04:06.440
他怎么知道有这些类型呢

04:06.700 --> 04:07.720
他是全靠

04:07.980 --> 04:08.760
声明文件

04:09.020 --> 04:10.040
大家还记得吗

04:10.300 --> 04:13.880
我们当时在Lodges就是下面 你看安装了这个taps

04:14.380 --> 04:16.180
taps load 你看这里边

04:16.680 --> 04:19.000
很多文件啊 都是以地点

04:19.260 --> 04:20.020
taps结尾

04:20.520 --> 04:24.060
那么这些文件在做什么呢 就在高速使用者

04:24.320 --> 04:27.960
这我们的Lodges这个模块啊 Lodges这个环境下边

04:28.220 --> 04:29.220
有哪些类型

04:29.480 --> 04:30.520
就在高速使用者

04:31.280 --> 04:33.080
所以说声明文件是在做什么呢

04:33.340 --> 04:34.860
我们简单总结一句话

04:36.140 --> 04:37.420
声明文件的作用就是

04:38.700 --> 04:40.760
为Jets代码

04:41.520 --> 04:42.280
提供

04:42.540 --> 04:43.580
类型声明

04:44.560 --> 04:47.120
就是做这个用处啊

04:47.380 --> 04:49.420
为Jets代码提供类型声明

04:49.680 --> 04:51.460
就是Jets代码里边

04:51.720 --> 04:52.480
我们有

04:52.740 --> 04:55.300
很多代码 但是呢 没有类型约束

04:55.560 --> 04:59.920
我们要在ts里边使用这些代码的时候呢 就缺少了类型的声明

05:00.180 --> 05:05.040
那么我们可以专门去写这么一个声明文件 为他补上这个声明

05:05.300 --> 05:07.080
这是声明文件的

05:07.840 --> 05:08.360
作用

05:09.140 --> 05:10.420
好 第三个问题

05:11.420 --> 05:15.240
声明文件书写的位置

05:16.000 --> 05:18.060
如果我们要自己写声明文件的话

05:18.320 --> 05:20.360
我们应该书写到什么位置呢

05:21.640 --> 05:22.160
这里有

05:22.660 --> 05:23.680
三种情况

05:23.940 --> 05:24.960
我都把他说一下

05:26.240 --> 05:27.280
第一种情况

05:27.520 --> 05:28.560
第一种情况

05:30.080 --> 05:31.360
书写的位置啊

05:31.620 --> 05:35.200
应该不能说书写的位置 应该是声明文件的位置

05:35.460 --> 05:37.760
就是放在哪 声明文件会生效

05:38.020 --> 05:39.800
这个声明文件放在哪 会生效

05:40.260 --> 05:42.060
第一种情况的就是

05:42.320 --> 05:43.580
放置到

05:43.840 --> 05:45.120
放置到

05:45.380 --> 05:49.220
配置tsconfig.json

05:49.480 --> 05:50.260
这个配置

05:51.220 --> 05:51.780
中

05:52.040 --> 05:54.600
包含的目录中

05:55.620 --> 05:56.900
包含的目录中

05:57.420 --> 05:58.440
什么意思呢

05:58.700 --> 06:01.260
我们之前不是有一个tsconfig.json吗

06:01.520 --> 06:03.300
就这么一个配置对吧

06:03.560 --> 06:05.860
这个配置文件里边你看一下

06:06.380 --> 06:07.900
这里是不是一个配置 叫做

06:08.120 --> 06:11.960
我们的tsconfig.json 放在哪个目录下面的 这里可以写多个目录

06:12.720 --> 06:15.200
我们之前写了这么一个目录 就是

06:15.460 --> 06:18.080
放置在src这个目录下边了

06:18.600 --> 06:22.700
好 放置在这下边的时候呢 我们只要保证我们的声明文件

06:22.960 --> 06:24.240
也在这个目录中

06:24.500 --> 06:27.040
就ok 不管你是在这个目录的跟目录

06:27.300 --> 06:29.360
还是说在这个目录下边的

06:29.620 --> 06:31.400
指文件夹里边都可以

06:31.660 --> 06:32.160
都可以

06:32.680 --> 06:33.960
好 这是这种情况

06:34.220 --> 06:35.240
你的声明文件

06:35.500 --> 06:36.780
如果放置在这

06:37.240 --> 06:39.040
可以 没问题啊 有效

06:39.540 --> 06:40.580
这是第1种情况

06:41.840 --> 06:43.400
第二种情况呢

06:44.680 --> 06:46.720
声明文件可以放置到

06:46.980 --> 06:48.520
load

06:49.780 --> 06:50.820
modules

06:51.840 --> 06:53.620
然后下边的

06:53.880 --> 06:54.920
taps

06:55.160 --> 06:56.180
taps

06:56.700 --> 06:57.720
文件夹装

06:59.160 --> 07:01.320
就是我们的声明文件还可以放到这

07:01.560 --> 07:04.640
那是我们一般自己写的话 不会手动的去放到这

07:05.000 --> 07:07.160
一般是安装的时候呢 他就会放到这

07:07.420 --> 07:09.200
这就解释了我们之前

07:09.460 --> 07:10.740
安装那个

07:11.260 --> 07:13.040
taps这个包的时候呢

07:13.300 --> 07:15.340
为什么要安装

07:15.600 --> 07:16.120
这个包

07:16.380 --> 07:19.180
就是因为安装之后呢 他在load嘛 就是下边

07:19.700 --> 07:21.480
然后呢 他生成了一个目录 叫ad

07:22.000 --> 07:22.500
taps

07:23.020 --> 07:24.040
这个目录下边的

07:24.300 --> 07:26.600
就可以放置各种各样的声明文件

07:26.860 --> 07:28.000
那么这些声明文件呢

07:28.260 --> 07:29.940
也会被ts来读去

07:30.700 --> 07:32.500
好 这是第二种情况

07:32.660 --> 07:35.020
放置到这也可以啊 也没有任何问题

07:36.040 --> 07:37.820
好 第三种情况就是

07:39.620 --> 07:40.380
手动配置

07:41.420 --> 07:42.180
手动配置

07:43.460 --> 07:45.260
好 手动配置的时候呢

07:45.520 --> 07:46.280
怎么配置呢

07:46.540 --> 07:48.060
手动配置的时候

07:48.320 --> 07:50.520
就是在tsconfig里边

07:50.780 --> 07:52.680
我们可以手动配置一下

07:52.940 --> 07:54.980
声明文件所在的位置

07:55.740 --> 07:56.520
怎么配置呢

07:57.020 --> 07:59.340
配置的方式是使用这个

08:00.100 --> 08:01.120
叫做

08:01.520 --> 08:02.960
taps root

08:03.880 --> 08:05.520
表示我们声明文件

08:05.780 --> 08:06.960
它的目录在哪

08:07.220 --> 08:08.760
声明文件的目录在哪

08:09.000 --> 08:11.060
这是一个数组 你可以配置多个目录

08:11.560 --> 08:13.480
那么如果你写了这个配置

08:13.720 --> 08:15.920
那之前的那些规则就失效了啊

08:16.440 --> 08:17.960
就是之前的

08:19.240 --> 08:21.560
之前的这前面两个规则就失效了

08:21.800 --> 08:22.960
如果你写了这个配置的话

08:23.240 --> 08:24.360
前面的规则就失效

08:24.880 --> 08:26.160
好 怎么配置呢

08:26.420 --> 08:27.180
我们来看一下啊

08:27.440 --> 08:30.680
比方说我要把声明文件配置到哪呢

08:30.880 --> 08:33.960
配置到当前目录下面的taps文件家

08:34.220 --> 08:35.240
配置到这

08:36.000 --> 08:38.440
好 配置到这了过后呢我们再看这边

08:38.700 --> 08:39.840
你看是不是爆错了

08:40.360 --> 08:43.440
他在他找不到这个声明文件了啊他找不到了

08:43.700 --> 08:45.480
本来呢以前是在哪去找呢

08:45.740 --> 08:47.780
是在src目录下面去找

08:48.040 --> 08:50.080
哎 找到过后呢好像没有这个东西

08:50.340 --> 08:51.320
他又去哪找呢

08:51.560 --> 08:52.640
他又去这个地方找

08:52.900 --> 08:54.180
这个地方就可以找到的

08:54.440 --> 08:55.720
但是呢现在

08:55.980 --> 08:57.760
我们跟他进行了配置的过后呢

08:58.020 --> 08:59.820
只让他到这个目录下面去找

09:00.280 --> 09:01.560
比方说我们这里

09:02.320 --> 09:03.100
有这么一个目录

09:03.360 --> 09:03.860
taps

09:04.380 --> 09:05.920
只在这个目录下面去找

09:06.420 --> 09:09.000
那么这个目录下面现在还没有任何东西

09:09.260 --> 09:10.780
所以说呢他这里找不到

09:11.040 --> 09:11.800
于是爆错了

09:12.820 --> 09:16.160
这是第三种情况啊第三种情况把这个删掉了

09:17.700 --> 09:19.220
删掉啊然后这边

09:19.740 --> 09:20.520
给他改回来

09:22.910 --> 09:24.190
啊这是第三种情况啊

09:25.730 --> 09:26.750
好 现在不爆错了

09:27.650 --> 09:31.090
好 其实呢还有一种情况啊还有一种情况

09:31.370 --> 09:32.690
还有一种情况是

09:32.970 --> 09:33.570
与

09:34.170 --> 09:35.290
与js

09:35.730 --> 09:37.770
与js代码啊

09:38.730 --> 09:39.270
呃

09:39.890 --> 09:41.370
所在目录

09:42.290 --> 09:43.170
相同

09:43.590 --> 09:45.890
并且文件名

09:46.090 --> 09:48.430
也相同的文件

09:48.930 --> 09:50.370
像这个声明文件呢

09:50.770 --> 09:52.370
是最好的其实是最好的

09:52.530 --> 09:55.570
他会自动进行读取啊就不用去看其他目录了

09:55.790 --> 09:59.530
比方说呃这个地方呢比方说啊有这么一个

10:00.130 --> 10:00.730
tests

10:01.090 --> 10:01.590
点

10:02.370 --> 10:02.870
js

10:03.390 --> 10:07.490
好这个tests.js里边我们写了一些js代码注意后续名啊

10:08.510 --> 10:09.790
这里是js代码

10:10.310 --> 10:11.590
好写了一些js代码

10:11.850 --> 10:15.430
写了之后呢我们要对他进行类型声明我们可以

10:15.690 --> 10:21.050
就在同一个目录下面给他放置一个tests.d.ts

10:21.310 --> 10:23.610
来对这个js文件进行类型声明

10:24.390 --> 10:25.410
啊这种方式

10:25.670 --> 10:27.450
是最好的其实是最好的

10:27.710 --> 10:30.530
那么这种方式又如果你使用了这种方式的话啊

10:30.730 --> 10:32.270
如果你使用了这种方式

10:32.530 --> 10:33.030
那么

10:33.810 --> 10:35.850
我们就不需要去安装什么

10:36.110 --> 10:39.310
啊这个tests包啊也不需要去单独去写

10:39.570 --> 10:40.710
啊声明文件了

10:41.230 --> 10:44.550
比方说我们之前学过的这个class validator

10:44.810 --> 10:46.350
啊Validator这个东西

10:46.610 --> 10:47.890
你看一下他里边的js

10:48.910 --> 10:49.630
container

10:49.890 --> 10:50.710
叫js

10:50.970 --> 10:51.470
看呗

10:52.230 --> 10:55.310
对应一个声明文件啊等管这个声明文件咋写的吧

10:55.830 --> 10:56.850
他对应一个声明文件

10:57.110 --> 10:58.650
然后这个js呢

10:58.910 --> 11:00.190
又对应一个声明文件

11:00.530 --> 11:01.810
每一个js

11:02.070 --> 11:03.590
他都对应到一个声明文件你看

11:03.850 --> 11:05.130
js声明文件

11:05.650 --> 11:06.930
js声明文件

11:07.690 --> 11:10.770
好我们就可以用这种方式啊也可以达到这样的目的

11:11.290 --> 11:12.570
啊也可以达到这样目的

11:12.830 --> 11:14.350
这种方式呢实际上是

11:15.630 --> 11:16.410
实际上是什么呢

11:16.910 --> 11:18.450
实际上是

11:18.710 --> 11:19.470
呃是

11:19.990 --> 11:21.270
用ts

11:21.530 --> 11:22.290
代码

11:22.550 --> 11:24.090
书写的工程

11:24.850 --> 11:26.650
发布之后的格式

11:27.410 --> 11:29.970
就是如果你的工程是用ts代码写的

11:30.430 --> 11:32.230
你把这个工程发布出去之后

11:32.490 --> 11:34.530
希望别人来使用你这个东西

11:34.790 --> 11:35.550
那么这个时候呢

11:35.810 --> 11:37.850
你发布出去过后应该是js对吧

11:38.110 --> 11:39.910
发布出去过后就是js文件了

11:40.170 --> 11:44.250
那么你如果要让别人来使用的话你就必须要加上

11:44.510 --> 11:45.030
声明文件

11:45.290 --> 11:46.310
那么这个时候呢

11:46.570 --> 11:47.850
你把声明文件加上

11:48.110 --> 11:50.150
当然这个可以自动加啊不用你手东西

11:50.910 --> 11:51.670
了解一下啊

11:51.930 --> 11:55.270
声明文件的位置呢一共就这么集中啊集中方式

11:56.550 --> 11:57.050
好

11:57.510 --> 12:04.150
这是我们声明文件这一块的一个概述啊简单的了解一下声明文件是什么玩意儿

12:04.410 --> 12:05.250
就是一个

12:05.510 --> 12:06.790
点ts结尾的文件

12:07.050 --> 12:12.670
声明文件有什么作用呢就为ts代码啊是为ts代码提供内销声明

12:13.170 --> 12:16.510
声明文件的位置呢可以放到哪呢有这么一些位置

12:17.010 --> 12:20.850
好我们首先大概了解一下啊这个声明文件的作用做概述

12:21.630 --> 12:23.670
好那么这里可能到这里了啊

