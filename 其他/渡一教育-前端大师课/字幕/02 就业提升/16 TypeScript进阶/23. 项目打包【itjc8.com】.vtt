WEBVTT

00:00.820 --> 00:04.160
大家好 我是独一教育 微博全程讲师 袁晋

00:04.660 --> 00:09.260
咱们的项目已经开发完成了 我们还剩下一个就打包

00:09.520 --> 00:13.880
在讲打包之前我这一块先补充一个知识

00:14.380 --> 00:20.780
这个知识我认为在这个讲的项目过程中会用到 结果发现没有用到

00:21.040 --> 00:23.860
那没用到没关系 我们这里把直接补充上就行了

00:24.120 --> 00:26.940
什么知识就是关于组建的

00:27.440 --> 00:29.240
属性末任值的问题

00:29.640 --> 00:35.640
就是比方说我们这里写个组建啊 就随便写个组建 我就把这个知识呢 告诉大家就行了啊 也非常简单

00:36.400 --> 00:40.240
比方说我这里写的一个组建啊 假设他是一个内组建

00:40.500 --> 00:41.520
isport

00:42.040 --> 00:43.060
default

00:44.080 --> 00:48.200
class 就一个test吧 或者没有名字react

00:48.440 --> 00:49.200
component

00:49.980 --> 00:51.260
他是这么一个内组建

00:51.520 --> 00:54.840
然后呢 我们把这个react导入进来啊 他有一些属性

00:55.860 --> 00:58.940
我给他订一个接口 他有自己的一些属性

00:59.140 --> 01:00.440
myprobs

01:01.200 --> 01:02.220
有这么一个接口

01:02.480 --> 01:06.840
这个属性呢 有哪些呢 就随便写吧啊 随便写一些属性 比方说有属性

01:07.080 --> 01:08.360
是一个支付串

01:08.880 --> 01:12.200
有属性b 也是一个支付串 就随便写呗

01:13.240 --> 01:16.040
然后呢 我给他对他进行属性的约束

01:16.300 --> 01:17.580
myprobs

01:19.120 --> 01:21.420
对 他进行属性的约束

01:22.180 --> 01:22.960
现在呢

01:23.220 --> 01:27.040
这两个属性呢 我都要求是必选啊 都是必选的属性

01:27.300 --> 01:28.080
必须要写

01:29.040 --> 01:29.440
必填

01:31.940 --> 01:35.760
好 然后呢 我们到页面上去用一下啊 去用一下这个

01:36.280 --> 01:41.920
这个这个这个组件啊 我们或者就住在这里用吧 我们就在这里用 我们先导出 导出就随便导出一个啊

01:42.180 --> 01:43.720
不爆出就行了 我们这里

01:44.480 --> 01:45.000
test

01:45.760 --> 01:51.640
有这么一个组件 好 那么下面呢 我在另一个组件里面去用他啊 另一个组件里面去用他

01:52.160 --> 01:56.440
有的啊 比方说有这么一个组件 这个组件里面要去用test这个组件

01:56.720 --> 01:58.760
主要是要讲一讲默认值的东西

01:59.740 --> 02:04.340
component啊 然后这个由这里边呢 我要去使用这个test的组件

02:05.900 --> 02:07.100
vindar return

02:07.900 --> 02:09.900
好 这边呢 我要去使用这个

02:10.580 --> 02:12.020
test这个组件

02:12.780 --> 02:19.860
好 使用的时候 你看是不是爆错了 为什么要爆错 因为他有两个属性你必须要写啊 一个a这个属相啊必须要写

02:20.100 --> 02:23.300
一个b这个属相是必须要写的 那么现在不爆错了

02:23.820 --> 02:25.660
这里我要说的问题呢 就是什么呢

02:26.080 --> 02:28.760
就是有的时候呢 有些属性是有默认值的

02:29.520 --> 02:36.720
是用默认值 就是他是必选 那确实是必选 但是他有默认值你可以 那有了默认值过后呢 你就可以不写

02:37.280 --> 02:39.200
不写的话也行 对吧 因为他有默认值

02:40.080 --> 02:47.720
那这种情况该怎么来处理呢 这种情况呢 以前以前出来处理起来的有些麻烦 那但是现在呢

02:48.160 --> 02:53.840
就是test到了3.0过后啊 就已经把这个问题的处理的很好了

02:54.340 --> 02:59.940
怎么处理 非常非常简单 你只需要在这个组件里边呢 写上这个东西啊 static

03:01.820 --> 03:03.340
default props

03:04.220 --> 03:11.900
哎 这东西还记得吗 大家 这不是说ts新有的写法啊 以前写内组件的时候定义默认属性 是不是也这样写的

03:12.500 --> 03:15.420
啊 定义默认属性 他也是这样子写的 没有什么问题的

03:15.740 --> 03:23.060
就是写一个静态的属性 因为你这样子写就相当于是啥呢 相当于是写了这么一个东西啊 default props

03:23.560 --> 03:29.360
相当于是写了这么一个东西 对吧 是一样的啊 那我们这里把设置为静态的

03:30.600 --> 03:32.040
default props

03:32.960 --> 03:41.200
好 给他设置一个默认的属性值 给他约束一下啊约束一下这个默认的属性值 比较约束为什么呢约束为my props

03:42.480 --> 03:44.400
啊 my props my props

03:44.800 --> 03:46.400
好 那么就给他设置值

03:47.220 --> 03:53.540
有哪些属性 哪些只要有默认的 比方说a123 随便写啊 b456

03:54.380 --> 03:58.460
你看这样子约束过后 你看是不是这里不爆错了 啊 因为他知道啊

03:59.020 --> 04:04.460
到了ts320过后了 他就能够智能的推断出啊 他专门做了处理 为这一块专门做了处理

04:04.740 --> 04:10.740
处理过后呢 他就认为啊 你这里块没问题啊 没问题 因为他有属性的默认值 a和b都写了 随说你可以不写

04:11.320 --> 04:14.880
好 有一个同学说 那我能不能只写一个a呢

04:15.840 --> 04:19.280
能不能只写一个a不写b呢 当然可以啊 当然可以

04:20.400 --> 04:24.560
如果你有这样的需求的话 那么这里的做法是这样子 首先让你把

04:25.640 --> 04:30.280
必须了啊 就是你只写那些你需要复制的默认的属性

04:31.640 --> 04:37.200
那么这里要爆错 爆错的原因呢 是因为你跟他约束的内容不对啊 你跟约束的内容是都要复制的 对吧

04:37.500 --> 04:39.340
但是呢 你现在只复了一个指a

04:40.220 --> 04:46.860
好 那么这个时候你怎么约束呢 你可以使用这样的约束啊 比方说我先举个简单的例子吧

04:48.060 --> 04:51.620
你这样的约束 你不是只写a吗 对吧 我只给他复制a

04:52.820 --> 04:56.460
这样子约束啊约束a 他只有一个属性a

04:57.180 --> 05:03.500
只需要复制一个默认值a就行了 好 这样子约束过后你看这边 他马上就爆错了啊 他说还有一个b

05:03.960 --> 05:10.120
他能推断出来 他能根据你这里的default props 他根据他的内详来来进行推断

05:10.640 --> 05:15.560
他会把他的内详的东西呢 减去他的内详 那么剩下的就是呢 剩下的就是啥

05:16.080 --> 05:19.720
就是你必须要复制的属性了 你看 减去之后呢

05:20.320 --> 05:25.840
你还有这个b的属性呢 需要复制啊 这些都是贴室在三辆林过后来做了一些特殊的处理

05:27.280 --> 05:33.240
好 但是呢 这样子写法呢 并不是很好啊 并不是很好 因为这样子呢 会有一些重复带嘛

05:33.300 --> 05:40.500
你看这里的东西 跟这里的东西是不是一样的 对不对 会有一些重复带嘛啊 其实这里的最好的写法呢 我觉得应该是这样子的

05:41.140 --> 05:42.580
使用的内型演算pick

05:43.700 --> 05:43.940
pick

05:44.580 --> 05:52.660
pick呢 就是怎么呢 从一个内型里边呢 去选一些东西出来啊 我们从什么内型里边呢 从my props里边

05:53.380 --> 05:56.980
去选哪些东西呢 选哪些东西 我们选a

05:57.840 --> 06:04.240
如果a和b都要选的话 你可以这样子选b 当然 如果都要选的话 那还不如不如直接用my props 对吧

06:04.720 --> 06:09.680
那么我们选一个a 选一个a这个属性啊 如果你选多个的话 用联合内型

06:10.240 --> 06:17.160
好吧 好 这样子一选了过后呢 他相当于是就是从这个内型里面进行演算 选一个pick啊

06:19.000 --> 06:26.920
哪一些啊 哪一些内型 把a这个内型拿出来 那么这样子一来了 他里边呢就相当于是只能只有一个a这个属性

06:27.120 --> 06:29.720
你在一起其他的属性呢 也不让你写啊 也不会让你写的

06:30.680 --> 06:36.760
好 那么这里呢 就搞定到这一块了 好 这里呢 写一个属性b 出去玩事了 对不对

06:37.440 --> 06:45.240
ok啊 那么这里呢 我就把这个属性的默认值啊 默认值这一块啊 我讲一讲 这里我打个注射吧

06:46.280 --> 06:53.160
这是属性的默认值 这里呢 我再说一个东西啊 再说一个东西 就是关于属性的

06:53.940 --> 07:00.260
复制的问题 就是有的时候呢 你可能啊 你可能在render啊 或者是一些其他函数里边呢

07:00.700 --> 07:06.100
比方说task这个函数 有些函数里边呢 你可能不小心给这个属性呢

07:06.580 --> 07:14.420
他的一些他的东西进行了复制 其实呢 是不行的啊 是不行的 因为你这样子一个翻译型 传过去过后了

07:14.660 --> 07:20.500
他会自动的 把你这个翻译型里面所有东西做成止读的啊 做成止读 你可以看 变成了一类的only

07:20.960 --> 07:25.920
所以说 你想给属性复制 他也不让你复制啊 也不会让你复制的 所以不用担心这一块啊

07:26.800 --> 07:32.200
好 那么这里呢 我就把它讲完了啊 讲完了 整个项目完成之后呢 接下来我们是部署

07:33.040 --> 07:38.000
部署呢 其实我这里不会讲的太多啊 因为部署的要设计到什么

07:39.200 --> 07:47.800
性能优化呀 懒家宅呀 这些东西啊 就跟webpack关联太多了 而咱们的这个贺城是学ts的 我说说

07:48.500 --> 07:55.900
不会设计到另外一个领域 如果大家啊 对webpack就感兴趣的话 想学习webpack的话 可以关注我们的课程啊

07:56.660 --> 08:03.540
好 咱们呢 打包的话就很简单 我们做一个很简单的事情就是 在这个首先在这里啊 我们先把你乱七八糟三了啊

08:05.140 --> 08:11.100
我们在这里呢 先把这个客户端这一块先打包啊 先把这个客户端这一块打包啊 np

08:12.060 --> 08:15.060
build啊 这个跟之前是一样的 对吧

08:16.040 --> 08:22.720
就说你没有 没有多少的区别啊 没有多少区别 因为我这个做项目呢总 总会要把它做完 是吧 所以说我这里还是

08:23.640 --> 08:29.240
稍微的讲一下打包吧 没有什么什么区别啊 跟之前的做法是一样的

08:30.320 --> 08:38.320
稍微等一下啊 这里是这个客户端这一块打包 那么服务端这块 这一块打包呢 我们之前已经做过了的吧 就生成电蛇这个目录

08:38.940 --> 08:42.100
至服务端这一块打包啊 我们把服务端这一块再重新打包一次吧

08:43.260 --> 08:46.460
好 这里呢 我们打包一下服务端 npm 装

08:50.740 --> 09:02.870
服务端打包 然后客户端打包 看客户端打包完了没 客户端怎么这么久啊 稍微等一下啊

09:03.510 --> 09:13.230
嗯 我们以后呢会把客户端打包的结果放哪呢 我们会放到这个文件夹啊 public 这个文件夹哇 这么多文件了啊 没关系啊 我们会把

09:13.530 --> 09:19.930
客户端打包的结果就是必有的这个目录打包的结果 放到哪 放到这 放到 public 目录下面来

09:20.970 --> 09:26.010
所以说呢 我们这里呢 服务端这一块呢 我们这里要稍做一下改动啊 稍做一下改动

09:27.050 --> 09:33.850
呃 就是说让希望让他呢 哎 打包完成了啊 打包完成过后呢 我们把这个文件夹里边东西啊

09:34.810 --> 09:39.210
啊 这个文件夹里边东西直接复制吧 我们把整个文件夹直接复制一下啊

09:39.790 --> 09:43.350
复制一下 复制一下放哪了 我们直接放这啊 直接放这

09:45.230 --> 09:46.790
嗯 这里 我们直接放过来

09:47.790 --> 09:52.750
好 于是呢 我现在服务端的代码呢 我稍微做一下改动 就在这

09:53.830 --> 09:54.750
看一下服务端代码啊

09:56.230 --> 10:02.070
就是我们现在呢 服务端有两个进有两个目录是放的是静态资源 一个目录的是build

10:02.950 --> 10:06.470
就是客户端里面打包的结果 一个目录的是upload

10:07.210 --> 10:13.170
就是我们的上传文件啊 我们有两个这么两个目录存放的是静态资源

10:14.250 --> 10:17.850
好 存放静态资源的时候呢 我们要设置一下啊 设置一下

10:18.530 --> 10:23.010
就是访问这个地址的时候啊 咱们访问这个地址的时候呢

10:23.730 --> 10:25.970
好 相当于是访问的这个目录

10:26.850 --> 10:30.850
啊 访问的这个目录 当我们访问 如果我们访问的是这个地址

10:31.830 --> 10:33.590
啊 比方说 如果我们访问的是这个地址

10:34.870 --> 10:39.510
这个地址的话 我们把它映射到这个目录 必有的这个目录 啥意思呢

10:40.350 --> 10:43.630
应该懂我啥意思 对吧 比方说 如果我们访问的是

10:44.990 --> 10:49.030
如果我们访问的是鞋杠啊 比方说 访问的是鞋杠

10:50.910 --> 10:55.470
这里怎么写呢 啊 比方说 访问的鞋杠是af av icon

10:56.450 --> 11:00.410
fav icon

11:01.490 --> 11:03.370
那么这个表示的是网页的图标

11:04.170 --> 11:06.770
如果我们访问这个路径的话 那么它对应到这

11:07.490 --> 11:10.890
对应到这 它检查的目录是啥呢 检查的目录是这个目录

11:12.410 --> 11:15.130
检查的目录是这个目录 这个目录下面的

11:16.130 --> 11:16.650
fav icon

11:18.370 --> 11:22.730
啊 检查这个目录 这个文件是否存在 如果存在的话 就直接把这个文件内容返回

11:23.350 --> 11:25.510
啊 就是设置了这里的静态支援

11:26.790 --> 11:35.750
好 现在呢 我们把它设置好了之后 我们来试一下 我这里打开啊 中央打开 打开之后呢 我们使用npm转

11:36.790 --> 11:41.110
dev 把运行出来啊 把服端运行出来看一下啊 能不能访问得到

11:42.310 --> 11:46.790
好 接下来呢 我们打开网页啊 网页 然后这里就输入

11:47.750 --> 11:48.750
localhost

11:49.870 --> 11:50.870
localhost

11:51.730 --> 11:53.010
3000回车

11:54.610 --> 12:02.370
好 说进来过后呢 我也可以看到啊 这个网页就已经出现了啊 电影 添加电影 这些东西都有了 对吧 都有了

12:03.370 --> 12:14.850
好 那么这里呢 我们把部署好了之后呢 最后是啥呢 还有一个问题呢 还需要解决这个问题呢 有些同学应该知道啊 我们这里就直接说了 什么问题呢

12:15.430 --> 12:25.350
比如说啊 我如果去 我这里访问那个地址好像是没有什么问题对吧 那么我们现在刷新一下啊 f5刷新看一下啊 f5刷新他就不行了

12:25.830 --> 12:30.750
啊 就不行了 为什么呢 我这里解释一下啊 因为我不知道你们

12:32.030 --> 12:34.790
如果你们之前做过部署的话应该知道我这一块来说什么

12:35.470 --> 12:40.790
就什么意思呢 为什么一开始可以访问的 因为一开始我最开始的时候访问的是这个地址

12:41.770 --> 12:48.730
最开始的时候我访问了这个地址 这个地址的话 他读的是哪个页面呢 读的是这个页面

12:49.810 --> 12:54.850
因为我把他硬是到这个地方的 对吧 硬是到这个地方 他去读的是哪个 读的是这个页面

12:55.370 --> 13:03.290
public文件甲下面的bio的文件甲 下面的这个默认读的是 如果你没有给文件名 他读的是index.atm

13:03.890 --> 13:07.090
读的是这个页面 那这个页面存不存在呢 我们看一下这个目录

13:08.290 --> 13:10.130
index.atm 是存在的

13:10.970 --> 13:18.370
这个文件是存在的 因此呢 他能够把这个页面的显示出来啊 就是如果直接访问这个路径的话 他能够把这个页面显示出来

13:19.050 --> 13:25.690
那我后面挑转的时候 为什么还可以访问呢 是因为挑转的时候呢 都是单页应用程序 他没有刷新页面

13:26.250 --> 13:28.570
他只是改变了地址 利用atm

13:29.490 --> 13:35.730
historyapi 改变了浏览器的地址 但是并没有刷新页面 没有刷新页面的话

13:36.510 --> 13:39.230
那么他访问的还是这个页面 还是个地址

13:40.390 --> 13:47.670
浮览器那边没有动啊 没有重新去请求浮览器的静态资源 所以说我们这里的跳转了 实际上是没有刷新页面的

13:48.310 --> 13:54.630
那如果我这里手动强制刷新的话 比方说我这里访问这个地址强制刷新 为什么访问不到呢

13:54.950 --> 13:58.590
因为你这样强制刷新的话 相当于是像浮览器发生了这么一个请求

13:59.550 --> 14:04.310
请求这么一个地址 那浮览器去找啥呢 去找啥 去找这个东西

14:05.290 --> 14:10.770
他去找无谓文件夹下面的add 文件夹下面的index atm

14:11.410 --> 14:17.210
那里看有没有浮觑这边有没有 肯定是没有 对吧 哪有这个文件 没有这个文件

14:17.930 --> 14:24.770
那这里呢 我要怎么处理呢 这里我希望呢 如果去访问这些乱七八糟的玩意啊 如果去访问这种地址的话

14:25.210 --> 14:29.050
我希望你访问的还是这个index 页面

14:29.570 --> 14:34.250
就是你访问这些资源的时候 你访问的始终是这个东西

14:35.050 --> 14:36.570
那这个东西怎么来处理呢

14:38.330 --> 14:42.810
我再说一次啊 现在我希望的是 无论你访问什么样的地址

14:43.570 --> 14:48.170
我始终把它硬设到这个地址 你始终是访问这个这个页面

14:48.730 --> 14:53.250
你访问这个地址 访问的其实也是这个页面 单页应用程序嘛 只有一个页面

14:54.170 --> 15:00.370
怎么处理呢 这里需要用到一个第三方的cool啊 第三方的cool 我们这个第三方cool可以到这个

15:01.350 --> 15:02.510
npb去搜索一下啊

15:03.190 --> 15:07.230
npb搜索一下 名字呢很长一串叫做connex

15:08.230 --> 15:09.430
呃 就这个啊

15:10.310 --> 15:14.070
connex history api four bike 就这么一个cool

15:14.870 --> 15:21.310
好 这个cool的作用就是在做这个硬设的啊 它用起来其实非常非常简单 首先你安装它 安装一下这个cool

15:21.750 --> 15:22.550
好 我们来安装吧

15:24.350 --> 15:25.150
我们先停止啊

15:26.130 --> 15:33.130
先安装一下 压add在服务器的安装啊 压add名字要做一长串啊 安装一下

15:36.010 --> 15:42.570
好 安装一下啊 安装完了 呃 它这里呢 说有一个警告

15:44.090 --> 15:52.330
啊 这个警告呢 是说我的这个压呢 它版本有点低了啊 它已经有点过时了啊 这个跟你们没关系啊 我到时候下来自己发生疾了

15:52.730 --> 15:56.890
我这里不管了啊 不管了 这个错不是跟我们的工程有关系 跟工程没什么关系

15:57.290 --> 16:03.690
啊 这个不是错啊 是个警告啊 不管它啊 我暂时不管它好 然后呢 我们这里安装好了过后呢

16:04.210 --> 16:09.930
就可以去使用这个包好 我们来看一下这个包有没有内情啊 把导入进来啊 看他怎么使用的

16:10.850 --> 16:11.650
啊 把导入进来

16:12.570 --> 16:19.290
啊 他是用required的方式在导入对吧 但是我们现在使用的是ts 因此呢 我们使用的是啊 es6的方式在导入

16:19.610 --> 16:22.330
叫connect history api four bike

16:23.010 --> 16:25.690
好 这里呢 出现了三个点 说明啥 说明它没有内情系统

16:26.190 --> 16:33.550
啊 说明它没有内情系统 好 ok 我们安装一下啊 安装一下它的内情 像这些常见的裤啊 它们都有的啊 常见的裤都有的

16:34.270 --> 16:39.070
啊 很刚地taps 啊 把这个包名放过来啊

16:40.230 --> 16:41.590
复制 粘贴一下 放过来

16:42.790 --> 16:48.990
安装一下它的内情裤 内情裤安装完毕 安装完毕过后呢 我们就可以使用这个啊 history 啊

16:49.470 --> 16:53.430
怎么用呢 其实用法非常非常简单 他就告诉你啊 怎么用

16:54.410 --> 17:01.330
呃 你这里只需要use use history 就行了 他是一个中间键啊 我们这里只需要使用app

17:02.370 --> 17:06.570
在我们映射静态支援之前啊 在映射静态支援之前去使用这个

17:07.330 --> 17:13.810
中间键use history 把当成函数来调用啊 他这里边有些配置啊 我们先暂时不着急去配置

17:14.450 --> 17:19.210
先直接这样子使用 好直接这样子使用了 过后呢 我们来保存一下啊 来看一下

17:20.190 --> 17:24.630
好 这边 我们再刷新啊 没启动起来对吧 还没启动起来

17:26.230 --> 17:28.630
npm run

17:31.070 --> 17:32.190
把服务器启动起来

17:33.750 --> 17:36.190
好 启动起来之后 我们这边再去刷新

17:37.550 --> 17:44.310
好 你看 无论你访问什么地址 他访问的始终是哪呢 始终是英帝的社典也听不了

17:44.710 --> 17:47.470
啊 他访问的就是你无论这里的访问的是什么地址

17:48.450 --> 17:58.450
无论你地址是什么 他都会先把他映射到哪了 映射到也听不了 相当于是你访问 相当于是你访问的是啥呢 相当于是你访问的是这个地址

17:59.010 --> 18:02.890
啊 他都会去做这样的映射啊 我们一会看他是怎么做的啊 他有什么哪些规则

18:03.530 --> 18:06.770
好 我们看一下电影列表啊 你看这些都正确了啊 都正确了

18:07.450 --> 18:11.650
好 大致的来了解一下这个库是怎么回事吧 大致的来了解一下

18:12.630 --> 18:17.470
他这里个说明 我看在哪 上边 好像就上边 他说

18:19.110 --> 18:25.390
他说什么呢 他说这个微信的中间间呢 他做了这么一些处理啊 他说他会帮你

18:26.110 --> 18:28.950
呃 改变这个请求地址

18:29.870 --> 18:36.110
改变到哪了 改变到啊 英帝的社典也听不了也就说你无论是请求什么样的地址

18:36.550 --> 18:41.230
你无论是怎么请求 他都会把他的地址改变成这个这个中间间的作用就是这样子

18:41.750 --> 18:46.270
那么改变之后呢 你后去了中间间你是不是就可以处理了 比方说我们是请求的是这个地址

18:46.670 --> 18:49.350
那么经过这个中间间一改 他把改成了这个地址

18:49.790 --> 18:54.230
那么改成这个地址过后了 你看后去了中间间是不是就可以正常的进行处理的 对不对

18:55.670 --> 19:01.550
好 那么他改了之后 他有一个前提条件啊 他就是有些情况他是不会改的 只有满足下边的

19:01.990 --> 19:06.830
这些情况他才会进行更改 哪些情况呢 首先你是一个get请求

19:07.390 --> 19:11.470
那你请求 在浏览器里面请求网也是不是get请求 对吧 get请求

19:11.830 --> 19:16.070
第二个呢 你的请求头里边有这么一个请求头叫accept

19:16.990 --> 19:20.430
必须是text at秒 你要拿到的是一个网页

19:21.350 --> 19:23.990
比方说我们这里的请求请求页面的时候 我们看一下啊

19:25.510 --> 19:31.710
怎么讲讲讲这个主场讲这个库里面来了 好 我们请求这个页面的时候 你看一下请求这个部位

19:32.550 --> 19:35.030
我们看一下他的请求头 请求头

19:36.390 --> 19:36.950
找一找啊

19:37.170 --> 19:46.730
你看accept 请求头里边 由于浏览器发出的请求 因此他会自动给你加上这个请求头

19:47.170 --> 19:49.730
text at秒 他要的是一个at秒页面

19:50.530 --> 19:54.650
这也就解释了为什么啊 为什么这些啊 这些那个

19:55.410 --> 19:55.730
什么的

19:56.890 --> 20:00.970
api这些没有受影响啊 你看api的请求 api的请求头

20:01.770 --> 20:06.010
request 请求头里边啊 accept 他不是一个text at秒

20:06.710 --> 20:10.710
说到 at api的请求了 他没有受到这个影响 他没有把api的请求

20:11.350 --> 20:16.710
给他改成这种格式 不然的话我们api就请求不到了对吧 所以说他有这么一个限制

20:17.310 --> 20:23.070
而且呢 还有呢 还有图片啊 这些图片的请求 我们看图片他也是个请求嘛 对不对

20:23.430 --> 20:28.790
这些图片啊 我们看一下网络 图片的请求上 css啊这些请求你看

20:29.430 --> 20:32.830
except 他都不是一个text at秒 他都是其他的xs

20:33.210 --> 20:38.530
cs也是一样啊 所以说像cs啊 图片啊 这些呢 实际上是没有受到影响的

20:38.930 --> 20:40.930
只有对一页面的请求会受到影响

20:41.610 --> 20:45.050
就这么一个组件 啊 后面呢 他又说到啊

20:46.330 --> 20:49.810
他不是一个直接对文件的请求 啊 比方说

20:51.290 --> 20:55.250
你请求的时候加了一个底儿 比方说你请求的时候加了一个底儿

20:56.170 --> 20:57.050
第二

20:57.810 --> 21:02.250
那个什么 at秒 啊 比方说这种请求了 他也不会不会给你

21:02.930 --> 21:07.210
给你进行转换啊 你如果不是对一个文件请求 他才会给你进行转换

21:07.890 --> 21:17.330
好吧 然后最后呢 他说没有啊 这种请求呢 没有匹配到啊 你自己的自定义规则 就是你可以自己定义一些规则来

21:18.450 --> 21:23.650
来进行 他进行限制 就什么请求呢 会进行重写 重写到这种地址

21:24.250 --> 21:29.730
如果你没有 如果你写了自定义规则的话 那么这里如果你没有匹配上自定义规则 那么会按照

21:30.390 --> 21:37.710
这样的规则来 啊 总之呢 这个组这个第三帮库啊 做的事情很简单啊 就是做了这么一个处理 把这个请求重新硬设掉

21:38.790 --> 21:45.870
那么好了 现在呢 我们把这个服务端啊 单一用程序也搞定了 那么最后就服务端打包再重新打包一次啊

21:46.310 --> 21:47.190
npm run

21:48.470 --> 21:50.070
build 重新打包一次

21:54.510 --> 22:02.870
好 完成 完成之后呢 我们要做啥呢 就是运行垫使这个目录 啊 运行垫使这个目录下边的啊 就用漏的

22:03.210 --> 22:07.370
运行 运行啥 垫使这个目录下边的哪个呢

22:09.170 --> 22:13.290
就是不是db啊 index 解释 运行它就完成了

22:14.570 --> 22:18.210
好 把运行出来啊 运行出来了 我们再来请求一次刷新

22:19.250 --> 22:26.690
一切正常 一切正常 就ok了啊 就ok了 我们来测试一下这个上传是不正常的 都是一切正常的

22:27.670 --> 22:34.550
好了 那么这就是打包啊 也非常简单 跟之前没有什么区别啊 就讲一讲这个库啊 这个库呢 它也是有内箱库的啊

22:35.150 --> 22:45.990
直接去安装就行了 那么最后部署的话 你就把整个server文件夹啊 扔上去 当然漏的嘛就是除外扔上去 最后呢 服务端安装好了一代之后呢 运行垫使目录下边的

22:46.670 --> 22:48.390
啊 赢这个设定解释就完事了

22:49.390 --> 22:55.390
好吧 那我们整个这个项目就做完了啊 通过这个项目呢 我们讲我们

22:56.370 --> 23:02.810
可能并不能说啊 你学习了这个我们的ts 这个课程之后呢 就能成为一个大神

23:04.490 --> 23:09.770
这个点 这点做不到啊 只是说呢 你学了这个课程之后 跟了这个项目之后

23:10.290 --> 23:18.050
一对ts呢 就有了一个全面的认识了 他用了什么样的作用 他能解决什么样的问题 他给我们带来了什么好处

23:18.630 --> 23:26.430
就有了一个全面的认识 并且呢 咱们这个课程中做了三个项目 对吧 一个是基础部分 一个三只紧织骑的游戏 一个是

23:27.310 --> 23:32.950
耳朵丝方块 这么一个游戏 一个是呢 这个这么一个项目 这三个项目呢 他其实

23:34.030 --> 23:43.550
代表着ts 的一些常用的场景 然后第一个基础项目的话 我们做了就是一个简单的啊 只用了一个主键的话 怎么来结合

23:44.010 --> 23:50.170
少量的使用ts 该怎么来结合 第二个项目的话 就是webpack 跟这个ts 如何来结合

23:50.810 --> 23:55.810
如果我们不使用什么前端框架 就直接使用接块位啊 这些东西又如何来结合

23:56.370 --> 23:59.090
第三个项目呢 就是这个项目 这个项目里边呢 我们

23:59.810 --> 24:06.370
服务多安 到客服多安 到rex 全家统又给什么跟ts进行结合 那我都面面剧道的 把他讲到了啊

24:07.090 --> 24:12.050
有些东西呢 可能大家目前的还不是很理解 都没关系 因为我们做的是视频教程

24:12.830 --> 24:19.590
视频教程一个好处就是你可以回看的 将来有一天你到公司里面啊 遇到了一些关于内详约束的一些

24:20.190 --> 24:24.070
很细的一些场景的话 那么你可以回过头来看一看这一块的

24:24.630 --> 24:31.190
视频 你会想到 哎 我这个项目里边用到了这个东西 比方说啊 咱们的主线摸认纸 比方说我要计算

24:31.830 --> 24:37.390
啊 我要进行内行演算 内行演算 又该怎么去处理 等等了 这些我们在这个项目里边

24:37.810 --> 24:44.210
很多地方都是用到的 然后因此呢 到时候你可以回过头来看 总之呢 我再重申一遍ts呢 是一个

24:45.610 --> 24:52.050
可选的静态的内行系统 最后呢 我们做最后一总结出来就是这么一句话

24:54.450 --> 24:57.210
ts 是一个可选的

24:58.210 --> 25:05.410
静态的内行系统 其实通过我们整个这个课程学习的话 最后总结出来就这么一句话

25:05.710 --> 25:12.110
就这么一句话 你牢牢记住就完事了 你都不用去记啊 你深刻的刻在你脑海里边理解他

25:12.870 --> 25:17.430
静态的 为什么是静态的 你会发现他很多时候在运行出来之后呢

25:18.270 --> 25:25.030
是没有内行检查的 因为运行出来就是一个纯粹的介绍呐 因此呢 才有了什么装饰器啊 这些东西 我但愿吧

25:25.350 --> 25:33.910
但愿江南呢 可以有一个很好的解决办法 在运行的时候呢 也可以进行内行检查啊 就可以避免到 避免掉这里面的很多坑

25:34.890 --> 25:39.370
另一个呢 他是个可选的 就是我们讲课的时候呢 会尽量的把

25:40.250 --> 25:46.930
方方面面面的内行系统呢 这个加进去 但实际在开发中呢 因为开发人员的水平称之不齐

25:47.490 --> 25:57.130
所以说 我个人目前发现在公司里面真的在用ts做开发项目的 特别是中小型企业 他并没有面面去到的 去使用内行系统

25:57.570 --> 26:01.610
就简单的用一下 因为他是可选的 因此他提供了一种见尽式的

26:01.830 --> 26:04.990
啊 提供了一种见尽式的开发方案

26:06.070 --> 26:10.510
也就是说 我用这个东西不是说全盘 把之前的全盘缝定

26:11.270 --> 26:15.590
啊 必须要全部用面向对象啊 必须要全部每一个地方都要去加这个内行

26:16.070 --> 26:21.190
其实是没有必要的 他是一个可选的见尽式的 用哪一块理解 那么就用哪一块

26:21.710 --> 26:26.950
啊 你用着用着 发现这个确实好用 你想用了更多啊 想用的更多的东西 那么你就去

26:27.930 --> 26:30.850
啊 用 把没有进行内行 约束的 给他约束掉

26:31.770 --> 26:37.370
好吧 好了 至此呢 我们整个这个课程啊 就到此结束了啊

26:38.130 --> 26:45.610
啊 课程时间好像比较长 我又没有具体去统计过 希望呢 我这个课程呢 对大家啊ts这一块

26:45.930 --> 26:47.410
能够有所帮助 因为我看

26:48.090 --> 26:53.970
市面上的很多ts课程呢 都讲的比较简略啊 都只是把官方稳当的一块东西呢 搬过来讲一讲

26:54.430 --> 27:02.790
没有设计到太多的项目 所以说我这个课程呢 里面加了三个项目进去啊 希望通过这种实战的演练的对大家啊 理解ts呢 有所帮助

27:03.230 --> 27:08.430
好吧 那么我们我之后呢 还会做一些其他的视频课程呢 希望大家能够

27:09.190 --> 27:16.790
支持啊 希望大家能够关注 那么这门课就到此结束了啊 很高兴能够为大家去讲解这门课 那么

27:17.790 --> 27:19.790
之后啊 我们再见拜拜

