WEBVTT

00:00.940 --> 00:02.940
Hello 大家好

00:02.940 --> 00:05.940
这一集我们来说一个新的一个链表

00:05.940 --> 00:07.940
叫做双向链表

00:07.940 --> 00:09.940
之前咱们说了一个

00:09.940 --> 00:11.940
说的都是单向链表

00:11.940 --> 00:13.940
我们管的就是单链表

00:13.940 --> 00:15.940
今天我们来说一个双链表

00:17.940 --> 00:21.450
我切一个分支

00:21.450 --> 00:23.450
12

00:23.450 --> 00:25.450
双向链表

00:36.540 --> 00:38.540
还是我们先创建一个节点

00:38.540 --> 00:40.540
这一回双向链表的节点创建

00:40.540 --> 00:43.540
和单链表的节点创建不太一样

00:43.540 --> 00:46.540
我们本来是只穿入一个Y6就行了是吧

00:46.540 --> 00:49.540
然后我们有什么Z次的Nex等于空是吧

00:49.540 --> 00:50.540
还有一个呢

00:50.540 --> 00:52.540
这回就没了是吧

00:52.540 --> 00:54.540
这回的是双链表是吧

00:54.540 --> 00:56.540
双链表的啥意思呢

00:56.540 --> 00:58.540
我不但要指向我的下一个

00:58.540 --> 01:00.540
我还可以指向我的上一个

01:01.540 --> 01:03.540
除了Z次的Nex的外

01:04.540 --> 01:08.040
我还有Z次的Last

01:09.040 --> 01:12.990
我们又管的就是Pread

01:12.990 --> 01:14.990
它有两个引用

01:14.990 --> 01:15.990
一个指向后面

01:15.990 --> 01:17.990
一个指向前面

01:17.990 --> 01:20.990
那这种链表有什么优点

01:21.990 --> 01:23.990
比如说Node1

01:25.990 --> 01:27.990
还是5个

01:27.990 --> 01:28.990
Node1

01:28.990 --> 01:34.160
2

01:34.160 --> 01:35.160
3

01:35.160 --> 01:36.160
4

01:36.160 --> 01:37.160
5 是吧

01:37.160 --> 01:38.160
1

01:38.160 --> 01:39.160
2

01:39.160 --> 01:40.160
3

01:40.160 --> 01:41.160
4

01:41.160 --> 01:42.160
5

01:42.160 --> 01:44.160
然后我要把这个

01:44.160 --> 01:46.160
5再变成双链表看好了

01:46.160 --> 01:49.160
Node1的Nex它等于Node2

01:49.160 --> 01:50.160
是吧

01:50.160 --> 01:52.160
然后Node2的Pread

01:52.160 --> 01:54.160
等于Node1

01:54.160 --> 01:57.160
然后Node2的Nex它

01:57.160 --> 02:00.160
等于Node3

02:00.160 --> 02:02.160
然后Node3的Pread

02:02.160 --> 02:04.160
等于Node2

02:04.160 --> 02:06.160
然后Node3的Nex它

02:06.160 --> 02:08.160
等于Node4

02:08.160 --> 02:11.160
然后Node4的Pread

02:11.160 --> 02:13.160
等于Node3

02:15.160 --> 02:18.160
然后Node4的Nex

02:18.160 --> 02:20.160
等于Node5

02:20.160 --> 02:23.160
然后Node5的Pread

02:23.160 --> 02:25.160
等于Node4

02:26.160 --> 02:28.160
是不是它就变成双键结构了

02:28.160 --> 02:29.160
是吧

02:29.160 --> 02:30.160
就是在学这个化学的时候

02:30.160 --> 02:31.160
这个原子键的键是吧

02:31.160 --> 02:32.160
现在是双键的

02:32.160 --> 02:33.160
对吧

02:33.160 --> 02:34.160
有来有回是吧

02:34.160 --> 02:35.160
两个键连接着

02:35.160 --> 02:37.160
它这个结构就更牢固是吧

02:39.160 --> 02:40.160
所以

02:40.160 --> 02:41.160
这一种链表

02:41.160 --> 02:42.160
记住

02:42.160 --> 02:43.160
这样链表

02:43.160 --> 02:44.160
你给我1

02:44.160 --> 02:45.160
我能1,2,3,4,5

02:45.160 --> 02:46.160
找到是吧

02:46.160 --> 02:47.160
你给我5

02:47.160 --> 02:48.160
我也能5,4,3,2,1找回来

02:48.160 --> 02:49.160
是吧

02:49.160 --> 02:50.160
你给我3

02:50.160 --> 02:51.160
它可以通过Pread,Pread,Pread

02:51.160 --> 02:52.160
找到2和1

02:52.160 --> 02:53.160
也可以通过Nex的Nex的

02:53.160 --> 02:54.160
找到4和5

02:54.160 --> 02:55.160
是吧

02:55.160 --> 02:57.160
所以说双向链表

02:58.160 --> 03:00.160
双向链表的优点

03:02.160 --> 03:03.160
是什么呢

03:03.160 --> 03:05.160
双向链表的优点是

03:05.160 --> 03:06.160
无论

03:06.160 --> 03:08.160
给出哪一个

03:09.160 --> 03:11.160
节点

03:11.160 --> 03:13.160
都能对

03:14.160 --> 03:16.160
整个链表

03:16.160 --> 03:18.160
进行链力

03:19.160 --> 03:21.160
无论你给出哪一个节点

03:21.160 --> 03:23.160
我都能对整个链表进行链力

03:23.160 --> 03:24.160
所以说

03:24.160 --> 03:25.160
对于双向链表来说

03:25.160 --> 03:27.160
我们不需要那么多的算法

03:27.160 --> 03:28.160
是吧

03:28.160 --> 03:29.160
都双向链表了

03:29.160 --> 03:30.160
哪边都能

03:30.160 --> 03:31.160
两边来回

03:31.160 --> 03:32.160
没有头没有尾

03:32.160 --> 03:33.160
记住

03:33.160 --> 03:34.160
双向链表

03:34.160 --> 03:35.160
没有头也没有尾

03:35.160 --> 03:36.160
你说1是头

03:36.160 --> 03:38.160
你也可以说50头

03:39.160 --> 03:40.160
它俩没有头没有尾

03:40.160 --> 03:42.160
只不过是两个引用而已

03:42.160 --> 03:44.160
你感觉现在叫Nex的和Prey

03:44.160 --> 03:45.160
你也可以管叫AKB

03:46.160 --> 03:47.160
无所谓

03:47.160 --> 03:49.160
所以双向链表没有头没有尾

03:49.160 --> 03:52.160
所以说双向链表也没有什么算法

03:52.160 --> 03:53.160
双向链表的话

03:53.160 --> 03:55.160
你就按照逻辑去做就可以了

03:55.160 --> 03:57.160
所以说双向链表能使用起来

03:57.160 --> 03:58.160
比较简单

03:59.160 --> 04:01.160
但是我们来说一下双向链表的缺点

04:04.110 --> 04:05.110
缺点就是

04:05.110 --> 04:08.110
我们要多耗费

04:08.110 --> 04:10.110
一个引用的空间

04:10.110 --> 04:15.300
而且

04:16.300 --> 04:17.300
购物件

04:17.300 --> 04:18.300
双向链表

04:22.150 --> 04:23.150
比较复杂

04:25.910 --> 04:26.910
多耗费一个引用的空间

04:26.910 --> 04:27.910
这个很好理解是吧

04:27.910 --> 04:29.910
我本来存一个数

04:29.910 --> 04:30.910
我加一个Nex的

04:30.910 --> 04:31.910
我就已经挺难为空间了

04:31.910 --> 04:33.910
让我们空间翻一倍

04:33.910 --> 04:35.910
我去你现在给我来个Prey是吧

04:35.910 --> 04:37.910
我又多一份可能又多一倍

04:37.910 --> 04:38.910
对吧

04:38.910 --> 04:39.910
所以说它很难为空间

04:39.910 --> 04:41.910
而且购物件的时候也比较复杂

04:41.910 --> 04:42.910
你也能看出来是吧

04:42.910 --> 04:44.910
我之前就Nex等于是已经完成了

04:44.910 --> 04:46.910
现在我不但就要考虑Nex的问题

04:46.910 --> 04:48.910
我就是还得考虑Prey的问题

04:49.910 --> 04:51.910
所以说它这个双向链表

04:51.910 --> 04:52.910
有优点有缺点

04:52.910 --> 04:53.910
而且

04:53.910 --> 04:55.910
双向链表能实现的

04:55.910 --> 04:57.910
能做到的一些东西

04:57.910 --> 04:59.910
能做到的一些东西

04:59.910 --> 05:01.910
我们用单链表都能做到

05:01.910 --> 05:03.910
双向链表能做到的单链链表

05:03.910 --> 05:04.910
几乎都能做到

05:04.910 --> 05:06.910
所以说我们也通常

05:06.910 --> 05:08.910
不会使用双链表

05:08.910 --> 05:10.910
所以通常不会使用双链表

05:10.910 --> 05:11.910
我们之所以要提

05:11.910 --> 05:12.910
也是因为让大家知道

05:12.910 --> 05:14.910
有这么个东西

05:14.910 --> 05:15.910
但是

05:15.910 --> 05:17.910
万一哪一天给你出了之后

05:17.910 --> 05:19.910
你别太忙

05:19.910 --> 05:20.910
你去双向链表

05:20.910 --> 05:22.910
你就用正常的逻辑去做就可以了

05:22.910 --> 05:24.910
双向链表没有什么特殊的算法

05:24.910 --> 05:26.910
就用正常的逻辑去做

05:27.910 --> 05:28.910
这就是双向链表

05:28.910 --> 05:30.910
咱们也不用太多的说

05:30.910 --> 05:32.910
双向链表没有什么特殊的算法

05:32.910 --> 05:34.910
也没有什么特别典型的席题

05:34.910 --> 05:37.910
它就是一个非常简单的双量

05:37.910 --> 05:38.910
有优点有缺点

05:38.910 --> 05:40.910
缺点比较重要而已

05:40.910 --> 05:42.910
所以说我们通常不用

05:43.910 --> 05:45.910
这就是双向链表

