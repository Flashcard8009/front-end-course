WEBVTT

00:01.840 --> 00:03.840
Hello 大家好

00:03.840 --> 00:07.840
经过上集我们说的左左双旋和右右双旋

00:07.840 --> 00:13.840
我们就可以把一颗不平衡的二叉排序数变成二叉平衡排序数

00:13.840 --> 00:15.840
是吧 我们经过了哪些步骤

00:15.840 --> 00:18.840
左右单旋是吧 左单旋右单旋是吧

00:18.840 --> 00:21.840
然后是左右双旋右左双旋

00:21.840 --> 00:23.840
然后是左左双旋右右双旋是吧

00:23.840 --> 00:25.840
这么多种情况下的判断

00:25.840 --> 00:29.840
可以把一颗不平衡的二叉排序数

00:29.840 --> 00:32.840
变为平衡的二叉排序数

00:32.840 --> 00:36.840
对吧 那我们现在要说的是

00:36.840 --> 00:40.840
二叉排序数 二叉平衡排序数

00:40.840 --> 00:46.150
二叉平衡排序数

00:46.150 --> 00:52.530
性能是极致吗

00:52.530 --> 00:55.530
那肯定不是 是吧 肯定不是

00:55.530 --> 01:05.530
如果我们要提升二叉平衡排序数的性能

01:05.530 --> 01:08.530
该如何做

01:08.530 --> 01:11.530
你说该如何做 你该这么打

01:11.530 --> 01:13.530
该如何做 你怎么打

01:13.530 --> 01:16.530
我们来想想 影响

01:16.530 --> 01:18.530
也就是我们换成另一个问题

01:18.530 --> 01:32.530
我们想二叉平衡排序数的性能的点在哪

01:32.530 --> 01:36.530
到底是什么东西影响了二叉平衡排序数的性能

01:36.530 --> 01:40.530
是吧 咱们来看一个问题

01:40.530 --> 01:42.530
首先这个问题

01:42.530 --> 01:54.480
如何才能让查找的效率尽可能的少

01:54.480 --> 01:58.480
如何能让查找的效率尽可能的少

01:58.480 --> 02:00.480
如何呀 是不是

02:00.480 --> 02:09.980
打这个数的层级越少

02:09.980 --> 02:14.420
查找效率越高啊

02:14.420 --> 02:16.420
对吧 我这个数的层次越少

02:16.420 --> 02:18.420
因为每一层都要进行一次比较

02:18.420 --> 02:21.420
层次越少 查找效率越高

02:21.420 --> 02:24.420
对吧 那你说二叉平衡排序数

02:24.420 --> 02:27.420
有什么东西能比二叉平衡排序数

02:27.420 --> 02:29.420
层级还少 他都已经平衡了 是吧

02:29.420 --> 02:31.420
他都已经够少的了

02:31.420 --> 02:35.420
我们怎么样

02:35.420 --> 02:45.420
怎么样才能让二叉平衡排序数的层数

02:45.420 --> 02:48.420
变得更少

02:48.420 --> 02:51.420
怎么样才能让二叉平衡排序数的层数变得更少呢

02:51.420 --> 02:54.420
我都说变成马二叉数变成都不太现实

02:54.420 --> 02:58.420
都不太好吧

02:58.420 --> 03:04.420
这个时候很多的数学家还有计算机科学家提出了一个想法

03:04.420 --> 03:09.420
我们为什么非得有两个差呢 是吧

03:09.420 --> 03:10.420
你比如说一百个数

03:10.420 --> 03:11.420
你如果两个差的话

03:11.420 --> 03:13.420
我估计得分个史来层 是吧

03:13.420 --> 03:16.420
如果你要能分四个差

03:16.420 --> 03:18.420
我估计四五层就搞定了

03:18.420 --> 03:21.420
对吧 你如果能分六个差

03:21.420 --> 03:24.420
那没准三两层就搞定了

03:24.420 --> 03:28.420
对吧 所以说我们为什么非要是二叉

03:28.420 --> 03:32.420
是吧 如果不是二叉

03:32.420 --> 03:39.420
性能层数会更少

03:39.420 --> 03:42.420
对吧 如果不是二叉

03:42.420 --> 03:46.420
性能层数会变得更少

03:46.420 --> 03:48.420
层数如果变得更少了

03:48.420 --> 03:51.420
它的差距效能就会变得更高

03:51.420 --> 03:55.420
然后影响二叉排序数的性能的点在哪呢

03:55.420 --> 04:02.420
在于

04:02.420 --> 04:07.420
二叉平衡排序数

04:07.420 --> 04:14.950
能有两个差

04:14.950 --> 04:21.950
导致在节点铺满的时候

04:21.950 --> 04:24.950
也会有很多层

04:24.950 --> 04:26.950
这是它的影响 它的一个点 是吧

04:26.950 --> 04:28.950
如果我不用二叉的

04:28.950 --> 04:29.950
我用三叉的

04:29.950 --> 04:31.950
我的层数会不会变得更少

04:31.950 --> 04:34.950
我用四叉的 那会不会更少

04:34.950 --> 04:38.950
对吧 还有一个在那呢

04:38.950 --> 04:41.950
我们现在一个节点只能存一个数 是吧

04:41.950 --> 04:42.950
一个节点存一个数

04:42.950 --> 04:44.950
我刚才用了一万个节点

04:44.950 --> 04:46.950
那就是存一万个数的话

04:46.950 --> 04:48.950
就得用一万个节点存 是吧

04:48.950 --> 04:51.950
十万个数据得用十万个节点存 是吧

04:51.950 --> 04:55.950
那我们的每一个节点里

04:55.950 --> 04:56.950
我们的每一个节点里

04:56.950 --> 04:58.950
除了这个value是有用的

04:58.950 --> 05:01.950
这个life和write都是没有用的数

05:01.950 --> 05:02.950
对吧

05:02.950 --> 05:04.950
这个life和write都是没有用的数

05:04.950 --> 05:05.950
也就是三个变量

05:05.950 --> 05:06.950
两个变量

05:06.950 --> 05:09.950
实际上是跟我要存储的内容是不相干的

05:09.950 --> 05:10.950
是吧

05:10.950 --> 05:13.950
我们希望

05:13.950 --> 05:21.950
希望可以一个节点存多个数

05:21.950 --> 05:23.950
这样可以提升

05:23.950 --> 05:28.950
可以提升空间的性能

05:28.950 --> 05:31.950
这个可以提升实际上的性能

05:31.950 --> 05:32.950
所以说

05:32.950 --> 05:34.950
我们希望二叉平衡排序数

05:34.950 --> 05:36.950
但是别用二叉

05:36.950 --> 05:38.950
看看我们特别优化一下

05:38.950 --> 05:39.950
叉叉变得更多

05:39.950 --> 05:41.950
导致层数变得更少

05:41.950 --> 05:43.950
可不可以让一个节点里面多存几个数

05:43.950 --> 05:46.950
这样的话能够节省大量的空间

05:46.950 --> 05:50.950
于是科学家们就研究出了一个数

05:50.950 --> 05:52.950
我们说让叉叉变多

05:52.950 --> 05:53.950
那是用三个叉呢

05:53.950 --> 05:54.950
还是用四个叉呢

05:54.950 --> 05:55.950
还是用五个叉呢

05:55.950 --> 05:56.950
还是用六个叉呢

05:56.950 --> 05:58.950
用几个叉最合理呢

05:58.950 --> 06:00.950
我们要知道一个点

06:00.950 --> 06:03.950
叉越多

06:03.950 --> 06:06.950
肯定层数越少

06:06.950 --> 06:10.950
但是叉越多

06:10.950 --> 06:14.950
这个数的结构

06:14.950 --> 06:18.950
就越负的

06:18.950 --> 06:19.950
是吧

06:19.950 --> 06:21.950
我们需要找到一个平衡点

06:21.950 --> 06:23.950
让它既不算太复杂

06:23.950 --> 06:26.950
也能够大量的减少层数

06:26.950 --> 06:28.950
然后这个活儿谁来干

06:28.950 --> 06:30.950
这个活儿其实是由数学家来干

06:30.950 --> 06:32.950
数学家会算出来这么一个值

06:32.950 --> 06:33.950
这个算出来得几呢

06:33.950 --> 06:35.950
算出来这个数的四

06:35.950 --> 06:39.950
也就是说我们最多让它有四个叉的时候

06:39.950 --> 06:40.950
最多有四个叉的时候

06:40.950 --> 06:43.950
它的性能是最好

06:43.950 --> 06:46.950
于是这个时候就演发出来一种新的数

06:46.950 --> 06:54.020
这种数叫做二三四数

06:54.020 --> 06:57.020
这个数叫做二三四数

06:57.020 --> 07:00.390
二三四数

07:00.390 --> 07:01.390
这个二三四数呢

07:01.390 --> 07:02.390
是我上学的时候

07:02.390 --> 07:04.390
我得老师跟我讲的

07:04.390 --> 07:06.390
这个二三四数你会发现

07:06.390 --> 07:07.390
各种的课本上

07:07.390 --> 07:09.390
或者是你买了一些算法的数

07:09.390 --> 07:11.390
都是没有这个东西的

07:11.390 --> 07:13.390
但是二三四数是你学

07:13.390 --> 07:15.390
二三四数的一个毕竟之路

07:15.390 --> 07:18.390
因为红黑数是由二三四数发展过来的

07:18.390 --> 07:20.390
但是因为咱们国内的教材

07:20.390 --> 07:21.390
都是只讲重点

07:21.390 --> 07:24.390
然后它会把不重点的变化过程给删掉

07:24.390 --> 07:26.390
然后导致就形成了一种断层

07:26.390 --> 07:28.390
让你不知道红黑数是怎么来的

07:28.390 --> 07:30.390
这样的话不太好

07:30.390 --> 07:31.390
所以我的课程里

07:31.390 --> 07:33.390
你会把二三四数为夹着

07:33.390 --> 07:35.390
告诉你二三四数是怎么来的

07:35.390 --> 07:37.390
然后再通过二三四数发展到红黑数

07:37.390 --> 07:40.390
这才是一个正常的一个

07:40.390 --> 07:43.390
算法发展的一个流程

07:43.390 --> 07:45.390
二三四数是怎么来的呢

07:45.390 --> 07:46.390
我们说二三四数

07:46.390 --> 07:47.390
我们希望

07:50.390 --> 07:51.390
我们希望

07:51.390 --> 07:52.390
有一颗数

07:54.390 --> 07:56.390
最多

07:56.390 --> 07:58.390
有

07:58.390 --> 08:00.390
四个分支

08:00.390 --> 08:01.390
四个差

08:01.390 --> 08:03.390
也就是杜维斯

08:04.390 --> 08:07.390
我希望有一颗这样的数

08:09.390 --> 08:10.390
来进行排序

08:10.390 --> 08:11.390
我们看一下

08:11.390 --> 08:13.390
这个数怎么进行排序

08:13.390 --> 08:15.390
本来假如我只有一个数

08:15.390 --> 08:16.390
只有一个数字

08:16.390 --> 08:18.390
我这个数字就直接就写在这儿

08:18.390 --> 08:20.390
比如说这个数字是八

08:20.390 --> 08:21.390
来个大点吧

08:21.390 --> 08:22.390
五十

08:23.390 --> 08:24.390
然后看好了

08:24.390 --> 08:26.390
我再来一个数

08:26.390 --> 08:27.390
比如说

08:27.390 --> 08:29.390
三十比五十小

08:29.390 --> 08:31.390
三十比五十小

08:31.390 --> 08:33.390
三十比五十小

08:33.390 --> 08:34.390
对吧

08:34.390 --> 08:35.390
但是我这个节点

08:35.390 --> 08:37.390
现在只存了一个数是吧

08:37.390 --> 08:39.390
我这个节点还能再存

08:39.390 --> 08:45.740
变成这样

08:45.740 --> 08:46.740
比如说

08:46.740 --> 08:47.740
再来一个数

08:47.740 --> 08:48.740
八十

08:48.740 --> 08:51.740
八十也能继续往这里存是吧

08:56.740 --> 08:57.740
它现在能有几个差呢

08:57.740 --> 08:59.740
小于三十的一个差

08:59.740 --> 09:00.740
是吧

09:00.740 --> 09:02.740
三十和五十之间的一个差

09:02.740 --> 09:04.740
五十和八十之间的一个差

09:04.740 --> 09:05.740
八十以上的一个差

09:05.740 --> 09:06.740
是吧

09:06.740 --> 09:07.740
已经有四个差

09:07.740 --> 09:08.740
是吧

09:08.740 --> 09:09.740
有四个区间了

09:09.740 --> 09:11.740
它还能往这个节点里添吗

09:11.740 --> 09:12.740
不能了是吧

09:12.740 --> 09:14.740
一个节点最多能放三个字

09:14.740 --> 09:15.740
然后你看

09:15.740 --> 09:17.740
假如说我这个再来一个数

09:17.740 --> 09:18.740
来一个四十

09:18.740 --> 09:19.740
怎么办

09:19.740 --> 09:21.740
这个节点放不下来

09:21.740 --> 09:22.740
看好了怎么办

09:22.740 --> 09:24.740
把五十提出去

09:31.340 --> 09:33.340
把五十提出去

09:34.340 --> 09:35.340
然后呢

09:35.340 --> 09:36.340
三十在五十的左边

09:36.340 --> 09:38.340
八十在五十的右边

09:47.630 --> 09:48.630
把五十提出去

09:48.630 --> 09:49.630
变成这种形状

09:49.630 --> 09:50.630
然后四十

09:50.630 --> 09:51.630
四十比五十小

09:51.630 --> 09:52.630
四十比三十大

09:52.630 --> 09:53.630
三十多少

09:53.630 --> 09:54.630
四十

09:56.630 --> 09:57.630
比如说你再来一个

09:57.630 --> 09:58.630
四十五

09:59.630 --> 10:00.630
四十五比五十小

10:00.630 --> 10:02.630
四十五比四十大

10:03.630 --> 10:04.630
在右边

10:04.630 --> 10:05.630
再写一个

10:05.630 --> 10:06.630
四十五

10:06.630 --> 10:07.630
你再来一个

10:07.630 --> 10:08.630
九十

10:08.630 --> 10:09.630
九十比八十大

10:09.630 --> 10:10.630
放这

10:11.630 --> 10:12.630
再来个一百

10:12.630 --> 10:13.630
一百比九十大

10:13.630 --> 10:14.630
放这

10:15.630 --> 10:16.630
再来一个

10:16.630 --> 10:17.630
你说我来个一百二

10:18.630 --> 10:19.630
怎么来

10:19.630 --> 10:20.630
看好了

10:20.630 --> 10:21.630
九十可以提出去

10:21.630 --> 10:23.630
九十提到上一层

10:24.630 --> 10:25.630
跟五十合

10:25.630 --> 10:26.630
九十

10:27.630 --> 10:31.200
九十跟五十合了之后

10:31.200 --> 10:32.200
看好了

10:32.200 --> 10:34.200
八十是在九十的左边

10:35.200 --> 10:37.200
八十本身是在九十的左边

10:46.440 --> 10:47.440
八十现在就在这

10:47.440 --> 10:49.440
在五十和九十的之间

10:50.440 --> 10:51.440
一百

10:51.440 --> 10:53.440
在九十的右边

10:53.440 --> 10:54.440
是一个这样的

10:54.440 --> 10:56.440
然后不是来个一百二吗

10:56.440 --> 10:57.440
一百二放在

10:57.440 --> 10:58.440
一百的右边

11:01.330 --> 11:02.330
这样

11:02.330 --> 11:04.330
你会发现一件事情

11:04.330 --> 11:05.330
什么事呢

11:05.330 --> 11:06.330
就是新来的节点

11:06.330 --> 11:07.330
永远都在最下层

11:08.330 --> 11:09.330
对吧

11:09.330 --> 11:11.330
新来的节点永远在最下层

11:11.330 --> 11:13.330
这棵树永远是平衡的

11:14.330 --> 11:15.330
这棵树的子节点

11:15.330 --> 11:16.330
永远在最下层

11:16.330 --> 11:18.330
所以这棵树永远都是平衡的

11:23.330 --> 11:24.330
这棵树的子节点

11:24.330 --> 11:25.330
永远在最下层

11:25.330 --> 11:27.330
这棵树永远是平衡的

11:27.330 --> 11:28.330
所以二三四树

11:30.330 --> 11:31.330
二三四树

11:34.330 --> 11:35.330
子节点

11:36.330 --> 11:39.330
永远在最后一层

11:41.330 --> 11:43.330
二三四树

11:45.330 --> 11:48.330
永远是平衡的

11:49.330 --> 11:51.330
因为它每一个分支

11:51.330 --> 11:53.330
每一个这个枝牙

11:53.330 --> 11:54.330
高度都相同

11:55.330 --> 11:57.330
每一个枝牙的高度都相同

11:58.330 --> 11:59.330
也就是

12:00.330 --> 12:01.330
每一个

12:03.330 --> 12:04.330
路径

12:05.330 --> 12:08.330
高度都相同

12:11.700 --> 12:13.700
每一个路径的高度都相同

12:13.700 --> 12:15.700
这是二三四树的特点

12:16.700 --> 12:18.700
那么有了二三四树了之后

12:18.700 --> 12:20.700
我们发现解决了一些问题

12:20.700 --> 12:22.700
首先分支变多了

12:22.700 --> 12:23.700
导致我的层数变少了

12:23.700 --> 12:25.700
你看我现在存了多少个树了

12:25.700 --> 12:28.700
存了八个树了

12:28.700 --> 12:29.700
我才用两层

12:29.700 --> 12:30.700
二三四树的话

12:30.700 --> 12:32.700
两层对对就存三个树

12:32.700 --> 12:33.700
两层我就存了八个树

12:33.700 --> 12:35.700
然后节点数变少

12:35.700 --> 12:37.700
我现在才有四个节点

12:37.700 --> 12:38.700
就存了八个树

12:38.700 --> 12:41.700
我这里还能还能继续容量

12:42.700 --> 12:43.700
所以说我的节点也变少了

12:43.700 --> 12:45.700
我的层数变多了

12:45.700 --> 12:48.700
所以我们达成了一定的效果

12:49.700 --> 12:52.700
达成了一定的效果

12:52.700 --> 12:53.700
也就是

12:54.700 --> 12:55.700
分支变多了

12:57.700 --> 12:58.700
层数变少了

13:01.080 --> 13:02.080
然后

13:04.080 --> 13:06.080
因为节点中

13:07.080 --> 13:09.080
存的树变多了

13:09.080 --> 13:12.080
所以节点变少了

13:14.080 --> 13:15.080
我们之前的两个

13:16.080 --> 13:18.080
两个愿望都已经实现了

13:19.080 --> 13:21.080
我们现在针对二三四树

13:21.080 --> 13:22.080
它就没有缺点了

13:22.080 --> 13:23.080
其实也有

13:23.080 --> 13:26.080
它毕竟是多差的

13:28.520 --> 13:30.520
二三四树它毕竟是多差的

13:30.520 --> 13:33.520
所以因为分支多了

13:35.520 --> 13:38.520
所以复杂度上升了

13:41.520 --> 13:44.520
所以我们希望能对二三四树进行减化

13:45.520 --> 13:47.520
我们希望对

13:47.520 --> 13:52.520
二三四树进行减化

13:54.520 --> 13:55.520
希望能什么呢

13:55.520 --> 14:01.520
希望能减化为二茶树

14:01.520 --> 14:08.520
然后希望依旧保留多差

14:09.520 --> 14:19.090
希望依旧单节点中存放多个值

14:20.090 --> 14:23.090
有同学说你这个脑子看来有毛病是吧

14:23.090 --> 14:25.090
你都希望减化为二茶树了

14:25.090 --> 14:27.090
你居然还能希望保留多差

14:27.090 --> 14:29.090
这是不是脑子有毛病

14:29.090 --> 14:30.090
都说了二茶树了

14:30.090 --> 14:31.090
你还怎么多差

14:31.090 --> 14:35.090
然后说希望依旧保留单节点中存放多个值

14:35.090 --> 14:37.090
二茶树中一个节点中就一个值

14:37.090 --> 14:39.090
你怎么存放多个值

14:39.090 --> 14:41.090
看似都是不可能的

14:41.090 --> 14:45.090
这才是红黑树出现的原因

14:46.090 --> 14:48.090
那红黑树到底是什么

14:48.090 --> 14:50.090
我们下一集来说红黑树

