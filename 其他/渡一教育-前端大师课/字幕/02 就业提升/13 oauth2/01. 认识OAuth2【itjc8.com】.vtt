WEBVTT

00:01.580 --> 00:03.580
各位同学 大家好

00:03.580 --> 00:06.580
从这节课开始 我们来讲一下这个OAOS

00:06.580 --> 00:10.580
首先我们要来看第一个问题 什么是OAOS

00:10.580 --> 00:13.580
OAOS它其实是一个关于授权

00:13.580 --> 00:16.580
authorization的一个开放网络标准协议

00:16.580 --> 00:20.580
简单的理解就是一种授权的机制

00:20.580 --> 00:25.580
它是在客户端和资源所有者之间的一个授权层

00:25.580 --> 00:30.580
它其实是用来进行两种不同角色的分离来进行使用的

00:30.580 --> 00:34.580
比如说在资源的所有者同意的情况下

00:34.580 --> 00:38.580
然后我们向客户端颁发一个指定的令牌之后

00:38.580 --> 00:45.580
客户端写在这个令牌可以访问资源所有者的一些相关资源

00:45.580 --> 00:47.580
也就是说我们可以理解为什么

00:47.580 --> 00:52.580
就是说当我们一个应用去访问另外一个应用数据的时候

00:52.580 --> 00:55.580
实现了一种全线处理的办法

00:55.580 --> 00:59.580
在这个里面我们也写了 叫OAOS2

00:59.580 --> 01:03.580
OAOS2它其实是OAOS协议的一个版本

01:03.580 --> 01:06.580
有OAOS2一定是有OAOS1

01:06.580 --> 01:08.580
但是OAOS它有一个特点

01:08.580 --> 01:11.580
就是在OAOS2 2.0版本里面

01:11.580 --> 01:13.580
它是不兼容1.0版本的

01:13.580 --> 01:18.580
所以说相当于1.0版本已经废弃了

01:18.580 --> 01:21.580
那么我们在接下来的讲课过程当中

01:21.580 --> 01:26.580
只要说到OAOS其实都是代表了OAOS2的这个版本

01:26.580 --> 01:28.580
OAOS2这个东西

01:28.580 --> 01:32.580
我们可能在学习之前对它不是特别了解

01:32.580 --> 01:36.580
但是平时我们上网其实每天都是有接触到的

01:36.580 --> 01:38.580
只要是我们登陆一个网站

01:38.580 --> 01:42.580
假如说我们通过一些三方账户的信息来进行登陆的话

01:42.580 --> 01:48.580
这里面大多数都是通过这种OAOS的方式来进行实现的

01:48.580 --> 01:50.580
我们可以测试一下

01:50.580 --> 01:52.580
这个里面有一个知乎的网站

01:52.580 --> 01:53.580
我们打开

01:53.580 --> 01:55.580
打开之后这个知乎网站

01:55.580 --> 01:57.580
有一些常规的登陆方式

01:57.580 --> 02:00.580
也就是说在这个当前知乎这个服务下面

02:00.580 --> 02:02.580
我们可以使用这种电话号码

02:02.580 --> 02:04.580
包括这种传统的密码

02:04.580 --> 02:06.580
包括邮箱的形式来进行登陆

02:06.580 --> 02:08.580
但是在下面咱们看到了

02:08.580 --> 02:10.580
这里面有一个社交账号

02:10.580 --> 02:13.580
也就是说除了这些传统的登陆

02:13.580 --> 02:14.580
方法之外

02:14.580 --> 02:16.580
还有一些微信QQ

02:16.580 --> 02:19.580
包括微博的一个三方应用的来进登陆

02:19.580 --> 02:21.580
比如说我打开微信这个

02:21.580 --> 02:23.580
那么我们现在就可以通过手机端的微信

02:23.580 --> 02:25.580
一个扫码来实现一个登陆

02:25.580 --> 02:28.580
那这个其实就是通过OAOS

02:28.580 --> 02:31.580
这种全线的一个处理来进行完成的

02:31.580 --> 02:34.580
所以说我们每天在上网过程当中

02:34.580 --> 02:36.580
OAOS里面所设计到的

02:36.580 --> 02:39.580
三方全线处理这一块的内容

02:39.580 --> 02:41.580
其实还是很多的

02:41.580 --> 02:43.580
那我们来想一个问题

02:43.580 --> 02:47.580
为什么会有OAOS这种授权协议的出现

02:47.580 --> 02:51.580
首先我们可以想象一下生活场景

02:51.580 --> 02:53.580
我们可以看一下这张图片

02:53.580 --> 02:57.580
比如说我们住在一个小区里面

02:57.580 --> 02:59.580
然后这个小区是封闭的

02:59.580 --> 03:02.580
并且它有一个门禁的系统

03:02.580 --> 03:03.580
那我作为业主

03:03.580 --> 03:05.580
也就是说本小区的业主

03:05.580 --> 03:08.580
我是有自己的账户跟密码的

03:08.580 --> 03:10.580
所以作为我个人来讲

03:10.580 --> 03:13.580
可以很轻松的进入到这个小区

03:13.580 --> 03:15.580
但是我们生活当中

03:15.580 --> 03:18.580
可能会经常点一些外卖

03:18.580 --> 03:22.580
那么如果说外卖员想进入这个小区

03:22.580 --> 03:23.580
怎么办呢

03:23.580 --> 03:25.580
也就是说我必须找到一个办法

03:25.580 --> 03:29.580
让外卖员可以通过这个门禁系统

03:29.580 --> 03:31.580
来进入到我们的小区

03:31.580 --> 03:33.580
那如果说这里面有一个问题

03:33.580 --> 03:35.580
就是我要是把自己的这个密码

03:35.580 --> 03:37.580
告诉这个外卖员的话

03:37.580 --> 03:39.580
那这里面呢

03:39.580 --> 03:41.580
就会产生一个什么问题呢

03:41.580 --> 03:44.580
就是万一他哪天不做外卖员了

03:44.580 --> 03:47.580
我想取消他进入小区的权利

03:47.580 --> 03:48.580
处理起来啊

03:48.580 --> 03:49.580
是比较麻烦的

03:49.580 --> 03:51.580
那我自己的密码啊

03:51.580 --> 03:53.580
很有可能也得跟着更改了

03:53.580 --> 03:54.580
并且呢

03:54.580 --> 03:56.580
要是有其他平台的外卖员

03:56.580 --> 03:58.580
再来给我送外卖的话

03:58.580 --> 03:59.580
如果说我改了密码

03:59.580 --> 04:01.580
还得通知其他的外卖员

04:01.580 --> 04:03.580
那解决这种问题的办法呢

04:03.580 --> 04:05.580
就是使用这种also的形式

04:05.580 --> 04:07.580
来实现一个授权

04:07.580 --> 04:10.580
完成这种需求

04:10.580 --> 04:12.580
那么这种授权的形式

04:12.580 --> 04:13.580
是什么样的呢

04:13.580 --> 04:16.580
我们可以看一下下面这张图片

04:16.580 --> 04:17.580
首先呢

04:17.580 --> 04:19.580
还是刚才的这个初衷

04:19.580 --> 04:20.580
我们本质上

04:20.580 --> 04:21.580
其实就是想让外卖员

04:21.580 --> 04:24.580
临时性的可以通过这个门禁

04:24.580 --> 04:25.580
然后呢

04:25.580 --> 04:26.580
所以呢

04:26.580 --> 04:28.580
我们会在门禁系统啊

04:28.580 --> 04:30.580
他的这个输入密码的下面

04:30.580 --> 04:31.580
增加一个按钮

04:31.580 --> 04:33.580
这个按钮是干什么用的呢

04:33.580 --> 04:34.580
其实啊

04:34.580 --> 04:35.580
这个按钮主要就是

04:35.580 --> 04:37.580
做这个获取授权的

04:37.580 --> 04:39.580
那么首先第一步

04:39.580 --> 04:41.580
快递员如果说

04:41.580 --> 04:44.580
去想进入到这个小区的话

04:44.580 --> 04:46.580
是要进行一个申请授权

04:46.580 --> 04:48.580
当他按下这个按钮之后

04:48.580 --> 04:50.580
也就是说在这个里面

04:50.580 --> 04:51.580
然后呢

04:51.580 --> 04:52.580
我的手机里面

04:52.580 --> 04:55.580
就会跳出一个对话框

04:55.580 --> 04:56.580
提示我呢

04:56.580 --> 04:58.580
说现在有人正在要求授权

04:58.580 --> 04:59.580
并且呢

04:59.580 --> 05:00.580
这个系统里面

05:00.580 --> 05:02.580
可能还会显示一些

05:02.580 --> 05:04.580
这个快递员的姓名

05:04.580 --> 05:05.580
公号

05:05.580 --> 05:07.580
以及他的这个所属的快递公司

05:07.580 --> 05:08.580
那这时候呢

05:08.580 --> 05:10.580
我就开始进行

05:10.580 --> 05:13.580
对他这个授权请求的一个

05:13.580 --> 05:14.580
确认

05:14.580 --> 05:15.580
也就是说

05:15.580 --> 05:17.580
看他的信息是否属实

05:17.580 --> 05:19.580
如果我验证他的信息

05:19.580 --> 05:20.580
没有问题的话

05:20.580 --> 05:21.580
那在这个里面呢

05:21.580 --> 05:24.580
我们就可以给他进行一个授权

05:24.580 --> 05:26.580
也就是说我点击这个

05:26.580 --> 05:27.580
确定按钮

05:27.580 --> 05:29.580
告诉门禁系统

05:29.580 --> 05:30.580
然后呢

05:30.580 --> 05:33.580
我是同意对他进行一个授权的

05:33.580 --> 05:34.580
那

05:34.580 --> 05:35.580
接下来呢

05:35.580 --> 05:36.580
门禁系统

05:36.580 --> 05:39.580
得到我的一个确认之后

05:39.580 --> 05:40.580
向快递员

05:40.580 --> 05:42.580
实施了一个进入小区的

05:42.580 --> 05:43.580
一个令牌

05:43.580 --> 05:44.580
那令牌呢

05:44.580 --> 05:47.580
就是类似密码的一串数字

05:47.580 --> 05:49.580
只在短期内

05:49.580 --> 05:50.580
比如说可能是7天

05:50.580 --> 05:52.580
或者是3天有效

05:52.580 --> 05:53.580
那么快递员呢

05:53.580 --> 05:54.580
就可以向门禁系统

05:54.580 --> 05:56.580
来进行这个

05:56.580 --> 05:58.580
我们得到的这个

05:58.580 --> 06:00.580
头看的一个输入

06:00.580 --> 06:01.580
然后呢

06:01.580 --> 06:03.580
也就是说输入到这个输入

06:03.580 --> 06:04.580
把这个令牌进行一个输入

06:04.580 --> 06:06.580
进入到这个小区里面

06:06.580 --> 06:07.580
这个呢

06:07.580 --> 06:09.580
就是他的整个的一个

06:10.580 --> 06:11.580
在这里呢

06:11.580 --> 06:12.580
给大家写上了

06:12.580 --> 06:13.580
其实

06:13.580 --> 06:14.580
第一步就是说什么呢

06:14.580 --> 06:15.580
我们在这个里面

06:15.580 --> 06:17.580
来进行一个审请权限

06:17.580 --> 06:18.580
然后呢

06:18.580 --> 06:19.580
我呢

06:19.580 --> 06:20.580
同意你来进入这一个小区

06:20.580 --> 06:21.580
那

06:21.580 --> 06:22.580
并且呢

06:22.580 --> 06:23.580
给你颁发了一个令牌

06:23.580 --> 06:24.580
我就根据这个令牌

06:24.580 --> 06:25.580
来进行输入

06:25.580 --> 06:26.580
输入之后

06:26.580 --> 06:27.580
那我直接就进入到小区

06:27.580 --> 06:28.580
就OK了

06:28.580 --> 06:29.580
这个呢

06:29.580 --> 06:30.580
就是我们生活当中的

06:30.580 --> 06:31.580
一个场景

06:31.580 --> 06:33.580
那么这种生活当中的例子

06:33.580 --> 06:35.580
应设到互联网里面

06:35.580 --> 06:36.580
是什么样的

06:36.580 --> 06:37.580
也就是说

06:37.580 --> 06:38.580
在这个互联网当中

06:38.580 --> 06:39.580
是怎么实现

06:39.580 --> 06:41.580
这种OSL的一个授权方式呢

06:41.580 --> 06:42.580
我们来看一下

06:42.580 --> 06:43.580
这张图片

06:43.580 --> 06:44.580
首先一个用户

06:44.580 --> 06:45.580
也就是说我本人

06:45.580 --> 06:47.580
打开支呼的这个网站

06:47.580 --> 06:50.580
选择以微信这种形式

06:50.580 --> 06:52.580
来进行一个支呼的登录

06:52.580 --> 06:53.580
那么此时呢

06:53.580 --> 06:54.580
支呼就会向微信

06:54.580 --> 06:56.580
发起一个授权请求

06:56.580 --> 06:57.580
也就是说

06:57.580 --> 06:59.580
我们发起一个UAL

06:59.580 --> 07:00.580
那这个UAL里面

07:00.580 --> 07:02.580
会携带一些信息

07:02.580 --> 07:03.580
然后一会呢

07:03.580 --> 07:04.580
我们会一侧

07:04.580 --> 07:05.580
给大家讲到的

07:05.580 --> 07:06.580
也就是说

07:06.580 --> 07:08.580
分别都是做什么用的

07:08.580 --> 07:09.580
那这些信息里面呢

07:09.580 --> 07:10.580
一定会有一个

07:10.580 --> 07:13.580
同意授权之后的一个跳转地址

07:13.580 --> 07:14.580
接下来呢

07:14.580 --> 07:15.580
微信就是寻问

07:15.580 --> 07:17.580
用户是否同意授权

07:17.580 --> 07:18.580
一般的呢

07:18.580 --> 07:20.580
这种形式是一个弹窗的

07:20.580 --> 07:22.580
这种方式来进行

07:22.580 --> 07:24.580
授权的这么一个操作的

07:24.580 --> 07:25.580
刚才我们也看到了

07:25.580 --> 07:26.580
支呼其实就是

07:26.580 --> 07:28.580
用这种方式来实现的

07:28.580 --> 07:30.580
比如说再给大家看一下

07:30.580 --> 07:32.580
我打开这个微信之后

07:32.580 --> 07:33.580
这里面就会有一个弹窗

07:33.580 --> 07:34.580
对不对

07:34.580 --> 07:35.580
其实就是这样

07:35.580 --> 07:36.580
然后呢

07:36.580 --> 07:37.580
用户如果说

07:37.580 --> 07:39.580
我们同意授权之后

07:39.580 --> 07:41.580
微信也就是说这个弹窗

07:41.580 --> 07:43.580
会跳转一个地址

07:43.580 --> 07:44.580
那这个地址呢

07:44.580 --> 07:45.580
就是我们刚才

07:45.580 --> 07:48.580
请求授权携带的那个地址参数

07:48.580 --> 07:49.580
并且呢

07:49.580 --> 07:50.580
在这个参数里面

07:50.580 --> 07:52.580
会返回一个扣的

07:52.580 --> 07:53.580
然后呢

07:53.580 --> 07:54.580
这个扣的

07:54.580 --> 07:55.580
就是授权码

07:55.580 --> 07:56.580
它呢

07:56.580 --> 07:57.580
也是UAL

07:57.580 --> 07:58.580
UAL所里面

07:58.580 --> 08:00.580
一种经常使用到的授权方式

08:00.580 --> 08:02.580
支呼拿到这个授权码之后

08:02.580 --> 08:04.580
再次对微信这个三方应用

08:04.580 --> 08:06.580
发起请求

08:06.580 --> 08:07.580
并且呢

08:07.580 --> 08:08.580
携带这个授权码

08:08.580 --> 08:10.580
为什么要有这个授权码

08:10.580 --> 08:12.580
其实就是让微信知道

08:12.580 --> 08:14.580
在这么多的三方账户里面

08:14.580 --> 08:16.580
我的一个唯一标识

08:16.580 --> 08:17.580
也就是说

08:17.580 --> 08:19.580
本次的一个请求标识

08:19.580 --> 08:20.580
那这次请求

08:20.580 --> 08:21.580
其实是要做什么呢

08:21.580 --> 08:22.580
其实就是开始

08:22.580 --> 08:25.580
进行一个真正的令牌的获取了

08:25.580 --> 08:26.580
也就是说

08:26.580 --> 08:28.580
这个XS Token

08:28.580 --> 08:29.580
一个获取

08:29.580 --> 08:30.580
那么此时微信啊

08:30.580 --> 08:31.580
接受到这个请求之后

08:31.580 --> 08:33.580
开始对这个授权码

08:33.580 --> 08:34.580
进行一个验证

08:34.580 --> 08:36.580
如果说没有问题

08:36.580 --> 08:38.580
就返回一个

08:38.580 --> 08:39.580
XS Token

08:39.580 --> 08:41.580
也就是说一个令牌

08:41.580 --> 08:42.580
在这里面呢

08:42.580 --> 08:43.580
跟同学们啊

08:43.580 --> 08:44.580
重申一下

08:44.580 --> 08:45.580
这个令牌啊

08:45.580 --> 08:47.580
一定是有时间限制的

08:47.580 --> 08:50.580
之后获得这个令牌之后呢

08:50.580 --> 08:52.580
它就开始在请求头里面

08:52.580 --> 08:54.580
进行这个令牌的一个携带

08:54.580 --> 08:55.580
然后呢

08:55.580 --> 08:56.580
获取微信里面

08:56.580 --> 08:58.580
关于用户的一个信息

08:58.580 --> 08:59.580
也就是说

08:59.580 --> 09:00.580
个人的一些信息

09:00.580 --> 09:01.580
这个呢

09:01.580 --> 09:03.580
简单的实现流程啊

09:03.580 --> 09:04.580
在这里

09:04.580 --> 09:05.580
同学们要明确一点

09:05.580 --> 09:07.580
就是一个OASA的实现啊

09:07.580 --> 09:10.580
它是一定有三种不同的角色

09:10.580 --> 09:11.580
第一个呢

09:11.580 --> 09:12.580
就是用户

09:12.580 --> 09:13.580
也就是说

09:13.580 --> 09:14.580
我们自己

09:14.580 --> 09:16.580
我们首先处罚了三方应用

09:16.580 --> 09:17.580
也就是说

09:17.580 --> 09:19.580
这个知乎使用微信

09:19.580 --> 09:20.580
这种形式

09:20.580 --> 09:22.580
进行登录的这么一个操作

09:22.580 --> 09:24.580
然后在微信应用里面

09:24.580 --> 09:25.580
我们又进行了

09:25.580 --> 09:27.580
一个授权确认的这样一个操作

09:27.580 --> 09:28.580
第二个角色呢

09:28.580 --> 09:29.580
就是说

09:29.580 --> 09:30.580
这个三方应用

09:30.580 --> 09:32.580
就是说在这张图里面

09:32.580 --> 09:33.580
我们可以把它理解为

09:33.580 --> 09:34.580
就是这个知乎

09:34.580 --> 09:35.580
它呢

09:35.580 --> 09:37.580
主要负责获取这个

09:37.580 --> 09:39.580
也就是说这个令牌

09:39.580 --> 09:41.580
第三个就是这个微信

09:41.580 --> 09:43.580
那这个应用服务啊

09:43.580 --> 09:45.580
它主要是对这种三方应用

09:45.580 --> 09:47.580
也就是说知乎的一个针点

09:47.580 --> 09:48.580
并且呢

09:48.580 --> 09:49.580
进行一个

09:49.580 --> 09:52.580
用户信息返回的这么一个角色

09:52.580 --> 09:53.580
在这里呢

09:53.580 --> 09:54.580
我们还可以这样理解啊

09:54.580 --> 09:55.580
就是说

09:55.580 --> 09:56.580
首先居民小区

09:56.580 --> 09:58.580
就是存储用户数据的

09:58.580 --> 09:59.580
一个网络服务

09:59.580 --> 10:01.580
微信存出了我好友的信息

10:01.580 --> 10:02.580
获取这些信息

10:02.580 --> 10:03.580
就必须

10:03.580 --> 10:05.580
你要经过微信的一个门禁系统

10:05.580 --> 10:06.580
那其次呢

10:06.580 --> 10:07.580
就是快递员

10:07.580 --> 10:08.580
或者说是快递公司

10:08.580 --> 10:09.580
在这里面

10:09.580 --> 10:10.580
就是这个三方应用

10:10.580 --> 10:11.580
比如说知乎

10:11.580 --> 10:13.580
想要穿过这个门禁系统

10:13.580 --> 10:15.580
进入到小区

10:15.580 --> 10:17.580
然后它是有这么一个

10:17.580 --> 10:18.580
处理的情求的

10:18.580 --> 10:19.580
然后呢

10:19.580 --> 10:20.580
我呢

10:20.580 --> 10:21.580
其实就是这个

10:21.580 --> 10:22.580
本人同意授权

10:22.580 --> 10:23.580
三方应用

10:23.580 --> 10:24.580
进入到小区

10:24.580 --> 10:25.580
获取我的数据信息

10:25.580 --> 10:26.580
就是这样

10:26.580 --> 10:27.580
它在生活当中

10:27.580 --> 10:28.580
其实

10:28.580 --> 10:29.580
然后呢

10:29.580 --> 10:30.580
我们还可以理解为什么呢

10:30.580 --> 10:31.580
其实

10:31.580 --> 10:32.580
就是一种授权机制

10:32.580 --> 10:34.580
数据的所有者

10:34.580 --> 10:35.580
告诉谁呢

10:35.580 --> 10:36.580
告诉系统

10:36.580 --> 10:37.580
同意授权

10:37.580 --> 10:38.580
第三方应用

10:38.580 --> 10:39.580
进入系统

10:39.580 --> 10:40.580
然后获取这些数据

10:40.580 --> 10:42.580
系统从而产生一个

10:42.580 --> 10:44.580
短期的一个进入令牌

10:44.580 --> 10:46.580
大家一定要知道

10:46.580 --> 10:48.580
是一个短期的进入令牌

10:48.580 --> 10:50.580
用来代替密码

10:50.580 --> 10:52.580
供第三方进行一个使用

10:52.580 --> 10:53.580
也就是说

10:53.580 --> 10:54.580
供这个知乎栏进行使用

10:54.580 --> 10:55.580
那么

10:55.580 --> 10:57.580
它这个短期的令牌

10:57.580 --> 10:59.580
这个token跟我们的这个

10:59.580 --> 11:00.580
密码有什么区别呢

11:00.580 --> 11:01.580
其实令牌

11:01.580 --> 11:03.580
有一些它自己的特点的

11:03.580 --> 11:04.580
首先呢

11:04.580 --> 11:06.580
它的这个有效期比较短

11:06.580 --> 11:07.580
然后到期呢

11:07.580 --> 11:09.580
就会自动进行实销

11:09.580 --> 11:10.580
然后呢

11:10.580 --> 11:11.580
用户自己啊

11:11.580 --> 11:12.580
无法来进行一个修改

11:12.580 --> 11:13.580
也就是说

11:13.580 --> 11:14.580
用户不可以修改

11:14.580 --> 11:15.580
那这种

11:15.580 --> 11:16.580
它跟密码就区别了

11:16.580 --> 11:17.580
密码是一个什么

11:17.580 --> 11:18.580
长期有效的

11:18.580 --> 11:19.580
对不对

11:19.580 --> 11:20.580
而且呢

11:20.580 --> 11:21.580
我们用户可以进行一个

11:21.580 --> 11:22.580
自行的这个用户信息的

11:22.580 --> 11:23.580
一个修改啊

11:23.580 --> 11:24.580
第二个呢

11:24.580 --> 11:25.580
就是什么呢

11:25.580 --> 11:26.580
可以被数据的

11:26.580 --> 11:27.580
所有者撤销

11:27.580 --> 11:28.580
然后呢

11:28.580 --> 11:29.580
会立即实销

11:29.580 --> 11:30.580
也就是说

11:30.580 --> 11:31.580
在这个微信里面啊

11:31.580 --> 11:32.580
我们直接的

11:32.580 --> 11:34.580
就是可以把它给取消掉

11:34.580 --> 11:35.580
这个是ok 没问题的

11:35.580 --> 11:36.580
而且呢

11:36.580 --> 11:38.580
它是有一个全线范围的

11:38.580 --> 11:40.580
对于这种网络服务来说

11:40.580 --> 11:41.580
只读令牌

11:41.580 --> 11:42.580
它就会比这种

11:42.580 --> 11:43.580
读写令牌

11:43.580 --> 11:44.580
更加的安全

11:44.580 --> 11:45.580
也就是说

11:45.580 --> 11:47.580
你拿到这个令牌之后啊

11:47.580 --> 11:49.580
你获取我用户信息的时候

11:49.580 --> 11:50.580
你只是有一个

11:50.580 --> 11:52.580
读取的这么一个全线

11:52.580 --> 11:53.580
然后呢

11:53.580 --> 11:54.580
你没有写的全线

11:54.580 --> 11:55.580
这个呢

11:55.580 --> 11:57.580
要明确一点啊

11:57.580 --> 11:58.580
其实令牌呢

11:58.580 --> 11:59.580
它还可以总结为什么呢

11:59.580 --> 12:00.580
可以让这种

12:00.580 --> 12:02.580
第三方运用获得全线

12:02.580 --> 12:03.580
同时呢

12:03.580 --> 12:04.580
又随时可控

12:04.580 --> 12:05.580
它不会危及到

12:05.580 --> 12:07.580
一些系统的安全

12:07.580 --> 12:08.580
因为这里面啊

12:08.580 --> 12:09.580
再跟大家说一下

12:09.580 --> 12:10.580
本身

12:10.580 --> 12:11.580
如果说

12:11.580 --> 12:13.580
涉及到一个授权的问题

12:13.580 --> 12:14.580
那就是

12:14.580 --> 12:15.580
只能说明一点

12:15.580 --> 12:16.580
某一方运用

12:16.580 --> 12:17.580
对另一方运用的

12:17.580 --> 12:18.580
一个不信任

12:18.580 --> 12:19.580
那比如说

12:19.580 --> 12:20.580
这种

12:20.580 --> 12:21.580
微信和支付

12:21.580 --> 12:22.580
大家都知道

12:22.580 --> 12:23.580
是两个公司的

12:23.580 --> 12:24.580
并且呢

12:24.580 --> 12:25.580
他们也是属于

12:25.580 --> 12:26.580
两个不同的产品

12:26.580 --> 12:27.580
所以说呢

12:27.580 --> 12:28.580
它这里面

12:28.580 --> 12:29.580
是有一个授权

12:29.580 --> 12:30.580
也就是说

12:30.580 --> 12:31.580
我真别你是否可靠

12:31.580 --> 12:33.580
可信这么一个过程的

12:33.580 --> 12:35.580
这个同学们知道一下

12:35.580 --> 12:36.580
然后呢

12:36.580 --> 12:37.580
还有一点

12:37.580 --> 12:38.580
同学们要明确一下

12:38.580 --> 12:39.580
就是什么呢

12:39.580 --> 12:40.580
如果说

12:40.580 --> 12:41.580
你只要知道了令牌

12:41.580 --> 12:42.580
就能进入到

12:42.580 --> 12:43.580
这个系统里面

12:43.580 --> 12:44.580
系统呢

12:44.580 --> 12:45.580
就是一般

12:45.580 --> 12:46.580
不会再进行

12:46.580 --> 12:47.580
身份的确认了

12:47.580 --> 12:48.580
所以说呢

12:48.580 --> 12:49.580
令牌必须要

12:49.580 --> 12:50.580
做一个保密

12:50.580 --> 12:51.580
一般的

12:51.580 --> 12:53.580
我们都是由后端

12:53.580 --> 12:55.580
这个令牌的一个处理

12:55.580 --> 12:56.580
也就是说

12:56.580 --> 12:57.580
刚才其实

12:57.580 --> 12:58.580
我们看到的这几步

12:58.580 --> 12:59.580
除了我们登录之外

12:59.580 --> 13:00.580
然后呢

13:00.580 --> 13:01.580
其他的操作

13:01.580 --> 13:03.580
都是由后端来实现的

13:03.580 --> 13:04.580
当我们拿到

13:04.580 --> 13:06.580
真正的这个token之后

13:06.580 --> 13:07.580
那我们就在这个

13:07.580 --> 13:08.580
我们也就是说

13:08.580 --> 13:09.580
拿到令牌之后

13:09.580 --> 13:11.580
再来返回给前端

13:11.580 --> 13:12.580
然后获取到

13:12.580 --> 13:13.580
这个登录信息之后

13:13.580 --> 13:14.580
返回给前端

13:14.580 --> 13:15.580
是这么一个过程的

13:15.580 --> 13:16.580
也就是说

13:16.580 --> 13:17.580
所有的都是

13:17.580 --> 13:18.580
从后端来实现的

13:18.580 --> 13:19.580
这样相对

13:19.580 --> 13:21.580
更安全一些啊

13:21.580 --> 13:22.580
然后呢

13:22.580 --> 13:23.580
也是说

13:23.580 --> 13:24.580
为什么令牌啊

13:24.580 --> 13:25.580
它是会一定

13:25.580 --> 13:26.580
设置一个有效期

13:26.580 --> 13:27.580
而且呢

13:27.580 --> 13:28.580
这个有效期啊

13:28.580 --> 13:29.580
一般设置很短的

13:29.580 --> 13:31.580
这样一个原因了啊

13:31.580 --> 13:32.580
那这几个课呢

13:32.580 --> 13:33.580
我们对这个

13:33.580 --> 13:34.580
呃

13:34.580 --> 13:36.580
做了一个简单的介绍

13:36.580 --> 13:37.580
那下几课呢

13:37.580 --> 13:38.580
咱们就来说一下

13:38.580 --> 13:40.580
这个令牌的一个

13:40.580 --> 13:41.580
获取这么一个

13:41.580 --> 13:43.580
实现的集中方式啊

13:43.580 --> 13:44.580
而且呢

13:44.580 --> 13:45.580
我们会把这里面

13:45.580 --> 13:46.580
每一步的

13:46.580 --> 13:47.580
里面设计到

13:47.580 --> 13:48.580
来回传递的

13:48.580 --> 13:50.580
这个鞋带的参说

13:50.580 --> 13:51.580
给大家做一个讲解

13:51.580 --> 13:53.580
那么咱们这几课就到这里

