WEBVTT

00:00.820 --> 00:03.820
好 什么是访问器呢

00:03.820 --> 00:06.820
访问器呢 它的作用是

00:06.820 --> 00:08.820
先记一下它的作用

00:08.820 --> 00:15.820
它的作用是用于控制属性的读取

00:15.820 --> 00:17.820
要读取一个属性值的时候

00:17.820 --> 00:19.820
可以经过一系列的控制

00:19.820 --> 00:24.820
控制属性的读取和复制

00:24.820 --> 00:26.820
这就是访问器的作用

00:26.820 --> 00:27.820
咱们来举个例子

00:27.820 --> 00:30.820
比方说这里的贴室这个内

00:30.820 --> 00:31.820
用户这个内

00:31.820 --> 00:35.820
这个内里边有一个属性是年龄

00:35.820 --> 00:37.820
年龄呢 跑到了

00:37.820 --> 00:40.820
有一个属性是年龄

00:40.820 --> 00:42.820
年龄这个属性呢

00:42.820 --> 00:44.820
它有一个特点

00:44.820 --> 00:46.820
它不能是小数吧

00:46.820 --> 00:47.820
对吧

00:47.820 --> 00:49.820
现在只是把它限制为number类型

00:49.820 --> 00:51.820
那number类型可以是小数

00:51.820 --> 00:53.820
那我们复制的时候

00:53.820 --> 00:55.820
有可能呢 就会写出这么一个代嘛

00:55.820 --> 00:57.820
复制为小数

00:57.820 --> 00:58.820
复制为小数

00:58.820 --> 00:59.820
那这咋办呢

00:59.820 --> 01:01.820
对吧 年龄复制为小数了

01:01.820 --> 01:03.820
年龄它有个范围吧

01:03.820 --> 01:05.820
它不能是一万吧

01:05.820 --> 01:06.820
不能是一千吧

01:06.820 --> 01:08.820
不能是复数吧

01:08.820 --> 01:10.820
一万一千我都是人了

01:10.820 --> 01:11.820
我真的是人了

01:11.820 --> 01:12.820
但是你不能是复数吧

01:12.820 --> 01:14.820
所以说有些属性

01:14.820 --> 01:16.820
它是可能它的复制也好

01:16.820 --> 01:18.820
它的读取也好

01:18.820 --> 01:20.820
需要经过一些控制

01:20.820 --> 01:22.820
那么这种控制呢

01:22.820 --> 01:23.820
你怎么去控制它呢

01:23.820 --> 01:25.820
这种控制场景

01:25.820 --> 01:27.820
情况是非常非常多的

01:27.820 --> 01:28.820
不是说简单的

01:28.820 --> 01:30.820
像这个场景下面是一个取之范围对吧

01:30.820 --> 01:32.820
还有很多很多的其他的场景

01:32.820 --> 01:34.820
我们希望有一个函数

01:34.820 --> 01:35.820
来帮我进行控制

01:35.820 --> 01:37.820
如果它是一个函数就好了

01:37.820 --> 01:40.820
那么最简单的做法

01:40.820 --> 01:41.820
先给大家介绍一下

01:41.820 --> 01:43.820
java里面是怎么做的

01:43.820 --> 01:45.820
java里面是这样做的

01:45.820 --> 01:46.820
首先呢

01:46.820 --> 01:48.820
把这个年龄呢

01:48.820 --> 01:50.820
设为私有的

01:50.820 --> 01:51.820
换个名字吧

01:51.820 --> 01:52.820
一般私有的呢

01:52.820 --> 01:53.820
私有的属性呢

01:53.820 --> 01:55.820
我们一般命名上

01:55.820 --> 01:56.820
命名上会这样子写

01:56.820 --> 01:57.820
写个下滑线

01:57.820 --> 01:58.820
写个下滑线

01:58.820 --> 01:59.820
表示它是私有的

01:59.820 --> 02:00.820
一看就知道

02:00.820 --> 02:02.820
它是一个私有成员

02:02.820 --> 02:03.820
所以说呢

02:03.820 --> 02:04.820
这里其实也一样

02:04.820 --> 02:06.820
我们可以按一下f2

02:06.820 --> 02:08.820
来重新命名

02:08.820 --> 02:10.820
然后加上一个下滑线

02:10.820 --> 02:12.820
这里也是f2

02:12.820 --> 02:13.820
加上一个下滑线

02:13.820 --> 02:14.820
好

02:14.820 --> 02:16.820
把这些私有的成员重新命名

02:16.820 --> 02:18.820
好先把年龄设为私有的

02:18.820 --> 02:20.820
java里面是这样做的

02:20.820 --> 02:21.820
设为私有过后

02:21.820 --> 02:22.820
你看一下

02:22.820 --> 02:24.820
你还能直接复制吗

02:24.820 --> 02:25.820
肯定不行了

02:25.820 --> 02:27.820
不能允许你直接复制

02:27.820 --> 02:28.820
它需要控制它

02:28.820 --> 02:31.820
然后java里面会这样子写

02:31.820 --> 02:32.820
java里面呢

02:32.820 --> 02:34.820
会写两个函数

02:34.820 --> 02:35.820
一个函数呢

02:35.820 --> 02:36.820
都是public的

02:36.820 --> 02:38.820
当然我不用写public的修制符了

02:38.820 --> 02:40.820
它默认就是public

02:40.820 --> 02:42.820
一个是set age

02:42.820 --> 02:43.820
设置年龄

02:43.820 --> 02:45.820
传一个年龄进来

02:45.820 --> 02:47.820
传一个数字进来

02:47.820 --> 02:49.820
然后怎么样呢

02:49.820 --> 02:50.820
这样子

02:50.820 --> 02:52.820
set age

02:52.820 --> 02:53.820
给它复制

02:53.820 --> 02:54.820
设置年龄

02:54.820 --> 02:55.820
写个函数

02:55.820 --> 02:57.820
然后get age

02:57.820 --> 02:58.820
写个函数

02:58.820 --> 02:59.820
age

02:59.820 --> 03:01.820
get就得到年龄就不需要传参数了

03:01.820 --> 03:02.820
对吧

03:02.820 --> 03:03.820
得到年龄不需要传参数了

03:03.820 --> 03:05.820
然后return

03:05.820 --> 03:07.820
set age

03:07.820 --> 03:08.820
java里面会这样做

03:08.820 --> 03:09.820
这样这样做

03:09.820 --> 03:10.820
现在没有做任何控制

03:10.820 --> 03:12.820
没有做任何的判断

03:12.820 --> 03:14.820
没有做任何的范围控制

03:14.820 --> 03:16.820
但是现在我把年龄的复制

03:16.820 --> 03:18.820
和年龄的读取

03:18.820 --> 03:20.820
写成了两个函数

03:20.820 --> 03:22.820
java里面会这样写

03:22.820 --> 03:24.820
那么写成了两个函数过后

03:24.820 --> 03:25.820
那么以后呢

03:25.820 --> 03:27.820
我要复制一个年龄的时候

03:27.820 --> 03:28.820
不是不让你复制

03:28.820 --> 03:30.820
我需要控制它

03:30.820 --> 03:31.820
那么我就需要

03:31.820 --> 03:32.820
掉入一个函数

03:32.820 --> 03:34.820
来完成对年龄的复制

03:34.820 --> 03:35.820
比方说

03:35.820 --> 03:37.820
我要复制为

03:37.820 --> 03:39.820
比方说1

03:39.820 --> 03:41.820
然后我输出年龄的值

03:41.820 --> 03:42.820
年龄的值我不能直接得到

03:42.820 --> 03:44.820
直接得不到的

03:44.820 --> 03:45.820
得不到的

03:45.820 --> 03:46.820
得不到

03:46.820 --> 03:47.820
私有的

03:47.820 --> 03:49.820
我们应该使用

03:49.820 --> 03:50.820
得到年龄

03:50.820 --> 03:51.820
这个好理解吧

03:51.820 --> 03:52.820
对不对

03:52.820 --> 03:53.820
好

03:53.820 --> 03:54.820
来看一下

03:54.820 --> 03:55.820
NPM状

03:55.820 --> 03:56.820
对

03:57.820 --> 03:59.820
看样年龄就行了

03:59.820 --> 04:01.820
你看年龄为一

04:01.820 --> 04:03.820
年龄为一

04:03.820 --> 04:04.820
所以说

04:04.820 --> 04:06.820
现在跟之前就不太一样了

04:06.820 --> 04:08.820
之前年龄是可以直接复制的

04:08.820 --> 04:09.820
我没有办法控制

04:09.820 --> 04:11.820
但是现在我无论是

04:11.820 --> 04:12.820
设置年龄的值

04:12.820 --> 04:14.820
还是读取年龄的值

04:14.820 --> 04:16.820
都会经过一个函数

04:16.820 --> 04:18.820
好经过函数了

04:18.820 --> 04:20.820
还不好说吗

04:20.820 --> 04:21.820
对不对

04:21.820 --> 04:22.820
很好说了

04:22.820 --> 04:24.820
我把辩量名改一下吧

04:24.820 --> 04:25.820
比如说

04:25.820 --> 04:27.820
我们用一个统一辩量名叫VALUE

04:27.820 --> 04:28.820
你要复的值

04:28.820 --> 04:30.820
你要复的值是多少

04:30.820 --> 04:32.820
复的值是这个

04:32.820 --> 04:33.820
好

04:33.820 --> 04:34.820
既然要经过一个函数

04:34.820 --> 04:35.820
这个函数里面

04:35.820 --> 04:37.820
是不是可以做各种各样的文章

04:37.820 --> 04:38.820
你想怎么控制

04:38.820 --> 04:39.820
又怎么控制

04:39.820 --> 04:40.820
比方说

04:40.820 --> 04:41.820
你要复制的

04:41.820 --> 04:42.820
复的年龄的值

04:42.820 --> 04:43.820
我看一下

04:43.820 --> 04:45.820
你是不是小云林

04:45.820 --> 04:47.820
如果你是小云林的话

04:47.820 --> 04:49.820
我就给它复制为林

04:49.820 --> 04:50.820
对不对

04:50.820 --> 04:51.820
我就给它复制为林

04:51.820 --> 04:52.820
你最终是要给它复制吗

04:52.820 --> 04:53.820
它是持有的

04:53.820 --> 04:55.820
只能在内里边使用

04:56.820 --> 04:58.820
ALSE EVE

04:58.820 --> 04:59.820
比方说

04:59.820 --> 05:03.820
咱们年龄是0到100吧

05:03.820 --> 05:04.820
0到100

05:04.820 --> 05:06.820
0到200吧

05:06.820 --> 05:07.820
0到200

05:07.820 --> 05:08.820
好

05:08.820 --> 05:09.820
如果你复制的年龄

05:09.820 --> 05:10.820
大于等于200

05:10.820 --> 05:11.820
当然我还可以抱错

05:11.820 --> 05:13.820
我还可以直接拋出一个错误

05:14.820 --> 05:16.820
这里我就给它复制为最大值200

05:16.820 --> 05:17.820
你最多只能到200

05:19.820 --> 05:20.820
完了之后

05:20.820 --> 05:23.820
如果你ALSE

05:23.820 --> 05:25.820
如果你既不是小云林

05:25.820 --> 05:28.820
也不是大于等于200

05:28.820 --> 05:31.820
那么就是0到200之间

05:31.820 --> 05:32.820
那么我就正常复制

05:32.820 --> 05:34.820
就把你的值复制过去

05:34.820 --> 05:35.820
你看

05:35.820 --> 05:36.820
现在我是不是可以控制了

05:36.820 --> 05:37.820
我经过一个函数

05:37.820 --> 05:39.820
函数里面可以做任何的事情

05:39.820 --> 05:40.820
所以说

05:40.820 --> 05:42.820
我们就可以控制年龄的复制了

05:42.820 --> 05:45.820
那么现在我再给它复制为复一半

05:45.820 --> 05:46.820
复一半

05:46.820 --> 05:47.820
还行不行

05:47.820 --> 05:50.580
你看

05:50.580 --> 05:52.580
得到的是0

05:52.580 --> 05:55.580
然后我再给它复制为300

05:55.580 --> 05:57.580
保存

05:57.580 --> 05:59.580
你看得到的是200

05:59.580 --> 06:00.580
年龄是200

06:00.580 --> 06:01.580
明白我的意思了吗

06:01.580 --> 06:02.580
好

06:02.580 --> 06:03.580
比方说我们再往上一下

06:03.580 --> 06:05.580
我给它复制为一个1.5

06:05.580 --> 06:08.080
年龄是1.5

06:08.080 --> 06:09.080
这个也不行

06:09.080 --> 06:10.080
也不行

06:10.080 --> 06:12.080
1.5岁就是一岁半

06:12.080 --> 06:14.080
一岁半我们还是算一岁

06:14.080 --> 06:15.080
还是算一岁

06:15.080 --> 06:17.080
但是我们向下取证

06:17.080 --> 06:18.080
向下取证

06:18.080 --> 06:20.080
这里我们可以对它进行向下取证

06:20.080 --> 06:22.080
当然也可以在读取它的时候

06:22.080 --> 06:24.080
在读取这个年龄的时候

06:24.080 --> 06:27.080
对这个年龄进行向下取证

06:27.080 --> 06:30.080
PACMAS floor

06:30.080 --> 06:33.080
对这个东西进行向下取证

06:33.080 --> 06:34.080
保存

06:34.080 --> 06:35.080
再看一下

06:35.080 --> 06:37.080
1.5岁

06:37.080 --> 06:38.080
得到的结果就是1

06:38.080 --> 06:39.080
看到没

06:39.080 --> 06:42.080
我们就可以控制年龄的复制

06:42.080 --> 06:44.080
以及年龄的读取

06:44.080 --> 06:45.080
都可以控制的

06:45.080 --> 06:46.080
当然这个代码也可以写到这

06:46.080 --> 06:47.080
也可以写到这

06:47.080 --> 06:50.080
没有任何问题的

06:50.080 --> 06:52.080
由于我们现在对某一些属性的复制

06:52.080 --> 06:54.080
和读取经过了一段函数

06:54.080 --> 06:57.080
这个函数里面就可以做任何的操作

06:57.080 --> 06:58.080
这是加法里面的写法

06:58.080 --> 07:00.080
这种写法没有任何问题的

07:00.080 --> 07:01.080
没有任何问题

07:01.080 --> 07:03.080
只是这种写法

07:03.080 --> 07:04.080
看上去

07:04.080 --> 07:06.080
给的那个感官上看上去

07:06.080 --> 07:08.080
没有年龄这个属性

07:08.080 --> 07:10.080
你看看看上去

07:10.080 --> 07:12.080
是有点A级点不出来

07:12.080 --> 07:14.080
只有一个Gate A级

07:14.080 --> 07:15.080
当然写习惯了

07:15.080 --> 07:16.080
其实也无所谓

07:16.080 --> 07:18.080
加法里面就是这样写的

07:18.080 --> 07:20.080
另外一个语言叫C sharp

07:20.080 --> 07:21.080
这个语言

07:21.080 --> 07:23.080
有些同学可能听说过

07:23.080 --> 07:24.080
C sharp这个语言

07:24.080 --> 07:26.080
这个语言用一种更加优雅的语法

07:26.080 --> 07:27.080
来解决这个问题

07:27.080 --> 07:29.080
就是对一些属性的控制

07:29.080 --> 07:31.080
它不把它写成一个普通函数

07:31.080 --> 07:33.080
当然它本质上就是一个普通函数

07:33.080 --> 07:35.080
都是要经过函数的

07:35.080 --> 07:36.080
它换了一个语法

07:36.080 --> 07:38.080
做了一个语法堂出来

07:38.080 --> 07:39.080
什么语法堂

07:39.080 --> 07:40.080
大家看一下

07:40.080 --> 07:42.080
现在要变形了

07:42.080 --> 07:43.080
set

07:43.080 --> 07:45.080
set 这是个关键字

07:45.080 --> 07:47.080
加个空格

07:47.080 --> 07:48.080
然后呢

07:48.080 --> 07:50.080
这里给它写上一个属性的名字

07:50.080 --> 07:52.080
A级

07:52.080 --> 07:54.080
Gate 是个关键字

07:54.080 --> 07:55.080
加上空格

07:55.080 --> 07:56.080
写上个属性的名字

07:56.080 --> 07:59.080
属性名我们经常习惯上

07:59.080 --> 08:01.080
属性名手字母小写

08:01.080 --> 08:02.080
A级

08:02.080 --> 08:04.080
我们这样子写

08:04.080 --> 08:05.080
这样子写的过后

08:05.080 --> 08:07.080
它的本质是不是还是函数

08:07.080 --> 08:08.080
对不对

08:08.080 --> 08:09.080
还是函数

08:09.080 --> 08:10.080
Gate A级

08:10.080 --> 08:12.080
返回一个东西

08:12.080 --> 08:13.080
Set A级

08:13.080 --> 08:15.080
复指一个东西

08:15.080 --> 08:16.080
还是函数

08:16.080 --> 08:18.080
但它使用上

08:18.080 --> 08:19.080
它就变化了

08:19.080 --> 08:21.080
这是个语法堂而已

08:21.080 --> 08:23.080
本质上还是函数

08:24.080 --> 08:26.080
当我给年龄复指的时候

08:26.080 --> 08:29.080
我们可以像普通属性的样子复指

08:29.080 --> 08:30.080
这样子复指

08:30.080 --> 08:31.080
可以这样复指

08:31.080 --> 08:33.080
你看这个名称

08:33.080 --> 08:34.080
就对应到

08:34.080 --> 08:35.080
这个名称

08:35.080 --> 08:36.080
对应的

08:36.080 --> 08:38.080
当我给它复指的时候

08:38.080 --> 08:40.080
相当于是

08:40.080 --> 08:42.080
它会去调用这个函数

08:42.080 --> 08:44.080
把我要复的值传过来

08:44.080 --> 08:45.080
我要复的什么值

08:45.080 --> 08:47.080
就是等号右边的东西

08:47.080 --> 08:49.080
把这个值传过来

08:49.080 --> 08:50.080
传过来

08:50.080 --> 08:51.080
然后呢

08:51.080 --> 08:52.080
经过一系列的处理

08:52.080 --> 08:54.080
你想怎么处理就怎么处理

08:54.080 --> 08:56.080
哪怕什么都不处理都无所谓

08:56.080 --> 08:58.080
然后得到值呢

08:58.080 --> 09:00.080
一样的Gate A级

09:00.080 --> 09:02.080
当我读去它的值的时候

09:02.080 --> 09:04.080
它会运行这个函数

09:04.080 --> 09:05.080
运行这个函数

09:05.080 --> 09:07.080
它就不是一个普通属性的

09:07.080 --> 09:09.080
这个属性的就叫做

09:09.080 --> 09:10.080
仿问器属性

09:10.080 --> 09:12.080
所以说仿问器来干嘛呢

09:12.080 --> 09:15.080
用于控制属性的读取和复指

09:15.080 --> 09:16.080
你看看

09:16.080 --> 09:18.080
复指这个属性的时候

09:18.080 --> 09:20.080
经过一段函数

09:20.080 --> 09:21.080
读取这个属性的时候

09:21.080 --> 09:22.080
经过一段函数

09:22.080 --> 09:24.080
这是个愚法堂而已

09:24.080 --> 09:25.080
这里和这里

09:25.080 --> 09:27.080
其实都是在调用函数

09:27.080 --> 09:29.080
结果是完全一样的

09:29.080 --> 09:30.080
你看

09:30.080 --> 09:31.080
1给它复指为1.5

09:31.080 --> 09:33.080
结果是1

09:33.080 --> 09:35.080
这就是仿问器的属性

09:35.080 --> 09:36.080
其实这个玩意

09:36.080 --> 09:39.080
是不是TS给你新增的东西呢

09:39.080 --> 09:40.080
是不是

09:40.080 --> 09:41.080
应该有些同学知道

09:41.080 --> 09:43.080
我不太确定

09:43.080 --> 09:45.080
你们到底有没有见过这个东西

09:45.080 --> 09:47.080
所以说我必须要在这里讲一下

09:47.080 --> 09:49.080
这个东西有的时候还是蛮有用的

09:49.080 --> 09:51.080
蛮有用的

09:51.080 --> 09:53.080
这个其实是GS里面的东西

09:53.080 --> 09:54.080
在ES6

09:54.080 --> 09:56.080
ES6过后就已经有这个标准了

09:56.080 --> 09:57.080
仿问器这个标准

09:57.080 --> 09:59.080
我们来编译看一下吧

09:59.080 --> 10:01.080
这里停止

10:01.080 --> 10:03.080
清除一下

10:04.080 --> 10:07.080
好

10:07.080 --> 10:09.080
散冲键甲重新编译

10:09.080 --> 10:10.080
编译完成

10:10.080 --> 10:11.080
我们来看一下

10:11.080 --> 10:13.080
你看GS代码

10:13.080 --> 10:14.080
你看GS代码里面

10:14.080 --> 10:15.080
是不是也有这个东西

10:15.080 --> 10:16.080
就是仿问器

10:16.080 --> 10:18.080
GS本身是支持这个东西的

10:18.080 --> 10:20.080
说明GS本身是支持的

10:20.080 --> 10:22.080
因此TS

10:22.080 --> 10:24.080
其实没有做什么改变

10:24.080 --> 10:25.080
由于大家可能

10:25.080 --> 10:26.080
有些同学不知道

10:26.080 --> 10:27.080
我把这里的补充一下

10:27.080 --> 10:28.080
关于仿问器

10:28.080 --> 10:30.080
就可以做这么一个限定

10:30.080 --> 10:32.080
对属性的复指

10:33.080 --> 10:35.080
好仿问器这里

10:35.080 --> 10:36.080
还有一种玩法

10:36.080 --> 10:38.080
就是把这个东西

10:38.080 --> 10:39.080
比方说这里是set

10:39.080 --> 10:41.080
这叫设置器

10:41.080 --> 10:42.080
这叫读取器

10:42.080 --> 10:43.080
都是仿问器

10:43.080 --> 10:45.080
我把这个set

10:45.080 --> 10:46.080
给它注释掉

10:46.080 --> 10:48.080
注释掉了之后

10:48.080 --> 10:49.080
大家再看

10:49.080 --> 10:51.080
它就不能复指了

10:51.080 --> 10:52.080
好比说

10:52.080 --> 10:54.080
这个属性是一个

10:54.080 --> 10:55.080
止读的属性

10:55.080 --> 10:56.080
你看到没

10:56.080 --> 10:57.080
还有这种玩法

10:57.080 --> 10:59.080
变成一个止读的属性了

10:59.080 --> 11:00.080
你只能读下了

11:00.080 --> 11:02.080
你不能复指

11:02.080 --> 11:03.080
那么你读下了

11:03.080 --> 11:04.080
但是跟止读属性

11:04.080 --> 11:05.080
不一样的是什么

11:05.080 --> 11:06.080
你读下了

11:06.080 --> 11:08.080
的时候仍然可以经过

11:08.080 --> 11:10.080
仍然可以经过

11:10.080 --> 11:11.080
一个函数的处理

11:11.080 --> 11:13.080
就有点类似于啥

11:13.080 --> 11:14.080
有点类似于

11:14.080 --> 11:16.080
VU的计算属性

11:16.080 --> 11:18.080
有点类似于计算属性

11:18.080 --> 11:19.080
VU的计算属性里面

11:19.080 --> 11:20.080
不是也有set和get

11:20.080 --> 11:22.080
也有set和get

11:22.080 --> 11:24.080
这是关于仿问器

11:24.080 --> 11:26.080
这一块的知识

11:26.080 --> 11:27.080
这里仿问器

11:27.080 --> 11:28.080
大家使用的时候

11:28.080 --> 11:29.080
有一个小细节

11:29.080 --> 11:31.080
大家一定要引起重视

11:31.080 --> 11:32.080
就是这个私有属性

11:32.080 --> 11:34.080
我们写法问器的时候

11:34.080 --> 11:36.080
不是说一定吧

11:36.080 --> 11:38.080
绝大部分情况下

11:38.080 --> 11:40.080
都会涉及到一个私有属性

11:40.080 --> 11:41.080
不是一定

11:41.080 --> 11:43.080
有可能会涉及到一个私有属性

11:43.080 --> 11:45.080
那么这个私有属性

11:45.080 --> 11:47.080
大家注意不要同名了

11:47.080 --> 11:48.080
写代码的时候

11:48.080 --> 11:50.080
也千万不要把这个地方写成了A级

11:50.080 --> 11:51.080
千万不要写成A级

11:51.080 --> 11:53.080
它是不会爆错的

11:53.080 --> 11:54.080
它不会在这里爆错

11:54.080 --> 11:56.080
写代码的时候不会爆错

11:56.080 --> 11:57.080
但是它运行出来

11:57.080 --> 11:58.080
会爆错的

11:59.080 --> 12:00.080
大家看一下

12:00.080 --> 12:01.080
运行出来

12:01.080 --> 12:02.080
它告诉你

12:02.080 --> 12:03.080
内存不够用了

12:03.080 --> 12:05.080
堆站一出

12:05.080 --> 12:06.080
直行站一出

12:06.080 --> 12:08.080
这啥意思呢

12:08.080 --> 12:09.080
什么意思

12:09.080 --> 12:10.080
你想一想这个道理

12:10.080 --> 12:12.080
假设我们给它传的值

12:12.080 --> 12:13.080
假设是10吧

12:13.080 --> 12:15.080
给它传了一个10

12:15.080 --> 12:17.080
是不是到了else

12:17.080 --> 12:18.080
这里

12:18.080 --> 12:20.080
好 这里给这个东西复制

12:20.080 --> 12:21.080
这个东西是啥

12:21.080 --> 12:23.080
这个东西是不是寒朔

12:23.080 --> 12:24.080
给它复制就相当于是

12:24.080 --> 12:25.080
调用这个寒朔

12:25.080 --> 12:26.080
给它复制的是

12:26.080 --> 12:27.080
又调用这个寒朔

12:27.080 --> 12:28.080
又把10传进来

12:28.080 --> 12:30.080
又运行到这

12:30.080 --> 12:31.080
又要复制

12:31.080 --> 12:32.080
又把10传进来

12:32.080 --> 12:33.080
又调用那个寒朔

12:33.080 --> 12:34.080
把10传进来

12:34.080 --> 12:36.080
这样子无限帝规下去了

12:36.080 --> 12:37.080
这是一个无限帝规

12:37.080 --> 12:38.080
我们知道

12:38.080 --> 12:41.080
死循环不一定导致内存泄露

12:41.080 --> 12:43.080
但是无限帝规

12:43.080 --> 12:44.080
已经导致内存泄露

12:44.080 --> 12:46.080
所以就会遇到这样的问题

12:46.080 --> 12:47.080
大家注意一下

12:47.080 --> 12:49.080
写这个代码的时候注意一下

12:49.080 --> 12:50.080
其实你本质上

12:50.080 --> 12:51.080
把它当成一个寒朔来处理

12:51.080 --> 12:53.080
你就明白是怎么回事了

12:53.080 --> 12:54.080
这里

12:57.080 --> 12:59.080
这是关于访问器

12:59.080 --> 13:01.080
访问器的知识

13:01.080 --> 13:02.080
好了

13:02.080 --> 13:03.080
那么

13:03.080 --> 13:04.080
基础部分

13:04.080 --> 13:06.080
咱们基础部分的中的内

13:06.080 --> 13:07.080
就讲完了

13:07.080 --> 13:08.080
内里边还有一些知识

13:08.080 --> 13:10.080
我们需要在进阶部分

13:10.080 --> 13:12.080
去继续把它玩上

13:12.080 --> 13:13.080
好

13:13.080 --> 13:14.080
接下来

13:14.080 --> 13:16.080
是老规矩了

13:16.080 --> 13:17.080
改造一下

13:17.080 --> 13:18.080
这个铺壳牌

13:18.080 --> 13:19.080
这个练习

