WEBVTT

00:00.940 --> 00:06.660
好 首先我们来分析一下 咱们整个应用程序 它的组件的划分

00:07.780 --> 00:10.980
我可以这样子来划分啊 就是每一个小框框

00:11.740 --> 00:14.060
我可以把它当做是一个棋子

00:14.780 --> 00:20.420
就是一个小框框里边可能有棋子 也可能没有 有可能有黑色的棋子 有可能有红色的棋子啊

00:20.780 --> 00:26.660
每一个小框框把它做成一个组件 它有三种状态 要么是空的 要么有黑棋子 要么有

00:27.380 --> 00:29.380
红棋子 对吧 就这种三种状态

00:30.180 --> 00:34.260
好 每个小框框呢 它还可以点击 点击过后呢 会触发一些事件

00:34.900 --> 00:39.300
好 这是第一个组件啊 第二个组件呢 我是可以把它整个

00:40.100 --> 00:40.900
这个棋盘

00:41.540 --> 00:47.140
做成一个组件 做成一个组件 那么这个组件里面包含了很多的棋子的组件

00:47.780 --> 00:48.820
它是个包含关系

00:49.620 --> 00:52.500
然后整个游戏呢 我们可以把它做成一个组件

00:52.980 --> 00:56.500
这个游戏组件里面呢 可以提供整个游戏 它需要的数据

00:57.300 --> 01:04.420
ok 我们可以使用这种组件的划分方式 当然呢 你也可以使用一些其他的划分方式啊 我会这样子进行划分

01:06.100 --> 01:11.780
那么接下来呢 我们来就开发第一个组件 就是一个小框框 一个棋子的组件

01:13.300 --> 01:13.780
好 这里

01:14.260 --> 01:17.060
这里 我们在这里呢

01:17.860 --> 01:20.340
component 下面呢 建立一个文件

01:20.820 --> 01:25.700
这个文件呢 给他取个名字啊 这个组件给他取个名字就叫做chess 表示一个棋子

01:26.260 --> 01:28.100
comp 表示它是一个组件

01:28.740 --> 01:29.780
tsx

01:31.700 --> 01:38.340
这个组件里边呢 我们先导出一个组件 我们这个组件呢 就使用函数组件吧 当然你也可以使用类组件

01:38.420 --> 01:40.100
但是我觉得没有什么必要

01:40.580 --> 01:46.100
因为这个组件呢 他有没有状态 也不需要什么生命周期函数 对吧 他不提供任何数据的

01:46.340 --> 01:52.340
他只是根据你传过来的属性呢 进行展示 他是一个展示组件 因此呢 所以说我这里

01:52.740 --> 01:54.260
使用一个函数组件方式

01:55.380 --> 01:57.540
组件名字就使用chess comp

01:58.660 --> 02:00.020
好 这个组件的属性

02:01.140 --> 02:04.500
这个组件的属性使用什么类型来进行约束

02:04.980 --> 02:07.540
当然呢 我们这里可以写这么一个类型啊 写这个

02:08.100 --> 02:13.380
interface 我们组件的属性约束呢 一般都是一个对象啊 属性吧 还包括

02:13.940 --> 02:15.380
state 状态都是一个对象

02:16.100 --> 02:18.740
好 这个对象里边有哪些属性需要传递呢

02:19.300 --> 02:24.580
首先第一个属性 我们非常容易想到的就是每一个旗子呢 他有三种状态

02:24.900 --> 02:27.860
没有红色和黑色有这么三种状态

02:28.500 --> 02:33.380
因此呢 这个属性呢 里边你得给我传一个啊 这个旗子的类型给我传过来

02:34.340 --> 02:40.900
旗子的类型呢 是一个什么类型呢 三种情况吧 三种情况说是某一个范围类的曲子啊 对不对

02:41.460 --> 02:44.900
那么这个地方是不是可以使用每一句 好 我们在这里写个每一句啊

02:46.580 --> 02:47.860
inna 表示一个每一句

02:48.500 --> 02:50.980
表示chess type

02:51.540 --> 02:53.220
旗子的类型

02:53.700 --> 02:54.340
三种类型

02:54.740 --> 02:55.940
那没有旗子

02:56.740 --> 02:58.020
red 红色的旗子

02:58.500 --> 02:59.860
black 黑色的旗子

03:00.420 --> 03:06.020
用了每一句对他进行约束过后呢 他就不能随便乱传辞了啊 比方说你这里该规定一个字不串

03:06.420 --> 03:10.500
或者是数字 那都有可能会导致传一个范围之外的字

03:10.740 --> 03:14.260
不太好 使用每一句来对范围类的某一个字进行约束

03:14.820 --> 03:16.580
好 他类型的就约束为chess type

03:17.220 --> 03:19.220
其实写到这个时候呢 我会多想一想

03:19.540 --> 03:20.820
对大家也可以多想一想

03:21.300 --> 03:22.340
你这个每一句呢

03:22.980 --> 03:25.380
很有可能其他地方也要用到

03:25.860 --> 03:28.180
包括我们整个控制整个游戏进程的时候

03:28.660 --> 03:32.260
啊 我们判断哪个位置有什么样的旗子 可能要使用到这个每一句

03:32.740 --> 03:35.060
因此呢 这个每一句呢 可能是一个公共的类型

03:35.540 --> 03:38.500
那你现在把它写到这个文件里面呢 可能就不太好了

03:39.300 --> 03:43.060
嗯 这里呢 我会这样处理 在src路的下面呢 去建一个文件牙

03:43.300 --> 03:45.060
干 里面啊 干命名为taps

03:45.540 --> 03:47.780
表示这里面存放的是一些公众的类型

03:48.100 --> 03:51.460
所有的组件 所有的位置都可以使用在这里面的类型

03:52.020 --> 03:52.820
好 我把这个

03:53.700 --> 03:55.060
chess type呢 就放到这里面

03:56.020 --> 03:57.620
新建个文件 inlums

03:58.900 --> 04:02.660
这里面存放所有我们整个系统里面所有的每一句啊

04:02.660 --> 04:05.380
当然你也可以一个每句一个文件也可以啊

04:05.380 --> 04:07.620
因为整个程序呢 我这里觉得

04:08.260 --> 04:09.460
设计不到太多的每一句

04:09.460 --> 04:11.780
所以说我就用一个文件把全部导出

04:12.740 --> 04:15.220
把刚才的文把刚才的地方复制一下啊

04:15.220 --> 04:16.020
复制一下

04:16.580 --> 04:17.460
export

04:18.580 --> 04:18.980
in的

04:19.620 --> 04:20.180
这三天过来

04:20.740 --> 04:21.780
好 把这个每句导出

04:22.420 --> 04:23.220
那么到了这边

04:23.940 --> 04:26.260
我这里这个每句就不用写了啊 不用写了

04:26.740 --> 04:27.220
好 这里

04:27.700 --> 04:28.740
我这里修复一下

04:29.060 --> 04:29.380
导入

04:30.900 --> 04:31.940
好 那么这里

04:31.940 --> 04:34.900
属性这里呢 就应该约束为iprops

04:35.700 --> 04:36.980
通过这样来进行约束

04:38.020 --> 04:40.340
接下来这个函数怎么返回呢

04:40.340 --> 04:41.220
怎么返回

04:41.220 --> 04:42.580
返回的就是一个div

04:43.380 --> 04:45.300
一个小框框就是一个div

04:46.020 --> 04:48.660
这个div呢 给他设置一个样式了

04:49.220 --> 04:51.140
设置一个样式 名字就叫做chess

04:51.620 --> 04:52.900
而关于样式这里呢

04:52.900 --> 04:55.540
其实你可以使用css

04:55.540 --> 04:56.900
也可以使用sars

04:56.900 --> 04:59.140
也可以使用less这些预编应器对吧

04:59.700 --> 05:02.580
或者是使用css码究来避免内容

05:02.580 --> 05:03.380
内容的冲突

05:03.380 --> 05:04.580
就看你自己啊

05:04.580 --> 05:05.220
我这里呢

05:06.100 --> 05:07.700
主要的精力是在讲ts

05:07.700 --> 05:09.300
我就不去做那些事情了

05:09.860 --> 05:10.260
好 这里

05:11.140 --> 05:11.860
经验一个文件

05:11.860 --> 05:13.620
就是你们要使用那些sars

05:13.620 --> 05:15.060
内容你们自己去用啊

05:15.060 --> 05:16.580
跟之前的用法是完全一样的

05:17.620 --> 05:17.940
chess

05:18.900 --> 05:19.380
呃

05:20.020 --> 05:20.500
compo

05:20.500 --> 05:22.260
用同样的组建名吗

05:22.260 --> 05:23.300
用同样的名字

05:23.300 --> 05:24.580
后绝名为css

05:25.300 --> 05:26.500
好 这里呢

05:26.500 --> 05:27.860
我把这个css导入进来啊

05:29.540 --> 05:30.180
import

05:31.140 --> 05:31.780
当前

05:32.420 --> 05:34.180
当前目录下的chess

05:34.980 --> 05:35.540
compo

05:35.540 --> 05:36.340
css

05:36.340 --> 05:37.380
导入进来

05:37.380 --> 05:38.580
好 我们来写这个类

05:40.340 --> 05:40.740
chess

05:41.700 --> 05:44.500
呃 宽高的话就给他一个

05:45.220 --> 05:46.100
50个相处吧

05:46.820 --> 05:47.700
height

05:47.700 --> 05:48.420
50个相处

05:49.140 --> 05:50.500
宽高50个相处

05:50.500 --> 05:52.020
有一个边框

05:52.580 --> 05:53.220
border

05:54.100 --> 05:54.980
两个相处

05:54.980 --> 05:55.620
solid

05:56.740 --> 05:57.460
night

05:58.020 --> 05:58.340
grit

05:59.380 --> 06:00.820
这个颜色里随便设置一个

06:01.460 --> 06:02.980
好 保存一下啊

06:02.980 --> 06:04.420
那么这边css

06:04.420 --> 06:05.700
这边也保存一下

06:05.700 --> 06:06.500
保存一下

06:06.500 --> 06:10.180
然后我们在app.ts里边去用一下

06:10.180 --> 06:11.620
好 那这些东西就不要了

06:11.620 --> 06:12.900
这些东西就不要了

06:12.900 --> 06:14.020
这个东西就不要了

06:14.020 --> 06:15.940
我就是在这个位置的测试一下

06:16.020 --> 06:17.380
测试一下我们刚刚写的组件

06:18.020 --> 06:19.700
好 这个地方不要了

06:19.700 --> 06:22.260
这个组件之前写的测试组件也可以删掉了

06:23.060 --> 06:24.900
好 这里呢 我们给他

06:24.900 --> 06:26.820
使用我们刚才写的chess

06:28.500 --> 06:29.540
chess

06:29.540 --> 06:30.100
compo

06:30.900 --> 06:31.300
ok

06:33.140 --> 06:34.340
好 这里马上爆错了

06:34.340 --> 06:35.220
爆错的原因

06:35.220 --> 06:36.980
是因为他有一个属性需要传递

06:36.980 --> 06:38.180
他告诉你的啊

06:38.180 --> 06:39.780
type这个属性是必须要传递的

06:39.780 --> 06:40.740
但是你没有传递

06:40.740 --> 06:41.780
你看 现在就可以

06:42.340 --> 06:43.940
这些类型就很安全了啊

06:43.940 --> 06:45.060
因为他会进行检查

06:45.700 --> 06:46.820
type要传递一个什么呢

06:46.820 --> 06:47.940
传递一个美举

06:47.940 --> 06:49.140
传递一个美举

06:49.140 --> 06:50.580
chess type

06:51.460 --> 06:52.420
把这个美举倒进来

06:52.420 --> 06:53.460
你看这里传递的时候

06:53.460 --> 06:55.060
是不是要用的这个美举

06:55.060 --> 06:55.700
对不对

06:55.700 --> 06:57.940
因此呢 我把这个美举提出来

06:57.940 --> 06:58.980
做一个通用的东西

07:00.020 --> 07:00.980
好 比方说

07:00.980 --> 07:01.540
那么

07:02.180 --> 07:03.060
里面没有旗子

07:03.060 --> 07:04.100
我先随便传一个吧

07:04.100 --> 07:04.980
这个功能还没有写

07:05.700 --> 07:06.500
好 看一下印面

07:08.500 --> 07:09.620
好 他这里爆错了

07:09.620 --> 07:10.660
爆错的原因是说

07:11.300 --> 07:13.940
你是你在用GSX的表达式

07:14.820 --> 07:17.060
但是呢 你没有去导入这个react

07:17.060 --> 07:19.380
这是以前学习react的知识对吧

07:20.100 --> 07:23.220
那你要在组建里面使用GSX的话

07:23.220 --> 07:24.980
你必须要去导入react

07:24.980 --> 07:26.260
好 OK 我们再导入吧

07:30.100 --> 07:30.820
好 保存一下

07:32.020 --> 07:33.380
OK 你看看框框出来了

07:34.260 --> 07:34.980
框框出来了

07:36.020 --> 07:37.060
好 接下来呢

07:37.860 --> 07:40.340
我们要往这个DIV里面填东西

07:41.140 --> 07:42.500
这里有三种情况

07:43.460 --> 07:44.500
哪三种情况呢

07:44.500 --> 07:45.700
没有旗子

07:45.700 --> 07:46.260
啥都不写

07:46.980 --> 07:48.100
有旗子

07:48.100 --> 07:49.220
那么有什么样的旗子

07:49.220 --> 07:50.180
红色的旗子

07:50.180 --> 07:50.980
写个DIV

07:50.980 --> 07:53.620
比方说给它内名的话就加一个红色

07:53.620 --> 07:55.140
黑色的旗子的话写个DIV

07:55.140 --> 07:56.820
内名的话加一个黑色

07:56.820 --> 07:57.380
就完事了

07:57.940 --> 07:58.740
因此呢 这里呢

07:58.740 --> 08:00.260
我可以先用一个变量

08:00.260 --> 08:02.260
来保存我们这里要填的东西

08:02.900 --> 08:03.460
用个变量

08:04.260 --> 08:06.260
这个变量的话就该取名为

08:06.260 --> 08:06.660
chiss

08:07.380 --> 08:07.700
chiss

08:08.420 --> 08:09.700
默认为nau

08:09.700 --> 08:11.380
就表示不填任何东西

08:11.460 --> 08:12.500
什么情况不填

08:12.500 --> 08:13.860
就是这个属性的值

08:13.860 --> 08:15.620
这个属性的值是

08:16.260 --> 08:18.740
这个煤句的取之的nau这个之段

08:18.740 --> 08:20.500
就取这个之段的时候就什么都不填

08:21.300 --> 08:21.940
因此呢

08:21.940 --> 08:23.380
默认情况下就是nau

08:23.380 --> 08:24.340
接下来判断一下

08:25.060 --> 08:25.860
判断

08:25.860 --> 08:28.820
如果你属性里边这个type的值

08:28.820 --> 08:31.380
等于那煤句chiss type

08:32.100 --> 08:33.620
它的红色

08:33.620 --> 08:34.580
如果等于那红色

08:35.620 --> 08:36.660
这里我顺便说一下

08:37.620 --> 08:39.460
这里跟以前一样

08:39.540 --> 08:41.780
你可以使用这个属性名

08:41.780 --> 08:43.620
点上属性的属性名

08:43.620 --> 08:44.020
属性

08:45.060 --> 08:46.500
就是这个probs的属性名

08:47.140 --> 08:47.540
有点

08:48.020 --> 08:48.980
这话有点不好说

08:49.780 --> 08:50.580
这是个属性

08:50.580 --> 08:52.180
这个属性的属性type

08:52.180 --> 08:53.620
你可以用这种方式

08:53.620 --> 08:55.060
也可以使用解构

08:55.060 --> 08:56.180
直接在这里进行解构

08:56.740 --> 08:59.060
把它解把里面的属性解构出来

08:59.060 --> 08:59.620
都可以

08:59.620 --> 09:00.740
是一样的跟以前

09:00.740 --> 09:01.540
没有任何的区别

09:02.100 --> 09:03.540
ok 这里的解构之后呢

09:03.540 --> 09:05.060
我们就可以少打一些字幕了

09:06.020 --> 09:08.180
如果你是一个红色的旗子的话

09:08.260 --> 09:09.620
那么我给这个变量呢

09:09.620 --> 09:11.700
就复制为一个div

09:11.700 --> 09:13.060
div 第二

09:13.060 --> 09:14.340
内名为red

09:14.340 --> 09:14.740
红色

09:15.620 --> 09:15.940
好

09:16.660 --> 09:17.460
lcf

09:18.100 --> 09:21.300
如果你的内形是一个chiss type

09:22.260 --> 09:23.300
为黑色的话

09:24.340 --> 09:28.100
我就给它复制为一个div black

09:28.100 --> 09:28.500
黑色

09:29.460 --> 09:30.020
好了

09:30.020 --> 09:31.220
我把这个chiss呢

09:31.220 --> 09:32.420
就放到这个位置

09:32.420 --> 09:33.380
就放到这个位置

09:34.980 --> 09:36.180
好 咱们来看一下

09:36.180 --> 09:37.060
看一下咱们的一面

09:38.660 --> 09:39.300
刚才呢

09:39.300 --> 09:40.500
我们使用的是浪

09:40.500 --> 09:41.460
现在我们把它

09:41.460 --> 09:42.660
我先看一下浪的情况

09:43.380 --> 09:44.340
浪的情况

09:44.340 --> 09:46.340
我直接这里找到这个regs调试

09:50.260 --> 09:50.980
再刷新一下

09:54.060 --> 09:54.620
好

09:54.620 --> 09:55.420
调试出来过后呢

09:55.420 --> 09:56.300
我们会发现

09:56.300 --> 09:58.380
这个主键里边有个div

09:58.380 --> 10:00.220
div class name为chiss

10:00.220 --> 10:01.020
看呗

10:01.020 --> 10:02.140
那么里边还有没有东西

10:02.140 --> 10:02.860
就没有东西了

10:02.860 --> 10:03.820
因为我们现在是浪

10:04.380 --> 10:06.940
给它传的一个红色

10:06.940 --> 10:07.820
red

10:07.820 --> 10:08.380
保存一下

10:10.460 --> 10:11.020
稍等一下

10:11.820 --> 10:13.020
那么看一下现在里边

10:13.020 --> 10:14.860
所以多了个div class为red

10:15.420 --> 10:15.660
好

10:15.660 --> 10:16.220
因此呢

10:17.100 --> 10:18.940
我们再试一下这个black

10:18.940 --> 10:19.660
black

10:19.660 --> 10:20.460
都把测试完

10:23.480 --> 10:23.800
打开

10:24.600 --> 10:25.960
打开打开

10:25.960 --> 10:26.760
black

10:26.760 --> 10:26.920
好

10:26.920 --> 10:27.800
说明这里的结构

10:27.800 --> 10:28.840
已经没有什么问题了

10:28.840 --> 10:29.720
接下来就是样式了

10:30.280 --> 10:31.480
我要把这个black

10:31.480 --> 10:32.920
或者是红色

10:32.920 --> 10:34.280
或者是黑色的div

10:34.280 --> 10:35.240
设置一下样式

10:35.800 --> 10:37.160
其实这两种情况

10:37.160 --> 10:38.440
他们有一些共同的样式

10:38.440 --> 10:39.080
大家发现没

10:39.720 --> 10:40.360
你看这里面

10:40.360 --> 10:40.600
这边

10:41.560 --> 10:43.160
无论是红色还是黑色

10:43.160 --> 10:44.360
他们都有些共同的样式

10:44.360 --> 10:44.920
比方说

10:44.920 --> 10:46.360
他们宽膏是一样的

10:46.360 --> 10:47.080
对吧

10:47.080 --> 10:48.040
比方说他们的

10:48.040 --> 10:49.800
都是一个圆角边框

10:49.800 --> 10:51.160
都是一个圆角边框

10:51.160 --> 10:52.520
都是个圆熊嘛

10:52.520 --> 10:53.080
因此呢

10:53.080 --> 10:55.160
为了让他们有一些共同的样式

10:55.160 --> 10:56.520
我可以在这里呢

10:56.520 --> 10:57.480
稍微做一下感动

10:58.040 --> 10:59.880
他们两个有统一的样式名

10:59.880 --> 11:00.840
就是chiss item

11:02.920 --> 11:03.720
里边的一个

11:04.920 --> 11:06.120
旗子内容

11:06.120 --> 11:07.720
加上这每个统一的样式

11:07.720 --> 11:08.920
我们把它相同的样式

11:08.920 --> 11:10.120
就设置到这个样式里边

11:11.560 --> 11:13.000
这不是什么新知识的

11:13.960 --> 11:16.120
chiss item

11:16.920 --> 11:18.520
共同的样式就是宽膏

11:18.520 --> 11:19.240
一样

11:19.240 --> 11:20.600
比方说就30吧

11:21.400 --> 11:21.800
高度

11:22.520 --> 11:23.240
30个相处

11:23.880 --> 11:25.000
然后呢

11:25.000 --> 11:26.200
还有什么呢

11:26.200 --> 11:27.400
还有一个圆角边框

11:27.400 --> 11:29.240
border radius50%

11:29.880 --> 11:30.600
把它做成圆角

11:32.440 --> 11:32.840
然后呢

11:32.840 --> 11:35.560
他们有各自比较特殊的样式

11:35.560 --> 11:36.920
比方说红色这个

11:37.480 --> 11:38.200
红色这个的话

11:38.200 --> 11:40.040
我给他一个背景颜色吧

11:40.120 --> 11:41.000
白光的

11:41.000 --> 11:42.920
这里我使用渐变的背景颜色

11:43.480 --> 11:44.520
就叫做

11:45.640 --> 11:47.480
radio gradients

11:48.280 --> 11:49.800
以圆圈为中

11:49.800 --> 11:51.960
以圆形的就要进向渐变

11:51.960 --> 11:53.800
专线的所以叫做进向渐变

11:53.800 --> 11:56.280
就是以某一个圆形为起点

11:56.280 --> 11:58.280
来开始向外扩散进行渐变

11:58.920 --> 11:59.640
渐变的话

11:59.640 --> 12:01.720
颜色从白色开始吧

12:02.360 --> 12:04.200
从白色渐变到红色

12:04.760 --> 12:05.560
比方说我们这样的

12:05.560 --> 12:06.760
看一下效果吧

12:06.760 --> 12:07.320
看一下效果

12:07.880 --> 12:08.840
我们就在这里

12:08.920 --> 12:10.120
iPad在这里面

12:10.120 --> 12:11.400
把它设置为红色

12:11.400 --> 12:12.440
红色看一下效果

12:14.380 --> 12:15.580
ok 差不多的

12:15.580 --> 12:16.700
差不多有这么个意思

12:17.580 --> 12:17.980
好

12:17.980 --> 12:19.180
然后再设置一下黑色

12:20.380 --> 12:22.620
可以设css里面

12:22.620 --> 12:23.420
把这个复制一下

12:24.780 --> 12:25.980
这里把它写成black

12:27.020 --> 12:28.700
ok 这里写成black

12:29.340 --> 12:30.940
那就是黑色嘛

12:30.940 --> 12:31.340
零零

12:32.060 --> 12:33.420
好 这里可以使用淘宝红

12:33.420 --> 12:34.700
a420都可以

12:35.580 --> 12:36.060
保存一下

12:37.500 --> 12:38.540
好 刚才是红色

12:38.620 --> 12:40.940
然后呢 我再做一个黑色看一下

12:40.940 --> 12:41.660
做一个黑色

12:43.500 --> 12:44.620
在这里加一个黑色

12:46.380 --> 12:46.700
这里

12:49.100 --> 12:51.500
这里没有一个根元书

12:51.500 --> 12:52.700
加个根元书吧

12:52.700 --> 12:53.980
都来都来测试一下

12:55.900 --> 12:56.940
第一个是没有旗子

12:56.940 --> 12:57.740
第二个是黑色

12:57.740 --> 12:58.700
第二个是红色

12:58.700 --> 12:59.260
保存一下

13:00.300 --> 13:01.580
这里有三颗旗子

13:01.580 --> 13:02.780
三颗旗子

13:02.780 --> 13:03.580
没有旗子

13:03.580 --> 13:04.220
黑色红色

13:04.220 --> 13:05.020
你看都没有问题

13:05.980 --> 13:06.700
好 接下来呢

13:06.780 --> 13:08.940
我要把这个旗子居中

13:08.940 --> 13:10.460
这个居中的方案

13:10.460 --> 13:11.660
就大就太多了

13:11.660 --> 13:12.940
你们自己去随便想一种

13:12.940 --> 13:14.380
这里呢

13:14.380 --> 13:15.740
我使用这种方式居中

13:16.460 --> 13:17.500
在切实里面

13:17.500 --> 13:19.100
给它使用一个display

13:19.100 --> 13:22.220
把最外层的变成一个弹性和flexed

13:23.500 --> 13:26.300
然后呢在主轴上居中

13:27.020 --> 13:28.300
侧轴上居中

13:28.300 --> 13:29.660
居中的方案实在太多了

13:30.860 --> 13:31.420
保存一下

13:32.540 --> 13:32.940
好

13:32.940 --> 13:34.060
看看里面的

13:34.060 --> 13:35.100
这是个弹性项目了

13:35.100 --> 13:35.500
对吧

13:35.500 --> 13:36.620
弹性项目居中了

13:37.660 --> 13:40.140
好 接下来还有一些什么事情没有做呢

13:40.140 --> 13:41.740
还有一个鼠标样式

13:41.740 --> 13:43.500
当我们移到这个区域的时候

13:43.500 --> 13:46.620
鼠标要变成一个小手

13:46.620 --> 13:47.500
这还不简单吗

13:48.140 --> 13:50.140
在这里边加上颗手

13:50.140 --> 13:51.900
颗手point对不对

13:51.900 --> 13:52.860
好 OK 保存

13:54.300 --> 13:56.700
OK 鼠标样子搞定了

13:56.700 --> 13:57.420
看上去呢

13:57.420 --> 13:59.420
感觉上就可以点击了对不对

14:00.460 --> 14:00.780
好

14:00.780 --> 14:02.380
那么既然讲到这呢

14:02.380 --> 14:04.780
你肯定要想到点击事件了

14:04.780 --> 14:06.060
点击事件

14:06.140 --> 14:08.060
好 我先把点击事件给他注册出来

14:08.620 --> 14:09.420
到代码里边

14:10.700 --> 14:11.660
点击事件

14:12.380 --> 14:13.180
给这个DIV

14:14.860 --> 14:16.380
加上一个onclick

14:18.060 --> 14:18.540
onclick

14:18.540 --> 14:19.660
你看现在有自然提示

14:19.660 --> 14:20.700
也是不可能写错的

14:21.900 --> 14:23.820
点击过后我要做啥呢

14:24.540 --> 14:25.340
要做啥呢

14:25.340 --> 14:27.020
这里有几种情况

14:27.020 --> 14:27.820
好好想一想

14:29.660 --> 14:32.380
如果这个位置已经有了旗子

14:33.340 --> 14:34.540
点击过后

14:34.540 --> 14:36.060
你有没有事情可以做

14:36.620 --> 14:37.660
已经有了旗子

14:37.660 --> 14:38.700
你想一想这个道理

14:38.700 --> 14:39.900
这里已经有了旗子

14:39.900 --> 14:41.100
点击过后还能不能

14:41.820 --> 14:42.620
有事情可以做

14:43.340 --> 14:44.220
有没有事情可以做

14:44.620 --> 14:45.180
就没有

14:45.820 --> 14:46.460
点了旗子

14:46.460 --> 14:47.820
这个地方已经有旗子了

14:47.820 --> 14:48.940
过后点了过后

14:48.940 --> 14:49.740
有什么作用呢

14:49.740 --> 14:50.620
没有任何的作用

14:51.100 --> 14:51.660
因此呢

14:52.140 --> 14:52.860
点击过

14:52.860 --> 14:54.780
如果已经有了旗子

14:54.780 --> 14:56.140
点击过后呢

14:56.140 --> 14:57.580
就不要处理任何事情了

14:58.060 --> 14:59.820
只有没有旗子的时候呢

14:59.820 --> 15:01.020
我才进行处理

15:01.180 --> 15:01.500
因此呢

15:01.500 --> 15:02.380
这里先判断一下

15:02.860 --> 15:04.300
判断一下这个Type

15:04.300 --> 15:05.580
是不是等于

15:06.460 --> 15:07.340
等于啥呢

15:07.340 --> 15:07.820
等于呢

15:08.460 --> 15:09.900
没有旗子

15:09.900 --> 15:11.500
没有旗子的时候呢

15:11.500 --> 15:13.020
我才需要处理

15:13.020 --> 15:14.700
但是这里怎么处理呢

15:15.260 --> 15:16.300
是不是又是个问题啊

15:16.860 --> 15:20.300
我这个是个旗子的一个展示逐渐

15:20.300 --> 15:22.220
怎么处理我也处理不了

15:22.220 --> 15:23.500
我只能给你抛出事件

15:24.060 --> 15:24.620
我可以

15:24.620 --> 15:27.020
我表示这里有事情发生了

15:27.020 --> 15:27.820
你来处理吧

15:27.820 --> 15:28.540
我处理不了

15:29.100 --> 15:30.700
所以说这里要抛出事件

15:31.260 --> 15:31.820
因此呢

15:31.820 --> 15:33.100
根据我们之前说的

15:33.580 --> 15:34.780
这个地方属性这里

15:34.780 --> 15:35.820
是不是要扔个事件过来

15:36.620 --> 15:37.900
扔一个毁掉函数过来

15:38.460 --> 15:39.740
再取个名字就叫做

15:41.500 --> 15:42.220
onclick

15:42.220 --> 15:43.340
随便取个名字

15:43.340 --> 15:45.420
因为现在有智能提示

15:45.420 --> 15:46.700
并且有内容检查

15:47.340 --> 15:48.300
其实无所谓的

15:48.300 --> 15:49.100
你就算写错了

15:49.100 --> 15:49.340
好吧

15:49.340 --> 15:50.300
会马上提示你

15:51.820 --> 15:52.140
好

15:52.140 --> 15:52.620
这里呢

15:52.620 --> 15:54.060
给他写上一个问号

15:54.060 --> 15:55.020
表示啥

15:55.020 --> 15:56.540
表示的是可选的

15:56.540 --> 15:57.820
你可以写这个事件

15:57.820 --> 15:58.540
也可以不写

15:59.180 --> 16:00.060
它是一个函数

16:00.140 --> 16:00.780
这个函数

16:01.420 --> 16:03.340
也没有什么函数需要传递

16:03.340 --> 16:04.220
反昏内容呢

16:04.220 --> 16:04.860
就卧椅的

16:05.420 --> 16:06.220
ok

16:06.220 --> 16:06.380
好

16:06.380 --> 16:07.580
写好这么一个事件

16:07.580 --> 16:08.060
onclick

16:09.020 --> 16:10.060
有了这个事件过后呢

16:10.060 --> 16:11.180
这里我要判断一下

16:11.180 --> 16:12.220
我不能直接调用

16:12.220 --> 16:13.820
比方说我写急了

16:13.820 --> 16:14.780
写着急了

16:14.780 --> 16:16.060
马上直接去调用这个事件

16:16.060 --> 16:16.940
这里还写不了

16:16.940 --> 16:17.580
因为这里

16:17.580 --> 16:18.540
我刚才解构了

16:18.540 --> 16:19.660
没办法解构出来

16:20.220 --> 16:20.780
onclick

16:20.780 --> 16:21.340
解构出来

16:21.980 --> 16:23.580
比方说有的时候写单嘛

16:23.580 --> 16:25.500
写得着急活了

16:25.500 --> 16:26.940
这里直接写上一个onclick

16:27.900 --> 16:28.220
你看

16:29.180 --> 16:30.460
马上提示你

16:30.460 --> 16:31.660
这样很危险

16:31.660 --> 16:33.180
有可能它是个on低方

16:33.180 --> 16:33.740
对不对

16:33.740 --> 16:34.700
它有可能没传递

16:34.700 --> 16:35.260
没传递的话

16:35.260 --> 16:36.620
这里是不是要冒错了

16:36.620 --> 16:37.820
因此在ts里面

16:37.820 --> 16:39.420
你是根本就放不了这种错误

16:39.420 --> 16:40.780
它马上就会提示你

16:40.780 --> 16:41.340
该怎么办

16:41.340 --> 16:42.460
所以该就做一下判断

16:43.180 --> 16:43.740
onclick

16:43.740 --> 16:45.020
要有值

16:45.020 --> 16:47.020
有值过后才允许调用

16:47.980 --> 16:48.300
ok

16:48.300 --> 16:50.060
我们把这个事件也写好了

16:50.060 --> 16:51.100
你看现在写单嘛

16:52.540 --> 16:54.700
只有三个字

16:54.700 --> 16:55.500
安全感

16:55.500 --> 16:56.780
真的是有安全感

16:56.780 --> 16:57.660
你不怕写错

16:57.660 --> 16:58.940
写错的话会马上提示你

16:59.820 --> 17:00.060
好

17:00.060 --> 17:01.900
写好了这个组件过后呢

17:02.460 --> 17:04.060
这里我们就可以试一下

17:04.060 --> 17:04.620
试一下

17:05.500 --> 17:08.220
给每个组件去写这么一个函数

17:08.700 --> 17:09.180
onclick

17:11.180 --> 17:11.980
写个函数

17:11.980 --> 17:12.940
这个函数比方说

17:12.940 --> 17:13.980
你要传一个参数

17:14.460 --> 17:15.340
本来是没有参数的

17:15.340 --> 17:16.460
你硬要给它的参数

17:16.940 --> 17:17.900
那你是不是要冒错

17:17.900 --> 17:18.780
肯定要冒错

17:18.780 --> 17:19.580
我们之前说过

17:20.300 --> 17:22.380
在ts的内雄界兼容性

17:22.780 --> 17:23.900
对函数这一块呢

17:23.900 --> 17:25.100
参数你可以少

17:25.100 --> 17:26.220
但是你不能多

17:26.220 --> 17:27.500
你多了过后就要乱来

17:27.500 --> 17:29.260
这个参数别人根本就没有传递给你

17:29.260 --> 17:30.220
你怎么去用呢

17:30.220 --> 17:30.940
对不对

17:30.940 --> 17:33.820
所以说它不允许你写这种错误的单码

17:33.820 --> 17:34.460
没有参数

17:35.180 --> 17:36.140
我们这里

17:36.140 --> 17:37.020
console log

17:38.060 --> 17:38.860
被点击了

17:39.580 --> 17:41.260
就输出这么一个值就行了

17:41.260 --> 17:42.620
那么其他的也一样

17:42.620 --> 17:43.580
要如何同一个事件

17:43.580 --> 17:44.460
让我们来测试一下

17:45.740 --> 17:46.620
来测试一下

17:47.820 --> 17:48.140
好

17:48.140 --> 17:49.260
这里有三颗旗子

17:49.260 --> 17:50.620
测试一下它的点击事件

17:51.340 --> 17:52.380
首先看第一颗旗子

17:52.380 --> 17:53.340
我们到控制台里面来

17:54.460 --> 17:55.020
缩小一点

17:55.900 --> 17:57.020
第一颗旗子我们点击

17:57.100 --> 17:58.300
你看事件出发了

17:58.300 --> 17:59.180
没问题

17:59.180 --> 18:00.220
现在事件出发了

18:00.700 --> 18:02.620
第二颗旗子已经有旗子了

18:02.620 --> 18:03.180
点击

18:03.180 --> 18:04.780
你看事件没有出发

18:04.780 --> 18:06.060
这就是我们想要的效果

18:06.700 --> 18:08.620
这里点击事件没有出发

18:09.500 --> 18:10.460
它已经有旗子了

18:11.340 --> 18:11.660
OK

18:11.660 --> 18:12.700
那么现在呢

18:12.700 --> 18:14.380
我们就把这个简单的

18:14.380 --> 18:16.860
最简单的这么一个小格子

18:16.860 --> 18:19.180
一个小旗子的主线给它做出来了

