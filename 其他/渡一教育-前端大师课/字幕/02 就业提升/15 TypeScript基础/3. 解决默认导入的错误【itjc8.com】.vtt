WEBVTT

00:00.620 --> 00:04.460
OK 咱们来解释一下这里

00:04.460 --> 00:06.760
它为什么要爆错

00:06.760 --> 00:08.800
我们来看一下

00:08.800 --> 00:12.660
只需要去看一下生成的编译结果就完事了

00:12.660 --> 00:15.980
我们去看一下生成的编译结果很快就能明白

00:15.980 --> 00:17.260
它为什么要爆错

00:17.260 --> 00:19.560
这个编译结果它没有显示 因为

00:19.560 --> 00:23.920
我这里导入了过后没有使用 对吧 没有使用的话 它就会直接忽略

00:23.920 --> 00:26.720
我们这个要使用一下吧 强行写出来

00:26.720 --> 00:29.040
没有自然提示 因为它这里已经出问题了

00:29.040 --> 00:31.860
强行写出来 RedFile Sync

00:31.860 --> 00:34.920
就是读什么文件 无所谓了 不重要

00:34.920 --> 00:38.260
主要是看它的编译结果 为什么会爆错

00:38.260 --> 00:41.080
保存一下 让它重新编译 咱们再看一下

00:41.080 --> 00:42.600
它的编译结果

00:42.600 --> 00:44.400
你看一下 看一下这个代码

00:44.400 --> 00:46.440
我把那些不相干的代码给你删了

00:46.440 --> 00:51.220
我把那些不相干的代码就给你删掉

00:51.220 --> 00:52.500
你看一下吧

00:52.500 --> 00:53.780
这是生成的代码

00:53.780 --> 00:55.820
你觉得它爆错吗

00:55.820 --> 00:59.420
你觉得这个文件这个模块是这样子用的吗

00:59.420 --> 01:00.700
肯定不是 对吧

01:00.700 --> 01:01.980
它是怎么用的呢

01:01.980 --> 01:05.300
它是导入进来 然后使用Default

01:05.300 --> 01:06.580
用这种方式

01:06.580 --> 01:09.140
然后第二RedFile Sync

01:09.140 --> 01:10.180
为什么呢

01:10.180 --> 01:13.760
就是我们之前说的 你看之前是不是在这样子做

01:13.760 --> 01:15.300
之前我们调用

01:15.300 --> 01:16.580
导入这个模块的时候

01:16.580 --> 01:19.640
你看我们之前导入这个模块的时候 导入个CHello

01:19.640 --> 01:21.180
这个CHello变成了啥

01:21.180 --> 01:24.260
在CommonJS里边没有什么默认导入

01:24.260 --> 01:26.040
CommonJS没有这个东西

01:26.040 --> 01:29.360
因此它生成了一个属性Default

01:29.360 --> 01:30.400
你看我们之前

01:30.400 --> 01:31.680
导出的时候

01:31.680 --> 01:34.240
导出一个默认导出的时候

01:34.240 --> 01:36.800
它是使用属性Default

01:36.800 --> 01:40.380
因此它导入进来的时候也是使用属性Default

01:40.380 --> 01:41.400
那么这边

01:41.400 --> 01:44.480
我们使用的是默认导入

01:44.480 --> 01:46.000
那么它使用的属性

01:46.000 --> 01:47.280
仍然是Default

01:47.280 --> 01:50.100
它在Default里面去找这些东西

01:50.100 --> 01:52.660
那有没有肯定没用啊 对不对

01:52.660 --> 01:55.220
所以说究其根源是怎么回事呢

01:55.320 --> 01:56.460
根源是啥呢

01:56.460 --> 01:58.500
根源是这个模块压根

01:58.500 --> 02:01.140
就不是用TS写的

02:01.140 --> 02:02.820
它就不是用TS写的

02:02.820 --> 02:04.660
它是怎么导出的呢

02:04.660 --> 02:05.780
它是这样导出的

02:05.780 --> 02:07.300
在FS模块里边

02:07.300 --> 02:09.500
它是用这种方式来导出的

02:09.500 --> 02:10.620
也是Port

02:10.620 --> 02:11.740
用这种方式

02:11.740 --> 02:13.500
来导出的

02:13.500 --> 02:14.500
因此呢

02:14.500 --> 02:16.660
我导入的时候它给你加了一个Default

02:16.660 --> 02:17.900
它肯定不行啊

02:17.900 --> 02:18.620
肯定不行啊

02:18.620 --> 02:20.260
它不是放到Default里面的

02:20.260 --> 02:21.460
因此它出了问题

02:21.460 --> 02:23.780
它给你提出的错误就是

02:23.780 --> 02:24.980
FS这个模块

02:24.980 --> 02:26.820
它没有默认导出

02:26.820 --> 02:28.900
没有默认导出

02:28.900 --> 02:30.140
那这个时候怎么处理呢

02:30.140 --> 02:31.220
这个时候

02:31.220 --> 02:32.940
处理的办法很简单

02:32.940 --> 02:35.100
咱们给它改一下代码

02:35.100 --> 02:37.140
我们这样子改一下

02:37.140 --> 02:38.980
这里

02:38.980 --> 02:41.220
read file sync

02:41.220 --> 02:44.180
我们读取文件这个函数

02:44.180 --> 02:44.980
不是这个玩意吗

02:44.980 --> 02:45.380
对吧

02:45.380 --> 02:47.460
我们通过这种方式来导入

02:47.460 --> 02:49.020
大家看一下

02:49.020 --> 02:50.380
这种方式导入过后呢

02:50.380 --> 02:51.940
我们再编译

02:51.940 --> 02:53.140
我们把一些不相干的代码

02:53.140 --> 02:54.180
把它注射掉了

02:54.220 --> 02:56.620
这些我们先暂时不用

02:56.620 --> 02:57.580
先暂时不用

02:57.580 --> 02:59.060
只需要这两个代码

02:59.060 --> 03:00.820
我们保存

03:00.820 --> 03:01.620
让它编译

03:01.620 --> 03:03.780
编译完了过后我们去看一下

03:03.780 --> 03:05.580
你看一下现在是不是正确了

03:05.580 --> 03:07.660
现在编译的结果是不是正确了

03:07.660 --> 03:09.060
就跟之前一样

03:09.060 --> 03:12.260
这个东西好像是导出的一个成员

03:12.260 --> 03:13.780
导出的对象里一个成员

03:13.780 --> 03:15.780
那它是不是导出对象的一个成员

03:15.780 --> 03:16.380
确实是

03:16.380 --> 03:16.780
对吧

03:16.780 --> 03:17.780
确实是

03:17.780 --> 03:19.100
导出的对象是这个

03:19.100 --> 03:20.860
对象里面有一个成员

03:20.860 --> 03:22.020
read file sync

03:22.020 --> 03:23.620
于是现在就正确了

03:23.660 --> 03:25.740
通过这种方式来完成

03:25.740 --> 03:27.780
就是说有的时候你爆错了

03:27.780 --> 03:28.700
什么原因爆错的

03:28.700 --> 03:30.020
你要搞清楚什么原因

03:30.020 --> 03:32.100
是因为有些模块不是我写的

03:32.100 --> 03:33.460
我肯定不会这样子写

03:33.460 --> 03:35.300
因为我使用了ts过后

03:35.300 --> 03:36.380
我说过

03:36.380 --> 03:39.540
统一使用es6的方式导入导出

03:39.540 --> 03:41.780
统一使用es6的方式来导入

03:41.780 --> 03:43.180
就不会有这个问题

03:43.180 --> 03:45.140
但是以前有些模块

03:45.140 --> 03:46.700
它是使用的橫子

03:46.700 --> 03:48.500
就是GS那种方式导出的

03:48.500 --> 03:50.140
是使用这种方式导出的

03:50.140 --> 03:52.860
不是使用es6的方式导出的

03:52.940 --> 03:53.900
那这里就没办法

03:53.900 --> 03:55.980
我们可以使用这种方式

03:55.980 --> 03:56.700
当然写到这里头

03:56.700 --> 03:57.660
有一些同学要问了

03:57.660 --> 03:58.420
我说

03:58.420 --> 04:01.060
这个对象里面这么多函数

04:01.060 --> 04:02.460
我一个一个写

04:02.460 --> 04:03.580
这不太麻烦了吗

04:03.580 --> 04:05.940
我还是希望像以前那种写法

04:05.940 --> 04:06.780
可以

04:06.780 --> 04:07.380
可以

04:07.380 --> 04:08.540
怎么做

04:08.540 --> 04:09.420
这样子写

04:09.420 --> 04:10.700
把这些不相干的删掉

04:12.300 --> 04:12.780
怎么写

04:12.780 --> 04:14.380
这样子写

04:14.380 --> 04:17.060
我们在es6里面导入模块的时候

04:17.060 --> 04:18.660
不是有这种写法吗

04:18.660 --> 04:21.060
导入这个模块的所有内容

04:21.100 --> 04:24.500
把所有的声明全部导入进来

04:24.500 --> 04:24.900
导入进来

04:24.900 --> 04:26.020
该取个别名

04:26.020 --> 04:26.780
fs

04:27.980 --> 04:28.940
现在再看一下

04:28.940 --> 04:32.540
fs.redsync

04:32.540 --> 04:33.980
保存一下

04:33.980 --> 04:34.820
它现在没爆错了

04:34.820 --> 04:35.860
没爆错了

04:35.860 --> 04:36.980
再看一下代码

04:37.980 --> 04:38.820
舒服

04:38.820 --> 04:40.500
是不是我们的common.jsc代码

04:40.500 --> 04:42.140
就是common.jsc代码了

04:42.140 --> 04:43.780
相当于是你给它取了个名字

04:43.780 --> 04:44.700
fs

04:44.700 --> 04:46.740
你自己要使用的名字

04:46.740 --> 04:48.540
那么后边就可以使用fs

04:48.540 --> 04:49.980
去调用它里面的成员了

04:50.780 --> 04:52.700
总之这里大家记住

04:52.700 --> 04:54.500
这一块的原理

04:54.500 --> 04:56.660
你要去对比它的编译结果来看

04:56.660 --> 04:59.020
如果你实在理解不了它的编译结果

04:59.020 --> 05:00.100
觉得这里怎么复杂

05:00.100 --> 05:01.340
其实有什么复杂的吗

05:01.340 --> 05:02.500
也没有多少复杂的

05:02.500 --> 05:03.460
就是要绕一下

05:03.460 --> 05:04.620
稍微的绕一下

05:04.620 --> 05:07.180
因为es6这个模块化标准

05:07.180 --> 05:08.740
和es

05:08.740 --> 05:10.820
common.jsc这个模块化标准

05:10.820 --> 05:12.940
还是区别还是不少的

05:12.940 --> 05:14.260
区别还是不少

05:14.260 --> 05:15.820
因此它要完成这个转换

05:15.820 --> 05:17.060
它实在是没有办法

05:17.060 --> 05:19.500
它尽力的在给你做

05:19.620 --> 05:21.820
因此会造成一些差异

05:21.820 --> 05:22.940
那么使用这种方式过后

05:22.940 --> 05:24.180
去对比一下编译结果

05:24.180 --> 05:25.660
你就明白怎么回事了

05:25.660 --> 05:28.620
总之我们这一块解决这种问题的办法

05:28.620 --> 05:30.620
如果以后你倒入一个模块

05:30.620 --> 05:33.060
那个模块是用common.jsc

05:33.060 --> 05:34.220
用module

05:34.220 --> 05:38.780
通过module.exports

05:38.780 --> 05:39.860
这样子来导出的

05:39.860 --> 05:41.900
它是通过这种方式来导出的

05:41.900 --> 05:42.860
那么这种模块

05:42.860 --> 05:45.420
你是没有办法进行默认导入的

05:45.420 --> 05:46.980
没有办法进行默认导入

05:46.980 --> 05:48.420
那么你只能怎么办

05:48.460 --> 05:50.420
只能使用这种方式

05:50.420 --> 05:53.980
或者是这种方式

05:53.980 --> 05:56.380
这种方式两者都可以

05:56.380 --> 05:57.060
都可以

05:57.060 --> 05:58.260
看你自己喜欢哪一种

05:59.820 --> 06:01.140
说到这呢

06:01.140 --> 06:02.940
有些同学不干了

06:02.940 --> 06:03.900
我播

06:03.900 --> 06:04.900
我就播

06:04.900 --> 06:06.580
我一定要使用这种方式

06:06.580 --> 06:07.380
你给我想办法

06:07.380 --> 06:08.700
我一定要使用这种方式

06:08.700 --> 06:09.900
地上打滚吐口水

06:11.780 --> 06:12.700
我想办法

06:12.700 --> 06:13.300
我想办法

06:14.380 --> 06:15.780
其实这里还是有办法的

06:15.780 --> 06:16.940
还是有办法的

06:16.980 --> 06:19.180
需要你进行一下配置

06:19.180 --> 06:20.660
其实TS也可以想到了

06:20.660 --> 06:22.420
总会有这样的强迫症

06:22.420 --> 06:22.660
对吧

06:22.660 --> 06:24.020
其实我也是个强迫症

06:24.020 --> 06:25.580
我也受不了刚才的那种写法

06:25.580 --> 06:27.420
有的时候我就要用这种写法

06:27.420 --> 06:28.500
怎么办呢

06:28.500 --> 06:31.460
如果你要使用这种写法的话

06:31.460 --> 06:33.660
它需要增加一些编译结果里边

06:33.660 --> 06:35.300
需要增加一些额外代码

06:35.300 --> 06:37.180
来帮辅助理来进行完成

06:37.180 --> 06:38.860
完成这样的导入导出

06:38.860 --> 06:39.500
那么怎么办呢

06:39.500 --> 06:41.220
其实你加一个配置就完成了

06:41.220 --> 06:42.460
加什么配置

06:42.460 --> 06:43.580
这个配置的名字

06:43.580 --> 06:44.940
我写到笔记里面了

06:44.940 --> 06:46.020
看一下

06:46.060 --> 06:47.660
加这个配置就这里

06:47.660 --> 06:49.580
叫ES module

06:49.580 --> 06:53.420
使用ES模块化标准进行交互

06:53.420 --> 06:54.420
跟谁交互

06:54.420 --> 06:56.220
跟非ES模块化

06:56.220 --> 06:57.180
就是比方说

06:57.180 --> 06:59.220
common.js写的模块化

06:59.220 --> 07:01.260
这样的代码来进行交互

07:01.260 --> 07:03.220
使用ES模块化的标准

07:03.220 --> 07:06.940
和非ES模块化来进行交互

07:06.940 --> 07:08.540
把这个东西启用就行了

07:08.540 --> 07:10.860
说了半天就直接启用就完事了

07:10.860 --> 07:12.700
咱们启用吧

07:12.700 --> 07:14.980
把启用保存一下

07:15.020 --> 07:16.980
启用之后

07:16.980 --> 07:17.540
咱们再看

07:17.540 --> 07:18.580
这里不爆错了

07:18.580 --> 07:19.740
不爆错了

07:19.740 --> 07:20.580
保存一下

07:20.580 --> 07:22.340
它生存的代码是啥呢

07:22.340 --> 07:23.140
我们来看一下

07:23.140 --> 07:24.580
它生存的代码

07:24.580 --> 07:26.340
它生存了一个辅助函数

07:26.340 --> 07:27.620
input default

07:27.620 --> 07:29.940
就是导入默认的模块

07:29.940 --> 07:31.660
这个辅助函数有兴趣的同学

07:31.660 --> 07:32.500
可以去看一下

07:32.500 --> 07:33.820
我就不去展开了

07:33.820 --> 07:35.700
我就不去展开讲了

07:35.700 --> 07:37.060
这个辅助函数里面

07:37.060 --> 07:37.980
它要用到

07:37.980 --> 07:39.860
我们之前看到的属性值

07:39.860 --> 07:41.300
我们之前看到的属性值

07:41.300 --> 07:41.740
对吧

07:41.740 --> 07:42.460
每一个模块

07:42.460 --> 07:44.260
它都有属性值

07:44.300 --> 07:46.060
它把它设为处的时候

07:46.060 --> 07:47.940
表示这个模块导出的标准

07:47.940 --> 07:49.820
使用的是怎么方式的导出

07:49.820 --> 07:51.700
使用的是ES标准导出

07:51.700 --> 07:53.580
如果把它设为处

07:53.580 --> 07:54.540
每个模块都有

07:54.540 --> 07:56.020
包括我们之前想的这个模块

07:56.020 --> 07:58.060
我们使用的是ES标准导出的

07:58.060 --> 07:59.460
那么导出的时候

07:59.460 --> 08:00.820
它会设置这么一个属性

08:00.820 --> 08:01.860
把它设为处

08:01.860 --> 08:02.620
设为处过后

08:02.620 --> 08:03.780
它这边就可以判断

08:03.780 --> 08:04.500
你这个模块

08:04.500 --> 08:06.260
是不是用ES标准导出的

08:06.260 --> 08:08.500
当然Fs模块是不是

08:08.500 --> 08:09.620
肯定不是

08:09.620 --> 08:12.140
它是用module.exports那种方式

08:12.140 --> 08:12.980
在导出的

08:13.100 --> 08:15.500
不是使用ES6的方式来导出的

08:15.500 --> 08:17.180
因此如果不是怎么办

08:17.180 --> 08:18.700
你看这里怎么办的

08:18.700 --> 08:20.260
加一个属性default

08:20.260 --> 08:21.820
给它加一个属性default

08:21.820 --> 08:24.100
这个属性等于这个模块

08:24.100 --> 08:25.500
导入的这个模块

08:25.500 --> 08:27.580
因此后边就可以使用default了

08:27.580 --> 08:28.860
总之它的目标就是

08:28.860 --> 08:32.060
给它转换成这种标准格式

08:32.060 --> 08:33.260
默认导出的时候

08:33.260 --> 08:35.060
使用default属性导出

08:35.060 --> 08:36.260
总之它进行下转换

08:36.260 --> 08:37.660
写了一个辅助函数

08:37.660 --> 08:38.820
你可以看

08:38.820 --> 08:40.020
那就看一下这个代码

08:40.020 --> 08:40.980
如果实在看不懂的话

08:40.980 --> 08:42.060
没关系你记住

08:42.100 --> 08:43.540
把这个地方加上

08:43.540 --> 08:45.540
ES module interrupt

08:45.540 --> 08:47.460
那么这个世界又清晶了

08:47.460 --> 08:50.500
哪怕是遇到那些用load的标准

08:50.500 --> 08:52.460
用module.exports标准

08:52.460 --> 08:53.260
导出的模块

08:53.260 --> 08:56.500
我们也可以用这种方式来进行交互了

08:56.500 --> 08:58.460
总之目的是什么

08:58.460 --> 09:00.300
目的就是我之前说的

09:00.300 --> 09:02.420
在TS中书写代码的时候

09:02.420 --> 09:05.460
使用ES6的方式导入和导出

09:05.460 --> 09:07.620
统一使用ES6的模块化标准

09:07.620 --> 09:09.100
不要使用其他玩意了

09:09.100 --> 09:10.980
我们之后的模块化标准的书

09:11.020 --> 09:12.020
就完全统一了

09:12.020 --> 09:14.260
不然的话一会又是ES6

09:14.260 --> 09:16.500
一会又是load的解释

09:16.500 --> 09:17.860
反正要是

09:17.860 --> 09:20.060
我们把这个问题先解决

09:20.060 --> 09:21.020
解决这个问题

09:21.020 --> 09:22.740
其实这两边议

09:22.740 --> 09:23.900
这个边议选项

09:23.900 --> 09:25.340
其实我们已经讲的差不多了

09:25.340 --> 09:26.100
你看一下

09:26.100 --> 09:26.780
边议选项

09:26.780 --> 09:28.220
其实我们已经讲的差不多了

09:28.220 --> 09:29.900
还有两个

09:29.900 --> 09:30.820
这个我们先说一下

09:30.820 --> 09:34.140
这个load emits error

09:34.140 --> 09:34.860
啥意思呢

09:34.860 --> 09:36.700
就是像刚才我们已经爆错了

09:36.700 --> 09:37.340
对吧

09:37.340 --> 09:38.620
这个代码已经爆错了

09:38.620 --> 09:39.860
它还是可以编译

09:39.860 --> 09:40.780
还是可以编译

09:40.780 --> 09:42.460
比方说我们写个错误的代码

09:42.460 --> 09:44.940
net是一个制服错误

09:44.940 --> 09:46.500
但是我给它复制为一个数字

09:46.500 --> 09:47.700
一保存

09:47.700 --> 09:48.460
保存

09:48.460 --> 09:49.940
它这里会提示你的错误

09:49.940 --> 09:51.420
让你去更改这个错误

09:51.420 --> 09:52.660
但是呢

09:52.660 --> 09:54.380
它仍然可以完成编译

09:54.380 --> 09:55.580
仍然可以完成编译

09:55.580 --> 09:56.980
它是比较宽松的

09:56.980 --> 09:57.740
那么这个时候

09:57.740 --> 09:59.460
如果你希望更严格一点

09:59.460 --> 10:00.620
希望更严格一点

10:00.620 --> 10:01.100
如果爆错了

10:01.100 --> 10:01.940
你不要编译了

10:01.940 --> 10:04.700
不要把这些带有隐患的代码

10:04.700 --> 10:07.140
这个代码在GS里面肯定是不会爆错的

10:07.140 --> 10:09.020
GS里面你看这个代码会爆错吗

10:09.020 --> 10:10.460
肯定不会爆错的

10:10.500 --> 10:11.300
所以说

10:11.300 --> 10:14.900
它为了能把它运行出来的话

10:14.900 --> 10:16.340
它是可以允许的编译的

10:16.340 --> 10:17.660
默认情况下

10:17.660 --> 10:18.780
但是你可以改

10:18.780 --> 10:19.980
这个配置是可以改的

10:19.980 --> 10:21.820
怎么改呢

10:21.820 --> 10:23.140
把这个加上

10:23.140 --> 10:23.900
no ammeter

10:23.900 --> 10:26.020
ammeter就是生成结果

10:26.020 --> 10:27.660
no ammeter on error

10:27.660 --> 10:29.260
就是当错误的时候

10:29.260 --> 10:31.020
我们就不要生成结果了

10:31.020 --> 10:31.340
OK

10:31.340 --> 10:33.260
我们这里加入这个配置

10:33.260 --> 10:34.100
加入这个配置

10:34.100 --> 10:36.540
把它设备去保存一下

10:36.540 --> 10:37.100
OK

10:37.100 --> 10:38.180
现在呢

10:38.180 --> 10:39.700
我们比方说先删了

10:39.740 --> 10:40.220
先删了

10:40.220 --> 10:41.340
把错误的代码删了

10:41.340 --> 10:43.020
然后现在我们再写这个错误代码

10:44.300 --> 10:44.820
保存

10:45.460 --> 10:46.100
保存

10:46.660 --> 10:47.220
你看

10:47.220 --> 10:48.740
并没有到编译结果里面

10:48.740 --> 10:50.460
编译结果还是之前的编译结果

10:50.460 --> 10:51.820
并没有到编译结果里面

10:51.820 --> 10:52.420
OK

10:52.420 --> 10:54.540
这是关于这个配置

10:54.540 --> 10:56.180
一个颅外的配置我讲一讲

10:56.180 --> 10:56.780
提一提

10:56.780 --> 10:57.660
好

10:57.660 --> 11:00.740
现在我们解决了刚才导入

11:00.740 --> 11:03.140
node.gps模块化导出的东西

11:03.140 --> 11:04.020
默认导入的时候

11:04.020 --> 11:04.940
要爆错的问题

11:04.940 --> 11:05.860
解决这个问题

11:06.860 --> 11:09.420
那么下面我们要讲的是什么呢

11:09.580 --> 11:10.740
我们要讲的是

11:10.740 --> 11:12.140
有的时候

11:12.140 --> 11:14.220
其实我也想不到有什么时候

11:14.220 --> 11:15.540
我觉得没有必要了

11:15.540 --> 11:16.740
因为平时我们写的时候

11:16.740 --> 11:19.780
都是统一使用es6的模块化标准来写

11:19.780 --> 11:21.740
但是如果有一天

11:21.740 --> 11:25.540
基于一些不可描述的原因

11:25.540 --> 11:27.940
你一定要在ts代码里边

11:27.940 --> 11:32.020
书写common.gps规范的导入导出

11:32.020 --> 11:36.380
就是majord.export和inport和require

11:36.420 --> 11:39.940
你需要书写这样的类似于这样的代码的话

11:39.940 --> 11:41.060
那该怎么办

11:41.060 --> 11:43.700
这是我们下一个小节要研究的

11:43.700 --> 11:54.700
如何在ts中书写common.gps导入导出模块化代码

11:54.700 --> 11:56.260
这是我们下一个小节要研究的

11:56.260 --> 11:57.620
这个了解一下就行了

11:57.620 --> 11:59.580
如果你将来遇到了这个问题的话

11:59.580 --> 12:01.620
可以回过头来看一看这个视频

12:01.620 --> 12:03.020
其实现阶段的话

12:03.020 --> 12:04.700
我们之后包括练习的时候

12:05.140 --> 12:06.260
包括做项目的时候

12:06.260 --> 12:08.660
都不会是用common.gps模块化代码

12:08.660 --> 12:10.020
我们下个小节再说

