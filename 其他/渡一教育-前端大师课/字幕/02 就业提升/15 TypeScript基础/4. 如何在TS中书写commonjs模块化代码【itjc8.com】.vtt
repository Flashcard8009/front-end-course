WEBVTT

00:00.940 --> 00:02.980
好 接下来呢 我们来看

00:02.980 --> 00:06.900
如果一定要在TS里面去书写

00:06.900 --> 00:09.260
CommonJets不会画的代码的话

00:09.260 --> 00:10.700
应该如何来书写

00:10.700 --> 00:12.260
这里有一点不一样

00:12.260 --> 00:13.540
有一点不一样

00:13.540 --> 00:16.260
当然呢 你可以用这种方式来书写

00:16.260 --> 00:17.780
因为我们说过

00:17.780 --> 00:21.060
TS是Jets的超级

00:21.060 --> 00:23.380
所以说 利用脑的书写方式呢

00:23.380 --> 00:24.620
可不可以呢

00:24.620 --> 00:25.620
当然可以

00:25.620 --> 00:27.820
我们在这个模块里面导出一个name

00:27.820 --> 00:29.540
导出一个函数

00:29.940 --> 00:31.820
aNumber

00:31.820 --> 00:33.300
bNumber

00:33.300 --> 00:36.340
然后返回a加b

00:36.340 --> 00:37.860
这样导出肯定是没问题的

00:37.860 --> 00:38.940
没问题的

00:38.940 --> 00:40.020
然后呢导出的话

00:40.020 --> 00:43.380
我们也是用最原始的Jets的做法

00:43.380 --> 00:44.140
怎么写呢

00:44.140 --> 00:47.660
比方说Memajew等于Require

00:47.660 --> 00:49.020
Require

00:49.020 --> 00:50.180
Memajew

00:50.180 --> 00:51.300
没有任何问题的

00:51.300 --> 00:52.580
没有什么问题的

00:52.580 --> 00:53.900
但是呢 很遗憾的是

00:53.900 --> 00:54.580
你这样子呢

00:54.580 --> 00:57.500
你就没有办法获得类型检查了

00:57.500 --> 00:59.260
你的类型检查就没了

00:59.300 --> 01:00.340
类型检查就没了

01:00.340 --> 01:01.700
它声称出来的代码

01:01.700 --> 01:02.700
你看

01:05.260 --> 01:05.940
你看

01:05.940 --> 01:08.100
它声称出来的代码呢

01:08.100 --> 01:09.820
这里切一下

01:09.820 --> 01:10.820
切一下

01:11.900 --> 01:12.980
好 它声称出来的代码

01:12.980 --> 01:14.060
我们看一下

01:14.060 --> 01:15.860
你看就是原封不动的

01:15.860 --> 01:17.140
原封不动的

01:17.140 --> 01:18.340
输出就完事了

01:18.340 --> 01:19.380
所以说没有什么问题

01:19.380 --> 01:20.380
没有什么问题

01:20.380 --> 01:21.060
但是呢

01:21.060 --> 01:23.220
你无法获取类型检查

01:23.220 --> 01:25.820
因为它得到类型是n你

01:25.820 --> 01:28.660
如果你要获取类型检查的话

01:28.700 --> 01:30.020
这一块

01:30.020 --> 01:32.820
你必须要使用TS

01:32.820 --> 01:35.500
它的要求来进行代码输写

01:35.500 --> 01:37.100
它的要求是什么呢

01:37.100 --> 01:38.100
如果最好

01:38.100 --> 01:39.180
我反复的强调

01:39.180 --> 01:41.140
最好还是使用ES6

01:41.140 --> 01:43.220
那跟ES6的标准是完全一致的

01:43.220 --> 01:44.900
所以说没有任何问题

01:44.900 --> 01:47.420
如果你一定要使用这种方式的话

01:47.420 --> 01:49.100
它要求你这样子写

01:49.100 --> 01:50.260
你导出模块的时候

01:50.260 --> 01:52.500
不要写Majew的export

01:52.500 --> 01:54.460
应该写上export

01:54.460 --> 01:56.260
用这种方式来导出

01:56.260 --> 01:57.660
用这种方式导出

01:57.700 --> 02:00.260
深圳出来的代码是一样的

02:00.260 --> 02:01.820
编译的结果是一样的

02:01.820 --> 02:03.420
编译的结果没有任何编划

02:03.420 --> 02:05.700
但是你要使用这种语法来导出

02:05.700 --> 02:07.420
使用这种语法来导出的话

02:07.420 --> 02:09.140
它才会具有类型检查

02:09.140 --> 02:10.140
你看

02:10.140 --> 02:12.220
类型检查推断出来了

02:12.220 --> 02:13.020
好

02:13.020 --> 02:14.460
使用这种方式导出的话

02:14.460 --> 02:15.420
导入的时候

02:15.420 --> 02:17.220
你不能使用这种方式导入

02:17.220 --> 02:18.620
不能使用这种方式

02:18.620 --> 02:20.140
可以使用哪些方式呢

02:20.140 --> 02:23.300
你当然可以使用ES6的方式

02:23.300 --> 02:24.300
Majew

02:24.300 --> 02:26.460
因为我们添加了配置

02:26.500 --> 02:28.260
我们添加了这个配置

02:28.260 --> 02:29.460
ESMajew

02:29.460 --> 02:30.660
Intrub

02:30.660 --> 02:31.900
如果你没有添加这个配置的话

02:31.900 --> 02:33.420
这种方式要包错的

02:34.540 --> 02:35.420
from

02:36.060 --> 02:37.180
买Majew

02:37.180 --> 02:38.820
当然你可以使用这种方式

02:38.820 --> 02:40.540
使用这种方式导入

02:40.540 --> 02:41.500
导入过后

02:41.500 --> 02:42.340
你看

02:42.340 --> 02:44.060
它其实就已经

02:44.060 --> 02:45.940
Majew.name上

02:45.940 --> 02:47.780
它就有智能提示了

02:47.780 --> 02:48.580
那你不说

02:48.580 --> 02:49.580
那你可能会想

02:49.580 --> 02:50.420
不行

02:50.420 --> 02:52.460
我反正现在都在用comment.js

02:52.460 --> 02:54.060
我希望使用require

02:54.060 --> 02:55.460
一定要用

02:55.540 --> 02:56.460
真的要用

02:57.100 --> 02:58.180
真的要用

02:58.180 --> 02:59.660
那用吧

02:59.660 --> 03:02.060
用的话你得用这种方式

03:02.060 --> 03:03.260
你得用这种方式

03:03.260 --> 03:05.300
不能使用刚才的方式

03:05.300 --> 03:07.860
买Majew等于require

03:07.860 --> 03:08.860
这种方式不行

03:08.860 --> 03:09.700
这种方式不行

03:09.700 --> 03:10.980
它是没有检查的

03:10.980 --> 03:12.460
得到的结果是n你

03:12.460 --> 03:13.460
是n你

03:13.460 --> 03:15.060
你得使用这种方式

03:15.060 --> 03:17.100
做的事情就一个点

03:17.100 --> 03:19.100
你把这个地方改成inport

03:19.580 --> 03:20.620
改成inport

03:20.620 --> 03:22.020
那么现在呢

03:22.020 --> 03:23.900
就有内雄推倒了

03:23.900 --> 03:25.060
他就知道他的内雄了

03:25.100 --> 03:25.780
他内雄

03:25.780 --> 03:27.500
Name上都出来了

03:27.500 --> 03:28.700
很简单

03:28.700 --> 03:29.580
如果你说不行

03:29.580 --> 03:31.180
我这里一定要去couns

03:32.180 --> 03:33.300
我没办法了

03:33.300 --> 03:34.300
我没办法了

03:34.300 --> 03:35.500
只能到这了

03:35.500 --> 03:36.620
只能到这了

03:36.620 --> 03:38.060
comment.js

03:38.060 --> 03:39.820
在ts里边

03:41.820 --> 03:43.220
我不太建议使用

03:43.220 --> 03:44.540
不太建议使用这样的语法

03:44.540 --> 03:47.180
我建议使用是es6标准的语法

03:47.180 --> 03:49.260
这个标准他早问会统一的

03:49.260 --> 03:50.420
早问会统一的

03:50.420 --> 03:51.460
像comment.js

03:51.460 --> 03:52.780
像umd

03:52.780 --> 03:53.700
amd

03:53.700 --> 03:54.260
system

03:54.300 --> 03:55.540
这些模块化标准

03:55.540 --> 03:56.540
慢慢的慢慢的

03:56.540 --> 03:58.220
就会推出历史舞台了

03:58.220 --> 03:59.260
所以说大家

04:00.260 --> 04:02.500
不管是在开发后端

04:02.500 --> 04:04.940
node.js的环境下面也好

04:04.940 --> 04:06.660
还是在开发扭烂型环境也好

04:06.660 --> 04:08.020
尽量的都使用

04:08.020 --> 04:09.740
es6的标准

04:09.740 --> 04:10.020
好

04:10.020 --> 04:10.940
这是关于

04:10.940 --> 04:12.100
如果你一定要写

04:16.020 --> 04:18.260
如果你一定要写

04:18.260 --> 04:19.660
这个comment.js的代码的话

04:19.660 --> 04:22.860
该这样子去书写

04:22.900 --> 04:24.340
OK这是关于这一点

04:24.340 --> 04:26.140
把它讲一讲

04:26.140 --> 04:27.420
这就把它说一下

04:27.420 --> 04:28.380
导出的时候

04:28.380 --> 04:29.140
总结一下

04:29.140 --> 04:31.020
导出的时候使用什么代码导出

04:31.020 --> 04:32.380
使用export

04:32.380 --> 04:34.460
这种方式在导出

04:34.460 --> 04:35.940
那么导入的时候

04:35.940 --> 04:38.020
如果你用comment.js的标准的话

04:38.020 --> 04:39.740
那么使用import

04:39.740 --> 04:42.020
它等于require

04:42.020 --> 04:43.580
用这种方式在导入

04:43.580 --> 04:44.780
都是可以的

04:44.780 --> 04:44.980
好

04:44.980 --> 04:46.100
这是关于这一块

