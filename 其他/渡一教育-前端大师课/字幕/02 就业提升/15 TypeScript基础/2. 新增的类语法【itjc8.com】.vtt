WEBVTT

00:00.820 --> 00:06.180
好 那么接下来呢 我来书写一下啊 在ts里面去书写一下内

00:07.060 --> 00:15.220
好 我们找找代码里面啊 这里呢 我们按照以前学习介石的时候 内的书写方式来进行书写

00:15.620 --> 00:20.820
class 比方说创建一个什么内呢 用户内吧 充电一个用户内

00:21.460 --> 00:26.420
好 这个用户内里边有哪些属性呢 我们写个构造函数 对吧 以前就是这样子写的 对不对

00:26.900 --> 00:30.660
构造函数 用户有哪些属性呢 有用户的

00:31.380 --> 00:34.580
这什么啊 有用户的

00:37.140 --> 00:38.340
账号啊 账号

00:40.420 --> 00:47.300
啊 或者是用户的姓名吗 姓名 然后有用户的年龄啊 随便写一些年龄

00:47.860 --> 00:51.620
还有姓别啊 姓名就不写了 就这两个属性吧啊 就这两个属性

00:52.100 --> 00:54.260
然后负责给当前的属性负责

00:58.740 --> 01:00.740
写完了之后 他马上就爆出了

01:01.860 --> 01:07.140
怎么回事呢 以前的接试单这个单码在接试中是正确的 对吧 接试中是正确的 没有任何问题

01:07.700 --> 01:13.380
但是呢 在ts 中他不这样认为 他认为呢 你这样子写单码呢 不是很好

01:13.860 --> 01:19.060
因为你写一个内的时候 就是你不写构造函数啊 不写构造函数

01:19.540 --> 01:27.300
这个内写出来了过后呢 这个内里边有哪些属性 你应该是非常清楚的 比方说用户 我还没有写构造函数

01:28.020 --> 01:35.700
用户建立这个内过后呢 他里边有哪些属性 应该就马上就很清楚了 用户里面有姓名有年龄啊 这些属性就应该

01:35.940 --> 01:37.220
非常清楚的知道

01:37.860 --> 01:45.220
所以说呢 他认为你这个属性的创建啊 创建的属性这个工作 应该单独找一个地方写

01:45.540 --> 01:48.980
你不应该在构造函数里比较动态的来创建属性 你看

01:49.380 --> 01:54.740
现在是动态创建属性对吧 如果我不写这两行是不是一个属性都没有 对不对 一个属性都没有

01:55.060 --> 02:02.020
我写了这两行啊 之前没有这个内属性 给他加一个属性 之前没有这个A级属性 给他加一个A级属性

02:02.580 --> 02:09.620
就是以前在js 里边 他是允许我们动态的去增加属性的 往一个内里边去增加属性

02:10.420 --> 02:18.420
但是呢 在ts 里面只不允许这样做的 他就认为这个做法 这种做法很怪就很奇怪 比方说

02:19.060 --> 02:21.540
我们在ts 里面我们之前好像还没有写过这种代码

02:22.660 --> 02:24.180
ob 界一个空的

02:24.900 --> 02:28.500
一个空的对象 然后呢 我们去跟动态的增加属性

02:29.220 --> 02:34.340
动态的增加属性 行不行 不行 他不允许你这样做啊 不允许你这样做

02:34.740 --> 02:40.180
他的意思是 一个对象在创建的时候 他的属性就应该完全确定下来

02:40.500 --> 02:47.380
不能在后边随着去增加 这样子呢会导致很多乱七八糟的代码 或者是很多具有隐患的代码出现

02:48.500 --> 02:53.540
因此呢ts 他更加严格 他认为属性这个东西是不能动态增加的

02:53.780 --> 03:00.020
你像这种代码 在动态的我为当前这个对象增加属性 他认为这样做是不成的啊 不行的

03:00.740 --> 03:06.100
那么在ts 中怎么来输写这个属性呢 那我现在一个属性都不能增加了 怎么办呢

03:06.340 --> 03:09.300
ts 要求啊 关于属性这一块

03:09.860 --> 03:11.460
我一块说 关于属性

03:12.740 --> 03:16.500
他要求你使用使用属性列表

03:17.860 --> 03:20.420
来描述内中的属性

03:21.860 --> 03:26.980
内里边有哪些属性 你应该用一个属性列表来描述这个列表写在哪呢

03:27.460 --> 03:34.740
就写到直接写到这个内下边 就写到这个内里边 那么写什么呢 有哪些属性就写什么啊 有什么属性就写什么

03:35.300 --> 03:36.260
好 有一个内部属性

03:37.220 --> 03:38.900
什么内详 内详是一个字不串

03:39.700 --> 03:42.260
一个属性有了 你看下面马上都不爆错了

03:42.900 --> 03:47.940
然后有一个A级属性 属性的内详是一个number 是一个number

03:48.580 --> 03:56.100
原来吧 好 这就是通过这种方式来描述属性 一个属性列表啊 你应该直接输写到这个内里边 当然呢

03:57.060 --> 03:58.900
这个编译结果里边有没有这个东西

03:59.460 --> 04:03.380
编译结果里面肯定是没有的啊 咱们编译试一下 npm装标

04:05.570 --> 04:06.210
好 刘伟发现

04:07.650 --> 04:12.610
出来了啊 刘伟发现编译结果里边是没有这个东西的啊 这个东西只存在ts里边

04:13.010 --> 04:22.210
他会进行内询检查 他认为你写到这就表示这个内里边有这两个属性了 你后边使用这个内的对象的时候呢只能使用这里的两个属性

04:23.490 --> 04:28.210
好 那么现在不爆错了对不对 那么我们后边呢也是一样啊 比方说我们创建一个内的对象

04:29.010 --> 04:33.090
看是U6一个U字啊 创建一个用户对象啊

04:33.890 --> 04:43.170
姓名年龄啊 写进去 写进去过后呢 我们后边用这个对象的时候呢 只能使用这两个属性啊 比方说你来这里给他添加一个属性身份证号

04:43.810 --> 04:47.010
添加一个行不行呢 不行啊 不行

04:48.130 --> 04:53.970
好 这是关于内这一块啊 内这一块他的属性应该用属性列表来表示

04:55.090 --> 04:56.290
好 接下来还有一个问题

04:56.290 --> 05:00.130
什么问题呢 就是如果啊

05:01.090 --> 05:04.370
会发生这么一件事 如果我不写这个勾招函数

05:05.250 --> 05:11.090
不写个勾招函数的话 他的他的东西是不是空的对不对啊 是不是空的空的勾招函数

05:11.810 --> 05:17.490
那么勾招函数都没有 那么这两个属性的值还是制服串还是数字吗

05:18.290 --> 05:24.370
是不一定的对不对 他就不一定是制服串不一定是数字了啊 当然你可以在这里使用啊给他

05:25.250 --> 05:30.290
你不给他复制的时候 他就是一个给他复制为制服串 这样子没问题啊 这样子没问题

05:30.850 --> 05:39.090
但是呢 但是呢 如果你不复制的时候 就跟他类型的描述不一致了 说好了是制服串你不复制他就是安定犯

05:39.890 --> 05:45.010
这个Number这个这个A级这个属性 你不复制的话他也是安定犯 但是我说的是他是Number

05:45.810 --> 05:51.730
那么就会导致一个问题 如果我忘记了设置勾招函数 如果我忘记了

05:52.290 --> 05:59.250
或者说我没有忘记输写勾招函数 但是我忘记给属性复制了 我这里这句话写掉了

05:59.730 --> 06:00.930
忘记了给属性复制

06:01.650 --> 06:09.170
那么这种情况 我希望他能够明确的告诉我 给我提示出来 避免我去犯这样的错误 有些属性是必须要有值的

06:10.290 --> 06:15.890
所以这个时候怎么来处理呢 这里个时候呢 可以进行一下配置 配置在配置文件里边

06:16.850 --> 06:24.320
加上这么一个配置 什么配置呢 叫做strict 更加严格的property

06:27.280 --> 06:36.640
属性initialization 就是属性的初始化 更加严格的方式来检查这个属性 有没有初始化

06:37.040 --> 06:42.720
有没有初始化这个属性 这个属性是不是一定有值的 进行一下检查 保存一下

06:43.680 --> 06:50.640
保存一下过来过后 他就抱错了 你看 他就进行了检查了 你这个A级年龄说好了是一个数字

06:51.440 --> 06:55.440
但是呢 有可能用 但是你这里勾招函数里边 没有给他复制

06:56.000 --> 07:02.000
没有给个给这个A级复制 那没有复制的话 就会导致他的指示 跟这个内雄描述不一致

07:02.400 --> 07:06.400
跟这个内雄描述不一致 因此呢 这里有可能会发生问题

07:07.120 --> 07:15.200
好 那么他这样提示过后呢 我们这里就可以把他加上A级 复制为这里的参数A级 这样里面问题了

07:16.800 --> 07:22.160
好 有的时候呢 还有可能会是这种情况 比方说性别 性别

07:24.000 --> 07:27.680
gender 他的内雄呢 是字面量

07:28.640 --> 07:37.200
男或者是女 男或者是女 你看 写完了过他就抱错了 对不对 写完了过他就抱错了 为什么抱错

07:37.360 --> 07:42.400
因为他说你这个属性没有出实话 那你应该怎么写呢 你可以这样子写

07:43.920 --> 07:49.040
gender 当然是男或者是

07:50.960 --> 07:55.680
或者是女 那么这里完成复制是一样的道理 是一样的道理

07:57.680 --> 07:59.680
但是呢 我想这样子做呢

08:00.640 --> 08:09.840
有点麻烦 我每次要创建一个对象要创建三个参数 当然给给定这个属性的值 给定这个性别是非常有必要的

08:10.240 --> 08:13.920
但是我能不能有这种 这种做法呢 就是说

08:14.640 --> 08:16.800
我这个性别啊 默认为男

08:17.440 --> 08:20.640
比方说啊 我这个系统呢 我开发的是一个

08:21.360 --> 08:26.960
是一个什么恐怖游戏 对吧 比方说啊 咱们这个开发的一个游戏要是恐怖游戏

08:27.360 --> 08:31.440
可能女生呢 比较少一点啊 女生玩的比较少一点 男生呢

08:31.840 --> 08:35.040
反正比较多一点 所以说咱们的会员里面呢 大部分都是男的

08:35.280 --> 08:38.080
因此呢 我每一次创建对象的时候都要去传一个男

08:38.400 --> 08:40.720
有点麻烦 我能不能有个默认值呢

08:41.200 --> 08:46.080
当然可以 你有这里有两种做法 第一种做法 给这个参数设个默认值

08:47.280 --> 08:49.600
给这个参数设个默认值 是不是完成了 对不对

08:50.240 --> 08:54.480
啊 他的内形要么是男要么是女 给他说一个默认值男啊 当然我这里顺便说一下

08:54.800 --> 08:58.000
这个地方应该是用什么 应该是用每一举 对吧

08:58.720 --> 09:01.200
啊 这里给他参数一个默认值 让他是男

09:01.840 --> 09:06.480
然后呢 我创建对象的时候呢 我就可以不写第三个参数了 让他保持默认值

09:06.640 --> 09:09.520
当然我需要为女的时候呢 我来这里写个女

09:10.160 --> 09:12.960
这样子是一种做法 这是一种做法

09:13.680 --> 09:14.720
第二种做法

09:15.680 --> 09:18.560
我连这个参数都不要了啊 不要这个参数

09:19.280 --> 09:20.240
啊 这里也不写了

09:21.120 --> 09:24.160
然后我直接给这个属性一个默认值

09:24.720 --> 09:26.400
直接给这个属性一个默认值

09:27.600 --> 09:30.400
通过这种方式 一个等号 给他复制为男

09:31.280 --> 09:33.760
也可以 他也能完成初始化

09:34.240 --> 09:38.320
也就是说初始化的工作呢 可以在构造函数里面完成

09:38.320 --> 09:41.040
他会检查构造函数 有没有给这个属性复制

09:42.080 --> 09:44.080
也可以直接在属性的位置

09:44.720 --> 09:49.520
直接给他完成初始化 当然前提条件 你得知道他的默认值是啥

09:49.840 --> 09:53.280
如果你不知道默认值是啥 比方说连你连你的默认值是啥

09:53.920 --> 09:55.440
你怎么来订呢 订不了

09:55.840 --> 09:57.520
新名的默认值是啥 订不了

09:57.520 --> 09:59.680
就像这种订不了的东西 那必须要传递

10:00.160 --> 10:05.120
如果能够定下来的东西 比方说性别 我们这个系统里面大部分都是男的

10:05.440 --> 10:07.200
那么就可以给他复制为一个默认值男

10:07.840 --> 10:10.480
好 后边如果要改变的话 我们就通过u

10:11.040 --> 10:12.960
点gender 重新给他复制就完成了

10:12.960 --> 10:14.240
重新给他复制就完成了

10:15.280 --> 10:16.560
好 这是一种做法啊

10:16.880 --> 10:18.720
好 那么这一部分呢 把记一下啊

10:20.160 --> 10:20.640
就是

10:21.840 --> 10:23.600
属性的初始化

10:24.320 --> 10:24.880
检查

10:26.240 --> 10:28.320
就是属性他配置的内询之后呢

10:29.520 --> 10:31.120
你必须要满足他这个内询

10:31.120 --> 10:32.880
如果你不复制的话 他就是安迪范

10:32.880 --> 10:35.680
我们可以给他加上啊 当然这个根据情况了

10:35.680 --> 10:38.320
有的时候呢 我觉得这个检查又挺烦人的

10:38.320 --> 10:39.760
有的时候我们可能会去掉

10:39.760 --> 10:42.720
当然有的时候如果你希望更严格的检查的话

10:42.720 --> 10:44.640
加上把他配置为处

10:45.200 --> 10:45.920
把他配置为处

10:46.400 --> 10:48.000
对属性的初始化进行检查

10:48.640 --> 10:52.800
检查完了之后呢 属性的初始化位置可以有两个啊

10:52.800 --> 10:53.280
属性

10:54.240 --> 10:56.720
属性的初始化位置

10:57.280 --> 10:58.160
有两个

10:58.160 --> 11:00.400
第一个呢 就是构造函数中

11:01.040 --> 11:02.000
构造函数中

11:02.000 --> 11:04.160
他会在构造函数里面去检查一下

11:04.160 --> 11:05.600
你这个属性有没有复制

11:05.600 --> 11:07.040
有没有在构造函数里面复制

11:07.840 --> 11:10.640
第二个位置呢 是属性默认值

11:11.440 --> 11:12.400
属性默认值

11:12.880 --> 11:14.160
就是在这里直接复制

11:14.880 --> 11:17.760
好 这是关于属性的初始化

11:18.960 --> 11:21.120
好 然后我们再来看

11:21.120 --> 11:22.400
再来看一些属性

11:22.400 --> 11:24.400
比方说

11:24.400 --> 11:26.160
比方说有一个身份证号

11:26.160 --> 11:28.560
假设有一个身份证号

11:28.560 --> 11:30.480
身份证号需要实名认证

11:30.480 --> 11:33.280
实名认证过后呢 就是一个身份证号

11:33.280 --> 11:34.720
这个制服串嘛 是吧

11:34.720 --> 11:36.160
我之前说过的

11:36.160 --> 11:38.240
如何来看待一个

11:38.240 --> 11:42.560
如何来区分数字制服串和数字两者的区别

11:42.560 --> 11:43.600
就看它怎么读的

11:43.600 --> 11:45.360
它是不是按照数字的读法

11:45.360 --> 11:46.720
那么身份证号这个东西呢

11:46.720 --> 11:47.520
它是一个制服串

11:47.520 --> 11:49.520
甭管它是不是全部是数字

11:49.520 --> 11:50.560
它一定是制服串

11:51.600 --> 11:53.200
好 身份证号呢

11:53.200 --> 11:53.920
我们认为

11:53.920 --> 11:55.840
在我们这个那种逻辑里边

11:55.840 --> 11:58.960
它是可以有 可以没有的

11:58.960 --> 12:00.640
比方说你有身份证号

12:00.640 --> 12:03.120
我就会比方说给你多加一些积分

12:03.760 --> 12:05.360
加一些积分之类的

12:05.360 --> 12:07.840
然后如果你没有这个身份证号呢

12:07.840 --> 12:09.520
如果你没有这个身份证号呢

12:09.520 --> 12:11.600
那么我就不给你加积分

12:11.600 --> 12:12.560
等等

12:12.560 --> 12:15.120
就是身份证号不是必须要有的

12:15.840 --> 12:16.320
但是呢

12:16.320 --> 12:17.680
如果你这样子写了过后

12:17.680 --> 12:18.960
它就遇到一个问题

12:18.960 --> 12:19.440
遇到一个问题

12:19.440 --> 12:20.000
怎么问题呢

12:20.000 --> 12:21.520
它就说你必须要出实话

12:21.520 --> 12:22.960
因为它是制服串嘛

12:22.960 --> 12:24.000
必须要出实话

12:24.000 --> 12:25.200
那么就会遇到这个问题

12:25.200 --> 12:26.800
但是我确实又没法出实话

12:26.800 --> 12:28.160
怎么出实话呢

12:28.160 --> 12:29.520
我都不知道它身份证号是什么

12:29.520 --> 12:31.040
而且它可以不传递的

12:31.040 --> 12:32.160
可以不传递的

12:32.160 --> 12:33.680
可以没有身份证号

12:33.680 --> 12:36.000
它可能后面实名认证过后呢

12:36.000 --> 12:37.680
才给这个身份证号复制

12:37.680 --> 12:38.800
那么这个时候怎么办呢

12:39.440 --> 12:40.320
这个时候怎么办呢

12:40.880 --> 12:42.560
其实你想想一个逻辑

12:42.640 --> 12:44.560
身份证号可以有值

12:45.120 --> 12:46.640
可以没有值

12:46.640 --> 12:48.640
说明它的类型应该是啥

12:48.640 --> 12:50.000
应该是制服串

12:50.720 --> 12:52.720
或者是undefend

12:53.280 --> 12:54.080
对吧

12:54.080 --> 12:57.440
或者是制服串或者是鸟

12:57.440 --> 12:58.000
默认值

12:58.000 --> 12:58.960
比方说鸟

12:58.960 --> 13:01.120
因为鸟要给默认值

13:01.120 --> 13:02.400
鸟要给默认值

13:02.400 --> 13:03.600
undefend可以不用给

13:03.600 --> 13:04.720
因为undefend不给的话

13:04.720 --> 13:05.760
默认就是undefend

13:05.760 --> 13:06.960
绝负值它就是undefend

13:08.400 --> 13:10.160
我们应该用这样的类型来约束

13:10.800 --> 13:11.600
当然这样子写呢

13:11.680 --> 13:12.640
有点麻烦

13:12.640 --> 13:13.680
可以用这种写法

13:13.680 --> 13:14.560
减写

13:14.560 --> 13:16.160
就是我们已经见过很多次了

13:16.160 --> 13:16.800
什么写法

13:16.800 --> 13:17.440
加个问号

13:18.160 --> 13:19.920
表示个属性是可选的

13:19.920 --> 13:21.600
可以有可以没有

13:21.600 --> 13:22.480
你指着它看一下

13:23.200 --> 13:25.840
其实就相当于是制服串

13:25.840 --> 13:26.800
和undefend的

13:27.600 --> 13:28.640
联合类型

13:28.640 --> 13:29.040
对不对

13:29.760 --> 13:30.560
好后边呢

13:30.560 --> 13:33.040
有了身份证号有值过后呢

13:33.040 --> 13:34.560
我要给它实名认证的时候呢

13:34.560 --> 13:36.160
再给它复制为一个制服串

13:36.160 --> 13:37.360
再给它复制为一个制服串

13:38.160 --> 13:38.480
好

13:38.480 --> 13:40.800
这是关于可选属性

13:40.960 --> 13:41.680
可选属性

13:42.560 --> 13:45.870
这里属性

13:46.990 --> 13:49.790
可以修饰为可选的

13:50.270 --> 13:51.070
可选的

13:51.070 --> 13:52.350
那么可选的属性的话

13:52.350 --> 13:53.550
就不会有初始化了

13:53.550 --> 13:54.910
就不会有初始化的要求了

13:55.950 --> 13:56.190
好

13:56.190 --> 13:56.750
再下一个

13:58.270 --> 13:59.790
有的属性呢

14:00.590 --> 14:02.830
一旦完成初始化之后

14:03.630 --> 14:05.230
就不能再改变了

14:05.230 --> 14:06.270
你不能改动它了

14:06.990 --> 14:07.950
用到什么属性呢

14:08.590 --> 14:09.070
比方说

14:10.190 --> 14:11.070
id这个属性

14:11.710 --> 14:14.190
id这个属性是创建一个拥护的时候

14:14.190 --> 14:15.230
自动生成的

14:15.230 --> 14:16.590
自动生成一个id

14:16.590 --> 14:17.230
它是一个

14:17.950 --> 14:19.070
比方说随便

14:19.070 --> 14:19.630
数字吧

14:20.270 --> 14:21.550
当然它也可以是一个制服串

14:22.110 --> 14:22.430
好

14:22.430 --> 14:23.310
这里马上爆出了

14:23.310 --> 14:24.030
告诉你

14:24.030 --> 14:25.310
id必须要初始化

14:26.110 --> 14:27.550
你这里不能使用可选

14:28.110 --> 14:29.470
哪一个拥护没有id呢

14:29.470 --> 14:30.590
你不能使用可选

14:30.590 --> 14:31.790
那么这个时候你要去想

14:32.110 --> 14:33.950
我应该在什么时候初始化

14:33.950 --> 14:35.710
是直接给它复制默认值好一点吗

14:36.190 --> 14:38.590
还是说在勾到函数里面给它复制好一点

14:39.550 --> 14:40.590
那怎么复制呢

14:40.670 --> 14:42.030
我们在勾到函数里面复制

14:42.590 --> 14:43.950
因为我刚复制的内容

14:43.950 --> 14:46.190
是来自于一个水积数

14:46.750 --> 14:47.710
一个水积数

14:47.710 --> 14:48.750
比方说

14:48.750 --> 14:49.310
举个例子

14:49.310 --> 14:50.270
当然它不是水积数

14:50.670 --> 14:51.390
举个例子

14:51.390 --> 14:53.550
比方说这个id生成一个水积数

14:53.550 --> 14:54.350
作为它的id

14:55.230 --> 14:55.470
好

14:55.470 --> 14:56.910
我现在希望的是

14:57.790 --> 14:59.790
这个东西一旦复了直播后

14:59.790 --> 15:00.750
永远不要改变

15:01.550 --> 15:02.430
不能改变

15:04.270 --> 15:05.470
不能重新改变

15:05.470 --> 15:06.830
那么就相当于是什么

15:06.830 --> 15:08.190
相当于是const

15:08.830 --> 15:09.870
相当于是这个东西

15:10.990 --> 15:11.470
const

15:12.030 --> 15:12.670
但是呢

15:12.670 --> 15:13.470
遗憾的是

15:13.470 --> 15:15.310
这里是不能书写这个玩意的

15:15.310 --> 15:16.190
不能书写const

15:16.830 --> 15:17.390
那怎么办

15:18.030 --> 15:18.670
回忆一下

15:19.630 --> 15:20.670
有没有印象

15:20.670 --> 15:21.310
怎么办

15:21.310 --> 15:22.270
就是read only

15:22.910 --> 15:23.630
只读的

15:24.110 --> 15:25.470
这个属性只能读

15:25.470 --> 15:26.110
不能改

15:26.670 --> 15:27.230
于是呢

15:27.790 --> 15:28.750
你在外边

15:28.750 --> 15:30.350
你能够去读这个u的

15:31.550 --> 15:32.670
u的id

15:32.670 --> 15:33.950
能够读它没有任何问题

15:33.950 --> 15:35.070
你看没有爆错

15:35.070 --> 15:36.430
但是你去改它的话

15:36.910 --> 15:37.550
你看呀

15:37.550 --> 15:38.830
你随便改它都要爆错的

15:38.910 --> 15:39.790
它说

15:39.790 --> 15:40.910
这个东西呢

15:40.910 --> 15:41.870
这个东西

15:41.870 --> 15:43.550
它是read only

15:43.550 --> 15:44.430
只读的

15:44.430 --> 15:45.950
它不能进行修改

15:45.950 --> 15:47.070
你明白这个意思吗

15:47.070 --> 15:47.310
好

15:47.310 --> 15:49.070
我们可以对某一些属性

15:49.070 --> 15:50.030
不能修改的属性

15:50.030 --> 15:51.230
给它加上这个元素

15:51.230 --> 15:51.470
那么

15:52.110 --> 15:54.030
我们说的这一切的事情

15:54.030 --> 15:56.030
都是避免自己犯错

15:56.030 --> 15:57.390
都是避免自己犯错

15:57.390 --> 15:59.550
你说我们多写了什么代码呢

15:59.550 --> 16:01.230
像这个位置就多写了一个单词

16:01.230 --> 16:02.750
而且还有智能提示的

16:02.750 --> 16:03.710
你打出来

16:03.710 --> 16:04.750
前几个字母

16:04.750 --> 16:06.190
它就提示完成了

16:06.190 --> 16:08.030
说多写代码其实很少

16:08.110 --> 16:08.510
但是呢

16:08.510 --> 16:09.550
有了这个约束过后

16:09.550 --> 16:12.190
我们后边无论这个内用一百次

16:12.190 --> 16:13.950
用一千次用一万次

16:13.950 --> 16:15.150
它都永远不可能

16:15.870 --> 16:16.510
给i

16:16.510 --> 16:19.390
造成给id负值的这种这种错误

16:19.390 --> 16:20.750
或者说这种隐患

16:20.750 --> 16:22.910
它永远不可能造成这种隐患

16:22.910 --> 16:23.070
好

16:23.070 --> 16:24.270
所以说这种做法呢

16:24.270 --> 16:25.710
是非常非常有必要的

16:25.710 --> 16:27.150
进行下约束和限制

16:27.790 --> 16:28.110
OK

16:28.110 --> 16:28.990
这是关于这一点

16:29.870 --> 16:30.430
可以使用

16:32.430 --> 16:35.150
属性也可以修视为

16:36.030 --> 16:36.750
止独的

16:37.230 --> 16:37.710
止独的

16:39.630 --> 16:39.950
好了

16:40.910 --> 16:42.910
我们现在了解的属性可以可选

16:42.910 --> 16:43.710
也可以止独

16:43.710 --> 16:45.310
都是放到属性列表里边

16:45.310 --> 16:46.590
都是放到属性列表里边

16:47.870 --> 16:48.830
然后接下来我们再来看

16:50.670 --> 16:52.510
有些属性呢

16:52.510 --> 16:55.390
我们是不希望它在外边

16:55.390 --> 16:56.830
能够读取到的

16:58.510 --> 17:00.030
比方说吧

17:00.030 --> 17:02.030
这里有一个属性

17:02.030 --> 17:02.910
有一个属性

17:03.870 --> 17:05.470
我们这里把上讲

17:06.270 --> 17:06.990
这里我想一想

17:06.990 --> 17:08.830
用什么样的属性来描述呢

17:10.430 --> 17:11.710
这个用户的

17:14.110 --> 17:14.990
我想一想啊

17:15.950 --> 17:18.190
比方说咱们这个系统里边每天

17:18.750 --> 17:20.990
这个用户呢可以发布一些文章

17:20.990 --> 17:22.510
可以发布一些文章

17:22.510 --> 17:24.110
那么发布多少文章呢

17:24.110 --> 17:26.270
这个情况呢是很多遍的

17:26.270 --> 17:26.990
有的时候呢

17:26.990 --> 17:28.830
一天发布两三篇

17:28.830 --> 17:29.550
有的时候呢

17:29.550 --> 17:30.750
一天发布四五篇

17:30.750 --> 17:32.030
这个情况可能根据各种

17:32.990 --> 17:35.310
各种情况来进行算出来的

17:35.310 --> 17:36.430
像这个东西

17:36.430 --> 17:37.630
我们是系统内部

17:37.630 --> 17:38.750
系统内部制造的

17:38.750 --> 17:40.190
不需要让外面制造

17:40.190 --> 17:41.390
假设有这么一个属性

17:46.510 --> 17:47.150
我发布

17:47.150 --> 17:49.630
我最多能够发布了文章数量

17:49.630 --> 17:51.550
最多能够发布了文章数量

17:52.910 --> 17:53.550
Number

17:53.550 --> 17:57.820
都是这个属性

17:57.820 --> 17:59.820
比方说给他们个默认值吧

17:59.820 --> 18:00.700
就举个例子

18:00.700 --> 18:01.340
举个例子

18:01.340 --> 18:03.420
比方说默认值是三篇文章

18:03.420 --> 18:04.940
三篇文章

18:05.020 --> 18:07.180
我每天可以发布三篇文章

18:07.180 --> 18:07.660
然后呢

18:07.660 --> 18:08.780
还有一个属性

18:08.780 --> 18:09.900
是表示的是

18:09.900 --> 18:12.620
当前发布的文章数量

18:12.620 --> 18:13.900
当前

18:13.900 --> 18:14.860
Columbar

18:14.860 --> 18:17.340
表示当前已经发布的文章数量

18:17.340 --> 18:18.300
当然默认值为零

18:18.300 --> 18:20.620
今天还没有发布过任何文章

18:20.620 --> 18:22.060
假设有这么两个属性

18:23.500 --> 18:24.940
那么你想一想啊

18:24.940 --> 18:25.660
你想一想

18:25.660 --> 18:26.620
那么这里打开出示

18:26.620 --> 18:27.500
大家好理解一点

18:28.380 --> 18:28.860
每天

18:30.140 --> 18:34.620
一共可以发布多少篇文章

18:35.900 --> 18:36.940
这个是

18:36.940 --> 18:38.140
当前

18:38.140 --> 18:42.620
当前可以发布的文章数量

18:42.620 --> 18:44.060
文章数量

18:44.060 --> 18:45.740
当然这个例子呢

18:45.740 --> 18:47.740
可能在这个环境下面

18:47.740 --> 18:49.020
不是那么的合适

18:49.020 --> 18:49.820
不是那么合适

18:49.820 --> 18:51.420
但是一定有这样的场景

18:51.420 --> 18:52.860
那么现在就假设

18:52.860 --> 18:55.420
假设这个属性

18:55.420 --> 18:56.700
这个属性

18:56.700 --> 19:00.300
我不希望让外面的人来使用这个属性

19:00.300 --> 19:02.460
你不应该来使用这个属性

19:02.460 --> 19:04.140
也就是说

19:04.140 --> 19:05.260
外边的人呢

19:05.260 --> 19:07.020
他可能用这个属性的时候

19:07.020 --> 19:08.380
可能会导致他乱用

19:08.380 --> 19:09.820
比方说咱们创建一个用户

19:12.220 --> 19:13.500
创建一个用户

19:13.500 --> 19:14.220
溜游这

19:15.100 --> 19:15.660
溜游这

19:16.620 --> 19:17.740
随便写吧

19:17.740 --> 19:18.860
随便写

19:18.860 --> 19:20.060
那么比方说这个用户

19:20.060 --> 19:21.340
他能够获取到这个属性

19:21.900 --> 19:22.940
pub理型Lambar

19:23.660 --> 19:24.940
pub理型Lambar

19:24.940 --> 19:25.660
我给他负责

19:25.660 --> 19:27.100
每天不是只能发布三篇吗

19:27.100 --> 19:27.580
OK

19:27.580 --> 19:28.780
那我给他负责为

19:29.580 --> 19:30.620
一千一万

19:31.340 --> 19:33.020
那么现在我每天发布的文章

19:33.020 --> 19:33.900
是不是就很多了

19:33.980 --> 19:35.740
当然这不是用户可以操作的

19:35.740 --> 19:36.700
我只是说

19:36.700 --> 19:38.940
如果你外面可以访问这个属性的话

19:38.940 --> 19:39.740
就会到

19:39.740 --> 19:41.660
就有可能会造成

19:41.660 --> 19:44.460
有可能会造成一个现象就是

19:44.460 --> 19:48.220
外边的使用者不小心把这个数据给改了

19:48.220 --> 19:50.220
但是这个数据是内部使用的

19:50.220 --> 19:51.660
有可能是内部使用的

19:51.660 --> 19:53.420
比如再比方说这个属性也是

19:54.220 --> 19:55.100
目前呢

19:55.100 --> 19:56.860
只发布的零条文章

19:56.860 --> 19:58.380
一会我会有个函数

19:58.380 --> 19:59.340
会有个方法

19:59.340 --> 20:01.500
每发布一篇文章的给他数字加一

20:01.500 --> 20:02.940
给他数字加一

20:03.020 --> 20:04.540
那么外边的人呢

20:04.540 --> 20:07.180
就有可能会不小心改了这个属性

20:07.740 --> 20:08.940
把它改成了

20:08.940 --> 20:09.660
比方说

20:10.540 --> 20:13.660
改成了-1或者是-100之类的属性

20:13.660 --> 20:15.500
都会可能会犯这样的错误

20:15.500 --> 20:16.940
可能会犯这样的错误

20:16.940 --> 20:17.820
实际上呢

20:17.820 --> 20:19.820
我不太希望外面的人

20:19.820 --> 20:21.660
就是外面的使用这个对象的人

20:21.660 --> 20:23.660
能够访问到这两个属性

20:24.460 --> 20:26.460
那么在介石里边

20:26.460 --> 20:28.060
先不要去考虑TS

20:28.940 --> 20:30.220
介石里面怎么做

20:30.380 --> 20:33.420
我怎么让外边的使用者

20:33.420 --> 20:35.340
不能够访问到这两个属性

20:36.140 --> 20:37.020
介石里面怎么做呢

20:38.380 --> 20:40.700
在介石中只能通过symbol

20:43.710 --> 20:44.910
只能通过symbol

20:46.030 --> 20:46.510
通过这个

20:47.230 --> 20:48.670
符号类型来完成

20:48.670 --> 20:49.710
只能通过它来完成

20:50.350 --> 20:52.430
但是在TS里边没有那么复杂

20:52.430 --> 20:54.670
如果你不太了解symbol的话

20:54.670 --> 20:56.350
可以去看一下相关的文章

20:56.350 --> 20:57.950
这是在介石范畴之内

20:57.950 --> 20:59.230
不在我们这就可以范畴之内

21:00.110 --> 21:01.150
在TS里边呢

21:02.190 --> 21:03.310
不需要使用symbol

21:03.310 --> 21:04.670
这个东西太麻烦了

21:04.670 --> 21:05.390
用起来

21:05.390 --> 21:07.710
因此在TS里边使用了

21:07.710 --> 21:10.270
一种更加舒服的一种方式

21:10.270 --> 21:11.310
更加舒服写下

21:11.310 --> 21:12.670
更加舒服的一种方式

21:12.670 --> 21:15.310
就是添加访问修饰服

21:18.400 --> 21:20.560
使用访问修饰服

21:21.680 --> 21:23.680
访问修饰服就是指的是

21:23.680 --> 21:24.720
某一个成员

21:32.460 --> 21:33.900
访问修饰服

21:34.460 --> 21:36.940
访问修饰服可以控制

21:37.660 --> 21:40.220
内中的某个成员

21:40.860 --> 21:41.820
什么叫成员

21:41.820 --> 21:42.700
方法

21:42.700 --> 21:43.580
属性

21:43.580 --> 21:44.540
这些都是成员

21:45.180 --> 21:47.500
控制内中的某个成员

21:49.600 --> 21:51.600
的访问权限

21:51.600 --> 21:52.640
访问权限

21:53.280 --> 21:55.280
访问修饰服一共有三种

21:56.240 --> 21:57.680
第一种是public

21:58.800 --> 21:59.600
这是默认的

22:00.320 --> 22:01.760
默认的访问修饰服

22:02.800 --> 22:03.760
修饰服

22:03.760 --> 22:05.440
它表示公开的

22:05.440 --> 22:06.640
公开的权限

22:07.360 --> 22:09.760
所有的代码

22:09.760 --> 22:11.360
均可访问

22:11.360 --> 22:12.560
均可访问

22:13.600 --> 22:15.760
就是无论你是在内的外边

22:15.760 --> 22:17.360
还是内的里边

22:17.360 --> 22:18.800
都可以访问这个署项

22:19.440 --> 22:20.240
因此呢

22:21.520 --> 22:22.880
咱们这个内里边

22:22.880 --> 22:25.520
目前所有的署项

22:26.080 --> 22:27.280
它默认的情况

22:27.280 --> 22:28.480
没有加访问修饰服

22:28.480 --> 22:30.320
它默认都为public

22:30.320 --> 22:31.440
就相当于是

22:31.440 --> 22:33.040
每个署信前面加了一个public

22:33.600 --> 22:35.120
相当于是每个署信

22:35.680 --> 22:37.840
每个署信前面加了一个public

22:38.240 --> 22:39.440
就相当于是这种场景

22:40.240 --> 22:42.400
真是因为每一个署信都是public

22:42.400 --> 22:43.120
所以说

22:43.120 --> 22:45.520
我们除了这个内的范围之外呢

22:45.520 --> 22:47.120
我们仍然可以使用

22:47.120 --> 22:47.840
仍然可以使用

22:47.840 --> 22:48.960
每一个署信都可以使用

22:48.960 --> 22:50.080
因为它们是公共的

22:50.080 --> 22:50.640
公开的

22:52.080 --> 22:53.680
这是这个署问修饰服

22:53.680 --> 22:55.440
好另外一个署问修饰服

22:55.440 --> 22:56.240
叫private

22:56.880 --> 22:57.760
private

22:57.760 --> 22:59.760
这个叫做私有的

23:00.320 --> 23:00.880
私有的

23:01.520 --> 23:03.040
只有在内中

23:03.840 --> 23:06.240
只有在内中可以访问

23:07.040 --> 23:07.840
这样的成员

23:07.840 --> 23:09.600
不管你修饰的是方法

23:09.600 --> 23:12.320
还是修饰的是署信

23:12.320 --> 23:12.880
都一样的

23:13.520 --> 23:15.200
修饰为private的话

23:15.200 --> 23:16.800
表示这个成员呢

23:16.800 --> 23:19.280
只能在这个内里边使用

23:19.280 --> 23:20.800
除了这个内的范围

23:20.800 --> 23:21.440
你就用不了了

23:22.000 --> 23:22.720
那么比方说

23:23.840 --> 23:24.720
比方说

23:24.720 --> 23:25.360
我们这里呢

23:26.000 --> 23:28.080
给这两个署信加上private

23:28.800 --> 23:29.600
加上private

23:31.120 --> 23:32.080
把变成私有的

23:32.720 --> 23:34.240
变成私有的过后了

23:34.240 --> 23:35.280
你会看到一个现象

23:35.280 --> 23:36.480
它马上变成灰色了

23:36.880 --> 23:37.440
为什么

23:37.440 --> 23:38.960
它说提示

23:38.960 --> 23:40.800
其实是一个小警告

23:40.800 --> 23:42.080
它告诉你这个署信

23:42.080 --> 23:43.760
你写的这个署信好像没用过

23:44.080 --> 23:45.360
好像没有用过这个署信

23:46.000 --> 23:47.520
那为什么刚才不提示呢

23:48.320 --> 23:49.280
刚才不提示呢

23:50.080 --> 23:51.440
刚才为什么不提示

23:51.440 --> 23:52.880
因为它是公共的

23:52.880 --> 23:53.840
它这里没用

23:53.840 --> 23:54.880
可能外边再用

23:55.760 --> 23:56.800
可能外边再使用

23:56.800 --> 23:58.320
它不太清楚外面有没有用

23:58.320 --> 24:00.160
它没有那么的智能

24:00.320 --> 24:02.320
它不太清楚外面有没有使用这个署信

24:02.320 --> 24:04.080
但是你把它设为private的话

24:04.080 --> 24:04.720
它会检查

24:05.120 --> 24:06.640
这个内的代码就这么多

24:06.640 --> 24:09.200
那么这里面确实没有用到这个署信

24:09.200 --> 24:10.400
所以它变成灰色了

24:11.200 --> 24:13.200
你看这个变成private过后了

24:13.200 --> 24:14.160
表示的是

24:14.160 --> 24:16.320
它这个东西只能在内里边使用

24:16.320 --> 24:17.280
那我们来使用一次

24:17.280 --> 24:18.640
我写一个函数

24:19.600 --> 24:20.080
public

24:20.720 --> 24:21.360
表示

24:21.360 --> 24:22.880
public不是public

24:23.840 --> 24:24.320
搞清楚

24:24.320 --> 24:26.800
刚才我们写的那个访文修师傅是public

24:27.440 --> 24:28.960
表示的是公开的

24:29.600 --> 24:31.760
public表示的是发布

24:31.760 --> 24:32.800
发布

24:32.800 --> 24:33.840
发布一篇文章

24:33.840 --> 24:35.040
你给我一个文章标题

24:35.600 --> 24:36.960
给我一个文章标题

24:36.960 --> 24:38.640
那么我就发布一篇文章

24:38.640 --> 24:39.600
怎么发布呢

24:39.600 --> 24:41.120
我首先看一下

24:41.120 --> 24:42.720
当前res

24:42.720 --> 24:43.360
her number

24:43.920 --> 24:47.280
当前的文章数量是不是小于

24:48.240 --> 24:50.240
小于res.public

24:50.240 --> 24:50.560
number

24:51.280 --> 24:52.160
是不是小于它

24:52.880 --> 24:54.160
如果小于它的话

24:54.160 --> 24:56.240
那么我们就发布一篇文章

24:56.240 --> 24:57.040
concel

24:58.240 --> 24:58.720
发布

24:59.280 --> 24:59.760
一篇

25:01.200 --> 25:01.680
文章

25:02.880 --> 25:03.680
文章

25:03.680 --> 25:04.320
然后给它表

25:04.320 --> 25:05.760
给它拼接一下吧

25:05.760 --> 25:06.400
title

25:06.400 --> 25:07.920
把文章标题拼接进去

25:08.960 --> 25:09.280
好

25:09.280 --> 25:10.400
else

25:10.400 --> 25:10.960
如果

25:11.760 --> 25:12.800
我这里的数字

25:13.760 --> 25:14.960
大于等于要它

25:14.960 --> 25:15.920
当然不可能大于对吧

25:15.920 --> 25:17.120
我们限制了的

25:17.120 --> 25:18.720
如果大于等于到它

25:18.720 --> 25:20.080
那么这种情况下呢

25:20.080 --> 25:21.600
是不能发布文章的

25:21.600 --> 25:23.040
不能发布文章的

25:23.040 --> 25:24.240
我们log

25:25.760 --> 25:26.800
你今日

25:27.760 --> 25:30.800
发布的文章数量

25:30.800 --> 25:31.680
已

25:31.680 --> 25:32.880
达到上限

25:34.640 --> 25:35.440
达到上限

25:36.720 --> 25:37.200
好

25:37.200 --> 25:38.960
第一种好像还少写的

25:38.960 --> 25:40.320
一句代码

25:40.320 --> 25:40.800
什么代码

25:40.800 --> 25:41.840
就是当前的

25:41.840 --> 25:42.800
这个concel number

25:42.800 --> 25:43.200
加加

25:44.080 --> 25:44.960
我在这个内底

25:44.960 --> 25:46.160
不要自己来维护

25:46.160 --> 25:47.040
这两个属性

25:47.040 --> 25:47.760
外边的人

25:47.760 --> 25:48.800
是不能随便使用的

25:49.520 --> 25:49.600
好

25:49.600 --> 25:50.720
咱们来看一下

25:50.720 --> 25:51.920
首先我们要正常用一下

25:52.480 --> 25:53.600
正常用一下

25:53.600 --> 25:55.120
然后u.public

25:57.600 --> 25:58.400
文章1

25:59.440 --> 25:59.600
好

25:59.600 --> 26:00.640
咱们来复制一下

26:03.840 --> 26:05.040
文章2

26:05.040 --> 26:06.000
3

26:06.000 --> 26:06.800
4

26:06.800 --> 26:07.600
5

26:07.600 --> 26:08.240
6

26:08.240 --> 26:08.800
ok

26:10.800 --> 26:11.760
这里运行出来

26:11.760 --> 26:12.400
说

26:15.620 --> 26:15.940
好

26:15.940 --> 26:16.820
看一下啊

26:16.820 --> 26:17.380
你会发现

26:17.380 --> 26:18.500
他只能发布给他三篇

26:18.500 --> 26:19.940
后来就不能发布了

26:19.940 --> 26:21.780
那如果外面不小心

26:21.780 --> 26:22.260
也不知道

26:22.260 --> 26:23.940
他当时脑袋怎么想的

26:23.940 --> 26:25.140
都是开发者

26:25.140 --> 26:26.260
可能是你写了这个内

26:26.260 --> 26:27.620
别人在用这个内

26:27.620 --> 26:28.340
用的时候

26:28.420 --> 26:29.540
他可能不知道怎么想的

26:29.540 --> 26:30.900
那我还想多发布一点

26:30.900 --> 26:32.100
我还想多发布一点

26:32.100 --> 26:32.980
多发布一点的话

26:32.980 --> 26:34.340
应该走一些正常的渠道

26:34.340 --> 26:35.620
比方说申请

26:35.620 --> 26:36.820
或者是成为vipe

26:36.820 --> 26:37.940
R之类的正常渠道

26:37.940 --> 26:38.580
那他到时候

26:38.580 --> 26:39.780
脑袋可能袖斗了

26:39.780 --> 26:41.140
他想的是

26:41.140 --> 26:42.100
多发布点还不简单吗

26:42.100 --> 26:42.980
我重新修改一下

26:42.980 --> 26:43.780
那个属性

26:43.780 --> 26:45.460
就是可怕

26:45.460 --> 26:46.980
怎么写不出来呢

26:46.980 --> 26:47.700
对吧

26:47.700 --> 26:48.980
写不出来

26:48.980 --> 26:50.260
为什么写不出来呢

26:50.260 --> 26:52.820
因为他是一个私有的属性

26:52.820 --> 26:54.660
只能在内底不要访问

26:54.660 --> 26:55.860
然后这个时候他就想

26:55.860 --> 26:56.900
为什么写不出来

26:56.900 --> 26:57.860
他就会找你对吧

26:58.020 --> 26:58.660
会找你

26:58.660 --> 26:59.460
因为沟通

26:59.460 --> 27:01.140
哦原来我知道了

27:01.140 --> 27:02.980
用户只能发布三篇

27:02.980 --> 27:04.020
那么要发布更多的

27:04.020 --> 27:05.620
需要把它做成成为vipe

27:06.260 --> 27:08.020
是不是这个错误就避免了

27:08.020 --> 27:10.020
这个错误就把它避免掉了

27:10.020 --> 27:12.580
本来如果你没有这个约束的话

27:12.580 --> 27:14.500
他不给你看那么清楚的文档吗

27:14.500 --> 27:15.700
有可能文档都没有

27:15.700 --> 27:16.260
对吧

27:16.260 --> 27:17.220
真实的开发中

27:17.220 --> 27:18.580
咱们开发时间那么紧

27:18.580 --> 27:19.940
可能文档都没有

27:19.940 --> 27:21.380
那么他就可能直接修改了

27:21.380 --> 27:22.020
修改了过后

27:22.020 --> 27:23.060
然后没问题

27:23.060 --> 27:23.540
挺好的

27:23.540 --> 27:24.420
不错

27:24.420 --> 27:25.460
然后用者用者

27:25.460 --> 27:26.660
到处都是问题

27:26.740 --> 27:27.860
那么这些问题的暴露

27:27.860 --> 27:29.780
到了运行的过程中

27:29.780 --> 27:30.980
那就太恐怖了

27:30.980 --> 27:32.020
因为运行的过程中

27:32.020 --> 27:33.220
你可能都还没有发现

27:33.220 --> 27:34.420
那就更加恐怖了

27:34.420 --> 27:35.700
直接上线了

27:35.700 --> 27:36.340
对不对

27:36.340 --> 27:38.180
所以说像有了这个

27:38.180 --> 27:39.860
访问修饰府过后了

27:39.860 --> 27:40.900
我们就可以避免

27:40.900 --> 27:43.780
像很多很多类似于这样的错误

27:43.780 --> 27:44.660
不该你知道的

27:44.660 --> 27:45.620
你不用知道

27:45.620 --> 27:46.900
不用知道

27:46.900 --> 27:47.380
其实呢

27:48.580 --> 27:50.820
你把有些东西私有化

27:50.820 --> 27:54.900
尽量少的暴露出来一些成员

27:54.980 --> 27:57.940
这是我们开发的一个原则

27:57.940 --> 28:00.820
就是你开发一个函数也好

28:00.820 --> 28:03.780
开发一个内也好

28:03.780 --> 28:06.180
你都应该尽量少的

28:06.180 --> 28:08.180
暴露出你的资源

28:08.180 --> 28:09.220
你的成员

28:09.220 --> 28:10.660
你暴露出来的东西

28:10.660 --> 28:12.900
是只需要别人了解的东西

28:12.900 --> 28:15.700
为他举个现实生活中的例子吧

28:15.700 --> 28:16.900
就比方说

28:16.900 --> 28:18.980
咱们都用过微波炉对吧

28:18.980 --> 28:20.180
微波炉上

28:20.180 --> 28:22.500
微波炉的操作复不复杂

28:22.500 --> 28:23.780
只有两个

28:23.780 --> 28:24.740
悬柳吧

28:24.740 --> 28:26.900
我见到大部分微波炉都是这样子

28:26.900 --> 28:29.620
当我见到过有一些暗柳不少的

28:29.620 --> 28:30.980
我就一般来说的话

28:30.980 --> 28:32.260
就是两个悬柳对吧

28:32.260 --> 28:34.020
一个是调火力

28:34.020 --> 28:36.260
中火小火高火

28:36.260 --> 28:38.740
一个呢是调时间

28:38.740 --> 28:40.420
我们打多少时间对吧

28:40.420 --> 28:42.180
微波炉一般就两个悬柳

28:42.180 --> 28:44.420
顶多再加一个开始

28:44.420 --> 28:46.660
一个电源就没了对不对

28:46.660 --> 28:48.100
操作简不简单

28:48.100 --> 28:50.420
简单为什么简单

28:50.420 --> 28:52.180
是因为他给你暴露出来的

28:52.180 --> 28:53.220
能够操作的东西

28:53.220 --> 28:54.340
就那么一点点

28:54.340 --> 28:56.580
所以我拥起来非常的舒服

28:56.580 --> 28:58.020
但是现在我再问你

28:58.020 --> 28:59.540
微波炉的原理

28:59.540 --> 29:02.420
他的电路原理复不复杂

29:02.420 --> 29:04.260
至少我个人觉得挺复杂的

29:04.260 --> 29:05.460
我反正是不懂

29:05.460 --> 29:07.220
不知道大家懂不懂

29:07.220 --> 29:09.860
那如果他给你暴露出来的东西

29:09.860 --> 29:11.460
他把他内部的实现原理

29:11.460 --> 29:12.460
都给你暴露出来了

29:12.460 --> 29:14.620
你想想这个微波炉还能用吗

29:14.620 --> 29:16.700
一个微波炉上面

29:16.700 --> 29:19.780
密密麻麻有300个暗柳

29:19.780 --> 29:21.140
不同的暗柳组合呢

29:21.180 --> 29:24.220
可以控制里面电路板的不同电流

29:24.220 --> 29:27.300
可以控制里面的二级管三级管等等

29:27.300 --> 29:28.820
我不太懂乱说

29:28.820 --> 29:30.940
就是控制里面的内部实现原理

29:30.940 --> 29:32.660
那这个微波炉能用吗

29:32.660 --> 29:34.140
后面还有一个暗柳

29:34.140 --> 29:37.140
最后一个暗柳可能写到自暴

29:37.140 --> 29:38.380
那这个当然你可以

29:38.380 --> 29:40.500
上面写的危险不要暗持暗柳

29:40.500 --> 29:42.660
这个暗柳可能会导致自暴

29:42.660 --> 29:44.260
那么是他告诉我

29:44.260 --> 29:45.700
通过注释来告诉我

29:45.700 --> 29:46.700
我不要去用

29:46.700 --> 29:47.380
但是呢

29:47.380 --> 29:48.900
这个微波炉用的怕不怕

29:48.940 --> 29:49.860
所以很害怕

29:49.860 --> 29:51.740
我用的提示蛮害怕的

29:51.740 --> 29:52.420
因此呢

29:52.420 --> 29:55.460
不是说我提供的功能越多越好

29:55.460 --> 29:56.380
而我的功能呢

29:56.380 --> 29:58.340
内部实现我把它做好就行了

29:58.340 --> 30:00.260
内部的东西我自己来用

30:00.260 --> 30:01.420
别人不要去用

30:01.420 --> 30:03.380
有可能会导致更多的问题

30:03.380 --> 30:06.420
尽量少的暴露出来这些东西

30:06.420 --> 30:07.300
暴露出来的东西呢

30:07.300 --> 30:09.940
都是需要外面制造的

30:09.940 --> 30:10.980
不需要外面制造的

30:10.980 --> 30:12.340
把它私有化

30:12.340 --> 30:14.300
当然这些修饰服啊

30:14.300 --> 30:15.460
再说一遍

30:15.460 --> 30:16.940
编印结果里面有没有

30:16.940 --> 30:18.660
咱们看一下吧

30:18.660 --> 30:19.660
np 装

30:19.660 --> 30:20.100
有的

30:22.020 --> 30:25.290
看一下编印结果

30:25.290 --> 30:27.050
编印结果里面有吗

30:27.050 --> 30:28.050
是没了

30:28.050 --> 30:29.170
全都没了

30:29.170 --> 30:30.570
所以说这些限制

30:30.570 --> 30:33.770
这些限制只存在于TS里面

30:33.770 --> 30:35.730
真是因为有了限制过后

30:35.730 --> 30:37.370
才避免了我们以前

30:37.370 --> 30:39.130
像这种GS代码里面

30:39.130 --> 30:41.370
我们可以随便的扶植

30:41.370 --> 30:42.450
你看这里

30:42.450 --> 30:44.290
在GS代码里面随便写

30:44.290 --> 30:45.530
它不会限制里的

30:45.530 --> 30:47.690
但这样子很危险

30:47.730 --> 30:48.650
TS就是在

30:48.650 --> 30:50.770
防止我们写一些错误的代码

30:51.570 --> 30:54.410
这是关于私有的

30:54.410 --> 30:56.090
这两个访问修饰服了

30:56.090 --> 30:57.970
其实还有一个

30:57.970 --> 30:58.970
还有一个

30:59.890 --> 31:01.290
叫protected

31:01.290 --> 31:02.450
这个访问修饰服

31:03.570 --> 31:06.170
暂时不讲

31:06.170 --> 31:07.290
什么时候讲呢

31:07.290 --> 31:08.730
我们把它留到

31:08.730 --> 31:09.690
留到什么时候

31:09.690 --> 31:11.650
留到那个进阶部分

31:11.650 --> 31:12.290
进阶部分

31:12.290 --> 31:14.730
我们会讲一些面上对象思想的东西

31:14.730 --> 31:16.290
让他谈一谈的时候

31:16.290 --> 31:18.410
再讲这个protected

31:19.610 --> 31:20.850
受保护的

31:20.850 --> 31:21.610
这个修饰服

31:21.610 --> 31:22.370
现在暂时不讲

31:22.370 --> 31:22.970
不用管

31:22.970 --> 31:23.690
就当看不见

31:23.690 --> 31:25.170
看不见 换绝

31:25.170 --> 31:26.210
顺便说一下

31:26.210 --> 31:28.370
刚才说到这个symbol

31:28.370 --> 31:29.890
这个是GS里面

31:29.890 --> 31:31.890
它要实现私有的话

31:31.890 --> 31:34.250
它要实现一个是私有成员的话

31:34.250 --> 31:36.370
它可以使用这个东西

31:36.370 --> 31:36.730
symbol

31:36.730 --> 31:39.010
大家可以去了解一下

31:39.010 --> 31:40.730
这是访问修饰服

31:40.730 --> 31:42.130
其实访问修饰服的话

31:42.130 --> 31:45.970
不仅可以给

31:46.090 --> 31:48.610
什么就是属性来进行修饰

31:48.610 --> 31:50.290
还可以给方法

31:50.290 --> 31:52.090
方法也可以修饰为

31:52.090 --> 31:53.450
也可以给它加访问修饰服

31:53.450 --> 31:54.290
比方这个方法

31:54.290 --> 31:55.730
给它加为private

31:55.730 --> 31:56.930
那么这个方法都不能雕用了

31:56.930 --> 31:57.370
看到没

31:57.370 --> 31:58.210
它是私有的

31:58.210 --> 31:59.810
只能自己内部雕用

31:59.810 --> 32:01.090
只能自己内部雕用

32:01.090 --> 32:01.890
比方说

32:01.890 --> 32:03.250
咱们内里边有的时候

32:03.250 --> 32:04.930
去有些工具方法

32:04.930 --> 32:06.290
或者是辅助方法

32:06.290 --> 32:08.530
来帮助我们去实现这个类的功能的

32:08.530 --> 32:09.410
那么这种方法

32:09.410 --> 32:10.930
就可以把它修成private

32:10.930 --> 32:12.130
不要暴露给外面

32:13.090 --> 32:15.490
这是关于访问修饰服

32:16.770 --> 32:17.090
好

32:17.090 --> 32:17.970
接下来再说一个点

32:19.010 --> 32:19.690
就是有的时候

32:19.690 --> 32:21.290
这是这个点的是一个愚法堂

32:22.290 --> 32:22.930
有的时候

32:22.930 --> 32:24.810
咱们写代码了

32:24.810 --> 32:25.850
我会发现

32:25.850 --> 32:27.210
有很多的属性

32:27.210 --> 32:28.450
它都有这么一个特点

32:29.330 --> 32:30.050
你看这个属性

32:30.050 --> 32:30.850
Name这个属性

32:31.730 --> 32:32.970
这个属性有这么一个特点

32:33.610 --> 32:36.570
这个属性通过一个参数传进来

32:36.570 --> 32:38.930
它的属性只是通过一个参数传进来

32:38.930 --> 32:40.370
传进来之后

32:40.610 --> 32:42.930
我没有对这个参数做任何的处理

32:42.930 --> 32:44.210
任何处理都没有做

32:44.210 --> 32:47.010
直接把这个参数负责为这个属性了

32:47.770 --> 32:49.650
你看这是个机械化的劳动

32:50.130 --> 32:51.090
传个参数

32:51.410 --> 32:53.170
参数的责负责给属性

32:53.170 --> 32:54.250
你看是不是机械化的

32:54.250 --> 32:55.730
前面还要声明一个属性

32:56.370 --> 32:57.530
那么这样子

32:57.530 --> 32:59.930
我们就不如用这种写法

32:59.930 --> 33:02.250
TS给我们提供了一个愚法堂

33:02.250 --> 33:03.810
当里遇到这种场景下面的

33:03.810 --> 33:04.650
一定是这种场景

33:04.850 --> 33:05.810
其他场景不行

33:06.530 --> 33:07.250
比方说ID

33:07.250 --> 33:08.090
ID就不是这样子

33:08.090 --> 33:09.290
ID不需要传进来

33:10.610 --> 33:12.490
如果有某一个属性

33:12.810 --> 33:14.890
它是直接传进来的

33:14.890 --> 33:16.330
通过参数传进来的

33:16.330 --> 33:18.410
并且传了过后在勾招函数里面

33:18.410 --> 33:19.490
没有做任何事情

33:19.490 --> 33:20.810
直接对它完成负责

33:21.330 --> 33:23.250
如果有这么样一个属性的话

33:23.250 --> 33:23.770
大家看

33:24.130 --> 33:25.090
可以减写

33:26.210 --> 33:26.690
删了

33:27.170 --> 33:28.290
属性的声明删了

33:29.250 --> 33:31.330
然后这个负责删了

33:32.090 --> 33:34.090
直接把这个name前面加上一个public

33:34.090 --> 33:35.690
加上任何一个访问修饰服

33:35.690 --> 33:37.410
比方red only public

33:37.410 --> 33:38.810
只要你是访问修饰服

33:39.170 --> 33:41.370
只要你加上任何一个访问修饰服

33:41.370 --> 33:42.250
他就明白了

33:42.250 --> 33:43.370
你这个对象

33:43.370 --> 33:44.370
你这个地方

33:44.370 --> 33:45.650
是一个属性

33:45.650 --> 33:46.890
是一个属性

33:46.890 --> 33:49.490
他会按照之前的那种写法给你完成

33:49.490 --> 33:51.210
他首先会声明一个属性

33:51.210 --> 33:52.850
然后把这个属性的值

33:53.570 --> 33:55.930
把这个参数的值负责给对应的属性

33:56.730 --> 33:57.610
这里同样的

33:57.970 --> 33:58.850
加上个public

34:00.850 --> 34:02.210
必须要加上个访问修饰服

34:02.770 --> 34:04.250
你不加访问修饰服的话

34:04.250 --> 34:05.850
他不清楚你这个到底是属性

34:05.850 --> 34:06.970
还是一个普通参数

34:07.450 --> 34:08.690
这是一种简写

34:08.690 --> 34:09.730
简写

34:09.730 --> 34:10.890
一种愚法堂

34:10.890 --> 34:11.690
那么现在呢

34:11.690 --> 34:13.690
这个对象里边还是有name的属性

34:13.690 --> 34:14.770
还是有name

34:14.770 --> 34:16.170
还是有AGE

34:16.170 --> 34:17.810
他会自动帮你完成负责

34:17.810 --> 34:18.930
就这么回事

34:18.930 --> 34:22.380
咱们编译出来看一下

34:22.380 --> 34:23.780
np 装标的

34:25.540 --> 34:26.380
看一下

34:27.380 --> 34:28.780
编译完成

34:28.780 --> 34:29.380
这边看一下

34:30.700 --> 34:32.500
你看name AGE

34:32.500 --> 34:34.100
编译结果还是正常的

34:34.100 --> 34:35.140
还是没有任何问题的

34:36.300 --> 34:37.100
这是这个

34:37.140 --> 34:39.100
这是关于属性简写

34:41.900 --> 34:43.980
属性简写

34:44.420 --> 34:45.260
简写

34:45.260 --> 34:46.460
这些都是跟

34:46.460 --> 34:48.140
介石里面有些差异的地方

34:48.860 --> 34:50.140
属性简写

34:50.140 --> 34:52.740
就是如果某个属性

34:54.660 --> 34:59.100
通过构造函数的参数传递

35:00.060 --> 35:01.620
通过参数传进来

35:01.620 --> 35:02.620
并且

35:02.980 --> 35:04.620
不做任何

35:05.020 --> 35:08.460
不做任何处理的

35:08.900 --> 35:12.140
负责给该属性

35:12.140 --> 35:13.220
就是传进来的参数

35:13.220 --> 35:14.780
直接负责给这个属性

35:14.780 --> 35:17.380
那么这种机械化的脑洞

35:17.380 --> 35:20.220
可以进行简细

35:20.220 --> 35:22.420
简细的方式就是用这种方式

35:23.140 --> 35:23.940
但是要注意

35:23.940 --> 35:25.580
前面必须要加个修饰服务

35:25.580 --> 35:26.940
随便什么修饰服务都可以

35:26.940 --> 35:28.100
如果你找不到修饰服务

35:28.100 --> 35:30.300
不要说他确实又不是可指读的

35:30.300 --> 35:31.460
他不是指读的

35:31.460 --> 35:33.220
又不是private

35:33.220 --> 35:34.700
那么你就要写个public

35:34.700 --> 35:35.500
他就写个public

35:35.500 --> 35:36.820
总之要加上一个修饰服务

35:36.820 --> 35:38.540
他才知道你要做这么一件事

35:39.700 --> 35:42.780
这是关于属性的简讯

35:44.420 --> 35:45.380
接下来

35:46.260 --> 35:48.020
接下来讲的这个点

35:48.020 --> 35:50.060
稍微有一点复杂

35:50.060 --> 35:52.500
大家先把这一块那种消化消化

35:52.500 --> 35:53.660
这块那种并不难

35:53.660 --> 35:54.500
消化消化

35:55.500 --> 35:56.860
咱们稍是休息

35:56.860 --> 35:58.620
接下来下一个小节

35:58.620 --> 36:00.300
咱们来讲下一个知识点

36:00.300 --> 36:01.180
下一个知识点

36:01.180 --> 36:02.580
叫做访问器

36:02.580 --> 36:03.300
访问器

36:03.300 --> 36:06.220
这里稍微有一点绕

36:06.220 --> 36:08.100
其实这里的访问器

36:08.220 --> 36:10.140
你学过伍诱

36:10.140 --> 36:11.260
你学过伍诱

36:11.260 --> 36:13.420
伍诱里面有一个计算属性

36:13.420 --> 36:14.260
对吧

36:14.260 --> 36:15.420
计算属性

36:16.420 --> 36:18.500
学过伍诱的计算属性的话

36:18.500 --> 36:19.860
那么你对这一块

36:19.860 --> 36:22.020
其实理解起来也没有那么困难了

36:22.020 --> 36:23.220
咱们稍稍休息

36:23.220 --> 36:24.620
下一个小节来讲这个东西

