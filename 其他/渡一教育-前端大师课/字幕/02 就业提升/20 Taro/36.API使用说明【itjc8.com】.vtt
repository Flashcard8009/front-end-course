WEBVTT

00:00.180 --> 00:02.900
好 我们这些课继续讲解Tarot的系列课程

00:02.900 --> 00:06.180
那这些课呢给大家讲解一下API的使用的说明

00:06.180 --> 00:07.260
那么从这里开始呢

00:07.260 --> 00:10.060
我们后面将进入到一些API的学习

00:10.060 --> 00:10.900
因为在之前呢

00:10.900 --> 00:12.500
我们组建那个库呢

00:12.500 --> 00:14.260
我们讲解了非常多的内容

00:14.260 --> 00:14.740
并且呢

00:14.740 --> 00:16.860
我们在基础的一些操作上面呢

00:16.860 --> 00:19.900
我们也讲解了它的一些使用规范

00:19.900 --> 00:21.260
那么最终的时候呢

00:21.260 --> 00:22.820
我们无论是做界面也好

00:22.820 --> 00:24.420
还是做一些逻辑判断也好

00:24.420 --> 00:26.540
一定会用到很多的API

00:26.540 --> 00:29.900
那么无论是H5端还是各小程序端

00:29.900 --> 00:31.180
那么API的作用呢

00:31.180 --> 00:33.540
是非常的明显的

00:33.540 --> 00:34.540
或者讲起来

00:34.540 --> 00:37.140
它也是一个非常重要的部分

00:37.140 --> 00:38.220
那么我们现在呢

00:38.220 --> 00:39.260
在讲API之前

00:39.260 --> 00:41.220
先做几个简单的介绍啊

00:41.220 --> 00:41.940
第一个呢

00:41.940 --> 00:43.500
就是所谓Tarot的API呢

00:43.500 --> 00:45.260
它其实包含两部分内容

00:45.260 --> 00:45.780
第一步呢

00:45.780 --> 00:48.580
是Tarot内置的API以及小程序

00:48.580 --> 00:50.900
各端能力的API的分装

00:50.900 --> 00:52.820
它是有两部分组成的

00:52.820 --> 00:54.220
那么我们一般性呢

00:54.220 --> 00:57.660
我们讲其中小程序的能力的API的分装以后呢

00:57.660 --> 01:00.340
其主要是小程序的各的API的规范

01:00.340 --> 01:01.620
当然这个规范呢

01:01.620 --> 01:04.700
还要符合我们现在的Tarot的过程

01:04.700 --> 01:05.860
那么注意

01:05.860 --> 01:08.300
对于一些小程序的API来讲

01:08.300 --> 01:09.140
Tarot中呢

01:09.140 --> 01:12.860
也会有非常多的API的一些格式操作

01:12.860 --> 01:13.380
我们呢

01:13.380 --> 01:15.740
会去结合Tarot的API的使用

01:15.740 --> 01:16.300
然后呢

01:16.300 --> 01:17.300
同时呢

01:17.300 --> 01:20.020
我们去观察小程序API的结构

01:20.020 --> 01:22.140
同时这样的使用方式来做

01:22.140 --> 01:24.180
那么一旦你要用TarotAPI的话呢

01:24.180 --> 01:27.180
你必须用到的是Tarot的命名空间下的

01:27.300 --> 01:28.980
这是我们说到的一点

01:28.980 --> 01:30.300
我们在之后的课程中呢

01:30.300 --> 01:33.020
我们会大家逐一的讲解TarotAPI

01:33.020 --> 01:33.540
同时呢

01:33.540 --> 01:36.220
里面有一些部分和小程序有一些区别

01:36.220 --> 01:38.140
那么我们也会大家去讲解

01:38.140 --> 01:38.620
第二呢

01:38.620 --> 01:40.260
就是为了方便书写的话呢

01:40.260 --> 01:41.340
我们注意一下

01:41.340 --> 01:46.380
Tarot在默认对小程序异步的这样的那个操作的时候

01:46.380 --> 01:51.020
我们可以去使用Promise的这样的一个方式进行调用

01:51.020 --> 01:53.660
你还记得Promise的一些调用方式吗

01:53.660 --> 01:55.220
那Promise的调用结构呢

01:55.220 --> 02:00.060
基本上是属于我们的一个经常书写的这样的一个规范

02:00.060 --> 02:02.020
当然小程序原生的这种写法

02:02.020 --> 02:05.340
本身来讲我们也是符合可以书写到的

02:05.340 --> 02:06.940
那我们可以看一下

02:06.940 --> 02:09.460
所谓的Promise的原生调用规则呢

02:09.460 --> 02:12.780
它其实我们在这边简单的给大家说一下

02:14.500 --> 02:19.490
比如说我们说

02:19.490 --> 02:21.090
requestor

02:21.090 --> 02:22.610
这是属于一个操作

02:22.610 --> 02:26.090
然后代表的是属于数据的一个加载

02:26.090 --> 02:27.410
我们后面写上url

02:27.410 --> 02:28.410
这没有关系

02:28.410 --> 02:29.370
你可以自行定义

02:29.370 --> 02:30.290
我先写个变量

02:30.290 --> 02:32.770
然后你直接可以来Promise的结构

02:32.770 --> 02:36.170
then后面写上你现在的一个function

02:40.330 --> 02:43.770
然后你把整个这function写完以后的话

02:43.770 --> 02:46.210
那么你这时候就可以用then的方式

02:46.210 --> 02:48.890
包括后面是我们用fail这样的结构

02:48.890 --> 02:50.450
就称之为Promise结构

02:51.330 --> 02:54.210
这样去书写我们本身的一个格式的话

02:54.210 --> 02:54.970
都可以

02:54.970 --> 02:55.930
我们说

02:55.930 --> 02:58.370
同时我们开始继续第二个想法

02:58.530 --> 03:01.650
就是我们现在讲到的tarrow的component

03:01.650 --> 03:04.490
component我们之前一直在用

03:04.490 --> 03:08.210
它其实是属于一个叫做抽象积累

03:08.210 --> 03:11.610
我们如果学过面相对象的概念的话

03:11.610 --> 03:13.450
你一定学过继承类里面

03:13.450 --> 03:16.050
会有继承里面有一种叫抽象类

03:16.050 --> 03:19.490
抽象类是本身不能去实现实力化对象的

03:19.490 --> 03:24.690
但是它本身自己应该说需要被其他的一些类继承

03:24.850 --> 03:28.770
并且实现 覆盖它里面的一些空防法

03:28.770 --> 03:30.850
最后实现我们的各客户端

03:30.850 --> 03:34.130
或者说我们的引用方的实力对象

03:34.690 --> 03:37.330
那么我们一般性有两种写法

03:37.330 --> 03:40.050
第一种我们可以写成tarrow.component

03:40.930 --> 03:42.290
我们直接这样去写

03:42.290 --> 03:44.570
但是这样写我们说没什么太大意义

03:44.570 --> 03:47.730
因为我们一般性的这种写法本身来讲

03:47.730 --> 03:50.810
你是没有办法后续地继续扩展引用的

03:51.050 --> 03:52.890
所以我们一般是写成random

03:52.890 --> 03:54.530
也就是我们所谓的类结构

03:54.770 --> 03:56.690
类结构的直接是继承

03:57.890 --> 03:59.090
继承我们的component

03:59.090 --> 04:01.650
然后写一下

04:03.250 --> 04:05.130
然后前面我们做一个导入

04:05.370 --> 04:08.210
基本上都是导入加继承的这样的结构写

04:08.370 --> 04:10.610
这样我们就可以去定一个random来写

04:10.610 --> 04:12.370
而random里面JSX的结构

04:12.370 --> 04:13.970
我们就可以直接往里放置

04:14.690 --> 04:18.410
这个是我们之后写我们的所有的组件的时候

04:18.410 --> 04:20.210
我们或者是API的时候

04:20.210 --> 04:21.770
我们都用这样的方式来

04:22.170 --> 04:25.130
那么在我们的特别社会小程序来讲

04:25.130 --> 04:28.250
tarrow.component的这种结构尽量少写

04:29.450 --> 04:31.690
再有一个就是tarrow中的API

04:31.690 --> 04:33.690
它各端的接口都有

04:34.170 --> 04:35.410
包括是设备端

04:37.950 --> 04:38.710
设备端

04:38.910 --> 04:39.950
然后文件端

04:42.210 --> 04:43.010
界面端

04:45.710 --> 04:47.030
包括是位置端

04:50.290 --> 04:51.490
以及媒体

04:56.480 --> 04:57.960
然后的话网络

05:02.840 --> 05:04.320
还有数据缓存

05:12.760 --> 05:15.760
以及我们说还有一些扩展类

05:18.840 --> 05:22.160
那么这些里面都是我们tarrow的一些

05:23.000 --> 05:24.480
我们的API结构

05:24.840 --> 05:25.720
我们刚才说了

05:25.720 --> 05:28.560
它有一些内容是它字型所有的

05:28.800 --> 05:30.360
有一些是小程序端的

05:30.840 --> 05:32.680
我们准备给大家都讲一遍

05:32.680 --> 05:35.920
因为tarrow本身自己它不单单是做小程序

05:35.920 --> 05:38.920
它还有一些是要适用于各端的操作

05:39.280 --> 05:42.400
所以我们需要去了解它里面的各种的写法

05:43.560 --> 05:45.560
那么这个是一个骑士的

05:45.560 --> 05:46.800
主要是告诉大家

05:47.360 --> 05:49.920
如果说有同学之前是用这样的方式写的

05:50.160 --> 05:52.400
那么你之后还是用我们的继承方式

05:52.400 --> 05:53.720
用randow的结构来写

05:54.040 --> 05:56.720
第二个我们里面有非常多的组件的结构

05:56.720 --> 05:57.760
API的写法

05:58.040 --> 05:59.360
我们会一个个给大家讲

05:59.600 --> 06:03.440
还有就是属于我们的tarrow本身自己的两种机制

06:03.680 --> 06:05.400
两种机制我们其实都可以用

06:05.400 --> 06:08.000
但是更多的我们会用到我们的tarrow端

06:08.440 --> 06:10.640
但是这里面有一点要说明的

06:11.840 --> 06:14.640
小程序的更新非常的快

06:14.880 --> 06:16.880
它的API的更新也非常的快

06:17.200 --> 06:19.200
所以从这个角度来讲的话

06:19.520 --> 06:22.320
我们tarrow一直会进行更新

06:22.640 --> 06:24.640
有些可能万一发生

06:25.120 --> 06:27.120
如果今天我跟讲课的时候可以用

06:27.120 --> 06:29.040
但是明天的话就不能用的话

06:29.440 --> 06:30.640
那么tarrow会更新

06:30.640 --> 06:32.240
也就小程序会更新出

06:32.480 --> 06:34.320
它的一个最新的接口

06:34.640 --> 06:37.520
那么这时候我们也会给大家及时做更新

06:37.920 --> 06:39.360
同时我们讲

06:40.080 --> 06:43.360
tarrow本身自己它会各端的接口一起操作

06:43.520 --> 06:46.640
有时候有可能是小程序没有更新

06:46.640 --> 06:50.560
但是H5或者说是针对于其他的端的小程序更新的话

06:50.800 --> 06:52.640
那么tarrow也会有一些告知

06:53.200 --> 06:55.600
这个是我们大家一定要去关注到的

06:55.600 --> 06:57.040
因为本身来讲

06:57.280 --> 07:01.040
现在的移动端的特别是对于小程序端的开发来讲

07:01.440 --> 07:05.280
它会有非常多的一些快速的迭代

07:05.520 --> 07:08.000
一般性我们每周都能看到有部分的迭代

07:08.320 --> 07:09.840
也许你这周上到官网

07:09.840 --> 07:10.880
无论是哪个小程序

07:11.360 --> 07:14.240
官网看的时候下周去看它会有的界面

07:14.240 --> 07:17.520
就会有更多的一些功能和说明出来

07:18.160 --> 07:20.000
这个是我们要说到的

07:20.400 --> 07:24.400
所以大家一旦发现如果发现有一个API调整起来

07:24.400 --> 07:26.480
好像和我们的视频有点不太一样的话

07:26.720 --> 07:30.400
你赶紧看一下我们的官网的这样的解释

07:30.400 --> 07:32.720
它是不是就在这两天内更新了

07:32.720 --> 07:33.680
是这个意图

07:34.080 --> 07:34.480
好了

07:34.640 --> 07:38.000
那么这是我们API的使用说明的一些简单说法

07:38.000 --> 07:39.840
然后我们后面正式开始

