WEBVTT

00:00.050 --> 00:02.610
好 我们继续讲解胎肉蟹的课程

00:02.610 --> 00:04.890
蟹的课程来给大家讲解一下事件处理

00:05.410 --> 00:10.890
在所有的一些和事件驱动的关系的这样的程序中

00:10.890 --> 00:13.010
我们都会涉及到事件处理的概念

00:13.490 --> 00:16.770
但是我们的不同的余法里面和框架里面

00:16.770 --> 00:19.050
对事件处理又有不一样的基点

00:19.050 --> 00:22.010
所以我们今天把它相同点不同点

00:22.010 --> 00:24.690
和在胎肉中的应用给大家完整的去说一下

00:25.210 --> 00:29.770
首先我们讲一下胎肉中的事件处理和动中很相似

00:30.210 --> 00:32.050
动元素的事件处理对大家来讲

00:32.490 --> 00:34.930
应该讲也是比较常用的

00:34.930 --> 00:35.770
你还记得吗

00:35.770 --> 00:40.290
原来在我们的动元素中

00:40.290 --> 00:42.370
你看到了一个按钮

00:42.370 --> 00:45.130
或者你看到了一个任何的一个元素

00:45.570 --> 00:47.690
你说单击事件是不是这样写的

00:50.940 --> 00:51.220
对吧

00:51.220 --> 00:53.100
unclick 后面等于什么

00:53.700 --> 00:55.420
那么这边可以写一个函数

00:55.420 --> 00:55.940
对吧

00:55.940 --> 00:57.300
我们可以写一个function

00:58.140 --> 00:59.300
也可以去写一个什么

00:59.740 --> 01:01.380
直接写gsug

01:02.580 --> 01:03.300
也可以 对吧

01:03.700 --> 01:05.860
然后的话甚至你这边

01:05.860 --> 01:09.220
可以去完成gsu里面的某一些逻辑处理

01:09.700 --> 01:12.020
三元运算这些都可以在里面走

01:12.460 --> 01:15.180
那么这种结构我们是和动有关的

01:15.180 --> 01:18.140
其实我们的胎肉它也是使用这样的形式

01:18.580 --> 01:21.540
但是它的写法上是有一点不同的

01:21.540 --> 01:22.540
我们刚才说到了

01:22.660 --> 01:23.860
第一 看这边

01:25.830 --> 01:28.070
胎肉事件绑定属性的命名

01:28.070 --> 01:29.470
采用陀峰式命名

01:29.470 --> 01:32.070
也就是说这边的命名

01:32.070 --> 01:34.030
比如说改变

01:34.430 --> 01:36.270
改变值 我叫做

01:38.860 --> 01:41.180
changer value

01:42.300 --> 01:43.220
这样的概念

01:43.820 --> 01:44.980
而不是小写

01:44.980 --> 01:48.180
那么我们之前在很多的有些语法中

01:48.180 --> 01:50.100
我们是采用小写格式

01:50.540 --> 01:52.740
如果采用jsX的语法

01:52.740 --> 01:56.180
那就是说我们使用的是像我们现在的这种格式的话

01:56.420 --> 01:57.300
那么注意

01:57.300 --> 02:01.060
它在传入一个函数作为事件处理函数

02:01.060 --> 02:03.660
就是这边的话它不是个字符串

02:04.140 --> 02:05.220
我们平时写的时候

02:05.220 --> 02:07.220
我们经常是比如说像我changer value

02:07.220 --> 02:08.060
我们是这样

02:08.380 --> 02:09.300
打引号

02:09.540 --> 02:10.420
changer value

02:10.420 --> 02:11.740
你可以打个括号

02:12.460 --> 02:14.660
那么事件处理函数

02:14.660 --> 02:17.540
它其实就是你需要一个大括号

02:18.020 --> 02:20.020
然后把你这个写进去

02:21.140 --> 02:22.500
以这种模式来写

02:23.100 --> 02:25.140
因为我们之前做过一些小案例

02:25.140 --> 02:27.660
大家也应该看到过有这样的一个形式

02:27.660 --> 02:29.180
在前面几个视频中

02:29.980 --> 02:31.380
注意下它说明了

02:31.380 --> 02:33.180
就是字符串是动的写法

02:33.180 --> 02:35.940
而不是我们现在的事件处理函数的写法

02:36.460 --> 02:36.740
好

02:36.740 --> 02:38.140
待会我们一起来看一下

02:38.300 --> 02:38.580
第二

02:38.580 --> 02:41.420
在tile中另一个不同的

02:41.420 --> 02:44.100
是你不能使用catch event

02:44.460 --> 02:47.180
catch event的那个方法阻止冒泡

02:47.700 --> 02:49.500
事件冒泡的概念对大家来讲

02:49.500 --> 02:51.300
应该也不是一个陌生的

02:51.580 --> 02:53.980
就比如说我们的外层

02:54.500 --> 02:56.060
我们的DIV做实力

03:00.980 --> 03:01.940
我们的外层

03:01.940 --> 03:03.580
它这边有一个unclick

03:06.730 --> 03:07.530
在它内层

03:07.530 --> 03:09.250
我们也有一个unclick

03:18.080 --> 03:18.560
好

03:18.800 --> 03:20.080
那么这两个的话

03:20.080 --> 03:22.720
我们在内部对它进行点击以后的话

03:22.720 --> 03:25.760
其实它也属于外层的这个事件范围

03:25.760 --> 03:27.560
所以外层也会被触发

03:27.760 --> 03:29.960
所以内层外层的这种触发

03:29.960 --> 03:31.640
我们称之为叫事件冒泡

03:32.040 --> 03:34.720
这种事件冒泡在不同的语法上面

03:34.720 --> 03:35.840
都有不同的处理

03:35.840 --> 03:38.080
但是绝大部分大家都采用的是

03:38.080 --> 03:39.400
叫做catch event

03:41.080 --> 03:42.480
原生小程序里面的话

03:42.720 --> 03:44.480
我们一般写的是bound的

03:45.040 --> 03:45.560
对吧

03:45.680 --> 03:47.120
比如说bound tab

03:47.360 --> 03:48.600
它表示属于什么

03:48.800 --> 03:53.200
单击了某一个事件园

03:53.800 --> 03:57.000
但是它是有一个向上事件传递的概念的

03:57.320 --> 03:58.960
我们阻止它的方式是

04:00.800 --> 04:03.360
catch tab

04:04.160 --> 04:05.720
我们使用catch来完成

04:05.920 --> 04:07.960
这是属于绝大部分语法中

04:07.960 --> 04:10.320
都会使用这样的一个词来表述

04:10.320 --> 04:12.960
你现在的整个传送

04:13.120 --> 04:14.440
或者说阻止冒泡

04:14.840 --> 04:18.120
但是对于我们的整个的tar来讲

04:18.480 --> 04:19.640
它不能这么做

04:20.120 --> 04:21.120
或者这么讲

04:21.680 --> 04:23.480
它没有这样的一个机制

04:24.000 --> 04:25.240
它要使用什么呢

04:25.440 --> 04:29.720
它要使用事件的stop propagation

04:30.240 --> 04:33.280
它要通过事件的stop propagation来完成

04:33.760 --> 04:35.800
那么这个我们在

04:36.200 --> 04:37.840
待会给它演示的过程中

04:37.840 --> 04:38.720
你就能看到

04:40.040 --> 04:40.760
请接着

04:41.080 --> 04:41.960
我们再说一下

04:42.120 --> 04:43.880
那么整个这事件的处理

04:44.200 --> 04:46.880
基本上我们还有非常多的一种方式

04:46.880 --> 04:49.160
你看事件的方式里面

04:49.160 --> 04:51.200
包括的是它的传参概念

04:51.520 --> 04:52.840
传参里面有好几种

04:52.840 --> 04:55.280
第一我们说绑的传参

04:55.280 --> 04:56.640
绑的传参

04:57.880 --> 05:00.200
我们说我们之前用属性的方式的话

05:00.200 --> 05:01.560
可以用属性传参

05:01.920 --> 05:03.160
但是事件的话

05:03.280 --> 05:05.200
我们可以用绑的传参

05:05.840 --> 05:07.560
第二我们可以向事件中

05:08.400 --> 05:10.040
用函数的方式

05:10.600 --> 05:11.560
传递参数

05:12.080 --> 05:13.560
第三我们匿名

05:13.640 --> 05:15.960
直接完成一个匿名的

05:15.960 --> 05:17.200
一个函数操作

05:17.400 --> 05:20.280
这个其实和我们之前所讲到的

05:20.520 --> 05:22.800
直接在我们的onclick里面

05:22.800 --> 05:24.000
就是我们前面说的

05:25.640 --> 05:28.120
在这onclick里面直接去写语法

05:29.280 --> 05:30.320
法是一样的

05:30.880 --> 05:31.640
再往下

05:32.160 --> 05:34.000
函数式组件

05:34.120 --> 05:37.600
函数式组件是在我们的整个tarrow格式中

05:37.600 --> 05:39.040
它是一个比较重要的点

05:39.240 --> 05:41.160
那么在这边我先开个头

05:41.360 --> 05:41.840
给大家

05:41.840 --> 05:43.160
因为在事件传参里面

05:43.160 --> 05:45.080
也会设计到函数式组件的概念

05:45.320 --> 05:48.480
那么我们后面会专用一节课的内容

05:48.520 --> 05:50.040
来介绍一下函数式组件

05:50.480 --> 05:52.000
然后下面有规范要求

05:52.000 --> 05:54.440
任何组件的事件传递

05:54.800 --> 05:55.600
这个改一下

05:59.620 --> 06:00.620
应该是事件

06:05.340 --> 06:07.180
事件都是要以onclick头的

06:07.820 --> 06:08.580
我们看到了

06:08.820 --> 06:09.780
所谓的onclick头

06:09.780 --> 06:10.740
就是我们刚才说的

06:10.740 --> 06:12.420
它和动很相似

06:13.260 --> 06:15.020
我们现在我们来开始

06:15.180 --> 06:17.060
演示一下这里面的一些功能

06:23.340 --> 06:24.500
首先我们看一下

06:24.500 --> 06:26.140
我们现在的整体结构

06:29.100 --> 06:30.860
我们在整个项目中的话

06:30.980 --> 06:32.660
src打开我们看到

06:32.660 --> 06:34.060
我们有一个component

06:34.060 --> 06:34.700
修谈

06:34.980 --> 06:38.020
就是一个非常简单的时间的显示

06:38.980 --> 06:40.940
然后我们再往下看

06:40.940 --> 06:42.580
我们现在看到的是

06:42.980 --> 06:44.420
我们打开paders

06:44.740 --> 06:45.660
打开paders

06:45.900 --> 06:47.500
这里边的话就一个页面

06:47.500 --> 06:49.220
就是显示时间的一个页面

06:50.460 --> 06:51.740
这里面没有其他东西

06:51.980 --> 06:53.980
然后我们打开我们的

06:54.540 --> 06:55.380
微信控制台

06:55.380 --> 06:56.340
我们看到的是

06:56.340 --> 06:57.700
就是一个时间在动

06:57.900 --> 06:58.420
对吧

06:58.580 --> 06:59.580
然后这边的话

06:59.900 --> 07:01.460
它会显示一些文本出来

07:01.620 --> 07:02.140
OK

07:02.140 --> 07:03.420
这是一个基本格式

07:03.580 --> 07:05.060
接下来我们来看一下

07:05.060 --> 07:07.700
我们的事件的完整的情况

07:08.100 --> 07:09.020
首先第一点

07:09.020 --> 07:11.460
我们大家通过这里面能够看到一个

07:12.260 --> 07:14.980
我们在调用我们的组件以后

07:14.980 --> 07:16.020
我们看组件里面

07:16.420 --> 07:17.260
打开组件

07:18.260 --> 07:18.940
组件里面

07:18.940 --> 07:21.140
它其实就是完成了第一个操作

07:21.140 --> 07:22.420
也就是我们所谓的

07:22.740 --> 07:24.340
利用我们的onclick

07:24.500 --> 07:28.300
来完成一个事件的处理函数的操作

07:28.540 --> 07:30.580
这里边就是我们打上了一个

07:30.580 --> 07:32.140
我们的大括号

07:32.140 --> 07:33.220
打上一个大括号

07:33.340 --> 07:35.420
然后大括后面跟上你现在

07:35.500 --> 07:37.660
已经定义的一个事件名称

07:38.340 --> 07:39.580
定义的一个事件名称

07:39.580 --> 07:41.020
这个事件名称其实

07:41.140 --> 07:42.300
就是我们这边的

07:42.540 --> 07:43.700
这个牵制

07:43.940 --> 07:44.940
这是我们的牵制

07:45.740 --> 07:47.860
这里边是你所需要执行的内容

07:49.180 --> 07:50.100
紧接着来看

07:50.540 --> 07:53.780
那么我们这边完成牵制以后的话

07:53.940 --> 07:54.940
那么注意了

07:55.220 --> 07:56.220
这个Zis

07:56.580 --> 07:58.020
在一般情况下

07:58.020 --> 08:00.780
它会去指向到当前的对象

08:01.100 --> 08:03.940
但是我们如果为了给它做一个

08:03.940 --> 08:05.340
非常强制性的

08:05.340 --> 08:09.380
或者说也是属于比较指定性的操作

08:09.380 --> 08:12.220
我们就需要直接到顶部

08:12.220 --> 08:14.620
完成Zis的一个指向

08:15.260 --> 08:17.300
那么Zis指向的方式是这样子

08:17.300 --> 08:20.900
就是我们需要在它的constructor

08:20.900 --> 08:23.260
构造函数里面去完成

08:23.500 --> 08:25.540
当前的changer

08:26.860 --> 08:27.700
等于

08:28.700 --> 08:30.940
当前的changer等于

08:31.300 --> 08:33.060
我们的当前的

08:33.740 --> 08:35.460
changer的棒的

08:36.180 --> 08:36.980
绑定

08:37.380 --> 08:38.740
然后指向于Zis

08:39.420 --> 08:40.740
要写这一句话

08:41.100 --> 08:42.820
那么这句话的目的就是

08:42.940 --> 08:44.820
让我们当前的Zis

08:45.060 --> 08:47.660
可以指向当前的对象

08:47.660 --> 08:48.740
当前的clock

08:50.020 --> 08:53.100
因为我们知道Zis它会随着环境的改变

08:53.100 --> 08:54.820
而会指向不同的内容

08:55.020 --> 08:57.540
那我就把Zis直接固定下来说

08:57.700 --> 09:00.100
我们如果说数

09:00.100 --> 09:01.300
那个传参

09:01.420 --> 09:02.980
我们所传送的Zis

09:02.980 --> 09:04.020
待会我们来看

09:04.020 --> 09:06.020
待会我们传参所传送的Zis

09:06.020 --> 09:07.820
和你现在所指向的

09:07.820 --> 09:11.300
都直接指向到当前的这个changer

09:11.820 --> 09:12.980
需要有这一步操作

09:14.620 --> 09:15.740
那么待会传参的时候

09:15.740 --> 09:17.420
我们也用bump的Zis的方式

09:17.420 --> 09:20.860
就依然会传给我们当前的changer了

09:20.860 --> 09:21.420
好了

09:21.660 --> 09:22.940
那么这个过程

09:22.940 --> 09:24.180
我们现在看到了

09:24.180 --> 09:25.180
我们已经写过了

09:25.580 --> 09:27.340
然后我们可以看一下

09:27.660 --> 09:31.180
如果说你现在这里边用了一个引号

09:32.700 --> 09:34.460
那么它就变成一个字服串

09:35.220 --> 09:37.060
它是整个完整字服串

09:37.540 --> 09:39.940
如果说你现在在内部用

09:40.220 --> 09:43.660
虽然它外面也是一个我们的JS表达式

09:43.660 --> 09:46.300
但是内部它依然形成一个字服串格式

09:46.580 --> 09:48.540
所以还是继续一句话

09:48.700 --> 09:51.940
就是当你在使用我们JS表达式的时候

09:51.940 --> 09:56.060
千万前内外内都不要去使用引号

09:56.460 --> 09:57.700
这是我们说到的一点

09:58.340 --> 09:59.100
第二个的话

09:59.100 --> 10:00.700
这是我们说的第一点

10:00.700 --> 10:02.260
就是事件处理函数

10:02.260 --> 10:03.500
我们我打开ppg

10:05.470 --> 10:06.710
说到这一点不同

10:07.990 --> 10:10.190
它一定要使用的是我们的

10:10.190 --> 10:10.710
就是这一点

10:10.710 --> 10:11.310
如果采用

10:11.310 --> 10:12.990
你需要使用一个事件处理函数

10:12.990 --> 10:14.030
而不是动语法

10:14.030 --> 10:15.670
动语法我们讲的简单一点

10:15.670 --> 10:16.430
就是怎么说

10:17.230 --> 10:17.830
OK

10:17.830 --> 10:19.110
紧接着我们来说

10:19.110 --> 10:19.790
第二点

10:20.230 --> 10:21.630
那么事件处理函数中

10:21.950 --> 10:23.390
我们说阻止冒泡

10:23.710 --> 10:25.190
阻止冒泡的方式

10:25.190 --> 10:28.350
我们就需要在这个组件里面

10:28.350 --> 10:30.390
我们除了这个onclick

10:30.390 --> 10:31.950
我们再写一个

10:31.950 --> 10:33.950
我们在上层的view里面

10:34.110 --> 10:37.070
我们再完成一个onclick

10:37.710 --> 10:38.470
等于

10:39.830 --> 10:41.150
再写一个事件

10:41.750 --> 10:43.030
那么我们看到

10:43.030 --> 10:44.950
我这边随便写个another changer

10:44.950 --> 10:46.430
里面就做一个输出

10:46.430 --> 10:48.070
所以我把它给写下来

10:48.270 --> 10:49.070
this点

10:49.550 --> 10:51.070
another changer

10:51.550 --> 10:51.950
对吧

10:51.950 --> 10:52.910
我们这样写

10:53.990 --> 10:55.390
another changer的目的

10:55.670 --> 10:57.790
就是我们可以去调取

10:57.790 --> 10:59.870
当前上面的这个

10:59.990 --> 11:01.510
another changer的一个方法

11:01.710 --> 11:03.950
这个方法和我们内部的操作

11:03.950 --> 11:05.950
属于同一个区域内

11:06.150 --> 11:08.030
你点击这个button的时候

11:08.030 --> 11:10.590
它同样会去触发这个onclick

11:10.910 --> 11:11.870
也就是说

11:11.910 --> 11:13.150
它在显示一些

11:13.150 --> 11:15.350
它本身自己按钮所呈现的

11:15.870 --> 11:16.790
conceler log的时候

11:16.790 --> 11:18.150
它会显示一句叫做

11:19.270 --> 11:20.430
another changer

11:20.430 --> 11:21.390
我们来看一下

11:22.870 --> 11:23.590
看到吗

11:23.990 --> 11:26.070
another changer依然会被触发

11:26.270 --> 11:27.350
你点上面

11:27.390 --> 11:28.950
没关系another changer会

11:29.110 --> 11:31.390
但是你属于按钮也属于这个区间

11:31.390 --> 11:34.110
所以这种就称之为点它的时候

11:34.270 --> 11:36.830
它会事件传递到触发上面一个

11:36.830 --> 11:37.790
事件帽炮

11:38.670 --> 11:39.830
解决它的办法

11:39.830 --> 11:41.310
我们刚才前面说了

11:41.550 --> 11:44.670
那么每一个事件都会带有一个参数叫e

11:45.590 --> 11:47.110
每一个事件都会带有

11:47.350 --> 11:49.150
根据你现在事件员不同

11:49.150 --> 11:51.150
根据你现在外部的事件调用不同

11:51.150 --> 11:52.950
e会传入不同的参数

11:53.710 --> 11:54.870
根据不同的参数

11:54.870 --> 11:57.950
甚至也可以传入一些你自定义的值

11:58.350 --> 11:59.630
我们根据这些内容

11:59.630 --> 12:03.230
我们可以自行的去做我们现在的各种的语法

12:03.430 --> 12:07.270
但是它里面始终就有一个叫做stop per person

12:07.710 --> 12:08.910
stop per person

12:09.270 --> 12:11.590
我们把这个内容给需要拿出来

12:12.870 --> 12:13.990
我们在做

12:13.990 --> 12:18.310
你想完成当前内部这个事件的过程中

12:18.550 --> 12:21.270
或者完成以后不想让它往上传

12:21.510 --> 12:23.070
那么这时候你要在内部

12:23.070 --> 12:23.870
不是在外层

12:24.470 --> 12:26.790
是在你需要执行的第一句话

12:26.950 --> 12:28.430
你打上e点

12:29.510 --> 12:30.110
stop

12:31.510 --> 12:31.990
per

12:32.710 --> 12:33.190
per

12:33.870 --> 12:34.630
gation

12:35.870 --> 12:36.310
stop

12:36.470 --> 12:37.470
proper gation

12:37.830 --> 12:38.830
打上这一句

12:39.270 --> 12:41.990
我们把它称之为叫阻止事件帽炮

12:48.830 --> 12:49.230
好

12:49.710 --> 12:51.150
那么现在再来看一下

12:55.110 --> 12:55.470
看

12:55.830 --> 12:56.830
点按钮的时候

12:56.830 --> 13:00.270
它其实这边是没有任何的another

13:00.430 --> 13:02.230
就是我们刚才看到的这句操作

13:02.230 --> 13:02.630
对吧

13:03.270 --> 13:03.630
在这

13:04.790 --> 13:06.070
another changer

13:06.310 --> 13:06.790
没有

13:07.590 --> 13:08.030
没有

13:08.190 --> 13:09.550
当我点上面的时候

13:09.750 --> 13:10.350
它是有

13:10.910 --> 13:11.430
所以

13:11.750 --> 13:15.590
这个意图就是我们完成了一个阻止事件帽炮

13:15.710 --> 13:16.310
请注意

13:16.710 --> 13:18.790
每一个事件都会带有这个e

13:18.790 --> 13:20.830
而这个e里面都会有一个stopper

13:21.190 --> 13:22.190
proper gation

13:22.750 --> 13:24.550
这是事件帽炮的一个操作

13:24.910 --> 13:27.990
那么你不用去尝试在这上面

13:27.990 --> 13:29.470
因为我们强调的是

13:29.710 --> 13:32.190
我们所有的事件都是以on开头的

13:32.510 --> 13:36.070
你不是我们的微信本身自己什么bump的

13:36.070 --> 13:37.150
可以改成catch

13:37.270 --> 13:38.350
它给了两个

13:38.590 --> 13:40.310
现在由于它只能给一个

13:40.310 --> 13:42.390
所以你就不能去尝试完成

13:42.390 --> 13:44.150
你说尝试一下改成catch

13:44.390 --> 13:44.910
不可以

13:45.710 --> 13:46.150
好了

13:46.230 --> 13:47.870
那么这是事件帽炮

13:47.870 --> 13:48.990
我们要讲的东西

13:49.190 --> 13:50.190
紧接着往下

13:50.350 --> 13:54.110
就是我们的事件处理函数的传参

13:55.070 --> 13:56.670
事件处理函数的传参

13:57.950 --> 13:59.550
我们回到我们的

14:02.690 --> 14:03.330
见面了

14:04.570 --> 14:08.090
事件处理函数传参的主要的

14:08.130 --> 14:10.010
是我们可以在我们的

14:10.010 --> 14:10.370
这里

14:10.370 --> 14:12.770
我们在我们的主调用上面来做

14:13.210 --> 14:15.170
我们可以把我们现有的

14:15.170 --> 14:18.410
刚才我们都是完成事件处理函数的调用

14:18.410 --> 14:20.010
我们没有任何参数

14:20.090 --> 14:22.490
意里面的停止事件帽炮

14:22.490 --> 14:23.370
也是自带的

14:23.850 --> 14:25.250
我们怎么样完成

14:25.250 --> 14:27.210
现在的能把数据传过去

14:27.210 --> 14:29.370
因为之前我们大家做的都是属于

14:29.370 --> 14:31.370
把我们的组件

14:31.370 --> 14:33.530
把数据传到组件里面去

14:33.850 --> 14:35.930
那么现在我们就给大家做一下

14:36.130 --> 14:38.970
怎么样就完成事件处理函数的传参

14:39.450 --> 14:40.370
首先第一个

14:40.370 --> 14:41.650
我们PPC上看一下

14:41.970 --> 14:42.890
第一个叫做

14:43.010 --> 14:44.210
Bump的传植

14:44.570 --> 14:45.290
Bump的

14:45.490 --> 14:47.530
Bump的是一种我们的

14:47.570 --> 14:48.690
在事件处理函数中

14:48.690 --> 14:50.690
最常用的一种传参方式

14:50.970 --> 14:53.730
它可以绑定把数据直接传送到

14:53.730 --> 14:56.690
我们现在事件函数的指定的位置

14:57.210 --> 14:58.890
尝试先看一下这个效果

14:59.410 --> 15:01.090
我们就在这外面做

15:02.970 --> 15:04.770
首先我们外面做一按钮

15:06.330 --> 15:09.250
作为事件处理函数的事件员

15:10.570 --> 15:12.450
对它执行一个onclick

15:16.180 --> 15:16.940
然后

15:17.140 --> 15:20.340
它触发我们现在的一个事件

15:21.740 --> 15:23.100
它触发一个事件

15:23.460 --> 15:24.580
我们写这个事件

15:24.580 --> 15:25.540
我们称之为

15:25.540 --> 15:26.500
就是叫做

15:29.280 --> 15:30.240
取这个名称

15:30.680 --> 15:31.720
preventprop

15:32.800 --> 15:34.720
我们就在当前的

15:34.760 --> 15:36.400
整个代码位置

15:36.400 --> 15:37.520
我们去写一个

15:38.480 --> 15:39.560
preventprop

15:54.150 --> 15:54.830
按钮

15:55.110 --> 15:55.910
单击

15:56.510 --> 15:57.230
事件

15:57.710 --> 15:58.670
处理函数

16:00.450 --> 16:01.610
你把这个写好

16:02.130 --> 16:04.170
然后我们注意一下

16:04.530 --> 16:06.330
一旦你现在是生命周期

16:06.330 --> 16:07.530
有这个z出现

16:07.530 --> 16:09.970
我们就必须在我们的about上面

16:09.970 --> 16:11.090
去做一个什么

16:11.130 --> 16:11.850
构造

16:23.180 --> 16:24.380
constructure

16:26.710 --> 16:27.870
构造第一步

16:32.250 --> 16:32.970
调用

16:33.970 --> 16:34.730
积累

16:36.210 --> 16:36.850
构造

16:37.690 --> 16:39.530
也就是super

16:41.050 --> 16:41.930
调用super

16:42.290 --> 16:43.330
你要传的参数

16:43.330 --> 16:45.010
我们用解析幅

16:45.970 --> 16:46.810
arguments

16:46.970 --> 16:48.170
我们可以往上传

16:48.650 --> 16:50.330
当然现在你也可以不用

16:52.250 --> 16:53.170
紧接着

16:53.530 --> 16:54.410
我们下面

16:54.490 --> 16:57.490
你需要把你现在的整个zs

16:57.610 --> 16:58.610
做一个指向

16:58.770 --> 17:00.610
这里面你可以写State

17:03.270 --> 17:04.790
这里面你可以去写State

17:04.790 --> 17:05.830
我们可以放空

17:07.780 --> 17:08.620
zs指向

17:09.900 --> 17:10.420
zs

17:11.020 --> 17:11.500
点

17:14.530 --> 17:15.490
preventprop

17:16.090 --> 17:16.690
等于

17:17.170 --> 17:17.850
zs点

17:18.610 --> 17:20.770
preventprop.bond

17:21.570 --> 17:22.090
zs

17:24.690 --> 17:25.810
你可以写在这边

17:26.490 --> 17:27.330
zs指向的

17:28.050 --> 17:30.810
然后我们就准备开始给它传直

17:30.810 --> 17:32.130
传直的方式

17:32.170 --> 17:33.490
是我们这边来

17:34.450 --> 17:36.290
我们写上bond

17:37.050 --> 17:38.370
我们写上bond

17:39.890 --> 17:42.090
bond要求第一参数是zs

17:44.060 --> 17:45.660
从第二参数开始

17:45.980 --> 17:47.500
是你要传送的内容

17:48.340 --> 17:49.780
那么第一参数我们

17:50.180 --> 17:51.340
传这里边的

17:51.340 --> 17:52.420
我们写上一个n

17:52.700 --> 17:53.780
我们称之为叫

17:54.340 --> 17:54.780
tau

17:57.170 --> 17:58.530
那我们就把这个n

17:58.810 --> 17:59.490
传过去

17:59.970 --> 18:00.650
zs点

18:02.410 --> 18:03.570
stator点

18:04.210 --> 18:04.650
n

18:05.890 --> 18:06.370
第二

18:06.410 --> 18:08.930
我们直接传一个我们的字铺串

18:09.210 --> 18:10.010
咱们就要做

18:13.500 --> 18:14.100
Welcome

18:15.340 --> 18:16.420
传两个过去

18:17.700 --> 18:19.740
一个是我从stator里面拿的

18:19.740 --> 18:21.740
一个是我自行定义的字铺串

18:22.900 --> 18:25.020
那么它就需要去接收数据

18:26.140 --> 18:28.580
那么接收数据的方式

18:28.780 --> 18:31.060
在官方上面有一个要求

18:31.420 --> 18:31.980
就是

18:32.420 --> 18:34.860
它会有一个我们说过

18:34.860 --> 18:37.180
每一个参数它都能接

18:37.460 --> 18:39.300
但是它还有一个e

18:39.580 --> 18:41.020
这个e参数

18:41.060 --> 18:42.700
是它的本身自带事件

18:42.980 --> 18:46.140
这个事件在和我们其他参数所

18:46.140 --> 18:47.820
并行接收的过程中

18:48.020 --> 18:49.660
你要写在最后

18:49.940 --> 18:51.180
你要写在最后

18:51.500 --> 18:54.460
所以它的形式就形成了我们

18:54.460 --> 18:56.660
首先你先接一个n

18:56.660 --> 18:57.180
对吗

18:57.580 --> 18:58.620
你先接一个n

18:58.620 --> 19:00.380
所以n的接法就变成

19:00.380 --> 19:02.020
我们先把n接下来

19:02.900 --> 19:03.340
第二

19:03.780 --> 19:04.020
第二

19:04.020 --> 19:05.700
我们是接受一个文本

19:05.740 --> 19:07.300
所以txt

19:07.820 --> 19:08.860
文本接下来

19:09.540 --> 19:10.300
第三

19:10.300 --> 19:13.060
我们在接收你现在的e参数

19:14.220 --> 19:15.100
这个格式

19:15.620 --> 19:17.580
那么我们就可以来打印一下

19:19.840 --> 19:21.400
待会我们可以做一个小实例

19:21.400 --> 19:23.840
我们先看一下这样的传送模式

19:25.120 --> 19:27.880
我们这边把n给打出来

19:38.400 --> 19:39.200
tester

19:40.560 --> 19:41.240
tester

19:45.730 --> 19:46.770
然后请接着

19:47.890 --> 19:48.890
我们把这e

19:50.250 --> 19:51.370
你可以看一下

19:51.970 --> 19:52.250
好

19:52.250 --> 19:54.370
我们把这三个全部做好了

19:54.570 --> 19:56.810
然后我们把它进行一次运行

19:56.810 --> 19:57.890
看一下效果

19:58.410 --> 19:59.250
点击一下

20:01.090 --> 20:01.850
这个

20:02.690 --> 20:03.970
butt是不是没写东西

20:04.450 --> 20:04.850
对

20:05.090 --> 20:06.290
没写东西没出来

20:06.930 --> 20:07.730
我们说

20:09.010 --> 20:09.690
事件

20:10.450 --> 20:11.450
bump的处理

20:12.570 --> 20:13.290
bump的

20:21.760 --> 20:23.400
事件bump的处理一点击

20:23.800 --> 20:24.800
我们可以看到

20:25.320 --> 20:28.200
首先n反回给我是txt

20:28.200 --> 20:30.640
txt反回给welcome也就意味着

20:30.720 --> 20:32.640
这两者我都接收到了

20:33.520 --> 20:35.080
第二我们看一下这个e

20:35.640 --> 20:37.320
e里面会传送什么东西

20:37.320 --> 20:38.640
我们简单看一下

20:38.640 --> 20:42.200
首先它会传送的结构和我们之前

20:42.200 --> 20:44.840
任何一个事件处理函数所返回的

20:44.840 --> 20:46.160
基本大同小e

20:46.680 --> 20:48.600
它依然会有current target

20:48.600 --> 20:51.200
代表的是它现在所点击到的

20:51.400 --> 20:53.880
它现在所点击到的整个

20:54.600 --> 20:55.920
目前的目标

20:56.160 --> 20:58.240
然后里面的数据你看一下

20:58.240 --> 21:00.320
它这边会有什么样的一个形式

21:01.040 --> 21:02.240
它有个data set

21:02.680 --> 21:03.520
它有个data set

21:03.520 --> 21:05.600
data set里面是一个json对象

21:06.040 --> 21:09.920
对象里面它会接收到你现在所要传送的

21:10.320 --> 21:10.800
tump

21:11.720 --> 21:14.040
那个welcome和this

21:14.400 --> 21:15.400
这个this

21:15.640 --> 21:17.680
其实就是我这边的这个

21:18.640 --> 21:20.680
它会把bump的中的内容

21:20.960 --> 21:24.000
以一个json的方式的格式的情况

21:24.400 --> 21:26.760
放在我们现在的这里边

21:27.520 --> 21:28.600
放在我们的这里边

21:29.400 --> 21:32.240
这个this在这里我们去取它的话

21:32.240 --> 21:33.120
是没有意义的

21:33.800 --> 21:34.720
那是没有意义的

21:34.920 --> 21:37.120
但是你可以有一种做法

21:37.120 --> 21:39.760
就是你现在如果不关心

21:39.760 --> 21:41.400
你现在究竟是什么值

21:41.400 --> 21:44.640
你关心你要获得了多少值传进来的

21:44.920 --> 21:47.280
并且这个值里面有没有这个数

21:47.400 --> 21:49.360
像这种逻辑上处理的话

21:49.440 --> 21:51.800
你完全就可以使用我们的这个e

21:52.200 --> 21:54.240
就完成data set里面的获取

21:54.320 --> 21:56.640
因为这里边我们把this

21:56.640 --> 22:00.520
区调以后剩下的就是你全部传送过来的值

22:01.400 --> 22:03.880
然后你就可以把一个json转换成速组

22:03.880 --> 22:06.560
然后在速组中利用速组含述的方式

22:06.560 --> 22:07.400
你去操作

22:07.520 --> 22:09.080
然后得到这里边的所有的

22:09.080 --> 22:11.360
你想要的一些值或者是逻辑处理

22:11.360 --> 22:12.000
理解吧

22:12.440 --> 22:12.960
ok

22:13.000 --> 22:15.720
那么这是我们这边所设计到的一个

22:15.840 --> 22:18.560
比较特别或者说可以运行的一个点

22:19.080 --> 22:22.720
第二个像mouse set的位置距离x,y,s长度

22:22.720 --> 22:25.680
然后的话detail里面也是一样

22:26.080 --> 22:27.800
然后target打开看一下

22:27.800 --> 22:29.720
它本身里面依然是这个结构

22:29.720 --> 22:30.320
看到吗

22:30.680 --> 22:33.040
所以和它的和我们前面的

22:33.040 --> 22:35.960
这个current target里面操作模式是一样的

22:36.000 --> 22:36.520
ok

22:36.680 --> 22:38.240
并且还有个type告诉你

22:38.240 --> 22:40.680
现在你是一个单机时间

22:40.680 --> 22:42.200
而这个单机咱们看到

22:42.200 --> 22:43.680
它已经转换成了type

22:43.800 --> 22:45.520
也不是我们什么unclick了

22:46.440 --> 22:48.680
其他的话就是你现在的位置

22:48.880 --> 22:51.120
它会返回给你很多的位置信息

22:51.280 --> 22:51.840
ok

22:51.960 --> 22:54.760
那么我们就得到了这样的整个这个操作

22:55.320 --> 22:58.240
然后同时我们看到这边有这个词

22:58.240 --> 22:58.960
看到没有

22:59.080 --> 22:59.760
stop

23:00.560 --> 23:02.160
proper propagation

23:02.480 --> 23:03.640
有这个词

23:03.760 --> 23:05.680
这就是我们平时刚才前面说的

23:05.880 --> 23:07.360
阻止时间磨泡有用到的

23:07.600 --> 23:08.160
ok

23:08.320 --> 23:10.840
那么整个这个e里面的东西其实很简单

23:10.840 --> 23:13.680
我们也看到了数据的结构和它里面的意义

23:13.720 --> 23:17.320
然后我们就可以尝试性的去调用这些内容

23:17.520 --> 23:19.560
棒的传直我们刚才说了一点

23:20.680 --> 23:23.320
官网上面说的是有一点我们说明一下

23:23.720 --> 23:26.040
它说这个e参数刚才我们强了

23:26.040 --> 23:27.720
它必须放在后面

23:27.720 --> 23:28.880
我们给大家看这句话

23:29.360 --> 23:30.640
在官网上面你看到

23:30.640 --> 23:32.440
它是通过棒的形式绑定

23:32.440 --> 23:33.960
在类中定义函数

23:33.960 --> 23:35.160
事件对象e

23:35.560 --> 23:37.720
要排在所有参数的后面

23:37.960 --> 23:39.320
要排在所有参数的后面

23:39.320 --> 23:39.880
看到吗

23:40.040 --> 23:40.920
它是这样意思

23:41.320 --> 23:42.960
但是这个是一个规范

23:42.960 --> 23:43.680
请记住

23:43.960 --> 23:45.280
这是一个规范

23:45.600 --> 23:47.920
你如果老师我非放前面行不行

23:53.530 --> 23:54.050
你看

23:54.330 --> 23:55.930
我就这么放了

23:56.130 --> 23:57.770
那么咱们来看一下效果

23:57.930 --> 24:00.010
它是爆错还是怎么样

24:00.170 --> 24:01.250
首先点一下

24:01.530 --> 24:02.610
你会发现什么

24:02.810 --> 24:05.050
它也正常执行了

24:05.530 --> 24:06.730
它也没有爆错

24:06.730 --> 24:08.570
你看它获取方式也得到了

24:09.210 --> 24:09.770
对吧

24:10.210 --> 24:11.570
所以我们讲的是

24:11.810 --> 24:12.970
在taro中

24:13.010 --> 24:15.530
这样的e它放在后面

24:15.530 --> 24:17.050
这是一个规范

24:17.050 --> 24:19.930
而不是一个要求

24:20.370 --> 24:20.970
当然

24:21.090 --> 24:22.530
你从某种角度来讲

24:22.530 --> 24:24.130
规范也是一种要求

24:24.250 --> 24:28.350
但它是一种强要求

24:28.390 --> 24:29.590
但你真的不这么做

24:29.590 --> 24:31.910
它还是会帮你执行的

24:32.590 --> 24:33.910
这是我们看到的一点

24:34.470 --> 24:36.150
紧接着我们继续往下来做

24:36.670 --> 24:39.070
那么我们第一个方式是bump的传参

24:39.430 --> 24:41.230
大家应该看到现在这个做法了

24:41.310 --> 24:43.030
我们可以几个小失利

24:43.030 --> 24:43.470
对吧

24:43.470 --> 24:45.550
比如说我做两个按钮

24:45.670 --> 24:46.550
一个按钮是开

24:46.550 --> 24:47.470
一个按钮是关

24:47.470 --> 24:47.830
对吧

24:47.830 --> 24:49.030
我们可以来改变一下

24:49.030 --> 24:50.710
里面的一个操作

24:51.150 --> 24:52.070
我们看一下

24:52.430 --> 24:54.230
我这边传直进来

24:55.950 --> 24:57.590
那么同学们会问了

24:57.870 --> 25:00.390
我现在直接把这样的state点

25:00.390 --> 25:01.150
我们传进来

25:01.150 --> 25:01.790
我们改一改

25:01.790 --> 25:02.910
你来看一下这个效果

25:02.910 --> 25:06.310
我们把这个词改成flag

25:06.870 --> 25:07.790
一个标记

25:08.230 --> 25:10.390
然后我们里面给它一个q

25:10.910 --> 25:11.870
给它一个q

25:12.150 --> 25:12.630
这样

25:13.230 --> 25:14.950
然后我们利用这个q

25:14.950 --> 25:16.870
我们来做一个显示

25:29.580 --> 25:32.700
this.state.flag

25:33.140 --> 25:34.660
如果是q的话

25:35.060 --> 25:36.380
那我们让它显示

25:38.330 --> 25:38.970
开灯

25:41.040 --> 25:41.720
自幅串

25:42.320 --> 25:43.600
如果是first的话

25:43.600 --> 25:44.760
我们用单引号

25:46.820 --> 25:47.380
开灯

25:47.780 --> 25:49.100
如果是first的话

25:49.100 --> 25:51.380
我们就给它用的是一个关灯

25:56.050 --> 25:57.210
用这样的方式

25:57.770 --> 26:00.810
那我们来做一个简单的改变

26:01.890 --> 26:03.130
这是问号

26:06.190 --> 26:08.510
那么我们现在点击这按钮的时候

26:08.510 --> 26:09.550
我们不传

26:09.550 --> 26:09.950
nay

26:10.190 --> 26:11.030
没有nay了

26:14.630 --> 26:15.230
flag

26:16.270 --> 26:17.750
传入flag以后的话

26:17.750 --> 26:18.870
那么我们来看

26:18.990 --> 26:20.270
我们在这上面

26:23.060 --> 26:24.860
我们来对它进行一次修改

26:25.220 --> 26:25.860
首先

26:26.260 --> 26:27.700
我不管为什么原因

26:27.700 --> 26:29.180
所以我先做一个

26:29.180 --> 26:31.700
因为当前的事件我只做一个

26:31.700 --> 26:32.900
但是如果说

26:32.900 --> 26:35.100
我有其他的一些事件在外面的话

26:35.100 --> 26:37.420
我肯定先做一个停止它的时间冒泡

26:37.420 --> 26:38.340
也就意味着

26:38.540 --> 26:40.260
这里只管透自己的事情

26:41.900 --> 26:43.180
叫做stop

26:43.660 --> 26:44.860
proper gaiting

26:47.100 --> 26:47.820
进接着

26:48.260 --> 26:49.380
我们接收

26:49.380 --> 26:50.620
这个也改一下了

26:50.620 --> 26:52.980
我们接收你现在的flag

26:53.780 --> 26:55.260
我们接收你的flag

26:55.260 --> 26:56.060
标记

26:57.420 --> 26:58.340
整个标记

26:58.340 --> 27:00.620
我们在这里面发生改变

27:00.860 --> 27:01.620
发生改变

27:01.620 --> 27:04.980
因为我们把它分两个事情做

27:04.980 --> 27:06.220
如果做按例的话

27:06.220 --> 27:07.580
我们大家可以这样写

27:07.580 --> 27:08.140
对吧

27:08.260 --> 27:08.940
千万注意

27:09.460 --> 27:11.780
千万千万不要去做成

27:12.500 --> 27:14.380
我们以前教过大家

27:17.220 --> 27:18.140
你就这样写

27:18.300 --> 27:20.260
distance data.

27:20.420 --> 27:21.460
然后的话

27:22.060 --> 27:23.020
flag

27:23.020 --> 27:24.540
等于去修改

27:24.580 --> 27:25.980
这个做法肯定不行

27:26.060 --> 27:26.660
对吧

27:26.660 --> 27:27.460
做什么

27:27.460 --> 27:29.540
distance status status

27:30.540 --> 27:31.620
这样去修改

27:31.620 --> 27:32.260
对吧

27:32.260 --> 27:34.820
然后我们把它出里面的flag

27:34.980 --> 27:37.220
我们可以把它做两个按钮

27:37.220 --> 27:38.500
做两个按钮

27:38.660 --> 27:40.020
那么第一个

27:40.020 --> 27:41.380
我们做成的是

27:41.980 --> 27:43.980
它是改成去的

27:45.220 --> 27:46.260
复制一版

27:56.020 --> 27:57.500
待会我们做修改

27:57.620 --> 28:00.500
我们可以把它换成不同的形式

28:02.300 --> 28:03.460
然后我们这改一改

28:03.500 --> 28:04.540
我们称之为

28:04.900 --> 28:05.500
pop

28:14.760 --> 28:16.080
以同样的方式

28:16.160 --> 28:17.960
接收参数和操作

28:21.910 --> 28:22.230
好

28:22.230 --> 28:23.390
它改成first

28:28.370 --> 28:28.890
ok

28:28.890 --> 28:30.210
那么这样好了以后的话

28:30.210 --> 28:31.370
我们来看一下页面

28:33.200 --> 28:33.880
开灯

28:35.320 --> 28:36.480
事件棒的处理

28:36.480 --> 28:37.320
我们改一改

28:37.320 --> 28:38.480
两个名字改一改

28:44.480 --> 28:46.040
这个操作

28:46.040 --> 28:47.720
它是完成一个

28:49.480 --> 28:50.480
那个q

28:50.600 --> 28:51.560
所以q的话

28:51.560 --> 28:52.760
它应该是开灯

28:52.960 --> 28:55.280
所以我们把它写成开灯

29:09.700 --> 29:10.300
开灯

29:13.340 --> 29:14.260
关灯操作

29:17.860 --> 29:18.500
保存

29:19.780 --> 29:22.100
紧接着我们来看一下页面效果

29:26.260 --> 29:26.740
ok

29:26.740 --> 29:28.900
咱们看到它有一个爆错

29:28.900 --> 29:31.820
代表的是我们这边拼写

29:31.820 --> 29:32.820
我们看一下

29:34.100 --> 29:35.260
stop

29:35.260 --> 29:35.860
ok

29:38.390 --> 29:39.630
stop

29:40.950 --> 29:41.910
紧接着再来

29:45.560 --> 29:46.240
关灯

29:47.600 --> 29:48.240
开灯

29:48.800 --> 29:49.600
改变了吧

29:50.520 --> 29:51.000
好

29:51.120 --> 29:52.760
这个咱们看到改变了

29:53.120 --> 29:54.680
我们利用了两个按钮

29:54.680 --> 29:56.520
完成了我们两个事件

29:57.040 --> 29:58.120
因为这边的话

29:58.120 --> 30:00.320
我们不去做它的flag

30:00.320 --> 30:01.960
那个等于它的一个

30:02.960 --> 30:05.000
那个叫什么感叹号的

30:05.360 --> 30:07.560
因为我们希望我们在做

30:07.560 --> 30:08.760
开灯和关灯的时候

30:08.760 --> 30:09.800
先做两个按钮

30:09.800 --> 30:10.640
做两个事件

30:10.640 --> 30:11.760
大家已经看清了

30:11.880 --> 30:12.760
我们来合

30:13.320 --> 30:15.560
或者是我们把bump的这个功能

30:15.560 --> 30:16.240
已经做好了

30:16.240 --> 30:16.960
开灯关灯

30:16.960 --> 30:17.280
对吧

30:17.280 --> 30:18.040
很简单

30:18.320 --> 30:19.720
这个事情大家应该看到了

30:20.840 --> 30:21.280
好

30:21.280 --> 30:23.280
我们如果把它合成一个

30:23.280 --> 30:25.280
也就是说我们经常在微信中

30:25.280 --> 30:27.200
咱们能见到一个叫做

30:27.200 --> 30:28.960
我们合一个按钮就没意思了

30:29.200 --> 30:30.800
我们合成一个叫switch

30:30.800 --> 30:32.840
那么这边我们要去说一下

30:32.840 --> 30:36.040
它本身自己直接和微信的合并的话

30:36.040 --> 30:37.240
会里面有个坑的

30:39.160 --> 30:39.920
switch

30:40.200 --> 30:41.120
它是一个什么

30:41.120 --> 30:41.960
不能这么打

30:41.960 --> 30:44.120
因为这样的话形成了一个switch预防

30:45.120 --> 30:46.440
你必须打扩号

30:48.190 --> 30:50.510
switch本身自己它是一个单标签

30:50.710 --> 30:52.470
所以我们直接可以这样写

30:53.350 --> 30:54.270
那么注意一下

30:54.630 --> 30:57.310
所谓的switch它是一个开关

30:57.310 --> 30:59.110
在我们整个的微信里面

30:59.110 --> 31:01.350
我们经常使用到这个开关

31:01.870 --> 31:04.750
开关本身自己它有一个属性

31:04.870 --> 31:08.790
代表的是当前你到底是复选按钮形式

31:08.950 --> 31:10.270
还是开关形式

31:10.630 --> 31:12.830
如果说我们给的是switch

31:14.710 --> 31:16.550
你给出这样一个形式的话

31:16.790 --> 31:20.630
那么它给你的就是一个我们的复选按钮

31:20.750 --> 31:21.590
那个叫什么

31:21.590 --> 31:22.590
开关形式

31:22.670 --> 31:23.510
我们写一下

31:24.110 --> 31:25.310
开关形式

31:27.190 --> 31:29.750
但如果说你用的是复选框

31:31.070 --> 31:32.390
复选框形式

31:34.760 --> 31:35.880
复选框形式

31:36.160 --> 31:38.680
那这样的话我们这边只要写出的是

31:39.280 --> 31:40.440
把它拿下来

31:40.440 --> 31:42.720
然后这边我们写上是type

31:43.800 --> 31:47.000
你来看一下这两种形式所呈现出来的效果

31:50.460 --> 31:52.020
我们这边改一下

31:52.380 --> 31:53.780
它应该叫checkbox

31:53.780 --> 31:54.220
对吧

32:01.820 --> 32:02.460
看到吗

32:02.700 --> 32:04.140
这是开关形式

32:04.140 --> 32:06.260
这是复选按钮形式

32:06.660 --> 32:07.100
ok

32:07.540 --> 32:12.020
那么它们两者本身自己就有QGNFORCE的数据

32:12.020 --> 32:13.700
QGNFORCE的数据

32:14.020 --> 32:16.620
那么这个数据该怎么样选择到呢

32:16.620 --> 32:17.980
在微信里面的话

32:18.500 --> 32:20.940
这两个是有一个叫做boundchanger的

32:21.260 --> 32:22.820
但如果这时候你呢

32:22.820 --> 32:27.020
以为的去使用我们现在的一个titled写法的话

32:27.020 --> 32:27.500
你来看

32:27.500 --> 32:28.860
你用unchanger

32:29.700 --> 32:31.020
你用unchanger来写

32:31.060 --> 32:32.020
我们就拿

32:32.660 --> 32:33.780
复选框形式先不用了

32:33.780 --> 32:35.100
我们看开关形式

32:35.660 --> 32:37.660
然后你自己写一方法

32:37.660 --> 32:40.020
就是它或者我们写一个改变

32:40.020 --> 32:41.380
switch改变方法

32:43.870 --> 32:47.230
switchswitch改变方法

32:47.230 --> 32:48.830
然后这里边写一个

32:49.110 --> 32:50.630
我们说过什么都不写

32:50.630 --> 32:51.390
然后呢

32:52.510 --> 32:55.790
我们带上当前的输出

32:56.270 --> 32:58.190
当前传进来的这个E吧

32:59.390 --> 33:00.950
我们把这个E输出吧

33:01.950 --> 33:05.350
然后把E的阻止时间冒泡也写上

33:06.310 --> 33:09.270
那我们来看一下这个E究竟里面会是什么形式

33:09.670 --> 33:12.030
unchanger我们在这边的话

33:12.030 --> 33:14.430
我们写上我们的

33:14.670 --> 33:17.830
当前的这个名称switchchanger

33:20.660 --> 33:22.660
我们把它拿出来switchchanger

33:22.660 --> 33:25.060
然后我们把它放在这里

33:26.540 --> 33:28.460
当前的switchchanger

33:28.460 --> 33:29.420
然后的话呢

33:29.420 --> 33:30.940
我们不用传任何参

33:30.940 --> 33:32.700
因为E本身应该是自带的

33:32.700 --> 33:33.220
对吧

33:33.500 --> 33:34.340
我们先看一下

33:34.340 --> 33:36.180
如果说不行我们传Bound

33:36.180 --> 33:37.220
你来看效果

33:37.460 --> 33:39.580
首先如果直接这样打的话

33:40.780 --> 33:41.540
我们看到

33:41.540 --> 33:43.300
我们这边还是一样

33:43.300 --> 33:50.360
我们它是爆了一个

33:51.600 --> 33:52.600
我们来看一下

33:53.040 --> 33:54.720
它是爆了一个不能找到

33:54.720 --> 33:55.320
stop

33:56.960 --> 33:58.240
我们打开看一下

33:58.240 --> 33:59.320
stopperperson

34:01.200 --> 34:02.320
我们把它先拿掉

34:05.900 --> 34:07.260
然后我们让它运行一下

34:09.470 --> 34:09.710
好

34:09.710 --> 34:10.790
我们点一下

34:10.790 --> 34:11.990
你会发现什么

34:12.150 --> 34:13.310
这边没有效果

34:13.510 --> 34:14.350
这边没有效果

34:14.350 --> 34:16.870
就意味着它这边什么都没有做

34:17.190 --> 34:19.030
也就是这方法压根就没进去

34:19.030 --> 34:19.590
对吧

34:20.070 --> 34:21.830
你是为了演示成功的话

34:21.830 --> 34:24.270
我们可以作为一个自服串

34:24.270 --> 34:25.590
咱们就要做

34:26.350 --> 34:27.510
就把名称拿下来

34:30.500 --> 34:31.340
就把点拿下来

34:31.340 --> 34:33.860
然后这时候你往里面去写的话

34:33.860 --> 34:36.580
应该是寸长触发会有这个效果

34:36.860 --> 34:38.300
所以我们往这看

34:38.300 --> 34:39.740
我们这边的话点

34:39.740 --> 34:40.220
你看

34:40.700 --> 34:42.020
是不是这边没有效果

34:42.220 --> 34:44.580
它只有第一次打开的时候会有一次

34:44.980 --> 34:45.460
对吧

34:45.660 --> 34:46.940
那么我们回过头来看

34:47.460 --> 34:48.780
没有效果

34:48.780 --> 34:50.900
是不是说我没有加棒的呢

34:50.900 --> 34:52.220
所以你可以加一次

34:52.220 --> 34:53.580
你可以再尝试一下

34:54.060 --> 34:55.900
你加棒的你加上去以后

34:55.900 --> 34:57.340
然后的话后面

34:58.060 --> 34:59.940
你传入当前的值

34:59.940 --> 35:01.100
你可以这样去写

35:01.100 --> 35:02.180
this.value

35:03.900 --> 35:04.300
好

35:04.620 --> 35:05.940
当你这样写好以后的话

35:05.940 --> 35:07.260
你再来看效果

35:07.260 --> 35:09.060
我们把这个内容

35:09.060 --> 35:10.700
我们直接在这边去打

35:10.700 --> 35:12.420
你会发现还是没有效果

35:12.900 --> 35:13.860
为什么呢

35:13.980 --> 35:15.540
为什么会没有效果

35:15.540 --> 35:16.740
我们不用改里面了

35:16.740 --> 35:18.060
我们来看它的圆满

35:18.860 --> 35:21.300
点击这个复选框的圆满

35:21.300 --> 35:22.020
没有的话

35:22.020 --> 35:23.460
我们这样刷一下

35:23.460 --> 35:25.060
点击复选框的圆满

35:25.060 --> 35:25.900
我们来看

35:26.340 --> 35:28.900
它的事件这边写的是叫什么

35:28.900 --> 35:29.940
它的事件叫

35:29.940 --> 35:32.340
bound unchanger

35:32.700 --> 35:33.860
但你请注意

35:34.060 --> 35:35.300
在switch里面

35:35.300 --> 35:38.180
它的这个事件应该叫bound unchanger

35:38.460 --> 35:41.100
它没有一个所谓的bound unchanger

35:41.100 --> 35:42.540
所以本身来讲

35:42.580 --> 35:44.460
它就并不会去触发

35:44.460 --> 35:46.460
当前的bound unchanger这个事件

35:46.820 --> 35:48.860
所以它就没有刚才的效果

35:48.860 --> 35:49.540
你说那老师

35:49.540 --> 35:50.900
我能不能把 un 去掉

35:52.340 --> 35:54.060
这个对于程序来讲

35:54.060 --> 35:55.980
它就根本不是一个事件了

35:55.980 --> 35:57.540
它就是一个属性了

35:57.540 --> 35:58.260
理解了

35:58.780 --> 36:00.060
你如果这样写

36:00.180 --> 36:01.140
你再来看

36:03.460 --> 36:05.260
我们让它继续刷新一下

36:06.300 --> 36:07.700
我们打开它来看

36:08.420 --> 36:09.180
你发现吗

36:09.180 --> 36:11.460
这里面就根本就没有属性了

36:12.140 --> 36:13.740
此时你再来做

36:14.180 --> 36:15.260
你往现在

36:15.260 --> 36:15.900
你说老师

36:15.900 --> 36:17.660
我能不能去改成其他的一些

36:17.660 --> 36:18.700
那么我告诉你

36:19.100 --> 36:21.260
系统在没有看到 un 的时候的话

36:21.260 --> 36:22.740
它就不会认为这是事件

36:22.740 --> 36:24.820
也就是说它不会往前加一个bound的

36:25.180 --> 36:26.780
那么我们看到前面两个按钮

36:26.780 --> 36:28.380
unclick 的时候的话

36:28.380 --> 36:29.740
它把它转成了是什么

36:29.740 --> 36:30.460
你看到没有

36:30.700 --> 36:32.260
它会把它转成 catch tab

36:32.380 --> 36:33.980
它会把它转成 catch tab

36:34.620 --> 36:35.860
这是它内部的机制

36:36.100 --> 36:38.820
那么我们怎么样能够让它执行

36:38.820 --> 36:40.100
因为这个标签

36:40.100 --> 36:42.220
它是属于微信的

36:42.460 --> 36:44.780
所以我们如果后面

36:44.780 --> 36:47.340
直接在以我们的 title 方式去写的话

36:47.340 --> 36:48.940
它是无法进行转换的

36:49.420 --> 36:52.740
那么我们就采取一种特殊的方式

36:52.740 --> 36:55.460
也就是微信的写法来写

36:56.140 --> 36:59.660
我们说 bound 直接跟上你的 changer

36:59.980 --> 37:01.940
bound 直接跟上你的 changer

37:02.140 --> 37:04.300
那么后面的调取方式是

37:04.300 --> 37:08.500
我们直接调你当前的switch

37:08.820 --> 37:10.620
微信里面还记得怎么调吗

37:10.740 --> 37:12.700
我们如果直接写这个名称

37:12.860 --> 37:13.900
我们来看效果

37:20.150 --> 37:21.990
它告诉你找不到这个对吧

37:22.150 --> 37:23.230
那我们来写一下

37:25.030 --> 37:26.750
我们把页面清一下

37:26.750 --> 37:27.750
做得简单一点

37:27.750 --> 37:28.510
我们看一下

37:28.910 --> 37:31.990
我们这边就直接写一个我们的

37:31.990 --> 37:32.670
首先你来看

37:32.670 --> 37:38.150
我们把 prevent tab 修改一下

37:38.350 --> 37:40.110
我们把它改成的就是现在的

37:40.110 --> 37:41.870
最简单的这样的一个意义

37:41.990 --> 37:42.710
调参数

37:42.710 --> 37:43.430
没有问题

37:43.870 --> 37:46.270
然后前面地步我们也没有改过

37:46.350 --> 37:48.510
然后我们这样把其他都删掉

37:48.510 --> 37:50.310
然后我们只留一个switch

37:50.910 --> 37:53.390
然后用个 bound changer 来改变

37:53.390 --> 37:55.310
用 bound changer 来改变一下

37:55.310 --> 37:57.350
我们现在调用它的方式

37:57.710 --> 37:59.750
然后后面写上一个 prevent tab

38:00.110 --> 38:01.230
也就是它的名称

38:01.630 --> 38:02.670
接收参数一

38:02.670 --> 38:04.190
然后并且给出个 aa

38:04.750 --> 38:06.550
好 我们现在来看一下运行一下

38:06.550 --> 38:07.670
我们把其他都删掉

38:07.670 --> 38:09.430
我们用最简单的逻辑来写

38:12.550 --> 38:13.470
咱们看这边

38:14.270 --> 38:16.830
给一下是不是 aa 和这个出来了

38:17.390 --> 38:18.230
打开一下

38:18.230 --> 38:19.710
你看这边是不是有个 true

38:20.670 --> 38:21.710
再打开一下

38:22.630 --> 38:23.750
看这边是不是 false

38:24.230 --> 38:25.270
current 下面有了

38:26.350 --> 38:28.590
那么整个这个操作我们讲

38:28.910 --> 38:31.950
它就完成了我们在terror 中

38:32.110 --> 38:35.790
去使用微信小程序的一些特殊控键

38:36.150 --> 38:38.110
它在属性上面的使用方式

38:38.750 --> 38:40.670
那么这边额外说明一套就是

38:40.910 --> 38:42.830
为什么微信小程序的这些

38:42.830 --> 38:43.990
是可以在这边用呢

38:44.430 --> 38:46.110
因为它最后编译的时候

38:46.270 --> 38:47.390
它发现这个

38:47.630 --> 38:48.870
只要它自己不认识

38:49.150 --> 38:49.790
或者讲

38:50.470 --> 38:52.950
它识别到你现在是微信小程序的

38:52.950 --> 38:53.830
一个试鸡语法

38:54.230 --> 38:55.070
它就直接

38:55.390 --> 38:57.150
不会在terror 中进行编译

38:57.150 --> 38:58.790
而会直接把这个代码

38:58.910 --> 39:00.990
直接传送给小程序进行操作

39:01.550 --> 39:02.710
它是有这个点的

39:03.270 --> 39:04.750
所以这边需要注意一下

39:04.870 --> 39:06.750
有一些特殊的情况上

39:06.750 --> 39:09.790
你本身如果直接使用的是我们

39:10.190 --> 39:11.510
terror 中的语法的话

39:11.510 --> 39:12.830
那么它是不起作用的

39:13.270 --> 39:15.750
所以有时候你还得去用到我们的

39:15.790 --> 39:17.030
微信小程序的语法

39:17.350 --> 39:20.070
这点是我们这边需要设计到的

39:20.070 --> 39:21.550
特别是像这个开关

39:21.790 --> 39:23.630
我们如果做两个按钮的话

39:23.630 --> 39:25.190
你看到其实没有问题

39:25.350 --> 39:27.230
就是我们直接用我们现在的

39:27.990 --> 39:29.870
我们的terror 的语法来写

39:30.270 --> 39:32.110
但如果说你设计到微信小程

39:32.110 --> 39:33.110
是想用它来的话

39:33.150 --> 39:33.910
那么你注意

39:33.910 --> 39:35.870
这边你一定要用这个方式来给

39:36.750 --> 39:37.670
咱们也看到了

39:37.990 --> 39:39.950
这样的话它是可以取得这个指的

39:39.950 --> 39:40.470
对吧

39:40.590 --> 39:42.750
并且在微信小程这边也是能够运行的

39:43.190 --> 39:44.470
上面这两个很简单

39:44.470 --> 39:44.790
对吧

39:44.790 --> 39:46.150
你去做开灯和关灯

39:46.150 --> 39:48.310
我这里面带码由于一个被删掉了

39:48.710 --> 39:49.590
所以这边的话

39:49.590 --> 39:51.950
我们大家直接是通过这样方式来做

39:51.950 --> 39:52.590
也可以

39:53.510 --> 39:55.390
那么这是我们说到的第二点

39:55.790 --> 39:57.430
这是我们本身来讲

39:57.430 --> 39:58.670
实现处理函数

39:58.670 --> 40:00.030
bond 传参

40:00.030 --> 40:01.070
隐身道

40:01.070 --> 40:04.550
用一些微信小程序的特殊的语法

40:05.110 --> 40:05.910
咱们再往下

40:06.990 --> 40:09.390
向函数中传递参数

40:09.750 --> 40:11.750
那么这个其实我们bond的

40:11.750 --> 40:13.270
第一个事情就已经做了

40:13.270 --> 40:13.750
对吧

40:13.830 --> 40:16.790
bond的本身自己就是可以向里面传递参数

40:17.190 --> 40:21.030
同时我们还可以用匿名的方式来传递参数

40:21.350 --> 40:24.110
我们说的使用匿名函数方式

40:24.550 --> 40:25.550
它不叫传递

40:25.870 --> 40:27.670
它叫函数的操作

40:28.270 --> 40:30.510
那我们来看一下所谓的函数操作

40:30.510 --> 40:31.750
它做了哪些东西

40:33.030 --> 40:36.030
我们在switch下面再写一个按钮

40:37.070 --> 40:37.590
button

40:39.190 --> 40:40.710
做一下Ata的onclick

40:40.710 --> 40:41.670
单击事件

40:42.030 --> 40:43.030
那么你注意

40:43.310 --> 40:44.790
正常的单击事件

40:44.990 --> 40:48.990
我们是给出一个我们需要调用的函数

40:49.190 --> 40:51.950
并且我们告知它bond的传参

40:52.270 --> 40:53.950
但是所谓的匿名

40:53.950 --> 40:57.110
它就是把你需要执行的整个函数

40:57.110 --> 40:59.150
写在了我们的onclick里面

40:59.630 --> 41:00.630
我们来看一下

41:00.630 --> 41:04.150
匿名函数把义参数写进去

41:04.270 --> 41:07.070
然后我们给它一个大过号

41:07.230 --> 41:09.070
首先第一点还是一样

41:09.550 --> 41:11.430
stop propagation

41:12.030 --> 41:15.750
完成我们的一个中止爆炮

41:16.550 --> 41:17.230
第二步

41:17.510 --> 41:21.430
你就像平时在写我们上面函数一样的方式

41:21.430 --> 41:22.230
在这里写

41:22.670 --> 41:24.350
那我们去改变我们的一个值

41:24.350 --> 41:26.030
就是我们现在在这里边的

41:26.030 --> 41:27.630
我们的一个flag

41:27.790 --> 41:29.870
我们改变一个stator的flag

41:31.700 --> 41:33.300
改变还是用那个语法

41:33.300 --> 41:34.980
this.statusStator

41:35.380 --> 41:38.740
你不能直接进行我们所谓的修改的

41:38.740 --> 41:40.140
我们已经强调好几遍了

41:41.340 --> 41:41.980
小过号

41:41.980 --> 41:42.580
大过号

41:42.620 --> 41:44.620
如果有原生概念同学

41:44.620 --> 41:47.220
原生里面就是有一个叫做statusStator

41:47.220 --> 41:47.740
对吧

41:48.020 --> 41:51.140
那么那个statusStator其实它的最初的点

41:51.140 --> 41:52.700
就是从reactor来的

41:54.600 --> 41:55.400
this.status

41:57.900 --> 41:59.980
我们做一个现在的

42:05.480 --> 42:06.800
我们随便给一个值

42:06.800 --> 42:08.560
我们让它进行修改一下

42:09.240 --> 42:10.240
我们值

42:10.240 --> 42:11.600
我们在外部定一下

42:11.600 --> 42:14.000
我们叫做flag

42:14.320 --> 42:15.040
value

42:16.790 --> 42:17.550
在这儿定

42:25.190 --> 42:29.390
然后我们写上测试value

42:33.060 --> 42:33.580
这样吧

42:33.580 --> 42:34.460
测试value

42:35.020 --> 42:35.500
好

42:35.940 --> 42:37.100
那这样写好以后的话

42:37.260 --> 42:38.980
我们就可以通过

42:39.180 --> 42:41.140
我们现在这样的一个匿名

42:41.140 --> 42:42.060
本身来讲

42:42.060 --> 42:43.660
它不会和其他的有关

42:43.660 --> 42:46.180
它只是在处理当前这个按钮的时候

42:46.180 --> 42:46.860
会运行

42:47.300 --> 42:48.980
我们把这个值可以拿出来

42:49.420 --> 42:52.420
当前的stator里面的

42:52.860 --> 42:54.220
我们有一个flag

42:54.220 --> 42:55.940
把这个值给看出来

42:56.260 --> 42:56.780
这样

42:58.770 --> 42:59.490
我们再定一个

42:59.490 --> 43:01.130
因为flag有true and false的

43:01.130 --> 43:01.490
对吧

43:01.490 --> 43:02.490
因为我们这样的话

43:02.490 --> 43:03.770
会对其他的影响

43:04.050 --> 43:05.130
所以我们写一个

43:05.530 --> 43:06.130
念

43:06.690 --> 43:07.810
我们给它一个

43:11.060 --> 43:11.540
张森

43:14.070 --> 43:16.310
然后我们把这个念来改变一下

43:21.790 --> 43:22.790
念value

43:23.030 --> 43:23.470
在这儿

43:24.510 --> 43:25.430
所以这边是

43:25.670 --> 43:26.390
显示它

43:26.910 --> 43:27.310
是吧

43:27.870 --> 43:28.070
好

43:28.070 --> 43:29.270
来看一下效果

43:33.940 --> 43:35.260
按钮没有给文字

43:42.480 --> 43:43.080
改变

43:49.220 --> 43:50.340
匿名函数

43:51.140 --> 43:51.660
操作

43:58.260 --> 43:58.740
在这儿

43:59.420 --> 44:00.020
点一下

44:01.700 --> 44:02.700
我们来看一下

44:03.380 --> 44:05.180
它是需要直接执行

44:05.180 --> 44:06.460
这个我们看一下

44:06.460 --> 44:07.940
它的这个操作

44:08.780 --> 44:10.540
它现在这个值

44:11.300 --> 44:12.580
这个改改错了

44:13.180 --> 44:14.260
这个应该是

44:14.580 --> 44:16.180
我们把念value放

44:17.060 --> 44:17.860
这里面是念

44:17.860 --> 44:18.260
对吧

44:18.260 --> 44:18.980
我们把

44:19.500 --> 44:20.260
念放这儿

44:20.260 --> 44:21.340
念value放这儿

44:21.780 --> 44:23.500
那么这里面呈现的是念

44:31.100 --> 44:31.540
出来了

44:31.540 --> 44:31.980
对吧

44:31.980 --> 44:32.820
test value

44:33.180 --> 44:33.700
test value

44:33.700 --> 44:34.460
再来看一下

44:34.980 --> 44:36.100
默认状态下

44:36.980 --> 44:38.540
我们这边再编一下

44:43.870 --> 44:44.230
它的

44:44.510 --> 44:46.110
app点杰森数据没了

44:46.430 --> 44:48.030
我们这边要重新

44:49.110 --> 44:49.590
给它

44:51.070 --> 44:51.910
生成一下

45:05.450 --> 45:06.090
OK应该

45:10.860 --> 45:11.300
出来了

45:11.820 --> 45:12.260
张森

45:12.660 --> 45:13.300
点击一下

45:13.980 --> 45:14.420
改变了

45:15.140 --> 45:17.220
整个这操作我们看一下它的圆码

45:17.980 --> 45:18.740
你看一下它的圆码

45:19.300 --> 45:20.340
它在button里面

45:20.340 --> 45:23.700
你有没有在这儿去看到它刚才写的匿名函数呢

45:24.380 --> 45:24.980
没有吧

45:25.500 --> 45:26.820
在微信小程序里面

45:26.820 --> 45:28.180
这点需要知道一下

45:28.180 --> 45:29.140
并不需要记住

45:29.500 --> 45:32.580
就是你所写的任何的函数处理程序

45:32.580 --> 45:35.260
它并不会在它的json文件中

45:35.260 --> 45:39.420
或者称之为wxml中进行所谓的编译

45:39.700 --> 45:41.500
它会在转换的时候

45:41.500 --> 45:45.980
把你这段代码直接还是封装到了它的js文件中

45:46.660 --> 45:48.500
所以你写的匿名的

45:48.500 --> 45:49.260
咱们看到

45:49.580 --> 45:52.580
这边它会给它自动去起一个名称

45:53.340 --> 45:55.100
它会自动的给它起一个名称

45:55.460 --> 45:56.220
叫做

45:56.660 --> 45:58.380
一部的函数

45:58.380 --> 45:59.180
然后0

46:00.260 --> 46:01.380
如果你多写的话

46:01.380 --> 46:02.940
它就会一二三四往后放

46:03.500 --> 46:05.660
然后当你这样写好以后

46:05.660 --> 46:07.900
那么本身的这个函数

46:08.540 --> 46:09.860
本身的这个函数

46:09.860 --> 46:13.500
它也只能执行当前的button按钮

46:13.500 --> 46:15.660
它是不可以在其他的一些完成的

46:15.660 --> 46:16.700
因为它没有一个

46:17.340 --> 46:18.900
我们所谓的名称

46:18.900 --> 46:19.860
讲的专业一点

46:19.860 --> 46:22.180
那就是属于一个剧柄的地址指向

46:22.340 --> 46:22.820
它没有

46:23.180 --> 46:25.980
导致的就是属于它现在只能完成

46:26.260 --> 46:27.020
当前这个函数

46:27.500 --> 46:30.020
然后我们在这个写法上面

46:30.020 --> 46:30.980
我们强调一下

46:31.420 --> 46:33.540
这个写法可以写

46:34.060 --> 46:37.100
但是我们不建议大家

46:37.620 --> 46:39.620
一直会去这么去书写

46:40.220 --> 46:41.180
不建议大家

46:41.540 --> 46:45.300
因为这样你就其实你已经破坏了

46:45.300 --> 46:47.700
当前函数或者称之为

46:48.020 --> 46:49.420
这个事件处理程序

46:49.420 --> 46:50.460
它原本的意义

46:50.980 --> 46:54.100
除非说是你只改变某一个内容

46:54.700 --> 46:55.620
某一个内容

46:55.620 --> 46:58.140
然后程序又是非常小

46:58.140 --> 46:59.940
你才可能去这么写

47:00.180 --> 47:02.300
所以从语法上来讲的话

47:02.580 --> 47:05.060
这个写法我们讲还是属于

47:05.860 --> 47:07.620
逻辑语法存在

47:08.180 --> 47:10.060
函数的目的是什么

47:10.180 --> 47:13.500
函数的目的是让我们能够很好的进行附用

47:15.730 --> 47:17.330
咱们看到这个结构了

47:17.650 --> 47:18.810
同时我们继续

47:20.050 --> 47:20.930
我们再来看

47:21.130 --> 47:22.730
我们匿名函数讲完以后

47:22.730 --> 47:25.210
我们讲一下函数式组建

47:25.210 --> 47:26.050
我们说了

47:26.370 --> 47:28.930
函数式组建在我们本身后面

47:28.930 --> 47:31.530
会有一个小章节给大家一起来讲

47:31.530 --> 47:33.650
那么这边先给大家引一下

47:33.890 --> 47:36.130
给大家看到一下什么是函数式组建

47:36.650 --> 47:38.690
首先我们要讲到组建的话

47:38.690 --> 47:39.970
我们得回到这样的

47:39.970 --> 47:41.810
就是我们的component里面

47:42.210 --> 47:44.130
component里面我们说过

47:44.130 --> 47:45.730
组建的形式

47:45.730 --> 47:47.170
其实我们打开以后

47:47.170 --> 47:48.690
大家其实很明显看到

47:49.090 --> 47:51.490
我们可以使用component

47:51.490 --> 47:53.690
这样一个类的继承的模型

47:53.850 --> 47:55.450
来完成组建的编写

47:56.090 --> 47:59.050
类它本身就有它自己的结构存在

47:59.050 --> 48:01.650
比如说它有继承的要求

48:02.050 --> 48:05.970
继承以后它有构造函数和类的关联

48:06.330 --> 48:10.530
同时有super调用复类构造函数的写法

48:11.130 --> 48:13.410
同时里面的所有的属性

48:13.410 --> 48:14.970
都是我们需要用到

48:14.970 --> 48:16.410
当前的this的方式

48:16.410 --> 48:17.890
来对stater进行操作

48:18.490 --> 48:22.290
然后我们一旦有我们的方法的话

48:22.290 --> 48:23.130
事件的话

48:23.130 --> 48:27.210
我们都可以使用changer这样的方式进行绑定

48:27.730 --> 48:30.250
这都是类所要求的

48:30.810 --> 48:33.250
里面的方法也是事件也好

48:33.250 --> 48:38.010
我们都按照我们一个函数的方式来书写

48:38.370 --> 48:40.170
当然名称直接写前

48:40.170 --> 48:42.570
不能直接写function这样的逻辑

48:42.810 --> 48:43.210
对吧

48:43.490 --> 48:45.770
一旦你继承了我们的component

48:45.770 --> 48:48.090
你还需要有一个我们的random

48:48.530 --> 48:51.330
这都是我们作为机类

48:51.410 --> 48:52.930
作为component

48:53.130 --> 48:55.170
所要求我们继承类

48:55.170 --> 48:56.850
所需要去执行的内容

48:57.490 --> 49:00.290
那么除了这样的写法以外

49:00.450 --> 49:03.490
那么我们说对于构造函数来讲

49:03.490 --> 49:06.050
对于我们的组件来讲

49:06.170 --> 49:09.930
还有一种叫做函数式的方式

49:10.290 --> 49:12.370
函数式就是讲

49:12.490 --> 49:15.370
它的本身没有class这个词

49:15.810 --> 49:20.250
它的很多的写法也比你class减略

49:20.770 --> 49:22.050
是这个逻辑

49:22.570 --> 49:24.050
那么我们来写一下了

49:24.290 --> 49:27.370
首先我们到我们的component里面

49:27.370 --> 49:29.770
咱们再建议文件加

49:29.890 --> 49:37.250
然后我们说是function component

49:44.780 --> 49:46.060
function component

49:46.380 --> 49:47.500
有F大写

49:52.250 --> 49:54.410
然后在它里面我们建立

49:57.510 --> 50:00.070
function.gsx

50:02.050 --> 50:03.290
建立这样一个文件

50:04.290 --> 50:05.570
我们依然不要样式

50:05.570 --> 50:07.770
所以我们单独建立这一个文件出来

50:08.610 --> 50:09.330
看着我来

50:09.330 --> 50:12.290
首先随便你用哪种模式

50:12.290 --> 50:15.170
我们 import tarot 一定得导进来

50:16.730 --> 50:17.530
导进来

50:18.530 --> 50:21.370
然后我们正常的写法

50:21.370 --> 50:24.370
把component这是一个连关的做法

50:26.050 --> 50:27.290
你说我可以不用它

50:27.450 --> 50:27.930
可以

50:30.950 --> 50:33.670
然后去写一下

50:34.390 --> 50:36.030
tarot.gs

50:36.830 --> 50:37.510
tarot

50:40.990 --> 50:41.790
expert

50:42.750 --> 50:43.550
default

50:44.910 --> 50:45.590
function

50:45.790 --> 50:46.270
注意

50:47.270 --> 50:48.950
从这开始就不一样了

50:50.110 --> 50:52.590
我们这边直接expert default

50:52.590 --> 50:55.110
我们之前这边写的是class

50:55.590 --> 50:58.750
但是通过我们函数式的组件来写

50:58.990 --> 51:01.270
这边你只要写的是function

51:01.870 --> 51:03.310
这边你写的是function

51:03.990 --> 51:06.070
我们做一个简单的

51:06.070 --> 51:08.150
比如说button

51:08.470 --> 51:09.670
我们做一个button

51:10.310 --> 51:13.830
然后它作为函数存在的话

51:13.830 --> 51:17.990
它就可以利用函数的参数来接收

51:19.590 --> 51:20.470
数据传送

51:21.150 --> 51:23.510
你作为一个组件

51:23.510 --> 51:25.470
一定会把数据传进来

51:25.470 --> 51:28.110
作为我们的组件的类的形式

51:28.110 --> 51:30.830
一定是通过disk.perpertise的方式来做

51:30.990 --> 51:33.550
但作为函数的方式来写的话

51:33.550 --> 51:35.670
你就可以通过它的参数

51:35.670 --> 51:38.110
我们把函数的参数在接收方

51:38.190 --> 51:40.230
我们称之为叫行参

51:40.670 --> 51:42.430
那么用行参的方式来接

51:42.430 --> 51:43.710
首先第一点

51:43.870 --> 51:44.950
接收到的数据

51:44.950 --> 51:48.190
我们可以直接把它放在我们当前的

51:48.190 --> 51:49.310
从里面获取

51:49.870 --> 51:51.950
我们直接定名获取

51:53.070 --> 51:54.270
定死你的名字

51:54.270 --> 51:56.350
从里面直接获取当前这个

51:57.990 --> 51:59.070
有些同学的话

51:59.070 --> 52:01.270
这个写法的话很有意思

52:01.830 --> 52:03.830
他的理解我觉得还挺好

52:03.830 --> 52:04.990
有些地方我见到

52:05.390 --> 52:06.150
他是说

52:06.150 --> 52:09.350
如果我直接把这个纸拿出来以后

52:09.350 --> 52:10.430
再来拆分

52:10.550 --> 52:12.310
那就是我有个养鸡场

52:12.910 --> 52:14.750
或者说我有一个养牛场

52:14.910 --> 52:16.190
在这个养牛场里面的话

52:16.910 --> 52:18.630
我们就每头牛就起了名字

52:19.270 --> 52:22.390
我现在如果说是不去定义这个词

52:22.390 --> 52:23.870
我disk.perpertise的话

52:23.870 --> 52:25.790
那么他是只把所有牛拿出来

52:25.990 --> 52:27.350
拿出所有牛赶过来

52:27.350 --> 52:27.950
赶过来以后

52:27.950 --> 52:29.430
每一头牛走到我面前的时候

52:29.590 --> 52:30.630
我都要区分一下

52:30.630 --> 52:32.230
这是小花还是小王

52:32.630 --> 52:33.430
是这个逻辑

52:33.830 --> 52:35.350
但在赶牛的时候我不管

52:35.830 --> 52:37.070
如果我定名的话

52:37.070 --> 52:38.390
就是这球牛在那边

52:38.390 --> 52:40.910
然后我只是要求小花过来

52:41.150 --> 52:42.990
所以过来的这头一定是小花

52:42.990 --> 52:43.870
是这个逻辑

52:44.150 --> 52:44.870
这个挺有意思

52:44.870 --> 52:45.310
我觉得

52:45.550 --> 52:46.310
然后他干嘛的

52:46.310 --> 52:47.350
他说他家养牛的

52:48.350 --> 52:48.750
好吧

52:48.750 --> 52:49.270
我们继续

52:50.030 --> 52:51.910
然后我们看一下conster

52:51.910 --> 52:55.110
然后我们去定一个方法

52:56.230 --> 52:57.270
我们定一个方法

52:57.750 --> 52:59.630
这个方法我们里边

52:59.830 --> 53:01.270
里面写的一个长量

53:01.270 --> 53:04.310
我们长量其实它是对应到一个所谓的

53:04.590 --> 53:05.190
函数

53:06.830 --> 53:08.030
对应到一个函数

53:08.030 --> 53:09.030
这是一个匿名

53:09.470 --> 53:10.390
这个没关系

53:10.390 --> 53:12.470
因为每次要调用这个匿名函数

53:12.470 --> 53:14.190
一定是和这个长量有关

53:14.470 --> 53:17.150
它长量就代表的是这个函数名

53:17.630 --> 53:19.910
然后里边我们做一个最简单的

53:19.910 --> 53:21.790
就是conceler.log

53:22.030 --> 53:24.390
我们完成一个简单的

53:25.910 --> 53:26.590
输出

53:26.590 --> 53:28.390
我们完成一个简单的输出

53:28.390 --> 53:29.670
叫hi

53:30.470 --> 53:33.270
然后我们把这个名字输出

53:35.660 --> 53:36.100
对吧

53:36.100 --> 53:36.780
这样写

53:37.420 --> 53:39.700
这是属于注意要函数里面

53:39.700 --> 53:41.980
我们在这不去嵌讨函数

53:42.180 --> 53:44.340
我们函数中再要使用函数的话

53:44.340 --> 53:45.500
用长量的方式

53:45.500 --> 53:46.380
conceler来写

53:46.900 --> 53:49.500
我们这边先做一个简单的格式化

53:49.500 --> 53:51.340
然后下面我们来

53:52.900 --> 53:55.580
我们先把做一个简单的给大家看到一下

53:56.340 --> 53:57.420
那么我们就做页面了

53:59.060 --> 53:59.660
做页面

54:10.560 --> 54:11.120
hello

54:13.780 --> 54:14.260
n

54:19.500 --> 54:20.140
button

54:25.050 --> 54:26.410
对它进行触发

54:27.250 --> 54:28.530
触发的话

54:28.530 --> 54:30.130
say hi

54:39.230 --> 54:39.470
好

54:39.470 --> 54:40.550
我们写了这样一个

54:40.550 --> 54:41.430
我们看一下

54:42.030 --> 54:43.390
这是一个非常简单的

54:43.390 --> 54:44.910
我们做一个简单的实例

54:44.910 --> 54:45.510
告诉你

54:45.510 --> 54:46.950
现在我们有个函数

54:46.950 --> 54:48.790
这个函数名称叫button

54:49.070 --> 54:50.550
然后它可以接收参数

54:50.550 --> 54:52.790
参数接近了以后定名取出n

54:53.110 --> 54:55.630
然后我们里面写了一个conceler

54:55.630 --> 54:56.230
长量

54:56.390 --> 54:58.310
这个长量其实是一个方法

54:58.550 --> 54:59.990
这个方法是一个匿名的

54:59.990 --> 55:01.350
我们里面主要做的是

55:01.350 --> 55:04.310
把你现在接近来参数的n给显示一下

55:04.590 --> 55:07.910
然后我们做了一个我们的return

55:08.190 --> 55:08.870
诸腰

55:09.150 --> 55:11.830
它并没有去继承component

55:12.070 --> 55:14.030
所以它没有继承的前提下

55:14.030 --> 55:15.950
它就不需要那个叫做randle

55:16.430 --> 55:17.990
作为函数来讲的话

55:17.990 --> 55:19.350
那么它会有个return

55:19.510 --> 55:22.230
我们就把tsr的语法进行返回

55:22.390 --> 55:25.710
然后我们看到我们把这边的变量数出一下

55:25.910 --> 55:28.470
同时这里边有一个我们的单击实践

55:28.470 --> 55:29.990
单击实践其实触发的

55:29.990 --> 55:31.430
就是我们里面的conceler

55:31.830 --> 55:32.670
这个结构

55:33.030 --> 55:35.310
然后我们对它进行调用一下

55:35.390 --> 55:36.870
我们对它进行调用一下

55:37.270 --> 55:40.910
我们跑到我们现在的页面中

55:42.470 --> 55:43.310
页面的话

55:43.310 --> 55:47.350
我们是在我们的paters里面跑这

55:48.070 --> 55:49.110
首先第一步

55:49.110 --> 55:49.870
引入

55:51.030 --> 55:51.950
import

55:53.310 --> 55:53.950
button

55:56.000 --> 55:56.720
from

55:57.480 --> 55:58.720
我们来点点杠

55:58.720 --> 55:59.600
点点杠

55:59.600 --> 56:02.120
它应该是component下面的

56:03.200 --> 56:05.320
for component下的分

56:06.000 --> 56:07.080
这样引入进来

56:07.920 --> 56:09.280
那么我们就把它

56:11.650 --> 56:13.730
写在我们的clock下面

56:17.630 --> 56:18.470
写标签

56:20.410 --> 56:21.850
然后里面写上其他的

56:21.850 --> 56:22.650
比如说

56:23.090 --> 56:23.650
Nan

56:26.950 --> 56:27.670
Alice

56:29.990 --> 56:30.670
Ager

56:32.630 --> 56:33.310
20

56:34.750 --> 56:34.990
好

56:34.990 --> 56:35.870
我们保存一下

56:36.350 --> 56:36.790
效果

56:36.790 --> 56:38.350
我们打开我们程序

56:38.350 --> 56:40.670
看到一个C hi点击一下以后

56:40.670 --> 56:42.510
Hi Alice是不是出来了

56:42.830 --> 56:43.950
那么这个形式

56:43.950 --> 56:47.710
就是我们的一个叫做寒树式组件

56:48.190 --> 56:51.150
这边我们给大家做一个简单的效果

56:51.150 --> 56:51.790
看一下

56:51.870 --> 56:53.990
大家也清楚寒树式组件的

56:53.990 --> 56:55.190
对它几个特点

56:55.870 --> 56:57.350
寒树式组件的做法里面

56:57.350 --> 57:01.110
有很多和我们的类型组件

57:01.310 --> 57:02.430
有一些相似处

57:02.430 --> 57:03.950
但是它更多的时候

57:04.310 --> 57:07.270
它会有一些简变的写法

57:07.350 --> 57:08.030
OK吧

57:08.150 --> 57:09.670
这个是我们在后面

57:09.670 --> 57:10.910
我们首先看到几点

57:10.910 --> 57:11.830
我们先说一两点

57:12.350 --> 57:14.510
首先你看到constructor

57:15.510 --> 57:16.670
构造寒树没了吧

57:17.270 --> 57:17.790
对吧

57:17.910 --> 57:18.470
第二的话

57:18.990 --> 57:20.390
我们既然没有构造寒树

57:20.390 --> 57:21.350
就没有super

57:21.350 --> 57:21.790
对吧

57:21.790 --> 57:22.630
第二的话

57:22.630 --> 57:25.430
我们也没有棒的绑定的概念

57:25.430 --> 57:26.030
对不对

57:26.030 --> 57:27.830
它就是一个传旨

57:28.270 --> 57:29.590
它就是一个传旨

57:29.830 --> 57:31.270
而这种purpose的传旨

57:31.270 --> 57:32.670
我只要在这边给

57:32.670 --> 57:33.710
我只要在这边给

57:33.710 --> 57:34.790
给完以后的话

57:34.790 --> 57:35.990
它这边直接拿

57:36.390 --> 57:38.310
是不这样的逻辑上就非常简单

57:38.630 --> 57:39.510
再往下

57:39.710 --> 57:41.870
它的所有在寒树中

57:41.870 --> 57:42.950
就是所使用

57:42.950 --> 57:44.990
虽然它现在是一个寒树

57:44.990 --> 57:46.430
但是它本身内部

57:46.430 --> 57:49.110
就可以去定义我们所谓的constructor

57:49.110 --> 57:51.990
形成我们现在简单的这样的一个方法

57:52.390 --> 57:54.430
这个方法的写法就意味着

57:54.430 --> 57:57.430
它可以变相的完成寒树的前套

57:57.430 --> 58:00.110
只不过外层寒树作为了它的一个

58:00.110 --> 58:02.190
数据返回的一个寒树调用点

58:02.190 --> 58:04.430
而内层才在真正意义上的寒树

58:05.430 --> 58:07.750
同时它也没有所谓的rander

58:07.750 --> 58:09.670
它直接可以使用我们的

58:09.670 --> 58:12.710
简单的语法完成你现在页面的展示

58:12.910 --> 58:14.110
而这个页面的展示

58:14.150 --> 58:15.550
主要是通过return的方式

58:15.550 --> 58:16.750
返回以后

58:16.750 --> 58:17.830
在调用的位置上面

58:17.830 --> 58:18.630
其实是一样

58:18.710 --> 58:19.670
首先做引入

58:19.670 --> 58:20.670
引入以后的话

58:20.670 --> 58:22.150
我们把它直接写在

58:22.150 --> 58:24.070
我们需要呈现的位置就可以了

58:24.830 --> 58:27.430
这是我们所谓的一个寒树式的

58:27.430 --> 58:28.430
组件写法

58:28.750 --> 58:29.830
那么这边的话

58:29.990 --> 58:31.270
我们再回到PVT来讲

58:31.270 --> 58:31.990
寒树式组件

58:31.990 --> 58:33.190
我们简单说了一下

58:33.630 --> 58:34.910
大家应该有个基本概念

58:34.910 --> 58:35.550
那么之后的话

58:35.550 --> 58:36.910
我们还会继续讲解

58:37.230 --> 58:38.750
任何组件的形式传递的时候

58:38.750 --> 58:39.950
都是以按开头

58:39.950 --> 58:40.750
那么这点的话

58:40.870 --> 58:42.310
我们后面要打个规范

58:42.510 --> 58:43.510
它就是属于

58:43.670 --> 58:44.550
Taro愚法

58:47.620 --> 58:49.220
那么为什么Taro在

58:49.220 --> 58:50.740
5愚法上面需要这样写

58:50.900 --> 58:51.940
其实原因很简单

58:51.940 --> 58:53.660
因为Taro本身生成的愚法里面

58:53.660 --> 58:55.100
并不是单单做小程序

58:55.100 --> 58:55.780
它可以做AQ5

58:55.780 --> 58:56.780
还做其他内容

58:56.980 --> 58:57.980
如果你现在指定

58:57.980 --> 58:59.460
范是指定到一个上面的话

58:59.580 --> 59:01.580
那么它本身的操作上面

59:01.580 --> 59:02.660
就会有一点点的

59:02.900 --> 59:03.380
问题

59:03.380 --> 59:05.380
但是我们如果已经强烈知道

59:05.380 --> 59:07.500
我Taro是做优行小程序的框架的话

59:07.700 --> 59:10.340
我们本身微小程序里面的一些内容

59:10.340 --> 59:12.860
它还是需要有自己的一些特点在的

59:13.020 --> 59:14.020
所以我们就使用的是

59:14.020 --> 59:15.180
Bound Changer方式

59:15.380 --> 59:17.420
这种刚才我们用了一个Switch特例

59:17.420 --> 59:18.540
来做这样的操作

59:18.700 --> 59:19.500
大家看到了吧

59:20.100 --> 59:21.540
但是如果你本身你说

59:21.540 --> 59:22.980
我就需要通用化的话

59:22.980 --> 59:23.740
那你就写一句

59:23.740 --> 59:24.580
通用标签

59:24.900 --> 59:26.060
你就做一些通用标签

59:26.060 --> 59:27.140
不要去用Switch

59:27.420 --> 59:28.380
理解这个逻辑

59:29.140 --> 59:30.180
那么这个部分

59:30.340 --> 59:33.460
就是我们所谓的事件处理概念

59:33.700 --> 59:37.100
我们讲到了非常多的事件的本身的意义

59:37.100 --> 59:38.900
讲到了在它里面的使用

59:38.900 --> 59:40.220
讲到了和我们

59:40.340 --> 59:43.100
我们平时用的其他的一些语法的区别

59:43.100 --> 59:44.700
同时我们也讲到了

59:44.700 --> 59:46.940
它怎么样进行数据的传递

59:46.940 --> 59:48.780
以及简单给大家介绍了一下

59:48.780 --> 59:50.860
函数式组建的一些写法

59:51.100 --> 59:52.460
同时我们该掩饰了

59:52.460 --> 59:54.020
我们怎么样用昂传值

59:54.020 --> 59:56.980
以及不能用昂传值所返回的结果

59:57.100 --> 59:59.500
这都是我们在整个这一块内容中

59:59.500 --> 01:00:00.340
给大家讲解的

01:00:00.340 --> 01:00:02.060
那么大家可以把这块内容

01:00:02.060 --> 01:00:03.460
好好地去学习一下

01:00:03.460 --> 01:00:05.860
同时我们也可以坑过这部分内容

01:00:05.860 --> 01:00:08.340
给到大家做一些知识的扩展

01:00:08.740 --> 01:00:09.820
并不需要说

01:00:09.820 --> 01:00:11.100
只是掌握一种

01:00:11.100 --> 01:00:12.860
你说我就掌握一种写法

01:00:13.580 --> 01:00:15.220
因为本身框架来讲

01:00:15.220 --> 01:00:19.020
有非常多的它的一个输出编译过程

01:00:19.020 --> 01:00:19.580
ok

01:00:19.580 --> 01:00:20.700
那么这节课呢

01:00:20.700 --> 01:00:21.020
就先

