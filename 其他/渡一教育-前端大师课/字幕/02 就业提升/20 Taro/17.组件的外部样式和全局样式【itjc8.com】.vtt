WEBVTT

00:00.050 --> 00:02.810
好 我们继续讲解Tarot系列课程

00:02.810 --> 00:08.370
这些课给大家讲解一下组件的外部样式和全局样式的一些调用

00:08.370 --> 00:09.770
还有它的一些规则

00:10.410 --> 00:14.130
作为样式 我们讲一般我们的组件

00:14.130 --> 00:18.370
都是可以在它内部进行样式的定义

00:18.650 --> 00:21.370
我们讲过像组件我们前面写到的

00:21.370 --> 00:24.250
JetX 本身自己可以引入一个CSS

00:24.250 --> 00:26.410
这个是组件内部的样式 对吧

00:26.730 --> 00:30.410
那么它也可以进行自行的一个封装设定

00:30.410 --> 00:31.970
因为它不影响外部的

00:32.410 --> 00:34.330
但是它有几个特点

00:34.330 --> 00:36.650
外部和内部的组件毕竟来讲

00:36.650 --> 00:38.450
它们可能都会用到样式

00:38.890 --> 00:42.690
那么它们之间的关系和它特点有什么样的写法呢

00:42.690 --> 00:43.450
我们来看一下

00:43.450 --> 00:46.970
一 自定义组件对应的样式文件

00:47.410 --> 00:50.770
只对该组件内的接连生效

00:51.010 --> 00:52.650
这点是我们刚才强调说过了

00:53.410 --> 00:56.610
冰写时 样式时 需要注意一下几点

00:56.610 --> 01:02.090
第一 组件和引用组件页面不能使用ID选择器

01:02.090 --> 01:05.010
属性选择器和标签名选择器

01:05.370 --> 01:07.490
请改用Class选择器

01:07.770 --> 01:10.170
这个是官方文档要求的

01:10.490 --> 01:11.530
那么为什么呢

01:11.530 --> 01:12.890
你可以来试一下

01:13.890 --> 01:15.370
你可以试找一下

01:15.890 --> 01:17.850
我们首先我们在

01:17.850 --> 01:20.370
无论你现在是任何的组件写法

01:20.410 --> 01:23.130
我们现在 比如说 随便打开哪一个

01:23.850 --> 01:27.830
我们把index打开

01:28.830 --> 01:29.990
我们把index打开

01:29.990 --> 01:30.950
你随便来做

01:33.300 --> 01:34.980
我们是我们前的引用

01:34.980 --> 01:35.940
我们不用管它

01:36.180 --> 01:38.140
我们把组件引进来就可以了

01:38.140 --> 01:40.180
我们把这个都可以删掉

01:42.730 --> 01:43.890
把这个删掉

01:45.450 --> 01:46.170
这个删掉

01:46.170 --> 01:47.130
就一个组件

01:47.530 --> 01:48.050
对吧

01:48.770 --> 01:49.730
先运行一下

01:49.730 --> 01:51.770
先表示正常能够显示

01:53.700 --> 01:54.180
对吧

01:54.180 --> 01:55.620
这是一个什么什么时间

01:55.780 --> 01:56.620
有一个按钮

01:57.460 --> 01:58.460
紧接着我们来看

01:58.820 --> 02:00.460
那么在这个上面

02:00.460 --> 02:02.100
我们说我们的样式

02:02.100 --> 02:03.860
都用的是这样的结构

02:04.580 --> 02:05.380
我们说过了

02:05.380 --> 02:07.380
在组件和引用组件里面

02:07.380 --> 02:08.860
均不能使用ID

02:09.180 --> 02:10.420
你如果尝试一下

02:10.420 --> 02:11.140
你用ID

02:12.540 --> 02:13.460
index

02:13.860 --> 02:15.540
相对的它的样式

02:15.540 --> 02:16.940
我们把它样式拿进来

02:17.540 --> 02:19.060
刚才一个样式保留

02:20.500 --> 02:21.220
点点Ga

02:22.300 --> 02:23.100
不是 点Ga

02:23.100 --> 02:24.860
在当前下面的index

02:25.060 --> 02:25.980
点CSS

02:28.900 --> 02:30.060
这里边我们改一改

02:30.060 --> 02:31.100
改成紧号

02:32.340 --> 02:32.820
对吧

02:32.940 --> 02:34.220
你这边不是ID吗

02:34.700 --> 02:34.940
好

02:34.940 --> 02:35.740
我们来看一下

02:37.750 --> 02:38.390
你看一下

02:38.390 --> 02:39.590
它的效果上面

02:39.790 --> 02:41.150
似乎是不是都有

02:41.590 --> 02:43.190
它的官网告诉你说

02:43.190 --> 02:44.270
我们改一个再看一下

02:44.270 --> 02:45.870
你万一怕你说这个不对

02:46.190 --> 02:47.030
我们改成

02:47.550 --> 02:48.870
自己改成绿色

02:55.350 --> 02:57.070
我们去打开我们的

02:57.590 --> 02:58.670
看 是不是

02:59.150 --> 02:59.670
你说老师

02:59.670 --> 03:01.630
它不是官网说不可以吗

03:01.630 --> 03:03.830
为什么这边我们是可以去使用的呢

03:04.150 --> 03:04.990
那么请注意

03:05.310 --> 03:07.270
官网上面所谓的不能用

03:07.270 --> 03:09.270
那么其实它是在后期

03:09.430 --> 03:11.830
我们应该是通过ID

03:11.990 --> 03:14.190
来获取当前的整个

03:14.310 --> 03:15.550
我们所谓的元素

03:15.910 --> 03:17.670
ID在我们的table中

03:17.670 --> 03:19.950
它主要是一种获取元素

03:19.950 --> 03:21.350
和标识元素的作用

03:21.590 --> 03:25.550
它不去执行它的一个样式操作

03:26.070 --> 03:28.630
那么由于从我们的功能上

03:28.630 --> 03:29.910
来分划分的话

03:29.910 --> 03:33.590
所以ID就不会再被我们的样式所使用

03:33.950 --> 03:36.590
但是如果你现在这么写

03:36.990 --> 03:39.310
为什么这边能够起作用

03:39.630 --> 03:41.110
那么我们的原因就在于

03:41.390 --> 03:43.590
因为对于微信小程序

03:43.590 --> 03:44.790
它的编译来讲

03:45.110 --> 03:47.910
它是可以认识ID

03:47.910 --> 03:50.550
是我们的一个选择器的一种分支

03:52.070 --> 03:52.870
懂这意思吧

03:53.150 --> 03:55.110
它可以知道ID是选择器的分支

03:55.350 --> 03:56.870
所以它为什么能够行

03:57.230 --> 03:59.110
我们的官网永远注意

03:59.110 --> 04:00.630
我们的table官网

04:00.630 --> 04:02.830
上面所给到你的所有内容

04:03.030 --> 04:05.430
它是针对于你往各个

04:05.430 --> 04:07.550
小程序生态圈和H5

04:07.550 --> 04:09.950
和我们所谓的Racknative

04:09.950 --> 04:11.350
进行扩展的

04:12.070 --> 04:13.230
那么所以我们讲

04:13.230 --> 04:15.990
小程序本身自己有二次编译的概念

04:15.990 --> 04:18.430
因为它只是完成了我们的第一层的

04:18.710 --> 04:19.670
这样的操作

04:19.830 --> 04:23.030
所以它在页面上显示是可以的

04:23.110 --> 04:26.190
但是它在我们整个的table里面

04:26.350 --> 04:28.470
它更多的是起到的是我们

04:28.790 --> 04:31.910
能够去识别和找到

04:31.910 --> 04:34.270
找寻当前这个节点的功能

04:34.270 --> 04:35.990
而并非它的一个

04:36.870 --> 04:38.630
样式的一个选择器

04:38.870 --> 04:41.190
所以官方是这么说明的

04:41.670 --> 04:42.910
那么我们这边的话

04:42.910 --> 04:44.710
我们就可以用classNet

04:44.870 --> 04:47.070
但是既然官方这么说了

04:47.070 --> 04:49.230
我们大家都遵循这个逻辑

04:49.310 --> 04:51.270
我们都用我们的classNet

04:51.270 --> 04:55.350
作为你现在的一个类选择器的一种使用方式

04:55.630 --> 04:56.990
这是我们说到第一个

04:57.350 --> 04:58.710
第二个我们说

04:58.710 --> 05:01.070
当然它也不能去使用标签名

05:01.550 --> 05:03.350
所谓的标签名我们看一下

05:03.870 --> 05:04.590
就是view

05:04.910 --> 05:06.550
这个view你要去写的话

05:06.550 --> 05:08.390
你在这里面直接把view写上

05:08.390 --> 05:09.670
这种称之为标签名

05:11.190 --> 05:12.270
我们看第二点

05:14.800 --> 05:17.200
第一点我们算刚才已经是演示过了

05:17.200 --> 05:18.080
告诉大家

05:18.360 --> 05:20.160
有同学如果没有讲这一点的话

05:20.160 --> 05:21.200
你自个儿去看的话

05:21.200 --> 05:22.120
你会觉得有点晕

05:22.480 --> 05:26.440
语言音就在于table的整个操作

05:26.440 --> 05:28.160
它不是针对于微信小程序

05:28.920 --> 05:30.480
第二个我们看这句话

05:31.000 --> 05:35.080
组件和引用组件页面使用后代选择器

05:35.080 --> 05:36.400
也就是我们的比如说

05:37.120 --> 05:39.480
点A 空格点B这样的情况

05:39.480 --> 05:42.800
在一些极端情况下会有非预期的表现

05:42.800 --> 05:45.640
所以尽量不要去使用这样的结构

05:46.480 --> 05:49.120
极端情况我们也没有官方也没有说

05:49.120 --> 05:50.200
极端情况是什么

05:50.200 --> 05:52.480
我们现在如果你简单用一下的话

05:52.480 --> 05:54.040
其实还能够正常显示

05:54.360 --> 05:55.200
但是它说了

05:55.200 --> 05:57.160
请尽量避免这样使用的话

05:57.640 --> 06:00.040
我们凡是可以单独定义一样式的

06:00.040 --> 06:01.120
我们就单独定义一个

06:01.520 --> 06:02.200
是这个逻辑

06:02.680 --> 06:04.160
第三我们往下看

06:04.720 --> 06:06.600
这边是紫元素选择器

06:06.600 --> 06:11.000
只能用于vue组件的紫元素节点之间

06:11.360 --> 06:14.480
用于其他组件可能导致非预期的情况

06:15.480 --> 06:15.920
看到吗

06:16.480 --> 06:17.120
那么我们讲

06:17.720 --> 06:20.520
与vue和它的紫节点之间

06:20.520 --> 06:21.600
这是什么概念

06:22.120 --> 06:24.600
是我们打开这个以后

06:24.600 --> 06:26.120
我们打开这个以后

06:26.520 --> 06:28.560
我们里面我们所看到的

06:28.560 --> 06:30.440
可以单独再写一个vue

06:37.230 --> 06:38.910
我们可以单独再写一个vue

06:39.430 --> 06:41.070
那么在这个vue里面

06:41.070 --> 06:43.030
我们主要是可以看到

06:43.950 --> 06:44.950
我们在这边写

06:46.910 --> 06:48.550
这边写上class name

06:49.950 --> 06:53.310
这边写上是inner index

06:53.310 --> 06:54.830
inner view我们这样写

06:57.040 --> 06:57.720
这边写上

06:58.560 --> 06:59.000
Hello

07:01.590 --> 07:02.910
inner view

07:04.190 --> 07:04.750
这样写

07:05.270 --> 07:06.470
然后我们这边就来

07:06.670 --> 07:07.870
我们这边就来的是

07:08.150 --> 07:12.590
主要我们写法上就符合刚才这个所谓的箭头

07:12.590 --> 07:14.070
也就是紫元素符

07:15.670 --> 07:16.470
紫元素符

07:17.310 --> 07:17.830
点

07:18.910 --> 07:21.750
我们写index

07:23.310 --> 07:26.390
箭头指向它的一级紫元素

07:26.390 --> 07:28.190
就是这个inner view

07:29.030 --> 07:30.910
它的点inner view

07:31.470 --> 07:32.230
这样写出来

07:33.070 --> 07:33.390
好

07:33.390 --> 07:34.430
这样写出来以后的话

07:34.470 --> 07:35.870
我们里面可以书写

07:35.870 --> 07:37.430
它里面的字体颜色

07:39.230 --> 07:39.790
红色

07:40.710 --> 07:41.470
这样就不要说

07:42.030 --> 07:43.150
我们来看一下效果

07:45.380 --> 07:46.100
这个是可以的

07:47.300 --> 07:51.660
所以它所谓的一级紫元素就指的是这个

07:52.300 --> 07:53.580
在它里面的一级

07:54.100 --> 07:56.620
而并非是你跑到这里边

07:56.620 --> 07:57.740
再跑到它的字节

07:57.740 --> 07:59.420
就是属性里面

07:59.420 --> 08:00.500
属性里面再往下跑

08:01.020 --> 08:01.660
这种概念

08:01.980 --> 08:04.540
所以我们这边理解官方的说法

08:05.540 --> 08:06.140
划条线

08:07.460 --> 08:08.780
紫元素选择器

08:08.780 --> 08:12.700
这个只能用于我们的view的组件

08:12.700 --> 08:13.820
及其紫节点中

08:14.820 --> 08:16.060
用于其他组件

08:16.060 --> 08:17.740
可能导致非预期的情况

08:17.900 --> 08:18.380
注意

08:18.860 --> 08:20.900
这种非预期情况

08:21.260 --> 08:23.020
我们无法去掩饰

08:23.420 --> 08:25.340
因为既然是非预期

08:25.340 --> 08:28.260
那我们怎么可能掩饰出这个预期呢

08:28.660 --> 08:30.300
所以我们强调一点

08:30.300 --> 08:31.700
就是我们把这句话

08:31.700 --> 08:33.340
两个都把它合在一起看

08:34.300 --> 08:37.500
这是兄弟后代节点

08:37.500 --> 08:39.180
和紫节点

08:39.740 --> 08:41.580
如果说你现在

08:41.820 --> 08:43.820
能够用其他方式表示的

08:43.820 --> 08:45.020
你就用其他的方式

08:45.180 --> 08:46.940
但如果说你一定用了它

08:46.940 --> 08:48.620
万一你程序中用了它

08:48.780 --> 08:50.060
其实也不是说

08:50.060 --> 08:51.740
马上会返回出一个错误

08:51.900 --> 08:52.620
OK吧

08:52.620 --> 08:54.300
我们就这样说明一下

08:54.460 --> 08:56.620
其实有时候我们也经常这么用

08:56.620 --> 08:57.180
对吧

08:57.260 --> 08:59.180
但是我们也没有看到

08:59.180 --> 09:00.620
有非常大的错误

09:00.620 --> 09:02.140
既然官方这么说了

09:02.380 --> 09:03.900
那么我们就

09:04.140 --> 09:05.340
如果有时候

09:05.500 --> 09:06.140
遵循的话

09:06.140 --> 09:07.500
我们还是遵循一下吧

09:08.060 --> 09:08.860
这个逻辑

09:09.020 --> 09:09.340
好

09:09.340 --> 09:11.420
我们来把它这个里面

09:11.420 --> 09:12.940
总结一下

09:12.940 --> 09:14.060
我们不需要

09:14.060 --> 09:14.860
我们不需要

09:14.860 --> 09:15.740
这个放着吧

09:16.380 --> 09:18.060
我们总结一下

09:19.100 --> 09:20.140
在样式上面

09:20.140 --> 09:22.380
特别是作为我们组件

09:22.380 --> 09:25.660
和外部使用的上面的一些特点

09:27.490 --> 09:29.490
我们在构道上面

09:29.970 --> 09:31.170
这边我们写一下

09:32.130 --> 09:35.010
就是这种写法

09:36.290 --> 09:37.330
第一种

09:47.650 --> 09:48.930
第一种写法

09:49.170 --> 09:50.530
第二种呢

09:50.530 --> 09:52.450
我们写出这个了

09:52.450 --> 09:58.670
我们用文档的写法来写

09:58.670 --> 10:03.380
第一种写法

10:03.380 --> 10:04.260
第二种写法

10:04.260 --> 10:06.660
这种叫做属性选择器

10:06.660 --> 10:09.630
第三种写法

10:09.630 --> 10:12.110
就是view啊

10:13.310 --> 10:15.710
或者是button啊

10:15.710 --> 10:17.390
这样的选择器

10:17.470 --> 10:20.670
称之为叫元素组件选择器

10:22.110 --> 10:26.900
那么这三个都是不可用

10:31.890 --> 10:33.410
然后再往下

10:33.410 --> 10:35.650
那么这边就是我们的节点

10:38.270 --> 10:39.390
就是后代节点

10:39.390 --> 10:40.110
我们称之为

10:44.180 --> 10:45.060
第一种呢

10:45.060 --> 10:47.620
就是直接后代

10:48.500 --> 10:49.940
第二种是称之为

10:51.220 --> 10:52.420
就是所有后代

10:52.900 --> 10:54.180
这两种的话呢

10:54.340 --> 10:54.980
我们说

10:55.380 --> 10:55.860
都

10:56.660 --> 10:57.380
用于

10:58.100 --> 10:58.580
地

11:00.100 --> 11:00.820
都用于

11:01.620 --> 11:02.100
view

11:04.820 --> 11:05.300
节点

11:08.850 --> 11:09.570
否则

11:09.570 --> 11:10.130
它说

11:12.800 --> 11:13.280
无效

11:18.560 --> 11:18.800
好

11:18.800 --> 11:19.600
我们来看一下

11:26.880 --> 11:27.760
先演示一下

11:27.760 --> 11:30.240
就是如果不在view上面的情况会怎么样

11:30.240 --> 11:30.400
啊

11:30.400 --> 11:31.200
我们这里边

11:31.200 --> 11:32.080
我们来做一下

11:32.080 --> 11:32.640
比如说

11:33.200 --> 11:34.480
我们做一个tester

11:39.380 --> 11:40.900
我们做一个tester

11:40.900 --> 11:41.380
对吧

11:41.380 --> 11:42.660
tester是文本标签

11:45.260 --> 11:46.300
然后里面我们写上

11:50.140 --> 11:50.940
outer tester

11:52.620 --> 11:53.580
然后在tester里面

11:53.580 --> 11:55.260
我们再套一个

11:57.280 --> 11:57.760
tester

12:00.370 --> 12:01.570
我们两个tester来看

12:02.450 --> 12:03.250
外部这个

12:03.250 --> 12:04.290
我们定成就是

12:08.110 --> 12:09.870
我们用即都用单引号方式

12:20.820 --> 12:21.700
这叫outer

12:24.380 --> 12:24.860
tester

12:30.610 --> 12:31.250
这边是

12:31.890 --> 12:32.370
inner

12:33.330 --> 12:33.810
tester

12:41.580 --> 12:42.140
好

12:42.140 --> 12:43.500
那么我们就这样写好了

12:43.500 --> 12:45.500
我们在它上面去试试看

12:46.060 --> 12:49.500
我们对于这个outer tester里面的inner tester来看一下

12:52.050 --> 12:55.650
你需要去理解官网所谓的不能是一个什么概念

12:58.580 --> 12:59.140
对吧

12:59.140 --> 13:01.140
我们直接把它这样去写

13:03.150 --> 13:06.190
这是不是这两个都不作用在我们的view上面了

13:06.190 --> 13:06.670
对吧

13:06.670 --> 13:07.950
两个都是tester上面了

13:08.510 --> 13:09.310
所以此时呢

13:09.310 --> 13:10.590
我们去写上颜色

13:10.590 --> 13:12.350
我们也把它变一个颜色

13:12.350 --> 13:14.430
看一下样式是否起作用就ok了

13:15.390 --> 13:15.870
然后呢

13:15.870 --> 13:16.590
注意哦

13:16.590 --> 13:17.390
这边还有一点

13:17.390 --> 13:19.070
经常有同学经常说到的就是

13:19.630 --> 13:21.390
它这两个文件都改过了

13:21.390 --> 13:22.750
然后它按contrast保存

13:22.750 --> 13:23.950
这不是在微信小程据中

13:24.030 --> 13:26.030
微信小程据中是你的点击保存

13:26.030 --> 13:27.550
它会把两个一起保存掉

13:27.550 --> 13:29.870
但是你如果说你现在在我们的

13:29.870 --> 13:31.950
整个这个vscode里面

13:31.950 --> 13:33.390
其实你没有办法做到这一点的

13:33.950 --> 13:34.510
ok吧

13:34.510 --> 13:35.310
所以这样的话呢

13:35.310 --> 13:36.990
导致的是你必须单个保存

13:36.990 --> 13:38.110
别一个保存了去运行

13:38.110 --> 13:39.630
包说我没有出效果

13:41.070 --> 13:41.390
好

13:41.390 --> 13:41.950
你来看一下

13:42.750 --> 13:44.910
我们看一下上面这个

13:44.910 --> 13:47.470
这里边是叫做inner tester对不对

13:48.270 --> 13:52.190
我们给了它的操作是看到out post下的inner tester

13:52.910 --> 13:54.110
我们再看一下

13:54.110 --> 13:56.830
它的内容是不是名称是对的

13:58.270 --> 13:59.310
然后inner tester

14:05.740 --> 14:06.700
inner tester

14:06.700 --> 14:09.900
我们确保你现在全是对的情况下

14:09.900 --> 14:10.460
我们来看

14:19.900 --> 14:20.860
主要不录

14:20.860 --> 14:22.540
但是你打开以后你眼睛看

14:24.720 --> 14:26.640
有蓝色出现吗

14:26.640 --> 14:28.160
有蓝色出现吗

14:28.160 --> 14:28.960
看到吗

14:28.960 --> 14:31.600
它后面的无论是test的部分

14:31.600 --> 14:32.800
都是红色

14:32.800 --> 14:34.800
红色是哪块的呢

14:34.880 --> 14:36.960
红色其实就是我上面的

14:36.960 --> 14:38.960
也就是对于view的操作

14:38.960 --> 14:40.640
现在你理解这个概念吗

14:40.640 --> 14:43.680
就是现在我们在刚刚上面所写的

14:43.680 --> 14:45.520
就是你如果用这样的方式

14:45.520 --> 14:47.120
你说老师那我换一下

14:47.120 --> 14:49.900
我直接这样

14:49.900 --> 14:53.950
可以尝试

14:53.950 --> 14:55.550
你注意一下

14:55.550 --> 14:56.590
这个的话呢

14:56.590 --> 14:57.710
它是可以的

14:57.710 --> 15:00.750
所以我们看到我们现在上面写的时候

15:00.750 --> 15:02.190
我们并没有把

15:02.190 --> 15:03.310
往上走

15:03.310 --> 15:06.510
我们并没有把所谓的这个方式

15:06.510 --> 15:10.990
我们把它给拿出来

15:10.990 --> 15:14.660
我们把这个方式拿出来

15:14.660 --> 15:18.640
所以我们把这上面

15:18.640 --> 15:23.390
可以把它分开来表述

15:23.390 --> 15:25.230
它是不可以的

15:25.230 --> 15:26.030
对吧

15:26.030 --> 15:28.670
那么对于后代决点

15:28.670 --> 15:32.990
这个是可以的

15:32.990 --> 15:34.750
OK 我们这边已经看到了

15:34.750 --> 15:36.510
所以我们本身来讲

15:36.510 --> 15:39.310
对于样式的内部使用

15:39.310 --> 15:42.190
我们除了我们现在正常的定义以外

15:42.190 --> 15:44.670
我们还能看到这样的一些格式

15:44.750 --> 15:47.150
使其让我们能够找到哪些

15:47.150 --> 15:48.750
那么这种方式呢

15:48.750 --> 15:53.150
我个人是建议不需要在你现在的代码中去书写

15:53.150 --> 15:55.870
使其让它完成了我们现在的一个

15:55.870 --> 15:58.910
别习惯性的往后去做了

15:58.910 --> 16:00.350
但是这种方式呢

16:00.350 --> 16:02.670
我个人觉得是可以用的

16:02.670 --> 16:03.390
OK吧

16:03.390 --> 16:04.510
这样的形式

16:04.510 --> 16:06.830
好 紧接着我们再往下

16:06.830 --> 16:07.950
那我们刚才说了

16:07.950 --> 16:09.310
我们再来看

16:09.310 --> 16:12.030
这是自定义组建样式的几个情况

16:12.030 --> 16:14.350
我们也做了一个简单的实例

16:14.350 --> 16:15.230
第二个

16:15.230 --> 16:16.910
我们做一个

16:16.910 --> 16:19.070
就是称之为

16:19.070 --> 16:23.550
我们写一个继承样式

16:23.550 --> 16:25.070
合为继承样式

16:25.070 --> 16:26.830
继承样式就是说

16:26.830 --> 16:28.990
你本身这个样式

16:28.990 --> 16:31.870
它是在组建外定义的

16:31.870 --> 16:35.470
但是组建内没有做任何操作的情况下

16:35.470 --> 16:39.070
它是可以直接有效果的

16:39.070 --> 16:42.030
这种咱们称之为叫继承样式

16:42.030 --> 16:43.950
对吧 你看我写的

16:43.950 --> 16:46.590
继承样式如FontColor

16:46.590 --> 16:48.510
它会从组建外就是副组建

16:48.510 --> 16:49.710
继承到组建内

16:49.710 --> 16:50.910
那继承了

16:50.910 --> 16:52.990
但是引用组建时

16:52.990 --> 16:54.350
在节点上书写无效

16:54.350 --> 16:55.710
这是两句话

16:55.710 --> 16:57.470
我们先看前半句

16:57.470 --> 16:59.790
FontColor会继承下来

16:59.790 --> 17:02.830
我们做一个演示

17:02.830 --> 17:03.870
我们直接做个演示

17:03.870 --> 17:04.350
然后呢

17:04.350 --> 17:07.070
首先我们在做组建

17:07.070 --> 17:10.430
我们先拿一个组建过来

17:10.430 --> 17:12.590
组建有个修炭 对不对

17:12.590 --> 17:13.790
修炭本身在这儿

17:13.790 --> 17:16.030
我们外面去定义它几个

17:16.030 --> 17:17.550
这是外部组建

17:17.550 --> 17:20.860
我们定什么

17:20.860 --> 17:21.580
字体

17:21.580 --> 17:25.420
我们定一下字体

17:25.420 --> 17:27.340
外部组建

17:27.340 --> 17:30.060
外部组建的字体定义

17:30.060 --> 17:31.820
你定在哪个上面

17:31.820 --> 17:33.660
那么这需要说明一下

17:33.660 --> 17:36.140
我们把它整个的放在了

17:36.140 --> 17:37.900
这个叫做view里面

17:37.900 --> 17:40.860
所以我们先定在index里面

17:40.860 --> 17:42.300
当然外部组建本身

17:42.300 --> 17:44.540
也可以有一个所谓的默认属性

17:44.540 --> 17:47.100
默认的样式定义

17:47.100 --> 17:48.300
我们定在它上面

17:48.300 --> 17:49.420
我们找到它

17:49.420 --> 17:50.700
这里边就有对吧

17:50.700 --> 17:53.660
我们就用这个green 绿色

17:53.660 --> 17:54.700
然后紧接着

17:54.700 --> 18:00.820
我们去到修Clock里面

18:00.820 --> 18:01.620
打开

18:01.620 --> 18:06.660
进去

18:06.660 --> 18:08.180
这边是不是有文字

18:08.180 --> 18:09.940
这边是不是有文字

18:09.940 --> 18:12.340
那此时我在不做任何情况下

18:12.340 --> 18:14.180
你记得我们前面呈现

18:14.180 --> 18:16.260
就是刚刚在做

18:16.260 --> 18:17.540
就是那个样式

18:17.540 --> 18:18.260
外部样式

18:18.260 --> 18:20.100
那个子父样式操作手

18:20.100 --> 18:23.620
还记得这两个字是什么颜色吗

18:23.620 --> 18:25.220
你还记得吗

18:25.220 --> 18:26.020
如果不记得

18:26.020 --> 18:27.860
我们看一下

18:27.860 --> 18:29.460
是不是绿色

18:29.460 --> 18:30.980
先中里面找一下

18:30.980 --> 18:33.060
我里面有没有对这个内容

18:33.060 --> 18:35.220
首先我里面有没有影样式

18:35.220 --> 18:36.340
没有样式

18:36.340 --> 18:37.060
对吧

18:37.060 --> 18:37.940
说明的是

18:37.940 --> 18:39.700
这几个内容完全

18:39.700 --> 18:42.820
它是靠自主的一个样式结构

18:42.820 --> 18:44.980
或者称之为颜色显示出来的

18:44.980 --> 18:46.020
那么这样的话

18:46.020 --> 18:47.140
导致的是

18:47.140 --> 18:48.740
我现在这几个的颜色

18:48.740 --> 18:50.020
是从哪来的

18:50.100 --> 18:51.220
我们外面看一下

18:51.220 --> 18:54.100
外面不是咱们定义了一个绿色吗

18:54.100 --> 18:55.140
我们改一下

18:55.140 --> 18:59.460
我们改成蓝色

18:59.460 --> 19:00.500
保存

19:00.500 --> 19:04.160
此时你再打开看一下

19:04.160 --> 19:05.840
是不是它变蓝色了

19:05.840 --> 19:06.800
这一句话

19:06.800 --> 19:08.000
那就意味着

19:08.000 --> 19:09.040
这个内容

19:09.040 --> 19:12.400
它是从外部继承进来的

19:12.400 --> 19:13.840
理解这个逻辑

19:13.840 --> 19:15.280
继承的概念就在于

19:15.280 --> 19:16.000
外部定义

19:16.000 --> 19:17.760
内部不需要再做任何的操作

19:17.760 --> 19:20.480
它直接可以把它拿到内部来进行显示

19:20.480 --> 19:23.120
同时我们的font字体也是一样

19:23.200 --> 19:24.080
我们在这上面

19:24.080 --> 19:26.720
依然可以定义font

19:26.720 --> 19:28.480
比如说字体

19:28.480 --> 19:29.280
我们给出

19:29.280 --> 19:34.080
比如说36rpx

19:34.080 --> 19:36.320
你可以给出这样的一个大字体

19:36.320 --> 19:37.200
那么这样的话

19:37.200 --> 19:38.000
它呈现的时候

19:38.000 --> 19:39.920
对它内部来讲

19:39.920 --> 19:40.880
依然会变大

19:40.880 --> 19:42.720
36其实就18

19:42.720 --> 19:44.880
其实就大了一点点

19:44.880 --> 19:46.080
这样的话

19:46.080 --> 19:47.040
我们就完成了

19:47.040 --> 19:49.600
一个所谓的继承的概念的认识

19:49.600 --> 19:51.360
并且继承的使用

19:51.440 --> 19:53.360
为什么会有这样的逻辑存在呢

19:53.360 --> 19:55.360
因为无论是你自定义组建

19:55.360 --> 19:56.720
还是外部的呈现

19:56.720 --> 19:58.480
它其实都希望的是

19:58.480 --> 20:00.480
你页面保持统一的风格

20:00.480 --> 20:02.800
所以对于一些字体颜色

20:02.800 --> 20:04.960
这样的一些基础概念的话

20:04.960 --> 20:05.840
系统给到了

20:05.840 --> 20:07.360
就是只要一边设置

20:07.360 --> 20:09.280
然后所有页面中的呈现

20:09.280 --> 20:12.080
都会使用同一边码形式呈现

20:12.080 --> 20:14.080
除非是你特别有需要

20:14.080 --> 20:16.160
所以你可以在当前这个位置上

20:16.160 --> 20:17.840
你再做一个修改

20:17.840 --> 20:18.640
是这个逻辑

20:18.640 --> 20:19.680
OK吧

20:19.680 --> 20:22.000
这是属于在系统设计上面

20:22.000 --> 20:23.600
所要给到的一点

20:23.600 --> 20:24.240
紧接着

20:24.240 --> 20:26.160
我们再往下来说

20:26.160 --> 20:27.760
继承样式

20:27.760 --> 20:30.720
那么这边额外要说一下

20:30.720 --> 20:32.000
既然是继承

20:32.000 --> 20:34.080
那么这里有一个点要说一下

20:34.080 --> 20:40.080
是什么

20:40.080 --> 20:41.360
不是外部样式

20:41.360 --> 20:43.120
是我们并不是这个

20:43.120 --> 20:44.640
是我们在APP点

20:44.640 --> 20:46.800
全局样式上面的一个设定

20:46.800 --> 20:48.000
我们来看

20:48.000 --> 20:49.200
全局样式

20:49.200 --> 20:52.880
是指我们在没有进到页面前提下

20:52.880 --> 20:54.640
我们在APP点

20:54.640 --> 20:56.080
看这边APP点

20:56.080 --> 20:57.360
CSS

20:57.360 --> 20:59.280
这个文件中的设定

20:59.280 --> 21:00.080
这个文件

21:00.080 --> 21:02.400
我们称之为叫全局文件

21:02.400 --> 21:05.120
它的样式能够在你页面中

21:05.120 --> 21:07.440
没有定义的时候全部采取

21:07.440 --> 21:09.280
这里的格式形式

21:09.280 --> 21:11.200
是这样的形式存在

21:11.200 --> 21:12.800
那么我们讲一下

21:12.800 --> 21:15.440
这个样式在这边的定义

21:15.440 --> 21:18.000
我们说除继承样式外

21:18.000 --> 21:19.680
除继承样式外

21:19.680 --> 21:20.720
组件

21:20.720 --> 21:21.680
包括样式

21:21.680 --> 21:23.440
在这个里面写的页面

21:23.440 --> 21:27.680
均没有办法对自定义组件起效果

21:27.680 --> 21:28.880
记住这一点

21:28.880 --> 21:30.080
我们来看一下大家

21:30.080 --> 21:32.880
我把这里面的这个删掉

21:32.880 --> 21:34.640
我把它给删了

21:34.640 --> 21:36.320
它的字体也删了

21:36.320 --> 21:37.440
这样的话

21:37.440 --> 21:39.280
我们对于index来讲

21:39.280 --> 21:42.320
它里面是没有任何的字体颜色的

21:42.320 --> 21:43.520
它就是呈现黑色

21:43.520 --> 21:44.320
对不对

21:44.320 --> 21:45.440
我把外面一个

21:45.440 --> 21:47.440
也把它样式给删了

21:47.440 --> 21:49.680
我们看到的效果依然是黑色

21:49.680 --> 21:53.840
但是我们想从最大的上面来定

21:53.840 --> 21:54.320
对吧

21:54.320 --> 21:54.720
黑色

21:54.720 --> 21:56.000
不用管它

21:56.000 --> 21:56.720
好

21:56.720 --> 21:57.840
它都删了以后

21:57.840 --> 22:02.080
我现在跑到app.css里面来

22:02.080 --> 22:04.240
我在这里面咱们去定一下

22:04.240 --> 22:04.960
比如说

22:04.960 --> 22:10.160
我们定的是所有的

22:10.160 --> 22:13.040
我们写view

22:13.040 --> 22:14.240
所有的view

22:14.240 --> 22:17.120
我们在里面去定义它的颜色

22:17.120 --> 22:19.680
我们写的是

22:19.680 --> 22:23.230
这个颜色变成是红色

22:23.230 --> 22:27.650
那你来看一下效果

22:27.650 --> 22:30.610
所有的颜色变成红色

22:30.610 --> 22:32.290
所有的view

22:32.290 --> 22:32.850
好

22:32.850 --> 22:34.770
那么这是属于什么

22:34.770 --> 22:35.730
继承样式

22:35.730 --> 22:37.010
刚才讲过吗

22:37.010 --> 22:37.810
继承样式

22:37.810 --> 22:39.330
它可以全部采兴效果

22:39.330 --> 22:44.130
我们来做fault给出42rpx

22:44.130 --> 22:45.410
这是继承样式

22:45.410 --> 22:50.300
再看一下大小

22:50.300 --> 22:51.660
其实42也不够大

22:51.660 --> 22:52.620
但现在不用管它

22:52.620 --> 22:54.860
我们说fault size吧

22:54.860 --> 23:00.530
我们这样它应该会变得很大

23:00.530 --> 23:01.010
对吧

23:01.010 --> 23:01.810
OK

23:01.810 --> 23:02.930
那么紧接着再来看

23:02.930 --> 23:06.850
因为它还是属于继承样式

23:06.850 --> 23:10.370
接下去我们去做其他的一些设定

23:10.370 --> 23:11.170
比如说

23:11.170 --> 23:15.360
我们来做一下

23:15.360 --> 23:16.160
light height

23:16.160 --> 23:23.940
航高也做42rpx

23:23.940 --> 23:26.020
你看有效果吗

23:26.020 --> 23:28.420
但航高还是现在这里边

23:28.420 --> 23:30.980
和刚才设议不设没有区别

23:31.060 --> 23:33.540
所以我们讲的方式就在这了

23:33.540 --> 23:35.700
这边我们要额外多说一句话

23:35.700 --> 23:37.540
就是

23:37.540 --> 23:41.540
我们依然在我们的index里面

23:41.540 --> 23:43.860
这边我们额外去说一句

23:43.860 --> 23:56.320
就是在全局app.css文件中的设定

23:56.320 --> 24:00.160
只有继承样式

24:00.160 --> 24:07.300
可以被所有页面使用

24:07.300 --> 24:13.900
可以被所有页面使用

24:13.900 --> 24:19.680
包括组件

24:19.680 --> 24:22.240
其他的对

24:22.240 --> 24:28.640
主要自定义组件无效

24:28.640 --> 24:30.640
对自定义组件无效

24:30.640 --> 24:33.040
那么我在当前页面中

24:33.040 --> 24:34.240
我view之间的

24:34.240 --> 24:35.360
我们做一个

24:35.360 --> 24:37.520
比如说这两个

24:37.520 --> 24:39.680
我们去做它一个样式的话

24:39.680 --> 24:42.160
它是有效果的

24:42.160 --> 24:47.360
这个只对自定义组件无效

24:47.360 --> 24:48.880
你如果自行设定其他的

24:48.880 --> 24:49.600
它是有效的

24:49.600 --> 24:51.520
那么这边我们就说一下吧

24:51.520 --> 24:54.940
这个就比较简单

24:54.940 --> 24:56.780
它其实可以把它想象成

24:56.780 --> 24:57.900
什么意思呢

24:57.900 --> 25:01.440
你回到我们的

25:01.440 --> 25:04.480
那个微信小程序来

25:04.480 --> 25:05.200
想一下

25:05.200 --> 25:07.520
微信小程序里面的这部分内容

25:07.520 --> 25:09.040
component

25:09.040 --> 25:11.280
微信小程序里面的每个component

25:11.280 --> 25:14.320
都有各自的它的样式结构

25:14.320 --> 25:15.360
由于我们本身呢

25:15.360 --> 25:16.320
没有在这边去写

25:16.320 --> 25:17.520
因为它是有个json

25:17.520 --> 25:20.000
jswxm和wxss

25:20.000 --> 25:23.760
它每一个样式都进行了单独的封装

25:23.760 --> 25:25.120
那么此时

25:25.120 --> 25:27.840
如果你希望它外部影响内部的话

25:27.840 --> 25:29.920
那么你可以在它的

25:29.920 --> 25:31.280
引用端套做

25:31.280 --> 25:34.960
但是你要去通过我们的wxss的情况来做

25:34.960 --> 25:38.800
那么这时候内部样式就不允许了

25:38.800 --> 25:42.160
这个是在微信里面所要求到的

25:42.160 --> 25:43.120
当然

25:43.120 --> 25:44.400
我们说的

25:44.400 --> 25:45.920
继承样式除外

25:45.920 --> 25:49.280
因为继承样式它的渗透情况是非常大的

25:49.280 --> 25:49.920
这点内容呢

25:49.920 --> 25:51.920
我们这边就额外说一下就可以

25:51.920 --> 25:52.960
紧接着

25:52.960 --> 25:58.260
这是属于我们的一个叫做

25:58.260 --> 25:59.300
继承样式

25:59.300 --> 26:01.860
继承样式的使用

26:01.860 --> 26:03.220
低前一把

26:03.220 --> 26:04.340
前一把

26:04.340 --> 26:05.700
但是在引用时

26:05.700 --> 26:08.180
在组件上书写class内无效

26:08.180 --> 26:09.780
这点是什么意思呢

26:09.780 --> 26:10.980
这点是指的是

26:10.980 --> 26:15.700
如果我外部需要给到它内部这个值的时候

26:15.700 --> 26:18.500
如果说我外部需要给到它这个值的时候

26:18.500 --> 26:22.260
那么你不能直接通过引用的方式

26:22.260 --> 26:25.300
完成组件上的class内的书写

26:25.300 --> 26:27.780
你不能直接完成class内的书写

26:27.780 --> 26:29.140
这点要求

26:29.140 --> 26:31.220
那么这个其实和我们的

26:31.220 --> 26:32.020
外部使用

26:32.020 --> 26:33.220
这是解决办法

26:33.220 --> 26:35.780
它其实就是外部使用方式有关

26:35.780 --> 26:36.020
好

26:36.020 --> 26:37.780
我们来做这个实例

26:37.780 --> 26:38.500
给大家看一下

26:38.500 --> 26:39.540
什么叫做

26:39.540 --> 26:48.400
引用组件时在组件节点上书写class内无效

26:48.400 --> 26:49.920
我们打开

26:49.920 --> 26:52.720
我们打开我们的程序

26:52.720 --> 26:53.440
过多

26:53.440 --> 26:54.080
我们这样

26:54.080 --> 26:56.880
我们单独建一个页面和自定义组件出来

26:56.880 --> 26:57.760
这样做起来的话

26:57.760 --> 26:59.040
大家可以看得清晰一点

26:59.040 --> 27:01.040
我们单独做一个页面

27:01.040 --> 27:06.320
我们把它称作mypager

27:06.320 --> 27:11.500
我们叫做mypager

27:11.500 --> 27:16.140
建了一个

27:16.140 --> 27:20.000
pager.gsx

27:20.000 --> 27:21.600
继续

27:21.600 --> 27:26.500
mypager.gcss

27:26.500 --> 27:27.060
在这里面

27:27.060 --> 27:30.500
咱们把这个结构写一下

27:30.500 --> 27:31.380
import

27:31.380 --> 27:34.190
terror

27:34.190 --> 27:44.290
component

27:44.290 --> 27:47.060
terror

27:47.060 --> 27:49.220
import

27:49.220 --> 27:52.100
view

27:52.100 --> 27:56.900
test

27:56.900 --> 27:59.700
terror.gs

27:59.700 --> 28:03.300
components

28:03.300 --> 28:04.900
expert

28:04.900 --> 28:07.300
default

28:07.300 --> 28:09.140
class

28:09.140 --> 28:10.020
我们写上

28:10.020 --> 28:16.500
它叫做mypager

28:16.500 --> 28:18.740
自定义组件

28:18.820 --> 28:19.620
然后的话呢

28:19.620 --> 28:22.340
我们把它的

28:22.340 --> 28:25.470
extends写出来

28:25.470 --> 28:31.490
components

28:31.490 --> 28:33.970
我们以大写来写

28:33.970 --> 28:35.570
这样的话我们

28:35.570 --> 28:40.130
外部把它重新另一下

28:40.130 --> 28:49.100
重新命名一下对吧

28:49.100 --> 28:50.460
这是页面

28:50.460 --> 28:51.980
我们页面的话还是用这个

28:51.980 --> 29:00.620
我们组件的方式我们去做这个

29:00.620 --> 29:01.420
好

29:01.420 --> 29:02.940
我们就直接往里写了

29:02.940 --> 29:07.820
接下去

29:07.820 --> 29:16.260
constructor

29:16.260 --> 29:19.600
第二步

29:19.600 --> 29:21.280
component

29:22.240 --> 29:23.280
did

29:23.280 --> 29:27.070
mount

29:27.070 --> 29:29.470
第三步

29:29.470 --> 29:32.530
randow

29:32.530 --> 29:39.870
return

29:39.870 --> 29:43.780
view

29:43.780 --> 29:46.100
view

29:46.100 --> 29:49.020
这是页面

29:49.020 --> 29:49.580
对吧

29:49.580 --> 29:51.180
这是一个页面

29:51.180 --> 29:53.340
然后它说接四文件

29:53.340 --> 29:59.040
mypager没有被引用到

29:59.040 --> 29:59.680
没关系

29:59.680 --> 30:07.390
我们在这边把它写上

30:07.390 --> 30:14.700
改改

30:14.700 --> 30:16.220
mypager引用到了

30:16.220 --> 30:19.710
紧接着做第二件事

30:19.710 --> 30:20.670
建立一个

30:20.670 --> 30:22.510
我们的

30:22.510 --> 30:24.030
组件

30:24.030 --> 30:25.390
节目录

30:25.390 --> 30:26.830
我们把这个组件呢

30:26.830 --> 30:28.270
我们起名叫做

30:28.270 --> 30:29.710
customer

30:29.710 --> 30:36.100
我们起名叫customer

30:36.100 --> 30:41.820
customer compote

30:41.820 --> 30:50.690
建立

30:50.690 --> 30:55.040
在建立文件

30:55.040 --> 30:59.900
customer compote

30:59.900 --> 31:01.100
点

31:01.100 --> 31:03.260
jxx

31:03.260 --> 31:06.830
两个文件

31:06.830 --> 31:08.190
紧接着这里边的结构

31:08.190 --> 31:10.430
和我们刚才这个paders

31:10.430 --> 31:12.350
保持一致

31:12.350 --> 31:13.230
只不过

31:13.230 --> 31:19.570
改它

31:19.570 --> 31:21.410
compote

31:21.410 --> 31:22.050
对吧

31:22.130 --> 31:23.090
这样子

31:23.090 --> 31:23.810
然后呢

31:23.810 --> 31:29.070
它也引入样式

31:29.070 --> 31:35.620
当前文件下的customer compote

31:35.620 --> 31:40.300
css

31:40.300 --> 31:42.060
然后对于首页来讲

31:42.060 --> 31:43.100
它也是

31:43.100 --> 31:47.740
引入

31:47.740 --> 31:55.600
当前文件下的mypager.css

31:55.600 --> 31:56.240
ok

31:56.240 --> 31:57.920
现在全部能够呈现

31:57.920 --> 31:58.400
然后呢

31:58.400 --> 32:00.160
我们应该看到的是

32:00.160 --> 32:00.960
pader里面

32:00.960 --> 32:03.920
就叫做mypager

32:03.920 --> 32:04.560
对吧

32:04.640 --> 32:05.760
应该mypager

32:05.760 --> 32:06.720
同时呢

32:06.720 --> 32:09.040
它应该去引入我们现在的

32:09.040 --> 32:11.120
一个叫做customer

32:11.120 --> 32:12.640
component的这个

32:12.640 --> 32:13.200
所以

32:13.200 --> 32:15.360
再来做

32:15.360 --> 32:18.400
它做一个组件的引入

32:18.400 --> 32:20.800
咱们叫做

32:20.800 --> 32:21.760
呃

32:21.760 --> 32:22.320
取名

32:22.320 --> 32:23.600
我们取一个名称

32:23.600 --> 32:24.320
使用它一下

32:24.320 --> 32:29.550
就叫customer comp

32:29.550 --> 32:30.990
customer

32:30.990 --> 32:34.190
然后后面我们写上的是

32:34.190 --> 32:36.190
comp

32:36.190 --> 32:37.550
customer comp

32:37.630 --> 32:38.670
from

32:38.670 --> 32:44.270
它是来自于点点杠

32:44.270 --> 32:45.710
呃点点杠

32:45.710 --> 32:46.910
点点杠

32:46.910 --> 32:48.910
然后的话

32:48.910 --> 32:50.990
component

32:50.990 --> 32:56.080
component下面的

32:56.080 --> 32:57.360
mypagers对吧

32:57.360 --> 33:00.240
点点杠点点杠来自

33:00.240 --> 33:01.440
component

33:01.440 --> 33:03.920
小写啊

33:03.920 --> 33:09.680
下面的customer

33:09.680 --> 33:10.000
好

33:10.000 --> 33:11.520
引入进来

33:11.520 --> 33:12.320
引入进来以后

33:12.320 --> 33:13.520
我们在这里边

33:13.520 --> 33:14.960
依然是可以显示

33:14.960 --> 33:19.040
我们把它拿出来

33:19.120 --> 33:20.080
然后呢对着它

33:20.080 --> 33:21.120
我们再执行

33:21.120 --> 33:22.720
我们现在的一个显示

33:22.720 --> 33:28.540
这叫做

33:28.540 --> 33:30.060
呈现

33:30.060 --> 33:31.100
它说customer

33:31.100 --> 33:33.580
gxgx没有被引用到

33:33.580 --> 33:34.860
保存

33:34.860 --> 33:35.820
咱们看一下

33:35.820 --> 33:37.260
这里边有一个小错

33:37.260 --> 33:41.710
我们看一下是什么问题

33:41.710 --> 33:42.910
它说是路径啊

33:42.910 --> 33:45.230
这个路径我们对照一下

33:45.230 --> 33:46.430
我们查一下

33:46.430 --> 33:48.110
我们路径的话

33:48.110 --> 33:49.070
少了一层啊

33:49.070 --> 33:49.870
这是到目录

33:49.870 --> 33:52.670
我们再往下一层

33:52.670 --> 33:53.470
再往下一层

33:53.470 --> 33:54.030
因为

33:54.030 --> 33:56.510
我们看到component下面的话

33:56.510 --> 33:57.870
应该是一个目录

33:57.870 --> 33:58.430
对吧

33:58.430 --> 34:00.430
目录下面再次到这一级

34:00.430 --> 34:01.950
所以应该是两个

34:01.950 --> 34:02.750
肯定是保存

34:02.750 --> 34:06.530
然后我们现在来看一下页面

34:06.530 --> 34:07.490
出来了吧

34:07.490 --> 34:09.570
一个是当前页面的

34:09.570 --> 34:11.490
一个customer component的

34:11.490 --> 34:12.450
然后注意啊

34:12.450 --> 34:14.050
这边一定要是component

34:14.050 --> 34:15.810
这边也是component

34:15.810 --> 34:18.130
如果你写成component的话

34:18.130 --> 34:19.970
那么编译的时候

34:19.970 --> 34:21.170
这时候是没问题的

34:21.170 --> 34:22.770
但是运行的时候的话

34:22.770 --> 34:24.610
它会给你抱一个错

34:26.130 --> 34:27.010
你看到吗

34:27.010 --> 34:27.810
它抱一个错

34:27.810 --> 34:30.290
它说是找不到component

34:30.290 --> 34:31.090
这样的话

34:31.090 --> 34:32.370
大家只需要去注意一下

34:32.370 --> 34:34.210
比如说把这个改过来

34:34.210 --> 34:36.130
再看一下我们的组件内

34:36.130 --> 34:38.130
是不是这个也是一样

34:38.130 --> 34:38.370
好

34:38.370 --> 34:40.130
当把这几个你都解决了

34:40.130 --> 34:40.850
都可以了

34:40.850 --> 34:42.290
也就意味着你页面中

34:42.290 --> 34:44.130
其实都能看到我们刚才这个

34:44.130 --> 34:45.650
mypader和这个了

34:45.650 --> 34:48.290
为什么红色字体想得起来吗

34:48.290 --> 34:50.450
因为我在app点这里边

34:50.450 --> 34:51.250
我们看一下

34:51.250 --> 34:52.450
我们把

34:52.450 --> 34:53.090
不是这个

34:53.090 --> 34:54.530
我们在app最高的

34:54.530 --> 34:55.810
最高的这一层里面

34:55.810 --> 34:56.930
是不是设过了

34:56.930 --> 34:59.410
view里面的都以这样的方式呈现

34:59.410 --> 35:00.130
OK吧

35:00.130 --> 35:00.610
好

35:00.610 --> 35:03.890
那么我们做好了一个这个以后的话

35:03.890 --> 35:06.210
我们来尝试给大家演示一下

35:06.210 --> 35:07.650
所谓的外部样式类

35:07.650 --> 35:09.090
不能直接在外部影

35:09.090 --> 35:11.410
直接classnet的影用关系

35:11.410 --> 35:13.090
classnet影用关系是这样

35:13.090 --> 35:16.210
首先我在外部的mypader里边

35:16.210 --> 35:18.450
去定义我的一个样式

35:18.450 --> 35:21.490
我把我的

35:21.490 --> 35:23.250
整个的全局的删掉

35:23.250 --> 35:24.930
这样的话大家看起来会知道

35:24.930 --> 35:27.570
其实这里面本来什么都没有

35:27.570 --> 35:29.890
然后在mypader点css里面

35:29.890 --> 35:31.330
我们定一下

35:31.330 --> 35:31.890
red

35:31.890 --> 35:34.850
我们定成一个红色字体

35:34.850 --> 35:39.170
然后给它设定一个red

35:39.170 --> 35:41.250
我们定一个红色字体

35:41.250 --> 35:43.730
当你这样红色字体定好以后的话

35:43.730 --> 35:45.250
那么我们页面中

35:45.250 --> 35:46.210
我们来看

35:46.210 --> 35:48.930
回到我们现在paders里面来

35:48.930 --> 35:52.770
我们可以在这边写上classnet

35:52.770 --> 35:53.490
对吧

35:53.490 --> 35:54.130
这个的话

35:54.130 --> 36:03.520
然后我们定上红色字体

36:03.520 --> 36:08.100
看一下mypader

36:08.100 --> 36:08.820
有了

36:08.820 --> 36:10.420
由于继承性的关系

36:10.420 --> 36:12.740
它也会进去

36:12.740 --> 36:13.540
OK吧

36:13.540 --> 36:14.900
这个是OK的

36:14.900 --> 36:16.420
那么再来

36:16.420 --> 36:18.900
那么如果说我没有它

36:18.900 --> 36:20.500
你跟着我来看

36:20.500 --> 36:22.980
如果说我没有它

36:22.980 --> 36:25.300
我直接对于它来说

36:25.300 --> 36:31.330
我给它传一个classnet

36:31.330 --> 36:34.930
我写上red test

36:35.010 --> 36:38.130
我以这样的方式传

36:38.130 --> 36:40.770
那么我在程序内部

36:40.770 --> 36:43.330
我想使用这样的一个属性

36:43.330 --> 36:45.090
来完成我的展示

36:45.090 --> 36:47.570
我们跑到custom里边去

36:47.570 --> 36:49.730
你是不是接收我现在过来的这个

36:49.730 --> 36:51.250
然后你在这儿

36:51.250 --> 36:54.860
你去做一个接收

36:54.860 --> 36:56.060
classnet

36:56.060 --> 36:58.220
等于

36:58.220 --> 37:01.020
用属性的方式接收

37:01.020 --> 37:04.860
property.classnet

37:04.940 --> 37:06.780
你就这样接收

37:06.780 --> 37:09.260
那么我们先可以给它

37:09.260 --> 37:11.500
做一个默认值的

37:11.500 --> 37:13.980
默认属性的定义

37:13.980 --> 37:16.220
我们在最前面

37:16.220 --> 37:20.500
我们可以定义一个

37:20.500 --> 37:22.660
static

37:22.660 --> 37:24.740
default

37:24.740 --> 37:26.980
preparedness

37:26.980 --> 37:32.960
我们可以给它个默认属性

37:32.960 --> 37:34.000
多少

37:34.000 --> 37:36.160
空

37:36.160 --> 37:37.600
就这样写

37:37.600 --> 37:38.240
OK

37:38.240 --> 37:39.760
当你这样写好以后的话

37:39.760 --> 37:40.720
我们来看一下

37:40.720 --> 37:44.860
这个是否还会成效果

37:44.860 --> 37:46.060
黑的吧

37:46.060 --> 37:48.060
外面mypader这个肯定黑

37:48.060 --> 37:49.660
因为我没有对它进行央视

37:49.660 --> 37:51.260
但是内部这个呢

37:51.260 --> 37:52.300
它为什么是黑的

37:52.300 --> 37:53.660
它没有效果吗

37:53.660 --> 37:54.860
我们把它放上来

37:54.860 --> 37:57.260
我们这样切一下

37:57.260 --> 37:59.420
我们来看圆码

37:59.420 --> 38:00.860
因为缓存的问题

38:00.860 --> 38:02.060
这是

38:02.060 --> 38:04.140
你来看内部custom

38:04.140 --> 38:05.980
你注意上面没有

38:05.980 --> 38:08.300
它一样好像没有传内

38:08.300 --> 38:09.100
对吧

38:09.100 --> 38:11.180
你再打开

38:11.420 --> 38:12.460
你会发现

38:12.460 --> 38:15.340
这边它写了一个red tester

38:15.340 --> 38:17.580
这边好像写了一个red tester

38:17.580 --> 38:20.940
但是它在customercomper里面

38:20.940 --> 38:22.620
这个时候的red tester

38:22.620 --> 38:24.060
我们在整个页面中

38:24.060 --> 38:26.380
我们这边的确有

38:26.380 --> 38:27.500
我们在这打开

38:27.500 --> 38:28.700
我们这的确有

38:28.700 --> 38:30.140
但是它不起作用

38:30.140 --> 38:32.220
这点就是我们说到的

38:32.220 --> 38:34.940
你不能在这个环节上面

38:34.940 --> 38:36.940
对着紫元素

38:36.940 --> 38:38.540
对着紫元素在调的时候

38:38.540 --> 38:40.060
给它class name

38:40.140 --> 38:43.020
这个是显示不出来的

38:43.020 --> 38:45.180
那么怎么样去做呢

38:45.180 --> 38:46.700
那么来看一下

38:46.700 --> 38:47.500
首先

38:47.500 --> 38:48.860
我们还是确保

38:48.860 --> 38:51.660
我们有一个red tester在外部定义

38:51.660 --> 38:52.620
然后呢

38:52.620 --> 38:55.100
我们找到我们的引用方

38:55.100 --> 38:56.780
在引用方的位置上面

38:56.780 --> 38:57.420
注意啊

38:57.420 --> 38:59.020
一定是引用方上面

38:59.020 --> 38:59.900
我们看到

38:59.900 --> 39:03.740
现在我们给它的值的时候

39:03.740 --> 39:04.780
这个内容

39:04.780 --> 39:06.700
你需要切换

39:06.700 --> 39:08.700
我们不能直接使用

39:08.700 --> 39:09.820
托风式命名

39:09.820 --> 39:14.300
比如说你写上my class

39:14.300 --> 39:16.860
写上自定义的一个my class

39:16.860 --> 39:18.140
保存好

39:18.140 --> 39:20.060
它叫做red tester

39:20.060 --> 39:21.340
然后紧接着

39:21.340 --> 39:24.140
再去到我们的组件里面

39:24.140 --> 39:25.820
去到组件里面

39:25.820 --> 39:27.100
组件里面的时候呢

39:27.100 --> 39:28.380
我们要做几件事

39:28.380 --> 39:29.660
第一件事

39:29.660 --> 39:31.740
我们static

39:31.740 --> 39:33.660
你需要去定义一下

39:33.660 --> 39:36.060
我们的有一个参数

39:36.060 --> 39:37.100
你要定一个参数

39:37.100 --> 39:41.820
叫做ex external

39:41.820 --> 39:45.100
external class

39:45.100 --> 39:47.260
external class

39:47.260 --> 39:48.300
你写上

39:48.300 --> 39:49.900
它代表叫做

39:49.900 --> 39:52.060
外部的引用样式

39:52.060 --> 39:55.020
有一个叫my class

39:55.020 --> 39:57.020
有一个my class

39:57.020 --> 39:57.740
那么

39:57.740 --> 39:58.620
我这样的话呢

39:58.620 --> 39:59.500
它就会知道

39:59.500 --> 40:01.660
你外面会有一个叫my class

40:01.660 --> 40:03.580
引用了一个red tester

40:03.580 --> 40:05.420
然后把这个放在哪儿

40:05.420 --> 40:08.140
说你外部引用的my text

40:08.140 --> 40:10.060
它的呈现的效果

40:10.060 --> 40:11.100
就必须放在

40:11.100 --> 40:14.460
映射到我们里面的class name来

40:14.460 --> 40:16.460
映射到class name来

40:16.460 --> 40:19.260
my class

40:19.260 --> 40:22.140
这样去写

40:22.140 --> 40:25.220
先看效果

40:25.220 --> 40:26.180
有了吧

40:26.180 --> 40:26.420
好

40:26.420 --> 40:27.780
我们继续回过头来

40:27.780 --> 40:30.260
再把理论过一下

40:30.260 --> 40:31.700
我们外部在使用的时候

40:31.700 --> 40:32.100
你说老师

40:32.100 --> 40:33.780
那我这边就用我们刚才的

40:33.780 --> 40:36.420
比如说我就设计成

40:36.500 --> 40:37.940
my class name

40:37.940 --> 40:40.020
然后这边来

40:40.020 --> 40:43.200
my class name

40:43.200 --> 40:44.880
my class

40:44.880 --> 40:46.560
这样写

40:46.560 --> 40:47.120
那么

40:47.120 --> 40:48.400
这边的话是

40:48.400 --> 40:51.360
对你托风是命名吗

40:51.360 --> 40:51.840
看

40:51.840 --> 40:52.960
没效果

40:52.960 --> 40:53.840
所以这点的话呢

40:53.840 --> 40:55.600
我们要把这几个关键点

40:55.600 --> 40:57.120
说得非常清晰

40:57.120 --> 40:58.240
第一

40:58.240 --> 41:00.800
如果你希望我在外部

41:00.800 --> 41:03.680
也就是我在我的一个引用方

41:03.680 --> 41:05.040
有一个样式

41:05.040 --> 41:07.120
需要直接用这个样式

41:07.120 --> 41:10.160
让知道我们现在的组建内部区的话

41:10.160 --> 41:11.440
你要做几步操作

41:11.440 --> 41:12.320
一

41:12.320 --> 41:14.800
你定义一个组建的属性

41:14.800 --> 41:17.840
这个属性不能使用托风命名

41:17.840 --> 41:22.320
你要用中杠小写命名的方式来准备

41:22.320 --> 41:22.960
第二

41:22.960 --> 41:26.480
后面写上你现在外部所对应到的

41:26.480 --> 41:29.120
一个样式的选择器名称

41:29.120 --> 41:29.840
注意

41:29.840 --> 41:33.120
这个时候我们一直是强调的是用class

41:33.120 --> 41:34.720
千万别去自个儿去玩

41:34.720 --> 41:35.840
其他的一些格式

41:35.840 --> 41:36.560
走

41:36.560 --> 41:39.120
火入膜一般都是这样出来的

41:39.120 --> 41:39.680
第二

41:39.680 --> 41:40.880
我们再来说

41:40.880 --> 41:43.360
你在调用方已经完成以后

41:43.360 --> 41:45.920
那么你需要到组建里面去

41:45.920 --> 41:46.720
组建里面

41:46.720 --> 41:47.680
首先第一点

41:47.680 --> 41:50.160
你要去做第九行的这句话

41:50.160 --> 41:52.160
他要设定一个叫做

41:52.160 --> 41:55.680
external classes这样的一个变量值

41:55.680 --> 41:57.840
这个变量值是一个速组

41:57.840 --> 41:59.920
他会告诉我们程序

41:59.920 --> 42:00.720
现在

42:00.720 --> 42:03.040
你外部有一个属性

42:03.040 --> 42:03.440
注意

42:03.440 --> 42:04.400
他告诉我们

42:04.400 --> 42:08.240
外部有一个属性名叫myclass

42:08.240 --> 42:11.200
我们可以在当前的这个组建内部

42:11.200 --> 42:12.400
进行使用

42:12.400 --> 42:13.840
他是起这个作用的

42:13.840 --> 42:15.600
告知编印器

42:15.600 --> 42:18.960
额外引入的我们的class的名称

42:18.960 --> 42:20.960
那么一旦这句话写好以后

42:20.960 --> 42:23.760
你就可以像在当前这下面

42:23.760 --> 42:24.720
注意

42:24.720 --> 42:26.640
你在我们的组建内部

42:26.640 --> 42:29.520
并非是定义样式

42:29.520 --> 42:32.400
不是去使用我们后面的样式

42:32.400 --> 42:33.600
不是red class

42:33.680 --> 42:34.880
而是调用

42:34.880 --> 42:35.760
外部

42:35.760 --> 42:39.120
也就是引用方的myclass

42:39.120 --> 42:43.200
所指向的样式

42:43.200 --> 42:44.960
注意这句话的区别

42:44.960 --> 42:46.800
你不是直接指向于它

42:46.800 --> 42:49.680
你是定位到myclass

42:49.680 --> 42:53.040
所直接指向到的样式

42:53.040 --> 42:55.680
这就是我们平时一直讲的一个词

42:55.680 --> 42:56.880
映射

42:56.880 --> 42:58.080
这个词是映射

42:58.080 --> 42:59.440
你指向过去

42:59.440 --> 43:00.080
ok

43:00.080 --> 43:01.520
那么这样的话呢

43:01.520 --> 43:03.280
我们现在再来看效果的话

43:03.280 --> 43:04.640
你就会发现

43:04.640 --> 43:05.440
首先

43:05.440 --> 43:07.360
它指向到了myclass

43:07.360 --> 43:09.200
myclass外面对应到的是

43:09.200 --> 43:10.960
我们的一个红色字体

43:10.960 --> 43:12.560
所以它变红色了

43:12.560 --> 43:14.640
然后此时你的变化是

43:14.640 --> 43:16.400
如果你把外部样式

43:16.400 --> 43:17.680
把它改成了

43:17.680 --> 43:19.120
其他颜色

43:19.120 --> 43:20.720
但对于我的

43:20.720 --> 43:22.160
紫尘序来讲的话

43:22.160 --> 43:23.680
它是一种映射关系

43:23.680 --> 43:24.560
它不会关心

43:24.560 --> 43:26.800
它也不知道red test的存在

43:26.800 --> 43:28.560
所以它立马就会变成

43:28.560 --> 43:30.160
我们的这样的颜色

43:30.160 --> 43:30.880
这个呢

43:30.880 --> 43:33.200
从我们封装的角度来讲

43:33.200 --> 43:34.400
是非常舒服的

43:34.400 --> 43:37.040
因为我只要改一个样式结构

43:37.040 --> 43:38.880
凡是和它有关的样式

43:38.880 --> 43:41.360
名称或者称之为

43:41.360 --> 43:42.160
显示格式

43:42.160 --> 43:43.600
都会改变

43:43.600 --> 43:44.800
并不需要你告诉它

43:44.800 --> 43:46.000
A这个是组件

43:46.000 --> 43:46.880
在A处改

43:46.880 --> 43:48.400
这个是我们文件

43:48.400 --> 43:49.760
在B处改

43:49.760 --> 43:51.200
你不需要这样

43:51.200 --> 43:51.920
那么这样的话呢

43:51.920 --> 43:54.160
我们就看到效果非常明显

43:54.160 --> 43:55.920
把整个这个记住一下

43:55.920 --> 43:56.560
1

43:56.560 --> 43:57.120
这里

43:57.120 --> 43:57.680
中钢

43:57.680 --> 43:58.400
2

43:58.400 --> 44:00.000
这边外部写上以后

44:00.000 --> 44:02.000
内部只是要去做一个

44:02.000 --> 44:03.840
我们的class的一个注册

44:03.840 --> 44:06.000
然后完成对它的一个使用

44:06.000 --> 44:06.800
ok吧

44:06.800 --> 44:08.800
是这样的一个结构

44:08.800 --> 44:10.880
那么这就是我们现在在

44:10.880 --> 44:12.160
PPT上所写到的

44:12.160 --> 44:13.760
就是你不能外部去使用

44:13.760 --> 44:15.680
这样的一个书写class念

44:15.680 --> 44:17.600
而你需要使用外部类

44:17.600 --> 44:18.960
外部样式类的写法

44:18.960 --> 44:21.120
不能直接传递给自定义组件

44:21.120 --> 44:22.720
而是你需要通过

44:22.720 --> 44:25.040
external classes的方式

44:25.040 --> 44:26.160
来进行注册

44:26.160 --> 44:27.200
注册完成以后

44:27.200 --> 44:29.120
然后下面就可以直接使用了

44:29.120 --> 44:29.680
ok吧

44:29.680 --> 44:32.240
这是我们这边所设计到的一个点

44:32.240 --> 44:33.040
同时呢

44:33.040 --> 44:34.960
我们继续往下

44:34.960 --> 44:36.240
我们还设计到一个词

44:36.240 --> 44:38.480
叫做全局样式类

44:38.480 --> 44:40.080
全局样式类

44:40.080 --> 44:41.280
我们看一下

44:41.280 --> 44:42.720
PPT的描述是

44:42.720 --> 44:44.560
使用外部样式类

44:44.560 --> 44:47.760
可以让组件指定的组件

44:47.760 --> 44:49.760
形成外部样式的结构

44:49.760 --> 44:51.920
如果希望组件外部样式

44:51.920 --> 44:55.200
能够完全影响组件内部

44:55.200 --> 44:57.600
可以将组件构造器中的

44:57.600 --> 44:58.320
一个叫做

44:58.320 --> 45:01.280
add global class设置为

45:01.280 --> 45:04.240
add global class设置为

45:04.240 --> 45:06.400
这个词的叫做

45:06.400 --> 45:08.800
添加全局样式

45:08.800 --> 45:10.560
添加全局样式

45:10.560 --> 45:12.160
这是什么概念呢

45:12.160 --> 45:15.040
它其实就是把硬设关系

45:15.040 --> 45:16.640
不做在代码中

45:16.640 --> 45:19.360
而直接把它做在编译器当中

45:19.360 --> 45:22.160
它是形成了这样的一个区别

45:22.160 --> 45:23.440
我们来看一下

45:23.440 --> 45:26.320
刚才我们大家在做的过程中

45:26.320 --> 45:27.600
我强调了一点

45:27.760 --> 45:30.480
就是你用external class的时候

45:30.480 --> 45:32.480
你不能去直接触碰

45:32.480 --> 45:34.880
我们外面的read tester

45:34.880 --> 45:35.600
对吧

45:35.600 --> 45:38.480
你只是通过了my class

45:38.480 --> 45:39.520
所对一个属性

45:39.520 --> 45:43.040
所对应的样式的一个硬设关系

45:43.040 --> 45:45.440
那么现在如果说

45:45.440 --> 45:48.720
我的内部也想直接使用到

45:48.720 --> 45:51.200
我的read tester的时候

45:51.200 --> 45:52.400
那该怎么办

45:52.400 --> 45:55.600
这就是我们刚才上的全局样式类

45:55.600 --> 45:56.640
全局样式类

45:56.720 --> 45:59.200
它的意图就是在组件内

45:59.200 --> 46:00.480
直接调用

46:00.480 --> 46:02.800
而非走我们的硬设

46:02.800 --> 46:06.160
直接调用我们外部所定义到的

46:06.160 --> 46:10.240
整个我们的样式

46:10.240 --> 46:13.200
那我们来看一下该怎么玩

46:13.200 --> 46:14.800
首先我们跑到样式

46:14.800 --> 46:16.560
就是那个自定义组件里面

46:16.560 --> 46:18.240
跑到自定义组件里面

46:18.240 --> 46:20.560
我们去设定一下

46:20.560 --> 46:25.280
Static options等于

46:25.360 --> 46:28.400
我们给出刚才所谓的

46:28.400 --> 46:37.730
Add a global class

46:37.730 --> 46:40.130
你给出一个true

46:40.130 --> 46:45.090
它叫做添加到全局样式的管理结构中

46:45.090 --> 46:48.450
让我们程序能够直接完成

46:48.450 --> 46:52.210
外部的一个样式的调用

46:52.210 --> 46:54.770
此时你在这边再来

46:54.770 --> 46:56.930
我们把这句话给隐藏了

46:56.930 --> 47:00.130
然后我们这时候就没有my class了

47:00.130 --> 47:03.090
你就直接把我们现在这个red tester

47:03.090 --> 47:04.210
虽然它叫red tester

47:04.210 --> 47:06.290
我们里面颜色可以一直变

47:06.290 --> 47:07.650
把它拿过来

47:07.650 --> 47:12.100
然后此时我们再来看一下先试

47:12.100 --> 47:14.260
是不是也是蓝色

47:14.260 --> 47:14.820
对吧

47:14.820 --> 47:15.940
我们改一改

47:15.940 --> 47:19.150
你别以为是缓存

47:19.150 --> 47:20.110
黄色

47:20.110 --> 47:23.630
如果再出黄色的话表示ok了

47:23.630 --> 47:24.430
是不是

47:24.430 --> 47:25.390
虽然看不太清

47:25.390 --> 47:28.190
但是能看到是一个黄色字体

47:28.190 --> 47:28.910
ok

47:28.910 --> 47:29.950
那么这样的话

47:29.950 --> 47:33.470
就是我们俗称的全局样式类

47:33.470 --> 47:34.670
全局样式类

47:34.670 --> 47:38.910
它的概念是让组建内直接可以调用

47:38.910 --> 47:42.910
我外部样式的一个写法

47:42.910 --> 47:45.070
主要是通过我们这边

47:45.070 --> 47:46.430
哪个页面要用

47:46.430 --> 47:48.510
你就单独注册一个option

47:48.510 --> 47:50.990
然后对它里面的global

47:50.990 --> 47:52.990
做一个add global class

47:52.990 --> 47:54.910
true的设置

47:54.910 --> 47:56.030
这就可以了

47:56.030 --> 47:56.750
这样的话

47:56.750 --> 47:58.110
你就可以直接用了

47:58.110 --> 48:00.110
如果说你不是这样的设置

48:00.110 --> 48:04.030
那么你想通过外部的一个映射

48:04.030 --> 48:06.270
就是我们称之为叫外部样式类

48:06.270 --> 48:07.310
来使用的话

48:07.310 --> 48:09.790
你首先要做一个external class

48:09.790 --> 48:11.550
在内部进行一个注册

48:11.550 --> 48:14.270
叫做我把外部的一个属性

48:14.270 --> 48:15.470
把它拿过来了

48:15.470 --> 48:18.110
然后你就可以在这里面使用

48:18.110 --> 48:20.190
我们的外部的属性名

48:20.190 --> 48:21.950
它会自行映射到

48:21.950 --> 48:24.510
外部的一个样式结构上

48:24.510 --> 48:26.430
这两者在平时生活中

48:26.430 --> 48:28.110
哪里用的比较多呢

48:28.110 --> 48:29.070
就是这样

48:29.070 --> 48:31.390
如果你现在这里面的所有结构

48:31.390 --> 48:33.470
80%以上

48:33.470 --> 48:35.630
都是和外面是相同的

48:35.630 --> 48:37.070
那么你完全就可以使用

48:37.070 --> 48:38.590
这样的结构来定义

48:38.590 --> 48:40.590
使用一个我们的样式结构

48:40.590 --> 48:42.830
完成多个文件操作

48:42.830 --> 48:43.870
如果说

48:43.870 --> 48:47.790
你现在外面只用到20%

48:47.790 --> 48:49.950
还有80%根本用不到

48:49.950 --> 48:52.270
那么你就为了用个小文件的话

48:52.270 --> 48:53.230
你就不需要去

48:53.230 --> 48:56.030
不像这样的进行全举添加

48:56.030 --> 48:58.750
你就完成一个我们的外部样式引用

48:58.750 --> 48:59.950
你只要完成里面

48:59.950 --> 49:01.470
比如说你写了20个里面

49:01.470 --> 49:02.830
只要用一两三个

49:02.830 --> 49:04.590
那你就用这样的结构

49:04.590 --> 49:05.550
但你写了20个里面

49:05.550 --> 49:06.990
有差不多17 8个

49:06.990 --> 49:08.030
你都得在里面用

49:08.030 --> 49:09.790
那你就用前面的全举样式

49:09.790 --> 49:10.910
而非外部样式

49:10.910 --> 49:11.710
理解吧

49:11.710 --> 49:12.910
这两者怎么用

49:12.910 --> 49:14.510
主要是参考2.1

49:14.510 --> 49:16.110
你们程序的规范

49:16.110 --> 49:17.710
就是公司里面要求

49:17.710 --> 49:18.670
第二个的话呢

49:18.670 --> 49:19.870
是看你这个样式里面

49:19.870 --> 49:21.550
有多少的数据

49:21.550 --> 49:24.030
是可以被内部用到的

49:24.030 --> 49:25.070
根据用到了多少

49:25.070 --> 49:27.390
我们可以切换现在使用的方式

49:27.390 --> 49:29.310
这个就是我们

49:29.310 --> 49:31.070
这节可以给大家讲解的

49:31.070 --> 49:32.110
我们叫做

49:32.110 --> 49:33.390
组建的外部样式

49:33.390 --> 49:34.990
和全举样式的区别

49:34.990 --> 49:36.830
现在你应该理解了

49:36.830 --> 49:39.310
我们回过头来履一下代码

49:39.310 --> 49:41.150
我们前面再说我们的

49:41.150 --> 49:42.670
整个全举样式的时候

49:42.670 --> 49:44.030
我们往前

49:44.030 --> 49:45.710
我们其实说到了是

49:45.710 --> 49:47.630
现在有几个样式

49:47.630 --> 49:48.670
一是不能用

49:48.670 --> 49:49.630
二是无效果

49:49.630 --> 49:51.070
三是属于

49:51.070 --> 49:53.230
在不同上面有不同的效果

49:53.790 --> 49:55.150
有一些ID

49:55.150 --> 49:56.030
这个标签

49:56.030 --> 49:56.750
这些都不能用

49:56.750 --> 49:57.790
第二个的话

49:57.790 --> 49:58.910
后代选择器

49:58.910 --> 50:00.990
加上我们这样的箭头

50:00.990 --> 50:01.710
这上面

50:01.710 --> 50:03.230
比如说只用在View上面

50:03.230 --> 50:04.590
但是我们经过测试以后

50:04.590 --> 50:06.190
我们给大家的要求是

50:06.190 --> 50:08.030
我们都可以使用这样的

50:08.030 --> 50:09.550
A点B

50:09.550 --> 50:12.030
它说可以再特定极端情况

50:12.030 --> 50:12.830
那么我们相信

50:12.830 --> 50:14.750
这个极端情况平时也出现不了

50:14.750 --> 50:15.710
就算出现的话

50:16.910 --> 50:18.430
如果你想避免极端

50:18.430 --> 50:19.630
你就一个定义

50:19.630 --> 50:21.150
但是我们平时这么用的话

50:21.150 --> 50:22.430
其实也是可以的

50:22.430 --> 50:23.630
但是这个情况下

50:23.630 --> 50:25.950
只出现于我们的View的节点上面

50:25.950 --> 50:27.710
你要出现在其他节点

50:27.710 --> 50:28.030
没用

50:29.470 --> 50:30.030
OK

50:30.030 --> 50:31.230
这是我们说到的

50:31.230 --> 50:32.110
紧接着继续

50:32.110 --> 50:34.030
我们后面讲到的是继承

50:34.030 --> 50:34.510
继承的话

50:34.510 --> 50:36.190
我们说到的是我们的

50:36.190 --> 50:37.710
一些公共组件

50:37.710 --> 50:39.070
或者称之为公共样式

50:39.070 --> 50:40.430
这是我们的共享样式

50:40.430 --> 50:42.030
FontColor这些

50:42.030 --> 50:44.350
你可以把它写在负组件上面

50:44.350 --> 50:45.390
同时你也可以把它写在

50:45.390 --> 50:48.270
APP.css的全局组件上面

50:48.270 --> 50:50.270
它整个页面都会被用到

50:50.270 --> 50:52.350
那么除了这两个以外的话

50:52.830 --> 50:54.270
我们其他的一些内容

50:54.270 --> 50:56.910
写在我们的APP.css

50:56.910 --> 50:58.030
全局文件中

50:58.030 --> 50:59.550
注意自定义组件内部

50:59.550 --> 51:00.510
是用不到的

51:00.510 --> 51:01.790
这是我们强调过的一点

51:01.790 --> 51:02.350
在这里面

51:02.350 --> 51:03.310
我们比如说

51:03.310 --> 51:04.830
植物把它现在也生掉了

51:05.790 --> 51:08.590
在我之前的这节课的视频里面是有的

51:08.590 --> 51:09.790
第二我们说

51:09.790 --> 51:12.590
你不能直接在外面的ClassName上

51:12.590 --> 51:14.110
去调用一个组件进来

51:14.830 --> 51:16.350
我们这边我们是说到了

51:16.350 --> 51:16.990
对吧

51:16.990 --> 51:18.990
那么外部调组件的方式

51:18.990 --> 51:20.830
使其导致的是页面失效

51:21.790 --> 51:24.110
使其导致外面失效

51:24.110 --> 51:25.790
那么怎么样解决这问题呢

51:25.790 --> 51:28.110
我们就要用外部样式类的写法

51:28.110 --> 51:29.070
外部样式类

51:29.070 --> 51:29.790
主要的是

51:29.790 --> 51:31.710
你要在我们的组件里面

51:31.710 --> 51:32.990
去使用一个叫做

51:32.990 --> 51:33.950
actional

51:33.950 --> 51:35.630
完成一个所谓的

51:35.630 --> 51:37.710
外部样式属性

51:37.710 --> 51:38.270
主要

51:38.270 --> 51:40.990
它说外部样式属性的一个注册

51:41.550 --> 51:43.310
它和外部样式没有关系

51:43.310 --> 51:46.670
只是我们组件注册了一个外部的属性

51:46.670 --> 51:48.750
并且这个属性告之边一起

51:48.750 --> 51:50.110
它是一个类

51:50.270 --> 51:52.270
那么变异在操作的时候

51:52.270 --> 51:53.630
它就会去知道

51:53.630 --> 51:55.710
当前你在程序中写的

51:55.710 --> 51:56.750
这个MyClass

51:56.750 --> 51:58.350
我们MyClass写在这儿的

51:58.350 --> 52:00.350
MyClass它其实是一个类

52:00.350 --> 52:03.230
它会去找到你外部样式里面

52:03.230 --> 52:06.190
MyClass对应到的选择器

52:06.190 --> 52:08.990
采用这个选择器的格式来进行操作

52:08.990 --> 52:10.830
这是外部样式类的特点

52:10.830 --> 52:12.350
那么全局样式类

52:12.350 --> 52:13.710
主要的就在于

52:13.710 --> 52:16.430
它是把外部样式所用到的

52:16.430 --> 52:19.470
所有的那些选择器

52:19.550 --> 52:21.710
可以直接在组件内部使用

52:21.710 --> 52:23.710
所以它只需要订一个option

52:23.710 --> 52:25.070
写上一个Global

52:25.070 --> 52:27.230
Add a Global Class

52:27.230 --> 52:28.190
等于True

52:28.190 --> 52:29.710
那你就可以在组件内

52:29.710 --> 52:31.950
直接用外部全局的

52:31.950 --> 52:34.190
我们的一个样式选择器了

52:34.190 --> 52:35.310
是这个结构

52:35.310 --> 52:35.950
好了

52:35.950 --> 52:38.350
那么这节课我们就上到这儿

52:38.350 --> 52:40.030
那么大家可以把这内容

52:40.030 --> 52:41.070
好好去整理一下

52:41.070 --> 52:42.270
然后之后

52:42.270 --> 52:44.750
讲起一些语法逻辑的时候

52:44.750 --> 52:46.110
你不会再很陌生

52:46.110 --> 52:46.510
好吧

52:46.510 --> 52:47.870
一定要去练习

52:47.870 --> 52:49.390
并且自己要有总结

52:49.390 --> 52:50.350
就先上

