WEBVTT

00:00.050 --> 00:02.450
好 我们继续讲解泰瑞希的课程

00:02.450 --> 00:06.050
这个课呢 给大家讲解一下JESSA在泰瑞中的一些使用

00:06.050 --> 00:11.050
JESSA呢 在之前我们的react中呢 大家应该说啊 也就见过

00:11.050 --> 00:14.850
那么JESSA在泰瑞中呢 有一些不同点 有一些相同点

00:14.850 --> 00:16.650
那么这些呢 都是我们要注意

00:16.650 --> 00:19.450
那么今天这堂课呢 给大家来讲解这部分的内容

00:19.450 --> 00:24.280
那么JESSA呢 我们本身来讲啊

00:24.280 --> 00:30.380
它是使用了一种DSL的一种进而编译形成的一种各种的通用的一种语法

00:30.580 --> 00:35.380
所以呢 我们在里面可以啊 你自行可以写成任何的一种形式

00:35.380 --> 00:37.980
那么它的形式呢 会非常的广泛

00:37.980 --> 00:40.580
好 我们写起来呢 有根据你不同的平台

00:40.580 --> 00:42.880
会有不同的写法 我们可以是

00:42.880 --> 00:46.680
JESSA的好处呢 我们看到啊 下面会有四点所支持

00:46.680 --> 00:53.280
第一个的话呢 各大编译器和ID都能够很好的去支持现在的这样的JESSA的结构

00:53.280 --> 00:57.180
第二呢 它是安全的类型啊 它在编译时候呢 就能发现错误

00:57.180 --> 01:01.380
所以呢 不需要你到网页中啊 去看到这个有错

01:01.380 --> 01:03.580
或者说根本就没有系统的爆出啊

01:03.580 --> 01:08.180
JESSA 肯定在编译时候 就在你的ID一平台中就可以给你爆出来了

01:08.180 --> 01:12.380
第三呢 提供语异化 并且可以移动的标签

01:12.380 --> 01:18.580
那么这种标签呢 我们说啊 可以很好的支持到某些特定的一些功能

01:18.580 --> 01:23.180
比如说 我们现在的移动端有一些特殊的标签

01:23.180 --> 01:26.780
那么这种标签呢 我们可以自行的进行编写啊

01:26.780 --> 01:31.180
比如说组建标签 插件标签啊 这些都可以自行来做

01:31.180 --> 01:34.980
所以它称之为语异化的一些标签 背后的社区非常强大

01:34.980 --> 01:40.380
因为我们的Taro的话呢 你可以去到他的官网 他有个论坛 我给大家看一下

01:40.380 --> 01:44.180
这个论坛的话呢 非常强大 也就意味着 你看啊

01:44.180 --> 01:51.480
Taro的论坛里面有非常多的人啊 在里面对他进行一定的维护和现有的一些操作

01:51.480 --> 01:55.880
那么我们大家呢 如果有时间的话呢 都可以到里面去看一下

01:55.880 --> 02:00.380
有些人呢 是一些大牛 有些也是属于小白啊 那么随便怎么样

02:00.380 --> 02:04.080
我们都可以在里面得到非常多的一些帮助

02:04.080 --> 02:12.380
因为我们讲 文档的推出永远是根据在论坛或者是大家对他里面的一些发布

02:12.380 --> 02:18.580
然后收集了非常多的一些信息以后 那么文档或者称之为我们的版本再会往上升级

02:18.580 --> 02:22.180
所以呢 一些所谓的最新的知识 我们讲啊

02:22.180 --> 02:24.280
都会在这样的一些论坛里面出现

02:24.280 --> 02:26.580
所以他的这个论坛非常强大

02:27.580 --> 02:28.980
同时呢 我们继续来说

02:29.380 --> 02:36.280
那么jaxxx的话呢 我们啊 特别是在以前用过react的同学的话呢 应该对他不太陌生

02:37.080 --> 02:42.180
但是呢 我们说过Taro他并不是完完全全全部都用react的语法

02:42.180 --> 02:45.980
他是基于react的语法所来开发的 为什么呢

02:45.980 --> 02:50.980
因为本身呢 我们现在的Taro他会生成的时候 需要去完成

02:51.280 --> 02:56.080
不同平台的 我们一般性都针对于小程序的一些的开发

02:56.080 --> 02:58.980
而小程序本身自己也有很多的限制

02:58.980 --> 03:04.280
所以呢 我们只能说要不就是抽取react里面的一部分

03:04.280 --> 03:08.080
要不就是改写或者编译器里面禁止这一部分的操作

03:08.080 --> 03:10.480
好了 那么这是理论上的东西

03:10.480 --> 03:13.680
那么现在呢 我们回到我们现在的代码里面

03:13.680 --> 03:15.480
我们来看一下这部分的操作

03:15.880 --> 03:18.480
首先呢 我们进入到我们的官网

03:18.480 --> 03:21.180
我们看到 官网有很强的一例

03:21.180 --> 03:24.080
代表我们现在讲解JSA的简介

03:24.080 --> 03:26.780
那么这里边的使用呢 首先我们可以看到

03:26.780 --> 03:28.280
我们简单的看一下

03:28.280 --> 03:30.680
我们下面呢 会对它不断的进行

03:30.680 --> 03:34.380
一味的去代码的编写 有些是需要扩展

03:34.380 --> 03:36.280
有些是需要去验证

03:36.280 --> 03:39.980
首先我们使用我们的JXX的时候呢 我们会发现

03:39.980 --> 03:43.580
它其实写法上面 就是我们大家所看到的

03:43.580 --> 03:45.380
我们这边会有这样的结构

03:45.380 --> 03:47.180
这边会去引用组件

03:47.180 --> 03:49.680
这边需要Taro来进行我们的输入

03:49.680 --> 03:51.680
那个导入

03:51.680 --> 03:53.880
然后呢 我们看一下 它说到了

03:53.880 --> 03:56.680
首先你整个页面中你要用JXX的话

03:56.680 --> 04:00.780
我们本身的这个结构必须导入Taro和组件

04:00.780 --> 04:03.580
导入Taro是这句话 导入组件是这句话

04:03.580 --> 04:06.480
你看啊 它写着 取消

04:06.480 --> 04:08.080
它写着 在这样的代码中呢

04:08.080 --> 04:09.980
大写开头的Taro这个词呢

04:09.980 --> 04:13.480
它是标签view表示 它是个Taro组件

04:13.480 --> 04:14.280
注意一下啊

04:14.280 --> 04:17.080
那么这一边所引用到的这个view

04:17.080 --> 04:20.480
它已经现在已经不是我们的微信小程序标签了

04:20.480 --> 04:23.980
因为虽然它长得像 但是它是一个Taro组件

04:23.980 --> 04:25.280
是这样的称呼了

04:25.280 --> 04:28.580
然后呢 变量view看起来并没有被调用

04:28.580 --> 04:30.580
你说它到底哪里用它了

04:30.580 --> 04:33.280
就要或者说哪里去调用它更多的了

04:33.280 --> 04:35.780
但是呢 我们说好 一定把它拿进来

04:35.780 --> 04:36.580
为什么

04:36.580 --> 04:40.780
因为这个Taro组件和它是有一个对应关系的

04:40.780 --> 04:41.780
这个对应关系呢

04:41.780 --> 04:44.880
使我们能够在后期编译的过程中

04:44.880 --> 04:48.680
能让程序在没有看到你下面view的时候

04:48.680 --> 04:52.680
直接知道你现在程序中引用了多少的组件

04:52.680 --> 04:54.680
这里面就要把它给写进来

04:54.680 --> 04:56.180
还记得我们以前做项目的时候

04:56.180 --> 04:58.280
特别是在我刚开始给大家讲解Taro的时候

04:58.280 --> 04:59.180
我说过

04:59.180 --> 05:00.680
如果你下面用到了taster

05:00.680 --> 05:02.180
那么你这边也把taster写出来

05:02.180 --> 05:03.380
如果你用到了button

05:03.380 --> 05:04.680
你这边把button写出来

05:04.680 --> 05:06.080
那么系统在载入的时候

05:06.080 --> 05:08.380
一看你这一边中用到三个组件

05:08.380 --> 05:12.080
它会以这三个组件的JSA的语法来衡定

05:12.080 --> 05:14.480
你下面这个是否写得对不对

05:14.480 --> 05:16.080
它有这个功能存在

05:16.080 --> 05:17.580
所以你看到

05:17.580 --> 05:18.780
这边它写了一句话

05:18.780 --> 05:20.280
当你引入组件的时候

05:20.280 --> 05:23.280
一定要使用我们的

05:23.280 --> 05:25.780
不要出现没有使用到的变量

05:25.780 --> 05:28.080
所以我们这时候我们就说到了

05:28.080 --> 05:30.680
这部分内容你需要去做一不引入

05:30.680 --> 05:32.080
两不引入

05:32.080 --> 05:33.680
你不引入它的话

05:33.680 --> 05:35.280
你去这样去做

05:35.280 --> 05:36.080
它不会爆错

05:36.080 --> 05:38.980
但是对于你现在的JSA的学习来讲

05:38.980 --> 05:40.180
它不规范

05:40.180 --> 05:42.280
我们看有个黄色的一行

05:42.280 --> 05:43.480
自己告诉你说

05:43.480 --> 05:45.880
当你使用微信小针实时

05:45.880 --> 05:48.080
你是不可以

05:48.080 --> 05:49.680
可以不用组件引入这个的

05:49.680 --> 05:50.580
刚才我们说过了

05:50.580 --> 05:51.880
但强烈推荐你

05:51.880 --> 05:52.480
他说了

05:52.480 --> 05:55.080
我们现在的话需要一一对应

05:55.080 --> 05:56.980
让程序能够更好的发掘

05:56.980 --> 05:57.580
OK

05:57.580 --> 05:58.680
那么我们来到程序中

05:58.680 --> 06:01.080
我们自己来看

06:01.080 --> 06:03.780
我们建立了一个新的页面

06:03.780 --> 06:06.780
我们叫做我们的JS demo

06:06.780 --> 06:11.180
我们在我们的SRC的Peters里面

06:11.280 --> 06:12.580
咱们看到JS demo

06:12.580 --> 06:13.580
里面很简单

06:13.580 --> 06:16.680
就是两个我们的不同文件

06:16.680 --> 06:20.580
然后我们在我们的全聚文件

06:20.580 --> 06:22.780
app.jx里面

06:22.780 --> 06:24.780
把它放在了第一行上面

06:24.780 --> 06:26.780
这样微信在打开的时候

06:26.780 --> 06:29.280
它就变成了是第一个内容

06:29.280 --> 06:31.280
第一个页面

06:31.280 --> 06:32.780
那么打开我们的页面

06:32.780 --> 06:34.480
我们看到我们这里边

06:34.480 --> 06:37.980
主要是实现了几个空的文件的组合

06:37.980 --> 06:38.780
比如第一个

06:38.780 --> 06:41.080
我们完成了一个terror的导入

06:41.080 --> 06:41.980
刚才我们说过

06:41.980 --> 06:44.180
第二个我们完成了一个view

06:44.180 --> 06:46.080
这是一个JSX的文件的操作

06:46.080 --> 06:48.780
第三个我们引入了我们现在的CSS

06:48.780 --> 06:50.380
当然里面什么都没有

06:50.380 --> 06:52.080
然后完成一个基本结构炮

06:52.080 --> 06:52.880
放置

06:52.880 --> 06:55.580
这个的话我们名称改成和它一样

06:55.580 --> 07:00.380
JSX demo

07:00.380 --> 07:02.880
紧接着我们有几个触实状态

07:02.880 --> 07:04.280
比如说我们status

07:04.280 --> 07:06.080
我们先放空在这里

07:06.080 --> 07:07.880
代表的是这是个状态的改变

07:07.880 --> 07:08.980
也就是我们意味着

07:08.980 --> 07:11.280
像平时我们写原生小程序一样

07:11.280 --> 07:12.280
有个data

07:12.280 --> 07:14.480
这边有一个叫做configure

07:14.480 --> 07:16.080
那么这里面是我们页面配置

07:16.080 --> 07:19.180
就是原生小程序的那个叫做什么

07:19.180 --> 07:20.280
我们写在外面

07:20.280 --> 07:24.080
json里面就是我们原生小程叫什么

07:24.080 --> 07:25.980
某某某页面的json

07:25.980 --> 07:28.520
是不是这个文件

07:28.520 --> 07:31.220
我们写全一点

07:31.220 --> 07:37.820
类似原生小程序的写全

07:37.820 --> 07:38.920
这边就是

07:38.920 --> 07:40.820
既然当前的名称就叫JXX

07:40.820 --> 07:44.520
那么叫JXX demo的这个

07:44.520 --> 07:48.840
它是类似

07:48.840 --> 07:50.540
这个类似其实就是

07:50.540 --> 07:51.840
最终在编译的时候

07:51.840 --> 07:54.040
它会把这个内容进行转换

07:54.040 --> 07:56.240
编译成我们的微信小程序的

07:56.240 --> 07:57.940
后面的这个名字

07:57.940 --> 08:02.540
这个就是我们在小程序中的原生

08:02.540 --> 08:09.560
小程序的data属性

08:09.560 --> 08:11.060
紧接着继续往下

08:11.060 --> 08:12.260
证明周期对吧

08:12.260 --> 08:16.160
我们写了一个component well mount

08:16.160 --> 08:17.860
甚至是你可以写其他的都可以

08:17.860 --> 08:18.860
然后random

08:18.860 --> 08:19.460
看到吗

08:19.460 --> 08:21.660
我们这边做了一个demo的输出

08:21.660 --> 08:23.560
我们做了一个view的输出

08:23.560 --> 08:25.460
那么这个view我们就告知程序

08:25.460 --> 08:27.360
你是从这边引入过来的

08:27.360 --> 08:29.960
并且它的一个定义和它的法则

08:29.960 --> 08:32.160
都和这个view是息息相关的

08:32.160 --> 08:34.160
然后我们只做一个demo的显示

08:34.160 --> 08:34.860
所以这样的话

08:34.860 --> 08:36.360
页面这样就看到一个demo了

08:36.360 --> 08:36.960
ok

08:36.960 --> 08:39.060
那么这是属于基础的一个结构

08:39.060 --> 08:40.860
那么刚才我们说的第一步

08:40.860 --> 08:42.460
就在这边出现了

08:42.460 --> 08:44.360
然后紧接着我们开始说

08:44.360 --> 08:45.560
它的命名

08:45.560 --> 08:47.760
我们如果说你现在

08:47.760 --> 08:53.360
对于我们的整个的组件

08:53.360 --> 08:54.360
我们如果说是

08:54.360 --> 08:57.760
我们想在我们当前里面使用组件的话

08:57.760 --> 09:00.460
那么组件的命名有一个非常大的要求

09:00.460 --> 09:02.460
就是组件的命名

09:02.460 --> 09:04.760
应当是手字母大写

09:04.760 --> 09:08.260
且使用大陀风式的命名方式

09:08.260 --> 09:08.760
记住

09:08.760 --> 09:10.560
叫大陀风式

09:10.560 --> 09:12.860
大陀风式和小陀风式的区别

09:12.860 --> 09:14.160
就在于

09:14.160 --> 09:16.660
骆驼那个头是低下的还是抬起来的

09:16.660 --> 09:18.660
低下的就是手字母小写

09:18.660 --> 09:21.960
大陀风就是属于手字母大写

09:21.960 --> 09:22.960
这样的结构

09:22.960 --> 09:24.860
那么如果你不按这个结构来

09:24.860 --> 09:26.860
你以普通变量定义名称方式

09:26.860 --> 09:27.660
也就是所谓的

09:27.660 --> 09:30.660
你自行完成那个下滑线的结构的话

09:30.660 --> 09:32.260
你是不能运行的

09:32.260 --> 09:33.060
那我们看到

09:33.060 --> 09:34.760
我这边有一个dialogue

09:34.760 --> 09:35.960
对不对

09:35.960 --> 09:37.160
我这边有个dialogue

09:37.160 --> 09:40.360
那么我们把它拿进来

09:40.360 --> 09:44.690
你看

09:44.690 --> 09:45.890
in part

09:45.890 --> 09:46.990
然后我里边写上

09:46.990 --> 09:48.590
我们比如说我叫做

09:49.890 --> 09:53.060
my dialog

09:54.360 --> 09:54.660
from

09:56.460 --> 09:57.160
点点钢

09:57.160 --> 09:58.160
点点钢

09:58.160 --> 10:00.760
component dialog

10:00.760 --> 10:02.560
dialogue引进来

10:02.560 --> 10:07.770
然后直接把它在我这边运行

10:07.770 --> 10:11.000
打多个以号

10:11.000 --> 10:12.100
打多个以上

10:12.100 --> 10:26.120
我们打扩号

10:26.120 --> 10:27.520
保存

10:27.520 --> 10:29.420
出了一堆下面的内容出来

10:29.420 --> 10:30.420
这是什么

10:30.420 --> 10:33.520
这其实是一个中文字符

10:33.520 --> 10:35.120
只不过在这里

10:35.120 --> 10:36.920
不支持显示而已

10:36.920 --> 10:37.620
你会发现

10:37.620 --> 10:39.420
它上面立马给你报错

10:39.420 --> 10:40.720
这就是

10:40.720 --> 10:41.420
你会发现

10:41.420 --> 10:42.720
它这边告诉你的是

10:42.720 --> 10:44.920
它无法去解析

10:44.920 --> 10:48.120
不能去找到闭合解析这个标签

10:48.120 --> 10:49.420
那么这就意味着

10:49.420 --> 10:52.420
我们的自定义组建在使用的过程中

10:52.420 --> 10:53.720
我们在命名的时候

10:53.720 --> 10:55.520
我们是没有办法说是

10:55.520 --> 10:57.420
采用这样的格式的

10:57.420 --> 10:59.620
你要采用大托风式命名

10:59.620 --> 11:00.720
所以我们来看

11:00.720 --> 11:02.320
你可以写成

11:02.320 --> 11:17.440
my dialog

11:17.440 --> 11:23.310
这边有一个

11:23.310 --> 11:28.920
我们

11:28.920 --> 11:31.420
它指的是

11:31.420 --> 11:34.020
不过再更接点 y

11:34.020 --> 11:37.630
把它放进去

11:37.630 --> 11:40.600
它有个更接点

11:40.600 --> 11:41.400
就可以了

11:41.400 --> 11:42.100
对吧

11:42.100 --> 11:42.600
这样的话

11:42.600 --> 11:44.000
这边一通过了

11:44.000 --> 11:44.600
这样的话

11:44.600 --> 11:45.800
我们页面就能看到

11:45.800 --> 11:47.800
我们简单看到一下

11:47.800 --> 11:49.200
虽然是白色的

11:49.200 --> 11:50.400
虽然在中间

11:50.400 --> 11:52.200
这一个弹框OK了

11:52.200 --> 11:53.300
所以我们讲

11:53.300 --> 11:54.800
作为命名来讲的话

11:54.800 --> 11:56.400
你只要先记住一点

11:56.400 --> 11:57.300
就是

11:57.300 --> 11:58.800
它的命名需要采用

11:58.800 --> 12:00.200
大托风式命名

12:00.200 --> 12:01.300
就可以了

12:01.300 --> 12:02.700
那么这里的话

12:02.700 --> 12:04.200
还要再说明一下

12:04.200 --> 12:06.100
就是我们之前

12:06.100 --> 12:09.100
简单设计到过组建的使用

12:09.100 --> 12:10.900
组建在使用的时候

12:10.900 --> 12:12.300
我们也会完成

12:12.300 --> 12:14.700
对它里面的数据传直

12:14.700 --> 12:16.100
那么包括是我们看到

12:16.100 --> 12:17.000
这个组建里面

12:17.000 --> 12:18.700
它可以需要我们有两个值

12:18.700 --> 12:21.400
一个是my text or my name的传输

12:21.400 --> 12:24.000
但是我们在react里面的时候

12:24.000 --> 12:27.800
我们经常会以某一种形式表示

12:27.800 --> 12:29.300
我们叫做动态的

12:29.300 --> 12:32.400
也就是运行时指定类型的一种组建

12:32.400 --> 12:34.000
运行时指定类型组建

12:34.000 --> 12:37.000
那么我这边给说一下

12:37.000 --> 12:38.300
在我们的这里

12:38.300 --> 12:39.800
它是不能操作的

12:39.800 --> 12:40.800
注意注释

12:40.800 --> 12:43.400
注释要这样打

12:43.400 --> 12:44.500
你比如说

12:44.500 --> 12:47.200
你有一个自己的component的组建

12:47.200 --> 12:50.780
我就这么简写了

12:50.780 --> 12:53.870
打库号

12:53.870 --> 12:58.470
my component

12:58.470 --> 12:59.570
自己的组建

12:59.570 --> 13:07.430
然后给它指定日期picker格式

13:07.430 --> 13:09.030
你用这样的方式

13:09.030 --> 13:10.630
我们称之为动态类型

13:10.630 --> 13:12.830
到底这里面是什么样的类型格式

13:12.830 --> 13:14.330
你到底日期格式里面

13:14.330 --> 13:16.830
给你返回的是什么样的形式

13:16.830 --> 13:18.330
那么在react里面

13:18.330 --> 13:20.330
这样的写法是可以的

13:20.330 --> 13:21.730
包括是narrow

13:21.730 --> 13:23.230
这里面都是可以的

13:23.230 --> 13:24.530
但是在tarrow里面

13:24.530 --> 13:26.230
我们现在的tarrow里面

13:26.230 --> 13:27.830
它是不支持的

13:27.830 --> 13:29.830
所以你这种格式

13:29.830 --> 13:31.430
你千万不要去用进来

13:31.430 --> 13:33.130
这边需要额外说一下

13:33.130 --> 13:47.320
就是reactor支持的运行时指定类型

13:47.320 --> 13:53.630
来引用组建

13:53.630 --> 13:56.230
tarrow不支持

13:56.230 --> 13:57.530
不能用

13:57.530 --> 13:59.030
这边我把它写在这边了

13:59.030 --> 14:00.930
大家一定要注意这点

14:00.930 --> 14:03.430
我把这个字再打引号出来

14:03.430 --> 14:07.810
运行时指定类型

14:07.810 --> 14:10.210
这是第一个概念

14:10.210 --> 14:12.010
紧接着我们就往下讲了

14:12.010 --> 14:14.710
首先我们把组建的名称定名

14:14.710 --> 14:17.310
所以我们讲的是

14:17.310 --> 14:19.110
在你现在过程中

14:19.110 --> 14:23.610
你如果说要用到的是普通的JSX的话

14:23.610 --> 14:25.010
那你需要在这定

14:25.010 --> 14:27.110
如果说你现在是引入进来的

14:27.110 --> 14:28.010
那你就可以

14:28.010 --> 14:29.410
没有这个没法定义

14:29.410 --> 14:31.010
你就是可以直接在这边引入

14:31.010 --> 14:32.510
然后在这边直接使用

14:32.510 --> 14:33.910
这是第二种方式

14:33.910 --> 14:36.210
它也属于JSX的语法之一

14:36.310 --> 14:38.510
第三我们来讲解属性

14:38.510 --> 14:42.310
JSX中我们有几种不同的属性的写法

14:42.310 --> 14:44.910
我们有不同的几个属性的写法

14:44.910 --> 14:45.710
我们就来看一下

14:45.710 --> 14:47.810
首先我们依然是像这个一样

14:47.810 --> 14:48.710
我们可以传植

14:48.710 --> 14:50.910
我们就来玩这个传植

14:50.910 --> 14:52.010
里边能够呈现

14:52.010 --> 14:59.140
所以我们就拿MyTest来做

14:59.140 --> 15:00.840
首先最简单的方式

15:00.840 --> 15:04.040
就是纯字服串往里传

15:04.040 --> 15:06.040
最简单方式纯字服串

15:06.040 --> 15:07.540
我们大家应该能够看懂

15:07.540 --> 15:09.440
这个是

15:09.540 --> 15:10.440
先试一下

15:10.440 --> 15:11.740
Hello world 没问题

15:11.740 --> 15:13.240
紧接着我们再往下

15:13.240 --> 15:15.040
它可以做表达式

15:15.040 --> 15:17.140
在这个属性里面可以做表达式

15:17.140 --> 15:18.440
所以表达式的写法

15:18.440 --> 15:21.040
就意味着我们要表达式的标签

15:21.040 --> 15:23.040
我们平时大家见到的这个标签

15:23.040 --> 15:24.740
它其实就是表达式标签

15:24.740 --> 15:25.740
只不过

15:25.740 --> 15:27.840
我们在微信原申里面

15:27.840 --> 15:30.740
我们是使用这样的写法来写

15:30.740 --> 15:32.940
MyValue

15:32.940 --> 15:34.140
是这样的格式

15:34.140 --> 15:35.640
然后在我们的

15:35.640 --> 15:38.040
还记得吗View里面是怎么玩的

15:38.040 --> 15:38.840
View里面

15:38.840 --> 15:40.740
View里面的话是打帽号

15:40.740 --> 15:42.440
它是作为强解C

15:42.440 --> 15:43.840
MyValue

15:43.840 --> 15:44.940
是这么玩的

15:44.940 --> 15:46.840
但是对于我们现在的

15:46.840 --> 15:49.340
Reactor的语法结构来讲的话

15:49.340 --> 15:51.140
它直接在这里面

15:51.140 --> 15:51.840
注意

15:51.840 --> 15:53.840
它不能有外面这个引号

15:53.840 --> 15:57.140
你有引号它认为这个是字服串

15:57.140 --> 15:58.560
如果是要进作为

15:58.560 --> 16:01.440
Games的表达式的话

16:01.440 --> 16:03.440
你一定要是去引号

16:03.440 --> 16:04.740
然后在这里面

16:04.740 --> 16:06.640
你可以做一些计算公式

16:06.640 --> 16:10.040
比如说100加100

16:10.040 --> 16:11.240
做这种计算

16:11.240 --> 16:12.540
这样计算以后的话

16:12.540 --> 16:13.540
我们再去打开

16:13.540 --> 16:15.540
你会发现它里面

16:15.540 --> 16:18.740
传输的值是它的一个计算表达式

16:18.740 --> 16:20.340
计算表达式

16:20.340 --> 16:21.540
结果

16:21.540 --> 16:22.040
OK了

16:22.040 --> 16:22.640
看到

16:22.640 --> 16:23.740
所以这样讲的话

16:23.740 --> 16:24.440
大家可以理解

16:24.440 --> 16:26.740
同时再想强调一下

16:26.740 --> 16:29.140
所谓的计算表达式也好

16:29.140 --> 16:32.340
还是属于我们的JS表达式也好

16:32.340 --> 16:35.540
所有的表达式都是不能带

16:35.540 --> 16:36.840
逻辑代码的

16:36.840 --> 16:39.340
回忆一下原先写微信的时候

16:39.340 --> 16:41.940
我们当初我们在这样的框里面

16:41.940 --> 16:44.840
我们在双大过号框里面

16:44.840 --> 16:46.340
打开微信

16:46.340 --> 16:49.340
我们打开这样的就是Peters

16:49.340 --> 16:51.140
然后在这个

16:51.140 --> 16:54.640
在我们WXML里面

16:54.640 --> 16:56.040
Peters打开

16:56.040 --> 16:57.640
在WXML里面

16:57.640 --> 16:58.440
在这种时候

16:58.440 --> 17:00.040
我们一般性会像这种

17:00.040 --> 17:01.440
双大过号的方式

17:01.440 --> 17:02.640
在双引号里面

17:02.640 --> 17:03.540
我们这里边

17:03.540 --> 17:06.940
你什么时候写过我们的逻辑代码

17:07.040 --> 17:08.340
我们只能说是

17:08.340 --> 17:09.540
你在语法上

17:09.540 --> 17:12.440
它属于表达式的形式可以写

17:12.440 --> 17:13.740
我们讲什么表达式

17:13.740 --> 17:14.540
一

17:14.540 --> 17:15.740
变量

17:15.740 --> 17:17.540
我们也可以把它称为表达式

17:17.540 --> 17:18.340
二

17:18.340 --> 17:19.740
计算

17:19.740 --> 17:20.340
对吧

17:20.340 --> 17:21.140
三

17:21.140 --> 17:22.240
逻辑判断

17:22.240 --> 17:23.740
主要不是逻辑代码

17:23.740 --> 17:26.140
比如说

17:26.140 --> 17:28.040
IS否大于5

17:28.040 --> 17:30.840
这种称为逻辑判断表达式

17:30.840 --> 17:31.740
对吧

17:31.740 --> 17:32.840
还有什么

17:32.840 --> 17:33.840
我们可以写

17:33.840 --> 17:35.340
三元运算

17:35.340 --> 17:35.740
对吧

17:35.840 --> 17:37.340
三目运三目操作

17:37.340 --> 17:38.540
什么问号

17:38.540 --> 17:39.240
帽号

17:39.240 --> 17:40.840
这样的结构都可以

17:40.840 --> 17:43.640
但是你没有办法在里面去写什么

17:43.640 --> 17:44.940
if否

17:44.940 --> 17:45.540
这种结构

17:45.540 --> 17:47.140
你不可以在里面写的

17:47.140 --> 17:48.740
所以我们这边是一样

17:48.740 --> 17:49.540
表达式结构

17:49.540 --> 17:50.940
也不能去完成否

17:50.940 --> 17:52.140
跟if里面的书写

17:52.140 --> 17:55.240
所以我们只能把if否写在我们的

17:55.240 --> 17:56.040
代码中

17:56.040 --> 17:57.640
你可以通过代码的方式

17:57.640 --> 17:59.840
来完成这样的一个编写

17:59.840 --> 18:01.340
我们来看一下

18:01.340 --> 18:02.840
来对它进行一个操作

18:02.840 --> 18:03.340
比如说

18:03.340 --> 18:05.040
我们这边设定一变量

18:05.040 --> 18:07.940
我们称之为flag

18:07.940 --> 18:08.940
q

18:08.940 --> 18:14.020
我们flag设之为一个q

18:14.020 --> 18:14.920
它放在哪

18:14.920 --> 18:18.320
放在这个randow语句里面

18:18.320 --> 18:21.220
放在这个randow语句里面

18:21.220 --> 18:22.520
放在return外面

18:22.520 --> 18:23.620
randow里面

18:23.620 --> 18:25.920
这里是可以写的

18:25.920 --> 18:27.020
那么我们来看一下

18:27.020 --> 18:28.820
我们可以对它的输入

18:28.820 --> 18:31.520
我们可以做一个变量的判断

18:31.520 --> 18:40.420
我们做一个this-corruption

18:40.420 --> 18:41.120
描述

18:41.120 --> 18:43.320
我们给它一个变量的描述

18:43.420 --> 18:44.520
那么这个变量

18:44.520 --> 18:48.120
我们在这里进行定义

18:48.120 --> 18:49.320
我们定一个变量

18:49.320 --> 18:52.620
然后我们可以做一个简单的操作

18:52.620 --> 18:56.120
比如说我们去得到当前的

18:56.120 --> 18:58.920
我们的status

18:58.920 --> 19:00.620
我们status上面定一个变量

19:00.620 --> 19:07.140
flag对吧

19:07.140 --> 19:09.140
我们如果它是q的话

19:09.140 --> 19:10.840
那我们里面去做什么

19:10.840 --> 19:14.100
把它的复职

19:14.100 --> 19:17.000
等于

19:17.000 --> 19:18.400
附上一个文本

19:18.400 --> 19:19.700
叫做

19:19.700 --> 19:27.850
这是一个正确的显示

19:27.850 --> 19:33.470
不然

19:33.470 --> 19:41.840
discretion

19:41.840 --> 19:44.840
这是一个错误的显示

19:44.840 --> 19:48.590
到

19:48.590 --> 19:48.890
好

19:48.890 --> 19:50.490
我们把这几个写好

19:50.490 --> 19:51.390
看一下

19:51.390 --> 19:52.790
现在的情况是什么

19:52.790 --> 19:54.290
我们在运行看代码之前

19:54.290 --> 19:55.890
我们先看一下效果

19:55.890 --> 19:58.090
现在是如果说

19:58.090 --> 20:00.390
我现在status里面的flag

20:00.390 --> 20:02.390
它现在形成了一个q的话

20:02.390 --> 20:03.490
那么应该是正确的

20:03.490 --> 20:06.190
我上面给到的一个初始指示q

20:06.190 --> 20:10.190
所以的话它应该是一个正确的显示

20:10.190 --> 20:12.690
这是个正确的显示

20:12.690 --> 20:14.990
那么我flag这个值改变一下

20:14.990 --> 20:16.190
那么改变的方式

20:16.190 --> 20:18.190
我们依然可以通过

20:18.190 --> 20:22.490
我们这里边写上一个button

20:22.490 --> 20:27.470
我们做一个按钮的改变

20:27.470 --> 20:30.010
改变

20:30.010 --> 20:33.640
改变值

20:33.640 --> 20:34.840
然后我们来写

20:34.840 --> 20:44.430
我们写上一个onclick

20:44.430 --> 20:46.130
onclick来做

20:46.130 --> 20:48.030
onclick我们写上disc点

20:48.030 --> 20:50.630
我们写一个

20:50.630 --> 20:53.830
我们引号不打

20:53.830 --> 20:54.630
disc点

20:54.630 --> 20:56.030
我们给出一个

20:56.030 --> 21:00.870
我们叫做changer test

21:00.870 --> 21:02.470
changer test

21:02.470 --> 21:04.570
然后我们把这个changer test

21:04.570 --> 21:11.170
写上去一下

21:11.170 --> 21:12.870
我们写一下它叫什么

21:12.870 --> 21:15.070
它叫做

21:15.070 --> 21:18.580
改变我们的flag

21:18.580 --> 21:19.180
对吧

21:19.180 --> 21:20.780
它里面调用changer test

21:20.780 --> 21:21.880
那么它改变flag

21:21.880 --> 21:22.980
它改变以后的话

21:22.980 --> 21:25.480
那么这个就会进行改变

21:25.480 --> 21:31.580
我们来看一下

21:31.580 --> 21:36.740
disc点set stator

21:36.740 --> 21:38.240
disc点set stator

21:38.240 --> 21:39.340
我们做一个改变

21:39.340 --> 21:43.590
那么这里边的flag

21:43.590 --> 21:45.190
我们改成first

21:45.190 --> 21:47.390
或者取反

21:47.390 --> 21:48.490
哎呦

21:48.490 --> 21:49.390
取反对吧

21:49.390 --> 21:59.510
flag

21:59.510 --> 22:07.800
disc点stator点flag

22:07.800 --> 22:08.400
写好了

22:08.400 --> 22:09.600
简单看一下代码

22:09.600 --> 22:11.700
我们首先有一个正确的显示

22:11.700 --> 22:12.600
应该是true

22:12.600 --> 22:15.500
然后我们现在给了一个改变值

22:15.500 --> 22:17.200
改变值会用unclick的方式

22:17.200 --> 22:19.500
去调取我们的一个changer test

22:19.500 --> 22:21.500
changer test是我们写的一个

22:21.500 --> 22:22.500
事件处理函数

22:22.500 --> 22:23.300
这个事件处理函数

22:23.300 --> 22:26.400
主要是完成flag里面值的一个切换

22:26.400 --> 22:27.000
这样的话

22:27.000 --> 22:27.900
我们应该看到

22:27.900 --> 22:29.900
在我组件里面的这个内容

22:29.900 --> 22:32.400
会完成我们现在的一个数值的变化

22:32.400 --> 22:32.700
好

22:32.700 --> 22:35.200
我们来看一下页面

22:35.200 --> 22:41.210
我们刷新一下

22:41.210 --> 22:42.210
正确的显示

22:42.210 --> 22:43.810
改变错误

22:43.810 --> 22:44.710
改变

22:44.710 --> 22:45.810
是不是

22:45.810 --> 22:46.910
会有这个效果

22:46.910 --> 22:48.310
所以我们讲的是

22:48.310 --> 22:51.410
我们可以通过这样的方式

22:51.410 --> 22:54.610
给我们属性进行数据的传递

22:54.610 --> 22:55.310
当然

22:55.310 --> 22:58.010
我们现在的所有的if与g

22:58.010 --> 22:59.610
都不能写在表达室里面

22:59.610 --> 23:01.210
你可以单拿出来写

23:01.210 --> 23:03.710
在randle里面写

23:03.710 --> 23:04.610
在组件里面

23:04.610 --> 23:06.710
同样可以去做这个事情

23:06.710 --> 23:07.710
在组件里面

23:07.710 --> 23:08.610
这边是拿

23:08.610 --> 23:09.910
那么组件里怎么干呢

23:09.910 --> 23:11.910
其实组件里面的话

23:11.910 --> 23:13.610
你在这里去写什么

23:13.610 --> 23:14.810
是这个属性

23:14.810 --> 23:15.710
你可以在这边写

23:15.710 --> 23:17.410
你看着我

23:17.410 --> 23:19.510
你可以去做属性的操作

23:19.510 --> 23:20.810
如果

23:20.810 --> 23:26.510
当前的property.myTester

23:26.510 --> 23:28.510
等于

23:28.510 --> 23:30.110
比如我们就举一个势力

23:30.110 --> 23:35.220
这是一个正确的显示

23:35.220 --> 23:36.420
那我们这边

23:36.420 --> 23:38.220
就直接可以设定一个变量

23:38.220 --> 23:45.030
我们设定为

23:45.030 --> 23:46.330
component

23:46.330 --> 23:47.230
我们这样叫

23:47.230 --> 23:52.450
componentTest

23:52.450 --> 23:53.750
这样叫

23:53.750 --> 23:54.750
那么如果正确的话

23:54.750 --> 23:56.850
我们就把componentTester里面的内容

23:56.850 --> 24:02.120
告诉他

24:02.120 --> 24:04.020
显示正确

24:04.020 --> 24:05.220
一个字体

24:05.220 --> 24:16.020
不然

24:16.020 --> 24:18.520
显示错误

24:18.520 --> 24:19.720
这样显示

24:19.720 --> 24:22.920
那么对于我们的这行的文本来讲的话

24:22.920 --> 24:25.420
我们就把它替换成这个了

24:25.420 --> 24:27.520
由于我在randle中定义的变量

24:27.520 --> 24:29.520
所以这边我们不需要去做this

24:29.520 --> 24:29.820
对吧

24:29.820 --> 24:31.620
我们直接拿出这个来

24:31.620 --> 24:31.820
好

24:31.820 --> 24:33.820
那我们现在再来看一下效果

24:33.820 --> 24:34.620
内部一幅

24:34.620 --> 24:36.920
外部一幅两处改变

24:36.920 --> 24:38.120
看到吗

24:38.120 --> 24:38.920
我传进去

24:38.920 --> 24:40.220
这是一个正确的显示

24:40.220 --> 24:41.220
这是一个错误显示

24:41.220 --> 24:42.820
但它显示时候显示正确

24:42.820 --> 24:44.620
显示错误

24:44.620 --> 24:46.320
这是我们说到的

24:46.320 --> 24:48.420
无论是组件内还是组件外

24:48.420 --> 24:51.320
JSA在运用过程中都可以

24:51.320 --> 24:53.920
只不过组件内它多了一个操作

24:53.920 --> 24:56.220
就是它可以去获取你purpose里面

24:56.220 --> 24:58.220
所数据传过来的内容

24:58.220 --> 24:59.820
是这个逻辑

24:59.820 --> 25:02.120
你出来我们回到页面中

25:02.120 --> 25:04.720
那么我们这边除了使用变量以外

25:04.720 --> 25:06.520
其实自服串自面量

25:06.520 --> 25:10.120
我们本身也是作为它的一个显示格式存在的

25:10.120 --> 25:11.520
我们也可以直接用的

25:11.520 --> 25:12.920
我们来写一下

25:12.920 --> 25:19.500
我们把view继续使用

25:19.500 --> 25:21.300
比如我们在这边

25:21.300 --> 25:24.400
我们大家最常见的我们说法

25:24.400 --> 25:25.700
你可以直接以

25:25.700 --> 25:27.000
比如说

25:27.000 --> 25:28.700
Hello world

25:29.900 --> 25:32.100
这样的方式做输出

25:32.100 --> 25:33.800
直接把一个自服串

25:33.800 --> 25:35.600
你把它放在这个

25:35.600 --> 25:38.600
叫做表达式里面的输出

25:38.600 --> 25:39.300
你看

25:39.300 --> 25:43.900
和你直接再用到我们自服串的输出

25:43.900 --> 25:49.330
这个逻辑上和你这样写

25:49.330 --> 25:59.960
再和你现在直接写

25:59.960 --> 26:06.120
这个过程其实是一样的

26:06.120 --> 26:06.720
对吧

26:06.720 --> 26:07.520
多打了一个

26:07.520 --> 26:12.080
这没关系

26:12.080 --> 26:12.880
这个是一样的

26:12.880 --> 26:15.080
所以从这个角度来讲的话

26:15.080 --> 26:18.080
我们本身还是属于比较合理

26:18.080 --> 26:22.280
或者称之为能看懂的一点

26:22.280 --> 26:24.280
那么在传之过程中也是一样

26:24.280 --> 26:25.580
我们以前说过

26:25.580 --> 26:28.280
这边里面你直接传自服串

26:28.280 --> 26:28.980
就是我们说的

26:28.980 --> 26:30.580
我们把后面传一个

26:30.580 --> 26:31.780
My name

26:31.780 --> 26:35.700
我们传入一个

26:35.700 --> 26:39.720
Johnson和

26:39.720 --> 26:42.120
你直接再用我们的这种方式传

26:42.120 --> 26:44.620
在上一节课里面我们是讲过的

26:44.620 --> 26:46.820
这样传是一样的

26:46.820 --> 26:47.320
对吧

26:47.320 --> 26:48.220
这两个结构

26:48.220 --> 26:48.720
ok

26:48.720 --> 26:49.620
那我这边的话

26:49.620 --> 26:52.020
我们就不再去对它进行操作了

26:52.020 --> 26:55.790
我们就提一下

26:55.790 --> 26:56.490
好了

26:56.490 --> 26:58.490
那么紧接着我们再说一下

26:58.490 --> 27:01.190
如果说这个值没有传送

27:01.190 --> 27:04.390
也就是说你只是给了一个属性的话

27:04.390 --> 27:06.190
那么它在呈现的时候

27:06.190 --> 27:10.190
是以一个布尔之Q作为它的数据存在的

27:10.190 --> 27:11.190
我们可以看到

27:11.190 --> 27:12.290
现在打开以后

27:12.290 --> 27:13.890
Johnson没有问题

27:13.890 --> 27:15.190
那么我们来做

27:15.190 --> 27:16.290
我们看一下

27:16.290 --> 27:18.390
如果我现在再写一个

27:18.390 --> 27:24.500
我叫做My boarding

27:24.500 --> 27:26.700
我传一个My boarding过来

27:26.700 --> 27:28.800
在My boarding在这个位置上面

27:28.800 --> 27:30.200
我们没有给它指

27:30.200 --> 27:31.000
不是

27:31.000 --> 27:32.800
我们到属性

27:32.800 --> 27:35.700
组建里面去

27:35.700 --> 27:36.700
我们来看一下

27:36.800 --> 27:39.400
我们这边做一个if

27:39.400 --> 27:41.000
如果

27:41.000 --> 27:44.700
this.purpose.myboarding

27:44.700 --> 27:48.330
它如果是真

27:48.330 --> 27:49.830
如果是真的话

27:49.830 --> 27:51.030
那我们就应该

27:51.030 --> 27:52.730
我们不做打印

27:52.730 --> 27:54.530
我们直接在页面中

27:54.530 --> 27:58.380
我们这边显示

27:58.380 --> 28:13.020
再显示一个

28:13.020 --> 28:19.460
我们在外面写数据为

28:19.460 --> 28:22.160
里面写一遍量

28:22.160 --> 28:37.280
咱们叫做My boarding test

28:37.280 --> 28:38.280
给它放直

28:38.280 --> 28:45.950
它叫做

28:45.950 --> 28:58.480
不然

28:58.480 --> 29:02.640
我们把My boarding test放这里

29:02.640 --> 29:05.640
我前面没有给My boarding

29:05.640 --> 29:06.640
传任何的值

29:06.640 --> 29:07.540
看到没有

29:07.540 --> 29:09.140
那么现在我们来看一下

29:09.140 --> 29:13.140
它在这个位置上给我呈现的是什么

29:13.140 --> 29:14.240
数据为真

29:14.240 --> 29:15.140
看到了吗

29:15.140 --> 29:17.640
所以我们强调了一下

29:17.640 --> 29:19.940
当你没有给任何参数情况下

29:19.940 --> 29:23.640
其实你传输进来的这样的一个值

29:23.640 --> 29:45.320
为真

29:45.320 --> 29:47.520
这个和微信里面是一样的

29:47.520 --> 29:49.320
微信在调用组件的时候

29:49.320 --> 29:50.620
你是否还想得起来

29:50.620 --> 29:52.120
微信在调用组件

29:52.120 --> 29:53.620
包括是我们里面

29:53.620 --> 29:54.420
我这边写一下

29:54.420 --> 29:56.520
待会不保存

29:56.520 --> 29:57.920
比如说我们大家

29:57.920 --> 29:59.320
平时在这边

29:59.320 --> 30:00.320
如果是原生

30:00.320 --> 30:01.820
你去写这个

30:01.820 --> 30:02.720
swapper

30:02.720 --> 30:05.520
我们做那个滚轴的时候

30:05.520 --> 30:07.820
我们里面做swap item

30:07.820 --> 30:08.320
这样去做

30:08.320 --> 30:09.420
我就不写下去了

30:09.420 --> 30:10.620
你想让它自动

30:10.620 --> 30:11.920
让它自动的滚动

30:11.920 --> 30:13.620
那么你会写O2

30:13.620 --> 30:14.920
这个就已

30:14.920 --> 30:16.320
你如果直接这么写的话

30:16.320 --> 30:20.820
它是不会进行所谓的操作的

30:20.820 --> 30:22.620
因为本身来讲空

30:22.620 --> 30:24.320
这个事情对它来讲

30:24.320 --> 30:25.820
就算有值

30:25.820 --> 30:26.820
你如果不要它

30:26.820 --> 30:27.520
你写frost

30:27.520 --> 30:28.720
这也是没用的

30:28.720 --> 30:30.220
我们把它给删了

30:30.220 --> 30:31.120
这种写法

30:31.120 --> 30:32.320
包括是我说要点

30:32.320 --> 30:33.320
大家应该想到

30:33.320 --> 30:34.320
这个词

30:34.320 --> 30:35.320
indicator daughters

30:35.320 --> 30:36.920
我们就这么写

30:36.920 --> 30:40.120
它也是传输了一个我们的属性名

30:40.120 --> 30:41.020
没有给值

30:41.020 --> 30:42.520
那么在这种情况下

30:42.520 --> 30:45.220
你能看到的数据结果

30:45.220 --> 30:46.520
它里面的就是真

30:46.520 --> 30:48.520
也就是说这个会运行

30:48.520 --> 30:49.320
理解吧

30:49.320 --> 30:52.520
所以它和我们这个结构是一样的

30:52.520 --> 30:53.120
OK

30:53.120 --> 30:57.120
我们把这个部分去保存

30:57.120 --> 30:59.720
紧接着我们继续往下

30:59.720 --> 31:02.620
我们看到了现在的jsX的整个形式

31:02.620 --> 31:05.320
包括是我们现在的一个字幕上的方式

31:05.320 --> 31:07.520
包括是我们现在在书写的

31:07.520 --> 31:09.120
那么注意到这个button

31:09.120 --> 31:09.920
我们说过

31:09.920 --> 31:12.320
上面如果没有作为引入的话

31:12.320 --> 31:13.520
它依然可以使用

31:13.520 --> 31:16.520
但是最好的方式是把它引进来

31:16.520 --> 31:18.520
让系统能够在预编译的时候

31:18.520 --> 31:20.920
能够看到现在页面中的内容

31:20.920 --> 31:22.920
第二部分我们可以欠套

31:22.920 --> 31:23.920
我们说一下

31:23.920 --> 31:25.920
我们的jsX本身语法结构

31:25.920 --> 31:27.420
我们并没有要求你说

31:27.420 --> 31:29.420
这里面一定写哪一种内容

31:29.420 --> 31:31.720
它不像HTML规定死你了

31:31.720 --> 31:32.920
这个标签和那个标签

31:32.920 --> 31:34.920
是一个什么样的特点

31:34.920 --> 31:37.820
它有点像就是我们刚才说到的

31:37.820 --> 31:41.820
它是HTML和XML

31:42.820 --> 31:43.820
咱们叫做什么

31:43.820 --> 31:45.820
可扩展标记语言

31:45.820 --> 31:47.820
如果你还记得XML的话

31:47.820 --> 31:48.820
你可以记得

31:49.820 --> 31:54.820
Lambrage Markup Lambrage

31:55.820 --> 31:57.820
可扩展标记语言

31:57.820 --> 31:59.820
它是标记名称由你自行定义

31:59.820 --> 32:02.820
然后自行进它DTD的这样的描述

32:02.820 --> 32:05.820
再加上Scaml完成这样的一个书写

32:05.820 --> 32:07.820
为了做数据传输而使用

32:07.820 --> 32:10.820
很少去涉及到它的一个页面的展示

32:10.820 --> 32:12.820
这是我们说到的一个XML

32:12.820 --> 32:15.820
但是我们现在在这里面也是一样

32:16.820 --> 32:18.820
JXX的话不定义

32:18.820 --> 32:20.820
现在的整个的规范

32:20.820 --> 32:23.820
但是它只是标签上面

32:23.820 --> 32:25.820
你没有规定一定要写这个标签

32:25.820 --> 32:26.820
是这一图

32:26.820 --> 32:28.820
紧接着我们说一下

32:28.820 --> 32:31.820
我们的JXX本身是可以进行签套的

32:31.820 --> 32:33.820
当然它有个要求

32:33.820 --> 32:37.820
就是你所有的标签都必须有必合式存在

32:37.820 --> 32:39.820
你必须有必合式存在

32:39.820 --> 32:42.820
也就是说双标签必须要有结束位

32:42.820 --> 32:45.820
单标签必须要有结束杠

32:45.820 --> 32:47.820
你说我没有它

32:47.820 --> 32:48.820
看到吧

32:48.820 --> 32:50.820
绿色的一大堆等等又给你爆出来了

32:50.820 --> 32:51.820
并且我觉得

32:51.820 --> 32:55.820
就是属于我们的这个叫做

32:55.820 --> 32:57.820
VSCode加上Talo的爆错

32:57.820 --> 33:01.820
还是比较非常中国化

33:01.820 --> 33:02.820
它这里边

33:02.820 --> 33:04.820
虽然说它所谓的站

33:04.820 --> 33:06.820
一些对列的方式的话

33:06.820 --> 33:08.820
它里面也会有相距的连环的错

33:08.820 --> 33:10.820
但它前面至少这边的错误

33:10.820 --> 33:12.820
修改编译还是以中文方式

33:12.820 --> 33:14.820
这个的话还是比较人性

33:14.820 --> 33:16.820
对中国人来说

33:16.820 --> 33:18.820
紧接着我们继续往下来走

33:18.820 --> 33:19.820
我们会看到的是

33:19.820 --> 33:22.820
我们需要可以做签套逻辑处理

33:22.820 --> 33:24.820
那么签套逻辑处理是

33:24.820 --> 33:26.820
我们可以不把你现在的代码

33:26.820 --> 33:28.820
全写在我们的Return里面

33:28.820 --> 33:30.820
我们可以把它直接提出来

33:30.820 --> 33:33.820
然后单独形成一个文件式的

33:33.820 --> 33:34.820
我们的签套处理

33:34.820 --> 33:36.820
最后才放进来

33:36.820 --> 33:38.820
但是前提要注意一下

33:38.820 --> 33:40.820
在我们Return输出的时候

33:40.820 --> 33:42.820
你只能有一个跟文件节点

33:42.820 --> 33:45.820
你随意的把两个拿出来

33:45.820 --> 33:47.820
等等又给你爆错

33:47.820 --> 33:48.820
又给你爆错

33:48.820 --> 33:52.130
所以这点咱们知道一下

33:52.130 --> 33:53.130
那我们现在

33:53.130 --> 33:54.130
你可以在这边

33:54.130 --> 33:55.130
我们简单的看到

33:55.130 --> 33:59.400
我们可以比如说

33:59.400 --> 34:01.400
我们订一下

34:01.400 --> 34:04.400
Element

34:04.400 --> 34:06.400
整个这一段的所有内容

34:06.400 --> 34:08.400
全部给它放到上面来

34:08.400 --> 34:11.400
形成一个对相级的JSA的模型

34:11.400 --> 34:13.400
然后在输出的时候

34:13.400 --> 34:14.400
直接把Element进行输出

34:14.400 --> 34:16.400
元素级

34:16.400 --> 34:17.400
Element

34:17.400 --> 34:19.840
这样输出

34:19.840 --> 34:20.840
那么看

34:20.840 --> 34:21.840
编译是没有问题的

34:21.840 --> 34:22.840
输出的时候

34:22.840 --> 34:23.840
我们看一下

34:23.840 --> 34:26.600
应该也没有问题

34:26.600 --> 34:27.600
正常的出来了

34:27.600 --> 34:28.600
OK

34:28.600 --> 34:29.600
那么这样的话

34:29.600 --> 34:30.600
我们就可以

34:30.600 --> 34:31.600
不是说一定要把你

34:31.600 --> 34:32.600
现在的这一代码

34:32.600 --> 34:34.600
要放在Return里面

34:34.600 --> 34:35.600
只是Return

34:35.600 --> 34:37.600
最后要返回JSA的代码

34:37.600 --> 34:38.600
是这个逻辑

34:38.600 --> 34:39.600
所以我把整个代码

34:39.600 --> 34:40.600
你可以在你的

34:40.600 --> 34:42.600
业务逻辑过程中

34:42.600 --> 34:43.600
你就把它给完善了

34:43.600 --> 34:44.600
这个是OK的

34:44.600 --> 34:45.600
这是没有问题的

34:45.600 --> 34:46.600
理解吧

34:46.600 --> 34:47.600
这个意思

34:47.600 --> 34:48.600
那么我们所谓的

34:48.600 --> 34:49.600
嵌套呢

34:49.600 --> 34:50.600
其实指的是

34:50.600 --> 34:52.600
我们可以在我们的

34:52.600 --> 34:53.600
这个语法中

34:53.600 --> 34:55.600
去使用一些嵌套规则

34:55.600 --> 34:56.600
那我们现在

34:56.600 --> 34:57.600
来给大家看一下

34:58.600 --> 35:00.600
我们在这儿写一个

35:00.600 --> 35:01.600
素组

35:01.600 --> 35:02.600
Constance

35:02.600 --> 35:04.600
咱们叫做

35:04.600 --> 35:06.600
Student

35:06.600 --> 35:08.600
Nan

35:08.600 --> 35:14.500
素组

35:14.500 --> 35:15.500
不能用这个

35:15.500 --> 35:16.500
Array

35:16.500 --> 35:17.500
不能用这个

35:17.500 --> 35:19.500
我们直接写进去

35:19.500 --> 35:21.500
我们写上

35:21.500 --> 35:30.530
Jack

35:30.530 --> 35:31.530
Mary

35:31.530 --> 35:32.530
写三个

35:32.530 --> 35:34.530
然后我们对它进行使用

35:34.530 --> 35:36.530
我们在这里边

35:36.530 --> 35:37.530
那么你注意

35:37.530 --> 35:38.530
虽然我这边

35:38.530 --> 35:39.530
你看到的

35:39.530 --> 35:40.530
好像用到的

35:40.530 --> 35:42.530
都是属于我们的

35:42.530 --> 35:44.530
微信标签

35:44.530 --> 35:45.530
如果你能不能使用

35:45.530 --> 35:47.530
我们的HTML标签呢

35:47.530 --> 35:52.510
你看我这边用一次

35:52.510 --> 35:53.510
UL

35:54.510 --> 35:58.520
然后呢我里边写上

35:58.520 --> 36:00.520
对于这一素组的

36:00.520 --> 36:04.560
Map操作

36:04.560 --> 36:06.560
放在一行完成

36:06.560 --> 36:07.560
Map操作

36:07.560 --> 36:10.320
Map

36:10.320 --> 36:16.800
里边给出

36:16.800 --> 36:17.800
匿名函数

36:17.800 --> 36:19.800
我们给一个

36:19.800 --> 36:21.800
自定义的Item

36:21.800 --> 36:25.560
或者就叫Nan吧

36:25.560 --> 36:26.560
箭头符

36:26.560 --> 36:27.560
然后

36:27.560 --> 36:29.560
后面直接给我们

36:29.560 --> 36:31.560
现在所需要输出的内容

36:31.560 --> 36:32.560
比如说我想符号

36:32.560 --> 36:34.560
后面我给出一个Tester

36:34.560 --> 36:40.080
UI吧

36:40.080 --> 36:41.080
我们给一个LI

36:41.080 --> 36:42.080
你来看一下

36:42.080 --> 36:43.080
既然我们要用

36:43.080 --> 36:45.080
HTML标签的话

36:45.080 --> 36:46.080
我们都用HTML标签

36:46.080 --> 36:48.080
你来看一下效果

36:48.080 --> 36:50.080
这里边我们完成

36:50.080 --> 36:51.080
再拿一个

36:51.080 --> 36:53.080
表达是服

36:53.080 --> 36:54.080
然后呢

36:54.080 --> 36:56.080
我们给出一个Nan

36:56.080 --> 36:58.080
这样写

36:58.080 --> 36:59.080
我们来看一下

36:59.080 --> 37:00.080
编译有没有问题

37:00.080 --> 37:01.080
Countress保存

37:01.080 --> 37:02.080
编译没有问题

37:02.080 --> 37:06.350
然后我们来看页面

37:06.350 --> 37:07.350
页面刷新一下

37:07.350 --> 37:13.630
看

37:13.630 --> 37:15.630
三个正常显示

37:15.630 --> 37:17.630
这边有抱错吗

37:17.630 --> 37:18.630
这边没有抱错

37:18.630 --> 37:20.630
但是它提供了一个警告

37:20.630 --> 37:21.630
看到吗

37:21.630 --> 37:22.630
它有一个警告

37:22.630 --> 37:23.630
我们同时呢

37:23.630 --> 37:24.630
来看一下

37:24.630 --> 37:26.630
现在的原码

37:26.630 --> 37:28.630
打上去

37:28.630 --> 37:30.630
我们打开一下

37:30.630 --> 37:40.940
原码

37:40.940 --> 37:41.940
你看啊

37:41.940 --> 37:43.940
原码打开以后的话

37:43.940 --> 37:45.940
它本身在这个上面

37:45.940 --> 37:46.940
它根本就

37:46.940 --> 37:48.940
我们看一下

37:48.940 --> 37:53.600
点上去

37:53.600 --> 37:55.600
它里面给我显示的是什么

37:55.600 --> 37:56.600
这是一个弹框

37:56.600 --> 37:58.600
这是一个这部分的

37:58.600 --> 38:03.060
那么其他的原码呢

38:03.060 --> 38:05.060
这个就要刷一下

38:05.060 --> 38:07.060
你刷的方式就是直接这样过一下

38:07.060 --> 38:09.060
你会发现什么

38:09.060 --> 38:12.060
它里面的确有ULI标签做了

38:12.060 --> 38:13.060
但是

38:13.060 --> 38:15.060
这个标签不起作用

38:15.060 --> 38:16.060
那么这一点

38:16.060 --> 38:18.060
我们就要非常详情的来说了

38:18.060 --> 38:19.060
这就是

38:21.060 --> 38:23.060
我们现在的Reactor结构

38:23.060 --> 38:25.060
包括我们的Terror

38:25.060 --> 38:26.060
在做的过程中

38:26.060 --> 38:27.060
在编译过程中的

38:27.060 --> 38:29.060
一个特别的地方了

38:30.060 --> 38:31.060
我们在做网页的时候

38:31.060 --> 38:32.060
其实这点不用考虑的

38:32.060 --> 38:33.060
在做小程序里面的时候呢

38:33.060 --> 38:35.060
这点你一定要注意

38:35.060 --> 38:36.060
首先

38:36.060 --> 38:38.060
我们现在所显示出来的小程序

38:38.060 --> 38:40.060
本身我们在做原生时候

38:40.060 --> 38:41.060
我们强调过一点

38:41.060 --> 38:42.060
我们是

38:42.060 --> 38:43.060
没有办法去做

38:43.060 --> 38:45.060
我们现在的一个

38:45.060 --> 38:46.060
HTML标签的呈现在

38:46.060 --> 38:47.060
即使你直接打进去

38:47.060 --> 38:49.060
它也会爆错

38:49.060 --> 38:50.060
但是现在你看

38:50.060 --> 38:51.060
我在手页里面

38:51.060 --> 38:53.060
我们打开手页

38:53.060 --> 38:55.060
我们打开我们的Index手页

38:55.060 --> 38:57.060
你把这个打开以后

38:57.060 --> 38:59.060
你会发现什么

38:59.060 --> 39:01.060
这里面有吗

39:01.060 --> 39:03.060
你看它

39:03.060 --> 39:05.060
有这个吗

39:05.060 --> 39:06.060
是吧

39:06.060 --> 39:08.060
那么从这个角度来讲

39:08.060 --> 39:11.060
我们现在所看到的这个页面

39:11.060 --> 39:14.060
它根本就只是作为呈现

39:14.060 --> 39:16.060
它只是作为呈现在这边

39:16.060 --> 39:18.060
我们打开这个

39:18.060 --> 39:19.060
它只是作为呈现

39:19.060 --> 39:20.060
你看

39:20.060 --> 39:22.060
它没有办法去解析这个

39:22.060 --> 39:24.060
但是它能写

39:24.060 --> 39:26.060
这个就是很有意思一点

39:26.060 --> 39:27.060
就是代表着

39:27.060 --> 39:29.060
我们现在的Taro标签

39:29.060 --> 39:31.060
能够帮助你把

39:31.060 --> 39:33.060
现在的我们的HTML标签

39:33.060 --> 39:36.060
直接放置到

39:36.060 --> 39:37.060
并不爆错

39:37.060 --> 39:39.060
但是它无法呈现

39:39.060 --> 39:41.060
它的原有功能

39:41.060 --> 39:42.060
所以这一点上面

39:42.060 --> 39:44.060
我们也需要去作为它的一个

39:44.060 --> 39:47.060
特别注意的一个点来操作的

39:47.060 --> 39:49.060
先强调的是

39:49.060 --> 39:50.060
编译过程没问题

39:50.060 --> 39:52.060
因为Taro并不知道

39:52.060 --> 39:54.060
并不知道这个标签最终

39:54.060 --> 39:55.060
会显示在你页面中

39:55.060 --> 39:56.060
因为我们没有办法

39:56.060 --> 39:58.060
告诉我们JSX

39:58.060 --> 39:59.060
这部分代码是可以

39:59.060 --> 40:00.060
这部分代码不可以

40:00.060 --> 40:01.060
因为能不能编译

40:01.060 --> 40:03.060
这个代码是由小程序本身

40:03.060 --> 40:04.060
自己来获取的

40:04.060 --> 40:06.060
所以我们在编写过程中

40:06.060 --> 40:08.060
一定需要给到它

40:08.060 --> 40:10.060
当前 现在

40:10.060 --> 40:13.060
是可以呈现的一部分的数据结构

40:13.060 --> 40:14.060
是这个意图

40:14.060 --> 40:16.060
所以我们看到了

40:16.060 --> 40:17.060
有同学如果说

40:17.060 --> 40:18.060
以后要问你

40:18.060 --> 40:21.060
我特别碰到过

40:21.060 --> 40:22.060
有一些

40:22.060 --> 40:23.060
网上看到过

40:23.060 --> 40:24.060
有一些前端的面试题

40:24.060 --> 40:26.060
它给出的一个情况是

40:26.060 --> 40:27.060
这个写法

40:27.060 --> 40:28.060
这样去写

40:28.060 --> 40:29.060
可以吗

40:29.060 --> 40:31.060
为什么没有报错

40:31.060 --> 40:33.060
为什么没有报错

40:33.060 --> 40:34.060
它没有显示这个

40:34.060 --> 40:35.060
说为什么没有报错

40:35.060 --> 40:38.060
那么只是它是考你Taro

40:38.060 --> 40:41.060
你是否知道这个框架的一个特性

40:41.060 --> 40:43.060
就是它可以帮助完成

40:43.060 --> 40:45.060
现在的一些

40:45.060 --> 40:47.060
非我们微信所识别代码

40:47.060 --> 40:49.060
能够往里进行编写

40:49.060 --> 40:50.060
并不报错

40:50.060 --> 40:52.060
但是它的呈现

40:52.060 --> 40:54.060
是不是存在于我们现在的一个

40:54.060 --> 40:57.060
正确的显示效果上面的

40:57.060 --> 40:58.060
看到了

40:58.060 --> 41:00.060
这是属于我们的一个

41:00.060 --> 41:01.060
但是你如果真的去做成

41:01.060 --> 41:03.060
其他的一些

41:03.060 --> 41:04.060
我们的话

41:04.060 --> 41:05.060
不一定

41:05.060 --> 41:06.060
我们说微信百度

41:06.060 --> 41:08.060
或者说是

41:08.060 --> 41:10.060
我们的支付宝

41:10.060 --> 41:12.060
它能不能识别

41:12.060 --> 41:14.060
那么至少在现在的情况下来讲

41:14.060 --> 41:16.060
我们不去考虑那个点

41:16.060 --> 41:17.060
我们只是考虑

41:17.060 --> 41:19.060
微信小程去的这个操作情况

41:19.060 --> 41:20.060
OK吧

41:20.060 --> 41:21.060
所以这点上面

41:21.060 --> 41:23.060
我们可以给它改变一下

41:23.060 --> 41:25.060
比如说

41:25.060 --> 41:27.060
我现在变成一个view

41:27.060 --> 41:32.040
单行处理对吧

41:32.040 --> 41:35.500
view

41:35.500 --> 41:36.500
然后这部分

41:36.500 --> 41:38.500
我们由于它是循环

41:38.500 --> 41:39.500
注意

41:39.500 --> 41:40.500
它的循环最后给你呈现

41:40.500 --> 41:42.500
才是做for each的

41:42.500 --> 41:43.500
它是做for each的

41:43.500 --> 41:44.500
所以我们里面

41:44.500 --> 41:45.500
这部分

41:45.500 --> 41:46.500
你可以完完全全

41:46.500 --> 41:47.500
去转换成

41:47.500 --> 41:53.120
其他的标签结构

41:53.120 --> 41:54.120
你用view也行

41:54.120 --> 41:55.120
你要用其他的

41:55.120 --> 41:56.120
比如说test的标签

41:56.120 --> 41:58.120
那种标签都行

41:58.120 --> 41:59.120
那么你来看到

41:59.120 --> 42:01.120
这时候它就识别到了

42:01.120 --> 42:02.120
看到吗

42:02.120 --> 42:03.120
它马上告诉你

42:03.120 --> 42:04.120
它改变了

42:04.120 --> 42:06.120
那个数牌过来了

42:06.120 --> 42:07.120
OK

42:07.120 --> 42:08.120
所以这点上面

42:08.120 --> 42:09.120
是属于jsX

42:09.120 --> 42:12.120
特别是运行于小程序端

42:12.120 --> 42:14.120
用taro的框架

42:14.120 --> 42:16.120
来做的时候的一个特点

42:16.120 --> 42:17.120
紧接着我们继续往下讲

42:17.120 --> 42:19.120
在jsX上面的话

42:19.120 --> 42:21.120
我们有三个符号

42:21.120 --> 42:23.120
应该讲在正常情况下

42:23.120 --> 42:25.120
是属于等价符号

42:25.120 --> 42:26.120
也就是我们大家

42:26.120 --> 42:28.120
平时所看到的

42:28.120 --> 42:29.120
我们写出来

42:29.120 --> 42:31.120
你写空服

42:31.120 --> 42:41.850
我们写空服

42:41.850 --> 42:43.850
以及

42:43.850 --> 42:44.850
把注释写一下

42:44.850 --> 42:46.850
这边

42:46.850 --> 42:50.850
在jsX愚法中写注释的话

42:50.850 --> 42:53.850
带上我们的jsX表达式

42:53.850 --> 42:54.850
里面去写

42:54.850 --> 42:55.850
那么同时

42:55.850 --> 42:56.850
你会看到

42:56.850 --> 42:58.850
我们在写表达式时候

42:58.850 --> 42:59.850
表达式是可以浅套的

42:59.850 --> 43:00.850
看到没有

43:00.850 --> 43:01.850
完成表达式

43:01.850 --> 43:03.850
表达式浅套表达式

43:03.850 --> 43:06.360
OK

43:06.360 --> 43:07.360
再来

43:07.360 --> 43:09.360
我们这边写一下

43:09.360 --> 43:10.360
三符号

43:10.360 --> 43:12.360
三个符号

43:12.360 --> 43:13.360
哪个呢

43:13.360 --> 43:16.370
布尔值

43:16.370 --> 43:17.370
now

43:17.370 --> 43:18.370
和

43:18.370 --> 43:26.520
and find

43:26.520 --> 43:27.520
这三个值

43:27.520 --> 43:28.520
我们说

43:28.520 --> 43:30.520
它其实都是有效的

43:30.520 --> 43:31.520
都是说明

43:31.520 --> 43:32.520
这个操作

43:32.520 --> 43:33.520
或者说这个写法

43:33.520 --> 43:34.520
OK 我知道

43:34.520 --> 43:35.520
所以我说编译器

43:35.520 --> 43:36.520
它说

43:36.520 --> 43:37.520
但是它不会被你渲染出来

43:37.520 --> 43:38.520
渲染出来

43:38.520 --> 43:39.520
就是显示的时候

43:39.520 --> 43:40.520
不会有区别

43:40.520 --> 43:41.520
所以我们看到

43:41.520 --> 43:43.520
放空

43:43.520 --> 43:44.520
或者

43:44.520 --> 43:47.280
单标签

43:47.280 --> 43:48.280
或者

43:48.280 --> 43:49.280
我们去写

43:49.280 --> 43:50.280
单标签

43:50.280 --> 43:51.280
打空一个

43:51.280 --> 43:53.280
然后我们或者

43:53.280 --> 43:54.280
去写上

43:54.280 --> 43:55.280
表达式

43:55.280 --> 44:01.240
first

44:01.240 --> 44:02.240
或者

44:02.240 --> 44:06.510
我们复制一下

44:06.510 --> 44:07.510
或者你写上

44:07.510 --> 44:14.240
表达式的now

44:14.240 --> 44:16.240
或者你写上and find

44:16.240 --> 44:26.140
甚至你写上的是

44:26.140 --> 44:31.270
true

44:31.270 --> 44:32.270
它系统能知道

44:32.270 --> 44:34.270
你这里面的一些区别

44:34.270 --> 44:35.270
它能知道你这里面

44:35.270 --> 44:36.270
是写了什么

44:36.270 --> 44:38.270
但是它显示的时候

44:38.270 --> 44:39.270
不会有任何的

44:39.270 --> 44:41.270
我们的不同点

44:41.270 --> 44:42.270
你看

44:42.270 --> 44:43.270
这边

44:44.270 --> 44:46.270
你看这边

44:46.270 --> 44:48.270
它没有一个给你呈现出来

44:48.270 --> 44:49.270
哪怕它这样的书写

44:49.270 --> 44:50.270
你看

44:50.270 --> 44:51.270
它会把你的单标签

44:51.270 --> 44:52.270
and find

44:52.270 --> 44:53.270
做成一个双标签

44:53.270 --> 44:54.270
双标签and find

44:54.270 --> 44:55.270
那么这上面

44:55.270 --> 44:57.270
还是没有的

44:57.270 --> 44:58.270
所以这点上面

44:58.270 --> 44:59.270
大家明确一下

44:59.270 --> 45:00.270
所以你等价于

45:00.270 --> 45:01.270
在微信上面

45:01.270 --> 45:02.270
到真不一样

45:02.270 --> 45:03.270
在微信上面

45:03.270 --> 45:04.270
这点上面

45:04.270 --> 45:05.270
又要跟它比较一下了

45:05.270 --> 45:07.270
我们在微信开发的时候

45:07.270 --> 45:09.270
我们经常会碰到一种情况

45:09.270 --> 45:11.270
就是我们还拿刚才那个势力

45:11.270 --> 45:12.270
来做例子

45:12.270 --> 45:13.270
swapper

45:13.270 --> 45:16.640
这点你一定要去区分开

45:16.640 --> 45:18.640
swapper item上面的话

45:18.640 --> 45:20.640
我们平时一直在上面

45:20.640 --> 45:21.640
我们说

45:21.640 --> 45:22.640
比如说我们前面说过

45:22.640 --> 45:23.640
indicated daughters

45:23.640 --> 45:25.640
如果我什么都不给

45:25.640 --> 45:26.640
那么

45:26.640 --> 45:27.640
给out to

45:27.640 --> 45:28.640
我们给out to来做

45:28.640 --> 45:30.640
这是什么空间

45:30.640 --> 45:31.640
这是指我可以作为

45:31.640 --> 45:33.640
轮波图左右滑动的

45:33.640 --> 45:35.640
我下面item我写两个

45:35.640 --> 45:36.640
对吧

45:36.640 --> 45:37.640
我这里面放上图片

45:37.640 --> 45:38.640
img的图片

45:38.640 --> 45:40.640
那么你就可以进行轮波了

45:40.640 --> 45:41.640
这个的话

45:41.640 --> 45:44.640
我们说让它轮波是否能够自动播放

45:44.640 --> 45:45.640
我们这边给个out to play

45:45.640 --> 45:47.640
当你这样写就可以了

45:47.640 --> 45:49.640
那么我们如果要控制它的话

45:49.640 --> 45:51.640
我们要带上它的数据的

45:51.640 --> 45:53.640
我们也强调过在微信中

45:53.640 --> 45:55.640
这边带上空数据

45:55.640 --> 45:57.640
和你带上一个字幅串

45:57.640 --> 45:58.640
对于微信来讲

45:58.640 --> 45:59.640
它都认为

45:59.640 --> 46:00.640
这是一个q

46:00.640 --> 46:02.640
所以你这样写

46:02.640 --> 46:03.640
其实也是q

46:03.640 --> 46:04.640
但是在微信中

46:04.640 --> 46:06.640
如果你用我们的

46:06.640 --> 46:07.640
表达式结构

46:07.640 --> 46:08.640
你去这样写的话

46:08.640 --> 46:11.640
和写Q and Force在表达式中

46:11.640 --> 46:14.640
它的效果是系统能够识别到的

46:14.640 --> 46:16.640
系统在这个时候是能识别到的

46:16.640 --> 46:18.640
但是你现在如果使用我们的

46:18.640 --> 46:19.640
Taro标签

46:19.640 --> 46:21.640
在我们的表达式里面去做的话

46:21.640 --> 46:23.640
它就粮着等价

46:23.640 --> 46:24.640
所以你这时候

46:24.640 --> 46:25.640
如果说

46:25.640 --> 46:28.640
语法存在于这样的结构的话

46:28.640 --> 46:30.640
其实无效

46:30.640 --> 46:32.640
其实你这样写和这样写

46:32.640 --> 46:33.640
是一样的

46:33.640 --> 46:35.640
所以这点需要来明确一下

46:35.640 --> 46:38.640
在我们的等效的标签里面

46:38.640 --> 46:40.640
特别是为Q and Force上面

46:40.640 --> 46:41.640
和微信的区别

46:41.640 --> 46:43.640
这点我们这边也提到一下

46:45.640 --> 46:47.640
那么这种标签的特点

46:47.640 --> 46:49.640
好处在哪里呢

46:49.640 --> 46:51.640
它其实是可以在我们

46:51.640 --> 46:53.640
正常操作过程中

46:53.640 --> 46:55.640
做一些渲染操作

46:55.640 --> 46:57.640
渲染操作的概念是指什么

46:57.640 --> 46:59.640
是指它一旦存在

46:59.640 --> 47:01.640
我们现在的一个页面

47:01.640 --> 47:02.640
就会被呈现

47:02.640 --> 47:03.640
如果不存在

47:03.640 --> 47:04.640
就不会被调油

47:04.640 --> 47:05.640
我们来看一下

47:05.640 --> 47:06.640
这是概念

47:07.640 --> 47:08.640
这个测试

47:08.640 --> 47:09.640
我们就用Dialogue

47:09.640 --> 47:11.640
MyDialogue这个组件来看

47:11.640 --> 47:12.640
它可以

47:12.640 --> 47:15.640
我们把组件放在一个表达式里面

47:15.640 --> 47:20.600
我们把组件放在表达式里面

47:20.600 --> 47:21.600
然后呢

47:21.600 --> 47:23.600
组件是否能呈现

47:23.600 --> 47:24.600
我们要靠

47:24.600 --> 47:26.600
现在Stator里面的FLAG来决定

47:26.600 --> 47:27.600
this点

47:27.600 --> 47:29.600
stator.flag

47:29.600 --> 47:31.600
这个flag呢

47:31.600 --> 47:33.600
我们给它羽上

47:33.600 --> 47:34.600
这样去写

47:34.600 --> 47:35.600
那么这个的逻辑

47:35.600 --> 47:37.600
这个的逻辑就变成的是

47:37.600 --> 47:39.600
如果说你的flag为真

47:39.600 --> 47:40.600
代表的是

47:40.600 --> 47:41.600
那么后面

47:41.600 --> 47:42.600
它才会去解析

47:42.600 --> 47:44.600
我们后面的这串内容

47:44.600 --> 47:47.600
如果说你现在flag为假

47:47.600 --> 47:49.600
那么它本身就不会再解析

47:49.600 --> 47:50.600
后面这一块

47:50.600 --> 47:51.600
就意味着

47:51.600 --> 47:52.600
后面的这个组件

47:52.600 --> 47:53.600
或者这样的一个呈现

47:53.600 --> 47:54.600
标签

47:54.600 --> 47:56.600
它是不会被渲染呈现的

47:56.600 --> 47:57.600
现在我们看一下

47:57.600 --> 47:58.600
这个flag

47:58.600 --> 48:00.600
我们上面给它的是force

48:00.600 --> 48:01.600
所以此时

48:01.600 --> 48:02.600
你看页面

48:02.600 --> 48:04.600
中间是没有那个弹框的

48:05.600 --> 48:07.600
它是主要是在渲染这一块上面

48:07.600 --> 48:09.600
我们可以大量采用这样的方式

48:09.600 --> 48:11.600
如果说现在有Q的话

48:11.600 --> 48:13.600
我们再看它刷新一下

48:13.600 --> 48:15.600
中间那个弹框就出来了

48:15.600 --> 48:19.510
你别等一下

48:19.510 --> 48:28.840
我们再刷一下

48:29.840 --> 48:31.840
看一下这里边

48:31.840 --> 48:32.840
这是Q

48:32.840 --> 48:33.840
没有关系

48:34.840 --> 48:35.840
出来了

48:35.840 --> 48:36.840
就表示现在

48:36.840 --> 48:37.840
速度比较慢一点

48:37.840 --> 48:38.840
好

48:38.840 --> 48:40.840
那么这个是我们现在

48:40.840 --> 48:41.840
大家所看到的

48:41.840 --> 48:42.840
jsX

48:42.840 --> 48:44.840
本身自己的几个愈发点

48:44.840 --> 48:46.840
在我们react中的运用的话

48:46.840 --> 48:48.840
特别是在小程序中

48:48.840 --> 48:50.840
有几个点和小程序的不同点

48:50.840 --> 48:52.840
以及它里面能够

48:52.840 --> 48:54.840
实现一个什么样的功能的操作

48:54.840 --> 48:55.840
我们在这边讲了一下

48:55.840 --> 48:56.840
好

48:56.840 --> 48:57.840
我们回顾一下

48:57.840 --> 48:58.840
刚才说的内容

48:58.840 --> 48:59.840
第一的话

48:59.840 --> 49:00.840
我们讲

49:00.840 --> 49:01.840
我们的jsX

49:01.840 --> 49:02.840
本身自己

49:02.840 --> 49:03.840
里面的写法

49:03.840 --> 49:04.840
应该讲是多种多样

49:04.840 --> 49:06.840
我们可以自行的完成

49:06.840 --> 49:07.840
这样的一个

49:07.840 --> 49:09.840
jsX的本身的表达的定义

49:09.840 --> 49:11.840
或者称之为元素的定义

49:11.840 --> 49:12.840
然后

49:12.840 --> 49:13.840
我们在里面

49:13.840 --> 49:14.840
写法上一定要注意

49:14.840 --> 49:15.840
首先

49:15.840 --> 49:16.840
jsX必须有一个

49:16.840 --> 49:18.840
我们的根结点存在

49:18.840 --> 49:19.840
有个根结点

49:19.840 --> 49:20.840
你在根结点中

49:20.840 --> 49:22.840
你可以写任何你要的代码

49:22.840 --> 49:23.840
第二

49:23.840 --> 49:24.840
在做这个页面的时候

49:24.840 --> 49:26.840
我们一定需要去引入

49:26.840 --> 49:28.840
tarrow的这样的一个

49:29.840 --> 49:30.840
tarrow的那个类

49:30.840 --> 49:31.840
包括是我们

49:31.840 --> 49:32.840
现在的

49:32.840 --> 49:34.840
imponent的类来回来

49:34.840 --> 49:35.840
imponent的类

49:35.840 --> 49:36.840
引入以后的话

49:36.840 --> 49:37.840
它是作为一个积类存在

49:37.840 --> 49:38.840
然后完成我们

49:38.840 --> 49:40.840
现在的整个代码的创建

49:40.840 --> 49:41.840
再往下

49:41.840 --> 49:42.840
我们能看到

49:42.840 --> 49:43.840
我们现在

49:43.840 --> 49:44.840
去引入我们的组件

49:44.840 --> 49:45.840
这个组件

49:45.840 --> 49:48.840
主要是微信端的一些的标签

49:48.840 --> 49:49.840
那么这个标签

49:49.840 --> 49:50.840
我们完全就可以把它

49:50.840 --> 49:51.840
作为jsX的一个

49:51.840 --> 49:53.840
预载入的格式

49:53.840 --> 49:54.840
然后样式结构

49:54.840 --> 49:55.840
先不用管

49:55.840 --> 49:56.840
紧接着

49:56.840 --> 49:58.840
我们在做页面的时候

49:58.840 --> 50:00.840
特别注意我们的命名

50:00.840 --> 50:02.840
我们在做命名的时候

50:02.840 --> 50:03.840
特别是对于我们的

50:03.840 --> 50:05.840
一些组件的载入来讲

50:05.840 --> 50:06.840
单语

50:06.840 --> 50:07.840
单语成

50:07.840 --> 50:08.840
用大写字母

50:08.840 --> 50:10.840
大写的这个表示

50:10.840 --> 50:11.840
OK没问题

50:11.840 --> 50:14.840
但是我们所谓的

50:14.840 --> 50:16.840
多个名称表示的话

50:16.840 --> 50:18.840
用叫做大拓风式命名

50:18.840 --> 50:19.840
大拓风式

50:19.840 --> 50:20.840
手字母大写

50:20.840 --> 50:21.840
后名字母

50:21.840 --> 50:23.840
依然手字母大写的方式

50:23.840 --> 50:24.840
不然不是这么写的话

50:24.840 --> 50:26.840
它肯定不会显示

50:26.840 --> 50:27.840
然后下面

50:27.840 --> 50:28.840
我们就采取的是

50:28.840 --> 50:29.840
依然的这样的结构

50:29.840 --> 50:30.840
就可以了

50:30.840 --> 50:32.840
这是属于命名上面

50:32.840 --> 50:33.840
讲到的

50:33.840 --> 50:34.840
紧接着再讲的是

50:34.840 --> 50:35.840
它的js表达式

50:35.840 --> 50:37.840
表达式上面我们讲了

50:37.840 --> 50:38.840
表达式的标签上面

50:38.840 --> 50:39.840
有几点可要注意的

50:39.840 --> 50:40.840
1

50:40.840 --> 50:41.840
它里面可以做计算

50:41.840 --> 50:42.840
计算的方式

50:42.840 --> 50:43.840
我们说了

50:43.840 --> 50:44.840
表达式的计算的话

50:44.840 --> 50:46.840
会根据你里面的规则

50:46.840 --> 50:48.840
自行完成计算

50:48.840 --> 50:50.840
它有点像什么呢

50:50.840 --> 50:51.840
它有点像我们在

50:51.840 --> 50:54.840
js里面

50:54.840 --> 50:57.840
js里面有一个这个词

50:57.840 --> 50:58.840
EVO

50:58.840 --> 50:59.840
是一个EVO

50:59.840 --> 51:00.840
计算的表达式的概念

51:00.840 --> 51:01.840
也是一样

51:01.840 --> 51:02.840
包括是我们在

51:02.840 --> 51:03.840
这我写一下

51:03.840 --> 51:07.150
js里面

51:07.150 --> 51:08.150
解全

51:08.150 --> 51:14.660
微信里面的

51:14.660 --> 51:21.270
微信是mini program

51:21.270 --> 51:22.270
微信里面的什么呢

51:22.270 --> 51:24.270
微信里面的

51:24.270 --> 51:26.270
双符号

51:26.270 --> 51:28.270
这样的结构

51:28.270 --> 51:29.270
这样的话

51:29.270 --> 51:30.270
我们就理解了

51:30.270 --> 51:31.270
这表达式的

51:31.270 --> 51:32.270
基本上的一个概念

51:32.270 --> 51:33.270
如果你理解

51:33.270 --> 51:34.270
这两个词的话

51:34.270 --> 51:35.270
就很容易

51:35.270 --> 51:36.270
它的话

51:36.270 --> 51:37.270
可以写我们的自符串

51:37.270 --> 51:38.270
这三种形式

51:38.270 --> 51:39.270
其实是一样

51:39.270 --> 51:40.270
也可以写变量

51:40.270 --> 51:41.270
变量里面完成

51:41.270 --> 51:43.270
你现在数据的展入

51:43.270 --> 51:44.270
都可以

51:44.270 --> 51:45.270
同时

51:45.270 --> 51:46.270
我们看到

51:46.270 --> 51:47.270
这个表达式

51:47.270 --> 51:48.270
它是可以进行

51:48.270 --> 51:49.270
嵌套操作的

51:49.270 --> 51:51.270
我们外层一个表达式

51:51.270 --> 51:52.270
内部

51:52.270 --> 51:53.270
我们做了一个

51:53.270 --> 51:54.270
比如说map

51:54.270 --> 51:55.270
它里面还可以

51:55.270 --> 51:56.270
再嵌套一个表达式

51:56.270 --> 51:57.270
这个结构

51:57.270 --> 51:58.270
那有同学问

51:58.270 --> 51:59.270
如果里面

51:59.270 --> 52:00.270
这表达式没有的话

52:00.270 --> 52:01.270
那么

52:01.270 --> 52:02.270
它会认为

52:02.270 --> 52:03.270
这是一个普通

52:03.270 --> 52:04.270
普通的一个

52:04.270 --> 52:05.270
自符串

52:05.270 --> 52:06.270
我们来看一下页面

52:06.270 --> 52:09.540
它会认为

52:09.540 --> 52:10.540
这是个普通自符串

52:10.540 --> 52:11.540
所以

52:11.540 --> 52:12.540
这点

52:12.540 --> 52:13.540
大家注意一下

52:13.540 --> 52:14.540
凡是

52:14.540 --> 52:16.540
你在做我们的js

52:16.540 --> 52:17.540
这个表达式

52:17.540 --> 52:18.540
注意一下

52:18.540 --> 52:19.540
外层表达式

52:19.540 --> 52:20.540
它是作为

52:20.540 --> 52:22.540
业务逻辑判断

52:22.540 --> 52:23.540
和执行的一个点

52:23.540 --> 52:25.540
内部的这个表达式

52:25.540 --> 52:26.540
它是作为一个

52:26.540 --> 52:27.540
输出的

52:27.540 --> 52:29.540
一个变量的转换

52:29.540 --> 52:30.540
这两个概念上

52:30.540 --> 52:31.540
是不一样的

52:31.540 --> 52:32.540
再往下

52:32.540 --> 52:33.540
我们说过

52:33.540 --> 52:34.540
表达式本身

52:34.540 --> 52:35.540
自己里面

52:35.540 --> 52:36.540
如果直接定理空

52:36.540 --> 52:37.540
和n-fi的

52:37.540 --> 52:38.540
类似于这样的话

52:38.540 --> 52:39.540
它是属于等价

52:39.540 --> 52:40.540
也就是无效的

52:40.540 --> 52:41.540
也就是

52:41.540 --> 52:42.540
没有意义的

52:42.540 --> 52:43.540
但是你如果要

52:43.540 --> 52:44.540
q跟force的话

52:44.540 --> 52:45.540
你直接写

52:45.540 --> 52:46.540
没有意义

52:46.540 --> 52:47.540
它进行一次的

52:47.540 --> 52:49.540
引用的关联度操作

52:49.540 --> 52:50.540
关联什么

52:50.540 --> 52:51.540
关联它

52:51.540 --> 52:52.540
是否需要渲染

52:52.540 --> 52:54.540
另外一个组件

52:54.540 --> 52:55.540
如果说

52:55.540 --> 52:56.540
你把它写成的是

52:56.540 --> 52:57.540
像我们现在

52:57.540 --> 52:58.540
是双语号的方式

52:58.540 --> 52:59.540
那么这样

52:59.540 --> 53:00.540
它前面

53:00.540 --> 53:01.540
如果是q

53:01.540 --> 53:02.540
表示正确

53:02.540 --> 53:03.540
真的话

53:03.540 --> 53:05.540
它才会去解析后面的

53:05.540 --> 53:06.540
那么后面的

53:06.540 --> 53:07.540
所谓的组件

53:07.540 --> 53:08.540
会被呈现

53:08.540 --> 53:09.540
如果你现在

53:09.540 --> 53:10.540
这是一个假的话

53:10.540 --> 53:11.540
它就不会被呈现

53:11.540 --> 53:12.540
OK

53:12.540 --> 53:13.540
那么我们

53:13.540 --> 53:14.540
从这几个点上

53:14.540 --> 53:15.540
非常快速的

53:15.540 --> 53:17.540
也通过简单的一个势力

53:17.540 --> 53:19.540
讲解了我们的JetSar

53:19.540 --> 53:21.540
在我们的整个

53:21.540 --> 53:23.540
Tarot上面的运用

53:23.540 --> 53:24.540
同时

53:24.540 --> 53:26.540
有一些和我们的

53:26.540 --> 53:27.540
reactor很像

53:27.540 --> 53:28.540
但有一些

53:28.540 --> 53:29.540
可能不一样

53:29.540 --> 53:30.540
包括是我们前面

53:30.540 --> 53:31.540
强调过几点内容

53:31.540 --> 53:32.540
对吧

53:32.540 --> 53:33.540
我们大家一定要注意的是

53:33.540 --> 53:34.540
包括是

53:34.540 --> 53:35.540
我们在这个上面的

53:35.540 --> 53:36.540
就是reactor上面

53:36.540 --> 53:37.540
它支持

53:37.540 --> 53:39.540
运行时指定类型

53:39.540 --> 53:40.540
但是在我们的Tarot上面

53:40.540 --> 53:41.540
是不能用的

53:41.540 --> 53:42.540
OK

53:42.540 --> 53:43.540
那么大家的话

53:43.540 --> 53:44.540
在后期的过程中

53:44.540 --> 53:45.540
还要慢慢注意

53:45.540 --> 53:46.540
我们不断的来

53:46.540 --> 53:47.540
书写这样的格式

53:47.540 --> 53:48.540
使我们的页面

53:48.540 --> 53:50.540
越来越好看

53:50.540 --> 53:51.540
使我们页面

53:51.540 --> 53:52.540
越来越能够

53:52.540 --> 53:53.540
熟练的掌握

53:53.540 --> 53:54.540
并且能够运用的

53:54.540 --> 53:55.540
非常自如

53:55.540 --> 53:56.540
OK

53:56.540 --> 53:57.540
那么JetSar

53:57.540 --> 53:59.540
在Tarot中的使用

53:59.540 --> 54:00.540
以及

54:00.540 --> 54:02.540
和一些正常reactor

54:02.540 --> 54:03.540
里面的区别

54:03.540 --> 54:04.540
我们这部分内容

54:04.540 --> 54:05.540
先讲到这里了

54:05.540 --> 54:06.540
大家可以去

54:06.540 --> 54:07.540
进行一些练习

