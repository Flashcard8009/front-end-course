WEBVTT

00:00.000 --> 00:03.000
好 这个就给大家讲解一下Carol系列课程

00:03.000 --> 00:06.000
这列课我们讲的是寒舒士组件

00:06.000 --> 00:09.000
这概念相对而言也比较简单

00:09.000 --> 00:11.000
首先我们来说一下

00:11.000 --> 00:15.000
说起寒舒士组件主要是和组件有关的一个写法

00:15.000 --> 00:18.000
我们在之前的课程中我们已经介绍过组件

00:18.000 --> 00:20.000
并且我们也一直在使用组件

00:20.000 --> 00:22.000
而我们使用的都是类组件

00:22.000 --> 00:27.000
我们用一个class的方式来完成一个组件的基本写法

00:27.000 --> 00:30.000
同时去作为component积累的存在

00:30.000 --> 00:33.000
然后我们还有一种就是寒舒士组件

00:33.000 --> 00:37.000
寒舒士组件它其实就是讲起来

00:37.000 --> 00:40.000
就是一个function 就是一个寒数

00:40.000 --> 00:45.000
然后它可以接收一个参数称之为propercy

00:45.000 --> 00:47.000
我们用类组件来写的时候

00:47.000 --> 00:50.000
我们经常用的是this.propercy

00:50.000 --> 00:53.000
点你后面所传进来的认可属性名

00:53.000 --> 00:57.000
而现在我们其实作为寒舒士的参数可以进行传输

00:57.000 --> 01:01.000
第二我们说它里面本身就可以直接去返回

01:01.000 --> 01:03.000
return一个jx它

01:03.000 --> 01:06.000
它可以直接返回这样的一个元素

01:06.000 --> 01:08.000
那么在我们类里面其实这里边内容

01:08.000 --> 01:11.000
相对而言比寒舒士组件会多一点

01:11.000 --> 01:14.000
比如说类组件一般基本需要一个constructure

01:14.000 --> 01:16.000
一个构造寒舒里面完成super

01:16.000 --> 01:20.000
然后有一个我们的属性调用方式

01:20.000 --> 01:22.000
this.purpose.n内容

01:22.000 --> 01:25.000
里面要有应继承了我们的component

01:25.000 --> 01:26.000
所以你应该要randow

01:26.000 --> 01:28.000
然后里面再写上return

01:28.000 --> 01:30.000
它是有一个规范在那边的

01:30.000 --> 01:32.000
但是对于寒舒士组件来讲

01:32.000 --> 01:33.000
它就简单

01:33.000 --> 01:35.000
接收参数返回jx就可以

01:35.000 --> 01:37.000
然后下面我们说一下

01:37.000 --> 01:39.000
就是说在一个文件中

01:39.000 --> 01:41.000
我们其实只能有一个

01:41.000 --> 01:45.000
我们称之为的普通式的一个寒舒士组件

01:45.000 --> 01:48.000
或者我们说一个类组件

01:48.000 --> 01:50.000
那么如果说我们在里面

01:50.000 --> 01:54.000
又要有我们的多个组件存在的话

01:54.000 --> 01:55.000
那怎么办呢

01:55.000 --> 01:58.000
我们就应该使用的一个叫做类寒舒士组件

01:58.000 --> 02:01.000
它是这个两个名字的结合

02:01.000 --> 02:03.000
又是类组件又是寒舒士组件

02:03.000 --> 02:05.000
那么它是可以在组件内部

02:05.000 --> 02:09.000
我们可以有部分的组件调用形式

02:09.000 --> 02:10.000
也就是说

02:10.000 --> 02:12.000
我们组件并不是简单的

02:12.000 --> 02:14.000
就是一个大组件概念

02:14.000 --> 02:15.000
我们可以把这个组件拆成

02:15.000 --> 02:17.000
个个小的部分组件

02:17.000 --> 02:20.000
然后把它放到一个叫做类寒舒组件里面

02:20.000 --> 02:24.000
然后用它来完成我们的一个拆分

02:24.000 --> 02:25.000
那么在类寒舒组件里面

02:25.000 --> 02:27.000
我们其实可以有更多的

02:27.000 --> 02:29.000
这种的逻辑存在

02:29.000 --> 02:30.000
OK

02:30.000 --> 02:31.000
那我们现在来看一下

02:31.000 --> 02:34.000
我们怎么样去书写

02:34.000 --> 02:36.000
我们打开我们现在的程序

02:36.000 --> 02:40.000
然后我们本身就建了一个简单的页面

02:40.000 --> 02:42.000
我们称之为叫function country

02:42.000 --> 02:44.000
然后里面什么都没有

02:44.000 --> 02:48.950
这个就是非常简单的一个文本

02:48.950 --> 02:49.950
显示一下

02:49.950 --> 02:56.850
我们看一下页面

02:56.850 --> 02:58.850
页面的话它需要重新刷新

02:58.850 --> 02:59.850
如果大家会发觉

02:59.850 --> 03:02.850
如果刷新内容不能直接支持的话

03:02.850 --> 03:04.850
那我们现在就可以关掉它

03:04.850 --> 03:06.850
然后重新开一下

03:06.850 --> 03:08.850
对于我们的function来讲的话

03:08.850 --> 03:10.850
或者对于我们小程序来讲的话

03:10.850 --> 03:13.850
它本身就会有这样一个结构

03:13.850 --> 03:17.850
能够让我们很容易的进行直接的打开

03:17.850 --> 03:19.850
但是它有时候也会死机

03:19.850 --> 03:20.850
这样一死机的话

03:20.850 --> 03:22.850
或者说直接没法编译的话

03:22.850 --> 03:24.850
你重新打开一下就可以了

03:24.850 --> 03:25.850
我这个PID不用管它

03:25.850 --> 03:28.850
因为之前我用了一个测试号

03:28.850 --> 03:30.850
但是我们现在不去和我们的

03:30.850 --> 03:32.850
其他的方式有关

03:32.850 --> 03:33.850
我们现在只用了一个

03:33.850 --> 03:35.850
我们自己的一个ID形式

03:35.850 --> 03:36.850
好了咱们不管那个

03:36.850 --> 03:37.850
先看这部分

03:37.850 --> 03:39.850
function已经被呈现出来

03:39.850 --> 03:40.850
代表现在的编译

03:40.850 --> 03:41.850
已经能够看到效果

03:41.850 --> 03:42.850
对吧

03:42.850 --> 03:44.850
然后我们开始

03:44.850 --> 03:47.850
我们首先我们去写一个类组件

03:47.850 --> 03:50.850
然后同时我们后面再写一个韩束式组件

03:50.850 --> 03:53.850
让大家进行比较这两个部分

03:53.850 --> 03:55.850
然后我们跑到我们的

03:55.850 --> 03:56.850
component里面

03:56.850 --> 04:01.540
我们去完成我们的一个welcome

04:01.540 --> 04:03.540
我们称之为叫欢迎一个组件

04:03.540 --> 04:05.540
然后我们里面写上

04:05.540 --> 04:09.690
welcome-jxx

04:09.690 --> 04:11.690
利用jxx的语法

04:11.690 --> 04:12.690
我们首先来

04:12.690 --> 04:15.690
impart-tarrow

04:15.690 --> 04:31.200
类组件-tarrow

04:31.200 --> 04:33.200
拿出来

04:33.200 --> 04:35.200
然后我们后面直接是

04:35.200 --> 04:37.200
expert-default

04:37.200 --> 04:39.200
你要写个类

04:39.200 --> 04:41.200
然后把你的

04:41.200 --> 04:43.200
组件写上

04:43.200 --> 04:46.770
它要做一个继承

04:46.770 --> 04:50.720
继承自我们的

04:50.720 --> 04:57.550
component

04:57.550 --> 05:00.060
就是它

05:00.060 --> 05:01.060
继承完成以后

05:01.060 --> 05:02.060
标准写法

05:02.060 --> 05:03.060
第一步

05:03.060 --> 05:04.060
constructor

05:04.060 --> 05:05.060
构造韩束

05:05.060 --> 05:16.390
同时

05:16.390 --> 05:20.660
应该写一个super

05:20.660 --> 05:21.660
把你所有的参数

05:21.660 --> 05:24.660
都可以解析给我们的

05:24.660 --> 05:25.660
负类

05:25.660 --> 05:26.660
也就是component

05:26.660 --> 05:27.660
这个类别

05:27.660 --> 05:28.660
第二个我们里面

05:28.660 --> 05:33.740
一般都会有configure

05:33.740 --> 05:34.740
初始参数

05:34.740 --> 05:35.740
第三个

05:35.740 --> 05:38.740
我们这里边会有stater

05:38.740 --> 05:40.740
代表的是初始值

05:40.740 --> 05:44.740
这是属于配置参数

05:44.740 --> 05:48.740
当前页面的配置参数

05:48.740 --> 05:50.740
而这个

05:50.740 --> 05:52.740
我们称之为的就是

05:52.740 --> 05:54.740
初始状态值

05:54.740 --> 06:01.020
再往下

06:05.060 --> 06:10.130
Rendle

06:10.130 --> 06:13.700
再往下就是Rendle

06:13.700 --> 06:22.540
return

06:22.540 --> 06:24.540
返回这一则表达式

06:24.540 --> 06:39.500
写个根文件

06:39.500 --> 06:44.620
class

06:44.620 --> 06:47.620
class welcome component

06:47.620 --> 06:48.620
然后把这个view

06:48.620 --> 07:03.180
我们上面可以把它引入进来

07:03.180 --> 07:04.180
component

07:04.180 --> 07:05.180
OK

07:05.180 --> 07:06.180
写出这样一道

07:06.180 --> 07:08.180
这样一套东西写出来以后

07:08.180 --> 07:09.180
并且这里面

07:09.180 --> 07:10.180
如果你想写的话

07:10.180 --> 07:11.180
你可以写上

07:11.180 --> 07:13.180
这是一个类组件的结构

07:13.180 --> 07:15.180
当然我们一般这些

07:15.180 --> 07:16.180
特别要求的话

07:16.180 --> 07:17.180
我们可以省掉

07:17.180 --> 07:19.180
基本上我们就以这两个

07:19.180 --> 07:20.180
作为特别

07:20.180 --> 07:22.180
或者说基本结构方法

07:22.180 --> 07:23.180
好了

07:23.180 --> 07:24.180
那么那个要用了

07:24.180 --> 07:25.180
你再加一辛

07:25.180 --> 07:28.180
然后我们这是一个类组件的结构

07:28.180 --> 07:30.180
然后我们把这个类组件结构

07:30.180 --> 07:34.180
我们直接把它放到我们的

07:34.180 --> 07:35.180
注意

07:35.180 --> 07:37.180
组件不用放在JSA里面

07:37.180 --> 07:39.180
直接放到我们页面中去

07:39.180 --> 07:41.180
直接放到我们页面中去

07:41.180 --> 07:46.260
页面打开我们的function

07:46.260 --> 07:48.260
然后在这边我们

07:48.260 --> 07:49.260
in part

07:49.260 --> 07:50.260
引入

07:50.260 --> 07:51.260
在这边引入

07:51.260 --> 07:56.680
引入我们的类组件

07:56.680 --> 07:57.680
然后

07:57.680 --> 08:00.820
from

08:00.820 --> 08:02.820
它是来自于点点杠

08:02.820 --> 08:03.820
点点杠

08:03.820 --> 08:04.820
component

08:04.820 --> 08:05.820
下面的welcome

08:05.820 --> 08:07.820
下面的welcome

08:07.820 --> 08:08.820
有了

08:08.820 --> 08:11.390
接下去

08:11.390 --> 08:16.070
显示

08:16.070 --> 08:18.070
welcome标签

08:18.070 --> 08:20.070
那么这里边就是有一句话

08:20.070 --> 08:21.070
对吧

08:21.070 --> 08:23.070
我们来看一下页面效果

08:23.070 --> 08:25.070
到页面刷新以后

08:25.070 --> 08:27.070
我们就直接会把

08:27.070 --> 08:28.070
class

08:28.070 --> 08:29.070
welcome

08:29.070 --> 08:30.070
component

08:30.070 --> 08:32.070
这样的一个自固刷给显示出来

08:32.070 --> 08:33.070
对吧

08:33.070 --> 08:35.070
因为在我的整个的调整过程中

08:35.070 --> 08:38.070
我是直接完成了一个welcome的调用

08:38.070 --> 08:39.070
对吧

08:39.070 --> 08:40.070
然后对于它来讲的话

08:40.070 --> 08:41.070
我们

08:41.070 --> 08:43.070
直接是把这部分的JSA

08:43.070 --> 08:45.070
输出在了页面中

08:45.070 --> 08:46.070
那么传直

08:46.070 --> 08:48.070
我们可以在这边

08:48.070 --> 08:50.070
做一个我们的比如说

08:50.070 --> 08:52.070
我们可以给一个套

08:52.070 --> 08:54.070
这样的简单的一个

08:55.070 --> 08:56.070
然后我们把这个值

08:56.070 --> 08:58.070
直接在我们的

08:58.070 --> 09:00.070
组件里面去使用

09:01.070 --> 09:03.070
然后我就接在后面

09:03.070 --> 09:10.740
perperz.net

09:10.740 --> 09:12.740
我们把这个net直接这样接下来

09:12.740 --> 09:15.740
那么此时我们再来看一下页面

09:15.740 --> 09:16.740
看到吗

09:16.740 --> 09:19.740
tang就直接被传输进来了

09:19.740 --> 09:20.740
对吧

09:20.740 --> 09:21.740
这个结构

09:21.740 --> 09:23.740
然后我们在组件里面

09:23.740 --> 09:25.740
你要去做我们的事件的话

09:25.740 --> 09:26.740
那是一样的

09:26.740 --> 09:28.740
首先我外部传进值来

09:28.740 --> 09:29.740
对吧

09:29.740 --> 09:31.740
然后我内部做事件

09:31.740 --> 09:32.740
我在内部做

09:32.740 --> 09:34.740
我们就在这里面

09:34.740 --> 09:39.520
我们写一个按钮

09:39.520 --> 09:45.460
button

09:45.460 --> 09:46.460
button按钮

09:46.460 --> 09:48.460
然后在组件里面的时候

09:48.460 --> 09:53.470
我们把它依然完成一个简单的注册

09:53.470 --> 09:55.470
然后我们在这个按钮中

09:55.470 --> 09:56.470
我们写一下

09:56.470 --> 09:57.470
这叫做

09:57.470 --> 10:02.980
类组件内事件

10:04.980 --> 10:06.980
类组件内事件

10:06.980 --> 10:09.980
然后这边写的是我们的

10:09.980 --> 10:11.980
你可以订一个

10:11.980 --> 10:13.980
我们直接用

10:13.980 --> 10:14.980
系统自带的

10:14.980 --> 10:15.980
primary

10:15.980 --> 10:17.980
然后我们给它一个unclick

10:17.980 --> 10:19.980
单期事件

10:20.980 --> 10:22.980
组件内的写法和组件外事一样的

10:22.980 --> 10:24.980
我们在这边直接可以写

10:24.980 --> 10:26.980
我们写一个最简单的

10:27.980 --> 10:29.980
当前的

10:29.980 --> 10:33.480
btnclick

10:33.480 --> 10:39.030
当前的btnclick

10:39.030 --> 10:43.240
写出来

10:43.240 --> 10:45.240
然后我们这边

10:45.240 --> 10:47.240
直接给它所谓的

10:47.240 --> 10:49.240
一个功能

10:49.240 --> 10:51.240
我们就说改变当前

10:51.240 --> 10:54.680
这个nand值

10:54.680 --> 10:56.680
改变这个nand值

10:56.680 --> 10:58.680
它的改变你要注意一下

10:58.680 --> 11:00.680
你不能直接对它进行复制的

11:00.680 --> 11:02.680
我们一般都需要在内部

11:02.680 --> 11:04.680
去定义我们的一个属性

11:04.680 --> 11:05.680
你说我直接改变这个值

11:05.680 --> 11:06.680
那你有问题的

11:06.680 --> 11:07.680
你自己看

11:07.680 --> 11:10.680
purpose.nand

11:10.680 --> 11:12.680
等于marry

11:12.680 --> 11:13.680
你就这样改

11:13.680 --> 11:14.680
你来看一下

11:14.680 --> 11:19.910
打开

11:19.910 --> 11:20.910
你发现吗

11:20.910 --> 11:21.910
这个值是不可以改的

11:21.910 --> 11:22.910
在我们之前的课程中

11:22.910 --> 11:24.910
我们已经讲到过这一点

11:24.910 --> 11:27.910
点下去以后始终没有反应的

11:27.910 --> 11:29.910
原因就在于我们讲过

11:29.910 --> 11:31.910
我们现在所看到的

11:31.910 --> 11:34.910
purpose.nand的本身的这个值

11:34.910 --> 11:36.910
它是固定不动的

11:36.910 --> 11:39.910
你除非是外部给它传的时候

11:39.910 --> 11:42.910
让它形成不一样的值的路入

11:42.910 --> 11:43.910
对吧

11:43.910 --> 11:44.910
你这时候传的是tang

11:44.910 --> 11:46.910
你把这个值改成marry

11:46.910 --> 11:47.910
那这个可以

11:47.910 --> 11:49.910
你把它放到这里边来

11:49.910 --> 11:50.910
但你不能在内部

11:50.910 --> 11:52.910
把这个值给改变了

11:52.910 --> 11:53.910
你不能在内部

11:53.910 --> 11:54.910
把这个值改变

11:54.910 --> 11:55.910
你这样改变的话

11:55.910 --> 11:56.910
系统是不认的

11:56.910 --> 11:57.910
或者说系统不会对你

11:57.910 --> 11:58.910
进行这样操作的

11:58.910 --> 12:00.910
这个注意一下你现在

12:00.910 --> 12:02.910
我们这时候去点击它的时候

12:02.910 --> 12:04.910
它没有办法在内部

12:04.910 --> 12:06.910
去改变这个

12:06.910 --> 12:07.910
你说它是否执行了

12:07.910 --> 12:08.910
我们来看

12:08.910 --> 12:09.910
我们在这边

12:09.910 --> 12:12.910
我们去做一个输出

12:12.910 --> 12:14.910
代表是btnclick

12:14.910 --> 12:18.990
我们写一个简单的输出

12:18.990 --> 12:20.990
然后此时我们再来看一下

12:20.990 --> 12:22.990
页面运行

12:22.990 --> 12:23.990
咱们看到吗

12:23.990 --> 12:25.990
btnclick它已经被执行了

12:25.990 --> 12:27.990
但是这个tang值

12:27.990 --> 12:28.990
永远没有不给改变

12:28.990 --> 12:30.990
所以这个时候

12:30.990 --> 12:31.990
我们就明确了

12:31.990 --> 12:32.990
我们再把前面的一个概念

12:32.990 --> 12:33.990
说出来的是

12:33.990 --> 12:37.500
不能在

12:37.500 --> 12:44.320
组建内部去改变

12:44.320 --> 12:47.320
purpose的值

12:48.320 --> 12:50.320
是这一点

12:50.320 --> 12:51.320
那么我怎么样

12:51.320 --> 12:53.320
我想把这个位置

12:53.320 --> 12:54.320
batch marry呢

12:54.320 --> 12:56.320
那么这个做法

12:56.320 --> 12:58.320
我们可以有几种格式呢

12:58.320 --> 12:59.320
第一来看

12:59.320 --> 13:00.320
我们是不是内部也能去

13:00.320 --> 13:01.320
定义state

13:01.320 --> 13:06.130
对吧

13:06.130 --> 13:08.130
那我把这个值放在这

13:08.130 --> 13:09.130
我们称之为

13:09.130 --> 13:13.130
就是学生的名字

13:13.130 --> 13:15.130
这样可以吧

13:15.130 --> 13:17.130
我把学生名字这个值

13:17.130 --> 13:19.130
往这放

13:19.130 --> 13:20.130
这样可以吧

13:20.130 --> 13:24.340
只不过加一个stater

13:24.340 --> 13:26.340
那么这时候我把它写成tang

13:26.340 --> 13:27.340
这可以吧

13:27.340 --> 13:28.340
我写成最

13:28.340 --> 13:29.340
还有一个名字

13:29.340 --> 13:30.340
叫Alice吧

13:30.340 --> 13:32.340
我先把它写成Alice

13:32.340 --> 13:34.340
然后

13:34.340 --> 13:35.340
constructor

13:35.340 --> 13:36.340
进来时候的话

13:36.340 --> 13:37.340
初始化的时候

13:37.340 --> 13:38.340
能不能改变这个值

13:38.340 --> 13:39.340
有东西是这么做的

13:39.340 --> 13:40.340
来

13:40.340 --> 13:41.340
咱们继续看一下

13:41.340 --> 13:42.340
它说

13:42.340 --> 13:51.140
this.setStator

13:51.140 --> 13:53.140
然后把里面的这个值

13:53.140 --> 14:01.340
等于this.purpose.n

14:01.340 --> 14:08.300
我们来看一下

14:08.300 --> 14:09.300
看

14:09.300 --> 14:10.300
这个位置

14:10.300 --> 14:12.300
是不是tang

14:12.300 --> 14:21.060
如果没有这句话呢

14:21.060 --> 14:22.060
是不是Alice

14:22.060 --> 14:24.060
那么就告知我们

14:24.060 --> 14:27.060
我们所传入进来的值

14:27.060 --> 14:29.060
我们可以在constructor

14:29.060 --> 14:31.060
构造函数里面

14:31.060 --> 14:33.060
去修改Stator中的值

14:33.060 --> 14:35.060
虽然在书写规则上

14:35.060 --> 14:36.060
constructor

14:36.060 --> 14:39.060
写在Stator前面

14:39.060 --> 14:40.060
但是

14:40.060 --> 14:42.060
它是可以运行的点

14:42.060 --> 14:44.060
和它修改的位置

14:44.060 --> 14:46.060
是可以针对于Stator的

14:46.060 --> 14:47.060
进行操作的

14:47.060 --> 14:49.060
这是我们刚才看到效果的

14:49.060 --> 14:50.060
接着

14:50.060 --> 14:51.060
那么我们接下来

14:51.060 --> 14:52.060
点按钮的时候

14:52.060 --> 14:54.060
我们不再是直接修改

14:54.060 --> 14:56.060
这部分内容

14:56.060 --> 14:58.060
而是去修改我们的Stator中的值

14:58.060 --> 14:59.060
理解吧

14:59.060 --> 15:13.730
把这个值拿过来

15:13.730 --> 15:15.730
你这时候把它改一改

15:15.730 --> 15:17.730
我们把叫做

15:17.730 --> 15:19.730
marry

15:19.730 --> 15:21.730
由于你现在修改的

15:21.730 --> 15:23.730
是我们Stator中的值

15:23.730 --> 15:25.730
而最后呈现的也是Stator

15:25.730 --> 15:27.730
它和property是没有关系的

15:27.730 --> 15:28.730
对吧

15:28.730 --> 15:29.730
再来看一下

15:29.730 --> 15:32.680
改了吧

15:32.680 --> 15:34.680
这个按钮被出

15:34.680 --> 15:35.680
这个事件被出发了

15:35.680 --> 15:36.680
并且这个值改了

15:36.680 --> 15:37.680
所以

15:37.680 --> 15:39.680
我们讲到的一点是

15:39.680 --> 15:44.400
在类组件内部

15:44.400 --> 15:52.450
我们在这写一下

15:52.450 --> 15:56.720
修改值

15:56.720 --> 16:02.700
是通过

16:02.700 --> 16:03.700
Stator来

16:03.700 --> 16:05.700
完成的

16:05.700 --> 16:06.700
好

16:06.700 --> 16:07.700
因为我们现在说

16:07.700 --> 16:08.700
函数组件

16:08.700 --> 16:09.700
所以我们说到类的时候

16:09.700 --> 16:10.700
我们把类里面几个关键点

16:10.700 --> 16:11.700
给大家说一下

16:11.700 --> 16:12.700
接下去

16:12.700 --> 16:13.700
我们继续

16:13.700 --> 16:14.700
进入函数式组件

16:14.700 --> 16:16.700
函数式组件的写法

16:16.700 --> 16:17.700
和类组件写法

16:17.700 --> 16:19.700
不会差太多

16:19.700 --> 16:21.700
但是有它不同的点赞

16:21.700 --> 16:22.700
我们这样

16:22.700 --> 16:23.700
我们这边

16:23.700 --> 16:25.700
再写一个welcome to

16:25.700 --> 16:27.700
我们写个welcome to

16:27.700 --> 16:33.700
它是函数式组件

16:33.700 --> 16:35.700
welcome to

16:35.700 --> 16:36.700
我们把这些先关了

16:36.700 --> 16:38.700
我们把welcome to给建立起来

16:38.700 --> 16:42.710
welcome to

16:42.710 --> 16:43.710
welcome to呢

16:43.710 --> 16:46.660
在这

16:48.660 --> 16:52.700
建立

16:52.700 --> 16:53.700
dxx

16:54.700 --> 16:56.700
welcome to是函数式组件

16:56.700 --> 16:58.700
所以随便你怎么样

16:58.700 --> 16:59.700
它用的是taro的语法

16:59.700 --> 17:01.700
并且我们一般

17:01.700 --> 17:02.700
如果说你不用component的时候

17:02.700 --> 17:04.700
我们基本上也把

17:04.700 --> 17:05.700
这个进行

17:05.700 --> 17:06.700
导入我们已经形成一个

17:06.700 --> 17:07.700
习惯性的操作

17:07.700 --> 17:09.700
就可以直接把这个

17:09.700 --> 17:12.140
拿进来

17:12.140 --> 17:13.140
你可以这样写着

17:13.140 --> 17:16.860
ok

17:16.860 --> 17:17.860
接下去

17:17.860 --> 17:19.860
我们直接是expert default

17:20.860 --> 17:21.860
然后注意

17:21.860 --> 17:23.860
这边直接玩froxing了

17:23.860 --> 17:24.860
然后后面呢

17:24.860 --> 17:27.860
我们这边玩的是按钮

17:27.860 --> 17:31.500
我们写个按钮出来

17:31.500 --> 17:33.500
接收参数名称

17:33.500 --> 17:34.500
对吧

17:34.500 --> 17:41.370
然后我里面写的是return

17:41.370 --> 17:42.370
我们里面直接跟上return

17:42.370 --> 17:44.370
我们不说可以返回吗

17:44.370 --> 17:46.370
它基本上就做这几步

17:46.370 --> 18:06.150
然后呢

18:06.150 --> 18:08.150
这边我们写上

18:08.150 --> 18:14.060
比如说view

18:15.060 --> 18:16.060
hello

18:16.060 --> 18:19.060
后面把你的直跟上

18:19.060 --> 18:23.020
我们如果不传直的话

18:23.020 --> 18:24.020
就显示hello

18:24.020 --> 18:25.020
我们先从这个角度来看

18:25.020 --> 18:27.020
我写了一个最简单的

18:27.020 --> 18:31.020
我们的函数式组件

18:31.020 --> 18:33.020
因为它的expert default

18:33.020 --> 18:35.020
它是以function作为它的

18:35.020 --> 18:36.020
一个关键字的

18:36.020 --> 18:37.020
然后呢

18:37.020 --> 18:38.020
写了一个名称

18:38.020 --> 18:40.020
我想比如做个按钮

18:40.020 --> 18:41.020
然后呢

18:41.020 --> 18:42.020
我们后面这边写个return

18:42.020 --> 18:43.020
直接写return

18:43.020 --> 18:44.020
它也没有randow

18:44.020 --> 18:45.020
也没有constructor

18:45.020 --> 18:46.020
这些内容

18:46.020 --> 18:47.020
复杂内容

18:47.020 --> 18:49.020
那么当你这样写好以后呢

18:49.020 --> 18:51.020
那我们就开始到页面去调用了

18:51.020 --> 18:53.020
还是回到

18:53.020 --> 18:58.060
我们的function里面

18:58.060 --> 18:59.060
还是回到function里面

18:59.060 --> 19:01.060
我们把上面这句可以住掉

19:01.060 --> 19:03.060
我们没有导入这个

19:03.060 --> 19:04.060
这句话也住掉

19:04.060 --> 19:07.260
紧接着

19:07.260 --> 19:11.260
我们来完成你现在的这个方法

19:11.260 --> 19:14.260
或者称之为这个组件的使用

19:15.260 --> 19:26.470
导入

19:26.470 --> 19:30.870
component

19:30.870 --> 19:32.870
我们里面是

19:32.870 --> 19:33.870
component

19:33.870 --> 19:36.870
我们里面是welcome2

19:36.870 --> 19:39.870
再下的welcome

19:39.870 --> 19:41.870
好我们此时

19:41.870 --> 19:43.870
我们把这名称改一改吧

19:43.870 --> 19:44.870
就改welcome吧

19:44.870 --> 19:58.580
welcome2

19:58.580 --> 20:00.580
welcome2

20:00.580 --> 20:02.580
写好了

20:02.580 --> 20:03.580
这里边呢

20:03.580 --> 20:05.580
我们也是welcome2

20:05.580 --> 20:07.580
这边引入welcome2

20:07.580 --> 20:09.580
这边直接完成welcome2的操作

20:09.580 --> 20:11.580
我们来看一下

20:11.580 --> 20:15.580
这边有一个view

20:15.580 --> 20:17.580
我们这个文件

20:17.580 --> 20:19.580
无法同意闻中引入

20:19.580 --> 20:20.580
那我们就不用了

20:20.580 --> 20:21.580
因为在外部

20:21.580 --> 20:23.580
因为它在这里已经有引入

20:23.580 --> 20:30.340
所以我们这个就可以不用它了

20:30.340 --> 20:31.340
我们把它伸了

20:31.340 --> 20:32.340
然后呢

20:32.340 --> 20:34.340
这边我们再来保存一下

20:34.340 --> 20:35.340
welcome2

20:35.340 --> 20:40.870
我们这边是

20:40.870 --> 20:41.870
OK了

20:41.870 --> 20:42.870
我们什么生成

20:42.870 --> 20:43.870
然后我们来看一下

20:43.870 --> 20:44.870
这个welcome2

20:44.870 --> 20:45.870
正常情况下

20:45.870 --> 20:46.870
你应该看到是

20:46.870 --> 20:49.570
Hello

20:49.570 --> 20:50.570
是吧

20:50.570 --> 20:51.570
Hello

20:51.570 --> 20:52.570
代表着

20:52.570 --> 20:53.570
这个寒树的结构

20:53.570 --> 20:55.570
寒树式的这个结构组件

20:55.570 --> 20:56.570
已经被我

20:56.570 --> 20:57.570
读取到了

20:57.570 --> 20:58.570
咱们看

20:58.570 --> 20:59.570
寒树式组件呢

20:59.570 --> 21:00.570
和类组件

21:00.570 --> 21:02.570
我们把welcome1也打开

21:02.570 --> 21:04.570
welcome1里面的话呢

21:04.570 --> 21:05.570
我们本身来讲

21:05.570 --> 21:07.570
它是组件系

21:07.570 --> 21:08.570
所以

21:08.570 --> 21:10.570
它里面所用到的部分

21:10.570 --> 21:12.570
就是

21:12.570 --> 21:14.570
以前在这里部分所用到的

21:14.570 --> 21:15.570
你发现吗

21:15.570 --> 21:16.570
这个view

21:16.570 --> 21:18.570
我们在外部

21:18.570 --> 21:19.570
也有使用

21:19.570 --> 21:20.570
但是他们俩之间

21:20.570 --> 21:22.570
是独立的

21:22.570 --> 21:23.570
所以我直接用的时候

21:23.570 --> 21:25.570
它不会爆错

21:25.570 --> 21:28.570
它本身就是一个积累组件结构

21:28.570 --> 21:29.570
里面完整的是一套

21:29.570 --> 21:31.570
和我外部被引用

21:31.570 --> 21:33.570
和引用方两者是一样的

21:33.570 --> 21:35.570
但对于我寒树式组件来讲

21:35.570 --> 21:37.570
它里面就不一样了

21:37.570 --> 21:40.570
它本身不是一个完整的页面

21:40.570 --> 21:41.570
它就是一个寒树

21:41.570 --> 21:44.570
只不过我通过现在的

21:44.570 --> 21:45.570
一个引入方式

21:45.570 --> 21:47.570
把这寒树拿进来

21:47.570 --> 21:49.570
而寒树的格式

21:49.570 --> 21:52.570
按照组件的格式来进行输出

21:52.570 --> 21:54.570
那么这种就称之为叫

21:54.570 --> 21:55.570
寒树是组件

21:55.570 --> 21:56.570
它并不是一个

21:56.570 --> 21:57.570
什么this

21:57.570 --> 21:59.570
welcome扩号这样的结构

21:59.570 --> 22:00.570
而是用监控号的

22:00.570 --> 22:02.570
标签的方式出现

22:02.570 --> 22:04.570
这就是组件的方式

22:04.570 --> 22:06.570
那么我们现在所看到的

22:06.570 --> 22:07.570
它

22:07.570 --> 22:08.570
本身

22:08.570 --> 22:10.570
我们里面刚才写了一个view

22:10.570 --> 22:12.570
它直接抱错说

22:12.570 --> 22:13.570
这部分已经有

22:13.570 --> 22:15.570
那说明的就是

22:15.570 --> 22:17.570
它需要被宰入

22:17.570 --> 22:18.570
或者说包含进来

22:18.570 --> 22:19.570
而一包含

22:19.570 --> 22:21.570
两个import

22:21.570 --> 22:22.570
会重复

22:22.570 --> 22:23.570
所以

22:23.570 --> 22:24.570
我们讲解一下

22:24.570 --> 22:27.570
如果使用的是寒树式组件

22:27.570 --> 22:30.570
我们大可就直接写一句话

22:30.570 --> 22:31.570
你说老师

22:31.570 --> 22:32.570
我这句话不要行不行

22:32.570 --> 22:34.570
就直接变成这样

22:34.570 --> 22:35.570
保存

22:35.570 --> 22:36.570
我们来看一下

22:36.570 --> 22:38.570
我把Hello后面加两个感叹号

22:38.570 --> 22:44.210
可以吧

22:44.210 --> 22:45.210
也可以

22:45.210 --> 22:46.210
为什么

22:46.210 --> 22:47.210
还是回到那个问题

22:47.210 --> 22:49.210
它是部分代码

22:49.210 --> 22:51.210
模块代码

22:51.210 --> 22:53.210
它并不能自己直接使用

22:53.210 --> 22:55.210
它要去和我们的这部分

22:55.210 --> 22:56.210
进行结合

22:56.210 --> 22:58.210
而结合的意味着

22:58.210 --> 22:59.210
它就自动会获取

22:59.210 --> 23:00.210
上面的这一块

23:00.210 --> 23:01.210
同学问

23:01.210 --> 23:02.210
老师

23:02.210 --> 23:03.210
这个不要行吗

23:03.210 --> 23:05.210
你自己来看了

23:05.210 --> 23:07.210
如果我连这个都不要

23:07.210 --> 23:09.210
我把这个再改一改

23:09.210 --> 23:15.210
寒树式组件

23:15.210 --> 23:16.210
行吗

23:17.210 --> 23:19.210
和刚才那个逻辑

23:19.210 --> 23:20.210
是一样的吧

23:20.210 --> 23:22.210
有没有区别

23:22.210 --> 23:25.210
它就是一个代码模块

23:25.210 --> 23:27.210
从代码模块角度来讲

23:27.210 --> 23:29.210
我们可以把它以寒树式的

23:29.210 --> 23:31.210
组件的方式

23:31.210 --> 23:32.210
完完整整那套来写

23:32.210 --> 23:34.210
你也可以就写一个寒树体

23:34.210 --> 23:36.210
虽然是JXX

23:36.210 --> 23:37.210
JXX里面

23:37.210 --> 23:38.210
只要Return返回的是

23:38.210 --> 23:39.210
J传内容

23:39.210 --> 23:41.210
那就可以

23:41.210 --> 23:42.210
对吧

23:42.210 --> 23:43.210
现在你看寒树的组件

23:43.210 --> 23:44.210
就变成什么了

23:44.210 --> 23:46.210
就是写一个寒树

23:46.210 --> 23:47.210
对吧

23:47.210 --> 23:48.210
这个就简单到

23:48.210 --> 23:50.210
已经是特简单了吧

23:50.210 --> 23:51.210
那么接下去

23:51.210 --> 23:52.210
我们继续

23:52.210 --> 23:53.210
我们传直

23:53.210 --> 23:55.210
刚才我们前面的传直是

23:55.210 --> 23:58.210
我们通过this.prepare.net的方式

23:58.210 --> 23:59.210
往里走

23:59.210 --> 24:00.210
那么现在依然

24:00.210 --> 24:01.210
我们通过

24:01.210 --> 24:03.210
我们现在Welcome

24:03.210 --> 24:05.210
我们也传一个

24:05.210 --> 24:10.420
我们这边给一个time

24:10.420 --> 24:11.420
Welcome to

24:11.420 --> 24:13.420
我们也传直进去

24:13.420 --> 24:14.420
那么

24:14.420 --> 24:16.420
引用方的传直结构

24:16.420 --> 24:18.420
都是以属性方式

24:18.420 --> 24:20.420
那么我们在寒树体里面

24:20.420 --> 24:22.420
我们知道

24:22.420 --> 24:23.420
普通的JXX

24:23.420 --> 24:25.420
是拿DIS的对象的

24:25.420 --> 24:26.420
点属性的方式

24:26.420 --> 24:28.420
而对于寒树来说

24:28.420 --> 24:30.420
它是行参接收

24:30.420 --> 24:31.420
它是行参接参

24:31.420 --> 24:33.420
就是PROPS

24:33.420 --> 24:34.420
接参的时候

24:34.420 --> 24:35.420
我们可以在里面

24:35.420 --> 24:37.420
直接把这个值

24:37.420 --> 24:38.420
给拿出来

24:38.420 --> 24:40.420
我们不需要去定义

24:40.420 --> 24:42.420
任何的比如说Staters

24:42.420 --> 24:44.420
我们直接定一个普通辨量

24:44.420 --> 24:45.420
然后

24:45.420 --> 24:47.420
你可以这样写

24:47.420 --> 24:49.420
你可以把在Purpose里面

24:49.420 --> 24:51.420
定名的

24:51.420 --> 24:54.420
就是直接把这个链这样取出来

24:54.420 --> 24:55.420
直接取出来

24:55.420 --> 24:56.420
我们在Hello 后面

24:56.420 --> 24:57.420
把它显示出来

24:57.420 --> 24:58.420
显示方式

24:58.420 --> 24:59.420
依然是

24:59.420 --> 25:02.420
我们利用JXX的表达式

25:02.420 --> 25:03.420
就这样写

25:03.420 --> 25:05.420
我们来看一下

25:05.420 --> 25:06.420
保存

25:06.420 --> 25:11.100
出来了吧

25:11.100 --> 25:12.100
躺

25:12.100 --> 25:14.100
所以我们看到的效果是

25:14.100 --> 25:16.100
我们就像普通函数

25:16.100 --> 25:17.100
接收参数一样

25:17.100 --> 25:19.100
从里面取出这个值来

25:19.100 --> 25:21.100
然后在这边直接

25:21.100 --> 25:22.100
把它打印出来

25:22.100 --> 25:23.100
那么有东西说

25:23.100 --> 25:24.100
老师我不用这一步

25:24.100 --> 25:25.100
我直接在这边

25:25.100 --> 25:27.100
能不能前面加PROPS

25:27.100 --> 25:28.100
这样取

25:28.100 --> 25:29.100
你自己来看

25:29.100 --> 25:30.100
为了演示

25:30.100 --> 25:32.100
我们刚才那个躺不改

25:32.100 --> 25:33.100
刷新的躺

25:33.100 --> 25:35.100
是不是依然可以

25:36.100 --> 25:37.100
我们讲的是

25:37.100 --> 25:40.100
这两种写法的区别是在于

25:40.100 --> 25:42.100
这种模式

25:42.100 --> 25:45.100
你需要去直接Purpose

25:45.100 --> 25:48.100
对象点我们里面的属性

25:48.100 --> 25:49.100
而这种模式

25:49.100 --> 25:51.100
你就是可以把你的变量

25:51.100 --> 25:52.100
先存储下来

25:52.100 --> 25:54.100
之后哪里要用的时候

25:54.100 --> 25:55.100
直接再用

25:55.100 --> 25:56.100
模式

25:56.100 --> 25:57.100
不一样

25:57.100 --> 25:58.100
写法不一样

25:58.100 --> 25:59.100
但基本上

25:59.100 --> 26:01.100
它的最终的效果是一样

26:01.100 --> 26:03.100
我们采用上面这种来写

26:03.100 --> 26:07.180
你可以接收下来

26:07.180 --> 26:09.180
这边会有抱错

26:09.180 --> 26:10.180
这边会告诉你

26:10.180 --> 26:11.180
你没有把它引进来

26:11.180 --> 26:12.180
那没关系

26:12.180 --> 26:14.180
因为我是寒树

26:14.180 --> 26:15.180
寒树的话

26:15.180 --> 26:17.180
我会包含到我们前面所学的

26:17.180 --> 26:19.180
前面所引用的这部分

26:19.180 --> 26:20.180
所以这部分不用管

26:20.180 --> 26:22.180
然后我们看到

26:22.180 --> 26:23.180
我们刚才已经学了

26:23.180 --> 26:25.180
第一个传输进来

26:25.180 --> 26:26.180
我们现在做第二个

26:26.180 --> 26:27.180
什么

26:27.180 --> 26:29.180
在内部的一个事件的操作

26:29.180 --> 26:34.660
依然我们做按钮

26:34.660 --> 26:37.300
我们做按钮

26:37.300 --> 26:38.300
按钮写上

26:38.300 --> 26:40.300
然后在这个按钮里面

26:40.300 --> 26:41.300
我们写上

26:41.300 --> 26:42.300
打招呼

26:42.300 --> 26:43.300
Say

26:43.300 --> 26:44.300
Hello

26:44.300 --> 26:45.300
Say hi吧

26:45.300 --> 26:47.740
Say hi

26:47.740 --> 26:57.860
Onclick

26:57.860 --> 26:59.860
我们自己写一个寒树名

26:59.860 --> 27:00.860
注意

27:00.860 --> 27:03.860
在我们的整个的类组件里面

27:03.860 --> 27:05.860
你要去完成

27:05.860 --> 27:06.860
一个所谓的

27:06.860 --> 27:08.860
方法的使用的话

27:08.860 --> 27:10.860
你要用当前对象

27:10.860 --> 27:11.860
Zis点

27:11.860 --> 27:13.860
当前的一个事件辨量名

27:13.860 --> 27:14.860
这个事件辨量名

27:14.860 --> 27:16.860
我们直接是写在

27:16.860 --> 27:19.860
当前的这个叫做类里面

27:19.860 --> 27:21.860
我们把它就变成的是一个

27:21.860 --> 27:22.860
方法

27:22.860 --> 27:23.860
寒树在那边

27:23.860 --> 27:25.860
而如果是寒树体的话

27:25.860 --> 27:28.860
那么由于它本身没有对象概念

27:28.860 --> 27:30.860
所以你就不需要在里面用Zis

27:30.860 --> 27:32.860
你直接写一个辨量名称

27:32.860 --> 27:34.860
然后我们在这里面

27:34.860 --> 27:35.860
直接写

27:35.860 --> 27:36.860
但请记住

27:36.860 --> 27:37.860
这个是注意

27:37.860 --> 27:39.860
它是一个辨量名称

27:39.860 --> 27:40.860
这个辨量

27:40.860 --> 27:42.860
它其实是一个

27:42.860 --> 27:43.860
长量值

27:43.860 --> 27:45.860
它所指向的是

27:45.860 --> 27:48.860
一个匿名的寒树体

27:48.860 --> 27:49.860
你看它怎么写

27:49.860 --> 27:50.860
可以这样

27:50.860 --> 27:53.860
你可以定死这个名称

27:53.860 --> 27:54.860
然后呢

27:54.860 --> 27:56.860
它指向的是什么

27:56.860 --> 28:01.420
是一个寒树

28:01.420 --> 28:03.420
它指向的是一个寒树

28:03.420 --> 28:04.420
也就是说

28:04.420 --> 28:07.420
你去调用这个名称所指向的寒树运行

28:07.420 --> 28:09.420
它是这个逻辑

28:09.420 --> 28:10.420
所以我们这边

28:10.420 --> 28:11.420
你可以看一下

28:11.420 --> 28:12.420
首先我们先做一个

28:12.420 --> 28:14.420
非常简单的输出

28:14.420 --> 28:20.430
this is say hi

28:20.430 --> 28:22.430
点击这个按钮的时候

28:22.430 --> 28:23.430
我们应该调取

28:23.430 --> 28:25.430
这个say hi的conster

28:25.430 --> 28:27.430
conster指向的匿名寒树

28:27.430 --> 28:28.430
会输出一个this点

28:28.430 --> 28:30.430
this is say hi

28:30.430 --> 28:31.430
所以呢

28:31.430 --> 28:33.430
我们这边来看

28:33.430 --> 28:34.430
出来了吧

28:34.430 --> 28:35.430
this is say hi

28:35.430 --> 28:37.430
这个是在组件内的

28:37.430 --> 28:38.430
就是我们研究的

28:38.430 --> 28:39.430
寒树是组件

28:39.430 --> 28:40.430
然后呢

28:40.430 --> 28:41.430
我们继续

28:41.430 --> 28:43.430
我们需要在这个里面

28:43.430 --> 28:46.430
也看到我们现在的

28:46.430 --> 28:47.430
这个n

28:47.430 --> 28:48.430
那么写法上

28:48.430 --> 28:49.430
我们就可以采取

28:49.430 --> 28:51.430
自服串连接的方式

28:51.430 --> 28:52.430
你加上

28:52.430 --> 28:54.430
我们现在的什么

28:54.430 --> 28:59.340
n

28:59.340 --> 29:00.340
有这么加法

29:00.340 --> 29:01.340
我们来看一下

29:01.340 --> 29:05.550
这里空一个点下去

29:05.550 --> 29:06.550
出来了

29:06.550 --> 29:08.550
但是我们更有一些同学呢

29:08.550 --> 29:10.550
我们希望大家能使用

29:10.550 --> 29:13.250
第二个语法

29:13.250 --> 29:15.250
一想到自服串拼接

29:15.250 --> 29:17.250
就应该想到

29:17.250 --> 29:19.250
这样的格式

29:19.250 --> 29:31.220
出来了吧

29:31.220 --> 29:32.220
say hi Tom

29:32.220 --> 29:33.220
依然可以出现

29:33.220 --> 29:34.220
所以

29:34.220 --> 29:36.220
我们在内部点击

29:36.220 --> 29:38.220
一个所谓事件的时候

29:38.220 --> 29:40.220
在寒树式组件里面

29:40.220 --> 29:42.220
它其实调用的是一个conster

29:42.220 --> 29:43.220
而这conster

29:43.220 --> 29:45.220
给说的是一个匿名寒树

29:45.220 --> 29:46.220
那么这个匿名寒树呢

29:46.220 --> 29:49.220
你就可以给它做各种的一些操作

29:49.220 --> 29:51.220
它可以自行处理

29:51.220 --> 29:52.220
也可以去获取

29:52.220 --> 29:54.220
你现在propercy里面的职

29:54.220 --> 29:56.220
也可以做自服串的拼接

29:56.220 --> 29:58.220
这些都是我们

29:58.220 --> 30:00.220
这个方形所做的事情

30:00.220 --> 30:02.220
回到主页面来看

30:02.220 --> 30:04.220
这种导入方式

30:04.220 --> 30:05.220
无论是主要

30:05.220 --> 30:06.220
无论是类组件

30:06.220 --> 30:08.220
还是寒树式的普通组件

30:08.220 --> 30:10.220
他们俩都需要有一个名称

30:10.220 --> 30:11.220
这个名称

30:11.220 --> 30:12.220
就是代表着

30:12.220 --> 30:13.220
在使用时

30:13.220 --> 30:16.220
我们的一个标签名称

30:16.220 --> 30:18.220
它就是一个标签名称结构

30:18.220 --> 30:20.220
我们需要通过这个标签

30:20.220 --> 30:22.220
来完成这样的一个开发

30:22.220 --> 30:24.220
这两个普通的

30:24.220 --> 30:26.220
我们的一个

30:26.220 --> 30:28.220
类寒树组件

30:28.220 --> 30:30.220
寒树组件

30:30.220 --> 30:32.220
和我们的类组件

30:32.220 --> 30:35.220
应该大家现在都比较熟了

30:35.220 --> 30:36.220
紧接着

30:36.220 --> 30:37.220
我们继续往下

30:37.220 --> 30:39.220
那么我们还有一种

30:39.220 --> 30:41.220
在PPT上我们介绍的

30:41.220 --> 30:42.220
叫做

30:42.220 --> 30:49.120
类寒树式组件

30:49.120 --> 30:51.120
类寒树式组件呢

30:51.120 --> 30:52.120
那么它就是

30:52.120 --> 30:55.120
我们能够在一个类的内部

30:55.120 --> 30:58.120
继续使用寒树式组件

30:58.120 --> 31:00.120
所以你得先有类

31:00.120 --> 31:01.120
这是第一步

31:01.120 --> 31:03.120
寒树应该是第二步

31:04.120 --> 31:05.120
但是所有的这些

31:05.120 --> 31:07.120
应该它的前提

31:07.120 --> 31:08.120
是组件

31:08.120 --> 31:09.120
所以它是0

31:09.120 --> 31:10.120
理解吧

31:10.120 --> 31:11.120
是这样一个逻辑

31:11.120 --> 31:13.120
那么我们就可以定一个出来

31:13.120 --> 31:17.710
回到我们的代码

31:17.710 --> 31:22.880
我们再定一个出来

31:22.880 --> 31:24.880
我们定一个我们的页面

31:26.880 --> 31:28.880
在Component里面

31:28.880 --> 31:31.770
ShuPager

31:31.770 --> 31:38.860
显示页面

31:38.860 --> 31:39.860
JXX

31:40.860 --> 31:43.860
我们做一个impart

31:43.860 --> 31:44.860
先定一个类

31:44.860 --> 31:46.860
那么要类必须要有

31:46.860 --> 31:48.860
继承逻辑相同吧

31:48.860 --> 32:00.740
Taro.js

32:01.740 --> 32:02.740
Taro

32:03.740 --> 32:05.740
同时View

32:05.740 --> 32:13.250
Taro.js

32:14.250 --> 32:15.250
Component

32:16.250 --> 32:17.250
紧接着

32:17.250 --> 32:22.160
Expert Default

32:22.160 --> 32:24.730
Class

32:24.730 --> 32:28.190
Sum

32:28.190 --> 32:29.190
Payter

32:29.190 --> 32:32.460
Extends

32:34.460 --> 32:35.460
Component

32:35.460 --> 32:39.030
好我们定了一个类

32:39.030 --> 32:41.030
然后后面我们把最简单的

32:41.030 --> 32:42.030
几个写上

32:42.030 --> 32:43.030
首先

32:43.030 --> 32:45.030
Constructor写上

32:45.030 --> 32:52.780
Super

32:53.780 --> 32:54.780
Aggreement

32:54.780 --> 32:55.780
紧接着

32:55.780 --> 32:58.290
Random

33:00.290 --> 33:01.290
然后呢

33:01.290 --> 33:02.290
Return

33:02.290 --> 33:09.270
View

33:11.270 --> 33:12.270
我把它叫做

33:12.270 --> 33:14.270
ShuPager

33:14.270 --> 33:18.310
放在页面中

33:18.310 --> 33:19.310
我们待会呈现出来

33:19.310 --> 33:22.310
我们做在我们的JX里面

33:22.310 --> 33:28.700
Pagers

33:28.700 --> 33:31.330
ShuPager

33:31.330 --> 33:40.340
好我们把这个

33:40.340 --> 33:42.340
名称

33:42.340 --> 33:44.340
Component

33:44.340 --> 33:48.380
这个呢

33:48.380 --> 33:50.380
我们这边是一个

33:50.380 --> 33:52.380
Aggreement

33:52.380 --> 34:13.440
ShuPager

34:13.440 --> 34:17.160
紧接着

34:17.160 --> 34:18.160
ShuPager好了

34:18.160 --> 34:19.160
然后呢

34:19.160 --> 34:20.160
我们现在把这个

34:20.160 --> 34:21.160
ShuPager

34:21.160 --> 34:22.160
得写到页面中

34:22.160 --> 34:23.160
那么页面中呢

34:23.160 --> 34:24.160
我们继续采用

34:24.160 --> 34:26.160
我们原先的这个接法

34:26.160 --> 34:27.160
那我们这样的话

34:27.160 --> 34:28.160
这个我们先暂时

34:28.160 --> 34:30.160
可以先把它放在旁边

34:30.160 --> 34:31.160
不用写了

34:31.160 --> 34:33.160
我们依然调用我们的Function

34:33.160 --> 34:36.730
然后我们去到我的Function

34:36.730 --> 34:41.020
把它给租掉

34:41.020 --> 34:46.640
把它给租掉

34:46.640 --> 34:48.640
不是这样啊

34:48.640 --> 34:50.950
先不做任何东西

34:50.950 --> 34:52.950
然后回到我们这里面

34:52.950 --> 34:54.950
我们只要把ShuPager

34:54.950 --> 34:55.950
显示出来

34:55.950 --> 34:58.460
对吧

34:58.460 --> 34:59.460
首先第一个

34:59.460 --> 35:02.460
我们需要在这里面

35:02.460 --> 35:03.460
显示

35:03.460 --> 35:05.460
我们当前这里面

35:05.460 --> 35:06.460
再定义两个

35:06.460 --> 35:09.460
函数式组件

35:09.460 --> 35:10.460
我们在上面

35:10.460 --> 35:11.460
我们这边看到是Late

35:11.460 --> 35:12.460
然后我们在下面

35:12.460 --> 35:13.460
这边看到

35:13.460 --> 35:14.460
可以做一个

35:14.460 --> 35:18.860
函数式组件的结构

35:18.860 --> 35:21.940
我们来写啊

35:21.940 --> 35:24.940
这个称之为我们的

35:24.940 --> 35:29.590
函数式组件

35:29.590 --> 35:30.590
函数式组件

35:30.590 --> 35:31.590
你把它理解为

35:31.590 --> 35:33.590
它就是一个函数

35:33.590 --> 35:40.620
在Late中定义的

35:40.620 --> 35:42.620
在Late中

35:42.620 --> 35:44.620
应该叫函数

35:44.620 --> 35:47.890
定义函数

35:47.890 --> 35:49.890
在Late中

35:49.890 --> 35:52.890
定义的函数

35:52.890 --> 35:58.670
返回JSA格式

35:58.670 --> 35:59.670
我们就把函数写出来

35:59.670 --> 36:00.670
比如说

36:00.670 --> 36:01.670
注意一下

36:01.670 --> 36:02.670
这个函数有规则的

36:02.670 --> 36:04.670
我先把它写出来

36:04.670 --> 36:06.670
Rendal

36:06.670 --> 36:07.670
Header

36:07.670 --> 36:08.670
这个页面

36:08.670 --> 36:09.670
我想给一个头

36:09.670 --> 36:10.670
给一个尾

36:10.670 --> 36:11.670
中间可以放点其他东西

36:11.670 --> 36:13.670
所以我们这边给出

36:13.670 --> 36:17.240
RendalHeader

36:17.240 --> 36:18.240
里面写上

36:18.240 --> 36:20.240
我们现在可以输出的内容

36:20.240 --> 36:21.240
注意啊

36:21.240 --> 36:22.240
我说过

36:22.240 --> 36:24.240
Late中定义的

36:24.240 --> 36:25.240
Late组件中

36:25.240 --> 36:26.240
应该这么写

36:26.240 --> 36:29.240
Late组件中定义的函数

36:29.240 --> 36:31.240
是返回JSA格式的

36:31.240 --> 36:32.240
它称之为叫

36:32.240 --> 36:34.240
Late函数

36:34.240 --> 36:36.240
Late函数组件的整个结构

36:36.240 --> 36:37.240
Return

36:37.240 --> 36:39.240
大过好可加可不加

36:39.240 --> 36:40.240
一般我们都加上

36:40.240 --> 36:41.240
代表这是一个区域

36:41.240 --> 36:43.240
代表里面都是JSA的内容

36:43.240 --> 36:45.240
我们就返回

36:45.240 --> 36:49.150
View

36:49.150 --> 36:50.150
然后呢

36:50.150 --> 36:52.150
代表我们写上

36:52.150 --> 36:53.150
Header

36:53.150 --> 36:54.150
先这么写上

36:54.150 --> 36:56.150
这是第一个

36:56.150 --> 36:59.150
我们再写第二个

36:59.150 --> 37:01.150
RendalFoot

37:01.150 --> 37:19.830
ReturnFoot

37:19.830 --> 37:20.830
Rendal

37:20.830 --> 37:23.830
我们把两个函数都定义好

37:23.830 --> 37:24.830
咱们发现嘛

37:24.830 --> 37:25.830
就是一个函数名

37:25.830 --> 37:27.830
然后面是穿数

37:27.830 --> 37:30.830
后面跟上我们的Return

37:30.830 --> 37:32.830
当你把这个定义好以后

37:32.830 --> 37:33.830
那么注意

37:33.830 --> 37:35.830
由于它是在Late中

37:35.830 --> 37:37.830
Late中的这个函数

37:37.830 --> 37:39.830
和我们之前写的这个不一样

37:39.830 --> 37:41.830
这个没有所谓的Late概念

37:41.830 --> 37:42.830
所以没有对象级

37:42.830 --> 37:43.830
但是在Late中

37:43.830 --> 37:45.830
它就有对象

37:45.830 --> 37:46.830
就可以用This

37:46.830 --> 37:48.830
而This就可以调起

37:48.830 --> 37:50.830
它内部的函数来

37:50.830 --> 37:51.830
所以我们在这里

37:51.830 --> 37:53.830
我们完全就可以注意

37:53.830 --> 37:56.830
它并非是去写这个的一个

37:56.830 --> 37:58.830
标签名称

37:58.830 --> 38:00.830
它不是写标签名称

38:00.830 --> 38:04.830
它直接像普通的一个函数调用一样

38:04.830 --> 38:05.830
This点

38:05.830 --> 38:07.830
我们去调RendalHeader

38:07.830 --> 38:09.830
你就这样写

38:09.830 --> 38:10.830
注意

38:10.830 --> 38:11.830
由于是我们的函数

38:11.830 --> 38:13.830
所以你写上小库号

38:13.830 --> 38:14.830
然后这里面

38:14.830 --> 38:16.830
我们去写上我们的内容

38:16.830 --> 38:27.710
Welcome to the Tarot

38:27.710 --> 38:31.790
同时我们这边写成个View

38:31.790 --> 38:34.790
以它单独行行的概念

38:34.790 --> 38:44.500
This点

38:44.500 --> 38:49.840
RendalFooter

38:49.840 --> 38:50.840
警告

38:50.840 --> 38:52.840
代表现在没有被引用

38:52.840 --> 38:53.840
我们看一下

38:53.840 --> 38:55.840
先看一下结构情况

38:55.840 --> 38:57.840
我们订了一个函数式的

38:57.840 --> 38:59.840
订了一个Late

38:59.840 --> 39:00.840
Late中写了一个函数

39:00.840 --> 39:01.840
这个函数

39:01.840 --> 39:03.840
它其实直接返回的是JX

39:03.840 --> 39:06.840
所以我们把这样的格式

39:06.840 --> 39:09.840
称之为叫Late函数式组结

39:09.840 --> 39:11.840
在函数中

39:11.840 --> 39:13.840
我们返回了JX以后

39:13.840 --> 39:15.840
我们在Rendal的Return里面

39:15.840 --> 39:17.840
我们直接利用当前对象

39:17.840 --> 39:19.840
当前这个Late的内部对象

39:19.840 --> 39:20.840
This

39:20.840 --> 39:22.840
去调用当前的这个函数

39:22.840 --> 39:23.840
这样的话

39:23.840 --> 39:25.840
我们就可以看到

39:25.840 --> 39:27.840
它里面所返回给我的

39:27.840 --> 39:29.840
这是我们刚才的PPT说的

39:29.840 --> 39:31.840
部分调用形式

39:31.840 --> 39:33.840
把整个一大块的

39:33.840 --> 39:34.840
我们的JX

39:34.840 --> 39:36.840
给它拆开来了

39:36.840 --> 39:37.840
那么现在呢

39:37.840 --> 39:39.840
我们回到页面中

39:39.840 --> 39:44.690
我们要开始调用一下它

39:44.690 --> 39:45.690
我们把它拿过来

39:45.690 --> 39:46.690
咱们称之为

39:46.690 --> 39:48.690
这是属于

39:48.690 --> 39:55.350
ShowPager

39:55.350 --> 39:56.350
点点杠

39:56.350 --> 39:57.350
点点杠Component

39:57.350 --> 40:00.350
下面的ShowPager下的ShowPager

40:00.350 --> 40:02.350
那我们把这个ShowPager

40:02.350 --> 40:03.350
显示出来

40:03.350 --> 40:07.140
保存

40:07.140 --> 40:08.140
咱们看

40:08.140 --> 40:21.300
有一条跳过了

40:21.300 --> 40:22.300
View只能从这个

40:22.300 --> 40:24.300
难道我们写错一个单词吗

40:24.300 --> 40:28.380
在内部

40:28.380 --> 40:30.380
这是2

40:30.380 --> 40:31.380
不对啊

40:31.380 --> 40:32.380
我们怎么会有个路径

40:32.380 --> 40:33.380
对吧

40:33.380 --> 40:34.380
我们把它也删了

40:34.380 --> 40:37.020
这样就行

40:37.020 --> 40:39.710
重新来过

40:39.710 --> 40:40.710
编译

40:40.710 --> 40:41.710
OK

40:41.710 --> 40:42.710
没有问题

40:42.710 --> 40:44.710
接下来我们看一下页面

40:44.710 --> 40:45.710
看到吗

40:45.710 --> 40:46.710
Header

40:46.710 --> 40:47.710
Footer

40:47.710 --> 40:49.710
这两部分内容都呈现了

40:49.710 --> 40:51.710
Welcome to the TALO

40:51.710 --> 40:53.710
这是我中间的文本

40:53.710 --> 40:54.710
说明

40:54.710 --> 40:56.710
这个ShowPager页面

40:56.710 --> 40:58.710
我们这里所看到的

40:58.710 --> 40:59.710
三部分

40:59.710 --> 41:00.710
一 二 三

41:00.710 --> 41:01.710
都呈现出来了

41:01.710 --> 41:02.710
是吧

41:02.710 --> 41:04.710
到了整个这个写法

41:04.710 --> 41:06.710
一定记住

41:06.710 --> 41:07.710
内部结构

41:07.710 --> 41:08.710
有同学

41:08.710 --> 41:10.710
如果说你使用了这样的写法

41:10.710 --> 41:11.710
我们看

41:11.710 --> 41:20.850
你如果使用了这个

41:20.850 --> 41:25.570
你如果直接使用了这个

41:25.570 --> 41:27.570
你就看到它抱错

41:27.570 --> 41:28.570
同时

41:28.570 --> 41:29.570
如果你用的是这个

41:29.570 --> 41:35.630
你就看到它

41:35.630 --> 41:37.630
也是有一个错

41:37.630 --> 41:38.630
所以

41:38.630 --> 41:40.630
在我们组建内部

41:40.630 --> 41:42.630
如果你是寒树

41:42.630 --> 41:43.630
内

41:43.630 --> 41:44.630
寒树是组建

41:44.630 --> 41:46.630
那你只能是直接通过

41:46.630 --> 41:47.630
你现在的这个

41:47.630 --> 41:48.630
所谓的

41:48.630 --> 41:50.630
对向点

41:50.630 --> 41:52.630
寒树的方式来操作

41:52.630 --> 41:53.630
OK吧

41:53.630 --> 41:56.140
理解

41:56.140 --> 41:57.140
好

41:57.140 --> 41:58.140
刚才我们说了

41:58.140 --> 42:00.140
在写内寒树组建的时候

42:00.140 --> 42:01.140
有一些规范

42:01.140 --> 42:02.140
那我们这边

42:02.140 --> 42:03.140
给大家说明一下

42:03.140 --> 42:09.390
叫内

42:09.390 --> 42:11.390
寒树是组建

42:11.390 --> 42:15.220
规范

42:15.220 --> 42:19.870
注意规范

42:19.870 --> 42:21.870
第一

42:21.870 --> 42:25.870
寒树的

42:25.870 --> 42:27.870
命名

42:27.870 --> 42:28.870
必须

42:28.870 --> 42:29.870
以

42:29.870 --> 42:33.250
Rendle开头

42:33.250 --> 42:34.250
记住

42:34.250 --> 42:37.250
你一定要以这个Rendle开头

42:37.250 --> 42:39.250
这是我们刚才写的时候

42:39.250 --> 42:41.250
那么

42:41.250 --> 42:43.250
Rendle后的

42:43.250 --> 42:45.250
第一个字母

42:45.250 --> 42:46.250
必须大写

42:46.250 --> 42:48.250
让程序能够知道

42:48.250 --> 42:49.250
前面是规范

42:49.250 --> 42:51.250
后面是名称

42:51.250 --> 42:52.250
理解之逻辑吧

42:52.250 --> 42:54.250
它就有这个要求在

42:54.250 --> 42:56.250
第二

42:56.250 --> 42:58.250
寒树的参数

42:58.250 --> 43:00.250
待会我们传个餐进去

43:00.250 --> 43:02.250
不得

43:02.250 --> 43:07.930
传入

43:07.930 --> 43:10.930
不得传入JXX元素

43:10.930 --> 43:13.930
你不能把一个JXX元素传给它

43:13.930 --> 43:14.930
第三

43:14.930 --> 43:17.930
寒树是不能

43:17.930 --> 43:19.930
地规的

43:19.930 --> 43:21.930
这个逻辑的意情

43:21.930 --> 43:23.930
我们不能进行地规

43:23.930 --> 43:25.930
好

43:25.930 --> 43:26.930
那么第一句话

43:26.930 --> 43:28.930
我们刚才已经写了

43:28.930 --> 43:30.930
并且这是规范

43:30.930 --> 43:31.930
最后这句话

43:31.930 --> 43:33.930
我们其实也能理解

43:33.930 --> 43:34.930
如果它地规的话

43:34.930 --> 43:36.930
就意味着它自己再掉自己的话

43:36.930 --> 43:38.930
它里面永远这些内容

43:38.930 --> 43:40.930
它是无法返回出来的

43:40.930 --> 43:42.930
这是它的规范里面的

43:42.930 --> 43:43.930
那么传餐

43:43.930 --> 43:45.930
我们现在就来传一个参数给它

43:45.930 --> 43:47.930
传餐是这样的

43:47.930 --> 43:49.930
就是我们在使用的时候

43:49.930 --> 43:51.930
特别是注意

43:51.930 --> 43:53.930
作为我的引用方来讲

43:53.930 --> 43:55.930
它是并不知道你里面有什么东西的

43:55.930 --> 43:57.930
它是并不知道的

43:57.930 --> 43:58.930
所以的话

43:58.930 --> 43:59.930
你的参数

43:59.930 --> 44:00.930
我们第一步

44:00.930 --> 44:02.930
你要给我的内部的

44:02.930 --> 44:04.930
这两个传餐的话

44:04.930 --> 44:06.930
那么你只能做的是什么

44:06.930 --> 44:07.930
首先我们来看

44:07.930 --> 44:09.930
我如果要给Futter传餐

44:09.930 --> 44:11.930
那我这边

44:11.930 --> 44:14.930
直接完成一个参数给值

44:14.930 --> 44:15.930
比如说

44:15.930 --> 44:17.930
我谢以自付串方式

44:17.930 --> 44:18.930
我们一步步往外走

44:18.930 --> 44:20.930
谢以自付串方式给

44:20.930 --> 44:27.060
比如说我这边是叫做

44:27.060 --> 44:28.060
Copyright

44:28.060 --> 44:30.060
给一个

44:30.060 --> 44:33.060
商标的一个英文名称

44:33.060 --> 44:34.060
Copyright

44:34.060 --> 44:35.060
然后

44:35.060 --> 44:37.060
接收它的时候

44:37.060 --> 44:40.060
是在我们的Rando Futter里面

44:40.060 --> 44:43.390
我们接收

44:43.390 --> 44:45.390
你是以函数的参数传

44:45.390 --> 44:47.390
我是以函数参数接

44:47.390 --> 44:48.390
那么这样的话

44:48.390 --> 44:50.390
我们就在Futter后面

44:50.390 --> 44:55.430
把这个内容拿出来

44:55.430 --> 44:57.430
第一步

44:57.430 --> 44:59.430
看一下

44:59.430 --> 45:01.430
刷新一下

45:01.430 --> 45:02.430
这边有

45:02.430 --> 45:09.420
有一个错吧

45:09.420 --> 45:10.420
我们看一下

45:10.420 --> 45:19.200
它指的是

45:19.200 --> 45:26.670
This.Futter

45:26.670 --> 45:27.670
应该是前面

45:27.670 --> 45:28.670
我这一面刚才的时候

45:28.670 --> 45:29.670
没有生成

45:29.670 --> 45:33.180
我们再来看一下

45:33.180 --> 45:34.180
看到吗

45:34.180 --> 45:36.180
Futter Copyright

45:36.180 --> 45:38.180
就代表着

45:38.180 --> 45:39.180
内部的

45:39.180 --> 45:40.180
如果函数的传餐

45:40.180 --> 45:41.180
其实

45:41.180 --> 45:42.180
就作为函数的

45:42.180 --> 45:44.180
这样一个名称往里走

45:44.180 --> 45:45.180
这个OK吧

45:45.180 --> 45:46.180
紧接着

45:46.180 --> 45:47.180
我们看第二个

45:47.180 --> 45:49.180
如果我没有名称

45:49.180 --> 45:51.180
那我应该是通过我们的

45:51.180 --> 45:53.180
Stator往里传

45:53.180 --> 45:54.180
那也可以

45:54.180 --> 45:55.180
我们来订一个

45:55.180 --> 46:08.150
我们订一个My Header

46:08.150 --> 46:21.480
嗯

46:21.480 --> 46:22.480
Top

46:22.480 --> 46:23.480
Shop

46:23.480 --> 46:28.290
Sales

46:28.290 --> 46:33.580
给一个简单的

46:33.580 --> 46:36.580
那个My Header

46:36.580 --> 46:37.580
然后呢

46:37.580 --> 46:38.580
我们直接去到

46:38.580 --> 46:40.580
我们的Header里面

46:40.580 --> 46:41.580
在哪里

46:41.580 --> 46:43.580
我们直接在这里面

46:43.580 --> 46:45.580
在return的外部

46:45.580 --> 46:50.560
接收这个值

46:50.560 --> 46:52.560
Constar

46:52.560 --> 46:53.560
哪哪个呢

46:53.560 --> 46:54.560
My Header

46:54.560 --> 46:59.790
等于当前的

46:59.790 --> 47:01.790
Stator里面去出来

47:01.790 --> 47:06.130
我们直接接在

47:06.130 --> 47:07.130
现在后面

47:07.130 --> 47:08.130
那个Head后面

47:08.130 --> 47:11.080
这个操作

47:11.080 --> 47:13.080
我没有传餐进来

47:13.080 --> 47:14.080
但是它内部的数据

47:14.080 --> 47:16.080
是从Stator里面来的

47:16.080 --> 47:18.080
Stator里面是有值的

47:18.080 --> 47:19.080
所以它把Stator里的值

47:19.080 --> 47:20.080
给呈现出来

47:20.080 --> 47:26.270
我们再来看一下要果

47:26.270 --> 47:27.270
有了吧

47:27.270 --> 47:28.270
Top

47:28.270 --> 47:29.270
Shop Sales

47:29.270 --> 47:31.270
前面的这个

47:31.270 --> 47:32.270
Stator里来的

47:32.270 --> 47:33.270
后面的这个

47:33.270 --> 47:35.270
是通过参数传入的

47:35.270 --> 47:36.270
对吧

47:36.270 --> 47:38.270
那么紧接着的话

47:38.270 --> 47:41.270
就是Stator的这个值哪里来

47:41.270 --> 47:42.270
那我们就要通过

47:42.270 --> 47:44.270
外部传入

47:44.270 --> 47:46.270
从外部传入

47:46.270 --> 47:47.270
修改Stator的值

47:47.270 --> 47:49.270
然后把Stator值修改Header

47:49.270 --> 47:51.270
从外部传入一个值

47:51.270 --> 47:53.270
修改我们的Foot里面的值

47:53.270 --> 47:55.270
这两部操作

47:55.270 --> 47:56.270
我们来看

47:56.270 --> 47:57.270
首先外部定一下

47:57.270 --> 47:58.270
我叫做

47:58.270 --> 48:06.330
My Header

48:06.330 --> 48:09.330
My Footer

48:09.330 --> 48:11.330
我们定两个值

48:11.330 --> 48:12.330
OK吧

48:12.330 --> 48:14.330
然后My Header里面

48:14.330 --> 48:16.330
就写上

48:16.330 --> 48:19.330
修Pater

48:19.330 --> 48:26.990
My Header

48:26.990 --> 48:28.990
My Footer里面

48:28.990 --> 48:30.990
我们给上

48:30.990 --> 48:32.990
修Pater

48:32.990 --> 48:35.990
My Footer

48:35.990 --> 48:40.140
给两个

48:40.140 --> 48:42.140
那我们去到Foot里面

48:42.140 --> 48:43.140
Foot里面其实只要

48:43.140 --> 48:45.140
这边的值拿到

48:45.140 --> 48:46.140
它就会往里传

48:46.140 --> 48:47.140
所以呢

48:47.140 --> 48:48.140
我们来看

48:48.140 --> 48:50.140
由于它最外部

48:50.140 --> 48:52.140
是一个类结构

48:52.140 --> 48:53.140
所以它的拿值方式

48:53.140 --> 48:54.140
直接可以是

48:54.140 --> 48:57.140
This.Propers.

48:57.140 --> 48:58.140
里面的我们刚才

48:58.140 --> 48:59.140
外面写的一个

48:59.140 --> 49:03.150
My Footer

49:03.150 --> 49:04.150
对吧

49:05.150 --> 49:07.150
那我们看一下页面

49:07.150 --> 49:08.150
对吧

49:08.150 --> 49:10.150
Shop My Footer

49:10.150 --> 49:11.150
你就可以直接传进来

49:11.150 --> 49:13.150
而第二个呢

49:13.150 --> 49:15.150
其实是我们现在的Stator

49:15.150 --> 49:16.150
所以

49:16.150 --> 49:17.150
它需要拿到的时候

49:17.150 --> 49:19.150
改变Stator在哪里

49:19.150 --> 49:20.150
我们说过

49:20.150 --> 49:23.460
Construct里面就可以

49:23.460 --> 49:27.460
This.SetStator

49:27.460 --> 49:31.460
修改My Header

49:31.460 --> 49:33.460
值从哪来

49:33.460 --> 49:36.460
This.Propers

49:36.460 --> 49:38.460
里面的我们的My Header

49:38.460 --> 49:39.460
拿过来

49:39.460 --> 49:43.860
把它进行改变

49:43.860 --> 49:44.860
刚进来的时候

49:44.860 --> 49:45.860
把这个值

49:45.860 --> 49:46.860
直接进行改变以后的话

49:46.860 --> 49:47.860
那么这个值

49:47.860 --> 49:48.860
后续的操作

49:48.860 --> 49:49.860
是变什么了

49:49.860 --> 49:50.860
是它直接

49:50.860 --> 49:51.860
在到我们的

49:51.860 --> 49:52.860
在渲染的时候

49:52.860 --> 49:54.860
去到我们的RandomHandle里面

49:54.860 --> 49:55.860
把里面值拿出来

49:55.860 --> 49:56.860
再在我们的

49:56.860 --> 49:57.860
Handle后面

49:57.860 --> 49:58.860
显示出来

49:58.860 --> 50:00.860
那么此事你来看

50:00.860 --> 50:01.860
哦 你看见吗

50:01.860 --> 50:03.860
这是有一个小错

50:03.860 --> 50:04.860
暴了一个小错

50:04.860 --> 50:11.120
我们往前看一下

50:11.120 --> 50:18.780
My Header

50:18.780 --> 50:20.780
那我们就取小一点

50:20.780 --> 50:22.780
My Header

50:22.780 --> 50:24.780
我们把它

50:24.780 --> 50:25.780
这个和它一样对吧

50:25.780 --> 50:27.780
我们所以把它给取小一点

50:27.780 --> 50:30.780
我们把它放到下面来

50:30.780 --> 50:39.730
我们乘之为

50:39.730 --> 50:43.640
这样应该就可以了

50:43.640 --> 50:49.410
OK

50:49.410 --> 50:51.410
回过来

50:51.410 --> 50:52.410
也没运行

50:52.410 --> 50:54.410
看到吗

50:54.410 --> 50:57.850
我们先看

50:57.850 --> 50:59.850
我们这边传进去的两个值

50:59.850 --> 51:01.850
一个是My Header

51:01.850 --> 51:02.850
My Header

51:02.850 --> 51:03.850
一个是修

51:03.850 --> 51:05.850
Pader My Foot

51:05.850 --> 51:07.850
显示时候修出来了

51:07.850 --> 51:09.850
那么上面这个

51:09.850 --> 51:10.850
还没有

51:10.850 --> 51:14.540
我们来看一下其原因

51:14.540 --> 51:15.540
一个还没改完

51:15.540 --> 51:16.540
就是我们刚才把这个

51:16.540 --> 51:18.540
My Header改了

51:18.540 --> 51:19.540
把下面这两个改了

51:19.540 --> 51:20.540
其实上面这边还有一个

51:20.540 --> 51:21.540
是外面输进来以后

51:21.540 --> 51:23.540
修改My Header的

51:23.540 --> 51:24.540
所以我们把它

51:24.540 --> 51:26.540
后面两个一样删掉

51:26.540 --> 51:27.540
这样去保存

51:27.540 --> 51:28.540
My Header

51:28.540 --> 51:29.540
这样的话

51:29.540 --> 51:31.540
我们只能看到的效果就是

51:31.540 --> 51:33.540
直接演示的时候

51:33.540 --> 51:34.540
上面一句

51:34.540 --> 51:35.540
修Pader My Header

51:35.540 --> 51:38.540
修Pader My Foot都出来了

51:38.540 --> 51:39.540
对吧

51:39.540 --> 51:41.540
所以我们作为类函数

51:41.540 --> 51:43.540
组建的使用的时候

51:43.540 --> 51:45.540
我们能够自由的

51:45.540 --> 51:46.540
像这里边

51:46.540 --> 51:48.540
无论是它自带的

51:48.540 --> 51:50.540
Random里面进行操作

51:50.540 --> 51:52.540
还是它现在里面的函数

51:52.540 --> 51:54.540
利用State的操作方式

51:54.540 --> 51:55.540
和我们传执方式

51:55.540 --> 51:57.540
两种方式都可以使用

51:57.540 --> 51:59.540
这样就满足了我们

51:59.540 --> 52:02.540
类函数组建的两种格式

52:02.540 --> 52:04.540
一种是纯粹的类函数组建

52:04.540 --> 52:07.540
我们是在Welcome To里面写的

52:07.540 --> 52:09.540
它其实就是一个存的

52:09.540 --> 52:11.540
我们称之为普通的函数组建

52:11.540 --> 52:13.540
第二种就是类函数

52:13.540 --> 52:14.540
当然

52:14.540 --> 52:16.540
我们这边也给大家写了一个

52:16.540 --> 52:19.540
纯的类组建

52:19.540 --> 52:21.540
那么这三种形式

52:21.540 --> 52:23.540
大家可以根据需要

52:23.540 --> 52:24.540
进行判断

52:24.540 --> 52:25.540
如果说

52:25.540 --> 52:28.540
只是一个想封装

52:28.540 --> 52:29.540
内部所有内容

52:29.540 --> 52:31.540
并且只是作为呈现的

52:31.540 --> 52:32.540
那么你这时候

52:32.540 --> 52:34.540
用函数组建就可以

52:34.540 --> 52:36.540
如果你本身业务逻辑

52:36.540 --> 52:37.540
有很强大

52:37.540 --> 52:40.540
你可以在我们的类组建里面用

52:40.540 --> 52:41.540
但如果说

52:41.540 --> 52:42.540
你本身这里边

52:42.540 --> 52:44.540
又有类的要求

52:44.540 --> 52:46.540
又有函数的要求

52:46.540 --> 52:48.540
你就要用到我们的类函数组建

52:48.540 --> 52:49.540
是这个逻辑

52:49.540 --> 52:50.540
OK吧

52:50.540 --> 52:51.540
这样的话

52:51.540 --> 52:52.540
导致我们现在

52:52.540 --> 52:54.540
就可以非常明确的

52:54.540 --> 52:57.540
我们的几个不同的要求和写法

52:57.540 --> 52:58.540
这样也就是

52:58.540 --> 53:01.540
我们的函数组建的一些内容

53:01.540 --> 53:03.540
那么除了这个以外

53:03.540 --> 53:05.540
我们其实函数组建

53:05.540 --> 53:07.540
我们有个几个特点说明一下

53:07.540 --> 53:09.540
就是一般情况下

53:09.540 --> 53:10.540
建议

53:10.540 --> 53:11.540
我们普通的函数组建

53:11.540 --> 53:13.540
就是作为一个

53:13.540 --> 53:16.540
我们的显示模型来处理

53:16.540 --> 53:18.540
而如果我们作为一个

53:18.540 --> 53:19.540
继承于Component中的

53:19.540 --> 53:21.540
显示类的方式

53:21.540 --> 53:23.540
我们一般性的这样的操作

53:23.540 --> 53:25.540
会更加的容易去维护

53:25.540 --> 53:26.540
它的作用预议

53:26.540 --> 53:28.540
还有它的清晰度

53:28.540 --> 53:31.540
这些是你可以根据需要来的

53:31.540 --> 53:32.540
好了

53:32.540 --> 53:35.540
那么这是官方所给出的两个语句

53:35.540 --> 53:36.540
那么之后

53:36.540 --> 53:37.540
我们会把函数组建

53:37.540 --> 53:39.540
用在我们不同的案例中

53:39.540 --> 53:40.540
这样也能够很好的

53:40.540 --> 53:42.540
方便我们的代码的维护

53:42.540 --> 53:44.540
那么函数是组建的讲解

53:44.540 --> 53:45.540
就先到这里了

