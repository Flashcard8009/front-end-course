WEBVTT

00:00.110 --> 00:02.510
好 我们继续讲解Tarot-Clek-Cheng

00:02.510 --> 00:05.310
Clek-Cheng讲解一下组件开发与Praverse

00:05.310 --> 00:13.710
那么组件化开发应该讲 现在已经成为我们现在前端框架的一个主流的开发模式

00:13.710 --> 00:19.910
无论你用任何的一种框架 它的内部都会强调组件的存在

00:19.910 --> 00:23.710
那么组件 我们讲它的好处是什么

00:23.710 --> 00:27.510
组件仍是可以将UI界分成一些独立的模块

00:27.510 --> 00:29.310
我们可以附用组件

00:29.510 --> 00:33.710
同时呢 组件本身和模板的区别在于

00:33.710 --> 00:38.310
模板只是为了做形式 展现上的独立出来

00:38.310 --> 00:44.510
而组件它是可以单独构建某一个部分 某一个部件都可以

00:44.510 --> 00:51.910
那么这个单独构建呢 我们把它理解成它的行为 样式和它的一个展示

00:51.910 --> 00:55.510
这三部分都可以被封装在组件里面

00:55.510 --> 01:00.210
所以这样的话呢 我们就可以完成一个独立的功能性操作

01:00.210 --> 01:05.510
同时 我们讲组件的外部数据的获取和调用

01:05.510 --> 01:09.310
也是不同框架里面所要给到的一个讯息

01:09.310 --> 01:12.710
但是呢 基本上是差不多的一种形式

01:12.710 --> 01:14.910
也就是我们在第二句话说到的

01:14.910 --> 01:17.610
组件上从概念上来说呢 它就像一个函数

01:17.610 --> 01:20.510
它可以接收任意的我们的输入值

01:20.510 --> 01:23.610
接收输入值就是它的数据传输

01:23.610 --> 01:26.710
我们从引用方 我们也可以称为叫副组件

01:26.710 --> 01:31.410
因为对于我们现在的这个terror来讲

01:31.410 --> 01:34.910
它的页面依然是component继承

01:34.910 --> 01:38.610
然后对它的子 也就是它的一个组件来讲

01:38.610 --> 01:41.610
它也是component继承 所以它们两个可以称为子副

01:41.610 --> 01:44.410
有些地方咱们称之为叫引用和组件

01:44.410 --> 01:46.210
有些地方称为副组件和子组件

01:46.210 --> 01:48.410
那么这个是逻辑上是相通的

01:48.410 --> 01:51.510
那么对于副组件向子组件数据传递的时候

01:51.510 --> 01:54.710
我们一般都是通过属性方式进行传递

01:54.710 --> 01:58.010
当然我们很多是从子组件向副组件的话

01:58.010 --> 02:01.710
那是事件硬射回效 对吧 这样的格式

02:01.710 --> 02:03.710
那么我们称之为propercy

02:03.710 --> 02:05.510
这是组件的一种操作

02:05.510 --> 02:07.810
那么我们并需要在 我们说到了

02:07.810 --> 02:11.910
并返回一个在组件上展示的terror元素

02:11.910 --> 02:13.710
这是它的一个格式

02:13.710 --> 02:16.110
我们之前一直是这样在做

02:16.110 --> 02:19.510
那么同时呢 你注意一下

02:19.510 --> 02:21.810
组件开发

02:21.810 --> 02:26.410
里面的内容我们是用ES6的格式class来定义

02:26.410 --> 02:30.210
因为propercy里面的话呢

02:30.210 --> 02:32.810
我们讲它有几种定义模式

02:32.810 --> 02:35.010
特别是我们的reactor

02:35.010 --> 02:38.410
reactor本身来讲它可以用cdn的模式

02:38.410 --> 02:41.210
对吧 直接引入我们讲cdn

02:41.210 --> 02:43.610
然后的话我们就可以直接使用

02:43.610 --> 02:45.910
还有的就是我们去安装脚手架

02:45.910 --> 02:48.610
那么terror的方式就是安装脚手架的

02:48.610 --> 02:49.810
cdn的模式的话呢

02:49.810 --> 02:52.010
我们其实没有用ES6的class来写

02:52.010 --> 02:53.810
我们用的是function的结构

02:53.810 --> 02:56.910
但是我们现在的terror来讲的话呢

02:56.910 --> 02:59.210
它用的是我们的lay结构

02:59.210 --> 03:02.310
所以lay的定义

03:02.310 --> 03:04.710
包括是lay的一个继承

03:04.710 --> 03:07.510
这些都是属于ES6的语法结构

03:07.510 --> 03:10.510
当然如果你已经学过面向对象的概念

03:10.510 --> 03:12.110
那么这一点来对你来讲呢

03:12.110 --> 03:14.110
已经不是一个陌生的东西

03:14.110 --> 03:15.610
如果你只是接触过前端

03:15.610 --> 03:18.510
并且你对弱原类型非常的依赖

03:18.510 --> 03:19.310
那么同学的话

03:19.310 --> 03:22.310
你可能需要好好地再去看一看

03:22.310 --> 03:24.410
什么是强类型的class

03:24.410 --> 03:28.510
和我们的extend这种继承关系

03:28.510 --> 03:30.310
继承对面向对象来说

03:30.310 --> 03:32.610
继承是它里面也比较重要的一点

03:32.610 --> 03:36.510
同时我们其实也讲到了前端的强类型化

03:36.510 --> 03:40.710
应该讲也是非常的训稳地在发展

03:40.710 --> 03:42.110
应该讲这是一个趋势

03:42.110 --> 03:44.110
包括我们讲到的ts

03:44.110 --> 03:46.610
它也是一种强类型结构

03:46.610 --> 03:48.210
好 我们继续往下来说一下

03:48.210 --> 03:49.410
我们看一下ppt

03:49.410 --> 03:53.110
然后的话我们简单去运行一下

03:53.110 --> 03:54.410
第二个我们说一下

03:54.410 --> 03:57.210
taro元素对组件的一个渲染

03:57.210 --> 04:00.110
taro对组件是可以内置组件的渲染

04:00.110 --> 04:02.110
也可以是自定义组件渲染

04:02.110 --> 04:03.210
内置组件的话

04:03.210 --> 04:04.810
我们刚才前面看到的那种

04:04.810 --> 04:06.410
所谓的vue、tester

04:06.410 --> 04:08.210
这些都是成都为内置组件

04:08.210 --> 04:10.010
但是我们自定义组件的话

04:10.010 --> 04:11.910
我们也可以把它放在里面

04:11.910 --> 04:15.310
那么此时系统会根据你现在的引用关系

04:15.310 --> 04:17.610
会去找到你现在的自定义组件

04:17.610 --> 04:22.110
并且对它里面的我们的tsr

04:22.110 --> 04:23.610
进行一定的渲染

04:23.610 --> 04:26.610
它会进行内部的深入去找到它

04:26.610 --> 04:27.510
propos

04:27.510 --> 04:28.410
propos注意一下

04:28.410 --> 04:31.010
我们一般在属性里面获取属

04:31.010 --> 04:33.210
在组件里面获取属性的时候

04:33.210 --> 04:35.010
我们用的都是propos

04:35.010 --> 04:36.010
这个植住一样

04:36.010 --> 04:38.310
它是一个只独植

04:38.310 --> 04:39.810
也就是你在属性里面

04:39.810 --> 04:44.310
你绝对不可能对它这个propos进行改变的

04:44.310 --> 04:45.410
一个生命的组件

04:45.410 --> 04:48.410
绝不能去改变它自己的propos

04:48.410 --> 04:53.410
但是我们业务上面是允许你现在需要有多值的变化的

04:53.410 --> 04:55.910
那么这个在我们前面已经给它演示过

04:55.910 --> 04:58.410
待会我们还可以拿个小例子给大家看一看

04:58.410 --> 05:01.510
其实我们就要做一个状态改变

05:01.510 --> 05:03.010
在我们的副组件上面

05:03.010 --> 05:04.710
我们要多次传入

05:04.710 --> 05:06.310
传入的时候

05:06.310 --> 05:10.610
你可以对它进行获取不同的数据

05:10.610 --> 05:12.410
但是在内部一旦获取到了

05:12.410 --> 05:14.010
你就不能变

05:14.010 --> 05:15.110
这点理解吧

05:15.110 --> 05:16.710
就好比说是两个人

05:16.710 --> 05:17.810
你是接收方

05:17.810 --> 05:19.810
它是负余方

05:19.810 --> 05:20.710
接收方的话

05:20.710 --> 05:22.010
你拿到了你就不能变

05:22.010 --> 05:23.810
但是负余方可以自己改变

05:23.810 --> 05:25.710
改变以后给你不同的东西

05:25.710 --> 05:27.610
是这个逻辑

05:27.610 --> 05:29.710
react中的propos types

05:29.710 --> 05:30.910
这点要说明的是

05:30.910 --> 05:32.310
因为在之前我们没有讲到

05:32.310 --> 05:33.610
因为在这边的话

05:33.610 --> 05:35.810
在之前的课程中我们是组件的调用

05:35.810 --> 05:36.410
对吧

05:36.410 --> 05:38.710
我们在这边我们说到的是

05:38.710 --> 05:42.310
react本身有一个叫做

05:42.310 --> 05:43.710
组件的验证

05:43.710 --> 05:46.710
或者称之为我们的叫做

05:46.710 --> 05:49.110
检测类型这样的格式

05:49.110 --> 05:50.310
那么这个的话

05:50.310 --> 05:52.610
其实在react里面经常会用到

05:52.610 --> 05:54.610
包括是它的一个类型检测

05:54.610 --> 05:56.610
检测器我们称之为

05:56.610 --> 05:58.810
但是在微信小程序里面

05:58.810 --> 05:59.710
我们说一下

05:59.710 --> 06:01.310
它不是不能用

06:01.310 --> 06:02.410
它是无效

06:02.410 --> 06:04.310
那么但是现在在官网上面

06:04.310 --> 06:05.310
我们看到

06:05.310 --> 06:06.210
待会可以看一下

06:06.210 --> 06:07.310
它也会告诉你

06:07.310 --> 06:08.610
官网写的是叫做

06:08.610 --> 06:09.810
有些问题

06:09.810 --> 06:11.410
官网用了这四个字

06:11.410 --> 06:12.710
我们讲期待官网

06:12.710 --> 06:14.610
可能在接下来的版本中

06:14.610 --> 06:16.410
它是可以把这部分内容

06:16.410 --> 06:17.810
进行一个优化

06:17.810 --> 06:21.410
能够使其能够作为一个使用

06:21.410 --> 06:22.410
如果不能的话

06:22.410 --> 06:24.410
那么应该有其他的迭代办法

06:24.410 --> 06:25.810
能够进行数据验证

06:25.810 --> 06:26.510
不然的话

06:26.510 --> 06:28.310
小程序这边的操作

06:28.310 --> 06:30.710
我们还得手动的一个个去写

06:30.710 --> 06:33.010
这个的话也比较烦

06:33.010 --> 06:33.410
好了

06:33.410 --> 06:35.010
我们把PPT看了一下以后

06:35.010 --> 06:35.510
接下去

06:35.510 --> 06:36.810
我们回到页面中来

06:38.210 --> 06:38.910
说到组件

06:38.910 --> 06:40.010
我们前面有组件

06:40.010 --> 06:41.210
但是我们希望

06:41.210 --> 06:43.310
我们重新创建一个出来吧

06:43.310 --> 06:46.210
所以我们在我们的代码中

06:46.210 --> 06:48.610
SRC打开组件

06:48.610 --> 06:50.810
我们创建个Greeting

06:50.810 --> 06:56.530
创建目录

06:56.530 --> 06:59.580
Greeting

06:59.580 --> 07:07.390
创建文件

07:07.390 --> 07:15.440
创建第二个JSX

07:15.440 --> 07:16.240
好了

07:16.240 --> 07:17.940
创建几个文件以后的话

07:17.940 --> 07:18.840
我们现在

07:18.840 --> 07:22.340
先把JSX里面的代码写一下

07:22.340 --> 07:28.820
Import Taro

07:28.820 --> 07:40.110
Component from Taro

07:40.110 --> 07:41.310
第二个

07:41.310 --> 08:00.410
Import View from Taro's Component

08:00.410 --> 08:09.040
Expert Default Class

08:09.040 --> 08:18.370
Greeting Extends Component

08:18.370 --> 08:18.970
这是类

08:18.970 --> 08:21.970
然后里面最简单的

08:21.970 --> 08:27.320
咱们就定义一个Random

08:27.320 --> 08:31.230
定个Random

08:31.230 --> 08:33.430
然后

08:33.430 --> 08:50.520
把放在Return里面吧

08:50.520 --> 08:51.420
好

08:51.520 --> 08:54.120
输出一个我们的直接写吧

08:54.120 --> 09:10.480
我们写一个View

09:10.480 --> 09:11.180
紧接着

09:11.180 --> 09:12.980
我们把它引用一下

09:12.980 --> 09:14.980
我们把它放在我们的

09:14.980 --> 09:16.480
手页上面

09:16.480 --> 09:18.080
我们手页换一下吧

09:18.080 --> 09:18.680
就是

09:19.980 --> 09:21.680
我们打开

09:21.680 --> 09:22.580
JS Demo

09:22.580 --> 09:26.740
我们换成About

09:26.740 --> 09:37.080
我们换成About

09:37.080 --> 09:39.580
然后我们在About上去引用一下

09:39.580 --> 09:45.280
在About上去引用一下我们的Greeting

09:45.280 --> 09:46.380
About

09:46.380 --> 09:52.760
我们找到About

09:52.760 --> 09:55.460
组件给引进来

09:55.460 --> 10:00.590
Import

10:00.590 --> 10:04.000
Greeting

10:04.000 --> 10:05.500
组件在哪

10:05.500 --> 10:12.340
组件在我们的Component下面的Greeting

10:12.340 --> 10:14.640
Component's

10:14.640 --> 10:18.240
Greeting下的Greeting

10:18.240 --> 10:19.240
引入进来

10:19.240 --> 10:20.540
引入进来以后的话

10:20.540 --> 10:31.910
那么你就可以直接使用这个组件

10:31.910 --> 10:32.310
对啊

10:32.310 --> 10:33.010
这样的话

10:33.010 --> 10:37.450
我们看组件里面是一个Greeting的View

10:37.450 --> 10:39.350
一页面就会呈现这个Greeting

10:39.350 --> 10:40.250
ok

10:40.250 --> 10:42.150
这是我们说到的

10:42.150 --> 10:43.950
那么组件本身自己

10:43.950 --> 10:45.250
像这个的话

10:45.250 --> 10:46.450
你看

10:46.450 --> 10:47.450
我们在这上面

10:47.450 --> 10:48.650
我们把它运行一下

10:48.650 --> 10:50.750
因为之前我们已经讲过

10:50.750 --> 10:52.650
我们会

10:52.650 --> 10:54.350
Tarot的话会把DIV

10:54.350 --> 10:55.750
类似于这样的元素

10:55.750 --> 10:58.250
能够使用在我们的微信里面

10:58.250 --> 11:00.250
但是它无效

11:00.250 --> 11:01.950
所以一般我们在这个地方

11:01.950 --> 11:03.150
我们都会用View

11:03.150 --> 11:04.150
或Tester

11:04.150 --> 11:10.990
这两个基础格式来进行操作

11:10.990 --> 11:12.090
这时候你来看一下

11:12.090 --> 11:13.090
语法就变了

11:14.690 --> 11:15.490
ok

11:15.490 --> 11:17.290
那么这点咱们知道一下就行了

11:17.290 --> 11:19.490
然后同时第二点

11:19.490 --> 11:21.990
那么既然我们这边做了这样的一个动作

11:21.990 --> 11:23.090
就是我们有一个View

11:23.090 --> 11:25.890
因为本身也放了一个Greeting

11:25.890 --> 11:27.290
那我们就说一下

11:27.290 --> 11:30.890
这种操作我们称之为叫组件的渲染

11:30.890 --> 11:33.290
我们把它放在Return里面的时候

11:33.290 --> 11:34.890
组件你如果一旦看到

11:34.890 --> 11:36.690
我们有这种所谓的

11:36.690 --> 11:39.090
从Component里面过来的

11:39.090 --> 11:41.290
我们把它名称称之为叫做

11:41.290 --> 11:44.390
内置组件的渲染

11:44.390 --> 11:46.290
那么还有的就是我们通过

11:46.290 --> 11:48.690
我们自定义的Component过来的

11:48.690 --> 11:52.290
那么这称之为就是自定义组件渲染

11:52.290 --> 11:53.490
这两个对大家来讲

11:53.490 --> 11:55.090
应该不是特别难

11:55.090 --> 11:56.490
请接着我们来看一下

11:56.490 --> 12:00.190
什么叫做我们的Purpose的指读

12:00.190 --> 12:01.790
我们传直进去

12:01.790 --> 12:04.090
我们称之为

12:04.090 --> 12:09.810
Say Hello

12:09.810 --> 12:13.110
我们Say Hello

12:13.110 --> 12:13.910
Hello 谢谢好

12:14.910 --> 12:16.910
对于我组件里面

12:16.910 --> 12:17.910
我来接收这个指

12:17.910 --> 12:19.910
那么组件接收的时候

12:19.910 --> 12:21.910
我们可以直接完成

12:21.910 --> 12:23.910
你现在在Return里面接收

12:23.910 --> 12:25.910
和在其他地方

12:25.910 --> 12:26.910
我们都是一样

12:26.910 --> 12:27.910
先看一下

12:27.910 --> 12:31.690
This点

12:31.690 --> 12:33.690
Purpose点

12:33.690 --> 12:36.690
我们前面叫做Say Hello

12:36.690 --> 12:40.390
两端保存

12:40.390 --> 12:46.160
对吧

12:46.160 --> 12:48.160
好 请接着继续来看

12:48.160 --> 12:53.710
我们在Random里面

12:53.710 --> 13:03.800
我们接收

13:03.800 --> 13:04.800
Say Something

13:04.800 --> 13:19.790
一样

13:19.790 --> 13:20.790
OK

13:20.790 --> 13:23.790
我们可以进行数据的接收

13:23.790 --> 13:27.100
请注意这边

13:27.100 --> 13:29.100
你说我改变这个值可不可以

13:29.100 --> 13:31.100
主要属性

13:31.100 --> 13:34.100
我们说Purpose

13:34.100 --> 13:37.800
不能改变

13:37.800 --> 13:42.600
其值

13:42.600 --> 13:46.110
原因为指读

13:46.110 --> 13:48.110
你说我改变这个行不行

13:48.110 --> 13:51.110
主要这个是不一样的概念

13:51.110 --> 13:53.110
比如说在这边

13:53.110 --> 13:58.620
我们写

13:58.620 --> 13:59.620
Hello Word

13:59.620 --> 14:00.620
你这样写

14:00.620 --> 14:05.790
它改变了

14:05.790 --> 14:07.790
你这种形式的改变

14:07.790 --> 14:09.790
它不是改变Purpose

14:09.790 --> 14:11.790
它改变的是这个叫

14:11.790 --> 14:14.790
Say Something里面所指向的值

14:14.790 --> 14:16.790
那么如果说

14:16.790 --> 14:19.790
你要完成这个的一个演示的话

14:19.790 --> 14:20.790
那么

14:20.790 --> 14:21.790
是这样

14:21.790 --> 14:29.260
New Value

14:29.260 --> 14:30.260
我们来看一下

14:30.260 --> 14:32.260
我们这样做

14:32.260 --> 14:33.260
我把它放这

14:33.260 --> 14:37.530
对吧

14:37.530 --> 14:39.530
那么我们把

14:39.530 --> 14:41.530
这个值不用去修改它

14:41.530 --> 14:48.270
我们来看一下

14:48.270 --> 14:49.270
你注意一下

14:49.270 --> 14:51.270
它写是New Value

14:51.270 --> 14:53.270
那么这个情况会是一个

14:53.270 --> 14:54.270
什么样的效果呢

14:54.270 --> 14:56.270
那么这边我就要给大家说一下了

14:56.270 --> 15:00.710
这个概念和你现在这个

15:00.710 --> 15:02.710
有一个小区别

15:02.710 --> 15:04.710
那么说到我们Purpose的

15:04.710 --> 15:07.710
本身的不可改变的概念

15:07.710 --> 15:09.710
你得回忆到我们的

15:09.710 --> 15:11.710
在讲函数的时候

15:11.710 --> 15:12.710
有一种

15:12.710 --> 15:14.710
值传递引用传递

15:14.710 --> 15:15.710
我们也称之为叫

15:15.710 --> 15:16.710
纯函数

15:16.710 --> 15:18.710
非纯函数的概念

15:18.710 --> 15:20.710
我们在完成

15:20.710 --> 15:21.710
这个操作

15:21.710 --> 15:22.710
你现在

15:22.710 --> 15:23.710
现在首先第一点

15:23.710 --> 15:24.710
咱们看到的是

15:24.710 --> 15:26.710
我传进来的是Hello是吗

15:26.710 --> 15:27.710
然后在这边

15:27.710 --> 15:30.710
我们对这个Hello进行了改变

15:30.710 --> 15:31.710
那我请问

15:31.710 --> 15:33.710
我请问的是

15:33.710 --> 15:35.710
当你现在

15:35.710 --> 15:38.710
Say Hello得到New Value这个值的时候

15:38.710 --> 15:42.710
你外面的这个Say Hello改变了吗

15:42.710 --> 15:44.710
这个是没有变的

15:44.710 --> 15:46.710
那么这就意味着

15:46.710 --> 15:49.710
你在这里的所有的改变

15:49.710 --> 15:52.710
都不是改变原值的Say Hello

15:52.710 --> 15:54.710
或者甚至为这个的Hello值

15:54.710 --> 15:56.710
而是你在里面

15:56.710 --> 16:01.710
重新完成对它的另外的指向

16:01.710 --> 16:03.710
你逻辑上通吗

16:03.710 --> 16:04.710
那么这个概念

16:04.710 --> 16:06.710
我们依然需要去使用

16:06.710 --> 16:08.710
我们的函数的一个操作

16:08.710 --> 16:10.710
给大家来讲解

16:10.710 --> 16:15.150
比如我们举例

16:15.150 --> 16:17.150
比如你现在有个函数

16:17.150 --> 16:20.150
我们称之为那个念吧

16:20.150 --> 16:23.420
就这样写

16:23.420 --> 16:25.420
Number 1

16:25.420 --> 16:31.290
Number 2

16:31.290 --> 16:32.290
我现在

16:32.290 --> 16:34.290
Return

16:34.290 --> 16:35.290
Number 1

16:35.290 --> 16:36.290
减Number 2

16:36.290 --> 16:38.290
做这样的操作

16:38.290 --> 16:40.290
那我的问题是

16:40.290 --> 16:45.500
如果我在调用这函数的时候

16:45.500 --> 16:48.500
为它传了一个20和10

16:48.500 --> 16:49.500
请问

16:49.500 --> 16:50.500
在做完Number 1

16:50.500 --> 16:51.500
减Number 2

16:51.500 --> 16:54.500
做Return返回的时候

16:54.500 --> 16:56.500
外部我们设定一个变量

16:56.500 --> 16:57.500
外面还得设定变量

16:57.500 --> 17:01.500
我们称之为Number 1

17:01.500 --> 17:02.500
这样去说

17:02.500 --> 17:03.500
10

17:03.500 --> 17:20.720
看到

17:20.720 --> 17:22.720
现在的情况是

17:22.720 --> 17:24.720
如果说我Number 1和Number 2

17:24.720 --> 17:25.720
在里面

17:25.720 --> 17:27.720
我做了任何的操作

17:27.720 --> 17:29.720
包括是我们在这边

17:29.720 --> 17:30.720
我们说

17:30.720 --> 17:32.720
Number 1

17:32.720 --> 17:34.720
减等5

17:34.720 --> 17:38.680
Number 2

17:38.680 --> 17:40.680
加等10

17:40.680 --> 17:42.680
类似于这样的做法

17:42.680 --> 17:44.680
随便你在Number 1和Number 2的修改

17:44.680 --> 17:47.680
你会影响我们原值吗

17:47.680 --> 17:50.680
Number 1和Number 2

17:50.680 --> 17:51.680
不会的

17:51.680 --> 17:52.680
为什么

17:52.680 --> 17:53.680
我们把这种逻辑

17:53.680 --> 17:56.680
称之为叫做直传递

17:56.680 --> 17:57.680
在函数里面

17:57.680 --> 17:58.680
那么这个函数

17:58.680 --> 18:00.680
我们称之为叫

18:00.680 --> 18:05.740
纯函数

18:05.740 --> 18:07.740
它叫纯函数

18:07.740 --> 18:09.740
所谓的纯函数是直

18:09.740 --> 18:11.740
它内部的所有的直

18:11.740 --> 18:13.740
是由它自己的输入以后

18:13.740 --> 18:15.740
来进行改变

18:15.740 --> 18:16.740
来进行操作

18:16.740 --> 18:18.740
它不会去返回给

18:18.740 --> 18:21.740
我们原有的Number 1和Number 2的

18:21.740 --> 18:22.740
那么

18:22.740 --> 18:24.740
所以你在这里面的改变

18:24.740 --> 18:26.740
就和我这个是一样

18:26.740 --> 18:28.740
你不会去影响到

18:28.740 --> 18:29.740
这里的外面的Hello

18:29.740 --> 18:30.740
你只能说

18:30.740 --> 18:33.740
改变了Say Hello里面的内容

18:33.740 --> 18:34.740
第二步

18:34.740 --> 18:36.740
如果你要影响外面的话

18:36.740 --> 18:39.740
那我们以前所谓的是什么

18:39.740 --> 18:41.740
是一种叫做引用传递

18:41.740 --> 18:43.740
就是你在这边的改变

18:43.740 --> 18:45.740
它影响了外部

18:45.740 --> 18:46.740
你比如

18:46.740 --> 18:47.740
你看

18:47.740 --> 18:51.330
我们举个势力

18:51.330 --> 18:52.330
我写一个方法

18:52.330 --> 18:58.600
咱们叫做Number 2

18:58.600 --> 19:00.600
然后我传进来一个

19:00.600 --> 19:02.600
Student对象

19:02.600 --> 19:06.430
外面我们定义的是

19:06.430 --> 19:08.430
Student

19:08.430 --> 19:09.430
OBJ

19:09.430 --> 19:10.430
等于

19:10.430 --> 19:12.430
年

19:12.430 --> 19:15.830
town

19:15.830 --> 19:16.830
Ager

19:16.830 --> 19:17.830
19岁

19:17.830 --> 19:19.830
我写伟代

19:19.830 --> 19:20.830
然后

19:20.830 --> 19:23.830
我在方法函数里面

19:23.830 --> 19:32.130
我做这个动作

19:32.130 --> 19:33.130
你要这样做

19:33.130 --> 19:34.130
那么这种情况下

19:34.130 --> 19:36.130
它就会去影响到

19:36.130 --> 19:37.130
因为

19:37.130 --> 19:39.130
我们所知道的对象的名称

19:39.130 --> 19:41.130
它应该就是一个

19:41.130 --> 19:43.130
内存对象的地址的指向

19:43.130 --> 19:44.130
所以你这时候

19:44.130 --> 19:45.130
对于内存

19:45.130 --> 19:46.130
地址的指向里面的链

19:46.130 --> 19:49.130
和外部的链是一个

19:49.130 --> 19:50.130
这种情况下

19:50.130 --> 19:51.130
我们就可以称它为叫

19:51.130 --> 19:52.130
非存寒数

19:52.130 --> 19:53.130
或者称之为我们

19:53.130 --> 19:55.130
称它为叫直传地

19:55.130 --> 19:56.130
这种时候的话

19:56.130 --> 19:58.130
你会在里面的运行

19:58.130 --> 19:59.130
影响外面

19:59.130 --> 20:02.130
那么我们现在把这个

20:02.130 --> 20:03.130
看成的是

20:03.130 --> 20:04.130
这个寒数

20:04.130 --> 20:06.130
看成的就是我现在这个组件

20:06.130 --> 20:09.130
而外面就是我调用它的点

20:09.130 --> 20:11.130
我们的所有组件

20:11.130 --> 20:12.130
The purpose的属性

20:12.130 --> 20:14.130
指的就是这些内容

20:14.130 --> 20:15.130
它是不可变的

20:15.130 --> 20:16.130
它只能是

20:16.130 --> 20:18.130
向上面这种传递模式

20:18.130 --> 20:20.130
那么你想要变

20:20.130 --> 20:21.130
就是我们刚才所讲到的

20:21.130 --> 20:22.130
并不是我在这边

20:22.130 --> 20:24.130
去这么设置这个指

20:24.130 --> 20:25.130
如果这样设的话

20:25.130 --> 20:26.130
那就这个就没意义了

20:26.130 --> 20:29.130
而是我怎么样通过外部

20:29.130 --> 20:31.130
来改变向

20:31.130 --> 20:33.130
Say hello的传直

20:33.130 --> 20:35.130
那就是在这

20:35.130 --> 20:37.130
算的

20:37.130 --> 20:39.130
在这里改变这个传直

20:39.130 --> 20:41.130
那么每次

20:41.130 --> 20:43.130
Rating所拿到这个指的时候

20:43.130 --> 20:46.130
这个指就不是我们现在固定的了

20:46.130 --> 20:48.130
不在内部改变

20:48.130 --> 20:50.130
在外部给它传的时候改变

20:50.130 --> 20:52.130
就像我们刚才说的这个一样

20:52.130 --> 20:54.130
我这里边不能变的话

20:54.130 --> 20:55.130
不能影响外面

20:55.130 --> 20:56.130
但是我可以在上面

20:56.130 --> 20:58.130
不断地进行变化

20:58.130 --> 21:00.130
这个是我们这边

21:00.130 --> 21:01.130
所设计到的一个

21:01.130 --> 21:03.130
所以强调一下

21:03.130 --> 21:05.130
有同学以前问你

21:05.130 --> 21:06.130
特别是我也看到过

21:06.130 --> 21:08.130
说是这样

21:08.130 --> 21:11.130
改变了Propriety的值

21:11.130 --> 21:12.130
在它的那个

21:12.130 --> 21:14.130
指读性的这样的一个观点

21:14.130 --> 21:15.130
其实不是

21:15.130 --> 21:16.130
指读性的观点的话

21:16.130 --> 21:19.130
它不是这样去定义的

21:19.130 --> 21:20.130
我们把刚才

21:20.130 --> 21:22.130
把它给讲了一下

21:22.130 --> 21:24.130
再来讲一个点

21:24.130 --> 21:26.130
既然设计到组件

21:26.130 --> 21:28.130
特别设计到就是Propriety Type

21:28.130 --> 21:30.130
这个在React里面

21:30.130 --> 21:31.130
是经常用到的

21:31.130 --> 21:34.130
就是我们称之为叫类型检查

21:34.130 --> 21:36.130
Propriety Type

21:36.130 --> 21:37.130
这个字我们来看一下

21:37.130 --> 21:39.130
我先把这边写一下

21:51.150 --> 21:52.150
类型检查

21:52.150 --> 21:53.150
它是指的是

21:53.150 --> 21:55.150
我们在给Propriety

21:55.150 --> 21:57.150
的传递参数的时候

21:57.150 --> 22:00.150
我们可以进行对它的一些

22:00.150 --> 22:03.150
格式的验证

22:03.150 --> 22:05.150
如果格式不正确

22:05.150 --> 22:08.150
那么它可以会给出警告

22:08.150 --> 22:10.150
会有这样的东西

22:10.150 --> 22:12.150
但是说一下

22:12.150 --> 22:14.150
这个写法上在微信里面

22:14.150 --> 22:16.150
是ok能够写的

22:16.150 --> 22:18.150
但是它本身

22:18.150 --> 22:21.150
微信还没有对它起到一定的作用

22:21.150 --> 22:23.150
所以我们看一下官网

22:23.150 --> 22:24.150
官网很有意思

22:24.150 --> 22:27.520
Taro和React一样也支持

22:27.520 --> 22:29.520
我们的Propriety Type

22:29.520 --> 22:31.520
目前小程序还存在一些问题

22:31.520 --> 22:33.520
但H5可以使用

22:33.520 --> 22:35.520
所以既然我们讲Taro的方式

22:35.520 --> 22:37.520
我们把这个东西再讲一下

22:37.520 --> 22:39.520
我们给它讲一下

22:39.520 --> 22:40.520
但是不一定

22:40.520 --> 22:42.520
或者说就是不能在微信里面

22:42.520 --> 22:43.520
没效果

22:43.520 --> 22:45.520
我们来看一下怎么用法

22:45.520 --> 22:46.520
它是这样的

22:46.520 --> 22:48.520
首先你在组建里面

22:48.520 --> 22:55.100
做一个引用

22:55.100 --> 22:57.100
Impart

22:57.100 --> 22:59.100
我们写上Propriety

22:59.100 --> 23:01.100
这是我们自己起的名称

23:01.100 --> 23:03.100
它主要来自于

23:03.100 --> 23:05.100
Propriety

23:05.100 --> 23:07.100
你看它的提示已经给到你了

23:07.100 --> 23:12.200
对吧

23:12.200 --> 23:13.200
Propriety

23:13.200 --> 23:15.200
然后我们拿着这个Propriety

23:15.200 --> 23:17.200
我们就可以在下面

23:17.200 --> 23:19.200
进行我们的设定

23:19.200 --> 23:21.200
注意设定位置

23:21.200 --> 23:24.200
是在你当前这个类的外面

23:24.200 --> 23:25.200
第一步

23:25.200 --> 23:27.200
你需要去拿到当前的

23:27.200 --> 23:30.200
这个类名

23:30.200 --> 23:34.200
然后对它执行Propriety

23:34.200 --> 23:36.200
最后这个

23:36.200 --> 23:40.200
名称和它是保持一致

23:40.200 --> 23:42.200
名称把它一致

23:42.200 --> 23:44.200
然后等于

23:44.200 --> 23:47.200
我们把我们的整个的格式

23:47.200 --> 23:49.200
我们都可以往里放

23:49.200 --> 23:52.200
我们把我们的格式都可以往里放

23:52.200 --> 23:53.200
比如

23:53.200 --> 23:56.200
我们现在要外部传入的

23:56.200 --> 23:57.200
这样的一个

23:57.200 --> 23:58.200
Say Hello

23:58.200 --> 24:00.200
我们要求它是一个

24:00.200 --> 24:01.200
看 Say Hello

24:01.200 --> 24:02.200
冒号

24:02.200 --> 24:05.200
我们要求它是

24:05.200 --> 24:07.200
Propers

24:07.200 --> 24:08.200
点

24:08.200 --> 24:09.200
它一个什么样的格式

24:09.200 --> 24:12.200
比如说我要求它是Stream

24:12.200 --> 24:15.200
我要求它是自不算格式

24:15.200 --> 24:17.200
你可以这样去设定

24:17.200 --> 24:19.200
那么一旦我传入进来

24:19.200 --> 24:20.200
你看我保存

24:20.200 --> 24:21.200
它是没有

24:21.200 --> 24:22.200
所谓的问题的

24:22.200 --> 24:24.200
这个横线你就先不用管

24:24.200 --> 24:25.200
然后我们打开

24:25.200 --> 24:26.200
你看

24:26.200 --> 24:27.200
在它运行期间

24:27.200 --> 24:28.200
它也没有保存

24:28.200 --> 24:29.200
再刷一下

24:29.200 --> 24:34.280
我现在是自不算格式

24:34.280 --> 24:35.280
我的Hello

24:35.280 --> 24:39.280
那么如果你现在改格式

24:39.280 --> 24:42.280
比如说我传一个123

24:42.280 --> 24:46.750
或者传个布尔治

24:46.750 --> 24:48.750
我们传一个布尔治

24:52.340 --> 24:53.340
你可以看到

24:53.340 --> 24:54.340
它没有任何

24:54.340 --> 24:56.340
所给你的警告

24:56.340 --> 24:58.340
我要的是自不算格式

24:58.340 --> 24:59.340
这个的话

24:59.340 --> 25:00.340
就是微信里面

25:00.340 --> 25:01.340
对它的一个

25:01.340 --> 25:03.340
识别度的问题

25:03.340 --> 25:05.340
它就把它理解成忽略了

25:05.340 --> 25:07.340
包括是刚才前面

25:07.340 --> 25:09.340
我们讲到的什么DIV的

25:09.340 --> 25:10.340
这种标签

25:10.340 --> 25:12.340
在它里面也是一种忽略结构

25:12.340 --> 25:13.340
它不会爆

25:13.340 --> 25:14.340
那么我们改一下

25:14.340 --> 25:15.340
比如说

25:15.340 --> 25:24.450
我现在传的就是自不算

25:24.450 --> 25:26.450
我传的就是自不算

25:26.450 --> 25:27.450
我这边还能改什么呢

25:27.450 --> 25:29.450
那么说一下

25:29.450 --> 25:30.450
这边的话

25:30.450 --> 25:32.450
我们除了这样的

25:32.450 --> 25:33.450
四群以外

25:33.450 --> 25:35.450
我们其实还有好多

25:35.450 --> 25:36.450
比如说

25:36.450 --> 25:37.450
我们可以写Ary

25:37.450 --> 25:39.450
速足

25:39.450 --> 25:42.450
我们可以写的是Number

25:42.450 --> 25:43.450
数字

25:43.450 --> 25:45.450
我们可以写的是Objector

25:45.450 --> 25:47.450
对象

25:47.450 --> 25:49.450
我们可以写的是

25:49.450 --> 25:52.450
我们可以写的是Sample

25:52.450 --> 25:59.900
我们可以写的是Sample

25:59.900 --> 26:00.900
这样的一个

26:00.900 --> 26:04.660
所以我们讲法是

26:04.660 --> 26:05.660
这个内容的话

26:05.660 --> 26:07.660
还是属于比较

26:07.660 --> 26:08.660
宽泛的

26:08.660 --> 26:09.660
你可以各种对象

26:09.660 --> 26:11.660
甚至我们还可以

26:11.660 --> 26:13.660
给它设定一些元素的设定

26:13.660 --> 26:14.660
这个的话

26:14.660 --> 26:15.660
我在这不扩充了

26:15.660 --> 26:17.660
但是我们还能做的是

26:17.660 --> 26:19.660
是否必需要的

26:19.660 --> 26:20.660
你看我现在

26:20.660 --> 26:21.660
我做个Stream

26:21.660 --> 26:23.660
必要操作

26:23.660 --> 26:24.660
那么我们就可以在后面

26:24.660 --> 26:26.660
我们去指定它

26:26.660 --> 26:28.660
这个是不是一定需要

26:28.660 --> 26:32.100
比如说我们举例

26:32.100 --> 26:34.100
我们可以设定

26:34.100 --> 26:36.100
is required

26:36.100 --> 26:38.100
你必须要

26:38.100 --> 26:40.100
如果它没有提供的话

26:40.100 --> 26:42.100
那么它就会给出警告

26:42.100 --> 26:44.100
任何的设定后面

26:44.100 --> 26:47.100
我们都可以给出一个is required

26:47.100 --> 26:49.100
这样的格式就质疑

26:49.100 --> 26:51.100
我们也可以

26:51.100 --> 26:53.100
如果你现在有十七八个

26:53.100 --> 26:54.100
你每一个都指定

26:54.100 --> 26:56.100
我们就可以这样写

26:56.100 --> 26:57.100
any

26:57.100 --> 27:00.100
我们可以写上一个any

27:00.100 --> 27:01.100
我们把前面这个改掉

27:01.100 --> 27:02.100
我们可以

27:02.100 --> 27:15.140
我们可以改成

27:15.140 --> 27:16.140
我们可以改成这样

27:16.140 --> 27:17.140
我们说

27:17.140 --> 27:20.140
任何格式都可以带上

27:20.140 --> 27:21.140
OK

27:21.140 --> 27:22.140
那么总之

27:22.140 --> 27:23.140
这个语法

27:23.140 --> 27:24.140
我们应该讲

27:24.140 --> 27:25.140
如果学过rec同学

27:25.140 --> 27:27.140
应该都有印象

27:27.140 --> 27:28.140
prepared types

27:28.140 --> 27:31.140
对于现在的一个前端程序

27:31.140 --> 27:33.140
在输 与否 属性结构

27:33.140 --> 27:35.140
上面的一个验证

27:35.140 --> 27:37.140
要与不要的一个判断

27:37.140 --> 27:39.140
但是我们这边只能说是

27:39.140 --> 27:41.140
提供给大家的一个说法

27:41.140 --> 27:43.140
因为微信小程序只能说

27:43.140 --> 27:45.140
暂时不支持

27:46.140 --> 27:47.140
OK吧

27:47.140 --> 27:48.140
我们可以把它放着

27:48.140 --> 27:49.140
但微信小程序本身来讲

27:49.140 --> 27:51.140
它不会有任何给你的效果

27:51.140 --> 27:54.140
有与没有 它其实都一样

27:54.140 --> 27:57.140
这个是特别注意reactor

27:57.140 --> 27:58.140
在那个tallow中

27:58.140 --> 27:59.140
运用微信小程序上的

27:59.140 --> 28:01.140
又是一个点

28:01.140 --> 28:03.140
那么本身来讲

28:03.140 --> 28:04.140
作为属性的使用

28:04.140 --> 28:06.140
应该还是相对而言

28:06.140 --> 28:07.140
没有特别化

28:07.140 --> 28:08.140
比如说

28:08.140 --> 28:10.140
有什么特别的难度

28:10.140 --> 28:12.140
只要你之前有组建的概念

28:12.140 --> 28:13.140
只要你接触过reactor

28:13.140 --> 28:15.140
那么这部分内容对你来讲

28:15.140 --> 28:17.140
都应该是一个比较

28:17.140 --> 28:18.140
价金就熟的

28:18.140 --> 28:19.140
只是我们

28:19.140 --> 28:20.140
如果忘记同学

28:20.140 --> 28:21.140
听了我这堂课

28:21.140 --> 28:22.140
应该更有信心

28:22.140 --> 28:23.140
如果说

28:23.140 --> 28:25.140
有一些不一样的点

28:25.140 --> 28:26.140
我们在课堂中

28:26.140 --> 28:27.140
也给大家去讲解

28:27.140 --> 28:28.140
那么在后面的话

28:28.140 --> 28:29.140
组建里面

28:29.140 --> 28:30.140
还有一些

28:30.140 --> 28:31.140
其他的一些东西

28:31.140 --> 28:32.140
包括是

28:32.140 --> 28:34.140
还有一些渲染操作的内容

28:34.140 --> 28:35.140
我们都会在后期

28:35.140 --> 28:36.140
给大家慢慢来讲解

28:36.140 --> 28:37.140
这堂课

