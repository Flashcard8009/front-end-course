WEBVTT

00:00.620 --> 00:03.620
OK 那咱们这一刻来讨论一下

00:03.620 --> 00:06.620
Waypack里边的模块块件容讯

00:06.620 --> 00:08.620
这什么意思呢

00:08.620 --> 00:10.620
大家可以想象得到啊

00:10.620 --> 00:12.620
像这个Waypack啊

00:12.620 --> 00:14.620
它同时支持

00:14.620 --> 00:16.620
common.js模块块标准

00:16.620 --> 00:18.620
和ES6模块块标准

00:18.620 --> 00:22.620
也就是说我们无论是用common.js写的代码

00:22.620 --> 00:25.620
或者说用ES6写的代码呢

00:25.620 --> 00:27.620
它都能够识别它们的一代

00:27.620 --> 00:29.620
并且的进行打包

00:30.620 --> 00:31.620
那么这个时候呢

00:31.620 --> 00:32.620
就会出现一个问题啊

00:32.620 --> 00:34.620
就是说如果说一个模块啊

00:34.620 --> 00:36.620
咱们是用ES6导出的

00:36.620 --> 00:39.620
但是呢用common.js导入的

00:39.620 --> 00:41.620
或者说用common.js导出的

00:41.620 --> 00:43.620
用ES6导入的

00:43.620 --> 00:44.620
那它会怎么来处理呢

00:44.620 --> 00:46.620
它导出的到底是什么玩意呢

00:46.620 --> 00:47.620
它导入的到底是什么玩意呢

00:47.620 --> 00:48.620
对吧

00:48.620 --> 00:49.620
那么这个时候呢

00:49.620 --> 00:50.620
我们就需要它理解

00:50.620 --> 00:51.620
这不同的模块

00:51.620 --> 00:52.620
画标准里边

00:52.620 --> 00:54.620
它们互相操作的时候呢

00:54.620 --> 00:55.620
Waypack是如何处理的

00:55.620 --> 00:57.620
这个是蛮重要的

00:57.620 --> 00:58.620
好 首先呢

00:58.620 --> 00:59.620
我们来说一下

00:59.620 --> 01:01.620
对同模块画的标准

01:01.620 --> 01:02.620
如果说两个是同模块画的

01:02.620 --> 01:04.620
就是我们用common.js导出

01:04.620 --> 01:05.620
同时呢

01:05.620 --> 01:06.620
用common.js导入

01:06.620 --> 01:08.620
或者说我们用ES6导出

01:08.620 --> 01:10.620
用ES6的方式来导入

01:10.620 --> 01:12.620
那么这种情况下呢

01:12.620 --> 01:13.620
Waypack是怎么来处理的

01:13.620 --> 01:14.620
那么这种情况下

01:14.620 --> 01:16.620
跟我们之前学习的模块画

01:16.620 --> 01:17.620
没有任何差异

01:17.620 --> 01:18.620
看一下图就行了

01:18.620 --> 01:20.620
这个东西没有什么好说的

01:20.620 --> 01:21.620
比方说我们一个代码

01:21.620 --> 01:22.620
一个JS

01:22.620 --> 01:23.620
一个模块

01:23.620 --> 01:25.620
它是用common.js导出的

01:25.620 --> 01:26.620
就这样导出的

01:26.620 --> 01:27.620
对吧

01:27.620 --> 01:28.620
就说不对啊

01:28.620 --> 01:30.620
common.js还不是还有另外一种方式吗

01:30.620 --> 01:31.620
如果

01:31.620 --> 01:33.620
还有这种方式来导出

01:33.620 --> 01:34.620
对吧

01:34.620 --> 01:36.620
如果说你听了我的课

01:36.620 --> 01:38.620
我的模块画课程的话

01:38.620 --> 01:39.620
那么你会应该知道

01:39.620 --> 01:40.620
这个东西呢

01:40.620 --> 01:43.620
本质上跟margeau.export是一样的

01:43.620 --> 01:45.620
它最终的还是

01:45.620 --> 01:46.620
最终的还是会转换成

01:46.620 --> 01:48.620
margeau.export来导出

01:48.620 --> 01:49.620
是一样的

01:49.620 --> 01:50.620
这个东西没什么好说的

01:50.620 --> 01:51.620
那么common.js呢

01:51.620 --> 01:54.620
只有最终它导出的是margeau.export

01:54.620 --> 01:56.620
好 那么比方说导出一个对象

01:57.620 --> 01:58.620
那导入呢

01:58.620 --> 01:59.620
用common.js导入

01:59.620 --> 02:00.620
那就毫无疑问

02:00.620 --> 02:02.620
它就把导出的东西导出就完事了

02:02.620 --> 02:03.620
这个东西毫无疑问

02:03.620 --> 02:05.620
说这个东西没什么好说的

02:05.620 --> 02:06.620
另外

02:06.620 --> 02:09.620
如果说你用ES6的模块画导出

02:09.620 --> 02:12.620
又用ES6的模块画导入

02:12.620 --> 02:14.620
也跟之前我们学习的

02:14.620 --> 02:16.620
模块画标准是一样的

02:16.620 --> 02:17.620
比方说在这里看

02:17.620 --> 02:18.620
我们这里有一个模块

02:18.620 --> 02:20.620
它用ES6的方式导出

02:20.620 --> 02:21.620
导出的

02:21.620 --> 02:22.620
用普通导出

02:22.620 --> 02:24.620
就基本导出了两个AB

02:24.620 --> 02:25.620
导出了一个3

02:25.620 --> 02:26.620
无所谓吧

02:26.620 --> 02:28.620
那么它导出的是什么东西

02:28.620 --> 02:29.620
导出不就是这个对象吗

02:29.620 --> 02:32.620
对象里面一个AB等于2

02:32.620 --> 02:33.620
然后呢

02:33.620 --> 02:34.620
模认导出是放到default里面的

02:34.620 --> 02:36.620
就导出这么一个对象

02:36.620 --> 02:39.620
那么用ES6的方式导入的话

02:39.620 --> 02:40.620
那就一样的

02:40.620 --> 02:41.620
如果说你全部导入

02:41.620 --> 02:42.620
用新号

02:42.620 --> 02:43.620
一个别名

02:43.620 --> 02:44.620
全部导入

02:44.620 --> 02:45.620
得到的结果是什么呢

02:45.620 --> 02:46.620
得到的结果就是这个对象

02:46.620 --> 02:48.620
如果说你只导入模认只

02:48.620 --> 02:50.620
就导入的是对象里面的default

02:50.620 --> 02:52.620
导出的就是3

02:52.620 --> 02:53.620
这个东西是一样的

02:53.620 --> 02:55.620
跟之前没有任何区别

02:55.620 --> 02:57.620
关键在于

02:57.620 --> 02:59.620
不同的模块化标准

02:59.620 --> 03:01.620
那么它是怎么处理的

03:01.620 --> 03:03.620
这里我们一个个说

03:03.620 --> 03:04.620
这里只有两种情况

03:04.620 --> 03:06.620
依旧就是ES6的导出

03:06.620 --> 03:07.620
但是呢

03:07.620 --> 03:09.620
我们使用common.js导入

03:09.620 --> 03:10.620
那么会怎么样

03:10.620 --> 03:11.620
再看

03:11.620 --> 03:13.620
如果说你用ES6的方式导出

03:13.620 --> 03:15.620
比方说这里举个例子

03:15.620 --> 03:16.620
有些基本导出

03:16.620 --> 03:17.620
有一个默认导出

03:17.620 --> 03:19.620
那么它是不是会形成一个对象

03:19.620 --> 03:20.620
对吧

03:20.620 --> 03:21.620
对象的属性AB

03:21.620 --> 03:22.620
还有一个default属性

03:22.620 --> 03:24.620
那么如果说你用common.js

03:24.620 --> 03:25.620
导入的话

03:25.620 --> 03:27.620
就变成这个样子

03:27.620 --> 03:28.620
就变成这个样子

03:28.620 --> 03:29.620
就相当于是什么了

03:29.620 --> 03:30.620
相当于写了这个代码

03:30.620 --> 03:32.620
是不是相当于写了这个代码

03:32.620 --> 03:34.620
就变成这个样子

03:34.620 --> 03:35.620
咱们来看一下

03:35.620 --> 03:36.620
看一下体验一下

03:36.620 --> 03:38.620
这里的工程我已经打好了

03:38.620 --> 03:39.620
做了一些基本的配置

03:39.620 --> 03:41.620
比方说这里的脚本

03:41.620 --> 03:42.620
default

03:42.620 --> 03:43.620
做了一些基本的配置

03:43.620 --> 03:44.620
接下来我们建了一个文念甲

03:44.620 --> 03:45.620
src

03:45.620 --> 03:47.620
这里我们写一个

03:47.620 --> 03:49.620
什么导出的

03:49.620 --> 03:50.620
用ES6导出的

03:50.620 --> 03:51.620
ES6

03:51.620 --> 03:52.620
ES6

03:52.620 --> 03:53.620
ES6

03:53.620 --> 03:54.620
ES6

03:54.620 --> 03:55.620
那么这里我们

03:55.620 --> 03:56.620
export

03:56.620 --> 03:57.620
export

03:57.620 --> 03:58.620
export

03:58.620 --> 03:59.620
Va

03:59.620 --> 04:00.620
A等于

04:00.620 --> 04:01.620
是不是ES6的模块画标准

04:01.620 --> 04:02.620
这样子

04:02.620 --> 04:03.620
这样子写

04:04.620 --> 04:05.620
然后

04:05.620 --> 04:06.620
export

04:06.620 --> 04:07.620
default

04:08.620 --> 04:09.620
default

04:09.620 --> 04:10.620
我们就直接导入一个3

04:10.620 --> 04:11.620
OK

04:11.620 --> 04:13.620
那么这是ES6的模块画导出

04:13.620 --> 04:14.620
好

04:14.620 --> 04:15.620
那么接下来

04:15.620 --> 04:16.620
我们在index里边

04:16.620 --> 04:17.620
使用导入

04:17.620 --> 04:18.620
我们用common.js的方式

04:18.620 --> 04:19.620
来导入

04:19.620 --> 04:20.620
require

04:20.620 --> 04:21.620
你看一下得到的结果是

04:22.620 --> 04:23.620
导入什么

04:23.620 --> 04:24.620
对吧

04:24.620 --> 04:25.620
导入

04:25.620 --> 04:26.620
然后

04:26.620 --> 04:27.620
得到一个

04:27.620 --> 04:28.620
得到一个结果

04:28.620 --> 04:29.620
输出这个结果

04:29.620 --> 04:30.620
好

04:30.620 --> 04:31.620
那么现在我们

04:31.620 --> 04:32.620
干吗

04:32.620 --> 04:33.620
接下来干吗

04:33.620 --> 04:34.620
能不能直接运行这个

04:34.620 --> 04:35.620
肯定不能

04:35.620 --> 04:36.620
怎么运行的这个玩意

04:36.620 --> 04:37.620
哪有这种

04:37.620 --> 04:38.620
无论Snow的环境

04:38.620 --> 04:40.620
还是浏览器环境

04:40.620 --> 04:41.620
都无法支持

04:41.620 --> 04:42.620
这种不同的模块画

04:42.620 --> 04:43.620
对吧

04:43.620 --> 04:44.620
所以说你这里

04:44.620 --> 04:45.620
肯定不能这样子直接运行

04:45.620 --> 04:46.620
需要什么

04:46.620 --> 04:47.620
需要Webpack打包

04:47.620 --> 04:48.620
对不对

04:48.620 --> 04:49.620
Webpack来构建

04:49.620 --> 04:50.620
叫做編譯

04:50.620 --> 04:51.620
好来吧

04:51.620 --> 04:52.620
我们到这个文件

04:52.620 --> 04:53.620
讲里边去

04:53.620 --> 04:54.620
右键

04:54.620 --> 04:58.450
github

04:58.450 --> 04:59.450
OK放大一点

05:00.450 --> 05:01.450
接下来我们使用

05:01.450 --> 05:03.450
npm

05:03.450 --> 05:05.450
npm run

05:05.450 --> 05:06.450
dem

05:06.450 --> 05:07.450
来打包

05:09.450 --> 05:10.450
OK

05:10.450 --> 05:11.450
爆错了

05:11.450 --> 05:12.450
他说什么

05:13.450 --> 05:14.450
他说

05:14.450 --> 05:15.450
我们看一下

05:15.450 --> 05:16.450
看一下错误

05:16.450 --> 05:17.450
以后我们用Webpack的时候

05:17.450 --> 05:18.450
经常会发现一些错误

05:18.450 --> 05:19.450
看一下这个错误

05:20.450 --> 05:21.450
他说

05:23.450 --> 05:26.450
模块是无法被加载

05:26.450 --> 05:28.450
无法被加载这个模块

05:29.450 --> 05:31.450
con-resolve-a

05:31.450 --> 05:32.450
这个a不存在对吧

05:32.450 --> 05:33.450
a不存在这个模块

05:34.450 --> 05:35.450
这是es6a

05:35.450 --> 05:36.450
后边的后绝名

05:36.450 --> 05:37.450
是可以不用写的

05:37.450 --> 05:39.450
Webpack会进行处理

05:39.450 --> 05:41.760
OK

05:42.760 --> 05:43.760
打包

05:43.760 --> 05:44.760
打包完成

05:44.760 --> 05:45.760
我们看一下

05:45.760 --> 05:46.760
在电视里边

05:46.760 --> 05:47.760
是不是多了一个GS

05:47.760 --> 05:48.760
这个GS

05:48.760 --> 05:49.760
咱们运行一下这个GS

05:49.760 --> 05:50.760
看一下就明白了

05:50.760 --> 05:51.760
因为打包完成后

05:51.760 --> 05:52.760
就不存在什么模块

05:52.760 --> 05:53.760
不模块

05:53.760 --> 05:55.760
就是一个普通的GS代码

05:55.760 --> 05:57.760
那么我们直接运行

05:57.760 --> 05:58.760
现在也不用去看代码

05:58.760 --> 05:59.760
也不用去看

05:59.760 --> 06:00.760
直接运行

06:00.760 --> 06:01.760
装扣的

06:01.760 --> 06:02.760
你看一下

06:03.760 --> 06:04.760
得到了是不是个对象

06:04.760 --> 06:06.760
就是我们这里的代码

06:06.760 --> 06:08.760
运行的是index的GS

06:08.760 --> 06:10.760
这是我们入口文件

06:10.760 --> 06:11.760
运行的是他

06:11.760 --> 06:13.760
运行的代码结果是什么

06:13.760 --> 06:14.760
结果得到的结果就是

06:14.760 --> 06:15.760
一个对象

06:15.760 --> 06:16.760
对象里面一个a

06:16.760 --> 06:17.760
一个b

06:17.760 --> 06:18.760
一个default3

06:18.760 --> 06:19.760
那么a和b是什么

06:19.760 --> 06:20.760
是两getter

06:20.760 --> 06:21.760
getter就是相当于是

06:21.760 --> 06:23.760
他给这个属性的定义了

06:23.760 --> 06:24.760
一个就是

06:24.760 --> 06:25.760
方法

06:25.760 --> 06:27.760
相当于是定义了一个方法

06:27.760 --> 06:28.760
能不能得到a呢

06:28.760 --> 06:29.760
我们来输出一下

06:29.760 --> 06:30.760
比如说输出a

06:30.760 --> 06:31.760
obj

06:31.760 --> 06:32.760
输出b

06:32.760 --> 06:33.760
obj

06:33.760 --> 06:34.760
输出default

06:34.760 --> 06:35.760
咱们来看一下

06:35.760 --> 06:40.540
再重新打包一次

06:40.540 --> 06:41.540
我们运行

06:41.540 --> 06:42.540
注意运行一定是运行

06:42.540 --> 06:43.540
打包后的结果

06:43.540 --> 06:45.540
这里我们再运行

06:45.540 --> 06:47.540
你看是不是输出123

06:47.540 --> 06:48.540
对吧

06:48.540 --> 06:49.540
这没问题吧

06:49.540 --> 06:50.540
对吧

06:50.540 --> 06:51.540
ok

06:51.540 --> 06:52.540
那么这就是

06:52.540 --> 06:53.540
这种情况

06:53.540 --> 06:54.540
用es6导出

06:54.540 --> 06:55.540
common.js导入

06:55.540 --> 06:57.540
那么就会形成这种现象

06:57.540 --> 06:59.540
因为他直接把es6的方式

06:59.540 --> 07:00.540
因为es6无论怎么导出

07:00.540 --> 07:01.540
最终会形成一个对象

07:01.540 --> 07:02.540
对吧

07:02.540 --> 07:03.540
那么common.js导入的时候

07:03.540 --> 07:04.540
就只把整个对象

07:04.540 --> 07:05.540
直接导入了

07:05.540 --> 07:06.540
ok

07:09.540 --> 07:11.540
然后我们来看一下

07:11.540 --> 07:12.540
common.js

07:12.540 --> 07:14.540
如果说你用common.js导出

07:14.540 --> 07:16.540
用es6导入

07:16.540 --> 07:17.540
他会怎么样

07:17.540 --> 07:18.540
他这样子

07:18.540 --> 07:19.540
common.js导出

07:19.540 --> 07:21.540
common.js导入

07:21.540 --> 07:22.540
common.js导出的

07:22.540 --> 07:23.540
对吧

07:23.540 --> 07:24.540
他是用这种方式导出的

07:24.540 --> 07:26.540
那么他导出的东西

07:26.540 --> 07:28.540
你用es6怎么导入

07:28.540 --> 07:30.540
你可以用两种方式

07:30.540 --> 07:31.540
一地种方式

07:31.540 --> 07:32.540
就是全部导入

07:32.540 --> 07:33.540
全部导入就是把

07:33.540 --> 07:35.540
common.js导入

07:35.540 --> 07:36.540
common.js导入的东西

07:36.540 --> 07:37.540
直接导入进来

07:37.540 --> 07:38.540
另一种方式

07:38.540 --> 07:39.540
是导入默认值

07:39.540 --> 07:40.540
导入默认值

07:40.540 --> 07:41.540
就是import

07:41.540 --> 07:42.540
这种就是导入默认的方式

07:42.540 --> 07:43.540
默认导入

07:43.540 --> 07:45.540
导入默认的东西

07:45.540 --> 07:46.540
那么这两种方式

07:46.540 --> 07:48.540
效果是完全一样的

07:48.540 --> 07:51.540
结果都是他导出的东西

07:51.540 --> 07:53.540
得到的结果都是他导出的东西

07:53.540 --> 07:54.540
所以说如果说

07:54.540 --> 07:55.540
咱们来举个例子

07:55.540 --> 07:57.540
比方说我们es

07:57.540 --> 07:58.540
这个里边有一个

07:58.540 --> 08:01.540
common.js

08:01.540 --> 08:03.540
那么他这里用common.js的

08:03.540 --> 08:06.540
common.js的方式来导出

08:06.540 --> 08:08.540
等于b等于2

08:08.540 --> 08:10.540
c等于3

08:10.540 --> 08:15.540
然后呢

08:15.540 --> 08:17.540
然后我们在index里面

08:17.540 --> 08:18.540
把这个注射掉

08:18.540 --> 08:21.540
我们使用es6的方式来导入

08:21.540 --> 08:23.540
信号而是obj

08:23.540 --> 08:24.540
from

08:24.540 --> 08:25.540
第二

08:25.540 --> 08:26.540
什么common.js

08:26.540 --> 08:28.540
输出这个obj

08:28.540 --> 08:31.540
大家看一下

08:31.540 --> 08:32.540
清除一下

08:32.540 --> 08:36.560
然后重新打包

08:36.560 --> 08:37.560
打包完成

08:37.560 --> 08:38.560
然后呢

08:38.560 --> 08:39.560
到这边

08:39.560 --> 08:41.560
电视目录下面运行

08:41.560 --> 08:42.560
你看

08:42.560 --> 08:43.560
是不是a等于e

08:43.560 --> 08:44.560
b等于2

08:44.560 --> 08:45.560
c等于3

08:45.560 --> 08:46.560
他直接就把

08:46.560 --> 08:47.560
这种写法

08:47.560 --> 08:48.560
用es6这种写法

08:48.560 --> 08:49.560
他直接就把common.js

08:49.560 --> 08:50.560
导出的结果

08:50.560 --> 08:52.560
直接放到这个obj里面去了

08:52.560 --> 08:53.560
当然了

08:53.560 --> 08:54.560
如果说你要去导入

08:54.560 --> 08:55.560
他里边的东西

08:55.560 --> 08:56.560
比如说你要导入

08:56.560 --> 08:57.560
把a导入b导入

08:57.560 --> 08:58.560
是一样的

08:58.560 --> 08:59.560
无非就导入

08:59.560 --> 09:00.560
对象里边的东西

09:00.560 --> 09:01.560
对吧

09:01.560 --> 09:02.560
你甚至可以把它理解成解构

09:02.560 --> 09:04.560
尽管它不是解构预防

09:04.560 --> 09:05.560
但是你可以这样理解

09:05.560 --> 09:06.560
同样的道理

09:06.560 --> 09:07.560
你可以也可以使用

09:07.560 --> 09:08.560
这种方式

09:08.560 --> 09:11.560
也是完全一样的

09:11.560 --> 09:13.560
也是完全一样的

09:13.560 --> 09:14.560
虽然说我们

09:14.560 --> 09:15.560
如果说

09:15.560 --> 09:16.560
两边都是es6的

09:16.560 --> 09:17.560
模块化的话

09:17.560 --> 09:18.560
这两种肯定是有区别的

09:18.560 --> 09:19.560
对吧

09:19.560 --> 09:20.560
但是如果说

09:20.560 --> 09:21.560
那边是用common.js导出的

09:21.560 --> 09:22.560
那么这两个是一样的

09:22.560 --> 09:23.560
好

09:23.560 --> 09:24.560
比方说我们现在

09:24.560 --> 09:27.560
再来打包

09:27.560 --> 09:28.560
打包完成

09:28.560 --> 09:29.560
打包完成

09:29.560 --> 09:30.560
我们这里运行一下

09:30.560 --> 09:31.560
你看是不是一样的

09:31.560 --> 09:33.560
完全一样的

09:33.560 --> 09:34.560
所以说

09:34.560 --> 09:35.560
这就告诉我们

09:35.560 --> 09:36.560
在vpec里边

09:36.560 --> 09:38.560
实际上不同的模块化

09:38.560 --> 09:40.560
它仍然可以交互的

09:40.560 --> 09:43.560
像我们之前

09:43.560 --> 09:44.560
像我们之前

09:44.560 --> 09:46.560
那个就是

09:47.560 --> 09:49.560
安装一下解构预

09:49.560 --> 09:54.130
npm i解构预

09:54.130 --> 09:57.140
你看吧

09:57.140 --> 09:59.140
解构预

09:59.140 --> 10:00.140
稍等一下

10:00.140 --> 10:01.140
我也不知道为什么

10:01.140 --> 10:02.140
怎么办

10:02.140 --> 10:04.140
安装好了

10:04.140 --> 10:05.140
安装好了

10:05.140 --> 10:06.140
解构预过后

10:06.140 --> 10:07.140
比方说

10:07.140 --> 10:08.140
我们在index里边

10:08.140 --> 10:09.140
去导入解构预

10:09.140 --> 10:10.140
解构预那边

10:10.140 --> 10:11.140
是怎么导出的

10:11.140 --> 10:12.140
解构预那边

10:12.140 --> 10:13.140
它是这样导出的

10:13.140 --> 10:15.140
margeau.export

10:15.140 --> 10:16.140
它是用common.js导出的

10:16.140 --> 10:17.140
它导出了一个函数

10:17.140 --> 10:18.140
这个函数

10:18.140 --> 10:19.140
我就不写了

10:19.140 --> 10:20.140
一些东西

10:20.140 --> 10:21.140
它导出了一个函数

10:21.140 --> 10:22.140
就是一个解构预

10:22.140 --> 10:23.140
多了的函数

10:23.140 --> 10:24.140
那么我们导入的时候

10:24.140 --> 10:25.140
可以怎么导入

10:25.140 --> 10:26.140
两种都可以

10:26.140 --> 10:27.140
可以使用什么require

10:27.140 --> 10:28.140
因为它是用

10:28.140 --> 10:29.140
margeau.export导出的

10:29.140 --> 10:30.140
所以我们直接可以

10:30.140 --> 10:32.140
用require解构预

10:34.140 --> 10:35.140
多了

10:35.140 --> 10:36.140
当然这个边量名字

10:36.140 --> 10:37.140
可以随便取

10:37.140 --> 10:38.140
只不过我们习惯上

10:38.140 --> 10:39.140
取这个多了

10:39.140 --> 10:40.140
输出这个多了

10:40.140 --> 10:41.140
你看吧

10:41.140 --> 10:42.140
好

10:42.140 --> 10:45.800
来打包

10:45.800 --> 10:46.800
打包

10:46.800 --> 10:47.800
打包完了过后

10:47.800 --> 10:48.800
我们来看一下

10:48.800 --> 10:49.800
运行

10:49.800 --> 10:50.800
runcode

10:50.800 --> 10:51.800
你看

10:51.800 --> 10:52.800
是不是得到一个方式

10:52.800 --> 10:53.800
对吧

10:53.800 --> 10:54.800
那么这就是个多了

10:54.800 --> 10:55.800
这就是个

10:56.800 --> 10:57.800
解构预的函数

10:57.800 --> 11:00.800
也可以使用es6的方式

11:00.800 --> 11:01.800
inport

11:01.800 --> 11:02.800
因为它们那边

11:02.800 --> 11:03.800
是用common.js导出的

11:03.800 --> 11:04.800
那么我们这里

11:04.800 --> 11:05.800
是不是可以用

11:05.800 --> 11:06.800
默认值

11:06.800 --> 11:07.800
对不对

11:07.800 --> 11:08.800
是不是可以用默认值

11:08.800 --> 11:09.800
输出

11:09.800 --> 11:10.800
多了

11:11.800 --> 11:17.630
然后再来

11:17.630 --> 11:18.630
好

11:18.630 --> 11:19.630
然后我们看一下

11:19.630 --> 11:20.630
运行

11:21.630 --> 11:22.630
是不是一样的

11:22.630 --> 11:23.630
对吧

11:23.630 --> 11:24.630
当然是一样的

11:24.630 --> 11:25.630
这种方式

11:25.630 --> 11:27.630
新号

11:27.630 --> 11:28.630
多了

11:28.630 --> 11:29.630
好

11:29.630 --> 11:33.990
然后再看

11:33.990 --> 11:34.990
好

11:34.990 --> 11:35.990
这边运行

11:35.990 --> 11:36.990
好

11:36.990 --> 11:37.990
你看

11:37.990 --> 11:38.990
是不是一样的

11:38.990 --> 11:39.990
对吧

11:39.990 --> 11:40.990
都可以

11:40.990 --> 11:41.990
当然这种写法

11:41.990 --> 11:42.990
可能少见一点

11:42.990 --> 11:43.990
我们一般用这种写法

11:43.990 --> 11:44.990
对吧

11:44.990 --> 11:45.990
也就是说

11:45.990 --> 11:46.990
我们在Webpack里边

11:46.990 --> 11:47.990
在开发阶段

11:47.990 --> 11:48.990
我们写的代码

11:48.990 --> 11:49.990
这些东西不用去管

11:49.990 --> 11:50.990
它都可以兼容的

11:50.990 --> 11:51.990
都可以兼容的

11:51.990 --> 11:52.990
你唯一要注意的

11:52.990 --> 11:53.990
一点是什么呢

11:53.990 --> 11:54.990
就是

11:54.990 --> 11:55.990
别人在

11:55.990 --> 11:56.990
如果说

11:56.990 --> 11:58.990
ES6的方式导出

11:59.990 --> 12:00.990
举个例子

12:00.990 --> 12:01.990
比方说

12:01.990 --> 12:02.990
用ES6的方式导出

12:02.990 --> 12:03.990
导出的是什么呢

12:03.990 --> 12:04.990
导出的是这个东西

12:04.990 --> 12:05.990
导出一个对象

12:05.990 --> 12:06.990
A等于B

12:06.990 --> 12:07.990
等于2

12:07.990 --> 12:08.990
C等于3

12:08.990 --> 12:09.990
比方说导出这么一个对象

12:09.990 --> 12:10.990
它导出的是Default

12:10.990 --> 12:11.990
对吧

12:11.990 --> 12:12.990
导出的是Default

12:13.990 --> 12:14.990
这是

12:14.990 --> 12:16.990
这是用ES6的方式

12:16.990 --> 12:18.990
用ES6的方式导出的

12:18.990 --> 12:19.990
那么你在用

12:19.990 --> 12:21.990
CommonJets导入的时候

12:21.990 --> 12:22.990
你稍微要注意一点

12:23.990 --> 12:25.990
用CommonJets导入

12:25.990 --> 12:26.990
什么ES6A

12:27.990 --> 12:28.990
那么这个时候

12:28.990 --> 12:29.990
你导入的是什么呢

12:29.990 --> 12:30.990
这个OB借

12:30.990 --> 12:32.990
我问大家一个问题

12:32.990 --> 12:33.990
这个OB借

12:33.990 --> 12:34.990
是不是这个玩意儿

12:37.820 --> 12:38.820
这个OB借

12:38.820 --> 12:39.820
是不是这里

12:39.820 --> 12:40.820
这个玩意儿

12:40.820 --> 12:41.820
你要注意这一点就行了

12:41.820 --> 12:42.820
你看那个图

12:42.820 --> 12:43.820
你自己看

12:45.820 --> 12:49.410
自己看

12:51.410 --> 12:52.410
是不是这个玩意儿

12:52.410 --> 12:53.410
肯定不是

12:53.410 --> 12:54.410
那如果你要得到

12:54.410 --> 12:55.410
这个玩意儿

12:55.410 --> 12:57.410
它用ES6的默认导出

12:57.410 --> 12:59.410
你要得到ES6的默认导出

12:59.410 --> 13:00.410
那你应该怎么办

13:00.410 --> 13:01.410
是不是应该得到

13:01.410 --> 13:03.410
OB借的Default

13:03.410 --> 13:04.410
对吧

13:04.410 --> 13:05.410
应该得到这个东西

13:05.410 --> 13:06.410
如果说你直接得到

13:06.410 --> 13:07.410
OB借的话

13:07.410 --> 13:08.410
你会得到什么呢

13:08.410 --> 13:09.410
我们看一下

13:10.410 --> 13:11.410
因为它是把基本导出

13:11.410 --> 13:13.410
和默认导出合在一起的

13:13.410 --> 13:14.410
咱们再看一下

13:14.410 --> 13:15.410
做一下这个问题就行了

13:15.410 --> 13:16.410
你看

13:16.410 --> 13:17.410
是不是它里面

13:17.410 --> 13:18.410
一个对象

13:18.410 --> 13:19.410
对象里面一个属性Default

13:19.410 --> 13:20.410
Default里面有这些东西

13:20.410 --> 13:21.410
所以说你这里

13:21.410 --> 13:23.410
要得到它的Default

13:23.410 --> 13:24.410
Default

13:24.410 --> 13:25.410
这种情况一般不会遇到

13:25.410 --> 13:26.410
一般不会遇到

13:27.410 --> 13:28.410
OK

13:28.410 --> 13:29.410
那么

13:29.410 --> 13:30.410
通过这一点

13:30.410 --> 13:31.410
给大家说明一下

13:31.410 --> 13:33.410
就是在WePack里边

13:33.410 --> 13:34.410
它支持两种方式

13:34.410 --> 13:35.410
而且两种方式

13:35.410 --> 13:36.410
可以互相

13:37.410 --> 13:38.410
互相就是兼容的

13:38.410 --> 13:40.410
都可以混合使用

13:41.410 --> 13:42.410
好 这最后

13:42.410 --> 13:43.410
我们说一下最佳时间

13:43.410 --> 13:44.410
就是我们平时写代

13:44.410 --> 13:45.410
真的要注意这些问题吗

13:45.410 --> 13:46.410
不会

13:46.410 --> 13:47.410
这就说

13:47.410 --> 13:48.410
我们这节课

13:48.410 --> 13:49.410
虽然说讲了这个东西

13:49.410 --> 13:50.410
这个东西要不要讲

13:50.410 --> 13:52.410
因为你说不准

13:52.410 --> 13:53.410
你用的第三方库

13:53.410 --> 13:55.410
是用什么导出的

13:55.410 --> 13:56.410
实际上

13:56.410 --> 13:57.410
它是这样子

13:57.410 --> 13:58.410
绝大部分

13:59.410 --> 14:01.410
绝大部分

14:01.410 --> 14:03.410
第三方库

14:03.410 --> 14:04.410
使用的是

14:05.410 --> 14:07.410
common.js的方式导出

14:08.410 --> 14:09.410
方式导出

14:10.410 --> 14:11.410
但是你在WePack

14:11.410 --> 14:12.410
有了WePack之后

14:12.410 --> 14:14.410
你能不能用ES6的方式导出

14:14.410 --> 14:15.410
当然可以

14:15.410 --> 14:16.410
当然可以

14:16.410 --> 14:17.410
你就导入默认值就行了

14:17.410 --> 14:19.410
因为common.js的导出

14:19.410 --> 14:20.410
就是直接变成了

14:20.410 --> 14:21.410
ES6的默认值

14:21.410 --> 14:22.410
你直接用默认值

14:22.410 --> 14:23.410
导出就行了

14:24.410 --> 14:25.410
没问题

14:25.410 --> 14:26.410
没问题

14:26.410 --> 14:27.410
大家

14:27.410 --> 14:28.410
但是我们平时

14:28.410 --> 14:30.410
写自己的模块的时候

14:30.410 --> 14:31.410
注意一个点

14:31.410 --> 14:32.410
就是最佳实践

14:32.410 --> 14:34.410
就是我们最好的做法

14:34.410 --> 14:35.410
什么

14:35.410 --> 14:37.410
不要精神分裂

14:37.410 --> 14:39.410
就是你写的代码里边

14:39.410 --> 14:41.410
你这个src你自己写的模块里边

14:41.410 --> 14:43.410
你不要一会用common.js

14:43.410 --> 14:44.410
一会用es6

14:44.410 --> 14:45.410
你选择一个

14:45.410 --> 14:47.410
就使心塌地的用就行了

14:47.410 --> 14:49.410
不要一会用

14:49.410 --> 14:50.410
common.js

14:50.410 --> 14:51.410
一会用es6

14:51.410 --> 14:52.410
自己都搞晕了

14:52.410 --> 14:53.410
所以说你如果说

14:53.410 --> 14:54.410
你选择一个合适的模块

14:54.410 --> 14:55.410
的话标准

14:55.410 --> 14:56.410
要用es6

14:56.410 --> 14:57.410
全部用es6

14:57.410 --> 14:58.410
要用那个common.js

14:58.410 --> 14:59.410
我全部用common.js

14:59.410 --> 15:01.410
不管我用的第三方库

15:01.410 --> 15:02.410
还是自己的模块

15:02.410 --> 15:03.410
全部用common.js

15:03.410 --> 15:04.410
不管我用的第三方库

15:04.410 --> 15:05.410
还是自己的模块

15:05.410 --> 15:06.410
我全部用es6

15:06.410 --> 15:07.410
选择一种

15:07.410 --> 15:09.410
然后使心塌地的用下去

15:09.410 --> 15:10.410
都可以用

15:10.410 --> 15:11.410
都可以相互交互的

15:11.410 --> 15:12.410
观测整个开发阶段

15:12.410 --> 15:13.410
那么这样子

15:13.410 --> 15:14.410
是最好的

15:14.410 --> 15:15.410
不要精神分裂

15:15.410 --> 15:16.410
后边

15:16.410 --> 15:17.410
我们还会说到

15:17.410 --> 15:18.410
很多的地方

15:18.410 --> 15:19.410
就是跟我们写代码相关

15:19.410 --> 15:20.410
都是不要精神分裂

15:20.410 --> 15:21.410
一会这样

15:21.410 --> 15:22.410
一会那样

15:22.410 --> 15:23.410
搞了蒙了

15:23.410 --> 15:25.410
你平时使用那个

15:25.410 --> 15:26.410
在有了模块化之后

15:26.410 --> 15:27.410
能不能使用

15:27.410 --> 15:28.410
挖这个关键字呢

15:28.410 --> 15:29.410
可以

15:29.410 --> 15:30.410
因为他也不会污染权力变量

15:30.410 --> 15:31.410
不过他呢

15:31.410 --> 15:32.410
他有一些

15:32.410 --> 15:33.410
有些不好的问题

15:33.410 --> 15:34.410
总之呢

15:34.410 --> 15:35.410
你无所谓

15:35.410 --> 15:36.410
你要用挖就用挖

15:36.410 --> 15:37.410
你要用类似就用类似

15:37.410 --> 15:39.410
你不要精神分裂就行了

15:39.410 --> 15:41.410
这是给大家

15:41.410 --> 15:43.410
就是注意的一点

15:43.410 --> 15:44.410
我们平时呢

15:44.410 --> 15:45.410
一般来说

15:45.410 --> 15:47.410
那以后你到公司里边

15:47.410 --> 15:48.410
用es6模块化

15:48.410 --> 15:49.410
还是用common.js呢

15:49.410 --> 15:50.410
说不好

15:50.410 --> 15:51.410
看你们公司

15:51.410 --> 15:52.410
你们自己的习惯

15:52.410 --> 15:53.410
我可能呢

15:53.410 --> 15:55.410
比较习惯于用

15:55.410 --> 15:56.410
es6可能要多一点

15:56.410 --> 15:57.410
当然common.js

15:57.410 --> 15:58.410
能不能用

15:58.410 --> 15:59.410
当然可以用

16:00.410 --> 16:01.410
ok 那么这就是

16:01.410 --> 16:02.410
我这里可以要说的

16:02.410 --> 16:03.410
就在webpack里边

16:03.410 --> 16:04.410
模块化之间

16:04.410 --> 16:05.410
是如果不同的模块化

16:05.410 --> 16:06.410
表准

16:06.410 --> 16:07.410
它是如何来兼容的

16:07.410 --> 16:09.410
ok 这是关于这一块

