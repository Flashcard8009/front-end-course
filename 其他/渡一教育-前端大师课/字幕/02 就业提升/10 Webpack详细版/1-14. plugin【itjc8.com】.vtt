WEBVTT

00:01.010 --> 00:04.290
这些课咱们来学习plugin 就是插件

00:04.690 --> 00:08.290
我们之前说vpec有两个扩展点

00:08.290 --> 00:10.450
一个是我们之前学过loader

00:10.450 --> 00:12.050
另一个就是plugin

00:12.050 --> 00:15.130
这两个都是能够扩展vpec的功能的

00:15.530 --> 00:19.010
loader他做的事情其实比较有限的

00:19.010 --> 00:21.930
因为他的定位是转换代码

00:21.930 --> 00:24.490
他只是把一种代码转换成另一种代码

00:24.490 --> 00:26.130
比方说我们有些CSS

00:26.130 --> 00:27.570
对吧 转换不了

00:27.570 --> 00:28.610
他不是CSS代码

00:28.690 --> 00:30.930
那么他没法做愚法书分析

00:30.930 --> 00:33.210
因此我们需要把它转换成介事代码

00:33.210 --> 00:34.450
就说代码转换的

00:35.090 --> 00:36.770
而有一些情况下

00:36.770 --> 00:38.250
我们要扩展vpec的功能

00:38.250 --> 00:40.770
可能不是转换代码那么简单

00:41.610 --> 00:44.450
比如说我们在vpec最终要生成一些资源

00:44.450 --> 00:45.930
对吧 生成一些资源文件

00:45.930 --> 00:47.690
就像我们之前的总流生图

00:47.690 --> 00:49.730
你看这里 最终是不知道生成一些资源

00:49.730 --> 00:51.970
我们想他在生成资源的时候

00:51.970 --> 00:55.050
顺便多生成一个说明描述文件

00:55.050 --> 00:57.250
我们下节课了就要干这个事

00:57.690 --> 00:59.690
那么这个东西跟loader有什么关系

00:59.690 --> 01:00.690
是不是没有任何关系

01:00.690 --> 01:02.130
它不涉及到代码转换

01:02.730 --> 01:05.690
比方说有的时候它编译启动的时候

01:05.690 --> 01:06.610
启动编译的时候

01:06.610 --> 01:07.770
控制台输出一句话

01:07.770 --> 01:08.850
表示vpec启动了

01:08.850 --> 01:10.170
就做这么一个简单的功能

01:10.170 --> 01:12.890
比方说我们vpec编译开始的时候

01:12.890 --> 01:13.650
开始编译之前

01:13.650 --> 01:15.690
我们输出一句话在控制台里边

01:15.690 --> 01:17.410
那么这个东西跟loader有什么关系

01:17.410 --> 01:18.730
没有关系 对吧

01:18.730 --> 01:19.850
所以这些东西呢

01:19.850 --> 01:21.010
loader就完成不了了

01:21.010 --> 01:22.530
那么需要插件

01:22.530 --> 01:25.050
就遇到什么当什么什么的时候

01:25.050 --> 01:26.930
我们要去做什么什么样的事的时候

01:27.130 --> 01:28.570
就需要plugin来完成

01:29.770 --> 01:31.730
咱们这节课学习plugin

01:31.730 --> 01:33.050
plugin这个东西

01:33.050 --> 01:35.370
如果说你要彻底的搞清楚它

01:35.370 --> 01:36.810
就是具系无仪的

01:36.810 --> 01:38.770
把它全部搞清楚的话

01:38.770 --> 01:39.690
对不起

01:39.690 --> 01:43.330
以你们现阶段的能力还做不到

01:43.330 --> 01:45.690
因为如果说你要彻底的搞清楚的话

01:45.690 --> 01:50.930
你必须要把vpec的所有原码全部读一遍

01:50.930 --> 01:53.250
那么这个工程量就非常非常耗大了

01:53.250 --> 01:55.090
就不是短时间能够完成的

01:55.130 --> 01:58.170
因此你没有必要

01:58.170 --> 02:01.730
也没有必要去彻底的搞清楚plugin

02:01.730 --> 02:03.810
我们这节课的目的

02:03.810 --> 02:05.690
所以说我之前反复给大家强调

02:05.690 --> 02:08.210
你学一个东西你一定要清楚

02:08.210 --> 02:09.850
你学这个东西

02:09.850 --> 02:11.530
它要有一个大局观

02:11.530 --> 02:13.410
就它的定位是什么

02:13.410 --> 02:15.890
我们学这个东西的定位是什么

02:15.890 --> 02:20.330
是我们要理解插件的运作原理就够了

02:20.330 --> 02:22.330
我们只需要理解这一点

02:22.330 --> 02:23.570
为什么要理解这一点呢

02:23.570 --> 02:25.170
因为理解了这一点之后

02:25.170 --> 02:28.450
你们后面会用到很多别人写好的插件

02:28.450 --> 02:31.050
那么你就知道它的运作原理是怎么回事的

02:31.050 --> 02:34.770
尽管我们不去自己去写那样的插件

02:34.770 --> 02:37.330
以后你们在公司里面也很少很少

02:37.330 --> 02:40.410
几乎是不会去让你自己写插件

02:40.410 --> 02:42.170
也不会让你自己写家载器

02:42.170 --> 02:43.170
我们学这些东西

02:43.170 --> 02:46.690
只是让我们去更好的理解别人写的东西

02:46.690 --> 02:48.490
它是起这么一个目的

02:48.490 --> 02:52.530
因此我们没有必要把它的研究的那么细

02:52.570 --> 02:54.170
这样技术领域这个东西

02:54.170 --> 02:56.610
如果说你不放过任何一个东西

02:56.610 --> 02:57.970
全部要演绩透的话

02:57.970 --> 02:59.650
那你可能学完了

02:59.650 --> 03:01.090
就差不多要入土了

03:01.090 --> 03:02.490
你不要产工作了

03:02.490 --> 03:04.290
因为你学不完太多了

03:04.290 --> 03:05.530
太多东西了

03:05.530 --> 03:07.170
因此所以说我们学这些东西的时候

03:07.170 --> 03:08.530
要抓大放小

03:08.530 --> 03:10.210
抓它最核心的东西

03:10.210 --> 03:11.370
然后放小

03:11.370 --> 03:14.250
就是什么那些具体武艺的东西

03:14.250 --> 03:15.970
我们就不用去考虑了

03:15.970 --> 03:18.290
因此我们这些可能给它安排的

03:18.290 --> 03:19.810
讲这个插件

03:19.810 --> 03:21.050
我们安排的是什么呢

03:21.090 --> 03:22.210
讲它的核心原理

03:23.210 --> 03:25.210
plugin到底是什么东西呢

03:25.210 --> 03:27.970
它其实就是有这么一种

03:27.970 --> 03:29.370
它有一种功能

03:29.370 --> 03:31.050
它可以把某一些功能的

03:31.050 --> 03:32.410
迁入到

03:32.410 --> 03:34.050
WePack的编印流程中

03:34.050 --> 03:35.330
我们之前画过这个图

03:35.330 --> 03:36.210
画过一个检图

03:36.210 --> 03:37.170
这些都是检图

03:37.170 --> 03:39.410
它实际的过程是极其复杂的

03:39.410 --> 03:41.290
那么这个编印流程里面

03:41.290 --> 03:43.210
它起始每一步每一步发生了

03:43.210 --> 03:45.410
过后它会触发很多事件

03:45.410 --> 03:48.490
那么这些事件需要有人来处理

03:48.490 --> 03:49.370
如果不处理的话

03:49.530 --> 03:50.730
它就将什么都没发生

03:50.730 --> 03:51.930
继续往后走

03:51.930 --> 03:53.530
那么如果说你要处理的话

03:53.530 --> 03:55.610
你就需要通过plugin来处理

03:55.610 --> 03:57.250
所以plugin来做什么说的

03:57.250 --> 03:57.890
说白了

03:57.890 --> 03:59.570
你可以认为它就是在出车事件的

03:59.570 --> 04:00.770
就是那么简单

04:00.770 --> 04:02.690
你看它的核心原理其实很简单

04:02.690 --> 04:03.570
它的思想

04:03.570 --> 04:05.410
就像比方说我这里画个图

04:05.410 --> 04:06.610
你看这个图里比我加了什么

04:06.610 --> 04:07.730
加了很多的红点

04:07.730 --> 04:08.530
对吧

04:08.530 --> 04:09.770
这些红点

04:09.770 --> 04:12.090
我们就可以认为这是个事件的触发点

04:12.090 --> 04:13.570
我们初识的话完了过后

04:13.570 --> 04:15.530
它会触发一个事件

04:15.530 --> 04:17.210
然后编印的过程中

04:17.210 --> 04:18.370
它也会触发一些事件

04:18.370 --> 04:21.930
比方说模块解析完成

04:21.930 --> 04:23.690
然后模块解析完了过后

04:23.690 --> 04:25.250
要生成资源

04:25.250 --> 04:27.010
每个创改的资源生成完成

04:27.010 --> 04:29.530
然后又生成总资源生成完成

04:29.530 --> 04:32.170
然后最终打包出结果

04:32.170 --> 04:33.450
就发生到文件

04:33.450 --> 04:35.330
就是我们把生成到文件的时候

04:35.330 --> 04:36.730
也会触发事件

04:36.730 --> 04:38.450
不过我这里画的比较少

04:38.450 --> 04:39.690
在真实的情况下

04:39.690 --> 04:41.050
一会你们可以看到

04:41.050 --> 04:43.610
实际上这个世界是多的吓死人

04:43.610 --> 04:45.010
我没有去系数

04:45.010 --> 04:46.930
可能有五六十个世界

04:46.930 --> 04:48.210
就这么多的世界

04:48.250 --> 04:49.490
那我们是不是每个学习的

04:49.490 --> 04:50.250
没必要

04:50.250 --> 04:51.810
你只需要知道它触发事件

04:51.810 --> 04:56.130
这些事件可以被plunking进行监听就可以了

04:56.130 --> 04:59.130
plunking就是可以在处理这些事件

04:59.130 --> 05:00.450
那么它怎么来监听呢

05:00.450 --> 05:02.930
我们来看一下plunking的邪法

05:02.930 --> 05:04.930
它的本质其实就是一个

05:04.930 --> 05:07.210
带有apply的方法的对象

05:07.210 --> 05:08.690
你看我这里就是个plunking

05:08.690 --> 05:09.770
你看一个对象

05:09.770 --> 05:11.930
它里面带了一个apply方法

05:11.930 --> 05:14.010
这个方法就是个函数

05:14.010 --> 05:15.810
函数里面函数我们一会再说

05:15.810 --> 05:18.130
总之它就有这么一个函数plunking

05:18.130 --> 05:21.370
但是一般我们如果说自己手写插件

05:21.370 --> 05:22.690
不会手写的

05:22.690 --> 05:23.090
放心

05:23.090 --> 05:24.050
不会手写的

05:24.050 --> 05:26.690
不过以后你们看到别人写的插件的话

05:26.690 --> 05:28.410
那么就会写的这种情况

05:28.410 --> 05:30.410
一般我们不会这样子写插件

05:30.410 --> 05:31.490
一般会写什么了

05:31.490 --> 05:33.810
写成一个构造函数

05:33.810 --> 05:36.050
如果说我们通常用ES6的话

05:36.050 --> 05:37.770
那就可以直接写成一个内

05:37.770 --> 05:39.770
因为这些东西都是在load环境里面

05:39.770 --> 05:40.570
执行了对吧

05:40.570 --> 05:41.410
你看这些东西

05:41.410 --> 05:41.650
是吧

05:41.650 --> 05:42.610
在load环境里面

05:42.610 --> 05:44.410
整个编印过程是在load环境里面

05:44.450 --> 05:47.010
因此load环境里面本身支持ES6的语法

05:47.010 --> 05:48.090
所以大胆的去使用

05:48.090 --> 05:50.130
class不用去考虑兼容性问题

05:50.130 --> 05:51.290
那么我们使用内

05:51.290 --> 05:53.010
那么内里边

05:53.010 --> 05:55.810
我们给它构建一个apply方法

05:55.810 --> 05:56.690
然后插件怎么办

05:56.690 --> 05:58.410
插件我们去创建一个内的对象

05:58.410 --> 05:58.970
就完了

05:58.970 --> 05:59.650
就这么简单

06:00.890 --> 06:01.290
好

06:01.290 --> 06:02.650
那么比方说我们写一个吧

06:02.650 --> 06:03.730
写一个

06:03.730 --> 06:05.690
我这里已经搭建好了

06:05.690 --> 06:06.650
这个一个配置文件

06:06.650 --> 06:08.090
已经搭建好了

06:08.090 --> 06:09.610
然后我在这里新加坡文件

06:10.610 --> 06:13.130
plugins

06:13.130 --> 06:15.330
这里边

06:15.330 --> 06:16.770
当文件讲的名字随便

06:16.770 --> 06:19.490
比方我们写个myplugins.js

06:19.490 --> 06:21.010
那这个插件怎么写

06:21.010 --> 06:21.970
插件就是一个内

06:21.970 --> 06:23.810
比方买plugins

06:23.810 --> 06:24.770
就是一个内

06:24.770 --> 06:25.810
里边提供了一个什么方法

06:25.810 --> 06:26.730
apply方法

06:26.730 --> 06:28.210
就提供这么一个方法

06:28.210 --> 06:30.370
最后我们把内导出

06:30.370 --> 06:32.810
注意用comment.js的语法

06:32.810 --> 06:34.450
导出myplugins

06:34.450 --> 06:36.010
当然也可以

06:36.010 --> 06:37.010
也可以怎么样

06:37.010 --> 06:38.130
也可以直接在这里

06:38.130 --> 06:39.050
导出也可以

06:39.610 --> 06:40.890
用表达式的方式来导出

06:40.890 --> 06:42.330
随便

06:42.330 --> 06:44.890
那这样就导出一个插件了

06:44.890 --> 06:47.410
那么这是插件

06:47.410 --> 06:48.810
那么怎么用了这个插件

06:48.810 --> 06:50.210
因为你光是导出一个插件

06:50.210 --> 06:50.810
它能运行吗

06:50.810 --> 06:51.290
比方说

06:51.290 --> 06:54.490
这是插件运行了

06:54.490 --> 06:55.330
比方说这么一句话

06:55.330 --> 06:55.970
它能运行吗

06:55.970 --> 06:56.810
肯定不能运行

06:56.810 --> 06:57.770
在打包的过程中

06:57.770 --> 07:02.080
比方说我们这里

07:02.080 --> 07:03.440
比方说mpx

07:03.440 --> 07:05.640
你看看它能不能运行

07:05.640 --> 07:06.120
有运行吗

07:06.120 --> 07:06.800
这个插件

07:06.800 --> 07:07.800
是没有运行

07:07.800 --> 07:08.880
没有输出这么一句话

07:08.880 --> 07:09.120
对吧

07:09.120 --> 07:10.640
这个方法没有运行

07:10.640 --> 07:11.400
为什么没有运行

07:11.400 --> 07:12.240
因为你没用

07:12.240 --> 07:13.920
没用这个插件

07:13.920 --> 07:15.440
那怎么来用呢

07:15.440 --> 07:16.680
跟那个loader是一样的

07:16.680 --> 07:17.360
你光写了没用

07:17.360 --> 07:19.760
你要在配置里面告诉它怎么去用

07:19.760 --> 07:20.280
怎么用呢

07:20.280 --> 07:21.600
就特别简单

07:21.600 --> 07:22.400
你看一下

07:22.400 --> 07:23.680
我们看一下课件里面

07:23.680 --> 07:25.280
用的方式很简单

07:25.280 --> 07:27.080
你就只需要在配置里面

07:27.080 --> 07:29.720
加上一个配置叫plugins

07:29.720 --> 07:32.040
表示的是有很多插件

07:32.040 --> 07:33.480
那么每一个插件

07:33.480 --> 07:34.400
它这是个输出

07:34.400 --> 07:34.960
每一个插件

07:34.960 --> 07:37.120
你把插件对象传给它就行了

07:37.120 --> 07:38.720
我们插件不就是个对象吗

07:38.720 --> 07:39.680
对象里面有apply

07:39.720 --> 07:41.480
那么通过这个构造海术创建的对象

07:41.480 --> 07:42.640
不就是有apply吗

07:42.640 --> 07:43.040
对吧

07:43.040 --> 07:44.240
所以说我们通过这种方式

07:44.240 --> 07:45.600
一般通过这种方式

07:45.600 --> 07:47.240
来使用插件

07:47.240 --> 07:47.520
OK

07:47.520 --> 07:50.560
那么我们这里找到myplugin

07:50.560 --> 07:52.160
就是我们的构造海术require

07:54.160 --> 07:55.120
plugins

07:55.120 --> 07:56.360
myplugin

07:56.360 --> 07:58.000
那么怎么把插件应用进去了

07:58.000 --> 08:00.000
就在这里配置一下plugins

08:00.000 --> 08:00.960
一个输出

08:00.960 --> 08:03.280
输出里面我们留一个myplugin

08:03.280 --> 08:04.080
就完了

08:04.080 --> 08:04.520
对吧

08:04.520 --> 08:06.080
这就应用进去

08:06.080 --> 08:07.560
应用进去我们试一下

08:07.560 --> 08:09.240
我们现在还不知道这个apply的方法

08:09.280 --> 08:09.840
什么时候调用

08:09.840 --> 08:10.320
但是无所谓

08:10.320 --> 08:11.400
我们看一下它有没有调用

08:12.400 --> 08:12.760
试一下

08:13.880 --> 08:16.360
对我们学东西一定要抓大放小

08:16.360 --> 08:17.520
就是学得轻松一点

08:17.520 --> 08:18.440
不要学那么痛苦

08:19.520 --> 08:19.800
好

08:19.800 --> 08:20.360
OK

08:20.360 --> 08:21.400
一看是不是插件运行了

08:21.400 --> 08:21.960
对吧

08:21.960 --> 08:22.760
说明什么

08:22.760 --> 08:24.720
说明这个apply方法是不是运行了

08:24.720 --> 08:25.840
就这么简单

08:25.840 --> 08:27.520
它就是要提供一个方法

08:30.120 --> 08:33.320
然后我们来说一下里边的一些细节

08:33.320 --> 08:34.480
说里边的细节的时候

08:34.480 --> 08:37.200
你不用去太过于深究

08:37.240 --> 08:38.720
你只要终点升级

08:38.720 --> 08:40.880
它的运作方式运作远离

08:41.840 --> 08:43.000
我们来看一下

08:43.000 --> 08:44.160
它怎么运行的呢

08:44.160 --> 08:44.720
它里边

08:44.720 --> 08:45.600
它是这样子

08:45.600 --> 08:47.440
你看这个apply方法是不是有个参数

08:47.440 --> 08:48.560
compiler

08:48.560 --> 08:50.000
它这里有个参数给我们

08:50.000 --> 08:51.040
compiler

08:51.040 --> 08:52.640
那么这个compiler是什么东西呢

08:52.640 --> 08:54.240
这里我要解释一下

08:54.240 --> 08:56.480
这个compiler它是一个对象

08:56.480 --> 08:58.320
它就给传了一个对象进来

08:58.320 --> 08:59.720
这个对象哪来的呢

08:59.720 --> 09:02.160
它是在我们整个编译期

09:02.160 --> 09:04.520
初始化阶段完成的

09:04.520 --> 09:06.200
我就初始化阶段的时候

09:06.280 --> 09:07.840
它构建了这么一个对象

09:07.840 --> 09:10.480
我们之前不是说那个

09:10.480 --> 09:11.600
微拍的编译流程吧

09:11.600 --> 09:11.800
对吧

09:11.800 --> 09:12.600
先初始化

09:12.600 --> 09:13.280
然后再编译

09:13.280 --> 09:13.920
再输出

09:13.920 --> 09:14.920
对吧

09:14.920 --> 09:16.440
不是有这么一个流程吗

09:16.440 --> 09:17.000
好

09:17.000 --> 09:19.560
然后如果说我们这个

09:19.560 --> 09:21.400
就是我们这个compiler对象

09:21.400 --> 09:23.520
它在哪里开始构建了呢

09:23.520 --> 09:25.000
它不是在编译期

09:25.000 --> 09:25.800
compiler什么意思

09:25.800 --> 09:26.760
就是编译期

09:26.760 --> 09:28.320
就是一个编译者

09:28.320 --> 09:29.360
编译期

09:29.360 --> 09:30.840
那么它在哪里创建了呢

09:30.840 --> 09:31.480
这个对象

09:31.480 --> 09:32.800
它是在初始化阶段

09:32.800 --> 09:34.680
就在这个阶段创建了对象

09:34.680 --> 09:35.640
一处你看

09:35.640 --> 09:39.280
这个对象它就观传整个微拍的打包过程

09:39.280 --> 09:39.840
是不是整个

09:39.840 --> 09:41.000
因为它在初始化

09:41.000 --> 09:42.560
当然初始化具体什么位置创建的

09:42.560 --> 09:43.760
我们就不去细休了

09:43.760 --> 09:46.400
我们知道它在初始化阶段创建的就可以了

09:46.400 --> 09:48.080
就是compiler对象

09:48.080 --> 09:49.040
没问题吧

09:49.040 --> 09:49.320
好

09:49.320 --> 09:50.600
接着我们继续看

09:50.600 --> 09:52.080
整个微拍的打包期间

09:52.080 --> 09:53.800
只有一个compiler对象

09:53.800 --> 09:54.200
是吧

09:54.200 --> 09:55.240
因为它初始化

09:55.240 --> 09:57.320
它只有一次初始化

09:57.320 --> 09:59.320
那你除非重新运行这个微拍的迷你

09:59.320 --> 10:01.080
那就重新另一个打包过程了

10:01.080 --> 10:01.960
那整个打包过程

10:01.960 --> 10:03.120
在一个打包过程里面

10:03.160 --> 10:04.800
它只有一个compiler对象

10:06.000 --> 10:06.960
那么后续

10:06.960 --> 10:08.640
它具体去怎么去打包

10:08.640 --> 10:10.480
比方说构建什么创开

10:10.480 --> 10:11.640
你乱七八糟的事情

10:11.640 --> 10:12.360
一大堆

10:12.360 --> 10:13.280
还有什么输出

10:13.360 --> 10:14.160
怎么去打包

10:14.160 --> 10:15.440
后续的打包工作

10:15.440 --> 10:18.040
全是由另一个对象来完成

10:18.040 --> 10:18.880
什么对象了

10:18.880 --> 10:21.560
是在compiler对象内部创建的另一个对象

10:21.560 --> 10:22.840
叫做compiler对象

10:22.840 --> 10:24.200
你看这里我又画了一个对象

10:24.200 --> 10:25.240
compiler对象

10:25.240 --> 10:26.160
那么这个对象

10:26.160 --> 10:28.480
它负责具体的编译过程

10:28.480 --> 10:29.800
以及怎么去输出

10:29.800 --> 10:30.800
它去负责

10:30.800 --> 10:32.120
它去负责

10:32.720 --> 10:33.520
不要这意思吗

10:33.520 --> 10:33.880
OK

10:33.880 --> 10:35.040
这是compiler对象

10:35.920 --> 10:36.160
好

10:36.160 --> 10:37.680
下面我有一张图

10:37.680 --> 10:38.240
这张图

10:38.240 --> 10:40.760
如果说你们以后面试

10:40.760 --> 10:42.160
我觉得

10:42.160 --> 10:43.200
据我的观察

10:43.200 --> 10:43.920
面试的时候

10:43.920 --> 10:46.680
面试微拍本身的东西

10:46.680 --> 10:47.360
不多

10:47.360 --> 10:48.680
就算要出现的话

10:48.680 --> 10:49.640
也比较简单

10:49.640 --> 10:51.800
它一般不会问你这么深的问题

10:51.800 --> 10:54.360
如果说他要问到你这么深的问题

10:54.360 --> 10:55.960
他就是考考你有没有眼睛那么深

10:55.960 --> 10:57.480
他也没指望你能打上来

10:57.480 --> 10:58.720
但是如果说你打上来的话

10:58.720 --> 11:01.240
那就可以给对方一个惊喜

11:01.320 --> 11:02.720
好到这里

11:02.720 --> 11:04.400
我给你图什么意思呢

11:04.400 --> 11:05.000
就是说

11:05.000 --> 11:06.520
如果说他问你

11:06.520 --> 11:10.920
compiler对象跟compilerA型有什么区别呢

11:10.920 --> 11:11.920
有什么区别呢

11:11.920 --> 11:13.240
compiler是

11:13.240 --> 11:15.840
它是在内部创建了compilerA型

11:15.840 --> 11:19.520
而具体的打包过程是compilerA型来完成的

11:19.520 --> 11:21.240
那么在我们杆子上有什么区别呢

11:21.240 --> 11:21.680
是这样子

11:23.840 --> 11:25.920
我们你看我这里画的一个比较特殊的图

11:25.920 --> 11:27.320
就是当文件发生变化

11:27.320 --> 11:29.600
也就是说当微拍个启动监听

11:29.640 --> 11:30.560
什么叫启动监听

11:31.400 --> 11:34.240
就在这如果说我给他加了一个watch

11:34.240 --> 11:36.400
就是我们观测文件的变化是不是做过的

11:36.400 --> 11:36.680
对吧

11:36.680 --> 11:37.480
watch2

11:37.480 --> 11:39.320
表示我们要监控文件的变化

11:39.320 --> 11:40.160
那么这样一来

11:40.160 --> 11:41.080
他打包完成过后

11:41.080 --> 11:42.080
他不会停止

11:42.080 --> 11:44.960
你看NPS微拍个

11:44.960 --> 11:46.720
本来之前打包完了过后

11:46.720 --> 11:47.320
他就停止了

11:47.320 --> 11:47.800
对吧

11:47.800 --> 11:48.400
整个微拍

11:48.400 --> 11:49.560
整个过程就结束了

11:49.560 --> 11:51.320
但是现在看是不是没有停止

11:51.320 --> 11:51.800
干嘛

11:51.800 --> 11:54.040
他在监听文件的变化

11:54.040 --> 11:55.640
如果说文件发生变化

11:55.640 --> 11:57.680
比方说我们SRC的index发生变化

11:57.720 --> 11:58.840
随便写个他跟变化

12:00.000 --> 12:01.200
一保存

12:01.200 --> 12:02.880
那么他是不是要重新打包

12:02.880 --> 12:03.400
对吧

12:03.400 --> 12:04.240
他重新打包

12:06.360 --> 12:06.680
这里

12:08.480 --> 12:08.880
保存

12:08.880 --> 12:09.640
你看

12:09.640 --> 12:11.240
下面是不是重新打包了

12:11.240 --> 12:11.440
对吧

12:11.440 --> 12:12.040
重新打包了

12:13.120 --> 12:13.280
好

12:13.280 --> 12:14.880
那么他重新打包的时候

12:14.880 --> 12:16.400
他是怎么样过程的

12:16.400 --> 12:18.400
当文件发生变化的时候

12:18.400 --> 12:20.440
他不会从初始化结论开始

12:21.560 --> 12:22.160
初始化干嘛

12:22.160 --> 12:23.520
分析那些配置文件对吧

12:23.520 --> 12:24.400
配置文件没有变

12:24.400 --> 12:24.640
对吧

12:24.640 --> 12:26.960
他因此他不会从初始化结论开始

12:27.000 --> 12:28.280
而从哪个阶段开始

12:28.280 --> 12:29.760
是从编译阶段开始

12:29.760 --> 12:32.320
因此他会重新创建一个compiler

12:33.240 --> 12:33.920
你看

12:33.920 --> 12:35.760
那compiler还又没有重新创建

12:35.760 --> 12:37.280
compiler没有

12:37.280 --> 12:39.640
但是compiler重新创建

12:39.640 --> 12:40.560
就这么两个区别

12:40.560 --> 12:42.000
compiler他一定只有一个

12:42.000 --> 12:43.840
compiler有可能有多个

12:43.840 --> 12:44.800
关键看里

12:44.800 --> 12:46.040
就是每一次打包

12:46.040 --> 12:47.360
那么具体的打包的过程

12:47.360 --> 12:48.360
那就是compiler

12:48.360 --> 12:50.080
那他有这么一个区别

12:50.080 --> 12:50.800
认识一下

12:50.800 --> 12:51.480
认识一下

12:53.680 --> 12:55.280
然后我们来看

12:55.280 --> 12:56.640
我们刚才不是说plugin

12:56.640 --> 12:58.080
我们的插件

12:58.080 --> 12:59.680
他是就相当于在注册事件

12:59.680 --> 13:00.200
对吧

13:00.200 --> 13:02.200
他在他需要在某一个时间点

13:02.200 --> 13:03.000
去做一些事

13:03.000 --> 13:03.400
对吧

13:03.400 --> 13:04.600
他相当于注册事件

13:06.000 --> 13:06.600
我们来看一下

13:10.600 --> 13:11.720
等一下

13:11.720 --> 13:13.240
前面好像还有一个东西

13:15.040 --> 13:16.080
还有一个东西

13:16.080 --> 13:17.880
我这里好像忘写了

13:17.880 --> 13:18.440
忘写了

13:19.640 --> 13:20.360
看一下

13:20.360 --> 13:25.530
前面有个东西

13:25.530 --> 13:27.570
好像忘写了

13:27.570 --> 13:28.890
忘写了

13:28.890 --> 13:30.090
那么这里我把补充上

13:30.090 --> 13:31.130
把爸爸这里补充上

13:31.130 --> 13:32.090
我要笔记里边

13:32.090 --> 13:32.890
他补充上

13:34.050 --> 13:35.930
就是说这我们还没有说这个问题

13:35.930 --> 13:37.690
就是个apply这个函数

13:37.690 --> 13:39.050
它是什么时候运行的

13:39.050 --> 13:40.130
这个apply函数

13:40.850 --> 13:42.410
apply函数什么时候运行的

13:43.610 --> 13:48.330
apply函数会在初始化阶段

13:49.450 --> 13:50.770
创建好

13:51.450 --> 13:54.370
创建好compiler对向后

13:54.850 --> 13:58.410
compiler对向后运行

13:58.930 --> 14:01.250
也就是说我们注册的插件会在什么时候运行

14:02.250 --> 14:03.850
它不是在某一个时间

14:03.850 --> 14:06.370
不是某一个具体的事件的时候运行

14:06.370 --> 14:07.290
不是的

14:07.290 --> 14:08.170
而是在什么呢

14:08.170 --> 14:09.610
而是在这个时候

14:09.610 --> 14:10.890
而在初始化的时候

14:10.890 --> 14:12.890
它不是创建一个compiler对象吗

14:12.890 --> 14:15.850
它创建好了一个compiler对象之后

14:15.850 --> 14:18.250
它就会运行这个apply方法

14:18.250 --> 14:20.210
就会运行这个apply方法

14:20.210 --> 14:22.250
表示应用插件

14:22.250 --> 14:23.890
该方法或者什么时候运行

14:23.890 --> 14:25.090
一开始就运行了

14:25.890 --> 14:27.810
所以说如果说我们输出了这句话

14:28.010 --> 14:30.250
咱们再不用停止

14:30.250 --> 14:31.250
如果说我们输出了这句话

14:31.250 --> 14:31.770
我们停止吧

14:31.770 --> 14:32.450
重大意思

14:34.530 --> 14:35.090
npx

14:35.090 --> 14:35.730
vpeg

14:36.090 --> 14:37.890
那么我们在插件里边直接输出这句话

14:37.890 --> 14:38.970
那么请问

14:40.170 --> 14:41.210
一开始输不输出

14:41.970 --> 14:42.730
肯定输出对吧

14:42.730 --> 14:43.530
肯定输出

14:43.530 --> 14:46.050
然后我们的文件发生变化的时候

14:46.050 --> 14:47.650
它还会不会输出这句话

14:47.650 --> 14:48.490
好好想一想

14:48.810 --> 14:50.570
所以我们只要理解它的核心原理就行了

14:50.570 --> 14:51.450
抓大放小

14:51.970 --> 14:54.050
那么这个时候要不要输出这句话

14:54.570 --> 14:55.650
根据我们刚才讲的

14:56.090 --> 14:57.530
是不是不会对吧

14:57.610 --> 14:59.970
因为它不会再重新创建康牌了

14:59.970 --> 15:01.730
因此我们这里一保存

15:02.090 --> 15:03.570
你看有没有重新打包

15:03.570 --> 15:04.730
你看是不是有重新打包

15:04.730 --> 15:06.290
你看这是第二次打包的过程

15:06.290 --> 15:07.330
有没有输出这句话

15:07.330 --> 15:08.090
是没有

15:08.090 --> 15:08.610
对吧

15:08.610 --> 15:09.090
没有

15:09.690 --> 15:11.850
因此像这个apply方法的

15:11.850 --> 15:15.530
它在每一个vpeg的命令的运行期间

15:15.530 --> 15:17.410
它只会运行一次

15:18.490 --> 15:19.850
那么就问题就来了

15:20.170 --> 15:21.130
问题什么呢

15:21.130 --> 15:23.730
那我们不是说plugging的插件

15:23.730 --> 15:25.850
它能够监听各种各样的事件吗

15:25.850 --> 15:26.530
那你这个方法

15:26.570 --> 15:27.370
它只运行了一次

15:27.370 --> 15:28.250
它怎么监听了

15:28.970 --> 15:33.650
它是让你在这个apply方法的运行过程中

15:33.650 --> 15:36.490
在这里注册事件

15:36.690 --> 15:38.090
它是让你做这么一件事

15:38.090 --> 15:40.810
你可以认为这个apply相当于有点类似于什么

15:41.970 --> 15:48.490
类似于window unload

15:49.970 --> 15:51.730
或者是我们接chrary里边的

15:52.290 --> 15:53.170
ready时间

15:53.570 --> 15:54.370
ready时间

15:54.810 --> 15:56.170
它是让你在这里

15:56.170 --> 15:59.610
它是在让你在这里去搞定这件事

16:00.490 --> 16:01.370
它类似于这种

16:01.970 --> 16:03.050
所以说你要在这里

16:03.050 --> 16:05.010
它不是处理事件

16:05.010 --> 16:06.410
它是让你注册事件的

16:06.810 --> 16:08.530
那么在这里我们要注册事件

16:09.050 --> 16:10.290
一开始的时候就要注册

16:10.290 --> 16:12.050
那么有哪些东西怎么来注册呢

16:12.050 --> 16:12.610
首先说

16:12.610 --> 16:13.570
怎么来注册呢

16:13.570 --> 16:16.650
它注册事件是我们把它称之为勾字函数

16:16.650 --> 16:17.770
也叫做hooks

16:18.970 --> 16:21.450
那么你就可以把它理解为事件就行了

16:22.410 --> 16:23.730
那么怎么来注册事件呢

16:23.730 --> 16:24.650
你看下面一个代码

16:25.490 --> 16:27.090
就要利用这个compiler

16:27.610 --> 16:30.970
这个compiler里边它提供了很多的事件

16:31.370 --> 16:31.930
怎么写

16:31.930 --> 16:33.970
就是compiler的hooks固定写法

16:33.970 --> 16:35.250
就是它有很多的事件

16:35.250 --> 16:37.010
所有的事件它是个对象

16:37.010 --> 16:37.970
所有的事件名称

16:37.970 --> 16:39.930
全部作为属性保存的对象里边

16:40.410 --> 16:42.570
那么这里就写上事件的名称

16:43.010 --> 16:43.330
好

16:43.330 --> 16:44.970
那么我们一部分一部分说

16:45.130 --> 16:46.610
这个事件名称是什么

16:46.890 --> 16:48.490
事件名称就是你要监听的事件名

16:48.570 --> 16:50.090
比方说我们以前学的动物

16:50.090 --> 16:51.770
动物里面什么unclick

16:51.770 --> 16:52.170
对吧

16:52.170 --> 16:53.050
click事件

16:53.050 --> 16:54.730
什么mouse over事件

16:54.730 --> 16:58.250
什么mouse out focus事件等等等等

16:58.250 --> 16:59.570
就是事件的名称

16:59.570 --> 17:00.970
当然我们这里肯定不是动物

17:00.970 --> 17:03.370
是指的是它编译的过程中

17:03.370 --> 17:04.570
要触发哪些事件

17:04.570 --> 17:05.850
你要去监听谁

17:05.850 --> 17:08.050
监听哪个事件是这么个意思

17:08.490 --> 17:10.090
我们以为它叫做勾字的名字

17:10.090 --> 17:10.970
hooks

17:11.370 --> 17:12.810
那么有哪些勾字呢

17:12.810 --> 17:14.650
就有哪些事件可以支持呢

17:14.650 --> 17:15.490
大家看这里

17:16.570 --> 17:17.770
有一个网页

17:17.850 --> 17:19.050
你看一下事件多不多

17:19.610 --> 17:20.490
多的吓死人

17:20.730 --> 17:21.690
你看这里

17:22.250 --> 17:22.890
这里

17:23.370 --> 17:24.170
是不是这么多事件

17:24.170 --> 17:25.850
有时候说没有那么多

17:25.850 --> 17:26.730
也不多

17:26.730 --> 17:27.530
也只有这么一点

17:28.090 --> 17:28.730
不着急

17:28.730 --> 17:30.970
扛牌的事件还只有这么一些

17:30.970 --> 17:32.250
那后面的扛牌的一形

17:32.970 --> 17:34.330
你看它也有很多事件

17:34.650 --> 17:36.250
所以说事件特别特别多

17:36.250 --> 17:37.850
我们也没有必要一个个去了解

17:37.850 --> 17:39.610
总之它知道它事件很多

17:39.850 --> 17:41.210
然后我们可以每一个事件

17:41.210 --> 17:42.090
我们都可以监听

17:42.250 --> 17:43.130
都可以监听

17:43.370 --> 17:43.930
就行了

17:44.490 --> 17:45.370
比方说吧

17:45.690 --> 17:46.890
我来一个监听的事件

17:46.970 --> 17:47.850
比方说当

17:48.490 --> 17:49.210
当那个事件

17:49.210 --> 17:49.690
OK

17:49.690 --> 17:50.730
那么我就怎么写

17:50.730 --> 17:52.010
我就把当写到这

17:52.010 --> 17:53.130
它支持这样的事件

17:53.130 --> 17:54.410
必须要它支持

17:54.730 --> 17:56.330
我们要监听这个事件

17:56.330 --> 17:57.450
就这么个意思

17:58.490 --> 17:58.970
明白了

17:58.970 --> 18:00.170
这是事件的名称

18:00.650 --> 18:00.890
好

18:00.890 --> 18:02.890
后面的事件内形是什么呢

18:02.890 --> 18:04.650
事件内形不就是事件名称吗

18:04.650 --> 18:05.130
不是的

18:05.130 --> 18:06.730
这个东西是你们没见过

18:07.130 --> 18:08.330
事件内形是什么呢

18:08.330 --> 18:10.010
事件内形这一部分

18:10.010 --> 18:12.810
它使用的是另外一个库的API

18:12.810 --> 18:13.610
了解就行了

18:13.610 --> 18:14.890
知道有这么一个东西就行了

18:14.890 --> 18:15.930
它叫Typeable

18:16.410 --> 18:17.530
这个东西API

18:17.530 --> 18:18.410
这个东西是什么呢

18:18.410 --> 18:19.850
这个东西是专门来处理

18:19.850 --> 18:21.050
各种勾字函数

18:21.050 --> 18:22.810
并且监听这些函数

18:22.810 --> 18:23.850
并且触发函数的

18:23.850 --> 18:24.890
这么一个小型的库

18:25.210 --> 18:26.650
它专门来做这么一件事

18:26.970 --> 18:27.850
是个通用的库

18:28.410 --> 18:29.290
那么这里边

18:29.290 --> 18:29.930
它做了

18:29.930 --> 18:31.610
它提供了哪些事件内形呢

18:31.610 --> 18:32.890
我们这里不是要写事件内形吗

18:32.890 --> 18:33.770
你看了就明白了

18:34.410 --> 18:34.730
好

18:34.730 --> 18:35.610
第一个Type

18:36.490 --> 18:38.570
如果说你使用这个Type的话

18:38.570 --> 18:40.810
表示你这个事件处理函数

18:41.370 --> 18:42.650
是一个同步的函数

18:43.130 --> 18:44.410
是一个同步的函数

18:44.410 --> 18:45.610
这个函数运行完

18:45.610 --> 18:47.610
表示这个事件处理就处理完了

18:47.610 --> 18:49.370
就当它发生这个事件的时候

18:49.370 --> 18:51.050
它会去运行你这个函数

18:51.050 --> 18:52.810
就相当于是ADD event listener

18:53.290 --> 18:54.330
就有点像什么呢

18:54.330 --> 19:00.970
有点像什么dom.add event listener

19:01.930 --> 19:03.050
事件的名字叫做什么

19:03.050 --> 19:03.770
叫做DOM

19:03.770 --> 19:04.810
处理函数呢

19:04.810 --> 19:05.850
是什么这个函数

19:05.850 --> 19:06.490
只不过呢

19:06.490 --> 19:07.690
我们以前学的DOM事件

19:07.690 --> 19:08.970
它比较简单对吧

19:08.970 --> 19:10.170
它没有什么异不同

19:10.170 --> 19:10.970
它只有同步

19:10.970 --> 19:11.930
只有同步

19:11.930 --> 19:13.050
那么这个函数运行完了

19:13.050 --> 19:14.170
事件就处理完了

19:14.170 --> 19:15.050
在这里边

19:15.130 --> 19:16.330
它分了几种情况

19:16.330 --> 19:17.770
如果说你用Type的话

19:17.770 --> 19:18.490
就表示了说

19:18.490 --> 19:20.810
你跟那个DOM事件是一样的

19:20.810 --> 19:21.850
你就是一个函数

19:21.850 --> 19:22.730
这个函数运行完了

19:22.730 --> 19:24.410
那么我们表示事件处理完了

19:24.410 --> 19:25.450
因为webhack

19:25.450 --> 19:27.530
它要知道你事件有没有处理完

19:27.530 --> 19:29.530
你这个勾字函数有没有运行完

19:29.530 --> 19:32.250
它后续的勾件是有影响的

19:32.810 --> 19:34.410
另外一个是Type sync

19:35.050 --> 19:35.770
什么意思呢

19:35.770 --> 19:37.530
看而sync表示异步了对吧

19:37.530 --> 19:39.530
那么说明我这个处理函数

19:39.530 --> 19:40.890
它是一个异步的函数

19:41.770 --> 19:42.810
它会给你一个回调

19:43.370 --> 19:44.650
它这个函数里边

19:44.730 --> 19:45.850
它会给你第二个函数

19:46.570 --> 19:48.570
如果说你使用这个Type sync

19:50.170 --> 19:51.770
那么你第二个函数里要传一个回调

19:52.490 --> 19:53.850
它会给你一个回调函数

19:53.850 --> 19:56.090
那么你在这里边去调用这个回调函数

19:56.090 --> 19:56.730
一调用

19:56.730 --> 19:58.010
那么它就可以表示事件

19:58.010 --> 19:59.850
表示这个事件我处理完了

19:59.850 --> 20:01.530
如果说我们这里可以set timeout

20:02.890 --> 20:03.850
三秒钟之后调用

20:03.850 --> 20:05.530
那么表示这个事件就处理完了

20:05.530 --> 20:07.050
就这么个意思

20:08.490 --> 20:09.850
然后还有一个Type promise

20:10.570 --> 20:11.610
这里了解就行了

20:11.690 --> 20:12.650
就表示

20:12.650 --> 20:14.010
因为我要解释它这里面

20:14.010 --> 20:15.210
为什么出现这个容器

20:15.210 --> 20:16.570
所以要了解就行了

20:16.570 --> 20:17.770
那么Type promise表示

20:17.770 --> 20:18.250
表示什么意思呢

20:18.250 --> 20:19.530
表示我这个函数呢

20:19.530 --> 20:21.370
反是一个异步函数

20:21.370 --> 20:22.570
我是一个异步函数

20:22.570 --> 20:24.250
它反回来是一个promise

20:24.250 --> 20:25.930
当promise resolve的时候

20:25.930 --> 20:28.170
就表示我这个事件处理完了

20:28.170 --> 20:29.290
主要是告诉webpack

20:29.290 --> 20:30.970
我这个事件有没有处理完

20:30.970 --> 20:32.090
是其这么一个目的

20:32.090 --> 20:34.330
用哪种方式来告诉它

20:34.330 --> 20:35.610
有同步的方式

20:35.610 --> 20:36.410
有异步的方式

20:36.410 --> 20:37.450
这两个都是异步的

20:37.450 --> 20:38.730
后面这两个都是异步的

20:38.730 --> 20:39.610
怎么异步的方式

20:39.610 --> 20:40.330
一个是用毁掉

20:40.330 --> 20:41.770
一个是使用promise

20:41.770 --> 20:43.050
这就叫做事件类型

20:44.570 --> 20:45.530
就勾字还说类型

20:46.970 --> 20:48.090
那么咱们计划课

20:48.090 --> 20:49.050
我们这就用同步

20:49.050 --> 20:50.330
就用同步就得了

20:51.450 --> 20:52.090
那么这里呢

20:52.090 --> 20:52.810
我们来看

20:52.810 --> 20:54.010
后面跟name是啥呢

20:54.010 --> 20:55.370
这个name无所谓

20:55.370 --> 20:57.690
这个主要是用来调试的

20:57.690 --> 20:59.610
我们也不会去深入的开发插件

20:59.610 --> 21:00.570
所以对我们来说无所谓

21:00.570 --> 21:01.210
这个随便填

21:01.210 --> 21:01.850
一个字无算

21:01.850 --> 21:02.170
随便填

21:02.170 --> 21:03.370
我们通常就填

21:03.370 --> 21:04.650
我们插件的名称

21:04.650 --> 21:05.370
随便填

21:05.370 --> 21:06.730
这个都无所谓的

21:06.730 --> 21:07.290
随便填

21:07.290 --> 21:08.730
或者说我们再加一个

21:08.810 --> 21:09.770
我们注册的

21:09.770 --> 21:10.810
监听的上时间

21:10.810 --> 21:11.610
这个随便

21:11.610 --> 21:12.250
这个无所谓的

21:13.370 --> 21:15.050
那么后边的函数就很重要了

21:15.050 --> 21:16.010
就是事件处理函数

21:17.210 --> 21:17.530
好

21:17.530 --> 21:19.290
现在我们就注册好一个事件了

21:19.290 --> 21:20.170
表示说什么呢

21:20.170 --> 21:22.570
表示说当你在编译的过程中

21:23.290 --> 21:25.930
如果编整个过程全部完成了

21:25.930 --> 21:27.290
你看这个当是什么

21:27.290 --> 21:29.210
整个completion编译完成了

21:30.250 --> 21:31.850
全部完成了过后了

21:31.850 --> 21:33.370
那么它会运行这个函数

21:34.170 --> 21:34.810
这个函数里边

21:34.810 --> 21:35.610
它会给你一个参数

21:35.610 --> 21:36.810
就是completion

21:36.810 --> 21:37.610
就是这个编译

21:37.610 --> 21:38.170
就是这个对象

21:39.690 --> 21:41.210
拿到这个对象有什么用

21:41.210 --> 21:42.890
我们目前的也不用生纠

21:42.890 --> 21:43.930
就是completion对象

21:43.930 --> 21:45.770
那么我们目前的就在这里输出一句话

21:47.770 --> 21:48.570
编译完成

21:49.690 --> 21:50.410
编译完成

21:51.370 --> 21:52.330
保存

21:52.330 --> 21:53.450
咱们来看一下吧

21:53.450 --> 21:54.730
我们再来重启

21:54.730 --> 21:55.210
那么现在

21:55.210 --> 21:57.450
现在我们能不能应用这个新的代码

21:57.450 --> 21:58.490
新的插件

21:58.490 --> 21:58.890
不行

21:58.890 --> 22:00.810
因为这个Apply方法已经运行过了

22:00.810 --> 22:01.130
对吧

22:01.130 --> 22:01.930
已经运行过了

22:01.930 --> 22:02.970
我们必须要停止

22:04.330 --> 22:04.890
停止

22:04.890 --> 22:05.930
然后来再重新运行

22:07.610 --> 22:08.250
你看

22:08.410 --> 22:09.530
这里是不是告诉你

22:09.530 --> 22:10.330
编译完成了

22:10.330 --> 22:11.050
对吧

22:11.050 --> 22:12.490
那么它就会触发这个事件

22:12.490 --> 22:12.650
好

22:12.650 --> 22:13.610
那么现在我们改动

22:13.610 --> 22:14.410
改动我们的代码

22:14.410 --> 22:15.130
改动应那个时候

22:15.130 --> 22:15.850
然后重新编译

22:15.850 --> 22:17.450
你看重新编译会不会运行这个事件

22:18.170 --> 22:18.570
保存

22:19.850 --> 22:21.210
你看是不是还是会运行

22:21.210 --> 22:21.690
对吧

22:21.690 --> 22:22.490
下面

22:22.490 --> 22:23.290
是不是还是会运行

22:24.250 --> 22:25.690
就这么一个意思

22:25.690 --> 22:26.810
就这么个意思

22:26.810 --> 22:28.090
那么也就是说

22:28.090 --> 22:29.690
我们一般如果说

22:29.690 --> 22:30.890
当然不太可能

22:30.890 --> 22:33.130
如果说以后要写插件的话

22:33.130 --> 22:34.570
那么我们就要关注的是什么呢

22:34.570 --> 22:35.770
我们就要关注

22:35.770 --> 22:37.530
我要去监听什么样的时间

22:37.610 --> 22:38.010
看什么

22:38.010 --> 22:38.570
看文道

22:38.570 --> 22:39.050
对吧

22:39.690 --> 22:40.410
那么这些东西

22:40.410 --> 22:41.290
不管它有些

22:41.290 --> 22:41.770
写的有多少

22:41.770 --> 22:42.890
反正就是一些事件

22:42.890 --> 22:43.930
一些事件

22:43.930 --> 22:45.850
我们无非就是要监听这些事件

22:46.730 --> 22:47.290
然后呢

22:48.090 --> 22:48.650
去干嘛呢

22:49.450 --> 22:50.650
去做一些处理

22:50.650 --> 22:51.050
对吧

22:51.050 --> 22:52.170
那么处理是异步的

22:52.170 --> 22:54.330
那么这里就使用异步的方式

22:54.330 --> 22:55.530
如果处理是同步的

22:55.530 --> 22:56.570
那就使用同步的方式

22:56.570 --> 22:57.210
就这么简单

22:59.450 --> 23:00.090
那么下面

23:00.090 --> 23:00.650
有些东西说

23:00.650 --> 23:01.370
那不对呀

23:01.370 --> 23:03.450
你这里扛牌了注册的事件

23:04.090 --> 23:05.130
我相信很多同学

23:05.130 --> 23:06.250
还想不到这些问题

23:06.250 --> 23:06.890
不过没关系

23:06.970 --> 23:08.170
我再说一说就行了

23:08.170 --> 23:09.290
这些东西了解就行了

23:09.290 --> 23:10.170
你只要知道

23:10.170 --> 23:12.010
Plocking它是来监听事件的

23:12.410 --> 23:13.290
在不同的事件

23:13.290 --> 23:14.970
就做一些不同的事情就够了

23:15.450 --> 23:16.330
那比方说

23:16.970 --> 23:17.850
那以后来说

23:17.850 --> 23:19.290
那这个康牌的一线

23:19.290 --> 23:20.250
还不是有些狗子吗

23:20.650 --> 23:21.690
它不是有些狗子吗

23:22.250 --> 23:23.130
那你看你这里

23:23.130 --> 23:24.570
只注册了康牌了的狗子

23:24.570 --> 23:25.450
我怎么样去注册

23:25.450 --> 23:26.490
康牌的一线的狗子呢

23:26.890 --> 23:27.930
那可以这样子

23:27.930 --> 23:28.810
你看康牌

23:28.810 --> 23:29.930
康牌了一开始

23:32.250 --> 23:33.130
它有个乱事件

23:34.090 --> 23:34.650
我看一下

23:35.370 --> 23:37.210
before wrong

23:38.730 --> 23:39.610
这个wrong是什么呢

23:40.170 --> 23:40.810
wrong就是

23:40.810 --> 23:42.490
在它开始编译的时候

23:43.290 --> 23:44.090
执行wrong方法

23:44.090 --> 23:45.370
wrong方法就是开始编译

23:45.370 --> 23:46.810
在它开始编译之前

23:46.810 --> 23:48.330
我添加一个狗子函数

23:48.330 --> 23:49.050
那么不要说

23:49.050 --> 23:52.170
我们去注册wrong这个事件

23:52.170 --> 23:52.650
before wrong

23:53.210 --> 23:54.650
before wrong

23:55.610 --> 23:56.570
before wrong这个事件

23:57.530 --> 23:58.410
然后在这里面

23:58.410 --> 23:59.850
不是可以得到compilation吗

23:59.850 --> 24:00.570
在这编译之前

24:01.130 --> 24:02.250
我干嘛呢

24:02.250 --> 24:03.530
我给你compilation

24:03.610 --> 24:04.730
因为在这里面

24:04.730 --> 24:06.730
后可是去注册事件

24:06.730 --> 24:08.170
注册了康牌的一线的事件

24:09.050 --> 24:10.170
那是什么

24:10.170 --> 24:11.130
那么处理起来

24:11.130 --> 24:12.890
那你就必须要把它整个了

24:12.890 --> 24:13.690
具体的

24:13.690 --> 24:15.290
细节的它的生

24:15.290 --> 24:17.610
流程就必须要非常非常熟悉了

24:17.610 --> 24:20.410
不过我们没有必要去了解的

24:20.410 --> 24:21.290
那么的生

24:21.290 --> 24:22.090
我们测诫课

24:22.090 --> 24:23.050
就是一个目的

24:23.050 --> 24:24.170
就是搞清楚

24:24.170 --> 24:25.050
plugging

24:25.050 --> 24:26.170
它在干嘛

24:26.170 --> 24:26.890
它在干嘛呢

24:26.890 --> 24:27.370
它就在

24:29.610 --> 24:32.970
它就在监听各个时期的事件

24:33.050 --> 24:33.530
怎么监听

24:33.530 --> 24:35.210
就通过这种方式来监听

24:35.210 --> 24:36.490
那么监听过后干嘛

24:36.490 --> 24:38.010
那就取决于你这个插件

24:38.010 --> 24:39.130
具体要去做什么事

24:40.410 --> 24:40.730
ok

24:40.730 --> 24:41.930
那么这里可我们讲到这里

24:41.930 --> 24:42.490
下一课呢

24:42.490 --> 24:43.690
我们使用一个plugging

24:43.690 --> 24:44.810
来做一个练习

24:45.450 --> 24:46.810
来帮助大家呢

24:46.810 --> 24:48.250
更加更加的

24:49.770 --> 24:51.050
清楚的认识到plugging

24:51.050 --> 24:52.250
这个核心的这个点

24:52.810 --> 24:53.050
ok

24:53.050 --> 24:53.930
这是关于插件

