WEBVTT

00:00.240 --> 00:05.740
现在是凌晨5点

00:05.740 --> 00:08.240
压通了不行

00:08.240 --> 00:10.240
所以说也睡不着觉了啊

00:10.240 --> 00:11.240
随便没啥事

00:11.240 --> 00:13.240
给大家录一段啊

00:13.240 --> 00:17.240
咱们这门课呢就是一门新的课程了啊

00:17.240 --> 00:19.240
叫做webpack

00:19.240 --> 00:22.240
其实说是讲webpack啊

00:22.240 --> 00:26.240
实际上我们讲的是前端工程化过程中

00:26.240 --> 00:29.240
用到的一个工具叫做构建工具

00:30.240 --> 00:32.240
因此呢我们这门课呢

00:32.240 --> 00:34.240
虽然说重点是讲webpack

00:34.240 --> 00:37.240
但是呢我们也会涉及到一些

00:37.240 --> 00:39.240
其他的构建工具

00:39.240 --> 00:41.240
好咱们慢慢来啊

00:41.240 --> 00:43.240
这节课呢我们首先呢

00:43.240 --> 00:45.240
对课程呢做一个介绍

00:45.240 --> 00:47.240
通过一个问题呢

00:47.240 --> 00:50.240
引出我们构建工具的概念

00:50.240 --> 00:52.240
首先呢我们来讲一讲

00:52.240 --> 00:54.240
关于咱们这个课程

00:54.240 --> 00:56.240
课程简介

00:56.240 --> 00:58.240
如果说你要学习这门课的话

00:59.240 --> 01:01.240
你得有一些前置知识

01:01.240 --> 01:03.240
比方说你要学习s6

01:03.240 --> 01:04.240
五块化

01:04.240 --> 01:05.240
保管令器呢

01:05.240 --> 01:07.240
当然保管令器里边你就必须要学习get

01:07.240 --> 01:10.240
就这些前置知识呢你是必须要有的

01:10.240 --> 01:13.240
不然的话这节课呢你学习呢会有一些困难

01:14.240 --> 01:16.240
咱们这个课啊

01:16.240 --> 01:18.240
特别特别重要

01:18.240 --> 01:19.240
就是webpack这个课

01:19.240 --> 01:21.240
它可以说是

01:21.240 --> 01:24.240
彻底的改变了你的开发方式

01:24.240 --> 01:26.240
你过去怎么开发的

01:26.240 --> 01:28.240
你过去建一个页面

01:28.240 --> 01:30.240
然后在页面上去引用一些ges

01:30.240 --> 01:32.240
ges里边去写在嘛

01:32.240 --> 01:34.240
过去是这样开发的

01:34.240 --> 01:36.240
那么这门课学习的过后呢

01:36.240 --> 01:39.240
你的开发方式呢会发生翻天覆辑的变化

01:39.240 --> 01:42.240
如果说你没有这一门课的知识

01:42.240 --> 01:44.240
你去看后面的什么view啊

01:44.240 --> 01:46.240
react的时候呢

01:46.240 --> 01:49.240
你就会出现一个代差

01:49.240 --> 01:51.240
就是出现了一个断层

01:51.240 --> 01:54.240
你会不知道这些东西为什么突然变成这样子

01:54.240 --> 01:58.240
所以说这门课呢大家一定要认真地学习

01:58.240 --> 02:02.240
那么这门课呢我们怎么去讲呢

02:02.240 --> 02:04.240
说实话啊

02:04.240 --> 02:08.240
这门课我当时我规划了起码有

02:08.240 --> 02:10.240
将近一周的时间

02:10.240 --> 02:14.240
这门课发现了这门课是真不好讲

02:14.240 --> 02:16.240
而且呢我也参照了啊

02:16.240 --> 02:19.240
很多的一些资料

02:19.240 --> 02:22.240
发现目前呢我没有看到一个

02:23.240 --> 02:26.240
很好的一个解决办法

02:26.240 --> 02:30.240
为什么呢因为这门课他涉及到问题很多

02:30.240 --> 02:32.240
你要讲深的话深得不得了

02:32.240 --> 02:35.240
深到什么程度呢

02:35.240 --> 02:37.240
深到可以把这门课呢

02:37.240 --> 02:39.240
当成一个职业了

02:39.240 --> 02:41.240
到这种程度了

02:41.240 --> 02:43.240
就是我可能要讲几个月

02:43.240 --> 02:45.240
甚至半年我才能把这个课

02:45.240 --> 02:46.240
所有东西

02:46.240 --> 02:48.240
如果他说讲所有的深度的话

02:48.240 --> 02:50.240
才能把这个课的所有东西讲完

02:50.240 --> 02:52.240
到这种程度

02:52.240 --> 02:55.240
而且呢他如果说你要讲广度的话

02:55.240 --> 02:59.240
他涉及到了歪为知识非常非常多

02:59.240 --> 03:01.240
所以说这个课怎么去讲

03:01.240 --> 03:04.240
就需要去找一个平衡

03:04.240 --> 03:07.240
那么我们这一次呢讲这个课呢

03:07.240 --> 03:10.240
我们我是找了一个合适的深度

03:10.240 --> 03:13.240
就他不会太浅不会太过于表面

03:13.240 --> 03:14.240
他有一定的深度

03:14.240 --> 03:17.240
但是呢有不会太深啊

03:17.240 --> 03:19.240
让大家能够听得懂

03:19.240 --> 03:22.240
因为我们WebPyC这个知识呢

03:22.240 --> 03:24.240
它使用层面

03:24.240 --> 03:25.240
就是你只会

03:25.240 --> 03:27.240
如果说你只会用的话

03:27.240 --> 03:28.240
它其实很简单

03:28.240 --> 03:30.240
没有那么复杂

03:30.240 --> 03:32.240
但是如果说你要把它彻底的理解

03:32.240 --> 03:34.240
设定到代码层面

03:34.240 --> 03:35.240
原理层面的话

03:35.240 --> 03:37.240
那是极其复杂的

03:37.240 --> 03:40.240
复杂度直接突破天际了

03:40.240 --> 03:41.240
那么有些东西呢

03:41.240 --> 03:43.240
我就没有办法讲

03:43.240 --> 03:45.240
所以说我打算的这个课呢

03:45.240 --> 03:48.240
可能一次还结束不了

03:48.240 --> 03:50.240
我们这是不是第一阶段吗

03:50.240 --> 03:52.240
第一段呢我们讲的这个WebPyC

03:52.240 --> 03:54.240
可能呢将来

03:54.240 --> 03:56.240
我在第二阶段的话

03:56.240 --> 03:58.240
还要加一次WebPyC

03:58.240 --> 03:59.240
做一次进阶

03:59.240 --> 04:01.240
但是呢我告诉大家

04:01.240 --> 04:02.240
不用担心

04:02.240 --> 04:04.240
因为我们第一阶段讲的WebPyC

04:04.240 --> 04:07.240
已经完全百分之百的足够

04:07.240 --> 04:10.240
让你进入任何一家公司了

04:10.240 --> 04:12.240
它的深度已经足够了

04:12.240 --> 04:14.240
就是说你可能以后呢

04:14.240 --> 04:15.240
工作了两年

04:15.240 --> 04:17.240
觉得我还需要在WebPyC上面

04:17.240 --> 04:20.240
再进一步深造

04:20.240 --> 04:22.240
那么请看第二阶段的

04:22.240 --> 04:23.240
WebPyC课程

04:23.240 --> 04:24.240
虽然我现在还没有录

04:24.240 --> 04:26.240
将来我会录的

04:26.240 --> 04:27.240
这是第一个

04:27.240 --> 04:28.240
深度

04:28.240 --> 04:30.240
我讲一个合适的深度就行了

04:30.240 --> 04:33.240
另外一个广度

04:33.240 --> 04:35.240
就是它涉及到的知识呢

04:35.240 --> 04:37.240
特别多

04:37.240 --> 04:38.240
WebPyC本身呢

04:38.240 --> 04:40.240
它的知识并不多

04:40.240 --> 04:42.240
它就是有一定深度

04:42.240 --> 04:44.240
但是它有一个生态圈

04:44.240 --> 04:45.240
就好像什么呢

04:45.240 --> 04:47.240
就好像你们玩的那个苹果手机

04:47.240 --> 04:49.240
你们买一个苹果手机

04:49.240 --> 04:51.240
买的不是苹果手机本身

04:51.240 --> 04:53.240
而是买的苹果手机

04:53.240 --> 04:54.240
它的内部的应用

04:54.240 --> 04:55.240
对吧

04:55.240 --> 04:57.240
因为苹果上有很多优秀的应用

04:57.240 --> 04:58.240
那么这些应用的

04:58.240 --> 04:59.240
跟苹果手机本身呢

04:59.240 --> 05:01.240
就形成了一个生态圈

05:01.240 --> 05:03.240
WebPyC也是这样子

05:03.240 --> 05:04.240
WebPyC本身呢

05:04.240 --> 05:06.240
其实东西并不多

05:06.240 --> 05:07.240
但是以WebPyC造成的

05:07.240 --> 05:09.240
一些第三方的

05:09.240 --> 05:10.240
一些内容

05:10.240 --> 05:11.240
一些第三方库

05:11.240 --> 05:13.240
它可以融入到WebPyC

05:13.240 --> 05:14.240
那么这些东西呢

05:14.240 --> 05:15.240
就是它的生态

05:15.240 --> 05:16.240
这些生态呢

05:16.240 --> 05:18.240
WebPyC是非常非常繁荣的

05:18.240 --> 05:19.240
也就是说

05:19.240 --> 05:21.240
我们学习WebPyC的时候呢

05:21.240 --> 05:22.240
会发现

05:22.240 --> 05:24.240
除了学WebPyC本身之外呢

05:24.240 --> 05:26.240
还要学WebPyC的生态

05:26.240 --> 05:28.240
那生态里面多到什么程度呢

05:28.240 --> 05:30.240
多到先进

05:30.240 --> 05:32.240
已经是有海量的第三方库

05:32.240 --> 05:34.240
可以融入到WebPyC了

05:34.240 --> 05:35.240
那么这些库里边

05:35.240 --> 05:36.240
每一个库

05:36.240 --> 05:38.240
它都有众多的API

05:38.240 --> 05:40.240
内容非常非常多

05:40.240 --> 05:42.240
那么这个东西又怎么办呢

05:42.240 --> 05:43.240
所以说我这里呢

05:43.240 --> 05:44.240
简单说

05:44.240 --> 05:46.240
我选择了一个合适的光度

05:46.240 --> 05:48.240
讲的呢都是我们平常

05:48.240 --> 05:50.240
平常经常会用到的

05:50.240 --> 05:51.240
一些第三方库

05:51.240 --> 05:53.240
而且是这些在第三方库里边

05:53.240 --> 05:56.240
平常会经常用到的一些API

05:56.240 --> 05:58.240
不会讲得过于的多

05:58.240 --> 05:59.240
过多了的话

05:59.240 --> 06:01.240
那么就又变成

06:01.240 --> 06:02.240
字典了

06:02.240 --> 06:03.240
我一个一个给你讲

06:03.240 --> 06:04.240
一个个给你讲

06:04.240 --> 06:06.240
那又没什么意义了

06:06.240 --> 06:07.240
那么在讲的过程中呢

06:07.240 --> 06:08.240
我会教给大家

06:08.240 --> 06:10.240
如何去查阅文档

06:10.240 --> 06:11.240
如果说你真的

06:11.240 --> 06:13.240
遇到了一些特殊

06:13.240 --> 06:15.240
特别特殊的一些需求

06:15.240 --> 06:16.240
那么需要用一些

06:16.240 --> 06:17.240
用一些特别的API

06:17.240 --> 06:20.240
那么可以通过文档的去查询

06:20.240 --> 06:22.240
所以说我们这门客呢

06:22.240 --> 06:24.240
要做一个趋势

06:24.240 --> 06:26.240
没有办法全部讲完

06:26.240 --> 06:29.240
这是做不到的

06:29.240 --> 06:31.240
OK 这是关于这个课程

06:31.240 --> 06:33.240
我会怎么去讲

06:33.240 --> 06:35.240
然后呢这一节课呢

06:35.240 --> 06:36.240
我们重点是

06:36.240 --> 06:37.240
要告诉大家

06:37.240 --> 06:38.240
什么是WebPyC

06:38.240 --> 06:40.240
它要解决什么样的问题

06:40.240 --> 06:42.240
只要能够理解这一点的话

06:42.240 --> 06:44.240
我们要从一个问题出发

06:44.240 --> 06:45.240
这又回到

06:45.240 --> 06:47.240
我们之前的一个老问题了

06:47.240 --> 06:48.240
就这样磨坏话的时候

06:48.240 --> 06:49.240
有一个老问题

06:49.240 --> 06:51.240
就是浏览器端

06:51.240 --> 06:53.240
到底怎么磨坏话

06:53.240 --> 06:55.240
怎么去磨坏话呢

06:55.240 --> 06:58.240
我们有些同学说

06:58.240 --> 06:59.240
浏览器端不是已经

06:59.240 --> 07:00.240
支持磨坏话了吗

07:00.240 --> 07:02.240
不是支持ES6了吗

07:02.240 --> 07:04.240
怎么这个问题又跑出来了

07:04.240 --> 07:05.240
好 来吧

07:05.240 --> 07:07.240
我们来看一下

07:07.240 --> 07:09.240
浏览器端支持的ES6

07:09.240 --> 07:11.240
会有什么样的问题

07:11.240 --> 07:12.240
比方说我们这里写个

07:12.240 --> 07:14.240
index.atme

07:14.240 --> 07:16.240
大家理解一下

07:16.240 --> 07:18.240
我现在呢

07:18.240 --> 07:20.240
刚刚起床

07:20.240 --> 07:22.240
凌晨5点过

07:22.240 --> 07:25.240
可能声音也不会那么激进

07:25.240 --> 07:27.240
大家理解一下

07:27.240 --> 07:28.240
这里呢

07:28.240 --> 07:30.240
我们这里建一个文件夹

07:30.240 --> 07:31.240
比方说

07:31.240 --> 07:32.240
Majus

07:32.240 --> 07:33.240
或者是script

07:33.240 --> 07:34.240
无所谓

07:34.240 --> 07:36.240
文件夹的名字无所谓

07:36.240 --> 07:38.240
我们在这里边写上一些模块

07:38.240 --> 07:40.240
index.js

07:40.240 --> 07:43.240
这是输出

07:43.240 --> 07:45.240
index.mode

07:45.240 --> 07:47.240
然后我们这里去引用

07:47.240 --> 07:48.240
当然用的方式呢

07:48.240 --> 07:49.240
是用什么

07:49.240 --> 07:50.240
用import

07:50.240 --> 07:51.240
ES6

07:51.240 --> 07:53.240
ES6模块的话

07:53.240 --> 07:54.240
导入什么呢

07:54.240 --> 07:56.240
导入另外一个模块

07:56.240 --> 07:58.240
ad.js

07:58.240 --> 07:59.240
这输出

07:59.240 --> 08:00.240
A

08:00.240 --> 08:01.240
这里导出

08:01.240 --> 08:02.240
export

08:02.240 --> 08:05.240
default

08:05.240 --> 08:07.240
就导出一个A

08:07.240 --> 08:08.240
那么这里呢

08:08.240 --> 08:09.240
我们

08:09.240 --> 08:10.240
import

08:11.240 --> 08:12.240
A

08:12.240 --> 08:13.240
default

08:13.240 --> 08:14.240
ad.js

08:14.240 --> 08:15.240
没问题吧

08:15.240 --> 08:16.240
OK

08:16.240 --> 08:17.240
然后呢

08:17.240 --> 08:18.240
A那边呢

08:18.240 --> 08:20.240
又去引用了B

08:20.240 --> 08:21.240
那模块画嘛

08:21.240 --> 08:22.240
肯定会有这种

08:22.240 --> 08:24.240
比较深的一代关系

08:24.240 --> 08:25.240
这里呢

08:25.240 --> 08:26.240
我们输出

08:26.240 --> 08:27.240
B

08:27.240 --> 08:28.240
然后呢

08:28.240 --> 08:29.240
这里

08:29.240 --> 08:30.240
export

08:30.240 --> 08:31.240
用ES6的方式

08:31.240 --> 08:33.240
来导出一个B模块

08:33.240 --> 08:35.240
B模块那种导出

08:35.240 --> 08:36.240
OK

08:36.240 --> 08:37.240
那么现在呢

08:37.240 --> 08:38.240
ad.js呢

08:38.240 --> 08:39.240
又去引用B

08:39.240 --> 08:40.240
这些说了

08:40.240 --> 08:43.240
ad.export

08:43.240 --> 08:45.240
导入B

08:45.240 --> 08:46.240
import

08:46.240 --> 08:47.240
B

08:47.240 --> 08:48.240
flaw

08:48.240 --> 08:49.240
叫B.js

08:49.240 --> 08:50.240
这些都是以前

08:50.240 --> 08:51.240
我们学过的知识

08:51.240 --> 08:52.240
没问题吧

08:52.240 --> 08:53.240
OK

08:53.240 --> 08:55.240
我们在页面上呢

08:55.240 --> 08:56.240
现在去做这么一件事

08:56.240 --> 08:58.240
去引用

08:58.240 --> 08:59.240
modules

08:59.240 --> 09:01.240
index.js

09:01.240 --> 09:02.240
去引用这个模块

09:02.240 --> 09:03.240
当然呢

09:03.240 --> 09:04.240
我们

09:04.240 --> 09:06.240
调整一下type

09:06.240 --> 09:08.240
module

09:08.240 --> 09:09.240
OK

09:09.240 --> 09:10.240
那么就不就是

09:10.240 --> 09:11.240
用了模块画吗

09:11.240 --> 09:12.240
为什么说

09:12.240 --> 09:13.240
浏览器模块画

09:13.240 --> 09:14.240
还会存在问题呢

09:14.240 --> 09:15.240
这不是已经可以了吗

09:15.240 --> 09:16.240
来吧

09:16.240 --> 09:18.240
我们打开浏览器

09:18.240 --> 09:19.240
你会看到一个

09:19.240 --> 09:21.240
不太愿意看到的现象

09:21.240 --> 09:22.240
什么现象呢

09:22.240 --> 09:23.240
你会发现

09:23.240 --> 09:24.240
一切正常啊

09:24.240 --> 09:25.240
你看

09:25.240 --> 09:26.240
输出了B

09:26.240 --> 09:27.240
对吧

09:27.240 --> 09:28.240
一代关系导入了

09:28.240 --> 09:29.240
输出了A

09:29.240 --> 09:30.240
输出了A那个时候

09:30.240 --> 09:31.240
一切正常

09:31.240 --> 09:32.240
怎么会说出问题呢

09:32.240 --> 09:33.240
你看呢

09:33.240 --> 09:35.240
我们来看一下这个network

09:35.240 --> 09:38.240
网络通信

09:38.240 --> 09:41.620
这里我们刷新一次

09:41.620 --> 09:42.620
你会发现

09:42.620 --> 09:44.620
我们在网络上

09:44.620 --> 09:46.620
你们都学了网络通信了对吧

09:46.620 --> 09:47.620
那么网络上

09:47.620 --> 09:49.620
那么这些界也是文件啊

09:49.620 --> 09:51.620
就这些界也是文件

09:51.620 --> 09:53.620
最终是部署到服务器的

09:53.620 --> 09:54.620
是放到服务器上面

09:54.620 --> 09:55.620
那么我这里呢

09:55.620 --> 09:57.620
是用那个level server

09:57.620 --> 09:58.620
它是在内部

09:58.620 --> 09:59.620
打了一个服务器

09:59.620 --> 10:00.620
那么实际上

10:00.620 --> 10:01.620
我们请求的

10:01.620 --> 10:02.620
通过这个地址

10:02.620 --> 10:03.620
请求的是谁

10:03.620 --> 10:05.620
请求的是network server

10:05.620 --> 10:06.620
network server

10:06.620 --> 10:07.620
我们会请求的这个页面

10:07.620 --> 10:08.620
这个页面中是不是

10:08.620 --> 10:09.620
夹在了这个模块

10:09.620 --> 10:10.620
因此呢

10:10.620 --> 10:11.620
network server

10:11.620 --> 10:12.620
我们又会去请求

10:12.620 --> 10:13.620
服务器上的

10:13.620 --> 10:14.620
这个in这个世界

10:14.620 --> 10:15.620
界也是文件

10:15.620 --> 10:16.620
in这个世界

10:16.620 --> 10:17.620
界也是文件

10:17.620 --> 10:18.620
内容拿到之后呢

10:18.620 --> 10:19.620
浏览器分析

10:19.620 --> 10:20.620
发现

10:20.620 --> 10:21.620
这里不是有一代关系吗

10:21.620 --> 10:22.620
它依赖A

10:22.620 --> 10:23.620
然后呢

10:23.620 --> 10:24.620
又把A去请求过来

10:24.620 --> 10:25.620
又发现有依赖B

10:25.620 --> 10:27.620
又把地址请求过来

10:27.620 --> 10:28.620
因此呢

10:28.620 --> 10:29.620
浏览器最终呢

10:29.620 --> 10:31.620
发出了多少个界也是请求呢

10:31.620 --> 10:32.620
除了这些东西

10:32.620 --> 10:33.620
这些东西是

10:33.620 --> 10:34.620
这些东西是

10:34.620 --> 10:35.620
那个network server

10:35.620 --> 10:36.620
插件给我们加入的

10:36.620 --> 10:37.620
不用去管它

10:37.620 --> 10:38.620
那么你会发现

10:38.620 --> 10:39.620
请求了三个界也是

10:39.620 --> 10:40.620
in这个世界

10:40.620 --> 10:42.620
A B

10:42.620 --> 10:43.620
是不是请求了

10:43.620 --> 10:44.620
这三个界也是

10:44.620 --> 10:45.620
那么这样子

10:45.620 --> 10:46.620
请求数量

10:46.620 --> 10:47.620
对界也是的

10:47.620 --> 10:48.620
请求数量有多少

10:48.620 --> 10:49.620
有多少

10:49.620 --> 10:50.620
是不是有三个

10:50.620 --> 10:52.620
这三个不会有问题

10:52.620 --> 10:53.620
三个有啥问题呢

10:53.620 --> 10:55.620
请求三个不挺

10:55.620 --> 10:56.620
挺正常的吧

10:56.620 --> 10:57.620
但是呢

10:57.620 --> 10:58.620
大家想一想

10:58.620 --> 11:00.620
一旦我们工程

11:00.620 --> 11:02.620
规模变得大了

11:02.620 --> 11:03.620
你的模块

11:03.620 --> 11:04.620
还直至

11:04.620 --> 11:06.620
仅仅是三个界是吗

11:06.620 --> 11:07.620
你的模块

11:07.620 --> 11:09.620
会有多少个界也是文件呢

11:09.620 --> 11:11.620
我告诉大家

11:11.620 --> 11:12.620
没有几百个

11:12.620 --> 11:13.620
上千个界也是文件

11:13.620 --> 11:14.620
跑得跑得掉

11:14.620 --> 11:16.620
一个大的工程

11:16.620 --> 11:17.620
因为你用了模块的话

11:17.620 --> 11:18.620
就意味着什么

11:18.620 --> 11:19.620
意味着

11:19.620 --> 11:21.620
我要把这些界是文件

11:21.620 --> 11:22.620
把这些模块

11:22.620 --> 11:24.620
尽量的细分

11:24.620 --> 11:26.620
这才是模块化

11:26.620 --> 11:28.620
最终希望看到的

11:28.620 --> 11:30.620
尽量的细分这些模块

11:30.620 --> 11:32.620
有些一个函数

11:32.620 --> 11:33.620
会成为一个模块

11:33.620 --> 11:34.620
甚至呢

11:34.620 --> 11:35.620
一个配置

11:35.620 --> 11:36.620
一个配置

11:36.620 --> 11:37.620
一个对象就会形成一个模块

11:37.620 --> 11:38.620
尽量的细分

11:38.620 --> 11:39.620
为了重用

11:39.620 --> 11:41.620
这是在代码层面

11:41.620 --> 11:43.620
我们希望能够有

11:43.620 --> 11:44.620
高可维护性

11:44.620 --> 11:46.620
高可重用性的

11:46.620 --> 11:47.620
这么一些模块出现

11:47.620 --> 11:48.620
所以说

11:48.620 --> 11:49.620
我们一定要对模块

11:49.620 --> 11:50.620
进行细分

11:50.620 --> 11:52.620
非常非常详细的细分

11:53.620 --> 11:54.620
那么这样子

11:54.620 --> 11:55.620
一来呢

11:55.620 --> 11:56.620
会导致什么结果

11:56.620 --> 11:57.620
你想一想

11:57.620 --> 11:59.620
你请求一个页面

11:59.620 --> 12:00.620
它可能会加在

12:00.620 --> 12:02.620
成千上万个

12:02.620 --> 12:03.620
解释文件

12:03.620 --> 12:06.620
那么这样的请求数量

12:06.620 --> 12:08.620
能接受吗

12:08.620 --> 12:10.620
是完全不能接受

12:10.620 --> 12:11.620
因为大家学过网络通信

12:11.620 --> 12:12.620
每一次请求

12:12.620 --> 12:13.620
是不是有什么

12:13.620 --> 12:14.620
三次握手

12:14.620 --> 12:15.620
对吧

12:15.620 --> 12:16.620
会有一些额外的开销

12:16.620 --> 12:19.620
我们希望在运行的时候呢

12:19.620 --> 12:20.620
它的请求数量

12:20.620 --> 12:21.620
越少越好

12:21.620 --> 12:23.620
不要太多

12:23.620 --> 12:24.620
也太多了过后

12:24.620 --> 12:26.620
会严重的影响效率

12:26.620 --> 12:29.620
一个页面有那么几个

12:29.620 --> 12:30.620
解释引用

12:30.620 --> 12:31.620
就差不多了

12:31.620 --> 12:33.620
也不要太多的解释引用

12:33.620 --> 12:35.620
而模块化的导致

12:35.620 --> 12:37.620
解释文件不断的细分

12:37.620 --> 12:39.620
那么就会导致这个问题

12:39.620 --> 12:41.620
有很多的解释代码

12:41.620 --> 12:42.620
需要从网络上

12:42.620 --> 12:44.620
去请求过来

12:44.620 --> 12:45.620
对吧

12:45.620 --> 12:46.620
而每一个解释文件

12:46.620 --> 12:47.620
其实内容并不多

12:47.620 --> 12:48.620
白板的浪费

12:48.620 --> 12:50.620
就是请求的资源

12:50.620 --> 12:51.620
所以说呢

12:51.620 --> 12:53.620
浏览器的模块化了

12:53.620 --> 12:55.620
还是会存在这些问题

12:56.620 --> 12:58.620
第一个就是效率问题

12:58.620 --> 12:59.620
精细的模块化分

12:59.620 --> 13:00.620
带来了更多的解释文件

13:00.620 --> 13:01.620
而更多的解释文件

13:01.620 --> 13:03.620
带来了更多的请求

13:03.620 --> 13:05.620
降低了页面的范围效率

13:06.620 --> 13:08.620
还有什么问题呢

13:08.620 --> 13:10.620
接种性问题

13:10.620 --> 13:12.620
目前浏览器是不是仅支持

13:12.620 --> 13:14.620
ES6的模块化标准

13:14.620 --> 13:15.620
对吧

13:15.620 --> 13:16.620
你看

13:16.620 --> 13:17.620
我这里能不能用

13:17.620 --> 13:18.620
common.js

13:18.620 --> 13:20.620
不能吧

13:21.620 --> 13:22.620
是不是不能

13:22.620 --> 13:23.620
因为浏览器

13:23.620 --> 13:25.620
浏览器它不支持common.js

13:25.620 --> 13:27.620
它只支持

13:27.620 --> 13:29.620
只支持什么

13:29.620 --> 13:30.620
只支持ES6模块

13:30.620 --> 13:31.620
所以说你这里

13:31.620 --> 13:33.620
不能用common.js

13:33.620 --> 13:34.620
那么这个

13:34.620 --> 13:35.620
当然不能用common.js

13:35.620 --> 13:36.620
不用呗

13:36.620 --> 13:37.620
我凭什么一定要用

13:37.620 --> 13:39.620
凭什么一定要用

13:39.620 --> 13:41.620
那如果说

13:41.620 --> 13:43.620
你用到一些第三方模块

13:43.620 --> 13:44.620
它就是用common.js

13:44.620 --> 13:46.620
写的怎么办

13:46.620 --> 13:47.620
那怎么办

13:47.620 --> 13:49.620
就我是不是完全用不了了

13:49.620 --> 13:51.620
因为有一些模块

13:51.620 --> 13:52.620
它就得用common.js写

13:52.620 --> 13:54.620
为什么呢

13:54.620 --> 13:55.620
因为有些模块

13:55.620 --> 13:56.620
比方说像这个模块

13:56.620 --> 13:58.620
大家学过没有

13:58.620 --> 13:59.620
一个小时应该学过

13:59.620 --> 14:01.620
前面你学的网络通信

14:01.620 --> 14:02.620
应该是学过这个模块

14:02.620 --> 14:03.620
有可能你以后

14:03.620 --> 14:05.620
在5u学5u的时候

14:05.620 --> 14:06.620
才学这个模块

14:06.620 --> 14:07.620
没关系

14:07.620 --> 14:08.620
我就说一下

14:08.620 --> 14:10.620
这个模块是做网络通信的

14:10.620 --> 14:14.620
它可以用于浏览器端

14:14.620 --> 14:16.620
浏览器端可以用这个

14:16.620 --> 14:18.620
可以用这个第三方库

14:18.620 --> 14:20.620
而服务器端就漏的环境

14:20.620 --> 14:21.620
也可以用它

14:21.620 --> 14:23.620
它是支持两个环境的

14:23.620 --> 14:24.620
那么它支持两个环境

14:24.620 --> 14:27.620
它到底用ES6的方式来导出

14:27.620 --> 14:29.620
还是用漏的方式来导出

14:29.620 --> 14:31.620
用ES6

14:31.620 --> 14:33.620
还是用common.js的方式来导出

14:33.620 --> 14:35.620
它用的是common.js

14:35.620 --> 14:38.620
它用的是common.js的方式来导出

14:38.620 --> 14:40.620
那这个怎么办

14:40.620 --> 14:42.620
你在流量器端怎么用它

14:42.620 --> 14:43.620
怎么用它

14:43.620 --> 14:44.620
没法用

14:44.620 --> 14:46.620
所以这一回存在

14:46.620 --> 14:47.620
兼容性问题

14:47.620 --> 14:49.620
那么怎么样让流量器

14:49.620 --> 14:51.620
使用common.js模块

14:51.620 --> 14:52.620
又存在这个问题

14:52.620 --> 14:54.620
这个问题还是没解决

14:54.620 --> 14:55.620
还有什么呢

14:55.620 --> 14:58.620
还有一个最严重的就是工具问题

14:58.620 --> 15:01.620
流量器它是无法支持NPM

15:01.620 --> 15:03.620
下载的第三方库

15:03.620 --> 15:06.620
它没法直接支持

15:06.620 --> 15:07.620
当然你可以想象办法

15:07.620 --> 15:09.620
但是它不能直接支持

15:09.620 --> 15:10.620
什么意思呢

15:10.620 --> 15:11.620
比方说

15:11.620 --> 15:13.620
咱们这个就是个工程

15:13.620 --> 15:14.620
那么这个工程里边

15:14.620 --> 15:16.620
我要用到解夸位

15:16.620 --> 15:17.620
好怎么办

15:17.620 --> 15:19.620
肯定我们

15:19.620 --> 15:21.620
不能像以前那样子

15:21.620 --> 15:23.620
用很多的方式

15:23.620 --> 15:25.620
去下载一个解夸位的文件

15:25.620 --> 15:27.620
我们最希望是怎么做

15:27.620 --> 15:29.620
最希望的是

15:29.620 --> 15:31.620
今后我们这里说一下

15:31.620 --> 15:32.620
打开控制台的话

15:32.620 --> 15:33.620
你可以在这里打开

15:33.620 --> 15:34.620
可以在这里打开

15:34.620 --> 15:35.620
但是这里

15:35.620 --> 15:36.620
因为路径太长了

15:36.620 --> 15:38.620
大家可能不太容易看得清楚

15:38.620 --> 15:40.620
我将来会这样打开

15:41.620 --> 15:42.620
就进这个目录

15:42.620 --> 15:44.620
然后在这里有激动方式

15:44.620 --> 15:46.620
有可能在这里输入CMD

15:47.620 --> 15:49.620
那么就用CMD的方式

15:49.620 --> 15:50.620
来打开这个目录

15:50.620 --> 15:51.620
也可以在

15:51.620 --> 15:52.620
用那个PowerShell

15:52.620 --> 15:55.620
也是Windows新版本里边的

15:55.620 --> 15:57.620
一个控制台工具

15:57.620 --> 15:59.620
也可以用它来打开这个目录

15:59.620 --> 16:00.620
也可以用Git

16:00.620 --> 16:01.620
点击右键

16:01.620 --> 16:03.620
这里用GitBatch here

16:03.620 --> 16:04.620
就看你

16:04.620 --> 16:05.620
其实无所谓

16:05.620 --> 16:06.620
大家选择一个

16:06.620 --> 16:07.620
习惯的

16:07.620 --> 16:08.620
命令行的方式

16:08.620 --> 16:10.620
就是这三种方式

16:10.620 --> 16:11.620
已经在这里

16:11.620 --> 16:12.620
VSCode里边都可以

16:12.620 --> 16:13.620
因为我这里讲课

16:13.620 --> 16:15.620
字体放的比较大

16:15.620 --> 16:16.620
在VSCode里面

16:16.620 --> 16:17.620
可能大家看得了

16:18.620 --> 16:19.620
要翻评

16:19.620 --> 16:20.620
不是很清楚

16:20.620 --> 16:21.620
所以说我这里

16:21.620 --> 16:22.620
刚才用这个Git

16:23.620 --> 16:24.620
这个Git

16:24.620 --> 16:25.620
你可以看到

16:26.620 --> 16:28.620
它就是个多佬体制服

16:28.620 --> 16:29.620
在这里面是一样的

16:29.620 --> 16:30.620
我们在这里

16:30.620 --> 16:32.620
使用NPMInit

16:36.620 --> 16:37.620
不行

16:37.620 --> 16:38.620
为什么不行

16:38.620 --> 16:39.620
它的名字

16:39.620 --> 16:40.620
名字的它不能是这个名字

16:43.620 --> 16:44.620
Chapter1

16:45.620 --> 16:46.620
其他全部摸的

16:48.620 --> 16:49.620
清凭一下

16:50.620 --> 16:52.620
接下来我们用NPM

16:53.620 --> 16:54.620
Install

16:54.620 --> 16:55.620
安装一个

16:55.620 --> 16:56.620
安装一个什么

16:56.620 --> 16:57.620
当然这个命令的话

16:57.620 --> 16:58.620
保管力器

16:58.620 --> 16:59.620
我们学过的

16:59.620 --> 17:00.620
你可以用PNPM

17:00.620 --> 17:01.620
也可以用CNPM

17:01.620 --> 17:02.620
也可以用压

17:02.620 --> 17:03.620
随便你

17:03.620 --> 17:04.620
选择一个你喜欢的

17:04.620 --> 17:05.620
都行

17:05.620 --> 17:06.620
Jquery

17:06.620 --> 17:10.500
安装一个Jquery

17:11.500 --> 17:12.500
来吧

17:13.500 --> 17:14.500
安装好了

17:14.500 --> 17:16.500
咱们到这边来看一下

17:16.500 --> 17:18.500
是不是已经有那个

17:19.500 --> 17:20.500
对不对

17:20.500 --> 17:22.500
牛烂器端支持这个玩意吗

17:22.500 --> 17:24.500
咱们来试一下吧

17:24.500 --> 17:25.500
比方说B里边

17:25.500 --> 17:27.500
它要用到Jquery

17:27.500 --> 17:29.500
那么我们来

17:29.500 --> 17:30.500
B里边要用到Jquery

17:30.500 --> 17:31.500
我们怎么写呢

17:32.500 --> 17:34.500
如果说用ES6模块的话

17:34.500 --> 17:35.500
Import

17:35.500 --> 17:36.500
Dollar

17:36.500 --> 17:37.500
From

17:37.500 --> 17:38.500
Jquery

17:38.500 --> 17:39.500
看行不行呢

17:40.500 --> 17:41.500
看行不行呢

17:42.500 --> 17:43.500
肯定是不行

17:43.500 --> 17:44.500
因为在

17:44.500 --> 17:45.500
服务器端

17:47.500 --> 17:49.500
用Low的接识的时候

17:50.500 --> 17:52.500
我们是不是可以这样做

17:52.500 --> 17:53.500
因为你只要不写这个

17:53.500 --> 17:55.500
底儿鞋杠和底儿鞋杠开头

17:55.500 --> 17:56.500
那么它就会默认

17:56.500 --> 17:58.500
从Low的码就是里面去找

17:58.500 --> 17:59.500
对吧

17:59.500 --> 18:01.500
但是牛烂器端可以吗

18:01.500 --> 18:03.500
我们来看一下

18:03.500 --> 18:04.500
牛烂器端

18:05.500 --> 18:06.500
它告诉你

18:08.940 --> 18:09.940
它说

18:10.940 --> 18:11.940
就是

18:11.940 --> 18:13.940
解析个模块的时候呢

18:13.940 --> 18:15.940
它说它失败了

18:15.940 --> 18:16.940
为什么说失败了呢

18:16.940 --> 18:17.940
它说

18:17.940 --> 18:18.940
因为我们说过

18:18.940 --> 18:19.940
ES6的模块的话里边

18:19.940 --> 18:21.940
它要求你的路径

18:21.940 --> 18:22.940
必须是底儿鞋杠

18:22.940 --> 18:23.940
底儿鞋杠开头

18:23.940 --> 18:25.940
不然它没法识别

18:25.940 --> 18:27.940
它为什么不能像

18:27.940 --> 18:28.940
牛烂器

18:28.940 --> 18:30.940
不能像Low的环境那样子

18:30.940 --> 18:32.940
我只要不写底儿鞋杠

18:32.940 --> 18:33.940
底儿鞋杠

18:33.940 --> 18:35.940
你就从Low的码就是里面去

18:35.940 --> 18:36.940
去找

18:36.940 --> 18:38.940
它为什么不能这样子呢

18:38.940 --> 18:39.940
因为它知道

18:39.940 --> 18:41.940
这个如果说

18:41.940 --> 18:42.940
一旦开了这个头

18:42.940 --> 18:44.940
特别恐怖

18:45.940 --> 18:46.940
为什么呢

18:46.940 --> 18:48.940
你讲几个问题解决不了

18:48.940 --> 18:49.940
因为你这里面的模块

18:49.940 --> 18:50.940
是不是有可能是

18:50.940 --> 18:52.940
common介绍导出的

18:52.940 --> 18:54.940
那我这里怎么办呢

18:54.940 --> 18:55.940
我怎么把common介绍导出的模块

18:55.940 --> 18:57.940
导入到ES6的模块

18:57.940 --> 18:58.940
标准里面来了

18:58.940 --> 18:59.940
那做不到

18:59.940 --> 19:01.940
第二个问题

19:01.940 --> 19:02.940
如果说你导入了

19:02.940 --> 19:04.940
这个Low的码路里面的模块

19:04.940 --> 19:06.940
如果说你导入了这个模块

19:07.940 --> 19:08.940
那么这个模块

19:08.940 --> 19:09.940
有可能依赖其他模块

19:09.940 --> 19:10.940
其他模块

19:10.940 --> 19:11.940
有可能依赖其他模块

19:11.940 --> 19:13.940
就是有大对的依赖关系

19:13.940 --> 19:14.940
那我瀏覽器是不是

19:14.940 --> 19:16.940
夹载的介绍文件太多了

19:16.940 --> 19:17.940
是不是只想我就是

19:17.940 --> 19:19.940
我们说过的这几个问题

19:19.940 --> 19:21.940
因此瀏覽器它不允许你这么干

19:21.940 --> 19:23.940
那我们能不能强行这么干的

19:23.940 --> 19:24.940
可以的

19:25.940 --> 19:26.940
怎么强行这么干

19:26.940 --> 19:27.940
我们可以这样子

19:27.940 --> 19:29.940
你不是要相对目楼吗

19:29.940 --> 19:30.940
来 返回上级目楼

19:30.940 --> 19:32.940
no the modules

19:32.940 --> 19:33.940
介query

19:33.940 --> 19:34.940
导入什么呢

19:34.940 --> 19:35.940
我看一下

19:35.940 --> 19:36.940
它的它的

19:36.940 --> 19:37.940
拍给你点节省

19:37.940 --> 19:38.940
它的Mate在哪里

19:38.940 --> 19:39.940
Mate

19:40.940 --> 19:42.940
Mate在Dist的介query.js

19:42.940 --> 19:44.940
OK 那我们这里就

19:45.940 --> 19:46.940
介query

19:46.940 --> 19:47.940
Dist

19:49.940 --> 19:51.940
介query.js

19:51.940 --> 19:52.940
那我行

19:52.940 --> 19:53.940
我们这样子

19:53.940 --> 19:54.940
麻烦一点吗

19:54.940 --> 19:56.940
麻烦是麻烦了一点

19:56.940 --> 19:58.940
我们这边手动就去导入它

19:58.940 --> 19:59.940
行不行

19:59.940 --> 20:00.940
手动导入

20:00.940 --> 20:01.940
放心

20:03.940 --> 20:04.940
它说

20:04.940 --> 20:05.940
不行 为什么呢

20:05.940 --> 20:07.940
因为这个介query这个模块

20:07.940 --> 20:09.940
它导出的方式

20:09.940 --> 20:13.580
不是用export

20:13.580 --> 20:15.580
至少它没有默认导出

20:15.580 --> 20:16.580
它没有用export

20:16.580 --> 20:17.580
default默认导出

20:17.580 --> 20:19.580
它是怎么导出的呢

20:19.580 --> 20:20.580
对不起

20:20.580 --> 20:22.580
它是用common介石导出的

20:22.580 --> 20:23.580
你看一下

20:29.540 --> 20:31.540
介query是不是用common介石导出的

20:31.540 --> 20:32.540
这就很奇怪了

20:32.540 --> 20:33.540
介query不是一个

20:33.540 --> 20:35.540
用在浏览器端的东西吗

20:35.540 --> 20:37.540
它为什么要用common介石导出的

20:38.540 --> 20:39.540
不着急

20:39.540 --> 20:40.540
一会你就知道了

20:41.540 --> 20:43.540
那么这里就导致了

20:43.540 --> 20:45.540
很难去应用一些

20:45.540 --> 20:46.540
第三方模块

20:47.540 --> 20:48.540
为什么呢

20:48.540 --> 20:49.540
因为第三方模块

20:49.540 --> 20:50.540
你不知道

20:50.540 --> 20:51.540
还有什么样的模块化标准

20:51.540 --> 20:54.540
就算它用ex6的方式来导出的

20:54.540 --> 20:56.540
那么也会

20:56.540 --> 20:57.540
通过这种方式

20:57.540 --> 20:58.540
就算能够导入

20:58.540 --> 21:00.540
那么也会造成

21:00.540 --> 21:02.540
有很多的介石文件会被加在

21:02.540 --> 21:03.540
因为大家都知道

21:03.540 --> 21:05.540
你安装了一个第三方模块

21:05.540 --> 21:06.540
它会有很多的依赖

21:06.540 --> 21:07.540
介query

21:07.540 --> 21:08.540
这里倒正好

21:08.540 --> 21:09.540
它没有什么依赖

21:09.540 --> 21:10.540
那如果说

21:10.540 --> 21:11.540
它这个包含有别的依赖的话

21:11.540 --> 21:12.540
那么依赖有依赖

21:12.540 --> 21:13.540
依赖有依赖

21:13.540 --> 21:14.540
就会导入

21:14.540 --> 21:15.540
一句话就会导入

21:15.540 --> 21:17.540
很多的介石文件

21:17.540 --> 21:19.540
就会请求很多的介石文件

21:19.540 --> 21:20.540
所以说这个浏览极端

21:20.540 --> 21:23.540
它非常难以跟这个npm结合

21:23.540 --> 21:24.540
听懂这个意思吗

21:24.540 --> 21:26.540
下来好好去评一下

21:26.540 --> 21:27.540
你把这些问题

21:27.540 --> 21:28.540
认识清楚了过后

21:28.540 --> 21:30.540
你才能真正的理解

21:30.540 --> 21:31.540
构建工具

21:31.540 --> 21:32.540
它到底是怎么回事

21:33.540 --> 21:35.540
其实像这些问题

21:35.540 --> 21:38.540
它仅仅是前端工程化的

21:38.540 --> 21:40.540
一个说意

21:40.540 --> 21:41.540
也就是说

21:41.540 --> 21:43.540
前端工程化的过程中

21:43.540 --> 21:44.540
遇到了问题

21:44.540 --> 21:46.540
远远不止这么几个问题

21:46.540 --> 21:48.540
多的要事

21:48.540 --> 21:52.540
当你去开发一个具有规模的程序

21:52.540 --> 21:54.540
就是我们简单的说就是大应用

21:54.540 --> 21:56.540
功能很多的应用

21:56.540 --> 21:58.540
设计到开发人员也好

21:58.540 --> 22:00.540
开发周期也好

22:00.540 --> 22:02.540
都比较庞大的应用

22:02.540 --> 22:03.540
那么这个时候

22:03.540 --> 22:05.540
你会遇到非常非常多的

22:05.540 --> 22:07.540
非业务问题

22:07.540 --> 22:09.540
什么叫非业务问题

22:09.540 --> 22:10.540
就是跟我们的开发功能

22:10.540 --> 22:12.540
没什么关系的

22:12.540 --> 22:13.540
不要让我们开发个登录

22:13.540 --> 22:15.540
不要让我们开发一个发布文章

22:15.540 --> 22:16.540
发布评论

22:16.540 --> 22:17.540
跟这些业务问题

22:17.540 --> 22:19.540
没关系的一些问题

22:19.540 --> 22:20.540
那么就我们把这些问题

22:20.540 --> 22:21.540
叫做非业务问题

22:21.540 --> 22:23.540
也可以把它称之为技术问题

22:23.540 --> 22:25.540
那么这些问题包括什么呢

22:25.540 --> 22:26.540
咱们执行效率

22:26.540 --> 22:27.540
跟业务有没有什么关系

22:27.540 --> 22:28.540
没什么关系

22:28.540 --> 22:29.540
解农性

22:29.540 --> 22:30.540
代码的可维护性

22:30.540 --> 22:31.540
可扩展性

22:31.540 --> 22:33.540
怎么样进行团队协作

22:34.540 --> 22:35.540
怎么样去测试

22:35.540 --> 22:36.540
等等等等

22:36.540 --> 22:37.540
一大堆的

22:37.540 --> 22:39.540
你想都想象不到的问题

22:39.540 --> 22:40.540
当然这门客学到过后

22:40.540 --> 22:41.540
你很多问题就知道了

22:43.540 --> 22:44.540
那么我们把这些问题

22:44.540 --> 22:46.540
称之为工程问题

22:46.540 --> 22:47.540
这些工程问题

22:47.540 --> 22:48.540
非常非常的烦

22:48.540 --> 22:50.540
非常烦烦烦烦烦

22:50.540 --> 22:52.540
你天天去处理业务功能

22:52.540 --> 22:53.540
去编写代码来解决

22:53.540 --> 22:54.540
业务上的需求

22:54.540 --> 22:56.540
都忙得不可开交

22:56.540 --> 22:57.540
那么这些问题

22:57.540 --> 22:59.540
还天天在烦这里

22:59.540 --> 23:00.540
因为这些问题

23:00.540 --> 23:02.540
跟业务是没有什么关系

23:02.540 --> 23:04.540
但是他以不影响你开发

23:04.540 --> 23:06.540
他绝对影响你开发

23:06.540 --> 23:07.540
绝对影响你开发

23:07.540 --> 23:08.540
所以说如果说

23:08.540 --> 23:11.540
没有一个好的工具

23:11.540 --> 23:13.540
来解决这个问题

23:13.540 --> 23:14.540
那么你的开发进度

23:14.540 --> 23:16.540
会变得极其缓慢

23:16.540 --> 23:18.540
你除了天天处心积虑的

23:18.540 --> 23:20.540
解决业务问题

23:20.540 --> 23:21.540
解决业务问题的时候

23:21.540 --> 23:22.540
都焦头烂耳

23:22.540 --> 23:24.540
因为业务问题足够复杂

23:24.540 --> 23:25.540
你还要去花心思

23:25.540 --> 23:27.540
去解决这些乱七八糟的问题

23:27.540 --> 23:29.540
就太烦了

23:29.540 --> 23:30.540
这会让开发者

23:30.540 --> 23:34.540
来陷入技术的离谈

23:34.540 --> 23:35.540
所以我们开发的时候

23:35.540 --> 23:37.540
最舒服的状态

23:37.540 --> 23:39.540
最想要的状态是什么呢

23:39.540 --> 23:41.540
就是我就专心自制的

23:41.540 --> 23:45.540
解决业务就行了

23:45.540 --> 23:46.540
你要实现什么样的功能

23:46.540 --> 23:47.540
我给你写单码

23:47.540 --> 23:48.540
给你实现

23:48.540 --> 23:50.540
这是我们希望看到的

23:50.540 --> 23:51.540
我不希望看到

23:51.540 --> 23:53.540
我在实现的工程中

23:53.540 --> 23:55.540
以后又去解决

23:55.540 --> 23:56.540
什么兼容性的问题

23:56.540 --> 23:57.540
以后又去解决

23:57.540 --> 23:58.540
执行效率的问题

23:58.540 --> 24:00.540
我特别烦这个东西

24:00.540 --> 24:01.540
它打乱了我

24:01.540 --> 24:04.540
解决业务问题的失路

24:04.540 --> 24:05.540
懂我这个意思吗

24:05.540 --> 24:06.540
这些问题

24:06.540 --> 24:08.540
我们把统成为工程性问题

24:08.540 --> 24:10.540
那么这些问题

24:10.540 --> 24:11.540
刚才我们说过

24:11.540 --> 24:13.540
像这些东西都是工程化问题

24:13.540 --> 24:16.540
它跟业务没有什么关系

24:16.540 --> 24:18.540
所以说我们这门客

24:18.540 --> 24:19.540
大家会发现

24:19.540 --> 24:22.540
基本上我们不会去写什么功能

24:22.540 --> 24:23.540
因为我们现在

24:23.540 --> 24:25.540
都是集中的去解决

24:25.540 --> 24:26.540
工程化过程中

24:26.540 --> 24:28.540
这些非业务的问题

24:28.540 --> 24:30.540
跟业务没有什么关系

24:30.540 --> 24:32.540
就纯粹是遇到了一些

24:33.540 --> 24:35.540
开发过程中的一些技术障碍

24:35.540 --> 24:37.540
我要把这些东西打通

24:37.540 --> 24:38.540
打通了过后

24:38.540 --> 24:40.540
虽然说你们学习这门客

24:40.540 --> 24:41.540
感觉上学家怎么

24:41.540 --> 24:42.540
这么繁琐

24:42.540 --> 24:43.540
这么多乱七八糟的问题

24:43.540 --> 24:45.540
但是你学完了这门客之后

24:45.540 --> 24:47.540
以之后就有机会

24:47.540 --> 24:51.540
把精力关注到业务功能上

24:51.540 --> 24:52.540
而不是这些

24:52.540 --> 24:54.540
乱七八糟的技术问题上

24:54.540 --> 24:55.540
因为这些问题

24:55.540 --> 24:57.540
都会在这一门客得到解决

24:58.540 --> 25:00.540
好 最后我们来看一下

25:00.540 --> 25:01.540
根本原因

25:01.540 --> 25:02.540
什么根本原因

25:02.540 --> 25:03.540
就是说

25:03.540 --> 25:05.540
为什么会产生这样的问题

25:05.540 --> 25:07.540
它到底的根本原因是什么

25:07.540 --> 25:09.540
上面提到了这些问题

25:09.540 --> 25:11.540
监容性 效率 工具

25:11.540 --> 25:12.540
这些东西

25:12.540 --> 25:14.540
那不得端没有那么明显

25:14.540 --> 25:16.540
那不得端不是挺好的

25:16.540 --> 25:18.540
那不得端有什么效率问题吗

25:18.540 --> 25:19.540
随便做多少个企业

25:19.540 --> 25:21.540
上线 成千上万个

25:21.540 --> 25:22.540
有执行效率问题吗

25:22.540 --> 25:23.540
没有

25:23.540 --> 25:24.540
有监容性问题吗

25:24.540 --> 25:25.540
当然有监容性问题

25:25.540 --> 25:27.540
它不支持ES6

25:27.540 --> 25:29.540
其实它也支持ES6

25:29.540 --> 25:31.540
有一些要绕一些弯

25:31.540 --> 25:33.540
我们通常在common.js

25:33.540 --> 25:34.540
而在loader环境里

25:34.540 --> 25:36.540
不会适与使用ES6

25:38.540 --> 25:39.540
它有没有监容性的

25:39.540 --> 25:40.540
也有

25:41.540 --> 25:42.540
它有没有工具问题

25:42.540 --> 25:43.540
工具问题没有

25:43.540 --> 25:45.540
因为它支持loader

25:45.540 --> 25:47.540
是支持NPM下载的第三方貓

25:47.540 --> 25:48.540
它凭什么loader支持

25:48.540 --> 25:49.540
它浏览器不支持

25:50.540 --> 25:51.540
为什么

25:51.540 --> 25:52.540
你觉得为什么

25:52.540 --> 25:54.540
因为这loader端

25:54.540 --> 25:56.540
它运行的JS文件

25:56.540 --> 25:58.540
就在本地

25:58.540 --> 25:59.540
它不像浏览器

26:00.540 --> 26:02.540
浏览器是要进行远程传输的

26:02.540 --> 26:04.540
因为你的JS文件

26:04.540 --> 26:06.540
不在本地 在服务器上

26:06.540 --> 26:08.540
你将来部署的过去在服务器上

26:08.540 --> 26:09.540
它不在本地

26:09.540 --> 26:11.540
因此你要进行远程传输

26:11.540 --> 26:13.540
而本地读取文件

26:13.540 --> 26:14.540
它的效率

26:14.540 --> 26:16.540
要比浏览器端

26:16.540 --> 26:18.540
传输文件高得多

26:18.540 --> 26:21.540
loader是可以读取本地文件的

26:21.540 --> 26:23.540
比如说loader

26:23.540 --> 26:24.540
loader我们这里

26:24.540 --> 26:26.540
当然我之前

26:26.540 --> 26:28.540
讲那个NPM的时候

26:28.540 --> 26:29.540
没有讲过

26:29.540 --> 26:30.540
随便来一个吧

26:30.540 --> 26:31.540
随便来一个

26:31.540 --> 26:32.540
随便来一个

26:32.540 --> 26:33.540
给大家写一下

26:33.540 --> 26:34.540
写一下这个带吧

26:35.540 --> 26:36.540
比方说吧

26:36.540 --> 26:38.540
我们这个里面有个文件

26:38.540 --> 26:39.540
一个文件

26:39.540 --> 26:41.540
test.txt

26:41.540 --> 26:43.540
就这个文件随便写个吧

26:43.540 --> 26:44.540
这个文件

26:44.540 --> 26:45.540
你JS怎么读

26:45.540 --> 26:46.540
没法读

26:46.540 --> 26:48.540
你只能通过阿加克斯请求

26:48.540 --> 26:50.540
网络传输这个文件

26:50.540 --> 26:51.540
但是loader里面

26:51.540 --> 26:53.540
是可以直接读本地文件的

26:53.540 --> 26:55.540
如果是你是loader环境的话

26:55.540 --> 26:57.540
直接读本地文件的

26:57.540 --> 26:58.540
比方说在英德克斯里面

26:58.540 --> 26:59.540
我们直接读

26:59.540 --> 27:00.540
直接读

27:00.540 --> 27:01.540
怎么读呢

27:01.540 --> 27:03.540
你首先导入一个

27:03.540 --> 27:05.540
这个英德克斯就不能用

27:05.540 --> 27:06.540
这个es6了

27:06.540 --> 27:07.540
要导入一个

27:07.540 --> 27:10.540
导入一个loader接式的内置模块

27:10.540 --> 27:11.540
给大家看一下吧

27:11.540 --> 27:15.100
这些东西以后你们loader会学习的

27:15.100 --> 27:17.100
导入一个内置模块

27:17.100 --> 27:19.100
这是es6的内置模块

27:19.100 --> 27:21.100
内置模块

27:21.100 --> 27:22.100
FS

27:22.100 --> 27:24.100
用于文件处理

27:24.100 --> 27:26.100
那么这个FS这个模块

27:26.100 --> 27:28.100
叫loader环境才能执行

27:28.100 --> 27:30.100
然后这里有个read

27:30.100 --> 27:31.100
file

27:31.100 --> 27:32.100
读取文件sync

27:32.100 --> 27:34.100
同步的去读取文件

27:34.100 --> 27:35.100
好 第一个是路径

27:35.100 --> 27:36.100
文件的路径在哪呢

27:36.100 --> 27:38.100
就是下面的text

27:38.100 --> 27:39.100
text

27:39.100 --> 27:40.100
这就是文件路径

27:40.100 --> 27:42.100
后面让我们给它一个配置

27:42.100 --> 27:44.100
就是encoding

27:44.100 --> 27:45.100
encoding

27:45.100 --> 27:46.100
就是它的编码方式

27:46.100 --> 27:47.100
UTF-8

27:47.100 --> 27:49.100
读这个文件是用这个编码

27:49.100 --> 27:50.100
进读去

27:50.100 --> 27:53.100
那么这个函数反回了结果

27:53.100 --> 27:55.100
就是文件的结果

27:56.100 --> 27:57.100
输出

27:57.100 --> 27:58.100
concent

27:58.100 --> 28:00.100
不要说这是一段loader代码

28:00.100 --> 28:01.100
现在我们运行一下

28:01.100 --> 28:03.100
这里我们点击右键

28:03.100 --> 28:04.100
runcode

28:04.100 --> 28:06.100
因为这里你可以安装一个插件

28:06.100 --> 28:08.100
这个插件的名字叫做

28:08.100 --> 28:10.100
就叫做好像叫做runcode的

28:11.100 --> 28:13.100
code run

28:15.480 --> 28:17.480
去安装一下这个插件

28:17.480 --> 28:18.480
这个插件过后

28:18.480 --> 28:19.480
后面我们运行loader代码

28:19.480 --> 28:20.480
那就比较方便了

28:20.480 --> 28:22.480
在这里我们直接点击右键

28:22.480 --> 28:24.480
runcode

28:24.480 --> 28:25.480
运行的代码

28:26.480 --> 28:27.480
它报处了

28:29.480 --> 28:31.480
它说open test

28:31.480 --> 28:33.480
test.txt

28:34.480 --> 28:36.480
它说找不到

28:36.480 --> 28:39.480
那这里我们使用

28:40.480 --> 28:42.480
使用绝对路径

28:42.480 --> 28:45.480
我们这里不能使用相对的路径

28:45.480 --> 28:46.480
使用绝对路径

28:46.480 --> 28:47.480
什么叫绝对路径

28:47.480 --> 28:48.480
就从地盘

28:48.480 --> 28:49.480
多少打个文件夹

28:49.480 --> 28:51.480
就是写个最长的路径

28:51.480 --> 28:54.480
从根盘幅开始

28:54.480 --> 28:55.480
一直读到这个文件

28:55.480 --> 28:56.480
那么怎么办呢

28:56.480 --> 28:58.480
我肯定不能用这种方式来写

28:58.480 --> 29:00.480
我们可以借助另外一个模块

29:00.480 --> 29:02.860
叫pass

29:02.860 --> 29:04.860
这也是个内置模块

29:04.860 --> 29:06.860
大家看个热闹就行了

29:06.860 --> 29:07.860
看个热闹就行了

29:07.860 --> 29:09.860
就是告诉大家loader.js里面

29:09.860 --> 29:10.860
是可以读文件的

29:10.860 --> 29:12.860
可以读本地文件的

29:12.860 --> 29:14.860
那么这里呢

29:14.860 --> 29:16.860
这个pass里面有什么作用呢

29:16.860 --> 29:18.860
这个pass里面可以构建一个

29:18.860 --> 29:19.860
绝对路径

29:19.860 --> 29:21.860
它里面有一个方法resolve

29:21.860 --> 29:23.860
它可以把一个相对路径

29:24.860 --> 29:26.860
相对路径

29:28.860 --> 29:30.860
构建成一个绝对路径

29:30.860 --> 29:32.860
它可以给它多段相对路径

29:32.860 --> 29:33.860
比方说我们还可以

29:33.860 --> 29:34.860
前面再加上个dln

29:34.860 --> 29:36.860
这个大家应该之前见过

29:36.860 --> 29:38.860
表示当前这个js

29:38.860 --> 29:40.860
运行所在的文件夹

29:40.860 --> 29:41.860
在哪呢

29:41.860 --> 29:42.860
在这个模路下面

29:42.860 --> 29:45.860
那么这个下滑线dln

29:45.860 --> 29:46.860
那么就表示

29:46.860 --> 29:47.860
我们目前这个js

29:47.860 --> 29:48.860
运行的哪个文件夹呢

29:48.860 --> 29:50.860
运行的这个文件夹

29:50.860 --> 29:51.860
那么这个文件夹

29:51.860 --> 29:52.860
和这个东西一拼接

29:52.860 --> 29:53.860
它会把它形成一个

29:53.860 --> 29:55.860
完整的绝对路径

29:55.860 --> 29:58.860
就是abpass

29:58.860 --> 29:59.860
absolute pass

29:59.860 --> 30:01.860
当然一个个答应一下

30:01.860 --> 30:02.860
给大家看一下

30:02.860 --> 30:03.860
顺便了解一下

30:05.860 --> 30:06.860
abpass

30:07.860 --> 30:08.860
运行

30:08.860 --> 30:09.860
runcode

30:09.860 --> 30:10.860
你看

30:10.860 --> 30:11.860
是不是形成个绝对路径呢

30:11.860 --> 30:12.860
对吧

30:12.860 --> 30:14.860
而且它会根据操作系统的不同

30:14.860 --> 30:15.860
生成的绝对路径

30:15.860 --> 30:17.860
会根据操作系统能

30:17.860 --> 30:18.860
生成一个操作系统

30:18.860 --> 30:19.860
能识别的绝对路径

30:19.860 --> 30:20.860
你看温度是操作系统

30:20.860 --> 30:21.860
它就生成这个

30:21.860 --> 30:22.860
那么它苹果

30:22.860 --> 30:23.860
或者Linux上

30:23.860 --> 30:24.860
它可能生成的不太一样

30:25.860 --> 30:26.860
那么通过这个

30:26.860 --> 30:27.860
通过这个内置的模块

30:27.860 --> 30:29.860
我们可以构建一个绝对路径

30:29.860 --> 30:30.860
好

30:30.860 --> 30:31.860
接下来我们把这个绝对路径

30:31.860 --> 30:32.860
传进去

30:32.860 --> 30:36.740
然后输出它的内容

30:36.740 --> 30:37.740
大家看一下

30:39.740 --> 30:40.740
你看

30:40.740 --> 30:41.740
是不是读到文件内容了

30:41.740 --> 30:42.740
你看这个文件内容

30:42.740 --> 30:43.740
是不是读到了

30:43.740 --> 30:45.740
insert load.js里边

30:45.740 --> 30:47.740
那么这个是不是阿迦克斯

30:48.740 --> 30:50.740
脱离了浏览器环境

30:50.740 --> 30:52.740
就不存在阿迦克斯了

30:52.740 --> 30:54.740
这就是读取一个本地的文件

30:54.740 --> 30:56.740
因为load.js就是在

30:56.740 --> 30:58.740
一个本地的计算机上运行的

30:58.740 --> 31:00.740
这些文件都是本地文件

31:00.740 --> 31:02.740
所以说load.js

31:02.740 --> 31:03.740
它是可以读本地文件的

31:03.740 --> 31:04.740
因为读本地文件

31:04.740 --> 31:06.740
它要比远程传输文件

31:06.740 --> 31:07.740
快得太多太多了

31:07.740 --> 31:09.740
所以说你把文件分成很多

31:09.740 --> 31:10.740
没关系

31:11.740 --> 31:12.740
没关系

31:12.740 --> 31:13.740
因此load.js

31:13.740 --> 31:14.740
往往

31:14.740 --> 31:16.740
什么工程化的问题呢

31:16.740 --> 31:18.740
它就自然而然就不存在这些问题了

31:18.740 --> 31:19.740
所以load.js

31:19.740 --> 31:20.740
很多时候

31:20.740 --> 31:21.740
不会用到

31:21.740 --> 31:22.740
我们后面学到微拍的

31:22.740 --> 31:23.740
能不能用

31:23.740 --> 31:24.740
能用

31:24.740 --> 31:25.740
只是一般不会用到

31:25.740 --> 31:27.740
一般不会用到

31:27.740 --> 31:29.740
听懂这个意思吗

31:29.740 --> 31:30.740
因为load.js

31:30.740 --> 31:34.060
它不会有这个问题

31:34.060 --> 31:37.060
其实我们再往生了讲

31:37.060 --> 31:38.060
根本原因

31:38.060 --> 31:40.060
在浏览器段根本原因是啥呢

31:40.060 --> 31:42.060
就是这个问题

31:42.060 --> 31:44.060
我们开发阶段

31:44.060 --> 31:46.060
开发的时候

31:46.060 --> 31:48.060
和运行代码的时候

31:48.060 --> 31:50.060
它的测重点是不一样的

31:50.060 --> 31:51.060
这是大家以前

31:51.060 --> 31:53.060
往往忽略到了的一个问题

31:53.060 --> 31:54.060
因为以前我们开发的东西

31:54.060 --> 31:56.060
开发的项目很小

31:56.060 --> 31:57.060
特别特别小

31:57.060 --> 31:58.060
所以感觉不到

31:58.060 --> 31:59.060
有这样的差异

31:59.060 --> 32:01.060
那我们来看一下

32:01.060 --> 32:02.060
开发时代

32:02.060 --> 32:04.060
我们把它称为DevTime

32:04.060 --> 32:05.060
什么意思

32:05.060 --> 32:08.060
DevelopmentTime

32:08.060 --> 32:10.060
就是我们开发的时候

32:10.060 --> 32:12.060
我们关注的是什么呢

32:12.060 --> 32:14.060
模块化分越细越好

32:14.060 --> 32:15.060
是不是这个道理

32:15.060 --> 32:16.060
我们之前都体验过了

32:16.060 --> 32:18.060
模块化分非常细的话

32:18.060 --> 32:19.060
有利于代码的重用

32:20.060 --> 32:21.060
非常感觉的也很优雅

32:21.060 --> 32:23.060
每一个模块的代码非常简单

32:23.060 --> 32:25.060
就把很多负担问题简化了

32:25.060 --> 32:26.060
我们希望的模块化分

32:26.060 --> 32:28.060
越细越好

32:28.060 --> 32:30.060
而且我们希望支持

32:30.060 --> 32:32.060
多种模块化的标准

32:32.060 --> 32:33.060
就利用CommonJet

32:33.060 --> 32:34.060
写的没关系

32:34.060 --> 32:35.060
我照样可以用

32:35.060 --> 32:37.060
Yes6给你导入进来

32:37.060 --> 32:39.060
我们希望这样子

32:39.060 --> 32:40.060
宣布说我能不能做到

32:40.060 --> 32:42.060
先希望是这样子

32:42.060 --> 32:43.060
然后呢

32:43.060 --> 32:46.060
如果说你支持的NPM

32:46.060 --> 32:48.060
我希望你能支持NPM

32:48.060 --> 32:50.060
或者是其他保管零器

32:50.060 --> 32:51.060
下载的模块

32:51.060 --> 32:52.060
我不能老是自己玩

32:52.060 --> 32:54.060
我肯定要用一些第三方库

32:54.060 --> 32:55.060
那么第三方库下

32:55.060 --> 32:57.060
第三方就是保管零器

32:57.060 --> 32:58.060
下载的工具的

32:58.060 --> 32:59.060
就下载的库

32:59.060 --> 33:01.060
我以希望能够使用

33:01.060 --> 33:03.060
这是开发时代我们希望的事情

33:03.060 --> 33:06.060
这样我们开发就很方便

33:06.060 --> 33:07.060
而且呢

33:07.060 --> 33:08.060
我们能够解决

33:08.060 --> 33:10.060
其他工程化的问题

33:10.060 --> 33:11.060
比方说我们开发的时候

33:11.060 --> 33:13.060
我希望我不要去考虑

33:13.060 --> 33:15.060
监容性不监容性

33:15.060 --> 33:17.060
我就开开心心写就行了

33:17.060 --> 33:19.060
这种写法方便我就写大作

33:19.060 --> 33:20.060
监容还说不很方便吗

33:20.060 --> 33:21.060
我不要去考虑

33:21.060 --> 33:23.060
监容还说监不监容的问题

33:23.060 --> 33:25.060
老老师直接写就完事了

33:25.060 --> 33:26.060
这是我们开发的时候

33:26.060 --> 33:29.060
最希望看到的事情

33:29.060 --> 33:30.060
我现在写代码

33:30.060 --> 33:32.060
忙着要死

33:32.060 --> 33:33.060
有些人心动开玩笑

33:33.060 --> 33:35.060
法机线都升高了

33:35.060 --> 33:36.060
我还要去关心你

33:36.060 --> 33:38.060
这不兼容性

33:38.060 --> 33:40.060
人都给我逼疯了

33:40.060 --> 33:41.060
我希望了

33:41.060 --> 33:42.060
我就开开心心地写代码

33:42.060 --> 33:44.060
怎么好用怎么写

33:44.060 --> 33:45.060
怎么舒服怎么写

33:45.060 --> 33:47.060
这是我们开发的时候

33:47.060 --> 33:49.060
希望看到的事情

33:49.060 --> 33:51.060
但是运行的时候不一样

33:51.060 --> 33:53.060
运行的时候我们把它叫

33:53.060 --> 33:55.060
wrong time

33:55.060 --> 33:57.060
运行的时候我们希望什么

33:57.060 --> 33:59.060
希望的是你文件

33:59.060 --> 34:00.060
别那么多

34:00.060 --> 34:01.060
越少越好

34:01.060 --> 34:03.060
因为文件越少了

34:03.060 --> 34:04.060
我请求求越少

34:04.060 --> 34:06.060
我这都是说的是浏览器环节

34:06.060 --> 34:08.060
loader环节是不存在这些问题的

34:08.060 --> 34:10.060
那么我希望的文件

34:10.060 --> 34:12.060
体积越小越好

34:12.060 --> 34:14.060
比方说你这个代码

34:14.060 --> 34:15.060
换行了

34:15.060 --> 34:16.060
尽量别换行了

34:16.060 --> 34:18.060
因为换行服也会占用文件体积

34:18.060 --> 34:20.060
你最好这样子

34:20.060 --> 34:22.060
最好这样子

34:22.060 --> 34:23.060
什么意思

34:23.060 --> 34:27.620
就是每句话后面加个分号

34:27.620 --> 34:28.620
你最好这样

34:28.620 --> 34:29.620
写成一行

34:29.620 --> 34:32.620
最好这样子

34:32.620 --> 34:33.620
你最好了什么呢

34:33.620 --> 34:35.620
最好了就是

34:35.620 --> 34:37.620
在阶级端一点

34:37.620 --> 34:38.620
你这个变量名字

34:38.620 --> 34:40.620
都不要用什么那么长的名字

34:40.620 --> 34:42.620
增加文件体积

34:42.620 --> 34:44.620
这是不是

34:44.620 --> 34:46.620
运行的时候希望看到的

34:46.620 --> 34:47.620
开发的时候希望

34:47.620 --> 34:49.620
肯定不希望

34:49.620 --> 34:51.620
文件体积越小越好

34:51.620 --> 34:53.620
尽量压缩一下

34:53.620 --> 34:55.620
代码内容越乱越好

34:55.620 --> 34:56.620
这什么意思呢

34:56.620 --> 34:58.620
因为代码内容越乱

34:58.620 --> 34:59.620
你在运行的时候

34:59.620 --> 35:00.620
比方说你这个介石

35:00.620 --> 35:02.620
发不到网上去运行了

35:02.620 --> 35:04.620
那么别人去访问你的网站的时候

35:04.620 --> 35:06.620
能不能看到你的介石带吗

35:06.620 --> 35:07.620
肯定可以

35:07.620 --> 35:08.620
他直接打开右键

35:08.620 --> 35:10.620
检查网络请求

35:10.620 --> 35:12.620
他就可以看到你请求的介石带

35:12.620 --> 35:14.620
他就一定可以看到的

35:14.620 --> 35:16.620
那么他看到了你的介石带吗

35:16.620 --> 35:18.620
过后他是不是有可能会

35:18.620 --> 35:20.620
设立到一个知识产权的问题了

35:20.620 --> 35:23.620
他有可能会参考学性的介石带吗

35:23.620 --> 35:24.620
可能把你的介石带吗

35:24.620 --> 35:25.620
copy过去

35:25.620 --> 35:27.620
但是如果你的代码够乱

35:27.620 --> 35:29.620
够丑陋

35:29.620 --> 35:31.620
他是不是就不好copy了

35:31.620 --> 35:33.620
对吧

35:33.620 --> 35:34.620
这是运行时代

35:34.620 --> 35:35.620
他希望看到的

35:35.620 --> 35:36.620
但是我们开发的时候

35:36.620 --> 35:37.620
是不是有希望看到

35:37.620 --> 35:39.620
肯定不希望

35:39.620 --> 35:41.620
而且那个运行时代

35:41.620 --> 35:43.620
还需要所有流暗器都兼容

35:43.620 --> 35:44.620
你的代码

35:44.620 --> 35:46.620
要为每个流暗器

35:46.620 --> 35:47.620
都要考虑清楚

35:47.620 --> 35:48.620
为第一版本的流暗器

35:48.620 --> 35:49.620
也要举行考虑

35:49.620 --> 35:51.620
那你开发的时候肯定不希望

35:51.620 --> 35:53.620
我怎么方便怎么来

35:53.620 --> 35:54.620
对吧

35:54.620 --> 35:56.620
还要解决能够运行时代

35:56.620 --> 35:57.620
一些其他问题

35:57.620 --> 35:58.620
比方说主要是执行效率的问题

35:58.620 --> 36:00.620
我们后面会说

36:00.620 --> 36:03.620
大家可以通过这个例子发现

36:03.620 --> 36:04.620
根本原因在哪

36:04.620 --> 36:05.620
根本原因就在这

36:05.620 --> 36:06.620
就在这里面

36:06.620 --> 36:09.620
产生了一个极大的红钩

36:09.620 --> 36:10.620
我们开发的时候

36:10.620 --> 36:12.620
希望的是代码是一种结构

36:12.620 --> 36:13.620
而运行的时候

36:13.620 --> 36:16.620
代码是另外一种结构

36:16.620 --> 36:19.620
以前有没有去做这种区分

36:19.620 --> 36:20.620
以前没有

36:20.620 --> 36:22.620
以前我们开发时候写的代码

36:22.620 --> 36:25.620
就是我们运行时的代码

36:25.620 --> 36:26.620
以前有没有问题呢

36:26.620 --> 36:28.620
以前问题不严重

36:28.620 --> 36:30.620
因为以前的前端工程

36:30.620 --> 36:32.620
代码量少

36:32.620 --> 36:34.620
没有形成工程化

36:34.620 --> 36:36.620
没有那么大的规模

36:36.620 --> 36:37.620
就这样吧

36:37.620 --> 36:38.620
还行

36:38.620 --> 36:39.620
可以

36:39.620 --> 36:41.620
问题不大

36:41.620 --> 36:44.620
但是一旦前端代码多了之后

36:44.620 --> 36:46.620
形成了规模之后

36:46.620 --> 36:48.620
变成了一个前端工程的时候

36:48.620 --> 36:50.620
这个问题就越来越严重

36:50.620 --> 36:51.620
严重到后边

36:51.620 --> 36:54.620
已经没有办法承受了

36:54.620 --> 36:55.620
那么这个时候

36:55.620 --> 36:56.620
就必须要有一个东西

36:56.620 --> 37:00.130
出来解决这个问题

37:00.130 --> 37:01.130
所以说

37:01.130 --> 37:03.130
如果说

37:03.130 --> 37:05.130
你不解决这些问题的话

37:05.130 --> 37:07.130
那么前端项目形成规模

37:07.130 --> 37:08.130
只能是空谈

37:08.130 --> 37:10.130
它形不成规模

37:10.130 --> 37:12.130
如果说你开发的时候

37:12.130 --> 37:14.130
就要用这种方式来开发

37:14.130 --> 37:15.130
你受不了

37:15.130 --> 37:17.130
但是你用这种方式来开发的话

37:17.130 --> 37:19.130
运行的时候又受不了

37:19.130 --> 37:20.130
那么这个时候

37:20.130 --> 37:22.130
你必须要有东西来解决了

37:22.130 --> 37:25.530
怎么来看解决方案

37:25.530 --> 37:28.530
既然我们的开发时代和运行时代

37:28.530 --> 37:29.530
它面临的局面

37:29.530 --> 37:31.530
是不是有巨大的差异

37:31.530 --> 37:32.530
开发的时候

37:32.530 --> 37:34.530
我们想的是一种代码结构

37:34.530 --> 37:35.530
运行的时候

37:35.530 --> 37:37.530
想的是另外一种代码结构

37:37.530 --> 37:39.530
那么现在我们就这样想

37:39.530 --> 37:40.530
很简单的解决方案

37:40.530 --> 37:41.530
就是说

37:41.530 --> 37:42.530
如果说

37:42.530 --> 37:45.530
我们有这么一个工具

37:45.530 --> 37:46.530
不管这个工具怎么来的

37:46.530 --> 37:47.530
总之有这么一个工具

37:47.530 --> 37:49.530
它能够让开发者

37:49.530 --> 37:53.530
专心的在开发时写代码

37:53.530 --> 37:54.530
只写好代码之后

37:54.530 --> 37:55.530
利用这个工具

37:55.530 --> 37:57.530
将开发时写的代码

37:57.530 --> 37:59.530
转换成运行时需要的东西

37:59.530 --> 38:00.530
那么这样的工具

38:00.530 --> 38:03.530
我们把它叫做构建工具

38:03.530 --> 38:04.530
你看

38:04.530 --> 38:05.530
咱们开发的时候

38:05.530 --> 38:07.530
不是有很多的细分模块吗

38:07.530 --> 38:08.530
代码也不用管什么简容性

38:08.530 --> 38:09.530
不简容性

38:09.530 --> 38:10.530
随便来

38:10.530 --> 38:11.530
怎么方便怎么来

38:11.530 --> 38:12.530
好

38:12.530 --> 38:13.530
写完了之后

38:13.530 --> 38:15.530
只要把代码交给构建工具

38:15.530 --> 38:16.530
它一构建

38:16.530 --> 38:18.530
那么它最终形成了GS

38:18.530 --> 38:20.530
它会给你构建成一个

38:20.530 --> 38:23.530
压缩过后代码极其丑陋

38:23.530 --> 38:26.530
而且文件数量极少

38:26.530 --> 38:28.530
可能只有一个GS

38:28.530 --> 38:30.530
那么就形成这么一个文件

38:30.530 --> 38:31.530
运行的时候运行哪一个

38:31.530 --> 38:32.530
运行的时候运行的是

38:32.530 --> 38:34.530
左边还是右边

38:34.530 --> 38:36.530
运行右边

38:36.530 --> 38:38.530
不过右边的GS

38:38.530 --> 38:40.530
它的功能跟左边是一样的

38:40.530 --> 38:42.530
但是我们写的时候

38:42.530 --> 38:43.530
我们是写着左边的

38:43.530 --> 38:46.530
我们写的时候是不用关心

38:46.530 --> 38:47.530
最终出来是什么样子

38:47.530 --> 38:48.530
不用去管

38:48.530 --> 38:50.530
不用去管最终出来是什么样子

38:50.530 --> 38:52.530
全部交给构建工具去完成

38:52.530 --> 38:54.530
它一构建就可以运行了

38:54.530 --> 38:55.530
运行到这个GS

38:55.530 --> 38:58.530
那么这个东西就叫做构建工具

38:58.530 --> 39:00.530
听懂了吗

39:00.530 --> 39:02.530
那么这样子构建工具

39:02.530 --> 39:04.530
如果说一旦出来之后

39:04.530 --> 39:06.530
我们开发者会怎么样

39:06.530 --> 39:08.530
我们只需要专注于

39:08.530 --> 39:10.530
开发时代的代码结构

39:10.530 --> 39:12.530
虽然说这个代码

39:12.530 --> 39:14.530
参不参与运行不参与

39:14.530 --> 39:15.530
最终运行是它

39:15.530 --> 39:17.530
但是由于最终运行的东西

39:17.530 --> 39:18.530
功能跟我们一样

39:18.530 --> 39:19.530
所以说我们也可以认为

39:19.530 --> 39:21.530
这个地方是要参与运行的

39:21.530 --> 39:22.530
实际上是没有的

39:22.530 --> 39:23.530
但是我们开发的时候

39:23.530 --> 39:24.530
只管开发这种

39:24.530 --> 39:26.530
優雅的代码结构

39:26.530 --> 39:28.530
不用考虑兼容性

39:28.530 --> 39:29.530
我们可以细分模块

39:29.530 --> 39:30.530
我们可以同时支持

39:30.530 --> 39:32.530
CommonJS和GS6

39:32.530 --> 39:34.530
那么我们这里呢

39:34.530 --> 39:35.530
就专心的去开发这种环境

39:35.530 --> 39:36.530
是不是很舒服

39:36.530 --> 39:38.530
还可以使用第三方库

39:38.530 --> 39:40.530
什么NPM都可以使用

39:40.530 --> 39:43.530
我们只需要专心开发于这个东西

39:43.530 --> 39:45.530
而不用去担心运行时代

39:45.530 --> 39:46.530
遇到的问题了

39:46.530 --> 39:47.530
运行时代遇到的问题

39:47.530 --> 39:49.530
全部考它来解决

39:49.530 --> 39:50.530
什么效率问题

39:50.530 --> 39:52.530
代码压缩问题

39:52.530 --> 39:53.530
体积问题

39:53.530 --> 39:54.530
兼容性问题

39:54.530 --> 39:55.530
全部考它来解决

39:55.530 --> 39:56.530
它生成的代码

39:56.530 --> 39:58.530
一定没有这些问题了

39:58.530 --> 40:00.530
那么这门客

40:00.530 --> 40:01.530
咱们学习的是啥

40:01.530 --> 40:03.530
学习的就是它

40:03.530 --> 40:05.530
它是怎么来做到的

40:05.530 --> 40:07.530
怎么样把我们这些东西

40:07.530 --> 40:09.530
做到成这个样子

40:09.530 --> 40:11.530
又怎么来进行灵活的配置

40:11.530 --> 40:14.530
这就是我们这门客学习的过程

40:14.530 --> 40:15.530
学习的东西

40:15.530 --> 40:16.530
我们这门客学习的

40:16.530 --> 40:17.530
不是开发某一个东西

40:17.530 --> 40:18.530
不是开发时代

40:18.530 --> 40:19.530
我们代码怎么写

40:19.530 --> 40:20.530
这代码怎么写

40:20.530 --> 40:21.530
我们已经告诉你们了

40:21.530 --> 40:22.530
就是模块化标准

40:22.530 --> 40:23.530
该怎么写怎么写

40:23.530 --> 40:24.530
要用什么功能

40:24.530 --> 40:25.530
怎么去划分模块

40:25.530 --> 40:26.530
直接写

40:26.530 --> 40:27.530
那么我们学习的是啥

40:27.530 --> 40:28.530
学习的是

40:28.530 --> 40:30.530
它怎么样把我们的开发时代

40:30.530 --> 40:31.530
来写的东西

40:31.530 --> 40:33.530
变成我们运行时代的

40:33.530 --> 40:35.530
它要考虑哪些问题

40:35.530 --> 40:36.530
哪些问题

40:36.530 --> 40:37.530
分别不同的问题

40:37.530 --> 40:38.530
该怎么去解决

40:38.530 --> 40:42.530
我们学习的这个过程

40:42.530 --> 40:43.530
那么这个构建工具

40:43.530 --> 40:44.530
是不是只有一个呢

40:44.530 --> 40:46.530
当然不是

40:46.530 --> 40:47.530
构建工具有很多

40:47.530 --> 40:48.530
我们学习的是什么

40:48.530 --> 40:50.530
这门客学习的是WePAC

40:50.530 --> 40:51.530
因为目前来讲

40:51.530 --> 40:53.530
所有的构建工具中

40:53.530 --> 40:55.530
WePAC

40:55.530 --> 40:59.530
它是下载量最高的

40:59.530 --> 41:00.530
不信

41:00.530 --> 41:01.530
我们再来N屏幕看一下

41:01.530 --> 41:06.220
N屏幕看一下

41:06.220 --> 41:12.250
WePAC

41:12.250 --> 41:16.250
周下载量在473万

41:16.250 --> 41:17.250
473万

41:17.250 --> 41:21.250
咱们再看一下别的构建工具

41:21.250 --> 41:30.340
比如说Ground

41:30.340 --> 41:31.340
33万

41:31.340 --> 41:32.340
然后呢

41:32.340 --> 41:33.340
Galp

41:33.340 --> 41:34.340
Galp稍微多一点

41:34.340 --> 41:37.340
Galp稍微多一点

41:37.340 --> 41:38.340
66万

41:38.340 --> 41:40.340
它是远远不及WePAC

41:40.340 --> 41:42.340
目前的下载量最多的

41:42.340 --> 41:43.340
应用的最广泛的

41:43.340 --> 41:45.340
公司里面用的最多的

41:45.340 --> 41:47.340
生态最完整

41:47.340 --> 41:48.340
最繁荣的

41:48.340 --> 41:50.340
是WePAC

41:50.340 --> 41:52.340
它不是第一个构建工具

41:52.340 --> 41:53.340
但是呢

41:53.340 --> 41:55.340
它是目前最火热的

41:55.340 --> 41:56.340
构建工具

41:56.340 --> 41:57.340
所以我们学习它

41:57.340 --> 41:58.340
那么后边呢

41:58.340 --> 41:59.340
我要不要去介绍一下

41:59.340 --> 42:01.340
其他的介绍一下

42:01.340 --> 42:02.340
后边呢

42:02.340 --> 42:03.340
我还会着重讲一下

42:03.340 --> 42:04.340
Galp

42:04.340 --> 42:05.340
Galp

42:05.340 --> 42:06.340
它有的时候

42:06.340 --> 42:08.340
会跟这个WePAC联用

42:08.340 --> 42:10.340
我们后边会介绍一下

42:10.340 --> 42:11.340
这些东西呢

42:11.340 --> 42:12.340
这些东西呢

42:12.340 --> 42:14.340
我们只需要知道一下就行了

42:14.340 --> 42:15.340
OK

42:15.340 --> 42:16.340
这几颗呢

42:16.340 --> 42:17.340
我就讲解了

42:17.340 --> 42:18.340
什么叫构建工具

42:18.340 --> 42:20.340
WePAC到底是啥

42:20.340 --> 42:21.340
它要做什么事情

42:21.340 --> 42:23.340
大家有这么一个概念

42:23.340 --> 42:25.340
它为什么会出现

42:25.340 --> 42:26.340
下来过后呢

42:26.340 --> 42:27.340
把这几颗的东西呢

42:27.340 --> 42:28.340
好好去评一下

42:28.340 --> 42:30.340
好好去回顾一下

42:30.340 --> 42:32.340
它这个流程是怎么回事

42:32.340 --> 42:33.340
怎么会出现这个东西

42:33.340 --> 42:35.340
因为你要策击

42:35.340 --> 42:36.340
理解构建工具的话

42:36.340 --> 42:37.340
你就必须要理解

42:37.340 --> 42:38.340
它的来源

42:38.340 --> 42:39.340
它的原因

42:39.340 --> 42:40.340
它为什么会出现

42:40.340 --> 42:42.340
这些问题是怎么产生的

42:42.340 --> 42:43.340
好好去理一下

42:43.340 --> 42:44.340
对你后边理解这个WePAC

42:44.340 --> 42:46.340
是非常重要的

42:46.340 --> 42:47.340
OK

42:47.340 --> 42:48.340
这就是

42:48.340 --> 42:49.340
定结合

