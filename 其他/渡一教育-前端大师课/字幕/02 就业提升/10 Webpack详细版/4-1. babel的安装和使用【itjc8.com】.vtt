WEBVTT

00:00.690 --> 00:05.690
好 这一张呢 我们来解决解释的问题

00:05.690 --> 00:08.690
你看 我们之前解决了样式的问题了

00:08.690 --> 00:13.690
样式的兼容性 样式的书写 这些问题都解决完了

00:13.690 --> 00:17.690
那么 这一张呢 我们来解决主要解决解释的兼容性问题

00:17.690 --> 00:20.690
这一张我们主要学习的技术呢 叫做Babble

00:20.690 --> 00:22.690
Babble这个技术

00:22.690 --> 00:26.690
这个技术呢 它跟那个VIPAC呢 实际上是没有任何关系的

00:26.690 --> 00:30.690
它可以在VIPAC里面使用 但它呢 本身呢 是一个独立的东西

00:30.690 --> 00:33.690
就有点类似于那个PoseCSS

00:33.690 --> 00:35.690
PoseCSS它本身就是独立的

00:35.690 --> 00:39.690
但是它也可以跟着那个VIPAC来使用

00:39.690 --> 00:41.690
这些可能我们首先来认识一下

00:41.690 --> 00:43.690
Babble到底是一个什么玩意

00:43.690 --> 00:46.690
这里呢 有它的官网 以及它民间的中文网

00:46.690 --> 00:47.690
因为它官网是英文的

00:47.690 --> 00:52.690
如果大家要看稳当的话 可以参照这个中文网来进行查阅

00:52.690 --> 00:55.690
这个Babble呢 我首先对它做个简介

00:55.690 --> 01:00.690
这个词啊 首先它是来自于这个西伯兰语 就是一个古语

01:00.690 --> 01:02.690
直以为了巴别塔

01:02.690 --> 01:06.690
下面这张图啊 就是我在百度百科里面看到了个巴别塔

01:06.690 --> 01:11.690
那么这个巴别塔呢 它实际上是有它本身的历史故事

01:11.690 --> 01:14.690
同时呢 也有一些传说故事

01:14.690 --> 01:19.690
这个Babble这个词啊 它其实跟那个传 一个传说有关系

01:19.690 --> 01:24.690
它是什么传说呢 它是那个圣经就业里面的传说

01:24.690 --> 01:27.690
因为现在也都没有用就业了 是吧 都是用的是新约

01:27.690 --> 01:32.690
就业里面呢 它是指的是那个 我记得好像是洛亚

01:32.690 --> 01:37.690
不是以前呢 有一次大洪水嘛 把整个世界都淹了 对吧

01:37.690 --> 01:41.690
然后呢 洛亚啊 这个传说的人呢 它就招了一艘大船

01:41.690 --> 01:45.690
把什么动物啊 自己的老婆儿孩子啊 然后放到船里边

01:45.690 --> 01:48.690
然后呢 就有这么一群人生存了下来

01:48.690 --> 01:51.690
大洪水之后呢 商力就说了

01:51.690 --> 01:55.690
我之后呢 不会再发动大洪水了啊 你们就安心的生活就得了

01:55.690 --> 01:58.690
那么这个洛亚呢 就开始反映它的后代

01:58.690 --> 02:01.690
洛亚的后代就越来越多 越来越多

02:01.690 --> 02:05.690
后来呢 他们这些人呢 就在整个大陆上不断的迁移

02:05.690 --> 02:08.690
有一部分人呢 他就迁移到了东边

02:08.690 --> 02:13.690
也就是古代的巴比伦啊 这么一片领地

02:13.690 --> 02:17.690
现在应该是在哪里的 现在应该是在那个

02:17.690 --> 02:22.690
耶路撒冷的一带啊 迁移到了那片领地过后呢

02:22.690 --> 02:26.690
他们就打算在那个地方呢 去建一个城市

02:26.690 --> 02:30.690
也就是古巴比伦的城市 然后呢 不但要建一座城市

02:30.690 --> 02:33.690
还要建一座高塔 这是为什么呢

02:33.690 --> 02:36.690
因为他们信不过这个商地 你哪一天

02:36.690 --> 02:40.690
再过来一次大洪水怎么办呢 把我们的子孙全部沿了

02:40.690 --> 02:44.690
所以说呢 为了避免这种情况 所以说他们想了建一座高塔

02:44.690 --> 02:49.690
这座高塔呢 有多高呢 他要达到天那么高

02:49.690 --> 02:54.690
就是你商地可以烟雾 但是你烟了 你不能把自己烟了吧

02:54.690 --> 02:58.690
所以说呢 他必须要建的非常非常高 跟天一样高

02:58.690 --> 03:01.690
那么这座塔呢 就是传说中的巴比塔

03:01.690 --> 03:05.690
而商地看不行了 塔建到了一半的时候 商地有点慌了

03:05.690 --> 03:09.690
你不相信我 我感觉自己的尊严受到了侮辱

03:09.690 --> 03:12.690
所以说呢 商地呢 他就来到人间

03:12.690 --> 03:14.690
我也不知道他用了什么样的操作

03:14.690 --> 03:18.690
总之呢 让各种各样的人呢 开始说不同的语言了

03:18.690 --> 03:20.690
以前的语言呢 是统一的

03:20.690 --> 03:23.690
有大家多亚的子孙嘛 都说的是一样的语言

03:23.690 --> 03:26.690
所以说他们建造这个塔的速度非常非常的快

03:26.690 --> 03:30.690
但是商地一来 捣乱 搞得大家都说不一样的话了

03:30.690 --> 03:32.690
大家听不懂我故乡说的话了

03:32.690 --> 03:35.690
那么这座塔呢 自然而然就见不起来了

03:35.690 --> 03:39.690
人们文化和信仰 以及呢

03:39.690 --> 03:42.690
他们说的语言都开始分裂了

03:42.690 --> 03:45.690
所以说这个巴比塔呢 它实际上是有个象征意义

03:45.690 --> 03:50.690
什么象征意义呢 就是象征着统一的国度 统一的语言

03:50.690 --> 03:53.690
就这么一个传说故事 听清楚得了

03:53.690 --> 03:57.690
巴比塔象征着统一的国度 统一的语言

03:57.690 --> 04:00.690
那么这个词啊 到了今天

04:00.690 --> 04:03.690
到我们技术领域呢 它也是差不多的意思

04:03.690 --> 04:06.690
因为我们今天的借势啊 就权端开发里边呢

04:06.690 --> 04:09.690
它就缺少这样一座巴比塔

04:09.690 --> 04:12.690
因为我们不同的流量器 流量器有很多的版本

04:12.690 --> 04:16.690
不同的版本呢 它能够识别的语言标准是不一样的

04:16.690 --> 04:20.690
比方说一些旧的流量器 它只能识别耶稣五的语言

04:20.690 --> 04:23.690
它无法识别耶稣六 尽管了目前呢

04:23.690 --> 04:26.690
这已经过了多少年了 耶稣六出来了有

04:26.690 --> 04:30.690
五年了 对吧 现在是2020年 出来了五年的

04:30.690 --> 04:33.690
那么绝大部分流量器都支持了

04:33.690 --> 04:36.690
但是呢 如果说你的代码要足够的兼容

04:36.690 --> 04:39.690
要兼容很早以前的流量器 那么

04:39.690 --> 04:41.690
它无法识别耶稣六的语言

04:41.690 --> 04:44.690
或者说你要使用一些特别特别新的语法

04:44.690 --> 04:48.690
比方说耶稣2019 或者耶稣2018

04:48.690 --> 04:51.690
这么新的语法的话 那么不用很久的流量器了

04:51.690 --> 04:54.690
稍微就久一点的流量器 它也不能识别

04:54.690 --> 04:57.690
那么就导 总之这个问题就一直存在

04:57.690 --> 05:00.690
就是每个版本的流量器 它能识别的语言标准是不一样的

05:00.690 --> 05:02.690
那么导是呢 我们作为开发者

05:02.690 --> 05:05.690
要为不同的流量器 要得到最大的兼容性

05:05.690 --> 05:08.690
要为不同的流量器去开发不同的语言

05:08.690 --> 05:10.690
就跟古巴比伦建造的这个塔是一样的

05:10.690 --> 05:13.690
大家说的不同的语言 那么这个塔就建造不起来了

05:13.690 --> 05:16.690
所以说跟古巴比伦 跟那个

05:16.690 --> 05:20.690
这个巴比伦一样 前轮开发也面临着这样的困境

05:20.690 --> 05:23.690
而这个babel 这个巴比塔的出现

05:23.690 --> 05:25.690
它就是用来解决这样的问题

05:25.690 --> 05:28.690
它实际上是一个什么 它实际上就是一个编译器

05:28.690 --> 05:31.690
跟那个ness 跟posed CSS差不多

05:31.690 --> 05:33.690
它是可以把管理用什么样的语言

05:33.690 --> 05:36.690
包括里面以后还会接触什么type scripts

05:36.690 --> 05:38.690
它就完全不同的语言了 对吧

05:39.690 --> 05:42.690
它可以把你不同的语言 管理用什么语言的书写的东西

05:42.690 --> 05:46.690
把它转换成统一的 能被各种流量器识别的语言

05:46.690 --> 05:48.690
就是它做的事

05:48.690 --> 05:51.690
我们这里一张图 无论你使用什么样的花式

05:51.690 --> 05:54.690
写出来的语言 它都能够通过babel

05:54.690 --> 05:56.690
转换成接动性的语言

05:57.690 --> 05:59.690
而这个babel的具体的转换方式

05:59.690 --> 06:02.690
它跟posed CSS非常相似

06:02.690 --> 06:04.690
跟posed CSS跟vipack非常相似

06:04.690 --> 06:07.690
它本身仅提供了一些基本的功能

06:07.690 --> 06:09.690
比方说分析语言 语法的功能

06:09.690 --> 06:12.690
它并不会去做具体的转换

06:12.690 --> 06:16.690
那么具体的转换它需要依托于插件来完成

06:16.690 --> 06:18.690
这里下面的一张图

06:18.690 --> 06:20.690
跟那个posed CSS差不多的

06:20.690 --> 06:23.690
你写的语言 管理用什么样的语言

06:23.690 --> 06:24.690
怎么舒服怎么写

06:24.690 --> 06:25.690
写完了之后 交给babel

06:25.690 --> 06:28.690
babel里边它就可以安装一些插件

06:28.690 --> 06:30.690
那么经过这些插件进行转换

06:30.690 --> 06:32.690
那么就可以转换成接动的语言了

06:32.690 --> 06:34.690
每一种插件它转换一部分

06:34.690 --> 06:35.690
就依此交给它

06:35.690 --> 06:37.690
先交给第一个插件 再交给第二个插件

06:37.690 --> 06:39.690
再交给第三个插件

06:39.690 --> 06:40.690
是这么个意思

06:40.690 --> 06:43.690
这是关于babel的简介

06:43.690 --> 06:44.690
很好理解 对吧

06:44.690 --> 06:46.690
好 接下来我们来看babel的安装

06:47.690 --> 06:49.690
这个babel它其实是一个独立的东西

06:49.690 --> 06:52.690
它可以跟构建工具 像vipack的样子

06:52.690 --> 06:54.690
可以跟vipack来进行联用

06:54.690 --> 06:56.690
我们后边会说

06:56.690 --> 06:57.690
也可以独立使用

06:57.690 --> 06:59.690
当然我们先说的是独立使用

06:59.690 --> 07:01.690
如果说你要独立使用的babel的话

07:01.690 --> 07:04.690
那么需要安装下边两个库

07:04.690 --> 07:06.690
一个是前面这个atta

07:06.690 --> 07:09.690
凡是在npm上 我们之前介绍过的吧

07:09.690 --> 07:11.690
npm上有一个叫做命名空间

07:11.690 --> 07:13.690
就是前面加一个atta

07:13.690 --> 07:14.690
表示命名空间

07:14.690 --> 07:16.690
后边那表示你库的名字

07:16.690 --> 07:19.690
那么这个库的名字叫做babel core

07:19.690 --> 07:21.690
这个库 这是库是babel的核心库

07:21.690 --> 07:23.690
跟那个posed cc一样的

07:23.690 --> 07:26.690
posed cc是安装的时候是安装两个

07:26.690 --> 07:27.690
如果要独立使用的话

07:27.690 --> 07:30.690
一个安装一个posed ccs

07:30.690 --> 07:33.690
一个还有安装一个posed ccs cd

07:33.690 --> 07:35.690
很简单 包括vipack也是一样

07:35.690 --> 07:38.690
安装一个vipack 以及安装一个vipack cd

07:38.690 --> 07:40.690
一个是核心库

07:40.690 --> 07:42.690
它提供一些API 对象

07:42.690 --> 07:44.690
一些方法来进行转换

07:44.690 --> 07:47.690
那么这个cd它提供的是一个命令行工具

07:47.690 --> 07:48.690
这个命令行工具

07:48.690 --> 07:51.690
它会调用核心库的API来完成编译

07:51.690 --> 07:53.690
我们用的是啥呢 用的是它

07:53.690 --> 07:55.690
但是它要依赖于它 对吧

07:55.690 --> 07:57.690
所以说两个库都得安装

07:57.690 --> 07:58.690
安装的方式呢

07:58.690 --> 08:00.690
我这里就是安装就行了

08:00.690 --> 08:02.690
我这里已经安装好了

08:02.690 --> 08:04.690
所以说我这里不再重复安装了

08:04.690 --> 08:08.690
我这里目前的版本是7.8.4

08:08.690 --> 08:11.690
无所谓吧 你们安装最新的就行了

08:11.690 --> 08:13.690
这是它的安装

08:13.690 --> 08:16.690
安装好了之后怎么来使用呢

08:16.690 --> 08:18.690
它的使用方式特别简单

08:19.690 --> 08:21.690
这个命令行工具它提供了一个命令

08:21.690 --> 08:23.690
叫做Bible

08:23.690 --> 08:26.690
这个命令一般来说没有两种使用方式

08:26.690 --> 08:28.690
一种是按文件编译

08:28.690 --> 08:30.690
一种是按目录来编译

08:30.690 --> 08:32.690
好 咱们来看一下按文件编译吧

08:32.690 --> 08:34.690
Bible 要编译的文件

08:38.690 --> 08:40.690
编译的结果放到一个文件里边

08:40.690 --> 08:42.690
好 咱们来试一下吧

08:42.690 --> 08:45.690
比方说 这里我们先一个文件夹吧

08:46.690 --> 08:50.130
夹是

08:50.130 --> 08:52.130
好 这里边我们随便建一个文件

08:52.130 --> 08:56.140
好 这里我们随便建一个文件

08:56.140 --> 08:58.140
比方说source

08:58.140 --> 09:00.140
adder.js吧

09:00.140 --> 09:05.140
好 然后这里边我们写上一个辨量

09:05.140 --> 09:06.140
写上一个辨量

09:06.140 --> 09:07.140
const

09:07.140 --> 09:10.140
用一个es6的语法来写上一个常量

09:10.140 --> 09:11.140
adder1

09:11.140 --> 09:12.140
好 接下来编译

09:12.140 --> 09:14.140
好 怎么来编译呢

09:14.140 --> 09:15.140
你看啊

09:15.140 --> 09:17.140
我们就可以使用npx

09:18.140 --> 09:20.140
bible

09:20.140 --> 09:21.140
然后呢

09:21.140 --> 09:22.140
入口文件在哪呢

09:22.140 --> 09:24.140
就是我们的原代码文件在哪呢

09:24.140 --> 09:26.140
js下面的adder.js

09:26.140 --> 09:27.140
好 橫杠O

09:27.140 --> 09:30.140
出口文件就是我们编译的结果放哪呢

09:30.140 --> 09:33.140
比方说放到这个

09:33.140 --> 09:35.140
b.js里边

09:35.140 --> 09:36.140
放到b.js里边

09:36.140 --> 09:38.140
好 又回上

09:38.140 --> 09:40.140
好 你看 是不是多了个b.js

09:40.140 --> 09:41.140
这就是编译结果

09:41.140 --> 09:42.140
对吧

09:42.140 --> 09:44.140
好 这是按文件来编译

09:44.140 --> 09:45.140
按文件来编译

09:45.140 --> 09:46.140
好 也可以按目录来编译

09:46.140 --> 09:48.140
比方说我js里边有点

09:48.140 --> 09:49.140
这个目录下面有两个文件

09:49.140 --> 09:50.140
a和b

09:50.140 --> 09:52.140
我要把整个文件夹到编译过去

09:52.140 --> 09:53.140
好 那怎么编译呢

09:53.140 --> 09:55.140
我们也可以使用npx

09:55.140 --> 09:56.140
bible

09:56.140 --> 09:57.140
然后js

09:57.140 --> 09:59.140
就这个文件夹

09:59.140 --> 10:00.140
橫杠D

10:00.140 --> 10:01.140
橫杠D什么意思

10:01.140 --> 10:02.140
director

10:02.140 --> 10:03.140
表示目录的意思

10:03.140 --> 10:04.140
放到哪个目录呢

10:04.140 --> 10:06.140
放到电视目录嘛

10:06.140 --> 10:07.140
比方说

10:07.140 --> 10:09.140
好 又回车

10:09.140 --> 10:11.140
你看 是不是生成了个电视目录

10:11.140 --> 10:12.140
他把这个js目录的东西

10:12.140 --> 10:13.140
然后电视目录的东西

10:13.140 --> 10:14.140
全部

10:14.140 --> 10:15.140
就是把js目录下面所有东西

10:15.140 --> 10:17.140
编译到这个目录去

10:17.140 --> 10:19.140
就这么简单

10:19.140 --> 10:20.140
也可以呢

10:20.140 --> 10:22.140
加上一个这么一个东西

10:22.140 --> 10:23.140
watch

10:23.140 --> 10:24.140
橫杠W

10:24.140 --> 10:25.140
watch

10:25.140 --> 10:26.140
什么意思

10:26.140 --> 10:27.140
就表示的是

10:27.140 --> 10:28.140
我要监控

10:28.140 --> 10:29.140
它就不会停止了

10:29.140 --> 10:30.140
我要监控文件的变化

10:30.140 --> 10:31.140
比方说我这里改了一下

10:31.140 --> 10:33.140
改成A等于2

10:33.140 --> 10:34.140
保存

10:34.140 --> 10:36.140
这里它就会重新编译

10:36.140 --> 10:37.140
重新编译过后

10:37.140 --> 10:38.140
你看这边

10:38.140 --> 10:39.140
A等于2

10:39.140 --> 10:41.140
就这么简单

10:41.140 --> 10:42.140
非常简单

10:42.140 --> 10:43.140
或者是bible的使用

10:43.140 --> 10:44.140
但是大家看到了

10:44.140 --> 10:46.140
一个现象就是

10:46.140 --> 10:48.140
bible它本身没有做任何事情

10:48.140 --> 10:49.140
你看那个编译结果

10:49.140 --> 10:50.140
跟那个元代

10:50.140 --> 10:52.140
是不是完全一样的

10:52.140 --> 10:53.140
没有任何区别

10:53.140 --> 10:55.140
它本身没有做任何事情

10:55.140 --> 10:57.140
因为它的具体的操作

10:57.140 --> 10:59.140
需要依靠bible插件

10:59.140 --> 11:01.140
和bible预设来完成

11:01.140 --> 11:02.140
什么叫预设

11:02.140 --> 11:03.140
插件我们都知道

11:03.140 --> 11:04.140
什么叫预设

11:04.140 --> 11:06.140
预设跟PoseCSS里面的预设

11:06.140 --> 11:07.140
含义是一样的

11:07.140 --> 11:09.140
我们之前学习PoseCSS里面

11:09.140 --> 11:10.140
是不是有个预设

11:10.140 --> 11:13.140
叫做PoseCSSPresent

11:14.140 --> 11:15.140
对吧

11:15.140 --> 11:16.140
是不是有个预设

11:16.140 --> 11:17.140
那么这个预设里面

11:17.140 --> 11:18.140
我们之前说过

11:18.140 --> 11:19.140
就是包含了一大堆插件

11:19.140 --> 11:21.140
因为发现这些插件都是常用的

11:21.140 --> 11:24.140
把它的功能的功能集合起来

11:24.140 --> 11:26.140
形成一大堆插件

11:26.140 --> 11:27.140
就是个预设

11:27.140 --> 11:28.140
那么bible里面

11:28.140 --> 11:29.140
也是有个预设

11:29.140 --> 11:31.140
就多个插件的集合体

11:31.140 --> 11:32.140
用来解决一系列的

11:32.140 --> 11:34.140
常见的结农性问题

11:35.140 --> 11:37.140
那么如何来告诉bible

11:37.140 --> 11:39.140
要使用哪些插件

11:39.140 --> 11:40.140
使用哪些预设的

11:40.140 --> 11:42.140
需要通过一个配置文件

11:42.140 --> 11:44.140
这个配置文件叫做

11:48.670 --> 11:49.670
那么这里的新建革

11:54.240 --> 11:55.240
就这么一个配置文件

11:55.240 --> 11:57.240
在这个配置文件里面

11:57.240 --> 11:59.240
用节省格式来进行配置

11:59.240 --> 12:01.240
配置的方式大概就这样子

12:01.240 --> 12:03.240
就是它的配置的方式

12:03.240 --> 12:04.240
那么这个配置

12:04.240 --> 12:05.240
什么意思呢

12:05.240 --> 12:06.240
这个地方配置的就是

12:06.240 --> 12:07.240
预设有哪些预设

12:07.240 --> 12:08.240
是一个输出

12:08.240 --> 12:09.240
plugins

12:09.240 --> 12:10.240
这个配置的是

12:10.240 --> 12:12.240
有哪些插件

12:12.240 --> 12:13.240
就这么简单

12:13.240 --> 12:15.240
那么具体有哪些预设

12:15.240 --> 12:16.240
具体有哪些插件

12:16.240 --> 12:18.240
咱们本章后续的课程

12:18.240 --> 12:19.240
再一一讲解

12:19.240 --> 12:21.240
这是本章这一节课

12:21.240 --> 12:22.240
讲到bible的知识

12:22.240 --> 12:23.240
其实很简单

12:23.240 --> 12:24.240
理解那bible的原理

12:24.240 --> 12:26.240
理解它知道它怎么安装

12:26.240 --> 12:27.240
使用以及如何

12:27.240 --> 12:28.240
用什么样的配置就行了

12:28.240 --> 12:30.240
那么后边使用的东西

12:30.240 --> 12:31.240
就是具体的API

12:31.240 --> 12:32.240
具体的插件

12:32.240 --> 12:33.240
具体的预设了

12:33.240 --> 12:34.240
那些东西

12:34.240 --> 12:35.240
听一听

12:35.240 --> 12:36.240
跟着我做一做就行了

12:36.240 --> 12:37.240
OK

12:37.240 --> 12:38.240
那么这是这一节课的内容

