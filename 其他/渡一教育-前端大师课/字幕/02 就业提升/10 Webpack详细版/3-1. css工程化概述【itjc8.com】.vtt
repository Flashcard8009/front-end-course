WEBVTT

00:00.690 --> 00:06.330
这个章节呢 咱们来谈的是CSS工程化的问题

00:07.350 --> 00:11.190
那么这节课呢 我们首先了解一下CSS工程化

00:11.950 --> 00:13.490
什么叫CSS工程化呀

00:14.010 --> 00:16.310
因为我们的项目大了之后

00:16.570 --> 00:19.110
不仅是GS代码变得很多

00:19.370 --> 00:20.650
对吧 我们需要细分

00:21.170 --> 00:23.730
那么CSS代码也会变得很多

00:23.990 --> 00:25.530
它也需要细分

00:25.770 --> 00:27.310
而且呢 不仅如此

00:27.630 --> 00:31.410
再去处理大项目里面的样式的时候

00:31.670 --> 00:32.950
你会遇到更多的问题

00:33.210 --> 00:35.510
它还不像CSS 还不像GS

00:35.750 --> 00:40.110
因为毕竟呢 GS呢 它随着时间的过程啊 它有一些演化

00:40.370 --> 00:45.990
比方说像什么ES5啊 ES6啊 包括ES7 S8啊 后边都没有用这个编号了 都是用连分的 对吧

00:46.770 --> 00:49.070
但是CSS它基本上没有什么演化的

00:49.590 --> 00:50.350
你看啊

00:50.610 --> 00:52.910
我们最早的时候的CSS2

00:53.430 --> 00:54.450
CSS1

00:54.650 --> 00:59.270
那么那个时候CSS怎么写的 不就是一个选择器样式 选择器样式吗 对吧

00:59.530 --> 01:01.310
到了现在是不是还是这样子写的

01:01.830 --> 01:05.410
它无非是多了一些什么 多了一些属像啊 样式属像

01:05.670 --> 01:07.190
多了一些样式的曲子

01:07.450 --> 01:08.490
多了一些单位

01:08.750 --> 01:09.510
如此而已

01:10.270 --> 01:13.590
所以说CSS经过这么多年的演化

01:13.850 --> 01:15.910
并没有什么实质上的变化

01:16.670 --> 01:19.750
而在大工程里边 这些问题呢 很多问题就暴露出来了

01:20.510 --> 01:22.550
因此呢 我们这节可能就要探讨一下

01:23.530 --> 01:26.850
我们这一颗东西跟外派可无关啊 跟外派可一点关系都没有

01:26.850 --> 01:28.650
我们探讨的是CSS本身

01:28.990 --> 01:32.730
它的大工程 大项目里边到底会遇到什么样的问题

01:33.010 --> 01:34.790
已经了 这些问题如何解决

01:35.050 --> 01:36.690
所以我们在目录上呢 分为

01:36.950 --> 01:39.410
两个两部分 一部分呢是讲问题

01:39.650 --> 01:42.210
第二部分呢 是讲怎么去解决这样的问题

01:42.610 --> 01:44.250
那么我们整个章节呢

01:44.250 --> 01:47.010
就是按照这样的顺序来进行讲解的

01:47.090 --> 01:50.150
怎么样具体的一步一步去解决问题的

01:50.690 --> 01:51.450
好 咱们呢

01:51.550 --> 01:52.950
首先来看这个问题

01:53.450 --> 01:54.650
第一个问题呢 是

01:55.150 --> 01:56.910
内鸣冲突的问题

01:57.510 --> 01:59.450
啥意思呢 大家思考一个问题啊

01:59.910 --> 02:03.110
就说你写一个CSS内样式的时候

02:03.950 --> 02:05.650
你是写全局的内啊

02:05.950 --> 02:08.750
还是写多个层级选择之后的内呢

02:09.010 --> 02:11.250
对吧 比方说你写一个样式

02:12.510 --> 02:14.650
写什么样式呢 比方说就写个Test嘛

02:14.810 --> 02:17.250
你是像这样子全局的去写一个内

02:17.650 --> 02:20.250
还是说 咱们前面加了很多啊

02:20.250 --> 02:23.450
加了很多限制啊 什么什么大语符号对吧

02:23.710 --> 02:25.150
然后呢 再写一个样式

02:25.710 --> 02:27.210
你是用哪种写法更好呢

02:28.010 --> 02:30.550
可能呢 经过这么的这么长时间

02:30.550 --> 02:33.410
大家训练呢 应该知道后边这种写法好

02:33.410 --> 02:35.710
对吧 大家想过没有

02:36.350 --> 02:38.510
为什么咱们要用后边这种写法

02:39.010 --> 02:39.510
为什么

02:40.650 --> 02:45.210
就是因为为了避免名称的冲突啊

02:45.210 --> 02:46.710
因为样式一旦多了

02:46.810 --> 02:48.110
特别是页面大了

02:48.110 --> 02:50.470
样式自然而然就会出现非常非常多

02:50.670 --> 02:52.570
页面更多 那么样式就会更多

02:52.810 --> 02:55.410
那么这样子呢 就容易造成名称的冲突

02:55.770 --> 02:57.570
啊 因此呢 我们用这种方式来规避

02:57.910 --> 03:00.470
但这种方式就真的好吗 咱们来看一下

03:00.870 --> 03:01.610
它有什么问题

03:02.070 --> 03:03.770
因为发现它怎么样都不好

03:04.070 --> 03:05.410
为什么说怎么样都不好呢

03:05.770 --> 03:08.210
如果说你写过生的成绩呢

03:08.270 --> 03:09.410
它不利于编写

03:09.410 --> 03:10.910
编写的时候是不是很麻烦

03:10.970 --> 03:12.070
对吧 至少很麻烦

03:12.510 --> 03:13.770
也不利于阅读

03:13.770 --> 03:15.710
本来我还没有读到样式

03:15.710 --> 03:17.410
光续读这个选择器就是一长串

03:17.410 --> 03:18.510
是不是不利于阅读

03:19.210 --> 03:21.210
另外呢 压缩 什么叫压缩呢

03:21.310 --> 03:23.910
就是我们让这个整个CSS

03:23.910 --> 03:25.510
有一些工具可以让这个CSS

03:25.510 --> 03:27.410
把什么换行服去掉啊

03:27.410 --> 03:28.410
把那些包到去掉

03:28.910 --> 03:32.210
压缩过后呢 由于你选择器太深了

03:32.610 --> 03:33.810
嵌烫的太深了

03:33.910 --> 03:35.710
那么导致了打包过后呢

03:35.810 --> 03:38.610
它的CSS代码还是太大

03:39.010 --> 03:39.810
还是太多

03:40.310 --> 03:42.410
因此呢 这些都不利于

03:43.010 --> 03:44.010
不利于这些问题

03:44.410 --> 03:46.010
另外呢 还有一个附用的问题

03:46.210 --> 03:47.410
那你嵌烫的过程呢

03:47.410 --> 03:49.210
那如果说我要附用这个样式呢

03:49.210 --> 03:50.410
又麻烦了啊

03:50.610 --> 03:52.310
我要附用这个样式又麻烦了

03:52.310 --> 03:53.610
你又得重新去写一个

03:53.610 --> 03:55.510
因为这个样式呢 它不好附用

03:55.510 --> 03:57.210
它必须要有很多的限制条件

03:57.210 --> 03:58.810
对吧 前面一大堆的限制条件

03:58.810 --> 03:59.610
它很难附用

04:00.910 --> 04:03.010
那如果你写浅一点好不好呢

04:03.110 --> 04:04.310
写浅一点好了

04:04.310 --> 04:06.510
又会造成名称冲突

04:06.510 --> 04:07.410
总之就是这个问题

04:07.410 --> 04:08.710
就是个命名冲突的问题

04:09.210 --> 04:12.510
如果说我们能够解决命名冲突的问题

04:12.510 --> 04:14.410
是不是根本就不需要这么多成绩

04:14.510 --> 04:16.010
就全部写拳句就可以了

04:16.410 --> 04:17.610
对吧 是不是这个逻辑

04:18.010 --> 04:19.210
它不这样子写

04:19.210 --> 04:21.510
无非就是来解决命名冲突的问题

04:22.010 --> 04:23.210
如果没有命名冲突

04:23.210 --> 04:25.410
那么ok 我们这种写法就挺好的

04:26.310 --> 04:27.610
好 这是这个问题

04:28.410 --> 04:30.510
一旦样式多了

04:30.510 --> 04:31.210
那么这个问题呢

04:31.210 --> 04:33.110
就会突显的越来越严重

04:33.110 --> 04:33.910
其实归根结底呢

04:33.910 --> 04:37.110
这个问题就是内名冲突不好解决的问题

04:37.510 --> 04:38.210
我们过去呢

04:38.210 --> 04:39.410
用了解决办法

04:39.410 --> 04:42.810
就是嵌套很多的成绩来进行选择

04:43.410 --> 04:44.910
这个问题我们先放这

04:45.210 --> 04:46.010
这是一个问题

04:46.810 --> 04:47.710
第二个问题呢

04:48.010 --> 04:48.710
更严重

04:49.210 --> 04:50.510
工程大了这个问题不得了

04:51.210 --> 04:51.810
就是什么呢

04:52.010 --> 04:54.910
就是重复的样式值的问题

04:56.010 --> 04:57.710
什么叫重复的样式值呢

04:58.010 --> 04:58.810
比方说

04:59.410 --> 05:01.610
咱们的网站里面有一个颜色

05:01.710 --> 05:03.310
叫做F40

05:05.210 --> 05:06.310
那么这个颜色呢

05:06.510 --> 05:07.710
是我们的网站的

05:07.710 --> 05:09.810
可能是我们网站的组色雕

05:10.610 --> 05:12.010
那么这个组色雕

05:12.010 --> 05:14.110
它可能会用在各种样式的地方

05:14.210 --> 05:16.710
比方说咱们有一个样式TESLA1

05:17.210 --> 05:19.110
这个样式里面有很多很多代码

05:19.210 --> 05:20.210
然后其中一个代码呢

05:20.210 --> 05:22.410
就是Color F40

05:22.410 --> 05:22.810
对吧

05:22.810 --> 05:24.510
我们的字体颜色是F40

05:25.310 --> 05:25.710
然后呢

05:25.710 --> 05:26.110
一会呢

05:26.110 --> 05:27.310
又来一个样式

05:27.310 --> 05:28.910
可能是TESLA2

05:29.410 --> 05:30.010
它里面呢

05:30.010 --> 05:33.710
有一个Background F40

05:34.010 --> 05:35.010
组色雕

05:35.010 --> 05:36.210
我们经常会用这个颜色

05:36.410 --> 05:37.510
后面一些别的代码

05:39.010 --> 05:39.510
或者呢

05:39.510 --> 05:40.810
有可能还会出现这种情况

05:42.110 --> 05:43.310
还有什么TESLA3

05:44.110 --> 05:44.610
然后呢

05:44.610 --> 05:45.510
一个Hover效果

05:46.010 --> 05:46.610
它里面呢

05:46.610 --> 05:47.410
Hover的时候呢

05:47.410 --> 05:49.310
有一个Color F40

05:49.910 --> 05:50.510
一看啊

05:50.710 --> 05:52.210
这个颜色的纸

05:52.210 --> 05:53.510
是不是到处在重复

05:54.010 --> 05:56.010
那么这种重复有什么问题呢

05:56.510 --> 05:57.410
一旦有一天

05:57.410 --> 05:59.010
我们要更改这个颜色的时候

05:59.010 --> 06:00.610
就会发现到处都要改

06:01.610 --> 06:02.010
对吧

06:02.210 --> 06:03.010
是不是这个问题

06:03.810 --> 06:05.110
而且不仅如此

06:05.110 --> 06:07.110
还有一个更恐怖的事情发生了

06:07.610 --> 06:08.610
什么更恐怖的事情

06:09.010 --> 06:10.010
如果说

06:10.110 --> 06:10.910
我们的网站呢

06:10.910 --> 06:12.210
一般会定一个组色调

06:12.410 --> 06:13.910
比方说F40作为组色调

06:14.510 --> 06:15.510
那么很多

06:15.510 --> 06:17.410
但是网站不只有单一的颜色

06:17.410 --> 06:18.510
它可能有很多的

06:18.710 --> 06:20.210
这种组色调的变种

06:20.510 --> 06:22.510
就是把这个组色调的加深一点

06:22.510 --> 06:23.510
加深一点

06:24.510 --> 06:25.710
有些颜色是加深

06:27.310 --> 06:28.510
红色更多一点

06:28.710 --> 06:29.610
红色更多一点

06:29.910 --> 06:30.510
那么

06:30.910 --> 06:31.910
红色好像不能更多了

06:31.910 --> 06:33.410
比方说绿色更多一点

06:33.510 --> 06:34.210
红绿蓝嘛

06:34.210 --> 06:35.810
那么可能加深过后呢

06:35.810 --> 06:37.610
就变成了F60

06:38.510 --> 06:40.710
那么这个组色调是根据谁来编出来的

06:40.710 --> 06:43.510
这个颜色是根据组色调变化出来的

06:43.510 --> 06:44.010
对吧

06:44.410 --> 06:47.510
那么有可能有一些颜色的用的是F60

06:48.510 --> 06:49.610
问题不得了了

06:50.310 --> 06:51.110
什么不得了呢

06:51.510 --> 06:52.710
将来要改的时候

06:52.710 --> 06:55.610
你会发现组色调一旦变化

06:56.110 --> 06:58.210
我们的组色调变成了不是F40了

06:58.610 --> 07:00.110
是04F

07:00.710 --> 07:01.510
变成了这个

07:02.910 --> 07:05.010
所有的应用组色调的颜色

07:05.010 --> 07:05.810
是会全部要改

07:06.610 --> 07:07.110
对吧

07:07.410 --> 07:08.410
而且呢

07:08.410 --> 07:09.410
不仅如此

07:09.410 --> 07:13.010
根据组色调变化出来的颜色也全部要改

07:13.610 --> 07:14.110
你看

07:14.210 --> 07:15.510
是不是这样子也全部要改

07:16.110 --> 07:16.610
这样子

07:16.610 --> 07:17.210
而且呢

07:17.210 --> 07:18.810
他可能变化的颜色不止一种

07:18.810 --> 07:19.610
可能有很多种

07:19.610 --> 07:20.410
那不得了了

07:21.410 --> 07:22.610
这就是这里

07:23.010 --> 07:24.810
央视值得重复

07:25.010 --> 07:26.410
带来的维护的困难

07:26.610 --> 07:28.210
我这里举的这个例子就是个例子

07:28.510 --> 07:30.310
如果说比如说一个网站的

07:30.310 --> 07:31.310
当然不仅颜色

07:31.310 --> 07:31.810
不仅颜色

07:31.810 --> 07:33.010
比如说字体大小啊

07:33.010 --> 07:35.510
行间距啊等等等等这些问题都会导致

07:36.010 --> 07:37.410
比如说一个网站的颜色呢

07:37.410 --> 07:38.610
一般就那么几种对吧

07:38.610 --> 07:40.210
就拿几种呢

07:40.210 --> 07:43.710
就是组色调一般的信息文字的色调

07:43.910 --> 07:44.210
一般呢

07:44.210 --> 07:47.510
就是警告的颜色错误的颜色

07:47.610 --> 07:49.010
还有一些成功的颜色

07:49.110 --> 07:49.810
当然这是

07:50.810 --> 07:52.110
几种组颜色

07:52.310 --> 07:53.610
那么这几种组颜色呢

07:53.610 --> 07:55.110
还可以发生变种啊

07:55.110 --> 07:56.810
把什么东西把绿色加深一点啊

07:56.810 --> 07:58.110
或者把调亮一点

07:58.210 --> 08:00.810
又会发生一些变种的颜色

08:00.810 --> 08:02.910
但是都是经过这些颜色变种出来的

08:03.410 --> 08:04.410
那么这些颜色一变

08:04.510 --> 08:05.810
那么很多东西都要变

08:07.410 --> 08:08.910
如果说啊

08:09.110 --> 08:10.810
你看啊如果说有更多的颜色呢

08:10.810 --> 08:12.310
都是从这些色流中变化

08:12.410 --> 08:13.010
都来的

08:13.210 --> 08:14.310
可以想象的这些颜色呢

08:14.310 --> 08:17.510
会充斥到什么背景啊文字啊边框当中

08:17.610 --> 08:20.110
一旦颜色要调整就是一个非常大的工程

08:20.210 --> 08:21.510
当然这只是颜色

08:21.610 --> 08:23.410
还有可能是什么字体大小

08:23.710 --> 08:24.410
字体内形

08:24.610 --> 08:25.410
行间距

08:25.610 --> 08:27.710
这些各种各样的问题就会发生啊

08:27.710 --> 08:28.810
重复的样式值

08:29.210 --> 08:30.510
你看这个问题也不好解决

08:31.610 --> 08:32.910
啊这这些东西呢

08:32.910 --> 08:35.410
以前大家可能都没有去想过这样的问题啊

08:35.810 --> 08:36.710
今天我们再看下面

08:37.510 --> 08:39.210
还有就是文件细分的问题

08:39.210 --> 08:40.410
这就跟介石一样的

08:40.910 --> 08:43.110
介石在大工程里边需要细分

08:43.310 --> 08:45.010
那么CSS也需要细分啊

08:45.310 --> 08:47.110
比方说我们要做一个轮波图

08:47.710 --> 08:49.310
这个轮波图的模块

08:49.710 --> 08:51.910
它不仅要介石依赖介石的功能

08:51.910 --> 08:53.410
对吧介石代码要控制它

08:53.810 --> 08:54.410
还要依赖什么

08:54.410 --> 08:56.010
还要依赖CSS样式

08:57.210 --> 08:59.210
那么既然依赖了介石呢

08:59.210 --> 09:01.110
他因为介石他只关心轮波图

09:01.110 --> 09:03.210
对吧他的模块他可以分成小模块

09:03.310 --> 09:05.410
这每一个模块他只关心轮波图

09:05.610 --> 09:06.910
那么CSS样式呢

09:06.910 --> 09:08.610
也应该是只关心轮波图

09:08.610 --> 09:09.410
其他的我不管

09:10.010 --> 09:11.810
这样子解说代码是不是更加

09:12.010 --> 09:13.510
简洁优雅一点

09:13.710 --> 09:14.910
更加好维护

09:15.310 --> 09:16.910
按照一个个的模块来划分

09:17.810 --> 09:18.910
那么由此内推呢

09:19.010 --> 09:19.710
不同的功能

09:19.710 --> 09:21.610
它依赖不同的CSS文件

09:21.910 --> 09:23.110
那么这些CSS文件呢

09:23.110 --> 09:24.910
公共样式呢要单独抽离

09:24.910 --> 09:25.910
那么就形成了

09:26.510 --> 09:28.710
非常非常多的

09:29.010 --> 09:30.510
CSS文件结构

09:30.810 --> 09:33.010
怎么特点呢就是文件会变得非常多

09:33.210 --> 09:34.310
拆分的更细

09:35.010 --> 09:36.710
这个问题跟我们介石是一样的

09:36.910 --> 09:38.410
就是我们写代码的时候呢

09:38.410 --> 09:40.410
希望他拆分的更加细一点

09:41.010 --> 09:43.010
但是呢在真实的运行环境下

09:43.010 --> 09:44.610
我们希望文件越少越好

09:44.610 --> 09:46.610
那么这个情况是不是跟介石一样的

09:46.810 --> 09:48.010
介石呢我们写代码的时候

09:48.010 --> 09:50.510
希望他划分的模块越细越好

09:51.010 --> 09:52.210
但是运行的时候呢

09:52.310 --> 09:54.310
我们希望文件越少越好

09:55.110 --> 09:55.410
对吧

09:55.410 --> 09:59.110
所以说对于CSS也需要工程化

10:01.050 --> 10:03.550
那么这就是文件细分的问题

10:03.550 --> 10:04.350
这三个问题

10:04.350 --> 10:05.150
一个是内名冲突

10:05.150 --> 10:06.050
一个是重复样式

10:06.050 --> 10:07.050
一个是文件细分

10:08.150 --> 10:10.550
那么接下来我们来看如何来解决

10:11.650 --> 10:14.750
第一个关于内名冲突的怎么来解决呢

10:16.050 --> 10:19.350
有一些第三方机构提出来一些方案

10:19.350 --> 10:20.150
来解决这个问题

10:20.150 --> 10:21.550
为什么第三方机构提出来

10:21.750 --> 10:23.550
因为这么多年来官方

10:23.950 --> 10:25.950
一直没有提出方案来解决这些问题

10:26.150 --> 10:27.250
他就视而不见

10:27.450 --> 10:28.850
所以说逼得没办法了

10:29.050 --> 10:30.650
我们前端要做大项目

10:30.650 --> 10:31.450
要工程化

10:31.650 --> 10:32.750
那么官方又不解决

10:32.750 --> 10:34.150
那只能我们自己解决

10:34.650 --> 10:35.850
所以说一些第三方机构

10:35.850 --> 10:36.850
针对不同的问题

10:36.850 --> 10:38.350
提出了自己的解决办法

10:38.850 --> 10:42.050
我们首先来看关于内名冲突的解决办法

10:42.950 --> 10:45.450
第一种办法就是命名规约定

10:46.050 --> 10:47.150
就有些公司的就

10:47.250 --> 10:49.550
他想法我们就不用去搞那么复杂

10:49.550 --> 10:50.450
简单一点

10:50.950 --> 10:52.250
你不是名称冲突吗

10:52.350 --> 10:53.750
我来给你一套规范

10:53.850 --> 10:55.750
你按照这套规范来命名

10:55.850 --> 10:56.850
绝对不会冲突

10:57.750 --> 10:59.950
他就用这种方式来进行

11:00.150 --> 11:00.550
处理

11:01.150 --> 11:01.750
命名规范

11:01.850 --> 11:03.150
那么这个命名规范有哪些

11:03.450 --> 11:04.850
可以看到有这么一些

11:05.150 --> 11:05.950
那么我们这一张

11:05.950 --> 11:07.250
每后必要全部讲完

11:07.350 --> 11:08.350
讲一个就行了

11:08.450 --> 11:09.350
讲这个bn

11:10.050 --> 11:11.350
这些全是规范

11:11.450 --> 11:12.550
这些规范的作用就是

11:12.650 --> 11:15.450
告诉你应该怎么样去命名一个

11:15.650 --> 11:17.050
CSS的内

11:17.450 --> 11:18.950
那么按照他那种命名方式

11:18.950 --> 11:19.950
你就不会冲突

11:21.050 --> 11:22.950
当然这样的命名约定好不好

11:23.050 --> 11:23.750
我们后边

11:24.250 --> 11:26.050
在讲具体的命名规定的约定

11:26.050 --> 11:27.050
就是bm的时候

11:27.050 --> 11:27.950
我们再详细讲解

11:28.750 --> 11:29.650
这些东西都跟什么

11:29.650 --> 11:30.650
WePAC没有任何关系

11:30.650 --> 11:31.750
没有一毛钱关系

11:32.150 --> 11:33.750
都讲的是一个更大的方向

11:33.750 --> 11:35.250
首先我们要提出方案

11:35.350 --> 11:36.250
怎么来解决这个问题

11:36.350 --> 11:37.450
有了方案之后

11:37.450 --> 11:39.050
我们再说怎么去实现它

11:40.750 --> 11:42.850
另一个解决内名冲突的

11:43.750 --> 11:45.350
叫做CSS inJS

11:45.750 --> 11:46.350
看这些东西

11:46.350 --> 11:47.250
一想天开

11:47.250 --> 11:48.250
就特别有意思

11:49.350 --> 11:50.250
他们为了解决这些问题

11:50.250 --> 11:51.450
真的想了好多办法

11:52.050 --> 11:53.850
这种方案就特别的大胆

11:53.950 --> 11:55.150
胆子大到什么程度呢

11:55.550 --> 11:56.650
我不要CSS了

11:57.050 --> 11:57.750
CSS我觉得

11:57.750 --> 11:59.350
他只觉得CSS已经无要可救了

11:59.350 --> 11:59.950
没办法了

11:59.950 --> 12:00.850
官方又不管

12:01.450 --> 12:03.350
但是JS还有希望

12:03.750 --> 12:05.250
因此他就这样想

12:05.650 --> 12:07.750
既然我们这些重复单码

12:07.750 --> 12:08.750
这些乱七八糟的

12:08.750 --> 12:10.450
在CSS里面都会存在

12:10.550 --> 12:12.750
还有什么命名冲突都会存在

12:13.650 --> 12:15.150
但是JS不会

12:15.250 --> 12:16.750
JS用名称冲突的问题

12:16.750 --> 12:17.850
从来没有过

12:17.950 --> 12:18.850
是不是从来没有过

12:19.450 --> 12:21.550
你再我们自从学到ES6过后

12:21.550 --> 12:22.550
你定义辩量

12:22.950 --> 12:23.750
你再一个文件里边

12:23.750 --> 12:24.850
一个模块里边定义辩量

12:24.850 --> 12:26.750
你能定义两个同样的辩量吗

12:26.950 --> 12:27.750
也不可能对吧

12:27.750 --> 12:28.350
也不可能

12:28.350 --> 12:29.650
而且他是有作用欲的

12:29.850 --> 12:31.650
所以说JS天生就不存在

12:31.650 --> 12:32.850
什么命名冲突的问题

12:33.450 --> 12:34.150
第二呢

12:34.650 --> 12:36.650
你不是CSS单码不能重用吗

12:36.650 --> 12:37.850
JS分模块之后

12:37.850 --> 12:39.750
是不是可以重用模块

12:40.150 --> 12:41.450
那我干脆这样子呗

12:41.450 --> 12:42.550
我就放弃CSS了

12:42.550 --> 12:43.450
我不写CSS了

12:43.950 --> 12:46.050
我就专门写什么JS

12:46.150 --> 12:46.750
怎么写呢

12:46.750 --> 12:48.950
就用JS对象来进行解决

12:49.750 --> 12:50.750
咱们后边有一些课

12:50.750 --> 12:51.950
专门来说这个东西

12:52.150 --> 12:53.750
这东西特别特别奇葩

12:54.050 --> 12:54.850
特别特别大胆

12:54.850 --> 12:56.850
我当时看到个方案的时候惊呆了

12:57.750 --> 12:58.850
那么它是什么意思呢

12:59.050 --> 12:59.550
就是说

13:00.050 --> 13:01.350
CSS硬JS

13:01.550 --> 13:03.050
这第二种处理命名

13:03.050 --> 13:04.150
内名冲突的方案

13:04.450 --> 13:05.150
它怎么意思

13:05.250 --> 13:05.750
它就说

13:05.750 --> 13:07.050
如果说我要写样式

13:07.050 --> 13:07.750
我该怎么写

13:07.750 --> 13:08.550
我这样子写

13:09.850 --> 13:10.450
这个什么呢

13:10.550 --> 13:11.550
这个就是

13:12.250 --> 13:12.950
一个Styles

13:13.150 --> 13:13.750
Styles

13:13.950 --> 13:15.250
我写一个JS对象

13:16.650 --> 13:17.150
Color

13:17.650 --> 13:18.150
什么值

13:18.350 --> 13:19.050
F40

13:21.250 --> 13:21.850
然后呢

13:22.050 --> 13:22.650
什么

13:24.650 --> 13:26.750
Background Color

13:27.750 --> 13:28.450
什么什么值

13:28.750 --> 13:29.550
什么什么值

13:29.950 --> 13:30.550
比方说

13:30.650 --> 13:31.950
FundSize

13:32.050 --> 13:32.650
什么什么值

13:32.650 --> 13:33.450
它就这样子写

13:33.650 --> 13:34.550
这样子写在嘛

13:34.550 --> 13:35.950
把它写成一个JS对象

13:36.350 --> 13:37.650
那用的时候怎么用了

13:37.650 --> 13:38.550
它就不管怎么用了

13:38.550 --> 13:39.250
管理怎么用

13:39.250 --> 13:40.550
反正我的意思就是

13:40.550 --> 13:41.250
我的方案

13:41.250 --> 13:42.450
我提出来的方案就是

13:42.550 --> 13:43.650
全部样式这样子写

13:44.150 --> 13:46.050
不去写任何的样式表

13:46.050 --> 13:46.750
都这样子写

13:46.850 --> 13:49.150
这就叫做CSS硬JS

13:49.250 --> 13:49.850
那你看一下

13:49.850 --> 13:51.750
这样子写是真的能解决这样的问题了

13:52.250 --> 13:53.150
所以真的能解决

13:53.550 --> 13:54.550
有没有内名啊

13:54.550 --> 13:56.250
从此以后不存在什么内名的

13:56.350 --> 13:58.850
不存在内名只存在这个JS变量

13:58.950 --> 13:59.550
有没有从头

13:59.550 --> 14:00.450
不可能有从头

14:00.750 --> 14:01.350
对吧

14:01.950 --> 14:02.450
然后呢

14:02.450 --> 14:03.450
它又重复代码了

14:03.450 --> 14:05.250
它甚至还可以解决重复代码的问题

14:05.450 --> 14:06.950
你不是说这个F40

14:07.250 --> 14:08.050
需要重用吗

14:08.050 --> 14:08.350
来

14:08.350 --> 14:09.450
我专门来写个模块

14:09.450 --> 14:10.750
这个模块导出一个东西

14:11.350 --> 14:12.650
margeuxport

14:12.850 --> 14:13.550
导入什么呢

14:14.250 --> 14:16.750
primaryColor

14:16.950 --> 14:17.650
等于什么呢

14:17.650 --> 14:18.450
F40

14:18.850 --> 14:19.950
那么你这里怎么做

14:19.950 --> 14:21.250
这里是不是导入那个模块

14:22.350 --> 14:22.950
require

14:23.050 --> 14:24.050
是不是导入这个模块

14:25.250 --> 14:28.250
模块里边是不是得到primaryColor

14:28.250 --> 14:28.550
对吧

14:28.550 --> 14:29.750
它就用这种方式来处理

14:30.150 --> 14:31.950
而且这种方式非常非常灵活

14:31.950 --> 14:32.550
你看啊

14:32.750 --> 14:34.550
因为CSS变成了一个一个的对象

14:34.550 --> 14:36.750
你就完全可以利用JS语言的优势

14:36.750 --> 14:37.250
你可以做什么呢

14:37.250 --> 14:38.450
各种方向都管理出来

14:39.250 --> 14:40.350
你可以写个函数

14:40.550 --> 14:42.550
这个函数反而回一个样式对象

14:42.550 --> 14:43.150
你看啊

14:43.250 --> 14:44.350
我们这里是直接定义的

14:44.350 --> 14:44.750
对吧

14:44.750 --> 14:46.050
你还可以写个函数

14:46.250 --> 14:48.750
方式getStyles

14:48.950 --> 14:49.550
对不对

14:49.850 --> 14:50.750
这个Styles呢

14:50.750 --> 14:51.550
经过一些处理比方

14:51.550 --> 14:53.350
还经过判断不同的情况下

14:53.350 --> 14:54.150
该怎么怎么样

14:54.750 --> 14:57.550
来返回不同的样式对象

14:57.750 --> 14:58.150
对不对

14:58.350 --> 14:59.750
样式变成一个对象了

15:00.250 --> 15:00.950
你要的意思

15:00.950 --> 15:01.450
他说

15:02.150 --> 15:04.450
你现在不要去管最终怎么去应用

15:04.650 --> 15:05.950
他就是提出一种方案

15:06.350 --> 15:07.350
这个方案怎么着的通

15:07.350 --> 15:09.550
那么还需要大家一起来努力研究

15:09.750 --> 15:10.850
我们后边会专门来解课

15:10.850 --> 15:11.650
来说这个东西

15:11.650 --> 15:12.650
CSSngs

15:13.750 --> 15:14.350
第二呢

15:14.350 --> 15:15.350
把公共样式呢

15:15.350 --> 15:16.950
可以提取到公共模块中返回

15:16.950 --> 15:18.250
比方说像这些公共样式

15:18.250 --> 15:18.650
对吧

15:18.750 --> 15:20.250
还不只是这种公共样式

15:20.350 --> 15:21.650
还有一些比方说

15:21.650 --> 15:23.450
我们有一个样式

15:23.450 --> 15:24.050
比方说

15:25.250 --> 15:25.850
几个例子

15:26.250 --> 15:27.250
比方说我们有一个样式

15:27.250 --> 15:29.750
就是凡式字体

15:29.750 --> 15:32.250
凡式背景颜色为F40的

15:32.750 --> 15:34.550
我们的字体颜色都是白色

15:34.750 --> 15:36.350
那么我们就可以写一个公共样式

15:36.550 --> 15:38.350
Background Color

15:38.550 --> 15:39.950
凡式是这个颜色

15:39.950 --> 15:41.150
凡式是这个颜色的

15:41.350 --> 15:43.850
Color就是一个F40

15:44.450 --> 15:46.550
你看各种花样都可以玩出来

15:46.550 --> 15:47.450
比方说这是一个

15:48.350 --> 15:50.150
common的解释

15:50.350 --> 15:51.250
common的解释

15:52.250 --> 15:53.850
common style叫解释

15:53.950 --> 15:54.950
那么另外一个

15:55.150 --> 15:56.650
另外一个模块

15:56.650 --> 15:59.250
它就引用common style

16:00.350 --> 16:01.250
然后导入进来

16:01.250 --> 16:02.050
导入进来过后

16:02.050 --> 16:06.350
是不是就是一个common style

16:06.350 --> 16:06.650
对吧

16:06.650 --> 16:07.950
导入进来是不是这个玩意

16:08.450 --> 16:08.750
好

16:08.750 --> 16:09.950
导入进来这个玩意过后

16:09.950 --> 16:11.950
你看我们的就写个样式

16:11.950 --> 16:13.250
stiles

16:13.250 --> 16:14.750
那么我们要用到它的公共样式

16:14.750 --> 16:16.650
是不是可以用个解释的语法

16:16.850 --> 16:18.350
common style展开

16:19.350 --> 16:20.550
能看懂吗

16:20.750 --> 16:21.950
把这个对象是不是展开了

16:22.750 --> 16:24.350
那么就是不是把一个

16:24.350 --> 16:25.750
公共样式就应用进来了

16:25.750 --> 16:26.750
还有什么别的样式

16:26.750 --> 16:27.550
是不是就依次写

16:27.550 --> 16:27.950
对吧

16:27.950 --> 16:28.550
依次写

16:28.550 --> 16:29.950
而且还可以覆盖公共样式

16:29.950 --> 16:31.150
就非常非常灵活

16:31.350 --> 16:32.350
它把它变成解释过后

16:32.350 --> 16:33.550
灵活度直接爆表

16:34.950 --> 16:35.950
而且还可以应用

16:35.950 --> 16:37.650
各种解释的操作的

16:38.350 --> 16:39.550
各种特性来操作对象

16:39.550 --> 16:40.450
比方说混合

16:40.450 --> 16:41.450
你看刚才就在混合

16:41.450 --> 16:41.850
对吧

16:42.350 --> 16:42.950
提取

16:43.350 --> 16:44.250
怎么要提取呢

16:44.250 --> 16:46.150
我们可以完全可以写个函数

16:46.350 --> 16:47.850
从一个样式里面提取

16:47.850 --> 16:49.050
比方说我们一看

16:49.050 --> 16:50.250
我们从理论上来说

16:50.850 --> 16:51.450
就是

16:53.850 --> 16:55.350
take提取

16:55.750 --> 16:57.050
给我一个样式

16:57.350 --> 16:58.750
然后给我一些

16:58.850 --> 17:00.750
给我一些属性名

17:00.750 --> 17:02.450
我就把这个样式的属性名提取出来

17:02.450 --> 17:03.250
形成个对象

17:03.250 --> 17:03.950
什么意思呢

17:04.150 --> 17:04.750
什么意思

17:05.050 --> 17:05.550
举个例子

17:05.550 --> 17:06.550
比方说我写这么一个函数

17:06.550 --> 17:08.050
就是各种花样可以玩出来

17:10.510 --> 17:11.310
有这么一个函数

17:11.310 --> 17:12.810
我就可以怎么用take

17:13.510 --> 17:14.210
我希望

17:14.510 --> 17:16.310
common style

17:16.310 --> 17:17.910
我把这个样式里面的

17:18.010 --> 17:19.610
哪些样式提出来

17:19.610 --> 17:20.810
我只提一个color

17:21.010 --> 17:22.510
那么它反而会出来对象的

17:22.510 --> 17:24.410
就应该是一个这么一个东西

17:25.510 --> 17:26.710
就应该是这么一个东西

17:26.710 --> 17:27.610
它只有color

17:27.810 --> 17:28.710
把color为

17:29.510 --> 17:30.410
FFF

17:30.510 --> 17:30.910
对吧

17:31.810 --> 17:32.610
要这里写错了

17:32.610 --> 17:33.510
FFF

17:34.510 --> 17:35.510
是什么意思

17:35.510 --> 17:36.810
那么这个函数怎么很好写

17:36.910 --> 17:38.610
就是从一个对象里面提取

17:38.610 --> 17:39.510
想要的属性

17:39.510 --> 17:40.910
形成一个新的对象反悔

17:40.910 --> 17:41.210
对吧

17:41.210 --> 17:42.410
这很好写的函数

17:43.010 --> 17:44.110
也就是它可以玩出

17:44.110 --> 17:45.410
各种各样的花样出来

17:45.710 --> 17:46.910
还要把我帮我拆分

17:46.910 --> 17:47.810
拆分成多个对象

17:48.510 --> 17:49.310
更多的花样

17:49.510 --> 17:50.810
大家可以自行去发掘

17:51.110 --> 17:51.510
以下

17:52.310 --> 17:54.010
这种方式是大胆的地方就在于

17:54.010 --> 17:55.010
我不要CSS

17:55.110 --> 17:56.310
我直接把它变成GS

17:56.510 --> 17:57.910
那么就可以玩出很多花样出来

17:58.910 --> 18:00.910
但这个东西有个不好的地方在于

18:01.710 --> 18:03.210
它完全打破了

18:03.210 --> 18:05.510
我们对CSS代发的那种感觉

18:05.610 --> 18:06.410
完全打破了

18:06.410 --> 18:08.110
它变成一个普通的GS对象了

18:08.610 --> 18:10.410
那么这种方式就是很不适应

18:10.510 --> 18:12.410
一开始用的时候特别不适应

18:12.610 --> 18:15.110
有的时候感觉过于繁琐了

18:15.310 --> 18:16.110
过于繁琐了

18:17.110 --> 18:18.410
但是它有些地方

18:18.410 --> 18:20.410
确实还在应用

18:20.410 --> 18:21.010
在什么地方

18:21.110 --> 18:22.510
一般来说在手机端

18:22.610 --> 18:25.110
比方说我们后边你们要学习的React Native

18:25.510 --> 18:27.010
就在手机端应用开发的时候

18:27.110 --> 18:29.010
因为手机端它不存在CSS于

18:29.210 --> 18:30.510
不存在CSS样式表

18:30.510 --> 18:31.210
它不存在

18:31.410 --> 18:32.110
那么这个时候

18:32.610 --> 18:34.710
就可以应用这种方式来写它的样式

18:34.810 --> 18:35.710
就特别有意思了

18:36.510 --> 18:36.710
OK

18:36.710 --> 18:38.310
这是关于CSS in GS

18:38.410 --> 18:40.010
都是为了解决内民冲突的问题

18:40.010 --> 18:41.410
你看这种方式不可能冲突了

18:42.110 --> 18:42.710
还一动什么

18:42.710 --> 18:44.510
还叫做CSS module

18:45.010 --> 18:45.810
那么这种方案

18:45.910 --> 18:47.310
我这里就不好解释了

18:47.410 --> 18:49.910
后边我们再讲它具体的这一刻的时候

18:49.910 --> 18:50.410
再想一说

18:50.410 --> 18:54.210
总之这些方案都是为了解决内民的冲突

18:54.810 --> 18:56.210
你看还是能想到办法的

18:56.210 --> 18:57.510
虽然说官方不管

18:57.610 --> 18:58.510
还是能想到办法

18:58.810 --> 19:00.010
只是解决第一个问题

19:00.910 --> 19:01.810
解决第二个问题

19:01.810 --> 19:03.710
是解决重复样式的问题

19:04.510 --> 19:06.210
重复样式又有两种方案

19:06.310 --> 19:07.010
目前主流的

19:07.010 --> 19:08.310
第一种方案就是CSS in GS

19:08.310 --> 19:09.410
刚才我们介绍过了

19:09.410 --> 19:09.810
对吧

19:10.410 --> 19:11.110
我们刚才

19:11.210 --> 19:12.810
你看都变成GS代码了

19:12.910 --> 19:13.710
解决重复样式

19:13.710 --> 19:14.810
就提取成模块

19:14.810 --> 19:16.010
或者提取成函数

19:16.010 --> 19:17.110
提取成各种各样的玩意

19:17.110 --> 19:18.010
随便你怎么提

19:18.710 --> 19:19.710
就是对象的操作了

19:19.710 --> 19:21.110
所以说解决重复样式

19:21.110 --> 19:23.110
在CSS in GS这种方案里边

19:23.210 --> 19:24.610
在这种方案里边不成问题

19:25.210 --> 19:25.910
但是这种方案

19:26.910 --> 19:28.410
由于它太过于激进

19:28.410 --> 19:29.410
太激进了

19:29.410 --> 19:30.510
CSS直接放弃了

19:31.010 --> 19:32.310
因此对于很多什么

19:32.510 --> 19:33.910
写选择器不存在了

19:34.010 --> 19:35.110
不存在什么选择器了

19:35.510 --> 19:37.310
很多习惯于写CSS的

19:37.610 --> 19:39.310
开发者变形起来

19:39.310 --> 19:41.610
那就不是很适应这种方式

19:42.210 --> 19:43.910
这是它自身的一些问题

19:44.610 --> 19:46.210
另外一种解决办法

19:46.310 --> 19:47.510
解决重复样式的办法

19:47.610 --> 19:48.910
叫做预编意气

19:50.510 --> 19:52.210
我也不知道你们之前有没有学过

19:52.210 --> 19:53.410
不管你们有没有学过

19:53.410 --> 19:55.310
反正我要做一个完整的

19:55.310 --> 19:56.110
WePAC课程

19:56.810 --> 19:58.110
因为这些东西是属于

19:58.610 --> 20:00.310
本身它并不属于WePAC

20:00.410 --> 20:03.610
但是它属于WePAC生态环境的一部分

20:04.010 --> 20:05.610
它最终会融入到WePAC

20:05.710 --> 20:07.910
但是它脱离WePAC也可以存在

20:08.310 --> 20:09.110
像这些东西

20:09.210 --> 20:10.210
那么我要把它讲了

20:11.110 --> 20:12.010
预编意气

20:12.110 --> 20:14.110
就是说有些地方它特别聪明

20:14.110 --> 20:14.610
它说

20:15.510 --> 20:18.410
我们这个CSS遇到了这么多问题

20:18.510 --> 20:19.910
根本原因在哪呢

20:20.210 --> 20:23.210
是根本原因在这个CSS语言本身

20:23.410 --> 20:24.910
它很多语法不支持

20:24.910 --> 20:26.110
不支持定义变量

20:26.110 --> 20:26.610
对吧

20:27.310 --> 20:28.810
它不支持定义函数

20:29.010 --> 20:31.510
因此导致了很多重复代码不好提取

20:32.310 --> 20:33.710
那我们能不能这样子呢

20:34.410 --> 20:36.410
我们自己开发一个语言出来

20:36.410 --> 20:37.610
自己搞一个语言出来

20:38.010 --> 20:39.610
它也很像CSS

20:40.010 --> 20:42.210
但是它有比CSS强大

20:42.610 --> 20:45.410
比方说它支持变量函数等高级语法制

20:45.510 --> 20:46.810
搞一个新的语言出来

20:47.310 --> 20:48.210
但这个新的语言呢

20:48.210 --> 20:49.210
浏览器又不认识

20:49.210 --> 20:49.410
对吧

20:49.410 --> 20:50.710
毕竟不是官方出的语言

20:50.710 --> 20:51.910
浏览器又不认识

20:52.110 --> 20:52.510
那行

20:52.510 --> 20:53.310
这个简单

20:53.510 --> 20:54.810
我们经过一个编意气

20:55.410 --> 20:56.410
把这个语言呢

20:56.610 --> 20:57.910
你写的时候呢

20:58.210 --> 20:59.010
写起来很舒服

20:59.010 --> 21:00.110
就有那么高级特性

21:00.710 --> 21:02.610
但是经过编意气编意过后

21:02.710 --> 21:04.610
就变成了一个正常的CSS

21:04.710 --> 21:06.110
它就用这种模式来做

21:07.110 --> 21:08.810
那么像这种方案呢

21:08.810 --> 21:10.610
就叫做用预编意气的方案

21:11.010 --> 21:12.610
就是什么叫预编意气

21:13.010 --> 21:13.910
就是在运行之前

21:13.910 --> 21:15.010
我全给你编意一遍

21:15.210 --> 21:18.210
把你这种玩得很花的这种语言

21:18.210 --> 21:20.710
把它编意成普普通通的CSS

21:21.410 --> 21:22.510
那就是预编意气

21:23.010 --> 21:23.910
那么这种方案呢

21:23.910 --> 21:24.810
特别像构建工具

21:24.810 --> 21:25.810
就像Webhack这样子

21:25.810 --> 21:27.810
Webhack就是让我们叔叔服服写代码

21:27.810 --> 21:28.610
把它编意

21:28.710 --> 21:30.810
那么不用去管它最终编意的结果

21:31.010 --> 21:32.610
那么这个CSS这里也是一样

21:32.610 --> 21:34.410
我们叔叔服服的写CSS代码

21:34.610 --> 21:36.010
利用它的一些高级特性

21:36.410 --> 21:38.010
那么编意过后了

21:38.010 --> 21:40.110
就把它变成一个普普通通的CSS

21:40.410 --> 21:40.810
只不过呢

21:40.810 --> 21:41.310
这种方案呢

21:41.310 --> 21:42.710
虽然说它像构建工具

21:42.810 --> 21:43.310
不过呢

21:43.310 --> 21:45.310
它是仅针对于CSS

21:45.310 --> 21:47.910
我们把它叫做CSS预编意气

21:49.110 --> 21:50.710
常见的预编意气有哪些呢

21:50.710 --> 21:51.810
有NES和SARS

21:51.810 --> 21:52.710
这两个都差不多

21:53.510 --> 21:55.110
实际上开发NES这个语言的人

21:55.110 --> 21:56.110
他本身就是

21:56.310 --> 21:59.110
从SARS这个团队里面跑出来的

21:59.110 --> 22:00.210
所以他们两个差不多

22:00.610 --> 22:00.910
因此呢

22:00.910 --> 22:01.810
我们学一个就行了

22:01.810 --> 22:02.910
咱们学新NES

22:03.210 --> 22:03.910
有兴趣的朋友呢

22:03.910 --> 22:05.010
可以看一下SARS

22:05.110 --> 22:05.910
你只要学完一个

22:05.910 --> 22:06.910
另一个特别简单

22:08.310 --> 22:08.510
好

22:08.510 --> 22:09.410
这是第二个问题

22:09.410 --> 22:10.910
解决重复样式的问题

22:11.510 --> 22:12.810
现在虽然我们没有具体说

22:12.810 --> 22:14.510
每一种方案具体是怎么解决的

22:14.510 --> 22:15.510
咱们后面

22:15.610 --> 22:16.610
每一节课每一节课

22:16.610 --> 22:17.610
会相信来说

22:18.410 --> 22:18.610
好

22:18.610 --> 22:19.510
接下来最后一个

22:19.910 --> 22:22.810
就是解决CSS文件细分的问题

22:22.910 --> 22:25.110
那么这一部分就要依靠构建工具了

22:25.210 --> 22:27.110
比方说Webhack就可以解决

22:27.910 --> 22:29.910
可以写很多很多的CSS文件

22:29.910 --> 22:31.210
它可以把它进行合并

22:31.910 --> 22:32.710
那么怎么合并呢

22:32.710 --> 22:33.810
因为Webhack本身

22:34.210 --> 22:35.310
并不能做这件事

22:35.310 --> 22:35.910
因为他

22:35.910 --> 22:37.010
他要把它当成介石代码

22:37.010 --> 22:37.910
我们之前都演示过

22:37.910 --> 22:38.210
对吧

22:38.210 --> 22:39.310
他要把它当成介石代码

22:39.310 --> 22:40.110
来进行解析

22:40.110 --> 22:41.310
一解析就出问题了

22:41.310 --> 22:42.810
所以说我们要依靠一些loader

22:42.810 --> 22:43.610
或者是plugging

22:43.610 --> 22:44.710
来完成打包合并

22:44.710 --> 22:46.510
或者是压缩CSS文件

22:47.910 --> 22:48.410
通过这一课

22:48.410 --> 22:49.410
大家可以看到

22:49.410 --> 22:51.010
其实在央视这一块

22:51.010 --> 22:52.310
并没有那么简单

22:52.810 --> 22:53.510
甚至呢

22:53.510 --> 22:54.910
在某种程度上来说

22:54.910 --> 22:56.610
它面临的困难

22:56.610 --> 22:57.910
面临的挑战

22:57.910 --> 22:59.110
比介石更多

22:59.110 --> 22:59.810
介石呢

22:59.810 --> 23:02.110
毕竟还有语法的演化

23:02.110 --> 23:03.110
CSS对不起

23:03.210 --> 23:03.910
没有

23:03.910 --> 23:04.510
没有

23:04.510 --> 23:05.410
你说它这么多年

23:05.410 --> 23:06.510
搞出一个什么玩意了

23:06.510 --> 23:07.710
搞出一个keyframe

23:07.710 --> 23:09.910
搞出一个web phone

23:09.910 --> 23:11.210
搞出来了一个

23:11.210 --> 23:12.410
什么享用式

23:12.410 --> 23:12.910
对吧

23:12.910 --> 23:14.010
就是方式DV

23:14.010 --> 23:15.210
那么这些东西

23:15.210 --> 23:16.410
就搞出来这些东西

23:16.410 --> 23:18.610
其他的基本上没有什么变化

23:18.610 --> 23:19.410
像这些

23:19.410 --> 23:20.010
之前遇到

23:20.010 --> 23:21.010
像我们这里遇到的问题

23:21.010 --> 23:22.310
它基本上没动

23:22.310 --> 23:23.110
因此呢

23:23.110 --> 23:24.610
说它面临的挑战更多

23:24.610 --> 23:24.910
因此呢

23:24.910 --> 23:26.410
我单独来开一个章节

23:26.410 --> 23:27.310
来进行

23:27.310 --> 23:28.710
详细的讲解

23:28.710 --> 23:29.710
好吧

23:29.710 --> 23:30.310
当然呢

23:30.310 --> 23:31.410
你说这个章节

23:31.410 --> 23:32.210
它重要不重要呢

23:32.210 --> 23:33.010
它既重要

23:33.010 --> 23:34.210
又不重要

23:34.210 --> 23:35.310
重要的是

23:35.310 --> 23:37.110
如果说你当工程大了

23:37.110 --> 23:38.310
在样式里面遇到了

23:38.310 --> 23:40.710
这些凡数的问题的时候

23:40.710 --> 23:42.510
你脑袋里面至少

23:42.510 --> 23:44.210
你要知道有哪些方案

23:44.210 --> 23:45.210
不要说现在这些方案

23:45.210 --> 23:46.310
具体该怎么去操作

23:46.310 --> 23:48.210
你至少得知道有哪些方案

23:48.210 --> 23:49.410
因为有一些框架

23:49.410 --> 23:50.810
它实际上是应用了

23:50.810 --> 23:52.010
其中一些方案的

23:52.010 --> 23:55.210
或者是其中一些方案的便体

23:55.210 --> 23:56.910
为什么说它不重要呢

23:56.910 --> 23:57.710
它解决的

23:57.710 --> 24:00.710
也仅仅限于一个样式问题

24:00.710 --> 24:02.610
脱离的这个样式的范畅

24:02.610 --> 24:04.110
跟它就毫无关系了

24:04.110 --> 24:05.210
我们一定要搞清楚

24:05.210 --> 24:07.210
每一个知识的边界在哪里

24:07.210 --> 24:07.610
好吧

24:07.610 --> 24:09.010
就是关于这几颗

24:09.010 --> 24:10.410
这一张就讲这么一些那种

