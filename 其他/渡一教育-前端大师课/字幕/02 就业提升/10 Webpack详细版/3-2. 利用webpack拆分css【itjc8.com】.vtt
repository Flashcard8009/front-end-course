WEBVTT

00:01.070 --> 00:05.430
这节课呢 咱们来讲一讲利用webpack来拆分CSS

00:06.070 --> 00:09.910
那么这一块讲的是啥呀 讲的就是我们上节课说的问题

00:09.910 --> 00:13.910
对吧 哪个问题 解决CSS文件细分的问题

00:14.110 --> 00:17.510
我们先把这个讲了 先把这个讲了 这两个才好讲

00:18.510 --> 00:20.790
这个问题呢 这个问题就需要这个构建工具

00:20.790 --> 00:22.070
也就是webpack来解决

00:23.070 --> 00:25.350
那么它是利用一些loader或者是plugging

00:25.350 --> 00:27.550
我们这节课呢 只涉及loader

00:27.550 --> 00:29.750
plugging有一个 我们后边再说

00:30.750 --> 00:32.750
先把这个基本它的解决办法讲了

00:33.350 --> 00:36.950
这节课呢 就涉及两个loader

00:36.950 --> 00:39.550
一个是CSSloader 一个是styleloader

00:40.550 --> 00:42.950
什么意思呢 就说我们今后啊

00:42.950 --> 00:47.350
这个CSS呢 不再是写到哪呢 写到什么public目录

00:47.350 --> 00:49.950
都啊 作为完全静态的资源 不是的

00:50.350 --> 00:52.350
我们是写到哪呢 我们是写到

00:52.350 --> 00:53.950
比方说吧 这个位置呢不一定的

00:53.950 --> 00:55.750
不一定说一定要写到哪个位置

00:55.750 --> 00:58.550
就是我们写到圆骂目录里面 把它当成一个模块

00:58.550 --> 01:00.750
比方说我们在这里有两个CSS文件

01:00.750 --> 01:03.150
一个是banner叫CSS

01:03.150 --> 01:06.550
就是我们的轮波图叫CSS

01:06.550 --> 01:07.950
对吧 我们开发这个模块的时候

01:07.950 --> 01:09.950
就要用到这一块的CSS代码

01:09.950 --> 01:13.150
而另一个模块呢 可能又要用到别的CSS代码

01:13.150 --> 01:15.750
比方说我们pager分业的CSS

01:15.750 --> 01:17.550
就可能用各种各样的CSS

01:17.950 --> 01:20.150
那比方说 我们其中有一个模块

01:20.150 --> 01:20.950
就这个模块吧

01:20.950 --> 01:22.950
比方说它做的是 它既要做分业

01:22.950 --> 01:25.750
又要实现banner 又要实现轮波图

01:25.750 --> 01:27.150
对吧 我们CSS拆开的

01:27.250 --> 01:28.950
拆开到过后 它怎么导入呢

01:28.950 --> 01:30.150
就require

01:30.150 --> 01:32.050
或者是用ES6也行

01:32.050 --> 01:34.350
import 什么也行

01:34.350 --> 01:37.950
我们用common.js导入

01:37.950 --> 01:41.650
而CSS里边的banner叫CSS

01:41.650 --> 01:45.350
再来一个pager叫CSS

01:45.350 --> 01:46.350
就这么回事

01:46.350 --> 01:48.150
就这么个意思

01:48.150 --> 01:49.950
那么现在肯定要爆错对不对

01:49.950 --> 01:51.350
现在肯定是要爆错的

01:51.350 --> 01:54.150
我现在把这些东西该清除了

01:55.150 --> 01:56.950
那么把它保持一个原样

01:56.950 --> 01:59.150
那么现在我们运行 运行肯定要爆错的

02:00.250 --> 02:01.150
至于为什么爆错

02:01.150 --> 02:01.950
我以前讲过了

02:01.950 --> 02:03.550
大家在脑袋里面回忆一下

02:03.550 --> 02:04.350
为什么要爆错

02:06.150 --> 02:06.950
它为啥不爆错

02:08.150 --> 02:10.250
不爆错的原因是我们这里边没写代码

02:10.250 --> 02:10.850
代码都没有

02:10.850 --> 02:12.950
比方说我们写断的CSS代码

02:12.950 --> 02:13.750
就写个read

02:13.750 --> 02:14.950
随便写个CSS代码

02:17.150 --> 02:19.150
那么pager里面我们写个pager

02:20.150 --> 02:21.950
然后take a select

02:21.950 --> 02:23.450
生态 随便写些代码

02:23.450 --> 02:24.550
那么这个时候就要爆错了

02:25.350 --> 02:27.150
这个时候

02:27.150 --> 02:28.350
你看打爆

02:28.350 --> 02:29.150
你看是不是爆错了

02:29.150 --> 02:29.550
为啥呢

02:29.550 --> 02:31.050
分析不出来

02:31.050 --> 02:31.850
他把这个文件

02:31.850 --> 02:33.550
vpager有没有把这个文件内容读出来

02:33.550 --> 02:34.550
有

02:34.550 --> 02:35.050
对吧

02:35.050 --> 02:35.550
还记得吗

02:35.550 --> 02:36.750
当时再看一下吧

02:36.750 --> 02:38.150
这东西要反复看

02:38.150 --> 02:39.550
我们以前的编印过程

02:40.950 --> 02:41.350
可见

02:41.350 --> 02:44.360
拿出来看一下

02:44.360 --> 02:45.660
它怎么转换的

02:45.660 --> 02:46.760
读取文件内容

02:46.760 --> 02:47.360
然后做什么

02:47.360 --> 02:48.460
语法数分析

02:48.460 --> 02:48.860
对吧

02:48.860 --> 02:49.660
分析能分析吗

02:49.660 --> 02:50.260
这个玩意

02:50.260 --> 02:51.660
这个玩意是不是分析不出来

02:51.660 --> 02:53.260
它分析的过程就爆错了

02:53.260 --> 02:54.260
所以说

02:54.260 --> 02:56.360
没有loader来进行处理的话

02:56.360 --> 02:57.660
那么肯定要爆错的

02:57.660 --> 02:59.760
就是之前说过的

02:59.760 --> 03:00.460
那么这个时候

03:00.460 --> 03:02.860
就要利用loader来进行处理

03:02.860 --> 03:04.360
再看一下

03:04.360 --> 03:05.060
为拍个本身

03:05.060 --> 03:06.060
他只能读取

03:06.060 --> 03:07.160
他不是说不能读

03:07.160 --> 03:08.060
他能读

03:08.060 --> 03:09.560
能读css的文件内容

03:09.560 --> 03:10.360
因为他有enema

03:10.360 --> 03:10.660
对吧

03:10.660 --> 03:11.560
英德克斯的介石

03:11.560 --> 03:13.060
他enema的css

03:13.060 --> 03:14.060
他能读

03:14.060 --> 03:14.760
读出来过程

03:14.760 --> 03:16.460
他把他当成介石代码分析

03:16.460 --> 03:17.360
一分析就爆错了

03:18.560 --> 03:19.460
那么这个时候

03:19.460 --> 03:21.160
就必须要有一个loader

03:21.260 --> 03:23.060
他能够将css代码

03:23.060 --> 03:24.660
转换为介石代码

03:24.660 --> 03:25.660
因为他只有介石代码

03:25.660 --> 03:27.060
为拍卡能分析

03:27.060 --> 03:27.860
那么怎么转换呢

03:27.860 --> 03:29.860
这里设计到两个loader

03:29.860 --> 03:30.560
一个个说

03:30.560 --> 03:32.760
首先是最最最最最重要的

03:32.760 --> 03:34.360
css loader

03:34.360 --> 03:35.660
这个loader干嘛用的呢

03:35.660 --> 03:36.660
他的作用就是

03:36.660 --> 03:39.160
将css代码转换成介石代码

03:40.160 --> 03:41.060
一会回来说

03:41.060 --> 03:43.060
css代码还能转换成介石代码

03:43.060 --> 03:44.060
他咋转换呢

03:44.060 --> 03:44.460
我告诉你

03:44.460 --> 03:45.860
他转换的方式

03:45.860 --> 03:47.260
简单到下实力

03:47.260 --> 03:48.060
怎么转换

03:48.060 --> 03:49.460
他就是把css代码的

03:51.260 --> 03:52.060
就完了

03:52.060 --> 03:52.760
他做了

03:52.760 --> 03:54.460
其实他原力特别简单

03:54.460 --> 03:55.360
我们这几颗

03:55.360 --> 03:57.860
使用特别简单

03:57.860 --> 03:59.060
就怎么去使用那些loader

03:59.060 --> 04:00.660
特别特别简单

04:00.660 --> 04:01.860
但是他的原力呢

04:01.860 --> 04:04.160
你要去细咎他的原力

04:04.160 --> 04:05.460
特别特别复杂

04:05.460 --> 04:06.860
特别特别糟

04:06.860 --> 04:07.260
因此呢

04:07.260 --> 04:08.360
我们怎么办呢

04:08.360 --> 04:10.960
原力部分点到机制

04:10.960 --> 04:12.460
如果说有你有兴趣

04:12.460 --> 04:12.760
ok

04:12.760 --> 04:13.660
那么你去看一下

04:13.660 --> 04:14.660
css loader的原码

04:14.660 --> 04:15.560
当然你要有

04:15.560 --> 04:16.560
运动原码能力

04:16.560 --> 04:17.360
称号的同学呢

04:17.360 --> 04:18.960
可能稍微稍微点

04:20.060 --> 04:20.860
点到机制

04:20.960 --> 04:21.860
因为他太复杂了

04:22.660 --> 04:23.560
那么这里呢

04:23.560 --> 04:24.560
我们来看一下

04:24.560 --> 04:25.860
我这里举个例子

04:25.860 --> 04:27.660
比方说我们写了这么一段代码

04:27.660 --> 04:29.260
read color f10

04:29.760 --> 04:30.460
来吧

04:30.460 --> 04:31.660
我们这里就用一个

04:31.660 --> 04:32.960
班纳里面就用这个

04:32.960 --> 04:33.960
color f10

04:34.660 --> 04:35.560
那么index的设计员

04:35.560 --> 04:36.560
去导入这个班纳

04:37.360 --> 04:38.160
导入这个班纳

04:38.560 --> 04:39.660
那么这样子会怎么样呢

04:39.660 --> 04:41.160
他会把这个班纳设计员

04:41.160 --> 04:41.560
读出来

04:41.560 --> 04:41.860
对吧

04:41.860 --> 04:43.060
读出来是一个设计代码

04:43.060 --> 04:46.060
然后交给css loader来进行转换

04:46.060 --> 04:47.460
所以说你是不是要配置一下

04:47.760 --> 04:48.360
一不配置

04:48.360 --> 04:49.260
他怎么转换的

04:49.260 --> 04:50.260
当然你得配置

04:51.260 --> 04:51.860
怎么配置呢

04:51.860 --> 04:54.260
当然你首先得安装这个css loader

04:54.260 --> 04:55.460
你先得安装

04:55.660 --> 04:56.960
安装好了过后呢

04:57.060 --> 04:59.060
然后我们这边来进行配置

05:00.860 --> 05:01.360
什么呢

05:01.360 --> 05:03.860
就是marge rules

05:05.260 --> 05:07.160
然后一个规则

05:07.160 --> 05:07.460
对吧

05:07.460 --> 05:08.060
test

05:08.060 --> 05:10.160
当我们遇到什么样的文件的时候呢

05:10.260 --> 05:13.260
遇到第二css结尾的文件的时候

05:13.260 --> 05:14.060
交给谁呢

05:14.360 --> 05:16.760
又是交给css loader

05:16.760 --> 05:17.260
对吧

05:17.260 --> 05:18.960
这里如果说只有一个loader的话

05:18.960 --> 05:19.860
也可以直接一个

05:19.860 --> 05:20.660
不用写数组

05:21.360 --> 05:22.560
就配置完了

05:23.160 --> 05:24.460
那么他会怎么样呢

05:24.560 --> 05:26.660
他会把我们这个css代码

05:27.060 --> 05:28.760
转换成gst代码

05:30.560 --> 05:32.460
你看转换的方式特别简单

05:32.460 --> 05:34.860
就是把他整个整个整个代码当成一个字幕券

05:34.860 --> 05:36.260
导出导出以外的

05:36.860 --> 05:37.360
当然了

05:37.360 --> 05:38.860
上面的代码是我经过

05:38.860 --> 05:39.960
经过减花的

05:39.960 --> 05:41.460
因为有些东西说这个不复杂

05:41.460 --> 05:42.360
一个很简单

05:42.460 --> 05:43.660
是他很简单

05:43.660 --> 05:44.360
那是我们

05:44.360 --> 05:46.160
那是我们经过减花过后的

05:46.660 --> 05:47.260
真实的

05:47.260 --> 05:49.760
css loader转换的代码是比较复杂的

05:49.760 --> 05:51.160
他要绕起很多的玩

05:51.260 --> 05:51.960
因为呢

05:51.960 --> 05:53.760
他要导出更多的信息

05:53.760 --> 05:55.660
他光是这个字幕券的信息还不够

05:55.660 --> 05:56.960
他要导出更多的信息

05:56.960 --> 05:58.360
但是核心思想不变

05:58.360 --> 06:00.060
他的核心思想就把它装放成这个玩意

06:00.760 --> 06:01.960
不信的话我们来看一下

06:02.160 --> 06:02.960
那么现在呢

06:02.960 --> 06:03.560
他既然

06:03.560 --> 06:06.160
当然你如果说你现在去看这个媒点介石

06:06.460 --> 06:07.360
你看这个媒点介石

06:07.360 --> 06:09.260
那你可能看到的不是这个样子

06:11.260 --> 06:13.260
咱们这里重新那一次

06:13.960 --> 06:14.560
重新

06:16.060 --> 06:16.560
打包

06:18.600 --> 06:19.500
打包完成

06:19.600 --> 06:20.500
看一下这边

06:20.800 --> 06:22.500
你肯定他肯定会出现一个模块

06:22.500 --> 06:23.900
我们这里折叠一下

06:25.100 --> 06:26.600
肯定他除了这个

06:26.600 --> 06:28.100
除了我们这里的模块之外呢

06:28.100 --> 06:29.000
他还会加入了一个

06:29.000 --> 06:30.500
css loader里面一个模块

06:30.500 --> 06:31.500
他会进行辅助处理

06:31.500 --> 06:33.700
说他本身上还是有点复杂度的

06:34.000 --> 06:35.300
而我们的班的点css

06:35.300 --> 06:36.400
他就变成这个样子了

06:36.400 --> 06:37.000
变成这个样子了

06:37.000 --> 06:38.900
你不用去管这个代码里边是怎么写的

06:38.900 --> 06:40.000
你要是细分析的话

06:40.000 --> 06:41.000
还是蛮复杂的

06:41.000 --> 06:43.000
我们就点到棘子

06:43.000 --> 06:44.100
他最终的目的

06:44.300 --> 06:45.300
他导出很多信息

06:45.300 --> 06:46.500
其中有一个信息

06:46.600 --> 06:49.500
就是把这个css变成一个字幕券导出

06:49.500 --> 06:51.100
总之他会他变成介石代码

06:51.100 --> 06:52.300
因为他只要变成

06:52.300 --> 06:53.700
你看这个东西是不是介石代码

06:54.300 --> 06:55.700
只要把它变成介石代码过后

06:55.700 --> 06:58.400
是不是就后续就可以进行抽象语发出分析了

06:58.400 --> 07:00.300
又去根据这个介石去找依赖

07:00.300 --> 07:02.200
然后替换什么依赖函数等等

07:02.200 --> 07:03.600
是不是可以进行处理的

07:03.700 --> 07:05.100
不然的话我也不害个没法处理

07:05.500 --> 07:06.700
就这么个意思

07:07.300 --> 07:08.600
那么他既然你看

07:08.600 --> 07:11.400
他既然导出的是一个这么一个字幕券

07:11.400 --> 07:11.700
对吧

07:11.700 --> 07:13.600
那我们这里是不是可以接收

07:13.600 --> 07:14.900
看一下这个css

07:15.300 --> 07:16.300
他导出的结果

07:17.300 --> 07:18.400
redouge

07:18.400 --> 07:20.000
我们这里是不是可以输出

07:20.700 --> 07:21.900
输出什么redouge

07:23.500 --> 07:25.500
那么这里我建立一个页面

07:29.440 --> 07:30.240
建立一个页面

07:30.240 --> 07:31.240
made.jsc

07:31.440 --> 07:32.740
咱们来运行一下这个页面

07:32.740 --> 07:36.040
看他输出了是不是我们想看到的玩意呢

07:37.240 --> 07:38.440
我们要重新打包

07:40.440 --> 07:40.940
打包

07:41.540 --> 07:42.440
这里放心

07:42.740 --> 07:44.540
你看输出了是不是我们这个玩意呢

07:44.940 --> 07:45.440
不像

07:45.440 --> 07:46.540
不像

07:46.940 --> 07:48.740
输出了有什么有输主

07:48.740 --> 07:49.840
还有什么这个属性

07:49.840 --> 07:51.640
还有什么这个tooth screen

07:51.640 --> 07:52.140
对不对

07:52.240 --> 07:53.640
好像乱七八糟的输出一大堆

07:53.840 --> 07:54.240
但是呢

07:54.240 --> 07:55.240
他里面个tooth screen的方法

07:55.240 --> 07:56.340
就是把它转换成字幕券

07:56.540 --> 07:57.540
把它转换成字幕券

07:57.640 --> 07:58.040
ok

07:58.140 --> 07:59.740
那么既然他可以把它转换成字幕券

07:59.740 --> 08:01.840
那么他就是他得到这个东西

08:01.840 --> 08:03.140
导这个模块导出的东西

08:03.140 --> 08:04.440
他实际上没有那么简单

08:04.440 --> 08:05.640
不是简单的导出一个字幕券

08:05.640 --> 08:06.940
我这里是做了简化

08:07.240 --> 08:07.840
那么他这里呢

08:07.840 --> 08:08.940
实际上导出了一个

08:09.240 --> 08:09.740
输主

08:09.840 --> 08:10.540
导出了一个输主

08:10.540 --> 08:12.040
之路里面还加了一个tooth screen

08:12.240 --> 08:13.940
那ok我们就调用他的tooth screen

08:14.440 --> 08:15.740
tooth screen就返回一个字幕券

08:16.040 --> 08:16.740
看一下

08:17.040 --> 08:17.540
保存

08:18.040 --> 08:18.440
然后呢

08:18.640 --> 08:20.140
刚才我开个watch得了

08:20.540 --> 08:21.640
免得太麻烦了

08:21.840 --> 08:22.540
开个watch

08:25.740 --> 08:26.240
ok

08:26.340 --> 08:26.940
那这里

08:27.240 --> 08:27.640
再来

08:29.440 --> 08:29.840
好

08:29.940 --> 08:30.540
那么你看

08:30.840 --> 08:31.340
刷新

08:31.940 --> 08:32.340
你看

08:32.540 --> 08:33.140
是不是

08:33.440 --> 08:34.640
就是我们的视野色代码

08:34.640 --> 08:34.840
对吧

08:34.840 --> 08:35.640
就是一个字幕券

08:36.040 --> 08:37.540
实际上他本质上呢

08:37.840 --> 08:38.940
其实就这么简单

08:38.940 --> 08:39.340
但是呢

08:39.340 --> 08:40.040
他的细节呢

08:40.040 --> 08:40.840
还是蛮多的

08:41.540 --> 08:41.640
好

08:41.640 --> 08:42.840
这是个最简单的例子

08:43.340 --> 08:44.640
然后我们再来看一个例子

08:44.740 --> 08:45.440
再来看一个例子

08:45.440 --> 08:46.140
稍微有点

08:46.140 --> 08:47.540
稍微带点复杂度的例子

08:48.240 --> 08:49.240
就是我们的视野色代码

08:49.240 --> 08:50.140
可能是这个样子

08:51.340 --> 08:51.940
看着啊

08:52.540 --> 08:53.540
我们的视野色代码

08:53.540 --> 08:54.540
可能是这个样子

08:55.740 --> 08:56.340
可以

08:58.140 --> 08:58.540
单了

08:58.540 --> 08:59.540
我们就直观班了

08:59.540 --> 09:00.340
好

09:00.340 --> 09:01.340
这里我们代码是这个样子

09:01.340 --> 09:02.140
就是这里边呢

09:02.140 --> 09:03.440
有byground的url

09:03.640 --> 09:04.740
bg.png

09:04.840 --> 09:05.640
有这个东西

09:05.940 --> 09:06.540
那么这个东西

09:06.540 --> 09:07.440
他是不是原封不动的

09:07.440 --> 09:08.640
把那个字幕券导出呢

09:08.940 --> 09:09.440
没有

09:09.740 --> 09:10.240
因为

09:10.440 --> 09:11.540
cssnoder

09:11.540 --> 09:13.540
他不仅要把这个字幕券导出

09:13.540 --> 09:15.640
他还要分析这个cssnoder

09:15.640 --> 09:17.140
有没有依赖其他文件

09:17.440 --> 09:18.640
有没有依赖其他资源

09:18.740 --> 09:19.540
如果有的话

09:19.540 --> 09:21.040
他还他还会进行处理

09:21.640 --> 09:22.440
那么他比方说

09:22.440 --> 09:23.740
他就分析这个css代码

09:23.840 --> 09:25.640
你可以觉得他用这种表达是分析的

09:25.840 --> 09:27.340
他分析这个css代码一分析

09:27.440 --> 09:27.740
哎

09:27.740 --> 09:28.440
发现这里

09:28.840 --> 09:31.540
是不是还有一些别的文件在使用

09:31.540 --> 09:31.940
对吧

09:32.140 --> 09:33.040
那也就说这个文件

09:33.040 --> 09:34.040
是不是依赖别的文件啊

09:34.040 --> 09:34.840
依赖这个文件

09:35.140 --> 09:36.440
这个bg.png

09:37.240 --> 09:38.240
是不是依赖这个东西

09:38.440 --> 09:39.840
那么他既然依赖这个东西的话

09:39.840 --> 09:40.540
他经过转

09:40.640 --> 09:42.240
他会把他变成什么呢

09:42.240 --> 09:42.840
你看下面

09:43.940 --> 09:45.240
他把变成这种模式

09:45.740 --> 09:46.440
他首先呢

09:46.440 --> 09:49.140
他会require一个bg.png

09:49.740 --> 09:52.040
然后保存到一个东西里边啊

09:52.540 --> 09:52.840
然后呢

09:52.840 --> 09:53.540
导出了制服

09:53.540 --> 09:54.240
出来里边呢

09:54.240 --> 09:55.740
他会把这个导入的东西呢

09:55.740 --> 09:56.340
放到这

09:56.640 --> 09:58.340
他会形成这么一种代码格式

09:58.940 --> 09:59.540
没了意思吧

09:59.540 --> 10:01.140
他会形成这么一种代码格式

10:01.840 --> 10:02.040
啊

10:02.040 --> 10:04.040
这是他的他的这种处理方式

10:04.240 --> 10:04.940
那么这样子呢

10:04.940 --> 10:06.140
你想想你想想一下

10:06.140 --> 10:07.740
这个代码交给那个

10:07.840 --> 10:08.940
vipack一处理

10:08.940 --> 10:10.940
你看vipack进行抽象与法术分析

10:10.940 --> 10:12.340
一分析就不得了了

10:12.640 --> 10:13.040
哎

10:13.040 --> 10:13.640
他一分析

10:13.640 --> 10:14.940
vipack他不知道怎么回事

10:15.040 --> 10:16.540
vipack拿到代码就是这个代码

10:16.940 --> 10:18.240
那么vipack一分析这个代码

10:18.240 --> 10:19.340
是不是就找到他依赖了

10:19.840 --> 10:20.940
是不是几乎依赖

10:20.940 --> 10:21.540
他依赖谁

10:21.540 --> 10:22.340
是不是依赖这个

10:22.640 --> 10:23.140
对吧

10:23.240 --> 10:24.240
那么一会呢

10:24.240 --> 10:25.840
他是不是要去处理这个模块

10:25.840 --> 10:26.340
对不对

10:26.340 --> 10:27.040
那么这个模块呢

10:27.040 --> 10:28.240
又去经过处理

10:28.540 --> 10:29.340
就这么回事

10:30.040 --> 10:31.140
懂这个意思就行了啊

10:31.140 --> 10:31.940
不用去

10:32.340 --> 10:34.240
啊不用去特别特别细久

10:34.240 --> 10:35.440
不然的话特别糟

10:35.840 --> 10:36.540
那么他会

10:36.640 --> 10:38.040
总之他会形成一个依赖

10:38.840 --> 10:40.340
啊那么这样子进来了

10:40.340 --> 10:40.840
你看一下

10:40.840 --> 10:42.740
现在打包是爆错了

10:43.940 --> 10:44.640
爆错了

10:44.640 --> 10:45.640
为什么会爆错

10:45.840 --> 10:46.340
因为呢

10:46.340 --> 10:47.840
vipack他一分析

10:47.940 --> 10:49.940
哎你还有其他一代一代谁呢

10:49.940 --> 10:51.140
他分析这个代码

10:51.240 --> 10:53.040
你依赖的是bg.png

10:53.040 --> 10:55.140
能不能找到能找到bg.png

10:55.440 --> 10:56.640
那么他下一次

10:56.740 --> 10:57.540
他下一次

10:57.840 --> 10:58.640
处理模块的时候

10:58.640 --> 11:00.840
是不是要处理这个bg.png这个模块

11:01.140 --> 11:01.840
那么这个模块呢

11:01.840 --> 11:03.540
都算是个二镜制二镜制

11:03.940 --> 11:05.140
依抽象与法术分析

11:05.140 --> 11:06.040
你看又来了

11:06.040 --> 11:06.540
对吧

11:06.940 --> 11:08.240
啊有与法错误

11:08.340 --> 11:09.340
对不对又来了

11:09.340 --> 11:10.340
他又分析不出来

11:10.540 --> 11:11.140
所以说呢

11:11.140 --> 11:12.540
当我们在css里边

11:12.540 --> 11:14.240
用到了别的模块的时候啊

11:14.240 --> 11:16.240
用到了别的资源文件的时候

11:16.440 --> 11:17.640
那么对应的资源文件

11:17.640 --> 11:18.440
如果不是js

11:18.440 --> 11:20.540
当然css里边也不会去导入什么js

11:20.940 --> 11:22.440
那比方说一个背景图

11:22.440 --> 11:23.640
遇到其他图片的时候

11:23.740 --> 11:24.840
由于

11:25.340 --> 11:27.640
css他会把它变成这种格式

11:27.840 --> 11:28.240
因此呢

11:28.240 --> 11:29.640
你要对这种模块

11:29.640 --> 11:31.740
也要写一个loader来进行处理

11:32.140 --> 11:32.540
对吧

11:32.940 --> 11:34.140
比方说我们写成什么loader呢

11:34.140 --> 11:35.840
我们之前不是学过fireloader吗

11:36.340 --> 11:38.040
fireloader不是在处理这种问题的吗

11:38.040 --> 11:38.340
ok

11:38.340 --> 11:40.740
那么我们完全就可以再配置一个规则

11:40.740 --> 11:41.640
这是一个规则

11:41.640 --> 11:42.040
对吧

11:42.040 --> 11:42.840
再来一个规则

11:43.740 --> 11:44.240
test

11:45.740 --> 11:47.740
然后以什么png

11:47.740 --> 11:49.340
我们就不写别的图片了

11:49.340 --> 11:51.040
当然也可以加入一些别的图片

11:51.040 --> 11:52.040
我们之前都写过

11:52.140 --> 11:53.040
然后这种情况下呢

11:53.040 --> 11:54.740
我们又是fireloader

11:55.640 --> 11:57.240
那么这样子一来一看就不一样了

11:57.240 --> 11:58.240
我们这里要停止

11:59.240 --> 12:00.440
这样子一来就不一样了

12:01.540 --> 12:02.240
什么不一样呢

12:02.240 --> 12:02.840
你看啊

12:03.540 --> 12:05.840
那么由于他处理的fireloader

12:05.840 --> 12:07.440
fireloader这个东西会返回什么了

12:08.040 --> 12:09.240
fireloader会返回什么

12:09.940 --> 12:13.340
是不是会返回一个文件的路径

12:13.640 --> 12:14.040
对吧

12:14.240 --> 12:16.040
那么他是不是把路径保存起来了

12:16.040 --> 12:17.840
然后路径放到这

12:18.240 --> 12:19.040
路径放到这

12:19.040 --> 12:21.640
是不是就这里又要变成了一个真实的文件路径了

12:21.940 --> 12:22.240
对不对

12:22.240 --> 12:23.040
就这么简单

12:23.540 --> 12:24.140
听懂了吗

12:24.140 --> 12:24.940
就这么简单

12:25.740 --> 12:26.240
ok

12:26.240 --> 12:27.140
那么这里呢

12:27.440 --> 12:28.140
你看一下啊

12:28.140 --> 12:28.840
咱们来打报

12:31.970 --> 12:33.470
当然他原理方面啊

12:33.470 --> 12:34.570
你看文件路径出来了

12:34.570 --> 12:35.070
对吧

12:35.070 --> 12:35.770
文件路径出来了

12:35.770 --> 12:37.770
然后我们看一下这边输出的结果

12:38.370 --> 12:38.870
刷新

12:39.470 --> 12:39.870
你看

12:40.070 --> 12:42.270
输出了是不是带这个文件的路径

12:42.470 --> 12:43.870
路径就替换掉了

12:44.270 --> 12:46.170
什么替换掉了这个位置啊

12:46.770 --> 12:50.270
如果说你特别这个原理这部分容易晕的话

12:50.370 --> 12:51.670
那么我建议你呢

12:51.770 --> 12:53.270
你就知道他的结果就行了

12:53.270 --> 12:54.070
他生生什么结果

12:54.070 --> 12:55.670
他生生就是个字幕刷啊

12:55.770 --> 12:57.270
该有一代的地方他会替换

12:57.370 --> 12:58.070
替换的时候呢

12:58.070 --> 12:59.870
他会有形成另一个一代关系

12:59.870 --> 13:01.470
就在这里会一代别的模块

13:01.470 --> 13:02.270
那么别的模块

13:02.270 --> 13:04.470
肯定要相运的loader来处理啊

13:04.470 --> 13:05.770
那么你要去配置一下

13:05.770 --> 13:07.270
不配置的话处理不了

13:08.270 --> 13:08.570
ok

13:08.570 --> 13:09.870
那么最终形成这个东西了

13:09.870 --> 13:10.570
他会把那个loader

13:10.570 --> 13:11.970
夹在的导出的结果呢

13:11.970 --> 13:12.770
放到这个位置

13:14.270 --> 13:15.270
当然你也可以用什么

13:15.270 --> 13:16.270
url loader对吧

13:16.270 --> 13:17.970
那么这里有可能会形成一个

13:18.370 --> 13:19.470
bass64的编码

13:19.570 --> 13:20.870
也有可能比方说

13:20.870 --> 13:21.770
我们来用一下吧

13:21.870 --> 13:22.470
用一下

13:23.870 --> 13:25.170
说了都是白说

13:25.470 --> 13:26.270
不要用一下

13:27.870 --> 13:29.270
npm i 钢地

13:29.870 --> 13:30.470
叫做什么呢

13:30.470 --> 13:32.070
url loader

13:35.140 --> 13:35.840
来看一下啊

13:36.340 --> 13:37.240
那么这里的配置呢

13:37.240 --> 13:38.040
我们就改一下啊

13:39.540 --> 13:40.640
可以改成这种格式

13:43.320 --> 13:43.920
嗯

13:44.620 --> 13:45.120
loader

13:45.820 --> 13:47.320
嗯 url loader

13:48.120 --> 13:49.220
嗯然后呢

13:49.320 --> 13:50.020
options

13:50.520 --> 13:51.120
option

13:51.520 --> 13:51.820
嗯

13:54.440 --> 13:56.040
option 呢这里是nemes

13:56.040 --> 13:57.140
呃nemes 我不写了啊

13:57.140 --> 13:57.840
不写了

13:57.840 --> 13:58.440
就这样吧

13:58.440 --> 13:58.940
啊就这样

13:58.940 --> 13:59.340
我算了

13:59.340 --> 14:00.540
我就不用这么复杂

14:00.740 --> 14:01.440
简单一点啊

14:01.440 --> 14:02.140
好简单一点

14:02.540 --> 14:03.640
嗯 url loader

14:03.840 --> 14:04.540
你看一下吧

14:05.040 --> 14:05.840
保存啊

14:05.840 --> 14:06.240
咋了

14:06.840 --> 14:07.340
打包

14:10.920 --> 14:11.920
好打包完成

14:12.020 --> 14:12.820
然后这里刷新

14:13.220 --> 14:13.620
你看

14:14.420 --> 14:16.120
是不是url里面就变成data

14:16.320 --> 14:17.420
啊就是这个这个东西

14:17.520 --> 14:17.920
对吧

14:17.920 --> 14:19.020
变成了这个东西了

14:19.220 --> 14:20.820
啊就是这么这么回事啊

14:20.820 --> 14:21.520
就这么回事

14:21.520 --> 14:22.920
那么这个东西到底是啥

14:22.920 --> 14:24.420
就是url里面到底是啥

14:24.420 --> 14:26.420
取决于其他模块的处理结果

14:26.420 --> 14:28.720
他会把其他模块的处理结果

14:29.020 --> 14:30.520
啊其他模块的处理结果

14:30.520 --> 14:31.420
放到这个位置

14:32.820 --> 14:34.220
那么分析这个模块一带

14:34.320 --> 14:35.820
是个cc loader的分析

14:36.020 --> 14:36.820
就这么回事

14:37.520 --> 14:38.720
好那么这样一带呢

14:38.920 --> 14:41.220
就这个带嘛交给那个vpac一处理啊

14:41.220 --> 14:43.420
一处理它不仅保存了一带关系

14:43.420 --> 14:45.120
要去处理其他模块啊

14:45.120 --> 14:46.320
然后呢还会怎么样呢

14:46.320 --> 14:46.920
还会

14:47.520 --> 14:49.320
呃呃去替换什么替换

14:49.320 --> 14:51.320
你看这里啊替换那个依赖函数对吧

14:51.320 --> 14:53.520
他的依赖函数会不会被替换成vpac

14:53.720 --> 14:54.220
require

14:54.220 --> 14:56.020
还会被替换成这个东西啊

14:56.020 --> 14:58.520
最终就可以就变成了一个可以执行的gstime

14:58.920 --> 14:59.420
对不对

15:00.220 --> 15:02.120
好再来一个例子啊再来一个例子

15:02.520 --> 15:04.520
这个例子呢就显得更加有意思了

15:04.920 --> 15:07.820
如果说你的css里面去导入别的css呢

15:08.320 --> 15:10.520
利用import去导入别的别的资源

15:10.520 --> 15:12.720
那么他也是一样的啊也是一样的

15:12.720 --> 15:13.720
看一下看一下啊

15:13.920 --> 15:15.720
咱们在css里面去导入别的

15:15.720 --> 15:18.120
我们在banner.css里面去导入别的css

15:18.120 --> 15:19.320
比方说我们导入import

15:20.320 --> 15:21.520
导入的是啊

15:22.620 --> 15:23.120
呃

15:24.020 --> 15:25.120
pager.css

15:25.420 --> 15:26.120
导入这个

15:26.120 --> 15:27.320
那么他又会怎么样呢

15:27.420 --> 15:28.120
很简单

15:28.120 --> 15:30.720
他就会把pager.css的结果放到

15:31.320 --> 15:32.520
这个位置来啊

15:32.520 --> 15:33.720
把它合并起来

15:33.720 --> 15:35.120
那我们来看一下啊

15:35.120 --> 15:37.020
如果说导入这个recorder.css

15:37.020 --> 15:38.120
我们换了个名字

15:38.120 --> 15:39.420
那么他会怎么样呢

15:39.420 --> 15:41.120
他会形成新的依赖关系啊

15:41.120 --> 15:43.020
他就说他依赖这个css

15:43.020 --> 15:44.520
把这个css的运行的结果

15:44.520 --> 15:46.720
那么这个结果不就是一个css支付创业吗

15:46.720 --> 15:47.120
对吧

15:48.120 --> 15:49.820
然后再把这个文件的结果

15:49.820 --> 15:51.220
就是生成就是这个路径

15:51.320 --> 15:52.720
然后呢把这个拼接起来

15:52.920 --> 15:53.120
对吧

15:53.120 --> 15:54.020
把自己的内容

15:54.220 --> 15:56.720
和那边依赖的内容拼接起来

15:57.320 --> 15:59.120
我这里是全是简化了啊

15:59.120 --> 15:59.820
全是简化了

15:59.820 --> 16:01.020
实际上情况比较复杂

16:01.020 --> 16:02.320
但是你可以这么去想象

16:02.320 --> 16:03.420
这样就好理解了

16:03.920 --> 16:04.720
好那么这样子呢

16:04.720 --> 16:06.220
一写啊我们这里刷新

16:08.420 --> 16:10.120
你看前面是不是加了一个pager

16:10.220 --> 16:12.320
就是把pager文件的内容是不是放过来了

16:12.520 --> 16:12.920
对吧

16:13.520 --> 16:13.820
啊

16:14.320 --> 16:15.120
也就是说他就这样

16:15.120 --> 16:16.220
他就是这样处理的

16:16.420 --> 16:18.420
因此cssloader干了什么事呢

16:18.820 --> 16:20.420
cssloader做的事情呢

16:20.420 --> 16:22.920
就特别简单啊做了什么事情

16:23.020 --> 16:23.720
第一个呢

16:23.720 --> 16:26.520
是把css文件的内容作为制服创导出

16:26.520 --> 16:28.320
就是形成这么一种格式啊

16:28.320 --> 16:29.420
形成这么一种格式

16:30.320 --> 16:31.120
然后呢

16:31.520 --> 16:32.020
啊

16:32.720 --> 16:34.820
把其他的依赖作为require导入

16:34.820 --> 16:36.820
以便微pac来分析依赖啊

16:36.820 --> 16:38.820
比方说css代码里面有像一种依赖啊

16:38.820 --> 16:39.820
依赖型的东西呢

16:39.820 --> 16:40.620
他就会啊

16:40.620 --> 16:43.720
他就会把它变成require的方式来导入

16:44.020 --> 16:45.020
就做了这么一件事

16:45.420 --> 16:47.020
就在本质上就做这么一件事啊

16:47.020 --> 16:48.520
如果他说细节的话比较多

16:48.520 --> 16:49.720
我们不用去分析细节

16:49.820 --> 16:50.820
点到机制

16:51.120 --> 16:51.620
明白了

16:51.820 --> 16:54.020
如果说再再从一个更高的角度来看

16:54.020 --> 16:54.920
这个cssloader

16:55.020 --> 16:55.920
那么他干嘛的

16:56.020 --> 16:58.820
就是把css代码转换成jess代码

16:58.820 --> 17:00.020
把css代码里面的字

17:00.120 --> 17:01.820
代码的所有代码变成一个制服创导出

17:01.820 --> 17:03.120
啊就更高的角度来看

17:03.120 --> 17:03.920
就这么简单

17:05.120 --> 17:05.520
其实

17:05.920 --> 17:07.520
我们就算用这种角度来看

17:07.520 --> 17:10.020
他也不会影响我们后边对他的使用

17:10.720 --> 17:12.120
OK就是cssloader

17:13.020 --> 17:15.020
好那么这个cssloader导出要预啥用的

17:15.020 --> 17:15.620
一看啊

17:15.620 --> 17:16.620
不要动我们页面上

17:17.620 --> 17:19.520
啊我们刚才不是一个内样式吗

17:19.520 --> 17:20.520
啊什么内样式

17:21.020 --> 17:23.520
啊read啊这个内样式来吧

17:23.920 --> 17:26.420
咱们呢这里呢来写这么一个

17:27.620 --> 17:30.720
写这么个tav啊就应用这个内样式class

17:30.920 --> 17:32.820
怎么了啊read对吧

17:33.120 --> 17:36.320
啊这里边呢我们写上一些文字嘛

17:36.320 --> 17:38.120
Laurent是个文字

17:38.320 --> 17:41.020
那么这里呢我们再给这个read呢设置个宽高嘛

17:41.020 --> 17:41.720
宽度

17:42.620 --> 17:43.320
100个箱数

17:44.220 --> 17:45.720
300啊高度

17:46.620 --> 17:47.020
300

17:48.020 --> 17:51.120
啊或者是600啊随便写个啊随便写一个

17:51.520 --> 17:52.120
嗯

17:53.620 --> 17:54.320
是个border嘛

17:54.720 --> 17:55.120
border

17:56.820 --> 17:57.620
两个箱数

17:58.020 --> 17:58.720
solid

17:58.920 --> 18:00.120
好设置好

18:00.920 --> 18:04.220
然后呢咱们干脆不用这个url的啊

18:04.220 --> 18:05.820
不用那个firel的来看的

18:06.420 --> 18:07.920
看的呢稍微清脆一点

18:08.420 --> 18:09.420
看的稍微清脆一点

18:09.420 --> 18:10.120
所以打个棒

18:13.700 --> 18:14.900
好打包完成

18:15.000 --> 18:16.800
那么这里刷新你看是不是变成这个样子

18:17.100 --> 18:19.100
哎那么这个tav有应用这个样式吗

18:19.400 --> 18:20.800
好像没有应用这个样式啊

18:20.900 --> 18:23.000
你看classread为什么没有应用

18:23.300 --> 18:24.500
你说说为什么没有应用

18:25.700 --> 18:26.200
兄弟

18:26.500 --> 18:28.800
他又没有把这个样式加到页面里面去

18:28.900 --> 18:29.500
没有

18:29.600 --> 18:32.300
有没有形成css文件没有啥都没做

18:32.400 --> 18:33.200
他做了啥事

18:33.200 --> 18:34.300
他就做了一件事

18:35.000 --> 18:36.200
导出这个css代码

18:36.200 --> 18:38.300
把个css代码做一个字无错导出啊

18:38.300 --> 18:39.400
他就做这么一件事

18:39.500 --> 18:42.100
所以说这个东西拿到一个字无错过后

18:42.100 --> 18:44.100
接之后你怎么用随便你

18:44.100 --> 18:45.300
随便你咋用啊

18:45.300 --> 18:47.100
比方说我们这里呢完全可以写啊

18:47.100 --> 18:48.000
这个css

18:48.000 --> 18:48.700
css是什么呢

18:48.700 --> 18:50.200
就是results to screen对吧

18:50.300 --> 18:51.700
我们完全可以怎么写呢

18:51.800 --> 18:54.700
可以生成一个create element对吧

18:54.700 --> 18:57.100
生成一个style元素啊

18:57.800 --> 18:59.200
生成一个style元素

18:59.400 --> 19:01.800
然后呢style的inner atml

19:01.800 --> 19:03.400
等于什么呢css对吧

19:03.400 --> 19:05.400
把这个css代码的放到这里边

19:05.600 --> 19:07.300
然后呢接下来干嘛呢

19:07.300 --> 19:09.600
接下来我们这里输出css啊

19:10.500 --> 19:12.100
接下来我们就那个

19:12.700 --> 19:15.500
加入到document head里边

19:15.500 --> 19:17.000
append child

19:17.300 --> 19:17.800
对吧

19:18.400 --> 19:18.900
child

19:18.900 --> 19:20.500
不管你要做什么事情你自己去做

19:20.500 --> 19:21.400
他不管你

19:21.600 --> 19:22.300
保存

19:23.400 --> 19:23.900
ok

19:24.500 --> 19:25.000
刷新

19:25.300 --> 19:25.800
你看

19:27.400 --> 19:28.400
这就出来了对吧

19:28.600 --> 19:30.000
因为这个图片很大啊

19:30.000 --> 19:30.600
这个图片很大

19:30.600 --> 19:31.500
所以说还没显示完

19:31.500 --> 19:34.000
这个css再重新放大一点嘛

19:35.500 --> 19:36.000
1000

19:36.800 --> 19:37.300
1000

19:39.000 --> 19:39.600
刷新

19:42.380 --> 19:42.580
哇

19:42.580 --> 19:43.880
这个图片到底有多大呀

19:43.880 --> 19:44.480
这个图片

19:45.080 --> 19:45.680
看一下

19:47.750 --> 19:48.850
69pb

19:49.050 --> 19:51.450
我22500个相处啊

19:51.550 --> 19:52.650
我把它控制一下吧

19:52.650 --> 19:54.050
那个图片太大了

19:54.750 --> 19:55.250
刷图

19:55.850 --> 19:57.050
把它缩小一点

19:57.650 --> 19:59.450
百分比百分之二20就可以了

20:00.650 --> 20:01.250
保存

20:02.050 --> 20:02.550
ok

20:03.050 --> 20:03.650
那么这里

20:05.150 --> 20:05.650
刷新

20:06.650 --> 20:07.650
这里出来了对吧

20:07.650 --> 20:07.950
出来了

20:07.950 --> 20:10.050
把它背进来重复啊

20:10.450 --> 20:12.650
那么这样子呢你自己去做对吧

20:12.750 --> 20:13.550
ok这就是

20:13.950 --> 20:16.150
css loader他所做的事情

20:17.250 --> 20:18.050
好然后呢

20:18.050 --> 20:19.550
我们再来看一下剩下的东西啊

20:19.550 --> 20:21.250
还有一个style loader他要干嘛的

20:21.650 --> 20:24.850
因为css loader他仅提供了将css转化成

20:24.850 --> 20:25.850
制服出来导出的能力

20:25.850 --> 20:26.550
他没有做

20:26.750 --> 20:27.950
任何其他的事情的

20:28.350 --> 20:30.550
因此呢你要应用样式到页面上

20:30.550 --> 20:33.450
或者是去生成一些css文件

20:33.650 --> 20:34.850
那么像这些事情呢

20:34.950 --> 20:37.650
要交给其他loader或者是plug in来处理

20:37.850 --> 20:40.050
那么我们这里先说这个style loader

20:40.150 --> 20:42.750
将来呢我们再说另一个转换层

20:43.650 --> 20:45.850
css文件的一个插件

20:46.650 --> 20:47.350
好这里呢

20:47.350 --> 20:48.550
我们先说这个loader啊

20:49.550 --> 20:51.150
style loader他可以做什么事情呢

20:51.150 --> 20:52.750
他可以把这个css loader转换

20:52.750 --> 20:54.650
后来代码的进一步处理

20:55.750 --> 20:58.550
他可以让这个css loader导出的这个制服圈呢

20:58.750 --> 21:02.150
把它加入到页面的style元素里面

21:02.850 --> 21:03.750
比方说他怎么做呢

21:03.750 --> 21:04.950
他做的事情很简单啊

21:04.950 --> 21:06.550
比方说我们写的这段css

21:07.250 --> 21:08.750
经过css loader一转换

21:08.750 --> 21:09.650
是不是变成这个样子

21:09.950 --> 21:10.450
对吧

21:10.650 --> 21:12.050
先经过他来转换

21:12.650 --> 21:13.950
好变成这个样子

21:14.350 --> 21:16.050
然后呢再经过style loader

21:16.050 --> 21:17.450
就把这个代码然后再交给

21:17.450 --> 21:18.750
因为他可以写多个loader

21:18.750 --> 21:19.150
对吧

21:19.550 --> 21:20.550
我们之前说过啊

21:20.750 --> 21:22.250
loader这一块要回归一下

21:22.250 --> 21:23.550
之前的那个章节

21:23.650 --> 21:26.150
说远利这一部分还是真正重要的东西

21:27.850 --> 21:29.350
啊loader这个章节啊

21:29.350 --> 21:29.950
你看啊

21:31.350 --> 21:32.950
在哪里啊处理loader

21:33.150 --> 21:35.150
是不是他拿到一个loader输主过后

21:35.250 --> 21:35.850
他会把

21:36.250 --> 21:38.050
按照从右向左的顺序

21:38.050 --> 21:39.050
先交给一个loader

21:39.050 --> 21:40.950
再把loader的结果又交给另一个loader

21:40.950 --> 21:43.050
再把那个loader的结果再交给另一个loader

21:43.050 --> 21:44.250
再把最后一个loader的结果

21:44.650 --> 21:47.250
来交给vipack来进行剩下的事情分析

21:47.450 --> 21:48.350
好因此呢

21:48.950 --> 21:51.350
有这么一回合又不浅啊放大一点

21:52.850 --> 21:54.650
style loader看着啊一个例子

21:54.650 --> 21:56.150
就是我们的css代码是样子

21:56.150 --> 21:57.750
经过css loader就变成这个样子

21:57.750 --> 21:58.950
对吧倒出一个字幕刷

21:59.450 --> 22:00.950
然后再经过style loader呢

22:01.250 --> 22:02.750
当然这也不是真的代码啊

22:02.750 --> 22:03.350
真的代码呢

22:03.350 --> 22:05.150
还要考虑很多很多的问题啊

22:05.150 --> 22:07.250
这里呢我们这里就简单写一下

22:07.550 --> 22:08.450
他怎么写的呢

22:08.450 --> 22:09.250
就很简单

22:09.550 --> 22:10.950
marginal export

22:11.650 --> 22:13.550
不就是刚才css导出代码吗

22:13.550 --> 22:16.150
他的这个代码后边他给他给你加了一段

22:16.550 --> 22:17.750
加了一段什么代码呢

22:17.850 --> 22:20.050
就是我把这个内容保存起来

22:20.050 --> 22:21.150
就是css内容嘛

22:21.150 --> 22:21.850
这个制服刷对吧

22:21.850 --> 22:22.750
保存起来

22:22.850 --> 22:24.550
然后呢创建一个style元素

22:24.550 --> 22:26.150
把那个style元素里边的内容呢

22:26.150 --> 22:27.050
设置为这个啊

22:27.050 --> 22:28.250
就这个制服刷的内容

22:28.450 --> 22:29.750
然后呢把这个style元素呢

22:29.750 --> 22:30.950
加到这个head里边

22:30.950 --> 22:31.350
对吧

22:31.350 --> 22:33.450
然后再重新修改一下 export 导出

22:33.550 --> 22:34.750
修改为一个空对象

22:35.050 --> 22:36.250
啊实际上他没有这样做啊

22:36.250 --> 22:38.450
只不过呢目前看到的现象是这样的现象

22:38.650 --> 22:39.750
他为什么导出一个对象

22:39.750 --> 22:40.850
将来我们还会说

22:41.350 --> 22:42.050
将来还会说

22:42.050 --> 22:43.250
现在呢别管啊

22:44.650 --> 22:47.450
以上代码军事解放后代码并不代表真实代码啊

22:48.050 --> 22:50.150
好接下来我们咱们看一下style loader

22:52.860 --> 22:54.160
好再看一下啊

22:54.160 --> 22:55.660
那么我们的index的介绍里面

22:55.660 --> 22:57.060
是不是这个代码就没必要要了

22:57.160 --> 22:58.260
对吧就没必要要了

22:58.260 --> 22:59.260
好不要了

23:00.260 --> 23:01.060
输出 result

23:01.860 --> 23:02.660
好一看一下啊

23:02.660 --> 23:03.760
目前的肯定是

23:03.860 --> 23:04.360
哎

23:04.360 --> 23:07.260
发现发现发现目前是这个样子对吧

23:07.460 --> 23:08.260
好 ok

23:08.260 --> 23:12.160
我们希望了把 css loader 转换后的那个代码呢

23:12.160 --> 23:13.660
再交给style loader 来

23:14.260 --> 23:14.660
处理

23:15.060 --> 23:17.060
那么这里我已经安装好了啊style loader

23:17.460 --> 23:18.860
style loader 还不生成文件

23:18.960 --> 23:21.960
他只是呢把我们的样式加到页面的style 元素里边

23:22.460 --> 23:23.860
好那么这里呢我们看一下

23:26.560 --> 23:27.060
呃

23:28.860 --> 23:29.360
跑哪去了

23:30.160 --> 23:30.560
呃

23:31.060 --> 23:31.960
这里把配置

23:32.160 --> 23:33.260
配置的时候呢我们看

23:33.360 --> 23:34.860
这个 css loader啊

23:34.860 --> 23:35.860
我们先把它交给谁

23:36.560 --> 23:37.660
这要写输出了啊

23:39.260 --> 23:40.960
先交给 css loader

23:41.260 --> 23:43.260
然后呢再把它交给

23:43.860 --> 23:44.760
style loader

23:45.360 --> 23:46.460
啊这样子来处理

23:47.160 --> 23:48.060
好一保存

23:48.360 --> 23:49.160
我们这里重新

23:49.660 --> 23:50.360
重新运行

23:51.160 --> 23:51.860
重新打包

23:53.260 --> 23:55.060
好一保存你看一下一刷新

23:55.260 --> 23:56.160
是不是就自动有了

23:56.760 --> 23:57.860
啊我们来看一下元素

23:57.860 --> 23:58.660
审核元素里边

23:58.660 --> 24:01.660
head里边是不是就生成了一个啊style元素啊

24:01.660 --> 24:02.260
就两个啊

24:02.260 --> 24:04.060
因为它引入了導入了两个 css

24:04.260 --> 24:05.760
两个这个 banner 的 css 里面

24:05.760 --> 24:07.260
导入了另一个配置来 css

24:07.260 --> 24:08.360
它生成了两个 css

24:08.360 --> 24:09.260
就是一个 css

24:09.560 --> 24:10.260
模块文件了

24:10.260 --> 24:11.960
它生成一个style元素啊

24:11.960 --> 24:12.560
那么这里啊

24:12.560 --> 24:14.460
你看我们的 css 代码是不是在这

24:14.560 --> 24:14.960
对吧

24:14.960 --> 24:17.560
他把我们的 css 代码加入到style 里边去啊

24:17.560 --> 24:19.560
就是他们各自做的事情不一样

24:20.260 --> 24:21.660
啊但是呢前提条件

24:21.660 --> 24:23.560
他必须要先加入 css loader

24:23.660 --> 24:25.260
那如果说你不不使用 css loader

24:25.260 --> 24:26.260
他还能干这个事吗

24:26.660 --> 24:27.260
你看啊

24:27.560 --> 24:29.160
不使用 css loader 还能干这个事吗

24:29.960 --> 24:31.060
啊你说爆错了

24:31.060 --> 24:31.560
对吧

24:31.860 --> 24:33.560
爆错了他控制他搞不定了

24:33.560 --> 24:34.260
啊这个事情

24:34.660 --> 24:35.460
啊因此呢

24:36.760 --> 24:38.060
因此呢这里配置的时候

24:38.060 --> 24:39.560
必须要先配置 css loader

24:39.760 --> 24:40.860
css loader 他最大的作用

24:40.860 --> 24:41.860
他其实没有做什么

24:41.960 --> 24:43.260
他其实没有做什么别的事

24:43.260 --> 24:45.160
他做的是非常非常基础的一件事

24:45.360 --> 24:47.560
就是把 css 代码转换成介绍代码

24:47.960 --> 24:49.260
那么剩下的一些 loader

24:49.260 --> 24:51.760
他就来做各种其他的额外处理啊

24:52.360 --> 24:54.360
然后再把大麦代码稍微转换一下

24:54.760 --> 24:56.260
来做一些其他的额外处理

24:56.360 --> 24:57.560
所以就形成这样的效果了

24:57.760 --> 24:58.160
对吧

24:58.760 --> 24:59.160
啊

24:59.760 --> 25:01.260
而且呢这里还有一个细节啊

25:01.260 --> 25:02.860
就是关于这个style loader

25:02.860 --> 25:03.860
他还会控制

25:03.960 --> 25:04.760
控制什么呢

25:04.960 --> 25:06.360
控制如果说你但

25:06.360 --> 25:07.560
因为我们这里写的是loader

25:07.560 --> 25:10.160
一个模块一块会被多次夹展啊

25:10.760 --> 25:11.760
那么在这里呢

25:11.760 --> 25:14.160
比方说我们夹载多次这个模块的时候呢

25:14.460 --> 25:15.260
啊你看着啊

25:15.360 --> 25:16.760
我们这里倒入边了

25:16.760 --> 25:17.860
我们多倒入几次

25:19.060 --> 25:19.960
多倒入几次

25:20.360 --> 25:22.160
那么多倒入几次了过后呢

25:23.360 --> 25:25.660
他是不是会运行多次那个

25:26.160 --> 25:27.260
css loader

25:28.560 --> 25:30.360
是不是会运行多次 css loader

25:30.960 --> 25:32.160
啊会不会

25:33.160 --> 25:34.460
啊这个问题

25:35.460 --> 25:36.760
会不会好好看一下

25:37.160 --> 25:39.360
会不会多次运行css loader

25:41.160 --> 25:42.260
不会啊不会

25:42.260 --> 25:43.260
他只会运行一次

25:43.260 --> 25:44.360
因为有模块记录

25:44.560 --> 25:45.360
有模块记录

25:45.360 --> 25:46.060
只要记录个

25:46.260 --> 25:47.660
记录过一个模块代码

25:47.660 --> 25:49.660
他就不会再重复运行了啊

25:49.660 --> 25:50.860
首先检查记录嘛

25:50.860 --> 25:51.760
对不对啊

25:51.760 --> 25:52.760
因此他不会多次运行

25:52.760 --> 25:53.960
那么也就是说

25:54.060 --> 25:56.160
那么这个css style loader呢

25:56.460 --> 25:59.460
他是有能力避免同一个样式重复倒入的啊

25:59.460 --> 26:00.260
他就不会形成

26:00.260 --> 26:00.660
你看啊

26:00.660 --> 26:01.560
我们这里倒入这么多次

26:01.560 --> 26:04.260
他并不会形成多很多个style元素啊

26:04.260 --> 26:05.860
把这个样式重复去使用

26:05.860 --> 26:06.560
并不会

26:06.760 --> 26:07.760
好咱们来看一下

26:08.460 --> 26:09.160
打包了吗

26:09.460 --> 26:09.960
ok

26:10.360 --> 26:10.860
看一下

26:11.160 --> 26:12.260
刷新啊你看

26:12.260 --> 26:13.360
是不是还是只有两个

26:13.360 --> 26:13.760
对吧

26:13.760 --> 26:15.660
因为style loader他不会多次运行

26:16.160 --> 26:17.260
他其他的没啥了

26:17.460 --> 26:18.160
没啥了

26:19.060 --> 26:20.560
这就是我们这几个要讲的

26:20.560 --> 26:21.560
那么这样子一来了

26:21.560 --> 26:22.560
我们将来的

26:22.560 --> 26:24.760
是不是就可以把css当成模块来写了

26:24.760 --> 26:25.260
对吧

26:25.260 --> 26:26.260
我们要用什么功能

26:26.260 --> 26:26.560
来

26:26.560 --> 26:28.760
我们把可以把它拆分的非常非常细

26:28.960 --> 26:29.360
而且呢

26:29.360 --> 26:32.060
可以把它放到不同的文件下分门别类啊

26:32.160 --> 26:33.160
我们可以这样子放

26:33.260 --> 26:34.660
也可以写这么怎么放的

26:34.660 --> 26:36.160
比方说我们可以这样子放啊

26:36.160 --> 26:36.660
banner

26:37.660 --> 26:40.160
这个地方专门来处理这个轮波图的效果

26:40.160 --> 26:41.860
那么这里边有js文件

26:42.560 --> 26:44.360
有关于banner的文件啊

26:44.360 --> 26:46.660
js文件里边可能还要倒入别的js模块

26:46.660 --> 26:47.460
那么也有什么

26:47.460 --> 26:48.860
也有样式啊

26:48.860 --> 26:50.160
也有样式styles

26:50.860 --> 26:51.460
styles

26:51.560 --> 26:53.860
styles里面也会有一些css啊

26:54.160 --> 26:54.860
banner

26:55.360 --> 26:56.260
css

26:56.460 --> 26:57.360
这个css里边呢

26:57.360 --> 26:59.360
还可以倒入别的css啊

26:59.360 --> 27:01.260
那么就可以写一些其他的css

27:01.460 --> 27:03.260
可以把拆分的非常非常细

27:03.260 --> 27:04.060
但是没关系

27:04.060 --> 27:04.960
将来一打包

27:05.260 --> 27:06.660
是不是把和平和带马

27:06.660 --> 27:07.960
至少把带马和平在一起了

27:07.960 --> 27:08.460
对吧

27:08.460 --> 27:09.760
把带马就和平在一起了

27:10.460 --> 27:11.160
而且呢

27:11.460 --> 27:12.960
虽然说现在没有生成css文件

27:12.960 --> 27:13.360
将来呢

27:13.360 --> 27:14.960
我们学学了一切

27:15.260 --> 27:16.160
学了另一个

27:16.460 --> 27:17.160
东西的过后呢

27:17.160 --> 27:18.660
他就可以生成css文件了

27:19.260 --> 27:20.660
总之他可以处理就行了

27:20.760 --> 27:21.260
对不对

27:21.360 --> 27:22.760
那么之后的css呢

27:22.760 --> 27:24.760
我们一般都会用这种方式来处理

27:24.960 --> 27:27.560
或者是我们把统加到这个rss模络下面啊

27:27.560 --> 27:28.960
就不同的做法啊

27:29.760 --> 27:29.960
ok

27:29.960 --> 27:32.360
这就是关于这个css

27:32.360 --> 27:33.660
来在webpack里边

27:33.660 --> 27:34.460
如何去使用

27:34.460 --> 27:35.260
如何去拆分

27:36.260 --> 27:37.060
讲两个啊

27:37.260 --> 27:38.360
先来去试一下

27:38.460 --> 27:40.060
cssloader以及style loader

27:40.060 --> 27:40.660
去试一下

27:40.760 --> 27:42.960
感受一下他们的作用

27:43.060 --> 27:43.660
就可以了

27:44.260 --> 27:45.060
这里还有一个

27:45.260 --> 27:46.560
还有刚才我们没有看到这个

27:46.560 --> 27:47.260
他倒出的结果

27:47.260 --> 27:47.460
对吧

27:47.460 --> 27:48.560
倒出的结果就是个对象

27:48.960 --> 27:49.460
你看

27:50.160 --> 27:51.260
倒出的结果就是对象

27:51.360 --> 27:52.160
我们一般来说

27:52.160 --> 27:53.460
不太关心他倒出的结果

27:53.460 --> 27:54.160
不太关心

27:54.660 --> 27:55.160
除非呢

27:55.160 --> 27:56.060
要学到后边

27:56.060 --> 27:57.060
我们要用到一个功能

27:57.260 --> 27:58.760
除非才会用到这个对象

27:58.860 --> 27:59.260
否则的话

27:59.260 --> 28:00.960
我们一般部分又在关系他倒出的对象

28:00.960 --> 28:01.960
我们一般会怎么用呢

28:01.960 --> 28:02.860
一般就这样子用

28:03.360 --> 28:04.760
我这个我要写这个功能

28:04.760 --> 28:05.760
比较说我这个banner

28:05.960 --> 28:06.960
要写这个功能

28:06.960 --> 28:08.060
那么我们就

28:08.460 --> 28:09.260
就require

28:09.460 --> 28:10.360
require一个

28:10.960 --> 28:15.160
styles banner.css

28:15.460 --> 28:16.460
一般就这样子的作业

28:16.660 --> 28:17.160
或者呢

28:17.160 --> 28:19.260
我们用es6 语法 import

28:20.360 --> 28:23.060
styles banner.css

28:23.060 --> 28:23.460
对吧

28:23.460 --> 28:24.060
都可以啊

28:24.060 --> 28:24.560
都可以

28:24.560 --> 28:25.660
都能达到同样的效果

28:26.360 --> 28:27.160
一样的意思吧

28:27.160 --> 28:28.560
我们一般不需要

28:28.760 --> 28:29.960
用他倒出那个结果

28:29.960 --> 28:31.360
我们只需要把他倒入就行了

28:31.360 --> 28:31.960
倒入了过后呢

28:31.960 --> 28:32.960
这些东西都会运行

28:32.960 --> 28:33.360
对吧

28:33.360 --> 28:34.460
sysloader会运行式

28:34.460 --> 28:36.460
然后交给styles

28:36.460 --> 28:37.260
他就会把它夹到

28:37.260 --> 28:38.760
email的styles元素里边去

28:40.160 --> 28:40.660
ok

28:40.760 --> 28:41.660
那么这就是

28:42.460 --> 28:43.160
这一块的

28:44.860 --> 28:45.360
代码

28:47.060 --> 28:47.560
好

28:48.460 --> 28:49.760
其他的就没啥了

28:49.860 --> 28:51.060
大家来去用一下

28:51.060 --> 28:51.660
体会一下

28:51.660 --> 28:53.060
这个sysloader style

28:53.160 --> 28:53.760
就完了

