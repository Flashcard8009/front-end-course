WEBVTT

00:00.880 --> 00:04.080
好 来啊 那咱们还是按照惯例

00:04.680 --> 00:08.080
呃 用那个plugging啊 来做一个一个小练习

00:08.380 --> 00:11.080
这里的配置文件呢 我已经配置好了啊 就这个文件

00:11.580 --> 00:15.780
啊 就是source map 啊 有个source map 一个就是原码地图文件

00:16.780 --> 00:18.380
然后呢 有打包出来介绍文件

00:18.680 --> 00:21.180
然后src路径里边呢 我们有一个index啊

00:21.180 --> 00:24.180
他使用了另外一个模块 叫adder介绍

00:24.180 --> 00:26.380
那么 让两个模块合并进行打包

00:26.580 --> 00:27.780
来 先打包一次啊

00:29.080 --> 00:30.180
哎 进去

00:33.960 --> 00:35.560
打开啊 打个包

00:36.860 --> 00:38.960
npsvpack

00:39.760 --> 00:44.210
来吧 稍等啊

00:46.180 --> 00:49.380
好 完成了啊 打包完成了 就是真正这么两个文件 对吧

00:49.780 --> 00:51.280
那么接下来我想写个插件

00:51.980 --> 00:53.780
这个插件能够实现什么样的功能呢

00:53.780 --> 00:56.880
就是他打包完成之后呢 这里会多一个文件出来

00:56.880 --> 00:58.780
啊 就比方说多一个

00:59.180 --> 01:03.380
file list 就是文件列表啊 这个有markdown嘛

01:03.380 --> 01:04.180
啊 有markdown

01:04.480 --> 01:06.080
那么这个文件列表里边呢

01:06.080 --> 01:09.580
我们给他用txt就行了啊 也没必要markdown啊

01:09.580 --> 01:12.180
其实这个例子呢 是那个官方文档里边的一个例子

01:13.180 --> 01:14.980
这个例子挺简单的 通过这个例子呢

01:14.980 --> 01:18.380
大家可以啊 更加全面的去认识个plugging

01:18.580 --> 01:20.180
他到底能够去一个什么样的作用

01:21.180 --> 01:22.880
那么 来一个技术码文件吧

01:23.080 --> 01:25.780
技术码里边呢 咱们这里有个文件名啊

01:25.780 --> 01:27.380
我希望他写上一个文件名

01:27.780 --> 01:29.180
这个文件名呢

01:29.480 --> 01:31.180
我们就用made.js吧

01:31.780 --> 01:33.880
made.js 这是我们的文件名 对吧

01:34.680 --> 01:36.780
然后呢 生成出来的过后呢

01:37.080 --> 01:38.280
它的文件大小

01:39.580 --> 01:41.880
大小是多少呢 比方说啊 1.4kb

01:42.080 --> 01:43.080
1.4kb

01:43.780 --> 01:44.580
就这样子

01:45.380 --> 01:47.680
然后就差不多了啊 差不多了 还要写上

01:48.480 --> 01:49.980
差不多了吧 就这两个够了

01:50.180 --> 01:52.480
文件内容 那内容算了吧 那内容就算了

01:52.780 --> 01:55.880
好 再来一个made.js.map

01:56.380 --> 01:58.280
那么这也是个文件啊 大小

01:59.980 --> 02:03.680
大小 然后呢 这里是1.5kb

02:03.880 --> 02:06.080
举个例子吧 我希望呢 就生成这么一个文件

02:06.080 --> 02:08.480
这个文件里边呢 得到这么一些信息

02:09.480 --> 02:11.280
好 那么这个东西肯定用都在搞不定了

02:11.280 --> 02:13.080
对吧 能搞定这件事情

02:13.480 --> 02:15.280
我们要用什么 要用plugin

02:16.080 --> 02:18.180
在什么时候呢 在它生成

02:18.680 --> 02:21.580
我们的支援列表的时候 给它做出一个事件

02:21.580 --> 02:23.680
我们上节课 讲来看一下吧

02:27.070 --> 02:28.270
我们上节课讲的啊

02:28.670 --> 02:29.670
在它生成

02:29.970 --> 02:31.670
这个支援列表的时候啊

02:31.670 --> 02:34.170
就最终快要输出之前 输出到文件之前呢

02:34.170 --> 02:36.270
我们往支援列表里边加一个文件

02:36.270 --> 02:37.770
就是我们要实现这么一个功能

02:37.770 --> 02:39.470
因此这个loader肯定是解决不了的

02:39.470 --> 02:40.670
我们要用插件

02:40.970 --> 02:42.170
好 来吧 我们来写一个

02:42.670 --> 02:43.770
对新疆的文件讲啊

02:43.870 --> 02:44.570
plugins

02:45.670 --> 02:47.370
当然这个插件放到任何位置都可以

02:47.870 --> 02:49.170
好 这里有文件一个文件啊

02:49.170 --> 02:49.670
my

02:50.170 --> 02:51.670
就用 file nest

02:52.270 --> 02:52.870
plugin

02:53.570 --> 02:54.270
get

02:54.970 --> 02:56.570
好 那么我们有这么一个插件

02:56.870 --> 02:58.270
接下来呢 我们导出

02:58.570 --> 03:00.070
marge to export

03:00.270 --> 03:01.470
导出什么呢 导出一个内

03:02.470 --> 03:03.970
叫 file nest

03:04.570 --> 03:05.170
plugin

03:06.070 --> 03:07.070
ok 导出什么内

03:07.070 --> 03:08.770
内里边提供一个apply方法

03:09.070 --> 03:10.770
当然它传一个compiler进来

03:10.770 --> 03:11.270
对吧

03:11.470 --> 03:13.570
ok 插件的格式咱们就写好了

03:13.970 --> 03:15.570
接下来我们要怎么用这个插件的

03:15.570 --> 03:17.070
当然是在配置文件里边

03:17.070 --> 03:17.970
首先导入

03:19.170 --> 03:21.270
叫做叫做 file nest

03:22.070 --> 03:22.770
plugin

03:23.970 --> 03:24.570
plugin

03:24.870 --> 03:26.670
好 然后导入require

03:28.570 --> 03:30.270
导入什么呢 导入plugins

03:30.970 --> 03:32.270
然后 file nest plugin

03:32.470 --> 03:33.470
ok 导入进来

03:34.070 --> 03:36.270
好 那么我们现在配置进去plugin

03:36.770 --> 03:38.670
其实可以有很多的插件啊

03:38.770 --> 03:39.670
它就会一次

03:39.770 --> 03:41.070
当然我们这里只有一个插件

03:41.070 --> 03:42.570
当然可以有很多的插件啊

03:42.570 --> 03:44.370
我们这个例子只需要一个就行了

03:44.670 --> 03:45.370
也是plugin

03:45.570 --> 03:46.970
那么如果说有多个插件怎么办呢

03:46.970 --> 03:47.970
多个插件就分别写呗

03:47.970 --> 03:48.870
它是个输足呗

03:48.870 --> 03:50.370
就把一个个的插件对象给它

03:50.970 --> 03:54.170
那么它就会不停的运行这个插件的apply方法

03:54.170 --> 03:54.670
在我们

03:54.770 --> 03:55.670
在我们这个

03:56.070 --> 03:57.070
初始化完成之后呢

03:57.070 --> 03:58.370
它就会就创建好了

03:58.370 --> 03:59.470
compiler对象之后呢

03:59.470 --> 04:00.370
它就会不停的

04:01.070 --> 04:02.370
一次运行

04:02.970 --> 04:05.170
每数组里面每一个插件的apply方法

04:05.370 --> 04:07.670
来应用插件里边去注册事件

04:08.670 --> 04:10.170
ok 那么我们这里只有一个

04:11.070 --> 04:12.170
好 那么到这边来

04:12.370 --> 04:14.470
apply方法它肯定能够应用了对吧

04:14.570 --> 04:15.770
那么我给它注册一个事件

04:15.770 --> 04:16.470
什么事件呢

04:16.570 --> 04:18.670
我们要监听它在哪里

04:18.770 --> 04:19.770
在那个就是

04:19.970 --> 04:20.670
生成

04:21.070 --> 04:22.170
生成结果之前

04:22.470 --> 04:23.170
我们来看一下吧

04:23.370 --> 04:25.270
之前讲过了它里面有很多勾字

04:25.470 --> 04:26.670
那么用哪个勾字呢

04:26.670 --> 04:27.970
用这个你看我们生成

04:28.070 --> 04:29.370
生成文件不就是amint吧

04:29.370 --> 04:30.270
对吧 amint

04:30.270 --> 04:30.970
哎这个

04:31.570 --> 04:31.970
来

04:32.170 --> 04:33.170
啊它说什么

04:33.170 --> 04:34.170
生成支援

04:34.170 --> 04:34.870
然后呢

04:34.970 --> 04:37.070
到这个输出目录之前

04:37.570 --> 04:39.770
啊就是还没有真正的把文件生成出来

04:39.770 --> 04:41.170
但是支援列表已经有了

04:41.370 --> 04:43.070
啊那么我们给它注册这个事件

04:43.270 --> 04:44.170
amint这个事件

04:44.270 --> 04:44.670
来吧

04:45.070 --> 04:45.670
compiler

04:45.870 --> 04:46.670
之前怎么注册的

04:47.070 --> 04:48.570
hooks它里边很多勾字函数

04:48.570 --> 04:50.770
其中我们给amint注册一个勾字函数

04:50.770 --> 04:51.870
然后呢用tap

04:51.970 --> 04:52.970
给它注册一个事件

04:53.470 --> 04:54.270
好这个名字呢

04:54.270 --> 04:55.170
这个名字随便写啊

04:55.170 --> 04:56.470
我们一般就用插件的名字啊

04:56.470 --> 04:57.270
file list

04:57.470 --> 04:58.070
plugging

04:58.570 --> 04:59.270
插件的名字

04:59.470 --> 05:00.870
然后边呢说一个函数

05:00.970 --> 05:01.470
这个函数呢

05:01.470 --> 05:03.670
他可以会给传一个compiler a型对象进来

05:03.970 --> 05:05.270
啊有这么一个对象进来

05:05.670 --> 05:06.870
那么当我们

05:06.870 --> 05:08.470
当它生成文件列表之后呢

05:08.470 --> 05:09.870
它就会运行这个函数

05:10.270 --> 05:11.670
好这个函数里边我们可以

05:12.070 --> 05:13.270
比方说我们可以从

05:13.270 --> 05:15.770
这个compiler a型里边可以获得很多的信息

05:15.870 --> 05:16.970
那么有哪些信息呢

05:17.070 --> 05:18.170
这个对象是非常大的啊

05:18.170 --> 05:19.270
里边东西太多了

05:19.270 --> 05:20.370
咱们来输出看一下啊

05:20.370 --> 05:21.170
compiler a型

05:22.470 --> 05:23.370
好保存啊

05:23.470 --> 05:24.070
那咱们

05:25.470 --> 05:26.970
可以npxvpack

05:26.970 --> 05:28.270
来看一下它输出的结果

05:29.070 --> 05:29.470
你看

05:29.970 --> 05:31.270
那么它生成之前啊

05:31.270 --> 05:33.370
你看这个对象里边东西质入特别特别多

05:33.370 --> 05:33.770
对吧

05:34.170 --> 05:35.670
东西特别特别多啊

05:35.870 --> 05:36.870
那么这些东西呢

05:37.270 --> 05:37.670
其实呢

05:37.670 --> 05:38.770
我们也没必要啊

05:38.770 --> 05:39.870
全部一颗预计讲解

05:39.870 --> 05:40.270
总之呢

05:40.270 --> 05:42.370
我们知道这里面可以获取很多信息就行了

05:42.670 --> 05:44.270
那么我这里边我要获取什么信息呢

05:44.270 --> 05:45.470
我们要获取支援列表

05:45.470 --> 05:46.370
而sys对象

05:46.670 --> 05:47.570
而sys这个属性

05:48.470 --> 05:49.070
我再说一次啊

05:49.070 --> 05:50.470
我抢这个课目的不是让你们

05:50.470 --> 05:51.470
去自己去写的插件

05:51.470 --> 05:52.270
当然你们下来的

05:52.270 --> 05:54.070
最好自己去写一些也挺好玩的

05:54.470 --> 05:55.070
只是呢

05:55.470 --> 05:56.470
通过这个例子呢

05:56.470 --> 05:57.070
大家

05:57.670 --> 05:58.870
更加深刻的去理解

05:58.870 --> 06:00.070
看看它能干什么

06:01.270 --> 06:02.270
比方说我们这里

06:02.270 --> 06:04.070
clear npxvpack

06:04.070 --> 06:05.070
现在我们输出的是什么

06:05.070 --> 06:06.270
支援列表而sys

06:06.270 --> 06:07.070
你看一下

06:07.770 --> 06:08.670
它输出的是什么呢

06:08.670 --> 06:09.570
输出一个大堆

06:09.570 --> 06:09.870
但是呢

06:09.870 --> 06:10.670
我们可以看到

06:12.270 --> 06:13.170
看到里边呢

06:13.170 --> 06:13.870
它有一个

06:13.870 --> 06:15.370
它是一个

06:15.670 --> 06:16.270
它是一个对象

06:16.270 --> 06:16.470
对吧

06:16.470 --> 06:17.670
而sys是一个对象

06:17.870 --> 06:19.470
我们来把分解一下啊

06:20.470 --> 06:21.870
就是它是而sys

06:21.870 --> 06:22.770
它是一个对象

06:22.770 --> 06:23.470
这对象里边呢

06:23.470 --> 06:24.870
它的属性名是什么呢

06:24.870 --> 06:26.070
你看一下它的属性名

06:26.070 --> 06:27.670
属性名是不是就是文件名

06:27.670 --> 06:29.070
就是支援的文件名

06:29.070 --> 06:29.570
对吧

06:29.570 --> 06:30.870
支援的文件名

06:30.870 --> 06:32.070
属性值是什么呢

06:32.070 --> 06:33.270
你会发现它属性值呢

06:33.270 --> 06:34.070
是一个对象

06:35.070 --> 06:35.970
你看我们简单一点啊

06:35.970 --> 06:36.670
没点结实

06:36.670 --> 06:38.670
它属性值是不是就是一个对象

06:38.670 --> 06:39.570
这个对象里边呢

06:39.570 --> 06:40.270
它有

06:40.270 --> 06:43.270
它又有很多的这种属性

06:44.270 --> 06:45.570
它有很多的属性

06:45.570 --> 06:46.370
那么

06:46.370 --> 06:48.070
这个属性看的不是很清楚吧

06:48.070 --> 06:49.770
我大概说一下吧

06:49.770 --> 06:51.270
它有什么属性呢

06:51.270 --> 06:52.070
有这个属性

06:53.270 --> 06:54.670
比方说有content

06:55.470 --> 06:55.970
content

06:56.270 --> 06:56.770
就是什么

06:56.770 --> 06:57.670
内容

06:57.670 --> 06:58.070
内容

06:58.070 --> 06:58.870
它是一个函数

06:59.770 --> 07:00.570
它是个函数

07:00.570 --> 07:01.470
它反而回来结果呢

07:01.470 --> 07:02.770
就是文件的内容

07:02.770 --> 07:04.070
反而回来结果就是文件内容

07:05.170 --> 07:06.570
那么还有什么呢

07:06.570 --> 07:09.070
还有就是那个sys

07:09.070 --> 07:10.270
文件的大小

07:10.270 --> 07:10.970
文件大小呢

07:10.970 --> 07:11.870
你反而回来结果呢

07:11.870 --> 07:12.870
就是文件大小

07:12.870 --> 07:13.870
它是字节

07:13.870 --> 07:15.470
反而回来文件大小

07:15.470 --> 07:16.570
那么我们这里呢

07:16.570 --> 07:17.270
就可以

07:17.270 --> 07:19.970
是不是就可以往这个而sys里边加入一些资源

07:19.970 --> 07:21.070
对吧

07:21.070 --> 07:22.370
它是个对象啊

07:22.370 --> 07:23.570
那么我们该加入一些资源

07:23.570 --> 07:24.570
比方说而sys里边

07:24.570 --> 07:26.370
我们该加入一个

07:26.370 --> 07:27.370
加什么呢

07:27.370 --> 07:28.170
一个属性名

07:28.170 --> 07:29.070
该加一个属性名

07:29.070 --> 07:30.770
属性名是123.txt

07:30.770 --> 07:32.070
用这么一个属性名

07:32.070 --> 07:32.770
那等于什么呢

07:32.770 --> 07:33.670
等于一个对象

07:33.670 --> 07:34.470
这对象有什么呢

07:34.470 --> 07:35.970
有个content的方法

07:35.970 --> 07:38.270
它能够返回一个文件内容

07:38.270 --> 07:39.370
文件内容

07:39.370 --> 07:40.370
比方说我们返回

07:40.370 --> 07:41.970
随便返回一段内容吧

07:41.970 --> 07:42.270
好

07:42.270 --> 07:44.070
接下来我们来看一下啊

07:44.070 --> 07:44.770
这样子行不行

07:46.670 --> 07:47.370
nps打包

07:49.370 --> 07:49.670
哎

07:49.670 --> 07:49.970
他说

07:51.470 --> 07:52.370
什么呢

07:52.370 --> 07:52.770
哦

07:52.770 --> 07:53.770
这里不是content

07:53.770 --> 07:54.470
不是content

07:54.470 --> 07:55.070
他是source

07:55.070 --> 07:55.370
啊

07:55.370 --> 07:55.870
说错了

07:55.870 --> 07:56.270
source

07:56.270 --> 07:58.070
这些东西我经常忘了

07:58.070 --> 07:59.070
平时也没这么具体

07:59.070 --> 08:00.170
这些玩意

08:00.170 --> 08:00.570
来吧

08:00.570 --> 08:01.470
再来一次

08:01.470 --> 08:02.170
source方法

08:03.570 --> 08:04.070
哎

08:04.070 --> 08:05.270
爆错了

08:05.270 --> 08:06.270
source size

08:06.270 --> 08:07.270
啊

08:07.270 --> 08:08.670
它还差一个啊

08:08.670 --> 08:09.670
还差一个size

08:09.670 --> 08:10.270
size

08:10.270 --> 08:11.670
尺寸文件尺寸

08:11.670 --> 08:13.470
尺寸的话我们就随便吧

08:13.470 --> 08:14.770
把这个字幕串

08:14.770 --> 08:17.370
我们把这个字幕串放到这

08:17.370 --> 08:18.470
放到这

08:18.470 --> 08:19.870
这里返回这个字幕串

08:19.870 --> 08:20.670
然后呢

08:20.670 --> 08:22.270
尺寸就是字幕串的长度嘛

08:22.270 --> 08:23.470
就字幕串的长度

08:23.570 --> 08:24.570
随便写一个

08:24.570 --> 08:24.870
好

08:24.870 --> 08:25.570
保存

08:25.570 --> 08:26.370
那么来看一下

08:30.140 --> 08:30.540
再来

08:31.640 --> 08:34.020
打包

08:34.020 --> 08:34.220
好

08:34.220 --> 08:35.020
你看

08:35.020 --> 08:35.820
是不是生成出来了

08:35.820 --> 08:36.420
对吧

08:36.420 --> 08:38.020
那么说了是不是三个文件

08:38.020 --> 08:39.620
我们往资源列表里边加了一个

08:39.620 --> 08:39.820
对吧

08:39.820 --> 08:40.720
123.tlt

08:40.720 --> 08:42.020
就是文件名啊

08:42.020 --> 08:42.920
这是文件的

08:42.920 --> 08:43.620
呃

08:43.620 --> 08:45.120
字节数15个字节

08:45.120 --> 08:45.720
对吧

08:45.720 --> 08:45.920
哎

08:45.920 --> 08:46.820
那么我看一下啊

08:46.820 --> 08:48.120
看一下这个生成的文件

08:48.820 --> 08:50.220
123.tlt

08:50.220 --> 08:51.120
是不是出来了

08:51.120 --> 08:52.620
它就这么简单

08:52.620 --> 08:53.020
因此呢

08:53.020 --> 08:54.220
我们这里要生成什么呢

08:54.220 --> 08:55.720
我们生成的不是名字

08:55.720 --> 08:56.420
不是123

08:56.420 --> 08:57.420
是file list

08:57.420 --> 08:57.620
对吧

08:57.620 --> 08:58.620
把这里改一下

08:58.620 --> 09:00.420
file list

09:00.420 --> 09:00.520
啊

09:00.520 --> 09:01.620
我们要生成这么一个文件

09:01.620 --> 09:03.020
再加一个就行了啊

09:03.020 --> 09:04.020
txt

09:04.020 --> 09:05.620
那么文件的内容是啥呢

09:05.620 --> 09:06.320
内容是不是

09:06.320 --> 09:09.020
我们要把之前的那个rss拿出来

09:09.020 --> 09:09.320
对吧

09:09.320 --> 09:10.420
把之前的rss

09:10.420 --> 09:11.520
那个就是对象里边

09:11.520 --> 09:12.620
每一个文件

09:12.620 --> 09:14.420
组装成的这个文件内容

09:14.420 --> 09:15.320
对不对

09:15.320 --> 09:15.420
哎

09:15.420 --> 09:16.020
来吧

09:16.020 --> 09:16.620
我们这里呢

09:16.620 --> 09:17.520
可以写个数组

09:19.320 --> 09:19.520
啊

09:19.520 --> 09:20.020
看着啊

09:20.020 --> 09:23.260
我们在这里可以写个数组

09:23.260 --> 09:23.760
我们每

09:23.760 --> 09:24.760
数组里面每一项

09:24.760 --> 09:26.260
是不是就勾件这么一个东西

09:26.260 --> 09:26.860
对吧

09:26.860 --> 09:28.560
数组里面每一项就勾件这么一个东西

09:28.560 --> 09:29.560
然后把数组拼接起来

09:29.560 --> 09:30.660
形成一个字幅串

09:30.660 --> 09:30.860
好

09:30.860 --> 09:32.160
咱们来形成一个数组啊

09:32.160 --> 09:33.860
就是file list

09:33.860 --> 09:35.060
形成这么一个数组

09:35.060 --> 09:35.460
然后呢

09:35.460 --> 09:36.760
这个数组来自于哪呢

09:36.760 --> 09:38.660
我们循环啊

09:38.660 --> 09:39.960
for for in嘛

09:39.960 --> 09:40.860
for in循环

09:40.860 --> 09:41.460
循环什么呢

09:41.460 --> 09:42.360
因为它是个对象嘛

09:42.360 --> 09:43.060
对吧

09:43.060 --> 09:45.660
循环这个compination

09:45.660 --> 09:46.460
第二

09:46.460 --> 09:47.660
二set

09:47.660 --> 09:48.960
循环这个对象

09:48.960 --> 09:50.960
那么这个key是不是就属性名

09:50.960 --> 09:51.560
你看啊

09:51.560 --> 09:52.460
之前的对象对吧

09:52.460 --> 09:54.160
这个key就是这个属性名

09:54.160 --> 09:55.760
它里边可能有一些

09:55.860 --> 09:57.360
还有别的文件

09:57.360 --> 09:59.360
接下来一开始

09:59.360 --> 10:00.360
还有这么一些

10:00.360 --> 10:01.960
那么我们key就是它的文件名

10:01.960 --> 10:03.860
所以说语言基础是很重要的

10:03.860 --> 10:05.160
那么也把这些东西要熟悉

10:05.160 --> 10:07.060
非常熟悉key是文件名

10:07.060 --> 10:07.560
好

10:07.560 --> 10:08.360
那么通过文

10:08.360 --> 10:09.260
那么这个key

10:09.260 --> 10:10.760
我们这里是不是拼接到哪

10:10.760 --> 10:11.560
是不是拼接到这

10:11.560 --> 10:12.060
对吧

10:12.060 --> 10:12.260
好

10:12.260 --> 10:13.860
我们这里写个

10:13.860 --> 10:16.160
写个字幅串

10:16.160 --> 10:18.960
就是content

10:18.960 --> 10:20.260
拼接一下

10:20.260 --> 10:22.260
那么来自于哪呢

10:22.260 --> 10:23.560
这个地方是不是要写key

10:23.560 --> 10:24.060
对吧

10:24.060 --> 10:24.360
诶

10:24.360 --> 10:25.560
我们拼接到了

10:25.560 --> 10:27.560
这个地方是不是要写key

10:27.560 --> 10:30.920
来写个key

10:30.920 --> 10:31.520
是吧

10:31.520 --> 10:33.020
把文件名放这

10:33.020 --> 10:34.820
然后接下来是不是有个换行

10:34.820 --> 10:35.320
对不对

10:35.320 --> 10:36.420
是不是有换行

10:36.420 --> 10:37.520
换行我们就贴到写

10:37.520 --> 10:38.220
贴到写吧

10:38.220 --> 10:40.120
不能用Type键了

10:40.120 --> 10:42.120
那么换行是大小多好个kb

10:44.020 --> 10:45.320
大小

10:45.320 --> 10:46.220
多好个kb

10:46.220 --> 10:46.420
好

10:46.420 --> 10:48.020
那么这个地方怎么算出来了

10:48.020 --> 10:49.420
这个地方是不是要读取

10:49.420 --> 10:49.620
诶

10:49.620 --> 10:50.720
这个对象里边的size

10:50.720 --> 10:51.420
这个方法

10:51.420 --> 10:51.820
对吧

10:51.820 --> 10:52.420
OK

10:52.420 --> 10:53.720
来吧

10:53.720 --> 10:55.220
我们要读取什么

10:55.220 --> 10:57.220
通过combination

10:57.320 --> 10:57.920
sets

10:57.920 --> 10:58.820
这个是个对象

10:58.820 --> 10:59.620
读取它的属性

10:59.620 --> 11:01.420
这个属性读出来是不是对象

11:01.420 --> 11:02.720
属性读出来就是这么一个对象

11:02.720 --> 11:03.120
对吧

11:03.120 --> 11:04.120
对象里边有size

11:04.120 --> 11:05.320
方法

11:05.320 --> 11:06.420
del size

11:06.420 --> 11:07.520
是不是得到它的k

11:07.520 --> 11:08.420
它的字结束

11:08.420 --> 11:09.720
字结束处于1000

11:09.720 --> 11:10.820
是不是就kb数

11:10.820 --> 11:11.320
对吧

11:11.320 --> 11:12.720
这样就得出来

11:12.720 --> 11:12.920
好

11:12.920 --> 11:13.520
那么这样子

11:13.520 --> 11:14.520
就拼接成一个字不串

11:14.520 --> 11:15.420
把个字不串放到哪

11:15.420 --> 11:17.120
放到fire list里边

11:17.120 --> 11:18.320
fire list里边

11:18.320 --> 11:19.420
push

11:19.420 --> 11:20.120
加入进去

11:20.120 --> 11:21.620
把内容加入进去

11:21.620 --> 11:21.820
好

11:21.820 --> 11:24.120
然后最终我们生成的种字不串是什么

11:24.120 --> 11:24.920
种字不串

11:24.920 --> 11:26.320
是不是就是个数组

11:26.320 --> 11:28.620
然后也一个换行服来拼接

11:28.620 --> 11:29.220
对吧

11:29.220 --> 11:31.820
把这个数组fire list

11:31.820 --> 11:33.220
用什么呢

11:33.220 --> 11:34.520
用换行服来拼接

11:34.520 --> 11:35.620
那么就形成了一个字不串了

11:35.620 --> 11:37.920
那么这个字不串就是文件内容

11:37.920 --> 11:38.220
好

11:38.220 --> 11:40.420
咱们再来试一下

11:40.420 --> 11:42.920
把这个删掉了

11:42.920 --> 11:44.920
把地色目楼删掉

11:44.920 --> 11:45.420
OK

11:45.420 --> 11:48.020
那么现在我们再来试一下

11:48.020 --> 11:49.820
webpack

11:49.820 --> 11:50.220
打包

11:50.220 --> 11:50.720
你看

11:50.720 --> 11:52.920
是不是多了一个fire list txt

11:52.920 --> 11:53.620
对吧

11:53.620 --> 11:54.120
你看

11:54.120 --> 11:54.920
是不是出来了

11:54.920 --> 11:55.620
我们多换两个

11:56.020 --> 11:57.020
多换两行

11:57.020 --> 11:59.120
这里换加上一个两个写钢

11:59.120 --> 12:00.020
写钢N

12:00.020 --> 12:00.220
好

12:00.220 --> 12:03.400
再来

12:03.400 --> 12:04.000
运行

12:04.000 --> 12:04.800
你看

12:04.800 --> 12:06.700
现在是不是就出来了

12:06.700 --> 12:08.400
就是我们文件列表说就出来了

12:08.400 --> 12:09.300
就这么简单

12:09.300 --> 12:09.900
特别简单

12:09.900 --> 12:10.400
前一部分的

12:10.400 --> 12:11.600
在勾件我们的文件内容

12:11.600 --> 12:12.100
对吧

12:12.100 --> 12:12.900
然后

12:12.900 --> 12:13.500
这一部分

12:13.500 --> 12:15.100
这一部分我们再往里边

12:15.100 --> 12:18.200
给它添加一个资源

12:18.200 --> 12:18.300
好

12:18.300 --> 12:19.900
那么比方说我们插件里边

12:19.900 --> 12:20.900
这个文件名

12:20.900 --> 12:21.900
fire list文件名

12:21.900 --> 12:23.300
我不一定想用这个名字

12:23.300 --> 12:24.700
我想用别的名字

12:24.700 --> 12:25.400
那么别的名字

12:25.400 --> 12:26.400
我也不知道要用啥

12:26.400 --> 12:27.400
那我希望了

12:27.400 --> 12:29.000
把这个名字的选择权

12:29.000 --> 12:31.000
交给插件的使用者

12:31.000 --> 12:32.600
就是我在使用这个插件的时候

12:32.600 --> 12:33.600
我可以给他告诉他

12:33.600 --> 12:35.200
我的文件名是什么

12:35.200 --> 12:35.800
那么这个时候

12:35.800 --> 12:36.500
后悔怎么办呢

12:36.500 --> 12:37.000
我们这个时候

12:37.000 --> 12:37.800
当然就可以利用

12:37.800 --> 12:39.500
我们GS的基础知识

12:39.500 --> 12:41.000
就是往这个灯引里边说

12:41.000 --> 12:42.100
写个勾到函数

12:42.100 --> 12:42.600
勾到函数

12:42.600 --> 12:44.400
一个传参数进来就行了

12:44.400 --> 12:45.100
对不对

12:45.100 --> 12:45.200
好

12:45.200 --> 12:45.600
来吧

12:45.600 --> 12:47.000
一个fire list

12:47.000 --> 12:48.000
一个传进来

12:48.000 --> 12:48.800
传个参数进来

12:48.800 --> 12:50.500
但是这个参数也可以勾件成对象

12:50.500 --> 12:51.000
勾件的数字

12:51.000 --> 12:52.200
随便什么都可以

12:52.200 --> 12:53.600
this file list

12:53.600 --> 12:54.300
等于 file list

12:56.500 --> 12:58.100
不然的话我就默认等于什么

12:58.100 --> 13:00.000
file list.txt

13:00.000 --> 13:00.800
我们默认这个

13:00.800 --> 13:02.400
默认这个字

13:02.400 --> 13:03.000
那么这里

13:03.000 --> 13:04.600
如果说你传进来了过后

13:04.600 --> 13:06.000
我这里是不是就可以使用

13:06.000 --> 13:06.800
这个属性

13:06.800 --> 13:08.200
this.file

13:08.200 --> 13:09.200
对吧

13:09.200 --> 13:10.000
那么这样一来

13:10.000 --> 13:11.200
我们在使用插件的时候

13:11.200 --> 13:12.500
你看在创建勾到函数的时候

13:12.500 --> 13:13.400
就是为什么插件

13:13.400 --> 13:15.400
他希望你用勾到函数的这种形式

13:15.400 --> 13:17.400
因为他里边就可以传参数了

13:17.400 --> 13:18.400
那么这里我就

13:18.400 --> 13:19.400
创建这么一个

13:19.400 --> 13:20.600
创建这么一个插件的对象

13:20.600 --> 13:22.900
然后往这里边传一个什么呢

13:22.900 --> 13:23.700
传一个

13:23.700 --> 13:24.300
那个

13:24.300 --> 13:25.300
我的文件名

13:25.300 --> 13:26.300
我的文件名就是

13:28.100 --> 13:28.900
文件列表

13:28.900 --> 13:30.000
我们用个中文

13:30.000 --> 13:31.200
叫MD

13:31.200 --> 13:35.070
来 试一下

13:35.070 --> 13:37.610
运行

13:37.610 --> 13:38.610
你看多了个文件

13:38.610 --> 13:39.710
文件列表

13:39.710 --> 13:41.310
那么跑这儿了

13:41.310 --> 13:42.710
ok 这就是

13:42.710 --> 13:44.710
这个插件这么一个例子

13:44.710 --> 13:45.610
通过这个插件的例子

13:45.610 --> 13:46.110
你会发现

13:46.110 --> 13:47.810
插件其实他能做的事情

13:47.810 --> 13:49.010
比勾到更多

13:49.010 --> 13:50.610
但是像勾到是做的事情

13:50.610 --> 13:51.610
插件呢

13:51.610 --> 13:52.810
能不能做呢

13:52.810 --> 13:54.110
严格来说的话

13:54.110 --> 13:55.310
勉勉强强也能实现

13:55.310 --> 13:56.010
只是没有勾到

13:56.010 --> 13:57.310
能不能做的那么舒服

13:57.310 --> 13:58.710
他们各自有各自的好处

13:58.710 --> 14:00.010
勾到主要来转换代

14:00.010 --> 14:00.810
插件的主要是

14:00.810 --> 14:03.010
还注册编译期的各种事件

14:03.010 --> 14:03.910
去干预

14:03.910 --> 14:05.710
未排可的编译过程

14:05.710 --> 14:07.110
主要能够做这么一些事

14:07.110 --> 14:07.810
ok 插件呢

14:07.810 --> 14:09.210
我们就讲到这了

14:09.210 --> 14:09.810
那么之后

14:09.810 --> 14:10.610
我们再用一些

14:10.610 --> 14:11.910
第三方学习楼段

14:11.910 --> 14:13.010
学习插件之后

14:13.010 --> 14:15.110
我们也做过一些熟悉

14:15.110 --> 14:15.910
那么我们之后

14:15.910 --> 14:16.410
再学习一些

14:16.410 --> 14:18.710
第三方的一些楼段

14:18.710 --> 14:20.010
别人写好的一些插件

14:20.010 --> 14:21.410
那么一再用别人的东西的时候

14:21.410 --> 14:23.110
我们不至于

14:23.110 --> 14:24.410
那么的难以理解

14:24.410 --> 14:26.010
至少我们知道他怎么回事了

14:26.010 --> 14:27.210
他们实现起来

14:28.710 --> 14:29.710
实现了这些例子

14:29.710 --> 14:30.510
要复杂得多

14:30.510 --> 14:31.210
但是我们大概知道

14:31.210 --> 14:32.310
他怎么回事了

14:32.310 --> 14:33.710
起到另外一个作用

14:33.710 --> 14:36.010
ok 这是关于插件的这个练习

