WEBVTT

00:00.940 --> 00:04.300
上节课咱们学了入口和出口的配置

00:04.300 --> 00:07.340
大家会发现它入口和出口的配置

00:07.340 --> 00:10.140
丰富多样 有各种配置方式

00:10.140 --> 00:13.740
那么我们平时开发的时候应该去怎么样的配置呢

00:13.740 --> 00:15.780
对不起 没有一个固定答案

00:15.780 --> 00:17.340
那要有固定答案的话

00:17.340 --> 00:19.340
Webhack根本就不会给你冲那么多规则

00:19.340 --> 00:20.940
它直接给你全部做好了 对吧

00:20.940 --> 00:22.540
就是因为没有固定答案

00:22.540 --> 00:25.140
那么这里就送给大家一句话

00:25.140 --> 00:26.940
具体情况 具体分析

00:26.940 --> 00:29.140
实际上Webhack的学习

00:29.340 --> 00:32.340
你要说它真正的蓝点在配置上吗

00:32.340 --> 00:33.740
在它的原理上吗

00:33.740 --> 00:36.140
我告诉你 这些东西还真不是蓝点

00:36.140 --> 00:37.940
它最蓝的是在什么呢

00:37.940 --> 00:39.140
它应用上

00:39.140 --> 00:40.140
怎么去用

00:40.140 --> 00:43.140
什么时候该去写什么样的配置

00:43.140 --> 00:44.940
这才是它最蓝的

00:44.940 --> 00:47.140
而这个东西呢

00:47.140 --> 00:49.140
初学者

00:49.140 --> 00:51.540
就是作为一个计算机行业

00:51.540 --> 00:53.140
田中开发入门的

00:53.140 --> 00:54.540
那么一个初学者的话

00:54.540 --> 00:56.340
是不用去搞清楚的

00:56.340 --> 00:58.540
因为你们以后

00:58.740 --> 01:01.540
再使用到什么Webhack这些东西

01:01.540 --> 01:03.140
它早就给你配好了

01:03.140 --> 01:05.740
它把自己觉得最Webhack的方案

01:05.740 --> 01:06.940
已经给你配好了

01:06.940 --> 01:08.540
那么你无非就是

01:08.540 --> 01:11.340
有的时候可能修改一点

01:11.340 --> 01:12.540
别面嚼嚼的东西

01:12.540 --> 01:14.540
就是最核心的东西已经给你配好了

01:14.540 --> 01:16.540
所以说你们不用去管

01:16.540 --> 01:17.340
那么这个东西

01:17.340 --> 01:19.340
那么我们去学这个Webhack

01:19.340 --> 01:20.340
还有什么意义呢

01:20.340 --> 01:23.140
在于理解后边Webhack和Webhack

01:23.140 --> 01:24.340
它到底是怎么工作的

01:24.340 --> 01:26.340
它到底是

01:26.340 --> 01:27.940
怎么让它把工程打起来

01:27.940 --> 01:29.340
怎么让它跑起来的

01:29.340 --> 01:30.940
它为什么实际上那样的工程结构

01:30.940 --> 01:33.140
在于理解这些东西

01:33.140 --> 01:34.740
所以说这些课呢

01:34.740 --> 01:36.340
你要说它重要吗

01:36.340 --> 01:37.540
它是Webhack的应用

01:37.540 --> 01:38.540
它特别重要

01:38.540 --> 01:39.540
你要说它不重要吗

01:39.540 --> 01:41.940
后边我们也基本上不会用到

01:41.940 --> 01:43.940
它要怎么去看

01:43.940 --> 01:44.940
那么这个东西以后

01:44.940 --> 01:47.140
你们到公司有没有用武之力呢

01:47.140 --> 01:47.840
有

01:47.840 --> 01:49.140
有可能有

01:49.140 --> 01:51.740
因为并不是所有的公司

01:51.740 --> 01:53.140
都是直接用个VU

01:53.140 --> 01:53.940
用个React

01:53.940 --> 01:55.540
就直接用它那个配置好了的

01:55.540 --> 01:58.340
它有的时候甚至有可能要求你

01:58.340 --> 01:59.740
不用它那个配置

01:59.740 --> 02:00.940
不用那个VU和React

02:00.940 --> 02:01.940
教授家打的东西

02:01.940 --> 02:02.940
不用它那个东西

02:02.940 --> 02:04.540
我们自己用Webhack来配置

02:04.540 --> 02:05.740
有可能会存在

02:05.740 --> 02:07.540
但是如果说存在这种情况

02:07.540 --> 02:09.640
它一定不会让你来配置

02:09.640 --> 02:10.540
一个刚入职的人

02:10.540 --> 02:12.040
他一定不会让你来配置

02:12.040 --> 02:13.540
一定是你不要有大神

02:13.540 --> 02:14.240
有高手

02:14.240 --> 02:16.140
帮你配置好

02:16.140 --> 02:17.940
但是你们早晚有一天

02:17.940 --> 02:20.340
会成长成为高手

02:20.340 --> 02:22.740
成长成为公司的主干

02:22.740 --> 02:25.340
因此你们将来可能会有某一天

02:25.840 --> 02:28.340
需要去应用Webhack里边的东西

02:28.340 --> 02:30.140
但是到了那个时候

02:30.140 --> 02:32.640
我现在给你们讲了东西

02:32.640 --> 02:33.840
就

02:33.840 --> 02:34.940
肯定是满足不了了

02:34.940 --> 02:36.340
可能我们还要第二阶段

02:36.340 --> 02:38.440
要进行深入的去了解Webhack

02:38.440 --> 02:39.040
那么这结构

02:39.040 --> 02:40.440
为什么还要安排这几课

02:40.440 --> 02:41.440
首先给大家解释清楚

02:41.440 --> 02:42.540
这些难动去脉

02:42.540 --> 02:44.640
为什么还要去安排这结构

02:44.640 --> 02:46.640
因为安排的这结构过后

02:46.640 --> 02:47.940
你看到这结构内容过后

02:47.940 --> 02:48.940
你才大致的知道

02:48.940 --> 02:50.540
原来我的工程结构

02:50.540 --> 02:52.140
应该去这么样的设置

02:52.140 --> 02:53.340
我应该去这么样的配置

02:53.340 --> 02:54.940
才有这么一种感觉

02:54.940 --> 02:56.940
虽然说你无法进行详细的

02:56.940 --> 02:58.540
就对一些细节进行规划

02:58.540 --> 03:00.340
但是至少有了这么一个感觉

03:00.340 --> 03:03.340
而且有了这结构之后

03:03.340 --> 03:05.340
通过这结构

03:05.340 --> 03:07.340
也可以对之前的一些指示

03:07.340 --> 03:09.240
进行一些巩固和复习

03:09.240 --> 03:10.540
主要是其这么一个重用

03:10.540 --> 03:12.940
不然的话我们学了入口和出口规则

03:12.940 --> 03:14.540
学了过后大家感觉很模糊

03:14.540 --> 03:16.340
终觉的很模糊

03:16.340 --> 03:18.240
那么我们有了一个实际的例子

03:18.240 --> 03:22.040
一些实际的场景来讲解的话

03:22.040 --> 03:23.140
那么大家会对它有一个

03:23.140 --> 03:24.740
更加完整的认识

03:24.740 --> 03:26.140
主要是起这么一个目的

03:26.140 --> 03:27.540
不是说这结构学了过后

03:27.540 --> 03:29.940
你真的就能够在为派可上应用制度了

03:29.940 --> 03:31.940
那还远远不够的

03:31.940 --> 03:34.940
就跟你们刚刚开始学程序的时候

03:34.940 --> 03:36.440
辩量会不会写

03:36.440 --> 03:37.840
循环会不会写

03:37.840 --> 03:39.640
低规 寒朔会不会写

03:39.640 --> 03:40.540
一些简单的例子

03:40.540 --> 03:41.540
你们都会写

03:41.540 --> 03:43.340
拆拯成简单的代码都会写

03:43.340 --> 03:45.640
来写个算法

03:45.640 --> 03:47.340
然后说冒泡牌去

03:47.340 --> 03:49.140
是不是就感觉很难了

03:49.140 --> 03:50.640
你只如果说老师不给你讲解的话

03:50.640 --> 03:51.940
你自己能够写出来吗

03:53.140 --> 03:54.640
或者说很难写出来

03:54.640 --> 03:56.340
都是简单单码构成的

03:56.340 --> 03:57.440
就是为派可配置

03:57.440 --> 03:58.840
其实没有多的东西

03:58.840 --> 04:00.140
它就这么一个配置

04:00.140 --> 04:02.140
那么为什么在不同的场景下面

04:02.140 --> 04:04.140
我们该怎么去使用它呢

04:04.140 --> 04:05.040
这就比较难了

04:05.040 --> 04:07.240
所以说开发的话

04:07.240 --> 04:09.140
应用是比较难的

04:09.140 --> 04:10.240
咱们话不多说

04:10.240 --> 04:12.740
来进入咱们这几课

04:12.740 --> 04:14.040
给大家讲了几个场景

04:14.040 --> 04:14.740
通过这些场景

04:14.740 --> 04:18.640
对为派可的入口和出口进行一个深入的认识

04:18.640 --> 04:19.640
一个全面的认识

04:19.640 --> 04:22.640
主要是起这么一个目的

04:22.640 --> 04:25.140
下面我给大家列举了三个经典的场景

04:25.140 --> 04:27.640
一个是一个页面一个解释

04:27.640 --> 04:29.040
一个是一个页面多个解释

04:29.040 --> 04:30.740
一个是单页应用

04:30.740 --> 04:32.140
咱们一个个说吧

04:32.140 --> 04:35.340
第一个场景是一个页面就一个解释

04:35.340 --> 04:37.140
比方说我们这里有三个页面

04:37.140 --> 04:39.740
他们比方说新闻业

04:39.740 --> 04:40.640
新闻列表业

04:40.640 --> 04:42.540
新闻详情业或者是首业

04:42.540 --> 04:45.340
无所谓就是这么个意思

04:45.340 --> 04:46.640
有三个页面

04:46.640 --> 04:48.740
当然有更多的页面也无所谓

04:48.740 --> 04:51.740
他们一个页面要最终配一个解释

04:51.740 --> 04:52.540
接下来我们来看

04:52.540 --> 04:53.940
如果是这种情况的话

04:53.940 --> 04:55.140
我们的圆码结构

04:55.140 --> 04:56.840
就是我们的src那个目录

04:56.840 --> 04:58.240
它应该长什么样子

04:58.240 --> 05:00.240
或者说它不是说必须要长的样子

05:00.240 --> 05:01.640
只不过我们大部分

05:01.640 --> 05:02.840
大部分时候

05:02.840 --> 05:06.440
愿意用这样的工程结构来去合理的规划它

05:06.440 --> 05:07.740
看一下圆码结构

05:07.740 --> 05:10.040
那么我们的src圆码目录下面

05:10.040 --> 05:11.040
因为有三个页面

05:11.040 --> 05:13.140
我们很有可能就会写成这个样子

05:13.140 --> 05:13.840
第一个页面

05:13.840 --> 05:14.640
页面A的东西

05:14.640 --> 05:16.340
我们就放到一个目录里边

05:16.340 --> 05:17.740
它可能有很多的文件

05:17.740 --> 05:19.640
因为我们圆码里边可能要把它细分

05:19.640 --> 05:20.140
对吧

05:20.140 --> 05:21.340
它的模块把它细分

05:21.340 --> 05:22.840
它可能会分成很多很多的文件

05:22.840 --> 05:24.440
甚至这里边还有纸目录

05:24.440 --> 05:25.540
都是可以的

05:25.540 --> 05:27.540
那么只是其中一个文件

05:27.540 --> 05:29.240
表示页面A的启动模块

05:29.240 --> 05:29.940
启动文件

05:29.940 --> 05:32.540
就是说页面A到时候运行的时候

05:32.540 --> 05:35.340
那么最终要运行这里边的代码

05:35.340 --> 05:36.840
把它运跑起来

05:36.840 --> 05:39.040
它的功能以这个为入口来运行

05:39.040 --> 05:40.740
那么页面B有一个入口文件

05:40.740 --> 05:41.640
页面C

05:41.640 --> 05:43.440
页面C我这里用了一种

05:43.440 --> 05:44.440
比较特殊的情况

05:44.440 --> 05:46.940
页面C它有可能会有两个启动模块

05:46.940 --> 05:48.940
它有可能会有两个

05:48.940 --> 05:49.940
怎么回事

05:49.940 --> 05:51.140
就是说页面C它可能看

05:51.140 --> 05:52.840
你看我给它举个例子

05:52.840 --> 05:54.340
一个是Mate1.js

05:54.340 --> 05:55.540
那么它可能是个启动模块

05:55.540 --> 05:57.140
它是主功能

05:57.140 --> 06:00.040
另一个GS它可能实现一些额外的功能

06:00.040 --> 06:02.040
就实现比方说统计

06:02.040 --> 06:04.240
访问统计的额外功能

06:04.240 --> 06:05.940
是有额外的功能

06:05.940 --> 06:07.240
那么它可能会有两个

06:07.240 --> 06:08.640
两个启动模块存在

06:08.640 --> 06:10.440
就是到时候运行页面C的时候

06:10.440 --> 06:11.340
这两个功能都要启动

06:11.340 --> 06:12.340
一个是它主功能

06:12.340 --> 06:15.340
一个是它的额外的统计

06:15.340 --> 06:16.340
就是统计

06:16.340 --> 06:18.440
经这个页面的人有多少个

06:18.440 --> 06:20.140
来一个人访问一次这个页面

06:20.140 --> 06:22.340
我就给你数量加一

06:22.340 --> 06:24.740
因为说我没做过这种事情

06:24.740 --> 06:25.840
怎么去做

06:25.840 --> 06:27.740
这个东西肯定要服务些配合的

06:27.740 --> 06:29.540
总之它有这么一个功能

06:29.540 --> 06:31.740
需要解释就是一些额外的功能

06:31.740 --> 06:32.740
那么如果说

06:32.740 --> 06:33.740
还有这个文件讲

06:33.740 --> 06:34.940
公共代码

06:34.940 --> 06:35.940
公共代码这个目标

06:35.940 --> 06:37.540
就是说页面A有可能用到

06:37.540 --> 06:38.540
页面B有可能用到

06:38.540 --> 06:41.040
比方说一些工具函数之类的东西

06:41.040 --> 06:42.540
可以放到这个目标下面

06:42.540 --> 06:44.140
总之我们的原码结构

06:44.140 --> 06:46.640
都大概会形成这么一个样子

06:46.640 --> 06:47.640
多页面

06:47.640 --> 06:49.140
每个页面一个结构这种情况

06:49.140 --> 06:52.140
我们就原码结构可能会安排成这个样子

06:52.140 --> 06:53.840
那么我们配置的时候怎么配置呢

06:53.840 --> 06:56.140
大家可以自行去想一想

06:56.140 --> 06:56.740
该怎么配置

06:56.740 --> 06:57.940
其实配置也很简单

06:57.940 --> 06:59.440
你不是每个页面

06:59.440 --> 07:00.940
只有一个结构吗

07:00.940 --> 07:02.740
好了我就启动三个创可呗

07:02.740 --> 07:03.340
对吧

07:03.340 --> 07:05.640
每个创可生成一个结构呗

07:05.640 --> 07:06.940
那么我们看

07:06.940 --> 07:08.140
我们的N券就可以这样配置

07:08.140 --> 07:09.140
三个创可

07:09.140 --> 07:10.240
第一个创可配结

07:10.240 --> 07:13.040
专门我也配结形成一个结构事

07:13.040 --> 07:15.640
那么它的入口是来自于

07:15.640 --> 07:16.840
这个入口对吧

07:16.840 --> 07:18.640
用它去找依赖关系

07:18.640 --> 07:21.840
找到依赖关系过后了最终打包层

07:21.840 --> 07:23.640
把所有的把跟页面A相关的

07:23.640 --> 07:27.440
所有的模块打包成一个结构

07:27.440 --> 07:29.840
那么页面B也是以它为启动

07:29.840 --> 07:31.740
而页面C它有两个启动

07:31.740 --> 07:31.940
对吧

07:31.940 --> 07:33.240
它要启动两个

07:33.240 --> 07:34.140
那么页面C

07:34.140 --> 07:35.740
我不是把它做成两个创可

07:35.740 --> 07:37.240
两个创可就形成两个结构

07:37.240 --> 07:39.040
我们这里是一个结构

07:39.040 --> 07:39.740
看懂没

07:39.740 --> 07:40.840
我不会形成两个创可的

07:40.840 --> 07:42.140
两个创可就是两个结构的

07:42.140 --> 07:43.240
我们这里只有一个结构

07:43.240 --> 07:44.640
所以说还是一个创可

07:44.640 --> 07:45.640
一个创可只不过了

07:45.640 --> 07:46.440
给它一个数组

07:46.440 --> 07:47.240
是不是学过了

07:47.240 --> 07:48.240
给它一个数组

07:48.240 --> 07:49.640
两个都是启动文件

07:49.640 --> 07:50.640
两个都可以作为启动

07:50.640 --> 07:52.240
那么你根据这两个模块

07:52.240 --> 07:53.440
那么去找依赖关系

07:53.440 --> 07:54.440
找出一大堆

07:54.440 --> 07:55.940
那么进行打包

07:55.940 --> 07:56.040
好

07:56.040 --> 07:57.640
那么最后配置一下输出

07:57.640 --> 07:58.840
就是创可的名称

07:58.840 --> 08:00.440
创可的哈希

08:00.440 --> 08:01.540
输出的名称无所谓

08:01.540 --> 08:03.740
根据你的需要自行配置

08:03.740 --> 08:06.240
那么这种情况下

08:06.240 --> 08:08.040
它适用于

08:08.040 --> 08:09.640
什么情况它适用于

08:09.640 --> 08:12.640
它适用于就是页面之间的功能差距巨大

08:12.640 --> 08:13.840
就是页面A和页面B

08:13.840 --> 08:14.840
页面C之间

08:14.840 --> 08:16.640
几乎是没有什么相同功能的

08:16.640 --> 08:18.840
基本上差异非常非常大

08:18.840 --> 08:19.840
比方说页面A

08:19.840 --> 08:21.740
它是一个

08:21.740 --> 08:24.640
搞那个活动的抽奖的页面

08:24.640 --> 08:26.240
页面B是一个新闻页面

08:26.240 --> 08:28.540
页面没什么关系这两个页面之间

08:28.540 --> 08:29.640
差异巨大

08:29.640 --> 08:32.040
公共代码比较少的情况

08:32.040 --> 08:33.540
为什么它适用于这种情况

08:33.540 --> 08:34.940
你想一个道理

08:34.940 --> 08:35.940
这都是有原因的

08:35.940 --> 08:36.940
不是什么新知识

08:36.940 --> 08:39.940
需要大家去想的

08:39.940 --> 08:41.140
这种情况下

08:41.140 --> 08:42.440
它打包出来最终代码

08:42.440 --> 08:44.440
不太会有太多重复

08:44.440 --> 08:46.440
这里我要解释一下

08:46.440 --> 08:47.940
说什么意思呢

08:47.940 --> 08:49.440
就说我们这里不是有公共代码

08:49.440 --> 08:51.740
多多少少不同的页面之间

08:51.740 --> 08:53.340
都可能会用到一些公共代码

08:53.340 --> 08:55.540
比方说我们封装了阿迦克斯函数

08:55.540 --> 08:58.640
封装了一些工具函数之类的

08:58.640 --> 08:59.240
多多少少会

08:59.240 --> 09:00.340
比方说捷克艾瑞

09:00.340 --> 09:02.240
可能每个页面都要用到捷克艾瑞

09:02.240 --> 09:04.240
那么这里的公共代码比较少

09:04.240 --> 09:06.040
没有那么多

09:06.040 --> 09:07.540
因为每个页面都要用

09:07.540 --> 09:09.440
所以说如果说公共代码多了

09:09.440 --> 09:11.440
会出现什么情况

09:11.440 --> 09:12.440
公共代码多了

09:12.440 --> 09:13.840
是不是会导致

09:13.840 --> 09:14.540
导致什么

09:14.540 --> 09:16.240
导致这个页面里面打包出来

09:16.240 --> 09:18.240
因为它里面要用到公共代码

09:18.240 --> 09:20.040
那么它里面也要用到公共代码

09:20.040 --> 09:21.240
分析一代关系

09:21.240 --> 09:23.340
就会把公共代码那些东西分析出来

09:23.340 --> 09:24.240
分析出来过打包

09:24.240 --> 09:25.240
是不是都会形成

09:25.240 --> 09:27.340
每个结果里面都会有公共代码

09:27.340 --> 09:29.140
就它里面有公共代码

09:29.140 --> 09:29.940
它里面有公共代码

09:29.940 --> 09:31.440
它里面有公共代码

09:31.440 --> 09:33.540
是不是造成了一面的公共代码

09:33.540 --> 09:34.540
太多了

09:34.540 --> 09:37.040
就每个就能打包出来的GS里面

09:37.040 --> 09:39.440
公共代码太多了

09:39.440 --> 09:40.840
所以说这种情况

09:40.840 --> 09:41.640
适用于什么呢

09:41.640 --> 09:43.640
适用于公共代码

09:43.640 --> 09:44.640
不多的情况

09:44.640 --> 09:46.440
公共代码较少

09:46.440 --> 09:47.640
那么这样子

09:47.640 --> 09:48.540
最终的代码里边

09:48.540 --> 09:49.940
它不会有太多的重复

09:49.940 --> 09:51.240
就这里边公共代码了

09:51.240 --> 09:51.840
虽然有

09:51.840 --> 09:53.140
但是不会有太多的重复

09:53.140 --> 09:55.540
它适用于这种情况

09:55.540 --> 09:57.040
那么现在

09:57.040 --> 09:59.240
就容易产生一道面试题

09:59.240 --> 10:01.040
来考虑这个Webpack

10:01.040 --> 10:02.440
认识的深不深刻

10:02.440 --> 10:03.040
当然如果说

10:03.040 --> 10:04.240
它出道这种面试题

10:04.240 --> 10:06.340
它已经问得非常非常深了

10:06.340 --> 10:08.440
因为对于绝大部分开发

10:08.440 --> 10:09.940
就是特别是

10:09.940 --> 10:11.140
第一次接触前端

10:11.140 --> 10:12.040
一个入门者

10:12.040 --> 10:13.440
一个行业的新人

10:13.440 --> 10:14.140
而言

10:14.140 --> 10:16.440
Webpack有以后会发现

10:16.440 --> 10:17.540
我不会骗你的

10:17.540 --> 10:18.840
你们以后的公司里面会发现

10:18.840 --> 10:19.940
好多人Webpack

10:19.940 --> 10:21.540
好多地方都没理解清楚

10:21.540 --> 10:23.440
但是它能够用

10:23.440 --> 10:25.340
它能够看懂

10:25.340 --> 10:26.340
对好很多新人

10:26.340 --> 10:28.640
它不会问这么深的知识

10:28.640 --> 10:30.640
比方说会这样子问你

10:30.640 --> 10:31.940
它问你

10:31.940 --> 10:33.480
打包出来了过

10:33.480 --> 10:34.940
这个GS过后

10:34.940 --> 10:37.440
它比较存在的公共代码

10:37.440 --> 10:38.940
那么这公共代码会有重复

10:38.940 --> 10:41.940
这种重复会造成什么样的影响

10:41.940 --> 10:44.940
它会问你这种问题

10:44.940 --> 10:45.640
来吧

10:45.640 --> 10:47.640
你怎么回答

10:47.640 --> 10:48.340
有同学呢

10:48.340 --> 10:50.140
他可能就按照以前

10:50.140 --> 10:51.140
咱们学过了一些知识

10:51.140 --> 10:51.440
对吧

10:51.440 --> 10:52.840
也感受到了一些知识

10:52.840 --> 10:53.740
有重复代码一个

10:53.740 --> 10:54.840
就在言論的问题是吗

10:54.840 --> 10:56.240
不好维护

10:56.240 --> 10:56.840
代码一变了

10:56.840 --> 10:58.340
我要到处去改

10:58.340 --> 11:00.640
这里存不存在这样的问题

11:00.640 --> 11:02.140
存不存在

11:02.140 --> 11:03.740
它不存在这样的问题

11:03.740 --> 11:04.840
为什么不存在呢

11:04.840 --> 11:06.140
因为我们写代码

11:06.140 --> 11:07.940
写的是不是这个代码

11:07.940 --> 11:08.640
不是

11:08.640 --> 11:10.240
我们写的是这个代码

11:10.240 --> 11:11.840
这个才是我们写的代码

11:11.840 --> 11:13.140
这个代码里面有没有重复

11:13.140 --> 11:14.240
这个代码没有重复

11:14.240 --> 11:15.140
非常合理

11:15.140 --> 11:16.940
我们的公共代码抽离出去了

11:16.940 --> 11:17.940
形成单路的模块了

11:17.940 --> 11:21.540
这里边是不会有什么重复代码的

11:21.540 --> 11:22.240
对吧

11:22.240 --> 11:24.140
有重复代码自己写的不行

11:24.140 --> 11:25.240
可能一抽离过后

11:25.240 --> 11:26.940
一定不会有太多的重复代码

11:26.940 --> 11:27.940
那么这里的

11:27.940 --> 11:28.540
它重复

11:28.540 --> 11:30.240
它指的不是这个地方的重复

11:30.240 --> 11:31.940
指的是最终代码里边的重复

11:31.940 --> 11:32.940
那么会不会导致

11:32.940 --> 11:34.540
不容易维护的问题

11:34.540 --> 11:35.540
不会

11:35.540 --> 11:36.540
不会的

11:36.540 --> 11:37.540
因为你这里代码

11:37.540 --> 11:38.340
你写的是这种代码

11:38.340 --> 11:39.440
它不会重复的

11:39.440 --> 11:40.540
你维护是维护谁

11:40.540 --> 11:41.440
维护它

11:41.440 --> 11:43.140
你又不会去维护它

11:43.140 --> 11:44.640
它是未派给邦尼生成的

11:44.640 --> 11:45.240
对吧

11:45.240 --> 11:46.540
所以它不会导致

11:46.540 --> 11:48.740
不容易维护的问题

11:48.740 --> 11:49.740
它其实考虑啥呢

11:49.740 --> 11:50.340
就考虑

11:50.340 --> 11:52.640
你要不要说这个结果

11:52.640 --> 11:53.340
你说了这个结果

11:53.340 --> 11:56.440
说明你跟妹妹理解清楚

11:56.440 --> 11:57.640
那么它有没有问题呢

11:57.640 --> 11:58.840
它有问题

11:58.840 --> 12:00.140
有什么问题呢

12:00.140 --> 12:03.640
导致传输量增加的问题

12:03.640 --> 12:06.340
比方说我们访问这三个页面

12:06.340 --> 12:07.240
浏览器先访问他

12:07.240 --> 12:08.840
现在再访问他

12:08.840 --> 12:09.340
你看

12:09.340 --> 12:10.440
这三个结实里面

12:10.440 --> 12:13.140
每个都有重复代码

12:13.140 --> 12:13.940
对吧

12:13.940 --> 12:14.140
好

12:14.140 --> 12:15.740
那么第一个比方说

12:15.740 --> 12:16.540
比方说

12:16.540 --> 12:17.540
我举个例子

12:17.540 --> 12:18.940
重复代码

12:18.940 --> 12:19.740
就公共代码

12:21.640 --> 12:24.040
公共代码比方说是4KB

12:24.040 --> 12:24.940
好

12:24.940 --> 12:26.040
页面A

12:26.040 --> 12:30.540
页面L代码比方说是10KB

12:30.540 --> 12:32.740
页面B是10KB

12:32.740 --> 12:33.540
都是10KB

12:33.540 --> 12:35.540
页面C是10KB

12:36.540 --> 12:38.340
那么打包出来了过后

12:38.340 --> 12:39.140
页面A打包出来

12:39.140 --> 12:40.240
最终代码是不是10KB

12:40.240 --> 12:42.340
加上公共代码是4KB

12:42.340 --> 12:43.440
页面B打包出来的代码

12:43.440 --> 12:44.840
是不是加上4KB

12:44.840 --> 12:46.640
页面C是不是加上4KB

12:46.640 --> 12:47.340
对吧

12:47.340 --> 12:48.240
就是公共代码

12:48.240 --> 12:49.140
就是14KB

12:49.140 --> 12:50.940
如果说你访问三个页面的话

12:50.940 --> 12:52.440
是不是14乘13

12:52.440 --> 12:53.640
就是14乘13

12:53.640 --> 12:54.740
得多少

12:54.740 --> 12:55.440
12

12:55.440 --> 12:55.740
对吧

12:55.740 --> 12:57.340
12KB

12:57.340 --> 12:59.240
那如果说我们能够想办法

12:59.240 --> 13:01.740
把重复代码抽离成一个文件

13:01.740 --> 13:02.840
抽离成一个文件

13:02.840 --> 13:04.540
那么页面H引用两个文件

13:04.640 --> 13:05.540
一个是重复代码

13:05.540 --> 13:06.940
一个是页面自己的代码

13:06.940 --> 13:08.340
那么这样子访问多少呢

13:08.340 --> 13:09.340
访问出来是多少呢

13:09.340 --> 13:11.540
页面A是不是只有自己的单独一个文件

13:11.540 --> 13:13.740
然后呢一个重复代码的单独一个文件

13:13.740 --> 13:15.840
如果把能够把现在没有分离出去

13:15.840 --> 13:17.540
如果能够把它分离出去的话

13:17.540 --> 13:19.340
那么访问页面A没问题

13:19.340 --> 13:20.240
14KB

13:20.240 --> 13:21.240
访问页面B的时候

13:21.240 --> 13:22.640
不是还是14KB吗

13:22.640 --> 13:23.240
但是不一样

13:23.240 --> 13:25.040
它会缓存

13:25.040 --> 13:26.640
浏览器有个缓存

13:26.640 --> 13:28.040
浏览器有缓存过后

13:28.040 --> 13:29.540
它只需要读页面B的代码就行了

13:29.540 --> 13:30.240
因为重复代码

13:30.240 --> 13:31.740
那个文件已经缓存下来了

13:31.740 --> 13:34.840
它就不会再去读那个文件了

13:34.840 --> 13:36.540
那么最终下来了就是多少呢

13:36.540 --> 13:38.740
就是34KB

13:38.740 --> 13:40.940
那么这个重复代码越多

13:40.940 --> 13:42.740
是不是这个造成的影响就越大

13:42.740 --> 13:43.040
对吧

13:43.040 --> 13:44.440
所以说这种模式

13:44.440 --> 13:46.740
如果说单独抽离一个接式文件的话

13:46.740 --> 13:47.340
这种模式

13:47.340 --> 13:50.240
适用于重复代码比较少的情况下

13:50.240 --> 13:52.040
比较少的情况下差也不大

13:52.040 --> 13:54.840
我们可以接受

13:54.840 --> 13:57.340
它不会导致什么不可维护的问题

13:57.340 --> 13:58.440
完全不存在

13:58.440 --> 13:59.840
它只就是传输的问题

13:59.840 --> 14:01.740
就是缓存的问题

14:01.740 --> 14:04.340
那如果说重复代码多了怎么办了

14:04.340 --> 14:04.740
对不起

14:04.740 --> 14:06.440
我们现阶段

14:06.440 --> 14:07.740
至少我们学到现在

14:07.740 --> 14:09.040
以后这门课

14:09.040 --> 14:10.840
后面文汇在讲优化的时候

14:10.840 --> 14:14.040
我会给大家说

14:14.040 --> 14:15.040
至少它是学到现在了

14:15.040 --> 14:16.140
我们还解决不了

14:16.140 --> 14:18.840
还解决不了

14:18.840 --> 14:19.740
就这个

14:19.740 --> 14:21.140
就是也有人说

14:21.140 --> 14:22.740
不能不能单独去打一个

14:22.740 --> 14:24.240
用一个创可去打重

14:24.240 --> 14:26.340
把重复代码打成一个单独的

14:26.340 --> 14:28.340
就是一个文件

14:28.340 --> 14:29.440
重复代码

14:29.440 --> 14:31.040
不行

14:31.040 --> 14:32.440
为什么了

14:32.440 --> 14:33.940
为什么不行

14:33.940 --> 14:36.640
因为这里是有依赖的模块

14:36.640 --> 14:38.840
什么意思

14:38.840 --> 14:39.540
所以说这些课

14:39.540 --> 14:41.740
我们虽然说讲的是最佳时间

14:41.740 --> 14:44.340
但是真正的作用

14:44.340 --> 14:46.440
是帮大家理解我们学的知识

14:46.440 --> 14:47.540
所学的知识

14:47.540 --> 14:50.740
为什么不能去单独开一个创可

14:50.740 --> 14:55.250
common创可

14:55.250 --> 14:58.250
去打包一个公共模块

14:58.250 --> 14:59.950
打包一个公共模块

14:59.950 --> 15:01.150
打包出一个公共模块

15:01.150 --> 15:02.050
为什么不行

15:02.050 --> 15:07.950
因为除了引用自己的配几点GS之外

15:07.950 --> 15:08.350
再去引用

15:08.350 --> 15:10.350
还要引用common.GS

15:10.350 --> 15:11.850
那么一面B

15:11.850 --> 15:15.950
一面C

15:15.950 --> 15:17.450
为什么这样子不行

15:17.450 --> 15:19.750
为什么不能去单独开一个创可

15:19.750 --> 15:21.050
原因在哪

15:21.050 --> 15:25.350
原因在于入口

15:25.350 --> 15:27.550
原因在于入口

15:29.050 --> 15:32.950
我们再拿个地方看一下吧

15:32.950 --> 15:34.350
原因在于我们从

15:34.350 --> 15:37.550
你看一下打包出来的文件

15:37.550 --> 15:40.650
有没有暴露任何的权局变量

15:40.650 --> 15:41.950
有没有暴露

15:41.950 --> 15:43.650
是没有暴露任何的权局变量

15:43.650 --> 15:46.150
如果说你打包出来两个文件的话

15:46.150 --> 15:46.850
那对不起

15:46.850 --> 15:48.650
你这个这里边

15:48.650 --> 15:50.750
根本就用不到这边的东西

15:50.750 --> 15:52.550
而且说这个逻辑上都说不通

15:52.550 --> 15:53.950
因为你去打包的话

15:53.950 --> 15:54.550
你看

15:54.550 --> 15:55.350
你去打包的话

15:55.350 --> 15:57.850
以頁面A的index.GS

15:57.850 --> 15:59.450
为启动模块

15:59.450 --> 16:01.150
以它为启动模块打包

16:01.150 --> 16:03.050
那么以它为启动模块打包的话

16:03.050 --> 16:04.650
这个模块用着

16:04.650 --> 16:06.450
它是不是也会用到这个里边代码

16:06.450 --> 16:07.750
说这里边打包A的时候

16:07.750 --> 16:10.250
它一定会把重复代码包含进来

16:10.250 --> 16:12.450
所以没办法分离出去

16:12.450 --> 16:13.150
没办法分离出去

16:13.150 --> 16:14.650
因为它这里边模块的话里边

16:14.650 --> 16:15.150
它会用

16:15.150 --> 16:16.550
它会用require

16:16.550 --> 16:17.150
import

16:17.150 --> 16:19.150
这种方式在用这个功能代码里边的东西

16:19.150 --> 16:20.650
你根本就分离不出去

16:20.650 --> 16:21.450
除非你这里不用

16:21.450 --> 16:22.050
你不用的话

16:22.050 --> 16:23.450
怎么实现功能

16:23.450 --> 16:25.350
逻辑上也说不通

16:25.350 --> 16:26.350
那么就算你打包出来了

16:26.350 --> 16:28.450
它也会导致一个就是

16:28.450 --> 16:29.650
它没有暴露东西

16:29.650 --> 16:30.750
没有暴露权力变量

16:30.750 --> 16:31.950
所以说因为这个件事里面

16:31.950 --> 16:33.750
根本就用不到它里面的东西

16:33.750 --> 16:34.850
懂这个意思吗

16:34.850 --> 16:37.350
而且它从根本上逻辑就说不通

16:37.350 --> 16:39.050
除非你这个模块化代码里面

16:39.050 --> 16:40.350
根本就没有用common里面

16:40.350 --> 16:40.950
common里面的东西

16:40.950 --> 16:41.650
那没有用的话

16:41.650 --> 16:43.150
那自然不依赖

16:43.150 --> 16:44.150
那你用了的话

16:44.150 --> 16:45.550
那自然会被打包进去

16:45.550 --> 16:46.750
说这个东西分离不出来

16:46.750 --> 16:47.850
是这么个原因

16:47.850 --> 16:49.450
它不是开不开窗口的问题

16:49.450 --> 16:50.450
因为每一个窗口

16:50.450 --> 16:51.550
它都会根据入口

16:51.550 --> 16:53.550
去分析一大堆依赖关系

16:53.550 --> 16:54.350
这意思吗

16:54.350 --> 16:55.350
它分析大堆依赖关系

16:55.350 --> 16:56.450
它一分析就把它说

16:56.450 --> 16:58.950
就把公共模块的代码就分析过来了

16:58.950 --> 17:00.050
它说你现阶段了

17:00.050 --> 17:01.850
以后我们会找一些

17:01.850 --> 17:03.750
找一些办法能够解决

17:03.750 --> 17:05.450
但是现在是解决不了的

17:05.450 --> 17:06.750
但是它影响的

17:06.750 --> 17:09.350
也仅仅是影响一个传输的量

17:09.350 --> 17:10.950
也仅仅是影响一个传输的量

17:10.950 --> 17:12.950
它不会有什么可维护性的影响

17:12.950 --> 17:15.150
这完全不存在

17:15.150 --> 17:17.350
这目前我们可以不用管它

17:17.350 --> 17:18.350
这是地动情况

17:18.350 --> 17:20.850
每个页面一个解释

17:20.850 --> 17:22.750
好 接下来我们看这个

17:22.750 --> 17:25.150
一个页面多个解释

17:25.150 --> 17:26.150
刚刚你不是说

17:26.150 --> 17:27.150
老师你不是骗人吗

17:27.150 --> 17:27.850
你刚刚不是说

17:27.850 --> 17:29.150
你不好把它分离出去吗

17:29.150 --> 17:30.150
你看这个不是

17:30.150 --> 17:31.650
一个页面A它要用到这个解释

17:31.650 --> 17:32.850
页面B也要用到这个解释

17:32.850 --> 17:34.250
不就是重复代码吗

17:34.250 --> 17:34.750
不一样

17:34.750 --> 17:37.150
我们可以说这种情况还不一样的

17:37.150 --> 17:37.850
我们来看吧

17:37.850 --> 17:40.450
我们先看结构

17:40.450 --> 17:42.150
第一个页面入口文件

17:42.150 --> 17:43.450
页面B入口文件

17:43.450 --> 17:44.950
这就没什么好说的

17:44.950 --> 17:46.450
多了这么一个模块

17:46.450 --> 17:47.650
这个模块用来干嘛呢

17:47.650 --> 17:51.650
它是用来统计访问人数的

17:51.650 --> 17:53.150
那么你可以看到

17:53.150 --> 17:55.250
这个模块是不是跟页面A的模块

17:55.250 --> 17:57.950
跟页面B的模块没有任何关系

17:57.950 --> 17:58.450
对吧

17:58.450 --> 18:01.650
它没有直接的联系

18:01.650 --> 18:02.850
你看页面A

18:02.850 --> 18:04.850
你想想如果说真的有这么功能

18:04.850 --> 18:07.950
它是一个单独的统计访问人数的功能

18:07.950 --> 18:09.450
那么这个功能一看页面A

18:09.450 --> 18:11.650
页面A会不会用到这里边的东西

18:11.650 --> 18:12.850
根本就不会

18:12.850 --> 18:14.950
页面A是它自己的其他的功能

18:14.950 --> 18:16.450
一些主功能业务功能

18:16.450 --> 18:18.150
那么这个东西跟它没有任何关系

18:18.150 --> 18:20.650
跟页面B也没有任何关系

18:20.650 --> 18:22.950
像这种情况下的重复代码

18:22.950 --> 18:24.150
就是这个公共模块

18:24.150 --> 18:25.150
我们可以提取出去

18:25.150 --> 18:26.950
可以单独开一个创可提取出去

18:26.950 --> 18:29.450
当然也可能会用到公共代码

18:29.450 --> 18:31.350
就是这个统计的时候

18:31.350 --> 18:32.950
可能要用到一些辅助函数

18:32.950 --> 18:34.150
在这里边去找

18:34.150 --> 18:35.950
那么A面A也可能会用到辅助函数

18:35.950 --> 18:37.650
A面B也可能用到辅助函数

18:37.650 --> 18:39.250
我们说的是

18:39.250 --> 18:41.350
根据一个入口

18:41.350 --> 18:42.650
如果说这个入口里边

18:42.650 --> 18:44.450
分析出了一大堆模块一来

18:44.450 --> 18:46.650
那么其中有一些模块是重复的

18:46.650 --> 18:48.750
这个东西是目前提不出去的

18:48.750 --> 18:50.250
但是如果说有两个模块

18:50.250 --> 18:51.950
它们毫不相干

18:51.950 --> 18:53.950
它们根本就不会相互使用

18:53.950 --> 18:55.450
那么这个是能够提出去了

18:55.450 --> 18:56.750
我们目前只能提这个

18:56.750 --> 18:57.950
那么这个东西该怎么提呢

18:57.950 --> 18:59.050
就是开创可

18:59.050 --> 19:00.650
你看A面A我开一个创可

19:00.650 --> 19:01.850
A面B开一个创可

19:01.850 --> 19:04.250
那么根据它开一个创可

19:04.250 --> 19:05.150
那么这三个里边

19:05.150 --> 19:07.450
这三个里面会不会有重复代码

19:07.450 --> 19:07.550
这三个里面会不会有重复代码

19:07.550 --> 19:07.650
这三个里面会不会有重复代码

19:07.650 --> 19:07.750
这三个里面会不会有重复代码

19:07.750 --> 19:08.350
这三个里面会不会有重复代码

19:08.350 --> 19:09.950
但是有的只是这里

19:09.950 --> 19:11.750
有的只是康门这个文件家里面的

19:11.750 --> 19:13.750
它有可能会用到这些东西

19:13.750 --> 19:16.150
但是它A面A和A面B跟它之间是没

19:16.150 --> 19:20.850
就它们主功能之间跟它是没有重复代码的

19:20.850 --> 19:23.250
不知道大家能不能理解这个东西

19:23.250 --> 19:25.450
就在我们在往细的说

19:25.450 --> 19:27.650
就是说前面说我们说

19:27.650 --> 19:29.850
公共代码提不出去是指什么呢

19:29.850 --> 19:32.550
是指A面A里边

19:32.550 --> 19:35.150
有一些地方用到了公共模块

19:35.150 --> 19:37.650
用到了公共模块里边的东西

19:37.650 --> 19:39.050
A面B里边

19:39.050 --> 19:40.450
也它的入口文件里边

19:40.450 --> 19:42.150
也可能直接或间接的

19:42.150 --> 19:43.150
用到公共模块东西

19:43.150 --> 19:45.150
是这种方式提不出去

19:45.150 --> 19:47.150
是这种方式提不出去

19:47.150 --> 19:49.150
如果说它里边没有用到公共模块

19:49.150 --> 19:51.650
公共模块又成为一个单独的独立的功能

19:51.650 --> 19:54.450
那么这个是可以提出去了

19:54.450 --> 19:56.350
好好去体会一下

19:56.350 --> 19:58.150
因为你要始终去想象

19:58.150 --> 20:01.150
一个窗格它在通过入口去找一带的时候

20:01.150 --> 20:03.850
它会把所有的一带全部找出来

20:03.850 --> 20:05.150
那么它没有一带的

20:05.150 --> 20:06.850
它就肯定不会人叠出来

20:06.850 --> 20:09.550
那么全部找出来过后打包成一个GS

20:09.550 --> 20:10.950
它是用这种方式来做的

20:10.950 --> 20:14.650
因此像这种它们之间毫无关联的

20:14.650 --> 20:16.550
那么你可以单独开一个窗格

20:16.550 --> 20:17.650
开到窗格过后

20:17.650 --> 20:19.150
是不是就这个公共的GS

20:19.150 --> 20:21.950
就相当于是这个窗格窗间的

20:21.950 --> 20:23.450
那如果说你A面A

20:23.450 --> 20:24.650
A面A要使用的功能

20:24.650 --> 20:25.350
那就应用它

20:25.350 --> 20:26.850
A面B要使用这个统计功能

20:26.850 --> 20:27.950
你去应用它

20:27.950 --> 20:29.750
它跟我们每一个A面的具体的功能

20:29.750 --> 20:30.550
是没有任何关系的

20:30.550 --> 20:32.150
是毫不相干的

20:32.150 --> 20:33.550
它们之间不会相互使用

20:33.550 --> 20:37.320
所以这种方式是可以的

20:37.320 --> 20:40.620
那么这种方式

20:40.720 --> 20:42.720
它使用A面之间有一些独立的

20:42.720 --> 20:43.720
就一定是独立

20:43.720 --> 20:46.920
它跟A面主功能之间是没有任何的相关的

20:46.920 --> 20:47.720
相同的功能

20:47.720 --> 20:50.520
那么可以专单的用一个窗格来抽离

20:50.520 --> 20:53.520
它有利比流量器还存这部分那种

20:53.520 --> 20:54.620
那么这里有个思考

20:54.620 --> 20:55.620
用一个思考问题

20:55.620 --> 20:58.020
它为什么不使用多启动模块的方式呢

20:58.020 --> 20:59.120
什么意思

20:59.120 --> 21:00.120
就这里

21:00.120 --> 21:01.520
我们这样配

21:01.520 --> 21:04.220
配几A

21:04.220 --> 21:05.920
把它配成个数组

21:05.920 --> 21:07.420
不是我们之前学过吗

21:07.420 --> 21:08.420
配成个数组

21:08.420 --> 21:09.520
一个是什么呢

21:09.520 --> 21:11.920
一个是配几A下面的

21:11.920 --> 21:13.220
我就简写

21:13.220 --> 21:15.020
一个是这个统计

21:15.020 --> 21:16.920
statics

21:16.920 --> 21:18.820
下面的in这个设计要介绍

21:18.820 --> 21:22.790
为什么不这样子做呢

21:22.790 --> 21:25.590
这样子做首先可不可以

21:25.590 --> 21:26.290
当然可以

21:26.290 --> 21:27.490
为什么不可以呢

21:27.490 --> 21:28.290
当然可以

21:28.290 --> 21:29.190
那么这样打包出来

21:29.190 --> 21:29.890
它是一个文件

21:29.890 --> 21:30.590
它是一个文件

21:30.590 --> 21:31.090
对吧

21:31.090 --> 21:33.190
然后它里边是不是有两个启动

21:33.190 --> 21:34.090
它同时要启动

21:34.090 --> 21:35.990
它同时要运行in这个设计要介绍

21:35.990 --> 21:37.030
同时要运行这个的

21:37.030 --> 21:37.990
代码是吧

21:37.990 --> 21:39.190
功能是不是一定可以

21:39.190 --> 21:39.790
没问题

21:39.890 --> 21:41.090
那么这样子做可不可以

21:41.090 --> 21:42.290
可以没问题

21:42.290 --> 21:43.390
只不过它会

21:43.390 --> 21:44.890
导致我们刚才说的

21:44.890 --> 21:46.890
增加传输量的问题

21:46.890 --> 21:48.490
浏览器它没法缓存

21:48.490 --> 21:50.190
没法缓存这个公共的代码

21:50.190 --> 21:50.990
没法缓存

21:50.990 --> 21:54.190
所以只是有这么一个问题存在

21:54.190 --> 21:58.090
因此它这样做是可以的

21:58.090 --> 21:59.690
那么接下来我们再看第三种场景

21:59.690 --> 22:00.890
就单一应用

22:00.890 --> 22:01.890
你们后边学什么

22:01.890 --> 22:02.790
5u啊react

22:02.790 --> 22:04.290
基本上都是单一应用

22:04.290 --> 22:05.690
什么是单一应用呢

22:05.690 --> 22:07.090
就是整个网站

22:07.090 --> 22:09.690
或者是某一个网站的一个板块

22:09.690 --> 22:11.390
它只有一个页面

22:11.390 --> 22:12.390
看上去有很多个页面

22:12.390 --> 22:13.390
实际上只有一个页面

22:13.390 --> 22:14.290
后边里面学到5u

22:14.290 --> 22:15.790
学到react就彻底明白了

22:15.790 --> 22:16.990
其实这个也很好理解

22:16.990 --> 22:17.990
就一个页面

22:17.990 --> 22:19.990
那么有些人觉得都太奇怪了

22:19.990 --> 22:21.090
一个页面

22:21.090 --> 22:23.790
那比方说我要在新闻列表页

22:23.790 --> 22:27.090
和新闻详情页里边翻页就切换

22:27.090 --> 22:28.190
那不是多个页面吗

22:28.190 --> 22:28.590
不是

22:28.590 --> 22:30.290
它还是只有一个页面

22:30.290 --> 22:31.190
那么页面中的内容

22:31.190 --> 22:32.390
它怎么来变化的呢

22:32.390 --> 22:34.190
全部靠JS

22:34.190 --> 22:36.590
就页面中的元素靠JS来创建

22:36.590 --> 22:39.290
页面中的页面变了过后

22:39.290 --> 22:41.090
就整个整个页面

22:41.090 --> 22:42.490
感觉一下子改变了过后了

22:42.490 --> 22:44.290
它是全部靠JS来运行

22:44.290 --> 22:45.390
把这些元素删除

22:45.390 --> 22:46.990
又重新创建元素

22:46.990 --> 22:49.090
有些人说这个太麻烦了吧

22:49.090 --> 22:49.690
不会的

22:49.690 --> 22:51.890
因为以后5u,react这些框架

22:51.890 --> 22:54.890
他们专门来解决这样的问题

22:54.890 --> 22:57.890
像react这些都是能够实现担业应用的

22:57.890 --> 22:59.890
而且实现得非常好

22:59.890 --> 23:01.590
所以你们以后会学习

23:01.590 --> 23:02.890
那么担业应用的话

23:02.890 --> 23:04.790
以为它只有一个页面

23:04.790 --> 23:06.890
因此我们往往也不存在什么

23:06.890 --> 23:07.690
代码重复

23:07.690 --> 23:08.890
连乱起拔刀的问题还存

23:08.890 --> 23:10.290
存在这些问题了

23:10.290 --> 23:11.490
直接一个JS

23:11.490 --> 23:12.690
一个JS

23:12.690 --> 23:12.890
好

23:12.890 --> 23:15.390
那么我们原码结构的划分就是这样子

23:15.390 --> 23:17.090
你看只功能模块

23:17.090 --> 23:18.690
就是因为它功能很多

23:18.690 --> 23:19.890
全部都写到这里边

23:19.890 --> 23:20.490
功能很多

23:20.490 --> 23:21.490
可能划分很多模块

23:21.490 --> 23:22.090
它不是页面

23:22.090 --> 23:23.290
而是模块

23:23.290 --> 23:24.690
然后有一个入口文件

23:24.690 --> 23:26.090
应那个时候的JS

23:26.090 --> 23:27.090
有些公共代码模块

23:27.090 --> 23:29.790
总之自己在里边按照

23:29.790 --> 23:31.190
认定你觉得舒服的方式

23:31.190 --> 23:31.890
来经营划分

23:31.890 --> 23:33.190
或者是按照你们公司的规定

23:33.190 --> 23:34.290
来经营划分

23:34.290 --> 23:36.190
我们还有配置非常简单

23:36.190 --> 23:37.490
有一个入口

23:37.490 --> 23:38.790
入口就是一个文件

23:38.790 --> 23:39.490
终于入口

23:39.490 --> 23:41.090
我懒得去写对象了

23:41.090 --> 23:42.290
然后输出

23:42.290 --> 23:43.390
就随便找个文件名

23:43.390 --> 23:44.290
配上一个哈希

23:44.290 --> 23:45.890
哈希也不用去创个哈希了

23:45.890 --> 23:47.290
因为都一样

23:47.290 --> 23:48.990
因为只有一个创

23:48.990 --> 23:51.390
那么这里输出一碗烧

23:51.390 --> 23:51.990
懂了意思吗

23:51.990 --> 23:53.390
我这里就列出来了

23:53.390 --> 23:56.490
三种经典的应用场景

23:56.490 --> 23:57.290
那么你们以后

23:57.290 --> 23:58.490
是不是一定

23:58.490 --> 23:59.690
只是这三种通用一个

23:59.690 --> 24:00.290
它不一定

24:00.290 --> 24:01.590
那里面以后遇到的东西

24:01.590 --> 24:03.390
情况可能太复杂了

24:03.390 --> 24:04.490
当然那种情况下

24:04.490 --> 24:06.890
要你自己去手动的去配合一个

24:06.890 --> 24:07.790
不太会遇到

24:07.790 --> 24:08.790
我负责人告诉大家

24:08.790 --> 24:10.390
不太会遇得到

24:10.390 --> 24:12.390
但是我们这里可能是作为一个

24:12.390 --> 24:14.590
理解入口和出口的

24:14.590 --> 24:15.990
这么一个出发点

24:15.990 --> 24:17.990
来讲了这么一个东西

24:17.990 --> 24:19.690
让大家对入口和出口

24:19.690 --> 24:21.590
理解更加完善一点

24:21.590 --> 24:24.590
OK 这是关于这一块

