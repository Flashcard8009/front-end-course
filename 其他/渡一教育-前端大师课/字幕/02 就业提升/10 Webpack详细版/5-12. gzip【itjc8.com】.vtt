WEBVTT

00:00.560 --> 00:03.560
增加一个GZAP

00:03.560 --> 00:08.560
那么这个玩意呢 实际上跟那个VIPAC 它是没有直接的关系的

00:08.560 --> 00:14.560
因为它本来是服务器跟客户端之间的事情

00:14.560 --> 00:16.560
VIPAC只是帮一个忙

00:16.560 --> 00:18.560
我作为一个第三方 我帮忙吧

00:18.560 --> 00:20.560
帮忙给你解决一些问题

00:20.560 --> 00:22.560
但它完全解决了 解决不了

00:22.560 --> 00:24.560
因为那是服务器跟客户端之间的事情

00:24.560 --> 00:25.560
主角是他们

00:25.560 --> 00:28.560
所以说我说一下这个东西 到底是什么玩意

00:29.560 --> 00:32.560
还是也用了上几颗的代码 我就直接把它拿过来了

00:32.560 --> 00:34.560
我就把课件做了一下

00:34.560 --> 00:36.560
看一下吧

00:36.560 --> 00:38.560
是这样啊

00:38.560 --> 00:42.560
就是这个GZAP 它是一种压缩文件的算法

00:42.560 --> 00:46.560
我们平时也在使用压缩文件 对吧

00:46.560 --> 00:47.560
实际上大家可能不知道

00:47.560 --> 00:50.560
压缩文件其实有很多种压缩方式

00:50.560 --> 00:54.560
那么GZAP呢 起始终就是一种压缩方式

00:54.560 --> 00:57.560
那么有了压缩之后呢 大家就可以再想

00:57.560 --> 01:01.560
我们跟服务器之间 就是浏览器跟服务器之间传输的时候呢

01:01.560 --> 01:04.560
如果说其他优化都已经做完了

01:04.560 --> 01:06.560
还有没有别的办法了

01:06.560 --> 01:08.560
我们就可以用压缩了

01:08.560 --> 01:09.560
那么怎么来用呢 我们来看一下

01:09.560 --> 01:12.560
在一个BS结构 就是Browse Server

01:12.560 --> 01:14.560
浏览器到服务器之间这么一种结构中

01:14.560 --> 01:17.560
如果我们使用压缩来进行传输的话

01:17.560 --> 01:20.560
它肯定是可以大幅度提升传输效率

01:20.560 --> 01:23.560
那么该怎么来做呢 是这样子

01:23.560 --> 01:25.560
它分为这么几个步骤啊

01:25.560 --> 01:27.560
浏览器不是发动请求吗

01:27.560 --> 01:29.560
它在发动请求的时候呢

01:29.560 --> 01:32.560
它往往会给服务器这么一个字段

01:32.560 --> 01:34.560
叫做Accept Encoding

01:34.560 --> 01:36.560
那么这个字段服务器看它用不用

01:36.560 --> 01:39.560
用的话那就有用 服务器不用的话就拿到

01:39.560 --> 01:42.560
就给它告诉服务器什么呢

01:42.560 --> 01:45.560
就是我这个浏览器 比方说我是谷歌浏览器

01:45.560 --> 01:48.560
我支持哪些压缩内容的传输

01:48.560 --> 01:50.560
就是你可以不用给我传输一个正常的内容

01:50.560 --> 01:53.560
你可以给我传输一个压缩的结果

01:53.560 --> 01:56.560
当然我过后了一定要解压

01:56.560 --> 02:00.560
比方说别人在QQ上给你传了一个压缩包

02:00.560 --> 02:02.560
那你得有解压软件你才能解压

02:02.560 --> 02:05.560
那么Accept Encoding就是告诉服务器

02:05.560 --> 02:07.560
我有哪些解压的功能

02:07.560 --> 02:10.560
我可以怎么样解压哪些东西

02:10.560 --> 02:12.560
像我们谷歌的话给服务器发送的一般就是

02:12.560 --> 02:15.560
GZIP、Deflate、BR

02:15.560 --> 02:17.560
这些都是不同的压缩算法

02:17.560 --> 02:19.560
它们各自有不同的优势

02:19.560 --> 02:21.560
像这些东西要扯起来就化成了

02:21.560 --> 02:23.560
大家如果有兴趣的话可以去摆渡一下

02:23.560 --> 02:24.560
这些不同的压缩算法

02:24.560 --> 02:26.560
有一些科普的文章

02:26.560 --> 02:28.560
不要让我们随便看一个吧

02:28.560 --> 02:31.560
随便看一个就在我们访问摆渡

02:32.560 --> 02:35.560
看一下我们的网络请求

02:35.560 --> 02:39.560
其实我们五个人安排的他就是发送的这几个

02:39.560 --> 02:40.560
看一下吧

02:40.560 --> 02:42.560
国内安排也看Accept Encoding对吧

02:42.560 --> 02:45.560
GZIP、Deflate、BR

02:45.560 --> 02:48.560
这些告诉服务器我支持这些压缩算法

02:48.560 --> 02:50.560
那么告诉了服务器服务器怎么办

02:50.560 --> 02:52.560
服务器爱怎么办怎么办

02:52.560 --> 02:53.560
比方说有些服务器

02:53.560 --> 02:55.560
我们就可以经过自己的代码

02:55.560 --> 02:57.560
一些配置之类的东西

02:57.560 --> 03:00.560
那么我知道科普端很聪明

03:00.560 --> 03:02.560
他支持这些压缩算法

03:02.560 --> 03:03.560
既然你支持

03:03.560 --> 03:06.560
我就给你发的不是原始内容了

03:06.560 --> 03:08.560
我给你发的一些压缩过后的内容

03:08.560 --> 03:09.560
你去给我解压

03:09.560 --> 03:10.560
服务器怎么操作呢

03:10.560 --> 03:11.560
它一般会这样操作

03:11.560 --> 03:12.560
不是说一定的

03:12.560 --> 03:13.560
一般会这样操作

03:13.560 --> 03:14.560
就是我读一个文件

03:14.560 --> 03:16.560
比方说我有一个GS

03:16.560 --> 03:18.560
或者是ATM文件

03:18.560 --> 03:20.560
那么这个文件它是没有压缩过的

03:20.560 --> 03:22.560
就是原始的内容

03:22.560 --> 03:24.560
压缩不是说我们之前的

03:24.560 --> 03:25.560
把换行服务去掉

03:25.560 --> 03:26.560
那不是这个意思

03:26.560 --> 03:28.560
压缩是把它变成恶劲之格式

03:28.560 --> 03:30.560
把它变成恶劲之格式的

03:30.560 --> 03:33.560
其实基本的思想就是

03:33.560 --> 03:36.560
把那些文件里面有重复的制服

03:36.560 --> 03:37.560
和制服串

03:37.560 --> 03:38.560
把它合并

03:38.560 --> 03:40.560
然后通过一种方式

03:40.560 --> 03:42.560
记录着它出现的位置

03:42.560 --> 03:44.560
解压了就是根据这个位置

03:44.560 --> 03:45.560
新型再把它还原

03:45.560 --> 03:47.560
是这么一个意思

03:47.560 --> 03:49.560
那么我们把个位压缩的文件读出来

03:49.560 --> 03:51.560
读出来过后我就进行压缩

03:51.560 --> 03:53.560
那么用哪种压缩的方式呢

03:53.560 --> 03:55.560
那就看客户端支持哪些

03:55.560 --> 03:56.560
一般服务器我们要

03:56.560 --> 03:58.560
根据客户端的情况

03:58.560 --> 04:01.560
你不然说我给你一个RAR

04:01.560 --> 04:03.560
一不支持的压缩

04:03.560 --> 04:04.560
你就解压不了

04:04.560 --> 04:05.560
所以说要看客户端怎么去支持

04:05.560 --> 04:06.560
我们一般会写代码

04:06.560 --> 04:07.560
或者是配置

04:07.560 --> 04:08.560
都可以搞另一件事

04:08.560 --> 04:10.560
总之对这个位压缩的文件

04:10.560 --> 04:12.560
进行压缩

04:12.560 --> 04:13.560
压缩完了之后

04:13.560 --> 04:15.560
就这一步会耗时间了

04:15.560 --> 04:16.560
你看把这个内容

04:16.560 --> 04:18.560
把进行压缩肯定会耗时间

04:18.560 --> 04:19.560
压缩完了之后

04:19.560 --> 04:21.560
服务器当然是在内存里边

04:21.560 --> 04:22.560
内存里边进行压缩

04:22.560 --> 04:23.560
压缩完了过后

04:23.560 --> 04:24.560
就传输了客户端

04:24.560 --> 04:25.560
传输的时候

04:25.560 --> 04:27.560
就带一个响应头

04:27.560 --> 04:28.560
响应头就是

04:28.560 --> 04:29.560
刚才是请求头

04:29.560 --> 04:30.560
这是响应头

04:30.560 --> 04:32.560
content encoding

04:32.560 --> 04:34.560
要给告诉客户端

04:34.560 --> 04:35.560
我这里进行了压缩了

04:35.560 --> 04:37.560
那么使用什么压缩方式呢

04:37.560 --> 04:39.560
使用的方式是GZIP

04:39.560 --> 04:40.560
那么一会你解压的时候

04:40.560 --> 04:42.560
就使用它的方式来解压

04:42.560 --> 04:44.560
那么就把压缩的内容

04:44.560 --> 04:45.560
给浏览器了

04:45.560 --> 04:46.560
如果说你没有这个

04:46.560 --> 04:47.560
响应头的话

04:47.560 --> 04:48.560
浏览器你蒙的

04:48.560 --> 04:49.560
它会把它当成正常内容来读去

04:49.560 --> 04:51.560
那一读出来就是乱吧

04:51.560 --> 04:52.560
那么浏览器一看

04:52.560 --> 04:54.560
你给我的是一个GZIP压缩

04:54.560 --> 04:55.560
正好我能够解压

04:55.560 --> 04:57.560
那么我就帮GZIP

04:57.560 --> 04:59.560
那么就是把它解压

04:59.560 --> 05:00.560
解压完了就是一个

05:00.560 --> 05:01.560
正常的文本的

05:01.560 --> 05:03.560
正常的文本就可以渲染了

05:03.560 --> 05:04.560
就这么一回事

05:04.560 --> 05:07.560
那么主要的优点在哪呢

05:07.560 --> 05:09.560
优点它在传出内容

05:09.560 --> 05:10.560
会变得非常非常少

05:10.560 --> 05:11.560
因为很多的重复的

05:11.560 --> 05:13.560
字幕上就压

05:13.560 --> 05:15.560
就压缩到一起了

05:15.560 --> 05:17.560
它传输的内容可以减少

05:17.560 --> 05:19.560
因此传输效率可以得到大幅度提升

05:19.560 --> 05:22.560
但是这个有意义说一

05:22.560 --> 05:24.560
并不是一定的

05:24.560 --> 05:25.560
并不是一定的

05:25.560 --> 05:28.560
提升可能有的时候比较有限

05:28.560 --> 05:30.560
比方说一些文件本来就比较小

05:30.560 --> 05:32.560
它里边没有什么重复的内容

05:32.560 --> 05:34.560
那这个压缩跟没有压缩是一样的

05:34.560 --> 05:35.560
反而会增加一些时间

05:35.560 --> 05:36.560
增加压缩的时间

05:36.560 --> 05:38.560
增加解压的时间

05:38.560 --> 05:39.560
所以说有的时候

05:39.560 --> 05:40.560
可能得不尝试

05:40.560 --> 05:41.560
比如对一些大的文件

05:41.560 --> 05:43.560
重复了内容比较多的文件

05:43.560 --> 05:45.560
有压缩效率比较高的文件

05:45.560 --> 05:46.560
我们开启压缩过后

05:46.560 --> 05:48.560
才能够大幅度提升传输效率

05:48.560 --> 05:50.560
其实这个东西以后

05:50.560 --> 05:52.560
还要开发服务器的时候

05:52.560 --> 05:53.560
还要经过不断的去测试

05:53.560 --> 05:55.560
到底我这个压缩启用了

05:55.560 --> 05:57.560
因为压缩也要占用CPU

05:57.560 --> 05:58.560
占用服务器内存

05:58.560 --> 05:59.560
像这些东西

05:59.560 --> 06:00.560
到底我启用了过后

06:00.560 --> 06:01.560
到底是好是坏

06:01.560 --> 06:02.560
还要经过一个平衡

06:02.560 --> 06:03.560
不过一般来说

06:03.560 --> 06:05.560
压缩是肯定要压缩的

06:05.560 --> 06:06.560
以后开发服务器

06:06.560 --> 06:07.560
真正发布的时候

06:07.560 --> 06:08.560
压缩是肯定要压缩的

06:08.560 --> 06:10.560
只不过对哪些文件进行压缩

06:10.560 --> 06:11.560
压缩到什么程度

06:11.560 --> 06:12.560
用哪种压缩算法

06:12.560 --> 06:14.560
那么这个东西需要研究

06:14.560 --> 06:16.560
缺点在哪呢

06:16.560 --> 06:18.560
缺点是它会增加额外的时间

06:18.560 --> 06:20.560
服务器要压缩需要一段时间

06:20.560 --> 06:22.560
那么客户端解压需要一段时间

06:22.560 --> 06:24.560
本来就是客户端跟服务器之间的事情

06:24.560 --> 06:26.560
跟vpec没有什么关系

06:26.560 --> 06:28.560
然后vpec他能够做什么

06:28.560 --> 06:30.560
他能够帮帮忙

06:30.560 --> 06:31.560
他就说我有一个插件

06:31.560 --> 06:32.560
vpec里面有一个插件

06:32.560 --> 06:33.560
叫comprase

06:33.560 --> 06:35.560
压缩compration

06:35.560 --> 06:36.560
vpec plug-in

06:36.560 --> 06:38.560
这个插件可以先帮你打包好

06:38.560 --> 06:39.560
把压缩给你压缩好

06:39.560 --> 06:41.560
那么压缩好了之后

06:41.560 --> 06:43.560
服务器就没有第三步了

06:43.560 --> 06:44.560
不需要再压缩了

06:44.560 --> 06:45.560
什么意思

06:45.560 --> 06:46.560
下面这个原理图

06:46.560 --> 06:47.560
得看一下

06:47.560 --> 06:48.560
还是一样的

06:48.560 --> 06:49.560
琉琅琴球服务器

06:49.560 --> 06:51.560
然后服务器读取一个文件

06:51.560 --> 06:52.560
那么这个文件

06:52.560 --> 06:54.560
就已经是压缩好的文件了

06:54.560 --> 06:56.560
已经压缩好了过文件

06:56.560 --> 06:58.560
服务器就不需要再进行压缩了

06:58.560 --> 06:59.560
直接把文件那种读出来

06:59.560 --> 07:00.560
就这一步省略了

07:00.560 --> 07:01.560
这一步很好使的

07:01.560 --> 07:02.560
那么这一步省略了

07:02.560 --> 07:03.560
就直接发送给客户端了

07:03.560 --> 07:05.560
客户端他就直接解压

07:05.560 --> 07:07.560
说这个取消不了

07:07.560 --> 07:08.560
这个没办法

07:08.560 --> 07:09.560
没办法

07:09.560 --> 07:11.560
所以说他把这一步省略了

07:11.560 --> 07:13.560
提高了这么一点点的作用

07:13.560 --> 07:15.560
但他不好的地方在哪呢

07:15.560 --> 07:16.560
不好的地方就是说

07:16.560 --> 07:18.560
你这样子先给我

07:18.560 --> 07:20.560
来个目以成周的

07:20.560 --> 07:21.560
先斩后奏

07:21.560 --> 07:22.560
给我帮我压缩了

07:22.560 --> 07:24.560
那么服务器就失去了一些灵活度

07:24.560 --> 07:25.560
比方说服务器

07:25.560 --> 07:26.560
可能要根据不同的情况

07:26.560 --> 07:28.560
来选择不同的压缩算法

07:28.560 --> 07:30.560
动态的给他压缩内容

07:30.560 --> 07:31.560
那么这种情况

07:31.560 --> 07:33.560
服务器就做不到了

07:33.560 --> 07:34.560
就做不到了

07:34.560 --> 07:36.560
所以说一般来说的话

07:36.560 --> 07:37.560
为了保持灵活

07:37.560 --> 07:38.560
我们微卖派个技

07:38.560 --> 07:40.560
即便是要干涉

07:40.560 --> 07:41.560
干涉这个流

07:41.560 --> 07:42.560
即便是要帮忙

07:42.560 --> 07:44.560
也不能帮到忙

07:44.560 --> 07:45.560
所以说我们

07:45.560 --> 07:47.560
这使用那个插件的时候

07:47.560 --> 07:49.560
还是要保持原用的内容

07:49.560 --> 07:50.560
原是内容不能变

07:50.560 --> 07:52.560
我只是给你新增了一些

07:52.560 --> 07:53.560
压缩过后的文件

07:53.560 --> 07:54.560
就不能不要把

07:54.560 --> 07:55.560
原来的文件覆盖掉了

07:55.560 --> 07:56.560
虽然他可以这样做

07:56.560 --> 07:58.560
但是我不建议这样去做

07:59.560 --> 08:00.560
那么这里呢

08:00.560 --> 08:02.560
咱们来用一下这个插件

08:02.560 --> 08:03.560
插件其实也很好用的

08:03.560 --> 08:05.560
咱们已经安装完了

08:05.560 --> 08:06.560
我这里给大家已经安装完了

08:06.560 --> 08:07.560
省一点安装时间

08:07.560 --> 08:08.560
那么用的时候

08:08.560 --> 08:10.560
就直接在这个webpack里边

08:10.560 --> 08:11.560
直接导入进来就行了

08:13.560 --> 08:14.560
require

08:14.560 --> 08:15.560
导入进来

08:15.560 --> 08:18.560
就叫comparation webpack

08:18.560 --> 08:19.560
plunking

08:19.560 --> 08:21.560
就这么个插件

08:21.560 --> 08:22.560
导入进来

08:22.560 --> 08:24.560
new一个comparation

08:24.560 --> 08:29.060
new一个comparation

08:29.060 --> 08:30.060
plunking

08:30.060 --> 08:31.060
它里边有些配置

08:31.060 --> 08:32.060
文件不用配置

08:32.060 --> 08:33.060
它保持

08:34.060 --> 08:36.060
好 那咱们来运行一下

08:36.060 --> 08:38.060
npm装

08:38.060 --> 08:39.060
当然这也是生产环境

08:39.060 --> 08:41.060
但我们开发环境压缩个啥劲了

08:41.060 --> 08:43.060
没有什么压缩的

08:43.060 --> 08:44.060
完了

08:44.060 --> 08:46.060
那里看一下我们的打包结果里边

08:46.060 --> 08:47.060
打包结果里边

08:47.060 --> 08:48.060
是不是每一个

08:48.060 --> 08:49.060
这是我们的原始文件

08:49.060 --> 08:50.060
原始文件

08:50.060 --> 08:51.060
那么这个就是压缩过后的文件

08:51.060 --> 08:52.060
后面有一个后绉名GZ

08:52.060 --> 08:53.060
当然这个文件名

08:53.060 --> 08:54.060
那里可以改

08:54.060 --> 08:55.060
通过这个配置里边去改

08:55.060 --> 08:56.060
file

08:56.060 --> 08:57.060
去改

08:57.060 --> 08:58.060
更多配置的话

08:58.060 --> 08:59.060
有兴趣的话

08:59.060 --> 09:00.060
可以看一下它的官方文档

09:00.060 --> 09:01.060
改成一些别的东西

09:01.060 --> 09:02.060
改成file

09:02.060 --> 09:03.060
file的占位符

09:03.060 --> 09:05.060
表示它原有的文件名

09:05.060 --> 09:08.060
我们改成G

09:08.060 --> 09:11.060
一般来说就是GZIP

09:11.060 --> 09:12.060
GZIP

09:12.060 --> 09:13.060
我们可以改的

09:13.060 --> 09:14.060
这个文件名

09:14.060 --> 09:15.060
看一下吧

09:16.060 --> 09:18.060
当然我们一般不用去改它

09:18.060 --> 09:19.060
一般不用去改它

09:19.060 --> 09:20.060
变成GZIP

09:20.060 --> 09:21.060
就这么回事

09:21.060 --> 09:23.060
总之文件名随便

09:23.060 --> 09:24.060
你可以改的

09:24.060 --> 09:25.060
好 那么这就是

09:25.060 --> 09:26.060
这个插件的使用

09:26.060 --> 09:28.060
它最终的打包结果

09:28.060 --> 09:29.060
所有打包结果

09:29.060 --> 09:30.060
来进行压缩

09:30.060 --> 09:31.060
当然你也可以进行筛选

09:31.060 --> 09:33.060
对哪些打包结果

09:33.060 --> 09:34.060
要进行预压缩

09:34.060 --> 09:37.060
比方说我不希望

09:37.060 --> 09:38.060
对ATM文件

09:38.060 --> 09:39.060
不希望对ATM文件

09:39.060 --> 09:41.060
进行压缩

09:41.060 --> 09:43.060
我这里好像也没有ATM

09:43.060 --> 09:45.060
我希望

09:45.060 --> 09:46.060
比方说

09:46.060 --> 09:47.060
我可以用这个

09:47.060 --> 09:49.060
说一下配置有什么Test

09:49.060 --> 09:51.060
就是我们只对哪些

09:51.060 --> 09:52.060
只针对哪些GSE

09:52.060 --> 09:53.060
进行压缩

09:53.060 --> 09:56.060
比方说我们只针对Made.GS

09:56.060 --> 09:57.060
Made.GS

09:57.060 --> 09:58.060
我这个正在表达

09:58.060 --> 10:00.060
是写的跟普通字不说一样

10:00.060 --> 10:01.060
不说一样

10:01.060 --> 10:02.060
是一样的

10:02.060 --> 10:03.060
就是这么个意思

10:03.060 --> 10:04.060
就可以限制它

10:04.060 --> 10:06.060
只针对哪些进行预压缩

10:10.060 --> 10:11.060
是吧

10:11.060 --> 10:14.060
只针对了Made.GS

10:14.060 --> 10:19.060
Made.GS

10:19.060 --> 10:20.060
那么这个东西

10:20.060 --> 10:21.060
这里也有Made

10:21.060 --> 10:22.060
也有Made

10:22.060 --> 10:23.060
那么就这么个意思

10:23.060 --> 10:24.060
Test

10:24.060 --> 10:25.060
其实还有不少的配置

10:25.060 --> 10:26.060
我来看一下

10:26.060 --> 10:27.060
还是看一下

10:29.060 --> 10:31.060
我们看一下

10:31.060 --> 10:32.060
在插件里边

10:32.060 --> 10:34.060
compress

10:35.060 --> 10:37.060
compress预压缩

10:37.060 --> 10:41.270
这里边有些配置

10:41.270 --> 10:43.270
这个文档可能有一些问题

10:43.270 --> 10:45.270
我不知道

10:45.270 --> 10:47.270
因为以前我好像遇到过

10:47.270 --> 10:48.270
这个文档有些问题

10:48.270 --> 10:49.270
不知道他改过来没有

10:49.270 --> 10:50.270
英文文档是没问题的

10:50.270 --> 10:52.270
这个final name对吧

10:52.270 --> 10:54.270
然后这个可以提供压缩算法

10:54.270 --> 10:55.270
可以提供压缩算法

10:55.270 --> 10:57.270
那么这里的默认的是GZIP

10:57.270 --> 10:59.270
你可以提供别的压缩算法

11:00.270 --> 11:01.270
然后这里

11:01.270 --> 11:02.270
这个玩意

11:02.270 --> 11:03.270
这个玩意还是有用的

11:03.270 --> 11:04.270
就是压缩比例

11:04.270 --> 11:06.270
就是压缩比例

11:06.270 --> 11:08.270
比这个值小的资源

11:08.270 --> 11:09.270
才会被处理

11:09.270 --> 11:10.270
那么我们来看一下

11:10.270 --> 11:11.270
这个东西

11:11.270 --> 11:13.270
比方他默认是0.8

11:13.270 --> 11:14.270
对吧 0.8

11:14.270 --> 11:15.270
那么什么意思呢

11:15.270 --> 11:16.270
就是说你压缩之后

11:16.270 --> 11:17.270
要提计要达到

11:17.270 --> 11:19.270
要小于等于0.8

11:19.270 --> 11:20.270
那么我才会处理

11:20.270 --> 11:21.270
如果说你

11:21.270 --> 11:22.270
不能小于这个值的话

11:22.270 --> 11:23.270
我就不处理了

11:23.270 --> 11:24.270
那个压缩也没什么意义

11:24.270 --> 11:25.270
对吧

11:25.270 --> 11:26.270
那么他还要一个

11:26.270 --> 11:27.270
减压的过程

11:27.270 --> 11:28.270
可能会反而浪费时间

11:28.270 --> 11:29.270
主要是我们0.3

11:29.270 --> 11:31.270
我们去夸张一点

11:32.270 --> 11:33.270
我们把这个去掉

11:36.270 --> 11:38.270
你看都没有压缩了

11:38.270 --> 11:39.270
还打不到这个值

11:39.270 --> 11:40.270
0.5呢

11:40.270 --> 11:43.930
这里呢

11:43.930 --> 11:44.930
我们一般来说

11:44.930 --> 11:45.930
一般来说

11:45.930 --> 11:46.930
你一般就是写个

11:46.930 --> 11:47.930
后绝名为GAS的

11:47.930 --> 11:48.930
我们减压缩

11:48.930 --> 11:49.930
或者是CAS的

11:49.930 --> 11:50.930
就看你要具体情况

11:50.930 --> 11:51.930
因为ATM也是可以压缩的

11:51.930 --> 11:52.930
都可以压缩的

11:52.930 --> 11:53.930
0.5是可以达到的

11:53.930 --> 11:54.930
这两个

11:54.930 --> 11:55.930
那么我把这个去掉

11:55.930 --> 11:56.930
我们再来一次

11:56.930 --> 11:58.930
0.5这两个是可以达到的

11:59.930 --> 12:00.930
至少减了一半

12:00.930 --> 12:01.930
对吧

12:01.930 --> 12:02.930
减了一半

12:02.930 --> 12:03.930
那这个东西也能达到了

12:03.930 --> 12:05.930
就这么一个意思

12:05.930 --> 12:06.930
这么个意思

12:06.930 --> 12:07.930
好了

12:07.930 --> 12:08.930
那么就是说

12:09.930 --> 12:10.930
这里就是压缩

12:10.930 --> 12:11.930
把其用压缩

12:11.930 --> 12:12.930
那么这个其用压缩

12:12.930 --> 12:13.930
过后效果怎么看

12:13.930 --> 12:14.930
不好意思

12:14.930 --> 12:15.930
我们现在看不到效果

12:15.930 --> 12:17.930
因为这个东西需要服务器的支持

12:17.930 --> 12:18.930
那么到时候你怎么办

12:18.930 --> 12:20.930
以后你们学了服务器之后

12:20.930 --> 12:22.930
你们看这个图

12:22.930 --> 12:23.930
你们在服务器端的时候

12:23.930 --> 12:24.930
你们不是有一个

12:24.930 --> 12:26.930
把这个东西部署到服务器上

12:26.930 --> 12:27.930
这个服务器不是有两个文件

12:27.930 --> 12:28.930
二点

12:28.930 --> 12:29.930
比方说Made.js

12:29.930 --> 12:30.930
Made.jsGD

12:31.930 --> 12:33.930
Made.js

12:33.930 --> 12:36.930
Made.jsGD

12:36.930 --> 12:37.930
那么服务器怎么来处理

12:37.930 --> 12:39.930
服务器可以用这种方式来处理

12:39.930 --> 12:41.930
当你去请求这个东西的时候

12:42.930 --> 12:43.930
那么服务器

12:43.930 --> 12:44.930
当然这是一种推荐方案

12:44.930 --> 12:45.930
就预压缩过后

12:45.930 --> 12:46.930
服务器怎么处理

12:46.930 --> 12:47.930
服务器没有必要自己压缩了

12:47.930 --> 12:49.930
它首先检查

12:50.930 --> 12:51.930
服务器检查

12:51.930 --> 12:53.930
它就不是直接把这个内容给力了

12:53.930 --> 12:55.930
它就不是直接内容给人

12:55.930 --> 12:56.930
那就没有压缩了

12:56.930 --> 12:57.930
服务器检查

12:57.930 --> 12:58.930
那么检查什么

12:58.930 --> 13:01.930
Made.jsGD

13:01.930 --> 13:02.930
是否存在

13:03.930 --> 13:04.930
那么如果说存在的话

13:04.930 --> 13:05.930
怎么办呢

13:05.930 --> 13:06.930
读取

13:07.930 --> 13:08.930
读取这个文件的内容

13:08.930 --> 13:11.930
读取该文件内容

13:11.930 --> 13:12.930
把这个的文件内容读出来

13:12.930 --> 13:13.930
而不去读它

13:13.930 --> 13:15.930
服务器可以用这种方式来处理

13:15.930 --> 13:16.930
那么就像这样子

13:16.930 --> 13:18.930
去读取这个GDIP的内容

13:18.930 --> 13:19.930
把内容读出来

13:19.930 --> 13:20.930
然后加一个响应头

13:20.930 --> 13:21.930
传出过去

13:21.930 --> 13:22.930
这个要服务器配合的

13:22.930 --> 13:23.930
就是我们这个WePAC

13:23.930 --> 13:24.930
只能说帮个忙

13:24.930 --> 13:25.930
我先去打包

13:25.930 --> 13:26.930
那服务器呢

13:26.930 --> 13:27.930
有一种选择了

13:27.930 --> 13:28.930
对吧

13:28.930 --> 13:29.930
有一种选择了

13:29.930 --> 13:30.930
但是我不能把

13:30.930 --> 13:31.930
不能不把这个东西给力

13:31.930 --> 13:32.930
那么服务器

13:32.930 --> 13:33.930
如果说万一

13:33.930 --> 13:34.930
根据一些规则

13:34.930 --> 13:35.930
它不想用这个东西

13:35.930 --> 13:36.930
要自己用另外一种算法打包

13:36.930 --> 13:38.930
那么要给服务器这种灵活度

13:38.930 --> 13:40.930
说这两个东西都要给它

13:40.930 --> 13:42.930
那么它起这么一个作用

13:42.930 --> 13:43.930
帮个忙而已

13:43.930 --> 13:45.930
这就是关于GDIP压缩

13:45.930 --> 13:46.930
说一下

