WEBVTT

00:01.010 --> 00:06.010
上课之前 给大家聊一聊 关于咱们前端技术战

00:09.010 --> 00:17.580
前端技术战 这个前端咱们学到现在了 大家可能有一种感觉

00:17.580 --> 00:21.580
是不是东西特别特别多啊 你看我们这一张

00:21.580 --> 00:25.580
这一张还仅仅就是我们勾建工具

00:25.580 --> 00:29.580
勾建工具平时我们都可能自己去搭一个

00:29.580 --> 00:34.580
用勾建工具为PAC搭一个项目 这种情况很少很少

00:34.580 --> 00:40.580
就连为PAC用的很少 而为PAC里面生态 生态特别特别多

00:40.580 --> 00:44.580
我们这一张学的是什么 学的是关于央视的工程化

00:44.580 --> 00:48.580
关于央视在大型项目里面会遇到哪些问题

00:48.580 --> 00:51.580
又该怎么来处理 是学到这么一块东西

00:51.580 --> 00:56.580
它在整个前端的生态里面 应该是解决的一个很小很小的问题

00:56.580 --> 00:59.580
光是这么一个小问题 你看技术有多少

00:59.580 --> 01:03.580
这个小问题里面又划分 又划分成 其中有三个问题

01:03.580 --> 01:08.580
内民冲突重复样式 还没讲 还有CSS文件细分的问题

01:08.580 --> 01:11.580
光是内民冲突 你看我们都学了两种了

01:11.580 --> 01:15.580
命名为约定 CSS INGIS 这几课我们还要学习一种

01:15.580 --> 01:19.580
就是CSS MARGEL 你看 前端就是这样子

01:19.580 --> 01:22.580
它东西特别多 因此它导致了

01:22.580 --> 01:26.580
每一种问题的解决方案 它不只一种

01:26.580 --> 01:30.580
它可能有很多种 而每一种方案它有自己的好

01:30.580 --> 01:34.580
有点有自己的不好的地方 那么就导致了整个前端技术战

01:34.580 --> 01:39.580
特别的庞大 你看 如果说你们接触过Java

01:39.580 --> 01:42.580
Java你要说框架 他就一个Spring

01:42.580 --> 01:44.580
你把Spring那一套搞清楚

01:44.580 --> 01:47.580
Spring全家通搞清楚就差不多了

01:47.580 --> 01:50.580
而后边你们学习前端里面

01:50.580 --> 01:54.580
后边你们学习的时候 还学习VU 还学习React

01:54.580 --> 01:59.580
还要学习两套东西 这两套东西每一套东西都非常非常多

01:59.580 --> 02:02.580
就前端的技术战了 它特别庞大

02:02.580 --> 02:05.580
那么大家有没有想过为什么呢

02:05.580 --> 02:07.580
为什么后端好好的就一套东西

02:07.580 --> 02:09.580
我们就用一套 把这一套学完就完事了

02:09.580 --> 02:12.580
每个问题的解决办法就一套

02:12.580 --> 02:16.580
那么为什么前端多出来这么一套东西呢

02:16.580 --> 02:21.580
是因为前端目前还没有形成最佳实践

02:21.580 --> 02:24.580
可以说目前就没有最佳实践

02:24.580 --> 02:26.580
什么叫最佳实践

02:26.580 --> 02:30.580
就是说张三在用这种方案解决这个问题

02:30.580 --> 02:32.580
同一个问题张三用这种方案解决

02:32.580 --> 02:36.580
你是用的是另外一种方式解决

02:36.580 --> 02:39.580
就是每个人解决同一个问题的方式他就不一样

02:39.580 --> 02:43.580
那么就导致他没有一套统一的方式来解决一个问题

02:44.580 --> 02:47.580
那么如果说有统一的方式来解决一个问题的话

02:47.580 --> 02:50.580
那么这个统一的方式就叫做最佳实践

02:50.580 --> 02:53.580
大家都认可了你这么用我也这么用

02:53.580 --> 02:55.580
配合也挺好的

02:55.580 --> 02:57.580
我们也不用担心到了这个公司用一套方案

02:57.580 --> 02:59.580
到另一个公司用另外一套方案

02:59.580 --> 03:00.580
不用担心这个问题

03:00.580 --> 03:01.580
大家都用了的是同一套方案

03:01.580 --> 03:03.580
这就是最佳实践

03:03.580 --> 03:07.580
但是那前端目前是没有形成最佳实践的

03:07.580 --> 03:09.580
就导致了这个问题了

03:09.580 --> 03:14.580
同一个问题老师会出现解决方案A B C D E F G

03:14.580 --> 03:18.580
每个解决方案他有可能引出一大堆东西

03:18.580 --> 03:20.580
就连这个构建工具

03:20.580 --> 03:22.580
像我这个WePAC他也不是唯一的

03:22.580 --> 03:25.580
我之前在最开始就这门客最开始的时候

03:25.580 --> 03:26.580
给他介绍过对吧

03:26.580 --> 03:27.580
还有一些其别的构建工具

03:27.580 --> 03:29.580
我们后边会聊一聊

03:29.580 --> 03:30.580
就导致这个问题

03:30.580 --> 03:32.580
特别特别技术战特别庞大

03:32.580 --> 03:35.580
感觉前端要学好多好多东西

03:35.580 --> 03:36.580
那么这件事呢

03:36.580 --> 03:38.580
大家怎么看这件事呢

03:38.580 --> 03:40.580
首先呢为什么他没有最佳实践

03:40.580 --> 03:46.580
是因为前端呢发展的时间比较的晚

03:46.580 --> 03:47.580
他不像后端

03:47.580 --> 03:49.580
像家外语言发展了二三十年了对吧

03:49.580 --> 03:52.580
那么前端呢他发展起步比较晚

03:52.580 --> 03:55.580
是从可以说是从努德节史出现过后

03:55.580 --> 03:57.580
才真正开始迅猛发展的

03:57.580 --> 03:59.580
以前基本上是停滞不前

03:59.580 --> 04:02.580
因此呢他有很他的社区比较活跃

04:02.580 --> 04:04.580
他的解决方案呢比较丰富

04:04.580 --> 04:06.580
因此呢目前呢没有说哪一种方案

04:06.580 --> 04:09.580
就是一定是脸压其他方案的没有

04:09.580 --> 04:12.580
所以说前端呢目前他没有形成最佳实践

04:12.580 --> 04:14.580
那么他以后会不会形成最佳实践的

04:14.580 --> 04:16.580
我的看法是会

04:16.580 --> 04:19.580
一种技术发展了发展了一段时间过后呢

04:19.580 --> 04:22.580
他会慢慢会形成最佳实践

04:22.580 --> 04:23.580
形成了最佳实践过后呢

04:23.580 --> 04:25.580
大家就不用学那么多东西了

04:25.580 --> 04:26.580
学一种方案

04:26.580 --> 04:28.580
大家都统一的使用那种方案

04:28.580 --> 04:31.580
那就OK了学一种就可以了

04:31.580 --> 04:33.580
但是问题是我们目前没有形成

04:33.580 --> 04:35.580
那什么时候形成的我不知道

04:35.580 --> 04:38.580
我觉得也没有人知道

04:38.580 --> 04:40.580
前端什么时候会形成最佳实践

04:40.580 --> 04:43.580
很多大厂包括什么阿里包括腾讯

04:43.580 --> 04:45.580
他们都在摸鼠

04:45.580 --> 04:47.580
还包括一些国外的大公司

04:47.580 --> 04:48.580
他们都在摸鼠

04:48.580 --> 04:51.580
能不能搞一套完整的框架

04:51.580 --> 04:53.580
每个问题我都用一个合适的

04:53.580 --> 04:54.580
解决方案解决

04:54.580 --> 04:57.580
那么最终形成一套最佳实践

04:57.580 --> 04:59.580
能不能都在摸鼠

04:59.580 --> 05:00.580
那么我如何

05:00.580 --> 05:02.580
那么我们现在处于这个阶段了

05:02.580 --> 05:04.580
就已经是这个样子了

05:04.580 --> 05:05.580
我们怎么办呢

05:05.580 --> 05:07.580
怎么来认识这个问题呢

05:07.580 --> 05:08.580
一哭天喊地是没用的

05:08.580 --> 05:10.580
我也想哭天喊地没用

05:10.580 --> 05:11.580
那么怎么来认识这个问题呢

05:11.580 --> 05:13.580
就是你的心态上呢

05:13.580 --> 05:15.580
要保持一个平静的心态

05:15.580 --> 05:17.580
因为这是一个技术发展的过程

05:17.580 --> 05:18.580
它一定是这样子

05:18.580 --> 05:21.580
像加瓦以前它其实也有很多方家

05:21.580 --> 05:22.580
那么最后呢

05:22.580 --> 05:23.580
因为种种原因了

05:23.580 --> 05:25.580
才被Spring统一下来

05:25.580 --> 05:27.580
那么大家处于这么一个

05:27.580 --> 05:29.580
历史阶段的时候呢

05:29.580 --> 05:32.580
其实既是坏事也是好事

05:32.580 --> 05:34.580
坏事呢自然就是你学的东西特别多

05:34.580 --> 05:36.580
好事是什么呢

05:36.580 --> 05:37.580
好事是

05:37.580 --> 05:40.580
如果有一天形成了最佳实践过后

05:40.580 --> 05:43.580
你经历了这个过程

05:43.580 --> 05:45.580
经历了这个历史发展的过程

05:45.580 --> 05:46.580
你对技术的理解

05:46.580 --> 05:50.580
会比以后的开发者要深刻的多

05:50.580 --> 05:51.580
因为以后的开发者

05:51.580 --> 05:52.580
他就不会学习

05:52.580 --> 05:54.580
不会学习一些其他方案了

05:54.580 --> 05:55.580
就一种方案解决

05:55.580 --> 05:56.580
一个问题就行了

05:56.580 --> 05:57.580
他不会学习其他方案

05:57.580 --> 05:58.580
因此他的思路呢

05:58.580 --> 05:59.580
和他的眼见呢

05:59.580 --> 06:01.580
是稍微狭窄的

06:01.580 --> 06:03.580
但是你见过了这么多东西

06:03.580 --> 06:06.580
那么你的眼见和你的思维的宽度

06:06.580 --> 06:08.580
要比以后的开发者要好得多

06:08.580 --> 06:10.580
说大家这是坏事

06:10.580 --> 06:12.580
其实呢也是好事

06:12.580 --> 06:15.580
而且呢在目前的这个环境下边

06:15.580 --> 06:16.580
你知道的越多

06:16.580 --> 06:19.580
你就越容易形成竞争优势

06:19.580 --> 06:21.580
在市场上你们要紧

06:21.580 --> 06:22.580
你们也是就业者

06:22.580 --> 06:24.580
以后需要跟其他就业者竞争的

06:24.580 --> 06:25.580
那么你了解的越多呢

06:25.580 --> 06:26.580
越容易形成优势

06:26.580 --> 06:28.580
那就比一个问题

06:28.580 --> 06:30.580
你知道ABCD4种方案

06:30.580 --> 06:33.580
就比只知道A这种方案要好得多

06:33.580 --> 06:36.580
所以说大家要正确的看待这个问题

06:36.580 --> 06:38.580
那么面对这么大庞大的基础战

06:38.580 --> 06:39.580
我们应该保持成

06:39.580 --> 06:41.580
我们如何来学习呢

06:41.580 --> 06:42.580
有些同学说学到就忘了

06:42.580 --> 06:43.580
这就是我反复强调的

06:43.580 --> 06:44.580
忘了就忘了

06:44.580 --> 06:46.580
但是你要知道有哪些方案

06:46.580 --> 06:48.580
ABCD有这么几种方案

06:48.580 --> 06:49.580
可以供你选择

06:49.580 --> 06:51.580
你要知道有哪些方案

06:51.580 --> 06:53.580
那么如何来应用这些方案

06:53.580 --> 06:56.580
又如何把这些方案

06:56.580 --> 06:59.580
合理的安排到具体的开发中

06:59.580 --> 07:02.580
这一张我们学习央视的解决方案

07:02.580 --> 07:03.580
有哪些方案

07:03.580 --> 07:04.580
那么这些方案

07:04.580 --> 07:05.580
我们如何来配合

07:05.580 --> 07:08.580
我们用什么样的方案来解决内民冲突

07:08.580 --> 07:10.580
我们用什么样的方案来解决文件细分

07:10.580 --> 07:13.580
我们用什么样的方案来解决央视的重复

07:13.580 --> 07:15.580
央视的值得重复

07:15.580 --> 07:16.580
我们后面会讲

07:16.580 --> 07:18.580
那么这些方案如何来配合

07:18.580 --> 07:23.580
不是你们现阶段能够处理的

07:23.580 --> 07:25.580
你们的能力是处理不了这个问题的

07:25.580 --> 07:27.580
我后面会稍微的说一说

07:28.580 --> 07:32.580
但是也仅仅是给大家提供一些建议

07:32.580 --> 07:33.580
和参考

07:33.580 --> 07:36.580
以及丰富一下大家的视野

07:36.580 --> 07:38.580
但是大家目前是没有能力

07:38.580 --> 07:40.580
去整合这些技术的

07:40.580 --> 07:41.580
那么谁来整合这些技术

07:41.580 --> 07:44.580
需要工作了几年的开发者

07:44.580 --> 07:46.580
他对这些东西足够的熟悉了

07:46.580 --> 07:49.580
那么他才有这个能力和眼界

07:49.580 --> 07:51.580
去整合这些东西

07:51.580 --> 07:53.580
目前大家是做不到的

07:53.580 --> 07:55.580
因此大家在学习的时候

07:55.580 --> 07:57.580
不要给自己那么大的压力

07:57.580 --> 07:59.580
不要说我学到这些东西

07:59.580 --> 08:00.580
我怎么去用

08:00.580 --> 08:01.580
我怎么来把它配合起来

08:01.580 --> 08:02.580
跟你没有什么关系

08:02.580 --> 08:04.580
实际上你只要知道

08:04.580 --> 08:05.580
有这么一些方案就行了

08:05.580 --> 08:07.580
当你们以后到了公司

08:07.580 --> 08:09.580
公司说我们这里一套

08:09.580 --> 08:10.580
我们这个框架里边

08:10.580 --> 08:12.580
解决CSS我们用的是

08:12.580 --> 08:14.580
比方说BEM

08:14.580 --> 08:16.580
你要只需要知道BEM怎么写

08:16.580 --> 08:18.580
怎么去定义内名就可以了

08:18.580 --> 08:19.580
那忘了怎么办

08:19.580 --> 08:20.580
忘了回来看一下视频

08:20.580 --> 08:23.580
所以大家不用有那么大的压力

08:23.580 --> 08:24.580
我上课之前给大家说一下

08:24.580 --> 08:26.580
因为这一张的内容确实很多

08:26.580 --> 08:28.580
你看光一个央视

08:28.580 --> 08:30.580
搞那么多东西出来

08:30.580 --> 08:32.580
确实也比较烦

08:32.580 --> 08:33.580
但是学习起来

08:33.580 --> 08:34.580
大家只要

08:34.580 --> 08:35.580
其实每一个东西

08:35.580 --> 08:36.580
没有那么复杂

08:36.580 --> 08:37.580
每一个东西没有那么复杂

08:37.580 --> 08:38.580
很简单的

08:38.580 --> 08:39.580
他学的时候只要知道

08:39.580 --> 08:41.580
这个东西存在的

08:41.580 --> 08:42.580
他确实可以解决

08:42.580 --> 08:44.580
他的思路也比较有意思

08:44.580 --> 08:46.580
把他有这么一个印象就行了

08:46.580 --> 08:48.580
将来到了公司里边

08:48.580 --> 08:49.580
我要用到这个东西

08:49.580 --> 08:50.580
OK

08:50.580 --> 08:51.580
那么我再回过来看一下

08:51.580 --> 08:53.580
它具体是怎么用的

08:53.580 --> 08:54.580
没有这个意思吗

08:54.580 --> 08:55.580
OK

08:55.580 --> 08:57.580
上课之前先说一下这个问题

08:57.580 --> 09:01.580
免得同学学到学到学运了

09:01.580 --> 09:02.580
这就看了

09:02.580 --> 09:04.580
还是来解决内名冲突

09:04.580 --> 09:05.580
你看内名冲突

09:05.580 --> 09:06.580
对三个方案发案了

09:06.580 --> 09:07.580
一个是命名约定

09:07.580 --> 09:08.580
我们说过了

09:08.580 --> 09:09.580
一个CSNJS

09:09.580 --> 09:10.580
这个网项以后

09:10.580 --> 09:12.580
你们在手机应用

09:12.580 --> 09:14.580
就与动端开发的时候

09:14.580 --> 09:15.580
可能会用到

09:15.580 --> 09:16.580
还有一个东西

09:16.580 --> 09:18.580
叫CSR module

09:18.580 --> 09:19.580
这种方案

09:19.580 --> 09:20.580
特别有意思

09:20.580 --> 09:22.580
一看他们解决这个问题

09:22.580 --> 09:24.580
他的思路是非常巧妙的

09:24.580 --> 09:26.580
你看这个命名约定的这个思路

09:26.580 --> 09:27.580
就非常的暴力

09:27.580 --> 09:29.580
你明知不是冲突吗

09:29.580 --> 09:30.580
我给你提供一种规范

09:30.580 --> 09:31.580
你就不冲突了

09:31.580 --> 09:32.580
你按照这个规范来写

09:32.580 --> 09:34.580
CSNJS

09:34.580 --> 09:36.580
那完全没有CSNJS代码

09:36.580 --> 09:37.580
全是CSNJS代码

09:37.580 --> 09:39.580
CSNJS代码哪有冲突呢

09:39.580 --> 09:40.580
不存在的

09:40.580 --> 09:41.580
还有一种方案

09:41.580 --> 09:42.580
CSNJS module

09:42.580 --> 09:44.580
你看他们都在想办法

09:44.580 --> 09:46.580
看一下CSNJS module

09:46.580 --> 09:48.580
它怎么回事

09:48.580 --> 09:51.580
首先我们在看CSNJS module之前

09:52.580 --> 09:53.580
我们来看一下

09:53.580 --> 09:54.580
我们目前的工程

09:54.580 --> 09:55.580
这里的边

09:55.580 --> 09:57.580
我们安装了一个wipec

09:57.580 --> 09:59.580
看一下我们安装的东西

09:59.580 --> 10:00.580
有CSN loader

10:00.580 --> 10:01.580
都讲过的

10:01.580 --> 10:03.580
atma wipec plugin

10:03.580 --> 10:05.580
style loader都讲过的

10:05.580 --> 10:06.580
wipec cd

10:06.580 --> 10:07.580
wipec dev server

10:07.580 --> 10:08.580
所以都讲过的

10:08.580 --> 10:09.580
我们看一下先看一下

10:09.580 --> 10:11.580
然后我们的配置文件

10:11.580 --> 10:12.580
配置文件

10:12.580 --> 10:13.580
我这里应用了一个

10:13.580 --> 10:14.580
什么

10:14.580 --> 10:15.580
这个玩意儿

10:15.580 --> 10:17.580
这个玩意儿是生成

10:17.580 --> 10:18.580
atma一面的

10:18.580 --> 10:19.580
你看我们把插件

10:19.580 --> 10:20.580
应用进去了

10:20.580 --> 10:21.580
给它提供了一个模板

10:21.580 --> 10:22.580
模板在哪

10:22.580 --> 10:23.580
public目录下面的

10:23.580 --> 10:24.580
页面

10:24.580 --> 10:25.580
看一下吧

10:25.580 --> 10:26.580
过一下

10:26.580 --> 10:27.580
我就不讲了

10:27.580 --> 10:28.580
然后

10:28.580 --> 10:30.580
这里这两个东西

10:30.580 --> 10:31.580
没啥好说的

10:31.580 --> 10:32.580
watched truth不用了

10:32.580 --> 10:33.580
因为我们使用了

10:33.580 --> 10:34.580
什么

10:34.580 --> 10:35.580
使用了dev server

10:35.580 --> 10:36.580
dev server

10:36.580 --> 10:38.580
我给它配了一个open去

10:38.580 --> 10:39.580
表示的是

10:39.580 --> 10:41.580
自动打开页面

10:41.580 --> 10:43.580
然后我们在这里边

10:43.580 --> 10:44.580
给它配置了一个dev

10:44.580 --> 10:46.580
那么就运行这个命令

10:46.580 --> 10:47.580
build

10:47.580 --> 10:48.580
就运行wipec命令

10:48.580 --> 10:49.580
看一下我们的工程

10:49.580 --> 10:50.580
首先看一下工程

10:50.580 --> 10:52.580
然后src目录下边

10:52.580 --> 10:53.580
看一下

10:53.580 --> 10:54.580
src有一个js

10:54.580 --> 10:56.580
js倒入了两个css

10:56.580 --> 10:58.580
css在哪呢

10:58.580 --> 10:59.580
两个

10:59.580 --> 11:00.580
css1

11:00.580 --> 11:01.580
第一个样式

11:01.580 --> 11:02.580
第二个样式

11:02.580 --> 11:03.580
有相同的那一名

11:03.580 --> 11:04.580
c1c2

11:04.580 --> 11:06.580
这里有c1c2

11:06.580 --> 11:07.580
大家也可以

11:07.580 --> 11:09.580
你们可以拿到元代码的

11:09.580 --> 11:11.580
也可以在元代码里面看一下

11:12.580 --> 11:13.580
然后

11:13.580 --> 11:15.580
这里还配了一个loader

11:15.580 --> 11:17.580
当遇到css模块的时候

11:17.580 --> 11:19.580
它先交给cssloader来处理

11:19.580 --> 11:21.580
再交给styleloader来处理

11:21.580 --> 11:22.580
不说了我讲过了

11:22.580 --> 11:24.580
这就是我们目前的工程

11:25.580 --> 11:26.580
我们目前的工程

11:26.580 --> 11:28.580
那当然我要启动项目怎么启动了

11:28.580 --> 11:29.580
非常简单

11:29.580 --> 11:30.580
启动项目就用什么

11:30.580 --> 11:31.580
npm wrong

11:31.580 --> 11:32.580
dev对吧

11:32.580 --> 11:33.580
相当于是运行的

11:33.580 --> 11:35.580
wipec dev server

11:35.580 --> 11:36.580
运行

11:36.580 --> 11:37.580
它可以打开页面了

11:37.580 --> 11:38.580
非常简单

11:38.580 --> 11:39.580
由于它

11:39.580 --> 11:41.580
由于倒入了两个css模块

11:42.580 --> 11:43.580
由于倒入了两个css模块

11:43.580 --> 11:44.580
因此

11:44.580 --> 11:46.580
我们根据以前学过的知识知道

11:46.580 --> 11:47.580
css跑到哪去了

11:47.580 --> 11:48.580
跑到style

11:48.580 --> 11:49.580
远处里面去了

11:49.580 --> 11:50.580
你看c1c2

11:50.580 --> 11:51.580
对吧

11:51.580 --> 11:52.580
我们的css样式跑这儿来了

11:52.580 --> 11:53.580
c1c2

11:53.580 --> 11:54.580
对吧

11:54.580 --> 11:55.580
跑这儿来了

11:55.580 --> 11:56.580
所以有内鸣的冲突

11:56.580 --> 11:57.580
内鸣冲突了

11:58.580 --> 11:59.580
那么回到

11:59.580 --> 12:00.580
我们这里可能那一种

12:01.580 --> 12:02.580
css module

12:03.580 --> 12:04.580
它在怎么来解决的呢

12:05.580 --> 12:06.580
首先

12:06.580 --> 12:07.580
我们之前学过命名规范

12:07.580 --> 12:08.580
来限制内鸣

12:08.580 --> 12:09.580
那这种方式

12:09.580 --> 12:10.580
它太过于十半

12:10.580 --> 12:11.580
因为每一个内的名字

12:11.580 --> 12:12.580
我倒好好去想

12:12.580 --> 12:14.580
半天规范怎么该怎么写

12:14.580 --> 12:15.580
太过于十半了

12:15.580 --> 12:16.580
那灵活一点呢

12:16.580 --> 12:17.580
灵活一点

12:17.580 --> 12:19.580
我们使用css应s

12:19.580 --> 12:21.580
gss里边用对象的方式来书写样式

12:21.580 --> 12:22.580
这个倒是灵活

12:22.580 --> 12:23.580
像书写起来

12:23.580 --> 12:24.580
耳不耳型

12:24.580 --> 12:25.580
特别耳型

12:25.580 --> 12:26.580
跟我们以前写的样式

12:26.580 --> 12:27.580
是不是完全不一样

12:27.580 --> 12:28.580
特别耳型

12:28.580 --> 12:29.580
书写不变

12:31.580 --> 12:33.580
而css module

12:33.580 --> 12:34.580
它要记

12:34.580 --> 12:36.580
它就开辟到一种全新的思路

12:36.580 --> 12:37.580
它记要保证

12:37.580 --> 12:39.580
你css写起来方便

12:40.580 --> 12:42.580
又要能解决内鸣冲突

12:42.580 --> 12:44.580
它是怎么来做的呢

12:44.580 --> 12:45.580
谁要么看思路

12:46.580 --> 12:47.580
学习这个思路

12:47.580 --> 12:48.580
其实这么重要呢

12:48.580 --> 12:50.580
如果说你仅仅在乎的是

12:50.580 --> 12:52.580
css module这一块东西的话

12:52.580 --> 12:53.580
一点都不重要

12:54.580 --> 12:56.580
那为什么我还要讲思路呢

12:56.580 --> 12:58.580
其实你可以学习一下

12:58.580 --> 13:00.580
别人去怎么解决问题的

13:00.580 --> 13:01.580
因为你们以后开发的时候

13:01.580 --> 13:02.580
也会遇到

13:02.580 --> 13:04.580
这种别人没有解决的问题

13:04.580 --> 13:05.580
现在css module

13:05.580 --> 13:06.580
它解决了这样的问题

13:06.580 --> 13:08.580
有可能以后你们遇到的问题

13:08.580 --> 13:09.580
别人就没有解决

13:09.580 --> 13:10.580
那你要自己解决

13:10.580 --> 13:11.580
自己解决的话

13:11.580 --> 13:12.580
像别人这些思路

13:12.580 --> 13:13.580
都可以给你提供参考

13:13.580 --> 13:14.580
他怎么想了

13:14.580 --> 13:15.580
他这个问题

13:15.580 --> 13:16.580
他想这样想的

13:17.580 --> 13:20.580
你这个css内鸣不是冲突了吗

13:20.580 --> 13:21.580
那么这个冲突

13:21.580 --> 13:23.580
往往发生在大型项目里面

13:23.580 --> 13:25.580
你想是不是这个道理

13:25.580 --> 13:26.580
你小项目里面

13:26.580 --> 13:28.580
你看你们以前做了什么

13:28.580 --> 13:29.580
一些静态页面

13:29.580 --> 13:30.580
有没有内鸣冲突

13:30.580 --> 13:31.580
是不是没有

13:31.580 --> 13:33.580
你项目足够小

13:33.580 --> 13:34.580
项目足够小的时候

13:34.580 --> 13:35.580
哪有什么内鸣冲突

13:35.580 --> 13:36.580
对不对

13:36.580 --> 13:37.580
甚至我都不用去

13:37.580 --> 13:39.580
吸一分css文件

13:39.580 --> 13:40.580
都不用去吸一分

13:40.580 --> 13:41.580
不会有内鸣冲突

13:41.580 --> 13:43.580
自己也稍微注意一点

13:43.580 --> 13:44.580
都不会有内鸣冲突

13:44.580 --> 13:46.580
这往往发生在大项目里面

13:46.580 --> 13:47.580
内非常多

13:47.580 --> 13:50.580
这个时候才会产生内鸣冲突

13:50.580 --> 13:51.580
第一个问题

13:51.580 --> 13:53.580
你看他怎么去想这个问题的

13:53.580 --> 13:54.580
第二个

13:54.580 --> 13:56.580
大型项目

13:56.580 --> 13:57.580
既然是大型项目

13:57.580 --> 13:58.580
那么你肯定不会像

13:58.580 --> 14:00.580
以前那种传统方式

14:00.580 --> 14:01.580
老老实实写页面

14:01.580 --> 14:03.580
写css

14:03.580 --> 14:04.580
往往不会这样做

14:04.580 --> 14:05.580
往往都会使用

14:05.580 --> 14:06.580
各物件工具

14:06.580 --> 14:07.580
比方说像我们现在学习的

14:07.580 --> 14:08.580
WePAC

14:08.580 --> 14:10.580
用这种工具来搭建工程

14:10.580 --> 14:12.580
往往不是一个传统的工程

14:12.580 --> 14:13.580
你看

14:13.580 --> 14:15.580
他是怎么来想这个问题的

14:15.580 --> 14:17.580
那么你既然用了构建工具

14:17.580 --> 14:18.580
那么构建工具

14:18.580 --> 14:20.580
他肯定是允许你把

14:20.580 --> 14:23.580
css样式切分成

14:23.580 --> 14:25.580
更加精细的模块

14:25.580 --> 14:27.580
你看我们这里是不是

14:27.580 --> 14:29.580
有了这个

14:29.580 --> 14:31.580
有了这个就是WePAC之后

14:31.580 --> 14:32.580
我们的css代码

14:32.580 --> 14:33.580
是不是就可以像

14:33.580 --> 14:34.580
js那样子

14:34.580 --> 14:36.580
划分得非常非常细

14:36.580 --> 14:37.580
比方说这个

14:37.580 --> 14:38.580
css的文件

14:38.580 --> 14:40.580
它只搞定什么

14:40.580 --> 14:42.580
只搞定banner

14:42.580 --> 14:44.580
只搞定就是轮波图

14:44.580 --> 14:45.580
其他样式我不管

14:45.580 --> 14:47.580
我就管轮波图

14:47.580 --> 14:48.580
比方说这一块

14:48.580 --> 14:49.580
我就管文章

14:49.580 --> 14:50.580
文章那一部分的样式

14:50.580 --> 14:51.580
对吧

14:51.580 --> 14:53.580
我可以把它切分得非常非常的细

14:53.580 --> 14:54.580
对吧

14:54.580 --> 14:56.580
是不是就会形成这么一种结构

14:56.580 --> 14:58.580
你看都是一条逻辑线管的

14:58.580 --> 14:59.580
首先是

14:59.580 --> 15:01.580
你的内名冲突发生在大项目里边

15:01.580 --> 15:03.580
而大项目肯定是要用构建工具的

15:03.580 --> 15:04.580
那么用构建工具

15:04.580 --> 15:06.580
肯定是要把css样式

15:06.580 --> 15:07.580
切分得非常非常细

15:07.580 --> 15:08.580
于是它就会发现

15:08.580 --> 15:11.580
它有这么一个特点

15:11.580 --> 15:13.580
你js代码

15:13.580 --> 15:15.580
不是也有变量吗

15:15.580 --> 15:18.580
那变量怎么没冲突呢

15:18.580 --> 15:19.580
是因为我把变量的

15:19.580 --> 15:21.580
放到了不同的模块里面

15:21.580 --> 15:22.580
对吧

15:22.580 --> 15:24.580
模块与模块之间

15:24.580 --> 15:26.580
是不会有发生变量冲突的

15:26.580 --> 15:27.580
对不对

15:27.580 --> 15:28.580
这是我们之前看到过的

15:28.580 --> 15:29.580
感受到的

15:29.580 --> 15:32.580
那css不也一样吗

15:32.580 --> 15:34.580
你把css文件

15:34.580 --> 15:36.580
划分得这么精细

15:36.580 --> 15:37.580
那么就跟js

15:37.580 --> 15:38.580
思路是一样的

15:38.580 --> 15:40.580
你js不同的模块里边

15:40.580 --> 15:41.580
哪怕名字一样

15:41.580 --> 15:42.580
也不会发生冲突

15:42.580 --> 15:43.580
对吧

15:43.580 --> 15:44.580
不在不同的模块

15:44.580 --> 15:45.580
那么css能不能

15:45.580 --> 15:46.580
也这样子来做呢

15:46.580 --> 15:48.580
我不同的css模块

15:48.580 --> 15:50.580
那每一个模块里面

15:50.580 --> 15:51.580
用相同的内名

15:51.580 --> 15:52.580
可不可以

15:52.580 --> 15:53.580
可以啊

15:53.580 --> 15:54.580
你看

15:54.580 --> 15:55.580
这个内名c1

15:55.580 --> 15:56.580
跟另一个模块的c1

15:56.580 --> 15:57.580
是不是名字冲突了

15:57.580 --> 15:58.580
相同了

15:58.580 --> 15:59.580
对不对

15:59.580 --> 16:00.580
但是他们是不同的模块

16:00.580 --> 16:01.580
不同的模块

16:01.580 --> 16:02.580
名字冲突可不可以

16:02.580 --> 16:04.580
按道理来说可不可以

16:04.580 --> 16:05.580
不同的模块

16:05.580 --> 16:06.580
可不可以

16:06.580 --> 16:07.580
可以啊

16:07.580 --> 16:08.580
因为它是不同的模块

16:08.580 --> 16:09.580
对吧

16:09.580 --> 16:10.580
我写这个模块的时候

16:10.580 --> 16:12.580
我不用去考虑别的模块的名字

16:12.580 --> 16:14.580
就像你写js一样

16:14.580 --> 16:15.580
你写一个模块的时候

16:15.580 --> 16:16.580
不用去考虑其他模块的名字

16:16.580 --> 16:17.580
对吧

16:17.580 --> 16:18.580
它就这样想的

16:18.580 --> 16:19.580
那么js可以做到

16:19.580 --> 16:21.580
为什么css就做不到呢

16:21.580 --> 16:22.580
对不对

16:22.580 --> 16:24.580
按照这个方式来想

16:24.580 --> 16:26.580
因为那每一个模块里边

16:26.580 --> 16:28.580
是很难出现内名冲突的

16:28.580 --> 16:29.580
比方说你写这一个模块

16:29.580 --> 16:31.580
就这一个css文件

16:31.580 --> 16:32.580
它只管

16:32.580 --> 16:33.580
比方说

16:33.580 --> 16:35.580
这里边你只管

16:35.580 --> 16:36.580
处理

16:36.580 --> 16:37.580
只处理

16:37.580 --> 16:39.580
Banner的样式

16:40.580 --> 16:41.580
那么这里

16:41.580 --> 16:42.580
只处理

16:43.580 --> 16:44.580
article

16:44.580 --> 16:45.580
文章的样式

16:45.580 --> 16:46.580
对吧

16:46.580 --> 16:48.580
每一个模块里边

16:48.580 --> 16:49.580
一个模块里边

16:49.580 --> 16:51.580
是很难出现命名冲突的

16:51.580 --> 16:52.580
就像你一个

16:52.580 --> 16:53.580
js模块里边

16:53.580 --> 16:54.580
你不可能去定

16:54.580 --> 16:55.580
两个相同的变量

16:55.580 --> 16:56.580
对吧

16:56.580 --> 16:57.580
你不可能去定

16:57.580 --> 16:58.580
两个相同的变量

16:58.580 --> 16:59.580
对不对

16:59.580 --> 17:00.580
是不是个道理

17:00.580 --> 17:02.580
因为你一个模块的

17:02.580 --> 17:03.580
代码非常少

17:03.580 --> 17:04.580
它没有那么多

17:04.580 --> 17:05.580
所以说你很难出现

17:05.580 --> 17:06.580
样式冲突

17:06.580 --> 17:07.580
如果说你一个模块里边

17:07.580 --> 17:08.580
都出现样式冲突了

17:08.580 --> 17:09.580
那你肯定是

17:09.580 --> 17:10.580
你写代码有问题

17:11.580 --> 17:12.580
你在写什么代码

17:12.580 --> 17:13.580
你同一个模块这么少的代码

17:13.580 --> 17:14.580
你都出现

17:14.580 --> 17:15.580
样式名字冲突了

17:15.580 --> 17:16.580
那肯定是你自己

17:16.580 --> 17:17.580
自己代码的问题

17:18.580 --> 17:19.580
所以说它这种问题

17:19.580 --> 17:20.580
根本就不解决

17:20.580 --> 17:21.580
它不用去解决

17:21.580 --> 17:22.580
每一个模块里边

17:22.580 --> 17:23.580
它的样式冲突

17:23.580 --> 17:24.580
它要解决的是什么

17:24.580 --> 17:25.580
它要解决的是

17:25.580 --> 17:27.580
不同的模块里边

17:27.580 --> 17:28.580
出现了相同的名字

17:28.580 --> 17:29.580
懂这个意思吧

17:30.580 --> 17:31.580
所以说css Margin

17:31.580 --> 17:32.580
它想了一下

17:32.580 --> 17:34.580
我发现我根本就没有必要

17:34.580 --> 17:35.580
去解决

17:35.580 --> 17:37.580
每一个模块里边的类名冲突

17:37.580 --> 17:39.580
而只需要解决

17:39.580 --> 17:43.580
不同的模块文件中的类名冲突

17:43.580 --> 17:45.580
因为冲突往往发生在

17:45.580 --> 17:47.580
不同的css模块文件中

17:47.580 --> 17:48.580
于是它怎么想

17:48.580 --> 17:50.580
我只要能够保证

17:50.580 --> 17:53.580
勾件工具在合并样式代码后

17:53.580 --> 17:55.580
它不会出现类名冲突就可以了

17:55.580 --> 17:57.580
也就是说看这个图

17:57.580 --> 17:59.580
就是我们在写代码的时候

17:59.580 --> 18:01.580
我们的css是分成

18:01.580 --> 18:03.580
细分成很多的模块的

18:03.580 --> 18:05.580
分成两个模块我这里

18:05.580 --> 18:06.580
细分的模块

18:06.580 --> 18:08.580
那么这些模块之间

18:08.580 --> 18:09.580
它有类名冲突

18:09.580 --> 18:11.580
模块里边没有

18:11.580 --> 18:13.580
模块之间是有类名冲突的

18:13.580 --> 18:14.580
我只要能够保证

18:14.580 --> 18:15.580
通过勾件工具

18:15.580 --> 18:16.580
比方说WAPAC

18:16.580 --> 18:18.580
那么它只要一合并

18:18.580 --> 18:19.580
把这个样式一合并

18:19.580 --> 18:20.580
夹到页面上去

18:20.580 --> 18:21.580
那么只要保证

18:21.580 --> 18:23.580
最终的样式

18:23.580 --> 18:24.580
没有命名冲突就行了

18:24.580 --> 18:25.580
它不用保证

18:25.580 --> 18:27.580
这里边没有命名冲突

18:27.580 --> 18:28.580
你看它解决的问题

18:28.580 --> 18:30.580
这个时度是非常强调的

18:30.580 --> 18:31.580
它觉得

18:31.580 --> 18:33.580
这种类名冲突是很正常的

18:33.580 --> 18:34.580
就跟jss模块一样

18:34.580 --> 18:36.580
jss模块不同的模块之间

18:36.580 --> 18:38.580
不也有名字冲突吗

18:38.580 --> 18:39.580
辩量名的冲突

18:39.580 --> 18:40.580
没关系对吧

18:40.580 --> 18:41.580
完全没关系

18:41.580 --> 18:43.580
因为我只要保证

18:43.580 --> 18:44.580
不同的

18:44.580 --> 18:45.580
就是合并之后

18:45.580 --> 18:47.580
没有类名冲突就行了

18:47.580 --> 18:48.580
对不对

18:48.580 --> 18:49.580
我们知道jss是放到

18:49.580 --> 18:50.580
函数环境里边的

18:50.580 --> 18:52.580
它并不会有名字冲突

18:52.580 --> 18:54.580
那么css怎么办呢

18:54.580 --> 18:56.580
它要想办法了

18:56.580 --> 18:58.580
就是它整体的时度

18:58.580 --> 18:59.580
接下来我们来看

18:59.580 --> 19:01.580
它具体的是怎么解决的

19:01.580 --> 19:04.580
实现原理

19:04.580 --> 19:06.580
我们看实现原理

19:06.580 --> 19:09.580
既然我们的css module

19:09.580 --> 19:11.580
它是解决大项目的

19:11.580 --> 19:13.580
也就是它要用到构建工具

19:13.580 --> 19:14.580
所以说我们这几个课

19:14.580 --> 19:15.580
肯定要跟构建工具

19:15.580 --> 19:16.580
连起来讲

19:16.580 --> 19:17.580
不能单独讲

19:17.580 --> 19:19.580
因为它整体的时度

19:19.580 --> 19:21.580
都是要依托构建工具的

19:21.580 --> 19:23.580
那么在构建工具里边

19:23.580 --> 19:25.580
怎么搞定css module

19:25.580 --> 19:27.580
怎么来应用这个思想呢

19:27.580 --> 19:30.580
css module它其实就提供一个思想

19:30.580 --> 19:31.580
在web pack里边

19:31.580 --> 19:34.580
作为我们的css是谁来处理

19:34.580 --> 19:36.580
css是loader对吧

19:36.580 --> 19:38.580
因为它web pack本身处理不了

19:38.580 --> 19:39.580
它交给它来处理

19:39.580 --> 19:41.580
它会把它装成介石带吧

19:41.580 --> 19:42.580
那么它这个东西

19:42.580 --> 19:45.580
它就实现了css module的思想

19:45.580 --> 19:46.580
但是呢

19:46.580 --> 19:48.580
它默认是没有启用的

19:48.580 --> 19:50.580
也要启用它

19:50.580 --> 19:51.580
怎么启用呢

19:51.580 --> 19:52.580
非常简单

19:52.580 --> 19:54.580
你只需要将css loader

19:54.580 --> 19:56.580
它启用一个配置

19:56.580 --> 19:57.580
叫做modules

19:57.580 --> 19:59.580
把它配置为去就可以了

19:59.580 --> 20:01.580
具体怎么来配置呢

20:01.580 --> 20:02.580
看着

20:02.580 --> 20:03.580
你看我们现在

20:03.580 --> 20:04.580
不是没有配置吗

20:04.580 --> 20:05.580
是不是没有配置

20:05.580 --> 20:07.580
直接使用css loader

20:07.580 --> 20:09.580
然后再交给loader

20:09.580 --> 20:10.580
它没有配置

20:10.580 --> 20:11.580
它怎么来配置呢

20:11.580 --> 20:12.580
你只要给它加上一个选项

20:12.580 --> 20:13.580
我们知道

20:13.580 --> 20:14.580
如果说你要配置的话

20:14.580 --> 20:16.580
你是不是有两种写法

20:16.580 --> 20:17.580
第一种写法怎么写

20:17.580 --> 20:18.580
是不是写个问号

20:18.580 --> 20:19.580
就像c

20:19.580 --> 20:21.580
就像一个url query一样

20:21.580 --> 20:22.580
写个问号modules

20:22.580 --> 20:23.580
对吧

20:23.580 --> 20:24.580
gassaw一个字

20:24.580 --> 20:25.580
这为q

20:25.580 --> 20:26.580
当然呢

20:26.580 --> 20:27.580
也可以

20:27.580 --> 20:28.580
像这种q和force

20:28.580 --> 20:29.580
往往它可以

20:29.580 --> 20:30.580
不用写

20:30.580 --> 20:31.580
直接写modules

20:31.580 --> 20:32.580
表示启用它

20:32.580 --> 20:33.580
这样子写

20:33.580 --> 20:34.580
没问题

20:34.580 --> 20:35.580
也可以怎么写呢

20:35.580 --> 20:37.580
也可以把它写成个对象

20:37.580 --> 20:38.580
然后loader

20:38.580 --> 20:39.580
这是什么

20:39.580 --> 20:40.580
css

20:40.580 --> 20:41.580
这是以前讲过的

20:41.580 --> 20:42.580
这些东西你得知道

20:42.580 --> 20:43.580
就算忘了过后

20:43.580 --> 20:44.580
我现在说了

20:44.580 --> 20:45.580
你要能够想起

20:45.580 --> 20:46.580
然后这里写

20:46.580 --> 20:47.580
写什么

20:47.580 --> 20:48.580
options

20:48.580 --> 20:50.580
options里面

20:51.580 --> 20:52.580
配置上

20:52.580 --> 20:53.580
都行

20:53.580 --> 20:54.580
两种方案都行

20:55.580 --> 20:57.580
你只要先要把这个开启

20:57.580 --> 20:58.580
开启了过后

20:58.580 --> 20:59.580
你会发现

20:59.580 --> 21:01.580
就有意思就来了

21:01.580 --> 21:03.580
当我们给他一个

21:03.580 --> 21:04.580
css模块

21:04.580 --> 21:05.580
就是我们的css模块

21:05.580 --> 21:06.580
里面代码是这样子的

21:06.580 --> 21:07.580
对吧

21:07.580 --> 21:09.580
经过cssloader一转换

21:09.580 --> 21:11.580
他会把它转换成这种格式

21:12.580 --> 21:14.580
他会把它转换成这种格式

21:15.580 --> 21:16.580
那么这种格式

21:16.580 --> 21:17.580
这个东西到底是啥呢

21:17.580 --> 21:19.580
我们首先看一下

21:19.580 --> 21:21.580
他是不是把它转换成这种格式了

21:22.580 --> 21:23.580
这里改了配置文件了

21:23.580 --> 21:24.580
对吧

21:24.580 --> 21:25.580
停止一下

21:25.580 --> 21:29.100
启动

21:29.100 --> 21:30.100
打开

21:30.100 --> 21:31.100
打开网页

21:31.100 --> 21:32.100
点击检查

21:33.100 --> 21:34.100
看一下head里面

21:34.100 --> 21:35.100
style

21:35.100 --> 21:36.100
你看一下

21:36.100 --> 21:39.100
样式是不是不再是CEC2了

21:39.100 --> 21:40.100
它编出来一串

21:40.100 --> 21:41.100
乱七八糟的制服串

21:41.100 --> 21:42.100
对吧

21:42.100 --> 21:43.100
那么这样子的

21:43.100 --> 21:45.100
虽然是我们的元代码里边

21:45.100 --> 21:46.100
是不是CEC2

21:46.100 --> 21:47.100
是不是有名字冲突

21:47.100 --> 21:48.100
对吧

21:48.100 --> 21:49.100
但它最终生成的样式里面

21:49.100 --> 21:50.100
也没有名字冲突

21:50.100 --> 21:51.100
没有

21:52.100 --> 21:53.100
它用这种方式来处理

21:54.100 --> 21:55.100
那么

21:55.100 --> 21:56.100
是不是很简单就处理完了

21:56.100 --> 21:57.100
对吧

21:57.100 --> 21:59.100
那么这个东西到底是啥呢

21:59.100 --> 22:00.100
它的原理其实特别简单

22:00.100 --> 22:01.100
这个东西到底是啥

22:01.100 --> 22:02.100
我们看一下

22:04.100 --> 22:05.100
它原理很简单

22:05.100 --> 22:06.100
当你开启了

22:06.100 --> 22:08.100
这个CSM module之后

22:08.100 --> 22:10.100
它就不是把你的CEC代码

22:10.100 --> 22:11.100
原分不动了

22:11.100 --> 22:12.100
拿出来了

22:12.100 --> 22:13.100
它会怎么样了

22:13.100 --> 22:14.100
它会把内名

22:14.100 --> 22:15.100
它会改变你的内名

22:16.100 --> 22:17.100
它会将样式中的内名

22:17.100 --> 22:18.100
进行转换

22:18.100 --> 22:20.100
转换成一个唯一的哈细值

22:21.100 --> 22:22.100
就是一个哈细值

22:22.100 --> 22:23.100
哈细值我们以前都接触过

22:23.100 --> 22:24.100
对吧

22:24.100 --> 22:25.100
那么这个哈细值怎么来的呢

22:25.100 --> 22:27.100
它是根据模块路径

22:27.100 --> 22:29.100
和内名两个东西

22:29.100 --> 22:30.100
联合生成的

22:31.100 --> 22:32.100
啥意思

22:32.100 --> 22:33.100
啥意思

22:33.100 --> 22:34.100
就是说你看

22:34.100 --> 22:35.100
这里有个C1

22:35.100 --> 22:36.100
这里有个C1

22:38.100 --> 22:39.100
那么它会根据什么呢

22:39.100 --> 22:43.100
根据我们的模块路径在哪呢

22:43.100 --> 22:45.100
src下面的sets

22:45.100 --> 22:48.100
style1.css

22:48.100 --> 22:50.100
然后根据这个路径

22:50.100 --> 22:51.100
还有什么内名

22:51.100 --> 22:53.100
内名是C1对吧

22:53.100 --> 22:54.100
来生成

22:54.100 --> 22:56.100
生成一个哈细值

22:56.100 --> 22:57.100
生成什么哈细值呢

22:57.100 --> 22:58.100
就生成这个

22:58.100 --> 23:00.100
这一长串

23:00.100 --> 23:02.100
生成一个哈细值

23:02.100 --> 23:04.100
1对吧

23:04.100 --> 23:05.100
那么c2呢

23:05.100 --> 23:07.100
是不是也一样的

23:07.100 --> 23:08.100
模块路径加上c2

23:08.100 --> 23:10.100
生成哈细值

23:10.100 --> 23:11.100
哈细值2

23:11.100 --> 23:13.100
然后呢另一个模块

23:13.100 --> 23:14.100
另一个模块

23:14.100 --> 23:16.100
style2对吧

23:16.100 --> 23:17.100
style2

23:18.100 --> 23:19.100
路径是不是不一样

23:19.100 --> 23:20.100
内名一样

23:20.100 --> 23:21.100
但是路径不一样

23:21.100 --> 23:22.100
路径不一样

23:22.100 --> 23:24.100
因此它又生成不同的哈细值

23:24.100 --> 23:25.100
因为我们知道哈细值呢

23:25.100 --> 23:27.100
只要你输了东西是一样的

23:27.100 --> 23:29.100
生成的哈细值就是一样的

23:29.100 --> 23:30.100
输了东西不一样

23:30.100 --> 23:31.100
那么生成的哈细值就不一样

23:31.100 --> 23:32.100
你看

23:32.100 --> 23:33.100
是不是生成了

23:33.100 --> 23:34.100
四个不一样的哈细值

23:34.100 --> 23:36.100
因为他们都有差异

23:36.100 --> 23:38.100
因此呢

23:38.100 --> 23:40.100
它就可以做到这一点

23:40.100 --> 23:42.100
由于它是根据模块路径

23:42.100 --> 23:43.100
和内名相同

23:43.100 --> 23:45.100
内名一起来生成的

23:45.100 --> 23:47.100
不同的css模块

23:47.100 --> 23:49.100
哪怕它具有相同的内名

23:49.100 --> 23:50.100
但是它路径不一样

23:50.100 --> 23:51.100
对吧

23:51.100 --> 23:52.100
模块路径肯定不一样

23:52.100 --> 23:53.100
那么转换后的哈细值

23:53.100 --> 23:54.100
也不一样

23:54.100 --> 23:55.100
你看下面

23:55.100 --> 23:57.100
模块1c12

23:57.100 --> 23:59.100
模块2c12

23:59.100 --> 24:00.100
转换出来的哈细值

24:00.100 --> 24:01.100
是不是不一样的

24:01.100 --> 24:02.100
因为模块路径不一样

24:02.100 --> 24:03.100
对不对

24:03.100 --> 24:04.100
做这个道理

24:04.100 --> 24:05.100
于是呢

24:05.100 --> 24:06.100
你可以看到这样的效果

24:06.100 --> 24:08.100
是不是不一样的

24:08.100 --> 24:09.100
就这么简单

24:09.100 --> 24:11.100
特别特别简单

24:11.100 --> 24:14.100
这就是开启了css module之后

24:14.100 --> 24:16.100
它的转换方式

24:16.100 --> 24:17.100
没有什么复杂的

24:17.100 --> 24:19.100
你不就是想保

24:19.100 --> 24:21.100
你不用管这个

24:21.100 --> 24:23.100
代码里面有没有内名冲突

24:23.100 --> 24:24.100
你只要管最终的样式里面

24:24.100 --> 24:25.100
有没有内名冲突就行了

24:25.100 --> 24:26.100
对吧

24:26.100 --> 24:28.100
所以他搞定了这件事

24:28.100 --> 24:29.100
好那么

24:29.100 --> 24:30.100
现在问题

24:30.100 --> 24:32.100
另外一个问题来了

24:32.100 --> 24:34.100
我怎么用了

24:34.100 --> 24:36.100
我打用

24:36.100 --> 24:37.100
问题是我打用了

24:37.100 --> 24:38.100
问题是

24:38.100 --> 24:39.100
比方说吧

24:39.100 --> 24:40.100
我拿我几个例子吧

24:40.100 --> 24:41.100
我在页面上有一个div

24:41.100 --> 24:43.100
我要应用这个样式

24:43.100 --> 24:45.100
div

24:45.100 --> 24:48.100
我给这个div1加上这个样式

24:48.100 --> 24:50.100
我在介石里边加

24:50.100 --> 24:52.100
来吧

24:52.100 --> 24:55.100
div1

24:55.100 --> 24:57.100
div1 document

24:57.100 --> 24:59.100
div1

24:59.100 --> 25:01.100
好我要给他加上这个类样式

25:01.100 --> 25:02.100
div1 class net

25:02.100 --> 25:03.100
对吧

25:03.100 --> 25:04.100
加上类样式

25:04.100 --> 25:05.100
问题是我打写的

25:05.100 --> 25:06.100
问题是

25:06.100 --> 25:07.100
我这里能写c1吗

25:07.100 --> 25:09.100
请问我能写c1吗

25:09.100 --> 25:11.100
是不是写不了c1

25:11.100 --> 25:12.100
这个样式能用进去吗

25:12.100 --> 25:14.100
比方说我div里面有些文字吗

25:14.100 --> 25:16.100
nory

25:16.100 --> 25:17.100
你看

25:19.100 --> 25:21.100
这个文字能变成

25:21.100 --> 25:22.100
变颜色吗

25:22.100 --> 25:23.100
是变不了

25:23.100 --> 25:24.100
因为它最终的样式里面

25:24.100 --> 25:25.100
有没有c1这个样式

25:25.100 --> 25:26.100
根本就没有

25:26.100 --> 25:27.100
对吧

25:27.100 --> 25:28.100
它生成出来的样式已经变了

25:28.100 --> 25:30.100
它的内的名字已经变了

25:30.100 --> 25:32.100
它用不了这个c1的名字了

25:32.100 --> 25:33.100
没什么意思吗

25:33.100 --> 25:34.100
那么我怎么用了

25:34.100 --> 25:35.100
问题

25:35.100 --> 25:36.100
因为我这里根本就不知道

25:36.100 --> 25:37.100
它生成出来是啥玩意

25:37.100 --> 25:38.100
我根本就不知道

25:38.100 --> 25:40.100
我只知道我这里写的是c1

25:40.100 --> 25:42.100
我不知道它生成出来是什么玩意

25:42.100 --> 25:43.100
对吧

25:43.100 --> 25:44.100
因此我这里

25:44.100 --> 25:45.100
我就用不了了

25:45.100 --> 25:47.100
就带了一个新的问题

25:47.100 --> 25:49.100
就是元代码的内名

25:49.100 --> 25:51.100
什么叫元代码的内名

25:51.100 --> 25:52.100
就看上面的图

25:52.100 --> 25:53.100
这是我们元代码的内名

25:53.100 --> 25:54.100
对吧

25:54.100 --> 25:55.100
c1c2

25:55.100 --> 25:56.100
和最终生成出来的内名

25:56.100 --> 25:57.100
你看

25:57.100 --> 25:58.100
这个生成出来的内名

25:58.100 --> 25:59.100
是不一样的

25:59.100 --> 26:01.100
而我们作为开发者

26:01.100 --> 26:02.100
我只知道

26:02.100 --> 26:04.100
左边的元代码的内名

26:04.100 --> 26:05.100
我知不知道

26:05.100 --> 26:06.100
后边的

26:06.100 --> 26:07.100
我只知道它生成啥

26:07.100 --> 26:08.100
不知道

26:08.100 --> 26:09.100
所以说怎么应用到

26:09.100 --> 26:11.100
元素上去的问题是

26:11.100 --> 26:13.100
那么为了解决这个问题

26:13.100 --> 26:14.100
CSS loader

26:14.100 --> 26:16.100
它又做出一个处理

26:16.100 --> 26:17.100
它会在

26:17.100 --> 26:19.100
它不仅要转换内名

26:19.100 --> 26:21.100
它还要做一件事

26:21.100 --> 26:22.100
它导出的时候

26:22.100 --> 26:24.100
还要导出一个对象

26:24.100 --> 26:26.100
这个对象

26:26.100 --> 26:28.100
它要形成一个对应关系

26:28.100 --> 26:29.100
就是原来的内名

26:29.100 --> 26:30.100
和新的内名

26:30.100 --> 26:31.100
这种对应关系

26:31.100 --> 26:32.100
你看

26:32.100 --> 26:34.100
C1它对应一个新的内名

26:34.100 --> 26:36.100
C2对应一个新的内名

26:36.100 --> 26:38.100
为了让大家更加直观的

26:38.100 --> 26:40.100
能够看到这个效果的话

26:40.100 --> 26:42.100
我这里先这样做

26:42.100 --> 26:44.100
我把这个style loader先去掉

26:44.100 --> 26:45.100
先去掉

26:45.100 --> 26:47.100
不要这个style loader

26:47.100 --> 26:49.100
我只用这个CSS loader

26:49.100 --> 26:51.100
把这个CSS module

26:51.100 --> 26:52.100
开起来

26:52.100 --> 26:53.100
开起来

26:53.100 --> 26:54.100
开起来过后

26:54.100 --> 26:55.100
我们来看一下

26:55.100 --> 26:57.100
这边我们可以接收的

26:57.100 --> 26:58.100
我们之前是不是没有接收

26:58.100 --> 26:59.100
没有接收过这个玩意儿

26:59.100 --> 27:00.100
来接收

27:00.100 --> 27:01.100
看一下CSS loader

27:01.100 --> 27:02.100
转换过后

27:02.100 --> 27:04.100
它导出什么东西

27:04.100 --> 27:06.100
这里我们用个style1

27:06.100 --> 27:08.100
style1

27:08.100 --> 27:11.610
style2

27:11.610 --> 27:13.610
我们之前看到过

27:15.610 --> 27:17.610
之前我们输出

27:17.610 --> 27:19.610
style1

27:19.610 --> 27:21.610
转换后

27:21.610 --> 27:22.610
转换后是什么呢

27:22.610 --> 27:24.610
转换后是style1

27:24.610 --> 27:25.610
toothstream

27:25.610 --> 27:26.610
我们之前写过了

27:26.610 --> 27:27.610
调用toothstream

27:27.610 --> 27:28.610
我们就可以得到

27:28.610 --> 27:29.610
CSS loader

27:29.610 --> 27:30.610
转换过后的代码

27:30.610 --> 27:32.610
CSS style1

27:32.610 --> 27:33.610
然后

27:33.610 --> 27:35.610
它的完整的对象

27:35.610 --> 27:36.610
我们把这个打印出来

27:36.610 --> 27:38.610
完整的对象打印出来

27:40.610 --> 27:43.610
那么style2也是一样

27:44.610 --> 27:45.610
style2

27:45.610 --> 27:46.610
转换后

27:46.610 --> 27:47.610
style2

27:48.610 --> 27:49.610
我们这里重新启动

27:49.610 --> 27:54.780
大家看一下一下就明白了

27:56.780 --> 27:58.780
打开有量器

27:58.780 --> 27:59.780
U键检查

27:59.780 --> 28:00.780
控制台

28:00.780 --> 28:02.780
你看它输出什么

28:02.780 --> 28:03.780
style1转换后

28:03.780 --> 28:04.780
你看是不是我们刚才说的

28:04.780 --> 28:05.780
CSS代码变成这个样

28:05.780 --> 28:07.780
这个样子了

28:07.780 --> 28:08.780
那么style1

28:08.780 --> 28:10.780
它导入的是到底什么东西

28:10.780 --> 28:11.780
你看

28:11.780 --> 28:12.780
它首先是个输主

28:12.780 --> 28:13.780
一个输主里面

28:13.780 --> 28:14.780
这一项

28:14.780 --> 28:15.780
这一项是不是我们的

28:15.780 --> 28:16.780
就是CSS

28:16.780 --> 28:17.780
转换后的CSS代码

28:17.780 --> 28:18.780
那么我们看这个地方

28:18.780 --> 28:20.780
它里面有个属性叫locals

28:20.780 --> 28:21.780
你看那个locals

28:21.780 --> 28:22.780
是不是就对应的是

28:22.780 --> 28:23.780
对应关系

28:24.780 --> 28:26.780
Cint对应的内名是这个

28:26.780 --> 28:28.780
C2对应的内名是这个

28:28.780 --> 28:30.780
然后我们看一下style2

28:30.780 --> 28:31.780
style2转换后

28:31.780 --> 28:33.780
你看是不是我们的CSS代码

28:33.780 --> 28:34.780
把内名变了的CSS代码

28:35.780 --> 28:37.780
style2对象

28:37.780 --> 28:39.780
对象里面一个属性叫locals

28:39.780 --> 28:40.780
locals表示我们

28:40.780 --> 28:42.780
它里面就有对应关系

28:42.780 --> 28:43.780
C1内名变成了这个

28:43.780 --> 28:45.780
C2的内名变成了这个

28:45.780 --> 28:46.780
看到没

28:46.780 --> 28:47.780
变成这个样子了

28:47.780 --> 28:48.780
对吧

28:48.780 --> 28:49.780
它就用这种方式来处理

28:49.780 --> 28:51.780
它导出了信息很多

28:51.780 --> 28:52.780
它除了要导出这个

28:52.780 --> 28:53.780
转换后的内容

28:53.780 --> 28:55.780
还要导出对应关系

28:55.780 --> 28:57.780
因此以为它导出了对应关系

28:57.780 --> 28:58.780
我们在这里边是不是可以导入

28:58.780 --> 28:59.780
导入了过后

28:59.780 --> 29:00.780
我们是不是可以应用样式

29:00.780 --> 29:01.780
应用内名

29:01.780 --> 29:03.780
因为还有对应关系

29:03.780 --> 29:04.780
这样一来

29:04.780 --> 29:05.780
CSS代码中

29:05.780 --> 29:07.780
获得CSS模块导出的结果

29:07.780 --> 29:08.780
从而应用内名

29:08.780 --> 29:10.780
但是用起来不太方便

29:10.780 --> 29:11.780
因为它在哪呢

29:11.780 --> 29:12.780
它的内名在哪呢

29:12.780 --> 29:13.780
它的内名是不是

29:13.780 --> 29:15.780
跑到这个locals里边去了

29:15.780 --> 29:16.780
而且这个

29:16.780 --> 29:17.780
我们转换后的代码

29:17.780 --> 29:19.780
是不是没有加到页面上去

29:19.780 --> 29:20.780
没有加到页面上去

29:20.780 --> 29:22.780
因此为了方便

29:22.780 --> 29:24.780
style loader

29:24.780 --> 29:26.780
它又做了一个处理

29:26.780 --> 29:29.780
它不仅会把我们的样式

29:29.780 --> 29:30.780
自动的放到页面的

29:30.780 --> 29:31.780
style元素里面去

29:31.780 --> 29:32.780
你看我们目前

29:32.780 --> 29:33.780
仅用了CSS loader

29:33.780 --> 29:35.780
所以说我们页面上有没有这个样式

29:35.780 --> 29:36.780
根本没有样式

29:36.780 --> 29:38.780
CSS loader它仅处理这个代码

29:38.780 --> 29:41.780
它并没有把这个样式放到哪去

29:41.780 --> 29:44.780
所以说我们往往还会配合使用

29:44.780 --> 29:47.780
这个style loader

29:47.780 --> 29:48.780
style loader的作用

29:48.780 --> 29:49.780
我们之前讲过

29:49.780 --> 29:50.780
它是把这个样式

29:50.780 --> 29:52.780
就是CSS loader生成的样式

29:52.780 --> 29:55.780
放到页面的header元素里面去

29:55.780 --> 29:56.780
我们再来看

29:56.780 --> 30:00.820
这里

30:00.820 --> 30:05.700
我们把这个去掉

30:05.700 --> 30:06.700
再来看

30:06.700 --> 30:11.830
style loader

30:11.830 --> 30:13.830
它不仅会把我们的样式

30:13.830 --> 30:14.830
放到哪呢

30:14.830 --> 30:16.830
放到我们的header元素里面去

30:16.830 --> 30:17.830
你看

30:17.830 --> 30:18.830
生成了两个style元素

30:18.830 --> 30:19.830
放到里面去

30:19.830 --> 30:21.830
而且它还有个功能

30:21.830 --> 30:23.830
它觉得你这个CSS loader

30:23.830 --> 30:24.830
导出的东西太多了

30:24.830 --> 30:27.830
我们开发者哪需要用到那么多东西

30:27.830 --> 30:29.830
于是它过滤到了一些信息

30:29.830 --> 30:31.830
它只给你导出一个对象

30:31.830 --> 30:32.830
你看这个对象

30:32.830 --> 30:33.830
你看就明白了

30:33.830 --> 30:34.830
看到没

30:34.830 --> 30:35.830
style loader

30:35.830 --> 30:37.830
是不是只给你把CSS loader里面

30:37.830 --> 30:39.830
包住对象给导出来

30:39.830 --> 30:41.830
也就是说我们当我们用了

30:41.830 --> 30:42.830
当我们用了CSS loader

30:42.830 --> 30:44.830
用用了style loader之后

30:44.830 --> 30:45.830
给CSS loader开启了modules

30:45.830 --> 30:46.830
为去的时候

30:46.830 --> 30:47.830
style loader

30:47.830 --> 30:50.830
它就把CSS loader里面的locals

30:50.830 --> 30:52.830
把那个属性的内容导出

30:52.830 --> 30:53.830
它就没有导出别的东西了

30:53.830 --> 30:55.830
因此我们在界style里面

30:55.830 --> 30:56.830
是不是就可以轻松的

30:56.830 --> 30:57.830
获得这个对象了

30:57.830 --> 30:58.830
对不对

30:58.830 --> 31:00.830
于送轮代码怎么写

31:00.830 --> 31:01.830
你看我们代码怎么写

31:01.830 --> 31:03.830
就可以这样子来写

31:03.830 --> 31:07.140
我们不是要给div1

31:07.140 --> 31:08.140
设置内样式吗

31:08.140 --> 31:09.140
设置内名

31:09.140 --> 31:10.140
内名为啥

31:10.140 --> 31:11.140
内名呢

31:11.140 --> 31:12.140
那就看你

31:12.140 --> 31:13.140
到底

31:13.140 --> 31:15.140
因为这里里面有两个C1

31:15.140 --> 31:16.140
比方说我们要应用C1

31:16.140 --> 31:18.140
你要应用哪个样式里面的C1

31:18.140 --> 31:20.140
你要应用第1个样式里面的C1

31:20.140 --> 31:21.140
ok

31:21.140 --> 31:24.140
那我就是style1.C1

31:24.140 --> 31:26.140
对吧

31:26.140 --> 31:27.140
是不是这样子写

31:27.140 --> 31:28.140
这是不是个字不错

31:28.140 --> 31:29.140
这个字不错

31:29.140 --> 31:30.140
是不是对应最终的样式

31:30.140 --> 31:31.140
内的名字

31:31.140 --> 31:33.140
就这样子来写

31:33.140 --> 31:35.140
你可以认为

31:35.140 --> 31:36.140
这个CSS代码

31:36.140 --> 31:37.140
它出来过后就变成了啥

31:37.140 --> 31:38.140
就变成了个对象了

31:38.140 --> 31:39.140
C1对应一个字不错

31:39.140 --> 31:40.140
C2对应一个字不错

31:40.140 --> 31:41.140
对吧

31:41.140 --> 31:42.140
我们这里要应用的样式

31:42.140 --> 31:45.140
是第1个style1里面的C1

31:45.140 --> 31:46.140
你看一下吧

31:46.140 --> 31:47.140
样式是不是应用进去了

31:47.140 --> 31:49.140
你看我们的div

31:49.140 --> 31:50.140
你看class

31:50.140 --> 31:51.140
生成出来是这个东西

31:51.140 --> 31:52.140
对吧

31:52.140 --> 31:53.140
这是不是C1对应的字不错

31:53.140 --> 31:55.140
内样式的字不错

31:55.140 --> 31:56.140
对不对

31:56.140 --> 31:58.140
如果说你要用style2的C1

31:58.140 --> 31:59.140
改一下

31:59.140 --> 32:00.140
保存

32:00.140 --> 32:01.140
你看

32:01.140 --> 32:02.140
应用进去了

32:02.140 --> 32:03.140
这样子我们开发的时候

32:03.140 --> 32:04.140
是不是就不用关心

32:04.140 --> 32:06.140
它最终生成出来是啥样式

32:06.140 --> 32:07.140
我们只需要知道

32:07.140 --> 32:09.140
我们写的是啥样式

32:09.140 --> 32:10.140
那么这样子有没有可能有冲突

32:10.140 --> 32:11.140
不可能用冲突

32:11.140 --> 32:12.140
要告诉你

32:12.140 --> 32:13.140
绝对不可能用冲突的

32:13.140 --> 32:15.140
因为你这个C1从哪来的

32:15.140 --> 32:17.140
是从style2里面来的

32:17.140 --> 32:18.140
对吧

32:18.140 --> 32:19.140
你要用style1

32:19.140 --> 32:20.140
那就是style1.C1

32:20.140 --> 32:21.140
对吧

32:21.140 --> 32:22.140
它不可能有冲突的

32:22.140 --> 32:23.140
这就是

32:23.140 --> 32:24.140
CSS module

32:24.140 --> 32:25.140
它处理样式的方式

32:25.140 --> 32:28.140
处理那样式冲突的方式

32:28.140 --> 32:29.140
当然

32:29.140 --> 32:30.140
潜力条件

32:30.140 --> 32:31.140
你得用js代码

32:31.140 --> 32:32.140
给它复制那样式

32:32.140 --> 32:33.140
你不能在这里面

32:33.140 --> 32:34.140
直接写那样式

32:34.140 --> 32:35.140
你也不知道那样式是啥

32:35.140 --> 32:37.140
你得用js代码来输写那样式

32:37.140 --> 32:39.140
其实你们后边有很多框架

32:39.140 --> 32:40.140
比方说像vue

32:40.140 --> 32:41.140
像react

32:41.140 --> 32:43.140
他们全部用js

32:43.140 --> 32:44.140
来构建样式的

32:44.140 --> 32:45.140
就是用js代码

32:45.140 --> 32:47.140
来设置那样式的名字

32:47.140 --> 32:48.140
不可能是静态的

32:48.140 --> 32:49.140
不可能是直接写的

32:49.140 --> 32:50.140
OK

32:50.140 --> 32:52.140
这是关于

32:52.140 --> 32:53.140
这个CSS module

32:53.140 --> 32:54.140
它的处理方式

32:54.140 --> 32:56.140
就这么简单

32:56.140 --> 32:57.140
就这样处理

32:57.140 --> 32:58.140
所以以后你们

32:58.140 --> 33:00.140
处理这个CSS的时候

33:00.140 --> 33:01.140
往往就是这样子写的

33:01.140 --> 33:02.140
CSS module

33:02.140 --> 33:04.140
开启一个 module是微修

33:04.140 --> 33:06.140
然后

33:06.140 --> 33:07.140
交给style loader

33:07.140 --> 33:08.140
style loader

33:08.140 --> 33:09.140
那就完了

33:09.140 --> 33:10.140
那你之后

33:10.140 --> 33:11.140
导入CSS的时候

33:11.140 --> 33:12.140
就是你这里面的样式

33:12.140 --> 33:13.140
随便你写

33:13.140 --> 33:14.140
随便你写

33:14.140 --> 33:15.140
不可能有冲突的

33:15.140 --> 33:16.140
你随便写

33:16.140 --> 33:17.140
就算你原代码里面有冲突

33:17.140 --> 33:19.140
就不同的模块之间有冲突

33:19.140 --> 33:20.140
那么你用的时候

33:20.140 --> 33:22.140
想用哪一个模块的什么样式

33:22.140 --> 33:23.140
你导入进来

33:23.140 --> 33:24.140
把当成一个对象导入进来

33:24.140 --> 33:25.140
那么这里面对你的那样式

33:25.140 --> 33:27.140
应用进去就完事了

33:27.140 --> 33:28.140
看一下这个代码

33:28.140 --> 33:30.140
好好体会一下

33:30.140 --> 33:32.140
那么接下来的

33:32.140 --> 33:34.140
说了如何来应用样式

33:34.140 --> 33:35.140
那么最后我们来看一下

33:35.140 --> 33:36.140
其他操作

33:36.140 --> 33:37.140
有没有别的操作

33:37.140 --> 33:38.140
其实CSS module就讲完了

33:38.140 --> 33:41.140
我来看一下一些

33:41.140 --> 33:43.140
比较特别的操作

33:43.140 --> 33:44.140
第一个操作是

33:44.140 --> 33:45.140
关于全局内明

33:45.140 --> 33:46.140
什么意思呢

33:46.140 --> 33:48.140
就是说有的时候

33:48.140 --> 33:50.140
你这个CSS内样式

33:50.140 --> 33:51.140
要转换

33:51.140 --> 33:52.140
对吧

33:52.140 --> 33:53.140
要转换

33:53.140 --> 33:54.140
我觉得不是很舒服

33:54.140 --> 33:56.140
那能不能不转换了

33:56.140 --> 33:57.140
能不能不转换了

33:57.140 --> 33:58.140
就是说

33:58.140 --> 33:59.140
你不要给我把东西

33:59.140 --> 34:00.140
转换成这样子

34:00.140 --> 34:01.140
因为有些样式

34:01.140 --> 34:03.140
可能毕竟是全局的

34:03.140 --> 34:05.140
不需要的进行就要转换

34:05.140 --> 34:06.140
那么这个时候

34:06.140 --> 34:07.140
你只需要使用一个

34:07.140 --> 34:08.140
特殊的语法就行了

34:08.140 --> 34:09.140
这个语法

34:09.140 --> 34:11.140
不是CSS语法

34:11.140 --> 34:13.140
是CSS module的语法

34:13.140 --> 34:15.140
那么当CSS node

34:15.140 --> 34:16.140
看到这种语法的时候

34:16.140 --> 34:17.140
它就不进行转换

34:17.140 --> 34:19.140
比方说我举个例子

34:19.140 --> 34:20.140
就这个玩意吧

34:20.140 --> 34:21.140
你看

34:21.140 --> 34:24.970
你只要这样子写就行了

34:24.970 --> 34:25.970
这样子写

34:25.970 --> 34:26.970
这样子写

34:26.970 --> 34:27.970
比方说我们写一个

34:27.970 --> 34:28.970
就一个妹

34:28.970 --> 34:30.970
妹这个样式

34:30.970 --> 34:31.970
妹这个样式

34:31.970 --> 34:32.970
随便写一个

34:34.970 --> 34:35.970
随便写一个

34:35.970 --> 34:36.970
保存

34:36.970 --> 34:38.970
然后咱们来看一下

34:38.970 --> 34:39.970
看一下

34:41.970 --> 34:42.970
你看

34:42.970 --> 34:44.970
这个名字是不是没有转换

34:44.970 --> 34:45.970
转换过后

34:45.970 --> 34:46.970
这个名字不变的

34:46.970 --> 34:47.970
妹

34:47.970 --> 34:49.970
就叫做全局名字

34:49.970 --> 34:50.970
就是个特殊的语法

34:50.970 --> 34:51.970
貓号Global

34:51.970 --> 34:52.970
两个小括号

34:52.970 --> 34:53.970
里面写上类名

34:53.970 --> 34:54.970
就完事了

34:54.970 --> 34:56.970
但是这样子一来了

34:56.970 --> 34:57.970
当然

34:57.970 --> 34:58.970
你在这个style1里面

34:58.970 --> 34:59.970
能不能得到

34:59.970 --> 35:00.970
得到这个对应关系呢

35:00.970 --> 35:02.970
你觉得能不能得到

35:02.970 --> 35:03.970
这个对应关系

35:03.970 --> 35:05.970
你看自然就得不到了

35:05.970 --> 35:06.970
为什么呢

35:06.970 --> 35:07.970
因为它没有转换

35:07.970 --> 35:08.970
你对应啥

35:08.970 --> 35:10.970
这些东西呢

35:10.970 --> 35:11.970
都是符合逻辑的

35:11.970 --> 35:12.970
你看style1里面

35:12.970 --> 35:13.970
它不是有一个

35:13.970 --> 35:14.970
不需要转换的吗

35:14.970 --> 35:15.970
不需要转换对应

35:15.970 --> 35:16.970
对应它干嘛呢

35:16.970 --> 35:17.970
对不对

35:17.970 --> 35:18.970
没有对应了

35:18.970 --> 35:19.970
没有对应了

35:19.970 --> 35:21.970
这是不需要转换的

35:21.970 --> 35:22.970
如果说你有一些

35:22.970 --> 35:24.970
比较特殊的全局样式

35:24.970 --> 35:25.970
不需要转换

35:25.970 --> 35:26.970
特别是在页面上

35:26.970 --> 35:27.970
要静态使用的

35:27.970 --> 35:29.970
在这里要静态使用的样式

35:29.970 --> 35:31.970
比方说我们有一个div

35:31.970 --> 35:32.970
me

35:32.970 --> 35:34.970
要这样子使用的样式

35:34.970 --> 35:35.970
那么

35:35.970 --> 35:37.970
确实不应该进行转换

35:37.970 --> 35:38.970
那么这里

35:38.970 --> 35:40.970
就可以使用global

35:40.970 --> 35:41.970
使用global

35:41.970 --> 35:43.970
好 这是关于这个

35:43.970 --> 35:45.970
全局的

35:45.970 --> 35:47.970
然后呢

35:47.970 --> 35:49.970
这里说相反的

35:49.970 --> 35:50.970
相反的

35:50.970 --> 35:52.970
没有使用global的内名

35:52.970 --> 35:54.970
表示默认使用了local

35:54.970 --> 35:55.970
local什么

35:55.970 --> 35:56.970
表示局部的

35:56.970 --> 35:57.970
局部的是不是有可能

35:57.970 --> 35:58.970
造成冲突

35:58.970 --> 35:59.970
我们的局部变量一样

35:59.970 --> 36:01.970
不同的局部环境里边

36:01.970 --> 36:03.970
它可能名字有相同的

36:03.970 --> 36:04.970
那么这种局部的呢

36:04.970 --> 36:05.970
默认就是局部的

36:05.970 --> 36:07.970
就是像这里

36:07.970 --> 36:08.970
你c1c2

36:08.970 --> 36:09.970
啥都没写

36:09.970 --> 36:10.970
没有写什么特殊语法

36:10.970 --> 36:11.970
那么它就是局部的

36:11.970 --> 36:13.970
就相当于是你写的这个东西

36:13.970 --> 36:17.470
就相当于是你写的这个

36:17.470 --> 36:19.470
一样的你看保存

36:19.470 --> 36:21.470
你看是不是一样的

36:21.470 --> 36:23.470
你看c1

36:23.470 --> 36:24.470
c1变成这个

36:24.470 --> 36:25.470
一样的

36:25.470 --> 36:26.470
当然我们

36:26.470 --> 36:27.470
没算去写它干嘛了

36:27.470 --> 36:29.470
它默认就是局部的

36:30.470 --> 36:32.470
OK 这是关于这一口

36:32.470 --> 36:34.470
这是关于如何来

36:34.470 --> 36:36.470
使用全局内名

36:37.470 --> 36:38.470
再看下面

36:39.470 --> 36:41.470
如何控制最终的内名

36:41.470 --> 36:42.470
啥意思呢

36:42.470 --> 36:43.470
因为我们知道最终的内名

36:43.470 --> 36:45.470
它是一个哈希值

36:45.470 --> 36:47.470
那如果说你看哈希值

36:47.470 --> 36:48.470
怎么看怎么不爽

36:48.470 --> 36:49.470
我希望用别的名字

36:49.470 --> 36:50.470
可不可以呢

36:50.470 --> 36:51.470
当然可以

36:51.470 --> 36:53.470
我为什么自动跑回去

36:53.470 --> 36:54.470
变回去了

36:54.470 --> 36:55.470
可不可以

36:55.470 --> 36:56.470
要可以

36:56.470 --> 36:57.470
需要配置

36:57.470 --> 36:58.470
配置什么呢

36:58.470 --> 37:00.470
配置一个CSNloader的

37:00.470 --> 37:02.470
local局部的

37:02.470 --> 37:04.470
identity表示的唯一名字

37:04.470 --> 37:06.470
局部的唯一名字

37:06.470 --> 37:07.470
就是局部样式

37:07.470 --> 37:09.470
像这种局部内名

37:09.470 --> 37:11.470
把它生成出来的唯一名字

37:11.470 --> 37:13.470
它默认就是一个哈希值

37:13.470 --> 37:14.470
那么可以配置的

37:14.470 --> 37:15.470
可以配置的

37:15.470 --> 37:16.470
比方怎么配置呢

37:16.470 --> 37:17.470
你看Option是里面

37:17.470 --> 37:19.470
我们再加个配置

37:19.470 --> 37:21.470
怎么配置呢

37:21.470 --> 37:23.470
跟那个文件名差不多

37:23.470 --> 37:24.470
但是它不是文件

37:24.470 --> 37:25.470
是内名

37:25.470 --> 37:26.470
配置的是个内的名字

37:26.470 --> 37:27.470
可以用这个吗

37:27.470 --> 37:29.910
Name

37:29.910 --> 37:30.910
Hungang

37:30.910 --> 37:31.910
哈希

37:31.910 --> 37:32.910
当然这个哈希

37:32.910 --> 37:34.910
跟我们之前写的那个什么

37:34.910 --> 37:36.910
文件名的哈希

37:36.910 --> 37:37.910
就输出

37:37.910 --> 37:39.910
Output里面那个哈希不一样

37:39.910 --> 37:40.910
含义都不一样

37:40.910 --> 37:41.910
这个哈希是指的是

37:41.910 --> 37:42.910
根据内名

37:42.910 --> 37:43.910
根据模画的路径

37:43.910 --> 37:45.910
来生成了哈希

37:45.910 --> 37:46.910
它每个地方是不一样的

37:46.910 --> 37:47.910
因为这个配置

37:47.910 --> 37:48.910
毕竟是给谁看的

37:48.910 --> 37:51.910
这个配置是给

37:51.910 --> 37:52.910
WePack看的

37:52.910 --> 37:55.910
还是给CSNloader看的

37:55.910 --> 37:56.910
是给它看的

37:56.910 --> 37:57.910
它是这样的要求的

37:57.910 --> 37:58.910
你可以这样写

37:58.910 --> 37:59.910
不要说

38:00.910 --> 38:01.910
包吹

38:01.910 --> 38:02.910
你看一下吧

38:02.910 --> 38:03.910
那么这样子呢

38:03.910 --> 38:05.910
它出来的内名就不一样了

38:05.910 --> 38:06.910
你是可以配置的

38:06.910 --> 38:07.910
实际上是可以配置的

38:10.910 --> 38:11.910
写错了是吧

38:11.910 --> 38:12.910
我还想

38:12.910 --> 38:13.910
他刚说了

38:13.910 --> 38:14.910
写错了

38:18.910 --> 38:19.910
我还想

38:19.910 --> 38:20.910
Options

38:21.910 --> 38:23.910
这个名字写错了是吧

38:23.910 --> 38:24.910
我看一下

38:25.910 --> 38:26.910
查一下文道了

38:26.910 --> 38:27.910
我这个名字写错了

38:27.910 --> 38:28.910
不是这个配置

38:28.910 --> 38:29.910
是另外一个配置

38:29.910 --> 38:31.910
我看一下这个配置

38:34.910 --> 38:35.910
他说不是这个配置

38:35.910 --> 38:36.910
他说Options

38:36.910 --> 38:37.910
你这个配置里面

38:37.910 --> 38:39.910
有一个位置的属性

38:39.910 --> 38:40.910
叫localAtentName

38:40.910 --> 38:42.910
我们看一下怎么说

38:42.910 --> 38:43.910
查什么

38:43.910 --> 38:44.910
查CSNloader

38:44.910 --> 38:45.910
要学会查文道

38:46.910 --> 38:47.910
来吧看一下

38:47.910 --> 38:48.910
它里面又说到了

38:48.910 --> 38:50.910
肯定说到了这个东西

38:50.910 --> 38:51.910
走吧

38:55.380 --> 38:57.380
跑了去了呢

38:58.380 --> 39:01.780
跑了去了

39:01.780 --> 39:02.780
找找

39:02.780 --> 39:05.780
localAtentName

39:06.780 --> 39:09.340
我看一下

39:10.340 --> 39:11.340
marge

39:11.340 --> 39:13.340
它放到这里面了

39:14.340 --> 39:15.340
marge

39:15.340 --> 39:16.340
它放到这里面了

39:16.340 --> 39:17.340
配置

39:17.340 --> 39:18.340
它不是直接写到这里

39:18.340 --> 39:19.340
marge

39:19.340 --> 39:20.340
它把它配置成一个对象

39:21.340 --> 39:22.340
这里面要写上

39:22.340 --> 39:23.340
localAtentName

39:23.340 --> 39:24.340
它这样子写的

39:24.340 --> 39:25.340
甭管吧

39:25.340 --> 39:27.340
它说怎么写就怎么写

39:28.340 --> 39:29.340
来

39:29.340 --> 39:30.340
再来写

39:30.340 --> 39:32.780
就不是配置为处了

39:32.780 --> 39:34.780
配置为一个

39:34.780 --> 39:35.780
OK

39:35.780 --> 39:36.780
是不是没问题

39:36.780 --> 39:37.780
看一下

39:37.780 --> 39:38.780
它生成出来的名字

39:39.780 --> 39:40.780
刷新

39:40.780 --> 39:42.780
这边的style1

39:42.780 --> 39:43.780
style1

39:43.780 --> 39:46.780
就是我们的央视的模块名

39:46.780 --> 39:47.780
央视的模块名

39:47.780 --> 39:48.780
然后

39:48.780 --> 39:49.780
横杆

39:49.780 --> 39:50.780
后边的哈希字

39:50.780 --> 39:51.780
五个数字

39:52.780 --> 39:54.780
那内名咋写了

39:54.780 --> 39:55.780
内名咋写了

39:56.780 --> 39:57.780
好像是local

39:57.780 --> 39:58.780
OK

39:58.780 --> 39:59.780
那么我们写一下

39:59.780 --> 40:00.780
local试一下

40:01.780 --> 40:04.990
local

40:04.990 --> 40:05.990
来 再看一下

40:05.990 --> 40:06.990
这个东西

40:06.990 --> 40:07.990
你可以看文档自行解决

40:08.990 --> 40:09.990
OK

40:09.990 --> 40:10.990
那那没问题

40:10.990 --> 40:11.990
看一下

40:12.990 --> 40:13.990
刷新

40:13.990 --> 40:14.990
C11

40:14.990 --> 40:15.990
C22

40:15.990 --> 40:17.990
这可以配置

40:17.990 --> 40:18.990
不过我们一般来说

40:18.990 --> 40:19.990
配置它干嘛呢

40:19.990 --> 40:20.990
对不对

40:20.990 --> 40:21.990
我们关不关心这个

40:21.990 --> 40:22.990
最终生成出来的名字

40:22.990 --> 40:23.990
根本就不关心

40:23.990 --> 40:24.990
最终生成出来的名字

40:24.990 --> 40:26.990
我们只关心我们自己写的名字

40:26.990 --> 40:28.990
因为这是跟我们相关的

40:28.990 --> 40:29.990
跟我们开发相关的

40:29.990 --> 40:30.990
对吧

40:30.990 --> 40:31.990
它最终生成出来的随便啥

40:31.990 --> 40:32.990
跟我们无所谓

40:32.990 --> 40:33.990
因此

40:33.990 --> 40:34.990
绝大部分情况下

40:34.990 --> 40:35.990
我们都不需要去控制

40:35.990 --> 40:36.990
最终的内名

40:36.990 --> 40:38.990
因为它控制上没有任何意义

40:39.990 --> 40:40.990
好 最后来我们来看一下

40:40.990 --> 40:41.990
其他注意事项

40:42.990 --> 40:44.990
我们学习了CSN module

40:44.990 --> 40:45.990
那么我们知道

40:45.990 --> 40:47.990
它往往是配合

40:47.990 --> 40:48.990
构建工具使用的

40:48.990 --> 40:50.990
因为它在大型项目里边

40:50.990 --> 40:52.990
根据用构建工具

40:52.990 --> 40:53.990
把我们写得

40:53.990 --> 40:56.990
分得很精细的CSN模块

40:56.990 --> 40:58.990
把它生成的时候

40:58.990 --> 41:00.990
生成改变它的内名

41:00.990 --> 41:02.990
来避免名字的冲突

41:02.990 --> 41:05.990
它往往会配合构建工具来使用

41:05.990 --> 41:06.990
另外一个

41:06.990 --> 41:08.990
它仅处理顶级域名

41:08.990 --> 41:10.990
尽量不要写千套的域名

41:10.990 --> 41:11.990
什么意思呢

41:11.990 --> 41:12.990
有它一写内名的时候

41:12.990 --> 41:13.990
不要这样的写

41:13.990 --> 41:15.990
一个内名

41:15.990 --> 41:19.990
比方说C1 C2

41:19.990 --> 41:20.990
你不能这样写

41:20.990 --> 41:21.990
那么这样写的过后

41:21.990 --> 41:22.990
它转换怎么转换呢

41:22.990 --> 41:24.990
它只转换顶级域名

41:25.990 --> 41:26.990
它只转换顶级域名

41:26.990 --> 41:28.990
C2不变

41:28.990 --> 41:30.990
你不要这样写

41:30.990 --> 41:31.990
其实也没有必要这样写的

41:31.990 --> 41:32.990
对吧

41:32.990 --> 41:33.990
有什么必要呢

41:33.990 --> 41:34.990
因为你之前这么写

41:34.990 --> 41:35.990
是为了解决什么问题

41:35.990 --> 41:36.990
不就是为了解决

41:36.990 --> 41:37.990
名字冲突的问题吗

41:37.990 --> 41:39.990
这问题是不是已经解决了

41:39.990 --> 41:40.990
你还需要这样的写吗

41:40.990 --> 41:41.990
不需要这样的写的

41:41.990 --> 41:42.990
对吧

41:42.990 --> 41:43.990
没有任何的理由去这样写的

41:43.990 --> 41:44.990
所以说

41:44.990 --> 41:45.990
它跟那个BEM

41:45.990 --> 41:46.990
之前一样

41:46.990 --> 41:47.990
你只要名字冲突

41:47.990 --> 41:48.990
这个问题解决了

41:48.990 --> 41:49.990
OK

41:49.990 --> 41:50.990
你就全部使用顶级域名就行了

41:50.990 --> 41:53.990
不用去用其他的千套的内名

41:54.990 --> 41:55.990
好

41:55.990 --> 41:56.990
第三个

41:56.990 --> 41:57.990
CSS Marginal

41:57.990 --> 41:58.990
它仅处理内名

41:58.990 --> 41:59.990
它不处理

41:59.990 --> 42:01.990
不处理其他选择器

42:01.990 --> 42:02.990
实际上

42:02.990 --> 42:03.990
我们刚才第四条还会说一个

42:03.990 --> 42:05.990
它还会处理ID选择器

42:05.990 --> 42:06.990
不过任何时候

42:06.990 --> 42:07.990
都没有任何理由

42:07.990 --> 42:09.990
去使用ID选择器

42:09.990 --> 42:10.990
之前的大家

42:10.990 --> 42:11.990
你们学的CSS的时候

42:11.990 --> 42:13.990
就应该给大家解释过

42:14.990 --> 42:16.990
那么像什么元素选择器

42:16.990 --> 42:17.990
就不要来了

42:17.990 --> 42:18.990
元素选择器它不管

42:18.990 --> 42:19.990
根本就不管

42:19.990 --> 42:21.990
比方说我们这里写个HE

42:22.990 --> 42:23.990
就是Fund

42:23.990 --> 42:24.990
Width

42:24.990 --> 42:25.990
Board

42:25.990 --> 42:26.990
随便写个

42:26.990 --> 42:27.990
看一下吧

42:27.990 --> 42:28.990
它有没有处理内名

42:28.990 --> 42:29.990
这都不算是内名了

42:29.990 --> 42:30.990
对吧

42:30.990 --> 42:31.990
你看Style1里面

42:31.990 --> 42:32.990
有没有这个HE

42:32.990 --> 42:33.990
有没有这个HE

42:33.990 --> 42:35.990
我写到Style2里面

42:35.990 --> 42:39.690
我写到Style1里面

42:39.690 --> 42:40.690
好 你看

42:40.690 --> 42:41.690
是不是还是没有

42:41.690 --> 42:43.690
那就看一下最终的样式

42:43.690 --> 42:45.690
HE是不是直接过来了

42:45.690 --> 42:47.690
它不处理元素选择器的

42:47.690 --> 42:49.690
元素选择器不处理

42:52.260 --> 42:53.260
当然

42:53.260 --> 42:54.260
它不是说你不能写

42:54.260 --> 42:55.260
当然你也可以写

42:55.260 --> 42:56.260
只是我告诉你

42:56.260 --> 42:57.260
它不处理就行了

42:59.260 --> 43:01.260
然后使用CSS module之后

43:01.260 --> 43:03.260
只要能做到内名

43:03.260 --> 43:04.260
望文之意即可

43:04.260 --> 43:05.260
不需要遵守其他

43:05.260 --> 43:06.260
任何的命名规范

43:06.260 --> 43:08.260
就是它的好处就在于这一点

43:08.260 --> 43:09.260
就是你内名

43:09.260 --> 43:11.260
你在这个模块里面

43:11.260 --> 43:12.260
你想怎么写

43:12.260 --> 43:13.260
比方说你

43:13.260 --> 43:14.260
我这个模块里面

43:14.260 --> 43:15.260
Banner

43:15.260 --> 43:17.260
就是轮波图里面

43:17.260 --> 43:18.260
我的内样式里面

43:18.260 --> 43:19.260
比方说一个容器

43:19.260 --> 43:21.260
我没有必要像一个BEM的样子

43:21.260 --> 43:22.260
要去写个Banner

43:22.260 --> 43:23.260
两个下滑线

43:23.260 --> 43:24.260
Countainer

43:24.260 --> 43:25.260
没必要

43:25.260 --> 43:26.260
我直接就来Countainer

43:26.260 --> 43:28.260
我就是在处理这个模块的

43:28.260 --> 43:29.260
甚至我的文件名

43:29.260 --> 43:30.260
就命名为Banner

43:31.260 --> 43:32.260
它不过就是容器

43:32.260 --> 43:34.260
不会跟其他状况任何冲突的

43:34.260 --> 43:35.260
哪怕其他模块里面

43:35.260 --> 43:36.260
也有Countainer

43:36.260 --> 43:37.260
但是最终样式里面

43:37.260 --> 43:38.260
它一定变成哈希纸的

43:39.260 --> 43:41.260
所以不会存在有冲突的

43:41.260 --> 43:42.260
它的好处在于

43:42.260 --> 43:43.260
我们没有必要去

43:43.260 --> 43:44.260
寄什么命名规范

43:44.260 --> 43:46.260
我们写的内名非常的简洁

43:46.260 --> 43:47.260
只要我们的内名

43:47.260 --> 43:48.260
望文之意

43:48.260 --> 43:49.260
知道它的内名是什么意思

43:49.260 --> 43:50.260
在这个模块里面

43:50.260 --> 43:51.260
在这个局部的模块里面

43:51.260 --> 43:52.260
是什么意思就可以了

43:52.260 --> 43:53.260
没有必要去遵守

43:53.260 --> 43:55.260
其他的命名规范了

43:55.260 --> 43:56.260
它一定不会造成

43:56.260 --> 43:57.260
名称的冲突

43:58.260 --> 43:59.260
这就是关于

43:59.260 --> 44:00.260
CSS module

44:00.260 --> 44:01.260
我们要讲的东西

44:01.260 --> 44:02.260
特别简单

44:02.260 --> 44:03.260
用鞋也特别简单

44:03.260 --> 44:04.260
就是

44:04.260 --> 44:05.260
按照我这个配

44:05.260 --> 44:06.260
配一下就完事了

44:06.260 --> 44:07.260
甚至这个东西

44:07.260 --> 44:08.260
都可以不用配

44:08.260 --> 44:10.260
往往都不需要配置

44:10.260 --> 44:11.260
我们往往配置的是

44:11.260 --> 44:12.260
marges

44:13.260 --> 44:14.260
或者是

44:14.260 --> 44:15.260
往往配置的是

44:15.260 --> 44:16.260
什么呢

44:16.260 --> 44:17.260
往往配置

44:17.260 --> 44:18.260
这样配置的

44:18.260 --> 44:19.260
给大家看一下

44:19.260 --> 44:20.260
平时如果说要用它的话

44:20.260 --> 44:21.260
怎么来配置

44:21.260 --> 44:22.260
就这样的配置

44:23.260 --> 44:24.260
懂了

44:24.260 --> 44:25.260
又是

44:26.260 --> 44:27.260
第一个style loader

44:27.260 --> 44:29.260
因为它是从右向左加载的

44:30.260 --> 44:31.260
CSS loader

44:31.260 --> 44:32.260
把marges

44:32.260 --> 44:34.260
marges开起来就完事了

44:34.260 --> 44:35.260
往往就是这样配置的

44:35.260 --> 44:36.260
对吧

44:36.260 --> 44:37.260
看一下效果

44:37.260 --> 44:39.890
一样的

44:40.890 --> 44:44.030
看一下

44:44.030 --> 44:45.030
不用看了吧

44:46.030 --> 44:47.030
控制

44:48.030 --> 44:49.030
是一样的

44:49.030 --> 44:51.030
往往就是这样配置就完事了

44:51.030 --> 44:53.030
配置用起来非常简单

44:53.030 --> 44:54.030
用起来的时候

44:54.030 --> 44:56.030
我们就只需要把这个样式打入进来

44:56.030 --> 44:58.030
它里面就是一个对象

44:58.030 --> 44:59.030
这个对象里面

44:59.030 --> 45:00.030
它就是

45:00.030 --> 45:01.030
由我们写的那样式

45:01.030 --> 45:03.030
顶级的那样式

45:03.030 --> 45:04.030
那么

45:04.030 --> 45:05.030
它对应的

45:05.030 --> 45:07.030
对应的最终的那样式的名字

45:07.030 --> 45:09.030
那么就可以通过这个属性取出来

45:09.030 --> 45:10.030
放到

45:10.030 --> 45:12.030
相应的元素的class name里面去

45:12.030 --> 45:13.030
就可以了

45:13.030 --> 45:14.030
OK

45:14.030 --> 45:15.030
那么这就是关于

45:15.030 --> 45:16.030
这个CSS

45:16.030 --> 45:17.030
marges

45:17.030 --> 45:18.030
它的用法

