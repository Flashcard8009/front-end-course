WEBVTT

00:00.940 --> 00:06.940
这些课咯 咱们来看一个使用loader来完成一个非常有意思的例子

00:06.940 --> 00:08.940
做什么呢 做样式处理

00:08.940 --> 00:12.940
有些人说这个样式啊 还需要处理吗

00:12.940 --> 00:15.940
你不是最终会生成一个电视目录吗

00:15.940 --> 00:18.940
咱们把样式表直接在这里写个文件

00:18.940 --> 00:20.940
比如说index.css

00:20.940 --> 00:23.940
咱们写个文件 把这些样式写到这里边

00:23.940 --> 00:26.940
然后呢 在页面上 英德克斯的antimal里边

00:26.940 --> 00:28.940
去引用这个样式表不完了嘛 对吧

00:28.940 --> 00:30.940
跟以前的传统做法是不是一样的 对吧

00:30.940 --> 00:32.940
用这种方式

00:32.940 --> 00:35.940
实际上呢 我们当我们使用了一些构建工具

00:35.940 --> 00:37.940
比方说像vpec这种构建工具

00:37.940 --> 00:41.940
使用了之后呢 不仅仅是对戒严的时代嘛

00:41.940 --> 00:43.940
我们希望有更加优雅的书写方式

00:43.940 --> 00:46.940
要分模块儿的话 尽量的分得很细

00:46.940 --> 00:47.940
甚至呢 我们用一些别的语言

00:47.940 --> 00:50.940
比方说像什么ts type script 里面以后要学的

00:50.940 --> 00:52.940
用别的语言来书写 不管它用什么书写

00:52.940 --> 00:54.940
怎么爽怎么来 怎么舒服怎么来

00:54.940 --> 00:57.940
怎么容易维护怎么来

00:57.940 --> 00:59.940
那么这样子写的接式代码过后呢

00:59.940 --> 01:01.940
只要交给vpec一打包

01:01.940 --> 01:03.940
或者是交给如果有些地方处理不了的话

01:03.940 --> 01:05.940
交给相应的loader 对吧

01:05.940 --> 01:08.940
把原代码给它 比方说我们用type script写的代码

01:08.940 --> 01:10.940
根本就不是一个可以运行的代码 对吧

01:10.940 --> 01:12.940
因为它是别的语言写的东西

01:12.940 --> 01:14.940
那写的代码交给这个一相应的loader

01:14.940 --> 01:16.940
而它一处理就变成了一个

01:16.940 --> 01:18.940
可以运行的接式代码

01:18.940 --> 01:20.940
然后再打包以合并就完事了

01:20.940 --> 01:23.940
那央式代码也需要这样吗

01:23.940 --> 01:25.940
实际上呢 我们有了vpec之后呢

01:25.940 --> 01:27.940
央式代码也会发现

01:27.940 --> 01:29.940
我们有的时候呢 自己写央式

01:29.940 --> 01:31.940
有些写的很爽的代码

01:31.940 --> 01:33.940
但是它不能运行 它不能运行

01:33.940 --> 01:35.940
我们要把它变成运行的

01:35.940 --> 01:36.940
也需要vpec来打包

01:36.940 --> 01:38.940
所以针对央式这一块呢

01:38.940 --> 01:40.940
我们通常有了构建工具之后

01:40.940 --> 01:41.940
也不会直接在这里写

01:41.940 --> 01:43.940
最终的文件里面写央式表

01:43.940 --> 01:45.940
而是呢 希望vpec把央式

01:45.940 --> 01:47.940
也当成一个模块来进行打包

01:47.940 --> 01:49.940
可不可以呢 当然可以

01:49.940 --> 01:51.940
因为你看这个vpec

01:51.940 --> 01:53.940
vpec的官网上怎么说的

01:53.940 --> 01:55.940
打包所有资源 啥都可以

01:55.940 --> 01:57.940
随便啥都可以 连图片都可以

01:57.940 --> 01:59.940
因此呢 那央式怎么处理呢

01:59.940 --> 02:01.940
我们央式呢 一般会这样子写

02:01.940 --> 02:02.940
就是在我们

02:02.940 --> 02:04.940
我们会把央式写到这个元代码里边

02:04.940 --> 02:06.940
写到元代码里边

02:06.940 --> 02:07.940
一般呢 但他们不是一定的

02:07.940 --> 02:09.940
看你们工事剧的要求

02:09.940 --> 02:10.940
一般呢 我们会在这里呢

02:10.940 --> 02:13.940
建议一个文件夹 叫ersets

02:13.940 --> 02:15.940
表示一些静态资源

02:15.940 --> 02:16.940
一些静态资源

02:16.940 --> 02:18.940
那么这里边呢 可以放一些图片啊

02:18.940 --> 02:19.940
可以放一些什么样子

02:19.940 --> 02:21.940
当然这个文件夹名字随便去

02:21.940 --> 02:23.940
这个名字 随便啥名字就可以

02:23.940 --> 02:25.940
总之呢 在这里边呢 去写央式

02:25.940 --> 02:27.940
举个例子吧 我们把央式写到这

02:27.940 --> 02:30.940
当然目前呢 好像没有这个必要

02:30.940 --> 02:32.940
直接把这个央式放到最终文件也可以

02:32.940 --> 02:33.940
好像没有什么必要

02:33.940 --> 02:35.940
但是呢 以后呢 我会

02:35.940 --> 02:38.940
就是这门客 我后边会专门来一个章节来

02:38.940 --> 02:40.940
说一下央式 怎么样写起来

02:40.940 --> 02:42.940
更加舒服

02:42.940 --> 02:44.940
就在工程化开发里边

02:44.940 --> 02:46.940
央式呢 如果说你直接像以前那样子

02:46.940 --> 02:48.940
写成一个最终的文件的话

02:48.940 --> 02:50.940
有些问题呢 不是很好处理

02:50.940 --> 02:52.940
那么我们在这里呢 比方说

02:52.940 --> 02:54.940
我们在央式呢 这里随便写个

02:54.940 --> 02:56.940
就写个body

02:56.940 --> 02:58.940
background 比方说

02:58.940 --> 02:59.940
ccc

02:59.940 --> 03:01.940
然后color

03:01.940 --> 03:03.940
ff 比方说 随便写下写个央式

03:03.940 --> 03:05.940
下写个央式

03:05.940 --> 03:07.940
那么我们在打包的时候

03:07.940 --> 03:09.940
它是根据入口文件来打包的 对吧

03:09.940 --> 03:10.940
比方说它根据入口文件

03:10.940 --> 03:12.940
是不是index的介绍在打包的

03:12.940 --> 03:13.940
OK 那么这里呢

03:13.940 --> 03:14.940
它要把我们央式呢

03:14.940 --> 03:17.940
生成到最终的文件的位置

03:17.940 --> 03:20.940
是不是要得有一个依赖啊

03:20.940 --> 03:22.940
然后require依赖

03:22.940 --> 03:23.940
啊 你是吗

03:23.940 --> 03:25.940
sys里边的index

03:25.940 --> 03:27.940
这里就必须要写后续名了

03:27.940 --> 03:28.940
因为不写后续名的话

03:28.940 --> 03:30.940
它读的是什么 读的是叫js

03:30.940 --> 03:32.940
读的是这个文件 没有这个文件

03:32.940 --> 03:34.940
所以说这里必须要写后续名

03:34.940 --> 03:35.940
原来还要自己蒙了

03:35.940 --> 03:37.940
还有这种写法呀

03:37.940 --> 03:40.940
说实话 是不能有这种写法的

03:40.940 --> 03:42.940
无论是commonjs也好

03:42.940 --> 03:44.940
还是es6模块也好

03:44.940 --> 03:46.940
它都不能把央式代码

03:46.940 --> 03:48.940
当成模块倒进来

03:48.940 --> 03:49.940
因为这个央式代码里边

03:49.940 --> 03:51.940
根本就不会出现这种东西 对吧

03:51.940 --> 03:52.940
有没有出现这种东西

03:52.940 --> 03:53.940
它本身就不是js代码

03:53.940 --> 03:54.940
所以说呢

03:54.940 --> 03:56.940
按理说commonjs

03:56.940 --> 03:58.940
什么es6呢

03:58.940 --> 04:00.940
它都不让你这样做

04:00.940 --> 04:01.940
这样做太奇怪了

04:01.940 --> 04:02.940
太奇怪了

04:02.940 --> 04:03.940
但是这个东西

04:03.940 --> 04:06.940
是不是交给commonjsjs运行的

04:06.940 --> 04:07.940
不是

04:07.940 --> 04:08.940
搞清楚啊

04:08.940 --> 04:09.940
不是 这是我们的原代码

04:09.940 --> 04:10.940
src目录

04:10.940 --> 04:12.940
它只是在读代码的内容

04:12.940 --> 04:14.940
它根本就不会交给commonjs运行

04:14.940 --> 04:15.940
会不会交给es6模块发运行

04:15.940 --> 04:17.940
不会 根本就不会

04:17.940 --> 04:19.940
那么这个东西是给谁来看的

04:19.940 --> 04:21.940
给webpack看的

04:21.940 --> 04:22.940
而webpack

04:22.940 --> 04:23.940
它才不管你那么多

04:23.940 --> 04:25.940
它只要看到require

04:25.940 --> 04:26.940
有依赖

04:26.940 --> 04:27.940
表示我的入口文件

04:27.940 --> 04:29.940
依赖了这个模块的内容

04:29.940 --> 04:31.940
它管理这个文件是啥

04:31.940 --> 04:32.940
后期名是abc

04:32.940 --> 04:33.940
随便 无所谓

04:33.940 --> 04:34.940
它要做的事情

04:34.940 --> 04:36.940
就是把这个文件内容读出来

04:36.940 --> 04:37.940
读出来怎么样

04:37.940 --> 04:38.940
就跟我们之前说的

04:38.940 --> 04:39.940
文件内容读出来

04:39.940 --> 04:40.940
然后呢

04:40.940 --> 04:41.940
处理

04:41.940 --> 04:42.940
经过loader

04:42.940 --> 04:43.940
把文件内容给它

04:43.940 --> 04:45.940
它要给我给我最终的一个元代吧

04:45.940 --> 04:46.940
然后呢

04:46.940 --> 04:47.940
生成一个抽象与法术

04:47.940 --> 04:48.940
然后找到其他的依赖

04:48.940 --> 04:50.940
然后接着记录

04:50.940 --> 04:51.940
然后呢

04:51.940 --> 04:52.940
又检查其他的依赖

04:52.940 --> 04:53.940
它就做这件事

04:53.940 --> 04:54.940
其他啥都不管

04:54.940 --> 04:55.940
它管理那么多

04:55.940 --> 04:56.940
管理这个文件是啥

04:56.940 --> 04:58.940
随便是啥都可以

04:58.940 --> 04:59.940
因此呢

04:59.940 --> 05:00.940
这个东西交给webpack

05:00.940 --> 05:01.940
能不能运行

05:01.940 --> 05:02.940
当然可以

05:02.940 --> 05:03.940
没有任何问题

05:03.940 --> 05:04.940
webpack会怎么理解

05:04.940 --> 05:05.940
它认为

05:05.940 --> 05:06.940
我的入口模块里边

05:06.940 --> 05:07.940
依赖了这个模块

05:07.940 --> 05:08.940
我管理这个模块是啥

05:08.940 --> 05:10.940
那么你给我提供的路径

05:10.940 --> 05:12.940
OK 那我就把它

05:12.940 --> 05:13.940
文件的内容读出来

05:13.940 --> 05:14.940
读出来干嘛

05:14.940 --> 05:15.940
做st

05:15.940 --> 05:17.940
抽象与法术分析

05:17.940 --> 05:19.940
但是默认的情况下

05:19.940 --> 05:21.940
这个东西一抽象与法术分析

05:21.940 --> 05:22.940
分析得出来吗

05:22.940 --> 05:23.940
分析得出来吗

05:23.940 --> 05:24.940
肯定分析不出来

05:24.940 --> 05:25.940
都不是接待嘛

05:25.940 --> 05:26.940
所以它这个时候

05:26.940 --> 05:27.940
会怎么样呢

05:27.940 --> 05:28.940
它会爆出

05:28.940 --> 05:29.940
你看着啊

05:29.940 --> 05:30.940
我们这里呢

05:30.940 --> 05:31.940
把这个路径找到

05:31.940 --> 05:32.940
你要理解

05:32.940 --> 05:33.940
它是怎么来处理的

05:33.940 --> 05:34.940
这个

05:34.940 --> 05:35.940
也原理

05:35.940 --> 05:37.940
因为像我们webpack

05:37.940 --> 05:39.940
东西特别多

05:39.940 --> 05:41.940
而且我只能给大家讲解

05:41.940 --> 05:42.940
我们常用的东西

05:42.940 --> 05:43.940
能不能讲完它讲不完

05:43.940 --> 05:45.940
所以说为什么我这个章节

05:45.940 --> 05:47.940
第一个核心功能这个章节

05:47.940 --> 05:48.940
我会讲这么多原理的

05:48.940 --> 05:50.940
就是你了解了原理之后

05:50.940 --> 05:51.940
哪怕你以后

05:51.940 --> 05:52.940
遇到了新的东西

05:52.940 --> 05:53.940
无所谓

05:53.940 --> 05:55.940
我们往原理里边套一下就明白了

05:55.940 --> 05:56.940
我希望能够

05:56.940 --> 05:58.940
达到这么一个样的一个效果

05:58.940 --> 05:59.940
而不是

05:59.940 --> 06:00.940
我讲一个点

06:00.940 --> 06:01.940
你记一个点

06:01.940 --> 06:02.940
讲一个点

06:02.940 --> 06:03.940
一个点

06:03.940 --> 06:04.940
核心理解它的原理

06:04.940 --> 06:05.940
后面你跟它套就完事了

06:05.940 --> 06:07.940
MPX是webpack

06:07.940 --> 06:08.940
打包你看一下

06:08.940 --> 06:10.940
现在能打包吧

06:10.940 --> 06:11.940
现在打不了

06:11.940 --> 06:12.940
为什么打不了呢

06:12.940 --> 06:13.940
它说搞不定

06:13.940 --> 06:15.940
搞不定你这个CSS

06:15.940 --> 06:16.940
就是你这个文件

06:16.940 --> 06:17.940
它有没有读出来

06:17.940 --> 06:18.940
它有读出来

06:18.940 --> 06:19.940
它不是文件那种读出来了

06:19.940 --> 06:20.940
没有loader

06:20.940 --> 06:21.940
现在没有loader

06:21.940 --> 06:23.940
那直接进行抽象与法术分析

06:23.940 --> 06:24.940
是不是分析不出来

06:24.940 --> 06:25.940
根本就不知道你这个啥玩意儿

06:25.940 --> 06:26.940
它没法分析

06:26.940 --> 06:27.940
分析这个答应

06:27.940 --> 06:29.940
因为抽象与法术没法分析

06:29.940 --> 06:30.940
那么后续了什么

06:30.940 --> 06:31.940
找它的依赖

06:31.940 --> 06:32.940
又找什么东西

06:32.940 --> 06:33.940
它就做不了这件事

06:33.940 --> 06:35.940
它就做不了这件事

06:35.940 --> 06:37.940
所以说

06:37.940 --> 06:39.940
那么这一块

06:39.940 --> 06:40.940
是不是处理不了

06:40.940 --> 06:41.940
webpack原生处理不了

06:41.940 --> 06:42.940
但它要不要读出来

06:42.940 --> 06:43.940
还肯定读出来

06:43.940 --> 06:44.940
但它只是

06:44.940 --> 06:45.940
它读出来的代码

06:45.940 --> 06:47.940
它没法进行抽象与法术分析

06:47.940 --> 06:49.940
那么我们现在要干嘛

06:49.940 --> 06:51.940
我们现在要做的

06:51.940 --> 06:54.940
无非就是写一个loader

06:54.940 --> 06:56.940
凡是看到这个

06:56.940 --> 06:58.940
后续名为CSS这种文件

06:58.940 --> 07:00.940
那么交给相应的loader

07:00.940 --> 07:01.940
那么也就是把这个内容

07:01.940 --> 07:02.940
交给loader

07:02.940 --> 07:03.940
只要这个loader

07:03.940 --> 07:05.940
它返回一个

07:05.940 --> 07:08.940
可以识别的介石代码

07:08.940 --> 07:09.940
让它能够进行

07:09.940 --> 07:10.940
后续的抽象与法术分析

07:10.940 --> 07:12.940
那就ok了

07:12.940 --> 07:13.940
就ok了

07:13.940 --> 07:14.940
所以说要处理这个样式

07:14.940 --> 07:15.940
还不简单吗

07:15.940 --> 07:18.940
比方说我们这里

07:18.940 --> 07:21.940
新建一个文件牙吧

07:21.940 --> 07:22.940
loaders

07:22.940 --> 07:23.940
那么在这里边

07:23.940 --> 07:24.940
我们写上这么一个

07:24.940 --> 07:25.940
style loader

07:25.940 --> 07:26.940
样式

07:26.940 --> 07:27.940
loader

07:27.940 --> 07:28.940
LGS

07:28.940 --> 07:29.940
那么这里边导出啥

07:29.940 --> 07:30.940
是不是导出一个loader

07:30.940 --> 07:31.940
就是一个函数

07:31.940 --> 07:32.940
对吧

07:32.940 --> 07:33.940
export

07:33.940 --> 07:34.940
导出这么一个函数

07:34.940 --> 07:35.940
这个函数传一个啥

07:35.940 --> 07:36.940
是不是传一个source called

07:36.940 --> 07:37.940
元代

07:37.940 --> 07:39.940
它就是把一样式元代码给我

07:39.940 --> 07:40.940
然后返回一个啥呢

07:40.940 --> 07:42.940
返回一个介石代码

07:42.940 --> 07:43.940
返回一个

07:43.940 --> 07:45.940
这里边只要是介石代码

07:45.940 --> 07:46.940
它就认

07:46.940 --> 07:48.940
它就认为这个是最终的介石代码

07:48.940 --> 07:49.940
它不甭个元代的代码是啥

07:49.940 --> 07:51.940
它只要经过的处理过

07:51.940 --> 07:52.940
给它的是一个介石代码

07:52.940 --> 07:53.940
它就认

07:53.940 --> 07:55.940
那么这里我们得到啥

07:55.940 --> 07:57.940
比方得到一个空置物串

07:57.940 --> 07:58.940
啥都不要

07:58.940 --> 07:59.940
你看看我们首先看

07:59.940 --> 08:00.940
能不能通过编译

08:00.940 --> 08:01.940
能不能通过这个warepack的编译

08:01.940 --> 08:03.940
好我们在这里边

08:03.940 --> 08:05.940
我们是不是要配置marge

08:05.940 --> 08:06.940
配置模块解析

08:06.940 --> 08:07.940
其中一个规则

08:07.940 --> 08:08.940
规则是不是有很多规则

08:08.940 --> 08:09.940
那么其中一个规则是

08:09.940 --> 08:11.940
其中一个规则就是test

08:11.940 --> 08:14.940
我们的正能表达式

08:14.940 --> 08:15.940
正能表达式

08:15.940 --> 08:16.940
什么呢

08:16.940 --> 08:19.940
只要以后绝名CSS结尾就行

08:19.940 --> 08:21.940
那么只要遇到这样的模块

08:21.940 --> 08:22.940
我就还要交给谁呢

08:22.940 --> 08:23.940
还要交给这个loader

08:23.940 --> 08:24.940
还有没有

08:24.940 --> 08:25.940
又是

08:25.940 --> 08:26.940
交给相应的loader来进行处理

08:26.940 --> 08:27.940
什么loader呢

08:27.940 --> 08:28.940
表写钢

08:28.940 --> 08:29.940
loaders

08:29.940 --> 08:31.940
然后styleloader

08:31.940 --> 08:32.940
对吧

08:32.940 --> 08:33.940
所以交给他来处理

08:33.940 --> 08:34.940
交给他就完了

08:34.940 --> 08:35.940
那么接下来

08:35.940 --> 08:36.940
我们来看一下再打包

08:36.940 --> 08:39.640
clear

08:39.640 --> 08:40.640
nps

08:40.640 --> 08:41.640
webpack

08:41.640 --> 08:42.640
再打包

08:42.640 --> 08:43.640
你看一下

08:43.640 --> 08:44.640
是不是就可以打包了

08:44.640 --> 08:45.640
没包错了

08:45.640 --> 08:46.640
没包错了

08:46.640 --> 08:47.640
然后我们看一下打包的最终代

08:47.640 --> 08:48.640
打包最终代

08:48.640 --> 08:49.640
你看着

08:49.640 --> 08:50.640
两个模块

08:50.640 --> 08:52.640
一个src.index.js

08:52.640 --> 08:53.640
一个src.index.css

08:53.640 --> 08:55.640
它甭管后绝名是啥

08:55.640 --> 08:56.640
这就是个模块

08:56.640 --> 08:57.640
它里边是什么

08:57.640 --> 08:58.640
里边的就普通了

08:58.640 --> 09:00.640
普普通通的

09:00.640 --> 09:02.640
js代

09:02.640 --> 09:03.640
只不过js代我啥都没写

09:03.640 --> 09:04.640
我啥都没写

09:04.640 --> 09:05.640
是空的

09:05.640 --> 09:06.640
啥都没写

09:06.640 --> 09:07.640
最后我们把它转换成

09:07.640 --> 09:09.640
相应的js代

09:09.640 --> 09:10.640
那我们看一下央视

09:10.640 --> 09:12.640
能应用吗

09:12.640 --> 09:13.640
我们来试一下吧

09:13.640 --> 09:14.640
我们在这里

09:14.640 --> 09:16.640
应用这个made.js

09:16.640 --> 09:17.640
你看一下央视能应用吗

09:17.640 --> 09:18.640
你觉得呢

09:18.640 --> 09:20.640
你觉得央视有没有

09:20.640 --> 09:21.640
凭什么有了

09:21.640 --> 09:22.640
你告诉我它凭什么有了

09:22.640 --> 09:23.640
webpack它没有做

09:23.640 --> 09:24.640
任何的其他事情

09:24.640 --> 09:25.640
央视是不存在

09:25.640 --> 09:26.640
对吧

09:26.640 --> 09:27.640
这里

09:30.640 --> 09:31.640
哪里不是说

09:32.640 --> 09:34.640
txt

09:35.640 --> 09:36.640
我看一下

09:41.940 --> 09:43.940
咱们来看一下

09:43.940 --> 09:44.940
它这里是怎么会

09:44.940 --> 09:45.940
怎么回事

09:45.940 --> 09:49.210
稍等一下

09:49.210 --> 09:50.210
我看一下

09:55.840 --> 09:58.220
这里

09:58.220 --> 09:59.220
css

09:59.220 --> 10:00.220
css没有

10:00.220 --> 10:01.220
没有这个css

10:01.220 --> 10:02.220
ok

10:02.220 --> 10:03.220
下面没包错了

10:03.220 --> 10:04.220
我说这个错误怎么来的

10:04.220 --> 10:05.220
那么现在

10:05.220 --> 10:06.220
有没有央视

10:06.220 --> 10:07.220
你看包件

10:07.220 --> 10:08.220
我们不是给包件

10:08.220 --> 10:09.220
是个背景吗

10:10.220 --> 10:11.220
再强调一次

10:11.220 --> 10:13.220
webpack它什么都没管

10:13.220 --> 10:14.220
它就是读文件内容

10:14.220 --> 10:15.220
读完的内容

10:15.220 --> 10:16.220
分级收藏语法书

10:16.220 --> 10:18.220
那么现在无非就是

10:18.220 --> 10:19.220
你加了一个loader

10:19.220 --> 10:20.220
它文件内容是啥

10:20.220 --> 10:21.220
文件内容

10:21.220 --> 10:22.220
我看一下

10:22.220 --> 10:23.220
文件内容是啥

10:23.220 --> 10:24.220
文件内容就是这个玩意

10:24.220 --> 10:25.220
对吧

10:25.220 --> 10:26.220
就这个玩意

10:26.220 --> 10:27.220
它把这个玩意交给谁

10:27.220 --> 10:28.220
交个loader

10:28.220 --> 10:29.220
loader给它一个什么玩意

10:29.220 --> 10:30.220
loader给它的是

10:30.220 --> 10:31.220
你看loader

10:31.220 --> 10:32.220
给它的是什么

10:32.220 --> 10:33.220
给它的是一个空支不串

10:33.220 --> 10:34.220
就是说

10:34.220 --> 10:35.220
这个东西

10:35.220 --> 10:36.220
这个东西就相当于是什么

10:36.220 --> 10:37.220
它把这个内容给它了

10:37.220 --> 10:38.220
支不串

10:38.220 --> 10:39.220
给它

10:39.220 --> 10:40.220
然后它把这个

10:40.220 --> 10:41.220
然后这里

10:41.220 --> 10:42.220
给它返回的是个空支不串

10:42.220 --> 10:43.220
所以说

10:43.220 --> 10:44.220
它对这个模块的最终解析出来

10:44.220 --> 10:46.220
就是个空支不串

10:46.220 --> 10:47.220
它啥都不是

10:47.220 --> 10:48.220
啥都不是

10:48.220 --> 10:49.220
那这个时候

10:49.220 --> 10:50.220
我怎么样把央视

10:50.220 --> 10:52.220
应用到页面上呢

10:52.220 --> 10:54.220
因为我们这里的代码

10:54.220 --> 10:55.220
其实就是为了

10:55.220 --> 10:56.220
防止它爆错

10:56.220 --> 10:57.220
就是为了防止它爆错

10:57.220 --> 10:58.220
因为它无法理解

10:58.220 --> 10:59.220
CSS代码

10:59.220 --> 11:00.220
把它解析成

11:00.220 --> 11:01.220
抽象语法书

11:01.220 --> 11:02.220
它解析不了

11:02.220 --> 11:03.220
为了防止它爆错

11:03.220 --> 11:04.220
所以说我只该

11:04.220 --> 11:05.220
把你个空支不串

11:05.220 --> 11:06.220
我们要把央视

11:06.220 --> 11:07.220
应用进去

11:07.220 --> 11:08.220
你看着

11:08.220 --> 11:09.220
我一句话就搞定了

11:09.220 --> 11:11.220
也不止一句话

11:11.220 --> 11:12.220
我们这里生成一个

11:12.220 --> 11:13.220
style元素

11:13.220 --> 11:14.220
Document

11:14.220 --> 11:16.220
CreateElement

11:16.220 --> 11:18.220
生成一个style元素

11:18.220 --> 11:20.220
然后给这个元素

11:20.220 --> 11:22.220
设置一个InnerItem

11:22.220 --> 11:23.220
InnerItem是啥

11:23.220 --> 11:24.220
InnerItem

11:24.220 --> 11:26.220
直接把这个东西放进去

11:26.220 --> 11:27.220
直接放进去

11:27.220 --> 11:28.220
那么这样子

11:28.220 --> 11:29.220
是不是生成了一个元素

11:29.220 --> 11:30.220
我们把这个元素

11:30.220 --> 11:31.220
放到哪

11:31.220 --> 11:33.220
放到head里边

11:33.220 --> 11:35.220
放到head

11:35.220 --> 11:37.220
AppendChild

11:37.220 --> 11:38.220
把这个style放进去

11:38.220 --> 11:39.220
我们自己熟悉代码

11:39.220 --> 11:40.220
对吧

11:40.220 --> 11:41.220
把这个source corridor

11:41.220 --> 11:43.220
把它给我的文件的

11:43.220 --> 11:44.220
原始内容

11:44.220 --> 11:46.220
我们放到这个里边去

11:46.220 --> 11:47.220
然后再给它返回一个

11:47.220 --> 11:48.220
GS代码

11:48.220 --> 11:49.220
GS代码啥都没有

11:49.220 --> 11:50.220
就是我们做一些

11:50.220 --> 11:51.220
这样的操作

11:51.220 --> 11:52.220
是不是就完事了

11:52.220 --> 11:53.220
保存

11:53.220 --> 11:55.220
来看一下

11:55.220 --> 11:56.220
我们这里重新打包

11:56.220 --> 11:57.220
重新打包

11:57.220 --> 11:58.220
那么这样子

11:58.220 --> 12:00.220
它经过loader处理过后

12:00.220 --> 12:01.220
经过loader处理过后

12:01.220 --> 12:02.220
你看一下

12:02.220 --> 12:03.220
经过loader

12:03.220 --> 12:04.220
load

12:04.220 --> 12:05.220
不

12:06.220 --> 12:07.220
现在这样写是不对的

12:07.220 --> 12:09.220
这样子写是不对的

12:09.220 --> 12:10.220
为什么呢

12:10.220 --> 12:11.220
现在我们页面上

12:11.220 --> 12:12.220
能有效果吗

12:12.220 --> 12:13.220
所以还是看不到效果

12:13.220 --> 12:15.220
而且它还包了一个错

12:15.220 --> 12:16.220
还包了一个错

12:16.220 --> 12:17.220
为什么呢

12:17.220 --> 12:18.220
为什么现在这样子写不对了

12:18.220 --> 12:20.220
这样子写为什么不对了

12:20.220 --> 12:22.220
因为这个代码是在

12:22.220 --> 12:23.220
编译期间

12:23.220 --> 12:25.220
就是在webpack运行的期间

12:25.220 --> 12:27.220
在它打包的过程中运行的

12:27.220 --> 12:28.220
那么这个是不是

12:28.220 --> 12:29.220
还是属于loader环境

12:29.220 --> 12:30.220
对吧

12:30.220 --> 12:31.220
它是为了生成最终的文件

12:31.220 --> 12:32.220
这个时候

12:32.220 --> 12:33.220
还运行了这些loader

12:33.220 --> 12:34.220
那么运行这些loader的时候

12:34.220 --> 12:36.220
也就是它在什么时候运行的

12:36.220 --> 12:37.220
它在这个时候运行的

12:37.220 --> 12:38.220
在这个

12:38.220 --> 12:39.220
是不是在webpack打包的过程中

12:39.220 --> 12:40.220
那么这个时候

12:40.220 --> 12:41.220
有没有页面

12:41.220 --> 12:42.220
哪有页面啊

12:42.220 --> 12:43.220
所以没有页面

12:43.220 --> 12:44.220
它的一切的目的只是

12:44.220 --> 12:46.220
为了把我们这个代码

12:46.220 --> 12:47.220
生成到最终代码

12:47.220 --> 12:48.220
所以它没有页面

12:48.220 --> 12:49.220
它没有页面

12:49.220 --> 12:50.220
因此这个代码

12:50.220 --> 12:51.220
当时运行的时候

12:51.220 --> 12:52.220
它就爆错了

12:52.220 --> 12:53.220
它哪有document

12:53.220 --> 12:54.220
根本就没有document

12:54.220 --> 12:55.220
根本就没有document

12:55.220 --> 12:56.220
我看它包的错误

12:56.220 --> 12:57.220
它不知道理解

12:57.220 --> 12:58.220
document is not defined

12:58.220 --> 13:00.220
那么它在webpack运行的过程中

13:00.220 --> 13:01.220
哪有document

13:01.220 --> 13:02.220
而我们希望的是什么呢

13:02.220 --> 13:03.220
希望的是这个样式

13:03.220 --> 13:04.220
追踪到页面上

13:04.220 --> 13:05.220
那什么意思呢

13:05.220 --> 13:06.220
就是页面引用了

13:06.220 --> 13:08.220
我们最终的GS过后

13:09.220 --> 13:11.220
引用了我们最终的GS过后

13:11.220 --> 13:13.220
它能够运行这一段代码

13:13.220 --> 13:14.220
所以说这一段代码

13:14.220 --> 13:15.220
是不是要放到这儿

13:16.220 --> 13:17.220
是不是要放到这儿

13:18.220 --> 13:19.220
就是啥意思呢

13:19.220 --> 13:20.220
我再说一次

13:20.220 --> 13:21.220
啥意思

13:21.220 --> 13:22.220
意思就是说

13:22.220 --> 13:24.220
我这个CSS文件

13:24.220 --> 13:27.220
我希望它把它变成这个样子

13:29.220 --> 13:30.220
我希望它CSS文件

13:30.220 --> 13:31.220
变成这个样子

13:31.220 --> 13:33.220
Append恰

13:33.220 --> 13:34.220
内部的内容

13:34.220 --> 13:35.220
内容是什么呢

13:35.220 --> 13:37.220
内容是这一部分

13:37.220 --> 13:39.220
我希望它变成这个样子

13:39.220 --> 13:40.220
就是我如果说

13:40.220 --> 13:42.220
这里是一个GS代码

13:42.220 --> 13:44.220
webpack始终把它当成GS代运行

13:44.220 --> 13:47.220
我希望的是它不是这种东西

13:47.220 --> 13:49.220
我要把这个东西转换成什么了

13:49.220 --> 13:50.220
转换成这个代码

13:50.220 --> 13:51.220
那么这个代码

13:51.220 --> 13:52.220
是不是就会生成到

13:52.220 --> 13:53.220
最终的GS里面去

13:53.220 --> 13:55.220
那么入口还会引用它

13:55.220 --> 13:56.220
是不是就运行的代码

13:56.220 --> 13:57.220
运行的代码

13:57.220 --> 13:58.220
页面上是不是就有一个样式

13:58.220 --> 14:00.220
好好理解一下

14:00.220 --> 14:02.220
我现在希望的是

14:02.220 --> 14:04.220
把这个代码格式变成

14:04.220 --> 14:05.220
什么呢

14:05.220 --> 14:06.220
变成这个代码格式

14:06.220 --> 14:07.220
听懂了吗

14:07.220 --> 14:08.220
只不过了

14:08.220 --> 14:09.220
这个文件的后续

14:09.220 --> 14:10.220
后续名其是无所谓

14:10.220 --> 14:11.220
关键是文件内容

14:11.220 --> 14:13.220
那么我希望把这个代码格式

14:13.220 --> 14:15.220
变成这个代码格式

14:15.220 --> 14:16.220
所以说我这里

14:16.220 --> 14:17.220
刚才还写错了

14:17.220 --> 14:18.220
所以说我这里

14:18.220 --> 14:19.220
是不是还写到这

14:19.220 --> 14:20.220
是不是写到这

14:20.220 --> 14:21.220
对吧

14:21.220 --> 14:22.220
写到这

14:22.220 --> 14:23.220
然后这一部分

14:23.220 --> 14:24.220
来自于哪

14:24.220 --> 14:25.220
这一部分来自于

14:25.220 --> 14:27.220
是不是来自于source code

14:27.220 --> 14:28.220
对吧

14:29.220 --> 14:30.220
要做的事情

14:32.220 --> 14:33.220
这事

14:33.220 --> 14:35.220
检测到无法访问的代码

14:35.220 --> 14:36.220
什么意思

14:40.510 --> 14:41.510
这里

14:42.510 --> 14:43.510
多了两个

14:44.510 --> 14:45.510
那么我要做的

14:45.510 --> 14:46.510
无非就是这个事情

14:46.510 --> 14:47.510
我把这个代码

14:47.510 --> 14:48.510
我把你给我的

14:48.510 --> 14:49.510
这个CSS代码

14:49.510 --> 14:50.510
转换成为

14:50.510 --> 14:51.510
这种代码

14:51.510 --> 14:52.510
把你换成去了

14:52.510 --> 14:53.510
那么你现在

14:53.510 --> 14:54.510
现在再看一下

14:54.510 --> 14:58.870
生成出来

14:58.870 --> 14:59.870
生成出来

15:00.870 --> 15:01.870
什么呢

15:01.870 --> 15:02.870
他说错不了

15:02.870 --> 15:03.870
他说什么

15:03.870 --> 15:04.870
baked token

15:08.870 --> 15:09.870
这里我们生成出来

15:09.870 --> 15:10.870
这个制服创

15:10.870 --> 15:11.870
我们看一下

15:11.870 --> 15:12.870
这个制服创

15:12.870 --> 15:13.870
是不是有效的介绍代码

15:13.870 --> 15:14.870
我们输出一下

15:14.870 --> 15:15.870
看一下哪里

15:15.870 --> 15:16.870
还有点问题

15:16.870 --> 15:17.870
code

15:18.870 --> 15:20.870
return code

15:21.870 --> 15:22.870
输出一下

15:22.870 --> 15:25.630
看一下

15:25.630 --> 15:26.630
nps

15:26.630 --> 15:27.630
webpack

15:27.630 --> 15:30.520
好 看一下

15:30.520 --> 15:31.520
输出了

15:31.520 --> 15:32.520
输出的是这个

15:32.520 --> 15:34.520
style document

15:34.520 --> 15:36.520
这里多了一个大括号

15:37.520 --> 15:38.520
哪里

15:38.520 --> 15:39.520
没有多大大括号

15:40.520 --> 15:41.520
看一下

15:44.520 --> 15:45.520
var style

15:46.520 --> 15:47.520
document

15:47.520 --> 15:48.520
style.inlet

15:48.520 --> 15:49.520
就是我们输出

15:49.520 --> 15:50.520
转换的最终代码

15:51.520 --> 15:52.520
明白了

15:52.520 --> 15:53.520
就这个body

15:53.520 --> 15:54.520
这个body

15:54.520 --> 15:55.520
你看直接放着了

15:55.520 --> 15:56.520
直接放着了

15:56.520 --> 15:57.520
那么这个是不符合介石语法

15:57.520 --> 15:58.520
介石语法

15:58.520 --> 15:59.520
是不是在这前面

15:59.520 --> 16:00.520
还要加个

16:00.520 --> 16:02.520
就是这个符号

16:02.520 --> 16:03.520
介石语法

16:03.520 --> 16:04.520
是不是要在这里

16:04.520 --> 16:05.520
加上一个介

16:05.520 --> 16:06.520
这个符号

16:06.520 --> 16:07.520
就是你总之你把它

16:07.520 --> 16:08.520
搞定成一个合适的介石语法

16:08.520 --> 16:09.520
就行了

16:09.520 --> 16:10.520
那么这里需要转移

16:10.520 --> 16:11.520
需要转移

16:12.520 --> 16:13.520
OK

16:13.520 --> 16:14.520
那么现在再看一下

16:15.520 --> 16:16.520
总之你要搞定

16:16.520 --> 16:17.520
把这件事情搞定就行了

16:24.030 --> 16:28.970
怎么回事

16:28.970 --> 16:29.970
关都关不掉了

16:29.970 --> 16:35.480
重新来

16:35.480 --> 16:36.480
好 再来

16:36.480 --> 16:37.480
nps

16:37.480 --> 16:38.480
webpack

16:38.480 --> 16:39.480
你看一下

16:39.480 --> 16:40.480
现在输出的结果

16:41.480 --> 16:42.480
那么现在就正确了

16:42.480 --> 16:43.480
现在就正确了

16:43.480 --> 16:44.480
你看

16:44.480 --> 16:45.480
那么我这里

16:45.480 --> 16:46.480
转换之后的介石代码

16:46.480 --> 16:47.480
是不是这个

16:47.480 --> 16:48.480
你看

16:48.480 --> 16:49.480
这个

16:49.480 --> 16:50.480
那么这里initement

16:50.480 --> 16:51.480
就是一个字幕串

16:51.480 --> 16:52.480
你看多加了这个东西

16:52.480 --> 16:53.480
这个符号

16:53.480 --> 16:54.480
那么在这里就是一个字幕串

16:54.480 --> 16:55.480
下面这个字幕串

16:55.480 --> 16:56.480
然后把这个字幕串

16:56.480 --> 16:58.480
加到这个head里边了

16:58.480 --> 16:59.480
那么这样子

16:59.480 --> 17:00.480
形成了最终的介石文件

17:00.480 --> 17:02.480
你看是不是就变成这个

17:02.480 --> 17:03.480
就变成这个

17:03.480 --> 17:04.480
就是我们最终的介石文件

17:04.480 --> 17:05.480
变成这样子

17:05.480 --> 17:06.480
那么这样的介石

17:06.480 --> 17:07.480
是不是可以执行的

17:07.480 --> 17:08.480
那么看一下

17:08.480 --> 17:09.480
是不是应用进去了

17:09.480 --> 17:10.480
body

17:10.480 --> 17:12.480
背景颜色

17:12.480 --> 17:13.480
应用进去了

17:13.480 --> 17:14.480
怎么应用进去了

17:14.480 --> 17:15.480
因为就是用介石

17:16.480 --> 17:17.480
在style元素里面

17:17.480 --> 17:19.480
设置了这么一个东西

17:19.480 --> 17:20.480
是不是就应用进去了

17:20.480 --> 17:21.480
对吧

17:21.480 --> 17:22.480
ok

17:22.480 --> 17:23.480
那么这就是

17:23.480 --> 17:24.480
这个就是

17:24.480 --> 17:26.480
咱们可以用这种方式

17:26.480 --> 17:29.480
来处理CSS代码

17:29.480 --> 17:30.480
是不是可以处理的

17:30.480 --> 17:31.480
对吧

17:31.480 --> 17:32.480
ok

17:32.480 --> 17:33.480
能听懂吗

17:33.480 --> 17:34.480
好好下去

17:34.480 --> 17:35.480
梳理一下

17:35.480 --> 17:36.480
然后呢

17:36.480 --> 17:37.480
这里还没完

17:37.480 --> 17:38.480
那如果说

17:39.480 --> 17:40.480
如果说

17:40.480 --> 17:41.480
那么这里

17:41.480 --> 17:42.480
如果说我还要接收

17:42.480 --> 17:43.480
比方说

17:43.480 --> 17:44.480
因为这个东西

17:44.480 --> 17:46.480
你把这个代码给它

17:46.480 --> 17:47.480
经过楼绕就变成了

17:47.480 --> 17:48.480
一个普普通通的介石代码

17:48.480 --> 17:49.480
经过楼绕之后

17:49.480 --> 17:51.480
它就变成了一个普普通通的介石代码

17:51.480 --> 17:53.480
你看这一块是不是介石代码

17:53.480 --> 17:55.480
那么把它变成了介石代码之后

17:55.480 --> 17:57.480
我们在这里

17:57.480 --> 17:58.480
比方说

17:58.480 --> 18:00.480
我要得到结果呢

18:00.480 --> 18:01.480
我要得到结果呢

18:01.480 --> 18:02.480
content

18:02.480 --> 18:04.480
比方说我要把CSS代码

18:04.480 --> 18:06.480
做成一个字符串来得到

18:06.480 --> 18:07.480
比方说

18:07.480 --> 18:09.480
我要这是CSS的

18:09.480 --> 18:11.480
圆码字符串

18:11.480 --> 18:13.480
如果说我要把圆码字符串得到

18:13.480 --> 18:14.480
怎么来得到呢

18:14.480 --> 18:16.480
楼的里面该咋写呢

18:16.480 --> 18:17.480
好好想一想

18:17.480 --> 18:18.480
该咋写

18:18.480 --> 18:19.480
你看啊

18:19.480 --> 18:20.480
这是一个模块化

18:20.480 --> 18:21.480
用require

18:21.480 --> 18:23.480
是不是得到这个东西

18:23.480 --> 18:25.480
来得到这个模块化的内容

18:25.480 --> 18:26.480
那么也就是说

18:26.480 --> 18:27.480
我这边

18:27.480 --> 18:29.480
如果说你把它当成介石代码

18:29.480 --> 18:30.480
刚才我们说了

18:30.480 --> 18:31.480
你只要把它当成介石代码

18:31.480 --> 18:32.480
是不是变成这个样子

18:34.480 --> 18:35.480
看一下

18:35.480 --> 18:37.480
把它变成这个样子

18:38.480 --> 18:39.480
没问题吧

18:39.480 --> 18:41.480
把它变成这个样子

18:41.480 --> 18:42.480
那么无非就是这个模块里面

18:42.480 --> 18:43.480
再导出一个呗

18:43.480 --> 18:44.480
是不是导出一个

18:44.480 --> 18:45.480
导出什么了

18:45.480 --> 18:46.480
是不是导出还是导出这个

18:46.480 --> 18:47.480
这个地方

18:47.480 --> 18:49.480
是不是还是导出这个地方

18:49.480 --> 18:51.480
因此我们把这句话

18:51.480 --> 18:53.480
把这句话直接加过去

18:53.480 --> 18:54.480
不就完了吗

18:54.480 --> 18:55.480
你看

18:56.480 --> 18:57.480
导出

18:57.480 --> 18:58.480
换一换

18:58.480 --> 18:59.480
export

18:59.480 --> 19:00.480
转一下1

19:00.480 --> 19:01.480
转1

19:02.480 --> 19:03.480
是不是导出就完事了

19:03.480 --> 19:04.480
对吧

19:04.480 --> 19:05.480
我这里呢把位拍个

19:05.480 --> 19:06.480
设置一下

19:06.480 --> 19:07.480
dev2

19:07.480 --> 19:08.480
这样子看得更加清楚一点

19:08.480 --> 19:09.480
dev2

19:09.480 --> 19:10.480
设置一下sauce map

19:12.480 --> 19:13.480
大家看得更加清楚一点

19:13.480 --> 19:14.480
好

19:14.480 --> 19:15.480
来 咱们来试一下

19:16.480 --> 19:17.480
这个东西就去掉

19:18.480 --> 19:22.460
来 运行

19:23.460 --> 19:24.460
成功运行了

19:24.460 --> 19:25.460
那么你看一下

19:25.460 --> 19:26.460
现在的媒体介石

19:26.460 --> 19:27.460
看得就很清楚了

19:27.460 --> 19:28.460
你看我们代码是啥

19:29.460 --> 19:30.460
就是我们这一块

19:30.460 --> 19:31.460
我们格式化一下

19:31.460 --> 19:32.460
你看一下

19:32.460 --> 19:33.460
它最终生成的代码是啥

19:33.460 --> 19:34.460
就是我们这个

19:34.460 --> 19:35.460
世界设置模块

19:35.460 --> 19:36.460
它代码就变成了这样子

19:36.460 --> 19:38.460
生成一个style元素

19:38.460 --> 19:39.460
然后呢

19:39.460 --> 19:40.460
这里

19:40.460 --> 19:41.460
这里

19:41.460 --> 19:42.460
然后给它设置一下

19:42.460 --> 19:43.460
这个东西

19:43.460 --> 19:44.460
然后把它加到

19:44.460 --> 19:45.460
头部里边

19:45.460 --> 19:46.460
然后导出这么一个东西

19:46.460 --> 19:47.460
对吧

19:47.460 --> 19:48.460
然后我们的入口模块

19:48.460 --> 19:49.460
就变成就是很简单的

19:49.460 --> 19:50.460
就是导入

19:50.460 --> 19:51.460
导入这个模块

19:51.460 --> 19:52.460
导入这个模块

19:52.460 --> 19:53.460
那么这个里面

19:53.460 --> 19:54.460
其实就是世界设置代码

19:54.460 --> 19:55.460
你不要去看什么后续迷

19:55.460 --> 19:56.460
就是世界设置代码

19:56.460 --> 19:58.460
那么世界设置代码

19:58.460 --> 19:59.460
导出的结果

19:59.460 --> 20:00.460
导出的结果

20:00.460 --> 20:01.460
是不是就是内容

20:01.460 --> 20:02.460
你看

20:02.460 --> 20:03.460
这里是不是就是内容

20:03.460 --> 20:04.460
对吧

20:04.460 --> 20:05.460
那么咱们呢

20:05.460 --> 20:06.460
这里输出

20:06.460 --> 20:07.460
输出内容

20:07.460 --> 20:08.460
那你看

20:08.460 --> 20:09.460
现在呢

20:09.460 --> 20:10.460
它的结果

20:10.460 --> 20:11.460
对不对

20:11.460 --> 20:12.460
这就是

20:12.460 --> 20:13.460
这就是这里的

20:13.460 --> 20:14.460
这种处理方式

20:14.460 --> 20:15.460
希望呢

20:15.460 --> 20:16.460
我通过这个例子

20:16.460 --> 20:17.460
能够让大家呢

20:17.460 --> 20:18.460
对这种

20:18.460 --> 20:19.460
楼准处理呢

20:19.460 --> 20:21.460
有更加深刻的理解

20:21.460 --> 20:22.460
它就是把一种代码

20:22.460 --> 20:23.460
转换的另一种代码格式

20:23.460 --> 20:24.460
对吧

20:24.460 --> 20:25.460
CSS可以

20:25.460 --> 20:26.460
那

20:26.460 --> 20:27.460
图片可不可以呢

20:27.460 --> 20:28.460
图片行不行呢

20:28.460 --> 20:29.460
那图片也可以啊

20:29.460 --> 20:31.460
一看这下一节课

20:31.460 --> 20:32.460
咱们来玩一玩图片

20:32.460 --> 20:33.460
看图片怎么去玩

20:33.460 --> 20:34.460
总之呢

20:34.460 --> 20:35.460
图片就是什么

20:35.460 --> 20:36.460
图片就是二进之内容

20:36.460 --> 20:37.460
对吧

20:37.460 --> 20:38.460
二进之内容

20:38.460 --> 20:39.460
我给你输出一段

20:39.460 --> 20:40.460
给你返回一段

20:40.460 --> 20:41.460
JS代码

20:41.460 --> 20:42.460
就完了

20:42.460 --> 20:43.460
就没了

20:43.460 --> 20:44.460
就这么简单

20:44.460 --> 20:45.460
就是

20:45.460 --> 20:46.460
就是在做的这个事

20:46.460 --> 20:47.460
你给我一种代码格式

20:47.460 --> 20:48.460
我给你返回另外一种代码格式

20:48.460 --> 20:49.460
我管你给我的是啥

20:49.460 --> 20:50.460
我通过一些规则

20:50.460 --> 20:51.460
具体情况具体分析

20:51.460 --> 20:52.460
比方说央视

20:52.460 --> 20:53.460
你给我的是央视代码

20:53.460 --> 20:54.460
OK

20:54.460 --> 20:55.460
我给你转换成一个

20:55.460 --> 20:56.460
JS代码格式

20:56.460 --> 20:57.460
返回

20:57.460 --> 20:58.460
那么就相当于是

20:58.460 --> 20:59.460
你可以这样理解

20:59.460 --> 21:00.460
就把这个文件内容改了

21:00.460 --> 21:01.460
改成了一个JS代码

21:01.460 --> 21:02.460
实际上有没有改改

21:02.460 --> 21:03.460
这个文件

21:03.460 --> 21:04.460
没有改这个文件

21:04.460 --> 21:05.460
另外一种代码格式

21:05.460 --> 21:06.460
是不错

21:06.460 --> 21:07.460
最终

21:07.460 --> 21:08.460
后边的后续的过程

21:08.460 --> 21:09.460
是完全一样的

21:09.460 --> 21:11.460
Webpack根本就不知道

21:11.460 --> 21:12.460
它之前怎么的

21:12.460 --> 21:13.460
中间是怎么变化的

21:13.460 --> 21:14.460
总之你给我的最终远代码

21:14.460 --> 21:15.460
我就进行抽象

21:15.460 --> 21:16.460
与法的分析

21:16.460 --> 21:17.460
又分析它的遗坛

21:17.460 --> 21:18.460
对吧

21:18.460 --> 21:19.460
又分析它的遗坛

21:19.460 --> 21:20.460
就完了

21:20.460 --> 21:21.460
OK

21:21.460 --> 21:22.460
那么这就是

21:22.460 --> 21:23.460
这几课

21:23.460 --> 21:24.460
咱们讲的处理样式

21:24.460 --> 21:25.460
其实这几课

21:25.460 --> 21:26.460
我不是说

21:26.460 --> 21:27.460
让大家能够

21:27.460 --> 21:28.460
去自行处理样式

21:28.460 --> 21:29.460
以后有一些第三方库

21:29.460 --> 21:30.460
它专门来做这个事情

21:30.460 --> 21:31.460
一些第三方的

21:31.460 --> 21:32.460
就是

21:32.460 --> 21:33.460
加载器

21:33.460 --> 21:34.460
专门来做这个事情

21:34.460 --> 21:35.460
我们以后就会学习

21:35.460 --> 21:36.460
在讲样式

21:36.460 --> 21:37.460
处理这个当节的时候

21:37.460 --> 21:38.460
就会学习

21:38.460 --> 21:39.460
只不过呢

21:39.460 --> 21:40.460
我通过这些课

21:40.460 --> 21:41.460
楼段来要进行

21:41.460 --> 21:43.460
一种深入的理解

21:43.460 --> 21:44.460
这个很关键

21:44.460 --> 21:45.460
OK

21:45.460 --> 21:46.460
这是关于这一块

