WEBVTT

00:00.690 --> 00:04.190
这些课咯 咱们来看一下另外一个方面的问题

00:04.190 --> 00:07.190
关于一些文件的处理

00:07.190 --> 00:10.690
怎么叫普通文件处理呢 就是这个文件呢

00:10.690 --> 00:14.690
它里边呢 也不是什么CSS代码 也不是GS代码

00:14.690 --> 00:18.190
就像一些图片啊 什么肢体文件啊 这些乱七八糟的文件啊

00:18.190 --> 00:20.690
那么这些文件呢 怎么来处理

00:20.690 --> 00:23.690
之前呢 而随后来看一下我们目前的安装啊

00:23.690 --> 00:28.690
安装的话 我安装了一些啊 就是这个什么 CleanWePackPlugging对吧

00:28.690 --> 00:31.690
这个东西是我们这就可要学的啊 这个东西我们以前学过的对吧

00:31.690 --> 00:35.690
有这个东西我们这就可要学 下面这三个东西我们学过的

00:35.690 --> 00:39.690
然后呢 我们配置文件 自己看一下吧 可以暂停视频看一下啊

00:39.690 --> 00:43.690
跟之前的配置一样 这些东西呢 你看我们每一节课都拿出来给大家看一下

00:43.690 --> 00:46.690
就是因为这些东西呢 都是我们常见的一些配置啊

00:46.690 --> 00:49.690
如果说你们以后 要用自己用WePack打件工程的话

00:49.690 --> 00:51.690
都会用到这些配置啊 所以给大家多看一下

00:51.690 --> 00:54.690
没问题吧 接下来咱们继续啊

00:54.690 --> 00:57.690
就我们之前呢 做了这么一件事 大家还记得吗

00:57.690 --> 01:02.690
复制静态资源这里 你看啊 这里呢 我们之前呢 有一些图片

01:02.690 --> 01:06.690
图片呢 在哪儿啊 我们要元风不动的复制到电视目录

01:06.690 --> 01:10.690
对吧 我们之前要做这么一件事 然后呢 这里有个页面啊

01:10.690 --> 01:13.690
一看页面中是不是直接引用这个文件 对吧 写死的

01:13.690 --> 01:18.690
它不会有任何变化啊 直接就形成静态页面的一部分

01:18.690 --> 01:21.690
但是有的时候呢 可能不是这么多情况

01:21.690 --> 01:25.690
比方说这个图片吧 有的时候可能是这么一种情况

01:25.690 --> 01:30.690
它不是在页面中写死的 它可能是GS根据情况

01:30.690 --> 01:33.690
往页面上添加的 它有可能是这么一种情况

01:33.690 --> 01:37.690
那么比方说啊 我们在src里边 给它新建个文件夹

01:37.690 --> 01:43.690
src 比方说我们通常呢 一些通过GS迁入的资源呢

01:43.690 --> 01:47.690
我们把它放到这个src目录 src里边 这是一种常用的做法

01:47.690 --> 01:50.690
然后我们把这个图片复制过来 这个复制过来

01:50.690 --> 01:53.690
随便找到一个图片吧 无所谓 OK

01:53.690 --> 01:56.690
你看啊 接下来就有意思了

01:56.690 --> 02:00.690
就是我们这个GS里边呢 有可能写出这么一种代码

02:00.690 --> 02:04.690
就是我们要判断一下 什么什么什么的情况下

02:04.690 --> 02:07.690
比方说我们这里有mass.redma

02:07.690 --> 02:11.690
小于0.5 比方说有一种情况 这么一种情况之下

02:11.690 --> 02:15.690
然后呢 我干嘛呢 我用require导入

02:15.690 --> 02:18.690
导入什么呢 导入一个ersets

02:18.690 --> 02:21.690
里边有什么呢 有这个webpack

02:21.690 --> 02:23.690
webpack.png

02:23.690 --> 02:26.690
导入进来

02:26.690 --> 02:29.690
然后呢 我们这里接受一下啊

02:29.690 --> 02:32.690
png嘛 接受一下

02:32.690 --> 02:35.690
导入进来了过后 如果说imass.redma小于0.5

02:35.690 --> 02:38.690
我们随便写一个条件吧 条件满足的时候

02:38.690 --> 02:41.690
然后我们用GS来添加一张图片

02:41.690 --> 02:43.690
像印面中添加一张图片

02:43.690 --> 02:45.690
因为这个图片不是写实的 懂我的意思吧

02:45.690 --> 02:47.690
那么这个时候呢 你这个图片还是不是

02:47.690 --> 02:49.690
适不适合在页面上直接使用

02:49.690 --> 02:53.690
它就不适合了 对吧 它要用GS动态来添加

02:53.690 --> 02:55.690
虽然说它也是一个静态资源

02:55.690 --> 02:58.690
但是呢 它要不要加这个 加多少个

02:58.690 --> 03:00.690
在什么位置加 在什么时候加

03:00.690 --> 03:03.690
可能要根据不同的情况 需要GS来控制

03:03.690 --> 03:05.690
它不是完全静态的

03:05.690 --> 03:08.690
那么这个时候呢 我就需要使用这样的代码

03:08.690 --> 03:11.690
其实我们之前处理过这样的问题 对吧

03:11.690 --> 03:13.690
你看啊 这样的代码是不是一定会爆错

03:13.690 --> 03:15.690
它写完

03:33.690 --> 03:35.690
好 你看一下这个代码

03:35.690 --> 03:38.690
我们创建一张一个图片动物元素

03:38.690 --> 03:40.690
介绍创建的

03:40.690 --> 03:43.690
然后呢 我们把src设置为什么呢

03:43.690 --> 03:48.260
设置为这个模块导入的结果 对吧

03:48.260 --> 03:50.260
设置为这个模块导入的结果

03:50.260 --> 03:52.260
我也派个可以把任何东西当成模块

03:52.260 --> 03:55.260
导入它 我们希望的是什么呢

03:55.260 --> 03:57.260
希望的是

03:58.260 --> 04:00.260
希望

04:01.260 --> 04:05.260
导入的模块结果

04:05.260 --> 04:09.260
是一个可用的资源路径

04:09.260 --> 04:11.260
我们希望的是

04:11.260 --> 04:14.260
导入的这个模块是一个可用的资源路径

04:14.260 --> 04:17.260
但是呢 它能不能符合我们的要求呢

04:17.260 --> 04:18.260
肯定不会

04:18.260 --> 04:21.260
因为这个模块我也派个会不会处理

04:21.260 --> 04:23.260
它会处理 它实际上会处理

04:23.260 --> 04:25.260
它怎么处理呢 就跟GS文件一样

04:25.260 --> 04:27.260
它把它读出来 弄暗码 弄暗码就弄暗码

04:27.260 --> 04:31.260
然后呢 进行抽象与法书分析

04:31.260 --> 04:32.260
一分析是不是爆错了

04:32.260 --> 04:34.260
它这个东西根本就不是GS代码

04:34.260 --> 04:35.260
还一分析出来就爆错了

04:35.260 --> 04:37.260
它要不要读 它肯定要读

04:37.260 --> 04:39.260
只不过呢 它分析不出来

04:39.260 --> 04:40.260
因此爆错了

04:40.260 --> 04:43.260
它这个不是一个有效的GS代码

04:43.260 --> 04:45.260
因此呢 这里

04:45.260 --> 04:47.260
这个时候呢 我们打包会遇到问题

04:47.260 --> 04:49.260
你看啊 我们打包

04:49.260 --> 04:51.260
用MPX VPEG

04:51.260 --> 04:55.140
打包是不是遇到问题的

04:55.140 --> 04:57.140
它说这个文件呢

04:57.140 --> 05:00.140
一读出来 它把它当成GS文件来读

05:00.140 --> 05:02.140
unexpected character

05:02.140 --> 05:04.140
这个弄暗码了 读出来

05:04.140 --> 05:06.140
不是读不出来 读出来没法分析

05:06.140 --> 05:08.140
所以说呢 这个地方是不是处理不了

05:08.140 --> 05:10.140
那么就遇到了这种场景

05:10.140 --> 05:13.140
就是有一个文件 它这边的代码呢

05:13.140 --> 05:15.140
为派给它处理不了

05:15.140 --> 05:17.140
或者说 它这处理的不是我们想要的结果

05:17.140 --> 05:19.140
那么我们希望呢 有另外一个东西

05:19.140 --> 05:21.140
对它代码进行处理

05:21.140 --> 05:23.140
那么请问 在这种场景下边

05:23.140 --> 05:27.140
用什么 用loader 还是用plugging

05:27.140 --> 05:29.140
学过的啊 不要忘记了

05:29.140 --> 05:31.140
原理的东西不能忘的

05:31.140 --> 05:33.140
应该用什么 这用loader 对吧

05:33.140 --> 05:35.140
loader就是专门来处理这个问题

05:35.140 --> 05:36.140
你给我一个元代吧

05:37.140 --> 05:40.140
对吧 那什么样的loader能处理这样的问题呢

05:40.140 --> 05:42.140
file loader

05:42.140 --> 05:44.140
file loader 它就在处理这样的问题的

05:44.140 --> 05:46.140
那么这个loader来干嘛用的呢

05:46.140 --> 05:48.140
我们可以先把那个打开

05:48.140 --> 05:52.140
这个npm 打开

05:52.140 --> 05:56.140
大家要学会这个查约方式file loader

05:56.140 --> 05:57.140
我只需要告诉你名字

05:57.140 --> 05:59.140
剩下的东西 你可以自己去查

06:03.140 --> 06:05.140
你看啊 它怎么说的

06:05.140 --> 06:07.140
它说它能够做什么事情呢

06:07.140 --> 06:08.140
它能够把import

06:08.140 --> 06:10.140
就是s6这种导入方式

06:10.140 --> 06:12.140
或者是用require的这种导入方式

06:12.140 --> 06:14.140
当我们导入一个文件的时候呢

06:14.140 --> 06:16.140
它能够把它变成一个url

06:16.140 --> 06:18.140
变成一个url地址

06:18.140 --> 06:19.140
就是它能够把导入的结构

06:19.140 --> 06:21.140
变成一个url地址

06:21.140 --> 06:24.140
然后呢 并且生成一个文件

06:24.140 --> 06:26.140
到输出目录里边去

06:26.140 --> 06:28.140
它能够做这么一件事

06:28.140 --> 06:29.140
也就是说

06:29.140 --> 06:31.140
这个file loader我们安装过后

06:31.140 --> 06:34.140
是不是把这些模块交给它就完事了

06:35.140 --> 06:38.140
你们只要知道loader它能做什么

06:38.140 --> 06:40.140
你们就应该要知道

06:40.140 --> 06:42.140
它要怎么去用

06:42.140 --> 06:44.140
就不用看文道了

06:44.140 --> 06:46.140
你就要知道它怎么去用

06:46.140 --> 06:47.140
就这么简单

06:47.140 --> 06:48.140
因为loader它的用法呢

06:48.140 --> 06:49.140
是统一的

06:49.140 --> 06:52.140
并不说每一个loader有每一个loader的用法

06:52.140 --> 06:53.140
那怎么来用呢

06:53.140 --> 06:55.140
你看着啊

06:55.140 --> 06:56.140
我们这里安装了

06:56.140 --> 06:57.140
已经安装好了

06:57.140 --> 06:58.140
file loader

06:58.140 --> 06:59.140
我们看一下

06:59.140 --> 07:00.140
file loader已经安装好了

07:00.140 --> 07:01.140
那么我们怎么来用

07:01.140 --> 07:03.140
你想一想回忆一下之前的

07:03.140 --> 07:05.140
是不是之前在这里边写的

07:05.140 --> 07:06.140
这里边shop怎么配置

07:06.140 --> 07:08.140
是不是要配置一个marge

07:08.140 --> 07:09.140
对不对

07:09.140 --> 07:10.140
shop要配置这个东西

07:10.140 --> 07:12.140
对模块进行配置

07:12.140 --> 07:14.140
模块里边是有很多规则

07:14.140 --> 07:15.140
很多规则

07:15.140 --> 07:17.140
每一个规则就是告诉它

07:17.140 --> 07:18.140
遇到什么样的文件的时候

07:18.140 --> 07:20.140
我要经过哪些loader

07:20.140 --> 07:22.140
每一个就是个规则

07:22.140 --> 07:25.140
下面我们是不是要用到file loader

07:25.140 --> 07:27.140
不用倒入

07:27.140 --> 07:30.140
那么这里比方说我们怎么配置呢

07:30.140 --> 07:31.140
test

07:31.140 --> 07:32.140
配置一个什么

07:32.140 --> 07:33.140
证则表达是

07:33.140 --> 07:35.140
当遇到什么样的文件的时候

07:35.140 --> 07:36.140
什么文件呢

07:36.140 --> 07:39.140
遇到一个以后追名

07:39.140 --> 07:41.140
png结尾的文件

07:41.140 --> 07:43.140
遇到这样的文件的时候

07:43.140 --> 07:45.140
或者说遇到什么

07:45.140 --> 07:46.140
还可以多写几个

07:46.140 --> 07:48.140
比如说png

07:48.140 --> 07:50.140
或者是gif

07:50.140 --> 07:52.140
或者是

07:52.140 --> 07:53.140
gif

07:53.140 --> 07:55.140
或者是什么

07:55.140 --> 07:56.140
jpg

07:56.140 --> 07:57.140
对不对

07:57.140 --> 07:58.140
等等等等

07:58.140 --> 07:59.140
反正那种图片文件

07:59.140 --> 08:00.140
结尾的

08:00.140 --> 08:02.140
那么像这种文件呢

08:02.140 --> 08:03.140
我们希望

08:03.140 --> 08:04.140
vpeg他自己读出来

08:04.140 --> 08:05.140
还把当成gif带嘛

08:05.140 --> 08:06.140
他肯定不是gif带嘛

08:06.140 --> 08:07.140
要爆出

08:07.140 --> 08:10.140
因此我让他先经过一个loader来处理

08:10.140 --> 08:12.140
然后再交给vpeg来分析

08:12.140 --> 08:13.140
经过什么loader呢

08:13.140 --> 08:14.140
那么后面是不是

08:14.140 --> 08:15.140
用什么

08:15.140 --> 08:16.140
用那个use

08:16.140 --> 08:17.140
对吧

08:17.140 --> 08:18.140
经过哪些loader呢

08:18.140 --> 08:19.140
经过loader

08:19.140 --> 08:20.140
只有一个

08:20.140 --> 08:21.140
目前只有一个

08:21.140 --> 08:22.140
什么loader

08:22.140 --> 08:23.140
什么loader

08:23.140 --> 08:26.140
经过loader就是一个叫做file loader

08:26.140 --> 08:27.140
那么这里的制服算

08:27.140 --> 08:28.140
是不是loader的位置

08:28.140 --> 08:29.140
那么这个制服算

08:29.140 --> 08:30.140
会交给谁

08:30.140 --> 08:31.140
交给vpeg来处理

08:31.140 --> 08:33.140
vpeg他就会直接用require

08:33.140 --> 08:34.140
你可以这样想象

08:34.140 --> 08:35.140
他直接用require

08:35.140 --> 08:36.140
包含进来

08:36.140 --> 08:37.140
他就能包含进来

08:37.140 --> 08:38.140
对吧

08:38.140 --> 08:39.140
因为他本身就安装在loader

08:39.140 --> 08:40.140
marchus目录下面

08:40.140 --> 08:41.140
因此这样子

08:41.140 --> 08:42.140
是不是就完了

08:42.140 --> 08:43.140
就完了

08:43.140 --> 08:44.140
就完了

08:44.140 --> 08:45.140
咱们来看一下

08:45.140 --> 08:47.140
他生成出来的是什么玩意

08:47.140 --> 08:48.140
接下来我们再来看

08:48.140 --> 08:49.140
再打包

08:49.140 --> 08:50.140
一看他会不会爆出

08:50.140 --> 08:51.140
loader的用法

08:51.140 --> 08:52.140
这一块一看

08:52.140 --> 08:53.140
这一块的配置

08:53.140 --> 08:54.140
跟什么具体的loader

08:54.140 --> 08:55.140
也没有关系

08:55.140 --> 08:56.140
没有关系

08:56.140 --> 08:57.140
我们只要他知道

08:57.140 --> 08:59.140
还能够处理文件的

08:59.140 --> 09:01.140
还会把文件的这种

09:01.140 --> 09:02.140
导入语军的变

09:02.140 --> 09:03.140
导入的结果

09:03.140 --> 09:04.140
变成一个url地址

09:04.140 --> 09:05.140
文件的地址

09:05.140 --> 09:06.140
并且他同时

09:06.140 --> 09:07.140
把你导入的文件

09:07.140 --> 09:08.140
生成到输出目录

09:08.140 --> 09:10.140
他就在做这么件事了

09:10.140 --> 09:11.140
那么我们来运行

09:11.140 --> 09:13.460
看一下

09:13.460 --> 09:15.770
打包

09:15.770 --> 09:16.770
你看

09:16.770 --> 09:17.770
是不是没爆错了

09:17.770 --> 09:18.770
并且我们的输出

09:18.770 --> 09:19.770
结果里面

09:19.770 --> 09:20.770
你看一下是不是多了一张图片

09:21.770 --> 09:22.770
是不是多了一张图片

09:22.770 --> 09:23.770
这就是我们的图片

09:23.770 --> 09:24.770
那么这种图片

09:24.770 --> 09:25.770
是谁搞定的

09:25.770 --> 09:28.770
不就是file loader

09:28.770 --> 09:29.770
搞定的吗

09:29.770 --> 09:30.770
接下来我们来看一下

09:30.770 --> 09:31.770
最终形成的

09:32.770 --> 09:33.770
介石

09:33.770 --> 09:35.770
我们要看最终形成的介石

09:35.770 --> 09:36.770
你看他形成的介石代码

09:36.770 --> 09:37.770
是什么

09:37.770 --> 09:38.770
因为我们loader的作用

09:38.770 --> 09:39.770
是不是把那个

09:39.770 --> 09:41.770
它的原代码进行转换

09:41.770 --> 09:42.770
转换之后再交给vpeg

09:42.770 --> 09:43.770
那么我们看一下

09:43.770 --> 09:44.770
它转换过后

09:44.770 --> 09:45.770
它就形成一个模块

09:45.770 --> 09:47.770
src2cxvpegpng

09:47.770 --> 09:48.770
对吧

09:48.770 --> 09:49.770
它是个模块

09:49.770 --> 09:50.770
它这个模块里面

09:50.770 --> 09:51.770
有什么代码的代码

09:51.770 --> 09:52.770
你这里边

09:52.770 --> 09:53.770
可能看上去

09:53.770 --> 09:54.770
可能花得胡骚的

09:54.770 --> 09:55.770
有些这个东西

09:55.770 --> 09:57.770
是为了支持那个

09:58.770 --> 09:59.770
为了支持

09:59.770 --> 10:02.770
那个就是es6的导出

10:02.770 --> 10:04.770
为了支持es6的导出

10:04.770 --> 10:05.770
所以说

10:05.770 --> 10:06.770
你这里

10:06.770 --> 10:08.770
可能看的不是很清楚

10:08.770 --> 10:09.770
没关系

10:09.770 --> 10:10.770
我们以后再说

10:10.770 --> 10:11.770
总之你看

10:11.770 --> 10:13.770
它导出了一个东西

10:13.770 --> 10:14.770
它这里在导出

10:14.770 --> 10:16.770
是使用es6的方式在导出的

10:16.770 --> 10:18.770
它是使用es6的方式导出的

10:18.770 --> 10:19.770
它导出了一个东西

10:19.770 --> 10:20.770
导出了什么东西呢

10:20.770 --> 10:21.770
前面拼接这个字乌串

10:21.770 --> 10:22.770
这个东西

10:22.770 --> 10:23.770
我们之后再讲

10:23.770 --> 10:24.770
现在不用管它

10:24.770 --> 10:25.770
就当它不存在

10:25.770 --> 10:26.770
其实这个东西

10:26.770 --> 10:28.770
你看这个require

10:28.770 --> 10:29.770
为派个require

10:29.770 --> 10:30.770
P是什么东西

10:30.770 --> 10:31.770
是不是空字乌串

10:31.770 --> 10:32.770
对吧

10:32.770 --> 10:33.770
不存在的

10:33.770 --> 10:34.770
你不用管它

10:34.770 --> 10:35.770
咱们接着往后看

10:35.770 --> 10:39.530
你可以认为

10:39.530 --> 10:41.530
它导出的是什么东西呢

10:41.530 --> 10:42.530
导出的就是个字乌串

10:43.530 --> 10:44.530
另外这个意思吧

10:44.530 --> 10:45.530
这个模块里面的代码

10:45.530 --> 10:46.530
被它转换

10:46.530 --> 10:47.530
一转换

10:47.530 --> 10:48.530
转换成什么结果呢

10:48.530 --> 10:49.530
导

10:49.530 --> 10:50.530
转换成这么一个字乌串

10:50.530 --> 10:51.530
然后给它简化一下

10:51.530 --> 10:52.530
它的代码

10:52.530 --> 10:53.530
它会把它变成什么样子

10:53.530 --> 10:54.530
它做的事情

10:54.530 --> 10:55.530
特别简单

10:55.530 --> 10:56.530
你不是require吗

10:56.530 --> 10:57.530
这个东西是不是

10:57.530 --> 10:58.530
会交给loader

10:58.530 --> 10:59.530
它做了这么一件处理

11:01.530 --> 11:02.530
你把这个东西

11:02.530 --> 11:03.530
这是你的模块

11:03.530 --> 11:04.530
它发现

11:04.530 --> 11:05.530
就是它的loader里面

11:05.530 --> 11:09.160
这个函数loader里面

11:09.160 --> 11:11.160
它把原来代码source

11:11.160 --> 11:12.160
原来代码

11:12.160 --> 11:13.160
原来代码是不是

11:13.160 --> 11:14.160
我们的文件内容

11:14.160 --> 11:15.160
对不对

11:15.160 --> 11:16.160
是不是一个buffer

11:16.160 --> 11:17.160
文件内容

11:17.160 --> 11:18.160
source

11:18.160 --> 11:21.160
就是文件内容

11:21.160 --> 11:23.160
或者我们这里的就是图片内容

11:23.160 --> 11:24.160
对吧

11:24.160 --> 11:25.160
图片内容

11:25.160 --> 11:26.160
是一个二镜子的buffer

11:26.160 --> 11:27.160
干嘛呢

11:27.160 --> 11:29.160
它先做第一件事

11:29.160 --> 11:30.160
第一件事

11:30.160 --> 11:32.160
将buffer

11:32.160 --> 11:34.160
就是文件内容

11:34.160 --> 11:37.160
生成一个具有

11:37.160 --> 11:41.160
相同文件内容的文件

11:41.160 --> 11:43.160
到输出目录

11:43.160 --> 11:45.160
这个很容易吧

11:45.160 --> 11:46.160
我们之前还写过

11:46.160 --> 11:47.160
我记得

11:47.160 --> 11:48.160
应该写过吧

11:48.160 --> 11:49.160
之前我们讲那个

11:49.160 --> 11:50.160
对

11:50.160 --> 11:51.160
图里图片

11:51.160 --> 11:52.160
我们自己玩过的

11:52.160 --> 11:53.160
玩过的

11:53.160 --> 11:54.160
就没什么好说的

11:54.160 --> 11:55.160
你看

11:55.160 --> 11:56.160
我们这里用了什么

11:56.160 --> 11:58.160
用了这个叫做

12:00.160 --> 12:01.160
ploture

12:01.160 --> 12:03.160
在这

12:03.160 --> 12:04.160
ploture

12:04.160 --> 12:05.160
amats file对吧

12:05.160 --> 12:06.160
amats file

12:06.160 --> 12:07.160
那么这里生成一个文件

12:07.160 --> 12:08.160
到输出目录

12:08.160 --> 12:09.160
你看

12:09.160 --> 12:10.160
就是生成一个文件

12:10.160 --> 12:11.160
文件内容是咋就是它

12:11.160 --> 12:12.160
就特别简单

12:12.160 --> 12:13.160
生成一个

12:13.160 --> 12:14.160
相同的文件内容

12:14.160 --> 12:15.160
到输出目录

12:15.160 --> 12:17.160
第二步

12:17.160 --> 12:19.160
生成

12:19.160 --> 12:21.160
就是返回一段代

12:21.160 --> 12:22.160
返回怎么代

12:22.160 --> 12:23.160
返回正统代

12:23.160 --> 12:24.160
marge

12:24.160 --> 12:25.160
我们就简写

12:25.160 --> 12:26.160
它实际上不是这样的

12:26.160 --> 12:29.160
它是用es6的那种模式

12:29.160 --> 12:30.160
返回的

12:30.160 --> 12:34.160
它实际上是用这种方式来返回的

12:34.160 --> 12:35.160
export

12:35.160 --> 12:36.160
defort

12:36.160 --> 12:38.160
它实际上用这种方式来返回的

12:38.160 --> 12:39.160
那么经过wpack一转换

12:39.160 --> 12:40.160
转换就转换出来

12:40.160 --> 12:42.160
就变成这个样子了

12:42.160 --> 12:43.160
wpack一转换就转换出来

12:43.160 --> 12:45.160
就变成这个样子了

12:45.160 --> 12:46.160
它用export

12:46.160 --> 12:47.160
defort

12:47.160 --> 12:48.160
导出

12:48.160 --> 12:49.160
export

12:49.160 --> 12:50.160
defort

12:50.160 --> 12:51.160
然后返回什么呢

12:51.160 --> 12:53.160
返回文件迷

12:53.160 --> 12:54.160
对吧

12:54.160 --> 12:55.160
那个输出目的文件迷

12:55.160 --> 12:56.160
是自己规定的

12:56.160 --> 12:57.160
自己规定的文件迷

12:57.160 --> 12:58.160
那自然文件迷就知道

12:58.160 --> 13:00.160
它就做这么简单的一件事

13:00.160 --> 13:01.160
其他啥都没做

13:01.160 --> 13:02.160
我告诉你

13:02.160 --> 13:03.160
它真的啥都没做

13:03.160 --> 13:04.160
它就做这么一件事

13:04.160 --> 13:07.160
这就是finalloader做的事情

13:07.160 --> 13:08.160
那么这样子一来

13:08.160 --> 13:11.160
它就把图片的二镜子内容

13:11.160 --> 13:13.160
是不是变成了一个合法的

13:13.160 --> 13:15.160
GS代码的内容

13:15.160 --> 13:18.160
这个代码在交给wpack一转换

13:18.160 --> 13:20.160
wpack把它进行抽象愚化数据分析

13:20.160 --> 13:22.160
然后替换掉一些特殊的导出语句

13:22.160 --> 13:25.160
一转换 转换出来就变成这个样子了

13:25.160 --> 13:26.160
就变成这个样子了

13:26.160 --> 13:27.160
所以它做的事情特别简单

13:27.160 --> 13:29.160
因此你这边导入的时候

13:29.160 --> 13:30.160
导入的是什么

13:30.160 --> 13:31.160
你看它导出的是什么

13:31.160 --> 13:33.160
export文件迷

13:33.160 --> 13:34.160
是不是一个文件迷

13:34.160 --> 13:35.160
或者是就是

13:35.160 --> 13:37.160
其实就是访问的url地址

13:37.160 --> 13:39.160
导出的是一个文件迷

13:39.160 --> 13:41.160
那么这样子

13:41.160 --> 13:42.160
导出完了过后

13:42.160 --> 13:43.160
这里一导入

13:43.160 --> 13:45.160
是不是就变成一个文件迷

13:45.160 --> 13:47.160
就这么简单

13:47.160 --> 13:48.160
接下来我们来看一下

13:48.160 --> 13:50.160
我们这里输出一下这个png

13:50.160 --> 13:51.160
然后我们再看一下

13:51.160 --> 13:53.160
我们能实现这个页面上的效果呢

13:53.160 --> 13:55.160
我们这里的启动开发服务器

13:55.160 --> 13:56.160
看一下

13:56.160 --> 13:58.160
npx

13:58.160 --> 13:59.160
webpack

13:59.160 --> 14:02.790
web

14:02.790 --> 14:03.790
npx

14:03.790 --> 14:04.790
npm

14:04.790 --> 14:05.790
wrongdev

14:05.790 --> 14:06.790
我们之前配置好的

14:06.790 --> 14:08.790
这里配置好的

14:08.790 --> 14:10.790
webpack dev server

14:10.790 --> 14:11.790
好看一下

14:11.790 --> 14:13.790
图片有没有生成出来

14:13.790 --> 14:14.790
图片没有生成出来

14:14.790 --> 14:15.790
没有生成出来

14:15.790 --> 14:16.790
图片跑哪去了呢

14:16.790 --> 14:18.790
这里没刷新对吧

14:18.790 --> 14:20.790
因为我又写了riden的

14:20.790 --> 14:22.790
再刷新

14:22.790 --> 14:26.230
我们的eme级元素呢

14:26.230 --> 14:28.230
这么导门

14:28.230 --> 14:30.230
eme级元素

14:30.230 --> 14:31.230
等一下

14:31.230 --> 14:33.230
再刷新

14:33.230 --> 14:36.230
我们的eme级元素呢

14:36.230 --> 14:41.230
小于0.8

14:41.230 --> 14:43.230
保存从来

14:43.230 --> 14:45.230
刷新

14:45.230 --> 14:48.230
eme级元素呢

14:48.230 --> 14:50.230
eme级

14:50.230 --> 14:52.230
src.png

14:52.230 --> 14:54.230
body.apprenticell的eme级

14:54.230 --> 14:55.230
我们先不管它的eme级元素吧

14:55.230 --> 14:56.230
咱们来看一下

14:56.230 --> 14:57.230
有可能它的eme级元素

14:57.230 --> 14:58.230
src路径设置有问题

14:58.230 --> 14:59.230
它就不给你显示了

14:59.230 --> 15:00.230
有可能

15:00.230 --> 15:01.230
咱们先看这儿

15:01.230 --> 15:02.230
先看这儿

15:02.230 --> 15:03.230
这里我们看一下

15:03.230 --> 15:05.230
这个png返回的导出的

15:05.230 --> 15:07.230
输出的是什么东西

15:07.230 --> 15:09.230
输出的是这个玩意

15:09.230 --> 15:11.230
输出的是这个玩意

15:11.230 --> 15:13.230
大家还记得吗

15:13.230 --> 15:15.230
还记不记得

15:15.230 --> 15:17.230
就是我在很早很早的时候

15:17.230 --> 15:19.230
讲的什么呢

15:19.230 --> 15:22.230
讲的那个模块化兼容性这一块

15:22.230 --> 15:24.230
就讲了webpack

15:24.230 --> 15:28.230
它支持common.js也支持s6

15:28.230 --> 15:29.230
那么这里专门讲了

15:29.230 --> 15:31.230
s6和common.js之间的

15:31.230 --> 15:33.230
模块化交互

15:33.230 --> 15:34.230
就是说这个东西

15:34.230 --> 15:35.230
这个file load

15:35.230 --> 15:37.230
还可以导出的是这个玩意

15:37.230 --> 15:38.230
export default

15:38.230 --> 15:40.230
导出的是这种模式

15:40.230 --> 15:43.230
而不是common.js的那种模式

15:43.230 --> 15:44.230
它导出的是这种模式

15:44.230 --> 15:46.230
当你用common.js导入的时候

15:46.230 --> 15:48.230
你是不是得使用default

15:48.230 --> 15:50.230
才能获取到它默认导出的结果

15:50.230 --> 15:51.230
对吧

15:51.230 --> 15:52.230
你只有使用default

15:52.230 --> 15:53.230
才能获取到默认导出的结果

15:53.230 --> 15:55.230
你看现在是否获取到了

15:55.230 --> 15:57.230
因此导入过它就是一个字母串

15:57.230 --> 15:58.230
那么这样子

15:58.230 --> 16:00.230
也img里边使用srcpng

16:00.230 --> 16:03.230
这里写错了

16:03.230 --> 16:05.230
那么这样子是不是就可以了

16:05.230 --> 16:06.230
你看一看

16:06.230 --> 16:07.230
诶 是不是进来了

16:07.230 --> 16:09.230
对吧 偷偏就进来了

16:09.230 --> 16:10.230
这就是面对这种情况

16:10.230 --> 16:12.230
使用file loader

16:12.230 --> 16:13.230
那么file loader

16:13.230 --> 16:15.230
它有没有什么别的东西可以配置呢

16:15.230 --> 16:16.230
你看这个文件名

16:16.230 --> 16:18.230
这个文件名是

16:18.230 --> 16:20.230
诶 我们这里停止

16:20.230 --> 16:21.230
停止

16:21.230 --> 16:22.230
你看这个文件名

16:22.230 --> 16:25.230
刚才我们看到的是一个

16:25.230 --> 16:27.230
很长的一串文件名

16:27.230 --> 16:30.230
你看 是不是很长的文件名

16:30.230 --> 16:31.230
那么这个文件名能不能配置呢

16:31.230 --> 16:32.230
是可以配置的

16:32.230 --> 16:34.230
在哪里配置呢

16:34.230 --> 16:36.230
肯定是在插件里边配置

16:36.230 --> 16:37.230
对吧

16:37.230 --> 16:38.230
配置的方式

16:38.230 --> 16:39.230
就是我要往插件里边喘参数

16:39.230 --> 16:41.230
那么之前的知识是不是用起来了

16:41.230 --> 16:42.230
怎么喘参数

16:42.230 --> 16:43.230
所以一有两种方式

16:43.230 --> 16:45.230
第一种方式是作为这种

16:45.230 --> 16:47.230
地子栏参数给它传进去

16:47.230 --> 16:48.230
第二种方式就是什么呢

16:48.230 --> 16:50.230
就是把这个插件写成个对象

16:50.230 --> 16:52.230
诶 写成个对象

16:52.230 --> 16:53.230
就是loader

16:53.230 --> 16:55.230
插件的名字叫这个

16:55.230 --> 16:57.230
然后options

16:57.230 --> 16:58.230
它的参数有哪些

16:58.230 --> 16:59.230
对吧

16:59.230 --> 17:00.230
当然这个参数到底是对象

17:00.230 --> 17:01.230
还是一个数字

17:01.230 --> 17:02.230
还是个字母串

17:02.230 --> 17:03.230
那就看具体的插件它要什么

17:03.230 --> 17:04.230
那么一般来说

17:04.230 --> 17:05.230
插件它配置

17:05.230 --> 17:07.230
都一般都是个对象

17:07.230 --> 17:08.230
那么options里边

17:08.230 --> 17:09.230
传啥呢

17:09.230 --> 17:11.230
传啥呢

17:11.230 --> 17:12.230
这里这里是数组

17:12.230 --> 17:14.230
表示可以有多个插件

17:14.230 --> 17:15.230
那么这些传啥呢

17:15.230 --> 17:17.230
那么就是这个时候才要看文档

17:17.230 --> 17:19.230
就像这个插件里边的配置

17:19.230 --> 17:20.230
才需要去看文档

17:20.230 --> 17:21.230
那么看一下文档吧

17:21.230 --> 17:23.230
文档里边说的其实

17:23.230 --> 17:24.230
它也没什么东西好传的

17:24.230 --> 17:26.230
然后它说有个name

17:26.230 --> 17:28.230
name表示文件的名字

17:28.230 --> 17:29.230
你可以配置的

17:29.230 --> 17:30.230
文件的名字

17:30.230 --> 17:31.230
配置的话

17:31.230 --> 17:32.230
一般来说的话

17:32.230 --> 17:34.230
这里要配置一个动态名字

17:34.230 --> 17:35.230
不要配置一个写实的名字

17:35.230 --> 17:36.230
比方说

17:36.230 --> 17:38.230
随便配置个写实的名字不好

17:38.230 --> 17:39.230
为什么不好

17:39.230 --> 17:40.230
因为loader

17:40.230 --> 17:42.230
是不是要处理所有的这种依赖

17:42.230 --> 17:43.230
比方说你的文件

17:43.230 --> 17:44.230
也代码里边

17:44.230 --> 17:46.230
可能依赖多个png

17:46.230 --> 17:47.230
那么它每一个png

17:47.230 --> 17:48.230
它就会生成它相同的名字

17:48.230 --> 17:49.230
这样子的不太好

17:49.230 --> 17:51.230
最好使用一个动态的名字

17:51.230 --> 17:53.230
那么它支持的是

17:53.230 --> 17:54.230
使用这种模式

17:54.230 --> 17:56.230
这种模式来生成一个名字

17:56.230 --> 17:57.230
这里我看一下

17:57.230 --> 17:58.230
看一下就明白了

17:58.230 --> 17:59.230
比方说

17:59.230 --> 18:02.230
它的名字

18:02.230 --> 18:03.230
那么这里呢

18:03.230 --> 18:05.230
我们一般来说

18:05.230 --> 18:07.230
可以用原来的文件名

18:07.230 --> 18:08.230
原来的文件名

18:08.230 --> 18:09.230
就是name

18:09.230 --> 18:11.230
这是原来的文件名

18:11.230 --> 18:12.230
然后呢

18:12.230 --> 18:13.230
后边呢

18:13.230 --> 18:14.230
我们可以跟上一个

18:14.230 --> 18:15.230
跟上一个del

18:15.230 --> 18:16.230
esd

18:16.230 --> 18:17.230
esd表示什么

18:17.230 --> 18:19.230
原来的文件的扩展名

18:19.230 --> 18:20.230
原来的是png

18:20.230 --> 18:21.230
它生成出来的文件就是png

18:21.230 --> 18:22.230
原来是jpg

18:22.230 --> 18:24.230
生成出来的文件就是jpg

18:24.230 --> 18:25.230
原来的文件名是啥

18:25.230 --> 18:26.230
原来的

18:26.230 --> 18:27.230
这个东西是啥

18:27.230 --> 18:28.230
对吧

18:28.230 --> 18:29.230
好 保存

18:29.230 --> 18:30.230
然后再来看一下

18:30.230 --> 18:31.230
打包

18:31.230 --> 18:33.230
当我们要分析它的结果的时候

18:33.230 --> 18:34.230
我们就要用npx

18:34.230 --> 18:36.230
vpack来打包了

18:36.230 --> 18:39.060
好

18:39.060 --> 18:40.060
看

18:40.060 --> 18:41.060
那么现在你看

18:41.060 --> 18:42.060
是不是同样的文件名

18:42.060 --> 18:43.060
当然呢

18:43.060 --> 18:44.060
js也是一样

18:44.060 --> 18:46.060
js它肯定也是有对应的

18:46.060 --> 18:48.060
js

18:48.060 --> 18:50.060
你看

18:50.060 --> 18:51.060
好像

18:51.060 --> 18:52.060
在这

18:52.060 --> 18:54.060
导出

18:54.060 --> 18:55.060
好像

18:55.060 --> 18:56.060
导出是不是

18:56.060 --> 18:57.060
vpack.png

18:57.060 --> 18:58.060
对吧

18:58.060 --> 19:00.060
你给它设置一下文件名的规则

19:00.060 --> 19:01.060
好 那么这里呢

19:01.060 --> 19:02.060
其实

19:02.060 --> 19:03.060
这里

19:03.060 --> 19:05.060
我们也可以使用那个

19:05.060 --> 19:06.060
因为你直接生成

19:06.060 --> 19:07.060
这个文件名的话

19:07.060 --> 19:09.060
有可能的会重名

19:09.060 --> 19:11.060
有没有可能会重名

19:11.060 --> 19:12.060
有没有可能会重名

19:12.060 --> 19:13.060
有可能

19:13.060 --> 19:14.060
比方说这个rcs里边

19:14.060 --> 19:16.060
有一些纸文件夹

19:16.060 --> 19:18.060
纸文件夹里边有一个不同的图片

19:18.060 --> 19:20.060
但是它名字一样的

19:20.060 --> 19:21.060
但是它打包出来

19:21.060 --> 19:22.060
是不是在同一个目录下面

19:22.060 --> 19:23.060
对吧

19:23.060 --> 19:25.060
打包出来是在同一个目录下面

19:25.060 --> 19:26.060
因此它会导致

19:26.060 --> 19:27.060
文件重名

19:27.060 --> 19:28.060
虽然如果说

19:28.060 --> 19:29.060
假如说

19:29.060 --> 19:30.060
这里是不同的文件

19:30.060 --> 19:31.060
但是文件名是一样的

19:31.060 --> 19:32.060
所以有可能会导致重名

19:32.060 --> 19:33.060
这样子也不好

19:33.060 --> 19:35.060
另外一个问题呢

19:35.060 --> 19:37.060
就是关于缓存的问题

19:37.060 --> 19:38.060
关于缓存的问题

19:38.060 --> 19:40.060
如果说你这个图片

19:40.060 --> 19:41.060
打包的时候

19:41.060 --> 19:43.060
就是在开发过程中

19:43.060 --> 19:44.060
这个图片

19:44.060 --> 19:45.060
想换一张图片

19:45.060 --> 19:46.060
但是文件名保持一样

19:46.060 --> 19:48.060
想换一张图片

19:48.060 --> 19:49.060
那么在打包出来

19:49.060 --> 19:50.060
也是一样的名字

19:50.060 --> 19:51.060
那么打包出来

19:51.060 --> 19:53.060
是要在运行缓运动运行的

19:53.060 --> 19:54.060
那么页面上引用

19:54.060 --> 19:55.060
发现是同样的文件

19:55.060 --> 19:56.060
它可能就有缓存

19:56.060 --> 19:58.060
就不会重新去下载新的图片

19:58.060 --> 19:59.060
那么这样子的

19:59.060 --> 20:01.060
也要规避缓存的问题

20:01.060 --> 20:02.060
因此我们文件名里边

20:02.060 --> 20:04.060
通常的还是要加上一个

20:04.060 --> 20:05.060
哈希纸

20:05.060 --> 20:06.060
这里直接用哈希

20:06.060 --> 20:07.060
但是你要注意

20:07.060 --> 20:09.060
这里的哈希

20:09.060 --> 20:10.060
它有特别说明

20:10.060 --> 20:11.060
关于这个哈希

20:11.060 --> 20:12.060
看下面

20:12.060 --> 20:15.140
看下面

20:15.140 --> 20:17.140
它这里有很多站位符

20:17.140 --> 20:18.140
就是我们平时哪用的这些

20:18.140 --> 20:20.140
它默认的哈希是什么呢

20:20.140 --> 20:22.140
指的是这个内容的

20:22.140 --> 20:24.140
文件内容的哈希

20:24.140 --> 20:26.140
指的是你导致了

20:26.140 --> 20:27.140
那个对应的文件

20:27.140 --> 20:28.140
比如这个文件

20:28.140 --> 20:29.140
它会生成一个文件

20:29.140 --> 20:30.140
对吧

20:30.140 --> 20:31.140
这个文件它会生成一个文件

20:31.140 --> 20:33.140
那么这个文件的内容的哈希

20:33.140 --> 20:34.140
它就不是我们

20:34.140 --> 20:35.140
整个所有资源的哈希

20:35.140 --> 20:36.140
两码事

20:36.140 --> 20:37.140
你一定要搞清楚

20:37.140 --> 20:38.140
这是两码事

20:38.140 --> 20:39.140
那为什么呢

20:39.140 --> 20:40.140
为什么说两码事呢

20:40.140 --> 20:41.140
有些同学

20:41.140 --> 20:43.140
脑袋一定要非常清楚

20:43.140 --> 20:45.140
你写到哪来了

20:45.140 --> 20:47.140
这个玩意儿是交给谁的

20:47.140 --> 20:48.140
这个玩意儿

20:48.140 --> 20:49.140
是交给插件的

20:49.140 --> 20:50.140
还是交给这个

20:50.140 --> 20:51.140
交给这个loader的

20:51.140 --> 20:53.140
还是交给webpack的

20:53.140 --> 20:55.140
是不是交给loader的

20:55.140 --> 20:56.140
对吧

20:56.140 --> 20:57.140
这个loader

20:57.140 --> 20:58.140
它说这里面是啥

20:58.140 --> 20:59.140
那就是啥

20:59.140 --> 21:00.140
跟webpack

21:00.140 --> 21:01.140
一点关系都没有

21:01.140 --> 21:02.140
不要认为

21:02.140 --> 21:03.140
是不是webpack

21:03.140 --> 21:04.140
针对某一些夹展器

21:04.140 --> 21:05.140
它就给你做了

21:05.140 --> 21:07.140
说了不同的哈希的解释

21:07.140 --> 21:08.140
不是的

21:08.140 --> 21:09.140
跟webpack一点关系都没有

21:09.140 --> 21:11.140
是交给他的

21:11.140 --> 21:12.140
交给他在这三处

21:12.140 --> 21:13.140
全部交给他的

21:13.140 --> 21:14.140
那么他说这里面是啥

21:14.140 --> 21:15.140
就是啥

21:15.140 --> 21:16.140
对吧

21:16.140 --> 21:17.140
这里面跟webpack

21:17.140 --> 21:18.140
一点关系都没有

21:18.140 --> 21:19.140
不要认为

21:19.140 --> 21:20.140
这里的哈希

21:20.140 --> 21:21.140
怎么又变了

21:21.140 --> 21:22.140
规则又变了

21:22.140 --> 21:23.140
webpack根本就不管这些事

21:23.140 --> 21:24.140
总之呢

21:24.140 --> 21:26.140
我webpack对webpack

21:26.140 --> 21:27.140
而言是什么样子呢

21:27.140 --> 21:29.140
就是我读到一个文件

21:29.140 --> 21:30.140
webpack可以读到这个文件了

21:30.140 --> 21:31.140
内容

21:31.140 --> 21:32.140
他把这个文件内容

21:32.140 --> 21:33.140
交给这个loader

21:33.140 --> 21:34.140
随便你写怎么搞

21:34.140 --> 21:36.140
挨个怎么搞怎么搞

21:36.140 --> 21:37.140
搞完了过后

21:37.140 --> 21:39.140
你给我一个可以用的代码

21:39.140 --> 21:40.140
怎么代码呢

21:40.140 --> 21:41.140
就这个代码

21:41.140 --> 21:42.140
他就给他这个代码

21:42.140 --> 21:43.140
好

21:43.140 --> 21:44.140
那么我就接下来

21:44.140 --> 21:45.140
做抽象与发出分析

21:45.140 --> 21:47.140
然后再替换一些导入导出函数

21:47.140 --> 21:48.140
就完了

21:48.140 --> 21:49.140
他什么都不管

21:49.140 --> 21:50.140
因此这些

21:50.140 --> 21:51.140
这些options

21:51.140 --> 21:52.140
是交给这个loader来执行

21:52.140 --> 21:54.140
因此他是来loader来解释

21:54.140 --> 21:55.140
他说怎么样就怎么样

21:55.140 --> 21:56.140
他说这个哈希

21:56.140 --> 21:57.140
不是整个资源力表的哈希

21:57.140 --> 21:58.140
那就ok

21:58.140 --> 21:59.140
因为他这里面

21:59.140 --> 22:01.140
也不可能获得整个资源力表的哈希

22:01.140 --> 22:03.140
因为整个资源都还没出来

22:03.140 --> 22:04.140
你还记得吗

22:04.140 --> 22:05.140
在loader运行的时候

22:05.140 --> 22:06.140
资源都还没有出来

22:06.140 --> 22:07.140
对吧

22:07.140 --> 22:08.140
所以他又获取不了

22:08.140 --> 22:09.140
因此这个哈希指的是

22:09.140 --> 22:11.140
这个文件内容的哈希

22:11.140 --> 22:12.140
另外一个叫content哈希

22:12.140 --> 22:14.140
这两个是一样的

22:14.140 --> 22:15.140
整齐吧

22:15.140 --> 22:17.140
是一样的这两个

22:17.140 --> 22:18.140
不是说有区别吗

22:18.140 --> 22:19.140
所以要搞清楚

22:19.140 --> 22:20.140
我们之前说的区别

22:20.140 --> 22:22.140
是在webpack里面

22:22.140 --> 22:24.140
它是有区别

22:24.140 --> 22:26.140
在webpack里面是有区别

22:26.140 --> 22:28.140
那么在这个loader里面

22:28.140 --> 22:29.140
它的规则

22:29.140 --> 22:30.140
i怎么定怎么定

22:30.140 --> 22:31.140
是它自己定的规则

22:31.140 --> 22:32.140
它说没区别

22:32.140 --> 22:33.140
它就没区别

22:33.140 --> 22:34.140
你看吧

22:34.140 --> 22:35.140
它说你看这两个解释吧

22:35.140 --> 22:36.140
你不用看别的

22:36.140 --> 22:37.140
这两个解释是不是一样的

22:37.140 --> 22:39.140
你看这两个解释

22:39.140 --> 22:40.140
这完全一样的

22:40.140 --> 22:41.140
我不跟你们吹牛

22:41.140 --> 22:42.140
这完全一样的

22:42.140 --> 22:44.140
因此他们是没有区别的

22:44.140 --> 22:46.140
你直接用哈希就行了

22:47.140 --> 22:49.140
不是说webpack我再强了一次

22:49.140 --> 22:51.140
不是说webpack里面的哈希

22:51.140 --> 22:52.140
跟content哈希没区别

22:52.140 --> 22:55.140
而是在加载器里面

22:55.140 --> 22:57.140
它自己定的规则

22:57.140 --> 22:59.140
它说没区别就没区别

22:59.140 --> 23:00.140
它这里

23:00.140 --> 23:01.140
它就说没区别

23:01.140 --> 23:02.140
它就没区别

23:02.140 --> 23:03.140
跟webpack没关系

23:03.140 --> 23:05.140
因为webpack都不知道发生什么事

23:05.140 --> 23:06.140
它只知道

23:06.140 --> 23:07.140
给它一段代吧

23:07.140 --> 23:09.140
给它一个图片的恶性质

23:09.140 --> 23:10.140
它就给我返回了一个代吧

23:10.140 --> 23:11.140
中间发生了什么

23:11.140 --> 23:12.140
不知道

23:13.140 --> 23:14.140
好 那么这里

23:14.140 --> 23:15.140
我们写成这样子

23:15.140 --> 23:16.140
接下来我们再打包

23:19.140 --> 23:23.020
npxwebpack

23:23.020 --> 23:24.020
打包

23:24.020 --> 23:25.020
你看

23:25.020 --> 23:26.020
现在webpack

23:26.020 --> 23:27.020
是不是变成这个样子了

23:27.020 --> 23:29.020
你看介石里面倒出

23:29.020 --> 23:30.020
倒出的结果

23:30.020 --> 23:32.020
自然而然没什么好说的

23:32.020 --> 23:33.020
倒出是没有玩意儿

23:33.020 --> 23:34.020
就这么简单

23:34.020 --> 23:36.020
然后比方说我们这里

23:36.020 --> 23:38.020
这里甚至还可以写个文件夹

23:38.020 --> 23:39.020
一个指文件夹

23:39.020 --> 23:40.020
比方说

23:41.020 --> 23:42.020
一面解释

23:43.020 --> 23:44.020
这样子

23:45.020 --> 23:48.850
这样子它生生的文件跑哪去了

23:49.850 --> 23:51.850
是不是跑这里了

23:51.850 --> 23:52.850
跑这里来了

23:52.850 --> 23:53.850
然后看介石

23:54.850 --> 23:55.850
打包出来的介石

23:59.350 --> 24:01.350
然后这里再跑哪去了

24:01.350 --> 24:02.350
上面

24:02.350 --> 24:03.350
倒出

24:03.350 --> 24:04.350
倒出的是一面解释

24:04.350 --> 24:05.350
它就把那个文件迷

24:05.350 --> 24:07.350
卷封不动的给地就行了

24:07.350 --> 24:08.350
它就把个东西倒出就行了

24:08.350 --> 24:09.350
生生个文件

24:09.350 --> 24:10.350
倒出它的路径就完了

24:11.350 --> 24:12.350
这就是File loader

24:12.350 --> 24:13.350
它要做的事情

24:13.350 --> 24:15.350
特别特别简单

24:15.350 --> 24:16.350
特别简单

24:19.350 --> 24:20.350
然后我们再来看

24:21.350 --> 24:22.350
另外一个

24:22.350 --> 24:24.350
叫urlloader

24:24.350 --> 24:26.350
这个玩意儿是什么东西呢

24:27.350 --> 24:30.790
这么开一个npngs

24:30.790 --> 24:31.790
urlloader

24:32.790 --> 24:34.790
它又能做什么事情呢

24:34.790 --> 24:36.790
它也是来做类似处理的

24:36.790 --> 24:38.790
只不过urlloader

24:38.790 --> 24:40.790
它不是像fileloader那么粗暴

24:41.790 --> 24:43.790
直接把它生成一个文件了

24:43.790 --> 24:45.790
fileloader不管你指向给我的东西

24:45.790 --> 24:46.790
我就把它生成一个文件

24:46.790 --> 24:47.790
不管这个文件在哪

24:47.790 --> 24:49.790
我就把它生成到相应的目录

24:49.790 --> 24:51.790
我这些顺便再问一下

24:51.790 --> 24:52.790
看它搞清楚没有

24:55.620 --> 24:58.620
如果说我倒入的是这个地方的文件

25:00.620 --> 25:01.620
那么现在请问

25:01.620 --> 25:03.620
它倒出的位置是啥

25:07.620 --> 25:08.620
现在请问

25:08.620 --> 25:09.620
它倒出的位置

25:09.620 --> 25:10.620
我们现在是

25:10.620 --> 25:11.620
倒入的是这个文件

25:13.620 --> 25:14.620
那么保存一下

25:15.620 --> 25:16.620
那么根据这里的配置

25:16.620 --> 25:18.620
它倒出的选项A

25:19.620 --> 25:25.620
倒出在imagewebpack.hash

25:26.620 --> 25:27.620
这个是png

25:27.620 --> 25:28.620
倒出这个位置

25:29.620 --> 25:30.620
选项B

25:30.620 --> 25:36.620
imagesubwebpack.hash

25:36.620 --> 25:37.620
好好想想

25:37.620 --> 25:38.620
你给我想一分钟

25:39.620 --> 25:40.620
把这个问题想了

25:40.620 --> 25:42.620
我张里面想一定是有道理的

25:42.620 --> 25:44.620
就是它把东西理解透

25:44.620 --> 25:45.620
不是说理解这个loader

25:45.620 --> 25:47.620
这个loader一点都不重要

25:47.620 --> 25:48.620
理解的是什么呢

25:48.620 --> 25:51.620
理解的是这个loader本身的原理

25:51.620 --> 25:52.620
你好好想一想

25:55.820 --> 25:56.820
应该是哪一个

25:57.820 --> 25:58.820
应该是哪一个

25:58.820 --> 25:59.820
是不是应该是

26:00.820 --> 26:01.820
A

26:01.820 --> 26:02.820
对吧

26:02.820 --> 26:03.820
是不是应该是A

26:04.820 --> 26:05.820
你想这个道理

26:05.820 --> 26:06.820
你看它干嘛

26:07.820 --> 26:09.820
生成一个具有相同文件内容

26:09.820 --> 26:10.820
到输出目录

26:10.820 --> 26:12.820
那么文件的名称是啥

26:12.820 --> 26:13.820
文件的名称不就是

26:13.820 --> 26:14.820
你这里配置的名称吗

26:14.820 --> 26:15.820
你再配置是啥就是啥

26:15.820 --> 26:17.820
你这配置里面有这个sub

26:17.820 --> 26:18.820
没有

26:18.820 --> 26:19.820
那就只有这个

26:19.820 --> 26:20.820
所以说

26:20.820 --> 26:21.820
我们来看一下

26:23.820 --> 26:26.140
印象

26:26.140 --> 26:27.140
你看

26:27.140 --> 26:28.140
是不是还是只有一个

26:28.140 --> 26:30.140
还没有包含那个sub目录下面

26:30.140 --> 26:31.140
要搞清楚

26:32.140 --> 26:33.140
这说远了

26:33.140 --> 26:34.140
回过头来说这个

26:35.140 --> 26:36.140
loader干嘛呢

26:36.140 --> 26:37.140
一看他解释

26:38.140 --> 26:39.140
他是把一个文件

26:39.140 --> 26:42.140
转换成bas64的格式

26:42.140 --> 26:45.140
而不是生成一个文件到输出目录

26:45.140 --> 26:46.140
也就是说

26:46.140 --> 26:48.140
他们两个的区别特别简单

26:49.140 --> 26:50.140
看一下

26:50.140 --> 26:51.140
区别在哪

26:51.140 --> 26:55.140
fileloader是生成一个文件

26:55.140 --> 26:57.140
到输出目录

26:57.140 --> 26:58.140
不是一个

26:58.140 --> 27:00.140
生成依赖的文件

27:00.140 --> 27:01.140
依赖什么

27:01.140 --> 27:02.140
就在代码里边依赖了什么文件

27:02.140 --> 27:04.140
把它生成到输出目录

27:04.140 --> 27:08.140
并将模块代码

27:08.140 --> 27:12.140
并将依赖的文件

27:12.140 --> 27:15.140
使用一个导出为

27:15.140 --> 27:16.140
好像真的

27:16.140 --> 27:17.140
说了个蠻复杂的

27:17.140 --> 27:19.140
然后导出

27:19.140 --> 27:22.140
然后将模块文件

27:22.140 --> 27:23.140
设置为

27:23.140 --> 27:24.140
设置为什么呢

27:24.140 --> 27:26.140
导出一个路径

27:27.140 --> 27:28.140
就是把模块文件里边的东西

27:28.140 --> 27:30.140
设置成这个样子

27:31.140 --> 27:32.140
就完了

27:32.140 --> 27:33.140
剩下交给wepac来处理

27:33.140 --> 27:35.140
而u2uloader干嘛的呢

27:35.140 --> 27:36.140
它是

27:37.140 --> 27:41.140
生将依赖的文件

27:41.140 --> 27:43.140
转换为

27:43.140 --> 27:44.140
导出

27:44.140 --> 27:45.140
导出什么呢

27:45.140 --> 27:48.140
导出一个bass64

27:49.140 --> 27:51.140
格式的制服串

27:51.140 --> 27:53.140
它在做这么一个这件事

27:53.140 --> 27:54.140
它不生成文件

27:54.140 --> 27:55.140
不生成文件

27:55.140 --> 27:56.140
好 咱们来看一下

27:57.140 --> 27:58.140
wepac里边

27:58.140 --> 27:59.140
我们现在

27:59.140 --> 28:00.140
已经安装好了

28:00.140 --> 28:01.140
叫做

28:02.140 --> 28:04.140
u2uloader

28:04.140 --> 28:05.140
那么这个东西

28:05.140 --> 28:06.140
我们来看一下

28:06.140 --> 28:07.140
这里的u2uloader

28:07.140 --> 28:08.140
我们现在不用它了

28:08.140 --> 28:10.140
我们用u2uloader

28:10.140 --> 28:11.140
用这个玩意

28:12.140 --> 28:13.140
那么我们原来

28:13.140 --> 28:14.140
又来看一下

28:14.140 --> 28:15.140
我们先不给它写配置

28:15.140 --> 28:17.140
就简单的用一下就行了

28:18.140 --> 28:19.140
那么现在我们来看一下

28:19.140 --> 28:20.140
首先看图片

28:20.140 --> 28:21.140
能不能显示出来

28:21.140 --> 28:22.140
我这里不用随机了

28:22.140 --> 28:23.140
不用随机了

28:23.140 --> 28:24.140
直接看图片

28:24.140 --> 28:25.140
能不能显示出来

28:25.140 --> 28:26.140
好 接下来

28:27.140 --> 28:28.140
先打包

28:28.140 --> 28:29.140
我们先打包

28:29.140 --> 28:30.140
看一下打包结果

28:30.140 --> 28:32.140
然后我们再用开发服务器来运行

28:32.140 --> 28:33.140
打包结果

28:33.140 --> 28:34.140
有没有图片

28:34.140 --> 28:35.140
是不是没有图片

28:35.140 --> 28:36.140
图片都没了

28:36.140 --> 28:37.140
接下来我们来看一下

28:37.140 --> 28:39.140
NPMR

28:39.140 --> 28:40.140
Dev

28:40.140 --> 28:41.140
开发服务器

28:43.140 --> 28:44.140
看怎么玩的

28:45.140 --> 28:46.140
图片显示出来了

28:46.140 --> 28:47.140
起了怪了

28:47.140 --> 28:48.140
没有在打包屋路

28:48.140 --> 28:49.140
图片怎么显示出来的

28:49.140 --> 28:50.140
你看它咋写的

28:52.140 --> 28:53.140
你看咋写的

28:53.140 --> 28:54.140
一密集

28:54.140 --> 28:55.140
你看咋写的

28:56.140 --> 28:57.140
你还没看到它咋写的

28:57.140 --> 28:58.140
然后来吧

28:58.140 --> 28:59.140
我们把这个PNG输出

29:00.140 --> 29:01.140
你看懂了

29:01.140 --> 29:02.140
它咋写的了

29:02.140 --> 29:03.140
这个PNG

29:03.140 --> 29:04.140
这个模块返回了啥

29:04.140 --> 29:05.140
返回了一个黑色的

29:05.140 --> 29:06.140
你看黑字

29:06.140 --> 29:07.140
黑字就是制服串

29:07.140 --> 29:09.140
你看它返回的就是这个玩意

29:09.140 --> 29:11.140
它返回的就是这个玩意

29:11.140 --> 29:12.140
这就是一个Base64的格式

29:12.140 --> 29:13.140
对吧

29:13.140 --> 29:14.140
只不过我们以前也做过的

29:14.140 --> 29:15.140
对不对

29:15.140 --> 29:16.140
也就是看一下它的代码

29:16.140 --> 29:17.140
看一下最终生存的代码

29:18.140 --> 29:19.140
我们停止

29:22.640 --> 29:23.640
NPS

29:24.640 --> 29:25.640
看一下最终生存出来的

29:25.640 --> 29:27.640
出来的

29:28.640 --> 29:29.640
它模块里面

29:29.640 --> 29:30.640
肯定模块里面代码

29:30.640 --> 29:31.640
其实你很多时候

29:31.640 --> 29:32.640
你看一下夹仔器怎么处理的

29:32.640 --> 29:33.640
就看它最终生存

29:33.640 --> 29:34.640
生存出来的结果

29:34.640 --> 29:35.640
已经明白了

29:35.640 --> 29:36.640
就啥都明白了

29:39.640 --> 29:40.640
它干嘛

29:40.640 --> 29:42.640
WAPEXPORT

29:43.640 --> 29:44.640
导出

29:44.640 --> 29:45.640
也就是说

29:45.640 --> 29:46.640
它也使用的是什么

29:46.640 --> 29:47.640
ES6的这种方式

29:47.640 --> 29:48.640
也就是它推荐你导入的时候

29:48.640 --> 29:49.640
怎么导入呢

29:49.640 --> 29:50.640
它推荐你用这种方式

29:50.640 --> 29:51.640
在导入

29:51.640 --> 29:52.640
PNG

29:52.640 --> 29:53.640
FRON

29:56.140 --> 29:57.140
就是一个

29:58.140 --> 29:59.140
WAPEXPORT

29:59.140 --> 30:00.140
PNG

30:00.140 --> 30:01.140
它希望你用这种方式

30:01.140 --> 30:02.140
在导入

30:03.140 --> 30:04.140
它生存出来的代码

30:04.140 --> 30:05.140
你看一下

30:07.140 --> 30:08.140
导出

30:08.140 --> 30:09.140
导出什么呢

30:09.140 --> 30:10.140
一看导出

30:10.140 --> 30:11.140
是不是就是导出一个字母串

30:11.140 --> 30:12.140
一个非常非常长的字母串

30:12.140 --> 30:13.140
就完了

30:13.140 --> 30:14.140
它怎么做的

30:14.140 --> 30:15.140
一看它又是怎么做的

30:15.140 --> 30:16.140
它的做法

30:16.140 --> 30:17.140
又是变成

30:17.140 --> 30:18.140
这是File Loader

30:20.140 --> 30:21.140
File Loader

30:22.140 --> 30:23.140
那么这是

30:23.140 --> 30:25.140
URL Loader

30:25.140 --> 30:27.140
以后我把这个东西写下来吧

30:27.140 --> 30:28.140
写到里面去

30:28.140 --> 30:30.140
那么这里它是怎么做的呢

30:30.140 --> 30:31.140
方可行

30:31.140 --> 30:32.140
Loader

30:32.140 --> 30:33.140
我刚才写过来

30:34.140 --> 30:35.140
就要扣钱里面来

30:35.140 --> 30:42.550
这是File Loader

30:43.550 --> 30:45.550
然后这里是URL Loader

30:45.550 --> 30:47.550
它又是怎么做的呢

30:47.550 --> 30:49.550
它是把文件内容读出来

30:49.550 --> 30:50.550
读出来

30:50.550 --> 30:51.550
然后这里

30:52.550 --> 30:54.550
根据Buffer

30:54.550 --> 30:55.550
我自己都做过了

30:55.550 --> 30:56.550
对吧

30:56.550 --> 30:59.550
生成一个BS64的

31:00.550 --> 31:02.550
生成一个BS64编码

31:02.550 --> 31:03.550
然后返回段代码

31:03.550 --> 31:04.550
Exports

31:04.550 --> 31:05.550
Default

31:05.550 --> 31:06.550
然后这里是什么

31:07.550 --> 31:08.550
BS64编码

31:08.550 --> 31:09.550
挖了

31:09.550 --> 31:11.550
就做这么简单的事

31:11.550 --> 31:12.550
然后交给Wippack

31:12.550 --> 31:13.550
Wippack一转换

31:13.550 --> 31:15.550
就生成这样的YL

31:16.550 --> 31:17.550
OK

31:17.550 --> 31:18.550
那么这就是URL Loader的做法

31:18.550 --> 31:19.550
但是它其实功能

31:19.550 --> 31:20.550
还是有一点

31:20.550 --> 31:21.550
还有一点点功能

31:21.550 --> 31:23.550
它其实也不仅限于这样子

31:23.550 --> 31:24.550
它还有什么功能呢

31:24.550 --> 31:25.550
你看

31:25.550 --> 31:26.550
URL Loader

31:26.550 --> 31:27.550
它还允许的配置

31:28.550 --> 31:30.550
它里面有个选项就是limit

31:31.550 --> 31:32.550
limit是什么意思呢

31:32.550 --> 31:33.550
它默认为force

31:34.550 --> 31:35.550
看一下

31:35.550 --> 31:36.550
它有配置的

31:36.550 --> 31:37.550
跟那个File Loader一样

31:38.550 --> 31:39.550
这个配置你可以在这里写

31:39.550 --> 31:41.550
limit等于啥啥

31:42.550 --> 31:43.550
我不太喜欢这种写法

31:43.550 --> 31:45.550
也可以在这里单独把它放出来写

31:45.550 --> 31:46.550
limit

31:46.550 --> 31:47.550
它默认为force

31:48.550 --> 31:49.550
你可以自己看文档

31:49.550 --> 31:50.550
表示什么意思

31:51.550 --> 31:53.550
不限制

31:53.550 --> 31:55.550
任何大小

31:55.550 --> 31:57.550
所有图片

31:57.550 --> 31:58.550
不是图片

31:58.550 --> 31:59.550
所有文件

31:59.550 --> 32:01.550
凡是经过loader的文件

32:01.550 --> 32:03.550
经过loader的文件

32:04.550 --> 32:06.550
当然我们一般都是

32:06.550 --> 32:07.550
将图片交给他们来处理

32:08.550 --> 32:09.550
经过loader的文件

32:10.550 --> 32:12.550
进行

32:12.550 --> 32:14.550
BS64编码

32:14.550 --> 32:15.550
返回

32:16.550 --> 32:18.550
不经过任何处理

32:18.550 --> 32:20.550
不限制任何大小

32:20.550 --> 32:22.550
那么还有一种情况是什么呢

32:22.550 --> 32:24.550
情况就是你可以设置这个limit

32:24.550 --> 32:26.550
它单位是字节

32:26.550 --> 32:28.550
比方说我们设置

32:28.550 --> 32:29.550
我看我的图片

32:29.550 --> 32:31.550
好像有点太大了

32:31.550 --> 32:32.550
太大了

32:32.550 --> 32:33.550
我看一下吧

32:33.550 --> 32:34.550
看一下图片有多大

32:34.550 --> 32:35.550
我也不知道有多大

32:36.550 --> 32:37.550
多大

32:37.550 --> 32:38.550
多大

32:38.550 --> 32:40.550
其实1KB

32:40.550 --> 32:41.550
我就100KB

32:41.550 --> 32:42.550
比方说

32:42.550 --> 32:45.550
我们的100×1024

32:45.550 --> 32:46.550
这什么意思呢

32:46.550 --> 32:49.550
是不是超过100×1024的KB大小

32:50.550 --> 32:52.550
只要图片

32:52.550 --> 32:53.550
只要文件

32:53.550 --> 32:54.550
我是说图片

32:54.550 --> 32:56.550
其实它可以处理任何文件

32:56.550 --> 32:58.550
任何文件处理的方式都是一样的

32:58.550 --> 33:00.550
只不过我们这里是把图片交给他来处理

33:00.550 --> 33:02.550
一般来说只有图片交给他来处理

33:03.550 --> 33:05.550
只要文件

33:05.550 --> 33:09.550
不超过100×1024

33:09.550 --> 33:11.550
字节

33:12.550 --> 33:13.550
则

33:14.550 --> 33:17.550
使用BS64编码

33:18.550 --> 33:20.550
否则怎么样

33:20.550 --> 33:23.550
交给fileloader

33:23.550 --> 33:25.550
进行处理

33:25.550 --> 33:27.550
他就用这种方式来做

33:27.550 --> 33:29.550
如果说超过了这个地方

33:29.550 --> 33:30.550
他就不管了

33:30.550 --> 33:31.550
我啥都不管了

33:31.550 --> 33:32.550
我不管了

33:32.550 --> 33:33.550
我就交给fileloader

33:33.550 --> 33:34.550
也他内部

33:34.550 --> 33:37.550
他是要用fileloader的

33:37.550 --> 33:38.550
没了意思

33:38.550 --> 33:41.550
他是要导入fileloader的

33:41.550 --> 33:42.550
那么这里

33:42.550 --> 33:43.550
fileloader

33:43.550 --> 33:44.550
如果说要配置怎么办

33:44.550 --> 33:45.550
那么他是这样子

33:45.550 --> 33:46.550
他这里边的配置

33:46.550 --> 33:48.550
全部配置都会传给fileloader

33:48.550 --> 33:49.550
instead

33:49.550 --> 33:52.550
也可以在这里去写一些fileloader的配置

33:52.550 --> 33:54.550
虽然这些配置他自己不认识

33:54.550 --> 33:55.550
但是他会

33:55.550 --> 33:57.550
如果说需要用到fileloader

33:57.550 --> 33:58.550
他会把这些配置传过去

33:58.550 --> 33:59.550
那么这里

33:59.550 --> 34:00.550
比方说我们这里

34:00.550 --> 34:01.550
之前用的name

34:01.550 --> 34:02.550
是不是可以用上了

34:02.550 --> 34:03.550
又可以写上了

34:03.550 --> 34:05.550
img是

34:06.550 --> 34:07.550
name

34:07.550 --> 34:08.550
dl

34:08.550 --> 34:09.550
hc

34:09.550 --> 34:10.550
est

34:10.550 --> 34:11.550
是不是可以写上了

34:11.550 --> 34:13.550
保存

34:13.550 --> 34:14.550
好 接着我们看一下

34:16.550 --> 34:17.550
就很有意思

34:17.550 --> 34:20.990
npxwpac

34:20.990 --> 34:21.990
打包

34:21.990 --> 34:22.990
打包完了

34:22.990 --> 34:23.990
你看是不是还是没有文件

34:23.990 --> 34:24.990
为什么

34:24.990 --> 34:25.990
因为我们的文件

34:25.990 --> 34:27.990
没有超过100成1024kb

34:27.990 --> 34:29.990
没有超过这么多

34:29.990 --> 34:31.990
因为这个比较大了

34:31.990 --> 34:32.990
所以说

34:32.990 --> 34:33.990
他就用那个就是

34:33.990 --> 34:35.990
他就用那个urlloader

34:35.990 --> 34:37.990
是不是把它变成了一个

34:37.990 --> 34:38.990
bass64的结果

34:38.990 --> 34:40.990
变成bass64的结果

34:40.990 --> 34:41.990
如果说

34:41.990 --> 34:43.990
我们写小一点

34:44.990 --> 34:48.970
来看一下

34:48.970 --> 34:49.970
一打包

34:49.970 --> 34:50.970
你看图片什么出来了

34:50.970 --> 34:51.970
对吧

34:51.970 --> 34:52.970
他就内部就有

34:52.970 --> 34:53.970
导入了fileloader

34:53.970 --> 34:54.970
当然fileloader来处理

34:54.970 --> 34:56.970
把这些东西全部传过去

34:56.970 --> 34:58.970
fileloader他就会知道

34:58.970 --> 34:59.970
怎么来处理

34:59.970 --> 35:00.970
就这么简单

35:00.970 --> 35:02.970
就这么简单

35:02.970 --> 35:04.970
那为什么他又这样的功能呢

35:04.970 --> 35:05.970
实际上是这样子的

35:05.970 --> 35:06.970
就是我们网页上

35:06.970 --> 35:09.970
一般是一些小的图片

35:09.970 --> 35:10.970
非常小的图片

35:10.970 --> 35:11.970
比方说一个图片

35:11.970 --> 35:13.970
只有这么大

35:13.970 --> 35:14.970
比方说一个小图标

35:14.970 --> 35:15.970
对吧

35:16.970 --> 35:18.970
有些地方只有这么大

35:18.970 --> 35:20.970
只有这么大一点

35:20.970 --> 35:21.970
很小的图片

35:21.970 --> 35:22.970
那么他的体积

35:22.970 --> 35:23.970
是非常小的

35:23.970 --> 35:24.970
有图片的体积

35:24.970 --> 35:25.970
多小的可能

35:25.970 --> 35:26.970
一般来

35:26.970 --> 35:29.970
只有0点几kb

35:29.970 --> 35:31.970
那样图片的体积比较小

35:31.970 --> 35:32.970
这种图片

35:32.970 --> 35:33.970
如果说你把它单独

35:33.970 --> 35:34.970
做成一个文件的话

35:34.970 --> 35:35.970
是不是要产生一个

35:35.970 --> 35:36.970
attp请求

35:36.970 --> 35:37.970
对吧

35:37.970 --> 35:38.970
是不是要产生一个

35:38.970 --> 35:39.970
就是远程请求

35:39.970 --> 35:41.970
去请求这个文件

35:41.970 --> 35:42.970
那么你会发现

35:42.970 --> 35:44.970
建立请求的时间

35:44.970 --> 35:45.970
这样子

35:45.970 --> 35:47.970
如果说小文件多了

35:47.970 --> 35:49.970
小文件多了

35:49.970 --> 35:50.970
则

35:50.970 --> 35:51.970
建立

35:51.970 --> 35:53.970
会浪费

35:53.970 --> 35:56.970
大量的时间

35:56.970 --> 35:58.970
创建请求

35:58.970 --> 35:59.970
对吧

35:59.970 --> 36:00.970
浏览器要创建一个请求

36:00.970 --> 36:01.970
你们学过网络通信

36:01.970 --> 36:02.970
是不是要三次握手

36:02.970 --> 36:03.970
对吧

36:03.970 --> 36:04.970
他文件内容没多少

36:04.970 --> 36:05.970
但是这个请求

36:05.970 --> 36:06.970
那个过程

36:06.970 --> 36:07.970
挺麻烦的

36:07.970 --> 36:08.970
创建请求

36:08.970 --> 36:10.970
因此没有必要

36:10.970 --> 36:11.970
所以说

36:11.970 --> 36:12.970
我们一般就把他

36:12.970 --> 36:13.970
直接

36:13.970 --> 36:14.970
面里边去

36:14.970 --> 36:15.970
没有必要

36:15.970 --> 36:16.970
把它变成

36:16.970 --> 36:17.970
一个整整的文件

36:17.970 --> 36:18.970
去浪费请求

36:18.970 --> 36:20.970
当然文件大了过后

36:20.970 --> 36:21.970
就不能这样做了

36:21.970 --> 36:23.970
文件大了过后

36:23.970 --> 36:24.970
那么你会导致

36:24.970 --> 36:25.970
一个大一码量拒整

36:25.970 --> 36:26.970
你看一下

36:26.970 --> 36:27.970
我们那个Bass News编码

36:27.970 --> 36:29.970
刚才现在看不到了

36:29.970 --> 36:30.970
现在看不到了

36:30.970 --> 36:31.970
如果说

36:31.970 --> 36:32.970
刚才看到

36:32.970 --> 36:33.970
Bass News编码

36:33.970 --> 36:34.970
是非常非常多的

36:34.970 --> 36:35.970
对吧

36:35.970 --> 36:36.970
因此

36:36.970 --> 36:38.970
会导致大一码量有拒整

36:38.970 --> 36:39.970
就说

36:39.970 --> 36:41.970
掌握一个合适的度

36:41.970 --> 36:42.970
一般来说

36:42.970 --> 36:43.970
一般就先到几KB

36:43.970 --> 36:45.970
或者是一KB左右

36:45.970 --> 36:46.970
OK

36:46.970 --> 36:47.970
关于这个UI

36:47.970 --> 36:48.970
Lowder

36:48.970 --> 36:49.970
其实

36:49.970 --> 36:50.970
这两个Lowder这么重要

36:50.970 --> 36:51.970
一点都不重要

36:51.970 --> 36:53.970
你忘了一支去查一下文档

36:53.970 --> 36:55.970
或者是回过头来看一下视频

36:55.970 --> 36:57.970
关键我们说这些课的目的

36:57.970 --> 36:59.970
看我是怎么去讲这个课的

36:59.970 --> 37:00.970
目的是要让你们

37:00.970 --> 37:02.970
去理解这个Lowder

37:02.970 --> 37:03.970
和FileLowder

37:03.970 --> 37:04.970
他到底是怎么做的

37:04.970 --> 37:06.970
其实他怎么做也不重要

37:06.970 --> 37:07.970
我们是要通过

37:07.970 --> 37:09.970
研究他怎么做

37:09.970 --> 37:10.970
去深刻的理解

37:10.970 --> 37:11.970
之前的Lowder

37:11.970 --> 37:13.970
他到底是怎么一回事

37:13.970 --> 37:15.970
这才是真的目的

37:15.970 --> 37:17.970
OK 这是关于普通文件处理

37:17.970 --> 37:18.970
说一下

