WEBVTT

00:00.940 --> 00:05.440
好了 那么我们把两个核心的性能优化就讲完了

00:05.440 --> 00:07.940
一个构建性能 一个传输性能

00:07.940 --> 00:09.940
也只能做到这样子了

00:09.940 --> 00:14.440
然后呢 其他的优化里面呢 我们讲主要讲两个

00:14.440 --> 00:17.740
因为这两个呢 我实在不知道该放到什么地方了

00:17.740 --> 00:19.940
一个呢 是ESLint

00:19.940 --> 00:22.440
它是代码风格检查

00:22.440 --> 00:24.440
下面可能咱们讲这个

00:24.440 --> 00:27.940
邦诺来这 这个

00:27.940 --> 00:29.940
这个是呢 就是邦诺的分析

00:29.940 --> 00:32.440
我们下面可再说 这里可能我们来学习ESLint

00:32.440 --> 00:34.440
代码风格检查 这啥意思呢

00:34.440 --> 00:37.440
就说你们以后呢 到公司里边写代码

00:37.440 --> 00:40.440
如果说一人写一个样 没有一个规范的话

00:40.440 --> 00:42.440
都是符合与法要求的

00:42.440 --> 00:43.940
与法都没问题 都能运行

00:43.940 --> 00:46.440
但是没有规范的话 那么相互沟通啊

00:46.440 --> 00:50.440
相互协作 就是起来的就会遇到很多的问题

00:50.440 --> 00:53.440
其实呢 也间接的影响了开发效率

00:53.440 --> 00:55.940
因此呢 代码风格呢

00:55.940 --> 00:58.940
也其实我们到一个公司里面需要统一的

00:58.940 --> 01:00.940
但是呢 又有一个问题 就是

01:00.940 --> 01:02.940
每一个公司呢 可能风格又不太一样

01:02.940 --> 01:03.940
这就是一个问题

01:03.940 --> 01:06.940
那么有没有什么工具能够检测出我们的风格

01:06.940 --> 01:08.940
是不符合公司要求的呢

01:08.940 --> 01:10.940
那么这个工具呢 就是ESLint

01:10.940 --> 01:12.940
它不会影响到我们的执行代码

01:12.940 --> 01:15.940
我们代码都是正确的 没有什么影响

01:15.940 --> 01:17.940
只剩了这个风格 规范部队

01:17.940 --> 01:19.940
它主要是做这么一个检查的

01:19.940 --> 01:21.940
你要说它特别重要吧

01:21.940 --> 01:23.940
它又不影响我们的写代码执行

01:23.940 --> 01:25.940
你要说它没用吧 它肯定是

01:25.940 --> 01:27.940
用处还蛮重要的

01:27.940 --> 01:30.940
因为一个公司里面必须要有个规范

01:30.940 --> 01:32.940
好 咱们来看一下我们的这一颗的课件

01:32.940 --> 01:34.940
这一颗其实跟那个WePack

01:34.940 --> 01:37.940
就没有任何关系了 没它关系了

01:37.940 --> 01:39.940
ESLint它就是一个风格检查工具

01:39.940 --> 01:42.940
如果说的写代码呢 不满足要求的风格的话

01:42.940 --> 01:44.940
那么就会给予警告或者是错误

01:44.940 --> 01:47.940
它的官网在这 民间中文网在这

01:47.940 --> 01:50.940
它没有中文 但是呢 有个民间中文网

01:50.940 --> 01:52.940
这个民间中文网我觉得还不错

01:52.940 --> 01:53.940
做得还不错

01:53.940 --> 01:55.940
所以说大家呢

01:55.940 --> 01:58.940
就可以去看这个民间中文网

01:58.940 --> 02:01.940
有这个民间中文网其实蛮好的

02:01.940 --> 02:02.940
为什么呢

02:02.940 --> 02:04.940
如果说没有这个玩意的话

02:04.940 --> 02:06.940
我这个这一颗会讲起来非常头痛

02:06.940 --> 02:08.940
我就跟你们说哪些规则常见的

02:08.940 --> 02:09.940
你们要去用

02:09.940 --> 02:10.940
有这个民间中文网的话

02:10.940 --> 02:11.940
我就发现

02:11.940 --> 02:13.940
只要给你介绍它怎么去用

02:13.940 --> 02:14.940
这个ESLint怎么去用

02:14.940 --> 02:16.940
规则我可以一个都不介绍

02:16.940 --> 02:17.940
因为个网站写的很清楚

02:17.940 --> 02:18.940
以后我们就可以看到了

02:18.940 --> 02:20.940
首先我们来看它使用

02:20.940 --> 02:21.940
使用的话

02:21.940 --> 02:24.940
它可以跟那个构建工具一起使用

02:25.940 --> 02:26.940
但是更多的时候

02:26.940 --> 02:28.940
我们需要搭配编辑器使用

02:28.940 --> 02:31.940
因为如果说你没有一个编辑器的配合的话

02:31.940 --> 02:32.940
你光靠一个构建工具的话

02:32.940 --> 02:33.940
那要每次打包的时候

02:33.940 --> 02:35.940
你才看得到你的代码问题在那

02:35.940 --> 02:38.940
而且是一场在控制台里面给你显示

02:38.940 --> 02:39.940
就非常的头痛

02:39.940 --> 02:42.940
所以说我们通常会跟那个编辑器结合

02:42.940 --> 02:43.940
这样子我们写代码

02:43.940 --> 02:44.940
风格一旦不满足要求

02:44.940 --> 02:45.940
它马上就可以提示了

02:45.940 --> 02:47.940
就不用等到打包的时候了

02:47.940 --> 02:49.940
当然有的时候

02:49.940 --> 02:51.940
我们还是可能会跟那个构建工具

02:52.940 --> 02:54.940
但是那编辑器肯定要用的

02:54.940 --> 02:55.940
它支持很多的编辑器

02:55.940 --> 02:57.940
编辑器里面有很多的插件

02:58.940 --> 03:00.940
比如说atom subline

03:00.940 --> 03:02.940
或者是我们现在用的VSCode

03:02.940 --> 03:03.940
它都有相应的插件

03:03.940 --> 03:04.940
所以说我们VSCode里面

03:04.940 --> 03:05.940
就安装一个插件就行了

03:05.940 --> 03:06.940
Yes Linz

03:06.940 --> 03:07.940
安装这个插件

03:07.940 --> 03:08.940
收一下吧

03:08.940 --> 03:09.940
Yes Linz

03:09.940 --> 03:12.380
就这个插件

03:14.380 --> 03:15.380
就这个

03:15.380 --> 03:16.380
安装就完了

03:16.380 --> 03:17.380
就特别简单

03:17.380 --> 03:18.380
那么这个插件

03:18.380 --> 03:19.380
它就可以跟编辑器结合了

03:19.380 --> 03:20.380
它这个编辑器里面给你提示

03:20.380 --> 03:22.380
你代码哪些问题

03:22.380 --> 03:24.380
但是这个插件

03:24.380 --> 03:25.380
它没法自动完成

03:25.380 --> 03:26.380
它的功能

03:26.380 --> 03:27.380
其实还是要交给

03:27.380 --> 03:28.380
Yes Linz这个库

03:28.380 --> 03:30.380
所以说你还是要安装这个库

03:30.380 --> 03:32.380
如果说你没有安装的话

03:32.380 --> 03:34.380
它还是不能起作用的

03:34.380 --> 03:35.380
那么怎么安装呢

03:35.380 --> 03:36.380
你可以用局部安装

03:36.380 --> 03:37.380
就在工程里面安装

03:37.380 --> 03:39.380
也可以全局去安装

03:39.380 --> 03:41.380
如果说你全局安装的话

03:41.380 --> 03:43.380
那么以后局部都不用安装了

03:43.380 --> 03:44.380
它都可以检查

03:44.380 --> 03:45.380
那就看你自己

03:45.380 --> 03:46.380
这个是可以全局安装的

03:46.380 --> 03:48.380
当然也可以在工程里面安装

03:48.380 --> 03:49.380
如果都没有的话

03:49.380 --> 03:50.380
就没法完成检查

03:51.380 --> 03:52.380
另外一个呢

03:52.380 --> 03:53.380
它在检查的时候

03:53.380 --> 03:54.380
就是这个库在检查的时候

03:54.380 --> 03:56.380
它一旦一个配置文件

03:56.380 --> 03:58.380
这个配置文件叫Yes Linz RC

03:58.380 --> 04:00.380
这个配置文件呢

04:00.380 --> 04:01.380
如果说你没有的话

04:01.380 --> 04:03.380
它也不会进行检查的

04:03.380 --> 04:05.380
OK 这是两个东西都必须要有

04:05.380 --> 04:07.380
所以说我们要首先安装这个库

04:07.380 --> 04:08.380
那么这个库呢

04:08.380 --> 04:09.380
你可以全局安装

04:09.380 --> 04:10.380
也可以局部安装

04:10.380 --> 04:11.380
那我们这里就局部安装吧

04:11.380 --> 04:12.380
局部安装

04:13.380 --> 04:14.380
我们这里呢

04:14.380 --> 04:15.380
不用git了

04:15.380 --> 04:16.380
不用git了

04:16.380 --> 04:17.380
这个batch了

04:17.380 --> 04:18.380
我们用power share

04:18.380 --> 04:19.380
为什么呢

04:19.380 --> 04:20.380
因为它里边有一个

04:20.380 --> 04:22.380
它安装过后有些命令

04:22.380 --> 04:23.380
那么有些命令呢

04:23.380 --> 04:24.380
这些命令呢

04:24.380 --> 04:25.380
我们可以用也可以不用

04:25.380 --> 04:26.380
如果说没用的话

04:26.380 --> 04:28.380
它可能会出现一些交互式的

04:28.380 --> 04:29.380
就是那个命令

04:29.380 --> 04:30.380
要跟你交互

04:30.380 --> 04:31.380
要跟你问一些问题

04:31.380 --> 04:33.380
那么用那个gitbatch呢

04:33.380 --> 04:35.380
可能交互式呢

04:35.380 --> 04:36.380
就会出一些问题

04:36.380 --> 04:38.380
因为gitbatch在Windows里面

04:38.380 --> 04:39.380
那个交互

04:39.380 --> 04:40.380
总共有的时候要出问题

04:40.380 --> 04:41.380
所以我们用那个power share

04:41.380 --> 04:43.380
其实我这里说一下

04:43.380 --> 04:45.380
这个命令工具就是个

04:45.380 --> 04:46.380
控制台

04:46.380 --> 04:48.380
我们在Windows环境里面

04:48.380 --> 04:49.380
最好用power share

04:49.380 --> 04:51.380
为什么给大家用这个gitbatch呢

04:51.380 --> 04:52.380
我平时用gitbatch

04:52.380 --> 04:54.380
为什么用这个玩意呢

04:54.380 --> 04:56.380
因为好看一点

04:56.380 --> 04:58.380
就是你们在那个

04:58.380 --> 04:59.380
看那个课程的时候

04:59.380 --> 05:00.380
前面不是一个盘幅嘛

05:00.380 --> 05:01.380
对吧

05:01.380 --> 05:02.380
我们的路径

05:02.380 --> 05:03.380
它是把路径的

05:03.380 --> 05:04.380
放到第一行的

05:04.380 --> 05:06.380
然后后面一个多了体式幅

05:06.380 --> 05:07.380
在这里输入命令

05:07.380 --> 05:08.380
这样看得清楚一点

05:08.380 --> 05:09.380
如果在power share里面

05:09.380 --> 05:10.380
它前面有一长串

05:10.380 --> 05:11.380
所以说呢

05:11.380 --> 05:12.380
因为我的目录白的比较深

05:12.380 --> 05:13.380
给大家解释一下

05:13.380 --> 05:14.380
是这个原因

05:14.380 --> 05:15.380
那么用power share

05:15.380 --> 05:17.380
在Windows里面是比较好的

05:17.380 --> 05:18.380
那么这里呢

05:18.380 --> 05:20.380
我们在这里输入一下吧

05:20.380 --> 05:21.380
NPMI

05:21.380 --> 05:22.380
很浪迹吧

05:22.380 --> 05:23.380
只要安装就行了

05:23.380 --> 05:25.380
甭管是你的什么开发倚带

05:25.380 --> 05:26.380
这个也肯定是开发倚带

05:26.380 --> 05:27.380
因为这个开发倚带

05:27.380 --> 05:30.380
和那个普通倚带的话

05:30.380 --> 05:32.380
它要什么时候才有意义呢

05:32.380 --> 05:33.380
它是要你把这个包

05:33.380 --> 05:35.380
发布出去给别人用的时候

05:35.380 --> 05:36.380
才有意义

05:36.380 --> 05:38.380
你如果说你不发布出去的话

05:38.380 --> 05:40.380
这个玩意儿其实无所谓的

05:40.380 --> 05:41.380
那么这里呢

05:41.380 --> 05:42.380
我们很浪迹

05:42.380 --> 05:44.380
然后呢

05:44.380 --> 05:45.380
这里

05:46.380 --> 05:47.380
我们干嘛呢

05:47.380 --> 05:49.380
这里我们安装那个eslint

05:50.380 --> 05:51.380
安装吧

05:52.380 --> 05:53.380
那么这里呢

05:53.380 --> 05:54.380
第三步呢

05:54.380 --> 05:55.380
我们是创建配置文件

05:55.380 --> 05:56.380
配置文件的话

05:56.380 --> 05:57.380
你可以手动创建

05:57.380 --> 05:58.380
无非就是这个文件吧

05:58.380 --> 06:00.380
那么也可以使用那个

06:00.380 --> 06:01.380
交互式命令

06:01.380 --> 06:02.380
就是安装好了过后

06:02.380 --> 06:03.380
它就会给你提供一个命令

06:03.380 --> 06:04.380
用交互式命令来创建

06:04.380 --> 06:05.380
这样子呢

06:05.380 --> 06:06.380
方便一点

06:06.380 --> 06:07.380
所以说我们可以用交互式命令

06:07.380 --> 06:08.380
eslint

06:08.380 --> 06:09.380
init

06:09.380 --> 06:10.380
初始化

06:10.380 --> 06:11.380
OK

06:11.380 --> 06:13.380
NPX

06:13.380 --> 06:14.380
eslint

06:14.380 --> 06:15.380
初始化

06:15.380 --> 06:16.380
init

06:17.380 --> 06:18.380
OK 那你看啊

06:18.380 --> 06:19.380
它会给你问一些命令

06:19.380 --> 06:20.380
那么来解释一下

06:20.380 --> 06:21.380
这命令什么意思啊

06:21.380 --> 06:22.380
第一个命令

06:22.380 --> 06:25.380
how would you like to use eslint

06:25.380 --> 06:28.380
它说你希望怎么来使用eslint

06:28.380 --> 06:30.380
第一个呢就是

06:30.380 --> 06:32.380
那个检查

06:32.380 --> 06:34.380
直检查那个代码的

06:34.380 --> 06:36.380
就是那个语法

06:36.380 --> 06:38.380
另一个呢是检查语法

06:38.380 --> 06:39.380
还要发现一些问题

06:39.380 --> 06:40.380
而且其他问题

06:40.380 --> 06:41.380
那么第三个呢

06:41.380 --> 06:43.380
是检查语法发现问题

06:43.380 --> 06:47.380
还要强制代码风格

06:47.380 --> 06:48.380
我们这里呢

06:48.380 --> 06:50.380
就选择第三个嘛

06:50.380 --> 06:51.380
第三个嘛

06:51.380 --> 06:56.380
What type of your modules does your person use

06:56.380 --> 06:58.380
你的就是工程的

06:58.380 --> 07:01.380
希望呢使用什么样的模块化

07:01.380 --> 07:02.380
一种是呢

07:02.380 --> 07:03.380
GS模块化

07:03.380 --> 07:04.380
就是es6的模块化

07:04.380 --> 07:05.380
一种是common GS

07:05.380 --> 07:07.380
那么它建议你不要滚用

07:07.380 --> 07:08.380
用一个就用一个

07:08.380 --> 07:09.380
那么没有模块化

07:09.380 --> 07:10.380
就选第三个

07:10.380 --> 07:11.380
那么我们这里有模块化

07:11.380 --> 07:13.380
选择第一个吧

07:13.380 --> 07:14.380
问你呢

07:14.380 --> 07:16.380
你的框架呢是

07:16.380 --> 07:18.380
又没有用框架啊

07:18.380 --> 07:19.380
如果用框架的话

07:19.380 --> 07:20.380
用rex的还是用vue

07:20.380 --> 07:21.380
我们没有用框架

07:21.380 --> 07:23.380
你们可能还没有学

07:23.380 --> 07:25.380
那么请问你的工程

07:25.380 --> 07:26.380
是不是用了type script

07:26.380 --> 07:28.380
你们以后要学习这个玩意

07:28.380 --> 07:30.380
那么我们这没有用

07:30.380 --> 07:31.380
那么请问你的代码呢

07:31.380 --> 07:33.380
运行的环境是什么

07:33.380 --> 07:34.380
运行的环境是什么

07:34.380 --> 07:36.380
是浏览器环境呢

07:36.380 --> 07:37.380
还是漏的环境

07:37.380 --> 07:38.380
你这个可以多选的

07:38.380 --> 07:40.380
用spec就可以选择

07:40.380 --> 07:41.380
浏览器环境

07:41.380 --> 07:42.380
漏的环境可以都选

07:42.380 --> 07:43.380
那么我们这里

07:43.380 --> 07:44.380
只有浏览器环境吗

07:44.380 --> 07:45.380
只有浏览器环境

07:45.380 --> 07:46.380
那么我们这里回测

07:48.380 --> 07:50.380
他问你

07:50.380 --> 07:52.380
使用一个流行的

07:52.380 --> 07:54.380
style guide

07:54.380 --> 07:56.380
就是使用一个流行的

07:56.380 --> 07:58.380
就是风格

07:58.380 --> 08:00.380
使用一个流行的风格

08:00.380 --> 08:01.380
他说

08:01.380 --> 08:02.380
我知道了

08:02.380 --> 08:04.380
我刚才选择了一个style

08:04.380 --> 08:05.380
对吧 刚才选择style

08:05.380 --> 08:08.380
I'm the question about your style

08:08.380 --> 08:10.380
you is popular

08:10.380 --> 08:12.380
变成一个最受欢迎的

08:12.380 --> 08:14.380
就是代码风格

08:14.380 --> 08:15.380
这些风格呢

08:15.380 --> 08:16.380
其实我们都可以自己配置的

08:16.380 --> 08:17.380
可以自己配置

08:17.380 --> 08:19.380
那么他请问你的配置文件呢

08:19.380 --> 08:21.380
是哪种格式

08:21.380 --> 08:22.380
一种是GS

08:22.380 --> 08:23.380
GS格式

08:23.380 --> 08:25.380
一个是YAM

08:25.380 --> 08:27.380
YAM这个格式呢

08:27.380 --> 08:29.380
大家应该见过吧

08:29.380 --> 08:31.380
在什么时候见过

08:31.380 --> 08:33.380
YAM这个格式

08:33.380 --> 08:34.380
一个是接生格式

08:34.380 --> 08:35.380
接生格式的话

08:35.380 --> 08:36.380
大家都清楚

08:36.380 --> 08:37.380
我们用接生格式

08:37.380 --> 08:38.380
无所谓吧

08:38.380 --> 08:40.380
这些都是不同的格式

08:40.380 --> 08:41.380
不同的格式

08:41.380 --> 08:43.380
来完成那个配置

08:43.380 --> 08:44.380
那么这样子

08:44.380 --> 08:46.380
他就给你生成那个配置文件

08:46.380 --> 08:48.380
你看

08:48.380 --> 08:50.380
我的

08:50.380 --> 08:52.380
噢 明白了

08:52.380 --> 08:54.380
我那个拍给你的节省都没有

08:54.380 --> 08:56.380
我得有一个拍给你的节省

08:56.380 --> 08:57.380
我刚才都没有

08:57.380 --> 08:59.380
没有接那个拍给你的节省

08:59.380 --> 09:04.230
OK

09:04.230 --> 09:06.230
重新来一次

09:06.230 --> 09:07.230
也是另一种

09:07.230 --> 09:08.230
好 来吧

09:08.230 --> 09:09.230
重新来一次

09:09.230 --> 09:10.230
第二个吧

09:10.230 --> 09:11.230
风格我们自己配置

09:11.230 --> 09:12.230
难得去用它的

09:12.230 --> 09:14.230
java script modules

09:14.230 --> 09:15.230
我们使用这个

09:15.230 --> 09:17.230
然后没有框架

09:17.230 --> 09:19.230
没有type script

09:19.230 --> 09:20.230
浏览器

09:20.230 --> 09:22.230
接生格式配置

09:22.230 --> 09:24.230
是吗

09:24.230 --> 09:28.230
他说无法找到拍景节省file

09:28.230 --> 09:30.230
我刚才不是切成创建了吗

09:30.230 --> 09:35.780
npm index

09:35.780 --> 09:39.500
怎么了

09:39.500 --> 09:41.500
等一下

09:41.500 --> 09:43.500
我这个

09:43.500 --> 09:44.500
哪个地方出问题了

09:47.940 --> 09:49.940
等一下哪个地方出问题了

09:49.940 --> 09:53.640
拍景节省

09:53.640 --> 09:55.640
is it OK

09:55.640 --> 09:56.640
yes

09:56.640 --> 09:58.640
这样子来创建了

09:58.640 --> 09:59.640
创建了过我们再来一次

09:59.640 --> 10:01.640
麻烦

10:01.640 --> 10:02.640
好

10:02.640 --> 10:04.640
第二个

10:04.640 --> 10:05.640
第一个

10:05.640 --> 10:06.640
没有

10:06.640 --> 10:08.640
没有

10:08.640 --> 10:09.640
browser

10:09.640 --> 10:10.640
接生

10:10.640 --> 10:15.170
他说拍景节省

10:15.170 --> 10:16.170
他就这里有检测到

10:16.170 --> 10:17.170
一开始我就有问题

10:17.170 --> 10:19.170
一开始我没有建立这个东西

10:19.170 --> 10:21.170
他检测到现在没有

10:21.170 --> 10:23.170
拍景节省里面没有写

10:23.170 --> 10:25.170
安装

10:25.170 --> 10:27.170
安装

10:27.170 --> 10:29.170
安装一次

10:29.170 --> 10:31.170
主要是拍景节省里面要出现

10:31.170 --> 10:32.170
不然他认为你没有安装

10:32.170 --> 10:33.170
这些东西

10:33.170 --> 10:35.170
无负义就是创建一个配置文件

10:35.170 --> 10:37.170
OK 终于创建好了

10:37.170 --> 10:39.170
我们的配置文件就在这了

10:39.170 --> 10:41.170
它里面已经出现了一些配置

10:41.170 --> 10:43.170
比方说我们现在写些代码

10:43.170 --> 10:45.170
其实看到现在已经就有风格检查了

10:45.170 --> 10:46.170
有了配置

10:46.170 --> 10:47.170
有了yesnit

10:47.170 --> 10:48.170
裤之后

10:48.170 --> 10:49.170
再配合我们的工具

10:49.170 --> 10:50.170
它就可以在编辑器里面

10:50.170 --> 10:51.170
帮我们进行检查了

10:51.170 --> 10:53.170
如果说没有编辑器的插件的话

10:53.170 --> 10:54.170
那里检查的话

10:54.170 --> 10:56.170
还要使用那个命令进行检查

10:56.170 --> 10:57.170
那么我们这里

10:57.170 --> 10:58.170
a

10:58.170 --> 10:59.170
你看是不是有检查了

10:59.170 --> 11:00.170
它告诉你

11:00.170 --> 11:01.170
a

11:01.170 --> 11:02.170
a is

11:02.170 --> 11:04.170
a is aside

11:04.170 --> 11:05.170
它给它付了值

11:05.170 --> 11:07.170
但是它从来没有使用过

11:07.170 --> 11:08.170
but never used

11:08.170 --> 11:09.170
就这么个意思

11:09.170 --> 11:11.170
那么它就可以活着检查了

11:11.170 --> 11:13.170
告诉你这里有一个错误

11:13.170 --> 11:15.170
OK 那么现在我们来看一下

11:15.170 --> 11:17.170
它的配置里面到底有哪些东西

11:17.170 --> 11:19.170
我们可以看到它配置里面的

11:19.170 --> 11:20.170
配置文件里面有个m

11:20.170 --> 11:21.170
m什么意思呢

11:21.170 --> 11:22.170
就是环境

11:22.170 --> 11:23.170
这个环境呢

11:23.170 --> 11:24.170
你这里的配置

11:24.170 --> 11:25.170
两个给它解释一下

11:25.170 --> 11:26.170
稍微解释一下就行了

11:26.170 --> 11:27.170
这现在我们一般

11:27.170 --> 11:28.170
不用去动它的

11:28.170 --> 11:29.170
表示我们代码

11:29.170 --> 11:31.170
是在浏览器环境里面运行

11:31.170 --> 11:32.170
es6表示的是

11:32.170 --> 11:33.170
是否启用了

11:33.170 --> 11:35.170
es6的全居API

11:35.170 --> 11:36.170
比方说promise

11:36.170 --> 11:37.170
比方说我们这里

11:37.170 --> 11:38.170
如果说没有

11:38.170 --> 11:39.170
启用es6的话

11:39.170 --> 11:40.170
那么会有一个什么样的结果呢

11:40.170 --> 11:42.170
那么我们这里使用一些es6

11:42.170 --> 11:43.170
给我们提供的全居API

11:43.170 --> 11:44.170
它会爆错的

11:44.170 --> 11:46.170
它会爆错的

11:47.170 --> 11:49.170
把这个取掉

11:49.170 --> 11:50.170
这个注射掉

11:50.170 --> 11:51.170
注射掉

11:54.890 --> 11:55.890
你看一下

11:55.890 --> 11:56.890
是不是爆错了

11:56.890 --> 11:57.890
爆错了

11:57.890 --> 11:58.890
它说这个

11:58.890 --> 11:59.890
全居的就是

11:59.890 --> 12:00.890
它说了根本就不存在

12:00.890 --> 12:01.890
不存在

12:01.890 --> 12:02.890
它说这里会爆一个错误

12:02.890 --> 12:03.890
会爆一个错误

12:04.890 --> 12:05.890
OK

12:05.890 --> 12:06.890
那么这里是

12:07.890 --> 12:08.890
怎么回事

12:08.890 --> 12:09.890
这里

12:09.890 --> 12:10.890
这个节省格式有问题

12:10.890 --> 12:11.890
节省格式有问题

12:11.890 --> 12:12.890
现在你看

12:12.890 --> 12:13.890
promise是不存在的

12:13.890 --> 12:14.890
promise不存在

12:14.890 --> 12:15.890
promise已经当敌犯的

12:15.890 --> 12:16.890
它就识别不了

12:16.890 --> 12:17.890
那么我们把这个加上就行了

12:17.890 --> 12:19.890
这个东西一般不用去管它

12:20.890 --> 12:21.890
这里我们再看

12:22.890 --> 12:23.890
第二个

12:23.890 --> 12:25.890
poser options

12:25.890 --> 12:26.890
表示的是

12:27.890 --> 12:30.890
要解析的语法的支持

12:30.890 --> 12:31.890
比如说

12:31.890 --> 12:33.890
sync,await,const,net

12:33.890 --> 12:34.890
这些语法

12:35.890 --> 12:36.890
那么第1个配置就是

12:36.890 --> 12:37.890
ecma version

12:37.890 --> 12:38.890
表示ES的哪个版本

12:38.890 --> 12:39.890
它要支持ES的哪个版本

12:40.890 --> 12:41.890
其实像这些支持

12:41.890 --> 12:43.890
它仅仅是做代码风格检查

12:43.890 --> 12:44.890
一定要注意

12:44.890 --> 12:45.890
它不影响运行的

12:45.890 --> 12:46.890
哪怕它给你报了处理得到

12:46.890 --> 12:47.890
照样能运行

12:47.890 --> 12:48.890
比较多吧

12:48.890 --> 12:49.890
我给它报了一个说

12:49.890 --> 12:50.890
a等于1

12:50.890 --> 12:51.890
b等于2

12:51.890 --> 12:52.890
看上去好像报的错了

12:52.890 --> 12:54.890
我B没有用到

12:54.890 --> 12:55.890
是不是报了一个

12:55.890 --> 12:56.890
风格检查有个问题

12:56.890 --> 12:57.890
那么能不能运行

12:57.890 --> 12:58.890
照样能运行

12:58.890 --> 12:59.890
它不会受任何影响的

12:59.890 --> 13:01.890
它只是一个风格检查的东西

13:01.890 --> 13:02.890
好吧

13:03.890 --> 13:04.890
这个

13:04.890 --> 13:05.890
现在我们看这个

13:05.890 --> 13:06.890
这个就是ES6的

13:06.890 --> 13:07.890
就是ES的版本

13:07.890 --> 13:09.890
我们这里的写的就比较高了

13:09.890 --> 13:10.890
它只能给你称称的

13:10.890 --> 13:11.890
就2018这个版本

13:11.890 --> 13:12.890
一个2018

13:12.890 --> 13:14.890
比方说你写个2015的话

13:15.890 --> 13:16.890
那这里面

13:16.890 --> 13:18.890
你有一些语法就用不了

13:18.890 --> 13:19.890
比方说

13:19.890 --> 13:20.890
它不是说用不了

13:20.890 --> 13:21.890
它就要给你检查出来

13:21.890 --> 13:22.890
就会有问题

13:22.890 --> 13:23.890
比方说像这样的

13:23.890 --> 13:24.890
它就告诉你

13:24.890 --> 13:25.890
搞不清楚的就是

13:25.890 --> 13:26.890
拿了这个了

13:26.890 --> 13:27.890
对吧

13:27.890 --> 13:28.890
它就儿信可就搞不清楚了

13:28.890 --> 13:29.890
当然你要把版本写高一点

13:29.890 --> 13:30.890
因为我们肯定要用的

13:30.890 --> 13:31.890
比较高

13:31.890 --> 13:32.890
搞版本的语法

13:32.890 --> 13:33.890
那么现在那就没问题了

13:33.890 --> 13:34.890
今天来告诉你

13:34.890 --> 13:35.890
这个函数没有使用

13:35.890 --> 13:36.890
没有使用

13:36.890 --> 13:37.890
那么没使用一下

13:37.890 --> 13:38.890
它就不会报错了

13:39.890 --> 13:40.890
那么这里

13:40.890 --> 13:41.890
source tab

13:41.890 --> 13:42.890
source tab什么意思呢

13:42.890 --> 13:44.890
它指的是你的

13:44.890 --> 13:45.890
代码

13:45.890 --> 13:46.890
它指的是你的代码

13:46.890 --> 13:47.890
它的就是

13:48.890 --> 13:49.890
模块化

13:49.890 --> 13:50.890
就是使用的标准

13:50.890 --> 13:51.890
模块化标准

13:51.890 --> 13:52.890
那么这里呢

13:52.890 --> 13:53.890
不是模块化标准

13:53.890 --> 13:54.890
它指的是你的代码

13:54.890 --> 13:55.890
是传统脚本

13:55.890 --> 13:56.890
还是模块化脚本

13:56.890 --> 13:57.890
是这么个意思

13:57.890 --> 13:58.890
那么如果说

13:58.890 --> 13:59.890
你把它配置在这个东西的话

13:59.890 --> 14:00.890
就是传统脚本

14:00.890 --> 14:02.890
就跟我们最初学习的

14:02.890 --> 14:03.890
GSE是一样的

14:03.890 --> 14:05.890
Scribbler元素营用的这种脚本

14:05.890 --> 14:07.890
没有加上type等于marge

14:07.890 --> 14:08.890
就这种意思

14:08.890 --> 14:09.890
就是传统脚本

14:09.890 --> 14:10.890
原来的意思吧

14:10.890 --> 14:11.890
这是关于这个配置

14:11.890 --> 14:12.890
看一下就行了

14:12.890 --> 14:13.890
我们主要的配置在这

14:13.890 --> 14:15.890
主要的我们要学习在这

14:15.890 --> 14:16.890
铺热

14:16.890 --> 14:17.890
铺热是指的是

14:17.890 --> 14:18.890
它要

14:18.890 --> 14:19.890
这里那么没有这个配置

14:19.890 --> 14:20.890
我说一下

14:20.890 --> 14:21.890
这个铺热

14:21.890 --> 14:23.890
以后可能会有点用

14:23.890 --> 14:24.890
因为这个ES另彩

14:24.890 --> 14:25.890
它的工作原理

14:25.890 --> 14:27.890
它是把代码先进行解析

14:27.890 --> 14:28.890
怎么解析的

14:28.890 --> 14:30.890
就是ST与法书分析

14:30.890 --> 14:31.890
解析过后

14:31.890 --> 14:33.890
然后解析成一种标准格式

14:33.890 --> 14:35.890
然后再交给ES另彩

14:35.890 --> 14:36.890
进行判断

14:36.890 --> 14:37.890
适合满足规则

14:37.890 --> 14:39.890
那么在解析的时候

14:39.890 --> 14:40.890
是通过什么解析

14:40.890 --> 14:41.890
因为有很多的解析器

14:41.890 --> 14:43.890
来解析这个鱼法

14:43.890 --> 14:44.890
那么比方说你们以后

14:44.890 --> 14:45.890
学了rex

14:45.890 --> 14:46.890
对吧

14:46.890 --> 14:47.890
rex是不是

14:47.890 --> 14:48.890
它有一些特别的鱼法

14:48.890 --> 14:49.890
你们现在还可能还没学

14:49.890 --> 14:50.890
那么一个特别的鱼法

14:50.890 --> 14:52.890
普通的解析器就解析不了了

14:52.890 --> 14:54.890
那么要用一些特殊的解析器

14:54.890 --> 14:56.890
比方说你们以后会学习TypeScript

14:56.890 --> 14:57.890
那么这个东西

14:57.890 --> 14:58.890
就跟介石没啥关系了

14:58.890 --> 15:00.890
也需要用一些特殊的解析器

15:00.890 --> 15:01.890
总之要把它解析成一个

15:01.890 --> 15:02.890
标准的

15:02.890 --> 15:04.890
符合ES另彩标准的

15:04.890 --> 15:05.890
一种格式

15:05.890 --> 15:07.890
那么ES另彩才能进一分析

15:07.890 --> 15:08.890
所以说

15:08.890 --> 15:10.890
它也可以去自定义解析器

15:10.890 --> 15:11.890
它默认使用的是这个东西

15:11.890 --> 15:12.890
那么你可以去配置

15:12.890 --> 15:13.890
一些不同的解析器

15:13.890 --> 15:15.890
那么以后学习了就是

15:15.890 --> 15:16.890
TypeScript

15:16.890 --> 15:17.890
或者是rex之类的

15:17.890 --> 15:18.890
这些东西的话

15:18.890 --> 15:19.890
你可以用不同的解析器

15:19.890 --> 15:21.890
来进行解析

15:21.890 --> 15:22.890
这说一下就行了

15:22.890 --> 15:23.890
现在没啥用

15:23.890 --> 15:24.890
Global

15:24.890 --> 15:25.890
指的是

15:25.890 --> 15:26.890
你可以配置一些

15:26.890 --> 15:27.890
额外的权局变量

15:27.890 --> 15:28.890
那么可以在代码里面

15:28.890 --> 15:29.890
获得一些支持

15:29.890 --> 15:30.890
比方说什么意思呢

15:30.890 --> 15:31.890
它到底可以配置

15:31.890 --> 15:32.890
两个

15:32.890 --> 15:33.890
一个是这个玩意

15:33.890 --> 15:34.890
那么这里

15:34.890 --> 15:35.890
比方说我们这里就使用

15:35.890 --> 15:37.890
这边拿过来

15:37.890 --> 15:38.890
把这个复制过来

15:39.890 --> 15:40.890
你看一下是不是没爆错

15:40.890 --> 15:41.890
对吧

15:41.890 --> 15:42.890
就没有爆错

15:42.890 --> 15:43.890
因为它告诉你

15:43.890 --> 15:44.890
有这个权局变量

15:44.890 --> 15:45.890
就这么意思

15:45.890 --> 15:46.890
这两个权局变量

15:46.890 --> 15:47.890
是LoadJS里边的API

15:47.890 --> 15:48.890
有些权局变量

15:48.890 --> 15:49.890
那么你可以用了

15:49.890 --> 15:50.890
那如果说你用了一些

15:50.890 --> 15:51.890
它没有配置的

15:51.890 --> 15:52.890
它就通不过检查

15:52.890 --> 15:53.890
它通不过检查

15:53.890 --> 15:54.890
是不是就说明

15:54.890 --> 15:55.890
它不能运行呢

15:55.890 --> 15:56.890
那不是

15:56.890 --> 15:57.890
一定要把检查

15:57.890 --> 15:58.890
跟运行分开

15:58.890 --> 15:59.890
检查

15:59.890 --> 16:00.890
只是看你代码

16:00.890 --> 16:01.890
和写的合不合理

16:01.890 --> 16:03.890
它跟运行没关系的

16:04.890 --> 16:05.890
你看是不是可以运行

16:05.890 --> 16:06.890
对吧

16:06.890 --> 16:07.890
可以运行的

16:07.890 --> 16:08.890
因为它没有配置

16:08.890 --> 16:09.890
这个权局变量

16:09.890 --> 16:10.890
所以说你还可以

16:10.890 --> 16:11.890
加上一个

16:11.890 --> 16:12.890
比如说Global

16:12.890 --> 16:13.890
然后RaidOnly

16:13.890 --> 16:14.890
RaidOnly表示什么意思呢

16:14.890 --> 16:15.890
表示的是那个

16:15.890 --> 16:16.890
只读的

16:16.890 --> 16:17.890
它不能改

16:17.890 --> 16:18.890
只读

16:18.890 --> 16:19.890
你看它就可以通过检查了

16:19.890 --> 16:20.890
对吧

16:20.890 --> 16:21.890
那么这个检查

16:21.890 --> 16:22.890
怎么来

16:22.890 --> 16:23.890
它不能改

16:23.890 --> 16:24.890
也不能改

16:24.890 --> 16:25.890
因为它是只读的

16:25.890 --> 16:26.890
如果说你把它配置为Retable

16:26.890 --> 16:27.890
那么就可以改了

16:27.890 --> 16:28.890
那么这个时候

16:28.890 --> 16:29.890
就可以改了

16:29.890 --> 16:30.890
这么个意思

16:30.890 --> 16:31.890
那么现在的运行呢

16:33.890 --> 16:34.890
输出一下

16:34.890 --> 16:35.890
输出一下

16:35.890 --> 16:36.890
这个运行还是能运行的

16:37.890 --> 16:38.890
但是我们肯定不能改它

16:38.890 --> 16:39.890
肯定不能改它的

16:39.890 --> 16:40.890
那么这个时候呢

16:40.890 --> 16:42.890
我们就可以把配置为Retable

16:42.890 --> 16:43.890
表示不能改

16:43.890 --> 16:44.890
就这么个意思

16:44.890 --> 16:45.890
就是检查跟运行是分开的

16:45.890 --> 16:46.890
只不过呢

16:46.890 --> 16:47.890
我们通常的配置的时候

16:47.890 --> 16:48.890
何必要去

16:49.890 --> 16:50.890
把它那个就是

16:50.890 --> 16:52.890
跟那个运行脱钩的

16:52.890 --> 16:53.890
不要脱钩

16:53.890 --> 16:54.890
它应该是检查的

16:54.890 --> 16:57.890
就是应该获得真实的运行的支持的

16:57.890 --> 16:58.890
比如说我们在随便写个吧

16:58.890 --> 16:59.890
挖1

16:59.890 --> 17:00.890
挖2

17:00.890 --> 17:01.890
那么就表示

17:01.890 --> 17:02.890
我配置的两个权局变量

17:02.890 --> 17:03.890
两个权局变量

17:03.890 --> 17:04.890
一个只读

17:04.890 --> 17:05.890
一个可写吧

17:05.890 --> 17:06.890
Retable

17:07.890 --> 17:08.890
那么这里呢

17:08.890 --> 17:09.890
你看这个就不能用了

17:09.890 --> 17:10.890
就检查通不过了

17:10.890 --> 17:12.890
一个是挖1

17:12.890 --> 17:13.890
挖1我们就可以得到

17:13.890 --> 17:14.890
然后呢

17:14.890 --> 17:15.890
一个是挖2

17:15.890 --> 17:16.890
挖2也可以得到

17:16.890 --> 17:17.890
而且呢

17:17.890 --> 17:18.890
挖2还可以改

17:18.890 --> 17:20.890
挖1是不能改的

17:20.890 --> 17:22.890
但是运行就不能运行了

17:22.890 --> 17:23.890
运行就不能运行了

17:23.890 --> 17:24.890
所以我们到时候要根据实际情况

17:24.890 --> 17:25.890
去配置一个些

17:25.890 --> 17:26.890
合适的权局变量

17:26.890 --> 17:28.890
让它帮我们进行检查

17:28.890 --> 17:30.890
尽力出一个检查的目的

17:30.890 --> 17:31.890
OK

17:31.890 --> 17:34.890
那么除了用这种方式之外呢

17:34.890 --> 17:35.890
这里我还要说一下

17:35.890 --> 17:36.890
就是在

17:36.890 --> 17:38.890
嗯在那个

17:38.890 --> 17:39.890
ESLint里面呢

17:39.890 --> 17:40.890
其他配置啊

17:40.890 --> 17:42.890
一方面的是一个配置文件

17:42.890 --> 17:43.890
另一方面呢

17:43.890 --> 17:44.890
它是可以写成注释的

17:44.890 --> 17:46.890
就是某一些

17:46.890 --> 17:48.890
具体的介式文件的代码呢

17:48.890 --> 17:49.890
他可能比较特殊

17:49.890 --> 17:51.890
他可能要用一些特殊的配置

17:51.890 --> 17:52.890
那么这个时候呢

17:52.890 --> 17:54.890
我也不想去改动整体的配置

17:54.890 --> 17:55.890
那么我觉得只需要

17:55.890 --> 17:56.890
给他一个特殊的配置

17:56.890 --> 17:57.890
就行了

17:57.890 --> 17:58.890
那么就可以用注释的形式来配置

17:58.890 --> 17:59.890
比方说这里

17:59.890 --> 18:00.890
我给他写了一个

18:01.890 --> 18:02.890
我们这里呢

18:02.890 --> 18:03.890
虽然我们在这里

18:03.890 --> 18:04.890
本来是没有权局变量

18:04.890 --> 18:05.890
挖一挖二的

18:05.890 --> 18:06.890
但是呢

18:06.890 --> 18:07.890
我们可以在这里注释一下

18:07.890 --> 18:09.890
说高速ESLint

18:09.890 --> 18:10.890
我这里有的这两个权局变量

18:10.890 --> 18:12.890
而且他们都是只读的

18:12.890 --> 18:13.890
说挖二不能复制

18:13.890 --> 18:14.890
那么挖二可写的话

18:14.890 --> 18:16.890
我们给他配置一个Retable

18:16.890 --> 18:17.890
让他通过检查

18:17.890 --> 18:18.890
就这么个意思

18:18.890 --> 18:19.890
但是呢

18:19.890 --> 18:20.890
对我们整个配置呢

18:20.890 --> 18:21.890
是没有什么影响的

18:21.890 --> 18:22.890
OK

18:22.890 --> 18:23.890
这是关于Globos

18:23.890 --> 18:24.890
啊

18:24.890 --> 18:25.890
Extend

18:25.890 --> 18:26.890
表示继承

18:26.890 --> 18:27.890
因为我们配置呢

18:27.890 --> 18:29.890
我们这里到时候会讲

18:29.890 --> 18:30.890
很多的规则

18:30.890 --> 18:31.890
就是他到底是怎么检查的

18:31.890 --> 18:33.890
按照哪些风格来检查

18:33.890 --> 18:34.890
那么

18:34.890 --> 18:35.890
这些规则呢

18:35.890 --> 18:36.890
我们如果说

18:36.890 --> 18:38.890
我自己一个一个去瞧的话

18:38.890 --> 18:39.890
如果没有规则的话

18:39.890 --> 18:40.890
就不会进行检查

18:40.890 --> 18:42.890
他为什么现在能检查呢

18:42.890 --> 18:43.890
就是因为他有基层

18:43.890 --> 18:45.890
他基层是一个推荐的规则

18:45.890 --> 18:47.890
基层是一个推荐的规则

18:47.890 --> 18:48.890
所以说我们不用去

18:48.890 --> 18:49.890
一个一个去瞧规则了

18:49.890 --> 18:50.890
对吧

18:50.890 --> 18:51.890
我们只需要去覆盖他那些

18:51.890 --> 18:53.890
已经覆盖他一些

18:53.890 --> 18:55.890
就是我们想要改通的规则就行了

18:55.890 --> 18:56.890
这是技成

18:56.890 --> 18:57.890
Extend

18:57.890 --> 18:58.890
好

18:58.890 --> 18:59.890
下面这个

18:59.890 --> 19:00.890
Eclofiles

19:00.890 --> 19:01.890
就是有些文件

19:01.890 --> 19:03.890
我们是不需要检查的

19:03.890 --> 19:04.890
比方说像

19:04.890 --> 19:05.890
地圣目录下面的文件

19:05.890 --> 19:06.890
像nodeMarchus

19:06.890 --> 19:07.890
别人写好了

19:07.890 --> 19:08.890
光我们啥事呢

19:08.890 --> 19:09.890
我们只检查自己的

19:09.890 --> 19:10.890
那么有些文件

19:10.890 --> 19:11.890
像不希望检查

19:11.890 --> 19:12.890
ok

19:12.890 --> 19:13.890
那么我们就可以把排除掉

19:13.890 --> 19:15.890
需要去新建一个文件

19:15.890 --> 19:19.200
需要去新建一个文件

19:19.200 --> 19:20.200
就这个文件

19:20.200 --> 19:21.200
那么这个文件

19:21.200 --> 19:22.200
我们就可以写一些

19:22.200 --> 19:23.200
跟那个

19:23.200 --> 19:24.200
计则一样的

19:24.200 --> 19:26.200
把一些东西排除掉

19:26.200 --> 19:27.200
排除掉之后

19:27.200 --> 19:28.200
像这里边的东西

19:28.200 --> 19:29.200
就不会检查了

19:29.200 --> 19:30.200
因为像

19:30.200 --> 19:32.200
像有些打包帅的文件的话

19:32.200 --> 19:33.200
已经给你压缩过了

19:33.200 --> 19:34.200
代码丑的不得了

19:34.200 --> 19:35.200
那一检查不得了

19:35.200 --> 19:36.200
一检查到处是问题

19:36.200 --> 19:38.200
所以说我们不希望它检查

19:40.200 --> 19:41.200
不希望它检查

19:41.200 --> 19:42.200
当然它检不检查

19:42.200 --> 19:43.200
其实都不会影响运行的

19:43.200 --> 19:44.200
只是看上去

19:44.200 --> 19:45.200
它给你包个红色的

19:45.200 --> 19:46.200
不舒服

19:46.200 --> 19:48.200
那么现在呢

19:48.200 --> 19:50.200
不是不应该检查了吗

19:51.200 --> 19:52.200
我看一下

19:54.200 --> 19:55.200
明白了

19:56.200 --> 19:58.200
这个玩意得放在根木炉

19:58.200 --> 20:00.200
得放在我们的项目根木炉

20:00.200 --> 20:01.200
得放在我们的项目根木炉

20:01.200 --> 20:02.200
我们这里呢

20:02.200 --> 20:03.200
怎么办呢

20:03.200 --> 20:04.200
放这吧

20:05.200 --> 20:06.200
放根木炉

20:07.200 --> 20:08.200
因为我们以后开发项目

20:08.200 --> 20:10.200
肯定是要把这个东西

20:10.200 --> 20:11.200
就是你这个东西

20:11.200 --> 20:12.200
变成根木炉的

20:12.200 --> 20:13.200
只是我们在讲课

20:13.200 --> 20:15.200
我要把结构分开

20:15.200 --> 20:16.200
那么这样子放根木炉

20:16.200 --> 20:17.200
你看一下

20:17.200 --> 20:18.200
垫手木炉下面的东西

20:18.200 --> 20:19.200
就不会检查了

20:21.200 --> 20:22.200
都我

20:22.200 --> 20:23.200
垫手木炉

20:23.200 --> 20:25.200
就前边

20:25.200 --> 20:27.200
前面有可能任何的木炉结构

20:27.200 --> 20:28.200
前面有任何的木炉结构

20:28.200 --> 20:30.200
但是要忽略中间

20:30.200 --> 20:31.200
只要有Dest

20:31.200 --> 20:32.200
只要有出现Dest

20:32.200 --> 20:34.200
那么就不进行检查

20:34.200 --> 20:35.200
这么个意思

20:35.200 --> 20:36.200
他就不会检查了

20:36.200 --> 20:37.200
但是我们的index

20:37.200 --> 20:38.200
我们来看一下

20:38.200 --> 20:39.200
index

20:39.200 --> 20:40.200
所以还是要检查

20:40.200 --> 20:41.200
对不对

20:41.200 --> 20:42.200
就这么个意思

20:42.200 --> 20:43.200
这是一个诺

20:43.200 --> 20:44.200
另外说一下

20:44.200 --> 20:45.200
垫手木炉的

20:45.200 --> 20:46.200
其实你写不写都无所谓

20:46.200 --> 20:48.200
因为他自动会忽略的

20:48.200 --> 20:50.200
垫手木炉会自动忽略的

20:50.200 --> 20:51.200
OK

20:51.200 --> 20:52.200
这是关于这个

20:52.200 --> 20:53.200
一个诺Files

20:54.200 --> 20:55.200
好

20:55.200 --> 20:56.200
接下来最后一个

20:56.200 --> 20:57.200
终点来了

20:57.200 --> 20:58.200
Rules

20:58.200 --> 20:59.200
规则集

20:59.200 --> 21:00.200
我好像好

21:00.200 --> 21:01.200
还忘了说一个

21:01.200 --> 21:02.200
就是这个配置的话

21:02.200 --> 21:03.200
这个配置的话

21:03.200 --> 21:04.200
其实还可以放这

21:05.200 --> 21:06.200
还可以放这

21:06.200 --> 21:08.200
放package.json里边

21:09.200 --> 21:10.200
这里写的

21:11.200 --> 21:12.200
就是我们除了

21:12.200 --> 21:14.200
专门来写这么一个配置文件

21:14.200 --> 21:16.200
来进行配置的话

21:16.200 --> 21:18.200
除了这种方式之外的

21:18.200 --> 21:19.200
还可以

21:19.200 --> 21:20.200
除了还有注释的方式

21:20.200 --> 21:21.200
还可以放到

21:21.200 --> 21:22.200
这个package.json里边

21:22.200 --> 21:23.200
用这个字段

21:23.200 --> 21:24.200
YesLintConfig

21:24.200 --> 21:26.200
在这里边写上

21:26.200 --> 21:27.200
YesLintConfig

21:27.200 --> 21:28.200
在这里写配置

21:28.200 --> 21:29.200
也是可以的

21:29.200 --> 21:30.200
我们一般通常的做法

21:30.200 --> 21:32.200
在这里写个配置文件

21:32.200 --> 21:33.200
好

21:33.200 --> 21:34.200
最后一个配置

21:34.200 --> 21:35.200
Rules

21:35.200 --> 21:36.200
这才是重点

21:36.200 --> 21:37.200
其他都是玩的

21:37.200 --> 21:39.200
Rules表示规则集

21:39.200 --> 21:41.200
就是具体有哪些规则

21:41.200 --> 21:42.200
要检查

21:43.200 --> 21:44.200
那么每一个规则

21:44.200 --> 21:45.200
我先说一下总体原则

21:45.200 --> 21:46.200
就每一个规则

21:46.200 --> 21:48.200
会影响某一个方面的代码风格

21:48.200 --> 21:49.200
比方说

21:49.200 --> 21:50.200
应该使用三个等号

21:50.200 --> 21:51.200
就不能使用两个等号

21:51.200 --> 21:52.200
这就是一条规则

21:53.200 --> 21:55.200
每条规则都有下面几个曲子

21:55.200 --> 21:56.200
比方说off

21:57.200 --> 21:59.200
地动曲子off0force

21:59.200 --> 22:00.200
都一样的意思

22:00.200 --> 22:01.200
表示不使用这个规则

22:01.200 --> 22:02.200
比方说

22:02.200 --> 22:03.200
我们在这里

22:03.200 --> 22:06.200
Rules给他写上一个EQEQEQ

22:06.200 --> 22:08.200
而且为force

22:08.200 --> 22:10.200
就表示禁用这个规则

22:10.200 --> 22:11.200
好了

22:11.200 --> 22:12.200
这个规则是什么东西呢

22:12.200 --> 22:14.200
它只指的是判断三个等号

22:14.200 --> 22:15.200
三个等号

22:15.200 --> 22:17.200
就是你是不是用了三个等号

22:17.200 --> 22:18.200
如果说你也用了

22:18.200 --> 22:19.200
三个等号的话

22:19.200 --> 22:20.200
就通过检查

22:20.200 --> 22:21.200
一扩

22:21.200 --> 22:22.200
一扩

22:22.200 --> 22:23.200
三个等号

22:23.200 --> 22:24.200
如果说你没有用

22:24.200 --> 22:25.200
三个等号

22:25.200 --> 22:26.200
严格相等的判断的话

22:26.200 --> 22:27.200
那么他就会认为

22:27.200 --> 22:28.200
你这个不好

22:28.200 --> 22:29.200
你这样的代码不好

22:29.200 --> 22:30.200
他就会通过检查

22:30.200 --> 22:32.200
那么你把规则关闭之后

22:32.200 --> 22:34.200
你用两个等号就没问题了

22:34.200 --> 22:35.200
比方说

22:36.200 --> 22:37.200
两个等号就没问题

22:37.200 --> 22:38.200
对吧

22:38.200 --> 22:39.200
你把关闭了

22:39.200 --> 22:41.200
如果说你把开启的话

22:41.200 --> 22:42.200
开启有两种

22:42.200 --> 22:43.200
一种是警告

22:43.200 --> 22:44.200
一种是错误

22:44.200 --> 22:45.200
比方说警告的话

22:45.200 --> 22:46.200
你可以把它设为E

22:46.200 --> 22:48.200
或者是设为一个自不错误

22:48.200 --> 22:49.200
保存

22:49.200 --> 22:50.200
你看一下

22:50.200 --> 22:51.200
现在这边

22:51.200 --> 22:52.200
是不是包了一个警告了

22:52.200 --> 22:53.200
对吧

22:53.200 --> 22:54.200
就是个警告

22:54.200 --> 22:55.200
建议你使用三个等号

22:56.200 --> 22:57.200
你如果说

22:57.200 --> 22:58.200
把他设为E也是一样

22:58.200 --> 23:00.200
如果说你把他设为2

23:00.200 --> 23:01.200
那么就是arrow

23:01.200 --> 23:02.200
也可以写成这个

23:02.200 --> 23:03.200
arrow

23:03.200 --> 23:04.200
把他设为2

23:04.200 --> 23:05.200
保存

23:05.200 --> 23:06.200
你看一下

23:06.200 --> 23:07.200
是不是变成一个错误级别了

23:07.200 --> 23:08.200
一个红线

23:08.200 --> 23:09.200
对吧

23:09.200 --> 23:10.200
当然这些跟运行都没有关系

23:10.200 --> 23:11.200
都跟运行没关系

23:11.200 --> 23:13.200
它只是一个级别

23:13.200 --> 23:14.200
它只是一个级别而已

23:14.200 --> 23:16.200
那这里我们再说一个细节

23:16.200 --> 23:17.200
就是关于force的处

23:17.200 --> 23:19.200
我建议大家的

23:19.200 --> 23:20.200
尽量还是不要使用

23:20.200 --> 23:21.200
因为这个东西

23:21.200 --> 23:23.200
在有些规则里面是无效的

23:23.200 --> 23:24.200
但是绝大部分规则

23:24.200 --> 23:25.200
他支持这个

23:25.200 --> 23:26.200
off or error

23:26.200 --> 23:27.200
你用12

23:27.200 --> 23:28.200
它是支持的

23:28.200 --> 23:29.200
去和force的

23:29.200 --> 23:30.200
某些规则支持

23:30.200 --> 23:31.200
某些规则它不一定支持的

23:32.200 --> 23:33.200
好

23:33.200 --> 23:34.200
建议大家使用前面的

23:36.200 --> 23:37.200
除了在配置文件里面

23:37.200 --> 23:38.200
使用规则之外

23:38.200 --> 23:39.200
还是一样的

23:39.200 --> 23:41.200
还是可以在注释里面去使用

23:41.200 --> 23:43.200
比方说像这样子

23:44.200 --> 23:47.660
像这个

23:47.660 --> 23:48.660
比方说

23:49.660 --> 23:51.660
这个配置文件里面没有

23:51.660 --> 23:53.660
配置文件里面没有

23:53.660 --> 23:54.660
那么

23:54.660 --> 23:55.660
这边

23:55.660 --> 23:56.660
我在这里写注释

23:57.660 --> 23:58.660
这边写注释

23:58.660 --> 23:59.660
我们把这个写成error

24:00.660 --> 24:01.660
你看

24:01.660 --> 24:02.660
是不是仍然可以生效

24:02.660 --> 24:04.660
但是它只是对这个文件生效

24:04.660 --> 24:05.660
对这个文件生效

24:05.660 --> 24:06.660
就这么个意思

24:06.660 --> 24:07.660
这个是规则如何去配

24:07.660 --> 24:09.660
配规则非常非常简单

24:09.660 --> 24:10.660
就是这样配的

24:10.660 --> 24:11.660
一般来说

24:11.660 --> 24:12.660
我们就在这里配总体规则

24:12.660 --> 24:13.660
一个规则

24:13.660 --> 24:14.660
一个规则

24:15.660 --> 24:16.660
两个规则

24:17.660 --> 24:18.660
然后三个规则

24:18.660 --> 24:19.660
就是这样配

24:19.660 --> 24:21.660
如果说你不满足你的要求的话

24:21.660 --> 24:22.660
就进行配置

24:22.660 --> 24:23.660
好

24:23.660 --> 24:25.660
那么到底有哪些规则的关键是

24:25.660 --> 24:27.660
接下来我们来看文档了

24:27.660 --> 24:29.660
这个东西我不可能一个个讲的

24:29.660 --> 24:30.660
太多了

24:30.660 --> 24:31.660
我们要看一下

24:31.660 --> 24:32.660
怎么来读这个文档

24:32.660 --> 24:33.660
而且这个是个中文文档

24:33.660 --> 24:35.660
你们可以很好约读的

24:35.660 --> 24:37.660
点击拥护指南规则

24:38.660 --> 24:40.660
它已经自动到规则来了

24:41.660 --> 24:43.660
链接就是这个规则

24:43.660 --> 24:44.660
在规则里边你看着

24:45.660 --> 24:48.660
它前边凡是打了这个勾的

24:48.660 --> 24:50.660
就表示推荐规则

24:50.660 --> 24:52.660
我们那个配置是不是基层制推荐规则

24:52.660 --> 24:54.660
那么我们现在用的就是推荐规则

24:54.660 --> 24:55.660
别的意思吧

24:55.660 --> 24:57.660
而且它下面你看

24:57.660 --> 24:59.660
它说下面一个最佳实践

24:59.660 --> 25:01.660
最佳实践建议你怎么去配置

25:01.660 --> 25:02.660
建议你怎么去配置

25:02.660 --> 25:04.660
它建议你把这些东西打开

25:04.660 --> 25:05.660
它有些并不是推荐的

25:05.660 --> 25:07.660
但是它建议你还是打开

25:07.660 --> 25:08.660
打勾的就是

25:08.660 --> 25:10.660
总之打勾的就是它推荐的规则

25:10.660 --> 25:11.660
它会被基层下来

25:11.660 --> 25:13.660
另外这个小手

25:13.660 --> 25:15.660
这个扳手是什么意思呢

25:15.660 --> 25:17.660
这个扳手表示它是可以自动修复的

25:18.660 --> 25:20.660
它是可以自动去修

25:20.660 --> 25:21.660
帮你进行修复的

25:21.660 --> 25:22.660
比方说吧

25:22.660 --> 25:23.660
我们随便看一个吧

25:23.660 --> 25:25.660
随便找一个规则

25:25.660 --> 25:26.660
这个科丽

25:26.660 --> 25:27.660
科丽随便看一个

25:27.660 --> 25:28.660
那么怎么来看这个规则

25:28.660 --> 25:30.660
怎么来用呢

25:30.660 --> 25:31.660
你看也点进去看里面

25:31.660 --> 25:32.660
它有详细的例子

25:32.660 --> 25:34.660
每个规则都有详细的例子

25:34.660 --> 25:35.660
比方说它这个是什么

25:35.660 --> 25:37.660
它要遵守大扩号约定

25:37.660 --> 25:39.660
就说你如果说这样的代码

25:39.660 --> 25:40.660
不好

25:40.660 --> 25:41.660
不好

25:41.660 --> 25:42.660
它认为检查通不过

25:42.660 --> 25:43.660
比方说

25:44.660 --> 25:45.660
我们在这里

25:46.660 --> 25:47.660
写这么一个东西

25:53.040 --> 25:54.040
然后这个东西

25:54.040 --> 25:55.040
它目前通过了

25:55.040 --> 25:56.040
因为我们没有配置

25:56.040 --> 25:58.040
把这个科丽打开

26:00.040 --> 26:01.040
把这个科丽

26:03.040 --> 26:05.040
放成2

26:06.040 --> 26:07.040
放成2

26:07.040 --> 26:08.040
是不是有错误

26:08.040 --> 26:10.040
它说应该有一个大扩号

26:10.040 --> 26:12.040
那么哪怕你只有一条语句

26:12.040 --> 26:13.040
都应该加个大扩号

26:13.040 --> 26:14.040
让代码更加规范

26:14.040 --> 26:16.040
那么像这种规则有班手

26:16.040 --> 26:17.040
它有个班手看没

26:17.040 --> 26:18.040
那么这个小班手

26:18.040 --> 26:20.040
表示它可以自动修复

26:20.040 --> 26:21.040
怎么就能自动修复

26:21.040 --> 26:22.040
你可以使用命令

26:22.040 --> 26:24.040
比方说我们在这里可以使用

26:24.040 --> 26:26.040
E-NPS

26:26.040 --> 26:28.040
E-S-Lint

26:30.040 --> 26:32.040
然后Fix修复

26:32.040 --> 26:33.040
修复哪个文件

26:33.040 --> 26:35.040
src下面的index.js

26:35.040 --> 26:36.040
你看

26:36.040 --> 26:37.040
是不是自动给你加上了

26:37.040 --> 26:38.040
大扩号

26:38.040 --> 26:39.040
它可以修复了

26:39.040 --> 26:40.040
但这样你用命令

26:40.040 --> 26:41.040
太麻烦了

26:41.040 --> 26:43.040
当然你可以配置一下

26:43.040 --> 26:44.040
反正我个人

26:44.040 --> 26:45.040
不是很喜欢自动修复

26:45.040 --> 26:46.040
我自己喜欢自动修复

26:46.040 --> 26:47.040
我自己是自动修复

26:47.040 --> 26:49.040
还可以配置一下

26:49.040 --> 26:51.040
并不是所有规则都能自动修复

26:51.040 --> 26:53.040
它只有一个有班手才能自动修复

26:53.040 --> 26:55.040
那么怎么配置呢

26:55.040 --> 26:56.040
你可以找到刚才我们的插件

26:56.040 --> 26:59.040
插件它是支持自动修复的

26:59.040 --> 27:00.040
E-S-Lint你看一下吧

27:00.040 --> 27:01.040
在插件里边

27:01.040 --> 27:03.040
它可以配置

27:03.040 --> 27:05.040
在哪呢

27:05.040 --> 27:07.040
就在这

27:08.040 --> 27:09.040
Fix All

27:09.040 --> 27:10.040
配置一下就行了

27:10.040 --> 27:11.040
Editor

27:11.040 --> 27:13.040
Code Action on Save

27:13.040 --> 27:14.040
Fix All

27:14.040 --> 27:15.040
我们来配置一下吧

27:15.040 --> 27:17.040
我们找到这个文件

27:17.040 --> 27:18.040
搜索一下

27:18.040 --> 27:19.040
设置

27:19.040 --> 27:22.040
找到这个E-S-Lint

27:22.040 --> 27:24.040
E-S-Lint

27:24.040 --> 27:26.040
看一下在这边编辑吧

27:26.040 --> 27:28.040
编辑

27:28.040 --> 27:30.040
在这边

27:30.040 --> 27:32.040
它又重新打开了

27:32.040 --> 27:34.040
这个吧

27:34.040 --> 27:36.040
这个

27:36.040 --> 27:37.040
OK

27:37.040 --> 27:39.040
那么我们配置这个

27:39.040 --> 27:41.040
在Editor

27:41.040 --> 27:43.040
Code Action on Save

27:43.040 --> 27:46.040
Editor

27:46.040 --> 27:47.040
Code

27:47.040 --> 27:48.040
我这里没有这个配置

27:48.040 --> 27:49.040
没有这个配置

27:49.040 --> 27:50.040
给它写一个

27:50.040 --> 27:52.990
OK

27:52.990 --> 27:53.990
写好了

27:53.990 --> 27:54.990
写好了

27:54.990 --> 27:55.990
好 那么配置好了

27:55.990 --> 27:56.990
那么现在呢

27:56.990 --> 27:57.990
我们来看一下

27:57.990 --> 27:58.990
如果说我这样子

27:58.990 --> 27:59.990
复加加

27:59.990 --> 28:00.990
一保存

28:00.990 --> 28:01.990
你看

28:01.990 --> 28:02.990
说自动给你加上了

28:02.990 --> 28:03.990
对吧

28:03.990 --> 28:05.990
这就是这个

28:05.990 --> 28:06.990
这个配置

28:06.990 --> 28:07.990
但是我不是很喜欢

28:07.990 --> 28:08.990
我不喜欢

28:08.990 --> 28:09.990
连什么东西改我带

28:09.990 --> 28:10.990
我不是很喜欢

28:10.990 --> 28:11.990
我再去掉

28:11.990 --> 28:12.990
你们如果喜欢的话

28:12.990 --> 28:13.990
要加上

28:13.990 --> 28:14.990
我自己放箭吧

28:14.990 --> 28:16.990
我自己想手动加

28:16.990 --> 28:17.990
不是很喜欢

28:17.990 --> 28:18.990
它自动给我加

28:19.990 --> 28:20.990
OK 当然我

28:20.990 --> 28:21.990
也不会写这样的带

28:22.990 --> 28:23.990
好 这是关于

28:23.990 --> 28:24.990
这个小班手是什么意思

28:24.990 --> 28:25.990
对吧

28:25.990 --> 28:26.990
那么你看一下

28:26.990 --> 28:27.990
就很明白了

28:27.990 --> 28:28.990
那么这个规则

28:28.990 --> 28:29.990
你自己去查

28:29.990 --> 28:30.990
你自己去查

28:30.990 --> 28:31.990
然后呢

28:31.990 --> 28:32.990
打勾字推荐的

28:32.990 --> 28:33.990
你自动继承过来的

28:33.990 --> 28:34.990
小班手呢

28:34.990 --> 28:35.990
就是他可以自动修复的

28:35.990 --> 28:36.990
可以自动修复的

28:36.990 --> 28:37.990
就这么个意思

28:37.990 --> 28:38.990
好吧

28:38.990 --> 28:39.990
那么以后呢

28:39.990 --> 28:40.990
在我们具体的

28:40.990 --> 28:41.990
使用过程中呢

28:41.990 --> 28:42.990
我们来如

28:42.990 --> 28:43.990
我们当然不可能

28:43.990 --> 28:44.990
去把这个文档背下来

28:44.990 --> 28:46.990
也不可能挨在那去看一面

28:46.990 --> 28:47.990
都没有必要

28:47.990 --> 28:48.990
我们平时用的时候

28:48.990 --> 28:49.990
就按照自己的方式来写

28:49.990 --> 28:50.990
因为它是要纠正你的

28:50.990 --> 28:51.990
对吧

28:51.990 --> 28:52.990
你也不知道自己有哪些方式

28:52.990 --> 28:53.990
不符合要求

28:53.990 --> 28:55.990
不符合公司的风格

28:55.990 --> 28:56.990
因为以后到公司里面

28:56.990 --> 28:58.990
公司会自动给你这么一个东西

28:58.990 --> 29:00.990
它会自动给你这么一个东西

29:00.990 --> 29:02.990
你的工程里面一定有它

29:02.990 --> 29:03.990
那么有它之后呢

29:03.990 --> 29:04.990
还会自动检查

29:04.990 --> 29:05.990
你就按照你的要求

29:05.990 --> 29:06.990
它会给你提示

29:06.990 --> 29:07.990
到底有什么样的错误

29:07.990 --> 29:08.990
按照要求呢

29:08.990 --> 29:09.990
你把它写出来

29:09.990 --> 29:10.990
就是写好就行了

29:10.990 --> 29:12.990
那么这里是要两个问题

29:12.990 --> 29:13.990
要等解决

29:13.990 --> 29:15.990
第一个你看不懂怎么办

29:15.990 --> 29:16.990
就它给你提示错误了

29:16.990 --> 29:18.990
你看不懂怎么办

29:18.990 --> 29:19.990
就第一个问题

29:19.990 --> 29:20.990
第二个问题就是

29:20.990 --> 29:22.990
你看懂了

29:22.990 --> 29:23.990
但是我不想要这个规则

29:23.990 --> 29:24.990
又怎么办

29:24.990 --> 29:26.990
我怎么知道它的规则名字是什么

29:26.990 --> 29:28.990
其实非常简单

29:28.990 --> 29:30.990
比方说这里爆错了

29:30.990 --> 29:31.990
你知道这里有错误

29:31.990 --> 29:32.990
肯定规则没通过

29:32.990 --> 29:33.990
那么没通过的话

29:33.990 --> 29:35.990
你怎么知道我出来哪呢

29:35.990 --> 29:36.990
你指的它会提示你

29:36.990 --> 29:37.990
它说啊

29:37.990 --> 29:39.990
它说

29:39.990 --> 29:40.990
期望大括号

29:40.990 --> 29:42.990
出现在衣服的条件里边

29:42.990 --> 29:44.990
出现大括号

29:44.990 --> 29:45.990
条件之后

29:45.990 --> 29:46.990
after衣服

29:46.990 --> 29:47.990
condition

29:47.990 --> 29:48.990
条件之后呢

29:48.990 --> 29:49.990
出现大括号

29:49.990 --> 29:50.990
那么就知道了

29:50.990 --> 29:51.990
但是如果说你看不懂英文怎么办

29:51.990 --> 29:52.990
那又是个问题了

29:52.990 --> 29:53.990
对吧

29:53.990 --> 29:54.990
还是有办法

29:54.990 --> 29:55.990
你看后边

29:55.990 --> 29:56.990
它告诉你这个规则的名字

29:56.990 --> 29:57.990
叫做Curly

29:57.990 --> 29:59.990
那么你就到官网里边去查

29:59.990 --> 30:01.990
Curly

30:01.990 --> 30:02.990
就这个

30:02.990 --> 30:03.990
你点进去看一下

30:03.990 --> 30:05.990
它就明白它是什么意思了

30:05.990 --> 30:06.990
明白的意思吧

30:06.990 --> 30:07.990
那你就可以修正你的代码了

30:07.990 --> 30:08.990
慢慢的慢慢的

30:08.990 --> 30:09.990
你就越来越熟悉

30:09.990 --> 30:10.990
越来越熟悉

30:10.990 --> 30:11.990
这些代码风格了

30:11.990 --> 30:12.990
听懂了吧

30:12.990 --> 30:13.990
如果说

30:13.990 --> 30:14.990
还有另外一种情况

30:14.990 --> 30:15.990
就是你写代码

30:15.990 --> 30:16.990
你觉得没问题

30:16.990 --> 30:17.990
这就是我想要的风格

30:17.990 --> 30:18.990
只是我配置错了

30:18.990 --> 30:20.990
那么我怎么样去修改风格了

30:20.990 --> 30:22.990
就是我的规则

30:22.990 --> 30:23.990
是什么名字呢

30:23.990 --> 30:24.990
还是一样的

30:24.990 --> 30:25.990
规则的名字

30:25.990 --> 30:26.990
它告诉你的

30:26.990 --> 30:27.990
叫做Curly

30:27.990 --> 30:28.990
那么你如果说你不想要这个规则

30:28.990 --> 30:29.990
OK

30:29.990 --> 30:31.990
那把一个Curly关闭

30:31.990 --> 30:32.990
off

30:32.990 --> 30:33.990
关闭

30:33.990 --> 30:34.990
它就没了

30:35.990 --> 30:36.990
这就是说

30:36.990 --> 30:37.990
其实我们平时

30:37.990 --> 30:38.990
哪去去看这个文档

30:38.990 --> 30:40.990
根本也不用去备

30:40.990 --> 30:41.990
就是当我们没出问题的时候

30:41.990 --> 30:42.990
老老实实写就行了

30:42.990 --> 30:43.990
除了问题

30:43.990 --> 30:44.990
那一定是你代码

30:44.990 --> 30:46.990
不满足工资风格

30:46.990 --> 30:48.990
那么按照刚才说的去查

30:48.990 --> 30:49.990
或者是你的配置

30:49.990 --> 30:50.990
不需要

30:50.990 --> 30:51.990
不需要这样的

30:51.990 --> 30:52.990
那么严格的配置

30:52.990 --> 30:53.990
那么你去查

30:53.990 --> 30:54.990
到底是哪一个规则

30:54.990 --> 30:55.990
把关闭就行了

30:55.990 --> 30:56.990
OK

30:56.990 --> 30:57.990
这就是关于

30:57.990 --> 30:59.990
ESLint

