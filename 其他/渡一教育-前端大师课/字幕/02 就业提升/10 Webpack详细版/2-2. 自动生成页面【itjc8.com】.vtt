WEBVTT

00:00.750 --> 00:02.750
来吧 还是一样啊

00:02.750 --> 00:04.750
插件的名字就一个名字啊

00:04.750 --> 00:06.750
就是Atomware Webpack Plugging

00:06.750 --> 00:09.750
也就是说这个插件的名字叫做Atomware

00:09.750 --> 00:11.750
那干嘛的呢 我们猜一猜

00:11.750 --> 00:13.750
那肯定是跟页面相关对吧

00:13.750 --> 00:15.750
它是来解决什么样的问题呢 是这么一个问题

00:15.750 --> 00:16.750
大家看一下啊

00:16.750 --> 00:18.750
就是比方说我们现在 Webpack安装好了

00:18.750 --> 00:20.750
啊 其实我在这里呢 已经把这个

00:20.750 --> 00:23.750
aptmware Webpack Plugging安装好了啊

00:23.750 --> 00:24.750
这东西都安装了

00:24.750 --> 00:26.750
安装好了过后呢 我做了一个配置

00:26.750 --> 00:29.750
哎 你看 哎 我们输出的名字呢

00:29.750 --> 00:32.750
这是这个啊 这个名字输出的就是帮斗名字

00:32.750 --> 00:34.750
然后呢 这个插件呢

00:34.750 --> 00:36.750
我们使用的是上一课学习的

00:36.750 --> 00:38.750
这个清除这个输出目录的插件

00:38.750 --> 00:40.750
来 打个包

00:40.750 --> 00:44.380
好 MPX Webpack

00:44.380 --> 00:45.380
好 打包完了对吧

00:45.380 --> 00:46.380
打包完了有两个接式啊

00:46.380 --> 00:48.380
我们一般就用 用这个接式就行了

00:48.380 --> 00:50.380
嗯 然后呢 现在呢 这是这些接式

00:50.380 --> 00:52.380
我们需要在页面上运行啊

00:52.380 --> 00:53.380
对吧 我们要页面上运行

00:53.380 --> 00:55.380
所以说 这是个 Webpack呢

00:55.380 --> 00:57.380
他又没有给我给我们生成页面啊

00:57.380 --> 00:59.380
他又 因为他又不知道你要在哪里运行

00:59.380 --> 01:01.380
所以说 因为我们呢 一般是用 Webpack呢

01:01.380 --> 01:02.380
都在页面上运行

01:02.380 --> 01:04.380
因此呢 我要在这里呢 去写个页面

01:04.380 --> 01:06.380
你看以前我们是不是这样做的

01:06.380 --> 01:07.380
在这里去写个页面

01:07.380 --> 01:09.380
然后在页面上手动写代码

01:09.380 --> 01:11.380
然后引用我们的这个接式

01:11.380 --> 01:13.380
对吧 好像是也没啥吧

01:13.380 --> 01:15.380
这个页面也引用起来了对吧

01:15.380 --> 01:17.380
也没啥 但是呢

01:17.380 --> 01:19.380
如果说我们这个英特斯的接式

01:19.380 --> 01:21.380
一改代码

01:21.380 --> 01:24.380
你看啊 一改代码了过后呢

01:24.380 --> 01:26.380
一打包 你看

01:26.380 --> 01:28.380
问题是不是出现了

01:28.380 --> 01:30.380
首先呢

01:30.380 --> 01:32.380
他把这个垫手目录清空了

01:32.380 --> 01:33.380
我们之前的页面是不是没了

01:33.380 --> 01:35.380
是不是又得重新写

01:35.380 --> 01:36.380
这一个问题

01:36.380 --> 01:38.380
那个说 我就不用这个呗

01:38.380 --> 01:39.380
那不用这个东西

01:39.380 --> 01:41.380
那之前的那个接式还在

01:41.380 --> 01:43.380
另外呢 你要在页面上

01:43.380 --> 01:44.380
是不是还要去引用新的接式

01:44.380 --> 01:46.380
因为文件变了嘛

01:46.380 --> 01:48.380
对吧 你要去引用新的名字

01:48.380 --> 01:49.380
那么这些就是存在问题

01:49.380 --> 01:51.380
所以说 现在我们需要一个插件

01:51.380 --> 01:54.380
能够自动的帮我们来生成页面

01:54.380 --> 01:56.380
那么这个插件呢 就在搞定这件事了

01:56.380 --> 01:58.380
他来自动帮我们生成页面

01:58.380 --> 02:00.380
来复制 啊 一样的

02:00.380 --> 02:02.380
虽然说我现在我知道他怎么用啊

02:02.380 --> 02:04.380
但是呢 还是大家看一下怎么去看

02:04.380 --> 02:06.380
这个 怎么去查阅资料

02:08.380 --> 02:10.380
呃 搜索

02:10.380 --> 02:12.380
Waypack Plugin

02:12.380 --> 02:14.380
好 点进去啊

02:15.380 --> 02:16.380
好 点进去

02:16.380 --> 02:17.380
好 点进去过后呢

02:17.380 --> 02:19.380
他下面就说 你首先安装他

02:19.380 --> 02:20.380
安装他没什么好说的了

02:20.380 --> 02:22.380
然后他说 这里边

02:22.380 --> 02:24.380
其实他里边东西还是蛮多的

02:24.380 --> 02:26.380
提供了很多的可以扩展的地方

02:26.380 --> 02:28.380
Hooks给他提供了很多勾字函数

02:28.380 --> 02:30.380
可以别于扩展上的功能

02:30.380 --> 02:32.380
不过呢 我们一般不会用那么复的

02:32.380 --> 02:34.380
呃 然后呢 下面他说怎么用

02:34.380 --> 02:36.380
用法其实特别简单

02:36.380 --> 02:38.380
怎么用呢

02:38.380 --> 02:39.380
把导入进来

02:39.380 --> 02:40.380
来吧 复制

02:41.380 --> 02:42.380
那导入进来

02:42.380 --> 02:44.380
导入进来 他返回的就是一个

02:44.380 --> 02:45.380
一个勾字函数

02:45.380 --> 02:47.380
然后呢 在Plugins里边

02:47.380 --> 02:49.380
在Plugins里边

02:49.380 --> 02:50.380
你把它溜一个

02:50.380 --> 02:52.380
创建一个插件对象就行了

02:52.380 --> 02:54.380
那么如果有多个插件

02:54.380 --> 02:55.380
顺序怎么写呢

02:55.380 --> 02:57.380
没关系 只要他们不冲突

02:57.380 --> 02:58.380
顺序随便写

02:58.380 --> 02:59.380
因为这两个插件

02:59.380 --> 03:00.380
是不是干的不同的活

03:00.380 --> 03:02.380
对吧 做的事情是不一样的

03:02.380 --> 03:04.380
随便 不冲突的

03:04.380 --> 03:05.380
随便写

03:05.380 --> 03:06.380
然后我们就溜一个

03:06.380 --> 03:08.380
Ethema Waypack Plugin

03:08.380 --> 03:09.380
好 有了这么个东西过后

03:09.380 --> 03:11.380
看我们上的什么都没有配置

03:11.380 --> 03:13.380
他这里边一般是可以写配置的

03:13.380 --> 03:14.380
一般来说插件呢

03:14.380 --> 03:15.380
他在勾字函数里边

03:15.380 --> 03:16.380
都可以允许你传一个对象

03:16.380 --> 03:17.380
来写一些配置

03:17.380 --> 03:19.380
那么我们开始不写配置

03:19.380 --> 03:21.380
不写配置 我们来试一下吧

03:21.380 --> 03:23.380
看一下会有没有效果呢

03:24.380 --> 03:25.380
Waypack

03:25.380 --> 03:26.380
打包

03:26.380 --> 03:28.380
一看是不是页面就已经出来了

03:28.380 --> 03:30.380
他自动地生成一个页面

03:30.380 --> 03:31.380
这个页面很简单

03:31.380 --> 03:32.380
特别简单

03:32.380 --> 03:33.380
就是一个一看

03:33.380 --> 03:34.380
你自己看

03:34.380 --> 03:35.380
我要格式画一下

03:35.380 --> 03:36.380
你看得很清楚了

03:36.380 --> 03:37.380
他就给你写了一个

03:37.380 --> 03:39.380
非常非常简单的页面

03:39.380 --> 03:40.380
然后在页面上

03:40.380 --> 03:42.380
引用了一个GS代

03:42.380 --> 03:44.380
引用了一个GS

03:44.380 --> 03:46.380
那么你觉得他是怎么做的

03:46.380 --> 03:47.380
我们先不说

03:47.380 --> 03:48.380
其他什么配不配置的问题

03:48.380 --> 03:49.380
你觉得

03:49.380 --> 03:51.380
他可能是怎么做的

03:51.380 --> 03:54.760
如果说我们不考虑那么多

03:54.760 --> 03:56.760
他那么多的扩展的功能的话

03:56.760 --> 03:57.760
他的做法

03:57.760 --> 03:59.760
其实特别简单

03:59.760 --> 04:00.760
你看

04:00.760 --> 04:01.760
他怎么做

04:03.760 --> 04:04.760
在MS的时候

04:04.760 --> 04:06.760
生成我们资源的时候

04:06.760 --> 04:07.760
干嘛

04:07.760 --> 04:08.760
他就生成的

04:08.760 --> 04:10.760
利用FS模块

04:10.760 --> 04:12.760
就是loadGS里边的文件处理模块

04:12.760 --> 04:16.760
生成一个页面文件

04:16.760 --> 04:17.760
是不是在这里

04:17.760 --> 04:18.760
生成一个页面文件

04:18.760 --> 04:20.760
然后写页面文件内容的时候

04:20.760 --> 04:23.760
给他自动的加一个script元素

04:23.760 --> 04:24.760
对吧

04:24.760 --> 04:26.760
给他添加一个

04:26.760 --> 04:30.760
给文件内容的合适的位置

04:30.760 --> 04:32.760
他的位置找的是什么呢

04:32.760 --> 04:33.760
找的是body这个位置

04:33.760 --> 04:34.760
body的最后

04:34.760 --> 04:35.760
一般来说

04:35.760 --> 04:36.760
这个位置一般我们不改

04:36.760 --> 04:38.760
其实它里边有些配置是可以改的

04:38.760 --> 04:39.760
只不过我们一般不去改它

04:39.760 --> 04:41.760
给这个文件内容

04:41.760 --> 04:43.760
的合适的位置

04:43.760 --> 04:47.760
添加一个script元素

04:47.760 --> 04:49.760
就相当于是插入一个字不串

04:49.760 --> 04:54.760
那么这个元素的src路径

04:54.760 --> 04:56.760
引用谁呢

04:56.760 --> 04:58.760
引用

04:58.760 --> 04:59.760
就是打包后

04:59.760 --> 05:00.760
因为他这里是不是

05:00.760 --> 05:01.760
MS的这个世界里面

05:01.760 --> 05:02.760
是不是可以读到资源列表

05:02.760 --> 05:04.760
我们之前是不是做过的

05:04.760 --> 05:05.760
plugin里面添加文件列表

05:05.760 --> 05:06.760
对吧

05:06.760 --> 05:07.760
我们可以得到

05:07.760 --> 05:08.760
他有哪些文件要输出

05:08.760 --> 05:09.760
那么找到

05:09.760 --> 05:12.760
引用打包后的解释

05:12.760 --> 05:14.760
他就在做这么一件事

05:14.760 --> 05:16.760
就特别简单

05:16.760 --> 05:17.760
有时候如果说

05:17.760 --> 05:18.760
你要以后学的

05:18.760 --> 05:19.760
乐解释过程

05:19.760 --> 05:20.760
学到fs模块

05:20.760 --> 05:21.760
那么你可以自己去

05:21.760 --> 05:22.760
搞定这件事情

05:22.760 --> 05:24.760
也是可以的

05:24.760 --> 05:25.760
那么这个他的功能

05:25.760 --> 05:26.760
对吧

05:26.760 --> 05:27.760
那么就生成出来了

05:27.760 --> 05:28.760
自动的就引用

05:28.760 --> 05:30.760
生成出来的解释

05:30.760 --> 05:31.760
这是他自动生成页面

05:31.760 --> 05:32.760
那么但是呢

05:32.760 --> 05:34.760
这样子做的好像

05:34.760 --> 05:35.760
有的时候

05:35.760 --> 05:36.760
我们也不希望页面

05:36.760 --> 05:37.760
是长成这个样子

05:37.760 --> 05:38.760
这个样子

05:38.760 --> 05:39.760
我们也不希望看到

05:39.760 --> 05:40.760
那么我们可能

05:40.760 --> 05:41.760
是希望页面

05:41.760 --> 05:43.760
按照我们的方式来生成

05:43.760 --> 05:44.760
比方说

05:44.760 --> 05:45.760
我的页面呢

05:45.760 --> 05:46.760
这里要有一个H1元素

05:46.760 --> 05:47.760
对吧

05:47.760 --> 05:48.760
我们就写个微拍

05:48.760 --> 05:50.760
有一个H1元素

05:50.760 --> 05:51.760
那他自动生成的页面

05:51.760 --> 05:52.760
是不是没有

05:52.760 --> 05:53.760
对不对

05:53.760 --> 05:54.760
那这个时候怎么办呢

05:54.760 --> 05:55.760
他允许你

05:55.760 --> 05:57.760
做这样的一个配置

05:57.760 --> 05:58.760
他这里面有配置

05:58.760 --> 05:59.760
配置在哪

05:59.760 --> 06:00.760
配置在我们的文档里面

06:00.760 --> 06:01.760
你看下面就是配置

06:01.760 --> 06:02.760
Options配置

06:02.760 --> 06:03.760
那这里面就有很多

06:03.760 --> 06:04.760
很多

06:04.760 --> 06:05.760
包括页面标题

06:05.760 --> 06:06.760
这些东西

06:06.760 --> 06:07.760
页面标题

06:07.760 --> 06:08.760
怎么去配

06:08.760 --> 06:09.760
很多

06:09.760 --> 06:10.760
那么其中有一个

06:10.760 --> 06:12.760
我这里呢

06:12.760 --> 06:13.760
我这里干脆

06:13.760 --> 06:14.760
你看这里显示不出来了

06:14.760 --> 06:15.760
对吧

06:15.760 --> 06:16.760
有的时候

06:16.760 --> 06:17.760
npm上的文档

06:17.760 --> 06:18.760
就会出现这种问题

06:18.760 --> 06:19.760
那我们就可以

06:19.760 --> 06:20.760
进它github

06:20.760 --> 06:21.760
github的主页

06:21.760 --> 06:22.760
github上

06:22.760 --> 06:23.760
应该显示的

06:23.760 --> 06:24.760
是比较完整的

06:24.760 --> 06:25.760
找到一下

06:25.760 --> 06:26.760
github主页

06:30.760 --> 06:31.760
好

06:31.760 --> 06:32.760
那么这里

06:32.760 --> 06:34.760
他可以这样配置

06:34.760 --> 06:35.760
可以怎么配置呢

06:35.760 --> 06:37.760
可以配置这个

06:37.760 --> 06:38.760
这个

06:38.760 --> 06:40.760
是file name

06:40.760 --> 06:41.760
还是那个

06:41.760 --> 06:42.760
是template

06:42.760 --> 06:44.760
它可以配置这个template

06:44.760 --> 06:45.760
你看

06:45.760 --> 06:47.760
它可以配置这个template

06:47.760 --> 06:49.760
template表示什么意思呢

06:49.760 --> 06:51.760
就是我生成的页面

06:51.760 --> 06:53.760
按照什么样的模板来生成

06:53.760 --> 06:54.760
你不写模板的话

06:54.760 --> 06:55.760
它就摸着

06:55.760 --> 06:56.760
摸着就是这样的

06:56.760 --> 06:57.760
摸着就是这么一个干干净净的

06:57.760 --> 06:58.760
一天没有

06:58.760 --> 06:59.760
那么如果说你要写模板的话

06:59.760 --> 07:01.760
你可以配置一个文件路径

07:01.760 --> 07:02.760
那么这个文件路径

07:02.760 --> 07:03.760
我们一般来说

07:03.760 --> 07:05.760
是放到这个目录的

07:06.760 --> 07:07.760
public

07:07.760 --> 07:08.760
但不是一定的

07:08.760 --> 07:09.760
这个目录的名字随便去

07:09.760 --> 07:11.760
或者说你不要这个目录

07:11.760 --> 07:12.760
这样也可以随便你放到了

07:12.760 --> 07:13.760
然后这里表

07:13.760 --> 07:14.760
我们去新建一个

07:14.760 --> 07:16.760
index

07:16.760 --> 07:17.760
新建一个

07:17.760 --> 07:18.760
比方说

07:18.760 --> 07:19.760
我们在这里写上一个

07:19.760 --> 07:21.760
webpack

07:21.760 --> 07:22.760
就完了

07:22.760 --> 07:23.760
就写这么一个页面

07:23.760 --> 07:24.760
就表示

07:24.760 --> 07:25.760
请你使用这个页面

07:25.760 --> 07:27.760
就这个文件的内容

07:27.760 --> 07:28.760
来作为模板

07:28.760 --> 07:29.760
来生成最终的

07:29.760 --> 07:30.760
atmos

07:30.760 --> 07:31.760
那么他

07:31.760 --> 07:32.760
我们就可以告诉他

07:32.760 --> 07:33.760
告诉他

07:33.760 --> 07:34.760
在public

07:34.760 --> 07:35.760
目录下面的index

07:35.760 --> 07:36.760
这个位置

07:36.760 --> 07:38.760
去找我们的页面模板

07:38.760 --> 07:39.760
以这个页面模板

07:39.760 --> 07:41.760
来生成我们最终的atmos页面

07:41.760 --> 07:42.760
来吧

07:42.760 --> 07:43.760
我们带来试一下

07:43.760 --> 07:45.760
cli

07:45.760 --> 07:46.760
nps

07:46.760 --> 07:47.760
webpack

07:47.760 --> 07:48.760
生成

07:48.760 --> 07:49.760
好

07:49.760 --> 07:50.760
生成出来了

07:50.760 --> 07:51.760
你看一下

07:51.760 --> 07:52.760
到电蛇里面

07:52.760 --> 07:53.760
index

07:53.760 --> 07:54.760
是不是就是

07:54.760 --> 07:55.760
利用了我们的页面模板

07:55.760 --> 07:56.760
对吧

07:56.760 --> 07:57.760
我们把模板给改一下

07:57.760 --> 07:58.760
比方下面一个

07:58.760 --> 07:59.760
p元素

07:59.760 --> 08:00.760
随便写写

08:00.760 --> 08:04.670
比方lory

08:04.670 --> 08:05.670
lory

08:05.670 --> 08:06.670
好

08:06.670 --> 08:07.670
来

08:07.670 --> 08:08.670
保存

08:08.670 --> 08:09.670
就是

08:09.670 --> 08:10.670
我们在模板里面

08:10.670 --> 08:11.670
是不用去

08:11.670 --> 08:12.670
介石的

08:12.670 --> 08:13.670
因为介石的文件名

08:13.670 --> 08:14.670
你都说不能是多少

08:14.670 --> 08:16.670
因此让他自动去引用

08:16.670 --> 08:19.670
这差点会帮你搞定

08:19.670 --> 08:20.670
好

08:20.670 --> 08:21.670
生成

08:21.670 --> 08:22.670
生成出来了

08:22.670 --> 08:23.670
我们来看一下

08:23.670 --> 08:24.670
就出来了

08:24.670 --> 08:25.670
特别简单

08:25.670 --> 08:26.670
这是关于模板

08:26.670 --> 08:27.670
好

08:27.670 --> 08:28.670
那么接下来

08:28.670 --> 08:29.670
我还要说一些

08:29.670 --> 08:30.670
还有一种情况

08:30.670 --> 08:31.670
就是有可能

08:31.670 --> 08:32.670
我们是多入口

08:32.670 --> 08:33.670
就多个trunk

08:33.670 --> 08:34.670
你看着

08:34.670 --> 08:36.670
我们有两个介石

08:36.670 --> 08:37.670
atmos

08:37.670 --> 08:38.670
index

08:38.670 --> 08:39.670
当然那种没写

08:39.670 --> 08:40.670
那种其实无所谓的

08:40.670 --> 08:41.670
现在这里

08:41.670 --> 08:42.670
写上入口

08:42.670 --> 08:43.670
n去

08:44.670 --> 08:45.670
两个入口

08:45.670 --> 08:47.670
一个是什么呢

08:47.670 --> 08:48.670
index

08:50.670 --> 08:51.670
然后呢

08:51.670 --> 08:52.670
我们刚才改一个名字

08:52.670 --> 08:53.670
home

08:53.670 --> 08:54.670
免得大家搞混淆

08:54.670 --> 08:55.670
我们这里src

08:55.670 --> 08:56.670
index

08:56.670 --> 08:57.670
介石

08:57.670 --> 08:58.670
另一个

08:58.670 --> 08:59.670
trunk

08:59.670 --> 09:00.670
trunk的名字是a

09:00.670 --> 09:01.670
或者叫做

09:01.670 --> 09:02.670
就有a

09:02.670 --> 09:03.670
第二鞋杠

09:03.670 --> 09:04.670
src

09:04.670 --> 09:05.670
index

09:05.670 --> 09:06.670
好

09:06.670 --> 09:07.670
现在我们是不是

09:07.670 --> 09:08.670
两个trunk

09:08.670 --> 09:09.670
好

09:09.670 --> 09:10.670
生存一下

09:10.670 --> 09:11.670
你想一想

09:11.670 --> 09:12.670
会有什么样的结果

09:12.670 --> 09:13.670
你觉得

09:13.670 --> 09:15.670
它应该会怎么来处理

09:15.670 --> 09:16.670
好

09:16.670 --> 09:17.670
生存

09:18.670 --> 09:19.670
好

09:19.670 --> 09:20.670
生存出来了

09:20.670 --> 09:21.670
接下来我们来看一下

09:21.670 --> 09:22.670
电神目录

09:22.670 --> 09:23.670
是不是有两个

09:23.670 --> 09:24.670
adder

09:24.670 --> 09:25.670
就生成了两个bundle

09:25.670 --> 09:26.670
一个是adder.js

09:26.670 --> 09:27.670
一个是home.js

09:27.670 --> 09:28.670
对吧

09:28.670 --> 09:29.670
它是一trunk的名字

09:29.670 --> 09:30.670
不是以这个文件的名字

09:30.670 --> 09:31.670
是以trunk的名字

09:31.670 --> 09:32.670
作为命名的

09:32.670 --> 09:33.670
所以大家要去分开

09:33.670 --> 09:34.670
然后呢

09:34.670 --> 09:35.670
我们的页面上的关键是

09:35.670 --> 09:37.670
你看一下页面上

09:37.670 --> 09:38.670
页面上呢

09:38.670 --> 09:39.670
它是不是把两个

09:39.670 --> 09:40.670
js都引用进来了

09:40.670 --> 09:41.670
对吧

09:41.670 --> 09:42.670
是不是把两个js

09:42.670 --> 09:43.670
都引用进来了

09:43.670 --> 09:44.670
那么这个说明

09:44.670 --> 09:45.670
是不是我们说明刚才说的

09:45.670 --> 09:46.670
元素src路径

09:46.670 --> 09:47.670
打包过后的js

09:47.670 --> 09:48.670
那么它发现有多个js

09:48.670 --> 09:50.670
那就生成多个script元素

09:50.670 --> 09:51.670
分别去引用

09:51.670 --> 09:53.670
两个js都引用进来了

09:53.670 --> 09:55.670
那大家还记得吗

09:55.670 --> 09:56.670
我们当时说的

09:56.670 --> 09:57.670
有一个东西

09:57.670 --> 09:58.670
最佳时间里面

09:58.670 --> 09:59.670
你看

09:59.670 --> 10:04.010
就是我们有一种

10:04.010 --> 10:05.010
场景的就是

10:05.010 --> 10:06.010
有可能有多个页面

10:06.010 --> 10:07.010
每一个页面

10:07.010 --> 10:09.010
只用一个js

10:09.010 --> 10:10.010
对吧

10:11.010 --> 10:13.010
而不想用多个

10:13.010 --> 10:14.010
它现在是把

10:14.010 --> 10:15.010
全部的js引用进来了

10:15.010 --> 10:16.010
那么这个情况

10:16.010 --> 10:17.010
怎么来解决呢

10:17.010 --> 10:18.010
这个情况呢

10:18.010 --> 10:19.010
你可以配置

10:19.010 --> 10:20.010
它里面一个配置叫做

10:20.010 --> 10:22.010
其实我们看一看文档

10:22.010 --> 10:23.010
就要看文档

10:23.010 --> 10:26.010
它里面一个配置叫做

10:26.010 --> 10:28.010
trunks

10:28.010 --> 10:29.010
你懂了对吧

10:29.010 --> 10:30.010
你懂了

10:30.010 --> 10:31.010
trunks什么意思

10:31.010 --> 10:32.010
你觉得什么意思

10:32.010 --> 10:33.010
就表示我要生成的

10:33.010 --> 10:34.010
这个页面

10:34.010 --> 10:35.010
我要生成的

10:35.010 --> 10:36.010
就是我以这个模板

10:36.010 --> 10:37.010
来生成页面

10:37.010 --> 10:39.010
我要生成的这个页面

10:39.010 --> 10:40.010
生成的这个页面

10:40.010 --> 10:42.010
这个页面呢

10:42.010 --> 10:43.010
它要

10:43.010 --> 10:44.010
它使用的js

10:44.010 --> 10:46.010
是哪个trunk

10:46.010 --> 10:47.010
出来的js

10:47.010 --> 10:49.010
它就是这么一个意思

10:49.010 --> 10:50.010
那么它是一个数组

10:50.010 --> 10:52.010
它是一个数组

10:52.010 --> 10:53.010
明白这个意思吧

10:53.010 --> 10:54.010
它是一个数组

10:54.010 --> 10:56.010
它的默认值是o

10:56.010 --> 10:57.010
o什么意思

10:57.010 --> 10:58.010
就表示我要使用

10:58.010 --> 10:59.010
所有的trunks

10:59.010 --> 11:00.010
所有的trunks打包出来的

11:00.010 --> 11:01.010
我都要用

11:01.010 --> 11:02.010
默认值是o

11:02.010 --> 11:03.010
你看o

11:03.010 --> 11:04.010
我们把它写成o

11:04.010 --> 11:05.010
来看一下

11:05.010 --> 11:07.900
打包

11:07.900 --> 11:08.900
打包完了过后

11:08.900 --> 11:09.900
你看一下

11:09.900 --> 11:10.900
这个intel

11:10.900 --> 11:11.900
是不是就一样的

11:11.900 --> 11:12.900
两个js

11:12.900 --> 11:13.900
格式化一下

11:13.900 --> 11:14.900
你看是不是两个js

11:14.900 --> 11:15.900
对吧

11:15.900 --> 11:16.900
那么我们是不是可以

11:16.900 --> 11:17.900
通过一个数组

11:17.900 --> 11:18.900
另外一种的方式

11:18.900 --> 11:19.900
就通过一个数组

11:19.900 --> 11:20.900
来告诉它

11:20.900 --> 11:22.900
你到底使用哪些trunk

11:22.900 --> 11:23.900
那么这里面

11:23.900 --> 11:24.900
每个数组里面

11:24.900 --> 11:25.900
一项就是trunk的名称

11:25.900 --> 11:26.900
注意是trunk的名称

11:26.900 --> 11:27.900
不是这个文件的名称

11:27.900 --> 11:28.900
不是这个入口的文件

11:28.900 --> 11:29.900
搞清楚

11:29.900 --> 11:30.900
是trunk的名称

11:30.900 --> 11:31.900
你要使用哪个

11:31.900 --> 11:32.900
trunk打包出来的js

11:32.900 --> 11:33.900
那么这里呢

11:33.900 --> 11:34.900
我们是不是只使用home

11:34.900 --> 11:35.900
比方说

11:35.900 --> 11:37.900
我们只使用home

11:37.900 --> 11:38.900
来打包出来的

11:38.900 --> 11:39.900
名称

11:40.900 --> 11:41.900
来 我们来看一下

11:41.900 --> 11:42.900
打包

11:44.900 --> 11:45.900
你看一下

11:45.900 --> 11:46.900
intel是intel

11:46.900 --> 11:47.900
是不是只有一个js

11:47.900 --> 11:48.900
对吧

11:48.900 --> 11:49.900
就只有一个js

11:49.900 --> 11:50.900
就这么简单

11:50.900 --> 11:51.900
trunk

11:51.900 --> 11:52.900
trunk

11:52.900 --> 11:53.900
因为它说

11:53.900 --> 11:55.900
那这个生成的文件名

11:55.900 --> 11:56.900
我能不能改的

11:56.900 --> 11:57.900
它文件名一定是intel

11:57.900 --> 11:58.900
是intel

11:58.900 --> 11:59.900
我能不能改它的文件名

11:59.900 --> 12:00.900
可以

12:00.900 --> 12:01.900
通过什么呢

12:01.900 --> 12:03.900
通过这个file.in

12:03.900 --> 12:04.900
file.in

12:04.900 --> 12:05.900
这个file.in

12:05.900 --> 12:06.900
就是改变它

12:06.900 --> 12:08.900
这是改变它生成出来的

12:08.900 --> 12:09.900
这个文件名

12:09.900 --> 12:10.900
你详细什么名字

12:10.900 --> 12:11.900
就写什么名字

12:11.900 --> 12:13.900
一般我们就可以写个home

12:13.900 --> 12:14.900
点一下名吧

12:14.900 --> 12:15.900
比方说

12:15.900 --> 12:17.900
真的出这么一个文件

12:17.900 --> 12:19.900
这个文件名

12:19.900 --> 12:20.900
打包

12:20.900 --> 12:21.900
你看

12:21.900 --> 12:22.900
是不是出来了

12:22.900 --> 12:23.900
对吧

12:23.900 --> 12:24.900
出来了

12:25.900 --> 12:26.900
好 这是这种情况

12:26.900 --> 12:27.900
一看

12:27.900 --> 12:28.900
home点一下名

12:28.900 --> 12:29.900
对吧

12:29.900 --> 12:30.900
那有同学说

12:30.900 --> 12:31.900
那现在我们有两个入口

12:31.900 --> 12:33.900
那现在我们要做多个页面

12:33.900 --> 12:34.900
每个页面用不同的创口

12:34.900 --> 12:35.900
那怎么办呢

12:36.900 --> 12:37.900
你看

12:37.900 --> 12:38.900
一个插件

12:38.900 --> 12:39.900
它这个插件的功能

12:39.900 --> 12:40.900
对吧

12:40.900 --> 12:41.900
一个插件的对象

12:41.900 --> 12:42.900
它生成一个页面

12:42.900 --> 12:43.900
对不对

12:43.900 --> 12:44.900
根据一个模板

12:44.900 --> 12:45.900
来生成一个页面

12:45.900 --> 12:47.900
然后使用一些创口

12:47.900 --> 12:48.900
那我们

12:48.900 --> 12:49.900
要做多个页面

12:49.900 --> 12:51.900
无非多使用几次

12:51.900 --> 12:52.900
这个插件就完事了

12:52.900 --> 12:53.900
你再来一次

12:53.900 --> 12:54.900
它是一个实力

12:54.900 --> 12:55.900
对不对

12:55.900 --> 12:57.900
通过各种创建的实力

12:57.900 --> 12:58.900
每一个对象

12:58.900 --> 13:00.900
它有自己的一套功能

13:00.900 --> 13:01.900
是独立的

13:01.900 --> 13:02.900
因此你再来一个就行了

13:02.900 --> 13:03.900
使用的模板

13:03.900 --> 13:04.900
还是这个模板

13:04.900 --> 13:06.900
以这个模板来生成一个页面

13:06.900 --> 13:07.900
那么生成的文件名字

13:07.900 --> 13:08.900
该改一下

13:08.900 --> 13:09.900
改成了A的页面

13:09.900 --> 13:11.900
使用的创口该改一下

13:11.900 --> 13:12.900
改成什么

13:12.900 --> 13:13.900
A这个创口

13:13.900 --> 13:14.900
你看

13:14.900 --> 13:17.400
现在在打爆

13:17.400 --> 13:18.400
运行

13:18.400 --> 13:20.780
出来了

13:20.780 --> 13:21.780
你看

13:21.780 --> 13:22.780
是不是多了一个A的页面

13:22.780 --> 13:23.780
它引用的是谁

13:23.780 --> 13:24.780
它引用的是A

13:24.780 --> 13:25.780
那么Home

13:25.780 --> 13:26.780
它引用的是Home

13:26.780 --> 13:27.780
对吧

13:27.780 --> 13:28.780
它就自动帮你生成一页面的

13:28.780 --> 13:29.780
它就干这件事

13:29.780 --> 13:30.780
其他人算了

13:30.780 --> 13:31.780
它也不管

13:31.780 --> 13:32.780
它也不管

13:33.780 --> 13:34.780
那如果说

13:34.780 --> 13:35.780
我们再来

13:35.780 --> 13:37.780
说说我们的电视里边

13:37.780 --> 13:39.780
写了一个目录

13:39.780 --> 13:41.780
比方说我们写了一个目录

13:41.780 --> 13:42.780
我们把它写

13:42.780 --> 13:43.780
不在这写

13:43.780 --> 13:44.780
比方说我们在这里

13:44.780 --> 13:45.780
配置里边

13:45.780 --> 13:46.780
我们希望

13:46.780 --> 13:47.780
它的输出

13:47.780 --> 13:49.780
是在一个script文件箱下面

13:49.780 --> 13:50.780
是在这

13:50.780 --> 13:51.780
那行不行

13:51.780 --> 13:52.780
你看

13:52.780 --> 13:56.500
那行不行

13:57.500 --> 13:58.500
好

13:58.500 --> 13:59.500
所以我们把我们的介绍

13:59.500 --> 14:00.500
放到这儿来了

14:00.500 --> 14:01.500
放到这个script文件箱里面了

14:01.500 --> 14:02.500
那么A里边

14:02.500 --> 14:03.500
你看

14:03.500 --> 14:04.500
它会自动去找这个文件箱

14:04.500 --> 14:05.500
它为什么能找到

14:05.500 --> 14:06.500
大家想一想

14:06.500 --> 14:07.500
为什么能找到

14:07.500 --> 14:09.500
还不就是因为

14:09.500 --> 14:10.500
它能够读取什么呢

14:10.500 --> 14:12.500
读取一个

14:12.500 --> 14:13.500
sets

14:13.500 --> 14:14.500
sets 是不是一个数组

14:14.500 --> 14:15.500
我们之前见过的

14:15.500 --> 14:16.500
你看

14:16.500 --> 14:17.500
数组

14:17.500 --> 14:18.500
我们之前在写plugging的时候

14:18.500 --> 14:19.500
是不是写过这个东西

14:23.500 --> 14:24.500
在这

14:24.500 --> 14:25.500
天然文件列表

14:26.500 --> 14:27.500
那么我们是不是

14:27.500 --> 14:28.500
可以得到这个sets

14:28.500 --> 14:30.500
是一个数组

14:30.500 --> 14:31.500
不是数组

14:31.500 --> 14:32.500
是一个对象

14:32.500 --> 14:33.500
对象里面的key

14:33.500 --> 14:34.500
其实它就是

14:34.500 --> 14:36.500
最终要生成的

14:36.500 --> 14:38.500
文件路径

14:39.500 --> 14:41.500
就是要生成的文件名

14:41.500 --> 14:42.500
那么这个文件名

14:42.500 --> 14:43.500
你看

14:46.500 --> 14:47.500
在这

14:47.500 --> 14:48.500
在这

14:48.500 --> 14:49.500
这个文件名里面

14:49.500 --> 14:50.500
是不是包含这个

14:50.500 --> 14:51.500
那么最终生成出来的文件名

14:51.500 --> 14:52.500
它就是

14:52.500 --> 14:53.500
它怎么生成出来的

14:53.500 --> 14:55.500
它的文件名就是这个

14:57.500 --> 14:58.500
script

14:59.500 --> 15:00.500
然后

15:00.500 --> 15:02.500
A.8.316.4

15:02.500 --> 15:04.500
生成出来就这个玩意

15:04.500 --> 15:05.500
对吧

15:05.500 --> 15:06.500
文件的内容

15:06.500 --> 15:07.500
对面的内容是什么

15:07.500 --> 15:08.500
就是source

15:08.500 --> 15:09.500
是什么

15:09.500 --> 15:10.500
什么什么东西

15:10.500 --> 15:11.500
一个函数

15:11.500 --> 15:12.500
它反回一个文件内容

15:12.500 --> 15:13.500
然后size

15:13.500 --> 15:14.500
是什么

15:14.500 --> 15:16.500
一个函数反回文件大成

15:16.500 --> 15:17.500
这个东西

15:17.500 --> 15:18.500
它是可以读得到的

15:18.500 --> 15:19.500
所以说

15:19.500 --> 15:20.500
根本就不用担心

15:20.500 --> 15:22.500
它是可以搞定这件设计的

15:22.500 --> 15:23.500
ok 那么这就是

15:23.500 --> 15:24.500
这个插件的用法

15:24.500 --> 15:25.500
这个插件

15:25.500 --> 15:26.500
其实它的功能

15:26.500 --> 15:27.500
其实还蛮多的

15:27.500 --> 15:28.500
功能特别多

15:28.500 --> 15:29.500
看一下

15:29.500 --> 15:30.500
下面我记得

15:30.500 --> 15:31.500
它给你画了一张

15:31.500 --> 15:32.500
它的就是

15:32.500 --> 15:33.500
它的执行流程图

15:33.500 --> 15:34.500
哪些地方是可以扩展的

15:34.500 --> 15:35.500
不过我们平时

15:35.500 --> 15:37.500
根本就用不了那么多

15:37.500 --> 15:38.500
当你真的是需要

15:38.500 --> 15:40.500
用那么细的功能的时候

15:40.500 --> 15:41.500
那个时候

15:41.500 --> 15:43.500
我都不知道你开发的是什么

15:43.500 --> 15:46.500
细到什么样的项目了

15:46.500 --> 15:47.500
那么那个时候

15:47.500 --> 15:48.500
你可以再来查一查文档

15:48.500 --> 15:49.500
那个时候你看文档

15:49.500 --> 15:50.500
一点问题都没有

15:50.500 --> 15:51.500
所以我们现在就了解

15:51.500 --> 15:52.500
它能干什么

15:52.500 --> 15:53.500
它能干什么呢

15:53.500 --> 15:54.500
它能生成ATM文件

15:54.500 --> 15:55.500
就这么一件事

15:55.500 --> 15:57.500
ok 这是关于

15:57.500 --> 15:58.500
这个就是

15:58.500 --> 15:59.500
自动生成页面的插件

15:59.500 --> 16:00.500
它的名字叫做

16:00.500 --> 16:03.500
ATMWebPanG

