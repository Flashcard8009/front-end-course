WEBVTT

00:00.560 --> 00:04.140
咱们这一课讲一个非常简单的

00:04.400 --> 00:07.220
也很实用的这么一个例子

00:07.720 --> 00:09.780
就是关于环境的区分

00:10.040 --> 00:12.600
其实大家现在看到了 微Pike里边

00:12.860 --> 00:15.920
我们是有一个配置文件在发挥作用对吧

00:16.180 --> 00:17.720
这个配置文件它在发挥作用

00:18.220 --> 00:20.780
那么这个配置文件里边它有可能会出现这种情况

00:21.300 --> 00:23.340
就是我们将来打包

00:23.600 --> 00:24.620
根据我们的元代吧打包

00:24.880 --> 00:27.440
它有可能是生产环境的打包 有可能是

00:27.700 --> 00:30.000
开发环境的打包

00:30.560 --> 00:33.880
那么它不仅仅是区别在于这个 它区别可能很多

00:34.140 --> 00:37.220
比方说吧 去个例子 我们之前不是学过DevTool吗对吧

00:37.480 --> 00:41.300
开发环境下面我们可能就非常粗暴的使用sourcemap

00:41.560 --> 00:42.860
直接生成一个sourcemap文件

00:43.880 --> 00:44.640
那么在

00:44.900 --> 00:50.280
生产环境里边我们可能不需要这样的生产 生产环境里边可能是需要另外一种

00:51.800 --> 00:53.080
就它有很多的配置呢

00:53.600 --> 00:57.960
它都可能需要进行区分 比方说生产环境 我都忘了 这些东西我记不住

00:58.460 --> 00:59.740
我看一下中文文档

01:00.200 --> 01:03.280
那个关于DevTool配置

01:03.780 --> 01:05.580
DevTool配置 它这里边有说对吧

01:05.840 --> 01:06.860
生产环境

01:08.140 --> 01:10.180
生产环境

01:10.700 --> 01:11.980
生产环境那里可以使用浪

01:12.240 --> 01:12.740
比方说

01:13.000 --> 01:14.800
那咱们生产环境就需要使用浪

01:15.060 --> 01:17.860
开发环境使用这个 生产环境使用这个

01:18.120 --> 01:19.400
那么在

01:19.920 --> 01:22.220
开发环境里边我们肯定要使用这个development

01:22.480 --> 01:24.260
生产环境是不是要使用mode

01:24.520 --> 01:25.300
production

01:25.560 --> 01:26.060
对不对

01:26.160 --> 01:32.680
就是有些配置你会发现 甚至有可能一些家载器在生产环境里边和在开发环境里边可能都不太一样

01:33.180 --> 01:34.720
因此我们可能需要

01:35.480 --> 01:39.060
要根据不同的环境去做不同的配置

01:39.320 --> 01:42.920
那么这里如果说我不讲这些课 你们能不能想到一些办法

01:44.180 --> 01:44.960
能不能想到

01:45.980 --> 01:50.080
想办法呗 你可以暂停视频好好想一想 就我们现在的知识能不能想到

01:50.340 --> 01:52.900
为生产环境和开发环境 指定不同的配置

01:53.880 --> 01:56.180
当然可以 为什么不能想不到呢

01:56.440 --> 02:00.520
比方说吧 我们就可以非常粗暴一点啊 我们就可以直接借两个配置文件呗

02:00.880 --> 02:03.720
一个是什么呢 生产环境 生产环境来吧

02:04.240 --> 02:09.320
生产环境就就就webpack就比方说pro 第二什么

02:10.440 --> 02:11.240
介事啊

02:12.000 --> 02:14.480
这是一个生产环境的 导出生产环境的配置

02:15.400 --> 02:17.000
export 就这些东西啊

02:17.680 --> 02:18.180
嗯

02:18.720 --> 02:22.640
当我们遇到这样的问题的时候 大家尽量的尝试这些动脑 先想一想

02:23.040 --> 02:27.520
好 dev 点解释 那么这个导出开发环境的一些配置 对吧 导两个配置

02:28.240 --> 02:32.720
然后呢 我们再拍一点节省里边 是不是配两个命令就完事了 第一个命令啊 然后呢 就是

02:33.560 --> 02:38.560
呃 比如说啊 这个是dev 啊 dev 命令 那么我们就这样子运行 webpack

02:39.480 --> 02:46.400
好 然后呢 给他指定配置文件 对吧 你之前不是摸着是这个配置文件吗 我不用你的摸着配置文件 我给你指定一个配置文件

02:46.620 --> 02:54.700
配置文件为什么呢 为webpack.dev.js 可不可以 当然可以啊 对吧 生产环境 那么我们用什么呢

02:55.300 --> 02:55.860
就要bill的

02:57.100 --> 03:00.940
或者叫做prod 都行啊 看你用什么单词 这些都无所谓

03:01.420 --> 03:04.180
好 那么我们就另外一个配置文件 对吧 也可以搞定

03:05.180 --> 03:12.380
webpack.prod.js 那咱们来试一下吧 那看能不能搞定 那绝对可以搞定的 好 比方说我们这里dev

03:12.440 --> 03:16.720
我们该设置mode development 对吧 然后呢

03:18.200 --> 03:21.400
dev dev tool 设置为什么呢 设置为

03:22.520 --> 03:23.360
设置什么 source map

03:24.560 --> 03:26.200
ok 然后呢 在

03:27.320 --> 03:30.320
这是开发环境啊 生产环境 生产环境我们把它复制一下啊

03:31.520 --> 03:34.080
生产环境里边 我们这里呢 production

03:35.120 --> 03:41.000
production 那么dev tool呢 我们是这里就设置了 对吧 是可以搞定 绝对可以搞定的

03:41.500 --> 03:46.380
没问题吧 好 那咱们来试一下呗 看一下是不是能够区分啊 这里吧 我把电视摩托商了

03:47.460 --> 03:54.140
来吧 就用np m wrong 那我们生产环境 我们就用dev 你看一下 它打不出来

03:55.580 --> 04:01.300
好 打不出来 是不是有个source map 对吧 而且这里边是生产环境代码 开发环境代码 好 来 现在我们用

04:02.540 --> 04:03.020
np

04:04.060 --> 04:06.420
装prod 啊 开发环境

04:07.400 --> 04:12.800
啊 就是生产环境 好 你看 是不是只有一个啊 生产环境 对吧 也可以实现区分 对不对

04:13.360 --> 04:17.680
那这里有什么问题呢 没啥问题 说实话 没啥问题

04:18.880 --> 04:26.080
嗯 那如果说有些同学说 那有相同的配置 怎么办啊 生同配置 我们再写个文件呗 然后在这里边是不是可以使用对象混合 在导出之前

04:26.560 --> 04:33.000
我们把个 把之前那个文件拿到 然后呢进一混合 对吧 也可以办到啊 不是说办不到 绝对可以办到的啊

04:33.980 --> 04:41.980
嗯 那么我们这一刻呢 只是给大家讲的是另外一种方案啊 也就是说未拍可能他还给我们提供了一种方案啊 也让我们来实现相类似的事情

04:42.220 --> 04:45.580
我们了解一下就行了 所以说这些东西想办法啊 因为发现了

04:46.260 --> 04:51.900
其实不不不学到一刻能不能能不能区分 到招样能够区分 这想办法绝对能够办到的

04:52.580 --> 04:54.660
好 那么现在我们来讲一个什么事呢 就是说

04:55.620 --> 05:00.820
未拍可能他针对这种情况呢 他给你提供了一种啊 可以更加更加方便的一种方案

05:01.120 --> 05:06.920
就是什么呢 一种你在配置里边导出啊 就刚才我们这种是不是没有用到这个配置 这个配置就完全没用到了 对吧

05:07.320 --> 05:13.520
那么未拍可能他说嗯 我们还是使用同一个配置 只不过呢 我现在呢可以允许你

05:15.320 --> 05:20.480
导出这个配置的时候呢 可以不是一个对象 可以是一个函数 你看这是不是个函数

05:21.000 --> 05:25.600
也就说啥呢 就是这个在这个这个配置里边 我们无论是生产环境

05:26.020 --> 05:32.420
还是开发环境 我们都使用同一套配置 而是使用同一个配置文件 不具体那么多的配置文件

05:33.180 --> 05:40.780
那么在这个配置文件里边呢 我们可以允许你不去直接导出的对象 因为导出的对象就固定了 对吧 要么就生产环境 要么就开发环境

05:41.100 --> 05:46.220
我可以允许你导出一个函数啊 导出一个函数 当然你可以用建筒函数也可以用别的

05:46.620 --> 05:51.260
这个函数里边呢 有个参数啊 我们一会再说这个参数 你在这个函数里边返回一个结果

05:51.760 --> 05:57.520
在函数里边返回结果 那么我们这两个文件就删了

05:58.720 --> 06:05.040
放着吧 放着吧 但是这两个文件是不是没用到了 那么我们这里呢 在npm阶层里边啊 我们把它去去掉

06:06.840 --> 06:11.600
去掉 都是为牌 都是为牌的 目前都是啊 都都一样

06:12.680 --> 06:20.520
那么无论你是生产环境 还是你是开发环境 是不是都可以使用这个配置啊 都可以使用这个配置 来 我们试一下啊 当然现在还没发区分 我们一会再说

06:21.320 --> 06:27.160
然后呢 我们这里 比方说我们不用npm 只用npmx 微pike 直接用微pike 你看 照样能够打爆

06:28.960 --> 06:33.560
运行 好 打包完成 你看 是不是开发环境啊 好 你把这里改成 打个型

06:34.280 --> 06:39.180
说明这个配置是不是生效了 在运行 好 你看

06:39.980 --> 06:51.100
是不是可以打包完成 说明这个配置是生效的 他是支持的 他支持力 导出一个函数 那么这个函数 什么是运行的 他是在勾件的时候 就是我们运行微pike命令的时候 他就会直接找到这个配置文件

06:51.560 --> 07:00.160
运行的没有指定配置文件嘛 我也没有运行这个命令 没有指定配置文件的时候 你看我直接运行的 没有指定配置文件 没有指定配置文件 他是会用这个配置文件

07:00.480 --> 07:06.520
他发现他导出了这个函数 ok 那么他就直接调用这个函数 把这个函数的反回来这个对象

07:07.240 --> 07:08.840
来作为配置那种

07:10.280 --> 07:15.480
那么我们既然是函数 是不是可以在函数里面进行判断 如果是生产环境

07:16.060 --> 07:26.740
对吧 那我怎么办呢 我给你返回一个生产环境的对象 是不是可以这样做啊 如果是开发环境的话 我给你返回

07:27.820 --> 07:41.660
开发环境的对象 是不是可以这样做了 我们在函数里面是不可以配置的 对吧 那么现在问题又在于我们怎么来区分生产环境 还是开发环境的怎么来区分呢 他也考虑到这个问题 那么他就这样做的

07:42.640 --> 07:52.400
啊 他让你呢 他可以传了一个参数进来 实际上那个参数不止一个啊 与两个 不过第二个参数呢 我们平时不怎么用啊 我们就如果说要用这种方式的话 一般就用第一个参数就行了

07:52.880 --> 07:58.280
他会给你传入一个 传入一个参数进来 就是m 叫做environment 叫做环境

07:59.240 --> 08:01.520
那么这个参数的值是什么呢 我们打印一下

08:02.800 --> 08:04.200
啊 我们这里先把注射掉

08:05.640 --> 08:07.680
return 啊 先随便return这个东西吧

08:08.180 --> 08:15.150
return 啊 没了

08:16.270 --> 08:19.390
development

08:20.390 --> 08:24.110
随便return这个东西 我们这里主要是打印一下这个m 看一下到底是啥

08:27.790 --> 08:30.310
npxwpack 看一下吧 到底是个啥

08:31.350 --> 08:32.550
你看 打印出来是undefend

08:33.150 --> 08:38.550
他什么都没有啊 那怎么来区分呢 他是这么回事儿 就这个东西 这个里边的东西呢

08:38.770 --> 08:42.810
他是需要你在命令中传入的 那怎么来传呢 看下面的例子

08:43.930 --> 08:47.170
如果说我们运行这个命令的时候呢 加上两个横杠一个n

08:48.050 --> 08:51.690
好 也后面跟上一个abc 那么这个n5的值呢 就是abc

08:52.210 --> 08:54.570
懂了吗 就这么简单 你想给他传什么就传什么

08:55.090 --> 08:59.490
那么比方说我们用这种方式 n5.abc 那就是把n5当对象了 对吧

08:59.810 --> 09:05.730
那么他传入的n5呢 就是一个对象 对象里面一个属性abc等于2 表示有abc这个属性

09:06.630 --> 09:12.030
如果说你这样子传n5.abc 就把他当成对象 以为一个属性 给他复制为1

09:12.430 --> 09:16.830
他就给你传的n5就是什么东西的 就是一个对象 对象里面一个abc属性

09:17.150 --> 09:23.910
只为1 你看就明白了 啊 比方说我们这里n5.abc等于1 还空格n5.bcd等于2 那么传入一个对象abc1

09:24.030 --> 09:26.390
bcd2 那么这样子呢 是不是就可以

09:27.230 --> 09:31.230
在代码中获取了 对吧 那比方说啊 咱们可以 完全可以这样做

09:31.770 --> 09:41.330
vipack 我们这里呢 用一个n5.bcd2 呃 用个什么呢 随便取什么属性啊 属性 属性 随便来 不是说必须要什么属性 比方说我们就用prod

09:42.210 --> 09:44.130
你看一下吧 啊 回车

09:45.210 --> 09:48.010
你看 打印出来 是不是 一个对象 对象里面有prod等于2

09:48.810 --> 09:56.730
对吧 嘿 那我们怎么来 怎么来我这件事 这就很简单了 我们生产环境里边只要配置 apart 断一下 n5 有没有值

09:57.710 --> 10:06.710
有值 并且n5里边有一个prod属性 它为true 说明是什么 说明prod production 说明它是生产环境 但那个名字 随便取的

10:07.150 --> 10:15.110
生产环境 那么我们就能够返回一个生产环境的东西 生产环境 说实际上就可以mode等于dead production

10:16.630 --> 10:18.390
然后呢 dev2

10:19.370 --> 10:21.250
啊 使用什么呢 使用那个

10:22.330 --> 10:28.850
没有啊 但或者是不配置 dev2都可以啊 它mode就没有 好那么开发环境的我们return 返回一个什么mode

10:30.010 --> 10:30.610
prod production

10:32.330 --> 10:35.090
dead to 得到什么呢 source map

10:36.290 --> 10:40.130
对吧 我们是不是可以这样做 那么这样做是不是只用了一个配置问题就可以搞定了

10:40.570 --> 10:44.690
对吧 就更加灵活了 好那么这两个配置问题是不是可以没有啊 放 扔着吧 我们一会再说

10:45.110 --> 10:49.750
那么在在个 这里边啊 命令里边我只需要指定m5的值就行了啊 对吧

10:51.310 --> 10:53.630
只需要在那个prod的时候 指定一下

10:54.230 --> 11:01.030
m5 第二是吧prod 做完了 对不对 你看看是不是这个道理啊 我这里就不指定m5 那么m5就是

11:01.430 --> 11:03.510
就是undefined的 那么自然会进AOS

11:04.470 --> 11:05.550
诶 写反了是吧

11:06.990 --> 11:09.310
哦 没写 哦 这里写错了 develop

11:09.790 --> 11:10.990
development

11:11.810 --> 11:19.490
就这么个意思 好 接下来我们来看一下吧 试一下 那么现在我们就npm run dev 你看可以实现一样的效果

11:21.210 --> 11:24.530
你看 是不是出了两个文件 对吧 没问题吧 好 删掉啊

11:25.770 --> 11:26.250
好 再来

11:27.930 --> 11:28.490
np

11:29.490 --> 11:34.010
我这里顺便说一下啊 其实这个design mode啊 我们一般是不会把它

11:35.290 --> 11:37.610
就是打包出去 就是不会显示出去了啊

11:38.070 --> 11:43.030
design mode是不会显示出去了 也就是不是不会受git控制的 因为git里边一般会多加一个git

11:43.390 --> 11:49.750
就是design mode 一般会加上这个东西 只不过呢 我这里呢 主要是大家希望大家用这个课件呢

11:50.470 --> 11:58.150
能够看到最终打包结果啊 所以说我放在这了 一般来说我们是要忽略design的 因为我们把工程一分享出去 它们自己运行一个命令下就可以打包了

11:58.510 --> 11:59.870
不需要我们 我们给它打包好了

12:00.510 --> 12:04.030
好 再顺便说一下 好 现在我们运行npm run proud

12:04.930 --> 12:05.130
离开

12:07.740 --> 12:12.020
pro的为处了 对吧 得到的结果 那么是不是就生产环境打包了 那么这样子是不是可以区分了

12:13.580 --> 12:14.220
那有人说

12:15.060 --> 12:21.620
哎 你这样子区分了 哎呀 他麻烦了感觉 因为我这里的一个代码会议是不是越写越多 写一大堆啊 看着很不舒服

12:22.260 --> 12:27.020
那么我们能不能分出去了 这个随便你 随便你怎么分出去 你像这个东西怎么能分出去 随便分出去啊

12:27.420 --> 12:30.580
你把这个玩意儿起到哪 起到这里边 对吧

12:31.380 --> 12:33.940
没问题吧 然后这个玩意儿起到这里边 对不对

12:34.400 --> 12:36.720
好 然后这边怎么办 这边怎么办

12:37.760 --> 12:39.600
返回啥 返回require

12:40.400 --> 12:48.760
自己就很灵活了 对吧 这个wip pack 这个东西根本就不是wip pack功能了 就是node.js的功能 随便你怎么玩 说返回这个玩意儿

12:49.440 --> 12:51.600
对不对 就是pro out 说

12:52.400 --> 12:54.120
对吧 返回这个玩意儿 那么这里呢

12:56.480 --> 12:56.960
所以返回

12:58.040 --> 12:59.720
这个dev 对不对

13:00.580 --> 13:04.580
把导入这个内容 然后返回 所以一样的效果 对吧 来 试一下

13:05.300 --> 13:06.180
肯定是一样的效果

13:08.980 --> 13:09.780
那么这里呢

13:11.780 --> 13:16.980
那么这里刚才就是开发环境 对吧 开发环境没给参数嘛 没给环境的值

13:17.540 --> 13:21.420
好 那么现在呢 我们使用npm runpro out 那你看

13:24.020 --> 13:30.460
好 那么这样子呢 我就可以把 这样子可以进行分割 对吧 配置为你分割 那这东西全是我们自行处理的 根本就不是wip pack功能

13:30.520 --> 13:32.640
wip pack就是给你提供一个函数 你自己搞定

13:33.520 --> 13:42.400
你随便你怎么玩 这里玩的画样可多了 好 那么这里呢 是不是可以把我们用人为的把分割成两个文件 对吧 以后呢 我们只需要配置这两个文件 开发环境配合 开发的

13:42.720 --> 13:43.720
争产环境配争产的

13:44.520 --> 13:52.200
那如果说开发环境和争产的里边有些相同的东西呢 比方说 像是什么 n 缺一般都是像一样的 对吧 n 缺啊src啊index

13:52.600 --> 13:56.160
对吧 第二届是 n 缺啊 比方说我们这要配置output

13:56.460 --> 14:03.900
嗯 输出啊 输出我们可以配置个file net 啊file net 配置到哪呢 啊 比方说sqlp 程目录下面的 哪个地方呢

14:05.340 --> 14:06.100
net

14:07.100 --> 14:07.500
哈希

14:08.380 --> 14:11.460
第二解释 啊 比方说我们有这么一些相同的配置

14:12.180 --> 14:18.820
你看吧 那么这些配置是不是两个文件都有啊 两个文件都有 他们是相同的 他们并没有差异 对吧 那么这个东西怎么处理呢

14:19.240 --> 14:29.080
vpec根本不给你处理 自行搞定啊 你这东西你都是漏的环境了 你都会开发gs 这个东西搞不定嘛 搞定呗 那么来吧 我们现在就再写个文件啊

14:29.320 --> 14:32.160
vpecbs.gs 啊有基础配置

14:32.640 --> 14:41.120
就大家都一样的一样的配置就放到这 就完全可以自行搞定 如果他遇到更加复杂的场景 自行搞定 总之你可以在函数里边写代码 你自行搞定就行了

14:41.520 --> 14:43.600
好 那么我们就可以把公共的配置呢 是不是写到这

14:44.260 --> 14:47.220
对吧 写到这 那么有差异的配置呢

14:47.940 --> 14:55.900
分别写到这两个文件啊 就是pro dev 他们写有差异的公共的配置 我们就写到这 写到bass里边 你可以全去自行搞定啊

14:56.700 --> 14:59.900
然后呢 在这里 那么我们是不是可以用对象混合

15:00.580 --> 15:05.540
对吧 当然你可以用任何你想用的技术 只要你搞定就行了 啊 比方说我们这里倒入

15:06.740 --> 15:08.900
来吧 倒入 倒入一个就是

15:09.880 --> 15:11.800
一个是dev config

15:12.560 --> 15:16.400
一个对象 对吧 来自于哪呢 来自于这个地方

15:17.920 --> 15:22.000
好 然后呢 还有一个pro config 就生产的配置

15:22.920 --> 15:29.160
来自于哪呢 来自于这个地方 好 还有一个什么呢 还有一个基本的配置bass config 来自于哪呢

15:29.720 --> 15:30.240
来自于

15:31.240 --> 15:36.440
webpack base 对吧 来自于这个地方 好 那么这里 如果说你是生产环境 我返回啥

15:37.180 --> 15:39.380
我就给你返回 把技术配置

15:40.340 --> 15:44.180
展开 然后呢 生产的配置展开 啊 这把混合呗

15:45.020 --> 15:46.700
对吧 混合 这东西都好做嘛

15:47.660 --> 15:50.220
啊 那如果说你是这边啊 你是这边

15:51.140 --> 15:54.780
啊 那么我就是bass config 然后呢 这里dev config 对吧

15:56.220 --> 15:57.420
是搞定的 对不对

15:58.460 --> 16:03.540
就搞定了 就自己自己搞定 那么这样的 这边的代码就写就写固定了 对吧 这边的代码就不用去动它了

16:03.600 --> 16:07.000
啊 因为基本上写的很完善了 那么之后呢 遇到相同的配置 我就写在这

16:07.560 --> 16:10.560
遇到了差异的配置 就写具体这两个文件 是不是搞定了

16:11.720 --> 16:17.400
他其实wepack没有给你做啥 最终用的还是这个配置文件啊 只不过这个配置文件里面就导入了别的东西

16:18.480 --> 16:24.920
那么最终还是用的是他 那么他其实没干嘛 真的没干嘛 他就是个让人 他就去运行这个函数 函数返回啥 他就用啥

16:25.680 --> 16:30.840
那么这个函数里边你可以根据不同的情况了 去使用不同的配置啊 自行搞定就完事了

16:31.280 --> 16:32.000
来 我们试一下了

16:32.660 --> 16:33.060
好 来

16:34.900 --> 16:35.780
npm run

16:36.260 --> 16:46.230
对 好 搞定 生产环境的配置 对吧 而且公共的配置 说是也应用进来了

16:46.670 --> 16:48.590
好 被我拒绝 被发挥

16:51.990 --> 16:54.230
把这个取掉 删除 好 来

16:55.910 --> 16:58.630
npm run

16:58.630 --> 16:59.130
proud

17:03.130 --> 17:05.690
好 扔出来了啊 就是生产环境的配置 对吧

17:06.770 --> 17:14.450
这就是关于如何来区分环境 其实如果说他不给你提供的那种方式能不能做 他还是能做 对吧 还是能用不同的配置文件

17:14.810 --> 17:20.250
那么这种方式呢 但就是其实他要比较容易理解一些 他使用的是同一个配置文件

17:20.610 --> 17:25.890
最终生产的是他 只不过在这个文件里面我们去玩了一些花样 这些文件跟wepack是没有什么关系的

17:26.190 --> 17:33.950
至少不是直接关系 是我们自己玩出来的 对吧 那我们黑子更加舒服 之后呢 我们就相当环境可以这个不同环境 配这两个

17:34.470 --> 17:35.670
可以实现区分环境

17:36.350 --> 17:37.910
ok 这是关于这一颗 我说一下

