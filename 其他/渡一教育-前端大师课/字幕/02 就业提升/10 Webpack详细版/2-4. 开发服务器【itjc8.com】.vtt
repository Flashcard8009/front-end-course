WEBVTT

00:00.820 --> 00:03.820
来 开发服务器

00:03.820 --> 00:05.820
这个东西要怎么练呢

00:05.820 --> 00:08.820
它是一个完整的词 叫做开发服务器

00:08.820 --> 00:13.820
也把它叫做Dev Server

00:13.820 --> 00:15.820
你不能把它当成动词

00:15.820 --> 00:17.820
不是说我们要开发一个服务器

00:17.820 --> 00:19.820
它名字叫做开发服务器

00:19.820 --> 00:23.820
它是为开发阶段来创建的这么一个服务器

00:23.820 --> 00:26.820
来看一下周杰克 咱们来讲什么东西

00:26.820 --> 00:29.820
首先他肯定是要解决一个某些问题

00:29.820 --> 00:31.820
是在开发阶段注意

00:31.820 --> 00:33.820
我这里画了一个重点

00:33.820 --> 00:35.820
就是加出了字体

00:35.820 --> 00:37.820
说明了我们这一刻解决的问题

00:37.820 --> 00:41.820
仅仅解决的是开发阶段的问题

00:41.820 --> 00:43.820
给我们开发完了

00:43.820 --> 00:45.820
打包到服务器有没有关系

00:45.820 --> 00:48.820
没有关系 只是在开发阶段的问题

00:48.820 --> 00:49.820
什么问题呢

00:49.820 --> 00:51.820
就是我们开发阶段太麻烦了

00:51.820 --> 00:53.820
怎么个麻烦法呢

00:53.820 --> 00:54.820
来我们回忆一下

00:54.820 --> 00:56.820
我们开发阶段要做什么事

00:56.820 --> 00:57.820
要编写代码

00:57.820 --> 00:59.820
我们这里一个Index的JS

00:59.820 --> 01:01.820
在这里边许随便去写一些代码

01:01.820 --> 01:02.820
开发代码

01:02.820 --> 01:05.820
开发的写到十几行 二十行代码

01:05.820 --> 01:07.820
是不是我们在运行出来看一下

01:07.820 --> 01:09.820
那怎么来运行

01:09.820 --> 01:10.820
我们要干嘛

01:10.820 --> 01:13.820
接下来是不是要打包NPX Webpack

01:13.820 --> 01:16.820
我这里已经打夹了一些插件了

01:16.820 --> 01:18.820
插件就是这两个我们之前的代码

01:18.820 --> 01:19.820
自己可以看一下

01:19.820 --> 01:21.820
然后我们打包

01:22.820 --> 01:24.820
要是不是等一会

01:25.820 --> 01:27.820
打包完了过后出来了

01:27.820 --> 01:28.820
出来了过后干嘛

01:28.820 --> 01:29.820
是不是要运行

01:29.820 --> 01:32.820
右键在这里打开

01:32.820 --> 01:33.820
这个地方

01:33.820 --> 01:34.820
双击在运行

01:34.820 --> 01:36.820
可以看到结果了

01:36.820 --> 01:37.820
我们检查

01:37.820 --> 01:39.820
可以看到它输出的结果

01:40.820 --> 01:41.820
那么这里呢

01:42.820 --> 01:43.820
编写代码

01:43.820 --> 01:44.820
刚才编写代码

01:44.820 --> 01:46.820
然后运行命令打包

01:46.820 --> 01:48.820
打包完了过后运行页面查看效果

01:48.820 --> 01:49.820
对吧

01:49.820 --> 01:51.820
然后还有一个就是

01:51.820 --> 01:53.820
我们看了效果之后

01:53.820 --> 01:54.820
代码还没有写完

01:54.820 --> 01:55.820
有可能还有错误

01:55.820 --> 01:56.820
对不对

01:56.820 --> 01:57.820
我们可能要修改代码

01:57.820 --> 01:58.820
可能要继续增加代码

01:58.820 --> 02:00.820
比方说我们又加一句代码

02:00.820 --> 02:01.820
ABC随便写吧

02:01.820 --> 02:03.820
保存了过后

02:03.820 --> 02:04.820
保存了过后怎么样

02:04.820 --> 02:06.820
我们又得重新打包

02:06.820 --> 02:08.820
你看NPX Webpack

02:08.820 --> 02:10.820
所以要重新打包

02:10.820 --> 02:12.820
重新打包完了过后

02:12.820 --> 02:13.820
这里

02:13.820 --> 02:14.820
我们这里是不是要刷新

02:14.820 --> 02:15.820
刷新页面

02:15.820 --> 02:16.820
也就是说

02:16.820 --> 02:17.820
我们这里呢

02:17.820 --> 02:19.820
还要继续编写代码

02:19.820 --> 02:20.820
然后又要打包

02:20.820 --> 02:21.820
又要查看页面效果

02:21.820 --> 02:22.820
对吧

02:22.820 --> 02:23.820
所以说挺麻烦的

02:23.820 --> 02:24.820
我们就改了几行代码

02:24.820 --> 02:26.820
都要经过这么长的步骤

02:26.820 --> 02:27.820
就挺麻烦的

02:27.820 --> 02:28.820
有的时候呢

02:28.820 --> 02:29.820
我们改代码

02:29.820 --> 02:30.820
可能一两秒钟

02:30.820 --> 02:31.820
把一个错误修改了

02:31.820 --> 02:32.820
结果呢

02:32.820 --> 02:34.820
完成这些步骤

02:34.820 --> 02:36.820
可能要5秒钟

02:36.820 --> 02:38.820
10秒钟政治更长

02:38.820 --> 02:39.820
所以说

02:39.820 --> 02:41.820
特别不方便

02:41.820 --> 02:42.820
那么我们这些课呢

02:42.820 --> 02:44.820
主要是来解决这个问题

02:44.820 --> 02:45.820
好

02:45.820 --> 02:46.820
而且呢

02:46.820 --> 02:47.820
这里还有一个问题

02:47.820 --> 02:48.820
就是我们往往呢

02:48.820 --> 02:49.820
希望呢

02:49.820 --> 02:50.820
我们生成的页面呢

02:50.820 --> 02:52.820
我们要把它部署到服务器上

02:52.820 --> 02:53.820
来模拟真实环境

02:53.820 --> 02:54.820
这是什么意思呢

02:54.820 --> 02:55.820
就是我们

02:55.820 --> 02:56.820
这个页面你看

02:56.820 --> 02:57.820
我是不是双击运行的

02:57.820 --> 02:58.820
对吧

02:58.820 --> 02:59.820
是在本地运行的

02:59.820 --> 03:00.820
他并不在服务器上

03:00.820 --> 03:01.820
并不像我们

03:01.820 --> 03:03.820
在真实的环境的样子

03:03.820 --> 03:04.820
表面里访问百度

03:04.820 --> 03:05.820
访问心脏

03:05.820 --> 03:06.820
他是在服务器上

03:06.820 --> 03:07.820
我们直接访问一个地址

03:07.820 --> 03:08.820
就可以读去服务器上的东西

03:08.820 --> 03:09.820
对吧

03:09.820 --> 03:10.820
你们学过网络通信

03:10.820 --> 03:11.820
应该知道这个原理

03:11.820 --> 03:12.820
因此呢

03:12.820 --> 03:13.820
我们往往呢

03:13.820 --> 03:14.820
会利用一些vscode的插件

03:14.820 --> 03:15.820
比方说

03:15.820 --> 03:16.820
我们在这里的点击右键

03:16.820 --> 03:17.820
open with live server

03:17.820 --> 03:18.820
对吧

03:18.820 --> 03:19.820
用这种方式去运行

03:19.820 --> 03:20.820
也就是说

03:20.820 --> 03:21.820
我们往往会

03:21.820 --> 03:22.820
把它部署到服务器上

03:22.820 --> 03:23.820
来模拟真实环境里边的

03:23.820 --> 03:25.820
服务器环境

03:25.820 --> 03:27.820
所以像像这些问题呢

03:27.820 --> 03:29.820
我们都需要进行解决

03:29.820 --> 03:30.820
怎么解决呢

03:30.820 --> 03:31.820
就是我们这些课学习的

03:31.820 --> 03:32.820
web pack呢

03:32.820 --> 03:34.820
还为了解决这样的一个问题

03:34.820 --> 03:35.820
于是呢

03:35.820 --> 03:37.820
他官方单独的出了一个cool

03:37.820 --> 03:38.820
也就是说

03:38.820 --> 03:39.820
这东西是官方出的

03:39.820 --> 03:41.820
不是一些第三方公司出的

03:41.820 --> 03:42.820
那么他的cool的名字叫做

03:42.820 --> 03:44.820
web pack dev server

03:44.820 --> 03:46.820
你看web pack dev

03:46.820 --> 03:48.820
所以是开发开发

03:48.820 --> 03:51.820
开发阶段服务的一个服务器

03:51.820 --> 03:52.820
这个东西呢

03:52.820 --> 03:53.820
你要搞清楚

03:53.820 --> 03:54.820
他既不是plugging

03:54.820 --> 03:56.820
也不是loader

03:56.820 --> 03:57.820
因为他不是插件

03:57.820 --> 03:59.820
也不是我们平时学习的一些

03:59.820 --> 04:00.820
扩展点loader

04:00.820 --> 04:01.820
那他都不是

04:01.820 --> 04:03.820
他就是一个独立的一个cool

04:03.820 --> 04:04.820
因为他官方出的

04:04.820 --> 04:05.820
因此呢

04:05.820 --> 04:08.820
他紧力的和web pack结合在一起

04:08.820 --> 04:09.820
首先来看他怎么用

04:09.820 --> 04:10.820
以及他的效果

04:10.820 --> 04:11.820
怎么用呢

04:11.820 --> 04:12.820
首先安装

04:12.820 --> 04:13.820
安装的cool的名字就叫做

04:13.820 --> 04:14.820
web pack dev server

04:14.820 --> 04:15.820
直接安装就行了

04:15.820 --> 04:16.820
那么这里呢

04:16.820 --> 04:17.820
我就不掩饰安装过程了

04:17.820 --> 04:18.820
你们自己去安装

04:18.820 --> 04:19.820
因为我这里已经安装好了

04:19.820 --> 04:20.820
web pack dev server

04:20.820 --> 04:22.820
安装好了之后呢

04:22.820 --> 04:23.820
特别简单他的用法

04:23.820 --> 04:25.820
他给你提供了一个命令

04:25.820 --> 04:26.820
叫web pack dev server命令

04:26.820 --> 04:28.820
就是跟这个cool的名字一样

04:28.820 --> 04:30.820
那么这个命令呢

04:30.820 --> 04:32.820
你直接运行就行了

04:32.820 --> 04:34.820
因为他几乎支持

04:34.820 --> 04:35.820
所有的web pack参数

04:35.820 --> 04:37.820
就是跟我们之前运行的一个命令

04:37.820 --> 04:39.820
运什么npx

04:39.820 --> 04:41.820
web pack命令一样的

04:41.820 --> 04:43.820
你后面要给什么参数

04:43.820 --> 04:44.820
你随便给

04:44.820 --> 04:45.820
这个地方呢叫

04:45.820 --> 04:47.820
web pack dev server

04:47.820 --> 04:48.820
然后后面要给什么参数

04:48.820 --> 04:49.820
比方说config

04:49.820 --> 04:50.820
你要配置文件

04:50.820 --> 04:51.820
什么nm对吧

04:51.820 --> 04:52.820
那么这些呢

04:52.820 --> 04:53.820
你都可以给啊

04:53.820 --> 04:54.820
那么跟web pack的用法呢

04:54.820 --> 04:55.820
差不多

04:55.820 --> 04:56.820
那么这里呢

04:56.820 --> 04:57.820
我没有什么参数给他

04:57.820 --> 04:58.820
那么直接运行就完了

04:58.820 --> 04:59.820
就这么简单

04:59.820 --> 05:00.820
安装好了过后

05:00.820 --> 05:01.820
你直接运行这个命令

05:01.820 --> 05:02.820
好

05:02.820 --> 05:03.820
一回车

05:03.820 --> 05:05.820
好看一下啊

05:05.820 --> 05:06.820
那么现在呢

05:06.820 --> 05:07.820
他告诉你

05:07.820 --> 05:08.820
compile啊

05:08.820 --> 05:09.820
編譯完成

05:09.820 --> 05:10.820
編譯完成了

05:10.820 --> 05:11.820
你看

05:11.820 --> 05:12.820
是不是我们这里呢

05:12.820 --> 05:13.820
他前面给你提示了

05:13.820 --> 05:15.820
他就已经搭建好了一个服务器

05:15.820 --> 05:17.820
这个服务器的地址在哪呢

05:17.820 --> 05:18.820
localhost

05:18.820 --> 05:19.820
8080

05:19.820 --> 05:20.820
啊

05:20.820 --> 05:21.820
我们来看一下

05:21.820 --> 05:22.820
访问这个服务器地址

05:22.820 --> 05:24.820
localhost

05:24.820 --> 05:25.820
啊

05:25.820 --> 05:26.820
这里8080

05:26.820 --> 05:27.820
一访问他

05:27.820 --> 05:29.820
是不是也可以访问到页面了

05:29.820 --> 05:30.820
对吧

05:30.820 --> 05:31.820
说可以访问到页面

05:31.820 --> 05:32.820
而且呢你看一下

05:32.820 --> 05:34.820
电视目录里边有东西吗

05:34.820 --> 05:35.820
是没东西

05:35.820 --> 05:36.820
电视目录

05:36.820 --> 05:37.820
甚至你怕可以把电视目录删了

05:37.820 --> 05:39.820
他是照样可以访问

05:39.820 --> 05:40.820
刷新

05:40.820 --> 05:41.820
你看是不是照样可以访问

05:41.820 --> 05:42.820
也就是说

05:42.820 --> 05:44.820
他并不会真正的去完成打包

05:44.820 --> 05:45.820
你看

05:45.820 --> 05:46.820
这里输出了aabc

05:46.820 --> 05:47.820
是不是我们代码里边的那种

05:47.820 --> 05:49.820
他并不会真正的去

05:49.820 --> 05:51.820
像微拍那样子去完成打包

05:51.820 --> 05:53.820
而是给你搭建了一个服务器环境

05:53.820 --> 05:54.820
那么你可以通过这个地址呢

05:54.820 --> 05:55.820
直接访问

05:55.820 --> 05:57.820
但是你一定要搞清楚啊

05:57.820 --> 05:58.820
因为这个

05:58.820 --> 05:59.820
这个命令呢

05:59.820 --> 06:02.820
他是专门为开发阶段服务的

06:02.820 --> 06:03.820
也就是说

06:03.820 --> 06:05.820
我们只有在开发阶段

06:05.820 --> 06:06.820
是不是才会用他

06:06.820 --> 06:07.820
因此你安装他的时候

06:07.820 --> 06:08.820
是不是要

06:08.820 --> 06:10.820
要一次开发依赖啊

06:10.820 --> 06:11.820
对吧

06:11.820 --> 06:12.820
应该是开发依赖

06:12.820 --> 06:14.820
只有在开发阶段会用他

06:14.820 --> 06:15.820
那么真正以后呢

06:15.820 --> 06:16.820
编写网纳代码

06:16.820 --> 06:17.820
全部测试好了

06:17.820 --> 06:18.820
要真正部署的时候呢

06:18.820 --> 06:20.820
是不是还是要运行微拍

06:20.820 --> 06:21.820
为什么呢

06:21.820 --> 06:23.820
因为他只是给你在开发阶段

06:23.820 --> 06:25.820
搭了一个临时的服务器

06:25.820 --> 06:26.820
肯定这个东西不能用作

06:26.820 --> 06:28.820
真实的服务器环境

06:28.820 --> 06:29.820
真实的服务器呢

06:29.820 --> 06:30.820
我们要么得自己写

06:30.820 --> 06:31.820
要么要用一些

06:31.820 --> 06:33.820
专门的服务器软件

06:33.820 --> 06:35.820
所以肯定不能用他

06:35.820 --> 06:36.820
因此呢

06:36.820 --> 06:37.820
我们在真实的服务器里边

06:37.820 --> 06:38.820
是不是还是要用微拍打包

06:38.820 --> 06:39.820
打包生成一个电视目录

06:39.820 --> 06:41.820
把电视目录里边上传到服务器

06:41.820 --> 06:42.820
还是得做这么一件事

06:42.820 --> 06:44.820
他只是在开发阶段服务的

06:44.820 --> 06:47.820
他叫做开发服务器

06:47.820 --> 06:48.820
而且呢

06:48.820 --> 06:49.820
你会发现一个特点啊

06:49.820 --> 06:50.820
首先我们刚才说了

06:50.820 --> 06:51.820
他不会形成最终的

06:51.820 --> 06:53.820
生成的文件

06:53.820 --> 06:55.820
那么以后我再讲

06:55.820 --> 06:56.820
他是怎么来做的

06:56.820 --> 06:57.820
而且呢

06:57.820 --> 06:58.820
他还有一个好处在于什么呢

06:58.820 --> 06:59.820
还在于我们改了代码

06:59.820 --> 07:00.820
比方说我们这里

07:00.820 --> 07:02.820
再输出一个123

07:02.820 --> 07:03.820
只要一保存代码

07:03.820 --> 07:04.820
你看一下

07:04.820 --> 07:06.820
他页面就自动刷新了

07:06.820 --> 07:08.820
你看ABC123

07:08.820 --> 07:09.820
直接输出了

07:09.820 --> 07:11.820
我们不用再去重新运行命令

07:11.820 --> 07:13.820
不用再去做其他任何事情

07:13.820 --> 07:14.820
他直接就出来了

07:14.820 --> 07:15.820
你可以看到这边

07:15.820 --> 07:17.820
他运行完了过后呢

07:17.820 --> 07:19.820
你看刚才已经Compile

07:19.820 --> 07:20.820
编译完成

07:20.820 --> 07:21.820
那么你改了代码过后呢

07:21.820 --> 07:22.820
他又会重新

07:22.820 --> 07:24.820
Compiling表示重新编译

07:24.820 --> 07:25.820
重新编译完了过后

07:25.820 --> 07:26.820
又告诉你编译完成

07:26.820 --> 07:28.820
你看他整个是没有结束的

07:28.820 --> 07:29.820
不像我们之前

07:29.820 --> 07:30.820
会拍个运行的之后呢

07:30.820 --> 07:32.820
就结束了这个命令

07:32.820 --> 07:34.820
那么他是永远不会结束的

07:34.820 --> 07:36.820
所以说我们从杆子上来

07:36.820 --> 07:39.820
体验的话你会发现

07:39.820 --> 07:41.820
有了Waypack的DevServer之后呢

07:41.820 --> 07:43.820
他整个打包过程

07:43.820 --> 07:45.820
他在这个地方断开了

07:45.820 --> 07:46.820
大家看一下

07:46.820 --> 07:48.820
他相当于是打包过程

07:48.820 --> 07:49.820
到这儿

07:49.820 --> 07:51.820
给大家画一下

07:51.820 --> 07:56.450
画一个红色吧

07:56.450 --> 07:59.450
画一下

07:59.450 --> 08:00.450
他

08:00.450 --> 08:01.450
为什么画不了呢

08:01.450 --> 08:05.020
相当于在这个地方断开了

08:05.020 --> 08:07.020
他不生存最终的打包结果

08:07.020 --> 08:09.020
那么这个地方就一直

08:09.020 --> 08:11.020
运行一直运行

08:11.020 --> 08:12.020
然后呢监听

08:12.020 --> 08:13.020
监听文件的变化

08:13.020 --> 08:15.020
文件一旦变化了

08:15.020 --> 08:17.020
那么他是不是又

08:17.020 --> 08:19.020
文件一旦变化了

08:19.020 --> 08:20.020
他是不是又重新去打包

08:20.020 --> 08:21.020
对吧

08:21.020 --> 08:23.020
文件一旦变化

08:23.020 --> 08:27.030
他又重新

08:27.030 --> 08:29.030
又重新进行打包

08:29.030 --> 08:30.030
就这么一回事

08:30.030 --> 08:32.030
那么他形成了这么一个

08:32.030 --> 08:34.030
这么一个无穷无尽的结果

08:34.030 --> 08:36.030
那么当然你要结束的话

08:36.030 --> 08:38.030
如果说你要结束的话

08:38.030 --> 08:39.030
让他停止的话

08:39.030 --> 08:40.030
按Count加C

08:40.030 --> 08:41.030
就停止了

08:41.030 --> 08:42.030
你看这样就停止了

08:42.030 --> 08:43.030
停止过后呢

08:43.030 --> 08:44.030
当然就没

08:44.030 --> 08:45.030
再改弹吧就没用了

08:45.030 --> 08:46.030
他监听不了了

08:46.030 --> 08:48.030
所以他不会形成最终的打包结果

08:48.030 --> 08:50.030
这就是他的整个的

08:50.030 --> 08:51.030
这种

08:51.030 --> 08:53.030
效果

08:53.030 --> 08:54.030
那么咱们来看一下

08:54.030 --> 08:56.030
他到底是怎么做的

08:56.030 --> 08:57.030
这样子呢

08:57.030 --> 08:58.030
看了他到底怎么做的之后

08:58.030 --> 09:00.030
这样子可以更加清楚的认识他

09:00.030 --> 09:02.030
他其实没有那么神奇

09:02.030 --> 09:04.030
看上去好像很神奇的样子

09:04.030 --> 09:05.030
他其实没有那么神奇

09:05.030 --> 09:07.030
给大家看一下他怎么做的

09:07.030 --> 09:08.030
首先呢

09:08.030 --> 09:10.030
当我们运行这个命令的时候

09:10.030 --> 09:13.030
npx vpac dev server的时候

09:13.030 --> 09:14.030
他做了什么事呢

09:14.030 --> 09:16.030
他首先在内部执行了

09:16.030 --> 09:17.030
vpac命令

09:17.030 --> 09:18.030
也就是他内部呢

09:18.030 --> 09:19.030
他还是执行了什么命令呢

09:19.030 --> 09:21.030
vpac命令

09:21.030 --> 09:22.030
并且呢

09:22.030 --> 09:25.030
他把表里执行这个命令的时候

09:25.030 --> 09:26.030
表里执行这个

09:26.030 --> 09:28.030
vpac dev server的时候

09:28.030 --> 09:30.030
你传了一些参数对吧

09:30.030 --> 09:31.030
这传了一个参数

09:31.030 --> 09:32.030
比方说配置文件

09:32.030 --> 09:33.030
你使用这个文件

09:33.030 --> 09:34.030
就为配置文件

09:34.030 --> 09:35.030
ok

09:35.030 --> 09:36.030
那么他的内部去执行

09:36.030 --> 09:37.030
这个vpac的时候呢

09:37.030 --> 09:39.030
他也会传同样的参数

09:39.030 --> 09:40.030
要参数呢

09:40.030 --> 09:41.030
他会进行处理

09:41.030 --> 09:42.030
把这个参

09:42.030 --> 09:44.030
把相应的参数的传递给vpac

09:44.030 --> 09:45.030
这是他第一步

09:45.030 --> 09:47.030
所以说他内部还是运行的vpac

09:47.030 --> 09:48.030
然后呢

09:48.030 --> 09:49.030
他运行的时候呢

09:49.030 --> 09:52.030
他还会自动给你开启watch

09:52.030 --> 09:53.030
watch是什么

09:53.030 --> 09:54.030
是不是之前学过的

09:54.030 --> 09:56.030
监听文件的变化对吧

09:56.030 --> 09:57.030
那么虽然说

09:57.030 --> 09:59.030
我们这里面有没有配置watch

09:59.030 --> 10:00.030
是没有配置

10:00.030 --> 10:02.030
他还是会给你开启一个watch

10:02.030 --> 10:04.030
表示我要监听文件的变化

10:04.030 --> 10:05.030
文件变了过后呢

10:05.030 --> 10:07.030
我要这里是不是要重新完成

10:07.030 --> 10:08.030
整个编译过程

10:08.030 --> 10:09.030
我们之前讲过的

10:09.030 --> 10:12.030
这是他会监听文件的变化

10:12.030 --> 10:14.030
那么后续又做了什么事呢

10:14.030 --> 10:15.030
你可以这样理解

10:15.030 --> 10:16.030
我都是简化的

10:16.030 --> 10:18.030
他其实内部的东西还是比较多

10:18.030 --> 10:19.030
只是呢

10:19.030 --> 10:20.030
没有必要去了解那种复杂

10:20.030 --> 10:22.030
他基本原理就行了

10:22.030 --> 10:23.030
他做了什么事呢

10:23.030 --> 10:24.030
他怎么来实现这个效果的呢

10:24.030 --> 10:26.030
首先他做了这么一件事

10:26.030 --> 10:27.030
注册了一些hooks

10:27.030 --> 10:28.030
我们知道

10:28.030 --> 10:29.030
vpac在编译的过程中

10:29.030 --> 10:31.030
是不是有很多的勾字函数

10:31.030 --> 10:32.030
对吧

10:32.030 --> 10:34.030
那么类似于pluggy

10:34.030 --> 10:35.030
像这种东西

10:35.030 --> 10:37.030
他就可以去注册一些勾字函数

10:37.030 --> 10:38.030
那么vpac-dev-server

10:38.030 --> 10:39.030
它并不是pluggy

10:39.030 --> 10:40.030
但是呢

10:40.030 --> 10:41.030
由于呢

10:41.030 --> 10:43.030
他在内部去调用vpac-mini

10:43.030 --> 10:44.030
因此他内部呢

10:44.030 --> 10:47.030
实际上使用的是vpac-api

10:47.030 --> 10:49.030
所以他完全可以去干涉

10:49.030 --> 10:51.030
vpac里边的事情

10:51.030 --> 10:52.030
那么他会做

10:52.030 --> 10:53.030
他就可以把想象成

10:53.030 --> 10:56.030
一个类似于pluggy的东西

10:56.030 --> 10:58.030
他在vpac的执行中呢

10:58.030 --> 11:01.030
会向vpac中注册一些勾字函数

11:01.030 --> 11:02.030
这些勾字函数

11:02.030 --> 11:03.030
就在某一些时候

11:03.030 --> 11:04.030
要去做某些事

11:04.030 --> 11:05.030
那么这些勾字函数

11:05.030 --> 11:06.030
会做什么事呢

11:06.030 --> 11:08.030
简单来说

11:08.030 --> 11:10.030
首先他把这个支援列表

11:10.030 --> 11:11.030
就是勾字

11:11.030 --> 11:12.030
我们知道这个vpac

11:12.030 --> 11:13.030
他最终会形成一个

11:13.030 --> 11:14.030
支援列表

11:14.030 --> 11:15.030
还记得吗

11:15.030 --> 11:16.030
我们之前来讲

11:16.030 --> 11:17.030
哪个地方呢

11:17.030 --> 11:18.030
编译过程的时候

11:18.030 --> 11:19.030
给大家看一下

11:19.030 --> 11:22.600
讲这个编译过程的时候

11:22.600 --> 11:23.600
不对

11:23.600 --> 11:25.600
讲这个pluggy的时候

11:25.600 --> 11:27.600
讲这个pluggy

11:27.600 --> 11:32.770
在这

11:32.770 --> 11:34.770
它是不是有些勾字函数

11:34.770 --> 11:35.770
那么勾字函数里边

11:35.770 --> 11:36.770
它做了什么事呢

11:36.770 --> 11:38.770
它这样做的

11:38.770 --> 11:40.770
它首先把支援列表保存起来

11:40.770 --> 11:42.770
比方说我们要输出的时候

11:42.770 --> 11:44.770
vpac 它形成了一个支援列表

11:44.770 --> 11:45.770
对吧

11:45.770 --> 11:46.770
它即将把这个支援列表

11:46.770 --> 11:48.770
输出到文件

11:48.770 --> 11:49.770
生成文件

11:49.770 --> 11:50.770
在这一步呢

11:50.770 --> 11:51.770
它进行了干涉

11:51.770 --> 11:52.770
就是说

11:52.770 --> 11:53.770
你不是有个支援列表吗

11:53.770 --> 11:54.770
保存在哪儿的

11:54.770 --> 11:55.770
大家还记得吗

11:55.770 --> 11:56.770
当时我们写过代码的

11:56.770 --> 11:57.770
叫做

11:58.770 --> 11:59.770
对吧

11:59.770 --> 12:00.770
是个支援列表

12:00.770 --> 12:03.770
那么它可以这样的想象

12:03.770 --> 12:04.770
它就把这个支援

12:04.770 --> 12:06.770
它本质上也不是这样做的

12:06.770 --> 12:07.770
你可以这样的想象

12:07.770 --> 12:10.770
它把这个支援列表保存起来

12:10.770 --> 12:11.770
保存一个变量里边

12:11.770 --> 12:13.770
比方说保存一个变量里边

12:13.770 --> 12:15.770
然后做了一个什么事呢

12:20.210 --> 12:23.210
然后净子vpac 输出文件

12:23.210 --> 12:24.210
怎么净子的呢

12:24.210 --> 12:25.210
它其实有些办法

12:25.210 --> 12:27.210
只不过我们这里可以想象

12:27.210 --> 12:28.210
它怎么在净子呢

12:28.210 --> 12:29.210
它这样净子

12:29.210 --> 12:31.210
总之它可以想到办法

12:31.210 --> 12:32.210
总之有办法的

12:32.210 --> 12:34.210
给它复制为空对象

12:34.210 --> 12:35.210
那么这样子

12:35.210 --> 12:37.210
vpac 它就没有任何输出资源了

12:37.210 --> 12:38.210
它相当于是把

12:38.210 --> 12:40.210
vpac输出了支援轻空了

12:40.210 --> 12:41.210
对吧

12:41.210 --> 12:42.210
把vpac输出了支援轻空了

12:42.210 --> 12:43.210
那么这样一来

12:43.210 --> 12:44.210
vpac最终生成文件的时候

12:44.210 --> 12:45.210
是不是啥都没有

12:45.210 --> 12:46.210
对吧

12:46.210 --> 12:47.210
就生成不出来

12:47.210 --> 12:48.210
生成不出来任何东西

12:48.210 --> 12:49.210
但是呢

12:49.210 --> 12:50.210
这个插件

12:50.210 --> 12:51.210
这个不是插件

12:51.210 --> 12:53.210
这个vpac devserver 这个库呢

12:53.210 --> 12:54.210
它有于它之前

12:54.210 --> 12:55.210
就保存了这个sets

12:55.210 --> 12:56.210
那么它里边

12:56.210 --> 12:57.210
是不是得到一个sets

12:57.210 --> 12:58.210
有这么一个变量

12:58.210 --> 12:59.210
是吧

12:59.210 --> 13:00.210
是在内存里边

13:00.210 --> 13:01.210
它并没有输出到文件

13:01.210 --> 13:02.210
好

13:02.210 --> 13:04.210
那么现在把保存起来之后

13:04.210 --> 13:05.210
接下来做了什么事呢

13:05.210 --> 13:07.210
它开启了一个服务器

13:07.210 --> 13:10.210
它使用了另外一个库叫express

13:10.210 --> 13:12.210
你们之后学习都得解释

13:12.210 --> 13:13.210
你们会学习这个库

13:13.210 --> 13:14.210
你们以后一定会学习

13:14.210 --> 13:16.210
如何来打开一个服务器

13:16.210 --> 13:17.210
但是目前虽然你们学习

13:17.210 --> 13:18.210
但是你知道

13:18.210 --> 13:19.210
服务器用来干嘛的

13:19.210 --> 13:21.210
它就是来监听一个端口

13:21.210 --> 13:22.210
请求来了过后

13:22.210 --> 13:23.210
我给了一个响应

13:23.210 --> 13:24.210
请求来了我给了一个响应

13:24.210 --> 13:25.210
对吧

13:25.210 --> 13:27.210
它就是开启了一个服务器

13:27.210 --> 13:28.210
去监听一个端口

13:28.210 --> 13:30.210
那么目前我们看到的

13:30.210 --> 13:31.210
它监听哪个端口

13:31.210 --> 13:33.210
监听的是8080这个端口

13:33.210 --> 13:34.210
对吧

13:34.210 --> 13:35.210
默认情况下

13:35.210 --> 13:37.210
监听的是这个端口

13:37.210 --> 13:38.210
开启一个服务器

13:38.210 --> 13:39.210
监听端口

13:39.210 --> 13:41.210
这就是由于它监听的端口

13:41.210 --> 13:44.210
因此你看这个dave server

13:44.210 --> 13:45.210
它就无法停止

13:45.210 --> 13:47.210
因为它要一直监听

13:47.210 --> 13:49.210
它就停止不了这个服务器

13:49.210 --> 13:50.210
它就在这里卡住了

13:50.210 --> 13:51.210
监听某个端口

13:51.210 --> 13:53.210
那么接下来的服务器干了什么事呢

13:53.210 --> 13:54.210
你看着

13:54.210 --> 13:56.210
非常巧妙的地方来了

13:56.210 --> 13:58.210
当你一个请求来的时候

13:58.210 --> 13:59.210
它根据你请求的路径

13:59.210 --> 14:01.210
给予响应的支援内容

14:01.210 --> 14:02.210
比方说

14:02.210 --> 14:03.210
比方说

14:03.210 --> 14:04.210
咱们这个r6里边

14:04.210 --> 14:06.210
有个什么样的支援内容呢

14:06.210 --> 14:07.210
比方说这个r6里边

14:07.210 --> 14:09.210
它相当于是这种情况

14:10.210 --> 14:11.210
一个对象吧

14:11.210 --> 14:12.210
我们都知道

14:12.210 --> 14:14.210
第一个它的键是什么呢

14:14.210 --> 14:16.210
属性名就是文件的名字

14:16.210 --> 14:17.210
比方说in这个设定

14:17.210 --> 14:18.210
听不听得懂

14:18.210 --> 14:19.210
是不是文件的名字

14:19.210 --> 14:20.210
文件名字里边

14:20.210 --> 14:21.210
是不是一个对象

14:21.210 --> 14:22.210
对象里边有一个内容

14:22.210 --> 14:24.210
叫做文件的内容

14:24.210 --> 14:25.210
我们这里去简写

14:25.210 --> 14:26.210
就直接写文件内容

14:26.210 --> 14:28.210
那么文件内容是这个

14:28.210 --> 14:29.210
对吧

14:29.210 --> 14:30.210
后面我不写了

14:30.210 --> 14:32.210
文件内容是不是这个

14:32.210 --> 14:33.210
然后还有个什么呢

14:33.210 --> 14:35.210
按照我们刚才的打包

14:35.210 --> 14:36.210
看一下吧

14:36.210 --> 14:38.210
按照我们刚才的这样的配置

14:38.210 --> 14:40.210
那么还有一个file name

14:40.210 --> 14:41.210
就是我们输出的文件

14:41.210 --> 14:42.210
是在这个文件夹里边

14:42.210 --> 14:44.210
因此它还有这个script

14:44.210 --> 14:45.210
有没有这样的文件夹

14:45.210 --> 14:46.210
实际上没有的

14:46.210 --> 14:48.210
它是一个支援列表

14:48.210 --> 14:49.210
那么这里呢

14:49.210 --> 14:50.210
比方说

14:50.210 --> 14:51.210
这里得到的就是

14:51.210 --> 14:52.210
made.hash

14:52.210 --> 14:53.210
对吧

14:53.210 --> 14:54.210
我就随便写个

14:54.210 --> 14:56.210
hash.js

14:56.210 --> 14:57.210
它的内容是什么呢

14:57.210 --> 14:59.210
它的内容就是

14:59.210 --> 15:01.210
打包之后的内容

15:01.210 --> 15:02.210
一个自执行函数

15:02.210 --> 15:03.210
对吧

15:03.210 --> 15:05.210
一个自执行函数

15:05.210 --> 15:08.100
后面不写了

15:08.100 --> 15:09.100
不写了

15:09.100 --> 15:11.100
总之它是不是有这样的一个

15:11.100 --> 15:12.100
支援列表

15:12.100 --> 15:14.100
每个支援列表有文件的名字

15:14.100 --> 15:15.100
有什么呢

15:15.100 --> 15:16.100
有文件的名字

15:16.100 --> 15:17.100
还有文件的内容

15:17.100 --> 15:18.100
对不对

15:18.100 --> 15:19.100
全部都可以拿到

15:19.100 --> 15:20.100
OK

15:20.100 --> 15:21.100
那么现在它开启了

15:21.100 --> 15:22.100
一个服务器

15:22.100 --> 15:23.100
监听什么呢

15:23.100 --> 15:24.100
监听

15:24.100 --> 15:25.100
8080

15:25.100 --> 15:26.100
那么接下来

15:26.100 --> 15:27.100
我们来访问一个路径

15:27.100 --> 15:29.100
访问一个URI

15:29.100 --> 15:30.100
当我们访问

15:30.100 --> 15:31.100
localhash

15:31.100 --> 15:32.100
本机

15:32.100 --> 15:33.100
8080端口

15:33.100 --> 15:34.100
访问的时候

15:34.100 --> 15:35.100
比方说

15:35.100 --> 15:36.100
我们用这个地址访问

15:36.100 --> 15:38.100
index

15:38.100 --> 15:39.100
用这个地址来访问

15:39.100 --> 15:40.100
好

15:40.100 --> 15:41.100
访问它的时候

15:41.100 --> 15:42.100
是不是被这个程序

15:42.100 --> 15:43.100
又监听到了

15:43.100 --> 15:44.100
因为它监听的是8080

15:44.100 --> 15:45.100
监听到过后

15:45.100 --> 15:46.100
它就会读

15:46.100 --> 15:47.100
读什么呢

15:47.100 --> 15:48.100
独立访问的路径

15:48.100 --> 15:49.100
你访问的是什么路径呢

15:49.100 --> 15:51.100
访问的是index的it

15:51.100 --> 15:52.100
懂了吧

15:52.100 --> 15:54.100
它就直接把这个路径

15:54.100 --> 15:56.100
去从支援列表里面去找

15:56.100 --> 15:58.100
根本就不去找什么文件

15:58.100 --> 15:59.100
直接从支援列表

15:59.100 --> 16:01.100
这个内存里面的数据里面去找

16:01.100 --> 16:02.100
找到过后

16:02.100 --> 16:03.100
就间接对应上了

16:03.100 --> 16:04.100
那么它就会

16:04.100 --> 16:06.100
把这个文件内容就发送给你

16:06.100 --> 16:07.100
因此

16:07.100 --> 16:08.100
刘亮奇是不是就得到了

16:08.100 --> 16:09.100
刘亮奇

16:09.100 --> 16:11.100
这就顺便复习了

16:11.100 --> 16:13.100
复习跟客户端的支持

16:13.100 --> 16:15.100
刘亮奇是不是就得到的这个东西

16:15.100 --> 16:17.100
是不是得到这个东西

16:17.100 --> 16:18.100
好

16:18.100 --> 16:19.100
这个东西拿出来一渲染

16:19.100 --> 16:20.100
是不是就要去链接这个

16:20.100 --> 16:21.100
对吧

16:21.100 --> 16:22.100
是不是要链接这个

16:22.100 --> 16:23.100
要去链接这个文件

16:23.100 --> 16:24.100
那么

16:24.100 --> 16:26.100
刘亮奇是不是又要去请求什么

16:26.100 --> 16:28.100
他又要去请求这个地址

16:28.100 --> 16:30.100
又要去请求这个地址

16:30.100 --> 16:32.100
也就是说

16:32.100 --> 16:37.110
http写完就是localhost

16:37.110 --> 16:39.110
8080

16:39.110 --> 16:41.110
就请求这个地址

16:41.110 --> 16:42.110
那么这个地址

16:42.110 --> 16:43.110
是不是跟这边有对应的

16:43.110 --> 16:44.110
他又来了

16:44.110 --> 16:46.110
又把这个路径读出来

16:46.110 --> 16:48.110
把这个路径pass读出来

16:48.110 --> 16:49.110
读出来过后

16:49.110 --> 16:51.110
那么这个路径是不是用箭区匹配

16:51.110 --> 16:52.110
是不是匹配到他

16:52.110 --> 16:53.110
对吧

16:53.110 --> 16:54.110
OK

16:54.110 --> 16:55.110
那么他读出来

16:55.110 --> 16:56.110
他就把这个东西

16:56.110 --> 16:57.110
把这个内容给你返回

16:57.110 --> 16:58.110
于是

16:58.110 --> 17:00.110
当我们去访问这样的地址的时候

17:00.110 --> 17:02.110
比方说我们直接访问

17:02.110 --> 17:03.110
当我们去访问这样的地址的时候

17:03.110 --> 17:04.110
你看

17:04.110 --> 17:05.110
拿到是不是这个介石

17:05.110 --> 17:06.110
对吧

17:06.110 --> 17:07.110
他就把介石给你返回了

17:07.110 --> 17:08.110
因此

17:08.110 --> 17:10.110
就可以正常地运行介石了

17:10.110 --> 17:12.110
这就是威派可

17:12.110 --> 17:13.110
他为什么

17:13.110 --> 17:15.110
尽管他不生成文件

17:15.110 --> 17:18.110
他仍然可以给你想要的结果

17:18.110 --> 17:20.110
就是他内部给打了一个服务器

17:20.110 --> 17:22.110
根据你请求的地址

17:22.110 --> 17:23.110
根据你请求的地址

17:23.110 --> 17:25.110
然后给予相应的资源那种

17:25.110 --> 17:26.110
就这么简单

17:26.110 --> 17:28.810
好了

17:28.810 --> 17:29.810
那么威派可

17:29.810 --> 17:30.810
div server

17:30.810 --> 17:32.810
其实基本用法我们就讲完了

17:32.810 --> 17:33.810
接下来我们说一下

17:33.810 --> 17:35.810
威派可div server的一些配置

17:35.810 --> 17:36.810
一些配置

17:36.810 --> 17:37.810
怎么配置呢

17:37.810 --> 17:39.810
具体的配置可以参考这

17:39.810 --> 17:41.810
就是威派可的官方稳当

17:41.810 --> 17:43.810
因为他本身就是官方出了东西

17:43.810 --> 17:44.810
所以说他把那配置

17:44.810 --> 17:45.810
放到官方稳当里面

17:45.810 --> 17:46.810
他说

17:46.810 --> 17:48.810
威派可的配置

17:48.810 --> 17:50.810
威派可div server这个配置

17:50.810 --> 17:51.810
因为他是官方做的

17:51.810 --> 17:52.810
他既不是插件

17:52.810 --> 17:53.810
也不是loader

17:53.810 --> 17:54.810
所以说

17:54.810 --> 17:55.810
以前学习loader

17:55.810 --> 17:57.810
loader学习插件的那种配置

17:57.810 --> 17:58.810
就不太适用于他了

17:58.810 --> 18:00.810
那么他怎么来配置呢

18:00.810 --> 18:01.810
他让你直接在威派可

18:01.810 --> 18:03.810
config.js里面

18:03.810 --> 18:04.810
直接在这个js里面

18:04.810 --> 18:05.810
就是配置文件里面

18:05.810 --> 18:07.810
单独去开一个配置

18:07.810 --> 18:09.810
叫做div server

18:09.810 --> 18:11.810
这个配置专门就用于

18:11.810 --> 18:12.810
配置什么呢

18:12.810 --> 18:14.810
就配置这个

18:14.810 --> 18:16.810
威派可div server

18:16.810 --> 18:17.810
专门给他

18:17.810 --> 18:18.810
专门来配置他

18:18.810 --> 18:19.810
给他做配置

18:19.810 --> 18:21.810
那么这里边配置有哪些呢

18:21.810 --> 18:22.810
很多

18:22.810 --> 18:23.810
因为他功能还是蛮多的

18:23.810 --> 18:25.810
如果平时我们根本就用不到那么多

18:25.810 --> 18:27.810
有哪些东西可以用呢

18:27.810 --> 18:29.810
port

18:29.810 --> 18:31.810
监听哪个端口号

18:31.810 --> 18:32.810
这个东西可以改

18:32.810 --> 18:33.810
他默认是8080

18:33.810 --> 18:35.810
比方说我们改改了

18:35.810 --> 18:37.810
port

18:37.810 --> 18:39.810
比方说改成

18:39.810 --> 18:41.810
8000

18:41.810 --> 18:43.810
现在改了保存有用吗

18:43.810 --> 18:45.810
现在保存能不能生效

18:45.810 --> 18:46.810
你觉得能不能生效

18:46.810 --> 18:48.810
要从原理上去想

18:48.810 --> 18:49.810
肯定是生不了效的

18:49.810 --> 18:50.810
为什么呢

18:50.810 --> 18:51.810
因为

18:51.810 --> 18:52.810
保存这个配置文件

18:52.810 --> 18:53.810
是不是发生在

18:53.810 --> 18:54.810
威派可执行的第一阶段

18:54.810 --> 18:55.810
就是初始化阶段

18:55.810 --> 18:56.810
对吧

18:56.810 --> 18:58.810
那么他发现文件改动

18:58.810 --> 18:59.810
他重新编译

18:59.810 --> 19:00.810
重新编译他并不会

19:00.810 --> 19:02.810
重新读配置文件

19:02.810 --> 19:03.810
所以说这个时候是无效的

19:03.810 --> 19:05.810
比方说我们现在用8080去

19:05.810 --> 19:07.810
8000去访问

19:07.810 --> 19:08.810
无效的

19:08.810 --> 19:09.810
对吧 打不开

19:09.810 --> 19:10.810
无效的

19:10.810 --> 19:11.810
所以说这个时候

19:11.810 --> 19:12.810
改了配置文件

19:12.810 --> 19:13.810
你在cleared

19:13.810 --> 19:15.810
对 就是重新运行

19:15.810 --> 19:16.810
这个威派可div server

19:16.810 --> 19:17.810
一般来说的话

19:17.810 --> 19:19.810
我们这个命令比较长

19:19.810 --> 19:20.810
我们往往会把它配置到哪呢

19:20.810 --> 19:21.810
配置到这

19:21.810 --> 19:23.810
要说dev

19:23.810 --> 19:24.810
开发阶段的时候

19:24.810 --> 19:25.810
我们运行

19:25.810 --> 19:27.810
webpack dev server

19:27.810 --> 19:30.810
dev server

19:30.810 --> 19:31.810
往往这样做来做

19:31.810 --> 19:32.810
所以说我们这里

19:32.810 --> 19:33.810
就可以使用

19:33.810 --> 19:36.810
nps run dev来运行

19:36.810 --> 19:37.810
那么现在呢

19:37.810 --> 19:38.810
接听到哪呢

19:38.810 --> 19:39.810
接听到是不是8000端口了

19:39.810 --> 19:40.810
对吧

19:40.810 --> 19:41.810
OK

19:41.810 --> 19:43.810
compile successfully

19:43.810 --> 19:44.810
8000端口

19:44.810 --> 19:45.810
好 双硬

19:45.810 --> 19:46.810
你看 读到了

19:46.810 --> 19:47.810
对不对

19:47.810 --> 19:48.810
好 这是关于这个

19:48.810 --> 19:49.810
关于这个配置

19:50.810 --> 19:52.810
好 那么接下来我们再看

19:55.810 --> 19:56.810
这里

19:56.810 --> 19:57.810
还有哪一配置呢

19:57.810 --> 19:58.810
还有这个open

19:58.810 --> 19:59.810
这个扣鞋里面好像少写一个

19:59.810 --> 20:00.810
无所谓

20:00.810 --> 20:01.810
那么再说一下

20:01.810 --> 20:02.810
很简单 open

20:02.810 --> 20:03.810
open什么意思呢

20:03.810 --> 20:04.810
表示的是

20:04.810 --> 20:06.810
我们开启服务器过后

20:06.810 --> 20:07.810
它自动打开瀏覽器

20:07.810 --> 20:09.810
自动进行访问

20:09.810 --> 20:10.810
好 比方说

20:10.810 --> 20:11.810
我们这里

20:11.810 --> 20:13.810
open

20:13.810 --> 20:14.810
把 server去

20:14.810 --> 20:15.810
好 现在再来看一下

20:15.810 --> 20:16.810
配置改了

20:16.810 --> 20:17.810
重新运行

20:18.810 --> 20:19.810
现在呢

20:19.810 --> 20:21.810
我们把这些都关了

20:21.810 --> 20:23.810
把这个给关了

20:23.810 --> 20:25.810
接下来我们来看一下

20:25.810 --> 20:26.810
npx

20:26.810 --> 20:27.810
不

20:27.810 --> 20:29.810
npmrondev

20:29.810 --> 20:30.810
运行

20:30.810 --> 20:33.120
你看

20:33.120 --> 20:34.120
是不是自动打开了

20:34.120 --> 20:35.120
扭掉一些窗口

20:35.120 --> 20:36.120
而且自动访问了这个地址

20:36.120 --> 20:37.120
对吧

20:37.120 --> 20:38.120
访问到了

20:38.120 --> 20:39.120
这样更加方便了

20:39.120 --> 20:40.120
我们甚至不用

20:40.120 --> 20:41.120
手动去写这个东西

20:41.120 --> 20:42.120
叫open

20:42.120 --> 20:44.120
open就打开了意思

20:44.120 --> 20:46.120
OK 这是关于这个配置

20:46.120 --> 20:48.120
另外我们再看一下

20:48.120 --> 20:50.120
关于说一下这个配置吧

20:50.120 --> 20:51.120
说一下这个配置

20:51.120 --> 20:52.120
要indexed

20:52.120 --> 20:53.120
indexed

20:53.120 --> 20:54.120
什么意思呢

20:54.120 --> 20:56.120
看一下它的默认值

20:56.120 --> 20:59.120
默认值是indexed

20:59.120 --> 21:00.120
这是啥意思呢

21:00.120 --> 21:01.120
就是说有的时候

21:01.120 --> 21:02.120
你看

21:02.120 --> 21:06.120
我们本来要访问这个地址

21:06.120 --> 21:07.120
本来要访问这个地址

21:07.120 --> 21:08.120
才能访问到啥

21:08.120 --> 21:09.120
才能访问到我们这个页面

21:09.120 --> 21:10.120
你看

21:10.120 --> 21:11.120
我要访问这个地址

21:11.120 --> 21:13.120
才能访问到页面

21:13.120 --> 21:16.120
我有停止了 是吧

21:16.120 --> 21:17.120
没有停止

21:20.070 --> 21:21.070
保存

21:29.680 --> 21:30.680
这个地方

21:30.680 --> 21:31.680
我们indexed

21:31.680 --> 21:32.680
也停不了

21:34.680 --> 21:35.680
你看

21:35.680 --> 21:36.680
是不是要访问这个地址

21:36.680 --> 21:37.680
才能访问到这个页面

21:37.680 --> 21:38.680
对吧

21:42.680 --> 21:43.680
对了

21:43.680 --> 21:44.680
没问题

21:44.680 --> 21:45.680
要访问这个地址

21:45.680 --> 21:46.680
才能访问到页面

21:46.680 --> 21:48.680
但是你会发现

21:48.680 --> 21:49.680
我们访问这样的地址

21:49.680 --> 21:51.680
它也能访问到页面

21:51.680 --> 21:52.680
看到没

21:52.680 --> 21:53.680
那这是怎么回事呢

21:53.680 --> 21:55.680
是因为有的时候

21:55.680 --> 21:57.680
它就是这个东西在起作用

21:57.680 --> 21:58.680
indexed

21:58.680 --> 21:59.680
当你访问这样的地址的时候

21:59.680 --> 22:00.680
它要找谁

22:01.680 --> 22:03.680
找一个没有文件名的文件

22:03.680 --> 22:04.680
对吧

22:04.680 --> 22:05.680
它是不是找不到这样的文件

22:05.680 --> 22:06.680
哪有这样的

22:06.680 --> 22:07.680
没有文件名的文件

22:07.680 --> 22:08.680
当它遇到这种情况的时候

22:08.680 --> 22:09.680
如果它找不到

22:09.680 --> 22:10.680
它找不到

22:10.680 --> 22:11.680
它会测试一下

22:11.680 --> 22:12.680
它会把indexed

22:12.680 --> 22:14.680
给你加上加到后面

22:14.680 --> 22:15.680
测试一下

22:15.680 --> 22:16.680
这样的东西能不能找到

22:16.680 --> 22:17.680
如果能找到的话

22:17.680 --> 22:19.680
它也把这个东西给你发回

22:19.680 --> 22:20.680
所以说

22:20.680 --> 22:21.680
当你没有这样

22:21.680 --> 22:22.680
没有写

22:22.680 --> 22:24.680
没有写具体的资源的时候

22:24.680 --> 22:25.680
它不能给你加上

22:25.680 --> 22:26.680
indexed atmail

22:26.680 --> 22:27.680
这样的访问

22:27.680 --> 22:28.680
所以说

22:28.680 --> 22:29.680
我们当用访问

22:29.680 --> 22:30.680
这样的地址的时候

22:30.680 --> 22:31.680
它也能访问

22:31.680 --> 22:32.680
就这么个意思

22:32.680 --> 22:33.680
比方说这里

22:33.680 --> 22:34.680
我们要abc

22:34.680 --> 22:35.680
把它换成abc.atmail

22:35.680 --> 22:38.380
再来看一下

22:38.380 --> 22:39.380
clear

22:39.380 --> 22:40.380
再运行

22:43.200 --> 22:44.200
再运行

22:45.200 --> 22:46.200
你看

22:46.200 --> 22:47.200
现在是不是找不到了

22:47.200 --> 22:48.200
找不到

22:48.200 --> 22:49.200
它找不到什么

22:49.200 --> 22:50.200
找不到indexed atmail

22:50.200 --> 22:51.200
是不是找不到了

22:51.200 --> 22:53.200
找不到了

22:53.200 --> 22:54.200
找不到abc.atmail

22:54.200 --> 22:55.200
找不到了

22:55.200 --> 22:57.200
找不到过

22:57.200 --> 22:59.200
它就做了一个非常粗暴的行为

22:59.200 --> 23:01.200
它就把整个目录给你捏出来了

23:01.200 --> 23:03.200
把当前工程的目录给你捏出来了

23:03.200 --> 23:05.200
看你访问啥

23:05.200 --> 23:07.200
当然这是不是我们想要的

23:08.200 --> 23:09.200
那么这里

23:09.200 --> 23:10.200
一般我们不用去改它

23:10.200 --> 23:11.200
就说一下这个点

23:12.200 --> 23:14.200
好 现在我们来看一下下面的

23:15.200 --> 23:16.200
看一下下面的

23:16.200 --> 23:18.200
好 这个

23:18.200 --> 23:19.200
proxy

23:19.200 --> 23:20.200
这个东西有用

23:20.200 --> 23:22.200
这个东西在我们后面开发中

23:22.200 --> 23:23.200
非常有用

23:23.200 --> 23:24.200
这东西是干嘛的呢

23:24.200 --> 23:26.200
是配置代理

23:26.200 --> 23:27.200
这啥意思呢

23:27.200 --> 23:29.200
好 接下来我们来写一段代码

23:29.200 --> 23:30.200
大家可以看到

23:30.200 --> 23:33.640
有什么样的问题

23:33.640 --> 23:35.640
好 这里我们先把它关掉

23:36.640 --> 23:38.640
好 比方说indexed.js里面

23:38.640 --> 23:39.640
我们写了这么一段代码

23:39.640 --> 23:42.640
我们去访问一个地址

23:42.640 --> 23:44.640
访问什么样的地址呢

23:46.640 --> 23:48.640
我们访问什么地址呢

23:48.640 --> 23:49.640
我们这样吧

23:49.640 --> 23:51.640
访问那个咱们

23:51.640 --> 23:56.170
组一的一个API

23:56.170 --> 23:58.740
灯度

23:58.740 --> 23:59.740
24

24:00.740 --> 24:01.740
好

24:02.740 --> 24:03.740
进去

24:03.740 --> 24:06.740
学生管理系统里面的一个API

24:06.740 --> 24:08.740
我们就访问这个fandor吧

24:08.740 --> 24:10.740
查询所有学生

24:10.740 --> 24:12.740
接下来我们来废棋

24:12.740 --> 24:13.740
用废棋API来访问

24:13.740 --> 24:15.740
这是查询所有学生

24:15.740 --> 24:17.740
然后我们这里写上

24:17.740 --> 24:19.740
完整的地址吧

24:19.740 --> 24:20.740
完整的地址

24:22.740 --> 24:23.740
小小的

24:23.740 --> 24:24.740
完整的地址

24:24.740 --> 24:25.740
访问一个学生API

24:25.740 --> 24:27.740
然后他要传什么参数呢

24:27.740 --> 24:29.740
传一个APPK进去

24:29.740 --> 24:32.740
OK 我们传一个APPK

24:32.740 --> 24:34.740
我们会在写到上面吧

24:35.740 --> 24:37.740
把我们访问的

24:37.740 --> 24:38.740
请求的字幕刷写到上面

24:41.740 --> 24:42.740
URL

24:43.740 --> 24:45.740
然后这个APPK等于什么呢

24:45.740 --> 24:47.740
你们都应该请求过

24:47.740 --> 24:48.740
我这里就复制一下

24:48.740 --> 24:50.740
复制成功

24:50.740 --> 24:51.740
OK 站过来

24:51.740 --> 24:53.740
好 那么访问这样的地址

24:53.740 --> 24:56.740
然后我把访问的结果

24:59.740 --> 25:00.740
进行解析

25:00.740 --> 25:02.740
把解析成结成格式

25:02.740 --> 25:06.740
然后再拿到请求结果

25:06.740 --> 25:07.740
访问结果

25:07.740 --> 25:11.740
打印一下它的resp

25:11.740 --> 25:12.740
打印一下

25:12.740 --> 25:13.740
咱们来试一下

25:13.740 --> 25:16.740
能否执行成功呢

25:17.740 --> 25:18.740
我们这里重新冥想

25:18.740 --> 25:23.860
看一下

25:23.860 --> 25:25.860
我们再来说明这个问题

25:25.860 --> 25:26.860
运出来了

25:26.860 --> 25:27.860
点击检查

25:27.860 --> 25:29.860
看一下我们的介绍

25:29.860 --> 25:31.860
说产生了跨域的问题

25:31.860 --> 25:32.860
对吧

25:32.860 --> 25:34.860
说产生了跨域的问题

25:34.860 --> 25:35.860
怎么产生的

25:35.860 --> 25:37.860
因为我们这个页面的服务器是什么

25:37.860 --> 25:40.860
页面的服务器是这个地址

25:40.860 --> 25:42.860
这个主机名 这个短口

25:42.860 --> 25:44.860
而我们请求的地址是什么呢

25:44.860 --> 25:48.860
请求的地址是这个

25:48.860 --> 25:50.860
请求的就是

25:50.860 --> 25:52.860
原是这个 对吧

25:52.860 --> 25:54.860
你看协议名不一样

25:54.860 --> 25:56.860
主机名也不一样

25:56.860 --> 25:57.860
短口也不一样

25:57.860 --> 25:58.860
这里是相当于是什么

25:58.860 --> 26:00.860
443

26:00.860 --> 26:01.860
ACPS协议

26:01.860 --> 26:02.860
443短口

26:02.860 --> 26:03.860
所以说

26:03.860 --> 26:04.860
当我们这些东西

26:04.860 --> 26:05.860
有任何一个不一样的时候

26:05.860 --> 26:07.860
都会造成跨域问题

26:07.860 --> 26:08.860
对吧

26:08.860 --> 26:09.860
那么这样的问题

26:09.860 --> 26:10.860
怎么解决呢

26:10.860 --> 26:11.860
这样的问题

26:11.860 --> 26:12.860
我们以前学过什么

26:12.860 --> 26:13.860
JSMP

26:13.860 --> 26:15.860
CORS

26:15.860 --> 26:16.860
都可以解决跨域

26:16.860 --> 26:18.860
但是都需要服务器

26:18.860 --> 26:19.860
来参与解决

26:19.860 --> 26:20.860
那么这个服务器

26:20.860 --> 26:21.860
它没有解决

26:21.860 --> 26:23.860
这样的问题怎么办呢

26:23.860 --> 26:25.860
这样子大家记住个理念

26:25.860 --> 26:28.860
在我们前端开发后

26:28.860 --> 26:31.860
前端页面和介事

26:31.860 --> 26:34.860
开发完成后

26:34.860 --> 26:37.860
往往会

26:37.860 --> 26:41.860
部署到同一个

26:41.860 --> 26:43.860
域中

26:43.860 --> 26:45.860
往往会部署到同一个域中

26:45.860 --> 26:47.860
这是什么意思呢

26:47.860 --> 26:48.860
什么意思

26:48.860 --> 26:49.860
就是说

26:49.860 --> 26:50.860
我们比方说

26:50.860 --> 26:51.860
后台的服务器地址

26:51.860 --> 26:53.860
后台的服务器地址

26:53.860 --> 26:54.860
比方说

26:54.860 --> 26:57.860
后台的服务器域

26:57.860 --> 26:59.860
是这个

26:59.860 --> 27:01.860
ATTP

27:01.860 --> 27:03.860
比方说

27:03.860 --> 27:05.860
DU-1.com

27:05.860 --> 27:06.860
比方说这个地址

27:06.860 --> 27:07.860
后台的服务器域

27:07.860 --> 27:09.860
那么前端

27:09.860 --> 27:12.860
前端开发完成后

27:12.860 --> 27:14.860
是不是要把它放到服务器上

27:14.860 --> 27:17.860
放到服务器的域

27:17.860 --> 27:19.860
前端把开发完了过后

27:19.860 --> 27:20.860
也要把它放到服务器上

27:20.860 --> 27:22.860
那么这个时候放到服务器的域

27:22.860 --> 27:24.860
往往是一样的

27:24.860 --> 27:26.860
往往是一样的

27:26.860 --> 27:27.860
所以说

27:27.860 --> 27:30.860
最终我们写完了代码之后

27:30.860 --> 27:31.860
把它放到服务器上

27:31.860 --> 27:33.860
现在大家可能还不知道怎么做

27:33.860 --> 27:34.860
以后你们学

27:34.860 --> 27:35.860
东西学完了之后

27:35.860 --> 27:36.860
你们自然就知道了

27:36.860 --> 27:38.860
但是我现在告诉你的是

27:38.860 --> 27:41.860
你前端代码开发完了过后

27:41.860 --> 27:42.860
不是说一定

27:42.860 --> 27:45.860
但是往往放到服务器上的域

27:45.860 --> 27:48.860
跟后台的域是一样的

27:48.860 --> 27:49.860
那么这样子一来

27:49.860 --> 27:51.860
你们以后真正的去访问页面

27:51.860 --> 27:53.860
是不是访问了这个地址

27:53.860 --> 27:54.860
而不是什么local host

27:54.860 --> 27:56.860
访问的是这个地址

27:56.860 --> 27:58.860
因此有没有跨域问题

27:58.860 --> 28:00.860
所以没有跨域问题了

28:00.860 --> 28:03.860
往往是不会有跨域问题的

28:03.860 --> 28:05.860
但是问题是

28:05.860 --> 28:07.860
我们现在还没有开发完

28:07.860 --> 28:09.860
我们现在是在开发阶段

28:09.860 --> 28:10.860
懂我意思吗

28:10.860 --> 28:12.860
是在开发阶段

28:12.860 --> 28:14.860
因此这个跨域问题

28:14.860 --> 28:17.860
是不是在开发阶段产生了

28:17.860 --> 28:18.860
实际上以后开发完了过

28:18.860 --> 28:19.860
并不会跨域

28:19.860 --> 28:20.860
但是在开发阶段

28:20.860 --> 28:22.860
是不是有个跨域问题

28:22.860 --> 28:24.860
他要解决这个问题

28:24.860 --> 28:28.860
而且你这样子写代码好不好呢

28:28.860 --> 28:29.860
实际上不好

28:29.860 --> 28:31.860
为什么你这样子写代码

28:31.860 --> 28:33.860
一个不好的点在于

28:33.860 --> 28:35.860
你把这个玩意儿

28:35.860 --> 28:37.860
你把这个玩意儿写死了

28:37.860 --> 28:39.860
你看一二有里边

28:39.860 --> 28:40.860
什么协议

28:40.860 --> 28:42.860
主机短可耗的东西

28:42.860 --> 28:43.860
全部写死了

28:43.860 --> 28:44.860
前面这些东西

28:44.860 --> 28:46.860
写死了有什么不好

28:46.860 --> 28:47.860
将来如果说

28:47.860 --> 28:49.860
我们网站要换一个域名

28:49.860 --> 28:50.860
那麻烦了

28:50.860 --> 28:51.860
要到处改代码

28:51.860 --> 28:52.860
换域名这种操作

28:52.860 --> 28:54.860
你为什么会直接要改代码

28:54.860 --> 28:55.860
就不太好

28:55.860 --> 28:56.860
就不太好

28:56.860 --> 28:59.860
所以说我们往往写UIL地址

28:59.860 --> 29:01.860
你想你看这个道理

29:01.860 --> 29:02.860
由于我们以后

29:02.860 --> 29:04.860
真正部署完了过后

29:04.860 --> 29:05.860
他们是同一个域

29:05.860 --> 29:06.860
由于是同一个域的话

29:06.860 --> 29:07.860
在页面上请求

29:07.860 --> 29:09.860
是不是没有必要去写什么协议

29:09.860 --> 29:10.860
主机名短可

29:10.860 --> 29:11.860
是不是没有必要写

29:11.860 --> 29:13.860
你就这样请求

29:13.860 --> 29:15.860
请求他们翻的

29:17.860 --> 29:19.860
APS students

29:19.860 --> 29:20.860
总之就是这样请求

29:20.860 --> 29:21.860
是不是就完了

29:21.860 --> 29:22.860
因为它本身的页面

29:22.860 --> 29:23.860
就在这个域下

29:23.860 --> 29:24.860
因此你这样的请求

29:24.860 --> 29:25.860
是不是就把这个协议

29:25.860 --> 29:27.860
主机名短可自动给你加上了

29:27.860 --> 29:28.860
对不对

29:28.860 --> 29:29.860
所以说以后部署到

29:29.860 --> 29:31.860
真正的服务段运行的时候

29:31.860 --> 29:32.860
根本就没有必要写权的

29:32.860 --> 29:34.860
只需要这样子写就行了

29:34.860 --> 29:36.860
我们在开发阶段写的代码

29:36.860 --> 29:38.860
肯定要是为了在服务期上

29:38.860 --> 29:40.860
流畅正确的运行的

29:40.860 --> 29:42.860
因此我们在开发阶段

29:42.860 --> 29:43.860
也会这么写代码

29:43.860 --> 29:44.860
我讲了这么多

29:44.860 --> 29:45.860
应该能听懂

29:46.860 --> 29:47.860
而且这样子写代码也很好

29:47.860 --> 29:48.860
将来换的运民

29:48.860 --> 29:49.860
跟他有没有影响

29:49.860 --> 29:50.860
没有任何影响

29:50.860 --> 29:51.860
比方说以后

29:51.860 --> 29:52.860
前段的服务期的运民换了

29:52.860 --> 29:53.860
变成ABC典抗了

29:53.860 --> 29:54.860
那么后段服务期

29:54.860 --> 29:55.860
也会跟着换

29:55.860 --> 29:56.860
那么前段服务期的代码

29:56.860 --> 29:57.860
改不改

29:57.860 --> 29:58.860
不改

29:58.860 --> 29:59.860
因为它这样子就是用的

29:59.860 --> 30:02.860
本当前的就是页面的运民

30:02.860 --> 30:03.860
所以说我们

30:03.860 --> 30:04.860
正确代码应该这样子写

30:04.860 --> 30:05.860
那么这样子写

30:05.860 --> 30:06.860
更加请求不到

30:06.860 --> 30:08.860
这样子写有没有跨域问题

30:08.860 --> 30:09.860
在开发阶段

30:09.860 --> 30:10.860
它就倒是不会有

30:10.860 --> 30:11.860
什么跨域问题

30:11.860 --> 30:12.860
那它请求的是什么

30:12.860 --> 30:13.860
LOCOS8000

30:13.860 --> 30:14.860
是不是请求了

30:14.860 --> 30:15.860
这个地址

30:15.860 --> 30:16.860
倒是跨域问题

30:16.860 --> 30:17.860
不存在了

30:17.860 --> 30:19.860
这个地址是不是不存在了

30:19.860 --> 30:20.860
LOCOS这个服务期下

30:20.860 --> 30:22.860
是不是不存在了

30:22.860 --> 30:23.860
对不对

30:23.860 --> 30:24.860
因此还为了解决

30:24.860 --> 30:25.860
这个问题

30:25.860 --> 30:26.860
它怎么解决了

30:26.860 --> 30:29.860
特别简单

30:29.860 --> 30:30.860
它特别简单

30:30.860 --> 30:31.860
怎么解决了

30:31.860 --> 30:33.860
它就使用代理

30:33.860 --> 30:34.860
怎么弄的

30:34.860 --> 30:36.860
它这样子来弄的

30:36.860 --> 30:39.860
你不是用LOCOS8000

30:39.860 --> 30:40.860
你看

30:40.860 --> 30:41.860
你这样的地址

30:41.860 --> 30:42.860
你这样的地址

30:42.860 --> 30:44.860
最终就会生成什么

30:44.860 --> 30:46.860
ATTP

30:46.860 --> 30:48.860
然后API

30:48.860 --> 30:50.860
最终请求这个地址

30:50.860 --> 30:52.860
Fantal

30:52.860 --> 30:53.860
是不是请求这个地址

30:53.860 --> 30:55.860
请求交给谁的

30:55.860 --> 30:56.860
交给谁的

30:56.860 --> 30:57.860
是不是交给

30:57.860 --> 30:58.860
独一的服务器

30:58.860 --> 30:59.860
好好想想

30:59.860 --> 31:00.860
这个地址

31:00.860 --> 31:01.860
是不是交给独一的服务器

31:01.860 --> 31:02.860
再处理

31:02.860 --> 31:04.860
本地的8000端口

31:04.860 --> 31:05.860
交给谁再处理

31:05.860 --> 31:06.860
是不是交给这个玩意

31:06.860 --> 31:08.860
这个DevServer

31:08.860 --> 31:10.860
叫做Waypack

31:10.860 --> 31:11.860
DevServer

31:12.860 --> 31:14.860
他一看这个请求

31:14.860 --> 31:15.860
一看这个请求

31:15.860 --> 31:17.860
首先的这个请求

31:17.860 --> 31:18.860
他没有

31:18.860 --> 31:20.860
是不是没有相应的文件

31:20.860 --> 31:21.860
那么默认情况下

31:21.860 --> 31:22.860
他就是404

31:22.860 --> 31:24.860
比方说你直接去访问吧

31:24.860 --> 31:26.860
那肯定是404

31:26.860 --> 31:27.860
找不到

31:27.860 --> 31:28.860
找不到

31:28.860 --> 31:30.860
找不到这个野面

31:30.860 --> 31:31.860
找不到这个资源

31:31.860 --> 31:32.860
那么这个时候

31:32.860 --> 31:34.860
如果说你用一个合适的配置

31:34.860 --> 31:35.860
你可以告诉他

31:35.860 --> 31:37.860
凡是我用这种方式

31:37.860 --> 31:38.860
来开始请求的话

31:38.860 --> 31:40.860
那么你麻烦你一下

31:40.860 --> 31:42.860
你去给我干嘛呢

31:42.860 --> 31:44.860
你去给我请求这样的地址

31:44.860 --> 31:48.560
请求这么地址

31:48.560 --> 31:52.000
请求那个这一部分

31:52.000 --> 31:55.000
麻烦你去请求这个东西

31:55.000 --> 31:59.740
这就是代理

31:59.740 --> 32:02.380
谁在代理

32:02.380 --> 32:04.380
是不是Waypack的DevServer在代理

32:04.380 --> 32:05.380
有些同学说

32:05.380 --> 32:07.380
那他去请求这个地方

32:07.380 --> 32:08.380
会不会跨域

32:08.380 --> 32:12.010
好好想想你这个问题

32:12.010 --> 32:13.010
他去请求这个

32:13.010 --> 32:15.010
会不会跨域

32:15.010 --> 32:16.010
不会

32:16.010 --> 32:17.010
为啥

32:17.010 --> 32:20.010
跨域是浏览极端的

32:20.010 --> 32:21.010
它是啥

32:21.010 --> 32:23.010
它是在运行在漏的

32:23.010 --> 32:25.010
解释环境下面的服务器端

32:25.010 --> 32:26.010
对吧

32:26.010 --> 32:27.010
它是不会跨域的

32:27.010 --> 32:28.010
就在漏的代码里边

32:28.010 --> 32:30.010
他去请求他

32:30.010 --> 32:31.010
他很简单

32:31.010 --> 32:32.010
以后你们学到漏的过

32:32.010 --> 32:33.010
就知道怎么去请求他了

32:33.010 --> 32:34.010
在漏的环境里面

32:34.010 --> 32:35.010
根本就不存在跨域

32:35.010 --> 32:37.010
这个概念都不存在

32:37.010 --> 32:39.010
他就可以正常请求

32:39.010 --> 32:40.010
但是这件事情

32:40.010 --> 32:41.010
我知不知道

32:41.010 --> 32:42.010
你一面知不知道

32:42.010 --> 32:43.010
一面也啥都不知道

32:43.010 --> 32:44.010
一面只知道我请求了

32:44.010 --> 32:45.010
DevServer这个服务器

32:45.010 --> 32:46.010
然后他就把结果给我了

32:46.010 --> 32:47.010
然后他到底怎么做的呢

32:47.010 --> 32:48.010
他出去请求了

32:48.010 --> 32:49.010
这个东西

32:49.010 --> 32:56.010
结果将响应结果返回

32:56.010 --> 32:57.010
所以对于浏览器而言

32:57.010 --> 32:58.010
就很神奇

32:58.010 --> 32:59.010
我去请求这个地址

32:59.010 --> 33:00.010
我就拿到响应结果了

33:00.010 --> 33:02.010
但他并不知道

33:02.010 --> 33:03.010
请求这个地址的时候

33:03.010 --> 33:04.010
他并不知道

33:04.010 --> 33:06.010
他的内部做了这么一件事

33:06.010 --> 33:07.010
现在接下来的问题就是

33:07.010 --> 33:10.010
我得告诉这个位派的DevServer

33:10.010 --> 33:11.010
我得告诉他

33:11.010 --> 33:12.010
麻烦你

33:12.010 --> 33:15.010
当我去请求他的时候

33:15.010 --> 33:16.010
麻烦你给我改成

33:16.010 --> 33:17.010
请求这个地址

33:17.010 --> 33:18.010
可能就改成

33:18.010 --> 33:20.010
把前面的地址改成这个

33:20.010 --> 33:21.010
就需要告诉他

33:21.010 --> 33:22.010
那怎么来告诉呢

33:22.010 --> 33:24.010
就需要通过一个配置

33:24.010 --> 33:26.010
叫做proxy

33:26.010 --> 33:28.010
proxy 这个配置

33:28.010 --> 33:29.010
好 具体怎么配

33:29.010 --> 33:31.010
咱们来看文档

33:31.010 --> 33:34.010
看文档

33:34.010 --> 33:35.010
其实他这里配置

33:35.010 --> 33:37.010
说的其实已经非常清楚了

33:37.010 --> 33:40.010
他说你这样配置

33:40.010 --> 33:41.010
proxy

33:41.010 --> 33:42.010
这里proxy

33:42.010 --> 33:46.010
然后把它配置成一个对象

33:46.010 --> 33:47.010
这个对象里面

33:47.010 --> 33:50.010
他就表示的是代理规则

33:50.010 --> 33:52.010
就怎么来进行代理

33:52.010 --> 33:53.010
你不是要告诉他吗

33:53.010 --> 33:54.010
对吧

33:54.010 --> 33:55.010
你怎么样怎么样

33:55.010 --> 33:56.010
把它转换了怎么样怎么样

33:56.010 --> 33:57.010
不是要告诉他吗

33:57.010 --> 33:58.010
OK

33:58.010 --> 34:00.010
代理怎么来代理

34:00.010 --> 34:01.010
第一个属性名

34:01.010 --> 34:02.010
属性名表示的意思呢

34:02.010 --> 34:05.010
就是说凡是你的请求地址

34:05.010 --> 34:06.010
就是请求了这个地址

34:06.010 --> 34:08.010
请求这个位派的DevServer

34:08.010 --> 34:09.010
这个地址

34:09.010 --> 34:11.010
只要你请求地址中

34:11.010 --> 34:16.010
能够符合这个政策表达

34:16.010 --> 34:17.010
这里是个政策表达式

34:17.010 --> 34:19.010
政策表达式的要求

34:19.010 --> 34:20.010
那么OK

34:20.010 --> 34:21.010
我就进行代理

34:21.010 --> 34:22.010
那么这里符不符合呢

34:22.010 --> 34:24.010
你看我这些政策表达式怎么写的

34:24.010 --> 34:25.010
没有写任何的特殊符号

34:25.010 --> 34:27.010
就是一个普通的制服算

34:27.010 --> 34:28.010
就表示说

34:28.010 --> 34:29.010
你的请求地址

34:29.010 --> 34:31.010
你只要包含了协杠API

34:31.010 --> 34:33.010
那么这样的请求地址

34:33.010 --> 34:34.010
我会交给谁呢

34:34.010 --> 34:35.010
我会把他的

34:35.010 --> 34:38.010
域名以及协议

34:38.010 --> 34:39.010
主机名端口号

34:39.010 --> 34:41.010
会改成这个东西

34:41.010 --> 34:43.010
这个东西我们把它改一下

34:43.010 --> 34:45.010
我看一下这边

34:46.010 --> 34:47.010
对 这个

34:47.010 --> 34:49.010
我刚才好像写错了

34:49.010 --> 34:51.010
还不是这边这个

34:51.010 --> 34:52.010
还不是这边这个

34:52.010 --> 34:55.320
应该是这个地址

34:55.320 --> 34:57.320
来 我们把它写成这个

34:57.320 --> 34:58.320
复制过来

34:58.320 --> 34:59.320
你看

34:59.320 --> 35:01.320
只要你的请求地址里边

35:01.320 --> 35:02.320
包含了这个东西

35:02.320 --> 35:04.320
那么我经过我的

35:04.320 --> 35:06.320
WebDevServer来处理过后

35:06.320 --> 35:07.320
他发现

35:07.320 --> 35:08.320
他满足这种表达式的要求

35:08.320 --> 35:10.320
我就把你这一坨

35:10.320 --> 35:12.320
给你变成这一坨

35:12.320 --> 35:13.320
就这么简单

35:13.320 --> 35:15.320
其他的地方都不变

35:15.320 --> 35:17.320
好 接下来我们来看一下

35:18.320 --> 35:19.320
我们

35:19.320 --> 35:20.320
喜好配置过后

35:20.320 --> 35:21.320
停止

35:22.320 --> 35:23.320
运行

35:23.320 --> 35:25.320
看一下行不行

35:26.320 --> 35:27.320
打开

35:27.320 --> 35:29.320
点击右键 检查

35:29.320 --> 35:31.320
控制台

35:31.320 --> 35:33.320
好 现在那里看

35:33.320 --> 35:34.320
是不是他虽然还在抱错

35:34.320 --> 35:35.320
虽然还在抱错

35:35.320 --> 35:36.320
但是

35:36.320 --> 35:38.320
是不是就已经没有了

35:38.320 --> 35:39.320
什么了

35:39.320 --> 35:40.320
就已经没有了

35:40.320 --> 35:41.320
跨域的错误了

35:41.320 --> 35:43.320
对吧 之前不是有跨域的错误吗

35:43.320 --> 35:45.320
现在是不是已经没有跨域的错误了

35:45.320 --> 35:47.320
他表示404 not found

35:47.320 --> 35:49.320
那么这个是怎么回事呢

35:49.320 --> 35:50.320
好

35:50.320 --> 35:51.320
那么接下来我们来看一下

35:51.320 --> 35:52.320
这个其实就已经

35:52.320 --> 35:54.320
其实他已经完成这件事了

35:54.320 --> 35:55.320
他已经完成这件事了

35:55.320 --> 35:56.320
你请求这个地址

35:56.320 --> 35:57.320
他交给他

35:57.320 --> 35:59.320
他就请求这个地址

35:59.320 --> 36:01.320
他其实已经这样做了

36:01.320 --> 36:02.320
只不过这个地址

36:02.320 --> 36:03.320
就这个服务器

36:03.320 --> 36:04.320
他给你返回的结果

36:04.320 --> 36:05.320
又是个404

36:05.320 --> 36:06.320
为什么是404呢

36:06.320 --> 36:08.320
咱们点过去看一下

36:08.320 --> 36:10.320
为啥是404

36:10.320 --> 36:11.320
点击

36:11.320 --> 36:12.320
点进去

36:14.320 --> 36:16.320
我们直接去请求这个地址

36:17.320 --> 36:19.320
直接去请求

36:19.320 --> 36:20.320
这个地址

36:20.320 --> 36:21.320
好 你看着

36:21.320 --> 36:22.320
我们请求的是不是

36:22.320 --> 36:23.320
都一的服务器

36:23.320 --> 36:24.320
不是

36:24.320 --> 36:25.320
我们请求的是啥

36:25.320 --> 36:26.320
请求的你看

36:26.320 --> 36:27.320
8000

36:27.320 --> 36:28.320
是不是请求的是deaf server

36:28.320 --> 36:29.320
是请求的他

36:29.320 --> 36:30.320
对吧

36:30.320 --> 36:31.320
请求他的时候

36:31.320 --> 36:32.320
他进行转发

36:32.320 --> 36:33.320
转发到这

36:33.320 --> 36:34.320
然后把这个地方

36:34.320 --> 36:36.700
给我的结果直接返回

36:36.700 --> 36:37.700
看一下吧

36:37.700 --> 36:38.700
是不是404

36:38.700 --> 36:40.700
他就给包了个ng这个

36:40.700 --> 36:41.700
这个肯定不是

36:41.700 --> 36:42.700
为拍个deaf server包的

36:42.700 --> 36:43.700
这是个ng这个

36:43.700 --> 36:44.700
说明都一的

36:44.700 --> 36:45.700
都一的这个服务器

36:45.700 --> 36:47.700
是用ng这个是搭建的

36:47.700 --> 36:48.700
好 那么这里是不是

36:48.700 --> 36:49.700
包了一个真实的

36:49.700 --> 36:50.700
服务器的错误

36:50.700 --> 36:51.700
那怎么回事呢

36:51.700 --> 36:52.700
其实这个地址是这样子的

36:52.700 --> 36:54.700
他这个地址是没问题的

36:54.700 --> 36:55.700
他真的是发过

36:55.700 --> 36:56.700
请求发过去了

36:56.700 --> 36:58.700
是因为有些浏览器

36:58.700 --> 36:59.700
他要认这个东西

36:59.700 --> 37:00.700
有些服务器

37:00.700 --> 37:01.700
比方说咱们

37:01.700 --> 37:02.700
都一的这个服务器

37:02.700 --> 37:03.700
他要认这个东西

37:03.700 --> 37:04.700
认这个host

37:04.700 --> 37:06.700
我们知道request

37:06.700 --> 37:07.700
请求的时候

37:07.700 --> 37:08.700
是不是要加一个header

37:08.700 --> 37:09.700
是吧

37:09.700 --> 37:10.700
header

37:11.700 --> 37:12.700
那么header

37:12.700 --> 37:14.700
里边有一个host

37:14.700 --> 37:16.700
是不是这个东西

37:16.700 --> 37:17.700
这个东西呢

37:17.700 --> 37:18.700
目前请求的服务器

37:18.700 --> 37:20.700
这个东西是localhost

37:20.700 --> 37:21.700
8000

37:21.700 --> 37:22.700
是这个玩意

37:22.700 --> 37:24.700
那么服务器他不认

37:24.700 --> 37:26.700
就是因为这个原因

37:26.700 --> 37:27.700
啥意思

37:27.700 --> 37:28.700
就是说他这里

37:28.700 --> 37:29.700
转发请求的时候

37:29.700 --> 37:30.700
他只是把

37:30.700 --> 37:32.700
请求地址给你变了一下

37:32.700 --> 37:33.700
你这个请求

37:33.700 --> 37:35.700
头里边的所有东西

37:35.700 --> 37:37.700
以及呢

37:37.700 --> 37:39.700
像什么

37:39.700 --> 37:40.700
所谓的建制队

37:40.700 --> 37:41.700
请求方法一顿

37:41.700 --> 37:42.700
全部没变

37:42.700 --> 37:43.700
他只是把请求地址

37:43.700 --> 37:44.700
给你变了

37:44.700 --> 37:45.700
而有些服务器

37:45.700 --> 37:46.700
是要认请求头

37:46.700 --> 37:47.700
里边的东西的

37:47.700 --> 37:48.700
因此他这里的

37:48.700 --> 37:49.700
服务器那边

37:49.700 --> 37:51.700
认为你的请求头

37:51.700 --> 37:52.700
有些地方

37:52.700 --> 37:53.700
不满足要求

37:53.700 --> 37:54.700
因此来给你报个措

37:54.700 --> 37:56.700
好咱们具体看一下

37:56.700 --> 37:57.700
我们给他的请求头

37:57.700 --> 37:58.700
是什么呢

37:58.700 --> 37:59.700
刷新

38:02.700 --> 38:05.700
给他的请求头看一下

38:05.700 --> 38:06.700
request headers

38:06.700 --> 38:07.700
你看host

38:07.700 --> 38:09.700
是不是localhost8000

38:09.700 --> 38:10.700
对吧

38:10.700 --> 38:11.700
请求头是这个

38:11.700 --> 38:12.700
那么这样子

38:12.700 --> 38:13.700
在webpack dev server

38:13.700 --> 38:14.700
内部他转发的时候

38:14.700 --> 38:15.700
对不起

38:15.700 --> 38:17.700
我请求头仍然一个都不动

38:17.700 --> 38:18.700
原封不动的

38:18.700 --> 38:19.700
给你发到服务器

38:19.700 --> 38:20.700
因此他发

38:20.700 --> 38:21.700
他去请求服务器的时候

38:21.700 --> 38:23.700
他给他的host

38:23.700 --> 38:24.700
还是能够host8000

38:24.700 --> 38:25.700
服务器看不行

38:25.700 --> 38:26.700
那他你不行

38:26.700 --> 38:28.700
说明了你的请求头里边

38:28.700 --> 38:29.700
我是要认这个host的

38:29.700 --> 38:30.700
因此呢

38:30.700 --> 38:32.700
对于这种问题

38:32.700 --> 38:33.700
怎么解决呢

38:33.700 --> 38:34.700
这个proxy里边

38:34.700 --> 38:35.700
还有一个配置

38:35.700 --> 38:37.700
就是把这个地方

38:37.700 --> 38:39.700
把这个后边的改写规则

38:39.700 --> 38:41.700
配置成一个对象

38:41.700 --> 38:42.700
这样子呢

38:42.700 --> 38:44.700
他可以配置更多的东西

38:44.700 --> 38:46.700
刚才我们的这个

38:46.700 --> 38:47.700
请求地址

38:47.700 --> 38:48.700
就是如果说你匹配到这个

38:48.700 --> 38:49.700
然后呢

38:49.700 --> 38:50.700
就请求这个地址

38:50.700 --> 38:51.700
对吧

38:51.700 --> 38:52.700
把它写成一个target的属性

38:52.700 --> 38:53.700
然后呢

38:53.700 --> 38:54.700
这样子呢

38:54.700 --> 38:55.700
我们就可以配置更多的东西了

38:55.700 --> 38:56.700
其中一个东西叫做

38:56.700 --> 38:59.700
change orange

38:59.700 --> 39:00.700
什么意思

39:00.700 --> 39:01.700
把稍微处

39:01.700 --> 39:02.700
更改

39:02.700 --> 39:04.700
请求头

39:04.700 --> 39:06.700
中的host

39:06.700 --> 39:08.700
和orange

39:08.700 --> 39:09.700
如果请求头

39:09.700 --> 39:10.700
能包含host和orange的话

39:10.700 --> 39:11.700
再把改

39:11.700 --> 39:12.700
改成什么呢

39:12.700 --> 39:14.700
改成新的

39:14.700 --> 39:15.700
这个

39:15.700 --> 39:16.700
这个请求

39:16.700 --> 39:18.700
这个主机名

39:18.700 --> 39:19.700
他就是来修改请求头的

39:19.700 --> 39:20.700
因此呢

39:20.700 --> 39:21.700
这样子呢

39:21.700 --> 39:22.700
虽然说我们

39:22.700 --> 39:23.700
请求他

39:23.700 --> 39:24.700
请求这个地址的时候

39:24.700 --> 39:25.700
给了什么呢

39:25.700 --> 39:26.700
刘洋奇给的请求头

39:26.700 --> 39:28.700
是localhost

39:28.700 --> 39:29.700
8000

39:29.700 --> 39:31.700
给的请求头是这个对吧

39:31.700 --> 39:32.700
那么他

39:32.700 --> 39:35.700
他转发这个请求的时候

39:35.700 --> 39:36.700
这个时候呢

39:36.700 --> 39:38.700
他会把这个请求头给你改了

39:38.700 --> 39:39.700
改成什么

39:39.700 --> 39:42.700
改成open.edu.com

39:42.700 --> 39:43.700
8000

39:43.700 --> 39:44.700
所以改成这个样子

39:44.700 --> 39:45.700
对吧

39:45.700 --> 39:46.700
这样子呢

39:46.700 --> 39:47.700
就可以完成一个正常的请求了

39:47.700 --> 39:48.700
如果说你不加这个的话

39:48.700 --> 39:49.700
它是不会改的

39:49.700 --> 39:51.700
当然这个东西看服务器

39:51.700 --> 39:52.700
有些服务器呢

39:52.700 --> 39:53.700
无所谓

39:53.700 --> 39:54.700
随便的请求头是啥都行

39:54.700 --> 39:56.700
那么就可以正常请求

39:56.700 --> 39:57.700
有些服务器呢

39:57.700 --> 39:59.700
他要认这个请求头host

39:59.700 --> 40:00.700
因此呢

40:00.700 --> 40:02.700
这样子我们就change orange

40:02.700 --> 40:03.700
那么这些东西在

40:03.700 --> 40:05.700
以后真正完成开发之后

40:05.700 --> 40:06.700
在服

40:06.700 --> 40:07.700
真正部署完了过后

40:07.700 --> 40:08.700
有没有这样的问题

40:08.700 --> 40:09.700
肯定没有这样的问题

40:09.700 --> 40:10.700
对吧

40:10.700 --> 40:11.700
真正部署完了过后

40:11.700 --> 40:12.700
他们是同一个愚民

40:12.700 --> 40:13.700
请求头育肯定是一样的

40:13.700 --> 40:14.700
所以不会有这个问题

40:14.700 --> 40:15.700
只是在开发阶段呢

40:15.700 --> 40:16.700
他有这个差异

40:16.700 --> 40:17.700
所以说不规避一下

40:17.700 --> 40:18.700
保存

40:18.700 --> 40:19.700
现在再看一下

40:19.700 --> 40:23.780
这里要重新启动

40:23.780 --> 40:25.780
NPM

40:25.780 --> 40:29.110
对

40:29.110 --> 40:31.110
好 现在再看

40:31.110 --> 40:32.110
点击右键

40:32.110 --> 40:33.110
检查

40:33.110 --> 40:34.110
你看

40:34.110 --> 40:36.110
得到服务器的响应结果了

40:36.110 --> 40:37.110
你看

40:37.110 --> 40:38.110
产运成功

40:38.110 --> 40:39.110
所有的学生拿到了

40:39.110 --> 40:40.110
包括这边

40:40.110 --> 40:41.110
这边一刷新

40:41.110 --> 40:42.110
这边也可以请求

40:42.110 --> 40:43.110
对吧

40:43.110 --> 40:44.110
也可以看到

40:44.110 --> 40:46.110
我们请求的是Localhost 8000

40:46.110 --> 40:47.110
但是能拿到的是什么

40:47.110 --> 40:48.110
拿到的是杜一

40:48.110 --> 40:49.110
那个服务器的结果

40:49.110 --> 40:50.110
为什么

40:50.110 --> 40:51.110
因为dev-sever

40:51.110 --> 40:52.110
帮忙进行的转发

40:52.110 --> 40:53.110
对吧

40:53.110 --> 40:54.110
就可以实现这么样的目的

40:54.110 --> 40:55.110
当然说

40:55.110 --> 40:57.110
你有多种请求规则的话

40:57.110 --> 40:58.110
那么也可以接着写

40:58.110 --> 40:59.110
比方说

40:59.110 --> 41:01.110
你要请求别的什么地址的时候

41:01.110 --> 41:03.110
我要去做什么样的

41:04.110 --> 41:06.110
都可以直接写

41:06.110 --> 41:07.110
这么个意思

41:07.110 --> 41:08.110
当然一般情况下

41:08.110 --> 41:10.110
我们只是在对API这一块

41:10.110 --> 41:11.110
进行处理

41:12.110 --> 41:14.110
好 那么这次关于

41:14.110 --> 41:16.110
这一块

41:16.110 --> 41:17.110
其他的有开发服务器

41:17.110 --> 41:18.110
也就没啥了

41:18.110 --> 41:19.110
就没啥了

41:19.110 --> 41:20.110
开发服务器

41:20.110 --> 41:21.110
咱们这里

41:21.110 --> 41:23.110
也就用到这么一些

41:23.110 --> 41:24.110
看一下课件吧

41:24.110 --> 41:27.810
开发服务器的配置

41:27.810 --> 41:28.810
Port

41:28.810 --> 41:29.810
还有这个State

41:29.810 --> 41:31.810
这个玩意儿是啥呢

41:31.810 --> 41:33.810
我怎么把个关了

41:33.810 --> 41:34.810
这个玩意儿是啥呢

41:34.810 --> 41:35.810
这个玩意儿指的是

41:35.810 --> 41:37.810
相当于我们之前讲过那个

41:37.810 --> 41:39.810
就是浙杰可讲过的

41:41.810 --> 41:42.810
其他细节配置里

41:42.810 --> 41:44.810
就是控制输出

41:44.810 --> 41:45.810
控制那个

41:45.810 --> 41:47.810
控制台里边的输出

41:47.810 --> 41:49.810
就统计信息

41:49.810 --> 41:50.810
那么这里呢

41:50.810 --> 41:51.810
WebPack

41:51.810 --> 41:52.810
DevServer

41:52.810 --> 41:53.810
它也支持这个配置

41:53.810 --> 41:54.810
State

41:55.810 --> 41:56.810
支持这个配置

41:56.810 --> 41:57.810
可以对它进行

41:57.810 --> 41:58.810
详细的控制

41:58.810 --> 41:59.810
因为这个里边

41:59.810 --> 42:01.810
它有于输出的东西

42:01.810 --> 42:02.810
太多了

42:02.810 --> 42:04.810
不太利于我们

42:04.810 --> 42:05.810
阅读

42:05.810 --> 42:06.810
那么我们可以控制一下吧

42:06.810 --> 42:08.810
比方说

42:08.810 --> 42:09.810
要控制一下

42:10.810 --> 42:11.810
Marge

42:11.810 --> 42:12.810
我记得有这个那个配置

42:12.810 --> 42:14.810
Busery Force

42:14.810 --> 42:15.810
保存

42:15.810 --> 42:16.810
咱们来看一下

42:16.810 --> 42:19.250
这样子

42:19.250 --> 42:20.250
它在打包的时候

42:20.250 --> 42:22.250
它就不会输出Marge的信息了

42:23.250 --> 42:24.250
你看一下

42:25.250 --> 42:26.250
是不是Marge

42:26.250 --> 42:28.250
我看一下

42:28.250 --> 42:29.250
是不是Marge

42:29.250 --> 42:30.250
Marge

42:30.250 --> 42:32.250
还有一个S

42:32.250 --> 42:33.250
S

42:34.250 --> 42:36.250
它为什么会输出这么多呢

42:36.250 --> 42:37.250
是因为

42:37.250 --> 42:38.250
它在开发阶段

42:38.250 --> 42:39.250
它打包的时候

42:39.250 --> 42:40.250
不仅仅

42:40.250 --> 42:42.250
它不仅仅是

42:42.250 --> 42:44.250
会把我们一起的代码打包进去

42:44.250 --> 42:45.250
因为它要监控

42:45.250 --> 42:47.250
监控还要就是

42:47.250 --> 42:49.250
我们文件变化了

42:49.250 --> 42:50.250
还要重新刷新

42:50.250 --> 42:51.250
像这个东西

42:51.250 --> 42:52.250
它都要写代码的

42:52.250 --> 42:53.250
因此它会把

42:53.250 --> 42:54.250
它自己的一些代码

42:54.250 --> 42:55.250
也打包进去

42:56.250 --> 42:57.250
我们看一下吧

42:57.250 --> 42:58.250
看一下

42:58.250 --> 42:59.250
它生成的介石

42:59.250 --> 43:00.250
有看到它代码

43:00.250 --> 43:01.250
其实并不少

43:01.250 --> 43:05.520
这个介石

43:05.520 --> 43:06.520
看一下这个介石

43:06.520 --> 43:07.520
你看

43:07.520 --> 43:08.520
本来我们的代码不多

43:08.520 --> 43:09.520
为什么有这么多代码

43:09.520 --> 43:10.520
它实际上

43:10.520 --> 43:11.520
里边其实加了很多

43:11.520 --> 43:13.520
用于调色的代码

43:13.520 --> 43:14.520
因此

43:14.520 --> 43:15.520
还包括

43:15.520 --> 43:16.520
就是监听

43:16.520 --> 43:18.520
我们文件变化的一些东西

43:18.520 --> 43:20.520
因此它加了不少这些东西

43:20.520 --> 43:21.520
因此它的代码其实很多的

43:21.520 --> 43:22.520
所以说

43:22.520 --> 43:23.520
它这里面模块显示的特别多

43:23.520 --> 43:25.520
但是我们加上Marge

43:25.520 --> 43:26.520
Force过后

43:26.520 --> 43:27.520
我们重新打包

43:29.520 --> 43:34.520
看一下

43:34.520 --> 43:35.520
你看

43:35.520 --> 43:36.520
是不是就显示了少了很多

43:36.520 --> 43:37.520
对吧

43:37.520 --> 43:38.520
它就显示了这么一些东西

43:38.520 --> 43:39.520
当然你还可以进行

43:39.520 --> 43:40.520
更加精细的控制

43:40.520 --> 43:41.520
要显示什么

43:41.520 --> 43:42.520
不显示什么

43:42.520 --> 43:43.520
都可以进行控制

43:43.520 --> 43:44.520
就看你自己的

43:45.520 --> 43:46.520
OK 这是关于这一块

43:46.520 --> 43:47.520
还有咱们

43:47.520 --> 43:49.520
再设个Colors

43:49.520 --> 43:51.520
Colors2

43:51.520 --> 43:52.520
这样子好看一点

43:52.520 --> 43:53.520
比方说

43:53.520 --> 43:54.520
这样子

43:54.520 --> 43:58.240
好 上阵

44:00.240 --> 44:01.240
你看

44:01.240 --> 44:02.240
好看一点

44:03.240 --> 44:04.240
那么这些东西

44:04.240 --> 44:05.240
能不能不写到DevServer里边

44:05.240 --> 44:06.240
写到哪里

44:06.240 --> 44:07.240
写到这里边

44:07.240 --> 44:08.240
行不行

44:08.240 --> 44:09.240
其实我也不知道

44:09.240 --> 44:10.240
试一下吧

44:10.240 --> 44:11.240
试一下吧

44:11.240 --> 44:13.240
看一下行不行

44:13.240 --> 44:15.240
是不是写到这也有效

44:15.240 --> 44:17.240
就用传统的方式

44:18.240 --> 44:19.240
没问题

44:19.240 --> 44:20.240
有效的

44:20.240 --> 44:21.240
说的都一样

44:21.240 --> 44:22.240
都一样

44:22.240 --> 44:24.240
OK 那就写到这吧

44:24.240 --> 44:28.240
这就关于DevServer

44:28.240 --> 44:29.240
没了

44:29.240 --> 44:30.240
开发服务器

44:30.240 --> 44:31.240
那么之后

44:31.240 --> 44:33.240
我们在构建WePack的时候

44:33.240 --> 44:34.240
往往会打这么一个开发服务器

44:34.240 --> 44:36.240
不仅是为了解决Proxy的问题

44:36.240 --> 44:37.240
而且会让我们写单

44:37.240 --> 44:38.240
更加轻松

44:38.240 --> 44:39.240
我们只用

44:39.240 --> 44:40.240
关心代码就行了

44:40.240 --> 44:42.240
也不用去关心打包出来的目录

44:42.240 --> 44:43.240
对吧

44:43.240 --> 44:44.240
它也不会打包出来的目录

44:44.240 --> 44:46.240
当我们开发完成之后

44:46.240 --> 44:48.240
然后就不用它了

44:48.240 --> 44:49.240
就用什么呢

44:49.240 --> 44:50.240
就用WePack来打包

44:50.240 --> 44:52.240
形成真实的一个文件结构

44:52.240 --> 44:53.240
然后上传到服务器

