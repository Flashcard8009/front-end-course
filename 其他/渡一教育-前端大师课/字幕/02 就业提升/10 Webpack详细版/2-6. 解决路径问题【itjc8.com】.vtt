WEBVTT

00:01.140 --> 00:06.740
好 咱们从一个问题入手 来引出这些课的课题

00:07.740 --> 00:11.140
我们在使用Fileloader 或者是URLloader

00:11.140 --> 00:15.340
因为URLloader里面 它本身也可以使 它也使用了Fileloader

00:15.340 --> 00:19.740
总之生成图片 生成了一些其他的一些资源文件的时候

00:19.740 --> 00:22.140
可能会遇到一个特别有趣的问题

00:22.740 --> 00:24.140
这些课 我给大家说一下

00:24.140 --> 00:27.540
这些课的问题不是说让你去实际用备

00:27.940 --> 00:29.940
你可以马上就忘 没关系

00:29.940 --> 00:33.540
只要你心里边有这么一个印象 这个问题是可以解决的

00:33.740 --> 00:36.940
那么将来你遇到这个问题 我可以再回来解决

00:38.540 --> 00:40.140
如果说你没有遇到这个问题

00:40.140 --> 00:42.340
这些课的东西对你一点帮助都没有

00:42.340 --> 00:43.940
所以说还是要保持这样的心态

00:44.740 --> 00:45.940
来吧 我们看什么问题

00:47.340 --> 00:51.940
比方说我们打包出来的结果 它的结构是这样子的

00:52.340 --> 00:54.540
我的图片放到这个文件夹

00:55.340 --> 00:57.340
我的GS放到这个文件夹

00:57.940 --> 01:00.340
我的页面放到这个文件夹

01:00.740 --> 01:02.340
好 咱们就来做一下 来做

01:03.340 --> 01:04.740
看一下行不行

01:05.740 --> 01:07.740
这里我们看一下

01:07.740 --> 01:10.340
咱们的GS已经放到这个文件夹了

01:10.340 --> 01:11.740
它到这个目录区

01:12.740 --> 01:14.540
我们的图片放到这个目录

01:14.540 --> 01:15.340
Image is

01:16.140 --> 01:18.940
然后我们的就是atm页面

01:19.740 --> 01:20.540
页面放哪呢

01:20.740 --> 01:22.940
页面我们放到这里

01:24.940 --> 01:26.140
这里不是一个file name

01:27.140 --> 01:29.140
我们要给它取个页面的名字

01:29.140 --> 01:29.940
取个名字

01:29.940 --> 01:31.140
我们把它放到哪呢

01:31.140 --> 01:35.740
我们把它放到atm页面的index

01:37.140 --> 01:38.340
我们这样子来放

01:39.140 --> 01:39.940
这样子放了

01:40.140 --> 01:40.940
我们看一下

01:40.940 --> 01:42.340
首先看一下打包结果

01:42.340 --> 01:43.140
看一下有没有问题

01:44.140 --> 01:45.740
打包nps

01:45.740 --> 01:46.540
vipad

01:47.540 --> 01:49.140
你觉得会不会有问题

01:49.940 --> 01:51.540
打包结果是不会有问题的

01:51.540 --> 01:52.340
看一下吧

01:52.540 --> 01:53.740
肯定是不会有问题的

01:53.940 --> 01:54.940
我们看一下

01:55.140 --> 01:57.140
首先关注一下页面里面的引用

01:57.140 --> 01:59.140
GS引用有没有问题的

01:59.940 --> 02:00.940
不会有问题的

02:01.340 --> 02:02.140
因为为什么

02:02.140 --> 02:03.740
因为这个插件的打包页面

02:03.740 --> 02:04.340
对吧

02:04.340 --> 02:06.340
它知道页面在这个地方

02:06.340 --> 02:07.940
那么它知道GS

02:07.940 --> 02:09.340
生存的GS在什么地方

02:09.540 --> 02:10.340
它知不知道

02:11.340 --> 02:12.540
兄弟它是插件

02:12.540 --> 02:13.740
它怎么可能不知道

02:13.740 --> 02:15.740
因为它是要读GS

02:15.740 --> 02:17.140
它的所有资源的

02:17.140 --> 02:17.540
对吧

02:17.540 --> 02:19.540
它把打包出来的GS资源

02:19.540 --> 02:20.740
要引用到页面上

02:20.740 --> 02:22.740
因此资源包里面

02:22.740 --> 02:24.940
资源的名称

02:24.940 --> 02:26.340
就资源的ID

02:26.340 --> 02:27.940
是不是就是资源的路径

02:27.940 --> 02:30.540
因此它知道的GS资源在什么位置

02:30.540 --> 02:31.940
所以说它能够处理

02:31.940 --> 02:33.140
它是能够处理的

02:33.140 --> 02:34.140
它知道页面在这

02:34.140 --> 02:36.140
也知道GS在这

02:36.140 --> 02:38.340
所以说它页面上引用GS的时候

02:38.340 --> 02:39.540
它会给你处理好

02:40.540 --> 02:41.540
它会给你处理好

02:41.540 --> 02:42.140
我这里

02:42.140 --> 02:43.540
颗件这里好像写的

02:43.540 --> 02:45.140
还有点问题

02:45.140 --> 02:46.140
这不是这样的写的

02:46.140 --> 02:47.740
它是能够给你处理好的

02:47.740 --> 02:49.140
把颗件稍微盖一下

02:49.940 --> 02:51.340
也就是在页面里边

02:51.340 --> 02:52.740
这里也不会存在问题

02:52.740 --> 02:53.740
它会处理好

02:54.540 --> 02:56.140
现在我们主要是看

02:56.140 --> 02:57.940
有没有可能遇到一种

02:57.940 --> 02:59.540
它根本就处理不好的

02:59.540 --> 03:00.340
它没法处理

03:00.340 --> 03:01.540
太难为它了

03:01.540 --> 03:02.740
有没有遇到这种情况

03:03.740 --> 03:05.540
你看页面中的引用GS

03:05.540 --> 03:07.340
是不是打回上级目标

03:07.340 --> 03:08.640
因为它知道GS在哪

03:08.640 --> 03:09.940
它也知道页面在哪

03:09.940 --> 03:10.940
那么同一个插件

03:10.940 --> 03:12.540
它就可以完成这样的引用

03:12.540 --> 03:13.740
说这里不会有问题

03:15.040 --> 03:16.940
那么问题出在哪呢

03:16.940 --> 03:17.740
你看一下

03:17.740 --> 03:19.540
你仔细看一下问题出在哪

03:20.540 --> 03:22.540
你看IMIGI图片

03:22.540 --> 03:23.940
因为我看我们的介绍

03:23.940 --> 03:25.040
我们的介绍很简单

03:25.040 --> 03:25.740
导入图片

03:25.740 --> 03:26.840
生成一个IMIGI元素

03:26.840 --> 03:28.540
设置加到IMIGI上去

03:28.540 --> 03:30.240
没什么好说的

03:30.240 --> 03:31.540
那么问题出在哪呢

03:31.540 --> 03:32.240
接下来

03:32.240 --> 03:35.040
我们把这个页面运行起来

03:35.040 --> 03:36.340
你就明白了

03:36.340 --> 03:36.640
好

03:36.640 --> 03:37.840
咱们使用

03:37.840 --> 03:39.540
使用这样的命令来运行

03:40.940 --> 03:42.340
NPMROUNDIP

03:42.340 --> 03:44.540
就是用DevServer打开运行

03:45.740 --> 03:46.740
你看一下

03:46.740 --> 03:47.940
看图片能显示出来吗

03:50.540 --> 03:51.540
图片显示出来

03:51.540 --> 03:52.040
而且呢

03:52.040 --> 03:53.540
它页面也没有显示出来

03:53.540 --> 03:54.840
页面也没有显示出来

03:54.840 --> 03:56.140
为什么没显示出来了

03:56.140 --> 03:57.740
因为它这个时候蒙了

03:57.740 --> 03:59.640
这个DevServer蒙了

03:59.640 --> 04:01.840
那么它不知道打开的

04:01.840 --> 04:04.240
就是DevServer

04:04.240 --> 04:05.140
它不知道打开的

04:05.140 --> 04:06.740
要打开哪一个页面

04:06.740 --> 04:08.640
那么这里可以给它配置一下

04:08.640 --> 04:10.840
OpenATMEL

04:10.840 --> 04:12.340
打开的页面是什么呢

04:12.340 --> 04:14.540
打开的页面是这个页面

04:15.840 --> 04:19.240
ATMEL下面的IN这个是叫ATMEL

04:19.340 --> 04:19.940
保存一下

04:19.940 --> 04:20.740
重新来

04:20.740 --> 04:21.740
这里可以配置一下

04:21.740 --> 04:23.840
就是它默认打开的是哪个页面

04:23.840 --> 04:24.540
打开的是哪个页面

04:24.540 --> 04:27.640
是ATMEL目标下面的IN这个是叫ATMEL

04:27.640 --> 04:29.140
打开是这里地址

04:31.840 --> 04:32.940
它这里

04:32.940 --> 04:34.940
说了我给它配置了一个错误的配置项

04:34.940 --> 04:35.940
咱们查一下吧

04:35.940 --> 04:37.740
这个地方我也忘了

04:37.740 --> 04:38.340
我查一下吧

04:40.240 --> 04:41.840
我记得是有这么一个配置的

04:41.840 --> 04:42.740
肯定是有的

04:42.740 --> 04:44.140
只是我忘了这个名字了

04:44.140 --> 04:46.140
所以像这种东西忘了就忘了吧

04:46.140 --> 04:47.440
查一下就行了

04:47.440 --> 04:51.040
我记得是应该是以OpenPage

04:51.040 --> 04:52.140
打开哪一个页面

04:52.140 --> 04:52.840
OK

04:52.840 --> 04:55.040
那么我们就OpenPage

04:55.040 --> 04:56.340
OpenPage

04:56.340 --> 04:58.640
这里其实可以减写ATMEL

04:58.640 --> 04:59.840
可以减写这个

04:59.840 --> 05:03.140
打开整个网站跟目标下面的ATMEL

05:03.140 --> 05:05.640
因为它后面会自动给你加上IN这个页面

05:05.640 --> 05:06.640
对吧 还记得吗

05:06.640 --> 05:08.640
它是有个配置的

05:08.640 --> 05:09.440
这下再来

05:10.740 --> 05:11.840
NPM状

05:11.840 --> 05:12.840
对

05:12.840 --> 05:14.740
或者我们就写权

05:14.740 --> 05:16.040
写权也行

05:16.040 --> 05:17.040
写权

05:20.670 --> 05:21.670
运行

05:22.270 --> 05:25.270
这里的姿势特别的细致

05:25.270 --> 05:27.470
你会看到图片出不来

05:27.470 --> 05:28.170
对吧

05:28.170 --> 05:29.370
所以图片出不来

05:29.370 --> 05:31.270
就多了一个写杠了

05:31.270 --> 05:32.770
把写杠去掉

05:32.770 --> 05:33.770
重新拿

05:34.770 --> 05:37.470
大家可以看到这个图片它没有出来

05:37.470 --> 05:39.570
为什么图片没有出来呢

05:39.570 --> 05:41.270
那大家就要好好想一想了

05:41.270 --> 05:42.370
图片咋回事

05:42.370 --> 05:43.570
跑哪去了

05:43.570 --> 05:45.570
你看图片在这

05:45.570 --> 05:46.370
在这

05:46.370 --> 05:47.970
它没出来

05:47.970 --> 05:50.070
看一下图片路径

05:50.070 --> 05:52.070
看一下空彩输出的图片路径

05:52.070 --> 05:54.470
咱们在空彩做了一个输出的

05:54.470 --> 05:55.470
它这里跑个错

05:55.470 --> 05:56.670
说图片找不到

05:56.670 --> 05:58.270
你看图片的路径

05:58.270 --> 05:59.870
那么怎么回事呢

05:59.870 --> 06:02.470
咱们来看一下这里再回头看一下

06:02.470 --> 06:03.870
这么回事

06:03.870 --> 06:06.070
这个图片是谁打包的

06:06.070 --> 06:07.470
是谁生成的

06:07.470 --> 06:09.470
是这个File Loader

06:09.470 --> 06:10.970
对吧 生成的

06:10.970 --> 06:12.270
它知不知道

06:12.270 --> 06:13.570
它生成出来的什么东西

06:13.570 --> 06:14.670
它生成出来的

06:14.770 --> 06:16.270
它生成出来的一个图片

06:16.270 --> 06:16.570
对不对

06:16.570 --> 06:17.570
放到这个目录下面

06:17.570 --> 06:18.370
它是知道的

06:18.370 --> 06:20.270
它知道我的图片放到这个目录下面的

06:21.270 --> 06:22.170
然后呢

06:22.170 --> 06:23.670
它不但要生成一个图片

06:23.670 --> 06:25.670
它是不是还要生成一段介石

06:25.670 --> 06:26.570
对吧

06:26.570 --> 06:27.570
它要转换介石代码

06:27.570 --> 06:30.070
把图片本身的内容转换成介石代码

06:30.070 --> 06:31.370
它转换了什么样子呢

06:31.370 --> 06:34.370
它介石的内容是放到这个Media介石里边的

06:34.370 --> 06:35.570
这个内容是什么呢

06:35.570 --> 06:37.570
这是我们张杰克讲过的

06:37.570 --> 06:39.770
内容是它导出了一个什么

06:39.770 --> 06:42.370
图片的文件名

06:42.370 --> 06:43.170
文件名是什么

06:44.670 --> 06:49.070
导出的文件名是img-a.png

06:49.070 --> 06:52.400
那么问题就来了

06:52.400 --> 06:55.800
这个file-loader

06:55.800 --> 06:56.800
它是一个夹载器

06:58.000 --> 07:00.300
它只知道自己的图片保存在这

07:01.600 --> 07:04.600
它也知道我们的导出的介石应该是这

07:04.600 --> 07:06.700
其他它啥都不知道了

07:06.700 --> 07:09.400
它不知道这个介石文件在哪

07:09.400 --> 07:11.700
根本就不知道这个介石文件在哪

07:11.700 --> 07:13.400
因为那个时候是loader

07:13.400 --> 07:15.000
loader它在运行的时候

07:15.000 --> 07:16.500
介石文件都还没生成出来

07:16.500 --> 07:17.400
它不知道这个文件在哪

07:17.400 --> 07:18.800
它是在转换代码的

07:18.800 --> 07:20.500
它只是把图片的内容代码

07:20.500 --> 07:22.100
转换成这就代码

07:22.100 --> 07:23.000
转换出来它就完了

07:23.000 --> 07:23.700
跟它没关系了

07:23.700 --> 07:24.900
成像的事情

07:24.900 --> 07:26.900
它不知道介石文件在哪

07:26.900 --> 07:27.800
更重要的是

07:27.800 --> 07:29.300
它根本就不知道页面在哪

07:29.300 --> 07:32.000
页面跟它就更没有关系了

07:32.000 --> 07:34.700
它也不知道你用这个介石的页面在哪

07:34.700 --> 07:36.100
它根本就不知道

07:36.100 --> 07:38.300
所以说这就导致了问题

07:38.300 --> 07:38.900
能理解吗

07:38.900 --> 07:39.500
听懂了吗

07:39.500 --> 07:41.400
好好想想

07:41.400 --> 07:43.100
你们以后有的时候

07:43.100 --> 07:44.900
可能会遇到用webpack的时候

07:44.900 --> 07:46.100
如果说你用webpack

07:46.100 --> 07:49.100
可能会遇到这种非常非常细节的问题

07:49.100 --> 07:51.400
这个问题就麻烦了

07:51.400 --> 07:52.800
那么这个时候问题在哪

07:52.800 --> 07:55.000
你看它输出的路径

07:55.000 --> 07:58.000
我们的介石在index里面

07:58.000 --> 07:59.400
导入了png

07:59.400 --> 08:00.600
导入了就是个图片路径

08:00.600 --> 08:01.100
对吧

08:01.100 --> 08:02.700
而它图片路径导出的是什么

08:02.700 --> 08:04.600
导出的就是这个玩意

08:04.600 --> 08:05.600
就是这个玩意

08:05.600 --> 08:06.000
对吧

08:06.000 --> 08:08.200
因此你输出的就是这个玩意

08:08.200 --> 08:11.100
如果说你把这个路径

08:11.100 --> 08:12.200
如果说你把这个路径

08:12.200 --> 08:13.500
当成了真正的路径

08:13.500 --> 08:15.000
给1米几复制

08:15.000 --> 08:16.500
那么问题就出现了

08:16.500 --> 08:17.200
为什么呢

08:17.200 --> 08:19.600
因为这些介石是在哪里运行的

08:19.600 --> 08:22.700
是在这个页面运行的

08:22.700 --> 08:25.100
它是在这个页面运行的介石

08:25.100 --> 08:26.800
那么你的图片路径是哪

08:26.800 --> 08:30.100
图片路径是这

08:30.100 --> 08:31.500
图片路径是这

08:31.500 --> 08:33.100
那么这个介石里面的图片

08:33.100 --> 08:35.100
它的完整路径变成了什么

08:35.100 --> 08:36.000
它的完整路径

08:36.000 --> 08:39.880
是不是变成了这个东西

08:39.880 --> 08:41.580
所以变成了这个东西

08:41.580 --> 08:43.580
把这个复制过来

08:43.580 --> 08:44.280
那里想一想

08:44.280 --> 08:47.580
这个地址能找到图片吗

08:47.580 --> 08:48.980
能找到吗

08:48.980 --> 08:51.080
是不是肯定找不到图片了

08:51.080 --> 08:52.680
问题就出现在这

08:52.680 --> 08:54.080
那么造成这个问题的

08:54.080 --> 08:56.080
根本原因是什么呢

08:56.080 --> 08:58.580
就是因为有些路径

08:58.580 --> 08:59.980
它来自于哪里

08:59.980 --> 09:01.780
来自于一些楼段

09:01.780 --> 09:03.680
将来我们还会看到plugging

09:03.680 --> 09:04.780
来自于一些楼段

09:04.780 --> 09:06.780
或者是来自于一些plugging

09:06.780 --> 09:09.080
那么它产生路径的时候

09:09.080 --> 09:09.980
问题在哪呢

09:09.980 --> 09:11.080
问题在于这个楼段

09:11.080 --> 09:11.680
或者plugging

09:11.680 --> 09:13.480
它可以产生这个路径的时候

09:13.580 --> 09:15.980
它只是相对于这个地址目录

09:15.980 --> 09:17.280
李加写的文件名是啥

09:17.280 --> 09:19.180
email.gpng对吧

09:19.180 --> 09:21.980
ok 那么它只是得到这么一个路径

09:21.980 --> 09:23.180
它并不知道这个路径

09:23.180 --> 09:24.980
将在哪个资源中使用

09:24.980 --> 09:26.580
就哪个会用这个路径

09:26.580 --> 09:27.980
它不知道这个路径是在这里面

09:27.980 --> 09:29.480
这个页面中使用的

09:29.480 --> 09:32.080
它在这个页面中运行的GS

09:32.080 --> 09:33.980
因此它最终正确

09:33.980 --> 09:35.380
要正确运行的路径

09:35.380 --> 09:36.280
它不知道

09:36.280 --> 09:37.880
它没法知道

09:37.880 --> 09:40.780
这种情况非常非常细节

09:40.780 --> 09:41.780
我告诉大家

09:41.780 --> 09:48.080
你不用去过于探讨这个现象

09:48.080 --> 09:49.480
你只需要知道

09:49.480 --> 09:53.480
将来如果说遇到这种路径的问题

09:53.480 --> 09:56.080
那么你可以使用这些内容来解决

09:56.080 --> 09:57.080
这些可以讲什么呢

09:57.080 --> 09:58.680
就来讲解决这个问题

09:58.680 --> 10:00.280
怎么解决呢

10:00.280 --> 10:02.180
这个解决方式非常简单

10:02.180 --> 10:05.680
做一个配置叫public pass

10:05.680 --> 10:09.280
发言过来就叫做公共路径

10:09.280 --> 10:10.680
其实这个玩意是什么呢

10:10.680 --> 10:11.680
这个玩意

10:11.680 --> 10:14.280
这个玩意本质上就是一个普通的制服串

10:14.280 --> 10:15.480
它啥都不是

10:15.480 --> 10:17.680
我告诉你它本质上啥都不是

10:17.680 --> 10:20.680
就是一个普通的制服串而已

10:20.680 --> 10:21.680
我们要看一个问题

10:21.680 --> 10:23.980
要看它的本质是什么

10:23.980 --> 10:26.980
我们来看一下这个public pass是什么东西呢

10:26.980 --> 10:28.680
我们来看一下它打包出来的结果

10:28.680 --> 10:35.370
我这里把它停掉

10:35.370 --> 10:38.570
这里我们npx vpac

10:38.570 --> 10:41.970
来把文件打包出来

10:41.970 --> 10:43.570
打包出来的文件

10:43.570 --> 10:46.270
咱们停掉过后关注这个界也是

10:46.270 --> 10:47.370
它生成的界也是

10:47.370 --> 10:50.570
你看它其实有些插件也好

10:50.570 --> 10:52.470
有些并不是所有的

10:52.470 --> 10:54.970
有些loader也好

10:54.970 --> 10:57.670
它会来解决这个问题

10:57.670 --> 10:58.270
不解决这个问题

10:58.270 --> 10:58.870
它怎么解决的

10:58.870 --> 11:00.170
我们一会再说

11:00.170 --> 11:02.970
你看我们打包的结果里边

11:02.970 --> 11:08.570
它给这个vpacrequire提供了一个静态属性p

11:08.570 --> 11:10.270
它提供了这么一个东西

11:10.270 --> 11:11.870
vpacrequire

11:12.670 --> 11:13.870
p

11:13.870 --> 11:16.470
它这里我们之前讲过分析过的原码

11:16.470 --> 11:17.870
它给你写了一个这个函数

11:17.870 --> 11:19.770
那么这个函数它提供了一些静态属性

11:19.770 --> 11:23.370
有些是为了其他的模块化

11:23.370 --> 11:24.870
其他的模块化标准服务的

11:24.870 --> 11:26.870
那么这里它提供了这么一个属性p

11:26.870 --> 11:30.070
你看莫认为一个空制服串

11:30.070 --> 11:32.670
我们配置的public pass

11:32.670 --> 11:33.270
配置到哪

11:33.270 --> 11:34.370
首先说配置到哪

11:34.370 --> 11:35.270
配置到这

11:35.270 --> 11:38.070
配置到output里边

11:38.070 --> 11:39.870
配置到这

11:39.870 --> 11:42.570
public pass

11:42.570 --> 11:44.170
配置到过后有啥用呢

11:44.170 --> 11:45.870
我告诉你啥用都没有

11:45.870 --> 11:47.770
它就是给你生成了一个字无串

11:47.770 --> 11:48.470
放到这

11:48.470 --> 11:50.070
就给你生成了这么一个字无串

11:50.070 --> 11:51.270
作为它的静态属性p

11:51.270 --> 11:53.270
放到这

11:53.270 --> 11:54.470
没了

11:54.470 --> 11:56.670
那么比方说我们这里配置一个abc

11:56.670 --> 11:57.870
随便配置啥

11:57.870 --> 11:58.670
不是说你配置啥

11:58.670 --> 11:59.870
好像有什么效果一样

11:59.870 --> 12:00.670
没有啥效果

12:00.670 --> 12:01.870
它随便配置

12:01.870 --> 12:04.270
你看吧

12:04.270 --> 12:05.670
就看一个东西要看它的本质

12:05.670 --> 12:06.870
一样看它本质是啥

12:06.870 --> 12:09.470
它就是一个字无串而已

12:09.470 --> 12:10.470
配置完了

12:10.470 --> 12:11.570
以上生成出来了

12:11.570 --> 12:12.770
那么这里哪里看一下

12:12.770 --> 12:13.570
这个p

12:13.570 --> 12:14.770
诶

12:14.770 --> 12:16.470
诶打包了

12:16.470 --> 12:19.650
等一下啊

12:19.650 --> 12:20.950
你看

12:20.950 --> 12:21.350
这个p

12:21.350 --> 12:22.850
是不是变成我们配置的东西了

12:22.850 --> 12:23.550
就这么简单

12:23.550 --> 12:25.250
它就是一个普通的字无串

12:25.250 --> 12:26.150
那么这个字无串

12:26.150 --> 12:27.250
wipack用不用了

12:27.250 --> 12:28.950
它压格不用

12:28.950 --> 12:30.050
在某些特殊场景下面

12:30.050 --> 12:30.850
我们现在还没学到

12:30.850 --> 12:32.450
知道我们现在学过的东西

12:32.450 --> 12:33.750
wipack是没有用的

12:33.750 --> 12:34.650
用里面用这个字无串

12:34.650 --> 12:35.750
它就是配置到这里

12:35.750 --> 12:37.550
有个字无串在这里

12:37.550 --> 12:39.950
那么这个字无串是给谁用的

12:39.950 --> 12:40.950
谁爱用

12:40.950 --> 12:41.850
谁就用

12:41.850 --> 12:43.550
爱用就用不用拉倒

12:43.550 --> 12:44.850
那么怎么来用呢

12:44.850 --> 12:47.050
比方说你看我的GS里边

12:47.050 --> 12:49.350
你看怎么用啊

12:49.350 --> 12:50.850
比方说我们现在不要图片了

12:50.850 --> 12:52.050
不要图片

12:52.050 --> 12:53.850
我们这里就输出

12:53.850 --> 12:55.550
输出一个什么呢

12:55.550 --> 12:57.550
输出这么一句话

12:57.550 --> 12:59.750
两个下滑线wipack

12:59.750 --> 13:03.850
一个下滑线public

13:03.850 --> 13:04.950
一个下滑线pass

13:04.950 --> 13:06.050
两个下滑线

13:06.050 --> 13:07.450
这是这种特殊的东西

13:08.250 --> 13:09.450
看到这种东西

13:09.450 --> 13:10.650
两个下滑线开头

13:10.650 --> 13:11.450
两个下滑线结尾

13:11.450 --> 13:12.550
看到这种东西

13:12.550 --> 13:14.650
wipack会对它进行转换

13:14.650 --> 13:16.450
会对我们这个单码进行转换

13:16.450 --> 13:18.050
会把它变成另外一种格式

13:18.050 --> 13:19.250
你看一下吧

13:19.250 --> 13:19.850
看一下怎么用

13:19.850 --> 13:22.950
在现在打包

13:22.950 --> 13:24.450
打包

13:24.450 --> 13:25.350
打包完了

13:25.350 --> 13:26.150
打包完了过程

13:26.150 --> 13:26.850
你看一下

13:26.850 --> 13:28.450
生成的GS

13:28.450 --> 13:29.350
现在图片里没了

13:29.350 --> 13:30.050
没关系

13:30.050 --> 13:31.250
因为没有依赖了

13:31.250 --> 13:32.750
看我们的GS

13:32.750 --> 13:36.550
我的GS是变成了wipackrequiredp

13:36.550 --> 13:37.950
我们本来写的是什么

13:37.950 --> 13:38.950
本来写的是这个

13:38.950 --> 13:39.750
经过它一转换

13:39.750 --> 13:40.950
就变成了这个了

13:40.950 --> 13:42.650
wipackrequiredp

13:42.650 --> 13:43.950
是不是在用这个制服串

13:43.950 --> 13:45.850
就在用这个制服串

13:45.850 --> 13:47.750
它把这个wipackrequired传过来的

13:47.750 --> 13:49.850
这是required函数

13:49.850 --> 13:50.650
所以它就是

13:50.650 --> 13:52.450
所以说你把它看它本质

13:52.450 --> 13:53.250
它是什么东西

13:53.250 --> 13:55.050
它就是一个普普通通

13:55.050 --> 13:56.950
不能摘普通的一个制服串

13:56.950 --> 13:58.150
它有什么用

13:58.150 --> 13:58.950
没啥用

13:58.950 --> 14:00.950
你I怎么用就怎么用

14:00.950 --> 14:02.250
你想把它怎么用就怎么用

14:02.250 --> 14:03.250
你看我这里就把输出了

14:03.250 --> 14:04.850
它就输出了

14:04.850 --> 14:05.450
你看一下吧

14:05.450 --> 14:08.650
我们把这个页面运行起来

14:08.650 --> 14:13.220
这里我就可以不用那个运行的

14:13.220 --> 14:13.720
你看

14:16.420 --> 14:20.040
怎么了

14:20.040 --> 14:21.340
输出了

14:21.340 --> 14:22.140
我的输出了

14:22.140 --> 14:23.640
我看一下

14:23.640 --> 14:24.540
肯定有输出了

14:24.540 --> 14:26.240
肯定有输出的

14:26.240 --> 14:29.960
为什么没输出呢

14:29.960 --> 14:31.460
点击右键

14:31.460 --> 14:33.260
往左转

14:33.260 --> 14:34.560
它这里爆凑了

14:34.560 --> 14:38.520
我看一下爆什么凑

14:38.520 --> 14:39.520
输出

14:39.520 --> 14:40.220
这是怎么回事

14:40.220 --> 14:41.720
我看一下

14:41.720 --> 14:44.020
它说有个东西找不到

14:46.020 --> 14:46.420
明白了

14:46.420 --> 14:47.420
它说介石找不到

14:47.420 --> 14:48.820
介石找不到

14:48.820 --> 14:49.020
好

14:49.020 --> 14:49.620
我接下来

14:49.620 --> 14:50.920
大家不用掩饰

14:50.920 --> 14:52.820
这里肯定是可以运行的

14:52.820 --> 14:54.820
肯定是可以运行的

14:54.820 --> 14:55.620
比方说我们这里用的

14:55.620 --> 14:56.420
这样的方式来运行

14:56.420 --> 14:57.320
roncode的

14:57.320 --> 14:58.420
你看是不是能运行

14:58.420 --> 14:59.320
肯定运行的

14:59.320 --> 15:00.420
那为什么页面上运不到

15:00.420 --> 15:02.120
就是我们接下来要说的

15:02.120 --> 15:03.820
我们接下来要说的

15:03.820 --> 15:07.820
就是当你出现了public pass之后

15:07.820 --> 15:11.420
有些插件和有些loader

15:11.420 --> 15:12.920
它会受到影响

15:12.920 --> 15:14.820
就是有些插件plugging

15:14.820 --> 15:15.720
有些loader

15:15.720 --> 15:17.520
它会用这个东西

15:17.520 --> 15:19.720
所以说这个public pass

15:19.720 --> 15:21.820
它本来就是个普通的制服圈而已

15:21.820 --> 15:22.820
I怎么用怎么用

15:22.820 --> 15:25.020
但是由于有些插件

15:25.020 --> 15:26.120
或者是有些loader

15:26.120 --> 15:27.120
它会用这个东西

15:27.120 --> 15:28.820
因此配置它的时候

15:28.820 --> 15:30.920
我们还是要谨慎一些

15:30.920 --> 15:32.020
那么它会怎么用呢

15:32.020 --> 15:32.920
我们首先看一下

15:32.920 --> 15:35.820
这个插件会怎么用

15:35.820 --> 15:38.320
看一下这个插件

15:38.320 --> 15:39.720
我们就可以找出一些

15:39.720 --> 15:41.620
插件的他们的通用的做法

15:41.620 --> 15:43.720
看一下这个atmvpackplugging的插件

15:43.720 --> 15:44.420
会怎么用

15:44.420 --> 15:45.420
它是用来干嘛的

15:45.420 --> 15:48.120
它是用来生成atmv的

15:48.120 --> 15:49.120
对吧

15:49.120 --> 15:50.820
它是用来生成一个atmv文件的

15:50.820 --> 15:52.720
所以到这

15:52.720 --> 15:54.420
那么它会做一件什么事呢

15:54.420 --> 15:56.920
它会做一件特别奇特的一件事

15:56.920 --> 15:59.320
就是把这个路径

15:59.320 --> 16:02.220
拼接到本来要

16:02.220 --> 16:04.320
本来的介式的前面

16:04.320 --> 16:06.320
它本来的介式是什么

16:06.320 --> 16:09.020
它本来生成的介式路径

16:09.020 --> 16:10.520
如果没有pipelik pass的时候

16:10.520 --> 16:12.420
它本来生成的是这个对吧

16:12.420 --> 16:14.120
按照相对路径来写的

16:14.120 --> 16:15.020
生成的是这个

16:15.020 --> 16:16.920
那么你写的pipelik pass过后

16:16.920 --> 16:19.220
比方你写的pipelik pass是什么

16:19.220 --> 16:19.920
是这个

16:19.920 --> 16:22.520
那么它会对这两个路径进行处理

16:22.520 --> 16:23.920
对这两个路径进行处理

16:23.920 --> 16:25.420
最终把它变成了

16:25.420 --> 16:26.220
变成了这个

16:26.220 --> 16:28.120
就是你写的pipelik pass过后

16:28.120 --> 16:30.020
它就会这样的拼接了

16:30.020 --> 16:31.220
每一种插件

16:31.220 --> 16:32.020
每一种loader

16:32.020 --> 16:33.720
它没有固定的拼接方式

16:33.720 --> 16:36.120
但它一般来说它会这样的拼接

16:36.120 --> 16:37.720
也就是说pipelik pass

16:37.720 --> 16:40.320
对于这些生成路径的这些玩意

16:40.320 --> 16:42.320
有什么意义呢

16:42.320 --> 16:43.820
它的意义在于

16:43.820 --> 16:49.220
它会把pipelik pass拼接到最前边

16:49.220 --> 16:51.120
所以说我再强调一次

16:51.120 --> 16:54.420
pipelik pass这个东西本身是没啥用的

16:54.420 --> 16:56.220
只不过有些插件有些loader

16:56.220 --> 16:58.120
看到你配置了这个东西

16:58.120 --> 16:59.620
它就会写这样的代码

16:59.620 --> 17:00.820
比方说它看到

17:00.820 --> 17:01.620
比方我举个例子

17:01.620 --> 17:03.020
它会写怎么写代码

17:03.020 --> 17:06.720
它就判断pipelik pass有值吗

17:06.720 --> 17:07.820
如果有值的话

17:07.820 --> 17:09.320
我就怎么样

17:09.320 --> 17:10.620
给你做什么拼接

17:10.620 --> 17:14.620
比方说我形成了url地址

17:14.620 --> 17:20.720
就是这个值拼接上一个后面的东西

17:20.720 --> 17:22.520
然后没有值的话

17:22.520 --> 17:25.220
那么我的url地址是什么

17:25.220 --> 17:28.020
就有些插件它会做这样的一个处理

17:28.020 --> 17:29.320
那它如果说插件不用这个

17:29.320 --> 17:31.920
那就毫无意义了

17:31.920 --> 17:33.620
所以说基于这么一种道理

17:33.620 --> 17:34.320
你看再看

17:34.320 --> 17:36.020
我现在把图片加入进去了

17:36.020 --> 17:43.420
你让看有了pipelik pass之后图片会怎么样

17:43.420 --> 17:44.820
运行

17:44.820 --> 17:45.820
你看

17:45.820 --> 17:46.920
包错了

17:46.920 --> 17:50.620
怎么个包错了

17:50.620 --> 17:52.120
我把这个挺着

17:52.120 --> 17:53.920
我刚才打开了个neve server

17:53.920 --> 17:58.220
这个挺着

17:58.220 --> 17:59.820
运行打包

17:59.820 --> 18:02.220
接下来我们看一下这个介石

18:02.220 --> 18:04.520
它生存的介石

18:04.520 --> 18:05.820
有了pipelik pass之后

18:05.820 --> 18:07.620
你看一下这个模块

18:07.620 --> 18:08.720
那么你会看到

18:08.720 --> 18:10.120
它做了一件啥事

18:10.120 --> 18:10.920
它做了一件

18:10.920 --> 18:15.020
把这个东西是不是夹到前面了

18:15.020 --> 18:16.020
夹到这个路径前面了

18:16.020 --> 18:17.120
这个代码是固定的

18:17.120 --> 18:18.720
之前我们看到的代码都是固定的

18:18.720 --> 18:20.520
它实际上前面拼接了个东西

18:20.520 --> 18:20.920
对吧

18:20.920 --> 18:21.720
拼接了啥

18:21.720 --> 18:23.120
我们之前上一课分析的时候

18:23.120 --> 18:24.220
它是个空置五串

18:24.220 --> 18:25.720
实际上它就是pipelik pass

18:25.720 --> 18:27.920
它就把它拼接到前面了

18:27.920 --> 18:29.220
所以说基于我们

18:29.220 --> 18:31.320
它本来就是个普通的置五串

18:31.320 --> 18:33.620
但是由于我们插件

18:33.620 --> 18:35.820
由于我们的loader

18:35.820 --> 18:37.620
它的这种做法

18:37.620 --> 18:39.220
因此pipelik pass

18:39.220 --> 18:41.620
我们一般配置为什么呢

18:41.620 --> 18:43.520
配置的是一个

18:43.520 --> 18:45.920
整个我们的打包的网站

18:45.920 --> 18:46.820
一般来说

18:46.820 --> 18:47.720
不是说一定的

18:47.720 --> 18:49.420
它就是在前面做一个拼接

18:49.420 --> 18:50.720
你爱拼接啥拼接啥

18:50.720 --> 18:52.920
你甚至可以写一个addp

18:52.920 --> 18:54.120
3w6.0买路都可以

18:54.120 --> 18:55.120
随便你写啥

18:55.120 --> 18:55.920
随便你写啥都可以

18:55.920 --> 18:58.220
它就是做一个拼接而已

18:58.220 --> 18:59.820
因此我们pipelik pass

18:59.820 --> 19:01.420
往往会写什么呢

19:01.420 --> 19:04.420
往往会写一个写纲

19:04.420 --> 19:06.220
为什么往往会写一个写纲啊

19:06.220 --> 19:07.920
你想一想这个道理

19:07.920 --> 19:09.520
我们这些资源

19:09.520 --> 19:12.120
是不是将部署到网站的

19:12.120 --> 19:13.520
就是我们到时候部署要服细

19:13.520 --> 19:15.320
就部署要跟目录

19:15.320 --> 19:16.120
跟目录

19:16.120 --> 19:18.720
那么也就是说

19:18.720 --> 19:19.620
一个写纲

19:19.620 --> 19:20.520
比方说

19:20.520 --> 19:22.320
那么我们的img

19:22.320 --> 19:23.320
那么这样子一拼接

19:23.320 --> 19:24.420
你看我们的图片

19:24.420 --> 19:26.020
它会变成什么样的路径

19:26.020 --> 19:26.920
我们的图片的路径

19:26.920 --> 19:28.520
就会变成这样的路径

19:28.520 --> 19:31.020
写纲img是

19:31.020 --> 19:32.120
然后呢

19:32.120 --> 19:33.520
这个就写完了

19:33.520 --> 19:36.620
webpack.png

19:36.620 --> 19:37.520
它就不是这种路径的

19:37.520 --> 19:38.520
这种路径叫相对路径

19:38.520 --> 19:38.920
对吧

19:38.920 --> 19:40.720
这种路径就是绝对路径

19:40.720 --> 19:42.720
就是我们整个请求我们的

19:42.720 --> 19:44.420
表现我们的网站叫度1

19:44.420 --> 19:48.620
度1.com

19:48.620 --> 19:49.820
请求这样的地址

19:49.820 --> 19:51.420
那么就可以拿到这张图片

19:51.420 --> 19:52.320
当然前提是

19:52.320 --> 19:53.220
我们的整个网站

19:53.220 --> 19:54.820
是部署到这个地方的

19:54.820 --> 19:55.920
那如果说我们的网站

19:55.920 --> 19:59.380
是部署到这的

19:59.380 --> 20:03.580
你看website

20:03.580 --> 20:05.680
所有的东西是部署到这的

20:05.680 --> 20:07.080
那么你这里该怎么配

20:07.080 --> 20:07.880
那么这里就可以

20:07.880 --> 20:09.280
要这样子配对吧

20:09.280 --> 20:10.880
要这样子配

20:10.880 --> 20:12.180
对不对

20:12.180 --> 20:13.180
是不是要这样子配

20:13.180 --> 20:14.080
这样子配的话

20:14.080 --> 20:15.280
我们访问的是什么呢

20:15.280 --> 20:16.180
访问的

20:16.180 --> 20:17.380
我们的图片路径在哪

20:17.380 --> 20:18.380
图片路径是不是

20:18.380 --> 20:19.880
就是website

20:19.880 --> 20:21.180
是不是这样的路径

20:21.180 --> 20:21.580
对吧

20:21.580 --> 20:23.180
它就是在前面拼一坨

20:23.180 --> 20:24.380
拼一坨

20:24.380 --> 20:24.680
不过呢

20:24.680 --> 20:25.680
我们一般情况下

20:25.680 --> 20:27.580
都是这样的配的

20:27.580 --> 20:29.380
这个要根据具体情况分析

20:29.380 --> 20:30.280
你怎么去理解

20:30.280 --> 20:30.980
就理解这个东西

20:30.980 --> 20:31.780
就是个字幕上

20:31.780 --> 20:33.180
它会在路径前面拼一坨

20:33.180 --> 20:34.180
有些插件

20:34.180 --> 20:35.780
有些楼段

20:35.780 --> 20:36.580
它会在前面

20:36.580 --> 20:38.280
路径前面拼一个的东西

20:38.280 --> 20:39.380
那么拼完这个东西

20:39.380 --> 20:40.280
我们再看一下

20:40.280 --> 20:42.480
还有没有之前遇到那个问题

20:42.480 --> 20:43.680
就这个问题

20:43.680 --> 20:45.880
来 我们来看一下

20:45.880 --> 20:47.980
咱们这里就用这种方式打吧

20:47.980 --> 20:49.280
NPM状

20:49.280 --> 20:53.380
对

20:53.380 --> 20:55.180
好 你想看一下

20:55.180 --> 20:56.580
还会不会有这个问题呢

20:56.580 --> 20:57.680
是不是图片就出来了

20:57.680 --> 20:59.280
诶 这图片怎么出来的

20:59.280 --> 21:00.980
我们不仅要让它出来

21:00.980 --> 21:01.780
还知道是怎么出来的

21:01.780 --> 21:02.880
你看现在图片路径

21:02.880 --> 21:04.880
是不是前面拼了一个鞋杠

21:04.880 --> 21:06.280
对吧 拼了一个鞋杠

21:06.280 --> 21:07.680
那么现在我们来看

21:07.680 --> 21:10.960
我们的页面地址是这个

21:11.060 --> 21:13.660
现在不一样了

21:13.660 --> 21:14.960
我们的页面地址还是不变

21:14.960 --> 21:15.960
是这个对吧

21:15.960 --> 21:17.760
然后我们的图片路径是什么了

21:17.760 --> 21:18.960
不是相对路径的

21:18.960 --> 21:21.560
它写的是绝对路径鞋杠

21:21.560 --> 21:23.760
那么绝对路径是什么意思呢

21:23.760 --> 21:25.960
就是说我前面的鞋艺

21:25.960 --> 21:29.660
懒得写了你就用页面的鞋艺

21:29.660 --> 21:30.960
就用页面的鞋艺

21:30.960 --> 21:33.260
然后组继名和端口号我也懒得写了

21:33.260 --> 21:36.060
你就用页面的组继名和端口号

21:36.060 --> 21:36.960
所以拼接出来就这样子

21:36.960 --> 21:38.360
那么这样子是不是正确了

21:38.360 --> 21:39.360
对吧

21:39.360 --> 21:39.760
OK

21:39.760 --> 21:41.260
所以拍不得拍死这一空呢

21:41.260 --> 21:43.360
我们往往写的是一个鞋杠

21:43.360 --> 21:45.460
但是也是不一定的

21:45.460 --> 21:46.460
而且你再看

21:46.460 --> 21:48.760
写到鞋杠之后我们的页面

21:48.760 --> 21:50.760
我们看一下页面元旦

21:50.760 --> 21:52.960
看一下页面元旦

21:52.960 --> 21:54.160
我们页面引用的介石

21:54.160 --> 21:57.360
你看是不是也就是使用了拍不得拍死

21:57.360 --> 21:58.360
因为它的影响的范围

21:58.360 --> 21:59.860
不只影响一个插件

21:59.860 --> 22:00.660
影响一个loader

22:00.660 --> 22:02.060
它会影响很多个插件

22:02.060 --> 22:02.860
很多个loader

22:02.860 --> 22:05.460
只要loader和插件要用它

22:05.460 --> 22:06.160
它就影响

22:06.160 --> 22:08.160
不用它 它就没啥影响

22:08.160 --> 22:10.860
那么它也会加上一个拍不得拍死

22:10.860 --> 22:11.760
一般来说

22:11.760 --> 22:13.960
乘数的插件它写的路径过程

22:13.960 --> 22:15.360
它如果发现有拍不得拍死

22:15.360 --> 22:17.760
它会加上

22:17.760 --> 22:19.660
否则就统一的配置拍不得拍死

22:19.660 --> 22:21.360
那么这里还有个小的细节

22:21.360 --> 22:22.960
还很小很小的细节

22:22.960 --> 22:25.560
就是说如果说你遇到了

22:25.560 --> 22:26.360
遇到什么呢

22:26.360 --> 22:28.460
就是说每个

22:28.460 --> 22:30.460
不然这个loader要用这个拍不得拍死

22:30.460 --> 22:31.060
对吧

22:31.060 --> 22:33.860
那么这个ATM也要用这个拍不得拍死

22:33.860 --> 22:37.160
那如果两个用的不一样呢

22:37.160 --> 22:38.860
如果说两个用的不一样呢

22:38.860 --> 22:40.960
怎么办

22:40.960 --> 22:42.460
如果遇到这种问题的话

22:42.460 --> 22:45.460
那你肯定不能统一的去配置拍不得拍死

22:45.460 --> 22:47.160
一般来说不太会

22:47.160 --> 22:49.660
如果说遇到这种更加细的问题的话

22:49.660 --> 22:50.860
也不能去统一配置

22:50.860 --> 22:52.360
那怎么配置呢

22:52.360 --> 22:53.060
一般来说

22:53.060 --> 22:54.760
如果说插件也好

22:54.760 --> 22:55.460
loader也好

22:55.460 --> 22:57.360
它要用到拍不得拍死

22:57.360 --> 22:58.660
一般它会让你

22:58.660 --> 23:01.160
它里边也会带一个拍不得拍死

23:01.160 --> 23:04.560
它还会带一个

23:04.560 --> 23:07.060
就是针对它来单独配置

23:07.060 --> 23:11.660
不过这个这个配置就跟微拍可无关了

23:11.660 --> 23:14.160
它只是交给这个插件的

23:14.160 --> 23:16.860
只是交给这个loader的

23:16.860 --> 23:19.060
另外的意思

23:19.060 --> 23:20.460
那么这里呢

23:20.460 --> 23:21.560
比方说这里也可以配

23:21.560 --> 23:23.360
那么这里我还可以配配配置调料鞋钢

23:23.360 --> 23:23.760
对吧

23:23.760 --> 23:24.960
用相对目录也可以

23:24.960 --> 23:25.660
以后再看

23:25.660 --> 23:26.360
看吧看吧

23:26.360 --> 23:27.260
我们用配置调料鞋钢

23:27.260 --> 23:29.360
一看用怎么样

23:29.360 --> 23:30.160
来吧

23:31.160 --> 23:36.820
打开

23:36.820 --> 23:44.420
配置调料鞋钢

23:44.420 --> 23:45.420
关掉

23:45.420 --> 23:46.920
检查

23:46.920 --> 23:48.420
你看图片还是可以显示出来的

23:48.420 --> 23:49.420
那么路径是不是

23:49.420 --> 23:50.620
前面拼到两个点

23:50.620 --> 23:50.820
对吧

23:50.820 --> 23:51.420
调料鞋钢

23:51.420 --> 23:52.420
拼一下这个东西

23:52.420 --> 23:53.820
它就是拼了一下

23:53.820 --> 23:54.820
拼了这个东西

23:54.820 --> 23:55.420
拼

23:55.420 --> 23:56.420
那么不同的插件

23:56.420 --> 23:57.420
不同的loader

23:57.420 --> 23:58.420
它做不同的处理

23:58.420 --> 23:59.720
看它具体怎么处理

23:59.720 --> 24:00.520
像这个fireloader

24:00.520 --> 24:01.220
它很简单

24:01.220 --> 24:02.720
它就是给你拼了一下

24:02.720 --> 24:03.420
那么这里呢

24:03.420 --> 24:04.420
你看现在变成了

24:04.420 --> 24:06.420
调料鞋钢

24:06.520 --> 24:06.920
一密集

24:06.920 --> 24:08.020
那就是相对目录的

24:08.020 --> 24:08.520
对吧

24:08.520 --> 24:09.820
表示从这个页面

24:09.820 --> 24:10.820
返回上一斤目录

24:10.820 --> 24:11.520
返回上一斤目录

24:11.520 --> 24:12.320
是不是这个目录

24:12.320 --> 24:13.620
这个目录下面的一密集

24:13.620 --> 24:14.720
是不是还是一样的

24:16.020 --> 24:16.420
对吧

24:17.420 --> 24:18.420
那么现在看介石

24:18.420 --> 24:19.920
有没有受到影响了

24:19.920 --> 24:20.920
介石是不是不受影响了

24:20.920 --> 24:23.020
它就用很原始的办法来做的

24:24.020 --> 24:24.520
那如果说

24:24.520 --> 24:26.720
它也要做一下

24:26.720 --> 24:27.820
它也要控制一下

24:27.820 --> 24:28.720
那么这里呢

24:28.720 --> 24:34.720
它也可以配置public pass

24:34.720 --> 24:35.720
配置鞋钢

24:36.620 --> 24:38.020
这个东西呢

24:38.020 --> 24:39.220
每个插件

24:39.220 --> 24:39.720
每个loader

24:39.720 --> 24:40.620
它只要用到这个

24:40.620 --> 24:41.520
它一般来说

24:41.520 --> 24:42.820
不是说一定的

24:42.820 --> 24:43.620
它一般来说

24:43.620 --> 24:44.820
后会这样子来处理

24:47.620 --> 24:48.220
它不允许

24:48.220 --> 24:49.520
我看一下

24:49.520 --> 24:50.820
这个atmwpack plugin

24:50.820 --> 24:53.320
它允许允许配置public pass

24:53.320 --> 24:54.820
那有些它不让你配置

24:54.820 --> 24:56.220
它只需要用公共的

24:56.220 --> 24:56.820
那就没办法了

25:00.830 --> 25:02.530
atmwpack plugin

25:04.330 --> 25:04.730
我看一下

25:04.730 --> 25:05.830
查一下

25:05.830 --> 25:06.530
它里面没有

25:06.630 --> 25:07.330
没有就没有

25:07.330 --> 25:08.130
没有就没有

25:10.330 --> 25:10.830
查一下

25:12.830 --> 25:14.730
public pass

25:16.930 --> 25:17.530
它说

25:18.030 --> 25:18.530
它说

25:18.530 --> 25:21.230
如果你设置了public pass的话

25:21.230 --> 25:22.430
又怎么样怎么样怎么样

25:23.930 --> 25:25.130
那它就是没有

25:25.130 --> 25:26.430
说明它就是

25:26.430 --> 25:27.430
说明它就是

25:27.430 --> 25:28.130
没有自己

25:28.130 --> 25:29.630
自己没有设置这个选项了

25:29.630 --> 25:30.230
它自己没有

25:30.230 --> 25:31.830
它必须要让你配置这个选举的

25:32.630 --> 25:33.630
不过一般来说

25:33.630 --> 25:34.230
一般来说

25:34.230 --> 25:35.130
我们一般配置一个

25:35.130 --> 25:36.130
全具的就够了

25:36.130 --> 25:37.430
就有它这里没有

25:37.430 --> 25:38.330
这个东西

25:38.330 --> 25:38.830
因为配置好

25:38.830 --> 25:40.130
这就是它自己的东西了

25:40.130 --> 25:42.030
所以说它自己没有让你配置的东西

25:42.030 --> 25:42.830
它就无所谓

25:42.830 --> 25:43.430
那么翻摩楼的

25:43.430 --> 25:44.930
它是可以有自己的东西的

25:44.930 --> 25:45.630
那么自己

25:45.630 --> 25:46.330
如果说翻摩楼的

25:46.330 --> 25:47.030
它自己配置的

25:47.030 --> 25:47.930
又是怎么样子的

25:47.930 --> 25:49.030
咱们来看一下

25:49.030 --> 25:52.160
打包出来看一下

25:52.160 --> 25:56.000
NPA的社会派

25:56.000 --> 25:58.000
其实这个东西就有兴趣的话

25:58.000 --> 25:58.500
自己了解

25:58.500 --> 25:59.500
没兴趣就算了

25:59.500 --> 26:00.900
这个玩意又不是什么

26:00.900 --> 26:01.300
重点

26:01.300 --> 26:02.900
一点都不重要

26:02.900 --> 26:03.700
它是怎么做的呢

26:03.700 --> 26:05.500
它又换了另外一种做法

26:05.500 --> 26:07.500
就是说你用的是它自己的

26:08.600 --> 26:09.300
pipelik派是

26:09.300 --> 26:11.100
它就直接给你拼接好了

26:11.100 --> 26:11.700
因为它自己

26:11.700 --> 26:12.500
它就知道这个纸

26:12.500 --> 26:12.900
对吧

26:12.900 --> 26:15.500
它直接把纸拼接到路径前面

26:15.500 --> 26:16.300
它给你拼接好了

26:16.300 --> 26:16.800
就发挥

26:18.100 --> 26:18.400
对吧

26:18.400 --> 26:20.100
两种不同的处理方式

26:20.100 --> 26:21.100
因为你交给它了

26:21.100 --> 26:22.100
它是不是可以读出来

26:22.100 --> 26:22.800
对不对

26:22.800 --> 26:23.900
它可以读不出来

26:23.900 --> 26:25.700
它直接拼接进去

26:25.700 --> 26:26.900
而这种pipelik派是

26:26.900 --> 26:27.700
它是读不出来的

26:27.700 --> 26:29.500
它只能像我们刚才那个鞋带

26:29.500 --> 26:30.400
然后交给wippack

26:30.400 --> 26:32.900
进行编译过后才能拼接过去

26:32.900 --> 26:34.400
总之它无所谓

26:34.400 --> 26:37.100
这种单独的配置方式

26:37.100 --> 26:38.200
以及统一的配置方式

26:38.200 --> 26:40.000
就看你自己去选择

26:40.000 --> 26:41.000
如果说没有差异的话

26:41.000 --> 26:42.800
那么就统一配置就完了

26:42.800 --> 26:45.000
这是关于pipelik派是

26:45.000 --> 26:46.400
造成的问题怎么来解决

26:48.200 --> 26:49.200
它都是解决路径问题

26:49.200 --> 26:50.500
再重新设

26:50.500 --> 26:52.200
这种问题有用吗

26:52.200 --> 26:52.700
有意义吗

26:52.700 --> 26:53.400
没意义

26:53.400 --> 26:54.400
没遇到这种情况

26:54.400 --> 26:56.400
根本有一点意义都没有

26:56.400 --> 26:57.800
遇到了这种问题之后

26:57.800 --> 26:58.900
不要让你们以后开发

26:58.900 --> 26:59.800
大家wippack

26:59.800 --> 27:01.700
要发现这个路径怎么不对啊

27:01.700 --> 27:03.600
你脑袋里面能够想到

27:03.600 --> 27:06.400
原来以前原老师讲过一个路径问题

27:06.400 --> 27:07.900
用pipelik派是来解决

27:07.900 --> 27:08.300
怎么解决

27:08.300 --> 27:08.800
我忘了

27:08.800 --> 27:11.200
到时候去查一下就行了

27:11.200 --> 27:11.800
OK

27:11.800 --> 27:13.800
这是关于这一刻要说的问题

