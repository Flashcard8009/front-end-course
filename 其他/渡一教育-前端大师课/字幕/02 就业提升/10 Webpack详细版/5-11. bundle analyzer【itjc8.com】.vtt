WEBVTT

00:00.750 --> 00:05.150
然后呢 新能优化的下一个 其他优化的下一个

00:05.150 --> 00:07.950
其他优化这里边呢 其实就是

00:07.950 --> 00:11.350
不是直接优化了啊 就是一些间接性的优化

00:11.350 --> 00:13.150
比较上级课 咱们学的ESLint

00:13.150 --> 00:15.350
间接性的 对吧

00:15.350 --> 00:19.750
能够提高啊 能够解决沟通问题 代码不同意的问题

00:19.750 --> 00:22.550
这些问题解决啊 间接的提高开发效率

00:22.550 --> 00:26.150
那么其他优化里边呢 我们再看一下这个Bondor

00:26.150 --> 00:27.350
Algizer

00:27.350 --> 00:29.950
Bondor呢 我们都知道啊 什么玩意呢

00:29.950 --> 00:32.750
他就是最终生成了那个东西 对吧

00:32.750 --> 00:34.950
就打包完了过后 最终生成了一个解释文件

00:34.950 --> 00:36.150
Bondor

00:36.150 --> 00:38.750
Algizer呢 就是分析 就是Bondor分析

00:38.750 --> 00:40.950
就是对我们打包的结果来进行分析

00:40.950 --> 00:45.350
他的这个东西啊 他本身呢 并不会提供什么优化

00:45.350 --> 00:48.750
只是呢来辅助 帮助我们查看

00:48.750 --> 00:51.950
目前需要哪些优化啊 我们自己该做什么优化

00:51.950 --> 00:55.150
我们自己去进行 就相当于是有一个

00:55.150 --> 00:57.750
有一个东西能够帮助我们决策的啊 决策

00:57.750 --> 01:01.150
我怎么要优化的 来 咱们来看一下吧 这特别好用啊

01:01.150 --> 01:04.550
之后呢 你们到公司里边 如果说要涉及到优化的话

01:04.550 --> 01:08.350
那么可能十字八九啊 都会使用他来进行分析

01:08.350 --> 01:11.350
还是有点不知性的啊

01:11.350 --> 01:14.150
99%吧 都是会使用他来进行分析啊

01:14.150 --> 01:15.350
特别实在为Pack里边

01:15.350 --> 01:16.750
好 咱们来看一下他怎么用啊

01:16.750 --> 01:19.150
这一刻也没有什么课件 因为他特别简单

01:19.150 --> 01:21.550
我这里呢 做了一个简单的事情啊

01:21.550 --> 01:23.750
我把这些东西也删掉 这些东西也删掉

01:23.750 --> 01:27.350
我这里呢 新建一个Index的解释文件

01:27.750 --> 01:30.950
在这里边呢 我们去导入一个解释文件

01:31.750 --> 01:32.750
导入一个解释文件

01:33.750 --> 01:36.550
再导入一个楼单写吧 啊楼单写

01:37.750 --> 01:39.750
啊 模拟一下吧 啊楼单写

01:40.950 --> 01:43.950
然后呢 我们这里呢 就注册一个事件吧

01:43.950 --> 01:46.750
注册一个事件 随便写一个 随便写个单吧

01:47.750 --> 01:50.550
点击的时候呢 点击的时候

01:51.950 --> 01:52.350
放个写

01:53.350 --> 01:58.150
然后呢 我们输出一下 这个随便来一个吧

01:58.150 --> 02:00.260
创客

02:00.260 --> 02:01.260
创客

02:01.260 --> 02:04.060
好 那么我们来看一下啊 看一下这个效果

02:05.060 --> 02:07.060
这个public其实也不要了啊

02:07.060 --> 02:09.060
我们也不需要打包成什么样的页面

02:09.060 --> 02:10.660
我从别的工程复制过来的

02:11.260 --> 02:13.460
好 那么这里呢 我们写好代码了

02:13.460 --> 02:15.260
对吧 然后我们看一下我们的配置文件

02:15.260 --> 02:16.460
配置文件里面特别简单

02:16.460 --> 02:17.860
就是清空我们的电视目录

02:17.860 --> 02:19.860
然后呢 我们现在比方说开发完成了

02:19.860 --> 02:22.660
开发完成了 过后呢 我们要进行打包

02:23.260 --> 02:24.460
来我们看一下打包结果

02:25.060 --> 02:27.460
是不是满足我们的要求

02:27.460 --> 02:30.260
或者是还没有地方需要优化

02:30.260 --> 02:32.260
希望我们要对它进行分析的话

02:32.260 --> 02:34.260
我们就可以使用 就是打包结果进行分析的话

02:34.260 --> 02:35.460
就可以使用这个

02:35.460 --> 02:36.260
bundle analyzer

02:37.260 --> 02:38.860
那么它需要安装一个webpack的插件

02:41.460 --> 02:45.460
叫做webpack bundle analyzer

02:46.460 --> 02:47.460
analyzer

02:50.290 --> 02:51.290
写错了吗

02:51.290 --> 02:55.290
analyzer

02:55.290 --> 02:56.290
require

02:56.290 --> 02:57.290
我们这已经安装好了

02:57.290 --> 02:59.290
webpack bundle analyzer

02:59.290 --> 03:00.290
那么你怎么用了

03:00.290 --> 03:01.290
就在插件里面一个加进去就行了

03:01.290 --> 03:04.290
webpack bundle analyzer加进去就行了

03:04.290 --> 03:05.290
那么这个玩意呢

03:05.290 --> 03:06.290
它会起一个什么作用呢

03:06.290 --> 03:08.290
我们再打包一次去看一下

03:08.290 --> 03:10.290
npm drop build

03:10.290 --> 03:11.290
打包一次

03:11.290 --> 03:12.290
打包的时候呢

03:12.290 --> 03:16.290
它会帮你生成一个atron文件

03:16.290 --> 03:18.290
它有几种方式

03:18.290 --> 03:20.290
最终它会打开一个页面

03:20.290 --> 03:21.290
最终的目的呢

03:21.290 --> 03:22.290
包错了

03:22.290 --> 03:24.290
感觉要错误

03:24.290 --> 03:29.290
bundle analyzer is not a constructor

03:29.290 --> 03:32.290
后面还有这个东西

03:32.290 --> 03:33.290
这个东西

03:33.290 --> 03:35.290
这是我们的插件

03:35.290 --> 03:37.290
它里面还提供了一些API

03:37.290 --> 03:39.290
不过我们平时就使用它的插件就够了

03:39.290 --> 03:40.290
那么我们再来看一下

03:40.290 --> 03:42.980
打包

03:42.980 --> 03:45.980
那么它其实就是帮你生成一个页面

03:45.980 --> 03:46.980
那你在浏览器里面

03:46.980 --> 03:47.980
通过查看这个页面

03:47.980 --> 03:49.980
它用一种比较图形化的方式

03:49.980 --> 03:51.980
来告诉你打包结果

03:51.980 --> 03:53.980
它自动可以打包成页面的

03:53.980 --> 03:54.980
它给你开了一个服务器

03:54.980 --> 03:56.980
短口的是888

03:56.980 --> 03:57.980
这些东西都可以改了

03:57.980 --> 03:58.980
都可以通过配置改的

03:58.980 --> 03:59.980
一般来说谁去改它呢

03:59.980 --> 04:00.980
管它呢

04:00.980 --> 04:01.980
另外呢

04:01.980 --> 04:02.980
就是说

04:02.980 --> 04:03.980
它还有别的方式

04:03.980 --> 04:05.980
可以通过这个东西来配置

04:05.980 --> 04:07.980
这里面它是可以写配置的

04:07.980 --> 04:08.980
是可以写配置的

04:08.980 --> 04:10.980
叫analyzer mode

04:10.980 --> 04:11.980
这个配置

04:11.980 --> 04:12.980
这个配置有三种

04:12.980 --> 04:13.980
一个是static

04:13.980 --> 04:15.980
刚才它默认的是server

04:15.980 --> 04:17.980
在服务器给你开了一个服务器

04:17.980 --> 04:19.980
然后再从服务器去访问这个页面

04:19.980 --> 04:20.980
你看dashmoodle

04:20.980 --> 04:21.980
dashmoodle里面

04:21.980 --> 04:22.980
它只有一个我们的GS

04:22.980 --> 04:23.980
对吧

04:23.980 --> 04:24.980
它没有那个

04:24.980 --> 04:25.980
生成什么页面

04:25.980 --> 04:26.980
它是在内部开了一个服务器

04:26.980 --> 04:27.980
来访问这个页面的

04:27.980 --> 04:28.980
这是默认的方式

04:28.980 --> 04:29.980
你也可以呢

04:29.980 --> 04:31.980
把它生成成为一个

04:31.980 --> 04:32.980
static

04:32.980 --> 04:34.980
static就是什么意思呢

04:34.980 --> 04:35.980
它表示的是

04:35.980 --> 04:36.980
我要生成一个页面

04:36.980 --> 04:37.980
到这儿

04:37.980 --> 04:38.980
这个dashmoodle

04:38.980 --> 04:39.980
生成一个页面

04:39.980 --> 04:40.980
那个页面呢

04:40.980 --> 04:41.980
就是报告我们的

04:41.980 --> 04:43.980
帮读的一些信息

04:43.980 --> 04:45.980
不过我们一般不用去改它

04:45.980 --> 04:46.980
用server就行了

04:46.980 --> 04:47.980
咱们可以看一下

04:47.980 --> 04:49.980
这里面的东西

04:49.980 --> 04:51.980
左边有一个非常简洁的

04:51.980 --> 04:53.980
一个就是切换的

04:53.980 --> 04:56.980
尺寸的一个标签

04:56.980 --> 04:58.980
右边的这个区域呢

04:58.980 --> 04:59.980
右边的这个区域呢

04:59.980 --> 05:01.980
就是它的帮读的结果

05:01.980 --> 05:03.980
你看我们目前就一个帮读

05:03.980 --> 05:04.980
就一个帮读

05:04.980 --> 05:05.980
made.js

05:05.980 --> 05:07.980
made.js里面包含了什么东西呢

05:07.980 --> 05:08.980
包含了什么东西呢

05:08.980 --> 05:09.980
这个帮读里面

05:09.980 --> 05:10.980
它包含了

05:10.980 --> 05:11.980
we know the modules

05:11.980 --> 05:12.980
目录下面的

05:12.980 --> 05:13.980
jacquare

05:13.980 --> 05:14.980
和loaddash

05:14.980 --> 05:15.980
那我们的index呢

05:15.980 --> 05:17.980
index有一个太小了

05:17.980 --> 05:18.980
代码太少太少了

05:18.980 --> 05:19.980
它这里呢

05:19.980 --> 05:20.980
列不出来了

05:20.980 --> 05:21.980
因为它显示的一次一种

05:21.980 --> 05:23.980
相对大小

05:23.980 --> 05:24.980
原来的意思吧

05:24.980 --> 05:25.980
它显示的是一种

05:25.980 --> 05:26.980
非常相对的大小

05:26.980 --> 05:27.980
是这么个意思

05:27.980 --> 05:28.980
于是呢

05:28.980 --> 05:30.980
它告诉你这个帮读的

05:30.980 --> 05:31.980
就一个帮读

05:31.980 --> 05:33.980
那么这个打包结果是什么样子

05:33.980 --> 05:34.980
那么只是它那里可以看到

05:34.980 --> 05:35.980
有三种尺寸

05:35.980 --> 05:37.980
每个帮读有三种尺寸

05:37.980 --> 05:40.980
目前显示的尺寸叫做Post

05:40.980 --> 05:42.980
就是我们打包结果的尺寸

05:42.980 --> 05:44.980
就是打包结果的尺寸

05:44.980 --> 05:45.980
就是帮读了目前的

05:45.980 --> 05:47.980
介石文件的这个尺寸

05:47.980 --> 05:49.980
就指的是这个尺寸

05:49.980 --> 05:50.980
那么另外一个呢

05:50.980 --> 05:51.980
就是

05:51.980 --> 05:52.980
你可以看到上面那个

05:52.980 --> 05:53.980
状态囊

05:53.980 --> 05:54.980
我这个鼠标指不过去

05:54.980 --> 05:57.980
还有一个State

05:57.980 --> 05:58.980
Size

05:58.980 --> 05:59.980
那么那个是什么呢

05:59.980 --> 06:01.980
那个是叫做输入尺寸

06:01.980 --> 06:02.980
输入尺寸是什么意思呢

06:02.980 --> 06:03.980
就没有打包

06:03.980 --> 06:04.980
Wepack还没有打包的时候

06:04.980 --> 06:05.980
那么这些尺寸

06:05.980 --> 06:06.980
加起来

06:06.980 --> 06:08.980
如果说不进行打包

06:08.980 --> 06:10.980
那么它应该是什么样的尺寸

06:10.980 --> 06:11.980
是这么个意思

06:11.980 --> 06:13.980
就是我们的元代码的尺寸

06:13.980 --> 06:14.980
你看元代码的尺寸

06:14.980 --> 06:15.980
我们要多一些对吧

06:15.980 --> 06:16.980
Post打包过后

06:16.980 --> 06:18.980
因为我们开启了Production

06:18.980 --> 06:19.980
打包过后要少一些

06:19.980 --> 06:20.980
是这么个意思

06:20.980 --> 06:24.980
那么第三种尺寸是要GZIP

06:24.980 --> 06:26.980
GZIP这个尺寸

06:26.980 --> 06:27.980
这个尺寸呢

06:27.980 --> 06:28.980
指的是

06:28.980 --> 06:31.980
如果说经过了GZIP压缩过后的尺寸

06:31.980 --> 06:32.980
那么下期可能

06:32.980 --> 06:35.980
我们讲一讲GZIP压缩吧

06:35.980 --> 06:36.980
我之前呢

06:36.980 --> 06:39.980
其实应该在传说优化来讲

06:39.980 --> 06:40.980
我忘了

06:40.980 --> 06:42.980
下一课把它补充一下

06:42.980 --> 06:43.980
因为那个东西

06:43.980 --> 06:45.980
还是有一些话要说的

06:45.980 --> 06:46.980
那么左边这个东西

06:46.980 --> 06:48.980
就是显示它的比例

06:48.980 --> 06:49.980
因为他看到的

06:49.980 --> 06:50.980
是显示一个比例

06:50.980 --> 06:51.980
对吧

06:51.980 --> 06:52.980
它不是一个绝对大小

06:52.980 --> 06:53.980
不是说长这么大

06:53.980 --> 06:54.980
那么它的大小是多少

06:54.980 --> 06:55.980
它不是个绝对大小

06:55.980 --> 06:56.980
它是一个比例

06:56.980 --> 06:57.980
它们相对之间的比例

06:57.980 --> 06:59.980
总之把那个窗口站满

06:59.980 --> 07:01.980
包比较小也是这么大

07:01.980 --> 07:02.980
包比较大也是这么大

07:02.980 --> 07:04.980
它显示的是一个比例关系

07:04.980 --> 07:05.980
那么左边这个东西

07:05.980 --> 07:06.980
是按照什么样的尺寸

07:06.980 --> 07:07.980
来显示比例关系

07:07.980 --> 07:09.980
一个是输入尺寸

07:09.980 --> 07:11.980
一个是打包之后的尺寸

07:11.980 --> 07:14.980
一个是GZIP压缩过后的尺寸

07:14.980 --> 07:15.980
GZIP压缩过后

07:15.980 --> 07:17.980
其实就比较小了

07:17.980 --> 07:18.980
你可以指责它看一下

07:18.980 --> 07:19.980
GZIP压缩过后

07:19.980 --> 07:21.980
只有54.5KB

07:21.980 --> 07:22.980
我们下期可以讲一下

07:22.980 --> 07:24.980
它压缩在某些场景下面

07:24.980 --> 07:26.980
还是比较有用的

07:26.980 --> 07:27.980
Pose的

07:27.980 --> 07:29.980
Pose尺寸就是打包过后

07:29.980 --> 07:30.980
是158KB

07:30.980 --> 07:32.980
如果说不打包的话

07:32.980 --> 07:34.980
核心就是802KB

07:34.980 --> 07:35.980
就这么个意思

07:35.980 --> 07:36.980
它通过这种图形化的方式

07:36.980 --> 07:38.980
非常轻松的显示出来

07:38.980 --> 07:39.980
通过这个图形化的方式

07:39.980 --> 07:40.980
你一眼就看出什么问题了

07:40.980 --> 07:42.980
包的体积太大了

07:42.980 --> 07:43.980
是不是太大了

07:43.980 --> 07:44.980
那么怎么样

07:44.980 --> 07:45.980
是不是要分包

07:45.980 --> 07:46.980
我们要分包

07:46.980 --> 07:47.980
那么我们就可以利用

07:47.980 --> 07:48.980
咱们之前学的

07:48.980 --> 07:50.980
比较自动分包

07:50.980 --> 07:51.980
自动分包

07:51.980 --> 07:53.980
咱们把这个东西拿过来

07:53.980 --> 07:56.490
把这个东西拿过来

07:56.490 --> 07:57.490
随便找个地方安装去

07:57.490 --> 07:59.490
我也不再重新解释了

07:59.490 --> 08:00.490
不再重新解释了

08:00.490 --> 08:01.490
那么这里

08:01.490 --> 08:02.490
我们把这个东西删掉

08:02.490 --> 08:03.490
我们目前也没用到

08:03.490 --> 08:04.490
没啥关系

08:04.490 --> 08:05.490
那么这里

08:05.490 --> 08:06.490
这样子

08:06.490 --> 08:07.490
设置好了

08:07.490 --> 08:08.490
设置好了

08:08.490 --> 08:11.180
我们现在就重新打包

08:11.180 --> 08:12.180
这个东西一般

08:12.180 --> 08:14.180
到那个

08:14.180 --> 08:16.180
快要收尾的时候

08:16.180 --> 08:17.180
要追踪的时候

08:17.180 --> 08:19.180
我们要进行一个

08:19.180 --> 08:21.180
性能的优化

08:21.180 --> 08:22.180
那么这个时候

08:22.180 --> 08:23.180
肯定要用到这个工具

08:23.180 --> 08:25.180
它就是用来性能优化的

08:25.180 --> 08:26.180
它本身不性能优化

08:26.180 --> 08:28.180
但是它帮助你分析

08:28.180 --> 08:30.180
那么这里

08:30.180 --> 08:31.180
你看一下

08:31.180 --> 08:32.180
我们现在就两个包了

08:32.180 --> 08:33.180
背点接是很小

08:33.180 --> 08:35.180
因为我们的主代码

08:35.180 --> 08:36.180
就主模块

08:36.180 --> 08:37.180
没有写什么东西

08:37.180 --> 08:38.180
实际上以后

08:38.180 --> 08:39.180
我们的主模块

08:39.180 --> 08:40.180
还是要写很多代码的

08:40.180 --> 08:41.180
这里面ASRC目录下面

08:41.180 --> 08:42.180
要写很多代码

08:42.180 --> 08:43.180
只不过我们这门客

08:43.180 --> 08:44.180
是讲的是

08:44.180 --> 08:45.180
构建工具

08:45.180 --> 08:46.180
主要关注在工具这一块

08:46.180 --> 08:48.180
没关注到代码的这一块

08:48.180 --> 08:49.180
代码这一块

08:49.180 --> 08:50.180
就是功能性的

08:50.180 --> 08:51.180
该写什么功能就写

08:51.180 --> 08:52.180
就行了

08:52.180 --> 08:53.180
那么以后

08:53.180 --> 08:54.180
其实我们要写很多代码

08:54.180 --> 08:55.180
目前这个背点接是没事

08:55.180 --> 08:56.180
我们的主模块

08:56.180 --> 08:58.180
主模块就很少

08:58.180 --> 09:01.180
那么把这两个东西分离出去了

09:01.180 --> 09:02.180
同学看来

09:02.180 --> 09:03.180
这个东西还是比较大

09:03.180 --> 09:04.180
你看

09:04.180 --> 09:05.180
那么PoseSize

09:05.180 --> 09:06.180
157KB

09:06.180 --> 09:07.180
要小了一点点的

09:07.180 --> 09:08.180
但是还是比较大

09:08.180 --> 09:09.180
还是比较大

09:09.180 --> 09:10.180
那么这个时候

09:10.180 --> 09:12.180
你可以想一些办法

09:12.180 --> 09:13.180
比方说

09:13.180 --> 09:16.180
你可以用延迟加债

09:16.180 --> 09:17.180
还有去shaking

09:17.180 --> 09:18.180
这些东西都可以想办法

09:18.180 --> 09:19.180
对吧

09:19.180 --> 09:20.180
比方说我们

09:20.180 --> 09:21.180
用一下去shaking

09:21.180 --> 09:23.180
我们这里能用ES

09:23.180 --> 09:24.180
Hung Kong ES

09:24.180 --> 09:26.180
这里我们是用

09:26.180 --> 09:28.180
导入Trunk

09:29.180 --> 09:30.180
这里

09:31.180 --> 09:32.180
保存

09:32.180 --> 09:34.180
我们这里重新来分析

09:34.180 --> 09:39.030
然后我们来看一下结果

09:42.500 --> 09:43.500
没出来

09:43.500 --> 09:44.500
出来了

09:45.500 --> 09:46.500
那你看一下

09:46.500 --> 09:47.500
现在我们的

09:47.500 --> 09:48.500
你看这儿

09:48.500 --> 09:49.500
看这儿

09:49.500 --> 09:50.500
那么这里所有的创可

09:50.500 --> 09:51.500
因为创可多了

09:51.500 --> 09:52.500
它就会全部的显示出来

09:52.500 --> 09:53.500
所有的创可

09:53.500 --> 09:54.500
这里可以勾选

09:54.500 --> 09:55.500
哪些创可不显示

09:55.500 --> 09:56.500
哪些创可要显示

09:56.500 --> 09:57.500
那么这些

09:57.500 --> 09:59.500
就是打包出来的结果

09:59.500 --> 10:00.500
你可以看到

10:00.500 --> 10:01.500
其实就已经优化了不少了

10:01.500 --> 10:02.500
在PoseSize之后

10:02.500 --> 10:03.500
我们的Vender

10:03.500 --> 10:05.500
就是第三方模块的包

10:05.500 --> 10:06.500
其实就小了很多了

10:06.500 --> 10:07.500
89kb

10:07.500 --> 10:08.500
对吧

10:08.500 --> 10:09.500
那么如果说开启了

10:09.500 --> 10:10.500
GAP-R出的话

10:10.500 --> 10:11.500
就只有31kb了

10:11.500 --> 10:12.500
那么楼大写在这儿

10:12.500 --> 10:13.500
楼大写在这儿

10:13.500 --> 10:14.500
它一看相对大小

10:14.500 --> 10:15.500
结果是不很大

10:15.500 --> 10:16.500
有些同样

10:16.500 --> 10:17.500
接框架能不能就是

10:17.500 --> 10:18.500
使用去shaking

10:18.500 --> 10:20.500
接框架挺难的

10:20.500 --> 10:21.500
挺难的

10:21.500 --> 10:22.500
因为接框架

10:22.500 --> 10:23.500
你知道它有多了对象

10:23.500 --> 10:24.500
对吧

10:24.500 --> 10:25.500
它给力是一个完整的

10:25.500 --> 10:26.500
多了对象

10:26.500 --> 10:27.500
多了对象里面

10:27.500 --> 10:28.500
东西有很多

10:28.500 --> 10:29.500
它没法拆开

10:29.500 --> 10:31.500
接框架就挺难的了

10:31.500 --> 10:32.500
那么这里就是楼大写

10:32.500 --> 10:34.500
它一看就变得很小了

10:34.500 --> 10:35.500
当然你也可以使用

10:35.500 --> 10:36.500
我们学过的

10:36.500 --> 10:37.500
就像这些东西

10:37.500 --> 10:38.500
我们就可以根据分析的结果

10:38.500 --> 10:39.500
来进行优化

10:39.500 --> 10:41.500
楼大写还想把楼大写

10:41.500 --> 10:42.500
再弄出去

10:42.500 --> 10:43.500
楼大写再弄出去

10:43.500 --> 10:44.500
因为我们可以使用

10:44.500 --> 10:45.500
延迟加载对吧

10:45.500 --> 10:46.500
因为我们在点击之后

10:46.500 --> 10:47.500
才使用这个窗殼

10:47.500 --> 10:48.500
那是不是可以使用

10:48.500 --> 10:49.500
咱们在兰家

10:49.500 --> 10:50.500
在里边学的

10:50.500 --> 10:51.500
对吧

10:51.500 --> 10:52.500
复作呢

10:53.500 --> 10:55.500
兰家在里边学的

10:55.500 --> 10:56.500
然后在Integre社里边

10:56.500 --> 10:57.500
干嘛呢

10:57.500 --> 10:59.500
我们用Import

10:59.500 --> 11:00.500
Utl

11:00.500 --> 11:02.500
这里把它变成一个异部寒树

11:03.500 --> 11:04.500
这里Arwait

11:05.500 --> 11:07.500
这里可以得到一个对象

11:07.500 --> 11:08.500
对象就是模块

11:08.500 --> 11:09.500
我们模块里面导出一个

11:09.500 --> 11:10.500
什么窗殼

11:10.500 --> 11:11.500
我们把结构

11:12.500 --> 11:13.500
然后我们这里来使用

11:13.500 --> 11:14.500
这样子

11:14.500 --> 11:16.500
我们就可以延迟加载了

11:16.500 --> 11:17.500
我们又可以进一步说

11:17.500 --> 11:18.500
进一步说小了

11:19.500 --> 11:20.500
运行

11:20.500 --> 11:21.500
再打包

11:21.500 --> 11:23.500
它可以提供分析

11:23.500 --> 11:24.500
然后你根据你的实际情况

11:24.500 --> 11:26.500
来进行优化

11:26.500 --> 11:28.500
那么达到一个合适的结果

11:28.500 --> 11:29.500
就行了

11:30.500 --> 11:31.500
就提不错了

11:32.500 --> 11:33.500
就这么个意思

11:33.500 --> 11:35.500
就现在打包成这样子

11:35.500 --> 11:37.500
它能占个EKB

11:37.500 --> 11:39.500
它能占个EKB

11:39.500 --> 11:41.500
它能占个30KB

11:41.500 --> 11:42.500
压缩过后

11:42.500 --> 11:43.500
就这么个意思

11:43.500 --> 11:44.500
这是一个分析工具

11:44.500 --> 11:45.500
特别简单

11:45.500 --> 11:46.500
大家以后

11:46.500 --> 11:48.500
如果说在又做优化的时候

11:48.500 --> 11:49.500
可以充分利用这个工具

11:49.500 --> 11:50.500
来帮助你进行

11:51.500 --> 11:53.500
包的分析

11:53.500 --> 11:55.500
再强调一次

11:55.500 --> 11:57.500
它显示的是一个

11:57.500 --> 11:58.500
相对的大小

11:58.500 --> 12:00.500
你不要看这个界面上

12:00.500 --> 12:01.500
这个东西这么大

12:01.500 --> 12:02.500
我要把它拆拆拆

12:02.500 --> 12:03.500
没必要了

12:03.500 --> 12:04.500
因为它本身就已经比较小了

12:04.500 --> 12:06.500
你看EKB压缩过后

12:06.500 --> 12:07.500
只有30KB

12:07.500 --> 12:08.500
就已经非常小了

12:08.500 --> 12:09.500
每次都比较过分了

12:09.500 --> 12:11.500
不要做得过分就行了

12:11.500 --> 12:12.500
好

12:12.500 --> 12:13.500
那么就讲到这

