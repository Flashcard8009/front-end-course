WEBVTT

00:00.180 --> 00:05.780
好 我们继续讲解我们MPVU和语音之间的一些操作

00:05.780 --> 00:13.180
在之前呢 我们给大家讲解了云开发中的数据库这一块的开发结构

00:13.180 --> 00:21.180
那么在数据库开发这里面呢 我们讲解了对数据的增山改查

00:21.180 --> 00:26.180
利用MPVU的写法 利用MPVU的框架来做这个事情

00:26.180 --> 00:32.180
同时呢 我们在讲到的是 对于MPVU的整个这个开发来讲

00:32.180 --> 00:38.180
它的好处是 我们直接完成利用微信语法的直写

00:38.180 --> 00:43.180
可以直接完成这样的一个书写 并不需要去做一些额外的改变

00:43.180 --> 00:49.180
那么同时呢 它也结合我们现在页面中的我们的比如说

00:49.180 --> 00:52.180
HTML的结构来做这个事情

00:52.180 --> 00:57.180
好 那么这节课讲什么呢 我们讲的是云含数 我们讲云含数

00:57.180 --> 01:03.180
那么在云含数的概念其实是在我们的小程序中

01:03.180 --> 01:08.180
应该讲是比较 应该是重要的一个环节

01:08.180 --> 01:13.180
我们首先给大家看一下 所谓的云含数它是一个什么东西

01:13.180 --> 01:19.550
在我们本身的讲解过程中呢 以前的原生开发中呢

01:19.550 --> 01:22.550
我们也有讲解到云含数的部分

01:22.550 --> 01:27.550
首先我们来看一下 我们打开云含数 在这

01:27.550 --> 01:35.550
什么是云含数啊 云含数呢 其实它就是运行在云端的含数

01:35.550 --> 01:40.550
我们平时所写的任何的含数都是写在本地

01:40.550 --> 01:44.550
或者称之为微信小程序内

01:44.550 --> 01:50.550
那么其实有一些含数 我们把它也可以写在云端

01:50.550 --> 01:56.550
那么这种含数呢 那么所有的程序都可以进行调用

01:56.550 --> 02:00.550
形成了这样的一个共享的含数的概念

02:00.550 --> 02:05.550
第二呢 那么它呢是占用了一个CPU的资源

02:05.550 --> 02:08.550
但是它是独立的 所以这件事情呢

02:08.550 --> 02:12.550
我们大家可以去看一下程序业务逻辑上

02:12.550 --> 02:18.550
如果说你要做两个 或者三个四个这样的程序

02:18.550 --> 02:22.550
那么这种做一个的话 其实云含数和本地操作

02:22.550 --> 02:25.550
在某些时候基本差不多 你要做两个

02:25.550 --> 02:29.550
那么或者这样 你可能在一个服务器上面

02:29.550 --> 02:33.550
你要有多个程序进入 但是操作又是一样的话

02:33.550 --> 02:37.550
那我们大可使用云含数来进行编写

02:37.550 --> 02:40.550
这是第一点 第二点

02:40.550 --> 02:43.550
云含数的编写 看这句啊

02:43.550 --> 02:46.550
云含数的编写与本地的接下来码编写

02:46.550 --> 02:49.550
没有意义 无意 没有区别

02:49.550 --> 02:53.550
所以呢 我们把云含数的写法在本地写完

02:53.550 --> 02:57.550
然后直接可以传送到我们的云端

02:57.550 --> 03:01.550
第三呢 就是有一些代码

03:01.550 --> 03:07.550
你非得用云含数去制作 才会有你所想要的结果

03:07.550 --> 03:10.550
我们在之前讲数据库操作的时候

03:10.550 --> 03:14.550
我们讲到一个叫做数据更新 是吧

03:14.550 --> 03:17.550
那么数据更新呢 我们讲在客户端

03:17.550 --> 03:21.550
你只能完成单数据的更新

03:21.550 --> 03:24.550
但是我要多数据 比如说我就要两条

03:24.550 --> 03:26.550
或者全表数据的操作

03:26.550 --> 03:29.550
那这种时候 你应该怎么做呢

03:29.550 --> 03:33.550
我们讲 在我们的官方的文档上面

03:33.550 --> 03:38.550
在这个官方的整个上面 特别是针对数据库的这一块

03:38.550 --> 03:42.550
你看啊 它其实没有说全

03:42.550 --> 03:44.550
你看 它比如说更新

03:44.550 --> 03:47.550
它告诉你有一个update 有一个更新操作

03:47.550 --> 03:50.550
局部更新 主要是给出一个我们的dog

03:50.550 --> 03:53.550
代表哪条记录 然后更新一下

03:53.550 --> 03:55.550
然后呢 后面告诉你

03:55.550 --> 04:00.550
你可以除了这边去设置 就是这边嘛

04:00.550 --> 04:03.550
你可以设置一些 设置遗除

04:03.550 --> 04:05.550
这样的一些名词以外

04:05.550 --> 04:08.550
那么你还可以再写一下 比如像这个

04:08.550 --> 04:11.550
它设置什么呢 是每个进度加时

04:11.550 --> 04:14.550
类似于就是在data中的一些改变

04:14.550 --> 04:17.550
然后呢 你看到还有poch这些

04:17.550 --> 04:20.550
但是它始终保持的是什么

04:20.550 --> 04:23.550
指定一条数据的操作

04:23.550 --> 04:26.550
它指定一条数据的操作 咱们看到吗

04:26.550 --> 04:29.550
那么 这种情况下 我们讲

04:29.550 --> 04:32.550
你怎么样做到多条数据呢 你往下看

04:32.550 --> 04:37.550
一条 一条 指定某一条数据

04:37.550 --> 04:41.550
你往下看 这边还是一样

04:41.550 --> 04:44.550
针对我们 注意一下这边

04:44.550 --> 04:46.550
你需要更新多个的话 它写出来

04:46.550 --> 04:48.550
需要在云端进行操作

04:48.550 --> 04:50.550
需要在云端进行操作

04:50.550 --> 04:52.550
那么 这里的话呢

04:52.550 --> 04:55.550
我们就要说一下云端的做的方法

04:55.550 --> 04:58.550
并且呢 在我们的数据本身自己

04:58.550 --> 05:02.550
还需要有一些mpview的特色的操作

05:02.550 --> 05:04.550
这些上面 你看到吗

05:04.550 --> 05:07.550
它这边 在很早之前的时候

05:07.550 --> 05:09.550
它是没有更新

05:09.550 --> 05:11.550
那么最近呢 它把它更新到这一块

05:11.550 --> 05:13.550
告诉你 云端操作

05:13.550 --> 05:15.550
ok 那我们来看一下

05:15.550 --> 05:17.550
云端可以指定表结构

05:17.550 --> 05:19.550
也可以去指定你现在的

05:19.550 --> 05:22.550
我们的所有表 或者所有的

05:22.550 --> 05:24.550
当表纪录

05:24.550 --> 05:26.550
ok 那么更新的话 其实是一样

05:26.550 --> 05:30.550
更新的话 我们只要去set

05:30.550 --> 05:33.550
操作 这个方式跟update是一样的

05:33.550 --> 05:35.550
好了 那么我们来看一下

05:35.550 --> 05:37.550
云端的整个开发

05:37.550 --> 05:41.550
需要有一些什么样的操作方法

05:41.550 --> 05:43.550
首先 我们要确保一点

05:43.550 --> 05:45.550
我们数据库依然有

05:45.550 --> 05:47.550
当然 本身来讲

05:47.550 --> 05:49.550
我们就用数据库3的几条纪录

05:49.550 --> 05:51.550
进行修改

05:51.550 --> 05:53.550
这些数据大家可以自行来完成

05:53.550 --> 05:55.550
第一点是这个

05:55.550 --> 05:57.550
第二点呢 还有一个

05:57.550 --> 05:59.550
那我说明一下 就是

05:59.550 --> 06:02.550
我们在操作个人数据的时候

06:02.550 --> 06:04.550
我们在操作个人数据的时候

06:04.550 --> 06:06.550
我们强调过

06:06.550 --> 06:08.550
如果数据库全线设定为

06:08.550 --> 06:11.550
就是仅创建这可读写

06:11.550 --> 06:14.550
你对自行纪录需要进行更改的话

06:14.550 --> 06:16.550
那么你只能去

06:16.550 --> 06:18.550
达到我们现在的open ID

06:18.550 --> 06:20.550
你拿到open ID所指向的

06:20.550 --> 06:22.550
但是open ID要注意

06:22.550 --> 06:23.550
这个拿起来

06:23.550 --> 06:26.550
我们不是像我们拿平时代码一样

06:26.550 --> 06:28.550
你直接可以拿到

06:28.550 --> 06:30.550
因为对于小程序来讲

06:30.550 --> 06:35.270
我随便给一个

06:35.270 --> 06:36.270
小程序来讲

06:36.270 --> 06:38.270
它可以拿到微信

06:38.270 --> 06:40.270
用logging

06:40.270 --> 06:42.270
用微信logging的方式

06:42.270 --> 06:43.270
判断你的登录

06:43.270 --> 06:45.270
它通过这个

06:45.270 --> 06:48.270
它可以获取一个叫做coder代码

06:48.270 --> 06:51.270
由这个代码coder

06:51.270 --> 06:53.270
再向服务器发起

06:53.270 --> 06:54.270
比如说

06:54.270 --> 07:05.370
它内部的secret

07:05.370 --> 07:07.370
再加上coder

07:07.370 --> 07:09.370
这样的代码

07:09.370 --> 07:11.370
它要拼上我们讲

07:11.370 --> 07:14.370
密码加它的内部的结构

07:14.370 --> 07:17.370
再加上另外的2次网址

07:17.370 --> 07:22.750
我们称之为

07:22.750 --> 07:24.750
2次网址的操作

07:24.750 --> 07:25.750
那么这样

07:25.750 --> 07:28.750
它才可以去拿到它的open ID

07:28.750 --> 07:30.750
我给大家看一下

07:30.750 --> 07:31.750
是微信小程序

07:31.750 --> 07:33.750
如果你单拿的时候的

07:33.750 --> 07:34.750
它的一个结构

07:34.750 --> 07:37.750
开一个任何一个

07:37.750 --> 07:38.750
拿open ID的方法

07:38.750 --> 07:39.750
首先你看

07:39.750 --> 07:41.750
它需要的是

07:41.750 --> 07:42.750
App ID,secret

07:42.750 --> 07:44.750
这两个都需要你自行提供

07:44.750 --> 07:46.750
这个的话

07:46.750 --> 07:47.750
是你需要在

07:47.750 --> 07:48.750
你的微信小程序后台

07:48.750 --> 07:50.750
去深沉的

07:50.750 --> 07:52.750
然后它在浪曲里面的时候

07:52.750 --> 07:53.750
首先很简单

07:53.750 --> 07:55.750
它是得到个人信息

07:55.750 --> 07:56.750
你用这个得到的话

07:56.750 --> 07:57.750
是没法做的

07:57.750 --> 07:59.750
它需要做这一步

07:59.750 --> 08:01.750
咱们只要看这一句就可以了

08:01.750 --> 08:03.750
看这一句很长

08:03.750 --> 08:04.750
它是叫做什么呢

08:04.750 --> 08:05.750
叫做

08:05.750 --> 08:07.750
Jason Coder

08:07.750 --> 08:08.750
Jason Coder Session

08:08.750 --> 08:09.750
去换

08:09.750 --> 08:10.750
你需要一个

08:10.750 --> 08:11.750
我们看到吗

08:11.750 --> 08:12.750
App ID

08:12.750 --> 08:13.750
你拿到一个ID

08:13.750 --> 08:15.750
你需要个secret拿过来

08:15.750 --> 08:17.750
你还要的是coder

08:17.750 --> 08:18.750
那么这个coder哪里来呢

08:18.750 --> 08:19.750
就是我们前面说的

08:19.750 --> 08:21.750
你需要经过登录以后

08:21.750 --> 08:23.750
你需要user登录以后

08:23.750 --> 08:25.750
你能换到这个coder

08:25.750 --> 08:27.750
那么后来换到以后

08:27.750 --> 08:28.750
后面还要

08:28.750 --> 08:29.750
就是我们的

08:29.750 --> 08:31.750
那个authentication coder

08:31.750 --> 08:32.750
就验证

08:32.750 --> 08:33.750
验证吧

08:33.750 --> 08:34.750
很多

08:34.750 --> 08:36.750
你需要得到这些东西以后

08:36.750 --> 08:39.750
最后你才能得到它的OpenID

08:39.750 --> 08:40.750
但是你想一下

08:40.750 --> 08:43.750
我们现在的个人

08:43.750 --> 08:44.750
如果你个人自己的话

08:44.750 --> 08:47.750
你可以去拿这些纸

08:47.750 --> 08:49.750
但是如果我做个小程序呢

08:49.750 --> 08:51.750
小程序本身自己

08:51.750 --> 08:53.750
我是张三和李四同时操作

08:53.750 --> 08:55.750
我不可能张三给他的

08:55.750 --> 08:56.750
他自己先查好

08:56.750 --> 08:57.750
放进来

08:57.750 --> 08:58.750
李四查好放进来

08:58.750 --> 08:59.750
对吧

08:59.750 --> 09:00.750
那么我写死一个人

09:00.750 --> 09:01.750
信号张三的

09:01.750 --> 09:03.750
那李四用的也是张三的吗

09:03.750 --> 09:04.750
那么这点问题

09:04.750 --> 09:06.750
就是我们回归到

09:06.750 --> 09:07.750
我们现在的程序上

09:07.750 --> 09:08.750
就是

09:08.750 --> 09:13.750
我们如何让他自动获得OpenID

09:13.750 --> 09:14.750
这个概念呢

09:14.750 --> 09:16.750
也是小程序

09:16.750 --> 09:19.060
云含数

09:19.060 --> 09:21.060
云含数需要做的

09:21.060 --> 09:24.060
就是自动获取

09:24.060 --> 09:25.060
当前的

09:25.060 --> 09:27.060
这个对象的OpenID

09:27.060 --> 09:29.060
是这个逻辑

09:29.060 --> 09:31.060
因为云含数也好

09:31.060 --> 09:33.060
就是我们称斗云开发

09:33.060 --> 09:35.060
它其实和小程之间

09:35.060 --> 09:38.060
是叫做无见全协议

09:38.060 --> 09:39.060
也就是说

09:39.060 --> 09:41.060
我并不需要你做验证

09:41.060 --> 09:42.060
什么coder

09:42.060 --> 09:43.060
secret

09:43.060 --> 09:44.060
这些我都不需要

09:44.060 --> 09:46.060
只要你有权限

09:46.060 --> 09:47.060
来开发小程序

09:47.060 --> 09:49.060
代表你这个人

09:49.060 --> 09:51.060
就是一个真实的账户记录

09:52.060 --> 09:54.060
因为小程序的登录

09:54.060 --> 09:56.060
需要通过微信来登录的

09:57.060 --> 09:59.060
小程序是附属于

09:59.060 --> 10:00.060
微信上的一个功能

10:00.060 --> 10:02.060
它并非是一个单独APP

10:02.060 --> 10:04.060
那么只要你能够打开

10:04.060 --> 10:05.060
我们想

10:05.060 --> 10:07.060
你能不能不打开微信

10:07.060 --> 10:08.060
打开微信小程序

10:08.060 --> 10:09.060
这是做不到的

10:09.060 --> 10:11.060
所以你只要能够打开微信

10:11.060 --> 10:12.060
我就代表着

10:12.060 --> 10:13.060
我一定是

10:13.060 --> 10:14.060
这个人

10:14.060 --> 10:15.060
是一个真实有效的

10:15.060 --> 10:16.060
并且呢

10:16.060 --> 10:18.060
我们无法在小程序

10:18.060 --> 10:20.060
打开过程中去拿到链机

10:20.060 --> 10:22.060
然后再修改

10:22.060 --> 10:23.060
你现在里面的

10:23.060 --> 10:25.060
所有的云端操作

10:25.060 --> 10:27.060
因为小程序

10:27.060 --> 10:29.060
本身打开了这个浏览器

10:29.060 --> 10:31.060
是微信浏览器

10:31.060 --> 10:32.060
所以

10:32.060 --> 10:33.060
它不是我们外部的

10:33.060 --> 10:34.060
所有的浏览器

10:34.060 --> 10:35.060
方式打开

10:35.060 --> 10:36.060
没有这个按钮

10:36.060 --> 10:38.060
那么我们在云端的操作

10:38.060 --> 10:39.060
和小程序之间的

10:39.060 --> 10:40.060
直接的对接

10:40.060 --> 10:42.060
它其实是一种安全的

10:42.060 --> 10:44.060
所以我们就可以

10:44.060 --> 10:45.060
让我们的云端

10:45.060 --> 10:47.060
返回给你

10:47.060 --> 10:48.060
当前

10:48.060 --> 10:50.060
你这个小程序的

10:50.060 --> 10:51.060
这就是

10:51.060 --> 10:53.060
云含数的两大重要特点

10:53.060 --> 10:55.060
就是必须用云含数做

10:55.060 --> 10:56.060
OK

10:56.060 --> 10:57.060
那么我们这节课

10:57.060 --> 10:59.060
就给它做两个东西

10:59.060 --> 11:00.060
一个就是

11:01.060 --> 11:03.060
OBID的获取

11:04.060 --> 11:05.060
第二呢

11:05.060 --> 11:06.060
就是

11:06.060 --> 11:07.060
我们的

11:08.060 --> 11:11.060
多数据的

11:11.060 --> 11:12.060
更新

11:12.060 --> 11:13.060
这两部分

11:13.060 --> 11:16.060
那么我们这里面要强调的是

11:16.060 --> 11:18.060
npv

11:18.060 --> 11:19.060
和

11:19.060 --> 11:21.060
原生

11:21.060 --> 11:22.060
微信

11:22.060 --> 11:24.060
小程序的

11:24.060 --> 11:26.060
开发比较

11:26.060 --> 11:28.060
以及npv的书写格式

11:28.060 --> 11:30.060
要做这些内容

11:30.060 --> 11:31.060
好了

11:31.060 --> 11:33.060
首先我们创建一个新项目

11:33.060 --> 11:34.060
然后的话

11:34.060 --> 11:35.060
按照老规则

11:35.060 --> 11:36.060
我们

11:36.060 --> 11:42.380
启动一下

11:42.380 --> 11:43.380
使其这个项目

11:43.380 --> 11:44.380
能够以正常模式

11:44.380 --> 11:45.380
跑起来

11:45.380 --> 11:46.380
有个端口占用

11:46.380 --> 11:47.380
没有关系

11:47.380 --> 11:48.380
它自己会开启

11:48.380 --> 11:49.380
OK

11:49.380 --> 11:50.380
好

11:50.380 --> 11:52.380
我们可以在里面修改一下

11:52.380 --> 11:53.380
我们的src

11:53.380 --> 11:54.380
我们只改个名称

11:54.380 --> 11:55.380
其他下个不改

11:55.380 --> 11:56.380
这叫做

11:59.780 --> 12:00.780
npv

12:01.780 --> 12:02.780
云含数

12:02.780 --> 12:06.950
好

12:06.950 --> 12:07.950
接下来

12:07.950 --> 12:08.950
我们

12:08.950 --> 12:09.950
可以操作我们

12:09.950 --> 12:10.950
一

12:10.950 --> 12:12.950
做云含数的话

12:12.950 --> 12:14.950
我们需要有一些配置

12:14.950 --> 12:16.950
我们需要有一些配置

12:16.950 --> 12:17.950
那么这些配置

12:17.950 --> 12:18.950
在我们

12:18.950 --> 12:19.950
讲解云含数的时候

12:19.950 --> 12:21.950
特别是讲解小程序

12:21.950 --> 12:23.950
云开发的时候

12:23.950 --> 12:24.950
我们已经讲过

12:24.950 --> 12:25.950
那么这边的话

12:25.950 --> 12:27.950
我们把它再拿一下

12:27.950 --> 12:28.950
首先

12:28.950 --> 12:29.950
无论你做

12:30.950 --> 12:31.950
小程序的数据库

12:31.950 --> 12:33.950
还是属于存储

12:33.950 --> 12:34.950
还是云开发

12:34.950 --> 12:35.950
那么其实

12:35.950 --> 12:37.950
它都需要进行

12:37.950 --> 12:39.950
小程序和我们云端的

12:39.950 --> 12:40.950
一个链接

12:40.950 --> 12:42.950
称之为叫初始化

12:42.950 --> 12:43.950
在哪

12:43.950 --> 12:44.950
小程序里面

12:44.950 --> 12:46.950
它其实是在dister里面的

12:46.950 --> 12:49.950
app.gs里面完成

12:49.950 --> 12:51.950
app.gs

12:51.950 --> 12:52.950
但是我们现在

12:52.950 --> 12:53.950
在npview中

12:53.950 --> 12:54.950
所以这个功能

12:54.950 --> 12:56.950
我们把它做在什么东西

12:56.950 --> 12:58.950
去生成app.gs的

12:58.950 --> 12:59.950
我们想一下

12:59.950 --> 13:00.950
是不是应该是

13:00.950 --> 13:02.950
这里面的app.view

13:02.950 --> 13:03.950
对吧

13:03.950 --> 13:04.950
那我们在这儿

13:04.950 --> 13:06.950
我们把这个大住室

13:06.950 --> 13:07.950
系统原生的拿掉

13:07.950 --> 13:08.950
我们做一个

13:08.950 --> 13:09.950
云

13:09.950 --> 13:14.120
数据

13:14.120 --> 13:15.120
库

13:15.120 --> 13:17.120
初始化

13:17.120 --> 13:19.120
先做这个

13:19.120 --> 13:29.340
微信.cloud.init

13:29.340 --> 13:31.340
user.true

13:31.340 --> 13:32.340
第二步

13:32.340 --> 13:33.340
指定

13:33.340 --> 13:34.340
我们说过

13:34.340 --> 13:35.340
不指定

13:35.340 --> 13:36.340
它就是默认当前

13:36.340 --> 13:37.340
所指向的

13:37.340 --> 13:38.340
指定了

13:38.340 --> 13:39.340
代表着

13:39.340 --> 13:40.340
它就会向这个

13:40.340 --> 13:41.340
那个环境

13:41.340 --> 13:43.340
进行我们的数据的操作

13:43.340 --> 13:45.340
因为我们只有一个

13:45.340 --> 13:47.340
test.jj55W

13:47.340 --> 13:48.340
紧接着

13:48.340 --> 13:49.340
第一步完成了

13:49.340 --> 13:50.340
那么第二步

13:50.340 --> 13:51.340
我不关了

13:51.340 --> 13:52.340
第二步的话

13:52.340 --> 13:55.340
那么对于我们现在的

13:55.340 --> 13:57.340
整个的程序来讲

13:57.340 --> 13:58.340
云含数的开发

13:58.340 --> 13:59.340
和

13:59.340 --> 14:01.340
微信小程序的开发

14:01.340 --> 14:02.340
和我们现在的

14:02.340 --> 14:04.340
npview就不太一样了

14:04.340 --> 14:06.340
这点要注意的是

14:06.340 --> 14:08.340
对于微信小程序来讲

14:08.340 --> 14:10.340
它需要的是

14:10.340 --> 14:11.340
第二步是

14:11.340 --> 14:13.340
设置云含数的目录

14:13.340 --> 14:15.340
那么它的做法

14:15.340 --> 14:16.340
其实本身来讲

14:16.340 --> 14:17.340
还是比较简单

14:17.340 --> 14:20.340
它是打开我们的src

14:20.340 --> 14:21.340
然后

14:21.340 --> 14:23.340
跑到我们原先

14:23.340 --> 14:24.340
所指定的

14:24.340 --> 14:26.340
就是我们原来有一个

14:26.340 --> 14:27.340
project.config.json

14:27.340 --> 14:29.340
这个文件

14:29.340 --> 14:31.340
原来我们小程序里面

14:31.340 --> 14:32.340
是有这个文件的

14:32.340 --> 14:33.340
然后在这下面

14:33.340 --> 14:35.340
我们去指定

14:35.340 --> 14:37.340
我们以前老放在外面

14:37.340 --> 14:38.340
所以呢

14:38.340 --> 14:39.340
我们这边可以指定

14:39.340 --> 14:42.340
我们的config.json的一个

14:42.340 --> 14:43.340
根目录

14:43.340 --> 14:45.340
就是我们称之为的是clouder

14:45.340 --> 14:47.340
以前我们是这么做的

14:47.340 --> 14:49.340
你用原生写法

14:49.340 --> 14:52.970
你就是像我这样写

14:52.970 --> 14:53.970
root

14:53.970 --> 14:54.970
叫做

14:54.970 --> 14:56.970
云含数根目录

14:56.970 --> 14:58.970
然后你在后面写上

14:58.970 --> 15:04.970
static

15:04.970 --> 15:06.970
functions

15:06.970 --> 15:07.970
好

15:07.970 --> 15:08.970
那么正常情况下

15:08.970 --> 15:09.970
如果你这样写完

15:09.970 --> 15:11.970
config.json保存

15:11.970 --> 15:12.970
现在你保存吧

15:12.970 --> 15:13.970
现在你保存

15:13.970 --> 15:15.970
它其实编译是没有问题的

15:15.970 --> 15:16.970
那么这个内容呢

15:16.970 --> 15:18.970
主要是让我们现在

15:18.970 --> 15:20.970
在根目录下

15:20.970 --> 15:21.970
我们可以去创建一个

15:21.970 --> 15:23.970
云含数的目录集

15:23.970 --> 15:25.970
然后让它去生成这个叫做

15:25.970 --> 15:26.970
我们的

15:26.970 --> 15:27.970
不是写这个

15:27.970 --> 15:28.970
我们写成

15:28.970 --> 15:29.970
那个

15:29.970 --> 15:33.540
就可以随便写一个目录

15:33.540 --> 15:36.230
就这个

15:36.230 --> 15:38.230
cloud functions

15:38.230 --> 15:40.230
那么它会自己去完成

15:40.230 --> 15:42.230
这个目录的创建

15:42.230 --> 15:44.230
它会去完成这个目录的创建

15:44.230 --> 15:46.230
是这个逻辑

15:46.230 --> 15:47.230
那么

15:47.230 --> 15:48.230
但是呢

15:48.230 --> 15:50.230
在我们的整个这个代码中

15:50.230 --> 15:51.230
它是没有的

15:51.230 --> 15:53.230
它是没有创建出来

15:53.230 --> 15:54.230
那么此时呢

15:54.230 --> 15:56.230
如果你自行的

15:56.230 --> 15:58.230
到我们的

15:58.230 --> 16:00.230
小程序里面去去创建一下

16:00.230 --> 16:01.230
你来看一下

16:02.230 --> 16:04.230
打开小程序

16:05.230 --> 16:07.230
我们打开我们的小程序

16:07.230 --> 16:11.760
正常的云开发

16:11.760 --> 16:12.760
一共是那个

16:12.760 --> 16:13.760
三步曲

16:13.760 --> 16:14.760
第一步

16:14.760 --> 16:16.760
就是我们刚才说的

16:16.760 --> 16:19.760
跑到我们现在的初始化

16:19.760 --> 16:20.760
我们初始化

16:20.760 --> 16:21.760
刚才第一步完成了

16:21.760 --> 16:23.760
在我们的app

16:24.760 --> 16:25.760
的

16:25.760 --> 16:26.760
gs 下面

16:26.760 --> 16:27.760
在我们的gs 下面

16:27.760 --> 16:28.760
完成的

16:28.760 --> 16:29.760
第二步呢

16:29.760 --> 16:31.760
跑到我们现在的

16:31.760 --> 16:33.760
project.config.json 里面

16:33.760 --> 16:34.760
做这一步

16:34.760 --> 16:35.760
第三步呢

16:35.760 --> 16:37.760
它是在根目录下

16:37.760 --> 16:38.760
去创建一个

16:38.760 --> 16:42.390
我们的这个名称

16:42.390 --> 16:44.390
那就是clouder

16:44.390 --> 16:53.980
你去做这个动作

16:53.980 --> 16:57.440
当你创建好以后

16:57.440 --> 17:05.230
你再次编译

17:05.230 --> 17:07.230
看我编译冲过了

17:07.230 --> 17:08.230
但是

17:08.230 --> 17:09.230
这个目录

17:09.230 --> 17:11.230
我们这边写好了

17:11.230 --> 17:13.230
它还是原来那个目录

17:13.230 --> 17:15.230
它还是原来那个

17:15.230 --> 17:17.230
它并没有完成

17:17.230 --> 17:18.230
我们现在的

17:18.230 --> 17:19.230
根文件的创建

17:19.230 --> 17:20.230
这点要注意啊

17:20.230 --> 17:21.230
因为

17:21.230 --> 17:23.230
本身的这个文件结构

17:23.230 --> 17:24.230
已经是我们的

17:24.230 --> 17:25.230
npview的了

17:25.230 --> 17:26.230
所以

17:26.230 --> 17:27.230
这里写没用

17:27.230 --> 17:29.230
那么dister 里面呢

17:29.230 --> 17:30.230
微信里面呢

17:30.230 --> 17:31.230
你如果在这边写呢

17:31.230 --> 17:32.230
你再来看一下

17:32.230 --> 17:39.960
写functions

17:40.960 --> 17:41.960
再次编译

17:41.960 --> 17:50.260
这边也出来了

17:50.260 --> 17:52.260
但这边依然没用

17:52.260 --> 17:55.260
那么这里就要说明一个问题了

17:55.260 --> 17:57.260
原来的这三步曲

17:57.260 --> 17:58.260
里面有一步

17:58.260 --> 18:00.260
是在npview的框架里面

18:00.260 --> 18:01.260
是没有用的

18:01.260 --> 18:02.260
这个错不是

18:02.260 --> 18:04.260
这个错是它本身自己的那个

18:04.260 --> 18:06.260
样式里面

18:06.260 --> 18:07.260
这个模板里面的

18:07.260 --> 18:08.260
有一个图片没找到

18:08.260 --> 18:09.260
和我这个没关系

18:09.260 --> 18:10.260
那么发现

18:10.260 --> 18:12.260
它本身还是普通的

18:12.260 --> 18:14.260
我们知道云操作的云含数

18:14.260 --> 18:17.260
应该这个文件家有个云图标

18:17.260 --> 18:18.260
所以

18:18.260 --> 18:20.260
你这一步在这里的设置

18:20.260 --> 18:22.260
它其实不会影响你

18:22.260 --> 18:23.260
现在在这里

18:23.260 --> 18:26.260
所生成一个云含数目录的

18:26.260 --> 18:27.260
那么这该怎么办呢

18:27.260 --> 18:30.260
那么我们在这边也不用去加了

18:30.260 --> 18:34.260
那么需要我们自行来做一个操作了

18:34.260 --> 18:35.260
首先第一点

18:35.260 --> 18:37.260
我们可以在这边写

18:37.260 --> 18:38.260
那么我们也可以

18:38.260 --> 18:40.260
额外的在其他地方

18:40.260 --> 18:42.260
我们这边统一一下吧

18:42.260 --> 18:44.260
就是如果你现在是

18:44.260 --> 18:46.260
在我们npview里面写的话

18:46.260 --> 18:49.260
那么我们就到static里面去

18:49.260 --> 18:51.960
到static里面去

18:51.960 --> 18:53.960
咱们在static里面

18:53.960 --> 18:56.960
咱们新建一个functions文件家

18:56.960 --> 18:59.910
比如说

19:00.910 --> 19:01.910
普通文件家

19:01.910 --> 19:03.910
这是一个普通文件家

19:03.910 --> 19:04.910
然后

19:04.910 --> 19:07.910
把这个配置文件请注意了

19:07.910 --> 19:09.910
我们可以先写出来

19:09.910 --> 19:10.910
你记住啊

19:10.910 --> 19:11.910
先写出来

19:11.910 --> 19:15.910
static下的functions

19:15.910 --> 19:16.910
但是

19:16.910 --> 19:19.910
并不是在这个位置上写

19:19.910 --> 19:21.910
我们要想一下

19:21.910 --> 19:23.910
最后运行微信小程序

19:23.910 --> 19:25.910
它是在哪里进行运行的

19:25.910 --> 19:28.910
这是一个在编译过程中

19:28.910 --> 19:29.910
请记住

19:29.910 --> 19:31.910
这个project.config.json

19:31.910 --> 19:34.910
它并非是小程序自己的

19:34.910 --> 19:36.910
它是npview的

19:36.910 --> 19:38.910
它是npview的这个

19:38.910 --> 19:40.910
它长得和我们的那个

19:40.910 --> 19:42.910
我们的小程序那个很像

19:42.910 --> 19:44.910
所以我们导致的问题是在于

19:44.910 --> 19:47.910
我们在这边的编译写上去

19:47.910 --> 19:49.910
npview当然不能识别

19:49.910 --> 19:52.910
这样的一个cloud function root了

19:52.910 --> 19:54.910
所以我们要做成什么样呢

19:54.910 --> 19:55.910
我们要把它想到

19:55.910 --> 19:58.910
哪里是小程序的执行目录

19:58.910 --> 20:00.910
这边不是有吗

20:00.910 --> 20:03.910
miniprogram root代表小程序的跟目录

20:03.910 --> 20:05.910
是在dister的微信下面

20:05.910 --> 20:06.910
咱们去打开

20:06.910 --> 20:08.910
dister微信下面

20:08.910 --> 20:09.910
我们发现

20:09.910 --> 20:12.910
微信下面common通常目录

20:12.910 --> 20:14.910
component小程序组件

20:14.910 --> 20:17.910
pagers我们的页面

20:17.910 --> 20:19.910
static静态文件

20:19.910 --> 20:21.910
静态文件

20:21.910 --> 20:23.910
但是问题是这里没有

20:23.910 --> 20:24.910
对吧

20:24.910 --> 20:25.910
一个静态文件

20:25.910 --> 20:27.910
它也不会在这边生成

20:27.910 --> 20:29.910
所以我们在这里

20:29.910 --> 20:34.670
也得接一个functions

20:34.670 --> 20:37.670
然后我们注意了

20:37.670 --> 20:39.670
整个的小程序

20:39.670 --> 20:41.670
如果你打开原生的时候

20:41.670 --> 20:44.670
它是有这个project config json的

20:44.670 --> 20:46.670
所以我们的做法变成的是

20:46.670 --> 20:48.670
我们需要在跟目录下

20:48.670 --> 20:50.670
就系统的我们的这个

20:50.670 --> 20:52.670
叫做微信下面

20:52.670 --> 20:54.670
咱们去建一个

20:54.670 --> 20:56.670
project config json

20:56.670 --> 20:58.670
现在的微信下面

20:58.670 --> 21:00.670
然后的话

21:00.670 --> 21:01.670
右键

21:01.670 --> 21:03.670
新键文件

21:03.670 --> 21:08.180
咱们写上project

21:08.180 --> 21:11.180
config.json

21:11.180 --> 21:13.180
新键这文件出来

21:13.180 --> 21:15.180
然后在这里面

21:15.180 --> 21:16.180
我们就把它的

21:16.180 --> 21:17.180
它是个json格式

21:17.180 --> 21:18.180
所以我们就是一个

21:18.180 --> 21:19.180
json格式

21:19.180 --> 21:21.180
但是我们只要这句话

21:21.180 --> 21:24.550
我们把它拿过来

21:25.550 --> 21:27.550
这时候你保存

21:27.550 --> 21:29.550
保存完以后

21:29.550 --> 21:32.550
那么为了让它能够重新变异

21:32.550 --> 21:34.550
我们需要重启一下

21:34.550 --> 21:35.550
那么重启的时候

21:35.550 --> 21:36.550
我们说过

21:36.550 --> 21:38.550
最好的方式是把它给先关了

21:38.550 --> 21:39.550
然后呢

21:39.550 --> 21:41.550
我们把它

21:41.550 --> 21:52.420
重新启动一下

21:52.420 --> 21:53.420
重新启动一下

21:53.420 --> 21:54.420
重启好以后

21:54.420 --> 21:56.420
我们再把小程序打开

21:56.420 --> 21:59.920
这是语音关掉了

21:59.920 --> 22:01.920
那么我们把小程序打开

22:01.920 --> 22:12.940
在这里

22:12.940 --> 22:13.940
此时你再来看

22:13.940 --> 22:15.940
这个小程序里面的结构

22:15.940 --> 22:17.940
我们来对照一下

22:17.940 --> 22:36.710
打开一下

22:36.710 --> 22:37.710
打开了

22:37.710 --> 22:38.710
注意

22:38.710 --> 22:39.710
我们名称注意

22:39.710 --> 22:40.710
是functions

22:40.710 --> 22:41.710
你注意

22:41.710 --> 22:44.710
它在这边会改变一个目录结构了

22:44.710 --> 22:45.710
看到吗

22:45.710 --> 22:47.710
它会改变这个目录结构

22:47.710 --> 22:49.710
写成functions

22:49.710 --> 22:50.710
在这种情况下

22:50.710 --> 22:51.710
我们就代表着

22:51.710 --> 22:53.710
它就变成了我们的一个

22:53.710 --> 22:55.710
我们的一个什么

22:55.710 --> 22:57.710
云寒树目录了

22:57.710 --> 22:59.710
它就是一个云寒树目录了

22:59.710 --> 23:01.710
所以这一点大家需要明确

23:01.710 --> 23:04.710
云寒树目录的创建

23:04.710 --> 23:07.710
我们可以通过相材的这种方式

23:07.710 --> 23:08.710
那么

23:08.710 --> 23:10.710
本身在mpv中的云寒树

23:10.710 --> 23:12.710
本身自己注意啊

23:12.710 --> 23:13.710
它没有所谓的

23:13.710 --> 23:15.710
是一个

23:15.710 --> 23:17.710
马上自动生成的部分

23:17.710 --> 23:19.710
需要我们手动来完成

23:19.710 --> 23:22.710
我们需要在我们的这个

23:22.710 --> 23:23.710
如果说

23:23.710 --> 23:24.710
你建立一个

23:24.710 --> 23:26.710
我们的static functions

23:26.710 --> 23:27.710
同时

23:27.710 --> 23:28.710
根据不同版本

23:28.710 --> 23:29.710
为了确保

23:29.710 --> 23:31.710
我们在这里也建立一个

23:31.710 --> 23:33.710
这两个都是可以编辑到

23:33.710 --> 23:35.710
第二去确保你现在

23:35.710 --> 23:37.710
在你的static下面

23:37.710 --> 23:39.710
有这个function文件家

23:39.710 --> 23:40.710
对吧

23:40.710 --> 23:41.710
有这个function文件家

23:41.710 --> 23:42.710
然后呢

23:42.710 --> 23:44.710
再完成你确保你的配置文件

23:44.710 --> 23:45.710
是正确的

23:45.710 --> 23:47.710
那么这样好了以后

23:47.710 --> 23:49.710
那么你再打开你现在的

23:49.710 --> 23:50.710
英雄

23:50.710 --> 23:52.710
那个我们的这个

23:52.710 --> 23:53.710
微信小程序

23:53.710 --> 23:54.710
你能发现

23:54.710 --> 23:56.710
它的文件家变了

23:56.710 --> 23:57.710
看到吗

23:57.710 --> 23:59.710
它变成了一个tester

23:59.710 --> 24:01.710
function

24:01.710 --> 24:02.710
那就代表着

24:02.710 --> 24:03.710
它已经连接到了

24:03.710 --> 24:04.710
我们的tester

24:04.710 --> 24:05.710
这一个

24:05.710 --> 24:07.710
所谓的测试库

24:07.710 --> 24:08.710
我们其实

24:08.710 --> 24:10.710
这个库就叫tester

24:10.710 --> 24:11.710
对吧

24:11.710 --> 24:12.710
环境

24:12.710 --> 24:13.710
那么紧接着

24:13.710 --> 24:14.710
我们就开始

24:14.710 --> 24:15.710
在里面

24:15.710 --> 24:17.710
可以书写我们的

24:17.710 --> 24:18.710
测试代码了

24:18.710 --> 24:19.710
首先

24:19.710 --> 24:20.710
我们可以写一下

24:20.710 --> 24:21.710
我们现在

24:21.710 --> 24:23.710
创建一个云寒树的结构

24:23.710 --> 24:26.710
我们首先对它进行右键

24:26.710 --> 24:28.710
然后新建node.js云寒树

24:28.710 --> 24:30.710
新建node.js云寒树

24:31.710 --> 24:33.710
你可以写一个

24:33.710 --> 24:34.710
比如说

24:34.710 --> 24:36.710
我写一个user

24:36.710 --> 24:40.430
用户

24:40.430 --> 24:42.430
他说用户已经存在

24:42.430 --> 24:43.430
那我们改一个

24:43.430 --> 24:45.430
我们改一个名称

24:45.430 --> 24:46.430
我命名

24:46.430 --> 24:52.260
我叫做

24:52.260 --> 24:57.300
userinfo

24:57.300 --> 24:58.300
userinfo

24:58.300 --> 24:59.300
userinfo出来以后

24:59.300 --> 25:02.300
下面会自动生成两个文件

25:02.300 --> 25:03.300
第一文件就是我们的

25:03.300 --> 25:05.300
可编辑入口文件

25:05.300 --> 25:07.300
第二文件是它的配置结构文件

25:07.300 --> 25:09.300
这个文件暂时可以不用管

25:09.300 --> 25:10.300
那么

25:10.300 --> 25:13.300
对于我们现在的index这个文件来讲

25:13.300 --> 25:14.300
咱们看

25:14.300 --> 25:15.300
新农给了一个

25:15.300 --> 25:17.300
云端的基础入口代码

25:17.300 --> 25:18.300
首先

25:18.300 --> 25:19.300
我们看到

25:19.300 --> 25:20.300
这边有一个

25:20.300 --> 25:21.300
在云端

25:21.300 --> 25:22.300
它会使用

25:22.300 --> 25:23.300
微信server SDK

25:23.300 --> 25:24.300
来完成你的

25:24.300 --> 25:25.300
所有的操作

25:25.300 --> 25:26.300
那么这个文件

25:26.300 --> 25:29.300
是在node.model下面

25:29.300 --> 25:30.300
云端需要你

25:30.300 --> 25:32.300
本身把本地一起传上去

25:32.300 --> 25:33.300
当然

25:33.300 --> 25:35.300
我们只要是对着它右键

25:35.300 --> 25:36.300
你可以上传所有文件

25:36.300 --> 25:38.300
它就会自动传上去

25:38.300 --> 25:39.300
它会问你

25:39.300 --> 25:41.300
它会有一个确认按钮

25:41.300 --> 25:42.300
然后问你

25:42.300 --> 25:43.300
是否要上传

25:43.300 --> 25:45.300
你点确定就可以了

25:45.300 --> 25:46.300
第二步

25:46.300 --> 25:49.300
有个初始化云端初始化功能

25:49.300 --> 25:50.300
在下面

25:50.300 --> 25:52.300
这就是异步操作

25:52.300 --> 25:53.300
它指的是

25:53.300 --> 25:54.300
我们现在云端

25:54.300 --> 25:55.300
有一个事件

25:55.300 --> 25:57.300
有一个我们的内容

25:57.300 --> 25:58.300
这个都是我们之前

25:58.300 --> 26:00.300
在讲云含数时候的

26:00.300 --> 26:03.300
注意这里

26:03.300 --> 26:04.300
云含数在默认

26:04.300 --> 26:06.300
给出失利以后

26:06.300 --> 26:07.300
为什么要给这个

26:07.300 --> 26:10.300
它其实就会直接帮你

26:10.300 --> 26:11.300
把你现在的

26:11.300 --> 26:12.300
OpenID

26:12.300 --> 26:13.300
进行返回

26:13.300 --> 26:14.300
它直接会帮助你

26:14.300 --> 26:16.300
把现在的OpenID

26:16.300 --> 26:17.300
进行返回

26:17.300 --> 26:18.300
对我们来讲的话

26:18.300 --> 26:19.300
我们只需要

26:19.300 --> 26:21.300
去得到当前的OpenID

26:21.300 --> 26:22.300
你就可以去操作

26:22.300 --> 26:24.300
拿出我现在

26:24.300 --> 26:25.300
个人的

26:25.300 --> 26:27.300
所有数据库的数据

26:27.300 --> 26:28.300
这个内容

26:28.300 --> 26:29.300
都是可以的

26:29.300 --> 26:31.300
那么我们现在先做第一步

26:31.300 --> 26:32.300
我们去获得

26:32.300 --> 26:35.300
你现在这个OpenID的内容

26:35.300 --> 26:36.300
对吧

26:36.300 --> 26:37.300
我们从哪儿走呢

26:37.300 --> 26:38.300
我们现在继续来注意

26:38.300 --> 26:40.300
当你写完它以后的话

26:40.300 --> 26:42.300
你一定得做一步

26:42.300 --> 26:43.300
我们注意

26:43.300 --> 26:44.300
这上面有几个功能

26:44.300 --> 26:46.300
需要简单说一下

26:46.300 --> 26:47.300
这是新建

26:47.300 --> 26:48.300
刚才我们做了

26:48.300 --> 26:49.300
因为它本身

26:49.300 --> 26:52.300
云端中的NodeGIS等写法

26:52.300 --> 26:53.300
第二个

26:53.300 --> 26:55.300
就是同步云含数列表

26:55.300 --> 26:56.300
所谓的同步

26:56.300 --> 26:57.300
其实就是

26:57.300 --> 26:59.300
你点开云开发的时候

26:59.300 --> 27:02.300
我们原先已经在云含数里面

27:02.300 --> 27:04.300
见过那么多的一些含数了

27:04.300 --> 27:06.300
你想把这些含数

27:06.300 --> 27:08.300
全部下载到你本地来

27:08.300 --> 27:10.300
那么你就可以点一下

27:10.300 --> 27:11.300
你看我现在

27:11.300 --> 27:12.300
同步一下

27:12.300 --> 27:13.300
看到吗

27:13.300 --> 27:15.300
它就全部会下载到你本地

27:15.300 --> 27:17.300
你就可以在它里面

27:17.300 --> 27:18.300
不用开开它

27:18.300 --> 27:20.300
你可以在它里面

27:20.300 --> 27:21.300
单独的进行修改

27:21.300 --> 27:23.300
你可以拿到这里面

27:23.300 --> 27:24.300
所有的

27:24.300 --> 27:25.300
有些我之前已经删掉了

27:26.300 --> 27:28.300
那么你可以这样去拿到数据的

27:28.300 --> 27:29.300
记住吗

27:29.300 --> 27:31.300
云含数同步到本地

27:31.300 --> 27:32.300
那么还有的

27:32.300 --> 27:34.300
就是本地调试

27:34.300 --> 27:35.300
本地调试的话

27:35.300 --> 27:37.300
其实我们说

27:37.300 --> 27:39.300
它其实是在你本地去

27:39.300 --> 27:40.300
布一个环境

27:40.300 --> 27:42.300
然后让你本地进行

27:42.300 --> 27:43.300
这方面的调试

27:43.300 --> 27:44.300
其实我们并不需要

27:44.300 --> 27:45.300
我们可以这样

27:45.300 --> 27:47.300
点开你现在的

27:47.300 --> 27:49.300
云控制平台

27:49.300 --> 27:51.300
点击云含数

27:51.300 --> 27:53.300
这边后面有一个云测试

27:54.300 --> 27:56.300
你可以直接点击

27:56.300 --> 27:57.300
这个云测试

27:57.300 --> 27:59.300
针对当前的这个函数

27:59.300 --> 28:00.300
那么它会告诉你

28:00.300 --> 28:02.300
你需要传一个

28:02.300 --> 28:03.300
什么数据给它

28:03.300 --> 28:04.300
如果你传好数据了

28:04.300 --> 28:05.300
你点运行

28:05.300 --> 28:06.300
那么这个数据

28:06.300 --> 28:08.300
类似于客户端的传送

28:08.300 --> 28:09.300
然后你云端的话

28:09.300 --> 28:10.300
你就会把数据

28:10.300 --> 28:11.300
返回在这

28:11.300 --> 28:13.300
进行一个模拟的数据交互

28:13.300 --> 28:15.300
这个是可以做到的

28:15.300 --> 28:17.300
所以我们直接用这个

28:17.300 --> 28:18.300
就可以看到

28:20.300 --> 28:21.300
那么回来

28:21.300 --> 28:22.300
那么现在的话

28:22.300 --> 28:23.300
我们已经

28:23.300 --> 28:24.300
编写了这个代码

28:24.300 --> 28:25.300
请注意

28:25.300 --> 28:26.300
这个代码的格式

28:26.300 --> 28:27.300
也就是图标

28:27.300 --> 28:29.300
和其他几个是不一样的

28:29.300 --> 28:30.300
因为你其实是在

28:30.300 --> 28:32.300
本地创建了它

28:32.300 --> 28:34.300
所以我们要做的情况是

28:34.300 --> 28:38.300
把它进行云安装依赖

28:38.300 --> 28:42.730
云安装依赖

28:42.730 --> 28:44.730
以及我们操作完以后

28:44.730 --> 28:46.730
也可以部署所有文件

28:46.730 --> 28:47.730
点确定

28:47.730 --> 28:52.020
它告诉你

28:52.020 --> 28:53.020
上面有个函数据存在

28:53.020 --> 28:54.020
没关系

28:54.020 --> 28:55.020
因为刚才我们前面

28:55.020 --> 28:56.020
已经传过了

28:56.020 --> 28:57.020
所以那个

28:57.020 --> 28:58.020
微信

28:58.020 --> 28:59.020
Server SDK就不用了

28:59.020 --> 29:00.020
但是你发现

29:00.020 --> 29:01.020
我点完这个以后

29:01.020 --> 29:03.020
前面的图标已经变了

29:03.020 --> 29:04.020
是不是

29:04.020 --> 29:05.020
图标已经变了

29:05.020 --> 29:06.020
我们再打开

29:06.020 --> 29:08.020
我们现在的云寒数

29:08.020 --> 29:11.020
我们通过云寒数目录

29:11.020 --> 29:12.020
下面去找

29:12.020 --> 29:14.020
是不是有这个邮车Info了

29:14.020 --> 29:15.020
那代表的是

29:15.020 --> 29:16.020
我这个邮车Info

29:16.020 --> 29:19.020
已经上传到云寒数几里了

29:19.020 --> 29:20.020
那我就可以在这

29:20.020 --> 29:21.020
直接完成

29:21.020 --> 29:23.020
我现在的调用了

29:23.020 --> 29:24.020
OK

29:24.020 --> 29:25.020
我们来看

29:25.020 --> 29:26.020
接下去

29:26.020 --> 29:28.020
我们就直接来到页面中

29:28.020 --> 29:30.020
我们不去修改页面内容

29:30.020 --> 29:32.020
我们只是要获取这个数据

29:32.020 --> 29:33.020
我们先看一下

29:33.020 --> 29:34.020
OpenID的获取

29:34.020 --> 29:36.020
先拿数据获取来看

29:36.020 --> 29:38.460
这是系统给到的

29:38.460 --> 29:39.460
默认测试页面

29:39.460 --> 29:40.460
对吧

29:40.460 --> 29:41.460
我们先不管这些内容

29:41.460 --> 29:42.460
然后呢

29:42.460 --> 29:43.460
我们在哪里做呢

29:43.460 --> 29:45.460
我们在它的生命周期函数里

29:45.460 --> 29:46.460
来看

29:46.460 --> 29:47.460
接下去

29:47.460 --> 29:49.460
我们就直接来到页面中

29:49.460 --> 29:50.460
我们不去修改页面内容

29:50.460 --> 29:51.460
我们只是要获取这个数据

29:51.460 --> 29:52.460
我们先看一下

29:52.460 --> 29:53.460
OpenID的获取

29:53.460 --> 29:55.460
先拿数据获取来看

29:55.460 --> 29:57.460
我们在它的生命周期函数里面

29:57.460 --> 29:59.460
在它的生命周期里面

29:59.460 --> 30:01.460
那微信的云函数操作

30:01.460 --> 30:03.460
我们就单独的给它做一个

30:03.460 --> 30:07.670
我们的Unloader

30:07.670 --> 30:16.620
我们单独给它做一个Unloader

30:16.620 --> 30:17.620
生命周期

30:17.620 --> 30:25.110
调用

30:25.110 --> 30:26.110
诶

30:26.110 --> 30:27.110
不是这样

30:27.110 --> 30:37.100
我们写Unloader

30:37.100 --> 30:41.120
调用云函数

30:41.120 --> 30:42.120
首先第一点

30:42.120 --> 30:43.120
还是一样

30:43.120 --> 30:45.120
我们需要在最外面

30:45.120 --> 30:49.330
云函数的设定

30:49.330 --> 30:50.330
Constar

30:50.330 --> 30:52.330
DB

30:52.330 --> 30:54.330
微信点

30:54.330 --> 30:56.330
Clouder

30:56.330 --> 31:00.020
Ditabase

31:00.020 --> 31:01.020
ENV

31:01.020 --> 31:04.100
然后我们告诉它

31:04.100 --> 31:06.100
我现在是做的是Tester

31:06.100 --> 31:07.100
中钢

31:07.100 --> 31:08.100
JJ55W的

31:08.100 --> 31:09.100
这个集合

31:09.100 --> 31:11.100
这个环境

31:11.100 --> 31:13.100
然后我们在Unloader中

31:13.100 --> 31:15.100
获取云函数的操作

31:15.100 --> 31:16.100
云函数是这样

31:16.100 --> 31:17.100
微信点

31:17.100 --> 31:19.100
Clouder

31:19.100 --> 31:20.100
调用Call

31:20.100 --> 31:22.100
Function

31:22.100 --> 31:24.100
调用云函数

31:24.100 --> 31:25.100
云函数里面

31:25.100 --> 31:27.100
我们要给一个杰森对象

31:27.100 --> 31:28.100
这个对象

31:28.100 --> 31:29.100
请你给出

31:29.100 --> 31:30.100
云函数的

31:30.100 --> 31:32.100
你要调哪个的名称

31:32.100 --> 31:33.100
那我们叫做什么

31:33.100 --> 31:35.100
UseInfo

31:35.100 --> 31:36.100
对不对

31:36.100 --> 31:37.100
那么当你现在把这名称

31:37.100 --> 31:38.100
给出以后的话

31:38.100 --> 31:39.100
那么现在来

31:39.100 --> 31:40.100
Den

31:40.100 --> 31:41.100
我们说

31:41.100 --> 31:43.100
一旦接收到数据以后

31:43.100 --> 31:44.100
我们把它

31:44.100 --> 31:46.100
做一个res的返回

31:46.100 --> 31:47.100
我们在这边

31:47.100 --> 31:49.100
做一个res

31:49.100 --> 31:51.540
好

31:51.540 --> 31:52.540
那么我们e意味着

31:52.540 --> 31:53.540
打开这个页面

31:53.540 --> 31:55.540
它应该就会有数据看到

31:55.540 --> 31:58.980
打开

31:58.980 --> 31:59.980
这边有一个错

31:59.980 --> 32:00.980
我们来解决一下

32:00.980 --> 32:02.980
它指的是

32:02.980 --> 32:07.660
云函数

32:07.660 --> 32:09.660
云函数的一个ID

32:09.660 --> 32:10.660
我们来看一下

32:10.660 --> 32:13.660
它这个指的是哪一个问题

32:13.660 --> 32:15.660
下面这个不用管

32:15.660 --> 32:17.980
到这个名称

32:17.980 --> 32:19.980
我们来找一下

32:19.980 --> 32:22.980
是我们写错一个吗

32:22.980 --> 32:23.980
USRE

32:23.980 --> 32:24.980
我们写的是

32:24.980 --> 32:25.980
USRE

32:25.980 --> 32:27.980
我们就拿错误的名称

32:27.980 --> 32:29.980
来做一下

32:29.980 --> 32:30.980
US12

32:30.980 --> 32:31.980
US12

32:31.980 --> 32:32.980
对吧

32:32.980 --> 32:37.270
换一下

32:37.270 --> 32:38.270
我们再来看一下

32:38.270 --> 32:43.700
加载

32:43.700 --> 32:44.700
这个错不用看

32:44.700 --> 32:45.700
这个是一系统的

32:45.700 --> 32:47.700
我们看这个

32:47.700 --> 32:49.700
这个是不是一个call function

32:49.700 --> 32:51.700
也就意味着云函数的ok

32:51.700 --> 32:53.700
调用成功

32:53.700 --> 32:54.700
有个requestID

32:54.700 --> 32:55.700
不用管

32:55.700 --> 32:56.700
它主要是返回

32:56.700 --> 32:57.700
自动的一个ID格式

32:57.700 --> 32:59.700
然后我们主要关心的是

32:59.700 --> 33:00.700
result

33:00.700 --> 33:01.700
这result里面

33:01.700 --> 33:03.700
是不是返回了我现在的

33:03.700 --> 33:04.700
看

33:04.700 --> 33:05.700
APPID

33:05.700 --> 33:06.700
看我这

33:06.700 --> 33:07.700
是不是

33:07.700 --> 33:08.700
找一下

33:08.700 --> 33:09.700
对吗

33:09.700 --> 33:10.700
这个和这个

33:10.700 --> 33:12.700
是不是一样的

33:12.700 --> 33:13.700
两个APPID

33:13.700 --> 33:14.700
第二

33:14.700 --> 33:16.700
这里有我的OpenID

33:16.700 --> 33:17.700
OpenID是什么

33:17.700 --> 33:19.700
OFJ444

33:19.700 --> 33:20.700
那么我们现在

33:20.700 --> 33:21.700
到云端看一下

33:21.700 --> 33:22.700
我是不是通过

33:22.700 --> 33:24.700
它能够进行数据上传

33:24.700 --> 33:25.700
一旦数据上传

33:25.700 --> 33:26.700
手会自动生成

33:26.700 --> 33:27.700
我们看一下

33:27.700 --> 33:28.700
三里面

33:28.700 --> 33:29.700
是不是

33:29.700 --> 33:30.700
OFJ444

33:30.700 --> 33:31.700
那么这个就是

33:31.700 --> 33:33.700
我们的OpenID的获取

33:33.700 --> 33:34.700
这样的话

33:34.700 --> 33:35.700
我就不需要通过

33:35.700 --> 33:36.700
原生的那种

33:36.700 --> 33:37.700
什么secret

33:37.700 --> 33:38.700
然后

33:38.700 --> 33:39.700
给出我们的

33:39.700 --> 33:41.700
什么authentication coder

33:41.700 --> 33:42.700
这些内容来做了

33:42.700 --> 33:43.700
我只需要

33:43.700 --> 33:45.700
用云端的这个写法

33:45.700 --> 33:47.700
我返回OpenID以后

33:47.700 --> 33:49.700
那么我可以

33:49.700 --> 33:50.700
再去获取到

33:50.700 --> 33:52.700
我现在这里边的数据结构

33:52.700 --> 33:53.700
对吧

33:53.700 --> 33:54.700
我们说

33:54.700 --> 33:57.700
只要我拿到了OpenID

33:57.700 --> 33:59.700
我就可以把它存下来

33:59.700 --> 34:00.700
然后后期的话

34:00.700 --> 34:01.700
我就可以

34:01.700 --> 34:03.700
利用这个OpenID

34:03.700 --> 34:05.700
去从云数据库里面

34:05.700 --> 34:06.700
获取

34:06.700 --> 34:07.700
我自己的数据

34:07.700 --> 34:08.700
因为

34:08.700 --> 34:09.700
每条数据里面

34:09.700 --> 34:10.700
都会有

34:10.700 --> 34:12.700
所谓的OpenID的识别

34:12.700 --> 34:13.700
对吧

34:13.700 --> 34:14.700
OK

34:14.700 --> 34:16.700
我们现在先把这个放着

34:16.700 --> 34:17.700
然后呢

34:17.700 --> 34:18.700
一旦拿到了

34:18.700 --> 34:20.700
我们后面就做页面就好做了

34:20.700 --> 34:21.700
我们页面的做法

34:21.700 --> 34:22.700
上面其实很简单

34:22.700 --> 34:23.700
我们希望的是

34:23.700 --> 34:25.700
获取当前

34:25.700 --> 34:27.700
我个人的数据

34:27.700 --> 34:28.700
OK

34:28.700 --> 34:33.950
我们把页面清一下

34:33.950 --> 34:35.950
开始做我们的

34:35.950 --> 34:36.950
既然拿到了

34:36.950 --> 34:49.740
所以再做一次数据顾讨做

34:49.740 --> 34:51.740
这个不要动

34:51.740 --> 35:03.050
我们把下面的

35:03.050 --> 35:13.870
删除

35:13.870 --> 35:14.870
好

35:14.870 --> 35:15.870
很干净吧

35:15.870 --> 35:16.870
页面进来以后

35:16.870 --> 35:18.870
直接看到了res

35:18.870 --> 35:19.870
然后在这里面

35:19.870 --> 35:23.340
我们写上

35:23.340 --> 35:29.940
my

35:29.940 --> 35:31.940
myOpenID

35:31.940 --> 35:33.940
写出这个字来

35:33.940 --> 35:34.940
那么我们把

35:34.940 --> 35:35.940
它直接拿过来

35:35.940 --> 35:37.940
我们也依然看到

35:37.940 --> 35:38.940
这个字的话呢

35:38.940 --> 35:39.940
它的来源

35:39.940 --> 35:41.940
是通过我们的

35:41.940 --> 35:43.940
result

35:43.940 --> 35:44.940
点OpenID

35:44.940 --> 35:45.940
对不对

35:45.940 --> 35:46.940
result点OpenID

35:46.940 --> 35:59.270
把它直接放在

35:59.270 --> 36:01.270
我们的这个myOpenID里面

36:01.270 --> 36:16.450
Z点

36:16.450 --> 36:20.850
myOpenID

36:20.850 --> 36:26.780
Z点myOpenID

36:26.780 --> 36:27.780
这个结构

36:27.780 --> 36:28.780
紧接着

36:28.780 --> 36:30.780
我们一旦获取到了

36:30.780 --> 36:31.780
这个ID以后

36:31.780 --> 36:32.780
那么接下去

36:32.780 --> 36:33.780
页面这样

36:33.780 --> 36:34.780
做一个非常简单的结构

36:34.780 --> 36:36.780
我们不做页面布局了

36:36.780 --> 36:38.780
我们就是做一个Block

36:38.780 --> 36:43.910
循环

36:43.910 --> 36:55.250
然后呢

36:55.250 --> 36:58.880
这边我们写的是

36:58.880 --> 37:02.920
v4

37:02.920 --> 37:03.920
item

37:03.920 --> 37:07.740
我们称之为

37:07.740 --> 37:11.310
data list

37:11.310 --> 37:12.310
key

37:12.310 --> 37:14.310
index

37:14.310 --> 37:15.310
然后呢

37:15.310 --> 37:17.310
我们从这儿拿到

37:17.310 --> 37:19.310
它现在的所有数据

37:19.310 --> 37:22.310
第一个

37:22.310 --> 37:23.310
姓名

37:23.310 --> 37:37.280
item.nain

37:37.280 --> 37:40.360
年龄

37:40.360 --> 37:41.360
item.ager

37:41.360 --> 37:42.360
是吧

37:42.360 --> 37:44.360
我们就拿这两个出来

37:44.360 --> 37:46.360
然后data list

37:46.360 --> 37:52.100
是个素组

37:52.100 --> 37:55.100
那我们就得通过

37:55.100 --> 37:58.100
拿到它现在的myOpenID以后

37:58.100 --> 38:00.100
我们直接在这里面

38:00.100 --> 38:02.100
做

38:02.100 --> 38:03.100
获取

38:03.100 --> 38:07.780
或者我们直接

38:07.780 --> 38:08.780
我们不用在这儿

38:08.780 --> 38:09.780
我们做一个按钮吧

38:09.780 --> 38:11.780
我们做个按钮

38:11.780 --> 38:17.020
不要页面直接打开的时候

38:17.020 --> 38:21.120
button

38:21.120 --> 38:22.120
获取

38:22.120 --> 38:25.010
所有

38:25.010 --> 38:27.010
个人的

38:27.010 --> 38:36.980
数据

38:36.980 --> 38:45.940
click

38:45.940 --> 38:46.940
click data

38:46.940 --> 38:50.700
得到数据

38:50.700 --> 38:51.700
接下去我们来

38:51.700 --> 39:01.030
它依然使用这个data

39:01.030 --> 39:02.030
对吧

39:02.030 --> 39:05.240
db

39:05.240 --> 39:06.240
db已经指定了

39:06.240 --> 39:07.240
db.collection

39:07.240 --> 39:23.300
数据酷3

39:23.300 --> 39:24.300
我们可以这样

39:24.300 --> 39:31.380
我们可以给个way

39:31.380 --> 39:34.660
咱们写上

39:34.660 --> 39:37.420
openID

39:37.420 --> 39:38.420
等于

39:38.420 --> 39:43.790
this.myOpenID

39:43.790 --> 39:47.640
get

39:47.640 --> 39:48.640
写下面

39:48.640 --> 39:51.640
每个点都单写

39:51.640 --> 39:52.640
then

39:52.640 --> 39:53.640
res

39:53.640 --> 39:58.740
先看一下它的获取

39:58.740 --> 40:06.320
这时候打开我们的小程序

40:06.320 --> 40:08.320
对吧

40:08.320 --> 40:10.320
获取个人所有数据

40:10.320 --> 40:12.320
点一下

40:12.320 --> 40:13.320
是不是

40:13.320 --> 40:14.320
这边是不是有了

40:14.320 --> 40:16.320
两条记录

40:16.320 --> 40:17.320
这两条记录的

40:17.320 --> 40:18.320
openID

40:18.320 --> 40:19.320
是不是就是我的

40:19.320 --> 40:22.320
但是我在做这个页面的过程中

40:22.320 --> 40:23.320
最它进行点击时候

40:23.320 --> 40:25.320
我始终没有输过这个值

40:25.320 --> 40:27.320
那么这就是通过我刚才

40:27.320 --> 40:29.320
我们所谓的一个

40:29.320 --> 40:30.320
通过云含数

40:30.320 --> 40:32.320
来返回这个值的

40:33.320 --> 40:34.320
那么此时

40:34.320 --> 40:35.320
我们验证一下

40:35.320 --> 40:36.320
如果我在里面

40:36.320 --> 40:38.320
再添加一条记录

40:38.320 --> 40:40.320
我再添加一条记录

40:40.320 --> 40:42.320
这个ID你看

40:42.320 --> 40:43.320
它是不能输的

40:43.320 --> 40:44.320
你要改的话

40:44.320 --> 40:45.320
你直接这边输进去了

40:45.320 --> 40:46.320
就是

40:46.320 --> 40:47.320
我们添加一条

40:47.320 --> 40:48.320
然后呢

40:48.320 --> 40:49.320
我们写上一个

40:49.320 --> 40:50.320
随便写什么

40:50.320 --> 40:51.320
我们说

40:51.320 --> 40:52.320
这些字段

40:52.320 --> 40:54.320
咱们称之为

40:54.320 --> 40:55.320
这个值呢

40:55.320 --> 40:56.320
我们称之为叫

40:56.320 --> 40:58.320
jack

40:58.320 --> 40:59.320
然后再来一个

40:59.320 --> 41:00.320
ager

41:00.320 --> 41:02.320
它是25岁

41:02.320 --> 41:04.320
确定

41:04.320 --> 41:05.320
加了一条记录

41:05.320 --> 41:06.320
对不对

41:06.320 --> 41:07.320
但是这条记录呢

41:07.320 --> 41:08.320
它没有那个

41:08.320 --> 41:09.320
openID

41:09.320 --> 41:10.320
所以此时

41:10.320 --> 41:13.320
我们再来看一下

41:13.320 --> 41:14.320
再点一下

41:14.320 --> 41:17.320
是不是它还只能拿两条

41:17.320 --> 41:18.320
因为我们在里面

41:18.320 --> 41:19.320
限定了

41:19.320 --> 41:20.320
我们现在的

41:20.320 --> 41:22.320
要拿openID的

41:22.320 --> 41:23.320
那么如果你这是别的

41:23.320 --> 41:24.320
别人的openID

41:24.320 --> 41:25.320
那你就肯定取不到了

41:25.320 --> 41:26.320
对不对

41:26.320 --> 41:28.320
那么通过这个案例

41:28.320 --> 41:29.320
我们简单了解到了

41:29.320 --> 41:31.320
我们其实云寒树的

41:31.320 --> 41:32.320
书写方式

41:32.320 --> 41:33.320
是可以帮助我们

41:33.320 --> 41:36.320
获取一些特定数据

41:36.320 --> 41:38.320
比如说openID

41:38.320 --> 41:40.320
云寒树在打开的那一刻

41:40.320 --> 41:42.320
它本身新建的时候

41:42.320 --> 41:43.320
它也会完成

41:43.320 --> 41:46.320
一个openID的数据的返回

41:46.320 --> 41:47.320
因为它知道

41:47.320 --> 41:48.320
这个创建以后

41:48.320 --> 41:49.320
一定你们

41:49.320 --> 41:51.320
需要得到这个openID的

41:51.320 --> 41:52.320
那么你们看

41:52.320 --> 41:53.320
所以呢

41:53.320 --> 41:54.320
记住一下

41:54.320 --> 41:56.320
云寒树的创建

41:56.320 --> 41:58.320
你非得把它放在

41:58.320 --> 42:00.320
我们的微信 web 开发者工具里面

42:00.320 --> 42:02.320
对着我们的云寒树目录

42:02.320 --> 42:05.320
右键有新建 Node.js 云寒树的

42:05.320 --> 42:06.320
这个套作

42:06.320 --> 42:07.320
一新建以后

42:07.320 --> 42:09.320
它本身自带的 index.js

42:09.320 --> 42:11.320
就会出现这个结构

42:11.320 --> 42:12.320
我们不需要动

42:12.320 --> 42:13.320
我们只需要对着

42:13.320 --> 42:15.320
某个文件进行右键

42:15.320 --> 42:16.320
我们说

42:16.320 --> 42:18.320
上传所有文件吧

42:18.320 --> 42:19.320
这个的话也带在里面了

42:19.320 --> 42:20.320
上传所有文件

42:20.320 --> 42:21.320
然后他问你

42:21.320 --> 42:22.320
是不是要上传 WX

42:22.320 --> 42:24.320
Server SDK 你也确定

42:24.320 --> 42:26.320
它就把它这个云寒树传上去

42:26.320 --> 42:27.320
传上去以后

42:27.320 --> 42:29.320
云寒树里边查看一下

42:29.320 --> 42:30.320
是否有

42:30.320 --> 42:32.320
有的话那就 ok

42:32.320 --> 42:33.320
对吧

42:33.320 --> 42:35.320
然后你可以在这测试

42:35.320 --> 42:36.320
你看

42:36.320 --> 42:38.320
这边有模板

42:38.320 --> 42:39.320
我们不用管模板

42:39.320 --> 42:40.320
这个数据的话

42:40.320 --> 42:41.320
我们也没有数据

42:41.320 --> 42:42.320
是个空的

42:42.320 --> 42:44.320
然后现在你运行一下

42:44.320 --> 42:49.260
你会发现

42:49.260 --> 42:50.260
它后面

42:50.260 --> 42:52.260
会给你一堆的这样的

42:52.260 --> 42:53.260
它说调用成功

42:53.260 --> 42:54.260
对吧

42:54.260 --> 42:55.260
然后这里面的话

42:55.260 --> 42:57.260
我们现在没有数据

42:57.260 --> 42:58.260
所以 useinfo 的话

42:58.260 --> 42:59.260
我们

42:59.260 --> 43:00.260
它有 id

43:00.260 --> 43:01.260
返回结果

43:01.260 --> 43:02.260
在这里面

43:02.260 --> 43:03.260
它没有出现

43:03.260 --> 43:04.260
是吧

43:04.260 --> 43:06.260
那么我们再看一下

43:06.260 --> 43:09.260
就是云寒树的调用

43:09.260 --> 43:21.080
我们直接点测试

43:21.080 --> 43:23.080
它这比较慢

43:23.080 --> 43:25.080
它需要有刷新的功能

43:25.080 --> 43:26.080
它就慢

43:26.080 --> 43:27.080
我们只是

43:27.080 --> 43:28.080
还没出来

43:28.080 --> 43:30.080
那我就不等它出来了

43:30.080 --> 43:31.080
对吧

43:31.080 --> 43:32.080
我们看

43:32.080 --> 43:34.080
它返回结果上面

43:34.080 --> 43:35.080
注意

43:35.080 --> 43:36.080
它这个返回结果

43:36.080 --> 43:37.080
TestValue1

43:37.080 --> 43:38.080
TestValue2

43:38.080 --> 43:40.080
就是这个值

43:40.080 --> 43:42.080
它服务器有的这个值的返回

43:42.080 --> 43:43.080
就是

43:43.080 --> 43:45.580
那么我们需要的是

43:45.580 --> 43:47.580
我们这边可以给它一些值

43:47.580 --> 43:49.580
给它一些

43:49.580 --> 43:51.580
然后它再去做这方面的调用

43:51.580 --> 43:53.580
是这样的一个逻辑

43:53.580 --> 43:55.580
包括是它的运行环境配置

43:55.580 --> 43:56.580
这个的话

43:56.580 --> 43:57.580
我们可以看到

43:57.580 --> 44:00.580
我们可以自行的来进行设置

44:00.580 --> 44:01.580
一般性我们现在

44:01.580 --> 44:03.580
只需要你完成

44:03.580 --> 44:05.580
我们的云寒树

44:05.580 --> 44:06.580
这一端的

44:06.580 --> 44:07.580
我们可以新建模板

44:07.580 --> 44:09.580
新模板出来

44:09.580 --> 44:11.580
在拿这个叫做

44:11.580 --> 44:13.580
我们的微信ID的时候

44:13.580 --> 44:15.580
那么你现在这里面

44:15.580 --> 44:16.580
它有一个步骤

44:16.580 --> 44:17.580
它要拿到云端的

44:17.580 --> 44:19.580
得到你微信的

44:19.580 --> 44:21.580
Context上下文环境

44:21.580 --> 44:23.580
上下文环境是你必须要有

44:23.580 --> 44:26.580
这个微信的环境存在

44:26.580 --> 44:28.580
但是云直接测试这个的话

44:28.580 --> 44:30.580
应该我们是不需要传直的

44:30.580 --> 44:31.580
我们不需要传直

44:31.580 --> 44:33.580
它如果你要传直的话

44:33.580 --> 44:35.580
那么它会把这个值给返回

44:35.580 --> 44:36.580
不要传直的话

44:36.580 --> 44:37.580
这时候去运行测试的话

44:37.580 --> 44:38.580
就很简单

44:38.580 --> 44:39.580
它就会返回这个内容

44:39.580 --> 44:41.580
但是它需要运行环境

44:41.580 --> 44:43.580
所以对于OpenID的数据来说

44:43.580 --> 44:45.580
它不能在这边直接给出

44:45.580 --> 44:46.580
但是你如果直接说

44:46.580 --> 44:48.580
我写一个查找所有数据

44:48.580 --> 44:49.580
那么你在这给的话

44:49.580 --> 44:51.580
包括你写死

44:51.580 --> 44:52.580
你给它参数传过去

44:52.580 --> 44:54.580
那么它一定会给你数据返回

44:54.580 --> 44:55.580
是这个结构

44:55.580 --> 44:57.580
所以这个理解一下

44:57.580 --> 44:59.580
并不是所有的云测试都可以测

44:59.580 --> 45:00.580
因为它需要你有一个

45:00.580 --> 45:03.580
环境的上下文的确认

45:03.580 --> 45:04.580
那么包括是

45:04.580 --> 45:05.580
你可以新建模板

45:05.580 --> 45:07.580
这边新建一个也可以

45:07.580 --> 45:09.580
你可以自己改变一下

45:09.580 --> 45:11.580
里面的每次进来以后

45:11.580 --> 45:12.580
重新输

45:12.580 --> 45:13.580
好了

45:13.580 --> 45:14.580
那么我说明了

45:14.580 --> 45:16.580
并不是所有的都可以云测试

45:16.580 --> 45:18.580
因为有一些它需要上下文

45:18.580 --> 45:19.580
上下文的话

45:19.580 --> 45:21.580
你没办法在云端直接得到

45:21.580 --> 45:23.580
你当前这人是谁

45:23.580 --> 45:24.580
对吧

45:24.580 --> 45:25.580
因为我没有办法去做

45:25.580 --> 45:26.580
上下文的判断

45:26.580 --> 45:27.580
在云端的话

45:27.580 --> 45:28.580
那么但是你如果说

45:28.580 --> 45:30.580
直接是我给一个ID返回

45:30.580 --> 45:31.580
这条记录

45:31.580 --> 45:32.580
那么在云端

45:32.580 --> 45:33.580
这种测试是可以的

45:33.580 --> 45:34.580
好了

45:34.580 --> 45:36.580
那么这是说到第一点

45:36.580 --> 45:39.580
这是我们通过云函数的建立

45:39.580 --> 45:41.580
完成你现在的

45:41.580 --> 45:43.580
所谓的数据的返回

45:43.580 --> 45:44.580
什么数据

45:44.580 --> 45:45.580
OpenID

45:45.580 --> 45:47.580
这个是重要数据

45:47.580 --> 45:48.580
好

45:48.580 --> 45:50.580
先把第一个案例留一下

45:50.580 --> 45:51.580
第一个案例

45:51.580 --> 45:53.580
我们要创建云函数的步骤

45:53.580 --> 45:54.580
第一

45:54.580 --> 45:56.580
我们可以自行定义一个

45:56.580 --> 45:58.580
我们的云函数存储位

45:58.580 --> 45:59.580
那么我们把它

45:59.580 --> 46:00.580
现在定在Static

46:00.580 --> 46:02.580
下面的Functions里面

46:02.580 --> 46:03.580
第二

46:03.580 --> 46:04.580
那么这个位置

46:04.580 --> 46:07.580
我们一定要确保在Distr里面的

46:07.580 --> 46:08.580
Static Function

46:08.580 --> 46:09.580
因为最后

46:09.580 --> 46:10.580
它在编译的时候

46:10.580 --> 46:12.580
它最终是在我们的

46:12.580 --> 46:14.580
Static下面进行操作的

46:14.580 --> 46:15.580
微信下面

46:15.580 --> 46:17.580
第二个的话

46:17.580 --> 46:18.580
那么注意一下

46:18.580 --> 46:20.580
我们需要在我们当前的

46:20.580 --> 46:22.580
ProjectConfig.json里面

46:22.580 --> 46:24.580
我们设置一个当前的

46:24.580 --> 46:25.580
这个项

46:25.580 --> 46:28.580
就是我们所谓的云文件的跟目录

46:28.580 --> 46:31.580
为了确保我们正常情况下

46:31.580 --> 46:33.580
你也可以在Distr里面

46:33.580 --> 46:35.580
在这写一个我们的

46:35.580 --> 46:38.580
自行创建一个ProjectConfig.json

46:38.580 --> 46:39.580
当你这样做好以后

46:39.580 --> 46:41.580
你再次进行编译

46:41.580 --> 46:42.580
那么此时

46:42.580 --> 46:44.580
你就能在你的

46:44.580 --> 46:46.580
现在的微信开发的工具里面看到

46:46.580 --> 46:48.580
在这边看到

46:48.580 --> 46:50.580
这边会有这样的一个Functions

46:50.580 --> 46:53.580
后面跟上你现在云端的

46:53.580 --> 46:55.580
一个环境的名称

46:55.580 --> 46:56.580
并且这个目录

46:56.580 --> 46:58.580
变成了我们的一个云状

46:58.580 --> 47:00.580
然后我们说

47:00.580 --> 47:01.580
你可以在它上面

47:01.580 --> 47:02.580
我们右键

47:02.580 --> 47:04.580
新键Node.js

47:04.580 --> 47:05.580
我也可以

47:05.580 --> 47:06.580
像我那么多的话

47:06.580 --> 47:08.580
其实我是做了一个云寒书

47:08.580 --> 47:09.580
列表同步

47:09.580 --> 47:12.580
把云端的所有寒书同步下来

47:12.580 --> 47:14.580
你自己新键的寒书

47:14.580 --> 47:16.580
我们就可以在里面

47:16.580 --> 47:18.580
做我们代码级的操作

47:18.580 --> 47:19.580
系统会给你一个

47:19.580 --> 47:21.580
默认的一个代码

47:21.580 --> 47:22.580
这代码其实就是

47:22.580 --> 47:24.580
获取你个人的一些信息

47:24.580 --> 47:26.580
那么你自己可以在编写

47:26.580 --> 47:28.580
待会我们将编写

47:28.580 --> 47:30.580
就是自己去获取云端的

47:30.580 --> 47:31.580
一个数据户操作

47:31.580 --> 47:35.580
就是我们所谓的多数据更新操作

47:35.580 --> 47:37.580
我们看一下写法

47:37.580 --> 47:38.580
然后当你现在

47:38.580 --> 47:39.580
这里面比如说我现在

47:39.580 --> 47:40.580
就是拿OpenID

47:40.580 --> 47:41.580
我就不用改

47:41.580 --> 47:42.580
那么当你写完

47:42.580 --> 47:44.580
或者说你看好以后

47:44.580 --> 47:45.580
你对它右键

47:45.580 --> 47:47.580
然后上传部署所有文件

47:47.580 --> 47:49.580
把它放到云端去

47:49.580 --> 47:51.580
虽然你在云端目录下创建

47:51.580 --> 47:52.580
但是其实这个文件

47:52.580 --> 47:53.580
还在你本地

47:53.580 --> 47:55.580
你要把它右键放到云端

47:55.580 --> 47:57.580
云端放好以后

47:57.580 --> 47:59.580
你打开我们的开发者工具的

47:59.580 --> 48:01.580
云端控制台

48:01.580 --> 48:02.580
在云含数里面

48:02.580 --> 48:04.580
你应该可以看到这个UserInfo

48:04.580 --> 48:06.580
表示已经上传成功

48:06.580 --> 48:07.580
此时

48:07.580 --> 48:09.580
你就可以在你的程序中

48:09.580 --> 48:10.580
去使用它

48:10.580 --> 48:11.580
我们使用的方式

48:11.580 --> 48:13.580
是掉起

48:13.580 --> 48:16.580
你现在所写的这个UserInfo

48:16.580 --> 48:18.580
就是我们的云含数名

48:18.580 --> 48:20.580
回到程序中

48:20.580 --> 48:21.580
随便你在哪里

48:21.580 --> 48:22.580
你只要想用

48:22.580 --> 48:24.580
当然这符合程序逻辑

48:25.580 --> 48:26.580
点

48:26.580 --> 48:27.580
call

48:27.580 --> 48:28.580
代表

48:28.580 --> 48:29.580
掉用含数

48:29.580 --> 48:30.580
含数

48:30.580 --> 48:32.580
我们用一个Jason的模型

48:32.580 --> 48:34.580
来完成它的一个书写

48:34.580 --> 48:36.580
念是固定结构

48:36.580 --> 48:37.580
后面写上

48:37.580 --> 48:39.580
你现在的含数的名称

48:39.580 --> 48:40.580
就是我们刚才的

48:40.580 --> 48:41.580
云含数的名称

48:41.580 --> 48:42.580
它做好以后

48:42.580 --> 48:44.580
直接这边用Zen的方式

48:44.580 --> 48:45.580
用我们的Promise的方式

48:45.580 --> 48:46.580
来接收

48:46.580 --> 48:48.580
res会接到指

48:48.580 --> 48:49.580
那么这里的额外

48:49.580 --> 48:51.580
还要回到我们的云端说

48:51.580 --> 48:53.580
云端的数据

48:53.580 --> 48:55.580
它是以return的方式

48:55.580 --> 48:56.580
进行返回

48:56.580 --> 48:57.580
你不要在云端

48:57.580 --> 48:59.580
用console.log

48:59.580 --> 49:01.580
它是用return的方式进行返回

49:01.580 --> 49:03.580
return返回什么

49:03.580 --> 49:05.580
返回是一个Jason对象

49:05.580 --> 49:07.580
它返回一个Jason对象

49:07.580 --> 49:08.580
那这时候

49:08.580 --> 49:09.580
你这边的result

49:09.580 --> 49:11.580
就能接收到

49:11.580 --> 49:12.580
你这边的result

49:12.580 --> 49:13.580
就能接收到

49:13.580 --> 49:15.580
是这样的一个格式

49:15.580 --> 49:16.580
我们同时通过

49:16.580 --> 49:17.580
现在的

49:17.580 --> 49:18.580
我们的数据返回

49:18.580 --> 49:20.580
同这也能看到

49:20.580 --> 49:22.580
你接收的时候

49:22.580 --> 49:24.580
它是把这个对象

49:24.580 --> 49:25.580
它把它

49:25.580 --> 49:26.580
完整的

49:26.580 --> 49:27.580
我们说

49:27.580 --> 49:28.580
可以放置在

49:28.580 --> 49:31.960
这个data数据里面

49:31.960 --> 49:33.960
它可以放在这个data数据里面

49:33.960 --> 49:35.960
包括是我们这边看到的

49:35.960 --> 49:36.960
对吧

49:36.960 --> 49:37.960
我们result

49:37.960 --> 49:38.960
这个有值

49:38.960 --> 49:39.960
我们说

49:39.960 --> 49:41.960
这个是我们现在拿到的OpenID

49:41.960 --> 49:42.960
你完全是

49:42.960 --> 49:43.960
记住

49:43.960 --> 49:44.960
拿值的时候

49:44.960 --> 49:45.960
最好

49:45.960 --> 49:46.960
你每次

49:46.960 --> 49:48.960
都去console.log的方式

49:48.960 --> 49:49.960
查一下

49:49.960 --> 49:51.960
看它具体定位在哪里

49:51.960 --> 49:52.960
拿到以后

49:52.960 --> 49:53.960
我们根据

49:53.960 --> 49:54.960
是对象

49:54.960 --> 49:55.960
速度的模型

49:55.960 --> 49:56.960
然后我们现在

49:56.960 --> 49:57.960
把它的值

49:57.960 --> 49:58.960
复回给你当前

49:58.960 --> 49:59.960
所要使用的变量

49:59.960 --> 50:00.960
或者说

50:00.960 --> 50:01.960
当前使用的内容冲

50:01.960 --> 50:02.960
最后

50:02.960 --> 50:03.960
我们再去

50:03.960 --> 50:04.960
执行

50:04.960 --> 50:06.960
你要用到的本地命令

50:06.960 --> 50:07.960
这是我们说到的

50:07.960 --> 50:08.960
一个简单的

50:08.960 --> 50:09.960
但是

50:09.960 --> 50:10.960
有比较重要的

50:10.960 --> 50:11.960
mpview

50:11.960 --> 50:12.960
来实现

50:12.960 --> 50:13.960
云含数

50:13.960 --> 50:14.960
OpenID

50:14.960 --> 50:16.960
获取的一个操作

50:16.960 --> 50:17.960
等一下

50:17.960 --> 50:18.960
待会我们继续

50:18.960 --> 50:19.960
接着讲解

50:19.960 --> 50:20.960
我们怎么样

50:20.960 --> 50:21.960
在云端

50:21.960 --> 50:23.960
使用多数据库的操作

50:23.960 --> 50:25.960
不知道是多

50:25.960 --> 50:27.960
更新的数据库操作

50:27.960 --> 50:28.960
多更新数据库操作

50:28.960 --> 50:29.960
并且本地

50:29.960 --> 50:31.960
能够直接看到

50:31.960 --> 50:33.960
我新数据的更新

50:33.960 --> 50:34.960
好吧

