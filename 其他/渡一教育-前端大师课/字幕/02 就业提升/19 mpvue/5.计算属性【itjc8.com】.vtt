WEBVTT

00:00.180 --> 00:04.180
好 我们继续讲解mpview的我们系列课程

00:04.180 --> 00:07.180
这些课程呢 我们讲解一下计算属性

00:07.180 --> 00:13.180
我们之前的课程中 也就是在view中呢 我们计算属性是

00:13.180 --> 00:16.180
也是作为一个比较重点的部分 给大家做讲解的

00:16.180 --> 00:20.180
本身自己呢 它和方法有很大的相同处

00:20.180 --> 00:24.180
同时它有些的优点 那么在这边呢 我们说一下

00:24.180 --> 00:29.180
在mpview中呢 我们的计算属性呢 绝大部分的思路和它的用法

00:29.180 --> 00:32.180
就是view中的计算属性的一些规范

00:32.180 --> 00:36.180
只不过呢 有一些可能不同啊 我们说

00:36.180 --> 00:40.180
首先讲一下相同点 相同点的话呢 其实计算属性的优点

00:40.180 --> 00:45.180
无外乎就是两大操作 我这边写了一下 我把它

00:45.180 --> 00:49.180
划一下 就是在这

00:49.180 --> 00:54.180
第一 计算属性的好处就是减少模板里的复杂计算

00:54.180 --> 00:59.180
我们有时候在template里面 如果你需要在你现在的

00:59.180 --> 01:04.180
Must Touch这个语法中 要用一些函数写法的话呢

01:04.180 --> 01:08.180
我们把它全部写到计算属性里面 这样的话呢

01:08.180 --> 01:11.180
我们之后的维护也好 或者说是后面的重用也好

01:11.180 --> 01:14.180
有非常大的好处 第二呢

01:14.180 --> 01:17.180
它的优点就是 它的缓存无变化的输出结果

01:17.180 --> 01:20.180
好 就是说 这是和方法的区别嘛

01:20.180 --> 01:24.180
其实这点也是和它的一个重中区别之一

01:24.180 --> 01:30.180
计算属性本身自己的话呢 它会缓存你现在无变化的数据

01:30.180 --> 01:35.180
那这样的话呢 我们在后期 如果在程序中处理大数据的时候

01:35.180 --> 01:39.180
我们就可以直接拿一些无变化数据直接呈现

01:39.180 --> 01:42.180
而并非像方法一样需要重复的再去做

01:42.180 --> 01:48.180
这个是那个mpview和那个view.js在制作或使用

01:48.180 --> 01:51.180
计算属性的时候的一些最大的特点

01:51.180 --> 01:53.180
那么不同点的话呢 那么有几点啊

01:53.180 --> 01:57.180
第一点的话呢 计算属性 我们在view中

01:57.180 --> 02:01.180
我们是可以设置它的getter和setter操作的

02:01.180 --> 02:04.180
因为默认只是getter嘛 它的复操作的话

02:04.180 --> 02:06.180
也就是说可以加一个setter操作

02:06.180 --> 02:08.180
但在mpview中它是不可用的

02:08.180 --> 02:12.180
原因很简单 因为你要做setter操作的话呢

02:12.180 --> 02:15.180
基本上你要去做到view对象 对吧

02:15.180 --> 02:18.180
viewe的话呢 new生成对象以后是没有问题

02:18.180 --> 02:22.180
但是在我们的这里面呢 我们由于单页面中

02:22.180 --> 02:26.180
我们的所有操作是在我们的viewe的格式中

02:26.180 --> 02:28.180
因为而我们的整个这个代码呢

02:28.180 --> 02:31.180
如果说换起的话 它是在面点js中啊

02:31.180 --> 02:32.180
这是两个部分

02:32.180 --> 02:34.180
所以呢 我们说不去使用

02:34.180 --> 02:36.180
或者说不能用这样的东西

02:36.180 --> 02:37.180
根本是不能用的

02:37.180 --> 02:39.180
在view中它是属于同一个页面 对吧

02:39.180 --> 02:41.180
我们大家可以直接使用嘛

02:41.180 --> 02:43.180
它属于一个模板里面嘛

02:43.180 --> 02:44.180
这个理解吗

02:44.180 --> 02:46.180
我们回来看一下啊

02:46.180 --> 02:48.180
首先你看一下的是

02:48.180 --> 02:55.700
我们建一个branch

02:55.700 --> 02:56.700
好 现在5对吧

02:56.700 --> 02:58.700
我们建一个计算属性

02:58.700 --> 03:16.270
6 计算属性

03:16.270 --> 03:18.270
首先你要看到的一点是

03:18.270 --> 03:24.270
我们打开任何一个我们现在的页面

03:24.270 --> 03:28.270
它其实把它的view生成和它的整个制作

03:28.270 --> 03:30.270
是分两部分完成的

03:30.270 --> 03:31.270
它的view生成

03:31.270 --> 03:34.270
它是在面点js中完成

03:34.270 --> 03:36.270
这边形成挂载操作

03:36.270 --> 03:38.270
而我们平时所看到的

03:38.270 --> 03:41.270
我们的书写全是在这里面完成的

03:41.270 --> 03:42.270
那么这样的话呢

03:42.270 --> 03:44.270
这边我们说啊

03:44.270 --> 03:47.270
就不去再得到你现在的view对象的格式了

03:47.270 --> 03:48.270
那么这样的话呢

03:48.270 --> 03:52.270
我们就没法再去执行我们的set操作

03:52.270 --> 03:54.270
这点我们需要了解到

03:54.270 --> 03:56.270
OK 那我们现在的话呢

03:56.270 --> 03:58.270
既然啊做一些简单的势力

03:58.270 --> 03:59.270
看一下计算属性

03:59.270 --> 04:02.270
在我们的整个这个页面中

04:02.270 --> 04:05.270
或者称之为在我们的mpview中的操作

04:05.270 --> 04:07.270
由于我是那个切换

04:07.270 --> 04:08.270
所以的话

04:08.270 --> 04:10.270
我把这段代码可以完全删掉

04:10.270 --> 04:11.270
之后的话呢

04:11.270 --> 04:12.270
我们大家可以啊

04:12.270 --> 04:14.270
从其他的就是分支上面

04:14.270 --> 04:16.270
再去找到这段

04:16.270 --> 04:19.270
我们把这里面这个也删掉

04:19.270 --> 04:22.290
然后呢

04:22.290 --> 04:24.290
这边我们也可以删掉

04:24.290 --> 04:25.290
我们待会干净一点

04:25.290 --> 04:27.290
我们来做

04:27.290 --> 04:28.290
很空

04:28.290 --> 04:31.790
紧接着我们来写一下

04:31.790 --> 04:32.790
首先

04:32.790 --> 04:34.790
计算属性本身自己就是

04:34.790 --> 04:36.790
让我们能够很好的去切换

04:36.790 --> 04:38.790
你现在的页面中的一些

04:38.790 --> 04:40.790
复杂数据逻辑处理

04:40.790 --> 04:41.790
对不对

04:41.790 --> 04:43.790
这个是我们经常要说到的

04:43.790 --> 04:44.790
不然的话呢

04:44.790 --> 04:45.790
我干嘛去用它呢对吧

04:45.790 --> 04:46.790
第一点

04:46.790 --> 04:48.790
我们现在做一个

04:48.790 --> 04:50.790
啊

04:50.790 --> 04:51.790
div

04:51.790 --> 04:52.790
然后呢

04:52.790 --> 04:55.790
我们这边显示一个我们的

04:55.790 --> 04:57.790
那个

04:57.790 --> 05:00.300
say hello

05:00.300 --> 05:02.300
然后我们在这里面

05:02.300 --> 05:04.300
say hello

05:04.300 --> 05:08.530
同样

05:08.530 --> 05:09.530
我们记得吗

05:09.530 --> 05:10.530
我们在我们的

05:10.530 --> 05:11.530
计算属性的位置

05:11.530 --> 05:13.530
是在message的同级下面

05:13.530 --> 05:16.530
我们开一个computed

05:16.530 --> 05:21.500
我们开个computed

05:21.500 --> 05:22.500
然后的话

05:22.500 --> 05:23.500
我们在这边

05:23.500 --> 05:26.500
我们去写上和计算属性

05:26.500 --> 05:28.500
一个格式

05:28.500 --> 05:29.500
一个啊

05:29.500 --> 05:41.520
我们称之为

05:41.520 --> 05:42.520
反转格式

05:42.520 --> 05:44.520
我们把它放在这

05:44.520 --> 05:45.520
对吧

05:45.520 --> 05:46.520
然后的话呢

05:46.520 --> 05:47.520
我们去写上

05:47.520 --> 05:48.520
我们自己的

05:48.520 --> 05:55.930
方法

05:55.930 --> 05:56.930
每个计算属性

05:56.930 --> 05:57.930
它直接调用过一则

05:57.930 --> 05:59.930
就完成一个return

05:59.930 --> 06:01.930
这是我没有什么问题的

06:01.930 --> 06:03.930
然后this.say

06:03.930 --> 06:04.930
然后呢

06:04.930 --> 06:07.930
我们做一个反转

06:07.930 --> 06:09.930
反转势力是我们

06:09.930 --> 06:11.930
很多时候经常会用到的

06:11.930 --> 06:12.930
原因是他会调取

06:12.930 --> 06:20.340
三个方法

06:20.340 --> 06:21.340
对吧

06:21.340 --> 06:22.340
然后这样用好

06:22.340 --> 06:29.550
这个我们重启一下

06:29.550 --> 06:31.550
因为我们切了一下

06:31.550 --> 06:32.550
我们重启一下

06:32.550 --> 06:37.870
原来那个

06:37.870 --> 06:38.870
所以呢

06:38.870 --> 06:40.870
我们在这个上面

06:40.870 --> 06:42.870
我们让他重新运行一下

06:42.870 --> 06:53.950
重新开启

06:53.950 --> 06:54.950
编译一下

06:54.950 --> 06:56.950
把dister这样的一个文件

06:56.950 --> 06:58.950
改掉

06:58.950 --> 06:59.950
起了

06:59.950 --> 07:06.040
看到

07:06.040 --> 07:07.040
反转出来了啊

07:07.040 --> 07:09.040
这个很简单的一个格式

07:09.040 --> 07:10.040
所以计算属性

07:10.040 --> 07:12.040
本身自己他就是一个属性

07:12.040 --> 07:13.040
只不过呢

07:13.040 --> 07:14.040
这个属性呢

07:14.040 --> 07:15.040
比起我们直接拿

07:15.040 --> 07:16.040
我们data中的数据呢

07:16.040 --> 07:18.040
他进行了一个计算

07:18.040 --> 07:19.040
对不对

07:19.040 --> 07:20.040
进行了一个

07:20.040 --> 07:21.040
这边是这样的计算

07:21.040 --> 07:22.040
你也可以有其他的计算

07:22.040 --> 07:24.040
反正他就是返回一个值

07:24.040 --> 07:26.040
比起你先写死的话呢

07:26.040 --> 07:28.040
多一些功能性操作

07:28.040 --> 07:30.040
多

07:30.040 --> 07:32.040
逻辑操作的属性

07:32.040 --> 07:34.040
我一直这么理解啊

07:34.040 --> 07:38.890
这是这个

07:38.890 --> 07:39.890
那么同时呢

07:39.890 --> 07:40.890
我们再说一下啊

07:40.890 --> 07:43.890
这是我们称之为普通计算属性

07:43.890 --> 07:49.250
那么在我们的开发中

07:49.250 --> 07:51.250
我们特别是在view的

07:51.250 --> 07:53.250
mpview的开发中呢

07:53.250 --> 07:55.250
计算属性还有几个东西

07:55.250 --> 07:57.250
我们一直强调要说一下的

07:57.250 --> 08:07.090
就是缓存

08:07.090 --> 08:09.090
缓存的概念在计算属性中

08:09.090 --> 08:10.090
我们是一个大头

08:10.090 --> 08:11.090
也就是说

08:11.090 --> 08:12.090
他的返回结果

08:12.090 --> 08:14.090
如果始终保持不动的话

08:14.090 --> 08:17.090
他每次的返回都将是一个

08:17.090 --> 08:18.090
我们的缓存值

08:18.090 --> 08:21.090
而并非是我们每次要刷新

08:21.090 --> 08:23.090
说我们这边去写一个

08:23.090 --> 08:25.090
最简单的啊

08:26.090 --> 08:28.090
stay

08:28.090 --> 08:32.680
shows train

08:32.680 --> 08:34.680
然后做一个缓存的shows train

08:34.680 --> 08:35.680
就是

08:35.680 --> 08:37.680
这个的话我就说一下了

08:37.680 --> 08:41.120
因为大家应该都会

08:41.120 --> 08:43.120
比如说shows train

08:43.120 --> 08:45.120
或者甚至为

08:45.120 --> 08:47.120
我们返回一个日期也可以

08:47.120 --> 08:48.120
如果我现在

08:48.120 --> 08:50.120
以这样的方式操作的话

08:50.120 --> 08:51.120
那么页面中

08:51.120 --> 08:53.120
他只有第一次加载的时候

08:53.120 --> 08:54.120
会显示这个

08:54.120 --> 08:57.120
如果后期继续重新渲染的过程中

08:57.120 --> 08:59.120
他就不会再去

08:59.120 --> 09:00.120
重新加载

09:00.120 --> 09:01.120
或操作这个

09:01.120 --> 09:03.120
给一个字铺穿的显示了

09:03.120 --> 09:05.120
这是我们计算属性所做的

09:05.120 --> 09:07.120
但是你如果把它放在方法里面

09:07.120 --> 09:08.120
你把它放在方法里面

09:08.120 --> 09:09.120
它的问题

09:09.120 --> 09:11.120
就会每次都会去刷新

09:11.120 --> 09:12.120
这是这个过程

09:12.120 --> 09:14.120
这个需要大家知道一下

09:14.120 --> 09:15.120
不然的话呢

09:15.120 --> 09:16.120
这是加大了

09:16.120 --> 09:18.120
就是它是没有缓存的

09:18.120 --> 09:19.120
它是有缓存的

09:19.120 --> 09:20.120
除非你的变化

09:20.120 --> 09:21.120
它有变化以后

09:21.120 --> 09:22.120
它才会执行

09:22.120 --> 09:24.120
这是我们之前想讲到的

09:24.120 --> 09:25.120
这个呢

09:25.120 --> 09:26.120
在mpview中

09:26.120 --> 09:28.120
也同样适用

09:28.120 --> 09:29.120
这部分

09:29.120 --> 09:30.120
那么还有一个呢

09:30.120 --> 09:32.120
就是我们所谓的

09:32.120 --> 09:35.120
一个setter

09:35.120 --> 09:37.120
我们说一下

09:37.120 --> 09:38.120
在我们的

09:38.120 --> 09:39.120
你还回忆得起来吗

09:39.120 --> 09:42.120
在以前我们在讲view的过程中

09:42.120 --> 09:44.120
我这边就写一下

09:44.120 --> 09:46.120
以前我们在讲view的过程中

09:46.120 --> 09:48.120
你经常可以干这样的事

09:48.120 --> 09:49.120
我们比如说

09:49.120 --> 09:50.120
我们就写一个

09:50.120 --> 09:52.120
就是

09:52.120 --> 09:53.120
念

09:53.120 --> 09:54.120
我们就写一个修念

09:54.120 --> 09:56.120
就是一个非常简单的

09:56.120 --> 09:58.120
一个计算属性

09:58.120 --> 09:59.120
我把它写在这儿

09:59.120 --> 10:02.940
我把它写在这儿

10:02.940 --> 10:05.320
你定义

10:05.320 --> 10:07.320
比如说你是修念

10:08.320 --> 10:09.320
你那时候

10:09.320 --> 10:11.320
经常是这么干的

10:11.320 --> 10:14.320
你定义一个计算属性以后

10:14.320 --> 10:16.320
我们把上面也改成

10:16.320 --> 10:17.320
这个写法

10:17.320 --> 10:19.630
对吧

10:19.630 --> 10:20.630
我们

10:20.630 --> 10:22.630
这样写好以后

10:22.630 --> 10:24.630
你经常是做的事情事

10:24.630 --> 10:26.630
你这边可以写个get

10:26.630 --> 10:28.630
然后的话

10:28.630 --> 10:29.630
你这后面

10:29.630 --> 10:30.630
你可以去写上

10:30.630 --> 10:32.630
你现在所需要的

10:32.630 --> 10:33.630
一个内容

10:33.630 --> 10:34.630
比如说

10:34.630 --> 10:35.630
这是get

10:35.630 --> 10:36.630
你会返回一个

10:36.630 --> 10:38.630
什么东西

10:38.630 --> 10:39.630
同时

10:39.630 --> 10:40.630
你这边

10:40.630 --> 10:42.630
你这边也可以

10:42.630 --> 10:44.630
set

10:44.630 --> 10:46.630
然后

10:46.630 --> 10:48.630
你去操作一部分内容

10:48.630 --> 10:49.630
当然

10:49.630 --> 10:50.630
这边可以

10:50.630 --> 10:52.630
传一个新的value进来

10:52.630 --> 10:53.630
你之前老是这么干的

10:53.630 --> 10:54.630
应该是干过

10:55.630 --> 10:56.630
如果没有干过同学

10:56.630 --> 10:57.630
你去看一下

10:58.630 --> 10:59.630
view的语法

11:00.630 --> 11:01.630
这里边你就可以

11:01.630 --> 11:03.630
对当前里面的值

11:03.630 --> 11:04.630
比如说

11:04.630 --> 11:05.630
我们随便举例

11:05.630 --> 11:06.630
就是

11:06.630 --> 11:07.630
念进行复制

11:07.630 --> 11:08.630
对吧

11:08.630 --> 11:09.630
你可以把这个new value

11:09.630 --> 11:10.630
复进去

11:10.630 --> 11:11.630
这是伟大

11:11.630 --> 11:13.630
那么在这样的过程中

11:13.630 --> 11:15.630
那么你的调用方式

11:15.630 --> 11:16.630
你需要对修念

11:16.630 --> 11:17.630
比如说

11:17.630 --> 11:19.630
你现在是一个vm的

11:19.630 --> 11:20.630
变量

11:20.630 --> 11:22.630
你需要对它进行修念的操作

11:22.630 --> 11:23.630
这样给它复制

11:23.630 --> 11:24.630
但是

11:24.630 --> 11:25.630
我们现在由于

11:25.630 --> 11:27.630
在我们的view

11:27.630 --> 11:28.630
页面中

11:28.630 --> 11:29.630
或者称之为

11:29.630 --> 11:30.630
我的vm

11:30.630 --> 11:32.630
它其实是在main.js中的

11:32.630 --> 11:33.630
所以本身来讲

11:33.630 --> 11:34.630
它就不会有这个结构

11:34.630 --> 11:35.630
OK

11:35.630 --> 11:36.630
所以这个

11:36.630 --> 11:37.630
就是我在PPT中

11:37.630 --> 11:38.630
所谓的

11:38.630 --> 11:40.630
我们其实不能去完成

11:40.630 --> 11:41.630
这个set的格式

11:41.630 --> 11:42.630
view是可以

11:42.630 --> 11:43.630
OK

11:43.630 --> 11:45.630
那么计算属性

11:45.630 --> 11:46.630
本身来讲

11:46.630 --> 11:47.630
不复杂

11:47.630 --> 11:48.630
主要是记住

11:48.630 --> 11:49.630
我们刚才在PPT上

11:49.630 --> 11:50.630
说的两点

11:50.630 --> 11:51.630
就可以

11:51.630 --> 11:52.630
并且知道

11:53.630 --> 11:54.630
也就是说

11:54.630 --> 11:55.630
我们需要了解

11:55.630 --> 11:56.630
或者说

11:56.630 --> 11:57.630
我们要熟练

11:57.630 --> 11:58.630
知道一下

11:58.630 --> 12:00.630
一旦你出现了一些计算的话

12:00.630 --> 12:01.630
你就用计算属性

12:01.630 --> 12:02.630
就是在我们的

12:02.630 --> 12:03.630
表达式里面

12:03.630 --> 12:05.630
我们的mush touch里面

12:05.630 --> 12:06.630
用表达式的方式

12:06.630 --> 12:07.630
去做这部分

12:07.630 --> 12:08.630
或者说

12:08.630 --> 12:09.630
这部分数据

12:09.630 --> 12:11.630
它会是长时间

12:11.630 --> 12:12.630
计算一次以后

12:12.630 --> 12:14.630
不再经常动的

12:14.630 --> 12:15.630
那么这时候

12:15.630 --> 12:16.630
你也可以用

12:16.630 --> 12:17.630
我们的计算属性

12:17.630 --> 12:18.630
这个

12:18.630 --> 12:19.630
我们不做过多的

12:19.630 --> 12:20.630
非常深的

12:20.630 --> 12:21.630
因为他们本身来讲

12:21.630 --> 12:22.630
这个语法知识点

12:22.630 --> 12:24.630
还是比较简单的

12:24.630 --> 12:25.630
好

12:25.630 --> 12:26.630
我们把这个代码

12:26.630 --> 12:27.630
咱们知道一下

12:27.630 --> 12:28.630
就是这么一个

12:28.630 --> 12:29.630
显示一下

12:29.630 --> 12:30.630
就可以了

12:30.630 --> 12:31.630
我们把它传上去

12:31.630 --> 12:32.630
大家之后的话

12:32.630 --> 12:33.630
你可以到这边来拿

12:33.630 --> 12:34.630
管存机制

12:34.630 --> 12:35.630
这东西也是一样

12:35.630 --> 12:38.940
我们到git上

12:38.940 --> 12:39.940
我们来操作一下

12:39.940 --> 12:40.940
现在

12:40.940 --> 12:42.940
我们依然是在

12:42.940 --> 12:47.150
计算属性上面

12:47.150 --> 12:50.150
然后我们做一个git

12:50.150 --> 12:52.150
我们push推一下

12:52.150 --> 12:53.150
不

12:53.150 --> 12:54.150
我们现在是add

12:54.150 --> 12:55.150
对吧

12:56.150 --> 12:57.150
commit

12:57.150 --> 12:59.150
我们把计算属性

12:59.150 --> 13:00.150
添加一下

13:00.150 --> 13:01.150
应该有

13:02.150 --> 13:03.150
一个文件

13:03.150 --> 13:04.150
然后呢

13:04.150 --> 13:06.150
我们推送一下

13:06.150 --> 13:08.150
把它推上去

13:08.150 --> 13:09.150
计算属性

13:09.150 --> 13:21.900
全线

13:21.900 --> 13:22.900
好了

13:22.900 --> 13:23.900
现在呢

13:23.900 --> 13:24.900
线上就有

13:24.900 --> 13:25.900
计算属性的格式了

13:25.900 --> 13:26.900
对大家来讲的话呢

13:26.900 --> 13:28.900
只要去了解

13:28.900 --> 13:29.900
如果你之前

13:29.900 --> 13:30.900
对计算属性

13:30.900 --> 13:31.900
已经很熟同学

13:31.900 --> 13:32.900
那么你只要花一点点时间

13:32.900 --> 13:33.900
再次的

13:33.900 --> 13:34.900
复习一下

13:34.900 --> 13:35.900
了解一下就可以了

13:35.900 --> 13:37.900
不再过多的去讲解

13:37.900 --> 13:38.900
ok

13:38.900 --> 13:39.900
那么这部分

13:39.900 --> 13:40.900
就先讲到这了

