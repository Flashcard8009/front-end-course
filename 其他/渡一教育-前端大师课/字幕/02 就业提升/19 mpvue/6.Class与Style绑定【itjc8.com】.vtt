WEBVTT

00:00.000 --> 00:04.000
好 我们继续讲解MPVU的一个系列课程

00:04.000 --> 00:10.000
这些课呢 我们讲一下class with style的一个绑定在MPVU中的实现

00:10.000 --> 00:17.000
class with style的绑定呢 之前我们在view的开发过程中呢 我们已经设计到过

00:17.000 --> 00:21.000
那么主要的呢 就是针对于样式的操作

00:21.000 --> 00:26.000
在我们的view里面 在我们的html里面的一些实现

00:26.000 --> 00:32.000
我们呢 采用的是模板的方式 对它进行一定的革新和数据变化

00:32.000 --> 00:38.000
那么我们在MPVU中的话呢 完全可以把我们view中的一套实现与法

00:38.000 --> 00:45.000
全部给搬过来 因为在这个过程中呢 其实不存在于过多的一些变化

00:45.000 --> 00:52.000
只不过呢 有可能有一些小问题的话呢 我们在讲解过程中 给大家再来做一定的解释

00:52.000 --> 00:58.000
我们在整个开发中呢 我们的class跟style呢 分别有不同的几种形式

00:58.000 --> 01:02.000
能够让大家去识别 或者说能让大家能够去运行

01:02.000 --> 01:06.000
至于class来讲的话呢 我们有对象单数据类型

01:06.000 --> 01:09.000
我们同时有对象的多数据类型的格式

01:09.000 --> 01:13.000
然后呢 在我们的速度格式中呢 有三种 一种是class的速度形式

01:13.000 --> 01:19.000
第二种是class的三元运算幅形式 第三种是属于数组的一个对象形式

01:19.000 --> 01:25.000
别看写的那么多 其实它只要写出来以后 大家对它的一个认识呢 会非常的简单

01:25.000 --> 01:32.000
第二呢 style 就是直接完成我们样式的一个定义 在行内

01:32.000 --> 01:37.000
然后我们有对象和速度形式 同时呢 我们也可以做一个计算的数据形式

01:37.000 --> 01:43.000
计算数据形式呢 其实就是用计算属性的方式来完成我们现在的一个view的

01:43.000 --> 01:46.000
一个对mpview的一个对象的操作

01:46.000 --> 01:50.000
那么现在呢 我们对它进行一些简单的模拟结构

01:50.000 --> 01:55.000
我们看一下怎么样能够在我们的view中进行操作

01:55.000 --> 02:01.000
首先还是确保我们现在应该是在新分支里面

02:01.000 --> 02:06.380
我们看到我们现在是在class style的绑定的这个分支里面

02:06.380 --> 02:11.380
那么这样的话呢 我们就可以直接完成我们现在的一个代码

02:11.380 --> 02:15.380
我们来看 我们把现在的整个这部分的开发

02:15.380 --> 02:22.380
我们从里面抽取出一部分来 我们打开我们现在的

02:22.380 --> 02:27.380
在测试界面中呢 我们把有一些测试清空掉有些数据

02:27.380 --> 02:35.520
然后这样的话呢 我们就很干净 对吧 在这个界面中我们就是很干净

02:38.410 --> 02:45.410
我们写上首先class class的支持结构

02:47.410 --> 02:52.410
首先写我们最简单的啊 我们绑定形式 我们是class

02:52.410 --> 02:59.040
然后呢 我们是称之为 我们从ppd上复制过来

02:59.040 --> 03:05.040
ppd上这个是打开了对吧 叫做对象单数据形式

03:05.040 --> 03:15.630
我们应该用这个对象单数据形式

03:15.630 --> 03:20.630
对象单数据形式呢 其实就是我们有一个json对象

03:20.630 --> 03:22.630
然后呢 我们里面写上actile

03:22.630 --> 03:27.630
同时呢 我们后面有一个是否可以显示的一个变量级

03:27.630 --> 03:32.630
我们把它放过来 然后呢 给它一个简单的布耳直

03:32.630 --> 03:36.630
把它放在我们的样式里面

03:36.630 --> 03:40.630
简单做一个我们的颜色的变化

03:40.630 --> 03:43.630
那么这样的话呢 我们对它进行修改

03:43.630 --> 03:47.630
这个呢 我们写一下对象单数据形式

03:47.630 --> 03:52.630
ok 那我们来看一下效果 ok 我们还没启动对吧

03:52.630 --> 04:00.380
npn start 等它启动一下

04:00.380 --> 04:08.700
它每次启动以后的话 它会进行编译放到dister里面去

04:08.700 --> 04:14.650
然后我们打开我们的 我们刷新一下

04:14.650 --> 04:20.820
死了一对吧 我们把它重启一下

04:20.820 --> 04:30.860
然后把它重启一下 我们重启一下

04:30.860 --> 04:49.450
我们打开我们的

04:49.450 --> 05:01.630
现在所用到的这个项目

05:01.630 --> 05:06.840
好 我们打开了 咱们看到吗

05:06.840 --> 05:09.840
这边它所呈现的就是一个红色的代表

05:09.840 --> 05:11.840
我现在这个已经起效果了

05:11.840 --> 05:16.840
此时呢 我们重新启动一下我们的npn start

05:16.840 --> 05:26.270
看一下 是不是 红色就起来了

05:26.270 --> 05:29.270
所以这种称之为数据的单结构

05:29.270 --> 05:33.270
它是一个结构对象 同时我们继续往下

05:33.270 --> 05:35.270
我们把每种结构列一下就可以了

05:35.270 --> 05:38.270
我们不去细说了 就是

05:38.270 --> 05:41.270
第二种呢 我们称之为

05:41.270 --> 05:44.710
我们ppt哪一下

05:44.710 --> 05:47.710
总ppt上叫做数据

05:47.710 --> 05:51.280
对象多数据形式

05:51.280 --> 05:56.280
对象多数据形式 我们依然用p标签来做

05:56.280 --> 05:58.280
class

05:58.280 --> 06:01.280
然后呢 我们这边等于

06:01.280 --> 06:05.280
我们可以给出我们所需要的一个对象

06:05.280 --> 06:07.280
这个对象呢 我们说

06:07.280 --> 06:10.910
active

06:10.910 --> 06:13.910
我们继续把上面的active放进去

06:13.910 --> 06:15.910
然后同时呢 我们还有一个

06:15.910 --> 06:17.910
再可以加一个出来

06:17.910 --> 06:21.910
比如说 我们这边给它一个

06:21.910 --> 06:23.910
可以定过的一个方法

06:23.910 --> 06:25.910
直接在这边写上

06:25.910 --> 06:28.910
比如说 我这边就是

06:28.910 --> 06:31.910
再有一个

06:31.910 --> 06:34.910
再定一个我们的

06:34.910 --> 06:40.860
font 字体 字体的大小

06:40.860 --> 06:43.860
然后呢 is font

06:43.860 --> 06:46.860
好 我们把 is font 放这里

06:46.860 --> 06:52.560
它是否需要字体 我们把它加出来

06:52.560 --> 06:55.560
然后呢 我们把整个这个开发

06:55.560 --> 06:57.560
然后呢 我们把这个 is font

06:57.560 --> 07:00.560
font size 在这边再写一下

07:00.560 --> 07:01.560
font size 的话呢

07:01.560 --> 07:03.560
font大小 我们给出

07:03.560 --> 07:05.560
60個rpx

07:05.560 --> 07:07.560
我们给出60个rpx

07:07.560 --> 07:09.560
然后此时呢 我们再来看一下

07:09.560 --> 07:11.560
此时如果说我两个都有

07:11.560 --> 07:13.560
它会叠加

07:13.560 --> 07:15.560
我们看一下

07:15.560 --> 07:17.560
这里面没有文本对吧

07:17.560 --> 07:19.560
我们把文本加一下

07:19.560 --> 07:26.200
是不是 字体大了 红色的

07:26.200 --> 07:27.200
两个都有

07:27.200 --> 07:29.200
如果你切换成first

07:29.200 --> 07:31.200
那么代表一个没有

07:31.200 --> 07:33.200
那么一个还会变成小写的红布

07:33.200 --> 07:34.200
红色的字体

07:34.200 --> 07:36.200
OK 那么同时呢

07:36.200 --> 07:37.200
我们的

07:37.200 --> 07:38.200
还有一些呢

07:38.200 --> 07:40.200
我们可以额外的再追加上去

07:40.200 --> 07:42.200
这个我相信大家之前都会有

07:42.200 --> 07:44.200
熟悉到 比如说

07:44.200 --> 07:46.200
我们再追加一个

07:46.200 --> 07:47.200
我们的

07:47.200 --> 07:51.900
BG color

07:51.900 --> 07:53.900
最近一个背景色出来

07:53.900 --> 07:55.900
然后的话 background color

07:55.900 --> 07:56.900
我们给一个

07:56.900 --> 08:00.340
我们给一个

08:00.340 --> 08:01.340
这个颜色

08:01.340 --> 08:04.340
那么我们是可以直接在这

08:04.340 --> 08:07.340
我们直接把CSS加上去

08:07.340 --> 08:10.340
我们把下面的整个这个

08:10.340 --> 08:12.340
样式名称往这一放

08:12.340 --> 08:13.340
那就可以了

08:13.340 --> 08:15.340
此时你到这边来看

08:15.340 --> 08:17.340
是不是背景有了

08:17.340 --> 08:18.340
所以对它来讲

08:18.340 --> 08:19.340
我们注意啊

08:19.340 --> 08:21.340
我们要打开它圆码的时候

08:21.340 --> 08:23.340
你不是在下面有html

08:23.340 --> 08:24.340
它有个wxml

08:24.340 --> 08:25.340
通它来打开

08:25.340 --> 08:27.340
同时你用它来获取

08:27.340 --> 08:29.340
你现在所需要的对象

08:29.340 --> 08:30.340
有没有看到

08:30.340 --> 08:31.340
我们在这个情况下

08:31.340 --> 08:33.340
我们其实刚才写的

08:33.340 --> 08:35.340
我们都是追加进去了

08:35.340 --> 08:37.340
BG class里面是追加进去的

08:37.340 --> 08:38.340
ok

08:38.340 --> 08:39.340
这是我们

08:39.340 --> 08:41.340
多对象的一个开发

08:41.340 --> 08:42.340
再往下呢

08:42.340 --> 08:44.340
我们把几个内容都写一下

08:44.340 --> 08:49.890
数组形式

08:49.890 --> 08:51.890
数组形式

08:51.890 --> 08:52.890
数组形式呢

08:52.890 --> 08:53.890
我们依然来

08:53.890 --> 08:56.890
我们把这个就不在网上放了

08:56.890 --> 08:58.890
颜色关系

08:58.890 --> 09:00.890
或者我们

09:00.890 --> 09:04.200
加一个

09:04.200 --> 09:05.200
merge

09:05.200 --> 09:06.200
我们加一个merge

09:06.200 --> 09:08.200
上下离开

09:08.200 --> 09:09.200
10個rpx

09:09.200 --> 09:11.200
上下左右不动

09:12.200 --> 09:13.200
此时呢

09:13.200 --> 09:15.200
我们把tag给拿下来

09:15.200 --> 09:17.200
这样就可以对吧

09:17.200 --> 09:18.200
帽号

09:18.200 --> 09:19.200
class

09:19.200 --> 09:20.200
然后写上

09:20.200 --> 09:21.200
你现在呢

09:21.200 --> 09:22.200
在这边

09:22.200 --> 09:24.200
我们是可以写一个数组

09:24.200 --> 09:26.200
我们把现在的

09:26.200 --> 09:28.200
两个都可以写进去

09:28.200 --> 09:29.200
我们不需要去判别

09:29.200 --> 09:30.200
直接把你的名字

09:30.200 --> 09:31.200
给写进去就可以了

09:31.200 --> 09:32.200
我们在这里面呢

09:32.200 --> 09:33.200
我们就写上

09:33.200 --> 09:34.200
比如说

09:35.200 --> 09:36.200
active class

09:36.200 --> 09:38.200
同时我们写上

09:38.200 --> 09:39.200
再写一个

09:39.200 --> 09:40.200
就是

09:40.200 --> 09:41.200
font

09:41.200 --> 09:43.200
size class

09:43.200 --> 09:45.200
它两个是变量

09:45.200 --> 09:46.200
主要

09:46.200 --> 09:47.200
这两个是变量

09:47.200 --> 09:48.200
所以这两个变量的话呢

09:48.200 --> 09:51.200
我们需要在这边定义一下

09:51.200 --> 09:52.200
对吧

09:52.200 --> 09:53.200
我们在这边

09:53.200 --> 09:55.200
我们拿写出来

09:55.200 --> 09:56.200
它的结构就是

09:56.200 --> 09:58.200
我们拿active过来

10:00.200 --> 10:01.200
同时呢

10:01.200 --> 10:02.200
它也是

10:02.200 --> 10:04.200
我们把它放这

10:04.200 --> 10:05.200
我们拿后面的

10:05.200 --> 10:07.200
font size过来

10:08.200 --> 10:10.200
所以一旦它形成

10:10.200 --> 10:12.200
我们现在的运行以后

10:12.200 --> 10:14.200
它将会加载出

10:14.200 --> 10:15.200
这两个

10:15.200 --> 10:17.200
这两个值的话呢

10:17.200 --> 10:18.200
它其实对应到的是

10:18.200 --> 10:20.200
下面的我们的样式结构

10:20.200 --> 10:22.200
然后再追加一个

10:22.200 --> 10:24.200
我们的笔迹颗了

10:24.200 --> 10:25.200
所以来看一下

10:25.200 --> 10:26.200
是不是大了

10:26.200 --> 10:27.200
这样也可以有

10:27.200 --> 10:28.200
这是速度形式

10:28.200 --> 10:29.200
速度形式

10:29.200 --> 10:41.660
主要是针对于

10:41.660 --> 10:42.660
中文

10:42.660 --> 10:46.700
它是

10:46.700 --> 10:53.280
它是针对于

10:53.280 --> 10:55.980
我们的

10:55.980 --> 10:56.980
data变量

10:56.980 --> 11:01.060
在下面的一种呢

11:01.060 --> 11:02.060
我们就是

11:02.060 --> 11:03.060
称之为

11:03.060 --> 11:04.060
数据

11:04.060 --> 11:08.140
三运运算形式

11:08.140 --> 11:10.140
数据的三运运算形式

11:10.140 --> 11:12.140
数据的三运运算形式呢

11:12.140 --> 11:14.140
我们再写一下出来

11:14.140 --> 11:16.140
我们在这边

11:16.140 --> 11:18.140
class bg

11:18.140 --> 11:19.140
color

11:19.140 --> 11:20.140
然后呢

11:20.140 --> 11:21.140
我们可以写上

11:21.140 --> 11:22.140
当然你这样写

11:22.140 --> 11:23.140
也可以啊

11:23.140 --> 11:25.140
bebound

11:25.140 --> 11:27.140
class和上面什么区别

11:27.140 --> 11:29.140
没啥对吧

11:29.140 --> 11:30.140
然后

11:30.140 --> 11:32.140
is active

11:32.140 --> 11:34.140
是否能够运行

11:34.140 --> 11:35.140
ok的话

11:35.140 --> 11:37.140
我们下面打上

11:37.140 --> 11:39.140
active class

11:39.140 --> 11:40.140
冒号

11:40.140 --> 11:41.140
如果说可以的话

11:41.140 --> 11:42.140
就运行它

11:42.140 --> 11:43.140
不然的话

11:43.140 --> 11:44.140
放空

11:44.140 --> 11:46.140
由于外面是双影

11:46.140 --> 11:48.140
这边写单影

11:48.140 --> 11:50.140
然后再追加一个

11:50.140 --> 11:51.140
这个形式上去

11:51.140 --> 11:54.980
ok

11:54.980 --> 11:56.980
由于我这边是

11:56.980 --> 11:57.980
把样子

11:57.980 --> 11:59.980
字符内容写上去

11:59.980 --> 12:02.980
把字符内容写上去

12:02.980 --> 12:06.830
来看一下

12:06.830 --> 12:07.830
是不是出来了

12:07.830 --> 12:09.830
我如果把这个值

12:09.830 --> 12:10.830
is active

12:10.830 --> 12:11.830
把它分成为

12:11.830 --> 12:12.830
true

12:12.830 --> 12:13.830
first

12:13.830 --> 12:15.830
再来看一下

12:16.830 --> 12:17.830
是不是

12:17.830 --> 12:19.830
这个颜色就没有了

12:19.830 --> 12:20.830
ok

12:20.830 --> 12:21.830
那么这种形式呢

12:21.830 --> 12:22.830
主要的是

12:22.830 --> 12:24.830
如果我追加两个对吧

12:24.830 --> 12:26.830
如果你是一个的话

12:26.830 --> 12:27.830
你也可以用

12:27.830 --> 12:29.830
我们的对象形式来写

12:29.830 --> 12:30.830
因为我两个

12:30.830 --> 12:32.830
所以它本身这个是否显示

12:32.830 --> 12:34.830
用了一个3元运算操作

12:34.830 --> 12:35.830
再往下

12:35.830 --> 12:37.830
我们还可以看到的是

12:37.830 --> 12:38.830
我们的

12:38.830 --> 12:40.830
数据对象形式

12:42.830 --> 12:43.830
数据对象形式

12:43.830 --> 12:45.830
数据对象形式呢

12:45.830 --> 12:46.830
我们写一下

12:47.830 --> 12:48.830
class

12:49.830 --> 12:50.830
bg

12:50.830 --> 12:51.830
color

12:51.830 --> 12:52.830
原始操作

12:52.830 --> 12:53.830
v

12:53.830 --> 12:56.270
bound

12:56.270 --> 12:57.270
这个是可以的

12:57.270 --> 12:58.270
然后呢

12:58.270 --> 12:59.270
我们写上

12:59.270 --> 13:00.270
前面

13:00.270 --> 13:02.270
我们依然把刚才写的

13:02.270 --> 13:03.270
active

13:03.270 --> 13:04.270
冒号

13:04.270 --> 13:05.270
is

13:05.270 --> 13:06.270
active

13:06.270 --> 13:07.270
放上来

13:07.270 --> 13:08.270
逗号

13:08.270 --> 13:11.270
然后后面再追加我们的

13:11.270 --> 13:13.270
这个形式

13:13.270 --> 13:17.930
这时候就判断

13:17.930 --> 13:18.930
is active

13:18.930 --> 13:20.930
是否要的话呢

13:20.930 --> 13:21.930
那么active的这个值

13:21.930 --> 13:22.930
就会被拿出来

13:22.930 --> 13:23.930
如果不要的话

13:23.930 --> 13:24.930
那么它

13:24.930 --> 13:25.930
这个没有

13:25.930 --> 13:26.930
就加一些它

13:26.930 --> 13:27.930
这个逻辑

13:27.930 --> 13:28.930
我们其实

13:28.930 --> 13:29.930
大家应该说

13:29.930 --> 13:30.930
已经有一定的

13:30.930 --> 13:34.690
文字还是没有显示出来

13:34.690 --> 13:35.690
文字放上

13:37.690 --> 13:38.690
再来看一下

13:38.690 --> 13:41.000
是不是出来了

13:41.000 --> 13:43.000
如果我这边改一下

13:43.000 --> 13:44.000
因为is active

13:44.000 --> 13:45.000
我改成

13:49.910 --> 13:50.910
是不是就可以了

13:50.910 --> 13:51.910
数据对象形式

13:51.910 --> 13:52.910
所以这几种形式呢

13:52.910 --> 13:53.910
我们简单看一下

13:53.910 --> 13:54.910
就可以了

13:54.910 --> 13:56.910
不做深入去讲解了

13:56.910 --> 13:57.910
分别把它运用一下

13:57.910 --> 13:58.910
然后看一下

13:58.910 --> 13:59.910
我们在

13:59.910 --> 14:02.910
我们的npview中的一个格式操作

14:02.910 --> 14:03.910
同时呢

14:03.910 --> 14:04.910
再要看一下

14:04.910 --> 14:10.060
是我们的style形式

14:10.060 --> 14:11.060
style形式

14:11.060 --> 14:13.060
style形式本身来讲的话呢

14:13.060 --> 14:14.060
相对而言

14:14.060 --> 14:15.060
也比较简单

14:15.060 --> 14:16.060
首先第一个

14:16.060 --> 14:17.060
我们来看一下

14:17.060 --> 14:19.060
我们先写一个p元素

14:19.060 --> 14:20.060
然后呢

14:20.060 --> 14:21.060
我们用绑定

14:21.060 --> 14:24.060
绑定你可以使用我们的

14:24.060 --> 14:26.060
原始操作

14:26.060 --> 14:27.060
vbound

14:27.060 --> 14:28.060
你也可以直接写冒号

14:28.060 --> 14:29.060
对吧

14:29.060 --> 14:32.060
然后style等于

14:32.060 --> 14:35.060
我们写一个对象形式

14:35.060 --> 14:37.060
出来

14:37.060 --> 14:39.060
我们把

14:39.060 --> 14:41.060
这个复制过来

14:41.060 --> 14:42.060
对象形式

14:42.060 --> 14:46.940
那么我们在这里面写上

14:46.940 --> 14:47.940
color

14:47.940 --> 14:49.940
我们写上

14:49.940 --> 14:51.940
active color

14:51.940 --> 14:56.090
font size

14:56.090 --> 14:57.090
我们写上

14:57.090 --> 14:59.090
font size

14:59.090 --> 15:00.090
我们说

15:00.090 --> 15:01.090
它是大小

15:01.090 --> 15:02.090
对吧

15:02.090 --> 15:03.090
字体大小

15:03.090 --> 15:04.090
我们去加上

15:04.090 --> 15:05.090
我们现在的px

15:05.090 --> 15:07.090
加一个参数出来

15:07.090 --> 15:09.090
后面我们把

15:09.090 --> 15:10.090
这个

15:10.090 --> 15:12.090
跟上

15:12.090 --> 15:13.090
这边的话

15:13.090 --> 15:14.090
由于是单影

15:14.090 --> 15:16.090
需要加一个

15:16.090 --> 15:17.090
px

15:17.090 --> 15:19.090
保存

15:19.090 --> 15:20.090
此时呢

15:20.090 --> 15:21.090
我们来写一下它的

15:21.090 --> 15:22.090
首先

15:22.090 --> 15:23.090
第一个

15:23.090 --> 15:25.090
是否这个color能够显示

15:25.090 --> 15:26.090
对吧

15:26.090 --> 15:27.090
我们color的话

15:27.090 --> 15:29.090
我们就直接使用

15:29.090 --> 15:35.890
这个我们定一下吧

15:35.890 --> 15:36.890
咱们定成

15:36.890 --> 15:43.300
黄色

15:43.300 --> 15:44.300
然后font size

15:44.300 --> 15:47.620
我们把这个定一下在这

15:47.620 --> 15:48.620
定成

15:48.620 --> 15:50.620
40rpx

15:50.620 --> 15:52.620
rpx不在这写

15:52.620 --> 15:55.620
这边写rpx

15:55.620 --> 15:57.620
然后此时来看一下

15:57.620 --> 15:59.620
对象形式出来了对吧

15:59.620 --> 16:00.620
这个是

16:00.620 --> 16:03.620
那么我们为了区分的话呢

16:03.620 --> 16:05.620
我们这边

16:05.620 --> 16:07.620
做一个h2

16:07.620 --> 16:09.620
画条线

16:09.620 --> 16:10.620
这边我们用

16:10.620 --> 16:12.620
h1的方式

16:12.620 --> 16:17.940
表示

16:17.940 --> 16:24.700
h1

16:24.700 --> 16:25.700
这样

16:25.700 --> 16:29.660
看起来的话应该会比较

16:29.660 --> 16:31.660
对象形式对吧

16:31.660 --> 16:40.730
我们这个还没有保存对吧

16:40.730 --> 16:42.730
它这边写出来了就是说

16:42.730 --> 16:43.730
我们现在

16:43.730 --> 16:45.730
Tag标签的h1是没有

16:45.730 --> 16:47.730
被支持的标签

16:47.730 --> 16:49.730
所以我们直接这边写div吧

16:49.730 --> 16:51.730
就是写一个

16:51.730 --> 16:53.730
我们写一个div标签

16:53.730 --> 16:56.420
出来

16:56.420 --> 16:57.420
然后此时呢

16:57.420 --> 17:00.800
我们重新的

17:00.800 --> 17:03.300
编一下

17:03.300 --> 17:07.450
div标签

17:07.450 --> 17:15.940
我们来看一下

17:15.940 --> 17:17.940
这个问题是出在哪里

17:17.940 --> 17:19.940
它是说的是

17:19.940 --> 17:21.940
编一个错误对吧

17:21.940 --> 17:23.940
然后的话

17:23.940 --> 17:25.940
仪式在于它说

17:25.940 --> 17:27.940
我们有结束符对吧

17:27.940 --> 17:29.940
h1标签

17:29.940 --> 17:32.510
我们来一个

17:32.510 --> 17:33.510
结束符

17:33.510 --> 17:34.510
我们来看一下

17:34.510 --> 17:36.510
现在正常了

17:36.510 --> 17:37.510
对不对

17:37.510 --> 17:39.510
就有了这个

17:39.510 --> 17:40.510
只不过它h1呢

17:40.510 --> 17:42.510
它没有办法一样的事情

17:42.510 --> 17:44.510
所以我们这边还剩div

17:44.510 --> 17:45.510
然后的话呢

17:45.510 --> 17:46.510
我们之后

17:46.510 --> 17:47.510
会把它自己放大

17:47.510 --> 17:49.510
或者样式来结构操作

17:49.510 --> 17:50.510
ok啦

17:50.510 --> 17:51.510
这就是我们看到的

17:51.510 --> 17:52.510
下面的这个形式

17:52.510 --> 17:53.510
同时

17:53.510 --> 17:54.510
这一标签的话呢

17:54.510 --> 17:56.510
我们暂时就不用了

17:56.510 --> 17:57.510
好

17:57.510 --> 17:58.510
紧接着我们再往下

17:58.510 --> 17:59.510
我们去做

17:59.510 --> 18:00.510
我们还有一个

18:00.510 --> 18:01.510
我们显示出来的

18:01.510 --> 18:03.510
就是数据形式

18:03.510 --> 18:06.510
我们做一个数据形式的操作

18:06.510 --> 18:07.510
来

18:07.510 --> 18:08.510
首先

18:08.510 --> 18:11.510
我们这边需要给出的

18:11.510 --> 18:13.510
我们把它做一个

18:13.510 --> 18:18.230
bound style

18:18.230 --> 18:19.230
bound style

18:19.230 --> 18:20.230
结构a

18:20.230 --> 18:22.230
我们应该在p标签里面

18:22.230 --> 18:23.230
对吧

18:23.230 --> 18:25.230
把它放这儿

18:25.230 --> 18:27.230
bound style

18:27.230 --> 18:28.230
空格

18:28.230 --> 18:29.230
然后呢

18:29.230 --> 18:34.020
我们给一个

18:34.020 --> 18:35.020
color

18:35.020 --> 18:36.020
帽号

18:36.020 --> 18:37.020
我们是

18:37.020 --> 18:39.020
active color

18:39.020 --> 18:40.020
这个形式

18:40.020 --> 18:41.020
然后font

18:41.020 --> 18:42.020
里面也写出

18:42.020 --> 18:44.020
我们的

18:44.020 --> 18:46.020
font size

18:46.020 --> 18:47.020
帽号

18:47.020 --> 18:49.020
font size

18:49.020 --> 18:51.020
再加上

18:51.020 --> 18:55.460
我们的rpx

18:55.460 --> 18:57.460
这个形式去写

18:57.460 --> 18:59.460
那么其实是一样的

18:59.460 --> 19:02.280
你会看到的是

19:02.280 --> 19:03.280
如果这个有

19:03.280 --> 19:04.280
那我们就color

19:04.280 --> 19:05.280
如果这个

19:05.280 --> 19:06.280
同时的话

19:06.280 --> 19:07.280
我们也写上

19:07.280 --> 19:08.280
font size

19:08.280 --> 19:11.170
看

19:11.170 --> 19:12.170
一样的可以写出来

19:12.170 --> 19:13.170
对吧

19:13.170 --> 19:14.170
好

19:14.170 --> 19:15.170
那么对于数据形式来讲的话

19:15.170 --> 19:16.170
呢

19:16.170 --> 19:17.170
特别是样式

19:17.170 --> 19:18.170
color style

19:18.170 --> 19:19.170
这两种形式

19:19.170 --> 19:20.170
你随便用哪种

19:20.170 --> 19:21.170
注意哦

19:21.170 --> 19:23.170
因为我们现在的

19:23.170 --> 19:24.170
那个mpview的话呢

19:24.170 --> 19:25.170
我们说

19:25.170 --> 19:26.170
它是为了节约性能

19:26.170 --> 19:28.170
所以它才完成了这样的

19:28.170 --> 19:29.170
我们把前面

19:29.170 --> 19:30.170
这个

19:30.170 --> 19:32.170
语句做一下

19:32.170 --> 19:33.170
就是它是为了

19:33.170 --> 19:36.990
节约性能的

19:36.990 --> 19:37.990
考虑

19:38.990 --> 19:40.990
所以我们将

19:41.990 --> 19:43.990
css和

19:44.990 --> 19:46.990
class和style

19:46.990 --> 19:48.990
全部

19:49.990 --> 19:50.990
通过

19:50.990 --> 19:55.260
表达式的形式

19:55.260 --> 19:56.260
硬

19:57.260 --> 20:02.180
编码道

20:02.180 --> 20:03.180
我们的wxml中的

20:03.180 --> 20:04.180
是

20:04.180 --> 20:05.180
它是形成这样的

20:05.180 --> 20:06.180
一个写法

20:06.180 --> 20:07.180
所以你来看

20:07.180 --> 20:08.180
在这个格式中

20:08.180 --> 20:09.180
我们

20:10.180 --> 20:11.180
看到吗

20:11.180 --> 20:12.180
它是硬编码的

20:12.180 --> 20:13.180
一种形式

20:13.180 --> 20:14.180
这是它的编码的

20:14.180 --> 20:15.180
一个

20:15.180 --> 20:16.180
那个编号

20:16.180 --> 20:17.180
我们不用去关心

20:17.180 --> 20:18.180
我们只要关心的是

20:18.180 --> 20:19.180
后面的部分

20:19.180 --> 20:20.180
怎么让它数据出来

20:20.180 --> 20:22.180
前面它不会是产生

20:22.180 --> 20:23.180
我们任何的

20:23.180 --> 20:24.180
一个显示效果的

20:24.180 --> 20:25.180
好

20:25.180 --> 20:26.180
这是我们

20:26.180 --> 20:27.180
所看到的

20:27.180 --> 20:28.180
一个格式

20:28.180 --> 20:29.180
那么

20:29.180 --> 20:30.180
我们再讲一下

20:30.180 --> 20:31.180
这是我们在pv用

20:31.180 --> 20:32.180
提到的

20:32.180 --> 20:33.180
其实它可以

20:33.180 --> 20:34.180
用我们的

20:34.180 --> 20:35.180
计算数据来操作

20:35.180 --> 20:36.180
计算数据

20:36.180 --> 20:37.180
也就是

20:37.180 --> 20:38.180
我们的一个

20:38.180 --> 20:39.180
计算属性

20:39.180 --> 20:40.180
ok

20:40.180 --> 20:41.180
那我们来看一下

20:41.180 --> 20:42.180
计算属性

20:42.180 --> 20:43.180
如果用在我们的

20:43.180 --> 20:44.180
npv中

20:44.180 --> 20:45.180
特别是

20:45.180 --> 20:46.180
对于样式的操作

20:46.180 --> 20:47.180
它可以怎么玩呢

20:47.180 --> 20:48.180
我们下面写一下

20:50.180 --> 20:51.180
我们

20:51.180 --> 20:58.070
用div

20:59.070 --> 21:02.090
计算属性

21:02.090 --> 21:04.090
这边我们给出

21:04.090 --> 21:05.090
首先是一个

21:05.090 --> 21:10.830
div

21:10.830 --> 21:12.830
我们支持的方式

21:12.830 --> 21:13.830
div

21:13.830 --> 21:16.460
我们可以自己写

21:16.460 --> 21:17.460
比如说

21:17.460 --> 21:18.460
我们有时候

21:18.460 --> 21:19.460
经常会写这个内容

21:19.460 --> 21:20.460
整个页面

21:20.460 --> 21:21.460
都会需要container

21:21.460 --> 21:22.460
无论你这container

21:22.460 --> 21:23.460
是哪一种结构

21:23.460 --> 21:24.460
所出来的

21:24.460 --> 21:25.460
比如说

21:25.460 --> 21:26.460
不得对的出来的

21:26.460 --> 21:27.460
都可以

21:27.460 --> 21:28.460
这事

21:28.460 --> 21:29.460
然后呢

21:29.460 --> 21:30.460
我们用class

21:30.460 --> 21:31.460
去等于

21:31.460 --> 21:32.460
我后边

21:32.460 --> 21:33.460
这个并不是

21:33.460 --> 21:34.460
我们的一个样式

21:34.460 --> 21:35.460
而是一个

21:35.460 --> 21:36.460
我们行为

21:36.460 --> 21:39.460
computed

21:39.460 --> 21:41.460
computed

21:41.460 --> 21:42.460
class

21:42.460 --> 21:43.460
str

21:43.460 --> 21:44.460
这样的一个格式

21:44.460 --> 21:45.460
那么我们就把

21:45.460 --> 21:47.460
这个内容

21:47.460 --> 21:48.460
直接写到我们的

21:48.460 --> 21:50.460
计算属性里面去

21:50.460 --> 21:51.460
对吧

21:51.460 --> 21:53.780
我们写到这

21:53.780 --> 21:54.780
然后在这里面呢

21:54.780 --> 21:56.780
我们做一个return返回

21:56.780 --> 21:58.780
然后我们直接把

21:58.780 --> 21:59.780
现在的一个

21:59.780 --> 22:01.780
三运算服来做操作

22:01.780 --> 22:02.780
我们就拿这个

22:02.780 --> 22:03.780
isactive

22:03.780 --> 22:04.780
我们看一下

22:04.780 --> 22:05.780
this点

22:05.780 --> 22:06.780
isactive

22:06.780 --> 22:07.780
是否是

22:07.780 --> 22:08.780
true or false

22:08.780 --> 22:10.780
如果是true的话

22:10.780 --> 22:15.370
那我们返回的是

22:15.370 --> 22:21.880
我们下面的active

22:21.880 --> 22:22.880
不然

22:22.880 --> 22:24.880
我们将直接返回的是空

22:24.880 --> 22:25.880
这个形式

22:25.880 --> 22:26.880
这样的话

22:26.880 --> 22:27.880
我就调用了

22:27.880 --> 22:29.880
我的计算属性的结构

22:29.880 --> 22:30.880
逻辑OK吧

22:30.880 --> 22:31.880
然后同时呢

22:31.880 --> 22:33.880
我们再要说明的是

22:33.880 --> 22:36.880
我们不支持的方式

22:36.880 --> 22:37.880
讲一下

22:37.880 --> 22:38.880
我们不支持的方式

22:38.880 --> 22:39.880
首先你这样的

22:39.880 --> 22:40.880
计算属性

22:40.880 --> 22:41.880
我们可以看到

22:41.880 --> 22:42.880
它这个形式

22:42.880 --> 22:43.880
我们看一下

22:43.880 --> 22:46.880
这是属于正常能够实现的

22:46.880 --> 22:49.880
这个称之为我们的

22:49.880 --> 22:50.880
计算属性

22:50.880 --> 22:51.880
不然我们前面

22:51.880 --> 22:52.880
显示不出

22:52.880 --> 22:53.880
对吧

22:53.880 --> 22:54.880
不是说我们打的不对

22:54.880 --> 22:55.880
而是属于

22:55.880 --> 22:56.880
我们有文本

22:56.880 --> 23:00.730
对吧

23:00.730 --> 23:01.730
出来了

23:01.730 --> 23:02.730
计算属性

23:02.730 --> 23:03.730
container的操作

23:03.730 --> 23:04.730
那么在接下去呢

23:04.730 --> 23:05.730
就是说

23:05.730 --> 23:06.730
它有一个不支持

23:06.730 --> 23:08.730
这个我们需要去知道一下

23:08.730 --> 23:09.730
也就是说

23:09.730 --> 23:13.230
vue支持的

23:14.230 --> 23:15.230
但是在

23:15.230 --> 23:16.230
npvue中

23:16.230 --> 23:17.230
npvue中

23:17.230 --> 23:19.230
它不支持的一种格式

23:19.230 --> 23:20.230
这个说明一下啊

23:20.230 --> 23:22.230
就是我们所谓的对象形式

23:22.230 --> 23:28.490
对象形式

23:28.490 --> 23:29.490
不支持

23:29.490 --> 23:33.340
不支持来看一下

23:33.340 --> 23:34.340
首先

23:34.340 --> 23:35.340
我们

23:35.340 --> 23:37.340
如果是这种写法

23:37.340 --> 23:39.340
比如说这里没有问题

23:40.340 --> 23:41.340
然后呢

23:41.340 --> 23:42.340
是这样的

23:42.340 --> 23:44.340
就是我们返回的时候

23:44.340 --> 23:45.340
依然是一个

23:45.340 --> 23:51.590
它要是一个objector

23:51.590 --> 23:53.590
我们把它放在这里面

23:57.440 --> 23:58.440
你注意啊

23:58.440 --> 23:59.440
它的返回

23:59.440 --> 24:00.440
是一个对象

24:00.440 --> 24:01.440
就是

24:02.440 --> 24:03.440
active

24:04.440 --> 24:05.440
active

24:05.440 --> 24:07.440
然后我直接返回

24:07.440 --> 24:08.440
当前的

24:08.440 --> 24:09.440
is

24:09.440 --> 24:11.440
activities

24:11.440 --> 24:13.440
就是这个形式呢

24:13.440 --> 24:14.440
就好比说

24:14.440 --> 24:15.440
像我们上面的

24:15.440 --> 24:16.440
这种格式

24:16.440 --> 24:18.440
但是它如果用

24:18.440 --> 24:20.440
计算属性直接这样返回

24:20.440 --> 24:22.440
我们在官网上面的说法是

24:22.440 --> 24:23.440
这个是不支持的

24:23.440 --> 24:24.440
我们现在来看一下

24:25.440 --> 24:29.200
我们的文本

24:29.200 --> 24:30.200
我们说

24:30.200 --> 24:32.200
np不支持的对象属性

24:32.200 --> 24:41.620
你来看一下啊

24:41.620 --> 24:42.620
看到吗

24:42.620 --> 24:43.620
这个

24:43.620 --> 24:44.620
我们把这个名称改一下

24:44.620 --> 24:45.620
不支持对象属性

24:45.620 --> 24:47.620
它本身在整个页面中

24:47.620 --> 24:49.620
你看到它呈现了吗

24:49.620 --> 24:52.260
对吧

24:52.260 --> 24:53.260
它这个标签压根

24:53.260 --> 24:54.260
就不在这边

24:54.260 --> 24:55.260
能够呈现出来

24:55.260 --> 24:56.260
也就意味着

24:56.260 --> 24:58.260
它不支持这样的一个写法

24:58.260 --> 24:59.260
理解吧

24:59.260 --> 25:01.260
所以这种格式

25:01.260 --> 25:02.260
一定要去分出

25:02.260 --> 25:03.260
你以前

25:03.260 --> 25:04.260
如果说

25:04.260 --> 25:06.260
你有把你的对象属性

25:06.260 --> 25:07.260
写在这里面

25:07.260 --> 25:09.260
然后让它进行返回的话

25:09.260 --> 25:10.260
那么

25:10.260 --> 25:11.260
特别在nv5中

25:11.260 --> 25:13.260
就是我们的nv5中的话呢

25:13.260 --> 25:14.260
它是不能这么用的

25:14.260 --> 25:15.260
其他的都可以

25:15.260 --> 25:16.260
知道一下

25:16.260 --> 25:17.260
OK

25:17.260 --> 25:18.260
这个的话呢

25:18.260 --> 25:19.260
我们就说一下

25:19.260 --> 25:20.260
一

25:20.260 --> 25:22.260
我们主要介绍了一下

25:22.260 --> 25:23.260
我们的对象

25:23.260 --> 25:24.260
和我们

25:24.260 --> 25:25.260
我们的class

25:25.260 --> 25:26.260
和我们的style

25:26.260 --> 25:27.260
这两种形式

25:27.260 --> 25:29.260
在npv5中怎么用

25:29.260 --> 25:30.260
并且呢

25:30.260 --> 25:32.260
我们也介绍了一下

25:32.260 --> 25:33.260
在v5中所支持的

25:33.260 --> 25:34.260
在nv5中

25:34.260 --> 25:35.260
它不支持的一种格式

25:35.260 --> 25:36.260
这样使我们呢

25:36.260 --> 25:37.260
能够区分出

25:37.260 --> 25:39.260
上面各种形式

25:39.260 --> 25:40.260
你都能用

25:40.260 --> 25:41.260
有一些呢

25:41.260 --> 25:42.260
是用对象方式来做的

25:42.260 --> 25:43.260
有些是用宿主方式

25:43.260 --> 25:44.260
那宿主里面

25:44.260 --> 25:46.260
所放置的是我们的

25:46.260 --> 25:48.260
一个变量

25:48.260 --> 25:49.260
也就是我们在

25:49.260 --> 25:51.260
data中的一个变量设定

25:51.260 --> 25:52.260
或称之为

25:52.260 --> 25:53.260
data属性设定

25:53.260 --> 25:54.260
在我们的

25:54.260 --> 25:56.260
对象中所放置的话呢

25:56.260 --> 25:57.260
那么它其实

25:57.260 --> 25:58.260
前面

25:58.260 --> 25:59.260
是一个我们的样式

25:59.260 --> 26:00.260
后面是否

26:00.260 --> 26:01.260
显示的一个破耳值

26:01.260 --> 26:02.260
OK

26:02.260 --> 26:03.260
那么

26:03.260 --> 26:04.260
这就是我们

26:04.260 --> 26:05.260
所谓的class

26:05.260 --> 26:06.260
和style

26:06.260 --> 26:09.260
在我们nv5中的使用方式

26:09.260 --> 26:10.260
好

26:10.260 --> 26:11.260
我们把这个内容

26:11.260 --> 26:13.260
我们也传一下

26:13.260 --> 26:14.260
首先

26:14.260 --> 26:15.260
我们添加一下

26:15.260 --> 26:16.260
首先在呢

26:16.260 --> 26:25.490
commit

26:25.490 --> 26:26.490
再有的就是

26:26.490 --> 26:27.490
我们提交一下

26:27.490 --> 26:44.580
好

26:44.580 --> 26:45.580
完成了

26:45.580 --> 26:46.580
线上就会有

26:46.580 --> 26:48.580
classstyle的这样一个

26:48.580 --> 26:49.580
OK

26:49.580 --> 26:50.580
大家可以去

26:50.580 --> 26:51.580
如果你之前

26:51.580 --> 26:53.580
已经有过v5的

26:53.580 --> 26:54.580
一个开发经验同学

26:54.580 --> 26:55.580
那么你眼睛

26:55.580 --> 26:56.580
只要过一下

26:56.580 --> 26:57.580
你眼睛再扫一扫

26:57.580 --> 26:58.580
然后有一个

26:58.580 --> 26:59.580
知道

26:59.580 --> 27:00.580
这么样的一个写法

27:00.580 --> 27:01.580
同时呢

27:01.580 --> 27:02.580
这些内容的话呢

27:02.580 --> 27:03.580
你一定记住

27:03.580 --> 27:05.580
是写在当前这下面

27:05.580 --> 27:06.580
类似于view的

27:06.580 --> 27:07.580
我们的

27:07.580 --> 27:08.580
component的写法

27:08.580 --> 27:09.580
好了

27:09.580 --> 27:10.580
那么这期课

27:10.580 --> 27:11.580
先讲到这里

