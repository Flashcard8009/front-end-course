WEBVTT

00:00.000 --> 00:04.000
好 我们这节课继续讲解NPVU的系列课程

00:04.000 --> 00:07.000
这节课呢 讲一下NPVU的一个Fly-O

00:07.000 --> 00:16.000
那么在之前的课程中呢 我们已经简单的完成了我们的一些自定义空间和我们小程序组建的一些结合

00:16.000 --> 00:21.000
并且呢 我们也完成了我们见面的一些简单的一些组合配用

00:21.000 --> 00:27.000
那么我们这节课呢 讲解的是我们的数据的在线获取

00:27.000 --> 00:30.000
那么在线获取呢 对于小程序来讲的话呢

00:30.000 --> 00:36.000
我们是通过request的方式啊 我们微信本身自带的一个对象

00:36.000 --> 00:38.000
wx.request

00:38.000 --> 00:41.000
我们可以去获取我们在线的一些数据

00:41.000 --> 00:44.000
那么对于NPVU来讲的话呢

00:44.000 --> 00:48.000
它其实要通过我们的其他的一些方式

00:48.000 --> 00:52.000
包括是我们这边的Fly-O 包括是excel

00:52.000 --> 00:54.000
excel的话呢 这边说一下

00:54.000 --> 00:57.000
那么之前如果你在那个view里面的话呢

00:57.000 --> 01:00.000
那么其实这种方式都可以操作

01:00.000 --> 01:03.000
但是对于NPVU来讲的话呢

01:03.000 --> 01:04.000
它不能用excel

01:04.000 --> 01:06.000
原因是在于啊

01:06.000 --> 01:11.000
excel的话呢 它的底层 它的一个xmhtp request的话呢

01:11.000 --> 01:15.000
它针对的 或者说它所对应到的是window对象

01:15.000 --> 01:18.000
而window对象呢 其实啊 我们讲

01:18.000 --> 01:22.000
它其实是针对于我们的浏览器的

01:22.000 --> 01:24.000
我们每一个浏览器

01:24.000 --> 01:27.000
它本身都有一个window对象可以操作

01:27.000 --> 01:29.000
但是小程序呢

01:29.000 --> 01:31.000
它本身是没有一个window对象

01:31.000 --> 01:33.000
我们讲到这里的时候呢

01:33.000 --> 01:34.000
我们要回忆一下

01:34.000 --> 01:36.000
原来我们在讲解小程序的时候

01:36.000 --> 01:40.000
我们说到小程序的GS是小程序内核

01:40.000 --> 01:42.000
就是Jasker-Jobin的crow

01:42.000 --> 01:44.000
它并不是完完整整全部的GS

01:44.000 --> 01:46.000
所以呢 在里面

01:46.000 --> 01:48.000
我们没有办法去调用以window对象

01:48.000 --> 01:51.000
所操作的任何的一些方法属性

01:51.000 --> 01:53.000
那么包括我们当初说的是alert

01:53.000 --> 01:55.000
这种方法都是不可以调用

01:55.000 --> 01:57.000
因为它也是属于window的

01:57.000 --> 01:59.000
那么一旦没有window的话呢

01:59.000 --> 02:01.000
这个xl的话呢 就不能用

02:01.000 --> 02:03.000
那么我们呢 就可以去用另外一个

02:03.000 --> 02:05.000
就fly.io

02:05.000 --> 02:08.000
那么这边的话呢 先要简单简单说一下

02:08.000 --> 02:09.000
fly.io啊

02:09.000 --> 02:13.000
fly.io的话呢 大家可以去打开fly.io的官网

02:13.000 --> 02:15.000
那么我们来看一下

02:15.000 --> 02:16.000
fly.io的官网的话呢

02:16.000 --> 02:19.000
它是一个我们能够很好的完成

02:19.000 --> 02:23.000
远方的或者称之为GP请求的一个请求库

02:23.000 --> 02:25.000
那么它支持呢 非常多啊

02:25.000 --> 02:27.000
无论是你现在各种浏览器都有

02:27.000 --> 02:30.000
同时呢 它支持的平台也很多

02:30.000 --> 02:33.000
我们看到这边就有一个微信小程序

02:33.000 --> 02:35.000
对吧 那么它就可以来支持

02:35.000 --> 02:38.000
我们小程序的一个开发

02:38.000 --> 02:40.000
那么它的支持呢 它的好处是哪些

02:40.000 --> 02:41.000
我们看一下

02:41.000 --> 02:43.000
它是提供了统一的我们的

02:43.000 --> 02:45.000
称为Promise的API

02:45.000 --> 02:47.000
API统一结构以后的话呢

02:47.000 --> 02:49.000
我们其实在哪儿都可以使用

02:49.000 --> 02:51.000
第二呢 它非常轻

02:51.000 --> 02:53.000
我们只需要简单的安装

02:53.000 --> 02:56.000
它其实是一个GS文件

02:56.000 --> 02:58.000
再有呢 它本身只要支持加速

02:58.000 --> 03:00.000
加速本运行的环境

03:00.000 --> 03:01.000
都可以操作

03:01.000 --> 03:03.000
同时它自己还有请求

03:03.000 --> 03:04.000
响应的拦截器啊

03:04.000 --> 03:06.000
包括是它自己的一个接参数据啊

03:06.000 --> 03:08.000
包括这些都可以得到

03:08.000 --> 03:09.000
接参数据的话呢

03:09.000 --> 03:12.000
是它自己能够进行转换的

03:12.000 --> 03:15.000
应该讲 我们现在好多的平台

03:15.000 --> 03:18.000
除了它自身所携带的

03:18.000 --> 03:20.000
阿迦克斯或者阿迦克斯

03:20.000 --> 03:22.000
分装的一些组件以外

03:22.000 --> 03:24.000
那么我们也可以使用到

03:24.000 --> 03:27.000
就是Excel或者Fly.io的这种的写法

03:27.000 --> 03:29.000
那么首先呢 我们说一下

03:29.000 --> 03:31.000
那么观摩上面具体的一些操作呢

03:31.000 --> 03:34.000
大家可以一个一个简单去看

03:34.000 --> 03:36.000
那么这边呢 就直接给大家来

03:36.000 --> 03:38.000
讲解它的一个操作

03:38.000 --> 03:39.000
一个使用

03:39.000 --> 03:41.000
首先我们看到

03:41.000 --> 03:43.000
它的访问方式

03:43.000 --> 03:44.000
有好几种

03:44.000 --> 03:46.000
无论你现在是通过引用的

03:46.000 --> 03:48.000
还是那个CDN的

03:48.000 --> 03:49.000
还是UMD的

03:49.000 --> 03:51.000
或者讲你直接是NPN的安装

03:51.000 --> 03:52.000
那么我们这边呢

03:52.000 --> 03:54.000
就直接做的是NPN的安装

03:54.000 --> 03:56.000
做这样的一个操作

03:56.000 --> 03:58.000
那么安装很简单啊

03:58.000 --> 03:59.000
你只要打开

03:59.000 --> 04:00.000
像你看到我这边

04:00.000 --> 04:01.000
因为我之前安装过

04:01.000 --> 04:03.000
所以的话呢 你们看到

04:03.000 --> 04:05.000
如果说你现在打入了

04:05.000 --> 04:08.000
我们现在的那个

04:08.000 --> 04:10.000
NPN Store Fly.io的话

04:10.000 --> 04:11.000
它其实很快啊

04:11.000 --> 04:12.000
它就能装好

04:12.000 --> 04:14.000
现在Fly.io的0.6.14版本

04:14.000 --> 04:16.000
那么装的位置呢

04:16.000 --> 04:18.000
一定是你当前的项目

04:18.000 --> 04:21.000
你可以用我们的NPN的命令

04:21.000 --> 04:23.000
装完以后很快

04:23.000 --> 04:24.000
那么装好以后的话呢

04:24.000 --> 04:25.000
我们接下去的操作

04:25.000 --> 04:27.000
它就是一个引入操作

04:27.000 --> 04:29.000
在引入过程中呢

04:29.000 --> 04:31.000
它会分你不同的程序

04:31.000 --> 04:34.000
用不同的引入方式来做

04:34.000 --> 04:36.000
它比如说React Native

04:36.000 --> 04:37.000
或者Noder

04:37.000 --> 04:39.000
它用的是我们的这样的

04:39.000 --> 04:41.000
就是直接是Fly的引入

04:41.000 --> 04:43.000
如果说你现在

04:43.000 --> 04:44.000
说是你自身可以创建

04:44.000 --> 04:45.000
你也可以这样

04:45.000 --> 04:46.000
那么我们看到

04:46.000 --> 04:48.000
它这边提供了一个

04:48.000 --> 04:49.000
小程序的引入入口

04:49.000 --> 04:50.000
那么小程序

04:50.000 --> 04:52.000
我们就可以用这样的方式

04:52.000 --> 04:54.000
但是这边要说一下

04:54.000 --> 04:56.000
它写的是我们的Require

04:56.000 --> 04:59.000
这是CommonJS的一种格式

04:59.000 --> 05:01.000
那么我们的小程序呢

05:01.000 --> 05:03.000
我们一般用的是Import

05:03.000 --> 05:04.000
那个ES6的格式

05:04.000 --> 05:06.000
所以我们把它换成

05:06.000 --> 05:08.000
ES6的格式就可以了

05:08.000 --> 05:09.000
然后呢

05:09.000 --> 05:10.000
我们下面看到

05:10.000 --> 05:11.000
还有其他的引入方式

05:11.000 --> 05:13.000
我们现在暂时先不用管

05:13.000 --> 05:15.000
那么一旦你有时间的话呢

05:15.000 --> 05:16.000
你可以简单了解一下

05:16.000 --> 05:18.000
包括是什么小

05:18.000 --> 05:19.000
支付宝小程序的啊

05:19.000 --> 05:21.000
包括是快速引入啊

05:21.000 --> 05:22.000
这些都可以

05:22.000 --> 05:23.000
那么我们直接往下看

05:23.000 --> 05:24.000
看到它的例子

05:24.000 --> 05:27.000
它一旦上面引入以后的话呢

05:27.000 --> 05:29.000
你就可以发起请求

05:29.000 --> 05:30.000
首先看到Gate方式

05:30.000 --> 05:31.000
Gate方式很简单

05:31.000 --> 05:33.000
它需要的是Fly

05:33.000 --> 05:35.000
对象有一个方法叫Gate

05:35.000 --> 05:38.000
然后完成你现在给它一个网址

05:38.000 --> 05:40.000
就是我们所谓的API的接口

05:40.000 --> 05:41.000
然后后面是ZenCatch

05:41.000 --> 05:42.000
这是一个通用的

05:42.000 --> 05:45.000
我们说是基本上是都见过

05:45.000 --> 05:47.000
然后呢也可以

05:47.000 --> 05:49.000
你不用通过我们的

05:49.000 --> 05:51.000
就是QuireStream的方式

05:51.000 --> 05:52.000
你也可以通过

05:52.000 --> 05:54.000
我们现在的这样的大过号

05:54.000 --> 05:56.000
我称之为对象型

05:56.000 --> 05:58.000
然后把数据传给它

05:58.000 --> 06:00.000
虽然说是以对象方式传

06:00.000 --> 06:02.000
但是它其实传送的模式

06:02.000 --> 06:03.000
还是Gate

06:03.000 --> 06:04.000
然后同时呢

06:04.000 --> 06:06.000
我们看到它的Post也可以

06:06.000 --> 06:08.000
Post的形式和我们刚才所看到的

06:08.000 --> 06:11.000
Gate对象形式是一样的

06:11.000 --> 06:12.000
直接这样传送

06:12.000 --> 06:14.000
如果数据有获取到的话

06:14.000 --> 06:16.000
那么它直接通过Zen的方式

06:16.000 --> 06:17.000
我们直接获取到

06:17.000 --> 06:19.000
如果说你现在有错误的话

06:19.000 --> 06:21.000
那么它被Catch抓取

06:21.000 --> 06:22.000
那么当然

06:22.000 --> 06:25.000
你也可以有一种叫做URL的方式

06:25.000 --> 06:26.000
URL的方式呢

06:26.000 --> 06:28.000
就是你直接用Gate的方式

06:28.000 --> 06:30.000
直接给出

06:30.000 --> 06:31.000
咱们看

06:31.000 --> 06:33.000
直接给出这样的一个地址

06:33.000 --> 06:35.000
然后你可以后面接

06:35.000 --> 06:37.000
同时也可以给餐

06:37.000 --> 06:38.000
这样的方式都行

06:38.000 --> 06:39.000
那么你给的餐呢

06:39.000 --> 06:41.000
最终URL还是会把它拼接到

06:41.000 --> 06:43.000
我们Gate的后面

06:43.000 --> 06:44.000
随便你怎么写

06:44.000 --> 06:46.000
它永远是一种Gate提交模式嘛

06:46.000 --> 06:47.000
然后呢

06:47.000 --> 06:50.000
你也可以是发起多端请求

06:50.000 --> 06:51.000
我们称之为

06:51.000 --> 06:52.000
那么就是说你可能

06:52.000 --> 06:53.000
这边要Gate一个

06:53.000 --> 06:54.000
这边两个

06:54.000 --> 06:56.000
那么你可以Gate all

06:56.000 --> 06:58.000
不是那个就是Fly all的方式

06:58.000 --> 07:00.000
然后同时写上去

07:00.000 --> 07:01.000
这个也行

07:01.000 --> 07:04.000
包括还有好多的几个方法

07:04.000 --> 07:05.000
大家可以去关注一下

07:05.000 --> 07:06.000
那么我们呢

07:06.000 --> 07:07.000
现在呢

07:07.000 --> 07:08.000
就给大家来讲解一下

07:08.000 --> 07:09.000
蓝接气的话

07:09.000 --> 07:10.000
那也是一样

07:10.000 --> 07:12.000
它是在开始和结束之前

07:12.000 --> 07:14.000
那么可以做一些

07:14.000 --> 07:16.000
预处理或者响应的事情

07:16.000 --> 07:17.000
那我们就从头开始

07:17.000 --> 07:18.000
来给他讲解一下

07:18.000 --> 07:19.000
他的操作

07:19.000 --> 07:21.000
首先第一步的话呢

07:21.000 --> 07:22.000
我们说

07:22.000 --> 07:24.000
我们这边已经把它引入进来了

07:24.000 --> 07:26.000
所以我现在就不再去做

07:26.000 --> 07:28.000
我们安装好了

07:28.000 --> 07:30.000
我们不再做安装操作

07:30.000 --> 07:32.000
如果说你已经安装过

07:32.000 --> 07:33.000
发生有问题了

07:33.000 --> 07:35.000
那么你很简单

07:35.000 --> 07:37.000
你可以做一个install

07:38.000 --> 07:39.000
install对吧

07:39.000 --> 07:41.000
你把Fly all卸掉

07:41.000 --> 07:43.000
然后重新装一下就可以了

07:43.000 --> 07:45.820
我们回来

07:45.820 --> 07:47.820
那么在整个过程中呢

07:47.820 --> 07:48.820
我们往后看一下

07:48.820 --> 07:50.820
刚才我的所有内容在BBT上

07:50.820 --> 07:52.820
这边简单的文字就出来了

07:52.820 --> 07:53.820
首先你官网看到

07:53.820 --> 07:55.820
用npm的那个store的方式

07:55.820 --> 07:57.820
然后完成它的安装

07:57.820 --> 07:58.820
第二步呢我们做引入

07:58.820 --> 07:59.820
引入的时候呢

07:59.820 --> 08:01.820
官网是用的是require

08:01.820 --> 08:03.820
我们换成 import from

08:03.820 --> 08:04.820
然后呢

08:04.820 --> 08:05.820
把它的对枪拿进来以后

08:05.820 --> 08:07.820
形成一个我们的对枪创建

08:07.820 --> 08:09.820
创建以后这个Fly

08:09.820 --> 08:11.820
你就可以在哪里所使用的时候

08:11.820 --> 08:13.820
你就可以直接做这样的操作了

08:13.820 --> 08:15.820
当然在我们的npview中的话

08:15.820 --> 08:17.820
我们还要原形化一下

08:17.820 --> 08:18.820
preparative type

08:18.820 --> 08:19.820
ok

08:19.820 --> 08:21.820
那么现在就给大家演示一下吧

08:22.820 --> 08:24.820
包括是请求还有好多的

08:24.820 --> 08:25.820
包括是get的这种模式

08:25.820 --> 08:27.820
post的这种模式都可以

08:28.820 --> 08:31.820
Fly all的请求request的模式

08:32.820 --> 08:33.820
好

08:33.820 --> 08:35.820
我们来给大家快速的演示一下

08:35.820 --> 08:37.820
我们还是进入原先的这样的

08:37.820 --> 08:38.820
一个界面

08:38.820 --> 08:40.820
然后呢我们单独形成一个

08:40.820 --> 08:47.720
我们把它收一下

08:48.720 --> 08:50.720
我们单独在src

08:50.720 --> 08:51.720
下面的pages

08:51.720 --> 08:53.720
下面再建一个目录

08:53.720 --> 08:57.350
我们称之为fly old

08:58.350 --> 08:59.350
操作

08:59.350 --> 09:03.880
man.js

09:03.880 --> 09:09.020
充件他的index.ve

09:09.020 --> 09:14.790
对吧

09:14.790 --> 09:15.790
我们把这个建好

09:15.790 --> 09:16.790
然后呢

09:16.790 --> 09:19.790
我们把里面的基础结构都搭好

09:19.790 --> 09:35.480
好了

09:35.480 --> 09:36.480
这是一个基础的

09:36.480 --> 09:37.480
然后呢

09:37.480 --> 09:39.480
你可以在这边还可以俱建

09:39.480 --> 09:43.820
我们的那个

09:43.820 --> 09:47.280
mounted

09:47.280 --> 09:49.980
这是什么

09:49.980 --> 09:50.980
构造

09:50.980 --> 09:56.550
对吧

09:56.550 --> 10:05.240
应该叫生命周期

10:05.240 --> 10:06.240
构造来说

10:06.240 --> 10:07.240
他是在加载后的

10:07.240 --> 10:08.240
那么你在前面

10:08.240 --> 10:10.240
你要用before mounted

10:10.240 --> 10:11.240
都是一样的

10:11.240 --> 10:12.240
然后呢

10:12.240 --> 10:13.240
我们把这个结构

10:13.240 --> 10:14.240
搭好以后的话呢

10:14.240 --> 10:15.240
第一步

10:15.240 --> 10:16.240
我们刚才说的是

10:16.240 --> 10:18.240
已经把它给

10:18.240 --> 10:19.240
引进来了

10:19.240 --> 10:20.240
对吧

10:20.240 --> 10:21.240
第二步方式呢

10:21.240 --> 10:22.240
我们去

10:22.240 --> 10:23.240
我们先装载了

10:23.240 --> 10:24.240
第二步的话呢

10:24.240 --> 10:25.240
我们这样做

10:25.240 --> 10:26.240
我们呢

10:26.240 --> 10:27.240
跑到现在的

10:27.240 --> 10:28.240
有好多做法

10:28.240 --> 10:29.240
我们现在用

10:29.240 --> 10:30.240
第一个方式

10:30.240 --> 10:31.240
跑到他的utl

10:31.240 --> 10:34.240
我们找到他的utl文件家

10:34.240 --> 10:35.240
我们在下面去

10:35.240 --> 10:36.240
新建一个

10:36.240 --> 10:37.240
在这儿

10:37.240 --> 10:38.240
新建一个文件

10:38.240 --> 10:44.450
我们称为request.js

10:44.450 --> 10:46.450
新建一个request

10:46.450 --> 10:47.450
在里面呢

10:47.450 --> 10:48.450
我们做一个

10:48.450 --> 10:50.450
inpart

10:50.450 --> 10:52.450
导入

10:52.450 --> 10:54.450
那么这边的话呢

10:54.450 --> 10:55.450
我们说的

10:55.450 --> 10:57.450
那么导入的内容

10:57.450 --> 10:58.450
依然是我们

10:58.450 --> 10:59.450
回到他的官网上面

10:59.450 --> 11:00.450
官网上面

11:00.450 --> 11:02.450
我们所看到的

11:02.450 --> 11:04.450
引入的这一部分

11:04.450 --> 11:05.450
千万别

11:05.450 --> 11:06.450
直接躲

11:06.450 --> 11:07.450
flile

11:07.450 --> 11:08.450
我们要引的是这个

11:08.450 --> 11:13.210
我们把它给引进来

11:13.210 --> 11:14.210
这是第一步

11:14.210 --> 11:16.210
第二步呢

11:16.210 --> 11:17.210
我们

11:17.210 --> 11:21.610
创建对象

11:21.610 --> 11:23.610
我们Constar

11:23.610 --> 11:25.610
Fly

11:25.610 --> 11:27.610
New

11:27.610 --> 11:28.610
Fly在这边

11:28.610 --> 11:29.610
这个结构

11:29.610 --> 11:30.610
对大家来讲呢

11:30.610 --> 11:31.610
如果用过同学

11:31.610 --> 11:32.610
应该是很熟

11:32.610 --> 11:33.610
第三步

11:33.610 --> 11:34.610
暴露接口

11:34.610 --> 11:42.680
暴露对象

11:42.680 --> 11:44.680
暴露对象

11:44.680 --> 11:46.680
Expert

11:46.680 --> 11:48.680
Default

11:48.680 --> 11:49.680
FLY

11:49.680 --> 11:51.680
你把它暴露出来

11:51.680 --> 11:53.680
一旦你暴露出来以后的话呢

11:53.680 --> 11:56.680
那么我们在哪一个地方

11:56.680 --> 11:58.680
需要对它进行一个

11:58.680 --> 12:00.680
原型化处理呢

12:00.680 --> 12:03.680
在我们的

12:03.680 --> 12:04.680
全局文件中

12:04.680 --> 12:06.680
在我们的全局文件中

12:06.680 --> 12:07.680
全局文件是哪一个

12:07.680 --> 12:09.680
Mandian.js

12:09.680 --> 12:10.680
我们在这里面

12:10.680 --> 12:11.680
我们去完成

12:11.680 --> 12:12.680
对它的一个

12:12.680 --> 12:14.680
全局的Purpose的注册

12:14.680 --> 12:16.680
所以我们在这边

12:16.680 --> 12:18.680
做一个引入

12:18.680 --> 12:20.680
你把你刚才

12:20.680 --> 12:21.680
所写的这个

12:21.680 --> 12:22.680
require文件

12:22.680 --> 12:24.680
给引进来

12:24.680 --> 12:25.680
这里边不是有

12:25.680 --> 12:27.680
我们所谓的那个

12:27.680 --> 12:28.680
刚才写的一些

12:28.680 --> 12:29.680
操作吗

12:29.680 --> 12:31.680
对吧

12:31.680 --> 12:33.680
我们刚才有一个暴露接口

12:33.680 --> 12:34.680
Fly嘛

12:34.680 --> 12:36.680
我们把这个Fly接下来

12:36.680 --> 12:37.680
我们写上

12:37.680 --> 12:39.680
这边是Fly

12:41.680 --> 12:42.680
From

12:42.680 --> 12:47.340
Utils

12:47.340 --> 12:48.340
Request

12:48.340 --> 12:50.340
把它拿过来

12:50.340 --> 12:52.340
那么一旦拿过来以后呢

12:52.340 --> 12:53.340
它本身自己

12:53.340 --> 12:54.340
就是Fly对象了

12:54.340 --> 12:55.340
我们直接可以

12:55.340 --> 12:57.340
把它作为一个

12:57.340 --> 13:01.290
原型注册

13:01.290 --> 13:02.290
做法就是

13:02.290 --> 13:05.290
拿着ve

13:05.290 --> 13:06.290
我们点

13:11.730 --> 13:12.730
我们注册成

13:12.730 --> 13:13.730
自己写个名称

13:13.730 --> 13:14.730
比如说我就写Fly

13:14.730 --> 13:15.730
然后

13:15.730 --> 13:16.730
把当前的这个对象

13:16.730 --> 13:17.730
注册上去

13:17.730 --> 13:19.730
一旦你这样注册了呢

13:19.730 --> 13:20.730
那这个

13:20.730 --> 13:21.730
DotlFly

13:21.730 --> 13:22.730
你可以在哪里

13:22.730 --> 13:23.730
想使用的时候

13:23.730 --> 13:24.730
都可以使用到

13:24.730 --> 13:25.730
它代表的

13:25.730 --> 13:26.730
就是这个Fly对象

13:26.730 --> 13:28.730
而这个Fly对象

13:28.730 --> 13:30.730
本身就是由我们的

13:30.730 --> 13:31.730
导入的这个

13:31.730 --> 13:32.730
微信的Fly

13:32.730 --> 13:33.730
所创建的

13:33.730 --> 13:34.730
所以它里面的方法

13:34.730 --> 13:35.730
你都可以在这儿

13:35.730 --> 13:37.730
直接使用了

13:37.730 --> 13:38.730
好

13:38.730 --> 13:39.730
那么现在呢

13:39.730 --> 13:40.730
我们去到

13:40.730 --> 13:41.730
我们刚刚创建的

13:41.730 --> 13:42.730
这个界面

13:42.730 --> 13:44.730
我们刚刚创建的是Fly.io

13:44.730 --> 13:45.730
所以呢

13:45.730 --> 13:46.730
我们把它放在

13:46.730 --> 13:47.730
app.json.com

13:47.730 --> 13:49.730
放在最前面

13:49.730 --> 13:53.700
Pager

13:53.700 --> 13:57.300
Pagers

13:57.300 --> 13:58.300
Fly.io

13:58.300 --> 13:59.300
下面的

13:59.300 --> 14:00.300
面

14:00.300 --> 14:02.670
然后呢

14:02.670 --> 14:03.670
我们把它

14:03.670 --> 14:05.670
进行一次重新的

14:05.670 --> 14:06.670
暴动

14:06.670 --> 14:07.670
然后我们需要

14:07.670 --> 14:08.670
这是我们之前做的

14:08.670 --> 14:09.670
对吧

14:09.670 --> 14:10.670
我们把它先关一下

14:10.670 --> 14:11.670
然后此时

14:11.670 --> 14:13.670
我们把它重启一下

14:13.670 --> 14:23.020
好了

14:23.020 --> 14:24.020
然后再打开一下

14:24.020 --> 14:25.020
我们的

14:26.020 --> 14:27.020
Web

14:27.020 --> 14:28.020
微信

14:28.020 --> 14:29.020
开发工具

14:46.440 --> 14:47.440
它这样的话

14:47.440 --> 14:48.440
我们还要重新

14:48.440 --> 14:49.440
再编一下

14:49.440 --> 14:50.440
就代表它现在

14:50.440 --> 14:51.440
这个文件

14:51.440 --> 14:57.080
咱们看美宝存是吧

14:57.080 --> 15:01.800
我们把重新再开一下

15:01.800 --> 15:02.800
重新启一下

15:02.800 --> 15:26.870
我们打开一下

15:26.870 --> 15:28.870
应该现在你看到的

15:28.870 --> 15:30.870
应该是一个空文件夹

15:30.870 --> 15:32.870
空页面

15:33.870 --> 15:35.870
它这边还有

15:35.870 --> 15:36.870
它说是没找到

15:36.870 --> 15:38.870
这个Mand-in.js

15:38.870 --> 15:39.870
啊

15:39.870 --> 15:40.870
原因在这

15:40.870 --> 15:41.870
我们的Mand-in.js

15:41.870 --> 15:42.870
没写对吧

15:42.870 --> 15:43.870
我们把这段

15:43.870 --> 15:44.870
复制过来就可以了

15:44.870 --> 15:51.610
复制一下

15:51.610 --> 15:52.610
你看

15:52.610 --> 15:53.610
现在它是不是好了

15:53.610 --> 15:54.610
对吧

15:54.610 --> 15:55.610
OK

15:55.610 --> 15:56.610
那现在呢

15:56.610 --> 15:57.610
我们已经完成了

15:57.610 --> 15:58.610
现在的1

15:58.610 --> 15:59.610
我们把对象装好了

15:59.610 --> 16:00.610
把它导入进来了

16:00.610 --> 16:02.610
并且生成对象了

16:02.610 --> 16:03.610
然后把它暴露出来以后呢

16:03.610 --> 16:04.610
在Mand-in.js

16:04.610 --> 16:06.610
我们做了一个圆形注册

16:06.610 --> 16:07.610
所以在页面中

16:07.610 --> 16:08.610
直接可以使用了

16:08.610 --> 16:10.610
我们就跑到页面中来操作

16:10.610 --> 16:11.610
首先呢

16:11.610 --> 16:12.610
我们把它

16:12.610 --> 16:13.610
现在

16:13.610 --> 16:14.610
在

16:14.610 --> 16:16.610
它的Mounted里面

16:16.610 --> 16:17.610
我们加载

16:17.610 --> 16:19.610
this.

16:19.610 --> 16:22.610
我们去要它的这个

16:22.610 --> 16:24.610
我们用它里面的

16:24.610 --> 16:25.610
什么方法呢

16:25.610 --> 16:26.610
get

16:26.610 --> 16:28.610
那么在get里面

16:28.610 --> 16:29.610
我们要写上的是

16:29.610 --> 16:31.610
现在的一个你的网址

16:31.610 --> 16:32.610
所以我们在前面

16:32.610 --> 16:34.610
我们在这儿订一下

16:34.610 --> 16:35.610
const

16:35.610 --> 16:37.610
我们写上

16:37.610 --> 16:39.610
我们来个电影网址

16:40.610 --> 16:41.610
这个网址呢

16:41.610 --> 16:43.610
你需要去获得到一个数据

16:44.610 --> 16:45.610
那么在线呢

16:45.610 --> 16:46.610
我们去看一下

16:46.610 --> 16:48.610
我们有一个数据

16:48.610 --> 16:49.610
我们有一个网址

16:49.610 --> 16:50.610
这是

16:50.610 --> 16:52.610
线上的一个朋友

16:54.610 --> 16:56.980
我们看到

16:56.980 --> 16:58.980
我们有一个这个网址

16:58.980 --> 17:00.980
它可以有一个数据的返回

17:00.980 --> 17:02.980
我们就拿它这个来做

17:02.980 --> 17:04.980
大家可以拿这个做测试

17:05.980 --> 17:07.980
当你拿了这个以后的话

17:07.980 --> 17:08.980
那么我们现在

17:08.980 --> 17:09.980
直接可以

17:10.980 --> 17:11.980
我们把它

17:11.980 --> 17:14.550
放在这儿

17:17.950 --> 17:18.950
这是一个网址

17:18.950 --> 17:20.950
我们直接把这个地址

17:20.950 --> 17:21.950
放进来

17:21.950 --> 17:22.950
放这儿

17:23.950 --> 17:25.950
我们把它做一个长量处理

17:25.950 --> 17:26.950
那么接下去

17:26.950 --> 17:27.950
后面的就是

17:27.950 --> 17:28.950
我们接收

17:28.950 --> 17:29.950
对吧

17:30.950 --> 17:31.950
function

17:33.950 --> 17:34.950
response

17:34.950 --> 17:35.950
接收到数据

17:35.950 --> 17:36.950
如果数据

17:36.950 --> 17:37.950
接收到的情况

17:37.950 --> 17:38.950
我们在这儿打印一下

17:41.580 --> 17:42.580
然后呢

17:43.580 --> 17:44.580
catch

17:45.580 --> 17:47.580
一旦有问题的话

17:47.580 --> 17:48.580
array

17:48.580 --> 17:50.580
在这儿打印一下

17:50.580 --> 17:52.580
console.log

17:53.580 --> 17:54.580
array

17:54.580 --> 17:55.580
这样处理

17:55.580 --> 17:56.580
那我们现在来看一下

17:56.580 --> 17:57.580
它究竟能不能给我

17:57.580 --> 17:59.580
正常的数据返回

18:00.580 --> 18:01.580
刷新一下

18:01.580 --> 18:02.580
我们来看

18:03.580 --> 18:04.580
看最后一行

18:04.580 --> 18:05.580
前面这两个

18:05.580 --> 18:06.580
是什么

18:06.580 --> 18:07.580
构造函数

18:07.580 --> 18:08.580
对吧

18:08.580 --> 18:09.580
两个crate

18:09.580 --> 18:10.580
看最后一行

18:10.580 --> 18:12.580
它会有一个叫做

18:12.580 --> 18:13.580
status texture

18:13.580 --> 18:14.580
告诉你request ok

18:14.580 --> 18:16.580
表示正常数据

18:16.580 --> 18:17.580
然后这边打开以后

18:17.580 --> 18:18.580
我们会发现

18:18.580 --> 18:20.580
这里边有数据了

18:20.580 --> 18:21.580
数据在哪里呢

18:21.580 --> 18:22.580
你发现吗

18:22.580 --> 18:23.580
在data里面有

18:23.580 --> 18:25.580
data在哪里呢

18:25.580 --> 18:27.580
在这个subjects里面

18:27.580 --> 18:28.580
subjects里面

18:28.580 --> 18:29.580
我们打开

18:29.580 --> 18:30.580
看到吗

18:30.580 --> 18:31.580
这个数据就出来了

18:31.580 --> 18:32.580
有多少条呢

18:32.580 --> 18:34.580
我们有20条数据

18:34.580 --> 18:35.580
我们打开看一看

18:35.580 --> 18:37.580
是不是里面

18:37.580 --> 18:39.580
国家影片的一些

18:39.580 --> 18:40.580
信息就出来了

18:40.580 --> 18:41.580
所以我们的

18:41.580 --> 18:42.580
这个操作

18:42.580 --> 18:44.580
是可以进行

18:44.580 --> 18:45.580
数据获取了

18:45.580 --> 18:46.580
我们把它

18:46.580 --> 18:48.580
这个拿一下

18:48.580 --> 18:51.580
它是在data的subjects里面

18:51.580 --> 18:53.580
我们在这儿

18:53.580 --> 18:58.580
它的data的subjects

18:58.580 --> 19:00.580
保存

19:00.580 --> 19:03.580
刷新 编译

19:03.580 --> 19:05.580
是不是2条数据出来了

19:05.580 --> 19:06.580
这2条数据

19:06.580 --> 19:07.580
它是一个什么结构呢

19:07.580 --> 19:09.580
它是一个

19:09.580 --> 19:10.580
那个

19:10.580 --> 19:11.580
速足

19:11.580 --> 19:13.580
所以我们在界面中

19:13.580 --> 19:15.580
我们就直接在当前

19:15.580 --> 19:17.580
我们可以做一个循环

19:17.580 --> 19:18.580
做一个我们的

19:18.580 --> 19:19.580
那个v4

19:19.580 --> 19:20.580
对吧

19:20.580 --> 19:23.580
我们来做它的一个显示

19:23.580 --> 19:25.580
我们来

19:25.580 --> 19:27.580
最简单的方式

19:27.580 --> 19:28.580
我们把数据全拿出来

19:28.580 --> 19:29.580
之后我们来

19:29.580 --> 19:30.580
做排版

19:30.580 --> 19:31.580
首先

19:31.580 --> 19:32.580
第一个

19:32.580 --> 19:33.580
我们一边看一边拿

19:33.580 --> 19:38.110
它里边有哪些呢

19:38.110 --> 19:40.110
在一个数据里面

19:40.110 --> 19:42.110
有国家对吧

19:42.110 --> 19:47.130
我们在这边

19:47.130 --> 19:51.100
v4

19:51.100 --> 19:53.100
item in

19:53.100 --> 19:55.100
我们把这个数据

19:55.100 --> 19:59.060
可以拿出来

19:59.060 --> 20:02.940
我们把它写到这儿

20:02.940 --> 20:06.380
这个我们称之为叫做

20:06.380 --> 20:09.380
movice lister

20:09.380 --> 20:11.380
默认给一个空

20:11.380 --> 20:14.380
把这数据付给它

20:14.380 --> 20:16.380
这是

20:16.380 --> 20:18.380
movice list

20:18.380 --> 20:20.380
整语

20:20.380 --> 20:30.610
你现在的这个

20:30.610 --> 20:32.610
紧接着我们往上

20:32.610 --> 20:33.610
这边还没写完

20:33.610 --> 20:34.610
不用紧张

20:34.610 --> 20:37.610
然后我们把这个movice list

20:37.610 --> 20:41.750
复制上去

20:41.750 --> 20:45.900
可以给出index

20:45.900 --> 20:46.900
紧接着我们下面

20:46.900 --> 20:48.900
来完成你现在的显示

20:48.900 --> 20:49.900
比如说

20:49.900 --> 20:54.360
我们就拿这个来

20:54.360 --> 20:56.800
国家

20:56.800 --> 21:01.260
item里面的

21:01.260 --> 21:02.260
哪一个

21:02.260 --> 21:08.930
我们把它

21:08.930 --> 21:09.930
注意一下

21:09.930 --> 21:11.930
我们在这边还得显示一下

21:11.930 --> 21:23.110
我们让它看一下这一块

21:23.110 --> 21:26.940
它是有一个

21:26.940 --> 21:28.940
countries

21:28.940 --> 21:30.940
countries它还是一个数组

21:30.940 --> 21:32.940
countries还是一个数组

21:32.940 --> 21:34.940
所以我们依然需要去获取

21:34.940 --> 21:36.940
我们通过这来

21:36.940 --> 21:38.940
item.countries

21:38.940 --> 21:40.940
我们拿0

21:40.940 --> 21:47.600
ok

21:47.600 --> 21:48.600
好

21:48.600 --> 21:49.600
紧接着我们继续

21:49.600 --> 21:55.000
发现它现在数据是取出来了

21:55.000 --> 21:56.000
但是问题是

21:56.000 --> 21:57.000
它现在告诉我

21:57.000 --> 21:58.000
有一个movice list

21:58.000 --> 21:59.000
没有认识

21:59.000 --> 22:00.000
我们来看一下

22:00.000 --> 22:02.000
当前的这个movice list

22:02.000 --> 22:03.000
一定和你现在的

22:03.000 --> 22:05.000
这个v4的movice list

22:05.000 --> 22:06.000
是一致的

22:06.000 --> 22:07.000
然后这个里面

22:07.000 --> 22:08.000
我们刚才也看到

22:08.000 --> 22:09.000
也数据了

22:09.000 --> 22:10.000
那指的肯定是它了

22:10.000 --> 22:12.000
它的原因在哪里呢

22:12.000 --> 22:14.000
原因是在于

22:14.000 --> 22:16.000
这个问题

22:16.000 --> 22:18.000
function它本身所指的是

22:18.000 --> 22:20.000
我们的get实力对象

22:20.000 --> 22:23.000
所以我需要上下文对应关系的话

22:23.000 --> 22:25.000
应该把它改成

22:25.000 --> 22:28.400
健投服

22:28.400 --> 22:29.400
此时你再上行

22:29.400 --> 22:30.400
保存

22:30.400 --> 22:32.400
来看一下页面

22:32.400 --> 22:33.400
是不是出来了

22:33.400 --> 22:34.400
国家都出来了

22:34.400 --> 22:36.400
然后我们把其他的几个内容

22:36.400 --> 22:38.400
再拿制一下

22:38.400 --> 22:39.400
之后外乎就是

22:39.400 --> 22:41.400
我们把界面给拍一下了吧

22:41.400 --> 22:43.400
是这个逻辑了吧

22:43.400 --> 22:44.400
ok

22:44.400 --> 22:46.400
我们现在来看一下

22:46.400 --> 22:48.400
首先我们有一个国家

22:48.400 --> 22:49.400
然后呢

22:49.400 --> 22:51.400
我们这边的话呢

22:51.400 --> 22:52.400
我们打开看一下

22:52.400 --> 22:53.400
我们有一个

22:53.400 --> 22:58.950
几几年的对吧

22:58.950 --> 23:01.950
我们都打开来看一下

23:01.950 --> 23:07.700
然后这边的话呢

23:07.700 --> 23:08.700
我们有一个title

23:08.700 --> 23:23.620
标题

23:23.620 --> 23:24.620
itm.

23:24.620 --> 23:27.620
我们的title

23:27.620 --> 23:33.410
然后整个这块的话呢

23:33.410 --> 23:35.410
我们这边可以做一个样式

23:35.410 --> 23:37.410
做一个样式

23:37.410 --> 23:39.410
这个样式主要的就是

23:39.410 --> 23:42.410
我们的页面稍微大一点

23:42.410 --> 23:43.410
或者说称的高一点

23:43.410 --> 23:44.410
我们

23:44.410 --> 23:46.410
称之为

23:46.410 --> 23:52.020
item movie

23:52.020 --> 23:53.020
item movie

23:53.020 --> 23:58.740
在底部

23:58.740 --> 24:01.740
我们说给他做一个padding

24:01.740 --> 24:02.740
padding

24:02.740 --> 24:04.740
上下左右个离开

24:04.740 --> 24:05.740
10gapx

24:05.740 --> 24:07.740
并且底部

24:07.740 --> 24:11.650
bottom

24:11.650 --> 24:26.740
bottom button

24:26.740 --> 24:27.740
bottom

24:27.740 --> 24:28.740
边框

24:28.740 --> 24:29.740
给他做一个

24:29.740 --> 24:33.240
一向素的

24:33.240 --> 24:37.960
solid的

24:37.960 --> 24:41.530
做一个这个格式出来

24:41.530 --> 24:44.800
看到了吗

24:44.800 --> 24:45.800
我们这样出来了

24:45.800 --> 24:47.800
那么标题这一行呢

24:47.800 --> 24:49.800
我们不想让他进行

24:49.800 --> 24:51.800
太长的

24:51.800 --> 24:52.800
换行

24:52.800 --> 24:53.800
所以呢

24:53.800 --> 24:55.800
我们直接在这边

24:55.800 --> 24:56.800
在标题上

24:56.800 --> 24:58.800
我们单独做一个样式

24:58.800 --> 24:59.800
我们称之为

24:59.800 --> 25:07.910
item title

25:07.910 --> 25:08.910
首先我们定一下

25:08.910 --> 25:11.910
它的overfall

25:11.910 --> 25:15.610
这个的话

25:15.610 --> 25:18.610
它就会收掉对吧

25:18.610 --> 25:22.920
包括是它这个的长度

25:22.920 --> 25:23.920
做百分百

25:23.920 --> 25:36.520
它的长度也是百分百

25:36.520 --> 25:38.520
但是它显示不出来了

25:38.520 --> 25:39.520
那么这时候的话

25:39.520 --> 25:40.520
我们再做一个

25:40.520 --> 25:44.470
testoverfall

25:44.470 --> 25:49.900
item

25:49.900 --> 25:51.900
我们继续往下

25:51.900 --> 25:52.900
现在的话呢

25:52.900 --> 25:55.900
我们可以

25:55.900 --> 25:56.900
再拿两个出来

25:56.900 --> 25:57.900
比如说

25:57.900 --> 26:02.230
我们拿图片出来

26:02.230 --> 26:03.230
拿一个

26:03.230 --> 26:04.230
我们看一下

26:04.230 --> 26:06.230
图片在这

26:06.230 --> 26:09.990
它的图片

26:09.990 --> 26:13.620
它数据都会

26:13.620 --> 26:14.620
进行折叠

26:14.620 --> 26:15.620
我们打开看一下

26:15.620 --> 26:16.620
剧情对吧

26:16.620 --> 26:18.620
根据我们需要来看

26:18.620 --> 26:20.620
在这

26:20.620 --> 26:22.620
在imager下面再拉着

26:22.620 --> 26:23.620
所以

26:23.620 --> 26:25.620
界面上面呢

26:25.620 --> 26:28.620
我们最好在上面就是

26:28.620 --> 26:29.620
在这

26:29.620 --> 26:31.620
我们放上

26:31.620 --> 26:33.620
imager

26:33.620 --> 26:35.620
然后这里面是

26:35.620 --> 26:36.620
item

26:36.620 --> 26:38.620
下的

26:38.620 --> 26:40.620
imagers

26:40.620 --> 26:41.620
下的

26:41.620 --> 26:44.190
拉着

26:44.190 --> 26:45.190
当然

26:45.190 --> 26:46.190
得带

26:46.190 --> 26:50.270
帽号

26:50.270 --> 26:51.270
那么这张图片的大小

26:51.270 --> 26:53.270
我们也设定一下

26:53.270 --> 26:55.270
你不能太大这样图片

26:55.270 --> 26:56.270
对吧

26:56.270 --> 26:57.270
我们直接设的是

26:57.270 --> 26:58.270
这个

26:58.270 --> 27:00.270
item movie下的img

27:00.270 --> 27:10.220
设一下item movie下的img

27:10.220 --> 27:11.220
然后

27:11.220 --> 27:13.220
我们设它的

27:13.220 --> 27:15.220
宽度

27:15.220 --> 27:18.850
160

27:18.850 --> 27:19.850
rpx

27:19.850 --> 27:20.850
然后高度

27:20.850 --> 27:25.460
太

27:25.460 --> 27:26.460
太宽了

27:26.460 --> 27:27.460
我们做

27:27.460 --> 27:29.840
80吧

27:29.840 --> 27:31.840
高度

27:31.840 --> 27:34.840
130rpx

27:34.840 --> 27:38.110
我们看一下

27:38.110 --> 27:43.500
小了对吧

27:43.500 --> 27:44.500
没关系

27:44.500 --> 27:45.500
我们只是看一下

27:45.500 --> 27:46.500
这个效果

27:46.500 --> 27:48.500
我们把它呈现出来了

27:48.500 --> 27:51.190
你只要大一点

27:51.190 --> 27:52.190
你确实只有40

27:52.190 --> 27:53.190
对吧宽度

27:53.190 --> 27:54.190
然后我们调大

27:54.190 --> 27:56.190
我们调成160

27:56.190 --> 28:01.190
然后这个是200

28:01.190 --> 28:02.190
130

28:02.190 --> 28:03.190
就是260

28:03.190 --> 28:10.620
OK

28:10.620 --> 28:11.620
看到了

28:11.620 --> 28:12.620
我们出来了

28:12.620 --> 28:13.620
有些图片没有

28:13.620 --> 28:14.620
那没有关系

28:14.620 --> 28:16.620
我们说

28:16.620 --> 28:18.620
现在已经有这些数据了

28:18.620 --> 28:19.620
然后紧接着的话

28:19.620 --> 28:20.620
我们看到

28:20.620 --> 28:21.620
是不是这些东西

28:21.620 --> 28:23.620
都可以直接在我们的页面中

28:23.620 --> 28:25.620
我们通过我们的

28:25.620 --> 28:27.620
一个

28:27.620 --> 28:29.620
Fly.io的方式能实现

28:29.620 --> 28:30.620
回顾一下

28:30.620 --> 28:32.620
刚才Fly.io的一些操作

28:32.620 --> 28:33.620
首先第一步

28:33.620 --> 28:35.620
我们需要去做一个

28:35.620 --> 28:36.620
npm install

28:36.620 --> 28:39.620
Fly.io的一个装载

28:39.620 --> 28:40.620
第二步的话

28:40.620 --> 28:42.620
我们可以在当前的

28:42.620 --> 28:43.620
任何一个目录下

28:43.620 --> 28:46.620
我们现在选择的是我们的

28:46.620 --> 28:50.150
Utils

28:50.150 --> 28:51.150
在Utils下面

28:51.150 --> 28:53.150
我们建了一个Request

28:53.150 --> 28:54.150
Request的文件的话

28:54.150 --> 28:55.150
它的特点是

28:55.150 --> 28:57.150
我们做了一次

28:57.150 --> 28:58.150
我们Fly.io的引入

28:58.150 --> 28:59.150
然后完成了

28:59.150 --> 29:01.150
我们Fly.io对象的创建

29:01.150 --> 29:02.150
然后把这个对象

29:02.150 --> 29:03.150
进行暴露

29:03.150 --> 29:04.150
再有一步

29:04.150 --> 29:06.150
我们到Mendon.js里面

29:06.150 --> 29:08.150
我们到Mendon.js里面

29:08.150 --> 29:11.150
然后我们把现有的数据

29:11.150 --> 29:14.150
做了一个Fly.io的原型注册

29:14.150 --> 29:16.150
当然它在做注册之前

29:16.150 --> 29:18.150
需要做一个Request的引入

29:18.150 --> 29:20.150
把我们的Request的文件拿过来

29:20.150 --> 29:22.150
当你注册完成以后的话

29:22.150 --> 29:25.150
那么我们这个DollarFly.io

29:25.150 --> 29:26.150
你就在页面的任何位置

29:26.150 --> 29:28.150
去发起调用

29:28.150 --> 29:29.150
你可以用

29:29.150 --> 29:30.150
我们官网所提供

29:30.150 --> 29:33.150
给你的任何的一些方法

29:33.150 --> 29:34.150
那么我们刚才

29:34.150 --> 29:35.150
就用了一个

29:35.150 --> 29:37.150
要注意这里面几个特点

29:37.150 --> 29:38.150
我们刚才的用法

29:38.150 --> 29:41.150
是在我们的Fly.io下面的View下面

29:41.150 --> 29:44.150
我们看到Fly.io的View下面

29:44.150 --> 29:45.150
我们在这边

29:45.150 --> 29:47.150
我们再用了一次Get

29:47.150 --> 29:48.150
你给它传参

29:48.150 --> 29:50.150
那么这里有Then跟Catch

29:50.150 --> 29:52.150
那么我们换一种用法

29:52.150 --> 29:53.150
再来看一下

29:53.150 --> 30:02.160
你可以去测试

30:02.160 --> 30:05.160
This.Fly

30:05.160 --> 30:06.160
我们根据官网的情况

30:06.160 --> 30:10.300
我们来看一下

30:10.300 --> 30:11.300
官网在使用的时候

30:11.300 --> 30:12.300
告诉我们

30:12.300 --> 30:13.300
刚才我们用的是第1个

30:13.300 --> 30:14.300
但注意

30:14.300 --> 30:16.300
因为这里面没有说到This

30:16.300 --> 30:18.300
它做显示当然没问题

30:18.300 --> 30:19.300
但如果说你要用This了

30:19.300 --> 30:20.300
那么你注意

30:20.300 --> 30:21.300
因为它是一个回调

30:21.300 --> 30:22.300
回调的话

30:22.300 --> 30:23.300
你必须把值放在外面

30:23.300 --> 30:24.300
在我们的

30:24.300 --> 30:25.300
如果你直接把这东西

30:25.300 --> 30:26.300
是做在

30:26.300 --> 30:29.300
我们的微信小程序里面的话

30:29.300 --> 30:30.300
那么你其实

30:30.300 --> 30:31.300
可以用到的是

30:31.300 --> 30:34.300
我们的VarZat那个写法

30:34.300 --> 30:35.300
OK

30:35.300 --> 30:36.300
我们来看一下

30:36.300 --> 30:38.300
我们换一个写法试试看

30:38.300 --> 30:40.300
我们就换一个Request

30:40.300 --> 30:41.300
这个写法吧

30:41.300 --> 30:43.300
我们换一个Request

30:43.300 --> 30:45.300
那么Request的本身来讲

30:45.300 --> 30:46.300
它需要的是

30:46.300 --> 30:47.300
我们这边告诉它

30:47.300 --> 30:48.300
模型

30:48.300 --> 30:49.300
超时时间

30:49.300 --> 30:51.300
和你现在所传的值

30:51.300 --> 30:52.300
对吧

30:52.300 --> 30:53.300
我们把它看一下

30:53.300 --> 30:55.300
如果我们不需要这些值

30:55.300 --> 30:56.300
可不可以

30:56.300 --> 30:59.260
Request

30:59.260 --> 31:01.260
首先你去到的页面

31:01.260 --> 31:02.260
依然是我现在

31:02.260 --> 31:03.260
这边所设定的

31:03.260 --> 31:05.570
第二

31:05.570 --> 31:06.570
我们传值

31:06.570 --> 31:08.570
我们没有值传

31:08.570 --> 31:09.570
第三

31:09.570 --> 31:12.880
你可以有一个参数

31:12.880 --> 31:13.880
Messager

31:13.880 --> 31:14.880
我们给它的是

31:14.880 --> 31:15.880
Get

31:16.880 --> 31:17.880
然后

31:17.880 --> 31:18.880
Time

31:18.880 --> 31:19.880
Out

31:19.880 --> 31:20.880
我们给的是

31:20.880 --> 31:21.880
5秒钟

31:21.880 --> 31:22.880
超时时期

31:22.880 --> 31:23.880
然后呢

31:23.880 --> 31:25.880
一旦你成功了

31:25.880 --> 31:26.880
那么我们下面

31:26.880 --> 31:28.880
就做的是Zen

31:28.880 --> 31:30.880
我们得到这个值出来

31:30.880 --> 31:32.880
我们随便拿一个变量

31:32.880 --> 31:33.880
接住

31:33.880 --> 31:34.880
然后呢

31:34.880 --> 31:38.980
我们里面

31:38.980 --> 31:40.980
Consolidate Log

31:40.980 --> 31:42.980
然后我们形成

31:42.980 --> 31:50.240
写一个简单的Request

31:50.240 --> 31:51.240
Result

31:51.240 --> 31:52.240
我们把这个D

31:52.240 --> 31:54.240
拿出来

31:54.240 --> 31:55.240
同时

31:55.240 --> 31:56.240
我们这后边

31:56.240 --> 31:58.240
我们还得接上

31:58.240 --> 31:59.240
我们换下来吧

31:59.240 --> 32:05.410
在这换下来一下

32:05.410 --> 32:07.410
同时我们还得接上

32:07.410 --> 32:08.410
我们刚才说的

32:08.410 --> 32:10.410
这句话

32:10.410 --> 32:11.410
我们把它的数据

32:11.410 --> 32:13.410
拿过来以后

32:13.410 --> 32:14.410
我们把它的数据

32:14.410 --> 32:15.410
拿过来以后

32:15.410 --> 32:16.410
换一下D

32:16.410 --> 32:19.410
把它放在我们的页面上

32:19.410 --> 32:21.410
一旦没有成功

32:21.410 --> 32:22.410
或者说有问题

32:22.410 --> 32:23.410
Catch不获

32:23.410 --> 32:28.380
Catch不获

32:28.380 --> 32:32.230
然后

32:32.230 --> 32:34.230
Array

32:34.230 --> 32:36.230
把这个E拿出来

32:36.230 --> 32:38.230
这样的结构

32:38.230 --> 32:39.230
简单看一下

32:39.230 --> 32:40.230
Request的获取

32:40.230 --> 32:41.230
这个不传参过去

32:41.230 --> 32:43.230
告诉它是5秒过7

32:43.230 --> 32:45.230
然后Get

32:45.230 --> 32:46.230
然后的话呢

32:46.230 --> 32:47.230
是我们Cann

32:47.230 --> 32:49.230
Zen跟Catch获取

32:49.230 --> 32:51.230
做Countress的操作

32:51.230 --> 32:53.230
然后我们在页面上看一下

32:53.230 --> 32:55.230
是不是依然可以拿到

32:55.230 --> 32:57.230
依然可以拿到

32:57.230 --> 32:58.230
对吧

32:58.230 --> 32:59.230
这样的话呢

32:59.230 --> 33:01.230
就导致的是我们现在

33:01.230 --> 33:02.230
只需要去做

33:02.230 --> 33:05.230
我们现在的页面的一个操作

33:05.230 --> 33:07.230
无论是你通过的Flyout的操作

33:07.230 --> 33:08.230
无论是通过Get

33:08.230 --> 33:10.230
还是我们的Request

33:10.230 --> 33:11.230
各种形式

33:11.230 --> 33:13.230
你都可以去获取到你的数据

33:13.230 --> 33:14.230
当然

33:14.230 --> 33:15.230
前提是

33:15.230 --> 33:16.230
我们会有这样一个

33:16.230 --> 33:17.230
API的结构在

33:17.230 --> 33:18.230
不然的话

33:18.230 --> 33:19.230
你没法获取

33:19.230 --> 33:20.230
那么

33:20.230 --> 33:21.230
这个就是我们

33:21.230 --> 33:22.230
这边是要给大家说到的

33:22.230 --> 33:24.230
我们怎么样能够完成

33:24.230 --> 33:25.230
我们现在的

33:25.230 --> 33:26.230
当然这些没有数据的

33:26.230 --> 33:27.230
它肯定会报一个

33:27.230 --> 33:28.230
拿不到图片对吧

33:28.230 --> 33:29.230
拿不到图片的

33:29.230 --> 33:30.230
其实方式很简单

33:30.230 --> 33:31.230
你只需要

33:31.230 --> 33:32.230
一旦你现在

33:32.230 --> 33:34.230
在显示时候没有图片

33:34.230 --> 33:36.230
那么是空的话

33:36.230 --> 33:37.230
怎么办

33:37.230 --> 33:40.230
你就直接给它一个默认图片

33:40.230 --> 33:41.230
你可以去放置一个

33:41.230 --> 33:43.230
默认图片在上面

33:43.230 --> 33:44.230
对吧

33:44.230 --> 33:46.230
这里面你可以去做一个

33:46.230 --> 33:48.230
简单的计算属性

33:49.230 --> 33:51.230
我们在这边

33:51.230 --> 33:53.230
你可以最简单的去做一个

33:53.230 --> 33:54.230
比如说

33:54.230 --> 33:57.230
如果它这个值还存在的话

33:57.230 --> 33:58.230
那么我们就这样

33:58.230 --> 33:59.230
不然的话

33:59.230 --> 34:00.230
你放个空

34:00.230 --> 34:02.230
或者说做一个什么样的操作

34:02.230 --> 34:03.230
你可以看到

34:03.230 --> 34:04.230
它这样的话

34:04.230 --> 34:05.230
它的错

34:05.230 --> 34:07.230
我们看到

34:07.230 --> 34:08.230
它下边

34:08.230 --> 34:11.230
我们可以给到它的是

34:11.230 --> 34:13.230
这边你随便放一个页面纸

34:13.230 --> 34:16.230
就可以

34:16.230 --> 34:20.230
往上随便找一张图片位置

34:20.230 --> 34:25.940
对吧

34:25.940 --> 34:26.940
它现在是

34:26.940 --> 34:27.940
这张图片是找不到

34:27.940 --> 34:28.940
我们这个什么有关系

34:28.940 --> 34:29.940
我们之后

34:29.940 --> 34:31.940
通过下面的其他的语句

34:31.940 --> 34:33.940
对它进行一个处理就可以了

34:33.940 --> 34:35.940
现在主要的事情是

34:35.940 --> 34:37.940
我们通过现在的这个写法

34:37.940 --> 34:39.940
我们已经把它给数据给取出来了

34:39.940 --> 34:41.940
同时我们现在也能够

34:41.940 --> 34:43.940
通过Fly-O的方式

34:43.940 --> 34:45.940
换取现在的整个结构

34:45.940 --> 34:47.940
和整个页面的一些数据加载了

34:47.940 --> 34:49.940
那么我们有几种方式数据

34:49.940 --> 34:51.940
第一种是静态数据

34:51.940 --> 34:53.940
我们其实是写在我们程序中的

34:53.940 --> 34:55.940
我们可以把你的数据

34:55.940 --> 34:57.940
直接作为页面的一些不动数据

34:57.940 --> 34:58.940
把它写进去

34:58.940 --> 34:59.940
第二种呢

34:59.940 --> 35:01.940
我们是通过我们的远程

35:01.940 --> 35:02.940
也就是我们所谓的

35:02.940 --> 35:04.940
我们的接口的方式

35:04.940 --> 35:06.940
像这样的方式一样发送过来

35:06.940 --> 35:08.940
但是用这样的接口的时候

35:08.940 --> 35:09.940
我们由于现在

35:09.940 --> 35:12.940
我们没有去对它进行白名单的认证

35:12.940 --> 35:14.940
所以你在本地测试的时候

35:14.940 --> 35:15.940
你需要做一个勾选

35:15.940 --> 35:18.940
就是说不搅验合法预明

35:18.940 --> 35:19.940
不然你不勾这个的话

35:19.940 --> 35:21.940
它是始终永远会报错的

35:21.940 --> 35:22.940
OK吧

35:22.940 --> 35:23.940
那么这样的话呢

35:23.940 --> 35:25.940
这个flyout的方式就到这

