WEBVTT

00:00.110 --> 00:02.910
讲解mpview的系列课程

00:02.910 --> 00:06.510
这节课给大家讲解一下mpview的快速入门

00:06.510 --> 00:08.710
在上一节课如果成中

00:08.710 --> 00:11.710
我们给大家已经讲解了什么是mpview

00:11.710 --> 00:14.510
并且它和小程序先的关系

00:14.510 --> 00:21.110
以及它解决了小程序至少现在原生开发的不足之处

00:21.110 --> 00:24.510
包括是组件化 包括是复用性的

00:24.510 --> 00:27.110
那么如果想进一步了解同学

00:27.110 --> 00:29.910
可以去看我上一节课的一个视频

00:30.110 --> 00:34.310
同时也可以自行在我后续的课程中

00:34.310 --> 00:38.110
能够慢慢再次体会到mpview的特点

00:38.110 --> 00:41.410
毕竟来讲我们使用view的结构

00:41.410 --> 00:44.610
利用H5的方式开发小程序

00:44.610 --> 00:50.520
这是一个相对而言对小程序来说是比较新的一个知识

00:50.520 --> 00:52.620
那么这节课主要有两个部分

00:52.620 --> 00:55.120
第一部分怎么安装和启动

00:55.120 --> 01:00.420
第二部分简单去构建介绍一下我们整个的界面结构

01:00.420 --> 01:02.420
相对如果大家学过view的话

01:02.420 --> 01:07.020
那么这样的方式对大家来讲非常的顺眼或者眼熟

01:07.020 --> 01:09.920
但是还有一点点毕竟它是小程序端的

01:09.920 --> 01:12.120
所以它还会有一点的变化和不同

01:13.720 --> 01:15.720
首先mpview的话

01:15.720 --> 01:17.620
我们可以从官网上面去看

01:17.620 --> 01:18.820
我们先打开官网

01:21.680 --> 01:22.880
我们把官网打开

01:22.880 --> 01:32.830
我们看一下mpview的官网

01:44.890 --> 01:45.890
它是在

01:46.890 --> 01:49.890
我们就是它其实是mpview

01:51.390 --> 01:52.390
点抗

01:52.390 --> 01:53.390
官网上面

01:53.390 --> 01:57.390
官网上面我们看到它简单的介绍了有mpview

01:57.390 --> 02:00.390
相对我们之前它可能更简单一点

02:00.390 --> 02:03.390
我之前的课程介绍的比较多一点

02:03.390 --> 02:05.390
大家可以去把那个做一个了解

02:05.390 --> 02:07.390
这边有个五分钟上手

02:07.390 --> 02:09.390
那么这边主要看一个点就是

02:09.390 --> 02:11.390
那么在这里咱们看到

02:11.390 --> 02:13.890
官网上面它在装view的时候

02:13.890 --> 02:15.890
它装的是2.9的版本

02:15.890 --> 02:19.890
但对于现在我们大家都看到的是view的升级

02:19.890 --> 02:22.890
已经升级到我们的3的

02:22.890 --> 02:23.390
对吧

02:23.390 --> 02:25.890
所以我们对于官网的这个识令

02:25.890 --> 02:27.390
我们要做个升级

02:27.390 --> 02:29.390
首先前面这个是没有问题

02:29.390 --> 02:30.890
你先要去安装node

02:30.890 --> 02:32.890
node安装和npm保持

02:32.890 --> 02:35.890
也是存在着我们用npm来进行安装

02:35.890 --> 02:38.390
那么镜像操作 爱装不装

02:38.390 --> 02:39.390
这个没有关系

02:39.390 --> 02:40.890
因为速度的问题

02:40.890 --> 02:42.890
不是说外国的速度一定慢

02:42.890 --> 02:45.890
也不是说淘宝的一定那个快

02:45.890 --> 02:46.890
有一定的

02:46.890 --> 02:48.890
但是这样相对而言的快一点

02:48.890 --> 02:51.890
接下去这一步的话要说明一下

02:51.890 --> 02:55.890
就是如果你之前已经通过我们的cli的方式

02:55.890 --> 02:57.890
装过1.2.0版的

02:57.890 --> 02:59.890
那么你通过enstored的方式

02:59.890 --> 03:00.890
把它进行卸载一下

03:00.890 --> 03:05.890
然后你直接安装我们3.0版atvecli的这样的结构

03:05.890 --> 03:09.890
那么这个过程相对而言有一定的时间

03:09.890 --> 03:11.890
可能要花上个几分钟时间

03:11.890 --> 03:13.890
所以我这一步操作就不让大家

03:13.890 --> 03:15.890
在这个视频里面给大家演示了

03:15.890 --> 03:17.890
那么之前我是装过

03:17.890 --> 03:20.890
大家可以看到我这边来做的一个实力

03:20.890 --> 03:23.890
那么我给大家从头看一遍

03:23.890 --> 03:25.890
至少对大家来讲的话

03:25.890 --> 03:27.890
不是说从头演示

03:27.890 --> 03:29.890
首先我们去做一个卸载

03:29.890 --> 03:30.890
看到吗

03:30.890 --> 03:31.890
我们做一个卸载

03:31.890 --> 03:32.890
卸载以后的话

03:32.890 --> 03:34.890
它是告诉你几个文件被卸载了

03:34.890 --> 03:36.890
然后我们去安装一个vecli

03:36.890 --> 03:39.890
安装的时候它会有一堆的文件的执行

03:39.890 --> 03:41.890
当它这个执行完成以后的话

03:41.890 --> 03:43.890
那么你去查看一下版本

03:43.890 --> 03:45.890
你看我们现在是3.11版本了

03:45.890 --> 03:47.890
然后此时我们看一下

03:47.890 --> 03:50.890
是说我们其实可以利用

03:50.890 --> 03:55.890
我们2.0的所有的命令来完成这个开发的

03:55.890 --> 03:58.890
所以我们本身就可以多做一件事

03:58.890 --> 04:01.890
比如说我们想用initr进行开发

04:01.890 --> 04:05.890
那我们就可以直接做一个瞧接工具

04:05.890 --> 04:08.890
我们这样打npn install g

04:08.890 --> 04:13.890
全局的add我们的一个coi的gun init

04:13.890 --> 04:15.890
当你这样打好以后的话

04:15.890 --> 04:17.890
你看这边打完以后的话

04:17.890 --> 04:20.890
那么它继续会往下执行安装

04:20.890 --> 04:22.890
等安装好以后我们就没问题

04:22.890 --> 04:25.890
我们就可以直接切换到你现在的盘幅

04:25.890 --> 04:27.890
我到view test

04:27.890 --> 04:29.890
这是个空文件

04:29.890 --> 04:30.890
然后接下去

04:30.890 --> 04:31.890
我们就可以去安装

04:31.890 --> 04:34.890
我们现在的利用initr的结构来做了

04:34.890 --> 04:36.890
initr的结构我们依然是

04:36.890 --> 04:38.890
运用我们现在的npview

04:38.890 --> 04:40.890
然后创建一个quick start

04:40.890 --> 04:42.890
快速项目取名为my projector

04:42.890 --> 04:44.890
咱们看我这边

04:44.890 --> 04:46.890
我这边就这样创建好以后

04:46.890 --> 04:48.890
它后面会问你一些问题

04:48.890 --> 04:51.890
这个其实它是一个configure的一个配置

04:51.890 --> 04:53.890
它问你项目名称是什么

04:53.890 --> 04:54.890
你当前的app id有没有

04:54.890 --> 04:55.890
你的描述有没有

04:55.890 --> 04:56.890
你的作者有没有

04:56.890 --> 04:58.890
以及你现在是不是

04:58.890 --> 05:02.890
它会建立一个我们的renta运行工具

05:02.890 --> 05:03.890
我暂时有一座案例

05:03.890 --> 05:06.890
所以我的view差跟我们的eslink

05:06.890 --> 05:07.890
这两个都不用

05:07.890 --> 05:09.890
当你这样做好以后

05:09.890 --> 05:11.890
那么它就会帮你进行templator

05:11.890 --> 05:13.890
包括是一些模板的框架

05:13.890 --> 05:14.890
交手家的搭建

05:14.890 --> 05:16.890
最后它完成了这样的一个结构

05:16.890 --> 05:18.890
完成了my projector

05:18.890 --> 05:20.890
完成以后它会出现这几个词

05:20.890 --> 05:21.890
告诉你请

05:21.890 --> 05:23.890
切到我们的my projector的项目中

05:23.890 --> 05:25.890
然后npn install

05:25.890 --> 05:26.890
这是干嘛呢

05:26.890 --> 05:28.890
运行我们的安装依赖包

05:28.890 --> 05:29.890
对不对

05:29.890 --> 05:31.890
那么安装依赖包完成以后的话

05:31.890 --> 05:34.890
那么我们就可以直接在它里面

05:34.890 --> 05:36.890
运行我们的npn dev

05:36.890 --> 05:38.890
这个结构我们看后面

05:38.890 --> 05:41.890
我们说你这时候一旦安装完了

05:41.890 --> 05:42.890
n install安装完了以后

05:42.890 --> 05:43.890
那没有关系

05:43.890 --> 05:45.890
你看我这切换过来

05:45.890 --> 05:47.890
然后的话我后面

05:47.890 --> 05:49.890
直接让它做了一个npn install

05:49.890 --> 05:51.890
当这个完成以后的话

05:51.890 --> 05:54.890
那我们直接就可以到这结束

05:54.890 --> 05:56.890
到结束我们查看

05:56.890 --> 05:57.890
当前还是在3.11下面

05:57.890 --> 06:00.890
但是我们可以利用2的语法来写

06:00.890 --> 06:01.890
好

06:01.890 --> 06:02.890
那么此时呢

06:02.890 --> 06:04.890
我们项目就被建立起来了

06:04.890 --> 06:06.890
我用我现在的vscoder

06:06.890 --> 06:07.890
大家看到

06:07.890 --> 06:08.890
我用我的vscoder

06:08.890 --> 06:10.890
打开了当前刚刚创建的

06:10.890 --> 06:13.890
这个叫做npn test的这个项目

06:13.890 --> 06:15.890
这个项目里面呢

06:15.890 --> 06:17.890
我们看到有很多的文件

06:17.890 --> 06:18.890
这些都是脚口架

06:18.890 --> 06:19.890
帮我搭建好的

06:19.890 --> 06:20.890
同时呢

06:20.890 --> 06:22.890
我们在这边可以做启动

06:22.890 --> 06:23.890
那么启动是两个方式

06:23.890 --> 06:25.890
我的pb上已经写出来了

06:25.890 --> 06:27.890
第一个就是npn start

06:27.890 --> 06:28.890
npn嘛

06:28.890 --> 06:29.890
这个位置不对

06:29.890 --> 06:30.890
换一下

06:30.890 --> 06:33.970
n

06:33.970 --> 06:35.970
npn

06:35.970 --> 06:37.970
npn start

06:37.970 --> 06:39.970
或者是npn run dev

06:39.970 --> 06:41.970
这两个其实是一样的

06:41.970 --> 06:42.970
待会给大家看一下

06:42.970 --> 06:44.970
所以我们现在在执行的时候

06:44.970 --> 06:46.970
你就可以在这儿你写上

06:46.970 --> 06:48.970
npn注意

06:48.970 --> 06:50.970
它一定在当前这个目录下

06:50.970 --> 06:51.970
你看到吗

06:51.970 --> 06:52.970
my projector

06:52.970 --> 06:53.970
这下面

06:53.970 --> 06:54.970
start

06:54.970 --> 06:55.970
回车

06:55.970 --> 06:56.970
对它进行启动

06:56.970 --> 06:57.970
你发现吗

06:57.970 --> 06:59.970
它启动了npn run dev

06:59.970 --> 07:00.970
然后呢

07:00.970 --> 07:01.970
它如果出现一行

07:01.970 --> 07:03.970
绿色的字体表示

07:03.970 --> 07:04.970
completed

07:04.970 --> 07:05.970
successful

07:05.970 --> 07:06.970
in

07:06.970 --> 07:07.970
多少时间表示

07:07.970 --> 07:08.970
它已经启动起来

07:08.970 --> 07:09.970
此时呢

07:09.970 --> 07:10.970
我们再去打开

07:10.970 --> 07:11.970
我们的微信小程序

07:11.970 --> 07:12.970
然后呢

07:12.970 --> 07:13.970
这是一个

07:13.970 --> 07:14.970
web开发者工具对吧

07:14.970 --> 07:15.970
我们导入项目

07:15.970 --> 07:17.970
我们去找到这个项目

07:17.970 --> 07:18.970
这个对吧

07:18.970 --> 07:19.970
我们点中它

07:19.970 --> 07:20.970
选项

07:20.970 --> 07:25.820
然后点击导入

07:25.820 --> 07:26.820
它说已经有了

07:26.820 --> 07:28.820
我们直接打开

07:28.820 --> 07:30.820
之前我们打开过

07:30.820 --> 07:32.820
那么我们来看一下

07:32.820 --> 07:35.820
一旦你这边进行启动以后的话

07:35.820 --> 07:36.820
就意味着

07:36.820 --> 07:38.820
它已经进行了编译

07:38.820 --> 07:41.820
生成了小程序所需要的代码结构

07:41.820 --> 07:43.820
那么小程序在打开的时候

07:43.820 --> 07:45.820
就直接能看到这个界面了

07:45.820 --> 07:47.820
直接能看到这个界面了

07:47.820 --> 07:49.820
那么我们有同学问

07:49.820 --> 07:51.820
为什么不在小程序里进行

07:51.820 --> 07:53.820
一样的打开开发处理呢

07:53.820 --> 07:54.820
那么这里有几个原因

07:54.820 --> 07:55.820
第一个原因呢

07:55.820 --> 07:57.820
我们在我们的

07:57.820 --> 07:59.820
整个的开发过程中

07:59.820 --> 08:01.820
我们用的是VOE的语法

08:01.820 --> 08:02.820
VOE的语法就意味着

08:02.820 --> 08:06.820
它里面一定会出现点VOE的结构

08:06.820 --> 08:08.820
点VOE的这样的页面的操作

08:08.820 --> 08:10.820
而这种结构的话

08:10.820 --> 08:12.820
在微信小程序里面

08:12.820 --> 08:13.820
它是不适别的

08:13.820 --> 08:15.820
你比如你在这里面你来看

08:15.820 --> 08:16.820
你会发现一个VOE

08:16.820 --> 08:17.820
当你双击的时候

08:17.820 --> 08:19.820
它告诉你不支持此类型的

08:19.820 --> 08:22.820
所以VOE的整个开发

08:22.820 --> 08:23.820
是不能在原生的

08:23.820 --> 08:25.820
这个外部开发者工具里做的

08:25.820 --> 08:26.820
但是

08:26.820 --> 08:27.820
我有同学问

08:27.820 --> 08:29.820
那我原来做VOE开发的时候

08:29.820 --> 08:31.820
我可以在这直接编译完以后

08:31.820 --> 08:33.820
它会直接帮我从浏览器打开

08:33.820 --> 08:35.820
那么现在为什么没有

08:35.820 --> 08:36.820
原因还是在于

08:36.820 --> 08:38.820
因为微信小程序

08:38.820 --> 08:41.820
它不是说在所有浏览器都能运行

08:41.820 --> 08:43.820
为什么在这可以呢

08:43.820 --> 08:44.820
因为这个浏览器

08:44.820 --> 08:47.820
它其实是模拟了微信浏览器

08:47.820 --> 08:50.820
就微信里边的那个浏览器

08:50.820 --> 08:52.820
因为小程是技术于微信的

08:52.820 --> 08:54.820
所以它不可能在外部

08:54.820 --> 08:56.820
各个浏览器都可以运行

08:56.820 --> 08:58.820
所以形成的效果就是

08:58.820 --> 09:00.820
我们在我们的VS Coder

09:00.820 --> 09:02.820
这样的代码编辑器里面

09:02.820 --> 09:04.820
对它进行编辑

09:04.820 --> 09:05.820
然后我们通过

09:05.820 --> 09:08.820
我们生成或者编译的方式

09:08.820 --> 09:10.820
让微信浏览器

09:10.820 --> 09:13.820
即我们微信开发者工具中的浏览器

09:13.820 --> 09:15.820
能够查看效果

09:15.820 --> 09:16.820
那这种方式

09:16.820 --> 09:19.820
是我们MPV开发的一些常用格式

09:19.820 --> 09:20.820
好

09:20.820 --> 09:22.820
那么这是我们介绍了一下

09:22.820 --> 09:23.820
紧接着我们来看一下

09:23.820 --> 09:24.820
这个目录结构

09:24.820 --> 09:26.820
有几个了解一下

09:26.820 --> 09:29.200
首先

09:29.200 --> 09:31.200
我们看一下Builder

09:31.200 --> 09:32.200
这个不用你去多关心

09:32.200 --> 09:34.200
这个主要是它在建立

09:34.200 --> 09:36.200
和进行编译时候所用到的

09:36.200 --> 09:38.200
然后这里面的Configure

09:38.200 --> 09:40.200
也是它系统里面所用到的

09:40.200 --> 09:41.200
比如说

09:41.200 --> 09:44.200
它有两个GS

09:44.200 --> 09:46.200
一个是开发环境的DV的

09:46.200 --> 09:50.200
一个是我们的生产环境的

09:50.200 --> 09:51.200
之后你在切换的时候

09:51.200 --> 09:53.200
或者说你在把它发布的时候

09:53.200 --> 09:55.200
其实你可以自定于两个

09:55.200 --> 09:57.200
我们切换两个DEV

09:57.200 --> 09:58.200
Configure

09:58.200 --> 09:59.200
就可以了

09:59.200 --> 10:01.200
我们有一个Dister

10:01.200 --> 10:03.200
那么像我现在编译以后

10:03.200 --> 10:05.200
大家可以看到这个Dister会有

10:05.200 --> 10:07.200
但如果说你刚生成页面的时候

10:07.200 --> 10:08.200
没有这个Dister的

10:08.200 --> 10:09.200
那么这个文件

10:09.200 --> 10:11.200
其实你打开以后

10:11.200 --> 10:12.200
你就能发现

10:12.200 --> 10:13.200
它里面的结构

10:13.200 --> 10:15.200
其实就是我们所谓的

10:15.200 --> 10:16.200
微信的

10:16.200 --> 10:17.200
小程序的

10:17.200 --> 10:18.200
你看到吗

10:18.200 --> 10:19.200
Peters Component Common

10:19.200 --> 10:20.200
然后Static

10:20.200 --> 10:21.200
然后GS

10:21.200 --> 10:22.200
JS

10:22.200 --> 10:24.200
WXS都有

10:24.200 --> 10:26.200
它就是我们刚才通过

10:26.200 --> 10:28.200
编译的时候自动生成的

10:28.200 --> 10:30.200
相对应的

10:30.200 --> 10:31.200
我的微信小程序

10:31.200 --> 10:33.200
它所要处理和解析的

10:33.200 --> 10:35.200
也就是在这个Dister里面

10:35.200 --> 10:37.200
是这个问题

10:37.200 --> 10:39.200
Model

10:39.200 --> 10:40.200
Models

10:40.200 --> 10:41.200
这个大家应该很熟

10:41.200 --> 10:43.200
它就是依赖包

10:43.200 --> 10:44.200
我们大家可以把它

10:44.200 --> 10:46.200
刚才做NPN install的时候

10:46.200 --> 10:47.200
进行安装的

10:47.200 --> 10:48.200
SR-C

10:48.200 --> 10:50.200
那就是我们之后

10:50.200 --> 10:52.200
要重点书写代码的位置

10:52.200 --> 10:54.200
我们的View的代码

10:54.200 --> 10:56.200
全是书写在SR-C里面

10:56.200 --> 10:58.200
那么这里面有Peters

10:58.200 --> 11:01.200
结构会对应到我们的Dister里面的Peters

11:01.200 --> 11:03.200
对应到Dister里面的Peters

11:03.200 --> 11:07.200
这里边是我们两个页面LogIndex

11:07.200 --> 11:09.200
那么对于它来讲的话

11:09.200 --> 11:11.200
它也是LogIndex

11:11.200 --> 11:12.200
那么对于微信来讲

11:12.200 --> 11:13.200
我们本身

11:13.200 --> 11:15.200
可以去设定不同的文件

11:15.200 --> 11:18.200
加合我们的页面之间的关系

11:18.200 --> 11:19.200
你比如一个文件

11:19.200 --> 11:20.200
加放多个页面

11:20.200 --> 11:21.200
或者多个文件

11:21.200 --> 11:22.200
不存在多个

11:22.200 --> 11:23.200
一个文件放一个

11:23.200 --> 11:24.200
一个文件放多个

11:24.200 --> 11:25.200
都可以

11:25.200 --> 11:26.200
那么甚至我们一个文件加

11:26.200 --> 11:27.200
嵌套文件加

11:27.200 --> 11:29.200
这种逻辑上都是存利的

11:29.200 --> 11:30.200
但对于微信

11:30.200 --> 11:31.200
对MPView来讲

11:31.200 --> 11:33.200
它希望你形成的就是

11:33.200 --> 11:35.200
一个文件加

11:35.200 --> 11:37.200
或者一个目录下

11:37.200 --> 11:38.200
一个文件

11:38.200 --> 11:40.200
这样维护起来

11:40.200 --> 11:41.200
或者说编写起来

11:41.200 --> 11:42.200
会方便很多

11:42.200 --> 11:44.200
你别在一个下面写多个

11:44.200 --> 11:46.200
这是我们后面想到的

11:46.200 --> 11:47.200
继下去

11:47.200 --> 11:49.200
像SR-C里面你所看到的

11:49.200 --> 11:50.200
这个是组件

11:50.200 --> 11:52.200
大家有那个叫什么View里面

11:52.200 --> 11:53.200
经常见到

11:53.200 --> 11:55.200
我们在微信小程序中

11:55.200 --> 11:56.200
咱们也见到组件

11:56.200 --> 11:58.200
有同学一直在有时候问到

11:58.200 --> 12:00.200
就是微信小程序也有组件

12:00.200 --> 12:01.200
那么View也有组件

12:01.200 --> 12:03.200
他们俩之间的关系和好处

12:03.200 --> 12:05.200
我们讲的是

12:05.200 --> 12:06.200
微信小程序的组件

12:06.200 --> 12:08.200
它只是把现有的

12:08.200 --> 12:09.200
某一些的功能

12:09.200 --> 12:11.200
进行独立的封装

12:11.200 --> 12:12.200
但它里面的结构

12:12.200 --> 12:14.200
本身还是微信

12:14.200 --> 12:16.200
本身自带的那四大文件

12:16.200 --> 12:17.200
也就是说你的语法

12:17.200 --> 12:19.200
依然还要用微信

12:19.200 --> 12:20.200
本身的那些语法

12:20.200 --> 12:22.200
你不能用html的

12:22.200 --> 12:24.200
但对于小程序的组件

12:24.200 --> 12:26.200
对于我们的mpview的组件来讲

12:26.200 --> 12:27.200
特别是view的来讲

12:27.200 --> 12:29.200
它形成了高度的

12:29.200 --> 12:30.200
我们的所谓的封装

12:30.200 --> 12:31.200
也就是说

12:31.200 --> 12:32.200
在一个view中

12:32.200 --> 12:33.200
我们既有template

12:33.200 --> 12:34.200
又有script

12:34.200 --> 12:38.200
又有那个style

12:38.200 --> 12:39.200
这样的话

12:39.200 --> 12:40.200
我们通过我们的

12:40.200 --> 12:41.200
学习h5的方式

12:41.200 --> 12:43.200
直接可以把一个组件

12:43.200 --> 12:45.200
直接封装在一个ve里面

12:45.200 --> 12:47.200
这样对我们来说

12:47.200 --> 12:48.200
编码特别的舒服

12:48.200 --> 12:50.200
而且对整体的程序的

12:50.200 --> 12:52.200
维护性来讲

12:52.200 --> 12:54.200
也会有非常大的好处

12:54.200 --> 12:57.200
我们通过这样的一个文件

12:57.200 --> 12:58.200
维护完以后

12:58.200 --> 13:00.200
直接它可以生成

13:00.200 --> 13:01.200
我们的微信端的

13:01.200 --> 13:04.200
所谓的一个组件的格式

13:04.200 --> 13:05.200
这样对大家来讲

13:05.200 --> 13:07.200
减少了开发成本

13:07.200 --> 13:09.200
降低了学习的难度

13:09.200 --> 13:10.200
甚至维护好了

13:10.200 --> 13:13.200
代码的组件的封装性

13:13.200 --> 13:14.200
这些都会用到了

13:14.200 --> 13:16.200
Utiles

13:16.200 --> 13:18.200
那么这个其实是

13:18.200 --> 13:20.200
微信小程序中

13:20.200 --> 13:22.200
所给到的一些

13:22.200 --> 13:24.200
常用的模块基带

13:24.200 --> 13:26.200
或者称之为我们的

13:26.200 --> 13:27.200
封装的

13:27.200 --> 13:29.200
我们用modeality expert的方式

13:29.200 --> 13:30.200
来使用的

13:30.200 --> 13:31.200
也就是你之后

13:31.200 --> 13:33.200
如果要用一些

13:33.200 --> 13:34.200
方法或函数

13:34.200 --> 13:36.200
你需要共享的

13:36.200 --> 13:37.200
那么你会写在这里面

13:37.200 --> 13:38.200
这个逻辑

13:38.200 --> 13:39.200
和我们之前的概念

13:39.200 --> 13:40.200
是一样的

13:40.200 --> 13:41.200
static

13:41.200 --> 13:42.200
这个文件

13:42.200 --> 13:44.200
主要是放置一些

13:44.200 --> 13:45.200
静态的内容

13:45.200 --> 13:46.200
包括是图片

13:46.200 --> 13:47.200
你看

13:47.200 --> 13:48.200
这个图片就在这里面

13:48.200 --> 13:49.200
我们之后

13:49.200 --> 13:51.200
可以把一些静态图片

13:51.200 --> 13:53.200
或者说是一些文件

13:53.200 --> 13:55.200
或者说是一些音频视频

13:55.200 --> 13:57.200
你都可以放在static里面

13:57.200 --> 13:58.200
那么下面有一些

13:58.200 --> 14:01.200
这些都是属于我们的

14:01.200 --> 14:02.200
配置文件

14:02.200 --> 14:03.200
这个是

14:03.200 --> 14:04.200
编辑器的

14:04.200 --> 14:06.200
我们的一个配置文件

14:06.200 --> 14:08.200
我们暂时可以不用管它

14:08.200 --> 14:09.200
然后这个是

14:09.200 --> 14:10.200
git一个no

14:10.200 --> 14:11.200
也就是说

14:11.200 --> 14:12.200
如果我们要用git操作的话

14:12.200 --> 14:14.200
它的忽略文件其一

14:14.200 --> 14:16.200
那么咱们看到这个

14:16.200 --> 14:17.200
index.html

14:17.200 --> 14:19.200
一看这个页面打开以后

14:19.200 --> 14:20.200
其实对大家来讲

14:20.200 --> 14:22.200
也是非常熟的

14:22.200 --> 14:23.200
前提是

14:23.200 --> 14:24.200
你是学过vue的

14:24.200 --> 14:25.200
那么这个页面

14:25.200 --> 14:27.200
和gvue的相似

14:27.200 --> 14:28.200
应该说

14:28.200 --> 14:30.200
我们的所有的入口

14:30.200 --> 14:31.200
主入口

14:31.200 --> 14:33.200
都是通过这个index.html

14:33.200 --> 14:34.200
这边我们可以放上

14:34.200 --> 14:36.200
其他自动生成的一些

14:36.200 --> 14:38.200
vue的结构出来

14:38.200 --> 14:39.200
对不对

14:39.200 --> 14:40.200
我们通过外部的

14:40.200 --> 14:41.200
其他的一些访问

14:41.200 --> 14:42.200
或者说操作

14:42.200 --> 14:43.200
我们可以再自己写出来

14:43.200 --> 14:45.200
这是vue所给到我们的

14:45.200 --> 14:47.200
既然我们npvue写小程序

14:47.200 --> 14:48.200
用了vue的语访

14:48.200 --> 14:49.200
那么这个文件

14:49.200 --> 14:51.200
依然存在

14:51.200 --> 14:52.200
那么在家去

14:52.200 --> 14:53.200
咱们看到

14:53.200 --> 14:55.200
后面是好多几个json文件

14:55.200 --> 14:56.200
那么json文件

14:56.200 --> 14:57.200
在我们无论是vue

14:57.200 --> 14:59.200
还是属于我们的

14:59.200 --> 15:00.200
微信里面

15:00.200 --> 15:02.200
都是属于配置文件

15:02.200 --> 15:04.200
你比如我们打开这个

15:04.200 --> 15:07.200
那个packager.json

15:07.200 --> 15:09.200
这是我们npvue的

15:09.200 --> 15:10.200
一个配置文件

15:10.200 --> 15:12.200
之前我们在创建

15:12.200 --> 15:13.200
像我们在这边

15:13.200 --> 15:14.200
你还记得吗

15:14.200 --> 15:15.200
我刚才说

15:15.200 --> 15:17.200
我在这边写上一些文字

15:17.200 --> 15:18.200
比如说myprojector

15:18.200 --> 15:20.200
是不是这边就出来了

15:20.200 --> 15:22.200
那么版本号的话

15:22.200 --> 15:23.200
也是有description

15:23.200 --> 15:24.200
是不是这里有

15:24.200 --> 15:25.200
所以它这边

15:25.200 --> 15:26.200
其实是针对的

15:26.200 --> 15:27.200
我现在的

15:27.200 --> 15:29.200
整个npvue的配置文件

15:29.200 --> 15:30.200
同时你看到

15:30.200 --> 15:32.200
这边是所可执行命令

15:32.200 --> 15:34.200
刚才我在ppt上

15:34.200 --> 15:35.200
我已经说了

15:35.200 --> 15:36.200
我们说

15:36.200 --> 15:37.200
你这边去执行我们的

15:37.200 --> 15:39.200
npstar和你执行

15:39.200 --> 15:41.200
npn

15:42.200 --> 15:44.200
这个是一样的

15:44.200 --> 15:45.200
为什么

15:45.200 --> 15:46.200
你来看这边

15:46.200 --> 15:48.200
你来看这边

15:48.200 --> 15:49.200
你看

15:49.200 --> 15:52.200
这边是有一个我们的

15:52.200 --> 15:53.200
dv的

15:53.200 --> 15:54.200
所以你可以

15:54.200 --> 15:55.200
npn

15:55.200 --> 15:56.200
dv去执行

15:56.200 --> 15:57.200
没问题

15:57.200 --> 15:58.200
但是你注意到没有

15:58.200 --> 16:00.200
npn也可以执行一个star

16:00.200 --> 16:01.200
而star命令

16:01.200 --> 16:02.200
它后面所给出的

16:02.200 --> 16:03.200
这个命令很有意思

16:03.200 --> 16:05.200
它就是我们的

16:05.200 --> 16:06.200
npn

16:06.200 --> 16:07.200
所以起动的时候

16:07.200 --> 16:09.200
你写star

16:09.200 --> 16:10.200
你看

16:10.200 --> 16:11.200
star以后

16:11.200 --> 16:12.200
调用npn

16:12.200 --> 16:13.200
dv

16:13.200 --> 16:14.200
还是你直接写这个

16:14.200 --> 16:15.200
直接完成

16:15.200 --> 16:16.200
它的一个服务器的

16:16.200 --> 16:17.200
起动是一样的

16:17.200 --> 16:18.200
所以这两个步骤

16:18.200 --> 16:19.200
为什么

16:19.200 --> 16:20.200
我刚才在ppt上

16:20.200 --> 16:21.200
那么写

16:21.200 --> 16:22.200
从这儿就能看到

16:22.200 --> 16:23.200
再往下

16:23.200 --> 16:24.200
我们看到的是

16:24.200 --> 16:26.200
dependence

16:26.200 --> 16:27.200
dependence是什么

16:27.200 --> 16:28.200
dependence就是依赖

16:28.200 --> 16:30.200
刚才我们在这边

16:30.200 --> 16:31.200
做我们创建的时候

16:31.200 --> 16:32.200
我们是不是

16:32.200 --> 16:33.200
做过instore

16:33.200 --> 16:34.200
对吧

16:34.200 --> 16:35.200
我们做instore的结构

16:35.200 --> 16:38.890
在这边

16:38.890 --> 16:39.890
对吧

16:39.890 --> 16:40.890
npn

16:40.890 --> 16:41.890
store

16:41.890 --> 16:42.890
它具体加载了我们

16:42.890 --> 16:43.890
现在或者说

16:43.890 --> 16:44.890
下载了我们的

16:44.890 --> 16:45.890
npn

16:45.890 --> 16:46.890
note models

16:46.890 --> 16:47.890
这里边的几个

16:47.890 --> 16:48.890
并且版本是多少呢

16:48.890 --> 16:49.890
其实

16:49.890 --> 16:50.890
都是在这儿

16:50.890 --> 16:51.890
都是在这儿

16:51.890 --> 16:53.890
我们在这边

16:53.890 --> 16:54.890
形成了我们

16:54.890 --> 16:56.890
现在大家所看到的

16:56.890 --> 16:57.890
整个结构

16:57.890 --> 16:58.890
同时

16:58.890 --> 16:59.890
这里面也有我们的

16:59.890 --> 17:00.890
版本号的

17:00.890 --> 17:01.890
最低版本号的

17:01.890 --> 17:02.890
往这个之上的

17:02.890 --> 17:03.890
下载

17:03.890 --> 17:04.890
这样就是我们

17:04.890 --> 17:05.890
这边就是我们

17:05.890 --> 17:06.890
所谓的一个

17:06.890 --> 17:08.890
Patrick & Jason的一个

17:08.890 --> 17:09.890
文件结构

17:09.890 --> 17:10.890
同时

17:10.890 --> 17:11.890
我们再来看

17:11.890 --> 17:12.890
还有一个文件

17:12.890 --> 17:13.890
我们了解一下

17:13.890 --> 17:14.890
像这个

17:14.890 --> 17:16.890
projected.configure

17:16.890 --> 17:17.890
projected.configure

17:17.890 --> 17:18.890
这个文件

17:18.890 --> 17:20.890
是npvue

17:20.890 --> 17:22.890
针对小程序

17:22.890 --> 17:23.890
所需要

17:23.890 --> 17:24.890
在这儿

17:24.890 --> 17:25.890
进行编译时候的

17:25.890 --> 17:27.890
一个配置文件

17:27.890 --> 17:28.890
它并不是配置

17:28.890 --> 17:29.890
npvue

17:29.890 --> 17:30.890
它配置的是

17:30.890 --> 17:31.890
dister

17:31.890 --> 17:32.890
这个小程序

17:32.890 --> 17:33.890
也就是说

17:33.890 --> 17:34.890
它如果说

17:34.890 --> 17:35.890
你把这个文件

17:35.890 --> 17:36.890
放在小程序中

17:36.890 --> 17:38.890
小程序通过哪个文件

17:38.890 --> 17:39.890
和识别里面代码呢

17:39.890 --> 17:40.890
就是这个

17:40.890 --> 17:41.890
projected.configure

17:41.890 --> 17:42.890
Jason

17:42.890 --> 17:43.890
我们简单看这一下

17:43.890 --> 17:44.890
比如说

17:44.890 --> 17:45.890
描述

17:45.890 --> 17:46.890
这个没有什么大关系

17:46.890 --> 17:47.890
主要是这几个

17:47.890 --> 17:48.890
你看

17:48.890 --> 17:49.890
它这边写了一个

17:49.890 --> 17:50.890
miniprogram root

17:50.890 --> 17:52.890
代表这么多文件

17:52.890 --> 17:53.890
小程序

17:53.890 --> 17:54.890
你要解析的

17:54.890 --> 17:55.890
或者是你所识别的

17:55.890 --> 17:56.890
你认识的

17:56.890 --> 17:57.890
其实是dister

17:57.890 --> 17:58.890
微信

17:58.890 --> 17:59.890
是在这儿

17:59.890 --> 18:00.890
对吧

18:00.890 --> 18:01.890
否则为小程序

18:01.890 --> 18:02.890
怎么知道在这儿呢

18:02.890 --> 18:03.890
它是通过这个文件的

18:03.890 --> 18:05.890
那么你的编译类型

18:05.890 --> 18:06.890
你要以什么编译

18:06.890 --> 18:07.890
以小程序的方式

18:07.890 --> 18:08.890
你的appid

18:08.890 --> 18:09.890
是不是我的appid

18:09.890 --> 18:11.890
在刚才建立的时候

18:11.890 --> 18:13.890
它被复制到这儿来了

18:13.890 --> 18:14.890
对吧

18:14.890 --> 18:15.890
然后包括是

18:15.890 --> 18:16.890
我的项目名称

18:16.890 --> 18:17.890
这边都有

18:17.890 --> 18:18.890
这些的话

18:18.890 --> 18:19.890
都是小程序

18:19.890 --> 18:20.890
所需要知道的

18:20.890 --> 18:21.890
那么我们呢

18:21.890 --> 18:22.890
一般不需要在这边

18:22.890 --> 18:23.890
去写

18:23.890 --> 18:24.890
但是我们可以了解

18:24.890 --> 18:25.890
这个文件

18:25.890 --> 18:26.890
起了一个什么作用

18:26.890 --> 18:27.890
好了

18:27.890 --> 18:29.890
那么当你这样了解好以后的话

18:29.890 --> 18:30.890
那么我们

18:30.890 --> 18:31.890
看一下

18:31.890 --> 18:33.890
现在系统所给出的这个界面

18:33.890 --> 18:35.890
系统所给出的这个界面

18:35.890 --> 18:37.890
以及下面的这些内容

18:37.890 --> 18:38.890
小程序

18:38.890 --> 18:39.890
是怎么样

18:39.890 --> 18:40.890
或者说系统里面

18:40.890 --> 18:42.890
是怎么样对应关系的

18:42.890 --> 18:44.890
首先我们打开了

18:44.890 --> 18:46.890
我们刚才的整个dister

18:46.890 --> 18:48.890
我们把dister打开

18:48.890 --> 18:50.890
我们把dister打开

18:50.890 --> 18:51.890
dister里面

18:51.890 --> 18:53.890
我们看到有好几个目录结构

18:53.890 --> 18:55.890
在这个目录结构中呢

18:55.890 --> 18:56.890
我们看到

18:56.890 --> 18:57.890
首先我们打开

18:57.890 --> 18:59.890
是这个app.json

18:59.890 --> 19:00.890
这个文件对大家来讲

19:00.890 --> 19:01.890
非常熟

19:01.890 --> 19:02.890
因为这个界面

19:02.890 --> 19:03.890
或者说这个写法

19:03.890 --> 19:05.890
其实就是微信小程序有的

19:05.890 --> 19:06.890
只不过

19:06.890 --> 19:08.890
我们不需要自己去额外写

19:08.890 --> 19:09.890
我们可以改啊

19:09.890 --> 19:11.890
或者说我们可以让它自动生成出来

19:11.890 --> 19:13.890
然后我们看到

19:13.890 --> 19:14.890
本身的小程序

19:14.890 --> 19:17.890
里面会有我们的pagers

19:17.890 --> 19:18.890
这边也有

19:18.890 --> 19:19.890
那么它指的就是

19:19.890 --> 19:20.890
我们当前的路径

19:20.890 --> 19:21.890
或者说

19:21.890 --> 19:23.890
我们所需要使用到的页面

19:23.890 --> 19:24.890
但是注意

19:24.890 --> 19:26.890
小程序一般创建的时候

19:26.890 --> 19:28.890
我们的目录名称

19:28.890 --> 19:31.890
和你里面的页面名称

19:31.890 --> 19:32.890
应该是保持一致的

19:32.890 --> 19:34.890
那么它这边不一致的原因

19:34.890 --> 19:35.890
是在于

19:35.890 --> 19:36.890
我们打开页面

19:36.890 --> 19:38.890
所能看到的效果是

19:38.890 --> 19:39.890
它里面

19:39.890 --> 19:42.890
它其实在做我们的

19:42.890 --> 19:44.890
就是那个viewe的时候

19:44.890 --> 19:45.890
它所写的

19:45.890 --> 19:46.890
都是两个文件

19:46.890 --> 19:47.890
你看啊

19:47.890 --> 19:50.890
我们在原文件src里面

19:50.890 --> 19:51.890
你去寻找一下

19:51.890 --> 19:52.890
打开pagers

19:52.890 --> 19:53.890
你会发现

19:53.890 --> 19:54.890
它里面

19:54.890 --> 19:55.890
永远写着两个文件

19:55.890 --> 19:56.890
当然

19:56.890 --> 19:57.890
第三个文件可追加

19:57.890 --> 19:58.890
一般都是两个

19:58.890 --> 20:00.890
index.view

20:00.890 --> 20:02.890
跟一个mandian.js

20:02.890 --> 20:03.890
mandian.js

20:03.890 --> 20:05.890
是它的一个启动文件

20:05.890 --> 20:06.890
它必须要有这个

20:06.890 --> 20:07.890
我们把它称之为叫

20:07.890 --> 20:09.890
挂载文件级

20:09.890 --> 20:11.890
那么还有一个呢

20:11.890 --> 20:12.890
就是我们的index

20:12.890 --> 20:15.890
或者称之为页面的view结构

20:15.890 --> 20:16.890
整个view结构

20:16.890 --> 20:18.890
针对于微信小程序来讲

20:18.890 --> 20:21.890
它是三块内容

20:21.890 --> 20:22.890
我们不看里面内容

20:22.890 --> 20:24.890
我们只看这个结构

20:24.890 --> 20:25.890
微信小程序

20:25.890 --> 20:26.890
我们大家都知道

20:26.890 --> 20:27.890
对于一个页面来讲

20:27.890 --> 20:29.890
它一共需要至少

20:29.890 --> 20:31.890
三个文件wxml

20:31.890 --> 20:32.890
wxssgs

20:32.890 --> 20:33.890
当然

20:33.890 --> 20:34.890
它有个配置文件

20:34.890 --> 20:35.890
可以写成json

20:35.890 --> 20:36.890
对不对

20:36.890 --> 20:37.890
但是

20:37.890 --> 20:38.890
如果说

20:38.890 --> 20:39.890
我们现在

20:39.890 --> 20:40.890
怎么样能够让它

20:40.890 --> 20:41.890
自动转换的时候

20:41.890 --> 20:43.890
也让微信小程序识别

20:43.890 --> 20:44.890
微信小程序

20:44.890 --> 20:46.890
首先它不可能识别view

20:46.890 --> 20:47.890
它只能识别这个

20:47.890 --> 20:48.890
所以你在编译的时候

20:48.890 --> 20:49.890
你一定形成的是

20:49.890 --> 20:50.890
转换结构

20:50.890 --> 20:51.890
那么

20:51.890 --> 20:52.890
所以我们看

20:52.890 --> 20:53.890
view里面

20:53.890 --> 20:54.890
我们有个template

20:54.890 --> 20:55.890
template的模板

20:55.890 --> 20:56.890
它对应的

20:56.890 --> 20:57.890
其实最后

20:57.890 --> 20:59.890
这是我们所谓的wxml

20:59.890 --> 21:01.890
系统会把template里面的

21:01.890 --> 21:02.890
html的标签

21:02.890 --> 21:04.890
或者小程序的标签

21:04.890 --> 21:06.890
全部给一桶的

21:06.890 --> 21:07.890
转换成我们现在的

21:07.890 --> 21:08.890
这个标签

21:08.890 --> 21:09.890
第二

21:09.890 --> 21:10.890
我们有个script标签

21:10.890 --> 21:11.890
script标签

21:11.890 --> 21:12.890
其实就是我们的

21:12.890 --> 21:13.890
脚本标签

21:13.890 --> 21:14.890
它会最后

21:14.890 --> 21:15.890
把这样的

21:15.890 --> 21:16.890
一个里面的代码

21:16.890 --> 21:17.890
全部转换成

21:17.890 --> 21:19.890
我们的ds文件

21:19.890 --> 21:20.890
第三个

21:20.890 --> 21:21.890
我们有个style

21:21.890 --> 21:22.890
我们样式结构

21:22.890 --> 21:23.890
那么它会把

21:23.890 --> 21:24.890
样式全部

21:24.890 --> 21:27.890
转换成我们的wxss文件

21:27.890 --> 21:28.890
所以

21:28.890 --> 21:30.890
对于我们原生开发来讲的话

21:30.890 --> 21:31.890
我是指原生mpview

21:31.890 --> 21:33.890
我们是创建了一个view

21:33.890 --> 21:35.890
然后完成了一个

21:35.890 --> 21:37.890
我们现在非常简单的

21:37.890 --> 21:39.890
三组框架的设定

21:39.890 --> 21:41.890
但最后生成的

21:41.890 --> 21:42.890
就会变成我们现在

21:42.890 --> 21:43.890
所看到的

21:43.890 --> 21:45.890
微信小程序的四大页面

21:45.890 --> 21:46.890
是这样的一个结构

21:46.890 --> 21:47.890
所以

21:47.890 --> 21:49.890
我们在最原始的时候

21:49.890 --> 21:50.890
我们在这边

21:50.890 --> 21:52.890
我们去写我们的

21:52.890 --> 21:53.890
页面路径的时候

21:53.890 --> 21:55.890
你肯定得写的是man

21:55.890 --> 21:57.890
我们打开这个

21:57.890 --> 21:58.890
主要

21:58.890 --> 22:00.890
在我们的mpview下面

22:00.890 --> 22:01.890
也有一个app.json

22:01.890 --> 22:02.890
你打开以后

22:02.890 --> 22:03.890
你会发现

22:03.890 --> 22:04.890
这个文件

22:04.890 --> 22:06.890
其实最终

22:06.890 --> 22:07.890
它就会是我们的

22:07.890 --> 22:09.890
上面的这个app.json

22:09.890 --> 22:10.890
我们在这儿

22:10.890 --> 22:11.890
一定要写上的

22:11.890 --> 22:13.890
并非是index下的index

22:13.890 --> 22:16.890
是index下的一个挂载文件

22:16.890 --> 22:17.890
就是它是说白了

22:17.890 --> 22:18.890
就是启动文件

22:18.890 --> 22:21.890
然后我们的index.man

22:21.890 --> 22:23.890
logs.man

22:23.890 --> 22:24.890
需要这样写

22:24.890 --> 22:25.890
OK

22:25.890 --> 22:26.890
那么第二个的话

22:26.890 --> 22:27.890
window对大家来讲

22:27.890 --> 22:28.890
这个也不陌生

22:28.890 --> 22:29.890
微信小程序里面

22:29.890 --> 22:31.890
主要是对框架

22:31.890 --> 22:33.890
和背景的一些配置

22:33.890 --> 22:35.890
包括是下拉刷新的

22:35.890 --> 22:36.890
一些配置文件

22:36.890 --> 22:37.890
都会在这儿

22:37.890 --> 22:39.890
你可以设置在app.json中

22:39.890 --> 22:40.890
代表

22:40.890 --> 22:41.890
这是全局化的设置

22:41.890 --> 22:42.890
同时

22:42.890 --> 22:44.890
你也可以把这个文件

22:44.890 --> 22:46.890
设置在我们的单页面中

22:46.890 --> 22:47.890
这就是大家所去看到的

22:47.890 --> 22:48.890
为什么

22:48.890 --> 22:50.890
我们打开这两个页面的时候

22:50.890 --> 22:51.890
你会发现

22:51.890 --> 22:52.890
这边有一个json

22:52.890 --> 22:53.890
这边没有

22:53.890 --> 22:55.890
因为对于log文件来讲

22:55.890 --> 22:57.890
它需要单独设置一个标题

22:57.890 --> 22:58.890
查看启动日质

22:58.890 --> 23:00.890
它才会有这个内容出现

23:00.890 --> 23:01.890
OK

23:01.890 --> 23:02.890
那么紧接着

23:02.890 --> 23:03.890
我们再来看

23:03.890 --> 23:05.890
打开app.json

23:05.890 --> 23:08.890
那么下面有一个tabba

23:08.890 --> 23:09.890
tabba

23:09.890 --> 23:10.890
tabba是微信里面

23:10.890 --> 23:11.890
我们大家熟知的

23:11.890 --> 23:13.890
底部触摸栏

23:13.890 --> 23:14.890
底部触摸栏

23:14.890 --> 23:15.890
就意味着

23:15.890 --> 23:17.890
我们对它的一个操作

23:17.890 --> 23:19.890
可以影响到你页面上面

23:19.890 --> 23:22.890
你所呈现出来的一个页面的切换

23:22.890 --> 23:23.890
当然

23:23.890 --> 23:26.890
这个页面一定是需要夹在tabba上面的

23:26.890 --> 23:28.890
这是在我们之前讲过

23:28.890 --> 23:29.890
我们看一下

23:29.890 --> 23:31.890
它的一个简单的结构

23:31.890 --> 23:32.890
它有一个color

23:32.890 --> 23:33.890
表示字体色

23:33.890 --> 23:34.890
背景色

23:34.890 --> 23:35.890
选择色

23:35.890 --> 23:37.890
加上那个边框色

23:37.890 --> 23:38.890
边框色就是

23:38.890 --> 23:40.890
它这上面这一条

23:40.890 --> 23:42.890
如果你把它设置成white

23:42.890 --> 23:43.890
它就是白色的

23:43.890 --> 23:44.890
如果你设置成black

23:44.890 --> 23:46.890
那就是黑色的

23:46.890 --> 23:48.890
那么下面有个list

23:48.890 --> 23:49.890
这个list

23:49.890 --> 23:50.890
主要的作用

23:50.890 --> 23:52.890
其实就是我们下面

23:52.890 --> 23:54.890
大家看到的那两个选项

23:54.890 --> 23:56.890
每个选项是一个大过号代表

23:56.890 --> 23:57.890
是一个对象

23:57.890 --> 23:59.890
每个选项里面有四个属性

23:59.890 --> 24:00.890
第一个属性代表的是

24:00.890 --> 24:02.890
你现在所能看到的文字

24:02.890 --> 24:03.890
第二个属性是你点击以后

24:03.890 --> 24:04.890
所跳转的页面

24:04.890 --> 24:06.890
第三、第四属性代表的是

24:06.890 --> 24:07.890
两个图标

24:07.890 --> 24:08.890
当你切换的时候

24:08.890 --> 24:09.890
两个图标的

24:09.890 --> 24:12.890
一些切换的一个图片位置

24:12.890 --> 24:14.890
那么我们再次强调一下

24:14.890 --> 24:16.890
这上面你所看到的黄色

24:16.890 --> 24:17.890
和我点开以后的灰色

24:17.890 --> 24:20.890
它其实是两张图片的切换

24:20.890 --> 24:21.890
ok

24:21.890 --> 24:23.890
那么这其实就是我们

24:23.890 --> 24:24.890
给大家解释了一下

24:24.890 --> 24:25.890
页面的整体结构

24:25.890 --> 24:28.890
和简单看了一下对应关系

24:28.890 --> 24:29.890
那么之后的话

24:29.890 --> 24:30.890
我们会在上面

24:30.890 --> 24:31.890
详细地去进行开发

24:31.890 --> 24:33.890
那么大家现在先进行安装

24:33.890 --> 24:34.890
安装好以后的话

24:34.890 --> 24:36.890
然后看一下里面的结构

24:36.890 --> 24:38.890
哪些是你比较熟的

24:38.890 --> 24:40.890
哪些是你比较还是陌生的

24:40.890 --> 24:42.890
那我们在接下来的开发过程中

24:42.890 --> 24:43.890
会有详细的讲解

24:43.890 --> 24:44.890
那么这些课

24:44.890 --> 24:47.890
解释和操作先到这儿

24:47.890 --> 24:49.890
我们下期会调一下

