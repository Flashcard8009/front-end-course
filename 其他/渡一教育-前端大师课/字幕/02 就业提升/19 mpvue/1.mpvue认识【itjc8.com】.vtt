WEBVTT

00:00.110 --> 00:02.110
好 从这节课开始

00:02.110 --> 00:04.110
我们给大家将讲解的是

00:04.110 --> 00:06.110
NPVUE的系列课程

00:06.110 --> 00:08.110
那么在讲这个课程的时候呢

00:08.110 --> 00:10.110
大家一定需要对NPVUE

00:10.110 --> 00:13.110
做一个非常清楚的认识

00:13.110 --> 00:16.110
因为NPVUE它是小程序的一个框架

00:16.110 --> 00:18.110
我们有同学说

00:18.110 --> 00:20.110
为什么我们之前学过的原生以后

00:20.110 --> 00:21.110
还要学习NPVUE

00:21.110 --> 00:22.110
那么这节课

00:22.110 --> 00:24.110
我就来给你解决这个问题

00:24.110 --> 00:27.740
首先我们先知道一下

00:27.740 --> 00:28.740
什么是NPVUE

00:28.740 --> 00:29.740
NPVUE呢

00:29.740 --> 00:31.740
它的全称应该叫做

00:31.740 --> 00:34.740
我们的View.js in Mainnet Program

00:34.740 --> 00:36.740
NP其实就是

00:36.740 --> 00:38.740
Mainnet Program 微信小程序的意思

00:38.740 --> 00:39.740
那么NPVUE

00:39.740 --> 00:40.740
我们在这边

00:40.740 --> 00:42.740
给了一个简单的解释

00:42.740 --> 00:44.740
NPVUE它是一款

00:44.740 --> 00:45.740
使用VUE.js

00:45.740 --> 00:47.740
开发微信小程序的前框框架

00:47.740 --> 00:49.740
那么我们使用此框架

00:49.740 --> 00:50.740
开发者呢

00:50.740 --> 00:52.740
就是可以得到完整的

00:52.740 --> 00:53.740
VUE的开发体验

00:53.740 --> 00:54.740
G

00:54.740 --> 00:56.740
你之前如果使用过VUE

00:56.740 --> 00:57.740
那么你这时候

00:57.740 --> 00:59.740
在转程去做我们小程序

00:59.740 --> 01:01.740
你的感受会非常好

01:01.740 --> 01:02.740
同时

01:02.740 --> 01:05.740
我为H5提供小程序的代码

01:05.740 --> 01:06.740
的附用的能力

01:06.740 --> 01:08.740
那么这点就强调的是

01:08.740 --> 01:09.740
因为H5

01:09.740 --> 01:10.740
我们做页面的时候

01:10.740 --> 01:12.740
我们经常会碰到

01:12.740 --> 01:13.740
不同页面间

01:13.740 --> 01:15.740
有不一样的页面

01:15.740 --> 01:16.740
也有相同的内容

01:16.740 --> 01:17.740
一样相同内容

01:17.740 --> 01:19.740
我们希望代码能够附用

01:19.740 --> 01:20.740
这样呢

01:20.740 --> 01:22.740
节省我们的开发的那些

01:22.740 --> 01:24.740
时间和成本

01:24.740 --> 01:26.740
那么如果想将H5的项目

01:26.740 --> 01:28.740
改造为小程序

01:28.740 --> 01:30.740
或者你想讲小程序

01:30.740 --> 01:32.740
最后转换为H5的话

01:32.740 --> 01:34.740
那么此时

01:34.740 --> 01:35.740
我们的MPVU

01:35.740 --> 01:37.740
它是一个非常好的注意

01:37.740 --> 01:39.740
这是一种解决方案

01:39.740 --> 01:40.740
那么目前

01:40.740 --> 01:41.740
MPVU的话

01:41.740 --> 01:42.740
已经在美团

01:42.740 --> 01:44.740
点评等多个业务的

01:44.740 --> 01:45.740
一些场景中

01:45.740 --> 01:46.740
得到了验证

01:46.740 --> 01:48.740
和大范围的使用

01:48.740 --> 01:49.740
所以呢

01:49.740 --> 01:51.740
它是一个相对成熟的

01:51.740 --> 01:53.740
相对安全的

01:53.740 --> 01:54.740
和健壮的

01:54.740 --> 01:56.740
一个简单框架

01:57.740 --> 01:58.740
首先

01:58.740 --> 01:59.740
我们在讲到

01:59.740 --> 02:00.740
使用MPVU的时候

02:00.740 --> 02:02.740
我们就得回顾

02:02.740 --> 02:04.740
我们小程序的开发的特点

02:04.740 --> 02:05.740
小程序呢

02:05.740 --> 02:06.740
我们讲一下

02:06.740 --> 02:07.740
它呢

02:07.740 --> 02:08.740
主要的作用

02:08.740 --> 02:09.740
或者说

02:09.740 --> 02:11.740
它主要的一种开发方式

02:11.740 --> 02:12.740
推荐的

02:12.740 --> 02:13.740
就是一种简洁模式

02:13.740 --> 02:15.740
那么我们也希望

02:15.740 --> 02:16.740
在小程序中

02:16.740 --> 02:17.740
或者小程序

02:17.740 --> 02:18.740
原生刚推出的时候

02:18.740 --> 02:19.740
我们也希望

02:19.740 --> 02:20.740
它是把

02:20.740 --> 02:22.740
多个页面的内容

02:22.740 --> 02:24.740
成一些清亮级的产品

02:24.740 --> 02:26.740
这个产品呢

02:26.740 --> 02:27.740
我们讲起来

02:27.740 --> 02:28.740
什么叫清亮级

02:28.740 --> 02:29.740
就是小程序

02:29.740 --> 02:31.740
本身和apps

02:31.740 --> 02:32.740
有一定的区别

02:32.740 --> 02:33.740
apps

02:33.740 --> 02:35.740
我可以称之为叫重亮级

02:35.740 --> 02:37.740
小程序的开发呢

02:37.740 --> 02:38.740
或者说使用

02:38.740 --> 02:40.740
它是一种离线包的方式

02:40.740 --> 02:41.740
合为离线包

02:41.740 --> 02:42.740
每个小程序

02:42.740 --> 02:44.740
它不可以大于

02:44.740 --> 02:45.740
原生

02:45.740 --> 02:46.740
两兆大小

02:46.740 --> 02:47.740
所以在运行的时候

02:47.740 --> 02:49.740
它是把当前的

02:49.740 --> 02:50.740
两兆大小的文件

02:50.740 --> 02:51.740
下载到你本地

02:51.740 --> 02:53.740
然后你再开始进行

02:53.740 --> 02:54.740
启动运行

02:54.740 --> 02:55.740
那么这样呢

02:55.740 --> 02:57.740
小程序要求开发呢

02:57.740 --> 02:59.740
规范非常的简洁

02:59.740 --> 03:00.740
那么技术

03:00.740 --> 03:01.740
技术呢

03:01.740 --> 03:02.740
它的封装呢

03:02.740 --> 03:03.740
也比较彻底

03:03.740 --> 03:05.740
它在整个的小程序内

03:05.740 --> 03:06.740
不合你现在的微信

03:06.740 --> 03:08.740
和网页端去操作

03:08.740 --> 03:09.740
包括呢

03:09.740 --> 03:10.740
它的浏览器

03:10.740 --> 03:11.740
也是用微信的

03:11.740 --> 03:12.740
但是呢

03:12.740 --> 03:13.740
它有一点

03:13.740 --> 03:14.740
它是自成

03:14.740 --> 03:15.740
自己的开发体系

03:15.740 --> 03:16.740
因为之前咱们

03:16.740 --> 03:18.740
学过同学也会知道

03:18.740 --> 03:19.740
小程序本身

03:19.740 --> 03:20.740
它不能直接把

03:20.740 --> 03:22.740
HITML的页面放进来

03:22.740 --> 03:23.740
但是呢

03:23.740 --> 03:24.740
它又有一些

03:24.740 --> 03:26.740
ML标签源的特点

03:26.740 --> 03:27.740
所以我们讲

03:27.740 --> 03:29.740
它有NATO和HITML的影子

03:29.740 --> 03:30.740
但是呢

03:30.740 --> 03:31.740
又绝不雷同

03:31.740 --> 03:33.740
小程序本身

03:33.740 --> 03:35.740
它在做开发的时候

03:35.740 --> 03:36.740
它的定位

03:36.740 --> 03:37.740
或者说它的开发逻辑

03:37.740 --> 03:39.740
就是做一些

03:39.740 --> 03:40.740
简单的

03:40.740 --> 03:41.740
一些页面的应用

03:41.740 --> 03:42.740
所以官方

03:42.740 --> 03:43.740
它是不推荐

03:43.740 --> 03:44.740
要做一些

03:44.740 --> 03:45.740
复杂的应用的

03:45.740 --> 03:46.740
但是

03:46.740 --> 03:47.740
一旦

03:47.740 --> 03:48.740
到商业操作上

03:48.740 --> 03:50.740
我们很难去避免

03:50.740 --> 03:51.740
一些

03:51.740 --> 03:52.740
所谓的

03:52.740 --> 03:53.740
复杂应用

03:53.740 --> 03:54.740
有时候

03:54.740 --> 03:55.740
我们还得去做

03:55.740 --> 03:56.740
但是这种时候呢

03:56.740 --> 03:57.740
小程序开发

03:57.740 --> 03:59.740
就会非常的繁琐

03:59.740 --> 04:00.740
你比如

04:00.740 --> 04:01.740
我们有时候要做的是

04:01.740 --> 04:03.740
组件和模块化的开发

04:03.740 --> 04:04.740
自动购物件

04:04.740 --> 04:05.740
以及集成

04:05.740 --> 04:06.740
代码复用

04:06.740 --> 04:07.740
这些

04:07.740 --> 04:09.740
以及我们增强开发效率的问题

04:09.740 --> 04:10.740
如果一个人

04:10.740 --> 04:11.740
他同时

04:11.740 --> 04:13.740
这边又做着HITML的页面

04:13.740 --> 04:15.740
这边又做的小程序

04:15.740 --> 04:16.740
他用了两套模式

04:16.740 --> 04:17.740
在做开发的话

04:17.740 --> 04:19.740
那这个开发效率和开发成本

04:19.740 --> 04:21.740
会相对比较大

04:21.740 --> 04:23.740
但小程序的这种能力呢

04:23.740 --> 04:25.740
或者说这样的一些限制呢

04:25.740 --> 04:26.740
它本身

04:26.740 --> 04:28.740
我们怎么样能够解决呢

04:28.740 --> 04:29.740
我们说

04:29.740 --> 04:30.740
我们其实用mpview

04:30.740 --> 04:32.740
就能很好的来解决

04:32.740 --> 04:34.740
我们可以想象成

04:34.740 --> 04:36.740
我们把view的语法代码

04:36.740 --> 04:38.740
最后让它自动生成成小程序

04:38.740 --> 04:39.740
这是不是一个

04:39.740 --> 04:41.740
非常好的一种

04:41.740 --> 04:42.740
想法呢

04:42.740 --> 04:43.740
那么mpview

04:43.740 --> 04:44.740
就帮你实现了

04:45.740 --> 04:46.740
为什么使用mpview

04:46.740 --> 04:48.740
这边我们做了一个简单的解决

04:48.740 --> 04:49.740
就是说

04:49.740 --> 04:51.740
mpview其实是计划

04:51.740 --> 04:52.740
它想做的一件事

04:52.740 --> 04:54.740
就是和微信小程序

04:54.740 --> 04:55.740
我们的快速迭代

04:55.740 --> 04:58.740
出一个和它对标的一个H5的产品

04:58.740 --> 05:01.740
你这边用原生做H5的

05:01.740 --> 05:03.740
你原生做微信小程序

05:03.740 --> 05:05.740
我这边就用H5做完

05:05.740 --> 05:07.740
然后快速去生成微信小程序

05:07.740 --> 05:09.740
这是mpview所需要做的事情

05:09.740 --> 05:12.740
那么它的整个的诉求也好啊

05:12.740 --> 05:13.740
它的核心理念也好

05:13.740 --> 05:15.740
就是快速实现

05:15.740 --> 05:16.740
代码服用

05:16.740 --> 05:18.740
低成本和高效率

05:18.740 --> 05:20.740
那么小程序本身下面的

05:20.740 --> 05:22.740
四个不足点在mpview中

05:22.740 --> 05:25.740
它得到了非常全面的解决

05:25.740 --> 05:26.740
小程序你看

05:26.740 --> 05:28.740
它组建化机制不够完善

05:28.740 --> 05:30.740
它很难去完成

05:30.740 --> 05:33.740
把某一个的一个业务逻辑

05:33.740 --> 05:35.740
完全的封装在

05:35.740 --> 05:36.740
你当前的

05:36.740 --> 05:37.740
一个组建机制化的

05:37.740 --> 05:38.740
或者说

05:38.740 --> 05:40.740
称为我们现在的一个

05:40.740 --> 05:41.740
组建格式内

05:41.740 --> 05:42.740
包括模板

05:42.740 --> 05:43.740
也是一样

05:43.740 --> 05:44.740
第二

05:44.740 --> 05:46.740
代码附用能力切切

05:46.740 --> 05:49.740
小程序本身的附用代码的结构

05:49.740 --> 05:50.740
相对而言

05:50.740 --> 05:51.740
会比较弱

05:51.740 --> 05:52.740
这点

05:52.740 --> 05:53.740
那么即使小程序

05:53.740 --> 05:55.740
它是有自定义组建的话

05:55.740 --> 05:57.740
那么它的自定义组建的写法

05:57.740 --> 05:58.740
还是和页面一样

05:58.740 --> 06:01.740
还得有四个文件的一些操作

06:01.740 --> 06:02.740
那么同时

06:02.740 --> 06:03.740
这里面的编写语法

06:03.740 --> 06:04.740
还得回到

06:04.740 --> 06:07.740
使用我们小程序的结构上面

06:07.740 --> 06:10.740
而小程序框架和技术团队的

06:10.740 --> 06:12.740
技术站的无法有机结合

06:12.740 --> 06:14.740
这个倒真的是现在

06:14.740 --> 06:15.740
单位里

06:15.740 --> 06:17.740
公司里面的一些

06:17.740 --> 06:19.740
CTO啊

06:19.740 --> 06:21.740
他们所需要去考虑的一个问题

06:21.740 --> 06:22.740
因为

06:22.740 --> 06:24.740
所谓的团队技术站

06:24.740 --> 06:26.740
其实就是我们现在

06:26.740 --> 06:27.740
公司里面

06:27.740 --> 06:28.740
这个团队

06:28.740 --> 06:31.740
主要使用的是哪一些技术

06:31.740 --> 06:34.740
我们希望能够使用这样的技术

06:34.740 --> 06:36.740
公司里的这些

06:36.740 --> 06:38.740
已经在广为使用的

06:38.740 --> 06:39.740
这些特点上面

06:39.740 --> 06:40.740
我们直接

06:40.740 --> 06:42.740
以延续到小程序的开发

06:42.740 --> 06:46.740
而并不是从头再开始学习

06:46.740 --> 06:48.740
所以这种的称之为有机结合

06:48.740 --> 06:49.740
适合小程序

06:49.740 --> 06:51.740
可以有一定的

06:51.740 --> 06:52.740
那个

06:52.740 --> 06:53.740
操作的

06:53.740 --> 06:54.740
但这种操作呢

06:54.740 --> 06:56.740
小程序语法和现在的

06:56.740 --> 06:57.740
大家说

06:57.740 --> 06:58.740
H5、VU这样的结构

06:58.740 --> 06:59.740
没法融合

06:59.740 --> 07:01.740
MPVU解决

07:01.740 --> 07:03.740
小程序的学习成本不够低

07:03.740 --> 07:04.740
当然了

07:04.740 --> 07:06.740
这个低是相对而言的

07:06.740 --> 07:07.740
我们说

07:07.740 --> 07:09.740
如果你现在已经会了MPVU

07:09.740 --> 07:11.740
然后直接转到小程序

07:11.740 --> 07:13.740
那其实你的语法结构

07:13.740 --> 07:15.740
你是并不需要从头学习的

07:15.740 --> 07:17.740
但如果是你想从头学

07:17.740 --> 07:18.740
原生小程序

07:18.740 --> 07:19.740
不是不可以

07:19.740 --> 07:20.740
只是呢

07:20.740 --> 07:22.740
和现有的MPVU的语法结构

07:22.740 --> 07:24.740
会有相对的

07:24.740 --> 07:25.740
不一致

07:25.740 --> 07:27.740
那么你要花点时间

07:27.740 --> 07:28.740
花点精力

07:28.740 --> 07:30.740
再去从头学一遍

07:30.740 --> 07:32.740
这个所谓的成本低

07:32.740 --> 07:34.740
成本高低的区分

07:34.740 --> 07:36.740
这是MPVU的特点

07:36.740 --> 07:38.740
那么我们简单知道一下

07:38.740 --> 07:41.740
MPVU在整个团队

07:41.740 --> 07:43.740
它这个团队的开发过程中

07:43.740 --> 07:46.740
有三步的一个阶段的眼镜

07:46.740 --> 07:48.740
第一步阶段呢

07:48.740 --> 07:50.740
它主要解决了一个问题

07:50.740 --> 07:53.740
就是实现了试图层代码的转换

07:53.740 --> 07:55.740
我们可以将H5的试图代码

07:55.740 --> 07:57.740
转换成小程序

07:57.740 --> 07:59.740
因为在VUE中

07:59.740 --> 08:01.740
我们所书写的

08:01.740 --> 08:03.740
我们的整个的HTML代码

08:03.740 --> 08:05.740
都是属于任何浏览器

08:05.740 --> 08:07.740
都可以访问的HTML5代码

08:07.740 --> 08:09.740
但是小程序本身

08:09.740 --> 08:11.740
原生它是并不支持

08:11.740 --> 08:13.740
HTML代码集的

08:13.740 --> 08:15.740
所以我们在第一阶段

08:15.740 --> 08:17.740
去做了一个转换

08:17.740 --> 08:19.740
使其你能够

08:19.740 --> 08:21.740
将其HTML部分

08:21.740 --> 08:22.740
转换成小程序

08:22.740 --> 08:24.740
这是不是解决了

08:24.740 --> 08:26.740
我们不用再去学小程序

08:26.740 --> 08:28.740
一些WXML代码的特点

08:28.740 --> 08:29.740
时间

08:29.740 --> 08:30.740
第二

08:30.740 --> 08:33.740
第二是组建化机制的建立

08:33.740 --> 08:35.740
因为我们讲VUE本身自己

08:35.740 --> 08:38.740
它就是最强调它的组建模型的

08:38.740 --> 08:41.740
那么我们一旦把VUE的组建模型

08:41.740 --> 08:43.740
结合我们上面的

08:43.740 --> 08:44.740
第一阶段的部分

08:44.740 --> 08:45.740
这样去做的话

08:45.740 --> 08:47.740
我们其实对于小程序的开发

08:47.740 --> 08:49.740
会有特别大的帮助

08:49.740 --> 08:52.740
因为我们VUE的组建的话

08:52.740 --> 08:55.740
它完全还是使用的是HTML的结构

08:55.740 --> 08:57.740
虽然微信小程序

08:57.740 --> 08:59.740
本身有模板和组建

08:59.740 --> 09:00.740
但是这两个之间

09:00.740 --> 09:02.740
依然存在的一定问题

09:02.740 --> 09:03.740
比如

09:03.740 --> 09:05.740
你用Template来做开发的话

09:05.740 --> 09:07.740
那么你本身只能做试图层

09:07.740 --> 09:10.740
你所有的数据还是在引用端

09:10.740 --> 09:12.740
还是在我们的配置端

09:12.740 --> 09:13.740
第二

09:13.740 --> 09:16.740
如果你用小程序自定义组建来实行的话

09:16.740 --> 09:17.740
那么自定义组建

09:17.740 --> 09:19.740
虽然它把所有内容封装在一起

09:19.740 --> 09:21.740
但是它本身无法改变

09:21.740 --> 09:25.740
它还是用系统原生的WXML结构来做开发

09:25.740 --> 09:28.740
你没有办法直接用我们的HTML的

09:28.740 --> 09:30.740
来进行快速的

09:30.740 --> 09:31.740
比如说把HTML

09:31.740 --> 09:32.740
把内容直接

09:32.740 --> 09:34.740
移植到这边来

09:34.740 --> 09:36.740
但是我们的VUE就可以

09:36.740 --> 09:38.740
VUE本身自己就是

09:38.740 --> 09:40.740
我们用HTML的结构开发以后

09:40.740 --> 09:42.740
但是通过第一阶段

09:42.740 --> 09:44.740
第二阶段结合第一阶段

09:44.740 --> 09:46.740
它可以把你的HTML的HTML的弹码

09:46.740 --> 09:49.740
全部转换成我们的小程序的弹码

09:49.740 --> 09:50.740
这个的话

09:50.740 --> 09:51.740
一结合

09:51.740 --> 09:52.740
是不是我们有现在

09:52.740 --> 09:54.740
更多的一些开发概念了

09:54.740 --> 09:56.740
那么在第二阶段的时候

09:56.740 --> 09:57.740
我们VUE

09:57.740 --> 09:59.740
它实现了一个叫做愚法子集

09:59.740 --> 10:01.740
所以并不是全部的

10:01.740 --> 10:04.740
那么为了让这样的一个好的使用方式

10:04.740 --> 10:06.740
和开发的一个框架

10:06.740 --> 10:07.740
能够快速的

10:07.740 --> 10:10.740
可以开发整个小程序所有内容

10:10.740 --> 10:12.740
那就进入到第三阶段

10:12.740 --> 10:16.740
也就是实现了对VUE愚法的全集的支持

10:16.740 --> 10:18.740
第二阶段才是一个子集

10:18.740 --> 10:20.740
那么全集支持以后

10:20.740 --> 10:21.740
我们就开始变成

10:21.740 --> 10:23.740
现在你所见到的

10:23.740 --> 10:25.740
或者之后我们所要学习的

10:25.740 --> 10:28.740
NP-VUE的整个愚法结构了

10:28.740 --> 10:31.740
所以它的转换的模型

10:31.740 --> 10:33.740
也在这边形成了

10:33.740 --> 10:34.740
或者称之为

10:34.740 --> 10:36.740
它的整个的历史眼镜

10:36.740 --> 10:38.740
一 二 三个阶段

10:38.740 --> 10:40.740
我们来看VUE弹码

10:40.740 --> 10:42.740
与小程序弹码的协作

10:42.740 --> 10:43.740
它又有什么样的机制呢

10:43.740 --> 10:44.740
首先

10:44.740 --> 10:46.740
我们VUE的弹码

10:46.740 --> 10:48.740
它可以将小程序的页面

10:48.740 --> 10:50.740
转换为VUE的实现

10:50.740 --> 10:52.740
主要它可以将小程序的页面

10:52.740 --> 10:53.740
转换VUE实现

10:53.740 --> 10:54.740
这句话是什么意思

10:54.740 --> 10:57.740
那么我们有些地方

10:57.740 --> 11:00.740
我们使用小程序所封装好的组件

11:00.740 --> 11:02.740
其实还是不错的

11:02.740 --> 11:03.740
还是不错的

11:03.740 --> 11:05.740
但是我们有时候要把这样的

11:05.740 --> 11:08.740
比如说你在一个模板的template里面

11:08.740 --> 11:11.740
你有时候想做一个轮波图

11:11.740 --> 11:12.740
这种时候

11:12.740 --> 11:15.740
我们小程序里面的swapper就非常简单

11:15.740 --> 11:18.740
所以你就可以在VUE的template里面

11:18.740 --> 11:20.740
去实现我们小程序的swapper

11:20.740 --> 11:22.740
你要直接写它的空间

11:22.740 --> 11:23.740
那么这样呢

11:23.740 --> 11:24.740
我们就形成了VUE

11:24.740 --> 11:25.740
它可以将页面弹码

11:25.740 --> 11:26.740
编为VUE的实现

11:26.740 --> 11:28.740
所以VUE本身这边

11:28.740 --> 11:31.740
能看懂swapper和swapperitem

11:31.740 --> 11:32.740
第二

11:32.740 --> 11:34.740
以VUE开发规范

11:34.740 --> 11:37.740
实现父子之间的关联

11:37.740 --> 11:40.740
我们讲父子之间关联的话

11:40.740 --> 11:42.740
不论是父子之间的关联

11:42.740 --> 11:45.740
还是我们的组件之间的数据传递

11:45.740 --> 11:46.740
或者说关系

11:46.740 --> 11:49.740
那么VUE是给了非常好的一套

11:49.740 --> 11:51.740
我们的开发模型

11:51.740 --> 11:53.740
我们既然用VUE开发

11:53.740 --> 11:55.740
那我们就用VUE的这样的

11:55.740 --> 11:57.740
与法和关联的方式

11:57.740 --> 11:59.740
来做小程序的操作

11:59.740 --> 12:01.740
是不是也简单化了

12:01.740 --> 12:02.740
只要你VUE

12:02.740 --> 12:04.740
这个内容相对会了解的

12:04.740 --> 12:05.740
比较好一点

12:05.740 --> 12:06.740
接下去

12:06.740 --> 12:07.740
小程序代码

12:07.740 --> 12:09.740
以小程序开发规范

12:09.740 --> 12:11.740
编写试图层模板

12:11.740 --> 12:12.740
那么

12:12.740 --> 12:14.740
我们把小程序里面的

12:14.740 --> 12:15.740
有一些内容

12:15.740 --> 12:16.740
你完全

12:16.740 --> 12:17.740
就像我们刚才写

12:17.740 --> 12:18.740
第一点说的一样

12:18.740 --> 12:19.740
你小程序代码

12:19.740 --> 12:22.740
你就可以写在我们template的模板里面

12:22.740 --> 12:24.740
那么你如果写HTML代码

12:24.740 --> 12:25.740
之后也会被

12:25.740 --> 12:27.740
转换成小程序代码

12:27.740 --> 12:29.740
你小程序代码写好以后

12:29.740 --> 12:31.740
你会转换成试图层模板里面

12:31.740 --> 12:32.740
它就会直接

12:32.740 --> 12:34.740
把它编译成我们的

12:34.740 --> 12:36.740
小程序的WXML文件

12:36.740 --> 12:37.740
第二

12:37.740 --> 12:38.740
配置生命周期函数

12:38.740 --> 12:40.740
关联数据更新调用

12:40.740 --> 12:42.740
生命周期函数

12:42.740 --> 12:43.740
在我们的VUE

12:43.740 --> 12:45.740
和我们的小程序中都有

12:45.740 --> 12:48.740
那么在这个关系中

12:48.740 --> 12:49.740
我们的MPVUE

12:49.740 --> 12:51.740
它就能够实现的是

12:51.740 --> 12:54.740
既可以调用小程序的

12:54.740 --> 12:55.740
我们的生命周期

12:55.740 --> 12:56.740
勾在函数

12:56.740 --> 12:59.740
又可以直接使用VUE的勾在函数

12:59.740 --> 13:01.740
这两种它都是可以的

13:01.740 --> 13:04.740
并且这两个之间的调用

13:04.740 --> 13:06.740
直接里面的数据

13:06.740 --> 13:07.740
都可以关联到

13:07.740 --> 13:09.740
我们现在的属性上面

13:09.740 --> 13:10.740
第三

13:10.740 --> 13:12.740
将VUE数据

13:12.740 --> 13:14.740
硬设为小程序的数据模型

13:14.740 --> 13:15.740
那么

13:15.740 --> 13:17.740
这点也是属于我们

13:17.740 --> 13:18.740
在第二阶段

13:18.740 --> 13:20.740
就是前面所谓的

13:20.740 --> 13:21.740
MPVUE的眼睛

13:21.740 --> 13:22.740
第二阶段所实现的

13:22.740 --> 13:25.740
我们MPVUE的数据

13:25.740 --> 13:26.740
我们本身

13:26.740 --> 13:28.740
它就是一个变量

13:28.740 --> 13:29.740
和属性的概念

13:29.740 --> 13:31.740
那么小程序的数据模型

13:31.740 --> 13:34.740
它本身有自己的一套格式

13:34.740 --> 13:36.740
所以我们就可以很简单的

13:36.740 --> 13:38.740
利用我们MPVUE

13:38.740 --> 13:39.740
你只要安账

13:39.740 --> 13:41.740
我们VUE的愈法结构写

13:41.740 --> 13:42.740
最后

13:42.740 --> 13:44.740
它自动会完成小程序的

13:44.740 --> 13:46.740
数据结构的展示

13:46.740 --> 13:47.740
那么这就是编译器

13:47.740 --> 13:49.740
所需要做的东西

13:49.740 --> 13:50.740
同时

13:50.740 --> 13:51.740
我们下面看一下

13:51.740 --> 13:53.740
它同时还有一些其他的机制

13:53.740 --> 13:54.740
比如VUE实例

13:54.740 --> 13:56.740
和小程序配置实例

13:56.740 --> 13:57.740
建立关联

13:57.740 --> 13:58.740
那么

13:58.740 --> 13:59.740
所以我们讲

13:59.740 --> 14:01.740
小程序的实例是什么

14:01.740 --> 14:02.740
APP

14:02.740 --> 14:03.740
然后每个页面

14:03.740 --> 14:04.740
配置

14:04.740 --> 14:06.740
VUE本身也是一样

14:06.740 --> 14:07.740
所以他们之间

14:07.740 --> 14:09.740
可以相互通讯

14:09.740 --> 14:11.740
并且可以相互调用

14:11.740 --> 14:12.740
第二

14:12.740 --> 14:14.740
小程序和VUE的生命周期

14:14.740 --> 14:15.740
建立关系

14:15.740 --> 14:16.740
我们

14:16.740 --> 14:17.740
都可以把

14:17.740 --> 14:19.740
两个生命周期

14:19.740 --> 14:20.740
全部写出来

14:20.740 --> 14:21.740
但是他们之间

14:21.740 --> 14:22.740
是不存在

14:22.740 --> 14:23.740
覆盖

14:23.740 --> 14:24.740
或者说

14:24.740 --> 14:25.740
不执行的概念的

14:25.740 --> 14:27.740
他们都会在他

14:27.740 --> 14:28.740
特定的时间

14:28.740 --> 14:29.740
一起执行

14:29.740 --> 14:31.740
这是小程序VUE代码

14:31.740 --> 14:33.740
协作的一个最大的特点

14:33.740 --> 14:35.740
那么在这个上面的话

14:35.740 --> 14:37.740
我们大家一定要了解到的是

14:37.740 --> 14:38.740
小程序

14:38.740 --> 14:39.740
本身自己

14:39.740 --> 14:40.740
不是说

14:40.740 --> 14:41.740
不能开发

14:41.740 --> 14:42.740
而是说

14:42.740 --> 14:43.740
他用了他自己的

14:43.740 --> 14:44.740
一套愈法

14:44.740 --> 14:46.740
刚开始是简化的

14:46.740 --> 14:48.740
但是随着业务的发展

14:48.740 --> 14:49.740
他很多东西

14:49.740 --> 14:50.740
就需要你

14:50.740 --> 14:51.740
通过一些变相

14:51.740 --> 14:52.740
或者说是

14:52.740 --> 14:53.740
不是特别

14:53.740 --> 14:55.740
好维护的方式去编写

14:55.740 --> 14:57.740
但是VUE本身自己

14:57.740 --> 14:59.740
就有这样的一些

14:59.740 --> 15:02.740
工作机制和建立模板

15:02.740 --> 15:03.740
或者说

15:03.740 --> 15:04.740
完成现在结构化的

15:04.740 --> 15:06.740
这样的一套模型在

15:06.740 --> 15:07.740
所以

15:07.740 --> 15:08.740
把VUE的内容

15:08.740 --> 15:09.740
拿到小程序的开发

15:09.740 --> 15:10.740
相对而言

15:10.740 --> 15:12.740
会非常的舒服

15:12.740 --> 15:13.740
好

15:13.740 --> 15:14.740
那么到这以后

15:14.740 --> 15:15.740
我们说

15:15.740 --> 15:17.740
我们现在还没有进行开发

15:17.740 --> 15:18.740
有同学

15:18.740 --> 15:19.740
有同学问我

15:19.740 --> 15:20.740
老师怎么进行开发呢

15:20.740 --> 15:21.740
其实

15:21.740 --> 15:23.740
你之前的VUE的操作

15:23.740 --> 15:25.740
就能够完全帮助你

15:25.740 --> 15:27.740
直接实行小程序的项目创建

15:27.740 --> 15:28.740
好

15:28.740 --> 15:29.740
我们来对照一下

15:29.740 --> 15:31.740
我们来用一个小图

15:31.740 --> 15:32.740
来对照一下

15:32.740 --> 15:34.740
我们可以用我们的

15:34.740 --> 15:35.740
使用VUE

15:35.740 --> 15:36.740
当然现在我们开始

15:36.740 --> 15:38.740
使用3.0格式

15:38.740 --> 15:39.740
VUE的官方

15:39.740 --> 15:41.740
是写的是2.0的版本

15:41.740 --> 15:42.740
我们做一个桥接的改变

15:42.740 --> 15:44.740
我们用3.0做开发

15:44.740 --> 15:45.740
我们

15:45.740 --> 15:47.740
主要看一下这个表

15:47.740 --> 15:48.740
这个表上面的话

15:48.740 --> 15:49.740
我们看到

15:49.740 --> 15:51.740
现在的小程序开发的话

15:51.740 --> 15:53.740
这边我们改一下

15:53.740 --> 15:55.740
让大家万一以为

15:55.740 --> 16:07.950
2.0升级3.0

16:07.950 --> 16:08.950
OK

16:08.950 --> 16:10.950
那么我们看到

16:10.950 --> 16:11.950
小程序的语法

16:11.950 --> 16:12.950
是小程序的

16:12.950 --> 16:14.950
MPVU是VUE的

16:14.950 --> 16:15.950
语法结构

16:15.950 --> 16:16.950
对吧

16:16.950 --> 16:18.950
然后从标签级来讲的话

16:18.950 --> 16:20.950
小程序只能用它自己的那套

16:20.950 --> 16:21.950
什么VUE

16:21.950 --> 16:22.950
Text

16:22.950 --> 16:23.950
对吧

16:23.950 --> 16:25.950
然后对于MPVU来讲

16:25.950 --> 16:26.950
它竟能用小程序的

16:26.950 --> 16:27.950
又能用HTML的

16:27.950 --> 16:28.950
是不是

16:28.950 --> 16:29.950
我们就扩展的很多了

16:29.950 --> 16:30.950
第三

16:30.950 --> 16:31.950
小程序的样式

16:31.950 --> 16:33.950
我们只能用WXSS的

16:33.950 --> 16:35.950
但是对于MPVU来讲的话

16:35.950 --> 16:36.950
SARS

16:36.950 --> 16:37.950
LAS

16:37.950 --> 16:38.950
加上Protest

16:38.950 --> 16:40.950
这些都可以用

16:40.950 --> 16:42.950
再往下组建

16:42.950 --> 16:43.950
小程序

16:43.950 --> 16:44.950
注意

16:44.950 --> 16:45.950
它是有组建

16:45.950 --> 16:47.950
它是它没有组建机制化

16:47.950 --> 16:49.950
它没有组建的机制化

16:50.950 --> 16:52.950
那么对于MPVU来讲的话

16:52.950 --> 16:53.950
MPVU GS

16:53.950 --> 16:55.950
它是非常规范的

16:55.950 --> 16:57.950
有组建机制

16:57.950 --> 16:59.950
所以利用组建化的开发

16:59.950 --> 17:00.950
对小程序来说

17:00.950 --> 17:02.950
也是非常好的一个特点

17:02.950 --> 17:03.950
多端附用

17:03.950 --> 17:05.950
小程序本身自己要用的话

17:05.950 --> 17:07.950
只有复制概念

17:07.950 --> 17:09.950
那么对于MPVU来讲的话

17:09.950 --> 17:10.950
它是可以多端

17:10.950 --> 17:12.950
直接来使用的

17:12.950 --> 17:13.950
自动构建

17:13.950 --> 17:14.950
那么小程序

17:14.950 --> 17:16.950
它是没有办法自动构建

17:16.950 --> 17:17.950
一般我们都是从头

17:17.950 --> 17:18.950
开始创建

17:18.950 --> 17:19.950
当然你建云的时候

17:19.950 --> 17:20.950
我们也可以让它

17:20.950 --> 17:22.950
做一个简单的框架

17:22.950 --> 17:24.950
但它无法做里面的一个

17:24.950 --> 17:26.950
构建行为

17:26.950 --> 17:27.950
但是对于小程序

17:27.950 --> 17:28.950
对于MPVU来说

17:28.950 --> 17:29.950
我们可以用Webpack

17:29.950 --> 17:31.950
来构建整个的框架体系

17:31.950 --> 17:32.950
就是我们一般

17:32.950 --> 17:34.950
称之为的教授架

17:34.950 --> 17:35.950
再接下去

17:35.950 --> 17:36.950
我们讲一下上手成本

17:36.950 --> 17:37.950
小程序的话

17:37.950 --> 17:40.950
你肯定是从头到尾来学习

17:40.950 --> 17:42.950
因为里面的很多语法

17:42.950 --> 17:43.950
很多的一些方式

17:43.950 --> 17:45.950
都是它自己独特的

17:45.950 --> 17:47.950
但对于MPVU来讲的话

17:47.950 --> 17:48.950
我们只要熟悉

17:48.950 --> 17:50.950
VOE的基本语法

17:50.950 --> 17:51.950
就可以使用了

17:51.950 --> 17:53.950
我们将集中数据管理

17:53.950 --> 17:56.950
那么这就是VOEX的特点了

17:56.950 --> 17:57.950
但是小程序

17:57.950 --> 17:58.950
它是不支持的

17:58.950 --> 17:59.950
所以它还是属于

17:59.950 --> 18:01.950
零散的存储

18:01.950 --> 18:03.950
有些是存在服务器端

18:03.950 --> 18:04.950
有些是存在本地

18:04.950 --> 18:05.950
有些的话

18:05.950 --> 18:06.950
我们做一些

18:06.950 --> 18:07.950
其他的零式存储

18:07.950 --> 18:09.950
但是对于我们的

18:09.950 --> 18:11.950
全局的数据状态的存储

18:11.950 --> 18:12.950
和管理来说

18:12.950 --> 18:13.950
VOE差

18:13.950 --> 18:14.950
这是一个非常

18:14.950 --> 18:16.950
对VOE来讲

18:16.950 --> 18:17.950
非常重要的一个点

18:17.950 --> 18:18.950
好

18:18.950 --> 18:19.950
那么从这个角度来讲

18:19.950 --> 18:22.950
我们已经非常明确的了解了

18:22.950 --> 18:24.950
我们VOE和MPVU

18:24.950 --> 18:26.950
和微信小程区的区别

18:26.950 --> 18:28.950
那么从下一节课开始

18:28.950 --> 18:30.950
我将给大家来演示

18:30.950 --> 18:31.950
我们怎么样去搭建

18:31.950 --> 18:33.950
并且能够进行开发

