WEBVTT

00:00.940 --> 00:05.540
好吧 来吧 我们来分析一下DivaLoading的元代

00:05.540 --> 00:06.940
我们自己首写一个

00:06.940 --> 00:09.840
现在我的Gate分支又回到了

00:09.840 --> 00:14.140
我们之前首写Diva 最后一次首写Diva的状态了

00:14.140 --> 00:17.640
就之前我们把Diva已经写完了 咱们接着写

00:17.640 --> 00:20.940
就是现在多一个U字这个函数 对吧

00:20.940 --> 00:24.640
我们现在在Diva里面 这里面的东西

00:24.640 --> 00:29.340
所以要多一个函数 要多一个U字函数

00:29.440 --> 00:34.140
其实U字函数特别简单 我们在这里加一个U字函数

00:34.140 --> 00:38.540
我们在下面使用 写一个函数U字

00:38.540 --> 00:41.840
你需要传一个中间键 就是一个插键进来

00:41.840 --> 00:43.940
旁景 对吧 传一个插键进来

00:43.940 --> 00:46.140
这个插键不就是一个对象 对不对

00:46.140 --> 00:50.640
这个就是使用Diva插键 使用Diva插键

00:50.640 --> 00:54.140
其实这个插键是啥呢 这个插键就是一个配置对象

00:54.140 --> 00:55.340
一个配置对象

00:55.340 --> 00:58.840
那么它会把我们那个配置对象混合到

00:58.840 --> 01:02.340
你原来的配置里面 就这么简单

01:02.340 --> 01:04.840
每次你调用这个U字方法 干嘛呢

01:04.840 --> 01:08.840
我们是不是重新给这个Option是复制 对不对

01:08.840 --> 01:12.640
是不是重新给这个Option是复制 把这个变Lat

01:12.640 --> 01:15.340
这里重新给这个Option是复制

01:15.340 --> 01:18.840
复制为什么呢 原来的Option是展开

01:18.840 --> 01:23.040
然后把这个Planning 把Planning展开

01:23.040 --> 01:25.240
就完了 对吧 就完了

01:25.240 --> 01:27.540
这个不用掩饰吧 不用掩饰吧

01:27.540 --> 01:28.840
它就是个配置对象

01:28.840 --> 01:31.940
我们把这个配置重新覆盖一下就完事了

01:31.940 --> 01:34.640
这是关于U字

01:34.640 --> 01:37.340
那么现在我们主要是来写Diva loading

01:37.340 --> 01:40.740
我们在这里先建个文件 Diva loading

01:40.740 --> 01:43.640
其实这个Diva loading这个东西

01:43.640 --> 01:45.640
它本身安装Diva的时候

01:45.640 --> 01:47.940
它里边就已经包含了这个玩意了

01:47.940 --> 01:49.040
它已经包含了

01:49.040 --> 01:51.540
它本身就是它的官方库里边一个东西

01:51.540 --> 01:57.040
它就是告诉你我们Diva是支持这个就是插件的

01:57.040 --> 01:58.540
你可以自己去写一些插件

01:58.540 --> 02:02.340
它官方跟你写了 但是它没有应用进去

02:02.340 --> 02:03.540
那么这里其实是啥呢

02:03.540 --> 02:06.240
其实就是最终就是导出一个

02:06.240 --> 02:07.540
我们当时怎么用的

02:07.540 --> 02:08.840
当时怎么用那个Diva loading的

02:08.840 --> 02:11.340
是不是有它导出一个函数 对不对

02:11.340 --> 02:16.280
Default导出了这么一个函数

02:16.280 --> 02:19.180
这个函数你要传一个配置进来

02:19.180 --> 02:21.280
那么这个配置里边我们之前分析的

02:21.380 --> 02:23.380
只有一个啥

02:23.380 --> 02:26.080
只有一个Name Space 对吧

02:26.080 --> 02:27.180
只有这么一个东西

02:27.180 --> 02:28.780
是不是只有这么一个东西

02:28.780 --> 02:29.680
当时分析过了

02:29.680 --> 02:31.180
这个对象里边只有这么一个东西

02:31.180 --> 02:33.780
如果你不传的话就是个默认对象

02:33.780 --> 02:35.480
只有这么一个东西

02:35.480 --> 02:37.880
实际上它这里边还有两个属性

02:37.880 --> 02:41.080
还有只剩文皮是基本上没用不到

02:41.080 --> 02:42.480
一个是Only

02:42.480 --> 02:44.480
还有一个是Only

02:44.480 --> 02:47.280
还有一个是Except

02:47.280 --> 02:47.980
这两个是什么

02:47.980 --> 02:48.780
这两个是一个数

02:48.780 --> 02:50.380
这两个分别都是数足

02:50.380 --> 02:54.980
就是指包含哪些模型

02:54.980 --> 02:56.480
只要哪些模型我要处理

02:56.480 --> 02:57.680
我要处理这个loading

02:57.680 --> 03:01.080
要观测它的状态

03:01.080 --> 03:03.180
哪些模型我不处理

03:03.180 --> 03:05.380
无非就是多了这么一个东西

03:05.380 --> 03:06.080
都是一个数足

03:06.080 --> 03:08.680
比方说我们只处理Counter这个模型

03:08.680 --> 03:09.880
不处理Students

03:09.880 --> 03:11.380
比方说我们这里Exception

03:11.380 --> 03:13.280
可以排除Students

03:13.280 --> 03:14.180
无非就是这个

03:14.180 --> 03:16.780
这两个我们平时是不怎么用

03:16.780 --> 03:19.080
当然你要去写这个玩意的话

03:19.280 --> 03:20.280
也可以去写

03:20.280 --> 03:23.280
我们这里只管Name Space就行了

03:23.280 --> 03:25.280
好那么这个是一个命名空间

03:25.280 --> 03:25.980
对不对

03:25.980 --> 03:28.080
它主要是主要的目的是什么

03:28.080 --> 03:30.780
主要的目的是要去挂载一个状态

03:30.780 --> 03:31.680
这个状态的名字

03:31.680 --> 03:34.080
跟命名空间是一样的

03:34.080 --> 03:36.980
好那么这里我们还是要给它一个默认值

03:36.980 --> 03:40.680
比方说Name Space

03:40.680 --> 03:42.980
我们给它一个默认值

03:42.980 --> 03:43.780
什么默认值呢

03:43.780 --> 03:45.180
就是loading对吧

03:45.180 --> 03:48.380
是不是加了它的状态名字叫做loading

03:48.380 --> 03:51.380
默认命名空间

03:51.380 --> 03:52.980
名是loading

03:52.980 --> 03:53.780
这个命名空间名

03:53.780 --> 03:54.780
其实在dba里边

03:54.780 --> 03:59.480
它的意思就是仓库里边的那个属性名

03:59.480 --> 04:00.680
好如果说你传递了

04:00.680 --> 04:01.980
我就使用你传递的

04:01.980 --> 04:03.980
如果你没有传递的话

04:03.980 --> 04:04.880
如果你没有传递的话

04:04.880 --> 04:06.680
我们就使用我们这个Name Space

04:06.680 --> 04:09.780
是不是这样子就可以得到一个Name Space的

04:09.780 --> 04:11.380
是不是这样子可以得到一个Name Space

04:11.380 --> 04:12.580
就是我们的属性名

04:12.580 --> 04:14.280
对吧是不是可以得到了

04:14.280 --> 04:15.880
好接下来我们继续分析

04:15.880 --> 04:17.380
那么这个这个插件

04:17.380 --> 04:19.880
它最终肯定是要返回这么一个东西

04:19.880 --> 04:21.680
肯定是要返回一个配置对象

04:21.680 --> 04:22.680
这是毫无疑问的

04:22.680 --> 04:24.280
要返回一个配置对象

04:24.280 --> 04:26.480
到时候我们用的时候是怎么用的呢

04:26.480 --> 04:28.280
把这些东西取掉

04:28.280 --> 04:29.580
这段期把它取掉

04:29.580 --> 04:33.040
皮税保留就行了

04:33.040 --> 04:34.840
好我们到时候怎么用的呢

04:34.840 --> 04:37.240
是这样子导入

04:37.240 --> 04:40.440
create loading

04:40.440 --> 04:44.140
导入它的那个默认导出的那个函数

04:44.140 --> 04:46.140
dba loading

04:46.140 --> 04:47.440
那么这里边怎么用的呢

04:47.440 --> 04:50.240
是不是app.usecreate loading

04:50.240 --> 04:51.740
对吧是不是这样子用的

04:51.740 --> 04:54.240
对不对这里要传传一些配置

04:54.240 --> 04:56.040
你爱怎么传怎么传

04:56.040 --> 04:58.440
好那么就完了就用进去了

04:58.440 --> 05:00.140
那么现在的问题是

05:00.140 --> 05:01.740
我们应用了之后呢

05:01.740 --> 05:04.840
需要在这里去挂载挂载一个东西

05:04.840 --> 05:06.640
我们这里打开

05:06.640 --> 05:08.840
open inner panel

05:08.840 --> 05:11.640
我们要在状态里边是不是挂载一个属性

05:11.640 --> 05:14.140
我们怎么样利用配置

05:14.140 --> 05:16.240
在这里边挂载一个属性呢

05:16.240 --> 05:19.440
我们怎么样利用配置在这里挂载一个属性呢

05:19.440 --> 05:20.540
怎么挂载

05:20.540 --> 05:22.340
是要配置啥

05:22.340 --> 05:23.140
还记得吗

05:23.140 --> 05:25.540
是要配置那个x-chord

05:25.540 --> 05:26.740
x-chord

05:26.740 --> 05:27.440
那个名字打下来的

05:27.440 --> 05:29.140
我们看一下这里的正题是

05:29.140 --> 05:31.940
x-chord

05:31.940 --> 05:33.040
哎呦哎呦

05:33.040 --> 05:37.240
x-chord reducers

05:37.240 --> 05:38.740
对吧是要配置这个东西

05:38.740 --> 05:41.140
就是要配置其他的 reducers

05:41.140 --> 05:45.140
还是对照一下那个观望文档吧

05:45.240 --> 05:47.040
还是对照一下观望文档

05:47.040 --> 05:49.640
有的时候那个名字也忘了

05:49.640 --> 05:51.740
API 这里 options

05:51.740 --> 05:53.240
extra reducers

05:53.240 --> 05:54.140
对 就是这个

05:54.140 --> 05:55.640
什么加这么一个配置

05:55.640 --> 05:56.240
对不对

05:56.240 --> 05:57.340
要加这么一个配置

05:57.340 --> 05:58.840
extra reducers

05:58.840 --> 05:59.940
因为加了这个

05:59.940 --> 06:01.040
加了这个配置过后呢

06:01.040 --> 06:02.940
把它配置为什么一个对象

06:02.940 --> 06:04.040
这个对象里边比方说啊

06:04.040 --> 06:05.240
我们给它配置一个 loading

06:05.240 --> 06:06.240
这是一个 reducer

06:06.240 --> 06:06.640
对不对

06:06.640 --> 06:07.540
你给我一个 state

06:07.540 --> 06:08.240
给我一个 action

06:08.240 --> 06:08.940
对不对

06:08.940 --> 06:10.640
是不是一个 reducer

06:10.640 --> 06:11.440
是这样吧

06:11.440 --> 06:11.740
对不对

06:11.740 --> 06:13.040
是不是一个 reducer

06:13.040 --> 06:14.840
那么这样子呢

06:14.940 --> 06:18.340
我是不是就加了一个额外的属性进去了

06:18.340 --> 06:19.440
就加了一个额外的属性

06:19.440 --> 06:21.140
loading进去了

06:21.140 --> 06:22.440
就这么简单啊

06:22.440 --> 06:23.640
那么它到时候呢

06:23.640 --> 06:26.140
会把这个东西合并到跟 reducer 里边

06:26.140 --> 06:27.540
就是 reducer reducer 里边

06:27.540 --> 06:29.140
其实我们要做的就是这么一件事

06:29.140 --> 06:30.640
这里写这么一个函数

06:30.640 --> 06:31.140
对不对

06:31.140 --> 06:32.640
写这么一个函数

06:32.640 --> 06:33.540
那么这里呢

06:33.540 --> 06:34.440
这个函数

06:34.440 --> 06:35.140
我们可以

06:35.140 --> 06:36.740
其实这个函数我们写到哪呢

06:36.740 --> 06:37.740
我们可以写

06:37.740 --> 06:39.640
我们到时可以把这个函数写到这

06:39.640 --> 06:40.540
写到这

06:40.540 --> 06:43.140
就是 reducer

06:43.140 --> 06:45.240
把这个函数写到这

06:45.240 --> 06:47.240
然后因为好看一点嘛

06:47.240 --> 06:48.440
那么这里loading是不是

06:48.440 --> 06:49.840
直接用这个函数玩事了

06:49.840 --> 06:51.140
对吧 reducer

06:51.140 --> 06:51.340
对吧

06:51.340 --> 06:52.940
把这个函数给他就玩事了

06:52.940 --> 06:54.840
那么关键是这个名字

06:54.840 --> 06:56.640
他的名字一定叫loading吗

06:56.640 --> 06:57.240
不一定哦

06:57.240 --> 06:59.440
他是来自于这个属性的值对吧

06:59.440 --> 07:01.040
那么这个属性他有可能会配置的

07:01.040 --> 07:02.940
配置的我我就使用配置的值

07:02.940 --> 07:03.540
没有配置的话

07:03.540 --> 07:04.840
我就使用默认值

07:04.840 --> 07:06.440
所以说我们这里的属性名

07:06.440 --> 07:08.440
是不是跟这个变量一样

07:08.440 --> 07:09.840
那么这里的属性名该咋写

07:09.840 --> 07:11.240
所以应该这样子写

07:11.240 --> 07:12.740
name space

07:12.740 --> 07:13.140
对不对

07:13.140 --> 07:14.640
是不是应该这样子写

07:14.640 --> 07:15.340
没问题吧

07:15.340 --> 07:16.940
那么比方说我们这里写个123

07:16.940 --> 07:17.840
返回一个123

07:17.840 --> 07:18.940
我们来看一下吧

07:18.940 --> 07:19.740
好保存

07:21.340 --> 07:24.040
这边啊看一下状态

07:24.040 --> 07:25.940
里面是不是多了一个loading123

07:25.940 --> 07:26.240
对不对

07:26.240 --> 07:27.640
是不是多了一个loading

07:27.640 --> 07:29.640
就这么个意思啊

07:29.640 --> 07:30.940
明白的意思吧

07:30.940 --> 07:32.040
就这么个意思

07:32.040 --> 07:32.240
好

07:32.240 --> 07:34.940
那么如果说你传了一个配置的话

07:34.940 --> 07:36.640
比方说你这里传了个配置

07:36.640 --> 07:39.240
name space

07:39.240 --> 07:41.240
等于abc

07:41.240 --> 07:42.340
好保存

07:42.440 --> 07:43.140
你看一下

07:43.140 --> 07:43.940
这边的

07:43.940 --> 07:45.340
是不是变成abc了

07:45.340 --> 07:45.740
对吧

07:45.740 --> 07:46.740
就多了这么一个

07:46.740 --> 07:48.140
多了这么一个状态而已

07:48.140 --> 07:51.340
我在这里一般不用传配置

07:51.340 --> 07:52.040
好那么关键

07:52.040 --> 07:53.340
然后继续分析啊

07:53.340 --> 07:55.640
那么这个reducer里面是要干嘛呢

07:55.640 --> 07:58.040
是要改变这里的状态啊

07:58.040 --> 07:59.540
是要改变这里的状态

07:59.540 --> 07:59.840
对不对

07:59.840 --> 08:01.940
reducer它就能用来改变状态的嘛

08:01.940 --> 08:04.040
那么reducer它里面有个默认值

08:04.040 --> 08:05.140
它一开始有个默认值

08:05.140 --> 08:05.640
来吧

08:05.640 --> 08:07.040
我们来写这么一个默认值

08:07.040 --> 08:08.940
就是initial

08:09.040 --> 08:09.940
initial

08:09.940 --> 08:11.140
默认的什么

08:11.140 --> 08:12.740
默认的state

08:12.740 --> 08:13.740
默认状态

08:13.740 --> 08:15.240
默认状态是啥呢

08:15.240 --> 08:16.140
我们之前分析过

08:16.140 --> 08:17.740
这里边是不是有三个属性

08:17.740 --> 08:19.140
一个是global

08:19.140 --> 08:20.540
一个是global

08:20.540 --> 08:21.440
它是一个布尔

08:21.440 --> 08:22.340
它要么为two

08:22.340 --> 08:23.340
要么为force

08:23.340 --> 08:25.440
它表示的是全局式风油

08:25.440 --> 08:26.440
正在夹载中

08:26.440 --> 08:28.440
默认为force

08:28.440 --> 08:28.840
然后呢

08:28.840 --> 08:29.940
还有一个models

08:29.940 --> 08:30.640
对吧

08:30.640 --> 08:31.340
是个对象

08:31.340 --> 08:33.040
这个对象里边用属性来记录

08:33.040 --> 08:34.840
是谁在夹载中

08:34.840 --> 08:35.840
它是个对象

08:35.840 --> 08:36.140
然后呢

08:36.140 --> 08:37.540
还有什么effects

08:37.540 --> 08:38.940
那么表示出发的x

08:38.940 --> 08:39.840
那么它也是个对象

08:39.840 --> 08:40.340
是谁

08:40.340 --> 08:42.840
哪个x出发的正在夹载中

08:42.840 --> 08:44.340
那么就这么三个东西

08:44.340 --> 08:45.740
所以说我们的初始属性

08:45.740 --> 08:46.640
是不是这个玩意

08:46.640 --> 08:46.940
对吧

08:46.940 --> 08:48.340
初始状态就是这个玩意

08:48.340 --> 08:48.640
好

08:48.640 --> 08:51.040
那么这里如果说直接把状态返回

08:51.040 --> 08:51.340
保存

08:51.340 --> 08:53.040
你看一下

08:53.040 --> 08:54.040
我们状态里边

08:54.040 --> 08:55.840
楼顶是不是变成这个样子了

08:55.840 --> 08:56.240
对吧

08:56.240 --> 08:58.340
这就是我们一开始的状态

08:58.340 --> 09:01.140
那么它有什么情况要改变了

09:01.140 --> 09:03.440
是不是要触发相应的x

09:03.440 --> 09:04.040
对不对

09:04.040 --> 09:05.440
是不是要触发相应的x

09:05.440 --> 09:07.140
来改变这个东西

09:07.240 --> 09:09.640
那么触发相应的x的时候

09:10.640 --> 09:12.440
来触发相应的x的时候

09:12.440 --> 09:15.040
你要首先x的类型是啥

09:15.040 --> 09:16.640
你是不是要给一个特殊的类型

09:16.640 --> 09:17.840
因为我不是所有的x

09:17.840 --> 09:18.640
都要处理

09:18.640 --> 09:20.840
我们只处理一些特殊的类型

09:20.840 --> 09:22.540
那你是不是要给一个类型

09:22.540 --> 09:23.040
好类型呢

09:23.040 --> 09:24.440
我们可以写到这

09:24.440 --> 09:26.440
一个是秀

09:26.440 --> 09:27.440
一个秀

09:27.440 --> 09:28.740
一个秀是什么意思呢

09:28.740 --> 09:31.840
就表示说把它变成正在夹载中

09:31.840 --> 09:32.740
有这么一个类型

09:32.740 --> 09:35.340
表示把它变成正在夹载中

09:35.340 --> 09:36.240
那么这个类型的名字

09:36.240 --> 09:37.640
我们可以给它一个特殊的名字

09:37.640 --> 09:41.540
叫做Diva楼顶鞋杠秀

09:42.940 --> 09:44.540
然后这里Hide

09:45.940 --> 09:47.540
那么Diva楼顶就Hide

09:49.140 --> 09:51.340
就这么两个x类型

09:51.340 --> 09:52.740
那么只要你匹配这个类型

09:52.740 --> 09:53.840
我们就做一下处理

09:54.840 --> 09:56.740
然后我们继续写switch

09:59.110 --> 09:59.910
我们匹配的什么

09:59.910 --> 10:01.010
x点Type

10:01.010 --> 10:01.510
对吧

10:01.510 --> 10:02.710
匹配这个

10:02.710 --> 10:04.610
当x的类型为秀的时候

10:04.610 --> 10:06.110
我们干什么事情

10:06.110 --> 10:07.110
然后呢

10:08.110 --> 10:10.510
当x的类型为什么Hide的时候

10:10.510 --> 10:11.910
我们要干什么事情

10:11.910 --> 10:13.110
Default的时候很简单

10:15.610 --> 10:17.510
这个我们要返回什么东西

10:17.510 --> 10:18.710
这个是

10:18.710 --> 10:19.510
我们先写到这吧

10:20.710 --> 10:21.410
格式写好

10:22.910 --> 10:24.510
然后Default的时候很简单

10:24.510 --> 10:26.910
我们就远方不动的返回原来的状态

10:27.810 --> 10:29.610
只要你x出发了这两个

10:29.610 --> 10:31.810
任何一个我们就可能会改变状态

10:31.810 --> 10:33.010
就改变这个东西

10:33.010 --> 10:33.910
就不改变这个东西

10:34.710 --> 10:35.310
好

10:35.310 --> 10:36.810
那么现在我们想一想

10:36.810 --> 10:39.010
x里边是不是要加负载啊

10:39.010 --> 10:41.710
因为我要知道我怎么去改变

10:41.710 --> 10:42.410
怎么去改变

10:42.410 --> 10:44.210
你说要加一些负载

10:44.210 --> 10:47.010
那么这个负载应该是一个什么样的格式呢

10:47.010 --> 10:48.410
我们自行约定一下

10:48.410 --> 10:51.010
约定这个x的负载应该就是payload的

10:51.010 --> 10:52.910
应该是个什么样的格式

10:52.910 --> 10:55.010
这里我们可以这样子约定

10:55.010 --> 10:56.610
比方说你要秀的时候

10:56.610 --> 10:58.110
你不是要改变这个玩意吗

10:58.110 --> 10:58.710
对不对

10:58.710 --> 11:00.610
你给我传个这个东西过来

11:00.610 --> 11:02.710
传个这么一个x过来

11:02.810 --> 11:03.910
看着啊

11:03.910 --> 11:04.910
传这么一个过来

11:04.910 --> 11:06.010
type呢为什么呢

11:06.010 --> 11:08.410
为这个就是什么diva

11:09.110 --> 11:10.610
diva loading啊

11:10.610 --> 11:11.210
我就不写了啊

11:11.210 --> 11:12.710
秀对吧

11:12.710 --> 11:13.110
好

11:13.110 --> 11:15.610
然后呢你要payload一个传啥呢

11:15.610 --> 11:17.210
传一个对象进来

11:17.210 --> 11:18.710
因为我一会呢

11:18.710 --> 11:19.910
肯定要更改什么

11:19.910 --> 11:21.010
更改这个玩意

11:21.010 --> 11:21.310
对吧

11:21.310 --> 11:22.210
更改这个玩意

11:22.210 --> 11:23.810
所以更改这里边的东西

11:23.810 --> 11:24.410
对吧

11:24.410 --> 11:27.010
比方说counter现在正在夹载中

11:27.010 --> 11:29.010
那你是不是要传一个就是

11:29.810 --> 11:31.110
模型的

11:31.110 --> 11:32.410
命名空间对不对

11:32.410 --> 11:33.710
哪个模型的命名

11:33.710 --> 11:36.310
就是哪个模型正在夹载中

11:36.310 --> 11:38.210
那你是不是要把模型的命名空间

11:38.210 --> 11:39.110
传过来

11:39.110 --> 11:39.910
name space

11:41.610 --> 11:43.510
把模型比方说你传个counter进来

11:43.510 --> 11:45.610
表示这个模型正在夹载中

11:45.610 --> 11:46.810
是这么个意思

11:46.810 --> 11:47.210
然后呢

11:47.210 --> 11:48.210
还要把什么传过来

11:48.210 --> 11:50.410
还要把这个action type传过来

11:50.410 --> 11:52.810
这个action type跟这个type不一样啊

11:52.810 --> 11:53.710
这个name space呢

11:53.710 --> 11:55.710
跟我们这里的name space也不一样啊

11:55.710 --> 11:58.110
这里的name space呢

11:58.110 --> 12:00.210
表示的是我这个

12:01.510 --> 12:02.810
我这个就是状态

12:02.810 --> 12:03.510
他的名称

12:04.310 --> 12:05.710
那么这里的name space呢

12:05.710 --> 12:09.110
表示的是哪个模型正在夹载中

12:09.110 --> 12:10.410
是这么个意思啊

12:10.410 --> 12:11.910
还有一个action type

12:11.910 --> 12:13.310
比方说我们触发的就是

12:13.310 --> 12:15.010
是哪个action type导致的

12:15.010 --> 12:16.010
他正在夹载中

12:16.010 --> 12:19.510
那么比方说我们这里用这个counter啊

12:19.510 --> 12:22.110
a think increase对吧

12:22.110 --> 12:23.910
是这个action type正在夹载中

12:23.910 --> 12:26.010
那么你只要把这两个传过来

12:26.010 --> 12:27.610
是不是就好就搞定了

12:27.610 --> 12:28.810
我就往这个loading里边

12:28.810 --> 12:30.310
model里边去加一个什么

12:30.410 --> 12:31.910
加一个counter with true

12:31.910 --> 12:33.410
而fix里边加一个什么

12:33.410 --> 12:35.910
加一个counter think increase with true

12:35.910 --> 12:36.210
对吧

12:36.210 --> 12:37.210
是不是就完成了

12:37.210 --> 12:38.210
所以说你的payload了

12:38.210 --> 12:39.310
是不是得这样传递

12:40.010 --> 12:40.210
哎

12:40.210 --> 12:41.310
这是显示

12:41.310 --> 12:42.710
那么如果以后呢

12:42.710 --> 12:44.610
就是一会不是显示啊

12:44.610 --> 12:45.610
就正在夹载中

12:45.610 --> 12:46.610
如果说以后呢

12:46.610 --> 12:47.610
不在夹载中了

12:47.610 --> 12:49.410
那你是不是传一个hide新来

12:49.410 --> 12:49.910
对吧

12:49.910 --> 12:50.910
hide新来

12:50.910 --> 12:52.510
好那么hide新来过后呢

12:52.510 --> 12:53.710
那么这里呢

12:53.710 --> 12:55.210
name space还是为counter

12:55.210 --> 12:56.810
action type还是为这个对吧

12:56.810 --> 12:58.610
我就把它变为force

12:58.610 --> 12:59.610
就这么简单

12:59.610 --> 13:00.410
说说你payload了呢

13:00.410 --> 13:01.310
我们约定好

13:01.310 --> 13:03.510
你要传这么两个东西啊

13:03.510 --> 13:04.210
那么这里呢

13:04.210 --> 13:05.910
我们就可以在这

13:05.910 --> 13:06.910
在这个reducer里面

13:06.910 --> 13:08.010
是不是进行解构

13:08.010 --> 13:08.510
对吧

13:08.510 --> 13:09.610
解构出什么

13:09.610 --> 13:11.210
从这个payload里边

13:11.210 --> 13:14.010
action.payload里边

13:14.010 --> 13:16.710
是不是解构出这个name space

13:16.710 --> 13:18.910
还有解构出什么action type

13:18.910 --> 13:19.210
对吧

13:19.210 --> 13:21.010
是不是解构出这么两个玩意儿

13:21.010 --> 13:22.110
对不对

13:22.110 --> 13:22.510
啊

13:22.510 --> 13:23.010
当然呢

13:23.010 --> 13:24.010
由于有可能

13:24.010 --> 13:25.510
因为你任何的action都会

13:25.510 --> 13:26.310
都会进到这来

13:26.310 --> 13:26.910
对不对

13:26.910 --> 13:28.510
任何的action都会进入

13:28.510 --> 13:29.510
进入到这

13:29.810 --> 13:30.310
所以说呢

13:30.310 --> 13:32.110
如果说你是其他一个行根

13:32.110 --> 13:32.710
也不是秀

13:32.710 --> 13:34.510
也不是hide是其他的一个行的话

13:34.510 --> 13:35.510
那么这个是不知道爆错

13:35.510 --> 13:36.510
因为这里是on define的

13:36.510 --> 13:38.010
有可能是on define的啊

13:38.010 --> 13:39.310
有可能是on define的

13:39.310 --> 13:41.510
所以说我们这里要加个或者啊

13:41.510 --> 13:43.310
如果说你payload了没有值的话

13:43.310 --> 13:44.910
ok 我给你一个空对象啊

13:44.910 --> 13:46.410
那么这两个解构出来是on define的

13:46.410 --> 13:47.310
on define的无所谓啊

13:47.310 --> 13:49.110
反正就进入default了嘛

13:49.110 --> 13:49.710
default的话

13:49.710 --> 13:52.410
他就返回一个远方不动的返回stats

13:52.410 --> 13:53.210
如果你是秀

13:53.210 --> 13:53.910
你是hide的话

13:53.910 --> 13:55.610
一定会有这两个东西

13:55.610 --> 13:55.810
好

13:55.810 --> 13:56.810
咱们再来处理

13:56.810 --> 13:58.210
如果说你是秀的话

13:58.210 --> 14:00.210
我返回啥呢

14:00.210 --> 14:01.610
我把原来状态展开

14:01.610 --> 14:03.310
我们自己的原来状态展开

14:03.310 --> 14:04.710
然后呢

14:04.710 --> 14:07.110
是不是现在要把global变成了什么

14:07.110 --> 14:08.410
变成处了

14:08.410 --> 14:09.410
对不对

14:09.410 --> 14:10.510
是把global变成处了

14:10.510 --> 14:12.210
或者我们都不用展开原来状态了

14:12.210 --> 14:13.210
因为就这么三个属性

14:13.210 --> 14:13.510
对吧

14:13.510 --> 14:14.710
没有别的了

14:14.710 --> 14:15.910
global是变成处

14:15.910 --> 14:17.810
因为只要有一个在夹载中

14:17.810 --> 14:20.210
是不是全局一定是在夹载中

14:20.210 --> 14:20.710
对吧

14:20.710 --> 14:21.810
那么你现在是秀

14:21.810 --> 14:24.510
秀表示有其中一个正在夹载中了

14:24.510 --> 14:24.610
好

14:24.610 --> 14:26.210
那么global一定维促

14:26.210 --> 14:27.810
毫无疑问

14:27.810 --> 14:29.510
然后呢models

14:29.510 --> 14:31.110
models里边

14:31.110 --> 14:33.710
那么models里边有可能有别人正在夹载中

14:33.710 --> 14:35.110
但是你别人

14:35.110 --> 14:36.510
别人的状态你不能把丢掉

14:36.510 --> 14:36.710
对吧

14:36.710 --> 14:38.210
你不能直接写一个

14:38.210 --> 14:40.210
你不能直接写一个counter维促

14:40.210 --> 14:41.310
你不能直接这样子写

14:41.310 --> 14:43.410
你是把别人的状态保留

14:43.410 --> 14:45.910
别人可能其他的模型还在有一些状态

14:45.910 --> 14:46.310
所以说呢

14:46.310 --> 14:50.110
你要把其他的模型里边models

14:50.110 --> 14:51.110
是不是要展开

14:51.110 --> 14:51.310
对吧

14:51.310 --> 14:52.110
State里边

14:52.110 --> 14:54.310
他的之前的models要展开

14:54.310 --> 14:56.410
就是要保留

14:56.410 --> 15:00.910
保留其他模型的夹载状态

15:00.910 --> 15:03.510
然后我们现在只是要把什么变成chill呢

15:03.510 --> 15:06.910
只是要把你给我传递这个name space这个属性

15:06.910 --> 15:10.110
就他的这个这个属性的值counter

15:10.110 --> 15:11.710
是不是把它变成chill

15:11.710 --> 15:12.210
对不对

15:12.210 --> 15:13.310
那么这里怎么写

15:13.310 --> 15:15.910
是不是name space

15:15.910 --> 15:17.910
把这个东西变成chill就完事了

15:17.910 --> 15:18.410
对吧

15:18.410 --> 15:20.710
我把这个属性把这个值读出来

15:20.710 --> 15:20.810
啊

15:20.810 --> 15:22.110
这个值是counter就是counter

15:22.110 --> 15:23.210
这个值是student

15:23.210 --> 15:24.910
就是student

15:24.910 --> 15:26.610
那么这里的把变为chill

15:26.610 --> 15:27.410
就完了对吧

15:27.410 --> 15:27.810
就完了

15:27.810 --> 15:29.410
models就写完了

15:29.410 --> 15:29.610
好

15:29.610 --> 15:30.210
然后呢

15:30.210 --> 15:31.810
我们再来看啊

15:31.810 --> 15:32.610
再来看

15:32.610 --> 15:34.610
如果说我们这里呢

15:34.610 --> 15:37.210
就是啊

15:37.210 --> 15:39.810
还有这个就是affect

15:39.810 --> 15:41.110
是不是一样的道理

15:41.110 --> 15:44.910
我得把之前的状态里边的affect展开

15:44.910 --> 15:45.410
好

15:45.410 --> 15:47.910
然后再把什么xing type

15:47.910 --> 15:49.410
把它又变成chill

15:49.410 --> 15:49.710
对吧

15:49.710 --> 15:51.210
把它变成chill

15:51.210 --> 15:52.010
这就是chill

15:52.010 --> 15:54.610
就这么简单啊

15:54.610 --> 15:55.310
好就没了啊

15:55.310 --> 15:56.510
就没了

15:56.510 --> 15:58.310
就chill就写完了

15:58.310 --> 15:58.710
好的

15:58.710 --> 16:00.510
然后我们hide

16:00.510 --> 16:01.810
hide我们来看一下啊

16:01.810 --> 16:03.810
hide

16:03.810 --> 16:04.410
hide呢

16:04.410 --> 16:05.010
我们这里呢

16:05.010 --> 16:06.110
稍微的

16:06.110 --> 16:08.810
如果说我们直接这样子写的话

16:08.810 --> 16:10.610
如果说我们直接这样子写的话

16:10.610 --> 16:11.910
来看一下啊

16:11.910 --> 16:12.710
会出现

16:12.710 --> 16:14.710
其中有一个地方有一个问题啊

16:14.710 --> 16:16.510
就是models里边倒是简单

16:16.510 --> 16:18.410
我直接把这个东西变成forged就完事了

16:18.410 --> 16:18.810
对吧

16:18.810 --> 16:20.810
把这个玩意变成forged就完事了

16:20.810 --> 16:20.910
啊

16:20.910 --> 16:22.110
这个东西倒是简单

16:22.110 --> 16:24.710
关键是这个global

16:24.710 --> 16:26.210
关键是这个玩意

16:26.210 --> 16:27.410
global

16:27.410 --> 16:29.710
那么这个玩意是不是得处理一下啊

16:29.710 --> 16:30.810
因为它

16:30.810 --> 16:32.410
你不能直接把它变成forged哦

16:32.410 --> 16:33.810
你不能直接把它变成forged

16:33.810 --> 16:36.610
因为有可能有别的模型里边还是chill

16:36.610 --> 16:38.010
它还没有变成forged

16:38.010 --> 16:39.710
它只有全部为forged的过程

16:39.710 --> 16:40.810
它才为forged

16:40.810 --> 16:42.010
它只要有一个为chill

16:42.010 --> 16:43.110
它都为chill

16:43.110 --> 16:43.610
明白的意思吧

16:43.610 --> 16:44.810
都是全去的

16:44.810 --> 16:47.010
所以说我们这里要单独处理一下啊

16:47.010 --> 16:48.010
我们再单独处理

16:48.010 --> 16:49.110
首先models

16:49.110 --> 16:49.610
models呢

16:49.610 --> 16:51.910
所以等于这个毫无疑问

16:51.910 --> 16:54.010
models等于这个

16:54.010 --> 16:54.610
好

16:54.610 --> 16:55.110
然后呢

16:55.110 --> 16:57.910
affects

16:57.910 --> 16:59.210
const

16:59.210 --> 17:01.850
affects

17:01.850 --> 17:03.050
是不是等于这个啊

17:03.050 --> 17:04.550
这个这个这两个是毫无疑问的

17:04.550 --> 17:05.150
所以说到时候呢

17:05.150 --> 17:06.250
我们直接把这个models

17:06.250 --> 17:08.650
affects就写过来就行了啊

17:08.650 --> 17:08.950
对吧

17:08.950 --> 17:10.250
这两个是毫无疑问的

17:10.250 --> 17:11.050
没问题的

17:11.050 --> 17:12.150
没问题吧

17:12.150 --> 17:12.350
好

17:12.350 --> 17:14.650
那么现在的关键是global

17:14.650 --> 17:15.550
global

17:15.550 --> 17:16.850
global等于什么呢

17:16.850 --> 17:20.150
由于models和affects里边一定是同步的

17:20.150 --> 17:20.550
对吧

17:20.550 --> 17:21.750
它相应的x型为chill

17:21.750 --> 17:22.750
那么它一定为chill

17:22.750 --> 17:24.950
相应的那么它的模型一定为chill

17:24.950 --> 17:26.350
相应的x型为force

17:26.350 --> 17:27.650
它的模型一定为force

17:27.650 --> 17:29.650
它一定是处于一个同步的状态

17:29.650 --> 17:30.550
对不对

17:30.550 --> 17:31.150
所以说呢

17:31.150 --> 17:31.750
这里呢

17:31.750 --> 17:33.550
我们就可以用这种方式来做

17:33.550 --> 17:35.450
看一下模型里边

17:35.450 --> 17:36.450
如果至少有

17:36.450 --> 17:38.150
如果只要有一个为chill

17:38.150 --> 17:39.150
它就为chill

17:39.150 --> 17:40.550
如果模型里边

17:40.550 --> 17:41.950
所有的都不为chill

17:41.950 --> 17:43.350
它就为force

17:43.350 --> 17:44.850
那怎么办呢

17:44.850 --> 17:46.750
我们可以用这种方式来做啊

17:46.750 --> 17:48.850
用这种方式看着啊

17:48.850 --> 17:50.550
我们用objects

17:50.550 --> 17:51.850
叫keys

17:51.950 --> 17:55.050
是不是可以获取到模型里边的所有属性

17:55.050 --> 17:55.650
对吧

17:55.650 --> 17:58.250
这句话是不是可以获取到模型里边的所有属性

17:58.250 --> 17:59.650
形成一个数组

17:59.650 --> 18:00.750
数组的每一项是啥

18:00.750 --> 18:01.350
是不是这个模

18:01.350 --> 18:02.950
这个对象里边的属性明

18:02.950 --> 18:03.850
对吧

18:03.850 --> 18:06.650
然后它的所有的属性明

18:06.650 --> 18:07.050
好

18:07.050 --> 18:07.950
然后呢

18:07.950 --> 18:08.850
我们这里呢

18:08.850 --> 18:10.650
写上一个上

18:10.650 --> 18:12.050
上

18:12.050 --> 18:13.650
那么上是什么意思呢

18:13.650 --> 18:15.150
只要有一个条件满足

18:15.150 --> 18:15.550
ok

18:15.550 --> 18:16.750
我就返回去

18:16.750 --> 18:18.050
如果都不满足

18:18.050 --> 18:18.950
才返回force

18:18.950 --> 18:20.850
那是不是跟模的逻辑是一样的

18:20.850 --> 18:21.850
那么每一

18:21.850 --> 18:23.950
那么这里写一个回调函数

18:23.950 --> 18:25.350
这个东西大家都知道

18:25.350 --> 18:28.150
那么把数组里边每一个属性明传过来

18:28.150 --> 18:30.550
那么我看一下这个属性明

18:30.550 --> 18:32.350
是不是为chill

18:32.350 --> 18:32.450
好

18:32.450 --> 18:33.850
这个属性明是不是为

18:33.850 --> 18:35.150
就通过这个属性明

18:35.150 --> 18:36.850
来判断这个模型里边

18:36.850 --> 18:37.950
是不是为chill

18:37.950 --> 18:38.950
models

18:38.950 --> 18:39.750
key

18:39.750 --> 18:40.250
对吧

18:40.250 --> 18:41.250
是不是这样子

18:41.250 --> 18:42.950
是不是写好了

18:42.950 --> 18:43.850
看一下啊

18:43.850 --> 18:45.450
把global放进去

18:45.450 --> 18:46.650
是不是写好了

18:46.650 --> 18:47.650
对吧

18:47.650 --> 18:49.350
只要有一个属性

18:49.350 --> 18:50.650
它为chill

18:50.650 --> 18:51.550
那么

18:51.550 --> 18:52.550
因为这个东西

18:52.550 --> 18:53.250
这个得到的指示

18:53.250 --> 18:53.850
要么就是chill

18:53.850 --> 18:54.350
我们就force

18:54.350 --> 18:54.850
对吧

18:54.850 --> 18:56.750
只要有一个属性为chill

18:56.750 --> 18:59.050
那么就表示整个条件满足

18:59.050 --> 19:00.450
然后global就为chill

19:00.450 --> 19:02.150
所有的属性都不为chill

19:02.150 --> 19:03.450
那么都表条件不满足

19:03.450 --> 19:05.350
那么这个就为force

19:05.350 --> 19:05.450
好

19:05.450 --> 19:07.450
这global就写好了

19:07.450 --> 19:07.650
好

19:07.650 --> 19:08.650
咱们来看一下吧

19:08.650 --> 19:10.150
来看一下啊

19:10.150 --> 19:11.050
counter里边

19:11.050 --> 19:11.950
哎

19:11.950 --> 19:13.250
再写一下吧

19:13.250 --> 19:14.350
再写一下

19:14.350 --> 19:16.250
导入那个model

19:16.250 --> 19:17.250
from

19:17.250 --> 19:17.550
第二写

19:17.550 --> 19:20.250
component common model

19:20.350 --> 19:21.550
然后呢我们这里写上

19:21.550 --> 19:23.150
写上一个啊

19:23.150 --> 19:25.150
如果说你给我这个属性里边

19:25.150 --> 19:26.950
加了一个就是

19:26.950 --> 19:27.950
is loading

19:27.950 --> 19:29.350
加了这么一个属性的话

19:29.350 --> 19:32.150
那么我就选择这么一个主键model

19:32.150 --> 19:33.250
选这么个主键

19:33.250 --> 19:34.650
这里边写上一个div

19:34.650 --> 19:36.650
这里加载中

19:36.650 --> 19:37.550
加载中

19:37.550 --> 19:37.750
好

19:37.750 --> 19:38.950
那么这里呢

19:38.950 --> 19:43.150
style里边写上一个found size

19:43.150 --> 19:44.550
2em

19:44.550 --> 19:47.850
然后呢再写上一个color

19:47.850 --> 19:48.750
白色

19:48.750 --> 19:49.050
好

19:49.050 --> 19:50.650
写上这么一个属性啊

19:50.650 --> 19:51.050
然后呢

19:51.050 --> 19:53.550
desperate map state to props的时候呢

19:53.550 --> 19:54.550
再加上这个属性

19:54.550 --> 19:55.250
is loading

19:55.250 --> 19:55.650
等于什么呢

19:55.650 --> 19:57.750
来自于状态里边的loading

19:57.750 --> 19:58.450
loading

19:58.450 --> 20:00.050
里边的什么models

20:00.050 --> 20:00.850
里边的什么呢

20:00.850 --> 20:01.650
counter

20:01.650 --> 20:02.350
啊

20:02.350 --> 20:03.350
就看counter这个属性

20:03.350 --> 20:04.550
为不为处为处的话

20:04.550 --> 20:05.250
我就给你显示

20:05.250 --> 20:05.850
不会处的话

20:05.850 --> 20:07.350
我就给你去掉

20:07.350 --> 20:07.850
好吧

20:07.850 --> 20:08.950
好写好了啊

20:08.950 --> 20:10.550
我就已经写好了啊

20:10.550 --> 20:10.650
好

20:10.650 --> 20:11.950
来试一下吧

20:11.950 --> 20:12.450
啊这里呢

20:12.450 --> 20:14.150
我们导到技术器啊

20:14.150 --> 20:15.950
点击检查

20:15.950 --> 20:16.650
啊这里呢

20:16.650 --> 20:18.750
一步加

20:19.350 --> 20:20.750
没起作用是吧

20:20.750 --> 20:21.950
没起作用

20:21.950 --> 20:22.550
啊

20:22.550 --> 20:23.550
我们来看一下状态啊

20:23.550 --> 20:25.250
我们来看一下状态

20:25.250 --> 20:26.550
呃状态里边呢

20:26.550 --> 20:27.950
我们看一下

20:27.950 --> 20:30.150
哎哦

20:30.150 --> 20:31.550
还有一件事都还没做

20:31.550 --> 20:32.150
兄弟

20:32.150 --> 20:34.250
我们只是写了reducer

20:34.250 --> 20:34.850
啊

20:34.850 --> 20:35.950
只是谁的reducer

20:35.950 --> 20:38.050
谁来触发这个x

20:38.050 --> 20:40.250
谁来触发这个x

20:40.250 --> 20:42.750
是不是要当副作用发声的时候

20:42.750 --> 20:44.550
是不是要触发相应的x

20:44.550 --> 20:45.150
对不对

20:45.150 --> 20:46.950
当副作用发声的时候

20:46.950 --> 20:49.150
我们要去触发相应的x

20:49.150 --> 20:51.150
那么我们这里是不是还要加一个配置

20:51.150 --> 20:52.450
配置啥

20:52.450 --> 20:53.850
配置啥

20:53.850 --> 20:54.650
之前的写的配置

20:54.650 --> 20:56.950
看一下配置哪个

20:56.950 --> 20:57.750
是不是这个玩意

20:57.750 --> 20:58.850
on effect

20:58.850 --> 20:59.450
对吧

20:59.450 --> 21:01.050
当副作用发声的时候呢

21:01.050 --> 21:04.150
我要就是我替换掉那个副作用处理函数

21:04.150 --> 21:04.550
对吧

21:04.550 --> 21:05.550
on effect

21:05.550 --> 21:06.250
那么这个东西呢

21:06.250 --> 21:07.250
是一个函数啊

21:07.250 --> 21:08.050
这个东西是一个函数

21:08.050 --> 21:09.450
是不是我们也可以写到这

21:09.450 --> 21:10.750
对不对啊

21:10.750 --> 21:12.450
on effect

21:13.650 --> 21:14.250
写到这啊

21:14.250 --> 21:15.950
写到这

21:16.050 --> 21:17.450
我们直接写过来啊

21:17.450 --> 21:18.650
on effect的时候

21:18.650 --> 21:20.450
是不是当时我们说了有几个参数

21:20.450 --> 21:21.750
是不是四个参数

21:21.750 --> 21:22.850
第一个参数是啥

21:22.850 --> 21:25.750
原来的old effect函数

21:25.750 --> 21:27.450
原来的 effect函数

21:27.450 --> 21:29.650
就是generator生存器

21:29.650 --> 21:30.250
好

21:30.250 --> 21:31.650
然后呢

21:31.650 --> 21:33.350
然后第二个参数是啥

21:33.350 --> 21:35.650
第二个参数是不是saga effect

21:35.650 --> 21:36.050
对吧

21:36.050 --> 21:36.950
saga effect

21:36.950 --> 21:39.550
就是saga effect处理函数

21:39.550 --> 21:41.550
我们这里其实只需要用什么

21:41.550 --> 21:42.850
只需要用put

21:42.850 --> 21:44.250
结构出来就行了

21:44.850 --> 21:46.750
我们这里刚才写全嘛

21:46.750 --> 21:47.350
写全

21:47.350 --> 21:48.550
大家看得清楚一点

21:48.550 --> 21:48.750
好

21:48.750 --> 21:50.650
第三个参数是不是模型

21:50.650 --> 21:52.750
第四个参数是不是x类型

21:52.750 --> 21:53.050
对吧

21:53.050 --> 21:54.350
是不是就四个参数

21:54.350 --> 21:54.950
对吧

21:54.950 --> 21:57.750
那么通过这个on effect

21:57.750 --> 21:58.850
on effect

21:58.850 --> 22:00.550
我们是不是可以拿到

22:00.550 --> 22:02.850
是不是可以替换到

22:02.850 --> 22:04.350
替换掉之前的那个

22:04.350 --> 22:04.950
er effect

22:04.950 --> 22:05.550
对不对

22:05.550 --> 22:07.650
是不是替换掉之前的er effect

22:07.650 --> 22:08.250
好

22:08.250 --> 22:08.750
然后呢

22:08.750 --> 22:09.550
我们这里发言

22:09.550 --> 22:11.750
回到是不是一个新的generator函数

22:11.750 --> 22:11.950
对吧

22:11.950 --> 22:14.050
反回一个新的generator函数

22:14.250 --> 22:15.350
那么这个generator函数呢

22:15.350 --> 22:16.950
就是take every过后呢

22:16.950 --> 22:17.850
它要执行的

22:17.850 --> 22:19.050
就看一下我们这里的代码

22:21.550 --> 22:23.050
就是在哪呢

22:23.050 --> 22:24.550
在一个处理

22:24.550 --> 22:25.550
处理中间键的一块

22:26.650 --> 22:27.650
给这么medalware

22:27.650 --> 22:28.050
来这

22:29.050 --> 22:29.650
看一下这里

22:31.650 --> 22:35.310
这里包什么金高啊

22:35.310 --> 22:37.010
动作每个方形是with a loop

22:39.010 --> 22:40.010
没问题啊

22:40.010 --> 22:41.510
这里是没问题的啊

22:41.510 --> 22:44.760
没问题的

22:44.760 --> 22:45.560
看一下啊

22:45.560 --> 22:46.660
看一下

22:46.660 --> 22:48.460
它这里写了个什么

22:48.460 --> 22:49.360
没问题的啊

22:49.360 --> 22:52.590
这里是没问题的

22:52.590 --> 22:54.590
disable es nint

22:55.990 --> 22:57.290
es nint

22:57.290 --> 22:59.590
es nint disabled

23:02.870 --> 23:03.570
这里

23:03.570 --> 23:04.370
所以在这

23:04.370 --> 23:04.770
对吧

23:04.770 --> 23:06.670
如果你传遞了这个on effect

23:06.670 --> 23:08.770
那么是不是我要得到一个新的函数

23:08.770 --> 23:09.070
对吧

23:09.070 --> 23:11.070
把这个新的函数传遞过去

23:11.070 --> 23:12.170
每当take every的时候

23:12.170 --> 23:13.870
每当坚定到相应的x型的时候

23:13.870 --> 23:15.570
我去运行这个函数

23:15.570 --> 23:17.170
就这么个意思啊

23:17.170 --> 23:18.870
那么这个新的generator函数里边

23:18.970 --> 23:21.470
是不是最终还是要调用老的generator

23:21.470 --> 23:21.970
对吧

23:21.970 --> 23:23.770
一定是要调用老的generator

23:23.770 --> 23:24.870
这个是毫无疑问的

23:24.870 --> 23:26.470
所以这里一定有这么一句话

23:26.470 --> 23:27.670
就是old effect

23:28.470 --> 23:29.670
调用老的generator

23:29.670 --> 23:30.270
然后呢

23:30.270 --> 23:31.370
把x型传进去

23:33.070 --> 23:34.370
是不是这样子

23:34.370 --> 23:34.870
好

23:35.670 --> 23:38.170
然后只是在这个调用老的

23:38.170 --> 23:40.370
affect之前和之后

23:40.370 --> 23:41.470
是不是要触发x型

23:41.470 --> 23:42.670
在这个位置触发x型

23:42.670 --> 23:43.270
对吧

23:43.270 --> 23:45.470
首先eo的铺着一个x型

23:45.470 --> 23:46.570
触发一个x型

23:46.570 --> 23:47.270
第一个x型呢

23:47.270 --> 23:48.570
它太不值为啥

23:48.670 --> 23:49.570
我们来触发一个

23:49.570 --> 23:51.070
太不值是不是为shu

23:51.070 --> 23:51.570
对吧

23:51.570 --> 23:52.170
shu

23:52.170 --> 23:53.970
我们之前的那个长量

23:53.970 --> 23:54.870
是不是shu

23:54.870 --> 23:56.170
那么这个put哪哪呢

23:56.170 --> 23:56.770
是不是在这里这

23:56.770 --> 23:58.170
我们可以把解构出来

23:58.170 --> 23:59.170
put

23:59.170 --> 24:00.070
shu

24:00.070 --> 24:00.470
然后呢

24:00.470 --> 24:02.070
payload为啥呢

24:02.070 --> 24:02.770
payload

24:02.770 --> 24:04.470
是不是我们之前约定好的

24:04.470 --> 24:05.470
payload是一个对象

24:05.470 --> 24:07.170
有name space action type

24:07.170 --> 24:07.570
对吧

24:07.570 --> 24:09.770
去触发这么一个name space

24:11.970 --> 24:12.970
name space是哪呢

24:12.970 --> 24:15.270
是不是model的name space

24:15.270 --> 24:15.770
对吧

24:15.870 --> 24:18.970
model的name space

24:18.970 --> 24:19.570
就这个

24:20.870 --> 24:21.970
这是这个

24:21.970 --> 24:22.170
好

24:22.170 --> 24:22.970
还有啥呢

24:24.170 --> 24:25.970
这是我们触发的x型内向

24:25.970 --> 24:28.170
这是我们触发的x型对象

24:28.170 --> 24:28.870
还有啥呢

24:28.870 --> 24:30.470
还有个是不是x型type

24:30.470 --> 24:30.870
对不对

24:30.870 --> 24:32.370
x型type是不是就是这个玩意

24:32.370 --> 24:33.070
对不对

24:33.070 --> 24:33.770
就完了

24:33.770 --> 24:34.870
就put

24:34.870 --> 24:35.070
好

24:35.070 --> 24:35.670
然后呢

24:35.670 --> 24:36.970
处理完副作用之后

24:36.970 --> 24:38.970
我们是不是来一个hide

24:38.970 --> 24:39.470
对不对

24:39.470 --> 24:40.770
其他都一样

24:40.770 --> 24:42.170
其他都一样

24:42.170 --> 24:42.870
没了

24:42.870 --> 24:44.170
没了

24:44.170 --> 24:44.570
好

24:44.570 --> 24:45.170
保存啊

24:45.170 --> 24:45.970
保存

24:45.970 --> 24:46.470
看一下

24:47.970 --> 24:48.570
一步加

24:50.270 --> 24:51.470
还没还没好吗

24:52.570 --> 24:52.970
哦

24:52.970 --> 24:54.070
我看一下

24:54.070 --> 24:54.970
on而fix

24:54.970 --> 24:55.970
这里放过来了

24:55.970 --> 24:56.670
放过来了

24:56.670 --> 24:57.070
我看一下

24:57.070 --> 24:57.770
为什么还没好

25:00.370 --> 25:01.170
这里触发了

25:01.170 --> 25:02.370
触发了

25:02.370 --> 25:03.370
他把他这个

25:05.070 --> 25:06.370
fix里面

25:06.370 --> 25:07.770
这里得到错了

25:07.770 --> 25:09.570
这里得到的是undefend

25:09.570 --> 25:10.370
undefend

25:10.370 --> 25:10.970
看没

25:10.970 --> 25:12.270
这里得到的是undefend

25:12.270 --> 25:13.770
他为什么是undefend呢

25:13.770 --> 25:14.870
name space

25:14.870 --> 25:15.770
我前面应该

25:15.770 --> 25:17.870
哪个地方单词写错了

25:17.870 --> 25:18.670
这里呢

25:18.670 --> 25:19.770
name space

25:21.970 --> 25:22.570
单词

25:23.670 --> 25:24.470
单词写对了

25:24.470 --> 25:26.170
我们再观察一下

25:26.170 --> 25:27.570
我们触发的是这个x型

25:27.570 --> 25:28.770
触发这个x型的话

25:28.770 --> 25:29.370
那么我们看一下

25:29.370 --> 25:31.570
x型里边payload的

25:31.570 --> 25:33.070
payload只有一个x型type

25:33.070 --> 25:35.070
他没有name space

25:35.070 --> 25:36.470
没有name space

25:36.470 --> 25:37.870
我看一下

25:37.870 --> 25:38.370
触

25:38.370 --> 25:40.070
这里触发的时候出问题了

25:40.070 --> 25:41.570
触发的payload里边

25:41.570 --> 25:43.270
name space

25:43.270 --> 25:46.360
他没有

25:46.360 --> 25:48.360
他没有name space

25:48.360 --> 25:51.770
我们打印一下这个model

25:51.770 --> 25:52.470
保存

25:52.470 --> 25:53.570
打印一下这个model

25:53.570 --> 25:56.810
看一下

25:57.610 --> 25:59.310
这个model为什么是个函数呢

25:59.310 --> 26:01.310
我当时应该是传错了

26:01.310 --> 26:02.410
当时我在写dva的时候

26:02.410 --> 26:03.010
应该传错了

26:03.010 --> 26:05.010
这个model不应该是个函数

26:06.010 --> 26:07.410
它不应该是个函数

26:07.410 --> 26:09.610
我们把这些参数打印一下

26:09.610 --> 26:10.810
我们看一下这个dva里边

26:10.810 --> 26:14.210
我们当时传递这个model的时候

26:14.210 --> 26:17.750
它为什么是一个函数

26:17.750 --> 26:18.850
model

26:18.950 --> 26:20.250
这里是个数组

26:20.250 --> 26:21.850
这个model它为什么是个函数呢

26:21.850 --> 26:23.450
传递呢

26:23.450 --> 26:25.450
我看一下啊

26:25.450 --> 26:26.350
saga而fex

26:26.350 --> 26:27.850
model

26:27.850 --> 26:34.620
这个model它不应该是个函数啊

26:34.620 --> 26:35.220
找一找啊

26:35.220 --> 26:36.220
我们找一找

26:36.220 --> 26:39.860
这个问题发生在什么地方

26:39.860 --> 26:41.160
item

26:41.160 --> 26:42.760
这个model来自于这

26:42.760 --> 26:44.960
我们push的时候来自于这

26:44.960 --> 26:47.260
model.fex

26:47.260 --> 26:48.360
把model传进

26:48.360 --> 26:49.960
放进去

26:49.960 --> 26:50.860
放进去

26:50.860 --> 26:51.460
好我们在这里

26:51.460 --> 26:52.060
这样子

26:52.060 --> 26:54.260
我们在这里打印一下这个item

26:54.560 --> 26:57.600
打印一下这个item

26:57.600 --> 26:59.600
item里边model

26:59.600 --> 27:00.600
哎对啊对啊

27:01.700 --> 27:04.100
model它是一个就是

27:04.100 --> 27:06.200
哦明白了明白了明白了

27:06.200 --> 27:07.800
这里应该我之前写错了啊

27:07.800 --> 27:09.500
这里应该是item.model

27:09.500 --> 27:11.300
对吧item.model

27:11.300 --> 27:12.900
好然后我们再看个

27:12.900 --> 27:14.600
再看这边stats里边

27:14.600 --> 27:16.000
好我们这里触发一下了

27:16.000 --> 27:17.900
1步加啊现在可以了啊

27:17.900 --> 27:19.200
可以了

27:19.200 --> 27:20.100
1步减

27:20.100 --> 27:21.800
对吧来看一下这边

27:21.800 --> 27:24.100
啊每一次触发x的时候啊

27:24.100 --> 27:25.500
你看嗯秀的时候

27:25.500 --> 27:27.300
你看触发的xn payload 是这个

27:27.300 --> 27:29.300
对吧xn type 是不是这个

27:29.300 --> 27:30.600
对不对好然后呢

27:30.600 --> 27:31.800
他处理过后呢

27:31.800 --> 27:34.400
他的新的状态是不是把他变成处了

27:34.400 --> 27:35.700
对吧把这个变成处了

27:35.700 --> 27:37.800
啊把这个变成处了

27:37.800 --> 27:39.100
对不对好

27:39.100 --> 27:40.000
你看global

27:40.000 --> 27:41.500
他只要有一个为处

27:41.500 --> 27:42.900
那么他就为处啊

27:42.900 --> 27:43.900
只要有一个为处

27:43.900 --> 27:44.700
他就为处

27:45.200 --> 27:47.200
你要这意思吧好

27:47.200 --> 27:48.300
那么你看一下这边

27:48.300 --> 27:50.000
counter counter这边啊

27:50.000 --> 27:52.500
因为你看一下这里的就是xn类型

27:52.500 --> 27:53.900
我们之前触发的是increase

27:53.900 --> 27:55.300
increase 已经结束了对吧

27:55.300 --> 27:56.600
increase 已经结束了

27:56.600 --> 27:57.500
但是呢

27:57.500 --> 27:59.200
这个模型里边还是true啊

27:59.200 --> 28:00.100
模型里边还出

28:00.100 --> 28:01.100
这就是一种比

28:01.100 --> 28:02.500
就是因为有一个

28:02.500 --> 28:04.000
因为可能会出现这种情况

28:04.000 --> 28:06.400
一个模型的他可能会对应多个

28:06.400 --> 28:08.000
副作用的x型啊

28:08.000 --> 28:09.900
可以可能会对应多个副作用的x型

28:09.900 --> 28:12.100
不过没关系我们都能处理啊都能处理

28:13.300 --> 28:14.400
好没问题了吧

28:14.400 --> 28:15.700
好然后我们再看一下啊

28:15.700 --> 28:16.700
这里把他变成force

28:16.700 --> 28:18.100
他就变成force了

28:18.100 --> 28:18.900
对吧

28:18.900 --> 28:22.400
ok啊那这就是那个d-1 loading的写法

28:22.400 --> 28:23.400
啊就写完了

28:24.400 --> 28:25.200
好那么这次呢

28:25.200 --> 28:27.900
我们这一个整个章节就结束了啊

28:27.900 --> 28:29.600
这个章节我们讲了

28:29.600 --> 28:31.200
drags redotus

28:31.200 --> 28:33.100
以及rotr啊

28:33.100 --> 28:35.000
他们如何来进行整合

28:35.000 --> 28:38.300
那么目前我们使用的最好的整合方案就是dva

28:38.300 --> 28:41.200
当然你平时肯定不太会用自己去写一个dva啊

28:41.200 --> 28:42.400
一般就直接用他

28:43.400 --> 28:44.700
就是安装好的dva

28:44.700 --> 28:46.100
直接去使用就完事了

28:46.100 --> 28:47.000
其实我们自己写的话

28:47.000 --> 28:48.800
你会发现他的代码量呢

28:48.800 --> 28:49.900
也没有那么的大

28:49.900 --> 28:52.000
对吧也可以把自己写出来

28:52.000 --> 28:53.600
然后呢有了dva的知识过

28:53.600 --> 28:55.100
dva这一块一定要好好学啊

28:55.100 --> 28:56.200
一定要好好学

28:56.200 --> 28:57.700
反复去练习一下

28:57.700 --> 28:59.600
嗯dva这一块学好了之后呢

28:59.600 --> 29:01.600
我们下一张开始呢

29:01.600 --> 29:05.000
就讲一个注意终极的解决方案就是

29:05.000 --> 29:05.900
终极解决方案了

29:05.900 --> 29:06.600
就是无米

29:06.600 --> 29:08.200
他整合性更好

29:08.200 --> 29:09.900
用起来更加的舒服

29:09.900 --> 29:11.500
不过呢他的原码分析呢

29:11.500 --> 29:11.900
嗯

29:13.000 --> 29:14.500
他是建立在dva之上的

29:14.500 --> 29:16.100
所以说你得先理解dva

29:16.100 --> 29:17.100
理解dva过后呢

29:17.100 --> 29:19.100
无米的解释呢就好理解得多了

29:19.100 --> 29:19.700
好吧啊

29:19.700 --> 29:21.300
这是关于这个dva这一块

