WEBVTT

00:00.560 --> 00:03.760
这些可能咱们来实现还是熟写

00:03.760 --> 00:07.260
熟写一个band action creators这个函数

00:07.260 --> 00:08.760
这还是要记得吗

00:08.760 --> 00:11.760
对吧 它是可以方便让我们去分发action的

00:11.760 --> 00:15.760
因为我们其实之前每次分发action的都要去用这种方式

00:15.760 --> 00:17.060
dispatch这种方式

00:17.060 --> 00:20.260
那么可以通过这个工具函数band action creators

00:20.260 --> 00:25.060
它可以直接将得到了action

00:25.060 --> 00:26.860
那么直接分发出去

00:26.860 --> 00:29.060
咱们来用一下吧 说那么多都是废话

00:29.260 --> 00:32.060
再用一下 比方说吧

00:32.060 --> 00:38.160
我们这里有两个action创建函数 对吧

00:38.160 --> 00:40.160
有两个action创建函数

00:40.160 --> 00:46.660
OK 那么现在我们把这两个创建函数放到哪

00:46.660 --> 00:49.960
放到 看一下啊

00:49.960 --> 00:52.160
这两个创建函数把它放到一个对象里边

00:52.160 --> 00:54.360
把它放到一个对象里边

00:54.360 --> 00:56.160
比方说咱们写一个对象

01:00.060 --> 01:05.160
action creators写这么一个对象

01:05.160 --> 01:06.260
把放进来啊

01:06.260 --> 01:07.760
第一个函数呢该取个名字

01:07.760 --> 01:11.060
该取个属性名字叫做add user

01:11.060 --> 01:12.060
添加一个用户

01:12.060 --> 01:13.360
添加一个用户

01:13.360 --> 01:15.860
然后create add user

01:15.860 --> 01:17.860
是这个是action创建函数

01:17.860 --> 01:27.160
然后create delete user

01:27.160 --> 01:28.760
看一下是它怎么用的

01:28.760 --> 01:30.960
那么来自于create delete user

01:30.960 --> 01:32.160
有点action 对吧

01:32.160 --> 01:32.960
我们之前说过

01:32.960 --> 01:34.960
你把你的action创建函数

01:34.960 --> 01:36.560
写到一个对象里边去

01:36.560 --> 01:38.160
你该写到一个对象里边去

01:38.160 --> 01:39.960
写到对象里边去过后了

01:39.960 --> 01:40.960
那么然后呢

01:40.960 --> 01:42.760
你就可以利用

01:42.760 --> 01:44.960
利用 现在我们写这么一个

01:44.960 --> 01:46.460
我们先用它原生的

01:46.460 --> 01:48.460
先用它原生的

01:48.460 --> 01:52.360
利用这个band action creators

01:52.360 --> 01:55.360
利用这个函数

01:55.360 --> 01:56.660
你要把它传什么呢

01:56.660 --> 01:57.360
传两个东西

01:57.360 --> 02:00.760
第一个就是action创建函数的对象

02:00.760 --> 02:02.760
就这个玩意

02:02.760 --> 02:03.760
第二个函数呢

02:03.760 --> 02:08.560
你给它一个就是dispatch

02:08.560 --> 02:09.560
那么就完了

02:09.560 --> 02:10.460
dispatch

02:10.460 --> 02:13.060
剩下的事情它会给你返回一个

02:13.060 --> 02:15.660
跟这个对象长得一模一样的对象

02:15.660 --> 02:17.160
跟这个对象长得一模一样的

02:17.160 --> 02:18.560
你这个对象不是用两个属性吗

02:18.560 --> 02:18.860
对吧

02:18.860 --> 02:20.760
每个属性对应一个action创建函数

02:20.760 --> 02:21.860
那么它给你返回一个

02:21.860 --> 02:24.260
跟那个对象长得一模一样的

02:24.260 --> 02:26.960
长得一模一样的就是对象

02:26.960 --> 02:31.660
就是action

02:31.660 --> 02:34.160
比方说我们就用action是吧

02:34.160 --> 02:35.860
那么现在我们要就是添加用户

02:35.860 --> 02:36.460
就很简单了

02:36.460 --> 02:37.760
我们就不用去触发了

02:37.760 --> 02:39.260
不用那个stone去触发了

02:39.260 --> 02:41.760
它就是帮你封装了一下这个触发

02:41.760 --> 02:43.960
我们直接调用这个什么adduzer

02:43.960 --> 02:45.060
直接调用这个adduzer

02:45.060 --> 02:46.460
因为它长的一样的

02:46.460 --> 02:47.660
长的是一模一样的

02:47.660 --> 02:49.660
你给它这个对象和它返回的对象

02:49.660 --> 02:50.460
长的一模一样的

02:50.460 --> 02:52.060
只不过它把里边的函数给你功能

02:52.060 --> 02:53.460
给你增强了

02:53.460 --> 02:54.960
比方说添加一个用户

02:54.960 --> 02:56.960
我们就添加一个ID等于3

02:56.960 --> 02:58.960
name等于abc

02:58.960 --> 03:01.960
a级等于111

03:01.960 --> 03:02.960
添加一个用户

03:02.960 --> 03:03.960
然后再来一个

03:05.760 --> 03:07.960
再来一个action

03:07.960 --> 03:12.160
dnet有着三出一个用户

03:12.160 --> 03:13.760
三出一个用户的话

03:13.760 --> 03:16.160
咱们id等于3

03:16.160 --> 03:18.060
好保存看一下吧

03:18.060 --> 03:20.960
那你看一下是不是能让能够得到数据

03:20.960 --> 03:22.760
添加那个用户

03:22.760 --> 03:23.660
三出一个用户

03:24.660 --> 03:25.660
看没有

03:25.660 --> 03:27.660
每次都监听到了数据的变化

03:27.660 --> 03:28.660
对吧

03:28.660 --> 03:29.660
也就是说

03:29.660 --> 03:30.660
其实一样的

03:30.660 --> 03:31.660
你看这个函数的参数

03:31.660 --> 03:33.660
跟这个函数的参数都是完全一样的

03:33.660 --> 03:35.660
它需要什么参量的参数

03:35.660 --> 03:36.660
我就给你什么样的参数

03:36.660 --> 03:37.660
就这么简单

03:37.660 --> 03:39.660
无非就是我给你增强了一下

03:39.660 --> 03:41.660
给你自动给你dispatch了

03:41.660 --> 03:43.660
你不用去手动的dispatch

03:43.660 --> 03:44.660
以前我们得到一个action过后

03:44.660 --> 03:45.660
还要手动的去dispatch一下

03:45.660 --> 03:47.660
那么它这里得到一个action过后了

03:47.660 --> 03:49.660
自动给你dispatch了

03:49.660 --> 03:51.660
实际上这里还有一个特殊情况

03:51.660 --> 03:52.660
什么特殊情况呢

03:52.660 --> 03:54.660
就是说你这里我们不是传了一个对象

03:54.660 --> 03:55.660
对吧

03:55.660 --> 03:57.660
对象里面每一个是一个action创建函数

03:57.660 --> 03:58.660
对不对

03:58.660 --> 04:00.660
其实这一块还可以写这么一个东西

04:00.660 --> 04:01.660
就是写这么一个

04:01.660 --> 04:03.660
你直接写个action创建函数进去

04:03.660 --> 04:04.660
比方说

04:04.660 --> 04:07.660
比方说我们只需要控制那个添加用户

04:07.660 --> 04:09.660
那么你只需要写一个函数进去就行了

04:09.660 --> 04:10.660
你不用给它写对象

04:10.660 --> 04:11.660
你不用给它写对象

04:11.660 --> 04:13.660
你就给它写一个函数就完了

04:13.660 --> 04:14.660
写这么一个函数

04:14.660 --> 04:15.660
于是这样子

04:15.660 --> 04:16.660
它会返回一个函数

04:16.660 --> 04:17.660
我这样子

04:17.660 --> 04:18.660
我这样子

04:18.660 --> 04:19.660
复制一下

04:20.660 --> 04:21.660
到这来

04:21.660 --> 04:23.660
我也说我们这里可以不要这个

04:24.660 --> 04:25.660
比方说添加用户

04:25.660 --> 04:26.660
比方添加用户

04:26.660 --> 04:28.660
我们直接把那个action创建函数直接扔到这儿

04:28.660 --> 04:30.660
于是它可以返回什么呢

04:30.660 --> 04:31.660
返回一个新的函数

04:31.660 --> 04:32.660
addu

04:33.660 --> 04:34.660
那么这里呢

04:34.660 --> 04:36.660
你只需要调用这个函数本身就行了

04:36.660 --> 04:37.660
它返回的就不是个对象了

04:37.660 --> 04:39.660
因为你给它传了一个函数

04:39.660 --> 04:40.660
它就返回一个函数

04:40.660 --> 04:41.660
你给它传一个对象

04:41.660 --> 04:42.660
它就返回一个对象

04:42.660 --> 04:44.660
总之你给它传一个函数

04:44.660 --> 04:47.660
它就会把函数的返回结果

04:47.660 --> 04:49.660
那就会自动的dispatch

04:49.660 --> 04:50.660
自动的分发

04:50.660 --> 04:53.660
把函数创建的action自动的去分发掉

04:53.660 --> 04:55.660
如果你给它传的是一个对象

04:55.660 --> 04:56.660
那么它返回的就是一个对象

04:56.660 --> 04:57.660
那对象里边呢

04:58.660 --> 05:00.660
每个属性的它也是一样的

05:00.660 --> 05:02.660
它会自动的给你分发对应的

05:02.660 --> 05:03.660
就是action

05:03.660 --> 05:04.660
对吧

05:04.660 --> 05:05.660
这样子也行

05:05.660 --> 05:06.660
保存你看一下

05:06.660 --> 05:08.660
所以也加了一个用户了

05:08.660 --> 05:10.660
你看加了一个用户了

05:10.660 --> 05:11.660
再说一次

05:11.660 --> 05:12.660
啥意思

05:12.660 --> 05:13.660
啥意思

05:13.660 --> 05:14.660
这里可能稍微有点糟

05:14.660 --> 05:16.660
就是说如果说你给它的是一个对象

05:17.660 --> 05:18.660
给它的是一个对象

05:18.660 --> 05:19.660
addu

05:19.660 --> 05:20.660
那么这里呢

05:20.660 --> 05:22.660
是一个函数

05:22.660 --> 05:23.660
是一个action创建函数

05:23.660 --> 05:24.660
那么这里呢

05:24.660 --> 05:26.660
也订了一次游热

05:26.660 --> 05:27.660
是一个action创建函数

05:27.660 --> 05:29.660
那么它返回的结果呢

05:29.660 --> 05:31.660
它也是一个对象

05:31.660 --> 05:33.660
长得一模一样

05:33.660 --> 05:35.660
只不过把功能给它增强了

05:35.660 --> 05:38.660
自动分发的函数

05:40.660 --> 05:41.660
dn游热

05:41.660 --> 05:44.660
这个是自动分发的函数

05:44.660 --> 05:45.660
对吧

05:45.660 --> 05:47.660
这是你给它传对象的情况

05:47.660 --> 05:48.660
还有一种情况呢

05:48.660 --> 05:50.660
是你给它传一个函数

05:50.660 --> 05:52.660
传的只有一个函数

05:52.660 --> 05:54.660
你传入的只有一个函数

05:54.660 --> 05:56.660
就是fn

05:56.660 --> 05:57.660
那么它给你返回的是什么呢

05:57.660 --> 05:58.660
返回的它就不是对象了

05:58.660 --> 05:59.660
就是一个n

05:59.660 --> 06:01.660
就是自动

06:01.660 --> 06:03.660
自动分发的fn

06:03.660 --> 06:04.660
就这么简单

06:04.660 --> 06:05.660
就这么简单

06:05.660 --> 06:06.660
你看这个意思吧

06:06.660 --> 06:07.660
你给它传对象

06:07.660 --> 06:08.660
它就返回对象

06:08.660 --> 06:09.660
你给它传函数

06:09.660 --> 06:10.660
它就返回函数

06:10.660 --> 06:11.660
对吧

06:11.660 --> 06:12.660
好 行了

06:12.660 --> 06:13.660
那咱们呢

06:13.660 --> 06:14.660
就来写一下

06:14.660 --> 06:15.660
这个就是

06:17.660 --> 06:19.660
现在我们用自己的

06:19.660 --> 06:20.660
我们就来写一下

06:20.660 --> 06:23.660
这个band action craters

06:23.660 --> 06:24.660
新疆的文件

06:24.660 --> 06:26.660
这么的index也同样的道理

06:26.660 --> 06:27.660
把它导出

06:27.660 --> 06:29.660
default

06:29.660 --> 06:31.660
来自于

06:31.660 --> 06:33.660
band action craters

06:35.660 --> 06:37.660
把某人导出

06:37.660 --> 06:38.660
好 那么这里面

06:38.660 --> 06:40.660
我们就默认default

06:40.660 --> 06:41.660
导出这么一个东西

06:41.660 --> 06:42.660
导出一个函数

06:42.660 --> 06:44.660
这个函数是要接受两个参数

06:44.660 --> 06:45.660
一个是啥

06:45.660 --> 06:46.660
一个是什么

06:46.660 --> 06:49.660
action craters

06:49.660 --> 06:50.660
对吧

06:50.660 --> 06:52.660
就是action创建

06:52.660 --> 06:53.660
创建就是这个东西

06:53.660 --> 06:55.660
第一个参数就是这个东西

06:55.660 --> 06:57.660
或者是直接是一个函数

06:57.660 --> 06:59.660
都行

06:59.660 --> 07:01.660
明白这个意思吧

07:01.660 --> 07:02.660
OK

07:02.660 --> 07:03.660
那咱们呢

07:03.660 --> 07:04.660
这里面呢

07:04.660 --> 07:05.660
第二个参数是什么

07:05.660 --> 07:06.660
dispatch

07:06.660 --> 07:07.660
dispatch

07:07.660 --> 07:08.660
没了

07:08.660 --> 07:09.660
还有啥呢

07:09.660 --> 07:10.660
没了

07:10.660 --> 07:11.660
好 现在呢

07:11.660 --> 07:12.660
我们来判断一下

07:12.660 --> 07:13.660
它到底是一个什么玩意

07:13.660 --> 07:14.660
它到底

07:14.660 --> 07:16.660
如果说

07:16.660 --> 07:19.660
type action craters

07:19.660 --> 07:21.660
等于了什么方形

07:21.660 --> 07:22.660
它本身就是一个函数

07:22.660 --> 07:24.660
那我们是不是要反回一个函数

07:24.660 --> 07:25.660
对吧

07:25.660 --> 07:26.660
反回一个函数

07:26.660 --> 07:27.660
那个函数呢

07:27.660 --> 07:28.660
要把它功能增强

07:28.660 --> 07:29.660
它是一个函数

07:29.660 --> 07:30.660
那个函数呢

07:30.660 --> 07:31.660
要把它功能增强

07:31.660 --> 07:32.660
要自动完成分发

07:32.660 --> 07:33.660
对吧

07:33.660 --> 07:34.660
那怎么来做呢

07:34.660 --> 07:35.660
具体怎么来做呢

07:35.660 --> 07:36.660
反回的是一个函数

07:36.660 --> 07:37.660
我们这里呢

07:37.660 --> 07:39.660
可以利用一个辅助函数

07:39.660 --> 07:40.660
辅助函数

07:40.660 --> 07:42.660
就是get

07:42.660 --> 07:43.660
action

07:45.660 --> 07:47.660
这样吧

07:47.660 --> 07:48.660
get

07:48.660 --> 07:49.660
out to

07:49.660 --> 07:50.660
dispatch

07:52.660 --> 07:54.660
自动分发的

07:54.660 --> 07:56.660
action craters

07:56.660 --> 07:57.660
这个函数名字很长

07:57.660 --> 07:58.660
很长

07:58.660 --> 07:59.660
打成个注尸嘛

07:59.660 --> 08:01.660
这个名字很长

08:01.660 --> 08:06.040
得到一个自动分发的

08:06.040 --> 08:07.040
action

08:07.040 --> 08:09.040
创建函数

08:09.040 --> 08:10.040
对吧

08:10.040 --> 08:11.040
你给我一个

08:11.040 --> 08:12.040
action创建函数

08:12.040 --> 08:14.040
crater

08:15.040 --> 08:17.040
然后给我一个dispatch

08:17.040 --> 08:18.040
我来帮你得到一个

08:18.040 --> 08:19.040
自动分发的

08:19.040 --> 08:20.040
action

08:20.040 --> 08:21.040
创建函数

08:21.040 --> 08:22.040
好

08:22.040 --> 08:23.040
那么这个函数怎么做呢

08:23.040 --> 08:25.040
当你雕用这个函数的时候

08:25.040 --> 08:27.040
当你去雕用

08:27.040 --> 08:29.040
这个函数的时候

08:29.040 --> 08:31.040
那我要得到什么呢

08:31.040 --> 08:32.040
我要反回一个

08:32.040 --> 08:33.040
因为要得到一个

08:33.040 --> 08:34.040
什么自动分发的

08:34.040 --> 08:35.040
action

08:35.040 --> 08:36.040
创建函数

08:36.040 --> 08:37.040
所以要得到一个函数

08:37.040 --> 08:38.040
得到的是一个函数

08:38.040 --> 08:39.040
你看

08:39.040 --> 08:40.040
断句嘛

08:40.040 --> 08:42.040
得到一个什么函数

08:42.040 --> 08:43.040
这个函数呢

08:43.040 --> 08:45.040
我们自动分发

08:45.040 --> 08:47.040
得到这么一个函数

08:47.040 --> 08:48.040
好

08:48.040 --> 08:49.040
那么这个函数

08:49.040 --> 08:50.040
它的参数

08:50.040 --> 08:51.040
有多好的

08:51.040 --> 08:52.040
我也不知道有多少

08:52.040 --> 08:53.040
有可能传参数

08:53.040 --> 08:54.040
你不要说

08:54.040 --> 08:55.040
你看这边

08:55.040 --> 08:56.040
得到这个函数

08:56.040 --> 08:57.040
得到这个函数

08:57.040 --> 08:58.040
这个是不是函数

08:58.040 --> 08:59.040
这个函数是不是要传参数

08:59.040 --> 09:00.040
鬼知道它要传多少个了

09:00.040 --> 09:02.040
我不知道

09:02.040 --> 09:04.040
我不知道你的参数有多少个

09:04.040 --> 09:06.040
本管你有多好参数

09:06.040 --> 09:07.040
我是不是把这个参数

09:07.040 --> 09:08.040
原分不动的

09:08.040 --> 09:10.040
放到这个actioncrater里边

09:10.040 --> 09:11.040
对吧

09:11.040 --> 09:12.040
咱们把你

09:12.040 --> 09:14.040
原分不动的放到这个函数里边

09:14.040 --> 09:15.040
理一下

09:15.040 --> 09:16.040
梳理一下

09:16.040 --> 09:18.040
这个函数干嘛的

09:18.040 --> 09:20.040
你给我一个action创建函数

09:20.040 --> 09:22.040
我给你返回一个新的函数

09:22.040 --> 09:23.040
那个新的函数

09:23.040 --> 09:24.040
要把它的功能增强

09:24.040 --> 09:26.040
怎么增强呢

09:26.040 --> 09:27.040
就是你给我这个函数

09:27.040 --> 09:28.040
传什么参数

09:28.040 --> 09:29.040
你看这里

09:29.040 --> 09:31.040
得到了这个新的函数

09:31.040 --> 09:33.040
那么这个新的函数

09:33.040 --> 09:34.040
这个新的函数

09:34.040 --> 09:36.040
他给他传了什么参数

09:36.040 --> 09:38.040
他就原分不动的传到

09:38.040 --> 09:39.040
这个actioncrater里边

09:39.040 --> 09:40.040
因为这个东西

09:40.040 --> 09:41.040
才是得到action的

09:41.040 --> 09:42.040
是不是我们可以通过它

09:42.040 --> 09:43.040
来得到一个action

09:43.040 --> 09:44.040
对不对

09:44.040 --> 09:45.040
对吧

09:45.040 --> 09:46.040
然后dispatch

09:46.040 --> 09:47.040
没了

09:47.040 --> 09:48.040
没了

09:48.040 --> 09:49.040
自动完成分发

09:49.040 --> 09:50.040
就没了

09:50.040 --> 09:51.040
就这么简单

09:51.040 --> 09:52.040
自动完成分发

09:52.040 --> 09:53.040
没了

09:53.040 --> 09:56.800
没问题吧

09:56.800 --> 09:57.800
没问题吧

09:57.800 --> 09:58.800
那么这里呢

09:58.800 --> 09:59.800
如果说你本身一个传的

09:59.800 --> 10:00.800
就是一个函数

10:00.800 --> 10:01.800
本身传的就是一个函数

10:01.800 --> 10:02.800
我给你返回它

10:02.800 --> 10:05.800
返回的是getouttodispatchcrater

10:05.800 --> 10:08.800
给你返回的是actioncrater

10:08.800 --> 10:09.800
然后dispatch

10:09.800 --> 10:10.800
传过去

10:12.800 --> 10:13.800
给你返回就是

10:13.800 --> 10:14.800
返回的是啥

10:14.800 --> 10:15.800
返回的就是调用这个函数

10:15.800 --> 10:16.800
调用这个函数返回的是不这个玩意儿

10:16.800 --> 10:17.800
对吧

10:17.800 --> 10:18.800
我把这个玩意儿给你返回

10:18.800 --> 10:19.800
对不对

10:19.800 --> 10:20.800
我给你稍微增强一下

10:20.800 --> 10:22.800
它的功能就完成了

10:22.800 --> 10:24.800
没问题吧

10:24.800 --> 10:25.800
应该没问题

10:25.800 --> 10:27.800
应该是没问题

10:27.800 --> 10:28.800
好

10:28.800 --> 10:29.800
那么现在呢

10:29.800 --> 10:30.800
看一下吧

10:30.800 --> 10:31.800
你看

10:31.800 --> 10:32.800
是不是添加一个用户了

10:32.800 --> 10:33.800
对不对

10:33.800 --> 10:34.800
是不是一样的功能

10:34.800 --> 10:35.800
完全一模一样的功能

10:35.800 --> 10:36.800
你看这里

10:36.800 --> 10:37.800
对吧

10:37.800 --> 10:38.800
添加一个用户了

10:38.800 --> 10:41.800
像是id456

10:41.800 --> 10:42.800
保存

10:42.800 --> 10:43.800
好

10:43.800 --> 10:44.800
你看一下

10:44.800 --> 10:46.800
是不是添加6个用户了

10:46.800 --> 10:47.800
对吧

10:47.800 --> 10:48.800
其实就是

10:48.800 --> 10:49.800
就这么简单

10:49.800 --> 10:51.800
就是自动给你分发一下

10:51.800 --> 10:52.800
调用一个action创建函数

10:52.800 --> 10:53.800
一个传件了

10:53.800 --> 10:54.800
我调用一下

10:54.800 --> 10:56.800
把该给的参数给你

10:56.800 --> 10:58.800
然后把得到的action去分发一下

10:58.800 --> 10:59.800
当然你这里

10:59.800 --> 11:00.800
甚至可以减些一下

11:00.800 --> 11:01.800
就直接吧

11:01.800 --> 11:02.800
算了

11:02.800 --> 11:03.800
不减些了

11:03.800 --> 11:04.800
就这样看得清楚一点

11:04.800 --> 11:05.800
好

11:05.800 --> 11:06.800
那么这是函数的情况

11:06.800 --> 11:07.800
那如果说

11:07.800 --> 11:08.800
不是函数

11:08.800 --> 11:09.800
它就是有可能是对象了

11:09.800 --> 11:10.800
对吧

11:10.800 --> 11:11.800
有可能是对象了

11:11.800 --> 11:12.800
那么

11:12.800 --> 11:14.800
但是你还要考虑一个问题

11:14.800 --> 11:15.800
就是说

11:15.800 --> 11:17.800
它如果也不是对象了

11:17.800 --> 11:19.800
Type of action

11:19.800 --> 11:21.800
Critus

11:21.800 --> 11:22.800
Critus

11:22.800 --> 11:23.800
等于Object

11:23.800 --> 11:24.800
它是个对象

11:24.800 --> 11:25.800
是个对象

11:25.800 --> 11:26.800
那么如果说

11:26.800 --> 11:27.800
它是其他类型

11:27.800 --> 11:28.800
它又不是对象

11:28.800 --> 11:29.800
又不是函数

11:29.800 --> 11:30.800
又不是

11:30.800 --> 11:31.800
什么

11:31.800 --> 11:32.800
还有一些

11:32.800 --> 11:33.800
其他乱七八糟的类型

11:33.800 --> 11:34.800
数字

11:34.800 --> 11:35.800
字幕圈

11:35.800 --> 11:36.800
还有undefined

11:36.800 --> 11:37.800
对吧

11:37.800 --> 11:38.800
你给我传人家乱七八糟的东西

11:38.800 --> 11:39.800
干嘛呢

11:39.800 --> 11:40.800
我干嘛呢

11:40.800 --> 11:41.800
我可以给你爆错

11:41.800 --> 11:42.800
也可以给你返回一个空对象

11:42.800 --> 11:43.800
就啥都不做

11:43.800 --> 11:44.800
就啥都没有

11:44.800 --> 11:45.800
功能没有

11:45.800 --> 11:46.800
啥都没有

11:46.800 --> 11:47.800
也可以爆错

11:47.800 --> 11:48.800
也可以爆错

11:48.800 --> 11:49.800
Through

11:49.800 --> 11:50.800
New

11:50.800 --> 11:52.800
Type Error

11:52.800 --> 11:54.800
就是说

11:54.800 --> 11:55.800
action

11:55.800 --> 11:56.800
爆错吧

11:56.800 --> 11:57.800
爆错好一点

11:57.800 --> 11:58.800
官方也是爆错的

11:58.800 --> 11:59.800
actionCritus

11:59.800 --> 12:00.800
Must

12:00.800 --> 12:01.800
Be

12:01.800 --> 12:02.800
AnObject

12:02.800 --> 12:03.800
Or

12:03.800 --> 12:04.800
方形

12:06.800 --> 12:07.800
再加一句

12:07.800 --> 12:08.800
which

12:08.800 --> 12:09.800
它什么意思呢

12:09.800 --> 12:11.800
which means

12:12.800 --> 12:14.800
action

12:14.800 --> 12:19.200
actionCritus

12:19.200 --> 12:20.200
总之

12:20.200 --> 12:21.200
该提示个信息

12:21.200 --> 12:23.200
我用中文体都行

12:23.200 --> 12:24.200
现在

12:24.200 --> 12:25.200
我们看一下

12:25.200 --> 12:27.200
它是一个对象的情况

12:27.200 --> 12:28.200
是一个对象的话

12:28.200 --> 12:29.200
你看一下这里

12:29.200 --> 12:31.200
它给你传的是什么对象

12:31.200 --> 12:32.200
你说要给它一个

12:32.200 --> 12:33.200
什么对象

12:33.200 --> 12:35.200
所以一模一样的属性

12:35.200 --> 12:36.200
ok 那这里呢

12:36.200 --> 12:37.200
我们是不是就循环

12:37.200 --> 12:38.200
对吧

12:38.200 --> 12:39.200
一个for in循环

12:39.200 --> 12:40.200
循环啥呢

12:40.200 --> 12:42.200
循环那个是action

12:42.200 --> 12:44.200
Critus

12:44.200 --> 12:46.200
循环这个

12:46.200 --> 12:47.200
循环这个对象

12:47.200 --> 12:48.200
对象里面是不是

12:48.200 --> 12:50.200
拿到它的每一个属性名

12:50.200 --> 12:51.200
对不对

12:51.200 --> 12:52.200
我们这里输出一下吧

12:53.200 --> 12:54.200
拿到它每一个属性名

12:54.200 --> 12:56.200
到index里面来看一下

12:56.200 --> 12:57.200
index里面

12:57.200 --> 12:58.200
我们再复制一下

12:58.200 --> 13:02.400
把这个东西弄过来

13:04.400 --> 13:05.400
这里呢

13:05.400 --> 13:06.400
我们自己的redax

13:08.400 --> 13:09.400
那么现在肯定是

13:09.400 --> 13:10.400
调文不了的

13:10.400 --> 13:11.400
调文不了的

13:11.400 --> 13:12.400
我们主要是看一下输出

13:12.400 --> 13:13.400
所以得到两个属性名

13:13.400 --> 13:14.400
adduer

13:14.400 --> 13:15.400
d.sude

13:15.400 --> 13:16.400
对吧 两个字部串

13:16.400 --> 13:17.400
就是它的属性名

13:17.400 --> 13:19.400
拿到这个属性名之后

13:19.400 --> 13:21.400
是不是我们要得到一个新的对象

13:21.400 --> 13:22.400
对吧

13:22.400 --> 13:23.400
这里我们要得到一个新的对象

13:23.400 --> 13:25.400
就是results

13:25.400 --> 13:26.400
拿了一个新的对象

13:26.400 --> 13:28.400
就是返回结果

13:28.400 --> 13:29.400
返回就返回这个results

13:29.400 --> 13:31.400
最后我们就返回这个results

13:31.400 --> 13:33.400
返回这个results

13:33.400 --> 13:35.400
那么这个results

13:35.400 --> 13:36.400
我们是不是可以拿

13:36.400 --> 13:37.400
通过这个属性名

13:37.400 --> 13:38.400
是不是可以去拿

13:38.400 --> 13:40.400
拿它对应的函数

13:40.400 --> 13:41.400
对吧

13:41.400 --> 13:42.400
拿这个对象里面对应的函数

13:42.400 --> 13:44.400
是不是拿到它的属性值

13:44.400 --> 13:45.400
对吧

13:45.400 --> 13:46.400
拿到它的属性值

13:46.400 --> 13:47.400
这里是不是拿

13:47.400 --> 13:48.400
可以拿到什么

13:48.400 --> 13:49.400
拿到这个就是

13:49.400 --> 13:52.910
action creator

13:52.910 --> 13:54.910
creator

13:55.910 --> 14:00.910
就是取出对应的属性

14:00.910 --> 14:01.910
属性值

14:01.910 --> 14:02.910
对吧

14:02.910 --> 14:03.910
从这个里面

14:03.910 --> 14:04.910
拿到这个对应的

14:04.910 --> 14:05.910
通过这个属性名

14:05.910 --> 14:06.910
去拿到它对应的属性值

14:06.910 --> 14:07.910
对吧

14:07.910 --> 14:08.910
拿到这个action creator函数

14:08.910 --> 14:09.910
好

14:09.910 --> 14:10.910
但是拿到过后呢

14:10.910 --> 14:11.910
你要注意

14:11.910 --> 14:12.910
它有可能给你乱写了一些东西

14:12.910 --> 14:13.910
你要最好验证一下

14:13.910 --> 14:14.910
因为你在写产品的

14:14.910 --> 14:15.910
那个东西的时候

14:15.910 --> 14:16.910
你最好多考虑一些

14:16.910 --> 14:17.910
因为它可能给你写个

14:17.910 --> 14:18.910
123

14:18.910 --> 14:19.910
字不错

14:19.910 --> 14:20.910
给你写个乱七八糟的东西

14:20.910 --> 14:21.910
对不对

14:21.910 --> 14:22.910
它是不是有可能给你写个

14:22.910 --> 14:23.910
乱七八糟的东西

14:23.910 --> 14:24.910
没有问题吧

14:24.910 --> 14:25.910
所以说

14:25.910 --> 14:27.910
你这里最好去验证一下

14:27.910 --> 14:28.910
去验证一下

14:28.910 --> 14:29.910
验证一下

14:29.910 --> 14:30.910
还给你传了视察

14:30.910 --> 14:31.910
保存

14:32.910 --> 14:35.220
判断一下

14:35.220 --> 14:36.220
好

14:36.220 --> 14:37.220
如果说

14:37.220 --> 14:38.220
如果说你给我传递的

14:38.220 --> 14:39.220
action creator

14:41.220 --> 14:42.220
action creator

14:42.220 --> 14:43.220
如果说你给我

14:43.220 --> 14:44.220
传递的

14:44.220 --> 14:45.220
不是一个函数

14:45.220 --> 14:47.220
这个地方该是函数了吧

14:47.220 --> 14:48.220
总该是函数了吧

14:48.220 --> 14:49.220
对吧

14:49.220 --> 14:50.220
type of

14:50.220 --> 14:51.220
如果说你给我传递的

14:51.220 --> 14:52.220
不是函数

14:55.220 --> 14:56.220
不等于

14:56.220 --> 14:57.220
什么

14:57.220 --> 14:58.220
不等于方形

14:59.220 --> 15:00.220
那么干嘛

15:00.220 --> 15:01.220
是不是什么都不做

15:01.220 --> 15:02.220
对吧

15:02.220 --> 15:03.220
函数的时候

15:03.220 --> 15:04.220
我才去做这件事情

15:04.220 --> 15:05.220
否则的话

15:05.220 --> 15:06.220
我啥也不做

15:06.220 --> 15:07.220
我啥也不做

15:07.220 --> 15:08.220
你要这意思吧

15:08.220 --> 15:09.220
你给我传的是函数的话

15:09.220 --> 15:10.220
如果你给我传的函数的话

15:10.220 --> 15:12.220
我才去做一些事情

15:12.220 --> 15:13.220
如果你给我传的

15:13.220 --> 15:14.220
这里给我传个1 2 3

15:14.220 --> 15:15.220
1 2 3

15:15.220 --> 15:16.220
我就啥也不做

15:16.220 --> 15:17.220
妈也不做

15:17.220 --> 15:18.220
就这么个意思

15:18.220 --> 15:19.220
好

15:19.220 --> 15:20.220
那么这里呢

15:20.220 --> 15:21.220
方形

15:21.220 --> 15:22.220
如果它是一个函数的话

15:22.220 --> 15:23.220
怎么办

15:23.220 --> 15:24.220
result里边

15:24.220 --> 15:25.220
我要返回对象里边

15:25.220 --> 15:26.220
加上同名属性

15:26.220 --> 15:27.220
对吧

15:27.220 --> 15:28.220
同名属性

15:28.220 --> 15:29.220
等于啥

15:29.220 --> 15:30.220
是不是可以利用这个

15:30.220 --> 15:31.220
get out to

15:31.220 --> 15:32.220
辅助函数

15:32.220 --> 15:33.220
对吧

15:33.220 --> 15:34.220
我把你这个

15:34.220 --> 15:35.220
xingquater

15:35.220 --> 15:36.220
函数传进去

15:36.220 --> 15:37.220
然后把dispatch传进去

15:37.220 --> 15:38.220
你把这个函数给我增强

15:38.220 --> 15:39.220
返回一个增强的函数

15:39.220 --> 15:40.220
对不对

15:40.220 --> 15:41.220
返回一个增强的函数

15:41.220 --> 15:42.220
就完了

15:42.220 --> 15:43.220
就没了

15:43.220 --> 15:44.220
好看一下吧

15:44.220 --> 15:45.220
对吧

15:45.220 --> 15:46.220
好

15:46.220 --> 15:47.220
保存

15:47.220 --> 15:48.220
然后这边来

15:48.220 --> 15:49.220
这边来

15:49.220 --> 15:50.220
看一下

15:50.220 --> 15:51.220
是不是可以了

15:51.220 --> 15:52.220
可以没

15:52.220 --> 15:53.220
是不是可以了

15:53.220 --> 15:54.220
对吧

15:54.220 --> 15:55.220
对

15:55.220 --> 15:56.220
是用的是我们自己的

15:56.220 --> 15:57.220
是我们自己的

15:57.220 --> 15:58.220
好

15:58.220 --> 15:59.220
这里呢

15:59.220 --> 16:00.220
我们把打印出来看一下

16:00.220 --> 16:01.220
打印出来

16:01.220 --> 16:02.220
看一下

16:02.220 --> 16:03.220
出没问题了

16:03.220 --> 16:04.220
对吧

16:05.220 --> 16:06.220
就没了

16:06.220 --> 16:07.220
就没了

16:07.220 --> 16:08.220
打印出来

16:08.220 --> 16:09.220
打印出来是不是一样的

16:09.220 --> 16:10.220
对吧

16:10.220 --> 16:11.220
跟这个函数是一样的

16:11.220 --> 16:12.220
是一样的

16:13.220 --> 16:14.220
没了

16:14.220 --> 16:15.220
就没了

16:15.220 --> 16:16.220
这就是

16:16.220 --> 16:18.220
这个bendxingquater

16:18.220 --> 16:19.220
也就是一个

16:19.220 --> 16:20.220
用于辅助的函数

16:20.220 --> 16:21.220
对吧

16:21.220 --> 16:22.220
用于辅助的函数

16:22.220 --> 16:23.220
就没了

16:23.220 --> 16:24.220
好

16:24.220 --> 16:25.220
这是关于

16:25.220 --> 16:27.220
关于这个就是

16:27.220 --> 16:28.220
bendxingquater

16:28.220 --> 16:29.220
下来把它写一下

