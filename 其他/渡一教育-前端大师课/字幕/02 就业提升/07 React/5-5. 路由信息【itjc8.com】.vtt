WEBVTT

00:01.260 --> 00:07.460
这一课咱们继续来聊这个路由 这一课我们讲这个路由信息

00:08.400 --> 00:14.600
这什么东西呢 这个名字是我自己取的 讲的是什么东西呢 我们之前学过

00:15.100 --> 00:25.780
就是这个rotor组件 对吧 但是它有两种啊什么browserrotor 还是什么哈希rotor 对吧 有两种情况 不管怎么样吧 我们把它统称为rotor组件

00:26.700 --> 00:35.780
这个组件呢 会创建一个上下文啊 并且向上下文中

00:36.780 --> 00:43.900
注入一些信息 这些信息呢 后续的组件 比如说rotor组件啊 什么switch组件啊 都可能会用到

00:44.780 --> 00:49.540
我之前讲过这个原理的 对吧 那么咱们这一课呢 就主要来学习这个上下文里边的信息

00:50.540 --> 00:55.300
但是呢 我之前也说过 该上下文的

00:57.100 --> 01:06.300
对开发者是隐藏的 就是说你如果像直接使用这个上下文的 对不起 他不让你用啊 不让你用

01:07.420 --> 01:11.860
他也不建议你去使用 因为他觉得这样子呢 做了偶合度太高了

01:12.380 --> 01:21.140
就是说你开发这个组件呢 有很多组件 他应该跟什么路由 这些东西是没有什么关系的 你不能过于去把这个路由绑到一个组件里边去

01:21.940 --> 01:26.380
所以说呢 他对这个东西呢 他对一个上下文的是对开发者隐藏的

01:28.260 --> 01:34.300
然后那么这个信息 我我们怎么来获取呢 所以他是用这种方式 他

01:35.300 --> 01:37.500
他就是肉车组件

01:38.740 --> 01:44.820
若匹配到了匹配到了路由 如果匹配到了匹配到了就是地址

01:45.900 --> 01:53.260
则会将这些上下文中的信息作为属性

01:54.020 --> 01:56.060
传入对应的组件

01:56.740 --> 02:03.660
所以说我们如果说要获取这些路由信息的话 我们应该在组件的属性里边获取

02:04.500 --> 02:10.180
所以说我们组件的就保持的比较纯粹 我也不知道这些数据哪来的 反正通过属性传给我的

02:10.540 --> 02:13.020
我从属性里边去获取 给他举个例子啊

02:13.580 --> 02:17.580
不要我们这里呢 有这么一个结构啊 非常简单的一个结构 看一下吧

02:18.140 --> 02:23.980
啊 这个app组件里边是个router的吧 他提供上下文信息 然后下面一个switch啊 只要匹配一个就行了

02:25.140 --> 02:32.340
上边呢 我们匹配这个a 匹配这个a组件 那么如果访问这样的地址 或者是以这样的地址开头 我们就能匹配到这个a组件

02:32.820 --> 02:36.580
然后呢 后边呢 如果匹配不到的话 我们就匹配到这个组件啊 找不到页面

02:37.340 --> 02:41.860
非常简单的这么一个路由结构 因此呢 我们这里把它运行出来看一下啊 start

02:47.560 --> 02:59.180
等一下啊 把运行出来啊 一开始呢 我们访问的地址呢 肯定不是斜槓啊 所以说一开始呢 肯定给我显示的是找不到页面

03:00.540 --> 03:08.860
好 看到没 就是找不到页面 对吧 好 现在我们的访问这个啊 访问这个斜槓啊 是不是找到组件啊 接下来我们点右键检查

03:09.260 --> 03:12.060
我们看一下这里啊 这个react 这个调词工具

03:12.780 --> 03:19.420
我们找到这个组件a啊 找到这个组件a 因为发现这个组件a呢 莫名其妙的 还多了三个属性了

03:19.860 --> 03:24.860
看呗 一个history 是个对象 一个location 是个对象 一个march 是个对象

03:25.340 --> 03:28.660
所以我们这几课研究的是啥呢 讲的就是这三个属性

03:29.260 --> 03:31.580
这三个属性有什么用啊 怎么去使用它

03:32.500 --> 03:37.660
好 我们一个个说啊 也就说我们刚才说的 这些这些信息呢 这些东西就叫做路由信息

03:37.980 --> 03:41.700
这些信息呢 是谁给给我们的 是不是这个路由物车组件给我们的

03:42.100 --> 03:46.580
到时候他匹配到了这个地址 他就会使用 他就会创建这么一个组件 那么他会把这个

03:46.900 --> 03:52.700
这些信息呢 作为属性传递给这个组件 因此呢 我们在这个组件里边是不是就可以使用这个

03:53.500 --> 03:57.340
啊 是不是就可以使用这个玩意了 对吧 这个属性里边的东西了 是不是可以使用了

03:58.100 --> 03:58.500
没问题吧

03:59.380 --> 04:03.740
哎 就这么个道理啊 好 那么接下来 我们来看一下一个个来看啊

04:04.380 --> 04:10.820
这些路由信息都是上下文里边的信息 你不能直接使用 那他作为属性参数啊 作为属性给你传过来了

04:10.820 --> 04:14.420
因此呢 你可以在属性里边去使用了 那么这个属性里边

04:14.980 --> 04:19.140
一个个看有三个属性吧 第一个history啊 就这个属性

04:20.020 --> 04:24.980
这个属性呢 我们有哪些东西 我们可以用了一个来说啊 一个是history

04:27.020 --> 04:33.180
这个地方呢 他这个属性呢 他是rexrouter给我们的做了一个合成对象啊

04:33.780 --> 04:42.540
他并不是window.history对象 虽然他名字叫做history 但是他跟window.history是两骂事啊 两骂事

04:43.580 --> 04:47.660
我们通常利用他 利用该对象

04:49.700 --> 04:56.620
挑转地址 就是如果说我们 就是无刷新挑转地址啊 无刷新挑转地址 如果说我们要

04:57.100 --> 05:02.380
比方说点篮模一个按钮 我们可能要挑转一个新的地址 对吧 我们可以利用这个对象来完成

05:03.340 --> 05:09.740
好 这里呢 比方说给他取个例子 这个主键里边呢 比方是主键A里边啊 有一个div

05:10.700 --> 05:15.500
div 这是个主键A 啊 主键A 接下来呢 我们下面一个按钮

05:16.700 --> 05:18.460
啊 就比方说这里按钮了就是挑转

05:19.260 --> 05:28.300
挑转到比方说鞋杠B 啊 鞋杠B 当然我们没有这个B主键啊 没有这个B主键啊 鞋一个吧 它鞋一个 方个型B啊 props

05:29.500 --> 05:30.300
return

05:32.700 --> 05:37.340
这里一个来个吧 啊 挑转到 这是主键B 啊 挑转到主键A

05:38.860 --> 05:48.780
看一下吧 好 那么点击这个按钮过后呢 我们比方说点击过后要完成挑转 怎么挑转呢 我们不能使用window.history来挑转啊 尽管我们之前说了

05:49.260 --> 05:57.980
给他演示的时候呢 可以在这里面使用poosh 对吧 poosh state 对不对啊 可以用这种方式来挑转 但是你不能使用这种方式啊 我一会讲原因为什么不能使用这种方式

05:58.460 --> 06:08.620
一定要使用他属性里面给你传过来的 传过来的啥呢 传过来的这个history对象啊 这个对象里面他提供了一个poosh 方法

06:09.820 --> 06:21.900
poosh 将某个新的地址入占啊 入什么占 是不是历史基督占 对不对 我们之前画过这个历史基督啊

06:22.300 --> 06:30.540
入占 历史基督占在历史基督里面加一条 你可以想象一下这个poosh 方法呢 实际上你可以认为他的内部掉入了history的poosh

06:31.260 --> 06:37.020
你可以这样去想象 好 那么这里当然是掉入的是poosh state啊 我们这里poosh 好

06:37.740 --> 06:42.620
接下来呢 我们这里写上一个 比方说写上挑转到b嘛 写钢b

06:43.980 --> 06:52.440
没问题吧 好 咱们 咱们 咱们再来匹配这个b主键啊 b 匹配b主键

06:52.920 --> 06:56.360
好 试一下啊 试一下 保存

06:57.240 --> 07:03.880
接下来 我们来看一下 挑转到主键b 你看是不是跳过去了 对不对 主键b了 你看地址是变成b了

07:04.360 --> 07:09.800
无刷新跳转看到没 是非常简单 非常非常简单啊 没有任何难度

07:10.520 --> 07:16.520
另外一边呢 如果说主键b要跳到主键a 那怎么跳 是不是一样的 对不对 因为这个主键b呢

07:16.680 --> 07:22.600
它是放到肉车主键里边的 它会给它注入这些属性 因此在主键b里边是不是也能获取到history

07:23.000 --> 07:29.000
对吧 它也能获取到history 因此我们来这里负责一下啊 跳到主键a 那么这里poosh 写钢a

07:29.560 --> 07:35.560
就这么简单 保存 你看一下 主键b跳到主键a 你看地址是不是变了 对吧 主键a是不是变了

07:36.440 --> 07:40.840
那么它具体的跳转原理是什么了 就是说你这里poosh的过后了 它是不是

07:41.720 --> 07:50.280
它会导致上下文的跟感啊 主键信息是不是变了 对不对 主键的信息刚才是写钢a 现在变成写钢b了 现在刚才是写钢b 现在变成写钢a了

07:50.520 --> 07:58.440
那么上下文是不是变了 而上下文变了过后 按照我们之前学过的知识 是跟那个上下文相关的主键全部要变完 重新要渲染 对不对

07:59.000 --> 08:05.080
全部重新渲染啊 你就可以认为 你这个地方呢 掉了这个函数过后 这个主键刷新了

08:05.400 --> 08:10.920
这个主键刷新渲染了 那这东西是不是要重新渲染 对不对 你是重新渲染了这个页面啊

08:12.040 --> 08:19.560
好 这是关于这一块啊 将一个新的地址入战 那么这里我讲一下为什么他没有直接使用history

08:22.200 --> 08:22.760
为什么

08:24.160 --> 08:33.320
没有直接使用history推向 比方说因为我以前遇到个学生 他面试的时候遇到这个问题 他就用他问的非常刁砖啊 他说

08:34.040 --> 08:38.440
如果raxrotor里面他为什么要自己去合成一个history对象

08:39.000 --> 08:43.400
你得封装一些方法 而不去直接使用window.history 就是原生的

08:43.960 --> 08:52.680
啊 为了ipi里面的history对象 为什么不用啊 主要是这么几个原因啊 第一个原因呢 就是啊raxrotor

08:53.800 --> 09:00.200
中有两种模式啊 两种模式分别是哈希啊和什么呢和那个

09:01.160 --> 09:12.680
history啊 分别是两种模式 那如果说你直接使用window.history对象的话 那么就意味着你只能使用history模式 对吧 因为你只用的是你直接使用的是history api

09:13.240 --> 09:17.640
那如果说你要切换到哈希模式 是不是代码要变了很多要变很多代码

09:18.280 --> 09:25.000
而比方说现在我们就不会不会有什么变化 比方说我们这里只需要把这个东西改一下 改成什么哈希rotor你看一下

09:25.960 --> 09:26.440
保存

09:27.800 --> 09:29.960
啊 这里呢 先访问

09:30.600 --> 09:30.760
啊

09:31.800 --> 09:39.560
想访问就是斜槓A啊 想访问斜槓A 主键A 跳到主键B 你看是不是直接可以跳转 对吧 还是用同了同一个history 对吧

09:40.120 --> 09:47.640
啊 他给你封装好了过后了 他就能适配不同的模式 明白这个意思吗 他能够适配不同的模式 注意看地址的变化

09:48.120 --> 09:49.640
对吧 他变成哈希模式了

09:50.680 --> 09:56.840
好 这就是关于第一个啊 第一个为什么他没有直接使用history对象 因为他有两种模式

09:57.560 --> 10:05.640
如果直接使用window.history只能支持一种模式

10:06.440 --> 10:15.720
那种模式的代码 代码了 邪法了 可能会变 但是如果你给封装之后了 他不会变化 该咋写咋写 你到时候改变的时候了 你只需要改变这个地方就行了

10:16.280 --> 10:17.000
加啥都不用改

10:18.120 --> 10:20.760
这是第一个原因 第二个原因那是最根本的问题

10:21.480 --> 10:32.200
这怎么了 就是当使用window.history pushState的时候啊 当你使用这个方法是

10:35.480 --> 10:45.320
没有办法收到任何通知 就是你调用这个方法 你会改变这什么 改变页面地址对吧 会有一个新的地址入占

10:45.640 --> 10:52.680
但是呢 我不知道有新的地址入占了 那么不知道新的地址入占过后了reaction是不是不知道该怎么处理了 因为他不知道

10:53.160 --> 10:54.680
他有一个新的地址变化了啊

10:55.240 --> 11:01.800
就说 这样子会导致一个问题 将导致reaction无法知晓

11:03.400 --> 11:11.080
知晓地址发生了变化 他不知道地址为什么 有没有变化 到底发生什么变化 什么都不知道

11:11.880 --> 11:19.160
所以说 结果导致无法刷新组建 无法重新渲染

11:19.880 --> 11:26.840
组建 就会导致这么一个问题 基于这两个原因呢 所以呢 他得使用自己封装一个方法

11:27.080 --> 11:31.880
你封装了方法过后 那自然很简单了 你调那个方法就知道了 你要变化地址

11:32.360 --> 11:37.880
ok 那么我就会触发怎么组建刷新 对吧 改变上下文的里面东西 那么触发组建刷新

11:38.600 --> 11:40.920
是这么个意思啊 这是关于这个

11:41.880 --> 11:45.240
push 这里呢 咱们把它记录一下

11:46.040 --> 11:53.240
他里边呢 有参数 其实他有两个参数啊 我们一会说第二个参数 参数一呢 就是一个

11:54.040 --> 11:55.800
新的路径 新的地址

11:56.760 --> 12:02.440
要调整到哪个地址 那么你给他写进去 那如果说有些同学说啊 这里边地址能不能写这种

12:02.920 --> 12:04.360
再看一下啊 能不能写这种

12:05.320 --> 12:12.040
写个决定路径啊 比方说我跳的到百度 那这样子也会怎么样呢 保存啊 咱们来看一下吧 这里能么访问

12:13.160 --> 12:13.880
好 跳的到b

12:15.160 --> 12:20.520
他跳的到什么呢 你看一下他的地址是啥 把他复制过来啊 你看他的地址是啥 他变成这样的地址了

12:21.320 --> 12:22.840
也就是说呢 他只能写

12:23.400 --> 12:31.640
那个不能写那个就是决定路径啊 不能包含前面的 不能包含这个什么协议啊这些东西 他只能是相对路径 为什么呢

12:31.960 --> 12:39.000
因为我们这里是无刷新跳转啊 有细节说一下就行了 谁会这样做了 我们这里是无刷新的跳转

12:40.440 --> 12:47.560
因此呢 无刷新的跳转只能是本战地址互相跳转 你要跳转到别的网页 那一定是要会刷新的

12:48.040 --> 12:57.320
所以说如果说啊 你将来确实有有这个需求要跳转到别的网页 那么第一种呢 建议你使用A元数

12:57.640 --> 13:04.680
直接连接到一个地址玩事了 用点击A元数他就跳转了 对吧 另外呢 如果说你要在某个时候啊 不是A元数跳转

13:04.920 --> 13:09.000
而是在某一个操作完成之后 跳转到另外一个网站 那么怎么办呢

13:10.680 --> 13:19.160
直接使用window里边的什么location 对吧 这边rave属性加负值 对吧 这样就完成了啊 直接跟以前的做法是一样的

13:19.800 --> 13:26.120
啊 没什么好说的啊 这第一个参数啊 实际上呢 他还有第二个参数 只是第二个参数呢 我们不咋用

13:26.680 --> 13:34.680
不咋用 第一个参数是可选的啊 可选 他表示什么就是啊 跳转之后呢 就是附带的状态

13:35.320 --> 13:39.400
状态数据 这个有点类似于啥呢 类似于就是我们之前那个

13:40.360 --> 13:48.760
学习那个history 就是window.historywindow.history push dates里面 是不是有数据吗 对吧 他不是有数据吗 第一个参数就是啊

13:49.640 --> 13:52.840
第一个参数 我就有点忘了啊 看一下那个window

13:53.720 --> 13:59.320
呃 这边访问A吗 这个window第二history啊 push dates

14:00.120 --> 14:03.320
啊 第一个参数就是数据 对吧 就是数据 附加的状态数据

14:03.800 --> 14:08.760
ok 那么咱们呢 把这个状态数据 如果你有一些状态数据啊 你可能会

14:09.800 --> 14:15.960
呃 就是跳转的时候呢 会附加进去 那么你可以写啊 比方说我们第二个参数就写个字不错嘛

14:17.240 --> 14:19.800
一些状态数据啊 状态数据

14:20.760 --> 14:22.520
好 保存 看一下啊

14:24.120 --> 14:25.320
我们现在跳转到主键B

14:26.040 --> 14:33.240
完成跳转了 对吧 好 接下来我们来看一下这状态数据在不在啊 我们首先看一下window里边的history 这状态数据在不在呢

14:33.960 --> 14:45.880
看一下这里边stat 是不是有个状态数据 啊 他给你封装了一下啊 他把我们的状态数据呢 封装到他一个属性里边去了 他有个keyz啊 keyz我们不用管他 设计到他的原理啊 不用去

14:46.280 --> 14:48.440
过早的去申究 我们以后呢 讲原码的时候再说

14:49.080 --> 14:58.520
那么这个stat呢 他就是他的状态数据 对吧 我们刚才的状态数据 所以说我们的状态数据呢 实际上最终呢 还是回到这个history里边 只不过我们获取的时候呢

14:59.480 --> 15:07.800
不是从这里边获取啊 我们获取这个状态数据的时候 不是从这里边获取 那怎么来获取这个状态数据呢 你看现在不是跳转到主键B了吗

15:08.600 --> 15:14.120
哎 主键B这个地址是不是有一些状态数据 对吧 从那个A跳转过来给他附加的一些状态数据

15:14.440 --> 15:19.480
那么在主键B里边 如果来获取状态数据呢 比较说啊 我们这里要获取到状态数据

15:20.360 --> 15:28.520
获取状态数据 怎么来获取呢 可以用这种方式 我们这里把打印出来嘛 打印出来一看就明白了啊 都不用去搞那么麻烦

15:29.360 --> 15:31.880
打印这个啊 history

15:33.720 --> 15:35.400
保存啊 你看一下

15:36.520 --> 15:40.680
history里边有刚才我们用了什么方法 就是poosh 对吧 poosh这个方法

15:41.160 --> 15:44.680
那么history里边不是还有一个属性吗 叫做location这个属性 看到没

15:45.720 --> 15:46.600
location这个属性

15:47.160 --> 15:52.120
location这个属性里边你看State是不是我们的状态数据 哎 我们应该从这里边去拿这个状态数据

15:52.680 --> 15:59.400
看到没 没问题吧 好 于是呢 我们这里 然后拿状态数据是不是很简单了 怎么拿

16:00.360 --> 16:05.960
prox history啊 然后什么location然后State 对吧

16:06.680 --> 16:17.800
从这里边可以看到啊location这个属性里边的State属性就是我们附加的数据 你随便附加什么数据 数字也好 制补创也好 还有什么对象也好 随便啊 随便

16:18.520 --> 16:20.120
好 这样子就可以拿到状态数据

16:20.920 --> 16:23.800
好 好 来看是不是状态数据拿到了 对不对

16:25.320 --> 16:33.560
好 然后那么调整了A调整了B 状态数据拿到了 为什么说这个东西不太常用呢 是因为我们这个状态数据啊 它是

16:34.520 --> 16:35.720
它依赖有一挑转

16:36.280 --> 16:42.680
就说别人挑转过来的时候呢 通过proxy来进行挑转的时候呢 它可能会把状态数据附加进去

16:43.080 --> 16:47.960
那就也就意味着说 如果我是直接访问这个地址的话 有没有状态数据 是没有

16:48.680 --> 16:51.960
对吧 它就没有这个状态数据啊 说这个呢不是

16:53.000 --> 16:53.960
这个东西不是太常用

16:54.440 --> 17:01.480
因为我们往往说一个页面 它看到什么样子 把这个地址复制一下 然后再粘贴过去 应该是相同的样子

17:01.640 --> 17:07.880
所以说 如果说要附带一些数据的话 我们往往会在地址里面做文章 而不会在状态数据里面

17:08.760 --> 17:13.000
不要这意思吧 所以说这个不是很常见啊 所以了解一下就行了 我们这里说一下啊

17:14.600 --> 17:19.160
好 这是proxy方法 好 另外一个方法呢 叫做replace

17:20.040 --> 17:30.120
啊 那么跟这个proxy用法是一样的啊 它proxy是将新的地址入占 那么replace呢 将某个新的地址替换掉

17:31.080 --> 17:37.160
当前占中的地址啊 就替换replace嘛替换啊

17:38.920 --> 17:42.040
啊 然后呢 它它也是一样 我们来看一下吧 我们这个复制一下

17:43.160 --> 17:48.440
复制一下 用法是一样的 直接来replace就完事了啊 这里replace

17:49.000 --> 17:51.880
直接来就完事了 保存好看一下啊

17:52.760 --> 17:58.760
好 你看是状态数据是一样的啊 是一样的 是不是完全一样的啊 用法跟那个proxy是完全一样

17:58.920 --> 18:07.480
它唯一的区别就在于它是替换啊 它替换 我们之前也讲过history里边proxy和替换的区别对吧 那个占它有变化的啊

18:08.360 --> 18:12.680
所以这里了解一下就行了 好 这是replace啊replace

18:13.640 --> 18:22.200
然后还有什么呢 什么还有什么go啊 够方法啊 for world啊 还有什么back对吧 这些方法是不是跟那个

18:22.600 --> 18:29.000
与啊 用法与window的history一致啊 用法是完全一致的啊

18:30.600 --> 18:32.840
这用法跟它完全一致的 就没什么好说的了

18:33.960 --> 18:39.640
ok 这是关于history这个对象 这个对象呢 我们从属性里面获取主要的目的

18:40.680 --> 18:46.840
大部分时候都是为了挑转一面啊 都是为了挑转一面 表示我们可以使用poosh

18:47.320 --> 18:52.600
啊 加入网站里面加入一条数据 或者是用replace替换掉一条数据

18:53.720 --> 18:57.320
好 这是关于history 好 咱们下面看一个

18:58.120 --> 19:02.920
就location 啊location这个属性 这个属性呢其实我们刚才看到过

19:03.160 --> 19:08.360
就是history里面也有个属性叫location 对吧 那么我们看一下两个属性是不是一样的 我们这里输出一下

19:09.160 --> 19:11.640
prox里面有个 我们再换一个吧

19:12.360 --> 19:13.640
啊 这里复制一个

19:14.600 --> 19:20.360
好 这里呢 我们直接输出一下啊 就是prox里面不是有个history吗 他有个location是个属性吗

19:20.920 --> 19:28.040
好 然后呢 再输出一下prox里边的location 再输出一下prox里边history里边的location 是不是等于

19:28.920 --> 19:34.200
prox里边的location 输出一下 看一下啊 把这三个东西输出 保存你看一下

19:35.080 --> 19:41.320
是不是true 啥意思呢 啥意思 也就是说我们这里的这个history这个属

19:42.200 --> 19:47.800
这个location这个属性啊 他跟那个history里面的location那个属性是一样的 他只是为了方便你获取

19:48.120 --> 19:51.160
你少写一个单词于是把提到顶层了

19:51.720 --> 19:57.960
啊 就这么简单说location里边呢 他的语 语什么呢 语那个history

19:58.920 --> 19:59.960
点location

20:00.600 --> 20:04.200
完全一致啊 是同一个对象啊 是同一个对象

20:05.160 --> 20:08.120
那么但是他跟那个东西不一致哦 但是

20:08.920 --> 20:12.040
与window点location是不一样的啊

20:12.920 --> 20:17.320
不同啊 他是自己封装的一个对象啊 他不是window点location啊 要搞清楚

20:17.880 --> 20:19.880
那么这个location里边记录了什么东西呢

20:20.280 --> 20:21.480
location对象中

20:21.800 --> 20:26.280
记录了 啊 当前地址地址

20:26.840 --> 20:32.920
当前地址的相关信息啊 就是我们这个地址里边有哪些相关信息 之前咱们不是说

20:33.640 --> 20:40.680
咱们地址里边包含了那些包含哪些东西啊 包含什么个pass对吧 路径还有什么哈希还有什么

20:41.560 --> 20:48.120
呃search 就是我们的那个查询制服串啊包含这些东西 那么都记录在location里边

20:48.360 --> 20:50.360
location里边 比方几个例子啊

20:51.640 --> 20:55.240
呃 我们这里就不用这个什么 主键b了啊 不用这个主键b了

20:56.120 --> 21:01.080
也不用什么挑转不挑转了啊 现在我们history这一这一页已经翻过去了啊 就看主键a

21:01.720 --> 21:04.200
好 主键a里边呢 我们来看一下啊

21:04.840 --> 21:09.800
主键a里边我们访问主键a的时候呢 我们把他的那个location应该答应出来

21:10.200 --> 21:11.080
probs location

21:12.280 --> 21:12.760
好 保存

21:13.800 --> 21:14.840
好 这里访问主键a

21:15.560 --> 21:17.880
好 那看location里边 你看哈希

21:18.520 --> 21:21.000
哈希什么 就是键号后边的东西对吧 现在没有

21:21.960 --> 21:27.240
passname 就是我们的路径路径是不是斜钢a 对不对 路径是斜钢a

21:28.040 --> 21:30.840
好 ok 路径是这个斜钢a 他给你记录在这里 是个制服串

21:31.240 --> 21:35.320
search 呢 表示我们的查询制服串 对吧 查询制服串啊 是空白的

21:35.560 --> 21:41.080
这个standard呢 我们刚才是不是讲过啊 就挑转的时候给他附带了一些状态信息啊 全部在location里边

21:41.400 --> 21:43.640
他只有这么些东西 只有这四个属性可以用

21:44.520 --> 21:49.240
好 那比方说吧 我们这里呢 比方说访问这个地址啊 加个一个regs

21:50.840 --> 21:54.520
精确匹配这个地址 然后这个地址里边呢 我们给他加上一个哈希

21:55.160 --> 22:01.800
诶 注意啊 不是说你加了哈希 我们这里用了精确匹配 为什么要加上这个精确匹配 就是要说明一个道理

22:02.040 --> 22:05.640
就说我加了哈希过后呢 他仍然能够匹配到这个东西

22:05.960 --> 22:10.840
因为这里匹配的是什么 我们之前说过的啊 反复强调过这个匹配的是路径

22:11.320 --> 22:13.320
匹配的是路径 跟着什么哈希啊

22:14.040 --> 22:18.680
什么地址南参数啊 没有任何关系啊 你加哈希还是能匹配到他 因为他的路径是斜槓

22:19.320 --> 22:25.960
对吧 好 回车啊 你看一下 仍然访问到这个组件 然后你看一下这个location里边 是不是记录了哈希 对吧

22:26.600 --> 22:29.640
就这么个意思啊 就这么个意思 然后呢 这里pass name

22:29.880 --> 22:33.400
你看 设计没有 对吧 好 那么比方说 给他加上设计啊

22:33.960 --> 22:39.080
设计写到什么 去到哈希前边 一个温号开头啊 a等于e b等于2

22:39.960 --> 22:41.480
c的于c的于3

22:42.520 --> 22:46.600
刷新啊 你看一回说 你看我们得到的这个location

22:47.160 --> 22:56.440
你看他是不是把它分离出来了 他就做这么一件非常简单的事啊 把这个哈希分离出来 把路径分离出来 把这个设计分离出来啊 你要做什么操作你自己去做

22:57.320 --> 22:57.560
啊

22:58.600 --> 23:03.960
好 那么这里的操作呢 我们比方说吧 我们在这个组件里边要显示一些东西啊

23:04.600 --> 23:05.080
显示

23:05.800 --> 23:08.600
请求的地址啊 访问地址

23:09.560 --> 23:14.760
访问地址是啥呢 来自于probs.location什么 pass name

23:15.160 --> 23:20.360
这是你的访问地址 这个没问题吧 保存啊 你看访问地址是不是找到了

23:20.920 --> 23:26.520
好 有可能那我们还需要 因为我们很多时候都要从这里边去获取数据 对吧 从这里边去获取数据

23:26.840 --> 23:29.880
好 那么我们从这里边 比方说从哈希里边获取数据

23:30.520 --> 23:33.000
那比方说吧 我们的请求地址是这样子

23:33.960 --> 23:38.250
把这个复字过来啊 请求地址呢

23:39.130 --> 23:44.090
这是search啊 这是哈希 哈希里边比方说 我们给他写一个

23:45.610 --> 23:47.290
啊 d等于5

23:48.330 --> 23:48.650
啊

23:50.090 --> 23:55.770
df等于7啊 随便写个啊 随便下写个 就是哈希里边也有一些数据

23:56.090 --> 24:00.650
那么search也有一些数据 那么现在呢 他是用一个制服圈的形式给力的

24:01.210 --> 24:06.330
所以用起来很不方便 对吧 非常非常不方便啊 这样子用起来很不方便

24:07.130 --> 24:12.810
因为我们到时候呢 肯定要把这些数据分裂出来 比方说我们要查询一些学生 可能在地址的参数里边啊

24:13.290 --> 24:18.970
记录到这里的查询条件就记录到这儿 那么我们要把这个数据呢 要分裂出来 就很不方便这样子用起来

24:19.290 --> 24:20.010
那怎么办呢

24:21.050 --> 24:24.410
rexrouter还没有给你解决这个问题啊 他只是把这个数据

24:25.050 --> 24:27.850
变成制服圈给力 挨怎么操作怎么操作你自己去搞定

24:28.330 --> 24:34.250
那么这里呢 我们通常呢会用到一个第三方库啊 记录 记录啊

24:35.290 --> 24:39.770
通 我们通常 我们通常使用

24:40.730 --> 24:44.490
第三方库 这个库的名字叫做query stream

24:46.710 --> 24:47.670
一个第三方库

24:49.110 --> 24:53.430
用于解析地址栏中的数据

24:55.910 --> 24:58.150
因为他给我的是一个制服圈 太不方便了啊

24:58.870 --> 25:03.350
那么这个库的怎么来去安装呢 大家可以去npm看一下啊

25:05.030 --> 25:09.590
npm看一下 这里我们搜索一下啊 这个就是叫做query stream

25:09.830 --> 25:13.510
就是这个库 非常简单一个库啊 非常用起来非常非常简单

25:13.670 --> 25:17.750
就是这个库啊 安装的方式很简单 去安装就完事了啊 安装就完事了

25:17.910 --> 25:20.230
好 咱们先来安装一下啊 安装一下这个库

25:21.190 --> 25:24.790
这里我叫得停止了啊 停止

25:25.510 --> 25:31.670
啊 这里呢 我们12star 对不对 12add啊 叫做query stream

25:32.390 --> 25:37.300
安装一下 好 稍等一下啊

25:38.660 --> 25:41.700
啊 这个警告不用管啊 这个警告是我之前的一些包已经过期了

25:42.980 --> 25:46.820
一直没有没有没去弄它 嗯 稍微等一下啊

25:48.340 --> 25:51.620
安装好了过了 他告诉你啊 他告诉你怎么去用 非常非常简单

25:51.940 --> 25:57.140
这个库呢 他提供了一个啊 你可以通过啊 我们可以通过一个es6来导入吧

25:57.140 --> 26:03.620
他是用的common.s的模块化来导入的 无所谓吧 我们用那个es6来导入就行了啊 导入这个query stream

26:04.100 --> 26:09.060
啊 然后呢 我们只需要把一个制服刷传进去啊 只需要把一个制服刷传进去

26:09.220 --> 26:15.860
比方说像这种制服刷 对吧 传进去就完事了 他就会帮我们进行解析 解析成一个对象啊 就这么简单

26:16.900 --> 26:20.260
啊 你看 安装完了 安装完了 咱们启动起来

26:21.860 --> 26:28.260
好 到这边来啊 现在呢 我们要解析对吧 解析location里面的search 好 我们这里呢

26:29.460 --> 26:36.020
我把这个关掉啊 这里我们导入 导入什么呢 qs吗啊 from

26:37.220 --> 26:42.340
query stream啊 导入进展啊 这个名字 这个是个变量名字啊 就随便去

26:43.060 --> 26:45.860
好 这个里边不是他有一个这么一个东西啊 叫pose

26:46.820 --> 26:53.860
pose 就是解析 你给他传一个制服刷进来 他进行解析就完事了啊 就这么简单 没有什么特别的

26:54.340 --> 26:57.300
你给他传一个制服刷进来 我们刚才要解析哪个制服刷啊

27:00.180 --> 27:04.180
看一下啊 我们刚才要解析哪个制服刷 是不是解析这个啊

27:05.380 --> 27:12.660
把这个复制过去啊 我们数据在地址案里边 好 我们要从地址案里边去解析这个数据 对吧 解析这个数据

27:12.740 --> 27:15.860
ok 我们把这个设计这个变量的值传给他就完事了啊

27:17.780 --> 27:19.300
pose pose 什么呢 props

27:20.260 --> 27:22.100
点location点search

27:23.140 --> 27:25.620
啊 解析出来啊 这里呢 我得到一个什么

27:26.500 --> 27:31.780
呃query嘛 得到一个query对枪 输出啊query 你看一下解析完了结果 保存

27:33.220 --> 27:38.420
你要解出来的是不是一个对枪了 对不对 那这样子用起来是不是非常方便了啊 我就得到了这个

27:38.820 --> 27:41.380
数据你看 我们的数据里边是不是abc 对吧

27:41.940 --> 27:47.540
设计里边是不是有三个数据 哎 那么这三个数据的他解析成对象 用起来是不是很方便了 对吧

27:47.940 --> 27:53.540
哎 就这么简单啊 非常非常简单 这个有啥有啥好说的呢 没啥好说的啊 没啥好说的

27:54.180 --> 27:57.780
呃 另外呢 他除了解析那个就是设计之外呢 还可以解析哈嘻

27:58.900 --> 28:03.700
哈嘻也可以解析啊 比方说我们这里呢 呃 再来解析个哈嘻嘛啊

28:04.420 --> 28:06.740
哈嘻 qs pose

28:07.460 --> 28:10.660
probs location啊 那个叫哈嘻

28:12.100 --> 28:14.580
好 我们看一下 把哈嘻也解析出来

28:16.180 --> 28:16.580
保存

28:18.500 --> 28:24.660
啊 你看哈嘻是不是也解析出来了 对吧 就哈嘻你随便想 写他就写他 他解析的时候呢 是按照

28:25.300 --> 28:29.060
啊 他如果要解解析哈嘻的话 他是按照这种格式来解析的

28:30.180 --> 28:36.340
好 那么就解析出来了 就完事了 就完事了 就没啥好说的 好 那么这里呢 我们就是不是可以在组件里面去获取

28:36.340 --> 28:38.820
这些东西了啊 获取这些信息了啊 就是

28:40.500 --> 28:42.100
呃 什么 就是那个

28:44.740 --> 28:45.780
地址啊

28:47.300 --> 28:52.580
参数啊 地址参数 地址参数有哪些呢啊 a等于什么呢

28:53.460 --> 28:56.020
a等于什么呢 等于query 点 a

28:57.860 --> 28:58.820
b等于啥呢

28:59.620 --> 29:00.580
query 点 b

29:01.140 --> 29:04.820
对吧 我就可以用这种方式来获取了 c等于啥了query 点 c

29:05.620 --> 29:08.820
一般来说 组件的地址参数有哪些 一般都要约定好的啊

29:09.780 --> 29:15.940
好 这里呢 下面如果说哈嘻呢 哈嘻我们有哪些呢啊 对了 有哪些看一下哈嘻

29:16.500 --> 29:17.540
df啊

29:18.580 --> 29:21.860
d啊query 点 d啊 f了

29:22.420 --> 29:24.500
query 点 f

29:26.660 --> 29:29.300
好了 哎呀 就是哈嘻点 f啊

29:31.540 --> 29:34.660
老孙啊 你看一下 对吧 这些数据全部拿到了

29:35.620 --> 29:37.460
没什么好说的啊 就是location

29:37.460 --> 29:42.180
location 那个对象里面其实就是提供跟地址栏里面相关的一些数据啊

29:43.540 --> 29:44.420
好 这是关于这个

29:46.500 --> 29:47.220
最后一个

29:48.420 --> 29:49.540
关于的是march

29:50.580 --> 29:56.020
啊 march 你看啊 前面我们要挑转是不是要用它 对吧 要用它 它里面提供了一些方法

29:56.740 --> 30:00.580
我们要获取地址里面的相关信息是不是用location 对吧

30:01.380 --> 30:03.540
那么还有一个信息在march里面

30:04.100 --> 30:05.540
march里面提供了什么呢

30:07.140 --> 30:07.300
嗯

30:08.580 --> 30:11.140
该对象中保存了

30:12.180 --> 30:12.420
嗯

30:13.140 --> 30:15.860
路由匹配的相关信息

30:16.740 --> 30:22.020
就是说我们现在还差一个东西 就是路由匹配 匹配的时候你当时不是有不精确匹配吗

30:22.100 --> 30:28.580
对吧 还有精确匹配 那么当时呢路由这一个你访问到的这个主见 他当当前到底是不是精确匹配的

30:28.740 --> 30:33.300
还是说是不精确匹配的啊 那么这些匹配的信息呢 都在

30:33.620 --> 30:41.300
march这个对象里面啊 这是关于路由匹配的时候啊location区分开啊location是当前管理匹配的是啥

30:41.380 --> 30:47.140
反正我就把当前的地址的信息拿给你啊这是location 那么march他指的是匹配的时候

30:47.460 --> 30:52.660
他匹配的情况到底是什么样子的啊 是怎么来匹配的 他匹配情况是什么样子的

30:53.140 --> 30:55.620
所以说这是march里面保存的信息 他们一把

30:56.180 --> 30:58.020
复制一下啊来看一下这个march

30:59.060 --> 31:00.740
好 这里呢我们还是用这个主见

31:01.700 --> 31:03.620
我们这里输出了输出啥输出march

31:04.980 --> 31:06.260
好 这里呢我们主见啊

31:08.260 --> 31:14.900
好 还是匹配这个主见啊 好 保存看一下啊 就不需要这个第三方主 第三方库了 保存看一下

31:16.100 --> 31:18.740
点击右键 检查 好 那就输出

31:19.300 --> 31:25.380
刷新 你看输出了什么呢 输出了一些东西 对吧 一些东西 这些东西里边呢 我们来看一个

31:25.780 --> 31:29.780
一看一下 第一个属性呢 我们非常容易理解 叫做ease exact

31:30.260 --> 31:35.060
这个属性表示的一名是 是否是精确匹配的 就是你这个匹配

31:35.700 --> 31:40.660
匹配的方式是否是精确匹配的 那如果说我把这个一个rex去掉 你看一下啊

31:41.620 --> 31:45.620
注意看一下 为什么还是一个rex一直一个rex呢

31:46.980 --> 31:49.300
为什么还是一直rex呢 他是这样子

31:49.780 --> 31:56.340
他那个属性的值啊 跟这里写不写一个rex呢 没有直接的关系 他指的是什么意思呢

31:57.300 --> 31:59.780
这个属性ease一个rex

32:00.660 --> 32:05.620
啊 就是指的是事实上啊 就是事实上

32:06.740 --> 32:16.340
当前的路径和路由配置的路径是否是精确的匹配的

32:16.980 --> 32:22.660
啊 他指的不是说你这里写了一个rex 他就是true 你这里没有写就是force 不是这个意思啊

32:23.140 --> 32:24.420
比方说啊 我举个例子吧

32:25.460 --> 32:28.180
就是说如果说我们这里没有精确匹配

32:28.980 --> 32:30.100
那么你看一下这个地址

32:31.300 --> 32:33.540
我们看事实就行了啊 看最终的事实

32:34.100 --> 32:35.940
这个地址里面我们访问的路径是啥

32:36.820 --> 32:38.980
看一下这个地址 访问的路径是啥 是不是写钢

32:39.780 --> 32:42.580
那么这个路径跟这个地址是不是匹配的

32:43.620 --> 32:44.420
是不是精确匹配

32:45.220 --> 32:49.380
虽然说我们现在没有用精确匹配的方式 但是它最终的结果是不是精确的

32:49.620 --> 32:50.740
对吧 完全一致嘛

32:51.220 --> 32:57.140
所以说这个ex就表示的是完全匹配这个样的地址 是这么个意思啊

32:57.940 --> 33:01.300
那比方说我们鞋钢a 鞋钢b 鞋钢c

33:01.860 --> 33:03.460
这样子是不是也能匹配到a组件

33:03.780 --> 33:06.900
对吧 因为a组件现在没有精确匹配 它也能匹配到a组件

33:07.220 --> 33:10.260
但是我们现在看这个属性ex 是不是force

33:10.580 --> 33:15.540
对吧 因为我们现在的地址是鞋钢b 鞋钢c

33:15.940 --> 33:18.260
而我们的路径 配置的路径是鞋a

33:18.580 --> 33:19.700
那是不是没有精确匹配

33:20.340 --> 33:21.700
对不对 它就是force

33:21.940 --> 33:25.460
它是这么个意思啊 就是事实上目前的路径

33:26.020 --> 33:30.340
和那个我们配置的匹配路径是不是精确的

33:31.860 --> 33:32.740
这是这个属性

33:34.260 --> 33:35.380
好 下面再来

33:36.500 --> 33:38.500
好 下面这个属性是干嘛的呢

33:39.220 --> 33:42.580
应该说啊 这个属性呢 才是咱们浙杰克的重点

33:43.380 --> 33:44.500
这个东西叫parus

33:45.460 --> 33:47.140
这个属性呢 你看到它是一个对象

33:47.140 --> 33:49.140
而且这个对象里面啥东西都没有 对吧

33:49.460 --> 33:50.900
那么这个对象是怎么意思呢

33:51.220 --> 33:53.460
要讲清楚这个问题呢 我要说到

33:54.020 --> 33:55.460
要回到之前那个话题

33:55.940 --> 33:57.940
我们访问一个页面的时候

33:58.340 --> 34:00.900
如何向这个页面传递一些数据

34:01.620 --> 34:05.460
举个例子啊 比方说呢 我们这里呢 有这么一个组件

34:08.420 --> 34:10.660
呃 就这么一个组件吧

34:10.900 --> 34:12.900
这个组件A

34:13.300 --> 34:15.140
这个组件A呢 它又来做什么呢

34:16.100 --> 34:18.980
换个名字啊 换成news

34:21.930 --> 34:24.490
新闻啊 访问的地址呢 也是news

34:26.410 --> 34:28.890
news 这是个新闻 新闻组件

34:29.290 --> 34:32.010
这个组件里边要显示啊

34:32.730 --> 34:35.050
显示某年

34:36.170 --> 34:36.890
某月

34:38.650 --> 34:39.610
某年某月

34:40.090 --> 34:41.130
某日的新闻

34:43.210 --> 34:47.290
就是说 我这个组件呢 我是不知道显示哪年哪月哪日的新闻

34:47.530 --> 34:48.570
要传给我

34:49.290 --> 34:52.650
啊 我才能把这个 这一年这一月这一日的新闻传

34:53.130 --> 34:55.210
嗯 这一 这个新闻给你显示出来

34:55.930 --> 34:59.290
那么关键是 我们怎么来告诉他年月日呢

34:59.930 --> 35:03.290
你把它当成一个页面啊 虽然说它这个组件 因为在react里面

35:03.850 --> 35:06.650
页面本质上就是组件 就是一个最大的组件

35:07.450 --> 35:09.290
好 那么这里呢 我们组合来通过

35:10.250 --> 35:13.130
通过数据来告诉他哪 哪一年哪月哪一日呢

35:13.610 --> 35:14.890
这里有多种方式

35:15.450 --> 35:18.250
第一种方式呢 我们这里顺便记录一下啊

35:20.250 --> 35:20.570
呃

35:21.610 --> 35:23.050
顺便记录一下啊 就是像

35:23.930 --> 35:27.850
某个页面 传递数据的方式 有哪些

35:28.810 --> 35:34.170
第一种方式呢 是使用history 啊 使用state

35:34.730 --> 35:36.570
啊 就是在push的时候

35:37.290 --> 35:40.490
在push页面时啊

35:40.970 --> 35:45.850
或者是replace页面时啊 加入state 对吧 这样子我们刚才演示过了

35:45.850 --> 35:48.730
但是我们当时也说 这种方式呢 不是很好

35:48.730 --> 35:53.370
因为呢 这种 用这种方式呢 你是无法在地址里面呈现这些数据的

35:53.370 --> 35:55.210
当然有的时候呢 你可能为了

35:55.210 --> 35:59.130
也不说为了安全嘛 你就是不想把数据放到地址栏里面

35:59.130 --> 36:00.650
那你可以使用这种方式啊

36:00.650 --> 36:04.010
只不过呢 我们平时用的比较少而已

36:04.970 --> 36:08.650
好 这第一种方式 第二种方式呢 就是利用search

36:09.770 --> 36:15.850
就是把数据 把数据填写到啊 地址栏

36:16.570 --> 36:21.530
中的问号后 就是把在问号后边 对吧 我们刚才也演示过了

36:21.530 --> 36:33.460
就这种 就这种啊 是吧 数据放过来了 对不对

36:33.620 --> 36:36.660
放到search里边 我们当时还 刚才还演示了

36:36.660 --> 36:39.780
如何去获取这样的数据 对吧 这种方式

36:40.340 --> 36:48.740
第三种呢 是利用hash 是把数据填写到hash后边

36:49.540 --> 36:52.180
这种情况呢 就更少了 更少一点

36:52.180 --> 36:54.980
我们通常用的比较多的呢 是search

36:55.940 --> 37:00.740
好 除了search 用的比较多一点 还有一种情况也比较多

37:00.820 --> 37:04.020
什么情况呢 就是利用paras

37:04.020 --> 37:08.180
因为我真的不知道该怎么翻译了啊 我只能把它翻译成地址参数

37:09.060 --> 37:11.780
但是这个search呢 有的是也把它叫做地址参数

37:11.780 --> 37:14.980
啊 地址参数 所以说这里呢 我真的不知道该怎么翻译了

37:14.980 --> 37:17.380
我们就把它翻译成paras 就不翻译它

37:17.940 --> 37:21.860
那么它是什么意思呢 是把数据填写到

37:23.540 --> 37:26.100
填写到 就是路径中

37:27.060 --> 37:29.780
什么意思呢 我给大家举个例子 我们主要是对比这个

37:30.580 --> 37:33.540
对比这个和对比这个 因为这两个是最常见的

37:34.180 --> 37:35.940
好 再对比一下啊 比方说

37:37.140 --> 37:41.540
我们要传递 传递数据 访问这个页面

37:42.980 --> 37:48.500
访问这个页面的时候呢 我们要去传递什么数据呢 传递年一二

37:49.300 --> 37:51.700
等于 比较2019年

37:52.740 --> 37:55.300
好 月moss等于8月

37:56.740 --> 37:57.060
日

37:58.020 --> 37:59.860
对 等于6

38:00.340 --> 38:04.340
对吧 是不是把数据传过去了 那么那边是不是可以通过那个search来获取

38:04.580 --> 38:06.500
对吧 这个我们之前演示过 没什么好说的

38:07.380 --> 38:10.340
那么另外一种方式就是使用第四种 就是paras

38:10.980 --> 38:12.740
那么这种方式它是这样子来传递的

38:13.460 --> 38:16.420
它是不是用用什么search跟search没什么关系

38:16.980 --> 38:20.500
可不可以单设就可以 但是它这种方式呢 是跟search没关系的

38:20.900 --> 38:22.020
那么它是怎么传递的呢

38:22.740 --> 38:25.060
比方说举个例子啊 它有很多那种方式传递

38:25.380 --> 38:26.980
它是把这个数据放到地址里边

38:27.620 --> 38:28.660
比方说我们这样子去

38:31.540 --> 38:35.300
那你看一下 这两种方式 哪种方式看上去更加舒服一点

38:36.180 --> 38:40.500
是不是像下面那种方式 对吧 下面那种方式要看上去更加舒服一点

38:40.660 --> 38:40.980
对不对

38:41.780 --> 38:45.380
意思呢 它地址比较简洁 二次呢 没什么乱七八糟的符号

38:45.860 --> 38:48.260
三当我们通过这个地址 就一下子就看出来

38:48.260 --> 38:51.780
哦 我们什么意思 通过这个地址就看出来了 对吧 我们访问的是新闻

38:52.180 --> 38:54.260
哪一年 2019年8月6号的新闻

38:55.140 --> 38:56.820
对不对 啊 就非常非常清楚

38:57.220 --> 39:00.500
所以说呢 现在很多网站 越来越多的网站

39:01.060 --> 39:04.980
在某些在很多场景下边 它都会选择使用下面那种地址格式

39:05.860 --> 39:09.380
把数据的直接放到路径里面啊 就pass路径里面

39:09.380 --> 39:11.300
你看这些是不是pass路径里面的一部分

39:12.420 --> 39:13.780
那么现在就涉及到一个问题

39:15.140 --> 39:16.420
rexrouter

39:17.380 --> 39:21.300
它怎么知道这一个地方是连这个地方是月 这个地方是日

39:21.780 --> 39:24.020
它怎么把它把这个数据提取出来了

39:24.820 --> 39:29.140
那么就要说涉及到rexrouter里面一个指使啊

39:29.140 --> 39:32.340
就是说我们在写这个路径的时候了

39:33.220 --> 39:36.420
它实际上我们之前是直接写的一个字符串 对吧

39:36.740 --> 39:40.580
实际上它本来也是写字符串 只不过那个字符串呢它有点特殊

39:42.420 --> 39:46.740
实际上在肉册组件

39:48.420 --> 39:55.190
在书写肉册组件的pass数项是

39:57.990 --> 39:59.750
可以书写一个

40:00.390 --> 40:02.470
这东西我又不知道该怎么翻译的 叫做stream

40:03.190 --> 40:03.590
patter

40:04.470 --> 40:05.190
streampatter

40:05.750 --> 40:08.870
就勉强把它翻译一下吧 叫做字符串政则

40:09.990 --> 40:12.790
它有点像政则表达式 但是不是政则表达式

40:13.430 --> 40:16.630
它是一个叫做streampatter 它比政则表达式要简单的很多

40:16.950 --> 40:20.390
而且功能要少很多 所以说它就是把它叫做streampatter

40:20.630 --> 40:22.390
我们来看一下吧 看一下怎么用就行了

40:23.350 --> 40:27.190
比方说到这边啊 到这边 我们希望它能够匹配的地址呢

40:27.830 --> 40:29.030
它能够匹配这样的地址

40:30.150 --> 40:32.390
我们希望它能够匹配这样的地址

40:33.110 --> 40:34.470
于是呢 我们这里

40:35.110 --> 40:37.590
给它写的时候了 比方说我们希望它匹配这样的地址

40:37.830 --> 40:39.350
那这个地方是不是可以变化的

40:39.750 --> 40:43.270
对吧 我会也不知道这个地方是啥 它也有可能是2019 可能是2018

40:43.430 --> 40:45.030
这个地方是可以变化的 对不对

40:45.350 --> 40:48.310
好 那么这里可以变化的地方呢 我们给它写上这个东西

40:48.470 --> 40:51.430
一个冒号 这个东西不好做笔记啊 我们就用那个

40:51.670 --> 40:52.550
用地址来表述

40:53.030 --> 40:54.790
一个冒号 冒号后面写个单词

40:55.750 --> 40:56.790
将来一个是变量名

40:57.190 --> 41:00.230
一二 表示呢 这一部分呢 它是可以变的

41:00.950 --> 41:02.310
你想写啥写啥

41:02.550 --> 41:06.470
它到时候呢 就会把你这里具体地址里面 具体这个位置

41:06.630 --> 41:09.190
甜的数据替换掉

41:10.310 --> 41:12.470
就是它会把甜的数据呢

41:13.110 --> 41:15.590
把它当成一个纸 存到这个变量里面

41:16.230 --> 41:18.070
那么这里呢 我们就可以写上mouse

41:19.590 --> 41:21.030
这里呢就可以写上对

41:21.590 --> 41:22.470
好 我们看一下啊

41:23.030 --> 41:25.990
这个东西它不是一个地址啊 注意 它不是一个地址

41:26.230 --> 41:27.910
它指的是地址匹配规则

41:28.710 --> 41:30.790
我们之前呢 都是把这个地方当成地址 对吧

41:30.950 --> 41:32.710
那是因为我们之前讲的很简单

41:33.110 --> 41:35.830
那么现在呢 我们要知道这个地方呢 实际上写的是一个

41:36.390 --> 41:37.110
stream potter

41:37.830 --> 41:39.030
写的是一个重则表达式

41:39.190 --> 41:41.750
它要匹配规则 但是这个真的表达式

41:41.750 --> 41:42.950
跟我们平时真的表达式是不是

41:43.270 --> 41:44.550
感觉有点不一样 对不对

41:44.550 --> 41:45.190
有点不一样

41:45.430 --> 41:47.910
那么你可以认为这个地方呢 是一个分组命名

41:48.070 --> 41:49.750
一个分组命名的真的表达式

41:49.990 --> 41:50.710
你可以这样去想

41:50.870 --> 41:53.030
那么它可以匹配啥呢 它可以匹配这个

41:53.670 --> 41:54.390
比方说这里

41:56.790 --> 41:57.350
这样子

41:58.470 --> 41:59.430
这样子 这样子

41:59.590 --> 42:01.590
你看 这样子它能不能匹配 能匹配

42:02.230 --> 42:04.710
因为它认为地址规则是这样子的

42:04.950 --> 42:06.470
你前边一定是一个六式

42:07.030 --> 42:09.350
中间呢 它一定有这么一坨 管它是啥呢

42:09.510 --> 42:11.670
然后在后边又有一坨 后边又有一坨

42:12.070 --> 42:13.510
它一定是这样的地址格式

42:13.990 --> 42:16.870
如果你满足这样的地址格式 我不仅可以满足

42:17.350 --> 42:18.310
可以进行匹配

42:19.030 --> 42:20.390
我不仅可以匹配

42:20.790 --> 42:25.430
并且我会把匹配的结果放到一个对象排论室里面

42:25.830 --> 42:27.510
这个排论室里面包含什么信息呢

42:27.510 --> 42:28.310
就包含了Ear

42:29.030 --> 42:30.870
Ear对应到的 是不是对应到这

42:31.430 --> 42:31.830
对吧

42:32.150 --> 42:33.350
然后Mounts

42:36.390 --> 42:37.670
对应到哪 是不是对应到这

42:38.630 --> 42:39.110
对不对

42:39.430 --> 42:40.150
然后呢

42:40.390 --> 42:40.790
Date

42:41.190 --> 42:42.390
对应到哪 是不是对应到这

42:42.950 --> 42:43.270
对吧

42:43.430 --> 42:45.350
它会自动去完成这样的映射

42:46.070 --> 42:46.710
明白的意思吧

42:46.870 --> 42:49.030
你这里就相当于写的是个编辖名字

42:49.910 --> 42:52.310
好 咱们保存看一下

42:53.030 --> 42:54.310
那么现在我们访问

42:55.270 --> 42:56.150
写缸news

42:57.110 --> 42:58.470
你看现在是不是找不到页面 对吧

42:58.470 --> 42:59.990
因为你没有写这些东西 对吧

42:59.990 --> 43:01.110
这些东西你是没写的

43:01.110 --> 43:02.150
所以说现在找不到页面

43:02.790 --> 43:04.710
好 然后呢 我们这里写把写完吧

43:05.110 --> 43:06.630
这里写2019

43:07.270 --> 43:08.230
8月6号

43:09.030 --> 43:09.510
一回车

43:10.150 --> 43:12.150
好 那么现在呢 我们打印出来

43:12.150 --> 43:13.030
还没打印出来 对吧

43:15.190 --> 43:16.470
Props.march

43:17.830 --> 43:18.550
好 保存

43:19.510 --> 43:20.150
你看一下

43:21.350 --> 43:25.350
现在呢 我们这里Parrots是不是得到了

43:25.350 --> 43:27.510
day month year 是不是得到了

43:28.310 --> 43:29.190
对吧 是不是拿到了

43:29.590 --> 43:31.510
我们就可以把这个多硬的数据拿到了 对吧

43:31.910 --> 43:34.310
因此呢 我们这里是不是就可以显示说多少年

43:34.710 --> 43:35.190
来吧

43:35.510 --> 43:36.710
我们就可以拿到这个数据了

43:37.750 --> 43:39.670
Parrots year

43:40.310 --> 43:41.270
这个年

43:43.030 --> 43:44.070
然后Props

43:44.310 --> 43:47.110
Parrots month

43:47.350 --> 43:48.070
这个月

43:48.790 --> 43:50.950
然后Props

43:51.750 --> 43:53.190
Parrots day

43:53.750 --> 43:54.230
这一日

43:56.390 --> 43:57.110
哪里写错了吗

43:59.930 --> 44:00.650
还有一个march

44:00.650 --> 44:01.450
还有一个march

44:06.390 --> 44:08.070
当然你也可以在这里解构

44:08.070 --> 44:09.190
把解构成一个march

44:09.190 --> 44:10.630
解构出来只需要用到march

44:10.630 --> 44:11.270
当然随便你

44:11.270 --> 44:11.830
随便你

44:12.310 --> 44:12.710
保存

44:13.670 --> 44:14.150
你看一下

44:14.950 --> 44:15.750
为什么前面一个多了

44:17.910 --> 44:18.150
这里

44:18.710 --> 44:19.110
保存

44:19.990 --> 44:20.310
看一下

44:20.630 --> 44:21.910
是不是得到一个传递的数据了

44:21.910 --> 44:22.470
那么之后呢

44:22.470 --> 44:23.830
比方说我们拿到这个数据

44:23.830 --> 44:24.950
这里2016年

44:25.510 --> 44:27.110
你看这里是不是也跟了变了

44:27.510 --> 44:30.470
因此这个组建是不是可以非常轻松的拿到

44:31.430 --> 44:32.950
它不在地产参数里面

44:32.950 --> 44:34.470
它是在我们的路径里面

44:34.470 --> 44:35.910
拿到路径里面的数据

44:35.910 --> 44:37.270
就可以很轻松的拿到了

44:37.750 --> 44:38.710
拿到数据过后

44:38.710 --> 44:39.510
该做什么查询

44:39.510 --> 44:40.630
应该发通阿加克斯请求

44:40.630 --> 44:41.430
你自己去搞地

44:41.430 --> 44:42.070
我就不管了

44:43.510 --> 44:44.390
好 这关于这一块

44:45.670 --> 44:46.390
那么现在呢

44:46.390 --> 44:47.910
我们可以看到加上猫

44:47.910 --> 44:49.030
好知道什么意思的对吧

44:49.030 --> 44:50.310
就是给一个单词

44:50.470 --> 44:51.990
好像是一个变量一样

44:51.990 --> 44:53.430
对应到某一个部分

44:54.630 --> 44:56.710
那么我们是不是这个东西

44:56.710 --> 44:58.230
就一定要写鞋杠了

44:58.230 --> 44:59.030
那不一定

44:59.030 --> 44:59.830
不一定

44:59.830 --> 45:01.830
比方说我们可以这样子

45:01.830 --> 45:02.950
用一个横杠也可以

45:03.990 --> 45:04.710
用啥都可以

45:04.710 --> 45:05.350
这个

45:05.350 --> 45:05.990
用啥都可以

45:05.990 --> 45:08.630
看横杠一而横杠八是横杠对

45:08.630 --> 45:09.590
那看一下吧

45:09.590 --> 45:09.990
保存

45:10.630 --> 45:11.350
那现在匹配不到

45:11.350 --> 45:11.750
对吧

45:11.750 --> 45:13.430
那我们以后传递只要怎么传呢

45:13.430 --> 45:15.030
是不是横杠2016

45:15.030 --> 45:15.750
横杠8

45:15.750 --> 45:16.230
横杠6

45:17.110 --> 45:17.350
对吧

45:18.150 --> 45:18.870
就是你怎么

45:18.950 --> 45:20.470
用什么样的地址格式都可以

45:21.190 --> 45:22.390
这个猫号就表示的是

45:22.390 --> 45:23.430
像那个变量

45:23.430 --> 45:24.230
后面有一个变量

45:25.110 --> 45:25.670
这个变量呢

45:26.150 --> 45:27.190
它对应一个部分

45:27.190 --> 45:27.910
对应一个部分

45:28.950 --> 45:30.470
你可以认为它是政则吗

45:30.470 --> 45:32.390
它的匹配规则是

45:32.390 --> 45:33.990
首先得有一个鞋杠

45:33.990 --> 45:35.030
你的路径得有一个鞋杠

45:35.030 --> 45:36.150
这个没什么好说的

45:36.150 --> 45:37.990
然后呢有个什么六尺对吧

45:37.990 --> 45:38.630
有个六尺

45:39.190 --> 45:40.630
这个固定的字

45:40.630 --> 45:41.110
字

45:41.110 --> 45:42.710
然后呢有个横杠固定的

45:42.710 --> 45:44.230
然后后面呢写上一个东西

45:44.230 --> 45:45.430
我也不管你啥东西

45:45.990 --> 45:46.950
写上一个东西

45:46.950 --> 45:48.310
然后呢后面再一个横杠

45:48.870 --> 45:50.310
然后呢再写上个帽式

45:50.310 --> 45:51.430
然后再一个横杠

45:51.430 --> 45:53.110
然后再写上一个东西

45:53.110 --> 45:54.230
就这么个意思

45:54.870 --> 45:55.190
好吧

45:55.190 --> 45:56.390
这就匹配到这个东西了

45:57.750 --> 45:57.910
好

45:57.910 --> 45:58.870
我们再退回去啊

45:58.870 --> 45:59.430
退回去

46:00.310 --> 46:00.470
好

46:00.470 --> 46:01.270
这里也退回去

46:01.990 --> 46:02.230
好

46:02.230 --> 46:03.030
接下来我们来说一下

46:03.030 --> 46:05.350
它的一些具体的一些细节

46:05.350 --> 46:06.870
比方说呢有的时候呢

46:07.350 --> 46:08.550
我们认为呢

46:08.550 --> 46:10.390
这个年月日啊

46:11.190 --> 46:13.350
就是这里的年月日呢

46:13.350 --> 46:15.270
是可以不传递的

46:15.910 --> 46:17.270
是可以不传递的

46:17.350 --> 46:19.910
比方说他有可能在这个组件里面做了默认值

46:19.910 --> 46:20.310
对吧

46:20.310 --> 46:21.350
他拿不到这些数据呢

46:21.350 --> 46:22.390
他就使用默认值

46:22.390 --> 46:23.510
他可以不传递

46:24.230 --> 46:25.430
那么可以不传递的话

46:25.430 --> 46:26.230
该怎么来写呢

46:27.030 --> 46:28.470
其实非常简单

46:28.470 --> 46:30.310
跟那个政则是一样的

46:30.310 --> 46:31.750
就是这一部分呢

46:31.750 --> 46:32.870
你可以认为啊

46:32.870 --> 46:33.910
这一部分呢

46:33.910 --> 46:35.670
可以有可以没有

46:35.670 --> 46:37.190
你该加个温号就完成了

46:38.070 --> 46:39.030
这一部分呢

46:39.030 --> 46:40.550
可以有可以没有

46:40.550 --> 46:41.990
你该加个温号就完成了

46:41.990 --> 46:43.110
这一部分也是啊

46:43.110 --> 46:43.910
可以有可以没有

46:43.910 --> 46:44.790
加上温号就完成了

46:45.350 --> 46:46.950
那么这个东西就是可传

46:47.030 --> 46:47.510
可不传

46:48.150 --> 46:49.510
好保存咱们看一下吧

46:50.070 --> 46:50.550
看一下

46:51.030 --> 46:52.950
好那么现在的是8月6号的吧

46:52.950 --> 46:53.590
都传了的

46:53.590 --> 46:55.350
那么我们现在把这个钢6删掉

46:55.990 --> 46:57.910
你看一下是不是只得到年和月

46:58.310 --> 46:59.750
对不对只得到年和月

46:59.990 --> 47:00.870
好然后呢这里

47:01.750 --> 47:03.430
再去掉是不是得只得到年

47:04.870 --> 47:06.710
然后再去掉是不是年和月

47:07.110 --> 47:08.550
都没了对不对啊

47:08.550 --> 47:09.910
就是可传可不传

47:10.390 --> 47:11.510
非常简单对吧

47:11.510 --> 47:12.550
跟政则差不多

47:12.550 --> 47:13.590
好这就复制一个吧

47:15.430 --> 47:16.150
好再来啊

47:17.910 --> 47:19.270
那如果说有的时候呢

47:19.270 --> 47:20.470
我们还要对他进行限制

47:20.470 --> 47:21.670
比方说连这一块

47:22.630 --> 47:24.230
你不能是一个ABC啊

47:24.870 --> 47:25.750
约这一块不能是

47:25.750 --> 47:27.350
不能是乱七八糟的玩意对吧

47:28.070 --> 47:29.350
连约日呢

47:29.350 --> 47:31.270
他可能会进一步进行限制

47:31.270 --> 47:32.390
比方说必须都是数字

47:33.670 --> 47:34.950
比方说做这么一个限制

47:34.950 --> 47:36.150
必须都是数字

47:36.150 --> 47:37.190
那又怎么来限制呢

47:38.230 --> 47:40.550
这个地方呢其实也很简单

47:40.550 --> 47:41.510
李敖做的事情啊

47:41.510 --> 47:43.990
比方说我们现在把这个可选来去掉

47:44.550 --> 47:45.590
李敖做的事情就是

47:46.150 --> 47:47.510
在这个变量后面

47:47.510 --> 47:48.470
你把它那个变量吧

47:49.030 --> 47:50.070
后面加上个扩号

47:50.070 --> 47:52.550
来对他用政则表达式进行约束

47:52.550 --> 47:53.670
就这一个部分

47:53.670 --> 47:55.110
他应该满足什么样的条件

47:55.110 --> 47:56.630
这里直接写政则表达式就行了

47:57.190 --> 47:58.310
比方说我们这里呢

47:58.310 --> 47:59.590
必须是一个数字

47:59.590 --> 48:00.630
一个或多个数字

48:01.350 --> 48:02.070
好那么这里呢

48:02.630 --> 48:03.510
这里也加上

48:04.390 --> 48:04.710
加上

48:05.830 --> 48:06.630
必须是数字

48:07.270 --> 48:08.310
好保存啊

48:08.310 --> 48:09.430
保存咱们来看一下

48:10.710 --> 48:11.990
那么现在如果说我

48:11.990 --> 48:13.430
现在传数字当然没问题

48:13.430 --> 48:14.870
那如果说我传的不是数字呢

48:14.870 --> 48:16.150
你看一下是不是找不到页面了

48:16.710 --> 48:16.950
对吧

48:17.990 --> 48:20.230
尽管他格式好像看上去是一样的

48:20.230 --> 48:21.190
但是他体配不上

48:21.590 --> 48:22.790
他跟这东西匹配不上

48:22.790 --> 48:24.390
匹配不上他自然找不到页面

48:25.430 --> 48:26.070
没有这个意思吧

48:27.350 --> 48:28.950
所以说呢这个东西呢你可以

48:29.910 --> 48:31.190
通过这种方式来进行约束

48:31.190 --> 48:32.950
当然这里边可以写的东西多了

48:32.950 --> 48:33.670
政则表达式

48:34.710 --> 48:36.070
比较说什么字母啊

48:36.070 --> 48:36.550
还有什么

48:37.350 --> 48:38.950
空板呀之类的都可以写

48:38.950 --> 48:39.510
都可以写

48:39.510 --> 48:40.950
什么中扩号那种都可以写

48:42.230 --> 48:43.270
自行去发挥

48:43.270 --> 48:44.470
不过一般情况下呢

48:44.470 --> 48:45.510
我们的地址呢

48:45.510 --> 48:46.710
不会搞得太复杂

48:46.710 --> 48:48.150
地址搞那么复杂干嘛了

48:48.870 --> 48:50.870
我们往往会做的比较简单

48:50.870 --> 48:51.990
啊差不多就够用了

48:52.790 --> 48:53.590
好是这一块

48:53.590 --> 48:54.150
好

48:54.150 --> 48:54.870
然后另外一块呢

48:54.870 --> 48:55.510
我再说明一下

48:55.510 --> 48:57.030
我就把常用的说一下就行了

48:57.670 --> 48:58.950
然后还有一块就是说

48:58.950 --> 49:00.870
有可能的他还会遇到这种情况

49:02.070 --> 49:02.630
就是呢

49:02.630 --> 49:04.310
这个年月日后边呢

49:05.350 --> 49:07.910
比方说要跟上一个

49:10.870 --> 49:12.070
可能后边喊这个地址

49:12.070 --> 49:13.910
后边可能真的是不好举例的

49:13.910 --> 49:15.110
后边可能还有东西

49:15.830 --> 49:18.070
这个地址可能后边还有东西

49:18.070 --> 49:19.270
并且呢

49:19.270 --> 49:20.790
基于某种原因

49:20.790 --> 49:21.750
可能这个地

49:21.750 --> 49:23.350
这个地方呢还是精确匹配的

49:24.150 --> 49:25.350
还必须要精确匹配

49:25.990 --> 49:28.150
也就是说我想我想要干嘛了

49:28.150 --> 49:29.750
我想我想我想的是

49:30.390 --> 49:32.230
他不但要精确匹配

49:32.230 --> 49:34.150
而且他要能够匹配这样的地址

49:36.550 --> 49:37.990
他要能够匹配这样的地址

49:37.990 --> 49:39.030
比方说2019

49:40.390 --> 49:41.030
8月6号

49:41.990 --> 49:43.670
然后后边还有一个东西

49:43.670 --> 49:44.710
还有一个东西

49:44.790 --> 49:45.990
他要能够匹配这样的地址

49:45.990 --> 49:47.270
后边东西就说不准了

49:47.270 --> 49:48.550
他又可能是任何东西

49:48.550 --> 49:49.830
比方说翻页码

49:50.870 --> 49:51.350
页码

49:51.350 --> 49:52.390
比方说页码

49:52.390 --> 49:53.670
我也不知道是什么东西

49:53.670 --> 49:54.710
反正就说不准了

49:54.710 --> 49:56.230
他可能后边还有东西

49:57.510 --> 49:58.790
如果遇到这种情况

49:58.790 --> 50:00.710
那么我们可以用一个新号

50:00.710 --> 50:02.630
来代表任意制服

50:03.910 --> 50:05.190
我就想说这个东西

50:05.190 --> 50:06.710
用一个新号来代表任意制服

50:07.270 --> 50:07.750
保存

50:07.750 --> 50:08.790
你看一下

50:08.790 --> 50:10.310
那么现在呢

50:10.310 --> 50:11.590
当我们访问这个地址的时候

50:11.590 --> 50:12.870
他反而找不到页面了

50:12.870 --> 50:14.390
当我们访问这个地址的时候

50:15.110 --> 50:15.670
为什么呢

50:15.670 --> 50:17.830
因为他要求你后边还得有一段

50:17.830 --> 50:18.790
那一段是啥

50:18.790 --> 50:19.830
其实无所谓

50:19.830 --> 50:21.270
他说后边那一段是啥

50:21.270 --> 50:21.590
无所谓

50:21.590 --> 50:22.710
但是一定得有一段

50:23.430 --> 50:24.630
一定得有一段

50:24.630 --> 50:26.470
于是你后边得加上一段

50:26.470 --> 50:27.430
任意制服都可以

50:28.310 --> 50:29.110
是这么个意思

50:31.910 --> 50:33.510
这是关于这个匹配规则

50:34.630 --> 50:35.510
其实匹配规则里边

50:35.510 --> 50:37.030
还有很多很多的细节

50:37.670 --> 50:39.030
只不过平时我们开发

50:39.030 --> 50:40.390
都不怎么用得到

50:40.390 --> 50:43.110
我们后边会讲他的原理

50:43.270 --> 50:44.870
他到底是怎么去玩

50:44.870 --> 50:46.150
是这样的匹配的

50:46.150 --> 50:46.950
我们到时候呢

50:46.950 --> 50:48.230
会涉及到一个酷

50:48.230 --> 50:49.830
这个酷第三方酷

50:49.830 --> 50:50.550
叫做pass

50:51.510 --> 50:53.590
应该大家有可能会有听说过这个酷

50:54.230 --> 50:55.430
叫做rig

50:56.950 --> 50:58.070
应该叫这个名字吧

50:58.070 --> 50:59.030
应该没有记错

50:59.030 --> 50:59.590
我看

50:59.590 --> 50:59.910
说一下

51:00.710 --> 51:01.990
应该是没有记错

51:01.990 --> 51:02.710
是叫这个名字

51:03.270 --> 51:03.910
它实际上

51:03.910 --> 51:05.830
这个rxrota使用的是这个酷

51:08.150 --> 51:08.550
passed

51:09.110 --> 51:09.430
对

51:09.430 --> 51:11.990
这个rig expression

51:11.990 --> 51:12.550
就这个酷

51:13.430 --> 51:14.870
它实际上是利用这个酷

51:14.870 --> 51:16.390
来完成的功能

51:16.390 --> 51:17.350
怎么记一个笔记吧

51:17.830 --> 51:19.030
因为我们后边会讲

51:19.030 --> 51:19.830
这个酷的使用

51:20.790 --> 51:21.910
这是叫圆骂部分

51:21.910 --> 51:22.310
圆骂部分

51:22.310 --> 51:23.510
我们会讲一个酷的使用

51:23.510 --> 51:24.950
到时你就非常清楚它的

51:25.430 --> 51:26.150
匹配规则了

51:26.150 --> 51:27.430
所以我们这里简单介绍一下

51:27.430 --> 51:27.990
就行了

51:27.990 --> 51:28.950
我们目前呢

51:28.950 --> 51:29.510
就是说

51:29.510 --> 51:31.510
能够把这个功能做出来

51:31.510 --> 51:32.870
能够去使用它

51:32.870 --> 51:33.830
把它运行出来

51:33.830 --> 51:34.230
OK

51:34.230 --> 51:35.430
这里我们的目标达到了

51:36.070 --> 51:37.030
更多的东西呢

51:37.030 --> 51:37.830
更深的东西呢

51:37.830 --> 51:38.950
我们在圆骂部分来讲

51:38.950 --> 51:39.910
简单进行解析

51:40.550 --> 51:41.030
就是这个

51:41.750 --> 51:43.030
使用了react

51:44.790 --> 51:45.670
rotor

51:45.670 --> 51:47.830
使用了第三方酷

51:48.630 --> 51:49.270
什么酷呢

51:49.270 --> 51:49.590
就这个

51:50.230 --> 51:51.670
passed to rig expression

51:51.670 --> 51:53.830
实际上我们安装这个react rotor的时候

51:53.830 --> 51:55.270
实际上它已经把这个酷安装了

51:55.270 --> 51:55.670
你看一下

51:56.470 --> 51:57.430
我们收一下吧

51:57.430 --> 51:58.630
passed to

51:59.590 --> 52:00.630
你看是不是安装了

52:00.630 --> 52:01.110
对吧

52:01.110 --> 52:01.990
它已经安装好了

52:02.550 --> 52:03.590
因此我们可以利用

52:03.590 --> 52:05.430
它其实利用了这个酷的功能

52:06.150 --> 52:07.830
然后来帮我们做这个事

52:07.830 --> 52:09.190
这个酷有什么样的作用呢

52:10.150 --> 52:13.030
该酷的作用是

52:13.030 --> 52:15.990
将一个字符创正则

52:15.990 --> 52:16.950
就是这个东西

52:16.950 --> 52:19.110
就是我们写的pass里面这个东西

52:19.110 --> 52:20.550
转换成

52:20.550 --> 52:23.430
转换成一个真正的

52:23.430 --> 52:24.790
正则表达式

52:25.830 --> 52:27.670
它主要功能是这个

52:27.670 --> 52:28.950
把它转换成一个真正的

52:28.950 --> 52:29.830
真正的表达式

52:29.830 --> 52:31.030
然后再进行匹配

52:31.750 --> 52:33.270
好了这是关于这个

52:33.270 --> 52:33.830
因此呢

52:33.830 --> 52:35.590
我们这里呢就学习了什么

52:35.590 --> 52:36.870
这个params

52:36.870 --> 52:38.230
params是什么

52:38.470 --> 52:39.430
获取

52:40.390 --> 52:43.590
就是路径规则中

52:44.230 --> 52:46.790
对应的数据

52:48.860 --> 52:49.500
就是这个东西

52:49.500 --> 52:51.180
主要其实我们为了讲它

52:51.180 --> 52:53.340
才引出来了这个字符创正则

52:53.340 --> 52:55.660
有的时候也把它叫做pass

52:55.660 --> 52:56.620
parter

52:56.620 --> 52:57.820
就是路径正则

52:57.820 --> 52:59.660
反正都是差不多一个意思

53:00.300 --> 53:01.580
然后我这里说到这

53:01.580 --> 53:03.020
我就顺便想起一个事

53:03.020 --> 53:04.620
这个事也没有什么

53:04.620 --> 53:07.100
特别重大的含义

53:07.180 --> 53:08.060
就是说

53:08.060 --> 53:09.980
实际上这个pass这里呢

53:09.980 --> 53:11.660
它还允许你写数组

53:12.380 --> 53:13.820
我想到就把它说一下了

53:13.820 --> 53:15.820
因为这个东西实在是太少见了

53:17.340 --> 53:18.860
就说一下提一下就行了

53:18.860 --> 53:20.780
就这里边是可以写数组的

53:20.780 --> 53:21.980
是可以写数组的

53:21.980 --> 53:23.260
那么这里数组呢

53:23.260 --> 53:24.460
每一个数组的每一项

53:24.460 --> 53:25.980
就是一个政策规则

53:25.980 --> 53:27.420
每一项就是个政策规则

53:27.420 --> 53:29.260
比方说这里访问六四可以

53:29.260 --> 53:31.020
访问这个六四

53:31.020 --> 53:32.540
这个什么Ear

53:32.540 --> 53:34.700
Mounts

53:35.660 --> 53:36.700
什么

53:36.700 --> 53:38.140
对也可以

53:38.140 --> 53:39.980
访问这个

53:39.980 --> 53:41.580
写钢N也可以

53:41.580 --> 53:42.300
也可以

53:42.300 --> 53:44.540
这里就顺便说一下这个问题就行了

53:44.540 --> 53:45.420
保存

53:45.420 --> 53:46.220
好 这里

53:47.580 --> 53:49.100
在后面多了一圈

53:49.820 --> 53:51.020
这个没问题

53:51.020 --> 53:53.020
访问这个六四没问题

53:53.020 --> 53:54.460
访问这个N

53:54.460 --> 53:55.820
只是没数据

53:55.820 --> 53:57.100
访问这个N

54:00.860 --> 54:02.220
访问这个N也没问题

54:02.220 --> 54:03.580
只是没数据

54:04.300 --> 54:05.900
这是关于这一块

54:06.860 --> 54:08.700
另外一个

54:08.700 --> 54:10.860
就是下面它还有一些属性

54:10.860 --> 54:12.380
它不是对象里面还有属性吗

54:12.380 --> 54:14.380
还是个Pass和URL

54:14.380 --> 54:15.500
这两个是什么东西呢

54:15.500 --> 54:17.340
我给大家看一下也就知道什么东西了

54:17.340 --> 54:18.940
比方说我们这里访问六四

54:18.940 --> 54:19.900
2019

54:20.540 --> 54:23.340
你看一下这个Pass和URL是什么东西

54:23.340 --> 54:24.620
一看是不是就明白了

54:24.620 --> 54:26.300
这个Pass对应的是什么

54:26.300 --> 54:27.660
对应的是哪一个

54:27.660 --> 54:29.500
比方说它可能会写数组

54:29.500 --> 54:31.180
当然一般情况下不会写数组

54:31.180 --> 54:32.860
就是它如果写了数组

54:32.860 --> 54:34.300
不管你写不写数组吗

54:34.380 --> 54:38.300
总之你最终使用的是哪一个规则匹配上的

54:38.300 --> 54:40.300
用的是哪一个规则把它匹配上的

54:40.300 --> 54:42.300
那么你看这个Pass是不是规则

54:42.300 --> 54:43.580
对吧路径规则

54:43.580 --> 54:45.740
这个URL就是我们真正的路径

54:45.740 --> 54:46.700
真正的路径

54:46.700 --> 54:48.700
这个URL也没多少用

54:49.580 --> 54:51.100
OK 这就完了就没了

54:51.820 --> 54:53.900
这就是关于这一块

54:53.900 --> 54:56.780
关于这个Pass它的正载规则

54:58.060 --> 54:59.900
其他的还有啥呢

55:00.700 --> 55:02.060
没啥了

55:02.140 --> 55:03.820
因为我们这里就讲了这三个东西

55:03.820 --> 55:04.620
三个对象

55:04.620 --> 55:05.820
来总结一下

55:05.820 --> 55:07.660
History做什么

55:07.660 --> 55:08.620
是不挑转的

55:08.620 --> 55:09.980
做挑转用的

55:09.980 --> 55:11.500
Location做什么

55:11.500 --> 55:15.100
所以来获取当前UID籍里面的一些信息

55:15.100 --> 55:15.500
对吧

55:15.500 --> 55:16.940
来做这个用的

55:16.940 --> 55:20.780
好 然后March做什么用的

55:20.780 --> 55:22.540
来做就是路径规则里面

55:22.540 --> 55:24.060
哪匹配的数据

55:24.060 --> 55:25.500
匹配的相关信息

55:25.500 --> 55:26.940
获取这些信息用的

55:26.940 --> 55:28.140
就这三个对象

55:29.660 --> 55:31.580
有了这三个对象之后

55:32.300 --> 55:34.780
咱们就可以在组建里面

55:34.780 --> 55:38.460
利用这三个对象来获取路由的一些相关信息了

55:38.460 --> 55:40.860
因为我们的路由信息无非就在这三个对象里面

55:40.860 --> 55:43.020
但是我们最后说一点

55:43.020 --> 55:45.340
有的时候我们的组建

55:45.340 --> 55:47.260
因为我们现在这个组建里面

55:47.260 --> 55:49.020
之所以可以用这些东西

55:49.020 --> 55:51.820
是因为我们使用了RowTor组建

55:51.820 --> 55:53.260
这个RowTor组建

55:53.260 --> 55:54.380
它会把它的数据

55:54.380 --> 55:55.980
把这个上下文的数据

55:55.980 --> 55:57.580
注入到这个组建里面

55:57.580 --> 55:59.820
导致的这个组建里面

55:59.900 --> 56:02.140
它的数据里面就已经可以获取到什么

56:02.140 --> 56:03.260
History

56:03.260 --> 56:04.300
March

56:04.300 --> 56:05.100
还有什么

56:05.100 --> 56:07.340
还有这个Location可以获取到

56:07.340 --> 56:09.500
那如果说遇到这么一种情况

56:10.620 --> 56:12.940
我这里有个组建

56:12.940 --> 56:16.920
这个60里面一个组建

56:16.920 --> 56:17.880
看着

56:17.880 --> 56:19.720
我们这里呢就写简单一点

56:21.560 --> 56:23.080
这里就是60

56:23.080 --> 56:23.720
访问这个地址

56:27.190 --> 56:28.550
简单一点

56:28.550 --> 56:30.150
访问这个地址呢得到一个新闻

56:31.110 --> 56:32.150
这里呢

56:32.150 --> 56:32.950
H1

56:32.950 --> 56:33.670
新闻

56:34.950 --> 56:35.190
好

56:35.190 --> 56:36.870
那么现在还有一个组建

56:36.870 --> 56:37.430
放个信

56:37.430 --> 56:38.470
哎

56:38.470 --> 56:39.270
还有这么一个组建

56:40.630 --> 56:41.830
这个组建里边

56:43.110 --> 56:44.070
比方说

56:44.070 --> 56:45.910
我要在这个组建里边

56:45.910 --> 56:47.590
要用到什么March

56:47.590 --> 56:48.310
History

56:48.310 --> 56:49.270
这东西

56:50.150 --> 56:50.950
这是新闻列表

56:52.070 --> 56:53.030
新闻列表

56:53.030 --> 56:53.270
好

56:53.270 --> 56:55.190
这个组建里边提供一个按钮

56:57.190 --> 56:57.750
点击

56:58.950 --> 56:59.430
返回

57:00.230 --> 57:01.030
就回到首页

57:01.030 --> 57:01.750
回到首页

57:02.870 --> 57:03.030
好

57:03.030 --> 57:04.070
这里Unclick

57:05.510 --> 57:06.470
我要干嘛呢

57:06.470 --> 57:07.190
点击的时候

57:08.230 --> 57:09.830
我要找到History

57:09.830 --> 57:10.150
Push

57:11.350 --> 57:12.870
首页比方说我们用个写杠嘛

57:12.870 --> 57:13.510
表示首页

57:13.510 --> 57:15.030
但是我这里没有写首页

57:15.030 --> 57:15.590
没有写首页

57:15.590 --> 57:16.550
那边写一个吧

57:16.550 --> 57:17.750
写一个index

57:18.630 --> 57:18.950
首页

57:19.670 --> 57:20.470
Return

57:20.470 --> 57:21.190
SE

57:21.190 --> 57:21.590
首页

57:22.550 --> 57:23.190
比方说吧

57:23.190 --> 57:23.590
我们这里

57:26.460 --> 57:27.020
加个首页

57:27.660 --> 57:28.300
一个再一个字

57:29.660 --> 57:30.220
这里写杠

57:32.620 --> 57:33.020
好

57:33.660 --> 57:34.220
那现在呢

57:34.220 --> 57:35.100
我们比方说

57:35.100 --> 57:36.380
这个A这个组建呢

57:36.380 --> 57:38.300
要在新闻这个组建里边续使用

57:38.300 --> 57:39.820
这个是不是个很常见的功能

57:39.820 --> 57:40.300
对吧

57:40.300 --> 57:41.740
一个组建里面掏另外一个组建

57:42.300 --> 57:43.100
这就出问题了

57:43.820 --> 57:44.220
保存

57:44.220 --> 57:44.700
你看一下

57:45.260 --> 57:46.300
出什么问题呢

57:46.300 --> 57:47.420
我们点击返回的时候

57:47.420 --> 57:47.980
它爆错了

57:48.620 --> 57:49.420
它说呢

57:49.420 --> 57:51.100
根本就读不到什么Push

57:51.580 --> 57:52.460
这个方法

57:52.940 --> 57:54.540
它说这个History

57:54.540 --> 57:55.340
它是undefend

57:56.220 --> 57:58.220
那我们把这个打印出来看一下

57:58.220 --> 57:59.020
Props

57:59.020 --> 57:59.820
打印出来看一下

58:00.780 --> 58:02.060
是个空对象

58:02.060 --> 58:02.620
对吧

58:03.420 --> 58:05.420
也就是说我们这个安留这个组建

58:05.420 --> 58:06.780
这个A这个组建里边

58:06.780 --> 58:09.100
是拿不到这个这些属性的

58:09.100 --> 58:09.900
为什么呢

58:09.900 --> 58:11.340
因为我们这里可以拿到

58:11.340 --> 58:12.460
为什么这里可以拿到

58:12.460 --> 58:13.980
是因为它是放到哪儿的

58:13.980 --> 58:16.620
放到这个Rotor里边了

58:16.620 --> 58:18.060
这个Rotor这个组建

58:18.060 --> 58:19.340
在宣展它的时候了

58:19.340 --> 58:20.780
给它注入了这些属性

58:21.260 --> 58:22.700
但是我这个组建

58:22.700 --> 58:23.900
是放到60里边了

58:23.900 --> 58:25.420
它有没有注入这些属性

58:25.420 --> 58:25.980
没有

58:26.540 --> 58:28.220
因此这个组建是不是用不到

58:28.620 --> 58:30.540
没有办法使用这些属性了

58:30.540 --> 58:31.500
然后自然就没发

58:31.500 --> 58:32.780
完成这个跳转

58:32.780 --> 58:33.900
那这里怎么办呢

58:34.700 --> 58:35.820
有两种办法

58:36.380 --> 58:37.500
我们这里说一下这个问题

58:44.550 --> 58:45.110
说一下这个问题

58:45.750 --> 58:46.150
就是

58:49.030 --> 58:50.790
非路由

58:52.150 --> 58:54.950
非路由组建

58:54.950 --> 58:56.150
我们怎么来描述这个东西呢

58:56.150 --> 58:57.190
这个没有名字

58:57.190 --> 58:59.910
就是在放到路由里边的组建

58:59.910 --> 59:00.630
就是有些组建

59:00.630 --> 59:01.830
它不是放到路由里边的

59:02.630 --> 59:03.590
非路由组建

59:04.310 --> 59:06.230
获取路由信息

59:07.110 --> 59:08.870
就是某些组建

59:09.670 --> 59:13.590
并没有直接放到Rotor中

59:14.790 --> 59:19.670
而是千套在其他普通组建中

59:21.110 --> 59:23.830
因此它的Props中

59:24.630 --> 59:27.110
没有没有路由信息

59:27.990 --> 59:29.670
那么如果这些组建

59:30.310 --> 59:31.670
如果这些组建

59:32.550 --> 59:35.350
需要获取到路由信息

59:35.350 --> 59:36.950
比如说地址男的信息

59:36.950 --> 59:38.070
march的信息

59:38.070 --> 59:39.350
提出里面的一些方法

59:39.350 --> 59:41.110
需要获取到这些路由信息

59:41.590 --> 59:44.710
可以使用下面两种方式

59:45.510 --> 59:46.310
哪两种方式呢

59:46.310 --> 59:47.030
第一种方式

59:47.830 --> 59:49.430
将路由信息

59:49.990 --> 59:51.190
从副组建

59:52.070 --> 59:53.830
一层

59:54.550 --> 59:56.070
传递到指组建

59:57.110 --> 59:57.590
一看

59:57.590 --> 59:59.830
副组建里边就顶级的是页面

59:59.830 --> 01:00:00.150
对吧

01:00:00.150 --> 01:00:00.870
新闻页面

01:00:01.030 --> 01:00:02.470
页面里面是不是有这些属性

01:00:02.470 --> 01:00:02.950
对吧

01:00:02.950 --> 01:00:03.270
ok

01:00:03.270 --> 01:00:04.550
我把传递过来就完事了

01:00:05.030 --> 01:00:05.990
把传递过来就完事了

01:00:05.990 --> 01:00:06.870
比方说我们这里可以

01:00:07.830 --> 01:00:08.230
Props

01:00:08.710 --> 01:00:10.230
把这些传递过来是不是就完事了

01:00:10.790 --> 01:00:11.430
保存

01:00:11.430 --> 01:00:11.910
你看一下

01:00:13.030 --> 01:00:13.670
点击盘回

01:00:13.670 --> 01:00:14.310
是不是就有了

01:00:14.630 --> 01:00:14.950
对不对

01:00:15.590 --> 01:00:17.670
把属性依次传递过来就行了

01:00:17.670 --> 01:00:18.470
这是这种方式

01:00:19.030 --> 01:00:19.830
但这种方式

01:00:19.830 --> 01:00:22.150
如果说千套的结构比较浅

01:00:22.390 --> 01:00:23.110
还没事

01:00:23.110 --> 01:00:24.550
如果说千套的结构比较深

01:00:24.550 --> 01:00:25.510
A里面有B

01:00:25.510 --> 01:00:26.150
B里面有C

01:00:26.150 --> 01:00:26.870
C里面有D

01:00:26.870 --> 01:00:27.430
一直到Z

01:00:28.150 --> 01:00:30.310
Z这个组建要使用路由信息

01:00:30.390 --> 01:00:31.750
那是不是要传递很多很多

01:00:32.150 --> 01:00:32.630
对不对

01:00:33.030 --> 01:00:35.670
于是我们也可以使用第二种方式

01:00:36.150 --> 01:00:37.510
第二种方式是什么呢

01:00:38.230 --> 01:00:38.790
看着

01:00:38.950 --> 01:00:39.670
第二种方式

01:00:41.430 --> 01:00:41.830
比起

01:00:42.310 --> 01:00:43.110
第二种方式

01:00:43.830 --> 01:00:45.670
使用React

01:00:45.670 --> 01:00:46.390
Rotor

01:00:46.950 --> 01:00:49.190
提供的高阶组建

01:00:49.750 --> 01:00:51.030
这个组建的名字叫做Waze

01:00:51.030 --> 01:00:52.630
你看高阶组建都是用Waze开头的

01:00:53.110 --> 01:00:54.070
Waze Rotor

01:00:55.510 --> 01:00:56.230
包装

01:00:57.510 --> 01:00:58.870
要使用的组建

01:01:00.390 --> 01:01:01.670
该高阶组建

01:01:04.280 --> 01:01:07.880
会返回一个新组建

01:01:08.360 --> 01:01:10.280
新组建中

01:01:11.320 --> 01:01:18.600
新组建将向提供的组建注入路由信息

01:01:18.920 --> 01:01:20.120
说那么长一长串

01:01:20.120 --> 01:01:21.800
我们以前也做过高阶组建的

01:01:22.280 --> 01:01:24.840
那么高阶组建是不是可以增加一些功能

01:01:24.840 --> 01:01:25.240
对吧

01:01:25.480 --> 01:01:27.480
我们之前做过什么打印日字啊

01:01:27.800 --> 01:01:28.920
还有什么生命中期函数啊

01:01:28.920 --> 01:01:30.120
那些Waze Rotor玩意儿对吧

01:01:30.280 --> 01:01:31.240
做过一些高阶组建

01:01:31.320 --> 01:01:32.520
现在我们可以用同样的方式

01:01:33.080 --> 01:01:35.080
比方说这个A不是要用这些属性吗

01:01:37.640 --> 01:01:39.160
这个A底不是要用这些属性吗

01:01:40.200 --> 01:01:41.720
OK 我现在这样子

01:01:42.280 --> 01:01:44.280
我把这个A给你包装一下

01:01:44.600 --> 01:01:45.560
给你包装一下

01:01:45.960 --> 01:01:46.600
怎么包装呢

01:01:46.600 --> 01:01:47.240
我们这样子

01:01:52.440 --> 01:01:53.000
等于什么

01:01:53.000 --> 01:01:55.000
Waze Rotor

01:01:55.000 --> 01:01:56.040
这要导入进来

01:01:57.000 --> 01:01:57.960
Waze Rotor

01:01:58.600 --> 01:02:00.440
使用的高阶组建给你包装一下

01:02:00.680 --> 01:02:01.560
把这个A组建

01:02:02.680 --> 01:02:04.040
这个A组建给你包装一下

01:02:04.040 --> 01:02:04.840
我重新复制

01:02:04.840 --> 01:02:05.560
换一个名字嘛

01:02:05.560 --> 01:02:06.280
换一个名字

01:02:07.480 --> 01:02:08.600
A Viper

01:02:11.160 --> 01:02:11.960
换一个名字

01:02:11.960 --> 01:02:12.520
那么这里呢

01:02:12.520 --> 01:02:13.880
我使用这个新的组建就行了

01:02:14.520 --> 01:02:15.560
这样子包装一下

01:02:15.560 --> 01:02:17.800
包装一下它反回的这个新组建里边

01:02:18.040 --> 01:02:20.040
它本身就会给你往这个A里边

01:02:20.040 --> 01:02:21.400
它最终会显示A

01:02:21.400 --> 01:02:22.360
那么最终呢

01:02:22.360 --> 01:02:24.600
它就会往这个A里边去注入这个些属性

01:02:25.320 --> 01:02:26.360
对吧 就完成了

01:02:26.360 --> 01:02:28.520
它使用高阶组建可以完成这样的功能

01:02:29.480 --> 01:02:31.720
你可以想象到这个高阶组建是怎么写的

01:02:31.720 --> 01:02:32.920
在高阶组建里边

01:02:32.920 --> 01:02:34.760
它肯定是反回了一个什么

01:02:34.760 --> 01:02:36.440
反回了一个组建对吧

01:02:36.440 --> 01:02:37.080
然后呢

01:02:38.360 --> 01:02:39.160
在高阶组建里边

01:02:39.160 --> 01:02:40.280
它肯定是这样子

01:02:40.280 --> 01:02:41.240
它反回了一个组建

01:02:41.240 --> 01:02:42.200
那个组建在渲染的时候

01:02:42.200 --> 01:02:42.760
渲染的是啥

01:02:42.760 --> 01:02:43.640
渲染的就是A

01:02:43.640 --> 01:02:44.200
只不过呢

01:02:44.200 --> 01:02:45.000
它那个组建呢

01:02:45.000 --> 01:02:46.200
从商项文里边

01:02:46.200 --> 01:02:47.640
因为它是自己的函数嘛

01:02:47.640 --> 01:02:48.280
我们说说

01:02:48.280 --> 01:02:49.800
虽然说我们获取不到这个商项文

01:02:49.800 --> 01:02:50.680
但它可以获取

01:02:51.400 --> 01:02:52.680
它从商项文里边

01:02:52.680 --> 01:02:54.600
能够把这些数据获取到

01:02:54.600 --> 01:02:55.400
把这个数据呢

01:02:55.480 --> 01:02:56.280
从商项文里边

01:02:56.280 --> 01:02:57.960
给它传递给这A组建了

01:02:57.960 --> 01:02:59.080
所以说A组建也有了

01:03:00.280 --> 01:03:02.600
你不要说我自己随便写一个吧

01:03:02.600 --> 01:03:03.240
写一个吧

01:03:03.240 --> 01:03:04.920
方向形VisRotor

01:03:04.920 --> 01:03:06.120
比方说写一个吧

01:03:06.120 --> 01:03:07.160
传一个抗补进来

01:03:08.520 --> 01:03:09.800
反回的是一个啥呢

01:03:09.800 --> 01:03:12.040
比方说我们反回的是一个方向形

01:03:12.040 --> 01:03:12.680
一个内组

01:03:12.680 --> 01:03:14.120
一个组建

01:03:14.120 --> 01:03:17.640
叫做RotorWiper

01:03:19.000 --> 01:03:19.880
反回这么一个组建

01:03:20.680 --> 01:03:21.960
这个组建呢

01:03:21.960 --> 01:03:22.920
它有自己的Props

01:03:25.830 --> 01:03:26.230
Props

01:03:27.830 --> 01:03:29.190
然后在这个组建里边

01:03:29.190 --> 01:03:30.230
我们是不是

01:03:30.230 --> 01:03:31.670
因为它是内部的函数

01:03:31.670 --> 01:03:33.350
是RotorRotor内部的函数

01:03:33.350 --> 01:03:35.030
所以说它可以获取到商项文

01:03:35.750 --> 01:03:40.630
获取商项文中的数据的信息

01:03:41.430 --> 01:03:42.790
三个对象都获取到

01:03:42.790 --> 01:03:44.630
然后我们这里宣展啥

01:03:44.630 --> 01:03:46.470
是不是就直接宣展A就完事了

01:03:46.470 --> 01:03:47.110
对不对

01:03:47.110 --> 01:03:49.350
宣展这个Comp组建就完事了

01:03:49.910 --> 01:03:50.950
宣展它就完事了

01:03:51.030 --> 01:03:52.230
宣展它的时候

01:03:54.230 --> 01:03:56.630
把我的属相给力

01:03:56.630 --> 01:03:58.390
就传给我的属相给力

01:03:58.390 --> 01:03:59.750
然后再把什么

01:03:59.750 --> 01:04:00.870
再把什么

01:04:00.870 --> 01:04:03.990
history等于商项文中

01:04:03.990 --> 01:04:06.230
商项文中的history对吧

01:04:06.230 --> 01:04:07.510
关键是它可以获取商项文

01:04:07.510 --> 01:04:08.630
所以说它可以传递过去

01:04:09.270 --> 01:04:10.630
因此你这个组建

01:04:10.630 --> 01:04:12.950
传络的组建是不是就可以用这些属性了

01:04:12.950 --> 01:04:13.750
就这么个意思

01:04:15.830 --> 01:04:17.190
这是WisRotor

01:04:17.750 --> 01:04:18.790
保存你看一下

01:04:18.870 --> 01:04:21.190
那现在你看是不是可以获取到了

01:04:21.190 --> 01:04:21.830
对不对

01:04:22.710 --> 01:04:23.510
点击返回

01:04:23.910 --> 01:04:24.710
是不是没问题

01:04:25.110 --> 01:04:25.670
对不对

01:04:25.990 --> 01:04:26.790
OK

01:04:26.790 --> 01:04:29.830
这是关于这个这种方式

01:04:30.630 --> 01:04:31.030
OK

01:04:31.030 --> 01:04:32.310
那咱们这一会就讲完了

01:04:32.710 --> 01:04:34.550
主要就讲了这三个对象

01:04:35.110 --> 01:04:36.710
你要做到这三个对象干嘛用的

01:04:36.710 --> 01:04:38.630
再来一次history做什么呢

01:04:39.190 --> 01:04:39.830
跳转的

01:04:40.310 --> 01:04:41.350
nok信做什么呢

01:04:41.350 --> 01:04:42.710
获取地址信息的

01:04:43.030 --> 01:04:43.990
march做什么呢

01:04:43.990 --> 01:04:47.110
获取跟规则相匹配的信息的

01:04:47.910 --> 01:04:49.670
有了这些东西之后

01:04:49.670 --> 01:04:52.150
我们下节课又来完善一下

01:04:52.150 --> 01:04:55.430
我们之前的后台管理页面

01:04:55.910 --> 01:04:56.310
好吧

01:04:56.710 --> 01:04:57.110
OK

01:04:57.110 --> 01:04:57.750
这就可以到这了

