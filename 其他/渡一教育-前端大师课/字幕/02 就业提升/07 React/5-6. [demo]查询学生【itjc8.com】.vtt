WEBVTT

00:00.750 --> 00:04.750
这些课呢咱们把那个做个小demo

00:04.750 --> 00:08.750
就接着那个学生管理系统来做

00:08.750 --> 00:11.750
这个系统呢我肯定是不会把它的功能全部实现完啊

00:11.750 --> 00:14.750
就是说我讲到哪了做到哪

00:14.750 --> 00:17.750
这些课呢咱们来做这个学生列表

00:17.750 --> 00:21.750
这个学生列表页呢它要能够查询学生

00:21.750 --> 00:25.750
还要能够分业用一个表格来显示学生数据

00:25.750 --> 00:27.750
要做这么一件事

00:28.750 --> 00:30.750
这里面呢由于它设计到查询

00:30.750 --> 00:33.750
所以说呢我们先不去考虑那么多

00:33.750 --> 00:35.750
我们先把这个接口写好

00:35.750 --> 00:38.750
我们就不知之前我们在这个services里边

00:38.750 --> 00:40.750
有个students这样介绍对吧

00:40.750 --> 00:42.750
它里面有获得所有学生

00:42.750 --> 00:45.750
有分业来获得学生

00:45.750 --> 00:47.750
然后呢我们现在再加一个方法

00:47.750 --> 00:49.750
就是查询学生

00:49.750 --> 00:52.750
我们先把这个数据接口写好啊写好了之后呢

00:52.750 --> 00:54.750
咱们再来说设想的事情

00:55.750 --> 00:58.750
我们首先看一下我们的API文档啊

00:58.750 --> 01:00.750
这个API文档里边呢

01:00.750 --> 01:02.750
我大概看了一下

01:02.750 --> 01:04.750
它这里呢有一个按业来查询学生

01:04.750 --> 01:06.750
我们之前是做过的

01:06.750 --> 01:11.750
然后下边呢有一个按关键字来查询学生

01:11.750 --> 01:14.750
这里呢我给大家说一下

01:14.750 --> 01:16.750
实际上在你们以后在公司里边呢

01:16.750 --> 01:19.750
如果说遇到了这就是API接口的话

01:19.750 --> 01:22.750
通常情况下分业呢跟查询呢

01:22.750 --> 01:24.750
它往往是一个接口啊

01:24.750 --> 01:26.750
它不太会把它分成两个接口

01:26.750 --> 01:29.750
当然有可能它把它分成两个接口啊

01:29.750 --> 01:31.750
就像这里有可能把它分成两个接口

01:31.750 --> 01:33.750
但一般情况下呢是把它分成一个接口的

01:33.750 --> 01:35.750
所以说我们这里呢

01:35.750 --> 01:38.750
用这个函数把它自己自我自己把整合一下吧

01:38.750 --> 01:40.750
自己整合一下

01:40.750 --> 01:42.750
因为你想到查询嘛

01:42.750 --> 01:44.750
查询的时候有些条件比方说这个

01:44.750 --> 01:46.750
关键字你可以不写

01:46.750 --> 01:48.750
不写的话就是查询所有对吧

01:48.750 --> 01:50.750
这个性别呢你可以不

01:50.750 --> 01:52.750
到这里决定的性别填负一

01:52.750 --> 01:54.750
负一的话就是查询

01:54.750 --> 01:56.750
同时查询男和女

01:56.750 --> 01:58.750
所以说这个条件呢

01:58.750 --> 02:00.750
其实如果你不给条件就是一个

02:00.750 --> 02:02.750
普通的分业查询对吧

02:02.750 --> 02:03.750
所以说一般情况下啊

02:03.750 --> 02:05.750
它这两个接口呢会合并成一个

02:05.750 --> 02:06.750
不管吧

02:06.750 --> 02:07.750
我们它这里是两个

02:07.750 --> 02:09.750
我们就按两个来做

02:09.750 --> 02:11.750
好这里呢我们给它写上这么一个函数啊

02:11.750 --> 02:13.750
我们通过一个函数来进行整合一下

02:13.750 --> 02:15.750
先把这个函数写好先不管其他的

02:15.750 --> 02:17.750
给它取个名字

02:17.750 --> 02:19.750
就叫做

02:19.750 --> 02:21.750
search student

02:21.750 --> 02:23.750
实际上有了这个函数之后呢

02:23.750 --> 02:25.750
其实上面这个函数就没有

02:25.750 --> 02:27.750
多少的实际意义了

02:27.750 --> 02:29.750
就没多少的实际意义了

02:29.750 --> 02:31.750
无所谓嘛放这儿吧

02:31.750 --> 02:33.750
然后呢你要查询学生

02:33.750 --> 02:35.750
是不是要给我一些信息啊

02:35.750 --> 02:37.750
你要给我哪些信息呢

02:37.750 --> 02:39.750
你要给我什么

02:39.750 --> 02:41.750
那个性别你查询的性别

02:41.750 --> 02:43.750
你查询的关键字

02:43.750 --> 02:45.750
你要查询的第几页

02:45.750 --> 02:47.750
每页显示多少条对吧

02:47.750 --> 02:49.750
你把这些信息给我

02:49.750 --> 02:51.750
好那么这些信息呢我们可以认为

02:51.750 --> 02:53.750
它是可以通过一个对象来传进来的

02:53.750 --> 02:55.750
可以通过一个对象来传进来

02:55.750 --> 02:57.750
好这里呢我们就把它解构

02:57.750 --> 02:59.750
解构这个对象

02:59.750 --> 03:01.750
这个对象里面把解构出来解构出来

03:01.750 --> 03:03.750
就是一个配截

03:03.750 --> 03:05.750
一个namex啊我们规定

03:05.750 --> 03:07.750
字型规定它的参数呢有这么一些参数

03:07.750 --> 03:09.750
还有什么key关键字

03:09.750 --> 03:11.750
还有什么呢还有sex表示性别

03:11.750 --> 03:13.750
我们字型约定

03:13.750 --> 03:15.750
这种一些东西我们把它解构

03:15.750 --> 03:17.750
解构

03:17.750 --> 03:19.750
好传过来了之后呢咱们这里

03:19.750 --> 03:21.750
当然你可以给它

03:21.750 --> 03:23.750
可不可以给它默认值

03:23.750 --> 03:25.750
当然可以给它默认值

03:25.750 --> 03:27.750
来吧咱们就给它一些默认值嘛

03:27.750 --> 03:29.750
配截能默认为1嘛

03:29.750 --> 03:31.750
namex能默认为10嘛

03:31.750 --> 03:33.750
key能默认为空

03:33.750 --> 03:35.750
表示没有查询关键字

03:35.750 --> 03:37.750
sex能默认为-1

03:37.750 --> 03:39.750
默认为-1

03:39.750 --> 03:41.750
就解构的时候给它一些默认值嘛

03:41.750 --> 03:43.750
负一表示

03:43.750 --> 03:45.750
男女都查

03:45.750 --> 03:47.750
都进行查询

03:47.750 --> 03:49.750
然后呢这里呢整个参数呢

03:49.750 --> 03:51.750
我也给它一个默认值嘛

03:51.750 --> 03:53.750
就是说如果你一个参数

03:53.750 --> 03:55.750
连参数都不传递的话

03:55.750 --> 03:57.750
就是说如果你传了对象

03:57.750 --> 03:59.750
传了对象里边没有这些属性呢

03:59.750 --> 04:01.750
这些属性是有默认值的

04:01.750 --> 04:03.750
如果说你连对象都没有传递

04:03.750 --> 04:05.750
那么我给它这个参数一个默认值

04:05.750 --> 04:07.750
就是一个普通对象一个空对象

04:07.750 --> 04:09.750
好吧咱们把这个写好啊参数写好

04:09.750 --> 04:11.750
之后呢我们这里

04:11.750 --> 04:13.750
直接去访问地址

04:13.750 --> 04:15.750
直接来费起

04:15.750 --> 04:17.750
费起

04:17.750 --> 04:19.750
看着啊咱们呢这里呢

04:19.750 --> 04:21.750
请求地址呢我看一下

04:21.750 --> 04:23.750
如果是查询的话请求的是这个地址

04:23.750 --> 04:25.750
对吧请求的是这个地址

04:25.750 --> 04:27.750
我们这里

04:27.750 --> 04:29.750
再前过来

04:29.750 --> 04:31.750
这个东西肯定要传

04:31.750 --> 04:33.750
配级呢要传配级

04:33.750 --> 04:35.750
还有什么size呢要传limit

04:35.750 --> 04:37.750
然后并且呢还有什么

04:37.750 --> 04:39.750
他有这么一个参数他要传递什么

04:39.750 --> 04:41.750
传递这个key

04:41.750 --> 04:43.750
还有什么呢还有那个

04:43.750 --> 04:45.750
6要传递什么

04:45.750 --> 04:47.750
要传递6

04:47.750 --> 04:49.750
要传递这个

04:49.750 --> 04:51.750
咱们把这个写好啊然后返回

04:51.750 --> 04:53.750
好我们来看一下啊

04:53.750 --> 04:55.750
这个函数肯定要优化一下啊

04:55.750 --> 04:57.750
一会肯定要优化一下

04:57.750 --> 04:59.750
好保存啊我们在index里边去雕用这个函数

04:59.750 --> 05:01.750
试一下

05:01.750 --> 05:03.750
先测试一下这个函数

05:03.750 --> 05:05.750
from

05:05.750 --> 05:07.750
services

05:07.750 --> 05:09.750
students

05:09.750 --> 05:11.750
这里呢我们得到什么surge students

05:11.750 --> 05:13.750
好来吧试一下啊

05:13.750 --> 05:15.750
surge students

05:15.750 --> 05:17.750
比方说我这里呢啥都不给他传递

05:17.750 --> 05:19.750
然后

05:19.750 --> 05:21.750
resp

05:21.750 --> 05:23.750
我们这里直接输出啊

05:23.750 --> 05:25.750
输出这个响应结果

05:25.750 --> 05:27.750
好保存看一下啊

05:27.750 --> 05:29.750
这里点击右键

05:29.750 --> 05:31.750
检查

05:31.750 --> 05:33.750
好通常

05:33.750 --> 05:35.750
他这里报什么错

05:35.750 --> 05:37.750
哦我明白了

05:37.750 --> 05:39.750
这里是这个问题

05:39.750 --> 05:41.750
这是组件里边的问题啊这是

05:41.750 --> 05:43.750
我们之前那个做那个demo的时候呢

05:43.750 --> 05:45.750
一流的问题当时没发现啊没发现

05:45.750 --> 05:47.750
那我这里把解决一下啊那什么问题呢

05:47.750 --> 05:49.750
就是我们之前写页面的时候呢写了

05:49.750 --> 05:51.750
这个admin.js对吧写了这个页面

05:51.750 --> 05:53.750
后台管理页

05:53.750 --> 05:55.750
后台管理页里边呢还有根据不同的路由

05:55.750 --> 05:57.750
不同不同的地址呢

05:57.750 --> 05:59.750
匹配到不同的组件当时我们是这样子写的

05:59.750 --> 06:01.750
当时呢我们是这样子的

06:01.750 --> 06:03.750
在layout里边呢

06:03.750 --> 06:05.750
这是一个我们自己写的组件对吧

06:05.750 --> 06:07.750
它在component里边

06:07.750 --> 06:09.750
这是layout我们自己写的组件

06:09.750 --> 06:11.750
这个组件呢它有一个约束

06:11.750 --> 06:13.750
它说chill准这个属性呢

06:13.750 --> 06:15.750
它必须是一个元素

06:15.750 --> 06:17.750
react元素

06:17.750 --> 06:19.750
但是我跟它传的是一个元素吗

06:19.750 --> 06:21.750
跟它传的实际上不是一个元素

06:21.750 --> 06:23.750
我们跟它传的是一系列元素

06:23.750 --> 06:25.750
相当于跟它传了一个数组进去

06:25.750 --> 06:27.750
你看这个是吧

06:27.750 --> 06:29.750
相当于跟它传了一个数组进去

06:29.750 --> 06:31.750
是这个错误

06:31.750 --> 06:33.750
它不满足内行约束

06:33.750 --> 06:35.750
它说无销的属向chill准

06:35.750 --> 06:37.750
它说我给力的是什么

06:37.750 --> 06:39.750
一个数组

06:39.750 --> 06:41.750
你看一下这里给的是不是一个数组

06:41.750 --> 06:43.750
对吧一个元素的数组

06:43.750 --> 06:45.750
对不对我们之前说节点

06:45.750 --> 06:47.750
节点它可以是一个数组节点

06:47.750 --> 06:49.750
那么给它一个数组节点

06:49.750 --> 06:51.750
但是呢我希望的是单个的元素

06:51.750 --> 06:53.750
那这个东西怎么来改呢

06:53.750 --> 06:55.750
那还不简单吗

06:55.750 --> 06:57.750
如果说你要改这里的话

06:57.750 --> 06:59.750
你可以把它这样子写

06:59.750 --> 07:01.750
写一个fragment对吧

07:01.750 --> 07:03.750
这是个减写

07:03.750 --> 07:05.750
它的全称叫做react fragment

07:05.750 --> 07:07.750
它的全称

07:07.750 --> 07:09.750
加上一个单节点是不是不爆错了

07:09.750 --> 07:11.750
对吧就不爆错了

07:11.750 --> 07:13.750
另外呢另外一种改法就是说

07:13.750 --> 07:15.750
如果说你允许

07:15.750 --> 07:17.750
允许它使用多个元素的话

07:17.750 --> 07:19.750
就允许给它传一个数组的话

07:19.750 --> 07:21.750
那么你可以在这边更改

07:21.750 --> 07:23.750
内行把它改成什么

07:23.750 --> 07:25.750
ArrayOf

07:25.750 --> 07:27.750
ArrayOf

07:27.750 --> 07:29.750
ProbTypes

07:29.750 --> 07:31.750
Animate

07:31.750 --> 07:33.750
这样子是不是也可以

07:33.750 --> 07:35.750
你可以给我传一个数组

07:35.750 --> 07:37.750
可以给我传一个数组

07:37.750 --> 07:39.750
但是这样子的话

07:39.750 --> 07:41.750
它又不能传单个对象了

07:41.750 --> 07:43.750
它又不能传单个对象了

07:43.750 --> 07:45.750
所以最好是用什么呢

07:45.750 --> 07:47.750
用load

07:47.750 --> 07:49.750
load的表示什么意思

07:49.750 --> 07:51.750
表示的是只要是可以

07:51.750 --> 07:53.750
只要能够生成节点都行

07:53.750 --> 07:55.750
那么这里呢

07:55.750 --> 07:57.750
这个数组它当然能够生成节点

07:57.750 --> 07:59.750
所以它现在不爆错了

07:59.750 --> 08:01.750
之前的问题我们把它解决了

08:01.750 --> 08:03.750
好回到这回到这

08:03.750 --> 08:05.750
那么现在我们打印这个响应结果

08:05.750 --> 08:07.750
打印的是undefend

08:07.750 --> 08:09.750
我又看一下为什么是undefend

08:09.750 --> 08:11.750
这很奇怪

08:11.750 --> 08:13.750
我们来看一下网络传输

08:13.750 --> 08:15.750
传输我们这里呢

08:15.750 --> 08:17.750
发现发送了这个请求你看呗

08:17.750 --> 08:19.750
实际上是发送了这个请求的

08:19.750 --> 08:21.750
我们请求的参数你看

08:21.750 --> 08:23.750
都请求过去了

08:23.750 --> 08:25.750
请求过去过后呢

08:25.750 --> 08:27.750
你会发现它给你反复了一个结果

08:27.750 --> 08:29.750
它告诉你

08:29.750 --> 08:31.750
它说你没有输入搜索条件

08:31.750 --> 08:33.750
你的搜索条件没有写

08:33.750 --> 08:35.750
像这个接口呢

08:35.750 --> 08:37.750
因为它是分开的嘛

08:37.750 --> 08:39.750
分开的所以说呢它这里呢

08:39.750 --> 08:41.750
它没有把它合并

08:41.750 --> 08:43.750
就说如果按你说的话

08:43.750 --> 08:45.750
从逻辑上来说

08:45.750 --> 08:47.750
如果你没有写条件是不是查询全部

08:47.750 --> 08:49.750
是不是查询全部

08:49.750 --> 08:51.750
它没有这样去做

08:51.750 --> 08:53.750
它是把它分开的

08:53.750 --> 08:55.750
因为查询全部的时候

08:55.750 --> 08:57.750
它又用了另外一个接口

08:57.750 --> 08:59.750
实际上你们以后的公司

08:59.750 --> 09:01.750
大部分搜都是合并成一个接口的

09:01.750 --> 09:03.750
再说一下

09:03.750 --> 09:05.750
那分开就分开吧

09:05.750 --> 09:07.750
那么这里呢

09:07.750 --> 09:09.750
没有搜索条件

09:09.750 --> 09:11.750
那我如果说

09:11.750 --> 09:13.750
那如果说我们来测试一下

09:13.750 --> 09:15.750
看一下这个接口是怎么回事

09:15.750 --> 09:17.750
如果说我给了它一个

09:17.750 --> 09:19.750
好像它也不行是吧

09:19.750 --> 09:21.750
给了性别都不行

09:21.750 --> 09:23.750
就是说它这个接口呢

09:25.750 --> 09:27.750
怎么说呢

09:27.750 --> 09:29.750
你自己体会吧

09:29.750 --> 09:31.750
你自己体会吧

09:31.750 --> 09:33.750
就说这个东西呢

09:33.750 --> 09:35.750
我给了性别查询也不行

09:35.750 --> 09:37.750
它必须要要求你输入关键制

09:37.750 --> 09:39.750
必须要要求你输入关键制

09:39.750 --> 09:41.750
你只查性别是不行的

09:41.750 --> 09:43.750
你必须要有一个关键制

09:43.750 --> 09:49.300
来进行查询

09:49.300 --> 09:51.300
实际上肯定是说不通的

09:51.300 --> 09:53.300
逻辑上肯定是说不通的

09:53.300 --> 09:55.300
怎么会只不能查性别呢

09:55.300 --> 09:57.300
我要查所谓的女生

09:57.300 --> 09:59.300
我不想去输入什么关键制

09:59.300 --> 10:01.300
但她要求你必须输入关键制

10:01.300 --> 10:03.300
那就这样吧

10:03.300 --> 10:05.300
那就比方说

10:05.300 --> 10:07.300
输入一个关键制

10:07.300 --> 10:10.810
心脏的

10:10.810 --> 10:12.810
保存

10:12.810 --> 10:14.810
这样子也不行吧

10:14.810 --> 10:16.810
我看一下

10:16.810 --> 10:18.810
搜索条件没有

10:18.810 --> 10:20.810
这个方法她要求的属性是key

10:20.810 --> 10:24.180
看一下

10:24.180 --> 10:26.180
查询成功

10:26.180 --> 10:28.180
拿到数据了

10:28.180 --> 10:30.180
这里是

10:30.180 --> 10:32.180
ok 拿到数据了

10:32.180 --> 10:34.180
那就说她必须要要求你输入关键制

10:34.180 --> 10:36.180
那行吧

10:36.180 --> 10:38.180
我们就按照她的要求来做

10:38.180 --> 10:40.180
按照她的要求来做

10:40.180 --> 10:42.180
那这里吧

10:42.180 --> 10:44.180
我打个注释

10:44.180 --> 10:46.180
这个喊说要做什么事情

10:46.180 --> 10:48.180
我就必须要想起打注释了

10:48.180 --> 10:50.180
我觉得不是很好

10:50.180 --> 10:52.180
我这里就要打个注释

10:52.180 --> 10:54.180
想起打注释

10:54.180 --> 10:56.180
如果

10:56.180 --> 10:58.180
传递了key属性

10:58.180 --> 11:00.180
key属性有值

11:00.180 --> 11:02.180
key有值

11:02.180 --> 11:04.180
则

11:04.180 --> 11:06.180
按照

11:06.180 --> 11:08.180
关键制

11:08.180 --> 11:10.180
和性别

11:10.180 --> 11:12.180
进行搜索

11:12.180 --> 11:16.180
那就按照关键制和性别进行搜索

11:16.180 --> 11:18.180
另外

11:18.180 --> 11:20.180
如果key没有值

11:20.180 --> 11:22.180
没有值

11:22.180 --> 11:24.180
则

11:24.180 --> 11:26.180
对所有学生

11:26.180 --> 11:28.180
进行分页

11:28.180 --> 11:30.180
对所有学生进行分页

11:30.180 --> 11:32.180
也就是我们这个方法

11:32.180 --> 11:34.180
这个喊说她既要能够完成分页

11:34.180 --> 11:36.180
因为她搜索也有分页功能

11:36.180 --> 11:38.180
她既要

11:38.180 --> 11:40.180
这个方法她要既要能够提供

11:40.180 --> 11:42.180
没有关键制查询的

11:42.180 --> 11:44.180
情况

11:44.180 --> 11:46.180
另外

11:46.180 --> 11:48.180
有关键制的时候

11:48.180 --> 11:50.180
我们又要进行查询

11:50.180 --> 11:52.180
这个喊说我们统一用一个喊说来搞定

11:52.180 --> 11:54.180
你把它分开写

11:54.180 --> 11:56.180
到时候你拥起来就非常非常恶心了

11:56.180 --> 11:58.180
你最好把它写成一个喊说

11:58.180 --> 12:00.180
通常情况下

12:00.180 --> 12:02.180
公司里面也是把它弄成一个接口的

12:02.180 --> 12:04.180
咱们呢

12:04.180 --> 12:06.180
这里就判断

12:06.180 --> 12:08.180
判断啥呢

12:08.180 --> 12:10.180
判断key有没有值

12:10.180 --> 12:12.180
如果说key有值

12:12.180 --> 12:14.180
我们进行搜索

12:14.180 --> 12:16.180
拿到搜索结果

12:16.180 --> 12:18.180
拿到响应结果

12:18.180 --> 12:20.180
这里我们就把这个打过来

12:20.180 --> 12:22.180
拿这个响应结果

12:22.180 --> 12:24.180
这里我们返回

12:24.180 --> 12:26.180
这个响应结果

12:26.180 --> 12:28.180
返回之前再输出

12:28.180 --> 12:30.180
输出

12:30.180 --> 12:32.180
以后再输出

12:32.180 --> 12:34.180
如果说你没有写关键制

12:34.180 --> 12:36.180
如果说你没有写关键制

12:36.180 --> 12:38.180
那么性别我也忽略了

12:38.180 --> 12:40.180
按理说是不应该忽略的

12:40.180 --> 12:42.180
但是这里忽略就忽略掉了

12:42.180 --> 12:44.180
那么就是

12:44.180 --> 12:46.180
查询全部

12:46.180 --> 12:48.180
忽略

12:48.180 --> 12:50.180
性别

12:50.180 --> 12:52.180
查询全部

12:52.180 --> 12:54.180
大家记住

12:54.180 --> 12:56.180
它就是这么个逻辑

12:56.180 --> 12:58.180
不管有多乖

12:58.180 --> 13:00.180
我们就是这么个逻辑

13:00.180 --> 13:02.180
然后我们这里直接返回啥呢

13:02.180 --> 13:04.180
是不是直接返回之前的

13:04.180 --> 13:06.180
我们写过这么一个喊说

13:06.180 --> 13:08.180
Gate students

13:08.180 --> 13:10.180
那么我们直接返回这个喊说

13:10.180 --> 13:12.180
Gate students

13:12.180 --> 13:14.180
把液码传进去

13:14.180 --> 13:16.180
保存

13:16.180 --> 13:18.180
咱们来看一下

13:18.180 --> 13:20.180
能不能得到一些正常的结果

13:20.180 --> 13:22.180
比方说咱们一开始

13:22.180 --> 13:24.180
刷新

13:24.180 --> 13:26.180
我们这里是用搜索

13:26.180 --> 13:28.180
用搜索得到的是Count 62条数据

13:28.180 --> 13:30.180
搜出来的结果有62条数据

13:30.180 --> 13:32.180
然后这次我们的Serge list

13:32.180 --> 13:34.180
表示我们第一页

13:34.180 --> 13:36.180
目前这一页的数据

13:36.180 --> 13:38.180
它不能全部显示

13:38.180 --> 13:40.180
因为我们分页显示的

13:40.180 --> 13:42.180
这是目前第一页的数据

13:42.180 --> 13:44.180
因为我们搜索把液码传的是1

13:44.180 --> 13:46.180
然后

13:46.180 --> 13:48.180
如果说我这里不传那个key

13:48.180 --> 13:50.180
不传那个key

13:50.180 --> 13:52.180
你看一下

13:52.180 --> 13:54.180
是不是89条数据

13:54.180 --> 13:56.180
总共的学生

13:56.180 --> 13:58.180
但是另外一个问题就是

13:58.180 --> 14:00.180
它这个属性名容又变了

14:00.180 --> 14:02.180
搜索出来的结果叫做Serge list

14:02.180 --> 14:04.180
如果说没有搜索的话

14:04.180 --> 14:06.180
搜索就变了

14:06.180 --> 14:08.180
又不变于我们后续的操作

14:08.180 --> 14:10.180
所以说我们这里要统一一下

14:10.180 --> 14:12.180
不管你搜没有搜索

14:12.180 --> 14:14.180
我始终给你显示一个统一的对象结构

14:14.180 --> 14:16.180
我们把这个函数封装一下

14:16.180 --> 14:18.180
那么这里我们就这样吧

14:18.180 --> 14:20.180
这样子

14:20.180 --> 14:22.180
我们在这个respa里边

14:22.180 --> 14:24.180
比方说搜索这里

14:24.180 --> 14:26.180
搜索这里它那个属性名字

14:26.180 --> 14:28.180
不是叫做

14:28.180 --> 14:30.180
Serge list

14:30.180 --> 14:32.180
叫做这个属性

14:32.180 --> 14:34.180
我们把它复制为

14:34.180 --> 14:36.180
加一个属性叫data

14:36.180 --> 14:38.180
放到这里边来

14:38.180 --> 14:40.180
放到这个属性里边来

14:40.180 --> 14:42.180
然后放进来过后再把这个属性

14:42.180 --> 14:44.180
删除掉

14:44.180 --> 14:46.180
Serge list 把这个属性删除掉

14:46.180 --> 14:48.180
然后再返回这个响应结果

14:48.180 --> 14:50.180
那么这里也是一样

14:52.180 --> 14:54.180
如果说查询全部的话

14:54.180 --> 14:56.180
我们也是把它统一放到data

14:56.180 --> 14:58.180
里边

14:58.180 --> 15:00.180
把fand by page

15:00.180 --> 15:02.180
属性拿过来 然后再把这个属性删除

15:02.180 --> 15:04.180
当然如果说你的服务器接口

15:04.180 --> 15:06.180
本身就是一个接口

15:06.180 --> 15:08.180
统一的格式的话

15:08.180 --> 15:10.180
你就不用去做这些事情了

15:10.180 --> 15:12.180
因为我这里测试的服务器接口

15:12.180 --> 15:14.180
它不是一个统一的格式

15:14.180 --> 15:16.180
所以说我只能自己行手动处理一下

15:16.180 --> 15:18.180
保存

15:18.180 --> 15:20.180
这里看一下

15:20.180 --> 15:22.180
那么现在我们一看

15:22.180 --> 15:24.180
无论我是搜索还是不搜索

15:24.180 --> 15:26.180
它的格式完全是统一的

15:26.180 --> 15:28.180
这里key

15:28.180 --> 15:30.180
是不是也拿到了一个统一的格式

15:30.180 --> 15:32.180
对吧

15:32.180 --> 15:34.180
因此我们格式统一过后了

15:34.180 --> 15:36.180
后续的操作就比较方便了

15:36.180 --> 15:38.180
这是关于

15:38.180 --> 15:40.180
再说一次 大家注意一下

15:40.180 --> 15:42.180
如果说你没有传你keyz

15:42.180 --> 15:44.180
那么你再传six是没用的

15:44.180 --> 15:46.180
这个是没用的 因为这个接口

15:46.180 --> 15:48.180
它本身不支持

15:48.180 --> 15:50.180
我也没办法

15:50.180 --> 15:52.180
这传six是没用的

15:52.180 --> 15:54.180
这里说一下这个问题

15:54.180 --> 15:56.180
就行了

15:56.180 --> 15:58.180
这是没用 要完成了

15:58.180 --> 16:00.180
第一件重要的事情

16:00.180 --> 16:02.180
这件事情 跟路由

16:02.180 --> 16:04.180
跟rex都没有任何关系

16:04.180 --> 16:06.180
纯粹是阿迦克式请求

16:06.180 --> 16:08.180
这个接口搞定

16:08.180 --> 16:10.180
再说一下

16:10.180 --> 16:12.180
一会我们肯定会写

16:12.180 --> 16:14.180
跟主建相关 路由相关的东西

16:14.180 --> 16:16.180
一会也会有默认值

16:16.180 --> 16:18.180
但是你要注意 这里的默认值

16:18.180 --> 16:20.180
跟rex主建

16:20.180 --> 16:22.180
跟地子栏参数

16:22.180 --> 16:24.180
没有任何关系

16:24.180 --> 16:26.180
它只是一个方法的默认值

16:26.180 --> 16:28.180
就是你调这个方法的时候

16:28.180 --> 16:30.180
如果你没有传 我怎么样

16:30.180 --> 16:32.180
写这个方法的时候

16:32.180 --> 16:34.180
你不要去想什么主建的东西

16:34.180 --> 16:36.180
你老老实实把阿迦克式请求搞定

16:36.180 --> 16:38.180
把它做完善就行了

16:38.180 --> 16:40.180
这里只是个阿迦克式请求而已

16:40.180 --> 16:42.180
这个方法做好了之后

16:42.180 --> 16:44.180
我们也测试好了

16:44.180 --> 16:46.180
测试好了之后 你就不要再管它了

16:46.180 --> 16:48.180
你就不要去想这些东西了

16:48.180 --> 16:50.180
这个方法就已经提供好了

16:50.180 --> 16:52.180
那么接下来 我们来完成我们的功能

16:52.180 --> 16:54.180
功能是什么呢

16:54.180 --> 16:56.180
我们的功能是

16:56.180 --> 16:58.180
要在这个地方做一个页面出来

16:58.180 --> 17:00.180
这个页面要能够进行搜索

17:00.180 --> 17:02.180
要能够显示一个学生表格

17:02.180 --> 17:04.180
要能够进行分届

17:04.180 --> 17:06.180
于是我把这个页面

17:06.180 --> 17:08.180
分成三个部分

17:08.180 --> 17:10.180
我们可以认为这个页面有三个部分

17:10.180 --> 17:12.180
第一个部分是什么呢

17:12.180 --> 17:14.180
是一个查询

17:14.180 --> 17:16.180
主建

17:16.180 --> 17:18.180
提供什么 文本框

17:18.180 --> 17:20.180
还有选择性别

17:20.180 --> 17:22.180
对吧 这些东西来进行查询

17:22.180 --> 17:24.180
是一个查询主建

17:24.180 --> 17:26.180
第二个是一个表格主建

17:26.180 --> 17:28.180
学生表格主建

17:28.180 --> 17:30.180
它用于干嘛呢

17:30.180 --> 17:32.180
用于展示学生

17:32.180 --> 17:34.180
它是用于展示学生的

17:34.180 --> 17:36.180
第三个是一个分业主建

17:36.180 --> 17:38.180
分业主建我们是不是之前写过的

17:38.180 --> 17:40.180
对不对

17:40.180 --> 17:42.180
我们先把这些主建写好

17:42.180 --> 17:44.180
写好了我们在页面上

17:44.180 --> 17:46.180
直接把这个主建用进来就完事了

17:46.180 --> 17:48.180
那么接下来

17:48.180 --> 17:50.180
我们一个个来写

17:50.180 --> 17:52.180
首先是查询主建

17:52.180 --> 17:54.180
找到这儿

17:54.180 --> 17:56.180
Component里边

17:56.180 --> 17:58.180
新建一个主建

17:58.180 --> 18:00.180
就是查询主建

18:00.180 --> 18:02.180
我们给大家建个文件夹吧

18:02.180 --> 18:04.180
取个名字叫做

18:04.180 --> 18:06.180
student search bar

18:08.180 --> 18:10.180
这里有个文件夹

18:10.180 --> 18:12.180
我什么时候建的

18:12.180 --> 18:14.180
那就有这个文件

18:14.180 --> 18:16.180
用这个文件夹

18:16.180 --> 18:18.180
indexer.js

18:18.180 --> 18:20.180
就是这个

18:20.180 --> 18:22.180
学生查询主建

18:22.180 --> 18:24.180
student table也建了

18:24.180 --> 18:26.180
应该是我之前建的

18:26.180 --> 18:28.180
没删掉

18:28.180 --> 18:30.180
indexer.js

18:30.180 --> 18:32.180
这里写上这么一个

18:32.180 --> 18:34.180
内主建

18:34.180 --> 18:36.180
RCC

18:36.180 --> 18:38.180
取个名字

18:38.180 --> 18:40.180
student search bar

18:40.180 --> 18:42.180
写上这么一个主建

18:42.180 --> 18:44.180
这个主建干嘛呢

18:44.180 --> 18:46.180
它就是提供一个文本框

18:46.180 --> 18:48.180
选择性别的话

18:48.180 --> 18:50.180
我们可以用下达列表

18:50.180 --> 18:52.180
或者是

18:52.180 --> 18:54.180
单语选框都行

18:54.180 --> 18:56.180
无所谓

18:56.180 --> 18:58.180
看你自己

18:58.180 --> 19:00.180
我们这里比方说用单语选框

19:00.180 --> 19:02.180
随便吧

19:02.180 --> 19:04.180
这里我们给它

19:04.180 --> 19:06.180
要不要写样式

19:06.180 --> 19:08.180
不想写样式

19:08.180 --> 19:10.180
就直接来吧

19:10.180 --> 19:12.180
这个就是关键字

19:12.180 --> 19:14.180
关键字后边是一个文本框

19:14.180 --> 19:16.180
inputs

19:16.180 --> 19:18.180
文本框后边是一个性别

19:18.180 --> 19:20.180
性别

19:20.180 --> 19:22.180
性别后边是

19:22.180 --> 19:24.180
单选框

19:24.180 --> 19:26.180
一个分组的单选框

19:26.180 --> 19:28.180
inputs

19:28.180 --> 19:30.180
radio

19:30.180 --> 19:32.180
因为

19:32.180 --> 19:34.180
性别分组了

19:36.180 --> 19:38.180
这三个性别

19:38.180 --> 19:40.180
跟上一个文字

19:40.180 --> 19:42.180
我们用label

19:42.180 --> 19:46.070
用label把包起来的

19:46.070 --> 19:48.070
把包起来的

19:48.070 --> 19:50.070
这个就不要了

19:50.070 --> 19:52.070
这里是一个不限

19:52.070 --> 19:54.070
不限性别

19:54.070 --> 19:56.070
它的value值

19:56.070 --> 19:58.070
是-1

19:58.070 --> 20:00.070
value值为-1

20:00.070 --> 20:04.340
不限

20:04.340 --> 20:06.340
这里下面我们一次复制

20:06.340 --> 20:08.340
一次复制

20:08.340 --> 20:10.340
这里

20:10.340 --> 20:12.340
如果是难

20:12.340 --> 20:14.340
看一下接口

20:14.340 --> 20:16.340
难到底是1还是0

20:16.340 --> 20:18.340
难

20:18.340 --> 20:20.340
看一下

20:20.340 --> 20:21.340
0是难

20:21.340 --> 20:22.340
1是女

20:22.340 --> 20:24.340
之前都写反了

20:24.340 --> 20:26.340
无所谓

20:26.340 --> 20:28.340
0是难

20:28.340 --> 20:30.340
1是女

20:30.340 --> 20:32.340
先把界面杆做出来

20:32.340 --> 20:34.340
它们是同一个分组

20:34.340 --> 20:36.340
那边都是一样的

20:36.340 --> 20:38.340
后边跟上一个按钮

20:38.340 --> 20:40.340
按钮

20:40.340 --> 20:42.340
查询

20:42.340 --> 20:44.340
这就是这么一个组件

20:44.340 --> 20:46.340
咱们在app里边去试用一下

20:46.340 --> 20:48.340
app里边去试用一下

20:48.340 --> 20:50.340
看在哪里去试用

20:50.340 --> 20:52.340
就在students里面去试用

20:52.340 --> 20:54.340
在页面里面去试用

20:54.340 --> 20:56.340
students的页面里面

20:56.340 --> 20:58.340
去试用一下这个组件

20:58.340 --> 21:00.340
试用一下

21:00.340 --> 21:02.340
input

21:02.340 --> 21:04.340
导入students

21:04.340 --> 21:06.340
search

21:06.340 --> 21:08.340
bar

21:08.340 --> 21:10.340
component

21:10.340 --> 21:12.340
students search bar

21:12.340 --> 21:14.340
这里我们就直接

21:14.340 --> 21:16.340
显示到这儿了

21:16.340 --> 21:19.980
students

21:19.980 --> 21:21.980
search bar

21:21.980 --> 21:23.980
保存

21:23.980 --> 21:25.980
界面就显示出来了

21:25.980 --> 21:27.980
界面就显示出来了

21:27.980 --> 21:29.980
这个组件里面

21:29.980 --> 21:31.980
其实还有一些东西

21:31.980 --> 21:33.980
比方说我这个组件

21:33.980 --> 21:35.980
到时候希望怎么用

21:35.980 --> 21:37.980
我希望能够给它传一些出使之

21:37.980 --> 21:39.980
比方说

21:39.980 --> 21:41.980
默认的关键字是多少

21:41.980 --> 21:43.980
默认关键字这里要显示

21:43.980 --> 21:45.980
默认选中的性别是什么

21:45.980 --> 21:47.980
我们希望给它这么一个出使之

21:47.980 --> 21:49.980
给它这么一个出使之

21:49.980 --> 21:51.980
懂我意思吗

21:51.980 --> 21:53.980
就是说

21:53.980 --> 21:55.980
这里的default value

21:55.980 --> 21:57.980
比方说我们希望这样给它

21:57.980 --> 21:58.980
给它什么呢

21:58.980 --> 21:59.980
给它一个对象吧

21:59.980 --> 22:00.980
给它一个对象

22:00.980 --> 22:01.980
这个对象里面

22:01.980 --> 22:03.980
我们给它传递T的默认值

22:03.980 --> 22:05.980
是123

22:05.980 --> 22:07.980
然后6的默认值是多少

22:08.980 --> 22:10.980
比方说是-1

22:10.980 --> 22:12.980
我这样子给它传递一些出使之

22:12.980 --> 22:14.980
你要对我意思吗

22:14.980 --> 22:16.980
它就按照出使之

22:16.980 --> 22:18.980
来进行显示

22:18.980 --> 22:19.980
于是

22:19.980 --> 22:21.980
为了完成这样的效果

22:21.980 --> 22:23.980
我们到这边来

22:23.980 --> 22:24.980
这边我们这些组件

22:24.980 --> 22:25.980
是不是要变成受控组件的

22:25.980 --> 22:27.980
因为我们要控制它的内容

22:27.980 --> 22:28.980
这个组件里面

22:28.980 --> 22:30.980
是不是得有状态

22:30.980 --> 22:32.980
状态有什么呢

22:32.980 --> 22:33.980
就两个

22:33.980 --> 22:35.980
一个是关键字

22:35.980 --> 22:36.980
一个是关键字

22:36.980 --> 22:38.980
一个是什么呢

22:38.980 --> 22:40.980
一个是

22:40.980 --> 22:42.980
性别

22:42.980 --> 22:44.980
就这两个

22:44.980 --> 22:46.980
一个关键字

22:46.980 --> 22:47.980
一个关键字

22:47.980 --> 22:49.980
一个性别

22:49.980 --> 22:50.980
没问题吧

22:50.980 --> 22:51.980
性别当然是-1

22:51.980 --> 22:53.980
给它默认值为-1

22:53.980 --> 22:54.980
那么以后

22:54.980 --> 22:55.980
它这边就是

22:55.980 --> 22:57.980
是不是根据状态来显示

22:57.980 --> 22:59.980
我们先不着急说这个

22:59.980 --> 23:00.980
看一下这里

23:00.980 --> 23:01.980
它是不是要受控

23:01.980 --> 23:02.980
根据状态来显示

23:02.980 --> 23:03.980
这里的value值

23:03.980 --> 23:04.980
是不是应该等于

23:04.980 --> 23:05.980
来自于哪

23:05.980 --> 23:07.980
来自于thisState

23:07.980 --> 23:08.980
叫什么keyz

23:08.980 --> 23:09.980
对不对

23:09.980 --> 23:11.980
那么这里unchanged

23:11.980 --> 23:13.980
unchanged

23:13.980 --> 23:15.980
当改变它的时候

23:15.980 --> 23:17.980
干嘛呢

23:17.980 --> 23:18.980
这个没什么好说的吧

23:18.980 --> 23:20.980
thisState

23:20.980 --> 23:21.980
什么key

23:21.980 --> 23:22.980
为啥

23:22.980 --> 23:23.980
把它设为1点target

23:23.980 --> 23:24.980
点value

23:24.980 --> 23:25.980
对不对

23:25.980 --> 23:26.980
改变它的时候

23:26.980 --> 23:27.980
因为它受控

23:27.980 --> 23:28.980
它受控

23:28.980 --> 23:29.980
所以说

23:29.980 --> 23:30.980
改变它的时候

23:30.980 --> 23:31.980
重新设置状态

23:32.980 --> 23:33.980
keyz搞定了

23:33.980 --> 23:34.980
那么下边

23:34.980 --> 23:36.980
就是单选框这里

23:36.980 --> 23:37.980
单选框这里

23:37.980 --> 23:38.980
那么这里

23:38.980 --> 23:41.980
由于它跟这个性别是关联的

23:41.980 --> 23:42.980
它到底要不要选中

23:42.980 --> 23:44.980
是不是根据这个性别的取值有关系

23:44.980 --> 23:45.980
对吧

23:45.980 --> 23:46.980
跟这个取值有关系

23:46.980 --> 23:47.980
好

23:47.980 --> 23:48.980
那么这里

23:48.980 --> 23:50.980
我们设置一下

23:50.980 --> 23:51.980
checked

23:51.980 --> 23:52.980
是否被选中

23:52.980 --> 23:54.980
是否被选中取决于啥呢

23:54.980 --> 23:57.980
取决于thisState.six

23:57.980 --> 23:58.980
是不是等于-1

23:58.980 --> 23:59.980
对吧

23:59.980 --> 24:00.980
是不是等于-1

24:00.980 --> 24:02.980
它要等于-1才能选中

24:02.980 --> 24:03.980
好那么这里是

24:03.980 --> 24:05.980
是不是要等于-0

24:05.980 --> 24:06.980
等于-0的时候

24:06.980 --> 24:07.980
那么难拆选中

24:07.980 --> 24:08.980
等于-1的时候

24:08.980 --> 24:09.980
女才选中

24:09.980 --> 24:10.980
对吧

24:10.980 --> 24:11.980
我们把它受控

24:11.980 --> 24:13.980
把你的组件全部受控

24:13.980 --> 24:14.980
你看是不是受控了

24:14.980 --> 24:15.980
但是受控之后

24:15.980 --> 24:16.980
它现在给你报了一个错

24:16.980 --> 24:17.980
说什么呢

24:17.980 --> 24:18.980
说这个

24:18.980 --> 24:20.980
就是这个radio的组件

24:20.980 --> 24:22.980
就这个input的这个组件

24:22.980 --> 24:23.980
你没有设置什么

24:23.980 --> 24:24.980
没有设置unchanged

24:24.980 --> 24:26.980
没有设置unchanged

24:26.980 --> 24:28.980
那么导致它没办法

24:28.980 --> 24:29.980
更改对吧

24:29.980 --> 24:30.980
没办法更改

24:30.980 --> 24:32.980
好那么我们给它设置一下unchanged

24:32.980 --> 24:34.980
给它设置一下unchanged

24:34.980 --> 24:35.980
unchanged

24:35.980 --> 24:37.980
我们这里就统一设置了

24:37.980 --> 24:38.980
因为这里有三个

24:38.980 --> 24:40.980
我就统一写个handle

24:40.980 --> 24:41.980
radio

24:41.980 --> 24:46.570
changed

24:46.570 --> 24:49.880
统一写这么一个函数

24:49.880 --> 24:50.880
unchanged

24:50.880 --> 24:51.880
等于-this

24:51.880 --> 24:52.880
这个

24:52.880 --> 24:54.880
一次写

24:54.880 --> 24:56.880
写到这后面的

24:56.880 --> 24:57.880
写过来

24:57.880 --> 24:58.880
OK

24:58.880 --> 25:02.380
这里就不换好了吗

25:02.380 --> 25:04.380
保持格式统一

25:04.380 --> 25:05.380
好了

25:05.380 --> 25:06.380
那么咱们

25:06.380 --> 25:08.380
他们当选动下发生改变的时候

25:08.380 --> 25:10.380
它就会运行这个函数

25:10.380 --> 25:11.380
这个函数干嘛呢

25:11.380 --> 25:12.380
这个函数

25:12.380 --> 25:13.380
要做的事情

25:13.380 --> 25:15.380
是不是就是this set state

25:15.380 --> 25:16.380
对吧

25:16.380 --> 25:18.380
把那个啥

25:18.380 --> 25:19.380
把那个啥

25:19.380 --> 25:21.380
我们这里输出一下

25:21.380 --> 25:22.380
我们再输出一下

25:22.380 --> 25:23.380
这个e.value值

25:23.380 --> 25:24.380
你看一下

25:24.380 --> 25:26.380
e.target的value

25:26.380 --> 25:27.380
你看一下

25:27.380 --> 25:28.380
因为value值

25:28.380 --> 25:29.380
它绑定了它的数据

25:29.380 --> 25:30.380
对吧

25:30.380 --> 25:31.380
绑定了数据的

25:31.380 --> 25:34.140
我们看一下

25:34.140 --> 25:35.140
点击蓝

25:35.140 --> 25:36.140
是不是0

25:36.140 --> 25:37.140
点击铝是不是1

25:37.140 --> 25:38.140
点击不线

25:38.140 --> 25:39.140
它这里现在已经选中了

25:39.140 --> 25:40.140
不用连接了

25:40.140 --> 25:42.140
那么也就是把value值

25:42.140 --> 25:44.140
设置到6里面就行了

25:44.140 --> 25:46.140
this set state

25:46.140 --> 25:47.140
6

25:47.140 --> 25:48.140
设置为什么

25:48.140 --> 25:50.140
e.target.value

25:50.140 --> 25:51.140
对吧

25:51.140 --> 25:53.140
设置这个value值就完成了

25:53.140 --> 25:54.140
看一下

25:54.140 --> 25:55.140
注意

25:55.140 --> 25:56.140
这个是个制伏串

25:56.140 --> 25:57.140
你要把它转换成数字

25:57.140 --> 25:58.140
这是个制伏串

25:58.140 --> 25:59.140
要把它转换成数字

25:59.140 --> 26:01.140
给个加号

26:01.140 --> 26:02.140
保存

26:02.140 --> 26:03.140
那么现在看一下

26:03.140 --> 26:04.140
蓝

26:04.140 --> 26:05.140
铝

26:05.140 --> 26:06.140
不线

26:06.140 --> 26:07.140
是不是可以选中了

26:07.140 --> 26:09.140
而且这些主页都受控了

26:09.140 --> 26:11.140
现在我们再回过头来说这个问题

26:11.140 --> 26:13.140
这边给它一个默认值

26:13.140 --> 26:15.140
默认值是什么意思呢

26:15.140 --> 26:17.140
就是在最开始的时候

26:17.140 --> 26:18.140
状态

26:18.140 --> 26:21.140
里边的值

26:21.140 --> 26:23.140
要来自于默认值

26:23.140 --> 26:24.140
就是状态里边

26:24.140 --> 26:26.140
我们一开始的状态里边的数据

26:26.140 --> 26:28.140
可以来自于默认值

26:28.140 --> 26:29.140
但是这个默认值

26:29.140 --> 26:30.140
是可以不传遞的

26:30.140 --> 26:31.140
不传遞的话

26:31.140 --> 26:33.140
就是这边写的是什么就是什么

26:33.140 --> 26:34.140
所以说我们这里最好的

26:34.140 --> 26:36.140
最好的使用一个构造函数

26:36.140 --> 26:38.140
来进行混合

26:38.140 --> 26:40.140
super

26:40.140 --> 26:41.140
probs

26:41.140 --> 26:42.140
那么这里怎么混合呢

26:42.140 --> 26:44.140
就说我们这里一个

26:44.140 --> 26:45.140
这里一个对象

26:45.140 --> 26:46.140
default

26:46.140 --> 26:48.140
有这么一个对象

26:48.140 --> 26:49.140
换个名字

26:49.140 --> 26:51.140
dev

26:51.140 --> 26:52.140
有个对象

26:52.140 --> 26:53.140
就这个值

26:53.140 --> 26:55.140
这是状态的默认值

26:55.140 --> 26:56.140
对吧

26:56.140 --> 26:57.140
这是状态的默认值

26:57.140 --> 26:58.140
那么你属性里边

26:58.140 --> 27:00.140
不是还传过来的一个东西吗

27:00.140 --> 27:01.140
你属性里面不是传过来

27:01.140 --> 27:03.140
一个default value吗

27:03.140 --> 27:04.140
对不对

27:04.140 --> 27:06.140
是不是传到这么一个东西

27:06.140 --> 27:07.140
对吧

27:07.140 --> 27:09.140
如果说你这个东西传过来了

27:09.140 --> 27:10.140
OK

27:10.140 --> 27:11.140
我把你这个东西

27:11.140 --> 27:13.140
跟这个对象来进行混合

27:13.140 --> 27:15.140
混合两个对象

27:15.140 --> 27:16.140
然后把混合的结果

27:16.140 --> 27:18.140
作为状态

27:18.140 --> 27:19.140
你听懂这个意思吧

27:19.140 --> 27:21.140
把混合的结果

27:21.140 --> 27:23.140
不解释

27:23.140 --> 27:25.140
而散

27:25.140 --> 27:27.140
把混合的结果

27:27.140 --> 27:30.900
来作为状态

27:32.900 --> 27:33.900
没问题吧

27:33.900 --> 27:34.900
那么这样子

27:34.900 --> 27:35.900
我就不在这里写了

27:35.900 --> 27:36.900
比如说这个状态

27:36.900 --> 27:37.900
它是

27:37.900 --> 27:38.900
它就是这样子

27:38.900 --> 27:39.900
如果说你没有传这个属性

27:39.900 --> 27:40.900
不要这个属性

27:40.900 --> 27:41.900
是undefined

27:41.900 --> 27:42.900
你没有传递

27:42.900 --> 27:43.900
没有传递

27:43.900 --> 27:44.900
它肯定对它没有影响

27:44.900 --> 27:45.900
对吧

27:45.900 --> 27:46.900
那么我们直接使用

27:46.900 --> 27:48.900
它的值作为状态的初始值

27:48.900 --> 27:49.900
如果说你传递的这个属性

27:49.900 --> 27:50.900
OK

27:50.900 --> 27:51.900
不管你传递了多少个属性

27:51.900 --> 27:52.900
我把你的属性

27:52.900 --> 27:53.900
混合到

27:53.900 --> 27:54.900
从右相左

27:54.900 --> 27:55.900
马进行混合

27:55.900 --> 27:56.900
最后

27:56.900 --> 27:57.900
为什么前面要写个这个

27:57.900 --> 27:58.900
因为我不想改动它

27:58.900 --> 27:59.900
如果说你把它作为

27:59.900 --> 28:00.900
第一个参数的话

28:00.900 --> 28:01.900
那么它这个对象

28:01.900 --> 28:02.900
本身会受到改动

28:02.900 --> 28:03.900
我不希望这样子

28:03.900 --> 28:05.900
我希望对象的始终保持不变

28:05.900 --> 28:07.900
那么我就写了空对象

28:07.900 --> 28:08.900
新对象

28:08.900 --> 28:10.900
它把新对象混合之后的返回

28:11.900 --> 28:12.900
这样子

28:12.900 --> 28:13.900
如果说你传了

28:13.900 --> 28:14.900
什么key

28:14.900 --> 28:15.900
sax

28:15.900 --> 28:16.900
那么后边的覆盖前边的

28:16.900 --> 28:17.900
那么我就把它作为

28:17.900 --> 28:18.900
状态的初始值

28:18.900 --> 28:19.900
不要这意思吧

28:19.900 --> 28:20.900
好 这样子一来

28:20.900 --> 28:21.900
你看我现在是不是可以

28:21.900 --> 28:23.900
通过这边来设置状态了

28:23.900 --> 28:24.900
你看看

28:24.900 --> 28:25.900
通过这边

28:25.900 --> 28:26.900
sax

28:26.900 --> 28:27.900
1

28:27.900 --> 28:28.900
对吧

28:28.900 --> 28:29.900
说可以设置状态了

28:29.900 --> 28:30.900
对吧

28:30.900 --> 28:31.900
可以通过它来设置了

28:31.900 --> 28:32.900
我们就测试一下

28:32.900 --> 28:33.900
测试一下

28:33.900 --> 28:35.900
然后这里边可以更改

28:35.900 --> 28:36.900
当然可以更改

28:36.900 --> 28:37.900
这些关键字

28:37.900 --> 28:38.900
性别

28:38.900 --> 28:40.900
最后点击查询

28:40.900 --> 28:41.900
我们要处理一下

28:41.900 --> 28:42.900
这个组件里边

28:42.900 --> 28:43.900
unclick

28:43.900 --> 28:44.900
查询的时候

28:44.900 --> 28:46.900
那肯定我们要写个函数来处理

28:47.900 --> 28:48.900
handle

28:48.900 --> 28:49.900
handle

28:49.900 --> 28:50.900
search

28:51.900 --> 28:52.900
写这么一个函数

28:53.900 --> 28:55.900
再进行处理

28:56.900 --> 28:57.900
this

28:57.900 --> 28:58.900
handle

28:58.900 --> 28:59.900
search

28:59.900 --> 29:01.900
好 当我们点击查询的时候

29:01.900 --> 29:02.900
要干嘛呢

29:02.900 --> 29:03.900
要干嘛

29:03.900 --> 29:05.900
首先验证一下

29:05.900 --> 29:06.900
你这里的查询条件

29:06.900 --> 29:08.900
是不是合理的

29:08.900 --> 29:09.900
首先验证一下

29:09.900 --> 29:11.900
你这里的查询条件

29:11.900 --> 29:12.900
是不是合理的

29:12.900 --> 29:13.900
怎么来验证呢

29:13.900 --> 29:14.900
是这样子

29:15.900 --> 29:16.900
因为我们这个

29:16.900 --> 29:18.900
由于这个接口的逻辑

29:18.900 --> 29:19.900
它是这样子的

29:19.900 --> 29:21.900
它是说你这个关键字

29:21.900 --> 29:23.900
你必须得写

29:23.900 --> 29:24.900
你如果不写关键字

29:24.900 --> 29:25.900
就是查询的所有

29:25.900 --> 29:26.900
也就是说

29:26.900 --> 29:27.900
它这个逻辑里边

29:27.900 --> 29:29.900
按照它这个逻辑里边

29:29.900 --> 29:30.900
你看一下这个地方

29:30.900 --> 29:31.900
是不是不合理的

29:32.900 --> 29:33.900
对不对

29:33.900 --> 29:35.900
你不写关键字

29:35.900 --> 29:37.900
但是又选中了性别

29:37.900 --> 29:39.900
我跟你说的是讲道理

29:39.900 --> 29:40.900
讲道理上

29:40.900 --> 29:42.900
那么这个查询是合理的

29:42.900 --> 29:44.900
但是在我们这个接口的情况下

29:44.900 --> 29:46.900
就是这个接口的这里

29:46.900 --> 29:47.900
它就是不合理的

29:47.900 --> 29:48.900
对吧

29:48.900 --> 29:50.900
因为接口认为

29:50.900 --> 29:52.900
你不写关键字是不能查性别的

29:52.900 --> 29:54.900
你不能单独按照性别来查询

29:54.900 --> 29:55.900
所以说

29:55.900 --> 29:57.900
它如果不写关键字

29:57.900 --> 30:00.900
是不是只有这种两种情况

30:00.900 --> 30:02.900
一种是写的关键字那里随便

30:02.900 --> 30:03.900
你这边随便选择

30:03.900 --> 30:05.900
如果你不写关键字的话

30:05.900 --> 30:07.900
那是不是性别一定是补线

30:07.900 --> 30:08.900
对吧

30:08.900 --> 30:09.900
性别一定是补线

30:09.900 --> 30:11.900
是不是这个道理

30:11.900 --> 30:12.900
是这个道理吧

30:12.900 --> 30:13.900
没问题吧

30:13.900 --> 30:15.900
性别是不是一定补线

30:15.900 --> 30:17.900
那么这里我们来看一下

30:17.900 --> 30:20.900
如果说

30:20.900 --> 30:22.900
我这里呢

30:22.900 --> 30:24.900
就是State里边

30:24.900 --> 30:26.900
什么那个key值

30:26.900 --> 30:28.900
如果说有值的话

30:28.900 --> 30:29.900
有值的话

30:29.900 --> 30:30.900
那就正常查询

30:30.900 --> 30:32.900
就是我再说一次

30:32.900 --> 30:33.900
按照正常的逻辑

30:33.900 --> 30:34.900
是不应该是这样子的

30:34.900 --> 30:36.900
但是

30:36.900 --> 30:38.900
由于API的这个

30:38.900 --> 30:40.900
原因

30:40.900 --> 30:41.900
说我不得不这样子写

30:41.900 --> 30:43.900
要跟API满足吗

30:43.900 --> 30:44.900
如果是正常查询

30:44.900 --> 30:46.900
那么就没什么问题

30:46.900 --> 30:47.900
对吧没什么问题

30:47.900 --> 30:48.900
算了我现在不去

30:48.900 --> 30:50.900
刚才就不去考虑这些问题了

30:50.900 --> 30:51.900
不然的话

30:51.900 --> 30:52.900
本来是一个正确的逻辑

30:52.900 --> 30:54.900
结果越到越远

30:54.900 --> 30:55.900
算了吧

30:55.900 --> 30:56.900
API的问题

30:56.900 --> 30:57.900
就保持API的问题

30:57.900 --> 30:58.900
就不管它了

30:58.900 --> 30:59.900
就不管它了

30:59.900 --> 31:00.900
不管它

31:00.900 --> 31:01.900
那么我们这里

31:01.900 --> 31:03.900
就直接查询就完事了

31:03.900 --> 31:06.900
直接拋出事件

31:06.900 --> 31:08.900
拋出事件

31:08.900 --> 31:10.900
拋出事件

31:10.900 --> 31:12.900
就是点击查询过后

31:12.900 --> 31:13.900
要做什么事情

31:13.900 --> 31:14.900
我确实不知道

31:14.900 --> 31:16.900
我通过事件拋出去

31:16.900 --> 31:17.900
那么这个事件名字

31:17.900 --> 31:19.900
我们该取出

31:19.900 --> 31:21.900
就是unsearch

31:21.900 --> 31:22.900
判断一下

31:22.900 --> 31:23.900
如果说

31:23.900 --> 31:25.900
race props里边传遞的unsearch

31:25.900 --> 31:27.900
于是我就调用这个函数

31:27.900 --> 31:29.900
unsearch

31:29.900 --> 31:30.900
把什么给它

31:30.900 --> 31:31.900
把我们的状态给它

31:31.900 --> 31:32.900
状态里边

31:32.900 --> 31:34.900
不是记录了你的查询条件吗

31:34.900 --> 31:35.900
对不对

31:35.900 --> 31:36.900
key,six

31:36.900 --> 31:37.900
是不是查询条件

31:37.900 --> 31:39.900
对吧我就把这个

31:39.900 --> 31:41.900
状态给你

31:41.900 --> 31:42.900
保存到这边来

31:42.900 --> 31:44.900
那么这里再写个属性

31:44.900 --> 31:45.900
看一下

31:45.900 --> 31:46.900
unsearch

31:46.900 --> 31:50.540
那么这里

31:50.540 --> 31:51.540
是条件

31:51.540 --> 31:53.540
condition

31:53.540 --> 31:55.540
我们这里输出一个condition

31:55.540 --> 31:57.540
看一下能不能得到查询条件

31:57.540 --> 31:59.540
保存看一下

31:59.540 --> 32:04.060
好,这里点查询

32:04.060 --> 32:05.060
你看一下

32:05.060 --> 32:07.060
是不是得到了查询条件

32:07.060 --> 32:09.060
对吧,这里

32:09.060 --> 32:10.060
点查询

32:10.060 --> 32:12.060
就拿到查询条件了

32:12.060 --> 32:13.060
对吧,拿到查询条件了

32:13.060 --> 32:15.060
ok,那么这个组件就写好了

32:15.060 --> 32:17.060
这个组件跟什么路由那些有没有关系

32:17.060 --> 32:19.060
没有任何关系

32:19.060 --> 32:21.060
它是一个非常纯粹的组件

32:21.060 --> 32:22.060
就是我们写组件的时候

32:22.060 --> 32:23.060
大家特别注意

32:23.060 --> 32:25.060
写组件的时候

32:25.060 --> 32:27.060
尽量少的偶和

32:27.060 --> 32:29.060
不要去关心什么路由

32:29.060 --> 32:31.060
那些乱七八糟的东西

32:31.060 --> 32:32.060
尽量少的有偶和

32:32.060 --> 32:34.060
尽量写一个非常纯粹的组件

32:34.060 --> 32:36.060
这样做是最好的

32:36.060 --> 32:39.060
这样就做了有利于这个组件的附用

32:39.060 --> 32:41.060
好,那么这个组件就写好了

32:41.060 --> 32:43.060
好,那么这个ok了

32:43.060 --> 32:45.060
对吧,有的时候我开发的时候

32:45.060 --> 32:46.060
习惯这样子

32:46.060 --> 32:47.060
我要做的事情

32:47.060 --> 32:48.060
用一个

32:48.060 --> 32:50.060
可以用一些软件

32:50.060 --> 32:51.060
记录下来

32:51.060 --> 32:53.060
我记得我这个

32:53.060 --> 32:55.060
这里边都按了一个软件

32:55.060 --> 32:57.060
叫做

32:57.060 --> 32:59.060
好像叫这个

32:59.060 --> 33:00.060
是这个软件

33:00.060 --> 33:01.060
是一个日历

33:01.060 --> 33:03.060
不是这个

33:03.060 --> 33:05.060
我那个

33:05.060 --> 33:07.060
我那个查件后来好像删了

33:07.060 --> 33:09.060
后来好像删了

33:09.060 --> 33:11.060
就是有些谷歌扭蛋器

33:11.060 --> 33:12.060
上面有些查件

33:12.060 --> 33:15.060
可以记录你的待办事项

33:15.060 --> 33:17.060
有哪些事情要做

33:17.060 --> 33:18.060
做完了之后

33:18.060 --> 33:19.060
你把它勾选上就完事了

33:19.060 --> 33:21.060
我们这里就用个技术本

33:21.060 --> 33:22.060
查评组件

33:22.060 --> 33:23.060
我们这一块做完了

33:23.060 --> 33:25.060
OK,这一块完成了

33:25.060 --> 33:26.060
好,分业组件

33:26.060 --> 33:27.060
我是我们之前做过的

33:27.060 --> 33:28.060
你做好的

33:28.060 --> 33:29.060
OK

33:29.060 --> 33:31.060
那么现在就插一个学生表格组件了

33:31.060 --> 33:33.060
用来展示学生

33:33.060 --> 33:35.060
我们来做这个学生表格组件

33:35.060 --> 33:36.060
做完了之后

33:36.060 --> 33:37.060
我们再把它进行整合

33:37.060 --> 33:38.060
整合的时候

33:38.060 --> 33:39.060
才会用到路由的知识

33:39.060 --> 33:40.060
先不着急

33:40.060 --> 33:41.060
好,现在我们

33:41.060 --> 33:43.060
这个文件讲已经有了

33:43.060 --> 33:44.060
新建个文件

33:44.060 --> 33:46.060
index.js

33:46.060 --> 33:48.060
这是个学生表格

33:48.060 --> 33:50.060
学生表格这一块的话

33:50.060 --> 33:52.060
我们就直接用一个韩束组件得了

33:52.060 --> 33:54.060
用个韩束组件得了

33:54.060 --> 33:56.060
因为它也没有什么状态

33:56.060 --> 33:59.060
叫做student table

33:59.060 --> 34:00.060
学生表格

34:00.060 --> 34:01.060
那么自然的话

34:01.060 --> 34:03.060
要显示一个table

34:03.060 --> 34:05.060
稍微的给它设置一下样式

34:05.060 --> 34:07.060
稍微的设置一下样式

34:07.060 --> 34:08.060
新建个文件

34:08.060 --> 34:10.060
index.js

34:11.060 --> 34:13.060
这里

34:13.060 --> 34:15.060
导入进来

34:15.060 --> 34:17.060
import

34:17.060 --> 34:18.060
叫做鞋杠

34:18.060 --> 34:19.060
index.js

34:19.060 --> 34:21.060
导入进来

34:21.060 --> 34:23.060
这里给它一个name

34:23.060 --> 34:24.060
class name

34:24.060 --> 34:26.060
等于cap

34:26.060 --> 34:28.060
以后再设置样式

34:28.060 --> 34:29.060
学生表格这里边

34:29.060 --> 34:31.060
你要给我传一个啥进来

34:31.060 --> 34:33.060
你要给我传一个学生数组进来

34:33.060 --> 34:35.060
这个我们约定好

34:35.060 --> 34:37.060
你要给我传一个学生数组

34:37.060 --> 34:38.060
我们通过这个属性

34:39.060 --> 34:40.060
比如说我们自己约定

34:40.060 --> 34:43.060
你也可以写一个属性的类型约数

34:43.060 --> 34:44.060
约定这个属性

34:44.060 --> 34:45.060
你要给我传一个数组

34:45.060 --> 34:47.060
那么得到这个数组之后

34:47.060 --> 34:48.060
我就把这个数组进行map

34:48.060 --> 34:49.060
进行映射

34:49.060 --> 34:51.060
每一个学生生成一个什么

34:51.060 --> 34:52.060
是不是生成一行

34:52.060 --> 34:53.060
一行是个啥

34:53.060 --> 34:55.060
一行是不是个tr

34:55.060 --> 34:56.060
对不对

34:56.060 --> 34:57.060
每一个学生生成一行

34:57.060 --> 34:58.060
当然tr的t字

34:58.060 --> 35:00.060
就是学生的id

35:00.060 --> 35:01.060
那么最终

35:01.060 --> 35:02.060
我们会是否得到一个

35:04.060 --> 35:06.060
是否得到一个trs

35:06.060 --> 35:07.060
得到一个tr的数组

35:07.060 --> 35:09.060
那么在这里有个t保底

35:09.060 --> 35:10.060
那么我们把这个tr

35:10.060 --> 35:12.060
放到这个t保底里面就完事了

35:12.060 --> 35:13.060
当然那个表格

35:13.060 --> 35:14.060
它还有表头

35:14.060 --> 35:15.060
t head

35:15.060 --> 35:17.060
t head到里面tr

35:17.060 --> 35:18.060
那么来吧

35:18.060 --> 35:19.060
看一下有哪些数据

35:19.060 --> 35:20.060
学号

35:21.060 --> 35:22.060
姓名

35:23.060 --> 35:24.060
写几个德了

35:24.060 --> 35:26.060
姓别

35:28.060 --> 35:29.060
出生

35:32.060 --> 35:33.060
年份

35:33.060 --> 35:34.060
出生年份

35:34.060 --> 35:35.060
然后邮箱

35:36.060 --> 35:37.060
够了

35:37.060 --> 35:38.060
这个操作

35:39.060 --> 35:41.060
操作比较删除

35:41.060 --> 35:42.060
还有什么

35:42.060 --> 35:44.060
跳到学生详情

35:44.060 --> 35:45.060
这些东西

35:45.060 --> 35:46.060
操作得了

35:46.060 --> 35:47.060
这里面

35:47.060 --> 35:48.060
那么每一个tr下面

35:48.060 --> 35:50.060
是不是也有一些td

35:50.060 --> 35:51.060
还在那写

35:51.060 --> 35:52.060
td

35:52.060 --> 35:54.060
这个td里面包含啥

35:54.060 --> 35:55.060
td里面

35:56.060 --> 35:57.060
第一个是学号

35:57.060 --> 35:58.060
s点

35:58.060 --> 35:59.060
看一下

35:59.060 --> 36:00.060
这边apn

36:02.060 --> 36:03.060
这里s number

36:05.570 --> 36:06.570
这是

36:06.570 --> 36:07.570
纪列

36:07.570 --> 36:09.570
123456

36:09.570 --> 36:11.570
123456

36:12.570 --> 36:13.570
第二个是name

36:13.570 --> 36:14.570
姓名

36:15.570 --> 36:17.570
然后是姓别

36:17.570 --> 36:18.570
6

36:18.570 --> 36:20.570
姓别的话判断一下吧

36:20.570 --> 36:22.570
姓别如果等于1

36:22.570 --> 36:23.570
那么就是什么

36:23.570 --> 36:24.570
女

36:24.570 --> 36:26.570
否则的话

36:26.570 --> 36:27.570
就是男

36:29.570 --> 36:30.570
OK

36:30.570 --> 36:31.570
然后burst

36:31.570 --> 36:32.570
burst

36:33.570 --> 36:34.570
出生年份

36:34.570 --> 36:35.570
还有什么邮箱

36:36.570 --> 36:37.570
email

36:37.570 --> 36:38.570
邮箱

36:39.570 --> 36:40.570
好

36:40.570 --> 36:41.570
最后一件是操作

36:41.570 --> 36:42.570
操作我们先暂时不管

36:42.570 --> 36:43.570
暂时不管

36:43.570 --> 36:44.570
我先划一个邪告

36:44.570 --> 36:45.570
先暂时不管

36:45.570 --> 36:46.570
OK

36:46.570 --> 36:48.570
那现在我们就搞定了

36:48.570 --> 36:49.570
搞定表格了

36:49.570 --> 36:50.570
好

36:50.570 --> 36:51.570
这个组件写好了之后

36:51.570 --> 36:53.570
咱们来试用一下这个组件

36:53.570 --> 36:54.570
在这边来

36:54.570 --> 36:56.570
试用一下这个组件

36:58.570 --> 37:00.570
找到这个index

37:00.570 --> 37:01.570
这个pages里边

37:01.570 --> 37:02.570
students

37:02.570 --> 37:03.570
students list

37:03.570 --> 37:04.570
在这里边试用一下这个组件

37:04.570 --> 37:06.570
导入这个组件

37:06.570 --> 37:07.570
import

37:07.570 --> 37:09.570
导入那个students

37:09.570 --> 37:10.570
table

37:10.570 --> 37:11.570
from

37:13.570 --> 37:14.570
什么呢

37:14.570 --> 37:16.570
返回上级目录

37:16.570 --> 37:17.570
再返回上级目录

37:17.570 --> 37:18.570
component

37:18.570 --> 37:20.570
students table

37:20.570 --> 37:21.570
好那么这里

37:21.570 --> 37:22.570
这个组件里边

37:22.570 --> 37:23.570
我们这里直接写个

37:23.570 --> 37:25.570
students

37:27.570 --> 37:28.570
table

37:28.570 --> 37:30.570
它不是要传一个学生

37:30.570 --> 37:31.570
学生宿主进去吗

37:31.570 --> 37:32.570
对不对

37:32.570 --> 37:33.570
students

37:33.570 --> 37:34.570
它要传一个学生宿主进去

37:34.570 --> 37:36.570
好了那么宿主哪来的呢

37:36.570 --> 37:38.570
我这就用阿迦克斯请求

37:38.570 --> 37:39.570
去得到一个宿主

37:39.570 --> 37:40.570
去得到一个学生宿主

37:40.570 --> 37:42.570
这里我们就

37:42.570 --> 37:43.570
直接把导进来吧

37:43.570 --> 37:45.570
反正导弯要导进来的

37:45.570 --> 37:47.570
导入那个什么

37:47.570 --> 37:48.570
导入那个

37:50.570 --> 37:52.570
从那个我们的API里边

37:52.570 --> 37:54.940
services

37:54.940 --> 37:56.940
students

37:56.940 --> 37:57.940
这里有search

37:57.940 --> 37:58.940
students

37:59.940 --> 38:00.940
先导入进来

38:00.940 --> 38:02.940
然后这里我们要用状态

38:02.940 --> 38:03.940
这是个函数所见

38:03.940 --> 38:04.940
我们就顺便用学习

38:04.940 --> 38:06.940
用一下我们之前学过的hook

38:07.940 --> 38:09.940
好像有段时间没用了

38:09.940 --> 38:10.940
顺便用一下

38:12.940 --> 38:14.940
导入什么use hook

38:14.940 --> 38:16.940
use state

38:17.940 --> 38:19.940
导入什么use effect

38:20.940 --> 38:21.940
先暂时写一下

38:21.940 --> 38:23.940
暂时先写一下

38:23.940 --> 38:24.940
use state

38:24.940 --> 38:25.940
里边

38:25.940 --> 38:28.940
我们是students

38:28.940 --> 38:30.940
有学生宿主

38:30.940 --> 38:32.940
默认情况下一个空宿主

38:33.940 --> 38:34.940
这里边

38:34.940 --> 38:35.940
自打而来

38:35.940 --> 38:36.940
是不是把它学生宿主给它

38:36.940 --> 38:37.940
对吧

38:37.940 --> 38:39.940
然后我们要夹载所有的学生

38:39.940 --> 38:40.940
OK

38:40.940 --> 38:43.940
我们这里use effect

38:43.940 --> 38:44.940
夹载所有学生

38:44.940 --> 38:45.940
夹载所有学生的时候

38:45.940 --> 38:47.940
我们这里是不是写个函数

38:47.940 --> 38:48.940
对吧

38:48.940 --> 38:50.940
这个函数只运行一次

38:50.940 --> 38:52.940
于是依赖相为一个空宿主

38:52.940 --> 38:54.940
依赖相为一个空宿主

38:54.940 --> 38:55.940
只运行一次

38:56.940 --> 38:57.940
好

38:57.940 --> 38:58.940
那么写好了之后

38:58.940 --> 38:59.940
我们在这里

39:00.940 --> 39:01.940
去夹载学生

39:01.940 --> 39:03.940
那么我们就调用

39:03.940 --> 39:04.940
search students

39:04.940 --> 39:05.940
对吧

39:05.940 --> 39:06.940
调用这个函数

39:06.940 --> 39:07.940
为兰德加传参数的

39:07.940 --> 39:08.940
就测试一下

39:08.940 --> 39:10.940
主要是做测试的

39:10.940 --> 39:11.940
if

39:11.940 --> 39:13.940
把服息的返回结果

39:13.940 --> 39:14.940
返回结果拿到

39:14.940 --> 39:15.940
拿到之后

39:15.940 --> 39:17.940
我们调用set students

39:17.940 --> 39:18.940
去设置学生

39:18.940 --> 39:19.940
从服息的返回结果里面

39:19.940 --> 39:20.940
拿到data

39:20.940 --> 39:21.940
对吧

39:21.940 --> 39:22.940
我们自己封装的

39:22.940 --> 39:23.940
之前还是不是做过了

39:23.940 --> 39:24.940
对吧

39:24.940 --> 39:25.940
我之前是自己封装的

39:25.940 --> 39:26.940
这个data式

39:26.940 --> 39:27.940
这个属性

39:27.940 --> 39:28.940
OK

39:28.940 --> 39:29.940
把这个数组

39:29.940 --> 39:30.940
设置到学生数组里面去

39:30.940 --> 39:31.940
就稍微写一下

39:31.940 --> 39:33.940
测试一下主要是

39:34.940 --> 39:35.940
看一下

39:36.940 --> 39:37.940
好

39:37.940 --> 39:38.940
那么这个样式就出来了

39:38.940 --> 39:39.940
样式出来了

39:39.940 --> 39:40.940
OK

39:40.940 --> 39:41.940
我们稍微调整一下这个样式

39:41.940 --> 39:43.940
这个tab

39:43.940 --> 39:44.940
这个表格

39:44.940 --> 39:45.940
宽度为百分之百

39:45.940 --> 39:47.940
然后box setting

39:47.940 --> 39:48.940
border box

39:48.940 --> 39:49.940
保存

39:50.940 --> 39:52.940
然后它的文本局中

39:52.940 --> 39:53.940
erland center

39:53.940 --> 39:56.640
好

39:56.640 --> 39:57.640
然后它里面

39:57.640 --> 39:58.640
每一个

39:58.640 --> 40:00.640
每一个td

40:00.640 --> 40:03.640
以及它的每一个tr

40:03.640 --> 40:04.640
th

40:04.640 --> 40:06.640
设置这些统一的样式

40:06.640 --> 40:07.640
应该是个border

40:07.640 --> 40:08.640
border的话

40:08.640 --> 40:10.640
一个像素solid

40:11.640 --> 40:12.640
ccc

40:12.640 --> 40:15.080
一个边框

40:15.080 --> 40:16.080
好

40:16.080 --> 40:18.080
然后我们再设置一下

40:18.080 --> 40:19.080
它的边框方

40:19.080 --> 40:20.080
折叠

40:20.080 --> 40:22.080
border collapse

40:22.080 --> 40:23.080
collapse

40:23.080 --> 40:24.080
把边框折叠起来

40:24.080 --> 40:26.080
表格边框折叠起来

40:26.080 --> 40:27.080
好

40:27.080 --> 40:28.080
然后再设置一下

40:28.080 --> 40:29.080
table的margin

40:29.080 --> 40:32.080
上下margin为20个像素

40:32.080 --> 40:34.080
左右轮为0

40:34.080 --> 40:35.080
好

40:35.080 --> 40:37.080
然后再设置一下每tr

40:37.080 --> 40:39.080
table下面的tr

40:39.080 --> 40:40.080
你设置个高度

40:40.080 --> 40:41.080
高度的话

40:41.080 --> 40:42.080
比方说

40:42.080 --> 40:44.080
35个像素

40:44.080 --> 40:46.520
差不多了

40:46.520 --> 40:48.520
表格出来了

40:48.520 --> 40:50.520
这里还够小问题

40:50.520 --> 40:51.520
就是这个样式

40:51.520 --> 40:52.520
你看这里我把遮住了

40:52.520 --> 40:54.520
高度不够的时候

40:54.520 --> 40:55.520
这边没有出现滚动条

40:55.520 --> 40:56.520
它没法滚动

40:56.520 --> 40:58.520
这个是我们之前设置的

40:58.520 --> 40:59.520
布局这里

40:59.520 --> 41:00.520
样式没有设置好

41:00.520 --> 41:01.520
因为布局这里

41:01.520 --> 41:02.520
妹这个区域

41:02.520 --> 41:03.520
主区

41:03.520 --> 41:04.520
它如果说内容

41:04.520 --> 41:06.520
超过尺寸的话

41:06.520 --> 41:08.520
也让它具有滚动条

41:08.520 --> 41:10.520
主区让它具有滚动条

41:10.520 --> 41:11.520
保存

41:11.520 --> 41:13.520
那么现在就有滚动条了

41:13.520 --> 41:15.520
那么这个表格就出来了

41:15.520 --> 41:16.520
就出来了

41:16.520 --> 41:17.520
好

41:17.520 --> 41:18.520
那么表格出来了

41:18.520 --> 41:19.520
那么最后

41:19.520 --> 41:20.520
剩下分页了

41:20.520 --> 41:21.520
分页主页了

41:21.520 --> 41:23.520
分页主页我们是不是之前已经有了

41:23.520 --> 41:25.520
在comment里边看一下

41:25.520 --> 41:27.520
过一下分页主页

41:27.520 --> 41:28.520
要传递这么一些属性

41:28.520 --> 41:30.520
当前页码总数据量

41:30.520 --> 41:32.520
页容量还有数字页码

41:32.520 --> 41:33.520
现在多少个

41:33.520 --> 41:34.520
然后一码改变了事件

41:34.520 --> 41:35.520
对吧有这么一些东西

41:35.520 --> 41:37.520
总之已经做好的分页主页了

41:37.520 --> 41:39.520
于是那我们目前所有的

41:39.520 --> 41:41.520
主页全部准备就绪

41:41.520 --> 41:43.520
我们现在要把它整合起来

41:43.520 --> 41:45.520
形成一个页面

41:45.520 --> 41:47.520
形成一个页面了

41:47.520 --> 41:49.520
不要说就用韩式主页做

41:49.520 --> 41:50.520
我们之前学过的Hook

41:50.520 --> 41:52.520
来做这个页面主页

41:52.520 --> 41:53.520
好

41:53.520 --> 41:55.520
现在我们要思考一个问题

41:55.520 --> 41:58.520
我们想做成什么样子

41:58.520 --> 41:59.520
我们现在是这样

41:59.520 --> 42:00.520
我现在是这样讲的

42:00.520 --> 42:03.520
我先把我的需求说清楚

42:03.520 --> 42:05.520
如果说我只说

42:05.520 --> 42:07.520
在这个页面里边做各种操作

42:07.520 --> 42:09.520
然后显示数据的话

42:09.520 --> 42:10.520
那跟之前就一样了

42:10.520 --> 42:12.520
跟路由也没什么关系了

42:12.520 --> 42:15.520
但是我这里想做成这个样子

42:15.520 --> 42:18.520
我希望我们的地址男里边

42:18.520 --> 42:20.520
他也能够反映出

42:20.520 --> 42:22.520
我们的查询条件

42:22.520 --> 42:24.520
比方说我们地址男里边

42:24.520 --> 42:26.520
我再看个地址吧

42:26.520 --> 42:27.520
我的地址男里边

42:27.520 --> 42:29.520
应该是这么一个地址

42:29.520 --> 42:31.520
当然前面的路径就不说了

42:31.520 --> 42:32.520
路径不说了

42:32.520 --> 42:33.520
关键是问号后边

42:33.520 --> 42:34.520
问号后边

42:34.520 --> 42:37.520
它是这么一种格式

42:37.520 --> 42:39.520
如果说你传了配级

42:39.520 --> 42:41.520
唯一就是limit

42:41.520 --> 42:42.520
为10

42:42.520 --> 42:43.520
那么就表示

42:43.520 --> 42:45.520
我要查询学生

42:45.520 --> 42:47.520
第一页

42:47.520 --> 42:50.520
每页显示10条数据

42:50.520 --> 42:53.520
key 如果传到比方说abc

42:53.520 --> 42:56.520
然后还有6等于1

42:56.520 --> 42:57.520
比方什么意思呢

42:57.520 --> 42:58.520
我要查询学生

42:58.520 --> 43:00.520
关键字是abc

43:00.520 --> 43:04.520
查询的是女同学

43:04.520 --> 43:05.520
每页显示10条

43:05.520 --> 43:07.520
第一页

43:07.520 --> 43:09.520
如果说你缺失了一些参数

43:09.520 --> 43:11.520
如果你说缺失了一些参数

43:11.520 --> 43:12.520
比方说缺失了

43:12.520 --> 43:13.520
缺失了一些参数

43:13.520 --> 43:16.520
那么默认第一页

43:16.520 --> 43:18.520
如果说你缺失了这个

43:18.520 --> 43:20.520
默认每页显示10条数据

43:20.520 --> 43:22.520
也就是说什么意思呢

43:22.520 --> 43:26.520
我们的很多查询条件

43:26.520 --> 43:28.520
它是来自于地址参数

43:28.520 --> 43:32.150
查询条件

43:32.150 --> 43:35.150
来自于地址参数

43:35.150 --> 43:37.150
不要这意思吧

43:37.150 --> 43:38.150
我们的查询条件

43:38.150 --> 43:42.150
它要来自于地址的参数

43:42.150 --> 43:44.150
那么大家想一想

43:44.150 --> 43:45.150
这个东西怎么做

43:45.150 --> 43:46.150
也就是换句话说

43:46.150 --> 43:48.150
地址参数变了

43:48.150 --> 43:49.150
地址参数变了

43:49.150 --> 43:50.150
是不是要重新查询

43:50.150 --> 43:52.150
我们要重新查询

43:52.150 --> 43:54.150
另外不要说我们这里

43:54.150 --> 43:55.150
选择哪

43:55.150 --> 43:56.150
这里写个关键字

43:56.150 --> 43:57.150
点查询

43:57.150 --> 43:59.150
是不是要改变地址参数

43:59.150 --> 44:01.150
他们是一堆硬的

44:01.150 --> 44:03.150
那么大家想一想

44:03.150 --> 44:04.150
你一下这个地方的思路

44:04.150 --> 44:05.150
该怎么来做

44:05.150 --> 44:06.150
如果说你以前

44:06.150 --> 44:07.150
做过这样的问题的话

44:07.150 --> 44:08.150
对你来说就是小儿科了

44:08.150 --> 44:09.150
但是如果你以前

44:09.150 --> 44:11.150
没有接触过这样的问题的话

44:11.150 --> 44:12.150
对大家可能会

44:12.150 --> 44:14.150
还是有那么一点难度的

44:14.150 --> 44:15.150
好想想怎么来做

44:17.150 --> 44:19.150
我们这里这样子来看

44:19.150 --> 44:21.150
就是整个这个一页面

44:21.150 --> 44:22.150
它是一个组件

44:22.150 --> 44:23.150
对吧

44:23.150 --> 44:24.150
Students List

44:24.150 --> 44:25.150
它是个组件

44:25.150 --> 44:26.150
这个组件它有自己的状态

44:26.150 --> 44:27.150
比方学生的数组

44:27.150 --> 44:28.150
是不是它自己的状态

44:28.150 --> 44:29.150
对吧

44:29.150 --> 44:30.150
它要自我维护的一个状态

44:30.150 --> 44:32.150
还有什么呢

44:32.150 --> 44:34.150
还有就是说

44:34.150 --> 44:36.150
总的纪度数

44:36.150 --> 44:37.150
一共有多少条数据

44:37.150 --> 44:39.150
都属于它的自身的状态

44:39.150 --> 44:40.150
对吧

44:40.150 --> 44:41.150
它有一些自身的状态

44:41.150 --> 44:43.150
这是它的一部分数据

44:43.150 --> 44:44.150
另外一部分数据呢

44:44.150 --> 44:46.150
它来自于地址南参数

44:46.150 --> 44:49.150
地址南参数是什么数据呢

44:49.150 --> 44:50.150
你想一想

44:50.150 --> 44:52.150
地址南参数我们怎么来获取

44:52.150 --> 44:54.150
怎么来获取比方说

44:54.150 --> 44:56.150
比方说这里有地址南参数

44:56.150 --> 44:58.150
比方说这里就有地址南参数

44:58.150 --> 44:59.150
这个地址南参数怎么来获取

44:59.150 --> 45:00.150
是不是讲过的

45:00.150 --> 45:01.150
上次和讲过的

45:01.150 --> 45:04.150
是不是通过属性里边的什么

45:04.150 --> 45:05.150
通过属性里边的啥

45:05.150 --> 45:06.150
常来获取

45:06.150 --> 45:07.150
Proposal

45:07.150 --> 45:08.150
Location

45:08.150 --> 45:09.150
对吧

45:09.150 --> 45:10.150
通过它来获取

45:10.150 --> 45:12.150
它是不是属性里边的数据

45:12.150 --> 45:13.150
也就是这个组件呢

45:13.150 --> 45:15.150
它一部分数据来自于状态

45:15.150 --> 45:17.150
一部分数据来自于属性

45:17.150 --> 45:18.150
对吧

45:18.150 --> 45:19.150
是这个意思吧

45:19.150 --> 45:20.150
对不对

45:20.150 --> 45:21.150
地址南参数的变化

45:21.150 --> 45:22.150
是不是就是属性的变化

45:22.150 --> 45:24.150
你想那么多干嘛呢

45:24.150 --> 45:26.150
它就是一个属性的变化而已

45:26.150 --> 45:27.150
地址南参数的变化

45:27.150 --> 45:29.150
就是属性变化而已

45:29.150 --> 45:31.150
它一部分数据来自于地址南参

45:31.150 --> 45:32.150
一部分数据来自于状态

45:32.150 --> 45:34.150
一部分数据来自于属性

45:34.150 --> 45:35.150
好 OK

45:35.150 --> 45:36.150
我们这里呢

45:36.150 --> 45:39.150
首先搞定第一件事情

45:39.150 --> 45:41.150
甭管你有没有写地址南参数

45:41.150 --> 45:42.150
因为我们刚才说了

45:42.150 --> 45:43.150
根据刚才的分析

45:43.150 --> 45:45.150
地址南参数它是有默认值的

45:45.150 --> 45:47.150
如果你没有写这个参数呢

45:47.150 --> 45:49.150
因为它来提供查询条件

45:49.150 --> 45:51.150
查询条件是有默认值的

45:51.150 --> 45:53.150
如果你没有写参数

45:53.150 --> 45:55.150
那么我的默认值是啥等等

45:55.150 --> 45:59.150
我就能得到默认值

45:59.150 --> 46:02.150
于是我们这里先写这么一个函数

46:02.150 --> 46:04.150
这个函数呢

46:04.150 --> 46:06.150
可以帮助我来获取

46:06.150 --> 46:10.150
地址南参数中提供的查询信息

46:10.150 --> 46:12.150
写这么一个辅助函数

46:12.150 --> 46:14.150
get query

46:14.150 --> 46:16.150
打个注释

46:16.150 --> 46:18.150
这函数干嘛用的

46:18.150 --> 46:20.150
该函数

46:20.150 --> 46:26.150
用于获取地址南参数中提供的

46:26.150 --> 46:29.150
提供的查询条件

46:29.150 --> 46:31.150
因为我们的查询条件在哪儿

46:31.150 --> 46:33.150
在地址参数里边

46:33.150 --> 46:35.150
那么地址参数里面提供的查询条件

46:35.150 --> 46:38.150
我们希望有个函数来帮我们获取

46:38.150 --> 46:41.150
返回一个对象

46:41.150 --> 46:43.150
就是把它返回一个对象

46:43.150 --> 46:46.150
然后呢

46:46.150 --> 46:52.150
如果某些条件在地址中缺失

46:52.150 --> 46:58.150
该函数会使用默认值

46:58.150 --> 47:00.150
总之通过这个函数

47:00.150 --> 47:03.150
我就能够返回一个完整的查询条件

47:03.150 --> 47:06.150
这个查询条件最终是通过地址南参数给我的

47:06.150 --> 47:11.150
如果说它没有提供条件的话

47:11.150 --> 47:13.150
我就使用默认值

47:13.150 --> 47:14.150
我写这么一个函数

47:14.150 --> 47:16.150
那么这个函数怎么写呢

47:16.150 --> 47:19.150
首先你要把地址南参数传给我

47:19.150 --> 47:21.150
就是这个字母串

47:21.150 --> 47:23.150
这个字母串要传给我

47:23.150 --> 47:25.150
要把它传给我

47:25.150 --> 47:26.150
传给我之后

47:26.150 --> 47:28.150
我是不是就可以利用我们之前

47:28.150 --> 47:30.150
学过的第三方库

47:30.150 --> 47:33.150
使用的第三方库叫做

47:34.150 --> 47:39.150
通过它把它解析成为一个对象

47:39.150 --> 47:40.150
对不对

47:40.150 --> 47:42.150
解析成为一个对象

47:42.150 --> 47:43.150
我们来看一下

47:43.150 --> 47:45.150
解析成为一个对象

47:45.150 --> 47:46.150
query对象

47:46.150 --> 47:47.150
比方说

47:47.150 --> 47:49.150
这里我们直接返回query对象

47:49.150 --> 47:51.150
看一下这个方法

47:51.150 --> 47:53.150
看一下用起来怎么样

47:53.150 --> 47:54.150
接下来

47:54.150 --> 47:56.150
我们这些组件先不着急写

47:56.150 --> 47:58.150
先不着急写这些组件

47:58.150 --> 47:59.150
把这些东西都注射掉

47:59.150 --> 48:00.150
先不着急写这些组件

48:00.150 --> 48:02.150
我们先调入这个方法

48:02.150 --> 48:04.150
看一下能不能把正确的

48:04.150 --> 48:05.150
获取到地址南参数

48:06.150 --> 48:07.150
12起

48:07.150 --> 48:08.150
12起怎么获取

48:08.150 --> 48:09.150
我们要传给它一个

48:09.150 --> 48:10.150
就是查询字母串

48:10.150 --> 48:11.150
怎么来获取

48:11.150 --> 48:13.150
是不是通过probs里边的

48:13.150 --> 48:14.150
location

48:14.150 --> 48:15.150
12起字母串

48:15.150 --> 48:16.150
把东西传进去

48:16.150 --> 48:18.150
是不是可以获取到

48:18.150 --> 48:19.150
query对象

48:20.150 --> 48:21.150
query对象

48:21.150 --> 48:22.150
打印出来看一下

48:22.150 --> 48:23.150
query

48:23.150 --> 48:24.150
保存

48:25.150 --> 48:26.150
点右键查询

48:26.150 --> 48:28.150
点右键看控材

48:28.150 --> 48:29.150
刷新

48:29.150 --> 48:31.150
有些警告不管他

48:31.150 --> 48:32.150
这个控材箱目前没有

48:32.150 --> 48:33.150
没有东西对吧

48:33.150 --> 48:34.150
那么现在给他

48:34.150 --> 48:36.150
给他一些地址南参数

48:36.150 --> 48:38.150
给他一些地址南参数看一下

48:39.150 --> 48:41.150
那是有了地址南参数过后

48:41.150 --> 48:42.150
他的属性值

48:42.150 --> 48:43.150
那个location的属性值

48:43.150 --> 48:44.150
是不是发生变化了

48:44.150 --> 48:45.150
那么通过这个属性值

48:45.150 --> 48:46.150
是不是解析出来一个对象

48:46.150 --> 48:47.150
对吧

48:47.150 --> 48:49.150
通过属性值就计算出来一些对象了

48:50.150 --> 48:51.150
好

48:51.150 --> 48:52.150
但这个对象里边

48:52.150 --> 48:53.150
还有个问题

48:53.150 --> 48:54.150
什么问题呢

48:54.150 --> 48:57.150
就是有些参数缺失的情况下

48:57.150 --> 48:59.150
是不是没有默认值啊

48:59.150 --> 49:00.150
现在

49:00.150 --> 49:01.150
没有默认值

49:01.150 --> 49:02.150
好

49:02.150 --> 49:03.150
我们把默认值搞定

49:03.150 --> 49:04.150
我们这里写

49:04.150 --> 49:05.150
这个很简单

49:05.150 --> 49:06.150
写上个对象就行了

49:07.150 --> 49:09.150
query default

49:09.150 --> 49:11.150
默认的

49:11.150 --> 49:12.150
默认值

49:12.150 --> 49:13.150
哪些默认值呢

49:13.150 --> 49:14.150
像什么配戏

49:14.150 --> 49:15.150
默认为1

49:15.150 --> 49:16.150
nm程

49:16.150 --> 49:17.150
默认为10

49:17.150 --> 49:18.150
key

49:18.150 --> 49:19.150
默认为空置无串

49:19.150 --> 49:20.150
还有什么

49:21.150 --> 49:22.150
还有那个啥

49:22.150 --> 49:23.150
还有6

49:23.150 --> 49:24.150
6

49:24.150 --> 49:25.150
性别

49:25.150 --> 49:26.150
默认为

49:26.150 --> 49:27.150
多少

49:27.150 --> 49:28.150
性别默认为-1

49:29.150 --> 49:30.150
好

49:30.150 --> 49:31.150
那么这是真实的

49:31.150 --> 49:32.150
地址栏参数的对象

49:32.150 --> 49:34.150
这是我们的默认值

49:34.150 --> 49:35.150
那两个一混合

49:35.150 --> 49:36.150
是不是得到最多的结果

49:36.150 --> 49:37.150
反而会什么

49:37.150 --> 49:39.150
objects

49:39.150 --> 49:40.150
or sign

49:43.100 --> 49:44.100
或者说我们这里

49:44.100 --> 49:45.100
重新给它复制吗

49:46.100 --> 49:47.100
query

49:49.100 --> 49:50.100
or sign

49:51.100 --> 49:52.100
query

49:52.100 --> 49:53.100
然后

49:53.100 --> 49:54.100
这样子

49:54.100 --> 49:55.100
重新复制

49:55.100 --> 49:56.100
query

49:58.100 --> 49:59.100
query default

49:59.100 --> 50:00.100
query

50:00.100 --> 50:01.100
对吧

50:01.100 --> 50:02.100
重新给它复制

50:02.100 --> 50:03.100
最后把query返回

50:04.100 --> 50:05.100
报算

50:05.100 --> 50:06.100
你看一下

50:06.100 --> 50:07.100
现在来看

50:07.100 --> 50:09.100
无论你传了多少个地址栏参数

50:09.100 --> 50:11.100
它是不是4个值全是齐的

50:11.100 --> 50:13.100
查询条件全部都齐的

50:13.100 --> 50:14.100
对不对

50:14.100 --> 50:15.100
而且我们说

50:15.100 --> 50:16.100
不给它传地址栏参数

50:16.100 --> 50:17.100
是不是也是齐的

50:17.100 --> 50:18.100
对不对

50:18.100 --> 50:19.100
因为它是混合产生的

50:19.100 --> 50:20.100
这个没问题吧

50:20.100 --> 50:21.100
通过这么一个函数

50:21.100 --> 50:22.100
总之我们这个函数

50:22.100 --> 50:23.100
搞定的就是

50:24.100 --> 50:25.100
它的根源

50:25.100 --> 50:26.100
它的数据的根源在地址栏参数

50:26.100 --> 50:27.100
如果说没有

50:27.100 --> 50:29.100
我给它用一些默认值

50:30.100 --> 50:31.100
还有什么问题呢

50:31.100 --> 50:32.100
其实还有一个问题

50:32.100 --> 50:33.100
一个不太

50:33.100 --> 50:34.100
容易注意的小问题

50:34.100 --> 50:35.100
就是内形

50:35.100 --> 50:36.100
你看这个

50:36.100 --> 50:38.100
Sex的内形是不是

50:38.100 --> 50:39.100
制服串

50:39.100 --> 50:40.100
因为地址参数读出来

50:40.100 --> 50:41.100
都是制服串

50:41.100 --> 50:42.100
都是制服串

50:42.100 --> 50:43.100
那么这样子不太合适

50:43.100 --> 50:44.100
不太合适

50:44.100 --> 50:46.100
我们希望Namex

50:46.100 --> 50:47.100
Page,Sex

50:47.100 --> 50:48.100
这些东西

50:48.100 --> 50:49.100
都是数字

50:49.100 --> 50:50.100
希望他们都是数字

50:50.100 --> 50:51.100
然后做一下内形

50:51.100 --> 50:52.100
转换不完

50:52.100 --> 50:53.100
对不对

50:53.100 --> 50:54.100
Namex

50:55.100 --> 50:56.100
转换一下

50:56.100 --> 50:57.100
Namex

50:59.420 --> 51:00.420
还有什么Page

51:00.420 --> 51:01.420
转换一下

51:01.420 --> 51:02.420
内形转换一下

51:02.420 --> 51:03.420
还有什么Sex

51:04.420 --> 51:05.420
做一下内形转换

51:05.420 --> 51:06.420
总之这个函数

51:06.420 --> 51:07.420
把这些事情搞定

51:07.420 --> 51:08.420
保存

51:09.420 --> 51:10.420
这样子

51:10.420 --> 51:11.420
你传的虽然是制服串

51:11.420 --> 51:12.420
但是得到的结果

51:12.420 --> 51:13.420
是一个数字

51:14.420 --> 51:15.420
没问题吧

51:15.420 --> 51:16.420
你先把这个函数写好

51:16.420 --> 51:17.420
先其他的先没关

51:17.420 --> 51:18.420
因为我们肯定要的

51:18.420 --> 51:19.420
这个东西

51:19.420 --> 51:20.420
这个东西肯定是需要的

51:20.420 --> 51:21.420
我们需要知道

51:21.420 --> 51:22.420
我们一会要查询学生

51:22.420 --> 51:24.420
需要知道查询条件是啥

51:24.420 --> 51:26.420
这个玩意是肯定是跑不了的

51:26.420 --> 51:27.420
肯定是跑不了的

51:27.420 --> 51:29.420
需要知道这个查询条件

51:31.420 --> 51:33.420
那么拿到这个东西之后

51:33.420 --> 51:34.420
拿到这个东西之后

51:35.420 --> 51:36.420
接下来

51:36.420 --> 51:38.420
我不是有状态吗

51:38.420 --> 51:39.420
我不是要查询学生吗

51:39.420 --> 51:40.420
对不对

51:40.420 --> 51:41.420
条件我们拿到了

51:41.420 --> 51:42.420
不是要查询学生吗

51:42.420 --> 51:43.420
OK

51:43.420 --> 51:44.420
我们这里肯定有状态

51:44.420 --> 51:45.420
那么状态来了

51:45.420 --> 51:46.420
状态出来了

51:47.420 --> 51:48.420
一个学生数组

51:48.420 --> 51:49.420
对吧

51:49.420 --> 51:50.420
就是自己的状态

51:50.420 --> 51:51.420
还有什么状态呢

51:51.420 --> 51:52.420
还有就是学生总数

51:52.420 --> 51:53.420
总数

51:53.420 --> 51:55.420
我们都把分开写

51:56.420 --> 51:58.860
总数

51:58.860 --> 51:59.860
总数

52:01.860 --> 52:02.860
总数默认是0吗

52:02.860 --> 52:03.860
默认是0

52:04.860 --> 52:05.860
是不是有这两个状态

52:05.860 --> 52:06.860
对吧

52:06.860 --> 52:07.860
这两个状态

52:07.860 --> 52:08.860
我们是不是得搞定

52:08.860 --> 52:09.860
好

52:09.860 --> 52:10.860
我们一个个来

52:10.860 --> 52:12.860
首先是学生数组

52:12.860 --> 52:14.860
学生数组是不是要查询

52:15.860 --> 52:16.860
你告诉我

52:16.860 --> 52:17.860
学生数组是不是要查询

52:17.860 --> 52:18.860
肯定要查询

52:18.860 --> 52:20.860
跑得掉吗

52:20.860 --> 52:22.860
学生数组是不是一定会查询

52:22.860 --> 52:23.860
而且他的查询

52:23.860 --> 52:25.860
是不是一定是根据这个条件

52:25.860 --> 52:26.860
查询的

52:26.860 --> 52:28.860
只要这个条件不变

52:28.860 --> 52:29.860
你想想个道理

52:29.860 --> 52:31.860
这个学生数组

52:31.860 --> 52:33.860
中间那个表格这一块

52:33.860 --> 52:34.860
学生数组这一块

52:34.860 --> 52:36.860
只要查询条件不变

52:36.860 --> 52:37.860
是不是他就不变

52:37.860 --> 52:39.860
查询条件一变

52:39.860 --> 52:40.860
是不是他要跟着变

52:40.860 --> 52:41.860
对吧

52:41.860 --> 52:43.860
那么这一块东西

52:43.860 --> 52:44.860
是不是我们就可以抽离出去

52:44.860 --> 52:45.860
看着

52:45.860 --> 52:46.860
我们之前学过互可

52:46.860 --> 52:47.860
要灵活使用

52:47.860 --> 52:48.860
你会发现互可用

52:48.860 --> 52:49.860
来解决这个问题

52:49.860 --> 52:51.860
真的是非常非常舒服

52:51.860 --> 52:52.860
实际上内组件

52:52.860 --> 52:53.860
来解决个问题还挺麻烦的

52:53.860 --> 52:54.860
互可的解决这个问题

52:54.860 --> 52:56.860
特别特别舒服

52:57.860 --> 52:58.860
看着

52:58.860 --> 52:59.860
怎么来做

52:59.860 --> 53:01.860
那么这里怎么怎么怎么玩

53:01.860 --> 53:02.860
我们看一下

53:02.860 --> 53:03.860
因为

53:03.860 --> 53:06.860
服务器反而回到结果

53:06.860 --> 53:07.860
他这里

53:08.860 --> 53:10.860
我要不然把学生和总数

53:10.860 --> 53:12.860
写到一起得了

53:12.860 --> 53:13.860
我想想

53:13.860 --> 53:16.860
我要不然把学生和总数

53:16.860 --> 53:18.860
写到一起得了

53:19.860 --> 53:20.860
写到一起

53:20.860 --> 53:21.860
那行吧

53:21.860 --> 53:22.860
反正是服务器的响应结果

53:22.860 --> 53:24.860
我们就得用resp

53:24.860 --> 53:26.860
表示服务器的响应结果

53:29.620 --> 53:31.620
就是用这个东西

53:31.620 --> 53:33.620
resp

53:33.620 --> 53:35.620
initial resp

53:35.620 --> 53:37.620
一个空的对象

53:37.620 --> 53:38.620
就是服务器的响应结果

53:38.620 --> 53:40.620
它是我们的状态

53:40.620 --> 53:41.620
这个服务器的响应结果

53:41.620 --> 53:42.620
是不是会变化

53:42.620 --> 53:43.620
什么时候会变化

53:43.620 --> 53:45.620
条件变化的时候

53:45.620 --> 53:46.620
它就会变化

53:46.620 --> 53:48.620
因此我们可以把这一块东西

53:48.620 --> 53:50.620
抽象成一个函数

53:50.620 --> 53:51.620
就是

53:51.620 --> 53:52.620
get

53:52.620 --> 53:53.620
resp

53:53.620 --> 54:00.590
获取服务器的响应结果

54:00.590 --> 54:02.590
你给我传一个什么呢

54:02.590 --> 54:04.590
传一个查询条件

54:04.590 --> 54:06.590
这个参数是什么

54:06.590 --> 54:07.590
这个参数query

54:07.590 --> 54:10.590
它是查询条件对象

54:10.590 --> 54:12.590
我会根据这个查询

54:12.590 --> 54:14.590
这个条件对象来进行查询

54:14.590 --> 54:15.590
查询

54:15.590 --> 54:17.590
然后得到服务器的响应结果

54:18.590 --> 54:19.590
好 那么这个里面怎么写呢

54:19.590 --> 54:21.590
就把这个写进来

54:21.590 --> 54:23.590
我们在这里产生一个状态

54:23.590 --> 54:24.590
use.

54:24.590 --> 54:25.590
产生一个状态

54:26.590 --> 54:27.590
怎么冒错了

54:29.590 --> 54:30.590
这里

54:30.590 --> 54:31.590
我们要用什么

54:31.590 --> 54:32.590
要用use

54:32.590 --> 54:33.590
use.resp

54:33.590 --> 54:35.590
我们自定义的后果

54:35.590 --> 54:36.590
use.resp

54:36.590 --> 54:37.590
那么这边一会儿

54:37.590 --> 54:39.590
我们就可以是这样子使用

54:39.590 --> 54:41.590
use.resp

54:41.590 --> 54:42.590
use.resp

54:44.590 --> 54:45.590
把query传进去

54:45.590 --> 54:47.590
查询条件传进去

54:48.590 --> 54:50.590
只要查询条件不变

54:50.590 --> 54:52.590
那么我们这个地方就不变

54:52.590 --> 54:53.590
如果查询条件变了

54:53.590 --> 54:55.590
这个地方肯定要重新过去

54:55.590 --> 54:56.590
我这里返回咋了

54:56.590 --> 54:57.590
直接返回这个resp

54:57.590 --> 54:58.590
就完事了

54:59.590 --> 55:01.590
这个东西我们以前讲过了

55:01.590 --> 55:02.590
不要扔给我了

55:02.590 --> 55:04.590
然后我们在这里面写副作用

55:04.590 --> 55:05.590
use.fax

55:05.590 --> 55:06.590
写副作用

55:08.590 --> 55:10.590
依赖像是啥

55:10.590 --> 55:11.590
依赖像是啥

55:11.590 --> 55:13.590
是不是query里面的属性

55:13.590 --> 55:14.590
对不对

55:14.590 --> 55:18.590
依赖像就是query里面的属性

55:18.590 --> 55:20.590
query里面的属性

55:20.590 --> 55:23.590
只要query没有发生变化

55:24.590 --> 55:25.590
那么它里面的属性

55:25.590 --> 55:26.590
只没有发生变化

55:26.590 --> 55:27.590
ok

55:27.590 --> 55:28.590
那我就不用重新查询

55:28.590 --> 55:29.590
因为它的数据

55:29.590 --> 55:31.590
依赖它的key

55:31.590 --> 55:33.590
依赖它的nemet

55:33.590 --> 55:37.590
依赖它的query

55:37.590 --> 55:38.590
sax

55:38.590 --> 55:39.590
依赖它的配级

55:39.590 --> 55:40.590
就依赖这些属性

55:40.590 --> 55:41.590
只要这些属性

55:41.590 --> 55:42.590
没有发生变化

55:42.590 --> 55:43.590
ok

55:43.590 --> 55:44.590
那我就不变

55:44.590 --> 55:45.590
我就不变

55:45.590 --> 55:46.590
只要这些属性

55:46.590 --> 55:47.590
任何一个变了

55:47.590 --> 55:48.590
我是不是都要触发

55:48.590 --> 55:49.590
重新操作

55:49.590 --> 55:50.590
重新查询

55:50.590 --> 55:51.590
对不对

55:51.590 --> 55:52.590
那么重新查询怎么查询

55:52.590 --> 55:54.590
是不是就surge student

55:54.590 --> 55:56.590
surge student

55:56.590 --> 55:57.590
然后传什么

55:57.590 --> 55:58.590
是不是查询对象

55:58.590 --> 55:59.590
直接传进去

55:59.590 --> 56:00.590
对吧

56:00.590 --> 56:01.590
查询对象直接传进去

56:01.590 --> 56:02.590
好

56:02.590 --> 56:03.590
那这里

56:03.590 --> 56:04.590
它告诉你

56:04.590 --> 56:05.590
它告诉你

56:05.590 --> 56:08.590
让你就直接使用对象得了

56:08.590 --> 56:10.590
让你直接使用对象得了

56:10.590 --> 56:12.590
但是这样会有一个问题

56:12.590 --> 56:13.590
因为

56:13.590 --> 56:14.590
如果用对象的话

56:14.590 --> 56:15.590
它比较的是地址

56:15.590 --> 56:17.590
它比较的是对象地址

56:17.590 --> 56:18.590
明白这个意思吗

56:18.590 --> 56:20.590
它比较的是对象地址

56:20.590 --> 56:22.590
因为每一次刷新

56:22.590 --> 56:23.590
每一次重新宣展

56:23.590 --> 56:24.590
对象的地址

56:24.590 --> 56:25.590
它都会变化

56:25.590 --> 56:27.590
因为重新调用这个函数

56:27.590 --> 56:28.590
始终会

56:28.590 --> 56:30.590
它会导致对象地址

56:30.590 --> 56:31.590
发生变化

56:31.590 --> 56:32.590
要不然的话

56:32.590 --> 56:34.590
我们这里就这样写吧

56:34.590 --> 56:35.590
这样子写

56:35.590 --> 56:36.590
把分开传递

56:36.590 --> 56:37.590
分开传递

56:37.590 --> 56:38.590
key

56:38.590 --> 56:39.590
query

56:39.590 --> 56:40.590
key

56:42.590 --> 56:43.590
nimate

56:43.590 --> 56:44.590
query

56:44.590 --> 56:45.590
nimate

56:45.590 --> 56:47.970
6

56:48.970 --> 56:49.970
query

56:49.970 --> 56:50.970
6

56:51.970 --> 56:52.970
page

56:52.970 --> 56:53.970
query.page

56:53.970 --> 56:54.970
当然我们

56:54.970 --> 56:55.970
如果你知道你自己在干嘛的话

56:55.970 --> 56:57.970
也可以利用一个注释

56:57.970 --> 56:58.970
让它不要去报警告

56:58.970 --> 56:59.970
因为我们这仅仅是为了

56:59.970 --> 57:01.970
让它不要报警告而已

57:01.970 --> 57:02.970
其他都没啥

57:03.970 --> 57:04.970
这里查询所有学生

57:04.970 --> 57:05.970
对吧

57:05.970 --> 57:06.970
这是它的依赖项

57:06.970 --> 57:07.970
查完了过后

57:07.970 --> 57:09.970
是不是拿到福奇的返回结果

57:09.970 --> 57:10.970
对不对

57:10.970 --> 57:11.970
拿到福奇的返回结果

57:11.970 --> 57:12.970
我们要干嘛

57:12.970 --> 57:13.970
是不是把这个返回结果

57:13.970 --> 57:14.970
重新覆盖掉

57:14.970 --> 57:15.970
risp

57:15.970 --> 57:16.970
对吧

57:16.970 --> 57:17.970
好

57:18.970 --> 57:19.970
把这个R

57:19.970 --> 57:20.970
重新覆盖掉

57:20.970 --> 57:21.970
就完事了

57:21.970 --> 57:23.970
这就是副作用操作

57:23.970 --> 57:24.970
没问题吧

57:25.970 --> 57:26.970
好

57:26.970 --> 57:27.970
那么这样子一来

57:27.970 --> 57:29.970
我们这里是不是拿到福奇的返回结果了

57:29.970 --> 57:30.970
返回结果了

57:30.970 --> 57:31.970
它有默认值

57:31.970 --> 57:32.970
默认值是一个空对象

57:32.970 --> 57:33.970
对不对

57:33.970 --> 57:34.970
当然也不是空对象

57:34.970 --> 57:35.970
total

57:35.970 --> 57:36.970
这里的总数

57:36.970 --> 57:38.970
总数的话是

57:38.970 --> 57:39.970
count

57:39.970 --> 57:40.970
count

57:40.970 --> 57:41.970
这个数字

57:41.970 --> 57:42.970
0

57:42.970 --> 57:44.970
然后是data

57:44.970 --> 57:45.970
就学生数据

57:45.970 --> 57:47.970
学生数据是一个空数组

57:47.970 --> 57:48.970
福奇的返回结果

57:48.970 --> 57:49.970
默认值

57:50.970 --> 57:51.970
每一次确认完过后

57:51.970 --> 57:53.970
它就去进行副作用操作

57:53.970 --> 57:54.970
不是每一次确认完

57:54.970 --> 57:56.970
只要一旦发生变化之后

57:56.970 --> 57:58.970
它要去进行重新查询

57:58.970 --> 58:00.970
重新拿到这个数据

58:00.970 --> 58:01.970
OK

58:01.970 --> 58:04.410
那么回到这儿来

58:04.410 --> 58:05.410
接下来

58:05.410 --> 58:07.410
事情就变得很简单了

58:07.410 --> 58:08.410
看着

58:10.410 --> 58:11.410
这里的查询条件

58:11.410 --> 58:14.410
defaultsValue查询条件是啥

58:14.410 --> 58:15.410
你告诉我

58:15.410 --> 58:16.410
这里该天啥

58:16.410 --> 58:17.410
默认值该天啥

58:18.410 --> 58:19.410
它的默认值该天啥

58:19.410 --> 58:21.410
是不是来自于地址参数

58:21.410 --> 58:22.410
对吧

58:22.410 --> 58:24.410
是不是来自于query.key

58:24.410 --> 58:25.410
是不是这样子

58:25.410 --> 58:27.410
来自于query.key

58:27.410 --> 58:28.410
sex该天啥

58:28.410 --> 58:30.410
query.sex对吧

58:30.410 --> 58:32.410
是这样子吧

58:32.410 --> 58:34.410
我们先不看下面的

58:34.410 --> 58:35.410
先不看下面的

58:35.410 --> 58:36.410
先不看这个玩意儿

58:36.410 --> 58:38.410
至少做一颗没问题吧

58:38.410 --> 58:39.410
看着

58:40.410 --> 58:41.410
装形你看一下

58:41.410 --> 58:43.410
是不是abc

58:43.410 --> 58:44.410
选中的是e

58:44.410 --> 58:45.410
我们改变地址

58:45.410 --> 58:46.410
比如说

58:46.410 --> 58:47.410
key等于123

58:47.410 --> 58:49.410
sex等于-1

58:49.410 --> 58:51.410
你看一下是不是这样子

58:51.410 --> 58:53.410
它始终是根据地址变化的

58:53.410 --> 58:55.410
因为地址的数据其实就是属性

58:55.410 --> 58:57.410
它把属性的数据传递过来

58:57.410 --> 58:59.410
传递到这儿来

58:59.410 --> 59:01.410
来自于这里的数据

59:01.410 --> 59:03.410
OK 没问题吧

59:03.410 --> 59:05.410
应该没问题

59:05.410 --> 59:06.410
好

59:06.410 --> 59:07.410
设计我们一会再说

59:07.410 --> 59:08.410
一会再说

59:08.410 --> 59:11.410
再看我们学生列表

59:11.410 --> 59:12.410
学生列表

59:12.410 --> 59:14.410
学生列表的学生数据来自于哪

59:14.410 --> 59:16.410
来自于服气返回的data

59:16.410 --> 59:17.410
对吧

59:17.410 --> 59:18.410
来自于这儿

59:18.410 --> 59:20.410
保存你看一下

59:20.410 --> 59:21.410
这是学生的数据

59:21.410 --> 59:23.410
是不是来自于查询结果

59:23.410 --> 59:25.410
是不是来自于查询结果

59:25.410 --> 59:26.410
因为我们一看

59:26.410 --> 59:28.410
它的数据是怎么流动的

59:28.410 --> 59:29.410
首先

59:29.410 --> 59:30.410
这是属性

59:30.410 --> 59:32.410
你也不要把它看成什么地址

59:32.410 --> 59:34.410
它最本质的东西是属性

59:34.410 --> 59:36.410
这是来自于属性

59:36.410 --> 59:38.410
来自于属性里面的数据

59:38.410 --> 59:40.410
把它解析成为一个对象

59:41.410 --> 59:43.410
属性里面的有查询条件

59:43.410 --> 59:45.410
根据查询条件

59:45.410 --> 59:47.410
我们这里使用副作用查询

59:47.410 --> 59:49.410
使用副作用查询

59:49.410 --> 59:50.410
如果你这一块感觉有点晕

59:50.410 --> 59:52.410
那里之前的后可是有问题的

59:52.410 --> 59:54.410
学习的起来是有问题的

59:54.410 --> 59:56.410
那么这一块就是

59:56.410 --> 59:58.410
我自己构建一个就是状态

59:58.410 --> 01:00:00.410
然后做了一些副作用操作

01:00:00.410 --> 01:00:02.410
只要某些东西发生变化过后了

01:00:02.410 --> 01:00:04.410
我重新去更改这个状态

01:00:04.410 --> 01:00:05.410
就做这件事情

01:00:05.410 --> 01:00:07.410
把它状态返回

01:00:07.410 --> 01:00:09.410
好 那么这边呢

01:00:09.410 --> 01:00:11.410
拿到这个查询数据之后

01:00:11.410 --> 01:00:13.410
我们把这个查询条件

01:00:13.410 --> 01:00:14.410
放进去

01:00:14.410 --> 01:00:16.410
拿到这个服务器数据

01:00:16.410 --> 01:00:18.410
把这个服务器的数据作为

01:00:18.410 --> 01:00:20.410
数组 把它的数组放到这儿了

01:00:20.410 --> 01:00:22.410
对吧 就没问题了

01:00:22.410 --> 01:00:23.410
好 这是这一块

01:00:23.410 --> 01:00:24.410
那么我们现在看一下

01:00:24.410 --> 01:00:25.410
改一下地址哪

01:00:25.410 --> 01:00:27.410
T 不写

01:00:27.410 --> 01:00:28.410
不写的话 是不是查所有学生

01:00:28.410 --> 01:00:30.410
你看一下 是不是所有学生

01:00:30.410 --> 01:00:32.410
对吧 那么这状态是不是统一了

01:00:32.410 --> 01:00:34.410
好 那么接下来下面是Pager

01:00:34.410 --> 01:00:36.410
就是分页

01:00:36.410 --> 01:00:38.410
导入分页

01:00:38.410 --> 01:00:40.410
Pager from

01:00:40.410 --> 01:00:44.040
Components

01:00:44.040 --> 01:00:46.040
Common

01:00:46.040 --> 01:00:47.040
Pager

01:00:47.040 --> 01:00:48.040
导入分页的组件

01:00:48.040 --> 01:00:50.040
我们之前写过的

01:00:50.040 --> 01:00:51.040
好 来吧

01:00:51.040 --> 01:00:52.040
再写一下这个组件

01:00:52.040 --> 01:00:53.040
这个组件

01:00:53.040 --> 01:00:55.040
我们把它放到一个DIV里边吧

01:00:55.040 --> 01:00:57.040
放在DIV里边

01:00:57.040 --> 01:00:58.040
写上这么一个组件

01:00:58.040 --> 01:01:00.040
这个组件里面不是要传东西吗

01:01:00.040 --> 01:01:01.040
来吧 一个个传

01:01:01.040 --> 01:01:03.040
好 第一个Current

01:01:03.040 --> 01:01:05.040
Current

01:01:05.040 --> 01:01:06.040
我看一下

01:01:06.040 --> 01:01:09.740
我应该没记错吧

01:01:10.740 --> 01:01:12.740
Pager

01:01:12.740 --> 01:01:13.740
初始页码

01:01:13.740 --> 01:01:14.740
初始页码

01:01:14.740 --> 01:01:16.740
初始页码是不是来自于

01:01:16.740 --> 01:01:17.740
查询条件里面的啥

01:01:17.740 --> 01:01:19.740
配级 对吧

01:01:19.740 --> 01:01:20.740
是不是

01:01:20.740 --> 01:01:21.740
是不是这样子

01:01:21.740 --> 01:01:22.740
好 然后呢

01:01:22.740 --> 01:01:24.740
头头总数据量

01:01:24.740 --> 01:01:25.740
总数据量来自于哪

01:01:25.740 --> 01:01:27.740
来自于我们想服务

01:01:27.740 --> 01:01:29.740
去想应结果里面的Count

01:01:29.740 --> 01:01:30.740
对不对

01:01:30.740 --> 01:01:32.740
还是给它值呗

01:01:32.740 --> 01:01:34.740
里面的夜容量

01:01:34.740 --> 01:01:36.740
夜容量是不是来自于

01:01:36.740 --> 01:01:38.740
查询条件里面的

01:01:38.740 --> 01:01:40.740
Current里面的Name

01:01:40.740 --> 01:01:42.740
对吧

01:01:42.740 --> 01:01:44.740
好 然后这里

01:01:44.740 --> 01:01:45.740
PagePanelNumber

01:01:45.740 --> 01:01:46.740
这个就写死就行了

01:01:46.740 --> 01:01:48.740
数字页码有多少个

01:01:48.740 --> 01:01:50.740
数字页码直接写死就得了

01:01:50.740 --> 01:01:51.740
5个嘛

01:01:51.740 --> 01:01:53.740
好 保存你看一下

01:01:53.740 --> 01:01:54.740
你看一下

01:01:54.740 --> 01:01:55.740
一共有9页

01:01:55.740 --> 01:01:56.740
看看是不是这样子

01:01:56.740 --> 01:01:57.740
好 那么比方说

01:01:57.740 --> 01:01:58.740
我们在DIV哪里面

01:01:58.740 --> 01:01:59.740
要加上一个Name

01:01:59.740 --> 01:02:00.740
5

01:02:00.740 --> 01:02:01.740
没钱是5条

01:02:01.740 --> 01:02:02.740
你看是不是

01:02:02.740 --> 01:02:03.740
全部都变了

01:02:03.740 --> 01:02:04.740
对吧 那么

01:02:04.740 --> 01:02:05.740
是不是达到可以达到DIV

01:02:05.740 --> 01:02:07.740
可以控制这个目的

01:02:07.740 --> 01:02:08.740
是不是可以控制这一块了

01:02:08.740 --> 01:02:09.740
因为第一次的数据

01:02:09.740 --> 01:02:10.740
其实就是属性

01:02:10.740 --> 01:02:11.740
对不对 就是属性

01:02:11.740 --> 01:02:12.740
那么这些数据

01:02:12.740 --> 01:02:15.740
都是根据属性值来算出来的

01:02:15.740 --> 01:02:17.740
好好去体会一下这个过程

01:02:17.740 --> 01:02:18.740
你第一次做的话

01:02:18.740 --> 01:02:20.740
感觉很绕

01:02:20.740 --> 01:02:22.740
但是你做 后来习惯了

01:02:22.740 --> 01:02:23.740
你做习惯的这个东西

01:02:23.740 --> 01:02:24.740
我就觉得

01:02:24.740 --> 01:02:25.740
就是这么回事

01:02:25.740 --> 01:02:27.740
就这么回事

01:02:27.740 --> 01:02:28.740
你不要看什么

01:02:28.740 --> 01:02:29.740
Current这个东西

01:02:29.740 --> 01:02:31.740
它其实就是属性里面的数据

01:02:31.740 --> 01:02:32.740
只不过算了一下

01:02:32.740 --> 01:02:33.740
在属性里

01:02:33.740 --> 01:02:34.740
根据属性计算了一下

01:02:34.740 --> 01:02:35.740
其他没啥

01:02:35.740 --> 01:02:36.740
对不对

01:02:37.740 --> 01:02:39.740
好 接下来就是重新查询了

01:02:39.740 --> 01:02:41.740
重新查询了

01:02:41.740 --> 01:02:43.740
就是 on-search

01:02:43.740 --> 01:02:45.740
就是我们点击这个按钮

01:02:45.740 --> 01:02:47.740
是不是要触发重新查询

01:02:47.740 --> 01:02:49.740
点击这个分页

01:02:49.740 --> 01:02:50.740
是不是要触发重新查询

01:02:50.740 --> 01:02:51.740
对吧

01:02:51.740 --> 01:02:53.740
是不是要重新查询

01:02:53.740 --> 01:02:55.740
好 那么现在关键是要重新查询

01:02:55.740 --> 01:02:57.740
怎么来重新查询了

01:02:57.740 --> 01:02:59.740
怎么来重新查询了

01:02:59.740 --> 01:03:03.110
重新查询

01:03:03.110 --> 01:03:04.110
你想一想这个道理

01:03:04.110 --> 01:03:06.110
是不是就是改变

01:03:06.110 --> 01:03:08.110
改变这个地址就完事了

01:03:08.110 --> 01:03:10.110
你改了这个地址

01:03:10.110 --> 01:03:11.110
是不是逐渐的属性变了

01:03:11.110 --> 01:03:13.110
逐渐是不是要重新渲染

01:03:13.110 --> 01:03:14.110
重新渲染是不是

01:03:14.110 --> 01:03:16.110
全部又重来了一次

01:03:16.110 --> 01:03:17.110
对吧

01:03:17.110 --> 01:03:18.110
又重来了一次就完了

01:03:18.110 --> 01:03:19.110
对不对

01:03:19.110 --> 01:03:20.110
要重新计算

01:03:20.110 --> 01:03:21.110
重新根据地址来

01:03:21.110 --> 01:03:22.110
计算条件

01:03:22.110 --> 01:03:24.110
又重新根据条件一变

01:03:24.110 --> 01:03:25.110
条件一变

01:03:25.110 --> 01:03:26.110
是不是这个东西也跟着变了

01:03:26.110 --> 01:03:27.110
那是不是重新渲染

01:03:27.110 --> 01:03:28.110
也是完了

01:03:28.110 --> 01:03:29.110
对不对

01:03:29.110 --> 01:03:30.110
所以说

01:03:30.110 --> 01:03:32.110
重新查询就是

01:03:32.110 --> 01:03:34.110
更改这个地址

01:03:34.110 --> 01:03:36.110
更改这个地址就完事了

01:03:36.110 --> 01:03:38.110
那么现在我们需要一个东西

01:03:38.110 --> 01:03:41.110
能够帮我们来算出

01:03:41.110 --> 01:03:42.110
算出

01:03:42.110 --> 01:03:43.110
比方说

01:03:44.110 --> 01:03:45.110
比方说

01:03:45.110 --> 01:03:46.110
我们这里是不是要改条件了

01:03:46.110 --> 01:03:47.110
对不对

01:03:47.110 --> 01:03:48.110
是不是要改条件

01:03:48.110 --> 01:03:49.110
你告诉我

01:03:49.110 --> 01:03:50.110
是不是要改条件了

01:03:50.110 --> 01:03:52.110
这个没问题吧

01:03:52.110 --> 01:03:53.110
总共得改条件吧

01:03:53.110 --> 01:03:55.110
那么这里点击过后

01:03:55.110 --> 01:03:57.110
要更改条件

01:03:57.110 --> 01:03:58.110
新的条件

01:03:58.110 --> 01:03:59.110
比方说

01:03:59.110 --> 01:04:01.110
我们这里Answer新的条件

01:04:02.110 --> 01:04:03.110
New

01:04:03.110 --> 01:04:04.110
什么

01:04:05.110 --> 01:04:06.110
query

01:04:06.110 --> 01:04:07.110
新的条件

01:04:07.110 --> 01:04:09.110
新的条件等于啥呢

01:04:09.110 --> 01:04:11.110
我们把旧的条件展开

01:04:11.110 --> 01:04:12.110
我们这里可以用展开运算幅

01:04:12.110 --> 01:04:14.110
把旧的条件展开

01:04:14.110 --> 01:04:17.110
点击的时候把旧的条件展开

01:04:17.110 --> 01:04:18.110
展开过后

01:04:18.110 --> 01:04:20.110
我们再给他注入一个新的条件

01:04:20.110 --> 01:04:22.110
新的条件是啥

01:04:22.110 --> 01:04:24.110
你这个组件里面不就一个key

01:04:24.110 --> 01:04:25.110
一个sext

01:04:25.110 --> 01:04:26.110
key等于啥

01:04:26.110 --> 01:04:27.110
等于call的

01:04:27.110 --> 01:04:28.110
就是key

01:04:28.110 --> 01:04:29.110
对吧

01:04:29.110 --> 01:04:31.110
你通过参数传给我的

01:04:31.110 --> 01:04:33.110
当时我们写这个组件还记得吗

01:04:33.110 --> 01:04:35.110
他通过参数把key传给我的

01:04:35.110 --> 01:04:36.110
然后

01:04:36.110 --> 01:04:37.110
sext

01:04:37.110 --> 01:04:38.110
code

01:04:38.110 --> 01:04:39.110
sext

01:04:39.110 --> 01:04:40.110
为什么我要这样写

01:04:40.110 --> 01:04:41.110
因为这个query里面

01:04:41.110 --> 01:04:43.110
是不是还有配一级

01:04:43.110 --> 01:04:44.110
还有什么

01:04:44.110 --> 01:04:45.110
是不是还有配一级

01:04:45.110 --> 01:04:46.110
还有什么

01:04:46.110 --> 01:04:47.110
还有nimate

01:04:47.110 --> 01:04:48.110
还有这些东西

01:04:48.110 --> 01:04:49.110
所以说

01:04:49.110 --> 01:04:51.110
这一块我们得把之前的东西保留下来

01:04:51.110 --> 01:04:53.110
得把之前的东西保留下来

01:04:53.110 --> 01:04:54.110
于是我们通过这种方式

01:04:54.110 --> 01:04:56.110
来产生一个新的条件

01:04:56.110 --> 01:04:57.110
产生一个新的条件过后

01:04:57.110 --> 01:04:59.110
是不是我们改变地址咱就完事了

01:04:59.110 --> 01:05:01.110
改变这一块东西就完事了

01:05:01.110 --> 01:05:02.110
那么怎么改变

01:05:02.110 --> 01:05:03.110
怎么改变

01:05:03.110 --> 01:05:04.110
我们可以写个函数

01:05:04.110 --> 01:05:06.110
写个函数来改变就完事了

01:05:06.110 --> 01:05:07.110
比方说

01:05:08.110 --> 01:05:10.110
咱们写这么一个函数

01:05:10.110 --> 01:05:13.110
就是change location

01:05:13.110 --> 01:05:15.110
给我传一个条件进来

01:05:15.110 --> 01:05:16.110
条件对象

01:05:16.110 --> 01:05:19.110
根据条件对象

01:05:19.110 --> 01:05:20.110
改变

01:05:20.110 --> 01:05:21.110
改变啥

01:05:21.110 --> 01:05:24.110
改变就是地址

01:05:26.110 --> 01:05:27.110
我可以通过地址

01:05:27.110 --> 01:05:28.110
生成一个条件对象

01:05:28.110 --> 01:05:29.110
那么条件对象变了过后

01:05:29.110 --> 01:05:31.110
我要把它反应到地址

01:05:31.110 --> 01:05:33.110
里边去改变地址

01:05:33.110 --> 01:05:35.110
这个怎么改变的

01:05:35.110 --> 01:05:37.110
比方说我们点击設计

01:05:37.110 --> 01:05:38.110
点击设计的时候

01:05:38.110 --> 01:05:39.110
我们就调用这个函数

01:05:39.110 --> 01:05:41.110
change location

01:05:41.110 --> 01:05:42.110
调用这个函数

01:05:42.110 --> 01:05:43.110
给它一个啥

01:05:43.110 --> 01:05:45.110
给它一个new query

01:05:45.110 --> 01:05:47.110
把新的条件对象给它

01:05:47.110 --> 01:05:49.110
看着我们这里输出

01:05:49.110 --> 01:05:50.110
query对象

01:05:50.110 --> 01:05:51.110
保存

01:05:51.110 --> 01:05:52.110
你看着

01:05:53.110 --> 01:05:54.110
点击右键

01:05:54.110 --> 01:05:55.110
检查

01:05:55.110 --> 01:05:56.110
控制台

01:05:56.110 --> 01:05:58.110
我们关键字比方说写上一个abc

01:05:58.110 --> 01:05:59.110
这里写个

01:05:59.110 --> 01:06:00.110
蓝

01:06:00.110 --> 01:06:01.110
点查群

01:06:01.110 --> 01:06:02.110
你看一下

01:06:02.110 --> 01:06:04.110
是不是新的条件对象

01:06:04.110 --> 01:06:06.110
一个新的条件对象

01:06:06.110 --> 01:06:08.110
拿了个新的条件对象过后

01:06:08.110 --> 01:06:10.110
它要干吗

01:06:10.110 --> 01:06:11.110
它要干吗

01:06:11.110 --> 01:06:12.110
是不是要改变地址

01:06:12.110 --> 01:06:14.110
怎么改变地址

01:06:14.110 --> 01:06:15.110
怎么改变地址

01:06:15.110 --> 01:06:17.110
如果是在组建里边

01:06:17.110 --> 01:06:18.110
怎么改变地址

01:06:18.110 --> 01:06:19.110
probs history

01:06:19.110 --> 01:06:20.110
就是挑转

01:06:20.110 --> 01:06:21.110
就是挑转

01:06:21.110 --> 01:06:22.110
是不是铺席就完了

01:06:22.110 --> 01:06:23.110
对不对

01:06:23.110 --> 01:06:24.110
铺席就完了

01:06:24.110 --> 01:06:25.110
所以说这里

01:06:25.110 --> 01:06:27.110
要获取这个history对象

01:06:27.110 --> 01:06:28.110
所以说你要给我传过来

01:06:28.110 --> 01:06:29.110
history对象

01:06:29.110 --> 01:06:30.110
要传过来

01:06:30.110 --> 01:06:31.110
不然的话我获取不到history对象

01:06:31.110 --> 01:06:33.110
我没法铺席

01:06:33.110 --> 01:06:35.110
我要把history传给给它

01:06:35.110 --> 01:06:37.110
history

01:06:37.110 --> 01:06:39.110
probs

01:06:39.110 --> 01:06:40.110
叫history

01:06:40.110 --> 01:06:41.110
传给给它

01:06:41.110 --> 01:06:42.110
那么这边

01:06:42.110 --> 01:06:44.110
是不是可以通过history

01:06:44.110 --> 01:06:46.110
铺席来改变地址

01:06:47.110 --> 01:06:49.110
关键这个地址怎么变

01:06:49.110 --> 01:06:51.110
我现在拿到的是一个对象

01:06:51.110 --> 01:06:52.110
我要把这个对象生成什么

01:06:52.110 --> 01:06:53.110
生成一个制服串

01:06:53.110 --> 01:06:54.110
比方说

01:06:54.110 --> 01:06:55.110
我们拿到的是这个对象

01:06:55.110 --> 01:06:56.110
看着

01:06:56.110 --> 01:06:58.110
拿到的是这个对象

01:06:58.110 --> 01:06:59.110
这个对象

01:06:59.110 --> 01:07:00.110
我要把它生成一个制服串

01:07:00.110 --> 01:07:01.110
生成什么制服串

01:07:01.110 --> 01:07:02.110
生成这样的一个制服串

01:07:02.110 --> 01:07:03.110
问号

01:07:03.110 --> 01:07:05.110
key等于abc

01:07:05.110 --> 01:07:07.110
然后并且limit

01:07:07.110 --> 01:07:08.110
等于5

01:07:08.110 --> 01:07:09.110
并且配级

01:07:09.110 --> 01:07:10.110
等于1

01:07:10.110 --> 01:07:13.110
并且six等于0

01:07:13.110 --> 01:07:14.110
是不是要自己写很多代码

01:07:14.110 --> 01:07:15.110
才能生成这个对象

01:07:15.110 --> 01:07:16.110
对吧

01:07:16.110 --> 01:07:18.110
实际上

01:07:18.110 --> 01:07:19.110
实际上

01:07:19.110 --> 01:07:21.110
这个

01:07:21.110 --> 01:07:23.110
query stream

01:07:23.110 --> 01:07:24.110
第三方cool

01:07:24.110 --> 01:07:25.110
它里面提供了一个方法

01:07:25.110 --> 01:07:26.110
可以用非常方便的

01:07:26.110 --> 01:07:27.110
让我们搞零的一件事情

01:07:27.110 --> 01:07:29.110
就是qs

01:07:29.110 --> 01:07:31.110
stringify

01:07:31.110 --> 01:07:33.110
怎么读的

01:07:33.110 --> 01:07:35.110
你把对象传进去

01:07:35.110 --> 01:07:37.110
它就能够给你返回一个

01:07:37.110 --> 01:07:39.110
12起制服串

01:07:39.110 --> 01:07:40.110
它就能够返回这个东西

01:07:40.110 --> 01:07:41.110
看一下吧

01:07:41.110 --> 01:07:43.110
保存

01:07:43.110 --> 01:07:44.110
比方说

01:07:44.110 --> 01:07:45.110
关键字输入abc

01:07:45.110 --> 01:07:46.110
性别填兰

01:07:46.110 --> 01:07:47.110
点查询

01:07:47.110 --> 01:07:48.110
你看一下

01:07:48.110 --> 01:07:49.110
是不是就生成这样

01:07:49.110 --> 01:07:50.110
给一个东西了

01:07:50.110 --> 01:07:51.110
对吧

01:07:51.110 --> 01:07:52.110
是不是生成出来了

01:07:52.110 --> 01:07:53.110
对不对

01:07:53.110 --> 01:07:54.110
你要做的是啥

01:07:54.110 --> 01:07:55.110
你要做的事情

01:07:55.110 --> 01:07:56.110
无非就是

01:07:56.110 --> 01:07:58.110
呼吸的时候

01:07:58.110 --> 01:07:59.110
就是当前页面

01:07:59.110 --> 01:08:00.110
你不用去写

01:08:00.110 --> 01:08:01.110
什么页面地址

01:08:01.110 --> 01:08:02.110
就是当前页面

01:08:02.110 --> 01:08:03.110
当前页面就不用写

01:08:03.110 --> 01:08:04.110
页面地址的

01:08:04.110 --> 01:08:05.110
直接使用相对路径

01:08:05.110 --> 01:08:06.110
直接加个问号

01:08:06.110 --> 01:08:07.110
问号后面

01:08:07.110 --> 01:08:08.110
拼接什么

01:08:08.110 --> 01:08:09.110
就完事了

01:08:09.110 --> 01:08:11.110
就完事了

01:08:11.110 --> 01:08:12.110
你看一下

01:08:12.110 --> 01:08:14.110
保存

01:08:14.110 --> 01:08:15.110
看着

01:08:15.110 --> 01:08:18.110
这里能我们写个abc

01:08:18.110 --> 01:08:20.110
点查询

01:08:20.110 --> 01:08:21.110
你看是不是查不出来了

01:08:21.110 --> 01:08:22.110
对吧

01:08:22.110 --> 01:08:23.110
查不出来了

01:08:23.110 --> 01:08:24.110
你看地址是不是变化了

01:08:24.110 --> 01:08:25.110
t等于abc了

01:08:25.110 --> 01:08:26.110
这里能我们查

01:08:26.110 --> 01:08:27.110
张

01:08:27.110 --> 01:08:29.110
点查询

01:08:29.110 --> 01:08:30.110
你看地址是不是变化了

01:08:30.110 --> 01:08:31.110
对吧

01:08:31.110 --> 01:08:33.110
是变化了吧

01:08:33.110 --> 01:08:34.110
没问题吧

01:08:34.110 --> 01:08:37.110
是不是没问题

01:08:37.110 --> 01:08:38.110
无非就是改变地址

01:08:38.110 --> 01:08:39.110
就完事了

01:08:39.110 --> 01:08:41.110
因为地址一变

01:08:41.110 --> 01:08:43.110
是不是商项文的信息就变了

01:08:43.110 --> 01:08:44.110
商项文的信息变了

01:08:44.110 --> 01:08:45.110
自然而然

01:08:45.110 --> 01:08:47.110
这些主线肯定要刷新

01:08:47.110 --> 01:08:48.110
你不用手动去刷新

01:08:48.110 --> 01:08:49.110
你说

01:08:49.110 --> 01:08:50.110
好乖

01:08:50.110 --> 01:08:51.110
这里没有

01:08:51.110 --> 01:08:53.110
没有去用那个设置状态

01:08:53.110 --> 01:08:56.110
它为什么会导致主线刷新

01:08:56.110 --> 01:08:57.110
因为你

01:08:57.110 --> 01:08:59.110
调用了商项文利本的这个方法

01:08:59.110 --> 01:09:00.110
这个方法

01:09:00.110 --> 01:09:02.110
它会触发商项文利本的数据更改

01:09:02.110 --> 01:09:03.110
商项文的数据更改了

01:09:03.110 --> 01:09:05.110
它自然而然就会刷新

01:09:05.110 --> 01:09:07.110
所以你直接改变地址就完事了

01:09:07.110 --> 01:09:08.110
你看一下

01:09:08.110 --> 01:09:10.110
对吧

01:09:10.110 --> 01:09:11.110
好

01:09:11.110 --> 01:09:12.110
那么这里其实还有一个小问题

01:09:12.110 --> 01:09:14.110
比方说当前是第五页

01:09:14.110 --> 01:09:15.110
比方说当前是第五页

01:09:15.110 --> 01:09:16.110
好

01:09:16.110 --> 01:09:17.110
第五页的话比方说

01:09:17.110 --> 01:09:18.110
仔细看

01:09:19.110 --> 01:09:20.110
换那个查询

01:09:20.110 --> 01:09:22.620
王

01:09:22.620 --> 01:09:23.620
看是不是出问题了

01:09:23.620 --> 01:09:24.620
为什么

01:09:24.620 --> 01:09:26.620
因为我查询的时候

01:09:26.620 --> 01:09:28.620
是不是保留了一页

01:09:28.620 --> 01:09:30.620
但是通常情况下

01:09:30.620 --> 01:09:31.620
查询的时候

01:09:31.620 --> 01:09:33.620
是不是都要回到第一页

01:09:33.620 --> 01:09:34.620
都要回到第一页

01:09:34.620 --> 01:09:35.620
因为你鬼知道

01:09:35.620 --> 01:09:36.620
后边的查询有几页了

01:09:36.620 --> 01:09:37.620
你会出现这种情况

01:09:37.620 --> 01:09:39.620
刚才姓张的查出来有五页

01:09:39.620 --> 01:09:40.620
至少有五页

01:09:40.620 --> 01:09:41.620
至少有五页

01:09:41.620 --> 01:09:43.620
那么姓王的

01:09:43.620 --> 01:09:44.620
包含王这个制度的同学

01:09:44.620 --> 01:09:45.620
他就没有这么多数据

01:09:45.620 --> 01:09:47.620
你还保持配级等于五的话

01:09:47.620 --> 01:09:48.620
那么到时候查询出来

01:09:48.620 --> 01:09:49.620
肯定要出问题

01:09:49.620 --> 01:09:50.620
因此

01:09:50.620 --> 01:09:52.620
我们这里重新给他

01:09:52.620 --> 01:09:53.620
把这个配级的

01:09:53.620 --> 01:09:54.620
给他设为一

01:09:54.620 --> 01:09:55.620
重新覆盖为一

01:09:55.620 --> 01:09:57.620
里面是保持不变

01:09:57.620 --> 01:09:58.620
你看一下吧

01:09:58.620 --> 01:10:01.620
比方说我们这里姓张

01:10:01.620 --> 01:10:02.620
查询

01:10:02.620 --> 01:10:03.620
你看回到第一页了

01:10:03.620 --> 01:10:04.620
哪怕一会儿

01:10:04.620 --> 01:10:06.620
把它变到第五页

01:10:06.620 --> 01:10:08.620
然后再查询姓王

01:10:08.620 --> 01:10:09.620
你每一次查询

01:10:09.620 --> 01:10:10.620
都是回到第一页

01:10:10.620 --> 01:10:11.620
看没

01:10:11.620 --> 01:10:12.620
这样子

01:10:12.620 --> 01:10:14.620
把这个bug解决

01:10:14.620 --> 01:10:16.620
那么难道的同学呢

01:10:17.620 --> 01:10:18.620
多少条

01:10:18.620 --> 01:10:19.620
女的同学呢

01:10:19.620 --> 01:10:20.620
没有

01:10:20.620 --> 01:10:22.990
好

01:10:22.990 --> 01:10:23.990
那么现在是翻页

01:10:23.990 --> 01:10:24.990
翻页就很简单了

01:10:24.990 --> 01:10:26.990
翻页非常简单了

01:10:26.990 --> 01:10:28.990
on page change

01:10:28.990 --> 01:10:30.990
他会给我一个新的页码

01:10:30.990 --> 01:10:31.990
新的页码

01:10:31.990 --> 01:10:32.990
我要干嘛呢

01:10:32.990 --> 01:10:33.990
我要干嘛呢

01:10:35.990 --> 01:10:36.990
我还是一样的

01:10:36.990 --> 01:10:38.990
得到一个新的查询对象

01:10:38.990 --> 01:10:39.990
查询对象里边

01:10:39.990 --> 01:10:41.990
把之前的查询对象展开

01:10:41.990 --> 01:10:42.990
然后给他一个

01:10:42.990 --> 01:10:44.990
把页码变化一下

01:10:44.990 --> 01:10:45.990
其他啥都不变

01:10:45.990 --> 01:10:46.990
就改变一下页码

01:10:46.990 --> 01:10:48.990
就把页码变一下就行了

01:10:49.990 --> 01:10:50.990
然后干嘛

01:10:50.990 --> 01:10:51.990
然后就

01:10:51.990 --> 01:10:52.990
雕用那个方法

01:10:52.990 --> 01:10:53.990
change

01:10:53.990 --> 01:10:54.990
location

01:10:54.990 --> 01:10:55.990
有query传进去

01:10:55.990 --> 01:10:56.990
就完事了

01:10:57.990 --> 01:10:58.990
保存

01:10:58.990 --> 01:10:59.990
第二页

01:11:03.300 --> 01:11:05.300
这里还是少传一个东西

01:11:05.300 --> 01:11:06.300
props

01:11:06.300 --> 01:11:07.300
history

01:11:09.300 --> 01:11:10.300
保存

01:11:11.300 --> 01:11:12.300
你看

01:11:12.300 --> 01:11:13.300
还保留了查询条件对吧

01:11:13.300 --> 01:11:15.300
为什么保留了查询条件

01:11:15.300 --> 01:11:17.300
因为我们这里是展开的

01:11:17.300 --> 01:11:19.300
把之前的查询条件展开的

01:11:19.300 --> 01:11:20.300
只是覆盖了页码

01:11:20.300 --> 01:11:22.300
是其他的条件不变

01:11:22.300 --> 01:11:23.300
只是覆盖了页码

01:11:25.300 --> 01:11:27.300
那么这样子就做出来了

01:11:27.300 --> 01:11:28.300
包含查询

01:11:28.300 --> 01:11:29.300
包含分页

01:11:29.300 --> 01:11:31.300
包含数据表格

01:11:31.300 --> 01:11:32.300
并且

01:11:32.300 --> 01:11:33.300
我们的

01:11:33.300 --> 01:11:36.300
查询条件是放到地址栏参数里边的

01:11:36.300 --> 01:11:38.300
放到地址栏参数有什么好处呢

01:11:38.300 --> 01:11:39.300
好处有在于

01:11:39.300 --> 01:11:40.300
比方说现在第三页

01:11:40.300 --> 01:11:41.300
看着啊

01:11:41.300 --> 01:11:42.300
第三页

01:11:42.300 --> 01:11:44.300
我们把这个地址复制一下

01:11:44.300 --> 01:11:45.300
新开一个窗口

01:11:46.300 --> 01:11:47.300
仍然是第三页

01:11:47.300 --> 01:11:48.300
你看这里的数据

01:11:48.300 --> 01:11:49.300
说完全还原了

01:11:49.300 --> 01:11:51.300
这两个页面完全还原了

01:11:51.300 --> 01:11:52.300
它利于分享

01:11:52.300 --> 01:11:54.300
虽然说我们这是后台页面

01:11:54.300 --> 01:11:56.300
后台页面一般不会分享的

01:11:56.300 --> 01:11:57.300
但是通过这个道理

01:11:57.300 --> 01:11:58.300
就告诉大家

01:11:58.300 --> 01:11:59.300
以后你做钱

01:11:59.300 --> 01:12:00.300
它页面是不是也可以

01:12:00.300 --> 01:12:01.300
用类似的方式

01:12:01.300 --> 01:12:02.300
实现

01:12:02.300 --> 01:12:03.300
比方说百度里面

01:12:03.300 --> 01:12:04.300
搜索一个东西

01:12:04.300 --> 01:12:06.300
它是不是在地址栏参数加了很多东西

01:12:06.300 --> 01:12:07.300
比方说

01:12:07.300 --> 01:12:08.300
我们在百度里面

01:12:08.300 --> 01:12:09.300
搜索一个ATM

01:12:10.300 --> 01:12:11.300
它是不是在地址栏参数加了很多东西

01:12:11.300 --> 01:12:13.300
你把这个地址一复制过去

01:12:13.300 --> 01:12:14.300
分享给你的好友

01:12:14.300 --> 01:12:15.300
它一打开

01:12:15.300 --> 01:12:16.300
是不是同样的一个页面

01:12:16.300 --> 01:12:17.300
对吧

01:12:17.300 --> 01:12:18.300
两个页面是相同的

01:12:18.300 --> 01:12:20.300
因为它寄入在地址栏里面了

01:12:20.300 --> 01:12:21.300
如果说你不在地址栏里面

01:12:21.300 --> 01:12:23.300
寄入这些数据的话

01:12:23.300 --> 01:12:24.300
那么就意味着

01:12:24.300 --> 01:12:25.300
你把地址分享出去

01:12:25.300 --> 01:12:26.300
别人一打开

01:12:26.300 --> 01:12:28.300
跟你看到的就不一样

01:12:28.300 --> 01:12:29.300
因为你可能是在

01:12:29.300 --> 01:12:31.300
通过某一次操作过程中

01:12:31.300 --> 01:12:32.300
数据是在内存里面

01:12:32.300 --> 01:12:34.300
它不是在这里面

01:12:34.300 --> 01:12:35.300
它就地址栏的数据

01:12:35.300 --> 01:12:37.300
它利于分享

01:12:37.300 --> 01:12:39.300
我们把这个例子说出来

01:12:39.300 --> 01:12:40.300
你把这个例子搞定了过后了

01:12:40.300 --> 01:12:41.300
自然而难

01:12:41.300 --> 01:12:42.300
什么都可以想

01:12:43.300 --> 01:12:45.300
随随便便就搞定了

01:12:45.300 --> 01:12:46.300
好

01:12:46.300 --> 01:12:48.300
最后我再说一个小的问题

01:12:48.300 --> 01:12:49.300
就是说

01:12:49.300 --> 01:12:50.300
你不说问题

01:12:50.300 --> 01:12:51.300
就小了功能块

01:12:51.300 --> 01:12:52.300
比方说

01:12:52.300 --> 01:12:54.300
比方说我们这里

01:12:54.300 --> 01:12:56.300
学生表格里面

01:12:56.300 --> 01:12:57.300
就个例子

01:12:57.300 --> 01:12:59.300
就学生表格里面的一个操作

01:12:59.300 --> 01:13:00.300
这里

01:13:00.300 --> 01:13:01.300
它可能有一个详情

01:13:01.300 --> 01:13:02.300
比方说

01:13:02.300 --> 01:13:04.300
有个详情

01:13:04.300 --> 01:13:06.300
详情

01:13:06.300 --> 01:13:07.300
好

01:13:07.300 --> 01:13:08.300
详情的话

01:13:08.300 --> 01:13:10.300
我们希望它连接到一个页面

01:13:10.300 --> 01:13:11.300
连接到哪个页面

01:13:11.300 --> 01:13:13.300
比方说我们还可以写个

01:13:13.300 --> 01:13:14.300
talkit blank

01:13:14.300 --> 01:13:15.300
对吧

01:13:15.300 --> 01:13:16.300
难得写了

01:13:16.300 --> 01:13:17.300
就这样吧

01:13:17.300 --> 01:13:18.300
连接到一个页面

01:13:18.300 --> 01:13:19.300
比方说你要哪个页面

01:13:19.300 --> 01:13:20.300
student

01:13:20.300 --> 01:13:22.300
后面要给上一个东西

01:13:22.300 --> 01:13:24.300
给上什么东西呢

01:13:24.300 --> 01:13:26.300
给上一个学生的id

01:13:26.300 --> 01:13:28.300
学生的id

01:13:28.300 --> 01:13:29.300
学生不是有id吗

01:13:29.300 --> 01:13:30.300
或者是学号

01:13:30.300 --> 01:13:32.300
或者是学号

01:13:32.300 --> 01:13:34.300
把学生的学号放在这

01:13:34.300 --> 01:13:35.300
放在这

01:13:35.300 --> 01:13:36.300
那么自然而然

01:13:36.300 --> 01:13:37.300
我们就可以用一个

01:13:37.300 --> 01:13:38.300
模板制服串吧

01:13:38.300 --> 01:13:40.300
有个模板制服串

01:13:40.300 --> 01:13:41.300
它跳转到这个

01:13:41.300 --> 01:13:43.300
跳转到这个地址

01:13:43.300 --> 01:13:44.300
student

01:13:44.300 --> 01:13:46.300
后面拼接上学生的学号

01:13:46.300 --> 01:13:47.300
s点

01:13:47.300 --> 01:13:49.300
s number

01:13:49.300 --> 01:13:51.300
那么写上一个a元数

01:13:51.300 --> 01:13:52.300
就这么个意思

01:13:52.300 --> 01:13:53.300
那么这里点击详情

01:13:53.300 --> 01:13:54.300
你看一下地址

01:13:54.300 --> 01:13:56.300
它跳转到这个页面

01:13:56.300 --> 01:13:57.300
跳转到这个地址

01:13:57.300 --> 01:13:58.300
那么我们希望在这个地址

01:13:58.300 --> 01:14:00.300
去显示学生的详情

01:14:00.300 --> 01:14:01.300
我这个功能肯定不做

01:14:01.300 --> 01:14:02.300
因为我发现一个API里面

01:14:02.300 --> 01:14:04.300
没有获取单个学生对象的东西

01:14:04.300 --> 01:14:06.300
没有获取单个学生对象

01:14:06.300 --> 01:14:07.300
功能不做

01:14:07.300 --> 01:14:09.300
我就说一下这个路由

01:14:09.300 --> 01:14:10.300
问题

01:14:10.300 --> 01:14:11.300
那么这一块

01:14:11.300 --> 01:14:12.300
其实我们讲过了

01:14:12.300 --> 01:14:13.300
那么这一块

01:14:13.300 --> 01:14:14.300
我们对应到一个页面

01:14:14.300 --> 01:14:15.300
比如说

01:14:15.300 --> 01:14:17.300
我们对应到其中一个页面

01:14:17.300 --> 01:14:18.300
在students里面

01:14:18.300 --> 01:14:19.300
建一个页面

01:14:19.300 --> 01:14:20.300
叫做students

01:14:20.300 --> 01:14:22.300
detail

01:14:22.300 --> 01:14:24.300
详情页

01:14:24.300 --> 01:14:26.300
rfc

01:14:26.300 --> 01:14:28.300
以及学生

01:14:28.300 --> 01:14:30.300
详情页

01:14:30.300 --> 01:14:31.300
那么这里

01:14:31.300 --> 01:14:32.300
这个页面要获取到

01:14:32.300 --> 01:14:34.300
学生的

01:14:34.300 --> 01:14:37.300
学号

01:14:37.300 --> 01:14:38.300
学号是多少

01:14:38.300 --> 01:14:39.300
要获取到学号

01:14:39.300 --> 01:14:41.300
那么怎么来获取呢

01:14:41.300 --> 01:14:43.300
是不是我们上级课讲过的

01:14:43.300 --> 01:14:44.300
那么这个地

01:14:44.300 --> 01:14:45.300
如果你说你这个地址

01:14:45.300 --> 01:14:46.300
要用这种格式的话

01:14:46.300 --> 01:14:47.300
那么我们到时候

01:14:47.300 --> 01:14:49.300
在后台匹配的时候

01:14:49.300 --> 01:14:50.300
耳朵命匹配的时候

01:14:50.300 --> 01:14:51.300
那是不是要多写一个

01:14:51.300 --> 01:14:52.300
对吧

01:14:52.300 --> 01:14:53.300
多写一个吧

01:14:53.300 --> 01:14:56.300
如果说这个东西

01:14:56.300 --> 01:14:57.300
没匹配到

01:14:57.300 --> 01:14:58.300
没匹配到

01:14:58.300 --> 01:14:59.300
那么要匹配到这个

01:14:59.300 --> 01:15:00.300
匹配到这个

01:15:00.300 --> 01:15:02.300
id

01:15:02.300 --> 01:15:04.300
注意顺序

01:15:04.300 --> 01:15:06.300
先匹配它

01:15:07.300 --> 01:15:09.300
随便写什么名字都行

01:15:09.300 --> 01:15:10.300
先匹配它

01:15:10.300 --> 01:15:11.300
如果它匹配了

01:15:11.300 --> 01:15:12.300
由于有

01:15:12.300 --> 01:15:14.300
我这里没有写示威器

01:15:14.300 --> 01:15:16.300
我这里没有写示威器

01:15:16.300 --> 01:15:17.300
那么这里最好

01:15:17.300 --> 01:15:18.300
还要加个示威器

01:15:18.300 --> 01:15:19.300
为什么要加个示威器呢

01:15:19.300 --> 01:15:20.300
就是说

01:15:20.300 --> 01:15:21.300
如果说你访问这个地址

01:15:21.300 --> 01:15:22.300
你注意看

01:15:22.300 --> 01:15:24.300
如果你访问这个地址

01:15:24.300 --> 01:15:27.320
你访问这个地址

01:15:27.320 --> 01:15:28.320
这个地址

01:15:28.320 --> 01:15:29.320
是不是能匹配到

01:15:29.320 --> 01:15:31.320
你访问这个地址

01:15:31.320 --> 01:15:32.320
这个地址

01:15:32.320 --> 01:15:33.320
是不是能匹配到它

01:15:33.320 --> 01:15:34.320
对吧

01:15:34.320 --> 01:15:35.320
能匹配到它

01:15:35.320 --> 01:15:36.320
没问题吧

01:15:36.320 --> 01:15:37.320
没问题吧

01:15:37.320 --> 01:15:38.320
好

01:15:38.320 --> 01:15:39.320
那么这个地址

01:15:39.320 --> 01:15:40.320
是不是也能匹配到它

01:15:40.320 --> 01:15:41.320
对不对

01:15:41.320 --> 01:15:42.320
是不是也能匹配到

01:15:42.320 --> 01:15:43.320
这个s number

01:15:43.320 --> 01:15:45.320
是这样吧

01:15:45.320 --> 01:15:46.320
这一部分

01:15:46.320 --> 01:15:47.320
它对应到的

01:15:47.320 --> 01:15:48.320
对应到这个东西

01:15:48.320 --> 01:15:49.320
对吧

01:15:49.320 --> 01:15:50.320
它也能匹配到它

01:15:50.320 --> 01:15:51.320
所以说

01:15:51.320 --> 01:15:52.320
最好

01:15:52.320 --> 01:15:54.320
你这里加上一个示威器

01:15:54.320 --> 01:15:55.320
匹配一个就终止

01:15:55.320 --> 01:15:58.320
匹配到一个就终止

01:15:58.320 --> 01:15:59.320
OK

01:15:59.320 --> 01:16:01.320
再加上一个示威器

01:16:01.320 --> 01:16:02.320
或者说

01:16:02.320 --> 01:16:04.320
你在这里做一个约束也行

01:16:04.320 --> 01:16:05.320
约束也行

01:16:05.320 --> 01:16:06.320
约束了斜杠地

01:16:06.320 --> 01:16:07.320
就是很灵活了

01:16:07.320 --> 01:16:08.320
它必须是数字

01:16:08.320 --> 01:16:09.320
学号必须是数字

01:16:09.320 --> 01:16:10.320
但是有的时候

01:16:10.320 --> 01:16:11.320
你不能保证学号一定是数字

01:16:11.320 --> 01:16:12.320
对吧

01:16:12.320 --> 01:16:13.320
那这里

01:16:13.320 --> 01:16:14.320
我们使用个switch

01:16:17.630 --> 01:16:18.630
switch

01:16:18.630 --> 01:16:22.160
switch

01:16:22.160 --> 01:16:23.160
对吧

01:16:24.160 --> 01:16:26.160
它匹配到一个就终止

01:16:26.160 --> 01:16:27.160
它就不再匹配了

01:16:27.160 --> 01:16:30.370
OK

01:16:31.370 --> 01:16:32.370
好

01:16:32.370 --> 01:16:33.370
那么这里

01:16:33.370 --> 01:16:34.370
我们就念变到

01:16:34.370 --> 01:16:35.370
另外一个组件

01:16:35.370 --> 01:16:39.370
叫做student detail from

01:16:40.370 --> 01:16:43.370
student detail

01:16:45.740 --> 01:16:46.740
到这个组件

01:16:47.740 --> 01:16:48.740
好

01:16:48.740 --> 01:16:49.740
那么这个组件里边

01:16:49.740 --> 01:16:50.740
是不是可以通过march

01:16:50.740 --> 01:16:51.740
主要说一下这个

01:16:52.740 --> 01:16:53.740
很简单

01:16:53.740 --> 01:16:54.740
在这里边

01:16:54.740 --> 01:16:56.740
就是可以通过属性里边的

01:16:56.740 --> 01:16:57.740
march

01:16:59.740 --> 01:17:00.740
拿到什么

01:17:00.740 --> 01:17:01.740
s number

01:17:01.740 --> 01:17:02.740
这个s那么这个名字

01:17:02.740 --> 01:17:03.740
这个属性名

01:17:03.740 --> 01:17:04.740
是不是对应到这

01:17:04.740 --> 01:17:06.740
对应到这的s number

01:17:06.740 --> 01:17:07.740
对吧

01:17:07.740 --> 01:17:08.740
它对应到这了

01:17:08.740 --> 01:17:09.740
保存看一下

01:17:12.180 --> 01:17:13.180
学生列表

01:17:15.180 --> 01:17:16.180
详情

01:17:16.180 --> 01:17:17.180
没出来

01:17:17.180 --> 01:17:18.180
没出来检查一下

01:17:18.180 --> 01:17:19.180
看一下哪里有问题

01:17:19.180 --> 01:17:21.180
这里没有显示哪里有问题

01:17:22.180 --> 01:17:23.180
我们来看一下

01:17:23.180 --> 01:17:24.180
哪里有问题

01:17:24.180 --> 01:17:26.180
我们看一下这个组件有没有运行

01:17:26.180 --> 01:17:27.180
看一下

01:17:27.180 --> 01:17:28.180
这个组件肯定是没有运行

01:17:28.180 --> 01:17:30.180
如果运行这个组件肯定要显示

01:17:30.180 --> 01:17:31.180
对不对

01:17:31.180 --> 01:17:32.180
肯定是没有运行

01:17:32.180 --> 01:17:34.180
没有运行这个组件

01:17:34.180 --> 01:17:35.180
也就是说这个东西

01:17:35.180 --> 01:17:36.180
它没有匹配上

01:17:37.180 --> 01:17:38.180
我这里没有加s

01:17:38.180 --> 01:17:39.180
没有加s

01:17:39.180 --> 01:17:41.180
这里回到

01:17:41.180 --> 01:17:42.180
回到这个table里边来

01:17:42.180 --> 01:17:44.180
这里加分给s

01:17:47.180 --> 01:17:48.180
点详情

01:17:50.180 --> 01:17:51.180
这个学号

01:17:51.180 --> 01:17:52.180
这组件倒是显示的

01:17:52.180 --> 01:17:53.180
学号没有显示对吧

01:17:53.180 --> 01:17:54.180
OK

01:17:54.180 --> 01:17:55.180
我们把这个

01:17:55.180 --> 01:17:56.180
这都是小问题

01:17:57.180 --> 01:17:58.180
把这个打印出来就行了

01:17:58.180 --> 01:17:59.180
probs

01:18:00.180 --> 01:18:01.180
march

01:18:01.180 --> 01:18:02.180
把对象打印出来

01:18:04.620 --> 01:18:05.620
march里面是parals

01:18:05.620 --> 01:18:06.620
对吧

01:18:06.620 --> 01:18:07.620
parals

01:18:07.620 --> 01:18:08.620
march

01:18:09.620 --> 01:18:10.620
parals

01:18:10.620 --> 01:18:11.620
保存

01:18:11.620 --> 01:18:12.620
对吧

01:18:12.620 --> 01:18:13.620
学号拿到了

01:18:13.620 --> 01:18:14.620
OK

01:18:14.620 --> 01:18:15.620
拿到学号过后

01:18:15.620 --> 01:18:16.620
比方说你要做阿加克斯请求

01:18:16.620 --> 01:18:17.620
你要干嘛

01:18:17.620 --> 01:18:18.620
你就随便了

01:18:18.620 --> 01:18:19.620
那么这种情况

01:18:19.620 --> 01:18:20.620
就适合用什么

01:18:20.620 --> 01:18:21.620
什么新闻列表页

01:18:21.620 --> 01:18:23.620
挑转到新闻详情页

01:18:23.620 --> 01:18:25.620
那么把这个parals

01:18:25.620 --> 01:18:26.620
打过来都行

01:18:26.620 --> 01:18:27.620
OK

01:18:27.620 --> 01:18:28.620
就没了

01:18:28.620 --> 01:18:30.620
这就可能咱们演示的两个东西

01:18:30.620 --> 01:18:31.620
一个是地址南参数

01:18:32.620 --> 01:18:34.620
地址南参数这一块

01:18:34.620 --> 01:18:35.620
一个是

01:18:36.620 --> 01:18:37.620
就是

01:18:38.620 --> 01:18:41.620
把数据当做路径的一部分

01:18:41.620 --> 01:18:42.620
当做

01:18:42.620 --> 01:18:44.620
请求路径的一部分传递过来

01:18:44.620 --> 01:18:45.620
就是parals

01:18:45.620 --> 01:18:46.620
都演示了

01:18:46.620 --> 01:18:47.620
其他的怎么

01:18:47.620 --> 01:18:48.620
挑转页面

01:18:48.620 --> 01:18:50.620
用kissword挑转页面那些东西

01:18:50.620 --> 01:18:51.620
非常非常简单

01:18:52.620 --> 01:18:53.620
好

01:18:53.620 --> 01:18:54.620
下来大家一定要去练习一下

01:18:54.620 --> 01:18:55.620
特别特别是这个页面

01:18:55.620 --> 01:18:56.620
你们工作中

01:18:56.620 --> 01:18:57.620
我不说百分之百吧

01:18:57.620 --> 01:18:59.620
百分之九十都可能会遇到的

01:18:59.620 --> 01:19:00.620
根据地址南

01:19:00.620 --> 01:19:01.620
特别是前台页面

01:19:01.620 --> 01:19:03.620
根据地址南

01:19:03.620 --> 01:19:04.620
来进行查询

01:19:04.620 --> 01:19:05.620
一定要去练习一下

01:19:05.620 --> 01:19:06.620
OK

01:19:06.620 --> 01:19:07.620
这是关于这些何东西

