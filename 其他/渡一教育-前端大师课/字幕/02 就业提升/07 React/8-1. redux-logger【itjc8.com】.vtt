WEBVTT

00:01.070 --> 00:05.390
好 这个章节咱们还不着急跟那个react结合啊

00:05.390 --> 00:06.590
不着急啊

00:06.590 --> 00:09.950
嗯 大伙的可能没有看到界面 心也挺黄的

00:09.950 --> 00:11.950
觉得我比你们更黄

00:11.950 --> 00:13.470
但是没办法

00:13.470 --> 00:16.590
你要深刻的去理解Redux的话

00:16.590 --> 00:19.230
你一定要理解到他跟react是无关的

00:19.230 --> 00:22.110
他纯粹的是一个数据处理方案

00:22.110 --> 00:24.270
当你把这些数据搞进了之后呢

00:24.270 --> 00:25.790
你再去跟界面结合

00:25.790 --> 00:28.270
你会发现是一个自然而难的过程

00:28.270 --> 00:30.430
就是大家既然在做开发

00:30.590 --> 00:32.750
就不要像那种小白衣一样

00:32.750 --> 00:34.270
天天就想顶着界面

00:34.270 --> 00:35.870
那不是开发者的眼光

00:35.870 --> 00:37.950
开发者看的是数据

00:37.950 --> 00:41.550
我们这里呢还是这一张整个章节没有界面

00:41.550 --> 00:44.830
还是来深刻的去研究他的数据

00:44.830 --> 00:46.750
那我们这个章节研究什么呢

00:46.750 --> 00:49.950
我们上一张呢讲到了这个Redux的中间键

00:49.950 --> 00:53.310
并且呢我们也在扩展课程里边去熟悉了这个

00:53.310 --> 00:54.990
如何去应用中间键

00:54.990 --> 00:56.910
相信大家呢对多中间键的

00:56.910 --> 00:58.910
至少有知道有这么个东西对吧

00:58.990 --> 01:01.150
你至少也知道中间键该怎么去书写

01:02.190 --> 01:06.910
那么我们整个这一张就来介绍一些第三方的中间键

01:06.910 --> 01:08.110
就是为大个使呢

01:08.110 --> 01:10.430
虽然说他给你一个数据处理方案

01:10.430 --> 01:12.590
但是里边呢不说缺陷吧

01:12.590 --> 01:13.550
他有些地方呢

01:13.550 --> 01:14.830
他根本就没有给你做

01:14.830 --> 01:16.030
为什么又没有给你做呢

01:16.030 --> 01:18.590
这还是基于一种哲学思想

01:18.590 --> 01:20.750
我到底是多还是少

01:20.750 --> 01:22.270
做的事情越多越好

01:22.270 --> 01:23.630
还是越少越好

01:23.630 --> 01:26.590
那么他选择的方向是越少越好

01:26.590 --> 01:28.830
我给你做了提供一个最基本的功能

01:28.910 --> 01:30.990
给你保持最大的灵活性

01:30.990 --> 01:31.950
有了中间键过后呢

01:31.950 --> 01:33.550
你可以去增强上的功能

01:33.550 --> 01:35.550
那么剩下的事情我不管了

01:35.550 --> 01:37.150
那么你爱怎么去做怎么去做

01:37.150 --> 01:38.350
我保持最大的灵活性

01:38.350 --> 01:39.550
保持自己的减结

01:40.430 --> 01:42.190
所以说呢由于他有些问题呢

01:42.190 --> 01:44.590
他本身为大个使他没有去处理

01:44.590 --> 01:47.550
那么我们这就需要很多的其他的中间键

01:47.550 --> 01:49.070
来处理一些问题

01:49.070 --> 01:51.550
那么整个这一张就我们就来学习啊

01:51.550 --> 01:52.270
其他的中间键

01:52.990 --> 01:54.190
那么这些中间键里边呢

01:54.190 --> 01:56.270
我们主要是学习两个部分啊

01:56.990 --> 01:58.990
第一个部分呢就是日字记录

02:00.030 --> 02:01.790
叫打印一个日字就是这节课

02:01.790 --> 02:03.870
咱们要学习到一个第三方中间键

02:03.870 --> 02:04.830
打印日字

02:04.830 --> 02:07.390
就是说我们的数据变化了对吧

02:07.390 --> 02:08.270
数据变化了

02:08.270 --> 02:11.070
然后他是怎么从一个状态变到另一个状态的

02:11.070 --> 02:12.590
其实这个东西我们是不是写过

02:12.590 --> 02:12.990
对吧

02:12.990 --> 02:16.030
上一张节最后到处第二节课

02:16.030 --> 02:17.790
就扩展课程前面那节课

02:17.790 --> 02:19.310
我们就讲过那个日字记录

02:19.310 --> 02:20.830
我们自己写了一个LOG

02:20.830 --> 02:21.150
对不对

02:22.350 --> 02:23.470
实际上呢这个地方呢

02:23.470 --> 02:25.230
它是有第三方的中间键的

02:25.390 --> 02:26.750
这是我们这里可要学习的

02:26.750 --> 02:27.790
这个东西很简单啊

02:27.790 --> 02:29.470
这东西没啥没什么好说的

02:29.470 --> 02:31.150
主要是用来做调试的

02:31.150 --> 02:33.150
调试的时候我就可以清楚的观察到

02:33.150 --> 02:34.590
数据是怎么发生变化的

02:34.590 --> 02:36.030
那么哪个地方数据出的问题

02:36.030 --> 02:37.230
我就可以清楚的观察到

02:37.230 --> 02:39.310
它前后状态是什么样子

02:39.310 --> 02:42.110
它到底是经过了什么X型变成了这个样子

02:42.110 --> 02:43.070
到底是哪里的问题

02:43.070 --> 02:44.830
就可以非常非常轻松地知道

02:44.830 --> 02:46.350
这是关于日字记录

02:46.350 --> 02:48.190
那么另外一块是本张的重点

02:48.190 --> 02:50.190
会花非常非常多的时间来讲

02:50.190 --> 02:51.390
就是关于副作用

02:52.030 --> 02:52.830
副作用处理

02:53.550 --> 02:55.390
因为我们知道在这个瑞大克斯里边

02:55.390 --> 02:57.150
它的X型也好

02:57.150 --> 02:58.590
还有什么Reducer也好

02:58.590 --> 03:00.190
它的不能有副作用对吧

03:00.190 --> 03:01.390
不能有副作用的

03:01.390 --> 03:02.430
那么副作用怎么办

03:02.430 --> 03:04.110
比方说要进行阿迦克斯请求

03:04.110 --> 03:06.030
这是最常见的一种副作用对吧

03:06.030 --> 03:07.950
或者说一些set timeout

03:07.950 --> 03:10.350
set interval这些东西对吧

03:10.350 --> 03:11.310
一部的一些东西

03:11.310 --> 03:13.630
那么这些东西该怎么来处理

03:13.630 --> 03:16.350
这些都需要一些中间键来完成

03:16.990 --> 03:19.390
好我们这些可能先不说什么副作用

03:19.390 --> 03:20.990
先来看这个日字记录

03:21.950 --> 03:24.430
这个地方我们要使用的中间键就很简单

03:25.710 --> 03:26.910
笔迹都不用了

03:26.910 --> 03:28.430
要使用的中间键

03:28.430 --> 03:31.070
因为这个日字记录它仅仅是用来调试的对不对

03:31.070 --> 03:33.870
在那个真正的生产环境里边

03:33.870 --> 03:37.310
就是在真正的部署之后是不需要它存在的

03:37.310 --> 03:39.230
所以说这个东西我们简单了解一下

03:39.230 --> 03:40.510
也非常非常简单

03:40.510 --> 03:41.950
它使用的是第三方库

03:41.950 --> 03:44.270
我们最常见的是这个Reducer's Nougur

03:45.630 --> 03:46.270
Ducer's Nougur

03:46.270 --> 03:48.510
其他的实现跟我们之前的实现差不多

03:48.510 --> 03:50.190
只不过它功能稍微强大一点

03:50.750 --> 03:53.150
其实我们平时也用不到它那么多功能

03:53.150 --> 03:54.510
就简单的用一下就行了

03:54.510 --> 03:56.750
毕竟它只是用来一个起个调试作用

03:57.790 --> 03:58.590
那么如果说

03:58.590 --> 03:59.710
像这些第三方库

04:00.830 --> 04:01.630
这些第三方库

04:02.670 --> 04:04.910
大家可以去往那里去找

04:04.910 --> 04:07.950
比方我们这里要学习Reducer's Nougur对吧

04:07.950 --> 04:10.030
那你去哪里找是不是MPMJS

04:10.030 --> 04:10.910
这个大家说过的

04:11.630 --> 04:14.590
这里就是Reducer's Nougur

04:15.870 --> 04:16.430
搜索一下

04:16.430 --> 04:17.070
那就第一个

04:17.390 --> 04:17.790
第一个

04:18.270 --> 04:21.790
就是专门来给Reducer's加个中间键来做日子记录了

04:21.790 --> 04:23.790
你看它们搜下的量还可以吧

04:23.790 --> 04:24.350
60万

04:25.870 --> 04:26.590
然后怎么用呢

04:26.590 --> 04:28.190
它下面给你说了详细的用法

04:28.190 --> 04:29.550
首先你要安装它

04:29.550 --> 04:30.190
安装它的话

04:30.190 --> 04:31.950
我们这里就使用12来安装

04:33.950 --> 04:35.070
这里就停止了吧

04:36.270 --> 04:39.070
这里我们使用12ADD Reducer's Nougur

04:40.190 --> 04:40.670
安装它

04:42.110 --> 04:44.350
那么安装之后怎么去使用呢

04:44.350 --> 04:46.030
它告诉你它就是个中间键

04:46.190 --> 04:48.030
你这里找出一个中间键就完了

04:48.030 --> 04:49.630
它给你默认导出了一个中间键

04:49.630 --> 04:51.550
中间键我们之前讲过就是一个函数

04:51.550 --> 04:53.710
它给你自己写好了这么一个函数

04:53.710 --> 04:54.670
有兴趣的同学呢

04:54.670 --> 04:56.510
因为这个Nougur我们之前写过对吧

04:56.510 --> 04:57.310
写过一个类似的

04:57.310 --> 04:58.590
其实非常非常简单

04:58.590 --> 04:59.310
有兴趣的同学呢

04:59.310 --> 05:00.990
可以看它的github

05:00.990 --> 05:02.910
github上面的开源代码

05:02.910 --> 05:03.950
你自己去看一下

05:03.950 --> 05:04.990
一般来说的话

05:04.990 --> 05:06.430
开源代码在这个文件夹

05:06.430 --> 05:07.310
在这个SRC

05:07.310 --> 05:10.030
在这个SRC这个文件夹里面

05:10.030 --> 05:10.990
你可以自己去看一下

05:11.870 --> 05:13.230
代码量其实也不多

05:13.230 --> 05:13.630
也不多

05:13.630 --> 05:14.190
非常非常非常少

05:14.910 --> 05:16.750
你看这个index就行了

05:16.750 --> 05:18.830
index就是它默认的

05:18.830 --> 05:20.030
就是导出了代码

05:20.030 --> 05:20.910
默认导出了代码

05:21.870 --> 05:23.870
它这里好像写了好多的样子

05:23.870 --> 05:24.510
其实呢

05:24.510 --> 05:25.230
这些代码呢

05:25.230 --> 05:28.190
主要是做一些配置

05:28.190 --> 05:29.950
因为它有里面提供了很多配置

05:30.510 --> 05:32.510
所以说主要是为一些配置呢

05:32.510 --> 05:34.030
去提供功能的

05:34.030 --> 05:34.910
咱们一会看一下吧

05:34.910 --> 05:35.710
随便看几个配置

05:35.710 --> 05:36.750
因为这个东西呢

05:36.750 --> 05:38.830
大家也没有比较那么深入的去了解

05:38.830 --> 05:40.510
因为这就是个做个日记录

05:40.510 --> 05:41.310
它有啥呢

05:41.310 --> 05:42.990
它就没有什么功能性的东西

05:42.990 --> 05:43.630
安装好了

05:44.910 --> 05:46.430
运行起来

05:46.430 --> 05:49.540
好 等等一下啊

05:49.540 --> 05:50.820
运行起来

05:50.820 --> 05:54.700
然后呢 我们到这个

05:54.700 --> 05:55.580
嗯

05:55.580 --> 05:57.500
对啊 运行起来

05:57.500 --> 06:00.700
然后呢 我们在这个

06:00.700 --> 06:03.420
store里面

06:03.420 --> 06:04.940
把这些东西就删了

06:04.940 --> 06:06.060
这张去把我就删了

06:06.060 --> 06:07.820
好 在这里边

06:07.820 --> 06:10.380
比方说我们现在之前写过一些日记中间件

06:10.380 --> 06:10.780
对吧

06:10.780 --> 06:11.580
就我们自己写的

06:11.580 --> 06:12.380
我们自己写的

06:12.380 --> 06:13.020
看一下吧

06:13.020 --> 06:13.580
看一下

06:13.580 --> 06:15.260
这自己写的

06:15.340 --> 06:17.340
只是打印出来不好看而已

06:17.340 --> 06:18.460
那但是实际上

06:18.460 --> 06:19.420
是不是能打印出来

06:19.420 --> 06:19.820
对不对

06:19.820 --> 06:21.500
是不是能打印出来嘛

06:21.500 --> 06:23.260
我们当时比方说保留一个嘛

06:23.260 --> 06:25.580
保留一个日记记录

06:25.580 --> 06:27.500
这句话也删掉了

06:27.500 --> 06:28.380
那一看一下每一次

06:28.380 --> 06:29.100
哎呦呦呦

06:29.100 --> 06:29.740
这啥

06:29.740 --> 06:33.580
哦 下面就不能用到个二了啊

06:33.580 --> 06:34.940
那一看一下是不是能打印出来嘛

06:34.940 --> 06:36.860
每一次数据变化是不是都能记录

06:36.860 --> 06:38.060
对不对

06:38.060 --> 06:39.980
这个数据原来的数据是啥

06:39.980 --> 06:41.180
经过了什么样的X型

06:41.180 --> 06:42.300
变成了什么样的数据

06:42.300 --> 06:42.540
对吧

06:42.540 --> 06:43.980
清晰了可以记录下来

06:44.060 --> 06:45.820
只不过现在是不用我们自己写的

06:45.820 --> 06:46.780
不用我们自己写的

06:46.780 --> 06:47.740
就是这个log1

06:47.740 --> 06:48.780
然后我们自己不要了

06:48.780 --> 06:49.660
不要了

06:49.660 --> 06:51.420
那么我们这里自己去导入什么

06:51.420 --> 06:53.100
导入他别人写好的一个

06:53.100 --> 06:54.540
非常舒服的一个中间件

06:54.540 --> 06:55.500
叫log

06:55.500 --> 06:56.300
导入进来

06:56.300 --> 06:57.020
来自于哪呢

06:57.020 --> 06:58.300
来自于一位大个使log

06:58.300 --> 06:59.340
就这么简单

06:59.340 --> 07:00.860
然后把这个log1用进去

07:00.860 --> 07:01.500
完了 没了

07:01.500 --> 07:02.460
写完了

07:02.460 --> 07:03.100
啊 写完了

07:03.100 --> 07:04.700
那么具体应用的中间件

07:04.700 --> 07:05.740
你可以使用第一种方式

07:05.740 --> 07:06.700
也可以使用第二种方式

07:06.700 --> 07:08.060
这是我们之前讲的

07:08.060 --> 07:09.260
你们什么好说的

07:09.260 --> 07:10.540
那么现在我们改变了两次

07:10.540 --> 07:11.740
触发了两个X型

07:11.740 --> 07:12.060
对吧

07:12.060 --> 07:13.180
触发了两个X型

07:13.260 --> 07:14.460
好 保存 你看一下吧

07:15.420 --> 07:16.540
你看 就完了

07:17.180 --> 07:17.900
他告诉你

07:17.900 --> 07:18.780
告诉你

07:18.780 --> 07:20.540
这里触发了两个X型

07:20.540 --> 07:22.780
我们这里整个过程触发了两个X型

07:22.780 --> 07:24.060
那么第一个X型呢

07:24.060 --> 07:25.020
你看一下

07:25.020 --> 07:26.780
它的X型给打印出来了

07:26.780 --> 07:27.660
type是什么

07:27.660 --> 07:28.540
payload是什么

07:28.540 --> 07:28.860
对吧

07:28.860 --> 07:29.900
payload是什么

07:29.900 --> 07:31.740
然后pre-stats

07:31.740 --> 07:32.860
之前的状态是啥

07:32.860 --> 07:33.820
之后的状态是啥

07:33.820 --> 07:35.420
所以它打印的漂亮一点嘛

07:35.420 --> 07:35.980
对吧

07:35.980 --> 07:37.020
它打印的漂亮一点

07:37.020 --> 07:37.900
还有啥呢

07:37.900 --> 07:38.620
还有啥呢

07:38.620 --> 07:40.220
毕竟给你记录了这个时间

07:40.220 --> 07:40.700
对不对

07:40.700 --> 07:42.140
给你记录了这个时间

07:42.620 --> 07:43.340
就没了

07:43.340 --> 07:43.660
就没了

07:43.660 --> 07:44.380
就这么简单

07:44.380 --> 07:45.180
就这么简单

07:45.180 --> 07:46.300
一用法理看非常简单

07:46.300 --> 07:47.740
还就是给你写了一个中间键

07:47.740 --> 07:48.860
写了这么一个中间键

07:48.860 --> 07:50.460
然后你去应用就完成了

07:51.100 --> 07:52.060
然后这个nouger里面

07:52.060 --> 07:53.420
它给你提供了一些配置

07:53.420 --> 07:54.540
就是options

07:55.500 --> 07:56.620
对 在前面

07:57.340 --> 07:58.460
这个nouger呢

07:58.460 --> 07:59.980
它还给你提供了一个配置

07:59.980 --> 08:01.740
就是你可以使用一些配置

08:01.740 --> 08:03.180
来创建一个中间键

08:03.180 --> 08:04.060
那么你

08:04.060 --> 08:05.180
如果你要用配置的话

08:05.180 --> 08:07.020
就要用creatednouger了

08:07.020 --> 08:07.820
就要用这个玩意

08:07.820 --> 08:09.580
就不能直接用它的默认这个nouger了

08:09.580 --> 08:10.940
又应该用creatednouger

08:11.660 --> 08:12.300
那么这样子呢

08:12.300 --> 08:14.780
你可以通过这个函数来创建一个中间键

08:14.780 --> 08:16.220
你可以想象

08:16.220 --> 08:16.940
这个函数里面

08:16.940 --> 08:18.140
它会返回一个中间键

08:18.140 --> 08:18.540
对吧

08:18.540 --> 08:19.740
中间键是不是函数

08:19.740 --> 08:19.900
对吧

08:19.900 --> 08:21.100
它会返回一个函数

08:21.100 --> 08:21.820
那么这里面呢

08:21.820 --> 08:23.180
你给它一些配置

08:24.380 --> 08:25.340
它会按照你的配置

08:25.340 --> 08:26.380
来返回一个中间键

08:26.380 --> 08:27.100
那么到时候呢

08:27.580 --> 08:29.020
打印日子的时候呢

08:29.020 --> 08:30.940
你的配置就会影响到日子

08:30.940 --> 08:32.380
比方说我们这里看一下

08:35.780 --> 08:36.900
它说什么呢

08:36.900 --> 08:38.100
比方说这里呢

08:38.100 --> 08:39.940
有一个predict

08:39.940 --> 08:40.820
随便看一下嘛

08:40.820 --> 08:41.380
其实这些呢

08:41.780 --> 08:42.980
我平时也没打印过

08:42.980 --> 08:43.700
也没打印过

08:43.700 --> 08:45.620
因为这个东西只是打印日子而已

08:46.340 --> 08:47.060
predict

08:47.060 --> 08:47.860
它说什么

08:47.860 --> 08:48.660
它说如果

08:49.700 --> 08:51.700
如果指定了一个函数

08:52.900 --> 08:54.020
那么这个函数呢

08:54.020 --> 08:55.460
将被调用

08:55.460 --> 08:56.580
在每一个axing

08:57.540 --> 08:58.660
传到中间键之前

08:58.660 --> 08:59.940
它会被调用

08:59.940 --> 09:00.740
那么也就是说

09:00.740 --> 09:02.340
我们这里面可以配置一个函数

09:03.620 --> 09:04.820
可以配置一个函数

09:06.740 --> 09:07.780
那么这个函数呢

09:07.780 --> 09:08.660
它可以被调用

09:09.540 --> 09:11.220
函数被调用了

09:12.340 --> 09:13.060
看一下吧

09:13.700 --> 09:14.820
那么有了这个函数过后呢

09:14.820 --> 09:15.620
你会发现

09:15.620 --> 09:16.580
这个函数被调用了

09:16.580 --> 09:17.060
也就是说

09:17.060 --> 09:18.180
哦原来明白了

09:18.180 --> 09:18.900
一次就明白了

09:18.900 --> 09:19.300
对吧

09:19.300 --> 09:20.420
那么这样子一来的话

09:20.420 --> 09:22.260
它本身不可以打印日子了

09:22.260 --> 09:23.620
要怎么打印日子

09:23.620 --> 09:23.860
ok

09:23.860 --> 09:24.660
你自己去搞定

09:25.140 --> 09:25.940
你自己去搞定

09:26.740 --> 09:27.540
是这么回事

09:28.180 --> 09:28.820
没什么意思吧

09:29.380 --> 09:29.540
好

09:29.540 --> 09:30.340
这是这一块

09:30.980 --> 09:31.460
这个配置

09:31.460 --> 09:32.260
随便看两个吧

09:32.900 --> 09:33.540
claps

09:33.540 --> 09:35.620
应该是跟折叠有关的这个单词

09:35.620 --> 09:36.420
它说什么

09:36.420 --> 09:37.620
它说得到一个

09:37.620 --> 09:38.420
接受一个布尔

09:38.900 --> 09:39.300
布尔

09:39.860 --> 09:40.900
或者是一个可选的

09:40.900 --> 09:41.860
函数

09:41.860 --> 09:42.500
它说什么呢

09:47.600 --> 09:48.240
就是

09:48.240 --> 09:50.640
它那个日字日字是否被折叠

09:50.640 --> 09:51.200
claps

09:51.920 --> 09:53.200
claps就这么个意思

09:53.200 --> 09:54.400
比方说我们把它设为处

09:55.280 --> 09:55.680
保存

09:56.240 --> 09:56.400
好

09:56.400 --> 09:57.040
你看一下

09:57.040 --> 09:58.400
那么这个字字是被折叠的

09:58.400 --> 09:58.800
对吧

09:58.800 --> 10:00.480
如果说你把它设为force

10:00.480 --> 10:01.280
那么自然而然

10:01.280 --> 10:02.720
这个日子应该是被展开的

10:03.840 --> 10:04.720
就这么个意思

10:04.720 --> 10:05.760
就这么个意思

10:05.760 --> 10:06.480
这个有啥呢

10:06.480 --> 10:06.960
这个东西

10:07.600 --> 10:09.120
那它怎么来控制折叠和展开呢

10:09.120 --> 10:10.960
实际上是用的是控制台的API

10:10.960 --> 10:12.080
控制台的API

10:12.320 --> 10:12.880
这个东西

10:12.880 --> 10:14.240
浏览器控制台的API呢

10:15.040 --> 10:16.320
跟我们也没多少关系

10:16.320 --> 10:17.200
大家有兴趣的话

10:17.200 --> 10:18.080
可以去了解一下

10:18.480 --> 10:19.440
可以怎么去搜呢

10:19.440 --> 10:20.000
怎么去搜

10:20.560 --> 10:21.680
搜那个console

10:22.880 --> 10:23.360
MDN

10:24.560 --> 10:26.400
这是浏览器的WebAPI

10:26.880 --> 10:28.240
跟控制台相关的

10:28.240 --> 10:29.520
主要是用于调试的

10:29.520 --> 10:30.560
它可以控制很多东西

10:30.560 --> 10:32.160
还可以控制颜色的这些东西

10:32.160 --> 10:32.400
对吧

10:32.400 --> 10:33.520
你看这下面有颜色

10:33.520 --> 10:33.840
对不对

10:34.640 --> 10:34.880
好

10:35.520 --> 10:36.640
随便再看两个吧

10:36.640 --> 10:37.120
还有什么

10:37.600 --> 10:38.240
delation

10:38.560 --> 10:39.120
delation

10:39.680 --> 10:41.760
是不是打印

10:41.760 --> 10:43.200
打印delation

10:43.200 --> 10:45.040
就是每一个x形执行的时间

10:45.520 --> 10:46.480
比方说我们这里

10:47.040 --> 10:48.880
打印一个每个x形执行的时间

10:51.280 --> 10:52.080
执行的时间

10:52.080 --> 10:53.200
保存delation

10:54.240 --> 10:55.680
那么这样子还会打印出

10:55.680 --> 10:57.680
每一个x形它执行了多少时间

10:57.680 --> 10:58.880
0.09秒

10:58.880 --> 10:59.920
0.08秒

10:59.920 --> 11:00.880
每个x形它做了

11:01.280 --> 11:01.680
好秒

11:01.680 --> 11:02.160
好秒

11:02.560 --> 11:04.160
那么它执行整个

11:04.160 --> 11:05.520
到整个触发完成

11:06.400 --> 11:07.280
需要多少时间

11:07.280 --> 11:07.680
对吧

11:07.680 --> 11:09.280
它都可以在中间页里面做记录的

11:09.280 --> 11:10.240
大家可以想象一下

11:10.240 --> 11:11.280
如果它写来码的话

11:11.280 --> 11:12.080
应该怎么去写

11:12.080 --> 11:12.880
也非常简单

11:13.760 --> 11:14.320
就想了

11:14.320 --> 11:15.520
这些东西没啥好说的

11:15.520 --> 11:16.400
没啥好说的

11:16.400 --> 11:17.360
它还有不少的配置

11:17.360 --> 11:19.920
这配置我反正凭什么用不到了

11:19.920 --> 11:20.480
就是做

11:20.480 --> 11:22.160
就是因为它就是做一个日子记录

11:22.160 --> 11:24.160
我们主要是通过它来做一些调试

11:24.160 --> 11:25.520
比方说哪个地方出了问题

11:26.560 --> 11:27.520
哪个地方出了问题

11:27.520 --> 11:28.960
我们可以在这里看一下

11:28.960 --> 11:30.000
看一下是哪一块

11:30.000 --> 11:31.680
哪个action出发出了问题

11:31.680 --> 11:33.120
主要是做一个调试用的

11:33.520 --> 11:34.880
这是这个log的中间键

11:35.920 --> 11:36.880
这个log的中间键

11:36.880 --> 11:38.080
大家稍微注意一下

11:38.080 --> 11:40.160
它的一个非常小的细节

11:40.160 --> 11:41.440
就是这个log的中间键

11:41.440 --> 11:42.960
你一定要放到最后一个

11:42.960 --> 11:43.520
就是说

11:43.520 --> 11:45.440
如果说你前边还有很多中间键的话

11:45.440 --> 11:47.440
就是也有很多中间键要运用的话

11:47.440 --> 11:49.840
你应该把log的中间键放到最后一个

11:50.400 --> 11:51.200
为什么呢

11:51.200 --> 11:53.040
那么你们目前肯定是理解不了

11:53.040 --> 11:54.320
为什么它要放到最后一个

11:54.960 --> 11:57.360
它跟我们后边学习的一些中间键有关系

11:57.360 --> 11:59.200
因为后边比方说要学习上课

11:59.200 --> 12:00.880
这些处理复作用的中间键

12:00.880 --> 12:02.880
会导致action发生一些变化

12:04.160 --> 12:06.080
那么为了记录纯粹的action

12:06.080 --> 12:06.960
它要放到最后一个

12:06.960 --> 12:08.080
那么现在别管

12:08.080 --> 12:09.040
以后我会解释

12:09.040 --> 12:09.840
你现在就记住

12:09.840 --> 12:11.120
它应该放到最后一个

12:11.120 --> 12:12.560
中间键的最后一个就行了

12:12.560 --> 12:13.680
其他的没啥

12:13.680 --> 12:15.120
这就是log的中间键

12:15.120 --> 12:16.640
所以说没什么好说的

12:16.640 --> 12:18.240
大家知道有这么个中间键

12:18.240 --> 12:19.440
知道怎么去使用就行了

12:19.440 --> 12:21.200
平时用的话就直接这样用

12:21.200 --> 12:22.640
拿去写这些东西

12:22.640 --> 12:24.000
它本来就是做调试的

12:24.000 --> 12:24.880
形容都干嘛呢

12:25.600 --> 12:27.760
就是直接log直接用就行了

12:27.760 --> 12:28.800
直接用就行了

12:30.160 --> 12:30.720
好了

12:30.720 --> 12:33.120
那么这就是log的中间

