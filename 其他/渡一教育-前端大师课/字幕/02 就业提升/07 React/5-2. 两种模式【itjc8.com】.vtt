WEBVTT

00:01.070 --> 00:04.470
这节课我们不设计到任何的代码

00:04.470 --> 00:09.070
反正你前面把那个Rex,Rotor,Dorm的库先安装好

00:09.070 --> 00:11.870
这节课我们先讲一些概念

00:11.870 --> 00:15.270
因为我们后边学习的时候会反复的用到这些概念

00:15.270 --> 00:17.370
因此一些概念不熟悉的话

00:17.370 --> 00:20.070
那么后边学习的你讲起来也牢火

00:20.070 --> 00:21.470
你理解起来也牢火

00:21.470 --> 00:23.770
不过很多同学学过5U

00:23.770 --> 00:26.870
那么学了5U之中的这两个概念你肯定不会陌生

00:26.870 --> 00:29.070
我这节课主要是针对那些

00:29.270 --> 00:32.370
这对这两个概念比较模糊的同学

00:32.870 --> 00:36.070
无论是5U还是Rex

00:36.070 --> 00:39.070
他们在实现那个路由的时候

00:39.070 --> 00:41.270
什么叫路由再解释一下

00:41.270 --> 00:47.870
就是根据不同的页面地址展示不同的组件

00:47.870 --> 00:49.670
这就是路由

00:49.670 --> 00:52.670
当然这个路由的概念在软件开发领域里面

00:53.070 --> 00:54.170
很多

00:54.170 --> 00:57.570
这概念不同的场景里面可能意识有些差异

00:57.570 --> 00:58.970
我们这里主要说的是

00:59.070 --> 01:01.170
在那些单页应用程序里面

01:01.170 --> 01:03.070
比较说5U在react里面

01:03.070 --> 01:04.870
他们的路由表示什么意思

01:04.870 --> 01:07.370
就是根据不同的页面地址展示不同的组件

01:07.370 --> 01:08.170
这就是路由

01:09.470 --> 01:11.770
然后这里

01:13.370 --> 01:14.670
它会根据

01:14.670 --> 01:17.470
因为页面地址里面它包含很多很多东西

01:17.870 --> 01:19.870
我们页面地址里面至少你现在知道

01:19.870 --> 01:21.770
应该包含什么写一名

01:21.770 --> 01:22.870
端口号

01:22.870 --> 01:23.970
域名

01:23.970 --> 01:25.070
路径

01:25.070 --> 01:28.570
还有什么那个叫做页面参数

01:28.670 --> 01:30.570
还有包括什么哈希对吧

01:30.570 --> 01:32.470
你可能会知道这么一些东西

01:32.470 --> 01:36.070
那么这个页面地址里面包含了这么多的信息

01:36.070 --> 01:37.470
那么哪些信息

01:38.070 --> 01:40.370
用来决定展示哪个组件的

01:40.370 --> 01:42.070
就这些信息比方说域名

01:42.070 --> 01:43.770
不同的域名展示不同的组件吗

01:43.770 --> 01:44.970
还是说什么样子呢

01:44.970 --> 01:47.770
就根据哪些信息来展示不同的组件的

01:47.770 --> 01:50.970
因此这里就产生了两种模式

01:50.970 --> 01:52.470
一般来说的话

01:52.470 --> 01:54.470
一些路由的第三方插件的话

01:54.470 --> 01:56.470
两种模式它一般都会支持

01:56.470 --> 01:57.570
都会支持

01:57.570 --> 02:00.770
其中一种模式叫做哈希

02:01.470 --> 02:02.270
Rotor

02:02.670 --> 02:04.070
叫做哈希路由

02:05.670 --> 02:08.470
另一种模式叫做History

02:10.070 --> 02:12.170
完成来说应该叫做Browser

02:13.870 --> 02:15.170
叫做浏览器

02:16.270 --> 02:19.070
History历史记录Rotor

02:19.070 --> 02:22.270
叫做浏览器历史记录路由

02:23.270 --> 02:25.970
一般会包含这么两种路由模式

02:26.270 --> 02:28.070
我们这几课主要是分开来讲

02:28.070 --> 02:31.370
这两种到底是什么东西

02:32.070 --> 02:33.870
先还不是说收集到路由

02:33.870 --> 02:35.870
先说这两种到底是什么玩意

02:36.570 --> 02:37.870
我们讲的角度

02:37.870 --> 02:40.470
就从原生的介石来进行讲解

02:40.570 --> 02:42.270
你把这个东西先理解清楚

02:42.570 --> 02:43.670
理解清楚之后

02:43.670 --> 02:45.170
我们再说后边的事情

02:46.570 --> 02:49.470
于首先在解释这两个概念之前

02:49.470 --> 02:52.870
大家又要认识到URO地址的组成

02:53.570 --> 02:54.770
地址组成

02:54.870 --> 02:56.870
因为我们知道我们访问一个网页

02:56.870 --> 02:58.770
始终是通过URO地址来访问的

02:58.770 --> 02:59.170
对吧

02:59.270 --> 03:00.370
甭管我们本地

03:00.370 --> 03:02.070
比方说我们本地访问的时候

03:02.070 --> 03:03.070
是这样子访问的

03:03.070 --> 03:04.970
adp localhost

03:04.970 --> 03:05.470
对吧

03:05.770 --> 03:06.470
3000

03:06.870 --> 03:08.270
然后鞋杠啥啥啥

03:08.270 --> 03:08.770
对吧

03:08.770 --> 03:10.570
我们都是通过这种地址来访问的

03:10.670 --> 03:14.570
而我们在访问真实的一个网站的时候

03:14.570 --> 03:16.170
可能会通过域名来访问

03:16.170 --> 03:16.670
对不对

03:16.770 --> 03:18.670
可能会通过域名来访问

03:18.770 --> 03:22.170
那么这里这些地方都是叫做URO地址

03:22.370 --> 03:23.570
就是我们互联网中

03:23.570 --> 03:24.770
有各种各样的资源

03:24.770 --> 03:25.970
包括什么页面

03:26.670 --> 03:27.770
还有什么图片

03:27.770 --> 03:28.570
你看一下图片

03:28.570 --> 03:29.770
我们随便搞一张图片

03:31.170 --> 03:32.770
这里就这张图片

03:32.970 --> 03:34.270
复制一下图片地址

03:34.270 --> 03:35.870
我们在这个窗口里面直接访问

03:35.970 --> 03:38.170
你看这里还是不是还是一个URO地址

03:38.670 --> 03:40.170
咱们网站上有各种各样

03:40.170 --> 03:41.970
就是互联网中有各种各样的资源

03:41.970 --> 03:42.770
有图片

03:42.770 --> 03:43.770
CSS

03:43.970 --> 03:44.970
还有什么

03:46.270 --> 03:46.970
GS

03:46.970 --> 03:47.770
这些都是资源

03:47.770 --> 03:49.370
还有页面都是资源

03:49.470 --> 03:50.770
那么这些资源

03:50.870 --> 03:53.370
他们都会通过唯一的一个地址

03:53.370 --> 03:54.570
去进行访问

03:54.770 --> 03:55.470
那么这个地址

03:55.470 --> 03:57.570
我们把它叫做URO地址

03:58.370 --> 03:59.670
那么这个URO里面

03:59.670 --> 04:02.470
它别看它只有这么短短的一些东西

04:02.570 --> 04:03.570
那么这个东西里边

04:03.570 --> 04:05.870
它包含了很多很多的信息

04:06.070 --> 04:07.170
那么这个信息

04:07.270 --> 04:07.870
我们

04:08.970 --> 04:09.770
就是这些信息

04:09.770 --> 04:11.870
我们把它认为是URO地址的组成

04:11.870 --> 04:13.770
它有很多部分组成

04:13.970 --> 04:15.370
那么一个URO地址

04:15.370 --> 04:16.870
它有哪些部分组成的

04:16.870 --> 04:19.370
我给大家写一个完整的URO地址

04:19.370 --> 04:20.470
我这里就随便写了

04:20.870 --> 04:21.670
就随便写了

04:23.570 --> 04:25.670
我们这里随便写一个

04:25.670 --> 04:26.670
随便写个地址

04:27.170 --> 04:27.970
那么其他一会

04:27.970 --> 04:30.670
我们带真实的网站里面去看一下

04:30.670 --> 04:31.870
这些地址是怎么回事

04:32.570 --> 04:33.970
一个URO地址

04:33.970 --> 04:34.670
比方说

04:34.670 --> 04:37.470
我们把写个写个完整的URO地址

04:38.770 --> 04:40.970
这里随便写一个

04:41.770 --> 04:43.370
react.com

04:43.670 --> 04:44.470
帽号

04:45.470 --> 04:47.270
就是443

04:47.670 --> 04:48.470
写杠

04:49.270 --> 04:52.270
然后这里写上一个news

04:53.470 --> 04:57.470
1-2-1.atml

04:57.870 --> 04:59.970
然后后边写上一个问号

05:00.570 --> 05:02.270
a等于1

05:02.770 --> 05:03.770
b等于2

05:03.870 --> 05:05.570
然后写上一个警号

05:05.670 --> 05:07.270
警号后边写上一个

05:07.270 --> 05:08.270
随便写吧

05:08.470 --> 05:09.970
abcdeft

05:10.270 --> 05:11.070
好写完了

05:11.270 --> 05:14.570
这就是一个完整的URO地址

05:14.970 --> 05:16.070
那么这个地址里面

05:16.070 --> 05:17.270
它包含了哪些信息的

05:17.270 --> 05:19.170
我们一部分一部分来解释

05:19.970 --> 05:21.270
我们把这个地址放过来

05:26.270 --> 05:28.270
那么这些地方包含哪些信息

05:28.270 --> 05:29.470
首先第一个

05:30.470 --> 05:31.870
是写意名

05:32.370 --> 05:33.270
写意名是什么

05:33.270 --> 05:35.470
就是冒号前面后面前面的东西

05:35.870 --> 05:37.370
叫做attps

05:37.570 --> 05:39.670
但我们平时遇到的写意有两种

05:40.470 --> 05:41.670
通常情况下有两种

05:41.670 --> 05:42.870
当然写意很多

05:43.170 --> 05:44.970
有attps 有attp

05:44.970 --> 05:46.770
到时候里面学习服务端的时候

05:46.770 --> 05:47.870
这个东西再详细讲

05:48.470 --> 05:49.270
这是写意名

05:49.270 --> 05:51.370
我们知道这个叫东西叫写意名就行了

05:51.670 --> 05:52.870
还有第二部分叫做

05:52.970 --> 05:55.170
sw.react.com

05:55.370 --> 05:57.070
那么这一部分叫做

05:57.470 --> 05:58.370
主机名

05:59.270 --> 06:00.470
主机名

06:01.170 --> 06:03.170
写意名我们通常用skema

06:03.770 --> 06:04.770
skema来表示

06:05.070 --> 06:08.270
主机名我们通常用host来表示

06:08.470 --> 06:09.170
这是单词

06:09.470 --> 06:10.470
这是主机名

06:10.770 --> 06:13.170
主机名它又有很多种

06:13.370 --> 06:15.370
主机名它有ip地址

06:15.570 --> 06:17.070
它有可能是ip地址

06:18.070 --> 06:20.070
主机名我这些说一下吧

06:20.270 --> 06:21.670
可能是ip地址

06:21.970 --> 06:24.870
可能是预设值

06:24.870 --> 06:26.870
预设值就包括什么localhost

06:26.870 --> 06:27.270
对吧

06:27.370 --> 06:29.670
像这种就是预设值表示本机

06:29.970 --> 06:31.270
还有就是什么预名

06:31.970 --> 06:32.570
预名

06:32.770 --> 06:34.070
那么这里就是预名

06:34.170 --> 06:34.670
对不对

06:35.170 --> 06:35.670
预名

06:36.170 --> 06:37.570
它都有都叫做主机名

06:37.570 --> 06:41.270
还有就是局域网中

06:42.370 --> 06:43.770
如果里面是一个局域网

06:43.770 --> 06:45.170
局域网之间互相访问的话

06:45.170 --> 06:46.170
那么局域网中的

06:46.170 --> 06:48.070
就是电脑名称

06:48.370 --> 06:49.570
这个电脑名称在哪呢

06:49.570 --> 06:49.970
在这

06:50.970 --> 06:51.770
点击右键

06:52.070 --> 06:52.570
属性

06:53.270 --> 06:53.970
属性里边

06:55.370 --> 06:56.370
就是个计算机名

06:58.070 --> 06:59.270
计算机名就是这个东西

06:59.870 --> 07:00.570
就这么个玩意

07:01.170 --> 07:01.770
你要的意思吧

07:03.070 --> 07:04.370
总之主机名它有很多种

07:04.370 --> 07:06.470
我们平时访问互联网络的页面的话

07:06.570 --> 07:07.470
都是使用预名

07:07.670 --> 07:08.570
都是使用预名

07:10.070 --> 07:11.370
这个问题不用去深究

07:11.370 --> 07:14.270
如果说你们学习了这个网络的原理的话

07:14.270 --> 07:15.270
应该知道这一块的东西

07:15.270 --> 07:15.570
对吧

07:16.370 --> 07:17.770
这是主机名

07:17.870 --> 07:18.470
这一部分

07:18.670 --> 07:20.170
然后还有一个端口号

07:21.170 --> 07:22.570
端口号叫做port

07:24.170 --> 07:24.670
port

07:24.970 --> 07:26.470
端口号这里就是443

07:26.870 --> 07:27.470
端口号

07:27.970 --> 07:28.670
这个端口号

07:28.670 --> 07:29.670
平时我们上网的时候

07:29.670 --> 07:31.370
为什么没有写的这个端口号

07:31.470 --> 07:33.670
因为它端口号还有默认值

07:34.370 --> 07:37.670
如果协议是addp

07:38.170 --> 07:39.670
端口号是

07:40.570 --> 07:41.370
80

07:41.970 --> 07:43.670
则可以省略

07:44.970 --> 07:45.670
端口号

07:46.570 --> 07:47.870
就可以省略就不用写

07:47.870 --> 07:48.670
就不用写

07:50.470 --> 07:51.570
那比方说吧

07:51.570 --> 07:53.070
我们访问百度的时候

07:53.070 --> 07:54.570
如果说addp

07:55.270 --> 07:57.170
3w.百度调抗

07:58.270 --> 07:59.170
那么访问这个百度

07:59.770 --> 08:01.670
它强制给你变成了这个协议

08:01.770 --> 08:02.770
强制给你变成什么形

08:02.870 --> 08:04.570
我们看一下有没有一个协议

08:04.970 --> 08:05.770
比方比战

08:05.970 --> 08:06.470
比战

08:06.470 --> 08:07.770
它也强制给你变成一个协议

08:07.770 --> 08:09.970
现在基本上都是这个addp s

08:10.470 --> 08:11.870
安全闪述协议了

08:11.970 --> 08:13.070
基本上都是这个协议了

08:13.870 --> 08:15.470
你要找一个addp协议

08:15.470 --> 08:17.470
还真的挺难的

08:17.470 --> 08:18.470
真的挺难的

08:20.170 --> 08:21.270
我们找一些官网吧

08:21.270 --> 08:22.170
一些官网的话

08:22.170 --> 08:23.270
应该是这个协议

08:23.470 --> 08:25.070
我们看一下那个度1的官网

08:25.070 --> 08:25.970
edu

08:26.970 --> 08:28.870
度1 edu.com

08:31.540 --> 08:33.640
3w.edu edu.com

08:33.940 --> 08:34.440
ok

08:34.440 --> 08:36.240
那么它的协议就是addp协议

08:36.840 --> 08:38.140
那么addp协议的话

08:38.140 --> 08:39.440
它这里给省略掉了

08:39.440 --> 08:40.740
协议名你看不见了

08:41.140 --> 08:42.040
其实你复制一下

08:42.040 --> 08:42.540
你看

08:42.840 --> 08:44.040
你会看到协议名

08:44.040 --> 08:45.140
会看到这个协议名

08:45.540 --> 08:47.440
如果因为它的浏览器这个窗口里边

08:47.440 --> 08:49.340
它给你就是给你省略掉了

08:49.340 --> 08:50.540
实际上你复制一下你

08:50.540 --> 08:51.840
把这个地方复制

08:51.840 --> 08:53.040
粘贴过的到计时板里边

08:53.040 --> 08:54.140
你可以看到这个协议

08:54.140 --> 08:55.340
实际上是有的

08:55.340 --> 08:56.340
然后这个协议

08:56.340 --> 08:57.740
协议就是主机名

08:57.740 --> 08:59.540
就是后面的我们给加上一个巴林

09:00.340 --> 09:00.840
回车

09:00.840 --> 09:02.140
你看是不是还是可以访问

09:02.140 --> 09:03.940
而且那浏览器是不是给你省略掉了

09:03.940 --> 09:05.740
因为巴林是默认端口

09:06.140 --> 09:07.040
默认端口

09:07.040 --> 09:08.740
这个端口号到底有什么用

09:08.740 --> 09:10.940
它你要学到服务器之后才知道

09:10.940 --> 09:11.640
才知道

09:11.640 --> 09:12.840
我们现在的只需要知道

09:15.140 --> 09:16.640
学习的也没有多少关系

09:16.640 --> 09:18.740
我们主后边的主要重点是在后边

09:19.340 --> 09:19.540
好

09:19.540 --> 09:20.240
这是关

09:20.240 --> 09:21.440
这是关于端口号

09:21.940 --> 09:27.140
然后下一个是如果说协议是ATTPS

09:27.340 --> 09:28.740
那么端口号

09:28.740 --> 09:30.840
如果说你的端口号是43

09:31.840 --> 09:34.440
则可以省略端口号

09:36.540 --> 09:38.140
那么这个东西就很好举例的

09:38.140 --> 09:38.840
比方说

09:40.140 --> 09:41.340
就是这个B站

09:41.340 --> 09:41.940
B站

09:41.940 --> 09:43.840
B站它不是ATTPS协议吗

09:43.840 --> 09:46.240
我们后面给大家加上个帽号端口号43

09:46.240 --> 09:47.040
一回车

09:47.040 --> 09:48.540
是看是不是还是可以访问

09:48.540 --> 09:48.940
对吧

09:48.940 --> 09:50.540
而且给你省略掉了这个

09:50.540 --> 09:53.340
就是省略掉了就是这个43

09:53.640 --> 09:55.440
当然如果你用其他端口访问的话

09:55.440 --> 09:56.440
那肯定访问不到了

09:56.440 --> 09:57.840
因为他要求这个网站

09:57.840 --> 09:59.640
他端口号必须是43

09:59.640 --> 10:01.040
这是服务器规定的

10:01.240 --> 10:04.040
用其他端口的话你就访问不到这个网站了

10:04.040 --> 10:06.340
他只接受这个对应的端口

10:07.240 --> 10:09.840
一般来说我们要提供给

10:09.840 --> 10:11.440
用户访问的网站的话

10:11.440 --> 10:12.840
如果你是ATTPS协议

10:12.940 --> 10:14.740
如果你服务器选择的是这个协议

10:14.740 --> 10:16.540
那么你端口号使用80

10:16.540 --> 10:18.140
如果你服务器选择的是这个协议的话

10:18.140 --> 10:19.240
端口号使用43

10:19.240 --> 10:20.140
这一般的做法

10:21.140 --> 10:22.940
这是关于端口号这一部分

10:22.940 --> 10:24.640
这三部分还不是我们今天

10:24.640 --> 10:25.640
我们后边的终点

10:25.640 --> 10:26.840
我们终点是在后边

10:27.340 --> 10:28.340
终点是后边

10:28.340 --> 10:29.540
后边这一部分是啥

10:30.540 --> 10:31.240
比较到这里

10:33.040 --> 10:34.140
这一部分是啥

10:34.140 --> 10:35.040
叫做路径

10:35.640 --> 10:36.240
路径

10:36.640 --> 10:37.440
访问路径

10:38.840 --> 10:39.640
就这一部分

10:39.640 --> 10:40.940
它叫做访问路径

10:42.840 --> 10:44.140
可以这样子说吧

10:45.740 --> 10:47.840
协议表示什么意思呢

10:47.840 --> 10:51.640
协议表示你去访问这种网站的方式

10:51.840 --> 10:53.640
比方说你访问一个

10:53.840 --> 10:55.140
互联网络的资源

10:55.440 --> 10:57.040
就好必说你要从

10:57.240 --> 10:58.640
某一个地方出发

10:58.740 --> 10:59.940
去拿一个东西

11:00.440 --> 11:02.040
去某一个地方去拿一个东西

11:02.240 --> 11:04.140
那么协议就好必说你去

11:04.240 --> 11:05.540
你选择的交通工具

11:05.540 --> 11:07.040
你是坐公交车去

11:07.040 --> 11:08.340
还是走路过去

11:08.340 --> 11:09.540
还是打车过去

11:10.440 --> 11:11.140
相当于是这个东西

11:11.140 --> 11:12.240
就这么理解吧

11:12.240 --> 11:13.140
我们现在怎么办

11:13.140 --> 11:14.140
你没学服务器

11:14.140 --> 11:15.440
只能说是这样的理解

11:16.140 --> 11:18.640
主机名相当于是什么呢

11:18.840 --> 11:20.640
相当于是

11:21.040 --> 11:23.140
那个街道

11:23.440 --> 11:25.840
就是街道的号牌

11:25.840 --> 11:26.140
对吧

11:26.140 --> 11:27.540
你拿条街多少号

11:27.740 --> 11:28.940
相当于是号牌

11:28.940 --> 11:30.440
你要找到那个地方

11:31.540 --> 11:34.340
端口号相当于是啥呢

11:34.340 --> 11:36.540
你找到那个地方不是一栋楼吗

11:37.640 --> 11:38.540
第几层楼

11:39.240 --> 11:40.240
第哪个办公室

11:40.440 --> 11:41.540
第哪个办公室

11:41.740 --> 11:42.840
那么前面三个了

11:42.840 --> 11:44.240
你是不是已经到了办公室了

11:44.640 --> 11:45.540
你要去拿东西吗

11:45.540 --> 11:45.940
对吧

11:46.040 --> 11:47.240
到了一个办公室了

11:47.440 --> 11:48.740
路径是什么呢

11:49.440 --> 11:50.440
路径是什么呢

11:50.440 --> 11:51.540
路径是相当于是

11:51.540 --> 11:53.540
这个办公室里边有很多的箱子

11:53.540 --> 11:54.740
有很多的抽屉

11:55.540 --> 11:58.240
你要在哪一行

11:58.240 --> 12:00.840
哪一列的抽屉里边去找东西

12:00.840 --> 12:01.740
路径相当于

12:01.740 --> 12:02.640
可以这样去理解

12:02.640 --> 12:03.440
怎么办呢

12:03.440 --> 12:04.740
只能这样子解释

12:04.840 --> 12:06.040
路径相当于是这个

12:06.540 --> 12:08.440
你已经找到这个办公室了

12:08.940 --> 12:10.640
那么你需要在办公室里边去

12:10.640 --> 12:11.640
拿什么东西

12:11.840 --> 12:13.340
在哪个地方去拿东西

12:13.440 --> 12:14.240
这是路径

12:14.240 --> 12:16.340
路径对我们来说非常非常重要

12:18.140 --> 12:19.240
这是官员路径

12:20.440 --> 12:22.440
接下来路径后边

12:22.440 --> 12:24.540
他有可能会出现一个问号

12:25.440 --> 12:27.040
问号后边有一些数据

12:27.340 --> 12:28.240
有一些东西

12:28.540 --> 12:29.640
那么这个东西叫什么呢

12:29.740 --> 12:31.740
叫做search

12:32.040 --> 12:34.140
我真的不知道该怎么翻译了这个玩意

12:35.140 --> 12:36.640
叫做地址参数

12:36.840 --> 12:37.840
叫做地址参数

12:38.040 --> 12:38.840
真的不知道

12:38.840 --> 12:39.940
你不要去管中文

12:40.140 --> 12:41.640
中文我真的不知道该怎么翻译

12:41.740 --> 12:42.840
他有两种教法

12:42.840 --> 12:43.940
一种叫做search

12:44.540 --> 12:45.740
一种叫做query

12:46.640 --> 12:47.440
都是一个意思

12:47.540 --> 12:48.440
都是一个意思

12:48.640 --> 12:50.640
表示路径后边了

12:50.740 --> 12:52.240
就是附带的数据

12:52.540 --> 12:53.240
就这一部分

12:54.640 --> 12:57.140
他表示附带的数据

12:57.640 --> 12:58.540
附带的数据

12:58.640 --> 13:00.540
比方说你要从抽屉里边去拿东西

13:00.540 --> 13:01.040
对吧

13:01.040 --> 13:02.640
那么这个时候就有人过来了

13:02.840 --> 13:03.340
所以说

13:03.340 --> 13:04.840
你来给我一些证件

13:05.140 --> 13:06.640
看一下你有没有

13:06.840 --> 13:07.540
要

13:07.540 --> 13:09.540
有没有就是权限的拿这个东西

13:09.640 --> 13:09.940
对吧

13:09.940 --> 13:12.140
我们要就可以通过附带的一些数据给他

13:12.840 --> 13:15.440
比方说我们要拿东西对吧

13:15.540 --> 13:16.140
拿东西

13:16.140 --> 13:18.940
抽屉里边有很多很多的文件

13:19.440 --> 13:20.440
有很多很多的文件

13:20.440 --> 13:21.140
我要找啥

13:21.140 --> 13:23.140
找啥文件呢

13:23.240 --> 13:25.940
是不是可以通过这个附加的数据来告诉他

13:25.940 --> 13:26.940
我要找一些

13:27.640 --> 13:29.740
不要说我要迁移户口

13:30.140 --> 13:31.040
我要迁移户口

13:31.040 --> 13:32.940
那我要找我的户口的信息

13:32.940 --> 13:33.640
对不对

13:33.640 --> 13:34.440
等等等等

13:34.440 --> 13:35.540
就这么个意思

13:35.540 --> 13:36.540
再听一下就得了

13:36.740 --> 13:38.040
就是我可以可能的

13:38.340 --> 13:39.740
我会附带一些数据

13:39.740 --> 13:40.840
附带一些数据

13:40.840 --> 13:42.540
那么这些数据全是自定义的

13:42.540 --> 13:43.640
你爱咋写咋写

13:43.740 --> 13:44.840
那么他的格式

13:45.040 --> 13:46.640
这个数据的格式是这样子的

13:47.140 --> 13:48.040
数据名

13:48.640 --> 13:50.340
有的时候我们把它叫做属性名

13:51.040 --> 13:52.640
等于属性值

13:53.140 --> 13:54.840
然后一个and符号分割

13:55.140 --> 13:56.840
然后是属性名

13:57.040 --> 14:00.040
等于属性值

14:01.040 --> 14:02.640
就相当于是把对象展开

14:02.640 --> 14:04.440
对象的信息展开写到这

14:04.440 --> 14:05.740
你看一下这里是不是这样子

14:05.740 --> 14:07.740
A等于B等于2

14:07.840 --> 14:08.740
对不对

14:08.740 --> 14:09.740
我就该附带一些数据

14:09.740 --> 14:11.140
这些数据想想写咋写

14:11.140 --> 14:12.140
大家约定好

14:13.140 --> 14:14.040
这是地址参数

14:14.040 --> 14:17.140
我们现在先了解这一块到底是什么东西

14:17.140 --> 14:19.740
我们后边的自然会用到这些东西了

14:20.140 --> 14:20.940
现在我们先了解

14:20.940 --> 14:23.140
这里到底是叫做什么

14:23.140 --> 14:25.140
叫做search或者叫做query

14:26.740 --> 14:27.740
这是这一部分

14:28.540 --> 14:29.340
另外一部分

14:29.740 --> 14:30.740
最后这一部分

14:30.840 --> 14:32.140
当然这一部分是可选的

14:32.140 --> 14:33.540
地址参数是可选的

14:34.540 --> 14:35.340
是可选的

14:35.940 --> 14:37.540
最后一部分叫做哈希

14:38.740 --> 14:39.940
这个是真没法翻译的

14:40.440 --> 14:41.340
它叫做哈希

14:42.140 --> 14:44.140
有的时候也把它叫做毛点

14:45.540 --> 14:46.140
毛点

14:47.340 --> 14:49.640
因为我们之前学ATM的时候学个毛链接

14:49.640 --> 14:50.040
对吧

14:50.040 --> 14:51.340
毛链接就是一个A元数

14:51.340 --> 14:53.140
A元数链接到某一个毛点

14:53.540 --> 14:55.540
那么这个地方我们可以把它叫毛点

14:55.540 --> 14:58.540
但它最规矩的叫法叫做哈希

14:58.540 --> 14:59.340
哈希

14:59.540 --> 15:02.340
那么哈希它也是附带了一个信息

15:02.740 --> 15:04.140
也是附带了一个信息

15:04.740 --> 15:06.440
它也属于附带的数据

15:07.440 --> 15:08.340
附带的数据

15:09.340 --> 15:09.840
ok

15:10.940 --> 15:11.540
没问题吧

15:11.940 --> 15:12.440
好

15:12.540 --> 15:13.240
这里呢

15:13.240 --> 15:15.240
我们就把这些东西解释清楚

15:15.240 --> 15:16.840
每一个部分叫做啥

15:16.840 --> 15:17.640
叫啥

15:18.940 --> 15:19.240
好

15:19.240 --> 15:21.840
先把这个UIL的组成部分认清楚

15:21.840 --> 15:24.140
那么UIL就只有这些部分组成

15:24.140 --> 15:25.240
不可能有其他的了

15:25.640 --> 15:26.340
一定没了

15:26.340 --> 15:27.040
一定没了

15:27.140 --> 15:29.340
一个完整的UIL就是这些部分组成

15:30.340 --> 15:30.540
好

15:30.540 --> 15:31.340
接下来呢

15:31.340 --> 15:33.440
把我们先有可能有些同学

15:33.440 --> 15:35.540
到这有些模糊对这些概念

15:35.640 --> 15:36.240
没关系

15:36.240 --> 15:37.540
没有任何关系

15:37.640 --> 15:38.240
你们呢

15:38.240 --> 15:39.440
现在目前的

15:39.440 --> 15:41.040
你们以后要学到服务器过后

15:41.140 --> 15:42.940
才完全能搞清楚这些东西

15:42.940 --> 15:44.140
到底是有什么意义

15:44.540 --> 15:46.940
你们现阶段的只需要知道

15:47.340 --> 15:48.740
这里每一部分叫啥

15:49.040 --> 15:49.940
我以后说到主经民

15:49.940 --> 15:51.140
你知道要叫什么东西

15:51.140 --> 15:52.440
当然我们不太会说到

15:52.540 --> 15:53.540
一般会说到什么路径

15:53.540 --> 15:55.140
你知道是哪一部分叫做路径

15:55.640 --> 15:56.440
地址参数

15:56.840 --> 15:57.940
哪一部分是地址参数

15:58.040 --> 15:59.140
还有什么就是哈希

15:59.140 --> 16:00.640
你要知道什么地方叫哈希

16:01.540 --> 16:01.940
好吧

16:02.340 --> 16:02.940
ok

16:02.940 --> 16:04.540
我们先把这个地方解释清楚

16:04.540 --> 16:06.440
接下来我们再解释这两种模式

16:07.040 --> 16:08.840
第一种叫做哈欣路由

16:09.240 --> 16:11.440
哈欣路由是什么样的一种模式呢

16:11.440 --> 16:12.340
它是这样子

16:13.340 --> 16:15.340
它是根据哈希值

16:15.940 --> 16:19.440
根据url地址中的哈希值

16:19.640 --> 16:20.540
什么叫哈希值

16:20.540 --> 16:21.740
是不是这个锦号后面了

16:22.140 --> 16:22.940
当然不能

16:23.140 --> 16:23.940
不应该多锦

16:23.940 --> 16:25.540
该不应该读锦号

16:25.540 --> 16:27.540
应该读这个叫做sharp

16:28.540 --> 16:29.440
sharp符号

16:29.940 --> 16:30.740
sharp符号

16:30.940 --> 16:31.440
只是呢

16:31.440 --> 16:32.140
我说锦号

16:32.140 --> 16:32.940
大家听得懂

16:33.540 --> 16:34.840
但是你心里面要清楚

16:34.840 --> 16:36.340
以后出去千万别这么说

16:36.540 --> 16:38.140
说sharp符号

16:38.740 --> 16:39.540
sharp符号

16:40.540 --> 16:42.540
因为这个东西是音乐里边的

16:42.540 --> 16:42.740
对吧

16:42.740 --> 16:45.240
音乐音符里边的一个sharp

16:45.240 --> 16:46.040
叫声调

16:46.240 --> 16:46.840
声调

16:48.750 --> 16:49.350
声调

16:50.850 --> 16:52.550
比方说我们说这个c语言

16:52.550 --> 16:52.950
对吧

16:52.950 --> 16:53.850
c sharp语言

16:53.850 --> 16:54.750
不是说c锦

16:54.750 --> 16:56.050
是说c sharp

16:58.950 --> 16:59.750
这是

17:00.650 --> 17:02.150
说到这哈欣路由

17:02.150 --> 17:03.750
哈欣路由它是指的是什么呢

17:04.250 --> 17:08.750
它是根据UID中的哈希值来确定

17:10.150 --> 17:11.050
如何

17:12.350 --> 17:13.550
显示逐渐

17:14.250 --> 17:15.150
如何显示逐渐

17:15.350 --> 17:16.550
就是显示什么逐渐

17:16.650 --> 17:17.350
来确定

17:17.750 --> 17:19.750
显示的逐渐

17:20.550 --> 17:22.150
为什么它要根据哈希层

17:22.150 --> 17:23.150
来显示逐渐呢

17:23.350 --> 17:24.950
因为这个哈希

17:25.050 --> 17:26.350
页面中的UID

17:26.350 --> 17:27.350
它有这么一个特点

17:27.750 --> 17:30.350
如果说哈希值变了的话

17:30.550 --> 17:32.250
它不会导致页面刷新

17:32.650 --> 17:34.750
那么这样子就非常低于

17:35.050 --> 17:36.250
作单页应用程序

17:37.850 --> 17:38.350
原因

17:39.650 --> 17:41.150
原因它为什么要这样做

17:41.150 --> 17:43.950
原因是因为哈希值的变化

17:44.650 --> 17:47.450
不会导致页面刷新

17:48.350 --> 17:49.150
也刷新什么意思

17:49.150 --> 17:51.050
就是页面重新去请求服务

17:51.050 --> 17:52.550
请拿页面数据

17:52.550 --> 17:53.150
它不会

17:54.150 --> 17:54.650
所以说呢

17:54.650 --> 17:57.650
哈希值是最好用来作单页应用程序的

17:58.350 --> 18:00.050
一向像其他东西什么路径变了

18:00.050 --> 18:00.950
它一定刷新页面

18:01.550 --> 18:02.950
什么低纸残数变了

18:02.950 --> 18:03.850
它也会刷新页面

18:03.850 --> 18:05.150
比方说给大家看一个例子吧

18:07.050 --> 18:10.350
比方说了我们这里呢

18:10.350 --> 18:11.650
这样子来玩

18:11.650 --> 18:13.050
随便就白动了

18:13.350 --> 18:14.150
大家注意看

18:14.450 --> 18:15.850
注意看页面有没有刷新

18:17.650 --> 18:18.850
注意看页面有没有刷新

18:18.850 --> 18:19.550
我在这里写

18:19.850 --> 18:22.750
比方说我这里写上一个A等于1

18:22.950 --> 18:23.650
我就瞎写

18:23.650 --> 18:24.950
你不管我写啥

18:27.050 --> 18:29.450
ABC比方说ABC回彩

18:30.150 --> 18:30.850
有没有刷新

18:30.850 --> 18:31.450
刷新了

18:31.450 --> 18:32.450
给你挑转了

18:32.450 --> 18:33.750
把地址给改变了

18:33.750 --> 18:34.450
挑转了

18:34.450 --> 18:35.050
刷新了

18:35.650 --> 18:37.950
开始路径发生变化

18:37.950 --> 18:38.950
还会导致页面刷新

18:38.950 --> 18:40.850
你甭管它为什么变成这个玩意了

18:40.850 --> 18:41.350
甭管

18:41.350 --> 18:42.550
你看路径发生变化

18:42.550 --> 18:43.550
它一定会导致刷新

18:44.550 --> 18:46.350
然后我们在这里这样子写

18:46.350 --> 18:48.150
比方说路径就用跟路径

18:48.150 --> 18:49.450
这个也是个路径

18:49.450 --> 18:50.650
虽然我后边啥都没写

18:51.250 --> 18:51.950
这个玩意

18:51.950 --> 18:52.950
它也是个路径

18:52.950 --> 18:53.550
什么路径呢

18:53.550 --> 18:54.550
路径就是这一部分

18:54.550 --> 18:55.350
一个斜缸

18:55.650 --> 18:56.350
啥都没有

18:57.050 --> 18:57.550
跟路

18:57.550 --> 18:58.750
它叫做跟路径

19:00.050 --> 19:02.750
那么比方说我们这里写上这样子写

19:02.750 --> 19:07.850
一个问号A等于1B等于2回车

19:07.850 --> 19:08.850
是不是也刷新了

19:08.850 --> 19:09.050
对吧

19:09.050 --> 19:10.250
也刷新了

19:10.250 --> 19:11.250
但是我们现在这样子写

19:11.250 --> 19:11.550
看着

19:12.350 --> 19:13.650
写个哈西ABC

19:14.550 --> 19:15.350
刷新的页面

19:15.350 --> 19:15.750
你看一下

19:15.750 --> 19:17.550
看这个地方有没有转

19:17.550 --> 19:18.550
有没有转了转去

19:19.550 --> 19:20.450
改变这个哈西纸

19:20.450 --> 19:21.550
有没有刷新页面

19:21.550 --> 19:21.950
并没有

19:21.950 --> 19:22.450
对吧

19:22.450 --> 19:23.550
所以单页应用程序

19:23.550 --> 19:25.150
它有一个要求就是

19:25.150 --> 19:26.450
不能刷新页面

19:26.450 --> 19:27.250
刷新页面的话

19:27.250 --> 19:28.750
还做什么单页应用程序呢

19:28.750 --> 19:29.350
对吧

19:29.950 --> 19:31.250
所以说我们页面不能刷新

19:31.250 --> 19:32.250
都是在同一个页面

19:32.250 --> 19:33.350
用GS来券了

19:33.350 --> 19:34.450
去重新渲染

19:34.450 --> 19:36.850
而不是让服务器给我一个新的ATML

19:38.050 --> 19:41.350
是在本地GS完成整个页面的渲染

19:41.350 --> 19:42.450
而不是靠服务器

19:42.450 --> 19:43.450
所以说我不能刷新

19:43.450 --> 19:45.250
因为一刷新就重新请求服务器了

19:46.750 --> 19:49.950
于是我们这里用哈西纸

19:49.950 --> 19:52.150
首先想到用哈西纸来搞定单页

19:52.150 --> 19:53.250
应用程序的路由

19:53.250 --> 19:56.150
是最容易理解的

19:56.150 --> 19:57.150
最容易理解的

19:58.150 --> 19:58.550
对吧

19:58.550 --> 20:00.350
这就是哈西router

20:00.350 --> 20:00.950
哈西路由

20:00.950 --> 20:02.250
我们今天这几课

20:02.250 --> 20:03.350
不是一道任何单码

20:03.350 --> 20:04.950
只是把这个概念理解清楚

20:05.750 --> 20:06.750
为什么要用哈西纸

20:06.750 --> 20:07.650
因为哈西变化

20:07.650 --> 20:08.850
不会导致页面刷新

20:09.750 --> 20:10.450
那么如何

20:10.450 --> 20:13.450
我们如何来获取哈西纸呢

20:13.450 --> 20:14.550
如何来获取哈西纸呢

20:14.550 --> 20:15.650
大家看一下

20:15.650 --> 20:17.150
我们在页面中

20:17.150 --> 20:18.650
使用原生的GS

20:18.650 --> 20:19.550
不是一道任何的

20:19.550 --> 20:20.850
其他乱七八糟的东西

20:20.850 --> 20:21.950
就用原生的GS

20:21.950 --> 20:23.550
怎么来获取这个哈西纸

20:23.550 --> 20:26.550
我们可以利用location

20:26.550 --> 20:28.050
location里边回彻

20:28.050 --> 20:28.750
看一下这个代码

20:30.550 --> 20:31.650
location里边

20:31.650 --> 20:33.350
我们来看一下

20:33.350 --> 20:34.850
这个location里面是不是一个哈西

20:34.850 --> 20:35.050
对吧

20:35.050 --> 20:37.450
一个属性叫做哈西

20:37.450 --> 20:38.350
是不是有个哈西

20:38.350 --> 20:39.550
对不对

20:39.550 --> 20:41.650
有这么一个哈西属性

20:41.650 --> 20:43.150
这个哈西属性是不是就得到

20:43.150 --> 20:44.550
警号后边的东西了

20:44.550 --> 20:45.050
对吧

20:45.050 --> 20:46.150
是不是拿到了

20:46.150 --> 20:46.450
对不对

20:46.450 --> 20:47.750
我们可以用

20:47.750 --> 20:48.950
这个原色代码里面

20:48.950 --> 20:50.650
是不是可以获取到这个哈西纸

20:50.650 --> 20:51.450
那么之后呢

20:51.450 --> 20:52.250
我们用的肯定是

20:52.250 --> 20:53.650
第三方的插件

20:53.650 --> 20:55.450
就是这个第三方的码号

20:55.450 --> 20:57.750
叫做rexrotordom

20:57.750 --> 20:59.650
那么它也是通过类似的方式

20:59.650 --> 21:01.250
来获取这个哈西纸的

21:01.250 --> 21:02.850
包括什么主机名

21:02.850 --> 21:03.550
对吧

21:03.550 --> 21:05.750
还有什么那个

21:07.050 --> 21:08.050
search对不对

21:08.050 --> 21:09.950
search它也会能获取

21:09.950 --> 21:10.950
也能获取

21:10.950 --> 21:13.650
它是获取当前地址里边的一些信息

21:13.650 --> 21:15.350
获取当前地址里边的信息

21:15.350 --> 21:16.850
没问题吧

21:16.850 --> 21:18.650
这是关于哈西

21:18.650 --> 21:18.950
好

21:18.950 --> 21:19.550
接下来呢

21:19.550 --> 21:21.750
我们来看另外一种模式

21:21.850 --> 21:23.150
另外一种模式呢

21:24.950 --> 21:26.250
它是新出来的

21:26.250 --> 21:28.750
是在atm5这个版本之后呢

21:28.750 --> 21:30.550
新出来的这种模式

21:30.550 --> 21:31.750
因为以前呢

21:31.750 --> 21:32.950
它不存在这种模式

21:32.950 --> 21:34.750
因为以前的浏览器里边

21:34.750 --> 21:36.250
你要能够保证浏览器

21:36.250 --> 21:37.450
不刷新页面

21:37.450 --> 21:38.450
地址又发生

21:38.450 --> 21:39.350
地址发生变化

21:39.350 --> 21:40.250
不刷新页面

21:40.250 --> 21:42.350
那你只能变化哈西

21:42.350 --> 21:43.350
你只能变化哈西

21:43.350 --> 21:44.350
没有别的办法了

21:44.350 --> 21:46.850
所以说哈西的兼容性啊

21:46.850 --> 21:48.750
这种模式的

21:48.750 --> 21:51.650
这种模式的兼容性

21:51.650 --> 21:53.250
最好

21:53.250 --> 21:55.150
能够支持很早很早的浏览器

21:55.150 --> 21:56.250
哪怕九七年的浏览器

21:56.250 --> 21:57.550
我也能支持

21:57.550 --> 21:59.050
当然九七年的浏览器的话

21:59.050 --> 22:00.250
像VOR Reactor里边

22:00.250 --> 22:01.650
用到的很多的一些新技术

22:01.650 --> 22:02.450
新特性的话

22:02.450 --> 22:03.450
也肯定用不了

22:03.450 --> 22:05.250
只是这种模式本身

22:05.250 --> 22:06.150
是可以支持的

22:06.150 --> 22:07.450
它兼容性最好

22:07.450 --> 22:09.050
因为自从浏览器

22:09.050 --> 22:10.350
单纯类日期

22:10.350 --> 22:11.850
那么这个哈西

22:11.850 --> 22:12.450
它的改变

22:12.450 --> 22:14.650
它都不会导致浏览器刷新

22:14.650 --> 22:15.950
所以说这一个模式呢

22:15.950 --> 22:17.150
兼容性最好

22:17.150 --> 22:18.350
而另外一种模式呢

22:18.350 --> 22:21.850
是 Browser History Rotor

22:21.850 --> 22:23.450
就是这个模式是怎么产生的呢

22:23.450 --> 22:24.350
它是这样子

22:24.350 --> 22:27.750
ATM5出现后

22:27.750 --> 22:29.450
新增了一个API

22:29.450 --> 22:31.250
这个你们之前应该学过吧

22:31.250 --> 22:32.450
应该学过啊

22:32.450 --> 22:36.250
新增了叫做 History API

22:36.250 --> 22:37.650
也就是呢

22:37.650 --> 22:39.550
从此以后

22:39.550 --> 22:41.650
浏览器

22:41.650 --> 22:45.850
拥有了改变路径

22:45.850 --> 22:47.650
而不刷新

22:47.650 --> 22:48.750
液面的方式

22:51.150 --> 22:53.450
浏览器现在就可以改变路径

22:53.450 --> 22:54.850
就这一部分

22:54.850 --> 22:56.350
改变这一部分

22:56.350 --> 23:00.050
而从而不会导致液面刷新

23:00.050 --> 23:00.850
这就是这种

23:00.850 --> 23:01.150
于是呢

23:01.150 --> 23:02.850
就新出来的模式叫做

23:02.850 --> 23:05.750
利用 Browser History Rotor

23:05.750 --> 23:06.950
你为什么要History Rotor呢

23:06.950 --> 23:08.750
因为它使用的是 History API

23:08.750 --> 23:10.050
然后调转液面的时候呢

23:10.050 --> 23:12.050
我们就用 History API 的调转液面

23:12.050 --> 23:14.350
它不会导致浏览器刷新

23:14.450 --> 23:15.850
给大家举个例子

23:15.850 --> 23:16.850
比方说

23:16.850 --> 23:18.450
History是什么意思呢

23:18.450 --> 23:20.050
解释一下

23:20.050 --> 23:24.550
History表示浏览器的历史记录

23:24.550 --> 23:25.850
历史记录

23:25.850 --> 23:31.150
它使用粘的方式存储

23:31.150 --> 23:32.250
什么意思

23:32.250 --> 23:34.250
大家画个图

23:34.250 --> 23:38.250
比方说我们在浏览器里边呢

23:38.250 --> 23:41.050
有这么一个粘

23:41.050 --> 23:42.650
那么至少你学到现在的话

23:42.650 --> 23:43.850
粘的这种数据结构

23:43.850 --> 23:44.750
应该不会陌生了

23:44.750 --> 23:45.250
对吧

23:45.250 --> 23:46.050
陌生了

23:46.050 --> 23:48.450
我们每访问一个地址的话

23:48.450 --> 23:51.750
它就会在粘里边加一条记录

23:51.750 --> 23:52.950
每访问一个地址

23:52.950 --> 23:55.050
它就会在粘里边加一条记录

23:55.050 --> 23:55.950
这个记录里边

23:55.950 --> 23:59.250
就记录了这个

23:59.250 --> 24:01.750
第一次访问的相关信息

24:01.750 --> 24:04.250
比方说访问的路径是A-B

24:04.250 --> 24:06.050
比方说访问的路径是A-B

24:06.050 --> 24:07.750
那么你访问到这的时候呢

24:07.750 --> 24:14.180
它就会往这个粘里边加一条记录

24:14.180 --> 24:15.480
背景是要去掉

24:15.580 --> 24:16.780
还会加一条记录

24:16.780 --> 24:18.580
那么并且它有个指针

24:18.580 --> 24:20.980
这个指针它会指向

24:20.980 --> 24:24.080
指向当前流烂器

24:24.080 --> 24:26.780
展示的那个页面的路径

24:26.780 --> 24:28.180
这是个路径对吧

24:28.180 --> 24:28.980
这个路径

24:28.980 --> 24:30.880
好一会我们又访问一个地址

24:30.880 --> 24:32.880
甭管我用什么样的方式来访问的

24:32.880 --> 24:35.780
它就会往这个粘里边加一个东西

24:35.780 --> 24:39.980
加个东西比方说访问的是A-B-C

24:39.980 --> 24:42.080
它就会往这里边加一个东西

24:42.080 --> 24:43.880
一会我们又发生了一个访问

24:43.880 --> 24:45.380
它又又往这里边加一个东西

24:45.380 --> 24:47.380
对吧指针向前移动

24:47.380 --> 24:49.180
指针向前移动

24:49.180 --> 24:50.180
就访问路径的时候

24:50.180 --> 24:53.380
还会往这个粘里边不断的加东西

24:53.380 --> 24:55.780
这就是一个流烂器的

24:55.780 --> 24:57.880
就是历史基督战

24:57.880 --> 25:04.280
我们把它叫做HistoryStack

25:04.280 --> 25:06.580
叫做历史基督战

25:06.580 --> 25:08.180
通过这个粘里面就存出了

25:08.180 --> 25:09.480
我们访问的

25:09.480 --> 25:11.580
经过的一些历史信息

25:11.580 --> 25:15.130
复制一下

25:16.130 --> 25:18.130
没问题吧

25:18.130 --> 25:20.130
好那么接下来

25:20.130 --> 25:25.130
我们看一下这个API里面提供的哪些东西

25:25.130 --> 25:26.130
我们可以使用

25:26.130 --> 25:28.130
但是我们这个东西作为了解就行了

25:28.130 --> 25:30.130
因为你了解这个东西的话

25:30.130 --> 25:32.130
你有多多少操作知道了

25:32.130 --> 25:33.130
后边我们讲的路由的时候

25:33.130 --> 25:34.130
它大概原理是什么

25:34.130 --> 25:36.130
你多多少操作知道了

25:36.130 --> 25:37.130
好OK

25:37.130 --> 25:39.130
那咱们比方说就这个百度

25:39.130 --> 25:41.130
百度我们从这里重新来

25:41.130 --> 25:43.130
咱W脸百度脸抗

25:44.130 --> 25:45.130
我们关上流烂器

25:45.130 --> 25:47.130
流烂器关掉

25:47.130 --> 25:49.440
重新来

25:49.440 --> 25:51.440
3W点百度

25:51.440 --> 25:52.440
点抗

25:52.440 --> 25:53.440
好OK

25:53.440 --> 25:54.440
我们点击右键

25:54.440 --> 25:55.440
检查

25:55.440 --> 25:57.440
现在让我们看一下

25:57.440 --> 26:02.440
我们可以通过温豆对象里面的一个History这个属性

26:02.440 --> 26:05.440
它里面它会获取到一个对象

26:05.440 --> 26:07.440
这个对象里面就可以得到

26:07.440 --> 26:12.440
我们这个当前访问窗口里边的历史基督

26:12.440 --> 26:14.440
为什么现在它里面有个数据

26:14.440 --> 26:16.440
认识这个属性

26:16.440 --> 26:18.440
我们就一个个说吧

26:18.440 --> 26:19.440
History

26:19.440 --> 26:20.440
点认识

26:20.440 --> 26:21.440
可以获取什么呢

26:21.440 --> 26:24.440
获取占中数据量

26:24.440 --> 26:26.440
占中的数据数量

26:26.440 --> 26:27.440
就在这里

26:27.440 --> 26:28.440
这个占里面有多少个数据

26:28.440 --> 26:30.440
有多少个条访问基督

26:30.440 --> 26:31.440
那为什么我现在是两个呢

26:31.440 --> 26:33.440
因为之前还有一个空白页

26:33.440 --> 26:34.440
之前还有一个空白页

26:34.440 --> 26:36.440
所以说加上现在这个页面

26:36.440 --> 26:38.440
那么一共有两个

26:38.440 --> 26:39.440
一共有两个

26:39.440 --> 26:40.440
没有这个意思吧

26:40.440 --> 26:43.440
就这么个意思

26:43.440 --> 26:45.440
好那么现在我又访问一个页面

26:45.440 --> 26:47.440
比方说我就随便点一个吧

26:47.440 --> 26:49.440
随便点一个

26:49.440 --> 26:52.440
比方说点个新闻

26:52.440 --> 26:54.440
它调了新页面了不行

26:54.440 --> 26:56.440
我要在当前一面

26:56.440 --> 26:57.440
调新创了过后

26:57.440 --> 26:59.440
那就是新的历史基督了

26:59.440 --> 27:02.440
这个历史基督是跟这个窗口绑在一起的

27:02.440 --> 27:05.440
我得不让它挑啊

27:05.440 --> 27:06.440
我的

27:06.440 --> 27:08.440
怎么不让它挑呢

27:08.440 --> 27:09.440
我这收嘛

27:09.440 --> 27:10.440
随便收一个

27:10.440 --> 27:11.440
react

27:11.440 --> 27:12.440
react

27:12.440 --> 27:13.440
收一个

27:13.440 --> 27:14.440
好

27:14.440 --> 27:15.440
收一个啊

27:15.440 --> 27:16.440
然后看一下

27:16.440 --> 27:18.440
这个window.history

27:18.440 --> 27:19.440
你看一下

27:19.440 --> 27:20.440
是不是三个了对吧

27:20.440 --> 27:21.440
又多了一个页面了

27:21.440 --> 27:22.440
你看地址的改变了对吧

27:22.440 --> 27:24.440
不知道大家注意到没有啊

27:24.440 --> 27:25.440
这个地址改变

27:25.440 --> 27:26.440
它的页面并没有刷新

27:26.440 --> 27:27.440
看到没

27:27.440 --> 27:28.440
页面是并没有刷新的

27:28.440 --> 27:29.440
我们再来看一下啊

27:29.440 --> 27:30.440
听没有

27:30.440 --> 27:31.440
回车收缩

27:31.440 --> 27:33.440
你看一下页面是不是没有刷新

27:33.440 --> 27:34.440
再来看一下啊

27:34.440 --> 27:35.440
CSS注意看这

27:36.440 --> 27:37.440
回车

27:38.440 --> 27:39.440
你看地址变化了

27:39.440 --> 27:40.440
页面并没有刷新

27:40.440 --> 27:42.440
那这个东西是怎么回事了

27:42.440 --> 27:44.440
现在看历史基督多了一些了

27:44.440 --> 27:45.440
以前是做不到的啊

27:45.440 --> 27:46.440
以前的这个地址改变

27:46.440 --> 27:48.440
它一定会刷新的

27:48.440 --> 27:49.440
现在

27:49.440 --> 27:50.440
但是现在可以做到了

27:50.440 --> 27:51.440
你看现在加了五条了

27:51.440 --> 27:52.440
对吧

27:52.440 --> 27:53.440
五条历史基督了

27:53.440 --> 27:56.440
那么现在为什么可以做到

27:56.440 --> 27:57.440
不刷新呢

27:57.440 --> 27:58.440
为什么可以做到了

27:58.440 --> 28:00.440
是因为在atm5之后呢

28:00.440 --> 28:02.440
它出来的一些新的API

28:02.440 --> 28:04.440
以前的API很少的啊

28:04.440 --> 28:05.440
以前的API有没有有

28:05.440 --> 28:07.440
以前我在讲那个介石

28:07.440 --> 28:09.440
的时候应该讲过

28:09.440 --> 28:10.440
有没有有

28:10.440 --> 28:11.440
但是呢很少

28:11.440 --> 28:12.440
很少

28:12.440 --> 28:13.440
它只能让你

28:13.440 --> 28:15.440
操作一下这个历史基督

28:15.440 --> 28:16.440
能不能就回退

28:16.440 --> 28:17.440
就点这个回退

28:17.440 --> 28:18.440
然后呢

28:18.440 --> 28:19.440
前进只能操作这个

28:19.440 --> 28:20.440
怎么来操作呢

28:20.440 --> 28:21.440
我们之前

28:21.440 --> 28:22.440
学过了对吧

28:22.440 --> 28:23.440
学过了就是History

28:23.440 --> 28:24.440
对吧

28:24.440 --> 28:25.440
温度逆向里面的属性

28:25.440 --> 28:26.440
可以直接使用

28:26.440 --> 28:27.440
它什么还说

28:27.440 --> 28:28.440
够对不对

28:28.440 --> 28:30.440
复一一回到之前的页面

28:30.440 --> 28:31.440
你看是不是回到之前了

28:31.440 --> 28:32.440
然后呢

28:32.440 --> 28:34.440
或者是Historyback

28:34.440 --> 28:35.440
对吧

28:35.440 --> 28:36.440
也可以回到之前的

28:36.440 --> 28:37.440
对不对

28:37.440 --> 28:38.440
也可以回到之前的

28:38.440 --> 28:39.440
对吧

28:39.440 --> 28:40.440
又回到之前了

28:40.440 --> 28:41.440
那么

28:41.440 --> 28:42.440
这个回到之前

28:42.440 --> 28:43.440
是不是就是指针移动

28:43.440 --> 28:44.440
对吧

28:44.440 --> 28:45.440
就移动这个指针

28:45.440 --> 28:46.440
就完事了

28:46.440 --> 28:47.440
好

28:47.440 --> 28:48.440
那么同样的

28:48.440 --> 28:49.440
还可以使用什么

28:49.440 --> 28:51.440
History forward

28:51.440 --> 28:52.440
就向前

28:52.440 --> 28:53.440
对不对

28:53.440 --> 28:54.440
向前

28:54.440 --> 28:55.440
就前进

28:55.440 --> 28:56.440
前进

28:56.440 --> 28:57.440
看没

28:57.440 --> 28:58.440
对不对

28:58.440 --> 28:59.440
这是我们以前的API

28:59.440 --> 29:00.440
这个API都很简单

29:00.440 --> 29:01.440
我以前以前也讲过的

29:01.440 --> 29:02.440
现在关键是

29:02.440 --> 29:03.440
atm5之后呢

29:03.440 --> 29:04.440
出了一些新的API

29:04.440 --> 29:06.440
它说下一个新的API

29:06.440 --> 29:07.440
新的API呢

29:07.440 --> 29:08.440
有两个

29:08.440 --> 29:09.440
一个呢

29:09.440 --> 29:11.440
是叫做History

29:11.440 --> 29:13.440
push state

29:13.440 --> 29:15.440
push state

29:15.440 --> 29:16.440
这个是

29:16.440 --> 29:17.440
API有什么用呢

29:17.440 --> 29:18.440
它是向

29:18.440 --> 29:20.440
当前

29:20.440 --> 29:21.440
向

29:21.440 --> 29:23.440
向

29:23.440 --> 29:25.440
向当前

29:25.440 --> 29:26.440
历史

29:26.440 --> 29:27.440
记录

29:27.440 --> 29:28.440
占中

29:28.440 --> 29:31.440
加入一条

29:31.440 --> 29:33.440
新的记录

29:34.440 --> 29:35.440
它不会导致一面刷新的

29:35.440 --> 29:36.440
这个函数

29:36.440 --> 29:37.440
是不会导致一面刷新的

29:37.440 --> 29:39.440
它只是往这个针里边

29:39.440 --> 29:41.440
加一条新的记录

29:41.440 --> 29:43.440
比方说我们这里怎么写

29:43.440 --> 29:46.440
History push state

29:46.440 --> 29:48.440
它里边有三个参数

29:48.440 --> 29:50.440
第一个参数呢

29:50.440 --> 29:51.440
叫做数据

29:51.440 --> 29:52.440
这个数据呢

29:52.440 --> 29:53.440
你寫啥数据

29:53.440 --> 29:54.440
一边你写

29:54.440 --> 29:55.440
你写个数字

29:55.440 --> 29:56.440
写个字不错

29:56.440 --> 29:57.440
写个对象

29:57.440 --> 29:58.440
就是附加的数据

29:58.440 --> 29:59.440
这个数据呢

29:59.440 --> 30:01.440
将来就是有可能会获取

30:01.440 --> 30:02.440
你可以认为

30:02.440 --> 30:03.440
就类似于什么

30:03.440 --> 30:04.440
一个元素的

30:04.440 --> 30:06.440
一个自定义属性一样

30:06.440 --> 30:07.440
它本身呢

30:07.440 --> 30:08.440
不参与显示

30:08.440 --> 30:09.440
也没有任何意义

30:09.440 --> 30:10.440
除非你真的要用到这个数据

30:10.440 --> 30:11.440
就是一些附加数据

30:11.440 --> 30:12.440
你挨写就写

30:12.440 --> 30:13.440
不写拉倒

30:13.440 --> 30:14.440
比方说我们随便写个吧

30:14.440 --> 30:16.440
这是附加的数据

30:16.440 --> 30:17.440
那么这个是个支付串

30:17.440 --> 30:18.440
当然除了支付串之外

30:18.440 --> 30:19.440
也可以是个对象

30:19.440 --> 30:21.440
想加啥加啥

30:21.440 --> 30:22.440
然后这附加的数据

30:22.440 --> 30:23.440
第二个参数的是

30:23.440 --> 30:24.440
一面表体

30:24.440 --> 30:25.440
这个参数现在没用

30:25.440 --> 30:28.440
我这里一个说吧

30:28.440 --> 30:30.440
参数一

30:30.440 --> 30:31.440
是一个什么

30:31.440 --> 30:33.440
附加的数据

30:33.440 --> 30:35.440
也叫做自定义数据

30:35.440 --> 30:37.440
自定义的数据

30:37.440 --> 30:40.440
可以是任何类型

30:40.440 --> 30:41.440
那么这个数据呢

30:41.440 --> 30:42.440
目前我们好像没什么用

30:42.440 --> 30:43.440
将来再说

30:43.440 --> 30:45.440
那么第二个参数呢

30:45.440 --> 30:49.440
参数二是一面表体

30:49.440 --> 30:53.440
目前大部分浏览器不支持

30:53.440 --> 30:54.440
所以说这个写的白写

30:54.440 --> 30:55.440
写的白写

30:55.440 --> 30:57.440
干脆写个捺德了

30:57.440 --> 30:59.440
第三个参数呢

30:59.440 --> 31:00.440
参数三

31:00.440 --> 31:02.440
新的地址

31:02.440 --> 31:03.440
新的地址

31:03.440 --> 31:05.440
这个东西很重要

31:05.440 --> 31:06.440
新的地址

31:06.440 --> 31:07.440
好 咱们来看一下

31:07.440 --> 31:08.440
第二参数

31:08.440 --> 31:09.440
我们就直接拿好了

31:09.440 --> 31:10.440
反正没用

31:10.440 --> 31:12.440
第三个参数是新的地址

31:12.440 --> 31:13.440
比方说

31:13.440 --> 31:14.440
我们这里的地址

31:14.440 --> 31:15.440
新的地址是啥呢

31:15.440 --> 31:18.440
是写杠A 写杠B 写杠C

31:18.440 --> 31:20.440
就是新的路径

31:20.440 --> 31:21.440
回测

31:21.440 --> 31:23.440
你看一下

31:23.440 --> 31:24.440
页面有刷新吗

31:24.440 --> 31:25.440
有刷新吗

31:25.440 --> 31:26.440
是不是没刷新

31:26.440 --> 31:28.440
但是你这个地址是不是变了

31:28.440 --> 31:29.440
对不对

31:29.440 --> 31:30.440
那么再来一个

31:30.440 --> 31:32.440
那么现在我们从个堆栈里边

31:32.440 --> 31:34.440
就变成这样子的

31:34.440 --> 31:37.440
就往这个栈里边新加的一条数据

31:37.440 --> 31:39.440
杠A 杠B 杠C

31:39.440 --> 31:41.440
那么这个指针指到这了

31:41.440 --> 31:42.440
对吧

31:42.440 --> 31:43.440
所以说指针指到这

31:43.440 --> 31:44.440
所以说我们地址哪呢

31:44.440 --> 31:45.440
看到这个地址了

31:45.440 --> 31:46.440
看到没

31:46.440 --> 31:49.440
这是无刷新的往里边增加

31:49.440 --> 31:51.440
然后再来增加一个

31:51.440 --> 31:54.440
一

31:54.440 --> 31:55.440
你看一下

31:55.440 --> 31:57.440
所以地址也跟那边了

31:57.440 --> 31:58.440
无刷新的改变

31:58.440 --> 31:59.440
那么这里呢

31:59.440 --> 32:01.440
变成这样子

32:01.440 --> 32:03.440
一

32:03.440 --> 32:05.440
在里边变成这个样子了

32:05.440 --> 32:06.440
你看这个意思吧

32:06.440 --> 32:07.440
而且你看一下

32:07.440 --> 32:09.440
我们现在由于附加的数据

32:09.440 --> 32:11.440
我们看一下这个History对象

32:11.440 --> 32:12.440
这个对象里边

32:12.440 --> 32:14.440
你看一下这个State是有指的

32:14.440 --> 32:15.440
对吧

32:15.440 --> 32:16.440
它里边有个附加数据

32:16.440 --> 32:17.440
对不对

32:17.440 --> 32:18.440
附加的数据

32:18.440 --> 32:19.440
这个State

32:19.440 --> 32:20.440
History对象哪来的

32:20.440 --> 32:22.440
History对象就指的是

32:22.440 --> 32:25.440
当前指针指向的那一条记录

32:25.440 --> 32:26.440
那么这个记录

32:26.440 --> 32:27.440
里边是不是就有附加数据

32:27.440 --> 32:28.440
对吧

32:28.440 --> 32:30.440
它就可以把附加数据得到

32:30.440 --> 32:31.440
没什么意思吧

32:31.440 --> 32:33.440
没问题吧

32:33.440 --> 32:34.440
好

32:34.440 --> 32:36.440
这是关于History pushState

32:36.440 --> 32:37.440
那么可以

32:37.440 --> 32:40.440
它的作用就是可以无刷新的来改变

32:40.440 --> 32:42.440
改变当前的地址

32:42.440 --> 32:45.440
因为它会往地址记录里边加一条数据

32:45.440 --> 32:46.440
好

32:46.440 --> 32:47.440
那么下面这个呢

32:47.440 --> 32:48.440
还有多一个API

32:48.440 --> 32:50.440
叫做History

32:50.440 --> 32:53.440
叫做ReplaceState

32:53.440 --> 32:56.440
它是将当前指针

32:56.440 --> 33:03.440
指向的历史记录

33:03.440 --> 33:08.440
替换为某个记录

33:08.440 --> 33:10.440
这是ReplaceState

33:10.440 --> 33:11.440
好

33:11.440 --> 33:12.440
咱们来看一下吧

33:12.440 --> 33:14.440
比方说呢

33:14.440 --> 33:20.440
我们现在使用History

33:20.440 --> 33:22.440
ReplaceState

33:22.440 --> 33:23.440
使用这个

33:23.440 --> 33:24.440
它参数是完全一样的

33:24.440 --> 33:26.440
这个没有什么好说的

33:26.440 --> 33:27.440
参数是完全一样的

33:27.440 --> 33:32.010
这个是完全一样的

33:32.010 --> 33:33.010
好

33:33.010 --> 33:34.010
来看一下

33:34.010 --> 33:35.010
比方说我们这里

33:35.010 --> 33:36.010
使用ReplaceState

33:36.010 --> 33:37.010
好

33:37.010 --> 33:38.010
这里面

33:38.010 --> 33:39.010
data

33:39.010 --> 33:42.010
替换的记录

33:42.010 --> 33:43.010
好

33:43.010 --> 33:44.010
这里呢

33:44.010 --> 33:46.010
UIL地址呢

33:46.010 --> 33:47.010
写个嘛

33:47.010 --> 33:48.010
news

33:48.010 --> 33:49.010
比方说嘛

33:49.010 --> 33:50.010
就个例子嘛

33:50.010 --> 33:51.010
回录

33:51.010 --> 33:52.010
好

33:52.010 --> 33:53.010
那么现在说是怎么样子呢

33:53.010 --> 33:54.010
现在相当于是

33:54.010 --> 33:55.010
把这一条

33:55.010 --> 33:56.010
记录直接替换掉

33:56.010 --> 33:57.010
而不是新增了

33:57.010 --> 33:58.010
替换掉

33:58.010 --> 33:59.010
对不对

33:59.010 --> 34:00.010
好

34:00.010 --> 34:01.010
咱们再来看一下

34:01.010 --> 34:02.010
那么现在呢

34:02.010 --> 34:03.010
我们找到这个History

34:03.010 --> 34:05.010
看一下这里边

34:05.010 --> 34:07.010
这个状态数据变了

34:07.010 --> 34:08.010
对吧

34:08.010 --> 34:09.010
这状态数据变了

34:09.010 --> 34:10.010
好

34:10.010 --> 34:11.010
然后呢

34:11.010 --> 34:13.010
我们现在用History

34:13.010 --> 34:14.010
go或者是back

34:14.010 --> 34:15.010
回到之前的

34:15.010 --> 34:17.010
一回到之前的

34:17.010 --> 34:20.010
当然这里

34:20.010 --> 34:22.010
它又给我挑转了

34:22.010 --> 34:23.010
就挺烦的

34:23.010 --> 34:24.010
一回到之前的

34:24.010 --> 34:25.010
当下如果

34:25.010 --> 34:26.010
如果刚才

34:26.010 --> 34:27.010
反复看压视频

34:27.010 --> 34:28.010
刚才应该闪一闪而过了

34:28.010 --> 34:30.010
回到之前的是不是回到这了

34:30.010 --> 34:31.010
对吧

34:31.010 --> 34:32.010
回到是ABC了

34:32.010 --> 34:33.010
对吧

34:33.010 --> 34:34.010
就不再是E了

34:34.010 --> 34:35.010
就这么个意思

34:35.010 --> 34:36.010
就这么个意思

34:36.010 --> 34:37.010
那比方说

34:37.010 --> 34:38.010
如果说回到之前

34:38.010 --> 34:39.010
回到这一部分

34:39.010 --> 34:41.010
回到某一个指的时候

34:41.010 --> 34:42.010
到这吧

34:42.010 --> 34:43.010
对吧

34:43.010 --> 34:44.010
回到这个地方

34:44.010 --> 34:45.010
如果把这个地方替换掉了

34:45.010 --> 34:46.010
大家看一下

34:46.010 --> 34:50.010
如果说把这个地方替换掉了

34:50.010 --> 34:52.010
那么也是一样的

34:52.010 --> 34:53.010
就相当于是

34:53.010 --> 34:56.010
现在我们把它替换到了

34:56.010 --> 34:58.010
现在把这个东西替换成

34:58.010 --> 34:59.010
News了

34:59.010 --> 35:00.010
对不对

35:00.010 --> 35:02.010
那么如果现在再向前移动

35:02.010 --> 35:04.010
现在再向前移动

35:04.010 --> 35:05.010
History

35:05.010 --> 35:06.010
Forward

35:09.010 --> 35:10.010
没办法

35:10.010 --> 35:12.010
它发现一个页面不存在的话

35:12.010 --> 35:15.010
它要给我挑转

35:15.010 --> 35:16.010
因为这个摆住

35:16.010 --> 35:18.010
它会监控页面地址变化

35:18.010 --> 35:19.010
页面地址变化

35:19.010 --> 35:20.010
它如果发现

35:20.010 --> 35:21.010
没有这个基督的话

35:21.010 --> 35:22.010
它会挑转

35:22.010 --> 35:25.010
它会监控replace that

35:25.010 --> 35:26.010
总之呢

35:26.010 --> 35:27.010
我们理解

35:27.010 --> 35:29.010
有了这个atm5

35:29.010 --> 35:31.010
History API之后

35:31.010 --> 35:33.010
你会出现一个能力

35:33.010 --> 35:34.010
就是说

35:34.010 --> 35:36.010
如果我可以不刷新页面

35:36.010 --> 35:38.010
来改变这个地址

35:38.010 --> 35:40.010
于是出现这个能力之后

35:40.010 --> 35:41.010
它就出现了一种模式

35:41.010 --> 35:43.010
叫做 browser 浏览器的

35:43.010 --> 35:44.010
历史记录

35:44.010 --> 35:45.010
Rotor

35:45.010 --> 35:47.010
它出现这么一种模式

35:47.010 --> 35:49.010
这种模式它的原理是什么呢

35:49.010 --> 35:51.010
它是根据

35:51.010 --> 35:53.010
页面的路径

35:53.010 --> 35:55.010
它就直接根据页面路径了

35:55.010 --> 35:56.010
就这一部分

35:56.010 --> 35:58.010
上面就这一部分

35:58.010 --> 35:59.010
也就是说

35:59.010 --> 36:01.010
这个地址的这一部分

36:01.010 --> 36:04.010
根据页面的路径来决定

36:04.010 --> 36:10.010
决定渲染哪个组件

36:10.010 --> 36:12.010
它是根据页面路径来决定

36:12.010 --> 36:13.010
现在哪个组件

36:13.010 --> 36:14.010
它就不是根据哈希的

36:14.010 --> 36:15.010
这就是这两种模式

36:15.010 --> 36:16.010
最大的区别

36:16.010 --> 36:18.010
一种是根据哈希来确定

36:18.010 --> 36:19.010
一种是根据

36:19.010 --> 36:21.010
根据哈希确定的时候

36:21.010 --> 36:23.010
路径是啥无所谓

36:23.010 --> 36:24.010
爱是啥是啥

36:24.010 --> 36:25.010
跟我没关系

36:25.010 --> 36:27.010
但是如果你使用这种模式的话

36:27.010 --> 36:31.010
它就是根据路径来决定哪个组件

36:31.010 --> 36:34.010
那觉得哪个哪种方式

36:34.010 --> 36:37.010
更贴合用户的浏览习惯

36:37.010 --> 36:39.010
肯定是这种方式

36:39.010 --> 36:40.010
对吧

36:40.010 --> 36:41.010
根据路径

36:41.010 --> 36:42.010
以这些伤网的过程中

36:42.010 --> 36:44.010
有多少时间看到有哈希呢

36:44.010 --> 36:47.010
哈希的话一般都是认为是某链接

36:47.010 --> 36:49.010
说我们一般会用这个

36:49.010 --> 36:51.010
但是如果你要特别考虑这个兼容性

36:51.010 --> 36:54.010
要考虑照顾那些很古老的浏览器的话

36:54.010 --> 36:56.010
那么你只能使用哈希了

36:56.010 --> 36:57.010
大家了解一下

36:57.010 --> 36:59.010
这是这两种模式

36:59.010 --> 37:00.010
后边我们学习的时候

37:00.010 --> 37:03.010
主要是学习这个Browser History Router

37:03.010 --> 37:04.010
当然那么哈希那部分

37:04.010 --> 37:05.010
也会给它过一遍

37:05.010 --> 37:07.010
给大家看一下

37:07.010 --> 37:08.010
好吧

37:08.010 --> 37:10.010
这是关于这两种模式

37:10.010 --> 37:12.010
我应该把讲清楚了

37:12.010 --> 37:13.010
那么后边呢

37:13.010 --> 37:14.010
以及这个UIL地址里边

37:14.010 --> 37:16.010
这每一段是什么含义

37:16.010 --> 37:18.010
我们后边都可能会用到的

37:18.010 --> 37:19.010
好

37:19.010 --> 37:20.010
这是关于这两个模式啊

37:20.010 --> 37:21.010
理解清楚

