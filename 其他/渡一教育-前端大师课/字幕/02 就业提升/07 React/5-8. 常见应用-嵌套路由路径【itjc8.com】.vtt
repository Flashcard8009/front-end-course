WEBVTT

00:00.300 --> 00:07.800
在这个章节 从这些开始 咱们来讲一些路由

00:07.800 --> 00:11.300
在我们的应用程序中一些常见的应用

00:11.300 --> 00:14.300
你们以后到公司里面 或者是做项目的时候

00:14.300 --> 00:17.300
遇到类似的场景 你们就知道该怎么去解决了

00:17.300 --> 00:19.800
当然 这种方式不止一种

00:19.800 --> 00:22.300
我只是提供给大家一种思路

00:22.300 --> 00:24.300
大家可以按照这种思路 或者是

00:24.300 --> 00:28.800
你可以自己去想一些别的思路来解决这样的类似的问题

00:29.300 --> 00:31.800
这里我们首先 当然这个讲的过程中

00:31.800 --> 00:35.800
有可能会用到一些咱们之前可能没有讲到的知识

00:35.800 --> 00:39.800
那么我会进行补充 有少量没有讲到的知识

00:39.800 --> 00:42.800
我们这里首先看这么一个例子

00:42.800 --> 00:45.800
我们这些可以研究的是千套的路由

00:45.800 --> 00:47.800
什么意思呢 给大家举个例子

00:47.800 --> 00:52.800
就是你们以后在公司里面可能也会遇到这样的场景

00:52.800 --> 00:54.800
十字八就是会遇到这样的场景

00:54.800 --> 00:58.800
就是说我们的页面结构 它可能会是这个样子

00:58.800 --> 01:01.800
就是说我们首先有一个整页

01:02.800 --> 01:06.800
整个页面 是一个大的组件

01:06.800 --> 01:08.800
一个大的组件 我们可以认为是app组件

01:08.800 --> 01:12.800
然后这个组件下边 把它化成一个

01:16.310 --> 01:18.310
没有背景颜色

01:19.310 --> 01:22.310
这个组件下边 它有可能有一些组件

01:23.310 --> 01:27.310
比方说有一个导航蓝 导航蓝这么一个组件

01:28.310 --> 01:31.310
然后一开始 比方说访问页面的时候

01:31.310 --> 01:35.310
一开始可能会 下边可能会显示另一个组件

01:35.310 --> 01:37.310
就导航蓝的组件是固定的

01:40.310 --> 01:45.310
一直显示 无论哪个页面都要显示的

01:45.310 --> 01:47.310
所以说它跟路由就没有什么关系了

01:47.310 --> 01:49.310
把固定到这个位置就行了

01:49.310 --> 01:52.310
那么下边是可能会根据路由来切换

01:52.310 --> 01:56.310
比方说举个例子 其中有这么一个组件

01:56.310 --> 01:58.310
它的路由规则是这样子

02:02.310 --> 02:07.310
比方说当你访问User

02:07.310 --> 02:09.310
比方说都举个例子

02:09.310 --> 02:11.310
当你访问这个路径的时候

02:11.310 --> 02:15.310
那么它显示的是这个组件

02:15.310 --> 02:18.310
然后这个组件下边

02:18.310 --> 02:20.310
它也有可能会有直组件

02:20.310 --> 02:23.310
它也有可能会有直组件

02:24.310 --> 02:26.310
我话都说不清楚了

02:27.310 --> 02:30.310
比方说它也有可能会有一个直组件

02:30.310 --> 02:33.310
那么这一部分 我们比方说它是固定的

02:33.310 --> 02:37.310
一个側面蓝的导航 固定的

02:37.310 --> 02:41.310
无论只要能够显示这个组件

02:41.310 --> 02:43.310
它就一定能显示这个东西

02:43.310 --> 02:47.310
然后右边这个区域它可能是不固定的

02:47.310 --> 02:49.310
那么它的情况有可能有很多

02:49.310 --> 02:55.310
比方说当你访问User

02:55.310 --> 02:58.310
它访问的是这个组件

02:58.310 --> 03:00.310
懂我这个意思吗

03:00.310 --> 03:03.310
就是说这个组件它可能整体上会进行切换

03:04.310 --> 03:07.310
比方说这个组件比方说你访问的不是这个地址

03:07.310 --> 03:09.310
那么可能会整体上的这个组件

03:09.310 --> 03:11.310
它会被切换成为另外一个组件

03:12.310 --> 03:14.310
如果说访问到了这个组件

03:14.310 --> 03:15.310
你访问了这样的地址

03:15.310 --> 03:16.310
访问到这个组件

03:16.310 --> 03:18.310
那么这个组件有一个区域是固定的

03:18.310 --> 03:20.310
另外的区域它也有可能会变化

03:20.310 --> 03:23.310
就这个区域你访问这个地址的时候

03:23.310 --> 03:24.310
它显示了这个组件

03:24.310 --> 03:26.310
如果你说你访问的是别的地址

03:26.310 --> 03:28.310
它有可能显示了另外的组件

03:29.310 --> 03:31.310
那么这就会涉及到路由的嵌套

03:31.310 --> 03:33.310
因为我们歪程就对这一块

03:33.310 --> 03:35.310
对这一块区域肯定是一个路程

03:35.310 --> 03:37.310
一个路程组件来匹配

03:37.310 --> 03:39.310
匹配路径 匹配鞋钢游热

03:39.310 --> 03:41.310
到过后我们选择这个组件

03:41.310 --> 03:43.310
如果说没有匹配到的话

03:43.310 --> 03:44.310
当然是选择别的了

03:44.310 --> 03:46.310
如果说匹配到了它里边

03:46.310 --> 03:48.310
这个组件里边是不是在选择的时候

03:48.310 --> 03:50.310
又会遇到肉彩

03:50.310 --> 03:52.310
就是路由的嵌套

03:52.310 --> 03:54.310
咱们把这个结构

03:54.310 --> 03:55.310
稍微写一下

03:55.310 --> 03:57.310
我也不想把它写成这种样式

03:57.310 --> 03:59.310
就是说这个例子

03:59.310 --> 04:00.310
说这么个意思

04:00.310 --> 04:02.310
比方说我们这里写上一个组件

04:02.310 --> 04:04.310
名字叫做User

04:04.310 --> 04:06.310
User组件

04:06.310 --> 04:08.310
User组件我们这里返回一个DiV

04:08.310 --> 04:10.310
DiV里边有个标题

04:10.310 --> 04:12.310
User

04:12.310 --> 04:14.310
User组件

04:14.310 --> 04:16.310
User组件

04:16.310 --> 04:17.310
固定的区域

04:17.310 --> 04:18.310
固定的区域大概在这吧

04:18.310 --> 04:20.310
就随便写个

04:20.310 --> 04:22.310
那么下边的就是User组件

04:24.310 --> 04:26.310
变化的区域

04:26.310 --> 04:27.310
怎么变化

04:27.310 --> 04:30.310
根据路由 根据地址的不同

04:30.310 --> 04:32.310
发生变化

04:32.310 --> 04:34.310
这是非常常见的

04:34.310 --> 04:36.310
你可以想象成为一个网站里边

04:36.310 --> 04:38.310
比方说我们网站上面的标题是固定的

04:38.310 --> 04:40.310
导航栏是固定的

04:40.310 --> 04:42.310
其实有的时候导航栏都不一定固定

04:42.310 --> 04:44.310
比方说是固定的

04:44.310 --> 04:45.310
我们在这里切换 切换的是啥

04:45.310 --> 04:47.310
是不是切换到下面的这个组件

04:47.310 --> 04:48.310
所以下面的这个组件

04:48.310 --> 04:50.310
要用路由来进行匹配

04:50.310 --> 04:53.310
然后当我们进入个人中心的时候

04:53.310 --> 04:54.310
个人中心的时候

04:54.310 --> 04:55.310
那么左边一个菜单

04:55.310 --> 04:56.310
那么左边一个菜单

04:56.310 --> 04:57.310
左边点左边的时候

04:57.310 --> 04:59.310
只有右边切换

04:59.310 --> 05:00.310
那么在这个路径下面

05:00.310 --> 05:02.310
又根据不同的路径来进行匹配

05:02.310 --> 05:04.310
是这么个意思

05:04.310 --> 05:06.310
好 接下来我们来写一下

05:06.310 --> 05:07.310
优热组件的固定区域

05:07.310 --> 05:09.310
那么下面的时候变化的区域

05:09.310 --> 05:10.310
对吧 变化的区域

05:10.310 --> 05:11.310
为了说明这个变化的区域

05:11.310 --> 05:13.310
我们这里写上一个方形

05:13.310 --> 05:15.310
User

05:15.310 --> 05:17.310
比方说

05:17.310 --> 05:19.310
UserUpdates

05:19.310 --> 05:20.310
修改用户信息

05:20.310 --> 05:21.310
比方说我们这里

05:21.310 --> 05:23.310
返回一个H1

05:23.310 --> 05:25.310
修改用户信息

05:25.310 --> 05:28.310
我们这里下面用个DIV包起来

05:28.310 --> 05:31.310
这个DIV稍微给它一个样式

05:31.310 --> 05:32.310
稍微给它一个样式

05:32.310 --> 05:33.310
把包起来

05:33.310 --> 05:36.310
Style

05:36.310 --> 05:39.310
宽度的话就500

05:39.310 --> 05:41.310
高度的话500

05:41.310 --> 05:43.310
背景颜色

05:43.310 --> 05:45.310
Nice Blue

05:45.310 --> 05:49.310
然后加个边框

05:49.310 --> 05:51.310
两个像素Solid

05:51.310 --> 05:53.310
还有啥呢

05:53.310 --> 05:55.310
居中吗

05:55.310 --> 05:58.310
Martin 0 Auto

05:58.310 --> 06:01.310
这是个User组件

06:01.310 --> 06:03.310
UserUpdates就是User文字

06:03.310 --> 06:05.310
修改用户信息

06:05.310 --> 06:11.310
然后就是User

06:11.310 --> 06:12.310
充值

06:12.310 --> 06:13.310
充值啥说的

06:13.310 --> 06:17.840
配

06:17.840 --> 06:19.840
付款界面

06:19.840 --> 06:22.840
充值

06:22.840 --> 06:24.840
用户

06:24.840 --> 06:26.840
充值

06:26.840 --> 06:27.840
OK

06:27.840 --> 06:28.840
咱们写这么两个指数件

06:28.840 --> 06:29.840
那么一会儿

06:29.840 --> 06:30.840
肯定要把它放到这了

06:30.840 --> 06:32.840
肯定要把它放到这

06:32.840 --> 06:33.840
那么再放到这的时候

06:33.840 --> 06:35.840
是不是要根据路由进行匹配

06:35.840 --> 06:37.840
我们再打入进来

06:37.840 --> 06:38.840
Front

06:38.840 --> 06:39.840
其实我要说的问题很简单

06:39.840 --> 06:40.840
但是我不只举这个例子

06:40.840 --> 06:42.840
你都不知道我在说啥

06:42.840 --> 06:44.840
我说的问题最简单

06:44.840 --> 06:45.840
Router

06:45.840 --> 06:47.840
然后Route

06:47.840 --> 06:49.840
先把这两个写出来吧

06:49.840 --> 06:50.840
行了

06:50.840 --> 06:51.840
咱们就在这里

06:51.840 --> 06:53.840
Route

06:53.840 --> 06:54.840
一个个写

06:54.840 --> 06:55.840
Route

06:55.840 --> 06:57.840
匹配的路径是什么呢

06:57.840 --> 06:58.840
修改用户信息

06:58.840 --> 06:59.840
比方说我们匹配

06:59.840 --> 07:00.840
这里只能写绝对路径

07:01.840 --> 07:02.840
把写钢过去了

07:02.840 --> 07:03.840
写绝对路径

07:03.840 --> 07:04.840
写钢开头

07:04.840 --> 07:06.840
匹配User

07:06.840 --> 07:07.840
User

07:07.840 --> 07:09.840
Update

07:09.840 --> 07:11.840
匹配这个路径

07:11.840 --> 07:12.840
匹配到的主键是什么呢

07:12.840 --> 07:13.840
Component

07:13.840 --> 07:16.840
匹配到的主键是UserUpdate

07:16.840 --> 07:17.840
匹配到这个主键

07:17.840 --> 07:19.840
下面再来一个

07:19.840 --> 07:20.840
Pay

07:20.840 --> 07:21.840
匹配到哪个主键的

07:21.840 --> 07:22.840
UserPay

07:22.840 --> 07:23.840
匹配到这个主键

07:23.840 --> 07:24.840
就完了

07:24.840 --> 07:25.840
根据不同的情况

07:25.840 --> 07:26.840
匹配不同的主键

07:26.840 --> 07:27.840
就完事了

07:27.840 --> 07:28.840
那么你看

07:28.840 --> 07:30.840
这个主键里面是不是用到路由

07:30.840 --> 07:31.840
路由主键

07:31.840 --> 07:33.840
然后在跟主键里面

07:33.840 --> 07:34.840
App这个主键里面

07:34.840 --> 07:36.840
我们是不是要使用Router

07:36.840 --> 07:37.840
对不对

07:38.840 --> 07:39.840
要使用Router

07:39.840 --> 07:40.840
Router里面

07:40.840 --> 07:42.840
我们是不是要写各种Routes

07:42.840 --> 07:44.840
各种Routes

07:46.840 --> 07:47.840
Pass

07:47.840 --> 07:49.840
当我们访问这样的路径的时候

07:49.840 --> 07:50.840
匹配谁呢

07:50.840 --> 07:52.840
是不是匹配用户的主键

07:52.840 --> 07:53.840
匹配用户主键

07:54.840 --> 07:55.840
当然还有其他主键

07:55.840 --> 07:56.840
其他主键

07:56.840 --> 07:57.840
我们不写了

07:57.840 --> 07:58.840
其他主键

07:58.840 --> 07:59.840
当我们访问User的时候

07:59.840 --> 08:01.840
是不是匹配到用户主键

08:01.840 --> 08:02.840
用户主键在渲染的过程中

08:02.840 --> 08:04.840
是不是又要按照地址

08:04.840 --> 08:05.840
又要去匹配

08:05.840 --> 08:07.840
要去匹配别的主键

08:07.840 --> 08:08.840
不要这个意思吧

08:08.840 --> 08:09.840
保存

08:09.840 --> 08:10.840
看一下目前的界面

08:10.840 --> 08:12.840
比方说我们选

08:12.840 --> 08:13.840
如果访问首页的话

08:13.840 --> 08:14.840
肯定是没有

08:14.840 --> 08:16.840
这里我们访问User

08:16.840 --> 08:18.840
你看是不是匹配到这个主键了

08:19.840 --> 08:20.840
匹配到这个主键了

08:20.840 --> 08:21.840
没问题吧

08:22.840 --> 08:23.840
放过来

08:23.840 --> 08:24.840
匹配到这个主键了

08:24.840 --> 08:26.840
然后我们访问的

08:26.840 --> 08:28.840
如果说访问的是User

08:29.840 --> 08:30.840
那个斜杠

08:31.840 --> 08:33.840
我们这里给个超链接

08:33.840 --> 08:34.840
给个超链接

08:35.840 --> 08:36.840
方便切换

08:37.840 --> 08:38.840
方便切换

08:38.840 --> 08:39.840
link

08:41.840 --> 08:42.840
这里

08:42.840 --> 08:43.840
link

08:43.840 --> 08:44.840
link

08:44.840 --> 08:45.840
这里使用

08:46.840 --> 08:47.840
link

08:48.840 --> 08:49.840
这里是

08:50.840 --> 08:54.840
修改用户信息

08:54.840 --> 08:55.840
用户信息

08:56.840 --> 08:57.840
然后还有一个link

08:58.840 --> 08:59.840
link

08:59.840 --> 09:00.840
还有一个link是

09:01.840 --> 09:02.840
充值

09:03.840 --> 09:04.840
这里写个to

09:05.840 --> 09:08.530
到哪去了

09:08.530 --> 09:09.530
跳到User

09:10.530 --> 09:11.530
update

09:12.530 --> 09:13.530
这里

09:13.530 --> 09:14.530
充值

09:14.530 --> 09:16.530
跳到User

09:16.530 --> 09:17.530
配

09:18.530 --> 09:19.530
没问题吧

09:19.530 --> 09:20.530
保存

09:21.530 --> 09:22.530
看一下

09:23.530 --> 09:24.530
这里用户信息

09:24.530 --> 09:25.530
充值

09:25.530 --> 09:26.530
你看地址的跳转

09:26.530 --> 09:27.530
没问题

09:27.530 --> 09:28.530
对吧

09:28.530 --> 09:29.530
看上去是没问题的

09:30.530 --> 09:31.530
但是

09:31.530 --> 09:32.530
这样子一来了

09:32.530 --> 09:33.530
会出现一个

09:34.530 --> 09:35.530
偶和

09:35.530 --> 09:36.530
什么偶和了

09:36.530 --> 09:38.530
这些直主键

09:38.530 --> 09:41.530
跟副主键User的路径

09:41.530 --> 09:42.530
访问路径

09:42.530 --> 09:43.530
User在一起了

09:44.530 --> 09:45.530
也就是说

09:45.530 --> 09:46.530
如果说有一天

09:47.530 --> 09:48.530
我把User

09:49.530 --> 09:50.530
改一下路径规则

09:50.530 --> 09:51.530
比方说

09:51.530 --> 09:52.530
改成这样子

09:52.530 --> 09:53.530
改成U

09:54.530 --> 09:55.530
改成这个规则

09:55.530 --> 09:56.530
是不是要出问题了

09:56.530 --> 09:57.530
你看一下

09:57.530 --> 09:59.530
后面是不是全部要出问题

09:59.530 --> 10:01.530
你看配还能访问吗

10:01.530 --> 10:02.530
不能访问了

10:02.530 --> 10:04.530
访问U

10:04.530 --> 10:05.530
这里跳转

10:05.530 --> 10:06.530
是不是不能访问了

10:06.530 --> 10:08.530
因为你这里的地方的链接

10:08.530 --> 10:10.530
是不是全是写死的

10:10.530 --> 10:12.530
是不是把这个地方全写死了

10:13.530 --> 10:14.530
是不是全写死的

10:14.530 --> 10:15.530
因此

10:15.530 --> 10:16.530
也导致你这里

10:16.530 --> 10:18.530
没有办法

10:18.530 --> 10:20.530
访问到具体的信息了

10:20.530 --> 10:22.530
那这个时候怎么办了

10:22.530 --> 10:23.530
这个时候

10:23.530 --> 10:24.530
我们可以把

10:24.530 --> 10:26.530
你看我们出问题

10:26.530 --> 10:27.530
是不是就出在这

10:27.530 --> 10:28.530
对不对

10:28.530 --> 10:30.530
就是副主键

10:30.530 --> 10:31.530
他到底是

10:31.530 --> 10:32.530
什么样的路由

10:32.530 --> 10:33.530
挑转过来的

10:33.530 --> 10:35.530
我这里是不知道的

10:35.530 --> 10:36.530
我这里是不知道

10:36.530 --> 10:37.530
他副主键

10:37.530 --> 10:38.530
是什么路由

10:38.530 --> 10:39.530
挑转过来的

10:39.530 --> 10:40.530
那么我这里

10:40.530 --> 10:41.530
如果能够获取到

10:41.530 --> 10:43.530
副主键那边

10:43.530 --> 10:45.530
匹配的URLD纸

10:45.530 --> 10:46.530
是不是就完事了

10:46.530 --> 10:48.530
把放到这个位置就完事了

10:48.530 --> 10:49.530
对不对

10:49.530 --> 10:50.530
好

10:50.530 --> 10:51.530
那么接下来

10:51.530 --> 10:53.530
我们看一下如何来获取副主键

10:53.530 --> 10:56.530
匹配到的URLD纸

10:56.530 --> 10:59.530
因为我们知道这个U字

10:59.530 --> 11:00.530
就这个玩意了

11:00.530 --> 11:02.530
它是通过路车匹配过来的

11:02.530 --> 11:03.530
对吧

11:03.530 --> 11:04.530
那么这样子的

11:04.530 --> 11:05.530
它一定会往U字里边

11:05.530 --> 11:06.530
注入了一些

11:06.530 --> 11:07.530
三个主线

11:07.530 --> 11:08.530
我们都讲过

11:08.530 --> 11:09.530
什么history

11:09.530 --> 11:10.530
location

11:10.530 --> 11:11.530
什么march

11:11.530 --> 11:12.530
对吧

11:12.530 --> 11:14.530
那么跟匹配相关的

11:14.530 --> 11:16.530
是不是就是march这个属性

11:16.530 --> 11:17.530
对吧

11:17.530 --> 11:18.530
就是march这个属性

11:18.530 --> 11:19.530
我们来看一下

11:19.530 --> 11:20.530
march这个属性

11:20.530 --> 11:21.530
打印出来看一下

11:21.530 --> 11:23.530
保存

11:23.530 --> 11:24.530
现在我们这里

11:24.530 --> 11:26.530
还是先把它用成U字

11:26.530 --> 11:27.530
先用U字

11:27.530 --> 11:29.530
不然的话看不见效果

11:29.530 --> 11:32.530
这里那么先访问U字

11:32.530 --> 11:33.530
访问这个主键

11:33.530 --> 11:36.530
于是我们看到匹配的信息

11:36.530 --> 11:38.530
它里边有个U pass

11:38.530 --> 11:39.530
pass对应什么

11:39.530 --> 11:41.530
这个pass对应的是

11:41.530 --> 11:43.530
就这里的match

11:43.530 --> 11:45.530
对应的是这个主键

11:45.530 --> 11:46.530
就这个主键

11:46.530 --> 11:47.530
它不是完成匹配吗

11:47.530 --> 11:48.530
就这个主键

11:48.530 --> 11:50.530
它匹配到了时候

11:50.530 --> 11:52.530
它填写的pass规则

11:52.530 --> 11:54.530
它就对应到这

11:54.530 --> 11:55.530
之前没有详细讲

11:55.530 --> 11:56.530
那么现在把详细讲

11:56.530 --> 11:58.530
这个url对应什么了

11:58.530 --> 12:01.530
对应目前匹配到真实的

12:01.530 --> 12:04.530
这个url路径的匹配那一部分

12:04.530 --> 12:06.530
指的是匹配那一部分

12:06.530 --> 12:08.530
比方说举个例子

12:08.530 --> 12:10.530
我们这里点用户信息

12:10.530 --> 12:11.530
点用户信息

12:11.530 --> 12:12.530
我们的路径是啥

12:12.530 --> 12:14.530
你看一下我们的路径是啥

12:14.530 --> 12:16.530
我们的路径是U字update

12:16.530 --> 12:18.530
这是我们目前真实的路径

12:18.530 --> 12:19.530
在location里面

12:19.530 --> 12:21.530
我们也得到了是这样的信息

12:21.530 --> 12:23.530
那么但是它输出的是啥

12:23.530 --> 12:24.530
来看一下

12:24.530 --> 12:26.530
它输出的pass

12:26.530 --> 12:28.530
是不是还是路径规则

12:28.530 --> 12:30.530
路径规则

12:30.530 --> 12:31.530
路径规则是啥

12:31.530 --> 12:33.530
就是这个主键的路径规则

12:33.530 --> 12:35.530
你怎么匹配到这个主键的

12:35.530 --> 12:37.530
哪条路径规则匹配到这个主键的

12:37.530 --> 12:39.530
那么指的是这个路径规则

12:39.530 --> 12:40.530
你要这个是吧

12:40.530 --> 12:42.530
Url指的是什么

12:42.530 --> 12:44.530
它指的不是这里的Url

12:44.530 --> 12:46.530
指的不是这里的Url

12:46.530 --> 12:48.530
Url指的是

12:48.530 --> 12:51.530
就是真实地址中

12:51.530 --> 12:53.530
真实路径中

12:53.530 --> 12:59.530
匹配到规则的那一部分

12:59.530 --> 13:01.530
匹配到哪

13:01.530 --> 13:03.530
就是我们这是我们真实Url路径

13:03.530 --> 13:05.530
那么这个路径里边

13:05.530 --> 13:07.530
哪一部分匹配到了规则

13:07.530 --> 13:08.530
是不是这一部分

13:08.530 --> 13:11.530
这一部分匹配到了规则规则

13:11.530 --> 13:13.530
所以说我们可以利用

13:13.530 --> 13:15.530
march里边的Url

13:15.530 --> 13:17.530
来搞定这件事情

13:17.530 --> 13:19.530
你看着我怎么来写

13:19.530 --> 13:22.530
那么这一块我们可以这样子来写

13:22.530 --> 13:24.530
看着

13:24.530 --> 13:26.530
这样子

13:28.530 --> 13:30.530
我们写上一个模板制服串

13:30.530 --> 13:32.530
咱们用一个模板制服串

13:32.530 --> 13:37.530
这个制服串先拼接march里边的Url

13:37.530 --> 13:40.530
然后再拼接什么update

13:40.530 --> 13:42.530
下面也是一样

13:42.530 --> 13:51.100
拼接这里配

13:51.100 --> 13:53.100
我们这样子来拼接

13:53.100 --> 13:55.100
这里也是一样

13:55.100 --> 13:57.100
那么这样子一来

13:57.100 --> 13:59.100
我们副组建里边

14:01.100 --> 14:03.100
副组建里边

14:03.100 --> 14:04.100
它怎么来匹配的

14:04.100 --> 14:06.100
是不是在执着建里边

14:06.100 --> 14:07.100
就没有这个偶和了

14:07.100 --> 14:08.100
对不对

14:08.100 --> 14:10.100
是不是就没有这个偶和了

14:10.100 --> 14:12.100
我们可以这样子来写

14:12.100 --> 14:13.100
好这样子写了过后

14:13.100 --> 14:14.100
我们来看一下

14:14.100 --> 14:15.100
保存

14:15.100 --> 14:16.100
把打印去掉

14:16.100 --> 14:17.100
保存

14:17.100 --> 14:18.100
你看一下

14:18.100 --> 14:20.100
那么现在没问题

14:20.100 --> 14:21.100
你看是不是没问题

14:21.100 --> 14:23.100
然后我们这里

14:23.100 --> 14:24.100
把它换成U

14:24.100 --> 14:25.100
你看

14:25.100 --> 14:26.100
把这个录性改一下

14:26.100 --> 14:27.100
改成U

14:27.100 --> 14:28.100
改成U过后

14:28.100 --> 14:29.100
我们以后访问

14:29.100 --> 14:31.100
肯定要用U来访问了

14:31.100 --> 14:32.100
那么这里

14:32.100 --> 14:33.100
是不是也没问题

14:33.100 --> 14:34.100
对吧

14:34.100 --> 14:35.100
也没问题了

14:35.100 --> 14:37.100
这样子就可以动态的获取

14:37.100 --> 14:41.100
副组建它当前匹配的Url地址

14:41.100 --> 14:42.100
我管理副组建

14:42.100 --> 14:44.100
是用什么样的Url地址匹配的

14:44.100 --> 14:45.100
我只管说

14:45.100 --> 14:46.100
你匹配到之后

14:46.100 --> 14:48.100
我接下来该怎么来做

14:48.100 --> 14:51.100
该用什么样的Url地址规则来进行

14:51.100 --> 14:54.100
这是这一种模式

14:54.100 --> 14:56.100
当然解决这样的问题

14:56.100 --> 14:58.100
不仅仅是这一种模式

14:58.100 --> 14:59.100
因为Rex Rotor

14:59.100 --> 15:01.100
它非常非常灵活

15:01.100 --> 15:02.100
它没有给你处理这些问题

15:02.100 --> 15:04.100
它不像VU Rotor一样

15:04.100 --> 15:05.100
它给你做了一个什么

15:05.100 --> 15:07.100
命名的路由

15:07.100 --> 15:09.100
巨名路由

15:09.100 --> 15:10.100
Rex Rotor

15:11.100 --> 15:12.100
用什么

15:12.100 --> 15:13.100
它尽量保持

15:13.100 --> 15:15.100
因为它本身就是一个组建而已

15:15.100 --> 15:17.100
尽量保持它自己的存进

15:17.100 --> 15:19.100
所以说你组建无非就是

15:19.100 --> 15:20.100
比方说

15:20.100 --> 15:24.100
如果说我们这些地方也会发生变化

15:24.100 --> 15:25.100
这些地方也会发生变化

15:25.100 --> 15:26.100
甚至说

15:26.100 --> 15:28.100
我们以后其他组建里面

15:28.100 --> 15:30.100
它也有可能会挑转到

15:30.100 --> 15:32.100
用户组建里面的页面

15:32.100 --> 15:34.100
都有可能会挑转

15:34.100 --> 15:36.100
挑转到用户组建里面的页面

15:36.100 --> 15:37.100
那么像这种时候

15:37.100 --> 15:39.100
我们是不是就可以想办法

15:39.100 --> 15:40.100
把这些数据提出去

15:40.100 --> 15:42.100
把这些什么路径

15:42.100 --> 15:44.100
这些规则是不是完全可以提出去

15:44.100 --> 15:46.100
形成单独一个文件

15:46.100 --> 15:48.100
那么利用文件里面的一些辅助方法

15:48.100 --> 15:49.100
来获得路径

15:49.100 --> 15:50.100
获得组建

15:50.100 --> 15:51.100
对吧

15:51.100 --> 15:53.100
我们是不是可以用这种方式来做

15:53.100 --> 15:54.100
对吧

15:54.100 --> 15:56.100
这里我简单的再写一个

15:56.100 --> 15:58.100
就是另一种处理办法

15:58.100 --> 16:00.100
就是全拼我们自己的手中来做

16:00.100 --> 16:01.100
比方说

16:01.100 --> 16:05.100
我们这里写上一个RodeConfig.js

16:05.100 --> 16:07.100
这里面我们怎么写呢

16:07.100 --> 16:08.100
我们可以用这种方式

16:08.100 --> 16:10.100
但这种方式有很多

16:10.100 --> 16:11.100
可能不同的工程

16:11.100 --> 16:14.100
它的处理方式有不太一样

16:14.100 --> 16:16.100
我们这里导出一个配置

16:16.100 --> 16:18.100
esport

16:18.100 --> 16:20.100
const

16:20.100 --> 16:22.100
default

16:22.100 --> 16:25.100
roadconfig

16:25.100 --> 16:26.100
一个配置

16:26.100 --> 16:29.100
其实我们要配置的是啥

16:29.100 --> 16:31.100
配置的就是各种路径规则

16:31.100 --> 16:33.100
以及它对应的组建

16:33.100 --> 16:35.100
对应的组建是啥

16:35.100 --> 16:36.100
就配置这个东西

16:36.100 --> 16:37.100
没问题吧

16:37.100 --> 16:40.100
我们就配置这个东西就完事了

16:40.100 --> 16:42.100
这里我们就

16:42.100 --> 16:45.100
要么然我们就直接写上路径规则

16:45.100 --> 16:46.100
因为我们这里

16:46.100 --> 16:48.100
不就是要处理路径规则的变化吗

16:48.100 --> 16:49.100
对不对

16:49.100 --> 16:51.100
直接写上各种路径规则就完事了

16:51.100 --> 16:52.100
它非常灵活力

16:52.100 --> 16:53.100
I怎么用怎么用

16:53.100 --> 16:54.100
根据你具体的情况

16:54.100 --> 16:56.100
你自己去手动写就完事了

16:56.100 --> 16:57.100
比方说我们这里

16:57.100 --> 16:59.100
user

16:59.100 --> 17:00.100
user

17:00.100 --> 17:03.100
它有一个属性是root

17:03.100 --> 17:04.100
它的根目录

17:04.100 --> 17:05.100
根目录是什么

17:06.100 --> 17:08.100
写杠user

17:08.100 --> 17:10.100
然后它有一些纸木路

17:10.100 --> 17:12.100
比方说纸木路

17:12.100 --> 17:15.100
我们可以用update

17:15.100 --> 17:16.100
update

17:16.100 --> 17:17.100
那么这个路径是什么

17:17.100 --> 17:19.100
这个路径是写杠user

17:19.100 --> 17:20.100
写杠update

17:20.100 --> 17:22.100
当然你觉得这里有重复的话

17:22.100 --> 17:23.100
以后我们再处理

17:23.100 --> 17:25.100
然后配

17:25.100 --> 17:27.100
这里是user

17:27.100 --> 17:28.100
配

17:28.100 --> 17:29.100
根据你自己的情况

17:29.100 --> 17:31.100
你怎么写都行

17:31.100 --> 17:33.100
于是我们把这些路径写出来

17:33.100 --> 17:35.100
以后我们就直接在这里

17:35.100 --> 17:37.100
导入roadconfig

17:37.100 --> 17:39.100
import

17:39.100 --> 17:41.100
roadconfig

17:41.100 --> 17:42.100
front

17:42.100 --> 17:43.100
第二写杠

17:43.100 --> 17:45.100
roadconfig

17:45.100 --> 17:48.100
导入roadconfig

17:48.100 --> 17:49.100
导入它

17:49.100 --> 17:50.100
那么接下来

17:50.100 --> 17:51.100
我们在这里

17:51.100 --> 17:52.100
就可以直接使用

17:52.100 --> 17:53.100
这个变量里面的东西

17:53.100 --> 17:55.100
我们用变量来替换

17:55.100 --> 17:57.100
user root

17:57.100 --> 17:58.100
这是根目录

17:58.100 --> 17:59.100
那么这里

17:59.100 --> 18:01.100
直接写上

18:01.100 --> 18:02.100
roadconfig

18:02.100 --> 18:05.100
user

18:05.100 --> 18:07.100
然后它里面的什么

18:07.100 --> 18:09.100
用户信息update

18:09.100 --> 18:12.100
这里面写上

18:12.100 --> 18:13.100
这个

18:13.100 --> 18:15.100
充值配

18:15.100 --> 18:16.100
对吧

18:16.100 --> 18:18.100
这不就写完了吗

18:18.100 --> 18:19.100
对不对

18:19.100 --> 18:20.100
就这么简单

18:20.100 --> 18:21.100
不是说

18:21.100 --> 18:22.100
它要给你做什么事情

18:22.100 --> 18:23.100
全凭你自己去做

18:23.100 --> 18:25.100
它就做了一个简单的事情

18:25.100 --> 18:27.100
就是给大家把主件给你做好

18:27.100 --> 18:29.100
剩下的事情你自己去搞定

18:29.100 --> 18:31.100
当然你这里要配置

18:31.100 --> 18:32.100
你还可以配置

18:32.100 --> 18:34.100
每个路径它硬设到了

18:34.100 --> 18:35.100
哪一个主件

18:35.100 --> 18:36.100
你是不是都可以配置

18:36.100 --> 18:37.100
对吧

18:37.100 --> 18:38.100
根据你自己的需要

18:38.100 --> 18:39.100
自己去完成

18:39.100 --> 18:40.100
那么这里

18:40.100 --> 18:41.100
你看

18:41.100 --> 18:42.100
是不是要用有点防蚊

18:42.100 --> 18:43.100
对吧

18:43.100 --> 18:44.100
有点防蚊

18:44.100 --> 18:45.100
那么这里

18:45.100 --> 18:46.100
是不是都可以搞定了

18:46.100 --> 18:47.100
以后要修改

18:47.100 --> 18:48.100
是不是就直接修改

18:48.100 --> 18:49.100
这就完事了

18:49.100 --> 18:50.100
对不对

18:50.100 --> 18:52.100
这里是不是出现了重复

18:52.100 --> 18:53.100
这里出现了重复

18:53.100 --> 18:54.100
那你执行处理

18:54.100 --> 18:55.100
你执行处理

18:55.100 --> 18:56.100
这个重复就完了

18:56.100 --> 18:57.100
比方说

18:57.100 --> 18:58.100
我们来写

18:58.100 --> 18:59.100
又导出一个函数

18:59.100 --> 19:00.100
比方说

19:00.100 --> 19:02.100
不写重复的

19:02.100 --> 19:03.100
不写重复的

19:03.100 --> 19:05.100
这里我们导出一个函数

19:05.100 --> 19:06.100
方形

19:06.100 --> 19:07.100
导出什么函数呢

19:07.100 --> 19:10.100
导出一个

19:10.100 --> 19:12.100
get pass

19:12.100 --> 19:14.100
得到路径规则

19:14.100 --> 19:16.100
得到路径规则

19:16.100 --> 19:19.100
你给我传一个什么进来呢

19:19.100 --> 19:22.100
你给我传一个就是

19:25.410 --> 19:27.410
你给我传个啥进来呢

19:27.410 --> 19:30.410
你给我传一个

19:30.410 --> 19:31.410
这里这样子吧

19:31.410 --> 19:32.410
干脆这样子

19:32.410 --> 19:35.920
我们给它写个变量

19:35.920 --> 19:36.920
config

19:36.920 --> 19:39.920
然后我们写这么一个函数

19:39.920 --> 19:43.230
set config

19:43.230 --> 19:44.230
这个函数

19:44.230 --> 19:45.230
我这个函数

19:45.230 --> 19:48.230
会把重新设置个配置里面的

19:48.230 --> 19:50.230
这些数据

19:50.230 --> 19:51.230
我们配置的时候

19:51.230 --> 19:52.230
这样的配置

19:52.230 --> 19:53.230
但是一调用这个函数

19:53.230 --> 19:55.230
调用完了过后

19:55.230 --> 19:57.230
这个配置里面的配置发生变化了

19:57.230 --> 19:58.230
比方说

19:58.230 --> 19:59.230
它就变成了

19:59.230 --> 20:00.230
写刚游热

20:00.230 --> 20:02.230
就凭借到这个东西了

20:02.230 --> 20:03.230
写刚游热它

20:03.230 --> 20:04.230
然后它就变成了

20:04.230 --> 20:06.230
写刚游热配了

20:06.230 --> 20:07.230
比方说

20:07.230 --> 20:08.230
举个例子

20:08.230 --> 20:09.230
我们可以

20:09.230 --> 20:11.230
都是全靠自己搞定

20:11.230 --> 20:12.230
那么我们这里可以写这么一个函数

20:12.230 --> 20:13.230
来搞定这件事情

20:13.230 --> 20:15.230
我想想这个函数有怎么来写

20:15.230 --> 20:16.230
因为它这里面

20:16.230 --> 20:18.230
可能嵌套层次比较多

20:18.230 --> 20:19.230
它可能的嵌套层次比较多

20:19.230 --> 20:21.230
因为它有可能是里面

20:21.230 --> 20:22.230
配里面还有对象

20:22.230 --> 20:23.230
还有对象

20:23.230 --> 20:24.230
入彩

20:24.230 --> 20:25.230
它的根目录是什么配

20:25.230 --> 20:27.230
然后它下面还有东西

20:27.230 --> 20:29.230
比方说

20:29.230 --> 20:30.230
它还有东西

20:30.230 --> 20:32.230
就是比方说

20:32.230 --> 20:34.230
after配

20:34.230 --> 20:36.230
完成支付之后

20:36.230 --> 20:37.230
完成支付之后

20:37.230 --> 20:38.230
之后就是after

20:38.230 --> 20:39.230
那么 after

20:39.230 --> 20:40.230
前面是不是要加上

20:40.230 --> 20:41.230
最终是要加上

20:41.230 --> 20:42.230
写刚游热

20:42.230 --> 20:43.230
写刚配

20:43.230 --> 20:44.230
after

20:44.230 --> 20:46.230
还有什么 before

20:46.230 --> 20:48.230
before

20:48.230 --> 20:51.120
对吧

20:51.120 --> 20:52.120
它有可能有更深层次的嵌套

20:52.120 --> 20:54.120
你不知道它嵌套多少个

20:54.120 --> 20:55.120
你也不知道它嵌套多少个

20:55.120 --> 20:56.120
好

20:56.120 --> 20:58.120
这里面咱们怎么弄这件事情呢

20:58.120 --> 21:00.120
这肯定要低规

21:00.120 --> 21:01.120
肯定要低规

21:01.120 --> 21:02.120
来吧

21:02.120 --> 21:03.120
我写下一个代码

21:03.120 --> 21:05.120
我这里打算写一个辅助函数

21:05.120 --> 21:06.120
来帮我做这个事

21:06.120 --> 21:07.120
加个下滑线

21:07.120 --> 21:08.120
config

21:09.120 --> 21:10.120
你给我一个对象

21:10.120 --> 21:12.120
它要做的事情就是

21:13.120 --> 21:14.120
给我一个对象

21:14.120 --> 21:16.120
给我一个bes

21:16.120 --> 21:17.120
str

21:18.120 --> 21:20.120
它要做的事情就是

21:20.120 --> 21:21.120
什么呢

21:21.120 --> 21:22.120
就是

21:22.120 --> 21:23.120
将

21:23.120 --> 21:24.120
该

21:24.120 --> 21:27.120
对象的

21:27.120 --> 21:29.120
每一个属性

21:29.120 --> 21:32.120
每一个制服串属性

21:32.120 --> 21:35.120
入彩除外

21:35.120 --> 21:36.120
入彩要加

21:36.120 --> 21:37.120
不行

21:37.120 --> 21:40.120
每一个制服串属性

21:40.120 --> 21:42.120
添加

21:42.120 --> 21:43.120
前面

21:43.120 --> 21:45.120
添加bes

21:45.120 --> 21:46.120
str

21:46.120 --> 21:48.120
添加这么一个制服串

21:48.120 --> 21:50.120
就是将这个对象里面的

21:50.120 --> 21:52.120
每一个制服串属性

21:52.120 --> 21:54.120
前面呢

21:54.120 --> 21:56.120
都要给它添加上bes

21:56.120 --> 21:58.120
添加上这个制服串

21:59.120 --> 22:01.120
它不做更深层次的

22:01.120 --> 22:02.120
判定

22:02.120 --> 22:03.120
它只做这么一件事

22:03.120 --> 22:04.120
将对象的

22:04.120 --> 22:05.120
每一个制服串属性

22:05.120 --> 22:06.120
前面添加bes

22:06.120 --> 22:07.120
str

22:07.120 --> 22:09.120
那么这里的具体规则是

22:09.120 --> 22:15.120
如果属性名为入彩

22:15.120 --> 22:17.120
如果属性的名字是入彩

22:17.120 --> 22:21.120
则直接添加bes

22:21.120 --> 22:23.120
str就行了

22:23.120 --> 22:25.120
如果属性名

22:25.120 --> 22:26.120
不是

22:26.120 --> 22:29.120
不是入彩

22:29.120 --> 22:31.120
如果不是入彩

22:31.120 --> 22:32.120
就像这些属性

22:32.120 --> 22:33.120
它不是入彩

22:33.120 --> 22:35.120
那么则

22:35.120 --> 22:38.120
添加bes

22:38.120 --> 22:39.120
str

22:39.120 --> 22:41.120
再拼接

22:41.120 --> 22:42.120
拼接什么

22:42.120 --> 22:44.120
入彩属性值

22:44.120 --> 22:45.120
属性值

22:45.120 --> 22:47.120
再拼接上这个东西

22:47.120 --> 22:48.120
好

22:48.120 --> 22:50.120
如果

22:50.120 --> 22:52.120
属性

22:52.120 --> 22:54.120
不是

22:54.120 --> 22:55.120
制服串

22:55.120 --> 22:57.120
递归调用

22:58.120 --> 23:00.120
递归调用

23:00.120 --> 23:02.120
该方法

23:02.120 --> 23:03.120
那么这个方法出现之后

23:03.120 --> 23:05.120
我们一开始怎么调用呢

23:05.120 --> 23:07.120
一开始就用这种方式

23:07.120 --> 23:09.120
setconfig

23:09.120 --> 23:11.120
对象就是config对象

23:11.120 --> 23:13.120
然后besurl

23:13.120 --> 23:15.120
就是空置不串

23:16.120 --> 23:18.120
好了写好了

23:18.120 --> 23:19.120
那么咱们来试一下

23:19.120 --> 23:20.120
再试一下

23:20.120 --> 23:21.120
因为我们这里的配置

23:21.120 --> 23:23.120
本来就是自己规定的格式

23:23.120 --> 23:24.120
就随便瞎写的

23:24.120 --> 23:26.120
我们就比方说这个例子

23:26.120 --> 23:27.120
怎么来写

23:27.120 --> 23:29.120
就全靠自己来搞定这些事情

23:29.120 --> 23:30.120
好来吧

23:30.120 --> 23:31.120
我们循环

23:31.120 --> 23:33.120
循环对象的属性

23:33.120 --> 23:35.120
net

23:35.120 --> 23:36.120
prob

23:36.120 --> 23:37.120
in

23:37.120 --> 23:38.120
obj

23:38.120 --> 23:39.120
循环对象的所有属性

23:39.120 --> 23:40.120
好

23:40.120 --> 23:41.120
来吧

23:41.120 --> 23:43.120
拿到属性的值

23:43.120 --> 23:44.120
value

23:44.120 --> 23:45.120
拿到属性的值

23:45.120 --> 23:46.120
obj

23:46.120 --> 23:47.120
prob

23:47.120 --> 23:49.120
判断一下

23:49.120 --> 23:51.120
如果说type

23:51.120 --> 23:52.120
value

23:53.120 --> 23:55.120
你给过的是一个字幕出来的属性

23:55.120 --> 23:57.120
那么我要判断一下

23:57.120 --> 23:58.120
又要判断

23:58.120 --> 24:00.120
如果说你这个属性名字

24:00.120 --> 24:02.120
是一个route

24:02.120 --> 24:03.120
你的属性名字是route

24:03.120 --> 24:04.120
我要干嘛呢

24:04.120 --> 24:07.120
我要把你这个属性的值

24:07.120 --> 24:09.120
我要把你一个属性的值

24:09.120 --> 24:10.120
前面

24:10.120 --> 24:11.120
添加一个什么

24:11.120 --> 24:13.120
添加一个besrtl

24:13.120 --> 24:14.120
添加一个这个东西

24:14.120 --> 24:15.120
就完事了

24:15.120 --> 24:16.120
就这么简单

24:16.120 --> 24:18.120
就添加一个这个东西就完事了

24:19.120 --> 24:21.120
bes

24:21.120 --> 24:22.120
besrtl

24:22.120 --> 24:24.120
然后加上个鞋钢

24:24.120 --> 24:25.120
要不要加鞋钢

24:25.120 --> 24:26.120
不用加鞋钢

24:26.120 --> 24:27.120
对吧

24:27.120 --> 24:28.120
不用加鞋钢

24:28.120 --> 24:30.120
加上个besrtl就完事了

24:31.120 --> 24:32.120
加上他本身

24:32.120 --> 24:33.120
obj

24:33.120 --> 24:34.120
prob

24:34.120 --> 24:35.120
对吧

24:35.120 --> 24:36.120
加上他本身

24:36.120 --> 24:38.120
或者说这里添value也行

24:38.120 --> 24:39.120
按照我们的规则

24:39.120 --> 24:40.120
如果属性名字是route

24:40.120 --> 24:42.120
就直接添加besrtl

24:42.120 --> 24:44.120
一开始besrtl

24:44.120 --> 24:45.120
是不是控制不出来

24:45.120 --> 24:46.120
那么这里循环

24:46.120 --> 24:47.120
第一个属性

24:47.120 --> 24:48.120
循环这个对象本身

24:48.120 --> 24:50.120
这个对象本身就是没有route

24:50.120 --> 24:51.120
是没有route

24:51.120 --> 24:52.120
没有route

24:52.120 --> 24:53.120
跟你肯定就不管了

24:53.120 --> 24:54.120
肯定不管了

24:54.120 --> 24:55.120
因为我们在循环

24:55.120 --> 24:56.120
如果是

24:56.120 --> 24:57.120
如果有route的话

24:57.120 --> 24:58.120
那么比方说

24:58.120 --> 24:59.120
如果这里有route的话

24:59.120 --> 25:02.430
所以有route

25:02.430 --> 25:04.430
那么有route的话

25:04.430 --> 25:05.430
那么我在route前面

25:05.430 --> 25:06.430
是不是添加一个

25:06.430 --> 25:08.430
添加一个

25:08.430 --> 25:09.430
添加一个啥呢

25:09.430 --> 25:10.430
添加一个就是

25:11.430 --> 25:13.430
iou

25:13.430 --> 25:15.430
添加一个控制不出来

25:16.430 --> 25:17.430
好 接下来

25:17.430 --> 25:18.430
接下来

25:18.430 --> 25:20.430
那如果说

25:20.430 --> 25:22.430
你这个属性名字不是route

25:22.430 --> 25:23.430
l

25:23.430 --> 25:24.430
它不是route

25:24.430 --> 25:25.430
它又是个制不出来属性

25:25.430 --> 25:26.430
它又不是route

25:26.430 --> 25:27.430
那不是后面的情况

25:27.430 --> 25:28.430
对吧 后面的情况

25:28.430 --> 25:29.430
像这些

25:29.430 --> 25:30.430
对吧 像这些

25:30.430 --> 25:31.430
对不对

25:31.430 --> 25:33.430
好 这些情况下面

25:33.430 --> 25:34.430
我们要干嘛呢

25:34.430 --> 25:36.430
我们要做的事情是

25:36.430 --> 25:38.430
属性名不是route

25:38.430 --> 25:39.430
这里肯定

25:39.430 --> 25:40.430
因为社交地位

25:40.430 --> 25:41.430
肯定有点绕

25:41.430 --> 25:42.430
但是跟我们讲的

25:42.430 --> 25:44.430
路由是没有任何关系的

25:44.430 --> 25:45.430
跟我们的路由

25:45.430 --> 25:46.430
是没有任何关系的

25:46.430 --> 25:47.430
我只是说明这个道理

25:47.430 --> 25:48.430
路由

25:48.430 --> 25:49.430
这些

25:49.430 --> 25:50.430
你要玩什么花样出来

25:50.430 --> 25:51.430
你自己在携带

25:52.430 --> 25:53.430
那么如果说

25:53.430 --> 25:54.430
不是route的话

25:54.430 --> 25:55.430
那么添加什么呢

25:55.430 --> 25:57.430
添加bass

25:57.430 --> 25:58.430
str

25:58.430 --> 26:00.430
还要拼接上什么

26:00.430 --> 26:02.430
拼接上

26:03.430 --> 26:05.430
route这个属性

26:05.430 --> 26:06.430
就是obj

26:06.430 --> 26:07.430
route这个属性

26:07.430 --> 26:08.430
但是个route的属性

26:08.430 --> 26:10.430
是不是有可能是undefined

26:10.430 --> 26:11.430
是不是有可能是没有

26:11.430 --> 26:12.430
对不对

26:13.430 --> 26:14.430
那如果没有的话

26:14.430 --> 26:15.430
我就拼接控制不出来

26:15.430 --> 26:16.430
如果有的话

26:16.430 --> 26:17.430
那么我就拼接什么了

26:17.430 --> 26:19.430
还要拼接这个objroute

26:19.430 --> 26:21.430
还要拼接它

26:21.430 --> 26:22.430
没有这意思吧

26:22.430 --> 26:23.430
如果有的话

26:23.430 --> 26:25.430
我要拼接它

26:25.430 --> 26:27.430
我们把那个拼接进去

26:27.430 --> 26:31.430
如果有这个route的话

26:31.430 --> 26:33.430
我们还要除了拼接bass

26:33.430 --> 26:34.430
str之外

26:34.430 --> 26:36.430
还要拼接这个route

26:36.430 --> 26:37.430
这样子一拼接

26:37.430 --> 26:38.430
然后再来

26:38.430 --> 26:40.430
else

26:40.430 --> 26:41.430
如果它不是一个支付串

26:41.430 --> 26:42.430
这个属性的类型

26:42.430 --> 26:43.430
它就不是支付串

26:43.430 --> 26:45.430
不是支付串干嘛呢

26:45.430 --> 26:46.430
不是支付串

26:46.430 --> 26:48.430
就是说第一规调用该方法

26:48.430 --> 26:49.430
那么说明它是个对象

26:49.430 --> 26:50.430
对不对

26:50.430 --> 26:51.430
它是个对象

26:51.430 --> 26:52.430
是不是又再来一次

26:52.430 --> 26:53.430
对吧

26:53.430 --> 26:55.430
那么就set config

26:55.430 --> 26:56.430
obj

26:56.430 --> 26:58.430
prob

26:58.430 --> 27:00.430
把这个属性拿进去

27:00.430 --> 27:01.430
然后bass URL

27:01.430 --> 27:02.430
是不是要变一下

27:02.430 --> 27:03.430
变成什么

27:03.430 --> 27:05.430
等于之前的bass URL

27:05.430 --> 27:06.430
加上什么

27:06.430 --> 27:07.430
加上这一段

27:07.430 --> 27:08.430
加上这一段

27:08.430 --> 27:10.430
那这一段干脆写出去

27:10.430 --> 27:12.430
干脆写出去

27:12.430 --> 27:14.430
newbass URL

27:14.430 --> 27:18.960
把写出去

27:18.960 --> 27:22.480
这里

27:22.480 --> 27:23.480
是不是这样子写

27:23.480 --> 27:24.480
对吧

27:24.480 --> 27:25.480
来试一下

27:25.480 --> 27:26.480
试一下这个地规函数

27:26.480 --> 27:28.480
这里我们调用这个config

27:28.480 --> 27:30.480
然后我们这里

27:30.480 --> 27:31.480
调用这个函数

27:31.480 --> 27:32.480
set config

27:32.480 --> 27:33.480
然后我这里

27:33.480 --> 27:35.480
把这个config打印出来

27:35.480 --> 27:37.480
打印出来

27:37.480 --> 27:38.480
最后

27:38.480 --> 27:40.480
导出这个config

27:40.480 --> 27:41.480
export

27:41.480 --> 27:43.480
default

27:43.480 --> 27:44.480
config

27:44.480 --> 27:45.480
导出

27:45.480 --> 27:46.480
默论导出

27:46.480 --> 27:47.480
那么这里

27:47.480 --> 27:49.480
只用默论导入

27:50.480 --> 27:51.480
好 保存

27:51.480 --> 27:52.480
咱们看一下

27:52.480 --> 27:53.480
看一下

27:53.480 --> 27:54.480
行不行

27:54.480 --> 27:55.480
这里包错了

27:55.480 --> 27:56.480
包出去包错吧

27:56.480 --> 27:57.480
我们看一下哪里

27:57.480 --> 27:58.480
哪里出了问题

27:58.480 --> 28:00.480
哪里出了问题

28:00.480 --> 28:04.050
看一下这里

28:04.050 --> 28:05.050
第八个

28:05.050 --> 28:11.210
看一下哪里出了问题

28:11.210 --> 28:13.210
obj传进来了

28:13.210 --> 28:15.210
这个是bass URL

28:15.210 --> 28:17.210
咱们按再来执行

28:17.210 --> 28:19.210
然后第个属性

28:19.210 --> 28:20.210
第个属性是什么

28:20.210 --> 28:21.210
user对吧

28:21.210 --> 28:23.210
它的值

28:23.210 --> 28:25.210
当然是空置5寸

28:25.210 --> 28:27.210
它的值是一个对象

28:27.210 --> 28:28.210
我们把对象传进去

28:28.210 --> 28:29.210
把空置5寸传进去

28:29.210 --> 28:30.210
OK 没问题

28:30.210 --> 28:32.210
那么这里又来

28:32.210 --> 28:34.210
现在喜欢的是游热对象了

28:34.210 --> 28:35.210
游热对象了

28:35.210 --> 28:36.210
第1个属性

28:36.210 --> 28:37.210
是不是入册

28:37.210 --> 28:38.210
对吧

28:38.210 --> 28:39.210
入册拿到

28:39.210 --> 28:40.210
如果是入册的话

28:40.210 --> 28:41.210
怎么样

28:41.210 --> 28:42.210
我把这个属性值

28:42.210 --> 28:43.210
重新改一下

28:43.210 --> 28:47.210
改成入册

28:47.210 --> 28:48.210
入册

28:48.210 --> 28:49.210
OK 没问题

28:49.210 --> 28:51.210
那么下一个属性

28:51.210 --> 28:53.210
update

28:53.210 --> 28:55.210
update我们看一下

28:55.210 --> 28:57.210
update的话也是支付出来属性

28:57.210 --> 28:59.210
那么这里等于6bass URL

28:59.210 --> 29:01.210
6bass URL这里出了问题

29:01.210 --> 29:03.210
这里出了问题

29:03.210 --> 29:05.210
6bass URL

29:05.210 --> 29:06.210
这里明白了

29:06.210 --> 29:07.210
6bass URL

29:07.210 --> 29:09.210
这里还要加上一个

29:09.210 --> 29:10.210
这里还要加上一个

29:10.210 --> 29:12.210
自身的属性

29:12.210 --> 29:16.550
保存

29:16.550 --> 29:18.550
好 再来

29:18.550 --> 29:20.550
第1个

29:21.550 --> 29:22.550
这是入册属性

29:22.550 --> 29:23.550
OK

29:23.550 --> 29:25.550
这是update属性

29:25.550 --> 29:26.550
update属性

29:26.550 --> 29:27.550
好 这样子

29:27.550 --> 29:28.550
一设置完

29:28.550 --> 29:29.550
那么update属性

29:29.550 --> 29:30.550
你看是不是改过来了

29:30.550 --> 29:31.550
对吧 就改过来了

29:31.550 --> 29:32.550
好 再来

29:32.550 --> 29:33.550
再来

29:33.550 --> 29:35.550
下一个配属性

29:35.550 --> 29:36.550
配属性到这

29:36.550 --> 29:38.550
是不是配属性又得继续了

29:38.550 --> 29:40.550
现在6bass URL

29:40.550 --> 29:41.550
变成这个东西了

29:41.550 --> 29:42.550
对吧

29:42.550 --> 29:43.550
然后又回到

29:43.550 --> 29:45.550
配这个属性

29:45.550 --> 29:46.550
配这个属性

29:46.550 --> 29:47.550
OK

29:47.550 --> 29:48.550
看一下

29:48.550 --> 29:50.550
首先是route

29:50.550 --> 29:51.550
route

29:51.550 --> 29:53.550
那么取什么呢

29:53.550 --> 29:54.550
取user

29:54.550 --> 29:56.550
拼接上value

29:56.550 --> 29:57.550
配

29:57.550 --> 29:58.550
OK 没问题

29:58.550 --> 29:59.550
好 你看一下

30:00.550 --> 30:01.550
user配对吧

30:01.550 --> 30:02.550
没问题

30:02.550 --> 30:03.550
route变了

30:03.550 --> 30:04.550
好 然后呢

30:04.550 --> 30:06.550
下面的属性

30:06.550 --> 30:07.550
这个拼接过来

30:07.550 --> 30:08.550
好 看一下

30:09.550 --> 30:10.550
user

30:10.550 --> 30:11.550
诶

30:11.550 --> 30:14.550
user

30:14.550 --> 30:17.550
user配after

30:17.550 --> 30:19.550
多拼接了一个对吧

30:19.550 --> 30:20.550
多拼接了一个

30:20.550 --> 30:23.550
那么直接拼接route不就完了吗

30:23.550 --> 30:25.550
多拼接了一个

30:25.550 --> 30:28.550
那我们这里可以把这句话写

30:29.550 --> 30:31.550
这句话写上去

30:31.550 --> 30:33.550
我们把这句话写上去

30:33.550 --> 30:35.550
不要写到询判里面

30:35.550 --> 30:37.550
避免它反复拼接

30:37.550 --> 30:39.550
避免它反复拼接

30:39.550 --> 30:40.550
这里

30:40.550 --> 30:41.550
把这个d8给去掉

30:41.550 --> 30:42.550
看一下现在对不对

30:42.550 --> 30:45.560
刷新

30:45.560 --> 30:49.130
好 那么这个user

30:49.130 --> 30:50.130
你看一下

30:50.130 --> 30:51.130
里边route

30:51.130 --> 30:52.130
user

30:52.130 --> 30:53.130
updates

30:53.130 --> 30:54.130
配里边

30:54.130 --> 30:55.130
user

30:55.130 --> 30:56.130
pay

30:56.130 --> 30:57.130
before

30:57.130 --> 30:58.130
after

30:58.130 --> 30:59.130
什么完了 对吧

30:59.130 --> 31:00.130
正确了

31:00.130 --> 31:01.130
那么现在呢

31:01.130 --> 31:02.130
这里报什么错

31:02.130 --> 31:03.130
它说什么

31:03.130 --> 31:06.130
app.js 21

31:06.130 --> 31:08.130
app.js 21

31:09.130 --> 31:10.130
在这

31:11.130 --> 31:13.130
它是个对象

31:13.130 --> 31:15.130
那么我们这里有route

31:16.130 --> 31:18.130
当然我这里只是测验

31:18.130 --> 31:19.130
应该是用route

31:20.130 --> 31:22.130
因为刚才对象结构变了

31:23.130 --> 31:24.130
OK

31:24.130 --> 31:25.130
好 报出来

31:26.130 --> 31:27.130
对 没问题

31:27.130 --> 31:28.130
没问题

31:28.130 --> 31:29.130
你看

31:29.130 --> 31:30.130
是不是可以自行搞定了

31:30.130 --> 31:32.130
就这些东西呢

31:32.130 --> 31:33.130
我讲了这个玩意不是重点

31:33.130 --> 31:35.130
什么地规这些不是重点

31:35.130 --> 31:36.130
我就是说

31:36.130 --> 31:37.130
这个路由这一块

31:37.130 --> 31:39.130
你要怎么去玩它

31:39.130 --> 31:41.130
你自行搞定

31:41.130 --> 31:43.130
它只是一个组件就行了

31:43.130 --> 31:44.130
你组件该怎么玩

31:44.130 --> 31:46.130
你想怎么玩就怎么玩

31:46.130 --> 31:47.130
什么怎么玩就这么玩

31:47.130 --> 31:48.130
你不用太贵在意

31:48.130 --> 31:49.130
比方说这个东西

31:49.130 --> 31:50.130
你还可以把它包装一下

31:50.130 --> 31:52.130
包装成一个高阶组件

31:52.130 --> 31:54.130
或者是自己在外面去组合一个

31:54.130 --> 31:56.130
自己再写一个组件

31:56.130 --> 31:57.130
封装一下

31:57.130 --> 31:58.130
让它更好用一点

31:58.130 --> 31:59.130
都可以

31:59.130 --> 32:01.130
就挨怎么玩 自己去玩

32:01.130 --> 32:02.130
它比较灵活

32:02.130 --> 32:03.130
不要这个是吧

32:03.130 --> 32:04.130
这是关于

32:04.130 --> 32:05.130
这几颗我要说的

32:05.130 --> 32:06.130
就是说

32:06.130 --> 32:08.130
如果出现组件嵌套的话

32:08.130 --> 32:09.130
也就是说

32:09.130 --> 32:10.130
因为react里面

32:10.130 --> 32:11.130
没有具名组件

32:11.130 --> 32:13.130
没有命名组件

32:13.130 --> 32:14.130
没有命名路由

32:14.130 --> 32:15.130
所以说你要

32:15.130 --> 32:17.130
实现这种路由变化

32:17.130 --> 32:20.130
你要不要影响太多的组件的话

32:20.130 --> 32:22.130
那么这两种方式

32:22.130 --> 32:23.130
可以供你选择

32:23.130 --> 32:25.130
一种是你单独抽离一个对象

32:25.130 --> 32:28.130
来记录那些路径

32:28.130 --> 32:29.130
另外一种方式

32:29.130 --> 32:31.130
是你使用marge

32:31.130 --> 32:33.130
那么来匹配

32:33.130 --> 32:35.130
副元素匹配到的路径

32:35.130 --> 32:37.130
这些都可以

32:37.130 --> 32:39.130
唯一的新知识在哪儿呢

32:39.130 --> 32:40.130
其实也不知道新知识

32:40.130 --> 32:41.130
我们之前讲过

32:41.130 --> 32:42.130
只是我们没有重点题

32:42.130 --> 32:43.130
就是这个UIO

32:43.130 --> 32:45.130
它得到的是匹配部分的路径

32:45.130 --> 32:46.130
而不是整个UIO地质

32:46.130 --> 32:47.130
整个UIO地质

32:47.130 --> 32:49.130
你应该从location里边去读

32:49.130 --> 32:51.130
而不应该从marge里边去读

32:51.130 --> 32:53.130
marge里边读到的都是匹配信息

32:53.130 --> 32:54.130
好吧

32:54.130 --> 32:56.130
这是关于这一刻我要说的东西

