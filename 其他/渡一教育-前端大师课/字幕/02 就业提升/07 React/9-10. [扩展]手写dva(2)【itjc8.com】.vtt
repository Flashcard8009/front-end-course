WEBVTT

00:01.070 --> 00:07.070
上年课我们已经搞定了模型里面的秘密空间 状态和reducer

00:07.070 --> 00:12.070
其实这个reducer里面最重要的就是搞定模型

00:12.070 --> 00:15.070
模型搞定了基本上8% 70%的事情就做完了

00:15.070 --> 00:19.070
那么接着也可能我们来搞定这个effect和subscription

00:19.070 --> 00:23.070
搞定这两个 可能搞定这两个稍微有点绕

00:23.070 --> 00:26.070
稍微有点麻烦一点 首先我们这个effect

00:26.070 --> 00:29.070
它其实要做什么事情呢 也就是监听 还是一样的

00:29.070 --> 00:32.070
监听action对应的action类型

00:32.070 --> 00:36.070
然后每个action类型对应去运行一个副作用的操作

00:36.070 --> 00:39.070
它这里面底层是用saga来实现的

00:39.070 --> 00:42.070
所以说我们回顾一下以前的saga杂写的

00:42.070 --> 00:44.070
是不是就要加个中间键

00:44.070 --> 00:47.070
咱们来导入一个

00:47.070 --> 00:50.070
叫做createSagaMetalware

00:50.070 --> 00:52.510
from 来自于哪呢

00:52.510 --> 00:54.510
reduxsaga

00:54.510 --> 00:57.510
来自于这 我们有这么一个函数还记得吗

00:57.510 --> 00:59.510
我们用这个函数是不是加入一个saga中间键

01:00.510 --> 01:03.510
对吧 加入一个创建这么一个saga中间键

01:03.510 --> 01:04.510
然后加入进去

01:04.510 --> 01:06.510
然后呢 我们这里呢

01:06.510 --> 01:10.510
在getMetalware的时候 是不是要加入一个新的中间键

01:10.510 --> 01:14.510
我们这里呢 写上一个sagaMetalware

01:15.510 --> 01:17.510
通过这个函数

01:17.510 --> 01:20.510
是不是来创建这么一个saga中间键

01:20.510 --> 01:23.510
然后呢 我们把这个saga中间键呢 就放到这

01:23.510 --> 01:25.510
or primeMetalware里边去

01:25.510 --> 01:28.510
但是呢 这个saga中间键它需要一个run

01:28.510 --> 01:30.510
它是不是要把它运行起来

01:30.510 --> 01:32.510
对不对 是不是要把这个仓库

01:32.510 --> 01:34.510
就是要把那个就是

01:34.510 --> 01:37.510
仓库创建结束之后 是不是得把它运行起来

01:37.510 --> 01:40.510
那么这里呢 它又不创建仓库 怎么办呢

01:40.510 --> 01:43.510
这里呢 我们可以用简单的方式来处理一下吧

01:43.510 --> 01:45.510
只不过官方呢 他不是这样子处理的

01:45.510 --> 01:48.510
我这里呢 你用简单的方式来处理一下

01:48.510 --> 01:50.510
处理一下 就在这

01:50.510 --> 01:53.510
我们来这呢 订一个sagaMetalware

01:53.510 --> 01:56.510
订一个 那么这里直接处置

01:57.510 --> 01:59.510
这里给它处置 那么放进来

01:59.510 --> 02:01.510
这里包什么错 检测到无法好 我们代码

02:01.510 --> 02:03.510
小上面啊 小上面

02:06.080 --> 02:08.080
嗯 这里什么

02:14.270 --> 02:16.270
好 写上这么一个sagaMetalware

02:16.270 --> 02:18.840
saga中间键

02:18.840 --> 02:20.840
我们这里简单处理一下就行了

02:20.840 --> 02:23.840
好 那么这里呢 我们创建一个saga中间键

02:23.840 --> 02:24.840
放了 就是给它处置

02:24.840 --> 02:26.840
然后呢 应用到这个中间键里边去

02:26.840 --> 02:29.840
我们在那个创建仓库 你创建仓库完了之后

02:29.840 --> 02:31.840
是不是要运行saga 对吧

02:31.840 --> 02:33.840
运行saga

02:33.840 --> 02:34.840
运行saga

02:34.840 --> 02:37.840
运行saga的时候呢 我们就写上这个

02:37.840 --> 02:39.840
sagaMetalware

02:39.840 --> 02:44.920
运行一个saga

02:45.920 --> 02:47.920
好 这里肯定要一个生成器函数

02:47.920 --> 02:50.920
好 运行saga的时候 我要干嘛呢

02:50.920 --> 02:52.920
想一想 我们真的要干嘛

02:52.920 --> 02:55.920
是不是要监听各种各样的x型的一型啊

02:55.920 --> 02:57.920
那么要监听哪些x型的一型呢

02:57.920 --> 02:59.920
你看 我们这个模型里边

02:59.920 --> 03:01.920
是不是有这些x型的一型要监听

03:01.920 --> 03:03.920
对吧 要交给对应的函数值型

03:03.920 --> 03:05.920
然后呢 另外一个模型是不是也可能有

03:05.920 --> 03:07.920
是不是都可能会有啊

03:07.920 --> 03:11.920
好 我们呢 跟之前那个reducer的处理方式呢

03:11.920 --> 03:15.920
类似 我们呢 也可以去循环

03:15.920 --> 03:17.920
所有的就是模型

03:17.920 --> 03:19.920
循环所有的模型

03:19.920 --> 03:21.920
把它的一些中间键啊

03:21.920 --> 03:23.920
就是把它的负重用函数啊

03:23.920 --> 03:25.920
全部保存到一个数组里面

03:25.920 --> 03:27.920
好 这里我们循环

03:27.920 --> 03:29.920
所有的模型

03:29.920 --> 03:31.920
app.models

03:31.920 --> 03:33.920
然后呢 每一个模型拿到之后

03:33.920 --> 03:35.920
我们循环啥

03:35.920 --> 03:36.920
每一个模型拿到之后

03:36.920 --> 03:38.920
是不是循环它的arphagos里面的所有属性

03:38.920 --> 03:40.920
我们用 forin 循环

03:40.920 --> 03:42.920
循环这个模型里面

03:42.920 --> 03:44.920
arphagos

03:44.920 --> 03:46.920
里面的所有属性

03:46.920 --> 03:48.920
循环它的所有属性

03:48.920 --> 03:51.920
这个不用判断了啊

03:51.920 --> 03:53.920
当然呢 潜力条件

03:53.920 --> 03:55.920
它得有这个arphagos属性

03:55.920 --> 03:56.920
arphagos属性

03:56.920 --> 03:58.920
如果它有这个arphagos属性的话

03:58.920 --> 04:01.920
我们循环它的所有arphagos属性

04:01.920 --> 04:03.920
好 循环过后呢

04:03.920 --> 04:05.920
这个属性名是啥

04:05.920 --> 04:06.920
是不是就是这些东西

04:06.920 --> 04:07.920
对吧

04:07.920 --> 04:09.920
就是这些东西

04:09.920 --> 04:12.920
OK 我加到一个数组里边去

04:12.920 --> 04:14.920
加到一个数组里边去

04:14.920 --> 04:15.920
就是arph

04:15.920 --> 04:18.920
叫做generator funs

04:18.920 --> 04:23.360
保存副作用的

04:23.360 --> 04:25.360
函数的数组

04:25.360 --> 04:27.360
把它放到数组里边去

04:27.360 --> 04:29.360
那么做法跟那个reducer是类似的

04:29.360 --> 04:31.360
我们往这个数组里边加一下

04:31.360 --> 04:32.360
push一下

04:32.360 --> 04:33.360
这个对象里边

04:33.360 --> 04:35.360
一个对象里边有类型

04:35.360 --> 04:36.360
就是监听到什么

04:36.360 --> 04:38.360
监听到那个x类型

04:38.360 --> 04:41.360
x类型是不是就是来自于

04:41.360 --> 04:44.360
这个模型的name space

04:44.360 --> 04:45.360
命名空间

04:45.360 --> 04:46.360
然后一个斜杠

04:46.360 --> 04:48.360
然后呢是

04:48.360 --> 04:49.360
这个模型的

04:49.360 --> 04:50.360
这个属性的名字

04:50.360 --> 04:51.360
对吧

04:51.360 --> 04:52.360
就是监听到x类型

04:52.360 --> 04:55.360
然后运行到generator函数呢

04:55.360 --> 04:57.360
generator

04:57.360 --> 04:59.360
我们这里会用array嘛

04:59.360 --> 05:01.360
避免昏向

05:01.360 --> 05:04.360
这里有generator funs

05:04.360 --> 05:06.360
它运行的生成器函数呢

05:06.360 --> 05:08.360
是不是就是来自于

05:08.360 --> 05:11.360
这个moder effect

05:11.360 --> 05:13.360
它里边的这个属性

05:13.360 --> 05:15.360
是不是这个属性

05:15.360 --> 05:16.360
能看懂吗

05:16.360 --> 05:19.360
我们把所有模型里边的

05:19.360 --> 05:21.360
所有的effects

05:21.360 --> 05:24.360
全部集中到一个数组里边去

05:24.360 --> 05:25.360
那么这样子一来

05:25.360 --> 05:27.360
在我们运行这个saga的时候

05:27.360 --> 05:28.360
是不是就是监听

05:28.360 --> 05:30.360
就是循环这个数组

05:30.360 --> 05:31.360
数组里边监听啥

05:31.360 --> 05:34.360
监听那个type的x类型

05:34.360 --> 05:35.360
然后呢

05:35.360 --> 05:36.360
然后呢监听到了过

05:36.360 --> 05:37.360
和运行啥

05:37.360 --> 05:39.360
是不是运行对应的函数

05:39.360 --> 05:41.360
咱们来循环这个数组

05:41.360 --> 05:43.360
follow

05:44.360 --> 05:45.360
item

05:45.360 --> 05:46.360
循环这个数组

05:46.360 --> 05:47.360
好

05:47.360 --> 05:48.360
每次循环干嘛

05:48.360 --> 05:49.360
是不是eo的

05:49.360 --> 05:50.360
监听

05:50.360 --> 05:51.360
监听啥

05:51.360 --> 05:52.360
take every

05:52.360 --> 05:54.360
我们这得把saga导入进来

05:54.360 --> 05:57.360
saga里边的effects导入进来

05:57.360 --> 05:59.360
我们之前不是导出过一次吗

05:59.360 --> 06:00.360
对不对

06:00.360 --> 06:01.360
导出过一次

06:01.360 --> 06:03.360
就是saga effect

06:03.360 --> 06:05.360
from

06:05.360 --> 06:07.360
来自于saga

06:08.360 --> 06:12.360
好我们把这个effects里边

06:12.360 --> 06:14.360
effects里边是不是有个take every

06:14.360 --> 06:15.360
对吧

06:15.360 --> 06:16.360
take every

06:16.360 --> 06:18.360
监听什么

06:18.360 --> 06:19.360
监听item.type

06:19.360 --> 06:21.360
就监听这个类型

06:21.360 --> 06:22.360
对吧

06:22.360 --> 06:23.360
监听这个类型

06:23.360 --> 06:25.360
然后每一次运行到了过后

06:25.360 --> 06:26.360
去执行

06:26.360 --> 06:28.360
我们的一个函数

06:28.360 --> 06:29.360
这里写个匿名函数

06:29.360 --> 06:30.360
这个函数只有一个x

06:30.360 --> 06:31.360
有时候说

06:31.360 --> 06:32.360
为什么写个匿名函数呢

06:32.360 --> 06:34.360
你不直接把人过去

06:34.360 --> 06:35.360
完成了吗

06:35.360 --> 06:36.360
但是你要注意

06:36.360 --> 06:37.360
这个函数

06:37.360 --> 06:38.360
它是不是要接受两个参数

06:38.360 --> 06:39.360
所以接受两个参数

06:39.360 --> 06:40.360
一个x

06:40.360 --> 06:41.360
一个saga effect

06:41.360 --> 06:42.360
对吧

06:42.360 --> 06:43.360
这要接受两个参数的

06:43.360 --> 06:44.360
但是我这里呢

06:44.360 --> 06:45.360
只能有一个参数

06:45.360 --> 06:46.360
看没

06:46.360 --> 06:47.360
就是我这里呢

06:47.360 --> 06:49.360
只能有一个参数

06:49.360 --> 06:50.360
只能有一个参数

06:50.360 --> 06:52.360
x

06:52.360 --> 06:53.360
这是原生的

06:53.360 --> 06:54.360
saga它里面

06:54.360 --> 06:55.360
只提供了这么一个参数

06:55.360 --> 06:56.360
所以说呢

06:56.360 --> 06:57.360
我这里呢

06:57.360 --> 06:58.360
得封装一下

06:58.360 --> 06:59.360
用一个函数封装一下

06:59.360 --> 07:00.360
那么这个函数呢

07:00.360 --> 07:01.360
我们会把这个函数

07:01.360 --> 07:03.360
写到这嘛

07:03.360 --> 07:05.360
就是运行的函数

07:05.360 --> 07:07.360
funk

07:07.360 --> 07:08.360
运行的函数

07:08.360 --> 07:12.950
就这个写到这

07:12.950 --> 07:13.950
这是运行的函数

07:13.950 --> 07:14.950
那么我们把这个funk

07:14.950 --> 07:15.950
放进来

07:15.950 --> 07:17.950
就稍微改一下格式

07:17.950 --> 07:19.950
那么这里边干嘛呢

07:19.950 --> 07:20.950
是不是最终是

07:20.950 --> 07:22.950
调用这个item.

07:22.950 --> 07:24.950
什么generator.funk

07:24.950 --> 07:25.950
把x 传进去

07:25.950 --> 07:28.950
还有什么saga而fax传进去

07:28.950 --> 07:29.950
对吧

07:29.950 --> 07:30.950
把saga的所有负重用

07:30.950 --> 07:31.950
负重用的一些操作

07:31.950 --> 07:32.950
就这个东西

07:32.950 --> 07:34.950
一起传过去

07:34.950 --> 07:35.950
是不是就完了

07:35.950 --> 07:36.950
对不对

07:36.950 --> 07:38.950
然后把运行写完事了

07:38.950 --> 07:39.950
好来吧

07:39.950 --> 07:40.950
来吧看一下

07:40.950 --> 07:41.950
保存

07:41.950 --> 07:42.950
现在呢

07:42.950 --> 07:43.950
我们还是把那个

07:43.950 --> 07:45.950
保存到那个window里边

07:45.950 --> 07:46.950
方便测试

07:46.950 --> 07:48.950
Stone

07:48.950 --> 07:49.950
Stone

07:49.950 --> 07:50.950
这里还是把Stone

07:50.950 --> 07:54.160
保存到window里边

07:54.160 --> 07:55.160
Stone

07:55.160 --> 07:56.160
保存进去

07:56.160 --> 07:57.160
好

07:57.160 --> 07:58.160
方便测试

07:58.160 --> 07:59.160
然后呢

07:59.160 --> 08:00.160
我们Stone

08:00.160 --> 08:01.160
点dispatch

08:01.160 --> 08:02.160
就这个

08:02.160 --> 08:03.160
好

08:03.160 --> 08:05.160
我们触发这么一个Action

08:05.160 --> 08:06.160
触发一下

08:06.160 --> 08:07.160
然后看一下

08:07.160 --> 08:08.160
就是大师里边

08:08.160 --> 08:10.160
好像我们那个

08:10.160 --> 08:11.160
fx没有运行对吧

08:11.160 --> 08:12.160
因为他只触发了这个

08:12.160 --> 08:14.160
他并没有触发了一个increase

08:14.160 --> 08:16.160
并没有触发一个increase

08:16.160 --> 08:17.160
我们看一下怎么会

08:17.160 --> 08:18.160
咦

08:18.160 --> 08:20.160
咱们看一下

08:20.160 --> 08:21.160
这里稍微写个eode

08:21.160 --> 08:22.160
eode

08:23.160 --> 08:25.160
咱们要使用eode

08:25.160 --> 08:26.160
因为这个呢

08:26.160 --> 08:27.160
本身就也是一个生存器

08:27.160 --> 08:28.160
还是说吧

08:28.160 --> 08:29.160
对吧 前面要使用eode

08:29.160 --> 08:30.160
保存

08:30.160 --> 08:32.160
Stone

08:32.160 --> 08:33.160
触发这个

08:33.160 --> 08:34.160
好

08:34.160 --> 08:35.160
我们看一下Ridax

08:35.160 --> 08:36.160
你看是不是触发两个

08:36.160 --> 08:37.160
对吧

08:37.160 --> 08:38.160
首先触发这个

08:38.160 --> 08:39.160
然后再触发这个

08:39.160 --> 08:40.160
我们看状态

08:40.160 --> 08:42.160
状态没有发生变化

08:42.160 --> 08:43.160
不着急

08:43.160 --> 08:44.160
我们来

08:44.160 --> 08:45.160
观察一下

08:45.160 --> 08:46.160
首先那个触发Action

08:46.160 --> 08:47.160
是没问题的

08:47.160 --> 08:48.160
先触发这个Action

08:48.160 --> 08:49.160
这个Action

08:49.160 --> 08:50.160
被谁来处理了

08:50.160 --> 08:51.160
是不是被那个

08:51.160 --> 08:52.160
这个就是负重用处理含述

08:52.160 --> 08:53.160
被这个处理了

08:53.160 --> 08:54.160
对吧

08:54.160 --> 08:55.160
它延迟一秒钟

08:55.160 --> 08:57.160
然后去触发了这个Action

08:57.160 --> 08:58.160
对不对

08:58.160 --> 08:59.160
是不是触发了这个

08:59.160 --> 09:00.160
但是一触发这个

09:00.160 --> 09:02.160
为什么它没有增加呢

09:02.160 --> 09:03.160
为什么没有增加呢

09:03.160 --> 09:04.160
是因为它增加了

09:04.160 --> 09:06.160
是不是在前面加个潜质

09:06.160 --> 09:07.160
加个Name Space

09:07.160 --> 09:08.160
对不对

09:08.160 --> 09:09.160
是不是在加个潜质

09:09.160 --> 09:10.160
没问题吧

09:10.160 --> 09:12.160
它在加个潜质才行

09:12.160 --> 09:13.160
所以说呢

09:13.160 --> 09:15.160
我们如果用它原始的

09:15.160 --> 09:17.160
用Saga原始的铺扯的话

09:17.160 --> 09:18.160
那么它这里是

09:18.160 --> 09:20.160
不会给你加上潜质的

09:20.160 --> 09:21.160
看呗

09:21.160 --> 09:22.160
你这里触发了什么Action

09:22.160 --> 09:23.160
它就给你触发什么Action

09:23.160 --> 09:26.160
它并不会给你加上任何的潜质

09:26.160 --> 09:28.160
并不会给你加上任何的潜质

09:28.160 --> 09:30.160
那么这个时候怎么办呢

09:30.160 --> 09:31.160
这个时候

09:31.160 --> 09:32.160
这个时候怎么办呢

09:32.160 --> 09:33.160
这个时候呢

09:33.160 --> 09:35.160
我们就可能要改造一下

09:35.160 --> 09:37.160
这里的铺扯

09:37.160 --> 09:38.160
就是说

09:38.160 --> 09:39.160
我们这个Saga而Fix里面

09:39.160 --> 09:40.160
不是有很多吗

09:40.160 --> 09:41.160
很多负重用的含述

09:41.160 --> 09:42.160
什么铺扯啊

09:42.160 --> 09:43.160
Core啊

09:43.160 --> 09:44.160
什么的啊

09:44.160 --> 09:45.160
一些乱七八糟的含述

09:45.160 --> 09:46.160
是不是有很多

09:46.160 --> 09:47.160
咱们是不是要改造一下

09:47.160 --> 09:48.160
这个含述啊

09:48.160 --> 09:49.160
要改造一下这个含述

09:49.160 --> 09:51.160
把铺扯这个含述

09:51.160 --> 09:52.160
稍微给它改造一下

09:52.160 --> 09:53.160
比方说

09:53.160 --> 09:54.160
我们举个例子啊

09:54.160 --> 09:55.160
呃

09:55.160 --> 09:56.160
我们在这呢

09:56.160 --> 09:57.160
我看一下啊

09:57.160 --> 09:58.160
呃

09:58.160 --> 10:00.160
generator funk

10:00.160 --> 10:01.160
然后这里呢

10:01.160 --> 10:02.160
我们再加一个

10:02.160 --> 10:04.160
就是我们在循环模型的时候

10:04.160 --> 10:05.160
循环很多模型的时候

10:05.160 --> 10:06.160
然后呢

10:06.160 --> 10:07.160
我们在这里边

10:07.160 --> 10:09.160
加上一个铺扯含述

10:09.160 --> 10:11.160
加上这么一个铺扯含述

10:11.160 --> 10:12.160
诶

10:12.160 --> 10:13.160
铺扯你要干嘛

10:13.160 --> 10:15.160
你要给我传一个Action进来

10:15.160 --> 10:16.160
对不对

10:16.160 --> 10:17.160
我触发一个Action

10:17.160 --> 10:18.160
我得到一个新的铺扯含述

10:18.160 --> 10:19.160
那么这个含述呢

10:19.160 --> 10:21.160
我们要利用Saga 语言

10:21.160 --> 10:22.160
就是改造

10:22.160 --> 10:23.160
这是改造

10:24.160 --> 10:25.160
铺扯含述

10:25.160 --> 10:27.160
我们要利用原来的Saga

10:27.160 --> 10:28.160
铺扯的含述呢

10:28.160 --> 10:30.160
稍微对它做一些改造

10:30.160 --> 10:32.160
因为原来的Saga 里面的铺扯

10:32.160 --> 10:33.160
就Saga而Fix

10:33.160 --> 10:34.160
就这个

10:34.160 --> 10:36.160
Saga而Fix 里面的铺扯

10:36.160 --> 10:37.160
对不对

10:37.160 --> 10:39.160
是不是有这么一个含述啊

10:39.160 --> 10:41.160
那么Saga 语言的铺扯含述呢

10:41.160 --> 10:43.160
它是直接传一个Action就行了啊

10:43.160 --> 10:44.160
那么我们呢

10:44.160 --> 10:45.160
要把这个Action 拿到

10:45.160 --> 10:46.160
要拿到

10:46.160 --> 10:47.160
要把它的Type 值呢

10:47.160 --> 10:49.160
给它稍微改造一下

10:49.160 --> 10:50.160
最简单的做法

10:50.160 --> 10:51.160
做什么

10:51.160 --> 10:54.160
就是把这个Action 点Type 值

10:54.160 --> 10:56.160
或者说我们重新

10:56.160 --> 10:58.160
重新复制一个新的Action

10:58.160 --> 11:00.160
NewAction

11:00.160 --> 11:02.160
新的Action

11:02.160 --> 11:03.160
等于什么呢

11:03.160 --> 11:04.160
等于原来的Action 展开

11:04.160 --> 11:05.160
然后呢

11:05.160 --> 11:07.160
把它的Type 值重新改一下

11:07.160 --> 11:08.160
改成什么呢

11:08.160 --> 11:10.160
改成它原来的

11:10.160 --> 11:11.160
就是model 里面的

11:11.160 --> 11:13.160
加上一个Name Space

11:13.160 --> 11:15.160
你看我为什么要写到这个循环里面

11:15.160 --> 11:16.160
因为这个循环里面

11:17.160 --> 11:19.160
给它加上原来的命名空间

11:19.160 --> 11:20.160
然后一个斜杠

11:20.160 --> 11:21.160
然后呢

11:21.160 --> 11:22.160
再把这个

11:22.160 --> 11:24.160
它直接传递的Action Type 值

11:24.160 --> 11:25.160
放进来

11:25.160 --> 11:26.160
对不对

11:26.160 --> 11:27.160
产生这么一个新的Action

11:27.160 --> 11:28.160
然后呢

11:28.160 --> 11:30.160
我们这里再去调用

11:30.160 --> 11:32.160
这个Saga 原来的铺扯方法

11:32.160 --> 11:34.160
把新的Action 传进去

11:34.160 --> 11:35.160
然后呢

11:35.160 --> 11:36.160
这里返回

11:36.160 --> 11:37.160
返回这个铺扯方法

11:37.160 --> 11:38.160
返回的结果

11:38.160 --> 11:39.160
明白的意思吧

11:39.160 --> 11:40.160
所以说呢

11:40.160 --> 11:41.160
我们这里呢

11:41.160 --> 11:42.160
稍微做一下改造

11:42.160 --> 11:43.160
对这个铺扯还是

11:43.160 --> 11:44.160
稍微做一下改造

11:44.160 --> 11:45.160
于是呢

11:45.160 --> 11:46.160
所以多了一个铺扯方法

11:46.160 --> 11:47.160
对吧

11:47.160 --> 11:48.160
多了一个铺扯方法

11:48.160 --> 11:49.160
哎

11:49.160 --> 11:50.160
那咱们呢

11:50.160 --> 11:51.160
我们在这

11:51.160 --> 11:52.160
啊

11:52.160 --> 11:53.160
就可以啊

11:53.160 --> 11:54.160
或者说我们把这个

11:54.160 --> 11:55.160
铺扯方法写到哪呢

11:55.160 --> 11:56.160
写到这也可以啊

11:56.160 --> 11:57.160
写到这么一

11:57.160 --> 11:58.160
写到这里也可以

11:59.160 --> 12:00.160
铺扯方法

12:00.160 --> 12:01.160
等于一个方形

12:01.160 --> 12:02.160
一个形

12:02.160 --> 12:03.160
因为我们只

12:03.160 --> 12:04.160
一个铺扯呢

12:04.160 --> 12:05.160
只跟一个对象关联

12:05.160 --> 12:06.160
就是只跟一个模型关联

12:06.160 --> 12:08.160
因为它在模型的命名空间之下

12:08.160 --> 12:10.160
我们只跟一个模型关联就行了

12:10.160 --> 12:12.160
我们把这个�扯方法写到

12:12.160 --> 12:14.160
他们用同一个铺扯

12:14.160 --> 12:15.160
好

12:15.160 --> 12:16.160
你看是不是

12:16.160 --> 12:17.160
就改造了一下

12:17.160 --> 12:18.160
这个铺扯

12:18.160 --> 12:19.160
对吧

12:19.160 --> 12:21.160
改造

12:21.160 --> 12:22.160
改造

12:22.160 --> 12:23.160
铺扯方法

12:23.160 --> 12:25.160
让它

12:25.160 --> 12:27.160
与模型关联

12:28.160 --> 12:29.160
好

12:29.160 --> 12:30.160
那么改造了铺扯方法之后呢

12:30.160 --> 12:31.160
这个铺扯放到这个

12:31.160 --> 12:32.160
数组的对象里边去了

12:32.160 --> 12:33.160
于是呢

12:33.160 --> 12:34.160
我们这里

12:34.160 --> 12:35.160
当我们去调用

12:35.160 --> 12:36.160
那个generator funk的时候呢

12:36.160 --> 12:38.160
除了要把之前的

12:38.160 --> 12:39.160
啊

12:39.160 --> 12:40.160
SACA那边

12:40.160 --> 12:41.160
所有的而非的传进来

12:41.160 --> 12:42.160
然后呢

12:42.160 --> 12:43.160
我们要改一下它的�扯

12:43.160 --> 12:44.160
啊

12:44.160 --> 12:45.160
铺扯是不是要改过

12:45.160 --> 12:46.160
对吧

12:46.160 --> 12:47.160
哎 这个铺扯在哪

12:47.160 --> 12:49.160
所以在item.put里边

12:49.160 --> 12:50.160
哎 我们这里

12:50.160 --> 12:52.160
要这样子写啊

12:52.160 --> 12:53.160
put

12:53.160 --> 12:54.160
put

12:54.160 --> 12:55.160
帽号

12:55.160 --> 12:56.160
item.put

12:56.160 --> 12:57.160
啊 得这么写

12:57.160 --> 12:58.160
是不是把put改了

12:58.160 --> 12:59.160
改成什么

12:59.160 --> 13:00.160
改成那个item里边的put

13:00.160 --> 13:02.160
没有这意思吧

13:02.160 --> 13:03.160
好 看一下

13:03.160 --> 13:04.160
这里稍微有点烧

13:04.160 --> 13:05.160
稍微有点烧

13:05.160 --> 13:07.160
所以说我们的扩展课程啊

13:07.160 --> 13:08.160
通常是面向那些

13:08.160 --> 13:10.160
已经工作了一两年的同学

13:10.160 --> 13:11.160
它对这个代码呢

13:11.160 --> 13:13.160
已经有一定逻辑思维了

13:13.160 --> 13:14.160
变成这个样子

13:14.160 --> 13:15.160
好 保存

13:15.160 --> 13:17.160
咱们来看一下

13:17.160 --> 13:18.160
那么现在呢

13:18.160 --> 13:19.160
我们来触发

13:19.160 --> 13:20.160
触发这个

13:20.160 --> 13:21.160
好 看一下

13:21.160 --> 13:22.160
最终你看

13:22.160 --> 13:23.160
是不是加了一个前序了

13:23.160 --> 13:24.160
counter increase

13:24.160 --> 13:25.160
对不对

13:25.160 --> 13:26.160
那么

13:26.160 --> 13:27.160
状态是不是变化了

13:27.160 --> 13:28.160
就完事了

13:28.160 --> 13:29.160
但是呢

13:29.160 --> 13:31.160
你还要考虑一点

13:31.160 --> 13:32.160
就是你这个put的方法

13:32.160 --> 13:33.160
还要考虑一点

13:33.160 --> 13:35.160
如果说它已经有前序了

13:35.160 --> 13:36.160
已经有前序了

13:36.160 --> 13:37.160
是不是就不加了

13:37.160 --> 13:38.160
对不对

13:38.160 --> 13:40.160
已经有前序就不加了

13:40.160 --> 13:41.160
因此呢

13:41.160 --> 13:42.160
我们这里呢

13:42.160 --> 13:43.160
判断一下

13:51.200 --> 13:52.200
好 这里判断一下

13:52.200 --> 13:53.200
如果说

13:53.200 --> 13:54.200
action里边

13:54.200 --> 13:56.200
deltape里边

13:56.200 --> 13:58.200
包含了include

13:58.200 --> 13:59.200
这个字母出来包含了什么

13:59.200 --> 14:00.200
一个写杠

14:00.200 --> 14:02.200
我们用简单的方式判断吧

14:02.200 --> 14:04.200
如果说你不包含写杠

14:04.200 --> 14:06.200
ok 我给你改造一下

14:06.200 --> 14:08.200
如果你的action不包含写杠

14:08.200 --> 14:09.200
我给你改造一下

14:09.200 --> 14:11.200
给你加上我们的前序

14:11.200 --> 14:12.200
如果说你已经包含了

14:12.200 --> 14:13.200
包含了就是前序

14:13.200 --> 14:14.200
包含了命名空间

14:14.200 --> 14:15.200
那我就不加了

14:15.200 --> 14:16.200
就不加了

14:16.200 --> 14:17.200
所以我把这个put

14:17.200 --> 14:19.200
稍微这里做个判断

14:19.200 --> 14:20.200
做个判断

14:20.200 --> 14:21.200
就是说

14:21.200 --> 14:25.200
如果没有加入命名空间

14:25.200 --> 14:30.200
将当前对象的命名空间

14:30.200 --> 14:31.200
加上

14:31.200 --> 14:32.200
对吧

14:32.200 --> 14:33.200
做这么一件事

14:33.200 --> 14:34.200
好

14:34.200 --> 14:35.200
然后让我再看

14:35.200 --> 14:38.200
如果说我触发的

14:38.200 --> 14:40.200
如果说我们在这里

14:40.200 --> 14:41.200
直接触发的是

14:41.200 --> 14:47.200
counter 斜杠 increase

14:47.200 --> 14:48.200
那么这样子

14:48.200 --> 14:50.200
也不至于出问题

14:50.200 --> 14:51.200
回车

14:51.200 --> 14:52.200
你看这边

14:52.200 --> 14:53.200
所以也不至于出问题

14:53.200 --> 14:54.200
对吧

14:54.200 --> 14:55.200
那么两种写法都可以了

14:55.200 --> 14:57.200
现在都可以支持了

14:57.200 --> 14:58.200
这就是这一块

14:58.200 --> 15:00.200
这一块稍微有点糟

15:00.200 --> 15:01.200
那么这里一块

15:01.200 --> 15:03.200
我们就把saga的中间键

15:03.200 --> 15:04.200
给它加进去了

15:04.200 --> 15:08.200
让它去监听了不同的x型

15:08.200 --> 15:11.200
然后去触发对应的副总统函数

15:11.200 --> 15:12.200
好吧

15:12.200 --> 15:14.200
这是saga这一块

15:14.200 --> 15:15.200
其实到这一块

15:15.200 --> 15:18.200
你也可以去写成这么一个函数

15:18.200 --> 15:19.200
写成这么一个函数

15:19.200 --> 15:20.200
比方说吧

15:20.200 --> 15:23.200
我们这里的可以用这种做法

15:23.200 --> 15:25.200
我想想

15:25.200 --> 15:27.200
可以用什么做法

15:27.200 --> 15:29.200
可以用这种做法

15:29.200 --> 15:31.200
就是我们把这个saga

15:31.200 --> 15:34.200
就是运行saga来写到这

15:34.200 --> 15:36.200
get made aware这里

15:36.200 --> 15:37.200
get made aware

15:37.200 --> 15:38.200
get made aware这里

15:38.200 --> 15:40.200
那么这里边的话

15:40.200 --> 15:43.200
我想想

15:43.200 --> 15:45.200
可能怎么写比较合适一点

15:45.200 --> 15:48.200
我给这个函数加一个静态属性

15:48.200 --> 15:49.200
加一个静态属性

15:49.200 --> 15:50.200
叫做wrong saga

15:50.200 --> 15:52.200
我们可以这样子写

15:52.200 --> 15:53.200
把这个代码来放这

15:53.200 --> 15:54.200
这样子

15:54.200 --> 15:56.200
结构要清晰一点

15:56.200 --> 15:58.200
我们把代码放这

16:02.200 --> 16:03.200
这样子

16:03.200 --> 16:06.200
我们给这个函数加上一个静态属性

16:06.200 --> 16:08.200
get made aware

16:08.200 --> 16:10.200
wrong saga

16:10.200 --> 16:11.200
加上这么一个静

16:11.200 --> 16:14.200
加上这么一个就是属性

16:14.200 --> 16:16.200
静态方法

16:16.200 --> 16:18.200
那么调整这个方法的话

16:18.200 --> 16:19.200
我们干嘛呢

16:19.200 --> 16:20.200
我们就做这么一件事

16:20.200 --> 16:21.200
就做这么一件事

16:21.200 --> 16:22.200
就是我现在不做这件事

16:22.200 --> 16:24.200
但是我提供这个功能给你

16:24.200 --> 16:25.200
我把这个功能提供给你

16:25.200 --> 16:26.200
get made aware

16:26.200 --> 16:27.200
wrong saga

16:27.200 --> 16:28.200
好吧

16:28.200 --> 16:29.200
把这个功能提供给你

16:29.200 --> 16:30.200
那么你需要的时候

16:30.200 --> 16:31.200
去调整它就完事了

16:31.200 --> 16:33.200
所以说我们上面就不用这个变量了

16:33.200 --> 16:35.200
上面就不用这个变量了

16:35.200 --> 16:37.200
在这里直接写一个

16:37.200 --> 16:38.200
saga made aware

16:38.200 --> 16:39.200
那么直接在这里

16:39.200 --> 16:40.200
直接可以使用了

16:40.200 --> 16:41.200
对吧

16:41.200 --> 16:42.200
看一下有没有问题

16:42.200 --> 16:43.200
是不是没问题

16:43.200 --> 16:45.200
然后我们在这里

16:45.200 --> 16:46.200
由于这个函数里边加了一个属性

16:46.200 --> 16:47.200
wrong saga

16:47.200 --> 16:48.200
对吧

16:48.200 --> 16:50.200
我们在创建完了仓库之后

16:50.200 --> 16:51.200
我们要运行 saga

16:51.200 --> 16:52.200
我们就直接使用

16:52.200 --> 16:53.200
get made aware

16:53.200 --> 16:55.200
这个函数里边的wrong saga

16:55.200 --> 16:57.200
调整这个函数运行就完事了

16:57.200 --> 16:58.200
这边的代码

16:58.200 --> 16:59.200
因为这里只是创建仓库

16:59.200 --> 17:01.200
所以说它不要去关心太多的事情

17:01.200 --> 17:03.200
保存

17:03.200 --> 17:04.200
效果是一样的

17:05.200 --> 17:06.200
好看一下

17:06.200 --> 17:07.200
效果是不是一样的

17:07.200 --> 17:08.200
对吧

17:08.200 --> 17:09.200
一样的

17:09.200 --> 17:10.200
好

17:10.200 --> 17:11.200
这是这一块

17:11.200 --> 17:12.200
这一块

17:12.200 --> 17:14.200
好那么这一块副作用

17:14.200 --> 17:15.200
现在我们已经搞定了

17:15.200 --> 17:17.200
已经可以处理副作用了

17:17.200 --> 17:18.200
然后

17:18.200 --> 17:20.200
我们现在还要做连接

17:20.200 --> 17:21.200
就是我们的 counter

17:21.200 --> 17:22.200
你看我们之前

17:22.200 --> 17:23.200
conter主件里面不是

17:23.200 --> 17:24.200
从dva里面导出一个conleg

17:24.200 --> 17:25.200
对吧

17:25.200 --> 17:26.200
要进行连接

17:26.200 --> 17:27.200
好那这个简单

17:27.200 --> 17:28.200
这个非常简单

17:28.200 --> 17:29.200
但index 除了导出

17:29.200 --> 17:31.200
除了默认导出dva之外

17:31.200 --> 17:33.200
我们还要导出 export

17:33.200 --> 17:34.200
导出什么呢

17:34.200 --> 17:35.200
导出rex

17:35.200 --> 17:37.200
rex里面所有东西

17:37.200 --> 17:39.200
要导出rex

17:39.200 --> 17:41.200
rex里面所有东西

17:41.200 --> 17:43.200
大家导出

17:43.200 --> 17:44.200
我们其实要用到的

17:44.200 --> 17:45.200
无非就是个连接

17:45.200 --> 17:47.200
我们直接导出一个连接的

17:47.200 --> 17:48.200
conleg

17:48.200 --> 17:50.200
直接把个连接导出来就完事了

17:50.200 --> 17:51.200
好那么

17:51.200 --> 17:52.200
到这个组建里面来

17:52.200 --> 17:53.200
是不是就可以用

17:53.200 --> 17:55.200
我们自己写的dva了

17:55.200 --> 17:56.200
对吧

17:56.200 --> 17:57.200
用我们自己写的dva

17:57.200 --> 17:58.200
dva里面还有一个conleg

17:58.200 --> 17:59.200
就有这个

17:59.200 --> 18:00.200
那么就可以进行连接组建了

18:00.200 --> 18:01.200
因为这个conleg

18:01.200 --> 18:03.200
无非就是rex里面的

18:03.200 --> 18:04.200
rex-rex里面的

18:04.200 --> 18:06.200
rex-rex里面的这个就是

18:06.200 --> 18:07.200
函数

18:07.200 --> 18:08.200
好那么写好了

18:08.200 --> 18:09.200
咱们来试一下

18:09.200 --> 18:10.200
这个conter

18:10.200 --> 18:12.200
能不能正常运行

18:12.200 --> 18:14.200
我们在这个road config里面

18:14.200 --> 18:15.200
我们导入conter

18:15.200 --> 18:17.200
import

18:17.200 --> 18:19.200
conter

18:19.200 --> 18:20.200
conter from

18:20.200 --> 18:21.200
地儿鞋杠

18:21.200 --> 18:22.200
conter

18:22.200 --> 18:23.200
好这里面

18:23.200 --> 18:25.200
运行这个conter

18:25.200 --> 18:27.200
看一下能不能正常运行呢

18:27.200 --> 18:28.200
好试一下

18:28.200 --> 18:29.200
加

18:29.200 --> 18:30.200
减

18:30.200 --> 18:32.200
是不是可以一样的

18:32.200 --> 18:33.200
一步加

18:33.200 --> 18:34.200
一步加

18:34.200 --> 18:35.200
一步减

18:35.200 --> 18:36.200
对吧

18:36.200 --> 18:37.200
所以一样的

18:37.200 --> 18:38.200
对不对

18:38.200 --> 18:39.200
然后这几个数字加上

18:39.200 --> 18:40.200
对吧都是一样的

18:40.200 --> 18:41.200
都是一样的

18:41.200 --> 18:42.200
因为我们现在

18:42.200 --> 18:43.200
已经搞定了

18:43.200 --> 18:44.200
已经关联了

18:44.200 --> 18:45.200
模型里面的

18:45.200 --> 18:46.200
refects

18:46.200 --> 18:47.200
reducer

18:47.200 --> 18:48.200
stats name steps

18:48.200 --> 18:49.200
都关联进去了

18:49.200 --> 18:50.200
对不对

18:50.200 --> 18:51.200
都关联进去了

18:51.200 --> 18:52.200
所以就很好搞定了

18:52.200 --> 18:53.200
好

18:53.200 --> 18:54.200
最后

18:54.200 --> 18:56.200
最后的话

18:56.200 --> 18:59.200
我们是这个subscription

18:59.200 --> 19:00.200
subscription

19:00.200 --> 19:01.200
就这个东西

19:01.200 --> 19:02.200
好

19:02.200 --> 19:03.200
那么这个东西怎么玩呢

19:03.200 --> 19:04.200
这个东西

19:04.200 --> 19:05.200
这个东西

19:05.200 --> 19:08.200
其实就是在模型加进去过后

19:08.200 --> 19:09.200
一开始雕容一次

19:09.200 --> 19:10.200
就完事了

19:10.200 --> 19:11.200
就在启动的时候

19:11.200 --> 19:12.200
模型加进去过后

19:12.200 --> 19:14.200
一开始雕容一次就完事了

19:14.200 --> 19:15.200
所以说我们在地坝里边

19:15.200 --> 19:17.200
我们看刚才一开始做了啥

19:17.200 --> 19:18.200
一开始

19:18.200 --> 19:20.200
我们start的时候

19:20.200 --> 19:22.200
得到了仓库

19:22.200 --> 19:23.200
仓库了

19:23.200 --> 19:24.200
然后显示宣展界面

19:24.200 --> 19:25.200
好

19:25.200 --> 19:26.200
那么这个时候

19:26.200 --> 19:27.200
我们就可以去

19:27.200 --> 19:28.200
可以去干嘛

19:28.200 --> 19:29.200
可以去

19:29.200 --> 19:30.200
创建的仓库之后

19:30.200 --> 19:34.200
其实我们就可以去触发subscription了

19:34.200 --> 19:40.200
那么这里就是运行注册的subscription

19:40.200 --> 19:42.200
就运行这个

19:42.200 --> 19:43.200
好

19:43.200 --> 19:44.200
咱们又来写个函数

19:44.200 --> 19:45.200
又来写个函数

19:45.200 --> 19:46.200
翻个写

19:46.200 --> 19:47.200
看这里的函数很多了

19:47.200 --> 19:49.200
每个函数还做一方面的事情

19:49.200 --> 19:50.200
这些函数

19:50.200 --> 19:51.200
辅助start

19:51.200 --> 19:53.200
来完成它的追踪功能

19:53.200 --> 19:54.200
那么这里再写个函数

19:54.200 --> 19:56.200
就是

19:56.200 --> 20:01.510
runsubscriptions

20:01.510 --> 20:04.510
运行

20:04.510 --> 20:05.510
运行

20:05.510 --> 20:08.510
就是注册函数

20:08.510 --> 20:10.510
就在最开始的时候就运行

20:10.510 --> 20:12.510
那么这里只需要调用一下就完事了

20:12.510 --> 20:13.510
runsubscription

20:13.510 --> 20:14.510
调用一下就完事了

20:14.510 --> 20:16.510
那么这个函数里边干嘛呢

20:16.510 --> 20:17.510
我们会发现

20:17.510 --> 20:20.510
每个模型里边都有可能会写这个东西

20:20.510 --> 20:21.510
这个东西里边

20:21.510 --> 20:23.510
它提供了很多函数

20:23.510 --> 20:24.510
其实我们就是

20:24.510 --> 20:26.510
找到所有的模型

20:26.510 --> 20:28.510
然后一次去调用这些函数

20:28.510 --> 20:30.510
调用一次就完事了

20:30.510 --> 20:31.510
就完事了

20:31.510 --> 20:32.510
就这么简单

20:32.510 --> 20:33.510
来吧

20:33.510 --> 20:34.510
那么这里

20:34.510 --> 20:36.510
我们首先还是要准备一个数组

20:36.510 --> 20:37.510
准备一个数组

20:37.510 --> 20:43.510
就是在装subscription

20:43.510 --> 20:44.510
functions

20:44.510 --> 20:51.510
这个数组是存放所有的subscription函数

20:51.510 --> 20:52.510
那么这里是不是要干嘛

20:52.510 --> 20:54.510
要循环模型嘛

20:54.510 --> 20:55.510
对不对

20:55.510 --> 20:56.510
要循环模型

20:56.510 --> 20:58.510
for

20:58.510 --> 20:59.510
of

20:59.510 --> 21:00.510
循环什么

21:00.510 --> 21:01.510
所有的模型

21:01.510 --> 21:03.510
app.models

21:03.510 --> 21:04.510
循环模型

21:04.510 --> 21:05.510
然后呢

21:05.510 --> 21:06.510
每一个模型里边

21:06.510 --> 21:07.510
是不是要判断一下

21:07.510 --> 21:08.510
你有没有什么

21:08.510 --> 21:09.510
你们有没有那个

21:09.510 --> 21:10.510
就是这个东西

21:10.510 --> 21:12.510
subscription是这个属性

21:12.510 --> 21:13.510
如果你有的话

21:13.510 --> 21:14.510
我还要干嘛

21:14.510 --> 21:15.510
我还要去便利

21:15.510 --> 21:17.510
便利这个属性

21:17.510 --> 21:18.510
它的所有属性

21:18.510 --> 21:20.510
model

21:20.510 --> 21:21.510
subscription是

21:21.510 --> 21:23.510
变成它的所有属性

21:23.510 --> 21:24.510
那么每一次是不是

21:24.510 --> 21:25.510
拿到一个属性名称

21:25.510 --> 21:26.510
对吧

21:26.510 --> 21:27.510
拿到一个属性名称

21:27.510 --> 21:28.510
我们其实

21:28.510 --> 21:29.510
要一个属性名称也没用

21:29.510 --> 21:30.510
我们主要是要

21:30.510 --> 21:31.510
它的属性值

21:31.510 --> 21:33.510
它的值是一个函数

21:33.510 --> 21:34.510
它的值是一个函数

21:34.510 --> 21:35.510
然后呢

21:35.510 --> 21:36.510
我们意识于调用就完事了

21:36.510 --> 21:37.510
其实我都

21:37.510 --> 21:38.510
我觉得都不要速度了

21:38.510 --> 21:39.510
不要速度了

21:39.510 --> 21:40.510
直接调用就完事了

21:40.510 --> 21:42.510
那么fun

21:42.510 --> 21:43.510
函数是什么

21:43.510 --> 21:44.510
函数就是model

21:44.510 --> 21:45.510
subscription是

21:45.510 --> 21:46.510
prob

21:46.510 --> 21:47.510
对吧

21:47.510 --> 21:48.510
把这个函数拿到

21:48.510 --> 21:50.510
调用函数就完事了

21:50.510 --> 21:52.510
问题是调用函数的时候

21:52.510 --> 21:53.510
它要传一些参数

21:53.510 --> 21:54.510
它要传个对象

21:54.510 --> 21:56.510
这个对象提供两个东西

21:56.510 --> 21:57.510
一个是dispatch

21:57.510 --> 21:58.510
一个是history

21:58.510 --> 21:59.510
对吧

21:59.510 --> 22:00.510
一个一个来

22:00.510 --> 22:01.510
这两个东西也不算

22:01.510 --> 22:02.510
很好写

22:02.510 --> 22:04.510
一个是dispatch

22:04.510 --> 22:06.510
dispatch哪来的

22:06.510 --> 22:07.510
你告诉我

22:07.510 --> 22:09.510
dispatch哪来

22:09.510 --> 22:10.510
dispatch是不是

22:10.510 --> 22:12.510
来自于仓库的dispatch

22:12.510 --> 22:13.510
是这样吧

22:13.510 --> 22:15.510
是不是来自于仓库的dispatch

22:15.510 --> 22:16.510
那么这个函数

22:16.510 --> 22:17.510
他要接受一个参数

22:17.510 --> 22:18.510
就是仓库

22:18.510 --> 22:19.510
或者说你把dispatch给我

22:19.510 --> 22:21.510
dispatch给我

22:21.510 --> 22:23.510
把仓库的dispatch传过来

22:23.510 --> 22:24.510
好

22:24.510 --> 22:25.510
那么这里你要把dispatch

22:25.510 --> 22:26.510
函数给我

22:26.510 --> 22:27.510
因为仓库我这里

22:27.510 --> 22:28.510
也得不到仓库

22:28.510 --> 22:29.510
对吧

22:29.510 --> 22:32.510
所以说你得把dispatch给我

22:32.510 --> 22:33.510
dispatch给我

22:33.510 --> 22:34.510
那么传给你

22:34.510 --> 22:35.510
但是你要注意

22:35.510 --> 22:36.510
这个dispatch的功能

22:36.510 --> 22:38.510
跟那个铺扯很相似

22:38.510 --> 22:40.510
因为它可以触发的时候

22:40.510 --> 22:41.510
它触发的时候

22:41.510 --> 22:43.510
它也是可以不用传

22:43.510 --> 22:44.510
前面那个前綴的

22:44.510 --> 22:45.510
看没

22:45.510 --> 22:46.510
触发的时候

22:46.510 --> 22:48.510
也可以不用传前綴

22:48.510 --> 22:49.510
对吧

22:49.510 --> 22:50.510
也可以不用传前綴

22:50.510 --> 22:51.510
那么是不是这个dispatch

22:51.510 --> 22:52.510
这个函数

22:52.510 --> 22:53.510
是不是也得处理一下

22:53.510 --> 22:55.510
咱们得到这个model的时候

22:55.510 --> 22:57.510
是不是要创建一个新的dispatch函数

22:57.510 --> 23:00.510
来替代这个原来的dispatch函数

23:00.510 --> 23:02.510
咱们写一个函数

23:02.510 --> 23:03.510
newdispatch

23:05.510 --> 23:08.510
要创建这么一个新的dispatch函数

23:08.510 --> 23:10.510
给我一个x

23:10.510 --> 23:11.510
那么我来替代

23:11.510 --> 23:13.510
原来的dispatch函数

23:13.510 --> 23:14.510
我们来替代

23:14.510 --> 23:15.510
那么到时候

23:15.510 --> 23:16.510
我这里传的dispatch

23:16.510 --> 23:18.510
是我们的新的dispatch函数

23:18.510 --> 23:19.510
对吧

23:19.510 --> 23:21.510
替换掉原来的dispatch

23:21.510 --> 23:22.510
明白的意思吗

23:22.510 --> 23:23.510
那么这里

23:23.510 --> 23:25.510
是不是要重新得到x

23:25.510 --> 23:28.510
那么跟刚才我们写的那个

23:28.510 --> 23:31.510
铺扯内的是一样的道理

23:31.510 --> 23:33.510
跟刚才我们写的那个铺扯内的

23:33.510 --> 23:34.510
是一样的道理

23:34.510 --> 23:35.510
对吧

23:35.510 --> 23:36.510
铺扯内的

23:36.510 --> 23:37.510
我们根据一个x

23:37.510 --> 23:38.510
得到一个新的x

23:38.510 --> 23:40.510
是不是得到一个新的x

23:40.510 --> 23:42.510
好 那来吧

23:42.510 --> 23:44.510
好 那来啊

23:44.510 --> 23:45.510
我们这里呢

23:45.510 --> 23:47.510
就刚才写这么一个函数来帮助

23:47.510 --> 23:49.510
来帮助我们做这个事

23:49.510 --> 23:51.510
get newx

23:52.510 --> 23:54.510
以传入一个x

23:54.510 --> 23:55.510
和传入一个模型

23:55.510 --> 23:57.510
我来得到一个新的x

24:01.140 --> 24:03.140
就是根据

24:03.140 --> 24:05.140
就

24:05.140 --> 24:06.140
就是将

24:06.140 --> 24:08.140
x的内型

24:08.140 --> 24:10.140
绑定到

24:10.140 --> 24:11.140
绑定到模型

24:11.140 --> 24:13.140
我们来做这么一件事

24:13.140 --> 24:14.140
那么你传过一个x

24:14.140 --> 24:15.140
一个mod

24:15.140 --> 24:16.140
来帮你处理一个事

24:16.140 --> 24:17.140
其实就是一个代码

24:17.140 --> 24:19.140
就是这个代码

24:19.140 --> 24:20.140
好 你看一下

24:20.140 --> 24:21.140
就是这个代码

24:21.140 --> 24:22.140
我看

24:22.140 --> 24:23.140
把这个x先捣到

24:23.140 --> 24:25.140
如果说x的内型呢

24:25.140 --> 24:26.140
它里面不包含鞋杠

24:26.140 --> 24:27.140
是不是要绑定模型

24:27.140 --> 24:29.140
好 我就把新x

24:29.140 --> 24:30.140
重新复制

24:30.140 --> 24:31.140
原来那个数据展开

24:31.140 --> 24:33.140
然后把它type直接改一下

24:33.140 --> 24:35.140
改成了模型的命名空间

24:35.140 --> 24:36.140
加上了x type

24:36.140 --> 24:38.140
最后把新的x返回

24:38.140 --> 24:40.140
6x返回

24:40.140 --> 24:41.140
6x返回

24:41.140 --> 24:43.140
好 写出这么一个函数

24:43.140 --> 24:44.140
有了这个函数之后

24:44.140 --> 24:46.140
我们这里铺扯就很简单了

24:46.140 --> 24:47.140
铺扯这里

24:47.140 --> 24:49.140
我们是不是

24:49.140 --> 24:51.140
就这里得到一个

24:51.140 --> 24:53.140
get成6x

24:53.140 --> 24:54.140
对吧

24:54.140 --> 24:55.140
x返进去

24:55.140 --> 24:57.140
然后modu返进去

24:57.140 --> 24:58.140
对不对

24:58.140 --> 25:00.140
我们给它触发一个新的x

25:00.140 --> 25:03.140
那么这上面是不是一样的

25:03.140 --> 25:05.140
这上面是一样的

25:05.140 --> 25:07.140
那么这个6dspark

25:07.140 --> 25:09.140
那么我们这里触发什么了

25:09.140 --> 25:10.140
触发就是

25:10.140 --> 25:11.140
原来的dspark

25:11.140 --> 25:12.140
触发一个新的x

25:12.140 --> 25:13.140
get成6x

25:13.140 --> 25:15.140
把x返进去

25:15.140 --> 25:16.140
把modu返进去

25:16.140 --> 25:17.140
对吧

25:17.140 --> 25:19.140
这样子完成这个dspark

25:19.140 --> 25:21.140
dspark就搞定了

25:21.140 --> 25:23.140
好 接下来还要传递一个东西

25:23.140 --> 25:25.140
你看这个subscription是里边

25:25.140 --> 25:26.140
所以还要一个history

25:26.140 --> 25:27.140
也要传进去

25:27.140 --> 25:29.140
那么这个history呢

25:29.140 --> 25:30.140
来自于哪呢

25:30.140 --> 25:32.140
这个history来自于哪

25:32.140 --> 25:33.140
来自于哪

25:33.140 --> 25:35.140
是不是来自于配置里边

25:35.140 --> 25:37.140
现在我们要开始设计到配置了

25:37.140 --> 25:38.140
配置我们这里

25:38.140 --> 25:39.140
我们不会完全设计到配置

25:39.140 --> 25:41.140
但是至少这里没办法

25:41.140 --> 25:42.140
你要设计到配置了

25:42.140 --> 25:44.140
配置里边是不是有一个history

25:44.140 --> 25:45.140
对不对

25:45.140 --> 25:46.140
option

25:46.140 --> 25:48.140
它里面不是有一个history吗

25:48.140 --> 25:49.140
对不对

25:49.140 --> 25:51.140
那么它如果说没有传递这个history

25:51.140 --> 25:53.140
我们之前怎么说的

25:53.140 --> 25:55.140
是不是用它的created browser history

25:55.140 --> 25:56.140
对吧

25:56.140 --> 25:58.140
好 所以说这里的配置

25:58.140 --> 25:59.140
这里边

25:59.140 --> 26:00.140
如果你有些东西没有传

26:00.140 --> 26:02.140
我会有默认值

26:02.140 --> 26:04.140
那么这里又出现一个

26:04.140 --> 26:05.140
又出现一个函数

26:05.140 --> 26:07.140
来设置默认值

26:07.140 --> 26:09.140
就是方个型

26:09.140 --> 26:10.140
getoption

26:10.140 --> 26:11.140
option

26:11.140 --> 26:12.140
得到

26:12.140 --> 26:13.140
得到什么

26:13.140 --> 26:15.140
得到就是所有的配置

26:15.140 --> 26:16.140
得到所有的配置

26:16.140 --> 26:18.140
那么这里有一些默认配置

26:18.140 --> 26:20.140
我们这里就可以定一个辨量

26:20.140 --> 26:22.140
option

26:22.140 --> 26:23.140
等于什么呢

26:23.140 --> 26:24.140
getoption

26:24.140 --> 26:26.140
调用这个函数得到所有的配置

26:26.140 --> 26:29.460
得到配置

26:29.460 --> 26:30.460
得到配置

26:30.460 --> 26:31.460
好 那么这个配置里边

26:31.460 --> 26:32.460
有哪些东西可以显的

26:32.460 --> 26:34.460
首先我们可以定一个默认配置

26:34.460 --> 26:36.460
default

26:36.460 --> 26:37.460
option

26:37.460 --> 26:39.460
默认配置里边不是有history吗

26:39.460 --> 26:40.460
对不对

26:40.460 --> 26:42.460
history我们配置为啥呢

26:42.460 --> 26:43.460
配置为啥呢

26:43.460 --> 26:44.460
history

26:44.460 --> 26:46.460
如果说你这个opt

26:46.460 --> 26:47.460
就这个

26:47.460 --> 26:49.460
你传到参数里边

26:49.460 --> 26:51.460
有history

26:51.460 --> 26:52.460
那就ok

26:52.460 --> 26:53.460
我就有使用你的

26:53.460 --> 26:55.460
如果说你没有给我传递history

26:55.460 --> 26:57.460
那么我就使用一个什么

26:57.460 --> 26:58.460
使用一个

26:58.460 --> 27:02.790
我们来自于 import

27:02.790 --> 27:03.790
大家能听懂吗

27:03.790 --> 27:04.790
能不能跟上

27:04.790 --> 27:06.790
这里一个东西肯定比较多

27:06.790 --> 27:08.790
create

27:08.790 --> 27:10.790
harsie history

27:10.790 --> 27:11.790
如果说你没有传递

27:11.790 --> 27:12.790
我就使用create

27:12.790 --> 27:13.790
harsie history

27:13.790 --> 27:15.790
它就是这样做的

27:15.790 --> 27:17.790
就是这样做的

27:17.790 --> 27:19.790
好 最后我把这个

27:19.790 --> 27:21.790
default options

27:21.790 --> 27:22.790
返回

27:22.790 --> 27:24.790
或者就不叫default options

27:24.790 --> 27:26.790
就叫options

27:26.790 --> 27:27.790
直接把options返回

27:27.790 --> 27:28.790
对吧

27:28.790 --> 27:30.790
那么这里就可以把保存到配置里边

27:30.790 --> 27:31.790
对不对

27:31.790 --> 27:32.790
保存到配置里边了

27:32.790 --> 27:33.790
过后我们在这里

27:33.790 --> 27:34.790
是不是就直接可以使用

27:34.790 --> 27:35.790
harsie来自于哪呢

27:35.790 --> 27:36.790
来自于options

27:36.790 --> 27:37.790
history

27:37.790 --> 27:39.790
它如果说没有传递的话

27:39.790 --> 27:40.790
还会使用默认字

27:40.790 --> 27:41.790
对吧

27:41.790 --> 27:42.790
就这么简单

27:42.790 --> 27:43.790
保存

27:43.790 --> 27:45.790
看一下

27:45.790 --> 27:46.790
你看

27:46.790 --> 27:47.790
那么现在就是多了一个这个东西的

27:47.790 --> 27:48.790
因为我们创建了

27:48.790 --> 27:49.790
harsie history

27:49.790 --> 27:50.790
还没

27:50.790 --> 27:51.790
好 那么现在呢

27:51.790 --> 27:53.790
subscription也注册上了

27:53.790 --> 27:54.790
就这个东西

27:54.790 --> 27:56.790
它也运行了吗

27:56.790 --> 27:57.790
运行了

27:57.790 --> 27:58.790
运行了

27:58.790 --> 27:59.790
好 那么现在我们试一下

27:59.790 --> 28:01.790
当窗口尺寸变化的时候

28:01.790 --> 28:02.790
你看 是不是

28:02.790 --> 28:03.790
会监听到

28:03.790 --> 28:05.790
当我们路由变化的时候

28:05.790 --> 28:07.790
对吧 是不是有减少

28:07.790 --> 28:08.790
对不对

28:08.790 --> 28:09.790
就注册到了

28:09.790 --> 28:10.790
对吧

28:10.790 --> 28:11.790
就它的实现原理

28:11.790 --> 28:14.790
好 这就是subscription

28:14.790 --> 28:15.790
是不是也搞定了

28:15.790 --> 28:17.790
好 那么这些可能有两个任务

28:17.790 --> 28:18.790
第一个任务呢

28:18.790 --> 28:20.790
我们要搞定模型里边的所有东西

28:20.790 --> 28:21.790
是不是全部搞定了

28:21.790 --> 28:22.790
现在

28:22.790 --> 28:23.790
已经全部搞定了

28:23.790 --> 28:26.790
好 接下来还有一个任务

28:26.790 --> 28:30.790
就是要把路由放到窗户里边

28:30.790 --> 28:31.790
就是路由

28:31.790 --> 28:32.790
我们现在没有

28:32.790 --> 28:33.790
对吧

28:33.790 --> 28:34.790
没有

28:34.790 --> 28:35.790
我们要把路由

28:35.790 --> 28:36.790
要给它放到窗户里边

28:36.790 --> 28:37.790
那怎么放呢

28:37.790 --> 28:39.790
是不是要利用那个connected

28:39.790 --> 28:40.790
那个cool 对吧

28:40.790 --> 28:42.790
是不是要利用那个cool

28:42.790 --> 28:44.790
来吧

28:44.790 --> 28:46.790
from 哪个cool

28:46.790 --> 28:48.790
connected red rotor那个cool

28:48.790 --> 28:49.790
回忆一下啊

28:49.790 --> 28:50.790
这个cool就是说

28:50.790 --> 28:51.790
所以说我们为什么要学

28:51.790 --> 28:52.790
之前的知识呢

28:52.790 --> 28:54.790
你不学之前的知识就很难理解

28:54.790 --> 28:56.790
这到底是怎么去玩的

28:56.790 --> 28:57.790
它这个cool里边

28:57.790 --> 28:58.790
是不是提供了三个东西

28:58.790 --> 29:00.790
一个是reducer

29:00.790 --> 29:01.790
对不对

29:01.790 --> 29:02.790
一个是叫什么

29:02.790 --> 29:03.790
connected rotor

29:03.790 --> 29:04.790
这是个函数

29:04.790 --> 29:05.790
来产生reducer

29:05.790 --> 29:06.790
还有一个是什么呢

29:06.790 --> 29:08.790
还有一个是

29:08.790 --> 29:10.790
那个叫做

29:10.790 --> 29:12.790
made aware

29:12.790 --> 29:14.790
叫rotor

29:14.790 --> 29:15.790
made aware

29:15.790 --> 29:16.790
是不是这个玩意儿

29:16.790 --> 29:17.790
这个呢

29:17.790 --> 29:18.790
会产生一个路由中间键

29:18.790 --> 29:19.790
对不对

29:19.790 --> 29:20.790
是不是这两个玩意儿

29:20.790 --> 29:21.790
好 来吧

29:21.790 --> 29:22.790
我们首先呢

29:22.790 --> 29:23.790
要产生一个reducer

29:23.790 --> 29:24.790
那么我们找一下

29:24.790 --> 29:25.790
我们之前的函数

29:25.790 --> 29:26.790
我们之前写过这么一个函数

29:26.790 --> 29:28.790
就得到一些额外的reducer

29:28.790 --> 29:30.790
得到一些额外的reducer

29:30.790 --> 29:31.790
看一下

29:31.790 --> 29:34.420
get extra

29:34.420 --> 29:35.420
reducer 是对吧

29:35.420 --> 29:36.420
那么我们这里是不是

29:36.420 --> 29:38.420
再加一个reducer

29:38.420 --> 29:39.420
这个reducer是不是来自于

29:39.420 --> 29:40.420
看一下

29:40.420 --> 29:42.420
这个reducer来自于这个

29:42.420 --> 29:43.420
connected rotor

29:43.420 --> 29:44.420
这个函数

29:44.420 --> 29:45.420
你给它传一个history对象

29:45.420 --> 29:47.420
拿来是不是Obsins

29:47.420 --> 29:48.420
第二history

29:48.420 --> 29:49.420
对吧

29:49.420 --> 29:51.420
之前学过的

29:51.420 --> 29:52.420
所以说之前学的

29:52.420 --> 29:53.420
你一定要去练习

29:53.420 --> 29:54.420
不然的话一点人影响都没有

29:54.420 --> 29:56.420
那么我们把这个reducer放在

29:56.420 --> 29:57.420
看一下

29:57.420 --> 29:58.420
那么现在呢

29:58.420 --> 29:59.420
reducer就有了

29:59.420 --> 30:00.420
reducer就有了

30:00.420 --> 30:02.740
State

30:02.740 --> 30:04.740
那么现在的routine里边

30:04.740 --> 30:05.740
你看

30:05.740 --> 30:06.740
reducer就有了

30:06.740 --> 30:07.740
对吧

30:07.740 --> 30:08.740
有了吧

30:08.740 --> 30:09.740
好 这个就没问题了

30:09.740 --> 30:11.740
好 都放进去了

30:11.740 --> 30:13.740
然后还有啥呢

30:13.740 --> 30:14.740
还有啥呢

30:14.740 --> 30:15.740
还有就是

30:15.740 --> 30:16.740
我们要给它加上

30:16.740 --> 30:18.740
就是一个中间键对不对

30:18.740 --> 30:19.740
那么我们找一找

30:19.740 --> 30:20.740
我们之前的写的函数

30:20.740 --> 30:21.740
有一个地方是

30:21.740 --> 30:22.740
我们在加中间键

30:22.740 --> 30:23.740
你看一下

30:23.740 --> 30:26.740
加中间键的函数在哪呢

30:26.740 --> 30:28.740
跑到去了

30:28.740 --> 30:29.740
get metawel

30:29.740 --> 30:30.740
那么这里呢

30:30.740 --> 30:31.740
我们刚才呢

30:31.740 --> 30:32.740
加了这么一个中间键

30:32.740 --> 30:33.740
对不对

30:33.740 --> 30:34.740
现在我们再加一个中间键

30:34.740 --> 30:36.740
再加个中间键

30:36.740 --> 30:37.740
加什么中间键呢

30:37.740 --> 30:38.740
就是调用那个函数

30:38.740 --> 30:39.740
叫做

30:39.740 --> 30:42.740
rotermetawel

30:42.740 --> 30:43.740
这个函数

30:43.740 --> 30:44.740
它是不是要传一个history

30:44.740 --> 30:45.740
又来呗

30:45.740 --> 30:46.740
Obsync是

30:46.740 --> 30:48.740
Obsync是

30:48.740 --> 30:49.740
history

30:49.740 --> 30:50.740
是传进去

30:50.740 --> 30:51.740
对吧

30:51.740 --> 30:52.740
是不是加入了这个中间键

30:52.740 --> 30:53.740
加入进去了

30:53.740 --> 30:54.740
对吧

30:54.740 --> 30:56.740
那么保存

30:56.740 --> 30:57.740
加进去了

30:57.740 --> 31:00.740
那么先到至此为止呢

31:00.740 --> 31:01.740
至此为止

31:01.740 --> 31:03.740
我们是不是就把那个

31:04.740 --> 31:06.740
就是把那个就是

31:06.740 --> 31:08.740
这个库应用进去了

31:08.740 --> 31:09.740
那么我们来试一下

31:09.740 --> 31:10.740
来试一下

31:10.740 --> 31:12.740
我们之前咋写的呢

31:12.740 --> 31:13.740
这个rotermetawel

31:13.740 --> 31:14.740
这里边

31:14.740 --> 31:15.740
我们是不是要搞弱

31:15.740 --> 31:17.740
我们来写一下之前的写法

31:17.740 --> 31:18.740
forum

31:18.740 --> 31:20.740
我们自己的写的dba

31:20.740 --> 31:22.740
dba里边一个rotermetawel

31:22.740 --> 31:23.740
rotermetawel里边一个什么

31:23.740 --> 31:25.740
Rotermetawel

31:25.740 --> 31:27.740
Rotermetawel

31:27.740 --> 31:29.740
我们自己之前咋写的

31:29.740 --> 31:30.740
这样写的

31:30.740 --> 31:31.740
这里边一个函数

31:31.740 --> 31:32.740
它给我

31:32.740 --> 31:34.740
传入一个参数

31:34.740 --> 31:35.740
传入一个参数

31:35.740 --> 31:36.740
就是history

31:36.740 --> 31:37.740
传入一个参数

31:37.740 --> 31:40.740
然后呢我这里写上

31:40.740 --> 31:42.740
rotermetawel

31:42.740 --> 31:43.740
对大个实点

31:43.740 --> 31:44.740
connected

31:44.740 --> 31:45.740
rotermetawel

31:45.740 --> 31:46.740
是不是这个组件

31:46.740 --> 31:47.740
这个组件里边

31:47.740 --> 31:48.740
它有一个属性

31:48.740 --> 31:49.740
就是history

31:49.740 --> 31:51.740
把它传定为history

31:51.740 --> 31:52.740
对吧

31:52.740 --> 31:53.740
传定过去

31:53.740 --> 31:54.740
然后呢我们这里呢

31:54.740 --> 31:55.740
使用那个

31:56.740 --> 31:58.740
一个U L L I

31:58.740 --> 32:00.740
还倒入lamblink

32:01.740 --> 32:03.740
还有倒入road

32:03.740 --> 32:05.740
倒入东西还蛮多的

32:05.740 --> 32:06.740
差不多了

32:06.740 --> 32:08.740
lamblink写一下

32:08.740 --> 32:12.240
这里是乘12

32:12.240 --> 32:17.260
这里边是倒首页

32:17.260 --> 32:20.260
这里边是倒技术器

32:20.260 --> 32:21.260
技术器

32:21.260 --> 32:22.260
那么这里写个to

32:22.260 --> 32:23.260
因为这些东西

32:23.260 --> 32:25.260
就是我就是远方不动的

32:25.260 --> 32:26.260
把那个

32:26.260 --> 32:27.260
rexrotermetawel

32:27.260 --> 32:28.260
东西倒出就完事了

32:28.260 --> 32:30.260
还倒出一个switch

32:30.260 --> 32:32.260
对吧都有

32:32.260 --> 32:33.260
好 下面呢

32:33.260 --> 32:34.260
我们写上一个div

32:34.260 --> 32:36.260
div里边写上

32:36.260 --> 32:37.260
再写一个组件

32:37.260 --> 32:38.260
tongue key

32:40.260 --> 32:41.260
return

32:41.260 --> 32:43.260
vc首页

32:44.260 --> 32:45.260
好 这边

32:45.260 --> 32:46.260
我的鼠标了

32:47.260 --> 32:48.260
我的鼠标了

32:49.260 --> 32:50.260
我的天

32:50.260 --> 32:51.260
我的鼠标了

32:53.260 --> 32:54.260
这里

32:54.260 --> 32:55.260
我们这里就写两个road

32:56.260 --> 32:57.260
一个road

32:57.260 --> 32:59.260
匹配路径

32:59.260 --> 33:00.260
路径为counter

33:01.260 --> 33:02.260
component

33:03.260 --> 33:04.260
为什么呢

33:04.260 --> 33:05.260
为那个

33:06.260 --> 33:07.260
首页

33:08.260 --> 33:09.260
另外一个呢

33:09.260 --> 33:10.260
匹配的是

33:10.260 --> 33:11.260
首页

33:11.260 --> 33:12.260
上面的匹配的是counter

33:13.260 --> 33:14.260
外面套一个switch

33:18.910 --> 33:19.910
这个放进去

33:22.480 --> 33:23.480
来 试一下

33:23.480 --> 33:24.480
保存

33:25.480 --> 33:26.480
他现在还抱错了

33:26.480 --> 33:27.480
他说什么呢

33:27.480 --> 33:30.480
他说你给这个组件的history

33:30.480 --> 33:31.480
就这个玩意了

33:31.480 --> 33:32.480
它是一个loud

33:33.480 --> 33:34.480
它是一个undefend

33:35.480 --> 33:36.480
它是一个undefend

33:36.480 --> 33:38.480
那么这个东西怎么办呢

33:38.480 --> 33:40.480
所以说我们在启动的时候

33:40.480 --> 33:42.480
不是要调用一个函数吗

33:42.480 --> 33:44.480
启动的时候不是要调用一个函数吗

33:44.480 --> 33:45.480
那么我们看一下

33:45.480 --> 33:46.480
我们之前写的

33:46.480 --> 33:47.480
在启动的时候

33:47.480 --> 33:49.480
不是要调用一个函数吗

33:49.480 --> 33:50.480
start的时候

33:50.480 --> 33:51.480
你看

33:51.480 --> 33:52.480
我们这里呢

33:55.480 --> 33:56.480
在这

33:56.480 --> 33:58.480
在配置路由的时候

33:58.480 --> 34:00.480
我们不是把它保存起来了吗

34:00.480 --> 34:01.480
那么到时候

34:01.480 --> 34:02.480
我们在启动的时候

34:02.480 --> 34:04.480
是不是Render的时候

34:04.480 --> 34:05.480
你看Render的时候

34:05.480 --> 34:07.480
我们再调用这个函数

34:07.480 --> 34:08.480
对吧 来调用这个函数

34:08.480 --> 34:09.480
那么调用这个函数的时候

34:09.480 --> 34:11.480
你要传一个参数进去

34:11.480 --> 34:12.480
这个参数是个对象

34:12.480 --> 34:14.480
我们之前看到过的

34:14.480 --> 34:15.480
它这里面就两个属性

34:15.480 --> 34:16.480
一个是history

34:16.480 --> 34:17.480
这个简单

34:17.480 --> 34:19.480
来自为什么option is the history

34:19.480 --> 34:20.480
就是你给我传递到history

34:20.480 --> 34:21.480
我给你传进去

34:21.480 --> 34:22.480
还有一个是app

34:22.480 --> 34:23.480
这个也很简单

34:23.480 --> 34:25.480
就是把app对象本身传进去

34:25.480 --> 34:26.480
就没了

34:26.480 --> 34:27.480
就把这两个东西传给它

34:27.480 --> 34:29.480
它无非就是传这两个东西进去

34:29.480 --> 34:31.480
然后这个函数

34:31.480 --> 34:32.480
把这个对象传进去

34:32.480 --> 34:34.480
然后这个函数返回的是一个

34:34.480 --> 34:35.480
最终的结果

34:35.480 --> 34:36.480
你把它宣传出来就完事了

34:36.480 --> 34:38.480
好 保存

34:38.480 --> 34:39.480
那么现在

34:39.480 --> 34:41.480
什么

34:41.480 --> 34:43.480
它说

34:43.480 --> 34:45.480
它说

34:45.480 --> 34:49.480
无法找到rotor reducer

34:49.480 --> 34:51.480
instead tree

34:53.480 --> 34:55.480
明白了

34:55.480 --> 34:56.480
它是这个意思

34:56.480 --> 34:57.480
它就说

34:57.480 --> 34:58.480
它默认情况下

34:58.480 --> 34:59.480
找的是啥呢

34:59.480 --> 35:02.480
找的是这个

35:02.480 --> 35:05.050
看一下

35:05.050 --> 35:09.050
在middleware这里

35:09.050 --> 35:12.050
在reducer这里

35:12.050 --> 35:14.050
它默认情况下找的是这个

35:14.050 --> 35:15.050
rotor

35:15.050 --> 35:17.050
找的是这个东西

35:17.050 --> 35:18.050
但是呢

35:18.050 --> 35:20.050
我们刚才用的是rotin对吧

35:20.050 --> 35:21.050
rotin

35:21.050 --> 35:23.050
这里还有错

35:23.050 --> 35:25.050
还有错什么

35:25.050 --> 35:27.050
you should not use navlink

35:27.050 --> 35:29.050
outside rotor

35:29.050 --> 35:31.050
我们看一下

35:31.050 --> 35:33.490
它说我们在

35:33.490 --> 35:35.490
我们的 navlink

35:35.490 --> 35:37.490
用在了rotor之外

35:37.490 --> 35:40.120
没有啊

35:40.120 --> 35:42.120
我们用在这里边的

35:42.120 --> 35:44.120
connected rotor里边的

35:44.120 --> 35:46.120
它为什么会说我用在

35:46.120 --> 35:48.120
rotor之外呢

35:49.120 --> 35:51.120
这个错误的话

35:51.120 --> 35:54.120
应该是版本的原因吧

35:54.120 --> 35:56.120
因为diva它依赖的东西

35:56.120 --> 35:58.120
可能版本有点旧

35:58.120 --> 36:00.120
有些旧版本在我们的

36:00.120 --> 36:02.120
dodmages里边

36:02.120 --> 36:04.120
我们可能引用了一些旧版本的东西

36:04.120 --> 36:05.120
刚才这样子

36:05.120 --> 36:07.120
我把这个裤就直接删掉了

36:07.120 --> 36:08.120
直接删掉了

36:08.120 --> 36:10.120
dodmages是全部删掉

36:10.120 --> 36:11.120
然后呢

36:11.120 --> 36:12.120
我们再拍个影片

36:12.120 --> 36:13.120
把diva去掉

36:13.120 --> 36:15.120
我们用新版本的

36:15.120 --> 36:16.120
因为diva里边

36:16.120 --> 36:18.120
它可能依赖了一些旧版本的东西

36:18.120 --> 36:20.120
因为它名字一样嘛

36:20.120 --> 36:21.120
两个裤的名字一样

36:21.120 --> 36:23.120
我们可能导入了一些旧版本的东西

36:23.120 --> 36:25.120
跟新版本混合在一起了

36:25.120 --> 36:28.120
就是前面的版本控制也挺麻烦的

36:28.120 --> 36:29.120
真的挺麻烦

36:30.120 --> 36:31.120
看删掉啊

36:31.120 --> 36:32.120
删掉

36:32.120 --> 36:33.120
然后拍给你接受里边

36:33.120 --> 36:35.120
我们把diva去掉

36:35.120 --> 36:36.120
diva去掉

36:36.120 --> 36:38.120
咱们全部用自己最新的裤

36:38.120 --> 36:39.120
我们自己做

36:39.120 --> 36:40.120
不用它的了

36:41.120 --> 36:42.120
然后我们这里

36:42.120 --> 36:44.120
在这里停止了

36:44.120 --> 36:45.120
要停止

36:45.120 --> 36:46.120
重新安装一下

36:46.120 --> 36:47.120
一二十一十多

36:47.120 --> 36:49.120
不要diva那一套东西

36:49.120 --> 36:50.120
应该是版本的原因啊

36:50.120 --> 36:51.120
应该是版本的原因

36:51.120 --> 36:52.120
因为我们在代码呢

36:52.120 --> 36:54.120
代码写的是没有问题的

36:54.120 --> 36:55.120
写没有问题的

36:55.120 --> 36:57.120
他告诉你的错误的意思

36:57.120 --> 36:58.120
就是说

36:58.120 --> 36:59.120
他说你这个namelink

36:59.120 --> 37:01.120
跑到rotor外面去了

37:01.120 --> 37:02.120
但是实际上是没有的

37:02.120 --> 37:04.120
因为我们知道这个东西

37:04.120 --> 37:05.120
这个组件他会在内部

37:05.120 --> 37:06.120
给你提供一个rotor

37:06.120 --> 37:08.120
提供一个rotor上下文

37:08.120 --> 37:09.120
所以说

37:09.120 --> 37:13.120
实际上是没有跑到外面去了

37:13.120 --> 37:15.120
那么可能是版本的原因造成的

37:16.120 --> 37:17.120
因为我们知道

37:17.120 --> 37:20.120
就是原生的diva里边

37:20.120 --> 37:21.120
还安装了一些裤

37:21.120 --> 37:23.120
版本可能稍微低一点

37:24.120 --> 37:25.120
以后的在污蔑结石里边

37:25.120 --> 37:27.120
就不会存在这样的问题了

37:27.120 --> 37:29.120
因为污蔑结石就是一个极大存在

37:29.120 --> 37:31.120
把全部整合潜在一起了

37:31.120 --> 37:33.120
光用diva这个裤

37:33.120 --> 37:34.120
它可能有些版本

37:34.120 --> 37:35.120
低版本

37:35.120 --> 37:38.120
导致这个问题也挺反正的

37:38.120 --> 37:46.870
咱们再运行出来

37:46.870 --> 37:48.870
看一下

37:48.870 --> 37:49.870
应该是版本的原因

37:49.870 --> 37:51.870
应该是版本的原因

37:51.870 --> 38:03.470
我们再运行

38:03.470 --> 38:04.470
看一下

38:04.470 --> 38:12.220
就没问题了

38:12.220 --> 38:13.220
对吧

38:13.220 --> 38:14.220
那就是版本的原因

38:14.220 --> 38:15.220
版本的原因造成的

38:15.220 --> 38:16.220
那么这里就没问题了

38:16.220 --> 38:17.220
我们来看一下

38:17.220 --> 38:19.220
然后我们在大个石里边

38:19.220 --> 38:20.220
你看现在是不是出发了

38:20.220 --> 38:22.220
然后我们的状态是不是保存到这了

38:22.220 --> 38:23.220
对不对

38:23.220 --> 38:24.220
保存到这了

38:24.220 --> 38:25.220
看没

38:25.220 --> 38:26.220
保存到这了

38:26.220 --> 38:28.220
然后我们再点技术器

38:28.220 --> 38:29.220
点首页点技术器

38:29.220 --> 38:30.220
对吧

38:30.220 --> 38:31.220
点技术器点首页

38:31.220 --> 38:32.220
你看

38:32.220 --> 38:33.220
是不是都有变化

38:33.220 --> 38:34.220
对不对

38:34.220 --> 38:35.220
都有变化

38:35.220 --> 38:36.220
看没

38:36.220 --> 38:37.220
对吧

38:37.220 --> 38:38.220
保存到这了

38:38.220 --> 38:40.220
这就是这一块

38:40.220 --> 38:42.220
咱们写好了

38:42.220 --> 38:44.220
然后还有啥呢

38:44.220 --> 38:46.220
路由这一块是不是就搞定了

38:46.220 --> 38:47.220
对吧

38:47.220 --> 38:48.220
路由这一块就搞定了

38:48.220 --> 38:50.220
刚才我看那个技术

38:50.220 --> 38:52.220
没问题

38:52.220 --> 38:53.220
有点

38:53.220 --> 38:54.220
为什么多了

38:54.220 --> 38:55.220
我看一下

38:55.220 --> 38:58.220
点首页

38:58.220 --> 38:59.220
点技术器

38:59.220 --> 39:01.220
减了6

39:01.220 --> 39:02.220
减了6

39:02.220 --> 39:03.220
它触发了太多次了

39:03.220 --> 39:04.220
这个decrease

39:04.220 --> 39:06.220
每一次location迁击过后

39:06.220 --> 39:07.220
它触发了两次

39:07.220 --> 39:08.220
你看没

39:08.220 --> 39:09.220
它触发了两次

39:09.220 --> 39:11.220
这里还触发了三次

39:11.220 --> 39:13.220
这里又触发了一次

39:13.220 --> 39:14.220
这是怎么回事

39:14.220 --> 39:16.220
咱们把这个bug先解决了

39:16.220 --> 39:17.220
先解决这个bug

39:17.220 --> 39:18.220
我们先从最开始

39:18.220 --> 39:19.220
最开始来运行一次

39:19.220 --> 39:20.220
刷新

39:20.220 --> 39:22.220
一开始没有触发

39:22.220 --> 39:23.220
没有触发

39:23.220 --> 39:25.220
然后我们这里点技术器

39:25.220 --> 39:26.220
点技术器

39:26.220 --> 39:28.220
那么这里触发了一次

39:28.220 --> 39:29.220
触发了一次

39:29.220 --> 39:31.220
变成复一

39:31.220 --> 39:32.220
再点技术器

39:32.220 --> 39:33.220
复二

39:33.220 --> 39:35.220
因为我们之前注册够这么一个东西

39:35.220 --> 39:38.220
就是用了一个history nation

39:38.220 --> 39:39.220
对吧

39:39.220 --> 39:40.220
用了一个history nation

39:40.220 --> 39:42.220
监听它

39:42.220 --> 39:43.220
它的变化

39:43.220 --> 39:45.220
然后我们再点首页

39:45.220 --> 39:47.220
点首页

39:47.220 --> 39:49.220
我们看点首页过后

39:49.220 --> 39:51.220
点首页过后触发了一次

39:51.220 --> 39:52.220
触发了一次

39:52.220 --> 39:53.220
它先触发了一次

39:53.220 --> 39:54.220
decrease

39:54.220 --> 39:56.220
然后再触发这个

39:56.220 --> 39:57.220
然后再触发这个

39:57.220 --> 39:59.220
这个就有点奇怪了

39:59.220 --> 40:01.220
这个就有点奇怪了

40:01.220 --> 40:03.220
咱们看一下

40:03.220 --> 40:06.220
为什么这里会触发两次

40:06.220 --> 40:07.220
我们在这里输出一下

40:07.220 --> 40:09.220
这里肯定是只能输出一个

40:09.220 --> 40:10.220
只能输出一次

40:10.220 --> 40:12.220
它只会监听一次

40:12.220 --> 40:13.220
无论怎么点

40:13.220 --> 40:15.220
它只会监听一次

40:15.220 --> 40:16.220
然后我们看一下这里

40:16.220 --> 40:20.220
为什么会触发两次

40:20.220 --> 40:21.220
abc

40:21.220 --> 40:25.880
我们看一下abc

40:25.880 --> 40:26.880
nation

40:26.880 --> 40:30.880
nation这里

40:30.880 --> 40:32.880
这个函数它触发了多次

40:32.880 --> 40:34.880
这个函数它触发了多次

40:34.880 --> 40:35.880
我看一下

40:35.880 --> 40:37.880
点首页触发了三次

40:37.880 --> 40:40.880
点技术器又触发了三次

40:40.880 --> 40:41.880
再点技术器

40:41.880 --> 40:42.880
触发一次

40:42.880 --> 40:44.880
这是怎么回事呢

40:44.880 --> 40:46.880
我们想一想

40:46.880 --> 40:49.880
想一想这一块是怎么回事

40:49.880 --> 40:51.880
这个东西应该跟那个

40:51.880 --> 40:54.880
connectedrexrouter里面有关系

40:54.880 --> 40:56.880
它里面可能会

40:56.880 --> 40:59.880
它可能会有多次铺系

40:59.880 --> 41:00.880
可能会有多次铺系

41:00.880 --> 41:02.880
我们这里打印一下

41:02.880 --> 41:04.880
打印一下history

41:04.880 --> 41:07.580
darnance

41:07.580 --> 41:08.580
打印一下这个

41:08.580 --> 41:09.580
点首页

41:09.580 --> 41:15.770
50

41:15.770 --> 41:17.770
打印history对象

41:17.770 --> 41:18.770
history

41:18.770 --> 41:19.770
打印了三次

41:19.770 --> 41:22.770
nation为50

41:22.770 --> 41:24.770
长度为50

41:24.770 --> 41:26.770
重新开一个

41:26.770 --> 41:27.770
重新开一个网易

41:27.770 --> 41:31.870
从头开始来

41:31.870 --> 41:33.870
看一下这个坑是什么回事

41:33.870 --> 41:35.870
点首页

41:35.870 --> 41:37.870
两个

41:37.870 --> 41:41.870
它真的是给你触发了多次铺系

41:41.870 --> 41:45.870
它这个地方给你触发了多次铺系

41:46.870 --> 41:48.870
这个地方

41:48.870 --> 41:50.870
它可能没有用原来的

41:50.870 --> 41:52.870
connectedrexrouter

41:52.870 --> 41:54.870
这应该是新版本里面

41:54.870 --> 41:57.870
connectedrouter里面的一个bug

41:57.870 --> 41:59.870
它触发了多次nation

41:59.870 --> 42:02.870
也就是说我们改变地址的时候

42:02.870 --> 42:04.870
它实际上给你铺系了很多次

42:04.870 --> 42:05.870
它给你铺系了很多次

42:05.870 --> 42:06.870
你看一下

42:06.870 --> 42:07.870
你看没

42:07.870 --> 42:09.870
是不是给你铺系了很多次

42:09.870 --> 42:14.500
这个东西就不好改了

42:14.500 --> 42:15.500
不好改了

42:15.500 --> 42:17.500
它那个铺里面的问题

42:17.500 --> 42:19.500
是这个铺里面的问题

42:19.500 --> 42:23.500
就是connectedrexrouter那个铺里面的问题

42:23.500 --> 42:25.500
是它这个问题导致的

42:25.500 --> 42:27.500
它给你触发了很多次这个东西

42:27.500 --> 42:29.500
那这个东西没法改了

42:29.500 --> 42:31.500
可能以前rex

42:31.500 --> 42:33.500
就是以前它的9版本的铺里面

42:33.500 --> 42:34.500
没有这个问题

42:34.500 --> 42:36.500
新版本里面铺它有这个问题

42:36.500 --> 42:39.500
它给你触发了多次这件事情

42:39.500 --> 42:41.500
我们就不管它了

42:41.500 --> 42:43.500
因为这是它那个铺里面的问题

42:43.500 --> 42:44.500
如果说我们用

42:44.500 --> 42:46.500
这个代码也拿不过来了

42:46.500 --> 42:49.500
如果说用之前我们自己熟写的那个就是

42:49.500 --> 42:51.500
connectedrexrouter的话

42:51.500 --> 42:53.500
都不会有这样的问题

42:53.500 --> 42:54.500
所以说有的时候

42:54.500 --> 42:57.500
一些第三方库它写的并不好

42:57.500 --> 42:59.500
不要认为这是

42:59.500 --> 43:01.500
觉得别人也写的第三方库写好了

43:01.500 --> 43:03.500
一定是一个完美无缺的

43:03.500 --> 43:05.500
我告诉你前端这个行业

43:05.500 --> 43:07.500
好多好多第三方库

43:07.500 --> 43:09.500
有各种各样的问题

43:09.500 --> 43:10.500
各种各样的坑

43:10.500 --> 43:11.500
包括阿迪

43:11.500 --> 43:13.500
阿迪这边库各种问题

43:13.500 --> 43:15.500
后面会学那个Andy

43:15.500 --> 43:17.500
Andy就是一个UI库

43:17.500 --> 43:19.500
你会发现它里面各种坑

43:19.500 --> 43:21.500
它这个地方写的不好

43:21.500 --> 43:24.500
它给你触发了多次那个铺里面

43:24.500 --> 43:26.500
咱们就不去管它了

43:26.500 --> 43:27.500
因为是它那个库的问题

43:27.500 --> 43:28.500
我也不好改

43:28.500 --> 43:29.500
好吧

43:29.500 --> 43:30.500
我们把这个注射掉

43:30.500 --> 43:34.900
好然后这一块就搞定了

43:34.900 --> 43:35.900
我们这里一块

43:35.900 --> 43:37.900
这一块就是

43:37.900 --> 43:38.900
模型

43:38.900 --> 43:41.900
首先我们模型里边全部搞定了

43:41.900 --> 43:42.900
这些东西全部搞定了

43:43.900 --> 43:45.900
另外我们的就是路由

43:45.900 --> 43:46.900
连接到仓库

43:46.900 --> 43:47.900
所以也搞定了

43:47.900 --> 43:49.900
那么最后只剩下配置了

43:49.900 --> 43:50.900
只剩下配置了

43:50.900 --> 43:51.900
咱们还是下节课吧

43:51.900 --> 43:53.900
下节课来讲这个配置

