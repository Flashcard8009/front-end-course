WEBVTT

00:04.340 --> 00:08.940
这些看了 咱们来实现link 啊 实现link 逐渐

00:09.540 --> 00:20.140
不要这个笔记了 很简单啊 两个link 逐渐 就是link 逐渐干嘛呢 就是提供 a 元素 对吧 提供 a 元素可以跳转的超链接啊 可以跳转的超链接

00:20.540 --> 00:32.460
提供这么一个东西 咱们来写一下吧啊 还是老规矩 我们来用一下这个link 逐渐 呃 比方说吧 我们就在这里呢 把这个东西去掉啊 这个某位置router 去掉啊

00:33.020 --> 00:41.740
稍微简单的写一下 主要是看他的组件结构是什么样子啊 这里呢 我们也不要了 不要了 配级一 配级二 两个配级啊 那么这里呢 导入一个link

00:42.700 --> 00:43.340
导入一个link

00:45.340 --> 00:55.580
好 然后呢 我们这里写上link 逐渐啊 两个link 呃 ul li 嘛 呈于二 呃 然后呢 link 啊 link

00:56.580 --> 01:06.020
啊 link 呢 它里边一个属性 属性呢 是to to 的纸呢 等于配级啊 这里写个dolar 啊 link 里边的内容呢

01:07.580 --> 01:15.660
挑转到页面dolar ok 承证出来啊 好就写两个link啊 写两个link 保存 看一下吧

01:16.540 --> 01:23.180
是吧 说可以跳转了 对吧 就可以跳转了 好 那么这个是怎么来做到的 其实非常简单 他就是给你选两的一个 a 元素

01:23.660 --> 01:28.900
你看吧 我们看一下组件结构啊 在组件结构里边 我们往下找找个link

01:29.700 --> 01:38.260
link 组件 你看一下他是不是有上下文 对吧 用到了上下文 然后呢 主要是主要的目的呢 是要用到上下文里边的history 属性

01:38.940 --> 01:44.940
history 然后呢 一个a 元素 点击元素的挑转就完了 没了 就这么简单啊 就这么简单

01:46.100 --> 01:50.580
好 然后呢 我来写一下啊 这个link 非常非常好写 那么link 写到哪个枯里面呢

01:50.940 --> 02:00.540
link 呢 我们是要放到这个枯 rex rotor dorm 这个枯 为什么呢 因为它是跟页面相关的啊 那么这个rex rotor dorm 呢 都是跟页面相关的处理

02:00.980 --> 02:08.540
好 所以说我们把他放到这个枯里边 赶紧上这么一个link 啊 link 的解释啊 这里肯定要导出一个组件啊 肯定要导出一个组件

02:09.820 --> 02:12.620
嗯 导出什么呢 就导出一个函数组件吗啊 a

02:13.540 --> 02:17.780
fc 导出一个函数组件link 好 然后呢 在index里边把那个link导出

02:18.020 --> 02:33.060
啊 把这个link 啊 导出 好 到这边来 这个link 组件了 他就是选了一个a元数 不过a元数里边呢 他要进行挑转而已啊 仅此而已 好 来吧

02:34.020 --> 02:41.300
咱们来写一下啊 这里边呢 是不是要要选了一个a元数 对吧 要选了个a元数 那么第一个问题就出现了

02:42.300 --> 02:54.020
这个a元数里边的riff属性应该写啥呢 这里应该写啥呢 riff属性 是不是就是link to这个属性 对吧 就是link to这个属性

02:54.420 --> 03:05.100
所以说呢 我们这个riff这个属性呢 来自于什么 来自于这 来自于probs 2 对吧 2这个属性 啊 选了这么一个属性

03:05.500 --> 03:12.380
然后呢 a元数的内容呢 内容是啥呢 内容是不是就是chosen属性 对吧probs第二

03:13.260 --> 03:15.020
就是probs第二chosen

03:16.700 --> 03:22.780
啊 如果说我如果说我不做什么不刷新渲染的话 那么就写完了 就已经写完了

03:23.420 --> 03:31.740
好 那么现在看一下啊 我在这里导入这个rexroute 我们自己写的rexroute里面导入这个link元数 你看一下就已经出来了 效果

03:31.980 --> 03:37.660
跳转到页面1只不过要刷新页面而已啊 跳转到页面2只不过要刷新而已 但是呢

03:39.100 --> 03:44.460
效果是不是已经出来了 对吧 效果已经出来了啊 另一个元数你看 所以里面包含那个a元数 对不对

03:45.580 --> 03:50.300
好 现在不着急啊 先不着急说什么无刷新的跳转 我们先把这个to这个属性搞定

03:51.020 --> 03:53.980
那么这个to这个属性呢 因为他有可能会给你这样子传递

03:54.380 --> 03:58.300
a元数里面我们知道的都知道 to这个属性是不是有可能给传一个对象进来

03:59.260 --> 04:01.100
对吧 所以有可能给传个对象进来

04:01.660 --> 04:07.660
好 那么这个传个对象进来的时候呢 那里你又怎么办了 比如说我们到这里这样子传递啊 past name

04:08.140 --> 04:09.660
啊 past name 呢为什么呢

04:10.860 --> 04:11.660
为这个就是

04:14.700 --> 04:16.780
啊 这里 past name 呢为那个

04:19.260 --> 04:21.420
为什么 比较说配级一 配级一

04:22.060 --> 04:27.020
还有什么12起 对吧 12起是不是也要传递啊 涉起a等于1啊

04:28.140 --> 04:33.500
b等于2 那如果说你不加处理的话 这样子一跳过去 你看一下 这边 a元数

04:35.420 --> 04:37.580
看一下那个a元数是啥 确认出来

04:38.380 --> 04:44.700
a元数这个rave属性是不是没了 对吧 应该传一个对象 对象怎么放到这呢 啊 放不了 是不是没了

04:45.100 --> 04:49.420
所以说呢 如果说你传的是对象的话 那我是不是还要进行处理一下

04:50.140 --> 04:52.620
所以说呢 我们到这边来判断一下

04:53.260 --> 04:57.980
判断一下 如果说你probs里边的to这个属性啊 它是一个对象

04:58.700 --> 05:00.460
啊 我们这里先保存到一个变量里面吧

05:01.260 --> 05:03.260
先保存了一个变量 pass

05:04.700 --> 05:06.860
或者叫做rave嘛 啊rave

05:07.660 --> 05:12.620
保存一下啊 保存 如果说你是一个啊 如果probs

05:13.420 --> 05:17.500
the2啊 你是一个啥呢 如果说你是一个就是

05:18.220 --> 05:18.460
嗯

05:19.740 --> 05:21.180
对象啊 type of

05:22.060 --> 05:22.460
probs

05:23.180 --> 05:29.420
2啊 如果说你是一个对象 那么你如果你是一个对象的话 我该怎么办呢

05:31.100 --> 05:31.900
啊 object

05:32.860 --> 05:37.900
我是不要把你的对象的东西拿出来 拼接成一个完整的rave制服串 对不对

05:37.900 --> 05:41.340
是不要拿出来拼接一下 好 那么这样子 我们就这样子写

05:41.820 --> 05:43.420
Rave等于什么呢 等于probs

05:44.060 --> 05:46.300
啊 to 我们这里再把它

05:47.020 --> 05:52.220
解构出来嘛 把它解构出来 解构里边不是有什么pass name 当然这些东西啊 你可以把它写成一个

05:52.940 --> 05:58.140
写成一个工具函数来帮你处理这个问题啊 可以写个工具函数来帮你处理这个问题

05:59.420 --> 06:02.860
啊 比方说吧 我们就写这么一个工具函数嘛 写这么一个工具函数

06:03.420 --> 06:03.740
呃

06:04.700 --> 06:14.300
起个名字啊 就是utl 要介绍啊 咱们来导出一些函数啊 一个函数是那个poss pass object

06:16.300 --> 06:21.580
这个函数做什么用了 你给我一个pass object对象啊 你给我一个pass

06:23.020 --> 06:23.900
object对象

06:25.180 --> 06:30.780
就是将一个对象配置的路径转换为

06:31.740 --> 06:38.540
转换为制服串路径啊 那怎么做呢 直接把这个对象解构 它里面不就这么几个东西吗

06:38.780 --> 06:41.340
它还有多少东西呢 就这么几个东西 解构啊

06:42.060 --> 06:44.620
解构出来什么呢 解构出来pass

06:45.820 --> 06:52.300
pass name 然后呢 解构出来search 解构出来哈希 解构出来什么state 对吧

06:53.820 --> 06:57.100
没问题吧 就是把解构出来啊 解构出来就完事了啊

06:57.820 --> 07:03.580
那么其实这个玩意儿 解构出来是个啥呀 是不是就是一个location对象 你看一下吧

07:04.780 --> 07:09.820
解构出来其实实际上就是一个location对象 你看location对象不就是这个东西吗

07:10.780 --> 07:17.180
最多最多location对象的还有一个keyz嘛 对不对啊 那这里没有keyz啊 那么解构出来是不是一个location对象

07:17.580 --> 07:23.660
对不对 好 那么既然是解构出来是一个location对象 那么这个location对象

07:24.620 --> 07:30.220
如果就是这个东西啊 相当于就是个location对象啊 我们会或者换一句话说这个就是个location

07:31.580 --> 07:32.460
post location

07:33.420 --> 07:43.180
啊 将一个对象啊 将一个对象配置的 将一个location对象

07:45.260 --> 07:49.260
转换为制服串 制服串链接啊链接

07:50.380 --> 07:53.740
那么这个东西怎么来转换了 你还不知道大家还记不记得

07:54.460 --> 07:58.780
history里边提供了一个东西啊 你给我传一个history对象进来

07:59.180 --> 08:03.260
history对象里边提供了一个东西 看一下吧 里边是不是有个creative

08:04.140 --> 08:11.420
是不是这个玩意儿 啊 平时我们自己写到代码的话十四八九用不到 但到这里是不是可以用到了啊 这不可以通过这个

08:11.980 --> 08:16.300
history对象里边的create什么herrave

08:18.540 --> 08:22.460
那么把这个location传进去 是不是完了 对不对 是就完事了

08:23.500 --> 08:30.380
就这么简单 那如果你要去自己手动实现的话也可以啊 他还会把自动的把baselame给加上 对吧 这就完事了

08:31.020 --> 08:34.700
因此呢 如果说他是一个对象的话啊 如果说他是一个对象的话

08:35.900 --> 08:41.980
inport 导入这个现在啊 from here utl 这些啊 然后导入这个就是post

08:42.540 --> 08:46.300
location啊 那么如果说他是一个对象

08:47.500 --> 08:52.220
怎么办啊 我们要得到了路径 得到了链接 是什么 就是post

08:52.860 --> 08:57.580
location 对吧 把这个location传过去啊 把这个probs

08:57.980 --> 08:59.820
第二啊 什么呢

09:01.820 --> 09:07.020
location 就是probs to 他就是个location对象 传过去 然后呢 再把什么呢

09:07.980 --> 09:14.380
history对象传过去 哎 那这里怎么拿到history对象呢 是不是要从上下文字里面去了啊 那这里是不是要用一个上下文的消费者

09:15.180 --> 09:18.620
啊 就是这样就是一层一层过来的啊 你要又做什么事情就是

09:22.250 --> 09:25.130
react rotor 你不要去找到这个rotor context

09:25.690 --> 09:28.330
把context 拿到 那么这里呢 要写个消费者

09:30.010 --> 09:30.490
concumer

09:32.810 --> 09:34.250
啊 这里呢 value

09:36.170 --> 09:37.450
好 我们把这个写进来

09:39.210 --> 09:39.690
写进来

09:41.130 --> 09:48.010
好 如果说啊 你是一个制服串的话 我就直接拿到就行了啊 直接拿到就行了 如果说你是一个nok型对象的话

09:48.570 --> 09:49.690
啊 那么我们把它

09:50.250 --> 09:54.570
转换成为rift 啊 rift 制服串的情况 把转换成制服串链接

09:55.290 --> 10:00.490
这个里面怎么去进行转换的啊 或者代码太少了 要不然我们还是直接写到这吧 代码太少了

10:02.170 --> 10:07.210
我想一下啊 直接弄在这吧 直接弄在这 得了 直接写到这 得了

10:08.330 --> 10:13.210
那么我们直接把你这个 to 转换成一个制服串链接就行了

10:13.690 --> 10:21.290
那么这个q是哪来的 是不是就从上下文的 value 里面来的 对吧 从应该复制就完成了啊 这个uq 写的不要了 就写到这吧

10:22.810 --> 10:24.890
好 那么如果是对象的情况是不是搞定了

10:25.610 --> 10:31.050
对象的情况就搞定了 好 那么最终那么渲染的时候呢 返回的时候 返回的是什么一个a元数

10:32.010 --> 10:38.570
这个rift属性值是什么 就是这个值啊 就这个值 好 然后q准的就直接是这里的q准

10:39.610 --> 10:40.730
probs 叫q准

10:42.090 --> 10:45.930
啊 就这样子写 没了 好 保存啊 这里不要了

10:47.210 --> 10:50.090
保存 好 你看一下 那么现在跳到一面一

10:51.050 --> 10:55.050
是不是没问题了 跳到一面二 是不是没问题了 对吧 然后呢 我们看一下啊

10:55.210 --> 10:55.930
这里的结构

10:58.090 --> 11:04.010
哎 这个link 那么尽管了我给我给的是一个什么了 尽管我给的是一个就是

11:04.650 --> 11:10.730
啊 对象是不是也能跳转了 但是这里有个问题啊 有小问题 他这里为什么哈希部分是undefend的呢

11:11.450 --> 11:12.810
哈希部分是undefend

11:13.530 --> 11:17.210
哈希部分是undefend的话 那应该是我们之前写的那个有问题啊

11:17.690 --> 11:20.010
之前写的这个crazy browser history 有问题

11:20.490 --> 11:24.810
那个crazy rift 这里 我们查到一下啊crazy rift 这里有问题

11:25.290 --> 11:31.770
我们这里怎么写的呢 是吧 location 里面这些东西全部拿到对吧 拿到 那么他跟哈希拿到的是undefend

11:32.090 --> 11:33.530
啊哈希拿到的是undefend

11:34.330 --> 11:37.210
啊 对 那么我这里还要判 还要就是

11:38.090 --> 11:43.210
最好是在这里解构一下啊 给些默认值啊 如果说你没有的话我给一些默认值 不能是undefend啊

11:43.610 --> 11:48.570
undefend肯定不行啊 那么这里呢 我们解构啊 解构什么passname

11:49.690 --> 11:53.770
passname 如果没有的话 给他一个默认值写纲啊写纲

11:54.330 --> 11:56.730
啊 然后呢 search

11:57.530 --> 12:03.690
没有的话 给默认值啊 空置不串啊 还要哈希没有的话 给默认值空置不串啊 这里呢

12:04.330 --> 12:08.810
给他个默认值嘛 是我们之前现在不是不够完善啊 因为我们讲这个人嘛啊

12:09.290 --> 12:13.530
不会 不太会去陷入无限的细节 我们就是讲大体的思路

12:14.650 --> 12:17.930
啊 保存看一下 那现在呢 这个没问题了啊

12:19.370 --> 12:20.730
啊 是不是没问题了 对吧

12:21.450 --> 12:27.450
好 那么这是对象的情况 对象的情况呢 我们会把它转成ref数向啊 给他加上bassname

12:28.330 --> 12:32.330
那么另外一种情况 他是制服串啊 他是一个制服串

12:33.290 --> 12:36.250
如果说他是一个制服串的话 他不是对象啊 是一个制服串

12:36.810 --> 12:39.610
那如果制服串的话 我们是不是也得把bassname给加上

12:40.810 --> 12:46.410
是这个意思吧 哎 我们这里ref是不是要加上啊 等于什么呢 等于bassname

12:46.890 --> 12:51.370
要拼接上什么了 拼接上那个probs2 对吧 拼上上这个

12:52.250 --> 12:56.490
那么现在关键是我们怎么知道对bassname是啥了 我们来看一下这里面有没有bassname

12:56.490 --> 12:58.410
再上一下文里面 有没有呃

12:59.610 --> 13:02.330
看一下上下文里面啊 他有没有跟我们提供bassname

13:03.210 --> 13:06.090
啊 有提供吗 看一下啊 有提供bassname吗

13:07.210 --> 13:12.730
是没有 对吧 是不是完全没有提供什么bassname 对不对 他没有提供任何的bassname

13:13.770 --> 13:15.050
好 因此呢

13:16.490 --> 13:21.290
我们这里呢 是不能就是那个呃

13:22.410 --> 13:27.610
直接把这个tu放进放到这来的 如果是制服串的话 我们是不是还要还要去找到bassname

13:27.610 --> 13:31.050
那怎么找到了 其实很简单 还是利用这个函数

13:32.010 --> 13:35.450
还是利用这个函数 只不过这里传的不是nok形对象了

13:36.650 --> 13:40.250
传的是怎么了 哦 传的这里 这里传的是制服串 那么

13:40.570 --> 13:44.250
但是这个函数他要求你传的一个nok形对象 那我们这里要干嘛

13:44.650 --> 13:54.570
将probs to转换为nok形对象 对吧 我们要做这么一个处理 然后把它转换成为一个nok形对象

13:54.890 --> 13:57.850
那么这个转换了我记得我以前之前好像是做过的

13:58.330 --> 14:01.850
哎 这哪里做过的 我们在history里面做过的啊 history里面

14:02.410 --> 14:08.730
呃 当时我们写这个create browser history的时候啊 写这个的时候 就是做过这个玩意了 对吧

14:09.690 --> 14:12.170
转换成啊 就是对

14:13.530 --> 14:19.420
我看一下啊 我看一下呃create nok形

14:23.780 --> 14:33.320
哎 跑到去了啊 就在这啊 在这啊

14:34.280 --> 14:38.840
要转换成为哦 在哪我再找一找啊

14:39.720 --> 14:40.920
好 在这啊 在这

14:41.720 --> 14:48.040
pass info 对吧 pass info 那么在这里是不是要转换成为nok形对象 对吧 要转换成为nok形对象

14:48.760 --> 14:55.320
没问题吧啊 我们因此呢 我们要要在这里进行转换啊 把它转换成为nok形对象

14:56.120 --> 15:00.760
好 那么我们可以调用这个方法啊 这个方法呢 当时没有导出对吧 当时是没有导出的

15:01.240 --> 15:07.320
呃 没有导出的话 我们这里呢 就直接把它导出得了啊 直接把它导出得了

15:09.080 --> 15:11.880
好 这里呢 我们export啊 export

15:12.520 --> 15:16.200
导出这个方法啊 create nok形 from pass啊 我们这里呢就导入

15:18.920 --> 15:23.640
当我这些写法呢 肯定是跟那个官方那个写法是有点点不一样的啊 官方那个抽离的很多

15:23.720 --> 15:32.280
把很多公共还是都抽离出去了啊 在官方的写法里边这个东西叫做post pass啊 解析路径啊 我们这里呢导入

15:33.560 --> 15:34.440
from

15:35.640 --> 15:38.360
叫写缸 history 里边create

15:39.480 --> 15:45.720
brother history 里边有一个create nokation from pass啊 有这么一个东西 好 那咱们呢 就在这

15:46.440 --> 15:52.600
呃 如果说你用的是官方的话 有一个是post pass啊 有一个post pass啊 要不然我们就用官方的吧

15:53.000 --> 16:00.760
行吧 我用官方的吧 我这个这个写的有些细节我没有处理没有处理 没有进行那么详细的处理 我们就用官方的啊 就用官方的

16:01.400 --> 16:07.240
history 里边 他有一个啊 叫做create pass 好像是这个啊create pass

16:07.720 --> 16:12.520
啊 这是哦 这是给一个location对象返回一个路径啊 应该是post pass

16:13.160 --> 16:13.800
post pass

16:14.520 --> 16:22.040
啊 那么他这里是给一个制服串啊 返回一个location对象啊 post pass 作用 打个注射啊 post

16:23.000 --> 16:27.000
pass 的作用是根据一个

16:28.920 --> 16:31.880
自路径制服串 路径制服串

16:32.520 --> 16:37.960
返回一个location对象啊 预备性对象 所以说呢 我们这里呢用个post pass

16:39.640 --> 16:40.600
啊 用post pass

16:44.360 --> 16:46.040
呃 拿到这个location对象

16:46.680 --> 16:46.840
loc

16:48.120 --> 16:53.160
post pass 然后呢 把这个props2传进去 那么这样子一来呢 是不是拿到location对象了

16:53.160 --> 16:57.800
然后我们再通过location对象来得到一个超连接啊 这是制服串的情况 这是

16:58.280 --> 17:03.080
对象的情况对象的情况我们直接得到一个超连接就行了 因为history里边有这个方法啊 如果是

17:03.560 --> 17:10.200
他是制服串的情况呢 我们把它转换成location对象 然后呢 再来创连超连接啊 就这么简单 完了 保存你看一下吧

17:10.680 --> 17:20.360
那么现在呢 制服串的情况和那个opg车就是对象的情况嘛 都搞定了 你看 是不是 对象的情况 这是什么啊 制服串的情况啊

17:21.160 --> 17:26.920
这都搞定了 对不对 都搞定了啊 搞定了之后呢 现在呢 我们来实现无刷新的跳转

17:27.400 --> 17:31.720
无刷新的跳转 是不是给这个a元素注册时间 对吧 unclick 注册时间啊

17:33.080 --> 17:37.000
当点击这个a元素的时候 首先要阻止它的默认行为stop

17:38.840 --> 17:40.040
prevent

17:40.440 --> 17:44.040
default 阻止默认行为啊 阻止默认

17:45.000 --> 17:48.760
阻止默认行为啊 就不让它点击过后跳转

17:50.040 --> 17:56.840
好 阻止了默认行为之后 现在要跳转 怎么跳转的 是不是利用history 对吧 利用value里边的history来进行跳转

17:57.400 --> 18:03.000
那么跳转的时候 是不是要给他一个location对象 对不对 是不是要给他一个location对象 好 那么这里呢

18:03.960 --> 18:05.320
啊 这里 我们

18:06.680 --> 18:13.720
直接location对象从哪里拿到了 如果props之2是那个对象的话 我们写个变量嘛 写个变量就叫做log

18:14.440 --> 18:21.480
啊 如果props2是一个对象的话 那我们直接就来把log负质成为props2点2啊 负质成为props.2

18:21.880 --> 18:26.520
如果说它是一个字不错的话 我们把它转换成location对象 对吧 转换成location对象

18:27.160 --> 18:30.920
哎 我们通过这种方式啊 那么这样子呢 总归还说要转换成location对象

18:31.080 --> 18:34.840
因此呢 我们这里代码格式稍微换一下啊 把这个写下来

18:36.520 --> 18:42.700
啊 写下来 这里就直接写log 这样子写

18:44.460 --> 18:48.460
啊 这样子写啊 是不是一样的 道理是一样的啊 就是我们

18:49.100 --> 18:54.460
首先始终得到一个location对象 如果你是一个object的话 我们把它转换成对

18:54.700 --> 18:56.220
就是拿过来就行了 如果你

18:56.780 --> 19:01.260
不是object 是字不错的话 我们把它转换成通过post pass转换成location对象

19:01.500 --> 19:09.420
然后再把location对象呢 转换成一个完整的链接啊 对吧 就这样子写 好 那么点击的时候呢 我们history里边

19:10.220 --> 19:14.220
proc 是不是把给它传一个什么呢 proc里边

19:15.660 --> 19:21.260
传一个这个对象就行了 对不对 说传一个location对象就行了 因为proc里边是不是可以接受一个对象

19:21.580 --> 19:26.540
啊 一个接受的对象 其实它的格式就是location对象啊 我们把这个location对象传过去就完成

19:27.900 --> 19:28.940
好 保存看一下吧

19:29.500 --> 19:38.620
啊 一面一啊 二 一 二 一 二 你看 是不是搞定了 对不对 也就搞定了

19:40.700 --> 19:45.580
哎 这些多了一个啊 如果一个设计它只要问好的话 那么就变成这个样子了啊

19:46.460 --> 19:51.100
这个地方呢 我也是这里的问题 其实也是这里的问题 就是也是这里

19:51.660 --> 19:52.060
那个

19:52.940 --> 19:59.660
crease rift 这里啊crease rift 这里 我没有写得很完善啊 一些细节没有照顾到啊 但是至少可以挑战了嘛 对不对

19:59.980 --> 20:04.380
啊 当然呢 你这里呢 也可以利用那个它里边的一个create pass啊

20:04.940 --> 20:11.100
create pass来搞定create pass的它的作用是什么呢 它的作用是把一个location对象的转换成为

20:11.660 --> 20:17.100
啊 一个路径啊 但是它不会不会包含那个base name啊 不会包含base name 但是也会

20:17.820 --> 20:20.220
也有bug啊 这是我们之前写的那个

20:20.860 --> 20:21.740
啊crease

20:22.860 --> 20:29.820
rafe这个地方没有处理好啊 没有处理好 就是这个surch呢 它有的时候呢 可能它就是一个空的空的问号 那么这种情况呢

20:30.140 --> 20:36.060
你要处理一下啊 你要处理一下 别忘了处理一下吧啊 就处理一下吧 也写不了几句代码啊 如果说search

20:36.940 --> 20:38.140
啊 点charlite

20:38.620 --> 20:45.900
第一个字符是问号 并且呢 并且呢surch的长度为1

20:46.620 --> 20:51.660
啊 长度为1 那么我们直接把surch稍微控制不稍啊 这些东西你可以可以自行处理的

20:52.300 --> 20:52.860
啊 那么

20:53.580 --> 20:55.100
同样的哈希也是一样

20:56.060 --> 20:56.460
哈希

20:59.480 --> 21:00.360
哈希也是一样

21:02.460 --> 21:06.700
那么这里是警号啊 这里是警号啊 重新稍微制不稍 然后这里把它变成net

21:08.140 --> 21:09.740
好 保存啊 那现在就不会了

21:12.140 --> 21:13.420
这样我们重新来啊

21:15.260 --> 21:16.060
啊 撤到一面一

21:17.020 --> 21:21.500
哎哈希哈希这里还是有问题了 我看一下 我看一下

21:24.060 --> 21:27.340
有些细致摸解的东西哈希这里

21:29.020 --> 21:29.660
哈希这里

21:30.780 --> 21:36.140
跳到一面一 我看一下跳到这 哎 他为什么会给我加上一个哈希呢

21:37.500 --> 21:37.740
啊

21:38.780 --> 21:41.180
他为什么会给我加上一个哈希呢 我来看一下

21:41.820 --> 21:45.020
他的朝链节路径是没问题的呀 没问题的 点击过后

21:45.660 --> 21:49.340
他给我加了一个哈希进去啊 给我加了一个哈希进去点击

21:50.540 --> 21:53.180
我看一下吧 是我之前铺洗写的有问题吗

21:54.540 --> 21:54.940
铺洗

21:59.340 --> 22:00.220
啊 铺洗方法

22:02.740 --> 22:07.460
啊 我都不想去解决这个问题了啊 因为我们讲原码呢 讲的是大体的思路

22:07.700 --> 22:11.060
这东西肯定是可以解决的 肯定是一个小的地方可以解决的

22:11.460 --> 22:17.300
我之前应该是某一个地方写的啊 写的稍微有点问题啊 写的稍微有点问题

22:17.780 --> 22:24.500
啊 我懒得去看了啊 懒得去看了 这问题我不想解决了 行吧 不想解决了 我们只是说这个大体的思路啊 大体的思路

22:25.380 --> 22:27.620
好 那么现在就可以实现无双性的跳转了 看呗

22:30.460 --> 22:32.300
好 这是这一块啊 这一块

22:34.710 --> 22:39.270
嗯 好 那么下面还有另外一个就是组件 叫做navlink

22:40.150 --> 22:42.150
啊 不行 我就强迫任务犯了

22:42.710 --> 22:46.630
我不行 不能不解决这个问题 我要解决 我要解决这个问题

22:47.990 --> 22:50.390
我要在这里把这个rave属性打印出来

22:51.590 --> 22:55.260
看一下 没有没有哈希子

22:55.980 --> 22:59.500
啊 是没有哈希子的 看呗 是没有哈希子的 那么也是我问题出来这

23:00.300 --> 23:04.700
啊 问题出来我们的history里边 铺行的时候了 我们把location传进去

23:05.340 --> 23:07.900
location传进去过后了 他给你加了一个哈希

23:08.540 --> 23:10.860
那么这是怎么回事呢 f12 转到定义

23:11.740 --> 23:14.540
我不是type script 不行 来在这里找到这个push

23:15.980 --> 23:16.540
啊push

23:18.140 --> 23:19.340
push这里签计配置

23:21.180 --> 23:25.180
好 那么这里呢有 他使用了这么一个函数 这个函数能够得到pass info

23:25.660 --> 23:27.900
啊 能够得到pass info 最后呢得到一个

23:28.540 --> 23:28.700
啊

23:29.260 --> 23:31.660
location对象 我们把这个pass info打印出来

23:32.140 --> 23:32.780
pass info

23:35.530 --> 23:39.770
好 点击他拿这个pass info 这个pass info出了问题加了一个哈希看到没

23:40.090 --> 23:42.010
pass info里边是这个地方出了问题

23:42.490 --> 23:46.890
好 那么我们看下这个函数 这个函数里边他拿到pass info 哦 这里处理的

23:48.810 --> 23:55.610
哦 明白了 他是 我是加如果说你没有设计的话 我给你第一个位置不是问号的话 我给你加了一个问号

23:56.090 --> 23:59.370
啊 但是呢 我这里找判断一个东西 就是search

24:00.090 --> 24:00.810
的长度

24:02.090 --> 24:06.650
大于1 就是设计的长度 他这不算长度是大于1的啊 就是

24:07.530 --> 24:11.290
嗯 第一个位置不是问号 并 哦 大于0的啊 大于0的

24:12.250 --> 24:15.210
啊 就是设计这一块有子 但是第一个位置不是问号

24:15.690 --> 24:20.330
那么这一 这里也是哈希这一块呢 是大于 长度是大于0的啊 就是

24:20.810 --> 24:25.050
哈希这一块他有子 但是第一个位置不是几号 这样子我才给你加上几号和问号

24:25.450 --> 24:26.650
啊 是这个原因导致的

24:27.290 --> 24:29.930
啊 点击啊 现在就没有了啊 就没有了

24:30.650 --> 24:32.810
强迫症啊 必须要解决 这都是小问题啊

24:33.290 --> 24:33.610
嗯

24:34.810 --> 24:36.570
主要是讲我们的实现失路

24:37.370 --> 24:40.330
好 link 就解决了 好 另外一个呢 就是nav link

24:40.410 --> 24:41.610
我们来看一下nav link呢

24:42.250 --> 24:46.410
nav link是怎么回事的啊 这里能不能再导入导入一个nav link

24:48.490 --> 24:51.050
nav link就是其实就是在link 技术上实现的啊

24:51.370 --> 24:54.970
他就是无非多了一个这个这个这么一个东西 我们这里换成nav link

24:56.330 --> 25:01.530
nav link 但是link这里我们还有很多细节没有实现啊 比方说link的跳转方式是不是replace

25:01.930 --> 25:04.890
那么一根据这个属性去判断到底是poosh 还是replace

25:05.770 --> 25:08.330
这些我就没去实现了 我们来看一下这个组建结构

25:08.810 --> 25:10.810
replace

25:11.770 --> 25:14.090
看一下这个nav link的组建结构

25:16.650 --> 25:19.450
nav link你看一下 他里边其实就是给你包含了一个link

25:20.010 --> 25:22.890
啊 包含一个link 然后呢给他加了一些什么class name

25:23.370 --> 25:24.730
对吧 加了一些class name

25:25.450 --> 25:28.330
啊 哦 这里还有一个问题 就是link这里呢

25:28.890 --> 25:32.730
由于我会往这个属性里边加一些什么动物元素的属性

25:32.970 --> 25:37.370
所以说呢 我会把这个属性呢远方不动的加到a元素里边啊 加到a元素里边

25:38.010 --> 25:42.090
所以说呢 我们这里呢啊 会把这个属性解构出来啊 解构出来

25:44.010 --> 25:51.290
除了什么除了什么to这个属性 有些特殊的属性 我们是要自己应用的什么 还要包括什么replace啊 这些属性啊 你们自己可以去写了

25:51.690 --> 25:55.530
除了这些特殊的属性之外 剩下的属性把解构出来啊

25:56.650 --> 26:02.170
剩下的属性呢 就放到这个对象里边 那么我们在这里a元素这里呢 我们就把剩下的属性给它解构放到这

26:03.050 --> 26:08.970
那么这样子呢 什么class name啊 还有什么style啊 这些属性呢 是不是都可以放到a元素上面来了 对吧

26:09.690 --> 26:12.170
好 在这一块啊 刚才我忘了写了

26:13.610 --> 26:16.730
他利用的其实就是link这个组件

26:17.770 --> 26:20.170
无非呢 就是给他加了一个什么class name

26:21.210 --> 26:22.410
给他加了一个class name

26:23.370 --> 26:27.930
好 那么怎么来做的呢 这个level link 好 咱们来写这么一个level link

26:28.890 --> 26:30.010
解构

26:31.050 --> 26:32.890
呃 函数呢 还是内呢

26:33.930 --> 26:35.290
函数吧啊 函数

26:36.410 --> 26:41.370
还是函数组件啊 函数组件啊 我们这里的fc函数件level link

26:44.340 --> 26:50.260
嗯 他的属性呢 基本上跟link是一样的 所以说我们直接导入link啊 直接利用link来做就行了

26:51.540 --> 26:55.380
link 同样的 我们在index里边把这个level link导入 导入出去

26:56.180 --> 26:56.740
导出去

26:57.540 --> 26:58.100
level link

26:59.060 --> 27:00.820
啊 这里level link

27:02.260 --> 27:03.060
啊 该导出去

27:03.780 --> 27:07.140
好 那么这个level link里边写上呢 他渲染的实际上是啥

27:07.140 --> 27:09.540
渲染的实际上就是link组件

27:10.340 --> 27:12.100
渲染的实际上就是这个link组件

27:12.580 --> 27:15.060
然后呢 把自己的propercy全部传过去

27:15.060 --> 27:17.140
啊 当然除了自己的一些特殊的propercy

27:17.860 --> 27:18.260
啊 我们这里

27:19.060 --> 27:19.620
解构一下

27:20.980 --> 27:21.300
rest

27:21.940 --> 27:23.780
除了自己的一些特殊的propercy

27:24.660 --> 27:26.900
啊 那么比方说吧 比方说

27:27.300 --> 27:30.580
呃 不是有个属性叫做active class 对吧

27:30.580 --> 27:33.460
active class 就是激活的时候

27:33.940 --> 27:38.500
他的样式啊 样式名称啊 默认值 默认值是什么呢

27:38.500 --> 27:41.620
默认值就是active对不对 我们从这个属性里边啊

27:42.420 --> 27:43.380
给它解构出来

27:43.380 --> 27:46.980
好 那么剩下的属性呢 我就原分母动的传到link里边

27:46.980 --> 27:50.180
包含求准对吧 我一起给你传过去啊 一起给你传过去

27:50.980 --> 27:54.900
那么现在我要搞定的是什么呢 我现在要搞定的是我要知道

27:55.860 --> 27:57.940
哎 我这里怎么 这个写给大家看

27:57.940 --> 28:03.620
我现在要知道的是什么情况下我要加上这个active class

28:04.180 --> 28:06.660
关键是在这 也就是这里呢 我要给它一个class name

28:07.220 --> 28:10.820
一个class name class name等于什么呢 等于active

28:10.820 --> 28:13.540
就是什么情况下我要给你加上这个class name

28:14.420 --> 28:18.420
关键是在这 什么情况下我要给你加上class name呢

28:18.420 --> 28:22.580
是不是匹配的时候啊 给我的路径那个to匹配的时候

28:22.740 --> 28:26.740
就是目前的地址 给我们那个路径的to品能匹配的时候

28:26.740 --> 28:30.020
是不是可以加上这个 它里边还有个适逢精确匹配对吧

28:30.020 --> 28:32.980
还有什么 还有什么适逢严格匹配 还有什么

28:33.540 --> 28:37.060
还有适逢区分大小写对吧 跟那个匹配是不是一样的

28:37.060 --> 28:41.060
那么我们是不是可以利用这些属性来搞定匹配了

28:41.060 --> 28:42.580
好 这里呢 肯定要用到上下文

28:43.540 --> 28:48.580
以前要进行匹配 因为上下文里面我们才能获取到location

28:48.580 --> 28:52.420
好 这里呢 我们导入导入一个cts 导入那个上下文

28:53.540 --> 28:56.740
啊 就是reacts roter

28:57.780 --> 28:58.820
roter context

28:59.380 --> 29:04.260
好 然后再导入march pass from

29:05.860 --> 29:08.820
reacts roter 里面的march pass

29:08.820 --> 29:13.700
导入这两个 好 那么这里呢 我们就要使用上下文的消费者

29:14.260 --> 29:16.100
concumer 因为我要获取location

29:16.100 --> 29:19.220
为什么要获取location 我要匹配吗 我要跟路径匹配

29:19.220 --> 29:21.700
路径在location里面 那么不获取怎么办呢

29:23.300 --> 29:26.820
好 那么现在呢 到这边来 其他我用不上

29:26.820 --> 29:29.300
其他我都用不上 我主要是要用到这个location

29:29.300 --> 29:31.700
location对象 把简购出来

29:31.700 --> 29:35.700
好 那么这里呢 我们这里要返回啊 最重要返回

29:35.700 --> 29:42.680
嗯 来 呃 这怎么回事

29:42.680 --> 29:45.880
呃 okay

29:45.880 --> 29:49.480
什么 unspected token expected

29:49.480 --> 29:51.480
对啊对啊

29:51.480 --> 29:54.840
哦 这里又使他又把他当成对象了 又把他当成对象了

29:55.080 --> 29:55.960
啊 这是个参数

29:57.080 --> 30:00.920
好 那么现在呢 我们要去匹配 是不是要调用这个march pass

30:00.920 --> 30:05.160
对吧march pass去匹配啊 去匹配啊 这些他也可以 给他默认值吗

30:05.880 --> 30:10.120
force 给他默认值 解构出来吗 换个行来解构

30:13.580 --> 30:16.700
force force 解构

30:19.980 --> 30:22.700
啊 把解构出来啊 好 然后在这里呢

30:22.700 --> 30:27.260
march pass里边 我们是不要匹配 给他一个什么 给他一个路径规则

30:27.980 --> 30:30.300
路径规则 路径规则呢

30:31.020 --> 30:37.420
就是to to这个属性啊 路径规则就是to这个属性 但是to这个属性呢 他有可能是一个对象

30:38.140 --> 30:41.020
啊 他有可能是一个对象啊 因此呢

30:42.300 --> 30:47.420
我们这里呢 要把它转换成为一个制服串啊 把它转换成一个制服串啊

30:48.460 --> 30:52.620
呃 不 不是 不是 不是 如果说他是一个制服串的话 要把它转换成对象

30:52.620 --> 30:56.860
因为对象我们要获取的是passname 把passname呢 当成他的路径规则

30:57.340 --> 31:03.980
把passname当成路径规则 所以说呢 我们要把这个to呢 转换成一个location对象 是不是 又要用到之前的那个

31:05.420 --> 31:08.300
from history 用到这个post

31:09.260 --> 31:15.580
post pass 啊 如果说他是一个制服串的话 我们要把这个to呢 转换成location对象啊

31:17.260 --> 31:22.780
loc 就是保存to中的location对象

31:23.500 --> 31:27.900
好 判断一下啊 type 如果说你一个属性里边的to

31:28.780 --> 31:33.900
是一个制服串的话 那如果你是对象的话 那已经是location对象了 都没什么好说的

31:34.300 --> 31:41.020
那么如果你是制服串的话啊 如果你是制服串 我们就把这个location等于什么呢 等于post pass

31:41.580 --> 31:45.180
把你这个制服串呢 转换成location对象啊 转向location对象

31:45.500 --> 31:49.580
好 有了location对象之后呢 我们的路径规则 直接是用passname

31:49.980 --> 31:58.780
location对象里面的passname来作为路径规则啊 因为什么设起啊哈心的一部分 我们不会把它作为路径规则的啊 我们把那个passname

31:58.860 --> 32:03.980
作为路径规则 然后呢 匹配的路径是什么呢 就是我们当前浏览器里边的passname

32:04.460 --> 32:08.220
啊 匹配这个 匹配的参数呢 就是一个sx

32:09.340 --> 32:09.980
匹配参数

32:11.580 --> 32:16.220
就是啊 这里刚才刚才解构出来的一个sx这个是sensitive

32:17.180 --> 32:21.980
啊 就这些东西啊 来去匹配 好得到一个匹配结果

32:23.100 --> 32:25.580
得到一个匹配结果 如果说你匹配了

32:26.300 --> 32:28.300
如果说你匹配了 哎 这里

32:29.100 --> 32:31.980
如果说你匹配了 那么我给你返回的是这个

32:32.540 --> 32:35.580
包含激活那样式的啊 就是个那样式的link

32:36.060 --> 32:39.820
如果说你没有匹配 我给你返回一个普通的link 就这么简单 没了

32:40.780 --> 32:43.980
啊 他就是做多了一个匹配啊 把to这个属性呢

32:44.780 --> 32:47.260
啊 把它变为一个路径规则

32:47.980 --> 32:51.660
就是说你们以后做一些开发的时候呢 你往往都会经过这样的处理

32:51.900 --> 32:56.060
就是说有一个东西啊 他可能是一个类型 又可能是别的类型

32:56.460 --> 32:59.900
那么我们要进行统一处理 那么你把它转换成一个统一的类型

33:00.140 --> 33:02.620
比方说我们这里 他是支付串的时候呢 我们把它转换成对象

33:03.020 --> 33:05.500
啊 因为对象里面的信息能更加详细啊

33:05.980 --> 33:09.260
啊 那么这里呢 把它转换成对象 然后在对象里面进行处理

33:09.820 --> 33:11.180
啊 把它当成对象来处理后面

33:11.900 --> 33:15.020
好 就完了 好 那么这样子你写完 我们在这里导入

33:15.420 --> 33:18.620
nevlink 啊 从我们自己的库里面导入nevlink 因为看到

33:19.980 --> 33:23.420
这个啊 一面二里面是不是加了一个active

33:23.660 --> 33:28.780
对吧 然后再看一下reaction结构啊 nevlink里面是跟刚才一样的啊 是一样的效果

33:29.020 --> 33:29.500
对不对

33:30.860 --> 33:38.380
好 就完事了啊 好 当然我们很多link啊 nevlink里面还有很多很多的细节啊

33:38.380 --> 33:40.620
还有很多的细节 但是呢那个东西呢 我

33:41.260 --> 33:42.780
嗯 就不打算讲了

33:43.420 --> 33:51.740
其实我在讲完那个拿取history对象 就是获取history对象 已经呢拿就是进行匹配那个方法之后

33:52.540 --> 33:57.260
我就已经基本上我就心里面就知道我已经完成了90%了 剩下的东西呢 就是听着玩

33:57.580 --> 34:01.660
啊 你就存就是听着玩了 你爱怎么去实现怎么去实现

34:01.900 --> 34:05.980
因为你会发现最核心的东西就是个 history 以及呢这个match pass

34:06.460 --> 34:10.780
这几个东西就上下文理里面那几个数数据 只要把那几个数据搞定了

34:11.420 --> 34:17.020
剩下的事情就是亲戚生中做一些组建去用这些数据的事情了 就非常非常简单了啊

34:18.060 --> 34:23.340
所以我们学员嘛 其实要主要学他的核心原理 核心思路 你想做些做些做这些组建的时候

34:23.900 --> 34:30.060
是不是就体力活了 做这些组建 对吧 就存就体力活了 没什么好说的啊 你有兴趣的话 你可以自己去把它完善一下

34:32.380 --> 34:35.020
好 这就是rexrota这一部分的

34:35.820 --> 34:38.300
原码 当然我还有一些没讲 还有一些组建没讲 不要说像

34:38.860 --> 34:45.180
有些组建是太简单了 需要给大家有一点空间自己去思考 不要说proper这个组建我们以前是不是讲过的

34:45.500 --> 34:52.380
还有一些组建是讲过的 讲过他的原码的 当时我们还没有学习rexrota原理的时候 原码的时候 我都已经把他原码实现了

34:53.180 --> 34:54.620
包括什么redirect 组建

34:55.900 --> 35:03.020
你们自己去搞定 这个太轻松了 对吧 你都可以拿到上下文的数据了 你直接挑的不管了嘛 对不对 你挑的就完事了

35:03.980 --> 35:13.900
用history 铺系 对吧 他里边还是不是还可以配置啊 到底哪种方式挑转 是replace的方式挑转 还是铺系的方式挑转 其实最终就是你用history来操作挑转

35:15.340 --> 35:21.580
但如果说你要把这些东西挨在这些时间 没有必要 我觉得没必要 讲原码也不是这样讲的 主要是讲核心原理

35:22.860 --> 35:28.540
好了 那么rexrota呢 就到此结束了啊 到此结束了 那么下一个部分

35:29.420 --> 35:37.340
现在我们全家统啊 rex全家统里边学下哪些东西了 全家统里边学习了 首先是rex本身啊 全家统

35:39.020 --> 35:43.980
啊 然后呢 学习了rexrota对吧rota

35:44.620 --> 35:50.380
还学习了啥了 还没就没了 对吧 那么接下来呢 我们要学习的是redux啊 redux

35:51.020 --> 35:57.660
这个部分了 其他的原理呢 也非常非常简单 只是他可能会稍微绕一点啊 没有那个

35:58.140 --> 36:02.860
他对应的是五u x 啊 没有一个五u x能那么好理解啊 他稍微绕绕一点

36:03.820 --> 36:13.100
啊 当然五u x呢 是借鉴了入dux的模式啊 我们下一张会详细的来说啊 通过这一张讲那个rexrota的原码呢 大家也可以体会到啊

36:13.580 --> 36:16.460
就是像很多时候呢 我们做一些

36:17.340 --> 36:20.300
酷啊 做一些第三方的酷出来的时候呢

36:21.500 --> 36:27.500
尽量该分开的分开 你看他分得很细的 rexrota里边 他只处理的

36:27.980 --> 36:33.820
就是跟一页 就是跟那个具体的显示模式无关的东西啊 只处理这些东西

36:34.460 --> 36:41.740
好了 那么rexrota动了 他处理的是一页面的动物元素 你看一下 这里边是不是写了一些动物元素啊 对不对 动物元素啊

36:42.780 --> 36:50.140
包括browserrota就是就是典型的跟浏览器密切相关的 对吧 这样子分立的好处在于将来呢 这一部分是可以替换的

36:50.460 --> 36:53.580
核心功能 在任何 任何环境下面都可以用

36:54.460 --> 37:00.620
他只要他只依赖rex 只要你有rex 我是不是都可以用 对吧 但是呢 这个功能呢

37:01.820 --> 37:04.700
这个玩意呢 他只是针对页面的啊 针对页面的

37:05.980 --> 37:14.060
好了啊 那就是这里呢 就是这个rexrota这一块原码部分了啊 我希望大家听完这个课之后呢 至少

37:14.700 --> 37:20.860
我都不说你自己去开拓 自己去写一些组件 去往上一些细节 你至少要把我写的东西呢 你要把它写一遍

37:20.860 --> 37:26.140
这样子呢 你理解了才会深刻 才会有印象好了 那么这一张到这里了 拜拜

