WEBVTT

00:00.880 --> 00:03.480
终于到了这节课了

00:03.480 --> 00:06.880
这节课咱们讲解react的渲染原理

00:06.880 --> 00:09.680
我们会分为两节课来讲

00:09.680 --> 00:11.680
第一节课就这节课

00:11.680 --> 00:17.080
咱们首先讲解一下渲染的一些基本的一些书语

00:17.080 --> 00:18.680
还有就是首次渲染

00:18.680 --> 00:21.680
就是渲染一个新的react元素

00:21.680 --> 00:22.880
该怎么去渲染

00:22.880 --> 00:26.680
咱们把这些先打下一些基础

00:26.680 --> 00:30.480
然后更多的支持我们在下节课来进行讲解

00:30.680 --> 00:32.680
把它分成两节课

00:32.680 --> 00:36.080
这节课的东西实际上是非常非常多的

00:36.080 --> 00:39.680
大家如果去看react官网的话

00:39.680 --> 00:42.680
他说的真的是太简略了

00:42.680 --> 00:45.280
而且很多地方说的很模糊

00:45.280 --> 00:47.280
你看完了可能大概有个印象

00:47.280 --> 00:49.480
但是你不知道他在说什么

00:49.480 --> 00:53.280
而实际上国内的很多资料里边

00:53.280 --> 00:58.480
对渲染原理这一块讲解的没有那么的透彻

00:58.480 --> 01:00.280
很多资料都没有那么的透彻

01:00.480 --> 01:04.880
要不然就是根据官网直接给他重新说了一遍

01:04.880 --> 01:07.480
要不然就加了那么一点点新东西

01:07.480 --> 01:10.080
实际上说的没有那么透彻

01:10.080 --> 01:14.080
另外有一官网他其实没有过多的涉及到渲染

01:14.080 --> 01:17.680
而涉及更多的是什么DEV算法

01:17.680 --> 01:19.280
涉及到更多的是这个东西

01:19.280 --> 01:23.080
这个玩意其实只是渲染的其中一个步骤

01:23.080 --> 01:26.080
如果你要把整个渲染过程讲清楚的话

01:26.080 --> 01:27.680
还是东西蛮多的

01:27.680 --> 01:30.480
这两节课大家好好地听

01:30.480 --> 01:31.480
集中注意力

01:31.480 --> 01:33.680
这两节课的东西也比较繁琐

01:33.680 --> 01:34.680
也比较复杂

01:34.680 --> 01:36.280
我尽自己的最大努力

01:36.280 --> 01:37.280
给大家讲清楚

01:38.880 --> 01:40.880
好 我们在讲解之前

01:40.880 --> 01:43.280
首先我们认识一些数语

01:43.280 --> 01:46.680
这些数语如果你没有对他一个清晰的认识的话

01:46.680 --> 01:47.880
那你可能后来我说什么

01:47.880 --> 01:50.480
你都不知道我在说什么东西

01:50.480 --> 01:52.680
这个数语首先我们看这个数语

01:52.680 --> 01:55.280
一个叫做react元素

01:55.280 --> 01:56.380
react元素

01:56.380 --> 01:59.680
它的英文叫做react element

01:59.680 --> 02:01.380
那么这个元素哪来的呢

02:01.380 --> 02:08.780
这个元素指的是通过react create element创建

02:08.780 --> 02:10.380
那么这里有个语法堂

02:10.380 --> 02:10.980
对吧

02:10.980 --> 02:11.580
语法堂

02:11.580 --> 02:15.580
我们之前说过GSX也可以创建这个东西

02:15.580 --> 02:17.380
它叫react元素

02:17.380 --> 02:20.180
这是我们后面说到react元素

02:20.180 --> 02:22.580
你要知道说的是什么东西

02:22.580 --> 02:25.080
一个是通过GSX表达式创建的

02:25.080 --> 02:26.880
一个是通过直接这样子

02:26.880 --> 02:29.280
用原生的语法create element创建的

02:29.280 --> 02:30.680
它不是动物元素

02:30.680 --> 02:32.280
跟动物元素没什么关系

02:32.280 --> 02:35.280
咱们自己写的五件比方说比如

02:35.280 --> 02:37.880
例如哪些东西是react元素

02:37.880 --> 02:39.480
比方说像这个东西

02:41.280 --> 02:44.480
然后这个东西就是一个react元素

02:44.480 --> 02:46.480
比方说我们这里随便写个

02:46.480 --> 02:47.680
随便写个

02:47.680 --> 02:49.080
不着急 慢慢来

02:49.080 --> 02:50.080
视频教程

02:50.080 --> 02:51.280
我们做之后最重要的目的

02:51.280 --> 02:53.080
是给大家讲清楚

02:53.080 --> 02:55.280
这就是一个react元素

02:55.280 --> 02:56.280
react元素里边

02:56.280 --> 02:57.280
咱们来看一下吧

02:57.280 --> 02:58.680
咱们再看一下

02:58.680 --> 03:01.080
我们到那个index里边

03:01.080 --> 03:02.080
一定要认识清楚啊

03:02.080 --> 03:02.780
这个概念

03:02.780 --> 03:03.680
你不认识清楚

03:03.680 --> 03:05.980
肯定是到时候用起来

03:05.980 --> 03:07.680
到时候我讲解它的过程的时候

03:07.680 --> 03:09.680
你肯定是非常模糊的

03:09.680 --> 03:11.180
我们去随便写一个

03:11.180 --> 03:14.180
我们输出这个辩量

03:14.180 --> 03:15.680
这就是一个react元素

03:15.680 --> 03:17.680
我们打印出来看一下

03:17.680 --> 03:19.780
ya start

03:19.780 --> 03:21.080
我们之前也看过

03:21.180 --> 03:23.480
就是一个对象

03:23.480 --> 03:25.280
一个介石对象

03:25.280 --> 03:31.260
咱们来看一下

03:31.260 --> 03:33.060
这里我们

03:37.160 --> 03:37.760
打印出来

03:37.760 --> 03:39.360
你看是不是就是个介石对象

03:39.360 --> 03:41.760
react元素

03:41.760 --> 03:43.560
react元素里边

03:43.560 --> 03:45.060
你看一下

03:45.060 --> 03:47.160
我们刚才创建的是个DIV

03:47.160 --> 03:48.560
一个DIV元素

03:48.560 --> 03:49.560
它不是动物元素

03:49.560 --> 03:50.360
一定要搞清楚

03:50.360 --> 03:51.560
它不是动物元素

03:51.560 --> 03:53.060
创建这么一个DIV元素

03:53.060 --> 03:54.360
这个DIV元素里边

03:54.460 --> 03:56.460
有属性probs

03:56.460 --> 03:58.460
probs里边有个切尔遵属性

03:58.460 --> 04:00.960
切尔遵表示这个元素的指元素

04:00.960 --> 04:04.360
它有点类似于我们的动物对象

04:04.360 --> 04:05.860
真实的动物对象

04:05.860 --> 04:06.860
有点类似

04:06.860 --> 04:07.960
真实的动物对象里边

04:07.960 --> 04:09.760
也是不是也会形成那种复制结构

04:09.760 --> 04:10.260
对吧

04:10.260 --> 04:11.360
复元素包含指元素

04:11.360 --> 04:13.360
指元素也包含指元素

04:13.360 --> 04:15.260
我们再看一下它的指元素

04:15.260 --> 04:16.060
指元素是什么

04:16.060 --> 04:17.160
是h1对吧

04:17.160 --> 04:18.160
是一个它的type

04:18.160 --> 04:20.160
类型的是一个h1元素

04:20.160 --> 04:21.060
没问题吧

04:21.060 --> 04:21.860
我们

04:21.860 --> 04:22.960
然后指元素里边

04:22.960 --> 04:23.660
还有指元素

04:24.160 --> 04:25.460
指元素里边还有指元素

04:25.460 --> 04:26.660
指元素是什么

04:26.660 --> 04:28.860
是一个标题

04:28.860 --> 04:30.360
问题吧

04:30.360 --> 04:32.460
但是我们这里只写了一个指元素

04:32.460 --> 04:34.960
实际上还可以写很多个

04:34.960 --> 04:36.860
比方说这里再写个p元素

04:36.860 --> 04:37.660
也可以

04:37.660 --> 04:39.460
你看一下

04:39.460 --> 04:40.460
这样子生成出来

04:40.460 --> 04:42.960
你看probs里边它有切尔遵

04:42.960 --> 04:43.760
切尔遵的

04:43.760 --> 04:44.960
是不是两个

04:44.960 --> 04:46.260
有两个指元素

04:46.260 --> 04:47.360
一个指元素

04:47.360 --> 04:49.160
你看是h1

04:49.160 --> 04:52.060
一个指元素是p元素

04:52.060 --> 04:53.460
看没

04:53.660 --> 04:54.760
没问题吧

04:54.760 --> 04:55.560
ok

04:55.560 --> 04:56.560
那咱们

04:56.560 --> 04:58.160
先把这个东西认识清楚

04:58.160 --> 05:00.260
rex元素是什么意思

05:00.260 --> 05:01.760
我们再来看一下

05:01.760 --> 05:05.160
rex元素里边有哪些类型

05:05.160 --> 05:06.660
这个东西是元素

05:06.660 --> 05:07.660
其实还有这个

05:07.660 --> 05:09.760
组件它也是一个rex元素

05:09.760 --> 05:12.360
比方说我们写到这个组件

05:12.360 --> 05:13.060
这个组件

05:13.060 --> 05:13.660
对吧

05:13.660 --> 05:14.560
我们用的组件

05:14.560 --> 05:16.160
组件它也是rex元素

05:16.160 --> 05:18.960
它也是通过create element创建的

05:18.960 --> 05:21.360
也通过它来创建的

05:21.360 --> 05:24.160
我们来看一下吧

05:24.160 --> 05:27.260
rex元素里边除了这种东西之外

05:27.260 --> 05:28.360
它还有一个

05:28.360 --> 05:28.960
还有这种情况

05:28.960 --> 05:30.260
它也是元素

05:30.260 --> 05:32.260
比方说我们这样子写

05:32.260 --> 05:33.560
而这个app也是元素

05:33.560 --> 05:35.260
保存看一下

05:35.260 --> 05:36.360
你看

05:36.360 --> 05:37.260
是不是一样的结构

05:37.260 --> 05:37.660
对吧

05:37.660 --> 05:38.560
一样的结构

05:38.560 --> 05:41.160
只不过它的type就不再是制服串了

05:41.160 --> 05:42.660
它就不再是一个制服串了

05:42.660 --> 05:43.560
而是一个什么呢

05:43.560 --> 05:46.060
而是一个函数

05:46.060 --> 05:47.160
一个函数

05:47.160 --> 05:49.560
因为我们这里app是一个函数

05:49.560 --> 05:51.060
但是如果它是个内组件的话

05:51.060 --> 05:52.360
也是一样道理

05:52.360 --> 05:54.160
如果它是一个内组件的话

05:54.160 --> 05:55.960
保存你看一下

05:55.960 --> 05:57.160
它也是个rex元素

05:57.160 --> 05:57.860
看到没

05:57.860 --> 05:58.260
串点出来

05:58.260 --> 05:59.760
它也是个rex元素

05:59.760 --> 06:01.060
它的内型是class

06:01.060 --> 06:02.860
还有一个内组件app

06:02.860 --> 06:03.760
对吧

06:03.760 --> 06:04.660
总归呢

06:04.660 --> 06:06.360
我们这样子写的表达是

06:06.360 --> 06:07.960
它得到的就是个元素

06:07.960 --> 06:09.760
这里大家可能容易搞混淆

06:09.760 --> 06:11.560
就是认为我这样子写的过后

06:11.560 --> 06:14.260
是不是要溜一个app呢

06:14.260 --> 06:14.960
它实际上

06:14.960 --> 06:16.060
它不是的

06:16.060 --> 06:17.360
它还是通过document

06:17.360 --> 06:19.560
还是通过这个东西创建的

06:19.560 --> 06:20.360
rex

06:20.460 --> 06:21.560
create element

06:21.560 --> 06:22.760
只不过第一个参数里面

06:22.760 --> 06:24.060
它写的不是制服串

06:24.060 --> 06:24.860
写的是什么

06:24.860 --> 06:27.560
写的是内的实力

06:27.560 --> 06:28.860
内的实力

06:28.860 --> 06:30.060
后边写什么属性

06:30.060 --> 06:31.760
指元素都一样

06:31.760 --> 06:33.660
实际上通过这种方式来创建的

06:33.660 --> 06:34.660
比方说属性为辣

06:34.660 --> 06:35.560
没有属性

06:35.560 --> 06:39.160
指元素里面也没啥

06:39.160 --> 06:41.060
比方说啥都没有

06:41.060 --> 06:42.660
保存你看一下

06:42.660 --> 06:43.660
是不是一样的

06:43.660 --> 06:45.560
它是通过这种方式来创建的

06:45.560 --> 06:47.560
最终创建的还是一个rex元素

06:47.560 --> 06:48.360
一定要搞清楚

06:48.960 --> 06:51.060
当然它最终会创建这个对象的

06:51.060 --> 06:52.160
这个内的实力

06:52.160 --> 06:53.860
最终会去另一个app

06:53.860 --> 06:55.560
但是呢

06:55.560 --> 06:57.960
我们写的这个东西

06:57.960 --> 07:01.360
实际上是通过rex

07:01.360 --> 07:03.960
第二create element创建的

07:03.960 --> 07:07.160
像这些东西都是rex元素

07:07.160 --> 07:07.860
没问题吧

07:07.860 --> 07:11.360
咱们先把这个东西理清楚

07:11.360 --> 07:12.260
好

07:12.260 --> 07:13.160
然后呢

07:13.160 --> 07:15.460
我们再来说另外一个东西

07:15.460 --> 07:17.060
叫做rex

07:17.060 --> 07:18.260
节点

07:18.260 --> 07:18.760
哇

07:18.760 --> 07:20.360
就开始复杂起来了

07:20.360 --> 07:22.560
那这两个东西不一样一个东西吗

07:22.560 --> 07:23.760
不是

07:23.760 --> 07:25.660
rex节点

07:25.660 --> 07:28.460
它还不真不是rex元素

07:28.460 --> 07:30.160
rex元素是一个对象

07:30.160 --> 07:32.560
rex节点又是一个对象

07:32.560 --> 07:35.660
或者我们把它叫做

07:35.660 --> 07:36.060
算了

07:36.060 --> 07:39.360
本来它应该叫做rex component

07:39.360 --> 07:41.160
它应该叫做rex component

07:41.160 --> 07:42.660
但是这样子一来了

07:42.660 --> 07:45.060
它又会给你组建对象那些东西

07:45.060 --> 07:46.860
造成那个混淆

07:46.860 --> 07:49.760
就像这些数语翻译真的是不好翻译

07:49.760 --> 07:51.160
因为很模糊

07:51.160 --> 07:51.960
在英文里边

07:51.960 --> 07:53.060
它把它区分得很开

07:53.060 --> 07:54.760
在中文里边有找不到合适的词

07:54.760 --> 07:55.960
把它翻译过来了

07:55.960 --> 08:00.460
所以说这里我们就把它叫做rex节点

08:00.460 --> 08:02.160
rex节点

08:02.160 --> 08:02.460
好

08:02.460 --> 08:04.860
rex节点是什么东西呢

08:04.860 --> 08:12.660
是专门用于渲染到UI界面的对象

08:12.660 --> 08:14.960
它是一个用于专门渲染到UI界面

08:14.960 --> 08:16.260
不要说我们的浏览器

08:16.260 --> 08:17.460
渲染到UI界面什么意思

08:17.460 --> 08:19.060
就渲染成多么对象

08:19.060 --> 08:22.560
它就会渲染成多么对象

08:22.560 --> 08:23.660
这就是rex节点

08:23.660 --> 08:25.560
它还不是多么对象

08:25.560 --> 08:28.360
它是用来渲染到UI界面的对象

08:28.360 --> 08:29.760
这东西我们以前没看见

08:29.760 --> 08:30.660
没见过

08:30.660 --> 08:31.260
没看到过

08:31.260 --> 08:32.460
确实没看到过

08:32.460 --> 08:34.160
因为在元代码里边

08:34.160 --> 08:34.760
它是一个

08:34.760 --> 08:36.560
它里边这些对象

08:36.560 --> 08:38.260
它的内它都是私有的

08:38.260 --> 08:39.360
你是访问不到的

08:39.360 --> 08:40.760
访问不到这个内的

08:40.760 --> 08:42.560
所以我们平时是看不见的

08:42.560 --> 08:43.560
这要涉及到它的

08:43.560 --> 08:45.560
但是你要说它的渲染原理的话

08:45.560 --> 08:47.260
就必须要把它引出来

08:47.260 --> 08:48.460
叫rex节点

08:48.460 --> 08:54.740
它是专门用于渲染到UI界面的对象

08:54.740 --> 08:55.640
一定要区分出这两个

08:55.640 --> 08:57.040
区分清楚这两个

08:57.040 --> 08:58.740
现在就可能有些东西开始云了

08:58.740 --> 09:00.140
rex元素什么意思

09:00.140 --> 09:02.640
它一定是通过这个东西创建的

09:02.640 --> 09:05.640
rex元素一定是通过它来创建的

09:05.640 --> 09:07.340
然后rex节点

09:07.340 --> 09:08.440
它指的是

09:08.440 --> 09:10.040
专门用于渲染到UI界面的对象

09:10.040 --> 09:11.840
我们平时都看不见它

09:11.840 --> 09:14.840
那么这个节点哪来的呢

09:14.840 --> 09:17.540
通常不能说通常

09:17.540 --> 09:24.240
应该说rex元素会

09:24.240 --> 09:28.140
应该这样说rex会根据

09:28.140 --> 09:31.440
会通过rex元素

09:31.440 --> 09:32.940
就通过这个东西

09:32.940 --> 09:34.040
通过这个玩意要创建的

09:34.040 --> 09:35.240
创建的不是创建一个对象吗

09:35.240 --> 09:35.940
对吧

09:35.940 --> 09:39.240
通过这个玩意要创建的对象

09:39.240 --> 09:44.440
通过rex元素创建rex

09:44.440 --> 09:46.240
节点

09:46.240 --> 09:50.640
它会通过这个rex元素来创建rex节点

09:50.640 --> 09:51.340
没问题吧

09:51.340 --> 09:52.840
也就是说我们这里呢

09:52.840 --> 09:54.240
画个图啊

09:54.240 --> 09:56.640
我们的rex元素是怎么创建的

09:56.640 --> 09:58.440
元素是通过create

09:58.440 --> 10:01.340
第二create element创建的对吧

10:01.340 --> 10:02.440
这个创建的东西叫什么

10:02.440 --> 10:03.940
叫rex元素

10:03.940 --> 10:04.940
你看这个单词

10:04.940 --> 10:06.040
element元素吧

10:06.040 --> 10:06.640
对吧

10:06.640 --> 10:07.640
前面一个rex

10:07.640 --> 10:10.040
rex元素

10:10.040 --> 10:12.140
这是rex元素

10:12.140 --> 10:14.840
这个元素到时候渲染的时候

10:14.840 --> 10:18.640
它会把它生成rex节点

10:18.640 --> 10:20.840
这个元素它不会直接渲染到一面

10:20.840 --> 10:22.240
它不会直接渲染到一面了

10:22.240 --> 10:24.740
它是会先生成rex节点

10:24.740 --> 10:27.840
生成到rex节点之后

10:27.840 --> 10:29.640
再把它显示到一面

10:29.640 --> 10:31.240
再把它渲染到一面

10:31.240 --> 10:34.340
其实就是一个显示的过程

10:34.340 --> 10:36.540
把我们的对象变成了真实的动物对象

10:36.540 --> 10:36.740
对吧

10:36.740 --> 10:38.440
这就是渲染

10:38.440 --> 10:41.140
还是先解释一下什么叫渲染

10:41.140 --> 10:42.040
渲染

10:42.040 --> 10:49.740
就是它包括生成用于显示的对象

10:49.740 --> 10:57.040
以及将这些对象形成真实的动物对象

10:57.040 --> 10:58.740
形成真实的动物对象

10:58.740 --> 10:59.940
这就是渲染的过程

10:59.940 --> 11:01.040
因为到了真实动物

11:01.040 --> 11:01.940
我们就可以看得见了

11:01.940 --> 11:02.240
对吧

11:02.240 --> 11:04.640
就可以在页面上能够看得出来了

11:04.640 --> 11:05.840
那么里边内存里面对象

11:05.840 --> 11:06.540
我们是看不见的

11:06.540 --> 11:08.240
它先生成内存里面对象

11:08.240 --> 11:10.840
然后再把对象形成真实的动物对象

11:10.840 --> 11:13.540
它之所以要去招个弯

11:13.540 --> 11:15.140
它没有去直接操作DOM

11:15.140 --> 11:16.340
是因为DOM操作

11:16.340 --> 11:18.240
它的代价是比较昂贵的

11:18.240 --> 11:19.840
我们都知道DOM的操作

11:19.840 --> 11:21.340
实际上是比较费时间的

11:21.340 --> 11:21.740
好热

11:21.740 --> 11:24.680
我把空插拔开一下

11:24.680 --> 11:26.480
所以说它会先在内存里面

11:26.480 --> 11:27.780
去构建这个对象

11:27.780 --> 11:31.080
然后最终会生成真实的动物对象

11:31.080 --> 11:33.680
那么到中间它会进行一些优化

11:33.680 --> 11:35.980
我们后面会详细说

11:35.980 --> 11:37.680
那么这里我们先认识一些数源

11:37.680 --> 11:39.180
刚才说了rex元素

11:39.180 --> 11:39.880
元素是什么

11:39.980 --> 11:42.880
元素就是通过rex create element来创建的

11:42.880 --> 11:43.180
好了

11:43.180 --> 11:45.480
它通过rex元素会生成什么

11:45.480 --> 11:49.880
会生成rex节点

11:49.880 --> 11:51.480
这个节点哪来的呢

11:51.480 --> 11:54.080
这个节点可以通过元素来创建

11:54.080 --> 11:56.980
比方说我们刚才创建的一个元素

11:56.980 --> 11:57.580
对吧

11:57.580 --> 12:00.580
DIV在这

12:00.580 --> 12:02.680
创建了这么一个rex元素

12:02.680 --> 12:03.380
App

12:03.380 --> 12:05.080
那么它就会根据这个元素

12:05.080 --> 12:08.180
来生成节点

12:08.180 --> 12:09.780
没问题吧

12:09.980 --> 12:11.080
来生成节点对象

12:14.280 --> 12:16.180
我要不然这样子再举个例子

12:16.180 --> 12:17.180
这样子再举个例子

12:17.180 --> 12:19.180
比方说我们这里写的是DF

12:19.180 --> 12:20.380
以后我会详细说

12:20.380 --> 12:21.480
以后我会详细说

12:21.480 --> 12:22.380
这里一个HE

12:22.380 --> 12:23.680
这里是标题

12:23.680 --> 12:24.280
这里一个P

12:24.280 --> 12:25.680
这里是段落

12:25.680 --> 12:26.080
好

12:26.080 --> 12:28.080
我们有几个rex元素

12:28.080 --> 12:29.280
是不是只有一个

12:29.280 --> 12:29.580
对吧

12:29.580 --> 12:30.580
只有一个rex元素

12:30.580 --> 12:31.480
只有一个对象

12:31.480 --> 12:32.280
对不对

12:32.280 --> 12:33.380
只有一个rex对象

12:33.380 --> 12:35.480
当然它有止节点

12:35.480 --> 12:36.280
止元素

12:36.280 --> 12:37.980
止元素的话它也是一个

12:37.980 --> 12:39.080
也是一个对象

12:39.080 --> 12:40.080
那么我们比方说

12:40.080 --> 12:42.080
把这个对象拿给rex

12:42.080 --> 12:42.880
来进行渲染

12:42.880 --> 12:45.580
比方说我们在Render里面进行渲染

12:45.580 --> 12:46.780
那么渲染的过程中

12:46.780 --> 12:49.280
它不会把这东西直接拿去渲染

12:49.280 --> 12:50.380
我们把这个变量放进来

12:50.380 --> 12:51.080
可不可以放进来

12:51.080 --> 12:51.780
这个变量

12:51.780 --> 12:52.280
当然可以

12:52.280 --> 12:53.880
为什么不可以

12:53.880 --> 12:55.580
它这里不修实到渲染

12:55.580 --> 12:56.880
你看Render是什么

12:56.880 --> 12:58.480
Render是渲染的意思对吧

12:58.480 --> 12:59.380
渲染谁

12:59.380 --> 13:01.480
渲染rex元素

13:01.480 --> 13:02.480
渲染这个东西

13:02.480 --> 13:03.580
rex元素

13:03.580 --> 13:06.280
但是rex元素在那一步实现的时候

13:06.280 --> 13:08.280
它不会直接参与渲染

13:08.280 --> 13:12.580
它会把它转换成为rex节点

13:12.580 --> 13:15.180
它会把它转换成为rex节点

13:15.180 --> 13:17.380
然后对这个节点再来进行渲染

13:17.380 --> 13:20.080
我们先把这个概念弄清楚

13:20.080 --> 13:22.680
它的内部会进行转换

13:22.680 --> 13:25.480
然后我们再看节点里边

13:25.480 --> 13:27.780
还有什么样的知识

13:27.780 --> 13:28.980
就是这个节点

13:28.980 --> 13:31.080
它不仅仅来源于rex元素

13:31.080 --> 13:32.780
它还可能来自于别的地方

13:32.780 --> 13:37.480
我们把它称之为节点内向

13:37.480 --> 13:45.480
好节点内向有这么一些rex节点内向

13:45.480 --> 13:48.980
有这么一些第一种内向

13:48.980 --> 13:53.280
叫做dom节点

13:53.280 --> 13:55.680
注意这里头的dom节点不是真实的dom

13:55.680 --> 13:56.680
是rexdom

13:56.680 --> 13:58.680
为了避免温的区分开

13:58.680 --> 14:00.080
我后边说的什么dom

14:00.080 --> 14:01.880
都是指的是rexdom

14:01.880 --> 14:03.480
不是真实的dom对象

14:03.480 --> 14:04.580
真实的dom对象

14:04.580 --> 14:05.280
我会强调

14:05.280 --> 14:07.580
这是真实的dom对象

14:07.580 --> 14:09.580
它有这么几个内向

14:09.580 --> 14:10.680
rexdom节点

14:10.680 --> 14:11.880
dom节点的特点是

14:11.880 --> 14:14.280
它为什么就是这个节点内向

14:14.280 --> 14:16.980
它什么情况下会是dom节点的

14:16.980 --> 14:18.980
我这里打个写上

14:18.980 --> 14:20.680
就是什么情况下会是dom节点的

14:20.680 --> 14:26.080
就是创建该节点的rex元素

14:26.080 --> 14:27.780
你看是通过元素创建的节点

14:27.780 --> 14:28.380
对吧

14:28.380 --> 14:32.780
如果这个元素内型是一个制幅创

14:32.780 --> 14:34.180
元素的内型是一个制幅创

14:34.280 --> 14:36.080
那么它又会生成的节点内型

14:36.080 --> 14:38.080
就是dom节点

14:38.080 --> 14:39.180
这个节点后边在渲染的时候

14:39.180 --> 14:40.280
我们又会单独说

14:40.280 --> 14:41.080
到时候这个节点

14:41.080 --> 14:43.180
它就会直接变成一个真实的dom

14:43.180 --> 14:46.480
会把它创建一个真实的dom

14:46.480 --> 14:47.280
也就是说

14:47.280 --> 14:47.480
啥呢

14:47.480 --> 14:48.480
就刚才这个

14:48.480 --> 14:49.680
你看这个节点

14:49.680 --> 14:51.280
这个元素

14:51.280 --> 14:52.880
这个元素最终会生成节点

14:52.880 --> 14:53.980
节点我们看不见

14:53.980 --> 14:54.680
看不见

14:54.680 --> 14:56.080
因为它是内部实现

14:56.080 --> 14:57.080
这是我们的元素

14:57.080 --> 14:57.980
元素在渲染的时候

14:57.980 --> 14:59.280
它会先会生成节点

14:59.280 --> 15:00.580
然后再进行渲染

15:00.580 --> 15:02.280
那么这个节点

15:02.280 --> 15:03.580
你这个元素你看一下

15:03.580 --> 15:04.380
它的内型你看

15:04.380 --> 15:05.580
tif 是不是制幅创

15:05.580 --> 15:06.280
对吧

15:06.280 --> 15:07.780
内型是不是制幅创

15:07.780 --> 15:08.680
没问题吧

15:08.680 --> 15:09.180
哎

15:09.180 --> 15:10.680
这是个制幅创

15:10.680 --> 15:11.480
所以说呢

15:11.480 --> 15:12.380
它生成的节

15:12.380 --> 15:12.780
一会

15:12.780 --> 15:14.280
它的内部生成的节点

15:14.280 --> 15:15.380
这个对象的内型

15:15.380 --> 15:17.780
它就是一个reactsdom节点

15:17.780 --> 15:19.680
它内部会有一些不同的构造

15:19.680 --> 15:21.080
还是来表示

15:21.080 --> 15:22.980
不同的内来表示

15:22.980 --> 15:23.780
还有不同的内

15:23.780 --> 15:24.680
通过比方说

15:24.680 --> 15:25.980
这个实际上在原单码里边

15:25.980 --> 15:26.480
是什么内呢

15:26.480 --> 15:31.280
叫做reactsdomcomponent

15:31.280 --> 15:31.980
所以说我们之前说

15:31.980 --> 15:32.780
dom也是个组件

15:32.780 --> 15:33.480
dom也是个组件

15:33.480 --> 15:35.880
为什么还有名字叫做domcomponent

15:35.880 --> 15:40.880
最多生成节点的内型叫做reactsdomcomponent

15:40.880 --> 15:41.480
你知道就行了

15:41.480 --> 15:43.280
这个我们这里可不分析原

15:43.280 --> 15:44.680
但是我会把这个原理

15:44.680 --> 15:46.280
给大家解释清楚

15:46.280 --> 15:48.080
reactsdom节点

15:48.080 --> 15:49.480
那么还有什么内型啊

15:49.480 --> 15:52.880
还有reacts

15:52.880 --> 15:54.680
真被发翻译了

15:54.680 --> 15:57.180
叫做composites

15:57.180 --> 15:58.180
是这样写吧

15:58.180 --> 16:00.280
复合的

16:00.280 --> 16:02.680
复合的单词是这样写吧

16:02.780 --> 16:04.080
我这个单词真的是恼火

16:04.080 --> 16:05.880
对的混合的

16:05.880 --> 16:08.180
叫做混合的节点

16:08.180 --> 16:08.480
算了

16:08.480 --> 16:09.480
我还是不用这个单词吧

16:09.480 --> 16:11.180
这个单词太抽象了

16:11.180 --> 16:12.880
叫做组件节点

16:12.880 --> 16:14.780
组件节点

16:14.780 --> 16:15.680
一个是dom节点

16:15.680 --> 16:17.180
一个是组件节点

16:17.180 --> 16:19.780
那么这个组件节点是哪来的呢

16:19.780 --> 16:20.680
因为我们刚才说了

16:20.680 --> 16:22.680
reacts元素来创建的节点

16:22.680 --> 16:23.280
对吧

16:23.280 --> 16:24.480
那么这个节点对象

16:24.480 --> 16:26.980
它什么时候会是组件节点

16:26.980 --> 16:32.480
就是创建该节点的reacts

16:32.580 --> 16:33.880
元素

16:33.880 --> 16:38.080
内形是一个函数

16:38.080 --> 16:38.980
或是一个内

16:38.980 --> 16:40.480
但是内本质以上也是一个函数

16:40.480 --> 16:40.880
对吧

16:40.880 --> 16:42.380
但是它内部可以区分

16:42.380 --> 16:43.480
你到底是内组

16:43.480 --> 16:45.680
内组件还是函数组件

16:45.680 --> 16:46.480
我们来看一下吧

16:46.480 --> 16:47.880
比方说刚才这里

16:47.880 --> 16:50.880
我们在这里能写上这么一个app

16:50.880 --> 16:51.280
对吧

16:51.280 --> 16:52.280
写上这么一个东西

16:52.280 --> 16:52.880
咱们来看一下

16:52.880 --> 16:55.480
输出这个app

16:55.480 --> 16:57.080
这里

16:57.080 --> 16:57.480
保存啊

16:57.480 --> 16:58.780
你看一下这个

16:58.780 --> 16:59.680
它到底是什么呢

16:59.680 --> 17:00.680
它内形你看

17:00.680 --> 17:01.280
是不是class

17:01.280 --> 17:01.680
对吧

17:01.680 --> 17:02.680
class是不是函数

17:02.680 --> 17:04.080
对不对

17:04.080 --> 17:05.080
当然它是函数组件的话

17:05.080 --> 17:06.480
就是一个方形

17:06.480 --> 17:07.380
也就是它的内形

17:07.380 --> 17:08.580
它type属性

17:08.580 --> 17:09.480
它内形呢

17:09.480 --> 17:10.480
如果是一个函数

17:10.480 --> 17:11.880
或者是一个内的话

17:11.880 --> 17:15.180
那么它的节点内形是组件节点

17:15.180 --> 17:16.280
它是组件节点

17:16.280 --> 17:17.080
不同的节点内形

17:17.080 --> 17:18.380
它的处理不一样哦

17:18.380 --> 17:18.780
注意哦

17:18.780 --> 17:19.980
它的处理是不一样的哦

17:19.980 --> 17:21.080
一会

17:21.080 --> 17:21.480
好

17:21.480 --> 17:23.080
这是组件节点

17:23.080 --> 17:24.080
咱们来看一下

17:24.080 --> 17:25.280
再继续

17:25.280 --> 17:26.980
reacts节点里面还有什么呢

17:26.980 --> 17:28.580
都还有

17:28.580 --> 17:29.580
还有什么呢

17:29.680 --> 17:31.180
还有就是

17:31.180 --> 17:33.180
text load

17:34.480 --> 17:35.680
节点

17:35.680 --> 17:37.180
叫做文本节点

17:37.180 --> 17:38.780
前面还是加上一个reacts

17:38.780 --> 17:39.520
后边我们说了什么

17:39.520 --> 17:40.180
dome节点

17:40.180 --> 17:40.680
组件节点

17:40.680 --> 17:41.180
文本节点

17:41.180 --> 17:42.980
都是指的是reacts节点

17:42.980 --> 17:44.580
不是真实的东西

17:44.580 --> 17:45.580
文本节点

17:45.580 --> 17:46.880
这种节点是什么意思呢

17:46.880 --> 17:47.780
这种节点呢

17:47.780 --> 17:49.880
是由制服创创节

17:49.880 --> 17:52.680
有制服创创节的

17:52.680 --> 17:53.280
也就是说

17:53.280 --> 17:54.480
它不是由什么

17:54.480 --> 17:56.680
不是由reacts元素来创建

17:56.680 --> 17:58.980
不是由reacts元素来创建的

17:58.980 --> 17:59.780
reacts元素里面

17:59.780 --> 18:01.180
我们可以通过create elements

18:01.180 --> 18:01.580
对吧

18:01.580 --> 18:03.780
来创建一个reacts元素

18:03.780 --> 18:04.680
那么这里的

18:04.680 --> 18:06.380
它是通过制服创来创建的

18:06.380 --> 18:08.380
这叫text load节点

18:09.380 --> 18:10.980
那么这种节点怎么来的呢

18:10.980 --> 18:12.680
你看这里

18:12.680 --> 18:14.980
我就没法给它输出了

18:14.980 --> 18:16.780
我这里可不可以是个制服创

18:18.280 --> 18:19.780
可不可以

18:19.780 --> 18:20.280
你看

18:20.280 --> 18:21.880
这个制服创它仍然可以渲染的

18:21.880 --> 18:23.980
可以把这个制服创直接渲染到一面

18:23.980 --> 18:25.180
保存你看一下吧

18:25.180 --> 18:26.480
你看是不是Hello World

18:26.480 --> 18:27.180
对吧

18:27.280 --> 18:28.280
你看divenin里边

18:28.280 --> 18:29.180
它就是个Hello World

18:29.180 --> 18:29.380
对吧

18:29.380 --> 18:30.780
制服创也可以渲染的

18:30.780 --> 18:32.580
任何要渲染的东西

18:32.580 --> 18:33.880
任何要渲染的东西

18:33.880 --> 18:34.880
它一定是

18:34.880 --> 18:36.580
它一定会生成节点

18:36.580 --> 18:38.180
它没有节点是不能渲染的

18:38.180 --> 18:39.480
它最终渲染到页面上

18:39.480 --> 18:40.980
形成真实的动物元素

18:40.980 --> 18:42.880
它一定是通过节点来渲染的

18:42.880 --> 18:44.680
这个大家一定要注意

18:44.680 --> 18:46.280
再打个

18:46.280 --> 18:46.780
多写

18:46.780 --> 18:47.880
详细点

18:47.880 --> 18:49.580
reacts

18:49.580 --> 18:50.580
实际上是谁在渲染的

18:50.580 --> 18:51.880
还不是reacts这个酷

18:51.880 --> 18:53.380
是reacts动物这个酷

18:53.380 --> 18:55.180
是这个酷在去进行渲染

18:57.280 --> 19:00.480
一定是通过reacts

19:00.480 --> 19:01.680
节点

19:01.680 --> 19:04.280
来进行渲染的

19:04.280 --> 19:05.680
它不会直接通过reacts

19:05.680 --> 19:06.780
ediments来渲染

19:06.780 --> 19:09.280
而通过reacts节点来渲染的

19:09.280 --> 19:09.780
也就是说

19:09.780 --> 19:11.280
哪怕你给它的是一个制服创

19:11.280 --> 19:12.280
你要渲染一个制服创

19:12.280 --> 19:14.180
它也会把这个制服创

19:14.180 --> 19:16.880
先生成一个reacts节点

19:16.880 --> 19:17.880
生成节点过

19:17.880 --> 19:19.780
可能你以后在不同的教程里边

19:19.780 --> 19:20.980
万一以后

19:20.980 --> 19:21.680
一般的情况下

19:21.680 --> 19:22.580
国内你看到的教程

19:22.580 --> 19:24.980
不会有讲这么讲这么详细的

19:24.980 --> 19:25.780
可能有的时候

19:25.780 --> 19:26.480
看到一些教程里面

19:26.480 --> 19:28.080
用的不是节点这个词

19:28.080 --> 19:29.180
节点这个词

19:29.180 --> 19:31.280
我是自己发明的

19:31.280 --> 19:31.680
不然的话

19:31.680 --> 19:32.480
我就没法解释到

19:32.480 --> 19:34.380
我不能说这里是reacts组件

19:34.380 --> 19:35.180
组件这个词

19:35.180 --> 19:37.180
就容易跟我们写的组件搞成

19:37.180 --> 19:37.980
造成混淆

19:37.980 --> 19:39.280
我刚才把它用成节点

19:39.280 --> 19:41.380
总之你听懂就行了

19:41.380 --> 19:43.680
你到时候如果看到一些教程里边

19:43.680 --> 19:44.080
它会讲了

19:44.080 --> 19:46.380
如果讲了非常详细的话

19:46.380 --> 19:47.380
那么你会发现

19:47.380 --> 19:49.480
如果它讲了没问题的话

19:49.480 --> 19:50.380
讲了都差不多

19:50.380 --> 19:51.980
那么它可能用的是别的词

19:51.980 --> 19:53.080
大家注意一下

19:53.080 --> 19:55.080
reacts动物它渲染的时候

19:55.080 --> 19:56.980
它一定是通过这个节点来进行渲染的

19:56.980 --> 19:58.780
哪怕你给它一个字幕串

19:58.780 --> 20:00.780
它都要把它生成一个节点

20:00.780 --> 20:03.280
然后来进行渲染

20:03.280 --> 20:04.780
不要这个意思吧

20:04.780 --> 20:07.180
叫take some load的节点

20:07.180 --> 20:07.980
好继续

20:07.980 --> 20:10.280
继续

20:10.280 --> 20:12.780
然后还有一种节点

20:12.780 --> 20:14.380
叫做reacts

20:14.380 --> 20:15.480
amity

20:15.480 --> 20:16.580
叫做空节点

20:16.580 --> 20:18.580
我们把这个东西叫做文本节点

20:18.580 --> 20:19.680
文本节点

20:19.680 --> 20:22.380
这个叫东西叫做空节点

20:22.380 --> 20:23.880
空节点有什么创建的

20:23.880 --> 20:28.880
它是由 now undefined force

20:28.880 --> 20:30.380
有这些字面量

20:30.380 --> 20:31.580
有这些得到了表达

20:31.580 --> 20:33.780
或者说表达是得到的结果是 now

20:33.780 --> 20:35.980
是 undefined 是 force

20:35.980 --> 20:38.780
由这些东西来创建的节点

20:38.780 --> 20:39.980
叫做空节点

20:39.980 --> 20:41.980
叫做reacts空节点

20:41.980 --> 20:42.780
那么比方说

20:42.780 --> 20:44.380
我们这里渲染的时候

20:44.380 --> 20:45.580
我让它渲染一个 force

20:45.580 --> 20:46.380
它能不能渲染

20:46.380 --> 20:47.780
它肯定是可以渲染的

20:47.780 --> 20:48.180
告诉你

20:48.180 --> 20:49.980
它一定是可以渲染的

20:49.980 --> 20:50.980
渲染一个 force

20:50.980 --> 20:52.080
你看是不是渲染出来了

20:52.080 --> 20:52.980
它没爆出嘛

20:53.680 --> 20:55.080
我们这里看一下

20:55.080 --> 20:57.280
reacts里边的组件数里边

20:57.280 --> 20:59.280
你看不到任何东西

20:59.280 --> 21:00.980
但是它节点存不存在

21:00.980 --> 21:02.580
节点实际上是存在的

21:02.580 --> 21:04.180
只不过它是一个空节点

21:04.180 --> 21:06.480
这个空节点你看不见

21:06.480 --> 21:07.480
它也是个对象

21:07.480 --> 21:08.180
注意

21:08.180 --> 21:10.280
它节点也是个对象

21:10.280 --> 21:11.780
比方说给它写个 now

21:16.780 --> 21:17.480
给它写个 now

21:17.480 --> 21:18.680
或者是 undefined

21:18.680 --> 21:20.280
都行

21:20.280 --> 21:22.580
保存你看一下

21:22.580 --> 21:24.080
还是看不见任何东西

21:24.080 --> 21:25.280
这些也是节点

21:25.280 --> 21:27.880
它也会生成节点对象

21:27.880 --> 21:31.680
只不过它的节点类型是空节点

21:31.680 --> 21:31.880
好

21:31.880 --> 21:33.480
以后我们讲到什么文闷节点

21:33.480 --> 21:34.680
则是这个

21:34.680 --> 21:35.980
什么空节点则是这个

21:35.980 --> 21:37.180
先把这个概念理清楚

21:37.180 --> 21:38.180
主节节点则是这个

21:38.180 --> 21:39.380
动物节点则是这个

21:39.380 --> 21:40.880
还有一种节点

21:40.880 --> 21:42.080
都还有

21:42.080 --> 21:43.380
还叫做reacts

21:43.380 --> 21:45.080
数组节点

21:45.080 --> 21:47.480
数组节点

21:47.480 --> 21:49.180
该节点

21:49.180 --> 21:53.180
由一个数组创建

21:53.180 --> 21:56.580
它是由一个数组来创建的这么一个节点

21:56.580 --> 21:58.880
这些节点都是可以进行渲染的

21:58.880 --> 22:01.180
都是可以进行渲染的

22:01.180 --> 22:02.080
除此之外

22:02.080 --> 22:03.480
没了

22:03.480 --> 22:06.880
一共就有这么一些节点

22:06.880 --> 22:08.080
没问题吧

22:08.080 --> 22:08.980
好好看一下

22:08.980 --> 22:10.480
好好地去看一下

22:10.480 --> 22:11.780
这些节点哪来的

22:11.780 --> 22:12.380
有一个数组存在

22:12.380 --> 22:13.980
我们来看一下数组

22:13.980 --> 22:14.980
比方说我们这里

22:14.980 --> 22:16.180
可能可以给它写个数组

22:16.180 --> 22:16.980
你看着

22:16.980 --> 22:17.780
可以给它写个数组

22:17.880 --> 22:20.280
3567

22:20.280 --> 22:20.880
比方说

22:20.880 --> 22:21.880
写成一个数组

22:21.880 --> 22:22.780
你看数组扔进去

22:22.780 --> 22:24.080
你看是不是渲染出来了

22:24.080 --> 22:24.480
对吧

22:24.480 --> 22:26.880
我们来看一下这个组建数

22:26.880 --> 22:28.080
你看渲染出来就是

22:28.080 --> 22:30.080
把数组里面一次来渲染就完了

22:30.080 --> 22:31.680
数组里面3567

22:31.680 --> 22:33.680
你看就渲染出来了

22:33.680 --> 22:34.980
它是一个数组

22:34.980 --> 22:36.280
数组也可以渲染

22:36.280 --> 22:37.580
那么数组得到了节点

22:37.580 --> 22:38.980
叫做数组节点

22:38.980 --> 22:41.380
数组节点依然可以渲染

22:41.380 --> 22:43.680
咱们先把这个概念认识清楚

22:43.680 --> 22:44.880
再来过一次

22:44.880 --> 22:46.480
什么叫reacts元素

22:46.480 --> 22:48.080
我们平时写的GSX

22:48.080 --> 22:49.580
得到的就是reacts元素

22:49.580 --> 22:51.080
元素通常情况下

22:51.080 --> 22:54.480
元素它最终会变成节点

22:54.480 --> 22:54.880
对吧

22:54.880 --> 22:57.680
但是节点它不一定来自于元素

22:57.680 --> 22:58.780
它可能来自于别的地方

22:58.780 --> 22:59.680
比方说

22:59.680 --> 23:00.680
什么now

23:00.680 --> 23:02.180
undefined force

23:02.180 --> 23:03.880
输足文本这些东西

23:03.880 --> 23:05.680
都可以变成节点

23:05.680 --> 23:06.780
当然

23:06.780 --> 23:10.480
很多时候我们看到的都是有元素

23:10.480 --> 23:14.280
都是有元素创建的节点

23:14.480 --> 23:17.280
但是节点是可以有这些东西创建的

23:17.280 --> 23:18.480
咱们先把这个东西搞清楚

23:18.480 --> 23:20.080
那么为大家一个问题

23:20.080 --> 23:21.080
渲染的时候

23:21.080 --> 23:23.080
它是把谁渲染出来的

23:23.080 --> 23:25.080
是元素还是节点

23:25.080 --> 23:26.680
是节点对吧

23:26.680 --> 23:29.080
它最终是把节点变成什么

23:29.080 --> 23:30.980
变成真实的UI

23:30.980 --> 23:32.680
UI界面

23:32.680 --> 23:37.480
最终是把节点变成UI界面

23:37.480 --> 23:40.680
咱们这里要不然就截个图

23:40.680 --> 23:43.880
截个图放到那个马克档里面

23:43.880 --> 23:47.980
我们这几个图

23:47.980 --> 23:54.260
然后到这边来复制一下

23:56.260 --> 23:57.260
看一下

23:57.260 --> 24:01.490
看一下那个马克档里面

24:01.490 --> 24:02.090
出来了

24:02.090 --> 24:03.290
都图片出来了

24:03.290 --> 24:05.290
ok 这几个图

24:05.290 --> 24:08.290
好 这是关于这几个概念

24:08.290 --> 24:10.290
想要搞清楚

24:10.290 --> 24:10.890
好

24:10.890 --> 24:12.990
那么搞清楚这个概念之后

24:12.990 --> 24:14.890
后边我们说到它们动物节点

24:14.890 --> 24:16.890
组建节点都是指的是这些东西

24:16.890 --> 24:18.590
然后咱们再说一个数语

24:18.590 --> 24:20.790
就是真实动物

24:20.790 --> 24:23.190
真实动物

24:23.190 --> 24:24.790
真实动物

24:24.790 --> 24:26.590
真实动物是什么意思呢

24:26.590 --> 24:29.990
就是通过document

24:29.990 --> 24:31.790
create element

24:31.790 --> 24:34.590
创建的动物元素

24:34.590 --> 24:36.090
就是说白了

24:36.090 --> 24:37.790
就是页面上显色动物元素

24:37.790 --> 24:39.090
这叫真实动物

24:39.090 --> 24:39.990
所以说我后边说到

24:39.990 --> 24:43.290
怎么真实动物都是指的这个东西

24:43.290 --> 24:44.790
我们说的动物指的是

24:44.790 --> 24:47.190
regard节点内销

24:47.190 --> 24:47.890
好了

24:47.890 --> 24:48.890
咱们先来认识

24:48.890 --> 24:51.090
把这些数语认识清楚

24:51.090 --> 24:54.290
认识清楚

24:54.290 --> 24:55.690
然后呢

24:55.690 --> 24:56.490
然后呢

24:56.490 --> 24:58.290
我们再来看

24:58.290 --> 25:01.380
下边的东西

25:01.380 --> 25:02.380
那么这节课呢

25:02.380 --> 25:04.380
我们首先讲的是react

25:04.380 --> 25:05.980
首次渲染的时候

25:05.980 --> 25:06.980
它会做什么事情

25:06.980 --> 25:09.380
首次渲染往往是比较简单的

25:09.380 --> 25:11.380
其实说首次渲染的时候呢

25:11.380 --> 25:13.380
其实我也在同时说什么东西呢

25:13.380 --> 25:16.280
也在同时说它的新节点

25:16.280 --> 25:17.680
如何渲染

25:17.680 --> 25:19.280
就是以前没有这个节点

25:19.280 --> 25:20.680
那么现在多了这个节点了

25:20.680 --> 25:23.080
那么它该如何来渲染

25:23.080 --> 25:24.580
如何来进行渲染

25:24.580 --> 25:25.580
好

25:25.580 --> 25:27.180
我们这里呢

25:27.180 --> 25:28.180
两个标题

25:28.180 --> 25:30.280
就是首次渲染

25:30.280 --> 25:31.980
先把首次渲染搞清楚

25:31.980 --> 25:32.280
好

25:32.280 --> 25:33.080
首次渲染的话

25:33.080 --> 25:37.520
我们也就也叫做把它叫做新节点渲染

25:37.520 --> 25:40.120
新节点渲染

25:40.120 --> 25:41.620
注意说的是节点

25:41.620 --> 25:44.720
渲染节点渲染的永远是节点

25:44.720 --> 25:45.020
好

25:45.020 --> 25:46.720
首次渲染的时候呢

25:46.720 --> 25:48.320
首先它当然它肯定要判断

25:48.320 --> 25:49.220
是不是首次

25:49.220 --> 25:50.020
这个很好判断

25:50.020 --> 25:50.420
对吧

25:50.420 --> 25:51.720
如果你自己写这个函数的话

25:51.720 --> 25:53.120
你通过一个变量都可以判断

25:53.120 --> 25:53.520
对不对

25:53.520 --> 25:54.520
标注一下

25:54.520 --> 25:55.320
第一次

25:55.320 --> 25:56.820
一开始把变量设为4

25:56.820 --> 25:57.720
ease first

25:57.720 --> 25:58.720
把设为true对吧

25:58.720 --> 25:59.520
它为true的时候呢

25:59.520 --> 26:01.320
把渲染渲染过后把它设为force

26:01.320 --> 26:01.520
对吧

26:01.520 --> 26:02.920
就完事了

26:02.920 --> 26:04.720
那么当它首次渲染的时候呢

26:04.720 --> 26:07.020
页面上啥都没有

26:07.020 --> 26:07.420
对不对

26:07.420 --> 26:09.420
啥都没有

26:09.420 --> 26:11.220
所以说它这个时候呢

26:11.220 --> 26:12.620
以前什么都没做

26:12.620 --> 26:13.320
那么这个时候呢

26:13.320 --> 26:15.820
它要全部重新构建

26:15.820 --> 26:17.120
也就是说一个新节点

26:17.120 --> 26:19.320
它是如何渲染出来了

26:19.320 --> 26:20.220
那么这里呢

26:20.220 --> 26:21.820
我们在首次渲染的时候

26:21.820 --> 26:22.820
挨在的说

26:22.820 --> 26:24.120
挨在的说

26:24.120 --> 26:26.320
那么这里我们是不是要传一个参数进去

26:26.320 --> 26:28.420
是不是要传一个什么

26:28.420 --> 26:30.620
只要能够生成节点的东西都可以传进去

26:30.620 --> 26:31.120
对吧

26:31.120 --> 26:32.920
只要能够生成节点的都可以传进去

26:32.920 --> 26:34.320
比方说能不能传一个数组

26:34.320 --> 26:35.420
可不可以传一个数组

26:35.420 --> 26:35.820
可以

26:35.820 --> 26:37.620
输主可以生成数组节点吗

26:37.620 --> 26:38.620
看一下前面

26:38.620 --> 26:40.720
输主是可以生成数组节点的

26:40.720 --> 26:41.520
没问题

26:41.520 --> 26:42.820
能不能传nowforce

26:42.820 --> 26:43.720
可不可以传

26:43.720 --> 26:45.720
可以只要能生成节点就行

26:45.720 --> 26:47.120
能不能传个动物节点

26:47.120 --> 26:49.320
可不可以通过GSX表达式

26:49.420 --> 26:51.420
或者是crease element来创建

26:51.420 --> 26:52.220
也可以传

26:52.220 --> 26:53.420
能不能传主键都可以传

26:53.420 --> 26:55.120
能不能传文本都可以传

26:55.120 --> 26:56.120
都可以传

26:56.120 --> 26:57.920
只要能生成节点就行

26:57.920 --> 26:59.620
那么问大家一个问题

26:59.620 --> 27:01.720
这里能不能传一个对象

27:01.720 --> 27:05.820
能不能传一个普通对象

27:05.820 --> 27:07.720
能不能这样子传

27:07.720 --> 27:08.520
保存你看一下吧

27:10.820 --> 27:12.020
是抱错了

27:12.020 --> 27:14.320
这个错误你应该见过

27:14.320 --> 27:15.820
应该见过

27:15.820 --> 27:16.320
以后呢

27:16.320 --> 27:16.920
我们

27:16.920 --> 27:17.720
之后我们

27:17.720 --> 27:18.520
后面演示的时候

27:18.520 --> 27:19.720
还会见到这个错误

27:19.720 --> 27:20.620
他说什么

27:20.620 --> 27:22.920
他说这个Object有普通对象

27:22.920 --> 27:25.820
它不是一个可用的Ragged child

27:25.820 --> 27:27.920
Ragged就是元素

27:27.920 --> 27:29.020
原来是指元素

27:30.420 --> 27:31.220
那么这里呢

27:32.620 --> 27:34.720
也就是说我们刚才看到了这些

27:34.720 --> 27:37.520
有没有说一个普通对象能创建节点的

27:37.520 --> 27:38.420
没有吧

27:38.420 --> 27:41.020
所以说你这里是不能创建普通对象的

27:41.020 --> 27:43.820
普通对象是无法进行渲染的

27:43.820 --> 27:46.020
普通对象就是无法进行渲染的

27:46.020 --> 27:48.020
说不能传普通对象

27:48.020 --> 27:49.420
没问题吧

27:49.520 --> 27:50.820
那么咱们来看

27:50.820 --> 27:51.920
手持圈的的话

27:51.920 --> 27:54.020
一定是给了他一个节点

27:54.020 --> 27:56.420
一定是给了他一个节点

27:56.420 --> 27:58.020
那么拿到这个节点之后

28:00.120 --> 28:01.020
从参数中

28:02.120 --> 28:05.320
从参数中获取

28:05.320 --> 28:06.220
从参数中

28:07.920 --> 28:09.020
通过参数的值

28:09.020 --> 28:10.320
应该这样说

28:10.320 --> 28:12.020
通过参数的值

28:13.720 --> 28:15.620
创建节点

28:15.620 --> 28:16.620
创建节点

28:16.620 --> 28:17.420
这是手持圈的

28:18.420 --> 28:19.720
那么这个参数的值

28:19.720 --> 28:20.320
是什么

28:20.320 --> 28:21.920
当然他要必须要能够创建节点

28:21.920 --> 28:23.520
比方说你给他一个元素可以

28:23.520 --> 28:24.820
给他这两个都是元素

28:24.820 --> 28:25.120
对吧

28:25.120 --> 28:26.020
原来是元素

28:26.020 --> 28:27.620
你给他一个什么文本可以

28:27.620 --> 28:28.920
给他一个空节点可以

28:28.920 --> 28:30.420
给他这些东西都可以

28:30.420 --> 28:31.620
给他数组也可以

28:31.620 --> 28:33.020
因为这些东西都能创建节点

28:33.020 --> 28:35.420
总之通过参数的值来创建节点

28:35.420 --> 28:36.620
这是要他要做的事情

28:38.120 --> 28:39.920
那么创建好了节点之后

28:39.920 --> 28:41.620
他只能拿到一个节点对象了

28:41.620 --> 28:42.520
对不对

28:42.520 --> 28:43.320
比方说吧

28:43.320 --> 28:45.120
咱们这里写了一个什么数组

28:45.120 --> 28:46.020
对吧

28:46.020 --> 28:46.520
不同的节点

28:46.620 --> 28:48.020
还有不同的不同的做法

28:49.020 --> 28:50.120
那么我们一个个说

28:50.120 --> 28:51.120
这些不同的节点

28:51.120 --> 28:52.920
该做会做什么事情

28:53.520 --> 28:54.420
会做什么事情

28:56.750 --> 29:00.450
一个根据不同的不同的节点

29:02.450 --> 29:04.050
做不同的事情

29:05.050 --> 29:05.850
做什么事情

29:05.850 --> 29:06.650
分开来说

29:08.150 --> 29:09.850
如果你是一个

29:09.850 --> 29:10.650
比方说

29:10.650 --> 29:12.050
我们先说简单的

29:12.050 --> 29:13.550
如果你是一个文本节点

29:15.450 --> 29:16.250
文本节点

29:17.250 --> 29:18.350
如果你给他的

29:18.350 --> 29:19.550
就是一个文本节点

29:19.550 --> 29:20.550
那么他做什么事情

29:21.550 --> 29:23.150
他做的事情很简单

29:23.150 --> 29:29.950
就是通过 document create text load

29:30.550 --> 29:31.150
我写对没

29:31.150 --> 29:31.950
我的天啊

29:31.950 --> 29:33.550
很少用了

29:33.550 --> 29:34.550
就是经常忘记

29:34.550 --> 29:36.950
所以说你让我去记 API

29:36.950 --> 29:38.350
我反正自己是记不住的

29:38.350 --> 29:39.350
create text load

29:39.350 --> 29:40.150
对

29:40.150 --> 29:41.350
这是不是原生的

29:41.350 --> 29:42.350
原生的动物操作

29:42.350 --> 29:42.950
对不对

29:42.950 --> 29:44.550
创建一个文本节点

29:44.550 --> 29:45.350
对不对

29:45.450 --> 29:46.850
把文本写进去

29:46.850 --> 29:47.250
就完事了

29:47.250 --> 29:48.050
就这么简单

29:48.050 --> 29:48.850
就这么简单

29:50.350 --> 29:51.650
通过这个东西

29:51.650 --> 29:52.450
创建

29:54.450 --> 29:58.450
创建真实的文本节点

29:58.450 --> 29:59.250
这里是

29:59.250 --> 29:59.550
注意啊

29:59.550 --> 30:01.350
是真实的文本节点

30:01.350 --> 30:02.150
就真实的

30:02.150 --> 30:03.350
load了

30:03.350 --> 30:04.150
我们知道

30:04.150 --> 30:05.150
多么对象就是

30:05.150 --> 30:06.350
一面上所有东西都是节点

30:06.350 --> 30:07.150
对不对

30:07.150 --> 30:08.050
真实的节点

30:08.050 --> 30:09.550
通过他的创建

30:09.550 --> 30:10.450
但是你要注意

30:10.450 --> 30:11.950
他现在不会把这些东西

30:11.950 --> 30:13.250
加到一面上

30:13.250 --> 30:13.950
现在不会加

30:13.950 --> 30:14.950
后边才会加

30:14.950 --> 30:16.550
后边才会一起加

30:16.550 --> 30:17.950
那么先把创建好

30:17.950 --> 30:19.450
创建好

30:19.450 --> 30:21.150
那么如果遇到的是一个

30:21.150 --> 30:22.150
不是文本节点

30:22.150 --> 30:24.550
如果遇到的是空节点

30:24.550 --> 30:25.350
空节点

30:25.350 --> 30:26.450
那么他空节点

30:26.450 --> 30:27.350
他什么都不显示

30:27.350 --> 30:28.550
所以说他自然而然

30:28.550 --> 30:31.250
他不会创建任何的真实动物

30:31.250 --> 30:31.950
但是呢

30:31.950 --> 30:33.350
这个对象会站位

30:33.350 --> 30:35.350
这个对象会存在

30:35.350 --> 30:37.450
虽然他什么都没有做

30:37.450 --> 30:38.550
什么都没有做

30:38.550 --> 30:40.250
什么都不做

30:40.250 --> 30:40.850
但是呢

30:40.850 --> 30:42.650
这个节点对象是存在的

30:42.650 --> 30:44.050
这个节点对象是存在的

30:45.350 --> 30:45.950
好 再来

30:47.050 --> 30:47.550
然后呢

30:47.550 --> 30:50.350
如果是数组节点

30:51.950 --> 30:53.450
如果是Ragged数组节点

30:54.850 --> 30:56.450
如果是数组节点干嘛呢

30:56.450 --> 30:57.450
便利数组

30:58.450 --> 30:59.250
便利数组

31:00.950 --> 31:02.550
然后干嘛呢

31:02.550 --> 31:03.050
然后呢

31:03.050 --> 31:05.950
将数组每一项

31:07.650 --> 31:10.650
从每一项地规

31:11.750 --> 31:12.250
每一项地规

31:12.250 --> 31:13.250
什么叫每一项地规

31:13.250 --> 31:14.450
又从这个这一项开始

31:14.850 --> 31:16.650
便利把数组的第一项拿出来

31:16.650 --> 31:18.750
用数组的第一项来创建节点

31:18.750 --> 31:19.150
然后呢

31:19.150 --> 31:22.150
又根据节点不同的类型做不同的事情

31:22.150 --> 31:23.050
如果

31:23.050 --> 31:24.450
然后做了一些事情过后

31:24.450 --> 31:25.950
然后数组的第二项又拿出来

31:25.950 --> 31:27.850
通过它来创建节点

31:27.850 --> 31:29.250
明白的意思吧

31:29.250 --> 31:30.950
就是把数组进行便利

31:30.950 --> 31:32.150
数组的每一项

31:32.150 --> 31:33.450
然后进行地规

31:33.450 --> 31:34.250
进行地规

31:35.750 --> 31:37.450
再数组的每一项地规

31:37.450 --> 31:38.350
创建节点

31:39.850 --> 31:41.450
就是回到第一步

31:41.450 --> 31:42.250
回到第一步

31:43.250 --> 31:44.250
一步

31:47.250 --> 31:47.850
进行

31:49.050 --> 31:49.850
反复操作

31:50.950 --> 31:53.050
直到便利结束

31:55.050 --> 31:56.050
这是数组的情况

31:58.250 --> 31:58.450
好

31:58.450 --> 31:59.050
然后再来

32:00.250 --> 32:01.050
还有什么

32:01.050 --> 32:02.450
是不是只剩下动物节点了

32:02.450 --> 32:03.850
动物节点和组建节点了

32:03.850 --> 32:04.350
对不对

32:04.350 --> 32:05.550
好来动物节点

32:09.680 --> 32:11.080
动物节点干嘛呢

32:11.080 --> 32:12.280
动物节点呢

32:12.280 --> 32:13.280
他做这么一件事

32:13.280 --> 32:16.280
就是通过 document

32:17.280 --> 32:17.880
create

32:17.880 --> 32:18.480
什么

32:19.680 --> 32:20.480
animate

32:21.080 --> 32:23.880
创建真实的动物对象

32:24.980 --> 32:26.680
他创建真实的动物对象

32:26.680 --> 32:27.480
他只是创建

32:27.480 --> 32:28.880
现在还不做任何事情

32:28.880 --> 32:30.980
还不会把它加到页面上

32:30.980 --> 32:32.480
他只是在做创建

32:32.480 --> 32:33.880
创建真实的动物对象

32:35.080 --> 32:36.080
然后干嘛呢

32:36.080 --> 32:37.280
然后还有件事情要做

32:37.980 --> 32:38.780
然后

32:39.780 --> 32:43.580
便利该节点的

32:45.080 --> 32:46.580
这个节点是谁创建的

32:46.580 --> 32:48.280
是不是由 react 元素创建的

32:48.280 --> 32:50.180
元素里边是不是有一个这个东西

32:50.180 --> 32:51.980
我这里把他去掉了

32:51.980 --> 32:54.380
元素里边他不是有个这个东西吗

32:54.380 --> 32:55.380
div

32:56.580 --> 32:59.180
不要说hp

32:59.980 --> 33:00.980
我们看一下

33:00.980 --> 33:01.980
打印出来

33:02.980 --> 33:04.380
你看这是不是通过元素创建的

33:04.380 --> 33:06.280
元素里边不是有个 children 属性吗

33:06.280 --> 33:06.880
对吧

33:06.880 --> 33:07.780
便利它

33:08.380 --> 33:09.380
便利它

33:09.380 --> 33:11.180
这个 children 有可能是一个素主

33:11.180 --> 33:12.180
有可能是单个对象

33:12.180 --> 33:13.980
如果他只有一个指元素的话

33:15.380 --> 33:16.880
就只有一个指元素的话

33:16.880 --> 33:19.580
那么他自然而然是一个单个对象

33:19.580 --> 33:20.180
对吧

33:20.180 --> 33:21.280
children 就是一个单个对象

33:21.280 --> 33:22.380
不用便利的

33:22.380 --> 33:23.780
如果他是一个素主的话

33:23.780 --> 33:25.280
如果他有多个指元素的话

33:25.280 --> 33:26.180
那么你会看到

33:27.180 --> 33:28.780
你看到他的素主是长度为二

33:28.780 --> 33:29.080
对吧

33:29.080 --> 33:30.180
children 长度为二

33:30.980 --> 33:31.580
没问题吧

33:32.580 --> 33:32.980
那么

33:32.980 --> 33:34.680
就说如果你这个节点

33:34.680 --> 33:36.180
创建的节点是一个

33:36.180 --> 33:38.180
真是一个多么节点

33:38.180 --> 33:40.580
那么他首先通过他创建真设多么对象

33:40.580 --> 33:41.880
然后便利

33:42.680 --> 33:46.180
对应react元素的

33:46.780 --> 33:47.980
children 属性

33:49.180 --> 33:50.180
便利他的属性

33:50.980 --> 33:52.880
然后第一规操作

33:52.880 --> 33:53.380
怎么第一规

33:53.380 --> 33:54.380
是不是又回到第一步

33:54.380 --> 33:55.480
把属性一个个拿到

33:55.480 --> 33:57.180
又回到第一步反复操作

33:57.180 --> 33:58.180
直到便利结束

33:59.080 --> 33:59.980
这是多么节点

33:59.980 --> 34:00.380
好

34:00.380 --> 34:01.180
那么主键节点

34:01.180 --> 34:02.180
我们先暂时不说

34:02.180 --> 34:02.880
主键节点

34:02.880 --> 34:05.580
它可能过程肯定更多

34:05.580 --> 34:07.180
但是我们先把这个东西说清楚

34:07.780 --> 34:08.780
先把这几个说清楚

34:09.780 --> 34:10.380
比方说

34:11.380 --> 34:11.980
咱们

34:12.680 --> 34:13.780
干干嘛呢

34:14.780 --> 34:16.980
这里我们首先在这里

34:16.980 --> 34:18.380
就写这么个div

34:18.380 --> 34:19.380
写这么个div

34:19.980 --> 34:20.880
为了

34:21.880 --> 34:23.180
更加方便说明问题的话

34:23.180 --> 34:23.580
我这里

34:24.080 --> 34:26.080
H1里边有个制补串

34:27.080 --> 34:27.780
标题

34:28.180 --> 34:30.280
然后下边还写了一个素主

34:30.280 --> 34:30.580
看着

34:31.380 --> 34:32.780
各种花式操作来了

34:33.680 --> 34:34.280
一个素主

34:34.280 --> 34:35.480
素主里边的

34:35.480 --> 34:37.680
素主的每一项是一个

34:38.880 --> 34:39.480
是个啥呢

34:40.280 --> 34:41.080
是一个

34:41.680 --> 34:43.080
素主的第一项是个制补串

34:43.680 --> 34:44.780
第二项是个nau

34:44.780 --> 34:46.080
第三项是个undefend

34:48.080 --> 34:49.280
第二项是个nau

34:49.280 --> 34:50.680
第三项是一个p

34:52.680 --> 34:53.480
一个p元素

34:54.380 --> 34:55.080
就随便写

34:55.080 --> 34:55.780
瞎写

34:55.780 --> 34:56.580
然后这里

34:57.480 --> 34:58.580
这里还有什么

34:59.480 --> 35:00.480
文本节点

35:00.480 --> 35:01.280
我看一下这里

35:01.280 --> 35:02.480
还有什么东西没有讲到的

35:03.280 --> 35:03.980
就没啥了吧

35:04.480 --> 35:05.080
就没啥了

35:05.680 --> 35:07.480
那这里面我就直接写个undefend的

35:08.480 --> 35:09.080
行了

35:09.080 --> 35:10.380
我们来看一下整个过程

35:10.380 --> 35:11.380
它会做什么事情

35:11.380 --> 35:13.680
我们只关心新节点的渲染

35:13.680 --> 35:14.680
新节点的渲染

35:14.680 --> 35:15.780
我们只关心这个步骤

35:16.380 --> 35:17.280
新节点的渲染

35:18.180 --> 35:19.480
那么这个是不是新节点

35:19.480 --> 35:19.680
对吧

35:19.680 --> 35:20.480
首次渲染

35:20.480 --> 35:21.680
它肯定是全新的

35:21.680 --> 35:23.480
它肯定要去做这些事情

35:23.480 --> 35:24.280
那么渲染

35:24.280 --> 35:27.080
它必须要根据节点来进行渲染

35:27.480 --> 35:28.180
那么我们来看一下

35:28.180 --> 35:29.880
它的节点创建过程

35:30.580 --> 35:32.480
主要是关注它的节点创建过程

35:32.780 --> 35:34.380
我们这里写个abc

35:35.580 --> 35:36.380
我把这句话

35:37.780 --> 35:38.380
拿过去

35:39.380 --> 35:40.280
然后笔记这边来

35:45.370 --> 35:46.170
我们来看一下

35:46.870 --> 35:49.470
它会创建出什么样的一个节点结构

35:50.470 --> 35:52.270
首先它要宣展这个app

35:52.270 --> 35:52.770
对吧

35:53.070 --> 35:55.270
那么这个app是不是个rex的元素

35:55.270 --> 35:55.570
对吧

35:55.570 --> 35:56.270
rex节点

35:56.270 --> 35:56.570
OK

35:56.570 --> 35:57.770
我们把这个app打印出来了

35:57.770 --> 35:58.070
对吧

35:58.070 --> 35:59.070
在这里已经打印出来了

36:00.170 --> 36:00.770
那里看一下

36:02.270 --> 36:02.870
它报了警告

36:02.870 --> 36:03.670
没有key对吧

36:03.670 --> 36:04.870
key我们后面再说

36:04.870 --> 36:06.270
现在根本不要去管个key

36:06.670 --> 36:07.670
我们是首次渲染

36:07.670 --> 36:09.270
首次渲染跟key没有什么关系

36:09.270 --> 36:11.870
为了它不要报警告的话

36:11.870 --> 36:13.070
我还是把key加写上吧

36:14.270 --> 36:16.170
这个输主里面还要求你一个key字

36:17.870 --> 36:18.370
算了算了

36:18.370 --> 36:19.270
难得写

36:19.270 --> 36:20.670
现在跟它没什么关系

36:21.170 --> 36:21.870
没有什么关系

36:22.670 --> 36:22.770
好

36:22.770 --> 36:23.270
行了

36:23.270 --> 36:24.170
那咱们来看一下

36:26.270 --> 36:29.570
现在它这个通过这个函数

36:29.570 --> 36:30.770
它拿到的参数是什么

36:30.770 --> 36:32.070
是什么节点

36:32.370 --> 36:33.970
通过这个参数创建的是什么节点

36:34.970 --> 36:35.570
什么节点

36:36.070 --> 36:36.870
你看一下这边

36:36.870 --> 36:38.070
给它传的是什么节点

36:38.070 --> 36:39.870
是不是动物元素节点

36:39.870 --> 36:40.570
对吧

36:40.570 --> 36:42.470
传的是一个动物元素节点

36:42.470 --> 36:44.470
那么动物节点它做什么事情呢

36:45.870 --> 36:47.670
首先它做这么一件事情

36:47.670 --> 36:49.170
肯定要创建动物节点对象

36:49.170 --> 36:49.970
对不对

36:50.770 --> 36:52.470
它首先做这么一件事情

36:52.470 --> 36:53.170
看着啊

36:57.370 --> 36:59.470
这里有一个动物节点

37:00.270 --> 37:00.970
动物节点

37:01.570 --> 37:02.770
它创建这么一个节点

37:03.070 --> 37:03.970
这个节点呢

37:04.170 --> 37:04.970
然后呢

37:05.570 --> 37:07.070
这个节点我们又给它标注一下

37:07.070 --> 37:08.270
它是个DIV对不对

37:09.470 --> 37:10.370
跑到去了

37:10.370 --> 37:10.770
在这

37:11.970 --> 37:12.970
它是个DIV

37:13.670 --> 37:14.470
它是个DIV

37:14.470 --> 37:16.370
我们看一下这里看得很清楚

37:16.570 --> 37:17.670
Type字为DIV

37:17.670 --> 37:17.970
对吧

37:17.970 --> 37:18.870
它是个动物节点

37:19.070 --> 37:19.570
ok

37:19.870 --> 37:21.770
那么它创建了这个节点之后

37:22.870 --> 37:23.470
要干嘛呢

37:23.470 --> 37:24.270
你看这里的笔记

37:25.270 --> 37:27.470
它先通过document create element

37:27.470 --> 37:28.970
是不是创建真实动物对象了

37:29.370 --> 37:29.870
ok

37:30.070 --> 37:31.970
那么我们这里标注一下

37:32.370 --> 37:33.370
这个节点是个对象嘛

37:33.370 --> 37:34.570
对象里边它有个属性

37:35.670 --> 37:37.370
它会把它做为它的一个属性

37:37.370 --> 37:39.770
之后要用到真实动

37:40.570 --> 37:42.070
真实动

37:43.170 --> 37:43.870
换个颜色

37:46.470 --> 37:47.470
它会有个真实动

37:47.570 --> 37:48.970
附着在这个对象上面

37:49.670 --> 37:50.970
这个节点呢是个DIV

37:51.270 --> 37:51.870
DIV

37:51.870 --> 37:53.570
它的真实动当然也是DIV

37:54.570 --> 37:55.570
是不是创建好了

37:55.570 --> 37:56.370
这个节点对象

37:56.970 --> 37:57.770
然后完没

37:57.770 --> 37:58.770
是不是还没完

37:58.870 --> 37:59.870
然后接下来干嘛

38:00.470 --> 38:02.770
接下来变立对应的

38:02.970 --> 38:05.470
rex元素的755属性

38:05.570 --> 38:06.870
你看看它拿的是谁

38:06.870 --> 38:08.070
哪个rex元素

38:08.170 --> 38:09.270
是不是这个rex元素

38:09.270 --> 38:09.770
对吧

38:10.470 --> 38:12.270
就是这个rex元素创建的节点嘛

38:12.370 --> 38:13.870
所以拿到这个rex元素

38:13.870 --> 38:15.670
变略它的什么755属性

38:15.670 --> 38:16.770
其他的属性我无所谓

38:16.770 --> 38:18.070
当然其他的属性也有用啊

38:18.970 --> 38:19.970
其他的属性干嘛呢

38:19.970 --> 38:22.270
其他的属性要设置这个元素的各种各样属性

38:22.270 --> 38:22.470
对吧

38:22.470 --> 38:23.670
什么style啊

38:23.770 --> 38:24.670
还有什么value啊

38:24.670 --> 38:25.170
对吧

38:25.770 --> 38:27.470
所以说这里还有一个还有一个就是啊

38:27.570 --> 38:28.170
就是

38:30.870 --> 38:33.470
然后立即设置

38:33.470 --> 38:37.670
该元素的各种属性

38:37.970 --> 38:38.870
各种属性

38:40.570 --> 38:41.570
该动物元素啊

38:41.570 --> 38:43.970
该真实动物元素的各种属性

38:43.970 --> 38:44.970
就直接通过什么

38:45.170 --> 38:46.570
动物元素的属性

38:46.570 --> 38:46.770
对吧

38:46.770 --> 38:47.770
直接设置就完成了

38:48.470 --> 38:48.670
对吧

38:48.670 --> 38:50.070
比方说我们这里DIV

38:50.070 --> 38:51.370
给它加上一个class name

38:51.470 --> 38:51.670
对吧

38:51.670 --> 38:52.770
就设置它的元素呗

38:52.770 --> 38:53.270
对不对

38:54.270 --> 38:55.170
保存力看一下吧

38:55.470 --> 38:56.770
那这里一看probs里边

38:56.770 --> 38:57.270
哎

38:58.870 --> 38:59.370
小心

39:02.200 --> 39:02.600
哎

39:03.600 --> 39:04.300
probs

39:04.400 --> 39:05.600
probs跑哪去了

39:06.400 --> 39:07.000
class

39:07.200 --> 39:07.500
哎

39:07.500 --> 39:08.700
我的probs跑哪去了呢

39:09.100 --> 39:09.600
哦

39:09.600 --> 39:11.000
我云我写到这了啊

39:11.200 --> 39:12.000
我写到这了

39:15.440 --> 39:15.640
嗯

39:15.640 --> 39:16.440
在这啊

39:16.440 --> 39:17.040
你看一下

39:17.940 --> 39:19.940
probs里边是不是多了一个class name呢

39:19.940 --> 39:20.340
对吧

39:20.540 --> 39:23.040
那么生存的真实动物里边是不是多了一个class了

39:23.140 --> 39:24.040
对不对啊

39:24.040 --> 39:25.540
就要设置到真实动物里边去啊

39:25.540 --> 39:26.240
就这么简单

39:27.040 --> 39:27.340
啊

39:27.340 --> 39:29.740
这都是都是都是都是新新创建啊

39:29.740 --> 39:31.040
新创建节点的时候

39:32.040 --> 39:34.140
首次肯定是新创建节点嘛

39:34.940 --> 39:35.640
你一下啊

39:35.640 --> 39:36.340
你一下

39:36.340 --> 39:38.140
起码之前我说的东西你清楚

39:39.940 --> 39:40.840
然后呢

39:41.540 --> 39:42.640
有了真实动物之后

39:42.740 --> 39:43.840
接下来他干嘛呢

39:44.240 --> 39:45.840
他要现在要便利

39:45.840 --> 39:48.240
这个rex元素的

39:48.640 --> 39:49.540
求准属性

39:50.640 --> 39:51.640
便利这个rex元素

39:51.640 --> 39:52.640
它不是一个求准属性吗

39:52.640 --> 39:54.240
你看这个求准里边是不是有两个

39:54.440 --> 39:54.840
对吧

39:54.840 --> 39:56.440
有两个啊

39:56.940 --> 39:58.040
什么哪两个呢

39:58.140 --> 39:59.040
一个是he

39:59.040 --> 39:59.640
一个是p

39:59.640 --> 40:00.440
你看一下这边

40:01.240 --> 40:01.840
有两个

40:01.840 --> 40:02.640
一个是he

40:02.640 --> 40:03.340
一个是p

40:03.440 --> 40:04.740
看没有有两个

40:05.340 --> 40:07.740
好于是便利这个求准属性

40:07.940 --> 40:09.940
一个个拿出来是不是第一规操作

40:09.940 --> 40:10.340
对吧

40:10.340 --> 40:11.440
第一规操作

40:11.740 --> 40:13.440
那么现在拿先拿到he

40:13.640 --> 40:14.540
先拿到这个东西

40:14.640 --> 40:16.140
拿到他的求准的第一个

40:16.740 --> 40:17.840
拿到求准的第一个

40:17.840 --> 40:18.540
这个东西

40:19.140 --> 40:20.440
这个东西是不是又是一个动

40:20.740 --> 40:22.640
又是一个rex元素对吧

40:22.840 --> 40:24.440
那么把这个元素给谁

40:24.940 --> 40:27.140
所以又给这个节点又回到第一步了啊

40:27.540 --> 40:29.140
又通过元素来创建节点

40:29.140 --> 40:29.440
于是呢

40:29.440 --> 40:30.640
现在就创创建了一个

40:31.240 --> 40:32.240
又是个动物节点

40:32.740 --> 40:33.340
什么节点

40:33.340 --> 40:34.340
是不是he

40:35.040 --> 40:36.040
he节点

40:36.140 --> 40:36.640
对吧

40:37.740 --> 40:38.140
哎

40:38.440 --> 40:39.540
那么现在我们看

40:39.640 --> 40:40.640
现在到这了啊

40:40.840 --> 40:42.240
便利他的动物属性

40:42.340 --> 40:43.140
便利第一项

40:43.140 --> 40:44.240
第一项是个元素

40:44.240 --> 40:44.940
rex元素

40:44.940 --> 40:45.240
于是呢

40:45.240 --> 40:46.340
又创建了一个节点

40:46.440 --> 40:47.840
叫做he节点

40:48.140 --> 40:50.240
好he节点里边啊

40:50.240 --> 40:52.340
当然有要设置属性该设置就设置啊

40:52.340 --> 40:53.400
还要创建什么真设

40:53.400 --> 40:54.840
he啊真设动

40:55.040 --> 40:56.040
这个肯定是跑不了的

40:56.540 --> 40:57.540
要创建真设动

40:58.440 --> 40:58.640
好

40:58.640 --> 41:00.140
接下来我们继续啊

41:00.240 --> 41:01.440
然后he

41:01.740 --> 41:02.740
出来过后了

41:02.940 --> 41:05.140
是不是又要循环he里边的气候准

41:05.340 --> 41:05.640
好

41:05.640 --> 41:07.440
那么咱们来看一下he的气候准

41:08.340 --> 41:09.540
啊第一个he

41:09.540 --> 41:11.140
he里边是不是又有气候准

41:11.240 --> 41:13.940
气候准里边是不是一个制服串和一个数组

41:14.040 --> 41:14.540
对吧

41:14.540 --> 41:15.940
有一个制服串和一个数组

41:16.140 --> 41:16.640
ok

41:16.740 --> 41:18.140
那么他就干嘛呢

41:18.340 --> 41:20.040
首先拿到第一个节点啊

41:20.040 --> 41:21.040
第一个制服串啊

41:21.040 --> 41:21.940
气候准的第一项

41:22.040 --> 41:23.040
便利气候准嘛

41:23.540 --> 41:25.140
啊是不是制服串啊

41:25.140 --> 41:25.640
于是呢

41:25.640 --> 41:27.640
这里是不是便利he的

41:28.340 --> 41:30.040
那个啊

41:30.340 --> 41:31.540
气候准属性啊

41:31.540 --> 41:32.940
第一个是什么制服串

41:33.040 --> 41:34.340
制服串他创建什么节点

41:34.640 --> 41:36.640
是不是文本节点啊

41:36.640 --> 41:38.840
文本节点啊

41:39.340 --> 41:40.640
创建文本节点

41:41.540 --> 41:42.340
然后呢

41:43.440 --> 41:45.340
这里是形成关系了啊

41:45.440 --> 41:46.140
那么这里创建

41:46.140 --> 41:48.040
其实这里这里创建真实动物的时候呢

41:48.040 --> 41:49.840
他会把它夹到这个真实动物里边去

41:50.040 --> 41:51.140
啊会夹到这里边去

41:51.740 --> 41:52.140
啊

41:53.740 --> 41:55.240
只不过这个东西是最后夹啊

41:55.240 --> 41:56.640
把主要东西创建完了过后

41:56.740 --> 41:58.140
最后一起夹到真实的

41:58.340 --> 41:59.240
真实动物里边去

41:59.240 --> 42:01.340
就他把先把创建好啊

42:01.340 --> 42:02.240
相当于是啥呢

42:02.340 --> 42:04.840
相当于是我们平时写单码的时候写的这个单码

42:05.140 --> 42:07.940
document create element

42:08.540 --> 42:11.140
啊div啊先创建这个啊

42:11.240 --> 42:12.240
对吧就是这个东西

42:12.540 --> 42:13.340
先创建他

42:13.440 --> 42:15.040
然后不着急加到页面上啊

42:15.040 --> 42:16.340
不加不着急加

42:16.540 --> 42:21.440
然后呢再创建什么document create element什么

42:21.440 --> 42:23.740
h1再创建他啊

42:23.740 --> 42:26.540
你可以认为是这么一种类似的过程

42:27.240 --> 42:30.440
啊然后呢再创建文本节链对吧

42:31.440 --> 42:33.940
啊文本节链那么这个这个时候创建过后就可以

42:34.240 --> 42:35.940
div append child

42:37.140 --> 42:39.340
啊一起对吧要加进去了

42:39.840 --> 42:42.340
啊那么接下来后续的加啊后续加

42:42.440 --> 42:43.940
加完了过后最后

42:44.440 --> 42:46.640
才把这个div加到容器里边去

42:46.940 --> 42:50.140
container append child div

42:50.140 --> 42:52.640
才把加到容器里边去啊他是这么一个过程啊

42:53.740 --> 42:56.340
啊那么这里呢就形成这么一种关系来看了没

42:57.140 --> 42:58.340
就形成这么一种关系了

42:59.440 --> 43:02.040
啊h1创建好h1创建好了过后

43:02.040 --> 43:04.540
又来便利h1里边的child

43:04.540 --> 43:05.840
你看h1的child

43:06.240 --> 43:08.740
这边有两个一个是字无串一个是数组好

43:08.740 --> 43:11.340
首先是字无串通过字无串又来过

43:11.340 --> 43:12.840
又来走一遍这个流程

43:13.440 --> 43:14.940
字无串是不是得到文本节链

43:14.940 --> 43:17.840
对吧哎我们这里就得到了文本节链啊

43:17.840 --> 43:19.260
什么我们文本内容是咋

43:19.260 --> 43:23.240
文本内容是咋啊标题啊就这两个字

43:24.540 --> 43:26.040
啊文本节链

43:26.740 --> 43:29.640
然后呢他有没有形成真设动有啊

43:29.640 --> 43:30.740
文本节链会有真设动

43:30.740 --> 43:32.240
那个真设动是怎么创建的

43:32.240 --> 43:34.140
真设动就通过这个创建的啊

43:34.140 --> 43:36.040
通过那个啊我就不写了

43:36.040 --> 43:36.940
我就在这里不写

43:36.940 --> 43:38.040
呃pt上不写的啊

43:38.040 --> 43:40.540
document create tags and load

43:40.840 --> 43:44.040
在创建的啊把内容传填进去就行了啊标题

43:46.740 --> 43:49.240
标题啊他通过这个东西创建的

43:49.940 --> 43:51.340
啊他也会形成真设动

43:52.340 --> 43:54.840
好然后呢又又出现这么一个关系了啊

43:56.740 --> 43:58.040
好那么继续变理啊

43:58.740 --> 44:00.440
继续变理a起的东西

44:00.540 --> 44:02.340
a起里边除了文本节链之外

44:02.340 --> 44:04.340
还有什么a起里边是不是有个数组

44:04.440 --> 44:06.340
对吧他有个数组ok

44:06.540 --> 44:09.240
数组呢他又会形成数组节链

44:12.240 --> 44:15.440
数组节链啊他会形成数组节链啊

44:15.440 --> 44:17.740
在那个数组里面我这里就不好标准了啊

44:18.240 --> 44:20.540
那么数组他是不会形成真设动的啊

44:20.540 --> 44:22.440
至少他不会直接形成真设动

44:22.840 --> 44:24.640
但他会形成一个数组节链啊

44:24.640 --> 44:25.740
会有这么一个东西存在

44:27.810 --> 44:28.110
啊

44:28.910 --> 44:30.810
然后在数组节点里边

44:31.310 --> 44:33.010
他是不是遇到数组节点干嘛

44:33.210 --> 44:35.910
刚才说了遇到数组节点直接变略数组就完事了

44:36.310 --> 44:37.710
啊直接变略数组

44:38.110 --> 44:39.410
然后第一规创建节点

44:39.510 --> 44:41.110
好数组里边还开始变略啊

44:41.210 --> 44:43.710
数组里边第一项是什么abc ok

44:44.510 --> 44:46.910
啊啊你可以认为呢

44:47.210 --> 44:49.810
数组节点里边呢他有这么一个东西啊叫做

44:50.510 --> 44:51.810
啊叫这个

44:53.110 --> 44:55.210
你可以认为数组里边有这个东西啊

44:56.010 --> 44:56.810
fragment

44:58.310 --> 44:59.610
document create

45:00.310 --> 45:01.910
document fragment啊

45:02.310 --> 45:03.910
你可以认为数组里面有这个东西

45:05.410 --> 45:06.710
这个样子这样子想没问题吧

45:08.210 --> 45:10.310
好然后呢这个数组节点里边

45:10.310 --> 45:12.110
他是不是要创建东西啊

45:12.410 --> 45:14.410
要创建东西就是要变略这个数组

45:14.510 --> 45:15.810
好把数组第一项拿出来

45:15.810 --> 45:18.510
第一项是不是字幕出来节点啊文本节点啊

45:18.510 --> 45:21.110
文本节点怎么我这边写的是啊abc

45:21.510 --> 45:22.210
啊abc

45:22.510 --> 45:24.410
啊那么这里会形成真设动对吧

45:24.410 --> 45:25.110
毫无疑问的

45:25.510 --> 45:26.810
啊这里会形成真设动

45:29.860 --> 45:32.260
啊好那么形成这么一个关系啊

45:32.860 --> 45:35.560
这是数组的第一项哎数组的第一项

45:36.160 --> 45:38.060
好数组里边还有没有呢

45:38.960 --> 45:42.560
看一下哎这个h1元素啊这个h1里边

45:43.760 --> 45:46.260
啊数组里边除了啊

45:47.760 --> 45:50.060
abc之外是不是还有第二项是now啊

45:50.060 --> 45:51.760
now他也会形成节点对象

45:51.760 --> 45:53.260
不要说认为now就不管了啊

45:53.260 --> 45:55.360
now他一定要会要形成节点对象的

45:55.360 --> 45:56.760
你理解这一点非常重要哦

45:57.160 --> 45:59.460
啊不然的话有些很坑的面试体根本就

45:59.660 --> 46:01.160
不知道他为什么会有那样的结果

46:01.460 --> 46:03.160
所以说这是个空节点

46:04.460 --> 46:06.960
空节点空节点会不会生成动物元素

46:06.960 --> 46:09.360
不会啊空节点但他会放到这

46:09.960 --> 46:14.760
放到这好放到这

46:16.360 --> 46:17.360
好这是空节点

46:17.560 --> 46:19.760
然后继续啊这个数组的下一项

46:19.760 --> 46:20.960
下一项是啥呢

46:21.160 --> 46:23.760
下一项是下项是不是又是个元素节点

46:24.060 --> 46:26.660
对吧又是个元素节点好又来啊

46:26.860 --> 46:28.560
那么下一项又是个元素节点了

46:29.960 --> 46:31.560
这个元素节点了叫做了一个

46:32.060 --> 46:33.160
这是动物节点

46:34.960 --> 46:35.760
有这么一个节点

46:35.860 --> 46:38.260
这个节点呢里边是一个什么元素

46:38.260 --> 46:38.760
批元素

46:38.760 --> 46:40.760
那会不会生成真实动物对象

46:40.960 --> 46:42.460
对吧真实动物对象

46:44.660 --> 46:45.460
这是批元素

46:45.960 --> 46:46.960
生成元素节点

46:47.060 --> 46:48.760
好遇到元素节点是不是又要定归

46:48.760 --> 46:49.960
定归他的什么切入准

46:50.060 --> 46:50.960
好又看啊

46:51.460 --> 46:53.560
批元素里边是不是个切入准文本节点啊

46:53.560 --> 46:54.360
这是段落

46:55.360 --> 46:56.760
怎么把这个复制过去

47:00.010 --> 47:00.810
到这边啊

47:02.950 --> 47:04.350
我之所以不厌其烦的

47:04.350 --> 47:05.850
这样子啰嗦的去解释个问题

47:05.850 --> 47:07.250
就希望大家理解深刻一点

47:08.050 --> 47:09.650
好那么这个有批元素对吧

47:09.750 --> 47:11.450
批元素里边他有个文本节点

47:11.950 --> 47:13.150
好于是呢这里边

47:15.260 --> 47:16.160
我真的画不下了

47:16.160 --> 47:17.860
我把我上面移动一点吧

47:18.960 --> 47:20.360
不然真实的画不下了

47:22.300 --> 47:24.000
好这里边是一个文本节点

47:26.070 --> 47:27.370
文本

47:28.370 --> 47:29.470
文本节点

47:29.770 --> 47:31.370
好这里边写了两个两个字

47:31.470 --> 47:32.570
两个字段落

47:32.870 --> 47:33.370
段落

47:34.270 --> 47:35.670
好那么他会形成文本节点

47:35.670 --> 47:36.670
也会形成真实的动

47:36.870 --> 47:37.370
对吧

47:38.470 --> 47:39.470
好于是呢

47:40.970 --> 47:41.670
点过来

47:43.170 --> 47:43.870
好点过来

47:44.570 --> 47:45.070
好

47:45.870 --> 47:46.470
没问题吧

47:47.270 --> 47:49.370
好于是呢就形成这么一种结构了

47:49.470 --> 47:51.370
好那么这样子一便利完

47:51.370 --> 47:52.170
把什么便利完了

47:52.170 --> 47:53.870
把H1就深度就便利完了

47:53.870 --> 47:54.970
对吧深度便利

47:55.170 --> 47:56.070
好便利完了

47:56.770 --> 47:57.970
便利完了过后呢

47:57.970 --> 47:58.970
接下来干嘛呢

47:59.270 --> 48:00.170
接下来呢

48:00.170 --> 48:01.770
我们就是不是啊

48:01.770 --> 48:02.870
要便利上下一个了

48:02.870 --> 48:04.870
就DV的下一个节点啊

48:05.070 --> 48:05.870
之前把这个东西

48:05.870 --> 48:07.070
终于地规便利完了

48:07.070 --> 48:08.370
对吧又开始便利这个

48:08.670 --> 48:09.370
啊便利这个

48:09.970 --> 48:10.970
这个元素好

48:10.970 --> 48:11.870
这个元素里边

48:11.870 --> 48:12.570
你看着啊

48:13.170 --> 48:14.070
是一样的道理

48:14.170 --> 48:15.170
这个元素里边

48:15.470 --> 48:16.570
他根据这个远动物

48:16.570 --> 48:17.570
他生成个动物节点

48:17.570 --> 48:18.470
什么P元素

48:18.970 --> 48:20.270
啊他会形成真实的动

48:22.820 --> 48:23.520
真实的动

48:23.720 --> 48:24.920
然后呢这个连过来啊

48:28.220 --> 48:30.220
连过来啊形成真实动了

48:30.520 --> 48:31.320
形成之后呢

48:31.320 --> 48:32.420
他里边是不是也有节点

48:32.420 --> 48:33.620
优雄便利他的切准

48:33.620 --> 48:34.220
你看一下

48:34.520 --> 48:35.920
第二个啊第二个切准

48:36.320 --> 48:37.020
切准啊

48:37.020 --> 48:37.620
你不两个吧

48:37.620 --> 48:39.020
第一个H1已经便利完了

48:39.020 --> 48:39.820
然后便利P

48:40.020 --> 48:41.320
P里边是不是也有切准

48:41.620 --> 48:42.520
啊切准是什么

48:42.520 --> 48:43.720
不要认为他没有啊

48:43.820 --> 48:44.620
他是on the fan

48:44.620 --> 48:45.720
他有的啊

48:45.720 --> 48:46.720
他只是on the fan

48:48.220 --> 48:48.720
好

48:49.620 --> 48:51.320
然后呢就是P里边

48:53.290 --> 48:54.090
下一个啊

48:54.590 --> 48:55.790
就是会生成一个什么

48:55.990 --> 48:56.590
空解点

48:57.390 --> 48:57.990
空解点

49:00.090 --> 49:00.790
空解点

49:02.190 --> 49:03.090
注意他有东西哦

49:03.090 --> 49:04.190
他不是说没有东西哦

49:04.290 --> 49:05.390
你这样子写

49:05.890 --> 49:06.290
啊

49:06.690 --> 49:07.690
你把这个去掉

49:08.290 --> 49:09.190
保存你看一下

49:13.380 --> 49:14.080
哎呀P

49:14.880 --> 49:15.480
啊你看

49:15.580 --> 49:16.480
这才是没有节点

49:16.480 --> 49:17.780
他没有这个切准属性

49:17.780 --> 49:18.280
看没

49:18.480 --> 49:19.480
连属性都没有

49:19.480 --> 49:20.580
这才是没有节点

49:20.780 --> 49:22.080
啊你看刚才写的on the fan

49:22.080 --> 49:23.080
他是有节点的啊

49:23.080 --> 49:24.180
怎么他节点的值呢

49:24.180 --> 49:24.980
是on the fan

49:25.380 --> 49:26.280
是这么个意思

49:27.180 --> 49:28.180
好咱们继续啊

49:28.280 --> 49:29.680
那这里呢空解点啊

49:29.680 --> 49:30.980
空解点什么东西都没有

49:31.480 --> 49:32.880
但是呢他会站位啊

49:32.880 --> 49:33.480
站位

49:35.420 --> 49:35.920
看没

49:36.320 --> 49:38.320
就形成了这么一种结构了

49:38.620 --> 49:39.620
我们把他

49:40.020 --> 49:40.620
结构

49:41.420 --> 49:42.020
放过来

49:45.880 --> 49:46.480
放过来

49:50.720 --> 49:51.320
看一下啊

49:53.900 --> 49:54.900
就这么一个结构

49:55.100 --> 49:56.100
那么大家看个ppt

49:56.100 --> 49:58.100
下来的大家可以看那个笔记里边的图

50:00.800 --> 50:02.400
那么形成这个图过后呢

50:02.600 --> 50:03.900
这个图叫啥呢

50:04.200 --> 50:07.000
这个图就叫做虚拟动不输

50:08.300 --> 50:11.100
这个玩意儿就叫做虚拟动不输

50:12.200 --> 50:14.100
所以说如果你要真正的理解深刻

50:14.100 --> 50:16.100
理解清楚的话还真的不是说

50:16.500 --> 50:18.500
那个regs元素就是虚拟动不输

50:18.600 --> 50:19.900
我们平时都这样说的啊

50:19.900 --> 50:20.700
都这样说的

50:20.800 --> 50:21.700
这样说

50:22.200 --> 50:24.600
你不不去较招的话也没啥问题啊

50:24.600 --> 50:25.700
因为元素很多是就是

50:25.700 --> 50:27.500
他就是最多会生成节点嘛对不对

50:28.000 --> 50:28.700
但是呢

50:29.300 --> 50:30.900
严格来说是这些节点

50:31.100 --> 50:33.100
生成了真实动不输虚拟动不输

50:34.300 --> 50:34.900
虚拟

50:35.700 --> 50:36.300
动不输

50:36.500 --> 50:38.600
所以说我们说的虚拟动不指的是啥

50:39.300 --> 50:39.700
啊

50:40.000 --> 50:40.900
就是以上代嘛

50:42.400 --> 50:43.400
以上代嘛

50:43.600 --> 50:45.500
生成的虚拟动不输

50:45.700 --> 50:47.300
我们说的虚拟动不指的是啥

50:47.300 --> 50:48.600
指的是这种节点啊

50:48.600 --> 50:50.100
严格来说指的是这个节点

50:50.300 --> 50:52.100
当然不同的教程里面有不同的教法

50:52.900 --> 50:54.500
再看一遍啊再看一下这个图

50:54.900 --> 50:55.900
好好理解一下啊

50:56.700 --> 50:58.300
这才是他生成的真实动不动性

50:58.700 --> 51:01.300
好当他把这个素生成出来之后

51:01.600 --> 51:02.000
啊

51:02.000 --> 51:03.700
当他把这个素已经生成出来之后

51:03.700 --> 51:04.600
他做什么呢

51:05.100 --> 51:05.800
他做什么呢

51:05.800 --> 51:06.900
这是我们首次圈的啊

51:06.900 --> 51:08.700
指的是新节点圈的啊

51:08.800 --> 51:09.300
这里

51:11.180 --> 51:12.280
生成出

51:13.380 --> 51:14.380
啊生成出

51:14.780 --> 51:15.280
啊

51:16.080 --> 51:16.780
虚拟

51:17.280 --> 51:18.280
动不输之后

51:19.680 --> 51:20.680
将该数

51:21.580 --> 51:22.880
他整个数就是一个对象

51:22.880 --> 51:24.280
那将该数

51:25.980 --> 51:27.880
保存起来啊

51:27.880 --> 51:28.580
以便

51:29.680 --> 51:31.480
后续使用啊

51:32.680 --> 51:33.880
将这个数保存起来

51:33.880 --> 51:34.980
以便后续使用

51:34.980 --> 51:36.080
那么后续怎么用

51:36.080 --> 51:36.980
我们后边再说

51:37.080 --> 51:38.880
那么现在他会把这个数保存起来

51:39.380 --> 51:40.080
然后呢

51:40.080 --> 51:40.780
干嘛呢

51:40.880 --> 51:45.480
然后宣就是将之前生成的

51:45.980 --> 51:47.980
真实的动物对象

51:49.280 --> 51:51.280
加入到容器中

51:52.480 --> 51:52.980
啊

51:53.280 --> 51:55.080
他把之前生成的真实动物对象

51:55.080 --> 51:55.780
之前你看

51:55.880 --> 51:56.480
这里

51:56.580 --> 51:58.180
生成的大堆真实动物对象对吧

51:58.280 --> 51:58.580
ok

51:58.580 --> 52:00.680
那这些动物对象的结构已经出来了啊

52:00.680 --> 52:02.480
就他而喷的敲着他

52:02.480 --> 52:04.280
他又而喷的敲着他啊

52:04.280 --> 52:05.380
他又而喷的敲着他

52:05.380 --> 52:06.280
但是有些特殊情况

52:06.280 --> 52:07.280
比方说我们reacts里面

52:07.280 --> 52:07.880
portal

52:08.080 --> 52:09.280
portal数字有特殊情况

52:09.280 --> 52:09.780
对不对

52:09.780 --> 52:11.180
啊我们但是现在还没说到那

52:11.680 --> 52:11.880
啊

52:11.880 --> 52:12.880
然后我们这里加他

52:12.880 --> 52:13.380
对啊

52:13.380 --> 52:13.680
啊

52:13.680 --> 52:14.680
然后他里边

52:15.080 --> 52:15.680
他里边

52:15.680 --> 52:16.580
除了加他之外呢

52:16.580 --> 52:18.080
还要去加他啊

52:18.080 --> 52:18.580
啊

52:18.580 --> 52:19.680
他里边还要去加他

52:20.380 --> 52:20.980
然后最终了

52:21.080 --> 52:22.280
我们就做一件事就行了

52:22.280 --> 52:22.880
就把他

52:23.380 --> 52:23.980
这根

52:24.080 --> 52:25.380
瞎闹容器中就行了

52:25.580 --> 52:25.980
啊

52:25.980 --> 52:26.880
大家的容器中就行了

52:26.880 --> 52:27.980
那么一面是不是出来了

52:28.480 --> 52:28.580
啊

52:28.580 --> 52:30.180
这就是首次选择他做的事情

52:30.580 --> 52:31.780
一面就最终就出来了

52:33.180 --> 52:33.380
啊

52:33.380 --> 52:34.080
这就是首次选择

52:34.080 --> 52:35.480
先把这一块理解清楚啊

52:35.480 --> 52:36.780
我们现在还没有设计到组件

52:37.480 --> 52:38.380
那么组件我们

52:38.880 --> 52:40.280
等一下马上说啊

52:40.280 --> 52:42.780
我们先把这个多么节点那一块

52:42.980 --> 52:43.680
就通过

52:44.180 --> 52:45.080
就是这些节点

52:45.880 --> 52:46.080
啊

52:46.080 --> 52:47.680
就通过这个东西在创建的节点

52:47.880 --> 52:49.080
先把这个东西搞清楚

52:49.480 --> 52:49.580
啊

52:49.580 --> 52:50.280
搞清楚

52:51.480 --> 52:52.180
没问题吧

52:52.180 --> 52:53.080
好看一下啊

52:53.080 --> 52:55.580
就是他生成的数真的没有那么简单的啊

52:55.580 --> 52:56.980
不是说生成的数就是一个

52:56.980 --> 52:57.980
怎么这样子写的过后

52:57.980 --> 52:58.180
哎

52:58.180 --> 52:59.980
这样子写的过后就是一个div下面H1

52:59.980 --> 53:01.080
H1下面p

53:01.680 --> 53:02.380
不能这样说啊

53:02.380 --> 53:03.780
你看他现在的结构是

53:03.780 --> 53:05.780
其实是成绩是非常深的

53:07.180 --> 53:07.380
啊

53:07.380 --> 53:10.080
再帮我们看一下这里边哪些东西会生成真实的动物

53:10.580 --> 53:11.880
是不是元素节点啊

53:11.880 --> 53:13.580
动物节点会生成真实的动物

53:13.580 --> 53:14.780
还有什么文本节点

53:14.780 --> 53:15.180
对吧

53:15.180 --> 53:16.380
会生成真实的动物

53:16.380 --> 53:17.080
数主节点呢

53:17.080 --> 53:17.880
你可以认为他

53:18.080 --> 53:18.980
就占个位置啊

53:18.980 --> 53:20.580
然后去便利他就完事了啊

53:20.680 --> 53:22.480
你可以认为他就是占你占一个位置

53:22.480 --> 53:23.280
然后去便利他

53:24.380 --> 53:24.480
啊

53:24.480 --> 53:27.580
实际上我们在页面上这里提示你要加这个key呢

53:27.980 --> 53:28.980
是谁在提示呢

53:29.280 --> 53:30.480
实际上是谁在提示呢

53:30.780 --> 53:32.580
就是这个节点啊

53:32.580 --> 53:34.380
就是这个节点在提示啊

53:34.380 --> 53:35.980
就是这个玩意在提示啊

53:35.980 --> 53:36.980
哎呗在这个玩意啊

53:37.280 --> 53:38.380
数主节点啊

53:38.380 --> 53:40.080
发现这个他发现这个数主节点里面

53:40.080 --> 53:41.380
每一个节点他没有key字

53:41.380 --> 53:42.180
他就会提示你啊

53:42.180 --> 53:43.980
他就会提示这个东西啊

53:45.280 --> 53:45.780
好了啊

53:45.780 --> 53:48.080
这是生成了这么一个数数形结构

53:48.080 --> 53:48.780
那么接下来呢

53:48.780 --> 53:49.980
你搞清楚这个点之后

53:49.980 --> 53:50.980
咱们再来看

53:51.680 --> 53:52.780
第五种情况

53:53.380 --> 53:54.080
根据不同的节点

53:54.080 --> 53:54.880
做不同类型

53:55.180 --> 53:55.780
就是

53:56.080 --> 53:57.180
组件节点

53:58.080 --> 53:59.680
组件点点他会做什么事情的

54:00.480 --> 54:02.380
嗯在这个组件节点里边呢

54:02.380 --> 54:04.280
他又把它分成了两种

54:04.280 --> 54:05.880
因为我们知道组件有两种

54:06.380 --> 54:07.180
哪两种呢

54:07.280 --> 54:08.980
一种是函数组件

54:09.580 --> 54:10.880
函数组件他干嘛呢

54:10.880 --> 54:12.980
他做的事情很简单就是调用函数

54:13.080 --> 54:14.180
好吧函数调用一遍

54:14.280 --> 54:15.980
函数调用过后不是返回一个

54:16.580 --> 54:18.480
呃rex元数嘛对吧

54:18.680 --> 54:20.280
函数是不是可以返回一个元数

54:20.580 --> 54:20.980
啊

54:20.980 --> 54:22.780
但是他函数也可以不用返回元数啊

54:22.780 --> 54:24.680
比方说我们这里用用这个组件啊

54:24.880 --> 54:25.180
up

54:25.380 --> 54:26.680
把它写成个函数组件啊

54:27.280 --> 54:27.780
看一下嘛

54:28.680 --> 54:29.680
把它写成个函数组件

54:30.080 --> 54:31.680
啊就把它写成个方形得了啊

54:32.280 --> 54:33.880
rcf

54:34.080 --> 54:35.880
rfc

54:36.080 --> 54:36.380
啊

54:36.680 --> 54:37.880
就这么一个函数组件

54:38.080 --> 54:38.480
好

54:38.680 --> 54:40.580
那么还可以调用这个函数就完事了啊

54:40.580 --> 54:42.680
这个函数是不是会返回一个元数

54:42.680 --> 54:42.980
对吧

54:42.980 --> 54:43.880
rex元数

54:43.980 --> 54:45.780
其他可以可以不只返回元数

54:45.780 --> 54:46.880
可以不可以返回字母串

54:47.280 --> 54:47.980
可以

54:47.980 --> 54:49.980
可不可以返回数组啊

54:50.580 --> 54:51.780
可不可以返回数组呢

54:52.280 --> 54:52.680
啊

54:53.780 --> 54:54.580
可以啊

54:54.580 --> 54:55.380
这里还有一个啊

54:55.380 --> 54:57.580
就数字数字的话也可以啊

54:57.580 --> 54:59.380
数字的话也会生成文闷节点

54:59.780 --> 55:01.480
啊文闷节点啊

55:01.480 --> 55:03.080
数字文闷节点啊

55:03.080 --> 55:05.280
字母串啊数字

55:06.680 --> 55:09.480
啊这两个东西都会生成文闷节点啊

55:09.480 --> 55:10.480
都会生成文闷节点

55:10.980 --> 55:11.280
哎

55:11.980 --> 55:13.980
我这里个这个地方有点有点忘了

55:13.980 --> 55:15.180
如果返回个处呢

55:15.680 --> 55:16.280
处呢

55:16.480 --> 55:17.780
它是显示一个字母串处吗

55:17.780 --> 55:18.480
我看一下啊

55:19.880 --> 55:21.280
没有什么都没有显示啊

55:21.280 --> 55:22.180
什么都没有显示

55:23.080 --> 55:23.880
啊那什么都没有显示

55:23.880 --> 55:25.080
那那那就无所谓啊

55:25.080 --> 55:27.480
它处的话它是什么都没有显示的啊

55:29.480 --> 55:30.780
啊也就是这里呢

55:30.780 --> 55:32.680
我们处的话可以认为空

55:32.880 --> 55:34.680
可以认为生成那个是个空节点

55:35.280 --> 55:36.280
啊我们这里说一下吧

55:36.880 --> 55:39.080
说一下这个force还有什么

55:39.080 --> 55:40.080
q啊

55:40.280 --> 55:41.380
生成的都是空节点

55:41.380 --> 55:42.980
你看我们刚才返回的是

55:43.680 --> 55:44.880
返回的是q

55:45.480 --> 55:45.880
啊

55:47.580 --> 55:48.480
或者说我们这里

55:48.480 --> 55:49.880
我们这里直接写个q嘛

55:50.480 --> 55:50.980
q

55:52.180 --> 55:52.680
保存

55:52.780 --> 55:53.480
你看一下

55:53.480 --> 55:54.580
生成出来是不是啥都没有

55:54.680 --> 55:55.880
对吧啥都没有啊

55:55.880 --> 55:56.980
生成的是个空节点

55:58.180 --> 56:00.780
好啊这里就是刚才我们顺便说一下

56:00.780 --> 56:02.480
数字它也能生成文闷节点啊

56:02.580 --> 56:03.880
它也会生成文闷节点

56:04.480 --> 56:05.780
好咱们再回到这来啊

56:07.920 --> 56:09.420
函数组建干嘛呢

56:09.420 --> 56:10.920
他要做的事情很简单

56:10.920 --> 56:12.520
就是调用函数

56:12.620 --> 56:13.720
这个函数呢

56:14.420 --> 56:17.520
该函数必须返回一个

56:17.720 --> 56:20.620
可以生成节点的

56:22.120 --> 56:22.620
那种

56:22.720 --> 56:24.220
就是他一返回什么数据无所谓

56:24.220 --> 56:25.420
也可以返回一个

56:25.620 --> 56:26.720
rex元数

56:26.720 --> 56:28.620
就是这里可以返回一个jsx表达式

56:28.620 --> 56:29.020
对吧

56:29.020 --> 56:30.520
我们通常都是这样子返回的啊

56:30.820 --> 56:32.020
可以返回一个元数

56:32.020 --> 56:33.120
也可以返回一个字符串

56:33.120 --> 56:33.920
也可以返回一个布尔

56:33.920 --> 56:35.120
也可以返回一个数字

56:35.220 --> 56:36.020
怎么都行

56:36.120 --> 56:37.220
但是呢

56:37.620 --> 56:40.420
你必须要返回一个可以生成节点的东西

56:41.020 --> 56:41.720
那么他干会

56:41.720 --> 56:42.820
因为他会做什么呢

56:42.820 --> 56:43.920
他调用函数

56:44.320 --> 56:47.820
将该函数的返回结果

56:48.220 --> 56:50.320
地归生成节点

56:51.720 --> 56:52.420
也就是说

56:52.420 --> 56:54.120
把这个函数的返回结果

56:54.120 --> 56:55.420
是不是又回到第一步

56:55.420 --> 56:55.920
对吧

56:56.120 --> 56:57.120
又回到第一步

56:57.720 --> 56:58.720
第一步反复操作

56:58.720 --> 56:59.720
直到便利结束

56:59.720 --> 57:00.720
他就做这么一件事

57:01.720 --> 57:03.120
这是函数组件

57:03.120 --> 57:04.320
函数组件非常简单

57:04.320 --> 57:05.120
比方说

57:05.120 --> 57:07.120
我们这里写上这么一个app

57:07.520 --> 57:08.320
函数组件

57:08.520 --> 57:09.720
函数组件写了过后

57:09.720 --> 57:11.120
这里边生成个div

57:11.120 --> 57:13.120
div里边比方说又一个组件

57:13.320 --> 57:14.320
又一个函数组件

57:14.320 --> 57:15.120
comp1

57:17.800 --> 57:18.400
comp1

57:18.800 --> 57:21.200
div可能有些可能有些属性

57:21.200 --> 57:21.800
不所谓

57:21.800 --> 57:23.600
这里可能也有一些属性

57:23.800 --> 57:25.000
这里返回一个

57:25.000 --> 57:25.800
he

57:25.800 --> 57:26.600
comp1

57:27.400 --> 57:27.600
好

57:27.600 --> 57:28.200
那么这样子

57:28.200 --> 57:30.000
他会生成一种什么样的结构呢

57:30.400 --> 57:31.400
他就会生成这么一种结构

57:33.200 --> 57:33.800
复制一下

57:34.800 --> 57:36.100
我们这边用的是什么

57:36.100 --> 57:37.100
用的是app

57:37.100 --> 57:37.400
对吧

57:37.400 --> 57:38.200
用的是app

57:38.200 --> 57:39.400
把这个拿去渲染

57:40.000 --> 57:40.400
好

57:40.400 --> 57:41.600
那么他首先

57:41.600 --> 57:43.100
他把这个东西生成节链

57:43.100 --> 57:43.800
什么节链呢

57:43.800 --> 57:45.600
是不是组件节链

57:45.800 --> 57:47.700
并且是一个函数组件节链

57:48.200 --> 57:49.800
他说会生成一个组件节链

57:50.700 --> 57:51.500
他会变这样子

57:54.330 --> 57:56.030
他会生成一个组件节链

57:59.290 --> 58:00.390
组件节链

58:00.590 --> 58:03.990
然后这个组件节链是一个函数组件节�

58:04.890 --> 58:05.490
方形

58:06.590 --> 58:07.090
app

58:07.690 --> 58:09.290
是一个函数组件节链

58:09.290 --> 58:09.890
看一下吧

58:09.890 --> 58:10.290
对吧

58:10.290 --> 58:11.390
是个函数组件节链

58:11.690 --> 58:13.090
然后他会做什么呢

58:13.390 --> 58:15.090
他会把调用这个函数

58:15.090 --> 58:16.890
把这个函数的返回结果

58:17.990 --> 58:18.690
comp1

58:19.090 --> 58:21.290
他会把这个函数的返回结果

58:21.590 --> 58:22.190
然后呢

58:22.190 --> 58:23.290
又来生成节链

58:23.590 --> 58:25.290
那你看函数的返回结果是什么

58:25.690 --> 58:26.890
是一个元素节链

58:26.890 --> 58:27.090
对吧

58:27.090 --> 58:27.790
你看这个di碑

58:27.790 --> 58:28.790
是不是一个元素节�

58:28.890 --> 58:29.290
ok

58:29.290 --> 58:30.090
那么他就这里呢

58:30.090 --> 58:32.590
就会生成一个什么元素节�

58:34.090 --> 58:35.690
就是DOM节�

58:35.990 --> 58:37.790
那么这个节链名字就是DIV

58:38.290 --> 58:40.090
那么是不是又产生一个真实的动物对象

58:40.390 --> 58:40.790
对吧

58:40.990 --> 58:44.290
函数节链就是组件节链本身是不会产生真实的动物对象的

58:44.290 --> 58:45.190
是不会产生的

58:45.290 --> 58:47.190
那么这个DIV会产生真实的动物对象

58:47.290 --> 58:48.190
然后继续来

58:48.190 --> 58:50.090
是不是又回到之前那种做法了

58:50.090 --> 58:51.690
DIV又是循环他内部

58:51.990 --> 58:53.690
循环DIV的就是CHUG

58:53.890 --> 58:56.890
当然要把这个组件的属性要传过去调用函数

58:56.990 --> 58:59.690
他调用函数的时候会把组件的属性传过去

58:59.690 --> 59:00.690
这个没什么好说的

59:00.990 --> 59:01.790
然后呢

59:02.790 --> 59:04.690
他DIV内部不是有CHUG吗

59:05.390 --> 59:08.090
然后循环的CHUG拿到什么Comp1

59:08.790 --> 59:10.390
于是呢是不是又是个组件节链

59:11.690 --> 59:12.690
Comp1对吧

59:12.690 --> 59:13.790
又是个组件节链

59:16.590 --> 59:17.690
这个组件节链是什么

59:18.690 --> 59:19.290
方个性

59:20.190 --> 59:21.590
Comp1对不对

59:22.190 --> 59:24.590
好的组件节链里面是又去调用这个函数

59:24.790 --> 59:25.790
Comp1这个函数

59:25.790 --> 59:27.690
说他调用顺序是先调用他

59:27.790 --> 59:29.390
然后把他的结果返回

59:29.390 --> 59:30.490
然后来生成节链

59:30.590 --> 59:33.290
生成节链过后又遇到了这个组件节链

59:33.390 --> 59:34.390
又遇到这个玩意

59:34.490 --> 59:35.990
于是呢又去调用这个函数

59:36.190 --> 59:37.890
他也是个函数函数组件

59:37.990 --> 59:39.190
所以他又去调用这个函数

59:39.390 --> 59:41.690
调用这个函数是不是又生成一个节链

59:41.890 --> 59:42.490
什么节链

59:42.590 --> 59:44.190
就是也是动物节链

59:44.190 --> 59:44.690
对吧

59:45.290 --> 59:46.190
也是动物节链

59:46.190 --> 59:47.890
那么这个组件是H1

59:48.690 --> 59:50.290
于是得到真实动物对象

59:50.390 --> 59:51.490
于是呢又来

59:51.690 --> 59:53.390
H1里边是不是有文本节链

59:53.990 --> 59:55.590
我们又去拿到文本节链

59:57.190 --> 59:58.390
又去拿到文本节链

01:00:01.660 --> 01:00:02.460
文本节链

01:00:02.460 --> 01:00:04.460
这个文本是Comp1

01:00:04.960 --> 01:00:05.960
打到这个文本节�

01:00:06.460 --> 01:00:06.960
Comp1

01:00:07.060 --> 01:00:09.060
但是呢如果这里边有表达式

01:00:09.060 --> 01:00:10.960
比方说这里边有表达式Props里边

01:00:10.960 --> 01:00:12.660
那么他会把表达式算出来

01:00:12.860 --> 01:00:14.360
他直接会把表达式算出来

01:00:14.460 --> 01:00:15.760
算出这个表达式的结果

01:00:15.760 --> 01:00:18.160
算出来之后呢如果它的节链内容

01:00:18.360 --> 01:00:19.160
比方说这里呢

01:00:19.160 --> 01:00:20.560
我们来Props里边

01:00:22.460 --> 01:00:23.660
一个Props

01:00:24.360 --> 01:00:25.360
PropsN

01:00:25.560 --> 01:00:26.260
PropsN

01:00:26.660 --> 01:00:27.960
那么这里呢传了一个N

01:00:27.960 --> 01:00:28.560
N等于

01:00:29.460 --> 01:00:30.060
比方说吧

01:00:30.060 --> 01:00:30.760
比方说

01:00:30.960 --> 01:00:32.060
那么这样子一来了

01:00:33.060 --> 01:00:34.760
他会又会多了多了一个节�

01:00:34.760 --> 01:00:36.360
H1里边又会多一个节�

01:00:36.460 --> 01:00:37.460
也是个文本节链

01:00:37.460 --> 01:00:38.360
因为他作为内容

01:00:38.360 --> 01:00:40.160
直接选择到这也是个文本节链

01:00:40.560 --> 01:00:41.360
因为他是数字

01:00:41.760 --> 01:00:42.960
所以说他有这么一个节链

01:00:43.560 --> 01:00:44.260
Comp1

01:00:44.560 --> 01:00:46.160
同时呢又有另外一个文本节链

01:00:46.760 --> 01:00:47.760
这个N的值是多少

01:00:47.860 --> 01:00:49.160
N的值现在算出来是5

01:00:49.160 --> 01:00:49.460
对吧

01:00:49.460 --> 01:00:50.460
他会把它算出来

01:00:50.560 --> 01:00:52.260
算出来作为他的文本节链

01:00:54.660 --> 01:00:56.060
就形成了这么一种结构了

01:00:56.260 --> 01:00:56.660
看没

01:00:57.860 --> 01:00:59.060
咱们把这个代码呢

01:00:59.560 --> 01:01:00.160
复制一下

01:01:01.260 --> 01:01:01.860
复制一下

01:01:02.160 --> 01:01:03.160
然后呢到这边来

01:01:03.960 --> 01:01:04.860
多举几个例子

01:01:07.430 --> 01:01:08.030
这是

01:01:10.030 --> 01:01:11.130
两个函数组件

01:01:11.330 --> 01:01:13.230
然后呢这边在使用这个组件

01:01:15.860 --> 01:01:16.860
还在使用这个组件

01:01:17.060 --> 01:01:18.060
那么生存出来的

01:01:18.060 --> 01:01:19.660
以上代码生存的虚拟动物数

01:01:22.120 --> 01:01:23.020
就下面这个样子

01:01:23.520 --> 01:01:24.220
就这个样子

01:01:27.520 --> 01:01:28.120
结构啊

01:01:33.600 --> 01:01:34.400
就这个样子

01:01:35.100 --> 01:01:36.700
这就是函数组件

01:01:36.700 --> 01:01:38.600
他的做法非常非常简单

01:01:38.600 --> 01:01:40.200
当然他其实还要做一些事

01:01:40.500 --> 01:01:41.300
还要做一些事

01:01:41.700 --> 01:01:43.700
不过我们现在不用他开玩这个东西

01:01:44.000 --> 01:01:46.900
那么最核心的就是会调用这个函数

01:01:47.400 --> 01:01:48.200
调用这个函数

01:01:48.200 --> 01:01:49.200
然后呢得到

01:01:49.900 --> 01:01:51.400
函数返回的节点内容

01:01:51.400 --> 01:01:53.400
又来重新地轨来进行操作

01:01:54.400 --> 01:01:55.100
那么可以想到

01:01:55.600 --> 01:01:56.800
如果是内组件呢

01:01:56.800 --> 01:01:57.800
是不是内思的道理

01:01:57.800 --> 01:01:58.800
对吧内组件

01:01:59.100 --> 01:02:00.700
内组件呢他有生命周期

01:02:00.700 --> 01:02:02.900
所以说呢他会做一些额外的事情

01:02:02.900 --> 01:02:03.900
啊额外的事情

01:02:04.100 --> 01:02:05.900
那么内组件会做哪些事情呢

01:02:05.900 --> 01:02:06.600
第一步

01:02:07.000 --> 01:02:08.400
会创建对象

01:02:09.300 --> 01:02:12.700
创建内该内的该内的实力对象

01:02:13.400 --> 01:02:13.900
实力

01:02:14.400 --> 01:02:15.800
把对象呢拿到啊

01:02:15.800 --> 01:02:17.400
并且保存到这个节�上面

01:02:17.500 --> 01:02:19.700
这个节链上面会持有这个对象的实力

01:02:21.000 --> 01:02:22.000
这是第一步

01:02:22.200 --> 01:02:23.100
第二步呢

01:02:23.200 --> 01:02:25.400
然后立即调用

01:02:25.800 --> 01:02:28.100
啊对象的什么方法呢

01:02:28.100 --> 01:02:29.700
就是生命周期方法

01:02:30.400 --> 01:02:32.800
生命周期方法

01:02:32.800 --> 01:02:33.700
什么方法呢

01:02:34.000 --> 01:02:34.800
就是那个

01:02:35.500 --> 01:02:37.000
我们看一下新办的生命周期啊

01:02:37.200 --> 01:02:38.500
生命周期里面不是有这个方法吧

01:02:38.500 --> 01:02:38.900
对吧

01:02:38.900 --> 01:02:40.000
就这个方法啊

01:02:40.400 --> 01:02:41.600
我们就看新办的就行了啊

01:02:41.600 --> 01:02:42.700
因为就办的已经过期了

01:02:43.100 --> 01:02:44.300
啊调用这个方法

01:02:44.300 --> 01:02:45.600
这是个静态方法对吧

01:02:46.500 --> 01:02:46.900
好

01:02:48.300 --> 01:02:49.600
当然这个方法的返回结果

01:02:49.600 --> 01:02:51.400
它会混合到它的就是那个

01:02:51.800 --> 01:02:53.100
啊状态里边去

01:02:53.600 --> 01:02:55.400
啊这是调用生命周期方法这个

01:02:55.700 --> 01:02:56.200
然后呢

01:02:56.200 --> 01:02:57.200
然后运行什么呢

01:02:57.400 --> 01:02:58.900
运行啊

01:02:59.500 --> 01:03:01.300
运行该对象的

01:03:02.000 --> 01:03:03.800
对象的Render方法

01:03:04.800 --> 01:03:06.900
运行Render方法是不是又拿到一个东西

01:03:06.900 --> 01:03:07.400
对吧

01:03:07.800 --> 01:03:08.700
拿到什么

01:03:08.900 --> 01:03:10.500
拿到那个啊就是

01:03:11.200 --> 01:03:11.800
啊

01:03:12.600 --> 01:03:14.300
节点对象啊

01:03:14.300 --> 01:03:15.900
因为Render方法返回的东西

01:03:15.900 --> 01:03:18.000
跟函数组件是不是一样的到到底对吧

01:03:18.100 --> 01:03:20.300
它返回的东西一定是可以生成节点的

01:03:20.600 --> 01:03:22.100
冬瓜你返回的是那啊

01:03:22.200 --> 01:03:23.000
还是什么

01:03:24.200 --> 01:03:24.800
force啊

01:03:24.800 --> 01:03:26.600
还是什么元素啊

01:03:26.600 --> 01:03:28.100
还是什么乱七八糟的玩意儿

01:03:28.200 --> 01:03:29.400
总归你返回的东西

01:03:29.400 --> 01:03:30.700
我必须要能够生成对象

01:03:31.300 --> 01:03:33.300
哎呦能够生成节点节点对象

01:03:33.600 --> 01:03:35.200
所以说我们就调用它的方法

01:03:35.200 --> 01:03:36.500
是不是又拿到节点对象了

01:03:36.800 --> 01:03:37.200
对吧

01:03:37.400 --> 01:03:38.400
拿到节点对象了

01:03:39.200 --> 01:03:39.900
然后呢

01:03:40.000 --> 01:03:40.900
然后干干嘛

01:03:41.500 --> 01:03:42.600
啊然后干干嘛

01:03:43.400 --> 01:03:44.000
是不是

01:03:44.500 --> 01:03:45.400
现在呢

01:03:46.100 --> 01:03:47.900
要进行地规调用了对吧

01:03:48.300 --> 01:03:50.000
啊将该

01:03:50.600 --> 01:03:51.300
节点

01:03:51.500 --> 01:03:53.500
地规操作啊

01:03:53.700 --> 01:03:55.200
也就是回到第一步反复

01:03:55.300 --> 01:03:56.800
反复操作制造便利级

01:03:57.600 --> 01:03:58.300
制造结束

01:03:59.200 --> 01:04:00.300
当然这里不存在便利啊

01:04:00.300 --> 01:04:01.200
肯定是拿到三个对象

01:04:01.200 --> 01:04:03.300
它不允许因为单根嘛啊

01:04:03.300 --> 01:04:05.500
我们Render方法返回的只能是单个

01:04:05.700 --> 01:04:06.300
跟节点

01:04:06.300 --> 01:04:07.200
它不能返回多个

01:04:07.500 --> 01:04:09.000
所以说这里不存在便利了啊

01:04:09.100 --> 01:04:10.400
进反复操作就完成了

01:04:10.900 --> 01:04:11.200
对吧

01:04:11.200 --> 01:04:13.100
这就是这样的一个过程啊

01:04:13.100 --> 01:04:14.100
就是这样的一个过程

01:04:14.800 --> 01:04:15.100
好

01:04:15.100 --> 01:04:15.900
那么咱们来看一下

01:04:16.100 --> 01:04:17.500
又来看一下内组件啊

01:04:17.500 --> 01:04:18.100
内组件

01:04:18.300 --> 01:04:19.900
好比方说我们这里方形

01:04:20.700 --> 01:04:21.700
它保持函数吗

01:04:21.700 --> 01:04:22.400
它保持函数

01:04:22.400 --> 01:04:23.100
这无所谓

01:04:23.200 --> 01:04:24.400
然后把它变成内组件

01:04:25.500 --> 01:04:26.000
class

01:04:26.300 --> 01:04:27.000
comp1

01:04:28.300 --> 01:04:29.000
extend

01:04:29.800 --> 01:04:30.500
react

01:04:31.200 --> 01:04:32.000
component

01:04:33.200 --> 01:04:34.500
好然后呢这里呢

01:04:34.500 --> 01:04:36.300
我们写上Render

01:04:36.500 --> 01:04:37.300
Render方法

01:04:37.600 --> 01:04:38.600
返回什么呢

01:04:38.600 --> 01:04:41.600
返回的是一个he元数

01:04:41.600 --> 01:04:43.400
然后呢这里写个comp1

01:04:43.600 --> 01:04:44.300
comp1

01:04:45.200 --> 01:04:46.900
我们把它变成内嘛

01:04:46.900 --> 01:04:47.900
它变成内得了

01:04:47.900 --> 01:04:49.700
主要是我们要说明另外一个问题

01:04:51.200 --> 01:04:52.100
extend

01:04:52.600 --> 01:04:54.100
comp-react

01:04:54.900 --> 01:04:55.700
component

01:04:57.100 --> 01:04:58.400
这个放到Render里边

01:05:00.500 --> 01:05:01.100
Render

01:05:02.300 --> 01:05:02.800
Render

01:05:03.300 --> 01:05:03.800
Render

01:05:05.100 --> 01:05:06.300
然后这里Render

01:05:06.600 --> 01:05:07.100
就这个

01:05:07.400 --> 01:05:08.600
这个属性都不用传遞的

01:05:10.400 --> 01:05:11.300
我们现在就是说

01:05:11.800 --> 01:05:12.800
新建组件啊

01:05:12.800 --> 01:05:14.100
都还没有说什么更新

01:05:14.300 --> 01:05:16.200
更新那又是另一套东西了

01:05:16.200 --> 01:05:18.600
咱们就说重新创建组件

01:05:18.800 --> 01:05:20.100
一切都从头开始

01:05:20.100 --> 01:05:21.500
那么它怎么来玩的

01:05:22.700 --> 01:05:24.300
那么现在变成内组件了

01:05:24.300 --> 01:05:25.800
咱们把这个代码扔过去

01:05:25.800 --> 01:05:27.000
也看一下它的例子

01:05:31.770 --> 01:05:32.970
这是内组件的例子

01:05:34.880 --> 01:05:35.580
放过来

01:05:36.380 --> 01:05:38.280
那么这个内组件它会怎么生成

01:05:38.280 --> 01:05:38.880
一种生

01:05:38.880 --> 01:05:39.980
怎么样的数型结构呢

01:05:39.980 --> 01:05:40.780
看着啊

01:05:40.980 --> 01:05:42.480
首先呢它渲染这个玩意

01:05:42.480 --> 01:05:43.680
这是不是内组件

01:05:43.680 --> 01:05:44.380
对吧

01:05:44.380 --> 01:05:45.380
它是个内组件

01:05:45.380 --> 01:05:46.580
咱们复制一下

01:05:46.580 --> 01:05:48.480
这是一个class app

01:05:48.580 --> 01:05:49.480
是个内组件

01:05:49.980 --> 01:05:51.980
内组件是不是在节点里面

01:05:51.980 --> 01:05:53.380
会产生一个对象

01:05:53.380 --> 01:05:53.780
对吧

01:05:53.780 --> 01:05:54.780
这个内的对象

01:05:55.080 --> 01:05:56.380
就是app的实力

01:05:56.680 --> 01:05:57.480
app实力

01:05:57.680 --> 01:05:58.980
它会先建一个对象

01:05:59.380 --> 01:06:00.080
那么这里呢

01:06:00.480 --> 01:06:01.780
它倒是没有什么真实的动物

01:06:01.780 --> 01:06:03.180
但是它里面会建一个对象

01:06:04.480 --> 01:06:05.380
换个颜色

01:06:05.580 --> 01:06:08.350
换一个啥颜色

01:06:08.350 --> 01:06:09.250
看得清楚一点

01:06:11.850 --> 01:06:12.750
就这个颜色

01:06:13.350 --> 01:06:14.550
就是app的对象

01:06:14.750 --> 01:06:15.750
app的对象

01:06:16.350 --> 01:06:17.150
就实力

01:06:18.150 --> 01:06:19.450
它会创建一个app的实力

01:06:19.550 --> 01:06:20.250
一个对象

01:06:20.650 --> 01:06:21.350
然后呢

01:06:21.950 --> 01:06:22.550
调用什么了

01:06:22.550 --> 01:06:23.550
调用生命周期方法

01:06:23.550 --> 01:06:24.350
我自己不写了

01:06:24.350 --> 01:06:25.350
我在图上就不写了

01:06:25.350 --> 01:06:26.350
调用生命周期方法

01:06:26.350 --> 01:06:26.850
这个

01:06:28.250 --> 01:06:28.850
就这个方法

01:06:28.850 --> 01:06:29.750
你自己去调用

01:06:29.750 --> 01:06:31.150
它一定在Render之前调用

01:06:31.350 --> 01:06:32.350
所以调用这个方法

01:06:32.350 --> 01:06:33.350
它自己会去调用

01:06:33.550 --> 01:06:34.650
调用完了过后

01:06:34.650 --> 01:06:35.850
当然去创建实力

01:06:35.850 --> 01:06:36.850
是不是调用了构造函数

01:06:36.850 --> 01:06:37.750
这个没什么问题吧

01:06:38.350 --> 01:06:38.750
然后呢

01:06:38.750 --> 01:06:40.350
运行该对象的Render方法

01:06:40.550 --> 01:06:40.650
好

01:06:40.650 --> 01:06:42.150
一运行Render你看一下

01:06:42.750 --> 01:06:43.550
一运行Render

01:06:43.550 --> 01:06:44.850
说又返回一个组件

01:06:44.850 --> 01:06:45.250
对吧

01:06:45.250 --> 01:06:46.650
返回来一个什么DIV

01:06:46.650 --> 01:06:47.250
对不对

01:06:47.550 --> 01:06:49.050
DIV是不是创建动物节点

01:06:49.150 --> 01:06:49.850
针射动物

01:06:50.250 --> 01:06:51.950
DIV里边是不是又有什么

01:06:52.050 --> 01:06:52.850
又有Comp1

01:06:52.850 --> 01:06:54.450
Comp1是不是又是个内组件

01:06:54.450 --> 01:06:54.850
对吧

01:06:54.850 --> 01:06:56.050
它又是一个内组件

01:06:56.250 --> 01:06:56.950
组件节点

01:06:56.950 --> 01:06:57.950
是class

01:06:58.150 --> 01:06:58.850
内组件

01:06:58.850 --> 01:07:00.650
那么内组件是不是要创建实力

01:07:00.650 --> 01:07:01.050
对吧

01:07:01.050 --> 01:07:02.050
创建它的对象

01:07:02.050 --> 01:07:03.050
它会把保存起来

01:07:03.850 --> 01:07:04.450
谁的实力呢

01:07:04.450 --> 01:07:05.650
就是Comp1的实力

01:07:07.650 --> 01:07:08.650
Comp1的实力

01:07:08.950 --> 01:07:09.950
然后创建它的实力

01:07:10.150 --> 01:07:11.750
然后它里边有什么节点呢

01:07:11.750 --> 01:07:12.750
有一个动物节点

01:07:13.050 --> 01:07:13.950
它里边有一个动物节点

01:07:13.950 --> 01:07:14.650
H1

01:07:14.650 --> 01:07:16.350
是不是它也要调用构造函数

01:07:16.850 --> 01:07:17.650
因为创造它的实力

01:07:17.650 --> 01:07:18.450
它是个内组件

01:07:18.550 --> 01:07:19.450
是不是又要回到这里

01:07:20.150 --> 01:07:21.150
地规压这是

01:07:21.250 --> 01:07:22.750
它又回到这里进行运行

01:07:22.850 --> 01:07:23.350
对吧

01:07:23.650 --> 01:07:25.150
那么创建这个对象的实力

01:07:25.150 --> 01:07:26.550
又调用它的生命这些方法

01:07:26.550 --> 01:07:27.950
然后又运行它的Render

01:07:28.150 --> 01:07:29.150
又拿到节点对象

01:07:29.250 --> 01:07:29.550
对吧

01:07:29.550 --> 01:07:30.450
又拿到节点对象

01:07:30.750 --> 01:07:31.550
那么这里

01:07:31.550 --> 01:07:32.050
这下面

01:07:33.150 --> 01:07:34.850
又来Comp1里边

01:07:35.950 --> 01:07:37.450
Comp1里边是不是有得到了

01:07:37.450 --> 01:07:38.050
H1

01:07:38.050 --> 01:07:39.350
H1下面文本节链

01:07:39.350 --> 01:07:40.050
Comp1

01:07:40.050 --> 01:07:41.050
那么下面是不是一样的

01:07:41.350 --> 01:07:42.250
就没有这个东西了

01:07:45.030 --> 01:07:45.830
变成这个样子

01:07:46.930 --> 01:07:48.530
这就是内组件的操作方式

01:07:48.530 --> 01:07:49.730
其实内组件的操作方式

01:07:49.730 --> 01:07:50.730
本质上

01:07:50.730 --> 01:07:52.730
你要说跟函数几件有好大的区别

01:07:52.730 --> 01:07:54.130
当然它肯定是有区别的

01:07:54.130 --> 01:07:54.930
它有生命周期

01:07:55.330 --> 01:07:57.330
但是它的生命周期就是说了这个东西

01:07:57.530 --> 01:07:59.330
就是说了这个实力的生命周期

01:07:59.330 --> 01:08:00.330
说的是这个玩意儿

01:08:01.330 --> 01:08:02.530
说的是它的生命周期

01:08:03.130 --> 01:08:04.430
说的这么一个玩意儿

01:08:05.230 --> 01:08:07.030
那么它自然还有生命周期

01:08:07.030 --> 01:08:09.630
所以说它里边肯定要创建对象

01:08:09.930 --> 01:08:10.730
要创建对象

01:08:11.830 --> 01:08:12.930
我们把它放进来

01:08:16.510 --> 01:08:18.310
这是以上代码的生成的蓄力动不住

01:08:20.220 --> 01:08:21.220
它会创建对象

01:08:21.220 --> 01:08:22.220
然后创建对象之后

01:08:22.620 --> 01:08:23.620
会运行它里边的

01:08:24.320 --> 01:08:25.320
当然创建的时候运行

01:08:25.320 --> 01:08:26.020
创造函数

01:08:26.020 --> 01:08:27.620
然后会运行生命周期方法

01:08:27.620 --> 01:08:29.920
怎么get the derived from props

01:08:30.820 --> 01:08:32.820
然后又调用它的render

01:08:32.820 --> 01:08:33.220
对吧

01:08:33.220 --> 01:08:34.320
它是一次运行的

01:08:34.320 --> 01:08:35.820
render的时候返回了结果

01:08:35.820 --> 01:08:38.420
是不是又是可以创建节点的

01:08:38.420 --> 01:08:39.420
又来创建节点

01:08:39.420 --> 01:08:42.020
如果又遇到了内组件的节点

01:08:42.020 --> 01:08:43.120
那么又创建实力

01:08:43.120 --> 01:08:44.120
又创建实力

01:08:44.120 --> 01:08:45.420
又来运行这个东西

01:08:46.620 --> 01:08:46.820
好

01:08:46.820 --> 01:08:48.220
那么现在我问大家一个问题

01:08:49.720 --> 01:08:50.420
编时期的时候

01:08:50.420 --> 01:08:51.820
就有可能会考这个问题

01:08:53.020 --> 01:08:54.520
我在这个app里边

01:08:55.520 --> 01:08:56.220
constructor

01:08:57.220 --> 01:08:58.420
勾造函数里边

01:08:59.920 --> 01:09:00.320
super

01:09:01.520 --> 01:09:03.220
那么我觉得我已经解释清楚了

01:09:04.220 --> 01:09:06.720
这是app constructor

01:09:08.800 --> 01:09:10.400
constructor

01:09:13.310 --> 01:09:14.710
这里输出e

01:09:15.510 --> 01:09:16.110
这里输出e

01:09:16.610 --> 01:09:18.110
主要问你前面的数字

01:09:18.110 --> 01:09:18.910
它的输出的顺序

01:09:20.210 --> 01:09:20.910
那么这个是什么

01:09:21.410 --> 01:09:23.710
get derived

01:09:25.010 --> 01:09:26.010
state props

01:09:26.910 --> 01:09:28.810
这个它必须得有状态

01:09:28.810 --> 01:09:30.010
不然它要报警告

01:09:30.010 --> 01:09:30.810
这个空状态

01:09:31.410 --> 01:09:32.610
返回落就行了

01:09:32.610 --> 01:09:33.710
不覆盖它任何状态

01:09:33.710 --> 01:09:34.910
我只要说说明一下

01:09:34.910 --> 01:09:36.210
它什么时候运行

01:09:37.210 --> 01:09:37.910
这是2

01:09:39.310 --> 01:09:41.310
这是app的这个方法

01:09:42.510 --> 01:09:43.710
render里边输出

01:09:45.510 --> 01:09:45.810
3

01:09:48.410 --> 01:09:50.910
就是app的render方法

01:09:51.910 --> 01:09:53.210
好了

01:09:53.710 --> 01:09:55.310
那咱们把这个复制一下

01:09:56.710 --> 01:09:57.310
放到这上面来

01:10:01.860 --> 01:10:03.260
这里把app变成

01:10:03.860 --> 01:10:05.160
变成cump1

01:10:09.360 --> 01:10:10.360
这里4

01:10:10.960 --> 01:10:11.160
5

01:10:11.760 --> 01:10:11.960
6

01:10:13.160 --> 01:10:14.960
请问一下这个数字的输出顺序

01:10:16.360 --> 01:10:17.360
数字的输出顺序

01:10:19.260 --> 01:10:19.560
来吧

01:10:20.360 --> 01:10:21.560
比方就是这张面试题

01:10:22.060 --> 01:10:23.660
来问你数字的输出顺序是什么

01:10:24.360 --> 01:10:25.960
什么顺序

01:10:27.260 --> 01:10:28.960
顺序就是123456

01:10:30.460 --> 01:10:31.160
你不要认为

01:10:31.760 --> 01:10:32.960
这里面有这么一些组件

01:10:32.960 --> 01:10:34.360
那是不是先创建它

01:10:34.360 --> 01:10:35.360
再马上去创建它

01:10:35.360 --> 01:10:36.660
是不是一过了就是四了

01:10:36.660 --> 01:10:37.160
不是的

01:10:37.760 --> 01:10:38.260
不是的

01:10:38.460 --> 01:10:39.360
你看这个过程

01:10:40.660 --> 01:10:41.860
先拿到内组件

01:10:41.960 --> 01:10:43.360
我们为什么拿到内组件

01:10:43.360 --> 01:10:44.560
我们给它的就是内组件

01:10:44.560 --> 01:10:46.160
给它这个玩意就是内组件

01:10:47.160 --> 01:10:49.360
于是它创建内组件的节点

01:10:49.960 --> 01:10:51.560
创建这个的节点

01:10:51.560 --> 01:10:52.160
那么这个时候

01:10:52.160 --> 01:10:53.360
它就会创建它的实力

01:10:53.460 --> 01:10:55.060
就是6一个app的对象

01:10:56.060 --> 01:10:57.660
它就会创建这个app的实力

01:10:58.460 --> 01:10:59.360
6一个它的对象

01:10:59.360 --> 01:11:00.760
于是它会运行构造函数

01:11:00.960 --> 01:11:01.260
对吧

01:11:01.260 --> 01:11:02.060
创建实力就是6

01:11:02.360 --> 01:11:03.460
它会运行构造函数

01:11:04.160 --> 01:11:05.060
然后运行完了过后

01:11:05.060 --> 01:11:06.060
马上运行这个

01:11:06.460 --> 01:11:07.260
它会运行这个

01:11:07.760 --> 01:11:08.960
然后这个运行完了过后

01:11:08.960 --> 01:11:10.160
就开始运行Render了

01:11:10.360 --> 01:11:11.060
运行这个

01:11:11.460 --> 01:11:11.660
好

01:11:11.660 --> 01:11:14.060
等到把Render返回之后

01:11:14.760 --> 01:11:15.860
把Render返回之后

01:11:15.860 --> 01:11:17.260
是不是要构建轻的节点了

01:11:17.260 --> 01:11:19.060
于是它构建了DIV节点

01:11:19.960 --> 01:11:21.460
于是DIV里边又循环

01:11:21.460 --> 01:11:24.660
DIV的children属性又构建它里边的组件节点

01:11:24.660 --> 01:11:25.360
comput1

01:11:27.160 --> 01:11:28.560
构建了comput1的时候

01:11:28.560 --> 01:11:31.260
于是这个时候才去创建comput1的对象

01:11:31.460 --> 01:11:32.560
说到这个时候运行这个

01:11:33.160 --> 01:11:34.160
然后马上运行这个

01:11:34.560 --> 01:11:36.360
然后又运行comput1的Render

01:11:37.460 --> 01:11:39.160
然后100comput1的Render返回

01:11:39.160 --> 01:11:41.160
返回的东西又来构建节点

01:11:41.260 --> 01:11:42.460
于是构建了H1

01:11:42.460 --> 01:11:44.660
H下面文本节点comput1

01:11:45.060 --> 01:11:45.460
没了

01:11:46.960 --> 01:11:48.060
这是它真实的运行过程

01:11:48.060 --> 01:11:48.560
看一下吧

01:11:48.760 --> 01:11:49.860
一定是123456

01:11:51.660 --> 01:11:52.360
123456

01:11:53.560 --> 01:11:53.960
看没

01:11:54.960 --> 01:11:57.060
这就是你要搞清楚它的运行过程

01:11:58.260 --> 01:11:59.860
那么接下来还有个问题就是

01:12:01.260 --> 01:12:04.760
一个也是面试体的容易考到的问题

01:12:04.760 --> 01:12:06.160
就是component statement

01:12:07.660 --> 01:12:08.360
就这个函数

01:12:09.260 --> 01:12:10.160
来看一下这个函数

01:12:12.570 --> 01:12:15.170
比方说这个是输出a

01:12:15.170 --> 01:12:16.770
就不输出123456了

01:12:16.770 --> 01:12:18.970
就输出a app这个

01:12:19.570 --> 01:12:20.970
然后另外一个输出b

01:12:22.980 --> 01:12:23.880
关键是这个输出

01:12:23.980 --> 01:12:26.080
这个生命中心函数是什么时候运行的

01:12:26.980 --> 01:12:29.080
那么要了解这个生命中心函数是怎么运行的

01:12:29.080 --> 01:12:31.080
那我们又要前面要说它的原理了

01:12:31.280 --> 01:12:32.680
它怎么来玩的这个事情

01:12:34.380 --> 01:12:34.780
这里

01:12:36.960 --> 01:12:38.460
这里它是怎么回事呢

01:12:38.460 --> 01:12:39.160
它是这样子

01:12:39.960 --> 01:12:42.760
就在第三步完成之后

01:12:42.960 --> 01:12:43.660
一定注意

01:12:43.760 --> 01:12:46.360
一定是在第三步完成之后

01:12:47.360 --> 01:12:48.460
然后干嘛呢

01:12:48.460 --> 01:12:49.760
它还有一个步骤

01:12:50.760 --> 01:12:51.860
将该函

01:12:51.860 --> 01:12:53.860
将该组建的

01:12:53.860 --> 01:12:54.560
什么呢

01:12:54.560 --> 01:12:55.860
component

01:12:55.860 --> 01:12:57.160
就生命中心函数

01:12:57.160 --> 01:12:58.160
component

01:12:58.760 --> 01:12:59.960
地的mount

01:13:00.560 --> 01:13:03.560
加入到执行对列

01:13:05.060 --> 01:13:06.560
它加到一个对列里边

01:13:06.560 --> 01:13:07.960
然后等待执行

01:13:08.560 --> 01:13:09.360
是这么个意思

01:13:10.060 --> 01:13:11.460
那么这件事情完成了之后

01:13:11.460 --> 01:13:13.060
把它加入到执行对列

01:13:14.060 --> 01:13:15.160
那么注意看

01:13:16.160 --> 01:13:19.060
我现在告诉你了这么一个时间点

01:13:19.660 --> 01:13:21.060
那么对列有什么样的特点

01:13:21.060 --> 01:13:23.460
对列的特点就是先进先出

01:13:23.960 --> 01:13:24.660
先进

01:13:24.860 --> 01:13:27.060
哪个先进这个对列就像那一个数数一样

01:13:27.560 --> 01:13:28.860
我们把铺起到最后一个

01:13:28.860 --> 01:13:29.260
对吧

01:13:29.360 --> 01:13:31.060
把我这个组建的component

01:13:31.060 --> 01:13:32.160
地的mount这个函数

01:13:32.160 --> 01:13:33.460
把它铺起到最后一个

01:13:33.660 --> 01:13:35.660
那么一会我到时候现在还不执行

01:13:36.260 --> 01:13:37.360
将来才执行

01:13:38.060 --> 01:13:39.460
到时候我执行的时候

01:13:39.460 --> 01:13:40.760
是从第一个开始执行的

01:13:40.760 --> 01:13:42.260
那就是先进先出

01:13:42.760 --> 01:13:44.160
就是先进先执行

01:13:44.260 --> 01:13:47.060
也叫做先进先执行

01:13:49.460 --> 01:13:50.660
那么大家看一下

01:13:50.860 --> 01:13:51.660
什么时候执行

01:13:51.660 --> 01:13:53.460
什么时候执行对列

01:13:53.460 --> 01:13:54.460
我这里说一下

01:13:55.060 --> 01:13:57.860
当所有的组建

01:13:58.560 --> 01:13:59.360
全部

01:13:59.360 --> 01:14:00.860
就当整个

01:14:01.060 --> 01:14:05.160
当整个虚拟动数

01:14:06.060 --> 01:14:08.360
全部构建完毕

01:14:09.460 --> 01:14:10.360
构建完毕

01:14:10.560 --> 01:14:14.060
并且将真实的动物对象

01:14:14.760 --> 01:14:17.360
加入到容器中后

01:14:19.160 --> 01:14:20.260
执行该对列

01:14:20.960 --> 01:14:22.360
它是这样子一个执行顺序

01:14:22.460 --> 01:14:23.360
也就是说啥呢

01:14:23.360 --> 01:14:25.460
就是说我们这里的不是一个虚拟动物数

01:14:25.460 --> 01:14:25.860
对吧

01:14:26.360 --> 01:14:27.860
咱们把这个数构建完了过后

01:14:27.860 --> 01:14:29.060
产生了一些真实的动物

01:14:29.660 --> 01:14:30.560
这些真实的动物

01:14:30.760 --> 01:14:33.260
把它挂载到我们整个页面之后

01:14:33.860 --> 01:14:34.960
整个过程叫做挂载

01:14:34.960 --> 01:14:36.660
就是相当于Append Child

01:14:36.660 --> 01:14:37.860
就真实的动物里边

01:14:38.160 --> 01:14:39.860
把挂载到真实的动物里边过后

01:14:39.860 --> 01:14:41.260
然后才开始执行这个对列

01:14:41.260 --> 01:14:42.360
很后边了

01:14:42.460 --> 01:14:43.660
所以说在这个世界里边

01:14:43.660 --> 01:14:46.160
你可以放心大胆的去得到什么动物元素

01:14:46.360 --> 01:14:47.960
如果你需要得到动物元素的话

01:14:48.060 --> 01:14:51.360
当然普通情况下我们不推荐这样做

01:14:51.560 --> 01:14:52.260
不过说

01:14:52.560 --> 01:14:53.360
不过的话

01:14:53.360 --> 01:14:55.960
如果你特别有一些特别的需求

01:14:55.960 --> 01:14:57.360
要得到动物元素的话

01:14:57.360 --> 01:14:58.760
那么在这个世界里边许得到

01:14:58.860 --> 01:14:59.860
因为这个世界里边

01:14:59.860 --> 01:15:03.760
这个函数它就是在整个真实的动物构建好了之后

01:15:04.160 --> 01:15:05.460
加入到了页面之后

01:15:05.860 --> 01:15:06.660
已经生销了

01:15:06.660 --> 01:15:08.460
那么我们会运行这个函数

01:15:08.860 --> 01:15:09.560
当然都是

01:15:09.560 --> 01:15:10.960
我们这里说的前提条件

01:15:10.960 --> 01:15:11.960
都是第一次渲染

01:15:12.660 --> 01:15:13.860
新的元素产生

01:15:14.560 --> 01:15:15.960
那么现在大家看一下

01:15:16.960 --> 01:15:19.160
由于它出现在第四步

01:15:19.360 --> 01:15:21.560
就是内组件的执行顺序的第四步

01:15:22.660 --> 01:15:23.960
它是要等到

01:15:25.060 --> 01:15:26.460
这个函数结束过后

01:15:27.360 --> 01:15:28.160
然后对象

01:15:28.460 --> 01:15:30.360
这个就是内组件的对象

01:15:30.360 --> 01:15:31.560
它不是一个Render 方法

01:15:31.560 --> 01:15:31.960
对吧

01:15:32.060 --> 01:15:34.560
把Render 方法执行完了之后

01:15:34.960 --> 01:15:36.160
才把这个组件

01:15:36.260 --> 01:15:38.360
这个生命周期函数加到执行对列

01:15:38.560 --> 01:15:40.160
那么它的运行顺序

01:15:40.160 --> 01:15:41.760
你觉得应该是什么

01:15:43.560 --> 01:15:44.360
这里写错了

01:15:45.360 --> 01:15:46.260
这上面

01:15:46.660 --> 01:15:48.160
应该是先B后A

01:15:48.360 --> 01:15:49.560
还是先A后B

01:15:51.360 --> 01:15:52.160
IP里边

01:15:52.760 --> 01:15:54.160
IP里边是A

01:15:54.460 --> 01:15:56.360
它的ComponentDMount是A

01:15:56.760 --> 01:15:58.060
然后周里边是B

01:15:58.160 --> 01:16:00.260
那么先B后A还是先A后B

01:16:01.760 --> 01:16:02.760
咱们来看一下结果

01:16:03.160 --> 01:16:04.660
它是先B后A

01:16:04.960 --> 01:16:06.760
为什么是先B后A呢

01:16:06.760 --> 01:16:07.760
大家看一下这个顺序

01:16:08.960 --> 01:16:10.960
我现在渲染它的时候

01:16:10.960 --> 01:16:13.060
是先运行它的Render 方法

01:16:13.060 --> 01:16:13.460
对吧

01:16:13.560 --> 01:16:15.260
Render 方法运行得到节点了

01:16:15.260 --> 01:16:15.660
对吧

01:16:15.760 --> 01:16:16.560
得到节点了

01:16:16.560 --> 01:16:18.460
Render 方法还没有运行完

01:16:19.260 --> 01:16:20.660
Render 方法运行完了

01:16:20.660 --> 01:16:21.860
但是我得到了节点

01:16:21.860 --> 01:16:22.460
你看到没

01:16:22.460 --> 01:16:22.860
这里

01:16:23.660 --> 01:16:24.460
运行Render 方法

01:16:24.460 --> 01:16:25.960
拿到节点对象过后是要递归了

01:16:25.960 --> 01:16:26.460
现在

01:16:27.060 --> 01:16:28.360
这件事情还没做完

01:16:28.360 --> 01:16:29.260
要递归了

01:16:29.460 --> 01:16:31.460
那么现在我还没有把它加到对列

01:16:31.460 --> 01:16:32.960
然后我进行继续递归

01:16:33.060 --> 01:16:33.460
加它

01:16:33.460 --> 01:16:34.360
它又不是内组件

01:16:34.360 --> 01:16:34.860
算了吧

01:16:34.860 --> 01:16:36.160
我们继续加它

01:16:36.660 --> 01:16:37.560
它是个内组件

01:16:37.560 --> 01:16:38.760
那么它要运行Render

01:16:39.760 --> 01:16:40.660
运行到Render 过后

01:16:41.260 --> 01:16:41.860
我们这里

01:16:42.860 --> 01:16:46.860
又把它Render里边的东西又加到节点里边去

01:16:47.060 --> 01:16:47.260
好

01:16:47.260 --> 01:16:48.060
加完了过后

01:16:48.060 --> 01:16:49.060
是不是又回到这了

01:16:49.260 --> 01:16:49.760
回到这

01:16:49.760 --> 01:16:51.260
那么它Render是不是运行完了

01:16:51.660 --> 01:16:53.060
Render 我的处理结束了

01:16:53.060 --> 01:16:54.960
我已经把你的Render

01:16:55.660 --> 01:16:56.960
就是把这个com1

01:16:57.260 --> 01:16:59.060
就是把这个com1组件

01:16:59.260 --> 01:17:00.960
Render返回的东西

01:17:01.060 --> 01:17:04.460
都已经加到我们的组件树里边去了

01:17:04.860 --> 01:17:06.260
你看我把com1

01:17:06.360 --> 01:17:07.860
它这个组件Render返回的东西

01:17:07.860 --> 01:17:08.960
加到组件树里边去了

01:17:08.960 --> 01:17:09.960
那么这个组件

01:17:10.160 --> 01:17:11.560
它是不是还要完成第四步

01:17:11.760 --> 01:17:12.360
对吧

01:17:12.360 --> 01:17:14.060
这个组件它要完成第四步

01:17:14.160 --> 01:17:15.360
就是完成这个步骤

01:17:15.460 --> 01:17:17.460
那么现在就对点里边是不是有了它了

01:17:17.560 --> 01:17:18.160
对不对

01:17:18.760 --> 01:17:20.160
对点里边是不是有了

01:17:20.560 --> 01:17:21.760
我们对点里边写吧

01:17:22.360 --> 01:17:23.960
对点里边是不是又有了什么

01:17:24.060 --> 01:17:25.760
有了com1

01:17:25.760 --> 01:17:29.560
com1这个组件的compolant

01:17:29.760 --> 01:17:30.360
didmount

01:17:30.360 --> 01:17:30.660
对吧

01:17:30.660 --> 01:17:31.660
是不是又有这个函数了

01:17:31.660 --> 01:17:32.760
对点里边第一个

01:17:33.260 --> 01:17:34.360
对对的第一个

01:17:35.360 --> 01:17:37.560
然后它的运行是不是结束了

01:17:38.060 --> 01:17:39.160
它的运行结束了

01:17:39.460 --> 01:17:40.560
你看1234步

01:17:40.560 --> 01:17:41.660
它的运行结束了

01:17:42.060 --> 01:17:44.860
是不是又回到这里的运行

01:17:44.960 --> 01:17:45.260
对吧

01:17:45.260 --> 01:17:47.060
这里没什么说的了

01:17:47.160 --> 01:17:48.260
又回到这里的运行

01:17:48.460 --> 01:17:50.160
那么这里之前到第三步

01:17:50.160 --> 01:17:52.360
是不是刚才一直在处理它的第三步

01:17:52.360 --> 01:17:53.260
这是地规吗

01:17:53.660 --> 01:17:55.260
刚才一直在处理它的第三步

01:17:55.660 --> 01:17:57.860
到现在它把它的第三步处理完

01:17:58.460 --> 01:18:00.360
处理完了第三步过后

01:18:00.660 --> 01:18:02.560
那么它才在运行它的第四步

01:18:02.760 --> 01:18:04.660
就是把它的东西加到对点

01:18:05.560 --> 01:18:08.660
所以说这里对点里边就是com2

01:18:09.160 --> 01:18:09.960
didm

01:18:11.060 --> 01:18:11.660
cdm

01:18:12.560 --> 01:18:13.160
没问题吧

01:18:13.660 --> 01:18:14.760
这样子你看

01:18:14.860 --> 01:18:17.360
输出的是不是就是com1的

01:18:17.560 --> 01:18:18.360
就是b的

01:18:18.860 --> 01:18:19.560
这个不是

01:18:19.560 --> 01:18:20.460
我这里写错了

01:18:21.360 --> 01:18:22.060
这里是

01:18:23.160 --> 01:18:23.960
这里不是app

01:18:24.160 --> 01:18:24.860
com1

01:18:25.960 --> 01:18:26.560
com1

01:18:26.860 --> 01:18:27.160
保存

01:18:28.160 --> 01:18:29.760
你看是不是先输出com1的

01:18:30.260 --> 01:18:31.460
因为到时候执行对立的时候

01:18:31.460 --> 01:18:32.860
是从第一个开始执行

01:18:32.960 --> 01:18:33.860
然后执行第二个

01:18:34.060 --> 01:18:35.560
所以说它先输出com1的

01:18:35.560 --> 01:18:36.560
再输出com2的

01:18:37.160 --> 01:18:39.760
根本原因就是因为它是地规调用的

01:18:40.360 --> 01:18:41.860
这个过程是地规调用的

01:18:41.960 --> 01:18:43.160
所以说到了第三步

01:18:43.260 --> 01:18:44.160
第一个组建

01:18:44.460 --> 01:18:45.960
第一个组建是app

01:18:46.260 --> 01:18:46.960
内组建

01:18:47.260 --> 01:18:48.760
那么它到想执行第四步

01:18:48.760 --> 01:18:50.760
但是它在把第三步做完

01:18:50.860 --> 01:18:52.760
而第三步的时候产生了地规

01:18:53.460 --> 01:18:54.060
于是

01:18:54.160 --> 01:18:55.860
第三步要做好久好久

01:18:56.060 --> 01:18:57.360
做第三步的过程中

01:18:57.560 --> 01:18:59.160
那么就运行了这个东西了

01:18:59.660 --> 01:19:00.960
所以说它先挂载了

01:19:01.160 --> 01:19:02.060
那么它挂载完了

01:19:02.060 --> 01:19:03.660
就是挂载了个生命周期函数

01:19:03.760 --> 01:19:05.060
它挂载完了过后

01:19:05.160 --> 01:19:06.260
然后它再去挂载

01:19:06.360 --> 01:19:07.660
再挂载一个生命周期函数

01:19:07.660 --> 01:19:08.660
把它加到对点里边

01:19:08.760 --> 01:19:10.760
所以说看到的结果是这样一个结果

01:19:12.160 --> 01:19:13.460
我跟你说

01:19:13.560 --> 01:19:14.460
不是我吹牛

01:19:14.460 --> 01:19:15.060
这些东西

01:19:15.460 --> 01:19:16.360
你很难听得到的

01:19:16.360 --> 01:19:17.260
真的很难听得到

01:19:17.460 --> 01:19:19.260
特别是你不讲原码部分的话

01:19:19.960 --> 01:19:21.160
你很难听得到这些东西的

01:19:21.260 --> 01:19:22.160
你去查一下资料吧

01:19:22.160 --> 01:19:23.060
我看你怎么去查

01:19:23.360 --> 01:19:24.960
当然很多地方它只会告诉你

01:19:25.360 --> 01:19:27.160
它的顺序是植树件先运行

01:19:27.260 --> 01:19:28.360
然后再运行副组件

01:19:28.460 --> 01:19:29.460
但是它不知道为什么

01:19:29.760 --> 01:19:31.160
比方说我再给你说一个例子

01:19:32.560 --> 01:19:34.160
然后这种型的你就完全查不到了

01:19:34.160 --> 01:19:34.860
我告诉你

01:19:35.260 --> 01:19:36.560
基本上连国外的资料

01:19:37.160 --> 01:19:38.060
都很难查得到

01:19:41.580 --> 01:19:42.880
我这里写两个

01:19:42.880 --> 01:19:44.380
那里告诉我它的运行讯区

01:19:44.380 --> 01:19:45.980
我们现在其他那不说

01:19:46.380 --> 01:19:47.480
其他都很简单

01:19:47.480 --> 01:19:48.180
关键是这个

01:19:49.380 --> 01:19:50.580
这个东西的运行讯区

01:19:51.280 --> 01:19:52.680
你能知道它的运行讯区吗

01:19:53.680 --> 01:19:54.780
现在App有两个

01:19:55.480 --> 01:19:56.380
App有两个

01:19:57.180 --> 01:19:57.980
运行讯区是什么

01:19:57.980 --> 01:19:58.580
是什么了

01:19:58.980 --> 01:20:00.580
我现在都不用给你看答案

01:20:00.580 --> 01:20:02.080
你只要理解原理你就明白了

01:20:02.680 --> 01:20:03.580
原理是什么

01:20:03.980 --> 01:20:05.780
原理是不是外面现在多了一个DIV的

01:20:06.480 --> 01:20:07.980
上面是不是多了一个DIV的

01:20:08.380 --> 01:20:08.880
对吧

01:20:09.180 --> 01:20:09.780
你看这里

01:20:09.880 --> 01:20:11.380
这个是多了一个DIV

01:20:11.380 --> 01:20:11.780
对吧

01:20:12.280 --> 01:20:13.480
是一个普通的动物组件

01:20:13.980 --> 01:20:14.380
ok

01:20:14.480 --> 01:20:15.480
这是个动物组件

01:20:17.180 --> 01:20:17.380
好

01:20:17.380 --> 01:20:18.680
这个DIV里边是什么

01:20:18.680 --> 01:20:19.480
就是一个DIV

01:20:19.480 --> 01:20:19.780
对吧

01:20:19.780 --> 01:20:20.680
它有一个真实动物

01:20:20.680 --> 01:20:21.780
它会产生一个真实动物

01:20:22.180 --> 01:20:22.280
好

01:20:22.280 --> 01:20:23.680
这个DIV是不是有指援数

01:20:24.480 --> 01:20:24.980
没问题吧

01:20:25.680 --> 01:20:26.980
这个DIV它有指援数

01:20:27.480 --> 01:20:28.180
它有指援数

01:20:28.580 --> 01:20:29.980
那么它的指援数是不是这个玩意儿

01:20:30.780 --> 01:20:31.180
对吧

01:20:31.680 --> 01:20:32.880
它指援数就是这个玩意儿

01:20:33.380 --> 01:20:34.680
那么是不是遍地它的指援数

01:20:34.680 --> 01:20:35.580
它有两个指援数

01:20:35.680 --> 01:20:36.380
这是一个

01:20:36.880 --> 01:20:38.180
它的其中一个指援数

01:20:38.280 --> 01:20:39.180
一会儿还有一个

01:20:39.680 --> 01:20:40.380
这边还有一个

01:20:41.580 --> 01:20:42.280
还有两个吗

01:20:42.980 --> 01:20:45.080
那么变异勾件的时候

01:20:45.080 --> 01:20:46.380
是不是先变异左边了

01:20:46.380 --> 01:20:46.780
对吧

01:20:46.880 --> 01:20:47.780
先变异左边了

01:20:47.980 --> 01:20:49.180
左边的先勾件完

01:20:49.380 --> 01:20:50.680
左边勾件完了是不是

01:20:50.780 --> 01:20:51.480
com1

01:20:51.680 --> 01:20:52.280
com2

01:20:52.280 --> 01:20:52.780
对列

01:20:53.380 --> 01:20:55.380
component d的mount对列出来了

01:20:55.380 --> 01:20:55.880
对吧

01:20:55.980 --> 01:20:57.680
这样子的才把左边勾件完了

01:20:57.780 --> 01:20:58.180
对吧

01:20:58.980 --> 01:21:00.280
左边完了勾件完了过后

01:21:00.280 --> 01:21:01.580
是不是又勾件右边的

01:21:01.880 --> 01:21:02.280
对吧

01:21:03.180 --> 01:21:04.480
你看就产生多个实力了

01:21:04.480 --> 01:21:05.880
就不是同一个实力了

01:21:06.180 --> 01:21:07.080
又勾件右边的

01:21:07.080 --> 01:21:07.480
对不对

01:21:07.780 --> 01:21:09.080
勾件右边的时候

01:21:09.080 --> 01:21:10.080
是不是又出现了

01:21:10.280 --> 01:21:11.080
是不是一样的道理

01:21:11.080 --> 01:21:11.480
对不对

01:21:11.480 --> 01:21:12.680
又出现了com1

01:21:13.480 --> 01:21:14.080
cdm

01:21:14.180 --> 01:21:14.780
然后呢

01:21:15.380 --> 01:21:17.480
对列里边又出现了com2

01:21:17.680 --> 01:21:18.280
cdm

01:21:18.580 --> 01:21:18.680
好

01:21:18.680 --> 01:21:19.880
等它全部一套

01:21:19.880 --> 01:21:20.980
全部弄完了过后

01:21:20.980 --> 01:21:21.980
把这个真摄动

01:21:21.980 --> 01:21:23.180
挂在到页面上之后

01:21:23.180 --> 01:21:24.280
开始运行这个对列

01:21:24.380 --> 01:21:25.480
那么出来的结果是不是

01:21:26.080 --> 01:21:26.480
应该是

01:21:26.480 --> 01:21:27.480
应该是app

01:21:27.880 --> 01:21:28.680
应该说app

01:21:29.280 --> 01:21:30.580
是不是com1 app

01:21:30.580 --> 01:21:31.580
com1 app

01:21:31.880 --> 01:21:32.780
是这么一个数据

01:21:32.780 --> 01:21:33.580
拿离开一下吧

01:21:34.080 --> 01:21:34.880
com1 app

01:21:34.880 --> 01:21:35.580
com1 app

01:21:37.480 --> 01:21:38.580
那如果你不知道这个原理

01:21:38.580 --> 01:21:39.580
你怎么去分析呢

01:21:39.580 --> 01:21:41.280
你只能去使劲用备

01:21:42.180 --> 01:21:43.080
遇到一些特殊的情况

01:21:43.080 --> 01:21:43.680
你根本就

01:21:43.780 --> 01:21:44.680
这个这种面

01:21:44.680 --> 01:21:45.480
这种面试题

01:21:45.980 --> 01:21:46.980
你是很难做得出来的

01:21:46.980 --> 01:21:48.380
当然我很非常怀疑

01:21:48.880 --> 01:21:50.280
有人会出这种面试题

01:21:50.780 --> 01:21:52.880
因为你要出这种面试题的人呢

01:21:53.080 --> 01:21:54.580
那你肯定得把他的原理

01:21:54.580 --> 01:21:55.980
要搞得非常非常偷车才行

01:21:56.680 --> 01:21:57.580
当然肯定会有

01:21:57.580 --> 01:21:58.380
肯定是有的

01:21:59.580 --> 01:22:00.680
这是关于

01:22:00.980 --> 01:22:02.280
这个生命中一函数

01:22:02.280 --> 01:22:03.580
comp1cdm

01:22:04.380 --> 01:22:05.380
那么至此呢

01:22:05.780 --> 01:22:06.780
我就把这个

01:22:07.080 --> 01:22:09.280
首次训练就全部讲清楚了

01:22:09.480 --> 01:22:11.580
就是一个新的节点产生了

01:22:12.180 --> 01:22:13.180
以前没有这个节点

01:22:13.180 --> 01:22:14.780
现在产生了这么一个新的节点

01:22:14.780 --> 01:22:17.280
那么他会经过这么一个顺序来进行勾结

01:22:17.680 --> 01:22:18.580
勾结新的节点

01:22:19.580 --> 01:22:20.980
下来好好去理一下

01:22:20.980 --> 01:22:22.080
不要着急看下面了

01:22:22.180 --> 01:22:23.980
不然下边你根本就听不懂我来说啥

01:22:24.380 --> 01:22:26.180
你得把这个东西理解清楚

01:22:26.180 --> 01:22:27.080
理解透彻

01:22:27.480 --> 01:22:28.380
那么你才能知道

01:22:28.380 --> 01:22:30.080
这些乱七八糟的现象是怎么回事

01:22:30.080 --> 01:22:30.880
就比方说

01:22:30.880 --> 01:22:31.380
我说

01:22:31.580 --> 01:22:33.780
我今天这节课学完之后

01:22:34.280 --> 01:22:35.080
咱们在

01:22:35.680 --> 01:22:36.580
组建里边

01:22:36.980 --> 01:22:37.780
不能说组建里边吧

01:22:37.780 --> 01:22:38.580
就是这里

01:22:38.680 --> 01:22:40.180
比方说我们这里给他一个对象

01:22:40.180 --> 01:22:41.680
能不能为什么不能渲染

01:22:41.880 --> 01:22:43.080
你告诉我他为什么要抱错

01:22:43.080 --> 01:22:43.880
他不能渲染

01:22:44.680 --> 01:22:47.680
因为这个东西他倒是会成为他的一个元素

01:22:48.180 --> 01:22:49.580
他倒是会成为他的一个元素

01:22:49.580 --> 01:22:50.180
你看一下

01:22:50.180 --> 01:22:50.880
打印出来了

01:22:51.380 --> 01:22:51.980
来来来

01:22:52.180 --> 01:22:53.380
他就直接抱脱了

01:22:53.380 --> 01:22:55.380
他说不允许你成为他的指援数

01:22:55.580 --> 01:22:56.380
那么为什么

01:22:56.380 --> 01:22:58.780
就是因为这个东西没法勾结节点

01:22:59.180 --> 01:23:00.780
他是无法勾结节点的

01:23:01.580 --> 01:23:03.080
如果说从逻辑上来说的话

01:23:03.080 --> 01:23:04.980
他能不能勾结Rex元素了

01:23:04.980 --> 01:23:06.180
元素里边有个child

01:23:06.280 --> 01:23:07.080
child里边

01:23:07.380 --> 01:23:07.980
有一个

01:23:08.780 --> 01:23:09.380
有一个

01:23:10.180 --> 01:23:11.380
指援数是这个东西

01:23:11.380 --> 01:23:11.880
是个对象

01:23:12.580 --> 01:23:13.180
按理说的话

01:23:13.180 --> 01:23:14.880
他是可以勾结Rex元素的

01:23:14.880 --> 01:23:16.480
但他不能形成节点

01:23:16.680 --> 01:23:17.780
节点是要渲染的

01:23:17.780 --> 01:23:18.880
这个东西没法渲染

01:23:19.380 --> 01:23:21.080
而且哪些东西能渲染的

01:23:21.080 --> 01:23:21.780
我们前面说过

01:23:21.780 --> 01:23:22.380
文闷节点

01:23:22.380 --> 01:23:22.780
空节点

01:23:22.780 --> 01:23:23.280
数组节点

01:23:23.280 --> 01:23:23.880
多么节点

01:23:23.880 --> 01:23:24.480
组建节点

01:23:24.580 --> 01:23:25.380
只有这些节点

01:23:25.480 --> 01:23:26.380
你给我一个对象

01:23:26.380 --> 01:23:26.780
这个节点

01:23:26.780 --> 01:23:27.780
我是没法渲染的

01:23:27.980 --> 01:23:29.280
所以说他不允许你这样做

01:23:29.980 --> 01:23:31.580
这就是为什么这里面不能写对象

01:23:33.380 --> 01:23:33.880
好了

01:23:35.380 --> 01:23:36.880
可能比较复杂的在于这个

01:23:36.880 --> 01:23:37.880
他的执行顺序

01:23:38.080 --> 01:23:39.180
他是一个执行对列

01:23:39.180 --> 01:23:40.580
由于存在地规

01:23:40.580 --> 01:23:42.180
所以说当副主键

01:23:42.180 --> 01:23:43.180
在Render的时候

01:23:43.280 --> 01:23:45.780
副主键他自己都还没有加到执行对列

01:23:45.780 --> 01:23:47.580
他先把执住键全部运行完了

01:23:47.580 --> 01:23:48.880
那么也就说执住键

01:23:48.880 --> 01:23:50.580
他先加到执行对列

01:23:50.780 --> 01:23:52.080
那么面对这种情况的话

01:23:52.080 --> 01:23:52.580
他是

01:23:53.380 --> 01:23:54.080
先变的左边

01:23:54.080 --> 01:23:54.780
他再变右边了

01:23:54.780 --> 01:23:55.380
一个一个

01:23:55.380 --> 01:23:57.080
一个职员是一个职员说变利嘛

01:23:57.080 --> 01:23:58.380
所以说他先把左边人加完

01:23:58.380 --> 01:23:59.380
再把右边的加完

01:23:59.380 --> 01:24:01.080
如果三个四个是一样的道理

01:24:01.780 --> 01:24:02.980
你就知道他的运行顺序了

01:24:02.980 --> 01:24:04.180
component的地的mount

01:24:05.380 --> 01:24:06.780
好了其他的就

01:24:07.780 --> 01:24:08.180
没啥了

01:24:08.380 --> 01:24:08.880
没啥了

01:24:09.180 --> 01:24:12.280
当然这里边肯定不止这些东西啊

01:24:12.680 --> 01:24:14.580
我因为我没有设计到圆骂

01:24:14.680 --> 01:24:15.880
所以说我讲的呢

01:24:15.980 --> 01:24:19.380
已经是在不设计圆骂的情况下

01:24:19.780 --> 01:24:20.980
我已经是讲的

01:24:21.580 --> 01:24:22.580
非常的深了啊

01:24:23.780 --> 01:24:25.580
不过以后到了圆骂部分的话

01:24:25.580 --> 01:24:26.580
会更加深入

01:24:27.380 --> 01:24:27.880
好了啊

01:24:27.880 --> 01:24:30.680
这是关于首次渲染节点

01:24:31.380 --> 01:24:32.580
要做的事情

01:24:32.580 --> 01:24:33.580
我讲清楚了啊

01:24:33.980 --> 01:24:34.680
这个ppt

01:24:35.280 --> 01:24:36.680
这个ptt我还是

01:24:38.080 --> 01:24:39.180
不管我怎么画的吗

01:24:39.380 --> 01:24:40.480
还是把放进来啊

01:24:40.680 --> 01:24:42.580
这是渲染过程

01:24:42.980 --> 01:24:43.680
这个ptt

01:24:44.180 --> 01:24:45.680
还是把放到这个文件夹里边

01:24:46.380 --> 01:24:47.480
大家结合的笔记

01:24:47.480 --> 01:24:48.680
结合的视频看啊

01:24:48.680 --> 01:24:49.480
你光看

01:24:49.480 --> 01:24:51.180
如果你忘了视频的话

01:24:51.180 --> 01:24:52.980
你到时候肯定还是要补一下视频

01:24:52.980 --> 01:24:53.380
因为

01:24:53.680 --> 01:24:55.080
你不不结合的视频看的话

01:24:55.080 --> 01:24:55.880
你根本不知道

01:24:55.880 --> 01:24:57.180
不知道这个ptt在写啥

01:24:57.580 --> 01:24:58.680
这是首次渲染啊

01:24:58.780 --> 01:24:59.880
下来把它搞清楚啊

01:24:59.880 --> 01:25:00.980
反复的梳理一下

01:25:01.080 --> 01:25:01.880
那么下节课了

01:25:01.880 --> 01:25:03.080
咱们来讲更新

01:25:03.080 --> 01:25:04.580
哪一块才是重头戏

