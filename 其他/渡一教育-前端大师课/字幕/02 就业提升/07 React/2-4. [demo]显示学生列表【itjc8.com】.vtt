WEBVTT

00:00.620 --> 00:04.620
咱们这些课呢来做一个小的demo

00:04.620 --> 00:08.620
做什么呢就是来显示一个学生的列表

00:08.620 --> 00:10.620
那这里呢就涉及到一个问题啊

00:10.620 --> 00:12.620
他们学生的数据从哪来呢

00:12.620 --> 00:14.620
从哪里来呢

00:14.620 --> 00:16.620
这里呢我们使用那个度1的

00:16.620 --> 00:19.620
就我们学校的那个开放平台

00:19.620 --> 00:21.620
开发的中心

00:21.620 --> 00:23.620
输入这个地址

00:23.620 --> 00:25.620
输入这个地址

00:25.620 --> 00:28.620
API.edu.com

00:29.620 --> 00:31.620
输这么一个地址

00:31.620 --> 00:32.620
这个地址呢你输入之后呢

00:32.620 --> 00:34.620
它会让你登录啊

00:34.620 --> 00:38.620
如果让你登录的话你就登录呗

00:38.620 --> 00:39.620
应该你们的话

00:39.620 --> 00:40.620
听到这里的课的话

00:40.620 --> 00:41.620
应该是有这个账号的啊

00:41.620 --> 00:42.620
有登录

00:42.620 --> 00:43.620
没有账号的话注册一下

00:43.620 --> 00:44.620
不过注册了之后呢

00:44.620 --> 00:46.620
你是没有数据的啊

00:46.620 --> 00:47.620
需要自己去加一些数据

00:47.620 --> 00:49.620
不过你看到这个课程

00:49.620 --> 00:51.620
肯定是有这个数据的啊

00:51.620 --> 00:52.620
肯定是有这个数据的

00:52.620 --> 00:54.620
因为这个学生信息管理系统呢

00:54.620 --> 00:56.620
你们之前应该是做过的

00:56.620 --> 00:57.620
我们这里呢

00:57.620 --> 01:00.620
就是找到这个学生管理系统啊

01:00.620 --> 01:04.620
我们去请求什么接口呢

01:04.620 --> 01:06.620
去请求啥呢

01:06.620 --> 01:08.620
去请求这么一个接口

01:08.620 --> 01:09.620
就这个接口啊

01:09.620 --> 01:10.620
查询所有学生

01:10.620 --> 01:11.620
ok啊

01:11.620 --> 01:14.620
咱们去开一个新的地址啊

01:14.620 --> 01:17.620
去请求API students

01:17.620 --> 01:19.620
去请求这么一个地址啊

01:19.620 --> 01:20.620
拿到所有的学生数据啊

01:20.620 --> 01:21.620
我这里也报错了啊

01:21.620 --> 01:22.620
报错了原因呢

01:22.620 --> 01:24.620
是因为我没有给这个

01:24.620 --> 01:26.620
app key

01:26.620 --> 01:27.620
在这里呢

01:27.620 --> 01:28.620
主面板里边

01:28.620 --> 01:29.620
主面板里边

01:29.620 --> 01:31.620
它有这么一个app key

01:31.620 --> 01:33.620
把复制一下

01:33.620 --> 01:35.620
我这里就随便用了一个测试账号

01:35.620 --> 01:38.620
这里呢输入一个app key

01:38.620 --> 01:40.620
好 回录

01:43.620 --> 01:44.620
看一下啊

01:44.620 --> 01:45.620
那这里呢

01:45.620 --> 01:46.620
我们就可以拿到这个学生数据

01:46.620 --> 01:48.620
哇 这个网有点慢啊

01:48.620 --> 01:51.640
有点慢

01:51.640 --> 01:54.640
稍等一下吧

01:54.640 --> 01:59.360
怎么这么卡啊

01:59.360 --> 02:00.360
行了啊

02:00.360 --> 02:01.360
就这么个意思啊

02:01.360 --> 02:02.360
就这么个意思

02:02.360 --> 02:03.360
那一会我去请求吧

02:03.360 --> 02:04.360
我直接带吧

02:04.360 --> 02:05.360
里面去请求

02:05.360 --> 02:07.360
怎么现在这么卡

02:07.360 --> 02:08.360
就总之呢

02:08.360 --> 02:09.360
可以拿到学生数据啊

02:09.360 --> 02:10.360
那咱们看一下

02:10.360 --> 02:11.360
这个学生数据里边

02:11.360 --> 02:13.360
它有什么东西呢

02:13.360 --> 02:14.360
它反复的

02:14.360 --> 02:15.360
拿到了

02:15.360 --> 02:16.360
又见检查

02:16.360 --> 02:17.360
检查

02:17.360 --> 02:18.360
我们看一下这个network

02:18.360 --> 02:19.360
就是这个

02:19.360 --> 02:21.360
网络请求

02:21.360 --> 02:22.360
刷新一下

02:22.360 --> 02:24.360
刷新又要卡一遍

02:24.360 --> 02:25.360
刷新过后

02:25.360 --> 02:26.360
那我们可以达到这个网络请求

02:26.360 --> 02:28.360
我们看一下这个response

02:28.360 --> 02:29.360
看这个preview

02:29.360 --> 02:31.360
这样子格式有好一点

02:31.360 --> 02:33.360
它反回这么一个数据

02:33.360 --> 02:34.360
它里面有三个属性

02:34.360 --> 02:35.360
什么message

02:35.360 --> 02:36.360
查询成功standards

02:36.360 --> 02:38.360
表示查询状态

02:38.360 --> 02:39.360
然后呢

02:39.360 --> 02:40.360
这个data里边呢

02:40.360 --> 02:41.360
就是具体的数据了

02:41.360 --> 02:42.360
对吧

02:42.360 --> 02:43.360
这就是具体的数据了

02:43.360 --> 02:45.360
好 咱们先话不多说

02:45.360 --> 02:46.360
我们先不管什么

02:46.360 --> 02:47.360
组件不组件的

02:47.360 --> 02:49.360
我们先把这个数据拿到再说

02:49.360 --> 02:50.360
先拿到这个数据再说

02:50.360 --> 02:51.360
OK

02:51.360 --> 02:53.360
我们这里呢写这么一个函数

02:53.360 --> 02:57.360
取个名字叫做fetch

02:57.360 --> 02:58.360
fetch

02:58.360 --> 02:59.360
什么意思

02:59.360 --> 03:00.360
得到

03:00.360 --> 03:02.360
得到students

03:02.360 --> 03:04.360
students data

03:04.360 --> 03:06.360
得到所有的学生数据

03:06.360 --> 03:07.360
这样子写吧

03:07.360 --> 03:11.360
fetch all students

03:11.360 --> 03:12.360
这是做什么呢

03:12.360 --> 03:14.360
拿到

03:14.360 --> 03:16.360
拿到

03:16.360 --> 03:17.360
就是获取

03:17.360 --> 03:21.360
所有的学生数据

03:21.360 --> 03:22.360
那么请求的地址呢

03:22.360 --> 03:23.360
这个地址呢

03:23.360 --> 03:25.360
我们这里写这么个变量吧

03:25.360 --> 03:27.360
写这么个变量

03:27.360 --> 03:31.360
APPT

03:31.360 --> 03:32.360
这个变量

03:32.360 --> 03:35.360
把这个APPT放过来

03:35.360 --> 03:36.360
放过来

03:36.360 --> 03:38.360
这是我们的APPT

03:38.360 --> 03:39.360
然后呢

03:39.360 --> 03:40.360
我们这里去请求

03:40.360 --> 03:41.360
请求什么呢

03:41.360 --> 03:43.360
fetch

03:43.360 --> 03:44.360
请求什么地址呢

03:44.360 --> 03:45.360
请求这个地址

03:45.360 --> 03:47.360
就这个地址

03:47.360 --> 03:48.360
把复制一下吧

03:48.360 --> 03:49.360
放过来

03:49.360 --> 03:50.360
然后呢

03:50.360 --> 03:51.360
有一个参数

03:51.360 --> 03:52.360
参数

03:52.360 --> 03:53.360
参数后面呢

03:53.360 --> 03:54.360
跟的就是APPT

03:54.360 --> 03:55.360
然后等于啥呢

03:55.360 --> 03:56.360
拼接一下啊

03:56.360 --> 03:58.360
拼接我们的APPT

03:58.360 --> 03:59.360
我们去请求这个地址

03:59.360 --> 04:00.360
好

04:00.360 --> 04:01.360
请求完了之后呢

04:01.360 --> 04:02.360
他是不是得到

04:02.360 --> 04:03.360
得到个响应结果

04:03.360 --> 04:04.360
对吧

04:04.360 --> 04:05.360
响应结果里面呢

04:05.360 --> 04:06.360
我们把响应体呢

04:06.360 --> 04:07.360
这些东西

04:07.360 --> 04:09.360
都是我们咱们以前做过的

04:09.360 --> 04:10.360
对不对

04:10.360 --> 04:11.360
咱们以前做过的

04:11.360 --> 04:13.360
就是把我们的响应结果呢

04:13.360 --> 04:15.360
把它解析成节省

04:15.360 --> 04:16.360
解析一下啊

04:16.360 --> 04:17.360
解析成节省

04:17.360 --> 04:19.360
好解析完成节省之后呢

04:19.360 --> 04:21.360
咱们再取这个

04:21.360 --> 04:23.360
响应结果里边的什么呢

04:23.360 --> 04:26.360
再取这个响应结果里边的这个data

04:26.360 --> 04:28.360
我这个东西不用解释了吧

04:28.360 --> 04:30.360
你不要折磨我啊

04:30.360 --> 04:31.360
这个东西不用解释了吧

04:31.360 --> 04:33.360
这是咱们以前学过的知识啊

04:33.360 --> 04:34.360
如果你这一块知识

04:34.360 --> 04:35.360
还存在问题的话

04:35.360 --> 04:38.360
那好好把之前的那个ES6

04:38.360 --> 04:40.360
ES6的课程呢

04:40.360 --> 04:41.360
之后呢

04:41.360 --> 04:43.360
我应该还是我讲啊

04:43.360 --> 04:44.360
还是我讲

04:44.360 --> 04:45.360
我到时候呢

04:45.360 --> 04:47.360
应该会把它讲得非常非常清楚啊

04:47.360 --> 04:49.360
那就是能够获取到这个知识

04:49.360 --> 04:51.360
能够获取到这个数据

04:51.360 --> 04:52.360
好啊

04:52.360 --> 04:53.360
好

04:53.360 --> 04:54.360
那么最后呢

04:54.360 --> 04:55.360
我们拿到这个数据啊

04:55.360 --> 04:57.360
我们这里使用await

04:57.360 --> 04:58.360
await

04:58.360 --> 04:59.360
这里呢

04:59.360 --> 05:01.360
把它变成一个异步函数

05:01.360 --> 05:02.360
await

05:02.360 --> 05:04.360
拿到这个数据

05:04.360 --> 05:05.360
stues

05:05.360 --> 05:06.360
行了

05:06.360 --> 05:08.360
咱们把它打印出来看一下

05:08.360 --> 05:10.360
log stues

05:10.360 --> 05:11.360
看一下呢

05:11.360 --> 05:12.360
是否能够正确的得到

05:12.360 --> 05:13.360
好

05:13.360 --> 05:14.360
这里呢

05:14.360 --> 05:15.360
我们测试一下

05:15.360 --> 05:16.360
fetch all students

05:16.360 --> 05:17.360
看一下是否能够正确的拿到

05:17.360 --> 05:19.360
所谓的学生数据

05:19.360 --> 05:20.360
这里呢

05:20.360 --> 05:21.360
我们clear

05:21.360 --> 05:23.360
ya start

05:23.360 --> 05:24.360
重新运行一下啊

05:24.360 --> 05:27.360
看一下是不是能够正确的拿到呢

05:27.360 --> 05:29.360
我们先把数据拿到啊

05:29.360 --> 05:33.380
然后再说剩下的事情

05:33.380 --> 05:35.380
运行出来啊

05:35.380 --> 05:37.380
右键检查

05:37.380 --> 05:38.380
把这个数据打开啊

05:38.380 --> 05:39.380
控制一下打开

05:39.380 --> 05:40.380
好

05:40.380 --> 05:41.380
这要拿数据啊

05:41.380 --> 05:42.380
可能估计要拿一会儿啊

05:42.380 --> 05:44.380
拿一会儿数据

05:44.380 --> 05:45.380
稍等一下啊

05:45.380 --> 05:46.380
好是不是拿到了

05:46.380 --> 05:47.380
有12个学生

05:47.380 --> 05:48.380
对啊

05:48.380 --> 05:49.380
有12个学生

05:49.380 --> 05:50.380
OK啊

05:50.380 --> 05:51.380
我们就把这个数据呢

05:51.380 --> 05:53.380
就全部的拿到了啊

05:53.380 --> 05:54.380
那么现在呢

05:54.380 --> 05:55.380
我们要把这些数据呢

05:55.380 --> 05:56.380
显示到页面上

05:56.380 --> 05:57.380
这一块呢

05:57.380 --> 05:58.380
我们可不可以不用组建啊

05:58.380 --> 05:59.380
当然可以

05:59.380 --> 06:00.380
当然可以

06:00.380 --> 06:01.380
你就自己写啊

06:01.380 --> 06:02.380
自己写

06:02.380 --> 06:03.380
其实这些东西也是组建

06:03.380 --> 06:04.380
对吧

06:04.380 --> 06:05.380
也是组建

06:05.380 --> 06:06.380
那么为了方便

06:06.380 --> 06:07.380
为了重用

06:07.380 --> 06:08.380
我们可以呢

06:08.380 --> 06:10.380
把每一个学生的显示呢

06:10.380 --> 06:12.380
来做成一个组建

06:12.380 --> 06:13.380
把每一个学生的显示

06:13.380 --> 06:14.380
做成一个组建

06:14.380 --> 06:15.380
OK啊

06:15.380 --> 06:16.380
那么我们为了这个

06:16.380 --> 06:17.380
工程的结构

06:17.380 --> 06:18.380
更加合理呢

06:18.380 --> 06:19.380
我们通常呢

06:19.380 --> 06:21.380
会在src里面呢

06:21.380 --> 06:22.380
建一个文件夹

06:22.380 --> 06:24.380
给他取名为component

06:24.380 --> 06:25.380
表示呢

06:25.380 --> 06:26.380
这里边放的是什么了

06:26.380 --> 06:28.380
放的是我们的组建

06:28.380 --> 06:29.380
好这里呢

06:29.380 --> 06:30.380
我们新建一个介石啊

06:30.380 --> 06:31.380
给他取名为

06:31.380 --> 06:32.380
注意啊

06:32.380 --> 06:33.380
手字母大写

06:33.380 --> 06:35.380
包括我这个文件名

06:35.380 --> 06:36.380
规则上啊

06:36.380 --> 06:37.380
就是我们的

06:37.380 --> 06:38.380
书写规则上

06:38.380 --> 06:40.380
通常也会手字母大写

06:40.380 --> 06:41.380
表示这是个组建

06:41.380 --> 06:42.380
第二介石

06:42.380 --> 06:44.380
这是个组建用来干嘛呢

06:44.380 --> 06:46.380
用来显示单个学生

06:46.380 --> 06:47.380
好我们这里呢

06:47.380 --> 06:48.380
就给他做一个

06:48.380 --> 06:49.380
函数组建嘛

06:49.380 --> 06:50.380
我们都练习一下啊

06:50.380 --> 06:51.380
函数组建

06:51.380 --> 06:52.380
好我们这里

06:52.380 --> 06:54.380
可以使用我们那个插件

06:54.380 --> 06:55.380
就是我们之前安装的

06:55.380 --> 06:56.380
插件里边的一个

06:56.380 --> 06:58.380
书写叫做

06:58.380 --> 06:59.380
react

06:59.380 --> 07:00.380
叫r

07:00.380 --> 07:01.380
什么

07:01.380 --> 07:03.380
component

07:03.380 --> 07:04.380
f

07:04.380 --> 07:05.380
c

07:05.380 --> 07:06.380
应该是这个吧

07:06.380 --> 07:07.380
哦不对

07:07.380 --> 07:08.380
这是个内图件

07:08.380 --> 07:09.380
那咱们看一下吧

07:09.380 --> 07:10.380
这些东西

07:11.380 --> 07:13.380
我先为自己开拓一下啊

07:13.380 --> 07:14.380
这个很正常

07:14.380 --> 07:16.380
这些东西

07:17.380 --> 07:19.380
如果你有段时间没用的话

07:19.380 --> 07:20.380
肯定很容易忘记了

07:20.380 --> 07:21.380
我们来看一下

07:21.380 --> 07:22.380
他这里边的快捷键吧

07:22.380 --> 07:24.380
看一下他这里的快捷键

07:24.380 --> 07:25.380
怎么来快速的

07:25.380 --> 07:27.380
生成一个函数组建

07:29.380 --> 07:30.380
怎么来快速的

07:30.380 --> 07:32.380
生成一个函数组建

07:32.380 --> 07:33.380
我这里查询一下

07:33.380 --> 07:34.380
rcc

07:35.380 --> 07:36.380
就是react component

07:36.380 --> 07:37.380
这是一个内图建

07:37.380 --> 07:39.380
这是一个内图建

07:39.380 --> 07:40.380
然后呢

07:40.380 --> 07:41.380
函数组建

07:41.380 --> 07:42.380
我们看一下

07:43.380 --> 07:44.380
函数组建

07:45.380 --> 07:46.380
有没有

07:46.380 --> 07:47.380
如果没有的话

07:47.380 --> 07:48.380
我们就自己写得了

07:49.380 --> 07:51.380
这全是内图建

07:51.380 --> 07:53.380
这个地方是一个函数组建

07:53.380 --> 07:55.380
这个地方是一个函数组建

07:55.380 --> 07:56.380
rfc

07:57.380 --> 07:58.380
rfc

07:58.380 --> 07:59.380
看一下吧

07:59.380 --> 08:00.380
rfc

08:00.380 --> 08:01.380
ok

08:01.380 --> 08:02.380
这是个函数组建

08:02.380 --> 08:03.380
好就写出来了

08:03.380 --> 08:04.380
对吧

08:04.380 --> 08:05.380
就写出来了

08:05.380 --> 08:06.380
那他这边有没有属性的

08:06.380 --> 08:07.380
那肯定有属性

08:07.380 --> 08:09.380
你得把学生东西给我传过来

08:09.380 --> 08:11.380
你得把学生的东西给我传过来

08:11.380 --> 08:12.380
要传学生的所有数据

08:12.380 --> 08:13.380
对吧

08:13.380 --> 08:15.380
你得把学生的所有数据给我传过来

08:15.380 --> 08:17.380
什么学生的居住地址

08:17.380 --> 08:19.380
学生的出生年月

08:19.380 --> 08:21.380
学生的就是注册时间

08:21.380 --> 08:22.380
学生的email

08:22.380 --> 08:23.380
这些东西

08:23.380 --> 08:25.380
这些信息你都要传给我

08:25.380 --> 08:26.380
我要把它进行显示

08:26.380 --> 08:27.380
所以说

08:27.380 --> 08:28.380
我们就假设

08:28.380 --> 08:29.380
约定好

08:29.380 --> 08:31.380
你要把这些数据全部传过来

08:31.380 --> 08:32.380
那我这里写啥呢

08:32.380 --> 08:34.380
就写一个li

08:34.380 --> 08:35.380
就写个li

08:35.380 --> 08:37.380
这个li里面显示什么呢

08:37.380 --> 08:38.380
显示

08:38.380 --> 08:41.380
显示一个学生的所有数据

08:41.380 --> 08:42.380
这样子显示

08:42.380 --> 08:44.380
我们把这个组件写好

08:44.380 --> 08:45.380
好

08:45.380 --> 08:46.380
当然有些东西说

08:46.380 --> 08:48.380
能不能把整个学生对象传给我呢

08:48.380 --> 08:49.380
比方说

08:49.380 --> 08:50.380
他传这么一个东西

08:50.380 --> 08:52.380
probs里面student

08:52.380 --> 08:54.380
把整个对象传给我

08:54.380 --> 08:56.380
我从整个对象里面取数据

08:56.380 --> 08:57.380
取数据都行

08:57.380 --> 08:58.380
都可以

08:58.380 --> 08:59.380
因为我们之前说过

08:59.380 --> 09:01.380
属性里面可以传任何东西

09:01.380 --> 09:02.380
所以说你可以传

09:02.380 --> 09:03.380
你可以把分开传递

09:03.380 --> 09:05.380
把这些属性分开传递

09:05.380 --> 09:06.380
也可以呢

09:06.380 --> 09:08.380
把他就是合并成一个对象

09:08.380 --> 09:09.380
来传递过来都行

09:09.380 --> 09:10.380
那么假设

09:10.380 --> 09:12.380
假设

09:12.380 --> 09:14.380
这些东西都是约定好的

09:14.380 --> 09:16.380
假设

09:16.380 --> 09:18.380
所有的学生信息

09:18.380 --> 09:20.380
学生信息

09:20.380 --> 09:22.380
都是分开传递的

09:22.380 --> 09:24.380
比方的都是分开传递的

09:24.380 --> 09:26.380
作为一个一个的属性传递

09:26.380 --> 09:27.380
那么这里呢

09:27.380 --> 09:28.380
我们就书写一个个来吧

09:28.380 --> 09:30.380
首先是学生的姓名

09:30.380 --> 09:31.380
一个个来

09:31.380 --> 09:32.380
咱们这里呢

09:32.380 --> 09:35.380
就写上学生的姓名

09:35.380 --> 09:36.380
这样子写吧

09:36.380 --> 09:37.380
写两个中央号

09:37.380 --> 09:39.380
姓名

09:39.380 --> 09:40.380
姓名的话

09:40.380 --> 09:43.380
后边写上一个

09:43.380 --> 09:44.380
来自于什么

09:44.380 --> 09:45.380
来自于属性

09:45.380 --> 09:46.380
属性什么

09:46.380 --> 09:47.380
点内

09:47.380 --> 09:48.380
对吧

09:48.380 --> 09:49.380
我们这里可以

09:49.380 --> 09:50.380
比方说约定好

09:50.380 --> 09:51.380
约定好

09:51.380 --> 09:52.380
咱们有一个属性lamb

09:52.380 --> 09:54.380
你得传递给我

09:54.380 --> 09:56.380
这是个lamb这个属性

09:56.380 --> 09:58.380
还有啥呢

09:58.380 --> 10:01.380
这里写个兜号

10:01.380 --> 10:04.380
然后再来一个

10:04.380 --> 10:06.380
这是姓名

10:06.380 --> 10:07.380
姓名的话

10:07.380 --> 10:09.380
还有一个就是邮箱

10:09.380 --> 10:11.380
简单写几个邮箱

10:11.380 --> 10:13.380
邮箱的话来自于props

10:13.380 --> 10:14.380
点什么

10:14.380 --> 10:16.380
点email

10:16.380 --> 10:18.380
这是邮箱

10:18.380 --> 10:19.380
再来

10:19.380 --> 10:22.380
再来显示一个用户的姓别吧

10:22.380 --> 10:23.380
姓别

10:23.380 --> 10:24.380
这个姓别的话

10:24.380 --> 10:25.380
依为男

10:25.380 --> 10:26.380
凝为女

10:26.380 --> 10:28.380
所以说我们这里呢

10:28.380 --> 10:30.380
姓别

10:30.380 --> 10:33.380
姓别

10:33.380 --> 10:34.380
那么这里呢

10:34.380 --> 10:37.380
我们写上这个6

10:37.380 --> 10:38.380
姓别

10:38.380 --> 10:39.380
这里呢

10:39.380 --> 10:40.380
做个三个运算符吧

10:40.380 --> 10:42.380
如果等于1

10:42.380 --> 10:43.380
那么就是什么呢

10:43.380 --> 10:44.380
就是男

10:44.380 --> 10:45.380
就是男

10:45.380 --> 10:47.380
否则的话就是女

10:47.380 --> 10:49.380
我们这样子写

10:49.380 --> 10:50.380
姓别

10:50.380 --> 10:52.380
然后再一个

10:52.380 --> 10:53.380
出生日期

10:53.380 --> 10:56.380
出生年份

10:56.380 --> 10:59.380
出生年份

10:59.380 --> 11:02.380
写上这么一个props

11:03.380 --> 11:04.380
行了

11:04.380 --> 11:06.380
就这么四个属性就得了

11:06.380 --> 11:07.380
于是呢

11:07.380 --> 11:09.380
咱们就可以得到这么一个学生

11:09.380 --> 11:11.380
把学生对象的信息传递给我

11:11.380 --> 11:12.380
OK

11:12.380 --> 11:13.380
那我就可以怎么样了

11:13.380 --> 11:15.380
把这些信息显示出来

11:15.380 --> 11:16.380
说到这儿

11:16.380 --> 11:18.380
我们就顺便说一个问题

11:18.380 --> 11:19.380
说一个问题

11:19.380 --> 11:20.380
就是说有的时候

11:20.380 --> 11:23.380
你可能会有这么一个需求

11:23.380 --> 11:26.380
就是要在内容里面

11:26.380 --> 11:27.380
显示大过号

11:27.380 --> 11:28.380
比方说吧

11:28.380 --> 11:29.380
就这里

11:29.380 --> 11:30.380
你要显示个大过号

11:30.380 --> 11:31.380
那怎么办呢

11:31.380 --> 11:33.380
你不能直接这样子写

11:33.380 --> 11:34.380
这样子写的话

11:34.380 --> 11:35.380
你要出问题的

11:35.380 --> 11:36.380
你要出问题的

11:36.380 --> 11:37.380
因为他认为

11:37.380 --> 11:38.380
这个是个介石

11:38.380 --> 11:39.380
他是个介石

11:39.380 --> 11:40.380
那怎么办呢

11:40.380 --> 11:42.380
那有人可能会想到

11:42.380 --> 11:44.380
因为这个大过号

11:44.380 --> 11:45.380
它有一个特殊含义

11:45.380 --> 11:46.380
对吧

11:46.380 --> 11:47.380
那是不是要转移呢

11:47.380 --> 11:49.380
你看一下转移行不行呢

11:49.380 --> 11:50.380
也不行

11:50.380 --> 11:51.380
也不行

11:51.380 --> 11:52.380
那因为一个转移

11:52.380 --> 11:54.380
它也没法理解

11:54.380 --> 11:55.380
因为它始终认为

11:55.380 --> 11:57.380
大过号里面是介石代码

11:57.380 --> 11:59.380
你前面是一个普通文本写纲

11:59.380 --> 12:00.380
那这个时候怎么办

12:00.380 --> 12:01.380
如果你要出写个大过号

12:01.380 --> 12:02.380
那你在这么写

12:02.380 --> 12:04.380
你在这么写

12:04.380 --> 12:06.380
这是左大过号

12:06.380 --> 12:07.380
然后了

12:07.380 --> 12:08.380
这边

12:08.380 --> 12:10.380
这边呢

12:10.380 --> 12:12.380
是一个右大过号

12:12.380 --> 12:13.380
能看懂吗

12:13.380 --> 12:15.380
这边写了个介石

12:15.380 --> 12:16.380
介石表达是

12:16.380 --> 12:18.380
是一个字面量大过号

12:18.380 --> 12:19.380
然后这边是个介石表达是

12:19.380 --> 12:20.380
字面量

12:20.380 --> 12:21.380
右过号

12:21.380 --> 12:22.380
还得这么写

12:22.380 --> 12:23.380
得这么写

12:23.380 --> 12:24.380
这个大家顺便说一下

12:24.380 --> 12:26.380
我想到了就顺便说一下了

12:26.380 --> 12:28.380
这个也不太会理得到

12:28.380 --> 12:29.380
好了

12:29.380 --> 12:30.380
我们就写好了这么一个组件

12:30.380 --> 12:32.380
那咱们来试用一下吧

12:32.380 --> 12:33.380
试用一下这个组件

12:33.380 --> 12:34.380
看行不行

12:34.380 --> 12:35.380
行不行

12:35.380 --> 12:36.380
这里面呢

12:36.380 --> 12:38.380
我们比方说

12:38.380 --> 12:40.380
就给他使用一下这个组件

12:40.380 --> 12:41.380
测试一下

12:41.380 --> 12:43.380
import

12:43.380 --> 12:44.380
student

12:44.380 --> 12:45.380
from

12:45.380 --> 12:47.380
来自于component

12:47.380 --> 12:48.380
里面的student

12:48.380 --> 12:49.380
来自于这

12:49.380 --> 12:51.380
我们这里就直接渲染

12:51.380 --> 12:53.380
一个student的组件

12:53.380 --> 12:54.380
直接渲染

12:54.380 --> 12:56.380
student

12:56.380 --> 12:57.380
这里面要给他传属性

12:57.380 --> 12:58.380
传什么属性呢

12:58.380 --> 12:59.380
比方说

12:59.380 --> 13:00.380
这里复制一个学生对象

13:00.380 --> 13:02.380
复制这么一个学生对象

13:02.380 --> 13:04.380
复制一个

13:06.380 --> 13:07.380
写一个const

13:07.380 --> 13:08.380
s

13:09.380 --> 13:10.380
两个大过号

13:10.380 --> 13:14.420
这里

13:14.420 --> 13:15.420
这里没加

13:15.420 --> 13:16.420
没有加什么

13:16.420 --> 13:17.420
没有加兜号是吧

13:17.420 --> 13:18.420
OK

13:18.420 --> 13:19.420
把兜号加上

13:20.420 --> 13:22.420
把这些数据都加过来

13:22.420 --> 13:23.420
都加过来

13:24.420 --> 13:25.420
行了

13:25.420 --> 13:26.420
写好这么一个对象

13:26.420 --> 13:27.420
写好一个对象

13:27.420 --> 13:29.420
那现在我们能不能这样传递

13:29.420 --> 13:30.420
首先大家想一想

13:30.420 --> 13:32.420
能不能这样的传递

13:33.420 --> 13:34.420
能不能

13:34.420 --> 13:35.420
不能

13:35.420 --> 13:36.420
因为为什么不能这样传递呢

13:36.420 --> 13:38.420
因为它不符合我们的约定

13:38.420 --> 13:39.420
它是自行约定的

13:39.420 --> 13:41.420
那如果我这里要求他

13:41.420 --> 13:43.420
就传一个对象进来

13:43.420 --> 13:44.420
当然没问题

13:44.420 --> 13:45.420
你就这样传递就完事了

13:45.420 --> 13:47.420
你只需要传个对象进来

13:47.420 --> 13:48.420
那么我们这里

13:48.420 --> 13:49.420
这样传递过后

13:49.420 --> 13:51.420
我们就可以从这个属性里面

13:51.420 --> 13:52.420
得到什么

13:52.420 --> 13:53.420
得到student

13:53.420 --> 13:54.420
他就是个学生的对象

13:54.420 --> 13:56.420
他里面包含了所有的信息

13:56.420 --> 13:57.420
到时候咱们用的时候

13:57.420 --> 13:58.420
肯定会这样子用

13:58.420 --> 13:59.420
对吧

13:59.420 --> 14:00.420
肯定会这样子用

14:00.420 --> 14:01.420
对不对

14:01.420 --> 14:02.420
包括下面的也是一样

14:02.420 --> 14:04.420
这个没什么好说的

14:04.420 --> 14:05.420
但是问题是

14:05.420 --> 14:06.420
现在是分开传递的

14:06.420 --> 14:07.420
那你是不是要分开传递

14:07.420 --> 14:08.420
对吧

14:08.420 --> 14:09.420
name为啥呢

14:09.420 --> 14:12.420
是不是等于s.name

14:12.420 --> 14:13.420
对不对

14:13.420 --> 14:14.420
是不是要分开传递

14:14.420 --> 14:15.420
还有什么

14:15.420 --> 14:17.420
还有sex等于什么

14:17.420 --> 14:18.420
s.sex

14:18.420 --> 14:19.420
对吧

14:19.420 --> 14:20.420
要分开传递

14:20.420 --> 14:21.420
因为我们这里要求

14:21.420 --> 14:22.420
是要分开传递

14:22.420 --> 14:24.420
那这里是不是有点麻烦

14:24.420 --> 14:25.420
对不对

14:25.420 --> 14:26.420
有点麻烦

14:26.420 --> 14:27.420
接下来告诉大家一个

14:27.420 --> 14:29.420
非常巧妙的办法

14:29.420 --> 14:31.420
怎么来做这件事呢

14:31.420 --> 14:33.420
如何来解决这个麻烦呢

14:33.420 --> 14:34.420
我们可以这样做

14:34.420 --> 14:36.420
直接加两个大货号

14:36.420 --> 14:37.420
没问题的

14:37.420 --> 14:38.420
可以的

14:38.420 --> 14:39.420
直接加两个大货号

14:39.420 --> 14:41.420
然后这里边写件是表达是

14:41.420 --> 14:43.420
我们直接把对象的

14:43.420 --> 14:45.420
所有东西展开

14:45.420 --> 14:47.420
把对象里面所有东西展开

14:47.420 --> 14:49.420
这样子一来的话

14:49.420 --> 14:50.420
那么这个话

14:50.420 --> 14:51.420
把对象的所有的属性

14:51.420 --> 14:53.420
是不是全部载开了

14:53.420 --> 14:55.420
把对象的所有属性

14:55.420 --> 14:57.420
全部给它展开了

14:57.420 --> 14:58.420
就是说

14:58.420 --> 14:59.420
这样子写就相当于是

14:59.420 --> 15:01.420
把对象的所有属性

15:01.420 --> 15:02.420
而最是复制过去的

15:02.420 --> 15:03.420
s.exe

15:03.420 --> 15:04.420
而最是

15:04.420 --> 15:06.420
相当于是这样子写的

15:06.420 --> 15:07.420
后面就一次写

15:07.420 --> 15:08.420
把对象的所有属性

15:08.420 --> 15:10.420
全部给它了

15:10.420 --> 15:12.420
这个属性是不是多了

15:12.420 --> 15:13.420
多了不要紧

15:13.420 --> 15:14.420
我这里不用

15:14.420 --> 15:15.420
就不是完成了吗

15:15.420 --> 15:16.420
对不对

15:16.420 --> 15:17.420
咱们打印出来看一下

15:17.420 --> 15:18.420
打印出这个props

15:18.420 --> 15:19.420
首先看一下

15:19.420 --> 15:21.420
它能不能显示

15:21.420 --> 15:22.420
然后再看一下

15:22.420 --> 15:23.420
这一块呢

15:23.420 --> 15:24.420
它就是

15:24.420 --> 15:25.420
能不能得到

15:25.420 --> 15:26.420
这些信息

15:26.420 --> 15:28.420
我们看一下吧

15:28.420 --> 15:30.420
这个Element里边

15:30.420 --> 15:31.420
可以看到

15:31.420 --> 15:32.420
咱们的LOI里面

15:32.420 --> 15:33.420
是不是可以正常显示

15:33.420 --> 15:34.420
这些信息了

15:34.420 --> 15:35.420
对不对

15:35.420 --> 15:36.420
正常显示这些信息了

15:36.420 --> 15:37.420
并且

15:37.420 --> 15:38.420
我们实际上

15:38.420 --> 15:40.420
props里面得到了什么

15:40.420 --> 15:42.420
得到了它所有的属性

15:42.420 --> 15:43.420
看到没有

15:43.420 --> 15:44.420
得到了它的所有属性

15:44.420 --> 15:45.420
props里面

15:45.420 --> 15:46.420
虽然它属性多了

15:46.420 --> 15:47.420
多了不要紧

15:47.420 --> 15:48.420
对不对

15:48.420 --> 15:49.420
不要紧

15:49.420 --> 15:50.420
有些同学说

15:50.420 --> 15:51.420
会不会浪费内存空间

15:51.420 --> 15:52.420
不会

15:52.420 --> 15:53.420
不会

15:53.420 --> 15:55.420
也不是说完全不会吧

15:55.420 --> 15:57.420
多多少少会浪费那么一点点

15:57.420 --> 15:59.420
这一点点内存空间

15:59.420 --> 16:00.420
我们是完全可以接受的

16:00.420 --> 16:01.420
就这样写起来的

16:01.420 --> 16:02.420
非常方便

16:02.420 --> 16:03.420
我们就是说

16:03.420 --> 16:05.420
对销率这个东西

16:05.420 --> 16:07.420
不要走火入魔

16:07.420 --> 16:08.420
你不能为了销率

16:08.420 --> 16:10.420
牺牲太多东西

16:10.420 --> 16:11.420
比方说我们这里写

16:11.420 --> 16:12.420
写起来的确实

16:12.420 --> 16:14.420
确实非常非常麻烦

16:14.420 --> 16:15.420
那你为了销率

16:15.420 --> 16:17.420
你将降低了自己开发

16:17.420 --> 16:18.420
开发效率

16:18.420 --> 16:19.420
你为了执行效率

16:19.420 --> 16:20.420
执行效率

16:20.420 --> 16:21.420
降低了自己开发效率

16:21.420 --> 16:23.420
其实也不是一件很好的事

16:23.420 --> 16:24.420
对吧

16:24.420 --> 16:25.420
你要说

16:25.420 --> 16:26.420
你不要走火入魔

16:26.420 --> 16:27.420
就是说

16:27.420 --> 16:29.420
销率最高的是啥

16:29.420 --> 16:30.420
销率最高的就补血呆

16:30.420 --> 16:32.420
一句话都不要写

16:32.420 --> 16:33.420
这样子销率最高

16:33.420 --> 16:34.420
程序不运行

16:34.420 --> 16:36.420
销率肯定要考虑

16:36.420 --> 16:37.420
但是

16:37.420 --> 16:38.420
不要走火入魔

16:38.420 --> 16:39.420
这一块浪费的销率

16:39.420 --> 16:41.420
浪费的内存空间

16:41.420 --> 16:42.420
确实很低

16:42.420 --> 16:43.420
很少很少

16:43.420 --> 16:44.420
所以说我们这里

16:44.420 --> 16:46.420
直接用就完了

16:46.420 --> 16:47.420
这样子

16:47.420 --> 16:48.420
我们就可以非常方便的

16:48.420 --> 16:50.420
把这些数据全部传过来了

16:50.420 --> 16:51.420
这是单个学生

16:51.420 --> 16:52.420
单个学生

16:52.420 --> 16:55.420
有了单个学生的组件之后

16:55.420 --> 16:56.420
我们再来做一个组件

16:56.420 --> 16:58.420
就是多个学生的

16:58.420 --> 16:59.420
给他取个名字叫

16:59.420 --> 17:01.420
student list

17:01.420 --> 17:02.420
多个学生的组件

17:02.420 --> 17:03.420
又来写个组件

17:03.420 --> 17:04.420
那么这一块

17:04.420 --> 17:06.420
我们写个内组件

17:06.420 --> 17:07.420
写个内组件

17:07.420 --> 17:08.420
rcc

17:10.420 --> 17:11.420
这样子

17:11.420 --> 17:12.420
他就会自动帮你

17:12.420 --> 17:14.420
生成一个内组件的格式

17:14.420 --> 17:15.420
然后这里人员

17:15.420 --> 17:16.420
我们就写上

17:16.420 --> 17:18.420
这里不要用DIV的

17:18.420 --> 17:19.420
用UL

17:20.420 --> 17:22.420
那么这个内组件里面

17:22.420 --> 17:24.420
肯定要给我传一个学生宿主

17:24.420 --> 17:25.420
这个毫无疑问

17:25.420 --> 17:27.420
肯定要给我传一个学生宿主

17:27.420 --> 17:28.420
进来

17:28.420 --> 17:29.420
那么比方说约定

17:29.420 --> 17:30.420
这里要约定

17:30.420 --> 17:31.420
约定

17:31.420 --> 17:32.420
就是说

17:32.420 --> 17:33.420
probs里边

17:33.420 --> 17:34.420
第二

17:35.420 --> 17:36.420
student

17:36.420 --> 17:37.420
student

17:38.420 --> 17:40.420
传递的是

17:40.420 --> 17:42.420
学生的宿主

17:42.420 --> 17:44.420
肯定是学生的宿主

17:44.420 --> 17:46.420
那么我们要把宿主渲染到这

17:46.420 --> 17:47.420
怎么渲染呢

17:48.420 --> 17:50.420
每一个学生是不是要用这个组件

17:50.420 --> 17:51.420
对吧

17:51.420 --> 17:53.420
一个学生是不是要用这个组件

17:53.420 --> 17:54.420
显示对吧

17:54.420 --> 17:55.420
那么我们这个组件已经写好了

17:55.420 --> 17:56.420
已经测试好了

17:56.420 --> 17:58.420
大家做开发的时候要注意

17:58.420 --> 18:00.420
就是一个组件你已经写好了

18:00.420 --> 18:01.420
已经测试好了

18:01.420 --> 18:03.420
你就不要管他了

18:03.420 --> 18:04.420
就不要管他怎么实现的了

18:04.420 --> 18:06.420
你把它拿来用就行了

18:06.420 --> 18:07.420
就相当于是什么

18:07.420 --> 18:09.420
我们写好了一个函数

18:09.420 --> 18:12.420
写好了一个内测试也通过了

18:12.420 --> 18:13.420
没有任何问题的

18:13.420 --> 18:16.420
以后就不要去想着他里边怎么实现的了

18:16.420 --> 18:18.420
你就直接拿来用就行了

18:18.420 --> 18:21.420
那么这里我们就用之前的学生组件

18:21.420 --> 18:22.420
import

18:22.420 --> 18:23.420
student

18:23.420 --> 18:24.420
from

18:24.420 --> 18:26.420
来自于student

18:26.420 --> 18:27.420
把个组件导入进来

18:27.420 --> 18:29.420
那这边是不是要得到一个

18:29.420 --> 18:31.420
组件的宿主

18:31.420 --> 18:32.420
对吧

18:32.420 --> 18:33.420
得到一个组件的宿主

18:33.420 --> 18:35.420
那怎么得到宿主呢

18:35.420 --> 18:36.420
你看一下

18:36.420 --> 18:39.420
咱们这里是不是有个宿主

18:39.420 --> 18:40.420
这里是不是个学生宿主

18:40.420 --> 18:41.420
这是约定好的

18:41.420 --> 18:42.420
你要到时候

18:42.420 --> 18:44.420
要给我传一个学生宿主进来

18:44.420 --> 18:45.420
好

18:45.420 --> 18:47.420
你传了一个学生宿主进来之后呢

18:47.420 --> 18:48.420
这是个宿主

18:48.420 --> 18:50.420
那么宿主里边是不是个map寒宿

18:50.420 --> 18:51.420
对吧

18:51.420 --> 18:53.420
每一个是不是个学生

18:53.420 --> 18:54.420
对不对

18:54.420 --> 18:56.420
每一个就是个学生

18:56.420 --> 18:58.420
每一个学生他要反悔一个什么

18:58.420 --> 19:00.420
一个学生是不是对应一个组件

19:00.420 --> 19:01.420
对吧

19:01.420 --> 19:02.420
对应一个组件

19:02.420 --> 19:03.420
所以一个学生应该对应啥呢

19:03.420 --> 19:05.420
是不是一个student

19:05.420 --> 19:07.420
对不对

19:07.420 --> 19:09.420
每个学生是不是对应一个组件

19:09.420 --> 19:10.420
对不对

19:10.420 --> 19:11.420
一个学生对象

19:11.420 --> 19:12.420
你看这是个学生宿主吗

19:12.420 --> 19:13.420
那么map的时候呢

19:13.420 --> 19:14.420
每一个item呢

19:14.420 --> 19:15.420
就是个学生对象

19:15.420 --> 19:17.420
一个学生对象是不是要对应一个组件

19:17.420 --> 19:18.420
对不对

19:18.420 --> 19:19.420
好

19:19.420 --> 19:20.420
这个组件里边他是不是要传

19:20.420 --> 19:21.420
传数据

19:21.420 --> 19:22.420
传什么数据

19:22.420 --> 19:24.420
是不是学生对象里边的所有东西

19:24.420 --> 19:26.420
那这里我们是不是可以用这种方式

19:26.420 --> 19:27.420
点点item

19:27.420 --> 19:28.420
对吧

19:28.420 --> 19:30.420
把这个数据是不是扔过去

19:30.420 --> 19:31.420
对不对

19:31.420 --> 19:32.420
把这些数据全部扔过去

19:32.420 --> 19:33.420
于是呢

19:33.420 --> 19:34.420
这个map寒宿会返回啥呢

19:34.420 --> 19:36.420
当然要用this的purpose

19:36.420 --> 19:38.420
因为我们这里的内组件里边

19:38.420 --> 19:39.420
好

19:39.420 --> 19:40.420
我们这里会返回啥呢

19:40.420 --> 19:42.420
是不是返回一个

19:42.420 --> 19:45.420
返回一个student的宿主

19:45.420 --> 19:46.420
对不对

19:46.420 --> 19:48.420
返回一个student的宿主

19:48.420 --> 19:50.420
就是组件宿主

19:50.420 --> 19:51.420
过去

19:51.420 --> 19:53.420
组件宿主

19:53.420 --> 19:54.420
过去组件宿主

19:54.420 --> 19:55.420
然后我们要做的事情就是把个

19:55.420 --> 19:56.420
组件宿主扔这

19:56.420 --> 19:58.420
是不是就完事了

19:58.420 --> 19:59.420
对不对

19:59.420 --> 20:00.420
就完事了

20:00.420 --> 20:01.420
就这么简单

20:01.420 --> 20:02.420
就这么简单

20:02.420 --> 20:03.420
好

20:03.420 --> 20:05.420
然后我们到这边来

20:05.420 --> 20:06.420
看一下怎么用

20:06.420 --> 20:08.420
这个就去了

20:08.420 --> 20:09.420
好

20:09.420 --> 20:11.420
我们这里呢

20:11.420 --> 20:12.420
不是

20:12.420 --> 20:13.420
我们先把这个导入进来

20:13.420 --> 20:15.420
导入进来再说

20:15.420 --> 20:17.420
不是我们刚才已经得到了

20:17.420 --> 20:18.420
通过API请求

20:18.420 --> 20:19.420
得到了学生的宿主吗

20:19.420 --> 20:20.420
对吧

20:20.420 --> 20:21.420
这不是学生宿主吗

20:21.420 --> 20:24.420
那么现在不就是使用这个组件

20:24.420 --> 20:25.420
把这个宿主扔进去

20:25.420 --> 20:26.420
所以完事了

20:26.420 --> 20:28.420
然后再把它渲染出来

20:28.420 --> 20:29.420
对不对

20:29.420 --> 20:30.420
再把它渲染出来

20:30.420 --> 20:31.420
好

20:31.420 --> 20:32.420
然后我们这里返回

20:32.420 --> 20:33.420
这个函数

20:33.420 --> 20:35.420
它只是获取数据的

20:35.420 --> 20:36.420
所以说我们一个函数

20:36.420 --> 20:37.420
做一件事

20:37.420 --> 20:38.420
返回

20:38.420 --> 20:39.420
返回过后

20:39.420 --> 20:41.420
我们这里再写一个函数

20:41.420 --> 20:43.420
再写一个函数

20:43.420 --> 20:44.420
这个函数做什么呢

20:44.420 --> 20:45.420
Render

20:45.420 --> 20:47.420
就是渲染

20:47.420 --> 20:48.420
渲染函数

20:48.420 --> 20:49.420
这个函数干嘛呢

20:49.420 --> 20:51.420
先来获取

20:51.420 --> 20:53.420
所有的学生数据

20:53.420 --> 20:55.420
这里我又应该用Const

20:55.420 --> 20:57.420
这里应该用Const

20:57.420 --> 20:58.420
这个东西

20:58.420 --> 21:01.420
真的快搞得我神经衰弱了

21:01.420 --> 21:02.420
讲公开直播课

21:02.420 --> 21:04.420
我又不能用Const

21:04.420 --> 21:05.420
又不能用Net

21:05.420 --> 21:07.420
同学没有学习到S6

21:07.420 --> 21:09.420
所以说我都得用Var

21:09.420 --> 21:10.420
讲这个Const

21:10.420 --> 21:13.420
我又得无缝切换到NetConst

21:13.420 --> 21:15.420
真的搞得快神经衰弱了

21:15.420 --> 21:17.420
有的时候大家量解一下

21:17.420 --> 21:19.420
有的时候我写的时候

21:19.420 --> 21:20.420
习惯了

21:20.420 --> 21:22.420
可能会写一些之前的代码

21:22.420 --> 21:23.420
量解一下

21:23.420 --> 21:24.420
好

21:24.420 --> 21:25.420
那么这里我们首先获得

21:25.420 --> 21:27.420
通过调用这个函数

21:27.420 --> 21:30.420
来获得所有的学生数据

21:30.420 --> 21:32.420
获取学生数据

21:32.420 --> 21:33.420
学生数据

21:33.420 --> 21:34.420
那么现在我们干嘛呢

21:34.420 --> 21:35.420
是不是就Render了

21:35.420 --> 21:36.420
对不对

21:36.420 --> 21:37.420
把Render放进来

21:37.420 --> 21:38.420
Render什么呢

21:38.420 --> 21:40.420
是不是student list

21:40.420 --> 21:42.420
给他传一个啥

21:42.420 --> 21:43.420
是不是之前约定好的

21:43.420 --> 21:44.420
说好了

21:44.420 --> 21:45.420
你要给我这么一个东西

21:45.420 --> 21:46.420
你得给我

21:46.420 --> 21:47.420
对吧

21:47.420 --> 21:48.420
这个属性

21:48.420 --> 21:49.420
你得把这个属性给我

21:49.420 --> 21:50.420
给我啥

21:50.420 --> 21:51.420
是不是一个数据

21:51.420 --> 21:52.420
学生的数据

21:52.420 --> 21:53.420
对吧

21:53.420 --> 21:54.420
student

21:56.420 --> 21:58.420
是不是你要把这个东西给我

21:58.420 --> 21:59.420
对不对

21:59.420 --> 22:01.420
要把它给我

22:01.420 --> 22:02.420
好了还有啥

22:02.420 --> 22:03.420
就没了

22:03.420 --> 22:04.420
那么剩下的事情

22:04.420 --> 22:05.420
是不是交给他了

22:05.420 --> 22:06.420
对吧

22:06.420 --> 22:07.420
你不要去想他里边

22:07.420 --> 22:08.420
是怎么实现的

22:08.420 --> 22:09.420
你只要写好了

22:09.420 --> 22:10.420
测试没问题了

22:10.420 --> 22:11.420
OK你就把它用就行了

22:11.420 --> 22:13.420
这个主键用来做什么呢

22:13.420 --> 22:14.420
用来显示一个学生列表

22:14.420 --> 22:16.420
他需要一个数据

22:16.420 --> 22:17.420
那么我把数据给他

22:17.420 --> 22:18.420
他就能剩下的事情

22:18.420 --> 22:20.420
交给他来进行显示

22:20.420 --> 22:21.420
你看我们整个结构

22:21.420 --> 22:23.420
是不是变得非常清晰了

22:23.420 --> 22:24.420
这里提供数据

22:24.420 --> 22:25.420
那么他们两个

22:25.420 --> 22:26.420
负责来

22:26.420 --> 22:28.420
根据数据来再做显示

22:28.420 --> 22:29.420
最后我们调用Render

22:29.420 --> 22:30.420
Render函数

22:30.420 --> 22:31.420
调用一下

22:31.420 --> 22:32.420
保存

22:32.420 --> 22:33.420
咱们来看一下

22:35.420 --> 22:36.420
稍等

22:36.420 --> 22:37.420
你看一下

22:37.420 --> 22:38.420
是就出来了

22:38.420 --> 22:40.420
咱们的所有学生就出来了

22:40.420 --> 22:41.420
出来了

22:42.420 --> 22:44.420
好这里边还包了一个错误

22:44.420 --> 22:47.420
这个错误也是我们之前说过的错误

22:47.420 --> 22:52.420
就是如果你的一个react元素数组

22:52.420 --> 22:54.420
如果你有一个react元素数组

22:54.420 --> 22:56.420
这个玩意是不是主键数组

22:56.420 --> 22:57.420
元素的数组

22:57.420 --> 22:59.420
如果你有这么一个数组的话

22:59.420 --> 23:03.420
那么你需要给数组的里边的每一个元素

23:03.420 --> 23:05.420
加上这么一个key属性

23:06.420 --> 23:08.420
来防止

23:08.420 --> 23:09.420
你不说防止

23:09.420 --> 23:12.420
来提高他的渲染效率

23:12.420 --> 23:13.420
来提高他的渲染效率

23:13.420 --> 23:15.420
我们后边会详细的解释

23:15.420 --> 23:17.420
他为什么可以提高渲染效率

23:17.420 --> 23:18.420
那么现在你别管

23:18.420 --> 23:19.420
一个加上就完成了

23:19.420 --> 23:20.420
这个key属性

23:20.420 --> 23:23.420
一般来说就是要唯一的

23:23.420 --> 23:24.420
一般来存什么

23:24.420 --> 23:26.420
存id

23:26.420 --> 23:27.420
唯一的id

23:27.420 --> 23:28.420
id是什么

23:28.420 --> 23:29.420
item.id

23:29.420 --> 23:30.420
对吧

23:30.420 --> 23:31.420
我们这个数据里面

23:31.420 --> 23:34.420
不是就是一个

23:34.420 --> 23:35.420
说些

23:35.420 --> 23:36.420
看一下这边

23:36.420 --> 23:38.420
这边的话就是一个id

23:38.420 --> 23:40.420
就把id给他就完成了

23:40.420 --> 23:42.420
那么咱们把id给他

23:42.420 --> 23:43.420
注意他的key子

23:43.420 --> 23:44.420
保存一下

23:44.420 --> 23:45.420
看一下

23:45.420 --> 23:46.420
这边

23:46.420 --> 23:47.420
你看一下是不是渲染出来了

23:47.420 --> 23:48.420
对吧

23:48.420 --> 23:50.420
就渲染出来了

23:50.420 --> 23:51.420
没问题吧

23:51.420 --> 23:52.420
OK

23:52.420 --> 23:54.420
那咱们这一块就没问题了

23:54.420 --> 23:56.420
对吧

23:56.420 --> 23:59.420
这是这一块

23:59.420 --> 24:00.420
好

24:00.420 --> 24:02.420
那么如果

24:02.420 --> 24:03.420
如果还有这么一个需求

24:03.420 --> 24:05.420
因为我们这里是远程请求

24:05.420 --> 24:06.420
对吧

24:06.420 --> 24:07.420
远程请求

24:07.420 --> 24:08.420
远程请求的时候

24:08.420 --> 24:10.420
是不是会经过一段时间

24:10.420 --> 24:11.420
对吧

24:11.420 --> 24:13.420
他会经过这么一段时间

24:13.420 --> 24:14.420
才能得到东西

24:14.420 --> 24:15.420
那么这个时候

24:15.420 --> 24:16.420
比方说

24:16.420 --> 24:18.420
咱们在一开始请求的过程中

24:18.420 --> 24:19.420
你看得不到东西

24:19.420 --> 24:20.420
我们希望

24:20.420 --> 24:22.420
在一开始没有得到数据之前

24:22.420 --> 24:24.420
就得到数据之前

24:24.420 --> 24:25.420
咱们

24:25.420 --> 24:28.420
给他显示一个正在加载中

24:28.420 --> 24:29.420
可不可以呢

24:29.420 --> 24:30.420
当然可以

24:30.420 --> 24:32.420
他有什么问题呢

24:32.420 --> 24:33.420
那你这样呗

24:33.420 --> 24:34.420
你这里呢

24:34.420 --> 24:36.420
就先给他

24:36.420 --> 24:38.420
在渲染之前

24:38.420 --> 24:40.420
先给他渲染一个这个东西

24:40.420 --> 24:41.420
渲染一个制服串

24:41.420 --> 24:44.420
正在加载中

24:44.420 --> 24:46.420
渲染这么一个东西

24:46.420 --> 24:48.420
然后我们再去获取学生数据

24:48.420 --> 24:50.420
等拿到了学生数据之后

24:50.420 --> 24:52.420
我们再重新渲染

24:52.420 --> 24:53.420
渲染这个学生

24:53.420 --> 24:54.420
数据完了

24:54.420 --> 24:56.420
保存看一下吧

24:56.420 --> 24:57.420
你看一下

24:57.420 --> 24:58.420
一开始是吧

24:58.420 --> 24:59.420
正在加载中

24:59.420 --> 25:01.420
然后得到结构过河重新宣的

25:01.420 --> 25:02.420
对吧

25:02.420 --> 25:03.420
也非常非常轻松

25:03.420 --> 25:04.420
通过这个例子

25:04.420 --> 25:05.420
大家也可以体会到

25:05.420 --> 25:06.420
react

25:06.420 --> 25:07.420
他的核心思想

25:07.420 --> 25:08.420
跟5u是差不多的

25:08.420 --> 25:09.420
他就是用组件

25:09.420 --> 25:11.420
来进行各种各样的封装

25:11.420 --> 25:12.420
组件你给他提供数据

25:12.420 --> 25:13.420
他只是用

25:13.420 --> 25:14.420
你给我数据

25:14.420 --> 25:15.420
我怎么去显示

25:15.420 --> 25:17.420
只搞定这件事

25:17.420 --> 25:18.420
那么剩下的事情

25:18.420 --> 25:20.420
就是让提供数据的人去处理的

25:20.420 --> 25:21.420
我组件

25:21.420 --> 25:22.420
每个组件

25:22.420 --> 25:23.420
他就关心自己

25:23.420 --> 25:24.420
就行了

25:24.420 --> 25:25.420
比方说这个students

25:25.420 --> 25:26.420
他并不知道

25:26.420 --> 25:27.420
这个组件

25:27.420 --> 25:28.420
他并不知道

25:28.420 --> 25:30.420
将来会被这个东西来调用

25:30.420 --> 25:31.420
这个东西来使用这个组件

25:31.420 --> 25:32.420
并不知道

25:32.420 --> 25:33.420
他就把自己的事情做完

25:33.420 --> 25:34.420
就行了

25:34.420 --> 25:35.420
跟你没关系的

25:35.420 --> 25:36.420
你不要管

25:36.420 --> 25:37.420
那么这个students list

25:37.420 --> 25:38.420
他也不知道

25:38.420 --> 25:39.420
这个数据是哪来的

25:39.420 --> 25:40.420
有可能是魔力的数据

25:40.420 --> 25:41.420
有可能是真实的

25:41.420 --> 25:42.420
API请求的数据

25:42.420 --> 25:43.420
不管

25:43.420 --> 25:44.420
你总要总之

25:44.420 --> 25:45.420
你把数据给我

25:45.420 --> 25:46.420
我就可以显示

25:46.420 --> 25:47.420
就可以显示

25:47.420 --> 25:48.420
这个意思吧

25:49.420 --> 25:51.420
然后他跟5u的

25:51.420 --> 25:52.420
很大的一个

25:52.420 --> 25:53.420
以上的区别

25:53.420 --> 25:54.420
就是什么

25:54.420 --> 25:55.420
你通过rex

25:55.420 --> 25:56.420
可以感知到

25:56.420 --> 25:57.420
这个rex

25:57.420 --> 25:58.420
它非常的灵活

25:58.420 --> 25:59.420
因为发现

25:59.420 --> 26:00.420
它这些东西

26:00.420 --> 26:01.420
看全是可以拆分的

26:01.420 --> 26:02.420
你看没有

26:02.420 --> 26:03.420
这些东西全是对象

26:03.420 --> 26:05.420
就像在什么mip里面

26:05.420 --> 26:06.420
使用这个玩意

26:06.420 --> 26:07.420
因为为什么呢

26:07.420 --> 26:08.420
它就是个对象

26:08.420 --> 26:10.420
它是可以非常非常灵活的

26:10.420 --> 26:11.420
进行拆分

26:11.420 --> 26:12.420
而在5u里面

26:12.420 --> 26:13.420
是

26:13.420 --> 26:14.420
这一点是比较麻烦的

26:14.420 --> 26:15.420
因为它

26:15.420 --> 26:17.420
它是写到atema里面的

26:17.420 --> 26:18.420
对吧

26:18.420 --> 26:20.420
atema他们肯定没有介是灵活度高

26:20.420 --> 26:21.420
所以说

26:21.420 --> 26:22.420
你要在5u里面

26:22.420 --> 26:24.420
做一种各种各样的花样出来

26:24.420 --> 26:26.420
用各种函数来去生成

26:26.420 --> 26:28.420
各种模板的话

26:28.420 --> 26:29.420
会遇到一些困难

26:29.420 --> 26:30.420
不是说不可以

26:30.420 --> 26:32.420
是会遇到一些困难

26:33.420 --> 26:34.420
当然

26:34.420 --> 26:35.420
同样的另一方面

26:35.420 --> 26:37.420
就是rex的上手难度

26:37.420 --> 26:38.420
你会觉得

26:38.420 --> 26:39.420
要比5u要高一点

26:39.420 --> 26:40.420
5u的上手难度

26:40.420 --> 26:42.420
确实是非常低的

26:42.420 --> 26:43.420
因为大家都会

26:43.420 --> 26:44.420
atema直接写就行了

26:45.420 --> 26:46.420
这是这一块

26:46.420 --> 26:48.420
来渲染一个学生数据

26:48.420 --> 26:49.420
好

26:49.420 --> 26:50.420
大家下来吧

26:50.420 --> 26:51.420
证明一下

26:51.420 --> 26:52.420
完成一下这个东西

26:52.420 --> 26:53.420
通过这个例子

26:53.420 --> 26:54.420
你可以体会到

26:54.420 --> 26:56.420
这个逐渐去怎么去使用

26:56.420 --> 26:57.420
好吧

26:57.420 --> 26:59.420
这是这么一个小对谋

