WEBVTT

00:00.690 --> 00:04.690
好 来 这节课咱们开始来分析那个迪瓦的原码

00:04.690 --> 00:06.690
比如说我们自己手写一个迪瓦

00:06.690 --> 00:09.690
首先我们看一下它的官方网站

00:09.690 --> 00:17.690
迪瓦它是一个集成了很多很多技术的这么一个库

00:17.690 --> 00:20.690
那这个库里边它有很多的输出文件

00:20.690 --> 00:22.690
其中有一个迪瓦的输出文件

00:22.690 --> 00:24.690
那这就是导出了一个迪瓦函数 对吧

00:24.690 --> 00:26.690
那个迪瓦函数呢 返回一个对象

00:26.690 --> 00:29.690
那个对象呢 又做了一些乱七八糟的事情

00:29.690 --> 00:33.690
咱们这里是认识一个文件夹 迪瓦

00:33.690 --> 00:36.690
这里边写上一个index.js

00:36.690 --> 00:38.690
那么这里边导出什么呢

00:38.690 --> 00:40.690
导出的就是一个迪瓦函数

00:40.690 --> 00:43.690
export 它是默认导出方形

00:43.690 --> 00:46.690
就是迪瓦函数 我这都不用写名字了

00:46.690 --> 00:47.690
默认导出吗

00:47.690 --> 00:50.690
那么这里边可能要传一些配置

00:50.690 --> 00:52.690
可能要传一些配置进来

00:52.690 --> 00:55.690
当然你没有传的话 我就用一个空对象

00:55.690 --> 00:57.690
这里是一个配置

00:57.690 --> 00:59.690
那么这里的导出的是一个什么

00:59.690 --> 01:01.690
导出的是不是一个对象 对吧

01:01.690 --> 01:02.690
导出的是一个对象

01:02.690 --> 01:04.690
这个对象里边有哪些东西呢

01:04.690 --> 01:07.690
我们先不写 不着急写吧

01:07.690 --> 01:09.690
我先打个注释

01:09.690 --> 01:12.690
这是配置

01:12.690 --> 01:15.690
然后这里是

01:15.690 --> 01:19.690
创建迪瓦对象的函数

01:19.690 --> 01:21.690
这是它默认导出

01:21.690 --> 01:24.690
就是它的默认文件里边

01:24.690 --> 01:26.690
然后它还有这么一些文件 对吧

01:26.690 --> 01:28.690
这么一些文件它导出这么一些东西

01:28.690 --> 01:29.690
就是其他的东西

01:29.690 --> 01:32.690
我们的其他的配置的Dynamic都不用管

01:32.690 --> 01:33.690
都不用管

01:33.690 --> 01:35.690
我们只管这个

01:35.690 --> 01:37.690
Rotor和Saka

01:37.690 --> 01:39.690
只看这两个

01:39.690 --> 01:41.690
这两个的话它怎么来导出的呢

01:41.690 --> 01:42.690
它这样子

01:42.690 --> 01:44.690
我们这里的新建个文件

01:44.690 --> 01:46.690
一个是Rotor

01:46.690 --> 01:48.690
Rotor

01:48.690 --> 01:50.690
Rotor 点解释

01:50.690 --> 01:52.690
这里边它怎么导出的呢

01:52.690 --> 01:54.690
它导出的是一个路由

01:54.690 --> 01:56.690
那么这个路由的话

01:56.690 --> 01:57.690
它干嘛呢

01:57.690 --> 01:58.690
这个路由的话

01:58.690 --> 02:01.690
它是导出的是

02:01.690 --> 02:03.690
Rotor东里边的东西

02:03.690 --> 02:05.690
所以说你直接导出就完事了

02:05.690 --> 02:08.690
直接把Rotor东里边的东西

02:08.690 --> 02:10.690
直接导出就完事了

02:10.690 --> 02:13.690
export from

02:13.690 --> 02:15.690
Rotor东

02:15.690 --> 02:17.690
就完了

02:17.690 --> 02:18.690
你看一下

02:18.690 --> 02:20.690
这里边相当于给你封装了一下

02:20.690 --> 02:21.690
这个文件

02:21.690 --> 02:23.690
你就把Rotor东

02:23.690 --> 02:25.690
全部导出就完事了

02:25.690 --> 02:27.690
咱们试一下吧

02:27.690 --> 02:29.690
我这里就先不着急

02:29.690 --> 02:31.690
这样子写吧

02:31.690 --> 02:33.690
把这个英这个手里全部清空

02:33.690 --> 02:35.690
然后我们这里

02:35.690 --> 02:37.690
import

02:39.690 --> 02:41.690
import from

02:41.690 --> 02:43.690
这回用新号嘛

02:43.690 --> 02:44.690
新号

02:44.690 --> 02:49.690
Rotor东

02:49.690 --> 02:51.690
from

02:52.690 --> 02:55.690
就我们自己写的Rotor

02:55.690 --> 02:57.690
我们这里输出一下

02:57.690 --> 03:02.690
Rotor东

03:02.690 --> 03:03.690
输出一下

03:03.690 --> 03:04.690
看一下有没有

03:04.690 --> 03:05.690
行不行

03:09.690 --> 03:11.690
运出来

03:11.690 --> 03:21.530
看一下行不行

03:21.530 --> 03:22.530
是吧

03:36.130 --> 03:38.130
你看

03:38.130 --> 03:40.130
就是把Rotor东导出了

03:40.130 --> 03:41.130
对不对

03:41.130 --> 03:43.130
还有包括WazeRotor

03:43.130 --> 03:45.130
这些东西全部是在这里边

03:45.130 --> 03:46.130
这就是这一块

03:46.130 --> 03:48.130
但是你不要忘记了

03:48.130 --> 03:50.130
Rotor就是

03:50.130 --> 03:52.130
Rotor东里边的

03:52.130 --> 03:53.130
它有一些东西

03:53.130 --> 03:54.130
还有一个库

03:54.130 --> 03:55.130
不要忘了

03:55.130 --> 03:56.130
还有个库就是

03:56.130 --> 03:58.130
connected

03:58.130 --> 03:59.130
Rotor对吧

03:59.130 --> 04:01.130
那么当时那个库

04:01.130 --> 04:03.130
是不是我们当时写怎么写的

04:03.130 --> 04:04.130
回忆一下

04:04.130 --> 04:06.130
我刚才都不敢再删

04:06.130 --> 04:09.130
应该重新复制一个文件

04:09.130 --> 04:11.130
等一下

04:11.130 --> 04:13.130
我们看一下之前的代码

04:17.140 --> 04:18.140
复制一个

04:18.140 --> 04:19.140
复制一个

04:19.140 --> 04:23.800
这里我们再还原

04:23.800 --> 04:25.800
然后看一下我们之前的代码

04:25.800 --> 04:27.800
之前的代码在哪呢

04:27.800 --> 04:28.800
在这

04:28.800 --> 04:29.800
在这里边

04:29.800 --> 04:30.800
是不是有个connected Rotor

04:30.800 --> 04:32.800
就是它导出了这么一个东西

04:32.800 --> 04:34.800
Rotor Reducts对吧

04:34.800 --> 04:36.800
它导出了这么一个Rotor Reducts

04:36.800 --> 04:38.800
Rotor Reducts是什么呢

04:38.800 --> 04:39.800
是来自于

04:39.800 --> 04:40.800
就这个里边的东西

04:40.800 --> 04:42.800
就来自于connected React Rotor

04:42.800 --> 04:44.800
所以说我们这里还要导出

04:44.800 --> 04:46.800
还要导出一个东西

04:46.800 --> 04:48.800
Export

04:48.800 --> 04:50.800
还要导出一个就是

04:50.800 --> 04:52.800
React

04:52.800 --> 04:53.800
看一下

04:53.800 --> 04:54.800
这是啥呢

04:54.800 --> 04:56.800
Rotor Reducts

04:56.800 --> 04:58.800
还要导出这么一个东西

04:58.800 --> 04:59.800
Rotor Reducts

04:59.800 --> 05:01.800
Front哪个库呢

05:01.800 --> 05:02.800
从那个库导出

05:02.800 --> 05:04.800
connected

05:06.800 --> 05:08.800
react

05:08.800 --> 05:10.800
Rotor

05:10.800 --> 05:15.200
再扩起来

05:15.200 --> 05:17.200
看一下

05:17.200 --> 05:19.200
这里

05:19.200 --> 05:21.200
我现在有点忘了

05:21.200 --> 05:23.200
这个导出就是

05:23.200 --> 05:24.200
给它重新命名导出

05:24.200 --> 05:25.200
我们这样吧

05:25.200 --> 05:26.200
我们这样

05:26.200 --> 05:27.200
先把导入进来

05:27.200 --> 05:29.200
就是react

05:29.200 --> 05:31.200
Rotor

05:31.200 --> 05:33.200
Rotor Reducts

05:33.200 --> 05:35.200
先把这个东西导入进来

05:35.200 --> 05:37.200
然后呢

05:37.200 --> 05:39.200
我们在这里再导出

05:39.200 --> 05:41.200
Export

05:41.200 --> 05:43.200
Rotor Reducts

05:43.200 --> 05:45.200
再把这个东西导出

05:45.200 --> 05:47.200
这里导出什么库

05:51.200 --> 05:54.640
您迫准备放到最上面

05:54.640 --> 05:56.640
就行了

05:56.640 --> 05:58.640
那咱们再看一下那边导入的东西

05:58.640 --> 06:00.640
这边导入的东西

06:00.640 --> 06:02.640
这边

06:02.640 --> 06:04.640
这边

06:04.640 --> 06:06.640
那么它把这个

06:06.640 --> 06:07.640
Rotor里面全部导入

06:07.640 --> 06:09.640
导入过后呢

06:09.640 --> 06:11.640
我们来看一下

06:11.640 --> 06:13.640
这什么

06:13.640 --> 06:15.640
它说找不到

06:15.640 --> 06:17.640
找不到这个库

06:17.640 --> 06:19.640
我的天啊

06:19.640 --> 06:21.640
因为它用的还是远的那个库

06:21.640 --> 06:23.640
用的还是react

06:23.640 --> 06:25.640
Rotor

06:25.640 --> 06:27.640
越大个是react

06:27.640 --> 06:29.640
Rotor那个库

06:29.640 --> 06:31.640
那我们安装一下新的库

06:31.640 --> 06:33.640
安装一下新的库

06:33.640 --> 06:35.640
要

06:35.640 --> 06:37.640
我们肯定用最新的

06:37.640 --> 06:39.640
Rotor

06:39.640 --> 06:43.720
肯定用最新的

06:43.720 --> 06:47.800
它

06:47.800 --> 06:49.800
History这个库呢

06:49.800 --> 06:51.800
它也不是最新的

06:51.800 --> 06:53.800
History这个库

06:53.800 --> 06:55.800
我们

06:55.800 --> 06:57.800
要不然把这些库全部重新安装一遍

06:57.800 --> 06:59.800
重新安装一遍得了

06:59.800 --> 07:01.800
重新安装一遍

07:01.800 --> 07:03.800
重新安装一遍

07:03.800 --> 07:05.800
Rotor

07:05.800 --> 07:07.800
Rotor

07:07.800 --> 07:09.800
Rotor安装了

07:09.800 --> 07:11.800
Rotor

07:11.800 --> 07:13.800
Saga

07:13.800 --> 07:15.800
安装一下

07:15.800 --> 07:17.800
安装History

07:17.800 --> 07:21.110
没有加add

07:21.110 --> 07:25.510
没有加add

07:25.510 --> 07:30.810
安装一下

07:30.810 --> 07:32.810
好

07:32.810 --> 07:34.810
于是呢反正这里肯定是写好了

07:34.810 --> 07:36.810
这里就是这个文件就特别特别简单

07:36.810 --> 07:38.810
它就是导出一个

07:38.810 --> 07:40.810
把Rotor东西全部导出

07:40.810 --> 07:42.810
然后把这个Rotor

07:42.810 --> 07:44.810
Rotor里边的东西呢

07:44.810 --> 07:46.810
放到一个对象里边

07:46.810 --> 07:48.810
放到一个封装到一个编辆里边

07:48.810 --> 07:50.810
Rotor Redox

07:50.810 --> 07:52.810
然后再把这个编辆导出

07:52.810 --> 07:54.810
就形成了我们之前的那种结构了

07:54.810 --> 07:56.810
我们既可以在这边导入

07:56.810 --> 07:58.810
Rex Rotor东里边的所有东西

07:58.810 --> 08:00.810
又可以通过这个

08:00.810 --> 08:02.810
这个封装的对象里边的一个属性

08:02.810 --> 08:04.810
就这个属性

08:04.810 --> 08:06.810
来得到这个Connected Rx Rotor

08:06.810 --> 08:08.810
就可以全部拿到了

08:08.810 --> 08:10.810
好

08:10.810 --> 08:12.810
开始

08:12.810 --> 08:18.620
我们这一课呢

08:18.620 --> 08:20.620
就是要写出跟那个dbar一模一样的功能出来

08:20.620 --> 08:22.620
觉得你会发现了

08:22.620 --> 08:24.620
它也没有那么难

08:24.620 --> 08:26.620
可能有些地方呢稍微有点绕

08:26.620 --> 08:36.490
但是没有那么难

08:36.490 --> 08:38.490
稍等一下

08:38.490 --> 08:40.490
一共让我喜欢端口

08:40.490 --> 08:54.070
干嘛让我喜欢端口呢

08:54.070 --> 08:56.070
看一下啊

08:56.070 --> 08:58.070
诶 这里爆错了

08:58.070 --> 09:00.070
它说找不到Rotor Redox

09:00.070 --> 09:02.070
还找不到Rotor Redox

09:02.070 --> 09:04.070
因为这个口它依赖这个东西

09:04.070 --> 09:06.070
所以说还要安装一个react

09:06.070 --> 09:09.640
Redox

09:09.640 --> 09:22.680
安装一个这个

09:22.680 --> 09:24.680
这里我们把它安装的时候

09:24.680 --> 09:26.680
我们把这个结构再稍微做一下改动

09:26.680 --> 09:28.680
这个index里边呢

09:28.680 --> 09:30.680
我们是

09:30.680 --> 09:32.680
导出的是一个默正函数对吧

09:32.680 --> 09:34.680
就是创建那个dbar的函数

09:34.680 --> 09:36.680
那我们其实可以看到啊

09:36.680 --> 09:38.680
在前边呢dbar里边

09:38.680 --> 09:40.680
它可能就是这个index里边呢

09:40.680 --> 09:42.680
它默正导出里边呢

09:42.680 --> 09:44.680
就是react为dars里边的一些东西

09:44.680 --> 09:46.680
所以说呢我们这里呢

09:46.680 --> 09:48.680
还是按照以前的做法

09:48.680 --> 09:50.680
我们这里写这么一个dbar 第二季也是文件

09:50.680 --> 09:52.680
然后在index里边呢

09:52.680 --> 09:54.680
先默认导出dbar 第二季也是文件

09:54.680 --> 09:56.680
啊 我们这里

09:56.680 --> 09:58.680
这里一个sport

09:58.680 --> 10:00.680
dfort

10:00.680 --> 10:02.680
就是把我们刚才的函数写到这儿来

10:02.680 --> 10:04.680
我刚从这个函数

10:04.680 --> 10:06.680
写到这儿来

10:06.680 --> 10:08.680
然后呢在index里边

10:08.680 --> 10:10.680
index文件呢一般还不做任何事情

10:10.680 --> 10:12.680
它导出就是

10:12.680 --> 10:14.680
暴露给外面的东西

10:14.680 --> 10:16.680
然后我们导出什么呢

10:16.680 --> 10:18.680
导出这个default

10:18.680 --> 10:20.680
啊

10:20.680 --> 10:22.680
default

10:22.680 --> 10:24.680
我们只负责这件事情

10:24.680 --> 10:26.680
好吧

10:26.680 --> 10:28.680
我们先把写成这种结构

10:28.680 --> 10:30.680
好 接下来我们再运行

10:30.680 --> 10:40.010
start

10:40.010 --> 10:42.010
不着急啊 慢慢来

10:42.010 --> 10:44.010
这个我们一会写

10:44.010 --> 10:46.010
我们先把这个导出搞进

10:46.010 --> 10:48.010
导出搞进

10:48.010 --> 10:54.260
它又要让我们提示换端口

10:54.260 --> 10:56.260
好 看一下

10:56.260 --> 11:04.500
好 出来了啊

11:04.500 --> 11:06.500
那我们看一下我们的对象

11:06.500 --> 11:08.500
你看这些东西是不是就是

11:08.500 --> 11:10.500
rotor动里面的东西啊

11:10.500 --> 11:12.500
对不对

11:12.500 --> 11:14.500
然后呢它包含了一个啥呢

11:14.500 --> 11:16.500
它包含了一个

11:16.500 --> 11:18.500
咦 我们的那个rotor

11:18.500 --> 11:20.500
咱们的rotor

11:20.500 --> 11:22.500
咱们的rotor

11:22.500 --> 11:24.500
老是把这个名字搞混一下

11:24.500 --> 11:26.500
我们叫rotor redux

11:26.500 --> 11:28.500
rotor redux里面是不是

11:28.500 --> 11:30.500
你看一下是不是我们的那个

11:30.500 --> 11:32.500
connectedrotor dome

11:32.500 --> 11:34.500
connectedreduxrotor里面的东西

11:34.500 --> 11:36.500
你看 是不是这些东西

11:36.500 --> 11:38.500
对吧 它里面有个这个connected rotor

11:38.500 --> 11:40.500
对不对 是不是这里面的东西啊

11:40.500 --> 11:42.500
哎 这就是搞定了啊

11:42.500 --> 11:44.500
这边就搞定了

11:44.500 --> 11:46.500
这个文件搞定了

11:46.500 --> 11:48.500
然后呢还有一个导出文件

11:48.500 --> 11:50.500
就是deva 写杠 撒卡

11:50.500 --> 11:52.500
对吧 还有这么一个导出文件

11:52.500 --> 11:54.500
新建个文件

11:54.500 --> 11:56.500
叫做saga

11:56.500 --> 11:58.500
saga这些是

11:58.500 --> 12:00.500
那么这里呢 其实它就负责重新导出

12:00.500 --> 12:02.500
saga里面的effects

12:02.500 --> 12:04.500
它主要是重新负责重新导出

12:04.500 --> 12:06.500
saga里面的effects

12:06.500 --> 12:08.500
好 我们这里disport

12:08.500 --> 12:10.500
又导出新号

12:10.500 --> 12:12.500
from哪呢

12:12.500 --> 12:14.500
from那个就是

12:14.500 --> 12:16.500
saga redux

12:16.500 --> 12:18.500
saga里面的什么

12:18.500 --> 12:20.500
effects

12:20.500 --> 12:22.500
把这里面的东西全部重新导出

12:22.500 --> 12:24.500
主要负责重新导出这个

12:24.500 --> 12:26.500
好 我们再来试一下

12:26.500 --> 12:28.500
在in这个设备

12:28.500 --> 12:30.500
我们再导入 import

12:30.500 --> 12:32.500
这里而是saga

12:32.500 --> 12:34.500
effects

12:34.500 --> 12:36.500
from

12:36.500 --> 12:38.500
叫做写杠 撒卡

12:38.500 --> 12:40.500
dva

12:40.500 --> 12:42.500
看一下我们这里输出

12:42.500 --> 12:44.500
saga而effects

12:44.500 --> 12:46.500
保存

12:46.500 --> 12:48.500
那么后边我们输出的是什么

12:48.500 --> 12:50.500
输出输出的是saga

12:50.500 --> 12:52.500
saga而effects

12:52.500 --> 12:54.500
这里面是不是全是的

12:54.500 --> 12:56.500
就没问题了

12:56.500 --> 12:58.500
那么就把saga这一部分导出了

12:58.500 --> 13:00.500
就没啥了

13:00.500 --> 13:02.500
然后呢 我现在就集中精力

13:02.500 --> 13:04.500
来写这一块

13:04.500 --> 13:06.500
写这一块

13:06.500 --> 13:08.500
这一块我们先不着急管配置

13:08.500 --> 13:10.500
我们假设先没有配置

13:10.500 --> 13:12.500
因为配置加上过程

13:12.500 --> 13:14.500
可能会稍微有点麻烦一点

13:14.500 --> 13:16.500
我们先这里先不着急写配置

13:16.500 --> 13:18.500
我们直接来返回一个对象

13:18.500 --> 13:20.500
因为dva

13:20.500 --> 13:22.500
最终是返回一个对象

13:22.500 --> 13:24.500
dva的好处明也已经见到了

13:24.500 --> 13:26.500
你用过之后你就觉得比之前

13:26.500 --> 13:28.500
要方便太多了

13:28.500 --> 13:30.500
所以说呢 我们这里先返回出

13:30.500 --> 13:32.500
这么一个对象

13:32.500 --> 13:34.500
因为调用dva寒数

13:34.500 --> 13:36.500
我们之前看到 调用dva寒数

13:36.500 --> 13:38.500
如果说你不喘配置

13:38.500 --> 13:40.500
那么得到的就是一个dva对象

13:40.500 --> 13:42.500
dva对象里边可以定义模型

13:42.500 --> 13:44.500
可以启动一个路由

13:44.500 --> 13:46.500
然后可以start运行

13:46.500 --> 13:48.500
所以说我们这里

13:48.500 --> 13:50.500
要得到这么一个对象

13:50.500 --> 13:52.500
得到这么一个对象

13:52.500 --> 13:54.500
这个对象里边是不是有一些属性

13:54.500 --> 13:56.500
有哪些属性 是不是有model

13:56.500 --> 13:58.500
我们看一下这边

13:58.500 --> 14:00.500
有model属性

14:00.500 --> 14:02.500
有rotor属性 还有start

14:02.500 --> 14:04.500
还有start

14:04.500 --> 14:06.500
我们这里边肯定有这么一些属性

14:06.500 --> 14:08.500
model

14:08.500 --> 14:10.500
然后一个是rotor

14:10.500 --> 14:12.500
一个是start

14:12.500 --> 14:14.500
有这么一些属性

14:14.500 --> 14:16.500
不着急 一部分一部分来

14:16.500 --> 14:18.500
首先是一个model

14:18.500 --> 14:20.500
有这个model属性

14:20.500 --> 14:22.500
model属性是一个啥呢

14:22.500 --> 14:24.500
model属性是一个啥

14:24.500 --> 14:26.500
model属性是不是一个寒数

14:26.500 --> 14:28.500
而且你要给它传一个模型

14:28.500 --> 14:30.500
对吧 你要给它传一个模型

14:30.500 --> 14:32.500
好 那么这里呢

14:32.500 --> 14:34.500
就在这里写一个model

14:34.500 --> 14:36.500
就在这里写一个model寒数

14:36.500 --> 14:38.500
那么把这个model寒数是不是放这

14:38.500 --> 14:40.500
对不对

14:40.500 --> 14:42.500
最终我们把这个app返回

14:42.500 --> 14:44.500
把这个app返回

14:44.500 --> 14:46.500
或者我们在这里返回也行

14:46.500 --> 14:48.500
下边是另一个寒数

14:48.500 --> 14:50.500
然后model这个寒数

14:50.500 --> 14:52.500
里边是不是有个参数

14:52.500 --> 14:54.500
我们来看一下

14:54.500 --> 14:56.500
这个参数是不是要传一个对象进去

14:56.500 --> 14:58.500
模型对象

14:58.500 --> 15:00.500
对不对 模型对象

15:00.500 --> 15:02.500
model obj

15:02.500 --> 15:04.500
一个模型对象

15:04.500 --> 15:06.500
根据模型对象

15:06.500 --> 15:08.500
根据模型对象

15:08.500 --> 15:10.500
定义一个模型

15:10.500 --> 15:12.500
好 这种model这个寒数的作用

15:12.500 --> 15:14.500
那么现在model这个寒数来做什么呢

15:14.500 --> 15:16.500
一开始要做什么 你想一想

15:16.500 --> 15:18.500
它这里要做什么

15:18.500 --> 15:20.500
它这里有啥事情可以做

15:20.500 --> 15:22.500
model它可以定义很多很多的模型

15:24.500 --> 15:26.500
那么这些模型

15:26.500 --> 15:28.500
如果说这个

15:28.500 --> 15:30.500
如果说这个d bar 它没有启动

15:30.500 --> 15:32.500
它最后没有启动

15:32.500 --> 15:34.500
那这个模型定义有没有意义

15:34.500 --> 15:36.500
想想这个问题啊

15:36.500 --> 15:38.500
没有启动d bar

15:38.500 --> 15:40.500
那么这个模型定义有没有什么意义

15:40.500 --> 15:42.500
没有意义

15:42.500 --> 15:44.500
模型呢只是我放在这

15:44.500 --> 15:46.500
就是将来我启动的时候呢

15:46.500 --> 15:48.500
我要把它放到仓库里边

15:48.500 --> 15:50.500
就这么个意思啊

15:50.500 --> 15:52.500
将来我启动的时候

15:52.500 --> 15:54.500
我要把它放到仓库里边

15:54.500 --> 15:56.500
如果说你没有启动是没有任何意义的

15:56.500 --> 15:58.500
比方说吧 我们看一下

15:58.500 --> 16:00.500
如果说我把个代码重新

16:00.500 --> 16:02.500
我们这里再复制一个

16:02.500 --> 16:04.500
我们把之前的代码重新放到那个index里边

16:04.500 --> 16:06.500
启动了

16:06.500 --> 16:08.500
我现在不启动了

16:08.500 --> 16:10.500
保存啊

16:10.500 --> 16:14.780
你看一下

16:14.780 --> 16:16.780
不启动

16:16.780 --> 16:18.780
然后呢我们在那个d bar里边

16:18.780 --> 16:20.780
d bar里边

16:20.780 --> 16:22.780
在那个就是model里边

16:22.780 --> 16:24.780
counter里边不是有一个

16:24.780 --> 16:26.780
subscribe pin吗对不对

16:26.780 --> 16:28.780
我们看一下这个subscribe pin有没有运行

16:28.780 --> 16:30.780
有没有运行

16:30.780 --> 16:34.410
一二三

16:34.410 --> 16:36.410
是没有运行

16:36.410 --> 16:38.410
我们可以理解为

16:38.410 --> 16:40.410
而且这个redax

16:40.410 --> 16:42.410
div2是访问不了的

16:42.410 --> 16:44.410
因为它没有

16:44.410 --> 16:46.410
监测到我们的整个系统里边

16:46.410 --> 16:48.410
有providers

16:48.410 --> 16:50.410
没有redax里边providers

16:50.410 --> 16:52.410
所以说它运行不了

16:52.410 --> 16:54.410
那么这里呢就是这样子

16:54.410 --> 16:56.410
如果说你不启动的话

16:56.410 --> 16:58.410
这个模型定义是毫无意义的

16:58.410 --> 17:00.410
因此呢

17:00.410 --> 17:02.410
基于这一点的话

17:02.410 --> 17:04.410
我们这里要做什么事情呢

17:04.410 --> 17:06.410
什么事情都不做

17:06.410 --> 17:08.410
我们只做一件事

17:08.410 --> 17:10.410
把你这个模型呢保存起来

17:10.410 --> 17:12.410
你不是定义模型吗

17:12.410 --> 17:14.410
我把你这个模型保存起来

17:14.410 --> 17:16.410
将来以做将来使用

17:16.410 --> 17:18.410
但是呢由于你这里有可能

17:18.410 --> 17:20.410
会定义多个模型

17:20.410 --> 17:22.410
你这里是不是可以定义多个模型

17:22.410 --> 17:24.410
那么我这里是不是要用个数组来保存啊

17:24.410 --> 17:26.410
于是呢我们这里

17:26.410 --> 17:28.410
用一个数组来保存这个先模型

17:28.410 --> 17:30.410
那么它这个数组

17:30.410 --> 17:32.410
在元代码里边它写到哪呢

17:32.410 --> 17:34.410
它是在这个app里面的

17:34.410 --> 17:36.410
加了一个属箱

17:36.410 --> 17:38.410
叫做models

17:38.410 --> 17:40.410
它是一个数组

17:40.410 --> 17:42.410
加了这么一个属箱

17:42.410 --> 17:44.410
它用来记录

17:44.410 --> 17:46.410
记录已经定义的模型

17:46.410 --> 17:48.410
还有这么一个东西

17:48.410 --> 17:50.410
好于是呢我在这里

17:50.410 --> 17:52.410
当我调用这个方法的时候

17:52.410 --> 17:54.410
其实我做的事情很简单

17:54.410 --> 17:56.410
我就简单的往这个models里边

17:56.410 --> 17:58.410
铺起一个

17:58.410 --> 18:00.410
添加一个模型

18:00.410 --> 18:02.410
models

18:02.410 --> 18:04.410
obj

18:04.410 --> 18:06.410
没有其他事情可以做了

18:06.410 --> 18:08.410
就把它加进去玩事了

18:08.410 --> 18:10.410
这就是定义模型

18:10.410 --> 18:12.410
将来启动的时候有用

18:12.410 --> 18:14.410
这是这一步定义模型

18:14.410 --> 18:16.410
好然后呢我们再看

18:16.410 --> 18:18.410
咱们之前呢还有这么一个东西

18:18.410 --> 18:24.090
把这个配置

18:26.090 --> 18:28.090
还有这么一些东西啊

18:28.090 --> 18:30.090
除了定义模型之外

18:30.090 --> 18:32.090
我们还有个就是设置路由

18:32.090 --> 18:34.090
那么这个设置路由的话

18:34.090 --> 18:36.090
它有一个rotor

18:36.090 --> 18:38.090
有个rotor函数

18:38.090 --> 18:40.090
rotor函数

18:40.090 --> 18:42.090
这是用来设置路由的

18:42.090 --> 18:44.090
到这里面我们是不是又可以写个函数

18:44.090 --> 18:46.090
rotor函数

18:46.090 --> 18:48.090
那么这个路由里边要传一个啥

18:48.090 --> 18:50.090
是不是传一个路由配置啊

18:50.090 --> 18:52.090
就是一个函数

18:52.090 --> 18:54.090
这个函数呢反回一个路由配置

18:54.090 --> 18:56.090
我们这里呢可以

18:56.090 --> 18:58.090
有一个参数

18:58.090 --> 19:00.090
这个参数是一个函数

19:00.090 --> 19:02.090
好我们这里呢写上

19:02.090 --> 19:04.090
这里是

19:04.090 --> 19:06.090
传入一个

19:06.090 --> 19:08.090
路由函数

19:08.090 --> 19:10.090
函函数

19:10.090 --> 19:12.090
反回路由配置

19:12.090 --> 19:14.090
这个路由配置是啥呢

19:14.090 --> 19:16.090
路由配置就是一个可以宣扬的U20节点

19:16.090 --> 19:18.090
好那么

19:18.090 --> 19:20.090
我们这里要不要调用函数

19:20.090 --> 19:22.090
要不要调用函数

19:22.090 --> 19:24.090
回忆一下啊

19:24.090 --> 19:26.090
这里我们要不要调用函数

19:26.090 --> 19:28.090
这里要不要调用函数

19:28.090 --> 19:30.090
不用调用函数啊

19:30.090 --> 19:32.090
我们不用去调用函数

19:32.090 --> 19:34.090
比方说吧我们这里就试一下吧

19:34.090 --> 19:36.090
看一下这个函数有没有调用

19:36.090 --> 19:38.090
我们在这个函数里边输出一个结果

19:38.090 --> 19:40.090
输出一个结果

19:40.090 --> 19:42.090
函数被调用了

19:42.090 --> 19:44.090
看一下保存

19:44.090 --> 19:46.090
你看这个函数有没有调用

19:46.090 --> 19:48.090
所以也没有调用

19:48.090 --> 19:50.090
为什么没有调用

19:50.090 --> 19:52.090
因为他这个函数是要等到

19:52.090 --> 19:54.090
启动的时候再调用

19:54.090 --> 19:56.090
我们这里只是做一个配置而已

19:56.090 --> 19:58.090
这件事情要在启动之前搞定的

19:58.090 --> 20:00.090
因为启动的时候要用到这些东西

20:00.090 --> 20:02.090
好所以说我们这里

20:02.090 --> 20:04.090
也仅仅是做一个记录

20:04.090 --> 20:06.090
那么这里又写了下网线

20:06.090 --> 20:08.090
rotr

20:08.090 --> 20:10.090
这里用于

20:10.090 --> 20:12.090
记录路由函数

20:12.090 --> 20:14.090
用来记录路由函数

20:14.090 --> 20:16.090
也就是把这个

20:16.090 --> 20:18.090
这个函数里边的参数

20:18.090 --> 20:20.090
rotr func记录到哪呢

20:20.090 --> 20:22.090
记录到app

20:22.090 --> 20:24.090
写上rotr记录到这里边

20:24.090 --> 20:26.090
做个记录

20:26.090 --> 20:28.090
仅仅是做这个记录

20:28.090 --> 20:30.090
所以这两个函数是特别特别简单的

20:30.090 --> 20:32.090
它本身没有做任何事情

20:32.090 --> 20:34.090
它只是把你传递的参数

20:34.090 --> 20:36.090
把它记录下来

20:36.090 --> 20:39.720
这一切错了

20:39.720 --> 20:41.720
这节目报什么说

20:41.720 --> 20:45.160
is not defined

20:45.160 --> 20:47.160
这里得付一个默认值

20:50.540 --> 20:52.540
这是路由函数

20:52.540 --> 20:54.540
最后呢

20:54.540 --> 20:56.540
最后是不是有一个start

20:56.540 --> 20:57.540
app

20:57.540 --> 20:59.540
对不对

20:59.540 --> 21:01.540
这里不要传一个snegator

21:01.540 --> 21:03.540
这里不要传入root

21:03.540 --> 21:05.540
这是要启动

21:05.540 --> 21:07.540
那么现在呢

21:07.540 --> 21:11.300
我们照这边来写

21:11.300 --> 21:13.300
这边呢我们就开始启动了

21:13.300 --> 21:15.300
func有一个start函数

21:15.300 --> 21:17.300
那么你给我传一个什么

21:17.300 --> 21:19.300
snegator

21:19.300 --> 21:21.300
当然其实它也可以传一个atm元数

21:21.300 --> 21:23.300
直接把元数传进去

21:23.300 --> 21:25.300
像这些细致默计的东西

21:25.300 --> 21:27.300
我们就不用讲那么细了

21:27.300 --> 21:29.300
我们直接来写就行了

21:29.300 --> 21:31.300
我们这里呢

21:31.300 --> 21:33.300
要给它加入一个start函数

21:33.300 --> 21:35.300
start函数

21:35.300 --> 21:37.300
其实呢

21:37.300 --> 21:39.300
它的元代码里面是把这些东西分开了的

21:39.300 --> 21:41.300
是把那些东西

21:41.300 --> 21:43.300
还分到一个叫做dba core的一个cool里面去了

21:43.300 --> 21:45.300
我们这里不用写那么细

21:45.300 --> 21:47.300
我们把核心功能杆实现就行了

21:47.300 --> 21:49.300
start这个cool

21:49.300 --> 21:51.300
那么这个函数里面

21:51.300 --> 21:53.300
叫做超级超级多的事情

21:53.300 --> 21:55.300
有很多事情要做

21:55.300 --> 21:57.300
得在这里做吧

21:57.300 --> 21:59.300
那仓库里边的redux中间键

21:59.300 --> 22:01.300
得在这里夹住进去吧

22:01.300 --> 22:03.300
还有什么创建react

22:03.300 --> 22:05.300
以及

22:05.300 --> 22:07.300
创建react的根结点

22:07.300 --> 22:09.300
得在这里夹进去吧

22:09.300 --> 22:11.300
还有什么react

22:13.300 --> 22:15.300
redux里边的provider

22:15.300 --> 22:17.300
得在这里夹进去吧

22:17.300 --> 22:19.300
还有渲染react的cool

22:19.300 --> 22:21.300
得在这里夹进去

22:21.300 --> 22:23.300
是不是有很多很多的事情

22:23.300 --> 22:25.300
都需要在这里去完成

22:25.300 --> 22:27.300
都需要在这里去完成

22:27.300 --> 22:29.300
我们不着急

22:29.300 --> 22:31.300
慢慢来

22:31.300 --> 22:33.300
首先我们做一个最简单最简单的版本

22:33.300 --> 22:35.300
就是呢

22:35.300 --> 22:37.300
我仅仅是把你这个玩意儿

22:37.300 --> 22:39.300
给你渲染出来

22:39.300 --> 22:41.300
我仅仅把你这个玩意儿给你渲染出来

22:41.300 --> 22:43.300
其他事情我先暂时不着急做

22:43.300 --> 22:45.300
事情是一部分一部分做了

22:45.300 --> 22:47.300
那么我们这里举个简单的例子

22:47.300 --> 22:49.300
你看我这里定义了两个模型

22:49.300 --> 22:51.300
我现在我们使用自己的地方

22:51.300 --> 22:53.300
使用我们自己的地方

22:55.300 --> 22:57.300
我们这里定义了两个模型

22:57.300 --> 22:59.300
然后呢定了一个路由

22:59.300 --> 23:01.300
我们这里呢对这个路由呢

23:01.300 --> 23:03.300
稍微做一下变化

23:03.300 --> 23:05.300
这个路由呢现在把它变得非常非常简单

23:05.300 --> 23:07.300
把它变得非常简单

23:07.300 --> 23:09.300
这里就返回一个H

23:11.300 --> 23:13.300
所以

23:13.300 --> 23:15.300
调整这个函数返回这个玩意儿

23:15.300 --> 23:17.300
这个东西全部不要了

23:17.300 --> 23:19.300
全部不要了

23:19.300 --> 23:21.300
就相当

23:26.660 --> 23:28.660
就是说我们这个文件里面呢

23:28.660 --> 23:30.660
就相当于是个根结点

23:30.660 --> 23:32.660
调整这个函数返回一个东西

23:32.660 --> 23:34.660
我把这个东西宣传出来就完事了

23:34.660 --> 23:36.660
那如果是这种场景的话

23:36.660 --> 23:38.660
是不是就很简单

23:38.660 --> 23:40.660
怎么写呢

23:40.660 --> 23:42.660
我们就可以这样子写

23:42.660 --> 23:44.660
你看一下回想我们React怎么写的吗

23:44.660 --> 23:46.660
我们怎么写呢

23:46.660 --> 23:48.660
我们React里面

23:48.660 --> 23:50.660
我们最终是不是要宣传一个ReactDome

23:50.660 --> 23:52.660
ReactDome

23:52.660 --> 23:54.660
fromReactDome

23:54.660 --> 23:56.660
然后呢

23:56.660 --> 23:58.660
再导入一个React

23:58.660 --> 24:00.660
fromReact

24:02.660 --> 24:04.660
先不到底导入这个吗

24:04.660 --> 24:06.660
这个东西偏不早就导入

24:06.660 --> 24:08.660
好那么这里边我们最终的目标

24:08.660 --> 24:10.660
是要ReactDome

24:10.660 --> 24:12.660
第二什么呢

24:12.660 --> 24:14.660
Render对不对宣传

24:14.660 --> 24:16.660
进行宣传

24:16.660 --> 24:18.660
宣传啥呢

24:18.660 --> 24:20.660
是不是宣传这个

24:20.660 --> 24:22.660
之前我们保存在这儿的那个函数

24:22.660 --> 24:24.660
返回的结果对吧

24:24.660 --> 24:26.660
是不是我们保存在这个函数里面的

24:26.660 --> 24:28.660
返回结果

24:28.660 --> 24:30.660
甚至呢我们这里呢

24:30.660 --> 24:32.660
它的圆代码里面的实际上是把这一块呢

24:32.660 --> 24:34.660
包装到一个Render函数里面的

24:34.660 --> 24:36.660
实际上把它包装到一个Render函数里面的

24:36.660 --> 24:38.660
那咱们来吧

24:38.660 --> 24:40.660
我们这里就写这么一个Render函数

24:40.660 --> 24:42.660
Render函数

24:44.660 --> 24:46.660
传入一个Select

24:46.660 --> 24:48.660
那么这里其实实际上就是

24:48.660 --> 24:50.660
调整这个Render函数

24:50.660 --> 24:52.660
仅此而已

24:52.660 --> 24:54.660
那么这里怎么做的什么事情呢

24:54.660 --> 25:00.020
它是做宣传

25:00.020 --> 25:02.020
这个Render函数里面做什么事情呢

25:02.020 --> 25:04.020
我们这里使用ReactDome

25:04.020 --> 25:06.020
点Render

25:06.020 --> 25:08.020
Render里面第一个是不是

25:08.020 --> 25:10.020
传一个可以宣传的东西

25:10.020 --> 25:12.020
你甭管你传啥吧

25:12.020 --> 25:14.020
总之要传一个可以宣传的东西

25:14.020 --> 25:16.020
那么这个可以宣传的东西是哪来的

25:16.020 --> 25:18.020
是来自于Router里面调用的结果对吧

25:18.020 --> 25:20.020
这就是我们可以宣传的东西

25:20.020 --> 25:22.020
你看我们之前的

25:22.020 --> 25:24.020
传的函数就这个函数

25:24.020 --> 25:26.020
是保存到

25:26.020 --> 25:28.020
保存到这的对吧

25:28.020 --> 25:30.020
我们调用这个函数就可以得到宣传的东西了

25:30.020 --> 25:32.020
然后呢我们的Dome

25:32.020 --> 25:34.020
我们宣传到哪去呢

25:34.020 --> 25:36.020
说宣传到Document

25:36.020 --> 25:38.020
然后呢把我们的选择器传进去

25:38.020 --> 25:40.020
对吧

25:40.020 --> 25:42.020
说传进去就可以宣传的就这么简单

25:42.020 --> 25:44.020
好保存你看就已经可以运行了

25:44.020 --> 25:46.020
你看就已经可以运行了

25:46.020 --> 25:48.020
来

25:48.020 --> 25:50.020
target container is not a dome element

25:50.020 --> 25:52.020
target container is not a dome element

25:52.020 --> 25:54.020
呃什么意思

25:54.020 --> 25:56.020
它说目标的容器它不是一个dome元素

25:56.020 --> 25:58.020
目标容器它不是一个dome元素

25:58.020 --> 26:00.020
目标容器它不是一个dome元素

26:00.020 --> 26:02.020
诶这个是nator

26:02.020 --> 26:04.020
我看一下啊

26:04.020 --> 26:06.020
哦这里没传参数啊没有把我的选择器传过来

26:06.020 --> 26:08.020
啊保存

26:08.020 --> 26:10.020
不就宣传出来了嘛对不对

26:10.020 --> 26:12.020
其实特别特别简单

26:12.020 --> 26:14.020
只不过呢现在我们D的模型

26:14.020 --> 26:16.020
没有什么用

26:16.020 --> 26:18.020
硬的模型等于白定义了

26:18.020 --> 26:20.020
好那么现在呢我们

26:20.020 --> 26:22.020
接下来我们要做的事情就是

26:22.020 --> 26:24.020
把模型的功能给它加进去

26:24.020 --> 26:26.020
因为我们现在你会发现根本就没有

26:26.020 --> 26:28.020
维大格式对吧没有维大格式

26:28.020 --> 26:30.020
我们得把模型给它加进去

26:30.020 --> 26:32.020
那么要加入模型啊

26:32.020 --> 26:34.020
我们要加入模型

26:34.020 --> 26:36.020
是不是得生成一个组件啊

26:36.020 --> 26:38.020
是不是生成一个就是

26:38.020 --> 26:40.020
rex redux里面的一个provide

26:40.020 --> 26:42.020
的组件对不对

26:42.020 --> 26:44.020
我们要倒入

26:44.020 --> 26:46.020
from

26:46.020 --> 26:48.020
就是rex redux里面

26:48.020 --> 26:50.020
不是提供了一个组件吗

26:50.020 --> 26:52.020
叫做provide的组件

26:52.020 --> 26:54.020
对不对所以有这么一个组件

26:54.020 --> 26:56.020
好那么这个组件

26:56.020 --> 26:58.020
好这个组件

26:58.020 --> 27:00.020
我们怎么来了啊我们在这里啊

27:00.020 --> 27:02.020
就不能直接确定这个玩意了

27:02.020 --> 27:04.020
我们是不是在外面要掏一个组件

27:04.020 --> 27:06.020
对不对啊我们这里

27:06.020 --> 27:08.020
首先个变量把它接受一下

27:08.020 --> 27:10.020
把这个玩意接受一下

27:10.020 --> 27:12.020
就是rot

27:12.020 --> 27:14.020
rot config

27:14.020 --> 27:17.780
然后呢

27:17.780 --> 27:19.780
我们这里是我们要宣扬的元素对吧

27:19.780 --> 27:21.780
就是你这个这个函数返回的结果

27:21.780 --> 27:23.780
但是呢我们在外面还要掏一个东西

27:23.780 --> 27:25.780
啊我们外面还要掏一个东西

27:25.780 --> 27:27.780
就是

27:27.780 --> 27:29.780
root

27:29.780 --> 27:31.780
root

27:31.780 --> 27:33.780
我们要外面掏一个东西

27:33.780 --> 27:35.780
provider

27:35.780 --> 27:37.780
是不是要掏出一个就是那个

27:37.780 --> 27:39.780
rex redux里面的东西对吧

27:39.780 --> 27:41.780
要掏出这么掏

27:41.780 --> 27:43.780
掏用这么一个东西

27:43.780 --> 27:45.780
好这里我们这里入设放进来

27:45.780 --> 27:47.780
好然后在这里边呢写上

27:47.780 --> 27:49.780
rotr config

27:49.780 --> 27:51.780
能看懂吗这个代码

27:51.780 --> 27:53.780
代码结构没问题吧

27:53.780 --> 27:55.780
我们外面掏一个provider

27:55.780 --> 27:57.780
这个provider干嘛呢他在提供仓库

27:57.780 --> 27:59.780
那么这里边是不是要传入一个仓库啊

27:59.780 --> 28:01.780
实动那么这个仓库传啥呢

28:01.780 --> 28:03.780
因为它只是一个Render函数

28:03.780 --> 28:05.780
所以它里边呢

28:05.780 --> 28:07.780
它就不去建仓库了啊

28:07.780 --> 28:09.780
它只是一个Render函数而已

28:09.780 --> 28:11.780
好于是呢它需要一个参数

28:11.780 --> 28:13.780
要把Stone给我传进来

28:13.780 --> 28:15.780
你把仓库给我传进来

28:15.780 --> 28:17.780
好来吧

28:17.780 --> 28:19.780
你把仓库传进来我就OK搞定了

28:19.780 --> 28:21.780
那么这里边呢又需要一个

28:21.780 --> 28:23.780
又需要一个东西就是能够

28:23.780 --> 28:25.780
创建仓库的东西

28:25.780 --> 28:27.780
所以又需要一个函数来创建仓库啊

28:27.780 --> 28:29.780
好我们这里再写一个函数啊

28:29.780 --> 28:31.780
把这些东西尽量分开

28:31.780 --> 28:33.780
叫做getStone

28:33.780 --> 28:35.780
getStone

28:35.780 --> 28:37.780
创建一个仓库

28:37.780 --> 28:39.780
创建这么一个仓库

28:39.780 --> 28:41.780
那么这里边呢我们在start里面

28:41.780 --> 28:43.780
就可以形成这么一种结构

28:43.780 --> 28:45.780
我们在这里呢首先得到仓库

28:45.780 --> 28:47.780
先得到仓库

28:47.780 --> 28:49.780
然后呢我们再调用getStone

28:49.780 --> 28:51.780
拿到仓库

28:51.780 --> 28:53.780
拿到仓库之后呢我们把仓库传进去

28:53.780 --> 28:55.780
这要包什么错啊

28:55.780 --> 28:57.780
什么

28:57.780 --> 28:59.780
react

28:59.780 --> 29:01.780
对对对它这个时候需要导入react

29:01.780 --> 29:03.780
因为它用了jsx表达式

29:03.780 --> 29:05.780
就形成这么一种结构啊再看一下啊

29:05.780 --> 29:07.780
看一下这个结构

29:07.780 --> 29:09.780
我们写这么一个函数

29:09.780 --> 29:11.780
这个函数用来得到一个仓库

29:11.780 --> 29:13.780
用来创建一个仓库

29:13.780 --> 29:15.780
得到一个仓库对象

29:15.780 --> 29:17.780
react是仓库

29:17.780 --> 29:19.780
那么这是得到一个仓库

29:19.780 --> 29:21.780
然后呢我们在渲染的时候呢

29:21.780 --> 29:23.780
不但要给我一个选择器

29:23.780 --> 29:25.780
而且呢你还要给我一个仓库

29:25.780 --> 29:27.780
因为我要生成一个provider元素

29:27.780 --> 29:29.780
provider节点

29:29.780 --> 29:31.780
那么把仓库放进去

29:31.780 --> 29:33.780
才是我们的东西

29:33.780 --> 29:35.780
最多目的是要得到仓库

29:35.780 --> 29:37.780
那么现在我们

29:37.780 --> 29:39.780
怎么来得到一个react仓库呢

29:39.780 --> 29:41.780
我们知道react仓库

29:41.780 --> 29:43.780
是不是要创建的

29:43.780 --> 29:45.780
我们之前学过的react仓库

29:45.780 --> 29:47.780
它不是提供了这么一个函数吗

29:47.780 --> 29:49.780
看一下啊react

29:49.780 --> 29:51.780
叫做crazed stone

29:51.780 --> 29:53.780
对不对是不是有这么一个函数

29:53.780 --> 29:55.780
crazed stone

29:55.780 --> 29:57.780
那么这个函数

29:57.780 --> 29:59.780
我们是不是在这里调用啊

29:59.780 --> 30:01.780
可以创建仓库

30:01.780 --> 30:03.780
问题又来了

30:03.780 --> 30:05.780
这个调用这个函数的话

30:05.780 --> 30:07.780
是不是要传入一个reducer啊

30:09.780 --> 30:11.780
记得吗

30:11.780 --> 30:13.780
是不是要传入一个根的reducer

30:13.780 --> 30:15.780
对不对 是不是要传入一个reducer

30:15.780 --> 30:17.780
这里就得到一个仓库了

30:17.780 --> 30:19.780
我们甚至可以直接把仓库返回

30:19.780 --> 30:21.780
都可以

30:21.780 --> 30:23.780
那么问题是个reducer的哪来呢

30:25.780 --> 30:27.780
好 现在这是最核心的问题

30:27.780 --> 30:29.780
reducer哪来

30:29.780 --> 30:31.780
reducer是不是就是一个函数

30:31.780 --> 30:33.780
我们得自己写这么一个函数

30:33.780 --> 30:35.780
对不对 那么来进行创建

30:35.780 --> 30:37.780
那么这个reducer哪来呢

30:37.780 --> 30:39.780
它给我们的是什么呢

30:39.780 --> 30:41.780
给我们的只有模型 就只有这些东西

30:41.780 --> 30:43.780
它就给我们的这些东西

30:43.780 --> 30:45.780
其他啥子没管 给我们这些东西

30:45.780 --> 30:47.780
然后那个students里面啥子没有

30:47.780 --> 30:49.780
它给我们这些东西

30:49.780 --> 30:51.780
一个对象 有可能有多个对象

30:51.780 --> 30:53.780
放到哪儿的 是放到这儿的

30:53.780 --> 30:55.780
放在这个数组里边的

30:55.780 --> 30:57.780
要存了很多的模型

30:57.780 --> 30:59.780
那么我们要根据这个模型

30:59.780 --> 31:01.780
把它转换为一个跟的reducer

31:01.780 --> 31:03.780
把它转换为这个reducer

31:03.780 --> 31:05.780
转换完了之后

31:05.780 --> 31:07.780
我们是不是就传进去

31:07.780 --> 31:09.780
创建仓库就完事了

31:09.780 --> 31:11.780
对不对 所以现在的问题是

31:11.780 --> 31:13.780
我们要

31:13.780 --> 31:15.780
根据

31:15.780 --> 31:17.780
根据模型

31:17.780 --> 31:19.780
得到一个

31:19.780 --> 31:21.780
跟的reducer

31:21.780 --> 31:23.780
reducer

31:23.780 --> 31:25.780
跟的reducer

31:25.780 --> 31:27.780
就是入车reducer

31:27.780 --> 31:29.780
但是我们的模型可能有很多个

31:29.780 --> 31:31.780
对吧 我们的模型肯定有很多个

31:31.780 --> 31:33.780
那么现在我们的问题是

31:33.780 --> 31:35.780
我们要得到一个跟的reducer

31:35.780 --> 31:37.780
其实我们利用那个reducer

31:37.780 --> 31:39.780
里面有个cool

31:39.780 --> 31:41.780
有个方法叫做combined reducers

31:41.780 --> 31:43.780
对吧 是不是有这么一个方法

31:43.780 --> 31:45.780
combined reducers

31:45.780 --> 31:47.780
如果说 假如说

31:47.780 --> 31:49.780
假如我们得到这么一个对象

31:49.780 --> 31:51.780
这个对象里边有什么呢

31:51.780 --> 31:53.780
有什么redu...

31:53.780 --> 31:55.780
有那个contour

31:55.780 --> 31:57.780
这是一个reducer

31:57.780 --> 31:59.780
contour

31:59.780 --> 32:01.780
reducer

32:01.780 --> 32:03.780
方形

32:03.780 --> 32:05.780
这是一个contourreducer

32:05.780 --> 32:07.780
如果说我们得到一个就是

32:07.780 --> 32:09.780
还有students

32:09.780 --> 32:11.780
students

32:11.780 --> 32:13.780
这是students

32:13.780 --> 32:15.780
reducer

32:15.780 --> 32:17.780
方形

32:17.780 --> 32:19.780
reducer

32:19.780 --> 32:21.780
得到这么一个对象

32:21.780 --> 32:23.780
那么如果说得到这么一个对象

32:23.780 --> 32:25.780
那我们是不是直接

32:25.780 --> 32:27.780
调用combined reducer是

32:27.780 --> 32:29.780
把这个对象

32:29.780 --> 32:31.780
传进去 是不是就完事了

32:31.780 --> 32:33.780
是不是就完事了

32:33.780 --> 32:35.780
combined reducer不就是干这个事吗

32:35.780 --> 32:37.780
对吧 它让你传入一个对象

32:37.780 --> 32:39.780
这个对象里面

32:39.780 --> 32:41.780
你每一个属性就对应一个reducer

32:41.780 --> 32:43.780
那么它把合并成一个跟的reducer

32:43.780 --> 32:45.780
是不是就完事了

32:45.780 --> 32:47.780
我们的reducer

32:47.780 --> 32:49.780
只要能够转换成这种格式

32:49.780 --> 32:51.780
是不是调用combined reducer

32:51.780 --> 32:53.780
就是搞定的const

32:53.780 --> 32:55.780
root reducer

32:55.780 --> 32:59.600
是不是完事了

32:59.600 --> 33:01.600
对吧 我们甚至

33:01.600 --> 33:03.600
可以直接简写一下

33:03.600 --> 33:05.600
简写一下

33:05.600 --> 33:07.600
你只要给我这个对象

33:07.600 --> 33:09.600
只要给我这么一个对象

33:09.600 --> 33:11.600
那么我把对象传进去完事了

33:11.600 --> 33:13.600
那么这个对象

33:13.600 --> 33:15.600
我们假设取名为

33:15.600 --> 33:17.600
reducer

33:19.600 --> 33:21.600
obg

33:21.600 --> 33:23.600
假设取名为这个

33:23.600 --> 33:25.600
或者就取名为root reducer

33:25.600 --> 33:27.600
root reducer

33:27.600 --> 33:29.600
reducer obg

33:29.600 --> 33:31.600
但它不是跟reducer

33:31.600 --> 33:33.600
它说我后面加个obg

33:33.600 --> 33:35.600
它是个对象

33:35.600 --> 33:37.600
因为reducer本身是个函数

33:37.600 --> 33:39.600
这个root reducer obg

33:39.600 --> 33:41.600
它是个对象 是这么种格式对象

33:41.600 --> 33:43.600
这个对象它用处是

33:43.600 --> 33:45.600
创建跟reducer的

33:45.600 --> 33:47.600
用来创建root reducer的

33:47.600 --> 33:49.600
我们把对象最终传进去

33:49.600 --> 33:51.600
是不是又可以形成reducer的

33:51.600 --> 33:53.600
现在我们假设这样的写

33:53.600 --> 33:55.600
其实效果已经出来了

33:55.600 --> 33:57.600
就已经可以跑通了

33:57.600 --> 33:59.600
保存 你看一下吧

33:59.600 --> 34:01.600
就已经可以跑通这个效果了

34:01.600 --> 34:03.600
你看一下 我们的redux

34:03.600 --> 34:05.600
现在没有

34:05.600 --> 34:10.000
没有

34:10.000 --> 34:12.000
因为我们reducer里

34:12.000 --> 34:14.000
没有传任何东西

34:14.000 --> 34:16.000
现在还看不到

34:16.000 --> 34:18.000
没关系

34:18.000 --> 34:20.000
我们接着写

34:20.000 --> 34:22.000
那么现在的问题

34:22.000 --> 34:24.000
这里边

34:24.000 --> 34:26.000
我们

34:26.000 --> 34:28.000
要把它的模型

34:28.000 --> 34:30.000
转换成

34:30.000 --> 34:32.000
我们可能有很多模型

34:32.000 --> 34:34.000
把每一个模型

34:34.000 --> 34:36.000
是不是转换成一个reducer

34:36.000 --> 34:38.000
放到这里边

34:38.000 --> 34:40.000
把每一个模型转换成一个reducer

34:40.000 --> 34:42.000
放到这里边

34:42.000 --> 34:44.000
把每一个模型转换

34:44.000 --> 34:46.000
转换啥

34:46.000 --> 34:48.000
是不是转换这个数组

34:48.000 --> 34:50.000
就是app.models的数组

34:50.000 --> 34:52.000
一个一个模型全部拿到

34:52.000 --> 34:54.000
models 是不是

34:54.000 --> 34:56.000
每一个模型转换

34:56.000 --> 34:58.000
每一个模型转换

34:58.000 --> 35:00.000
每一个模型转换

35:00.000 --> 35:02.000
每一个模型转换

35:02.000 --> 35:04.000
每一个模型转换

35:04.000 --> 35:06.000
每一个模型转换

35:06.000 --> 35:08.000
每一个模型转换

35:08.000 --> 35:10.000
这是我们要做的事情

35:10.000 --> 35:12.000
你给我一个模型

35:12.000 --> 35:14.000
我给你返回一个reducer函数

35:14.000 --> 35:15.000
那么这里

35:15.000 --> 35:17.000
比方说

35:17.000 --> 35:19.000
比方说我们这里

35:19.000 --> 35:21.000
返回的是这么一种格式

35:21.000 --> 35:23.000
就是name

35:25.000 --> 35:27.000
就是函数的

35:27.000 --> 35:29.000
就是这个模型的名字

35:29.000 --> 35:30.000
这个模型的名字

35:30.000 --> 35:32.000
比方说这里是student

35:32.000 --> 35:34.000
reducer

35:34.000 --> 35:36.000
reducer就是一个函数

35:36.000 --> 35:38.000
我给你返回这么一个函数

35:39.000 --> 35:41.000
就这么一个函数

35:42.000 --> 35:44.000
我这个方法的作用

35:44.000 --> 35:46.000
就是你根据一个模型的配置

35:46.000 --> 35:48.000
我给你返回这么一个东西

35:48.000 --> 35:50.000
给你返回这么一个东西

35:50.000 --> 35:51.000
那么拿到这个东西过后

35:51.000 --> 35:53.000
那这边是不是很简单了

35:55.000 --> 35:56.000
看一下

35:56.000 --> 35:57.000
getreducer

35:57.000 --> 35:59.000
把这个模型是不是传进去

35:59.000 --> 36:00.000
是不是可以拿到这么一个东西

36:00.000 --> 36:01.000
拿到这么一个对象

36:01.000 --> 36:02.000
这个对象里边有reducer

36:02.000 --> 36:03.000
有它的名字

36:03.000 --> 36:04.000
那么就简单了

36:04.000 --> 36:06.000
我们就往rootreducer

36:06.000 --> 36:08.000
这里面是不是把名字放到这

36:08.000 --> 36:10.000
是不是把名字放到这

36:10.000 --> 36:11.000
看没

36:11.000 --> 36:14.000
因为我们最终要形成这么一种格式

36:14.000 --> 36:15.000
这里有个名字

36:15.000 --> 36:16.000
对应一个reducer

36:16.000 --> 36:17.000
一个名字对应一个reducer

36:17.000 --> 36:18.000
名字放这

36:18.000 --> 36:19.000
名字放这

36:19.000 --> 36:20.000
然后呢

36:20.000 --> 36:21.000
等于什么呢

36:21.000 --> 36:23.000
等于reducer这个函数

36:23.000 --> 36:25.000
这是ob界点的

36:25.000 --> 36:26.000
ob界点的

36:26.000 --> 36:29.000
然后这里是ob界点

36:29.000 --> 36:30.000
reducer这个函数

36:30.000 --> 36:32.000
把这里可能稍微点烧

36:32.000 --> 36:34.000
能看懂吗

36:34.000 --> 36:35.000
我们这里要做这么一件事

36:35.000 --> 36:38.000
所以说我们现在问题又转换成这个了

36:38.000 --> 36:40.000
就是问题就是一部分说小

36:40.000 --> 36:41.000
一部分说小

36:41.000 --> 36:45.000
最终倒到最核心的把整个事情做完

36:45.000 --> 36:47.000
那么现在问题关键在这

36:47.000 --> 36:52.000
如何根据一个模型来得到一个reducer呢

36:52.000 --> 36:58.000
根据一个模型得到一个reducer

36:58.000 --> 37:00.000
这个问题怎么办

37:00.000 --> 37:03.000
来我们一部分一部分写

37:03.000 --> 37:04.000
我们要返回对象里边

37:04.000 --> 37:06.000
不是要有个name吗

37:06.000 --> 37:07.000
我们首先来

37:07.000 --> 37:09.000
这里定一个辨量

37:09.000 --> 37:13.000
就是reducerob界

37:13.000 --> 37:15.000
它里边不是有个name属性吗

37:15.000 --> 37:17.000
这个name属性等于啥

37:17.000 --> 37:20.000
最后肯定是返回reducerob界

37:20.000 --> 37:22.000
这个name属性等于啥

37:22.000 --> 37:24.000
想一想

37:24.000 --> 37:26.000
那我们的模型里边

37:26.000 --> 37:28.000
它最终形成的reducer

37:28.000 --> 37:29.000
形成的一个状态

37:29.000 --> 37:30.000
它的属性名

37:30.000 --> 37:32.000
是不是就是个命名空间

37:32.000 --> 37:35.000
这个name space命名空间的名字

37:35.000 --> 37:36.000
对不对

37:36.000 --> 37:37.000
所以说这个name属性

37:37.000 --> 37:38.000
应该等于啥

37:38.000 --> 37:41.000
应该等于模型里边的name space

37:41.000 --> 37:42.000
所以说这里其实

37:42.000 --> 37:43.000
它里边还给你进行了判断

37:43.000 --> 37:45.000
如果说你没有写name space

37:45.000 --> 37:46.000
它会给你报错的

37:46.000 --> 37:47.000
我这里难得写了

37:47.000 --> 37:49.000
如果有兴趣的话

37:49.000 --> 37:51.000
我可以自己写一下

37:51.000 --> 37:53.000
然后下面是一个函数

37:53.000 --> 37:55.000
reducerob界是一个函数

37:55.000 --> 37:57.000
这个函数是不是要返回一个stats

37:57.000 --> 37:58.000
一个action

37:58.000 --> 37:59.000
慢慢来

37:59.000 --> 38:00.000
不着急

38:00.000 --> 38:01.000
那么这个stats里边

38:01.000 --> 38:03.000
默认值是啥

38:03.000 --> 38:05.000
这个默认值是啥

38:05.000 --> 38:06.000
这个默认

38:06.000 --> 38:07.000
这个状态的默认值

38:07.000 --> 38:08.000
是不是来自于

38:08.000 --> 38:10.000
这个模型里边的stats

38:10.000 --> 38:11.000
是不是来自于这

38:11.000 --> 38:13.000
其实也可以判断一下

38:13.000 --> 38:15.000
如果它没有写这个stats

38:15.000 --> 38:16.000
要报错

38:16.000 --> 38:17.000
对吧

38:17.000 --> 38:19.000
是不是要来自于这个stats

38:19.000 --> 38:21.000
mod里边的stats

38:21.000 --> 38:22.000
它的默认值

38:22.000 --> 38:23.000
好

38:23.000 --> 38:24.000
那这里边做啥呢

38:24.000 --> 38:25.000
我们以前就是

38:25.000 --> 38:26.000
最原始的时候

38:26.000 --> 38:27.000
reducer咋写的

38:27.000 --> 38:28.000
是不是switch

38:28.000 --> 38:29.000
很多的action

38:29.000 --> 38:30.000
内形

38:30.000 --> 38:32.000
当然内形到底是啥

38:32.000 --> 38:34.000
那么我们这里的内形

38:34.000 --> 38:35.000
要匹配到啥

38:35.000 --> 38:37.000
才去做一些事情呢

38:37.000 --> 38:39.000
我们是不是要去匹配

38:39.000 --> 38:41.000
这个模型里边的reducer

38:41.000 --> 38:43.000
是不是要匹配这个

38:43.000 --> 38:45.000
是不是要匹配这里边的内形

38:45.000 --> 38:46.000
是不是匹配这个内形

38:46.000 --> 38:47.000
对吧

38:47.000 --> 38:49.000
并且要把命名空间加上

38:49.000 --> 38:50.000
看没

38:50.000 --> 38:51.000
我们是不是要匹配这个东西

38:51.000 --> 38:52.000
比较说我们这里的

38:52.000 --> 38:53.000
counter里边要匹配啥

38:53.000 --> 38:54.000
是不是要匹配

38:54.000 --> 38:55.000
counter

38:55.000 --> 38:56.000
鞋杠

38:56.000 --> 38:58.000
然后increase

38:58.000 --> 38:59.000
然后是什么

38:59.000 --> 39:01.000
还有什么counter

39:01.000 --> 39:02.000
counter鞋杠

39:02.000 --> 39:03.000
decrease

39:03.000 --> 39:04.000
对吧

39:04.000 --> 39:05.000
还有什么counter鞋杠

39:05.000 --> 39:07.000
就是这些东西

39:07.000 --> 39:09.000
是不是要匹配这些东西

39:09.000 --> 39:10.000
add

39:10.000 --> 39:12.000
是不是要匹配这些东西

39:12.000 --> 39:13.000
好

39:13.000 --> 39:14.000
那么我们如果说

39:14.000 --> 39:15.000
能够拿到这么一个数组

39:15.000 --> 39:16.000
是不是很简单呢

39:16.000 --> 39:18.000
拿到这么一个数组

39:18.000 --> 39:19.000
好

39:19.000 --> 39:20.000
我们来吧

39:20.000 --> 39:21.000
拿这么一个数组

39:21.000 --> 39:22.000
好

39:22.000 --> 39:23.000
我们这里呢

39:23.000 --> 39:24.000
生成一个数组

39:24.000 --> 39:25.000
其实都还可以

39:25.000 --> 39:26.000
再开个函数来写

39:26.000 --> 39:27.000
这么一个数组

39:27.000 --> 39:28.000
叫做reducer

39:28.000 --> 39:31.570
就是action types

39:31.570 --> 39:33.570
action types

39:33.570 --> 39:34.570
写这么一个数组

39:34.570 --> 39:38.570
就是要匹配的类型

39:38.570 --> 39:39.570
action类型

39:39.570 --> 39:42.200
好

39:42.200 --> 39:43.200
然后我们这里干嘛呢

39:43.200 --> 39:44.200
是不是循环

39:44.200 --> 39:45.200
循环啥

39:45.200 --> 39:46.200
循环这个

39:46.200 --> 39:48.200
模型里边的reducer

39:48.200 --> 39:49.200
是这个对象

39:49.200 --> 39:51.200
里边的所有的属性名

39:51.200 --> 39:52.200
属性名

39:52.200 --> 39:53.200
对吧

39:53.200 --> 39:54.200
其实它这里还要判断

39:54.200 --> 39:55.200
判断这个对象

39:55.200 --> 39:56.200
是不是一个plane object

39:56.200 --> 39:57.200
是不是一个品面对象

39:57.200 --> 39:59.200
我都不用管它了

39:59.200 --> 40:00.200
我们这里直接循环

40:00.200 --> 40:02.200
for in

40:02.200 --> 40:03.200
循环啥

40:03.200 --> 40:04.200
循环这个model里边的

40:04.200 --> 40:06.200
reducer

40:06.200 --> 40:08.200
reducer

40:08.200 --> 40:09.200
当然最好了

40:09.200 --> 40:10.200
前提有个判断

40:10.200 --> 40:12.200
如果说你这个model

40:12.200 --> 40:14.200
reducer

40:14.200 --> 40:15.200
reducer

40:15.200 --> 40:16.200
如果有值

40:16.200 --> 40:17.200
如果有值的话

40:17.200 --> 40:18.200
我们再进行循环

40:18.200 --> 40:19.200
如果没有值的话

40:19.200 --> 40:20.200
就算了

40:20.200 --> 40:21.200
如果有值的话

40:21.200 --> 40:22.200
我们再进行循环

40:22.200 --> 40:23.200
没有值的话

40:23.200 --> 40:24.200
你保持空数组

40:24.200 --> 40:25.200
好

40:25.200 --> 40:26.200
我们这里放起来

40:26.200 --> 40:27.200
循环

40:27.200 --> 40:29.200
那么每循环一次

40:29.200 --> 40:30.200
我们干嘛呢

40:30.200 --> 40:32.200
每循环一次

40:32.200 --> 40:33.200
我们是不是要得到一个

40:33.200 --> 40:34.200
reducer的内形

40:34.200 --> 40:35.200
对不对

40:35.200 --> 40:36.200
我们是不是要得到一个

40:36.200 --> 40:37.200
reducer的内形

40:37.200 --> 40:38.200
好

40:38.200 --> 40:39.200
我们把这个reducer的内形

40:39.200 --> 40:40.200
放进去

40:40.200 --> 40:41.200
内形在哪呢

40:41.200 --> 40:43.200
内形是不是就是个属性名

40:43.200 --> 40:45.200
是不是就是个属性名

40:45.200 --> 40:46.200
那么我们

40:46.200 --> 40:47.200
如果说最简单的就是

40:47.200 --> 40:48.200
action types

40:48.200 --> 40:50.200
push一个prop

40:50.200 --> 40:51.200
把这个属性名

40:51.200 --> 40:52.200
给它加进去

40:52.200 --> 40:53.200
现在我都不好演示

40:53.200 --> 40:54.200
我只是给大家看一下

40:54.200 --> 40:55.200
这个逻辑

40:55.200 --> 40:56.200
那么这里

40:56.200 --> 40:57.200
是不是把每一个属性名

40:57.200 --> 40:58.200
加进去了

40:58.200 --> 40:59.200
但是呢你不要忘记了

40:59.200 --> 41:01.200
前面是不是还加个前序

41:01.200 --> 41:02.200
name space 写杠

41:02.200 --> 41:03.200
对吧

41:03.200 --> 41:04.200
所以要加个前序

41:04.200 --> 41:05.200
OK我们这里可以用个

41:05.200 --> 41:06.200
模板支付串嘛

41:06.200 --> 41:08.200
这是属性名

41:08.200 --> 41:10.200
然后前面要加个前序

41:10.200 --> 41:11.200
就是什么

41:11.200 --> 41:12.200
就是name

41:12.200 --> 41:15.200
就是model.name space

41:15.200 --> 41:17.200
然后中间一个写杠

41:17.200 --> 41:18.200
这是我们要匹配的

41:18.200 --> 41:20.200
所有的一个内形

41:20.200 --> 41:21.200
对吧

41:21.200 --> 41:23.200
也就放到这个数组里边了

41:23.200 --> 41:24.200
好放进去过后呢

41:24.200 --> 41:26.200
我们再继续

41:26.200 --> 41:27.200
然后在reducer里边

41:27.200 --> 41:28.200
我们要判断内形

41:28.200 --> 41:30.200
判断内形是什么呢

41:30.200 --> 41:31.200
判断一下

41:31.200 --> 41:33.200
如果说你action的type值

41:33.200 --> 41:35.200
我们这样子

41:35.200 --> 41:37.200
action的type

41:37.200 --> 41:38.200
这个数组里边

41:38.200 --> 41:40.200
包含了action的type值

41:40.200 --> 41:42.200
是不是内形匹配上了

41:42.200 --> 41:44.200
是不是内形匹配上了

41:44.200 --> 41:45.200
是不是要运行

41:45.200 --> 41:48.200
运行对应的函数

41:48.200 --> 41:49.200
对吧

41:49.200 --> 41:50.200
是不是在这里运行

41:50.200 --> 41:51.200
对应的函数

41:51.200 --> 41:52.200
如果说你没有匹配上

41:52.200 --> 41:54.200
如果说你没有匹配上

41:54.200 --> 41:55.200
我们是不是

41:56.200 --> 41:57.200
这就是reducer的写法

41:57.200 --> 41:58.200
也就是干嘛呢

41:58.200 --> 42:00.200
就是在匹配不同的action内形

42:00.200 --> 42:02.200
然后去运行相应的东西

42:02.200 --> 42:04.200
去得到一个新的状态

42:04.200 --> 42:05.200
那么这里呢

42:05.200 --> 42:06.200
由于我们的函数

42:06.200 --> 42:07.200
写到这里边了

42:07.200 --> 42:08.200
对吧

42:08.200 --> 42:09.200
我们去运行这些

42:09.200 --> 42:10.200
运行这些对应的函数

42:10.200 --> 42:11.200
然后呢

42:11.200 --> 42:12.200
来得到新的状态

42:12.200 --> 42:14.200
所以说我们这里

42:14.200 --> 42:15.200
只要能够得到对应的函数

42:15.200 --> 42:17.200
就完成了

42:17.200 --> 42:18.200
funk

42:18.200 --> 42:20.200
得到一个对应的函数

42:20.200 --> 42:21.200
是不是就完成了

42:21.200 --> 42:22.200
就完成了

42:22.200 --> 42:24.200
得到一个函数

42:24.200 --> 42:26.200
那么这个函数得到之后

42:26.200 --> 42:27.200
我们就很简单了

42:27.200 --> 42:28.200
调用这个函数

42:28.200 --> 42:30.200
把state传进去

42:30.200 --> 42:31.200
把action传进去

42:31.200 --> 42:32.200
是不是就完成了

42:32.200 --> 42:33.200
对吧

42:33.200 --> 42:34.200
就完成了

42:34.200 --> 42:35.200
那么关键是怎么来得到

42:35.200 --> 42:36.200
对应的函数呢

42:36.200 --> 42:38.200
怎么来得到对应的函数呢

42:41.200 --> 42:42.200
怎么得到了

42:44.200 --> 42:45.200
那么其实这里

42:45.200 --> 42:47.200
你可以用这种方式

42:47.200 --> 42:49.200
你刚才在加数组的时候

42:49.200 --> 42:50.200
不仅可以加内形

42:50.200 --> 42:52.200
是不是也可以把对应的函数

42:52.200 --> 42:54.200
把函数本身是不是可以加进去

42:54.200 --> 42:55.200
对吧

42:55.200 --> 42:56.200
那么每一个加的时候

42:56.200 --> 42:58.200
每一个就加一个对象

42:58.200 --> 42:59.200
每个加个对象

42:59.200 --> 43:00.200
这个数组里边

43:00.200 --> 43:01.200
它每一个加个对象

43:01.200 --> 43:02.200
type内形

43:02.200 --> 43:03.200
内形是这个

43:03.200 --> 43:05.200
匹配的action内形是这个

43:05.200 --> 43:07.200
那么运行的函数呢

43:07.200 --> 43:08.200
函数是什么呢

43:08.200 --> 43:10.200
运行的reducer函数

43:10.200 --> 43:11.200
是什么呢

43:11.200 --> 43:12.200
就是来自于model

43:12.200 --> 43:13.200
prob

43:13.200 --> 43:15.200
就是del

43:15.200 --> 43:16.200
reducer

43:16.200 --> 43:17.200
prob

43:17.200 --> 43:18.200
对吧

43:18.200 --> 43:19.200
这是匹配的

43:19.200 --> 43:21.200
要匹配的

43:21.200 --> 43:23.200
action内形

43:23.200 --> 43:24.200
这是

43:24.200 --> 43:27.200
要运行的reducer函数

43:27.200 --> 43:28.200
对不对

43:28.200 --> 43:30.200
是不是可以放到对象里边

43:30.200 --> 43:31.200
那么现在这个数组里面

43:31.200 --> 43:32.200
保存的就是一个个的对象

43:32.200 --> 43:34.200
就是一个个的对象

43:34.200 --> 43:35.200
那么这里呢

43:35.200 --> 43:36.200
我们就不能用inclusive

43:36.200 --> 43:38.200
我们要用fand

43:40.200 --> 43:41.200
好看的

43:41.200 --> 43:43.200
我们这样子

43:43.200 --> 43:45.200
用action types

43:45.200 --> 43:47.200
fand

43:47.200 --> 43:48.200
去找

43:48.200 --> 43:49.200
找什么呢

43:49.200 --> 43:52.200
找到那个对象里面的type

43:52.200 --> 43:55.200
应该等于action type

43:55.200 --> 43:56.200
是不是找这么一个

43:56.200 --> 43:58.200
从数组里面去找这么一个对象

43:58.200 --> 43:59.200
对吧

43:59.200 --> 44:01.200
从数组里面去找这么一个对象

44:01.200 --> 44:03.200
就是

44:03.200 --> 44:04.200
type

44:04.200 --> 44:05.200
就是那个

44:05.200 --> 44:07.200
temp

44:07.200 --> 44:09.200
我都不知道命名啥了

44:09.200 --> 44:10.200
总之去找这个对象

44:10.200 --> 44:11.200
它这个对象的内形

44:11.200 --> 44:12.200
就是type属性

44:12.200 --> 44:14.200
应该都应用上action type

44:14.200 --> 44:15.200
好

44:15.200 --> 44:16.200
找到这个对象过后呢

44:16.200 --> 44:18.200
我们来判断一下

44:18.200 --> 44:19.200
这个对象有没有值

44:19.200 --> 44:21.200
如果说这个对象有值的话

44:21.200 --> 44:22.200
是不是找到了

44:22.200 --> 44:24.200
那么内形是匹配的

44:24.200 --> 44:25.200
那么怎么办呢

44:25.200 --> 44:26.200
内形匹配的时候

44:26.200 --> 44:27.200
我们运行啥呢

44:27.200 --> 44:28.200
放可运行啥

44:28.200 --> 44:29.200
是不是运行的是

44:29.200 --> 44:32.580
就是temp

44:32.580 --> 44:33.580
temp

44:33.580 --> 44:34.580
reducer

44:34.580 --> 44:36.580
是不是这样运行的

44:36.580 --> 44:37.580
对吧

44:37.580 --> 44:38.580
没问题吧

44:38.580 --> 44:40.580
甚至我们直接可以在这里写

44:40.580 --> 44:42.580
直接可以在这里写

44:42.580 --> 44:43.580
没问题吧

44:43.580 --> 44:45.580
我们直接这样子写就完成了

44:45.580 --> 44:47.580
就这么个意思

44:47.580 --> 44:49.580
你找到一个内

44:49.580 --> 44:50.580
就通过action的内形

44:50.580 --> 44:52.580
去找从这个数组里面去找

44:52.580 --> 44:53.580
这个数组里面每个都是个对象

44:53.580 --> 44:55.580
对象里面记录了

44:55.580 --> 44:56.580
temp匹配的action内形

44:56.580 --> 44:57.580
以及呢

44:57.580 --> 44:58.580
要运行的reducer

44:58.580 --> 44:59.580
运行的reducer

44:59.580 --> 45:00.580
就是我们自己在这里写的

45:00.580 --> 45:01.580
这个东西

45:01.580 --> 45:02.580
那么也就是我们把

45:02.580 --> 45:03.580
要把这个玩意儿

45:03.580 --> 45:05.580
要把这个玩意儿转换成啥呢

45:05.580 --> 45:07.580
转换成一个数组

45:07.580 --> 45:08.580
一个数组

45:08.580 --> 45:09.580
数组的

45:09.580 --> 45:10.580
每一个数组的就是个对象

45:10.580 --> 45:12.580
type就是什么

45:12.580 --> 45:15.580
counter increase

45:15.580 --> 45:16.580
然后呢

45:16.580 --> 45:17.580
就是对应到了

45:17.580 --> 45:18.580
就是函数呢

45:18.580 --> 45:19.580
就这个函数

45:19.580 --> 45:20.580
就这个函数

45:20.580 --> 45:21.580
就这个函数

45:21.580 --> 45:23.580
就这么个意思

45:23.580 --> 45:24.580
那么这里呢

45:24.580 --> 45:26.580
我们通过这个数组里面去匹配

45:26.580 --> 45:28.580
看一下我们实际闯入哪个行内象

45:28.580 --> 45:30.580
在数组里面能不能找到

45:30.580 --> 45:31.580
对应的对象

45:31.580 --> 45:32.580
如果找到了过后呢

45:32.580 --> 45:34.580
只要不为那我就找到了

45:34.580 --> 45:35.580
找到了之后呢

45:35.580 --> 45:36.580
我们去运行这个函数

45:36.580 --> 45:37.580
这个对象里面的reducer

45:37.580 --> 45:38.580
这个函数

45:38.580 --> 45:41.580
把这个新的状态弹回就完事了

45:41.580 --> 45:42.580
是不是写完了

45:42.580 --> 45:43.580
咱们来看一下

45:43.580 --> 45:44.580
运行看一下

45:46.580 --> 45:47.580
好

45:47.580 --> 45:48.580
那么现在呢

45:48.580 --> 45:50.580
我们这里的counter加进去

45:53.580 --> 45:57.660
我们这为了方便

45:57.660 --> 45:58.660
我们看一下怎么弄

45:58.660 --> 46:00.660
我们把一个窗间的仓库

46:00.660 --> 46:02.660
放到那个就是

46:02.660 --> 46:04.660
放到那个就是温度里边

46:04.660 --> 46:05.660
把窗间的窗库

46:05.660 --> 46:06.660
放到温度里边

46:06.660 --> 46:10.100
这里是store

46:10.100 --> 46:12.100
为了方便测试

46:12.100 --> 46:14.100
放到温度里边

46:14.100 --> 46:17.100
最后翻回store

46:17.100 --> 46:18.100
保存

46:18.100 --> 46:19.100
好

46:19.100 --> 46:21.100
我们这里的store

46:21.100 --> 46:22.100
窗库

46:22.100 --> 46:24.100
然后get state看一下

46:24.100 --> 46:25.100
你看

46:25.100 --> 46:26.100
是不是就已经有了

46:26.100 --> 46:27.100
已经合并进来了

46:27.100 --> 46:28.100
看到没

46:28.100 --> 46:29.100
是不是合并进来了

46:29.100 --> 46:30.100
好

46:30.100 --> 46:31.100
然后呢

46:31.100 --> 46:32.100
我们再看

46:32.100 --> 46:34.100
再看

46:34.100 --> 46:36.100
再看

46:36.100 --> 46:38.100
如果说我们这里调用了

46:38.100 --> 46:40.100
就是store dispatch

46:40.100 --> 46:42.100
一个x型

46:42.100 --> 46:43.100
type

46:43.100 --> 46:44.100
等于什么

46:44.100 --> 46:45.100
counter

46:45.100 --> 46:46.100
鞋杠

46:46.100 --> 46:47.100
increase

46:50.300 --> 46:51.300
调用这个

46:51.300 --> 46:52.300
然后我们再看store

46:52.300 --> 46:53.300
调get state

46:57.000 --> 46:59.000
counter increase

46:59.000 --> 47:00.000
对了

47:00.000 --> 47:01.000
对了

47:02.000 --> 47:04.000
为什么没有得到一个新的值呢

47:04.000 --> 47:05.000
我们这里测试一下

47:05.000 --> 47:06.000
测试一下

47:06.000 --> 47:10.630
我们在这一块打个断点

47:10.630 --> 47:12.630
这块打个断点

47:13.630 --> 47:17.350
第八个

47:17.350 --> 47:18.350
一开始运行

47:18.350 --> 47:19.350
运行

47:19.350 --> 47:20.350
好

47:20.350 --> 47:21.350
来吧

47:22.350 --> 47:23.350
dispatch

47:23.350 --> 47:24.350
运行这个

47:26.350 --> 47:27.350
dispatch过后呢

47:27.350 --> 47:29.350
我们这里

47:29.350 --> 47:31.350
不应该在这里打断点

47:33.350 --> 47:35.350
在reducer里面打断点

47:35.350 --> 47:36.350
来吧

47:36.350 --> 47:38.350
一开始有一个运行

47:39.350 --> 47:40.350
运行

47:40.350 --> 47:41.350
然后呢

47:41.350 --> 47:42.350
我们这里dispatch一个

47:42.350 --> 47:43.350
好

47:43.350 --> 47:44.350
到断点这里

47:44.350 --> 47:45.350
我们看一下怎么回事

47:45.350 --> 47:48.110
好

47:48.110 --> 47:50.110
目前State为你

47:50.110 --> 47:51.110
对吧

47:51.110 --> 47:52.110
目前为State为你

47:52.110 --> 47:53.110
然后呢

47:53.110 --> 47:54.110
还有一个新的

47:54.110 --> 47:55.110
有这个

47:55.110 --> 47:56.110
我们的宿主里边

47:56.110 --> 47:58.110
宿主是空的

47:58.110 --> 48:01.550
宿主是空的

48:01.550 --> 48:02.550
等一下

48:02.550 --> 48:07.210
宿主为什么是空的呢

48:07.210 --> 48:08.210
reducer

48:08.210 --> 48:10.210
我这里写错了吗

48:10.210 --> 48:15.890
reducer

48:15.890 --> 48:16.890
没有写错

48:16.890 --> 48:17.890
没有写错

48:17.890 --> 48:18.890
好

48:18.890 --> 48:19.890
那么一个宿主是空的

48:19.890 --> 48:20.890
那我就要看一下

48:20.890 --> 48:21.890
宿主是怎么建议的了

48:21.890 --> 48:22.890
我们要在这里打断点

48:22.890 --> 48:24.890
看一下宿主是怎么回事

48:24.890 --> 48:30.080
为什么是空的

48:30.080 --> 48:31.080
这个宿主是空的

48:31.080 --> 48:32.080
然后呢

48:32.080 --> 48:33.080
我们运行

48:33.080 --> 48:34.080
运行循环

48:34.080 --> 48:36.080
它没有运行进去

48:36.080 --> 48:38.080
我这里循环的时候写错了

48:38.080 --> 48:39.080
少加个s

48:39.080 --> 48:40.080
少加个s

48:40.080 --> 48:41.080
我说怎么回事

48:41.080 --> 48:42.080
好

48:42.080 --> 48:45.800
保存

48:45.800 --> 48:46.800
好

48:46.800 --> 48:47.800
dispatch

48:47.800 --> 48:48.800
dispatch过后呢

48:48.800 --> 48:49.800
我们再stop

48:49.800 --> 48:51.800
getState

48:51.800 --> 48:52.800
还不行

48:52.800 --> 48:53.800
还要打断点

48:53.800 --> 48:54.800
还要调整

48:54.800 --> 48:56.800
打个地方还写错了

48:56.800 --> 48:58.800
第八个

48:58.800 --> 49:01.800
再打个断点

49:01.800 --> 49:03.800
connards reader

49:03.800 --> 49:06.800
property increase of undefend

49:06.800 --> 49:08.800
他说

49:08.800 --> 49:09.800
在这里

49:09.800 --> 49:11.800
他说这个地方啊

49:11.800 --> 49:12.800
得到的是undefend

49:12.800 --> 49:14.800
他说这个model是undefend

49:14.800 --> 49:20.010
我是这里是不是没传进来啊

49:20.010 --> 49:22.010
我get reducer传进来的呢

49:22.010 --> 49:23.010
传进来的

49:23.010 --> 49:25.010
他为什么说model是undefend呢

49:25.010 --> 49:26.010
保存

49:26.010 --> 49:34.680
他说这个model是undefend

49:34.680 --> 49:37.680
然后我们在这里再打个断点

49:37.680 --> 49:39.680
还是在这里打断点

49:39.680 --> 49:41.680
看一下怎么回事

49:41.680 --> 49:42.680
model

49:42.680 --> 49:43.680
有值啊

49:43.680 --> 49:44.680
他有值啊

49:44.680 --> 49:46.680
你看 reducer是不是传进来了

49:46.680 --> 49:48.680
然后f10啊

49:48.680 --> 49:50.680
到下一个 reducer有没有值有值

49:50.680 --> 49:51.680
然后进入循环

49:51.680 --> 49:52.680
循环过后呢

49:52.680 --> 49:54.680
取他的属性

49:54.680 --> 49:55.680
取他的属性

49:55.680 --> 49:56.680
然后铺起一个

49:56.680 --> 49:58.680
这里爆错了

49:58.680 --> 49:59.680
这里爆错了

49:59.680 --> 50:01.680
然后这里写循环

50:01.680 --> 50:03.680
model.reducer是

50:03.680 --> 50:05.680
然后这里action type

50:05.680 --> 50:07.680
reducermodel

50:07.680 --> 50:08.680
这里又是reducer是

50:08.680 --> 50:10.680
就少写个s

50:10.680 --> 50:12.680
少写个s

50:14.680 --> 50:16.680
好 再来啊

50:16.680 --> 50:18.680
小心

50:18.680 --> 50:20.680
这里又是什么

50:20.680 --> 50:22.680
doller is not undefend

50:22.680 --> 50:24.680
这什么啊

50:24.680 --> 50:27.680
然后我们这里再来

50:27.680 --> 50:28.680
dispatch

50:28.680 --> 50:31.680
store get state

50:31.680 --> 50:33.680
对吧 是不是加进去了

50:33.680 --> 50:35.680
然后再来dispatch

50:35.680 --> 50:37.680
store get state

50:38.680 --> 50:40.680
就运行到reducer了

50:40.680 --> 50:41.680
对不对

50:41.680 --> 50:42.680
这就是搞定了

50:42.680 --> 50:44.680
那么这个基础的结构

50:44.680 --> 50:45.680
是不是搞定了

50:45.680 --> 50:48.680
你看这个基础的结构

50:48.680 --> 50:50.680
好 这里dwa

50:50.680 --> 50:52.680
模型这里

50:52.680 --> 50:53.680
我们现在就能够

50:53.680 --> 50:55.680
已经可以配置模型了

50:55.680 --> 50:56.680
这个东西是不是起作用了

50:56.680 --> 50:57.680
这个state是不是起作用了

50:57.680 --> 50:58.680
reducer是不是起作用了

50:58.680 --> 51:00.680
这些东西都起作用了

51:00.680 --> 51:01.680
对不对

51:01.680 --> 51:02.680
好 那么接下来呢

51:02.680 --> 51:03.680
我们再来看一下

51:03.680 --> 51:05.680
为了后边方便的话

51:05.680 --> 51:06.680
这个东西加上

51:06.680 --> 51:07.680
先把这个玩意加上

51:07.680 --> 51:09.680
就是应用中间键

51:09.680 --> 51:10.680
这个东西加上

51:10.680 --> 51:12.680
应用中间键的话

51:12.680 --> 51:14.680
我们这一块

51:14.680 --> 51:16.680
因为我们这个reducer

51:16.680 --> 51:17.680
这里没起作用对吧

51:17.680 --> 51:18.680
reducer没起作用

51:18.680 --> 51:20.680
就是因为我们没有应用中间键

51:20.680 --> 51:21.680
没有应用中间键

51:21.680 --> 51:22.680
reducer里边

51:22.680 --> 51:23.680
它告诉你呢

51:23.680 --> 51:24.680
你要去安装一个东西

51:24.680 --> 51:25.680
叫reducer deal extension

51:25.680 --> 51:26.680
对吧

51:26.680 --> 51:27.680
要安装这么一个东西

51:27.680 --> 51:28.680
才能应用这个reducer中间键

51:28.680 --> 51:30.680
就是才能应用这个reducer调试

51:30.680 --> 51:31.680
所以我们这里安装一下

51:31.680 --> 51:33.680
刚才忘了安装了

51:33.680 --> 51:34.680
这件事情我们做完了

51:34.680 --> 51:36.680
过后这几颗先休息一会吧

51:36.680 --> 51:37.680
因为这个dbar的代码呢

51:37.680 --> 51:38.680
它比较绕

51:38.680 --> 51:40.680
所以说我们多花几颗的时间来讲

51:40.680 --> 51:42.680
我们安装一下

51:42.680 --> 51:44.680
就按了它输了做就行了

51:44.680 --> 51:45.680
这个非常简单

51:45.680 --> 51:47.680
按了它输了做就行了

51:49.680 --> 51:55.060
好 安装好了

51:55.060 --> 51:57.060
我们再启动起来

51:57.060 --> 51:58.060
我们先步道去启动

51:58.060 --> 51:59.060
我们现在呢

51:59.060 --> 52:01.060
就是在创建仓库之后呢

52:01.060 --> 52:03.060
我们要应用中间键

52:03.060 --> 52:05.060
在这个dbar里边

52:05.060 --> 52:06.060
我们哪里创建仓库的

52:06.060 --> 52:07.060
你看一下

52:07.060 --> 52:08.060
是不是在这里创建仓库的

52:08.060 --> 52:10.060
创建仓库创建好了之后呢

52:10.060 --> 52:11.060
我们要这样子

52:11.060 --> 52:13.060
在创建仓库的时候

52:13.060 --> 52:15.060
我们在创建仓库的时候呢

52:15.060 --> 52:16.060
要应用中间键

52:16.060 --> 52:17.060
那么设备在这里

52:17.060 --> 52:18.060
要写中间键

52:18.060 --> 52:19.060
对吧

52:19.060 --> 52:20.060
要在这里写中间键

52:20.060 --> 52:21.060
好 我们这里呢

52:21.060 --> 52:22.060
又写了这么一个函数

52:22.060 --> 52:25.060
来得到中间键

52:25.060 --> 52:26.060
来得到中间键

52:26.060 --> 52:27.060
好 这里呢

52:27.060 --> 52:29.060
我们写上这么一个函数

52:29.060 --> 52:36.820
getMetalWears

52:36.820 --> 52:37.820
那么我们把这个

52:37.820 --> 52:39.820
这个函数的返回结果

52:39.820 --> 52:40.820
直接放到这

52:40.820 --> 52:42.820
把这个函数的返回结果

52:42.820 --> 52:43.820
直接放到这

52:43.820 --> 52:46.820
getMetalWears

52:46.820 --> 52:48.820
就是关密中间键

52:48.820 --> 52:49.820
关密中间键的函数

52:49.820 --> 52:50.820
全都放到这

52:50.820 --> 52:51.820
好 那么这里边干嘛呢

52:51.820 --> 52:52.820
返回的是什么呢

52:52.820 --> 52:54.820
返回的不就是ApplyMetalWears吗

52:54.820 --> 52:55.820
对不对

52:55.820 --> 52:57.820
返回的就是ApplyMetalWears

52:57.820 --> 52:59.820
ApplyMetalWears

52:59.820 --> 53:00.820
好 那么这里呢

53:00.820 --> 53:01.820
我们要应用中间键

53:01.820 --> 53:03.820
ApplyMetalWears

53:03.820 --> 53:05.820
只不过呢

53:05.820 --> 53:06.820
只不过呢

53:06.820 --> 53:07.820
我们现在要用

53:07.820 --> 53:08.820
应用那个Redux调试

53:08.820 --> 53:10.820
外面是不是要套一个东西

53:10.820 --> 53:11.820
还记得吗

53:11.820 --> 53:12.820
咱们以前在写

53:12.820 --> 53:13.820
Redux调试的时候

53:13.820 --> 53:15.820
外面是不是要套一个东西

53:15.820 --> 53:16.820
套什么东西

53:16.820 --> 53:17.820
是不是要从那个地方

53:17.820 --> 53:18.820
导入进来

53:18.820 --> 53:20.820
要从那个ReduxDevTools

53:20.820 --> 53:21.820
一个tension里边

53:21.820 --> 53:24.820
是要导入一个东西

53:24.820 --> 53:25.820
叫它名字呢

53:25.820 --> 53:27.820
叫做ComposeWithDevTools

53:27.820 --> 53:28.820
对吧

53:28.820 --> 53:29.820
我们把那个

53:29.820 --> 53:31.820
就是中间键这一块呢

53:31.820 --> 53:32.820
全部包起来

53:32.820 --> 53:33.820
对不对

53:33.820 --> 53:34.820
无非就是返回这么一个东西

53:34.820 --> 53:35.820
getMetalWears

53:35.820 --> 53:36.820
当然这个我喊出了

53:36.820 --> 53:37.820
之后呢

53:37.820 --> 53:38.820
还会做一些扩展

53:38.820 --> 53:40.820
咱们先不管

53:40.820 --> 53:41.820
先放到这儿

53:41.820 --> 53:42.820
那么现在就把个

53:42.820 --> 53:44.820
Redux就放进去了

53:44.820 --> 53:45.820
就是调试工具就放进去了

53:45.820 --> 53:47.820
保存其东西

53:47.820 --> 53:49.820
一二

53:49.820 --> 53:50.820
start

53:50.820 --> 53:51.820
看一下吧

53:51.820 --> 53:52.820
那么现在调试工具

53:52.820 --> 53:53.820
就可以用了

53:53.820 --> 53:54.820
我们之后就可以用

53:54.820 --> 53:55.820
Redux来进行调试了

53:56.820 --> 53:57.820
又让我期望

53:57.820 --> 53:59.820
又让我期望

54:00.820 --> 54:06.820
稍等

54:06.820 --> 54:13.490
那么你看

54:13.490 --> 54:14.490
现在Redux是不是可以用了

54:14.490 --> 54:15.490
对不对

54:16.490 --> 54:17.490
没什么

54:17.490 --> 54:23.420
这里我们

54:23.420 --> 54:25.420
Redux调试工具

54:25.420 --> 54:26.420
Redux呢

54:26.420 --> 54:27.420
在这

54:28.420 --> 54:29.420
你看是不是可以用了

54:29.420 --> 54:30.420
对不对

54:30.420 --> 54:31.420
状态这些东西

54:31.420 --> 54:32.420
是不是可以看到了

54:32.420 --> 54:33.420
对吧

54:33.420 --> 54:34.420
其实呢

54:34.420 --> 54:35.420
它的Reducer里边

54:35.420 --> 54:36.420
还有一些东西

54:36.420 --> 54:38.420
还有一些页外的Reducer

54:38.420 --> 54:40.420
还有一些页外的Reducer

54:40.420 --> 54:41.420
因为

54:41.420 --> 54:42.420
页外的Reducer的话

54:42.420 --> 54:43.420
还会合逼进去

54:43.420 --> 54:44.420
因为我们之前也发现了

54:44.420 --> 54:45.420
它里边会写的什么

54:45.420 --> 54:46.420
Rotor

54:46.420 --> 54:48.420
把Rotor放到仓库里边去

54:48.420 --> 54:49.420
还要写一个什么

54:49.420 --> 54:50.420
还要写一个就是那个

54:52.420 --> 54:53.420
还要写一个就是那个

54:53.420 --> 54:54.420
两个A塔D吧

54:54.420 --> 54:55.420
对吧

54:55.420 --> 54:56.420
也要放进去

54:56.420 --> 54:57.420
也要把它放到那个

54:57.420 --> 54:58.420
仓库里边去

54:58.420 --> 54:59.420
所以说呢

54:59.420 --> 55:00.420
我们这里再写个函数

55:00.420 --> 55:02.420
来得到一些页外的Reducer

55:02.420 --> 55:03.420
get

55:03.420 --> 55:04.420
extra

55:04.420 --> 55:05.420
Reducer

55:05.420 --> 55:06.420
Reducers

55:06.420 --> 55:07.420
写这么一个函数

55:07.420 --> 55:08.420
这个函数呢

55:08.420 --> 55:10.420
用于得到一些页外的Reducer

55:10.420 --> 55:11.420
它也会合逼到

55:11.420 --> 55:12.420
跟着Reducer里边去

55:12.420 --> 55:14.420
得到一些

55:14.420 --> 55:17.420
页外的Reducer

55:17.420 --> 55:19.420
会合并到

55:19.420 --> 55:23.420
合并到跟Reducer中去

55:23.420 --> 55:25.420
我们这里先随便写两个吧

55:25.420 --> 55:26.420
直接返回一个对象

55:26.420 --> 55:27.420
这个对象里边

55:27.420 --> 55:28.420
有个Roting

55:28.420 --> 55:29.420
一个Roting

55:29.420 --> 55:31.420
目前的Reducer

55:31.420 --> 55:32.420
是这样子写的

55:32.420 --> 55:33.420
先随便写一个

55:33.420 --> 55:34.420
然后这里Action

55:34.420 --> 55:35.420
先随便写一个

55:35.420 --> 55:37.420
就这么个意思就行了

55:37.420 --> 55:38.420
然后这里呢

55:38.420 --> 55:39.420
默认为Now

55:39.420 --> 55:40.420
默认为Now

55:40.420 --> 55:41.420
其实啥都不做

55:41.420 --> 55:42.420
返回一个State

55:42.420 --> 55:44.420
然后再来一个就是

55:44.420 --> 55:45.420
Diva

55:45.420 --> 55:46.420
Diva

55:46.420 --> 55:47.420
那么这是一个字不错

55:47.420 --> 55:48.420
Ata

55:48.420 --> 55:49.420
Diva

55:49.420 --> 55:51.420
它也是一个函数

55:51.420 --> 55:53.420
我干嘛要这样子写呢

55:53.420 --> 55:54.420
疯了吧

55:54.420 --> 55:56.420
直接这样子写就完了

55:56.420 --> 55:57.420
State

55:57.420 --> 55:59.420
它是一个技术的

55:59.420 --> 56:00.420
我们写也不管它

56:00.420 --> 56:01.420
不管它

56:01.420 --> 56:02.420
这个玩意

56:02.420 --> 56:03.420
一没啥关系

56:03.420 --> 56:05.420
返回就行了

56:05.420 --> 56:06.420
有什么

56:07.420 --> 56:09.420
没有必要去返回

56:09.420 --> 56:10.420
这么一个数

56:10.420 --> 56:11.420
啥没有必要

56:11.420 --> 56:13.420
有这个必要的

56:13.420 --> 56:15.420
No on this

56:15.420 --> 56:16.420
Completity

56:16.420 --> 56:17.420
把这个去掉

56:17.420 --> 56:19.420
把这一行去掉

56:19.420 --> 56:21.420
把这个去掉就行了

56:21.420 --> 56:26.590
这里打个都市

56:26.590 --> 56:27.590
Yes Nint

56:27.590 --> 56:28.590
Disable

56:28.590 --> 56:32.250
去掉

56:32.250 --> 56:34.250
去掉这个警告

56:34.250 --> 56:35.250
就完了

56:35.250 --> 56:36.250
就完了

56:36.250 --> 56:37.250
那么这个Gate X

56:37.250 --> 56:38.250
Reducer

56:38.250 --> 56:39.250
它返回的就是这么一个对象

56:39.250 --> 56:40.250
返回的就是这么一个对象

56:40.250 --> 56:42.250
它提供了一些额外的Reducer

56:42.250 --> 56:43.250
那么这个对象里边

56:43.250 --> 56:45.250
我们除了把自己的东西

56:45.250 --> 56:46.250
加进去之外

56:46.250 --> 56:48.250
是不是还要加一些额外的Reducer

56:48.250 --> 56:49.250
对吧

56:49.250 --> 56:50.250
也加进去

56:50.250 --> 56:51.250
那么我们这里

56:51.250 --> 56:53.250
这里是用Net

56:53.250 --> 56:54.250
Net

56:55.250 --> 56:56.250
混合一下

56:56.250 --> 56:57.250
混合一下

56:57.250 --> 56:59.250
入程Reducer OBG

56:59.250 --> 57:00.250
混合一下

57:00.250 --> 57:03.250
就是展开原来的入程Reducer OBG

57:03.250 --> 57:05.250
再展开我们Gate

57:05.250 --> 57:07.250
Extra Reducer这个对象

57:07.250 --> 57:08.250
展开

57:08.250 --> 57:09.250
两个展开

57:09.250 --> 57:10.250
混合

57:10.250 --> 57:11.250
是不是得了一个新的对象

57:11.250 --> 57:12.250
保存

57:12.250 --> 57:13.250
一看一下

57:13.250 --> 57:14.250
那么现在是不是有了

57:14.250 --> 57:15.250
有了

57:15.250 --> 57:16.250
我们这里

57:16.250 --> 57:17.250
点击

57:17.250 --> 57:18.250
为什么老师

57:18.250 --> 57:19.250
我跑下面去了

57:19.250 --> 57:20.250
这有点烦

57:21.250 --> 57:22.250
你看

57:22.250 --> 57:23.250
现在我们状态里边

57:23.250 --> 57:24.250
你看是不是都有了

57:24.250 --> 57:25.250
对不对

57:25.250 --> 57:26.250
柔挺脑

57:26.250 --> 57:27.250
都有了

57:28.250 --> 57:29.250
没问题了吧

57:29.250 --> 57:30.250
那么这里可能先到这儿

57:30.250 --> 57:31.250
先到这儿

57:31.250 --> 57:32.250
缓一缓

57:32.250 --> 57:33.250
缓一缓

57:33.250 --> 57:34.250
大家拿下来

57:34.250 --> 57:36.250
如果你记得你在听原码的话

57:36.250 --> 57:38.250
你肯定是有这个意愿学习

57:38.250 --> 57:39.250
原码的

57:39.250 --> 57:40.250
原码部分肯定是比较难的

57:40.250 --> 57:42.250
大家下来自己去写一下

57:42.250 --> 57:43.250
自己去写一下

57:43.250 --> 57:44.250
把这个结构先写出来

57:45.250 --> 57:46.250
你看我们这个结构

57:46.250 --> 57:47.250
其实分得很细的

57:47.250 --> 57:48.250
虽然说只有一个函数

57:48.250 --> 57:49.250
那么其实我们分得很细的

57:49.250 --> 57:51.250
我们最终的运行的是start

57:51.250 --> 57:53.250
你看start里边掉了什么

57:53.250 --> 57:54.250
就是得到一个仓库

57:54.250 --> 57:56.250
然后运行render

57:56.250 --> 57:58.250
render就是把渲染出来

57:58.250 --> 57:59.250
他为什么需要仓库

57:59.250 --> 58:00.250
render为什么需要仓库

58:00.250 --> 58:01.250
因为他要提供

58:01.250 --> 58:02.250
render这个函数

58:02.250 --> 58:04.250
他要提供provider组件

58:04.250 --> 58:06.250
provider组件里边需要仓库

58:06.250 --> 58:07.250
那么仓库哪来呢

58:07.250 --> 58:08.250
我们又写个函数来得到仓库

58:08.250 --> 58:09.250
那么得到仓库的过程中

58:09.250 --> 58:10.250
遇到很多问题

58:10.250 --> 58:11.250
比方说reducer

58:11.250 --> 58:12.250
我们怎么处理

58:12.250 --> 58:14.250
怎么来

58:14.250 --> 58:16.250
怎么来就是得到一些

58:16.250 --> 58:17.250
额外的reducer

58:17.250 --> 58:18.250
我们都写了相应的函数

58:18.250 --> 58:19.250
来进行操作

58:19.250 --> 58:20.250
对吧

58:20.250 --> 58:22.250
那么大家先把它写一下

58:22.250 --> 58:23.250
结构先写一下

58:23.250 --> 58:25.250
体会一下这个过程

58:25.250 --> 58:26.250
那么这里就不要了

58:26.250 --> 58:28.250
window.store就不要了

58:28.250 --> 58:30.250
所以没什么意义了

58:30.250 --> 58:32.250
好都是这一颗的东西

