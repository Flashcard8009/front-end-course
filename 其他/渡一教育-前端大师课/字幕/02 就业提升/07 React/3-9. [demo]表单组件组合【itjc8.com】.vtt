WEBVTT

00:01.710 --> 00:08.470
这节课咱们利用那个 上下文来做这么一个练习啊 体会一下

00:09.350 --> 00:12.790
上下文在我们实际开发中会有什么样的应用

00:13.830 --> 00:21.750
通常情况下呢 我们如果直接去使用别人写好的组件的话 我们一般是不太会用到上下文的

00:22.590 --> 00:27.390
上下文的一般出现的情况呢 是在我们自己去开发一些组件

00:28.350 --> 00:33.230
就自己去开发一些通用的组件的时候 可能会用到上下文

00:34.030 --> 00:39.310
什么情况呢 就这么一种情况啊 咱先给他几个笔记嘛 说一下啊

00:41.490 --> 00:51.490
就是上下文的应用场景 就通常情况下 我们这种情况会用到上下文 就是我们要编写一套组件

00:53.010 --> 00:57.890
编写一套组件 最是一套组件 而不是一个组件

00:58.610 --> 01:04.010
这些组件呢 这一套组件里面可能会包含多个组件啊 有多个组件

01:05.410 --> 01:12.530
这些组件之间 需要相互配合才能最终完成功能

01:13.370 --> 01:19.010
那么面对这种情况下呢 你会发现有了上下文 很多问题就好解决了

01:19.370 --> 01:22.770
没有上下文的话 这个很麻烦了 这个问题很难解决的

01:23.650 --> 01:26.770
什么情况呢 给大家举个具体的例子啊 就比如

01:28.130 --> 01:35.570
我们要开发一套表单组件 注意是一套表单组件 使用方式如下

01:37.170 --> 01:39.250
怎么来使用呢 大概是这样子使用的

01:41.490 --> 01:46.690
嗯 这套表单组件呢 我们在宣传的时候呢 我们可能会用这种方式来宣传啊 比方说在Render函数里面

01:47.490 --> 01:52.290
Render函数里面 我们在使用这套表单组件吧 好 返回的时候呢 我们这样子返回

01:53.250 --> 01:58.930
啊 是这样子的啊 缝 就是我们的表单组件啊 缝 表单组件

01:59.730 --> 02:07.330
好 组件里边呢 表示我们表单 对吧 整个表单 表单里边呢 有可能有很多DIV 就是我想这么嵌套就怎么嵌套啊 无所谓

02:07.970 --> 02:11.490
我想这么嵌套就怎么嵌套啊 DIV里边可能还有P元是无所谓

02:12.050 --> 02:19.890
好 在表 这个这个组件里边呢 可能还有这么一些组件 如果你学过VU的话 应该非常非常清楚啊 我这里要干嘛 比方说input组件

02:20.850 --> 02:26.290
这个组件呢 是里边放的是什么呢 放的是文门框 对吧 表示这里是文门框

02:27.410 --> 02:32.610
然后呢 比方说啊 前面还可能有什么label啊 什么请输入账号啊 之类啊 随便你 无所谓

02:33.250 --> 02:38.370
啊 这里有一个文变框啊 这里是账号 我们可能会这样子使用 这是这里是密码

02:39.730 --> 02:43.810
啊 那么这里呢 可能可以给他一个Type嘛 啊 TypeWave嘛 Password

02:44.770 --> 02:45.570
啊 Password

02:46.610 --> 02:53.250
行了啊 那么账号密码啊 当然还有可能什么Name属性 对吧 还有Name属性要给啊 就是login id

02:54.050 --> 02:54.930
啊 这里是login

02:56.850 --> 03:05.250
这里是login password啊 这是我们自己写的input的组件啊 然后呢 下面呢 又有一个组件 也是我们自己给他写好的组件

03:05.730 --> 03:10.450
这个组件的名字叫做按钮啊 是一个按钮 就是提交按钮 for

03:10.850 --> 03:17.650
啊 当然我这里这一课呢 肯定不会写那么多样式啊 就是把它功能完成就行了啊 for 点

03:18.690 --> 03:27.810
啊 这种写法呢 应该在那个vue里面 你们应该见过啊 就这种写法 你看啊 这里我们先把文变写好啊 提交啊 提交

03:29.730 --> 03:34.050
然后呢 我们这里呢 这个for 啊 这个for 我们可以

03:34.930 --> 03:38.450
写上这么一个视线啊 写上这么一个视线 叫做on submet

03:39.170 --> 03:44.690
on submet 就是我们啊 就是当我们提交的时候啊 当我们提交的时候

03:45.410 --> 03:51.650
的事件 好 这个事件里边呢 我们可以通过这个事件里边的一个参数啊 什么参数呢 叫做

03:52.690 --> 03:56.050
data 是吗 啊 data 是 我们可以获取

03:57.570 --> 04:02.770
当前表单里边的所有数据啊 这是获取表单中的所有数据

04:05.010 --> 04:06.610
所有数据啊 是一个对象

04:07.330 --> 04:16.530
啊 比如你获取的结果应该是这个样子啊 你获取的结果应该是这个样子 啊 一个对象嘛啊 对象里边是吗 log in id

04:17.090 --> 04:23.170
vsa 然后login password 的vsa 这就是你 这就是你通过这个参数获取的结果

04:24.130 --> 04:30.690
那么你想一想 如果我们将来做出来这么一套组件的话 用起来表单是不是就很方便了 大家回忆一下啊 咱们

04:31.010 --> 04:38.450
在讲那个基础部分的时候 表单那一块是不是最麻烦的 对不对啊 好麻烦要搞的什么要搞 给他受控

04:38.850 --> 04:46.210
因为受控之后呢 我们才能知道 随时的 时时的拿到他的数据 对吧 非常非常麻烦 那么现在不用不用你去写这些东西了

04:46.610 --> 04:53.010
啊 不用你去写了 我们到时候呢提交过后 直接获取到整个数据 这才是我们经常需要的东西

04:53.490 --> 04:57.890
当然我这里面涉及到什么验证的东西啊 都没有设计 我们只是要完成这么一个功能

04:58.850 --> 05:02.370
那么你看一下 这里面有几个组件我们要开发 一个是form组件

05:02.850 --> 05:05.970
一个是什么input组件 一个是button组件 对吧

05:07.010 --> 05:17.090
我们现在我们有这么四个三个form input button 有这么三个组件要开发 这三个组件有没有关系啊 它们是有关系的

05:18.370 --> 05:22.850
比方是这个input组件 它里边的数据是不是要高速这个form

05:23.330 --> 05:26.610
组件 不然的话 它到时候这个触发这个事件的时候 数据从哪来呢

05:27.090 --> 05:31.650
这个login id的数据 这个数据是不是在这里边 对吧 是在这个文门框里边

05:32.370 --> 05:38.050
那么这个文门框的数据改变之后 如果我不通知这个form组件的话 那么它的数据从哪来呢

05:39.330 --> 05:44.370
比方这个password的这个组件 那么这个组件 如果我不通知这个form组件的话 那么它的数据从哪来了

05:45.010 --> 05:50.770
所以拿不到这个数据了 对吧 当我们点击按钮的时候啊 当我们点击这个按钮的时候

05:51.010 --> 05:58.130
如果说 我不去通知这个form组件 我他怎么知道要触发这个事件呢 他怎么要知道触发这个昂沙布米车事件

05:59.410 --> 06:01.330
这就涉及到这些一套组件

06:02.370 --> 06:05.330
他们之间的相互交互 他们之间是有数据交互的

06:05.810 --> 06:11.660
于是我们画个图出来的话 就会形成这么一张图啊 这些东西就不画了啊

06:13.180 --> 06:14.140
就会形成这么一张图

06:15.100 --> 06:18.860
呃 复制一下吧 这里 就是我们一个form组件

06:19.500 --> 06:27.580
这个组件下边呢 他不一定是直组件啊 你要注意啊 他不一定是直组件 你看这个form组件 他直组件是div对吧 div里边还套这个

06:27.820 --> 06:31.020
甚至里边还可能套 怎么批员书啊 你乱七八糟都可能套进去

06:31.420 --> 06:32.620
对吧 都有可能套进去

06:33.100 --> 06:37.900
所以说呢 他不一定是直组件的关系 中间不知道隔了多少层啊 不知道隔了多少层

06:38.460 --> 06:45.580
那么这里是什么formform input组件 我只能我只能确定是什么form组件里边有一个后代组件

06:45.900 --> 06:48.380
就是form input 还有一个后代组件什么

06:49.660 --> 06:55.900
button啊 我就写这两个就行了啊 给大家打开一个思路 以后如果大家做组件 做一些通用的套件的时候

06:56.380 --> 06:58.140
遇到这样的问题的话 该怎么来解决

06:58.780 --> 07:00.860
那么他们之间是要有数据交互的

07:01.740 --> 07:06.060
是要有出举通信的 那么这个时候怎么办呢 这个时候就可以利用上下文了

07:07.100 --> 07:13.180
我们form组件里边 他就有使用一个上下文啊 就使用一个provider啊 一个上下文

07:14.140 --> 07:16.300
来提供数据 来提供数据

07:18.220 --> 07:20.460
他来创建这么一个上下文 来提供数据

07:23.260 --> 07:27.740
然后呢 这个上下文里边 中间不知道经过多少层东西啊 不知道经过多少层东西

07:28.780 --> 07:33.340
但是最终呢 会到这儿 因为他们都是不是处于同一个上下文的

07:33.660 --> 07:37.900
对吧 他们最终都是处于同一个上下文的啊 中间不知道经过哪些东西

07:38.860 --> 07:46.060
不知道 中间经过的东西我们是不知道的 中间有没有组件 不知道 中间那些组件肯定不会

07:46.380 --> 07:50.380
你要想啊 中间那些组件会给你传什么参数啊 事件过来吗 你想都不要想

07:51.500 --> 07:56.380
那他觉得那这样子用起来太麻烦了啊 什么那些事情你应该自行搞定

07:57.180 --> 08:03.020
那么就形成了这么一个东西 那么这个东西里边呢 我们怎么来处理呢 其实要做的事情很简单 我们就给他提供一个上下文

08:03.900 --> 08:11.980
有这个provider给他提供这么一个上下文 这个上下文里边有这么一些数据啊 有些数据 然后呢来提供给你们给你们交互

08:12.380 --> 08:13.500
让你们去进行共享

08:14.620 --> 08:18.060
什么数据呢 我们比方说我们就提供这么一个数据啊 就是formdata

08:19.260 --> 08:22.620
formdata这个数据 他是个对象 他是这么一个空对象

08:23.180 --> 08:29.580
有一个formdata这个数据 这个data那个数据里边呢 就有各种各样的属性了 那就取决一什么 取决你你要去怎么

08:29.900 --> 08:34.220
这些植入件里边 后代组件里边怎么去操作这个数据了啊 i怎么操作就怎么操作

08:35.340 --> 08:38.860
对吧 好 咱们就写成这么一种结构 比方说我们要做一个

08:39.500 --> 08:42.380
一套通用的表达组件出来 我们就可以写成

08:43.100 --> 08:43.740
这么一种结构

08:44.860 --> 08:46.300
好 咱们来写啊 来写一下

08:48.220 --> 08:52.860
嗯 找到这里啊 src common 啊 common下面呢 我们这里又见 新建个文件夹

08:53.420 --> 08:53.660
form

08:54.380 --> 08:57.500
好 这里边呢 我们新建个文件啊 index 这样介绍

08:58.300 --> 09:02.140
啊 rcc 啊这里是一个form 这是我们的form组件

09:03.100 --> 09:08.220
好 form组件里边呢 我们先不用去写别的东西啊 先把这个这个东西创建好

09:08.220 --> 09:14.220
这个都是东西是什么 是不是上下文 对吧 他要提供一些共享的数据 提供给他的后代组件使用

09:14.220 --> 09:17.340
我们先把这个上下文创建好 好 上下文呢 为了

09:17.340 --> 09:21.660
呃 其他组件 因为其他组件也会用到这个上下文 对吧 这些组件是不要用的

09:21.740 --> 09:27.100
这些组件是不要用的 对不对 要用到这个上下文 因为不用的话 怎么从里边取数据呢

09:27.500 --> 09:32.140
因此呢 我这里呢 就把这个上下文呢 写成单独一个文件啊 写成单独一个文件

09:33.020 --> 09:36.220
就写成叫做form啊form context

09:37.420 --> 09:40.300
好 那么这个文件是文件的很简 要做的事情很简单

09:41.260 --> 09:45.180
就是导出啊 导出这个上下文的对象啊 export

09:45.820 --> 09:48.700
default啊 导出什么呢 导出这个上下文的对象

09:49.420 --> 09:51.020
啊 导出什么啊 这里啊

09:51.740 --> 09:56.940
import啊 外面的悄悄导达啊 大家不用管啊 我这个东西我也控制不了

09:59.360 --> 10:06.800
呃rex craze context啊 创建个上下文 创建一个表单上下文啊 这就是一个表单上下文

10:07.840 --> 10:11.440
就完了啊 就完了 没啥了 就导出一个对象就完事了

10:12.000 --> 10:16.800
呃 无非呢 就是说你如果为了让外边用者方便的话 你可以

10:17.280 --> 10:21.520
再单独导出一个pervider啊 把那个属 两个属性分开导出

10:22.000 --> 10:27.040
啊 就看 就随便你啊 这个东西就随便你了啊 那如果要分开导出的话 就可以这样子嘛

10:27.760 --> 10:30.160
你先把这个对象拿到啊 CTX拿到

10:30.720 --> 10:34.800
然后呢 再单独导出啊 单独导出这个什么 provider 对吧

10:35.680 --> 10:42.000
然后来自于这个 provider 对吧 把它分开导出啊 分开导出 甚至说你就导出一个

10:43.120 --> 10:48.720
呃 这样子嘛 你把解构了导出啊 解构了导出 provider 什么

10:49.680 --> 10:56.800
呃 扛羞梦啊 扛羞梦啊 把这个地方解构啊 解构了导出

10:57.360 --> 11:03.140
哎 不能这样子嘛 这样子呢 扛

11:05.140 --> 11:11.220
啊 这样子 把解构了导出对吧 这样子是不是也可以对不对啊 总之随便你啊 这个随便你

11:11.620 --> 11:13.780
看你怎么去玩这个事啊

11:14.740 --> 11:20.740
好 那么这样子写了过后啊 这样子写了过后啊 这里啊 这里就不能重新创建了啊 这样子

11:21.860 --> 11:28.100
好 那么我们这边就是不是可以用这个上下文对象了啊 那么就可以用同一个上下文对象了

11:28.660 --> 11:34.180
好 那么到这边啊 到这里啊 这个主键里边 我们就可以把这个上下文对象导入进来

11:34.660 --> 11:39.380
啊 我们这里用解构嘛 也不知道解构了啊 就是分开导入啊 使用这个

11:40.100 --> 11:42.580
form context 把导入进来 provider

11:43.460 --> 11:47.540
好 那这里边是不是可以用了 对不对 好 provider 就可以用这个上下文了

11:50.500 --> 11:53.060
注意啊 我们一起 始终要记住啊 我们现在要做什么

11:53.220 --> 11:56.740
要做的目标是这个 我们要在form里边创建一个上下文

11:57.700 --> 12:02.020
这里边使用一个上下文 提供者 提供程序 然后呢给他注入一些数据

12:02.820 --> 12:04.260
好 那么这里边要写数据

12:04.980 --> 12:09.780
value 那么这个数据哪来的呢 我们可以就让它来自于我们的状态

12:11.140 --> 12:14.260
啊 就可以让它来自于我们的状态 state

12:15.220 --> 12:18.020
好 这里我们直接得到啊 this state

12:18.820 --> 12:23.060
直接来自于我们的状态 状态里面跟我们提供哪些东西呢 一个是form data

12:23.220 --> 12:26.340
我们目前能想到的就是个form data 对吧 这个表示的是什么

12:26.900 --> 12:33.220
表单数据对象啊 当然这个数据对象呢也可以把这个默认值呢 写到这

12:33.780 --> 12:38.420
写到这个函数里边 作为函数 无所谓吧 因为我们现在状态里边本身就有默认值

12:38.820 --> 12:41.540
OK 我们就就就用状态里边的东西 表单数据对象

12:42.580 --> 12:47.380
那么这个对象是不是共享的 它把它把它放到上下文了 那么上下文里边是有这个属性

12:47.380 --> 12:52.900
它是不是共享了 整个后来元素是所有后来元素的共享这个数据了 对不对

12:53.860 --> 12:59.780
那么以后了 这些后代元素是不是 比方说这个input元素啊 这个input出现 到时候呢 它要改变这个数据

13:00.100 --> 13:04.660
它把让这个数据呢发生更改 那怎么来更改呢 怎么来更改这个数据呢

13:05.700 --> 13:10.900
你是不是我们之前学习过 根据我们上级课的知识 那么这里呢 是不是要给他一个函数 对吧

13:11.380 --> 13:17.060
要给他一个函数 他才能更改吗 不然的话 他怎么去更改这个数据呢 他到时候要调用这个函数来更改

13:17.700 --> 13:20.820
好 那么我们这里呢 写这么一个函数啊 1000g form data

13:21.780 --> 13:25.300
好 写这么个函数 好 什么这个函数的值呢

13:26.100 --> 13:31.620
啊 这个函数的就是一个参数呢啊 参数参数要告诉我属性的名字

13:32.020 --> 13:38.580
一往这里边改哪个属性 他是个对象吧 对吧 到时候呢 我们看刚才的笔记啊 我们到时候得到这么一个对象啊

13:38.580 --> 13:44.420
login id啊 因为他的name属性是login id 总之你把这个名字告诉我 属性名字告诉我 属性的值告诉我

13:44.740 --> 13:51.140
然后我来帮你改就完事了啊 告诉我属性名 告诉我属性值 剩下的事情交给我 我来帮你改

13:51.780 --> 13:55.860
那么改的时候怎么改呢 是不是 this state 对吧 改啥

13:56.660 --> 14:03.140
改啥 是不是改这个form data 对吧 要重新去给这个form data复制啊 要改这个form data

14:03.780 --> 14:09.060
这个form data怎么来复制呢 你不能把全部属性改完啊 他只能只改这个属性

14:09.380 --> 14:15.300
所以说之前的form data 是不是要原封不动的拿过来 对吧 之前的form data 这种写法你得挥写啊

14:16.580 --> 14:23.620
这是设置状态 给他一个 给他这个属性重新复制 复制为一个新的对象 这个新的对象里边

14:24.260 --> 14:33.700
那么我先把他之前的属性 比方他之前有什么a啊 b啊这些属性 是吧 把保留下来啊 把之前的属性 form data的属性保留下来

14:34.100 --> 14:39.860
展开 然后再给他重新覆盖一个属性 属性的名字是不是name 我们用属性表拉式

14:40.420 --> 14:44.420
属性的名字是name 属性的指呢 是吧 要能看得懂啊 这个代码

14:45.540 --> 14:51.540
这个代码很重要的 后面我们不止一次会这样子写 你看啊 我们给重新给这个状态复制

14:52.020 --> 14:57.060
主要是覆盖这个 主要是覆盖这个字 这个字我们肯定不会覆盖掉 对吧 主要是覆盖这个字

14:57.380 --> 14:59.860
这个字呢 给他覆盖掉什么 覆盖成一个新的对象

15:00.420 --> 15:06.580
那么要保留之前的属性 所以我把之前的属性展开 然后给他覆盖的属性写到这 啊 这是属性的名字

15:06.900 --> 15:13.140
变量来自于参数 把参数的值呢 作为属性的名字 这是属性表拉式 这是属性的 嗯 属性的值

15:14.420 --> 15:19.220
好 那么我们提供了这个函数过后了 到时候他只要把属性的名字传过来 属性的值传过来

15:19.220 --> 15:22.420
ok 我们就重新设置状态 把这个属性改变一下

15:23.380 --> 15:33.140
好 对吧 那么打个注是啊 这里是修改 form data 中的数据 当然如果你没有这个数据的话 它自然而然就是新增了 对吧

15:34.100 --> 15:37.780
啊 现在话不多说啊 咱们先来订习啊 看一下要不要报错啊

15:38.420 --> 15:42.020
啊 我们这里呢 写上这么一个test文件嘛 test.js

15:42.820 --> 15:47.060
呃 在app里边去用一下啊 import test from

15:47.700 --> 15:51.540
第二写缸 complements command form

15:51.540 --> 15:55.140
那写缸 test啊 这里呢 test

15:59.500 --> 16:06.380
啊 这个test里面是一个内组件啊 内组件里面他用的什么表单组件啊 form from

16:08.300 --> 16:08.860
index

16:10.140 --> 16:16.380
啊 要用这个组件啊 这里呢把 form放进来 好 看一下先不看一下要不要报错啊 报错啊

16:18.670 --> 16:21.790
啊 没有报错啊 没有报错 你看组件结构是不是出来了 对吧

16:22.590 --> 16:24.030
provide 你看是不是出来了

16:25.150 --> 16:32.670
哎 咱们就先 先把这一块就做好了 对吧 把这一块就这一块就这一块 是不是做好了 这两个

16:33.630 --> 16:36.670
好 那么接下来呢 是这个组件啊 form input 的这个组件

16:37.070 --> 16:43.390
这个组件呢 我们单独来写个文件啊 单独来写个文件 然后说给他写个 input 点解释啊 写这么一个文件

16:43.710 --> 16:45.550
那么他也是个内组件啊 cc

16:46.590 --> 16:51.390
啊 input 的这个组件 那么到时候呢 我们就这样子来操作啊 因为我们将来要用的时候呢

16:52.030 --> 16:56.910
为了方便呢 我们是把它写到 form 里面的 对吧 form 点 input 在这里面使用的

16:57.470 --> 17:02.270
那么我们可以这样子来玩呗 这种玩法就跟就是介绍的玩法了啊 就有什么

17:03.230 --> 17:03.630
有什么

17:05.230 --> 17:09.950
金牙等等 给他给这个函数什么加一个静态属性 对吧 静态属性等于啥

17:10.750 --> 17:17.310
导进来呗 input from 啊 第二什么 input 对吧 把个 input 给他对不对

17:17.790 --> 17:20.910
甚至呢 我们这里名字呢还可以改一下 改成 form input

17:22.190 --> 17:24.750
这里改一下 改成 form input

17:25.870 --> 17:29.550
好 那么这边啊 改成 form input form input

17:30.270 --> 17:34.270
啊 这样子是不完了 对不对 那么到时候用这个组件是不是这样 这样来的可以得到

17:34.270 --> 17:37.310
你得到这个 form 也自然而然的得到到这个组件了

17:38.270 --> 17:41.870
啊 这些都是非常容易玩出来的花样啊 没什么特别的

17:42.670 --> 17:45.310
啊 那么这里 关键是在这里 我们

17:45.870 --> 17:51.070
这里最终是不是一个文本框 对吧 它最终就是一个文本框嘛 要宣传的 这个没什么好说的啊

17:51.390 --> 17:54.670
那么它有什么样的属性呢 我们可以看到 刚才在笔记里边呢

17:55.150 --> 17:59.950
它可能有个 name 属性 要有个什么 type 属性 对吧 name 属性和 type 属性

18:00.190 --> 18:03.150
所以说呢 你有两个属性要给我 两个属性要给我

18:03.630 --> 18:06.750
咱们呢 用用之前的指示啊 给他写下约束

18:07.870 --> 18:11.710
prob types from prob types

18:13.150 --> 18:17.550
啊 那么这里呢 我们给他写上啊 一个静态的prob types

18:18.350 --> 18:22.190
有哪些属性呢 有个 name 属性你要给我 什么类型呢 prob types

18:23.710 --> 18:27.150
啊 就是一个字幕创类型啊 is required 你必须要给我

18:27.870 --> 18:28.430
啊 这是一个

18:29.390 --> 18:33.550
另外一个呢 就是说 你还要给我一个什么呢 还要给我一个就是 type 属性

18:34.110 --> 18:37.630
type 属性的话 types也是一个字幕创类型 is required

18:38.430 --> 18:44.750
啊 这两个属性给我啊 这个是文本框的名称啊 它推进到属性名

18:45.070 --> 18:50.590
这个呢 是文本框的类型 你这两个东西都要给我 当然那我可以给他写个默认值嘛

18:51.470 --> 18:52.830
default props

18:53.390 --> 18:57.310
默认值的话 name 我就没法给默认值的啊 我给他啥默认值都不合适

18:57.630 --> 19:00.990
type呢 我可以给他一个默认值 默认值的话又是 text

19:01.710 --> 19:02.590
没问题吧

19:03.070 --> 19:07.150
那么这里的type是不是来自于这个属性 this props type

19:07.790 --> 19:08.910
通过属性给我的

19:10.990 --> 19:12.990
现在呢 我要把它变成一个受控组件

19:13.310 --> 19:15.870
那么比方说 我们到时候在test里边用的时候 你看啊

19:16.110 --> 19:17.950
我们这里不是一个form嘛 对不对

19:18.190 --> 19:20.750
form里边呢 我就随便 随便砸写啊

19:20.990 --> 19:24.430
我们就可以利用啊 得到什么form里边的什么 input 对吧

19:24.750 --> 19:29.390
得到这个 没问题吧 得到这个 当然可以字结束嘛

19:30.110 --> 19:32.990
那么可以给他type属性 比方说type为password

19:33.550 --> 19:34.270
password

19:34.750 --> 19:37.870
这里就直接写 我们把个笔记里边粘过来呗

19:38.670 --> 19:40.030
就把这个笔记里边粘过来

19:42.480 --> 19:44.320
好 这样子 没问题吧

19:44.960 --> 19:46.160
哎 这样子没问题吧

19:47.280 --> 19:49.440
把type属性给它写上 password

19:49.840 --> 19:52.480
好 那么到时候呢 我就希望你渲染出来正确的结果

19:53.200 --> 19:55.280
保存看一下吧 目前渲染出来

19:56.240 --> 19:58.080
你看 啥啥都没有

19:58.560 --> 20:01.120
看一下啊 怎么会什么都没有呢

20:04.400 --> 20:06.000
哦 我这里 我看一下啊

20:06.640 --> 20:08.000
哦 我明白了 我明白了

20:08.320 --> 20:09.840
为什么现在 现在为什么啥都没有

20:10.160 --> 20:11.520
你现在呢 到时把这个

20:12.400 --> 20:15.200
input就是给他传了一个什么ctr

20:15.200 --> 20:16.480
对吧 给他传了一个ctr

20:16.480 --> 20:18.000
ctr里面倒是写了一些东西

20:18.480 --> 20:19.520
啊 倒是写了一些东西

20:20.160 --> 20:21.360
这是该传的ctr嘛

20:21.760 --> 20:24.320
但是呢 我这边 在这个组件里边

20:25.040 --> 20:26.480
我有没有用到这个ctr准的

20:27.360 --> 20:29.440
有没有用到 是不是没有用到啊

20:30.400 --> 20:31.920
啊 我们外面可以再套个div嘛

20:31.920 --> 20:33.680
这些都无所谓啊 这些都不是重点

20:36.080 --> 20:38.320
那么你现在可以看 有这个div出来了啊

20:38.320 --> 20:39.440
这个div肯定是出来了

20:40.880 --> 20:42.080
啊 你看这个div 是吧

20:42.080 --> 20:43.040
是不是出来了 对吧

20:43.840 --> 20:46.640
啊 里边有什么form这个div啊

20:46.640 --> 20:48.080
这个div里边有一个什么

20:48.640 --> 20:49.840
sanghaven provider啊

20:49.840 --> 20:52.320
sanghaven这个生产 就是生产者

20:52.880 --> 20:53.680
就提供者

20:54.480 --> 20:55.760
但是它里边没东西啊

20:56.320 --> 20:57.440
啊 它里边没东西啊

20:57.840 --> 20:59.440
它里边东西来自于哪呢

20:59.440 --> 21:00.720
我们现在怎么来调用呢

21:00.720 --> 21:01.200
你看一下

21:01.200 --> 21:02.560
task怎么来用的

21:02.560 --> 21:03.440
是不是把这些东西

21:03.440 --> 21:05.360
作为ctr属性给它传过去了

21:05.360 --> 21:05.840
对吧

21:05.840 --> 21:08.320
把这些东西作为ctr属性给它传过去了

21:08.320 --> 21:09.040
所以说呢

21:09.040 --> 21:10.320
我们在这里呢

21:10.320 --> 21:12.000
是能够获取到ctr属性的

21:12.000 --> 21:13.680
我们把ctr属性放这儿不就完了嘛

21:14.240 --> 21:15.600
thisprobsctr

21:15.600 --> 21:17.040
对吧 放这就完事了

21:17.520 --> 21:18.480
好 保存看一下吧

21:20.160 --> 21:21.280
好 你看是不是显示出来了

21:21.280 --> 21:22.000
对不对

21:22.000 --> 21:23.440
啊 咱们就把这个ctr

21:23.600 --> 21:24.800
就是这个form里边

21:24.800 --> 21:25.760
这些东西都是ctr

21:25.760 --> 21:26.480
你看看

21:26.480 --> 21:27.600
啊 这些东西

21:27.600 --> 21:28.640
都是ctr

21:28.640 --> 21:29.760
啊 就这两个啊

21:30.480 --> 21:31.440
那么把这个ctr呢

21:31.440 --> 21:32.320
直接放过来

21:32.320 --> 21:33.280
放过来就完事了

21:34.400 --> 21:35.520
好 那么这里面

21:35.520 --> 21:36.880
那么ctr里边我们填上是哪呢

21:36.880 --> 21:38.720
一个div里边一个form input对吧

21:39.760 --> 21:41.040
那么这里就是帐号

21:41.040 --> 21:42.080
这里就是密码

21:42.080 --> 21:42.800
这个很简单

21:44.860 --> 21:46.060
那么现在我要考虑到

21:46.060 --> 21:47.420
另一个问题是咋了

21:47.420 --> 21:48.620
先把这个解构弄清楚啊

21:48.620 --> 21:50.460
有些同学可能在这里要绕万天

21:50.460 --> 21:51.020
要绕云

21:52.300 --> 21:53.740
再来一次啊 再来一次

21:53.820 --> 21:55.580
我们这里用这个form组件的时候

21:56.140 --> 21:57.260
这些无关的全部去掉

21:58.460 --> 21:59.420
用这个form组件的时候

21:59.420 --> 22:00.540
给它传了一个切尔准进去

22:00.540 --> 22:01.900
对吧 这就是个属性而已

22:01.900 --> 22:02.940
不要想那么复杂

22:02.940 --> 22:04.620
这就是它有一个组件的属性

22:04.620 --> 22:06.060
把这个属性传过去

22:06.060 --> 22:07.580
而form里边这个组件呢

22:08.220 --> 22:09.340
它就把这个切尔准显示到

22:09.340 --> 22:10.860
这个提供程序里边

22:10.860 --> 22:11.820
那么就把它显

22:11.820 --> 22:13.500
把这个它里边的切尔准放到什么

22:13.500 --> 22:15.420
放到上下文里边去了对吧

22:15.420 --> 22:17.740
那么它里边是不是可以用这个上下文了

22:17.740 --> 22:18.300
对不对

22:18.300 --> 22:19.180
里边的每一个组件

22:19.180 --> 22:20.140
不管它后代

22:20.140 --> 22:21.340
千套了多少层

22:21.340 --> 22:22.780
都可以使用到同一个上下文

22:22.860 --> 22:24.060
这个Provider

22:24.060 --> 22:25.500
都可以使用到这个上下文

22:25.500 --> 22:27.180
把它放到这切尔准

22:27.180 --> 22:30.220
好 那么我们刚才传了一个form input进来

22:30.220 --> 22:31.900
那么可以保证form input

22:31.900 --> 22:33.500
是不是一定在上下文里边

22:33.500 --> 22:34.140
对吧

22:34.140 --> 22:35.340
除非它弯一用

22:35.340 --> 22:37.180
那么它弯又肯定不管我的事了

22:37.180 --> 22:39.260
你要把form input用到外面去

22:39.260 --> 22:40.540
那肯定不管我的事了

22:40.540 --> 22:41.740
那是你自己的问题

22:41.740 --> 22:43.740
我肯定是必须要要求你这样子用

22:44.540 --> 22:46.380
所以说form input这个组件

22:46.380 --> 22:48.380
它一定处于上下文终

22:48.380 --> 22:51.100
一定处于上下文终

22:54.020 --> 22:55.380
然后现在我们要干嘛呢

22:56.500 --> 22:57.940
由于我们最终要获得

22:57.940 --> 22:58.980
这个稳闷框的数据

22:58.980 --> 22:59.300
对吧

22:59.300 --> 23:01.700
这些稳闷框的数据我们要获取到

23:01.700 --> 23:02.660
那么这个稳闷框的数据

23:02.660 --> 23:03.220
是不是要受控

23:04.100 --> 23:04.500
对不对

23:04.500 --> 23:05.060
是不是要受控

23:06.180 --> 23:06.500
好

23:06.500 --> 23:06.820
来吧

23:07.620 --> 23:08.100
受控呗

23:09.300 --> 23:10.660
这里我们写上

23:11.300 --> 23:11.940
写上那个

23:13.540 --> 23:13.940
value

23:15.700 --> 23:16.020
state

23:20.660 --> 23:22.500
这个数据来自于哪呢

23:22.500 --> 23:23.700
这个稳闷框的数据

23:23.780 --> 23:25.140
它哪来自到不是

23:25.140 --> 23:26.340
到还不是这个数据

23:27.780 --> 23:29.860
来自的到不是这个state这个数据

23:30.660 --> 23:32.420
来自的是哪个数据呢

23:32.420 --> 23:33.220
它来自的是这

23:36.180 --> 23:37.140
来自的是这个数据

23:37.700 --> 23:38.260
不

23:38.260 --> 23:39.060
怎么state呢

23:39.700 --> 23:40.020
value

23:40.980 --> 23:42.420
它来自的是这个数据

23:42.420 --> 23:43.300
来自哪个数据呢

23:43.300 --> 23:45.220
来自于上下文里边

23:45.220 --> 23:46.260
你看上下文里边

23:46.260 --> 23:47.620
不是提供了这么个东西吗

23:47.620 --> 23:48.500
form data里边

23:48.500 --> 23:49.300
它就有对应的什么

23:49.300 --> 23:50.340
locking id啊那些东西

23:50.340 --> 23:51.220
什么的都有了

23:51.220 --> 23:51.540
对不对

23:52.580 --> 23:53.940
它来自于这里的数据

23:53.940 --> 23:55.700
它来自于这里的数据

23:55.780 --> 23:56.740
所以说呢

23:57.380 --> 23:58.100
在这里

23:58.100 --> 23:59.140
value这里

23:59.140 --> 24:00.340
我们要来自于什么

24:00.340 --> 24:02.260
来自于上下文的

24:02.260 --> 24:02.900
locking

24:02.900 --> 24:04.180
就是name属性

24:04.180 --> 24:04.900
对吧

24:04.900 --> 24:05.940
它有个name属性值嘛

24:06.500 --> 24:08.100
我们通过这个name属性值

24:08.100 --> 24:08.980
是不是可以拿到

24:08.980 --> 24:10.340
上下文的对应的数据了

24:11.460 --> 24:12.740
好这个value值来自于哪

24:12.740 --> 24:14.020
我们要把上下文导入进来

24:15.620 --> 24:16.500
import

24:16.500 --> 24:17.540
用的是同一个上下文

24:19.540 --> 24:19.860
from

24:21.140 --> 24:21.620
点儿写一个

24:23.570 --> 24:24.370
form context

24:24.930 --> 24:25.570
好那么这里呢

24:25.570 --> 24:26.530
我写个静态属性

24:27.250 --> 24:27.810
dentic

24:29.090 --> 24:29.570
就是

24:30.290 --> 24:32.130
context type

24:32.130 --> 24:33.010
等于什么呢

24:33.010 --> 24:34.610
等于ctx

24:34.610 --> 24:35.490
来自于这个上下文

24:36.690 --> 24:37.330
好于于是呢

24:37.330 --> 24:38.610
我这里是不是可以取到

24:38.610 --> 24:39.570
上下文里边

24:39.570 --> 24:40.450
context里边

24:40.930 --> 24:42.450
什么form data

24:42.450 --> 24:42.930
对吧

24:42.930 --> 24:44.450
从上下文里边取到什么

24:44.450 --> 24:45.490
取到这个form data

24:45.490 --> 24:47.250
取到其中一个属性

24:47.250 --> 24:47.890
它现在没有吗

24:47.890 --> 24:48.930
一会肯定有啊

24:48.930 --> 24:49.810
一会肯定有

24:49.810 --> 24:51.090
它里边有个属性

24:51.090 --> 24:51.970
什么属性呢

24:51.970 --> 24:53.250
这个属性的名字

24:53.810 --> 24:55.010
是不是来自于这

24:55.010 --> 24:55.650
对吧

24:55.650 --> 24:56.370
来自于这

24:56.370 --> 24:57.810
我的props

24:57.810 --> 24:58.610
点儿内

24:58.610 --> 24:59.490
对不对

24:59.490 --> 25:00.770
来自于这个属性的名字

25:00.770 --> 25:01.650
来自于这

25:01.650 --> 25:02.770
我们把这个属性的值

25:02.770 --> 25:03.570
取出来

25:03.570 --> 25:05.410
当然现在的话

25:05.410 --> 25:06.130
取出来肯定是

25:06.130 --> 25:06.690
undefine

25:06.690 --> 25:07.810
这个毫无疑问

25:07.810 --> 25:08.770
但是一会就不是了

25:08.770 --> 25:09.010
对不对

25:10.690 --> 25:11.650
我们就这样子呢

25:11.650 --> 25:13.250
就给它属性复制了

25:14.050 --> 25:15.490
给它复了白六指了

25:15.490 --> 25:16.210
那么现在肯定是

25:16.210 --> 25:16.930
undefine

25:16.930 --> 25:18.210
目前它还是不受控的

25:18.210 --> 25:18.930
还是不受控的

25:18.930 --> 25:19.730
因为它是undefine

25:20.770 --> 25:21.570
但是我们给它

25:21.570 --> 25:22.290
注册一个事件

25:23.810 --> 25:24.690
给它注册一个事件

25:25.490 --> 25:26.050
什么事件呢

25:26.050 --> 25:26.770
就是undefine

25:27.490 --> 25:29.410
当你的数据改变的时候

25:30.370 --> 25:32.290
当你的数据改变的时候

25:32.290 --> 25:33.090
我们要干嘛呢

25:34.930 --> 25:36.850
当你的数据改变的时候

25:36.850 --> 25:38.530
我们要把你的数据

25:38.530 --> 25:39.650
重新给它复制

25:39.650 --> 25:40.290
对不对

25:40.290 --> 25:40.530
好

25:40.530 --> 25:42.370
上下文里边不是有个函数吗

25:43.170 --> 25:44.690
刚才我们不是提供了一个函数吗

25:44.690 --> 25:45.810
除了FMData之外

25:45.810 --> 25:46.770
所以还提供了函数

25:46.770 --> 25:47.570
就是叫做

25:47.570 --> 25:48.530
刚才提供了什么函数

25:49.090 --> 25:50.210
上下文里边

25:50.210 --> 25:51.890
所以提供了千几FMData

25:51.890 --> 25:52.690
对吧

25:52.690 --> 25:53.970
千几FMData这个函数

25:53.970 --> 25:55.490
这个函数要接收两个函数

25:56.370 --> 25:57.570
接收这么两个函数

25:57.570 --> 25:58.290
一个函数是Name

25:58.290 --> 25:59.410
一个函数是Value

26:01.490 --> 26:02.210
那么这里呢

26:02.770 --> 26:04.370
我们当我们onChange的时候

26:04.930 --> 26:06.290
我们是不是雕用这个函数

26:06.290 --> 26:06.690
对吧

26:06.690 --> 26:07.650
雕用这个函数

26:07.650 --> 26:08.530
Name是什么

26:08.530 --> 26:09.490
是不是属性的

26:09.490 --> 26:10.850
Name属性值对吧

26:11.810 --> 26:12.290
这Name

26:12.930 --> 26:13.810
值是什么呢

26:13.810 --> 26:15.490
1点Toget点Value

26:16.370 --> 26:16.690
对吧

26:16.690 --> 26:17.730
我们雕用这个函数

26:17.730 --> 26:18.450
雕用这个函数

26:18.450 --> 26:20.130
它就会重新设置上

26:20.130 --> 26:20.770
就是状态

26:21.410 --> 26:23.090
那么改修改这个FMData

26:23.090 --> 26:24.210
那么从而导致

26:24.210 --> 26:24.850
状态

26:25.170 --> 26:26.930
就上下文里边的数据发生变动

26:27.490 --> 26:30.130
那么从而刷新这里边的这些组件

26:30.770 --> 26:31.890
就重新选择这些组件

26:32.450 --> 26:33.090
保存看一下

26:34.770 --> 26:35.250
那么现在呢

26:35.810 --> 26:36.290
看上去

26:36.290 --> 26:36.690
哎

26:36.690 --> 26:37.170
等一下啊

26:37.730 --> 26:38.130
是吧

26:38.130 --> 26:39.570
Hello Comprehensive is changing

26:40.610 --> 26:42.210
Ctrl的Import of Type

26:42.690 --> 26:43.650
Ctrl的Import

26:43.650 --> 26:44.050
哦

26:44.050 --> 26:46.530
它说这个组件一开始是不受控的

26:46.530 --> 26:47.010
但是呢

26:47.010 --> 26:47.730
你后来呢

26:48.130 --> 26:48.930
又受控了

26:50.370 --> 26:52.610
ImportElement should not switch

26:52.610 --> 26:53.730
它不能从一个

26:53.810 --> 26:56.370
不受非受控组件变化到受控组件

27:00.510 --> 27:01.230
那这里呢

27:01.790 --> 27:02.430
那这样子吧

27:02.990 --> 27:03.550
这样子啊

27:04.270 --> 27:06.270
为什么我先解释一下一个现象的原因啊

27:06.270 --> 27:08.750
是因为我一开始得到这个得不到东西对吧

27:08.750 --> 27:09.710
它是Undefined

27:10.190 --> 27:10.990
拿不到东西

27:11.630 --> 27:12.750
拿不到它这里边的东西

27:12.750 --> 27:13.390
所以说呢

27:13.390 --> 27:13.950
一开始呢

27:13.950 --> 27:14.750
它是不受控的

27:15.310 --> 27:16.590
一开始是不受控的

27:16.590 --> 27:18.350
但是一旦Ung千几过后了

27:18.350 --> 27:19.390
它又变得受控了

27:20.110 --> 27:21.070
它又变得受控了

27:21.550 --> 27:22.430
所以说这里呢

27:22.430 --> 27:22.910
它就会

27:23.470 --> 27:24.350
导致这个问题啊

27:24.350 --> 27:25.230
它不是说

27:25.310 --> 27:26.670
因为它一开始是Undefined

27:26.670 --> 27:27.950
那么现在我要想办法

27:27.950 --> 27:29.710
让它一开始不要是Undefined

27:30.990 --> 27:32.350
这里我们这样子处理就完事了

27:32.830 --> 27:33.950
就说给它写

27:33.950 --> 27:34.670
这样子写吧

27:34.670 --> 27:36.350
这个表达是吧

27:37.390 --> 27:38.030
所以完事了

27:38.750 --> 27:39.550
就这么简单

27:39.550 --> 27:40.110
就完事了

27:40.750 --> 27:41.310
这里呢

27:41.310 --> 27:42.670
给它了一个值对吧

27:42.670 --> 27:44.350
这个值如果是Undefined的

27:44.350 --> 27:45.950
我就取一个控制服刷给它

27:45.950 --> 27:46.830
就完事了

27:46.830 --> 27:48.110
如果你有值的话

27:48.110 --> 27:48.670
有值的话

27:48.670 --> 27:49.950
当然就使用你的值

27:49.950 --> 27:50.910
就使用你的值

27:51.390 --> 27:52.030
它就完事了

27:52.590 --> 27:52.910
保存

27:53.950 --> 27:54.670
那么现在

27:54.750 --> 27:55.470
没问题了

27:55.470 --> 27:56.510
它既受控了

27:56.510 --> 27:57.230
那么现在呢

27:58.190 --> 27:59.070
现在我们来看一下吧

27:59.870 --> 28:00.750
看一下啊

28:00.750 --> 28:02.510
它到底是不是真的受控

28:02.510 --> 28:02.910
你看一下

28:02.910 --> 28:04.110
我们再来改变的时候

28:04.110 --> 28:04.830
你看一下

28:04.830 --> 28:06.190
这个form里边

28:06.750 --> 28:07.150
状态

28:08.750 --> 28:08.910
好

28:08.910 --> 28:09.950
这里我们写东西啊

28:09.950 --> 28:10.430
写东西

28:10.430 --> 28:11.150
你看一下

28:11.150 --> 28:12.430
这个form组件里边

28:13.070 --> 28:14.030
所以状态也跟着变了

28:14.030 --> 28:14.430
看到没

28:15.230 --> 28:15.630
看到没

28:16.110 --> 28:17.150
这状态是不是跟着变了

28:18.030 --> 28:18.910
我来这里写的时候

28:18.910 --> 28:19.230
你看

28:19.790 --> 28:20.350
看下面啊

28:20.750 --> 28:22.030
所以状态跟着变了

28:22.030 --> 28:22.670
对吧

28:22.670 --> 28:23.470
状态跟着变了

28:24.990 --> 28:26.030
现在我们就

28:26.030 --> 28:26.590
已经搞定了

28:26.590 --> 28:27.630
是不是非常神奇

28:27.630 --> 28:28.110
对吧

28:28.110 --> 28:29.070
其实也没什么神奇的

28:29.070 --> 28:29.390
对吧

28:29.390 --> 28:30.350
又啥神奇的呢

28:30.350 --> 28:31.790
就是扫传了一些属性过来

28:31.790 --> 28:33.470
我们把属性放到上下纹里边去了

28:33.470 --> 28:34.110
对不对

28:34.110 --> 28:35.950
把那些数据放到上下纹里边去

28:35.950 --> 28:37.310
并且提供了一个函数

28:37.310 --> 28:37.710
然后呢

28:37.710 --> 28:38.270
这个组件呢

28:38.270 --> 28:39.870
就可以调用上下纹里边的函数

28:39.870 --> 28:41.950
来达到修改上下纹的数据的目的

28:43.070 --> 28:43.310
好

28:43.310 --> 28:44.430
那么forminput就做完了

28:44.430 --> 28:45.150
去看是

28:45.150 --> 28:46.350
你看就做完了

28:46.350 --> 28:47.630
那么就剩下一个什么按钮了

28:47.630 --> 28:48.190
对不对

28:48.190 --> 28:49.230
就剩下一个按钮

28:49.230 --> 28:49.550
OK

28:49.550 --> 28:50.510
我们再写一个按钮啊

28:51.230 --> 28:52.110
formbutton

28:52.830 --> 28:53.390
点解释

28:53.390 --> 28:54.750
你看这个东西如果没有上下纹的话

28:54.750 --> 28:55.230
挺麻烦的

28:55.870 --> 28:56.590
挺麻烦的

28:56.590 --> 28:58.590
因为没有上下纹的话

28:58.590 --> 28:59.390
你就必须要

28:59.390 --> 29:01.150
这些东西就必须要来自于属性对吧

29:01.790 --> 29:03.310
这属性就麻烦了

29:03.310 --> 29:06.190
这个属性它不是说在form里边直接用的

29:06.190 --> 29:08.270
你看不是在form里边直接用的

29:08.270 --> 29:09.470
它是别人用过来的

29:09.470 --> 29:10.430
那别人用这个东西

29:10.430 --> 29:12.190
还给你传什么按钮这些属性

29:12.750 --> 29:13.630
那我不封掉了嘛

29:14.190 --> 29:15.070
对不对

29:15.070 --> 29:16.270
那就太麻烦了啊

29:16.270 --> 29:17.870
所以我们只用上下纹

29:17.870 --> 29:19.470
就可以非常轻松的搞定这件事

29:20.910 --> 29:21.070
好

29:21.070 --> 29:22.270
那么现在我们继续

29:22.270 --> 29:22.910
formbutton

29:25.660 --> 29:26.540
就是个按钮

29:26.540 --> 29:28.140
我们就把先写成函数嘛

29:28.140 --> 29:28.860
先写成函数组件

29:30.780 --> 29:33.020
是rcfc

29:33.020 --> 29:34.620
先写成函数组件

29:34.620 --> 29:36.220
有什么属性

29:36.220 --> 29:36.780
啊属性

29:37.420 --> 29:39.020
那么这里呢就是一个button

29:39.020 --> 29:39.660
就是个按钮

29:40.460 --> 29:41.980
按钮里边来自于什么

29:41.980 --> 29:43.260
probs里边的children

29:43.260 --> 29:45.020
因为你可能可能会给按钮呢

29:45.020 --> 29:46.380
传递一些文本

29:46.380 --> 29:47.660
可能会传递一些文本

29:47.660 --> 29:49.740
你看这个按钮里边不是可能会传递一些东西吗

29:49.740 --> 29:50.780
对不对

29:50.860 --> 29:52.220
那我就把这个东西放进来

29:53.020 --> 29:54.380
那么现在关键是什么

29:54.380 --> 29:55.740
当我们点击的时候

29:55.740 --> 29:57.580
我要通知我们的上下文

29:57.580 --> 29:58.460
我被点击了

29:58.460 --> 29:59.820
你要触发提交事件了

30:00.940 --> 30:02.140
所以说我们在这里

30:02.140 --> 30:03.260
form表单这里

30:05.680 --> 30:06.560
form表单这里

30:08.640 --> 30:09.200
在这

30:09.200 --> 30:09.920
form表单

30:10.800 --> 30:10.880
好

30:10.880 --> 30:11.920
表单里边呢

30:11.920 --> 30:13.360
他到时候要触发事件对吧

30:13.360 --> 30:14.960
因为你看一下我们最终的目标

30:15.520 --> 30:16.960
表单里边是不是一个属性

30:16.960 --> 30:17.760
on submit

30:17.760 --> 30:18.080
对吧

30:18.080 --> 30:19.200
有这么一个事件

30:19.200 --> 30:20.640
他要触发这个事件

30:20.640 --> 30:21.840
所以说表单这里呢

30:21.840 --> 30:22.800
他肯定有一个属性

30:23.920 --> 30:25.360
这里Static

30:25.360 --> 30:26.160
定义一下

30:26.160 --> 30:26.880
probs types

30:27.760 --> 30:28.560
这里把导入进来

30:29.680 --> 30:30.880
import

30:30.880 --> 30:31.680
prob types

30:32.320 --> 30:32.640
from

30:33.760 --> 30:34.800
prob types

30:35.440 --> 30:36.480
肯定有这么一个属性

30:36.480 --> 30:37.600
叫做on submit

30:38.960 --> 30:39.520
submit

30:41.040 --> 30:41.520
内容是

30:42.640 --> 30:43.120
funk

30:43.120 --> 30:43.680
一个函数

30:45.520 --> 30:47.360
那么这个函数什么是运行呢

30:48.000 --> 30:49.440
我也不知道什么是运行呢

30:49.440 --> 30:50.960
我要点按钮过后台运行

30:51.040 --> 30:52.240
但是我这里边也没有按钮

30:52.240 --> 30:53.280
这里边哪有什么按钮了

30:54.000 --> 30:56.320
但是按钮他是在上下文里边

30:56.320 --> 30:56.800
因此呢

30:56.800 --> 30:58.560
我这里是不是又可以提供一个函数

30:58.560 --> 30:58.960
对吧

31:00.560 --> 31:01.280
submit

31:01.280 --> 31:01.680
提交

31:02.320 --> 31:03.200
提供这么一个函数

31:03.200 --> 31:03.600
提交

31:05.360 --> 31:07.200
那提交的时候我要干嘛呢

31:07.200 --> 31:07.840
提交的时候

31:07.840 --> 31:08.400
你想一想

31:08.400 --> 31:09.200
我提交和干嘛

31:09.920 --> 31:11.280
是不是就是运行这个函数

31:11.280 --> 31:11.600
对吧

31:12.560 --> 31:14.240
我们就提交的时候干嘛呢

31:14.240 --> 31:15.440
就是运行这个函数

31:15.440 --> 31:16.800
如果这个属性的一个

31:16.800 --> 31:17.920
传了这个东西

31:17.920 --> 31:18.240
OK

31:18.240 --> 31:19.760
那我就probs

31:19.760 --> 31:20.480
运行这个函数

31:21.360 --> 31:22.160
把什么东西给你

31:22.160 --> 31:24.800
我会把我的表单数据给你

31:24.800 --> 31:25.520
this state

31:27.120 --> 31:27.760
form data

31:27.760 --> 31:28.000
对吧

31:28.000 --> 31:28.560
把我的数据

31:28.560 --> 31:29.440
因为这些数据呢

31:29.440 --> 31:31.120
都是都是干嘛的

31:31.120 --> 31:32.960
都是那个绑进了的

31:32.960 --> 31:33.280
就是吧

31:33.280 --> 31:34.480
都是那个就是收空的

31:35.200 --> 31:37.280
所以说我把这个数据直接给力完成

31:37.280 --> 31:37.840
直接给力

31:39.600 --> 31:39.840
好

31:39.840 --> 31:40.640
那么现在呢

31:40.640 --> 31:41.200
你看一下

31:41.200 --> 31:41.760
这个结构

31:41.760 --> 31:42.800
再看一下这个结构

31:42.800 --> 31:44.320
我们把这个东西放到上下文里边

31:44.320 --> 31:45.760
因为这个state的值

31:45.760 --> 31:47.360
它本身就给了上下文了

31:47.360 --> 31:47.920
所以上下文

31:47.920 --> 31:49.120
它有这么一个函数

31:49.120 --> 31:50.800
因此让我点按钮的时候干嘛

31:50.880 --> 31:53.360
是不是就钓用这个上下文的函数就行了

31:53.360 --> 31:54.480
非常简单

31:54.480 --> 31:56.320
当我们点按钮的时候干嘛

31:56.320 --> 31:56.880
onclick

31:58.720 --> 32:01.200
就是钓用上下文一边的函数

32:01.200 --> 32:02.160
那么上下文的函数呢

32:02.160 --> 32:02.880
哪来

32:02.880 --> 32:04.080
你先把上下文导入进来

32:05.920 --> 32:06.800
就是扛修门

32:06.800 --> 32:08.160
我们只需要扛修门就行了

32:09.360 --> 32:10.320
from

32:10.320 --> 32:13.440
就是来自于form context

32:13.440 --> 32:14.640
用的都是同一个上下文

32:15.600 --> 32:15.760
好

32:15.760 --> 32:16.400
那么这里呢

32:16.400 --> 32:18.560
我们使用之前学过的扛修门

32:22.060 --> 32:22.620
好

32:22.700 --> 32:24.620
然后onclick的时候干嘛呢

32:24.620 --> 32:26.140
这里写的是一个函数

32:26.140 --> 32:27.420
写的是一个函数

32:27.420 --> 32:28.220
value值

32:28.220 --> 32:29.340
就上下文里边的东西

32:30.220 --> 32:30.860
contact是什么

32:33.020 --> 32:33.900
这上下文的东西

32:35.340 --> 32:36.940
那么这里面返回的是什么呢

32:36.940 --> 32:38.140
返回的是一个组件

32:38.620 --> 32:39.660
返回的不是组件

32:39.660 --> 32:41.020
返回的是一个元素

32:41.020 --> 32:41.820
rex元素

32:41.820 --> 32:43.260
返回的这个东西就行了

32:43.260 --> 32:44.540
这是个函数嘛对不对

32:44.540 --> 32:46.060
函数它返回这么一个东西

32:46.700 --> 32:48.780
到时候它会它会帮你调整这个函数

32:48.780 --> 32:50.300
来把上下文的值传进来

32:50.300 --> 32:52.300
那么当我们点击这个按钮的时候

32:52.300 --> 32:53.260
上下文里边

32:53.340 --> 32:53.820
是不是

32:54.300 --> 32:55.980
直接调用上下文里边的什么

32:57.020 --> 32:57.660
sabermatch

32:57.660 --> 32:58.220
对吧

32:58.220 --> 32:59.420
调用函数就完事了

33:00.220 --> 33:00.860
就完了

33:00.860 --> 33:01.820
还有啥呢

33:01.820 --> 33:02.700
啥都没了

33:02.700 --> 33:03.180
就完了

33:04.220 --> 33:04.700
保存

33:04.700 --> 33:05.820
咱们来看一下吧

33:05.820 --> 33:06.860
在TES里边

33:06.860 --> 33:08.940
我们在这里把笔记找到

33:08.940 --> 33:09.900
找到咱们的笔记

33:12.020 --> 33:12.740
好这里

33:12.740 --> 33:13.860
不多个按钮嘛

33:13.860 --> 33:14.580
对不对

33:14.580 --> 33:15.300
行嘞

33:15.300 --> 33:15.780
按钮给你

33:16.500 --> 33:17.060
按钮给你

33:17.700 --> 33:18.100
保存

33:18.820 --> 33:19.620
那你看一下这边

33:19.940 --> 33:20.660
哎呦

33:21.700 --> 33:21.940
是吧

33:22.820 --> 33:23.220
好了吧

33:24.180 --> 33:26.580
invalid expected stream

33:27.540 --> 33:28.100
还有啊

33:30.020 --> 33:30.900
它说

33:30.900 --> 33:31.700
Type is not

33:32.900 --> 33:34.100
就是内想不正确

33:34.900 --> 33:36.340
期望的是一个制服串

33:37.620 --> 33:40.660
或者是一个内或函数

33:40.660 --> 33:42.100
但是呢得到的是undefend

33:43.460 --> 33:44.660
得到的是undefend

33:46.660 --> 33:47.060
它说

33:47.940 --> 33:49.940
也很有可能是忘记了

33:49.940 --> 33:51.540
导出你的组件

33:51.540 --> 33:52.740
哦我这明白了啊

33:53.300 --> 33:54.820
这里是不是没有导出啊

33:55.460 --> 33:56.660
我这里没有写啊

33:56.660 --> 33:57.460
我这里没有写

33:58.180 --> 33:58.980
form input

33:58.980 --> 33:59.940
还有什么form

34:00.740 --> 34:02.340
form的什么button

34:03.540 --> 34:05.700
乃至于form button

34:06.180 --> 34:06.980
乃至于这

34:06.980 --> 34:08.340
当然这个人要导入啊

34:08.340 --> 34:10.820
要导入import

34:10.820 --> 34:11.940
form button from

34:12.820 --> 34:13.300
form button

34:13.940 --> 34:14.500
好保存

34:15.060 --> 34:15.700
再看一下啊

34:16.180 --> 34:17.540
那么现在提交是不是出来了

34:17.540 --> 34:18.020
对吧

34:18.020 --> 34:19.300
提交就出来了

34:19.300 --> 34:20.820
当我们提交的时候呢

34:20.820 --> 34:22.420
如果我给他注册的事件

34:22.900 --> 34:24.020
如果可以他注册的事件

34:24.020 --> 34:24.660
看笔记里边

34:24.660 --> 34:26.180
我们去中央这样子用

34:26.180 --> 34:26.660
对吧

34:26.660 --> 34:27.380
要这样子用

34:28.820 --> 34:29.940
好那么比方说这里

34:32.190 --> 34:33.150
获得表达对象

34:33.550 --> 34:34.910
那么我们来看一下啊

34:34.910 --> 34:36.670
当我们点击这个按钮的时候

34:36.670 --> 34:38.110
它是不是能触发这个事件

34:39.070 --> 34:39.470
保存

34:41.070 --> 34:42.670
上号随便写个密码随便写个

34:42.670 --> 34:43.390
当点击的时候

34:43.390 --> 34:44.510
你看是不是拿到了

34:44.510 --> 34:45.630
拿到整个表达数据了

34:46.350 --> 34:47.870
是不是非常非常神奇啊

34:47.870 --> 34:50.110
感觉上这两个东西是分开的呀

34:50.110 --> 34:51.070
他们没有什么关联

34:51.070 --> 34:52.830
它实际上逻辑上是有关联的

34:53.470 --> 34:54.430
因为这个东西呢

34:54.430 --> 34:57.630
它会触发这个这个组件的事件

34:57.630 --> 34:58.510
那么怎么触发的

34:59.390 --> 35:01.550
就是调整上下文里面的相应方法

35:01.550 --> 35:03.230
而这个方法是谁提供的

35:03.230 --> 35:04.350
是他提供的

35:04.350 --> 35:05.470
那么这个方法里边

35:05.470 --> 35:06.750
他自然可以做任何事情

35:06.750 --> 35:07.870
跟他相关的任何事情

35:08.590 --> 35:09.550
然后包括这里边

35:09.550 --> 35:11.070
这里边的组件都是受控的

35:11.070 --> 35:12.750
他们改变数据的时候呢

35:12.750 --> 35:14.270
他要改变上下文的相应数据

35:14.270 --> 35:14.830
怎么办

35:14.830 --> 35:16.110
调整上下文的方法

35:16.110 --> 35:17.310
你看一下无形之中

35:17.310 --> 35:19.710
是不是把这一套组件就连接在一起了

35:20.270 --> 35:22.030
就形成了这么一种结构了

35:22.110 --> 35:24.030
他就把这一套组件连接在一起了

35:24.030 --> 35:25.310
如果没有上下文

35:25.310 --> 35:26.670
他要通过属性传递的话

35:26.670 --> 35:28.430
你想想这个事情做不了

35:28.430 --> 35:29.150
做不了

35:29.150 --> 35:30.430
因为你这些事情

35:30.430 --> 35:31.710
你还不是在这里做了

35:31.710 --> 35:32.590
给他传递属性

35:33.390 --> 35:34.190
因为他来自的

35:34.190 --> 35:35.870
他有可能有些东西来自于

35:35.870 --> 35:37.230
不是在上下文里边

35:37.230 --> 35:38.190
不是在属性里边

35:38.190 --> 35:39.070
可能来自于上下文的

35:39.070 --> 35:39.790
就没法弄了

35:40.510 --> 35:42.590
你所有东西只能通过属性来传递

35:42.590 --> 35:43.790
但是有了上下文过后

35:43.790 --> 35:45.230
我们就可以无形之中

35:45.230 --> 35:47.070
把一些看上去是独立的

35:47.070 --> 35:48.750
但实际上是有关联的组件

35:48.750 --> 35:49.470
联系在一起

35:50.270 --> 35:52.910
这就是上下文的这么一个例子

35:52.910 --> 35:53.870
大家下去做一下

35:53.870 --> 35:55.150
一定要去做一下

35:55.150 --> 35:55.870
做了过后

35:55.870 --> 35:58.270
你对上下文的理解就很深刻了

35:58.270 --> 35:59.790
包括你学到后边

35:59.790 --> 36:01.310
你学到什么Reactor

36:02.750 --> 36:03.390
Redux

36:03.390 --> 36:04.830
Reactor Rotor

36:04.830 --> 36:05.710
路由

36:05.710 --> 36:06.430
或者是学到什么

36:06.430 --> 36:08.270
ND UI组件库的时候

36:08.270 --> 36:08.990
你会发现

36:08.990 --> 36:10.670
有很多类似的地方了

36:10.670 --> 36:13.070
他其实做法就是用的是上下文

36:13.870 --> 36:15.630
他把一套组件进行了关联

36:15.630 --> 36:16.510
如果没有上下文

36:16.510 --> 36:17.470
他是很难关联的

36:18.110 --> 36:18.830
很难关联的

36:20.270 --> 36:21.070
好

36:21.070 --> 36:22.910
这是上下文的这一会

36:22.910 --> 36:23.870
这是下去做一下

