WEBVTT

00:00.880 --> 00:06.240
来呗 还差最后一个组件啊 最后一个组件就是transition group

00:07.120 --> 00:11.120
嗯 这个组件呢 看这个名字 你觉得他干嘛的 干嘛的

00:12.400 --> 00:20.200
这组件呢 他就做那个一个列表啊 一个列表 就是一组的动画 他来进行统一的控制啊

00:20.560 --> 00:26.000
当然你不用他想不想呢 说实话 这里边如果你要说实现的话

00:26.640 --> 00:37.440
你怎么都能实现 你不用这个第三方库 你都能实现动画 因为rex啊 底是他是比较纯净的啊 你像这个第三方库 他也没有什么魔法啊 就是你用rex里边的一些api来搞定的

00:38.160 --> 00:44.560
嗯 如果说你用这个第三方库的话 哪怕你只学一个组件 就是最基础的一个组件transition 他给你提供一个状态数据 对吧

00:44.960 --> 00:47.760
通过那个也能实现各种这样的效果啊 只不过他给你做了

00:48.960 --> 00:51.600
这几个组件呢 解决了很多常见的问题

00:52.560 --> 00:54.640
如果说你们以后在开发的过程中

00:56.080 --> 00:59.120
遇到了一些比较特殊的动画 那么你可以自己想办法去实现

01:00.240 --> 01:03.120
那么这个地方呢 他就是为了统一的来处理那个

01:03.840 --> 01:10.880
一个列表啊 一个列表或者是一组的动画 他的控制他们的就是动画流程

01:11.760 --> 01:18.240
那么这个组件呢 他是这样子 就该组件了 该组件的求准 就是他的指援数呢

01:19.040 --> 01:27.120
接收 接收多个transition或css

01:27.520 --> 01:30.080
transition 当然我们平时用的最多的就是css

01:31.280 --> 01:37.200
接收多个这样的一个组件啊 该组件用于控制

01:38.400 --> 01:42.800
用于根据这些指组件

01:44.560 --> 01:45.440
的key 指

01:45.760 --> 01:50.000
控制 他们的

01:51.920 --> 01:52.320
就是

01:53.680 --> 01:55.840
进入和退出状态

01:56.800 --> 02:01.120
不是像我们之前学的那个css transition 他不是有个因属性嘛 对吧

02:01.440 --> 02:06.000
还有一个就是这个因属性 因属性为去的时候 他进入enter状态

02:06.560 --> 02:10.640
因属性为force的时候呢 他进入退出状态

02:11.440 --> 02:13.760
像商业课 我们学的那个switch transition

02:14.160 --> 02:18.320
他其实你不用自己去写因属性 他来给你控制这个因属性

02:18.560 --> 02:21.840
然后他最终的目的就是控制 他来帮你控制这个因属性的指

02:22.400 --> 02:27.440
好 那这个transition group呢 也是这样子啊 他来帮你控制这个因属性的指

02:27.840 --> 02:29.840
啊 他根据怎么来控制呢 根据key 指

02:30.240 --> 02:34.480
哎 key 指 表了新的宣传过后 这个key 指之前的找不到了 是不是

02:34.880 --> 02:37.520
比较表示有新的一个夹进来了 对不对啊

02:38.000 --> 02:40.400
新宣传过后了一个key 指 他是一个全新的key 指

02:40.560 --> 02:45.680
那么说明是一个新的夹进来了 那么他会自动的把这个因属性呢 给你稍微q

02:47.040 --> 02:52.480
然后一会儿呢 他发现 之前有现在没了 他是不是要退出了 对吧 就把之前那个退出

02:52.960 --> 02:55.920
他就是通过这样子来控制的 就是transition group

02:56.480 --> 02:58.480
好 咱们来看一个例子吧 看一个例子

02:59.760 --> 03:04.320
嗯 这里呢 我们写上这么一个数组

03:05.120 --> 03:09.940
呃 用这个 use state 吧 use state

03:13.140 --> 03:14.020
use state

03:14.500 --> 03:16.100
use state

03:17.460 --> 03:17.860
呃

03:19.700 --> 03:22.820
我真的是 今天他鬼啊 这些东西 他怎么回事啊

03:23.300 --> 03:27.140
经常是莫名其妙的报一些错啊 经常是莫名其妙的报一些错

03:27.380 --> 03:28.980
好吧 关了 重新打开他又好了

03:30.260 --> 03:31.140
真的很神奇

03:31.860 --> 03:35.060
有没有同学知道给我说一声啊 这是到底是怎么回事啊

03:35.620 --> 03:38.180
到底是怎么回事啊 就就觉得很奇怪

03:39.300 --> 03:43.620
好 那么这里 加上一个 use state 啊 咱们呢 这里呢 给他一个

03:45.380 --> 03:50.900
这个里边有一个有一个状态啊 就表示一个啥呢 咱们表示个啥玩意儿呢

03:51.620 --> 03:54.980
表示一个任务列表嘛 任务列表 task

03:55.300 --> 03:55.780
task

03:57.540 --> 03:58.260
呃 nest

03:59.140 --> 03:59.940
一个任务列表

04:00.500 --> 04:07.140
好 任务列表里边呢 我们给他一个默认值嘛 啊 默认值呢 就是一个数组啊 默认值和数组

04:08.340 --> 04:11.460
没有问题吧 啊 给他两个任务嘛 啊 给他两个任务

04:11.780 --> 04:16.260
关键是个 id 怎么办呢 任务得有个 id啊 这个 id 咋办呢

04:17.540 --> 04:21.220
我也还想想啊 这个 id 咋办 这个 id

04:22.740 --> 04:23.540
呃

04:24.500 --> 04:27.860
我们这样子 这个 id 的话 我们安装一个库

04:29.220 --> 04:34.740
我们安装一个库的了 这个库呢 平时我做测试的时候还蛮喜欢这个库的 叫做 uu id

04:36.500 --> 04:38.340
要 add uu id 这个库

04:39.380 --> 04:42.020
这个库没啥没啥其他作用啊 没啥其他作用

04:42.660 --> 04:45.780
他他的作用就是那个 就是给你生成一个唯一的 id

04:47.460 --> 04:51.140
这个东西呢 如果说你要做出一些数据库操作的话 可能会用到啊

04:51.540 --> 04:54.820
他是生成一个全球唯一 id 啊 一个制服串

04:55.620 --> 05:01.540
啊 我们加上这个库啊 看一下这个库嘛啊 即使大家没可能 可能大家没看过啊 也可能看看到过这个库

05:02.500 --> 05:05.940
啊 给他看 看一下这个库吧 这个库也很简单啊 非常非常简单

05:09.120 --> 05:13.680
啊 控制台那边呢 我们这里呢 导入啊 导入这个 uu id

05:16.560 --> 05:18.640
uu id

05:19.840 --> 05:23.360
uu id 导入进来就完了啊 他是一个函数这个玩意儿

05:23.680 --> 05:28.720
啊 他是一个函数 他直接给你生成一个唯一的 id 我们这里输出一个嘛啊 uu id

05:29.520 --> 05:32.560
啊 雕用这个函数 雕用这个函数 他就会给你生成一个唯一的 id

05:33.040 --> 05:36.960
你看啊 就这个唯一的 id 他这个 id 就是一个很长的制服串 全球唯一

05:37.680 --> 05:44.160
你这个世界上 你只要重复雕用这个函数 他不可能得到两个一样的 不可能只跟之前重复的啊 全球唯一的

05:46.080 --> 05:48.480
啊 他具体的实现原理 大家可以咨询一百度一下

05:49.440 --> 05:55.040
呃 这里呢 我们就加上一些任务嘛啊 第一个任务呢 id 那就等于 uu id

05:57.280 --> 06:05.600
呃 task name 就name 任务的名称呢 名称呢 就是任务一嘛 任务一 咱两个就得了啊 任务二

06:06.560 --> 06:10.880
啊 这是他的默认值啊 这是状态的默认值啊 这是 task

06:12.960 --> 06:14.560
好 那么下面呢 我们

06:15.440 --> 06:22.160
打算宣传一个主意 宣传一个列表啊 打算宣传一个列表 所以说这里呢 我们可以使用一个

06:23.920 --> 06:24.240
呃

06:25.120 --> 06:26.240
倒进了啊 那个

06:27.520 --> 06:27.760
from

06:31.040 --> 06:32.320
那个倒入react

06:32.960 --> 06:36.880
trash group 我们使用那个trash group这个主件

06:37.520 --> 06:43.920
好 同时呢 我们刚才说了 他你不要装啥 是吧 装多个 css trash信组件 对吧 我们还要写个

06:44.560 --> 06:45.280
css trash信

06:46.160 --> 06:47.120
好 完了啊 没了

06:48.000 --> 06:51.520
那么接下来我们在这里边写 y 边呢 给他套一个啊

06:52.320 --> 06:54.320
trash group 然后套一个这个主件

06:55.280 --> 07:00.480
然后里边呢 里边呢 每一个啊 我们就可以使用map嘛啊

07:01.840 --> 07:06.160
task list map 对吧 它是个数组嘛 对不对 啊 印设嘛啊 t

07:06.960 --> 07:12.800
每一个数组的每一项印设成一个什么呢 按理说是应该印设成个li 对不对啊 或者是一个

07:13.280 --> 07:16.320
忘记发到的什么元素 无所谓啊 一个div都想啊 都想

07:16.720 --> 07:21.440
而关键是呢 他要外面要套一个css trash信组件啊 在他的要求

07:21.680 --> 07:28.080
因为他要控制这个css trash信组件的硬 硬这个属性啊 通过他是来控制他里边的直组件

07:28.560 --> 07:33.520
啊 就是css trash信 就是在这里呢 你最重要形成这么一种格式啊 css trash信

07:34.080 --> 07:38.800
这是一个 对吧 里边一个比方 div 啊 任务名啊 就是任务一

07:39.200 --> 07:42.560
然后边一个按钮嘛 比方说按钮点啊 删除 对不对

07:43.280 --> 07:51.920
这是任务一 然后呢 下面呢 有个任务二对不对 哎 有个任务二啊 最重要形成这么一种结构 他每一个是一个css trash信

07:52.480 --> 07:55.760
所以说呢 你这里的map的时候呢 你要怎么写呢啊 就是

07:56.480 --> 07:57.120
task list

07:58.000 --> 08:01.280
map的时候你要怎么写呢 是不是要返回一个什么 返回一个

08:04.000 --> 08:08.560
css trash信这个组件 对吧 返回这个组件 这个组件里边呢 一个div

08:09.280 --> 08:14.560
啊 一个div嘛 比方说这个div嘛 这里是写任务名称啊 任务名称来自于他 t点呢 对不对

08:15.360 --> 08:18.560
点三啊 当然啊 点三出了 我们一会再说啊 一会再说

08:19.600 --> 08:20.480
没问题吧 哎

08:21.040 --> 08:26.400
我们把形成这种格式啊 但是我们注意啊 刚才呢我们说到 他是要根据这些直组件的qz

08:27.120 --> 08:30.800
来控制他们的进入和退出状态 并且不说一个

08:30.800 --> 08:36.240
输主渲染是不是要给qz 对不对 一早肯定要给qz的qz等能源啥呢 我们可以等于t点id

08:36.640 --> 08:37.600
可以等于t点id

08:39.120 --> 08:46.080
啊 好 接下来呢 我们这里有两个任务 对吧 OK 那么我们试一下三处啊 试一下三处

08:46.800 --> 08:50.800
好 这里呢 我们点 给他做这个事件 给这个按钮 onclick

08:52.320 --> 08:59.360
点击按钮的时候呢 我们要完成三处 三处是不是要重新什么set task list 对吧 设置这个task list

09:00.160 --> 09:05.680
task list等于什么呢 等于啥呢 是不是要给他一个新的数组 对不对 给他一个新的数组

09:06.000 --> 09:11.520
那么这个新的数组 我们可以用这个元数组filter啊 这基本操作得会啊

09:12.080 --> 09:16.480
元数组的filter 然后找到什么了 元数组里边的id不等于

09:16.880 --> 09:21.520
现在你要删除这个任务的id的东西 对不对 这样子是不是给了一个新数组了

09:23.840 --> 09:27.680
这什么 这是啥 因为分号什么东西

09:29.040 --> 09:30.320
filter is

09:31.280 --> 09:33.520
atom的id不多了一个

09:35.520 --> 09:38.960
就是我们得到一个啊 我们把写开嘛 有些东西绕不过来

09:39.680 --> 09:46.160
就是我们要删除这个这个任务的id对吧 用这个id去删除这个任务 那么这个id要删除这个id

09:46.480 --> 09:50.080
那么我们是不是得到一个新的数组啊 new tasks

09:51.200 --> 09:58.320
得到一个新的数组 这个新的数组是不是通过元数组去筛选啊 元数组里边id不等于新的id的啊 那么我们拿到

09:58.400 --> 10:04.240
那是不是 这个新的数组里边就没有不存在啊 就不再存在这个id的数据了 对不对

10:04.720 --> 10:07.120
然后把这个新数组设定进去 像这些操作啊

10:07.760 --> 10:14.000
如果说你觉得绕 那么说明你一定是练习太少了啊 练习太少了 这些都是非常非常常见的一个操作啊

10:14.320 --> 10:22.320
一定要多练习啊 我每节课讲完了过一定要去练习一下 不要着急听后面的课程 不然的话你学习越学越学不懂啊 遇到后面都不知道我在讲啥了

10:22.800 --> 10:29.680
一可能感觉 就是有些同学有幻觉啊 比如说我讲完一节课 他听着 嗯 没问题啊 我觉得挺简单的 他不去练

10:31.200 --> 10:36.720
那么导致了什么呢 他对那些东西实际上是陌生的 实际上是有些东西没有搞清楚 有误解的

10:37.120 --> 10:41.680
他没有去练 没有去经过这种这样 这种练习 边练习边时好了一个过程

10:42.240 --> 10:49.840
那么当他听后面的课的时候 你会觉得 之前讲过这个吗 我怎么一点印象都没有了 为什么没印象 你没练过啊 你没写过啊

10:50.560 --> 11:02.640
对不对 那咱们那个 这个就是学习编程 学习开发 他是一个功科 他是非常非常强调练习 说大家一定要去多练习啊 否则的话 越学到后面 越学不懂

11:03.440 --> 11:06.880
好 接下来就完事了啊 完事了 好 保存看一下了

11:07.840 --> 11:16.160
你还没有写贪冒着 对不对 他不知道这个过度时间啊 贪冒着 因这个属性不用给了啊 因这个属性不用给了 比方说两秒钟

11:17.040 --> 11:21.920
啊 两秒钟 好 咱们来看一下啊 看一下这个三处有什么样的功能

11:23.120 --> 11:28.000
看着 这里每一个任务是个div 看到没 每个任务是个div

11:29.200 --> 11:34.610
好 接下来我们点三处任务一 看着 注意看 看到没

11:35.890 --> 11:43.010
再来一次啊 点三处任务一 你会发现他不是立即宣传 立即宣传的话 他就马上就消失了 对吧 马上就消失了

11:43.330 --> 11:51.010
他是不是跟他做法 跟那个switch差不多 对吧 先给他应用一些样式啊 先给他应用一些样式 样式完了过后了才真正的去重新宣传

11:51.410 --> 11:59.820
看到没 点击 对吧 没问题吧 哎 他最后注意动态把他移除 所以他会给他样式的啊 给他样式的

12:00.780 --> 12:07.020
他怎么来 知道是哪个div了 他就通过keyz keyz来去对应 所以keyz也是一定要给的 三处任务你看一下

12:07.580 --> 12:17.900
对吧 先给他推出样式 看到没 哎 两秒钟之后啊 完成这样的效果 那么这样的效果的话 如果你要写样式的话 是不是很好写 对不对

12:19.260 --> 12:23.820
这个我觉得都没他说的了啊 import导入嘛 app.css

12:25.020 --> 12:30.700
然后呢 这里我们写上一个啊 一个set 一个set的样式呢 加上一个tristation啊 tristation

12:31.260 --> 12:38.860
一秒 多少 多少秒钟啊 我这里写了两秒钟 对吧 那么opacity嘛 啊 opacity或者说用那个

12:40.060 --> 12:45.180
transform啊 啊transform scale 啊scale 把它变成牛啊 保存啊 看一下吧

12:48.540 --> 12:57.900
看没 啊看没 对吧 啊用什么样式 用什么样式 随便你啊 随便你啊 你甚至还可以设置这么的transform orange 对吧 零零

12:58.380 --> 13:03.100
啊 把视为到原点啊 视为到原点 小心

13:04.860 --> 13:08.700
哎 我这里写错了吗 transform orange 啊 看一下

13:09.980 --> 13:10.300
呃

13:12.060 --> 13:16.380
transform orange 是这样设置啊 是这样设置啊 我写错了吗 我看一下

13:17.660 --> 13:17.980
啊

13:18.940 --> 13:27.820
transform orange 零零零 是这样设置啊 是这样设置啊 为什么还是那个啊 那我

13:27.900 --> 13:32.220
设置laptop值呢啊 试一下吧 我设置laptop值

13:33.420 --> 13:38.700
我这个东西没 平时没怎么用 都忘了 transform orange

13:39.740 --> 13:49.580
那怎么还是 中心还是在这 但是我们讲的这个跟这个没关系啊 我们讲的这些支持跟这个没关系啊 不想到我受不了了 我要去看一下

13:50.060 --> 13:51.740
transform orange 怎么回事

13:55.680 --> 13:55.840
嗯

13:57.440 --> 14:01.280
世界世界 传统手艺丢了 兄弟们 传统手艺丢了

14:02.640 --> 14:02.960
呃

14:04.480 --> 14:06.960
对呀 没问题啊 是这样子设置的呀

14:09.120 --> 14:10.080
是这样子设置的呀

14:11.680 --> 14:14.480
这个有什么问题呢 transform orange

14:15.520 --> 14:16.080
orange

14:17.360 --> 14:18.480
转换的起点

14:19.280 --> 14:22.640
好 这样子我在这里测试一下啊 不想 我非要搞清楚这个问题啊

14:23.120 --> 14:26.320
呃 不想听这个问题的同学可以快进啊 反正是视频教成

14:27.200 --> 14:29.680
transform orange

14:30.560 --> 14:33.120
我在这里呢 直接给他设置成0和0

14:33.760 --> 14:38.960
然后呢 我再设置transform啊 transform 然后把它设为scale啊 scale

14:41.660 --> 14:43.820
啊 这个值 我们按在这边一会儿 变化一下

14:45.340 --> 14:47.260
哎对吧 他应该是这样的效果才对啊

14:47.980 --> 14:51.580
对吧 应该是这样的效果才对啊 他为什么会直接变成那个

14:52.300 --> 14:54.940
还是按到之前的原点啊 之前的原点来说法

14:57.710 --> 15:02.030
有可能的是这个原因 因为你这个样式统音用过后呢

15:03.870 --> 15:05.630
这个玩意没有导致回流

15:06.750 --> 15:08.190
他还是用了之前的值

15:09.070 --> 15:12.030
那我这样子 我把这个样式呢 设到 xs 里边

15:12.590 --> 15:16.590
然后呢 把刚才那两个设到一个 xs active 里边

15:17.550 --> 15:20.590
啊 先应用这个样式 先把原点应用进去

15:21.310 --> 15:23.070
然后呢 再说小

15:23.870 --> 15:25.070
看一下 是不是这个这个问题

15:31.200 --> 15:31.680
这看啊

15:37.680 --> 15:40.000
一个 xs active 写错了

15:43.230 --> 15:43.630
加单

15:45.580 --> 15:49.020
哦 是这个问题啊 先把这个玩意要应用进去

15:49.260 --> 15:50.860
先把这个原点应用进去

15:51.180 --> 15:52.460
然后呢 再加这个

15:52.700 --> 15:54.620
然后我们再看一下 再写过来

15:54.860 --> 15:55.660
这些我也就不行

15:59.380 --> 15:59.940
啊 不行

16:00.100 --> 16:03.460
哦 对 那要 那要导致这个 那必须要用这种方式

16:03.700 --> 16:04.820
那就说明 说明啥呢

16:05.300 --> 16:08.260
说明这个这个细节啊 说明它会导致回流

16:08.980 --> 16:10.260
啊 它会导致回流

16:10.740 --> 16:12.180
啊 就是重新那个

16:12.740 --> 16:13.540
重新缺

16:13.780 --> 16:16.820
就是重新计算元素的位置和尺寸 就导致回流

16:17.540 --> 16:20.100
啊 所以说得先让它应用进去

16:20.420 --> 16:23.620
导 导致回流了之后 真的应用生销了之后 再应用这个样式

16:25.700 --> 16:27.860
好 OK 那么这里就是搞定了 对吧

16:28.020 --> 16:28.900
就推出去搞定了

16:29.780 --> 16:31.940
啊 那么就这么简单啊 就这么简单

16:32.340 --> 16:35.220
呃 然后呢 说如果说要新加怎么办呢

16:35.460 --> 16:37.940
新加 新加一个任务啊 新加一个任务

16:37.940 --> 16:40.660
我们就随便写一个吧 写个新加一个任务啊

16:42.420 --> 16:43.220
新加一个任务

16:44.340 --> 16:45.140
这个DIB

16:46.420 --> 16:49.380
这里边呢 我们写上一个啥呢

16:49.380 --> 16:52.260
button啊 添加一个任务

16:53.460 --> 16:55.700
这个button里边啊 我们尽量简单一点吧

16:55.700 --> 16:57.380
我懒得写我们文化了啊 我就

16:58.900 --> 17:01.060
打印出 就弹出个东西啊 弹出个东西

17:01.620 --> 17:05.860
Name 就是用window.com 就是propt

17:06.980 --> 17:13.330
来弹出个东西 就是请输入任务名称

17:13.890 --> 17:14.850
请输入任务名称

17:15.570 --> 17:17.250
弹出任务名称 把任务名称拿到

17:17.250 --> 17:18.450
用户输的任务名称拿到

17:18.450 --> 17:19.410
这个东西还记得吗

17:19.410 --> 17:21.650
我们几乎不用的 只是来做测试

17:22.210 --> 17:23.410
好 任务名称拿到过后呢

17:23.410 --> 17:26.210
我们这里往这个数组里边加一个任务啊

17:26.210 --> 17:28.450
就是set task list

17:29.010 --> 17:31.890
原来的数组展开啊 就是 task list

17:32.450 --> 17:36.370
然后给大家加新加个任务 就是一个对象

17:36.930 --> 17:40.690
一个新的任务对象 id肯定是等于有有id

17:42.210 --> 17:44.210
然后呢 任务的名称放进来

17:46.930 --> 17:48.530
行了啊 保存 你看一下

17:50.290 --> 17:51.010
添加个任务

17:51.730 --> 17:53.810
注意看下面的样式啊 注意看这里边的样式

17:54.530 --> 17:57.090
好 这里随便写个任务名称啊 点确定

17:57.090 --> 17:59.490
你看 是不是一个enter active 对吧

17:59.490 --> 18:00.770
最后enter down 对不对

18:01.250 --> 18:04.530
好 所以说呢 我们这里呢 可以再写一个

18:05.570 --> 18:07.650
enter enter这个样式呢

18:07.650 --> 18:09.570
我们也先把它transform orange

18:09.570 --> 18:10.530
So we have to top

18:12.530 --> 18:14.850
然后再把它的什么

18:16.370 --> 18:16.850
transform

18:18.210 --> 18:19.090
So we scale 0

18:20.850 --> 18:23.410
然后enter active的时候

18:25.250 --> 18:27.090
把它的transform so we scale 1

18:29.250 --> 18:30.130
So we scale 1

18:31.090 --> 18:31.650
好 保存

18:33.410 --> 18:34.450
好 接下来再看啊

18:35.730 --> 18:37.250
添加个任务 点确定

18:37.810 --> 18:40.530
你看 是不是这样子 有个这么一个效果啊

18:41.250 --> 18:44.210
任务 你看 是不是有这么一个效果啊 点击删除

18:44.210 --> 18:44.610
你看呗

18:47.490 --> 18:49.330
看呗 是不是有这样的效果 对吧

18:49.330 --> 18:52.930
这就是transition group这个组件它做的事情

18:53.970 --> 18:56.850
当它里边的CC translation 它会自己来控制

18:57.570 --> 19:00.210
根据keyz的情况来自行控制

19:00.210 --> 19:02.210
它们应该是退出 还是应该是进入

19:03.010 --> 19:04.370
它会自动进行控制

19:04.370 --> 19:07.090
那就比例写多个CC translation 你自行来控制

19:07.090 --> 19:08.530
它们哪个退出 哪个是进入

19:09.250 --> 19:10.530
是不是要方便很多 对不对

19:10.530 --> 19:13.010
就是这次全新型group这个组件的作用

19:13.650 --> 19:15.330
但是同样的道理啊 它里边呢

19:15.330 --> 19:16.530
也可以给它加上appear

19:17.090 --> 19:17.970
加上appear

19:17.970 --> 19:19.650
好 加上appear之后呢 咱们来看一下

19:20.930 --> 19:21.810
加上appear之后

19:23.810 --> 19:26.290
那么你看一下 这里是不是有个appear

19:26.290 --> 19:28.130
appear active appear down 对吧

19:28.130 --> 19:29.250
是一样的啊

19:29.330 --> 19:31.490
也可以呢 把这个appear加到哪了 加到这

19:31.490 --> 19:33.970
也行 也行 保存

19:34.930 --> 19:37.970
你看一下 是不是也有一样的效果 对不对

19:37.970 --> 19:38.850
也有一样的效果

19:39.490 --> 19:41.490
appear 这个没什么好夺的

19:41.490 --> 19:42.690
就是它多了这么一个属性

19:42.690 --> 19:44.290
这个组件里边 它多了这么一个属性

19:44.290 --> 19:46.770
appear 这个属性呢 可以统一控制

19:46.770 --> 19:49.250
所有的都是一开始有这么一个内样式

19:51.090 --> 19:53.330
然后呢 它还有这么一个属性 叫做component

19:54.130 --> 19:55.490
component 这是什么属性呢

19:55.490 --> 19:56.930
这个属性做什么用呢

19:57.010 --> 19:58.290
你看一下这个transition group

19:58.770 --> 20:00.530
它外面其实让给你生成了一个div

20:01.170 --> 20:02.770
我们看一下这个组件数嘛

20:03.170 --> 20:04.050
看一下这个组件数

20:04.050 --> 20:05.090
这个组件数里边

20:05.090 --> 20:07.490
transition group里面你看多了一个div

20:07.970 --> 20:09.410
我们哪有写这个div啊

20:09.410 --> 20:10.770
我们自己写没写啊

20:10.770 --> 20:11.650
你看自己写没写

20:11.650 --> 20:13.490
transition group里面直接就是列表了 对吧

20:13.970 --> 20:15.010
并没有写这个div

20:15.010 --> 20:16.290
它自己给你生成了一个div

20:17.090 --> 20:18.370
它自己给你生成了一个div

20:20.530 --> 20:22.050
那么这个东西 你要改成

20:22.050 --> 20:23.570
别的元素的话可以

20:23.570 --> 20:25.330
在这里 比方说你要改成UL元素

20:25.890 --> 20:26.290
保存

20:27.010 --> 20:27.490
你看一下

20:28.130 --> 20:29.650
它这里边就变成了UL元素了

20:30.770 --> 20:31.650
transition group

20:31.650 --> 20:33.490
你看是不是变成UL了 对不对

20:33.490 --> 20:34.690
是不是有点类似于無U

20:34.690 --> 20:35.810
有点类似于无U

20:36.690 --> 20:39.090
好 如果说你不希望它生成任何元素的话

20:39.090 --> 20:39.890
你给它写个辣

20:40.770 --> 20:42.610
它就不生成任何任何元素

20:45.490 --> 20:47.090
它就不生成任何元素了

20:47.730 --> 20:48.370
没了这意思嘛

20:49.330 --> 20:49.970
没了这意思嘛

20:50.450 --> 20:50.850
OK啊

20:51.410 --> 20:52.690
好 那次关于这一块

20:52.690 --> 20:54.930
那么如果我们比方说把它改成UL

20:55.010 --> 20:57.090
然后下面就可以变成Li了 对吧

20:57.090 --> 20:58.290
这里可以变成Li了

21:00.530 --> 21:01.330
这是关于这一块

21:03.010 --> 21:05.090
另外它既然有生成元素了

21:05.090 --> 21:06.290
这是一个小的细节

21:06.850 --> 21:08.370
既然它有生成的元素

21:08.770 --> 21:10.290
你看现在就是UL LI

21:12.690 --> 21:13.970
那么它既然有生成的元素了

21:13.970 --> 21:16.050
这个元素的内样式你是可以复制的

21:16.450 --> 21:17.970
你是可以给它内样式复制的

21:17.970 --> 21:19.570
比方说它这里有一个属性叫class name

21:20.210 --> 21:21.090
class name属性

21:21.490 --> 21:22.290
复制abc

21:22.290 --> 21:23.090
比方说水源写个吧

21:23.090 --> 21:23.730
水源下写一个

21:24.210 --> 21:24.530
保存

21:26.530 --> 21:27.890
所以这个内样式不是潜坠

21:27.890 --> 21:29.010
不是这些潜坠

21:29.010 --> 21:32.530
它指的是生成容器的内样式

21:33.170 --> 21:34.050
指的是这么一个东西

21:34.770 --> 21:35.570
了解一下就行了

21:36.450 --> 21:37.650
它就没啥了

21:37.650 --> 21:38.290
就没啥了

21:39.330 --> 21:40.130
就没啥了

21:40.130 --> 21:40.930
真没啥了

21:40.930 --> 21:41.410
真没啥了

21:41.890 --> 21:43.250
好 这就是class name group

21:43.970 --> 21:45.730
那么现在我们自此就把

21:47.890 --> 21:50.050
就是react class name group

21:50.050 --> 21:52.130
就整个酷就学完了

21:52.130 --> 21:53.010
就这么四个逐渐

21:53.170 --> 21:53.970
它没有做多的了

21:54.610 --> 21:56.770
如果说你还有更多特殊的心血的话

21:56.770 --> 21:58.930
那么你只可以自己去封装一个组件

21:58.930 --> 21:59.730
咱们下节课呢

21:59.730 --> 22:00.770
一是做一些效果

22:00.770 --> 22:04.850
二呢是可以看一下如何来去自己封装一个组件

22:04.850 --> 22:06.130
也没有什么新知识

22:06.130 --> 22:08.130
就是凝活的去应用这些知识

22:08.130 --> 22:10.450
比方说我们有的时候要这么担入担出

22:10.450 --> 22:11.250
要做一个什么

22:12.610 --> 22:14.130
浮动切换之类的东西

22:14.130 --> 22:15.650
我们可以自己去封装一个

22:15.650 --> 22:16.370
老是去

22:16.370 --> 22:17.890
老是每一次去写一个单码了

22:17.890 --> 22:18.690
也挺烦的

22:18.690 --> 22:19.090
对吧

22:19.090 --> 22:20.370
你自己去封装就完事了

22:20.370 --> 22:21.250
好 咱们下节课来讲

22:21.250 --> 22:23.250
这是关于这个传统组

