WEBVTT

00:01.620 --> 00:03.620
好 这一刻呢咱们来说一说关于这个

00:04.120 --> 00:05.620
Rave转发

00:06.120 --> 00:09.120
有的时候呢我们以把它叫做For World

00:09.620 --> 00:11.120
For World Rave

00:11.620 --> 00:12.620
这什么东西呢

00:13.120 --> 00:17.120
我们先来说一下它来解决一个什么样的问题吧

00:17.620 --> 00:20.120
这个东西呢平时我们用的

00:20.920 --> 00:21.620
不多

00:21.820 --> 00:24.920
因为平时我们连Rave的话都用的很少对吧

00:25.120 --> 00:27.120
更不要说什么Rave转发了

00:27.320 --> 00:29.620
但是有的时候呢它非常非常有用

00:29.620 --> 00:33.620
特别是我们后边在做一些高接组件的时候

00:33.620 --> 00:34.620
它特别有用

00:35.620 --> 00:37.620
我们现在说一个问题

00:38.620 --> 00:39.620
比方说啊

00:39.620 --> 00:43.620
这里边呢我们的App里边呢有这么一个组件

00:44.620 --> 00:46.620
这个组件是一个函数组件

00:46.620 --> 00:47.620
这个函数组件啊

00:47.620 --> 00:51.620
比方说这个函数组件的名字叫做A组件

00:52.620 --> 00:53.620
这么一个函数组件

00:53.620 --> 00:55.620
然后呢返回一个H1

00:55.620 --> 00:57.620
H1元素

00:58.620 --> 01:01.620
就这么一个函数组件

01:01.620 --> 01:05.620
然后呢我们在这里边去使用一下这个组件啊去使用一下

01:05.620 --> 01:07.620
OK使用一下这个组件

01:07.620 --> 01:09.620
首先第一个问题

01:09.620 --> 01:11.620
就说这个函数组件啊

01:11.620 --> 01:13.620
它本身是不能加Rave的对吧

01:13.620 --> 01:14.620
我们之前说过啊

01:14.620 --> 01:17.620
函数组件里边是不能写的Rave的啊

01:17.620 --> 01:19.620
因为只有那一组件才能使用Rave

01:19.620 --> 01:22.620
因为函数组件因为Rave没有意义啊

01:22.620 --> 01:24.620
你说你想得到啥呢

01:24.620 --> 01:26.620
你说你想得到啥

01:26.620 --> 01:27.620
如果你是加在动物元素上面

01:27.620 --> 01:29.620
就是那种内置元素组件上面

01:29.620 --> 01:30.620
比方说这个DIV啊

01:30.620 --> 01:31.620
你在这上面加Rave呢

01:31.620 --> 01:33.620
有意义对吧有意义

01:33.620 --> 01:34.620
什么意义呢

01:34.620 --> 01:37.620
就是我要得到这个DIV的真实的动物元素

01:37.620 --> 01:39.620
能够得到它的真实的动物元素

01:39.620 --> 01:41.620
然后呢你在这里写呢

01:41.620 --> 01:43.620
如果你是个内组件的话

01:43.620 --> 01:44.620
也有意义

01:44.620 --> 01:45.620
我得到内的对象

01:45.620 --> 01:46.620
对吧

01:46.620 --> 01:47.620
它一个组件使用

01:47.620 --> 01:48.620
它就是个对象嘛

01:48.620 --> 01:50.620
我可以得到它的对象

01:50.620 --> 01:51.620
但是如果你是个函数组件

01:51.620 --> 01:53.620
我想得到啥呢

01:53.620 --> 01:54.620
你这个逻辑都说不通

01:54.620 --> 01:55.620
你想得到啥吗

01:55.620 --> 01:57.620
你说现在说你想得到啥

01:57.620 --> 01:58.620
对吧

01:58.620 --> 01:59.620
这个逻辑都是说不通的

01:59.620 --> 02:01.620
所以说函数组件的上面呢

02:01.620 --> 02:03.620
我们是不能使用Rave的

02:03.620 --> 02:04.620
但是呢

02:04.620 --> 02:06.620
我们可能会存在这么一个需求

02:06.620 --> 02:08.620
就是函数组件

02:08.620 --> 02:10.620
它本身不能使用Rave

02:10.620 --> 02:11.620
但是呢

02:11.620 --> 02:12.620
我希望的是什么呢

02:12.620 --> 02:13.620
比方说

02:13.620 --> 02:15.620
这里我们给它一个Rave

02:15.620 --> 02:16.620
这里呢我们

02:16.620 --> 02:18.620
这里

02:18.620 --> 02:20.620
AirRave

02:20.620 --> 02:21.620
比方说啊

02:21.620 --> 02:25.190
就拿一个

02:25.190 --> 02:26.190
哪个啥呢

02:26.190 --> 02:27.190
哪个这个吧

02:27.190 --> 02:28.190
React

02:28.190 --> 02:29.190
Create

02:29.190 --> 02:30.190
IEF

02:30.190 --> 02:31.190
好像上几课

02:31.190 --> 02:33.190
我们没有用到这个玩意儿

02:33.190 --> 02:34.190
那行吧

02:34.190 --> 02:35.190
那咋办

02:35.190 --> 02:36.190
就用这个东西

02:36.190 --> 02:37.190
ZStair

02:37.190 --> 02:38.190
AirRave

02:38.190 --> 02:39.190
比方说啊

02:39.190 --> 02:40.190
把Rave给它

02:40.190 --> 02:41.190
那么到时候呢

02:41.190 --> 02:43.190
我们就可以假设

02:43.190 --> 02:44.190
假设

02:44.190 --> 02:46.190
我们现在对函数组件使用Rave

02:46.190 --> 02:47.190
肯定是不行的

02:47.190 --> 02:48.190
那么到时候呢

02:48.190 --> 02:49.190
我们怎么来得到呢

02:49.190 --> 02:51.190
是不是就是ZairRave

02:51.190 --> 02:52.190
对吧

02:52.190 --> 02:54.190
Corrent

02:55.190 --> 02:56.190
Corrent

02:56.190 --> 02:58.190
那么现在呢

02:58.190 --> 02:59.190
我们之前说

02:59.190 --> 03:00.190
这个逻辑是说不通的

03:00.190 --> 03:01.190
因为函数组件呢

03:01.190 --> 03:02.190
Rave没意义

03:02.190 --> 03:03.190
那么现在呢

03:03.190 --> 03:04.190
我们假设

03:04.190 --> 03:05.190
我希望得到的是啥呢

03:05.190 --> 03:06.190
希望得到的是

03:06.190 --> 03:08.190
这个组件内部的

03:08.190 --> 03:10.190
根源数

03:10.190 --> 03:12.190
有时候我这里想得到啥

03:12.190 --> 03:14.190
想得到这个H1

03:14.190 --> 03:16.190
想得到这一款呀

03:16.190 --> 03:18.190
那现在能做到吗

03:18.190 --> 03:20.190
那肯定不能做到对吧

03:20.190 --> 03:21.190
为什么不能做到呢

03:21.190 --> 03:22.190
是因为

03:22.190 --> 03:23.190
我们现在呢

03:23.190 --> 03:24.190
给这个Rave加的值是

03:24.190 --> 03:26.190
我们这自定义组件

03:26.190 --> 03:27.190
对吧

03:27.190 --> 03:29.190
加的是自定义组件上面的

03:29.190 --> 03:31.190
而不是给H1元素加的

03:31.190 --> 03:33.190
H1是这个组件内部

03:33.190 --> 03:34.190
选人的东西

03:34.190 --> 03:35.190
对吧

03:35.190 --> 03:36.190
我们想把这个Rave呢

03:36.190 --> 03:38.190
现在映射到这个

03:38.190 --> 03:39.190
组件的内部去

03:39.190 --> 03:41.190
我们想做这么一件事

03:41.190 --> 03:42.190
如果

03:42.190 --> 03:43.190
我们有这么一种需求的话

03:43.190 --> 03:45.190
该怎么来处理呢

03:45.190 --> 03:46.190
这就是我们这节课

03:46.190 --> 03:47.190
要讲的内容

03:47.190 --> 03:48.190
这节课呢叫做Rave转发

03:48.190 --> 03:49.190
什么叫转发呢

03:49.190 --> 03:50.190
意思

03:50.190 --> 03:51.190
我给你传了一个Rave

03:51.190 --> 03:52.190
但是呢

03:52.190 --> 03:53.190
这个含义呢

03:53.190 --> 03:55.190
不是说我要去引用它本身

03:55.190 --> 03:58.190
而是想去引用它内部的东西

03:58.190 --> 03:59.190
这就是我们这里

03:59.190 --> 04:00.190
可要解决的问题

04:00.190 --> 04:02.190
那么现在肯定要出问题

04:02.190 --> 04:04.190
保存给我们看一下吧

04:04.190 --> 04:06.190
你看现在马上出问题了

04:06.190 --> 04:07.190
他说

04:07.190 --> 04:11.190
function components cannot be giving Raves

04:11.190 --> 04:13.190
函数组件是不能给

04:13.190 --> 04:14.190
Rave的

04:14.190 --> 04:15.190
不能给的

04:15.190 --> 04:17.190
如果你尝试这样做的话

04:17.190 --> 04:18.190
那么将会失败

04:18.190 --> 04:19.190
你是不是

04:19.190 --> 04:21.190
想使用Forward Rave呢

04:21.190 --> 04:23.190
是不是想使用Rave转发呢

04:23.190 --> 04:25.190
他就要问你这个问题

04:25.190 --> 04:28.190
那么现在仅仅的记住

04:28.190 --> 04:30.190
我们现在的要做的事情

04:30.190 --> 04:31.190
而做的事情是什么呢

04:31.190 --> 04:32.190
我不是说

04:32.190 --> 04:34.190
希望给这个A加Rave

04:34.190 --> 04:35.190
我是希望呢

04:35.190 --> 04:37.190
给这个A加Rave过后呢

04:37.190 --> 04:38.190
他把这个Rave呢

04:38.190 --> 04:39.190
附着到谁

04:39.190 --> 04:42.190
附着到它内部的东西上面去

04:42.190 --> 04:44.190
那么这个时候怎么做呢

04:44.190 --> 04:45.190
这个时候呢

04:45.190 --> 04:47.190
我们可以这样子来玩

04:47.190 --> 04:49.190
给这个函数组件注意听啊

04:49.190 --> 04:51.190
这里一块非常非常的绕

04:51.190 --> 04:54.190
如果你前边实在是我建议大家

04:54.190 --> 04:55.190
就是专心听

04:55.190 --> 04:56.190
能够听懂的话

04:56.190 --> 04:57.190
尽量听

04:57.190 --> 04:59.190
如果你实在听不懂的话

04:59.190 --> 05:00.190
你后边记住

05:00.190 --> 05:02.190
我们平时用转发Rave的时候

05:02.190 --> 05:04.190
什么样的场景

05:04.190 --> 05:06.190
一般在什么场景下边

05:06.190 --> 05:08.190
使用转发Rave就行了

05:08.190 --> 05:10.190
那么前面尽量注意听啊

05:10.190 --> 05:12.190
我们现在要做的事情是

05:12.190 --> 05:14.190
把这个东西

05:14.190 --> 05:17.190
印射到这个A的内部去

05:17.190 --> 05:18.190
印射到A的内部去

05:18.190 --> 05:20.190
怎么来做这个印射呢

05:20.190 --> 05:21.190
第一步

05:21.190 --> 05:23.630
这不是个函数吗

05:23.630 --> 05:24.630
对不对

05:24.630 --> 05:25.630
不是个函数组件吗

05:25.630 --> 05:26.630
好

05:26.630 --> 05:27.630
OK

05:27.630 --> 05:28.630
我们使用React里面

05:28.630 --> 05:30.630
给我们提供的一个方法

05:30.630 --> 05:31.630
什么方法呢

05:31.630 --> 05:33.630
叫做ForwardRave

05:33.630 --> 05:35.630
使用这么个方法

05:35.630 --> 05:37.630
这个方法

05:37.630 --> 05:39.630
它做什么事情呢

05:39.630 --> 05:40.630
它有

05:40.630 --> 05:41.630
它这边传上

05:41.630 --> 05:42.630
它有个参数

05:42.630 --> 05:43.630
它有个参数

05:43.630 --> 05:45.630
它这个参数呢

05:45.630 --> 05:48.460
它做什么

05:48.460 --> 05:50.460
ForwardRave方法

05:50.460 --> 05:53.460
第一个就是参数

05:53.460 --> 05:55.460
传递的是

05:55.460 --> 05:58.460
传递的是函数组件

05:58.460 --> 06:00.460
一传递的是一个函数组件

06:00.460 --> 06:01.460
就是它的参数

06:01.460 --> 06:07.460
返回一个新的组件

06:07.460 --> 06:09.460
返回一个新的组件

06:09.460 --> 06:11.460
也就是它的参数是什么

06:11.460 --> 06:13.460
参数就是一个函数组件

06:13.460 --> 06:15.460
A扔进去就完成了

06:15.460 --> 06:16.460
返回的是一个什么呢

06:16.460 --> 06:18.460
返回的是一个新的组件

06:18.460 --> 06:19.460
6A

06:19.460 --> 06:20.460
对方说

06:20.460 --> 06:23.460
我们用一个6A

06:23.460 --> 06:26.460
然后它做了一件非常神奇的事情

06:26.460 --> 06:28.460
什么神奇的事情呢

06:28.460 --> 06:29.460
这个A的使用

06:29.460 --> 06:30.460
跟这个6A差不多

06:30.460 --> 06:31.460
你可以认为

06:31.460 --> 06:32.460
这就是个高阶组件

06:32.460 --> 06:33.460
它是个函数吗

06:33.460 --> 06:34.460
给它一个组件

06:34.460 --> 06:35.460
返回一个新的组件

06:35.460 --> 06:36.460
对吧

06:36.460 --> 06:38.460
它就是个函数

06:38.460 --> 06:39.460
传递

06:39.460 --> 06:40.460
函数组件

06:40.460 --> 06:41.460
注意

06:41.460 --> 06:42.460
这传递的是函数组件

06:42.460 --> 06:43.460
注意

06:43.460 --> 06:44.460
传递的是函数组件

06:44.460 --> 06:46.460
传递函数组件

06:46.460 --> 06:50.460
A得到一个新组件

06:50.460 --> 06:51.460
6A

06:51.460 --> 06:53.460
得到一个新的组件

06:53.460 --> 06:54.460
6A

06:54.460 --> 06:56.460
然后呢

06:56.460 --> 06:57.460
这个函数组件

06:57.460 --> 06:58.460
A扔过去了

06:58.460 --> 06:59.460
对吧

06:59.460 --> 07:00.460
这个6A得到了

07:00.460 --> 07:01.460
那么接下来

07:01.460 --> 07:02.460
我们使用的是什么呢

07:02.460 --> 07:04.460
使用的是6A

07:04.460 --> 07:05.460
得到这个新的组件

07:05.460 --> 07:06.460
这个新的组件用法

07:06.460 --> 07:08.460
跟这个函数组件一模一样

07:08.460 --> 07:09.460
你这里写的什么用法

07:09.460 --> 07:10.460
它这里又是什么用法

07:10.460 --> 07:11.460
因为跟我们之前写的

07:11.460 --> 07:12.460
高解组件差不多

07:12.460 --> 07:13.460
它会远风不动的

07:13.460 --> 07:14.460
把我们给它传递的

07:14.460 --> 07:15.460
乱七八糟的东西

07:15.460 --> 07:16.460
都扔给A

07:16.460 --> 07:17.460
比方说A里边

07:17.460 --> 07:18.460
A里边还有一个Span

07:18.460 --> 07:20.460
Span里边

07:20.460 --> 07:22.460
这里面还要写

07:22.460 --> 07:23.460
Propster

07:23.460 --> 07:24.460
Words

07:24.460 --> 07:28.220
就是一些

07:28.220 --> 07:29.220
就是一些属性内容

07:29.220 --> 07:30.220
属性内容

07:30.220 --> 07:31.220
比方说吧

07:31.220 --> 07:32.220
那么我们这里

07:32.220 --> 07:33.220
比方说

07:33.220 --> 07:35.220
它传的一个Words

07:35.220 --> 07:36.220
随便敢写一个

07:36.220 --> 07:37.220
保存

07:37.220 --> 07:38.220
你看这个6A

07:38.220 --> 07:39.220
跟那个S一样的

07:39.220 --> 07:40.220
看到没

07:40.220 --> 07:41.220
给S一样的

07:42.220 --> 07:43.220
那么接下来

07:44.220 --> 07:46.220
有一件神奇的事情发生了

07:46.220 --> 07:48.220
什么神奇的事情的

07:48.220 --> 07:49.220
当我们给这个

07:49.220 --> 07:51.220
得到了新的组件

07:51.220 --> 07:52.220
给这个新的组件

07:52.220 --> 07:54.220
是使用Rave的时候

07:54.220 --> 07:55.220
我们得到了

07:55.220 --> 07:57.220
不是这个新的组件本身

07:57.220 --> 07:59.220
得到了不是新的组件本身

07:59.220 --> 08:00.220
咱们来看一下吧

08:00.220 --> 08:02.220
看一下这个组件结构

08:03.220 --> 08:04.220
我们可以看到

08:04.220 --> 08:05.220
这里边

08:05.220 --> 08:06.220
它加那个

08:06.220 --> 08:07.220
就是相当于是高解组件

08:07.220 --> 08:08.220
对吧

08:08.220 --> 08:09.220
给掏了一层对不对

08:09.220 --> 08:10.220
跟我们之前学的

08:10.220 --> 08:11.220
掏了一层

08:11.220 --> 08:13.220
一个ForwardRaveA

08:13.220 --> 08:14.220
看到没

08:14.220 --> 08:16.220
掏了一个这么一个东西

08:16.220 --> 08:17.220
然后呢

08:17.220 --> 08:18.220
现在

08:18.220 --> 08:20.220
是这么一回事

08:20.220 --> 08:21.220
现在呢

08:21.220 --> 08:22.220
你如果给

08:22.220 --> 08:23.220
这个新的组件

08:23.220 --> 08:25.220
传递Rave的话

08:25.220 --> 08:27.220
你给它传递Rave的话

08:27.220 --> 08:28.220
不要了

08:28.220 --> 08:29.220
我们再看一下

08:29.220 --> 08:30.220
App里边

08:30.220 --> 08:31.220
这里看不见

08:31.220 --> 08:32.220
总之我们给它

08:32.220 --> 08:33.220
传递这个Rave

08:33.220 --> 08:34.220
给它传递一个Rave

08:34.220 --> 08:35.220
看到没

08:35.220 --> 08:36.220
你给它传了一个Rave进去

08:36.220 --> 08:37.220
传了Rave的话

08:37.220 --> 08:39.220
我这得到的

08:39.220 --> 08:40.220
是什么呢

08:40.220 --> 08:41.220
这得到的

08:41.220 --> 08:43.220
这得到的啥都不是

08:43.220 --> 08:44.220
啥都不是

08:45.220 --> 08:47.850
看一下吧

08:48.850 --> 08:49.850
comment

08:49.850 --> 08:50.850
comment

08:50.850 --> 08:51.850
comment

08:51.850 --> 08:52.850
comment

08:52.850 --> 08:53.850
comment

08:53.850 --> 08:54.850
comment

08:54.850 --> 08:55.850
comment

08:55.850 --> 08:56.850
comment

08:56.850 --> 08:57.850
好

08:57.850 --> 08:58.850
我们这里输出

08:58.850 --> 08:59.850
输出

08:59.850 --> 09:00.850
输出

09:00.850 --> 09:01.850
输出什么

09:01.850 --> 09:02.850
保存

09:02.850 --> 09:03.850
保存

09:03.850 --> 09:04.850
输出的

09:04.850 --> 09:05.850
是不是now

09:05.850 --> 09:06.850
对不对

09:06.850 --> 09:07.850
得到的啥都不是

09:07.850 --> 09:08.850
因为我们之前是不是

09:08.850 --> 09:09.850
完全不一样了

09:09.850 --> 09:10.850
之前我们得到

09:10.850 --> 09:11.850
我们之前做的是

09:11.850 --> 09:12.850
什么事情

09:12.850 --> 09:13.850
它这里报错了

09:13.850 --> 09:14.850
先不管报什么错

09:14.850 --> 09:16.850
我们之前传递的Rave

09:16.850 --> 09:17.850
它是不是得到

09:17.850 --> 09:18.850
要么就得到动物对象

09:18.850 --> 09:19.850
要么就得到一个内的

09:19.850 --> 09:20.850
实力

09:20.850 --> 09:21.850
对吧

09:21.850 --> 09:22.850
它总之要得到一个东西

09:22.850 --> 09:23.850
但是你看这里

09:23.850 --> 09:24.850
是不是啥都没得到

09:24.850 --> 09:25.850
对不对

09:25.850 --> 09:26.850
啥都没有得到

09:26.850 --> 09:28.850
这是怎么回事呢

09:28.850 --> 09:29.850
这就是Rave

09:29.850 --> 09:30.850
转发了功效

09:30.850 --> 09:32.850
它就让你去自己

09:32.850 --> 09:33.850
来控制这个Rave

09:33.850 --> 09:34.850
这个Rave到底要

09:34.850 --> 09:35.850
附着给谁

09:35.850 --> 09:37.850
我这里传了个Rave进去

09:37.850 --> 09:38.850
这个Rave

09:38.850 --> 09:39.850
这个引用

09:39.850 --> 09:40.850
要引用谁呢

09:40.850 --> 09:41.850
它现在就不再是

09:41.850 --> 09:43.850
直接引用它了

09:43.850 --> 09:44.850
反复这个新的组建

09:44.850 --> 09:46.850
不再是引用这个组建了

09:46.850 --> 09:47.850
而去引用谁呢

09:47.850 --> 09:48.850
你要自行控制

09:48.850 --> 09:49.850
你没有控制

09:49.850 --> 09:50.850
那它得到就是那

09:50.850 --> 09:51.850
啥都没有引用

09:51.850 --> 09:52.850
看没有

09:52.850 --> 09:53.850
谁也没有引用

09:53.850 --> 09:55.850
那么你怎么来自行控制呢

09:55.850 --> 09:57.850
看到上面

09:57.850 --> 09:58.850
在这里

09:58.850 --> 09:59.850
当你传这么一个

09:59.850 --> 10:01.850
寒树组建的时候

10:01.850 --> 10:02.850
你还

10:02.850 --> 10:03.850
现在呢

10:03.850 --> 10:04.850
就可以得到

10:04.850 --> 10:05.850
第二个参数了

10:05.850 --> 10:06.850
第二个参数是啥

10:06.850 --> 10:08.850
就是它的Rave的值

10:08.850 --> 10:10.850
第二个参数就是Rave的值

10:10.850 --> 10:11.850
咱们打印一下

10:11.850 --> 10:12.850
第二个参数

10:12.850 --> 10:13.850
在这里打印

10:13.850 --> 10:14.850
Ref

10:15.850 --> 10:16.850
看一下

10:16.850 --> 10:17.850
我们把这个注释了

10:17.850 --> 10:18.850
好看着

10:18.850 --> 10:19.850
当我们给它

10:19.850 --> 10:21.850
复制Rave的时候

10:21.850 --> 10:22.850
它这里的运行

10:22.850 --> 10:23.850
它最终会运行

10:23.850 --> 10:24.850
寒树组建

10:24.850 --> 10:25.850
会运行这个寒树组建

10:25.850 --> 10:27.850
那么这个寒树组建里边

10:27.850 --> 10:28.850
Rave

10:28.850 --> 10:29.850
它会把这里给它的Rave

10:29.850 --> 10:30.850
传进来

10:30.850 --> 10:32.850
它会把这个Rave对象

10:32.850 --> 10:33.850
它不就是个对象吗

10:33.850 --> 10:34.850
我们之前说过

10:34.850 --> 10:36.850
Rave就是一个普普通通的对象

10:36.850 --> 10:37.850
没有什么特别的

10:37.850 --> 10:39.850
当然这里是寒树也是一样

10:39.850 --> 10:41.850
寒树也本质上也是对象

10:41.850 --> 10:42.850
它会把这个对象传进来

10:42.850 --> 10:44.850
让你自己去控制

10:44.850 --> 10:46.850
之前是不行的

10:46.850 --> 10:48.850
之前你在一个组建里边

10:48.850 --> 10:49.850
你怎么能得到外表

10:49.850 --> 10:50.850
给它加的Rave

10:50.850 --> 10:52.850
就在这里给它加的Rave

10:52.850 --> 10:54.850
你在这里面能得到吗

10:54.850 --> 10:55.850
肯定是得不到的

10:55.850 --> 10:56.850
肯定是得不到的

10:56.850 --> 10:57.850
那么现在呢

10:57.850 --> 10:59.850
用了Rave转发之后就可以了

10:59.850 --> 11:00.850
再来过一次这个流程

11:00.850 --> 11:02.850
得到了是一个新的组建

11:02.850 --> 11:04.850
得到了是一个新的组建

11:04.850 --> 11:05.850
我们还是画个图吧

11:05.850 --> 11:06.850
这个不画图的话

11:06.850 --> 11:08.850
脑袋要容易晕

11:08.850 --> 11:13.760
这里就是特别的绕

11:13.760 --> 11:15.760
看着

11:15.760 --> 11:18.760
我们这里是一个寒树组建

11:18.760 --> 11:19.760
是一个寒树组建

11:19.760 --> 11:20.760
这个组建A

11:20.760 --> 11:22.760
这个组建A

11:22.760 --> 11:23.760
然后呢

11:23.760 --> 11:25.760
现在通过这个

11:25.760 --> 11:27.760
通过这个Forward Rave

11:27.760 --> 11:28.760
把这个A传进去

11:28.760 --> 11:29.760
得到一个新的组建

11:29.760 --> 11:30.760
6A

11:30.760 --> 11:32.760
它会得到这么一个新的组建

11:33.760 --> 11:34.760
6A

11:34.760 --> 11:36.760
那么6A从哪里来的

11:36.760 --> 11:38.760
是不通过Forward Rave产生的

11:38.760 --> 11:40.760
通过这个方法

11:40.760 --> 11:41.760
Forward Rave产生的组建

11:41.760 --> 11:43.760
它有一个非常神奇的特点

11:43.760 --> 11:45.760
就是你当你给它一个

11:45.760 --> 11:47.760
当你给它一个Rave的时候

11:48.760 --> 11:50.760
它不会把它引用成自己

11:50.760 --> 11:52.760
这个Rave到底指向谁

11:52.760 --> 11:53.760
它是不确定的

11:53.760 --> 11:55.760
你给它一个Rave的时候

11:56.760 --> 11:58.760
比方说Rave等于

11:59.760 --> 12:01.760
那么当你给它这个Rave的时候

12:01.760 --> 12:02.760
我们之前

12:02.760 --> 12:04.760
Rave它就是个引用

12:04.760 --> 12:05.760
得到它的对象

12:05.760 --> 12:06.760
它是真实的动物元素

12:06.760 --> 12:07.760
它就是真实的动物元素

12:07.760 --> 12:09.760
那如果它是一个内组建的话

12:09.760 --> 12:11.760
得到内组建的对象

12:11.760 --> 12:12.760
但是现在不会了

12:12.760 --> 12:13.760
因为这个组建比较特殊

12:13.760 --> 12:15.760
它是通过Forward Rave产生的

12:15.760 --> 12:17.760
它会怎么做呢

12:17.760 --> 12:19.760
它会把这个Rave交给这个A

12:19.760 --> 12:21.760
交给这个寒树组建A

12:22.760 --> 12:25.760
它会把这个Rave交给它

12:25.760 --> 12:26.760
让它去处理

12:26.760 --> 12:28.760
把这个对象给它

12:29.760 --> 12:30.760
把这个对象给它

12:30.760 --> 12:31.760
这是个对象

12:31.760 --> 12:32.760
Rave无非就是个对象

12:32.760 --> 12:34.760
它把这个对象给它

12:34.760 --> 12:35.760
让它来处理这个对象

12:35.760 --> 12:36.760
这个对象到底指向谁

12:36.760 --> 12:37.760
随便你

12:39.760 --> 12:40.760
你看这个是吧

12:40.760 --> 12:42.760
那么现在就把Rave交给它了

12:42.760 --> 12:43.760
怎么来交给它的

12:43.760 --> 12:44.760
通过第二个参数

12:44.760 --> 12:45.760
注意

12:45.760 --> 12:47.760
你只有通过这个寒树来得到了A

12:47.760 --> 12:49.760
把这个A寒树传进去

12:49.760 --> 12:51.760
你才能够得到第二个参数

12:51.760 --> 12:52.760
否则的话你得不到

12:52.760 --> 12:54.760
你是得不到第二个参数Rave的

12:55.760 --> 12:57.760
那么现在就可以得到了

12:57.760 --> 12:58.760
你看我们再来一次

12:58.760 --> 12:59.760
我把Rave给它

13:00.760 --> 13:02.760
它由于它是通过Four World Rave产生的

13:02.760 --> 13:04.760
因此它自己不会用这个Rave

13:04.760 --> 13:06.760
你现在得到Rave得不到

13:06.760 --> 13:07.760
它会做什么事情呢

13:07.760 --> 13:09.760
它直接把你这个Rave交给谁

13:09.760 --> 13:11.760
交给这个寒树A来处理

13:11.760 --> 13:12.760
交给寒树A来处理

13:12.760 --> 13:13.760
它数一遍怎么处理

13:13.760 --> 13:14.760
I 咋处理

13:14.760 --> 13:15.760
咋处理

13:15.760 --> 13:16.760
看着保存一下

13:16.760 --> 13:17.760
你看

13:17.760 --> 13:18.760
得到是不是Current Now

13:18.760 --> 13:19.760
对不对

13:19.760 --> 13:20.760
刚才爆错

13:20.760 --> 13:21.760
刚才爆什么错了

13:21.760 --> 13:22.760
刚才告诉你

13:22.760 --> 13:24.760
你既然在使用Rave转发

13:24.760 --> 13:26.760
但是你给它这个寒树

13:26.760 --> 13:27.760
你给它这个寒树

13:27.760 --> 13:28.760
它只有一个参数

13:28.760 --> 13:30.760
它根本就转发不了Rave

13:30.760 --> 13:32.760
它说

13:32.760 --> 13:34.760
Four World Rave Render方形式

13:34.760 --> 13:37.760
你给它的寒树必须要

13:37.760 --> 13:39.760
接收两个参数

13:40.760 --> 13:41.760
一个是属相

13:41.760 --> 13:42.760
一个是Rave

13:42.760 --> 13:44.760
但是你只用了

13:44.760 --> 13:45.760
你忘记了

13:45.760 --> 13:47.760
就是使用Rave这个参数了

13:47.760 --> 13:49.760
刚才爆了这个错

13:49.760 --> 13:50.760
那么现在加上

13:50.760 --> 13:51.760
那么现在

13:51.760 --> 13:52.760
当我们使用

13:52.760 --> 13:53.760
转发过后

13:53.760 --> 13:54.760
当我们再一次

13:54.760 --> 13:55.760
再一次使用这个组件的时候

13:55.760 --> 13:57.760
它除了把这些属性传过来

13:57.760 --> 13:58.760
我们把这个属性

13:58.760 --> 13:59.760
属性也打印出来

13:59.760 --> 14:01.760
我们现在把这个Props

14:01.760 --> 14:02.760
打印出来

14:02.760 --> 14:03.760
来看一下

14:03.760 --> 14:04.760
看一下

14:04.760 --> 14:05.760
保存

14:05.760 --> 14:06.760
咱们看一下Props里边

14:06.760 --> 14:07.760
是不是只有World

14:07.760 --> 14:09.760
Rave又是个展现的对象

14:09.760 --> 14:10.760
它们两者

14:10.760 --> 14:12.760
其实你可以认为Rave

14:12.760 --> 14:14.760
是Props里边的一个特殊的属性

14:14.760 --> 14:15.760
不过这个属性

14:15.760 --> 14:17.760
是不允许你放温的

14:17.760 --> 14:18.760
是不允许你放温的

14:18.760 --> 14:19.760
你把这个属性展开

14:19.760 --> 14:21.760
其实是有一个Rave的

14:21.760 --> 14:22.760
是有一个Rave的

14:22.760 --> 14:23.760
你点击一下

14:23.760 --> 14:24.760
它的老师杭里范

14:24.760 --> 14:25.760
他告诉你

14:25.760 --> 14:26.760
属性的你是不能获取的

14:26.760 --> 14:28.760
你是不能获取这个属性的

14:28.760 --> 14:30.760
意思吧

14:30.760 --> 14:31.760
实际上

14:31.760 --> 14:33.760
因为你看Rave的使用

14:33.760 --> 14:34.760
它是不是当成属性来传递的

14:34.760 --> 14:35.760
对不对

14:35.760 --> 14:36.760
它当成属性来传递的

14:36.760 --> 14:38.760
但是你不允许你获取

14:38.760 --> 14:40.760
不允许你获取

14:40.760 --> 14:41.760
OK

14:41.760 --> 14:42.760
那么现在

14:42.760 --> 14:43.760
由于

14:43.760 --> 14:44.760
我们再来一次

14:44.760 --> 14:45.760
千万要记得

14:45.760 --> 14:47.760
这里是怎么回事

14:48.760 --> 14:49.760
得到一个新的组件

14:49.760 --> 14:50.760
那么这个新的组件

14:50.760 --> 14:51.760
有个特点就是

14:51.760 --> 14:53.760
你给它传递的Rave值

14:53.760 --> 14:55.760
你给它传递的Rave值

14:55.760 --> 14:57.760
它会

14:57.760 --> 14:59.760
在使用它具体的A

14:59.760 --> 15:00.760
组件的时候

15:00.760 --> 15:01.760
把Rave值当成参数传过去

15:01.760 --> 15:03.760
让你自行来处理

15:03.760 --> 15:04.760
而不像以前的样子

15:04.760 --> 15:05.760
给它个Rave

15:05.760 --> 15:06.760
就可以得到它的对象

15:06.760 --> 15:07.760
对吧

15:07.760 --> 15:08.760
那肯定不是这样子

15:08.760 --> 15:10.760
它会把它当成一个参数传过去

15:10.760 --> 15:11.760
让你自行来处理这个Rave

15:11.760 --> 15:12.760
那么这里的Rave

15:12.760 --> 15:13.760
我们可以得到

15:13.760 --> 15:14.760
它就是一个对象

15:14.760 --> 15:16.760
就是别人传过来的对象

15:16.760 --> 15:18.760
也就是这个地方的Rave

15:18.760 --> 15:19.760
这个参数的Rave

15:19.760 --> 15:20.760
跟这里的Rave是一样的

15:20.760 --> 15:21.760
对吧

15:21.760 --> 15:22.760
它一层层传过去

15:22.760 --> 15:25.760
把这个东西传给它的属性Rave

15:25.760 --> 15:26.760
传给它的属性

15:26.760 --> 15:27.760
但是我们平时说

15:27.760 --> 15:29.760
Rave并不是一个属性

15:29.760 --> 15:31.760
但是在这种特殊情况下

15:31.760 --> 15:32.760
你可以把它当成一个属性

15:32.760 --> 15:33.760
在这种特殊情况下

15:33.760 --> 15:35.760
就是通过ForwardRave

15:35.760 --> 15:36.760
得到的组件

15:36.760 --> 15:37.760
你可以认为Rave

15:37.760 --> 15:38.760
就是一个普通属性

15:38.760 --> 15:40.760
它没有什么任何的特殊意义

15:40.760 --> 15:41.760
然后这个属性

15:41.760 --> 15:42.760
它会做什么呢

15:42.760 --> 15:43.760
它会把这个属性

15:43.760 --> 15:44.760
传给它

15:44.760 --> 15:45.760
传给这个组件

15:45.760 --> 15:46.760
你包装了这个组件

15:46.760 --> 15:48.760
那么在这里边

15:48.760 --> 15:49.760
你要挨做什么事情

15:49.760 --> 15:50.760
就做

15:50.760 --> 15:51.760
那么现在我们把Rave

15:51.760 --> 15:52.760
一绑零到这

15:52.760 --> 15:53.760
看着

15:54.760 --> 15:55.760
一绑零到这

15:56.760 --> 15:57.760
那么现在你看

15:57.760 --> 15:59.760
A11是一个正常的组件

15:59.760 --> 16:01.760
它不是通过ForwardRave得到的

16:01.760 --> 16:02.760
它是一个正常的组件

16:02.760 --> 16:03.760
那么这个Rave

16:03.760 --> 16:04.760
是不是就变成了

16:04.760 --> 16:05.760
它指向谁

16:05.760 --> 16:06.760
是不是指向A11了

16:06.760 --> 16:08.760
由于这个对象

16:08.760 --> 16:09.760
跟这个对象是一样的

16:09.760 --> 16:11.760
它经过这么一层转发

16:11.760 --> 16:13.760
转发过来过后

16:13.760 --> 16:14.760
那么这个地方

16:14.760 --> 16:15.760
这个对象里面的Corrent

16:15.760 --> 16:18.760
它也会指向A11

16:18.760 --> 16:20.760
就这里的AF

16:20.760 --> 16:21.760
它也会指向A11

16:21.760 --> 16:22.760
我们来看一下

16:22.760 --> 16:24.760
保存

16:24.760 --> 16:25.760
你看

16:25.760 --> 16:26.760
是不是指向A11了

16:26.760 --> 16:27.760
这样子一来

16:27.760 --> 16:29.760
我们就有机会

16:29.760 --> 16:32.760
我们就有机会

16:32.760 --> 16:34.760
就是把这个

16:34.760 --> 16:36.760
这里传的Rave

16:36.760 --> 16:39.760
指向这个组件里边的东西

16:39.760 --> 16:40.760
我们就可以指向这个

16:40.760 --> 16:41.760
组件里边的东西

16:41.760 --> 16:43.760
和达到这么一个效果

16:43.760 --> 16:45.760
没有这个意思吧

16:45.760 --> 16:46.760
OK

16:46.760 --> 16:47.760
那么你看这个函数的特点

16:47.760 --> 16:48.760
这个函数的特点

16:48.760 --> 16:51.760
它就是这样子来操作的

16:51.760 --> 16:52.760
这是

16:52.760 --> 16:54.760
这种转发Rave的方式

16:54.760 --> 16:55.760
可以完成这么一个

16:55.760 --> 16:57.760
特殊的效果

16:57.760 --> 17:01.760
那么这是函数组件

17:01.760 --> 17:03.760
可以把Rave来进行转发

17:03.760 --> 17:04.760
你看这个A是函数组件

17:04.760 --> 17:05.760
对吧

17:05.760 --> 17:06.760
那如果它是个内组件

17:06.760 --> 17:07.760
行不行

17:07.760 --> 17:08.760
不行

17:08.760 --> 17:10.760
咱们这里做个笔记

17:10.760 --> 17:12.760
Forward的参数

17:12.760 --> 17:15.760
传的的是函数组件

17:15.760 --> 17:19.760
不能是内组件

17:19.760 --> 17:22.760
并且函数组件

17:22.760 --> 17:27.760
需要有

17:27.760 --> 17:30.760
有第二个参数

17:30.760 --> 17:33.760
来得到Rave

17:33.760 --> 17:35.760
来得到Rave

17:35.760 --> 17:36.760
好

17:36.760 --> 17:39.760
那如果你必须是一个内组件

17:39.760 --> 17:41.760
又咋办呢

17:41.760 --> 17:43.760
那么如果你必须是一个内组件的话

17:43.760 --> 17:45.760
咱们这里把它copy一下

17:45.760 --> 17:46.760
比方说

17:46.760 --> 17:48.760
那你肯定要处理一下了

17:48.760 --> 17:49.760
肯定要处理一下了

17:49.760 --> 17:50.760
你不处理肯定不行

17:50.760 --> 17:51.760
比方说

17:51.760 --> 17:52.760
这个组件A

17:52.760 --> 17:54.760
它就是个Rave组件

17:54.760 --> 17:55.760
就是个内组件

17:55.760 --> 17:56.760
也要实现同样的功能

17:56.760 --> 17:58.760
我要让最终的Rave

17:58.760 --> 17:59.760
指向这

17:59.760 --> 18:00.760
就是给我的Rave

18:00.760 --> 18:01.760
要指向这

18:01.760 --> 18:03.760
那么我们来怎么来处理呢

18:03.760 --> 18:04.760
看着

18:04.760 --> 18:06.760
我们这里写个内组件

18:06.760 --> 18:07.760
A

18:07.760 --> 18:08.760
ext

18:08.760 --> 18:09.760
react

18:09.760 --> 18:10.760
component

18:11.760 --> 18:13.760
一个内组件

18:13.760 --> 18:14.760
Render

18:14.760 --> 18:15.760
好

18:15.760 --> 18:18.580
这里呢

18:18.580 --> 18:20.580
返回出去

18:20.580 --> 18:21.580
好

18:21.580 --> 18:22.580
这是个内组件对吧

18:22.580 --> 18:23.580
内组件

18:23.580 --> 18:24.580
然后呢

18:24.580 --> 18:26.580
这里应该是this props

18:26.580 --> 18:27.580
然后呢

18:27.580 --> 18:28.580
这里是Rave

18:28.580 --> 18:29.580
这里得不到

18:29.580 --> 18:30.580
拿不到

18:30.580 --> 18:31.580
拿不到这个Rave

18:31.580 --> 18:32.580
好

18:32.580 --> 18:34.580
那么这里该怎么来操作呢

18:34.580 --> 18:35.580
这里

18:35.580 --> 18:36.580
以前在这里呢

18:36.580 --> 18:37.580
只能这样子来玩

18:37.580 --> 18:38.580
就是说

18:38.580 --> 18:39.580
你希望呢

18:39.580 --> 18:40.580
它的属性里面

18:40.580 --> 18:41.580
有一个特殊的属性

18:41.580 --> 18:42.580
把这个Rave的对象

18:42.580 --> 18:43.580
给我传过来

18:43.580 --> 18:45.580
以前就不能用这个属性名了

18:45.580 --> 18:46.580
比方说

18:46.580 --> 18:47.580
我们这里Props里面

18:47.580 --> 18:48.580
有个特殊的属性

18:48.580 --> 18:50.580
叫做forward

18:50.580 --> 18:51.580
Rave

18:51.580 --> 18:52.580
但是这个名字随便取

18:52.580 --> 18:53.580
取一个Rave1都可以

18:53.580 --> 18:54.580
随便取个名字

18:54.580 --> 18:55.580
也就是说

18:55.580 --> 18:56.580
我希望把这个Rave对象

18:56.580 --> 18:58.580
通过一个普通的属性传过来

18:58.580 --> 18:59.580
那么我再把这个属性

18:59.580 --> 19:01.580
加到这个HE

19:01.580 --> 19:02.580
让这个

19:02.580 --> 19:03.580
比方说

19:03.580 --> 19:04.580
我们到时候传

19:04.580 --> 19:05.580
因为你不要想太多

19:05.580 --> 19:06.580
这个Rave

19:06.580 --> 19:07.580
它就是一个对象

19:07.580 --> 19:08.580
一个普普通的对象

19:08.580 --> 19:09.580
我们之前说过

19:09.580 --> 19:10.580
就是这么一个东西

19:10.580 --> 19:11.580
就是这么一个对象

19:11.580 --> 19:13.580
你把这个对象传过来

19:13.580 --> 19:14.580
那么我把这个对象

19:14.580 --> 19:15.580
来加到这

19:15.580 --> 19:17.580
现在这个对象的current

19:17.580 --> 19:18.580
是不是又指向这

19:18.580 --> 19:19.580
又指向这个HE

19:19.580 --> 19:20.580
对不对

19:20.580 --> 19:22.580
你通过一个普通属性传过来

19:22.580 --> 19:24.580
你只能这样走

19:24.580 --> 19:25.580
你只能这样走

19:25.580 --> 19:26.580
那么到时候用的时候

19:26.580 --> 19:27.580
你怎么用了

19:27.580 --> 19:28.580
那到时候你用的时候

19:28.580 --> 19:29.580
就用这个A

19:29.580 --> 19:30.580
用这个A的时候

19:30.580 --> 19:31.580
你不能用这种方式了

19:31.580 --> 19:32.580
用这个A的时候

19:32.580 --> 19:33.580
你怎么用

19:33.580 --> 19:35.580
你这个A

19:35.580 --> 19:36.580
你这里用什么

19:36.580 --> 19:37.580
Rave1

19:37.580 --> 19:38.580
对不对

19:38.580 --> 19:39.580
看到没

19:39.580 --> 19:42.580
你把Rave1传进去

19:42.580 --> 19:43.580
不是要两个属性

19:43.580 --> 19:44.580
一个words

19:44.580 --> 19:45.580
一个Rave1对吧

19:45.580 --> 19:46.580
words没什么好说的

19:46.580 --> 19:47.580
你看Rave1

19:47.580 --> 19:48.580
就是一个普通属性

19:48.580 --> 19:50.580
就像ABC一样子

19:50.580 --> 19:52.580
非常普通的一个属性

19:52.580 --> 19:53.580
你把普通属性传过去

19:53.580 --> 19:54.580
就是个对象

19:54.580 --> 19:55.580
它把普通属性

19:55.580 --> 19:57.580
加到HE的Rave上面去

19:57.580 --> 19:58.580
这也完了

19:58.580 --> 20:00.580
也完事了

20:00.580 --> 20:01.580
那么现在我们得到的是

20:01.580 --> 20:02.580
看一下是啥

20:02.580 --> 20:04.580
是还是HE

20:04.580 --> 20:05.580
对不对

20:05.580 --> 20:06.580
这样子也可以搞定

20:06.580 --> 20:07.580
当然这样子的写法

20:08.580 --> 20:09.580
感觉怪怪的

20:09.580 --> 20:10.580
感觉怪怪的

20:10.580 --> 20:11.580
那么我们能不能处理一下

20:11.580 --> 20:12.580
也能像刚才那样子

20:12.580 --> 20:14.580
最终通过Rave来使用了

20:14.580 --> 20:15.580
你要处理的话

20:15.580 --> 20:16.580
肯定还是可以处理

20:16.580 --> 20:18.580
看着我们这样处理

20:18.580 --> 20:19.580
我们这样处理

20:19.580 --> 20:21.580
Const6A

20:21.580 --> 20:25.020
6A

20:25.020 --> 20:26.020
6A通过什么

20:26.020 --> 20:28.020
通过reactor

20:28.020 --> 20:30.020
forward rave

20:30.020 --> 20:31.020
就是你要最终要通过

20:31.020 --> 20:32.020
Rave来传递的话

20:32.020 --> 20:33.020
它就必须要通过

20:33.020 --> 20:34.020
forward rave来得到

20:34.020 --> 20:35.020
因为只有得到了

20:35.020 --> 20:36.020
这个新的组件

20:36.020 --> 20:37.020
它才具有这样的功能

20:37.020 --> 20:38.020
它自己不做任何事情

20:38.020 --> 20:40.020
它只是把Rave给你转发

20:40.020 --> 20:42.020
转发到里面的函数里面去

20:42.020 --> 20:44.020
如果你是一个普通组件的话

20:44.020 --> 20:46.020
你肯定达不到这样的功能的

20:46.020 --> 20:47.020
达不到的

20:47.020 --> 20:48.020
只有forward rave

20:48.020 --> 20:49.020
返回了组件

20:49.020 --> 20:50.020
它才有这样的功能

20:50.020 --> 20:51.020
所以说毫无疑问

20:51.020 --> 20:52.020
你最终肯定还是要使用

20:52.020 --> 20:55.020
产生了这个新组件

20:55.020 --> 20:56.020
那么这个新组件里面

20:56.020 --> 20:57.020
怎么处理呢

20:57.020 --> 20:58.020
它这里不能传的

20:58.020 --> 20:59.020
它不能传这个AR

20:59.020 --> 21:00.020
你肯定不能这样子传的

21:00.020 --> 21:01.020
那怎么来处理呢

21:01.020 --> 21:03.020
我用一个函数包装一下

21:03.020 --> 21:06.020
Props

21:06.020 --> 21:08.020
还是Rave

21:08.020 --> 21:09.020
用函数

21:09.020 --> 21:11.020
它不知道传个函数组件进来

21:11.020 --> 21:12.020
这不就是个函数组件吗

21:12.020 --> 21:14.020
我返回啥

21:14.020 --> 21:16.020
返回是不是直接返回

21:16.020 --> 21:17.020
那个内组件就完事了

21:17.020 --> 21:18.020
对不对

21:18.020 --> 21:20.020
咱们直接返回内组件

21:20.020 --> 21:21.020
包装一下

21:21.020 --> 21:24.020
返回内组件就完事了

21:24.020 --> 21:25.020
内组件

21:25.020 --> 21:26.020
然后把属性里边

21:26.020 --> 21:27.020
你不是传了属性进来吗

21:27.020 --> 21:28.020
还有Rave

21:28.020 --> 21:33.020
把属性全部给你

21:33.020 --> 21:35.020
然后把Rave值

21:35.020 --> 21:36.020
换成什么

21:36.020 --> 21:37.020
换成Rave1

21:37.020 --> 21:38.020
你不是需要Rave1吗

21:38.020 --> 21:40.020
你不能直接传Rave

21:40.020 --> 21:41.020
因为你直接传Rave的话

21:41.020 --> 21:42.020
它有指向这个A的对象

21:42.020 --> 21:43.020
它是内组件

21:43.020 --> 21:45.020
它指向的是A的对象

21:45.020 --> 21:48.020
它就不是那个东西了

21:48.020 --> 21:49.020
明白的意思吗

21:49.020 --> 21:50.020
所以说这里

21:50.020 --> 21:51.020
你不能传Rave

21:51.020 --> 21:52.020
千万不能这样做

21:52.020 --> 21:53.020
你这样做的话

21:53.020 --> 21:55.020
你这里最终它指向的是A的对象

21:55.020 --> 21:56.020
它就不是A里边的东西了

21:56.020 --> 21:57.020
你看一下

21:57.020 --> 21:59.020
它指向的是A的对象

21:59.020 --> 22:00.020
好

22:00.020 --> 22:01.020
那你这里只要传

22:01.020 --> 22:02.020
要传Rave1

22:02.020 --> 22:04.020
因为Rave是个特殊的属性

22:04.020 --> 22:05.020
这个特殊的属性

22:05.020 --> 22:06.020
只有在这种情况下

22:06.020 --> 22:07.020
才会特殊处理

22:07.020 --> 22:08.020
只有在

22:08.020 --> 22:10.020
通过ForwardRave

22:10.020 --> 22:11.020
得到了组件里边

22:11.020 --> 22:13.020
它才会进行特殊处理

22:13.020 --> 22:15.020
其他的组件都是正常处理的

22:15.020 --> 22:17.020
这里如果你直接使用Rave的话

22:17.020 --> 22:19.020
得到的是A的对象

22:19.020 --> 22:20.020
我们这里要使用另外一个属性

22:20.020 --> 22:21.020
就是我们自己

22:21.020 --> 22:22.020
随便现在是一个属性

22:22.020 --> 22:24.020
哪怕ABC也都行

22:24.020 --> 22:25.020
ABC也都行

22:25.020 --> 22:26.020
这样子

22:26.020 --> 22:28.020
你不会遭受困扰了

22:28.020 --> 22:29.020
把这个对象

22:29.020 --> 22:31.020
也通过这个属性传给它

22:31.020 --> 22:32.020
那么你看

22:32.020 --> 22:33.020
你看到这边来

22:33.020 --> 22:35.020
它除了有这些正常的属性之外

22:35.020 --> 22:37.020
是不是还多了一个ABC属性

22:37.020 --> 22:38.020
把ABC这个属性值

22:38.020 --> 22:39.020
作为Rave

22:39.020 --> 22:41.020
D给这个HE

22:41.020 --> 22:42.020
那么ABC的对象

22:42.020 --> 22:45.020
它就会指向这个H1元素

22:45.020 --> 22:46.020
保存

22:47.020 --> 22:48.020
对吧

22:48.020 --> 22:49.020
没问题吧

22:49.020 --> 22:50.020
你在这样子绕一圈

22:50.020 --> 22:51.020
绕一绕

22:51.020 --> 22:53.020
这就是Rave的转发

22:53.020 --> 22:54.020
其实

22:54.020 --> 22:56.020
就这点知识

22:56.020 --> 22:57.020
就这点知识

22:57.020 --> 22:59.020
虽然说有点绕

22:59.020 --> 23:01.020
但是东西其实不多

23:01.020 --> 23:02.020
就是通过它

23:02.020 --> 23:03.020
再得到了新的组件

23:03.020 --> 23:05.020
这个组件比较特殊

23:05.020 --> 23:06.020
你给它的Rave指呢

23:06.020 --> 23:07.020
它既不是得到

23:07.020 --> 23:08.020
跟真摄动

23:08.020 --> 23:09.020
也不是得到

23:09.020 --> 23:11.020
就是内组件的对象

23:11.020 --> 23:13.020
而是它会运行一个函数

23:13.020 --> 23:15.020
运行你之前传的函数

23:15.020 --> 23:16.020
对吧

23:16.020 --> 23:17.020
它会运行这个函数

23:17.020 --> 23:19.020
然后把Rave当成

23:19.020 --> 23:20.020
函数传进去

23:20.020 --> 23:21.020
要怎么玩你自己去玩

23:21.020 --> 23:22.020
它不管

23:23.020 --> 23:24.020
那么有这个东西

23:24.020 --> 23:25.020
有什么意义呢

23:26.020 --> 23:27.020
它是这样子

23:27.020 --> 23:29.020
咱们之前比方说

23:29.020 --> 23:31.020
我们之前不是写了一些高階组件吗

23:31.020 --> 23:32.020
对吧

23:32.020 --> 23:33.020
看一下

23:33.020 --> 23:34.020
回归一下

23:34.020 --> 23:35.020
我就不讲了

23:35.020 --> 23:36.020
高階组件

23:36.020 --> 23:37.020
反回一个内组件

23:37.020 --> 23:38.020
传一个组件进来

23:38.020 --> 23:39.020
我反回一个内组件

23:39.020 --> 23:40.020
给包装一下

23:40.020 --> 23:41.020
包装一下

23:41.020 --> 23:43.020
最后我还是把这个组件

23:43.020 --> 23:44.020
远风不动的反回过去

23:45.020 --> 23:46.020
这意思

23:46.020 --> 23:47.020
比方说

23:47.020 --> 23:48.020
有这么一个组件

23:48.020 --> 23:49.020
高階组件

23:49.020 --> 23:50.020
Wissnog

23:51.020 --> 23:52.020
在高階组件里面

23:52.020 --> 23:54.020
它又会出现一个问题

23:54.020 --> 23:55.020
这个问题

23:55.020 --> 23:56.020
你想来想去

23:56.020 --> 23:57.020
只能通过它来处理

23:57.020 --> 23:58.020
如果高階组件的时候

23:58.020 --> 24:00.020
往往都会注意到这个问题

24:00.020 --> 24:01.020
这是什么问题呢

24:01.020 --> 24:03.020
这里我又copy一下

24:03.020 --> 24:07.530
把之前那个使用高階组件的代码拿过来

24:08.530 --> 24:11.530
这个Wissnog就行了

24:11.530 --> 24:12.530
其他不要了

24:12.530 --> 24:15.990
其他不要了

24:15.990 --> 24:16.990
就这样吧

24:22.060 --> 24:23.060
不要这儿

24:23.060 --> 24:24.060
你看

24:24.060 --> 24:25.060
这个Wissnog

24:25.060 --> 24:26.060
它是一个高階组件

24:26.060 --> 24:27.060
对吧

24:27.060 --> 24:28.060
这里没有第二参数

24:28.060 --> 24:29.060
就是我传一个组件进去

24:29.060 --> 24:31.060
你管我传的是哪组件

24:31.060 --> 24:32.060
管它是韩式组件也好

24:32.060 --> 24:33.060
还是内组件也好

24:33.060 --> 24:34.060
无所谓

24:34.060 --> 24:35.060
跟你没什么关系

24:35.060 --> 24:36.060
对吧

24:36.060 --> 24:37.060
我们看一下

24:38.060 --> 24:39.060
在这里

24:39.060 --> 24:40.060
在这里

24:41.060 --> 24:42.060
你看

24:42.060 --> 24:43.060
这里是两个内组件

24:43.060 --> 24:44.060
对吧

24:44.060 --> 24:45.060
两个内组件

24:45.060 --> 24:46.060
然后

24:46.060 --> 24:47.060
现在遇到这么一个情况

24:47.060 --> 24:48.060
就是说

24:48.060 --> 24:49.060
我通过高階组件

24:49.060 --> 24:50.060
通过吧

24:50.060 --> 24:51.060
一个组件团进去

24:51.060 --> 24:52.060
得到另外一个组件

24:52.060 --> 24:53.060
那么我想在这个组件里面

24:53.060 --> 24:54.060
使用Rave

24:54.060 --> 24:55.060
你看叫出问题

24:55.060 --> 24:56.060
叫出问题

24:56.060 --> 24:58.060
为什么要出问题呢

24:58.060 --> 24:59.060
看着吧

25:00.060 --> 25:01.060
MyRave

25:01.060 --> 25:02.060
比方说吧

25:03.060 --> 25:04.060
就用一个

25:04.060 --> 25:05.060
Direct对象

25:05.060 --> 25:07.060
CreateRave

25:08.060 --> 25:11.060
然后在ComponentDMount里面

25:11.060 --> 25:13.060
打印出MyRave

25:13.060 --> 25:14.060
看一下

25:14.060 --> 25:15.060
打印出来的东西

25:15.060 --> 25:16.060
真不正确

25:16.060 --> 25:17.060
你就知道了

25:17.060 --> 25:18.060
MyRave

25:19.060 --> 25:20.060
保存

25:20.060 --> 25:21.060
保存咱们看一下

25:21.060 --> 25:23.060
你看打印的是啥

25:23.060 --> 25:26.060
打印的是这个LogueWiper

25:26.060 --> 25:28.060
打印的是什么的

25:28.060 --> 25:30.060
打印的不是我们组件A

25:30.060 --> 25:31.060
不是组件A的对象

25:31.060 --> 25:32.060
这个东西的对象

25:32.060 --> 25:33.060
LogueWiper对象

25:33.060 --> 25:36.060
这往往都不是我们想要的

25:36.060 --> 25:37.060
为什么呢

25:37.060 --> 25:39.060
因为我们高階组件

25:39.060 --> 25:41.060
不能去污染我们的组件

25:41.060 --> 25:42.060
我们自己的组件

25:42.060 --> 25:43.060
这才是核心功能

25:43.060 --> 25:44.060
对吧

25:44.060 --> 25:46.060
高階组件往往是给它增加一些功能

25:46.060 --> 25:48.060
你增加功能就增加功能

25:48.060 --> 25:50.060
你凭什么去污染了我的组件

25:50.060 --> 25:51.060
我这里Rave

25:51.060 --> 25:53.060
明显是要用A的组件

25:53.060 --> 25:54.060
A才是我们最核心的功能

25:54.060 --> 25:55.060
在这里面

25:55.060 --> 25:57.060
你这里只是附加了一个日子记录

25:57.060 --> 25:58.060
好吧

25:58.060 --> 25:59.060
那你现在用Rave

25:59.060 --> 26:01.060
我得到的是日子记录这个组件

26:01.060 --> 26:02.060
有什么用了

26:02.060 --> 26:04.060
那将来我想得到

26:04.060 --> 26:05.060
对象里面一些方法

26:05.060 --> 26:07.060
我怎么得到了得不到了

26:07.060 --> 26:09.060
那现在我就先入了一个

26:09.060 --> 26:10.060
两栏的境地

26:10.060 --> 26:12.060
就是如果我不用它

26:12.060 --> 26:15.060
我增加不了它的日子记录的功能

26:15.060 --> 26:16.060
如果我用它

26:16.060 --> 26:18.060
我Rave处理不了

26:18.060 --> 26:19.060
因为我Rave指向的是它

26:19.060 --> 26:21.060
而不是这个真实的组件A

26:21.060 --> 26:22.060
那么这个时候怎么办呢

26:22.060 --> 26:24.060
我就希望高階组件

26:24.060 --> 26:26.060
能不能智能一点

26:26.060 --> 26:27.060
能不能智能一点

26:27.060 --> 26:29.060
到时候我给你传的Rave

26:29.060 --> 26:31.060
你把它转发到这上面去

26:31.060 --> 26:33.060
让我这里用的时候

26:33.060 --> 26:35.060
Rave始终指向的是真实的组件A

26:35.060 --> 26:37.060
最终的组件A

26:37.060 --> 26:39.060
而不是你给我的包装器

26:39.060 --> 26:41.060
你给我包装器我要它干嘛呢

26:41.060 --> 26:42.060
它有什么用的

26:42.060 --> 26:44.060
那么能不能智能一点的

26:44.060 --> 26:46.060
我们就可以利用刚才我们学过的东西

26:46.060 --> 26:47.060
你看

26:47.060 --> 26:48.060
我来这里面建立一个内组件

26:48.060 --> 26:49.060
看没有

26:49.060 --> 26:50.060
建立一个内组件

26:50.060 --> 26:51.060
然后在这个内组件里边

26:51.060 --> 26:53.060
我约定好有这么一个属性

26:53.060 --> 26:55.060
有什么属性

26:55.060 --> 26:56.060
有这么一个

26:56.060 --> 26:58.060
你要给我传个属性进来

26:58.060 --> 26:59.060
除了

26:59.060 --> 27:00.060
你给我传的属性

27:00.060 --> 27:02.060
除了一些正常的属性之外

27:02.060 --> 27:04.060
你还要给我传的一个属性

27:04.060 --> 27:06.060
正常的属性

27:06.060 --> 27:08.060
除了这个属性之外

27:08.060 --> 27:10.060
你还有一个属性叫做ABC

27:10.060 --> 27:11.060
我就比较说ABC

27:11.060 --> 27:14.060
还有一个ABC代表

27:14.060 --> 27:17.060
要转发的Rave

27:17.060 --> 27:19.060
就是你要把对象

27:19.060 --> 27:20.060
就是这个对象

27:20.060 --> 27:21.060
Horrent

27:21.060 --> 27:23.060
这个对象

27:23.060 --> 27:26.060
通过这个ABC属性给我传过来

27:26.060 --> 27:27.060
好 那这样子

27:27.060 --> 27:28.060
传递过来的过后

27:28.060 --> 27:29.060
我们就可以这样子玩了

27:29.060 --> 27:31.060
你看我这里解构

27:31.060 --> 27:32.060
再解构

27:32.060 --> 27:33.060
通过什么来解构

27:33.060 --> 27:36.060
通过RestProps来解构

27:36.060 --> 27:38.060
把当前给我传的属性拿过来

27:38.060 --> 27:39.060
把它分成两个部分

27:39.060 --> 27:41.060
一个部分是ABC这个属性

27:41.060 --> 27:43.060
非常特殊的这个属性

27:43.060 --> 27:45.060
还有一部分属性

27:45.060 --> 27:46.060
就是剩下的属性

27:46.060 --> 27:47.060
这个见过吗

27:47.060 --> 27:48.060
这种写法

27:48.060 --> 27:50.060
就是剩下的属性

27:50.060 --> 27:51.060
Rest剩下的

27:51.060 --> 27:53.060
把剩下的东西装到对象里边

27:53.060 --> 27:56.060
剩下的属性装到对象里边

27:56.060 --> 27:57.060
然后

27:57.060 --> 27:59.060
一个特殊的属性ABC

27:59.060 --> 28:00.060
那专门来提出来

28:00.060 --> 28:01.060
专门提出来

28:01.060 --> 28:02.060
好

28:02.060 --> 28:03.060
然后我在使用这个组件的时候

28:03.060 --> 28:04.060
我就把Rave

28:04.060 --> 28:05.060
设置为什么

28:05.060 --> 28:06.060
ABC

28:06.060 --> 28:07.060
就设置为这个

28:07.060 --> 28:08.060
那么就让

28:08.060 --> 28:10.060
因为这个ABC

28:10.060 --> 28:11.060
还代表了

28:11.060 --> 28:12.060
就是这个东西

28:12.060 --> 28:14.060
就这个东西

28:14.060 --> 28:16.060
代表就是这个玩意

28:16.060 --> 28:17.060
那么我把这个东西

28:17.060 --> 28:18.060
通过ABC

28:18.060 --> 28:19.060
传递给Rave

28:19.060 --> 28:20.060
那么这样子

28:20.060 --> 28:21.060
传递过来的这个数据

28:21.060 --> 28:22.060
是不是就只像它了

28:22.060 --> 28:23.060
对不对

28:23.060 --> 28:24.060
那么假设

28:24.060 --> 28:25.060
我们把个内组件做好

28:25.060 --> 28:26.060
做好之后

28:26.060 --> 28:27.060
我这里返回

28:27.060 --> 28:28.060
返回啥呢

28:28.060 --> 28:29.060
就返回通过

28:29.060 --> 28:31.060
react

28:31.060 --> 28:32.060
forward

28:32.060 --> 28:34.060
产生了这个新的组件

28:37.060 --> 28:38.060
通过这个产生新的组件

28:38.060 --> 28:39.060
因为只有新的组件

28:39.060 --> 28:40.060
才有这样的特点

28:40.060 --> 28:41.060
它的Rave

28:41.060 --> 28:42.060
会调用这个函数

28:42.060 --> 28:43.060
那么这个函数里边

28:43.060 --> 28:44.060
我们返回啥呢

28:45.060 --> 28:46.060
这个函数里边

28:46.060 --> 28:47.060
返回的是

28:48.060 --> 28:49.060
返回的是这个log wiper

28:49.060 --> 28:50.060
对吧

28:50.060 --> 28:51.060
返回的是这个

28:52.060 --> 28:53.060
log wiper

28:53.060 --> 28:55.060
这个log wiper里边

28:55.060 --> 28:56.060
属性可以扔进去

28:56.060 --> 28:57.060
所谓的属性扔进去

28:57.060 --> 28:58.060
那么其中一个属性

28:58.060 --> 28:59.060
叫ABC

28:59.060 --> 29:00.060
我给你传递这个Rave字

29:00.060 --> 29:01.060
你看

29:01.060 --> 29:02.060
我在这里

29:02.060 --> 29:03.060
一会我们这边

29:03.060 --> 29:04.060
得到了这个组件

29:04.060 --> 29:05.060
Acomp

29:05.060 --> 29:06.060
得到的是啥

29:06.060 --> 29:08.060
得到了就不是在这个

29:08.060 --> 29:09.060
log wiper

29:09.060 --> 29:10.060
得到的就不是它了

29:10.060 --> 29:11.060
得到的是啥

29:11.060 --> 29:12.060
得到的是这个组件

29:12.060 --> 29:14.060
这个函数返回的组件

29:14.060 --> 29:15.060
对吧

29:15.060 --> 29:16.060
就是一个Rave转发组件

29:17.060 --> 29:18.060
那么这样子一来

29:18.060 --> 29:19.060
我给它的Rave

29:19.060 --> 29:20.060
是不是

29:20.060 --> 29:21.060
它不会直接拿来用

29:21.060 --> 29:23.060
它会把它作为参数传过来

29:23.060 --> 29:24.060
你要干吗

29:24.060 --> 29:25.060
你自己去干

29:25.060 --> 29:26.060
然后我这里返回

29:26.060 --> 29:27.060
返回这个

29:27.060 --> 29:28.060
我们自己写的包装器

29:28.060 --> 29:29.060
log wiper

29:29.060 --> 29:30.060
返回这个类组件

29:30.060 --> 29:31.060
除了把属性给它之外

29:31.060 --> 29:32.060
给它一个特殊的属性

29:32.060 --> 29:33.060
叫ABC

29:33.060 --> 29:34.060
把Rave传进去

29:35.060 --> 29:36.060
对吧

29:36.060 --> 29:37.060
要把这个地方传进去

29:37.060 --> 29:39.060
这里千万不能写Rave

29:39.060 --> 29:40.060
因为这里

29:40.060 --> 29:42.060
它不是通过Four的Rave得到的

29:42.060 --> 29:43.060
就是它这里

29:43.060 --> 29:45.060
Rave就直接指向它的对象了

29:45.060 --> 29:46.060
那还是没变化了

29:46.060 --> 29:47.060
对不对

29:47.060 --> 29:49.060
所以要给它一个特殊的属性传过去

29:49.060 --> 29:50.060
好那么这边来

29:50.060 --> 29:52.060
它把特殊的属性分解出来

29:52.060 --> 29:53.060
分解出来

29:53.060 --> 29:55.060
这里展开Rest

29:55.060 --> 29:56.060
分解出来

29:56.060 --> 29:57.060
然后呢

29:57.060 --> 29:59.060
把这个属性通过Rave传的到这

29:59.060 --> 30:00.060
你看这个Rave

30:00.060 --> 30:01.060
我们这里的Rave

30:01.060 --> 30:02.060
经过了几层

30:02.060 --> 30:03.060
一层能传的过去了

30:03.060 --> 30:04.060
它跑到哪去了

30:04.060 --> 30:05.060
跑到这来了

30:05.060 --> 30:07.060
这也不是跑到这来了

30:07.060 --> 30:08.060
跑到ABC属性里面来了

30:08.060 --> 30:09.060
ABC属性里面

30:09.060 --> 30:11.060
是不是跑到它的Rave里面去了

30:11.060 --> 30:12.060
对吧

30:12.060 --> 30:13.060
这样一层一层

30:13.060 --> 30:14.060
最终是不是到了它的Rave了

30:14.060 --> 30:15.060
对不对

30:15.060 --> 30:16.060
到了它的Rave

30:16.060 --> 30:18.060
于是这个Corrent最终就指向它了

30:18.060 --> 30:20.060
那么把剩余的属性给它

30:20.060 --> 30:21.060
就完事了

30:21.060 --> 30:22.060
保存咱们看一下

30:22.060 --> 30:24.500
好你看

30:24.500 --> 30:25.500
那么现在这个Rave

30:25.500 --> 30:26.500
是不是指向A了

30:26.500 --> 30:27.500
A出现了

30:27.500 --> 30:30.500
这样子对使用者而言

30:30.500 --> 30:31.500
对使用我们主念的而言

30:31.500 --> 30:32.500
它根本就不知道发生什么

30:32.500 --> 30:34.500
它就觉得很神奇

30:34.500 --> 30:36.500
我这个高线主念怎么这么神奇

30:36.500 --> 30:37.500
它既然正常的功能

30:37.500 --> 30:39.500
但是那又好像它不存在一样

30:39.500 --> 30:40.500
我给它使用Rave

30:40.500 --> 30:42.500
它指向的还是这个A

30:42.500 --> 30:43.500
它指向的不是这个

30:43.500 --> 30:44.500
不是这个包装器

30:44.500 --> 30:46.500
什么那个MogWiper

30:46.500 --> 30:47.500
那个东西没什么意义

30:47.500 --> 30:48.500
对吧

30:48.500 --> 30:49.500
就非常非常舒服了

30:49.500 --> 30:51.500
现在Rave现在也没有问题了

30:51.500 --> 30:52.500
所以Rave转发呢

30:52.500 --> 30:55.500
往往是我们在做高阶主件的时候

30:55.500 --> 30:57.500
因为要考虑到通用性

30:57.500 --> 30:59.500
保不齐将来有些主件的

30:59.500 --> 31:00.500
它要使用Rave

31:00.500 --> 31:02.500
那你如果不做转发的话

31:02.500 --> 31:03.500
就会导致Rave

31:03.500 --> 31:05.500
指向的高阶主件本身

31:05.500 --> 31:07.500
它指向的包装主件了

31:07.500 --> 31:09.500
那显然不是我们想要的

31:09.500 --> 31:11.500
我们可以通过这种方式处理

31:11.500 --> 31:12.500
就是如果你绕不清楚

31:12.500 --> 31:14.500
这种处理方式里的一代技术

31:14.500 --> 31:17.500
但通常我们肯定不会写ABC

31:17.500 --> 31:19.500
ABC这个文字太low了

31:19.500 --> 31:20.500
ForwardRave

31:20.500 --> 31:21.500
咱们会写这么一个属性

31:21.500 --> 31:24.500
但是属性名字也是我们自己随便取的

31:24.500 --> 31:26.500
也是自己随便取的

31:26.500 --> 31:28.500
会通过用这种方式来写

31:28.500 --> 31:29.500
对吧

31:29.500 --> 31:30.500
当然不是说一定要写这个名字

31:30.500 --> 31:31.500
我们刚才演示过

31:31.500 --> 31:32.500
什么名字都可以

31:32.500 --> 31:35.500
只要不是Rave这个名字就行了

31:35.500 --> 31:36.500
包存

31:36.500 --> 31:38.500
你看是一样的效果

31:38.500 --> 31:40.500
这就完成了一个Rave的转发

31:40.500 --> 31:41.500
这对

31:41.500 --> 31:42.500
如果你不做高阶主件

31:42.500 --> 31:44.500
这个东西基本上是没有什么用

31:44.500 --> 31:46.500
确实是没有什么用

31:46.500 --> 31:47.500
如果你要做高阶主件的话

31:47.500 --> 31:49.500
你为了避免出现这样的问题

31:49.500 --> 31:50.500
那别人使用起来

31:50.500 --> 31:51.500
那可能有些属键

31:51.500 --> 31:53.500
他确实要使用Rave

31:53.500 --> 31:54.500
那一用Rave就要出问题

31:54.500 --> 31:56.500
因为他得不到这个东西

31:56.500 --> 31:57.500
所以说

31:57.500 --> 31:59.500
可以通过Rave转发来解决

31:59.500 --> 32:00.500
这样的问题

32:00.500 --> 32:02.500
这以后就讲这么一个东西

32:02.500 --> 32:03.500
也没有什么练习

32:03.500 --> 32:04.500
大家下来了

32:04.500 --> 32:07.500
把高阶主件通过Rave转发

32:07.500 --> 32:08.500
控制一下

32:08.500 --> 32:09.500
写一个就行了

32:09.500 --> 32:11.500
你要会写就行了

32:11.500 --> 32:13.500
好 这是关于Rave转发

32:13.500 --> 32:15.500
那么Rave相关的知识就全部结束了

32:15.500 --> 32:16.500
全部结束了

32:16.500 --> 32:18.500
Rave这个东西

32:18.500 --> 32:19.500
平时在我们开发中

32:19.500 --> 32:20.500
不要滥用

32:20.500 --> 32:21.500
千万不要滥用

32:21.500 --> 32:24.500
因为它是不符合Rave Acton理念的

32:24.500 --> 32:25.500
Rave Acton的理念

32:25.500 --> 32:28.500
它是不要去直接操作主件对象

32:28.500 --> 32:31.500
也不要去操作真实的多么元素

32:31.500 --> 32:32.500
除非那万不得已

32:32.500 --> 32:34.500
否则的话不要去这样干

32:34.500 --> 32:35.500
所以说Rave这个东西

32:35.500 --> 32:38.500
本身就不会太过于常用

32:39.500 --> 32:42.500
把这个转发Rave一定要去写一遍

32:42.500 --> 32:43.500
OK 没了

