WEBVTT

00:00.880 --> 00:05.880
这些课我们讲了那么久的Redux还没有做过一个完整的例子

00:05.880 --> 00:09.880
可能大家越学越懵 所以说我这里加入一个案例

00:09.880 --> 00:13.880
把上课和Redux的东西全部融入进去

00:13.880 --> 00:16.880
来做这么一个完整的学生数据管理

00:16.880 --> 00:19.880
当然它不涉及到任何界面 纯数据管理

00:19.880 --> 00:23.880
其实这样子也可以大家带来一个信息

00:23.880 --> 00:26.880
以后你们在公司里面开发是可以分工协作的

00:26.880 --> 00:29.880
比方说有些人专门做界面 有些人专门做数据处理

00:29.880 --> 00:32.880
两个人互不干扰 我们只要都知道需求是什么

00:32.880 --> 00:35.880
OK 我们都可以同时进行

00:35.880 --> 00:38.880
那么这一节课咱们只做数据处理

00:38.880 --> 00:40.880
因为数据处理其实是最麻烦的

00:40.880 --> 00:43.880
界面那些东西都简单 就是根据不同的数据

00:43.880 --> 00:45.880
把界面渲染出来就完事了 对吧

00:45.880 --> 00:48.880
我们只是现在这里用利用Redux来做数据管理

00:48.880 --> 00:50.880
但是首先我给大家明确一点

00:50.880 --> 00:54.880
也是我之前在讲Redux的第节课就反复强调的

00:54.880 --> 00:56.880
Redux它产生的原因是什么

00:56.880 --> 01:00.880
是因为要管理共享的数据 就是被多个组件

01:00.880 --> 01:02.880
被多个地方要用到的数据

01:02.880 --> 01:03.880
他们要共享这个数据

01:03.880 --> 01:05.880
所以说我们要去管理这些数据

01:05.880 --> 01:08.880
而不是说任何数据以后在工程里面

01:08.880 --> 01:10.880
要建造一个数据网维Dux面放

01:10.880 --> 01:13.880
那这节课是疯了 这种做法

01:13.880 --> 01:14.880
千万不要这样去做

01:14.880 --> 01:15.880
我们管理的是什么

01:15.880 --> 01:18.880
被多个组件共享的数据

01:18.880 --> 01:23.880
不要一股老的把所有的数据都网维Dux面放

01:23.880 --> 01:26.880
但是我这里用学生数据管理

01:26.880 --> 01:27.880
其实也不是很合适

01:27.880 --> 01:30.880
比方说学生管理可能就在一个页面

01:30.880 --> 01:31.880
或者是一个组件里面有用

01:31.880 --> 01:33.880
比方说一个学生表格 列表

01:33.880 --> 01:35.880
但是我们就假设

01:35.880 --> 01:39.880
假设学生这一块的数据是需要被共享的

01:39.880 --> 01:40.880
那么对这一块的数据管理

01:40.880 --> 01:42.880
我们把它放到最大个室

01:42.880 --> 01:44.880
那么这里我们就从零开始

01:44.880 --> 01:47.880
依次来做这个事情

01:47.880 --> 01:49.880
这里那边我们要管理

01:49.880 --> 01:51.880
比方说我们的需求是什么

01:51.880 --> 01:53.880
这里进行分析

01:53.880 --> 01:58.220
首先说我们的需求

01:58.220 --> 02:04.220
用Dux加上Sunk

02:04.220 --> 02:10.220
实现学生数据查询管理

02:10.220 --> 02:11.220
那么这里的需求是什么呢

02:11.220 --> 02:18.220
需求是界面中需要使用关键字

02:18.220 --> 02:19.220
还有什么呢

02:19.220 --> 02:25.220
使用关键字 性别以及分业信息

02:25.220 --> 02:28.220
来查询学生

02:28.220 --> 02:30.220
就是说我们界面中

02:30.220 --> 02:31.220
但是界面是什么样子

02:31.220 --> 02:32.220
我不知道

02:32.220 --> 02:33.220
那是Rx的事情

02:33.220 --> 02:34.220
长什么样子

02:34.220 --> 02:36.220
是一个table 还是个div随便

02:36.220 --> 02:37.220
那是它的事情

02:37.220 --> 02:38.220
我现在只关心数据

02:38.220 --> 02:39.220
不管你是长什么样子

02:39.220 --> 02:41.220
它的数据应该是这些数据

02:41.220 --> 02:42.220
比如说我们这里

02:42.220 --> 02:43.220
关键字

02:43.220 --> 02:44.220
关键字

02:44.220 --> 02:46.220
一个字符串

02:46.220 --> 02:48.220
性别是一个

02:48.220 --> 02:49.220
我们当时写的是啥

02:49.220 --> 02:50.220
我们当时从服务器查的时候

02:50.220 --> 02:51.220
写的是啥

02:51.220 --> 02:52.220
我看一下

02:52.220 --> 02:53.220
我都一点忘了

02:53.220 --> 02:57.300
分业

02:57.300 --> 02:58.300
我们当时写

02:58.300 --> 03:01.300
我记得我写了一个查询所有学生的

03:01.300 --> 03:02.300
我记得我写了一个

03:02.300 --> 03:06.300
我看一下我的分支

03:06.300 --> 03:08.300
Disk branch

03:08.300 --> 03:10.300
我记得我写了一个查询学生的

03:10.300 --> 03:12.300
写到哪了

03:14.300 --> 03:19.890
我看一下咱们得找一找

03:19.890 --> 03:21.890
我看一下写哪了

03:21.890 --> 03:23.890
Rotor里面写没写

03:23.890 --> 03:25.890
查询学生5-6

03:25.890 --> 03:26.890
5-6查询学生

03:26.890 --> 03:27.890
那行吧咱们回回

03:27.890 --> 03:29.890
咱们到5-6去

03:29.890 --> 03:32.890
咱们把这个到5-6去

03:32.890 --> 03:35.890
我这里的disk check out

03:35.890 --> 03:36.890
到5-6

03:36.890 --> 03:39.890
然后再把我刚才的一个 branch 删除掉

03:39.890 --> 03:40.890
删除掉

03:40.890 --> 03:41.890
刚才的一个 branch

03:41.890 --> 03:42.890
branch 是咱们的

03:42.890 --> 03:45.890
刚才的一个 branch 是我们这里

03:45.890 --> 03:46.890
就这样

03:46.890 --> 03:48.890
我们这样

03:48.890 --> 03:50.890
这个笔记

03:50.890 --> 03:52.890
不着急

03:52.890 --> 03:54.890
然后把这个

03:54.890 --> 03:55.890
OK

03:55.890 --> 03:56.890
然后把删除掉

03:56.890 --> 03:57.890
刚才是八杠

03:57.890 --> 04:02.250
八杠级

04:02.250 --> 04:03.250
看一下

04:03.250 --> 04:05.250
刚才我们写到八杠级了

04:14.160 --> 04:15.160
这样子

04:15.160 --> 04:16.160
branch 再 branch 一下

04:16.160 --> 04:18.160
我们要把刚才的分支删掉

04:18.160 --> 04:19.160
分支删掉

04:19.160 --> 04:20.160
这里

04:20.160 --> 04:21.160
八杠四

04:21.160 --> 04:23.160
复制一下

04:23.160 --> 04:25.160
disk branch

04:25.160 --> 04:26.160
很杠地

04:26.160 --> 04:28.160
删除掉

04:28.160 --> 04:30.160
大小的disk 强制删除

04:30.160 --> 04:33.940
删除掉

04:33.940 --> 04:35.940
然后让我们重新从那个

04:35.940 --> 04:36.940
当前分支

04:36.940 --> 04:37.940
重新从当前分支

04:37.940 --> 04:38.940
这个5-6这个分支

04:38.940 --> 04:39.940
5-6这个分支

04:39.940 --> 04:41.940
应该是写完的

04:41.940 --> 04:42.940
对

04:42.940 --> 04:43.940
应该是写完的

04:43.940 --> 04:45.940
那么通过这个分支

04:45.940 --> 04:46.940
check out

04:46.940 --> 04:47.940
写个

04:47.940 --> 04:48.940
很杠壁

04:48.940 --> 04:49.940
八杠四

04:49.940 --> 04:50.940
新建个分支出来

04:50.940 --> 04:51.940
OK

04:51.940 --> 04:53.940
在这个分支里边写

04:53.940 --> 04:54.940
这里

04:54.940 --> 04:56.940
我们还是在这里建个笔记

04:56.940 --> 04:57.940
我们这里要做的事情

04:57.940 --> 04:59.940
把记录下来笔记

05:00.940 --> 05:02.940
我们这一刻要做的事情是

05:02.940 --> 05:04.940
用redux

05:04.940 --> 05:06.940
加上sunk

05:06.940 --> 05:08.940
管理学生数据

05:08.940 --> 05:10.940
管理学生数据

05:10.940 --> 05:12.940
那么这里需求是要做查询

05:12.940 --> 05:14.940
需求是根据

05:14.940 --> 05:16.940
关键字

05:16.940 --> 05:17.940
什么

05:17.940 --> 05:18.940
还有性别

05:18.940 --> 05:20.940
还有分页信息

05:20.940 --> 05:22.940
查询学生

05:22.940 --> 05:24.940
查询学生

05:24.940 --> 05:26.940
有这么一些信息

05:26.940 --> 05:27.940
那么我们这里

05:27.940 --> 05:28.940
关键

05:28.940 --> 05:30.940
关键字

05:30.940 --> 05:32.940
是一个字部串

05:32.940 --> 05:33.940
一个字部串

05:33.940 --> 05:34.940
可为空

05:34.940 --> 05:35.940
可为空

05:35.940 --> 05:37.940
空字部串

05:37.940 --> 05:39.940
然后还有性别

05:39.940 --> 05:40.940
查询的时候性别

05:40.940 --> 05:42.940
性别的话

05:42.940 --> 05:44.940
性别的话是

05:44.940 --> 05:46.940
1或者是0

05:46.940 --> 05:47.940
负1

05:47.940 --> 05:49.940
分别表示

05:49.940 --> 05:51.940
查询什么

05:51.940 --> 05:53.940
女男

05:53.940 --> 05:55.940
和独献

05:55.940 --> 05:57.940
然后分页信息

05:57.940 --> 06:00.940
分页信息是配级和nimate

06:00.940 --> 06:02.940
就是

06:02.940 --> 06:04.940
当前页码

06:04.940 --> 06:06.940
当前页码

06:06.940 --> 06:08.940
这是查询条件

06:09.940 --> 06:11.940
查询条件里面包含这么一些东西

06:11.940 --> 06:13.940
关键字

06:13.940 --> 06:15.940
性别

06:15.940 --> 06:17.940
当前页码

06:17.940 --> 06:19.940
当前页码是配级

06:19.940 --> 06:21.940
然后

06:21.940 --> 06:23.940
当前页码就是

06:23.940 --> 06:25.940
配级

06:26.940 --> 06:27.940
还有一个是

06:27.940 --> 06:29.940
夜容量

06:29.940 --> 06:30.940
这些都是查询信息

06:30.940 --> 06:31.940
我们要根据这些信息

06:31.940 --> 06:33.940
来去做查询

06:33.940 --> 06:35.940
那么查询结果

06:35.940 --> 06:37.940
查询结果

06:37.940 --> 06:39.940
我们这里面有什么查询结果

06:39.940 --> 06:41.940
是不是学生数组

06:41.940 --> 06:43.940
都是个查询结果

06:43.940 --> 06:44.940
还有什么

06:44.940 --> 06:46.940
查询结果里面除了学生数组之外

06:46.940 --> 06:47.940
还有什么

06:47.940 --> 06:49.940
还有一个

06:49.940 --> 06:51.940
学生的总数

06:51.940 --> 06:53.940
学生总数

06:53.940 --> 06:55.940
这是我们都是需要关心的数据

06:55.940 --> 06:57.940
就是我们需要管理的数据

06:57.940 --> 06:59.940
因为条件有可能会发生变化

06:59.940 --> 07:00.940
那么这个东西

07:00.940 --> 07:02.940
其实你也不应该直接去想

07:02.940 --> 07:03.940
阿迦克斯请求

07:03.940 --> 07:04.940
当然你可以去参考

07:04.940 --> 07:05.940
但是它跟阿迦克斯请求

07:05.940 --> 07:06.940
含义还不一样

07:06.940 --> 07:08.940
这是我们界面中需要管理的数据

07:08.940 --> 07:10.940
关键字可能会变化

07:10.940 --> 07:11.940
性别可能会变化

07:11.940 --> 07:12.940
当前页码

07:12.940 --> 07:14.940
夜容量都有可能会变化

07:14.940 --> 07:15.940
学生的数组就是查询结果

07:15.940 --> 07:16.940
也可能会变化

07:16.940 --> 07:18.940
学生的总数也可能会变化

07:18.940 --> 07:20.940
不同的条件得到的总数是不一样的

07:20.940 --> 07:22.940
这些信息

07:22.940 --> 07:23.940
都是有的

07:23.940 --> 07:25.940
都要进行管理

07:25.940 --> 07:26.940
比方说

07:26.940 --> 07:29.940
还有查询状态

07:29.940 --> 07:31.940
查询状态

07:31.940 --> 07:32.940
那么这里只有两种状态

07:32.940 --> 07:34.940
一种是正在查询

07:34.940 --> 07:36.940
正在查询

07:36.940 --> 07:38.940
查询

07:38.940 --> 07:41.940
还就是查询完成

07:41.940 --> 07:42.940
查询完成

07:42.940 --> 07:43.940
或者是

07:43.940 --> 07:45.940
是否夹在中

07:45.940 --> 07:48.940
是否正在查询中

07:48.940 --> 07:49.940
就是一直楼顶

07:49.940 --> 07:51.940
是否正在查询中

07:51.940 --> 07:53.940
一共就这么一些信息

07:53.940 --> 07:54.940
那么我们需要

07:54.940 --> 07:57.940
对这些信息进行管理

07:57.940 --> 07:59.940
需要对这些信息进行管理

07:59.940 --> 08:00.940
好,来,我们来想一想

08:00.940 --> 08:02.940
怎么来做

08:02.940 --> 08:03.940
首先我们这里

08:03.940 --> 08:05.940
去建立这么一个文件夹

08:05.940 --> 08:07.940
首先我们把这东西安装好再说

08:07.940 --> 08:10.940
这东西都没安装好

08:10.940 --> 08:11.940
安装什么

08:11.940 --> 08:12.940
122

08:12.940 --> 08:13.940
ADD

08:13.940 --> 08:14.940
ADD什么

08:14.940 --> 08:15.940
Redux

08:15.940 --> 08:16.940
还有什么

08:16.940 --> 08:18.940
还有就是Redux

08:18.940 --> 08:19.940
安装这两个

08:19.940 --> 08:21.940
安装吧

08:21.940 --> 08:23.940
安装吧,我们不管

08:23.940 --> 08:25.940
安装就行了

08:25.940 --> 08:26.940
那么现在我们在这里

08:26.940 --> 08:27.940
去建新建一个文件夹

08:27.940 --> 08:28.940
给它取名为Store

08:28.940 --> 08:30.940
就是我们的数据仓库

08:30.940 --> 08:31.940
这个数据仓库里面

08:31.940 --> 08:33.940
我们新建一个Index.js

08:33.940 --> 08:34.940
来表示我们数据仓库的

08:34.940 --> 08:36.940
默认导出文件

08:36.940 --> 08:38.940
在这个文件里面去导出

08:38.940 --> 08:40.940
然后在数据仓库里边

08:40.940 --> 08:42.940
我们再新建两个文件夹

08:42.940 --> 08:44.940
一个是Action

08:44.940 --> 08:46.940
来存出Action相关的东西

08:46.940 --> 08:48.940
Action创建函数这些东西

08:48.940 --> 08:50.940
还有就是Reducer

08:50.940 --> 08:53.940
主要写这么两个文件夹

08:53.940 --> 08:54.940
好,那么这里从哪个文件夹

08:54.940 --> 08:55.940
开始写呢

08:55.940 --> 08:57.940
就看你的习惯了

08:57.940 --> 08:58.940
看你的习惯

08:58.940 --> 08:59.940
那比方说你要从数据

08:59.940 --> 09:01.940
开始入手的话

09:01.940 --> 09:02.940
那么你从Reducer开始写

09:02.940 --> 09:04.940
遇到一些类型的话

09:04.940 --> 09:05.940
你在Action里面去夹

09:05.940 --> 09:06.940
如果说你要从

09:06.940 --> 09:07.940
操作开始写的话

09:07.940 --> 09:08.940
一共有哪些操作

09:08.940 --> 09:10.940
那么从操作开始写的话

09:10.940 --> 09:12.940
那么就先写Action

09:12.940 --> 09:13.940
先写Action

09:13.940 --> 09:14.940
就看你先自己

09:14.940 --> 09:15.940
习惯先写哪一个

09:15.940 --> 09:16.940
比方说咱们

09:16.940 --> 09:17.940
之前好像是先写的Action

09:17.940 --> 09:18.940
对吧

09:18.940 --> 09:20.940
那么这里我们先写Reducer

09:20.940 --> 09:21.940
Reducer里面

09:21.940 --> 09:22.940
建立一个文件夹

09:22.940 --> 09:23.940
index的解释

09:23.940 --> 09:25.940
那么这个文件是用来做什么呢

09:25.940 --> 09:26.940
用来合并

09:26.940 --> 09:30.940
合并Reducers

09:30.940 --> 09:31.940
也就是我们这里

09:31.940 --> 09:33.940
因为我们目前只做了学生

09:33.940 --> 09:34.940
将来还可能有其他东西

09:34.940 --> 09:35.940
对不对

09:35.940 --> 09:37.940
还有可能有其他的数据管理

09:37.940 --> 09:38.940
所以说我们这里

09:38.940 --> 09:39.940
要考虑周全

09:39.940 --> 09:40.940
将来还有可能有其他的

09:40.940 --> 09:42.940
因此我们这里

09:42.940 --> 09:44.940
这里要写这么一个

09:44.940 --> 09:46.940
就是合并的Reducers

09:47.940 --> 09:48.940
那将来如果有别的了

09:48.940 --> 09:50.940
我们就可以把它合并起来

09:50.940 --> 09:51.940
好吧

09:51.940 --> 09:52.940
没问题吧

09:52.940 --> 09:53.940
ok 这里咱们写一个

09:53.940 --> 09:54.940
这个东西在这

09:54.940 --> 09:56.940
将来方便扩展

09:56.940 --> 09:57.940
那么现在对学生的管理

09:57.940 --> 09:58.940
我们又可以在

09:58.940 --> 10:00.940
新建个文件夹都行

10:00.940 --> 10:01.940
Students

10:01.940 --> 10:03.940
这是对学生的管理

10:03.940 --> 10:04.940
我们又新建个文件夹

10:04.940 --> 10:05.940
那么这个文件夹里面

10:05.940 --> 10:06.940
全部存放

10:06.940 --> 10:10.940
对学生数据管理的东西

10:10.940 --> 10:11.940
比方说我们在这里

10:11.940 --> 10:12.940
新建个文件

10:12.940 --> 10:13.940
当然也可以不建文件夹

10:13.940 --> 10:14.940
也可以直接建一个文件

10:14.940 --> 10:15.940
也行

10:15.940 --> 10:16.940
如果说管理比较简单的话

10:16.940 --> 10:17.940
只有一个文件的话

10:17.940 --> 10:18.940
那么也可以

10:18.940 --> 10:19.940
也可以不写文件夹

10:19.940 --> 10:21.940
也可以直接建一个文件

10:21.940 --> 10:23.940
这个东西都没有什么强制要求

10:23.940 --> 10:24.940
看具体的公司里面

10:24.940 --> 10:25.940
具体怎么去做

10:25.940 --> 10:26.940
好 那么比方说吧

10:26.940 --> 10:28.940
我们这里就建文件夹嘛

10:28.940 --> 10:30.940
好 那么这里面就是要写

10:30.940 --> 10:31.940
各种Reducers

10:31.940 --> 10:32.940
对学生进行管理

10:32.940 --> 10:34.940
那么要写几个Reducers

10:34.940 --> 10:36.940
这个东西没有一定的

10:36.940 --> 10:37.940
没有一定的

10:37.940 --> 10:38.940
就看你自己要不要拆分

10:38.940 --> 10:40.940
比方说我们这里的数据

10:40.940 --> 10:41.940
有学生数据的数据

10:41.940 --> 10:43.940
有什么学生总书的数据

10:43.940 --> 10:45.940
还有什么查询的数据

10:45.940 --> 10:46.940
对不对

10:46.940 --> 10:47.940
还有这些数据

10:47.940 --> 10:51.940
那么有存在这么一些数据

10:51.940 --> 10:53.940
那么我们要不要拆分

10:53.940 --> 10:55.940
这是你自己决定

10:55.940 --> 10:56.940
你可以不拆分

10:56.940 --> 10:57.940
也可以拆分

10:57.940 --> 10:59.940
拆分的文件会变多

10:59.940 --> 11:01.940
但是每一块写起来简单

11:01.940 --> 11:03.940
那么不拆分的话

11:03.940 --> 11:05.940
那么你什么就是

11:05.940 --> 11:07.940
不拆分的话

11:07.940 --> 11:10.940
那么就是你的

11:10.940 --> 11:12.940
一个文件代码很多

11:12.940 --> 11:13.940
但是只有一个文件

11:13.940 --> 11:15.940
就看你自己

11:15.940 --> 11:17.940
比方说我们这里对学生这个数据

11:17.940 --> 11:21.940
也可以进行拆分

11:21.940 --> 11:22.940
比方说你可以拆分成什么

11:22.940 --> 11:25.940
查询条件和查询结果

11:25.940 --> 11:26.940
那么把个查询状态

11:26.940 --> 11:27.940
这个推荐没有必要拆分了

11:27.940 --> 11:28.940
查询状态这个东西

11:28.940 --> 11:30.940
没啥可拆分的

11:30.940 --> 11:32.940
你可以把它放到查询结果里边

11:32.940 --> 11:33.940
是否拿到查询结果

11:33.940 --> 11:34.940
比方说查询状态

11:34.940 --> 11:36.940
放到这儿也可以

11:36.940 --> 11:37.940
状态

11:37.940 --> 11:39.940
就是看你自己拆不拆分

11:39.940 --> 11:41.940
这个东西没有一定的

11:41.940 --> 11:42.940
不是说一定要怎么样

11:42.940 --> 11:43.940
怎么样

11:43.940 --> 11:44.940
那我们现在就拆分

11:44.940 --> 11:45.940
就拆分

11:45.940 --> 11:46.940
拆分成两个

11:46.940 --> 11:48.940
两个Reducer

11:48.940 --> 11:50.940
拆分成两个Reducer

11:50.940 --> 11:51.940
好吧

11:51.940 --> 11:53.940
那咱们在这里新建两个文件

11:53.940 --> 11:56.940
一个是处理查询条件的文件

11:56.940 --> 11:57.940
一般来说

11:57.940 --> 11:58.940
我们写Reducer

11:58.940 --> 11:59.940
先不要去考虑任何副作用

11:59.940 --> 12:01.940
不要去考虑任何副作用

12:01.940 --> 12:02.940
就是没有副作用

12:02.940 --> 12:03.940
我们把写好

12:03.940 --> 12:04.940
把测试好

12:04.940 --> 12:05.940
没问题了

12:05.940 --> 12:06.940
过后我们再去考虑副作用

12:06.940 --> 12:07.940
这是一种常见的思路

12:07.940 --> 12:09.940
也是一种非常好的思路

12:09.940 --> 12:10.940
因为没有副作用的时候

12:10.940 --> 12:12.940
也是非常好测试的

12:12.940 --> 12:13.940
那么查询条件

12:13.940 --> 12:14.940
查询条件的话

12:14.940 --> 12:17.940
我们这里我们就写上这么一个Reducer

12:17.940 --> 12:20.940
就是Search

12:20.940 --> 12:22.940
什么Condition

12:22.940 --> 12:24.940
SearchCondition.js

12:24.940 --> 12:28.940
那么这里边就是保存查询条件的

12:28.940 --> 12:30.940
那到时候肯定要导出一个Reducer

12:30.940 --> 12:31.940
对不对

12:31.940 --> 12:32.940
这个毫无疑问

12:32.940 --> 12:33.940
到时候肯定要导出一个函数

12:33.940 --> 12:35.940
你给我一个状态

12:35.940 --> 12:37.940
然后再给我一个什么

12:37.940 --> 12:38.940
再给我一个Action

12:38.940 --> 12:40.940
我给你返回一个新的状态

12:40.940 --> 12:41.940
对吧

12:41.940 --> 12:43.940
导出这么一个Reducer

12:43.940 --> 12:49.940
这是处理查询条件的Reducer

12:49.940 --> 12:56.940
就是控制查询条件数据的Reducer

12:56.940 --> 12:58.940
那么再来一个Reducer

12:58.940 --> 13:01.940
就是Search

13:01.940 --> 13:03.940
SearchResult

13:03.940 --> 13:05.940
SearchResult.js

13:05.940 --> 13:09.940
那么这是控制查询结果的Reducer

13:09.940 --> 13:10.940
方形

13:10.940 --> 13:11.940
Stats

13:11.940 --> 13:12.940
Action

13:12.940 --> 13:19.940
这是控制查询结果的Reducer

13:19.940 --> 13:20.940
对吧

13:20.940 --> 13:21.940
这写这么两个Reducer

13:21.940 --> 13:23.940
到时候我们分开去写

13:23.940 --> 13:24.940
然后这两个Reducer

13:24.940 --> 13:25.940
是不是要合并

13:25.940 --> 13:26.940
对吧

13:26.940 --> 13:27.940
我们在Students里面

13:27.940 --> 13:28.940
就可以合并一次

13:28.940 --> 13:30.940
为什么说这是个组建书呢

13:30.940 --> 13:31.940
为什么说是个

13:31.940 --> 13:32.940
不是组建书

13:32.940 --> 13:34.940
为什么说是个数据书呢

13:34.940 --> 13:35.940
它会形成一个数形结构

13:35.940 --> 13:36.940
你看看

13:36.940 --> 13:38.940
我们现在形成了什么

13:38.940 --> 13:40.940
就是SearchCondition

13:40.940 --> 13:41.940
对吧

13:41.940 --> 13:42.940
这么一个Reducer

13:42.940 --> 13:44.940
还有一个什么

13:44.940 --> 13:48.940
还有一个就是SearchResult

13:48.940 --> 13:49.940
查询结果

13:49.940 --> 13:50.940
一个是查询条件

13:50.940 --> 13:51.940
一个是查询结果

13:51.940 --> 13:52.940
形成这么两个Reducer

13:52.940 --> 13:53.940
对吧

13:53.940 --> 13:54.940
两个Reducer

13:54.940 --> 13:55.940
那么现在我们是不是可以把合并

13:55.940 --> 13:57.940
合并成为一个Reducer

13:57.940 --> 13:59.940
合并成为一个Reducer

13:59.940 --> 14:00.940
对吧

14:00.940 --> 14:02.940
我们可以用CombinedReducers

14:02.940 --> 14:03.940
合并成为一个Reducer

14:04.940 --> 14:05.940
StudentsReducer

14:05.940 --> 14:07.940
合并成这个

14:07.940 --> 14:10.960
合并

14:10.960 --> 14:14.620
这边

14:14.620 --> 14:15.620
合并

14:15.620 --> 14:16.620
把这两个合并起来

14:16.620 --> 14:17.620
合并成一个Reducer

14:17.620 --> 14:19.620
到时候再把这个Students

14:19.620 --> 14:20.620
又合并到哪

14:20.620 --> 14:22.620
又合并到这个就是

14:22.620 --> 14:23.620
Reducer里面去

14:23.620 --> 14:24.620
最终的

14:24.620 --> 14:26.620
因为我们最终仓库只能用一个Reducer

14:26.620 --> 14:27.620
对吧

14:27.620 --> 14:28.620
我现在只搞定了学生

14:28.620 --> 14:29.620
万一还有其他数据

14:29.620 --> 14:30.620
还有什么班级

14:30.620 --> 14:31.620
老师

14:31.620 --> 14:32.620
这些数据

14:32.620 --> 14:33.620
那么又是别的Reducer了

14:33.620 --> 14:35.620
那么这里又合并到这里去

14:35.620 --> 14:37.620
就形成这么一种结构

14:37.620 --> 14:39.620
比如说这个数据处理

14:39.620 --> 14:41.620
它也会形成一种数据

14:41.620 --> 14:42.620
就是数据结构

14:42.620 --> 14:43.620
那么就会

14:43.620 --> 14:44.620
数据处理会形成数据结构

14:44.620 --> 14:45.620
那么自然而然

14:45.620 --> 14:46.620
它的那个就是

14:46.620 --> 14:48.620
数据它本身也会形成数据结构

14:48.620 --> 14:49.620
对吧

14:49.620 --> 14:50.620
每一个数据处理

14:50.620 --> 14:51.620
它会

14:51.620 --> 14:53.620
每一个Reducer管理自己的一块数据

14:53.620 --> 14:54.620
对吧

14:54.620 --> 14:55.620
OK

14:55.620 --> 14:56.620
那么到这个Students

14:56.620 --> 14:57.620
我们在新疆的文件夹

14:57.620 --> 14:58.620
Index 这样解释

14:58.620 --> 15:00.620
那么把学生里边的东西

15:00.620 --> 15:01.620
进行合并

15:01.620 --> 15:02.620
怎么合并呢

15:02.620 --> 15:03.620
我们导入

15:03.620 --> 15:04.620
导入

15:04.620 --> 15:05.620
什么呢

15:06.620 --> 15:08.620
condition

15:08.620 --> 15:09.620
查询条件

15:09.620 --> 15:10.620
从哪一导入呢

15:10.620 --> 15:11.620
从当前装了一下

15:11.620 --> 15:12.620
Surch Condition里面导入

15:12.620 --> 15:13.620
在导入什么呢

15:13.620 --> 15:15.620
在导入SearchResult

15:15.620 --> 15:17.620
导入这两个Reducer

15:17.620 --> 15:18.620
导入这两个Reducer

15:18.620 --> 15:19.620
然后再导入什么

15:19.620 --> 15:22.620
CombineFromRedux

15:23.620 --> 15:25.620
导入这个CombineReducers

15:26.620 --> 15:28.620
当然也可以用我们自己写的

15:28.620 --> 15:30.620
只不过我这个分字里边没有

15:30.620 --> 15:31.620
那么这里

15:31.620 --> 15:33.620
组合什么什么

15:33.620 --> 15:34.620
组合成SearchCondition

15:34.620 --> 15:36.620
SearchResult

15:36.620 --> 15:37.620
组合这两个

15:37.620 --> 15:38.620
组合这两个

15:38.620 --> 15:39.620
看到没

15:39.620 --> 15:40.620
把这两个组合起来

15:40.620 --> 15:41.620
形成一种数据结构

15:41.620 --> 15:43.620
然后把这个东西

15:43.620 --> 15:44.620
导出

15:44.620 --> 15:45.620
export

15:45.620 --> 15:46.620
default

15:46.620 --> 15:47.620
导出这个

15:47.620 --> 15:48.620
对吧

15:48.620 --> 15:49.620
我们在学生这里

15:49.620 --> 15:51.620
他自己有些很细微的信息

15:51.620 --> 15:52.620
那么如果说

15:52.620 --> 15:53.620
数据再复杂

15:53.620 --> 15:55.620
你是不是还可以继续细分

15:55.620 --> 15:56.620
继续建文研压

15:56.620 --> 15:57.620
继续细分

15:57.620 --> 15:58.620
就形成一种数形结构了

15:58.620 --> 15:59.620
每一个部分

15:59.620 --> 16:00.620
自己导出自己的数据

16:00.620 --> 16:01.620
那么这里学生

16:01.620 --> 16:02.620
我们这里由于数据

16:02.620 --> 16:03.620
我认为

16:03.620 --> 16:04.620
比方说吧

16:04.620 --> 16:05.620
其实一点都不复杂

16:05.620 --> 16:06.620
我认为他这里数据很多

16:06.620 --> 16:07.620
很复杂

16:07.620 --> 16:08.620
我要分开做

16:08.620 --> 16:09.620
就写了两个reducer

16:09.620 --> 16:10.620
那么这两个reducer

16:10.620 --> 16:11.620
在index里边

16:11.620 --> 16:12.620
把全部合并

16:12.620 --> 16:13.620
合并的来处理

16:13.620 --> 16:14.620
好了

16:14.620 --> 16:15.620
学生外边

16:15.620 --> 16:16.620
那么对于index

16:16.620 --> 16:17.620
皆是而言

16:17.620 --> 16:18.620
他认为

16:18.620 --> 16:19.620
你这个学生

16:19.620 --> 16:20.620
只有一个数据

16:20.620 --> 16:21.620
我不知道你是合并的

16:21.620 --> 16:22.620
我管你

16:22.620 --> 16:23.620
是不是合并的

16:23.620 --> 16:24.620
我只知道

16:24.620 --> 16:25.620
你就一块数据

16:25.620 --> 16:26.620
那么这里

16:26.620 --> 16:27.620
index里边

16:27.620 --> 16:28.620
他就把

16:28.620 --> 16:29.620
学生的一块导进来

16:29.620 --> 16:30.620
student

16:30.620 --> 16:31.620
from

16:31.620 --> 16:32.620
student

16:32.620 --> 16:33.620
导进来过后

16:33.620 --> 16:35.620
使用comband

16:35.620 --> 16:36.620
当然

16:36.620 --> 16:37.620
如果还有其他的

16:37.620 --> 16:38.620
老师的数据

16:38.620 --> 16:39.620
还有什么班级的数据

16:39.620 --> 16:41.620
那么我们以后

16:41.620 --> 16:42.620
就可以扩展了

16:42.620 --> 16:43.620
那么这里

16:43.620 --> 16:44.620
导入combandreducer

16:44.620 --> 16:46.620
这里再合并一次

16:46.620 --> 16:48.620
把student传进去

16:48.620 --> 16:49.620
student

16:49.620 --> 16:51.620
这是关于学生的数据

16:51.620 --> 16:52.620
学生的数据

16:52.620 --> 16:53.620
你可以换个名字

16:53.620 --> 16:54.620
student

16:54.620 --> 16:55.620
表示多个数据

16:55.620 --> 16:56.620
这里面

16:56.620 --> 16:57.620
我们再把整个导出

16:57.620 --> 16:59.620
整个导出的就是一个

16:59.620 --> 17:01.620
最终的一个reducer

17:01.620 --> 17:03.620
导出的就是最终的一个reducer

17:08.620 --> 17:09.620
那么在那个

17:09.620 --> 17:10.620
这个写完了

17:10.620 --> 17:12.620
那么这个reducer写完了

17:12.620 --> 17:13.620
reducer这里就导出来了

17:13.620 --> 17:15.620
导出一个最终的一个reducer

17:15.620 --> 17:16.620
在index里边

17:16.620 --> 17:17.620
该怎么写的

17:17.620 --> 17:19.620
是不是我们把这个结构写好

17:21.620 --> 17:22.620
导入Reduckers里边的

17:23.620 --> 17:24.620
createStore

17:25.620 --> 17:26.620
createStore

17:27.620 --> 17:29.620
这个index

17:29.620 --> 17:30.620
跟目录下面的index

17:30.620 --> 17:32.620
主要是用于创建仓库

17:33.620 --> 17:34.620
这个地方主要是用于

17:34.620 --> 17:36.620
创建仓库

17:37.620 --> 17:38.620
导出并导出

17:39.620 --> 17:40.620
并且导出

17:40.620 --> 17:41.620
那么这里

17:41.620 --> 17:42.620
我们就创建这么一个仓库

17:42.620 --> 17:43.620
createStore

17:43.620 --> 17:45.620
创建仓库是不是要传入reducer

17:45.620 --> 17:46.620
reducer是哪来的

17:46.620 --> 17:48.620
来自于reducer跟目录下面的index

17:48.620 --> 17:50.620
这个文件的主要作用是

17:51.620 --> 17:53.620
创建一个

17:53.620 --> 17:55.620
唯一的reducer

17:56.620 --> 17:57.620
把合并

17:57.620 --> 17:58.620
把这些乱七八糟的reducer

17:58.620 --> 17:59.620
因为我这里只有一个学生

17:59.620 --> 18:00.620
对吧

18:00.620 --> 18:01.620
将来还有可能有老师

18:01.620 --> 18:02.620
有班级的一些

18:02.620 --> 18:03.620
那么就在这里合并

18:03.620 --> 18:04.620
学生这里

18:04.620 --> 18:06.620
他也经过了自己的合并

18:06.620 --> 18:08.620
那么对于这个结构而言

18:08.620 --> 18:10.620
他不管学生里面有没有合并

18:10.620 --> 18:11.620
你给我的数据

18:11.620 --> 18:12.620
你给我的reducer

18:12.620 --> 18:13.620
反正我就把它放到这

18:13.620 --> 18:15.620
那么在index里边来

18:15.620 --> 18:17.620
index里边

18:17.620 --> 18:18.620
创建仓库

18:18.620 --> 18:20.620
那么我们这里需要导入一个

18:20.620 --> 18:21.620
跟

18:21.620 --> 18:22.620
就是reducer

18:23.620 --> 18:24.620
来自于哪呢

18:24.620 --> 18:25.620
reducer里边

18:25.620 --> 18:27.620
那么把reducer传进去

18:27.620 --> 18:28.620
也不需要给目人指

18:28.620 --> 18:29.620
reducer里边

18:29.620 --> 18:30.620
他自己会写目人指

18:30.620 --> 18:31.620
你不用管

18:31.620 --> 18:32.620
那么这里是不是得到一个仓库了

18:32.620 --> 18:33.620
对不对

18:33.620 --> 18:34.620
得到一个仓库

18:34.620 --> 18:36.620
OK 我把这个仓库导出

18:36.620 --> 18:37.620
default

18:37.620 --> 18:38.620
导出就完成了

18:38.620 --> 18:39.620
导出就完成了

18:41.620 --> 18:42.620
那么现在呢

18:42.620 --> 18:44.620
我们如果说要测试一下的话

18:44.620 --> 18:45.620
你看吧

18:45.620 --> 18:46.620
来测试一下吧

18:46.620 --> 18:47.620
现在我啥都没写

18:47.620 --> 18:49.620
就是tester.js来测试一下

18:49.620 --> 18:50.620
在index里边

18:50.620 --> 18:52.620
tester.js里面导入

18:52.620 --> 18:53.620
导入什么

18:53.620 --> 18:54.620
导入那个store

18:54.620 --> 18:55.620
from

18:55.620 --> 18:56.620
index

18:56.620 --> 18:57.620
来测试一下

18:57.620 --> 18:59.620
我们这里输出store.getState

18:59.620 --> 19:00.620
得到当前的状态

19:00.620 --> 19:01.620
你看一下吧

19:01.620 --> 19:03.620
得到当前的状态

19:03.620 --> 19:04.620
那么这里呢

19:04.620 --> 19:05.620
在index里边

19:05.620 --> 19:06.620
我们导入

19:06.620 --> 19:07.620
导入test

19:08.620 --> 19:09.620
store

19:10.620 --> 19:13.310
导入

19:15.310 --> 19:16.310
store

19:17.310 --> 19:18.310
导入store.test

19:19.310 --> 19:20.310
保存

19:20.310 --> 19:21.310
咱们运行一下

19:22.310 --> 19:23.310
这里

19:24.310 --> 19:25.310
start

19:26.310 --> 19:27.310
让它运行吧

19:27.310 --> 19:28.310
我们不管了

19:30.310 --> 19:31.310
那么

19:31.310 --> 19:32.310
它一开始会输出结果

19:32.310 --> 19:33.310
但是一开始呢

19:33.310 --> 19:34.310
由于我们reducer里面

19:34.310 --> 19:35.310
也没有给默认数据

19:35.310 --> 19:36.310
对吧

19:36.310 --> 19:37.310
没有给默认数

19:37.310 --> 19:38.310
没有给默认数据

19:38.310 --> 19:39.310
那么我们之前

19:39.310 --> 19:41.310
按照我们之前学过的原码

19:41.310 --> 19:44.310
comband reducer 是不是

19:45.310 --> 19:46.310
它不允许你这样做

19:46.310 --> 19:47.310
对不对

19:47.310 --> 19:48.310
因为我们这个reducer里边

19:48.310 --> 19:50.310
到时候我们当时是

19:50.310 --> 19:51.310
导入了的就是合并了的

19:51.310 --> 19:52.310
但是我们这些reducer

19:52.310 --> 19:53.310
都没有写默认值

19:53.310 --> 19:54.310
对不对

19:54.310 --> 19:55.310
都没有写任何的默认值

19:57.310 --> 19:58.310
你看一下吧

20:01.010 --> 20:02.010
一开始

20:03.010 --> 20:05.010
cannot find module

20:05.010 --> 20:06.010
query stream

20:08.010 --> 20:09.010
它说

20:10.010 --> 20:11.010
query stream

20:11.010 --> 20:12.010
没有安装

20:12.010 --> 20:13.010
query stream

20:13.010 --> 20:14.010
应该是在这里

20:14.010 --> 20:15.010
应该是在这里

20:15.010 --> 20:16.010
这个地方

20:16.010 --> 20:18.010
哪个地方用了query stream的

20:18.010 --> 20:20.010
哪个地方我用了query stream的

20:21.010 --> 20:22.010
有些组建里面

20:22.010 --> 20:23.010
我用了query stream的

20:23.010 --> 20:24.010
行吧

20:24.010 --> 20:25.010
那我就安装吧

20:25.010 --> 20:26.010
一二

20:26.010 --> 20:27.010
add

20:27.010 --> 20:28.010
我应该在

20:28.010 --> 20:29.010
应该在master的分支里面

20:29.010 --> 20:31.010
把一些东西全部安装的得了

20:33.010 --> 20:34.010
安装吧

20:34.010 --> 20:35.010
总之到现在我们就

20:35.010 --> 20:36.010
继续写吧

20:36.010 --> 20:37.010
安装

20:37.010 --> 20:38.010
那么现在就是说

20:39.010 --> 20:40.010
我们这些reducer里面

20:40.010 --> 20:42.010
是不是没有写数据的默认值

20:42.010 --> 20:43.010
那么我先把写上吧

20:43.010 --> 20:44.010
一块一块搞定

20:44.010 --> 20:45.010
一块一块搞定

20:45.010 --> 20:46.010
不着急

20:46.010 --> 20:47.010
我们把分开了

20:47.010 --> 20:48.010
分开了分得更细了

20:48.010 --> 20:49.010
比方说这里

20:49.010 --> 20:51.010
查询条件这里

20:51.010 --> 20:52.010
查询条件是不是

20:52.010 --> 20:53.010
这里有四个

20:53.010 --> 20:54.010
OK

20:54.010 --> 20:55.010
那么我们查询条件

20:55.010 --> 20:56.010
就可以作为一个对象

20:56.010 --> 20:57.010
查询条件可以作为一个对象

20:57.010 --> 20:58.010
给它写上吧

20:58.010 --> 21:00.010
这个initial

21:00.010 --> 21:03.010
initial默认的state

21:03.010 --> 21:04.010
默认状态

21:04.010 --> 21:06.010
默认状态

21:06.010 --> 21:08.010
就是默认状态

21:08.010 --> 21:09.010
默认状态是什么呢

21:09.010 --> 21:10.010
默认状态是

21:10.010 --> 21:11.010
有这么四个值

21:11.010 --> 21:14.010
我们对照这个笔记来写吧

21:15.010 --> 21:16.010
有这么关键字

21:16.010 --> 21:18.010
关键字我们就key

21:18.010 --> 21:20.010
key的话是个空之不串

21:20.010 --> 21:21.010
然后还有什么呢

21:21.010 --> 21:22.010
关键字性别

21:22.010 --> 21:24.010
性别就是sex

21:24.010 --> 21:26.010
sex的话默认负一

21:27.010 --> 21:29.010
然后当前页码

21:29.010 --> 21:30.010
当前页码

21:30.010 --> 21:31.010
当前码就用配级

21:31.010 --> 21:33.010
配级默认一

21:33.010 --> 21:34.010
当前第一页

21:34.010 --> 21:35.010
页容量

21:35.010 --> 21:36.010
每页显绕条呢

21:36.010 --> 21:37.010
内面

21:37.010 --> 21:38.010
每页显示的十条

21:38.010 --> 21:40.010
比方说就是默认状态

21:40.010 --> 21:42.010
OK我们这里负责给它

21:42.010 --> 21:44.010
给它一个默认状态

21:44.010 --> 21:46.010
当然这里我先暂时的

21:46.010 --> 21:48.010
暂时的就返回state

21:48.010 --> 21:50.010
好那么到了射起result里边

21:50.010 --> 21:51.010
那么这里是不是也要的

21:51.010 --> 21:52.010
也得有一个默认状态

21:52.010 --> 21:53.010
对吧

21:53.010 --> 21:54.010
也得有一个默认状态

21:55.010 --> 21:56.010
我们这里

21:56.010 --> 21:57.010
先把默认状态写出来

21:57.010 --> 21:58.010
默认状态的话

21:58.010 --> 21:59.010
这是查询结果

21:59.010 --> 22:01.010
查询结果有个学生数组

22:01.010 --> 22:02.010
学生数组

22:02.010 --> 22:03.010
student

22:03.010 --> 22:05.010
不要去想见面上是什么

22:05.010 --> 22:06.010
千万不要去想见面上是什么

22:06.010 --> 22:08.010
我们就控制数据就行了

22:08.010 --> 22:09.010
因为发现控制数据呢

22:09.010 --> 22:10.010
其实我个人觉得

22:10.010 --> 22:13.010
控制数据比控制界面有意思的多

22:13.010 --> 22:15.010
学生总数

22:15.010 --> 22:16.010
学生总数就是偷偷

22:16.010 --> 22:17.010
偷偷总数

22:17.010 --> 22:19.010
总数的话默认是0

22:19.010 --> 22:21.010
默认是0

22:21.010 --> 22:22.010
学生总数

22:22.010 --> 22:23.010
那么查询

22:23.010 --> 22:24.010
查询状态

22:24.010 --> 22:25.010
是否正在查询中

22:25.010 --> 22:26.010
那么我们这里是用一个

22:26.010 --> 22:27.010
isnody

22:27.010 --> 22:28.010
isnody

22:28.010 --> 22:29.010
为什么

22:29.010 --> 22:30.010
设置为什么呢

22:30.010 --> 22:31.010
设置为

22:33.010 --> 22:34.010
force

22:34.010 --> 22:36.010
默认是没有正在查询中

22:36.010 --> 22:38.010
那么这里呢

22:38.010 --> 22:39.010
给它个出示值

22:39.010 --> 22:41.010
然后这里先啥都不做

22:41.010 --> 22:42.010
状态也不会改变

22:42.010 --> 22:44.010
反正就是默认把状态返回

22:44.010 --> 22:45.010
保存

22:45.010 --> 22:46.010
我们主要是

22:46.010 --> 22:47.010
这还有

22:47.010 --> 22:50.010
还找不到这个query stream

22:50.010 --> 22:51.010
query stream

22:51.010 --> 22:52.010
这里没有运行

22:52.010 --> 22:53.010
要start

22:54.010 --> 22:55.010
好

22:55.010 --> 22:56.010
那么现在写好了

22:56.010 --> 22:57.010
再来看一下

22:57.010 --> 22:58.010
现在我们这里

22:58.010 --> 22:59.010
两个reducer

22:59.010 --> 23:00.010
设起condition

23:00.010 --> 23:01.010
设起result

23:01.010 --> 23:02.010
这两个reducer

23:02.010 --> 23:04.010
它各自有自己的状态默认值

23:04.010 --> 23:06.010
那么它会产生一个默认的数据

23:06.010 --> 23:07.010
那么这两个数据

23:07.010 --> 23:08.010
会被合并到哪

23:08.010 --> 23:09.010
合并到学生

23:09.010 --> 23:10.010
这个数据里面

23:10.010 --> 23:11.010
形成一个对象

23:11.010 --> 23:12.010
这两个数据

23:12.010 --> 23:13.010
会形成一个对象

23:13.010 --> 23:14.010
合并到这里面

23:14.010 --> 23:16.010
甚至你对象的名字

23:16.010 --> 23:17.010
也可以改一下

23:17.010 --> 23:18.010
你甚至可以改一下

23:18.010 --> 23:19.010
我们这里就使用的是

23:19.010 --> 23:20.010
reducer那个名字

23:20.010 --> 23:21.010
对吧

23:23.010 --> 23:24.010
当时我做了界面的

23:24.010 --> 23:25.010
我还做了界面的

23:25.010 --> 23:26.010
不用去看界面

23:26.010 --> 23:27.010
跟界面没关系

23:27.010 --> 23:28.010
不用去看界面

23:28.010 --> 23:29.010
行了

23:29.010 --> 23:30.010
我把界面去掉

23:30.010 --> 23:31.010
跟界面没有任何关系

23:31.010 --> 23:33.010
没有任何关系

23:33.010 --> 23:35.010
一毛钱关系没有

23:37.010 --> 23:38.010
没有界面

23:38.010 --> 23:39.010
sorry

23:39.010 --> 23:40.010
没有界面

23:41.010 --> 23:42.010
你看

23:42.010 --> 23:43.010
那么整个

23:43.010 --> 23:44.010
整个状态里边

23:44.010 --> 23:45.010
整个

23:45.010 --> 23:46.010
工程状态里边

23:46.010 --> 23:47.010
有一个学生对象

23:47.010 --> 23:48.010
这个学生对象

23:48.010 --> 23:49.010
哪来的

23:49.010 --> 23:50.010
那么在那个

23:50.010 --> 23:51.010
reducer里面

23:51.010 --> 23:52.010
这个index里面

23:52.010 --> 23:53.010
出现了

23:53.010 --> 23:54.010
学生对象

23:54.010 --> 23:55.010
这个学生对象用的是什么

23:55.010 --> 23:56.010
用的是学生里面的

23:57.010 --> 23:58.010
reducer

23:58.010 --> 23:59.010
而那个reducer

23:59.010 --> 24:00.010
他又去合并了

24:00.010 --> 24:01.010
两个射起抗敌性

24:01.010 --> 24:02.010
和射起result

24:02.010 --> 24:03.010
对吧

24:03.010 --> 24:04.010
他又去合并了

24:04.010 --> 24:05.010
两个射起抗敌性

24:05.010 --> 24:06.010
和射起result

24:06.010 --> 24:07.010
看到没

24:07.010 --> 24:08.010
就形成这么一种结构了

24:08.010 --> 24:09.010
当然你这个名字

24:09.010 --> 24:10.010
你随便改

24:10.010 --> 24:11.010
比方说你这里

24:11.010 --> 24:12.010
我乱的写什么

24:12.010 --> 24:13.010
射起抗敌性

24:13.010 --> 24:14.010
就是写抗敌性

24:14.010 --> 24:15.010
然后这里我乱的写

24:15.010 --> 24:16.010
什么射起result

24:16.010 --> 24:17.010
就是result

24:17.010 --> 24:18.010
可以啊

24:18.010 --> 24:19.010
你随便改就行了

24:19.010 --> 24:20.010
那么现在呢

24:20.010 --> 24:22.010
认识里面变成这样的格式了

24:22.010 --> 24:23.010
这就是数据

24:23.010 --> 24:24.010
对吧

24:24.010 --> 24:25.010
那么闻到查询信息

24:25.010 --> 24:26.010
以及查询结果

24:26.010 --> 24:27.010
是不是都保存在这里边了

24:27.010 --> 24:28.010
好

24:28.010 --> 24:29.010
那么接下来

24:29.010 --> 24:30.010
我们来就来思考

24:30.010 --> 24:32.010
比方说查询条件这一块

24:32.010 --> 24:33.010
查询条件这一块

24:33.010 --> 24:36.010
它会发生哪些变化呢

24:36.010 --> 24:38.010
是不是关键质会变

24:38.010 --> 24:39.010
对吧

24:39.010 --> 24:40.010
关键质会变

24:40.010 --> 24:41.010
还有什么

24:41.010 --> 24:42.010
性别会变

24:42.010 --> 24:43.010
耶马会变

24:43.010 --> 24:44.010
对不对

24:44.010 --> 24:45.010
还有什么联卖者

24:45.010 --> 24:46.010
是不是也会变

24:46.010 --> 24:47.010
这些东西

24:47.010 --> 24:48.010
都会变

24:48.010 --> 24:49.010
是不是都会变啊

24:49.010 --> 24:50.010
对不对

24:50.010 --> 24:51.010
ok

24:51.010 --> 24:52.010
那么既然他们都会变的话

24:52.010 --> 24:54.010
那么是不是都有可能会设置

24:54.010 --> 24:56.010
有可能我一次性设置key

24:56.010 --> 24:58.010
有一次性设置sex

24:58.010 --> 25:00.010
有可能我们这样子设置

25:00.010 --> 25:01.010
我有可能呢

25:01.010 --> 25:03.010
先改变他的key值

25:03.010 --> 25:04.010
改变他的key值

25:04.010 --> 25:06.010
key值改为abc

25:06.010 --> 25:08.010
sex呢改为1

25:08.010 --> 25:10.010
然后呢配级改为2

25:10.010 --> 25:11.010
比方说吧

25:11.010 --> 25:12.010
比方说举个例子嘛

25:12.010 --> 25:13.010
举个例子

25:13.010 --> 25:15.010
比方说我们有这种改变

25:15.010 --> 25:16.010
那么就是把这三个属性

25:16.010 --> 25:17.010
改成这个

25:17.010 --> 25:18.010
其他的属性是不是不动

25:18.010 --> 25:19.010
是不动

25:19.010 --> 25:21.010
是这个意思吧

25:21.010 --> 25:22.010
那么这里呢

25:22.010 --> 25:23.010
我们有很多种做法

25:23.010 --> 25:24.010
比方说呢

25:24.010 --> 25:25.010
我们可以

25:25.010 --> 25:26.010
I再的更改

25:26.010 --> 25:27.010
更改key

25:27.010 --> 25:28.010
更改sex

25:28.010 --> 25:29.010
更改配级

25:29.010 --> 25:30.010
更改里面的对吧

25:30.010 --> 25:31.010
可以I再的更改

25:31.010 --> 25:32.010
也可以呢一起更改

25:32.010 --> 25:33.010
就看你自己

25:33.010 --> 25:34.010
看你自己

25:34.010 --> 25:35.010
看你具体的情况

25:35.010 --> 25:36.010
比方说

25:36.010 --> 25:37.010
我们这里的更改

25:37.010 --> 25:38.010
都是很灵活的

25:38.010 --> 25:39.010
也没有什么特殊的要求

25:39.010 --> 25:40.010
我们可以更改一个

25:40.010 --> 25:41.010
也可以更改两个

25:41.010 --> 25:42.010
可以更改三个

25:42.010 --> 25:43.010
那么我们就可以这样子行

25:43.010 --> 25:45.010
我们只需要一种x

25:45.010 --> 25:46.010
就是迁迹

25:46.010 --> 25:47.010
抗迹行

25:47.010 --> 25:48.010
这么一种x就行

25:48.010 --> 25:50.010
那么这个x内行

25:50.010 --> 25:51.010
也就是我们这里switch

25:51.010 --> 25:53.010
判断x的内行

25:53.010 --> 25:54.010
x点

25:54.010 --> 25:55.010
tab对吧

25:55.010 --> 25:57.010
判断这个x的内行

25:57.010 --> 25:59.010
如果说你的x内行是啥呢

25:59.010 --> 26:00.010
好

26:00.010 --> 26:01.010
这里是不是要写x内行啊

26:01.010 --> 26:02.010
那么x内行写哪

26:02.010 --> 26:03.010
是不是写这

26:03.010 --> 26:04.010
一般来说

26:04.010 --> 26:05.010
这个x内行

26:05.010 --> 26:07.010
我们一般会跟这个地方对应

26:07.010 --> 26:08.010
对应

26:08.010 --> 26:09.010
那你这里一个文件夹

26:09.010 --> 26:10.010
student

26:10.010 --> 26:11.010
那么我们这里一个文件夹

26:11.010 --> 26:12.010
student

26:12.010 --> 26:14.010
表示我一个对应的x内行

26:14.010 --> 26:15.010
那么这里的文件

26:15.010 --> 26:16.010
一般来说是这样子

26:16.010 --> 26:18.010
那么这里边是search condition

26:18.010 --> 26:19.010
对吧

26:19.010 --> 26:20.010
我们这里也建个文件

26:20.010 --> 26:21.010
search

26:21.010 --> 26:22.010
condition

26:22.010 --> 26:23.010
对吧

26:23.010 --> 26:24.010
有个对应有个对应的关系

26:24.010 --> 26:25.010
那么这里呢

26:25.010 --> 26:27.010
我们去导出各种x内行

26:27.010 --> 26:28.010
各种的x内行

26:28.010 --> 26:30.010
在这里去导出

26:30.010 --> 26:32.010
比方说吧

26:32.010 --> 26:34.010
我们这里导出一个啥呢

26:34.010 --> 26:36.010
我们之前是一个一个导出了

26:36.010 --> 26:37.010
对吧

26:37.010 --> 26:38.010
那么现在呢

26:38.010 --> 26:39.010
也可以把合并成一个对象来导出

26:39.010 --> 26:40.010
就是随便

26:40.010 --> 26:41.010
这个玩意你不用去纠结

26:41.010 --> 26:42.010
不用去纠结

26:42.010 --> 26:44.010
那么这里写上这么一个对象

26:44.010 --> 26:45.010
action

26:45.010 --> 26:46.010
taps

26:46.010 --> 26:47.010
这么一个对象

26:47.010 --> 26:48.010
各种x内行

26:48.010 --> 26:49.010
就是关于

26:49.010 --> 26:50.010
查询条件

26:50.010 --> 26:52.010
学生的查询条件里面

26:52.010 --> 26:53.010
有哪些操作

26:53.010 --> 26:55.010
对学生查询条件的改变

26:55.010 --> 26:56.010
有哪些操作

26:56.010 --> 26:58.010
比方说我们这里就写一个change

26:58.010 --> 26:59.010
change

26:59.010 --> 27:01.010
那么这是x内行

27:01.010 --> 27:02.010
注意啊

27:02.010 --> 27:03.010
这是x内行

27:03.010 --> 27:05.010
比方说我们只有一个

27:05.010 --> 27:06.010
比方说只有一个

27:06.010 --> 27:08.010
就是

27:08.010 --> 27:10.010
x的

27:10.010 --> 27:11.010
内行

27:12.010 --> 27:13.010
打拳的注射的话就是

27:13.010 --> 27:14.010
学生

27:14.010 --> 27:15.010
对

27:15.010 --> 27:17.010
学生

27:17.010 --> 27:19.010
查询条件

27:22.010 --> 27:23.010
改变的

27:23.010 --> 27:24.010
x内行

27:24.010 --> 27:25.010
你像改变学生查询条件

27:25.010 --> 27:26.010
你必须要出发x

27:26.010 --> 27:27.010
那么这有哪些x

27:27.010 --> 27:28.010
可以改变

27:28.010 --> 27:29.010
那么比方说我们就一个

27:29.010 --> 27:30.010
就一个

27:30.010 --> 27:31.010
那么change

27:31.010 --> 27:32.010
这个x内行

27:32.010 --> 27:33.010
我们就使用个symbol

27:33.010 --> 27:34.010
symbol

27:34.010 --> 27:35.010
那么就是change

27:36.010 --> 27:37.010
那你说

27:37.010 --> 27:38.010
这样子写的话

27:38.010 --> 27:39.010
会不会重明呢

27:39.010 --> 27:40.010
不会重明

27:40.010 --> 27:41.010
symbol

27:41.010 --> 27:42.010
它不会重明

27:42.010 --> 27:44.010
你放100个新

27:44.010 --> 27:45.010
它说什么

27:45.010 --> 27:46.010
symbol是什么

27:46.010 --> 27:47.010
returns

27:47.010 --> 27:48.010
返回一个新的

27:48.010 --> 27:50.010
唯一的symbol外流

27:50.010 --> 27:51.010
一定是唯一的

27:51.010 --> 27:52.010
你不用去担心

27:52.010 --> 27:53.010
担心这个问题

27:53.010 --> 27:54.010
好

27:54.010 --> 27:55.010
那么这个x型type

27:55.010 --> 27:56.010
那么导出

27:56.010 --> 27:57.010
对吧

27:57.010 --> 27:58.010
导出

27:58.010 --> 27:59.010
导出

27:59.010 --> 28:00.010
我们就直接在这里导出

28:00.010 --> 28:01.010
导出

28:01.010 --> 28:02.010
好

28:02.010 --> 28:03.010
这是一个

28:03.010 --> 28:04.010
好

28:04.010 --> 28:05.010
那么有了

28:05.010 --> 28:06.010
只有一个x型type

28:06.010 --> 28:08.010
比方说只有一个x型type

28:08.010 --> 28:09.010
那么写到这

28:09.010 --> 28:10.010
可以顺便

28:10.010 --> 28:12.010
顺便写一个x型创建函数

28:12.010 --> 28:13.010
顺便写这么一个

28:13.010 --> 28:14.010
x型创建函数

28:14.010 --> 28:15.010
好

28:15.010 --> 28:16.010
那么这里写上

28:16.010 --> 28:17.010
x型创建函数

28:17.010 --> 28:19.010
方形

28:20.010 --> 28:21.010
创建函数

28:21.010 --> 28:23.010
就是change

28:23.010 --> 28:24.010
change

28:24.010 --> 28:25.010
那么比方说

28:25.010 --> 28:27.010
就跟x型的内行名字一样

28:27.010 --> 28:28.010
当然也可以

28:28.010 --> 28:29.010
按照我们之前的名归范

28:29.010 --> 28:30.010
create什么

28:30.010 --> 28:31.010
change

28:31.010 --> 28:32.010
x型

28:32.010 --> 28:33.010
前面加上一个create

28:33.010 --> 28:34.010
后面加上一个x型

28:34.010 --> 28:35.010
这样子也行

28:35.010 --> 28:37.010
看你公司的要求

28:37.010 --> 28:38.010
我们这里比方说

28:38.010 --> 28:40.010
可以直接简单的写为change

28:40.010 --> 28:41.010
change

28:41.010 --> 28:42.010
改变

28:42.010 --> 28:43.010
产生一个改变的x型

28:43.010 --> 28:44.010
因为在这个文件里边

28:44.010 --> 28:45.010
它一定是

28:45.010 --> 28:46.010
要么是得到x型的内行

28:46.010 --> 28:48.010
要么是得到x型的

28:48.010 --> 28:49.010
创建函数

28:49.010 --> 28:50.010
对不对

28:50.010 --> 28:51.010
没有别的了

28:51.010 --> 28:52.010
那么change

28:52.010 --> 28:53.010
得到一个

28:53.010 --> 28:54.010
x型的创建函数

28:54.010 --> 28:56.010
就是得到一个就是

28:56.010 --> 28:58.010
x型的创建函数

28:58.010 --> 28:59.010
那么这个x型的创建函数

28:59.010 --> 29:01.010
你给我传一个什么进来了

29:01.010 --> 29:03.010
你给我传一个什么进来了

29:03.010 --> 29:04.010
那么你是不是要把

29:04.010 --> 29:05.010
你要想

29:05.010 --> 29:06.010
你不要说你想改变

29:06.010 --> 29:07.010
对吧

29:07.010 --> 29:08.010
改变这些条件

29:08.010 --> 29:10.010
改变这些产品条件

29:10.010 --> 29:11.010
那么改变哪些条件

29:11.010 --> 29:12.010
是不是要告诉我

29:12.010 --> 29:13.010
对不对

29:13.010 --> 29:14.010
是不是要告诉我

29:14.010 --> 29:15.010
你要改变哪些条件

29:15.010 --> 29:16.010
OK

29:16.010 --> 29:17.010
那么我们这里的自请约定

29:17.010 --> 29:18.010
自请约定

29:18.010 --> 29:19.010
你要给我一个对象

29:19.010 --> 29:20.010
给我一个对象

29:20.010 --> 29:21.010
六

29:21.010 --> 29:23.010
新的条件

29:23.010 --> 29:24.010
你给我一个对象

29:24.010 --> 29:25.010
好

29:25.010 --> 29:26.010
那么比方说

29:26.010 --> 29:27.010
你到时候新的条件

29:27.010 --> 29:28.010
就这样子给我

29:28.010 --> 29:29.010
这样子给我

29:29.010 --> 29:30.010
那么

29:30.010 --> 29:31.010
或者是这样子给我

29:31.010 --> 29:32.010
对吧

29:32.010 --> 29:33.010
你要改变哪些东西

29:33.010 --> 29:34.010
你就给我就行了

29:34.010 --> 29:35.010
你不用给完

29:35.010 --> 29:36.010
但是你要改变哪些

29:36.010 --> 29:37.010
就行了

29:37.010 --> 29:39.010
这是新的查询对

29:39.010 --> 29:40.010
就是查询条件

29:40.010 --> 29:42.010
这是

29:42.010 --> 29:46.010
根据新的查询条件

29:46.010 --> 29:49.010
产生一个x

29:49.010 --> 29:51.010
不要去想什么副作用

29:51.010 --> 29:52.010
不要去想阿加克斯

29:52.010 --> 29:53.010
我们先做的时候

29:53.010 --> 29:54.010
一定是先把那些

29:54.010 --> 29:56.010
无副作用的东西做完

29:56.010 --> 29:58.010
就是哪怕不进阿加克斯

29:58.010 --> 29:59.010
我们就在界面上测试

29:59.010 --> 30:01.010
模拟数据

30:01.010 --> 30:02.010
都可以完成

30:02.010 --> 30:03.010
所以不要去想阿加克斯

30:03.010 --> 30:04.010
阿加克斯是最后的事情

30:04.010 --> 30:05.010
副作用是最后的事情

30:05.010 --> 30:06.010
那么这点

30:06.010 --> 30:07.010
我就返回一个非常简单的

30:07.010 --> 30:08.010
返回了一个Type值

30:08.010 --> 30:09.010
等于什么

30:09.010 --> 30:11.010
等于ActionTypes

30:11.010 --> 30:12.010
Change

30:12.010 --> 30:13.010
Type值

30:13.010 --> 30:14.010
然后呢

30:14.010 --> 30:16.010
它的payload

30:16.010 --> 30:17.010
就是附加数据是什么

30:17.010 --> 30:18.010
就是6抗低型

30:18.010 --> 30:20.010
把附加数据传给你

30:20.010 --> 30:21.010
那么这样子

30:21.010 --> 30:22.010
就产生了这么一个Action

30:22.010 --> 30:23.010
对吧

30:23.010 --> 30:24.010
这是Action创建函数

30:24.010 --> 30:25.010
这是Action

30:25.010 --> 30:26.010
Creator

30:26.010 --> 30:27.010
创建函数

30:27.010 --> 30:28.010
好

30:28.010 --> 30:29.010
那么到这边来

30:29.010 --> 30:30.010
那么现在是不是可以判断了

30:30.010 --> 30:32.010
你这个Action的内形

30:32.010 --> 30:33.010
约只有一种内形

30:33.010 --> 30:34.010
我们只处理那一种内形

30:34.010 --> 30:35.010
这里导入这个内形

30:35.010 --> 30:37.010
ActionTypes

30:37.010 --> 30:38.010
ActionTypes

30:38.010 --> 30:39.010
From

30:39.010 --> 30:40.010
来自于哪呢

30:40.010 --> 30:41.010
反而上级目录

30:41.010 --> 30:42.010
再反正上级目录

30:42.010 --> 30:43.010
Action

30:43.010 --> 30:44.010
Students

30:44.010 --> 30:45.010
SearchCondition

30:45.010 --> 30:48.010
那么这里导入ActionTypes

30:48.010 --> 30:49.010
那么这个ActionTypes

30:49.010 --> 30:50.010
如果说你的内形

30:50.010 --> 30:51.010
等于ActionTypes

30:51.010 --> 30:52.010
里边的迁迹

30:52.010 --> 30:53.010
是不是我要改变

30:53.010 --> 30:54.010
是不是要改变我的

30:54.010 --> 30:55.010
查询状态

30:55.010 --> 30:56.010
对吧

30:56.010 --> 30:57.010
就是我们要改变

30:57.010 --> 30:58.010
这个查询状态

30:58.010 --> 30:59.010
就是查询条件

30:59.010 --> 31:00.010
是不是要改变

31:00.010 --> 31:01.010
那么怎么改变呢

31:01.010 --> 31:02.010
是不是要混合

31:02.010 --> 31:03.010
因为我们的

31:03.010 --> 31:04.010
改变的数据在哪

31:04.010 --> 31:05.010
数据是不是在Action

31:05.010 --> 31:06.010
Payload里面

31:06.010 --> 31:07.010
对不对

31:07.010 --> 31:08.010
是不是在这里面

31:08.010 --> 31:09.010
你看一下这里

31:09.010 --> 31:10.010
创建Action的时候

31:10.010 --> 31:11.010
数据是不是放到这里面了

31:11.010 --> 31:12.010
数据始终在这里面

31:12.010 --> 31:14.010
我们这是一种规范

31:14.010 --> 31:15.010
不是说必须这样子写

31:15.010 --> 31:16.010
只是一种规范

31:16.010 --> 31:17.010
我们通常数据

31:17.010 --> 31:18.010
都是放到这里面了

31:18.010 --> 31:19.010
你要从Action里面

31:19.010 --> 31:20.010
去拿数据都从这边去拿

31:20.010 --> 31:21.010
那么这里

31:21.010 --> 31:22.010
传递的是一个对象

31:22.010 --> 31:23.010
那么我们是不是

31:23.010 --> 31:24.010
只要把这个对象

31:24.010 --> 31:25.010
里面的属性

31:25.010 --> 31:26.010
覆盖掉

31:26.010 --> 31:27.010
它之前的状态

31:27.010 --> 31:28.010
就都完事了

31:28.010 --> 31:29.010
对吧

31:29.010 --> 31:30.010
于是我们这里

31:30.010 --> 31:31.010
就返回一个什么

31:31.010 --> 31:32.010
返回一个新的对象

31:32.010 --> 31:33.010
这里报警告诉你

31:33.010 --> 31:35.010
因为没写Default

31:35.010 --> 31:36.010
没有写Default

31:36.010 --> 31:38.010
Default returnState

31:38.010 --> 31:40.010
那下面就不用写了

31:40.010 --> 31:42.010
那么这个返回一个新的对象

31:42.010 --> 31:43.010
新的对象里面

31:43.010 --> 31:44.010
把State展开

31:44.010 --> 31:45.010
原来的状态

31:45.010 --> 31:46.010
原来的条件展开

31:46.010 --> 31:48.010
然后把新的

31:48.010 --> 31:49.010
新的

31:49.010 --> 31:50.010
就是条件

31:50.010 --> 31:51.010
来自于Action的

31:51.010 --> 31:53.010
Payload里面的条件

31:53.010 --> 31:54.010
当然这个东西

31:54.010 --> 31:55.010
也可以在这里进行检购

31:55.010 --> 31:56.010
对吧

31:56.010 --> 31:57.010
这也是一种常见做法

31:57.010 --> 31:58.010
就是

31:58.010 --> 31:59.010
得到什么

31:59.010 --> 32:00.010
得到这个Type

32:00.010 --> 32:01.010
和Payload

32:01.010 --> 32:02.010
对吧

32:02.010 --> 32:03.010
在进行检购也行

32:03.010 --> 32:04.010
这个东西都无所谓

32:05.010 --> 32:06.010
看你怎么去写

32:06.010 --> 32:07.010
对吧

32:07.010 --> 32:08.010
我们把我们新的

32:08.010 --> 32:09.010
这个查询条件

32:09.010 --> 32:10.010
是不是把覆盖进去

32:10.010 --> 32:11.010
就完事了

32:11.010 --> 32:12.010
对不对

32:12.010 --> 32:13.010
没问题吧

32:13.010 --> 32:14.010
好

32:14.010 --> 32:15.010
那咱们来试一下吧

32:15.010 --> 32:16.010
行不行

32:16.010 --> 32:17.010
咱们来试一下

32:17.010 --> 32:18.010
好 试一下

32:18.010 --> 32:19.010
我们在Test里边

32:19.010 --> 32:20.010
比方说

32:20.010 --> 32:21.010
我们一开始

32:21.010 --> 32:23.010
为了让我们看得清楚

32:23.010 --> 32:25.010
我们还是记录一个Logo

32:25.010 --> 32:26.010
Logo

32:26.010 --> 32:27.010
要Start

32:28.010 --> 32:29.010
ADD

32:29.010 --> 32:30.010
Redux

32:30.010 --> 32:32.700
Logo

32:32.700 --> 32:33.700
好 那么这里

32:33.700 --> 32:35.700
我们还是把

32:35.700 --> 32:36.700
导入个中间键

32:36.700 --> 32:37.700
导入这么一个中间键

32:37.700 --> 32:38.700
Import

32:38.700 --> 32:39.700
Logo

32:39.700 --> 32:40.700
From

32:40.700 --> 32:41.700
Redux

32:41.700 --> 32:42.700
Logo

32:42.700 --> 32:44.700
好 那么这里

32:44.700 --> 32:45.700
第二参数

32:46.700 --> 32:47.700
Apply

32:47.700 --> 32:48.700
还要导入Apply

32:48.700 --> 32:49.700
Middleware

32:49.700 --> 32:50.700
Apply

32:50.700 --> 32:51.700
Middleware

32:51.700 --> 32:54.340
Middleware

32:54.340 --> 32:56.340
好 那么把Logo放进去

32:57.340 --> 32:58.340
好

32:59.340 --> 33:00.340
行了

33:00.340 --> 33:01.340
咱们再启动起来

33:05.440 --> 33:06.440
好

33:06.440 --> 33:07.440
咱们来看一下

33:07.440 --> 33:08.440
我们在Test里边

33:09.440 --> 33:10.440
拿到这个数据

33:10.440 --> 33:12.440
数据仓库里边的数据

33:12.440 --> 33:13.440
拿到数据仓库之后

33:13.440 --> 33:14.440
我们这里是不是可以

33:14.440 --> 33:15.440
分发数据了

33:15.440 --> 33:16.440
Dispatch

33:16.440 --> 33:17.440
分发数据

33:17.440 --> 33:18.440
分发数据的时候

33:18.440 --> 33:19.440
是不是要得到一个X

33:19.440 --> 33:20.440
那么我们可以利用

33:20.440 --> 33:21.440
X型创建函数

33:22.440 --> 33:23.440
拿到这个X型创建函数

33:23.440 --> 33:24.440
从哪里面拿

33:24.440 --> 33:25.440
不要说X型里边

33:25.440 --> 33:27.440
Students

33:28.440 --> 33:29.440
设计康迪型

33:29.440 --> 33:30.440
那么这里边

33:30.440 --> 33:31.440
有一个就是

33:31.440 --> 33:32.440
Change

33:33.440 --> 33:34.440
改变状态

33:34.440 --> 33:35.440
改变状态

33:35.440 --> 33:36.440
给改变什么状态

33:36.440 --> 33:37.440
改变一个状态

33:37.440 --> 33:38.440
比方说

33:38.440 --> 33:40.440
我们把Key变成ABC

33:41.440 --> 33:42.440
然后把

33:42.440 --> 33:44.440
Page变成2

33:44.440 --> 33:45.440
比方说改变这两个状态

33:45.440 --> 33:46.440
保存

33:46.440 --> 33:47.440
你看一下

33:47.440 --> 33:48.440
我们触发了一个X型

33:48.440 --> 33:49.440
看一下日字记录

33:49.440 --> 33:50.440
你看一下

33:50.440 --> 33:51.440
是不是有X型触发

33:51.440 --> 33:52.440
对吧

33:52.440 --> 33:53.440
它告诉你

33:53.440 --> 33:54.440
之前的状态是啥

33:54.440 --> 33:55.440
之前的状态是这个

33:55.440 --> 33:56.440
之前的

33:56.440 --> 33:57.440
康迪性这一部分的状态

33:57.440 --> 33:58.440
是控制不出来

33:58.440 --> 33:59.440
Limit10配级1

33:59.440 --> 34:00.440
这个是负1

34:00.440 --> 34:01.440
那么触发之后

34:01.440 --> 34:02.440
你看一下新的状态

34:03.440 --> 34:06.440
ABCLimit10配级等于2

34:06.440 --> 34:07.440
这个是等于负1

34:07.440 --> 34:08.440
我只改变了这两个

34:08.440 --> 34:09.440
其他都没变化

34:10.440 --> 34:11.440
原来的意思吧

34:11.440 --> 34:12.440
咱们就

34:12.440 --> 34:13.440
可以通过这种方式

34:13.440 --> 34:15.440
来触发数据变化了

34:15.440 --> 34:16.440
那么千级

34:16.440 --> 34:17.440
这是个X型创建函数

34:17.440 --> 34:18.440
那么我们通过千级

34:18.440 --> 34:19.440
这个函数

34:19.440 --> 34:20.440
来得到一个X型

34:20.440 --> 34:21.440
把X型来分发出去

34:21.440 --> 34:22.440
就完事了

34:22.440 --> 34:23.440
好

34:23.440 --> 34:24.440
这是关于

34:25.440 --> 34:26.440
这个地方

34:26.440 --> 34:27.440
是不是很简单

34:28.440 --> 34:29.440
设计康迪性

34:29.440 --> 34:30.440
是不是很简单

34:30.440 --> 34:31.440
大家可以先暂停视频

34:31.440 --> 34:32.440
自己去写一遍

34:32.440 --> 34:33.440
当然我这里

34:33.440 --> 34:34.440
是把合并起来写的

34:34.440 --> 34:35.440
就是说

34:35.440 --> 34:36.440
为了方便我书写带

34:36.440 --> 34:37.440
也为了方便你今后

34:37.440 --> 34:38.440
更改数据

34:39.440 --> 34:40.440
因为你更改的数据

34:40.440 --> 34:41.440
到常见很多

34:41.440 --> 34:42.440
你可能想只改动key

34:42.440 --> 34:43.440
也可能想把key

34:43.440 --> 34:44.440
和sec一起改动

34:44.440 --> 34:45.440
我说不准

34:45.440 --> 34:46.440
你要干

34:46.440 --> 34:47.440
我说不准

34:47.440 --> 34:48.440
你要干

34:48.440 --> 34:49.440
所以说我这里

34:49.440 --> 34:51.440
就把它写成一个X型

34:51.440 --> 34:52.440
那你想改啥

34:52.440 --> 34:53.440
反正都是有一些

34:53.440 --> 34:54.440
品面数据

34:54.440 --> 34:55.440
你想改啥改啥

34:55.440 --> 34:56.440
好了

34:56.440 --> 34:57.440
现在我们再回到这

34:57.440 --> 34:59.440
search result

34:59.440 --> 35:01.440
search result 这里边来

35:01.440 --> 35:03.440
那么这里边

35:03.440 --> 35:04.440
你要给我

35:04.440 --> 35:05.440
那么我们其实

35:05.440 --> 35:07.440
也可以利用类似的模式

35:07.440 --> 35:08.440
这种模式

35:08.440 --> 35:09.440
其实在以后的开发中

35:09.440 --> 35:11.440
体系挺常见的

35:11.440 --> 35:12.440
在reducer里边

35:12.440 --> 35:13.440
就是一些简单的数据

35:13.440 --> 35:14.440
没有特别

35:14.440 --> 35:15.440
复杂的逻辑

35:15.440 --> 35:16.440
我们就

35:16.440 --> 35:17.440
它想改啥改啥

35:17.440 --> 35:18.440
那么ok

35:18.440 --> 35:20.440
ok 我就可以让你

35:20.440 --> 35:21.440
用那么方式来更改

35:21.440 --> 35:22.440
无所谓的

35:22.440 --> 35:23.440
就是

35:23.440 --> 35:24.440
就写一个简单的reducer

35:24.440 --> 35:25.440
就一个类型

35:25.440 --> 35:27.440
那么你更改就完成了

35:27.440 --> 35:28.440
那么其实这边

35:28.440 --> 35:29.440
也可以用类似的方式

35:29.440 --> 35:30.440
但是呢

35:30.440 --> 35:31.440
我为了强行

35:31.440 --> 35:32.440
做一些区别出来

35:32.440 --> 35:33.440
算了我还是

35:33.440 --> 35:34.440
这里写两个Type

35:34.440 --> 35:35.440
免得有东西说

35:35.440 --> 35:36.440
老师平时讲

35:36.440 --> 35:37.440
你就讲一个Type

35:37.440 --> 35:38.440
那以后公司里面

35:38.440 --> 35:39.440
我遇到多个Type

35:39.440 --> 35:40.440
我又不会写了

35:40.440 --> 35:41.440
我的天啊

35:41.440 --> 35:42.440
那我就讲多个

35:42.440 --> 35:43.440
那么这里边

35:43.440 --> 35:45.440
也是一样

35:45.440 --> 35:46.440
默认状态隐写出来了

35:46.440 --> 35:47.440
那么我们这里

35:47.440 --> 35:49.440
分别来控制

35:49.440 --> 35:50.440
比方说

35:50.440 --> 35:52.440
控制学生的

35:52.440 --> 35:53.440
学生的数组

35:53.440 --> 35:55.440
因为学生的

35:55.440 --> 35:57.440
对 控制学生的数组

35:57.440 --> 35:58.440
和总数

35:58.440 --> 35:59.440
我想把这两个分成一个

35:59.440 --> 36:01.440
把这两个化成一个

36:01.440 --> 36:02.440
为什么

36:02.440 --> 36:03.440
比如同学说

36:03.440 --> 36:04.440
那是来自阿迦克珍习修

36:04.440 --> 36:05.440
倒不是这个原因

36:05.440 --> 36:06.440
是因为逻辑

36:06.440 --> 36:07.440
逻辑

36:07.440 --> 36:08.440
因为我们这里

36:08.440 --> 36:09.440
表示什么意思

36:09.440 --> 36:10.440
表示是查询结果

36:10.440 --> 36:11.440
对吧

36:11.440 --> 36:12.440
表示查询结果

36:12.440 --> 36:13.440
你查询结果

36:13.440 --> 36:14.440
学生变动了

36:14.440 --> 36:16.440
是不是总数也在跟那边

36:16.440 --> 36:17.440
对吧

36:17.440 --> 36:18.440
万一总数

36:18.440 --> 36:19.440
是不是也有可能会变

36:19.440 --> 36:20.440
因为你

36:20.440 --> 36:21.440
学生变化了

36:21.440 --> 36:22.440
是不是有新的查询

36:22.440 --> 36:23.440
每一次新的查询

36:23.440 --> 36:24.440
是不是总数

36:24.440 --> 36:25.440
都有可能会变化

36:25.440 --> 36:26.440
这是逻辑

36:26.440 --> 36:27.440
这不是什么

36:27.440 --> 36:28.440
阿迦克珍习修

36:28.440 --> 36:29.440
不是说服务器

36:29.440 --> 36:30.440
给我返回了一个总数

36:30.440 --> 36:31.440
在这

36:31.440 --> 36:32.440
它就应该

36:32.440 --> 36:33.440
放到一个x里面

36:33.440 --> 36:34.440
一起变化

36:34.440 --> 36:35.440
不是这个意思

36:35.440 --> 36:36.440
那把哪怕服务器

36:36.440 --> 36:37.440
分开给你返回的

36:37.440 --> 36:38.440
你这一次

36:38.440 --> 36:39.440
请求只给你返回

36:39.440 --> 36:40.440
一个学生数组

36:40.440 --> 36:41.440
你下一次请求

36:41.440 --> 36:42.440
才给你返回总数

36:42.440 --> 36:43.440
那都必须

36:43.440 --> 36:44.440
在我们这里

36:44.440 --> 36:45.440
都要把它形成一个

36:45.440 --> 36:46.440
明白的意思吗

36:46.440 --> 36:47.440
我们这里

36:47.440 --> 36:48.440
不考虑副作用

36:48.440 --> 36:49.440
这是个查询结果

36:49.440 --> 36:50.440
你学生数组变了

36:50.440 --> 36:51.440
那说明查询结果变了

36:51.440 --> 36:52.440
那总数肯定在变

36:52.440 --> 36:53.440
肯定在变

36:53.440 --> 36:54.440
跑不了的

36:55.440 --> 36:56.440
所以说

36:56.440 --> 36:57.440
我们这里

36:57.440 --> 36:58.440
我们可以按照这个逻辑

36:58.440 --> 37:00.440
我们写出这么一个x类型

37:00.440 --> 37:01.440
在x里面

37:01.440 --> 37:02.440
我们新加一个

37:02.440 --> 37:03.440
但是提示

37:03.440 --> 37:04.440
开发中真的

37:04.440 --> 37:05.440
考虑到那么细吗

37:05.440 --> 37:06.440
不禁然

37:06.440 --> 37:07.440
不禁然

37:08.440 --> 37:09.440
大家其实会发现

37:12.010 --> 37:13.010
没元老师

37:13.010 --> 37:16.010
心思是非常非常细腻的

37:17.010 --> 37:19.010
虽然心格是一个大老厨

37:19.010 --> 37:20.010
但是

37:20.010 --> 37:21.010
写东西的时候

37:21.010 --> 37:23.010
形式是非常细腻的

37:23.010 --> 37:24.010
我这里

37:24.010 --> 37:25.010
还是一样的

37:25.010 --> 37:26.010
导出这么一个

37:26.010 --> 37:27.010
就是action types

37:28.010 --> 37:29.010
这里导出一个

37:30.010 --> 37:31.010
action types

37:31.010 --> 37:33.010
这些都是一些固定的写法

37:33.010 --> 37:34.010
但是每个公司

37:34.010 --> 37:36.010
它不一定是这种格式

37:36.010 --> 37:37.010
我这要说清楚

37:37.010 --> 37:38.010
那么这里

37:40.010 --> 37:41.010
什么set

37:44.010 --> 37:45.010
students

37:45.010 --> 37:47.010
set students

37:48.010 --> 37:50.010
and total

37:50.010 --> 37:51.010
设置

37:51.010 --> 37:53.010
学生数组和总数

37:53.010 --> 37:55.010
学生数组和总数

37:55.010 --> 37:57.010
我们写这么一个action类型

37:57.010 --> 37:58.010
类型是什么

37:58.010 --> 37:59.010
一个symbol

37:59.010 --> 38:01.010
一个symbol

38:01.010 --> 38:03.010
名字就该取这个

38:03.010 --> 38:04.010
无所谓

38:04.010 --> 38:06.010
那么这个action是做什么呢

38:06.010 --> 38:08.010
是设置

38:08.010 --> 38:10.010
设置学生

38:10.010 --> 38:12.010
数组

38:12.010 --> 38:13.010
学生查询

38:13.010 --> 38:15.010
结果数组

38:15.010 --> 38:17.010
和总数

38:17.010 --> 38:18.010
同时设置

38:18.010 --> 38:19.010
比方说我们以前

38:19.010 --> 38:20.010
没做过同时设置

38:20.010 --> 38:21.010
多个数据

38:21.010 --> 38:22.010
那么现在做一下吧

38:23.010 --> 38:24.010
那么现在

38:24.010 --> 38:25.010
第二个还有一个设置

38:25.010 --> 38:26.010
设置

38:26.010 --> 38:27.010
set is loading

38:29.010 --> 38:31.580
symbol

38:31.580 --> 38:32.580
复制一下吧

38:32.580 --> 38:33.580
set is loading

38:34.580 --> 38:35.580
那么这个action types

38:35.580 --> 38:36.580
是不是写完了

38:36.580 --> 38:37.580
咱们再写两个

38:37.580 --> 38:39.580
action的创建函数

38:39.580 --> 38:40.580
创建函数

38:40.580 --> 38:41.580
第一个

38:41.580 --> 38:43.580
同名字

38:44.580 --> 38:45.580
那么

38:45.580 --> 38:46.580
设置学生数组和总数

38:46.580 --> 38:47.580
你是不是要给我

38:47.580 --> 38:48.580
两个东西

38:48.580 --> 38:49.580
一个是学生数组

38:49.580 --> 38:50.580
对不对

38:51.580 --> 38:52.580
二位

38:52.580 --> 38:53.580
你是不是要给我

38:53.580 --> 38:54.580
一个学生数组

38:54.580 --> 38:55.580
然后还要给我一个什么

38:55.580 --> 38:56.580
还要给我一个总数

38:56.580 --> 38:57.580
total

38:57.580 --> 38:58.580
你再给我吧

38:58.580 --> 38:59.580
两个东西

38:59.580 --> 39:00.580
以前我们好像

39:00.580 --> 39:01.580
action的创建函数

39:01.580 --> 39:02.580
里边还没有写过

39:02.580 --> 39:03.580
两个参数

39:03.580 --> 39:04.580
两个参数

39:04.580 --> 39:05.580
总之你返回一个

39:05.580 --> 39:06.580
action就完事了

39:06.580 --> 39:07.580
Type为啥

39:07.580 --> 39:08.580
Type为action types

39:08.580 --> 39:10.580
set is students

39:10.580 --> 39:11.580
and total

39:12.580 --> 39:13.580
这是内行

39:13.580 --> 39:14.580
action的内行

39:14.580 --> 39:15.580
然后set

39:15.580 --> 39:16.580
还有一个是什么

39:16.580 --> 39:17.580
还有一个是payload

39:17.580 --> 39:18.580
它的复载的数据

39:18.580 --> 39:19.580
复载的数据

39:19.580 --> 39:20.580
是不是有两个数据

39:20.580 --> 39:21.580
两个数据

39:21.580 --> 39:22.580
可以往对象里面放

39:22.580 --> 39:23.580
对吧

39:23.580 --> 39:24.580
对象里面放

39:24.580 --> 39:25.580
我们把它放到对象里面

39:25.580 --> 39:26.580
data是

39:26.580 --> 39:27.580
学生的数据

39:27.580 --> 39:29.580
数据来自于这个数组

39:29.580 --> 39:31.580
学生数据来自于这个数组

39:31.580 --> 39:32.580
那么总数total

39:32.580 --> 39:33.580
来自于

39:33.580 --> 39:34.580
就来自于这个边量total

39:34.580 --> 39:35.580
对吧

39:35.580 --> 39:36.580
总之我们把封装一下

39:36.580 --> 39:37.580
封装了

39:37.580 --> 39:38.580
放到payload里面

39:38.580 --> 39:39.580
当然这个地方

39:39.580 --> 39:40.580
传对象

39:41.580 --> 39:42.580
这是

39:43.580 --> 39:44.580
得到一个

39:44.580 --> 39:45.580
这是个action creator

39:48.580 --> 39:49.580
这是得到一个

39:49.580 --> 39:50.580
用

39:52.580 --> 39:53.580
设置什么

39:53.580 --> 39:54.580
学生数据

39:54.580 --> 39:56.580
和总数的action

39:56.580 --> 39:57.580
这个action

39:57.580 --> 39:58.580
它用来设置

39:58.580 --> 39:59.580
学生数据和总数

39:59.580 --> 40:00.580
好

40:00.580 --> 40:01.580
那么再写一个

40:01.580 --> 40:02.580
再写一个设置

40:02.580 --> 40:03.580
is loading

40:03.580 --> 40:04.580
is loading

40:04.580 --> 40:05.580
放个型

40:05.580 --> 40:07.580
set is loading

40:07.580 --> 40:08.580
你给我

40:08.580 --> 40:09.580
传一个布

40:09.580 --> 40:11.580
到底是True还是Force

40:11.580 --> 40:12.580
那么我给你返回一个action

40:12.580 --> 40:13.580
type为什么

40:13.580 --> 40:14.580
action types

40:15.580 --> 40:16.580
什么

40:16.580 --> 40:18.580
set is loading

40:18.580 --> 40:20.580
然后payload了

40:20.580 --> 40:21.580
payload的

40:21.580 --> 40:22.580
就为is loading

40:23.580 --> 40:24.580
就这两个action

40:24.580 --> 40:25.580
没别的了

40:25.580 --> 40:26.580
这是得到一个

40:26.580 --> 40:28.580
设置是否正在

40:29.580 --> 40:30.580
得到一个

40:30.580 --> 40:32.580
设置是否正在

40:32.580 --> 40:34.580
夹在中的action

40:34.580 --> 40:35.580
这个action

40:35.580 --> 40:36.580
用来设置这个东西

40:36.580 --> 40:37.580
这是action creator

40:37.580 --> 40:38.580
通过这个函数

40:38.580 --> 40:39.580
可以得到这个action

40:40.580 --> 40:41.580
对吧

40:41.580 --> 40:42.580
好

40:42.580 --> 40:43.580
那么现在这个action

40:43.580 --> 40:44.580
action这一块写完了

40:44.580 --> 40:45.580
然后我们回到这个

40:45.580 --> 40:46.580
就是你会发现

40:46.580 --> 40:47.580
就是

40:47.580 --> 40:48.580
做了12个了一点

40:48.580 --> 40:49.580
但是你会发现

40:49.580 --> 40:51.580
结构变得非常非常清晰了

40:51.580 --> 40:52.580
形成一种非常

40:52.580 --> 40:53.580
舒服的一种

40:53.580 --> 40:54.580
结构了

40:54.580 --> 40:55.580
然后我们现在

40:55.580 --> 40:56.580
到这个readouts里边来

40:56.580 --> 40:57.580
那么我们这里

40:57.580 --> 40:58.580
是不是判断两个

40:58.580 --> 40:59.580
就两种情况

40:59.580 --> 41:00.580
就两种情况

41:00.580 --> 41:01.580
还有什么情况

41:01.580 --> 41:02.580
就两种情况

41:02.580 --> 41:03.580
然后我们这里用switch

41:03.580 --> 41:04.580
switch

41:04.580 --> 41:05.580
好

41:05.580 --> 41:06.580
那么这个action

41:06.580 --> 41:07.580
那么这里解构一下

41:07.580 --> 41:08.580
解构成

41:08.580 --> 41:09.580
type

41:09.580 --> 41:10.580
payload

41:10.580 --> 41:11.580
好

41:11.580 --> 41:12.580
那么这里

41:12.580 --> 41:13.580
type

41:13.580 --> 41:14.580
type

41:14.580 --> 41:15.580
好

41:15.580 --> 41:16.580
如果说它等于什么

41:16.580 --> 41:17.580
我们要把action导入进来

41:17.580 --> 41:18.580
import

41:18.580 --> 41:19.580
action

41:19.580 --> 41:20.580
taps

41:21.580 --> 41:22.580
taps

41:22.580 --> 41:23.580
from

41:24.580 --> 41:25.580
回上级

41:25.580 --> 41:26.580
回上级action

41:26.580 --> 41:27.580
student

41:27.580 --> 41:28.580
设置result

41:29.580 --> 41:30.580
那么这里

41:30.580 --> 41:31.580
action tabs

41:31.580 --> 41:32.580
第二

41:32.580 --> 41:33.580
如果说你是

41:33.580 --> 41:34.580
设置什么

41:34.580 --> 41:35.580
设置

41:35.580 --> 41:36.580
loading

41:36.580 --> 41:37.580
如果说你是这种情况的话

41:37.580 --> 41:38.580
那么我们设置啥

41:38.580 --> 41:39.580
是不是

41:39.580 --> 41:41.580
返回了新数据

41:41.580 --> 41:42.580
把这个set展开

41:42.580 --> 41:43.580
其他的不动

41:43.580 --> 41:44.580
就把这个一声loading

41:44.580 --> 41:45.580
重新设置一下就行了

41:45.580 --> 41:46.580
对吧

41:46.580 --> 41:47.580
把一声loading

41:47.580 --> 41:48.580
一声loading这个数据

41:48.580 --> 41:49.580
重新设置一下

41:49.580 --> 41:50.580
设置为什么呢

41:50.580 --> 41:51.580
设置为你的payload

41:51.580 --> 41:52.580
你一定要

41:52.580 --> 41:53.580
附加的数据

41:53.580 --> 41:54.580
全在这里边

41:54.580 --> 41:55.580
你想都没有想去

41:55.580 --> 41:56.580
一在这里边

41:56.580 --> 41:57.580
你只要去思考

41:57.580 --> 41:58.580
它是什么样的格式

41:58.580 --> 41:59.580
就完成了

41:59.580 --> 42:00.580
如果说你的action tabs

42:00.580 --> 42:01.580
你如果你的籽

42:01.580 --> 42:02.580
类型的籽

42:02.580 --> 42:03.580
setstudent

42:03.580 --> 42:04.580
total

42:04.580 --> 42:05.580
return

42:05.580 --> 42:06.580
State不变

42:06.580 --> 42:07.580
State不变

42:07.580 --> 42:08.580
好了吗

42:08.580 --> 42:09.580
设置不设置两个

42:09.580 --> 42:10.580
对吧

42:10.580 --> 42:12.580
一个是学生的

42:12.580 --> 42:14.580
一个是学生的数组

42:14.580 --> 42:15.580
对吧

42:15.580 --> 42:16.580
student数组

42:16.580 --> 42:17.580
那么

42:17.580 --> 42:18.580
student

42:19.580 --> 42:20.580
数组

42:20.580 --> 42:21.580
当然这个地方

42:21.580 --> 42:22.580
也可以用一个

42:22.580 --> 42:23.580
更加符合逻辑的data

42:23.580 --> 42:24.580
对吧

42:24.580 --> 42:25.580
表示学生的数据

42:25.580 --> 42:26.580
也行

42:26.580 --> 42:27.580
那么如果是用

42:27.580 --> 42:28.580
那么两个都说一下

42:28.580 --> 42:29.580
如果是用

42:29.580 --> 42:30.580
这个属性名的话

42:30.580 --> 42:31.580
那你这里

42:31.580 --> 42:32.580
就怎么写

42:32.580 --> 42:33.580
payload

42:34.580 --> 42:35.580
是不是payload的是一个对象

42:35.580 --> 42:36.580
它里面一个data

42:36.580 --> 42:37.580
对吧

42:37.580 --> 42:38.580
data

42:38.580 --> 42:39.580
data

42:39.580 --> 42:40.580
对不对

42:40.580 --> 42:41.580
拿过来

42:41.580 --> 42:42.580
对吧

42:42.580 --> 42:43.580
然后再把它什么

42:43.580 --> 42:44.580
总数

42:44.580 --> 42:45.580
total

42:45.580 --> 42:46.580
payload

42:46.580 --> 42:47.580
total

42:47.580 --> 42:48.580
当然如果说

42:48.580 --> 42:50.580
如果说你这边的属性类型

42:50.580 --> 42:51.580
就是data

42:51.580 --> 42:52.580
当然data

42:52.580 --> 42:53.580
这个数据

42:53.580 --> 42:54.580
这个名字也挺好的

42:54.580 --> 42:55.580
非常非常好

42:55.580 --> 42:56.580
为什么我看这个名字

42:56.580 --> 42:57.580
就知道好了

42:57.580 --> 42:58.580
因为它本身就在学生里边

42:58.580 --> 42:59.580
它本身就在学生里边

42:59.580 --> 43:00.580
就不用去

43:00.580 --> 43:02.580
再去标读它是学生数组了

43:02.580 --> 43:03.580
这个我们就可以直接

43:03.580 --> 43:04.580
把payload展开

43:04.580 --> 43:05.580
对吧

43:05.580 --> 43:06.580
payload展开就完事

43:06.580 --> 43:07.580
因为payload就是个对象

43:07.580 --> 43:08.580
它里面有data

43:08.580 --> 43:09.580
是有total

43:09.580 --> 43:10.580
对吧

43:10.580 --> 43:11.580
那么一共就这样

43:11.580 --> 43:13.580
那么d4s的话就返回

43:13.580 --> 43:14.580
状态无变返回

43:14.580 --> 43:15.580
那么你看

43:15.580 --> 43:17.580
学生的查询结果

43:17.580 --> 43:18.580
是不是也写完了

43:18.580 --> 43:19.580
对

43:19.580 --> 43:20.580
reducer写完了

43:20.580 --> 43:21.580
index也写完了

43:21.580 --> 43:22.580
那么试一下吧

43:22.580 --> 43:23.580
试一下

43:23.580 --> 43:24.580
那么test里边

43:24.580 --> 43:25.580
咱们之前

43:25.580 --> 43:26.580
改变了条件

43:26.580 --> 43:27.580
对不对

43:27.580 --> 43:28.580
改变了条件

43:28.580 --> 43:29.580
OK

43:29.580 --> 43:30.580
我们在store里面

43:30.580 --> 43:31.580
再dispatch一个

43:31.580 --> 43:32.580
set is loading

43:34.580 --> 43:35.580
from

43:35.580 --> 43:36.580
exit action

43:36.580 --> 43:37.580
student

43:37.580 --> 43:38.580
search result

43:39.580 --> 43:41.580
set is loading

43:42.580 --> 43:43.580
set is loading

43:45.580 --> 43:46.580
那么分发一个action

43:46.580 --> 43:48.580
把它 is loading 改为 true

43:48.580 --> 43:49.580
试一下吧

43:49.580 --> 43:50.580
保存

43:50.580 --> 43:51.580
你看出发两个action

43:51.580 --> 43:52.580
第二个action是

43:52.580 --> 43:53.580
set is loading

43:53.580 --> 43:54.580
那么它之前

43:54.580 --> 43:55.580
result里边

43:55.580 --> 43:56.580
is loading 为 force

43:56.580 --> 43:57.580
设置完了之后

43:57.580 --> 43:58.580
result里边

43:58.580 --> 43:59.580
is loading 为 true

43:59.580 --> 44:00.580
对吧

44:00.580 --> 44:01.580
数据变化了

44:03.580 --> 44:04.580
了解吧

44:05.580 --> 44:06.580
好

44:06.580 --> 44:08.580
然后这一块搞定了之后

44:08.580 --> 44:10.580
dispatch搞定了之后

44:10.580 --> 44:12.580
那么现在再考虑副作用

44:12.580 --> 44:13.580
副作用的话

44:13.580 --> 44:14.580
那么无非就是

44:14.580 --> 44:15.580
arjax请求

44:15.580 --> 44:16.580
对不对

44:16.580 --> 44:17.580
arjax请求

44:17.580 --> 44:18.580
副作用的话

44:18.580 --> 44:19.580
我们是用sunk

44:19.580 --> 44:20.580
来处理副作用

44:20.580 --> 44:21.580
因此我们在

44:21.580 --> 44:22.580
倉库里边

44:22.580 --> 44:23.580
使用一个中间键

44:23.580 --> 44:24.580
sunk

44:24.580 --> 44:26.580
导入一个中间键

44:26.580 --> 44:27.580
import

44:27.580 --> 44:28.580
sunk

44:28.580 --> 44:29.580
from

44:29.580 --> 44:30.580
redux

44:30.580 --> 44:31.580
sunk

44:31.580 --> 44:32.580
sunk放这

44:35.580 --> 44:36.580
这是中间键

44:37.580 --> 44:38.580
那么有了sunk之后

44:38.580 --> 44:39.580
我们在action里边

44:39.580 --> 44:40.580
是不是

44:40.580 --> 44:41.580
比方说

44:41.580 --> 44:42.580
查询条件的改变

44:42.580 --> 44:43.580
有没有啥副作用

44:43.580 --> 44:44.580
没有啥副作用

44:44.580 --> 44:45.580
查询条件改变

44:45.580 --> 44:46.580
没有啥副作用

44:46.580 --> 44:47.580
主要是查询结果

44:47.580 --> 44:48.580
查询结果

44:48.580 --> 44:49.580
我们有的时候

44:49.580 --> 44:50.580
要通过arjax请求

44:50.580 --> 44:51.580
来拿到查询结果

44:51.580 --> 44:53.580
说查询结果这一块

44:53.580 --> 44:54.580
它是有副作用的

44:54.580 --> 44:55.580
是有副作用的

44:55.580 --> 44:56.580
于是我们这里

44:56.580 --> 44:57.580
再导出一个函数

44:57.580 --> 44:58.580
来处理副作用

44:58.580 --> 44:59.580
比方说

44:59.580 --> 45:00.580
我们导出一个

45:00.580 --> 45:01.580
fetch

45:01.580 --> 45:02.580
fetch

45:02.580 --> 45:04.580
我们一般副作用的话

45:04.580 --> 45:06.580
比方有些特殊的词

45:06.580 --> 45:08.580
一开头就知道是副作用的

45:08.580 --> 45:09.580
比方fetch

45:09.580 --> 45:10.580
fetch明显就是一个arjax请求

45:10.580 --> 45:11.580
对吧

45:11.580 --> 45:12.580
通过一些特殊的单词

45:12.580 --> 45:13.580
就知道它这个函数有副作用

45:13.580 --> 45:14.580
有些公司

45:14.580 --> 45:16.580
还要求你写一个特殊的符号

45:16.580 --> 45:17.580
表示这个函数有副作用

45:17.580 --> 45:18.580
无所谓

45:18.580 --> 45:19.580
fetch

45:19.580 --> 45:22.580
我们这里写上fetch student

45:22.580 --> 45:24.580
fetch student

45:24.580 --> 45:26.580
那么这个函数的副作用是什么

45:26.580 --> 45:27.580
它是这样子

45:28.580 --> 45:30.580
它是根据

45:30.580 --> 45:32.580
根据查询条件

45:32.580 --> 45:34.580
根据查询条件

45:34.580 --> 45:39.580
就是当前仓库中的查询条件

45:39.580 --> 45:42.580
查询学生

45:42.580 --> 45:44.580
根据仓库中的查询条件

45:44.580 --> 45:46.580
查询学生

45:46.580 --> 45:47.580
它是有这么一个副作用

45:47.580 --> 45:49.580
那么查询条件在哪呢

45:49.580 --> 45:50.580
我们这里肯定要返回一个函数

45:50.580 --> 45:51.580
对吧

45:51.580 --> 45:52.580
返回的是一个有副作用的函数

45:52.580 --> 45:54.580
那查询肯定要一步

45:54.580 --> 45:56.580
那么我们这里返回一个一步函数

45:56.580 --> 45:57.580
返回一个一步函数

45:57.580 --> 45:58.580
那么这个一步函数里边

45:58.580 --> 45:59.580
是不是我们之前说过

45:59.580 --> 46:00.580
上课里边

46:00.580 --> 46:01.580
这个一步函数里边说

46:01.580 --> 46:02.580
它给你注入了

46:02.580 --> 46:03.580
dispatch

46:03.580 --> 46:04.580
还有什么get a status

46:04.580 --> 46:05.580
对吧

46:05.580 --> 46:06.580
这些东西都给你注入进来了

46:06.580 --> 46:08.580
那你是不是可以直接用

46:08.580 --> 46:09.580
是不是可以直接用

46:09.580 --> 46:10.580
好

46:10.580 --> 46:11.580
那么我们这里

46:11.580 --> 46:12.580
到时候要Rx请求

46:12.580 --> 46:13.580
我们是不是要导入

46:13.580 --> 46:15.580
学生的API

46:15.580 --> 46:19.490
对不对

46:19.490 --> 46:20.490
services

46:20.490 --> 46:21.490
student

46:21.490 --> 46:22.490
导入那个

46:22.490 --> 46:24.490
search student

46:24.490 --> 46:25.490
search student

46:25.490 --> 46:27.490
导入这个方法

46:27.490 --> 46:28.490
好

46:28.490 --> 46:29.490
那么现在来吧

46:30.490 --> 46:31.490
那么现在呢

46:31.490 --> 46:33.490
我要根据查询条件的查询学生

46:33.490 --> 46:34.490
那查询条件在哪呢

46:34.490 --> 46:35.490
是不是get a status

46:35.490 --> 46:36.490
对吧

46:36.490 --> 46:37.490
我们来输出一下吧

46:37.490 --> 46:38.490
get a status

46:38.490 --> 46:39.490
调用这个方法

46:39.490 --> 46:40.490
你看一下

46:40.490 --> 46:41.490
是不是能够拿到

46:41.490 --> 46:42.490
现在的查询条件

46:42.490 --> 46:43.490
比方说我们这里写完了

46:43.490 --> 46:44.490
好

46:44.490 --> 46:45.490
我们把这个x

46:45.490 --> 46:46.490
把这个x去触发

46:46.490 --> 46:47.490
在task里边

46:47.490 --> 46:48.490
去触发

46:48.490 --> 46:50.490
不要什么欠几的东西了

46:50.490 --> 46:51.490
放着吧

46:51.490 --> 46:52.490
放着

46:54.490 --> 46:55.490
这个先注释掉

46:56.490 --> 46:57.490
好

46:57.490 --> 46:59.490
我们使用

47:01.490 --> 47:03.490
fetch student

47:03.490 --> 47:04.490
好

47:04.490 --> 47:05.490
那么这里fetch student

47:05.490 --> 47:06.490
它会根据

47:06.490 --> 47:07.490
它会得到一个

47:08.490 --> 47:09.490
函数

47:09.490 --> 47:10.490
把函数当成一个型来触发

47:10.490 --> 47:11.490
那么上课

47:11.490 --> 47:12.490
它会运行那个函数

47:12.490 --> 47:14.490
那么那个函数里边呢

47:14.490 --> 47:15.490
它会根据当前条件

47:15.490 --> 47:16.490
去查询学生

47:16.490 --> 47:17.490
那么这个函数里边

47:17.490 --> 47:18.490
我们目前打印了当前条件

47:18.490 --> 47:20.490
看一下能不能打印出来

47:21.490 --> 47:22.490
嗯

47:24.490 --> 47:26.490
这里没保存

47:26.490 --> 47:27.490
没保存

47:27.490 --> 47:28.490
你看

47:28.490 --> 47:30.490
是不是拿到整个状态了

47:30.490 --> 47:31.490
拿到整个状态过后

47:31.490 --> 47:33.490
是不是可以从整个状态里边

47:33.490 --> 47:34.490
拿条件

47:34.490 --> 47:35.490
它把整个

47:35.490 --> 47:36.490
仓库的状态都传给你了

47:36.490 --> 47:37.490
对吧

47:37.490 --> 47:38.490
那么我们是不是可以

47:38.490 --> 47:39.490
拿条件了

47:39.490 --> 47:40.490
在这里边

47:40.490 --> 47:41.490
怎么拿条件

47:41.490 --> 47:42.490
条件是啥

47:42.490 --> 47:43.490
条件是啥

47:43.490 --> 47:44.490
我们这里

47:44.490 --> 47:45.490
condition

47:45.490 --> 47:46.490
条件是啥

47:46.490 --> 47:47.490
是不是get a status

47:47.490 --> 47:48.490
第二

47:48.490 --> 47:49.490
student

47:49.490 --> 47:50.490
第二

47:50.490 --> 47:51.490
一看这吧

47:51.490 --> 47:52.490
student

47:52.490 --> 47:53.490
然后get a condition

47:53.490 --> 47:54.490
是吧

47:54.490 --> 47:55.490
条件拿到了

47:55.490 --> 47:56.490
我们把条件输出

47:56.490 --> 47:57.490
你看一下

47:57.490 --> 47:59.990
你看一下

47:59.990 --> 48:00.990
是吧

48:00.990 --> 48:01.990
条件拿到了

48:01.990 --> 48:02.990
就当前的

48:02.990 --> 48:03.990
仓库里边的条件数据

48:03.990 --> 48:04.990
好

48:04.990 --> 48:05.990
条件数据拿到过后

48:05.990 --> 48:06.990
我们是不是可以

48:06.990 --> 48:07.990
根据条件去查询

48:07.990 --> 48:08.990
这些东西都很灵活的

48:08.990 --> 48:09.990
你不要去使经营贝

48:09.990 --> 48:10.990
都是很灵活的

48:11.990 --> 48:13.990
当然不是唯一的这种邪法

48:13.990 --> 48:14.990
好

48:14.990 --> 48:15.990
那么条件拿到了

48:15.990 --> 48:16.990
我们是不是可以

48:16.990 --> 48:17.990
调用search students

48:17.990 --> 48:18.990
对吧

48:18.990 --> 48:19.990
前期的一个API数据

48:19.990 --> 48:20.990
search students

48:20.990 --> 48:21.990
那么要传什么呢

48:21.990 --> 48:22.990
他让我传一个对象

48:22.990 --> 48:23.990
什么

48:23.990 --> 48:25.990
page limiter key search

48:25.990 --> 48:26.990
一个对象

48:26.990 --> 48:27.990
对吧

48:27.990 --> 48:28.990
那么他会给我返回

48:28.990 --> 48:29.990
学生数据

48:29.990 --> 48:30.990
好

48:30.990 --> 48:31.990
那么这个对象

48:31.990 --> 48:32.990
是不是我们就是这个条件对象

48:32.990 --> 48:33.990
对吧

48:33.990 --> 48:34.990
把条件传进去完事了

48:34.990 --> 48:35.990
用erwit来等待一下

48:35.990 --> 48:36.990
他会给我们一个返回结果

48:36.990 --> 48:37.990
risk

48:37.990 --> 48:38.990
输出

48:38.990 --> 48:39.990
输出risk

48:39.990 --> 48:40.990
输出过后

48:40.990 --> 48:41.990
你看一下

48:41.990 --> 48:42.990
目前都没有任何

48:42.990 --> 48:43.990
正常的x运行

48:43.990 --> 48:44.990
所以说loger

48:44.990 --> 48:45.990
他没有

48:45.990 --> 48:46.990
loger日字

48:46.990 --> 48:47.990
他没有得到记录

48:47.990 --> 48:48.990
因为目前我认为打印

48:48.990 --> 48:49.990
没有

48:49.990 --> 48:50.990
并没有dispatch

48:50.990 --> 48:51.990
没有分发

48:51.990 --> 48:52.990
正常的x

48:52.990 --> 48:53.990
那是你看一下

48:53.990 --> 48:54.990
怎么拿到一个靠者总数

48:54.990 --> 48:56.990
和什么data

48:56.990 --> 48:57.990
好

48:57.990 --> 48:58.990
那么现在我们拿到了

48:58.990 --> 48:59.990
总数和data

48:59.990 --> 49:00.990
那么我们是不是

49:00.990 --> 49:01.990
可以利用dispatch

49:01.990 --> 49:02.990
去触发

49:02.990 --> 49:03.990
对吧

49:03.990 --> 49:04.990
是可以触发了

49:04.990 --> 49:05.990
触发什么

49:05.990 --> 49:06.990
触发

49:06.990 --> 49:07.990
设置学生

49:07.990 --> 49:08.990
比方说

49:08.990 --> 49:09.990
一开始的时候

49:09.990 --> 49:10.990
一开始的时候就

49:10.990 --> 49:11.990
先

49:11.990 --> 49:12.990
比方说

49:12.990 --> 49:13.990
一开始的时候

49:13.990 --> 49:15.990
先触发一个dispatch

49:15.990 --> 49:16.990
set is loading

49:16.990 --> 49:17.990
把设为q

49:17.990 --> 49:18.990
对吧

49:18.990 --> 49:19.990
我们刚才写的个函数

49:19.990 --> 49:20.990
set is loading

49:20.990 --> 49:21.990
先把它设为

49:21.990 --> 49:22.990
正在夹载中

49:22.990 --> 49:24.990
然后拿到数据

49:24.990 --> 49:25.990
从呼吸拿到数据

49:25.990 --> 49:26.990
拿到数据过后

49:26.990 --> 49:27.990
是不是可以设置什么

49:27.990 --> 49:29.990
设置学生和学生总数了

49:29.990 --> 49:30.990
你要给我什么

49:30.990 --> 49:31.990
给我一个学生数组

49:31.990 --> 49:32.990
学生数组在什么

49:32.990 --> 49:33.990
在这

49:33.990 --> 49:34.990
data是

49:34.990 --> 49:35.990
好

49:35.990 --> 49:36.990
学生的总数

49:37.990 --> 49:38.990
在哪呢

49:38.990 --> 49:39.990
在这个返回结果里面的

49:39.990 --> 49:40.990
cont

49:40.990 --> 49:41.990
cont

49:41.990 --> 49:42.990
对吧

49:42.990 --> 49:43.990
好

49:43.990 --> 49:44.990
然后它产生一个

49:44.990 --> 49:45.990
x

49:45.990 --> 49:46.990
去触发这个x

49:46.990 --> 49:47.990
好

49:47.990 --> 49:48.990
触发这个x

49:48.990 --> 49:49.990
之后

49:49.990 --> 49:50.990
我们再触发一个

49:50.990 --> 49:51.990
set is loading

49:51.990 --> 49:52.990
对不对

49:52.990 --> 49:53.990
就写完了

49:53.990 --> 49:54.990
那么这个

49:54.990 --> 49:56.990
这个就是负重用的

49:56.990 --> 49:57.990
x

49:57.990 --> 49:58.990
创建函数就写完了

49:58.990 --> 49:59.990
反复了一个

49:59.990 --> 50:00.990
再有负重用的函数

50:00.990 --> 50:01.990
保存

50:01.990 --> 50:02.990
你看一下

50:02.990 --> 50:03.990
是不是就设置了3次

50:03.990 --> 50:04.990
首先set is loading

50:04.990 --> 50:05.990
把它设为什么

50:05.990 --> 50:07.990
把reouter

50:07.990 --> 50:08.990
设为了q

50:08.990 --> 50:09.990
对不对

50:09.990 --> 50:10.990
is loading

50:10.990 --> 50:11.990
设为了q

50:11.990 --> 50:12.990
然后再去设置

50:12.990 --> 50:13.990
set student

50:13.990 --> 50:14.990
and total

50:14.990 --> 50:15.990
把学生的数据加进去

50:15.990 --> 50:16.990
你看学生的数据

50:16.990 --> 50:17.990
是不是加进去了

50:17.990 --> 50:18.990
对吧

50:18.990 --> 50:19.990
学生数据加进去了

50:19.990 --> 50:20.990
偷偷

50:20.990 --> 50:21.990
也数据都加进去了

50:21.990 --> 50:22.990
加进去之后

50:22.990 --> 50:23.990
最后再设置这个学生的

50:23.990 --> 50:24.990
什么

50:24.990 --> 50:25.990
再设置学生的

50:25.990 --> 50:26.990
is loading

50:26.990 --> 50:27.990
把设为forced

50:27.990 --> 50:28.990
看到没

50:28.990 --> 50:29.990
那么数据管理

50:29.990 --> 50:30.990
这个学生对象的查询

50:30.990 --> 50:31.990
学生数据的查询

50:31.990 --> 50:33.990
数据管理这一块去做完了

50:33.990 --> 50:34.990
其实你会发现

50:34.990 --> 50:35.990
数据管理这一块做完了

50:35.990 --> 50:37.990
我们把这个东西放在

50:37.990 --> 50:38.990
你会发现

50:38.990 --> 50:39.990
后面做界面

50:39.990 --> 50:41.990
简直是太舒服了

50:41.990 --> 50:43.990
数据啥都给你提供好了

50:43.990 --> 50:45.190
怎么去改变数据出发

50:45.190 --> 50:45.990
一个性就完事了

50:45.990 --> 50:47.290
一个性也给你提供好了

50:47.290 --> 50:48.790
通过一个性创建还数据可以得拿到

50:48.790 --> 50:49.590
拿到一个性

50:49.590 --> 50:51.490
特别特别简单

50:51.490 --> 50:52.690
到时候写界面

50:52.690 --> 50:55.490
因为以后你数据出了问题

50:55.490 --> 50:56.690
找数据跟界面没关系

50:56.690 --> 50:58.490
你不要去找界面去找

50:58.490 --> 50:59.390
界面出了问题

50:59.390 --> 51:00.090
如果数据没问题

51:00.090 --> 51:00.690
界面出了问题

51:00.690 --> 51:02.390
在界面上去找原因

51:02.390 --> 51:04.490
这样子数据和界面就彻底分开了

51:04.490 --> 51:05.990
数据让率大个是来管理

51:05.990 --> 51:07.690
界面由X去管理

51:07.690 --> 51:08.090
对吧

51:08.090 --> 51:09.490
由X它更加轻松了

51:09.490 --> 51:10.490
更加纯粹了

51:11.490 --> 51:12.590
那么这个

51:12.590 --> 51:14.490
我希望通过这个例子

51:14.490 --> 51:15.690
给大家提供这么一种思路

51:15.690 --> 51:18.090
就是管理在率大个是里面去管理数据

51:18.090 --> 51:20.390
该怎么去写这个代

51:20.390 --> 51:21.090
但是每个公司

51:21.090 --> 51:22.690
你肯定以后有区别

51:22.690 --> 51:23.990
不一定是用那种方式

51:23.990 --> 51:24.690
包括我们以后

51:24.690 --> 51:26.790
还会学习更多的数据用处理方案

51:26.790 --> 51:28.390
可能会更改我们的结构

51:28.390 --> 51:30.690
但是这种感觉

51:30.690 --> 51:32.590
我希望大家有这么一种感觉

51:32.590 --> 51:34.090
就是那种数据分离

51:34.090 --> 51:34.990
功能分离

51:34.990 --> 51:36.090
每一块做每一块的事情

51:36.090 --> 51:36.690
那种感觉

51:36.690 --> 51:38.890
通过这种不断练习

51:38.890 --> 51:40.090
去加深这种感觉

51:41.690 --> 51:42.090
好

51:42.090 --> 51:42.690
那么这是学生

51:42.690 --> 51:45.090
那以后有老师说在这里建文念甲

51:45.090 --> 51:46.790
老师管理在这里建文念甲

51:46.790 --> 51:48.290
还有什么课程管理建文念甲

51:48.290 --> 51:49.890
这里建文念甲组合组合

51:49.890 --> 51:50.890
对吧

51:50.890 --> 51:51.690
最终的英代个社里面

51:51.690 --> 51:53.590
就导出仓库就完事了

51:53.590 --> 51:55.290
他这里只需要导出一个仓库

51:55.290 --> 51:55.990
你看数据管理

51:55.990 --> 51:57.990
是不是全部全部放这个文念甲里面

51:57.990 --> 51:58.690
对吧

51:58.690 --> 51:59.490
非常集中管理

51:59.490 --> 52:00.790
很舒服真的是

52:00.790 --> 52:01.890
超级舒服

52:01.890 --> 52:02.590
大家写一下

52:02.590 --> 52:03.290
一定要去写一下

52:03.290 --> 52:04.190
再说一次

52:04.190 --> 52:06.790
咱们这个学开发

52:06.790 --> 52:07.790
你光听是没用的

52:07.790 --> 52:08.890
一定要去念

52:08.890 --> 52:09.490
好吧

52:09.490 --> 52:10.290
这是这一块东西

