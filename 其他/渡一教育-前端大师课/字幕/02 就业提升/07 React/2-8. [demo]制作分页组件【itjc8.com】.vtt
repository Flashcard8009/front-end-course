WEBVTT

00:00.620 --> 00:04.980
这些课的例子呢 稍微的东西有点

00:05.480 --> 00:09.080
也不算复杂吧 就是要写的东西稍微有点多啊

00:09.580 --> 00:13.160
咱们这些课呢 要实现这么一个分业的组件

00:13.920 --> 00:18.280
就这里呢 你看我们点击过后呢 他要能够实现分业 看到没

00:19.040 --> 00:20.840
要能够实现这么一个分业的组件

00:21.100 --> 00:25.200
不仅如此呢 我们还要真实的能够完成分业

00:25.460 --> 00:28.020
就是最终呢 我们会调用这个接口

00:29.020 --> 00:30.060
调用这个接口

00:30.320 --> 00:33.900
然后呢 把这个学生数据拿到分业去拿到学生数据

00:34.160 --> 00:37.500
当我们真正的进行分业的时候呢 可以拿到具体的学生数据

00:38.520 --> 00:41.840
这个地方呢 我们一块呢 他是设计到数据

00:42.100 --> 00:43.380
就是拿到学生数据

00:43.640 --> 00:45.180
这一块 这一块功能

00:45.680 --> 00:48.500
还有一块功能呢 就是这个分业的业码这个插件

00:48.760 --> 00:50.300
就是相当于是个组件

00:50.800 --> 00:53.100
所以说这里呢 我们要一块一块来做

00:53.360 --> 00:56.180
因为我们用的是react嘛 对吧 跟你们用vue呢

00:56.380 --> 01:00.480
vue呢 思路是一样的 就尽量把它分小一点啊 分小一点

01:00.740 --> 01:02.020
把它做成一个一个的

01:02.280 --> 01:03.300
一个一个的组件

01:03.560 --> 01:04.320
比方说吧

01:04.580 --> 01:07.400
就这一块呢 我们不可以把它看成是一个组件

01:07.660 --> 01:09.180
这一块看成是一个组件

01:09.440 --> 01:11.500
然后这一块呢 也可以看成是一个组件

01:11.760 --> 01:12.760
当前业码嘛

01:13.020 --> 01:13.800
然后呢 是什么

01:14.060 --> 01:14.820
啊 总

01:15.080 --> 01:16.100
啊 总的业数

01:16.360 --> 01:17.380
啊 总的业数

01:18.140 --> 01:19.420
这些东西呢 我们都可以把

01:19.680 --> 01:21.480
甚至呢 我们可以把他看成一个组件也行

01:21.740 --> 01:22.500
啊 一个组件也行

01:22.760 --> 01:24.540
因为他们是一块的东西 那行吧

01:24.800 --> 01:26.080
就把他们看成一个组件嘛

01:26.640 --> 01:28.760
好吧 这些东西都可以灵活化分的啊

01:29.720 --> 01:31.760
好 接下来呢 我们来写这么一个东西啊

01:32.020 --> 01:33.260
不着急啊 慢慢写

01:33.320 --> 01:36.360
因为这一块东西呢 确实写的代码还是蛮多的

01:36.800 --> 01:39.320
好 右键呢 我们新建一个文件夹component

01:40.800 --> 01:43.280
然后这里边让我们写上一个组件

01:43.280 --> 01:44.720
组件的名字叫做pager

01:45.200 --> 01:45.960
点儿介绍

01:47.120 --> 01:48.920
好 然后呢 写上一个内组件啊

01:49.560 --> 01:53.360
由于前期呢 本来是应该尽量写函数组件的

01:53.600 --> 01:55.520
但是由于前期啊

01:55.820 --> 01:58.820
我们没有学习过那个hook

01:59.380 --> 02:00.700
hook我们后边才讲啊

02:01.180 --> 02:03.180
所以说我们目前呢 要实现

02:03.180 --> 02:05.660
因为它有状态嘛 它多多少少有些状态

02:05.940 --> 02:09.580
所以说呢 我们必须得使用这个组件

02:09.740 --> 02:12.940
必须得使用内组件 才能有自己的状态

02:13.060 --> 02:15.020
因为它的当前一码会变的 对吧

02:15.180 --> 02:16.220
当前一码会变化的

02:17.540 --> 02:19.820
好 然后呢 我们这一块

02:21.020 --> 02:22.020
pager这一块

02:22.140 --> 02:24.860
这个组件里边 我们首先思考一个问题

02:25.480 --> 02:27.640
它需要传递给我们哪些属性

02:29.000 --> 02:30.000
这是分业组件

02:30.800 --> 02:32.200
它的属性有哪些

02:32.840 --> 02:34.280
哪些需要告诉我们

02:34.280 --> 02:37.040
我们才能够进行把这个东西显示出来

02:37.920 --> 02:39.200
哪些需要告诉我们呢

02:39.560 --> 02:41.600
一个是一个个来啊 一个个来

02:41.600 --> 02:42.080
第一个

02:43.040 --> 02:44.080
corrent

02:44.560 --> 02:46.080
corrent 表示什么意思

02:46.400 --> 02:48.760
表示的是初始业码

02:49.400 --> 02:50.440
初始业码

02:52.160 --> 02:53.200
这个能理解什么意思吧

02:53.380 --> 02:55.340
就是一开始的时候 业码是多少

02:55.900 --> 02:56.820
初始业码

02:57.020 --> 02:58.060
这是第一个属性

02:58.340 --> 02:59.380
需要传递给我们

03:00.260 --> 03:01.780
好 第二个属性啊

03:02.100 --> 03:03.380
还需要告诉我们什么呢

03:03.540 --> 03:04.700
还要告诉我们

03:05.060 --> 03:07.220
有同学说 告诉我们总的业码

03:07.220 --> 03:08.940
总的业码呢 其实我们可以算

03:08.940 --> 03:09.900
我们可以算

03:10.060 --> 03:12.820
你只需要告诉我们总的数据量

03:12.820 --> 03:14.700
总的数据量就偷偷

03:15.460 --> 03:17.580
表示的是总数据量

03:18.020 --> 03:19.220
一共有多少数据

03:19.220 --> 03:21.100
比方说100个学生

03:21.520 --> 03:23.720
100条数据 1000个电影

03:23.720 --> 03:24.760
1000条数据

03:24.920 --> 03:26.400
把总的数据量告诉我

03:26.560 --> 03:28.000
这些都需要通过

03:28.440 --> 03:30.040
通过这个属性传过来

03:30.880 --> 03:31.840
好 第三个

03:32.080 --> 03:32.920
第三个

03:33.400 --> 03:34.200
还有什么呢

03:34.360 --> 03:36.200
还要告诉我就是

03:36.520 --> 03:38.600
每页的调数

03:38.680 --> 03:40.600
为什么要告诉我每页的调数呢

03:40.600 --> 03:42.160
把它叫做size

03:42.160 --> 03:42.760
size

03:42.960 --> 03:45.160
表示的是每页或者叫做limit

03:45.760 --> 03:46.440
limit

03:46.920 --> 03:48.440
叫做业容量

03:48.800 --> 03:49.920
业容量是什么意思

03:49.980 --> 03:51.340
表示每页

03:51.740 --> 03:53.580
每页显示的

03:54.100 --> 03:55.620
数据量

03:56.060 --> 03:57.380
一个是总的数据量

03:57.380 --> 03:58.860
一个是每页显示的数据量

03:58.860 --> 04:00.460
为什么要告诉我这个东西呢

04:00.460 --> 04:02.620
是因为我们知道了总数据量

04:02.620 --> 04:04.820
和每页显示的总数据量之后

04:04.820 --> 04:07.500
我们才能够算出总业数

04:07.580 --> 04:07.940
对吧

04:07.940 --> 04:09.780
我们才能够算出这个总业数

04:10.980 --> 04:11.980
好 再来

04:12.100 --> 04:13.740
还有什么东西要告诉我们呢

04:14.340 --> 04:15.500
除了这两个之外

04:15.500 --> 04:17.540
还有这个就是业码区域

04:17.540 --> 04:18.940
就是这个业码区域

04:19.120 --> 04:20.160
就是说这里呢

04:20.160 --> 04:21.920
你看我们显示的五个业码

04:21.920 --> 04:22.280
对吧

04:22.280 --> 04:23.280
五个数字

04:23.600 --> 04:24.400
五个业码

04:24.720 --> 04:26.560
那么这个五个业码呢

04:28.040 --> 04:29.440
有可能显示的是五个

04:29.440 --> 04:30.760
有可能显示的是十个

04:30.760 --> 04:32.920
到底显示多少个业码

04:33.520 --> 04:34.880
业码的数量

04:34.880 --> 04:36.760
就是数字业码的数量

04:37.360 --> 04:37.600
好

04:37.600 --> 04:38.280
那么这个东西呢

04:38.280 --> 04:40.400
就是给它叫做panel number

04:40.680 --> 04:41.680
panel number

04:41.680 --> 04:42.640
它表示的是

04:42.640 --> 04:44.360
数字业码

04:45.400 --> 04:48.280
最多显示多少个

04:48.500 --> 04:49.340
为什么要需要做

04:49.340 --> 04:51.060
最多显示多少个呢

04:51.260 --> 04:52.460
是因为有的时候比较少

04:52.460 --> 04:53.580
数据量不够

04:53.580 --> 04:54.740
一共就只有两业

04:54.740 --> 04:56.580
那你这里不可能显示五个业码

04:56.580 --> 04:57.300
对吧

04:57.300 --> 04:58.220
一共只有两业

04:58.220 --> 04:59.620
不可能显示五个业码

04:59.620 --> 05:01.700
所以说最多显示多少个

05:02.740 --> 05:02.940
好

05:02.940 --> 05:04.940
告诉我们这些东西之后呢

05:04.940 --> 05:06.660
我们才能够进行处理

05:07.140 --> 05:08.340
才能够进行处理

05:09.380 --> 05:09.580
好

05:09.580 --> 05:10.140
接下来

05:10.140 --> 05:12.060
我们再来思考另外一个问题

05:12.060 --> 05:13.660
他有没有自己的状态

05:15.660 --> 05:18.180
他有没有自己自我维护的状态

05:18.200 --> 05:19.000
有没有呢

05:19.840 --> 05:20.280
有

05:21.000 --> 05:21.440
什么呢

05:21.440 --> 05:22.720
就一个状态

05:22.720 --> 05:23.760
什么状态了

05:23.760 --> 05:25.840
就是corrent

05:26.640 --> 05:28.160
表示当前业码

05:28.880 --> 05:30.480
这两个东西有什么区别呢

05:30.480 --> 05:32.280
一个是告诉我最开始的

05:32.800 --> 05:34.640
初始业码是多少

05:34.640 --> 05:35.960
一个是告诉我

05:35.960 --> 05:37.840
当前的业码是多少

05:37.840 --> 05:39.600
当前的业码是多少

05:40.280 --> 05:41.280
所以说都得告诉我

05:41.280 --> 05:42.080
都得告诉我

05:42.720 --> 05:44.600
当然这里也可以拧合处理

05:44.600 --> 05:46.280
也可以说他没有状态

05:46.280 --> 05:47.800
没有状态的话

05:47.820 --> 05:49.940
那么全部是拧这个初始业码

05:49.940 --> 05:52.100
就是这个东西就叫做当前业码

05:52.660 --> 05:53.780
全部拧这个东西

05:53.780 --> 05:57.260
然后让那个副组建

05:57.260 --> 05:58.740
就使用这个组建的人

05:58.740 --> 06:00.340
通过改变这个属性

06:00.340 --> 06:02.100
改变这个属性来进行控制

06:02.100 --> 06:03.140
当然也可以

06:03.140 --> 06:03.940
也可以

06:04.420 --> 06:04.900
那行吧

06:04.900 --> 06:06.220
那我就不要状态了

06:06.220 --> 06:07.220
我就不要状态了

06:07.700 --> 06:08.620
那不要状态的话

06:08.620 --> 06:10.420
我就把它写成个寒树组建的了

06:10.940 --> 06:11.340
行吗

06:12.180 --> 06:14.700
我们这里已经好像有一段时间

06:14.700 --> 06:15.740
没有用过寒树组建了

06:16.660 --> 06:17.420
要不然这样子吧

06:17.440 --> 06:19.040
我就把它写成个寒树组建的了

06:19.800 --> 06:20.360
行不行

06:20.920 --> 06:21.800
好那行吧

06:21.800 --> 06:23.560
我就把它写成一个寒树组建

06:23.560 --> 06:24.120
来吧

06:25.400 --> 06:27.000
写成一个方形

06:27.800 --> 06:29.560
方形我们这里就不需要什么

06:29.560 --> 06:30.280
compro认识了

06:31.640 --> 06:32.160
pager

06:39.360 --> 06:40.360
我这里写错了吗

06:41.880 --> 06:42.560
完了

06:42.560 --> 06:44.200
我连寒树怎么写都忘了

06:44.200 --> 06:45.040
我的天呐

06:46.560 --> 06:47.440
方个形对了

06:48.120 --> 06:48.640
pager

06:50.040 --> 06:51.200
那哪里写错了

06:51.200 --> 06:52.240
没有写错吧

06:52.240 --> 06:53.560
我这里没加分号吗

06:54.200 --> 06:56.440
of the of the of the of the

06:56.840 --> 06:57.600
哦我说

06:58.000 --> 06:58.960
我的天呐

06:58.960 --> 07:00.240
我连寒树怎么写都忘了

07:01.600 --> 07:02.160
行吧

07:02.160 --> 07:04.160
那现在我们把它写成个寒树组建

07:04.160 --> 07:05.600
你要传一个props进来

07:06.040 --> 07:08.200
你要传一个这么这么个东西进来

07:08.800 --> 07:10.640
好传进来了之后了

07:10.640 --> 07:11.920
我来负责

07:12.400 --> 07:14.720
给你显示出一些东西

07:14.720 --> 07:17.640
就是我会根据这里要做的事情很简单

07:17.700 --> 07:19.700
我就是根据这里这些东西

07:19.700 --> 07:21.140
啊根据这些东西

07:21.580 --> 07:24.100
来显示出相应的界面

07:24.100 --> 07:25.140
你把这些数据告诉我

07:25.140 --> 07:26.260
我就能显示界面了

07:27.140 --> 07:28.580
那么怎么来显示界面呢

07:28.580 --> 07:29.580
我们一块一块看

07:30.420 --> 07:31.700
首先呢这里面呢

07:31.700 --> 07:34.660
有很多的这个东西叫A元素也好

07:34.660 --> 07:35.740
叫spa元素也好

07:35.740 --> 07:37.020
其实都无所谓的啊

07:37.020 --> 07:37.900
都无所谓的

07:38.380 --> 07:39.660
好那么比方说吧

07:39.660 --> 07:41.060
我们就用那个

07:41.740 --> 07:42.420
呃

07:43.220 --> 07:43.860
那个

07:44.420 --> 07:45.580
就是spa元素嘛啊

07:45.580 --> 07:46.300
spa元素

07:47.120 --> 07:47.840
好

07:47.840 --> 07:51.120
我们首先会会遇到第一个就是首页

07:51.120 --> 07:53.520
好首页是不是要显示一个spa元素

07:53.520 --> 07:54.520
对吧

07:54.520 --> 07:55.440
好我们这里呢

07:55.440 --> 07:56.720
返回啊直接返回

07:57.960 --> 08:01.800
返回我们的就是那个react元素

08:01.800 --> 08:03.360
啊他没有他没有容器啊

08:03.360 --> 08:05.040
没有容器我们就直接写一个这种东西

08:05.040 --> 08:06.440
容器让别人给我们提供

08:07.240 --> 08:09.960
好第一个呢是一个spa元素啊

08:09.960 --> 08:11.240
是一个spa元素

08:11.240 --> 08:12.040
这个spa元素呢

08:12.040 --> 08:13.840
我们给他一个内样式嘛

08:13.840 --> 08:16.620
内样式class name 呢叫做

08:16.900 --> 08:17.620
啊

08:18.180 --> 08:18.780
item

08:18.780 --> 08:19.740
然后呢first

08:20.060 --> 08:21.500
啊为什么要加个item呢

08:21.500 --> 08:22.660
这个加个item的原因呢

08:22.660 --> 08:24.900
是我们因为这里边有一些统一的样式

08:24.900 --> 08:26.340
你看首页上一页

08:26.340 --> 08:28.260
还有这些东西是不是有统一的样式

08:28.260 --> 08:28.580
对吧

08:28.580 --> 08:29.340
统一的样式

08:29.340 --> 08:29.980
ok啊

08:29.980 --> 08:31.620
我们把它加上这么一个

08:31.780 --> 08:32.820
呃 item

08:33.020 --> 08:35.180
呃其实它们的样式都是一样的啊

08:35.180 --> 08:35.980
样式都一样的

08:35.980 --> 08:38.020
所以说也不需要加上加上什么first

08:39.060 --> 08:40.860
好那么这里写上什么首页

08:41.260 --> 08:42.100
啊首页

08:42.800 --> 08:43.840
好一个一个来啊

08:43.840 --> 08:44.520
一个个来

08:45.080 --> 08:46.320
首先遇到了第一个问题啊

08:46.320 --> 08:48.240
我们一边写了一边测试啊

08:48.240 --> 08:49.360
一边写一边测试

08:49.360 --> 08:51.360
我们这里呢 import 导入进来

08:51.720 --> 08:52.680
不着急啊

08:52.680 --> 08:53.960
这一块写的代码呢

08:53.960 --> 08:56.240
还是稍微的有点多

08:56.880 --> 08:57.480
pager

08:58.520 --> 09:00.960
啊这里呢我们使用这个pager

09:04.260 --> 09:05.820
啊他这里边有些属性啊

09:05.820 --> 09:06.660
一个是current

09:07.140 --> 09:08.700
啊给他复制为一啊

09:08.700 --> 09:09.340
第一页啊

09:09.340 --> 09:10.780
默认回第三页嘛啊

09:10.780 --> 09:12.060
随便写一个

09:12.060 --> 09:13.580
然后偷偷数据量呢

09:13.600 --> 09:15.320
比方说给他一个100个数据

09:15.800 --> 09:16.880
好然后呢

09:16.880 --> 09:18.280
灵面程呢就是

09:18.280 --> 09:19.600
每页显示多少条呢

09:19.600 --> 09:21.760
比方说每页显示10条数据啊

09:21.760 --> 09:23.280
或者是9条数据嘛啊

09:23.280 --> 09:24.680
咱们写的特殊一点

09:24.680 --> 09:25.560
呃然后呢

09:25.560 --> 09:27.320
我们这里还有啥

09:27.320 --> 09:28.320
还有pager number

09:28.320 --> 09:29.160
panel number

09:29.160 --> 09:30.040
啊panel number

09:31.480 --> 09:32.480
啊panel number

09:32.480 --> 09:34.040
就是一验码的总数啊

09:34.040 --> 09:35.560
一验码的数量是多少

09:35.560 --> 09:36.280
一验码的数量呢

09:36.280 --> 09:37.080
我们认为是

09:38.920 --> 09:39.560
五个啊

09:40.440 --> 09:41.960
最多五个验码

09:41.960 --> 09:43.040
最多五个数字验码

09:43.100 --> 09:44.780
ok 我们一边写了一边看

09:45.740 --> 09:46.700
把运行出来啊

09:48.620 --> 09:50.060
一边写一边看

09:50.060 --> 09:50.540
现在呢

09:50.540 --> 09:51.500
我们pager里边呢

09:51.500 --> 09:52.900
只显示了一个实变

09:52.900 --> 09:53.260
对吧

09:53.260 --> 09:53.980
只显示了

09:53.980 --> 09:55.020
只显示了这么一个东西

09:56.900 --> 10:00.190
好看一下啊

10:00.190 --> 10:01.390
但是这个东西呢

10:01.390 --> 10:03.470
他有两种状态啊

10:03.470 --> 10:04.590
哪两种状态呢

10:04.590 --> 10:06.790
一种是不能点的状态啊

10:06.790 --> 10:08.270
不能点的状态

10:08.270 --> 10:08.790
一种呢

10:08.790 --> 10:10.510
是可以点的状态

10:10.510 --> 10:12.030
比方说这里就是可以点

10:12.030 --> 10:12.550
对吧

10:12.550 --> 10:13.950
一种是不能点的

10:13.970 --> 10:15.850
是不是央视有不一样的

10:15.850 --> 10:16.290
对不对

10:16.290 --> 10:16.890
央视呢

10:16.890 --> 10:18.090
他有区别

10:18.090 --> 10:18.290
好

10:18.290 --> 10:19.410
所以说我们这里呢

10:19.410 --> 10:20.570
首先先不管那么多

10:20.570 --> 10:22.570
先把央视给他设置出来

10:22.570 --> 10:23.290
这里的央视呢

10:23.290 --> 10:24.330
看上去不太对战

10:24.330 --> 10:26.810
所以说我们把央视给他设置出来啊

10:26.810 --> 10:27.090
这里呢

10:27.090 --> 10:29.090
我们专门写一个css

10:29.090 --> 10:31.290
pager.css

10:31.290 --> 10:33.290
这里面导入进来啊

10:33.290 --> 10:33.850
import

10:35.570 --> 10:37.610
pager.css

10:37.610 --> 10:39.050
先给这个东西设置央视啊

10:39.050 --> 10:39.570
item

10:39.570 --> 10:40.570
因为我们主键里边呢

10:40.570 --> 10:42.410
肯定要把这些央视的功能

10:42.410 --> 10:44.790
央视啊内容全部控制好啊

10:44.790 --> 10:46.710
就是display

10:46.710 --> 10:48.390
就给他设置一个英南布罗克得了

10:50.630 --> 10:51.230
然后呢

10:51.230 --> 10:51.950
加上一个边框

10:53.150 --> 10:54.230
看一下这边吧

10:54.230 --> 10:56.150
按照这边来做就得了

10:57.470 --> 10:59.270
加上一个panning

10:59.270 --> 11:00.510
加上了是panning

11:00.510 --> 11:02.150
我们这里写上一个啊

11:02.150 --> 11:03.710
这是我一个公开直播课的时候

11:03.710 --> 11:05.590
讲的要用原声介绍写的啊

11:05.590 --> 11:07.870
那么现在把它变成主键的形式

11:07.870 --> 11:08.910
好加上个panning

11:08.910 --> 11:09.390
然后呢

11:09.390 --> 11:11.030
有一个边框啊

11:11.030 --> 11:11.950
有个边框

11:12.010 --> 11:12.450
行吧

11:12.450 --> 11:13.130
把它复制过来了

11:13.130 --> 11:15.050
这些央视都不是重点啊

11:15.050 --> 11:15.690
边框

11:15.690 --> 11:16.050
border

11:17.970 --> 11:19.290
然后还有啥呢

11:19.290 --> 11:19.810
还有啥呢

11:22.250 --> 11:22.970
margin

11:22.970 --> 11:23.610
啊margin

11:23.610 --> 11:24.010
加上了

11:25.370 --> 11:25.770
margin

11:26.890 --> 11:27.450
两个像素

11:28.690 --> 11:28.930
好

11:28.930 --> 11:29.770
保存啊

11:29.770 --> 11:31.090
来看一下这边

11:31.090 --> 11:32.130
就加上这个东西了

11:32.130 --> 11:32.690
对吧

11:32.690 --> 11:34.010
还有一个文字颜色啊

11:34.010 --> 11:34.650
文字颜色

11:34.650 --> 11:35.930
因为我之前用的是Air元素

11:35.930 --> 11:37.730
他本身就是带了一个文字颜色

11:37.730 --> 11:37.930
好

11:37.930 --> 11:38.450
我们这里呢

11:38.450 --> 11:40.370
单独去设置一下文字颜色啊

11:40.370 --> 11:41.330
color

11:41.390 --> 11:42.190
color的话

11:42.190 --> 11:43.430
实色之为

11:44.430 --> 11:45.230
有的人说啊

11:45.230 --> 11:46.910
为什么这里不写Air元素呢

11:46.910 --> 11:47.910
是因为这样子啊

11:47.910 --> 11:48.590
Air元素的话

11:48.590 --> 11:50.030
他会报一个警告啊

11:50.030 --> 11:51.430
他说怎么他没有

11:51.430 --> 11:51.990
Air元素呢

11:51.990 --> 11:53.550
他应该他认为啊

11:53.550 --> 11:55.430
他认为es nint

11:55.430 --> 11:56.910
代码风格检查的时候呢

11:56.910 --> 11:57.870
他认为Air元素呢

11:57.870 --> 11:59.550
他必须要写个链接啊

11:59.550 --> 12:00.470
写个链接

12:00.470 --> 12:02.150
因为你没有链接的话

12:02.150 --> 12:03.270
你这个Air元

12:03.270 --> 12:04.910
因为我他认为啊

12:04.910 --> 12:07.470
说这个Air元素他表达的语意呢

12:07.470 --> 12:08.710
是一个超链接

12:08.710 --> 12:09.990
那如果你没有链接呢

12:10.010 --> 12:11.370
这个Air元素就没有意义

12:11.930 --> 12:12.290
啊

12:12.290 --> 12:15.330
那我们无非就是把它想用一个颜色

12:15.330 --> 12:15.610
对吧

12:15.610 --> 12:16.690
像设置一个颜色

12:16.690 --> 12:18.810
先想让鼠标变成一只小手

12:18.810 --> 12:19.650
他认为呢

12:19.650 --> 12:20.250
这些东西呢

12:20.250 --> 12:23.050
都可以通过css来操作

12:23.050 --> 12:24.770
根本就没有必要使用Air元素

12:24.770 --> 12:25.770
他的想法这么正确

12:26.490 --> 12:28.690
非常非常正确啊

12:28.690 --> 12:31.530
你如果不是一个超链接的一些Air元素干嘛了

12:31.530 --> 12:32.610
你是为了样式吗

12:32.610 --> 12:33.170
为了样式

12:33.170 --> 12:35.210
你不能为了样式去选择一个

12:35.210 --> 12:36.730
不应该选择的元素

12:36.730 --> 12:38.370
因为这一样式都可以控制的

12:38.430 --> 12:40.670
所以他的想法是非常非常正确的啊

12:40.670 --> 12:41.590
不应该写Air元素

12:44.980 --> 12:46.340
这里我们写失败

12:47.780 --> 12:47.980
好

12:47.980 --> 12:48.300
然后呢

12:48.300 --> 12:49.940
我们来设置一下他的颜色嘛

12:49.940 --> 12:50.620
颜色的话

12:50.620 --> 12:52.060
我们设置成为什么呢

12:52.060 --> 12:53.020
nice blue

12:53.020 --> 12:54.020
行不行啊

12:54.020 --> 12:54.420
保存

12:55.580 --> 12:56.780
看一下啊

12:56.780 --> 12:58.180
这个颜色也太浅了啊

12:58.180 --> 12:58.900
也太浅了

12:59.820 --> 13:04.660
稍微给他设置深一点吧

13:04.660 --> 13:05.820
那就这样子

13:05.820 --> 13:06.140
保存

13:07.820 --> 13:08.260
啊行吧

13:08.260 --> 13:08.900
就这样吧啊

13:08.900 --> 13:10.460
就这样啊

13:10.460 --> 13:10.900
然后呢

13:10.920 --> 13:12.960
写上这么一个数变样式啊

13:12.960 --> 13:14.680
数变样式变成一只小手

13:14.680 --> 13:15.560
cursor pointer

13:16.960 --> 13:17.120
好

13:17.120 --> 13:18.520
为了一会儿呢

13:18.520 --> 13:20.040
有可能会切换样式啊

13:20.040 --> 13:21.320
你不要刀手叶过后

13:21.320 --> 13:22.400
他变成这个样式了啊

13:22.400 --> 13:23.400
变成这个样式了

13:23.400 --> 13:24.880
他可能会切换样式

13:24.880 --> 13:25.040
好

13:25.040 --> 13:25.840
切换样式的话

13:25.840 --> 13:26.760
我们再加一个啊

13:26.760 --> 13:27.720
再加一个样式

13:27.720 --> 13:28.200
item呢

13:28.200 --> 13:31.480
如果他具有另外一个样式叫做disable的

13:31.480 --> 13:32.760
叫进用样式

13:32.760 --> 13:33.600
进用样式的话

13:33.600 --> 13:35.240
我们把color重新给他设置一下

13:35.240 --> 13:36.640
设成cc

13:36.640 --> 13:37.040
然后呢

13:37.040 --> 13:38.040
再把这个cursor呢

13:38.100 --> 13:41.770
设成not

13:41.770 --> 13:43.010
名字叫做not

13:43.010 --> 13:44.850
not not allowed

13:46.050 --> 13:47.450
没有智能提示啊

13:47.450 --> 13:48.570
好像是这个啊

13:48.570 --> 13:49.450
保存

13:49.450 --> 13:51.010
咱们来试一下吧

13:51.010 --> 13:53.170
class name disabled

13:53.170 --> 13:53.570
保存

13:58.290 --> 13:59.490
disable

13:59.490 --> 14:01.170
disabled

14:01.170 --> 14:02.530
保存啊

14:02.530 --> 14:03.490
没问题啊

14:03.490 --> 14:04.010
没问题

14:04.010 --> 14:05.130
做成这个样子

14:05.130 --> 14:05.250
好

14:05.250 --> 14:07.210
也就是说他可能会切换啊

14:07.210 --> 14:08.690
可能会切换这个样式

14:10.130 --> 14:10.290
好

14:10.290 --> 14:11.050
那么接下来呢

14:11.070 --> 14:13.110
我们首先搞定第一个问题

14:14.150 --> 14:16.830
什么情况下

14:16.830 --> 14:20.670
我们要给他加上这个disable的这个样式

14:20.670 --> 14:22.470
什么情况下要加呢

14:22.470 --> 14:23.630
什么情况

14:23.630 --> 14:26.070
是不是当前是第一页的情况

14:26.070 --> 14:28.070
当前如果是第一页的话

14:28.070 --> 14:30.390
那么是不是要加上这个disable的

14:30.390 --> 14:31.270
对不对

14:31.270 --> 14:31.470
好

14:31.470 --> 14:32.110
所以说呢

14:32.110 --> 14:33.110
这一块呢

14:33.110 --> 14:35.830
我们可以把它写成一个表达式啊

14:35.830 --> 14:36.750
介式表达式

14:36.750 --> 14:39.150
非常简单的一个介式表达式

14:39.150 --> 14:40.350
什么介式表达式呢

14:40.370 --> 14:41.070
就是说

14:42.570 --> 14:44.370
class name等于啥呢

14:44.370 --> 14:47.050
如果probs current

14:48.370 --> 14:50.170
等于1

14:50.170 --> 14:51.450
如果是第一页的话

14:51.450 --> 14:52.810
那么给他的样式

14:52.810 --> 14:53.930
给他的样式是什么

14:53.930 --> 14:56.050
item disabled

14:56.050 --> 14:57.610
disabled

14:57.610 --> 14:57.970
好

14:57.970 --> 14:59.730
否则的话

14:59.730 --> 15:00.730
给他的样式是什么

15:00.730 --> 15:02.450
给他的样式就是item

15:02.450 --> 15:03.050
就这么简单

15:04.450 --> 15:05.930
保存看一下

15:05.930 --> 15:06.690
一开始呢

15:06.690 --> 15:07.370
没问题对吧

15:07.370 --> 15:07.890
没问题

15:07.890 --> 15:09.970
是因为我们这里传记的是3

15:09.990 --> 15:11.350
那么这里传的这个1

15:11.350 --> 15:12.070
你看一下

15:12.070 --> 15:13.710
通过数据就能控制样式了

15:13.710 --> 15:14.310
看没

15:14.310 --> 15:15.430
因为我们这里呢

15:15.430 --> 15:18.830
就是根据数据来控制他的显示的

15:18.830 --> 15:20.030
没问题吧

15:20.030 --> 15:20.710
OK啊

15:20.710 --> 15:22.270
这是关于首页

15:22.270 --> 15:23.070
这是关于首页

15:25.310 --> 15:25.710
甚至呢

15:25.710 --> 15:28.470
你觉得如果这一块东西比较多的话

15:28.470 --> 15:30.230
你可以单独写个函数啊

15:30.230 --> 15:31.590
来产生一个首页

15:31.590 --> 15:32.630
也行

15:32.630 --> 15:33.950
也行

15:33.950 --> 15:34.390
总之呢

15:34.390 --> 15:35.310
我们把首页写好

15:36.430 --> 15:39.470
首页写完了过再写上一页

15:39.530 --> 15:41.450
我们先不着急写实现啊

15:41.450 --> 15:42.010
上一页

15:43.650 --> 15:45.770
上一页里边是不是也有那样式

15:45.770 --> 15:46.170
对吧

15:46.170 --> 15:47.490
那样式啊

15:47.490 --> 15:49.370
所以一样的对不对

15:49.370 --> 15:50.690
也是一样的啊

15:50.690 --> 15:52.410
这两个也是一样的

15:52.410 --> 15:53.970
所以说我们这里直接写就完事了

15:55.450 --> 15:55.690
好

15:55.690 --> 15:56.610
继续啊

15:56.610 --> 15:57.250
继续

15:57.250 --> 15:58.050
那么接下来呢

15:58.050 --> 15:59.170
是一页码区

15:59.170 --> 16:00.050
数字页码

16:01.290 --> 16:01.810
数字页码

16:01.810 --> 16:02.770
我们先放一边

16:02.770 --> 16:05.490
先把尾页和下页写了

16:05.490 --> 16:06.010
下一页

16:08.010 --> 16:08.610
下一

16:10.130 --> 16:11.450
下一页的话

16:11.450 --> 16:12.850
那么这个那样式呢

16:12.850 --> 16:13.650
是不是

16:13.650 --> 16:14.850
类似的对吧

16:14.850 --> 16:16.170
什么情况下

16:16.850 --> 16:18.650
它是禁用的样式

16:18.650 --> 16:19.090
想一想

16:20.530 --> 16:22.090
下一页的话

16:22.090 --> 16:24.250
什么情况下是禁用的样式

16:25.330 --> 16:26.290
什么情况呢

16:26.290 --> 16:28.130
是不是等于最后一页

16:28.130 --> 16:29.170
那么现在问题来了

16:29.170 --> 16:30.210
我怎么来知道

16:30.930 --> 16:33.530
怎么来知道是不是最后一页了

16:33.530 --> 16:34.290
怎么来知道了

16:35.250 --> 16:35.490
好

16:35.490 --> 16:36.810
我们这是不是要算

16:36.810 --> 16:37.290
对吧

16:37.310 --> 16:40.310
要算出总的页数

16:40.310 --> 16:42.150
要计算出总的页数

16:42.150 --> 16:42.910
我们这里呢

16:42.910 --> 16:44.750
完全可以单独写个函数

16:44.750 --> 16:47.190
来帮我们计算总页数

16:47.190 --> 16:48.030
get

16:48.030 --> 16:48.990
配几

16:48.990 --> 16:49.350
number

16:50.630 --> 16:51.470
你给我传

16:51.470 --> 16:53.790
还是把这个所有的属性都给我吧

16:53.790 --> 16:54.830
把所有的属性给我

16:54.830 --> 16:55.630
我来帮你来算

16:59.870 --> 17:01.070
计算

17:01.070 --> 17:02.550
总页数

17:02.550 --> 17:03.590
你把所有的属性给我

17:03.590 --> 17:04.470
我帮你来算

17:04.470 --> 17:05.510
当然有些多语

17:05.510 --> 17:06.390
我也不需要

17:06.390 --> 17:08.350
反正我需要的东西就那么几个

17:08.410 --> 17:09.770
怎么来计算总页数呢

17:09.770 --> 17:11.930
我们就可以通过总数据量

17:11.930 --> 17:13.090
比方说一千条数据

17:13.090 --> 17:14.130
每页一千是10条

17:14.130 --> 17:14.970
是不是100页

17:16.250 --> 17:17.770
总数据量去除以什么

17:17.770 --> 17:19.050
页数量

17:19.050 --> 17:19.290
好

17:19.290 --> 17:20.050
我们这里呢

17:20.050 --> 17:21.850
就是返回

17:21.850 --> 17:24.650
什么props里边的总数据量

17:24.650 --> 17:27.810
除以什么props里边的limit

17:27.810 --> 17:28.930
页数量

17:28.930 --> 17:30.050
是不是总页数

17:30.050 --> 17:32.810
当然这个除出来是不是就有可能是小数

17:32.810 --> 17:34.970
比方说3.5页

17:34.970 --> 17:36.450
3.5页实际上是几页

17:37.450 --> 17:40.350
3.5页是不是4页

17:40.350 --> 17:41.510
对不对

17:41.510 --> 17:42.830
是不是4页

17:42.830 --> 17:43.350
OK

17:43.350 --> 17:44.110
那么这里呢

17:44.110 --> 17:46.870
我们就可以使用mass seal

17:46.870 --> 17:48.470
使用这个天花版函数

17:48.470 --> 17:49.830
天花版函数

17:49.830 --> 17:50.590
有点low

17:50.590 --> 17:51.510
这样说话有点low

17:51.510 --> 17:53.990
应该说向上取整

17:53.990 --> 17:55.470
向上取整

17:55.470 --> 17:56.550
那么得到总页数

17:57.670 --> 17:59.070
我们先算出这么一个东西

18:00.510 --> 18:00.790
好

18:00.790 --> 18:01.390
然后呢

18:01.390 --> 18:03.030
我们这里是不是可以拿到

18:03.030 --> 18:04.230
拿到总页数了

18:04.230 --> 18:05.030
page number

18:05.030 --> 18:05.950
是不是可以拿到了

18:06.010 --> 18:06.410
对吧

18:06.410 --> 18:08.050
get什么page number

18:08.050 --> 18:09.650
props传进去

18:09.650 --> 18:10.450
拿到总页数

18:11.810 --> 18:12.010
好

18:12.010 --> 18:13.090
总页数拿到过后

18:13.090 --> 18:14.810
我们这里是不是可以比较了

18:14.810 --> 18:15.970
如果当前的页嘛

18:15.970 --> 18:17.050
就是等于总页数的

18:17.050 --> 18:17.890
就最后一页了

18:17.890 --> 18:18.370
对吧

18:18.370 --> 18:19.250
最后一页的话

18:19.250 --> 18:20.530
那是不是得进用

18:20.530 --> 18:21.570
对不对

18:21.570 --> 18:22.610
得进用吗

18:22.610 --> 18:23.770
没问题吧

18:23.770 --> 18:24.610
得进用

18:25.690 --> 18:25.930
好

18:25.930 --> 18:26.530
然后呢

18:26.530 --> 18:27.890
如果我们不是最后一页的话

18:27.890 --> 18:29.250
那就正常的

18:29.250 --> 18:29.410
好

18:29.410 --> 18:30.290
这是下一页

18:30.290 --> 18:31.410
那么我一页呢

18:31.410 --> 18:32.290
是不是一样的道理

18:33.690 --> 18:34.210
我一页

18:35.190 --> 18:36.190
一样的道理

18:36.190 --> 18:36.510
好

18:36.510 --> 18:37.270
那么这里呢

18:37.270 --> 18:38.350
如果等于最后一页呢

18:38.350 --> 18:39.270
它就是进用的

18:39.270 --> 18:40.430
否则是在这种情况

18:41.710 --> 18:42.390
没问题吧

18:43.550 --> 18:44.270
没问题吧

18:45.390 --> 18:45.790
好

18:45.790 --> 18:46.910
这是这一块

18:46.910 --> 18:47.710
这这一块

18:49.390 --> 18:49.630
好

18:49.630 --> 18:51.550
那么这两个写完了过后呢

18:51.550 --> 18:52.230
我们再来

18:52.230 --> 18:53.550
先不着急写数字页嘛

18:53.550 --> 18:54.790
我们再把这个东西写了

18:55.630 --> 18:56.990
再把这个东西写了

18:56.990 --> 18:57.710
就这一块

18:58.270 --> 18:59.150
这个东西写了

18:59.150 --> 18:59.990
因为数字页嘛

18:59.990 --> 19:01.150
它稍微比较麻烦一点

19:01.150 --> 19:02.870
我们后面最后台写数字页嘛

19:03.650 --> 19:04.850
把这个东西写了

19:04.850 --> 19:05.050
好

19:05.050 --> 19:05.690
这个东西呢

19:05.690 --> 19:06.970
其实就是一个当前页嘛

19:06.970 --> 19:07.690
一个总页嘛

19:07.690 --> 19:08.210
对吧

19:08.210 --> 19:08.890
一个当前页嘛

19:08.890 --> 19:09.690
一个总页嘛

19:09.690 --> 19:10.290
那么后边呢

19:10.290 --> 19:12.290
我们再加两个实验员数

19:12.290 --> 19:13.730
再加两个实验员数

19:13.730 --> 19:15.250
一个是当前页嘛

19:15.250 --> 19:16.690
当前页嘛显示啥

19:16.690 --> 19:17.530
是不是显示

19:17.530 --> 19:18.210
corrent

19:18.210 --> 19:18.890
probs

19:19.890 --> 19:20.530
corrent

19:20.530 --> 19:21.090
对吧

19:21.090 --> 19:23.050
当前页嘛显示这个

19:23.050 --> 19:24.170
然后一个写杠

19:24.170 --> 19:25.490
然后再写一个什么

19:25.490 --> 19:26.610
总页嘛

19:26.610 --> 19:27.490
总页嘛

19:27.490 --> 19:29.370
总页嘛是显示啥呢

19:29.370 --> 19:30.170
就是

19:30.170 --> 19:31.170
是不是刚才算出来的

19:31.190 --> 19:32.230
配纸囊帮

19:32.230 --> 19:32.790
是吧

19:33.790 --> 19:35.070
当前页嘛

19:35.070 --> 19:37.070
这是总页嘛

19:37.070 --> 19:37.830
当前页嘛

19:37.830 --> 19:38.910
总页嘛

19:38.910 --> 19:40.590
把显示出来就完事了

19:40.590 --> 19:41.310
保存

19:41.310 --> 19:42.430
你看一下

19:42.430 --> 19:44.990
目前呢是一共有12页

19:44.990 --> 19:47.310
当然我们可以写上一个

19:47.310 --> 19:50.590
给这个示范写上一个就是那样式嘛

19:52.270 --> 19:53.150
corrent

19:53.150 --> 19:53.990
corrent

19:55.550 --> 19:57.030
或者叫做

19:58.230 --> 19:59.870
就这个叫做corrent

19:59.870 --> 20:00.630
就叫做corrent

20:02.150 --> 20:03.870
对他写个corrent

20:03.870 --> 20:05.790
然后呢写个margin left

20:05.790 --> 20:06.550
margin left

20:06.550 --> 20:07.630
比方说10个项数

20:08.630 --> 20:08.910
保存

20:09.950 --> 20:10.990
就稍微设置一下

20:10.990 --> 20:12.590
你看当前一码一

20:12.590 --> 20:14.470
总页嘛呢是12页

20:14.470 --> 20:15.550
那是不是12页呢

20:15.550 --> 20:16.670
你算一下吧

20:16.670 --> 20:17.950
算一下

20:17.950 --> 20:19.270
我们每页钱是9条

20:19.270 --> 20:21.110
100一百条数据

20:21.110 --> 20:22.270
那相处呗

20:22.270 --> 20:23.990
100除以9

20:23.990 --> 20:25.830
那是不是11.11

20:25.830 --> 20:28.470
那都是是不是就按到12页来算

20:28.470 --> 20:30.030
对吧一共有12页

20:30.050 --> 20:31.570
还没是不是写出来了

20:31.570 --> 20:32.170
对吧

20:32.170 --> 20:34.610
那如果我们到当前一码写的是12呢

20:34.610 --> 20:35.610
保存

20:35.610 --> 20:37.130
你看一下是不是这个样子

20:37.130 --> 20:37.610
对吧

20:37.610 --> 20:40.690
我们给他不同的数据是不是就能拿到

20:40.690 --> 20:41.450
能拿到啥

20:41.450 --> 20:44.690
能拿到就是相应的

20:44.690 --> 20:46.330
相应的样式

20:46.330 --> 20:47.970
相应的结构就拿到了

20:49.010 --> 20:50.490
所以我们react做什么了

20:50.490 --> 20:54.050
就是根据数据来渲染不同的UI界面

20:55.850 --> 20:56.010
好

20:56.010 --> 20:59.400
接下来是问题来了

20:59.400 --> 21:00.560
什么问题呢

21:00.620 --> 21:02.340
就是说我这里呢

21:02.340 --> 21:04.660
是可以点击的

21:04.660 --> 21:06.700
我们是可以点击的

21:06.700 --> 21:08.180
比方说我们点了首页

21:09.260 --> 21:09.860
比方说

21:09.860 --> 21:11.060
咱们点了首页

21:11.060 --> 21:12.780
是不是要回到第一页

21:12.780 --> 21:13.540
对不对

21:13.540 --> 21:14.500
点了下一页

21:14.500 --> 21:16.460
是不是回到下一个页嘛

21:16.460 --> 21:16.980
对不对

21:16.980 --> 21:18.860
是可以点击的

21:18.860 --> 21:19.260
好

21:19.260 --> 21:20.980
那么这个点击过后

21:20.980 --> 21:21.580
比方说

21:21.580 --> 21:23.340
这个十八元数是不是可以点击

21:23.340 --> 21:23.540
好

21:23.540 --> 21:24.380
咱们来比方说

21:24.380 --> 21:25.340
给他写一个

21:25.340 --> 21:26.340
就给他写一个

21:26.340 --> 21:26.860
onclick

21:28.060 --> 21:28.580
点击

21:29.560 --> 21:31.600
当我们点击他的时候

21:31.600 --> 21:34.400
我们需要给他运行一个函数

21:34.400 --> 21:35.960
需要运行一个函数

21:35.960 --> 21:37.520
比方说这个函数的话

21:37.520 --> 21:40.080
我们就就专门来写个函数

21:40.080 --> 21:41.600
专门来写个函数

21:41.600 --> 21:42.720
to page

21:42.720 --> 21:43.600
to page

21:45.440 --> 21:47.160
需要运行这么一个函数

21:47.160 --> 21:48.880
需要运行这么一个函数

21:49.440 --> 21:50.520
那么这个to page

21:50.520 --> 21:52.240
运行这里的函数里边

21:52.240 --> 21:53.400
要写个page

21:53.400 --> 21:53.720
对吧

21:53.720 --> 21:55.000
你要挑转到哪一页

21:56.000 --> 21:58.920
挑转到

21:59.740 --> 22:01.860
指定的页码

22:01.860 --> 22:03.220
挑转到指定的页码

22:03.220 --> 22:05.900
或者说我们先暂时不写函数

22:05.900 --> 22:08.340
免得有一些同学绕了半天绕晕了

22:08.340 --> 22:09.140
我们就写到这

22:09.140 --> 22:10.980
就写到这

22:10.980 --> 22:13.780
当我们点击的时候干嘛呢

22:13.780 --> 22:15.820
点击的时候干嘛

22:15.820 --> 22:17.980
是不是我们要挑转到相应的页

22:17.980 --> 22:20.380
那是不是要改变这个current

22:20.380 --> 22:20.700
对吧

22:20.700 --> 22:22.660
目标是是不是要改变这个current

22:22.660 --> 22:24.740
但是由于我这里没有状态

22:24.740 --> 22:25.460
是个函数组件

22:25.460 --> 22:26.340
它没有状态

22:26.340 --> 22:28.140
它能不能直接改这个current

22:28.240 --> 22:29.560
能不能直接改

22:29.560 --> 22:30.680
不能

22:30.680 --> 22:32.360
它不能直接改

22:32.360 --> 22:33.080
那怎么办呢

22:34.320 --> 22:34.840
怎么办呢

22:36.400 --> 22:38.560
这个数据肯定要改

22:38.560 --> 22:39.400
肯定要改

22:39.400 --> 22:41.280
但是不是我有权限改

22:41.280 --> 22:43.240
我没有这个权限改

22:43.240 --> 22:44.680
谁又这个权限改了

22:44.680 --> 22:46.520
数据的提供者

22:46.520 --> 22:49.560
他才有这个权利改这个数据

22:49.560 --> 22:50.800
明白这个意思吧

22:50.800 --> 22:52.640
他才有这个权利改这个数据

22:52.640 --> 22:55.080
所以说我这里能做的事情是什么

22:55.100 --> 22:58.180
就是把事件给他扔出去

22:58.180 --> 22:59.700
让他来处理

22:59.700 --> 23:00.820
我只是告诉你

23:00.820 --> 23:02.820
我希望挑转到哪一页

23:02.820 --> 23:04.180
那么要不要跳转

23:04.180 --> 23:05.220
怎么来跳转

23:05.220 --> 23:06.380
改哪些数据

23:06.380 --> 23:09.700
完全由数据的提供者来做足

23:09.700 --> 23:11.780
我这里处理不了这个事件

23:11.780 --> 23:13.300
我只是告诉你

23:13.300 --> 23:14.620
我要我要进行跳转

23:15.540 --> 23:16.820
当然这里有没有一种可能

23:16.820 --> 23:17.860
他是不跳转的

23:17.860 --> 23:18.900
有可能

23:18.900 --> 23:19.940
怎么可能呢

23:19.940 --> 23:20.340
就是说

23:21.300 --> 23:23.900
点首页是不是跳转到第一页

23:23.900 --> 23:24.500
对吧

23:24.520 --> 23:26.120
首页是不跳转到第一页

23:26.120 --> 23:27.200
那如果

23:27.760 --> 23:29.760
如果就已经是

23:29.760 --> 23:31.440
就当前的页码

23:31.440 --> 23:33.280
跟我要挑转的页码

23:34.080 --> 23:34.960
是不是一样了

23:34.960 --> 23:36.600
如果这个是一样的情况下

23:36.600 --> 23:37.760
是不是不跳转了

23:37.760 --> 23:39.160
这个还跳转啥呢

23:39.160 --> 23:40.360
点击过还跳转啥呢

23:40.360 --> 23:42.200
就是我本来就是第一页了

23:42.200 --> 23:43.240
那还跳转干嘛呢

23:43.240 --> 23:44.360
就不要触发事件了

23:45.160 --> 23:46.480
否则的话

23:46.480 --> 23:48.000
我们才触发事件

23:48.000 --> 23:48.880
怎么触发

23:48.880 --> 23:50.480
是不是来自于probs里边

23:50.480 --> 23:52.800
也要给我传一个事件进来

23:52.800 --> 23:53.520
什么事件呢

23:53.580 --> 23:54.340
比方说

23:54.340 --> 23:55.300
要传一个事件

23:56.620 --> 23:58.620
叫做on配级

23:58.620 --> 23:59.580
前级

23:59.580 --> 24:01.380
我们给他自己取个名字

24:01.380 --> 24:03.860
当页码改变的事件

24:05.060 --> 24:06.540
我们触发这么一个事件

24:07.260 --> 24:08.980
判断一下on配级

24:08.980 --> 24:09.860
前级

24:09.860 --> 24:11.020
如果存在的话

24:11.020 --> 24:13.500
那么去调用这个on配级

24:13.500 --> 24:14.100
前级

24:14.100 --> 24:14.700
事件

24:14.700 --> 24:16.580
然后把新的页码告诉他

24:16.580 --> 24:17.860
我们不是要跳转到这吗

24:17.860 --> 24:18.300
对吧

24:18.300 --> 24:20.020
把新的页码告诉他就完事了

24:21.220 --> 24:22.380
你看这个是吧

24:22.680 --> 24:24.400
我们就用这种方式来进行处理

24:26.200 --> 24:26.760
能看到吗

24:26.760 --> 24:27.880
好好看一下

24:27.880 --> 24:31.000
就是说我这里是不能改变这个玩意儿的

24:31.000 --> 24:31.840
这玩意儿改变不了

24:31.840 --> 24:32.680
不是我的数据

24:32.680 --> 24:33.840
我没有权利改

24:33.840 --> 24:35.560
我只是给你触发事件

24:35.560 --> 24:37.440
谁有这个数据

24:37.440 --> 24:38.840
那么你自己去改

24:38.840 --> 24:40.560
当然你改不改是你的事情

24:40.560 --> 24:41.080
你不改的话

24:41.080 --> 24:42.680
我的界面就不会刷新

24:42.680 --> 24:43.520
你都改了过后

24:43.520 --> 24:44.720
我的界面就刷新了

24:44.720 --> 24:46.360
就重新渲染了

24:46.360 --> 24:48.320
所以我不能处理这个事情

24:48.320 --> 24:49.560
那么你可以想象得到

24:49.560 --> 24:50.960
这样一种处理方式

24:50.980 --> 24:52.500
是不是后面都可以会用到

24:52.500 --> 24:53.620
都会用到

24:53.620 --> 24:56.860
因此我们可以把这一块抽象为一个函数

24:56.860 --> 24:58.300
抽象为一个函数

24:58.300 --> 24:59.620
我们用的是函数组件

24:59.620 --> 25:01.460
上天和我们讲那个事件的时候

25:01.460 --> 25:03.580
都是用了内组件来做的事件

25:03.580 --> 25:04.100
对吧

25:04.100 --> 25:06.260
那么现在我们用函数组件来做一下

25:06.260 --> 25:07.180
是一样的道理

25:07.180 --> 25:08.460
但是大家下来过后

25:08.460 --> 25:10.540
可以尝试用内组件去完成一次

25:10.540 --> 25:12.540
用函数组件也去完成一次

25:12.540 --> 25:15.020
我在课堂上就不用讲那么多了

25:15.020 --> 25:16.780
讲中了大家也烦

25:16.780 --> 25:18.020
大家自己可以去尝试一下

25:18.020 --> 25:19.620
都是一样的道理

25:19.620 --> 25:20.780
一样的道理

25:20.800 --> 25:23.320
那么函数里面我们写一个函数给

25:23.320 --> 25:25.120
写个函数

25:25.120 --> 25:27.560
2佩级

25:27.560 --> 25:30.400
你给我传一个 target 目标业码

25:30.400 --> 25:31.880
再给我传一个属性

25:31.880 --> 25:33.520
因为属性里面要出发事件

25:33.520 --> 25:34.280
对不对

25:34.280 --> 25:35.840
所以说函数组件里面

25:35.840 --> 25:37.360
它要拆分的细一点

25:37.360 --> 25:38.520
内组件里面就不要了

25:38.520 --> 25:40.600
都可以通过 z 是来获取

25:40.600 --> 25:42.080
但是函数组件里面有一些

25:42.080 --> 25:43.280
它处于不同的函数

25:43.280 --> 25:45.640
所以说我们这里要拆分一下

25:45.640 --> 25:47.920
比方说我们这里给大家打算做是

25:47.920 --> 25:50.480
这是目标业码

25:50.500 --> 25:52.220
这是呢

25:52.220 --> 25:55.460
什么就是那个属性

25:55.460 --> 25:57.620
所有属性

25:57.620 --> 26:00.540
这里我们写上这个

26:00.540 --> 26:01.420
写上这个什么

26:01.420 --> 26:02.820
这个就是注释

26:02.820 --> 26:07.060
就是跳转到某一页

26:07.060 --> 26:09.140
跳转到某一页

26:09.140 --> 26:10.220
好 目标业码

26:10.220 --> 26:11.580
我们先判断一下

26:11.580 --> 26:14.020
如果 props 里面 current

26:14.020 --> 26:15.460
等于那目标业码

26:15.460 --> 26:16.740
它当前就是个业码了

26:16.740 --> 26:17.540
还跳转吗

26:17.540 --> 26:18.580
这不跳转了

26:18.580 --> 26:19.100
对吧

26:19.160 --> 26:20.360
不做任何事情

26:20.360 --> 26:22.760
跳转

26:22.760 --> 26:24.480
目标业码

26:24.480 --> 26:26.840
和当前业码相同

26:26.840 --> 26:27.840
这个时候还跳转啥

26:27.840 --> 26:29.560
就不跳转了

26:29.560 --> 26:31.240
好 否则的话才跳转

26:31.240 --> 26:32.240
怎么跳转呢

26:32.240 --> 26:33.400
我不能改动这个属性

26:33.400 --> 26:34.720
我只能去判断一下

26:34.720 --> 26:36.920
有没有配几千几这个事件

26:36.920 --> 26:38.560
如果有的话

26:38.560 --> 26:40.920
那就去调用这个事件

26:40.920 --> 26:41.760
如果没有的话

26:41.760 --> 26:42.640
那我就啥都不做了

26:42.640 --> 26:43.400
我能干嘛了

26:43.400 --> 26:45.160
你告诉我我能干嘛了

26:45.160 --> 26:47.400
我也很绝望了

26:47.400 --> 26:48.880
把这个 target 传进去

26:48.900 --> 26:50.100
你看事件里面可以传参的

26:50.100 --> 26:51.380
不就是个函数吗

26:51.380 --> 26:52.340
对不对

26:52.340 --> 26:53.500
函数里面当然可以传参

26:53.500 --> 26:54.500
我把参数传给你

26:54.500 --> 26:56.260
你爱用不用

26:56.260 --> 26:58.300
于是我这里

26:58.300 --> 27:00.260
由于是函数主线

27:00.260 --> 27:01.620
我这里不存在什么认识了

27:01.620 --> 27:03.020
跟认识就没有什么关系了

27:03.020 --> 27:04.940
全是通过参数来传递的

27:04.940 --> 27:07.340
那么就是 to 配几

27:07.340 --> 27:08.300
一对吧

27:08.300 --> 27:09.660
跳转到第一业

27:09.660 --> 27:13.100
然后把 props 传进去

27:13.100 --> 27:14.340
保存

27:14.340 --> 27:15.660
看一下吧

27:15.660 --> 27:16.460
那现在有反应吗

27:16.460 --> 27:17.860
点了过后

27:18.840 --> 27:19.720
没有反应

27:19.720 --> 27:20.600
当然有些同学说

27:20.600 --> 27:22.640
我现在手艺本来就不能点

27:22.640 --> 27:23.120
那看一下吧

27:23.120 --> 27:24.400
能点的情况下

27:24.400 --> 27:25.080
有反应吗

27:25.080 --> 27:26.040
是没反应

27:26.040 --> 27:26.840
为什么没反应

27:26.840 --> 27:28.720
因为他没有传递这个事件

27:28.720 --> 27:31.200
他没有处理这个问题

27:31.200 --> 27:33.560
那么我们这里再单独写个组件

27:33.560 --> 27:36.080
来处理一下这个问题

27:36.080 --> 27:37.600
比方说该取个名字

27:37.600 --> 27:38.400
Pager

27:38.400 --> 27:39.600
Container

27:39.600 --> 27:41.200
一个夜马的容器

27:41.200 --> 27:43.800
又再写个组件

27:43.800 --> 27:44.680
那么这个组件

27:44.680 --> 27:46.480
我们就需要

27:46.540 --> 27:47.500
这个这一块的话

27:47.500 --> 27:51.540
我们把它写成一个

27:51.540 --> 27:52.740
测试

27:52.740 --> 27:53.860
我们把它写成测试的

27:55.460 --> 27:58.460
Test

27:58.460 --> 28:00.460
把它写成一个测试

28:00.460 --> 28:00.900
测试的话

28:00.900 --> 28:02.620
因为它里边肯定有状态

28:02.620 --> 28:04.420
它自我维护一些状态

28:04.420 --> 28:06.180
所以说我们把它写成一个

28:06.180 --> 28:06.820
内组件

28:06.820 --> 28:07.900
因为是测试的

28:07.900 --> 28:09.220
夜马测试

28:09.220 --> 28:10.060
这个DIV

28:10.060 --> 28:12.020
我们给它一个

28:13.300 --> 28:14.460
也不给它样式的

28:14.460 --> 28:15.460
就直接来

28:15.460 --> 28:16.620
直接来

28:16.620 --> 28:17.980
然后这里导入

28:18.000 --> 28:19.160
Import

28:19.160 --> 28:20.240
就是Pager

28:22.240 --> 28:22.960
Pager

28:22.960 --> 28:24.520
导入这个组件

28:24.520 --> 28:26.440
这里边我们就Pager

28:26.440 --> 28:26.920
写进去

28:28.120 --> 28:29.800
这边哪些属性要传递呢

28:29.800 --> 28:31.800
就是我们的State里边的所有东西

28:31.800 --> 28:33.320
State里边

28:33.320 --> 28:34.480
就是我们的状态里边

28:34.480 --> 28:35.960
状态里边有哪些东西呢

28:35.960 --> 28:37.800
有当前夜马

28:37.800 --> 28:38.440
当前夜马

28:38.440 --> 28:41.120
比方说为第三夜

28:41.120 --> 28:42.520
然后偷偷种数据量

28:42.520 --> 28:43.800
比方说100

28:43.800 --> 28:44.560
Nemets

28:44.560 --> 28:45.520
每夜显示多少条呢

28:45.520 --> 28:46.680
10条

28:46.680 --> 28:47.960
每夜显示10条

28:48.020 --> 28:48.460
然后呢

28:48.460 --> 28:49.660
还有啥呢

28:49.660 --> 28:51.820
还有一个Panel Number

28:51.820 --> 28:52.260
Panel Number

28:52.260 --> 28:53.620
我们现在暂时还没用

28:53.620 --> 28:54.860
5个夜马

28:54.860 --> 28:55.820
最多5个夜马

28:55.820 --> 28:56.820
我们把这个State

28:58.260 --> 28:59.300
展开

28:59.300 --> 29:00.580
Zest

29:00.580 --> 29:02.580
作为属性感放进去

29:02.580 --> 29:04.420
然后再给它写个事件

29:04.420 --> 29:05.380
On

29:05.380 --> 29:06.060
什么

29:06.060 --> 29:06.740
配级

29:06.740 --> 29:08.340
签级

29:08.340 --> 29:08.940
on配级

29:08.940 --> 29:09.340
签级

29:09.340 --> 29:10.180
事件

29:10.180 --> 29:10.980
在这个事件里面

29:10.980 --> 29:12.220
我们进行处理

29:12.220 --> 29:13.780
在这里进行处理

29:13.780 --> 29:14.780
Handle

29:14.780 --> 29:15.420
配级

29:15.420 --> 29:19.100
签级

29:19.100 --> 29:19.420
注意啊

29:19.440 --> 29:20.640
这个Handle它有一个参数

29:20.640 --> 29:23.120
你可能会需要要这个参数

29:23.120 --> 29:23.880
当然你不需要的话

29:23.880 --> 29:25.120
你就不接受了

29:25.120 --> 29:26.760
因为它会给你传一个参数进来

29:26.760 --> 29:27.440
你看没

29:27.440 --> 29:28.840
因为这里你看

29:28.840 --> 29:29.840
我会把这个参数

29:29.840 --> 29:32.040
你要挑转的目标夜马传给你

29:32.040 --> 29:34.040
所以说这里我们可以获取

29:34.040 --> 29:34.840
New Page

29:34.840 --> 29:36.040
新的夜马

29:36.040 --> 29:37.160
我们来看一下吧

29:37.160 --> 29:40.450
输出新的夜马

29:40.450 --> 29:41.370
这里

29:41.370 --> 29:42.370
Zest

29:42.370 --> 29:43.010
这个

29:44.450 --> 29:45.170
好

29:45.170 --> 29:46.570
就写好了

29:46.570 --> 29:47.370
这个组件就写好了

29:47.370 --> 29:47.890
非常简单

29:47.890 --> 29:48.610
就是一个状态

29:48.610 --> 29:50.170
它可以自己控制自己的状态

29:50.190 --> 29:52.430
是我把我把数据传给它的

29:52.430 --> 29:53.830
它来控制在这个状态

29:53.830 --> 29:55.230
当你夜马改变的时候

29:55.230 --> 29:56.630
那么触发这个世界

29:56.630 --> 29:57.510
这个世界里边呢

29:57.510 --> 29:59.670
我来得到一个新的夜马

29:59.670 --> 30:01.790
我来做我自己的事情

30:01.790 --> 30:02.590
保存看一下啊

30:04.510 --> 30:05.790
那么现在能不能打开控制台

30:07.150 --> 30:08.630
点下一页

30:08.630 --> 30:09.950
下页还没做啊

30:09.950 --> 30:10.470
点首页

30:12.510 --> 30:13.030
没有反应

30:13.030 --> 30:13.990
哦这里还没用

30:13.990 --> 30:14.470
对吧

30:14.470 --> 30:15.510
还没用

30:15.510 --> 30:16.670
Pager

30:16.670 --> 30:19.460
Test

30:19.460 --> 30:20.660
这里还没用啊

30:20.720 --> 30:22.600
那就是Pager

30:23.320 --> 30:23.760
Test

30:24.880 --> 30:25.040
好

30:25.040 --> 30:26.200
保存啊

30:26.200 --> 30:27.280
看一下啊

30:27.280 --> 30:27.920
点首页

30:29.680 --> 30:30.040
刷新

30:31.200 --> 30:31.400
哎

30:31.400 --> 30:33.720
他一开始就输出了一啊

30:33.720 --> 30:35.240
一开始就输出了一

30:35.240 --> 30:36.120
我啥都没点啊

30:37.400 --> 30:38.760
这个E哪来的

30:38.760 --> 30:39.720
我看一下啊

30:39.720 --> 30:40.480
这个E哪来的

30:41.560 --> 30:42.720
我把这句话说实了

30:42.720 --> 30:46.880
是这句话输出了吗

30:46.880 --> 30:47.280
哎

30:47.280 --> 30:48.960
他为什么一开始又输出E呢

30:50.760 --> 30:51.880
我看一下啊

30:51.900 --> 30:53.940
他为什么一开始又调用了这个事件

30:55.780 --> 30:56.140
啊

30:56.140 --> 30:56.620
我明白了

30:56.620 --> 30:57.020
明白了

30:57.020 --> 30:57.740
明白了

30:57.740 --> 30:58.900
我这里写的有问题啊

31:00.140 --> 31:00.620
啊

31:00.620 --> 31:02.340
我这里写的有问题

31:02.340 --> 31:03.860
在这里面啊

31:03.860 --> 31:05.020
这里写的有问题

31:05.020 --> 31:06.660
我这里不能调用函数啊

31:06.660 --> 31:08.980
我是要给他传一个函数进去

31:08.980 --> 31:10.540
我不能调用函数啊

31:10.540 --> 31:12.220
我千万不要去调用函数

31:12.220 --> 31:13.900
因为调用函数他得到的是什么

31:13.900 --> 31:16.180
得到的是函数的反回结果

31:16.180 --> 31:17.380
把函数的反回结果

31:17.380 --> 31:18.220
他反回的是啥

31:18.220 --> 31:20.060
反回的是undefend

31:20.080 --> 31:22.120
把undefend的传个onclick

31:22.120 --> 31:23.360
肯定是不行的啊

31:23.360 --> 31:24.360
肯定是不行的

31:24.360 --> 31:25.880
我们得什么

31:25.880 --> 31:26.360
得那个

31:27.560 --> 31:29.680
把函数传给他啊

31:29.680 --> 31:31.360
把一个函数传给他

31:31.360 --> 31:32.400
是这么回事啊

31:32.400 --> 31:34.840
咱们得把函数传给他

31:34.840 --> 31:35.680
那么这里呢

31:35.680 --> 31:37.840
我们怎么来处理这个问题呢

31:37.840 --> 31:39.680
我们这里可以这样处理吧

31:39.680 --> 31:41.040
这里是一个箭头函数

31:41.040 --> 31:41.600
箭头函数

31:44.040 --> 31:46.440
就是我总归了得用一个函数给他

31:46.440 --> 31:47.560
给他一个函数

31:47.560 --> 31:49.800
这个函数里面我们调用2配级

31:49.820 --> 31:51.300
调用2配级

31:51.300 --> 31:52.380
用这种写法

31:52.380 --> 31:53.900
用这种写法

31:53.900 --> 31:54.820
没问题吧

31:54.820 --> 31:56.660
用这种写法

31:56.660 --> 31:57.580
保存啊

31:57.580 --> 31:58.780
我们得给他一个函数嘛

31:58.780 --> 31:59.420
对不对

31:59.420 --> 32:00.980
给他一个函数

32:00.980 --> 32:01.780
好

32:01.780 --> 32:02.460
保存啊

32:02.460 --> 32:03.500
那现在我们点首页

32:03.500 --> 32:04.700
你看是不是1

32:04.700 --> 32:05.620
对吧

32:05.620 --> 32:06.740
上页这些还没做啊

32:06.740 --> 32:07.740
还没有做

32:07.740 --> 32:09.300
那么首页这里是不是实现了

32:09.300 --> 32:09.420
好

32:09.420 --> 32:11.300
那么这边要做的事情是不是很简单

32:11.300 --> 32:12.700
你给我给了我一个新的页嘛

32:12.700 --> 32:13.700
我干嘛呢

32:13.700 --> 32:14.300
我这里呢

32:14.300 --> 32:15.860
也没有什么其他事情可以做

32:15.860 --> 32:17.380
当然有没有可能做其他事情

32:17.380 --> 32:18.100
当然有可能

32:18.100 --> 32:19.380
比方这里还有数据

32:19.400 --> 32:20.640
我们还去获取数据

32:20.640 --> 32:21.240
对吧

32:21.240 --> 32:21.880
那么这里呢

32:21.880 --> 32:23.480
我们没有其他事情可以做

32:23.480 --> 32:25.880
所以说直接来set state

32:25.880 --> 32:26.800
把什么改变

32:26.800 --> 32:28.280
把current改变

32:28.280 --> 32:29.040
改变成什么呢

32:29.040 --> 32:30.680
改变成丢配级

32:30.680 --> 32:31.280
啊

32:31.280 --> 32:32.640
你不是有个新的页吗

32:32.640 --> 32:34.680
我把这个新的页嘛给了个current复制

32:35.920 --> 32:36.040
好

32:36.040 --> 32:37.120
这样子一来你看

32:37.120 --> 32:38.720
由于我调用了set state

32:39.800 --> 32:42.280
那么导致了他重新重新渲染

32:42.280 --> 32:43.080
他一重新渲染

32:43.080 --> 32:44.680
是不是他要重新渲染

32:44.680 --> 32:45.680
对吧

32:45.680 --> 32:46.960
因为他的状态变了嘛

32:46.960 --> 32:48.360
状态变了给他复制的属性

32:48.420 --> 32:49.620
是不是也跟着变了

32:49.620 --> 32:50.540
而属性也跟着变

32:50.540 --> 32:52.340
他是不是在界面也跟着变了

32:52.340 --> 32:52.540
对吧

32:52.540 --> 32:54.140
这是一个连锁反应

32:54.140 --> 32:55.140
还没

32:55.140 --> 32:55.940
好点首页

32:55.940 --> 32:57.180
你看变成这个样子了

32:58.340 --> 32:59.660
好的同样的道理啊

32:59.660 --> 33:01.500
上一页是不是一样的道理

33:01.500 --> 33:02.980
咱们复制一下啊

33:02.980 --> 33:04.260
上一页

33:04.260 --> 33:06.460
那么上一页调转到哪呢

33:06.460 --> 33:07.140
调转到哪

33:08.380 --> 33:09.380
调转到哪呢

33:09.380 --> 33:10.260
好我们这里呢

33:10.260 --> 33:12.420
上一页调短的就是调转到

33:12.420 --> 33:15.020
就是当前页嘛

33:15.020 --> 33:16.580
current减1

33:16.580 --> 33:16.980
对不对

33:16.980 --> 33:18.100
调转到这

33:18.100 --> 33:20.000
但是呢你要做最好做一下判断啊

33:20.000 --> 33:21.080
最好做一下判断

33:21.080 --> 33:22.240
因为上一页这一块呢

33:22.240 --> 33:24.240
他有可能会超出边界啊

33:24.240 --> 33:25.840
有可能会超出边界

33:25.840 --> 33:26.960
那么如果了

33:26.960 --> 33:28.240
做三目用上符嘛

33:28.240 --> 33:29.120
如果这个东西呢

33:29.120 --> 33:30.800
小鱼的1

33:30.800 --> 33:32.480
那么就是取1

33:32.480 --> 33:34.240
就调转到第一页

33:34.240 --> 33:35.280
否则的话

33:36.880 --> 33:37.800
调转到这个减1

33:38.960 --> 33:39.880
用个三目用上符嘛

33:39.880 --> 33:40.520
给表拿4

33:40.520 --> 33:41.640
把这个表拿4

33:41.640 --> 33:43.400
算出来的值传进去

33:43.400 --> 33:44.800
没问题吧

33:44.800 --> 33:47.240
如果上一页本来是要减1的对吧

33:47.260 --> 33:48.100
减1过后呢

33:48.100 --> 33:49.500
如果发现小鱼的1

33:49.500 --> 33:51.420
他就跑到你地理页去了

33:51.420 --> 33:52.460
地负一页去了

33:52.460 --> 33:53.060
那肯定不行

33:53.060 --> 33:55.100
那最多就第一页

33:55.100 --> 33:55.260
好

33:55.260 --> 33:56.060
然后呢

33:56.060 --> 33:57.460
这里呢

33:57.460 --> 33:58.980
如果正常的情况下

33:58.980 --> 34:01.020
就是大于等于1的话

34:01.020 --> 34:02.620
那么就是current减1

34:04.180 --> 34:04.500
好

34:04.500 --> 34:06.300
这里我们看一下上一页啊

34:06.300 --> 34:07.020
上一页

34:07.020 --> 34:07.640
第二页

34:07.640 --> 34:08.460
第一页

34:08.460 --> 34:09.580
再点就没用了

34:09.580 --> 34:11.100
看呗

34:11.100 --> 34:11.300
好

34:11.300 --> 34:12.180
这是上一页

34:12.180 --> 34:13.940
那么下一页这些是不是一样的道理

34:13.940 --> 34:14.380
对吧

34:14.380 --> 34:16.340
下一页一样的道理

34:16.340 --> 34:16.540
好

34:16.540 --> 34:17.760
下一页的判断啥呢

34:17.760 --> 34:21.280
判断的是current加1

34:21.280 --> 34:23.480
是不是大于了什么

34:23.480 --> 34:24.960
大于的page number

34:24.960 --> 34:26.360
大于的总页码

34:26.360 --> 34:29.040
如果大于了总页码的话

34:29.040 --> 34:30.200
就取总页码

34:30.200 --> 34:30.960
否则的话

34:30.960 --> 34:32.640
就是current加1

34:32.640 --> 34:33.440
对吧

34:33.440 --> 34:35.280
其他也没啥了

34:35.280 --> 34:37.480
这是下一页的代码

34:37.480 --> 34:38.040
保存

34:38.040 --> 34:38.720
下一页你看

34:40.600 --> 34:41.480
是不是变了

34:41.480 --> 34:42.880
对吧

34:42.880 --> 34:43.040
好

34:43.040 --> 34:44.080
伪业

34:44.080 --> 34:45.160
伪业就很简单了

34:46.600 --> 34:48.120
复制一下啊

34:48.120 --> 34:48.880
伪业的话

34:48.880 --> 34:50.440
就是挑转到最终的页码

34:52.200 --> 34:55.320
就挑转到这

34:55.320 --> 34:57.480
挑转到最后一页

34:57.480 --> 34:58.880
保存

34:58.880 --> 34:59.680
点伪业

34:59.680 --> 35:00.800
你看什么挑转到最后一页

35:02.000 --> 35:03.040
对吧

35:03.040 --> 35:03.280
好

35:03.280 --> 35:04.520
那么这一块是不是做完了

35:04.520 --> 35:04.760
对吧

35:04.760 --> 35:06.200
就做完了

35:06.200 --> 35:08.080
那么剩下的事情就是

35:08.080 --> 35:09.440
剩下的事情就是谁

35:09.440 --> 35:11.920
就是中间的数字页码部分了

35:11.920 --> 35:13.400
就中间的数字页码部分了

35:14.920 --> 35:16.160
好

35:16.160 --> 35:17.720
中间的数字页码

35:17.740 --> 35:19.620
这一块怎么来做了

35:19.620 --> 35:21.220
怎么来做了

35:21.220 --> 35:22.820
中间的数字页码

35:22.820 --> 35:23.980
你要去算

35:23.980 --> 35:24.780
算啥

35:24.780 --> 35:25.460
你看一下

35:25.460 --> 35:26.420
比方说这种情况

35:27.780 --> 35:29.580
中间的数字页码

35:29.580 --> 35:32.700
它来自于最小的页码

35:32.700 --> 35:33.380
循环

35:33.380 --> 35:35.980
比方说我能够把这个3算出来

35:35.980 --> 35:38.140
我就能把这个7算出来

35:38.140 --> 35:38.780
因为为什么

35:38.780 --> 35:39.980
一共有5个数字

35:39.980 --> 35:40.820
对吧

35:40.820 --> 35:41.860
一共有5个数字

35:41.860 --> 35:43.020
所以说我能把3算出来

35:43.020 --> 35:44.980
我就能把这个7算出来

35:44.980 --> 35:46.620
算出来之后了

35:46.640 --> 35:48.320
那么是不是写个循环

35:48.320 --> 35:49.840
从3循环到7

35:49.840 --> 35:52.640
每循环一次给它一个什么

35:52.640 --> 35:53.720
给它一个就是

35:55.440 --> 35:57.160
创建一个reaction元素

35:57.160 --> 35:58.600
加进去就完事了

35:58.600 --> 35:59.480
对不对

35:59.480 --> 36:01.080
所以关键点在什么了

36:01.080 --> 36:03.640
关键点我要算出这个最小的页码

36:04.680 --> 36:06.320
就这个页码3

36:06.320 --> 36:07.040
那么意思吧

36:08.080 --> 36:09.440
那只要把它算出来了

36:09.440 --> 36:10.640
一共有5个

36:10.640 --> 36:12.400
就3加5-1

36:12.400 --> 36:13.920
包含3自身就多了一个

36:13.920 --> 36:15.560
3加5-1

36:15.620 --> 36:17.380
那么就是把最大的页码算出来了

36:17.380 --> 36:18.500
那么一个循环就完事了

36:19.540 --> 36:21.300
关键点在于算它

36:21.300 --> 36:22.100
为什么是3

36:22.100 --> 36:23.060
凭什么是3

36:23.060 --> 36:24.300
你看这又是4

36:24.300 --> 36:26.540
是不是根据当前页码来的

36:26.540 --> 36:29.180
当前页码是不是减去什么

36:29.180 --> 36:32.300
减去总的数字的一半

36:32.300 --> 36:33.420
总共有5个数字

36:33.420 --> 36:34.180
一半除以2

36:34.180 --> 36:34.860
就是2.5

36:34.860 --> 36:36.060
2.5向下取怎么

36:36.060 --> 36:37.020
就是减2

36:37.020 --> 36:37.460
对吧

36:37.460 --> 36:38.700
就是6-2

36:38.700 --> 36:39.060
看没有

36:39.060 --> 36:39.940
是不是个逻辑

36:39.940 --> 36:40.340
对吧

36:40.340 --> 36:41.580
8是不是8-2

36:41.580 --> 36:42.260
等于6

36:42.260 --> 36:43.340
10是不是10-2

36:43.340 --> 36:43.980
等于8

36:43.980 --> 36:44.380
对吧

36:44.440 --> 36:47.320
除以整个页码数量的一半

36:48.520 --> 36:48.680
好

36:48.680 --> 36:49.200
所以说

36:49.200 --> 36:51.080
我们这里专门来写个函数

36:51.080 --> 36:52.920
来算这个数字

36:52.920 --> 36:53.720
最小数字

36:55.280 --> 36:56.680
方形

36:56.680 --> 36:57.880
catch min

36:57.880 --> 36:59.080
number

36:59.080 --> 37:01.680
算出计算

37:03.040 --> 37:05.280
计算最小数字

37:05.280 --> 37:06.600
那么这里需要什么参数呢

37:06.600 --> 37:08.760
你干脆把所有的属性给我吧

37:08.760 --> 37:09.760
所有的属性给我

37:09.760 --> 37:10.920
然后再给我一个什么呢

37:10.920 --> 37:11.960
总页数

37:11.960 --> 37:12.680
配级number

37:12.680 --> 37:13.240
总页数

37:14.520 --> 37:14.880
好

37:14.880 --> 37:16.240
最小数字怎么算呢

37:16.240 --> 37:17.120
最小数字咋算

37:17.120 --> 37:18.680
咋算

37:18.680 --> 37:20.560
其实我这里都还不需要总页数了

37:20.560 --> 37:22.120
都不需要总页数

37:22.120 --> 37:23.400
最小数字怎么算呢

37:23.400 --> 37:24.640
最小数字就是

37:24.640 --> 37:27.720
当前的yuma current

37:27.720 --> 37:29.800
减去什么

37:29.800 --> 37:31.880
减去一共有几个数字

37:31.880 --> 37:33.720
最多有几个数字

37:33.720 --> 37:34.560
最多有5个

37:34.560 --> 37:35.480
那就除以2

37:35.480 --> 37:35.920
对吧

37:35.920 --> 37:39.080
减去panel number

37:39.080 --> 37:40.480
除以2

37:40.480 --> 37:41.920
减去这个除以2

37:41.920 --> 37:42.800
那么这个东西

37:42.800 --> 37:43.480
减出来过后

37:43.540 --> 37:44.660
它是个小数

37:44.660 --> 37:45.340
它是个小数

37:45.340 --> 37:47.980
所以说这一块要向下取证

37:47.980 --> 37:50.580
mass flow

37:50.580 --> 37:53.640
向下取证

37:53.640 --> 37:53.800
好

37:53.800 --> 37:54.520
这样子你减出来

37:54.520 --> 37:55.720
是不是最小yuma

37:55.720 --> 37:58.480
对吧

37:58.480 --> 37:59.520
最小yuma

37:59.520 --> 37:59.800
好的

37:59.800 --> 38:00.840
最小yuma算出来过后

38:00.840 --> 38:02.120
有一种可能就是

38:02.120 --> 38:03.960
它可能小于0

38:03.960 --> 38:05.560
比方说

38:05.560 --> 38:06.320
你看一下

38:06.320 --> 38:08.760
目前是第三页

38:08.760 --> 38:09.920
第三页倒是没问题

38:09.920 --> 38:10.840
比方说第一页

38:10.840 --> 38:11.960
第一页减去2

38:11.960 --> 38:13.400
是不是等于负一了

38:13.400 --> 38:13.880
对不对

38:13.880 --> 38:14.880
小于了1

38:14.880 --> 38:16.600
它就可能会小于1

38:16.620 --> 38:17.820
那么如判断一下

38:17.820 --> 38:19.540
如果命小于1的话

38:19.540 --> 38:20.140
怎么办

38:20.140 --> 38:21.620
就把命负之为1

38:21.620 --> 38:23.140
它最小只能是1

38:23.140 --> 38:23.980
反回最小yuma

38:25.380 --> 38:25.940
没问题吧

38:25.940 --> 38:27.180
计算最小数字

38:28.620 --> 38:28.820
好

38:28.820 --> 38:29.460
然后这里

38:29.460 --> 38:30.740
我们就可以拿到最小数字

38:30.740 --> 38:33.700
min get min number

38:33.700 --> 38:34.580
pros 传进去

38:36.100 --> 38:37.180
最小数字

38:38.380 --> 38:40.020
那么有了最小数字过后

38:40.020 --> 38:43.460
我们就可以非常轻松的来算出最大数字

38:43.460 --> 38:44.660
再写个函数

38:44.660 --> 38:45.700
方形

38:45.700 --> 38:46.580
get

38:46.640 --> 38:47.920
max number

38:47.920 --> 38:49.480
你给我最小数字

38:49.480 --> 38:50.640
再给我总页数

38:51.680 --> 38:52.960
我来计算最大数字

38:54.480 --> 38:56.040
计算最大数字

38:57.040 --> 38:58.400
最大数字怎么算

38:58.400 --> 39:00.480
是不是最小数字

39:00.480 --> 39:02.800
加上什么

39:02.800 --> 39:04.400
还有一个panel number

39:04.400 --> 39:06.000
那么pros也给我吧

39:06.000 --> 39:07.000
把这些东西都给我

39:07.000 --> 39:08.320
我来帮你算吧

39:08.320 --> 39:10.680
pros里边的panel number

39:10.680 --> 39:11.880
减1对吧

39:11.880 --> 39:12.840
为什么要减1

39:12.840 --> 39:14.480
因为它最小数字占一个

39:14.480 --> 39:15.600
它一共有这么多yuma

39:15.600 --> 39:18.380
比方说一共有5个yuma

39:18.380 --> 39:20.580
那么最小数字出来了

39:20.580 --> 39:21.900
那如果你直接加5的话

39:21.900 --> 39:22.780
是不是变成6了

39:22.780 --> 39:25.100
因为你没有考虑到它自身还要占一位

39:25.100 --> 39:27.700
所以说还要减去它自身的1

39:27.700 --> 39:29.300
最大yuma就算出来了

39:29.300 --> 39:31.260
那么但是有一种可能就是最大yuma

39:31.260 --> 39:32.660
可能会超过边界

39:32.660 --> 39:34.340
超过了配级number

39:34.340 --> 39:35.780
那如果超过了边界的话

39:35.780 --> 39:38.100
给它复制为配级number

39:38.100 --> 39:39.260
最大yuma就算出来了

39:39.260 --> 39:40.060
反而会最大yuma

39:41.940 --> 39:43.620
然后有了最大yuma之后

39:43.620 --> 39:45.340
我们再来算最大yuma

39:45.640 --> 39:46.800
concept max

39:46.800 --> 39:47.520
等于什么呢

39:47.520 --> 39:50.360
等于get max number

39:50.360 --> 39:51.360
传这么几个参数

39:51.360 --> 39:52.800
命传进去

39:52.800 --> 39:54.120
配级number传进去

39:54.120 --> 39:56.760
然后probs传进去

39:56.760 --> 39:57.360
最大数字

40:01.880 --> 40:02.240
好

40:02.240 --> 40:03.880
最大数字出来了

40:03.880 --> 40:05.960
那么现在我们只需要根据

40:05.960 --> 40:07.960
最小数字和最大数字

40:07.960 --> 40:10.560
来创建这么一个数组

40:10.560 --> 40:11.640
数组的每一项

40:11.640 --> 40:13.080
就是选用还往里面加

40:13.080 --> 40:14.400
数组里面加一些元素

40:14.400 --> 40:14.800
对吧

40:14.800 --> 40:16.080
最后把这个数组显示到这

40:16.100 --> 40:16.580
是不完了

40:17.940 --> 40:18.580
对不对

40:18.580 --> 40:19.260
好

40:19.260 --> 40:21.220
那么这里我们订一个数组

40:21.220 --> 40:22.500
numbers

40:22.500 --> 40:23.540
一个数组

40:23.540 --> 40:25.300
然后来一个循环

40:25.300 --> 40:26.300
什么循环呢

40:26.300 --> 40:27.220
副循环吗

40:27.220 --> 40:28.380
i等于什么

40:28.380 --> 40:29.280
min

40:29.280 --> 40:30.620
i小微等于什么

40:30.620 --> 40:31.500
max

40:31.500 --> 40:32.060
i加加

40:33.540 --> 40:34.580
来个循环

40:34.580 --> 40:37.180
每一次循环是不是往数组里面加一项

40:37.180 --> 40:37.940
push

40:37.940 --> 40:39.420
加一项啥

40:39.420 --> 40:40.220
是不是加一项

40:40.220 --> 40:42.220
gsx表达式

40:42.220 --> 40:42.860
对吧

40:42.860 --> 40:44.780
就加一个gsx表达式

40:44.800 --> 40:45.400
什么表达式

40:45.400 --> 40:46.240
是不是一个span

40:46.240 --> 40:46.680
对吧

40:50.600 --> 40:51.200
span元素

40:51.200 --> 40:51.800
对吧

40:51.800 --> 40:52.760
加一个span

40:52.760 --> 40:54.520
这个span里面的内容写啥

40:54.520 --> 40:55.800
是不是写的就是i

40:55.800 --> 40:56.120
对不对

40:56.120 --> 40:57.200
就是个数字

40:57.200 --> 40:57.560
对吧

40:58.760 --> 41:00.200
比方说最小一码是1

41:00.200 --> 41:01.040
最大一码是6

41:01.040 --> 41:02.000
那么就是每循环

41:02.000 --> 41:02.880
12356

41:02.880 --> 41:04.760
那么这个地方就写i

41:04.760 --> 41:04.960
好

41:04.960 --> 41:06.320
那么这里的class

41:06.320 --> 41:07.280
这个没什么好说的

41:07.280 --> 41:09.000
class name等于什么呢

41:09.000 --> 41:10.280
等于item

41:10.280 --> 41:11.240
等于item

41:11.240 --> 41:11.520
对吧

41:11.520 --> 41:13.320
往数组里面加就完事了

41:13.320 --> 41:14.000
加就完事了

41:14.840 --> 41:16.640
然后我们把这个数组放哪了

41:16.640 --> 41:17.480
这放这

41:17.480 --> 41:18.640
对吧

41:18.640 --> 41:19.200
数组放这

41:20.520 --> 41:21.880
数字码是不是搞定了

41:21.880 --> 41:23.000
对吧

41:23.000 --> 41:24.040
你看

41:24.040 --> 41:24.880
这边

41:24.880 --> 41:25.760
数字码搞定了

41:25.760 --> 41:26.840
但它现在帮了一个警告

41:26.840 --> 41:28.280
就是它没有keyz

41:28.280 --> 41:29.560
没有keyz

41:29.560 --> 41:30.800
因为这里是数组

41:30.800 --> 41:31.560
反正设计到数组

41:31.560 --> 41:32.440
它都有这个问题

41:32.440 --> 41:34.000
所以说你要给它个keyz

41:34.000 --> 41:34.760
keyz为啥呢

41:36.360 --> 41:37.880
keyz的话就为这个

41:39.240 --> 41:40.520
就为这个i的了

41:40.520 --> 41:41.040
就为这个i

41:42.280 --> 41:42.680
保存

41:43.660 --> 41:44.100
好

41:44.100 --> 41:44.740
你看一下

41:44.740 --> 41:45.620
是不是出来了

41:45.620 --> 41:47.100
对不对

41:47.100 --> 41:48.100
然后是事件

41:48.100 --> 41:49.340
事件

41:49.340 --> 41:50.060
那么事件

41:50.060 --> 41:51.260
我们这里直接复制一下

41:52.700 --> 41:55.710
事件

41:55.710 --> 41:56.670
当点击的时候

41:56.670 --> 41:58.790
为了出现

41:58.790 --> 41:59.630
避免出现那个

41:59.630 --> 42:00.150
就是

42:02.270 --> 42:02.830
那个问题

42:02.830 --> 42:03.150
对吧

42:03.150 --> 42:04.070
那个问题

42:04.070 --> 42:05.750
所以说这里把它设置成nets

42:05.750 --> 42:06.310
你们懂的

42:06.310 --> 42:07.590
你们懂的

42:07.590 --> 42:08.310
这里

42:08.310 --> 42:09.470
unclick

42:09.470 --> 42:10.190
当点击的时候

42:10.190 --> 42:11.110
topeg

42:11.110 --> 42:11.590
哪个

42:11.590 --> 42:12.270
到哪一页呢

42:12.270 --> 42:13.510
是不是到die

42:13.510 --> 42:13.870
对吧

42:13.870 --> 42:14.550
die

42:15.550 --> 42:16.630
这就完了

42:16.630 --> 42:17.110
保存

42:17.110 --> 42:17.590
看一下吧

42:19.110 --> 42:20.030
三

42:20.030 --> 42:21.310
四

42:21.310 --> 42:22.430
六

42:22.430 --> 42:22.950
四

42:22.950 --> 42:23.430
看这边

42:24.470 --> 42:25.550
六

42:25.550 --> 42:26.550
八

42:26.550 --> 42:27.710
十

42:27.710 --> 42:28.590
还没

42:28.590 --> 42:29.590
九

42:29.590 --> 42:30.950
八

42:30.950 --> 42:31.510
六

42:31.510 --> 42:32.110
还没

42:32.110 --> 42:33.230
这就完了

42:33.230 --> 42:33.390
好

42:33.390 --> 42:34.550
最后就是样式了

42:34.550 --> 42:35.470
样式

42:35.470 --> 42:35.870
就是说

42:35.870 --> 42:37.910
其中有一块特殊的样式

42:37.910 --> 42:38.830
有个特殊的样式

42:38.830 --> 42:39.950
就是说

42:39.950 --> 42:41.710
什么情况下

42:41.710 --> 42:43.550
什么情况下的class name

42:43.570 --> 42:44.930
它有带一个特殊的样式

42:44.930 --> 42:45.730
就当前

42:45.730 --> 42:47.370
当前就是那一页的样式

42:47.370 --> 42:48.370
就这种样式

42:48.370 --> 42:48.970
什么情况

42:48.970 --> 42:49.690
就是说

42:49.690 --> 42:51.530
我们这里写上这么一个

42:51.530 --> 42:52.330
介石表达式

42:52.330 --> 42:53.250
判断一下

42:53.250 --> 42:54.890
如果i等于了啥

42:54.890 --> 42:56.930
等于了当前页码

42:56.930 --> 42:57.250
对吧

42:57.250 --> 42:58.850
你目前这个页码的数字

42:58.850 --> 43:00.050
等于当前页码

43:00.050 --> 43:00.970
如果等于当前页码

43:00.970 --> 43:01.610
页码的话

43:01.610 --> 43:02.370
我给你的样式

43:02.370 --> 43:04.490
加上一个active

43:04.490 --> 43:05.650
active

43:05.650 --> 43:06.570
否则的话

43:06.570 --> 43:07.730
我们就给它加上item

43:07.730 --> 43:09.450
只加上一个item就行了

43:09.450 --> 43:11.730
这里写个三目运刷幅就完成了

43:11.870 --> 43:13.870
我们这里写上这个active

43:15.870 --> 43:17.430
active

43:17.430 --> 43:19.390
给它把border去掉

43:19.390 --> 43:23.390
然后颜色变成f40

43:23.390 --> 43:25.390
f40

43:25.390 --> 43:27.710
然后属标样式

43:27.710 --> 43:30.190
属标样式cursor

43:30.190 --> 43:31.990
把它变成out

43:33.310 --> 43:34.230
保存

43:34.230 --> 43:35.150
你看

43:35.150 --> 43:35.510
是吧

43:35.510 --> 43:36.710
当前页码

43:36.710 --> 43:37.950
没问题吧

43:37.950 --> 43:38.750
你看

43:38.810 --> 43:40.810
这个分业组件就写完了

43:41.810 --> 43:42.650
这个分业组件

43:42.650 --> 43:43.290
他做的事情

43:43.290 --> 43:44.970
他由于是个函数组件

43:44.970 --> 43:46.730
可以非常清晰的看到

43:46.730 --> 43:49.010
他做的事情就是很简单

43:49.010 --> 43:51.570
就是根据数据来进行渲染

43:51.570 --> 43:52.690
你给我什么数据

43:52.690 --> 43:54.810
我就进行什么样的渲染

43:54.810 --> 43:58.130
他不处理什么任何的数据变化逻辑

43:58.130 --> 43:59.730
我只是在适当的时候

43:59.730 --> 44:00.850
给你抛出视线

44:00.850 --> 44:02.890
因为我处理不了这些逻辑

44:02.890 --> 44:04.690
我给你抛出视线

44:04.690 --> 44:05.730
你看这里

44:05.730 --> 44:07.090
通过这个图配几点函数

44:07.090 --> 44:08.650
给他抛出视线

44:08.670 --> 44:10.110
你要爱处理就处理

44:10.110 --> 44:11.150
不爱处理就得了

44:11.150 --> 44:12.310
我跟我也没关系

44:12.310 --> 44:13.350
那是你自己的事情

44:13.350 --> 44:15.470
比方说我这里根本就没处理这个时间

44:15.470 --> 44:16.830
没处理这个事情还能翻译吗

44:16.830 --> 44:17.870
翻不了

44:17.870 --> 44:19.670
我反正反正把视线给力了

44:19.670 --> 44:21.150
你不处理

44:21.150 --> 44:22.110
那说明

44:22.110 --> 44:25.190
那说明你确实有自己的特殊想法

44:25.190 --> 44:25.950
不能翻译

44:25.950 --> 44:27.590
那是你自己的事情

44:27.590 --> 44:30.190
我只是做了一个展示而已

44:30.190 --> 44:32.470
帮你把这个东西展示出来

44:32.470 --> 44:33.350
看没有

44:33.350 --> 44:34.150
再一次说明

44:34.150 --> 44:34.870
react

44:34.870 --> 44:36.230
他实际上在干什么事情

44:36.230 --> 44:38.190
很多时候都在做这种这种事情

44:38.210 --> 44:39.450
就是说你给我数据

44:39.450 --> 44:40.810
然后把它展示出来

44:40.810 --> 44:42.210
我想办法把它展示出来

44:42.210 --> 44:43.890
你看这个用起来是不是非常方便

44:43.890 --> 44:45.370
用起来就是给一个pager

44:45.370 --> 44:46.690
给他属性值

44:46.690 --> 44:48.130
这个事件你挨注册就注册

44:48.130 --> 44:49.450
不注册就完事

44:49.450 --> 44:50.490
你把组件写好过后

44:50.490 --> 44:52.250
这个东西是非常好重用

44:52.250 --> 44:53.490
你以后需要野马的地方

44:53.490 --> 44:55.250
就全部用这个东西

44:55.250 --> 44:55.450
对吧

44:55.450 --> 44:57.970
我就做出来一个具有通用性的

44:57.970 --> 44:59.410
这么一个野马的组件

45:01.290 --> 45:01.770
好了

45:01.770 --> 45:03.210
那么这个东西写好

45:03.210 --> 45:04.210
你可以先赞成视频

45:04.210 --> 45:05.610
先把这个东西写好再说

45:05.610 --> 45:07.050
写好再说

45:07.070 --> 45:08.310
好写好了之后

45:08.310 --> 45:10.430
我们就可以来结合数据

45:10.430 --> 45:13.190
再做一个完整的效果出来

45:13.190 --> 45:13.950
来结合数据

45:13.950 --> 45:15.870
做一个完整的效果出来

45:15.870 --> 45:17.670
这里还有一个东西

45:17.670 --> 45:21.190
就是说如果一种特殊情况

45:21.190 --> 45:22.950
就是说如果这个Total

45:22.950 --> 45:24.350
就是种数据量

45:24.350 --> 45:26.110
它可能是0

45:26.110 --> 45:28.070
如果是0的情况下

45:28.070 --> 45:30.230
我们这里就会出现这种

45:30.230 --> 45:31.630
这种怪异的现象

45:31.630 --> 45:33.510
就会出现那种怪异的现象

45:33.510 --> 45:34.830
所以说我们这里

45:34.830 --> 45:35.830
在pager里边

45:35.890 --> 45:37.250
最好判断一下

45:37.250 --> 45:38.410
判断一下

45:38.410 --> 45:39.930
就是的总页数

45:39.930 --> 45:41.930
如果我们算出来是0

45:41.930 --> 45:42.610
这里判断一下

45:46.290 --> 45:46.730
如果

45:50.730 --> 45:52.690
如果是这种情况下

45:52.690 --> 45:54.290
我们就直接返回了

45:54.290 --> 45:55.730
就返回一个undefend

45:55.730 --> 45:57.290
就啥都不显示

45:57.290 --> 45:58.090
保存看一下

46:02.890 --> 46:04.290
那这样吧

46:04.350 --> 46:06.510
在render里面它还不允许返回undefend

46:06.510 --> 46:07.630
那返回nau

46:07.630 --> 46:09.110
返回nau

46:09.110 --> 46:10.310
就什么都不显示

46:10.310 --> 46:11.270
我们知道nau

46:11.270 --> 46:13.710
它渲染出来什么都不显示

46:13.710 --> 46:14.270
OK

46:14.270 --> 46:15.870
我们把这个东西处理一下

46:15.870 --> 46:18.030
就做个判断就完事了

46:18.030 --> 46:19.150
当然也可以判断一下

46:19.150 --> 46:20.990
什么判断一下Total为0的时候

46:20.990 --> 46:22.390
就什么都不显示

46:22.390 --> 46:24.710
就这个地方我们把处理一下

46:24.710 --> 46:24.870
好

46:24.870 --> 46:26.510
接下来我们这个组建就做完了

46:26.510 --> 46:28.670
接下来我们就来测试一下

46:28.670 --> 46:30.030
来做一个完整的例子

46:30.030 --> 46:31.070
来测试一下

46:31.070 --> 46:32.630
我们还是用远程

46:32.650 --> 46:35.930
大家可是请求来读取

46:35.930 --> 46:36.930
读取啥呢

46:36.930 --> 46:38.010
读取那个

46:38.890 --> 46:40.610
我们的学生数据

46:40.610 --> 46:40.850
好

46:40.850 --> 46:43.970
这里我就稍微的把这个pager text 改一下

46:43.970 --> 46:45.050
改个名字

46:45.050 --> 46:46.970
给它改成

46:46.970 --> 46:47.570
改成啥呢

46:47.570 --> 46:50.130
我们先把这个几个组建做好吧

46:50.130 --> 46:51.610
一个是学生组建

46:51.610 --> 46:52.890
student介绍

46:52.890 --> 46:54.450
把这个组建做好

46:54.450 --> 46:56.010
这个组建我们以前做过

46:56.010 --> 46:56.370
对吧

46:56.370 --> 46:58.170
以前做过的

46:58.170 --> 46:59.890
我们这里就直接再写一遍

47:00.870 --> 47:03.070
写个函数组建

47:03.070 --> 47:04.310
export

47:04.310 --> 47:06.990
就是rcf

47:06.990 --> 47:09.390
应该是rfc

47:09.390 --> 47:10.590
好

47:10.590 --> 47:11.390
返回的是什么呢

47:11.390 --> 47:13.230
返回的是一个li

47:13.230 --> 47:14.470
返回的是一个li

47:14.470 --> 47:18.070
li里边它写上学生的各种信息

47:18.070 --> 47:18.910
各种信息

47:18.910 --> 47:21.430
当然这里这一块也可以进行解构

47:21.430 --> 47:21.710
对吧

47:21.710 --> 47:22.830
也可以进行解构

47:22.830 --> 47:24.470
比方说学生的姓名

47:24.470 --> 47:25.870
学生的姓别

47:25.870 --> 47:29.510
学生的出生日期

47:29.570 --> 47:30.610
还有啥呢

47:30.610 --> 47:31.570
没啥了吧

47:31.570 --> 47:32.170
没啥了

47:32.170 --> 47:33.170
就行了

47:33.170 --> 47:34.130
就这三个东西

47:34.130 --> 47:35.490
显示一下就行了

47:35.490 --> 47:37.890
姓名

47:37.890 --> 47:39.810
姓名

47:39.810 --> 47:42.770
姓名就是乃至于内

47:42.770 --> 47:44.490
解构一下

47:44.490 --> 47:45.810
这里的复制

47:45.810 --> 47:50.370
这里的姓别

47:50.370 --> 47:53.730
姓别的话就显示的是6

47:53.730 --> 47:54.970
如果等于1

47:54.970 --> 47:56.050
那么就是

47:56.050 --> 47:57.450
男

47:57.450 --> 47:59.690
否则的话就是女

47:59.950 --> 48:01.790
然后是出生日期

48:01.790 --> 48:05.210
出生年份

48:05.210 --> 48:08.210
出生年份

48:08.210 --> 48:09.330
出生年份

48:09.330 --> 48:11.050
就直接写上Burst

48:11.050 --> 48:11.930
就完了

48:11.930 --> 48:12.530
这个很简单

48:12.530 --> 48:13.730
也没必要去测试了

48:13.730 --> 48:14.930
没啥东西

48:14.930 --> 48:15.930
这是个学生

48:15.930 --> 48:17.930
然后再写一个学生的列表

48:17.930 --> 48:20.170
student list

48:20.170 --> 48:21.090
学生列表

48:21.090 --> 48:23.930
学生列表也是个函数组件

48:23.930 --> 48:26.210
rfc

48:26.210 --> 48:27.570
学生列表里边

48:27.570 --> 48:30.290
他要给我一个学生的数组

48:30.350 --> 48:31.550
要给我一个学生数组

48:31.550 --> 48:34.790
我们这里就直接把学生数组拿到

48:34.790 --> 48:35.790
stues

48:35.790 --> 48:36.790
用map

48:36.790 --> 48:39.350
这些东西我们写要写得很熟

48:39.350 --> 48:41.150
所以说我们这里直接写了

48:41.150 --> 48:43.310
也不多废话了

48:43.310 --> 48:44.990
student

48:44.990 --> 48:46.150
from

48:46.150 --> 48:48.030
student

48:48.030 --> 48:48.790
把导入进来

48:48.790 --> 48:49.670
然后这里边

48:49.670 --> 48:52.790
每一个学生就对应一个student

48:52.790 --> 48:54.350
student

48:54.350 --> 48:55.510
对应这个东西

48:55.510 --> 48:56.990
然后把属性给他传过去

48:56.990 --> 48:59.910
就是学生对象里边的所有东西传过去

48:59.930 --> 49:02.090
作为学生的就是这个组件的属性

49:02.090 --> 49:03.090
传过去就完事了

49:03.090 --> 49:04.450
反悔的是一个什么呢

49:04.450 --> 49:07.090
反悔的是一个学生的

49:07.090 --> 49:08.450
就是组件数组

49:08.450 --> 49:10.490
当然还要给他一个key

49:10.490 --> 49:14.210
key的话我们就直接拿从学生的id里边去得到

49:14.210 --> 49:15.650
从得到学生的id

49:15.650 --> 49:17.450
这是我们以前写过的

49:17.450 --> 49:19.250
那么这里就是ul

49:19.250 --> 49:20.450
ul

49:20.450 --> 49:22.650
为什么没跟着改

49:22.650 --> 49:24.450
stues

49:24.450 --> 49:26.090
我们把这两个组件做好

49:26.090 --> 49:27.610
一个是学生自身的组件

49:27.610 --> 49:29.850
一个是学生的列表组件

49:29.990 --> 49:31.310
然后我们再回到这里

49:31.310 --> 49:32.870
pager text

49:32.870 --> 49:33.590
test

49:33.590 --> 49:36.310
我们这里我们就利用这个组件吧

49:36.310 --> 49:37.430
他有自己的状态

49:37.430 --> 49:40.150
就当前一开始肯定是第1页

49:40.150 --> 49:42.470
总数据量一开始都没有得到

49:42.470 --> 49:43.670
对吧都没有得到数据

49:43.670 --> 49:45.590
所以说总数据量是0

49:45.590 --> 49:47.710
然后每页显示10条

49:47.710 --> 49:51.070
总共就是页码的数量最多为5个

49:51.070 --> 49:53.470
最多为5个

49:53.470 --> 49:55.590
然后这里边

49:55.590 --> 49:58.390
这里边我们写上一个构造函数

49:58.450 --> 50:00.130
因为我们要获取学生数据

50:00.130 --> 50:04.050
要远程获取学生数据

50:04.050 --> 50:05.010
所以说到这里边

50:05.010 --> 50:07.650
我们首先要进行一个阿迦克斯请求

50:07.650 --> 50:09.530
来获得学生的数据

50:09.530 --> 50:10.650
阿迦克斯请求的话

50:10.650 --> 50:12.370
我们这里就直接用肺起

50:12.370 --> 50:14.370
肺起请求什么地址呢

50:14.370 --> 50:16.250
我们看一下这里的API

50:16.250 --> 50:18.890
请求的是这个地址

50:18.890 --> 50:19.890
请求的是这个地址

50:19.890 --> 50:22.130
咱们把这个

50:22.130 --> 50:23.850
粘过来

50:23.850 --> 50:24.690
请求这个地址

50:24.690 --> 50:26.450
把这个复制一下

50:26.450 --> 50:27.970
把地址复制一下

50:27.970 --> 50:30.190
请求这个地址

50:30.190 --> 50:32.230
然后把APPKey加上

50:33.670 --> 50:34.670
APPKey是啥呢

50:34.670 --> 50:36.270
我这里

50:36.270 --> 50:37.870
主面版

50:37.870 --> 50:39.670
这个复制一下

50:39.670 --> 50:42.190
再加上

50:42.190 --> 50:43.390
咦

50:43.390 --> 50:44.190
而且

50:45.390 --> 50:48.110
page is not present

50:48.110 --> 50:50.790
require in parameter

50:50.790 --> 50:52.270
它还需要一个就是

50:52.270 --> 50:53.030
页码

50:53.030 --> 50:55.350
还需要一个页码

50:55.350 --> 50:57.510
然后再加上一个页码

50:57.530 --> 50:59.810
page为地业

50:59.810 --> 51:01.210
还不行吗

51:01.210 --> 51:02.290
还有一个size

51:02.290 --> 51:03.810
每页钱是多少条

51:03.810 --> 51:06.010
每页钱是10条

51:06.010 --> 51:06.610
OK

51:06.610 --> 51:08.090
那么就得到这个东西了

51:08.090 --> 51:08.730
对吧

51:08.730 --> 51:09.210
好

51:09.210 --> 51:12.290
因此我们这里肺起的时候

51:12.290 --> 51:13.610
我们刚出几个函数

51:13.610 --> 51:15.690
专门来写函数

51:15.690 --> 51:16.650
这个函数就是一个

51:16.650 --> 51:18.250
sync函数

51:18.250 --> 51:19.490
是一个异部函数

51:19.490 --> 51:22.890
就是fetch student

51:22.890 --> 51:23.690
得到学生

51:23.690 --> 51:25.250
得到学生数据

51:25.250 --> 51:25.970
没有参数

51:25.970 --> 51:27.210
没有参数

51:27.310 --> 51:30.460
写这么一个函数

51:30.460 --> 51:31.580
写这么一个函数

51:31.580 --> 51:32.460
这个函数里边

51:32.460 --> 51:35.420
我们来使用fetch

51:35.420 --> 51:37.060
然后把这个地址放进去

51:37.060 --> 51:38.660
APP key不变化

51:38.660 --> 51:40.620
page这里应该填啥

51:40.620 --> 51:42.220
是不是应该填上我们的

51:42.220 --> 51:44.020
res state里边的

51:44.020 --> 51:44.860
什么

51:44.860 --> 51:45.740
是不是current

51:45.740 --> 51:46.340
对吧

51:46.340 --> 51:47.940
我们把我们当前的页码

51:47.940 --> 51:49.020
给它传过去

51:49.020 --> 51:51.540
这是来自于我们状态里边的数据

51:51.540 --> 51:53.220
把当前的页码给它传过去

51:53.220 --> 51:54.020
你看我们当前的页码

51:54.020 --> 51:55.700
是不是存在状态里边的

51:55.700 --> 51:56.100
对吧

51:56.100 --> 51:57.860
把当前的页码给它传过去

51:57.880 --> 51:59.960
然后sizen这里写啥

51:59.960 --> 52:04.120
这里是不是写上res state里边

52:04.120 --> 52:05.480
这个状态里边都有

52:05.480 --> 52:08.760
limit把这些数据给它传过去

52:08.760 --> 52:09.840
传过去之后

52:09.840 --> 52:12.000
是不是rin

52:12.000 --> 52:14.240
来获得响应结果

52:14.240 --> 52:17.040
把响应结果转换成节省

52:17.040 --> 52:18.920
获得这个响应结果

52:18.920 --> 52:20.960
然后把转换成节省之后

52:20.960 --> 52:23.920
这个响应结果里边

52:23.920 --> 52:25.640
这个响应结果里边

52:25.640 --> 52:26.680
是不是有什么东西

52:26.700 --> 52:27.740
我们来看一下这个响应结果

52:29.340 --> 52:31.300
network刷新

52:31.300 --> 52:32.700
这边我们来看一下响应结果

52:32.700 --> 52:33.980
是不是有个data数据

52:33.980 --> 52:36.220
data数据里边是不是也既有学生数组

52:36.220 --> 52:37.300
对吧

52:37.300 --> 52:39.700
按照分页来得到了学生数组

52:39.700 --> 52:41.020
并且还有什么

52:41.020 --> 52:42.260
还有种数据量

52:42.260 --> 52:42.580
对不对

52:42.580 --> 52:43.180
都得到了

52:43.180 --> 52:44.340
对不对

52:44.340 --> 52:45.460
因此我们得到什么

52:45.460 --> 52:47.820
respa里边的data

52:47.820 --> 52:49.380
await

52:49.380 --> 52:52.860
这是我们的结果

52:52.860 --> 52:53.860
respa

52:53.860 --> 52:55.060
这是我们的结果

52:55.060 --> 52:57.340
await

52:57.340 --> 52:59.000
得到它里边的数据

52:59.000 --> 53:00.920
然后我们从这个数据里边

53:00.920 --> 53:01.880
是不是可以拿到

53:01.880 --> 53:02.400
拿到什么

53:02.400 --> 53:03.760
拿到种的数据量

53:03.760 --> 53:05.400
以前学生的数据

53:05.400 --> 53:05.560
对吧

53:05.560 --> 53:06.880
都可以拿到了

53:06.880 --> 53:09.000
所以这里还有一个学生数据

53:09.000 --> 53:11.000
student

53:11.000 --> 53:14.200
学生数据

53:14.200 --> 53:15.400
student

53:15.400 --> 53:16.520
一个空的数据

53:16.520 --> 53:18.080
学生数据

53:18.080 --> 53:20.400
然后我们这里就可以拿到学生的数据

53:20.400 --> 53:21.320
又可以拿到什么

53:21.320 --> 53:22.520
种的数据量

53:22.520 --> 53:23.920
于是我们在拿到之后

53:23.920 --> 53:24.600
我们使用

53:24.600 --> 53:27.040
this set state

53:27.040 --> 53:28.800
this set state

53:28.820 --> 53:30.260
拿到这个

53:30.260 --> 53:31.860
这啥

53:31.860 --> 53:33.060
给它试试什么

53:33.060 --> 53:34.420
设置种的数据量

53:34.420 --> 53:35.620
种的数据量为多少

53:35.620 --> 53:37.700
来自于响应结果里边的

53:37.700 --> 53:38.260
什么

53:38.260 --> 53:40.660
cult

53:40.660 --> 53:42.500
然后学生的数组

53:42.500 --> 53:43.860
要重新复制

53:43.860 --> 53:45.500
学生的数组为什么

53:45.500 --> 53:47.180
又从响应结果里边拿到

53:47.180 --> 53:48.580
fand by page

53:48.580 --> 53:49.180
对吧

53:49.180 --> 53:50.940
把这数组也拿到

53:50.940 --> 53:53.900
来自于respa.fand by page

53:53.900 --> 53:55.740
我们这里就重新设置到状态

53:55.740 --> 53:57.100
状态以改变

53:57.100 --> 53:58.260
是不是要重新渲染

53:58.260 --> 53:58.580
对吧

53:58.600 --> 53:59.600
就重新渲染了

53:59.600 --> 54:01.080
就这么简单

54:01.080 --> 54:02.920
于是在构造函数里边

54:02.920 --> 54:04.960
我们先一开始的时候

54:04.960 --> 54:06.640
就获得所有学生

54:06.640 --> 54:07.920
获得所有学生

54:07.920 --> 54:08.760
那他就获取吧

54:08.760 --> 54:09.520
我不管了

54:09.520 --> 54:10.640
他是个异部函数

54:10.640 --> 54:11.320
获取完了过后

54:11.320 --> 54:13.480
他自然会去设置状态

54:13.480 --> 54:14.760
然后我们在渲染的时候

54:14.760 --> 54:15.840
怎么渲染呢

54:15.840 --> 54:18.280
我们一方面要渲染出一个

54:18.280 --> 54:20.120
就是叶码

54:20.120 --> 54:21.240
我们这里给一个

54:21.240 --> 54:23.240
外面外层套一个DIV

54:23.240 --> 54:24.440
外层套一个DIV

54:24.440 --> 54:26.400
这个DIV有一个内样式

54:26.400 --> 54:27.440
就是container

54:27.440 --> 54:28.480
容器

54:28.540 --> 54:30.460
然后这里边

54:30.460 --> 54:33.180
容器里边一方面有一个叶码

54:33.180 --> 54:34.860
pager

54:34.860 --> 54:35.540
有一个叶码

54:40.880 --> 54:41.560
还有什么

54:41.560 --> 54:43.040
还有一个就是学生的

54:43.040 --> 54:44.200
学生的列表

54:44.200 --> 54:45.640
打入进来

54:45.640 --> 54:46.440
student

54:46.440 --> 54:48.160
就是把这些组件组合一下

54:49.560 --> 54:51.720
student list

54:51.720 --> 54:55.760
还有一个学生的列表

54:55.760 --> 54:57.520
列表里边有个属性steals

54:57.520 --> 54:58.200
来自于什么

54:58.200 --> 55:00.080
来自于状态里边的

55:00.080 --> 55:01.160
student

55:01.160 --> 55:01.880
来自于这个数数

55:03.080 --> 55:04.520
看一下

55:04.520 --> 55:05.480
那么现在

55:05.480 --> 55:06.960
一开始你看着

55:06.960 --> 55:08.600
就是一开始

55:08.600 --> 55:11.200
由于这个total是0

55:11.200 --> 55:12.760
一开始我把这句话注释了

55:12.760 --> 55:14.800
一开始由于total是0

55:14.800 --> 55:17.280
所以说一开始是什么都显示不了的

55:17.280 --> 55:18.240
为什么显示不了

55:18.240 --> 55:19.320
叶码没法显示吗

55:19.320 --> 55:19.960
对吧

55:19.960 --> 55:21.360
因为叶码是没法显示的

55:21.360 --> 55:23.200
因为它总的数据量为0

55:23.200 --> 55:25.480
所以说叶码这一部分没法显示

55:25.480 --> 55:27.240
然后这一部分也没法显示

55:27.240 --> 55:28.520
因为它数组是空的

55:28.520 --> 55:29.680
没有任何东西

55:29.680 --> 55:31.840
但是元素结构是出来了

55:31.900 --> 55:32.860
元素

55:32.860 --> 55:34.140
怎么看到黑道里面去了

55:34.140 --> 55:35.300
元素结构里面你看

55:35.300 --> 55:36.580
是不是container出来了

55:36.580 --> 55:37.740
然后那个pager出来了

55:37.740 --> 55:39.260
以为里边没东西对吧

55:39.260 --> 55:40.300
pager里面没东西

55:40.300 --> 55:41.380
一开始是0

55:41.380 --> 55:43.380
然后购账函数里面去获取学生

55:43.380 --> 55:44.940
它需要一个时间

55:44.940 --> 55:45.780
获取学生之后

55:45.780 --> 55:47.340
你看学生数据是不是出来了

55:47.340 --> 55:49.340
然后总的数据量是不是出来了

55:49.340 --> 55:50.500
总的数据量已改

55:50.500 --> 55:51.780
那是不是重新渲染的时候

55:51.780 --> 55:53.140
这个叶码也跟着改了

55:53.140 --> 55:54.540
对不对

55:54.540 --> 55:55.780
那么接下来的问题就是

55:55.780 --> 55:57.820
当我们点击改变叶码之后

55:57.820 --> 55:59.060
这个数据量

55:59.060 --> 56:01.100
这个数据也会重新变化

56:01.120 --> 56:03.800
那么我们是不是要重新写这个函数

56:03.800 --> 56:05.840
这个函数干嘛

56:05.840 --> 56:08.760
一方面先改变当前的叶码

56:08.760 --> 56:11.880
也可以得到数据之后再重新改变也行

56:11.880 --> 56:13.720
那先改变当前叶码

56:13.720 --> 56:16.520
改变了之后再干嘛

56:16.520 --> 56:18.680
改变了当前叶码之后

56:18.680 --> 56:21.240
然后再去重新获取

56:21.240 --> 56:22.840
fetch student

56:22.840 --> 56:24.800
重新获取学生

56:24.800 --> 56:26.400
一重新获取学生过后

56:26.400 --> 56:27.840
那是不是学生里边

56:27.840 --> 56:29.720
这些什么总数的数据量

56:29.720 --> 56:32.080
学生的数组这些都发生了改变了

56:32.080 --> 56:32.540
对吧

56:32.880 --> 56:35.560
就加上了这么一句话就完事了

56:35.560 --> 56:36.260
保存啊

56:36.260 --> 56:37.300
你看第二叶

56:40.220 --> 56:41.100
变化了吗

56:41.100 --> 56:59.720
叶体叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶叶

56:59.720 --> 57:05.220
就是把数据给他在合适的时间点给他合适的数据就完事了

57:05.220 --> 57:08.220
该数什么时候获取数据我们只考虑数据就完事了

57:08.220 --> 57:11.220
什么时候获取数据一开始要获取一次数据

57:11.220 --> 57:14.220
但我们改变砚码之后又要重新就获取数据

57:14.220 --> 57:17.220
只要获取了数据过后由于重新设置的状态

57:17.220 --> 57:18.920
导致的重新渲染

57:18.920 --> 57:22.220
重新渲染这些组件直组件也跟着重新渲染了

57:23.220 --> 57:26.220
当然我们还可以继续大家可以发展思维了

57:26.220 --> 57:29.220
比方我们在这里还可以可以加上一个盟程

57:29.220 --> 57:30.720
加上一个盟程

57:30.720 --> 57:32.220
这个盟程呢

57:32.220 --> 57:35.220
那我们就假码就假码也没多少代码啊

57:35.220 --> 57:36.720
也没多少代码

57:36.720 --> 57:39.720
比方说吧比方说啊

57:39.720 --> 57:42.220
咱们呢就这样子写

57:42.220 --> 57:45.220
这里因为没什么样子啊也不需要写什么样子

57:45.220 --> 57:48.220
比方说写个盟程啊model

57:48.220 --> 57:50.220
model

57:50.220 --> 57:55.220
然后呢就是介绍啊写上这个东西嘛

57:55.220 --> 57:59.220
然后这里呢这个盟程呢就是一个函数组件啊

57:59.220 --> 58:01.220
就是个函数组件

58:01.220 --> 58:03.220
他也没有什么状态啊

58:03.220 --> 58:07.220
函数组件里面就是个div啊div给他个类样式啊

58:07.220 --> 58:11.220
就是model啊写上这么一个css

58:11.220 --> 58:14.220
model.css

58:14.220 --> 58:16.220
import

58:16.220 --> 58:18.220
model

58:18.220 --> 58:20.220
import

58:20.220 --> 58:23.220
model.css

58:23.220 --> 58:26.220
css里面呢给他写上一个类样式啊model

58:26.220 --> 58:29.220
pration fixed

58:29.220 --> 58:33.220
然后呢写上他里面有一个lapt0

58:33.220 --> 58:35.220
top 0

58:35.220 --> 58:37.220
然后宽度呢百分之百

58:37.220 --> 58:41.220
高度呢百分之百把整个窗口称满啊称满

58:41.220 --> 58:44.220
然后呢背景颜色啊背景颜色

58:44.220 --> 58:47.220
rgba000.5

58:47.220 --> 58:48.220
写上个盟程

58:48.220 --> 58:52.220
然后文字颜色呢就是白色吧啊白色

58:52.220 --> 58:55.220
然后再写上一个自己大小

58:55.220 --> 58:58.220
size 3m啊就随便写一个吧啊随便写个

58:58.220 --> 59:00.220
这个盟程非常非常简单

59:00.220 --> 59:03.220
什么就里面就一句话啊就一句话

59:03.220 --> 59:06.220
就是里边就写上一个

59:06.220 --> 59:10.220
呃家载中啊就写上一个p元数啊

59:10.220 --> 59:12.220
p元数家载中

59:12.220 --> 59:16.220
啊我也懒得去画什么就是一个转圈圈了啊

59:16.220 --> 59:18.220
又懒得去画了就一个p元数啊

59:18.220 --> 59:20.220
所以说我们这里呢再写上一个样式啊

59:20.220 --> 59:22.220
p元数要居中modle

59:22.220 --> 59:25.220
啊里边的p元数要居中

59:25.220 --> 59:28.220
呃怎么居中呢把p元数设成绝对定位嘛

59:28.220 --> 59:29.220
iPhone Note

59:29.220 --> 59:31.220
在它的包含块里面居中

59:31.220 --> 59:33.220
那边就是left 50%

59:33.220 --> 59:35.220
top 50%

59:35.220 --> 59:38.220
然后呢transform啊这些东西

59:38.220 --> 59:41.220
就不用讲了吧对吧

59:41.220 --> 59:44.220
啊-50%啊-50%

59:44.220 --> 59:46.220
对吧把居中就完事了啊

59:46.220 --> 59:48.220
啊modle加载中

59:48.220 --> 59:50.220
因此呢有了这么一个组件之后呢

59:50.220 --> 59:52.220
我们在这里就可以用了啊

59:52.220 --> 59:54.220
test里边就可以用了再加一个组件进来

59:54.220 --> 59:56.220
import

59:56.220 --> 59:58.220
modle

59:58.220 --> 59:59.220
from

59:59.220 --> 01:00:00.220
modle

01:00:00.220 --> 01:00:03.220
好直接扔过来就行了啊扔过来就行了

01:00:03.220 --> 01:00:06.220
随便放一个吧放在放一个位置

01:00:06.220 --> 01:00:07.220
保存

01:00:07.220 --> 01:00:09.220
好你看一下

01:00:09.220 --> 01:00:10.220
对吧有个家载中了

01:00:10.220 --> 01:00:12.220
哎哦

01:00:12.220 --> 01:00:14.220
这个p元数啊

01:00:14.220 --> 01:00:16.220
它为什么没居中啊

01:00:16.220 --> 01:00:18.220
我看一下啊

01:00:18.220 --> 01:00:22.220
这个modle它的p元数top 50%

01:00:22.220 --> 01:00:24.220
left 50%

01:00:24.220 --> 01:00:26.220
top 50%

01:00:26.220 --> 01:00:28.220
没问题啊

01:00:28.220 --> 01:00:30.220
没问题啊

01:00:30.220 --> 01:00:31.220
为什么没有居中呢

01:00:31.220 --> 01:00:33.220
是因为这个p元数它有个margin嘛

01:00:33.220 --> 01:00:35.220
把margin给它去掉啊您

01:00:35.220 --> 01:00:37.220
把margin给它去掉啊

01:00:37.220 --> 01:00:39.220
咱们把margin去掉

01:00:39.220 --> 01:00:41.220
找这个css

01:00:41.220 --> 01:00:43.220
牛郎现在默认样式里边有个margin

01:00:43.220 --> 01:00:45.220
给它去掉

01:00:45.220 --> 01:00:47.220
这就是css里边的东西啊

01:00:47.220 --> 01:00:48.220
好你看

01:00:48.220 --> 01:00:50.220
对吧就完事了啊

01:00:50.220 --> 01:00:52.220
做一个简单的东西啊简单的东西

01:00:52.220 --> 01:00:55.220
当然实际情况呢应该是只撑完这一块啊

01:00:55.220 --> 01:00:57.220
我就说这么个例子啊说这么个例子

01:00:57.220 --> 01:00:59.220
但是这个猛程呢目前呢是

01:00:59.220 --> 01:01:01.220
每一次所有的情况都显示的

01:01:01.220 --> 01:01:03.220
所以说呢我们要控制它的显示隐藏

01:01:03.220 --> 01:01:05.220
那怎么来控制呢

01:01:05.220 --> 01:01:07.220
加个属性呗

01:01:07.220 --> 01:01:10.220
对不对啊这个属性里边判断一下啊

01:01:10.220 --> 01:01:12.220
如果这个属性里边呢是秀啊

01:01:12.220 --> 01:01:14.220
秀是一个布尔属性啊

01:01:14.220 --> 01:01:16.220
它为q或者是为force

01:01:16.220 --> 01:01:18.220
如果它显示的情况下呢

01:01:18.220 --> 01:01:19.220
显

01:01:19.220 --> 01:01:21.220
如果它这个为q的话

01:01:21.220 --> 01:01:22.220
那么我就显示

01:01:22.220 --> 01:01:24.220
否则的话如果它不为q的话

01:01:24.220 --> 01:01:26.220
我就啥都不显示

01:01:26.220 --> 01:01:28.220
就return now就完事了

01:01:28.220 --> 01:01:30.220
不就完了吗对不对

01:01:30.220 --> 01:01:32.220
我们通过这个属性来控制它的显示隐藏

01:01:32.220 --> 01:01:34.220
如果它为q啊

01:01:34.220 --> 01:01:36.220
如果它为force的话

01:01:36.220 --> 01:01:38.220
那么就不显示

01:01:38.220 --> 01:01:40.220
如果它为q的话就显示这个东西

01:01:40.220 --> 01:01:42.220
所以说我们这一块呢到这边来

01:01:42.220 --> 01:01:44.220
我们这里呢可以在状态里边加上一个

01:01:44.220 --> 01:01:46.220
加上一个就是

01:01:46.220 --> 01:01:47.220
isn't loading吗

01:01:47.220 --> 01:01:49.220
是否正在加载

01:01:49.220 --> 01:01:51.220
是否正在加载

01:01:51.220 --> 01:01:52.220
一开始呢为force对吧

01:01:52.220 --> 01:01:54.220
一开始为force

01:01:54.220 --> 01:01:55.220
那么现在呢

01:01:55.220 --> 01:01:57.220
我们这里给它写上一个秀这个属性

01:01:57.220 --> 01:01:59.220
什么时候显示呢

01:01:59.220 --> 01:02:01.220
如果你正在加载的时候

01:02:01.220 --> 01:02:02.220
是不是要显示

01:02:02.220 --> 01:02:03.220
isn't loading

01:02:03.220 --> 01:02:05.220
如果你正在加载的情况下

01:02:05.220 --> 01:02:06.220
我就要显示

01:02:06.220 --> 01:02:08.220
否则的话我就不显示

01:02:08.220 --> 01:02:10.220
你看一开始没有显示对吧

01:02:10.220 --> 01:02:12.220
那么什么情况下是在加载呢

01:02:12.220 --> 01:02:13.220
你看

01:02:13.220 --> 01:02:15.220
获取学生的时候

01:02:15.220 --> 01:02:17.220
一开始是不是要设置状态

01:02:17.220 --> 01:02:18.220
对吧

01:02:18.220 --> 01:02:19.220
一开始叫设置状态

01:02:19.220 --> 01:02:21.220
这个状态那里边就是

01:02:21.220 --> 01:02:23.220
设置什么设置isn't loading

01:02:23.220 --> 01:02:25.220
把它设为q

01:02:25.220 --> 01:02:27.220
让它正在加载

01:02:27.220 --> 01:02:28.220
然后

01:02:28.220 --> 01:02:31.220
当我们完成数据获取之后

01:02:31.220 --> 01:02:33.220
是不是就把它isn't loading了

01:02:33.220 --> 01:02:34.220
又设为force对吧

01:02:34.220 --> 01:02:36.220
就这么简单

01:02:36.220 --> 01:02:37.220
一开始

01:02:37.220 --> 01:02:39.220
要获取数据之前

01:02:39.220 --> 01:02:40.220
正在加载

01:02:40.220 --> 01:02:41.220
然后获取完数据之后

01:02:41.220 --> 01:02:43.220
把它设为没有加载了

01:02:43.220 --> 01:02:45.220
保存

01:02:45.220 --> 01:02:47.220
刷新

01:02:47.220 --> 01:02:48.220
点击

01:02:48.220 --> 01:02:50.220
你看加载中

01:02:50.220 --> 01:02:53.220
刷新

01:02:53.220 --> 01:02:54.220
那为什么一开始

01:02:54.220 --> 01:02:56.220
它没有显示正在加载了

01:02:56.220 --> 01:02:58.220
实际上你看一下这里

01:02:58.220 --> 01:02:59.220
点击右键 检查

01:02:59.220 --> 01:03:00.220
我们这里看到了

01:03:00.220 --> 01:03:02.220
这里报了一个错误

01:03:02.220 --> 01:03:03.220
这个错误

01:03:03.220 --> 01:03:06.220
我现在还没有办法解释

01:03:06.220 --> 01:03:07.220
没有办法解释

01:03:07.220 --> 01:03:09.220
我后边讲了生命周期之后

01:03:09.220 --> 01:03:11.220
我就可以解释这个错误了

01:03:11.220 --> 01:03:13.220
它为什么不允许你这样做

01:03:13.220 --> 01:03:15.220
后边我就能解释了

01:03:15.220 --> 01:03:16.220
现在别管

01:03:16.220 --> 01:03:17.220
总之呢

01:03:17.220 --> 01:03:18.220
我们带一把逻辑

01:03:18.220 --> 01:03:19.220
是这个逻辑

01:03:19.220 --> 01:03:20.220
是这个逻辑

01:03:20.220 --> 01:03:21.220
你看一下

01:03:21.220 --> 01:03:23.220
没问题吧

01:03:23.220 --> 01:03:26.220
我们就做出来这么一个效果了

01:03:26.220 --> 01:03:28.220
这是这一块

01:03:28.220 --> 01:03:29.220
这是这一块

01:03:29.220 --> 01:03:31.220
那行了吧

01:03:31.220 --> 01:03:33.220
那就没啥了

01:03:33.220 --> 01:03:34.220
这是一个小的demo

01:03:34.220 --> 01:03:35.220
大家下来

01:03:35.220 --> 01:03:37.220
这个整个练习呢

01:03:37.220 --> 01:03:38.220
完整的做一遍

01:03:38.220 --> 01:03:39.220
你把这一个练习

01:03:39.220 --> 01:03:40.220
完整的做一遍

01:03:40.220 --> 01:03:41.220
你基本上就搞清楚了

01:03:41.220 --> 01:03:43.220
这个事件是怎么回事了

01:03:43.220 --> 01:03:44.220
以及呢

01:03:44.220 --> 01:03:45.220
这些对主见的

01:03:45.220 --> 01:03:46.220
认识呢

01:03:46.220 --> 01:03:47.220
也更加深入了

01:03:47.220 --> 01:03:48.220
更加熟悉了

01:03:48.220 --> 01:03:49.220
一定要把它去做一遍

01:03:49.220 --> 01:03:52.220
我们之所以去做这么多的demo教程

01:03:52.220 --> 01:03:54.220
做这些这么一些练习

01:03:54.220 --> 01:03:56.220
是因为就是让大家

01:03:56.220 --> 01:03:58.220
不但要能够听得懂知识点

01:03:58.220 --> 01:03:59.220
还要能够把它学会

01:03:59.220 --> 01:04:01.220
掌握成自己的东西

01:04:01.220 --> 01:04:02.220
这才是重点

01:04:02.220 --> 01:04:03.220
老师讲了多少

01:04:03.220 --> 01:04:05.220
还真没有那么的重要

01:04:05.220 --> 01:04:07.220
最重要的是你要吸收多少

01:04:07.220 --> 01:04:09.220
你要能够自己掌握多少

01:04:09.220 --> 01:04:11.220
所以说你自己一定要去练习

01:04:11.220 --> 01:04:12.220
掌握学会

01:04:12.220 --> 01:04:14.220
开发一定要重拾练习

01:04:14.220 --> 01:04:17.220
不要光去听老师讲

01:04:17.220 --> 01:04:19.220
这样子没什么多大的意义的

01:04:19.220 --> 01:04:21.220
下来把它做一遍

