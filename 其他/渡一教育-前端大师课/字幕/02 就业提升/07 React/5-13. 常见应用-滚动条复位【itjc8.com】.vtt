WEBVTT

00:00.560 --> 00:04.560
这些可能我们讲一讲那个滚动条问题

00:04.560 --> 00:06.560
什么叫滚动条问题呢

00:06.560 --> 00:12.560
这个东西应该是单页应用程序的一个通病吧

00:12.560 --> 00:16.560
就所有的单页应用程序都会遇到这个样的问题

00:16.560 --> 00:18.560
就是因为单页应用程序只有一个页面

00:18.560 --> 00:20.560
它不会真正的调转页面

00:20.560 --> 00:22.560
它只是切换组件而已

00:22.560 --> 00:25.560
所以说瀏覽器它根本不知道页面变化了

00:25.560 --> 00:29.560
因此它滚动条不会恢复到顶部

00:29.560 --> 00:32.560
恢复到最顶部的位置

00:32.560 --> 00:34.560
那么就会遇到滚动条问题

00:34.560 --> 00:36.560
那怎么来解决这个问题呢

00:36.560 --> 00:37.560
我们首先看一下这个问题啊

00:37.560 --> 00:38.560
它发生的情况

00:38.560 --> 00:41.560
我们这里写简单的写些代码

00:41.560 --> 00:44.560
比方说这里我们写上一个配级1

00:44.560 --> 00:46.560
然后这个配级1里边呢

00:46.560 --> 00:49.560
我们给它一个DIV码

00:49.560 --> 00:51.560
给它个DIV内样式为配级

00:51.560 --> 00:54.560
然后再给一个内样式为配级1

00:54.560 --> 00:56.560
两个内样式

00:56.560 --> 00:58.560
然后它这里边内容很多

00:58.560 --> 00:59.560
非常非常多

00:59.560 --> 01:02.560
比方说2000个字符

01:02.560 --> 01:04.560
这是配级1复制一下

01:04.560 --> 01:06.560
这是配级2

01:06.560 --> 01:09.560
那么这里内样式为配级2

01:09.560 --> 01:10.560
为了看到效果

01:10.560 --> 01:11.560
我们这里呢

01:11.560 --> 01:14.560
在这里建立一个app.css

01:14.560 --> 01:16.560
大概写一下样式

01:16.560 --> 01:17.560
我有和

01:17.560 --> 01:18.560
折叠起来

01:18.560 --> 01:20.560
不折叠起来的文字太多了

01:20.560 --> 01:23.560
import

01:23.560 --> 01:26.560
导入这个app.css

01:26.560 --> 01:28.560
折叠起来

01:28.560 --> 01:30.560
不要导弯

01:30.560 --> 01:32.560
然后这里边的app里边

01:32.560 --> 01:34.560
我们这样子吧

01:34.560 --> 01:36.560
再导入一个字码

01:36.560 --> 01:38.560
就是regg是rotor里边的东西

01:38.560 --> 01:40.560
regg是rotor-dom

01:40.560 --> 01:42.560
来写这么一个路由吧

01:42.560 --> 01:44.560
首先是browser-rotor

01:44.560 --> 01:45.560
而是rotor

01:45.560 --> 01:47.560
然后road

01:47.560 --> 01:48.560
还有link

01:48.560 --> 01:49.560
都该写上

01:49.560 --> 01:51.560
好 咱们来啊

01:51.560 --> 01:52.560
首先这个app里边

01:52.560 --> 01:54.560
那外面套一个什么呢

01:54.560 --> 01:56.560
browser-rotor

01:56.560 --> 01:58.560
套这么一个东西

02:00.560 --> 02:02.560
名字应该叫做rotor的吧

02:04.560 --> 02:06.560
rotor

02:06.560 --> 02:07.560
套一个rotor

02:07.560 --> 02:09.560
然后里边有两个路由

02:09.560 --> 02:12.560
一个是rotor-pass

02:12.560 --> 02:14.560
当我们访问配级1的时候

02:14.560 --> 02:16.560
访问配级1的时候

02:16.560 --> 02:18.560
然后使用component

02:18.560 --> 02:19.560
component

02:19.560 --> 02:20.560
为什么呢

02:20.560 --> 02:22.560
为配级1

02:22.560 --> 02:23.560
下面的呢

02:23.560 --> 02:24.560
为配级2

02:24.560 --> 02:26.560
配级2

02:26.560 --> 02:28.560
保存啊 咱们来看一下吧

02:28.560 --> 02:30.560
那种很多对吧

02:30.560 --> 02:32.560
你看这边是不是有滚动条

02:32.560 --> 02:34.560
我们放小一点啊

02:34.560 --> 02:36.560
看右边啊 右边是不是出现滚动条

02:36.560 --> 02:38.560
能看见吗

02:38.560 --> 02:40.560
是不是出现滚动条

02:40.560 --> 02:41.560
咱们给这两个页面的

02:41.560 --> 02:42.560
稍微写一下

02:42.560 --> 02:44.560
大概写一下样式

02:44.560 --> 02:45.560
大概写一下

02:45.560 --> 02:48.560
我们再套一个div嘛

02:48.560 --> 02:49.560
一会再说吧

02:49.560 --> 02:50.560
一会再说

02:50.560 --> 02:51.560
好 这么呢

02:51.560 --> 02:53.560
我们给这两个页面写个样式

02:53.560 --> 02:54.560
首先配级这个样式

02:54.560 --> 02:55.560
就两个页面通用的样式呢

02:55.560 --> 02:56.560
给它个宽度

02:56.560 --> 02:58.560
比方说是

02:58.560 --> 03:00.560
600个相处嘛

03:00.560 --> 03:01.560
600个相处

03:01.560 --> 03:02.560
然后呢

03:02.560 --> 03:04.560
设置一个边框

03:04.560 --> 03:05.560
border 两个相处

03:05.560 --> 03:06.560
solid

03:06.560 --> 03:08.560
然后设置 margin 0 out

03:08.560 --> 03:09.560
保存啊

03:09.560 --> 03:10.560
大概在这儿

03:10.560 --> 03:11.560
中间这个位置对吧

03:11.560 --> 03:12.560
把页面

03:12.560 --> 03:13.560
稍微恢复到原始大小

03:13.560 --> 03:14.560
你看

03:14.560 --> 03:15.560
是不是这样子

03:15.560 --> 03:16.560
对吧

03:16.560 --> 03:17.560
这是页面1

03:17.560 --> 03:18.560
再给它一个背景颜色

03:18.560 --> 03:19.560
给它一个特殊的背景

03:19.560 --> 03:20.560
这样子呢

03:20.560 --> 03:21.560
我们看得更加清楚一点

03:21.560 --> 03:22.560
bidground呢

03:22.560 --> 03:23.560
给它是一个net blue

03:23.560 --> 03:25.560
亮蓝色

03:25.560 --> 03:27.560
这是目前看到的

03:27.560 --> 03:28.560
是页面2

03:28.560 --> 03:29.560
这是页面1

03:29.560 --> 03:30.560
对吧 等问题吧

03:30.560 --> 03:32.560
好 那么我们再给页面2

03:32.560 --> 03:33.560
设置一个背景

03:33.560 --> 03:35.560
页面2的背景呢

03:35.560 --> 03:36.560
为亮绿色

03:36.560 --> 03:41.560
net green

03:41.560 --> 03:42.560
亮绿色

03:42.560 --> 03:43.560
我们切换到页面2

03:43.560 --> 03:44.560
你看一下

03:44.560 --> 03:45.560
什么亮绿色

03:45.560 --> 03:46.560
对吧

03:47.560 --> 03:48.560
然后呢

03:48.560 --> 03:49.560
我们给它加一个目录

03:49.560 --> 03:50.560
加一个目录

03:50.560 --> 03:51.560
这里呢

03:51.560 --> 03:54.560
我们写上一个div

03:54.560 --> 03:56.560
div就div

03:56.560 --> 03:57.560
给它加上两个link

03:57.560 --> 03:58.560
第一个link呢

03:58.560 --> 03:59.560
是

04:01.560 --> 04:02.560
到页面1

04:02.560 --> 04:03.560
页面1

04:03.560 --> 04:04.560
然后2

04:05.560 --> 04:06.560
配起1

04:07.560 --> 04:08.560
然后呢

04:08.560 --> 04:09.560
第二个呢

04:09.560 --> 04:10.560
是页面2

04:10.560 --> 04:11.560
2配起2

04:11.560 --> 04:12.560
写上两个div

04:12.560 --> 04:13.560
这两个div

04:13.560 --> 04:14.560
目前肯定在下面

04:14.560 --> 04:15.560
对不对

04:16.560 --> 04:17.560
这样子

04:17.560 --> 04:18.560
看一下

04:18.560 --> 04:19.560
说在这 对吧

04:19.560 --> 04:20.560
稍微设置一下样式

04:20.560 --> 04:21.560
稍微设置一下样式

04:21.560 --> 04:22.560
就这一块呢

04:22.560 --> 04:24.560
我们给它一个就是class

04:24.560 --> 04:25.560
叫做nev

04:25.560 --> 04:26.560
导航

04:26.560 --> 04:27.560
导航

04:27.560 --> 04:28.560
这边能不能稍微设置一下

04:28.560 --> 04:29.560
nev

04:29.560 --> 04:30.560
这个div呢

04:30.560 --> 04:32.560
我们把它设置为固定定位

04:32.560 --> 04:33.560
fixed

04:33.560 --> 04:34.560
然后呢

04:34.560 --> 04:35.560
nev设为0

04:35.560 --> 04:36.560
然后呢

04:36.560 --> 04:37.560
top 50%

04:37.560 --> 04:38.560
矩中

04:38.560 --> 04:39.560
垂直矩中

04:39.560 --> 04:40.560
transform

04:40.560 --> 04:41.560
这东西没啥

04:41.560 --> 04:42.560
不要问我

04:42.560 --> 04:43.560
你不要吓我

04:43.560 --> 04:44.560
千万不要吓我

04:45.560 --> 04:46.560
保存

04:46.560 --> 04:47.560
是不是在招了

04:47.560 --> 04:48.560
对吧

04:48.560 --> 04:49.560
给它一个背景颜色

04:49.560 --> 04:51.560
给它个背景颜色

04:51.560 --> 04:52.560
白光

04:54.560 --> 04:55.560
088C

04:56.560 --> 04:57.560
字体颜色呢

04:57.560 --> 04:58.560
为白色

04:58.560 --> 04:59.560
然后呢

04:59.560 --> 05:00.560
保存

05:00.560 --> 05:01.560
看一下

05:01.560 --> 05:02.560
没问题

05:02.560 --> 05:03.560
没问题

05:03.560 --> 05:04.560
然后呢

05:04.560 --> 05:05.560
给它个panel

05:05.560 --> 05:06.560
稍微设置一下

05:06.560 --> 05:07.560
大概设置一下

05:07.560 --> 05:08.560
它里边的A元素

05:08.560 --> 05:09.560
也设置一下

05:09.560 --> 05:10.560
颜色呢

05:10.560 --> 05:11.560
就继承副元素

05:11.560 --> 05:13.560
继承副元素的颜色

05:13.560 --> 05:14.560
保存

05:14.560 --> 05:15.560
变成白色了

05:15.560 --> 05:16.560
然后把它变成快核

05:16.560 --> 05:17.560
display block

05:17.560 --> 05:19.560
变成快核

05:19.560 --> 05:20.560
然后呢

05:20.560 --> 05:21.560
设置一下margin

05:21.560 --> 05:23.560
margin

05:23.560 --> 05:25.560
上下的话为

05:25.560 --> 05:26.560
20个相处

05:26.560 --> 05:27.560
左右为0

05:28.560 --> 05:29.560
差不多了

05:29.560 --> 05:31.560
再设置一下tags

05:31.560 --> 05:32.560
decoration

05:32.560 --> 05:33.560
微浪

05:33.560 --> 05:34.560
字体大小

05:34.560 --> 05:35.560
再设置一下

05:36.560 --> 05:37.560
好

05:37.560 --> 05:38.560
来看一下

05:38.560 --> 05:39.560
你看

05:39.560 --> 05:40.560
这里是不是可以改变页面

05:40.560 --> 05:41.560
接下来我们注意看

05:41.560 --> 05:43.560
当我们改变页面的时候

05:43.560 --> 05:44.560
改变页面的时候

05:44.560 --> 05:45.560
你看一下

05:45.560 --> 05:47.560
滚动条有没有发生变化

05:47.560 --> 05:48.560
没有

05:48.560 --> 05:49.560
对吧

05:49.560 --> 05:50.560
但这样子呢

05:50.560 --> 05:52.560
是不是不符合我们目前的习惯

05:52.560 --> 05:53.560
我们再给它加上那个吧

05:53.560 --> 05:55.560
它不是还有一个lamblink

05:55.560 --> 05:56.560
对不对

05:56.560 --> 05:57.560
我们使用lamblink得了

05:57.560 --> 05:58.560
lamblink

05:58.560 --> 06:00.560
使用这个得了

06:00.560 --> 06:02.560
使用这个

06:02.560 --> 06:03.560
好

06:03.560 --> 06:04.560
这个的话

06:04.560 --> 06:07.000
我们给它加上一个agative

06:07.000 --> 06:08.000
agative

06:08.000 --> 06:09.000
然后呢

06:09.000 --> 06:10.000
加上个color

06:10.000 --> 06:11.000
yellow

06:12.000 --> 06:13.000
yellow green

06:13.000 --> 06:14.000
这是啥颜色

06:15.000 --> 06:17.000
加上个yellow

06:17.000 --> 06:18.000
黄色

06:18.000 --> 06:19.000
好

06:19.000 --> 06:20.000
你看一下

06:20.000 --> 06:21.000
这个切换页面过后

06:21.000 --> 06:22.000
你看一下

06:22.000 --> 06:23.000
页面倒是在切换

06:23.000 --> 06:24.000
但是由于

06:24.000 --> 06:26.000
实际真实的页面没有变化

06:26.000 --> 06:28.000
始终是同一个页面

06:28.000 --> 06:30.000
这里只是利用history API

06:30.000 --> 06:31.000
改变了地址

06:31.000 --> 06:32.000
所以说它组建变化了

06:32.000 --> 06:34.000
但是页面的滚动条没有还原

06:34.000 --> 06:35.000
对吧

06:35.000 --> 06:36.000
是这么一个问题

06:36.000 --> 06:37.000
说这个问题

06:37.000 --> 06:38.000
我们这里可来解决

06:38.000 --> 06:39.000
要解决这个问题的话

06:39.000 --> 06:41.000
实际上有很多很多的方式

06:41.000 --> 06:42.000
怎么呢

06:43.000 --> 06:44.000
看一下

06:44.000 --> 06:45.000
哪一方式呢

06:45.000 --> 06:46.000
就是滚动条问题

06:48.000 --> 06:49.000
滚动条

06:49.000 --> 06:50.000
复位

06:50.000 --> 06:51.000
复位的方式

06:51.000 --> 06:52.000
有三种

06:52.000 --> 06:54.000
一般来说有三种处理方式

06:54.000 --> 06:55.000
一种一个个说

06:55.000 --> 06:57.000
第一种处理方式是

06:59.000 --> 07:00.000
使用高接组件

07:00.000 --> 07:01.000
高接组件

07:01.000 --> 07:02.000
来搞定

07:02.000 --> 07:03.000
也就是说

07:03.000 --> 07:04.000
说什么意思呢

07:04.000 --> 07:05.000
就是说

07:05.000 --> 07:06.000
我们这些页面

07:06.000 --> 07:07.000
这里不是页面吗

07:07.000 --> 07:08.000
对吧

07:08.000 --> 07:09.000
页面封装一下

07:09.000 --> 07:10.000
用一个高接组件

07:10.000 --> 07:11.000
封装一下

07:11.000 --> 07:13.000
然后用高接组件

07:13.000 --> 07:16.000
把它复位到一开始的位置

07:16.000 --> 07:18.000
这是非常好理解的一种方式

07:18.000 --> 07:19.000
好

07:19.000 --> 07:20.000
咱们来试一下吧

07:20.000 --> 07:21.000
比方说

07:21.000 --> 07:22.000
我们这里

07:22.000 --> 07:23.000
新建个文件

07:23.000 --> 07:24.000
给它取个名字叫做Waze

07:24.000 --> 07:26.000
高接组件一般都是有Waze开头

07:26.000 --> 07:28.000
Waze scroll

07:29.000 --> 07:30.000
top

07:30.000 --> 07:31.000
调解式

07:31.000 --> 07:32.000
高接组件

07:32.000 --> 07:34.000
它自然而然是一个函数

07:34.000 --> 07:35.000
是一个函数

07:35.000 --> 07:37.000
然后我们这里倒出一个函数

07:38.000 --> 07:39.000
default

07:39.000 --> 07:40.000
倒出一个函数

07:40.000 --> 07:43.000
这个函数叫做Waze scroll top

07:44.000 --> 07:46.000
把它复位到就是最顶点

07:46.000 --> 07:48.000
把它复位到最顶点

07:48.000 --> 07:50.000
那么这个函数里边

07:50.000 --> 07:51.000
我们要给我传一个什么呢

07:51.000 --> 07:53.000
要给我传一个组件进来

07:53.000 --> 07:55.000
给我传一个组件进来

07:55.000 --> 07:57.000
我给你返回一个什么呢

07:57.000 --> 07:58.000
返回一个组件

07:58.000 --> 07:59.000
返回一个组件

07:59.000 --> 08:00.000
这个组件的名字

08:00.000 --> 08:01.000
我要取个名字

08:01.000 --> 08:02.000
叫做

08:02.000 --> 08:05.000
scroll top wiper

08:05.000 --> 08:07.000
这一般就是高接组件的命名方式

08:07.000 --> 08:08.000
把位置去掉

08:08.000 --> 08:09.000
手这么大些

08:10.000 --> 08:11.000
后边加上一个wiper

08:12.000 --> 08:13.000
一个是天子

08:13.000 --> 08:14.000
这里要倒入

08:14.000 --> 08:15.000
倒入什么呢

08:15.000 --> 08:16.000
倒入react

08:16.000 --> 08:18.000
叫component

08:18.000 --> 08:19.000
倒入这个

08:19.000 --> 08:20.000
这里呢

08:21.000 --> 08:22.000
看一下

08:22.000 --> 08:23.000
修复

08:23.000 --> 08:24.000
还不行

08:24.000 --> 08:25.000
必须要在这里写

08:25.000 --> 08:26.000
react

08:26.000 --> 08:27.000
from

08:27.000 --> 08:28.000
react

08:29.000 --> 08:31.000
那么在这个内组件里边

08:31.000 --> 08:32.000
我们最终肯定是渲染的时候

08:32.000 --> 08:33.000
肯定是没有任何

08:33.000 --> 08:34.000
没有任何说的

08:34.000 --> 08:35.000
渲染啥

08:35.000 --> 08:36.000
渲染comp

08:36.000 --> 08:37.000
渲染这个东西

08:37.000 --> 08:38.000
并且

08:38.000 --> 08:40.000
把probs传进去

08:40.000 --> 08:42.000
把我们这个组件里边的probs

08:42.000 --> 08:44.000
传到我这个组件里边的probs

08:44.000 --> 08:45.000
给你传过去

08:45.000 --> 08:46.000
这个没什么好说的

08:46.000 --> 08:47.000
那么关键是

08:47.000 --> 08:49.000
我们要回到顶部

08:49.000 --> 08:50.000
非常非常简单

08:50.000 --> 08:51.000
那怎么办呢

08:51.000 --> 08:53.000
我们只需要

08:53.000 --> 08:54.000
在这个组件

08:54.000 --> 08:55.000
返回的这个组件里边

08:55.000 --> 08:56.000
它不是一个生命周期函数吗

08:56.000 --> 08:57.000
什么生命周期函数

08:57.000 --> 08:59.000
component d-mount

08:59.000 --> 09:01.000
当它首次渲染的时候

09:01.000 --> 09:02.000
首次加载的时候

09:02.000 --> 09:04.000
它要运行这个生命周期函数

09:04.000 --> 09:05.000
那么这个生命周期函数里边

09:05.000 --> 09:06.000
我们是不是就可以把

09:06.000 --> 09:07.000
滚动条复原了

09:07.000 --> 09:08.000
怎么复原

09:08.000 --> 09:09.000
我们就可以利用window点

09:09.000 --> 09:10.000
什么scroll

09:10.000 --> 09:11.000
因为最简单的方式

09:11.000 --> 09:12.000
scroll2

09:12.000 --> 09:13.000
对吧

09:13.000 --> 09:14.000
0

09:14.000 --> 09:15.000
0

09:15.000 --> 09:16.000
对吧

09:16.000 --> 09:17.000
橫向复位到0

09:17.000 --> 09:18.000
纵向复位到0

09:18.000 --> 09:20.000
设置什么

09:20.000 --> 09:21.000
scroll top

09:21.000 --> 09:22.000
scroll left

09:22.000 --> 09:23.000
scroll top

09:23.000 --> 09:24.000
对吧

09:24.000 --> 09:25.000
设置这两个

09:25.000 --> 09:26.000
把复位到0就行了

09:26.000 --> 09:27.000
保存你看一下吧

09:27.000 --> 09:28.000
那么现在呢

09:28.000 --> 09:29.000
我们在这边

09:29.000 --> 09:30.000
怎么来用呢

09:30.000 --> 09:31.000
我们来包装一下

09:31.000 --> 09:32.000
包装一下

09:33.000 --> 09:35.000
写一个就是

09:35.000 --> 09:36.000
组件

09:36.000 --> 09:37.000
写个组件名字叫做

09:37.000 --> 09:38.000
那个

09:39.000 --> 09:41.000
page with

09:41.000 --> 09:43.000
withscroll

09:44.000 --> 09:45.000
好

09:45.000 --> 09:46.000
page1

09:46.000 --> 09:47.000
或者这个名字

09:47.000 --> 09:48.000
换成scroll

09:48.000 --> 09:49.000
也不用scroll top的

09:49.000 --> 09:50.000
就scroll

09:51.000 --> 09:52.000
withscroll

09:53.000 --> 09:54.000
那么这里面呢

09:54.000 --> 09:55.000
换一个名字

09:55.000 --> 09:56.000
withscroll

09:58.000 --> 09:59.000
就这样写

09:59.000 --> 10:00.000
好

10:00.000 --> 10:01.000
名字

10:01.000 --> 10:03.000
因为它很像也要复原

10:03.000 --> 10:05.000
导入这个

10:05.000 --> 10:06.000
写杠

10:07.000 --> 10:08.000
scroll

10:08.000 --> 10:09.000
withscroll

10:11.000 --> 10:12.000
那么这里呢

10:12.000 --> 10:13.000
我们就使用withscroll

10:13.000 --> 10:14.000
把page1包装一下

10:14.000 --> 10:15.000
page1包装一下

10:15.000 --> 10:16.000
于是呢

10:16.000 --> 10:17.000
它就会在page1外面

10:17.000 --> 10:18.000
套一个组件

10:18.000 --> 10:19.000
套什么组件呢

10:19.000 --> 10:20.000
就套这个组件

10:20.000 --> 10:21.000
那么这个组件

10:21.000 --> 10:22.000
它一个作用就是

10:22.000 --> 10:23.000
当它夹在的时候

10:23.000 --> 10:24.000
它把它复位到这个位置

10:24.000 --> 10:25.000
就完事了

10:25.000 --> 10:26.000
所以说这里

10:26.000 --> 10:27.000
实际上这种做法

10:27.000 --> 10:28.000
是非常非常简单

10:28.000 --> 10:29.000
也容易理解的

10:30.000 --> 10:31.000
那么下面一个呢

10:31.000 --> 10:32.000
就是page2

10:33.000 --> 10:34.000
page2

10:35.000 --> 10:36.000
withscroll

10:37.000 --> 10:38.000
这种方式

10:38.000 --> 10:39.000
保存看一下吧

10:39.000 --> 10:40.000
看一下

10:41.000 --> 10:42.000
点击

10:42.000 --> 10:43.000
现在滑动

10:43.000 --> 10:44.000
你看滚动条

10:44.000 --> 10:45.000
滚动条

10:45.000 --> 10:46.000
点击页面2

10:46.000 --> 10:47.000
你看是不是回到顶部了

10:47.000 --> 10:48.000
滑动

10:48.000 --> 10:49.000
点击页面1

10:49.000 --> 10:50.000
你看是不是回到顶部了

10:50.000 --> 10:52.000
就这么简单的方式

10:53.000 --> 10:54.000
那如果说

10:54.000 --> 10:55.000
你要用一种

10:55.000 --> 10:56.000
动画的方式

10:56.000 --> 10:57.000
来进行复位的话

10:57.000 --> 10:58.000
那怎么办

10:58.000 --> 10:59.000
那自己写呗

11:00.000 --> 11:01.000
复位滚动条

11:01.000 --> 11:02.000
这个动画

11:02.000 --> 11:03.000
很复杂吗

11:04.000 --> 11:05.000
很复杂吗

11:05.000 --> 11:06.000
不复杂吧

11:06.000 --> 11:07.000
不复杂

11:07.000 --> 11:08.000
我们这里是写上

11:08.000 --> 11:09.000
写上新线跟文件

11:09.000 --> 11:10.000
表示

11:11.000 --> 11:12.000
reset

11:12.000 --> 11:13.000
scroll

11:13.000 --> 11:14.000
叫解释

11:14.000 --> 11:15.000
就是复位滚动条

11:15.000 --> 11:16.000
这里边

11:16.000 --> 11:17.000
提供一个

11:17.000 --> 11:18.000
就是一个

11:18.000 --> 11:19.000
非常实用的函数

11:19.000 --> 11:20.000
来复位滚动条

11:21.000 --> 11:22.000
咱们来写的那个函数

11:22.000 --> 11:23.000
export

11:23.000 --> 11:24.000
default

11:24.000 --> 11:25.000
导入这个函数

11:25.000 --> 11:26.000
就是方形

11:27.000 --> 11:28.000
reset

11:28.000 --> 11:29.000
scroll

11:29.000 --> 11:30.000
这么一个函数

11:30.000 --> 11:31.000
它复位滚动条

11:31.000 --> 11:33.000
把横向复位到0

11:33.000 --> 11:34.000
当然横向我这里

11:34.000 --> 11:35.000
也没有控制对吧

11:35.000 --> 11:36.000
也没有去控制横向

11:37.000 --> 11:39.000
要不然控制一下横向吧

11:39.000 --> 11:40.000
行吧

11:40.000 --> 11:41.000
咱们来控制一下横向

11:41.000 --> 11:42.000
在CSS里边

11:42.000 --> 11:44.000
可以变成测试嘛

11:44.000 --> 11:46.000
这里写成1600

11:46.000 --> 11:47.000
不就有横向了吗

11:47.000 --> 11:48.000
对不对

11:48.000 --> 11:49.000
横向滚动条了

11:49.000 --> 11:50.000
你看是不是横向了

11:50.000 --> 11:51.000
对吧

11:51.000 --> 11:52.000
一面你看是不是也要

11:52.000 --> 11:53.000
复位

11:53.000 --> 11:54.000
不要复位

11:54.000 --> 11:55.000
横向要复位

11:55.000 --> 11:56.000
中上也要复位

11:56.000 --> 11:57.000
好那么这里

11:57.000 --> 11:58.000
scroll

11:58.000 --> 12:00.000
就是横向和中向复位

12:00.000 --> 12:01.000
滚动条

12:01.000 --> 12:04.000
横向和中向

12:04.000 --> 12:06.000
动态复位

12:06.000 --> 12:08.000
就是动画复位

12:08.000 --> 12:10.000
一个过渡的效果

12:10.000 --> 12:12.000
好那其实这里

12:12.000 --> 12:14.000
就是把滚动条当前的

12:14.000 --> 12:16.000
直逐渐变到0

12:16.000 --> 12:17.000
对不对

12:17.000 --> 12:18.000
就这么简单

12:18.000 --> 12:19.000
把滚动条当前的

12:19.000 --> 12:21.000
直逐渐变到0

12:21.000 --> 12:22.000
那么这里

12:22.000 --> 12:23.000
我们需要一个辅助函数

12:23.000 --> 12:25.000
就是把一个直

12:25.000 --> 12:27.000
逐渐变到另一个值

12:27.000 --> 12:28.000
它就要经过一段

12:28.000 --> 12:30.000
一段时间的过程对不对

12:30.000 --> 12:32.000
要经过一段时间的过程

12:32.000 --> 12:33.000
当然这个函数你要写好的话

12:33.000 --> 12:35.000
肯定还要收到什么

12:35.000 --> 12:36.000
一些参数

12:36.000 --> 12:37.000
变化的时间

12:37.000 --> 12:39.000
比方说一秒钟之内完成变化

12:39.000 --> 12:40.000
等等的一些参数

12:40.000 --> 12:42.000
那我这里不管那么多了

12:42.000 --> 12:44.000
我就直接把写使得了

12:45.000 --> 12:46.000
直接写使得了

12:47.000 --> 12:49.000
那么现在我们需要一个辅助函数

12:49.000 --> 12:51.000
这个辅助函数就是

12:51.000 --> 12:53.000
animate

12:53.000 --> 12:55.000
你给我传一个初始值

12:55.000 --> 12:57.000
你给我传一个初始值

12:57.000 --> 13:00.000
然后你给我传一个结束值

13:01.000 --> 13:03.000
我来在一段时间内

13:03.000 --> 13:05.000
给你从初始值变化到结束值

13:05.000 --> 13:07.000
我就直接写使了

13:08.000 --> 13:10.000
在多少呢

13:10.000 --> 13:11.000
为了看清楚

13:11.000 --> 13:13.000
在一秒钟之内

13:13.000 --> 13:20.000
从指定的初始值变化到结束值

13:21.000 --> 13:23.000
变化到结束值

13:23.000 --> 13:25.000
从指定的初始值变化到结束值

13:25.000 --> 13:27.000
在一秒钟之内完成变化

13:28.000 --> 13:31.000
那么这个函数里面怎么写呢

13:31.000 --> 13:33.000
这些东西跟那个regs

13:33.000 --> 13:34.000
就没有什么关系了

13:34.000 --> 13:36.000
你自己去搞定的事情了

13:36.000 --> 13:38.000
咱们就可以计算出

13:38.000 --> 13:41.000
比方说每隔16毫秒

13:41.000 --> 13:43.000
每隔16毫秒

13:43.000 --> 13:46.000
每隔16毫秒

13:46.000 --> 13:48.000
完成

13:48.000 --> 13:50.000
完成一次变化

13:50.000 --> 13:52.000
这个东西我们肯定要设置一下吧

13:52.000 --> 13:54.000
因为以后我们肯定要设置interval

13:54.000 --> 13:56.000
这次interval跑不了了

13:56.000 --> 13:57.000
肯定要设置这个东西

13:57.000 --> 13:58.000
这次interval

13:58.000 --> 13:59.000
tick

13:59.000 --> 14:01.000
每隔16毫秒去变化一次

14:01.000 --> 14:03.000
那么有知道这个条件之后

14:03.000 --> 14:05.000
我们是不是可以算出

14:05.000 --> 14:06.000
总时间

14:06.000 --> 14:07.000
总时间是多少

14:07.000 --> 14:09.000
是不是一秒钟

14:09.000 --> 14:12.000
总时间为1000毫秒

14:12.000 --> 14:13.000
就是一秒钟

14:13.000 --> 14:14.000
因为函数说了

14:14.000 --> 14:16.000
在一秒钟之内完成变化

14:16.000 --> 14:17.000
然后呢

14:17.000 --> 14:19.000
我们知道每隔16毫秒完成一次变化

14:19.000 --> 14:20.000
知道这个总时间

14:20.000 --> 14:22.000
是不是可以算出变化的次数

14:22.000 --> 14:24.000
Time是变化的次数为多少

14:24.000 --> 14:26.000
变化的次数为多少呢

14:26.000 --> 14:28.000
为多少呢

14:28.000 --> 14:30.000
变化的次数的话就是

14:30.000 --> 14:33.000
变化的次数

14:33.000 --> 14:35.000
就是

14:35.000 --> 14:37.000
total

14:37.000 --> 14:38.000
tick

14:38.000 --> 14:39.000
变化的次数

14:39.000 --> 14:40.000
但是呢

14:40.000 --> 14:41.000
这样子算出来的次数

14:41.000 --> 14:42.000
有可能是小数

14:42.000 --> 14:44.000
比方说算出来3.5次

14:44.000 --> 14:46.000
可能算出来是有小数的

14:46.000 --> 14:47.000
那肯定不行啊

14:47.000 --> 14:49.000
那3.5次得算4次吧

14:49.000 --> 14:51.000
4.5次得算5次吧

14:51.000 --> 14:53.000
是不是跟它向上取整

14:53.000 --> 14:55.000
如果你经常来听我的

14:55.000 --> 14:56.000
公开直播课的话

14:56.000 --> 14:57.000
这些东西对的来说

14:57.000 --> 14:58.000
根本就不成问题

14:58.000 --> 14:59.000
根本就不成问题

14:59.000 --> 15:01.000
这是变化的次数

15:01.000 --> 15:02.000
变化的次数

15:02.000 --> 15:03.000
然后呢

15:03.000 --> 15:04.000
再来算出什么呢

15:04.000 --> 15:06.000
再来算出那个

15:06.000 --> 15:08.000
当前的次数

15:08.000 --> 15:09.000
当前的次数

15:09.000 --> 15:10.000
一开始为0

15:10.000 --> 15:11.000
每变化一次加1

15:11.000 --> 15:13.000
那么set to interval

15:13.000 --> 15:14.000
是不是可以设置的

15:14.000 --> 15:15.000
可 times 加加

15:15.000 --> 15:16.000
对不对

15:16.000 --> 15:17.000
可 times 加加

15:17.000 --> 15:20.000
每变化一次就加1

15:20.000 --> 15:22.000
如果发现可 times 等于了

15:22.000 --> 15:24.000
什么 times 对吧

15:24.000 --> 15:26.000
如果发现了这一点的话

15:26.000 --> 15:27.000
那么如果是次数

15:27.000 --> 15:28.000
到达结

15:28.000 --> 15:30.000
到达就是目标的话

15:30.000 --> 15:31.000
怎么办

15:31.000 --> 15:32.000
如果说次数到达目标

15:32.000 --> 15:34.000
那是不是就停止了

15:34.000 --> 15:35.000
clear interval

15:35.000 --> 15:38.000
那是不是要谈判记录一下

15:38.000 --> 15:41.950
谈判记录一下

15:41.950 --> 15:43.950
那么到达次数就停止

15:43.950 --> 15:44.950
就这么简单

15:44.950 --> 15:45.950
非常非常简单

15:45.950 --> 15:46.950
这个东西

15:47.950 --> 15:50.950
其实 time 也可以让它传进来

15:50.950 --> 15:51.950
也可以让它传进来

15:51.950 --> 15:53.950
time 因为

15:53.950 --> 15:55.950
无论是切换到哪个页面

15:55.950 --> 15:57.950
它的 time 都是有一个

15:57.950 --> 15:58.950
先不喘吧

15:58.950 --> 15:59.950
免得有些东西理解不了

15:59.950 --> 16:01.950
那么就清空对吧

16:02.950 --> 16:04.950
现在我们得到一个 start

16:04.950 --> 16:05.950
得到一个 end

16:05.950 --> 16:07.950
我们现在是每一次

16:07.950 --> 16:08.950
每一次运动

16:08.950 --> 16:09.950
每隔一段时间运动一次

16:09.950 --> 16:10.950
对吧

16:10.950 --> 16:11.950
运动一次

16:11.950 --> 16:13.950
那么运动一次过后了

16:13.950 --> 16:15.950
要干嘛呢

16:15.950 --> 16:16.950
运动一次过后要干嘛呢

16:16.950 --> 16:18.950
是不是要把某一个值

16:18.950 --> 16:19.950
加上一段路程

16:19.950 --> 16:20.950
对不对

16:20.950 --> 16:21.950
比如说 start 给大家传的是

16:21.950 --> 16:22.950
20

16:22.950 --> 16:23.950
end 来传的是 0

16:23.950 --> 16:25.950
那么 start 是不是要加上一段

16:25.950 --> 16:26.950
-1,-2

16:26.950 --> 16:27.950
对吧 要加上一段路程

16:27.950 --> 16:30.950
那么每运动一次加多少呢

16:30.950 --> 16:32.950
就是距离

16:32.950 --> 16:33.950
每次运动的距离

16:33.950 --> 16:35.950
从这个值运动到这个值

16:35.950 --> 16:37.950
那么每一次运动的距离是多少

16:37.950 --> 16:38.950
是多少呢

16:38.950 --> 16:40.950
每次运动的距离

16:40.950 --> 16:41.950
距离是多少

16:41.950 --> 16:45.950
是不是就是 end 减去 start

16:45.950 --> 16:46.950
就是种的距离

16:46.950 --> 16:47.950
对吧

16:47.950 --> 16:48.950
处于什么

16:48.950 --> 16:49.950
处于次数

16:49.950 --> 16:50.950
对吧

16:50.950 --> 16:52.950
种距离

16:52.950 --> 16:53.950
处于次数

16:53.950 --> 16:56.950
就是每次运动的距离

16:56.950 --> 16:57.950
每次运动的距离

16:57.950 --> 16:58.950
就完了对不对

16:58.950 --> 16:59.950
就完了

16:59.950 --> 17:00.950
好 所以说呢

17:00.950 --> 17:02.950
我们这里呢

17:02.950 --> 17:06.950
这里每一次即时期到了的时候

17:06.950 --> 17:07.950
干嘛呢

17:07.950 --> 17:09.950
start 说要加上一段距离

17:09.950 --> 17:10.950
加上一段距离

17:10.950 --> 17:12.950
为了避免小数出现的误差呢

17:12.950 --> 17:14.950
我们最后在最后运动结束的时候

17:14.950 --> 17:15.950
干嘛呢

17:15.950 --> 17:18.950
是要把 start 变成 end

17:18.950 --> 17:19.950
对吧

17:19.950 --> 17:21.950
有可能会出现一些零点几啊

17:21.950 --> 17:22.950
的误差

17:22.950 --> 17:24.950
那么为了避免这个误差

17:24.950 --> 17:25.950
把它变成 end

17:25.950 --> 17:26.950
对吧

17:26.950 --> 17:27.950
次数到到达了

17:27.950 --> 17:28.950
它肯定最重要变成 end

17:28.950 --> 17:29.950
对不对

17:29.950 --> 17:30.950
最重要变成 end

17:30.950 --> 17:31.950
没问题吧

17:31.950 --> 17:32.950
没有问题

17:32.950 --> 17:34.950
好 那么每一次调用

17:34.950 --> 17:36.950
我这里只是改变数据对吧

17:36.950 --> 17:37.950
每一次调用过后

17:37.950 --> 17:38.950
那么这个数据变了

17:38.950 --> 17:39.950
每一次变化数据

17:39.950 --> 17:40.950
是不是要做一些事

17:40.950 --> 17:41.950
比方说设置

17:41.950 --> 17:44.950
比方说设置 scroll left

17:44.950 --> 17:46.950
比方说设置 scroll top

17:46.950 --> 17:47.950
要去设置一下

17:47.950 --> 17:48.950
那这里到底设置啥呢

17:48.950 --> 17:49.950
我也不知道

17:49.950 --> 17:50.950
那怎么办呢

17:50.950 --> 17:51.950
你给我一个回调函数

17:51.950 --> 17:52.950
就是你们现在学到

17:52.950 --> 17:54.950
学到这个 react 的时候呢

17:54.950 --> 17:56.950
像那么回调的那些模式

17:56.950 --> 17:57.950
你要非常非常熟悉

17:57.950 --> 18:00.950
我把这个 start 只传给你

18:00.950 --> 18:01.950
每运动一次

18:01.950 --> 18:02.950
我把这个 start 只传给你

18:02.950 --> 18:03.950
就完成了

18:03.950 --> 18:04.950
你去搞定

18:04.950 --> 18:05.950
我不管了

18:05.950 --> 18:06.950
你去搞定

18:06.950 --> 18:08.950
我把就是每次变化了

18:08.950 --> 18:09.950
变化了一段距离

18:09.950 --> 18:10.950
保存到这里边了

18:10.950 --> 18:12.950
好 我把这个东西传给你

18:12.950 --> 18:13.950
你去搞定

18:13.950 --> 18:14.950
就这么个意思

18:14.950 --> 18:15.950
好 那么这里

18:15.950 --> 18:16.950
reset the scroll

18:16.950 --> 18:17.950
还不简单吗

18:17.950 --> 18:18.950
对不对

18:18.950 --> 18:20.950
animate

18:20.950 --> 18:22.950
animate start 是多少

18:22.950 --> 18:24.950
比方说重项的轰动条

18:24.950 --> 18:26.950
负位 重项的轰动条负位

18:26.950 --> 18:27.950
start 是多少

18:27.950 --> 18:28.950
是多少呢

18:28.950 --> 18:30.950
是不是就是那个

18:30.950 --> 18:32.950
window

18:32.950 --> 18:34.950
scroll

18:34.950 --> 18:35.950
document

18:35.950 --> 18:36.950
document

18:36.950 --> 18:37.950
animate

18:37.950 --> 18:38.950
我们这里直接

18:38.950 --> 18:40.950
把保存起来

18:40.950 --> 18:42.950
atm

18:42.950 --> 18:43.950
atm元素

18:43.950 --> 18:44.950
拿到

18:44.950 --> 18:45.950
然后呢

18:45.950 --> 18:47.950
得到这个 atm元素的什么

18:47.950 --> 18:49.950
scroll

18:49.950 --> 18:50.950
top

18:50.950 --> 18:51.950
当前的scroll top 只

18:51.950 --> 18:52.950
然后呢

18:52.950 --> 18:53.950
要负位到什么了

18:53.950 --> 18:54.950
负位到0

18:54.950 --> 18:55.950
好 每一次运动

18:55.950 --> 18:56.950
做啥事呢

18:56.950 --> 18:57.950
每一次运动

18:57.950 --> 18:58.950
每一次运动

18:58.950 --> 18:59.950
你是不是要给我一个数据

18:59.950 --> 19:00.950
对吧

19:00.950 --> 19:01.950
给我一个数据

19:01.950 --> 19:02.950
那么就是变化的

19:02.950 --> 19:03.950
结果的数据

19:03.950 --> 19:04.950
变化的结果数据

19:05.950 --> 19:06.950
为啥呢

19:07.950 --> 19:08.950
atm

19:08.950 --> 19:09.950
scroll

19:09.950 --> 19:10.950
top

19:10.950 --> 19:11.950
每一次重新设置

19:11.950 --> 19:12.950
scroll top

19:12.950 --> 19:13.950
设置为多少呢

19:13.950 --> 19:14.950
设置为0

19:14.950 --> 19:15.950
设置为1

19:15.950 --> 19:16.950
对吧

19:16.950 --> 19:17.950
设置为1

19:17.950 --> 19:18.950
好 你看下

19:18.950 --> 19:19.950
就这样子写了过后

19:19.950 --> 19:20.950
这个resets

19:20.950 --> 19:21.950
scroll

19:21.950 --> 19:22.950
就已经可以看到效果了

19:22.950 --> 19:24.950
但是我就顺便写了

19:24.950 --> 19:26.950
还有一个nav

19:26.950 --> 19:27.950
这个玩意不是重点

19:27.950 --> 19:28.950
这个玩意看不懂的话

19:28.950 --> 19:29.950
现在慢慢去理

19:29.950 --> 19:30.950
这个不是

19:30.950 --> 19:32.950
这个不是重点

19:32.950 --> 19:33.950
就是写了这么一个寒说

19:33.950 --> 19:34.950
一调用它

19:34.950 --> 19:35.950
它就会复位

19:35.950 --> 19:36.950
就这么个意思

19:36.950 --> 19:38.950
咱们咱们到高点组建里面来

19:38.950 --> 19:39.950
这里就是

19:39.950 --> 19:41.950
调用那个寒说就完事了

19:41.950 --> 19:43.950
调用那个寒说就完事了

19:43.950 --> 19:44.950
resets

19:46.950 --> 19:47.950
resets

19:47.950 --> 19:52.970
调用这个寒说resets

19:52.970 --> 19:53.970
保存

19:53.970 --> 19:54.970
看一下吧

19:54.970 --> 19:55.970
现在滑动

19:55.970 --> 19:56.970
滚动出来到底

19:56.970 --> 19:57.970
到一面二

19:57.970 --> 19:58.970
你看一下

19:58.970 --> 19:59.970
是不是一秒钟之类跑上去

19:59.970 --> 20:00.970
到一面一

20:00.970 --> 20:01.970
对吧

20:01.970 --> 20:02.970
一秒钟就跑上去

20:02.970 --> 20:03.970
包括同向滚动条

20:03.970 --> 20:04.970
包括同向

20:05.970 --> 20:06.970
你看

20:06.970 --> 20:07.970
同向滚动条跟着跑了

20:07.970 --> 20:08.970
对吧

20:08.970 --> 20:10.970
一秒钟有点长

20:10.970 --> 20:11.970
时间

20:11.970 --> 20:12.970
有点长

20:12.970 --> 20:13.970
你看是不是跑过去了

20:13.970 --> 20:14.970
对不对

20:14.970 --> 20:16.970
你至于搞定各种实现方式

20:16.970 --> 20:18.970
比方说你还可以用一个简单的实现方式

20:18.970 --> 20:19.970
怎么实现呢

20:19.970 --> 20:20.970
就是

20:20.970 --> 20:21.970
我也不过不用从什么总时间

20:21.970 --> 20:23.970
反正我们每隔一段时间加多少

20:23.970 --> 20:24.970
加到0为止

20:24.970 --> 20:25.970
加到0为止

20:25.970 --> 20:27.970
就这样也行

20:27.970 --> 20:28.970
看你怎么去实现

20:28.970 --> 20:29.970
看你怎么去实现

20:29.970 --> 20:31.970
因为你用个总时间1的话

20:31.970 --> 20:32.970
那么它的效果呢

20:32.970 --> 20:33.970
是这样子

20:33.970 --> 20:34.970
它这个距离很短

20:34.970 --> 20:35.970
它也要经过一秒钟

20:35.970 --> 20:36.970
你看一下

20:37.970 --> 20:38.970
距离很短

20:38.970 --> 20:39.970
它也要经过一秒钟

20:39.970 --> 20:41.970
那么这样子的总时间是一定的

20:41.970 --> 20:43.970
当然你可以总时间不一定

20:43.970 --> 20:45.970
每一次运动的距离是一定的

20:45.970 --> 20:46.970
就看你自己

20:46.970 --> 20:47.970
具体怎么去实现

20:47.970 --> 20:48.970
看你自己

20:48.970 --> 20:49.970
好 那么这里呢

20:49.970 --> 20:50.970
其实还有一个小Lug

20:50.970 --> 20:51.970
就是点到一面一过

20:51.970 --> 20:53.970
马上点一面二

20:53.970 --> 20:54.970
点到一面一

20:54.970 --> 20:55.970
马上点一面二

20:55.970 --> 20:57.970
实际上它启动了多个计时期了

20:57.970 --> 20:58.970
这样子是不好的

20:58.970 --> 20:59.970
所以说每一次

20:59.970 --> 21:00.970
得清空计时期

21:00.970 --> 21:01.970
所以说我这里

21:01.970 --> 21:02.970
两个变量得了

21:02.970 --> 21:04.970
两个变量得了

21:05.970 --> 21:06.970
TimeL

21:06.970 --> 21:07.970
TimeL1

21:07.970 --> 21:09.970
TimeL1

21:09.970 --> 21:10.970
TimeL2

21:10.970 --> 21:12.970
设置两个变量

21:12.970 --> 21:13.970
一个是控制横向的

21:13.970 --> 21:14.970
一个是控制重向的

21:14.970 --> 21:15.970
每一次掉入

21:15.970 --> 21:16.970
这个函数的时候

21:16.970 --> 21:17.970
我先把TimeL1和TimeL2

21:17.970 --> 21:19.970
给它清空得了

21:19.970 --> 21:20.970
TimeL1

21:20.970 --> 21:21.970
再来

21:21.970 --> 21:23.970
清空一个Clear

21:23.970 --> 21:24.970
TimeL2

21:24.970 --> 21:25.970
先把这两个清空

21:25.970 --> 21:26.970
反正滚动条

21:26.970 --> 21:27.970
整个一面滚动条

21:27.970 --> 21:28.970
只有这两个嘛

21:28.970 --> 21:29.970
还有啥呢

21:29.970 --> 21:30.970
两个计时期清空

21:30.970 --> 21:31.970
计时期清空

21:31.970 --> 21:32.970
然后这个animate里边

21:32.970 --> 21:34.970
还要多传一个TimeL

21:34.970 --> 21:35.970
TimeL

21:35.970 --> 21:36.970
一个传过来

21:36.970 --> 21:38.970
你就不要自己去定应TimeL了

21:38.970 --> 21:40.970
一个传过来

21:40.970 --> 21:41.970
就这样子

21:41.970 --> 21:42.970
看没

21:42.970 --> 21:44.970
或者在这里面清空也行

21:44.970 --> 21:45.970
这里面清空也行

21:45.970 --> 21:46.970
TimeL

21:46.970 --> 21:47.970
也行

21:47.970 --> 21:48.970
都行

21:48.970 --> 21:49.970
怎么去做都行

21:49.970 --> 21:50.970
都行

21:50.970 --> 21:51.970
我这里不用清空了

21:51.970 --> 21:52.970
那就传一个TimeL吧

21:52.970 --> 21:53.970
TimeL1

21:55.970 --> 21:57.970
下面TimeL2

21:57.970 --> 21:59.970
就避免重复去启动动画

22:00.970 --> 22:01.970
就完了

22:01.970 --> 22:02.970
就没啥了

22:02.970 --> 22:03.970
这个东西你自己去写

22:03.970 --> 22:04.970
这个东西不是

22:04.970 --> 22:06.970
我们这就可要讲的东西

22:06.970 --> 22:07.970
点击

22:07.970 --> 22:09.970
那现在就不会有这个问题了

22:09.970 --> 22:10.970
点击

22:10.970 --> 22:12.970
你看就不会有这个问题了

22:12.970 --> 22:13.970
点击

22:13.970 --> 22:14.970
还有

22:14.970 --> 22:15.970
还有这个问题

22:15.970 --> 22:16.970
我看一下

22:16.970 --> 22:17.970
怎么还有

22:17.970 --> 22:19.970
我清空的计时期的

22:19.970 --> 22:21.970
我清空的计时期的

22:21.970 --> 22:23.970
看一下什么问题

22:23.970 --> 22:25.970
TimeL1传进去

22:25.970 --> 22:27.970
TimeL2传进去

22:27.970 --> 22:28.970
我看一下

22:28.970 --> 22:30.970
怎么还会有这样的问题

22:32.970 --> 22:33.970
我们点击

22:33.970 --> 22:34.970
1免1

22:34.970 --> 22:35.970
1免2

22:35.970 --> 22:36.970
感觉还是抖了一下

22:36.970 --> 22:37.970
看没

22:37.970 --> 22:38.970
1免1

22:38.970 --> 22:39.970
1免2

22:40.970 --> 22:41.970
打印一下吧

22:41.970 --> 22:42.970
打印一下

22:45.970 --> 22:47.970
两个滚动条

22:47.970 --> 22:48.970
一个是设置ScrollNet

22:48.970 --> 22:50.970
一个是设置ScrollTop

22:51.970 --> 22:52.970
没问题

22:53.970 --> 22:54.970
有什么问题呢

22:54.970 --> 22:55.970
我看一下

22:56.970 --> 22:58.970
那这个东西还是不行

22:58.970 --> 22:59.970
这个东西

22:59.970 --> 23:00.970
你在这里边清空的话

23:00.970 --> 23:02.970
清空的是这个变量

23:02.970 --> 23:03.970
是个参数

23:03.970 --> 23:05.970
因为在浏览器里面滚

23:05.970 --> 23:07.970
TimeL是一个数字

23:07.970 --> 23:09.970
你清空的是这个数字

23:09.970 --> 23:11.970
清空的是这个参数数字

23:11.970 --> 23:13.970
关键是你设置的

23:13.970 --> 23:15.970
是这个参数

23:15.970 --> 23:16.970
是这个参数的值

23:16.970 --> 23:17.970
而设置的不是

23:17.970 --> 23:18.970
TimeL1和TimeL2的值

23:18.970 --> 23:19.970
设置的根本就不是

23:19.970 --> 23:20.970
它那样的值

23:20.970 --> 23:21.970
比方说我们这里

23:21.970 --> 23:23.970
输出TimeL1和TimeL2

23:23.970 --> 23:25.970
这个地方还没注意

23:25.970 --> 23:26.970
好看一下吧

23:26.970 --> 23:27.970
说它们1、TimeL2

23:27.970 --> 23:29.970
它们永远是umd犯的

23:29.970 --> 23:30.970
两个都是umd犯的

23:30.970 --> 23:31.970
你切换来切换去

23:31.970 --> 23:32.970
你看是不是全是umd犯的

23:32.970 --> 23:33.970
这里

23:33.970 --> 23:34.970
设置的是参数的值

23:34.970 --> 23:35.970
并不是这个

23:35.970 --> 23:36.970
两个TimeL2的值

23:36.970 --> 23:37.970
所以不能这样做

23:37.970 --> 23:38.970
不能这样做

23:39.970 --> 23:40.970
我看一下怎么弄的

23:40.970 --> 23:42.970
我放到对象里面吧

23:42.970 --> 23:43.970
行吧

23:44.970 --> 23:45.970
也不行

23:45.970 --> 23:47.970
问题是这里怎么弄的

23:47.970 --> 23:48.970
这里怎么弄的

23:48.970 --> 23:50.970
我干脆返回一个TimeL2的

23:50.970 --> 23:52.970
我干脆返回一个TimeL2的

23:52.970 --> 23:53.970
维称

23:53.970 --> 23:55.970
把一个TimeL2返回就得了

23:55.970 --> 23:56.970
返回得了

23:56.970 --> 23:57.970
那这里

23:57.970 --> 23:59.970
轻空就在这里做了

23:59.970 --> 24:01.970
在这里去搞定轻空

24:01.970 --> 24:04.970
搞定这里的轻空

24:04.970 --> 24:08.410
这里不要TimeL2了

24:08.410 --> 24:09.410
在这里轻空

24:09.410 --> 24:11.410
Clear TimeL1

24:11.410 --> 24:14.410
Clear TimeL2在这里处理

24:14.410 --> 24:15.410
那么这个地方

24:15.410 --> 24:17.410
就不要TimeL1了

24:17.410 --> 24:18.410
这个地方不要TimeL1了

24:18.410 --> 24:19.410
让它自己去创建TimeL2

24:19.410 --> 24:20.410
然后我这里只是接收

24:20.410 --> 24:22.410
接收用TimeL1来接收

24:22.410 --> 24:24.410
这里能用TimeL2来接收

24:24.410 --> 24:25.410
这样子来处理

24:25.410 --> 24:27.410
你给我返回一个技术器的

24:27.410 --> 24:28.410
就是ID

24:28.410 --> 24:29.410
这里也是给我返回一个技术器的ID

24:29.410 --> 24:30.410
把保存在这

24:30.410 --> 24:32.410
下一次你调用这个时候

24:32.410 --> 24:34.410
我把技术器轻空

24:34.410 --> 24:35.410
OK

24:37.410 --> 24:38.410
我看一下

24:39.410 --> 24:40.410
这里

24:42.410 --> 24:44.410
这里我还是得用个变量

24:44.410 --> 24:45.410
还是得用个变量

24:45.410 --> 24:47.410
先保存到变量里边

24:48.410 --> 24:49.410
先保存到变量里边

24:49.410 --> 24:51.410
然后再返回这个TimeL

24:52.410 --> 24:53.410
看一下

24:53.410 --> 24:54.410
那么现在

24:54.410 --> 24:55.410
1-1

24:58.040 --> 24:59.040
1-2

24:59.040 --> 25:00.040
1-1

25:01.040 --> 25:02.040
1-2

25:02.040 --> 25:03.040
1-1

25:03.040 --> 25:04.040
1-2

25:04.040 --> 25:05.040
1-1

25:06.040 --> 25:07.040
这就是

25:07.040 --> 25:09.040
这个滚动条的事件

25:09.040 --> 25:10.040
滚动条的事件

25:10.040 --> 25:11.040
总之在这个地方

25:11.040 --> 25:12.040
你随便继续写

25:12.040 --> 25:13.040
随便打写都行

25:13.040 --> 25:14.040
终点不在这

25:14.040 --> 25:15.040
主要是高階组建

25:15.040 --> 25:17.040
你要理解的是

25:17.040 --> 25:19.040
它在组建加载完成

25:19.040 --> 25:20.040
挂载完成之后

25:20.040 --> 25:21.040
复位滚动条

25:21.040 --> 25:22.040
这是这种模式

25:22.040 --> 25:24.040
把时间稍微写短一点

25:24.040 --> 25:26.040
1秒容确实有点太长了

25:26.040 --> 25:27.040
300毫秒

25:28.040 --> 25:29.040
300毫秒

25:29.040 --> 25:32.630
这样子

25:32.630 --> 25:34.630
稍微快速一点

25:34.630 --> 25:35.630
OK

25:35.630 --> 25:36.630
差不多

25:37.630 --> 25:38.630
那么现在

25:38.630 --> 25:39.630
这是第一种方式

25:39.630 --> 25:40.630
第二种方式

25:40.630 --> 25:41.630
来看一下

25:41.630 --> 25:42.630
第二种方式

25:42.630 --> 25:43.630
是使用

25:43.630 --> 25:44.630
使用

25:44.630 --> 25:45.630
使用

25:45.630 --> 25:46.630
使用

25:46.630 --> 25:47.630
使用

25:47.630 --> 25:48.630
当然

25:48.630 --> 25:49.630
它肯定要是在

25:49.630 --> 25:50.630
韩束主建里面才行

25:50.630 --> 25:51.630
使用

25:51.630 --> 25:52.630
使用

25:52.630 --> 25:53.630
那么这个东西怎么来做

25:53.630 --> 25:54.630
咱们写一个

25:54.630 --> 25:55.630
新建个文件

25:56.630 --> 25:57.630
叫做

25:57.630 --> 25:58.630
UseScroll

25:58.630 --> 26:01.630
就是一个自定义的Hook

26:01.630 --> 26:03.630
导入进来

26:03.630 --> 26:05.630
这个也挺有意思的

26:05.630 --> 26:06.630
UseEffect

26:07.630 --> 26:08.630
Effect

26:08.630 --> 26:10.630
FromReact

26:11.630 --> 26:12.630
那这里边咋写呢

26:12.630 --> 26:13.630
这里边是这样的

26:13.630 --> 26:15.630
我们先把导入进来

26:15.630 --> 26:17.630
把ResetScroll

26:17.630 --> 26:21.650
导入进来

26:21.650 --> 26:22.650
是这样的

26:22.650 --> 26:23.650
我们这里能写

26:23.650 --> 26:24.650
导出这么一个韩束

26:26.650 --> 26:27.650
Default

26:27.650 --> 26:28.650
导出这么一个韩束

26:28.650 --> 26:30.650
这个韩束名字叫做UseEffect

26:31.650 --> 26:33.650
这个韩束名字叫做UseScroll

26:34.650 --> 26:35.650
你给我传一个

26:35.650 --> 26:37.650
传一个路径进来

26:37.650 --> 26:39.650
你给我传一个路径进来

26:40.650 --> 26:41.650
那么我这里

26:41.650 --> 26:42.650
给它加一个副作用

26:42.650 --> 26:43.650
UseEffect

26:43.650 --> 26:44.650
当然

26:44.650 --> 26:45.650
这个东西前提条件

26:45.650 --> 26:46.650
你得对Hook

26:46.650 --> 26:47.650
非常熟悉

26:47.650 --> 26:49.650
特别是EffectHook

26:49.650 --> 26:51.650
那么这个副作用处理

26:51.650 --> 26:52.650
处理上

26:52.650 --> 26:53.650
就是Reset

26:53.650 --> 26:54.650
轩然过通了

26:54.650 --> 26:55.650
调整Reset

26:55.650 --> 26:56.650
就这么简单

26:56.650 --> 26:57.650
轩然过通调整Reset

26:58.650 --> 26:59.650
就完了

26:59.650 --> 27:00.650
就没了

27:00.650 --> 27:01.650
甚至说

27:01.650 --> 27:02.650
甚至说了你这里

27:02.650 --> 27:03.650
甚至说了你这里

27:03.650 --> 27:04.650
可以直接把Reset写到这

27:04.650 --> 27:05.650
对吧

27:05.650 --> 27:06.650
韩束写到这

27:06.650 --> 27:07.650
然后它的依赖

27:07.650 --> 27:08.650
像是什么

27:08.650 --> 27:09.650
依赖这个Pass Name

27:09.650 --> 27:10.650
只要你的Pass Name

27:10.650 --> 27:11.650
没发生变化

27:11.650 --> 27:12.650
我肯定不复位

27:12.650 --> 27:13.650
Pass Name

27:13.650 --> 27:14.650
不发生变化

27:14.650 --> 27:15.650
我肯定不复位

27:15.650 --> 27:16.650
Pass Name发生变化了

27:16.650 --> 27:17.650
我就复位

27:17.650 --> 27:18.650
我就复位

27:18.650 --> 27:19.650
对吧

27:19.650 --> 27:21.650
我们写上这么一个UseScroll

27:21.650 --> 27:22.650
非常非常简单

27:22.650 --> 27:23.650
那么我们这边

27:23.650 --> 27:24.650
在App里边

27:24.650 --> 27:25.650
这个复制一下

27:27.650 --> 27:28.650
在App里边

27:28.650 --> 27:29.650
我们直接这样来处理

27:30.650 --> 27:31.650
这里我们就不用

27:31.650 --> 27:32.650
什么高接触键了

27:32.650 --> 27:37.650
我们导入UseScroll

27:37.650 --> 27:38.650
Front

27:38.650 --> 27:40.650
就要写上UseScroll

27:40.650 --> 27:41.650
导入这个

27:41.650 --> 27:43.650
那么在Page1里边

27:43.650 --> 27:44.650
我们怎么办

27:44.650 --> 27:45.650
Page1里边

27:45.650 --> 27:46.650
直接调整这个就完事了

27:46.650 --> 27:47.650
UseScroll

27:47.650 --> 27:48.650
这调整就完事了

27:48.650 --> 27:50.650
然后传一个Pass Name进去

27:50.650 --> 27:51.650
好Pass Name是不是可以

27:51.650 --> 27:52.650
从属性里面找到

27:52.650 --> 27:53.650
对吧

27:53.650 --> 27:54.650
属性里面什么

27:54.650 --> 27:56.650
那个叫做

27:57.650 --> 27:59.650
属性里面叫做那个

28:00.650 --> 28:01.650
叫啥呢

28:01.650 --> 28:03.650
叫做

28:03.650 --> 28:04.650
location

28:04.650 --> 28:05.650
location

28:05.650 --> 28:06.650
Pass Name

28:06.650 --> 28:07.650
Pass Name

28:07.650 --> 28:08.650
对吧

28:08.650 --> 28:10.650
是这个意思吧

28:10.650 --> 28:11.650
好那么咱们

28:11.650 --> 28:12.650
把这个复制一下

28:12.650 --> 28:13.650
这个放过来

28:13.650 --> 28:14.650
放过来

28:15.650 --> 28:16.650
Prob's

28:17.650 --> 28:18.650
这是用后可的方式

28:18.650 --> 28:20.650
那么这里就直接写Page1

28:20.650 --> 28:21.650
这里呢

28:21.650 --> 28:22.650
直接写Page2

28:23.650 --> 28:24.650
保存

28:24.650 --> 28:25.650
你看一下吧

28:28.650 --> 28:29.650
现在呢

28:29.650 --> 28:30.650
点击页面1

28:30.650 --> 28:31.650
你看

28:31.650 --> 28:32.650
所以也是可以

28:32.650 --> 28:33.650
对吧

28:33.650 --> 28:34.650
点击页面2

28:34.650 --> 28:35.650
所以也是可以

28:35.650 --> 28:36.650
对不对

28:36.650 --> 28:38.650
也能够完成这样的效果

28:38.650 --> 28:41.650
它是用UseEffect来搞定这件事情

28:42.650 --> 28:44.650
好然后第三种方式

28:44.650 --> 28:45.650
第三种方式

28:45.650 --> 28:46.650
要稍微麻烦一点

28:46.650 --> 28:47.650
第三种方式

28:47.650 --> 28:49.650
但是你写了过后就简单了

28:49.650 --> 28:50.650
就第三种方式

28:50.650 --> 28:54.650
就是使用自定义的导航守卫

28:54.650 --> 28:55.650
之前有个课

28:55.650 --> 28:56.650
是不是讲了导航守卫的

28:56.650 --> 28:57.650
对不对

28:57.650 --> 28:58.650
我们之前

28:58.650 --> 29:00.650
我这里可能还把它放在这儿的

29:00.650 --> 29:01.650
RoseGuard

29:01.650 --> 29:02.650
导航守卫

29:02.650 --> 29:03.650
那么使用导航守卫的话

29:03.650 --> 29:04.650
如果你把导航守卫

29:04.650 --> 29:05.650
营做好的话

29:05.650 --> 29:06.650
那就非常非常简单了

29:06.650 --> 29:08.650
你看Page1不用管了

29:08.650 --> 29:09.650
Page2不用管了

29:09.650 --> 29:10.650
那么这个东西不用管了

29:10.650 --> 29:11.650
好

29:11.650 --> 29:12.650
这里呢

29:12.650 --> 29:13.650
Prob's Ruler都不用管了

29:13.650 --> 29:14.650
点这个东西都不用管了

29:14.650 --> 29:16.650
那么我们直接使用导航守卫

29:16.650 --> 29:17.650
Import

29:17.650 --> 29:18.650
导入什么呢

29:18.650 --> 29:19.650
导入那个

29:20.650 --> 29:21.650
调鞋杠

29:22.650 --> 29:23.650
RoseGuard

29:24.650 --> 29:25.650
导入这个

29:25.650 --> 29:26.650
RoseGuard

29:26.650 --> 29:27.650
那么这里呢

29:27.650 --> 29:28.650
我们使用RoseGuard

29:29.650 --> 29:30.650
好那这里呢

29:30.650 --> 29:31.650
不是导航守卫里边有个事件

29:31.650 --> 29:32.650
叫做什么

29:32.650 --> 29:33.650
Unchanged

29:33.650 --> 29:35.650
页面改变事件

29:35.650 --> 29:36.650
那么这个事件是不是一个函数

29:36.650 --> 29:37.650
对吧

29:37.650 --> 29:38.650
一个函数

29:38.650 --> 29:39.650
这个函数要给我啥

29:39.650 --> 29:41.650
给我之前的location

29:41.650 --> 29:42.650
给我之后的location

29:42.650 --> 29:43.650
对吧

29:43.650 --> 29:44.650
对不对

29:46.650 --> 29:47.650
我们这里输出一下

29:47.650 --> 29:50.650
prevlocation.passname

29:51.650 --> 29:52.650
然后呢

29:52.650 --> 29:54.650
location.passname

29:54.650 --> 29:55.650
那么你可以看到

29:55.650 --> 29:56.650
它怎么跳转的

29:57.650 --> 29:58.650
保存

29:58.650 --> 29:59.650
右键

29:59.650 --> 30:00.650
检查

30:00.650 --> 30:01.650
控制台打开

30:01.650 --> 30:02.650
再放到右边

30:05.220 --> 30:06.220
看控制台

30:06.220 --> 30:07.220
那么点页面1

30:07.220 --> 30:08.220
你看一下

30:08.220 --> 30:09.220
是Page2到Page1

30:09.220 --> 30:10.220
点页面2

30:10.220 --> 30:11.220
Page1到Page2

30:11.220 --> 30:12.220
但是你要注意

30:12.220 --> 30:14.220
如果说你再点页面2的话

30:14.220 --> 30:16.220
它仍然有这么一个

30:16.220 --> 30:17.220
页面改变

30:17.220 --> 30:19.220
因为它点这个超链接是铺锡

30:19.220 --> 30:20.220
铺锡操作

30:20.220 --> 30:21.220
两个页面相同

30:21.220 --> 30:22.220
它也能铺锡

30:22.220 --> 30:23.220
它是页面2

30:23.220 --> 30:24.220
再到页面2

30:24.220 --> 30:25.220
对吧

30:25.220 --> 30:26.220
所以说为了避免

30:26.220 --> 30:28.220
如果说你这里直接调用Reset

30:28.220 --> 30:29.220
直接调用Reset的话

30:29.220 --> 30:31.220
那么同页面的点击的话

30:31.220 --> 30:32.220
它也会跳转

30:32.220 --> 30:33.220
Reset

30:33.220 --> 30:35.220
如果说你直接调用的话

30:35.220 --> 30:37.590
Reset

30:37.590 --> 30:38.590
如果直接调用的话

30:38.590 --> 30:39.590
那么这里呢

30:39.590 --> 30:40.590
会导致

30:40.590 --> 30:41.590
在这

30:41.590 --> 30:43.590
同页面的跳转

30:43.590 --> 30:44.590
它也会发生变化

30:44.590 --> 30:45.590
你看一下

30:45.590 --> 30:46.590
哪怕我再点页面2

30:46.590 --> 30:47.590
你看是不是也会发生变化

30:47.590 --> 30:48.590
对吧

30:48.590 --> 30:49.590
也会发生变化

30:49.590 --> 30:50.590
那么这里呢

30:50.590 --> 30:51.590
我们就可以使用

30:51.590 --> 30:52.590
判断一下

30:52.590 --> 30:54.590
如果说之前的路径

30:54.590 --> 30:55.590
passname

30:56.590 --> 30:59.590
等于location.passname

30:59.590 --> 31:00.590
如果说不

31:00.590 --> 31:02.590
应该说不想等

31:02.590 --> 31:03.590
两个页面不一样

31:03.590 --> 31:04.590
OK

31:04.590 --> 31:05.590
滚动条复位

31:06.590 --> 31:07.590
这样来操作

31:07.590 --> 31:08.590
那么这样子

31:08.590 --> 31:09.590
点同一个页面的时候

31:09.590 --> 31:10.590
不会发生任何事情

31:10.590 --> 31:11.590
切换页面的时候

31:11.590 --> 31:12.590
才会发生

31:12.590 --> 31:13.590
总之

31:13.590 --> 31:14.590
很多很灵活的

31:14.590 --> 31:16.590
其实滚动条翻滚的是

31:16.590 --> 31:17.590
非常非常简单的

31:17.590 --> 31:19.590
滚动条复位非常非常简单

31:19.590 --> 31:20.590
任何一种方式都可以做

31:20.590 --> 31:21.590
但是

31:22.590 --> 31:23.590
只说我们这里

31:23.590 --> 31:24.590
好像写得稍微复杂一点

31:24.590 --> 31:25.590
其实也不复杂

31:25.590 --> 31:26.590
也不复杂

31:26.590 --> 31:27.590
这个东西跟Reset

31:27.590 --> 31:28.590
没有什么关系

31:28.590 --> 31:29.590
就是你要怎么去

31:29.590 --> 31:30.590
实现一个动画来复位

31:30.590 --> 31:32.590
这个大家应该都会实现

31:32.590 --> 31:33.590
都学到这了

31:33.590 --> 31:34.590
应该都会实现

31:34.590 --> 31:35.590
没有问题

31:35.590 --> 31:36.590
我就随便实现了一下

31:36.590 --> 31:37.590
这个实现的方式有很多

31:37.590 --> 31:38.590
你自己去搞定就完事

31:38.590 --> 31:40.590
这个不是我们讲的重点

31:40.590 --> 31:42.590
总之你把复位就完事

31:42.590 --> 31:43.590
这是关于这个

31:43.590 --> 31:44.590
这一块

31:44.590 --> 31:45.590
这也是一个

31:45.590 --> 31:46.590
因为他为什么讲他

31:46.590 --> 31:47.590
他虽然很简单

31:47.590 --> 31:48.590
但是我们这是

31:48.590 --> 31:49.590
我们在开发

31:49.590 --> 31:50.590
单业应用程序的时候

31:50.590 --> 31:52.590
经常遇到了一个问题

31:52.590 --> 31:53.590
所以把它当成一个

31:53.590 --> 31:55.590
常见的问题拿出来讲一讲

31:55.590 --> 31:56.590
这是关于这个问题

