WEBVTT

00:00.940 --> 00:04.740
好啊 咱们这节课呢就把这个迪瓦就结束了啊

00:04.740 --> 00:08.540
迪瓦这一块呢还剩下最后的东西就是迪瓦插件

00:08.540 --> 00:11.940
有的时候呢我们也把它叫做迪瓦中间键

00:11.940 --> 00:14.940
其实它这个东西呢非常非常简单啊

00:14.940 --> 00:18.940
它就是说迪瓦对象里边啊通过那个迪瓦对象

00:18.940 --> 00:22.940
通过迪瓦对象把它形成代码格式啊

00:22.940 --> 00:31.900
通过迪瓦对象点 use 函数 这里边显上插件

00:32.900 --> 00:34.900
来使用插件

00:35.900 --> 00:37.900
那么这个插件到底是什么呢

00:37.900 --> 00:41.900
插件其实本质上啊就是一个对象

00:42.900 --> 00:48.900
该对象呃与配置对象相同啊

00:48.900 --> 00:53.900
那么迪瓦会迪瓦呢会在启动会在启动时啊

00:53.900 --> 00:59.900
会在启动时将呃传递的插件对象

00:59.900 --> 01:04.900
混合到配置中啊就这么简单啊特别特别简单

01:04.900 --> 01:06.900
呃咱们来看一下吧

01:06.900 --> 01:10.900
之前呢咱们在这里呢写上了写了一个迪瓦对吧

01:10.900 --> 01:12.900
这里是不是有配置啊对不对

01:12.900 --> 01:15.900
哎这一配置呢我可以不写啊可以不写

01:15.900 --> 01:18.900
那么使用迪瓦优势把它混合到这个配置里边去

01:18.900 --> 01:20.900
啊我们可以使用这种模式啊

01:20.900 --> 01:23.900
把这个History在写上啊History在写上

01:23.900 --> 01:25.900
呃其他都可以不用写

01:26.900 --> 01:28.900
啊我们使用迪瓦优势呢

01:28.900 --> 01:30.900
去使用一个迪瓦中间键

01:30.900 --> 01:32.900
啊比方说我们这里新建个文件啊

01:32.900 --> 01:36.900
呃买迪瓦啊Medware啊

01:36.900 --> 01:38.900
或者是买迪瓦Planning

01:38.900 --> 01:43.900
点解释啊表示一个迪瓦迪瓦插件啊

01:43.900 --> 01:46.900
我们这里呢传一个对象进去啊传个对象进去

01:46.900 --> 01:49.900
呃我们比方说要做日子记录吗啊

01:49.900 --> 01:52.900
我们这里呢就可以写上这么一个方形啊

01:52.900 --> 01:54.900
方形呃logger

01:54.900 --> 01:56.900
就是这样子吧

01:56.900 --> 01:58.900
啊logger

01:58.900 --> 02:00.900
呃它这个就是

02:00.900 --> 02:02.900
呃Redux中间键

02:02.900 --> 02:04.900
store next

02:04.900 --> 02:06.900
啊然后呢是action

02:06.900 --> 02:11.850
啊这里边我们输出啊

02:11.850 --> 02:13.850
老状态

02:13.850 --> 02:17.850
啊store get state

02:17.850 --> 02:19.850
啊这是一个啊

02:19.850 --> 02:21.850
然后呢这里是新状态

02:21.850 --> 02:23.850
啊这是一个

02:23.850 --> 02:25.850
然后呢中间输出一个action

02:25.850 --> 02:27.850
啊中间输出一个action

02:27.850 --> 02:31.850
啊呃然后呢这里使用next

02:31.850 --> 02:33.850
对吧action

02:33.850 --> 02:36.850
啊这里再输出一个空行

02:36.850 --> 02:38.850
好了啊就是这么一个Redux中间键

02:38.850 --> 02:41.850
咱们要把Redux中间键放到迪瓦里边怎么放呢

02:41.850 --> 02:43.850
是不是要配置onaction对吧

02:43.850 --> 02:44.850
onaction

02:44.850 --> 02:47.850
然后呢给它配置为logger

02:47.850 --> 02:49.850
啊就导出这么一个对象

02:49.850 --> 02:52.850
行了啊那咱们在index里边就可以使用了啊

02:52.850 --> 02:53.850
import

02:53.850 --> 02:55.850
然后呢这里来自于一个

02:55.850 --> 02:57.850
import就是

02:57.850 --> 02:59.850
呃啊

02:59.850 --> 03:02.850
就是mydwa pronging

03:02.850 --> 03:03.850
from

03:03.850 --> 03:05.850
mydwa pronging

03:05.850 --> 03:07.850
好然后呢

03:07.850 --> 03:09.850
我们把这个对象怎么用呢

03:09.850 --> 03:11.850
就是用app.use啊就这么简单

03:11.850 --> 03:13.850
没了啊没了啊

03:13.850 --> 03:15.850
启动起来啊

03:15.850 --> 03:17.850
嗯一样

03:17.850 --> 03:19.850
index

03:19.850 --> 03:21.850
一二start啊你看一下

03:21.850 --> 03:23.850
诶都写错了是吧

03:23.850 --> 03:25.850
一二start

03:25.850 --> 03:27.850
啊其实呢dwa中间

03:27.850 --> 03:29.850
dwa中间键啊dwa插件就这么简单

03:29.850 --> 03:31.850
就是一个对象它就是写了个一个配置啊

03:31.850 --> 03:33.850
它会把这个配置呢

03:33.850 --> 03:35.850
把这个配置呢混合到

03:35.850 --> 03:38.850
诶混合到我们之前那个配置对象里边去

03:38.850 --> 03:41.850
啊其实就这么简单啊看一下吧

03:41.850 --> 03:43.850
啊稍等一下啊

03:43.850 --> 03:48.420
这个啥玩意儿啊发送词一面

03:48.420 --> 03:50.420
啥玩意儿

03:50.420 --> 03:51.420
啊点击

03:51.420 --> 03:52.420
诶

03:52.420 --> 03:53.420
怎么回事

03:53.420 --> 03:54.420
发生了什么

03:54.420 --> 03:56.420
他在报了一个错

03:56.420 --> 03:58.420
啊

03:58.420 --> 04:00.420
carnate res fendement module

04:00.420 --> 04:02.420
dwa

04:02.420 --> 04:05.420
我们之前讲那个解析那个dwa

04:05.420 --> 04:08.420
那个就是解析dwa的时候呢

04:08.420 --> 04:10.420
就手动写dwa的时候呢我把那个裤衫掉了啊

04:10.420 --> 04:12.420
因为我们自己是手动写的

04:12.420 --> 04:14.420
我再重新安装安装一下吧

04:14.420 --> 04:16.420
add dwa

04:16.420 --> 04:18.420
好当它安装的时候呢

04:18.420 --> 04:20.420
在在顺便说一些东西

04:20.420 --> 04:22.420
dwa插件呢其实就这么个意思啊

04:22.420 --> 04:24.420
一会里面就可以看到效果了

04:24.420 --> 04:26.420
我们这里主要说一下我们这节课呢

04:26.420 --> 04:28.420
除了讲dwa插件啊

04:28.420 --> 04:30.420
如何去自己编写个dwa插件

04:30.420 --> 04:32.420
其实就是一个意识对象没什么好说的

04:32.420 --> 04:34.420
另外呢我们重点是讲另外一个

04:34.420 --> 04:37.420
就是一个第三方给我们提供了一个dwa插件

04:37.420 --> 04:39.420
叫做dwa loading啊

04:39.420 --> 04:42.420
叫做dwa loading插件

04:42.420 --> 04:44.420
大家呢可以在那个npm上呢

04:44.420 --> 04:46.420
再找到这个插件

04:46.420 --> 04:47.420
npm

04:47.420 --> 04:50.420
这里有个dwa loading

04:50.420 --> 04:52.420
这个插件做什么用的呢

04:52.420 --> 04:53.420
就是有的时候呢

04:53.420 --> 04:56.420
我们可能需要一些做一些副作用操作对吧

04:56.420 --> 04:57.420
那么这些副作用操作呢

04:57.420 --> 05:00.420
往往是要做一些阿迦克斯请求

05:00.420 --> 05:02.420
那么在请求之前呢

05:02.420 --> 05:04.420
我们可能要设置一个数据

05:04.420 --> 05:06.420
比方说是否正在加载

05:06.420 --> 05:07.420
把数为q

05:07.420 --> 05:08.420
然后呢把请求完了之后

05:08.420 --> 05:10.420
就是副作用结束之后呢

05:10.420 --> 05:12.420
我们把正在加载的数为force

05:12.420 --> 05:13.420
因为有的时候呢

05:13.420 --> 05:14.420
见面上呢

05:14.420 --> 05:16.420
它可能会需要这样的一个数据状态

05:16.420 --> 05:18.420
来展示是否正在加载中

05:18.420 --> 05:20.420
可能需要这么一个数据状态

05:20.420 --> 05:21.420
因此呢

05:21.420 --> 05:22.420
这个插件呢

05:22.420 --> 05:23.420
专门来做这个事情的

05:23.420 --> 05:24.420
dwa loading

05:24.420 --> 05:27.420
我们看一下安装完了没有

05:27.420 --> 05:28.420
再启动起来

05:28.420 --> 05:29.420
我们首先看一下

05:29.420 --> 05:30.420
我们那个插件

05:30.420 --> 05:31.420
如果说自己写的话

05:31.420 --> 05:32.420
怎么写

05:32.420 --> 05:34.420
其实就是一个对象

05:34.420 --> 05:35.420
就是这么一个对象

05:35.420 --> 05:36.420
配置对象

05:36.420 --> 05:37.420
它会混合到这边去

05:37.420 --> 05:41.500
让它运行起来

05:41.500 --> 05:44.260
看一下

05:50.920 --> 05:51.920
运行出来了

05:51.920 --> 05:52.920
运行出来了

05:52.920 --> 05:53.920
dk错误不用管了

05:53.920 --> 05:55.920
你看是不是应用了

05:55.920 --> 05:56.920
我们的插件了

05:56.920 --> 05:57.920
对吧

05:57.920 --> 05:58.920
我们的插件是不是应用进去了

05:58.920 --> 05:59.920
就这么简单

05:59.920 --> 06:01.920
这就是dwa

06:01.920 --> 06:03.920
dwa这个就是中间键

06:06.230 --> 06:07.230
然后呢

06:07.230 --> 06:08.230
我们来用一下那个

06:08.230 --> 06:10.230
我们把这些代码的

06:10.230 --> 06:12.230
稍微删一下

06:12.230 --> 06:13.230
这个不要了

06:13.230 --> 06:14.230
这个不要了

06:14.230 --> 06:16.230
我们先把它停止

06:16.230 --> 06:17.230
我们来安装一下

06:17.230 --> 06:18.230
我们刚才说的一个

06:18.230 --> 06:20.230
就是dwa loading这个插件

06:20.230 --> 06:21.230
安装一下

06:21.230 --> 06:22.230
让它安装

06:22.230 --> 06:23.230
然后我们这里呢

06:23.230 --> 06:25.230
把这些我们模型里边的 counter

06:25.230 --> 06:26.230
稍微改一下

06:26.230 --> 06:27.230
这个subscription

06:27.230 --> 06:28.230
就不要了

06:28.230 --> 06:29.230
这个东西就不要了

06:30.230 --> 06:31.230
跟我们目前没有什么关系

06:32.230 --> 06:34.230
然后这边

06:34.230 --> 06:35.230
这边就没啥了

06:35.230 --> 06:36.230
没啥了

06:36.230 --> 06:38.230
看一下安装好了没有

06:38.230 --> 06:39.230
还没有

06:39.230 --> 06:40.230
然后我们看一下

06:40.230 --> 06:41.230
这个就是

06:41.230 --> 06:42.230
这里的说明文档里边

06:42.230 --> 06:43.230
这个dwa loading怎么用

06:43.230 --> 06:45.230
其实它特别简单

06:45.230 --> 06:46.230
它的代码也没有几行

06:46.230 --> 06:47.230
不过呢

06:47.230 --> 06:48.230
我们还是按照管理

06:48.230 --> 06:49.230
下节课来

06:49.230 --> 06:51.230
详细的讲它的代码

06:52.230 --> 06:54.230
它里边的就提供了一个函数

06:54.230 --> 06:55.230
也没了

06:55.230 --> 06:56.230
就提供一个函数

06:56.230 --> 06:58.230
叫create loading

06:58.230 --> 06:59.230
那么create loading

06:59.230 --> 07:00.230
它会返回一个对象

07:00.230 --> 07:01.230
返回了这个对象呢

07:01.230 --> 07:03.230
就调用这个函数

07:03.230 --> 07:04.230
返回了这个对象呢

07:04.230 --> 07:05.230
它就是一个

07:05.230 --> 07:07.230
dwa的中间键

07:07.230 --> 07:08.230
一个dwa的插件

07:08.230 --> 07:09.230
你用youse

07:09.230 --> 07:10.230
把它加进去就完成了

07:10.230 --> 07:11.230
然后它这里呢

07:11.230 --> 07:12.230
一个option是

07:12.230 --> 07:13.230
这个option呢

07:13.230 --> 07:14.230
我们可以不传

07:14.230 --> 07:15.230
就是配置

07:15.230 --> 07:16.230
是可以不传的

07:16.230 --> 07:17.230
不传

07:17.230 --> 07:18.230
一会我们再说这个配置里面

07:18.230 --> 07:19.230
有什么东西

07:19.230 --> 07:20.230
其实就一个东西

07:21.230 --> 07:22.230
然后咱们看一下

07:22.230 --> 07:23.230
安装完了没有

07:23.230 --> 07:24.230
然后启动起来

07:26.230 --> 07:27.230
我们主要说明一下

07:27.230 --> 07:28.230
啥问题呢

07:28.230 --> 07:29.230
看一下

07:29.230 --> 07:30.230
我们这里首先导入

07:31.230 --> 07:33.230
从哪里导入呢

07:33.230 --> 07:35.230
从这个就是dwa loading

07:35.230 --> 07:36.230
这里面导入

07:36.230 --> 07:38.230
它里面就是一个函数

07:38.230 --> 07:39.230
叫create loading

07:40.230 --> 07:41.230
有这么一个函数

07:41.230 --> 07:42.230
调用这个函数

07:42.230 --> 07:45.230
它就会返回一个dwa插件

07:45.230 --> 07:47.230
所以说我们使用app.use

07:47.230 --> 07:48.230
对吧

07:48.230 --> 07:49.230
调用这个函数

07:49.230 --> 07:50.230
它就会返回一个插件

07:50.230 --> 07:51.230
就这么简单

07:51.230 --> 07:55.230
使用dwa loading

07:55.230 --> 07:56.230
插件

07:56.230 --> 07:57.230
就这么简单

07:57.230 --> 07:58.230
好

07:58.230 --> 07:59.230
保存一下

07:59.230 --> 08:00.230
我们看一下有什么样的神奇效果

08:01.230 --> 08:02.230
我们这里呢

08:02.230 --> 08:03.230
把我们的radar打开

08:06.610 --> 08:07.610
为什么

08:07.610 --> 08:08.610
它这里显示不到呢

08:10.610 --> 08:11.610
在工具团上显示

08:11.610 --> 08:12.610
在这

08:13.610 --> 08:14.610
open一pan

08:16.610 --> 08:17.610
然后我们看一下状态

08:17.610 --> 08:18.610
你会发现

08:18.610 --> 08:20.610
状态里边多了一个东西

08:20.610 --> 08:21.610
多了什么东西呢

08:21.610 --> 08:22.610
多了这个loading

08:22.610 --> 08:23.610
看到没

08:23.610 --> 08:24.610
loading

08:24.610 --> 08:26.610
loading里边有三个属性

08:26.610 --> 08:27.610
一个是global

08:27.610 --> 08:28.610
一个是models

08:28.610 --> 08:29.610
一个是affects

08:30.610 --> 08:31.610
我们这里

08:31.610 --> 08:33.610
把这个三个属性记录一下

08:34.610 --> 08:36.610
该插件

08:36.610 --> 08:39.610
会在仓库中

08:39.610 --> 08:42.610
加入一个状态

08:42.610 --> 08:43.610
状态是什么呢

08:43.610 --> 08:45.610
状态名字叫做loading

08:45.610 --> 08:47.610
叫做loading状态

08:47.610 --> 08:49.610
名称为

08:49.610 --> 08:51.610
名称为loading

08:51.610 --> 08:53.610
那么这个loading是一个对象

08:53.610 --> 08:54.610
它是一个对象

08:54.610 --> 08:56.610
其中有三个属性

08:56.610 --> 08:57.610
其中有

08:57.610 --> 08:59.610
以下属性

08:59.610 --> 09:00.610
我们来一个个说

09:00.610 --> 09:01.610
属性是什么意思

09:01.610 --> 09:02.610
一个是global

09:02.610 --> 09:03.610
一个是model

09:04.610 --> 09:05.610
一个是affects

09:06.610 --> 09:07.610
就这么三个属性

09:08.610 --> 09:09.610
我们来观察一下

09:09.610 --> 09:10.610
这三个属性到底是什么意思呢

09:10.610 --> 09:12.610
我们这里做这么一个操作

09:12.610 --> 09:13.610
找到技术器

09:13.610 --> 09:14.610
找到技术器

09:15.610 --> 09:17.610
然后我们这里一个

09:17.610 --> 09:19.610
异部加

09:20.610 --> 09:21.610
0变成1了

09:21.610 --> 09:23.610
过了一会0变成1了

09:23.610 --> 09:25.610
然后我们看一下这边

09:25.610 --> 09:26.610
看一下这边

09:26.610 --> 09:28.610
这边你会发现

09:28.610 --> 09:30.610
它触发了一些额外的x

09:30.610 --> 09:31.610
看到没

09:31.610 --> 09:33.610
你看是不是触发了额外的x

09:33.610 --> 09:35.610
这是我们触发的x

09:35.610 --> 09:36.610
触发的x

09:36.610 --> 09:38.610
Counter Async Increase

09:38.610 --> 09:40.610
然后它触发了这么一个x

09:40.610 --> 09:41.610
这两个不用看

09:41.610 --> 09:42.610
这两个是Diva给你加的

09:42.610 --> 09:44.610
这个两个不用看

09:44.610 --> 09:45.610
我们看这个

09:47.610 --> 09:49.610
就是有这么一个

09:49.610 --> 09:50.610
就是x型触发

09:50.610 --> 09:52.610
那么这个x型是谁给你加的呢

09:52.610 --> 09:54.610
就是那个查件给你加的

09:54.610 --> 09:55.610
就是给你查件给你

09:55.610 --> 09:57.610
它可以给你额外的加一个

09:57.610 --> 09:59.610
x型触发进去

09:59.610 --> 10:00.610
那么触发这个x型过后

10:00.610 --> 10:01.610
你看

10:01.610 --> 10:03.610
楼顶这个属性里边一个global

10:03.610 --> 10:04.610
global变成触了

10:04.610 --> 10:05.610
看没

10:05.610 --> 10:07.610
表示是不是正在夹展

10:07.610 --> 10:08.610
对不对

10:08.610 --> 10:09.610
是不是正在夹展

10:09.610 --> 10:10.610
然后这里有个模型

10:10.610 --> 10:13.610
模型里边它告诉你Counter

10:13.610 --> 10:15.610
Counter这个模型为处

10:15.610 --> 10:17.610
也就是说是谁在夹展呢

10:17.610 --> 10:19.610
是Counter这个模型在夹展

10:19.610 --> 10:20.610
看没

10:20.610 --> 10:21.610
是不是告诉你的

10:21.610 --> 10:23.610
然后下面这个Effects

10:23.610 --> 10:26.610
Effects就是你触发的Effects

10:26.610 --> 10:28.610
那个就是x型的名称

10:28.610 --> 10:30.610
它把它作为属性名

10:30.610 --> 10:32.610
那么是不是通过这三个属性

10:32.610 --> 10:33.610
我们就可以知道

10:33.610 --> 10:35.610
是不是正在夹展中

10:35.610 --> 10:37.610
是谁正在夹展中

10:37.610 --> 10:39.610
然后触发的对应的x型是谁

10:39.610 --> 10:40.610
对不对

10:40.610 --> 10:42.610
是不是就可以得到这些信息了

10:42.610 --> 10:43.610
好

10:43.610 --> 10:44.610
咱们来记录一下

10:44.610 --> 10:45.610
其实它这里边非常非常简单

10:45.610 --> 10:47.610
global表示什么意思呢

10:47.610 --> 10:52.610
global只要有任何

10:52.610 --> 10:54.610
它表示的意思是

10:54.610 --> 10:57.610
全局是否正在夹展

10:57.610 --> 11:00.610
正在处理副作用

11:00.610 --> 11:02.610
就是否正在夹展

11:02.610 --> 11:03.610
因为处理副作用的话

11:03.610 --> 11:04.610
往往是做一下

11:04.610 --> 11:05.610
大家可是请求

11:05.610 --> 11:08.610
就表示全局是否正在处理副作用

11:08.610 --> 11:11.610
只要有任何一个模型

11:11.610 --> 11:14.610
在处理副作用

11:14.610 --> 11:17.610
那么则该属性为处

11:17.610 --> 11:18.610
那么比方说

11:18.610 --> 11:20.610
我们有的时候触发了一个x型

11:20.610 --> 11:21.610
那么这个x型

11:21.610 --> 11:22.610
会导致多个模型

11:22.610 --> 11:25.610
去产生一些副作用的操作

11:25.610 --> 11:26.610
有没有这种可能

11:26.610 --> 11:27.610
当然有

11:27.610 --> 11:28.610
学生可能产生一些副作用

11:28.610 --> 11:30.610
然后Counter会产生一些副作用

11:30.610 --> 11:32.610
那么只要他们

11:32.610 --> 11:34.610
有任何一个模型在产生副作用

11:34.610 --> 11:35.610
OK

11:35.610 --> 11:36.610
那么global就为处

11:36.610 --> 11:37.610
就这么简单

11:37.610 --> 11:40.610
全局是否正在夹展

11:40.610 --> 11:42.610
那么model这个属性是什么

11:42.610 --> 11:46.610
model这个属性是一个对象

11:46.610 --> 11:51.610
对象中的属性名

11:51.610 --> 11:57.610
以及属性的值

11:57.610 --> 12:00.610
表示对应的

12:00.610 --> 12:03.610
就是哪个对应的模型

12:03.610 --> 12:07.610
可能是否在处理副作用中

12:07.610 --> 12:10.610
就是是否在夹展中

12:10.610 --> 12:11.610
就是什么意思呢

12:11.610 --> 12:13.610
因为我们之前有这么一个属性

12:13.610 --> 12:15.610
叫global就是全局的

12:15.610 --> 12:18.610
比方说我们这里有20几个模型

12:18.610 --> 12:21.610
任何一个模型处于正在夹展中

12:21.610 --> 12:24.610
那么global都委屈

12:24.610 --> 12:25.610
但是有的时候

12:25.610 --> 12:27.610
我们可能需要知道

12:27.610 --> 12:28.610
详细的知道

12:28.610 --> 12:30.610
到底是哪个模型在处理副作用

12:30.610 --> 12:32.610
哪个模型在异部行囚

12:32.610 --> 12:34.610
异部的就是使用阿迦克斯

12:34.610 --> 12:35.610
做一些副作用

12:35.610 --> 12:37.610
可能我们要做这么一种

12:37.610 --> 12:38.610
详细的分析

12:38.610 --> 12:40.610
因为比方说我们的页面是分开的

12:40.610 --> 12:42.610
因为我们的那个

12:42.610 --> 12:44.610
比方说技术器那个页面

12:44.610 --> 12:46.610
它要显示一个正在夹展中

12:46.610 --> 12:48.610
那么它只关心技术器

12:48.610 --> 12:49.610
是不是夹展中

12:49.610 --> 12:50.610
我不关心全局

12:50.610 --> 12:52.610
因为学生家是不是夹展

12:52.610 --> 12:53.610
跟我们没关系

12:53.610 --> 12:54.610
比方说学生的管理页面

12:54.610 --> 12:56.610
它要翻页对吧

12:56.610 --> 12:58.610
或者是要做一些什么查找

12:58.610 --> 12:59.610
查询压之类的

12:59.610 --> 13:00.610
我们要显示一个夹展中

13:00.610 --> 13:02.610
那么我们只关心学生的一块

13:02.610 --> 13:04.610
是不是有这么一个夹展中

13:04.610 --> 13:06.610
是不是处于夹展中

13:06.610 --> 13:08.610
只关心学生的模型

13:08.610 --> 13:10.610
那么我们怎么来得到这个信息呢

13:10.610 --> 13:12.610
就通过model里面来得到

13:12.610 --> 13:14.610
你看model里面

13:14.610 --> 13:16.610
你看这个x

13:16.610 --> 13:17.610
它触发过后了

13:17.610 --> 13:19.610
它就知道了model里面counter

13:19.610 --> 13:21.610
我正在处理counter

13:21.610 --> 13:22.610
counter是true

13:22.610 --> 13:24.610
所以说global是true

13:24.610 --> 13:25.610
global只要这个模型里面

13:25.610 --> 13:26.610
任何一个东西是true

13:26.610 --> 13:27.610
它都未true

13:27.610 --> 13:29.610
是这么个意思

13:29.610 --> 13:31.610
下一个

13:31.610 --> 13:32.610
Effects

13:32.610 --> 13:34.610
Effects的话是一个对象

13:34.610 --> 13:35.610
也一样的

13:35.610 --> 13:38.610
对象中的属性名以及属性的值

13:38.610 --> 13:43.610
表示是哪个action

13:43.610 --> 13:46.610
触发了副作用

13:46.610 --> 13:48.610
是哪个action触发了副作用

13:48.610 --> 13:50.610
那么这里你看Effects里面

13:50.610 --> 13:52.610
它里面是这个action的

13:52.610 --> 13:53.610
对吧

13:53.610 --> 13:55.610
是这个action触发了副作用

13:55.610 --> 13:57.610
那么我们也可以通过这个

13:57.610 --> 13:58.610
类型来判定

13:58.610 --> 14:00.610
通过这个action类型来判定

14:00.610 --> 14:01.610
是否夹载中

14:01.610 --> 14:02.610
它为true就表示

14:02.610 --> 14:04.610
触发了这个action还没有结束

14:04.610 --> 14:06.610
还正在夹载中

14:06.610 --> 14:08.610
就这么个意思

14:08.610 --> 14:10.610
然后这是一个action

14:10.610 --> 14:11.610
这是true这个action

14:11.610 --> 14:12.610
它会把它变成

14:12.610 --> 14:15.610
把它变成正在夹载中这个状态

14:15.610 --> 14:17.610
然后它后边还有一个

14:17.610 --> 14:18.610
还有一个对应的

14:18.610 --> 14:19.610
叫做hide

14:19.610 --> 14:21.610
你看hide是不是把触发完了

14:21.610 --> 14:22.610
increase

14:22.610 --> 14:24.610
您变成e触发完了

14:24.610 --> 14:26.610
触发完了过后变成hide

14:26.610 --> 14:27.610
触发完了过后了

14:27.610 --> 14:28.610
你看一下

14:28.610 --> 14:30.610
Global是变成force的

14:30.610 --> 14:31.610
为什么变成force

14:31.610 --> 14:32.610
因为模型里边

14:32.610 --> 14:34.610
已经没有任何一个东西是true了

14:34.610 --> 14:35.610
看到没

14:35.610 --> 14:36.610
模型里边

14:36.610 --> 14:37.610
已经没有任何一个东西是true了

14:37.610 --> 14:38.610
那么模型里边

14:38.610 --> 14:39.610
这个东西是夹载完了

14:39.610 --> 14:41.610
它从true变成force

14:41.610 --> 14:42.610
Global里边

14:42.610 --> 14:44.610
只要有模型里边

14:44.610 --> 14:45.610
有一个为true

14:45.610 --> 14:46.610
它就为true

14:46.610 --> 14:47.610
是这么个意思

14:47.610 --> 14:49.610
那么这个Effects

14:49.610 --> 14:50.610
你看

14:50.610 --> 14:51.610
触发了这个action

14:51.610 --> 14:54.610
它又从true变成force

14:54.610 --> 14:55.610
就这么个意思

14:55.610 --> 14:56.610
所以说

14:56.610 --> 14:58.610
有了这么一个插件之后

14:58.610 --> 14:59.610
我们就没有必要

14:59.610 --> 15:00.610
在每个对象里边

15:00.610 --> 15:02.610
去加一个e-node属性

15:02.610 --> 15:03.610
以前我们是不是加过的

15:03.610 --> 15:04.610
对吧

15:04.610 --> 15:05.610
那个属性

15:05.610 --> 15:06.610
表示是否正在加载中

15:06.610 --> 15:07.610
我们直接使用这个插件

15:07.610 --> 15:08.610
它就全部

15:08.610 --> 15:09.610
帮我们搞定了

15:09.610 --> 15:10.610
就帮我们搞定了

15:10.610 --> 15:11.610
就完了

15:11.610 --> 15:13.610
这个插件的作用就完了

15:13.610 --> 15:14.610
那么最后来说一下

15:14.610 --> 15:15.610
它的配置

15:15.610 --> 15:17.610
这里的配置

15:17.610 --> 15:18.610
配置是一个对象

15:18.610 --> 15:19.610
这个对象

15:19.610 --> 15:20.610
只有一个东西可以配置

15:20.610 --> 15:21.610
就是name space

15:21.610 --> 15:24.610
你看一下

15:24.610 --> 15:25.610
它这个配置

15:25.610 --> 15:27.610
它这里说了

15:27.610 --> 15:28.610
这个Options

15:28.610 --> 15:29.610
只有一个属性

15:29.610 --> 15:30.610
就是name space

15:30.610 --> 15:31.610
对吧

15:31.610 --> 15:32.610
那么这个东西控制啥呢

15:32.610 --> 15:34.610
控制的是

15:34.610 --> 15:35.610
控制的是

15:35.610 --> 15:36.610
就是这个名字

15:36.610 --> 15:37.610
这个状态的名字

15:37.610 --> 15:39.610
就这么简单

15:39.610 --> 15:43.610
比方说我们把它变成

15:43.610 --> 15:44.610
hand

15:44.610 --> 15:46.610
就是handle

15:46.610 --> 15:47.610
handle effect

15:47.610 --> 15:49.610
表示是否在处理副作用

15:49.610 --> 15:51.610
在处理副作用

15:51.610 --> 15:52.610
保存

15:52.610 --> 15:54.610
看一下吧

15:54.610 --> 15:56.610
那么现在我们看一下状态

15:56.610 --> 15:58.610
就变成handle effect

15:58.610 --> 15:59.610
对吧

15:59.610 --> 16:00.610
就名字变了

16:00.610 --> 16:02.610
就这么一个意思

16:02.610 --> 16:03.610
当然我们一般都可以

16:03.610 --> 16:04.610
不用去改它

16:04.610 --> 16:05.610
不用去改它

16:05.610 --> 16:06.610
那么接下来

16:06.610 --> 16:08.610
我们用它来实现这么一个例子

16:08.610 --> 16:09.610
好吧

16:09.610 --> 16:10.610
用它来实现这么一个例子

16:10.610 --> 16:12.610
比方Counter这个页面

16:12.610 --> 16:13.610
Counter这个模型里边

16:13.610 --> 16:14.610
我们

16:14.610 --> 16:15.610
模型里面都不用管了

16:15.610 --> 16:17.610
我们最大的组件里边搞定

16:17.610 --> 16:18.610
组件里边

16:18.610 --> 16:21.610
我们现在再加上这么一个

16:21.610 --> 16:23.610
一个DIV

16:23.610 --> 16:25.610
加上这么一个DIV

16:25.610 --> 16:27.610
这个DIV是一个

16:27.610 --> 16:29.610
用来显示是否正在加载中

16:29.610 --> 16:31.610
这个DIV

16:31.610 --> 16:33.610
用于显示是否加载中

16:33.610 --> 16:35.610
那么这个DIV的话

16:35.610 --> 16:37.610
我们加载中

16:37.610 --> 16:39.610
加载中

16:39.610 --> 16:42.610
我们在里边放一个

16:42.610 --> 16:44.610
再放一个DIV元素

16:44.610 --> 16:47.610
加载中

16:47.610 --> 16:49.610
好了

16:49.610 --> 16:51.610
我们之前是不是写过一个

16:51.610 --> 16:52.610
萌城组件

16:52.610 --> 16:54.610
我们之前是写过这么一个

16:54.610 --> 16:55.610
萌城组件对吧

16:55.610 --> 16:57.610
那就好了

16:57.610 --> 16:58.610
我们直接使用这个

16:58.610 --> 16:59.610
萌城组件就完事了

16:59.610 --> 17:01.610
那想我们这里导入

17:01.610 --> 17:02.610
Import

17:02.610 --> 17:03.610
Model

17:03.610 --> 17:04.610
From

17:04.610 --> 17:05.610
第二结纲

17:05.610 --> 17:06.610
Component

17:06.610 --> 17:07.610
Command

17:07.610 --> 17:08.610
Model

17:08.610 --> 17:09.610
我们这里直接使用这个

17:09.610 --> 17:10.610
萌城组件

17:10.610 --> 17:15.900
然后萌城组件里边

17:15.900 --> 17:17.900
就三个字加载中

17:17.900 --> 17:18.900
加载中

17:18.900 --> 17:19.900
大不了

17:19.900 --> 17:20.900
大不了我把它

17:20.900 --> 17:22.900
把文字变成白色

17:22.900 --> 17:24.900
DIV

17:24.900 --> 17:26.900
Style

17:26.900 --> 17:28.900
Color

17:28.900 --> 17:32.240
白色

17:32.240 --> 17:33.240
这里先写一个

17:33.240 --> 17:35.240
FoundSize

17:35.240 --> 17:37.240
FoundSize

17:37.240 --> 17:39.240
二一言

17:39.240 --> 17:41.240
行了写这么一个萌城

17:41.240 --> 17:43.240
那么这个萌城什么时候显示呢

17:43.240 --> 17:44.240
什么时候显示

17:44.240 --> 17:45.240
什么时候隐藏呢

17:45.240 --> 17:46.240
这个很简单

17:46.240 --> 17:47.240
我们如果说

17:47.240 --> 17:49.240
我们再写个字吧

17:49.240 --> 17:51.240
如果说

17:51.240 --> 17:52.240
这个萌

17:52.240 --> 17:53.240
如果说你给我一个属性

17:53.240 --> 17:55.240
是否要显示萌城

17:55.240 --> 17:56.240
如果说你

17:56.240 --> 17:57.240
要显示的话

17:57.240 --> 17:58.240
我就显示这一个

17:58.240 --> 17:59.240
不显示的话就不显示

17:59.240 --> 18:00.240
所以说你给我一个属性

18:00.240 --> 18:01.240
给我这个组件

18:01.240 --> 18:02.240
那么这个

18:02.240 --> 18:03.240
这个时候跟那个

18:03.240 --> 18:04.240
仓库没有任何关系

18:04.240 --> 18:05.240
它就是组件的属性

18:05.240 --> 18:06.240
那么你给我一个属性

18:06.240 --> 18:07.240
如果说

18:07.240 --> 18:08.240
ThisProbs

18:08.240 --> 18:09.240
IsNoting

18:09.240 --> 18:10.240
有这么一个属性

18:10.240 --> 18:11.240
它为True的话

18:11.240 --> 18:13.240
我就显示这么一个Model

18:13.240 --> 18:14.240
如果说你没有给我这个属性

18:14.240 --> 18:16.240
或者说它为Force的话

18:16.240 --> 18:17.240
我就不显示

18:17.240 --> 18:18.240
就这么简单

18:18.240 --> 18:19.240
就IsNoting这个属性

18:19.240 --> 18:20.240
好看一下

18:20.240 --> 18:21.240
一开始是不是没有显示

18:21.240 --> 18:22.240
对吧

18:22.240 --> 18:23.240
基础期没有显示

18:23.240 --> 18:24.240
如果说

18:24.240 --> 18:25.240
我在前面加个感叹号

18:25.240 --> 18:27.240
感叹号表示

18:27.240 --> 18:29.240
一开始

18:29.240 --> 18:31.240
ProbsOfUndefend

18:31.240 --> 18:32.240
我看一下

18:32.240 --> 18:33.240
OhThis

18:33.240 --> 18:35.240
不能用This

18:35.240 --> 18:36.240
叫感叹

18:36.240 --> 18:37.240
你看是不是显示到加载中

18:37.240 --> 18:38.240
对吧

18:38.240 --> 18:39.240
加载中

18:39.240 --> 18:40.240
那么现在

18:40.240 --> 18:41.240
一开始肯定是不显示的

18:41.240 --> 18:42.240
你给我这个属性

18:42.240 --> 18:44.240
那么为True的时候

18:44.240 --> 18:45.240
我才显示

18:45.240 --> 18:46.240
那么这个属性到底

18:46.240 --> 18:47.240
为不为True

18:47.240 --> 18:48.240
到底为不为True

18:48.240 --> 18:49.240
是不是

18:49.240 --> 18:51.240
通过MapStateToProbs

18:51.240 --> 18:52.240
是传进去

18:52.240 --> 18:53.240
对吧

18:53.240 --> 18:55.240
把IsNoting是不是传进去

18:55.240 --> 18:56.240
对不对

18:56.240 --> 18:57.240
那么这个IsNoting到底

18:57.240 --> 18:58.240
是不是委屈了

18:58.240 --> 19:00.240
是不是判断啥

19:00.240 --> 19:01.240
判断啥

19:01.240 --> 19:03.240
是不是判断这个仓库里边

19:03.240 --> 19:05.240
判断仓库里边

19:05.240 --> 19:07.240
这个Loading这个属性

19:07.240 --> 19:08.240
判断仓库里边

19:08.240 --> 19:09.240
这个Loading这个属性

19:09.240 --> 19:10.240
不是Global

19:10.240 --> 19:11.240
因为Global

19:11.240 --> 19:12.240
它表示全局的

19:12.240 --> 19:14.240
我们这里只关心技术器

19:14.240 --> 19:15.240
那一块

19:15.240 --> 19:16.240
是不是Loading

19:16.240 --> 19:17.240
是不是判断它的模型

19:17.240 --> 19:18.240
Models里边

19:18.240 --> 19:20.240
我们这里记笔记的时候

19:20.240 --> 19:22.240
这里是Models

19:23.240 --> 19:25.240
那么这个Models里边

19:25.240 --> 19:27.240
那么它的那个Counter属性

19:27.240 --> 19:28.240
是不是委屈

19:28.240 --> 19:29.240
对吧

19:29.240 --> 19:31.240
我们判断的State

19:31.240 --> 19:35.240
就是Models

19:35.240 --> 19:37.240
这个Counter这个属性

19:37.240 --> 19:38.240
是不是把这个属性传过去

19:38.240 --> 19:39.240
对吧

19:39.240 --> 19:40.240
那么这个属性委屈

19:40.240 --> 19:41.240
那么它就委屈

19:41.240 --> 19:42.240
这个属性围Force

19:42.240 --> 19:43.240
它就围Force

19:43.240 --> 19:44.240
这个属性围Undefine

19:44.240 --> 19:45.240
它就围Undefine

19:45.240 --> 19:46.240
对吧

19:46.240 --> 19:47.240
保存

19:47.240 --> 19:48.240
那咱们看一下

19:49.240 --> 19:50.240
是吧

19:50.240 --> 19:53.240
Counter

19:53.240 --> 19:54.240
Undefine

19:55.240 --> 19:56.240
它说

19:56.240 --> 20:00.000
这个地方是Undefine

20:00.000 --> 20:01.000
还有个Loading

20:01.000 --> 20:02.000
还有个Loading

20:03.000 --> 20:04.000
保存

20:06.000 --> 20:07.000
咱们一步加

20:07.000 --> 20:08.000
你看呀

20:08.000 --> 20:09.000
是不是就可以显示了

20:09.000 --> 20:10.000
对吧

20:10.000 --> 20:11.000
那么就非常非常方便了

20:11.000 --> 20:12.000
就不用

20:12.000 --> 20:13.000
就不用

20:13.000 --> 20:15.000
不像以前我们要自己去写这个

20:15.000 --> 20:16.000
就是Loading

20:16.000 --> 20:17.000
那么现在不用写了

20:18.000 --> 20:19.000
就没了

20:19.000 --> 20:21.000
这就是D-8中间键

20:21.000 --> 20:22.000
特别特别简单

20:22.000 --> 20:23.000
咱们下期可能来说一下

20:23.000 --> 20:24.000
它是怎么实现的

20:24.000 --> 20:26.000
它实现也非常非常简单

