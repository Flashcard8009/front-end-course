WEBVTT

00:00.820 --> 00:05.820
在页面上写一个最简单的东西

00:05.820 --> 00:07.820
就是Hello World 显示出来

00:07.820 --> 00:09.820
看一下怎么来写

00:09.820 --> 00:14.820
从页面里面也可以认识到React里面一些核心的概念

00:14.820 --> 00:18.820
我们这里不涉及到任何的脚手架

00:18.820 --> 00:21.820
也不需要用npm去安装任何东西

00:21.820 --> 00:24.820
就用最原始最原始的方式来写

00:24.820 --> 00:28.820
我们这里首先建立一个页面

00:29.820 --> 00:32.820
一个页面

00:32.820 --> 00:35.820
然后页面里边

00:35.820 --> 00:37.820
这里写个DIV

00:37.820 --> 00:41.820
这个DIV比方说react

00:41.820 --> 00:44.820
给它一个ID

00:44.820 --> 00:47.820
react root

00:47.820 --> 00:49.820
比方说给这么一个DIV

00:49.820 --> 00:51.820
或者就叫root

00:51.820 --> 00:54.820
我们现在要利用react

00:54.820 --> 00:56.820
往这个DIV里面加东西

00:56.820 --> 00:58.820
当然这个页面上有没有可能有其他东西

00:58.820 --> 01:00.820
当然也可能有

01:00.820 --> 01:02.820
比方说这个页面已经做好的

01:02.820 --> 01:04.820
之前已经用Jquery

01:04.820 --> 01:06.820
用一些其他的东西

01:06.820 --> 01:07.820
已经做好了一个页面了

01:07.820 --> 01:10.820
那么现在我们只是要对这个页面的某一个区域

01:10.820 --> 01:12.820
用react进行管理

01:12.820 --> 01:14.820
那么你把这个DIV找到就完事了

01:14.820 --> 01:16.820
总之我们这里使用ID

01:16.820 --> 01:18.820
当然也可以使用别的东西

01:18.820 --> 01:20.820
好 接下来我们要用react

01:20.820 --> 01:22.820
往这里边加东西

01:22.820 --> 01:24.820
在这里边加上一个比方说

01:24.820 --> 01:26.820
加上一个这么一个元素

01:26.820 --> 01:27.820
HE

01:27.820 --> 01:28.820
你不要写个Hello World

01:28.820 --> 01:30.820
比方说我们要做这么一件事

01:30.820 --> 01:32.820
只不过我们补直接写

01:32.820 --> 01:34.820
用react来加

01:34.820 --> 01:35.820
怎么来写呢

01:35.820 --> 01:36.820
首先我们肯定要引用

01:36.820 --> 01:38.820
因为它是一个第三方库

01:38.820 --> 01:40.820
所以说你肯定要引用它的一些介式

01:40.820 --> 01:42.820
引用什么介式呢

01:42.820 --> 01:44.820
你这里需要引用两个

01:44.820 --> 01:45.820
前两个就够了

01:45.820 --> 01:47.820
最后一个我们一会再说

01:47.820 --> 01:49.820
使用前两个就够了

01:49.820 --> 01:51.820
引用这么两个介式

01:51.820 --> 01:53.820
这两个介式我说一下

01:53.820 --> 01:55.820
这个两个介式里面

01:55.820 --> 01:57.820
你会发现它有了一个标记

01:57.820 --> 01:59.820
一个叫做Cross

01:59.820 --> 02:01.820
标记的名字叫做Cross Origin

02:01.820 --> 02:03.820
Cross Origin

02:03.820 --> 02:05.820
什么意思呢

02:05.820 --> 02:07.820
你们之前应该是讲过吧

02:07.820 --> 02:09.820
不说也没讲过的话

02:09.820 --> 02:10.820
我这里讲一下

02:10.820 --> 02:12.820
这表示跨域的意思

02:12.820 --> 02:13.820
对吧 跨域的意思

02:13.820 --> 02:14.820
什么意思

02:14.820 --> 02:16.820
你看一下这两个介式

02:16.820 --> 02:17.820
为什么引用两个

02:17.820 --> 02:18.820
我们一会再说

02:18.820 --> 02:20.820
你看一下这两个介式的路径

02:20.820 --> 02:22.820
是不是跟我们网站

02:22.820 --> 02:24.820
跟我们这个网站路径

02:24.820 --> 02:25.820
是不是不一样

02:25.820 --> 02:26.820
对不对 不一样的

02:26.820 --> 02:27.820
对不对

02:27.820 --> 02:28.820
是不是涉及到跨域

02:28.820 --> 02:29.820
对吧 你们以前学过

02:29.820 --> 02:31.820
阿迦克斯也学过跨域的

02:31.820 --> 02:33.820
但是呢

02:33.820 --> 02:35.820
像这种移密级元素

02:35.820 --> 02:37.820
像什么link元素

02:37.820 --> 02:39.820
像什么这个script元素

02:39.820 --> 02:41.820
他们的src地址

02:41.820 --> 02:43.820
本来就是可以跨域的

02:43.820 --> 02:45.820
你加这个东西有什么意义呢

02:45.820 --> 02:46.820
它是这样子

02:46.820 --> 02:48.820
虽然说这个元素

02:48.820 --> 02:50.820
它本身是可以跨域

02:50.820 --> 02:51.820
访问资源的

02:51.820 --> 02:53.820
本身是没有问题的

02:53.820 --> 02:54.820
但是呢

02:54.820 --> 02:56.820
如果你跨域了

02:56.820 --> 02:57.820
它就意味着

02:57.820 --> 02:58.820
如果报了错

02:58.820 --> 03:00.820
它不会告诉你错误的

03:00.820 --> 03:02.820
详细信息

03:02.820 --> 03:04.820
它只有一个非常非常简略的

03:04.820 --> 03:05.820
一个信息

03:05.820 --> 03:06.820
通过这个信息

03:06.820 --> 03:08.820
你很难找到错误

03:08.820 --> 03:09.820
因此呢

03:09.820 --> 03:11.820
我们通过加上这个属性

03:11.820 --> 03:13.820
加上这个属性过后

03:13.820 --> 03:15.820
它就可以到时候出了问题

03:15.820 --> 03:17.820
它就可以显示出

03:17.820 --> 03:18.820
详细的信息了

03:18.820 --> 03:20.820
这是这么一个用处

03:20.820 --> 03:21.820
你听明白吧

03:21.820 --> 03:23.820
就是如果跨域的资源的话

03:23.820 --> 03:24.820
那这里报了错

03:24.820 --> 03:26.820
它不会给你显示详细信息的

03:26.820 --> 03:27.820
如果你加上这个属性的话

03:27.820 --> 03:29.820
那么它就会给你显示详细信息

03:29.820 --> 03:31.820
就这么一个意思

03:31.820 --> 03:32.820
好

03:32.820 --> 03:34.820
为什么这里有两个呢

03:34.820 --> 03:36.820
为什么要引用两个JS呢

03:36.820 --> 03:38.820
我们来看一下这两个JS

03:38.820 --> 03:40.820
第一个JS叫做react

03:40.820 --> 03:42.820
后面是它的一个后维

03:42.820 --> 03:44.820
表示一个development

03:44.820 --> 03:46.820
表示开发

03:46.820 --> 03:49.820
开发版本里面有详细的就是调试信息

03:49.820 --> 03:51.820
当然你可以不使用开发版本

03:51.820 --> 03:52.820
使用别的版本也行

03:52.820 --> 03:53.820
我们这里呢

03:53.820 --> 03:55.820
就使用开发版本

03:55.820 --> 03:57.820
引用这个开发版本

03:57.820 --> 04:00.820
这里边是react的核心库

04:00.820 --> 04:05.820
这是react的核心库

04:05.820 --> 04:06.820
就这里边的东西呢

04:06.820 --> 04:08.820
它跟宿主环境无关

04:08.820 --> 04:10.820
可以用在页面上

04:10.820 --> 04:12.820
也可以用在一些其他的环境里边

04:12.820 --> 04:13.820
比如说手机端

04:13.820 --> 04:15.820
比如说桌面端

04:15.820 --> 04:17.820
比如说其他什么环境都可以

04:17.820 --> 04:18.820
所以说这个东西呢

04:18.820 --> 04:20.820
是react的核心库

04:20.820 --> 04:21.820
与什么

04:21.820 --> 04:23.820
与宿主环境

04:23.820 --> 04:26.820
宿主环境无关

04:26.820 --> 04:27.820
这是这一部分

04:27.820 --> 04:29.820
那么第二个JS呢

04:29.820 --> 04:31.820
它就不是核心库了

04:31.820 --> 04:33.820
它叫做reactdom

04:33.820 --> 04:34.820
也是官方出品的

04:34.820 --> 04:36.820
官方发布的一个包

04:36.820 --> 04:37.820
一个库

04:37.820 --> 04:38.820
那么这个库呢

04:38.820 --> 04:39.820
它作用是

04:39.820 --> 04:41.820
它依赖核心库

04:41.820 --> 04:43.820
依赖核心库

04:43.820 --> 04:44.820
然后呢

04:44.820 --> 04:47.820
将核心库的功能

04:47.820 --> 04:49.820
将核心库的功能

04:49.820 --> 04:52.820
与页面结合

04:52.820 --> 04:54.820
它主要是来处理页面的

04:54.820 --> 04:55.820
所以说你可以想象得到

04:55.820 --> 04:57.820
它为什么把它分开

04:57.820 --> 05:00.820
把页面上的处理和核心库分开

05:00.820 --> 05:01.820
分开的好处在于

05:01.820 --> 05:02.820
将来比方说

05:02.820 --> 05:04.820
我们要在手机端使用react

05:04.820 --> 05:06.820
将来我们会学习的RN

05:06.820 --> 05:08.820
它会在手机端使用react

05:08.820 --> 05:11.820
那么我们只需要使用核心库就行了

05:11.820 --> 05:12.820
那么这个东西

05:12.820 --> 05:13.820
就是把T换掉了

05:13.820 --> 05:14.820
对不对

05:14.820 --> 05:15.820
就不需要reactdom了

05:15.820 --> 05:16.820
这个reactdom

05:16.820 --> 05:18.820
它主要的作用就是

05:18.820 --> 05:20.820
把核心库的功能跟页面

05:20.820 --> 05:21.820
进行结合

05:21.820 --> 05:22.820
是这么一个作用

05:22.820 --> 05:23.820
你要这意思吧

05:23.820 --> 05:25.820
所以说它需要两个结合

05:25.820 --> 05:26.820
一个是核心库

05:26.820 --> 05:28.820
一个是跟页面相关的

05:28.820 --> 05:29.820
我们两个都要引用

05:29.820 --> 05:30.820
当然引用的顺序

05:30.820 --> 05:31.820
肯定是先引用核心库

05:31.820 --> 05:33.820
然后再引用这个东西

05:33.820 --> 05:35.820
引用完了之后

05:35.820 --> 05:36.820
我们就可以写代码了

05:36.820 --> 05:38.820
你看一下代码怎么写

05:38.820 --> 05:40.820
怎么写呢

05:40.820 --> 05:42.820
其实非常简单

05:42.820 --> 05:43.820
这个里边

05:43.820 --> 05:44.820
就第二个库里边

05:44.820 --> 05:46.820
它提供了跟页面相关的东西

05:46.820 --> 05:47.820
对吧

05:47.820 --> 05:48.820
我们要把它夹到页面里边去

05:48.820 --> 05:49.820
肯定要用这里边的东西

05:49.820 --> 05:50.820
它里边

05:50.820 --> 05:56.820
给我们提供了一个叫做reactdom的东西

05:56.820 --> 05:58.820
这个对象里边

05:58.820 --> 06:00.820
它提供了这么一个寒树

06:00.820 --> 06:01.820
reactdom里边

06:01.820 --> 06:02.820
这个对象哪来的

06:02.820 --> 06:03.820
这个对象是来自于这

06:03.820 --> 06:05.820
来自于这个库的

06:05.820 --> 06:06.820
你看吧

06:06.820 --> 06:07.820
看这个名字

06:07.820 --> 06:08.820
reactdom

06:08.820 --> 06:09.820
动物就是

06:09.820 --> 06:10.820
动物是不是页面的

06:10.820 --> 06:11.820
对不对

06:11.820 --> 06:12.820
动物就是页面的

06:12.820 --> 06:13.820
动物对象

06:13.820 --> 06:14.820
好

06:14.820 --> 06:16.820
这里边给你提供了一个寒树

06:16.820 --> 06:18.820
叫做create element

06:18.820 --> 06:20.820
不不不

06:20.820 --> 06:22.820
叫做那个render

06:22.820 --> 06:24.820
render

06:24.820 --> 06:25.820
一个render寒树

06:25.820 --> 06:27.820
所以跟那个伍佑似曾

06:27.820 --> 06:28.820
有点相似

06:28.820 --> 06:29.820
对不对

06:29.820 --> 06:30.820
提供一个render寒树

06:30.820 --> 06:32.820
这个render寒树里边

06:32.820 --> 06:33.820
传两个寒树

06:33.820 --> 06:35.820
第一个寒树的传理要

06:35.820 --> 06:37.820
显示的东西

06:37.820 --> 06:39.820
显示的东西

06:39.820 --> 06:40.820
第二个参数传什么呢

06:40.820 --> 06:42.820
传你的容器

06:42.820 --> 06:44.820
就是你要把这个显示的东西

06:44.820 --> 06:46.820
放到哪个容器里边

06:46.820 --> 06:47.820
就这么简单

06:47.820 --> 06:49.820
就是reactdom render

06:49.820 --> 06:50.820
好

06:50.820 --> 06:51.820
比方说吧

06:51.820 --> 06:52.820
显示的东西

06:52.820 --> 06:53.820
我们就写个支付串

06:53.820 --> 06:54.820
可不可以写支付串

06:54.820 --> 06:55.820
可以

06:55.820 --> 06:57.820
比方说 hello world

06:57.820 --> 06:58.820
好容器写啥呢

06:58.820 --> 06:59.820
是不是写这个div

06:59.820 --> 07:00.820
对不对

07:00.820 --> 07:01.820
写这个div

07:01.820 --> 07:03.820
document gets element

07:03.820 --> 07:05.820
by id root

07:05.820 --> 07:06.820
你看一下

07:06.820 --> 07:07.820
保存

07:07.820 --> 07:11.510
咱们来运行一下这个网页

07:12.510 --> 07:13.510
关掉其他的

07:15.510 --> 07:16.510
没出来

07:16.510 --> 07:17.510
他这里报了个错

07:17.510 --> 07:21.510
他说reactdom is not defend

07:21.510 --> 07:22.510
我们来看一下

07:22.510 --> 07:23.510
这怎么回事

07:23.510 --> 07:24.510
我看一下这个地方

07:24.510 --> 07:26.510
这个地址能不能访问

07:26.510 --> 07:28.510
这个地址能不能访问

07:28.510 --> 07:30.510
这个地址可以访问的

07:30.510 --> 07:32.510
我哪里写错了

07:32.510 --> 07:34.510
是这里

07:34.510 --> 07:36.510
这个地方全部是大写

07:36.510 --> 07:38.510
reactdom render

07:38.510 --> 07:39.510
咱们来看一下

07:39.510 --> 07:40.510
保存

07:40.510 --> 07:41.510
你看

07:41.510 --> 07:42.510
Hello world 显示出来了

07:42.510 --> 07:43.510
对吧

07:43.510 --> 07:44.510
右键咱们检查一下

07:44.510 --> 07:45.510
他现在没有错误了

07:45.510 --> 07:46.510
对不对

07:46.510 --> 07:47.510
我们来看一下

07:47.510 --> 07:48.510
这个div id root

07:48.510 --> 07:50.510
里面说填了个Hello world

07:50.510 --> 07:51.510
对不对

07:51.510 --> 07:52.510
没问题吧

07:52.510 --> 07:53.510
对

07:53.510 --> 07:54.510
这是我们写的代码对不对

07:54.510 --> 07:55.510
下面这个是我的

07:55.510 --> 07:56.510
vscode

07:56.510 --> 07:57.510
插件家的东西

07:57.510 --> 07:58.510
不用管他

07:58.510 --> 07:59.510
好吧

07:59.510 --> 08:00.510
说完了

08:00.510 --> 08:01.510
对不对

08:01.510 --> 08:02.510
于是我们这里

08:02.510 --> 08:03.510
就可以认识到

08:03.510 --> 08:04.510
reactdom 里面

08:04.510 --> 08:05.510
给我们提供了一个对象

08:05.510 --> 08:07.510
叫做reactdom

08:07.510 --> 08:08.510
它里面提供了一个方法

08:08.510 --> 08:09.510
叫做render

08:09.510 --> 08:10.510
render什么意思

08:10.510 --> 08:11.510
渲染了意思

08:11.510 --> 08:12.510
渲染了意思

08:12.510 --> 08:13.510
渲染一个啥

08:13.510 --> 08:14.510
渲染一个制服串

08:14.510 --> 08:15.510
把它放到哪儿了

08:15.510 --> 08:16.510
把它放到这里

08:16.510 --> 08:17.510
对不对

08:17.510 --> 08:19.510
当然我们现在的要求

08:19.510 --> 08:21.510
不是渲染这么一个制服串

08:21.510 --> 08:23.510
而是要渲染一个元素出来

08:23.510 --> 08:25.510
要创建一个元素

08:25.510 --> 08:26.510
把它放进去

08:26.510 --> 08:28.510
那怎么创建元素呢

08:28.510 --> 08:30.510
我们现在在这里

08:30.510 --> 08:34.510
创建一个he

08:34.510 --> 08:36.510
he元素

08:36.510 --> 08:38.510
然后把这个he元素

08:38.510 --> 08:39.510
放到这儿

08:39.510 --> 08:41.510
看着

08:41.510 --> 08:43.510
he元素

08:43.510 --> 08:44.510
这里创建

08:44.510 --> 08:45.510
创建

08:45.510 --> 08:47.510
把这个he元素放到这儿

08:47.510 --> 08:48.510
我们要渲染这么个东西

08:48.510 --> 08:49.510
好

08:49.510 --> 08:51.510
怎么来创建一个he元素呢

08:51.510 --> 08:52.510
大家可以感觉到

08:52.510 --> 08:54.510
这个react

08:54.510 --> 08:55.510
学习起来

08:55.510 --> 08:57.510
可能跟veo

08:57.510 --> 08:58.510
学习起来

08:58.510 --> 08:59.510
就没有那么轻松了

08:59.510 --> 09:02.510
因为它比较偏向于底层一点

09:02.510 --> 09:03.510
比较灵活

09:03.510 --> 09:05.510
所以说它没有封装的那么死

09:05.510 --> 09:06.510
那么怎么来创建

09:06.510 --> 09:07.510
一起一个元素呢

09:07.510 --> 09:08.510
我们要用这个裤

09:08.510 --> 09:09.510
核心裤

09:09.510 --> 09:11.510
不是说核心裤

09:11.510 --> 09:12.510
跟那个什么

09:12.510 --> 09:14.510
跟宿主环境没无关吗

09:14.510 --> 09:16.510
那里这里元素怎么

09:16.510 --> 09:17.510
要用核心裤的东西呢

09:17.510 --> 09:18.510
元素不是浏览器的吗

09:18.510 --> 09:20.510
但是大家注意

09:20.510 --> 09:22.510
核心裤里面的元素

09:22.510 --> 09:23.510
我们这里最好记一笔

09:23.510 --> 09:24.510
这个很重要

09:24.510 --> 09:26.510
非常非常重要

09:27.510 --> 09:28.510
核心裤里面

09:28.510 --> 09:29.510
给我们提供了一个东西

09:29.510 --> 09:31.510
叫做react

09:31.510 --> 09:32.510
react对象

09:32.510 --> 09:34.510
对象里面有一个方法

09:34.510 --> 09:36.510
叫做create element

09:36.510 --> 09:38.510
是不是跟那个document

09:38.510 --> 09:39.510
create element很像

09:39.510 --> 09:40.510
对不对

09:40.510 --> 09:41.510
提供了这么一个方法

09:41.510 --> 09:42.510
它是指的是

09:42.510 --> 09:45.510
创建一个react元素

09:45.510 --> 09:47.510
注意它创造的不是多么元素

09:47.510 --> 09:48.510
不是我们之前学习的

09:48.510 --> 09:49.510
这个document

09:49.510 --> 09:50.510
create element

09:50.510 --> 09:51.510
创建的是多么元素

09:51.510 --> 09:53.510
它创建的是一个react元素

09:53.510 --> 09:55.510
我们把它认为

09:55.510 --> 10:01.510
称作虚拟东

10:01.510 --> 10:04.510
本质上是一个对象

10:04.510 --> 10:06.510
就是一个普普通通的

10:06.510 --> 10:07.510
即也是对象

10:07.510 --> 10:08.510
所以说我们这里

10:08.510 --> 10:09.510
要创建元素

10:09.510 --> 10:11.510
不能使用什么document

10:11.510 --> 10:12.510
create element

10:12.510 --> 10:13.510
不能使用这种方式来创建

10:13.510 --> 10:15.510
而要使用什么方式创建

10:15.510 --> 10:17.510
而要使用react

10:17.510 --> 10:18.510
在这个裤里面

10:18.510 --> 10:19.510
核心裤里面

10:19.510 --> 10:20.510
它提供了一个方法

10:20.510 --> 10:23.510
叫做create element

10:23.510 --> 10:25.510
要通过这种方式

10:25.510 --> 10:27.510
来创建元素

10:27.510 --> 10:28.510
好 那么这里边

10:28.510 --> 10:30.510
这里边有哪些参数呢

10:30.510 --> 10:31.510
它第一个参数

10:31.510 --> 10:33.510
指的是元素内形

10:33.510 --> 10:35.510
好 这个元素内形

10:35.510 --> 10:36.510
它可以是个制服串

10:36.510 --> 10:37.510
如果你是一个制服串的话

10:37.510 --> 10:39.510
往往是创建一个

10:39.510 --> 10:42.510
就是往往是创建一个

10:42.510 --> 10:44.510
跟n级面相关的元素

10:44.510 --> 10:45.510
比方说h1

10:45.510 --> 10:46.510
什么div

10:46.510 --> 10:47.510
什么p元素

10:47.510 --> 10:48.510
e密集 像这些东西

10:48.510 --> 10:50.510
像这些东西元素

10:50.510 --> 10:51.510
但是呢

10:51.510 --> 10:52.510
如果你可不可以

10:52.510 --> 10:53.510
不写制服串了

10:53.510 --> 10:54.510
也可以

10:54.510 --> 10:55.510
我们后边学到

10:55.510 --> 10:56.510
组建之后

10:56.510 --> 10:57.510
也可以传一个组建进来

10:57.510 --> 10:58.510
也行

10:58.510 --> 10:59.510
总之 第一个参数

10:59.510 --> 11:00.510
要什么意思

11:00.510 --> 11:01.510
第一个参数

11:01.510 --> 11:03.510
我们这里说一下

11:03.510 --> 11:05.510
参数1

11:05.510 --> 11:07.510
参数1

11:07.510 --> 11:08.510
它表示什么意思呢

11:08.510 --> 11:11.510
表示的是元素内形

11:11.510 --> 11:13.510
如果是制服串

11:13.510 --> 11:15.510
表示的是

11:15.510 --> 11:18.510
一个普通的atm元素

11:18.510 --> 11:19.510
但是你注意

11:19.510 --> 11:21.510
哪怕是一个普通的atm元素

11:21.510 --> 11:23.510
它也是一个对象

11:23.510 --> 11:24.510
也是个对象

11:24.510 --> 11:25.510
并且不是动物对象

11:25.510 --> 11:28.510
而叫做reaction元素对象

11:28.510 --> 11:29.510
一定要理解清楚这个东西

11:29.510 --> 11:31.510
非常非常重要

11:31.510 --> 11:32.510
它的本质是一个对象

11:32.510 --> 11:33.510
以后呢

11:33.510 --> 11:34.510
我们还可以打印出来看一下

11:34.510 --> 11:36.510
create element

11:36.510 --> 11:37.510
这里面我们写啥呢

11:37.510 --> 11:38.510
是不是写he

11:38.510 --> 11:39.510
对不对

11:39.510 --> 11:40.510
创建一个he元素

11:40.510 --> 11:41.510
但是一定要注意

11:41.510 --> 11:42.510
它不是动物元素

11:42.510 --> 11:44.510
不是动物元素

11:44.510 --> 11:45.510
然后呢

11:45.510 --> 11:46.510
第二个参数写啥呢

11:46.510 --> 11:49.510
第二个参数写元素的属性

11:49.510 --> 11:51.510
参数2

11:51.510 --> 11:54.510
它是元素的属性

11:54.510 --> 11:55.510
它是一个对象

11:55.510 --> 11:56.510
一个对象

11:56.510 --> 11:57.510
来表示元素的属性

11:57.510 --> 11:59.510
当然这个he元素

11:59.510 --> 12:01.510
也没有啥属性对吧

12:01.510 --> 12:02.510
什么叫属性

12:02.510 --> 12:03.510
就是这个东西

12:03.510 --> 12:04.510
这个东西就是属性

12:04.510 --> 12:05.510
he元素

12:05.510 --> 12:06.510
该写个属性吧

12:06.510 --> 12:07.510
强性给它写一个

12:07.510 --> 12:08.510
给它体会一下

12:08.510 --> 12:09.510
一个对象

12:09.510 --> 12:10.510
这个对象里边

12:10.510 --> 12:12.510
给它写个title

12:12.510 --> 12:16.510
第一个reaction

12:16.510 --> 12:20.510
reaction元素

12:20.510 --> 12:21.510
注意

12:21.510 --> 12:22.510
它不是动物元素

12:22.510 --> 12:23.510
它是reaction元素

12:23.510 --> 12:24.510
反复强调

12:24.510 --> 12:25.510
好

12:25.510 --> 12:26.510
这是第二个参数

12:26.510 --> 12:27.510
然后

12:27.510 --> 12:28.510
其实我们这样子

12:28.510 --> 12:29.510
写了过后来看一下吧

12:29.510 --> 12:31.510
保存来看一下

12:31.510 --> 12:32.510
啥东西都没有

12:32.510 --> 12:33.510
啥东西都没有

12:33.510 --> 12:34.510
但是你会发现

12:34.510 --> 12:35.510
div里边

12:35.510 --> 12:36.510
你看一下

12:36.510 --> 12:37.510
是不是多了一个he元素了

12:37.510 --> 12:38.510
你看一下

12:38.510 --> 12:39.510
是吧

12:39.510 --> 12:40.510
创建了一个元素

12:40.510 --> 12:41.510
对不对

12:41.510 --> 12:44.510
那么这里有个疑问

12:44.510 --> 12:45.510
就是说

12:45.510 --> 12:46.510
你刚才不是说

12:46.510 --> 12:48.510
这个玩意就是一个对象吗

12:48.510 --> 12:50.510
它凭什么又变成了he元素了

12:50.510 --> 12:54.510
变成he元素是它的功能

12:54.510 --> 12:57.510
它的作用是把我们的reaction元素

12:57.510 --> 13:00.510
变成真实的动物对象

13:00.510 --> 13:01.510
因为它的功能是什么

13:01.510 --> 13:03.510
与页面结合

13:03.510 --> 13:04.510
原来这意思吧

13:04.510 --> 13:06.510
它的功能是与页面结合

13:06.510 --> 13:07.510
我们这里只是一个

13:07.510 --> 13:08.510
普通的介石对象而已

13:08.510 --> 13:10.510
那么它可以把普通的介石对象

13:10.510 --> 13:12.510
就是虚拟动物

13:12.510 --> 13:14.510
变成真实的动物对象

13:14.510 --> 13:15.510
所以说你看

13:15.510 --> 13:16.510
这个元素已经创建好了

13:16.510 --> 13:17.510
放到这了

13:17.510 --> 13:18.510
对不对

13:18.510 --> 13:19.510
我们reaction里边

13:19.510 --> 13:21.510
是这样的创建元素的

13:21.510 --> 13:22.510
好

13:22.510 --> 13:23.510
第三个参数

13:23.510 --> 13:25.510
它还可以写第三个参数

13:25.510 --> 13:26.510
当然对后边的参数

13:26.510 --> 13:27.510
它可以写第三个

13:27.510 --> 13:29.510
第四个第五个写真一朵

13:29.510 --> 13:32.510
就是它可以写一个圣语参数

13:32.510 --> 13:33.510
我们之前学es6

13:33.510 --> 13:34.510
你知道圣语参数

13:34.510 --> 13:35.510
对吧

13:35.510 --> 13:37.510
那么后边的参数

13:37.510 --> 13:38.510
后续参数

13:38.510 --> 13:39.510
它指的是什么呢

13:39.510 --> 13:42.510
元素的指节点

13:42.510 --> 13:43.510
指节点

13:43.510 --> 13:46.510
当然这些指节点仍然是

13:46.510 --> 13:50.510
仍然是reaction元素

13:50.510 --> 13:51.510
比方说

13:51.510 --> 13:52.510
直接的就写个内容

13:52.510 --> 13:53.510
写个字幕串

13:53.510 --> 13:54.510
比方说

13:54.510 --> 13:57.510
Hello World

13:57.510 --> 13:59.510
保存看一下

13:59.510 --> 14:01.510
你看一下

14:01.510 --> 14:03.510
Hello World是不是出来了

14:03.510 --> 14:04.510
对吧

14:04.510 --> 14:05.510
你看一下

14:05.510 --> 14:06.510
A7的指节点

14:06.510 --> 14:07.510
Hello World

14:07.510 --> 14:08.510
好

14:08.510 --> 14:09.510
比方说

14:09.510 --> 14:10.510
我们除了加文本之外

14:10.510 --> 14:12.510
我们还可以继续加东西

14:12.510 --> 14:13.510
比方说

14:13.510 --> 14:14.510
再加一个

14:14.510 --> 14:15.510
比方说

14:15.510 --> 14:16.510
Hello加一个

14:16.510 --> 14:17.510
然后再加一个

14:17.510 --> 14:20.510
World保存

14:20.510 --> 14:21.510
分两次加

14:21.510 --> 14:22.510
可不可以

14:22.510 --> 14:23.510
也可以

14:23.510 --> 14:24.510
看到没

14:24.510 --> 14:25.510
就两个指节点

14:25.510 --> 14:27.510
两个指节点

14:27.510 --> 14:28.510
还能不能加

14:28.510 --> 14:29.510
其他元素

14:29.510 --> 14:30.510
也可以加

14:30.510 --> 14:31.510
比方说

14:31.510 --> 14:32.510
我们这里再创建一个

14:32.510 --> 14:35.510
创建一个P元素

14:35.510 --> 14:36.510
P元素

14:36.510 --> 14:38.510
比方说P元素

14:38.510 --> 14:39.510
当然也是reaction元素

14:39.510 --> 14:40.510
一定要搞清楚

14:40.510 --> 14:41.510
createElement

14:41.510 --> 14:42.510
P元素

14:42.510 --> 14:44.510
然后这里边

14:44.510 --> 14:46.510
它的属性没有什么属性

14:46.510 --> 14:47.510
P元素的内容

14:47.510 --> 14:49.510
内容是

14:49.510 --> 14:50.510
什么内容

14:50.510 --> 14:52.510
就一个P元素

14:52.510 --> 14:53.510
一个P元素

14:53.510 --> 14:54.510
好

14:54.510 --> 14:55.510
OK

14:55.510 --> 14:56.510
咱们这里写了一个P元素

14:56.510 --> 14:57.510
也是个reaction元素

14:57.510 --> 14:58.510
好

14:58.510 --> 14:59.510
我们继续往后面写

14:59.510 --> 15:00.510
那么把这个P元素

15:00.510 --> 15:01.510
加到A7里面

15:01.510 --> 15:02.510
A7

15:02.510 --> 15:03.510
对

15:03.510 --> 15:04.510
A7里面是不能加P元素的

15:04.510 --> 15:05.510
OK

15:05.510 --> 15:07.890
加Span

15:07.890 --> 15:09.890
把Span加进去

15:09.890 --> 15:10.890
保存

15:10.890 --> 15:11.890
你看一下

15:12.890 --> 15:13.890
你看

15:13.890 --> 15:14.890
这里边是不是一个Span元素

15:14.890 --> 15:15.890
对不对

15:15.890 --> 15:17.890
那如果还要往Span元素里边加元素

15:17.890 --> 15:18.890
是不是一样的

15:18.890 --> 15:19.890
对吧

15:19.890 --> 15:20.890
一样的这种嵌套规则

15:21.890 --> 15:22.890
好麻烦

15:22.890 --> 15:23.890
先别着急

15:23.890 --> 15:25.890
这是它最原式的写法

15:25.890 --> 15:27.890
这是它最核心最核心的功能

15:27.890 --> 15:28.890
它创建元素

15:28.890 --> 15:30.890
是用这种方式来创建的

15:30.890 --> 15:31.890
创建的是什么

15:31.890 --> 15:33.890
创建的是一个一个的对象

15:33.890 --> 15:35.890
然后交给reactionDoom

15:35.890 --> 15:37.890
它会把它转换成

15:37.890 --> 15:39.890
真实的Doom对象

15:40.890 --> 15:41.890
保存

15:41.890 --> 15:43.890
那咱们看一下

15:43.890 --> 15:44.890
这里的元素结构

15:44.890 --> 15:45.890
是不是出来了

15:45.890 --> 15:46.890
对不对

15:46.890 --> 15:47.890
这是这一块

15:47.890 --> 15:50.890
咱们把A7元素打印出来看一下

15:51.890 --> 15:52.890
A7元素打印出来

15:52.890 --> 15:53.890
你看一下它的本质是什么

15:53.890 --> 15:54.890
保存

15:55.890 --> 15:56.890
看一下控制台

15:56.890 --> 15:57.890
你看一下

15:57.890 --> 15:58.890
这个东西

15:58.890 --> 16:00.890
相不像动物元素

16:00.890 --> 16:02.890
这都是什么动物元素

16:02.890 --> 16:03.890
动物元素是这个样子吗

16:03.890 --> 16:05.890
咱们看一下动物元素是什么样子

16:05.890 --> 16:07.890
CreateElement

16:08.890 --> 16:10.890
比方说A7元素

16:10.890 --> 16:12.890
比方说咱们来看一下动物元素

16:15.520 --> 16:17.520
CancelDRDoom

16:18.520 --> 16:19.520
看一下A7

16:19.520 --> 16:21.520
动物元素是这个样子对不对

16:21.520 --> 16:22.520
这才是动物元素

16:22.520 --> 16:24.520
那你这个玩意是动物元素吗

16:24.520 --> 16:25.520
肯定不是

16:25.520 --> 16:26.520
你看一下

16:26.520 --> 16:28.520
它是有这么一些属性

16:28.520 --> 16:29.520
这么一些属性

16:29.520 --> 16:30.520
这些属性

16:30.520 --> 16:31.520
我们以后再分析原码的时候

16:31.520 --> 16:33.520
会详细说

16:33.520 --> 16:34.520
好

16:34.520 --> 16:35.520
你看一下它有一个props

16:35.520 --> 16:36.520
它的属性

16:36.520 --> 16:38.520
属性里边还有一个title

16:38.520 --> 16:40.520
你看A7是不是有title

16:40.520 --> 16:41.520
第一个reaction元素

16:41.520 --> 16:42.520
你看指着它

16:42.520 --> 16:43.520
你看就显示出来了

16:43.520 --> 16:44.520
第一个

16:44.520 --> 16:46.520
指着它

16:46.520 --> 16:48.520
第一个reaction元素看到没

16:48.520 --> 16:49.520
显示出来了

16:49.520 --> 16:51.520
然后它还有一个签准属性

16:51.520 --> 16:53.520
签准的表达的指元素

16:53.520 --> 16:55.520
都是reaction元素

16:55.520 --> 16:56.520
指元素

16:56.520 --> 16:57.520
你看指元素有两个字部串

16:57.520 --> 16:59.520
第三个是一个

16:59.520 --> 17:01.520
是不是又是一个reaction元素

17:01.520 --> 17:03.520
又是个reaction元素

17:03.520 --> 17:04.520
你看

17:05.520 --> 17:07.520
第三个reaction元素里边

17:07.520 --> 17:08.520
它又有一个指元素

17:08.520 --> 17:09.520
指元素是什么一个字部串

17:09.520 --> 17:12.520
它形成了这么一种对象结构

17:12.520 --> 17:14.520
它用一个对象结构

17:14.520 --> 17:17.520
来描述我们的元素结构

17:17.520 --> 17:19.520
这个元素它最终显示到

17:19.520 --> 17:20.520
页面上

17:20.520 --> 17:21.520
还是显示到手机端

17:21.520 --> 17:22.520
我不管

17:22.520 --> 17:24.520
就这个cool了

17:24.520 --> 17:25.520
这个jscool它不管

17:25.520 --> 17:28.520
我只是用对象来描述我们的

17:28.520 --> 17:29.520
元素结构

17:29.520 --> 17:30.520
那么

17:30.520 --> 17:31.520
到时候

17:31.520 --> 17:32.520
这个东西可以显示到页面上

17:32.520 --> 17:33.520
也可以显示到手机端

17:33.520 --> 17:34.520
也可以显示到任何地方

17:34.520 --> 17:35.520
原来的意思

17:35.520 --> 17:37.520
它是用这种方式来做的

17:37.520 --> 17:39.520
这一部分是reaction的功能

17:39.520 --> 17:41.520
这一部分是reactiondom的功能

17:41.520 --> 17:43.520
它负责把reaction元素

17:43.520 --> 17:46.520
渲染到页面上

17:46.520 --> 17:47.520
好

17:47.520 --> 17:50.520
这是这么一个结构

17:50.520 --> 17:51.520
OK

17:51.520 --> 17:52.520
我们就用creaseElement

17:52.520 --> 17:54.520
大家首先要认识一下这个方法

17:54.520 --> 17:56.520
我们这几个最核心的东西

17:56.520 --> 17:58.520
就要认识这个方法

17:58.520 --> 17:59.520
好

17:59.520 --> 18:01.520
这种东西写起来麻不麻烦

18:01.520 --> 18:03.520
当然非常非常的麻烦

18:03.520 --> 18:04.520
以后我创建员说

18:04.520 --> 18:05.520
我要封掉

18:05.520 --> 18:06.520
真的要封掉

18:06.520 --> 18:08.520
我要用这种方式一个个创建

18:08.520 --> 18:09.520
还不如用以前我们学习的

18:09.520 --> 18:11.520
document,creaseElement

18:11.520 --> 18:12.520
还不如用以前的东西

18:12.520 --> 18:14.520
那这个东西

18:14.520 --> 18:16.520
我们为什么要学习它呢

18:16.520 --> 18:19.520
是因为我们要学习reaction的本质

18:19.520 --> 18:21.520
它创建元素是怎么回事

18:21.520 --> 18:23.520
它创建的到底是啥东西

18:23.520 --> 18:24.520
是一个一个的对象

18:24.520 --> 18:27.520
它把这些对象形成一种结构

18:27.520 --> 18:28.520
形成一种结构

18:28.520 --> 18:30.520
最终交给reactiondom

18:30.520 --> 18:31.520
把它渲染到页面上

18:31.520 --> 18:33.520
我们最终要学习的是这么个东西

18:33.520 --> 18:35.520
实际上我们以后

18:35.520 --> 18:36.520
在做reaction开发的时候

18:36.520 --> 18:38.520
根本不会用这种方式来写

18:38.520 --> 18:39.520
那会怎么写呢

18:39.520 --> 18:40.520
看着我们看一下

18:40.520 --> 18:41.520
第二种书写方式

18:41.520 --> 18:44.520
第二种书写方式叫做GSX

18:46.520 --> 18:47.520
它是什么呢

18:47.520 --> 18:50.520
它是GS的扩展语法

18:50.520 --> 18:51.520
扩展语法

18:51.520 --> 18:55.520
它的这个语法规则是由Facebook提出的

18:55.520 --> 18:57.520
但是目前官方好像

18:57.520 --> 19:00.520
没有甩它

19:00.520 --> 19:02.520
ES官方没有把它

19:02.520 --> 19:04.520
拉入自己的标准里面

19:04.520 --> 19:05.520
所以说这个规则

19:05.520 --> 19:06.520
你可以用

19:06.520 --> 19:10.520
但是你必须要用bybal来进行编译

19:10.520 --> 19:11.520
介绍扩展语法

19:11.520 --> 19:16.520
需要使用bybal进行转移

19:16.520 --> 19:20.520
因为标准里边并不支持

19:20.520 --> 19:22.520
我们来看一下GSX语法

19:22.520 --> 19:24.520
其实5U里面能不能用这个东西

19:24.520 --> 19:25.520
它也可以用

19:25.520 --> 19:26.520
只是5U里面

19:26.520 --> 19:28.520
我们平时都没有用这个东西

19:28.520 --> 19:29.520
平时没有用

19:29.520 --> 19:32.520
为什么要搞出这么一个语法呢

19:32.520 --> 19:34.520
就是Facebook认为

19:34.520 --> 19:35.520
我们的界面

19:35.520 --> 19:38.520
终归要在GS里面创建

19:38.520 --> 19:39.520
而不应该是在atema创建的

19:39.520 --> 19:41.520
你看跟以前5U就不一样

19:41.520 --> 19:42.520
以前5U我们在这里写

19:42.520 --> 19:43.520
最开始的时候

19:43.520 --> 19:45.520
还不撕掉角色架的时候

19:45.520 --> 19:46.520
是不是在这里

19:46.520 --> 19:47.520
就可以直接书写

19:47.520 --> 19:48.520
咱们的元素结构了

19:48.520 --> 19:49.520
对吧

19:49.520 --> 19:50.520
对不对

19:50.520 --> 19:51.520
直接在这里书写元素结构

19:51.520 --> 19:53.520
但是在react里面不一样

19:53.520 --> 19:54.520
它认为

19:54.520 --> 19:56.520
不应该去动atema里面的东西

19:56.520 --> 19:57.520
所有东西

19:57.520 --> 19:59.520
应该在GS里面完成

19:59.520 --> 20:01.520
因为GS它是最功能最强大

20:01.520 --> 20:02.520
最灵活的

20:02.520 --> 20:04.520
要比atema功能强大得多

20:04.520 --> 20:06.520
它更加容易拆分

20:06.520 --> 20:08.520
和使用一些模式

20:08.520 --> 20:11.520
所以说它的整体失动了

20:11.520 --> 20:14.520
它是要把这个元素写到atema里面

20:14.520 --> 20:16.520
你这样子写不是很麻烦吗

20:16.520 --> 20:17.520
我给你搞一个东西出来

20:17.520 --> 20:19.520
让你简化你的书写

20:19.520 --> 20:21.520
这个东西就是GSX

20:21.520 --> 20:24.520
但是由于标准目前不支持

20:24.520 --> 20:26.520
所以说你需要用bible来进行转移

20:26.520 --> 20:28.520
那么我们看上边

20:28.520 --> 20:29.520
是不是多了一个GS

20:29.520 --> 20:30.520
这个GS干嘛的

20:30.520 --> 20:32.520
是不是就是bible对不对

20:32.520 --> 20:33.520
我们以前学waypack

20:33.520 --> 20:34.520
对不对

20:34.520 --> 20:35.520
是不是学过这个玩意

20:35.520 --> 20:37.520
bible8别塔

20:37.520 --> 20:38.520
不应该读bible

20:38.520 --> 20:41.520
应该读bible8别塔

20:41.520 --> 20:42.520
对不对

20:42.520 --> 20:45.520
然后把这个东西引用进去

20:45.520 --> 20:48.520
我们这里再建个页面

20:48.520 --> 20:49.520
TES-2

20:49.520 --> 20:51.520
第二种书写rekt的方式

20:51.520 --> 20:53.520
我们来做一个同样的功能

20:53.520 --> 20:55.520
做一个一模一样的功能

20:55.520 --> 20:57.520
dave root

20:57.520 --> 21:01.830
这两个GS先引用进来

21:01.830 --> 21:04.830
先引用进来

21:04.830 --> 21:06.830
再引用一个

21:07.830 --> 21:09.830
这个GS

21:09.830 --> 21:10.830
复制

21:10.830 --> 21:11.830
展开过来

21:11.830 --> 21:13.830
这个GS

21:15.830 --> 21:19.270
它的作用是

21:19.270 --> 21:22.270
转移GSX

21:22.270 --> 21:23.270
转移GSX

21:23.270 --> 21:24.270
就是边移

21:24.270 --> 21:26.270
边移GSX

21:27.270 --> 21:28.270
有了它之后

21:28.270 --> 21:30.270
我们后边写代码是这样子写的

21:31.270 --> 21:33.270
你不能直接这样子写

21:33.270 --> 21:34.270
这样子写的话

21:34.270 --> 21:36.270
你如果利用GSX

21:36.270 --> 21:37.270
非标准语法的话

21:37.270 --> 21:38.270
浏览器要爆错

21:38.270 --> 21:40.270
它语法分析出来就有问题

21:40.270 --> 21:41.270
所以说

21:41.270 --> 21:44.270
你得让浏览器忽略掉这一部分

21:44.270 --> 21:46.270
这一部分得让bible来进行

21:46.270 --> 21:47.270
那怎么办呢

21:47.270 --> 21:48.270
需要

21:48.270 --> 21:49.270
我们讲bible的时候

21:49.270 --> 21:51.270
不知道说过没有

21:51.270 --> 21:52.270
那行吗

21:52.270 --> 21:53.270
我再说一下吧

21:53.270 --> 21:55.270
你这里得使用一个Type属性

21:55.270 --> 21:56.270
因为Type属性

21:56.270 --> 21:57.270
默认为什么

21:57.270 --> 21:58.270
Tex-javascript

21:58.270 --> 22:00.270
它默认为这个东西

22:00.270 --> 22:03.270
改一下改成bible

22:03.270 --> 22:05.270
表示这一块代码

22:05.270 --> 22:06.270
浏览器你别管了

22:06.270 --> 22:07.270
你别管了

22:07.270 --> 22:10.270
我bible来负责

22:10.270 --> 22:11.270
编译这一块

22:11.270 --> 22:13.270
把它编译成真实的解释

22:13.270 --> 22:15.270
所以浏览器就不用管了

22:15.270 --> 22:17.270
那这里面怎么写呢

22:17.270 --> 22:18.270
这个代码怎么写呢

22:18.270 --> 22:20.270
把这个代码拿过来

22:20.270 --> 22:22.780
看着

22:23.780 --> 22:24.780
创建一个

22:24.780 --> 22:25.780
这不是拼元素

22:25.780 --> 22:26.780
十半元素

22:26.780 --> 22:28.780
这是十半元素

22:28.780 --> 22:31.220
第一个

22:31.220 --> 22:33.220
创建一个十半元素

22:33.220 --> 22:34.220
我们之前是这样写的

22:34.220 --> 22:35.220
对吧

22:35.220 --> 22:36.220
对比

22:38.850 --> 22:39.850
对比一下

22:39.850 --> 22:40.850
对比一下

22:40.850 --> 22:41.850
下面这种写法

22:41.850 --> 22:42.850
另外一种写法

22:42.850 --> 22:43.850
怎么写呢

22:44.850 --> 22:45.850
直接这样子写

22:45.850 --> 22:46.850
直接这样子写

22:47.850 --> 22:48.850
然后里边

22:48.850 --> 22:50.850
里面不是一个拼元素

22:50.850 --> 22:51.850
一个十半元素

22:53.850 --> 22:54.850
改一下

22:54.850 --> 22:55.850
这边改一下

22:56.850 --> 22:57.850
这边也是

22:57.850 --> 22:58.850
好

22:58.850 --> 22:59.850
直接把这个东西写过来

22:59.850 --> 23:01.850
它其实

23:01.850 --> 23:02.850
bible它会做什么事

23:02.850 --> 23:04.850
它会把这个代码

23:04.850 --> 23:06.850
转换成为这个代码

23:07.850 --> 23:09.850
千万不要在前面给我写这个玩意

23:09.850 --> 23:10.850
千万不要写这个玩意

23:10.850 --> 23:11.850
它就是制服串了

23:11.850 --> 23:13.850
你直接书写就行了

23:13.850 --> 23:14.850
这个东西浏览器无法识别

23:14.850 --> 23:16.850
但是bible它会把它

23:16.850 --> 23:18.850
转换成这个代码

23:18.850 --> 23:19.850
会进行转换

23:19.850 --> 23:20.850
所以最终呢

23:20.850 --> 23:21.850
最终你运行的是啥

23:21.850 --> 23:23.850
运行的是不是还是这个玩意

23:23.850 --> 23:24.850
对不对

23:24.850 --> 23:25.850
运行的还是这个玩意

23:25.850 --> 23:26.850
只不过这个东西

23:26.850 --> 23:27.850
是一个语法堂而已

23:27.850 --> 23:28.850
你要这意思吧

23:28.850 --> 23:29.850
它是一个语法堂而已

23:29.850 --> 23:31.850
后面我们会详细的讲解

23:31.850 --> 23:32.850
jsx

23:32.850 --> 23:33.850
那么这一集

23:33.850 --> 23:34.850
这一集和我们先

23:34.850 --> 23:35.850
初步的认识一下

23:35.850 --> 23:36.850
它有这么种写法

23:36.850 --> 23:37.850
好

23:37.850 --> 23:39.850
下面创建一个he元素

23:39.850 --> 23:40.850
那么我们就不用

23:40.850 --> 23:41.850
这种方式来创建了

23:41.850 --> 23:43.850
用什么方式呢

23:43.850 --> 23:45.850
he

23:45.850 --> 23:46.850
等于啥

23:46.850 --> 23:48.850
等于he元素

23:48.850 --> 23:49.850
he元素

23:49.850 --> 23:50.850
然后呢

23:50.850 --> 23:51.850
后边写上啥呢

23:51.850 --> 23:53.850
后边写上一个

23:53.850 --> 23:55.850
Title

23:55.850 --> 23:56.850
Title

23:56.850 --> 23:57.850
等于啥

23:57.850 --> 23:59.850
第一个rex元素

23:59.850 --> 24:01.850
然后内容写上啥

24:01.850 --> 24:02.850
是不是

24:02.850 --> 24:03.850
Hello

24:03.850 --> 24:04.850
world

24:04.850 --> 24:06.850
还有什么span

24:09.850 --> 24:10.850
这个span元素

24:10.850 --> 24:11.850
你直接写过来吧

24:11.850 --> 24:12.850
直接写过来

24:12.850 --> 24:14.850
我们现在暂时不讲那么多

24:14.850 --> 24:16.850
因为我们这就和紧紧是

24:16.850 --> 24:17.850
紧紧是那个

24:17.850 --> 24:18.850
灰炭

24:18.850 --> 24:19.850
这个jsx

24:19.850 --> 24:21.850
它的一些写法而已

24:21.850 --> 24:22.850
好

24:22.850 --> 24:23.850
你看直接写就完事了

24:23.850 --> 24:25.850
直接就创建了这么一种结构了

24:25.850 --> 24:26.850
看到没

24:26.850 --> 24:27.850
我们直接写就行了

24:27.850 --> 24:29.850
那看一下能不能运行呢

24:29.850 --> 24:30.850
保存

24:30.850 --> 24:31.850
运行出来

24:31.850 --> 24:33.850
你看是不是仍然可以运行

24:33.850 --> 24:34.850
对不对

24:34.850 --> 24:35.850
因为现在bible进行

24:35.850 --> 24:36.850
转移了

24:36.850 --> 24:37.850
把我们的代码

24:37.850 --> 24:38.850
这个代码的浏览器不会执行的

24:38.850 --> 24:39.850
因为它的内情呢

24:39.850 --> 24:40.850
不是js

24:40.850 --> 24:41.850
所以浏览器会忽略它

24:41.850 --> 24:42.850
因此不会爆错

24:42.850 --> 24:44.850
那如果你把这里变成

24:44.850 --> 24:45.850
javascript

24:45.850 --> 24:46.850
或者说不写这个type

24:46.850 --> 24:47.850
你看一下

24:47.850 --> 24:48.850
爆存

24:50.850 --> 24:51.850
你看浏览器是爆错

24:51.850 --> 24:52.850
他说什么

24:52.850 --> 24:54.850
他说这个语法都不符合

24:54.850 --> 24:55.850
不符合规则

24:55.850 --> 24:56.850
对吧

24:56.850 --> 24:57.850
他是语法错误

24:57.850 --> 24:58.850
所以说

24:58.850 --> 24:59.850
千万不要把他交给浏览器

24:59.850 --> 25:00.850
浏览器不认识的

25:00.850 --> 25:01.850
把交给bible

25:01.850 --> 25:02.850
bible

25:02.850 --> 25:03.850
bible他会把它转移

25:03.850 --> 25:05.850
把它编移成这种格式

25:05.850 --> 25:07.850
最终编移成这种格式

25:08.850 --> 25:09.850
你看运行出来

25:09.850 --> 25:10.850
是不是正确了

25:10.850 --> 25:11.850
好

25:11.850 --> 25:12.850
咱们再来看

25:12.850 --> 25:13.850
它这个东西运行出来过后

25:13.850 --> 25:14.850
我们打印出这个

25:14.850 --> 25:17.850
打印出这个console.log

25:17.850 --> 25:18.850
che

25:18.850 --> 25:19.850
打印出这个che

25:19.850 --> 25:21.850
看一下是什么玩意儿呢

25:21.850 --> 25:22.850
看一下

25:22.850 --> 25:24.850
因为我们远程度的介绍

25:24.850 --> 25:25.850
所以稍微一点看

25:25.850 --> 25:26.850
你看一下

25:26.850 --> 25:27.850
是不是一样的结构

25:27.850 --> 25:28.850
对不对

25:28.850 --> 25:29.850
一样的结构

25:30.850 --> 25:31.850
数相还有切尔准

25:31.850 --> 25:32.850
你看这里

25:32.850 --> 25:33.850
切尔准里面

25:33.850 --> 25:34.850
包含一个span元素

25:34.850 --> 25:35.850
对不对

25:35.850 --> 25:37.850
你看是不是仍然是一个对象结构

25:37.850 --> 25:38.850
所以说我们这里的

25:38.850 --> 25:39.850
GSX

25:39.850 --> 25:40.850
无非就是一个语法堂

25:40.850 --> 25:41.850
它可以让我们的

25:41.850 --> 25:44.850
代码书写得更加简洁

25:44.850 --> 25:45.850
没有那么麻烦

25:45.850 --> 25:47.850
书一中还是不是还是靠它

25:47.850 --> 25:49.850
还是靠它来运行的

25:49.850 --> 25:51.850
这就是GSX

25:51.850 --> 25:52.850
我们后边肯定写元素

25:52.850 --> 25:54.850
都是用GSX来写的

25:55.850 --> 25:56.850
这是这种

25:56.850 --> 25:57.850
第二种写法

25:58.850 --> 25:59.850
OK那这一课就差不多了

25:59.850 --> 26:01.850
这一课咱们认识到了

26:01.850 --> 26:03.850
regs一个起步的程序

26:03.850 --> 26:04.850
该怎么来写

26:04.850 --> 26:06.850
首先它肯定得有一个容器

26:06.850 --> 26:07.850
因为我们最后

26:07.850 --> 26:09.850
会挂载到这个容器上边

26:09.850 --> 26:10.850
当然你可以不可以

26:10.850 --> 26:12.850
把这个表达是直接写过来

26:12.850 --> 26:14.850
可不可以直接写过来

26:14.850 --> 26:15.850
当然也可以

26:15.850 --> 26:17.850
有啥不可以的呢

26:18.850 --> 26:19.850
表达是吗对不对

26:19.850 --> 26:20.850
GSX无非就是

26:20.850 --> 26:21.850
本质上是个啥

26:21.850 --> 26:23.850
本质上不就是个对象吗对不对

26:23.850 --> 26:24.850
把这个对象

26:24.850 --> 26:25.850
它会进行转移

26:25.850 --> 26:27.850
转移成这个东西对不对

26:27.850 --> 26:29.850
把这个东西直接扔过来

26:29.850 --> 26:30.850
也行

26:30.850 --> 26:31.850
你看有啥区别了

26:31.850 --> 26:32.850
刷新

26:32.850 --> 26:34.850
有啥区别了没啥区别对不对

26:35.850 --> 26:36.850
我们这一课了认识到

26:36.850 --> 26:38.850
如何来写个Hello World

26:38.850 --> 26:40.850
同时认识到两个关键点

26:40.850 --> 26:42.850
regs元素是怎么来的

26:42.850 --> 26:43.850
是通过它来的

26:43.850 --> 26:44.850
它创建的是什么

26:44.850 --> 26:45.850
创建的是regs的元素

26:45.850 --> 26:47.850
而不是dom元素

26:47.850 --> 26:48.850
它是个虚拟动

26:48.850 --> 26:49.850
本质上就是个对象

26:49.850 --> 26:51.850
它形成个对象结构

26:51.850 --> 26:52.850
然后交给谁

26:52.850 --> 26:54.850
交给regsdom

26:54.850 --> 26:56.850
它把这个对象

26:56.850 --> 26:58.850
渲染到页面上

26:58.850 --> 27:00.850
把它变成真实的动物对象

27:00.850 --> 27:01.850
以后具体的原理

27:01.850 --> 27:03.850
我们后边再讲

27:03.850 --> 27:05.850
那么这个里面有三个参数

27:05.850 --> 27:06.850
你认识一下就行了

27:06.850 --> 27:08.850
多了一个jsx

27:08.850 --> 27:09.850
它是为了方便

27:09.850 --> 27:11.850
我们书写元素而出现的

27:11.850 --> 27:12.850
它需要bable

27:12.850 --> 27:14.850
bable来进行转移

27:14.850 --> 27:15.850
好吧

27:15.850 --> 27:16.850
OK

27:16.850 --> 27:19.850
这是如何在页面上

27:19.850 --> 27:20.850
直接书写

27:20.850 --> 27:22.850
直接书写regs

27:22.850 --> 27:23.850
当然我们后边

27:23.850 --> 27:24.850
会再讲了

27:24.850 --> 27:25.850
因为我们后边都是用

27:25.850 --> 27:26.850
脚手架来做的

27:26.850 --> 27:27.850
但是你要知道

27:27.850 --> 27:29.850
能用脚手架来做的东西

27:29.850 --> 27:30.850
都可以在页面上做

27:30.850 --> 27:32.850
都可以在页面上去完成

27:32.850 --> 27:34.850
无非就是引用js

27:34.850 --> 27:35.850
还有上区别

27:35.850 --> 27:36.850
所以我们后边学校的东西

27:36.850 --> 27:38.850
都可以用于这种场景

27:38.850 --> 27:39.850
只不过用了脚手架过后

27:39.850 --> 27:41.850
我们更加容易实现魔化化

27:41.850 --> 27:44.850
容易实现代码结构了

27:44.850 --> 27:45.850
更加清晰

27:45.850 --> 27:46.850
我们工程结构了

27:46.850 --> 27:47.850
更加清晰

27:47.850 --> 27:48.850
更加容易维护

27:48.850 --> 27:49.850
所以我们往往

27:49.850 --> 27:51.850
会使用脚手架来做

27:51.850 --> 27:52.850
这是个第一节课

27:52.850 --> 27:54.850
咱们如何来书写个halloween的

27:54.850 --> 27:55.850
先去练一下

27:55.850 --> 27:56.850
两种写法都练一下

27:56.850 --> 27:57.850
因为这一节课

27:57.850 --> 27:59.850
受到两个核心的关键点

27:59.850 --> 28:00.850
这两个东西都去练一下

