WEBVTT

00:01.140 --> 00:03.700
应该是最后一个 hook 了

00:03.700 --> 00:08.580
咱们把 rex hook 里面的所有 api 就全部讲完了

00:08.580 --> 00:10.380
因为它本来的 api 也不多

00:10.380 --> 00:14.140
最常用的也就是 stat hook 和 effect hook

00:14.140 --> 00:18.380
其他的都用的稍微少一点

00:18.380 --> 00:20.260
这个就用的更少了

00:20.260 --> 00:21.580
了解一下就行了

00:21.580 --> 00:23.340
叫做 debug value hook

00:23.340 --> 00:24.420
它是用于什么呢

00:24.420 --> 00:26.660
它是它的函数自然而然

00:26.660 --> 00:27.580
我都不用说了吧

00:27.580 --> 00:29.420
use debug value 对吧

00:29.420 --> 00:30.500
它的函数是这个

00:30.620 --> 00:44.220
它是用于将某个数据显示到调试 调试难

00:44.220 --> 00:45.340
什么意思呢

00:45.340 --> 00:48.260
说了很多地方很难用文字来表述

00:48.260 --> 00:50.300
所以说为什么要视频教程了

00:50.300 --> 00:52.860
很多时候你看文字都不知道它的说什么

00:52.860 --> 00:55.180
什么意思呢 我给大家举个例子

00:57.020 --> 01:00.300
应该说这样子 刚才说的还不够完善

01:00.300 --> 01:07.820
用于将制定义 hook 的关联数据显示到调试难

01:07.820 --> 01:08.780
好 什么意思呢

01:08.780 --> 01:10.380
我给大家举个例子

01:10.380 --> 01:11.980
这里来一个 app 组件

01:11.980 --> 01:15.300
这个组件里边我们写上这么一些 hook

01:15.300 --> 01:17.300
我们就使用 use state

01:17.300 --> 01:18.100
use state

01:19.780 --> 01:22.100
好 这里我们写上一个 use state

01:25.340 --> 01:26.380
这样吧

01:26.380 --> 01:26.940
use

01:28.700 --> 01:29.180
提示呢

01:30.020 --> 01:30.540
state

01:31.540 --> 01:32.580
好 n 嘛

01:32.580 --> 01:33.660
0

01:33.660 --> 01:35.580
我也不用去做什么显示了

01:35.580 --> 01:38.060
因为只是跟调试相关的

01:38.060 --> 01:42.700
然后再写上一个 use effect

01:42.700 --> 01:43.860
再写上一个 effect

01:43.860 --> 01:45.340
我们随便下写一些

01:45.340 --> 01:46.340
use effect

01:47.700 --> 01:50.660
这里我们再写上一个 use effect

01:55.310 --> 01:57.110
这里没有依赖项

01:57.110 --> 01:58.550
没有依赖项

01:58.550 --> 02:01.270
然后我们这里输出

02:02.510 --> 02:03.990
输出一个东西

02:03.990 --> 02:05.350
就输出 effect 什么

02:05.350 --> 02:06.230
随便下写一些

02:08.830 --> 02:10.230
不用的话还要报错的

02:10.230 --> 02:11.390
不用的话要报错

02:11.390 --> 02:13.390
那我们现在啥子不写

02:14.190 --> 02:16.710
我们直接用 use state 用就行了

02:16.710 --> 02:18.350
行了 咱们保存

02:18.350 --> 02:19.350
看一下

02:19.350 --> 02:21.390
主要是看一下调试难

02:21.390 --> 02:22.990
调试难这里呢

02:22.990 --> 02:24.750
当然页面上看不到任何东西

02:24.750 --> 02:26.230
但调试难这里看一下右边

02:27.230 --> 02:29.950
右边我们看到有什么组件的属性

02:29.950 --> 02:30.310
对吧

02:30.310 --> 02:31.870
当然他现在的妹妹没有状态了

02:31.870 --> 02:32.110
对吧

02:32.110 --> 02:33.830
因为他是韩式组件

02:33.830 --> 02:34.670
他没有状态

02:34.670 --> 02:35.550
但是下面有个 hook

02:35.550 --> 02:36.590
看到没

02:36.590 --> 02:37.990
hook 是不是有两个

02:37.990 --> 02:39.230
他按照顺序来排列

02:39.230 --> 02:40.470
是不是我们之前说的表格

02:40.470 --> 02:42.830
他用一个表格来记录我们这个组件里面

02:42.830 --> 02:43.710
有哪些 hook

02:43.710 --> 02:45.950
这就是为什么你不应该把 hook

02:45.950 --> 02:47.150
放到判断里面

02:47.150 --> 02:48.430
不能让他有的时候有

02:48.430 --> 02:49.510
有的时候没有

02:49.510 --> 02:51.870
因为他是按照表格的顺序来对应的

02:51.870 --> 02:54.110
你看我们的 state hook 在这里

02:54.110 --> 02:55.910
这个 effect hook 在这里

02:55.950 --> 02:56.990
所有的 hook

02:56.990 --> 02:59.550
他不是说分门别类来建立表格

02:59.550 --> 03:01.630
他是全部是一张表格来对应

03:01.630 --> 03:02.950
之前我们讲解的时候

03:02.950 --> 03:04.310
为了让你理解清楚了

03:04.310 --> 03:05.750
我可能话的时候

03:06.750 --> 03:08.630
可能容易造成大家的误解

03:08.630 --> 03:10.230
实际上他们是一张表格

03:10.230 --> 03:12.510
但是我忘了就特别强调这一点了

03:12.510 --> 03:15.470
这里的实际上是一张表格来对应的

03:15.470 --> 03:17.990
那如果说我们是制定意 hook

03:17.990 --> 03:19.270
你看他这里现在显示的

03:19.270 --> 03:20.990
状态目前为你

03:20.990 --> 03:22.710
然后呢

03:22.710 --> 03:24.470
这是 state hook 的状态为你

03:24.470 --> 03:24.990
对吧

03:25.030 --> 03:26.990
然后 effect 的 hook 是 fn

03:26.990 --> 03:28.270
那我们再写一个状态

03:28.270 --> 03:29.150
再写一个状态

03:29.150 --> 03:30.390
use state

03:30.390 --> 03:32.310
比方说一个字幕刷 abc

03:32.310 --> 03:33.230
保存

03:33.230 --> 03:34.830
你看一下

03:34.830 --> 03:35.990
就多了一个 state 了

03:35.990 --> 03:37.910
state hook 他的指为 abc

03:37.910 --> 03:39.590
他是用这种方式来对应的

03:39.590 --> 03:41.710
effect 是一个函数

03:41.710 --> 03:44.990
好 接下来我们来写一个制定意的 hook

03:44.990 --> 03:46.110
几个制定的 hook

03:46.110 --> 03:47.110
给他取个名字

03:47.110 --> 03:49.310
叫做 use test 什么

03:49.310 --> 03:50.190
下写一个

03:50.190 --> 03:51.430
随便下写一个

03:51.430 --> 03:54.950
好 这里边我们使用了一个 use state

03:55.430 --> 03:58.260
use state

03:58.260 --> 03:59.500
举个例子

03:59.500 --> 04:00.420
举个例子

04:00.420 --> 04:03.020
给他取个名字

04:03.020 --> 04:04.940
名字随便去

04:04.940 --> 04:06.380
比方说 student 吧

04:06.380 --> 04:08.020
student

04:08.020 --> 04:10.100
好 那么默认指是一个数组

04:10.100 --> 04:12.540
我这里呢 返回一个 student

04:12.540 --> 04:15.060
返回 student

04:15.060 --> 04:16.100
好 看着啊

04:16.100 --> 04:17.780
我不要一个 set 了

04:17.780 --> 04:20.140
那么我们这里再使用 use test

04:20.140 --> 04:21.900
我们使用的是制定意的 hook

04:21.900 --> 04:22.700
看到没

04:22.700 --> 04:24.060
用的是制定意的 hook

04:24.060 --> 04:25.820
那么在这个调试工具团那边

04:25.860 --> 04:26.820
按理说的话

04:26.820 --> 04:28.300
是不是又要多显示一个 state

04:28.300 --> 04:30.220
因为他这个函数里边说用了 state

04:30.220 --> 04:31.660
对吧 use state

04:31.660 --> 04:34.020
他会多显示一个 state 一个空数组

04:34.020 --> 04:35.820
但是那里实际上看一下

04:37.260 --> 04:39.660
有没有显示那个 use state

04:39.660 --> 04:41.580
有没有显示这个 student

04:41.580 --> 04:42.780
有没有显示这个空数组

04:42.780 --> 04:43.940
他这里是没有的

04:43.940 --> 04:44.860
他显示的是什么

04:44.860 --> 04:46.900
显示的是一个制定意的 hook 名字

04:46.900 --> 04:48.660
hook 的名字叫做 test

04:48.660 --> 04:50.140
看到没 他是这样的显示的

04:50.140 --> 04:51.740
显示这个 test

04:51.740 --> 04:53.020
这个 hook 名字

04:53.020 --> 04:55.260
然后我们展开过后才看到

04:55.300 --> 04:58.100
它里边有一个 state hook

04:58.100 --> 05:00.060
它的是一个数组

05:00.060 --> 05:01.980
它是用这种方式来显示的

05:01.980 --> 05:04.620
但有的时候为了调试方便

05:04.620 --> 05:08.540
我们希望在这里显示一个 hook 的值

05:08.540 --> 05:09.980
我们希望在这里显示一个 hook 的值

05:09.980 --> 05:12.980
或者是显示任何其他你想显示的东西

05:12.980 --> 05:13.900
那怎么办呢

05:13.900 --> 05:16.300
我们就可以在制定意的 hook 里边

05:16.300 --> 05:19.820
加上一个 use debug value

05:21.660 --> 05:23.620
加上这个 use debug value

05:23.660 --> 05:25.580
它纯粹是用来调试的

05:25.580 --> 05:28.980
比方说我们给它显示一个学生集合

05:30.100 --> 05:30.700
保存

05:32.540 --> 05:33.140
你看一下

05:33.140 --> 05:34.380
是不是显示这个学生集合

05:34.380 --> 05:35.900
你想显示咋显示咋

05:35.900 --> 05:37.100
随便你咋显示

05:37.100 --> 05:38.060
比方说这个 value 值

05:38.060 --> 05:39.420
我们还可以写 student 值

05:39.420 --> 05:40.820
直接把 student 值放过来

05:40.820 --> 05:42.500
也可以保存你看一下

05:43.740 --> 05:45.580
它是不是直接显示一个 array 凝了

05:45.580 --> 05:45.860
对吧

05:45.860 --> 05:46.620
一个空数组

05:46.620 --> 05:47.780
对不对

05:47.780 --> 05:49.380
当然你可以作为提示

05:49.380 --> 05:51.220
这里是个学生集合

05:51.220 --> 05:52.180
这就是一个

05:52.180 --> 05:53.300
就这么简单

05:53.340 --> 05:53.980
没有啥了

05:53.980 --> 05:55.500
就这么简单

05:55.500 --> 05:57.740
这就是一个 use debug value

05:57.740 --> 05:59.060
没了

05:59.060 --> 06:00.900
它纯粹是用来调试的

06:00.900 --> 06:02.180
而实际上我们开发中

06:02.180 --> 06:03.740
是不是我们的制定意的 hook

06:03.740 --> 06:04.900
都要用这个东西

06:04.900 --> 06:05.780
实际上不是的

06:05.780 --> 06:06.780
啥是这样子

06:09.340 --> 06:10.580
就如果你

06:10.580 --> 06:18.580
如果创建的制定意 hook 是通用性比较高

06:18.580 --> 06:20.300
就是要整个我们的系统里面

06:20.300 --> 06:21.900
都要用到这个制定意的 hook

06:21.900 --> 06:22.980
到处都要用到

06:23.020 --> 06:24.140
那么这个时候

06:24.140 --> 06:30.220
可以选择使用 use debug value

06:30.220 --> 06:31.220
方便调试

06:32.580 --> 06:33.500
这样调试的时候

06:33.500 --> 06:34.900
我们就知道这个 hook 里边

06:34.900 --> 06:36.300
有些关键信息

06:36.300 --> 06:38.620
这里可以写一些关键信息

06:38.620 --> 06:40.500
比如说我可以通过一个函数计算

06:40.500 --> 06:41.180
得到一个值

06:41.180 --> 06:42.060
把这个值放进来

06:42.060 --> 06:42.580
对吧

06:42.580 --> 06:44.180
可以写上一些关键信息

06:44.180 --> 06:45.220
可以通过这个关键信息

06:45.220 --> 06:46.860
方便我们来调试

06:46.860 --> 06:48.540
仅此而已

06:48.540 --> 06:51.620
一般是通用性比较高的 hook

06:51.660 --> 06:53.500
那么制定意 hook 用这种方式

06:53.500 --> 06:55.860
如果说你这个写的制定意 hook

06:55.860 --> 06:57.660
只是临时用一下

06:57.660 --> 06:59.060
或者是偶尔几个地方用到

06:59.060 --> 07:00.380
也难得去写这个东西了

07:00.380 --> 07:00.940
何必呢

07:00.940 --> 07:02.300
何必去折磨自己呢

07:02.300 --> 07:04.100
就是讲这个东西

07:04.100 --> 07:05.100
其他的没啥了

07:06.300 --> 07:06.460
好

07:06.460 --> 07:09.500
那么支持我们的整个 hook 就讲完了

07:09.500 --> 07:10.860
通过整个 hook 的学性

07:10.860 --> 07:12.260
大家可以发现

07:12.260 --> 07:13.460
那一组见能办到的事

07:13.460 --> 07:15.660
现在有了 hook 之后

07:15.660 --> 07:17.260
函数组见不仅能办到

07:17.260 --> 07:20.100
而且它的处理方式

07:20.140 --> 07:22.700
我个人觉得是更加优雅

07:22.700 --> 07:24.340
用起来更加方便了

07:24.340 --> 07:26.140
因此 hook 它作为一个

07:26.140 --> 07:28.820
内组见能替代品的将来

07:28.820 --> 07:32.380
在未来可能会用的场景会越来越多

07:32.380 --> 07:34.380
所以大家一定要时刻保持

07:34.380 --> 07:36.380
保持对 hook 的关注

07:36.380 --> 07:38.020
那么如何来关注这个东西呢

07:38.020 --> 07:40.180
尽量以前我这个视频讲完

07:40.180 --> 07:42.100
鬼知道以后会发生什么事情

07:42.100 --> 07:43.820
但是如果发生了一些重大变化的话

07:43.820 --> 07:46.620
我可能会在这个视频里边会

07:46.620 --> 07:48.340
要么就是更新教程

07:48.340 --> 07:49.860
整个超程全部更新一下

07:49.860 --> 07:51.740
要么就是加一些补充课程

07:51.740 --> 07:53.020
给大家补充一下

07:53.020 --> 07:54.180
但是大家最好了

07:54.180 --> 07:56.420
平时也特别是以后上班之后

07:56.420 --> 07:59.860
多去关注一下它的官网

07:59.860 --> 08:01.500
官网 大家看一下

08:01.500 --> 08:02.660
right

08:03.940 --> 08:05.980
就这个 第一个

08:05.980 --> 08:06.500
官网

08:06.500 --> 08:08.420
它的文档里边

08:08.420 --> 08:10.580
我们可以在官网里面去找到这个 hook

08:10.580 --> 08:11.980
看到没

08:11.980 --> 08:14.380
这个 hook 大家可以时刻关注一下

08:14.380 --> 08:16.900
因为这个 hook 是一个非常非常新的东西

08:16.940 --> 08:21.140
所以说之后可能会有一些

08:21.140 --> 08:22.820
可能还会有比较大的变动

08:22.820 --> 08:25.260
都说不准

08:25.260 --> 08:28.740
所以说大家时刻保持关注吧

08:28.740 --> 08:31.420
然后我们整个的 rex 课程

08:31.420 --> 08:32.900
rex 全家统

08:32.900 --> 08:37.140
rex 本身的课程就全部结束了

08:37.140 --> 08:38.580
那么后边我们就是讲的

08:38.580 --> 08:40.940
一些第三方的一些插件

08:40.940 --> 08:43.180
比方说 rex 它提供了一些基本功能

08:43.180 --> 08:43.540
对吧

08:43.540 --> 08:46.260
它的目的就是一个构建一个 UI 库

08:46.300 --> 08:49.420
让我们更加方便的来进行页面渲染

08:49.420 --> 08:50.980
只需要控制数据就行了

08:50.980 --> 08:52.780
并且它提出了一个数据的

08:52.780 --> 08:54.260
单向数据流的概念

08:54.260 --> 08:56.020
这是基于 Flux 的概念

08:56.020 --> 08:57.860
那么数据从顶部的组件

08:57.860 --> 08:59.980
依次微流到下面的组件

08:59.980 --> 09:02.180
然后它又有自己的一套渲染流程

09:02.180 --> 09:04.140
并且它提供了一些乱七八糟的

09:04.140 --> 09:06.060
就是比方说 hook

09:06.060 --> 09:08.740
可以更加优雅的来处理韩数组件

09:08.740 --> 09:11.740
那么这些本原本的功能学习之后

09:11.740 --> 09:13.220
我们后边再加上一些

09:13.220 --> 09:14.740
因为我们在公司里面开发

09:14.780 --> 09:16.780
不可能用原生的 rex 开发

09:16.780 --> 09:18.860
就好必说你们学了介石

09:18.860 --> 09:21.740
在公司里面不太可能用原生的介石来开发

09:21.740 --> 09:22.940
这个效率太低了

09:22.940 --> 09:25.580
所以说它做了一些

09:25.580 --> 09:26.980
不是说官方

09:26.980 --> 09:28.340
是一些第三方公司

09:28.340 --> 09:30.740
它做了一些插件

09:30.740 --> 09:33.620
来增强 rex 的本身的功能

09:33.620 --> 09:35.700
因此我们后边的课程就学习的是

09:35.700 --> 09:37.020
它的一些相关插件

09:37.020 --> 09:38.100
咱们一个个学习

09:38.100 --> 09:40.660
rex 本身的课程就到此结束了

09:40.660 --> 09:42.740
希望大家对 rex 本身

09:42.740 --> 09:44.660
要有一个非常深刻的理解

09:44.700 --> 09:46.820
因为你只有理解了它本身的东西

09:46.820 --> 09:48.660
那么你学习第三方的东西

09:48.660 --> 09:50.460
你才知道它的原理到底是什么

09:50.460 --> 09:51.900
它到底是怎么玩的

09:51.900 --> 09:53.540
就好必说你们学习

09:53.540 --> 09:55.660
介块锐你必须都要掌握介石

09:55.660 --> 09:57.780
介石动物操作你的会

09:57.780 --> 09:59.820
那你才知道介石介块锐

09:59.820 --> 10:01.580
它到底是怎么玩的

10:01.580 --> 10:02.260
好了

10:02.260 --> 10:02.700
OK

10:02.700 --> 10:05.260
那么咱们 rex 课程到此结束了

10:05.260 --> 10:06.060
拜拜

