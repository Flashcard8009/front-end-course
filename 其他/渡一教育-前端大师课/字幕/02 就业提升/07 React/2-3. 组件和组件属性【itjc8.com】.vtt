WEBVTT

00:00.500 --> 00:07.300
好了 这节课呢 咱们就开始来学习react里边最核心最核心的内容

00:07.300 --> 00:12.300
就是 组建 以及组建的它其中一个特点啊 就是组建属性

00:12.300 --> 00:17.900
什么叫做组建呢 首先解释一下概念啊 组建是啥意思呢

00:17.900 --> 00:26.100
嗯 可以这么说吧 组建的他表达的是一个呃 包含内容

00:26.400 --> 00:38.400
样式和功功能的呃 UI单元啊 他表示的是内容什么atmail

00:38.400 --> 00:45.100
样式呢 CSS功能呢 介绍包含这三个部分啊 当然有可能有些地方有缺失

00:45.100 --> 00:49.600
比方说有些组建呢 他根本就没有内容啊 没有样式 他只有功能啊 等等

00:49.600 --> 00:54.100
总之呢 他总之会包 有可能会包含这么一些东西 他是一个什么呢

00:54.100 --> 01:01.300
一个单元 你可以认为呢 我们的页面上啊 比方说就随便吧啊 咱们的淘宝啊淘宝

01:01.700 --> 01:04.500
淘宝网你可以认为这个地方 哎

01:05.700 --> 01:11.300
这个地方呢 这个logo呢 可以把它看成是一个组建 然后呢 这个type切换呢

01:11.300 --> 01:16.700
也可以看成是一个组建呃 然后呢 这里呢 一个文本框也可以看成是一个组建

01:16.700 --> 01:21.700
这一个按钮呢 可以看成是一个组建 或者说把大的区域来进行观看的话

01:21.700 --> 01:28.900
那么整个这个区域呢 可以认为是一个头部组建啊 等等等等 我们都可以认为呢 这些东西呢 都是一些组建

01:29.500 --> 01:36.100
就是我们可以把页面上就像就像划分div那样子啊 在页面上呢 可以把它划分成为一个一个的组建

01:36.600 --> 01:42.700
这样子呢 就好处在于什么呢 好处在于我们做开发的时候呢 就不再是以页面为单位开发了

01:43.200 --> 01:50.000
那如果我们用页面为单位开发的话 整个项目就变得会会非常非常复杂 因为有了页面呢 他内容非常非常多

01:50.600 --> 01:58.400
你开发起来呢 会比较吃力啊 而且呢难以维护 但是我们把它做成一个一个的组建之后呢 我们的开发单元变小了

01:59.100 --> 02:07.300
然后呢 我们还可以就可以就是啊 做的时候呢 就更加集中精力的去解决那一块的问题啊 把那一块做好就行了

02:08.000 --> 02:14.400
以后呢 我们在不同的页面去用的时候呢 也利于我们在多个页面中重复使用

02:15.200 --> 02:22.800
你之前学习的是无忧啊 学习了vue 那么你学习组建的话 应该非常非常清楚 这样一个概念

02:24.500 --> 02:31.900
好 现在呢 我们看一下啊 组建我们更了解他概念之后呢 咱们来看一下rex里面 他怎么来创建组建

02:32.000 --> 02:37.400
所以我们先说第一个问题啊 如何来创建一个组建啊 一个组建

02:38.400 --> 02:45.400
在vue里面呢 一个组建是一个啥的 就是一个配置对象 对吧 一个组建就是一个配置对象 他包含了什么

02:45.600 --> 02:52.400
templates模板 包含了样式 包含了他里面的什么乱七八糟的computed啊message啊这些东西 他就是个配置对象

02:53.200 --> 02:59.400
那么在rex里面呢 他的组建呢 有两种形式 第一种形式呢 叫做寒树组建

03:00.200 --> 03:06.200
另一种形式呢 叫做内组建 好 咱们来说一下啊 第一个寒树组建

03:07.200 --> 03:15.200
证明呢 我们写这么一个新建个文件啊 我们后边加了代码啊 全部要放到这个src目录下边啊 千万不要放到外边去了

03:15.400 --> 03:22.600
外边他读不到的啊 他只认为src这个目录下边的 是我们想要的东 要找的东西 好 我们在这里面新建个文件啊

03:23.200 --> 03:23.400
啊

03:24.680 --> 03:30.800
这个我们写个证明 证明个名字mine啊 funk 表示我们的就是寒树式的

03:31.920 --> 03:36.080
comp comp 什么意思 就component 说写 表示组建的意思

03:36.400 --> 03:45.560
新建这么一个gs 这个gs里面呢 咱们导出一个啊 导出一个组建啊 导出一个组建 组建是啥 组建就是寒树

03:46.000 --> 03:55.440
没有什么特别的 就是一个寒树啊 导出一个啊 就默认导出嘛 导出一个方形啊 都可以是个匿名寒树 都无所谓啊 都无所谓

03:56.800 --> 04:02.720
好 导出这么一个寒树啊 当然我们也可以也可以直接把寒树写到这 对吧 也可以直接把寒树写到这也没问题

04:03.440 --> 04:05.600
啊 那咱们先写到这吧 先写到这

04:06.640 --> 04:08.880
我们一会再写了 写到不同的文件里面

04:09.800 --> 04:13.440
好 写到这 给他取个名字 叫做my funk

04:14.280 --> 04:19.560
comp 好 那么组建呢 我们就写好了 就是一个寒树

04:20.280 --> 04:26.240
这个寒树的名称呢 就是组建的名称 但是大家要注意啊 要注意特别特别注意

04:28.120 --> 04:28.840
特别注意

04:29.840 --> 04:43.680
啊 组建的名称 手字母必须大写 他都不是命名规范啊 他是要求里必须大写 为什么他有这样的要求 我们一会就知道了啊 他必须要有这样的要求

04:44.440 --> 04:54.120
好 咱们就写这么一个组建 这个寒树呢 寒树组建他就是一个普通寒树 只不过手这么大写了啊 看上去呢 像是个构造寒树而已 不过呢他就是一个普通寒树

04:54.840 --> 05:02.040
好 这个寒树他有这么一个特点 什么特点呢 就是寒树组建啊 他的特点是要返回

05:03.760 --> 05:15.800
返回一个react元素啊 他要返回一个react元素 所以说这个组建他必须返回的是什么呢 返回的是这么一个东西啊react craze element

05:16.280 --> 05:21.520
对吧 这里边写参数啊 是不是要返回这么一个东西 这个东西是不是创建元素 对吧

05:22.520 --> 05:28.000
那可以这样子返回 能不能返回一个jsx 能不能返回一个jsx表达式 可不可以

05:28.760 --> 05:32.880
当然可以啊 因为jsx表达式他就是一个react元素

05:33.400 --> 05:36.720
所以说呢 我们这里完全可以返回一个jsx表达式

05:37.440 --> 05:42.880
好 这里呢 咱们来写这么一个东西啊 比方说写个se嘛 一个se

05:44.680 --> 05:46.880
组建内容 这是组建内容

05:47.880 --> 05:51.880
好 就写好这么一个组建了 非常非常简单 就是一个普通函数

05:52.840 --> 05:56.800
那怎么用呢 这个组建 怎么用呢 好 比方说咱们渲染

05:57.480 --> 06:04.840
要渲染的时候怎么用呢 比方说这个渲染的时候呢 有个div 这个div里边呢 咱们来写一个啊 写要使用这个组建

06:05.400 --> 06:11.480
有两种使用方式 第一种呢 就是把它当成函数调用就完成了啊 当成函数调用

06:12.880 --> 06:14.840
好 保存看一下啊 咱们运行出来

06:15.840 --> 06:18.640
啊 这里呢 yeah start

06:19.800 --> 06:25.760
运行出来看一下啊 非常非常简单 其实就是把它当成一个函数调用就完成了啊 这是第一种用法啊 当然说

06:26.200 --> 06:29.960
以后呢 我会说这种用法呢 其实不太多件啊 不太多件

06:30.800 --> 06:31.600
很少很少啊

06:32.480 --> 06:36.040
就是调用这个函数 因为调用函数返回的结果 是不是就是一个rex

06:36.720 --> 06:39.680
rex的元素 对不对 把元素放这 对吧

06:40.360 --> 06:44.960
说这是这是非常非常简单的一种调用方式 那咱们来看一下啊 这个atm结构

06:45.520 --> 06:49.560
div里边啊 是不是有了一个div 这个div哪来的

06:50.320 --> 06:57.040
说来自于这儿 对吧 来自于这儿 然后呢 这里边说是一个he 对不对 h1啊 就是一个组建了

06:58.400 --> 07:07.120
但是呢 我们平时不太会使用这种方式 为什么呢 虽然说我们生成出来的结果是没有问题的啊 是没有问题的

07:07.920 --> 07:15.200
就是真实的动物对象结构 是没问题的 但是呢 它没有形成一种组建结构 什么叫组建结构呢

07:15.880 --> 07:22.480
咱们来看一下 我们目前呢 之前不是安装好了那个东西叫做rex啊

07:23.000 --> 07:32.320
跑哪去了 诶 小心一下啊 我们的这个rex那个插件跑哪去了 这样我找一找啊 扩展程序

07:32.320 --> 07:35.440
诶 我的

07:37.120 --> 07:48.880
我的rex插件呢 那我行吧 我重新重新安装一下吧 因为我之前呢 可能用geat啊 geat呢 把那个把那个插件的把那个文件删了啊 他插件没了

07:49.520 --> 07:52.560
那我这里呢 我看一下啊 看一下

07:54.160 --> 07:55.920
发放了回收单里边去里边去了

07:56.880 --> 07:59.920
我们找一找啊 就这个地方还原

08:02.080 --> 08:04.720
好 重新把它解压缩啊 解压缩

08:07.850 --> 08:12.250
好 重新重新拖进来啊 重新拖进来 扩展程序里边 加进来

08:13.130 --> 08:16.960
好 加进来了啊 重新啊 刷新

08:18.320 --> 08:25.040
刷新一面啊 好 咱们来看一下啊 我们通过这个调试工具呢 我们可以看到它的就是组建结构

08:25.760 --> 08:32.640
这个调试工具它可以帮我们来看到我们的rex里边的组建结构啊 咱们这里呢 我们点击这个

08:33.280 --> 08:37.680
不对 呃 等一下啊 点击重新点击 右键监查

08:38.480 --> 08:45.120
好 这里边呢 应该出现了这个rex 看没 因为我这里放的比较大啊 他说放了这儿啊rex

08:45.840 --> 08:53.520
好 可以看到一看 我们这里边能不能看到组建结构呢 看不到只看到一个元素啊 rex元素div

08:53.920 --> 08:57.680
对吧 这个元素哪来的 是不是来自于这儿对吧 rex元素

08:58.240 --> 09:07.520
div 又看到了一个he元素对吧 也是rex元素啊 他这里显示的全部都是rex元素啊 这个rex元素he

09:07.760 --> 09:11.520
所以我们看到了这么两个东西 并没有看到我们的组建这个东西

09:11.840 --> 09:14.960
因为我们这里使用了组建 所以说这种方式呢不太常见

09:15.440 --> 09:18.640
并且呢 他由于没有构建出这个组建的结构

09:19.200 --> 09:25.440
因此对于后边我们做一些优化呢 可能就是在进行宣展的时候 他做一些优化的时候呢

09:25.680 --> 09:32.800
可能会造成一些麻烦 因此呢 我们对于这种函数啊 这种这种组建呢 我们通常不会使用这种方式来调用

09:33.040 --> 09:36.400
而会使用什么呢 看着啊 会使用这种方式

09:37.840 --> 09:38.640
myfunk time

09:39.600 --> 09:45.520
把当成一个什么 当成一个元素来使用啊 把当成一个元素来使用

09:46.000 --> 09:51.760
是不是类似于vio 对吧 vio 是不是也有组建 他用的时候 是不是也把当成元素来使用的

09:52.400 --> 09:58.000
当然这里的元素呢 他指的不是atm元素 指的是什么 指的是rex元素

09:58.880 --> 10:01.600
啊 由于这里里边也没有放什么东西 所以说这里呢

10:02.240 --> 10:07.280
我们直接可以使用myfunk comp 然后一个鞋杠啊 字结束啊 字结束

10:07.920 --> 10:12.320
好 现在我们再保存一下啊 可以达到一样 这样子看上去结构也非常清晰 对吧

10:12.560 --> 10:15.200
div里边用了一个组建 myfunk comp

10:16.000 --> 10:20.000
啊 这样子结构也非常清晰 然后再保存一下 看一下页面上的一种

10:20.320 --> 10:25.120
页面的结构是完全一样的 但是我们看一下rex的结构 是不是不一样了

10:25.680 --> 10:29.760
div里边现在是不是多了一个组建的层次了 对吧 这个层次就出来了

10:30.240 --> 10:36.720
啊 我们之前学vio的时候不是讲过那个什么虚拟动数吗 对吧 它会形成一个数形的结构

10:37.280 --> 10:41.600
那这里是不是形成了个数形的结构 最根就是他们的根是什么 div

10:42.560 --> 10:48.000
是这个div这个rex元数 然后里边呢 是一个组建 组建里边呢又包含了he

10:48.240 --> 10:53.040
看到没有 他会形成这么一种结构 这种结构形成出来之后呢 对于我们后边呢

10:53.440 --> 10:59.520
就是进行一些优化呀 对比呀 都非常有帮助 所以说我们使用组建的时候呢

10:59.920 --> 11:03.040
会用这种方式来进行使用 而不会用刚才的那种方式

11:03.600 --> 11:08.080
原来这个意思吧啊 非常非常简单啊 这是关于组建啊

11:08.720 --> 11:13.120
第一种函数组建以它的使用方式啊 直接这样子使用就行了

11:14.000 --> 11:15.760
那么现在我们再回过头来说这个问题

11:16.960 --> 11:20.880
为什么组建的手字母 它必须要求大些

11:22.320 --> 11:23.120
是这个样子的

11:24.160 --> 11:29.440
组建啊 它本质上是什么东西呢 我们当然知道啊 组建是个函数

11:30.160 --> 11:35.040
那我们这样子去使用组建 它实际上是什么玩意呢 咱们来试一下吧

11:36.000 --> 11:36.160
啊

11:37.200 --> 11:37.440
com

11:38.400 --> 11:44.480
把它保存到一个变量里边 可以吗 可以吗 有啥问题呢 这不是不就是一个jsx吗

11:44.960 --> 11:46.560
啊 把这个变量的值放这

11:47.520 --> 11:53.360
可不可以 之前是不是做过类似的 之前只不过是其他元素嘛 对不对 那这里使用的组建可不可以

11:53.600 --> 11:55.360
好 我们打印出这个com

11:56.000 --> 11:58.880
看一下它到底是啥玩意 保存啊 保存

12:00.640 --> 12:03.360
你看这个结构还是没问题啊 还是完全一样的

12:04.000 --> 12:04.960
啊 咱们来看控制台

12:05.840 --> 12:08.240
你看一下 它的type值变了

12:09.760 --> 12:10.560
变成了一个啥

12:11.600 --> 12:13.760
变成了一个函数了 看到没

12:14.880 --> 12:19.120
我们之前的type值是啥 它可能是个制服串对吧 什么div呀

12:19.680 --> 12:24.480
什么p元素啊 对吧 它的type值是一个制服串 那现在变成一个函数了

12:24.480 --> 12:30.960
它表示的是什么 表示的是我们这个里呢 生成的也是一个reaction

12:31.680 --> 12:32.080
元素

12:33.440 --> 12:33.920
组建

12:34.880 --> 12:35.680
使用组建

12:36.880 --> 12:37.680
生成的

12:38.560 --> 12:41.280
仍然是一个reaction元素

12:42.160 --> 12:42.640
元素

12:43.440 --> 12:46.560
变化的只是type值

12:47.440 --> 12:48.800
变化的只是type值而已

12:49.600 --> 12:53.040
就是组建它本质上也是一个reaction元素啊 我们生成的时候

12:54.320 --> 12:56.640
啊 生成了它的时候 仍然是一个reaction元素

12:57.360 --> 13:00.880
那么这里就涉及到一个问题 它怎么来区分

13:01.920 --> 13:04.080
我们是我们自己写的组建

13:04.800 --> 13:06.960
还是说你要创建的是一个

13:07.760 --> 13:11.280
atm元素呢 它怎么来区分呢 它就靠手字母

13:11.760 --> 13:13.120
它就靠手字母来区分

13:14.000 --> 13:16.800
如果你的手字母是小写 你看一下会发生什么事

13:17.840 --> 13:20.880
比方说啊 咱们的手字母是小写 保存一下

13:21.440 --> 13:22.000
你看一下

13:22.960 --> 13:23.440
啊

13:24.240 --> 13:28.720
它这里打印出来啊 它当然包了一大堆警告啊 它这里打印出来 你看一下它type值

13:29.040 --> 13:29.840
还是不是组建

13:30.320 --> 13:31.360
它认为啥呢

13:31.600 --> 13:33.680
它认为你的页面上啊

13:34.160 --> 13:37.520
有这么一个元素 叫做myfunkcomp这么一个元素

13:37.680 --> 13:38.560
它会这样子认为

13:38.800 --> 13:41.600
它认为你是一个普通的reaction元素

13:42.000 --> 13:44.880
reaction元素呢 它分为两种 大体上分为两种啊

13:45.040 --> 13:49.600
一个是普通的reaction元素 就是最终会生成atm代码的

13:49.600 --> 13:51.760
就是atm元素的啊 这么一种元素

13:52.480 --> 13:54.000
另一种元素呢 它是一个组建

13:54.560 --> 13:57.120
它会用它会指向我们的函数

13:57.920 --> 13:59.600
所以说如果你手字母小写的话

13:59.600 --> 14:02.800
它会把它理解成为一个普通的reaction元素

14:02.800 --> 14:03.680
你看印面上生成的

14:04.080 --> 14:04.960
生成这么一个东西了

14:05.520 --> 14:07.200
这显然不是我们想要的

14:07.520 --> 14:08.160
原来这意思吧

14:08.320 --> 14:10.800
所以说我们这里呢 一定要使用

14:11.280 --> 14:12.240
一定要使用这个

14:13.440 --> 14:14.000
这种用法

14:14.400 --> 14:15.200
手字母大写

14:15.680 --> 14:17.040
当你手字母大写的过后呢

14:17.040 --> 14:18.640
它生成的reaction元素呢

14:18.640 --> 14:20.160
它就是一个组建元素

14:20.560 --> 14:21.360
组建元素

14:21.680 --> 14:23.120
它会调用这个函数

14:23.120 --> 14:24.160
在渲染的时候呢

14:24.160 --> 14:25.360
它会调用这个函数

14:25.600 --> 14:27.520
把函数的返回结果呢

14:27.520 --> 14:29.040
渲染到相应的位置

14:29.200 --> 14:30.480
并且呢 它知道了

14:30.480 --> 14:32.000
它会形成这么一种结构

14:32.000 --> 14:33.600
它知道了这个div里边

14:33.600 --> 14:35.200
它先得有这么一个组建

14:35.440 --> 14:36.960
它会形成这么一种结构

14:36.960 --> 14:38.960
它跟我们直接调用是肯定不一样的

14:39.840 --> 14:40.480
直接调用的话

14:40.480 --> 14:41.760
它没有这个这一层结构

14:41.760 --> 14:42.000
对吧

14:42.000 --> 14:43.360
它直接把返回结构放这儿了

14:43.840 --> 14:44.240
但是呢

14:44.240 --> 14:45.680
如果我们直接使用组建的话

14:45.680 --> 14:46.880
它会形成这么一种结构

14:48.160 --> 14:48.800
你要对一次吧

14:49.840 --> 14:50.640
好 这是

14:50.960 --> 14:51.760
关于

14:51.760 --> 14:53.920
如何去使用一个函数组建

14:53.920 --> 14:55.280
使用一个函数组建

14:55.280 --> 14:56.160
当然我们这里呢

14:56.160 --> 14:57.440
可以把这个函数组建

14:57.440 --> 14:59.760
专门来封装到一个GS里边

14:59.760 --> 15:01.040
封装到一个GS里边

15:01.040 --> 15:02.080
封装到这儿

15:02.080 --> 15:03.760
我们这里直接拿过来吧

15:03.760 --> 15:06.400
直接拿过来

15:09.360 --> 15:10.400
这里为什么爆错

15:10.400 --> 15:11.200
为什么爆错

15:11.200 --> 15:13.600
是因为你这里使用了GSX

15:14.480 --> 15:15.920
那么它到时候会编译

15:15.920 --> 15:16.720
编译是什么

15:16.720 --> 15:19.280
编译成为react creator element

15:19.840 --> 15:20.240
但是呢

15:20.240 --> 15:21.920
你这里没有导入react

15:22.000 --> 15:23.040
所以说它会爆错

15:23.040 --> 15:24.880
所以说你得先导入react

15:25.520 --> 15:25.840
是吧

15:25.840 --> 15:26.400
react

15:27.280 --> 15:28.080
先把导入进来

15:28.880 --> 15:29.280
好

15:29.280 --> 15:30.160
导入这一块呢

15:30.160 --> 15:30.720
可以使用

15:30.720 --> 15:32.080
因为我们之前安装过吧

15:32.080 --> 15:32.400
对吧

15:32.400 --> 15:33.680
安装过了一个

15:33.680 --> 15:34.720
一个扩展包

15:34.720 --> 15:36.320
就是一个VSCode插件

15:36.320 --> 15:37.760
我们可以使用什么

15:38.640 --> 15:39.680
IMR

15:40.400 --> 15:41.360
按Type键

15:41.360 --> 15:42.400
它会自动帮我们导入

15:43.120 --> 15:44.320
自动帮我们导入这个东西

15:45.600 --> 15:45.760
好

15:45.760 --> 15:46.240
这就是

15:47.760 --> 15:48.080
那个

15:49.200 --> 15:50.160
函数组建

15:50.160 --> 15:50.800
如何来使用

15:50.800 --> 15:51.440
那这边呢

15:51.520 --> 15:52.080
怎么办呢

15:52.080 --> 15:53.200
是不是导入进来

15:53.200 --> 15:55.760
import myfunkcomp

15:55.760 --> 15:56.880
咱随便取个名字吧

15:56.880 --> 15:58.160
是因为这里是导入的

15:58.160 --> 15:59.200
所以说随便取名字

16:00.160 --> 16:00.720
导入什么

16:00.720 --> 16:01.920
myfunkcomp

16:03.520 --> 16:03.840
好

16:03.840 --> 16:04.640
就完成了

16:04.640 --> 16:05.920
效果是完全一样的

16:06.480 --> 16:06.880
保存

16:07.440 --> 16:08.400
效果是完全一样的

16:08.400 --> 16:08.720
看到没

16:10.160 --> 16:10.400
好

16:10.400 --> 16:11.120
这是关于

16:11.920 --> 16:13.840
这是关于这个组建

16:13.840 --> 16:14.000
好

16:14.000 --> 16:16.080
这里为什么会显示个online呢

16:16.080 --> 16:17.600
为什么会显示个online呢

16:17.600 --> 16:19.440
是因为我们这里没有写名字

16:19.440 --> 16:20.800
这个函数没有写名字

16:20.880 --> 16:22.400
它并不知道这个组建的名字

16:22.960 --> 16:24.320
它会用函数的名字

16:24.320 --> 16:25.760
来作为这个组建的名字

16:25.760 --> 16:27.600
因为我们这里的函数没有写名字

16:27.600 --> 16:28.480
因为它认为

16:28.480 --> 16:30.560
它就是一个未知命名的组建

16:30.560 --> 16:31.760
当然你可以在这里

16:31.760 --> 16:32.960
把名字写上也无所谓

16:33.520 --> 16:35.960
funkcomp

16:35.960 --> 16:38.520
总之最关键的是要形成这么一种结构

16:38.520 --> 16:39.560
它名字调杂呢

16:39.560 --> 16:40.600
其实不是很重要

16:41.960 --> 16:42.200
好

16:42.200 --> 16:42.840
这是这一款

16:43.560 --> 16:45.080
使用函数作为组建

16:45.720 --> 16:46.040
好

16:46.040 --> 16:48.120
另一种是使用内作为组建

16:48.680 --> 16:49.960
内作为组建我们来写一下

16:50.840 --> 16:52.360
这里我们新建个文件

16:52.760 --> 16:54.440
因为内的代码稍微多一点

16:54.440 --> 16:55.320
稍微多一点

16:56.840 --> 16:58.680
我们这里新建个文件

16:59.400 --> 17:05.960
叫做myclasscomp.js

17:06.840 --> 17:09.240
这里面我们写上一个内的格式的组建

17:09.240 --> 17:11.000
就两种组建写法都可以

17:11.000 --> 17:11.640
都可以

17:11.640 --> 17:12.600
大家都要学会

17:14.040 --> 17:15.400
我们这里怎么来写呢

17:15.880 --> 17:17.560
内组建的话你还是得

17:18.200 --> 17:19.160
导入什么

17:19.160 --> 17:20.600
导入rmc

17:20.600 --> 17:21.160
对吧

17:21.160 --> 17:21.720
导入这个

17:22.520 --> 17:23.400
不是

17:23.400 --> 17:24.360
rm什么

17:24.360 --> 17:25.560
就是react

17:30.280 --> 17:31.880
导入这个就是react

17:31.880 --> 17:32.600
随便的导入

17:33.560 --> 17:35.240
然后接下来的写法呢

17:35.240 --> 17:35.560
就是

17:36.280 --> 17:37.400
你要导出一个内

17:37.960 --> 17:39.080
导出一个内

17:39.080 --> 17:40.600
比方说这个内的名字呢

17:40.600 --> 17:41.560
我们给它取个名字

17:41.560 --> 17:42.760
我们用默认导出嘛

17:43.400 --> 17:44.200
内的名字呢

17:44.200 --> 17:44.840
给它取个名字

17:44.840 --> 17:45.560
叫做my

17:46.280 --> 17:46.760
什么呢

17:47.240 --> 17:48.600
classcomp

17:50.280 --> 17:50.840
这个内呢

17:50.840 --> 17:51.960
它有这么一个特点

17:51.960 --> 17:53.720
它必须要去继承

17:54.360 --> 17:55.480
继承字哪呢

17:55.480 --> 17:57.880
继承字如果react里面有一个属性

17:59.000 --> 18:00.040
这个属性是一个内

18:00.040 --> 18:01.240
叫做component

18:01.240 --> 18:02.360
component是什么意思

18:02.360 --> 18:03.720
就是组建的意思

18:03.720 --> 18:05.240
当然有些写法呢

18:05.240 --> 18:06.440
它可能会这样子写

18:06.440 --> 18:07.400
可能会这样子写

18:07.400 --> 18:09.240
把component在这样子呢

18:09.240 --> 18:11.160
就是用具名导出

18:11.160 --> 18:12.600
在这里先把导入进来

18:13.160 --> 18:14.520
导入进来

18:14.680 --> 18:15.320
导入进来过后呢

18:15.320 --> 18:17.160
这里就直接使用component了

18:17.160 --> 18:17.800
也行

18:17.800 --> 18:18.360
也行

18:18.360 --> 18:18.760
都行

18:19.720 --> 18:20.280
总之呢

18:20.280 --> 18:21.720
你要去继承这个玩意

18:21.720 --> 18:22.840
要么就这样子写

18:22.840 --> 18:23.240
要么呢

18:23.240 --> 18:24.200
就是react

18:24.200 --> 18:25.000
这样component

18:25.800 --> 18:26.120
都行

18:27.000 --> 18:28.680
我可能比较习惯于这种写法

18:30.280 --> 18:30.920
导入进来

18:30.920 --> 18:32.440
就是继承过后呢

18:32.440 --> 18:33.080
这个内呢

18:33.080 --> 18:35.480
它必须要提供这么一个方法

18:35.480 --> 18:36.120
什么方法呢

18:36.120 --> 18:36.840
叫做render

18:37.560 --> 18:38.280
render方法

18:38.920 --> 18:40.440
这个方法的作用是什么呢

18:41.080 --> 18:43.160
它跟那个函数组建差不多

18:43.960 --> 18:44.680
它这个方法呢

18:44.680 --> 18:46.280
要返回一个什么了

18:46.280 --> 18:47.000
该方法

18:50.430 --> 18:53.230
该方法必须返回

18:53.230 --> 18:54.190
返回啥呢

18:54.190 --> 18:57.630
返回就是react元数

18:57.630 --> 18:59.390
它必须要返回一个react元数

19:00.270 --> 19:00.590
好

19:00.590 --> 19:01.710
这里能不能返回啥

19:01.710 --> 19:03.390
比方说返回一个H1嘛

19:03.390 --> 19:04.270
也返回一个H1

19:05.150 --> 19:06.990
就是内组建内容

19:07.630 --> 19:08.190
内容

19:09.630 --> 19:10.750
保存一下啊

19:10.750 --> 19:11.950
那到这边来

19:11.950 --> 19:13.550
内组建就写完了啊

19:13.550 --> 19:14.270
到这边来

19:14.350 --> 19:16.510
我们导入了一个函数组建对吧

19:16.510 --> 19:16.830
好

19:16.830 --> 19:17.310
然后呢

19:17.310 --> 19:18.030
我们这里呢

19:18.030 --> 19:18.910
import

19:18.910 --> 19:20.430
再导入一个内组建

19:20.430 --> 19:23.070
myclasscompfrom

19:24.190 --> 19:25.070
myclasscomp

19:25.630 --> 19:26.430
再导入进来

19:26.430 --> 19:26.590
好

19:26.590 --> 19:27.790
这里是不是有两个组建了

19:27.790 --> 19:28.190
对吧

19:28.190 --> 19:29.070
有两个组建了

19:29.070 --> 19:30.350
这是函数组建对吧

19:30.350 --> 19:31.630
我们之前保存了变量里边

19:31.630 --> 19:31.870
对吧

19:31.870 --> 19:32.510
不变量放这

19:32.910 --> 19:34.750
当然它也可以咋写呢

19:34.750 --> 19:36.270
也可以用这种写法

19:36.270 --> 19:37.150
myfunk

19:37.150 --> 19:38.510
直接这样子写不完了嘛

19:38.510 --> 19:39.230
对不对

19:39.230 --> 19:39.550
好

19:39.550 --> 19:40.750
现在我们再导入一个

19:40.750 --> 19:41.630
再用一个组建

19:41.630 --> 19:43.790
就是myclasscomp

19:45.230 --> 19:46.750
是不是也可以对吧

19:46.750 --> 19:48.510
都是一样的用法

19:48.510 --> 19:50.270
用起来都是一样的用法

19:50.270 --> 19:51.550
保存咱们来看一下吧

19:52.350 --> 19:52.590
好

19:52.590 --> 19:52.910
你看

19:53.630 --> 19:54.830
这是函数组建的内容

19:54.830 --> 19:55.950
这是内组建的内容

19:56.750 --> 19:57.070
好

19:57.070 --> 19:57.550
你看一下

19:58.110 --> 19:59.630
这是函数组建

19:59.630 --> 20:00.830
函数组建的内容

20:02.510 --> 20:02.670
好

20:02.670 --> 20:03.390
保存啊

20:03.390 --> 20:03.710
你看

20:04.350 --> 20:05.710
所以两种做法都可以

20:05.710 --> 20:06.190
都可以

20:06.190 --> 20:07.470
你看一下这个结构

20:07.470 --> 20:08.670
外形的div里边

20:09.310 --> 20:12.430
这个元素里边是包含了一个函数组建的元素

20:12.430 --> 20:14.030
一个内组建的元素对吧

20:14.670 --> 20:15.870
包含了这么一种结构了

20:16.910 --> 20:17.390
好

20:17.390 --> 20:18.030
能理解吧

20:18.670 --> 20:18.830
好

20:18.830 --> 20:19.310
这样子呢

20:19.310 --> 20:21.470
我们就写出来这么两种组建

20:21.470 --> 20:23.630
都可以用同样的方式来使用

20:25.230 --> 20:25.470
好

20:25.470 --> 20:26.910
那能不能用多次呢

20:26.910 --> 20:27.870
你不说只

20:27.870 --> 20:29.390
不要说只能用一次啊

20:29.390 --> 20:30.830
他肯定可以用多次的啊

20:30.830 --> 20:32.510
用随便用多少次都可以

20:32.510 --> 20:33.790
当然不一定在这里使用

20:33.790 --> 20:35.310
可以在别的组建里面使用

20:35.310 --> 20:36.190
也可以

20:36.190 --> 20:37.310
也可以

20:37.310 --> 20:38.670
想用几次用几次

20:38.670 --> 20:39.070
你看一下

20:39.070 --> 20:40.270
这样子写了过后

20:40.270 --> 20:41.630
是不是我们的程序呢

20:41.630 --> 20:42.670
就可以附用了

20:42.670 --> 20:43.150
对吧

20:43.150 --> 20:44.750
我们写的组建的

20:44.750 --> 20:46.590
写的组建的就可以重复使用了

20:47.790 --> 20:47.950
好

20:47.950 --> 20:49.550
这是关于这一块啊

20:49.550 --> 20:50.910
如何来形成

20:50.910 --> 20:52.990
如何来去创建组建

20:52.990 --> 20:54.830
以及去使用组建

20:55.630 --> 20:56.350
是不是很简单呢

20:57.070 --> 20:57.150
好

20:57.150 --> 20:58.110
这是这一部分啊

20:58.110 --> 20:59.550
内组建文咱们记一笔啊

20:59.550 --> 21:01.550
首先呢必须继承啊

21:01.550 --> 21:02.190
继承哪呢

21:03.870 --> 21:06.750
继承reactor.component

21:06.750 --> 21:07.550
必须继承这个

21:08.510 --> 21:09.390
另外呢

21:09.390 --> 21:10.990
他必须提供

21:10.990 --> 21:12.590
Render函数啊

21:12.590 --> 21:13.710
Render函数

21:13.710 --> 21:15.950
用于轩然组建

21:15.950 --> 21:17.150
Render什么意思呢

21:17.150 --> 21:18.510
就是用来轩然的

21:18.510 --> 21:19.070
这个组建

21:19.070 --> 21:20.670
它要显示什么东西

21:20.670 --> 21:21.950
就写到Render里面

21:21.950 --> 21:23.470
当我们使用这个内组建的时候

21:23.470 --> 21:24.750
会发生什么事呢

21:24.750 --> 21:26.510
它会创建一个内的对象

21:26.510 --> 21:27.390
你看这里

21:27.390 --> 21:28.830
每一次使用一个内组建

21:28.830 --> 21:30.910
它会创建一个内组建的对象

21:30.910 --> 21:32.590
就会六一个对象

21:32.590 --> 21:33.310
对吧

21:33.310 --> 21:34.510
就会六一个对象

21:34.510 --> 21:35.150
并且呢

21:36.270 --> 21:37.230
并且呢

21:37.230 --> 21:38.270
会创建一个什么

21:38.270 --> 21:40.110
用reactor create elements

21:40.190 --> 21:42.510
来创建这么一个reactor元素

21:42.510 --> 21:44.350
把reactor元素放这

21:44.350 --> 21:45.790
其实它这个东西的本质

21:45.790 --> 21:47.870
它也是一个reactor元素

21:47.870 --> 21:48.590
咱们来看一下吧

21:50.110 --> 21:52.910
最终能显示的一定是reactor元素

21:52.910 --> 21:53.870
这没什么好说的

21:54.990 --> 21:56.270
not.comp

21:56.270 --> 21:57.470
打印出来看一下

21:57.470 --> 21:59.310
它最终也是一个reactor元素

22:01.070 --> 22:01.870
你看一下

22:01.870 --> 22:02.430
刷新啊

22:03.470 --> 22:04.990
你看它是不是个reactor元素

22:04.990 --> 22:05.550
对吧

22:05.550 --> 22:06.590
它的内形是啥

22:06.590 --> 22:07.790
内形是一个内

22:07.790 --> 22:09.390
myclass.comp

22:09.390 --> 22:10.510
是一个内

22:10.510 --> 22:12.190
那么每一个这个元素呢

22:12.190 --> 22:14.510
它实际上就是创建了一个新的对象

22:14.510 --> 22:16.750
实际上就是创建一个新的对象而已

22:16.750 --> 22:18.270
相当于就是个内的对象

22:19.230 --> 22:19.790
面对的意思吧

22:20.910 --> 22:21.630
我们最终呢

22:21.630 --> 22:23.150
会生成的11个一个的元素

22:23.950 --> 22:24.030
好

22:24.030 --> 22:26.270
这是关于内组建和函数组建

22:26.270 --> 22:27.870
他们如何来创建

22:27.870 --> 22:28.670
如何来使用

22:30.590 --> 22:31.390
总之呢

22:31.390 --> 22:33.070
无论是函数还是内组建

22:33.070 --> 22:35.550
他们最终一定要得到一个元素

22:35.550 --> 22:36.350
原来是元素

22:36.350 --> 22:37.390
它要宣然吧

22:37.390 --> 22:37.870
对吧

22:37.950 --> 22:39.150
那能不能返回一个辣物了

22:39.150 --> 22:39.710
可以

22:39.710 --> 22:40.910
如果是返回到辣物的话

22:40.910 --> 22:43.230
它自然是啥都选择不出来

22:43.230 --> 22:43.870
保存

22:43.870 --> 22:44.270
你看一下

22:44.910 --> 22:46.030
是函数组建就选择

22:46.030 --> 22:46.750
啥都选择不出来

22:46.750 --> 22:48.190
我们点击右键检查

22:48.190 --> 22:49.070
你会看到

22:49.070 --> 22:50.910
这个结构里面有没有呢

22:50.910 --> 22:51.870
它有

22:51.870 --> 22:52.910
它有这个结构

22:52.910 --> 22:54.030
只不过显示不出来

22:54.030 --> 22:55.630
这个结构还是存在的

22:55.630 --> 22:56.990
它只是显示不出来而已

22:58.190 --> 22:58.350
好

22:58.350 --> 22:59.310
这是关于这一块

23:00.590 --> 23:01.230
函数组建

23:01.230 --> 23:01.630
内组建

23:01.630 --> 23:02.270
你要知道

23:02.270 --> 23:02.990
这一块呢

23:02.990 --> 23:03.870
目前呢

23:03.870 --> 23:04.990
不用想那么多

23:04.990 --> 23:05.790
你只要知道

23:05.790 --> 23:06.830
内组建该咋写

23:07.390 --> 23:08.670
函数组建该咋写

23:09.230 --> 23:09.630
然后呢

23:09.630 --> 23:10.670
怎么去用

23:10.670 --> 23:11.470
就可以了

23:11.470 --> 23:12.030
就可以了

23:13.310 --> 23:13.470
好

23:13.470 --> 23:14.190
接下来呢

23:14.190 --> 23:15.310
咱们来说下一个知识

23:17.320 --> 23:18.920
就是组建里面的属性

23:19.640 --> 23:20.600
组建的属性

23:22.440 --> 23:24.600
你们在学习5u的时候

23:24.600 --> 23:25.800
我们就是讲个课

23:25.800 --> 23:26.840
多去对比一下

23:26.840 --> 23:27.960
你们之前的知识

23:28.680 --> 23:29.000
当然

23:29.000 --> 23:30.680
如果你之前没有接触过5u

23:30.680 --> 23:32.040
也不会影响你们的

23:32.600 --> 23:34.040
就是观看这个视频

23:35.000 --> 23:35.640
就是假设

23:35.640 --> 23:37.400
如果你之前学过5u的话

23:37.480 --> 23:39.400
你肯定知道属性是什么意思

23:39.960 --> 23:40.920
就是有的时候呢

23:40.920 --> 23:42.760
咱们要写一个组建

23:42.760 --> 23:43.480
这个组建呢

23:43.480 --> 23:44.760
可能有些未知信息

23:45.240 --> 23:46.920
需要使用这个组建的人呢

23:46.920 --> 23:48.120
给它传递进来

23:48.680 --> 23:49.320
那比方说吧

23:49.800 --> 23:50.280
比方说

23:51.560 --> 23:53.880
我们这个函数组建呢

23:53.880 --> 23:55.320
给它稍微改造一下

23:56.120 --> 23:57.720
给它返回这么一个东西

23:58.360 --> 23:59.160
返回啥呢

23:59.720 --> 24:00.840
返回的就是一个

24:00.840 --> 24:02.280
还是一个H1元素吧

24:02.840 --> 24:03.880
这是函数组建

24:04.840 --> 24:05.240
然后呢

24:05.240 --> 24:06.600
这里要显示一个数字

24:07.480 --> 24:12.600
目前的数字

24:12.600 --> 24:14.120
就随便写一个东西吧

24:14.120 --> 24:14.920
举个例子嘛

24:15.640 --> 24:16.040
对不对

24:16.040 --> 24:16.520
举个例子

24:17.960 --> 24:19.000
函数组建

24:19.000 --> 24:19.880
目前的数字

24:19.880 --> 24:21.000
要显示个数字

24:21.000 --> 24:23.160
但是这个数字要显示多少呢

24:23.160 --> 24:24.200
我并不知道

24:24.200 --> 24:26.200
我并不知道这个数字应该多少

24:26.200 --> 24:27.240
那么怎么办呢

24:27.240 --> 24:29.640
我需要使用这个组建的人来告诉

24:30.200 --> 24:30.840
我这里呢

24:30.840 --> 24:31.880
我这个组建呢

24:31.880 --> 24:32.600
功能很简单

24:32.600 --> 24:33.480
就是一个文字

24:33.480 --> 24:35.240
一个H1元素里边一段文字

24:35.240 --> 24:35.880
有个数字

24:36.440 --> 24:38.040
有可能那个数字会变化

24:38.040 --> 24:38.840
所以说我这里呢

24:38.840 --> 24:41.080
也不能确定这个数字到底是多少

24:41.080 --> 24:41.480
所以说呢

24:41.480 --> 24:43.160
你需要给我传进来

24:43.160 --> 24:44.840
那么对于函数组建而言

24:44.840 --> 24:46.360
传的这个东西是啥呢

24:46.360 --> 24:48.040
传的就是参数

24:49.000 --> 24:49.720
就是参数

24:50.280 --> 24:51.640
它有这么一个参数

24:51.640 --> 24:52.040
probs

24:52.600 --> 24:54.440
它这个参数名字是我随便取的

24:54.440 --> 24:55.720
只不过习惯上了

24:55.720 --> 24:57.160
我们会取名为probs

24:58.440 --> 24:59.640
我们希望它呢

24:59.640 --> 25:01.720
给我传定这么一个东西进来

25:01.720 --> 25:03.080
我这里先写

25:03.080 --> 25:03.720
写了过后呢

25:03.720 --> 25:05.240
写了一个完整的例子过后呢

25:05.240 --> 25:06.280
我再来解释

25:07.400 --> 25:08.200
比方说这里呢

25:08.200 --> 25:09.240
传的一个数字进来

25:09.240 --> 25:10.280
数字是什么呢

25:10.280 --> 25:11.560
我们从这里来读取

25:13.160 --> 25:13.800
Number

25:13.800 --> 25:14.280
Number嘛

25:15.000 --> 25:16.520
也就是说这个东西像个啥

25:16.520 --> 25:17.640
是不是像个对象

25:17.640 --> 25:18.200
对不对

25:18.200 --> 25:19.880
它像是一个对象一样

25:19.880 --> 25:21.480
这个对象里面有个属性呢

25:21.480 --> 25:22.200
叫做Number

25:22.840 --> 25:24.760
好这个属性哪来的呢

25:24.760 --> 25:26.840
它是我们使用组建的时候

25:26.840 --> 25:28.600
给它传进去了

25:28.600 --> 25:29.160
比方说啊

25:29.160 --> 25:29.640
这里呢

25:29.640 --> 25:30.680
我们这样子写

25:30.680 --> 25:31.000
Number

25:31.720 --> 25:32.920
传一个数字进来

25:32.920 --> 25:34.360
比方说可以是支付串

25:35.240 --> 25:36.280
如果你传到支付串的话

25:36.280 --> 25:38.680
那么这边接受到的就是支付串

25:38.680 --> 25:40.040
如果你传的是一个数字的话

25:40.040 --> 25:42.200
那么那边接受到的就是四个数字

25:42.200 --> 25:43.960
那比方说这里要传一个数字怎么传

25:45.080 --> 25:45.800
你不能这样子啊

25:45.800 --> 25:47.240
这个样子也不是支付串啊

25:47.240 --> 25:48.280
两个双硬好嘛

25:48.280 --> 25:49.080
你要传数字的话

25:49.080 --> 25:50.040
得用这种方式啊

25:50.840 --> 25:52.040
得用这种方式

25:52.040 --> 25:53.000
比方说传一个5

25:53.960 --> 25:54.840
好你看一下吧

25:57.000 --> 25:57.320
6

25:59.240 --> 25:59.480
7

26:00.760 --> 26:01.480
保存看一下

26:03.000 --> 26:04.120
那这里看

26:04.120 --> 26:06.360
这个组建里面是不是能够获取到个信息的

26:06.440 --> 26:06.840
对吧

26:06.840 --> 26:08.360
它是能够获取这个信息的

26:09.000 --> 26:10.120
也就是这里呢

26:10.120 --> 26:11.400
使用函数组建

26:11.400 --> 26:12.760
相当于这个四个东西呢

26:12.760 --> 26:15.080
相当于是调用了函数组建几次

26:15.080 --> 26:15.800
所以调用了

26:16.440 --> 26:17.320
调用了几次

26:17.320 --> 26:18.520
所以调用了四次

26:19.080 --> 26:19.720
每一次呢

26:19.720 --> 26:21.320
给它传的一个属性进来

26:21.320 --> 26:21.720
你看一下

26:21.720 --> 26:23.000
这属性是怎么传递的

26:23.000 --> 26:23.880
咱们来这里呢

26:23.880 --> 26:25.160
打印出这个props

26:26.440 --> 26:27.720
打印出这个props

26:27.720 --> 26:28.680
看一下是怎么传递的

26:29.480 --> 26:29.800
保存

26:30.360 --> 26:31.000
你看一下啊

26:31.720 --> 26:32.200
那这边

26:32.680 --> 26:33.400
右键检查

26:34.040 --> 26:34.440
你看

26:35.240 --> 26:35.720
刷新啊

26:36.680 --> 26:37.960
第一个把去掉了

26:37.960 --> 26:39.400
第一个打印把去掉

26:39.400 --> 26:40.680
之前的打印结果

26:41.400 --> 26:42.040
把去掉

26:42.040 --> 26:42.520
保存

26:42.520 --> 26:43.000
从现在

26:44.040 --> 26:44.440
你看一下

26:44.440 --> 26:45.880
打印出来的结果

26:45.880 --> 26:47.880
你可以看到这个props呢

26:47.880 --> 26:49.640
首先看到它调用了四次对吧

26:49.640 --> 26:50.840
这个函数组建里边

26:50.840 --> 26:52.120
它调用了四次

26:52.920 --> 26:54.040
那么每一次呢

26:54.040 --> 26:55.080
我们得到的props呢

26:55.080 --> 26:55.800
是一个对象

26:56.520 --> 26:58.120
哪怕你啥都不传

26:59.080 --> 27:00.280
哪怕你啥都没传

27:00.760 --> 27:01.880
它也是个对象

27:02.280 --> 27:03.480
它也是一个对象

27:03.480 --> 27:03.880
看到没

27:04.680 --> 27:05.480
也是一个对象

27:06.680 --> 27:07.800
那这里传递的

27:07.800 --> 27:09.160
它自然就是个对象

27:09.160 --> 27:09.560
对吧

27:10.520 --> 27:12.280
那么对象里边

27:12.280 --> 27:13.800
有哪些属性呢

27:13.800 --> 27:14.840
这个对象里边

27:14.840 --> 27:15.800
哪些属性呢

27:15.800 --> 27:17.240
就是通过这里传递的

27:17.240 --> 27:18.760
这里写了一个

27:18.760 --> 27:20.760
它就会往对象里边加一个属性

27:21.320 --> 27:22.520
也就是说它这里呢

27:22.520 --> 27:24.040
它会把这个东西啊

27:24.040 --> 27:25.880
作为这个对象的属性

27:26.440 --> 27:27.800
作为这个对象的属性

27:27.800 --> 27:29.320
给它放到这个对象里边

27:29.320 --> 27:30.520
那么在这个函数里边

27:30.520 --> 27:31.960
就可以使用这里边的数据了

27:32.520 --> 27:33.160
明白这个意思吧

27:34.200 --> 27:35.160
应该很好理解吧

27:36.120 --> 27:37.320
这里写了个Number

27:37.320 --> 27:39.320
那么它就会构建这么一个对象

27:39.960 --> 27:41.240
对象里边一个属性

27:41.240 --> 27:42.680
Number它的值呢

27:42.680 --> 27:44.040
是一个制服创二

27:44.040 --> 27:45.240
然后把这个对象呢

27:45.240 --> 27:46.440
传到哪呢

27:46.440 --> 27:47.160
是不是传到这

27:47.720 --> 27:48.840
传到这里边去

27:48.840 --> 27:50.040
它会自动给你封装好

27:51.960 --> 27:52.760
明白这个意思吗

27:52.760 --> 27:53.800
非常简单

27:53.800 --> 27:54.360
那么这边呢

27:54.360 --> 27:56.920
就可以使用这个属性里边了

27:56.920 --> 27:58.520
这个对象里边的属性了

27:58.520 --> 28:00.120
来得到你传递的信息

28:01.000 --> 28:01.560
那当然呢

28:01.560 --> 28:02.760
可以传递很多个数据

28:02.760 --> 28:03.080
对吧

28:03.080 --> 28:04.520
我们这里传递了一个数据

28:04.600 --> 28:06.200
那么当然可以传递更多的数据

28:07.560 --> 28:07.800
好

28:07.800 --> 28:09.000
那么这样传递过去呢

28:09.000 --> 28:11.800
我们这边是不是可以正常使用了

28:11.800 --> 28:12.120
对不对

28:12.760 --> 28:13.800
我们同样可以看到

28:13.800 --> 28:14.760
从这里可以看到

28:14.760 --> 28:16.120
看得非常非常清楚

28:16.120 --> 28:17.320
我们这个组件里边

28:17.320 --> 28:18.280
你看一下

28:18.280 --> 28:19.320
右边这个区域

28:19.320 --> 28:20.600
它就显示出来了

28:20.600 --> 28:22.040
你这一次使用组件呢

28:22.040 --> 28:23.000
它传递到一个数据

28:23.000 --> 28:23.640
叫做Number

28:23.640 --> 28:24.760
它的制服创了是二

28:24.760 --> 28:26.360
它是一个制服创是二

28:26.360 --> 28:27.160
那么第二次呢

28:27.160 --> 28:28.280
它是传了一个数据

28:28.280 --> 28:29.480
Number Props嘛

28:29.480 --> 28:31.480
它传了一个数字5

28:31.480 --> 28:31.880
看到没

28:32.520 --> 28:33.080
看到没

28:33.080 --> 28:33.400
对吧

28:34.360 --> 28:36.520
非常非常简洁明亮

28:38.120 --> 28:39.320
所以说在这里呢

28:39.320 --> 28:42.040
就是函数组件的一种用法

28:43.080 --> 28:45.000
那么对于那一组件而言呢

28:45.640 --> 28:46.760
对于那一组件而言呢

28:46.760 --> 28:48.280
那又怎么来传递这个东西呢

28:48.840 --> 28:49.720
是一样的

28:49.720 --> 28:51.080
用的时候是一样的

28:51.640 --> 28:52.120
看着啊

28:52.680 --> 28:53.800
咱们把这个复制一下

28:54.920 --> 28:55.800
粘贴过来

28:57.080 --> 28:58.120
就四个就够了

28:59.080 --> 29:01.000
好对于那一组件也是一样的

29:01.000 --> 29:02.840
那么那一组件跑到哪去了呢

29:03.640 --> 29:05.000
那一组件跑哪去了呢

29:05.000 --> 29:05.960
我们这里呢

29:05.960 --> 29:06.680
记一笔啊

29:07.240 --> 29:08.520
对于函数组件

29:09.480 --> 29:11.080
对于函数组件

29:12.120 --> 29:12.760
属性

29:13.320 --> 29:17.160
会作为一个对象的属性

29:18.040 --> 29:20.280
传递给函数的参数

29:20.840 --> 29:21.080
对吧

29:21.080 --> 29:21.960
我们刚才写的

29:21.960 --> 29:22.840
函数组件里边

29:22.840 --> 29:23.480
这些属性

29:23.480 --> 29:24.920
它会作为对象的一个属性

29:24.920 --> 29:25.720
传递给谁的

29:25.720 --> 29:27.000
传递给这个参数

29:27.560 --> 29:29.400
那么对于那一组件而言呢

29:29.400 --> 29:30.440
对于那一组件

29:31.240 --> 29:33.160
属性会作为

29:33.960 --> 29:35.800
一个对象的属性

29:35.800 --> 29:36.600
一样的啊

29:36.600 --> 29:37.000
一样的

29:39.000 --> 29:40.280
主要是传递

29:40.280 --> 29:41.640
传递给谁呢

29:41.640 --> 29:44.600
传递给构造函数

29:45.960 --> 29:47.080
函数的参数

29:47.080 --> 29:49.560
它会传递给构造函数的参数

29:49.560 --> 29:51.080
也就是说我们这里呢

29:51.080 --> 29:52.840
如果你书写一个构造函数

29:53.720 --> 29:54.440
constructor

29:55.880 --> 29:57.560
那么它会传递到这来

29:57.560 --> 29:58.920
它会把这个属性传到这来

30:00.520 --> 30:01.160
我们这里呢

30:01.160 --> 30:02.520
输出一下这个属性

30:02.520 --> 30:03.560
当然这样子写呢

30:03.560 --> 30:04.920
它是要报错的

30:04.920 --> 30:05.960
我们看一下吧

30:05.960 --> 30:06.360
看一下

30:09.040 --> 30:10.080
它这里报了一个错

30:10.080 --> 30:11.520
报了一个什么错呢

30:11.520 --> 30:12.960
它说你这里呢

30:12.960 --> 30:14.640
你在使用继承

30:14.640 --> 30:16.800
我们之前讲s6是不是讲过

30:17.600 --> 30:19.280
你使用继承的话

30:19.280 --> 30:20.880
你是不是构造函数里边

30:20.880 --> 30:22.000
第一句话得写啥

30:22.560 --> 30:23.520
是不是得写个super

30:24.240 --> 30:25.120
对不对

30:25.120 --> 30:28.320
先调用一次负累的构造函数

30:28.320 --> 30:30.400
现在就调用负累的构造函数

30:30.480 --> 30:32.880
而它负累的构造函数里边有个特点

30:33.360 --> 30:34.800
你需要把属性传给它

30:35.600 --> 30:36.880
你需要把属性传给它

30:37.600 --> 30:38.960
也要把属性传给它

30:38.960 --> 30:40.720
它会做一个什么事呢

30:40.720 --> 30:42.000
它做的事情很简单

30:42.000 --> 30:43.040
它就做了这么一件事

30:43.040 --> 30:43.840
this props

30:44.640 --> 30:45.040
props

30:45.600 --> 30:46.480
它就做了这么一件事

30:47.280 --> 30:48.880
这个负累的构造函数里边

30:48.880 --> 30:50.240
它就做了这么一件事

30:50.240 --> 30:52.240
把你传递的属性对象

30:52.240 --> 30:53.920
保存到它的属性里边

30:54.480 --> 30:55.440
保存到这个属性里边

30:56.400 --> 30:57.200
那你看一下吧

30:58.480 --> 30:58.880
刷新

31:00.480 --> 31:01.440
这里控制台

31:01.440 --> 31:02.240
你看一下

31:02.240 --> 31:05.440
我们把之前的函数这里的打印去掉

31:07.120 --> 31:09.040
你看那里边也打印出来的东西

31:09.040 --> 31:09.360
对吧

31:09.920 --> 31:11.120
也传递过来了

31:11.120 --> 31:12.640
所以调用了40构造函数

31:12.640 --> 31:14.000
说明了创建了几个对象

31:14.000 --> 31:15.520
创建了4个对象

31:16.320 --> 31:17.040
没问题吧

31:17.040 --> 31:18.320
它创建了4个对象

31:19.680 --> 31:21.200
好那么这里我们再打印什么

31:21.200 --> 31:23.120
再打印this props

31:23.120 --> 31:23.840
你看一下

31:23.840 --> 31:24.880
是不是也一样的

31:25.440 --> 31:27.200
因为它负累的构造函数里边

31:27.200 --> 31:28.400
是不是也做了这么一件事

31:28.880 --> 31:30.960
所以说这里打印这个东西是一样的

31:32.560 --> 31:33.840
甚至你可以比较一下

31:33.840 --> 31:34.800
它们两个是不是相等

31:35.680 --> 31:36.080
probs

31:36.080 --> 31:37.040
你说是不是相等了

31:37.840 --> 31:38.800
你告诉我是不是相等

31:39.440 --> 31:40.240
肯定是相等

31:40.880 --> 31:41.600
对不对

31:41.600 --> 31:42.880
肯定是相等的

31:42.880 --> 31:44.720
因为它就是这样子完成复职的

31:45.840 --> 31:47.360
所以说在内里边

31:47.360 --> 31:48.400
内组建里边

31:49.520 --> 31:51.760
当然你没有什么耳外的事情

31:51.760 --> 31:52.480
可做的话

31:52.480 --> 31:54.480
那就不要去写这个构造函数了

31:54.480 --> 31:56.400
它认为这样的写没有意义

31:56.400 --> 31:56.880
没有意义

31:56.880 --> 31:58.000
它会自动完成的

31:58.160 --> 31:59.280
所以说你没有必要写了

32:00.320 --> 32:01.600
我们就放这吧

32:01.600 --> 32:02.080
放这吧

32:02.640 --> 32:04.480
让大家清楚的知道这么一回事

32:04.480 --> 32:05.840
当然这个东西是可以不写的

32:05.840 --> 32:06.720
是可以不写的

32:07.840 --> 32:09.680
好那么这里边我们要使用

32:10.320 --> 32:10.800
比方说

32:11.360 --> 32:12.080
使用数字

32:12.080 --> 32:13.040
数字是多少呢

32:13.040 --> 32:14.400
我们怎么来得到这个数字

32:14.400 --> 32:16.240
是不是this props

32:16.240 --> 32:16.880
第二是什么

32:17.520 --> 32:17.840
number

32:19.040 --> 32:19.760
是不是一样的

32:20.400 --> 32:21.600
只不过加了一个this

32:21.600 --> 32:23.600
因为它保存到它里边属性里边

32:24.240 --> 32:25.520
对象的属性里边

32:25.520 --> 32:27.600
通过this来获取这个属性对象

32:28.080 --> 32:30.560
通过这个属性对象来获取你传递的数据

32:30.560 --> 32:31.040
number

32:31.680 --> 32:32.160
保存

32:32.480 --> 32:32.960
你看一样

32:34.720 --> 32:36.480
那一组件是不是一样的可以得到

32:36.960 --> 32:37.280
对不对

32:38.240 --> 32:41.680
这样子就可以给组建了传递数据了

32:43.520 --> 32:45.920
而且这个组建的数据

32:47.120 --> 32:48.960
它是可以传递任何数据的

32:49.680 --> 32:51.280
是可以传递任何数据的

32:52.000 --> 32:52.880
比方说吧

32:53.440 --> 32:54.400
比方说举个例子

32:55.040 --> 32:55.600
举个例子

32:56.080 --> 32:57.200
那这里边比方说

32:57.280 --> 32:58.480
我们传递这么一个数据

32:59.520 --> 33:00.800
我们刚才不传了数字吗

33:01.040 --> 33:01.520
对不对

33:01.520 --> 33:02.560
那再传个布尔

33:02.560 --> 33:03.600
再传个布尔

33:04.000 --> 33:05.120
好咱们来比方说

33:05.120 --> 33:06.160
传这么一个数据

33:07.440 --> 33:08.480
就随便写个

33:08.480 --> 33:09.760
随便写个属性吧

33:09.760 --> 33:11.280
in label

33:11.760 --> 33:12.560
in label

33:13.360 --> 33:14.080
写上一个啥

33:14.080 --> 33:14.800
一个布尔

33:14.800 --> 33:15.120
q

33:16.160 --> 33:16.640
q

33:17.280 --> 33:18.000
传了一个布尔

33:18.000 --> 33:18.720
能不能传递呢

33:18.720 --> 33:19.600
当然可以传递

33:19.600 --> 33:20.880
传了两个属性进去对吧

33:21.120 --> 33:22.240
传了两个属性进去

33:22.480 --> 33:23.520
好那咱们这里呢

33:23.520 --> 33:26.000
咱们在Render显示的时候输出一下

33:26.560 --> 33:27.120
输出一下

33:27.200 --> 33:27.840
因为它一会儿

33:27.840 --> 33:29.520
总会在调用这个方法

33:30.080 --> 33:30.800
什么时候调用

33:30.800 --> 33:31.600
就渲染的时候

33:31.600 --> 33:32.880
它就会自动的去调用

33:33.200 --> 33:34.480
内里边的Render方法

33:34.800 --> 33:36.240
或者是函数组件里面

33:36.240 --> 33:37.280
它就会调用这个函数

33:38.240 --> 33:39.120
因为它要渲染嘛

33:39.840 --> 33:41.280
好那么这里那么输出啥

33:41.520 --> 33:42.480
输出这个啥

33:42.720 --> 33:45.280
输出这个res props里边的什么

33:46.720 --> 33:47.680
就输出这个吧

33:47.680 --> 33:48.400
就输出这个

33:48.880 --> 33:49.520
保存

33:49.520 --> 33:50.080
你看一下

33:51.840 --> 33:53.440
那么它这里渲染四次对吧

33:53.440 --> 33:54.800
因为有四个内组件嘛

33:54.800 --> 33:55.840
对不对

33:55.840 --> 33:56.720
它渲染了四次

33:57.120 --> 33:58.400
那么第一次你看得到了

33:58.400 --> 33:59.600
是不是得到两个属性

33:59.600 --> 34:00.640
enable to

34:00.800 --> 34:02.320
那后边的对象里面

34:02.320 --> 34:03.200
它有没有这个属性

34:03.200 --> 34:04.320
你没有传递嘛

34:04.640 --> 34:06.000
它这个enable就是undefined

34:07.280 --> 34:08.400
好那么这个布尔

34:08.560 --> 34:10.400
这个可以传递布尔值

34:10.400 --> 34:10.880
甚至呢

34:10.880 --> 34:11.840
我们可以这样传递

34:13.440 --> 34:15.120
这是不是类似有Athema的写法

34:15.280 --> 34:15.680
对吧

34:15.680 --> 34:16.880
Athema5的写法

34:17.040 --> 34:17.920
保存你看一下

34:18.800 --> 34:20.320
所以得到一样的结果

34:20.320 --> 34:21.280
enable to

34:21.280 --> 34:21.760
对不对

34:21.760 --> 34:22.880
得到一样的结果

34:23.520 --> 34:24.400
像这种布尔属性

34:24.400 --> 34:25.200
你只要写

34:25.200 --> 34:25.760
不用写

34:26.000 --> 34:26.800
等于to

34:26.960 --> 34:28.640
因为这样写的比较繁琐

34:28.640 --> 34:30.240
你可以利用Athema的写法

34:30.240 --> 34:31.360
因为jsx呢

34:31.360 --> 34:32.800
它也支持这种写法

34:32.800 --> 34:34.080
那么它会自动的给你传递

34:34.080 --> 34:35.120
这个属性为to

34:36.080 --> 34:37.120
那除了传递这个东西

34:37.120 --> 34:38.000
还可以传递啥呢

34:38.480 --> 34:39.440
还可以传递啥呢

34:40.000 --> 34:41.200
还可以传递这个东西

34:41.600 --> 34:42.800
可以传递对象

34:42.960 --> 34:44.320
比方说传一个ob界

34:44.800 --> 34:45.760
下面这个来吧

34:46.720 --> 34:47.840
传一个ob界

34:48.000 --> 34:48.720
它是一个对象

34:48.720 --> 34:49.360
能不能传递

34:49.360 --> 34:50.560
啥都可以传递

34:50.560 --> 34:51.760
想传啥传啥

34:52.160 --> 34:53.120
传一个对象

34:53.280 --> 34:54.400
比方说nam

34:54.400 --> 34:55.360
等于啥呢

34:55.360 --> 34:56.000
等于

34:56.000 --> 34:56.720
乘哥

34:57.760 --> 34:58.800
A级呢

34:58.800 --> 34:59.520
等于100

35:00.160 --> 35:01.360
能不能传对象

35:01.360 --> 35:02.160
保存

35:02.160 --> 35:02.880
看一下

35:03.680 --> 35:04.240
你看

35:04.240 --> 35:06.160
是不是属性里面传了个对象进去

35:06.320 --> 35:06.800
对吧

35:06.800 --> 35:07.920
传了个对象进去

35:08.480 --> 35:10.240
那这边怎么用呢

35:10.400 --> 35:11.120
这边

35:11.120 --> 35:12.560
那你是不是直接

35:12.560 --> 35:13.360
你都获取到了

35:13.360 --> 35:14.320
还不知道怎么用吗

35:14.560 --> 35:15.840
是不是把这个属性的

35:15.840 --> 35:17.120
全部拿到就完事了

35:17.120 --> 35:17.600
对不对

35:17.600 --> 35:18.640
你该咋用咋用

35:18.640 --> 35:19.680
想咋用咋用

35:20.240 --> 35:21.120
原来的意思吧

35:21.440 --> 35:22.240
比方说吧

35:22.240 --> 35:22.800
比方说

35:22.800 --> 35:24.160
我们这里可以做个判断

35:24.160 --> 35:24.960
判断

35:25.200 --> 35:26.720
一副如果

35:26.720 --> 35:27.920
这也是probs里面

35:27.920 --> 35:29.520
obj存在的话

35:30.160 --> 35:31.040
返回一个东西

35:31.040 --> 35:31.920
如果不存在的话

35:31.920 --> 35:32.720
就返回这个

35:32.960 --> 35:33.120
好

35:33.120 --> 35:33.840
如果存在的话

35:33.840 --> 35:35.200
咱们咱们这么这样子返回吧

35:35.600 --> 35:36.480
这样子返回

35:37.760 --> 35:38.560
呃

35:38.560 --> 35:39.120
这样子啊

35:40.880 --> 35:42.320
就是说rex呢

35:42.320 --> 35:44.560
它是非常非常灵活的啊

35:44.560 --> 35:45.840
你可以随意的裁分

35:46.880 --> 35:47.200
好

35:47.200 --> 35:47.520
这里呢

35:47.520 --> 35:49.040
我们返回返回什么呢

35:49.040 --> 35:50.240
返回的是

35:50.240 --> 35:50.720
呃

35:50.720 --> 35:51.600
一个P元素

35:51.600 --> 35:51.840
呃

35:51.840 --> 35:52.480
P元素里面

35:52.480 --> 35:52.880
姓名

35:53.600 --> 35:54.880
姓名来自于哪呢

35:55.280 --> 35:55.520
呃

35:55.520 --> 35:56.080
this

35:56.080 --> 35:56.480
ob

35:56.480 --> 35:57.040
probs

35:57.040 --> 35:58.080
obj.h

35:58.720 --> 35:59.120
好

35:59.120 --> 36:00.080
再来一个啊

36:00.080 --> 36:01.040
就是年龄

36:02.080 --> 36:02.800
好

36:02.800 --> 36:03.360
this

36:03.360 --> 36:04.240
probs

36:04.240 --> 36:05.280
obj.h

36:06.080 --> 36:06.560
保存

36:07.200 --> 36:07.360
好

36:07.360 --> 36:07.920
你看一下

36:07.920 --> 36:09.520
它就根据不同的情况来返回了

36:09.520 --> 36:09.760
对吧

36:10.560 --> 36:10.720
好

36:10.720 --> 36:11.120
你看

36:11.120 --> 36:12.080
这里是不是返回了

36:12.080 --> 36:12.880
这个东西

36:12.880 --> 36:13.280
对不对

36:14.080 --> 36:14.480
啊

36:14.480 --> 36:15.840
啥都可以传递

36:15.840 --> 36:16.960
什么都可以强谍

36:16.960 --> 36:17.920
只有你想不到的

36:17.920 --> 36:18.720
没有他做不到的

36:19.520 --> 36:21.760
因为属性就是一个普通的对象属性

36:21.760 --> 36:22.320
你说啥

36:22.320 --> 36:23.040
啥不能传递呢

36:24.000 --> 36:26.240
甚至说还可以传递这个东西

36:27.200 --> 36:27.600
呃

36:28.160 --> 36:28.640
UI

36:30.400 --> 36:31.040
啥东西呢

36:31.600 --> 36:32.480
我还可以给他

36:32.480 --> 36:33.040
可以给他

36:33.040 --> 36:34.160
传递这么一个东西进去

36:34.800 --> 36:36.000
比方说H2元素

36:37.040 --> 36:38.640
这是我传递的属性

36:39.680 --> 36:40.800
能不能这样的传递

36:40.800 --> 36:41.280
你看一下

36:41.280 --> 36:42.320
这个玩意是不是对象

36:43.360 --> 36:44.560
那凭什么不能传递呢

36:45.200 --> 36:46.240
它就是个对象啊

36:46.240 --> 36:46.960
它又啥去

36:46.960 --> 36:48.160
它跟对象有啥区别呢

36:48.560 --> 36:49.360
它就是一个对象

36:49.360 --> 36:51.360
只是这是一个语法堂而已

36:51.360 --> 36:52.320
能不能传递这个东西

36:53.120 --> 36:54.320
也可以传递

36:54.320 --> 36:56.400
所以Rx它非常非常凝固

36:57.040 --> 36:58.800
好你看一下这样的传递过去

36:58.800 --> 37:00.080
那这边比方说啊

37:00.080 --> 37:02.000
比方说咱们又来判断啊

37:02.000 --> 37:02.720
又来判断

37:03.840 --> 37:04.560
LCF

37:05.280 --> 37:06.720
或者是这样子啊

37:06.720 --> 37:08.080
这样子我们换一个

37:09.280 --> 37:10.160
换一个组件啊

37:10.160 --> 37:11.120
就不写到这了

37:11.120 --> 37:11.520
写到这

37:13.520 --> 37:14.240
就瞎写啊

37:14.240 --> 37:15.120
这些东西瞎写

37:15.120 --> 37:16.320
我们主要是讲解语法

37:16.720 --> 37:18.080
好LCF

37:18.080 --> 37:20.000
如果发现了这个probs里边

37:20.000 --> 37:21.120
有UI这个属性

37:22.080 --> 37:22.960
那我干嘛呢

37:22.960 --> 37:24.720
我直接把这个UI属性给你返回

37:24.720 --> 37:25.360
就完事了

37:26.160 --> 37:27.520
直接把UI属性给你返回

37:28.080 --> 37:30.000
我当然也可以做一些其他处理

37:30.560 --> 37:31.680
也可以做一些其他处理

37:32.160 --> 37:33.040
我这里呢就可以

37:33.040 --> 37:35.520
因为你传的一个就是元素性来嘛

37:35.520 --> 37:36.080
对不对

37:36.080 --> 37:37.600
那我直接把这个元素返回

37:37.600 --> 37:38.800
因为我这个人的函数

37:38.800 --> 37:40.480
最终就不就是要返回元素吗

37:40.480 --> 37:41.280
你看这些东西

37:41.280 --> 37:42.320
不就是元素吗

37:42.320 --> 37:43.600
你给我传的一个元素性来

37:43.600 --> 37:44.400
然后就返回呗

37:44.960 --> 37:45.760
当然也可以

37:45.760 --> 37:47.280
也可以再进行一下稍稍做

37:48.880 --> 37:50.160
再进行一下外面写个

37:50.880 --> 37:51.760
DIV

37:51.760 --> 37:52.720
DIV

37:52.720 --> 37:54.560
这些个H元素

37:55.920 --> 37:56.960
下面是

37:58.080 --> 37:59.040
传入的内容

38:00.080 --> 38:00.800
然后下面呢

38:00.800 --> 38:01.920
我们再写上这个

38:01.920 --> 38:03.280
ThisProbsUI

38:03.280 --> 38:04.080
对吧

38:04.080 --> 38:05.440
怎么操作都可以

38:05.440 --> 38:07.200
所以各种各样的稍稍做

38:07.200 --> 38:07.920
保存

38:07.920 --> 38:08.400
你看一下

38:09.840 --> 38:10.480
你看

38:10.480 --> 38:11.440
这一部分这个组件

38:11.440 --> 38:12.800
它得到这么东西

38:12.800 --> 38:13.280
看一下结构

38:15.280 --> 38:16.320
这里跑哪去了

38:17.520 --> 38:17.920
是这个吗

38:20.800 --> 38:21.280
刷新啊

38:22.800 --> 38:24.160
它这里没有显

38:24.160 --> 38:24.960
没有没有显

38:24.960 --> 38:26.080
哦这里显示出来了啊

38:26.080 --> 38:26.720
UI

38:26.720 --> 38:28.960
它这边没有显示出来

38:28.960 --> 38:29.600
UI

38:29.600 --> 38:30.160
好你看一下

38:30.160 --> 38:31.360
这里传入了这个东西

38:31.360 --> 38:31.840
大家看看

38:31.840 --> 38:33.120
最终返回的结果就是

38:33.120 --> 38:34.640
DIV下面一个H1

38:34.640 --> 38:35.200
H2

38:35.200 --> 38:35.760
你看没有

38:35.760 --> 38:37.760
它就整个组件

38:37.760 --> 38:38.960
就是这样的一个内容

38:40.000 --> 38:40.400
对不对

38:40.400 --> 38:42.320
所以说啥都可以传递

38:42.320 --> 38:42.720
因此呢

38:42.720 --> 38:44.720
我们后面会有很多很多的

38:44.720 --> 38:46.160
乱起八道的稍稍做

38:46.160 --> 38:47.920
它并不是什么新知识

38:47.920 --> 38:49.120
就是利用它这些

38:49.200 --> 38:51.200
非常非常灵活的特点

38:51.200 --> 38:53.040
来解决一些常见的问题

38:53.760 --> 38:55.680
因为发现属性都可以传递

38:55.680 --> 38:57.120
包括这个函数组件也是一样

38:58.640 --> 38:59.840
这是关于

38:59.840 --> 39:00.640
属性

39:00.640 --> 39:02.080
就组件的属性

39:02.080 --> 39:02.880
啥都可以传

39:04.000 --> 39:05.040
只不过大家平时

39:05.040 --> 39:06.720
用属性的时候要注意一下

39:06.720 --> 39:07.520
就注意的

39:07.520 --> 39:08.640
就一个点啊

39:08.640 --> 39:09.200
这个点呢

39:09.200 --> 39:09.680
就是大家

39:10.320 --> 39:11.840
应该是到学校

39:11.840 --> 39:12.640
学校现在的话

39:12.640 --> 39:14.400
应该是不会造成什么问题的

39:14.400 --> 39:15.200
就是说

39:15.200 --> 39:16.720
组件的属性呢

39:17.760 --> 39:18.720
应该使用

39:19.440 --> 39:21.680
小陀封命名法

39:21.680 --> 39:24.160
跟咱们以前学习那个多姆里边

39:24.160 --> 39:25.520
最基础部分

39:25.520 --> 39:27.440
学习多姆里边的那个属性

39:27.440 --> 39:29.360
是不是都使用的是小陀封命名法

39:29.360 --> 39:29.840
对吧

39:29.840 --> 39:31.200
这里也是一样

39:31.200 --> 39:32.560
使用小陀封命名法

39:32.560 --> 39:33.280
就命名的时候

39:33.280 --> 39:34.960
大家稍微注意一下

39:34.960 --> 39:35.920
其他也没啥了

39:36.960 --> 39:37.040
好

39:37.040 --> 39:37.760
这就是

39:37.760 --> 39:39.040
组件里边的属性

39:39.680 --> 39:40.080
属性

39:42.160 --> 39:42.400
好

39:42.400 --> 39:44.160
这是关于属性

39:44.160 --> 39:44.880
如何来

39:45.680 --> 39:46.480
使用

39:46.480 --> 39:48.320
如何来进行传递

39:49.040 --> 39:50.160
又如何来进行传递

39:51.040 --> 39:53.600
那么这里有一个点

39:54.160 --> 39:54.880
什么点呢

39:54.880 --> 39:55.680
就是说

39:55.680 --> 39:56.880
这个属性

39:56.880 --> 39:58.480
因为我们现在还没有讲事件

39:58.480 --> 40:00.400
所以说大家可能遇不到这种情况

40:00.400 --> 40:02.080
但是我们这里先提到这

40:02.080 --> 40:03.280
先提到这

40:03.280 --> 40:04.400
就是说属性

40:05.280 --> 40:06.960
组件中的属性

40:06.960 --> 40:07.600
组件

40:08.240 --> 40:10.080
无法改变

40:10.080 --> 40:11.200
自身的属性

40:12.240 --> 40:13.440
自身的属性

40:13.440 --> 40:14.960
它无法改变自身的属性

40:15.600 --> 40:16.480
什么意思呢

40:16.480 --> 40:17.280
这里

40:17.280 --> 40:18.240
啥意思呢

40:18.240 --> 40:18.720
就是说

40:19.440 --> 40:20.320
这打个重点

40:20.320 --> 40:21.760
这句话还蛮重要的

40:23.200 --> 40:23.680
什么意思

40:23.680 --> 40:24.640
就是说比方说

40:24.640 --> 40:25.840
这个函数里边

40:25.840 --> 40:27.120
它不是传了一个Number现在吗

40:27.120 --> 40:28.320
咱们来看一下

40:28.320 --> 40:30.000
我能不能把个Number改了

40:31.680 --> 40:32.240
改成10

40:33.440 --> 40:34.000
保存

40:34.000 --> 40:34.400
看一下

40:36.920 --> 40:37.160
好

40:37.160 --> 40:37.640
它说什么

40:38.360 --> 40:39.640
它说无法

40:41.000 --> 40:41.560
复制

40:41.560 --> 40:43.560
给一个止毒的属性复制

40:43.560 --> 40:44.520
是不是似曾相识

40:45.320 --> 40:46.360
是不是似曾相识

40:47.240 --> 40:48.680
是不是我们之前说的那个

40:48.760 --> 40:51.400
跟react元素是一样的道理

40:51.400 --> 40:52.040
对不对

40:52.040 --> 40:53.160
是不是一样的道理

40:53.160 --> 40:54.600
那咱们来看一下

40:54.600 --> 40:56.600
我们确定它是不是一样的道理

40:57.800 --> 40:58.840
这是我们的组件

41:01.000 --> 41:02.200
这是我们再来一个

41:03.000 --> 41:03.480
再来一个

41:04.520 --> 41:06.360
这是我们以前写的一个

41:06.360 --> 41:07.800
普通的react元素

41:10.320 --> 41:11.520
普通的react元素

41:11.520 --> 41:12.320
这里写个Title嘛

41:13.600 --> 41:14.240
写个Title

41:15.520 --> 41:16.080
好

41:16.080 --> 41:16.480
然后呢

41:16.480 --> 41:17.760
我们这里输出这个DIV

41:18.720 --> 41:19.360
这个DIV

41:20.000 --> 41:20.880
都不要它的

41:20.880 --> 41:21.840
都不要它的内容

41:21.920 --> 41:22.640
内容都不要了

41:23.520 --> 41:24.400
咱们来看一下

41:24.960 --> 41:25.440
看一下

41:26.240 --> 41:26.960
这两个东西

41:27.760 --> 41:28.240
保存

41:29.040 --> 41:29.840
看一下控制台

41:30.800 --> 41:33.040
第一个是我们自己写的组件

41:33.040 --> 41:34.320
你看一下又啥不同呢

41:35.360 --> 41:36.720
它无非就是Type不同

41:36.720 --> 41:36.960
对吧

41:36.960 --> 41:37.920
Type是一个函数

41:38.720 --> 41:39.760
然后Propos呢

41:39.760 --> 41:40.880
然后这里没传Propos

41:41.440 --> 41:42.720
传一个Propos嘛

41:42.720 --> 41:43.040
Number

41:43.760 --> 41:44.240
等于

41:46.880 --> 41:47.120
3

41:48.240 --> 41:49.280
传一个Propos进去

41:50.240 --> 41:50.400
好

41:50.400 --> 41:50.880
你看一下

41:51.600 --> 41:53.600
那么这里Propos是不是一个Number3

41:53.600 --> 41:54.160
对吧

41:54.160 --> 41:54.800
Number3

41:55.680 --> 41:55.920
好

41:55.920 --> 41:56.800
然后再看这边

41:56.800 --> 41:57.440
再看这边

41:58.000 --> 41:58.880
它的Propos呢

41:58.880 --> 41:59.760
是不是一个Title

42:01.200 --> 42:02.560
是不是有啥区别呢

42:02.560 --> 42:02.960
告诉我

42:02.960 --> 42:03.520
这两个东西

42:03.520 --> 42:04.640
看上去有啥区别呢

42:05.040 --> 42:07.120
这个Propos是对象Number3

42:07.120 --> 42:08.720
那么这边这个react元素

42:08.720 --> 42:09.680
Title等于这个

42:10.720 --> 42:11.680
所以说啥呢

42:12.640 --> 42:13.360
所以说

42:13.760 --> 42:14.400
我们那个

42:14.880 --> 42:15.200
就是

42:17.840 --> 42:19.040
之前学习的

42:19.520 --> 42:20.560
之前学习的

42:20.960 --> 42:22.480
react元素

42:23.440 --> 42:23.920
元素

42:24.560 --> 42:25.440
本质上

42:26.560 --> 42:28.000
就是一个组件

42:29.040 --> 42:29.840
这个组件呢

42:29.840 --> 42:30.560
不过是

42:30.560 --> 42:32.640
别人react赢给你写好的

42:32.640 --> 42:34.000
叫做内置组件

42:34.640 --> 42:36.480
你使用的就是那个内置组件

42:36.800 --> 42:38.800
当你手字母小写的时候呢

42:38.800 --> 42:40.160
还用的就是那种内置组件

42:40.720 --> 42:41.520
原来这个意思嘛

42:41.520 --> 42:42.880
所以说本质上就是组件

42:42.880 --> 42:44.160
你看这个结构有啥区别呢

42:44.560 --> 42:45.360
没有啥区别

42:45.760 --> 42:46.080
对吧

42:46.640 --> 42:48.320
那我们之前说这个react元素

42:48.320 --> 42:49.040
它是不可变的

42:49.040 --> 42:50.320
那组件也是不可变的

42:50.480 --> 42:51.920
你这一想改它的属性没门

42:51.920 --> 42:52.720
没门

42:52.720 --> 42:54.000
不允许改它的属性

42:54.320 --> 42:55.200
不允许你改

42:56.080 --> 42:58.880
包括内里边也不要想去改它的属性

42:59.600 --> 43:00.560
那么这里呢

43:01.440 --> 43:02.080
它还是

43:02.080 --> 43:04.320
它还考虑到一个原则就是什么呢

43:04.320 --> 43:05.840
就是数据的流动

43:06.240 --> 43:08.080
因为这个属性的数据哪来的

43:08.560 --> 43:09.440
是它自己的吗

43:09.440 --> 43:10.240
是不是它自己的

43:12.080 --> 43:14.000
这个属性的数据是不是它自己的

43:14.000 --> 43:14.800
它不是哦

43:15.920 --> 43:17.120
它这个数据是哪来的

43:17.120 --> 43:18.480
是别人给它的

43:18.880 --> 43:20.880
所以说这个数据的所有权是谁

43:20.880 --> 43:22.160
是别人对吧

43:22.560 --> 43:24.080
是别人给它的数据

43:25.120 --> 43:28.480
在react中遵循这么一种哲学

43:30.080 --> 43:32.080
react中的哲学

43:32.720 --> 43:33.600
它是什么

43:33.600 --> 43:35.520
数据属于谁

43:36.720 --> 43:39.520
谁才有权利改动

43:41.760 --> 43:43.600
你看一下这个数据是谁的

43:44.480 --> 43:46.480
是不是这里这个文件里边的对吧

43:47.840 --> 43:49.680
那么只有它才有权利改动

43:50.160 --> 43:51.120
比方这里用个变量

43:51.120 --> 43:53.040
那么这个变量只有它才有权利改动

43:53.680 --> 43:55.680
那么这里边的数据是来自于谁

43:55.680 --> 43:57.280
来自于别人的数据

43:57.280 --> 43:59.200
你没有权利改动别人的数据

43:59.840 --> 44:00.320
为什么

44:00.880 --> 44:02.560
它为什么会有这样的一种思想

44:04.000 --> 44:05.040
因为它认为啊

44:05.040 --> 44:05.840
它是这样的想的

44:06.400 --> 44:07.760
我做这个组建呢

44:07.760 --> 44:09.600
我根本就不知道这个数据哪来的

44:10.400 --> 44:11.680
也不知道这个数据呢

44:11.680 --> 44:13.040
有没有可能用在别人

44:13.040 --> 44:13.600
别的地方

44:14.320 --> 44:15.040
比方说吧

44:15.040 --> 44:15.840
比方说这里

44:15.840 --> 44:17.280
比方说这里来这个变量

44:17.280 --> 44:19.200
就比方说这个ob界来是一个变量

44:19.920 --> 44:20.640
这里是个变量

44:20.640 --> 44:21.120
假设

44:21.680 --> 44:22.480
那么这个变量呢

44:22.480 --> 44:24.080
有没有可能用到别的地方了

44:24.080 --> 44:24.560
有可能

44:25.280 --> 44:28.880
那你这个组建莫名其妙的把这个数据改了

44:28.880 --> 44:30.320
一改的话是不是要出问题

44:31.040 --> 44:32.160
是不是要出问题

44:32.160 --> 44:32.800
那一改的话

44:32.800 --> 44:35.280
那么后边的东西是不是要全部要出问题

44:35.280 --> 44:35.840
对不对

44:35.840 --> 44:36.560
全部要跟着改

44:37.840 --> 44:38.400
它会出

44:38.400 --> 44:39.360
它会出问题的

44:39.920 --> 44:40.480
没有这个意思吧

44:41.760 --> 44:42.560
所以说呢

44:42.560 --> 44:44.480
它为了避免混乱

44:45.040 --> 44:46.640
避免复杂度的增加

44:47.120 --> 44:47.680
它认为

44:48.240 --> 44:50.000
谁的数据属于谁

44:50.000 --> 44:51.120
你才有权利更改

44:51.120 --> 44:52.800
别人没有权利更改

44:52.800 --> 44:54.880
这也比较符合逻辑

44:54.880 --> 44:56.320
你这个组建

44:56.320 --> 44:58.320
你这个属性是干嘛的呢

44:59.040 --> 45:00.880
属性就是告诉我该怎么显示

45:01.520 --> 45:02.880
就起这个作用

45:02.880 --> 45:03.680
你告诉我

45:03.680 --> 45:05.120
那我就按照你给的属性

45:05.120 --> 45:06.640
我来确定我的显示方案

45:07.120 --> 45:08.000
就行了

45:08.000 --> 45:09.600
我管你这个数据哪来的

45:09.600 --> 45:10.560
你给我我就

45:10.560 --> 45:11.520
我就正常的显示

45:12.160 --> 45:13.120
我就把这个数据呢

45:13.120 --> 45:14.320
渲成UI

45:14.320 --> 45:16.240
这就是Rx最初的想法

45:16.320 --> 45:17.280
你给我一个东西

45:17.280 --> 45:18.000
给我一个数据

45:18.000 --> 45:19.280
我把根据这个数据呢

45:19.280 --> 45:20.320
我选择一个东西出来

45:21.280 --> 45:22.480
你这个数据变了过后呢

45:22.480 --> 45:23.920
我又选择另外一个东西

45:23.920 --> 45:25.360
我不会改变你的数据了

45:26.160 --> 45:27.920
它是基于这么一种理念

45:27.920 --> 45:30.160
所以说在Rx里边属性

45:30.160 --> 45:30.880
你别想改

45:31.280 --> 45:32.000
你别想改

45:32.320 --> 45:33.040
那有些人说

45:33.040 --> 45:34.960
那我尝试着一定要来弄一次

45:34.960 --> 45:36.000
非常地弄一次不可

45:36.000 --> 45:36.480
好

45:36.480 --> 45:37.760
那就比方说吧

45:38.800 --> 45:39.920
比方说你在这呢

45:41.680 --> 45:42.800
写上这么一个东西

45:42.800 --> 45:44.240
因为它传了对象进来吧

45:44.320 --> 45:47.120
你不是说Propos里边的东西不能改吗

45:47.120 --> 45:50.080
那我改一下Propos对象里边的东西呢

45:50.080 --> 45:50.880
能不能改呢

45:51.680 --> 45:52.240
看一下

45:53.280 --> 45:54.000
能不能改呢

45:55.360 --> 45:55.920
保存

45:55.920 --> 45:56.560
保存

45:57.280 --> 45:58.400
你会发现它可以改

45:59.920 --> 46:00.400
可以改

46:01.440 --> 46:03.520
但是这样做好不好啊

46:03.520 --> 46:05.840
千万千万不要这样做

46:05.840 --> 46:07.280
这样做我看到这个代码

46:07.280 --> 46:08.320
我浑身发抖

46:08.320 --> 46:09.680
浑身出的很烦了

46:09.680 --> 46:11.120
真的毛骨悚然

46:11.840 --> 46:13.840
你这样做你知道多危险吗

46:14.560 --> 46:16.560
这个数据它不是属于你的

46:17.440 --> 46:18.480
你去把它改了

46:19.120 --> 46:21.440
Rx它没有那么智能

46:21.440 --> 46:23.200
它没有那么多的侵入性

46:23.200 --> 46:23.600
所以说呢

46:23.600 --> 46:26.000
它没有监控到这么深层次的变化

46:26.800 --> 46:29.520
它只监控什么Propos里边的属性

46:29.520 --> 46:30.320
你不能直接修改

46:30.880 --> 46:31.440
但是呢

46:31.440 --> 46:33.760
如果你改了它里边对象里边的属性

46:33.760 --> 46:34.480
它监控不到

46:35.360 --> 46:36.560
它监控不到的时候

46:37.360 --> 46:38.640
会引起引换

46:38.640 --> 46:40.800
千万千万不要去这样改啊

46:41.360 --> 46:42.960
因为这就意味着啥

46:43.120 --> 46:45.520
意味着你这个系统一旦出了问题

46:45.520 --> 46:46.560
你根本就不知道

46:47.520 --> 46:48.560
根本就不知道问题在干了

46:49.040 --> 46:50.880
比方说咱们系统写复杂了

46:51.440 --> 46:52.880
咱们系统里边有一千个组件

46:53.520 --> 46:54.560
突然有一天你发现了

46:54.560 --> 46:56.240
某一个组件的数据突然不对了

46:57.520 --> 46:59.040
然后你头脑里面想到的是

46:59.760 --> 47:02.560
有可能有500个组件改了这个数据

47:02.560 --> 47:04.320
但是你又不知道是谁改了这个数据

47:04.960 --> 47:06.080
那是不是要出大麻烦

47:07.120 --> 47:08.400
但是你想一想

47:08.400 --> 47:10.000
如果你我不这样子干

47:10.000 --> 47:12.160
不要去随便改动属性里边的任何东西

47:12.640 --> 47:14.800
那么将来我们数据出了问题

47:14.800 --> 47:16.480
我只需要去找这个数据谁的

47:17.520 --> 47:18.480
谁的数据谁负责

47:19.280 --> 47:20.640
所以一下就可以定位到方

47:20.640 --> 47:22.240
定位到一个数据出问题的地方

47:22.800 --> 47:23.280
对不对

47:23.280 --> 47:25.280
所以大家千万不要这样干啊

47:25.280 --> 47:26.800
尽管reaction没有监控到

47:26.800 --> 47:28.080
但是你不要这样去干

47:29.120 --> 47:29.920
总之呢

47:29.920 --> 47:31.920
属性里边的数据呢

47:31.920 --> 47:33.200
是不能改的

47:33.200 --> 47:34.960
是千万千万不能改的

47:34.960 --> 47:36.960
尽管有些情况下reaction没有监控到

47:38.560 --> 47:40.080
一定要遵从这样的哲学啊

47:40.160 --> 47:41.760
属性属于谁

47:41.760 --> 47:43.600
谁才有权力改动

47:43.600 --> 47:44.240
于是呢

47:44.240 --> 47:46.000
它就会形成这么一种结构

47:46.000 --> 47:49.120
就是reaction就是这么一个理念

47:49.120 --> 47:50.880
叫做reaction中的数据啊

47:51.920 --> 47:54.000
是字顶

47:54.880 --> 47:59.120
字顶而下流动

47:59.840 --> 48:01.600
它是字顶而下流动的

48:02.240 --> 48:03.120
什么意思呢

48:03.120 --> 48:04.560
大家看一下这个结构

48:05.120 --> 48:06.320
咱们reaction里面的结构

48:07.120 --> 48:08.240
形成这么一个结构对吧

48:09.200 --> 48:10.000
副组件是谁

48:10.000 --> 48:10.720
我们之前说过

48:10.720 --> 48:12.480
这些元素本质上也是组件

48:13.440 --> 48:14.800
给你写的内置组件而已

48:15.360 --> 48:17.200
最顶层的组件是不是这个div

48:17.200 --> 48:17.600
对吧

48:18.560 --> 48:20.720
这个div里面是不是有一大堆组件

48:20.720 --> 48:21.200
对不对

48:21.200 --> 48:23.280
这个组件里面是不是有这个组件

48:23.280 --> 48:23.680
对不对

48:24.560 --> 48:25.440
我们就这样子

48:26.160 --> 48:26.800
你看着啊

48:28.000 --> 48:29.600
顶层的组件的数据

48:29.600 --> 48:30.800
是不是这个二五

48:30.800 --> 48:31.760
这些字面量对吧

48:31.760 --> 48:33.040
是属于它的数据

48:33.040 --> 48:34.720
它在这个顶层组件里面建立的

48:34.720 --> 48:35.280
你看一下吧

48:36.240 --> 48:38.720
你可以把这一块认为是个组件吧

48:38.720 --> 48:39.280
对吧

48:39.280 --> 48:40.400
当然它不是个组件

48:40.400 --> 48:41.200
它是个元素

48:41.200 --> 48:41.600
对不对

48:41.600 --> 48:42.560
原来是元素

48:42.560 --> 48:44.000
你可以认为它就是个组件

48:45.200 --> 48:47.920
然后它的数据传递给了谁

48:47.920 --> 48:49.280
传递给了它的直组件

48:49.840 --> 48:50.400
看没有

48:50.400 --> 48:51.600
直组件的数据

48:51.600 --> 48:52.480
而直组件的数据

48:52.480 --> 48:53.440
它能不能改这个数据

48:53.440 --> 48:54.240
它不能改

48:54.240 --> 48:56.320
所以说数据是单向流动的

48:56.320 --> 48:58.640
从副组件传递到直组件

48:58.640 --> 49:00.000
然后再从直组件的

49:00.000 --> 49:01.520
如果它里边还有组件的话

49:01.520 --> 49:02.320
又往里边传

49:02.320 --> 49:02.720
对吧

49:02.720 --> 49:04.400
你看把这个数据传给了什么

49:04.560 --> 49:05.600
传给它里边的组件

49:05.600 --> 49:07.680
而且一组件传给了它的内容

49:07.680 --> 49:08.080
对不对

49:09.040 --> 49:12.000
一次字顶而下的进行传递

49:12.000 --> 49:13.040
它不能反向流动

49:14.160 --> 49:15.840
永远是单向的流动

49:15.840 --> 49:18.240
这就是Rex里面一个显著的特点

49:18.240 --> 49:21.360
也是我们之前讲Rex该数的时候讲过

49:21.360 --> 49:23.280
Rex是单向数据流

49:23.280 --> 49:24.960
它的数据流是单向的

49:24.960 --> 49:26.400
从一个方向流动

49:26.400 --> 49:29.200
单向数据流会把整个应用程序

49:29.200 --> 49:31.520
它的结构变得非常清晰

49:31.520 --> 49:34.320
特别是数据结构变得非常清晰

49:34.400 --> 49:36.160
而且非常容易调试错误

49:36.160 --> 49:37.680
并且非常容易测试

49:38.480 --> 49:40.080
因为我写一个组件的时候

49:40.080 --> 49:42.240
我不用考虑谁在雕用我这个组件

49:42.240 --> 49:43.600
完全不用考虑

49:43.600 --> 49:45.440
我只考虑你给我哪些属性

49:45.440 --> 49:46.640
给我哪些属性我就显示

49:46.640 --> 49:47.360
做什么显示

49:48.640 --> 49:49.360
明白的意思吧

49:50.160 --> 49:50.400
OK

49:50.960 --> 49:51.760
那么另外一点

49:51.760 --> 49:53.360
就是组件里面能不能套组件

49:54.160 --> 49:54.800
你说了

49:54.800 --> 49:55.280
你说了

49:55.840 --> 49:56.880
这不就在套组件吗

49:56.880 --> 49:58.160
这个玩意是不是组件

49:58.160 --> 49:58.880
当然是组件

49:59.440 --> 50:01.280
所以说组件里面是可以套组件的

50:01.280 --> 50:03.280
比方说这里再去使用另外一个组件

50:03.280 --> 50:04.880
是完全没有问题的

50:05.440 --> 50:06.400
完全没问题的

50:06.400 --> 50:08.240
下节课我们做一个小的demo

50:08.240 --> 50:09.520
那咱们来说一下

50:09.520 --> 50:11.280
说一下这一块的东西

50:12.880 --> 50:13.600
好了

50:13.600 --> 50:16.720
那这里咱们就讲到了这个组件里面的

50:16.720 --> 50:18.160
方方面面的东西

50:18.160 --> 50:18.960
我想一想

50:18.960 --> 50:20.720
还有没有什么没有讲到的

50:21.920 --> 50:22.800
应该就没啥了

50:23.280 --> 50:25.760
就是我们目前这节课只讲了组件

50:25.760 --> 50:26.640
怎么去创建

50:27.440 --> 50:29.440
组件如何来使用它的属性

50:29.440 --> 50:31.760
如何来传递属性

50:31.760 --> 50:32.960
就讲了这么一些东西

50:33.440 --> 50:35.840
那么下节课我们做个demo

50:35.840 --> 50:37.200
有些东西可能会去会问

50:37.200 --> 50:37.600
就是说

50:38.720 --> 50:39.760
组件有两种方式

50:39.760 --> 50:41.120
一种是函数组件

50:41.120 --> 50:42.240
一种是内组件

50:42.240 --> 50:43.120
那么平时

50:43.120 --> 50:44.720
我们用哪一种用的比较多

50:45.840 --> 50:47.040
实际上是这样子

50:47.040 --> 50:48.160
在过去的话

50:49.040 --> 50:51.440
用内组件可能要稍微多一点

50:51.440 --> 50:52.240
因为内组件

50:52.240 --> 50:53.760
它有一些函数组件

50:53.760 --> 50:55.200
它没有的功能

50:55.760 --> 50:57.120
咱们后面会说

50:57.120 --> 50:59.680
但是现在又不太一样了

50:59.680 --> 51:01.760
因为现在函数组件

51:01.840 --> 51:04.080
可以达到跟内组件一样的功能了

51:04.080 --> 51:05.760
因为它加了一个新的东西

51:05.760 --> 51:07.440
就是新版本里面加了一个新的东西

51:08.080 --> 51:09.600
但是我们学的时候

51:09.600 --> 51:10.800
两种组件都在学

51:11.520 --> 51:12.320
说实话

51:12.320 --> 51:13.680
将来其实React

51:13.680 --> 51:15.440
它鼓励你使用函数组件

51:16.240 --> 51:17.760
鼓励你去使用函数组件

51:18.480 --> 51:20.640
咱们后面我们学到更多的知识过程了

51:20.640 --> 51:21.840
现在看上去没有啥区别

51:21.840 --> 51:22.400
对吧

51:22.400 --> 51:23.920
后面我们学到更多的知识过程了

51:23.920 --> 51:25.040
你会组件聊得到

51:25.040 --> 51:25.840
这两种组件

51:25.840 --> 51:27.600
他们还是有一些区别的

51:28.560 --> 51:29.040
好吧

51:29.040 --> 51:30.320
这是这节课的知识

51:30.320 --> 51:31.600
下节课我们来做一个demo

51:31.600 --> 51:32.800
做一个练习

