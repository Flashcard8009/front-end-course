WEBVTT

00:00.880 --> 00:05.420
前面我们学了污秘监视里边的路由

00:05.420 --> 00:07.380
对吧 这是它最强大的功能

00:07.380 --> 00:10.920
污秘监视里边它说它有几个特点

00:10.920 --> 00:13.620
一是开箱即用 直接建个功能直接可以用了

00:13.620 --> 00:15.720
只要你全局安装了污秘

00:15.720 --> 00:19.120
另外一个特点就是说它是基于约定的

00:19.120 --> 00:23.280
我们这一块在路由那一块也可以看得非常明白

00:23.280 --> 00:25.960
就是我们约定好了有哪些文念甲

00:25.960 --> 00:28.080
每个文念甲什么意思 这些文念甲

00:28.680 --> 00:31.880
约定好了之后我们只要在这里边写大一把就完事了

00:31.880 --> 00:34.080
就是变得非常非常简单

00:34.080 --> 00:37.080
然后还有一个是基于插件的

00:37.080 --> 00:39.880
咱们这一节课要学习的是

00:39.880 --> 00:43.380
迪瓦模型如何把迪瓦整合到污秘里边去

00:43.380 --> 00:49.080
那么其实迪瓦它就是作为污秘的一个插件存在的

00:49.080 --> 00:52.680
污秘它本身并没有去集成迪瓦

00:52.680 --> 00:56.880
只不过绝大部分时候几乎是所有时候

00:56.880 --> 01:00.880
我们在污秘里边都会使用迪瓦来管理Ridax数据

01:00.880 --> 01:02.880
当然你不用迪瓦可不可以也可以

01:02.880 --> 01:05.180
你直接用原生的Ridax也可以

01:05.180 --> 01:09.280
不过我们之前学过迪瓦也知道迪瓦管理数据非常非常的便捷

01:09.280 --> 01:13.380
所以说我们希望把迪瓦整合到污秘里边去

01:13.380 --> 01:14.280
那怎么办呢

01:14.280 --> 01:19.580
我们没有必要去直接安装迪瓦

01:19.580 --> 01:22.380
因为迪瓦的话它要管理应用程序的启动

01:22.380 --> 01:25.680
但是污秘已经帮你管理了 你怎么办呢

01:25.680 --> 01:29.280
所以说它应该是用一个插件的形式来存在的

01:29.280 --> 01:30.880
还记得吗我们以前学迪瓦的时候

01:30.880 --> 01:33.680
迪瓦不是有一个有这么一个东西

01:33.680 --> 01:38.580
还记得吧 迪瓦start 启动一个迪瓦应用程序

01:38.580 --> 01:39.880
但是现在能启动吗

01:39.880 --> 01:41.380
你发现根本就启动不了

01:41.380 --> 01:44.480
因为污秘已经帮你拖管了这个过程了

01:44.480 --> 01:47.980
你看迪瓦Ridax都没有都没安装 你怎么启动呢

01:47.980 --> 01:50.480
所以说迪瓦它需要用插件来完成

01:50.480 --> 01:53.280
那么我们怎么去安装一个迪瓦插件呢

01:53.280 --> 01:57.480
是这样子 污秘官方给你提供了一个插件级

01:57.480 --> 02:00.080
叫做污秘PlanningRidax

02:00.080 --> 02:03.080
这个插件级是针对Ridax的应用程序的

02:03.080 --> 02:05.280
因为污秘它的野心很大

02:05.280 --> 02:07.080
它不管光是要针对Ridax

02:07.080 --> 02:10.480
可能将来还要针对5U来出这么一套框架

02:10.480 --> 02:14.380
所以说目前它的命名方式是这样子

02:14.380 --> 02:17.880
污秘Planning是一个潜质 表示的是污秘插件

02:17.880 --> 02:19.680
后边跟上你的技术

02:19.680 --> 02:21.980
这个技术目前支持的是Ridax

02:21.980 --> 02:24.580
所以说这是污秘Ridax的无密插件

02:24.580 --> 02:27.980
它里边集成了很多常用的一些插件

02:27.980 --> 02:31.380
只不过我们目前用到的就一个迪瓦

02:31.380 --> 02:33.980
其他的要看一下

02:33.980 --> 02:36.780
它的吻档的插件的吻档在这

02:36.780 --> 02:39.580
我们后边还会详细讲插件

02:39.580 --> 02:41.980
这个插件的吻档在这 看到没

02:41.980 --> 02:45.380
这个插件你需要安装一下

02:45.380 --> 02:48.780
我们就直接安装吧 先安装起来

02:48.780 --> 02:50.980
停止

02:51.180 --> 02:52.980
128D

02:52.980 --> 02:54.980
无密Planning

02:54.980 --> 02:56.380
react

02:56.380 --> 02:57.980
安装起来

02:57.980 --> 02:59.980
安装吧 我们不得 不管它了

02:59.980 --> 03:02.780
安装这个插件 安装好了过后

03:02.780 --> 03:04.780
它里边说了这个插件

03:04.780 --> 03:07.780
它里边有很多很多的地方可以配置

03:07.780 --> 03:10.980
你看迪瓦只是其中的一项配置而已

03:10.980 --> 03:13.380
还有一些别的配置

03:13.380 --> 03:16.780
我们可以先不着急说迪瓦

03:16.780 --> 03:17.980
我们先可以说一下

03:17.980 --> 03:21.380
也其他的我们可能会用到的配置

03:21.380 --> 03:23.780
我们这里说一下吧 说一下

03:23.780 --> 03:24.980
好 等它安装完成

03:24.980 --> 03:27.580
安装完成这个插件怎么使用呢

03:27.580 --> 03:30.180
使用无密插件的话非常简单

03:30.180 --> 03:32.580
你只需要在配置文件里边写就行了

03:32.580 --> 03:34.380
配置文件在哪 是不是就在这个

03:34.380 --> 03:35.580
就这个 咱们把它

03:35.580 --> 03:37.980
我们之前做过路由配置的 对吧

03:37.980 --> 03:41.780
我们把它还原成无密RC.js

03:41.780 --> 03:43.580
路由配置我们就不配置了

03:43.580 --> 03:44.380
因为路由的话

03:44.380 --> 03:46.780
我们通常就使用它的约定路由就完了

03:46.780 --> 03:48.580
我们配置一些别的东西

03:48.580 --> 03:50.580
其中有一个东西

03:52.180 --> 03:55.980
我老是出这个问题我也不知道是什么意思

03:55.980 --> 03:57.580
他老是会出这个问题

03:57.580 --> 03:58.980
莫名其妙的错误

03:58.980 --> 04:01.780
那么这里还有一些别的可以配置

04:01.780 --> 04:03.780
我们路由是配置Road 对吧

04:03.780 --> 04:04.580
是配置这个

04:04.580 --> 04:06.380
那么如果你不配置这个的话

04:06.380 --> 04:07.780
那么跟路由就没关系了

04:07.780 --> 04:09.180
我们就配置别的

04:09.180 --> 04:11.380
其中一个配置叫做plugins

04:11.380 --> 04:12.980
叫做插件

04:12.980 --> 04:14.780
我这个无密里边要使用哪些插件

04:14.780 --> 04:16.580
当然你得前提条件

04:16.580 --> 04:19.180
你得去安装这个插件才行

04:19.180 --> 04:20.580
然后了这里插件

04:20.580 --> 04:22.180
我们这里使用中货号

04:22.180 --> 04:23.980
来表示我们使用哪些插件

04:23.980 --> 04:26.780
这里的配置方式跟webpack很像

04:26.780 --> 04:27.880
然后插件的名称

04:27.880 --> 04:29.280
我们直接写上就完事了

04:29.280 --> 04:30.380
插件的名称

04:30.380 --> 04:31.980
插件的名称我们刚才安装好了

04:31.980 --> 04:32.180
对吧

04:32.180 --> 04:35.980
就是要做无密pluginreact

04:35.980 --> 04:36.280
对吧

04:36.280 --> 04:37.280
就是插件的名称

04:37.280 --> 04:39.080
如果说你还有用别的插件的话

04:39.080 --> 04:40.180
你一次写就行了

04:40.180 --> 04:41.580
无密plugin

04:41.580 --> 04:43.180
比方说你啥插件

04:43.180 --> 04:44.080
你直接写就行了

04:44.080 --> 04:46.180
就这么简单

04:46.280 --> 04:48.780
但是有可能说每一个插件

04:48.780 --> 04:50.180
它还有一些配置

04:50.180 --> 04:51.280
比方说像这个插件

04:51.280 --> 04:53.280
它里面就要传很多的配置

04:53.280 --> 04:53.880
对吧

04:53.880 --> 04:55.580
那么这个配置又该怎么写呢

04:55.580 --> 04:56.480
它是这样子

04:56.480 --> 04:58.780
跟webpack是一样的

04:58.780 --> 05:01.080
你这个插件如果说你还有配置的话

05:01.080 --> 05:03.380
那么你把它放到一个中货号里边

05:03.380 --> 05:04.980
就把它放到一个数组里边

05:04.980 --> 05:10.280
数组的第一项表示的是插件的名称

05:10.280 --> 05:12.780
数组的第二项

05:12.880 --> 05:17.380
表示的是插件的配置

05:17.380 --> 05:18.880
这里就写配置

05:18.880 --> 05:19.780
就这么简单

05:19.780 --> 05:20.780
配置是一个堆箱

05:20.780 --> 05:21.980
这里边有各种配置箱

05:21.980 --> 05:24.680
这就是安装好了一个

05:24.680 --> 05:26.880
就是应用一个无密插件

05:26.880 --> 05:29.480
那么这个插件里边有哪些配置呢

05:29.480 --> 05:30.380
我们来看一下这个

05:30.380 --> 05:31.880
看有意思的

05:31.880 --> 05:33.880
有这么一个配置叫title

05:33.880 --> 05:35.480
title配置

05:35.480 --> 05:36.880
它说什么意思呢

05:36.880 --> 05:39.480
它说这个title

05:40.480 --> 05:43.480
如果说你安装了这个就是

05:43.480 --> 05:45.480
无密插件之后

05:45.480 --> 05:47.480
如果说你安装了无密插件之后呢

05:47.480 --> 05:51.480
那么你可以在路由里边去写title了

05:51.480 --> 05:53.480
它会自动帮你进行处理

05:53.480 --> 05:54.480
会自动帮你进行处理

05:54.480 --> 05:56.480
这个title可以是一个制服串

05:56.480 --> 05:58.480
也可以是一个objects

05:58.480 --> 05:59.480
但是它注意

05:59.480 --> 06:00.480
它这个配置的像

06:00.480 --> 06:01.480
它说什么呢

06:01.480 --> 06:02.480
它配置在哪呢

06:02.480 --> 06:03.480
它配置的是

06:03.480 --> 06:05.480
title插件开启后

06:05.480 --> 06:07.480
你可以在roads配置中

06:07.480 --> 06:09.480
或者是配置下的

06:09.480 --> 06:10.480
一面中配置这个title

06:10.480 --> 06:11.480
我们来看一下

06:11.480 --> 06:13.480
我们这里呢

06:13.480 --> 06:15.480
比方说把这个title插件开启

06:15.480 --> 06:16.480
怎么开启呢

06:16.480 --> 06:17.480
title把设为去

06:17.480 --> 06:19.480
就表示把title插件开启了

06:19.480 --> 06:22.480
开启title插件

06:22.480 --> 06:24.480
开启它的title插件之后呢

06:24.480 --> 06:26.480
我们这个东西就不用写了

06:26.480 --> 06:27.480
就是handletitle这个东西

06:27.480 --> 06:28.480
我们不用写了

06:28.480 --> 06:29.480
要上上就行了

06:29.480 --> 06:30.480
不用写了

06:30.480 --> 06:31.480
对吧

06:31.480 --> 06:33.480
我们没有必要自己处理了

06:33.480 --> 06:34.480
然后这个地方

06:34.480 --> 06:36.480
我们就不需要这个了

06:36.480 --> 06:37.480
你看

06:37.480 --> 06:38.480
title首页

06:38.480 --> 06:39.480
然后login

06:39.480 --> 06:40.480
这里也不需要这个

06:40.480 --> 06:41.480
welcome

06:41.480 --> 06:43.480
welcome里边也不需要这个了

06:43.480 --> 06:44.480
大家就需要这个

06:44.480 --> 06:45.480
欢迎一页

06:45.480 --> 06:46.480
好

06:46.480 --> 06:47.480
咱们再试一下

06:47.480 --> 06:48.480
我们把我们自己写的

06:48.480 --> 06:49.480
title处理去掉

06:49.480 --> 06:50.480
然后用这个插件来处理

06:50.480 --> 06:52.480
看它能不能帮我们处理

06:52.480 --> 06:53.480
好

06:53.480 --> 06:55.480
这里我们运行起来

06:55.480 --> 06:59.430
ya start

06:59.430 --> 07:05.240
稍等一下

07:05.240 --> 07:08.240
这里是discognited from the dev server

07:08.240 --> 07:09.240
开发服务器

07:09.240 --> 07:10.240
已经断开了

07:10.240 --> 07:11.240
稍等一下

07:11.240 --> 07:12.240
运行起动

07:12.240 --> 07:14.680
重新变异起动

07:14.680 --> 07:16.680
第一次到稍微慢一点

07:16.680 --> 07:18.680
跟crisis rights app是一样的

07:21.680 --> 07:22.680
好

07:22.680 --> 07:23.680
你看着

07:23.680 --> 07:24.680
首页吧

07:24.680 --> 07:25.680
对吧

07:25.680 --> 07:26.680
登录页吧

07:26.680 --> 07:27.680
欢迎页吧

07:27.680 --> 07:29.680
现在不是我们写的吧

07:29.680 --> 07:30.680
我已经看得清楚了

07:30.680 --> 07:31.680
我已经把3了

07:31.680 --> 07:32.680
自己写的已经3了

07:32.680 --> 07:33.680
所以那样可以有效

07:33.680 --> 07:34.680
对吧

07:34.680 --> 07:35.680
就是因为我开起了

07:35.680 --> 07:36.680
title这个插件

07:36.680 --> 07:37.680
好

07:37.680 --> 07:39.680
咱们再来看一些插件吧

07:39.680 --> 07:40.680
先随便说两个

07:40.680 --> 07:42.680
因为我们是用这个裤的话

07:42.680 --> 07:44.680
用这个官方插件起

07:44.680 --> 07:46.680
这个插件的话

07:46.680 --> 07:47.680
主要是用D吧

07:47.680 --> 07:48.680
再看两个吧

07:48.680 --> 07:51.680
然后还看下这个script

07:51.680 --> 07:52.680
就是这个玩意

07:52.680 --> 07:53.680
这个玩意是什么呢

07:53.680 --> 07:55.680
就是说你可以写在插件里面

07:55.680 --> 07:56.680
配置这个东西

07:56.680 --> 07:57.680
开启这个插件

07:57.680 --> 07:58.680
开启了之后

07:58.680 --> 08:00.680
你可以把它配置为一个

08:00.680 --> 08:02.680
制服串的输主

08:02.680 --> 08:03.680
或者是对象的输主

08:03.680 --> 08:05.680
它用来做什么呢

08:05.680 --> 08:07.680
你看官方文上写的很简略

08:07.680 --> 08:08.680
还没跟你说怎么用

08:08.680 --> 08:10.680
我给他就告诉大家吧

08:10.680 --> 08:12.680
就是这个插件怎么用呢

08:12.680 --> 08:14.680
就是说你开启了过后

08:14.680 --> 08:16.680
它会把一些GS

08:16.680 --> 08:17.680
页外的GS

08:17.680 --> 08:19.680
引用到页面里边去

08:19.680 --> 08:21.680
因为我们生成的页面里边

08:21.680 --> 08:22.680
不是只有一个GS吗

08:22.680 --> 08:23.680
对吧

08:23.680 --> 08:24.680
是不是只有一个無米点GS

08:24.680 --> 08:25.680
对吧

08:25.680 --> 08:26.680
只有这么一个

08:26.680 --> 08:27.680
如果你说你还想引用

08:27.680 --> 08:29.680
一些其他的GS怎么办呢

08:29.680 --> 08:30.680
那么你可以通过这个插件

08:30.680 --> 08:31.680
来进行配置

08:31.680 --> 08:32.680
那么它会把这些

08:32.680 --> 08:33.680
页外的GS

08:33.680 --> 08:35.680
注入到页面里边去

08:35.680 --> 08:36.680
它其实也是利用

08:36.680 --> 08:38.680
webpack的功能来实现的

08:38.680 --> 08:41.680
这里我们写上这么一点

08:41.680 --> 08:43.680
它其实要做的话也很简单

08:43.680 --> 08:45.680
就是它其实这个script

08:45.680 --> 08:46.680
这个插件

08:46.680 --> 08:48.680
它就是往body里边

08:48.680 --> 08:50.680
这里不是引用了无米GS吗

08:50.680 --> 08:51.680
对吧

08:51.680 --> 08:52.680
它自己给你生成了个GS

08:52.680 --> 08:54.680
它会在这个GS之后

08:54.680 --> 08:56.680
再引用一些别的GS

08:56.680 --> 08:57.680
我们

08:57.680 --> 08:59.680
如果说你要引用GS的话

08:59.680 --> 09:00.680
肯定是个输主

09:00.680 --> 09:01.680
因为有可能有多个

09:01.680 --> 09:03.680
如果说你要引用别的GS的话

09:03.680 --> 09:04.680
那么你要写对象

09:04.680 --> 09:06.680
对象里边的src属性

09:06.680 --> 09:07.680
比较配置为别的GS

09:07.680 --> 09:09.680
就是随便配置一些

09:09.680 --> 09:10.680
A点GS

09:10.680 --> 09:11.680
当然这些都不存在

09:11.680 --> 09:13.680
你看一下效果就行了

09:13.680 --> 09:14.680
然后

09:14.680 --> 09:16.680
B点GS

09:18.680 --> 09:19.680
这里由于

09:19.680 --> 09:20.680
改了插件过后

09:20.680 --> 09:21.680
改了插件过后

09:21.680 --> 09:22.680
你再重新启动

09:22.680 --> 09:23.680
必须要重新启动

09:23.680 --> 09:25.680
要start

09:25.680 --> 09:26.680
因为插件

09:26.680 --> 09:28.680
是要一开始生成

09:28.680 --> 09:29.680
工程的时候

09:29.680 --> 09:30.680
要进行启动

09:30.680 --> 09:31.680
要进行初始化

09:31.680 --> 09:33.680
所以说你必须要重新启动

09:34.680 --> 09:35.680
稍微等一下

09:35.680 --> 09:39.530
好

09:39.530 --> 09:40.530
稍微等一下

09:40.530 --> 09:41.530
它第一次启动

09:41.530 --> 09:44.350
稍微慢一点

09:44.350 --> 09:46.790
好 出来了

09:46.790 --> 09:47.790
好 咱们看一下

09:47.790 --> 09:48.790
是不是引用进去了

09:48.790 --> 09:49.790
对吧

09:49.790 --> 09:50.790
那么比方说

09:50.790 --> 09:51.790
你以后在网界里边

09:51.790 --> 09:52.790
你要引用一些

09:52.790 --> 09:54.790
比方说做一些

09:54.790 --> 09:55.790
访问统计

09:55.790 --> 09:56.790
对吧

09:56.790 --> 09:57.790
这些第三方

09:57.790 --> 09:58.790
应该做好的GS

09:58.790 --> 09:59.790
你要引用进去

09:59.790 --> 10:01.790
OK 你就可以使用这种方式

10:01.790 --> 10:02.790
因为有些GS

10:02.790 --> 10:04.790
还并没有放到MPM上

10:04.790 --> 10:05.790
你没法安装

10:05.790 --> 10:07.790
所以说你只能用这种方式

10:07.790 --> 10:08.790
引用一些别

10:08.790 --> 10:09.790
用非常老的办法

10:09.790 --> 10:10.790
你用GS

10:10.790 --> 10:11.790
好

10:11.790 --> 10:13.790
如果说你要写一些GS代码

10:13.790 --> 10:14.790
怎么办

10:14.790 --> 10:15.790
你要在这里写一些GS代码

10:15.790 --> 10:16.790
OK

10:16.790 --> 10:18.790
那么你这里可以使用

10:18.790 --> 10:20.790
可以使用一个双引号

10:20.790 --> 10:21.790
把代码写到这里边

10:21.790 --> 10:23.790
把你的GS代码写到这里边

10:23.790 --> 10:25.790
然后也可以模办支付串

10:25.790 --> 10:27.790
你把你要写来代码写到这

10:27.790 --> 10:28.790
写到这 也行

10:28.790 --> 10:29.790
我就不演示了

10:29.790 --> 10:30.790
明天每次要重启

10:30.790 --> 10:31.790
也挺麻烦的

10:31.790 --> 10:32.790
好

10:32.790 --> 10:33.790
我就会把这个删掉了

10:33.790 --> 10:35.790
就说一下这些材料就行了

10:35.790 --> 10:36.790
比方说还有这个

10:36.790 --> 10:37.790
我就不演示了

10:37.790 --> 10:39.790
也是一样的用法

10:39.790 --> 10:40.790
一样的用法

10:40.790 --> 10:41.790
那么配置这个

10:41.790 --> 10:44.790
可以引用一些额外的就是link

10:44.790 --> 10:46.790
就生成一些link元素

10:46.790 --> 10:47.790
还有Metals

10:47.790 --> 10:48.790
对吧

10:48.790 --> 10:49.790
生成一些额外的Metals

10:49.790 --> 10:50.790
放到head里边

10:50.790 --> 10:51.790
就说一下这些

10:51.790 --> 10:53.790
我们主要是要用这个玩意儿

10:53.790 --> 10:54.790
Diva

10:54.790 --> 10:55.790
好

10:55.790 --> 10:56.790
那么diva怎么用呢

10:56.790 --> 10:57.790
diva的话

10:57.790 --> 10:59.790
你就把diva开启完事了

10:59.790 --> 11:01.790
在下面写上diva

11:01.790 --> 11:02.790
就完事了

11:02.790 --> 11:03.790
我们主要说一下这个

11:03.790 --> 11:04.790
这个插件

11:04.790 --> 11:05.790
主要的功能在这

11:06.790 --> 11:08.790
把这个diva开启过后

11:08.790 --> 11:10.790
就是开启diva插件

11:10.790 --> 11:11.790
diva插件

11:11.790 --> 11:12.790
那么它这样子

11:12.790 --> 11:14.790
这个官方的插件库

11:14.790 --> 11:16.790
它就会自动把diva整合到

11:16.790 --> 11:17.790
5米里边去

11:17.790 --> 11:18.790
当然了

11:18.790 --> 11:22.770
我们要重新启动

11:25.770 --> 11:26.770
那么启动

11:26.770 --> 11:28.770
就是这个diva插件开启的过后

11:28.770 --> 11:29.770
我们怎么用呢

11:29.770 --> 11:30.770
我们回忆一下

11:30.770 --> 11:31.770
diva以前

11:31.770 --> 11:32.770
我们学diva的时候

11:32.770 --> 11:33.770
最重要的是什么

11:33.770 --> 11:34.770
我们当时学了

11:34.770 --> 11:35.770
是不是模型

11:35.770 --> 11:36.770
对不对

11:36.770 --> 11:37.770
是不是要定义模型

11:37.770 --> 11:38.770
好

11:38.770 --> 11:40.770
那么这个模型怎么定义呢

11:40.770 --> 11:41.770
它分为两种

11:41.770 --> 11:43.770
在这个插件里边

11:43.770 --> 11:44.770
它分为两种

11:44.770 --> 11:45.770
diva插件

11:46.770 --> 11:49.770
和5米整合后

11:50.770 --> 11:52.770
将模型

11:52.770 --> 11:54.770
分为两种

11:54.770 --> 11:55.770
哪两种模型呢

11:55.770 --> 11:57.770
一种是全局模型

11:57.770 --> 12:00.770
一种是局部模型

12:00.770 --> 12:02.770
有这么两种模型

12:02.770 --> 12:04.770
全局模型和局部模型

12:04.770 --> 12:06.770
全局模型的话

12:06.770 --> 12:09.770
就是所有页面通用

12:10.770 --> 12:11.770
局部模型的话

12:11.770 --> 12:13.770
是只能被

12:14.770 --> 12:15.770
某些页面使用

12:15.770 --> 12:16.770
模型是不是数据

12:16.770 --> 12:17.770
对吧

12:17.770 --> 12:18.770
以及对数据的更改

12:18.770 --> 12:19.770
还有副作用处理

12:19.770 --> 12:20.770
全部在模型里边

12:21.770 --> 12:22.770
全局模型的话

12:22.770 --> 12:23.770
是所有页面通用

12:23.770 --> 12:24.770
局部模型的话

12:24.770 --> 12:27.770
只能被某些页面使用

12:28.770 --> 12:29.770
好

12:29.770 --> 12:30.770
这就是

12:30.770 --> 12:31.770
diva里边的模型

12:31.770 --> 12:33.770
分为这么两种

12:33.770 --> 12:34.770
好

12:34.770 --> 12:35.770
然后呢

12:35.770 --> 12:36.770
全局模型

12:36.770 --> 12:38.770
它还有这么一些特点

12:38.770 --> 12:39.770
全局模型的话

12:40.770 --> 12:41.770
只有当

12:42.770 --> 12:43.770
就是

12:44.770 --> 12:48.770
工程一开始启动后

12:48.770 --> 12:51.770
模型就会挂载到仓库

12:53.770 --> 12:55.770
局部模型是

12:56.770 --> 12:57.770
只能被某些页面使用

12:57.770 --> 12:59.770
局部模型是

12:59.770 --> 13:02.770
访问具体的页面时

13:03.770 --> 13:05.770
才会挂载到仓库

13:05.770 --> 13:07.770
它有这么一个特点

13:07.770 --> 13:08.770
这叫动态挂载

13:08.770 --> 13:09.770
其实diva

13:09.770 --> 13:11.770
它也自身也支持动态挂载

13:11.770 --> 13:12.770
只不过我们当时

13:12.770 --> 13:13.770
为什么没讲呢

13:13.770 --> 13:14.770
是因为diva里边

13:14.770 --> 13:17.770
你如果说你要单独使用diva的话

13:17.770 --> 13:18.770
单独使用diva的话

13:18.770 --> 13:20.770
一般项目规模不会太大

13:20.770 --> 13:21.770
一般都是小项目

13:21.770 --> 13:23.770
小项目不太会需要动态挂载

13:23.770 --> 13:24.770
因为本身工程的数据

13:24.770 --> 13:25.770
没有那么多

13:25.770 --> 13:27.770
如果说你遇到大项目里边

13:27.770 --> 13:30.770
它要使用动态挂载的话

13:30.770 --> 13:32.770
一般就要使用5米了

13:32.770 --> 13:33.770
就要使用5米了

13:33.770 --> 13:35.770
我们在5米这里的动态也行

13:35.770 --> 13:37.770
那么这里我们看一下

13:37.770 --> 13:39.770
全局模型如何定义

13:39.770 --> 13:45.400
定义全局模型

13:45.400 --> 13:46.400
怎么定义呢

13:46.400 --> 13:47.400
非常简单

13:47.400 --> 13:49.400
在src

13:49.400 --> 13:50.400
在这个目录

13:50.400 --> 13:51.400
又是约定

13:51.400 --> 13:53.400
在这个models

13:53.400 --> 13:54.400
目录中

13:54.400 --> 13:56.400
目录下

13:56.400 --> 13:59.400
定义的介石文件

13:59.400 --> 14:01.400
都会

14:01.400 --> 14:04.400
都会被看作是

14:04.400 --> 14:07.400
全局模型

14:07.400 --> 14:10.400
默认情况下

14:10.400 --> 14:14.400
模型的命名空间

14:14.400 --> 14:19.400
和那个文件名一致

14:19.400 --> 14:20.400
特别简单

14:20.400 --> 14:21.400
咱们来看一下吧

14:21.400 --> 14:23.400
我们在src里边

14:23.400 --> 14:24.400
新建的文件夹

14:24.400 --> 14:26.400
给它取名为models

14:26.400 --> 14:27.400
模型的全局模型

14:27.400 --> 14:29.400
比方说我们这里建立两个

14:29.400 --> 14:31.400
一个是counter的介石

14:31.400 --> 14:34.400
这里导出export

14:34.400 --> 14:35.400
模型是啥

14:35.400 --> 14:36.400
模型不就是个对象吗

14:36.400 --> 14:37.400
对不对

14:37.400 --> 14:38.400
state

14:38.400 --> 14:39.400
状态是啥

14:39.400 --> 14:40.400
状态counter吧

14:40.400 --> 14:41.400
counter一开始是0吗

14:41.400 --> 14:42.400
对吧

14:42.400 --> 14:43.400
counter是0

14:43.400 --> 14:44.400
这是一个counter

14:44.400 --> 14:46.400
然后在新建的文件

14:46.400 --> 14:47.400
students

14:47.400 --> 14:49.400
students.js

14:49.400 --> 14:51.400
然后这里导出export

14:51.400 --> 14:52.400
default

14:52.400 --> 14:54.400
导出那个

14:54.400 --> 14:55.400
一个对象

14:55.400 --> 14:56.400
state

14:56.400 --> 14:57.400
默认状态

14:57.400 --> 14:59.400
比方说一个是一个对象

14:59.400 --> 15:00.400
默认状态

15:00.400 --> 15:02.400
data数据

15:02.400 --> 15:03.400
一个空数数

15:03.400 --> 15:04.400
然后呢

15:04.400 --> 15:06.400
头头总数据量

15:06.400 --> 15:07.400
0

15:07.400 --> 15:08.400
condition

15:08.400 --> 15:10.400
又是一个对象

15:10.400 --> 15:12.400
一个对象条件配景

15:12.400 --> 15:13.400
为第一页

15:13.400 --> 15:15.400
内面称为10

15:15.400 --> 15:17.400
每页前是10条数据

15:17.400 --> 15:18.400
还有啥

15:18.400 --> 15:19.400
还有什么

15:19.400 --> 15:20.400
还有keyz

15:20.400 --> 15:22.400
手锁关键字

15:22.400 --> 15:23.400
还有什么sex

15:23.400 --> 15:24.400
sex

15:24.400 --> 15:25.400
复一

15:25.400 --> 15:26.400
还有什么

15:27.400 --> 15:28.400
还有什么

15:28.400 --> 15:29.400
没了

15:29.400 --> 15:30.400
好

15:30.400 --> 15:31.400
就完了

15:31.400 --> 15:32.400
就完了

15:32.400 --> 15:34.400
我们是不是定义了两个模型

15:34.400 --> 15:36.400
那么仓库里面是不是有两个对象

15:36.400 --> 15:37.400
我们在这个模型里面

15:37.400 --> 15:38.400
有没有设置name space

15:38.400 --> 15:39.400
有没有设置

15:39.400 --> 15:40.400
是不是没有设置

15:40.400 --> 15:41.400
没有设置name space

15:41.400 --> 15:42.400
因此呢

15:42.400 --> 15:44.400
他们的命名空间

15:44.400 --> 15:45.400
就是这个文件名字

15:45.400 --> 15:46.400
好

15:46.400 --> 15:47.400
我们来看一下吧

15:47.400 --> 15:48.400
看一下

15:48.400 --> 15:49.400
这里应该启动完了

15:49.400 --> 15:50.400
看一下

15:50.400 --> 15:52.400
那么现在我们看这里

15:52.400 --> 15:53.400
这个redact

15:53.400 --> 15:54.400
是不是被点亮了

15:54.400 --> 15:56.400
所以你可以之前回忆一下

15:56.400 --> 15:58.400
或者是你自己去试验一下

15:58.400 --> 16:00.400
如果说你没有开启这个插件的话

16:00.400 --> 16:01.400
那么

16:01.400 --> 16:02.400
这个redact是没有被点亮的

16:02.400 --> 16:04.400
它并没有使用redact的功能

16:04.400 --> 16:05.400
那么现在被点亮了

16:05.400 --> 16:06.400
我们点击

16:06.400 --> 16:07.400
这里

16:07.400 --> 16:08.400
这样子

16:08.400 --> 16:10.400
Open your panel

16:10.400 --> 16:11.400
那么现在我们看一下

16:11.400 --> 16:12.400
我们的状态里边

16:12.400 --> 16:14.400
你看是不是有students的

16:14.400 --> 16:15.400
楼顶的

16:15.400 --> 16:16.400
是不是全有了

16:16.400 --> 16:17.400
对不对

16:17.400 --> 16:18.400
楼顶是

16:18.400 --> 16:19.400
它楼顶

16:19.400 --> 16:20.400
这个就是dbar里边的插件

16:20.400 --> 16:21.400
dbar里边又有插件

16:21.400 --> 16:22.400
dbar楼顶

16:22.400 --> 16:23.400
它是自动给你加进来的

16:23.400 --> 16:24.400
还有rotor

16:24.400 --> 16:25.400
是不是也给你加进去了

16:25.400 --> 16:26.400
这些东西

16:26.400 --> 16:27.400
你全部用管

16:27.400 --> 16:28.400
它全部给你做好了

16:28.400 --> 16:29.400
全部给你做好了

16:29.400 --> 16:30.400
管的不用管

16:30.400 --> 16:31.400
你直接写你自己的模型就行了

16:31.400 --> 16:32.400
你看counter

16:32.400 --> 16:33.400
对吧

16:33.400 --> 16:34.400
students是不是加进来了

16:34.400 --> 16:36.400
就这么简单

16:36.400 --> 16:37.400
就这么简单

16:37.400 --> 16:39.400
那如果说你写的是局部模型了

16:39.400 --> 16:41.400
如果说你写的是局部模型

16:43.400 --> 16:45.400
定义局部模型

16:46.400 --> 16:47.400
局部模型是

16:47.400 --> 16:49.400
局部模型

16:49.400 --> 16:51.400
定义在配极式

16:51.400 --> 16:52.400
文件夹

16:52.400 --> 16:54.400
或起

16:54.400 --> 16:55.400
指

16:55.400 --> 16:56.400
文件

16:56.400 --> 16:57.400
夹

16:58.400 --> 16:59.400
中

16:59.400 --> 17:01.400
那么定义的

17:02.400 --> 17:04.400
在哪个

17:04.400 --> 17:06.400
文件夹

17:06.400 --> 17:07.400
文件夹

17:07.400 --> 17:09.400
定义的模型

17:09.400 --> 17:10.400
会被

17:10.400 --> 17:11.400
该

17:11.400 --> 17:12.400
文件夹

17:13.400 --> 17:14.400
中的

17:14.400 --> 17:15.400
所有页面

17:15.400 --> 17:17.400
以及

17:17.400 --> 17:19.400
指页面

17:19.400 --> 17:20.400
所

17:21.400 --> 17:22.400
共享

17:22.400 --> 17:23.400
因为我们知道

17:23.400 --> 17:24.400
在仓库里面的数据

17:24.400 --> 17:25.400
往往是为了共享的

17:25.400 --> 17:26.400
对不对

17:26.400 --> 17:27.400
那么如果说

17:27.400 --> 17:28.400
你的模型定义在

17:28.400 --> 17:29.400
某一个文件夹里面

17:29.400 --> 17:30.400
那么这个文件夹里面

17:30.400 --> 17:31.400
定义的模型

17:31.400 --> 17:32.400
会被该文件夹中的

17:32.400 --> 17:33.400
所有页面

17:33.400 --> 17:34.400
以及指页面所共享

17:34.400 --> 17:35.400
什么意思呢

17:35.400 --> 17:36.400
就是说

17:36.400 --> 17:37.400
如果说我们在页面里面

17:37.400 --> 17:38.400
加一个

17:38.400 --> 17:39.400
诶哟

17:39.400 --> 17:40.400
诶哟

17:40.400 --> 17:41.400
诶哟

17:41.400 --> 17:42.400
诶哟

17:42.400 --> 17:43.400
诶哟

17:43.400 --> 17:44.400
诶哟

17:44.400 --> 17:45.400
诶哟

17:45.400 --> 17:46.400
诶哟

17:46.400 --> 17:47.400
诶哟

17:47.400 --> 17:48.400
诶哟

17:49.400 --> 17:50.400
fc

17:50.400 --> 17:51.400
好

17:51.400 --> 17:52.400
这里返回一个

17:52.400 --> 17:53.400
页面

17:53.400 --> 17:54.400
诶

17:54.400 --> 17:55.400
好然后呢

17:55.400 --> 17:56.400
我们在这里

17:56.400 --> 17:57.400
再写上一个指纹念甲

17:57.400 --> 17:58.400
啊

17:58.400 --> 17:59.400
sub

17:59.400 --> 18:00.400
再来返回

18:00.400 --> 18:03.160
再来一个页面b

18:03.160 --> 18:05.160
b.js

18:05.160 --> 18:06.160
啊fc

18:06.160 --> 18:08.160
啊b

18:08.160 --> 18:10.160
页面

18:10.160 --> 18:12.160
就是sub

18:12.160 --> 18:13.160
sub

18:13.160 --> 18:15.160
啊subb

18:15.160 --> 18:16.160
好

18:16.160 --> 18:17.160
那么刚才有一个

18:17.160 --> 18:18.160
也把它标注一下吧

18:18.160 --> 18:19.160
这是页面

18:19.160 --> 18:20.160
诶

18:20.160 --> 18:21.160
好

18:21.160 --> 18:22.160
就这样子啊

18:22.160 --> 18:23.160
好我们这里写了两个页面

18:23.160 --> 18:24.160
然后呢

18:24.160 --> 18:26.160
我们现在把模型定义在哪呢

18:26.160 --> 18:28.160
我们现在把模型定义在哪呢

18:28.160 --> 18:29.160
我们现在

18:29.160 --> 18:31.160
把模型定义在这

18:31.160 --> 18:34.790
定义在这

18:34.790 --> 18:35.790
好看着啊

18:35.790 --> 18:36.790
这里呢

18:36.790 --> 18:37.790
我们干

18:37.790 --> 18:38.790
怎么来定义模型

18:38.790 --> 18:39.790
怎么来定义局部模型

18:39.790 --> 18:42.790
局部的模型定义跟全局模型很类似

18:42.790 --> 18:44.790
局部模型的定义

18:44.790 --> 18:48.790
和全局模型的约定

18:48.790 --> 18:50.790
类似

18:50.790 --> 18:51.790
需要

18:51.790 --> 18:55.790
创建一个models文件夹

18:55.790 --> 18:56.790
好那么这里

18:56.790 --> 18:57.790
我们sub里边

18:57.790 --> 18:59.790
再加一个models文件夹

18:59.790 --> 19:00.790
然后呢

19:00.790 --> 19:01.790
这里边

19:01.790 --> 19:02.790
新建一个文件

19:02.790 --> 19:05.790
比方说temp.js

19:05.790 --> 19:07.790
这里也导出default

19:07.790 --> 19:08.790
导出stat

19:08.790 --> 19:10.790
啊随便写abc

19:10.790 --> 19:11.790
我们看一下

19:11.790 --> 19:13.790
关键是看一下这个temp

19:13.790 --> 19:14.790
这个模型

19:14.790 --> 19:16.790
它有没有挂得到仓库里面去

19:16.790 --> 19:17.790
保存

19:17.790 --> 19:19.790
好我们这里刷新一次

19:19.790 --> 19:20.790
咱们来看一下仓库

19:20.790 --> 19:22.790
看那个模型在不在

19:22.790 --> 19:24.790
按理说的话

19:24.790 --> 19:25.790
这个模型应该是不在的

19:25.790 --> 19:27.790
因为它是一个局部模型

19:27.790 --> 19:28.790
但是它在

19:28.790 --> 19:30.790
那个局部模型在

19:30.790 --> 19:31.790
这是怎么回事呢

19:31.790 --> 19:32.790
它是这样子

19:32.790 --> 19:33.790
是这样子

19:33.790 --> 19:35.790
你看一下这个官方的说明

19:35.790 --> 19:37.790
它指南里边有一个

19:37.790 --> 19:39.790
又是无米的地方

19:39.790 --> 19:41.790
说到这个局部模型

19:41.790 --> 19:42.790
它说什么呢

19:42.790 --> 19:43.790
它说这是这样子

19:43.790 --> 19:45.790
就说全局模型呢

19:45.790 --> 19:46.790
是全量在住

19:46.790 --> 19:47.790
就是一开始的时候

19:47.790 --> 19:49.790
全部把一个模型在住进来

19:49.790 --> 19:52.790
局部模型就是页面模型

19:52.790 --> 19:54.790
它是在

19:54.790 --> 19:56.790
prodcast模式下面

19:56.790 --> 19:57.790
在这个环境下面

19:57.790 --> 19:59.790
就是部属环境下面

19:59.790 --> 20:01.790
就生产环境下面的

20:01.790 --> 20:03.790
是按虚在住的

20:03.790 --> 20:04.790
就是用到这个模型的时候

20:04.790 --> 20:05.790
它才会在住

20:05.790 --> 20:06.790
就是访问相应的页面的时候

20:06.790 --> 20:08.790
它才会在住

20:08.790 --> 20:10.790
但是在开发模式的时候

20:10.790 --> 20:11.790
是全量在住的

20:11.790 --> 20:12.790
所以说

20:12.790 --> 20:13.790
为什么我们现在看得见

20:13.790 --> 20:14.790
就是这个原因

20:14.790 --> 20:15.790
实际上应该是看不见的

20:15.790 --> 20:17.790
我们要访问到

20:17.790 --> 20:18.790
那个页面的时候

20:18.790 --> 20:19.790
才能看得见

20:19.790 --> 20:20.790
才能看得见这个模型

20:20.790 --> 20:22.790
那么关于这个模型

20:22.790 --> 20:23.790
所以说

20:23.790 --> 20:25.790
大家知道这一点就行了

20:25.790 --> 20:26.790
所以说

20:26.790 --> 20:28.790
我们以后在定义模型的时候

20:28.790 --> 20:30.790
要有所考虑

20:30.790 --> 20:31.790
就是说

20:31.790 --> 20:32.790
我们如果说有一些数据

20:32.790 --> 20:34.790
它不是全局使用的

20:34.790 --> 20:35.790
它就是

20:35.790 --> 20:37.790
有一部分页面在共享

20:37.790 --> 20:38.790
那么我们

20:38.790 --> 20:40.790
只需要把它作为局部模型

20:40.790 --> 20:41.790
就行了

20:41.790 --> 20:43.790
不需要把它作为全局模型

20:43.790 --> 20:45.790
然后如果说

20:45.790 --> 20:46.790
有一些数据

20:46.790 --> 20:47.790
到处要用

20:47.790 --> 20:48.790
一会儿这块要用

20:48.790 --> 20:49.790
那一块也要用

20:49.790 --> 20:50.790
那么

20:50.790 --> 20:52.790
就把它作为全局模型

20:52.790 --> 20:53.790
没有这个意思吧

20:53.790 --> 20:54.790
好吧

20:54.790 --> 20:56.790
这就是关于模型这一块的定义

20:56.790 --> 20:58.790
如何来定义

20:58.790 --> 20:59.790
然后它是关于

20:59.790 --> 21:01.790
这个模型的访问权限

21:01.790 --> 21:03.790
关于模型的访问权限

21:03.790 --> 21:04.790
它是这样子

21:04.790 --> 21:05.790
这个模型的访问权限

21:05.790 --> 21:06.790
我这里还说的

21:06.790 --> 21:08.790
没有说完

21:08.790 --> 21:11.790
会被该文件夹的所有页面

21:11.790 --> 21:13.790
以及纸文件

21:13.790 --> 21:15.790
以及纸页面

21:15.790 --> 21:17.790
以及

21:17.790 --> 21:21.790
以及该文件夹的

21:21.790 --> 21:24.790
副文件夹

21:24.790 --> 21:28.790
的祖先文件夹

21:28.790 --> 21:30.790
文件夹

21:30.790 --> 21:32.790
中的页面

21:32.790 --> 21:33.790
所共享

21:33.790 --> 21:34.790
就是说

21:34.790 --> 21:35.790
这个怎么理解呢

21:35.790 --> 21:36.790
这个

21:36.790 --> 21:37.790
我看一下

21:37.790 --> 21:38.790
图呢

21:38.790 --> 21:39.790
我这里画张图

21:39.790 --> 21:40.790
就是我们的页面

21:40.790 --> 21:42.790
它不是形成了一套成绩结构吗

21:42.790 --> 21:44.790
对不对

21:44.790 --> 21:46.790
就是目录

21:46.790 --> 21:47.790
它可能会

21:47.790 --> 21:49.790
它会形成这么一种成绩结构

21:49.790 --> 21:51.790
一种塑状结构

21:51.790 --> 21:53.790
我们就随便画一些

21:53.790 --> 21:54.790
我也不会画箭头了

21:54.790 --> 21:56.790
我们就随便画一些

21:56.790 --> 22:01.190
会形成这么一种成绩结构

22:01.190 --> 22:02.190
我们这样子

22:02.190 --> 22:03.190
这样子就知道

22:03.190 --> 22:05.190
谁是副谁是纸了

22:05.190 --> 22:10.870
形成这么一种成绩结构

22:10.870 --> 22:12.870
那么如果说

22:12.870 --> 22:14.870
我们在这个目录里边

22:14.870 --> 22:16.870
夹的模型

22:16.870 --> 22:17.870
在这个目录里边夹的

22:17.870 --> 22:18.870
模式文件夹

22:18.870 --> 22:19.870
然后夹的模型

22:19.870 --> 22:20.870
那么这个模型

22:20.870 --> 22:22.870
可以被哪些页面使用了

22:22.870 --> 22:23.870
它可以被

22:23.870 --> 22:25.870
这个目录所在的那一条

22:25.870 --> 22:27.870
链上所有的页面都可以使用

22:27.870 --> 22:29.870
就它这下边可以使用

22:29.870 --> 22:30.870
它的上边可以使用

22:30.870 --> 22:31.870
它上面的上边

22:31.870 --> 22:32.870
也可以使用

22:32.870 --> 22:33.870
但是跟这些就没关系了

22:33.870 --> 22:35.870
跟这些就不能使用了

22:35.870 --> 22:36.870
是这么个

22:36.870 --> 22:37.870
是这么个意思

22:37.870 --> 22:39.870
它是要在这条链上可以使用

22:39.870 --> 22:40.870
那比方在这个目录里边

22:40.870 --> 22:41.870
加个模型

22:41.870 --> 22:42.870
那么是在这条链上

22:42.870 --> 22:43.870
都可以使用

22:43.870 --> 22:45.870
就一直这样理解

22:45.870 --> 22:46.870
这下面它这里有举例子

22:46.870 --> 22:48.870
比方说你看一下

22:48.870 --> 22:49.870
它说

22:49.870 --> 22:53.870
它会向上查找

22:53.870 --> 22:56.870
它会向上查找

22:56.870 --> 22:58.870
比方说你的页面地址是这个

22:58.870 --> 22:59.870
配置文件下

22:59.870 --> 23:00.870
下面的M路

23:00.870 --> 23:01.870
下面的B点解释

23:01.870 --> 23:03.870
那么页面模型

23:03.870 --> 23:04.870
它在哪呢

23:04.870 --> 23:06.870
在A页面的B的文件夹

23:06.870 --> 23:09.870
下面的Modus

23:09.870 --> 23:10.870
下面的可能

23:10.870 --> 23:12.870
后面还有一些解释

23:12.870 --> 23:15.870
那么它会从这里边去找

23:15.870 --> 23:17.870
然后先找最里程的Modus

23:17.870 --> 23:20.870
然后再往外面找

23:20.870 --> 23:23.870
就先找BM路下面的Modus

23:23.870 --> 23:25.870
因为你是B点解释

23:25.870 --> 23:27.870
它找BM路下面的Modus

23:27.870 --> 23:28.870
然后再往MM路下面找

23:28.870 --> 23:29.870
再往E4找

23:29.870 --> 23:33.870
总之那一条链上都可以使用

23:33.870 --> 23:35.870
就是那一条链

23:35.870 --> 23:36.870
记这条链就行了

23:36.870 --> 23:41.310
不然的话有链罩

23:41.310 --> 23:42.310
那么这里

23:42.310 --> 23:43.310
还说到一个点

23:43.310 --> 23:45.310
就是单文件Modus

23:45.310 --> 23:46.310
比方说像这个文件夹

23:46.310 --> 23:48.310
比方说像这个文件夹里边

23:48.310 --> 23:49.310
这个文件夹里边

23:49.310 --> 23:50.310
我们可能认为

23:50.310 --> 23:52.310
只有一个模型

23:52.310 --> 23:54.310
只需要一个模型

23:54.310 --> 23:57.310
那么你就不用去建这个Modus

23:57.310 --> 23:58.310
这个Moodus

23:58.310 --> 23:59.310
不用去建这个Moodus

23:59.310 --> 24:01.310
那么你直接把这个模型放到哪

24:01.310 --> 24:03.310
放到这个Suppers文件夹里边

24:03.310 --> 24:05.310
但是前提条件

24:05.310 --> 24:09.310
你是不能写其他名字的

24:09.310 --> 24:11.310
你只能写Modus

24:12.310 --> 24:14.310
Default

24:14.310 --> 24:15.310
比如说State

24:15.310 --> 24:17.310
ABC

24:17.310 --> 24:18.310
你只能这样写

24:18.310 --> 24:19.310
写个Modus的解释

24:19.310 --> 24:20.310
就单文件模型

24:20.310 --> 24:21.310
因为如果说你模型

24:21.310 --> 24:22.310
只有一个文件的话

24:22.310 --> 24:23.310
你可以这样做

24:23.310 --> 24:24.310
但是你这样做了过后

24:24.310 --> 24:25.310
你要注意

24:27.310 --> 24:28.310
在这个档事里边

24:28.310 --> 24:29.310
它状态里边

24:29.310 --> 24:30.310
你看一下

24:30.310 --> 24:31.310
你这里

24:31.310 --> 24:33.310
是不是模型

24:33.310 --> 24:35.310
它的属性名变成Modus

24:35.310 --> 24:36.310
对不对

24:36.310 --> 24:38.310
它属性名变成了Modus

24:38.310 --> 24:39.310
属性名变成了Modus

24:39.310 --> 24:40.310
那么你要改属性名的话

24:40.310 --> 24:41.310
怎么改

24:41.310 --> 24:42.310
那你只能手动的

24:42.310 --> 24:43.310
去写命名空间

24:43.310 --> 24:44.310
Name Space

24:44.310 --> 24:45.310
不要说要改成Temp

24:45.310 --> 24:47.310
跟Diva是一样的

24:47.310 --> 24:48.310
保存

24:50.310 --> 24:52.310
你看变成Temp了

24:52.310 --> 24:54.310
而且你写了模型过后

24:54.310 --> 24:55.310
那么你由于写到

24:55.310 --> 24:57.310
Page-5念甲里边

24:57.310 --> 24:58.310
它会不会形成页面呢

24:58.310 --> 24:59.310
咱们来看一下

24:59.310 --> 25:00.310
如果我们说

25:00.310 --> 25:01.310
直接访问这个Suppers

25:01.310 --> 25:02.310
Modus

25:03.310 --> 25:04.310
能不能访问呢

25:04.310 --> 25:06.310
是不是访问不了

25:06.310 --> 25:07.310
对不对

25:07.310 --> 25:08.310
访问不了

25:08.310 --> 25:09.310
它访问不了

25:09.310 --> 25:11.310
访问不了这个东西

25:12.310 --> 25:14.310
为什么说访问不了呢

25:14.310 --> 25:15.310
其实

25:15.310 --> 25:17.310
其实你看在这个

25:17.310 --> 25:18.310
在这里

25:18.310 --> 25:20.310
在5mm这个Rotor

25:20.310 --> 25:22.310
在这里

25:22.310 --> 25:24.310
它有没有给你加上这个东西呢

25:24.310 --> 25:25.310
你看一下

25:25.310 --> 25:27.310
实际上是给你加上了

25:27.310 --> 25:29.310
给你加上这个路由配置了

25:29.310 --> 25:31.310
实际上是给你加上了

25:31.310 --> 25:32.310
只不过呢

25:32.310 --> 25:34.310
由于你这一块

25:36.310 --> 25:37.310
由于你这一块

25:39.310 --> 25:40.310
你写的不是组件

25:40.310 --> 25:41.310
对吧

25:41.310 --> 25:42.310
你倒错是一个对象

25:42.310 --> 25:43.310
所以说它这里夹载失败

25:43.310 --> 25:44.310
它夹载失败

25:44.310 --> 25:45.310
仅此而已

25:45.310 --> 25:47.310
所以说它实际上是给你加上了

25:47.310 --> 25:49.310
如果说你不希望它加上

25:49.310 --> 25:50.310
比方我们再看一下

25:50.310 --> 25:51.310
Modus文件夹

25:51.310 --> 25:54.690
如果说我们把它放到Modus里边

25:54.690 --> 25:55.690
我们再看一下

25:56.690 --> 25:57.690
Temp.js

25:57.690 --> 26:02.220
说一下这个问题

26:02.220 --> 26:04.220
如果说你放到Modus里边

26:04.220 --> 26:05.220
我们来看一下

26:05.220 --> 26:06.220
保存

26:06.220 --> 26:07.220
我们来看一下Rotor里边

26:07.220 --> 26:08.220
有没有给你加上

26:08.220 --> 26:10.220
有没有把这个就是页面给你加上

26:10.220 --> 26:11.220
在5mm

26:11.220 --> 26:12.220
Rotor

26:12.220 --> 26:13.220
看一下

26:13.220 --> 26:15.220
有没有把我们的Modus加上

26:17.220 --> 26:18.220
看一下

26:18.220 --> 26:19.220
是不是有加上

26:19.220 --> 26:20.220
对吧 是有加上

26:20.220 --> 26:22.220
这一点其实是不好的

26:22.220 --> 26:23.220
尽管你访问不了

26:23.220 --> 26:24.220
尽管你肯定是访问不了

26:24.220 --> 26:25.220
Modus

26:25.220 --> 26:26.220
Temp

26:27.220 --> 26:29.220
肯定是访问不了

26:29.220 --> 26:31.220
为什么说访问不了呢

26:31.220 --> 26:32.220
是因为

26:32.220 --> 26:33.220
这里

26:34.220 --> 26:36.220
它导出的不是一个组件

26:36.220 --> 26:38.220
它把它看成是组件了

26:38.220 --> 26:39.220
它导出的不是组件

26:40.220 --> 26:43.220
因此我们希望它在进行路由的时候

26:43.220 --> 26:46.220
尽量的去忽略掉一些

26:46.220 --> 26:47.220
特殊的文件夹

26:47.220 --> 26:49.220
像这种Modus文件夹

26:49.220 --> 26:50.220
应该把它忽略掉

26:50.220 --> 26:51.220
应该把它忽略掉

26:51.220 --> 26:52.220
那么怎么让它

26:52.220 --> 26:54.220
怎么来告诉它忽略掉呢

26:54.220 --> 26:55.220
其实这里也需要

26:55.220 --> 26:57.220
通过插件来进行配置

26:57.220 --> 26:58.220
好 这里边

26:58.220 --> 26:59.220
你看这个插件里边

27:03.490 --> 27:04.490
再看一下

27:04.490 --> 27:05.490
这个插件里边有这么一个配置

27:05.490 --> 27:07.490
叫做Rotor

27:07.490 --> 27:09.490
Rotor它是一个配置

27:09.490 --> 27:10.490
它配置为一个对象

27:10.490 --> 27:13.490
它可以去除掉某一些

27:13.490 --> 27:15.490
某一些路由

27:15.490 --> 27:17.490
就忽略掉某一些路由

27:18.490 --> 27:19.490
忽略掉某一些路由

27:19.490 --> 27:20.490
那么怎么来写呢

27:20.490 --> 27:23.800
比方说我们可以这样写

27:25.800 --> 27:26.800
这个叫什么

27:26.800 --> 27:27.800
Rotor

27:28.800 --> 27:30.800
我们这里配置为一个数组

27:30.800 --> 27:32.800
你看 它是个对象

27:32.800 --> 27:34.800
它里边有个属性叫做

27:34.800 --> 27:36.800
exclude

27:36.800 --> 27:39.800
就是排除掉某一些

27:39.800 --> 27:41.800
排除掉某一些介绍

27:41.800 --> 27:42.800
你不要把它形成路由

27:42.800 --> 27:44.800
那么排除掉什么呢

27:44.800 --> 27:46.800
排除掉它这里写

27:46.800 --> 27:48.800
它指是一个数组

27:48.800 --> 27:50.800
数组里边每一项是一个什么

27:50.800 --> 27:52.800
每一项是一个政策表达式

27:52.800 --> 27:54.800
每一项是一个政策表达式

27:54.800 --> 27:56.800
那么这里你就可以这样写

27:57.800 --> 27:59.800
我们排除掉其中一个政策表达式

27:59.800 --> 28:00.800
什么政策表达式呢

28:00.800 --> 28:02.800
就是前边是啥

28:02.800 --> 28:04.800
无所谓

28:04.800 --> 28:06.800
只要你包含了model式

28:06.800 --> 28:07.800
我就要给你排除

28:07.800 --> 28:09.800
前边是啥

28:09.800 --> 28:11.800
我无所谓

28:11.800 --> 28:13.800
点心号无所谓

28:13.800 --> 28:15.800
任意制服

28:15.800 --> 28:17.800
然后中间你只要包含了这个model式

28:17.800 --> 28:19.800
后边无所谓

28:19.800 --> 28:21.800
你只要包含了这个玩意

28:21.800 --> 28:23.800
那我就要给你排除

28:23.800 --> 28:25.800
或者说不加S吗

28:25.800 --> 28:27.800
包含了model就要给你排除

28:27.800 --> 28:29.800
保存 咱们重新启动

28:29.800 --> 28:31.800
改了插线过就得重新启动

28:31.800 --> 28:33.800
一二十段子

28:33.800 --> 28:35.800
好 咱们来看一下

28:40.740 --> 28:42.740
像这种细节

28:42.740 --> 28:44.740
我发现很多用5米开发的人

28:44.740 --> 28:46.740
都不太注意这一点

28:46.740 --> 28:48.740
会导致你跟路由里边

28:48.740 --> 28:49.740
虽然说你访问不了

28:49.740 --> 28:51.740
但是要给你包莫名其妙的错误

28:51.740 --> 28:57.250
看一下

28:57.250 --> 28:59.250
现在我们再去访问

28:59.250 --> 29:01.250
我们先看一下路由

29:01.250 --> 29:02.250
router

29:02.250 --> 29:04.250
你看一下我们的model里边还有没有

29:04.250 --> 29:06.250
我们在这里查找一下

29:06.250 --> 29:07.250
model 有没有

29:07.250 --> 29:08.250
无结果

29:08.250 --> 29:09.250
没有了

29:09.250 --> 29:11.250
现在我们再去访问

29:11.250 --> 29:13.250
sab下面的model

29:13.250 --> 29:15.250
你看

29:15.250 --> 29:16.250
model是temp

29:16.250 --> 29:17.250
你看看能不能访问

29:17.250 --> 29:18.250
404

29:18.250 --> 29:20.250
这才是一个正确的结果

29:20.250 --> 29:21.250
找不到页面

29:21.250 --> 29:22.250
这才是正确的结果

29:22.250 --> 29:24.250
你看路由里边是不包含它了

29:24.250 --> 29:26.250
包括我们由于排除

29:26.250 --> 29:28.250
只要你包含了model都不行

29:28.250 --> 29:30.250
那么我们这样子以来的话

29:30.250 --> 29:32.250
哪怕我们这里写上一个model.js

29:34.250 --> 29:36.250
model.js

29:36.250 --> 29:39.880
那么这里

29:39.880 --> 29:41.880
我们用这种方式

29:41.880 --> 29:43.880
用这种单路由的单模型的方式

29:43.880 --> 29:45.880
如果说我们用这种方式来写

29:45.880 --> 29:47.880
那么也不行

29:47.880 --> 29:49.880
它也不会有这样的路由

29:49.880 --> 29:52.880
路由列表里边也不会有这样的路由

29:52.880 --> 29:55.880
当然我们这里用的比较简单粗暴一点

29:55.880 --> 29:56.880
就是说

29:56.880 --> 29:59.880
我们这里用的做法是比较简单粗暴的

29:59.880 --> 30:00.880
我们这里

30:00.880 --> 30:02.880
如果说你正常的页面里边

30:02.880 --> 30:04.880
包含了model这个单词也不行

30:04.880 --> 30:07.880
所以说你可以写的稍微精确一点

30:07.880 --> 30:08.880
排除要哪些

30:08.880 --> 30:09.880
首先排除掉

30:09.880 --> 30:11.880
model.js的目录

30:11.880 --> 30:13.880
排除了包含model.js的目录

30:13.880 --> 30:15.880
就是model.js前边

30:15.880 --> 30:17.880
前边有斜杠

30:17.880 --> 30:19.880
model.js前边有斜杠

30:19.880 --> 30:21.880
model.js后边也有斜杠

30:23.880 --> 30:24.880
model.js后边也有斜杠

30:24.880 --> 30:26.880
像这种排除掉目录

30:26.880 --> 30:27.880
然后再排除掉什么呢

30:27.880 --> 30:29.880
再排除掉那个model.文件

30:29.880 --> 30:30.880
model.文件

30:30.880 --> 30:32.880
前边是啥无所谓

30:32.880 --> 30:33.880
后边有一个斜杠

30:33.880 --> 30:36.880
斜杠的后边写上model.js

30:37.880 --> 30:39.880
这个点要转移

30:39.880 --> 30:40.880
像这种

30:40.880 --> 30:41.880
像这种

30:41.880 --> 30:43.880
也不行

30:43.880 --> 30:44.880
意思吧

30:44.880 --> 30:46.880
总之那里把这两种情况

30:46.880 --> 30:48.880
排除掉就完事了

30:48.880 --> 30:50.880
这就是这一块

30:50.880 --> 30:52.880
关于

30:52.880 --> 30:53.880
模型

30:53.880 --> 30:56.880
模型已经对路由的产生的影响

30:56.880 --> 30:57.880
我们现在说的两种模型

30:57.880 --> 30:58.880
一种是全局模型

30:58.880 --> 30:59.880
一种是局部模型

30:59.880 --> 31:00.880
也告诉大家

31:00.880 --> 31:01.880
全局模型和局部模型

31:01.880 --> 31:02.880
他们的差异

31:02.880 --> 31:04.880
他们的约定方式

31:04.880 --> 31:05.880
那么

31:05.880 --> 31:06.880
既然其实就没啥

31:06.880 --> 31:07.880
因为模型的鞋法

31:07.880 --> 31:08.880
在Diva里边

31:08.880 --> 31:09.880
我们都学过的

31:10.880 --> 31:12.880
那么我们就看一下怎么用

31:12.880 --> 31:13.880
我们就做一个页面出来

31:13.880 --> 31:15.880
做一个页面来增加严少

31:15.880 --> 31:16.880
行吧

31:16.880 --> 31:17.880
我们要做一个页面

31:17.880 --> 31:20.880
来实现增加减少的功能

31:20.880 --> 31:21.880
好

31:21.880 --> 31:22.880
我们这里Counter

31:22.880 --> 31:23.880
给它写完

31:23.880 --> 31:24.880
以前我们写过

31:24.880 --> 31:25.880
对吧

31:25.880 --> 31:27.880
写过我们直接Copy过来得了

31:27.880 --> 31:29.880
哎呦

31:29.880 --> 31:31.880
我这个分子里边没有

31:31.880 --> 31:32.880
没有

31:32.880 --> 31:33.880
那我快速写一下吧

31:33.880 --> 31:34.880
顺便复习一下

31:34.880 --> 31:36.880
Reduce是

31:36.880 --> 31:38.880
Increase

31:38.880 --> 31:39.880
更加吗

31:39.880 --> 31:41.880
你是不是给我传一个Stats进来

31:41.880 --> 31:43.880
Action我都不要了

31:43.880 --> 31:44.880
你给我传进来

31:44.880 --> 31:45.880
但是我不要

31:45.880 --> 31:46.880
Stats加1

31:46.880 --> 31:48.880
Stats加1

31:48.880 --> 31:49.880
好

31:49.880 --> 31:51.880
我这里顺便说一下那个

31:51.880 --> 31:52.880
因为有的时候

31:52.880 --> 31:54.880
你们以后出去可能会看得到

31:54.880 --> 31:56.880
就是海动鞋法

31:56.880 --> 31:58.880
海动鞋法是开启这个插件

31:58.880 --> 31:59.880
是开启这个插件

31:59.880 --> 32:01.880
叫做Emer

32:03.880 --> 32:07.380
Emer插件

32:07.380 --> 32:09.380
开启Emer插件

32:09.380 --> 32:11.380
这个Emer插件呢

32:11.380 --> 32:12.380
它是这样子

32:12.380 --> 32:13.380
它是DBA的一个插件

32:13.380 --> 32:15.380
DBA官方给你做了一个插件

32:15.380 --> 32:16.380
当时我们讲了DBA楼顶

32:16.380 --> 32:17.380
对吧

32:17.380 --> 32:18.380
但是没有讲DBA Emer

32:18.380 --> 32:19.380
因为我觉得

32:19.380 --> 32:20.380
用这个东西

32:20.380 --> 32:21.380
并不一定是件好的事

32:21.380 --> 32:23.380
我个人不喜欢用这个东西

32:23.380 --> 32:25.380
但是我看到别人

32:25.380 --> 32:26.380
公司

32:26.380 --> 32:27.380
也不太看在公司里边

32:27.380 --> 32:28.380
用这个东西

32:28.380 --> 32:30.380
但是我看到有人在外边

32:30.380 --> 32:31.380
有些自己写的玩的时候

32:31.380 --> 32:32.380
用到这个东西

32:32.380 --> 32:33.380
怕你们以后看不懂

32:33.380 --> 32:35.380
我就说一下吧

32:35.380 --> 32:36.380
这个Emer

32:36.380 --> 32:37.380
这个Emer是什么

32:37.380 --> 32:38.380
5U

32:39.380 --> 32:42.380
5U在改变数据的时候

32:44.380 --> 32:46.380
它是不是可以

32:46.380 --> 32:48.380
直接更改数据

32:48.380 --> 32:49.380
对吧

32:49.380 --> 32:50.380
比方说像这里

32:50.380 --> 32:52.380
它写的返回的不是

32:52.380 --> 32:54.380
返回的不是这个玩意儿

32:54.380 --> 32:56.380
而是什么呢

32:56.380 --> 32:57.380
而是什么呢

32:57.380 --> 32:59.380
State++

32:59.380 --> 33:00.380
是不是这样子

33:00.380 --> 33:02.380
以前5U是不是这样子做的

33:02.380 --> 33:03.380
对吧

33:03.380 --> 33:04.380
5U是这样子做的

33:04.380 --> 33:06.380
那么在react里面

33:06.380 --> 33:07.380
可以

33:07.380 --> 33:10.380
但是你要开启一个

33:10.380 --> 33:11.380
Emer插件

33:11.380 --> 33:13.380
你得开启一个Emer插件

33:13.380 --> 33:14.380
那么这个Emer插件

33:14.380 --> 33:15.380
它的机

33:15.380 --> 33:17.380
它是基于

33:17.380 --> 33:18.380
基于一个酷

33:18.380 --> 33:19.380
叫做Emer酷

33:19.380 --> 33:20.380
大家有兴趣的话

33:20.380 --> 33:22.380
可以去MPM了解一下

33:22.380 --> 33:23.380
这个酷

33:23.380 --> 33:25.380
其实我个人不建议这样做

33:25.380 --> 33:26.380
这样做呢

33:26.380 --> 33:27.380
勇于造成婚小

33:27.380 --> 33:28.380
特别是用视觉感

33:28.380 --> 33:29.380
收藏造成婚小

33:29.380 --> 33:30.380
感觉好像在这里

33:30.380 --> 33:31.380
在出现了副作用了

33:31.380 --> 33:32.380
对吧

33:32.380 --> 33:33.380
实际上这里是不能有

33:33.380 --> 33:34.380
实际上它是给你处理过了

33:34.380 --> 33:35.380
是没有副作用的

33:35.380 --> 33:36.380
它给你处理过了

33:36.380 --> 33:38.380
还是一个不可辩论一下

33:38.380 --> 33:39.380
Emer

33:39.380 --> 33:40.380
全程叫做Emer

33:40.380 --> 33:42.380
Immutable

33:42.380 --> 33:44.380
就是表示不可辩论一下

33:44.380 --> 33:45.380
但是你写的时候

33:45.380 --> 33:47.380
好像是可以变化的

33:47.380 --> 33:49.380
但是实际上它给你处理过了

33:49.380 --> 33:51.380
就是你可以这样子写

33:51.380 --> 33:53.380
但是我不建议大家这样子写

33:53.380 --> 33:54.380
这种视觉感受太不好了

33:54.380 --> 33:57.380
因为reducer一定要保持纯净的

33:57.380 --> 33:58.380
既然我们说到了

33:58.380 --> 34:01.270
我们看一下吧

34:01.270 --> 34:06.060
earth start

34:06.060 --> 34:08.060
看一下

34:10.430 --> 34:13.430
我们得把写完

34:13.430 --> 34:14.430
decrease

34:14.430 --> 34:15.430
start

34:15.430 --> 34:18.430
这start简介

34:18.430 --> 34:19.430
然后呢

34:19.430 --> 34:20.430
副作用

34:20.430 --> 34:21.430
effects

34:21.430 --> 34:22.430
副作用

34:22.430 --> 34:23.430
而think

34:23.430 --> 34:24.430
先不说副作用吧

34:24.430 --> 34:30.050
先不说副作用

34:30.050 --> 34:31.050
现在出来了

34:31.050 --> 34:32.050
对吧

34:32.050 --> 34:33.050
现在出来了

34:33.050 --> 34:34.050
然后你看reducer里边

34:34.050 --> 34:36.050
如果说你没有开启这个插件的话

34:36.050 --> 34:37.050
它一定要爆错的

34:37.050 --> 34:39.050
这一块是一定要爆错的

34:39.050 --> 34:40.050
为什么要爆错

34:40.050 --> 34:42.050
因为这个reducer是发挥了

34:42.050 --> 34:43.050
这个undefined

34:43.050 --> 34:44.050
对吧

34:44.050 --> 34:45.050
是不是一定会爆错

34:45.050 --> 34:46.050
但是它现在没有爆错

34:46.050 --> 34:47.050
你会发现

34:47.050 --> 34:49.050
它现在根本就没有爆错

34:49.050 --> 34:50.050
一切正常

34:50.050 --> 34:51.050
counter一切正常

34:51.050 --> 34:53.050
那么我们来看一下吧

34:53.050 --> 34:54.050
不着急

34:54.050 --> 34:56.050
我们这里写上

34:56.050 --> 34:57.050
不写的

34:57.050 --> 34:58.050
这里不写的

34:58.050 --> 35:00.050
我们就把一个逐渐写好就行了

35:00.050 --> 35:02.050
这里边我们写上

35:02.050 --> 35:04.050
写上一个页面

35:04.050 --> 35:05.050
counter

35:05.050 --> 35:07.050
要介绍

35:08.050 --> 35:09.050
这里边

35:09.050 --> 35:10.050
我们

35:10.050 --> 35:11.050
就在这里写个逐渐

35:11.050 --> 35:16.090
直接在这里写个逐渐

35:16.090 --> 35:18.090
然后在页面上

35:18.090 --> 35:19.090
一会导出一个页面

35:19.090 --> 35:21.090
这个逐渐不导出

35:21.090 --> 35:22.090
我们其实按理说的话

35:22.090 --> 35:23.090
应该在这里建一个

35:23.090 --> 35:25.090
component文件夹

35:25.090 --> 35:27.090
把这个逐渐放到文件夹里边

35:27.090 --> 35:28.090
行吧

35:28.090 --> 35:30.090
我们把放到文件夹里边

35:30.090 --> 35:32.090
一切按到正过来

35:32.090 --> 35:34.090
component

35:34.090 --> 35:36.090
放到这里边

35:36.090 --> 35:38.090
其实也可以把

35:38.090 --> 35:40.090
component放到配置里边

35:40.090 --> 35:42.090
然后在配置里边把忽略掉

35:42.090 --> 35:43.090
把这个文件夹忽略掉

35:43.090 --> 35:45.090
之前忽略这个东西是一样的

35:45.090 --> 35:46.090
好

35:46.090 --> 35:47.090
写到这吧

35:47.090 --> 35:48.090
这也行

35:48.090 --> 35:50.090
我们这里写上一个counter逐渐

35:50.090 --> 35:51.090
要介绍

35:51.090 --> 35:52.090
以前是不是写过了

35:52.090 --> 35:53.090
对吧

35:53.090 --> 35:54.090
rfc

35:54.090 --> 35:55.090
来吧

35:55.090 --> 35:57.090
有点卡

35:57.090 --> 36:02.040
然后你给我传递一些东西

36:02.040 --> 36:03.040
传递哪些呢

36:03.040 --> 36:04.040
就是number

36:04.040 --> 36:06.040
然后on increase

36:06.040 --> 36:08.040
然后on decrease

36:08.040 --> 36:10.040
跟以前写法是一样的

36:10.040 --> 36:11.040
一样的

36:11.040 --> 36:13.040
然后我们这里显示一个

36:13.040 --> 36:14.040
显示number

36:14.040 --> 36:15.040
显示number

36:15.040 --> 36:18.040
然后这里有两个按钮

36:18.040 --> 36:19.040
button

36:19.040 --> 36:21.040
加

36:21.040 --> 36:27.230
button

36:27.230 --> 36:29.230
然后他们的onclick

36:29.230 --> 36:31.230
等于什么

36:31.230 --> 36:33.230
这个等于on increase

36:33.230 --> 36:34.230
这个呢

36:34.230 --> 36:36.230
这是decrease

36:36.230 --> 36:38.230
on decrease

36:38.230 --> 36:41.230
这个是onclick

36:41.230 --> 36:43.230
on increase

36:43.230 --> 36:44.230
把组件写好

36:44.230 --> 36:46.230
把组件导出

36:46.230 --> 36:49.230
把它connect一下

36:49.230 --> 36:50.230
connect一下

36:50.230 --> 36:52.230
那么connect到哪来呢

36:52.230 --> 36:53.230
来看一下

36:53.230 --> 36:56.670
这个deva的API

36:56.670 --> 36:59.670
connect

36:59.670 --> 37:00.670
这里看不到

37:00.670 --> 37:01.670
这是5米

37:01.670 --> 37:03.670
其实跟之前的deva是一样的

37:03.670 --> 37:05.670
因为它本身就给你安装好了deva

37:05.670 --> 37:07.670
所以说你从deva里面导就完了

37:07.670 --> 37:09.670
本身现在又有deva了

37:09.670 --> 37:10.670
你从deva里面导

37:10.670 --> 37:11.670
这个connect就行了

37:11.670 --> 37:13.670
deva里面不是有给你提供那么一样

37:13.670 --> 37:14.670
对不对

37:14.670 --> 37:15.670
connect

37:15.670 --> 37:16.670
跟以前一样了

37:16.670 --> 37:18.670
来吧

37:18.670 --> 37:20.670
connect

37:20.670 --> 37:23.670
map props to state

37:23.670 --> 37:25.670
map props to state

37:25.670 --> 37:26.670
好

37:26.670 --> 37:28.670
然后这里写上

37:28.670 --> 37:29.670
然后啥

37:29.670 --> 37:31.670
state

37:31.670 --> 37:32.670
好

37:32.670 --> 37:33.670
返回一个对象

37:33.670 --> 37:35.670
对象里面不是有number吗

37:35.670 --> 37:36.670
OK

37:36.670 --> 37:37.670
number来自于哪

37:37.670 --> 37:39.670
来自于state里面的conter

37:39.670 --> 37:40.670
对不对

37:40.670 --> 37:41.670
这个不说了

37:41.670 --> 37:43.670
这个说了很多次了

37:43.670 --> 37:46.670
dispatch to props

37:46.670 --> 37:47.670
这里写错了

37:47.670 --> 37:49.670
名字map state

37:49.670 --> 37:50.670
虽然说名字也不影响啥

37:50.670 --> 37:52.670
但是最好好好命名

37:52.670 --> 37:54.670
dispatch

37:54.670 --> 37:56.670
返回一个

37:56.670 --> 37:57.670
有这么两个要传递

37:57.670 --> 37:58.670
undecrease

37:58.670 --> 38:00.670
是不是要传递一个函数

38:00.670 --> 38:01.670
对吧

38:01.670 --> 38:02.670
要传递这么一个函数

38:02.670 --> 38:03.670
这个函数干嘛

38:03.670 --> 38:04.670
dispatch

38:04.670 --> 38:05.670
一个x

38:05.670 --> 38:06.670
dispatch一个x

38:06.670 --> 38:08.670
type为啥

38:08.670 --> 38:10.670
是不是全局的

38:10.670 --> 38:12.670
全局的就是conter

38:12.670 --> 38:13.670
conter 鞋杠

38:13.670 --> 38:15.670
然后呢

38:15.670 --> 38:16.670
还有什么

38:16.670 --> 38:18.670
就是前面是秘密空间嘛

38:18.670 --> 38:19.670
后边说啥

38:19.670 --> 38:20.670
是不是action的名

38:20.670 --> 38:22.670
就是那个increase的

38:22.670 --> 38:23.670
reducer的名称

38:23.670 --> 38:24.670
对不对

38:24.670 --> 38:26.670
就是action type名称increase

38:26.670 --> 38:27.670
好

38:27.670 --> 38:29.670
然后呢这里写上

38:29.670 --> 38:31.670
undecrease

38:31.670 --> 38:33.670
decrease

38:33.670 --> 38:34.670
好

38:34.670 --> 38:35.670
这里复制一下

38:35.670 --> 38:38.670
这里是unincrease

38:38.670 --> 38:39.670
好

38:39.670 --> 38:41.670
那么这里increase

38:41.670 --> 38:42.670
好

38:42.670 --> 38:43.670
写上这两个

38:43.670 --> 38:44.670
然后呢用con那个是连接一下

38:44.670 --> 38:46.670
map state to props

38:46.670 --> 38:48.670
然后map dispatch

38:48.670 --> 38:49.670
to props

38:49.670 --> 38:50.670
好

38:50.670 --> 38:51.670
最后呢把我们的主件

38:51.670 --> 38:52.670
conter放进来

38:52.670 --> 38:53.670
好

38:53.670 --> 38:54.670
接下来

38:54.670 --> 38:55.670
我们把它写到页面上

38:55.670 --> 38:56.670
页面的conter这些接式里边

38:56.670 --> 38:57.670
我们导入这个主件

38:57.670 --> 38:58.670
import

38:58.670 --> 39:00.670
conter

39:00.670 --> 39:03.050
from

39:05.050 --> 39:07.050
src目标下面的

39:07.050 --> 39:09.050
components

39:09.050 --> 39:11.050
目标下面的conter

39:11.050 --> 39:12.050
好

39:12.050 --> 39:13.050
ok

39:13.050 --> 39:15.050
我们把conter放进来

39:15.050 --> 39:16.050
页面上一般

39:16.050 --> 39:17.050
就是直接写

39:17.050 --> 39:19.050
写什么个主件就完事了

39:19.050 --> 39:20.050
好保存

39:20.050 --> 39:21.050
接下来我们来看

39:21.050 --> 39:22.050
是吧

39:22.050 --> 39:25.620
dispatch is not defend

39:25.620 --> 39:26.620
嗯

39:26.620 --> 39:27.620
我看一下啊

39:27.620 --> 39:28.620
哪里写错了

39:28.620 --> 39:30.620
他说什么

39:30.620 --> 39:32.620
他说

39:32.620 --> 39:34.620
unhandle rejection

39:34.620 --> 39:36.620
dispatch is not defend

39:36.620 --> 39:44.580
他说我们这个dispatch啊

39:44.580 --> 39:48.460
他说没有定义

39:48.460 --> 39:49.460
不至于吧

39:49.460 --> 39:53.420
哦我这里写成等好了啊

39:53.420 --> 39:55.420
应该是有箭头

39:55.420 --> 39:56.420
好

39:56.420 --> 39:57.420
然后我们看一下啊

39:57.420 --> 40:00.420
看一下我们在菜单里面加一个吧

40:00.420 --> 40:02.420
加个菜单

40:02.420 --> 40:04.420
菜单的话来加一下

40:04.420 --> 40:08.690
就是技术器

40:08.690 --> 40:09.690
conter

40:09.690 --> 40:11.690
好保存

40:11.690 --> 40:12.690
技术器

40:12.690 --> 40:13.690
好

40:13.690 --> 40:14.690
这个页面呢

40:14.690 --> 40:15.690
他现在没有显示出来

40:15.690 --> 40:17.690
没有显示出来呢

40:17.690 --> 40:19.690
技术器conter

40:19.690 --> 40:22.690
那么我们的conter页面

40:22.690 --> 40:24.690
为什么没显示出来了

40:24.690 --> 40:25.690
我们在这里写个

40:25.690 --> 40:29.450
se技术器

40:29.450 --> 40:31.450
然后这里刷新

40:31.450 --> 40:33.450
哎啥都没显示

40:33.450 --> 40:34.450
哦这里没导出啊

40:34.450 --> 40:35.450
我运

40:35.450 --> 40:36.450
dispatch default

40:36.450 --> 40:38.450
好保存啊

40:38.450 --> 40:39.450
好加

40:39.450 --> 40:41.450
好这里报错了

40:41.450 --> 40:43.450
然后given to action

40:43.450 --> 40:46.450
说这个出发到这个action counter increase

40:46.450 --> 40:48.450
reduce a counter return

40:48.450 --> 40:49.450
哦我这里

40:49.450 --> 40:51.450
我这里还是要返回啊

40:51.450 --> 40:53.450
我这里都没有返回

40:53.450 --> 40:55.450
这里还是得返回

40:55.450 --> 40:57.450
return state

40:57.450 --> 40:59.450
啊这里return state

40:59.450 --> 41:01.450
还是得返回

41:01.450 --> 41:02.450
连着返回的东西嘛

41:02.450 --> 41:04.450
好技术器加剪

41:04.450 --> 41:05.450
是不是可以了

41:05.450 --> 41:07.450
你看我们是不是写到这种代码

41:07.450 --> 41:08.450
这种代码以前是不是不行的

41:08.450 --> 41:10.450
那么我们看一下这里

41:10.450 --> 41:11.450
状态的每一次变化

41:11.450 --> 41:13.450
你看是不是还是可以跟踪到

41:13.450 --> 41:14.450
对吧

41:14.450 --> 41:15.450
它实际上它最终会转换成为

41:15.450 --> 41:17.450
就是不可辨对象

41:17.450 --> 41:19.450
我们这种负重代码

41:19.450 --> 41:21.450
它会给你忽略掉

41:22.450 --> 41:24.450
不是忽略掉

41:24.450 --> 41:25.450
它会给你进行处理

41:25.450 --> 41:27.450
我就是想说这么一个东西

41:27.450 --> 41:29.450
就是想说它是存在这种操作的

41:29.450 --> 41:31.450
确实是存在这种操作的

41:31.450 --> 41:33.450
但是呢

41:33.450 --> 41:35.450
袁老师

41:35.450 --> 41:37.450
不建议使用

41:37.450 --> 41:39.450
该插件

41:39.450 --> 41:41.450
不建议启用

41:41.450 --> 41:42.450
该插件

41:42.450 --> 41:44.450
因为容易造成混淆

41:44.450 --> 41:46.450
从视觉上容易造成混淆

41:46.450 --> 41:48.450
而且它会跟我们的react里面

41:48.450 --> 41:49.450
set state

41:49.450 --> 41:51.450
所以也容易造成混淆

41:51.450 --> 41:53.450
set state是不是

41:53.450 --> 41:55.450
也不能这样子写对吧

41:55.450 --> 41:57.450
为了也要保持对象不可辨

41:57.450 --> 41:59.450
也不能去随意更改原来的状态

41:59.450 --> 42:02.450
应该用set state重新给它一个新的状态

42:02.450 --> 42:04.450
而不应该更改原来的东西

42:04.450 --> 42:06.450
这是set state 它也具备的特点

42:06.450 --> 42:07.450
因此呢

42:07.450 --> 42:08.450
如果说你用这种写法的话

42:08.450 --> 42:09.450
你单码一写多了

42:09.450 --> 42:10.450
一写习惯了

42:10.450 --> 42:12.450
一很容易就造成错误

42:12.450 --> 42:14.450
所以说不要这样子写

42:14.450 --> 42:15.450
但经常不要这样子写

42:15.450 --> 42:17.450
还是用袁老师以前的那种写法

42:17.450 --> 42:21.210
那么如果说副作用的话

42:21.210 --> 42:22.210
是不是一样的

42:22.210 --> 42:23.210
对吧

42:23.210 --> 42:24.210
没什么好说的都是一样的

42:24.210 --> 42:25.210
reflect

42:25.210 --> 42:27.210
副作用一样的

42:27.210 --> 42:29.210
比方 async increase

42:29.210 --> 42:30.210
这个大概就自己写了

42:30.210 --> 42:31.210
我又不写了

42:31.210 --> 42:32.210
跟之前是完全一样的

42:32.210 --> 42:34.210
那么跟污密结合就是有一个点

42:34.210 --> 42:36.210
第一个就是diva的start

42:36.210 --> 42:37.210
你不用写了

42:37.210 --> 42:39.210
创建diva对象你不用写了

42:39.210 --> 42:41.210
那些就是跟那个启动相关的

42:41.210 --> 42:42.210
所有事情你都不用写了

42:42.210 --> 42:43.210
你不用写了

42:44.210 --> 42:45.210
然后呢

42:45.210 --> 42:46.210
就是说

42:46.210 --> 42:48.210
你想

42:49.210 --> 42:50.210
使用模型的话

42:50.210 --> 42:51.210
他有约定

42:51.210 --> 42:53.210
你必须要放到指定的目录下面

42:53.210 --> 42:54.210
比方说全具模型

42:54.210 --> 42:55.210
放到这个目录下边

42:55.210 --> 42:56.210
局部模型的话

42:56.210 --> 42:58.210
要放到相应的页面

42:58.210 --> 42:59.210
所在的目录下边

42:59.210 --> 43:00.210
对吧

43:00.210 --> 43:01.210
就是这么一些

43:01.210 --> 43:03.210
就这么一些东西

43:03.210 --> 43:04.210
其他都没啥

43:04.210 --> 43:06.210
其他跟diva是完全一样的

43:06.210 --> 43:07.210
好

43:07.210 --> 43:09.210
那么现在的模型也搞定了

43:09.210 --> 43:10.210
也整合进来了

43:10.210 --> 43:12.210
我们现在的做一些效果了

43:12.210 --> 43:14.210
就越来越接近了

43:14.210 --> 43:16.210
但是还有个东西就是样式

43:16.210 --> 43:18.210
一样式那一块还得单独说一下

43:18.210 --> 43:19.210
还得单独说一下

43:19.210 --> 43:20.210
其实东西也不多

43:20.210 --> 43:22.210
咱们相机可来说这个样式

