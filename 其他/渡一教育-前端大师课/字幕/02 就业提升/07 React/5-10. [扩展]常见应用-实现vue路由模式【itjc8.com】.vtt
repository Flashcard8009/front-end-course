WEBVTT

00:00.180 --> 00:08.180
好 这一课呢 会有那么一点难度啊 所以说这一课呢 是一个扩展课程

00:08.180 --> 00:19.180
我每一次上那个rexrotor这一块呢 问到的最多的问题 就是问我袁老师

00:19.180 --> 00:28.180
说你我们之前学了vue vue那个路由呢 挺好用的啊 我们能不能用那个rexrotor

00:28.180 --> 00:34.180
他能不能实现那个vue的那种模式呢 路由模式呢 就是写一个配置文件 对吧 或者是写一个配置对象

00:34.180 --> 00:46.180
哎 这个配置对象里面呢 提供一些配置 然后呢 我在页面上呢 就可以直接用一个特殊的东西来标识 这一块呢 放的是他的紫页面啊 用vue的那种模式

00:46.180 --> 00:54.180
呃 这个东西呢 实际上这样子rexrotor呢 他没有做那么多事情 我之前说啊rexrotor他只是给你提供了一些主见

00:54.180 --> 01:05.180
这些主见呢 你要怎么去玩 全凭你自己 所以说 要说rexrotor能不能实现vue那种路由模式呢 是肯定可以的 不过也没有做结构了 对吧

01:05.180 --> 01:12.180
是肯定可以的 不过呢 你得熟悉带嘛 好 这一块呢 我们就来看一下啊 尽管这个东西呢 我们平时不太会熟悉

01:12.180 --> 01:21.180
所以说他是一个扩展课程啊 但是呢 你会遇到有一些狡兽架 或者是有一些框架啊 他给你搭出来的一个结构呢 就是使用vue来的模式

01:21.180 --> 01:29.180
就是静态配置的模式 因为我们之前说过啊 就是vue那种路由模式呢 他是静态 静态路由

01:29.180 --> 01:39.180
rexrotor 当然vuerotor他也有动态的啊 只是呢 通常情况下我们都使用的是静态路由 他也支持的最好的也是静态路由

01:39.180 --> 01:48.180
rexrotor他是动态路由 因为他是主见 他是在渲染的时候 在渲染这个主见的时候 他决定使用什么样的路由方式

01:49.180 --> 01:58.180
所以他非常的灵活 因此他这种主见模式呢 我们当然可以自己手续代码啊 可以做一些操作啊 把它变成vue那种模式

01:59.180 --> 02:07.180
ok啊 可能有些同学呢 没有学过vue没关系 没关系 我这里就演示一下 我接下来想做成一个什么样子

02:08.180 --> 02:14.180
我希望呢 之后呢 我们的路由呢 比方说啊 我们现在那个要做的效果就是我这里呢 有一个配置文件

02:15.180 --> 02:22.180
这个配置文件里面呢 提供了一个配置啊 比方说roadconfig.js

02:24.180 --> 02:33.180
有一个配置文件 那么这里呢 直接导出export 直接导出一个modern配置 直接导出 导出的是什么东西呢 导出的是一个数组

02:34.180 --> 02:42.180
路由配置是一个数组 就表示的是 我们这里呢 有多少个啊 就是首先是跟路径下面

02:42.180 --> 02:44.180
跟路径下面 就是一开始

02:45.180 --> 02:47.180
怎么说呢 这么结实

02:49.180 --> 03:03.580
就是我们顶级的页面有哪些啊 页面里面可能包含纸页面对吧 顶级的页面有哪些啊 比方说我画个头吗 还是以画头来说明这个问题

03:04.580 --> 03:09.580
比方说我们页面上的顶级的页面啊 比方说顶级的页面可能有这么一些啊 什么

03:10.580 --> 03:24.580
首页啊 什么新闻页啊 新闻页啊 还有什么个人中心 个人中心啊 就是有这么一些顶级的页面 顶级的页面有哪些

03:25.580 --> 03:32.580
而每一个顶级的页面里面 比方说它自己包含了一些东西 对吧 新闻页里面包含了什么热门新闻那些东西

03:33.580 --> 03:40.580
包含一些側边蓝 然后呢 除了这些之外呢 还有一些啊 比方说新闻详情页啊 新闻详情页

03:41.580 --> 03:44.580
对吧 它的纸页面 新闻灯 新闻啊

03:48.580 --> 03:59.580
新闻那个列表页啊 或者是搜索页啊 搜索页 是一个页面啊 个人中心里面有什么修改密码啊 还有什么更改头像啊 还这些都是它的纸页面对吧

03:59.580 --> 04:08.580
纸页面的意思就是说 他有 他们有共同的一些公共区域啊 我们把它放到新闻页里边 然后呢 他们也有自己有差异的地方 就是它的纸页面

04:09.580 --> 04:16.580
我们就按照这样的结构呢 可以写出一个配置出来 怎么来写下这个配置啊 这个书主里面就表示的是什么 表示的是顶级页面

04:17.580 --> 04:20.580
有哪些顶级页面 每一个页面的配置呢 是一个对象

04:21.580 --> 04:29.580
每一个页面的配置是一个对象 这个对象里面包含哪些信息呢 其实包含的信息呢 就是肉彩这个组件的属性

04:30.580 --> 04:41.580
比方说我们这里写个PASS 对吧 写个PASS啊 路径呢比方说啊 比方说这里呢 写个写钢啊 写钢啊 首页啊 首页

04:42.580 --> 04:49.020
这里呢 我们甚至可以写个页面标题对不对 甚至可以写个页面标题啊 首页

04:51.020 --> 04:53.020
对吧 没问题吧 可以写个页面标题嘛

04:56.020 --> 05:05.020
然后它的component 就是它这里边的属性啊 当然这个标题现在目前啊 还没有那个肉彩那个组件是没有标题的 对吧

05:06.020 --> 05:09.020
我们这里就写肉彩那个组件的属性 我们后边来加些自定义的东西

05:10.020 --> 05:16.020
component 组件 组件读取啥 哪个呢 好 咱们这些写一些组件啊 写这么一些组件

05:17.020 --> 05:24.340
这里呢 home.js 这是首页 IBC 这是首页 写这么一些页面啊

05:25.340 --> 05:31.340
然后呢 这里再来一个啊 再来一些news.js 新文页

05:32.340 --> 05:38.340
这里是新文页 这是新文页

05:39.340 --> 05:49.340
新文页里边呢 它又包含了两个 又包含了两个news.search 这些是IBC 这是新闻搜索页

05:50.340 --> 05:52.340
新闻搜索页

05:53.340 --> 06:00.340
然后呢 news home 就是新闻首页 新闻的首页 IBC

06:02.340 --> 06:04.340
这是新闻首页

06:05.340 --> 06:11.340
好 然后再来一个吧 新闻详情页news.detail 就是模拟这种模式啊 这种模式

06:12.340 --> 06:15.340
这里是新闻详情页

06:16.340 --> 06:19.340
好 接下来我要说明我要做什么东西啊 要做什么样子

06:20.340 --> 06:23.340
就是说我们这里有首页 首页和新闻页呢 都是顶级页面

06:24.340 --> 06:28.340
而新闻页下面呢 它除了有那几个字之外 新闻页它一定有这么几个字

06:28.340 --> 06:32.340
比方说 或者说这里有些导航嘛 也行啊 然后有些导航嘛

06:33.340 --> 06:36.340
我们这里写个live元素嘛 有些导航 导航里边呢 有些link

06:40.340 --> 06:44.340
link from rotador

06:45.340 --> 06:50.340
那么这里呢 写上 link to

06:51.340 --> 06:58.340
这里呢 写上啊 我们这里跟那个无右一样嘛 我们这里可以命名啊 命名路由

06:59.340 --> 07:04.340
路由的名称 我们这里呢 to呢就使用路由的名称啊 这里该取个名字

07:05.340 --> 07:10.340
取个名字 这里是表示home 表示首页啊 首页

07:11.340 --> 07:16.340
我们一会写配置嘛 一会写配置 我们这里呢 先把这个link写 link写出来

07:17.340 --> 07:21.340
要先解释一下我要做成什么样子 让大伙听不懂

07:23.340 --> 07:29.340
ok 到这个新闻页里边啊 它有一些链接 比方说新闻首页啊 新闻首页

07:30.340 --> 07:34.340
然后呢 还有一个link啊 有链接 我们一会再写这个to啊 以后再写一个to

07:35.340 --> 07:38.340
新闻首页还有什么 新闻详情页

07:39.340 --> 07:43.340
那详情页一般从列表里边跳转的啊 这里是新闻搜索页

07:44.340 --> 07:51.340
搜索页 那么下面的这个div里边就包含具体的新闻职业面

07:52.340 --> 07:55.340
包含具体的新闻职业面 是这么个意思啊 这么个意思

07:56.340 --> 07:58.340
好 到这边来啊 接下来

07:59.340 --> 08:05.340
pass呢 我们就写下配置啊 我们这里已经搞定了啊 新闻 新闻详情页 新闻搜索页 还有一个新闻首页

08:06.340 --> 08:11.060
是这么一种结构 放小一点啊

08:13.060 --> 08:15.060
还有一个是新闻首页

08:17.060 --> 08:19.060
首页

08:20.060 --> 08:22.060
好 就这样子啊 就这样子

08:24.060 --> 08:31.060
然后呢 我们现在在app里边呢 我们也把这个结构写出来 先把这个结构写出来再说

08:32.060 --> 08:36.060
link 也导入一个link from regsrotor

08:37.060 --> 08:42.060
好 那么这里呢 当然呢 它要导入什么rotor啊 这个没什么好说的

08:42.060 --> 08:43.060
app是rotor

08:45.060 --> 08:47.060
好 然后呢 这里边呢 也有一个

08:48.060 --> 08:50.060
首先用rotor啊 把它包起来

08:52.690 --> 08:57.690
然后这里边呢 也有一个nav元素啊 也有一个nav元素 然后呢 也有link

08:58.690 --> 09:01.690
它里边的link就是首页啊 到首页 然后呢

09:02.690 --> 09:07.690
到哪呢 到那个新闻啊 新闻业啊

09:08.690 --> 09:13.690
这个app的这个组件里边呢 它有两个链接 一个是链接到首页 一个是链接到新闻业

09:14.690 --> 09:17.690
而新闻业呢 以后是不是链接到这个组件 对吧 这个组件里边也有一组超链接

09:18.690 --> 09:22.690
它是在新闻业里边具体的业面 就是下面放的是什么

09:23.690 --> 09:29.690
新闻 匹配新闻业的纸业面

09:30.690 --> 09:33.690
根据不同的路径来显示新闻业的纸业面放到这儿 对吧

09:33.690 --> 09:38.690
好 那么这个app里边呢 下面这个div 它放的是啥呢 就是匹配啊

09:40.690 --> 09:43.690
网站的网站的顶级业面

09:44.690 --> 09:49.690
有这里 这个地方放的是啥 放的是这两个组件 认选其中一个 对吧

09:50.690 --> 09:52.690
要么首页 要么新闻业 对吧 认选其中一个

09:53.690 --> 09:55.690
好 那么这里呢 放的是什么呢 这里呢 放的就是这个

09:56.690 --> 10:00.690
就这些业面的 在新闻业里边具体显示哪一个

10:00.690 --> 10:02.690
懂我这个意思吗 他形成这么一种结构

10:03.690 --> 10:05.690
app里边匹配顶级业面 就匹配这两个这么一个

10:06.690 --> 10:09.690
好 在宣传其中 如果说匹配的是新闻业 在宣传新闻业的时候

10:10.690 --> 10:14.690
在宣传这个业面的时候 他这个位置呢 又匹配新闻业的纸业面 对吧

10:15.690 --> 10:18.690
是这么个意思啊 那么按照VU的做法是怎么做的呢

10:19.690 --> 10:22.690
它是把这个业面的结构啊 放了一个配置文件里边

10:23.690 --> 10:25.690
它是放了一个配置文件里边的 放到这儿的

10:26.690 --> 10:28.690
咱们按下来啊 不着急 按下来 放到这儿的

10:29.690 --> 10:32.690
好 那么这里呢 Component 那么它的主键就是

10:33.690 --> 10:35.690
一个路径对应的主键 对吧 它这里相当于就是Rose的属性

10:36.690 --> 10:40.690
Rose主键的属性 这里呢 我们导入这个主键 把主键乱七八糟的导入进来

10:41.690 --> 10:43.690
什么 Home啊 怎么点

10:45.690 --> 10:47.690
Home 对吧 把主键导入进来啊 乱七八糟的

10:48.690 --> 10:50.690
什么 那个 News

10:53.690 --> 10:55.690
那用 VU的话是不是也要导入 对吧 这个跑不了的

10:56.690 --> 10:59.690
Detail 还有什么 就是 News Search

11:01.690 --> 11:05.690
把主键导入进来 好 当匹配这个地址的时候呢 我们选了哪个主键呢

11:06.690 --> 11:08.690
选了主键是 选了主键是这个 Home

11:09.690 --> 11:11.690
Home这个主键 是这么个意思

11:13.690 --> 11:15.690
然后呢 都好

11:17.690 --> 11:20.690
下面这个 当我们请求这个地址的时候

11:21.690 --> 11:23.690
News 选了主键是 Component

11:24.690 --> 11:26.690
是什么主键呢 是 News这个主键

11:27.690 --> 11:30.690
但是除了这个主键之外 它还有个 Tool

11:31.690 --> 11:33.690
VU不就是这样配置的吗 对吧 还有个 Tool

11:34.690 --> 11:38.690
是不是又是个数组 表示这个主键呢 这个页面呢 它有纸页面

11:39.690 --> 11:42.690
新闻页它是有纸页面的 我们先把这个结构呢 放到配置文件里边

11:43.690 --> 11:47.690
有纸页面 纸页面是什么呢 每个纸页面是不是又是一个配置 对吧

11:48.690 --> 11:51.690
那么这个配置呢 这个配置呢 就是根据附入进来的

11:52.690 --> 11:54.690
又接着附入进写 比方说

11:55.690 --> 11:57.690
Detail 还有一个 News Home

11:58.690 --> 11:59.690
还有一个 News Home

12:03.470 --> 12:04.470
首先是 News Home

12:05.470 --> 12:06.470
News Home

12:07.470 --> 12:08.470
Component

12:09.470 --> 12:10.470
什么呢

12:11.470 --> 12:12.470
News Home

12:13.470 --> 12:16.470
这是新闻的首页 对吧 新闻的首页

12:17.470 --> 12:18.470
然后呢 还有什么呢

12:18.470 --> 12:19.470
Pass

12:20.470 --> 12:22.470
然后写杠 Detail

12:23.470 --> 12:24.470
那么这个匹配的是什么呢

12:25.470 --> 12:27.470
这个匹配的是 News Detail

12:28.470 --> 12:29.470
匹配的是 News Detail

12:30.470 --> 12:32.470
然后呢 再来一个 Pass

12:33.470 --> 12:35.470
写杠 Search

12:36.470 --> 12:37.470
Search

12:38.470 --> 12:39.470
这个匹配的是什么呢

12:40.470 --> 12:43.470
Component 匹配的是 News Search

12:44.470 --> 12:46.470
那么当然呢 这些我们都可以把它写成

12:46.470 --> 12:47.470
一个 Zax 精确匹配

12:48.470 --> 12:50.470
不然的话 它上面这个始终匹配任何东西 对吧

12:51.470 --> 12:52.470
始终要匹配任何东西

12:53.470 --> 12:54.470
所以我们这里把它写成精确匹配 一个 Zax

12:55.470 --> 12:56.470
一个 Zax

12:57.470 --> 12:58.470
V2

12:59.470 --> 13:00.470
这里写上

13:01.470 --> 13:04.040
写上

13:04.040 --> 13:05.040
精确匹配

13:05.040 --> 13:07.040
因为Wyou里边比就是精确匹配嘛 对不对

13:08.040 --> 13:09.040
把它写成精确匹配

13:10.040 --> 13:12.040
当然呢 如果你也可以通过我们的操作

13:13.040 --> 13:15.040
把它默认变成精确匹配 也行

13:16.040 --> 13:17.040
我们后面再玩这个事情吧

13:18.040 --> 13:19.040
我们先把这个结构写出来

13:20.040 --> 13:21.040
能看懂吗 这个结构

13:21.040 --> 13:22.040
表示我们顶级页面是不是有两个

13:23.040 --> 13:24.040
一个页面 两个页面

13:25.040 --> 13:26.040
第二个顶级页面就是新闻页里边了

13:27.040 --> 13:29.040
它有一些纸页面 把这个结构给它写出来

13:30.040 --> 13:33.040
写出这个结构过后呢 在Wyou里边是怎么操作的

13:34.040 --> 13:35.040
在 App 里边

13:36.040 --> 13:37.040
Wyou里边它不是有一个组件

13:38.040 --> 13:39.040
就是组件叫做

13:40.040 --> 13:41.040
叫什么呢

13:41.040 --> 13:43.040
Wyou里边的组件叫做 RotorWyou 对吧

13:44.040 --> 13:45.040
所以有这个组件在Wyou里边

13:46.040 --> 13:47.040
但是没学过Wyou 没关系

13:48.040 --> 13:49.040
我们没有这个组件 对吧

13:50.040 --> 13:52.040
不过呢 我们可以做一个类似的东西出来

13:53.040 --> 13:54.040
可以做一个类似的东西出来

13:55.040 --> 13:56.040
我打算做成一个什么样子的

13:57.040 --> 13:58.040
我打算做成这么一个样子

13:59.040 --> 14:00.040
比方说我这里做一个组件

14:01.040 --> 14:02.040
叫做Root

14:03.040 --> 14:05.610
Root

14:06.610 --> 14:07.610
就是跟路由

14:08.610 --> 14:09.610
跟路由

14:10.610 --> 14:11.610
或者叫Root Rotor

14:12.610 --> 14:13.610
或者叫Root Rotor

14:14.610 --> 14:15.610
那么这个组件里边

14:16.610 --> 14:17.610
我们这样子来写

14:18.610 --> 14:19.610
我们这里写上一个组件

14:20.610 --> 14:21.610
Root Rotor

14:21.610 --> 14:22.610
现在啥都不写

14:22.610 --> 14:23.610
啥都不着急写

14:23.610 --> 14:24.610
我希望最终的效果是这样子

14:25.610 --> 14:27.610
我到时候用这个 App 这个组件的时候

14:27.610 --> 14:28.610
我把 Rotor 加上

14:29.610 --> 14:31.610
要加什么超链接的地方

14:31.610 --> 14:32.610
就加超链接 这个无所谓

14:33.610 --> 14:35.610
然后我们匹配页面的时候

14:35.610 --> 14:36.610
就在最顶级的地方

14:37.610 --> 14:38.610
对顶级的页面这里

14:39.610 --> 14:40.610
写上一个啥呢

14:40.610 --> 14:41.610
把这个组件导入起来

14:42.610 --> 14:43.610
写上一个

14:44.610 --> 14:46.610
Root Rotor

14:47.610 --> 14:48.610
Root Rotor

14:50.610 --> 14:52.610
我们只需要在顶级的地方

14:53.610 --> 14:54.610
写上这么一个玩意就行了

14:54.610 --> 14:55.610
其他啥都不用管

14:56.610 --> 14:57.610
啥都不用管

14:57.610 --> 14:59.610
我在顶级的地方写上这个玩意

15:00.610 --> 15:01.610
那么后边的页面

15:01.610 --> 15:02.610
它会自动进行匹配

15:03.610 --> 15:04.610
那么后边的页面

15:04.610 --> 15:05.610
它就会根据

15:05.610 --> 15:06.610
那么这个组件

15:06.610 --> 15:07.610
它就会根据路由配置

15:07.610 --> 15:09.610
根据Root Config

15:10.610 --> 15:11.610
路由配置

15:11.610 --> 15:13.610
来进行渲染不同的

15:13.610 --> 15:14.610
渲染不同的组件在这

15:15.610 --> 15:16.610
这个组件

15:17.610 --> 15:19.610
它会把顶级页面

15:19.610 --> 15:20.610
选择到这个位置

15:20.610 --> 15:21.610
把它选择到这个位置

15:22.610 --> 15:23.610
在选择到顶级页面

15:23.610 --> 15:24.610
在选择到新闻页面的时候

15:25.610 --> 15:26.610
新闻页面的纸页面

15:27.610 --> 15:28.610
这不是新闻页面的纸页面吗

15:29.610 --> 15:30.610
后续的纸页面

15:30.610 --> 15:31.610
全部使用这种方式

15:32.610 --> 15:34.610
全部使用这种方式

15:35.610 --> 15:36.610
来得到纸页面

15:36.610 --> 15:37.610
就是这里

15:38.610 --> 15:39.610
就是Props

15:40.610 --> 15:41.610
就是这个地方

15:42.610 --> 15:43.610
Props

15:45.610 --> 15:46.610
全部使用Props

15:47.610 --> 15:48.610
来把纸页面放到这

15:49.610 --> 15:50.610
表示这个地方

15:50.610 --> 15:51.610
显示的是新闻页的纸页面

15:52.610 --> 15:54.610
那如果说新闻详情页面

15:54.610 --> 15:55.610
里边还有纸页面

15:55.610 --> 15:56.610
比方说新闻详情页面

15:56.610 --> 15:57.610
后面还有纸页面

15:57.610 --> 15:58.610
没关系

15:58.610 --> 15:59.610
那你在这里

15:59.610 --> 16:00.610
在适当的位置

16:00.610 --> 16:01.610
要显示纸页面的位置

16:01.610 --> 16:02.610
写上Props

16:04.610 --> 16:06.610
只需要在App里边

16:06.610 --> 16:07.610
我们写上Root Rotor

16:07.610 --> 16:08.610
剩下的事情

16:08.610 --> 16:09.610
就啥都不用管了

16:09.610 --> 16:10.610
你把顶级页面

16:10.610 --> 16:11.610
放到这个位置

16:11.610 --> 16:12.610
那么剩下的页面

16:13.610 --> 16:14.610
非顶级的页面

16:14.610 --> 16:15.610
我们只需要用

16:17.610 --> 16:18.610
只需要用这个修修修

16:18.610 --> 16:19.610
就可以搞定

16:19.610 --> 16:20.610
咱们希望

16:20.610 --> 16:22.610
能够达成这么一个效果

16:23.610 --> 16:24.610
这就是我们这几刻

16:24.610 --> 16:25.610
要做的事情

16:25.610 --> 16:26.610
首先要理解我们要干嘛

16:26.610 --> 16:27.610
要干嘛

16:27.610 --> 16:29.610
就是说我写了一个配置文件

16:29.610 --> 16:30.610
这个配置文件

16:30.610 --> 16:31.610
你看得懂吗

16:31.610 --> 16:32.610
没问题吧

16:32.610 --> 16:33.610
就是把我们要做的

16:33.610 --> 16:34.610
就是页面成绩结构

16:34.610 --> 16:35.610
给它配置好

16:36.610 --> 16:37.610
页面的成绩结构

16:37.610 --> 16:38.610
给它配置好

16:38.610 --> 16:39.610
那么按照结构结构

16:39.610 --> 16:40.610
我们就可以在

16:40.610 --> 16:41.610
顶级的App主件里边

16:41.610 --> 16:42.610
把顶级页面

16:42.610 --> 16:44.610
放到一个适当的位置

16:44.610 --> 16:45.610
当一不一定的App主件里边

16:45.610 --> 16:47.610
不要再分化一个主件也可以

16:47.610 --> 16:49.610
总之把顶级页面放到这里

16:49.610 --> 16:50.610
那么这个主件

16:50.610 --> 16:52.610
它就会自动去匹配顶级页面

16:52.610 --> 16:53.610
然后把顶级页面

16:53.610 --> 16:55.610
渲染到这个位置

16:55.610 --> 16:57.610
在渲染顶级页面的过程中

16:57.610 --> 16:58.610
是不是有可能会遇到指页面

16:58.610 --> 17:00.610
比方说这个顶级页面

17:00.610 --> 17:01.610
它又可以遇到指页面

17:01.610 --> 17:03.610
遇到指页面的时候

17:03.610 --> 17:04.610
指页面放到什么位置

17:04.610 --> 17:06.610
就是按照这个配置里边

17:06.610 --> 17:07.610
指页面的放到什么位置

17:07.610 --> 17:09.610
那么使用ProsCut

17:09.610 --> 17:10.610
来进行安放

17:11.610 --> 17:12.610
那么如果它的指页面里边

17:12.610 --> 17:13.610
还有指页面

17:13.610 --> 17:15.610
没关系继续使用ProsCut

17:15.610 --> 17:16.610
来进行安放

17:17.610 --> 17:19.610
这就是咱们要做的事情

17:20.610 --> 17:22.610
当然目前看不到任何效果

17:22.610 --> 17:23.610
目前看不到任何效果

17:23.610 --> 17:24.610
现在点了一场用了

17:24.610 --> 17:25.610
没它用

17:25.610 --> 17:26.610
因为这里连超年级都没有

17:26.610 --> 17:28.610
我都没有写的个什么

17:28.610 --> 17:30.610
都没有写Rift属性

17:30.610 --> 17:31.610
都没有写Rift属性

17:31.610 --> 17:32.610
没有写2属性

17:33.610 --> 17:34.610
所以说现在看不出来

17:34.610 --> 17:35.610
看不出来任何效果

17:35.610 --> 17:37.610
为了给一点距离

17:37.610 --> 17:38.610
为了给一点距离

17:38.610 --> 17:39.610
我这里加上一个空格

17:40.610 --> 17:41.610
不要笑我

17:43.980 --> 17:44.980
哪能去写样式

17:44.980 --> 17:45.980
我哪能去写样式

17:46.980 --> 17:47.980
加上一点空格

17:47.980 --> 17:48.980
当然不能这样子写

17:49.980 --> 17:50.980
公司里边这样子写

17:50.980 --> 17:51.980
说是我腰的

17:51.980 --> 17:52.980
我要打死人

17:54.980 --> 17:55.980
这里不行

17:55.980 --> 17:56.980
它会编码

17:56.980 --> 17:57.980
它会编码

17:57.980 --> 17:58.980
还不允许你这样子写

18:00.980 --> 18:01.980
我把它没法了

18:02.980 --> 18:03.980
我哪能去写样式

18:03.980 --> 18:04.980
将就看

18:06.980 --> 18:07.980
确实不允许这样子写

18:07.980 --> 18:08.980
我之前说过

18:08.980 --> 18:10.980
这里边内容是要进行

18:10.980 --> 18:11.980
要进行研码

18:12.980 --> 18:13.980
不能这样子写

18:13.980 --> 18:15.980
找到那个什么lews

18:15.980 --> 18:16.980
把它去掉

18:16.980 --> 18:17.980
不能这样子写

18:18.980 --> 18:19.980
好了

18:19.980 --> 18:21.980
咱们就来关键点在啥呢

18:21.980 --> 18:23.980
关键点是不是在这

18:23.980 --> 18:24.980
实现这个组件

18:24.980 --> 18:25.980
对不对

18:26.980 --> 18:27.980
那么我再重申一下

18:27.980 --> 18:28.980
这个组件要干嘛

18:29.980 --> 18:31.980
刚才我们说了要干嘛

18:31.980 --> 18:33.980
是不是渲染顶级页面

18:33.980 --> 18:34.980
对不对

18:34.980 --> 18:35.980
好这个组件的作用

18:35.980 --> 18:36.980
就这么简单

18:36.980 --> 18:37.980
渲染啥

18:38.980 --> 18:39.980
渲染啥

18:39.980 --> 18:42.980
这个组件渲染顶级页面

18:44.980 --> 18:47.980
就是使用肉彻组件

18:47.980 --> 18:48.980
对吧

18:48.980 --> 18:51.980
根据不同的路径

18:52.980 --> 18:54.980
渲染顶级页面

18:54.980 --> 18:55.980
对不对

18:55.980 --> 18:57.980
它要做的就是这件事

18:57.980 --> 18:59.980
所以说它本身

18:59.980 --> 19:00.980
它是不带什么DHV

19:00.980 --> 19:02.980
不带这些元素的

19:02.980 --> 19:03.980
它返回啥

19:03.980 --> 19:05.980
它这里返回啥呢

19:05.980 --> 19:07.980
返回的就是一组肉

19:07.980 --> 19:09.980
返回的就是一组肉

19:10.980 --> 19:14.980
返回的就是一组肉

19:14.980 --> 19:15.980
对吧

19:15.980 --> 19:16.980
如果说我们手写

19:16.980 --> 19:18.980
不用自动获取

19:18.980 --> 19:20.980
不同配置文件里面自动获取的话

19:20.980 --> 19:21.980
如果我们手写的话怎么写

19:22.980 --> 19:23.980
看着

19:23.980 --> 19:25.980
手写的话会怎么写的

19:25.980 --> 19:26.980
我们这里

19:27.980 --> 19:28.980
肉

19:28.980 --> 19:33.190
当然这不是唯一的做法

19:33.190 --> 19:35.190
这不是唯一的做法

19:35.190 --> 19:36.190
当然这里

19:36.190 --> 19:37.190
我们这里可做法

19:37.190 --> 19:39.190
只是给大家开辟一种思路

19:39.190 --> 19:40.190
就是说

19:40.190 --> 19:42.190
Rex Rotor是非常灵活的

19:42.190 --> 19:43.190
它可以各种各样的处理

19:43.190 --> 19:45.190
比方说我们这里手写怎么写

19:45.190 --> 19:47.190
就是一个Rotor对吧

19:47.190 --> 19:49.190
Pass为啥

19:49.190 --> 19:51.190
对着那个就是配置写

19:51.190 --> 19:52.190
Pass为啥

19:52.190 --> 19:53.190
是不是一个写杠

19:54.190 --> 19:55.190
Pass是不等于一个

19:55.190 --> 19:56.190
等于一个写杠

19:56.190 --> 19:57.190
对不对

19:57.190 --> 19:58.190
一个ZX

19:58.190 --> 19:59.190
对不对

19:59.190 --> 20:00.190
这个属性让给它写上

20:00.190 --> 20:02.190
Component

20:02.190 --> 20:04.190
Component

20:04.190 --> 20:05.190
Component

20:05.190 --> 20:06.190
等于Home

20:06.190 --> 20:07.190
对不对

20:07.190 --> 20:08.190
是不是这样子

20:08.190 --> 20:09.190
对吧

20:09.190 --> 20:10.190
然后这是一个

20:10.190 --> 20:12.190
然后是不是再写一个

20:12.190 --> 20:13.190
再写一个

20:13.190 --> 20:15.190
第二个Pass

20:15.190 --> 20:17.190
等于什么News

20:18.190 --> 20:19.190
News对吧

20:19.190 --> 20:20.190
是不是这个意思

20:21.190 --> 20:22.190
如果手写的话

20:22.190 --> 20:23.190
这个主页是不是就返回这个东西

20:23.190 --> 20:24.190
是不是就匹配顶级一面了

20:24.190 --> 20:26.190
那么就相当于是把这个东西扔到哪了

20:26.190 --> 20:29.190
是不是扔到App里边到这个位置了

20:29.190 --> 20:30.190
对吧

20:30.190 --> 20:31.190
就扔到这个位置了

20:31.190 --> 20:32.190
我们先不管职业面

20:32.190 --> 20:33.190
先不管职业面

20:33.190 --> 20:34.190
是不是扔到这个位置了

20:34.190 --> 20:35.190
对吧

20:35.190 --> 20:36.190
那就这么简单

20:36.190 --> 20:37.190
没啥

20:37.190 --> 20:38.190
没有什么复杂的

20:38.190 --> 20:39.190
就这么简单

20:39.190 --> 20:41.190
那么我们这里可以利用一个函数

20:41.190 --> 20:42.190
来帮我们生成

20:42.190 --> 20:44.190
那么这个玩意是不是就是一个数组

20:44.190 --> 20:45.190
对吧

20:45.190 --> 20:46.190
你给我返回一个数组

20:46.190 --> 20:48.190
那么我们可以利用一个元素

20:48.190 --> 20:49.190
利用一个函数

20:49.190 --> 20:51.190
来帮我们生成这个东西

20:51.190 --> 20:52.190
好

20:52.190 --> 20:53.190
用什么函数呢

20:53.190 --> 20:55.190
写个函数

20:55.190 --> 20:57.190
这个函数的名字

20:57.190 --> 20:59.190
这个函数的名字叫做啥呢

20:59.190 --> 21:01.190
叫做

21:01.190 --> 21:02.190
get

21:02.190 --> 21:04.190
road

21:04.190 --> 21:05.190
小心

21:05.190 --> 21:06.190
get

21:06.190 --> 21:07.190
road

21:07.190 --> 21:08.190
就这个函数

21:08.190 --> 21:11.190
这个函数里给我传一个数组进来

21:11.190 --> 21:13.190
就是road

21:13.190 --> 21:15.190
传一个road数组进来

21:15.190 --> 21:17.190
那么到时候我这里就直接调用那个函数

21:17.190 --> 21:18.190
就完事了

21:18.190 --> 21:19.190
这里直接调用那个函数

21:19.190 --> 21:21.190
get road

21:21.190 --> 21:22.190
把什么传进来

21:22.190 --> 21:23.190
把什么传进去

21:23.190 --> 21:24.190
把那个roadconfig

21:24.190 --> 21:25.190
它不就是个数组吗

21:25.190 --> 21:26.190
对不对

21:26.190 --> 21:27.190
把这个数组给它

21:27.190 --> 21:28.190
那么它就会循环数组

21:28.190 --> 21:30.190
把这个数组里面的每一个组件

21:30.190 --> 21:32.190
生成一个road元素

21:32.190 --> 21:34.190
返回

21:34.190 --> 21:35.190
所以我们这里

21:35.190 --> 21:36.190
导入

21:36.190 --> 21:38.190
report

21:38.190 --> 21:40.190
roadconfig

21:40.190 --> 21:41.190
front

21:41.190 --> 21:42.190
第二鞋杠

21:42.190 --> 21:43.190
roadconfig

21:43.190 --> 21:44.190
那么这里呢

21:44.190 --> 21:45.190
我们直接把这个roadconfig

21:45.190 --> 21:46.190
给它就行了

21:46.190 --> 21:47.190
对吧

21:47.190 --> 21:48.190
那么这里呢

21:48.190 --> 21:49.190
它就是

21:49.190 --> 21:51.190
根据

21:51.190 --> 21:55.190
一个路由配置数组

21:55.190 --> 21:57.190
数组

21:57.190 --> 22:00.190
便利该数组

22:00.190 --> 22:02.190
便利该数组

22:03.190 --> 22:05.190
一组road

22:05.190 --> 22:07.190
得到一组roadconfig

22:07.190 --> 22:08.190
对不对

22:08.190 --> 22:09.190
我就返回这么东西

22:09.190 --> 22:11.190
所以说我这里返回的是啥呢

22:11.190 --> 22:14.190
直接返回roadconfig里面

22:14.190 --> 22:15.190
直接用map

22:15.190 --> 22:16.190
它不就是个数组吗

22:16.190 --> 22:17.190
对不对

22:17.190 --> 22:18.190
直接用map

22:18.190 --> 22:20.190
每一个是不是就是一个roadconfig

22:20.190 --> 22:21.190
roadconfig配置

22:21.190 --> 22:22.190
对吧

22:22.190 --> 22:23.190
每一个就是个roadconfig配置

22:23.190 --> 22:24.190
你看一下

22:24.190 --> 22:25.190
循环每一个数组

22:25.190 --> 22:26.190
是不是得到一个这样的一个对象

22:26.190 --> 22:27.190
对吧

22:27.190 --> 22:28.190
对象里面所有属性

22:28.190 --> 22:30.190
是不是就是roadconfig的属性

22:31.190 --> 22:32.190
map过后

22:32.190 --> 22:34.190
每一个得到一个啥呢

22:36.190 --> 22:39.190
每一个得到一个roadconfig

22:39.190 --> 22:40.190
对不对

22:41.190 --> 22:42.190
那么这里呢

22:42.190 --> 22:43.190
有的是数组

22:43.190 --> 22:44.190
肯定要给key

22:44.190 --> 22:45.190
key的话我们就用啥呢

22:45.190 --> 22:47.190
key的话我们用啥比较好

22:47.190 --> 22:48.190
用那个吧

22:48.190 --> 22:49.190
用pass也不太合适

22:49.190 --> 22:50.190
因为下面的路径

22:50.190 --> 22:51.190
它也有重复的

22:51.190 --> 22:52.190
像这种重复的

22:52.190 --> 22:54.190
用什么比较好了

22:54.190 --> 22:56.190
我们用这个i

22:56.190 --> 22:58.190
数组里面的i

22:59.190 --> 23:00.190
来作为它的

23:00.190 --> 23:01.190
作为它的key

23:01.190 --> 23:03.190
因为它是静态配置

23:03.190 --> 23:05.190
它的数组也不会发生动态的变化

23:05.190 --> 23:07.190
我们直接用i来作为它的key

23:07.190 --> 23:08.190
好

23:08.190 --> 23:10.190
剩下的属性是不是直接展开

23:10.190 --> 23:12.190
展开这个

23:12.190 --> 23:13.190
rt对象

23:13.190 --> 23:14.190
对不对

23:14.190 --> 23:15.190
展开这个rt对象

23:15.190 --> 23:16.190
但是注意

23:16.190 --> 23:18.190
这个q准是不能要的

23:18.190 --> 23:19.190
如果遇到了q准

23:19.190 --> 23:20.190
这个q准属性不能要的

23:20.190 --> 23:21.190
也就是现在我们不

23:21.190 --> 23:23.190
不考虑什么生存次的循环

23:23.190 --> 23:25.190
只循环你给它的数组

23:25.190 --> 23:26.190
你给我这个数组

23:26.190 --> 23:27.190
我就循环两次

23:27.190 --> 23:28.190
第一个路由

23:28.190 --> 23:29.190
第二个路由

23:29.190 --> 23:30.190
然后q准看都不用看

23:30.190 --> 23:31.190
看都不想看它

23:31.190 --> 23:33.190
我甚至把q准注释掉

23:33.190 --> 23:35.190
看到哪个去看它

23:35.190 --> 23:36.190
就两个路由

23:36.190 --> 23:37.190
对吧

23:37.190 --> 23:38.190
就两个路由

23:38.190 --> 23:39.190
但是我要把q准属性去掉

23:39.190 --> 23:40.190
不能要q准属性

23:40.190 --> 23:41.190
因为q准属性

23:41.190 --> 23:44.190
你如果传给了r

23:44.190 --> 23:45.190
我们之前说过

23:45.190 --> 23:46.190
无论匹配

23:46.190 --> 23:47.190
是不是都要

23:47.190 --> 23:49.190
无论是否匹配

23:49.190 --> 23:52.190
是不是都要

23:52.190 --> 23:54.190
运行q准

23:54.190 --> 23:55.190
都要得到q准

23:55.190 --> 23:57.190
所以q准属性是不能给这个路由

23:57.190 --> 23:59.190
因此我们要把q准属性

23:59.190 --> 24:00.190
提除出去

24:00.190 --> 24:01.190
提除出去

24:01.190 --> 24:02.190
来吧

24:02.190 --> 24:03.190
我们这里

24:03.190 --> 24:04.190
还顺位打过号

24:07.190 --> 24:08.190
有条

24:08.190 --> 24:09.190
刚才得到这个东西

24:09.190 --> 24:12.190
但是q准属性得提除出去

24:12.190 --> 24:13.190
我们这里

24:13.190 --> 24:14.190
用concept来解构

24:14.190 --> 24:16.190
解构RT对象

24:16.190 --> 24:17.190
RT对象里面

24:17.190 --> 24:19.190
我们把q准该解构出来

24:19.190 --> 24:21.190
q准该解构出来

24:21.190 --> 24:22.190
然后

24:22.190 --> 24:23.190
还有什么

24:23.190 --> 24:25.190
还要去剩下的属性

24:25.190 --> 24:26.190
rest

24:26.190 --> 24:27.190
我们这里

24:27.190 --> 24:28.190
只展开rest的属性

24:28.190 --> 24:30.190
q准属性就不要给它了

24:30.190 --> 24:31.190
就这么个意思

24:31.190 --> 24:33.190
q准属性我们一会单独处理

24:33.190 --> 24:34.190
那就完了

24:34.190 --> 24:35.190
对不对

24:35.190 --> 24:36.190
那就完了

24:36.190 --> 24:37.190
你看这样子的话

24:37.190 --> 24:38.190
里面的什么

24:38.190 --> 24:39.190
pass是不是给它了

24:39.190 --> 24:41.190
exact属性是不是给它了

24:41.190 --> 24:42.190
component属性是不是给它了

24:42.190 --> 24:43.190
对吧

24:43.190 --> 24:44.190
这样子是不是就匹配到了

24:44.190 --> 24:45.190
顶级路由了

24:47.190 --> 24:48.190
这样子是不是就匹配到了

24:48.190 --> 24:49.190
顶级路由了

24:49.190 --> 24:51.190
没问题吧

24:51.190 --> 24:53.190
那么这里就得到了一个

24:53.190 --> 24:54.190
RT的数组

24:54.190 --> 24:55.190
是不是把一个

24:55.190 --> 24:56.190
RT的数组放这儿了

24:56.190 --> 24:57.190
对不对

24:57.190 --> 24:58.190
那么这里

24:58.190 --> 24:59.190
就把RT的数组返回

24:59.190 --> 25:00.190
就完事了

25:00.190 --> 25:01.190
就完事了

25:01.190 --> 25:02.190
好

25:02.190 --> 25:03.190
保存看一下

25:03.190 --> 25:04.190
咱们来看一下

25:05.190 --> 25:06.190
那么现在

25:06.190 --> 25:07.190
我们给它加上两个超链接

25:07.190 --> 25:08.190
我们先不考虑怎么

25:08.190 --> 25:10.190
超链接路由命名的问题

25:10.190 --> 25:11.190
我们后边再说

25:11.190 --> 25:12.190
慢慢来做

25:12.190 --> 25:14.190
但我也不会把它做得过于完成

25:14.190 --> 25:16.190
做成跟物有完全一样

25:16.190 --> 25:17.190
也不太可能

25:17.190 --> 25:18.190
不说不太可能

25:18.190 --> 25:20.190
也没有那么多时间

25:20.190 --> 25:21.190
是给大家举这么个例子

25:21.190 --> 25:22.190
平时开发中

25:22.190 --> 25:23.190
我们不会太

25:23.190 --> 25:24.190
不太会这样做

25:24.190 --> 25:25.190
只是我告诉大家

25:25.190 --> 25:26.190
通过这个例子

25:26.190 --> 25:27.190
告诉大家

25:27.190 --> 25:28.190
RT是非常灵活的

25:28.190 --> 25:29.190
好

25:29.190 --> 25:30.190
首页这里访问到

25:30.190 --> 25:31.190
新闻业

25:31.190 --> 25:32.190
news

25:32.190 --> 25:33.190
好看一下

25:33.190 --> 25:34.190
看一下能不能访问过去

25:34.190 --> 25:35.190
现在显示了首页

25:35.190 --> 25:36.190
看到没

25:36.190 --> 25:37.190
说显示出来了

25:37.190 --> 25:38.190
点击新闻业

25:38.190 --> 25:39.190
说显示到新闻业了

25:39.190 --> 25:40.190
对不对

25:40.190 --> 25:42.190
没问题吧

25:42.190 --> 25:43.190
就没问题

25:43.190 --> 25:44.190
没问题

25:44.190 --> 25:45.190
我的天啊

25:45.190 --> 25:46.190
这个

25:46.190 --> 25:47.190
我还是设置一下样式

25:47.190 --> 25:48.190
好吧

25:48.190 --> 25:49.190
我还是设置一下样式

25:49.190 --> 25:52.190
f.css

25:52.190 --> 25:53.190
这里呢

25:53.190 --> 25:54.190
找到A元数

25:54.190 --> 25:55.190
A元数

25:55.190 --> 25:56.190
display

25:56.190 --> 25:57.190
inline block

25:57.190 --> 25:59.190
或者不用inline block

25:59.190 --> 26:00.190
就margin

26:00.190 --> 26:01.190
margin

26:01.190 --> 26:02.190
margin

26:02.190 --> 26:03.190
20个相处

26:03.190 --> 26:04.190
就水面写一个

26:04.190 --> 26:05.190
水面写一个

26:05.190 --> 26:06.190
下写一个

26:06.190 --> 26:07.190
import

26:07.190 --> 26:10.500
f.css

26:11.500 --> 26:12.500
保存

26:13.500 --> 26:16.500
我的央视为什么没有

26:16.500 --> 26:17.500
声效

26:17.500 --> 26:19.500
我的央视呢

26:19.500 --> 26:21.500
我的央视是哪去了

26:21.500 --> 26:23.500
再出来了

26:23.500 --> 26:25.500
上下的margin无效

26:25.500 --> 26:28.500
还是用display inline block

26:28.500 --> 26:30.500
有什么意思就行了

26:30.500 --> 26:31.500
首页

26:31.500 --> 26:32.500
新闻业

26:32.500 --> 26:33.500
首页新闻业

26:33.500 --> 26:34.500
看到没

26:34.500 --> 26:37.500
所以就可以打到顶级页面切换了

26:37.500 --> 26:38.500
对不对

26:38.500 --> 26:39.500
打到顶级页面切换了

26:39.500 --> 26:40.500
对吧

26:40.500 --> 26:42.500
好

26:42.500 --> 26:45.500
现在打到了顶级页面的切换

26:45.500 --> 26:46.500
切换

26:46.500 --> 26:47.500
但是目前

26:47.500 --> 26:48.500
我们没有使用switch

26:48.500 --> 26:49.500
对不对

26:49.500 --> 26:50.500
没有使用switch

26:50.500 --> 26:52.500
那么有可能会导致这种情况

26:52.500 --> 26:54.500
实际上在vio里边

26:54.500 --> 26:56.500
你可以认为他就使用了switch的

26:56.500 --> 26:58.500
就匹配到一个就不再继续往下匹配了

26:58.500 --> 26:59.500
也就是说

26:59.500 --> 27:00.500
如果说他没有写

27:00.500 --> 27:01.500
那个一个

27:01.500 --> 27:03.500
他没这里没有写一个zx的话

27:03.500 --> 27:04.500
就会导致一个结果

27:05.500 --> 27:06.500
不说这里

27:06.500 --> 27:07.500
不说这里

27:07.500 --> 27:09.500
就说如果说

27:10.500 --> 27:11.500
怎么个意思呢

27:11.500 --> 27:13.500
如果说这个东西写前面

27:15.500 --> 27:16.500
如果说这个东西写前面

27:18.500 --> 27:21.500
我这里又没有写一个zx等于2

27:21.500 --> 27:22.500
又没有写这个

27:22.500 --> 27:24.500
那么匹配到他的时候

27:24.500 --> 27:26.500
是不是同时也会匹配匹配他

27:26.500 --> 27:27.500
对不对

27:27.500 --> 27:28.500
保存看一下吧

27:28.500 --> 27:30.500
那么现在来看

27:30.500 --> 27:32.500
新闻业是不是也把首页写出来了

27:32.500 --> 27:33.500
对吧

27:33.500 --> 27:34.500
因此我们这里

27:34.500 --> 27:36.500
最好给他加上一个switch

27:36.500 --> 27:37.500
在这里

27:37.500 --> 27:38.500
给他加上一个switch

27:38.500 --> 27:40.500
就是我们这里不是得到一个

27:40.500 --> 27:42.500
ROAD主键的数组吗

27:42.500 --> 27:43.500
对不对

27:43.500 --> 27:44.500
ROAD

27:44.500 --> 27:45.500
RS

27:45.500 --> 27:46.500
一个主键的数组

27:46.500 --> 27:47.500
然后呢

27:47.500 --> 27:48.500
我们这里返回什么呢

27:48.500 --> 27:49.500
返回这样一个东西

27:50.500 --> 27:51.500
再导入一个switch

27:51.500 --> 27:52.500
switch

27:52.500 --> 27:53.500
对吧

27:53.500 --> 27:54.500
我们给他掏一个switch

27:54.500 --> 27:55.500
主键在外面

27:55.500 --> 27:56.500
switch

27:56.500 --> 27:58.500
switch里边放什么

27:58.500 --> 27:59.500
放RS

27:59.500 --> 28:00.500
保存

28:00.500 --> 28:01.500
这样子

28:01.500 --> 28:02.500
他匹配到一个

28:02.500 --> 28:03.500
就不会再匹配到另一个了

28:03.500 --> 28:04.500
这也是无忧的

28:04.500 --> 28:06.500
他能默正的处理方式

28:06.500 --> 28:08.500
无忧也是这样处理的

28:08.500 --> 28:09.500
好吧

28:09.500 --> 28:10.500
到这边来

28:10.500 --> 28:11.500
随便吧

28:11.500 --> 28:12.500
随便怎么配置都行

28:12.500 --> 28:13.500
你看这意思吧

28:16.500 --> 28:17.500
好

28:17.500 --> 28:18.500
那么这是关于

28:18.500 --> 28:19.500
这一块

28:19.500 --> 28:20.500
这一块

28:20.500 --> 28:21.500
好

28:21.500 --> 28:22.500
那么接下来呢

28:22.500 --> 28:23.500
我们来看一下

28:23.500 --> 28:24.500
我们继续来想

28:24.500 --> 28:25.500
继续想一下

28:25.500 --> 28:26.500
跟人家生成出的问题

28:26.500 --> 28:27.500
就是

28:27.500 --> 28:29.500
如果有q准怎么办

28:29.500 --> 28:30.500
首先我要知道

28:30.500 --> 28:32.500
我们这个q准

28:32.500 --> 28:33.500
他得到的是一个数组

28:33.500 --> 28:34.500
对吧

28:34.500 --> 28:35.500
那么这个数组

28:35.500 --> 28:36.500
最终是不是还是会生成一些

28:36.500 --> 28:37.500
ROAD主键

28:37.500 --> 28:38.500
对吧

28:38.500 --> 28:39.500
一个就是一个ROAD主键

28:39.500 --> 28:40.500
一个就是一个ROAD主键

28:40.500 --> 28:41.500
会生成一些ROAD主键

28:41.500 --> 28:43.500
那么关键是q准

28:43.500 --> 28:44.500
放到什么位置呢

28:44.500 --> 28:45.500
放到页面的什么位置呢

28:45.500 --> 28:47.500
我们之前是怎么约定的

28:47.500 --> 28:48.500
是约定的是

28:48.500 --> 28:49.500
这个玩意儿呢

28:49.500 --> 28:51.500
就这个主键啊

28:51.500 --> 28:53.500
它只选择顶级的页面

28:53.500 --> 28:55.500
那么纸页面的

28:55.500 --> 28:57.500
就是顶级页面里面的纸页面

28:57.500 --> 28:59.500
以及纸页面里面的纸页面

28:59.500 --> 29:00.500
我们通过q准

29:00.500 --> 29:02.500
又通过这个主键的

29:02.500 --> 29:03.500
q准这个属性

29:03.500 --> 29:04.500
放到这个位置

29:04.500 --> 29:07.500
也就是说啥呢

29:07.500 --> 29:09.500
说什么意思啊

29:09.500 --> 29:10.500
什么意思啊

29:10.500 --> 29:12.500
我这里

29:12.500 --> 29:14.500
在产生这个ROAD主键的时候

29:14.500 --> 29:17.500
其中有一个属性是component

29:17.500 --> 29:20.520
报过来啊

29:20.520 --> 29:23.520
其中有一个属性是component

29:23.520 --> 29:25.520
那么这个属性

29:25.520 --> 29:27.520
如果说我像刚才那样子

29:27.520 --> 29:29.520
直接把它放到这儿

29:29.520 --> 29:31.520
直接把那个component属性放到这儿

29:31.520 --> 29:33.520
那么肯定是不可能

29:33.520 --> 29:35.520
往这个component里面

29:35.520 --> 29:37.520
传递任何的嗅神属性的

29:37.520 --> 29:38.520
你看着吧

29:38.520 --> 29:39.520
那么右键

29:39.520 --> 29:40.520
检查

29:40.520 --> 29:41.520
就看这个新文页

29:41.520 --> 29:42.520
看这个新文页

29:42.520 --> 29:44.520
它没写兔

29:45.520 --> 29:46.520
没关系

29:46.520 --> 29:48.520
我们后面来搞这个兔

29:48.520 --> 29:49.520
看着

29:49.520 --> 29:52.520
当我们去匹配到顶级一面的时候

29:52.520 --> 29:53.520
你看我们它会自动

29:53.520 --> 29:55.520
因为我们这样子写的话

29:55.520 --> 29:57.520
就相当于是把component放到这儿了

29:57.520 --> 29:59.520
相当于是这样的写法

29:59.520 --> 30:01.520
相当于这里是这样的写法

30:01.520 --> 30:03.520
component等于component

30:03.520 --> 30:04.520
相当于是这样的写法

30:04.520 --> 30:06.520
没有任何疑问吧

30:06.520 --> 30:08.520
这个没有任何疑问吧

30:08.520 --> 30:10.520
那么这样子一来的话

30:10.520 --> 30:13.520
它只是简单的匹配到这个地址

30:13.520 --> 30:15.520
然后去选择这个组件

30:15.520 --> 30:16.520
那么这个组件

30:16.520 --> 30:18.520
这个component哪来的

30:18.520 --> 30:20.520
是这个配置对象里面的

30:20.520 --> 30:22.520
是一个配置对象里面的component

30:22.520 --> 30:23.520
来自于这儿

30:23.520 --> 30:24.520
那么这个component

30:24.520 --> 30:27.520
它只是简单的去选择这个页面

30:27.520 --> 30:28.520
简单的选择

30:28.520 --> 30:30.520
它就会导致

30:30.520 --> 30:31.520
这个组件

30:31.520 --> 30:33.520
你看这个60组件

30:33.520 --> 30:34.520
它给它传递的属性

30:34.520 --> 30:35.520
是不是只有这三个

30:35.520 --> 30:36.520
History都可以

30:36.520 --> 30:37.520
当然这个三个属性

30:37.520 --> 30:38.520
肯定要传递

30:38.520 --> 30:39.520
这个毫无疑问

30:39.520 --> 30:40.520
肯定要传递

30:40.520 --> 30:41.520
但是

30:41.520 --> 30:42.520
它就拿不到什么

30:42.520 --> 30:43.520
拿不到有没有q准属性

30:43.520 --> 30:45.520
有没有该传q准属性

30:45.520 --> 30:46.520
没有传递q准属性

30:46.520 --> 30:49.520
那既然没有传递q准属性

30:49.520 --> 30:51.520
那你想在60里面用这个q准

30:51.520 --> 30:53.520
有意义吗

30:53.520 --> 30:54.520
是不是没意义

30:54.520 --> 30:55.520
对吧

30:55.520 --> 30:57.520
这里不是要用q准吗

30:57.520 --> 30:58.520
所以说呢

30:58.520 --> 30:59.520
咱们得想办法

30:59.520 --> 31:00.520
在这个位置

31:00.520 --> 31:02.520
把q准给它传进去

31:02.520 --> 31:03.520
怎么传进去呢

31:03.520 --> 31:04.520
你就不能用这种方式

31:04.520 --> 31:05.520
来调用组件了

31:05.520 --> 31:06.520
你得怎么调用呢

31:06.520 --> 31:08.520
你得使用Render

31:08.520 --> 31:10.520
Render

31:10.520 --> 31:12.520
这里是Values

31:12.520 --> 31:14.520
Render

31:14.520 --> 31:15.520
Render里边

31:15.520 --> 31:17.520
我给你返回一个组件

31:17.520 --> 31:18.520
给你返回一个组件

31:18.520 --> 31:19.520
这个组件是什么

31:19.520 --> 31:20.520
就是component

31:20.520 --> 31:21.520
把它换个名字

31:21.520 --> 31:23.520
换成大切的component

31:23.520 --> 31:26.520
免得它不会把它当成一个动物元素

31:26.520 --> 31:27.520
component

31:27.520 --> 31:29.520
换成这个component

31:31.520 --> 31:33.520
这样子返回

31:33.520 --> 31:35.520
当然毫无疑问

31:35.520 --> 31:38.520
它里边肯定要有什么history

31:38.520 --> 31:39.520
这些东西

31:39.520 --> 31:40.520
对吧

31:40.520 --> 31:42.520
就像这三个属性

31:42.520 --> 31:43.520
都得有

31:43.520 --> 31:44.520
除了说

31:44.520 --> 31:45.520
我把参数里面

31:45.520 --> 31:46.520
参数里面都有

31:46.520 --> 31:47.520
这些属性都有

31:47.520 --> 31:48.520
都传给你

31:48.520 --> 31:50.520
都传给你

31:50.520 --> 31:52.520
然后都传给你之后

31:52.520 --> 31:53.520
除了这些之外

31:53.520 --> 31:56.520
我是不是还要传切准给你

31:56.520 --> 31:57.520
对吧

31:57.520 --> 31:59.520
是不是还要传切准给你

31:59.520 --> 32:01.520
我要把你的指节点传给你

32:01.520 --> 32:03.520
那传给它的应该是什么呢

32:03.520 --> 32:05.520
你就想象一下这边

32:05.520 --> 32:08.520
放到这个地方的位置

32:08.520 --> 32:09.520
应该说

32:09.520 --> 32:12.520
放到这个位置的时候

32:12.520 --> 32:14.520
这里应该是啥呢

32:14.520 --> 32:16.520
放到这个位置的时候

32:16.520 --> 32:18.520
这里应该是啥

32:18.520 --> 32:19.520
应该是啥

32:19.520 --> 32:20.520
是不是也是一个

32:20.520 --> 32:21.520
roach

32:21.520 --> 32:22.520
组件的

32:22.520 --> 32:23.520
数组

32:23.520 --> 32:24.520
对不对

32:24.520 --> 32:25.520
这里是不是也要放一个

32:25.520 --> 32:26.520
roach组件的数组

32:26.520 --> 32:27.520
评备它的职业面

32:27.520 --> 32:28.520
对不对

32:28.520 --> 32:29.520
好

32:29.520 --> 32:30.520
那么这个roach数组

32:30.520 --> 32:31.520
我是不是又可以

32:31.520 --> 32:33.520
第一规调用这个函数来拿到

32:33.520 --> 32:35.520
是不是又可以调用它来拿到

32:35.520 --> 32:36.520
对不对

32:36.520 --> 32:38.520
直接调用它来拿到这个东西

32:38.520 --> 32:39.520
好

32:39.520 --> 32:42.520
我们这里直接调用getroach

32:42.520 --> 32:44.520
给它一个什么呢

32:44.520 --> 32:46.520
给它当前配置

32:46.520 --> 32:48.520
当前这个rt

32:48.520 --> 32:49.520
就当当前配置的时候

32:49.520 --> 32:50.520
切准

32:50.520 --> 32:51.520
对不对

32:51.520 --> 32:52.520
就给它一个切准

32:52.520 --> 32:53.520
对吧

32:53.520 --> 32:54.520
把切准那个数组

32:54.520 --> 32:55.520
你看一下这边

32:55.520 --> 32:56.520
比较60这里

32:56.520 --> 32:57.520
我是不是把切准给它

32:57.520 --> 32:58.520
这个数组给它

32:58.520 --> 32:59.520
它又根据这个数组

32:59.520 --> 33:01.520
生成了一个roach组件

33:01.520 --> 33:02.520
对吧

33:02.520 --> 33:03.520
一系列的roach组件

33:03.520 --> 33:04.520
又返回

33:04.520 --> 33:05.520
看来就是这个意思

33:05.520 --> 33:06.520
这个调用就完事了

33:06.520 --> 33:08.520
当然这个切准

33:08.520 --> 33:09.520
还有可能是undefan

33:09.520 --> 33:10.520
有可能是undefan

33:10.520 --> 33:11.520
所以我们这里

33:11.520 --> 33:13.520
getroach最好判断一下

33:13.520 --> 33:15.520
你给我传的是不是undefan

33:15.520 --> 33:17.520
就是road

33:17.520 --> 33:19.520
如果说它不是数组

33:19.520 --> 33:20.520
如果它不是数组

33:20.520 --> 33:22.520
array

33:22.520 --> 33:23.520
意思

33:23.520 --> 33:24.520
意思array

33:24.520 --> 33:25.520
road

33:25.520 --> 33:27.520
如果说它不是数组

33:27.520 --> 33:28.520
不是数组的话

33:28.520 --> 33:29.520
我返回那

33:29.520 --> 33:30.520
我就啥都不宣的

33:30.520 --> 33:31.520
啥都不宣的

33:31.520 --> 33:32.520
就这么个意思

33:32.520 --> 33:33.520
看来

33:33.520 --> 33:34.520
就这个意思

33:34.520 --> 33:35.520
好

33:35.520 --> 33:36.520
那么这样子以来

33:36.520 --> 33:37.520
保存

33:37.520 --> 33:38.520
你看一下

33:40.520 --> 33:41.520
现在那门

33:41.520 --> 33:42.520
我看一下

33:42.520 --> 33:43.520
主要看一下60

33:43.520 --> 33:44.520
60组件

33:46.520 --> 33:48.520
60组件

33:48.520 --> 33:49.520
那你看一下

33:49.520 --> 33:51.520
是不是传了个切准进去了

33:51.520 --> 33:52.520
切准里面

33:52.520 --> 33:53.520
是不是传了很多的

33:53.520 --> 33:55.520
那些

33:55.520 --> 33:56.520
看一下切准

33:57.520 --> 33:58.520
它除了DIV

33:58.520 --> 33:59.520
你看

33:59.520 --> 34:00.520
这个是放切准的地方

34:00.520 --> 34:01.520
放切准的地方

34:01.520 --> 34:02.520
是不是一个switch

34:02.520 --> 34:03.520
对吧

34:03.520 --> 34:05.520
切准里面是不是放了一个

34:05.520 --> 34:07.520
数组

34:07.520 --> 34:09.520
每一个数组是啥

34:09.520 --> 34:11.520
每一个数组就是一个road

34:11.520 --> 34:13.520
每一个数组就是road

34:13.520 --> 34:14.520
太深了

34:14.520 --> 34:15.520
结果太深了

34:15.520 --> 34:17.520
它展示不出来了

34:17.520 --> 34:18.520
看一下

34:21.520 --> 34:23.520
应该是可以宣传出来的

34:25.520 --> 34:26.520
没问题

34:28.520 --> 34:29.520
我想一下

34:29.520 --> 34:30.520
对了

34:30.520 --> 34:31.520
没问题

34:31.520 --> 34:32.520
没问题

34:32.520 --> 34:33.520
那么下面的话

34:33.520 --> 34:35.520
为什么现在没有宣传出来了

34:35.520 --> 34:36.520
它放了很多的肉扯

34:36.520 --> 34:37.520
这个没问题

34:37.520 --> 34:39.520
它放了很多的肉扯组件

34:39.520 --> 34:40.520
是没问题的

34:40.520 --> 34:41.520
但是肉扯组件

34:41.520 --> 34:43.520
这些肉扯组件

34:43.520 --> 34:45.520
它没有匹配到地址

34:45.520 --> 34:46.520
为什么这样说

34:46.520 --> 34:47.520
为什么说

34:47.520 --> 34:48.520
它没有匹配到地址呢

34:48.520 --> 34:50.520
你看一下这个配置

34:50.520 --> 34:52.520
我这里匹配的地址

34:52.520 --> 34:53.520
如果说我是这样子写的

34:53.520 --> 34:54.520
地址是这样子写的

34:54.520 --> 34:55.520
那就没问题

34:55.520 --> 34:56.520
如果说60

34:56.520 --> 34:57.520
是这样的地址

34:57.520 --> 34:59.520
那么这里的匹配的是60

34:59.520 --> 35:00.520
detail

35:00.520 --> 35:01.520
这样子没问题

35:01.520 --> 35:02.520
我是把

35:02.520 --> 35:03.520
如果把写全了的话就没问题

35:03.520 --> 35:04.520
保存

35:04.520 --> 35:05.520
你看一下

35:05.520 --> 35:06.520
新闻首页

35:06.520 --> 35:07.520
我们这里

35:07.520 --> 35:08.520
挑战一下地址

35:09.520 --> 35:10.520
把地址写上

35:10.520 --> 35:11.520
2

35:11.520 --> 35:12.520
这是新闻首页

35:12.520 --> 35:13.520
6

35:13.520 --> 35:16.520
这里是新闻详情页

35:16.520 --> 35:17.520
detail

35:17.520 --> 35:19.520
news detail

35:19.520 --> 35:21.520
这里是

35:23.520 --> 35:24.520
6

35:24.520 --> 35:26.520
search

35:26.520 --> 35:27.520
search

35:27.520 --> 35:28.520
新闻搜索页

35:28.520 --> 35:29.520
这样子写全就没问题

35:29.520 --> 35:30.520
你看

35:31.520 --> 35:32.520
detail

35:33.520 --> 35:34.520
我看一下

35:35.520 --> 35:36.520
news detail

35:36.520 --> 35:37.520
怎么跑到首页去了

35:37.520 --> 35:38.520
news detail

35:38.520 --> 35:40.520
是新闻详情页

35:40.520 --> 35:41.520
我看一下这里

35:41.520 --> 35:42.520
app.

35:42.520 --> 35:43.520
这里配置

35:43.520 --> 35:44.520
配置这里

35:44.520 --> 35:45.520
哪里写的有问题

35:47.520 --> 35:49.520
news detail

35:49.520 --> 35:51.520
哪里没匹配上吗

35:52.520 --> 35:53.520
看一下

35:53.520 --> 35:55.520
news detail

35:56.520 --> 35:58.520
news detail

35:58.520 --> 35:59.520
component

35:59.520 --> 36:00.520
news detail

36:01.520 --> 36:02.520
这个没匹配上吗

36:02.520 --> 36:03.520
这个地方

36:04.520 --> 36:05.520
看一下

36:05.520 --> 36:06.520
我们这里看一下

36:06.520 --> 36:07.520
到底怎么回事

36:09.520 --> 36:13.240
我看一下

36:14.240 --> 36:15.240
明白了

36:15.240 --> 36:16.240
明白了

36:16.240 --> 36:18.240
因为我这里是精确匹配的

36:19.240 --> 36:20.240
这里是精确匹配的

36:21.240 --> 36:22.240
这里是不能精确匹配

36:22.240 --> 36:23.240
这里不能精确匹配

36:23.240 --> 36:24.240
因为这里一精确匹配

36:24.240 --> 36:25.240
大家看下边

36:25.240 --> 36:26.240
是不是匹配不上了

36:26.240 --> 36:27.240
当我们访问这个地址的时候

36:27.240 --> 36:28.240
是不是连这个组建

36:28.240 --> 36:29.240
顶级主员都匹配不上了

36:29.240 --> 36:31.240
跑到首页去了

36:31.240 --> 36:33.240
这里是不能精确匹配的

36:33.240 --> 36:34.240
这里不能精确匹配

36:35.240 --> 36:36.240
保存

36:36.240 --> 36:37.240
你看

36:37.240 --> 36:38.240
新闻详情也

36:38.240 --> 36:39.240
新闻搜索也

36:39.240 --> 36:40.240
新闻首页

36:40.240 --> 36:41.240
你看一下

36:41.240 --> 36:42.240
搞定了

36:42.240 --> 36:43.240
对不对

36:43.240 --> 36:44.240
那么之后我们页面上

36:44.240 --> 36:45.240
至少目前

36:45.240 --> 36:46.240
虽然说还有一些小的问题

36:46.240 --> 36:48.240
至少目前的话

36:48.240 --> 36:49.240
我们在是不是轻松

36:49.240 --> 36:50.240
如果说

36:50.240 --> 36:52.240
要实现无忧的效果的话

36:52.240 --> 36:53.240
基本上都实现了

36:53.240 --> 36:54.240
你看配置

36:54.240 --> 36:55.240
我们在写到这

36:55.240 --> 36:56.240
把配置写到这

36:57.240 --> 36:58.240
这里就不用写什么组建了

36:58.240 --> 37:00.240
就纯粹一个对象配置

37:00.240 --> 37:02.240
然后我们这里已经做好了一个公共组建

37:02.240 --> 37:03.240
这个是可以通用的

37:03.240 --> 37:04.240
公共组建都不用管它了

37:04.240 --> 37:05.240
反正已经做好了

37:05.240 --> 37:07.240
那么我们只需要在app里边

37:07.240 --> 37:09.240
把顶级页面放到这

37:09.240 --> 37:10.240
顶级页面的配置放到这

37:10.240 --> 37:11.240
然后后续的页面

37:11.240 --> 37:12.240
反而是要渲染

37:12.240 --> 37:14.240
渲染纸页面的地方

37:14.240 --> 37:15.240
我们就使用切合准来渲染纸页面

37:15.240 --> 37:16.240
就完事了

37:16.240 --> 37:18.240
我们就不用再去

37:18.240 --> 37:20.240
这些页面里边就不用再去写什么

37:20.240 --> 37:21.240
Row车

37:21.240 --> 37:22.240
还有什么

37:22.240 --> 37:23.240
Switch

37:23.240 --> 37:24.240
就不用再去写这些东西了

37:24.240 --> 37:26.240
但是它灵活度肯定降低了很多

37:26.240 --> 37:27.240
但是

37:27.240 --> 37:29.240
就变得非常方便了

37:30.240 --> 37:32.240
那么接下来我们来解决一些

37:32.240 --> 37:33.240
小的细节问题

37:33.240 --> 37:35.240
比方说在这里

37:35.240 --> 37:36.240
像这个地方

37:36.240 --> 37:38.240
附路径是不是没有必要写了

37:38.240 --> 37:39.240
这些太麻烦了

37:39.240 --> 37:41.240
而且也不利于维护

37:41.240 --> 37:42.240
这样附路径一变

37:42.240 --> 37:43.240
这里是不是要跟着

37:43.240 --> 37:44.240
还要改很多东西

37:44.240 --> 37:45.240
对不对

37:45.240 --> 37:47.240
附路径就没有必要写了

37:47.240 --> 37:49.240
那这个东西怎么办了

37:49.240 --> 37:52.240
那么这里它匹配的pass

37:52.240 --> 37:54.240
你是不是得做一下控制

37:54.240 --> 37:55.240
在这里

37:55.240 --> 37:56.240
以它写的pass

37:56.240 --> 37:58.240
它实际上是相对于附路径的pass

37:58.240 --> 38:00.240
那么这里你不能把它当成

38:00.240 --> 38:01.240
绝对的pass来使用

38:01.240 --> 38:02.240
对吧

38:02.240 --> 38:03.240
你是不能把它当成

38:03.240 --> 38:04.240
绝对的pass来使用的

38:04.240 --> 38:05.240
所以说我们这里

38:05.240 --> 38:07.240
除了把这些东西抽离出去之外

38:07.240 --> 38:09.240
还要抽离什么

38:09.240 --> 38:10.240
还要抽离一个pass

38:10.240 --> 38:12.240
pass也不能直接复制

38:12.240 --> 38:14.240
pass不能直接复制的

38:14.240 --> 38:15.240
好 那么pass

38:15.240 --> 38:17.240
我们是不是要处理一下

38:17.240 --> 38:19.240
pass等于啥呢

38:19.240 --> 38:20.240
是不是等于

38:20.240 --> 38:22.240
它当之前匹配的路由

38:22.240 --> 38:23.240
对吧

38:23.240 --> 38:24.240
复路由

38:24.240 --> 38:26.240
匹配的复路由的路径

38:26.240 --> 38:29.240
然后拼接上目前的pass

38:29.240 --> 38:30.240
对不对

38:30.240 --> 38:32.240
匹配的复路由的路径

38:32.240 --> 38:33.240
拼接上目前的pass

38:33.240 --> 38:34.240
这个是不是做过的

38:34.240 --> 38:36.240
怎么写的这里

38:36.240 --> 38:38.240
这里咋写的

38:38.240 --> 38:40.240
还记得吗

38:40.240 --> 38:42.240
这里是咋写的

38:42.240 --> 38:44.240
是不是来自于

38:44.240 --> 38:46.240
来自于啥呢

38:46.240 --> 38:48.240
这里我们看一下

38:48.240 --> 38:50.240
我们使用那个

38:50.240 --> 38:51.240
当时我们怎么写的

38:51.240 --> 38:52.240
当时使用这个march

38:52.240 --> 38:53.240
对不对

38:53.240 --> 38:55.240
probs.march

38:55.240 --> 38:56.240
里边有个什么

38:56.240 --> 38:57.240
UIL

38:57.240 --> 38:59.240
匹配的复路径

38:59.240 --> 39:01.240
然后在拼接上

39:01.240 --> 39:03.240
拼接上什么

39:03.240 --> 39:04.240
拼接上pass

39:04.240 --> 39:06.240
拼接上我们当前的路径

39:06.240 --> 39:08.240
是做这么一种处理来进行

39:08.240 --> 39:09.240
拼接的

39:09.240 --> 39:11.240
pass是用这种处理来拼接的

39:11.240 --> 39:12.240
复路径

39:12.240 --> 39:13.240
就是复主键

39:13.240 --> 39:14.240
就是复路由

39:14.240 --> 39:15.240
匹配到了路径

39:15.240 --> 39:16.240
它匹配一部分

39:16.240 --> 39:17.240
后面纸度由匹配

39:17.240 --> 39:18.240
继续匹配

39:18.240 --> 39:21.240
前面匹配到了UIL路径

39:21.240 --> 39:23.240
然后再拼接上我们目前的路径

39:23.240 --> 39:24.240
就变成动态的了

39:24.240 --> 39:25.240
这个好像我们在

39:25.240 --> 39:26.240
应用案例里边

39:26.240 --> 39:27.240
第一个

39:27.240 --> 39:29.240
第一节课就是说过的

39:29.240 --> 39:30.240
关键是个

39:30.240 --> 39:33.240
这个march怎么获得了这个属性

39:33.240 --> 39:34.240
这个属性怎么获得了

39:34.240 --> 39:36.240
好像这个问题

39:37.240 --> 39:39.240
这个问题搞定了

39:39.240 --> 39:41.240
问题是这个玩意怎么获取了

39:41.240 --> 39:43.240
这个玩意

39:43.240 --> 39:44.240
想一想

39:44.240 --> 39:46.810
这个位置

39:46.810 --> 39:47.810
你会想来想去

39:47.810 --> 39:48.810
你会发现

39:48.810 --> 39:50.810
怎么都不好处理

39:50.810 --> 39:51.810
怎么都不好处理

39:51.810 --> 39:52.810
因为它本来就是个普通函数

39:52.810 --> 39:54.810
它不是主键

39:54.810 --> 39:55.810
那怎么办呢

39:55.810 --> 39:56.810
你就干脆

39:56.810 --> 39:58.810
你给我传一个

39:58.810 --> 40:01.810
Bass Pass进来

40:01.810 --> 40:03.810
你给我传一个参数进来

40:03.810 --> 40:04.810
Bass Pass

40:04.810 --> 40:05.810
那么一最开始

40:05.810 --> 40:06.810
调用的时候

40:06.810 --> 40:07.810
给它传什么参数呢

40:07.810 --> 40:09.810
就传一个空置不串

40:09.810 --> 40:10.810
就传一个空置

40:10.810 --> 40:11.810
或者就传一个鞋杠

40:11.810 --> 40:13.810
表示跟路径

40:13.810 --> 40:14.810
那么它就用这个

40:14.810 --> 40:16.810
Bass Pass来进行拼接

40:16.810 --> 40:17.810
来进行拼接

40:17.810 --> 40:18.810
这里拼接啥呢

40:18.810 --> 40:22.810
把Bass Pass拼接到

40:22.810 --> 40:23.810
Bass Pass

40:23.810 --> 40:25.810
拼接到Pass里面

40:25.810 --> 40:26.810
对不对

40:26.810 --> 40:28.810
把Bass Pass拼接到Pass里面

40:28.810 --> 40:29.810
对吧

40:29.810 --> 40:30.810
就让拼接一下就完事了

40:30.810 --> 40:31.810
当那个拼接出来了

40:31.810 --> 40:34.810
它有可能会出现两个鞋杠

40:34.810 --> 40:36.810
我一会会出现两个鞋杠

40:36.810 --> 40:37.810
那么咱们呢

40:37.810 --> 40:38.810
如果说要处理这个问题

40:38.810 --> 40:39.810
我们看一下

40:39.810 --> 40:40.810
不处理这个问题

40:40.810 --> 40:42.810
会不会有问题

40:42.810 --> 40:43.810
最好处理一下

40:43.810 --> 40:44.810
处理一下

40:44.810 --> 40:45.810
就是你只需要把两个

40:45.810 --> 40:46.810
拼接的结果

40:46.810 --> 40:48.810
你只需要把两个鞋杠

40:48.810 --> 40:49.810
改成一个鞋杠

40:49.810 --> 40:50.810
就完事了

40:50.810 --> 40:51.810
就完事了

40:51.810 --> 40:52.810
没有那么复杂

40:52.810 --> 40:54.810
你只需要把拼接的结果

41:01.440 --> 41:02.440
Pass

41:03.440 --> 41:05.440
就是New Pass

41:05.440 --> 41:06.440
等于什么呢

41:06.440 --> 41:08.440
等于两个拼接的结果

41:08.440 --> 41:09.440
拼接出来

41:09.440 --> 41:11.440
是不是有可能会有两个鞋杠

41:11.440 --> 41:12.440
对吧

41:12.440 --> 41:13.440
它有可能会有两个鞋杠

41:13.440 --> 41:14.440
它本身的Pass里面带鞋杠

41:14.440 --> 41:15.440
你看吧

41:15.440 --> 41:16.440
它本身的Pass里面带鞋杠

41:16.440 --> 41:17.440
前面有鞋杠

41:17.440 --> 41:18.440
后边

41:18.440 --> 41:20.440
前面那个Pass

41:20.440 --> 41:21.440
Bass Pass里面

41:21.440 --> 41:22.440
也有可能

41:22.440 --> 41:23.440
最后一个末尾也是鞋杠

41:23.440 --> 41:24.440
我们把两个鞋杠

41:24.440 --> 41:26.440
给它替换成为一个鞋杠

41:26.440 --> 41:27.440
就完事了

41:27.440 --> 41:28.440
就是个字母说替换

41:28.440 --> 41:29.440
还有啥呢

41:29.440 --> 41:30.440
Pass

41:30.440 --> 41:31.440
等于什么呢

41:31.440 --> 41:32.440
New Pass

41:32.440 --> 41:33.440
Replace

41:33.440 --> 41:34.440
对吧

41:34.440 --> 41:35.440
一个政策

41:35.440 --> 41:36.440
对吧

41:36.440 --> 41:37.440
全局替换

41:37.440 --> 41:38.440
把什么

41:38.440 --> 41:39.440
把这个

41:39.440 --> 41:41.440
转移

41:41.440 --> 41:42.440
转移

41:42.440 --> 41:44.440
把两个鞋杠

41:44.440 --> 41:46.440
把两个鞋杠

41:46.440 --> 41:47.440
变成什么了

41:47.440 --> 41:48.440
变成一个鞋杠

41:48.440 --> 41:49.440
就完事了

41:49.440 --> 41:50.440
就完事了

41:50.440 --> 41:51.440
还有啥了

41:51.440 --> 41:52.440
就没啥了

41:52.440 --> 41:53.440
New Pass

41:53.440 --> 41:54.440
是不是应用进来就完事了

41:54.440 --> 41:56.440
对不对

41:56.440 --> 41:57.440
把这个New Pass

41:57.440 --> 41:59.440
应用进来就完事了

41:59.440 --> 42:00.440
好

42:00.440 --> 42:01.440
那么这里

42:01.440 --> 42:02.440
该是Road这里

42:02.440 --> 42:03.440
是不是又要

42:03.440 --> 42:05.440
我们要把这个New Pass

42:05.440 --> 42:06.440
拼接进去

42:06.440 --> 42:07.440
对吧

42:07.440 --> 42:08.440
就是

42:08.440 --> 42:09.440
如果说

42:09.440 --> 42:10.440
它自身

42:10.440 --> 42:11.440
它有指援数

42:11.440 --> 42:12.440
有秀准

42:12.440 --> 42:14.440
如果它自身有秀准的话

42:14.440 --> 42:16.440
我们要把这个New Pass

42:16.440 --> 42:17.440
拼接的结果

42:17.440 --> 42:18.440
要传进去

42:18.440 --> 42:19.440
对吧

42:19.440 --> 42:20.440
这样地轨传进去就完事了

42:20.440 --> 42:21.440
好

42:21.440 --> 42:22.440
就不用写

42:22.440 --> 42:23.440
不用写的钱追了

42:23.440 --> 42:24.440
好

42:24.440 --> 42:25.440
保存

42:25.440 --> 42:26.440
你看一下

42:26.440 --> 42:27.440
好

42:27.440 --> 42:28.440
新闻详情业

42:28.440 --> 42:29.440
你看

42:29.440 --> 42:30.440
是不是仍然可以

42:30.440 --> 42:31.440
对吧

42:31.440 --> 42:32.440
仍然没问题

42:32.440 --> 42:33.440
看到没

42:33.440 --> 42:34.440
对不对

42:34.440 --> 42:35.440
OK就完事了

42:35.440 --> 42:36.440
所以说我们这里

42:36.440 --> 42:37.440
要测试的话

42:37.440 --> 42:38.440
我们就把这个New Pass打印出来

42:38.440 --> 42:39.440
看一下

42:39.440 --> 42:40.440
New Pass

42:40.440 --> 42:41.440
保存

42:41.440 --> 42:42.440
你看一下

42:42.440 --> 42:43.440
打印出来

42:43.440 --> 42:44.440
你看一开始

42:44.440 --> 42:45.440
New is

42:45.440 --> 42:46.440
这是顶级页面对吧

42:46.440 --> 42:47.440
然后它的指页面

42:47.440 --> 42:49.440
是New is

42:49.440 --> 42:50.440
Detail

42:50.440 --> 42:51.440
New is Search

42:51.440 --> 42:52.440
对不对

42:52.440 --> 42:53.440
没问题吧

42:53.440 --> 42:54.440
这样子

42:54.440 --> 42:55.440
是不是就完事了

42:55.440 --> 42:56.440
好

42:56.440 --> 42:57.440
那么这里就搞定了

42:57.440 --> 42:58.440
就搞定了这样的模式了

42:58.440 --> 42:59.440
好

42:59.440 --> 43:00.440
那么这里还有一些细节

43:00.440 --> 43:01.440
还有一些细节

43:01.440 --> 43:02.440
比方说

43:02.440 --> 43:04.440
我们要对路由进行命名

43:04.440 --> 43:05.440
命名路由

43:05.440 --> 43:06.440
给它个Name属性

43:06.440 --> 43:08.440
对它进行命名

43:08.440 --> 43:09.440
路由的名字

43:09.440 --> 43:10.440
因为我们当时

43:10.440 --> 43:11.440
挑转的时候

43:11.440 --> 43:12.440
就可以使用

43:12.440 --> 43:13.440
路由的名字

43:13.440 --> 43:14.440
来进行挑转

43:14.440 --> 43:15.440
那么那样子一来的话

43:15.440 --> 43:16.440
我们还要去封装

43:16.440 --> 43:17.440
一个另可组件

43:17.440 --> 43:18.440
还要去封装

43:18.440 --> 43:19.440
一个另可组件

43:19.440 --> 43:20.440
等一下

43:20.440 --> 43:21.440
要不要讲这个玩意

43:21.440 --> 43:23.440
要不要讲呢

43:23.440 --> 43:24.440
要不要就讲吧

43:24.440 --> 43:25.440
就讲吧

43:25.440 --> 43:26.440
这个也无所谓

43:26.440 --> 43:27.440
这个也无所谓

43:27.440 --> 43:28.440
讲吧

43:28.440 --> 43:29.440
讲吧

43:29.440 --> 43:30.440
Name

43:30.440 --> 43:31.440
就尽量的模拟

43:31.440 --> 43:32.440
什么

43:32.440 --> 43:33.440
模拟那个就是

43:35.440 --> 43:36.440
ViewRotor

43:36.440 --> 43:37.440
比方说

43:37.440 --> 43:38.440
给它取个名字

43:38.440 --> 43:39.440
就是New

43:39.440 --> 43:40.440
这个

43:40.440 --> 43:41.440
给它取个名字

43:41.440 --> 43:42.440
但这个名字

43:42.440 --> 43:43.440
肯定是不能重复的

43:43.440 --> 43:44.440
肯定是不能重复的

43:44.440 --> 43:47.440
New is Home

43:47.440 --> 43:48.440
给它取个名字

43:48.440 --> 43:49.440
命名路由

43:50.440 --> 43:51.440
这个给它取个名字

43:51.440 --> 43:53.440
叫做New is Detail

43:54.440 --> 43:55.440
这样子

43:55.440 --> 43:56.440
就避免跟那个

43:56.440 --> 43:57.440
跟那个路径进行偶和

43:57.440 --> 43:59.440
New is Search

44:00.440 --> 44:01.440
那这里

44:01.440 --> 44:02.440
取个名字

44:04.440 --> 44:05.440
就是什么

44:05.440 --> 44:08.440
就是那个Home

44:08.440 --> 44:10.440
给它点读有取名字

44:10.440 --> 44:11.440
那么之后

44:11.440 --> 44:12.440
挑转的时候

44:12.440 --> 44:13.440
就根据名字来挑转

44:13.440 --> 44:14.440
根据名字来挑转

44:14.440 --> 44:15.440
所以说我们这里

44:15.440 --> 44:16.440
到时候

44:16.440 --> 44:18.440
使用那个超链接的时候

44:18.440 --> 44:19.440
使用超链接的时候

44:19.440 --> 44:21.440
当这里就已经写完了

44:21.440 --> 44:22.440
这里已经写完了

44:22.440 --> 44:24.440
当然这个Name属性没用

44:24.440 --> 44:25.440
Name属性没用

44:25.440 --> 44:26.440
哪里可以把它提出来

44:26.440 --> 44:27.440
这Name属性没用

44:27.440 --> 44:29.440
它也不会放到这

44:29.440 --> 44:30.440
可以把它提出来

44:30.440 --> 44:31.440
这Name属性是没意义的

44:34.440 --> 44:35.440
然后我们在这

44:36.440 --> 44:37.440
用新建的组建

44:37.440 --> 44:38.440
叫做

44:39.440 --> 44:41.440
Easy Link

44:42.440 --> 44:43.440
或者是Batter Link

44:43.440 --> 44:45.440
更好的一个Link

44:45.440 --> 44:46.440
要介绍

44:46.440 --> 44:47.440
我们自己又封了一个组建

44:47.440 --> 44:48.440
Export

44:50.880 --> 44:51.880
RFC

44:52.880 --> 44:53.880
Batter Link

44:53.880 --> 44:54.880
那么这里

44:54.880 --> 44:55.880
我们肯定是增强

44:55.880 --> 44:57.880
增强什么Link的功能

44:58.880 --> 44:59.880
增强Link的功能

44:59.880 --> 45:00.880
是吧

45:00.880 --> 45:01.880
Rex Rotor

45:01.880 --> 45:02.880
那么后边

45:02.880 --> 45:04.880
我们就直接使用

45:04.880 --> 45:05.880
Batter Link就行了

45:05.880 --> 45:07.880
直接使用这个组建就行了

45:07.880 --> 45:08.880
Batter Link

45:08.880 --> 45:09.880
我们这里

45:09.880 --> 45:10.880
找到了一个

45:10.880 --> 45:11.880
Add

45:12.880 --> 45:13.880
这里 Link

45:13.880 --> 45:14.880
这里导入了

45:14.880 --> 45:15.880
不在这里导入

45:15.880 --> 45:16.880
在哪里导入

45:16.880 --> 45:17.880
Import

45:17.880 --> 45:18.880
Batter Link

45:18.880 --> 45:19.880
From

45:19.880 --> 45:20.880
From那个

45:21.880 --> 45:22.880
第二鞋杠

45:23.880 --> 45:24.880
Batter Link

45:24.880 --> 45:25.880
换个名字

45:25.880 --> 45:26.880
还是用Link这个名字

45:26.880 --> 45:28.880
但是我们导入的是Batter Link

45:28.880 --> 45:29.880
导入的是Batter Link

45:29.880 --> 45:30.880
那么这里 Link

45:30.880 --> 45:31.880
Tool

45:31.880 --> 45:32.880
Tool是什么呢

45:32.880 --> 45:33.880
我们就可以写名字了

45:33.880 --> 45:34.880
就可以写名字

45:34.880 --> 45:35.880
比如说

45:35.880 --> 45:36.880
给它的是一个

45:36.880 --> 45:37.880
不是一个路径

45:37.880 --> 45:39.880
按照View的模式

45:39.880 --> 45:40.880
给它的路由名字

45:40.880 --> 45:41.880
路由名字

45:41.880 --> 45:42.880
叫做Home

45:42.880 --> 45:43.880
首页

45:44.880 --> 45:45.880
看着

45:45.880 --> 45:46.880
这个路由名字

45:46.880 --> 45:47.880
叫做

45:47.880 --> 45:48.880
新闻业

45:49.880 --> 45:50.880
同样的道理

45:51.880 --> 45:52.880
到那个

45:52.880 --> 45:53.880
News里边来

45:53.880 --> 45:54.880
这里

45:54.880 --> 45:56.880
不在这里导入Link了

45:57.880 --> 45:59.880
是从Batter Link里面导入

46:01.880 --> 46:02.880
Batter Link

46:02.880 --> 46:03.880
那么这里

46:03.880 --> 46:04.880
Tool

46:04.880 --> 46:05.880
就是个对象

46:05.880 --> 46:06.880
当然对象里边还可以写

46:06.880 --> 46:07.880
Surch

46:07.880 --> 46:08.880
Hash

46:08.880 --> 46:09.880
Stats都可以写

46:09.880 --> 46:10.880
因为到时候

46:10.880 --> 46:11.880
我们会处理的

46:11.880 --> 46:12.880
Name路由的名字

46:12.880 --> 46:13.880
叫做News

46:13.880 --> 46:14.880
Home

46:15.880 --> 46:17.880
因为名字是不会变化的

46:17.880 --> 46:18.880
对吧

46:18.880 --> 46:19.880
它的路径

46:19.880 --> 46:20.880
那些规则可能会变化

46:20.880 --> 46:22.880
但是名字是不会变化的

46:22.880 --> 46:23.880
这是News

46:23.880 --> 46:24.880
Detail

46:24.880 --> 46:25.880
这是

46:25.880 --> 46:26.880
News

46:26.880 --> 46:27.880
Search

46:27.880 --> 46:28.880
Search

46:28.880 --> 46:29.880
搜索页

46:29.880 --> 46:30.880
接下来

46:30.880 --> 46:31.880
我们在这边来看

46:32.880 --> 46:33.880
到这边来看

46:33.880 --> 46:34.880
那么这边其实就是

46:34.880 --> 46:35.880
封装一个Link

46:35.880 --> 46:36.880
对吧

46:36.880 --> 46:37.880
就是封装一个Link

46:37.880 --> 46:38.880
那么我们返回啥

46:38.880 --> 46:40.880
返回的就是一个Link

46:40.880 --> 46:41.880
还返回啥呢

46:41.880 --> 46:42.880
还返回啥呢

46:42.880 --> 46:43.880
还返回啥呢

46:43.880 --> 46:44.880
不就是一个Link

46:44.880 --> 46:45.880
对不对

46:45.880 --> 46:46.880
返回的就是一个Link

46:46.880 --> 46:48.880
那么这个Link

46:49.880 --> 46:51.880
我们把他的属性

46:51.880 --> 46:53.880
就把我的属性全部扔给你

46:53.880 --> 46:54.880
对吧

46:54.880 --> 46:56.880
把我的属性全部扔给你

46:56.880 --> 46:57.880
但是有些属性

46:57.880 --> 46:58.880
我是要改的

46:58.880 --> 47:00.880
比如说PASS这个属性

47:00.880 --> 47:02.880
Tool这个属性是不是要改

47:02.880 --> 47:03.880
对不对

47:03.880 --> 47:04.880
Tool这个属性我们要改

47:04.880 --> 47:05.880
其他的属性无所谓

47:05.880 --> 47:06.880
我全部扔给你

47:06.880 --> 47:07.880
全部扔给你

47:07.880 --> 47:09.880
关键是Tool这个属性

47:09.880 --> 47:10.880
我需要更改

47:10.880 --> 47:12.880
因为Tool里面它多了一个Name

47:12.880 --> 47:13.880
我们要进行处理

47:13.880 --> 47:14.880
要进行处理

47:14.880 --> 47:15.880
那么这里呢

47:15.880 --> 47:16.880
看着

47:16.880 --> 47:18.880
我们把Tool给它

47:18.880 --> 47:19.880
解构出来

47:19.880 --> 47:21.880
把Tool这个属性给它解构出来

47:21.880 --> 47:24.880
然后其他的就是Rest

47:24.880 --> 47:25.880
其他的属性

47:25.880 --> 47:27.880
我其他的属性远方不动的给你

47:27.880 --> 47:29.880
但是Tool这个属性里面

47:29.880 --> 47:30.880
我们要处理一下

47:30.880 --> 47:32.880
首先判断一下

47:32.880 --> 47:33.880
判断一下

47:33.880 --> 47:36.880
Tool里面有没有Name这个属性

47:36.880 --> 47:38.880
如果说有的话

47:38.880 --> 47:39.880
我怎么办

47:39.880 --> 47:41.880
如果说Tool里面

47:41.880 --> 47:43.880
有Name这个属性

47:43.880 --> 47:45.880
或者说我们判断一下

47:45.880 --> 47:46.880
有Name这个属性

47:46.880 --> 47:49.880
并且Type 2

47:49.880 --> 47:50.880
不等于

47:50.880 --> 47:51.880
不等于啥

47:51.880 --> 47:52.880
不等于Stream

47:52.880 --> 47:53.880
不是一个字符串

47:53.880 --> 47:54.880
它是一个对象

47:54.880 --> 47:55.880
它是个对象

47:55.880 --> 47:57.880
不是一个字符串

47:57.880 --> 47:59.880
那么说明Tool是一个对象

47:59.880 --> 48:00.880
并且它有Name这个属性

48:00.880 --> 48:01.880
是不是我要改啥

48:01.880 --> 48:03.880
改Tool的Pice Name

48:03.880 --> 48:04.880
对不对

48:04.880 --> 48:05.880
改这个属性

48:05.880 --> 48:06.880
把属性改了

48:06.880 --> 48:07.880
这个属性等于啥

48:07.880 --> 48:11.880
是不是根据Name查找

48:11.880 --> 48:13.880
从配置文件中

48:13.880 --> 48:15.880
从配置文件中

48:15.880 --> 48:19.880
根据Name查找对

48:19.880 --> 48:26.880
查找对应的Pice

48:26.880 --> 48:27.880
对不对

48:27.880 --> 48:28.880
是不是这样子

48:28.880 --> 48:34.880
根据Name来查找对应的Pice

48:34.880 --> 48:35.880
没问题吧

48:36.880 --> 48:37.880
但是我这里就没有考虑

48:37.880 --> 48:39.880
什么传参的这种情况

48:39.880 --> 48:40.880
传参的情况的话

48:40.880 --> 48:41.880
你还要看Paris

48:41.880 --> 48:42.880
你还要看Paris

48:42.880 --> 48:44.880
还要用到第三方库

48:44.880 --> 48:46.880
我这里就没有管

48:46.880 --> 48:49.880
地址传参的情况

48:49.880 --> 48:50.880
就是什么帽号ID

48:50.880 --> 48:52.880
这种情况没管了

48:52.880 --> 48:53.880
因为如果要管这种情况的话

48:53.880 --> 48:54.880
你需要用到第三方库

48:54.880 --> 48:55.880
还要进行处理

48:55.880 --> 48:57.880
还要跟你复党的处理

48:57.880 --> 48:58.880
我只是说明这个道理

48:58.880 --> 49:00.880
是可以通过这种模式来做的

49:00.880 --> 49:02.880
只是说明这个道理

49:02.880 --> 49:04.880
只是说明这个道理

49:04.880 --> 49:05.880
我们要从配置文件

49:05.880 --> 49:06.880
根据Name来查找Pice

49:06.880 --> 49:08.880
我就把这个模式给它写出来

49:08.880 --> 49:10.880
聚德不会写完的

49:10.880 --> 49:12.880
写完的其实还蛮多的一个代码

49:12.880 --> 49:14.880
我们这里写这么一个辅助函数

49:14.880 --> 49:18.880
这个函数就是getPice from name

49:18.880 --> 49:20.880
给我一个啥呢

49:20.880 --> 49:22.880
给我一个name属性

49:22.880 --> 49:24.880
给我一个name属性

49:24.880 --> 49:26.880
然后我给你返回一个Pice属性

49:26.880 --> 49:28.880
就这么简单

49:28.880 --> 49:31.880
我给你返回一个Pice属性

49:31.880 --> 49:33.880
那么这里我们就直接去调用这个函数

49:33.880 --> 49:35.880
getPice from name

49:35.880 --> 49:37.880
把这个to的name传进去

49:37.880 --> 49:41.260
传进去

49:41.260 --> 49:43.260
那么假设这个函数已经写完了

49:43.260 --> 49:44.260
写完了过后to

49:44.260 --> 49:46.260
是不是直接把to放进来就行了

49:46.260 --> 49:47.260
如果你是个对象

49:47.260 --> 49:48.260
怎么样怎么样

49:48.260 --> 49:49.260
我改一下Pice name

49:49.260 --> 49:50.260
如果其他的情况我就不改

49:50.260 --> 49:51.260
我直接给你

49:51.260 --> 49:52.260
对吧

49:52.260 --> 49:53.260
反过来就是这个东西

49:53.260 --> 49:55.260
无非就是这个东西

49:55.260 --> 49:57.260
那么现在我们把这个东西写完就行了

49:57.260 --> 49:58.260
导入

49:58.260 --> 49:59.260
再说一次

49:59.260 --> 50:01.260
我这个函数打住是

50:01.260 --> 50:03.260
我先来导入函数

50:03.260 --> 50:05.260
root config

50:05.260 --> 50:06.260
表写钢

50:06.260 --> 50:07.260
root config

50:07.260 --> 50:08.260
打住是

50:08.260 --> 50:10.260
表示这个地方是

50:10.260 --> 50:12.260
根据name属性

50:12.260 --> 50:14.260
name的值

50:14.260 --> 50:17.260
查找对应的Pice

50:17.260 --> 50:21.260
没有考虑Paris的情况

50:21.260 --> 50:24.260
没有考虑

50:24.260 --> 50:26.260
有Paris的情况

50:26.260 --> 50:28.260
如果说有的话

50:28.260 --> 50:29.260
如果有

50:29.260 --> 50:31.260
会比较复杂

50:31.260 --> 50:34.260
需要用到第三方

50:34.260 --> 50:35.260
cool

50:35.260 --> 50:39.260
就是Pace to

50:39.260 --> 50:41.260
rig expression

50:41.260 --> 50:43.260
需要用这个cool来进行处理

50:43.260 --> 50:44.260
我们现在不管

50:44.260 --> 50:45.260
现在不管

50:45.260 --> 50:46.260
以后我们学到这个cool之后

50:46.260 --> 50:47.260
我们后面要学到

50:47.260 --> 50:49.260
Rex Rotor圆码的时候

50:49.260 --> 50:50.260
就要讲这个cool

50:50.260 --> 50:51.260
那么这里

50:51.260 --> 50:52.260
我们就先这样子

50:52.260 --> 50:53.260
就假设没用

50:53.260 --> 50:54.260
假设没用

50:54.260 --> 50:55.260
那么现在

50:55.260 --> 50:56.260
我们在这个函数里面

50:56.260 --> 50:58.260
就搞定这件事情

50:58.260 --> 51:00.260
怎么来搞定呢

51:00.260 --> 51:02.260
我们这里的Pace对象引有了

51:02.260 --> 51:03.260
那么是不是就是一个

51:03.260 --> 51:05.260
第一规查到的过程

51:05.260 --> 51:06.260
是一个

51:06.260 --> 51:07.260
第一规查到的过程

51:07.260 --> 51:09.260
查到一个name属性

51:09.260 --> 51:11.260
相同的

51:11.260 --> 51:13.260
相同的就是name属性

51:13.260 --> 51:14.260
对吧

51:14.260 --> 51:16.260
一个第一规查到的过程

51:16.260 --> 51:18.260
那么找到了过后干嘛

51:18.260 --> 51:19.260
找到了过后

51:19.260 --> 51:21.260
是不是就把那个

51:21.260 --> 51:23.260
name属性返回

51:23.260 --> 51:24.260
就完事了

51:24.260 --> 51:25.260
对不对

51:25.260 --> 51:26.260
把个name属性返回

51:26.260 --> 51:27.260
就是最终的

51:27.260 --> 51:28.260
对应的Pice返回

51:28.260 --> 51:29.260
但是不要忘记

51:29.260 --> 51:30.260
要拼接

51:30.260 --> 51:31.260
负路径

51:31.260 --> 51:32.260
负路径

51:32.260 --> 51:33.260
是不是要拼接

51:33.260 --> 51:34.260
那么这个做法

51:34.260 --> 51:35.260
是不是跟刚才有

51:35.260 --> 51:36.260
异曲同工之庙

51:36.260 --> 51:37.260
对吧

51:37.260 --> 51:38.260
一个Base URL地址

51:38.260 --> 51:40.260
Base URL地址

51:40.260 --> 51:41.260
那么这里

51:41.260 --> 51:42.260
一开始

51:42.260 --> 51:43.260
传令的是啥呢

51:43.260 --> 51:44.260
传令的肯定就是一个

51:44.260 --> 51:45.260
空白之物串

51:45.260 --> 51:46.260
或者就有一个鞋杠

51:46.260 --> 51:47.260
都行

51:48.260 --> 51:49.260
来吧

51:49.260 --> 51:50.260
来找呗

51:50.260 --> 51:51.260
来找呗

51:51.260 --> 51:52.260
那么这里

51:52.260 --> 51:53.260
就直接循环

51:53.260 --> 51:54.260
循环啥呢

51:54.260 --> 51:55.260
Rose config

51:55.260 --> 51:56.260
还有一个

51:56.260 --> 51:58.260
我们要查到的数组

51:58.260 --> 51:59.260
要给它

51:59.260 --> 52:00.260
查到的数组

52:00.260 --> 52:01.260
就是

52:01.260 --> 52:02.260
Rose

52:02.260 --> 52:03.260
Rose array

52:03.260 --> 52:04.260
查到的数组

52:04.260 --> 52:05.260
那么这里一开始

52:05.260 --> 52:06.260
就是Rose config

52:06.260 --> 52:07.260
这个数组

52:07.260 --> 52:08.260
就整个这个数组

52:08.260 --> 52:09.260
那么我们这里

52:09.260 --> 52:10.260
怎么办

52:10.260 --> 52:11.260
是不是循环

52:11.260 --> 52:12.260
Rose

52:13.260 --> 52:14.260
Four of

52:14.260 --> 52:15.260
循环

52:16.260 --> 52:17.260
Item

52:17.260 --> 52:18.260
Rose

52:18.260 --> 52:19.260
Array

52:19.260 --> 52:20.260
循环那个数组

52:20.260 --> 52:21.260
每循环一次

52:21.260 --> 52:22.260
是不是拿到一个对象

52:22.260 --> 52:23.260
我也不管

52:23.260 --> 52:24.260
你循环的是这个数组

52:24.260 --> 52:25.260
因为它是地规调用

52:25.260 --> 52:26.260
也不管循环的是

52:26.260 --> 52:27.260
这个数组

52:27.260 --> 52:28.260
总之每循环一次

52:28.260 --> 52:29.260
就拿到一个对象

52:29.260 --> 52:30.260
拿到一个对象

52:30.260 --> 52:31.260
那个对象里边

52:31.260 --> 52:33.260
是不是把判断它的Name属性

52:33.260 --> 52:35.260
如果说Item.name

52:36.260 --> 52:37.260
等于了

52:37.260 --> 52:38.260
等于了Name

52:39.260 --> 52:40.260
怎么办

52:40.260 --> 52:41.260
是不是Name属于相同

52:41.260 --> 52:42.260
是不是匹配到路由了

52:42.260 --> 52:44.260
匹配到怎么办

52:44.260 --> 52:45.260
怎么办

52:45.260 --> 52:46.260
返回的路径

52:46.260 --> 52:47.260
返回的是啥

52:47.260 --> 52:48.260
直接返回路径

52:48.260 --> 52:49.260
什么路径呢

52:49.260 --> 52:50.260
就是

52:50.260 --> 52:52.260
Bass URL

52:52.260 --> 52:53.260
拼接上

52:53.260 --> 52:54.260
什么

52:54.260 --> 52:55.260
拼接上

52:55.260 --> 52:57.260
当前Item.pass

52:57.260 --> 52:58.260
是不是

52:58.260 --> 52:59.260
只要拼接就完事了

52:59.260 --> 53:02.260
基础路径拼接Pass就完事了

53:02.260 --> 53:03.260
地规

53:03.260 --> 53:04.260
所以说这些课

53:04.260 --> 53:05.260
为什么叫扩展课程

53:05.260 --> 53:06.260
因为地规

53:06.260 --> 53:07.260
对很多同学来说

53:07.260 --> 53:08.260
就感觉很牢火

53:08.260 --> 53:10.260
那么我们这里

53:10.260 --> 53:11.260
也可以一开始拼接

53:11.260 --> 53:13.260
因为后边也可能会用到

53:13.260 --> 53:14.260
我们一开始可以

53:14.260 --> 53:15.260
一开始拼接

53:15.260 --> 53:16.260
以后我们就会再次用到

53:16.260 --> 53:17.260
这个东西

53:17.260 --> 53:18.260
哪怕Ls里边也会用到

53:18.260 --> 53:19.260
所以说一开始拼接一下

53:20.260 --> 53:21.260
New Pass

53:21.260 --> 53:23.260
那么是不是一样的

53:23.260 --> 53:25.260
搞定两个写杠的问题

53:25.260 --> 53:27.260
New Pass

53:27.260 --> 53:28.260
等于什么

53:28.260 --> 53:30.260
New Pass

53:30.260 --> 53:31.260
Replace

53:33.260 --> 53:34.260
振折

53:34.260 --> 53:36.260
写杠

53:36.260 --> 53:38.260
写杠

53:38.260 --> 53:40.260
替换成一个写杠

53:40.260 --> 53:42.260
两个写杠替换成一个写杠

53:42.260 --> 53:43.260
那么这里

53:43.260 --> 53:44.260
直接返回New Pass就完事了

53:44.260 --> 53:45.260
对不对

53:47.260 --> 53:48.260
好Ls

53:48.260 --> 53:50.260
如果说

53:50.260 --> 53:52.260
我给你的名字不一样

53:52.260 --> 53:53.260
就这一项

53:53.260 --> 53:54.260
我们查到了某一项

53:54.260 --> 53:55.260
查到了某一项

53:55.260 --> 53:57.260
他的名字不一样

53:57.260 --> 53:59.260
他的名字不一样

53:59.260 --> 54:01.260
名字不一样的情况下

54:01.260 --> 54:02.260
怎么办呢

54:02.260 --> 54:05.260
名字不一样的情况下

54:05.260 --> 54:06.260
我是不是要继续匹配

54:06.260 --> 54:07.260
他的指

54:07.260 --> 54:08.260
指

54:08.260 --> 54:09.260
指节点的数主

54:09.260 --> 54:10.260
对吧

54:10.260 --> 54:11.260
地规

54:11.260 --> 54:13.260
是不是要匹配指节点的数主

54:13.260 --> 54:14.260
判断一下

54:14.260 --> 54:15.260
你有没有指节点

54:15.260 --> 54:16.260
嗅嘴

54:16.260 --> 54:17.260
有没有指节点

54:17.260 --> 54:19.260
或者是用而为来判断

54:19.260 --> 54:20.260
而为

54:20.260 --> 54:21.260
意思而为

54:21.260 --> 54:22.260
如果说你是一个数主

54:22.260 --> 54:24.260
你的求准属性是一个数主

54:24.260 --> 54:25.260
那么这种情况下

54:25.260 --> 54:26.260
是不是要

54:26.260 --> 54:27.260
继续循环指节点

54:27.260 --> 54:28.260
对吧

54:28.260 --> 54:29.260
是不是又重新调用

54:29.260 --> 54:30.260
getPassName fromName

54:30.260 --> 54:32.260
把我们的Name传进去

54:32.260 --> 54:33.260
Name是不变的

54:33.260 --> 54:34.260
然后BaseUIL

54:34.260 --> 54:36.260
是不是要传新的UIL

54:36.260 --> 54:37.260
U Pass

54:37.260 --> 54:38.260
对吧

54:38.260 --> 54:39.260
然后数主传

54:39.260 --> 54:40.260
是不是传item.ch

54:40.260 --> 54:41.260
对吧

54:41.260 --> 54:42.260
那么

54:42.260 --> 54:43.260
把他的返回结果拿到

54:43.260 --> 54:45.260
他的返回结果拿到

54:45.260 --> 54:46.260
这里

54:46.260 --> 54:48.260
拿到一个结果

54:48.260 --> 54:50.260
拿到一个结果

54:50.260 --> 54:52.260
啥结果呢

54:53.260 --> 54:55.260
比方说

54:55.260 --> 54:57.260
拿到一个结果就是

54:57.260 --> 54:58.260
Pass

54:58.260 --> 54:59.260
这个结果

54:59.260 --> 55:00.260
那么这个结果

55:00.260 --> 55:01.260
有可能拿得到

55:01.260 --> 55:02.260
有可能拿不到

55:02.260 --> 55:03.260
比方说

55:03.260 --> 55:04.260
我们匹配的是首页地址

55:04.260 --> 55:05.260
对吧

55:05.260 --> 55:06.260
那么这个地址匹配不到

55:06.260 --> 55:07.260
对吧

55:07.260 --> 55:08.260
匹配他的指节点

55:08.260 --> 55:09.260
指节点是不是也匹配不到

55:09.260 --> 55:10.260
匹配不到这些结果

55:10.260 --> 55:11.260
匹配不到

55:11.260 --> 55:12.260
我们比较首页

55:12.260 --> 55:13.260
首页我们是Home

55:13.260 --> 55:14.260
我们传令的是Home

55:14.260 --> 55:15.260
这个Name

55:15.260 --> 55:16.260
那么这个是不是匹配不到

55:16.260 --> 55:17.260
匹配不到

55:17.260 --> 55:18.260
是不是他也匹配不到

55:18.260 --> 55:19.260
他也匹配不到

55:19.260 --> 55:20.260
对吧

55:20.260 --> 55:21.260
都匹配不到

55:21.260 --> 55:22.260
那么匹配不到

55:22.260 --> 55:23.260
这一块是不是返回的

55:23.260 --> 55:24.260
是一个Undefined

55:24.260 --> 55:25.260
对不对

55:25.260 --> 55:26.260
那么如果说

55:26.260 --> 55:27.260
他返回的

55:27.260 --> 55:29.260
不是Undefined

55:30.260 --> 55:32.260
不等于Undefined

55:32.260 --> 55:34.260
那么是不是匹配到了

55:34.260 --> 55:35.260
是不是匹配到了

55:35.260 --> 55:36.260
没有匹配到

55:36.260 --> 55:37.260
我们继续

55:37.260 --> 55:38.260
就无所谓

55:38.260 --> 55:39.260
没有匹配到

55:39.260 --> 55:40.260
我们继续下一次循环

55:40.260 --> 55:41.260
如果说

55:41.260 --> 55:42.260
他这里匹配到了

55:42.260 --> 55:43.260
怎么办

55:43.260 --> 55:44.260
匹配到了怎么办

55:44.260 --> 55:45.260
那么我们是不是

55:45.260 --> 55:46.260
直接返回这个Pass

55:46.260 --> 55:47.260
对不对

55:47.260 --> 55:48.260
如果你

55:48.260 --> 55:49.260
我自己没有匹配到

55:49.260 --> 55:51.260
但是我的指节点匹配到了

55:51.260 --> 55:52.260
OK 指节点匹配到了

55:52.260 --> 55:54.260
我直接返回就完事了

55:54.260 --> 55:55.260
那么这个判断出来了过后

55:55.260 --> 55:56.260
如果这个判断没有进

55:56.260 --> 55:58.260
是不是指节点也没有匹配到

55:58.260 --> 55:59.260
也没有匹配到

55:59.260 --> 56:01.260
那就什么事情都不干

56:01.260 --> 56:02.260
对不对

56:02.260 --> 56:03.260
什么事情都不干

56:03.260 --> 56:04.260
这是他宿主的情况

56:04.260 --> 56:06.260
因为他不是宿主了

56:06.260 --> 56:07.260
他就没有指节点

56:07.260 --> 56:08.260
没有指节点

56:08.260 --> 56:09.260
我们去看下一个节点了

56:09.260 --> 56:10.260
就不管了

56:10.260 --> 56:11.260
就完事了

56:11.260 --> 56:12.260
这个还是就写完了

56:12.260 --> 56:13.260
GetPassFromName

56:13.260 --> 56:14.260
就写完了

56:14.260 --> 56:15.260
PassName

56:15.260 --> 56:16.260
写完了

56:17.260 --> 56:19.260
好 如果说

56:19.260 --> 56:20.260
这个PassName

56:20.260 --> 56:22.260
最终还是没有指

56:22.260 --> 56:24.260
如果说这个toPassName

56:24.260 --> 56:25.260
没有指

56:25.260 --> 56:26.260
等于什么 onD犯

56:26.260 --> 56:27.260
就是没有匹配到

56:27.260 --> 56:28.260
任何一个Name

56:28.260 --> 56:29.260
那么这个Name属性

56:29.260 --> 56:30.260
是不是写的有问题

56:30.260 --> 56:31.260
该爆错

56:31.260 --> 56:32.260
NewError

56:32.260 --> 56:34.260
Name属性

56:35.260 --> 56:38.950
Name属性值

56:38.950 --> 56:39.950
什么值呢

56:39.950 --> 56:41.950
to.name

56:41.950 --> 56:42.950
无效

56:42.950 --> 56:44.950
Name属性值无效

56:44.950 --> 56:45.950
好 完事了

56:45.950 --> 56:46.950
就写完了

56:46.950 --> 56:47.950
咱们来看效果

56:48.950 --> 56:49.950
看一下首页

56:50.950 --> 56:51.950
看一下新闻页

56:51.950 --> 56:52.950
看一下新闻首页

56:52.950 --> 56:53.950
新闻详情

56:53.950 --> 56:54.950
新闻十二期

56:54.950 --> 56:56.950
是没问题

56:56.950 --> 56:58.950
接下来我们来改一下配置

56:58.950 --> 56:59.950
配置里边

56:59.950 --> 57:00.950
新闻

57:00.950 --> 57:02.950
我们把这里改成NS

57:02.950 --> 57:03.950
你看一下

57:03.950 --> 57:04.950
就改这个一个地方

57:04.950 --> 57:05.950
保存

57:06.950 --> 57:07.950
名字不改就行了

57:07.950 --> 57:08.950
名字不改

57:08.950 --> 57:09.950
你看新闻页

57:10.950 --> 57:11.950
是不是NS

57:11.950 --> 57:12.950
你看没

57:12.950 --> 57:13.950
新闻首页

57:13.950 --> 57:14.950
新闻详情页

57:14.950 --> 57:15.950
新闻首页

57:15.950 --> 57:16.950
完全都没问题

57:16.950 --> 57:17.950
对吧

57:17.950 --> 57:18.950
到时候我们是不是

57:18.950 --> 57:19.950
只改配置就完事了

57:19.950 --> 57:20.950
其他地方什么都不用弄

57:20.950 --> 57:22.950
只要你名字不变就行了

57:22.950 --> 57:23.950
当然你名字变成他怪谁的

57:23.950 --> 57:24.950
对吧

57:24.950 --> 57:26.950
名字变成肯定不能怪他了

57:26.950 --> 57:27.950
他说

57:27.950 --> 57:28.950
60个名字无效

57:28.950 --> 57:29.950
他爆错了

57:29.950 --> 57:30.950
对不对

57:30.950 --> 57:31.950
就写出了一个

57:31.950 --> 57:32.950
跟Wheel

57:32.950 --> 57:33.950
Rotus

57:33.950 --> 57:35.950
几乎是一模一样的

57:35.950 --> 57:36.950
做法

57:36.950 --> 57:38.950
几乎是一模一样的做法

57:39.950 --> 57:40.950
这些路径可以随意更改

57:40.950 --> 57:42.950
比方说Detail

57:42.950 --> 57:44.950
这个是12期

57:45.950 --> 57:46.950
保存

57:46.950 --> 57:47.950
你看一下这些路径都可以变化

57:47.950 --> 57:48.950
都可以变化

57:48.950 --> 57:50.950
你看Detail

57:50.950 --> 57:51.950
12期

57:51.950 --> 57:52.950
看没

57:52.950 --> 57:53.950
都可以变化

57:53.950 --> 57:54.950
只需要改配置就完事了

57:54.950 --> 57:55.950
也就是通过这个例子

57:55.950 --> 57:57.950
我不是说让你们

57:57.950 --> 57:59.950
一定要学会这种邪法

57:59.950 --> 58:00.950
这个不是重点

58:00.950 --> 58:01.950
我只是通过这个例子

58:01.950 --> 58:02.950
告诉你

58:02.950 --> 58:03.950
Rex Rotor

58:03.950 --> 58:04.950
你不要小看他

58:04.950 --> 58:06.950
没看他功能简单

58:06.950 --> 58:07.950
他可以自己各种各样

58:07.950 --> 58:09.950
乱七八糟的封装

58:09.950 --> 58:11.950
各种华人都可以玩得出来

58:11.950 --> 58:12.950
因为他就是给你提供了一个

58:12.950 --> 58:13.950
普普通通的组件

58:13.950 --> 58:15.950
你看Rex的哲学思想

58:15.950 --> 58:17.950
包括Rex Rotor

58:17.950 --> 58:19.950
他们的哲学是一套体系的

58:19.950 --> 58:20.950
他们的哲学思想

58:20.950 --> 58:22.950
是一脉相承的

58:22.950 --> 58:23.950
虽然说

58:23.950 --> 58:24.950
他们两个

58:24.950 --> 58:25.950
并不是一家公司

58:25.950 --> 58:26.950
并不是

58:26.950 --> 58:27.950
并不是那个

58:27.950 --> 58:29.950
同一个团队做的

58:29.950 --> 58:31.950
但是他们的哲学思想是一致的

58:31.950 --> 58:33.950
Rex这个整个全家同里边

58:33.950 --> 58:35.950
他们的哲学思想都是一致的

58:35.950 --> 58:38.950
就是尽量的保持简洁和纯净

58:38.950 --> 58:40.950
提供最大的灵活度

58:40.950 --> 58:43.950
而不要去过多的去封装

58:43.950 --> 58:45.950
而他跟无忧那一套东西就是

58:45.950 --> 58:46.950
两骂事了

58:46.950 --> 58:47.950
无忧那一套东西

58:47.950 --> 58:49.950
它是要尽量的

58:49.950 --> 58:52.950
让你上手容易学习来方便

58:52.950 --> 58:54.950
降低学习成本

58:54.950 --> 58:55.950
容易理解

58:55.950 --> 58:57.950
这是无忧的那种哲学思想

58:57.950 --> 58:58.950
Rex这个哲学思想是不一样的

58:58.950 --> 59:00.950
它是要尽量的灵活度

59:00.950 --> 59:02.950
这也是为什么Rex

59:02.950 --> 59:03.950
它能够在中大型

59:03.950 --> 59:04.950
大动型项目里边

59:04.950 --> 59:06.950
广泛使用的原因

59:06.950 --> 59:08.950
你可以数一的怎么去玩它

59:08.950 --> 59:11.950
它没有给你对它进行任何的限制和约束

59:11.950 --> 59:13.950
没有任何的魔法在里面

59:13.950 --> 59:15.950
后面我们讲到原码过后

59:15.950 --> 59:16.950
你会发现Rex Rotor

59:16.950 --> 59:19.950
就那么回事你自己都可以写出来

59:20.950 --> 59:23.950
这是关于这些可我要说的东西

59:23.950 --> 59:26.950
希望大家通过这个例子能够体会到一些东西

59:26.950 --> 59:28.950
好了其他没啥了

