WEBVTT

00:00.050 --> 00:02.050
OK 欢迎回来

00:02.050 --> 00:05.050
好 这节课的话咱们继续啊

00:05.050 --> 00:10.050
好 上节课的话给大同学们讲了一下react中的这个主键状态

00:10.050 --> 00:12.050
以及这个数据的这个传递

00:12.050 --> 00:14.050
好 我们简单来回顾一下啊

00:14.050 --> 00:17.050
首先的话是关于这个主键状态啊

00:17.050 --> 00:19.050
主键状态的话其实就是什么呢

00:19.050 --> 00:21.050
就是主键里面内部的什么

00:21.050 --> 00:22.050
所以就是数据

00:22.050 --> 00:27.050
对吧 在react里面的话它叫做state 叫做状态

00:27.050 --> 00:30.050
你就类比于那个view里面的那个data

00:30.050 --> 00:33.050
我view主键里面是不是可以有那个data

00:33.050 --> 00:35.050
可以有这个我自己主键的数据

00:35.050 --> 00:40.050
对吧 好 然后早期的时候的话只有这个内主键

00:40.050 --> 00:42.050
它才能设置这个状态

00:42.050 --> 00:46.050
所以说早期的话这个内主键被称之为有状态主键

00:46.050 --> 00:50.050
然后那个函数主键的话被称之为无状态

00:50.050 --> 00:52.050
但是这个的话然后现在不是了

00:52.050 --> 00:54.050
现在的话函数主键就叫函数主键

00:54.050 --> 00:56.050
不会说函数主键是无状态的

00:56.050 --> 00:58.050
因为现在有hooks了

00:58.050 --> 01:02.050
然后然后这边来看一下啊

01:02.050 --> 01:03.050
如何来设置

01:03.050 --> 01:06.050
那我这边的话可以在这个constructor里面

01:06.050 --> 01:08.050
我这边通过this.state

01:08.050 --> 01:11.050
然后加这边的话来设置这个主键

01:11.050 --> 01:13.050
自身的一个状态

01:13.050 --> 01:14.050
也可以干嘛呢

01:14.050 --> 01:15.050
也可以减写对吧

01:15.050 --> 01:17.050
直接state等于

01:17.050 --> 01:18.050
这边给它一个对象

01:18.050 --> 01:20.050
来设置这个状态

01:20.050 --> 01:23.050
好 然后还要注意一点的就是

01:23.050 --> 01:26.050
你不要直接去修改这个状态字

01:26.050 --> 01:29.050
如果你想要修改

01:29.050 --> 01:31.050
比如说它的那个状态的一些数据的话

01:31.050 --> 01:33.050
你应该是通过什么呢

01:33.050 --> 01:36.050
通过它给你提供了一个set state方法

01:36.050 --> 01:38.050
你直接去修改的话

01:38.050 --> 01:39.050
它是感知不到的

01:39.050 --> 01:40.050
感知不到的话

01:40.050 --> 01:41.050
它这边也没有

01:41.050 --> 01:42.050
就是无法给你带来

01:42.050 --> 01:44.050
同步的这个仕途的更新

01:44.050 --> 01:45.050
你这边的话

01:45.050 --> 01:49.050
你通过这个set state去更新状态的话

01:49.050 --> 01:51.050
它就可以就是它的仕途

01:51.050 --> 01:53.050
和你的这边这个数据

01:53.050 --> 01:55.050
可以就是同步的

01:55.050 --> 01:58.050
好 然后接下来这边这个set state

01:58.050 --> 01:59.050
它对状态的改变

01:59.050 --> 02:01.050
可能是异步的

02:01.050 --> 02:02.050
这个我们在上节课

02:02.050 --> 02:03.050
是不是也演示过

02:03.050 --> 02:04.050
对不对

02:04.050 --> 02:05.050
一般来讲的话

02:05.050 --> 02:07.050
你如果是在事件里面

02:07.050 --> 02:09.050
你通过某一个事件

02:09.050 --> 02:11.050
去修改这个set state的话

02:11.050 --> 02:13.050
它这边就是异步的

02:14.050 --> 02:17.050
这边有一些最佳实践

02:17.050 --> 02:18.050
这个就不说了

02:18.050 --> 02:19.050
它里面还有一些

02:19.050 --> 02:20.050
各种各样的细节

02:20.050 --> 02:21.050
比如这个set state

02:21.050 --> 02:23.050
接受第二个参数

02:23.050 --> 02:24.050
然后这个set state的

02:24.050 --> 02:26.050
第一个参数可以是一个什么

02:26.050 --> 02:27.050
可以是一个函数

02:27.050 --> 02:28.050
对吧

02:28.050 --> 02:30.050
大家这边set state的话

02:30.050 --> 02:31.050
它会进行优化

02:31.050 --> 02:34.050
把多次set state进行一个合并

02:34.050 --> 02:35.050
这些的话

02:35.050 --> 02:38.050
我们在上节课都是演示过的

02:38.050 --> 02:39.050
好 然后上节课的话

02:39.050 --> 02:40.050
我们还讲了一个什么

02:40.050 --> 02:42.050
还讲了一个props

02:42.050 --> 02:43.050
这props的话

02:43.050 --> 02:44.050
对于大家来讲的话

02:44.050 --> 02:46.050
也不是什么新知识

02:46.050 --> 02:47.050
对吧

02:47.050 --> 02:48.050
你在学view的时候

02:48.050 --> 02:49.050
也学过这个props

02:49.050 --> 02:51.050
props说白了就是什么

02:51.050 --> 02:53.050
就是我的上一集这个组件

02:53.050 --> 02:55.050
传递给我的数据

02:55.050 --> 02:56.050
对不对

02:56.050 --> 02:58.050
让我这边通过这个props

02:58.050 --> 02:59.050
我来拿到

02:59.050 --> 03:01.050
你无论是函数组件

03:01.050 --> 03:02.050
还是这个类组件

03:02.050 --> 03:05.050
我都可以通过这个props

03:05.050 --> 03:08.050
来拿到这个就是上一集组件

03:08.050 --> 03:10.050
传递给我的数据

03:10.050 --> 03:12.050
好 那props这边的话

03:12.050 --> 03:15.050
这边还讲了一个关于这个插槽

03:15.050 --> 03:17.050
通过什么呢

03:17.050 --> 03:20.050
通过这个props.chosen

03:20.050 --> 03:22.050
就可以实现类似于这个view中

03:22.050 --> 03:24.050
插槽的这个功能

03:24.050 --> 03:26.050
当它这个插槽的话

03:26.050 --> 03:28.050
相比那个view里面的插槽的话

03:28.050 --> 03:30.050
功能稍微要弱一些

03:30.050 --> 03:31.050
像view里面的插槽

03:31.050 --> 03:33.050
还有那个什么具名插槽

03:33.050 --> 03:34.050
对吧

03:34.050 --> 03:35.050
我可以给插槽命名

03:35.050 --> 03:36.050
然后接下来指定

03:36.050 --> 03:38.050
插入到哪一个位置

03:38.050 --> 03:40.050
它这边就是反正整体的这边

03:40.050 --> 03:41.050
把你的这一

03:41.050 --> 03:43.050
就是把你你这边写的东西

03:43.050 --> 03:45.050
整个这一块

03:45.050 --> 03:47.050
插入到这里

03:47.050 --> 03:48.050
OK

03:48.050 --> 03:50.050
但它这边的话我看一下

03:50.050 --> 03:51.050
它这边的话

03:51.050 --> 03:54.050
r4.props.chosen

03:54.050 --> 03:55.050
这边的话

03:55.050 --> 03:56.050
可以试一下

03:56.050 --> 03:57.050
看一下能不能设置下标

03:57.050 --> 03:58.050
如果能设置下标

03:58.050 --> 03:59.050
因为它这边拿到的

03:59.050 --> 04:01.050
应该是个集合

04:01.050 --> 04:02.050
应该是个集合

04:02.050 --> 04:04.050
一会我们试一下

04:04.050 --> 04:05.050
一会我们试一下

04:05.050 --> 04:06.050
这边如果它这边

04:06.050 --> 04:07.050
可以通过下标的话

04:07.050 --> 04:09.050
倒也还

04:09.050 --> 04:11.050
但控制性也不强

04:11.050 --> 04:12.050
对不对

04:12.050 --> 04:13.050
不像view那样

04:13.050 --> 04:15.050
控制性其实也不强

04:15.050 --> 04:16.050
view的话是直接就是

04:16.050 --> 04:17.050
我可以取个名字

04:17.050 --> 04:18.050
我指定比如

04:18.050 --> 04:19.050
这一部分

04:19.050 --> 04:21.050
插入到那个插槽里面

04:21.050 --> 04:22.050
这一部分

04:22.050 --> 04:23.050
插入到那个插槽里面

04:23.050 --> 04:24.050
对吧

04:24.050 --> 04:26.050
OK

04:26.050 --> 04:28.050
然后面的话是

04:28.050 --> 04:30.050
props验证

04:30.050 --> 04:31.050
props验证就是对

04:31.050 --> 04:32.050
你传入进来的

04:32.050 --> 04:33.050
props

04:33.050 --> 04:35.050
它的一个有效性

04:35.050 --> 04:36.050
进行验证

04:36.050 --> 04:39.050
包括默认值的设置

04:39.050 --> 04:40.050
它现在的话

04:40.050 --> 04:41.050
这个有效性的话

04:41.050 --> 04:44.050
它是把它移到了一个叫做这个

04:44.050 --> 04:46.050
proptypes的这个裤

04:46.050 --> 04:48.050
所以你需要就是先安装

04:48.050 --> 04:49.050
安装这个裤

04:49.050 --> 04:50.050
安装了之后

04:50.050 --> 04:51.050
然后接下来的话

04:51.050 --> 04:53.050
这边你就可以设置

04:53.050 --> 04:54.050
props的一些限制了

04:54.050 --> 04:56.050
比如你看这里

04:56.050 --> 04:57.050
内幕

04:57.050 --> 04:59.050
限制它是3

04:59.050 --> 05:00.050
对吧

05:00.050 --> 05:02.050
然后你限制它

05:02.050 --> 05:04.050
就是给内

05:04.050 --> 05:05.050
内上面

05:05.050 --> 05:07.050
挂一个proptypes属性

05:07.050 --> 05:08.050
对应是一个对象

05:08.050 --> 05:09.050
如果是默认值

05:09.050 --> 05:11.050
默认值的话是给这个

05:11.050 --> 05:13.050
组件名上面挂一个

05:13.050 --> 05:14.050
proptypes

05:14.050 --> 05:15.050
对应的值也是一个对象

05:15.050 --> 05:17.050
对象里面就设置你的

05:17.050 --> 05:18.050
默认值

05:18.050 --> 05:19.050
对吧

05:19.050 --> 05:21.050
这是关于props的验证

05:21.050 --> 05:22.050
好

05:22.050 --> 05:23.050
然后最后的话

05:23.050 --> 05:24.050
我们还讲了一个

05:24.050 --> 05:25.050
这个状态提升

05:25.050 --> 05:26.050
状态提升的话

05:26.050 --> 05:28.050
然后

05:28.050 --> 05:29.050
在view里面

05:29.050 --> 05:30.050
你其实也是学过的

05:30.050 --> 05:31.050
就是什么

05:31.050 --> 05:34.050
就是指传副

05:34.050 --> 05:35.050
对不对

05:35.050 --> 05:36.050
指传副

05:36.050 --> 05:37.050
就是我这边的话

05:37.050 --> 05:40.050
如何传递数据给副主剑

05:40.050 --> 05:41.050
一般来讲的话

05:41.050 --> 05:42.050
就是触发什么

05:42.050 --> 05:45.050
是触发副主剑

05:45.050 --> 05:48.050
传递过来的这个事件

05:48.050 --> 05:49.050
对不对

05:49.050 --> 05:51.050
这怎么跳到这边来了

05:51.050 --> 05:53.050
触发副主剑

05:53.050 --> 05:55.050
传递过来的事件

05:55.050 --> 05:56.050
OK

05:56.050 --> 05:58.050
我们这边我们来看一下

05:58.050 --> 05:59.050
这个是上级课写的

05:59.050 --> 06:00.050
是吧

06:00.050 --> 06:01.050
上级课

06:01.050 --> 06:02.050
把上级课的例子

06:02.050 --> 06:04.050
我们这边再来看一下

06:04.050 --> 06:05.050
这里

06:05.050 --> 06:08.050
然后把这个打开

06:08.050 --> 06:11.050
把这个放到右边去

06:11.050 --> 06:15.580
这样子

06:15.580 --> 06:17.580
这里触发

06:17.580 --> 06:18.580
对吧

06:18.580 --> 06:20.580
我是指主剑传递过来的这个数据

06:20.580 --> 06:21.580
传递了一个山

06:21.580 --> 06:22.580
我看一下

06:22.580 --> 06:24.580
看一下代码

06:24.580 --> 06:27.580
指主剑

06:27.580 --> 06:28.580
我们的指主剑

06:28.580 --> 06:30.580
我们这边是用了一个什么

06:30.580 --> 06:31.580
用了一个

06:31.580 --> 06:33.580
我看一下barter

06:33.580 --> 06:35.580
不是barter

06:35.580 --> 06:36.580
这里

06:36.580 --> 06:38.580
这边触发副主剑

06:38.580 --> 06:39.580
传递过来的这个函数

06:39.580 --> 06:41.580
我们是不是给这个指主剑

06:41.580 --> 06:42.580
这边他自己有一个事件

06:42.580 --> 06:43.580
处理函数

06:43.580 --> 06:45.580
但在他自己的这个事件

06:45.580 --> 06:46.580
处理函数里面

06:46.580 --> 06:47.580
他做的事情很简单

06:47.580 --> 06:49.580
是不是调用副主剑

06:49.580 --> 06:51.580
跟我传递的这个函数

06:51.580 --> 06:52.580
对不对

06:52.580 --> 06:53.580
你看我们这边副主剑

06:53.580 --> 06:55.580
我们这边在写这个barter的时候

06:55.580 --> 06:56.580
不是barter

06:56.580 --> 06:57.580
在写这个hello的时候

06:57.580 --> 06:59.580
我们这边是不是给这个主剑

06:59.580 --> 07:00.580
是传递了一个

07:00.580 --> 07:02.580
叫做倾机state handle

07:02.580 --> 07:04.580
他对那值是什么

07:04.580 --> 07:06.580
是不是就是这个事件处理函数

07:06.580 --> 07:07.580
对不对

07:07.580 --> 07:09.580
相当于就是把这个事件处理函数

07:09.580 --> 07:10.580
传递给谁

07:10.580 --> 07:11.580
传递给了指主剑

07:11.580 --> 07:13.580
指主剑在这边通过props

07:13.580 --> 07:15.580
点倾机state handle

07:15.580 --> 07:19.580
就可以触发副主剑的这个函数

07:19.580 --> 07:21.580
接下来这边你就可以

07:21.580 --> 07:23.580
是传递数据了

07:23.580 --> 07:24.580
在这里

07:24.580 --> 07:25.580
对不对

07:25.580 --> 07:26.580
OK

07:26.580 --> 07:28.580
这就是关于这个状态提升

07:28.580 --> 07:29.580
上级课的话

07:29.580 --> 07:30.580
因为时间关系

07:30.580 --> 07:32.580
我这边的话

07:32.580 --> 07:35.580
我们来写个具体的例子

07:35.580 --> 07:36.580
上级课没有看具体的例子

07:36.580 --> 07:38.580
只简单看一下这边如何触发

07:38.580 --> 07:39.580
是吧

07:39.580 --> 07:42.580
我们来看一个具体的例子

07:42.580 --> 07:43.580
具体的例子

07:43.580 --> 07:45.580
然后我这边我来写个啥呢

07:45.580 --> 07:47.580
写个比如说写个这个

07:47.580 --> 07:49.580
写个这个汇率的

07:49.580 --> 07:51.580
我把这个就删了

07:51.580 --> 07:53.580
把这些都干掉

07:53.580 --> 07:55.580
这些就不要了

07:55.580 --> 07:57.580
把这儿

07:57.580 --> 07:59.580
把这儿

07:59.580 --> 08:01.580
这儿到这儿

08:01.580 --> 08:03.580
上面全部干掉吧

08:03.580 --> 08:05.580
干干净净的

08:05.580 --> 08:06.580
接下来我这边

08:06.580 --> 08:08.580
我先给我的这个主剑

08:08.580 --> 08:11.580
我先写一个状态

08:11.580 --> 08:12.580
状态

08:12.580 --> 08:14.580
我这边要实现一个什么呢

08:14.580 --> 08:16.580
实现一个这个同步的

08:16.580 --> 08:18.580
美元和人民币的一个转换

08:18.580 --> 08:19.580
然后接下来我这边

08:19.580 --> 08:20.580
定义两个

08:20.580 --> 08:23.580
一个是downer

08:23.580 --> 08:25.580
这是美元对吧

08:25.580 --> 08:26.580
美元多少钱

08:26.580 --> 08:29.580
一个是人民币

08:29.580 --> 08:30.580
人民币多少钱

08:30.580 --> 08:31.580
有两个状态

08:31.580 --> 08:32.580
然后接下来的话

08:32.580 --> 08:34.580
我这边under

08:34.580 --> 08:36.580
under

08:36.580 --> 08:41.170
under里面

08:41.170 --> 08:43.170
under里面的话我这边

08:43.170 --> 08:45.170
ritter

08:45.170 --> 08:47.170
然后接下来div

08:47.170 --> 08:48.170
里面的话

08:48.170 --> 08:49.170
然后接下来的话

08:49.170 --> 08:50.170
我写两个直主剑

08:50.170 --> 08:52.170
这边写错了

08:52.170 --> 08:54.170
这是小扩号

08:54.170 --> 08:56.170
这边的话

08:56.170 --> 08:58.170
我会渲染两个直主剑

08:58.170 --> 09:00.170
所以我在这里的话

09:00.170 --> 09:01.170
我新建一个

09:01.170 --> 09:04.170
叫做money

09:04.170 --> 09:06.170
money.js

09:06.170 --> 09:08.170
新建了之后这边

09:08.170 --> 09:10.170
ccf

09:10.170 --> 09:12.170
ccsf

09:12.170 --> 09:13.170
不是ccsf

09:13.170 --> 09:16.170
就是ccf

09:16.170 --> 09:19.170
是cc啥来着

09:19.170 --> 09:22.170
我记得是ccs

09:22.170 --> 09:23.170
好

09:23.170 --> 09:24.170
这是我们一会

09:24.170 --> 09:26.170
一会要用的了

09:26.170 --> 09:27.170
叫做money

09:27.170 --> 09:28.170
先随便写一点

09:28.170 --> 09:30.170
这边他还得

09:30.170 --> 09:32.170
import

09:32.170 --> 09:34.170
react

09:34.170 --> 09:35.170
from

09:35.170 --> 09:37.170
react

09:37.170 --> 09:39.170
然后这边的话就是

09:39.170 --> 09:41.170
react.

09:41.170 --> 09:42.170
对吧

09:42.170 --> 09:44.170
继承react.component

09:44.170 --> 09:45.170
这个类

09:45.170 --> 09:46.170
好

09:46.170 --> 09:47.170
然后在这里

09:47.170 --> 09:48.170
这里的话我们就来引入

09:48.170 --> 09:50.170
import

09:50.170 --> 09:52.170
money

09:52.170 --> 09:54.170
from

09:54.170 --> 09:56.170
money

09:57.170 --> 09:58.170
然后在这里

09:58.170 --> 09:59.170
这里的话我们就来使用

09:59.170 --> 10:01.170
这个主剑

10:01.170 --> 10:02.170
money

10:02.170 --> 10:04.170
这个就写单标签就可以了

10:04.170 --> 10:06.740
好

10:06.740 --> 10:07.740
那我现在的话

10:07.740 --> 10:08.740
你看现在是不是就是一个

10:08.740 --> 10:09.740
副子的结构

10:09.740 --> 10:11.740
把这一把收掉

10:11.740 --> 10:13.740
这边是不是就是一个副子结构

10:13.740 --> 10:14.740
对不对

10:14.740 --> 10:15.740
这个是我的副主剑

10:15.740 --> 10:17.740
副主剑里面使用了什么

10:17.740 --> 10:19.740
是不是使用了这个直主剑

10:19.740 --> 10:21.740
money这个主剑

10:21.740 --> 10:22.740
对吧

10:22.740 --> 10:23.740
只不过现在的话

10:23.740 --> 10:24.740
啥都没有

10:24.740 --> 10:25.740
现在你看效果的话

10:25.740 --> 10:26.740
这边

10:26.740 --> 10:27.740
这边啥都没有

10:27.740 --> 10:29.740
这边这个money

10:29.740 --> 10:30.740
money这边还不对

10:30.740 --> 10:31.740
这边应该是

10:31.740 --> 10:33.740
当前目录下面的

10:33.740 --> 10:35.740
component下面的money

10:35.740 --> 10:36.740
OK

10:36.740 --> 10:37.740
好

10:37.740 --> 10:38.740
然后接下来的话

10:38.740 --> 10:39.740
回到money

10:39.740 --> 10:40.740
回到这个money这边

10:40.740 --> 10:41.740
好

10:41.740 --> 10:42.740
money这边的话

10:42.740 --> 10:43.740
我们这里

10:43.740 --> 10:45.740
我们就写一个

10:45.740 --> 10:46.740
这边

10:46.740 --> 10:51.010
field set

10:51.010 --> 10:53.010
field set

10:53.010 --> 10:55.010
在field set里面

10:55.010 --> 10:56.010
然后接下来的话

10:56.010 --> 10:58.010
这个

10:58.010 --> 10:59.010
这个标签

10:59.010 --> 11:01.010
可能很多同学都没用过

11:01.010 --> 11:03.010
现在这个标签也用的很少了

11:03.010 --> 11:04.010
OK

11:04.010 --> 11:05.010
这个的话是什么

11:05.010 --> 11:06.010
这个就是你可以写标题

11:06.010 --> 11:08.010
不用在这里写标题

11:08.010 --> 11:09.010
OK

11:09.010 --> 11:10.010
然后下面

11:10.010 --> 11:12.010
下面的话你就写你的内容

11:12.010 --> 11:13.010
就写你的内容

11:13.010 --> 11:14.010
好

11:14.010 --> 11:15.010
然后这边让它选出来

11:15.010 --> 11:16.010
就是这个样子

11:16.010 --> 11:17.010
你看看

11:17.010 --> 11:18.010
就这样子了

11:18.010 --> 11:19.010
这边有个标题

11:19.010 --> 11:20.010
大家这边

11:20.010 --> 11:22.010
这边是你的内容

11:22.010 --> 11:23.010
OK

11:23.010 --> 11:24.010
但这个现在用的很少了

11:24.010 --> 11:25.010
用的很少了

11:25.010 --> 11:26.010
好

11:26.010 --> 11:27.010
然后接下来

11:27.010 --> 11:28.010
我们这边的话

11:28.010 --> 11:30.010
我们接收这个props

11:30.010 --> 11:32.010
props

11:32.010 --> 11:33.010
props的话

11:33.010 --> 11:35.010
我这边的话得有一个super

11:35.010 --> 11:37.010
我直接把这个改成那个算了

11:37.010 --> 11:39.010
改成那个函数组件

11:39.010 --> 11:41.010
方便一些

11:43.010 --> 11:45.010
rcf

11:45.010 --> 11:47.010
直接改成函数组件

11:47.010 --> 11:49.010
直接这边

11:49.010 --> 11:51.010
props

11:51.010 --> 11:53.010
return

11:53.010 --> 11:54.010
然后这里

11:54.010 --> 11:56.010
这里直接就是这一块

11:58.010 --> 11:59.010
拿过来

11:59.010 --> 12:00.010
OK

12:00.010 --> 12:01.010
格式画一下

12:01.010 --> 12:02.010
好

12:02.010 --> 12:03.010
然后这边这个标题

12:03.010 --> 12:04.010
标题的话

12:04.010 --> 12:05.010
我就接收什么呢

12:05.010 --> 12:06.010
我就接收这个复原数

12:06.010 --> 12:07.010
传递给我的

12:07.010 --> 12:08.010
这样子

12:08.010 --> 12:09.010
我这边我分个屏

12:09.010 --> 12:10.010
分个屏

12:10.010 --> 12:11.010
这样子

12:11.010 --> 12:13.830
方便大家看

12:13.830 --> 12:14.830
把这个收起来

12:14.830 --> 12:15.830
好

12:15.830 --> 12:16.830
来一下我们这边

12:16.830 --> 12:17.830
一点一点来看

12:17.830 --> 12:18.830
好

12:18.830 --> 12:19.830
我这边的话

12:19.830 --> 12:20.830
我传一个什么呢

12:20.830 --> 12:21.830
传一个text

12:21.830 --> 12:22.830
text

12:22.830 --> 12:23.830
比如第一个

12:23.830 --> 12:24.830
美元

12:25.830 --> 12:26.830
第二个

12:26.830 --> 12:28.830
第二个text

12:28.830 --> 12:29.830
传一个

12:29.830 --> 12:31.830
人民币

12:31.830 --> 12:33.830
人民币

12:33.830 --> 12:34.830
OK

12:34.830 --> 12:35.830
好

12:35.830 --> 12:36.830
然后接下来在这边

12:36.830 --> 12:38.830
这边的话就是应该是props

12:38.830 --> 12:40.830
点text

12:40.830 --> 12:41.830
是不是这样子

12:41.830 --> 12:42.830
对吧

12:42.830 --> 12:43.830
我们这边我们来看一下

12:43.830 --> 12:44.830
好

12:44.830 --> 12:45.830
首先这边就变了

12:45.830 --> 12:46.830
美元人民币

12:46.830 --> 12:47.830
好

12:47.830 --> 12:48.830
然后接下来

12:48.830 --> 12:49.830
在这里的话

12:49.830 --> 12:50.830
我们不是p表切

12:50.830 --> 12:51.830
我们这边是一个什么呢

12:51.830 --> 12:52.830
是一个输入

12:53.830 --> 12:54.830
是个输入

12:54.830 --> 12:55.830
输入的话

12:55.830 --> 12:56.830
然后接下来

12:56.830 --> 12:58.830
我们这边对应的Value

12:58.830 --> 13:00.830
Value的话是你这边

13:00.830 --> 13:01.830
传递给我的

13:01.830 --> 13:02.830
这边的话

13:02.830 --> 13:03.830
Value

13:03.830 --> 13:05.830
这边传一个money

13:07.830 --> 13:09.830
money对应一个z

13:09.830 --> 13:10.830
点state

13:10.830 --> 13:12.830
点downer

13:12.830 --> 13:13.830
OK

13:13.830 --> 13:15.830
这边的话对应的是

13:18.460 --> 13:20.460
这边对应的是z.state

13:20.460 --> 13:22.460
点rmb

13:23.460 --> 13:24.460
然后接下来

13:24.460 --> 13:26.460
我们这边就应该是什么

13:26.460 --> 13:28.460
这边的话就应该是Value

13:29.460 --> 13:31.460
Value等于一个

13:32.460 --> 13:35.460
props.money

13:35.460 --> 13:36.460
对吧

13:36.460 --> 13:37.460
保存一下

13:37.460 --> 13:38.460
但你现在的话

13:38.460 --> 13:39.460
什么都看不到

13:39.460 --> 13:40.460
现在

13:42.460 --> 13:43.460
哦

13:43.460 --> 13:44.460
这里

13:44.460 --> 13:45.460
这里

13:45.460 --> 13:49.460
保存

13:49.460 --> 13:50.460
保存了

13:50.460 --> 13:51.460
你现在的话

13:52.460 --> 13:53.460
Value

13:53.460 --> 13:55.460
prop to form result

13:55.460 --> 13:57.460
这个是我们一会儿再写

13:57.460 --> 13:59.460
它需要你写一个on-chain

13:59.460 --> 14:01.460
就你这边写了一个input

14:01.460 --> 14:02.460
就这边

14:02.460 --> 14:04.460
这边的话你需要有一个on-chain

14:06.460 --> 14:08.460
on-chain等于一个

14:08.460 --> 14:10.460
我们给它绑一个事件

14:10.460 --> 14:12.460
这边叫做handle-chain

14:13.460 --> 14:14.460
handle-chain

14:14.460 --> 14:15.460
OK

14:15.460 --> 14:16.460
然后你在这边

14:16.460 --> 14:17.460
这边是不是就需要

14:17.460 --> 14:19.460
输写一个事件处理喊说

14:19.460 --> 14:20.460
放心

14:21.460 --> 14:22.460
handle-chain

14:24.460 --> 14:25.460
OK

14:25.460 --> 14:26.460
你这边的话

14:26.460 --> 14:27.460
你每次这个input输入的时候

14:27.460 --> 14:29.460
它这边就是会触发这个函数

14:29.460 --> 14:31.460
我们这边我们来看一下

14:31.460 --> 14:33.460
我们就随便打印一个

14:33.460 --> 14:34.460
好

14:34.460 --> 14:35.460
刷新一下

14:35.460 --> 14:36.460
现在那个错误就没有了

14:36.460 --> 14:37.460
对吧

14:37.460 --> 14:38.460
接下来我在这边

14:38.460 --> 14:39.460
让我输入的时候

14:39.460 --> 14:40.460
你在这是看不到的

14:41.460 --> 14:42.460
这是看不到的

14:42.460 --> 14:43.460
它这边的话

14:43.460 --> 14:45.460
它每次会触发这个函数

14:45.460 --> 14:47.460
这个其实是我们这些课

14:47.460 --> 14:48.460
这些课

14:48.460 --> 14:50.460
我们要讲的那个表单

14:50.460 --> 14:53.460
表单里面的关于这个受控组件

14:53.460 --> 14:55.460
在react里面

14:55.460 --> 14:57.460
它是通过这个状态来进行

14:57.460 --> 14:59.460
对表单的空间进行一个控制的

14:59.460 --> 15:01.460
其实和view是一样的

15:01.460 --> 15:02.460
view的话也是

15:02.460 --> 15:04.460
是不是绑在那个data上面

15:04.460 --> 15:05.460
对不对

15:05.460 --> 15:06.460
其实是一样的

15:06.460 --> 15:07.460
OK

15:07.460 --> 15:08.460
好

15:08.460 --> 15:09.460
现在大家可以看到

15:09.460 --> 15:10.460
我这边在输入的时候

15:10.460 --> 15:12.460
这边是不是触发了

15:12.460 --> 15:13.460
什么

15:13.460 --> 15:14.460
是不是触发了这个

15:14.460 --> 15:15.460
对不对

15:15.460 --> 15:16.460
这边on-chain级

15:16.460 --> 15:17.460
已经了事件了

15:17.460 --> 15:19.460
好 接下来我在值主件里面

15:19.460 --> 15:20.460
我做什么事情

15:20.460 --> 15:22.460
我要做的事情很简单

15:22.460 --> 15:24.460
在值主件中

15:24.460 --> 15:26.460
在值主件中

15:26.460 --> 15:31.460
要做的事情很简单

15:31.460 --> 15:32.460
要做什么

15:32.460 --> 15:37.460
就是将用户输入的值

15:37.460 --> 15:39.460
传递给什么

15:39.460 --> 15:42.460
传递给副主件

15:42.460 --> 15:43.460
看到没有

15:43.460 --> 15:44.460
那这里的话

15:44.460 --> 15:47.460
是涉及到状态的提升

15:47.460 --> 15:48.460
接下来让什么

15:48.460 --> 15:51.460
让副主件

15:51.460 --> 15:57.460
副主件来进行修改

15:57.460 --> 15:59.460
让副主件来进行修改

15:59.460 --> 16:00.460
OK

16:00.460 --> 16:01.460
那副主件的话

16:01.460 --> 16:03.460
你得给我传一个函数

16:03.460 --> 16:04.460
对吧

16:04.460 --> 16:05.460
得传一个函数

16:05.460 --> 16:06.460
我们这边的话

16:06.460 --> 16:07.460
回头我们这边

16:07.460 --> 16:10.460
会传一个trice form

16:10.460 --> 16:13.460
trice form等于

16:13.460 --> 16:15.460
包括这边

16:15.460 --> 16:17.460
trice form等于

16:17.460 --> 16:20.460
这边就是会给他传一个函数过去

16:20.460 --> 16:22.460
这个函数我们一会再来完善

16:22.460 --> 16:23.460
那接下来这边的话

16:23.460 --> 16:24.460
是不是就是

16:24.460 --> 16:29.970
probs.trice form

16:29.970 --> 16:30.970
对不对

16:30.970 --> 16:32.970
副主件你这边

16:32.970 --> 16:33.970
trice form

16:33.970 --> 16:34.970
对应的值一会

16:34.970 --> 16:35.970
这边肯定是个函数

16:35.970 --> 16:36.970
这边也是

16:36.970 --> 16:37.970
肯定是对应一个函数

16:37.970 --> 16:38.970
所以说我这边

16:38.970 --> 16:40.970
就是probs.trice form

16:40.970 --> 16:41.970
调用它这边

16:41.970 --> 16:43.970
你给我传递的函数

16:43.970 --> 16:44.970
对不对

16:44.970 --> 16:45.970
好

16:45.970 --> 16:46.970
然后接下来

16:46.970 --> 16:47.970
我把这个用户输入的值

16:47.970 --> 16:48.970
给他传过去

16:48.970 --> 16:50.970
如何拿到用户输入的值呢

16:50.970 --> 16:51.970
很简单

16:51.970 --> 16:52.970
你这边的1点

16:52.970 --> 16:54.970
target.value

16:54.970 --> 16:56.970
当你这边的这个1

16:56.970 --> 16:57.970
大家写一下

16:57.970 --> 16:58.970
OK

16:58.970 --> 16:59.970
这就是我们指数件

16:59.970 --> 17:01.970
我们指数件其实没做什么

17:01.970 --> 17:02.970
就是你这边

17:02.970 --> 17:04.970
通过1点target.value

17:04.970 --> 17:06.970
拿到这个input

17:06.970 --> 17:07.970
输入框的这个值

17:07.970 --> 17:08.970
然后接下来

17:08.970 --> 17:09.970
传递给什么呢

17:09.970 --> 17:11.970
传递给副主件

17:11.970 --> 17:12.970
让副主件

17:12.970 --> 17:14.970
来进行修改

17:14.970 --> 17:16.970
副主件的进行修改

17:16.970 --> 17:17.970
好那接下来

17:17.970 --> 17:19.970
回到我们的这个副主件

17:19.970 --> 17:21.970
副主件这边

17:21.970 --> 17:22.970
这边的话

17:22.970 --> 17:23.970
我们就要写两个函数

17:23.970 --> 17:26.970
一个是这个trice form

17:26.970 --> 17:27.970
to

17:27.970 --> 17:29.970
这个rmb

17:29.970 --> 17:31.970
把它转成是命B

17:31.970 --> 17:33.970
我们这边就写这个箭头函数

17:33.970 --> 17:36.280
OK

17:36.280 --> 17:38.280
这边回头会接收一个

17:38.280 --> 17:41.280
value值进行操作

17:41.280 --> 17:42.280
还有一个什么呢

17:42.280 --> 17:43.280
还有一个是trice form

17:43.280 --> 17:45.280
to this downer

17:45.280 --> 17:49.040
downer

17:49.040 --> 17:50.040
OK

17:50.040 --> 17:51.040
好那你这边下面的话

17:51.040 --> 17:52.040
你这边美元

17:52.040 --> 17:54.040
美元的话就是要转成命B

17:54.040 --> 17:56.040
这边就把它

17:56.040 --> 17:57.040
放过来

17:57.040 --> 17:59.040
这边你还不能直接占据

17:59.040 --> 18:00.040
这边应该是什么

18:00.040 --> 18:01.040
this

18:01.040 --> 18:03.040
对吧因为我们这是类组件

18:03.040 --> 18:05.040
this.trice form

18:05.040 --> 18:07.040
这边是this

18:07.040 --> 18:12.120
this.trice form to downer

18:12.120 --> 18:13.120
OK

18:13.120 --> 18:15.120
好那接下来

18:15.120 --> 18:16.120
这边我们看一下

18:16.120 --> 18:17.120
这边接收到

18:17.120 --> 18:19.120
这边我们打印一下value

18:19.120 --> 18:21.120
我们保存一下

18:21.120 --> 18:22.120
保存了之后

18:22.120 --> 18:23.120
然后下这边来看一下

18:23.120 --> 18:24.120
在这边美元

18:24.120 --> 18:25.120
这边输个123

18:25.120 --> 18:27.120
能不能接收到

18:27.120 --> 18:28.120
能够接收到

18:28.120 --> 18:29.120
对不对

18:29.120 --> 18:30.120
能够接收到

18:30.120 --> 18:32.120
好能够接收到之后

18:32.120 --> 18:33.120
然后接下来的话

18:33.120 --> 18:34.120
我们这里

18:34.120 --> 18:36.120
这边让我们接收到

18:36.120 --> 18:37.120
他的这个值

18:37.120 --> 18:38.120
然后接下来

18:38.120 --> 18:39.120
我们这边进行个转换

18:39.120 --> 18:40.120
e form

18:40.120 --> 18:41.120
这边首先把它转成

18:41.120 --> 18:43.120
parse throat

18:43.120 --> 18:44.120
throat

18:44.120 --> 18:45.120
value

18:45.120 --> 18:47.120
如果能够转换出来值

18:47.120 --> 18:48.120
或者什么呢

18:48.120 --> 18:50.120
或者你的这个value

18:50.120 --> 18:53.120
全等于一个空置付串

18:53.120 --> 18:54.120
或者什么呢

18:54.120 --> 18:56.120
或者你这边parse throat

18:56.120 --> 18:57.120
value

18:57.120 --> 18:58.120
如果是

18:58.120 --> 19:00.120
全等于一个零

19:00.120 --> 19:01.120
OK这种的话

19:01.120 --> 19:03.120
我们都是让你可以转换

19:03.120 --> 19:04.120
对吧否则l是的话

19:04.120 --> 19:05.120
我们就是让你

19:05.120 --> 19:07.120
你只能输入数字

19:07.120 --> 19:09.120
这边alert

19:09.120 --> 19:12.120
这边请输入

19:12.120 --> 19:17.070
请输入数字

19:17.070 --> 19:18.070
OK

19:18.070 --> 19:19.070
然后在e form里面

19:19.070 --> 19:20.070
在e form里面的话

19:20.070 --> 19:21.070
我们就通过

19:21.070 --> 19:23.070
this.setState

19:23.070 --> 19:24.070
这个setState

19:24.070 --> 19:26.070
来重新设置

19:26.070 --> 19:28.070
设置这个downer

19:28.070 --> 19:29.070
对吧

19:29.070 --> 19:30.070
downer

19:30.070 --> 19:31.070
downer的话

19:31.070 --> 19:32.070
是不是就是

19:32.070 --> 19:33.070
我这边用户

19:33.070 --> 19:34.070
是不是在这输的值

19:34.070 --> 19:35.070
那downer是不是输的

19:35.070 --> 19:36.070
多少

19:36.070 --> 19:37.070
是不是就是多少

19:37.070 --> 19:38.070
对不对

19:38.070 --> 19:39.070
那这边是不是就是value

19:39.070 --> 19:40.070
主要是什么呢

19:40.070 --> 19:42.070
主要是这个人命b

19:42.070 --> 19:43.070
人命b

19:44.070 --> 19:45.070
人命b的话

19:45.070 --> 19:46.070
这边的话

19:46.070 --> 19:47.070
我们这个value

19:47.070 --> 19:48.070
我们判断一下

19:48.070 --> 19:50.070
他是否为空

19:50.070 --> 19:52.070
如果为空的话

19:52.070 --> 19:53.070
我们让他就是什么

19:53.070 --> 19:54.070
就是空

19:54.070 --> 19:55.070
否则的话

19:55.070 --> 19:56.070
这边这个

19:56.070 --> 19:57.070
我们让他这个value

19:57.070 --> 19:58.070
要转成人命b

19:58.070 --> 19:59.070
我们这边

19:59.070 --> 20:00.070
我们来计算一下

20:00.070 --> 20:02.070
这边我们来看一下

20:04.070 --> 20:06.070
一美元

20:06.070 --> 20:07.070
一美元

20:07.070 --> 20:09.070
换多少人命b

20:10.070 --> 20:12.070
一美元是7.32

20:12.070 --> 20:13.070
55

20:13.070 --> 20:14.070
对吧

20:14.070 --> 20:15.070
7.3255

20:15.070 --> 20:16.070
好像今天又涨了点

20:18.070 --> 20:19.070
7.3255

20:19.070 --> 20:21.070
那这边是不是就是value

20:21.070 --> 20:22.070
乘一个

20:22.070 --> 20:24.070
7.3255

20:24.070 --> 20:25.070
对吧

20:25.070 --> 20:27.070
然后既然你这个

20:28.070 --> 20:29.070
这个的话

20:29.070 --> 20:30.070
他乘出来的话

20:30.070 --> 20:31.070
小数位会很多

20:31.070 --> 20:32.070
不过好在你这个东西

20:32.070 --> 20:33.070
是个数字

20:33.070 --> 20:34.070
数字的话

20:34.070 --> 20:35.070
刚好他有一个方法

20:35.070 --> 20:36.070
做这个

20:36.070 --> 20:37.070
点

20:39.450 --> 20:41.450
这边打成中文的了

20:41.450 --> 20:42.450
数字的话

20:42.450 --> 20:44.450
有个方法叫做to fixed

20:44.450 --> 20:45.450
对吧

20:45.450 --> 20:46.450
保留两位就可以了

20:46.450 --> 20:47.450
ok

20:47.450 --> 20:48.450
你看这边的话

20:48.450 --> 20:50.450
就是把美元

20:50.450 --> 20:51.450
转成人命b

20:51.450 --> 20:52.450
我们来看一下效果

20:52.450 --> 20:53.450
效果应该已经出来了

20:53.450 --> 20:55.450
不用这边写1

20:55.450 --> 20:56.450
就出来了

20:56.450 --> 20:57.450
对不对

20:57.450 --> 20:58.450
10美元

20:58.450 --> 20:59.450
对吧那你这边的话

20:59.450 --> 21:00.450
比如说180美元

21:00.450 --> 21:01.450
是不是这边

21:01.450 --> 21:02.450
他就转出来了

21:02.450 --> 21:03.450
ok

21:03.450 --> 21:04.450
但你这边

21:04.450 --> 21:05.450
你转人命b的话

21:05.450 --> 21:06.450
现在还没写

21:06.450 --> 21:07.450
你看我现在人命b

21:07.450 --> 21:08.450
我这边我都写不动

21:08.450 --> 21:09.450
我都敲不动

21:09.450 --> 21:10.450
ok

21:10.450 --> 21:11.450
那转人命b

21:11.450 --> 21:13.450
你这边就直接复制就可以了

21:14.450 --> 21:15.450
复制

21:15.450 --> 21:16.450
粘过来

21:16.450 --> 21:17.450
粘过来

21:17.450 --> 21:18.450
然后接下来的话

21:18.450 --> 21:19.450
这里

21:19.450 --> 21:20.450
这里呢

21:20.450 --> 21:21.450
稍微判断一下

21:21.450 --> 21:22.450
这里的话就是什么

21:22.450 --> 21:23.450
这里的话是不是

21:23.450 --> 21:24.450
人命b不变了

21:24.450 --> 21:25.450
人命b你这边

21:25.450 --> 21:27.450
输了4多少就是多少

21:27.450 --> 21:28.450
对不对

21:28.450 --> 21:29.450
换做谁来变了

21:29.450 --> 21:30.450
这美元要变

21:30.450 --> 21:31.450
美元的话

21:31.450 --> 21:32.450
这边也是一样的

21:32.450 --> 21:33.450
首先判断一下

21:33.450 --> 21:35.450
是否是空置串

21:35.450 --> 21:37.450
如果是空置串的话

21:37.450 --> 21:38.450
我们就让它是空置串

21:38.450 --> 21:39.450
否则的话

21:39.450 --> 21:40.450
这边的话

21:41.450 --> 21:42.450
人命b

21:42.450 --> 21:43.450
人命b汇率就又不一样了

21:43.450 --> 21:44.450
是吧

21:44.450 --> 21:45.450
好这边

21:45.450 --> 21:49.080
一人命b

21:49.080 --> 21:52.080
一人命b等于多少美元

21:52.080 --> 21:56.080
一人命b等于0.1365

21:58.080 --> 21:59.080
好这边呢

21:59.080 --> 22:00.080
就是

22:00.080 --> 22:01.080
value

22:01.080 --> 22:03.080
乘一个

22:03.080 --> 22:05.080
0.1365

22:06.080 --> 22:07.080
大家这边

22:07.080 --> 22:08.080
同样保留两位

22:08.080 --> 22:10.080
点2 fixed

22:10.080 --> 22:11.080
2

22:12.080 --> 22:13.080
保存

22:13.080 --> 22:15.080
保存到这边来看一下

22:16.080 --> 22:17.080
这里

22:17.080 --> 22:18.080
人命b

22:18.080 --> 22:19.080
100人命b

22:19.080 --> 22:20.080
这就是13块

22:20.080 --> 22:21.080
对不对

22:21.080 --> 22:22.080
一人命b

22:22.080 --> 22:23.080
0.14

22:23.080 --> 22:24.080
这边我们是2 fixed

22:24.080 --> 22:26.080
它这边会保留两位

22:26.080 --> 22:27.080
OK

22:27.080 --> 22:29.080
这边就做出来了

22:29.080 --> 22:30.080
对不对

22:30.080 --> 22:31.080
OK

22:31.080 --> 22:32.080
这边就是这个例子

22:32.080 --> 22:34.080
这个例子就用到了什么呢

22:34.080 --> 22:36.080
就用到了这个状态提升

22:36.080 --> 22:37.080
我们这个

22:37.080 --> 22:39.080
你注意用户在输入的时候

22:39.080 --> 22:41.080
这个输入框是什么

22:41.080 --> 22:43.080
输入框是指主键

22:43.080 --> 22:44.080
对不对

22:44.080 --> 22:45.080
你整个

22:45.080 --> 22:47.080
整个这一块

22:47.080 --> 22:48.080
整个这一块

22:48.080 --> 22:49.080
其实都是什么

22:49.080 --> 22:50.080
都是指主键

22:50.080 --> 22:51.080
对吧

22:51.080 --> 22:52.080
用户输入的话

22:52.080 --> 22:53.080
是在指主键输入的

22:53.080 --> 22:55.080
这个指主键输入的话

22:55.080 --> 22:57.080
我再不在指主键处理呢

22:57.080 --> 22:59.080
我不在指主键处理

22:59.080 --> 23:00.080
我而是干嘛

23:00.080 --> 23:01.080
我这边是不是

23:01.080 --> 23:03.080
把我得到的这个质交给谁

23:03.080 --> 23:05.080
是不是交给副主键

23:05.080 --> 23:06.080
对不对

23:06.080 --> 23:08.080
副主键来进行处理

23:08.080 --> 23:10.080
如何交给副主键呢

23:10.080 --> 23:11.080
这边很简单

23:11.080 --> 23:12.080
这边的话你就

23:12.080 --> 23:14.080
调用副主键

23:14.080 --> 23:16.080
传递过来的这个方法

23:16.080 --> 23:17.080
对不对

23:17.080 --> 23:19.080
副主键这边传递过来的方法

23:19.080 --> 23:21.080
这是关于这个

23:21.080 --> 23:23.080
上节课的这个状态提升

23:23.080 --> 23:25.080
我们一个实际的这个例子

23:25.080 --> 23:27.080
把这个例子我把它

23:27.080 --> 23:29.080
放到咱们的笔记里面吧

23:30.080 --> 23:32.080
汇率转换案例

23:32.080 --> 23:34.080
这边的话是两个主键

23:34.080 --> 23:39.500
这边是两个主键

23:39.500 --> 23:40.500
首先是副主键

23:40.500 --> 23:42.500
副主键

23:42.500 --> 23:46.650
这边是react

23:46.650 --> 23:50.150
副主键

23:50.150 --> 23:52.150
副主键对应的就是这一块

23:52.150 --> 23:54.150
然后这边

23:54.150 --> 23:56.150
直主键

23:56.150 --> 23:58.150
直主键

23:58.150 --> 24:00.150
直主键这边

24:00.150 --> 24:04.550
直主键对应的就是

24:04.550 --> 24:06.550
这一块

24:06.550 --> 24:08.550
直主键代码没多少

24:08.550 --> 24:11.860
对应的就这一块

24:11.860 --> 24:13.860
这就是关于我们上节课的

24:13.860 --> 24:15.860
整个主键状态

24:15.860 --> 24:17.860
和数据的这个传递

24:17.860 --> 24:19.860
我们就告一段落了

24:19.860 --> 24:20.860
OK

24:20.860 --> 24:21.860
整个这一块的话

24:21.860 --> 24:23.860
我觉得这块知识对于大家来讲的话

24:23.860 --> 24:25.860
是非常好理解的

24:25.860 --> 24:26.860
因为大家学过view

24:26.860 --> 24:27.860
学过view的话

24:27.860 --> 24:29.860
这边你就可以类比view里面的

24:29.860 --> 24:31.860
相似的一些东西

24:31.860 --> 24:33.860
一下很快就能够掌握

24:33.860 --> 24:34.860
好

24:34.860 --> 24:36.860
这边的话我把它关了

24:36.860 --> 24:38.860
我们来看一下这节课的内容

24:38.860 --> 24:40.860
这节课的话我们要讲的是

24:40.860 --> 24:42.860
表单

24:42.860 --> 24:43.860
要讲的是表单

24:43.860 --> 24:45.860
表当的话

24:45.860 --> 24:47.860
和view也是一样的

24:47.860 --> 24:49.860
也是一样的

24:49.860 --> 24:51.860
你回顾一下你那个view里面

24:51.860 --> 24:53.860
view里面的话你表单的话

24:53.860 --> 24:55.860
表单里面的空键都是通过什么

24:55.860 --> 24:57.860
都是通过wagon model

24:57.860 --> 24:59.860
进行一个双向绑定

24:59.860 --> 25:00.860
对不对

25:00.860 --> 25:02.860
你通过wagon model进行双向绑定

25:02.860 --> 25:03.860
其实本质就是什么

25:03.860 --> 25:05.860
本质的话是不是就是让你的表单

25:05.860 --> 25:07.860
空键里面的那个输入的值

25:07.860 --> 25:09.860
和什么关联

25:09.860 --> 25:11.860
是不是和你的这个data

25:11.860 --> 25:13.860
进行一个关联

25:13.860 --> 25:14.860
对不对

25:14.860 --> 25:15.860
我们说了现代

25:15.860 --> 25:17.860
现代的这种mvvm这种框架

25:17.860 --> 25:19.860
它的本质就是什么呢

25:19.860 --> 25:21.860
本质其实就是让你去关注你的

25:21.860 --> 25:23.860
试图模型

25:23.860 --> 25:25.860
一切都通过这个试图模型

25:25.860 --> 25:27.860
就那个vm

25:27.860 --> 25:29.860
你就把它理解成那个data

25:29.860 --> 25:31.860
一切都是通过这个试图模型

25:31.860 --> 25:33.860
来进行空置

25:33.860 --> 25:34.860
你不需要就是你试图模型

25:34.860 --> 25:36.860
和试图进行绑定了之后

25:36.860 --> 25:38.860
你之后只需要关注试图模型

25:38.860 --> 25:41.860
试图模型里面的数据是如何变化的

25:41.860 --> 25:44.860
试图模型里面的数据一变化

25:44.860 --> 25:46.860
试图自动就更新了

25:46.860 --> 25:47.860
对不对

25:47.860 --> 25:49.860
这就是现代的这种现代框架

25:49.860 --> 25:51.860
就无论是vue也好

25:51.860 --> 25:52.860
还是react也好

25:52.860 --> 25:54.860
还是这个angela也好

25:54.860 --> 25:55.860
都是这样子的

25:55.860 --> 25:57.860
所以这边的话也是一样

25:57.860 --> 25:58.860
这边的话

25:58.860 --> 25:59.860
这个表单

25:59.860 --> 26:00.860
虽然它这个官网的话

26:00.860 --> 26:02.860
分成了这个受控组建和非受控

26:02.860 --> 26:05.860
这边大家可以去官网看一下

26:05.860 --> 26:07.860
在这里核心概念

26:07.860 --> 26:09.860
我们现在的话就是

26:09.860 --> 26:10.860
这都讲了

26:10.860 --> 26:11.860
这也讲了

26:11.860 --> 26:13.860
这条件确认大家

26:13.860 --> 26:15.860
我不知道大家下去看一下

26:15.860 --> 26:16.860
这一块的话

26:16.860 --> 26:18.860
这一块很简单

26:18.860 --> 26:19.860
这一块很简单

26:19.860 --> 26:21.860
这一块大家下去自己看一下

26:21.860 --> 26:22.860
这一块的话

26:22.860 --> 26:23.860
到时候我们写了一个项目的时候

26:23.860 --> 26:24.860
我们就直接用

26:24.860 --> 26:26.860
直接用就OK了

26:26.860 --> 26:28.860
这边表单

26:28.860 --> 26:30.860
表单在这里面

26:30.860 --> 26:32.860
你看它这边就提出来了一个新的名词

26:32.860 --> 26:34.860
叫做受控组建

26:34.860 --> 26:36.860
受控组建

26:36.860 --> 26:38.860
什么叫做受控组建

26:38.860 --> 26:39.860
其实很简单

26:39.860 --> 26:41.860
就是把它的表单空间和什么

26:41.860 --> 26:44.860
和它的这个状态关联在一起

26:44.860 --> 26:45.860
关联在一起之后

26:45.860 --> 26:46.860
然后接下来回头的话

26:46.860 --> 26:47.860
你只需要去干嘛呢

26:47.860 --> 26:49.860
只需要去控制

26:49.860 --> 26:51.860
它的state

26:51.860 --> 26:53.860
控制它的状态

26:53.860 --> 26:54.860
就OK了

26:54.860 --> 26:55.860
好

26:55.860 --> 26:57.860
来我们这边我们来看一下

26:57.860 --> 27:00.860
无论是学习view还是react

27:00.860 --> 27:02.860
最重要的是要转换思想

27:02.860 --> 27:03.860
这一步非常重要

27:03.860 --> 27:05.860
往往也是最困难的

27:05.860 --> 27:06.860
OK

27:06.860 --> 27:08.860
在以前这个tquest时代的话

27:08.860 --> 27:09.860
我们主要是什么

27:09.860 --> 27:12.860
主要是操作这个动物节点

27:12.860 --> 27:13.860
对吧

27:13.860 --> 27:15.860
然后现在这个前端开发中

27:15.860 --> 27:18.860
采用的是mvv m模式

27:18.860 --> 27:21.860
它把这个仕途和仕途模型进行绑定

27:21.860 --> 27:23.860
这就是我刚才所说的

27:23.860 --> 27:25.860
仕途模型一改变

27:25.860 --> 27:28.860
你的这个仕途自然而然就改变了

27:28.860 --> 27:30.860
所以说我们开发人员的话

27:30.860 --> 27:31.860
只需要专注在什么呢

27:31.860 --> 27:34.860
专注在这个仕途模型上面

27:34.860 --> 27:37.860
你回忆一下你以前在做这个view开发的时候

27:37.860 --> 27:39.860
你是不是专注在那个data

27:39.860 --> 27:41.860
组件里面的那个data里面

27:41.860 --> 27:42.860
对不对

27:42.860 --> 27:43.860
你就研究那个data怎么变

27:43.860 --> 27:44.860
因为data只要一变了

27:44.860 --> 27:46.860
那个仕途自然而然就更新了

27:46.860 --> 27:47.860
OK

27:47.860 --> 27:49.860
那它这边这个受控组件

27:49.860 --> 27:50.860
什么意思呢

27:50.860 --> 27:53.860
受控组件本质上其实就是

27:53.860 --> 27:55.860
把表单中的这个空间

27:55.860 --> 27:56.860
和什么呢

27:56.860 --> 27:58.860
和仕途模型

27:58.860 --> 28:00.860
或者你简单理解为那个状态

28:00.860 --> 28:03.860
就那个state进行一个绑定

28:04.860 --> 28:05.860
然后之后的话

28:05.860 --> 28:07.860
你要针对这个

28:07.860 --> 28:09.860
之后你要做的一些操作

28:09.860 --> 28:10.860
都是针对什么呢

28:10.860 --> 28:12.860
都是针对状态来进行操作

28:12.860 --> 28:13.860
OK

28:13.860 --> 28:16.860
都是针对状态来进行操作

28:16.860 --> 28:17.860
好来我们这边

28:17.860 --> 28:19.860
我们这边来看一些案例

28:19.860 --> 28:20.860
来这边一个一个看

28:20.860 --> 28:21.860
看了之后

28:21.860 --> 28:23.860
我把这个代码给你贴过来

28:29.860 --> 28:30.860
我们首先来看一个

28:30.860 --> 28:32.860
这个最基本的受控组件

28:32.860 --> 28:34.860
好回到这边

28:34.860 --> 28:35.860
这边的话

28:35.860 --> 28:36.860
这个刚才笔记里面

28:36.860 --> 28:38.860
已经记录了代码了

28:38.860 --> 28:39.860
那这边的话

28:39.860 --> 28:41.860
我这个就直接就把它干掉了

28:41.860 --> 28:43.860
直接把它干掉了

28:43.860 --> 28:45.860
在笔记里面有代码

28:45.860 --> 28:46.860
好那这样

28:46.860 --> 28:47.860
这里的话

28:47.860 --> 28:48.860
我们这边

28:48.860 --> 28:50.860
首先就来一个最简单的input

28:52.860 --> 28:53.860
input

28:53.860 --> 28:54.860
那这个的话

28:54.860 --> 28:55.860
就是你这个htm

28:55.860 --> 28:57.860
这个可以先不要

28:57.860 --> 28:58.860
好这个呢

28:58.860 --> 29:00.860
就是以前我们在htm里面

29:00.860 --> 29:02.860
这边写一个这个输入框

29:02.860 --> 29:04.860
对吧我们这边来看一下

29:04.860 --> 29:07.860
输入框一个很简单的输入框

29:07.860 --> 29:08.860
好以前的话

29:08.860 --> 29:09.860
你在htm里面

29:09.860 --> 29:11.860
你是怎么操作的

29:11.860 --> 29:12.860
回忆一下

29:12.860 --> 29:14.860
你在htm里面

29:14.860 --> 29:16.860
以前原生皆是的时候

29:16.860 --> 29:20.860
是不是先获取到这个动物节点

29:20.860 --> 29:21.860
对不对

29:21.860 --> 29:22.860
获取到这个动物节点之后

29:22.860 --> 29:24.860
然后接下来拿他的什么

29:24.860 --> 29:26.860
就拿他的value值

29:26.860 --> 29:27.860
对不对

29:27.860 --> 29:28.860
拿他的value值

29:28.860 --> 29:30.860
好那现在现在怎么做呢

29:30.860 --> 29:31.860
现在的话

29:31.860 --> 29:33.860
我把他和谁绑定

29:33.860 --> 29:36.860
和我的state进行绑定

29:36.860 --> 29:38.860
那之后的话

29:38.860 --> 29:39.860
我就干嘛

29:39.860 --> 29:41.860
我就是针对这个state

29:41.860 --> 29:42.860
进行一个操作

29:42.860 --> 29:43.860
ok

29:43.860 --> 29:44.860
比如说我在这边

29:44.860 --> 29:45.860
我在这边的话

29:45.860 --> 29:47.860
我写一个value

29:48.860 --> 29:49.860
value是个空

29:49.860 --> 29:51.860
好那在这边

29:51.860 --> 29:52.860
这边的话

29:52.860 --> 29:53.860
我的这个value

29:53.860 --> 29:55.860
就等于一个什么呢

29:55.860 --> 29:56.860
这边就是

29:56.860 --> 29:59.860
state.state.value

29:59.860 --> 30:00.860
ok

30:00.860 --> 30:01.860
好

30:01.860 --> 30:02.860
然后接下来

30:02.860 --> 30:03.860
我们这边来看一下

30:03.860 --> 30:04.860
保存

30:04.860 --> 30:05.860
保存了之后

30:05.860 --> 30:06.860
然后下这边刷新一下

30:06.860 --> 30:07.860
刷新

30:07.860 --> 30:08.860
刚才这个警告又出来了对吧

30:08.860 --> 30:09.860
好

30:09.860 --> 30:10.860
然后接下来的话

30:10.860 --> 30:11.860
你这边你看这里

30:11.860 --> 30:12.860
这里的话

30:12.860 --> 30:13.860
我现在我要输入

30:13.860 --> 30:14.860
你看我输入不了

30:14.860 --> 30:15.860
看到没有

30:15.860 --> 30:16.860
我现在我不停的在按键盘

30:16.860 --> 30:17.860
我在输入

30:17.860 --> 30:18.860
我输入不了

30:18.860 --> 30:20.860
这边始终是空的

30:20.860 --> 30:21.860
为什么呀

30:21.860 --> 30:23.860
为什么是空的

30:23.860 --> 30:24.860
哎原因很简单

30:24.860 --> 30:26.860
你这边value设置的是什么

30:26.860 --> 30:28.860
value等于这个

30:28.860 --> 30:30.860
state里面的这个value

30:30.860 --> 30:32.860
那state里面的这个value

30:32.860 --> 30:34.860
是不是它是空的

30:34.860 --> 30:35.860
对不对

30:35.860 --> 30:36.860
它是空的

30:36.860 --> 30:37.860
所以你无论怎么输入

30:37.860 --> 30:39.860
它这边都是就是

30:39.860 --> 30:41.860
它永远取的是这个state的这个value

30:41.860 --> 30:44.860
这state value对应的本来就是个空之串

30:44.860 --> 30:45.860
ok

30:45.860 --> 30:47.860
它就深深的绑定在一起了

30:47.860 --> 30:49.860
就是你现在你的这个input

30:49.860 --> 30:51.860
和它就绑定在一起了

30:51.860 --> 30:53.860
也就是回头我这一遍

30:53.860 --> 30:54.860
比如说写个123

30:54.860 --> 30:56.860
那你看这边

30:56.860 --> 30:57.860
是不是123

30:57.860 --> 30:58.860
对不对

30:58.860 --> 30:59.860
那接下来我回头

30:59.860 --> 31:01.860
我要控制这个

31:01.860 --> 31:02.860
输入框的值

31:02.860 --> 31:04.860
我只需要控制什么就可以了

31:04.860 --> 31:07.860
所以控制这个state

31:07.860 --> 31:09.860
是不是就ok了

31:09.860 --> 31:10.860
对不对

31:10.860 --> 31:11.860
好

31:11.860 --> 31:12.860
然后接下来的话

31:12.860 --> 31:13.860
你看这边这个报错

31:13.860 --> 31:15.860
这个报错说的是

31:15.860 --> 31:16.860
你这边

31:16.860 --> 31:18.860
有一个这个formfiled

31:18.860 --> 31:19.860
有一个表单空间

31:19.860 --> 31:21.860
without

31:21.860 --> 31:23.860
这个on-chain g-handler

31:23.860 --> 31:25.860
你没有写on-chain g-handler

31:25.860 --> 31:27.860
像这些warring

31:27.860 --> 31:29.860
大家要学会自己去看

31:29.860 --> 31:30.860
知道吧

31:30.860 --> 31:31.860
要学会自己去看

31:31.860 --> 31:33.860
不要去排斥这些东西

31:33.860 --> 31:34.860
你慢慢慢慢

31:34.860 --> 31:35.860
你迟早要学会

31:35.860 --> 31:37.860
去自己去看这些错误

31:37.860 --> 31:38.860
看这些错误

31:38.860 --> 31:39.860
然后自己去解决

31:39.860 --> 31:41.860
有些时候解决方案就已经在

31:41.860 --> 31:43.860
在它的这个报错里面了

31:43.860 --> 31:44.860
ok

31:44.860 --> 31:46.860
这边它是不是就要求

31:46.860 --> 31:48.860
你有一个on-chain g-handler

31:48.860 --> 31:49.860
对不对

31:49.860 --> 31:50.860
ok

31:50.860 --> 31:51.860
好来呗

31:51.860 --> 31:52.860
那接下来和你这边的话

31:52.860 --> 31:54.860
on-chain g-handler

31:54.860 --> 31:58.180
on-chain g-handler

31:58.180 --> 31:59.180
好

31:59.180 --> 32:00.180
我们这边就是

32:00.180 --> 32:01.180
z-handler-chain g-handler

32:01.180 --> 32:02.180
我就直接用它

32:02.180 --> 32:03.180
刚才的快捷方式

32:03.180 --> 32:04.180
好

32:04.180 --> 32:05.180
那你这边的话

32:05.180 --> 32:06.180
是不是需要有一个

32:06.180 --> 32:07.180
对应的这个方法

32:07.180 --> 32:08.180
对吧

32:08.180 --> 32:09.180
你这边那就是

32:09.180 --> 32:10.180
handler-chain g-handler

32:10.180 --> 32:12.180
handler-chain g-handler

32:12.180 --> 32:16.190
等于一个

32:16.190 --> 32:17.190
等于一个

32:17.190 --> 32:18.190
ok

32:18.190 --> 32:19.190
好在这里

32:19.190 --> 32:20.190
这里的话

32:20.190 --> 32:21.190
然后我这边的话

32:21.190 --> 32:23.190
我就通过事件对象

32:23.190 --> 32:24.190
然后通过什么呢

32:24.190 --> 32:27.190
1.target.value

32:27.190 --> 32:29.190
这是我们刚才写的例子

32:29.190 --> 32:30.190
对吧

32:30.190 --> 32:31.190
我们那个汇率那个

32:31.190 --> 32:32.190
才写的例子

32:32.190 --> 32:34.190
通过1.target.value

32:34.190 --> 32:37.190
我来拿到用户输入的值

32:37.190 --> 32:39.190
那拿到用户输入的值

32:39.190 --> 32:40.190
然后把它设置为什么

32:40.190 --> 32:42.190
是不是设置为新的

32:42.190 --> 32:43.190
这个状态

32:43.190 --> 32:44.190
对吧

32:44.190 --> 32:46.190
所以这边的话就是

32:46.190 --> 32:49.190
z.satastate

32:49.190 --> 32:51.190
然后我要设置谁

32:51.190 --> 32:53.190
我设置value

32:53.190 --> 32:54.190
value设置成多少

32:54.190 --> 32:57.190
设置成1.target.value

32:57.190 --> 32:58.190
好来我们这边

32:58.190 --> 32:59.190
我们来看一下

32:59.190 --> 33:00.190
能不能解决

33:00.190 --> 33:02.190
刚才那个不能输入的问题

33:02.190 --> 33:03.190
把这个清空一下

33:03.190 --> 33:05.500
这个盲点

33:05.500 --> 33:06.500
这个盲点也不要了

33:07.500 --> 33:08.500
好

33:08.500 --> 33:09.500
刷新一下

33:09.500 --> 33:10.500
ok

33:10.500 --> 33:11.500
来看一下

33:11.500 --> 33:12.500
我现在你看

33:12.500 --> 33:13.500
我现在是不是

33:13.500 --> 33:14.500
就是可以自由的输入了

33:14.500 --> 33:15.500
对不对

33:15.500 --> 33:16.500
可以自由的输入了

33:16.500 --> 33:18.500
那有的同学会说

33:18.500 --> 33:19.500
你搞这么半天

33:19.500 --> 33:21.500
我本来这个htm

33:21.500 --> 33:22.500
我写一个input

33:22.500 --> 33:23.500
就可以自由输入的

33:23.500 --> 33:24.500
你搞这么一套

33:24.500 --> 33:25.500
对吧

33:25.500 --> 33:26.500
又和state绑定了

33:26.500 --> 33:28.500
这边有写个这个按计计

33:28.500 --> 33:29.500
搞这么一套

33:29.500 --> 33:30.500
为什么

33:30.500 --> 33:31.500
其实原因很简单

33:31.500 --> 33:32.500
就是我这边

33:32.500 --> 33:33.500
回头的话

33:33.500 --> 33:34.500
我只需要干嘛

33:34.500 --> 33:37.500
我只需要关注这个state

33:37.500 --> 33:38.500
比如说我现在

33:38.500 --> 33:39.500
我再有个按钮

33:39.500 --> 33:41.500
比如说提交按钮

33:41.500 --> 33:44.880
这个是一个提交按钮

33:44.880 --> 33:45.880
ok

33:45.880 --> 33:46.880
提交按钮点击之后

33:46.880 --> 33:47.880
它会提交表当

33:47.880 --> 33:49.880
比我们这边给它一个

33:49.880 --> 33:50.880
点击世界

33:50.880 --> 33:51.880
click

33:51.880 --> 33:53.880
等于一个click

33:53.880 --> 33:54.880
handle

33:54.880 --> 33:55.880
这边有写zs

33:55.880 --> 33:57.880
现在写韩束祖先写关了

33:57.880 --> 34:00.880
就经常这个zs

34:00.880 --> 34:01.880
就写漏了

34:01.880 --> 34:03.880
这边这个handle click

34:05.880 --> 34:06.880
等于

34:06.880 --> 34:09.190
ok

34:09.190 --> 34:10.190
好

34:10.190 --> 34:12.190
现在的话我要提交

34:12.190 --> 34:14.190
提交整个表当

34:15.190 --> 34:16.190
那你回顾一下

34:16.190 --> 34:17.190
以前的话

34:17.190 --> 34:18.190
你要提交整个表当的话

34:18.190 --> 34:19.190
你得干嘛

34:19.190 --> 34:20.190
是不是得去获取

34:20.190 --> 34:22.190
你在提交的时候

34:22.190 --> 34:23.190
就得获取

34:23.190 --> 34:24.190
获取这个dorm对象

34:24.190 --> 34:25.190
然后再去拿它的值

34:25.190 --> 34:26.190
那我现在的话

34:26.190 --> 34:28.190
我提交就只需要干嘛

34:28.190 --> 34:33.190
zs.state.value

34:33.190 --> 34:34.190
对不对

34:34.190 --> 34:36.190
我通过zs.state.value

34:36.190 --> 34:38.190
我就可以拿到

34:38.190 --> 34:40.190
我这个表当空间

34:40.190 --> 34:41.190
输入的这个值

34:41.190 --> 34:43.190
因为两者是绑定在一起的

34:43.190 --> 34:44.190
我们这边

34:44.190 --> 34:46.190
我们可以来看一下

34:46.190 --> 34:49.950
这边

34:49.950 --> 34:52.950
你要提交的

34:53.950 --> 34:58.840
内容为这个

34:58.840 --> 35:00.840
保存

35:00.840 --> 35:01.840
这边乱

35:01.840 --> 35:02.840
随便写一点

35:02.840 --> 35:03.840
提交

35:03.840 --> 35:04.840
看到没有

35:04.840 --> 35:05.840
我这边是不是就

35:05.840 --> 35:07.840
拿到了用户输入的内容

35:07.840 --> 35:08.840
进行一个提交

35:08.840 --> 35:10.840
对不对

35:10.840 --> 35:12.840
这就是关于这个

35:12.840 --> 35:13.840
受控组件

35:13.840 --> 35:15.840
一个最基本的例子

35:15.840 --> 35:16.840
好

35:16.840 --> 35:17.840
那个韩束组件的话

35:17.840 --> 35:18.840
现在大家还

35:18.840 --> 35:19.840
没办法写

35:19.840 --> 35:21.840
因为大家还没学这个hook

35:21.840 --> 35:22.840
后面那个韩束组件

35:22.840 --> 35:23.840
学到那个hook之后

35:23.840 --> 35:24.840
一样的

35:24.840 --> 35:26.840
一样的就是也是

35:26.840 --> 35:27.840
就是用状态

35:27.840 --> 35:29.840
和那个表当空间

35:29.840 --> 35:31.840
进行一个绑定

35:31.840 --> 35:32.840
好

35:32.840 --> 35:34.840
把这个放到笔记里面

35:34.840 --> 35:35.840
这是首先

35:35.840 --> 35:37.840
第一个

35:37.840 --> 35:38.840
第一个

35:38.840 --> 35:39.840
就是我们这边

35:39.840 --> 35:41.840
一个基本的受控组件

35:41.840 --> 35:42.840
大家回头的话

35:42.840 --> 35:43.840
可以把视频暂停一下

35:43.840 --> 35:44.840
可以把这个例子

35:44.840 --> 35:45.840
稍微写一写

35:47.840 --> 35:48.840
好

35:48.840 --> 35:49.840
接下来我们来看

35:49.840 --> 35:50.840
第二个例子

35:50.840 --> 35:51.840
第二个例子的话

35:51.840 --> 35:53.840
用户输入的内容

35:53.840 --> 35:55.840
进行一个控制

35:55.840 --> 35:57.840
我们之所以这边的话

35:57.840 --> 36:00.840
我们要把这个表当空间

36:00.840 --> 36:01.840
和我们的这个state

36:01.840 --> 36:02.840
进行关联

36:02.840 --> 36:04.840
有一个非常

36:04.840 --> 36:05.840
就是重要的原因

36:05.840 --> 36:07.840
就是受控受控

36:07.840 --> 36:08.840
我们回头的话

36:08.840 --> 36:09.840
你表当空间

36:09.840 --> 36:11.840
是完全受控于

36:11.840 --> 36:13.840
我的这个state的

36:13.840 --> 36:14.840
你仔细想一想

36:14.840 --> 36:15.840
这句话

36:15.840 --> 36:16.840
仔细想想这句话

36:16.840 --> 36:17.840
就回头的话

36:17.840 --> 36:18.840
你表当空间

36:18.840 --> 36:20.840
就你的这个输入框

36:20.840 --> 36:22.840
是完全受控于

36:22.840 --> 36:24.840
我的这个state

36:24.840 --> 36:25.840
以前的话

36:25.840 --> 36:27.840
比如说用户在进行输入的时候

36:27.840 --> 36:30.840
我们能否对用户的输入进行控制

36:30.840 --> 36:31.840
是没办法

36:31.840 --> 36:32.840
对吧

36:32.840 --> 36:34.840
用户输入什么就是什么

36:34.840 --> 36:35.840
最终就是

36:35.840 --> 36:36.840
最多就是什么

36:36.840 --> 36:39.840
最终就是拿到他输入的值

36:39.840 --> 36:41.840
接下来进行一下这个控制

36:41.840 --> 36:42.840
对吧

36:42.840 --> 36:43.840
但是现在

36:43.840 --> 36:45.840
现在的话由于我们这边

36:45.840 --> 36:46.840
我们这边

36:46.840 --> 36:49.840
表当空间和state进行控制了

36:49.840 --> 36:50.840
我回头的话

36:50.840 --> 36:52.840
我这边我只要对这个state

36:52.840 --> 36:54.840
进行一些比较限制之类的

36:54.840 --> 36:56.840
就可以达到什么呢

36:56.840 --> 36:58.840
可以达到就是控制

36:58.840 --> 37:00.840
控制这个

37:00.840 --> 37:03.840
表当空间的这个效果

37:03.840 --> 37:04.840
ok

37:04.840 --> 37:05.840
来我们这边来看一下

37:05.840 --> 37:07.840
来看第二个例子

37:07.840 --> 37:08.840
第二个例子的话

37:08.840 --> 37:10.840
就是对用户输入的内容

37:10.840 --> 37:12.840
进行一个限制

37:12.840 --> 37:14.840
我们回到这边

37:14.840 --> 37:15.840
回到这边

37:15.840 --> 37:16.840
比如说我们这边

37:16.840 --> 37:18.840
我们来写两个

37:18.840 --> 37:19.840
写两个

37:19.840 --> 37:20.840
两个的话

37:20.840 --> 37:21.840
然后接下来这边

37:21.840 --> 37:22.840
第一个

37:22.840 --> 37:25.840
第一个的话是自动转成大写

37:25.840 --> 37:26.840
像这种

37:26.840 --> 37:28.840
这种这个属性比较多了

37:28.840 --> 37:30.840
那现在的话一般就是这样子来写了

37:30.840 --> 37:33.840
你看很多主键库的话都是这样子

37:33.840 --> 37:34.840
ok

37:34.840 --> 37:35.840
我最早的时候

37:35.840 --> 37:37.840
我其实还不习惯这样子写

37:37.840 --> 37:39.840
现在慢慢就写多了

37:39.840 --> 37:40.840
也就习惯了

37:40.840 --> 37:41.840
说这个习惯的话

37:41.840 --> 37:42.840
只是就是

37:42.840 --> 37:45.840
你使用的一个频率的问题

37:45.840 --> 37:46.840
对不对

37:46.840 --> 37:48.840
写多了你自然就习惯了

37:48.840 --> 37:49.840
好

37:49.840 --> 37:50.840
那我们现在的话

37:50.840 --> 37:51.840
我们这边

37:51.840 --> 37:53.840
我们给他写一个place

37:53.840 --> 37:56.840
这个placeholder

37:56.840 --> 37:57.840
placeholder

37:57.840 --> 37:58.840
比如说这个第一个输入框

37:58.840 --> 37:59.840
我们要要求什么呢

37:59.840 --> 38:04.840
自动转为大写

38:04.840 --> 38:08.840
第二个placeholder

38:08.840 --> 38:09.840
我们这边要求

38:09.840 --> 38:10.840
第二个输入框

38:10.840 --> 38:15.840
只能输入数字

38:15.840 --> 38:16.840
ok

38:16.840 --> 38:17.840
但现在的话是没有效果的

38:17.840 --> 38:19.840
不是说你写一个这个placeholder

38:19.840 --> 38:20.840
他就搞定了

38:20.840 --> 38:21.840
现在肯定搞不定了

38:21.840 --> 38:22.840
对不对

38:22.840 --> 38:24.840
而且现在两个是不一样的

38:24.840 --> 38:25.840
对不对

38:25.840 --> 38:26.840
你看这很有意思

38:26.840 --> 38:27.840
这很有意思

38:27.840 --> 38:28.840
我这边的话我输入第一个

38:28.840 --> 38:30.840
就在第二个输入的

38:30.840 --> 38:31.840
第一个也变了

38:31.840 --> 38:32.840
为什么

38:32.840 --> 38:33.840
很简单

38:33.840 --> 38:34.840
你这边是不是

38:34.840 --> 38:35.840
共用的一个view

38:35.840 --> 38:36.840
对不对

38:36.840 --> 38:38.840
共用的一个这个value

38:38.840 --> 38:39.840
好

38:39.840 --> 38:40.840
接下来我们在这边

38:40.840 --> 38:41.840
我们就来新增加一个

38:41.840 --> 38:43.840
我们这边就是

38:43.840 --> 38:44.840
value1

38:44.840 --> 38:46.840
对应是个控制串

38:46.840 --> 38:48.840
value2

38:48.840 --> 38:50.840
对应是个控制串

38:50.840 --> 38:51.840
对应这边

38:51.840 --> 38:52.840
这边那是不是

38:52.840 --> 38:53.840
应该是绑定value1

38:53.840 --> 38:56.840
这边绑定value2

38:56.840 --> 38:57.840
对吧

38:57.840 --> 38:58.840
好

38:58.840 --> 38:59.840
接下来我们这边

38:59.840 --> 39:00.840
再给他们一个什么呢

39:00.840 --> 39:01.840
再给他们一个name

39:01.840 --> 39:03.840
这边name

39:03.840 --> 39:04.840
name的话

39:04.840 --> 39:05.840
这边我们给他一个

39:05.840 --> 39:06.840
这个叫做one

39:06.840 --> 39:09.840
这个叫做name

39:09.840 --> 39:10.840
叫做two

39:10.840 --> 39:11.840
ok

39:11.840 --> 39:12.840
准备工作做好了

39:12.840 --> 39:13.840
现在的话这边

39:13.840 --> 39:14.840
两个输入框

39:14.840 --> 39:16.840
两个输入框基本上是

39:16.840 --> 39:17.840
就一样的对吧

39:17.840 --> 39:18.840
基本就是一样的

39:18.840 --> 39:19.840
说这个placeholder

39:19.840 --> 39:21.840
这个value

39:21.840 --> 39:23.840
value这边绑定的是value1

39:23.840 --> 39:25.840
下面这个绑定的是value2

39:25.840 --> 39:26.840
其他基本是一样的

39:26.840 --> 39:27.840
好

39:27.840 --> 39:28.840
接下来的话

39:28.840 --> 39:30.840
我们需要对用户的这个输入

39:30.840 --> 39:32.840
进行一个限制

39:32.840 --> 39:34.840
怎么进行限制呢

39:34.840 --> 39:36.840
这个

39:36.840 --> 39:37.840
这个不管他

39:37.840 --> 39:38.840
这个不管他

39:38.840 --> 39:39.840
好

39:39.840 --> 39:40.840
主要是这里

39:40.840 --> 39:41.840
主要是这里

39:42.840 --> 39:43.840
ok

39:43.840 --> 39:44.840
用户在输入的时候

39:44.840 --> 39:46.840
这边他是不是会触发

39:46.840 --> 39:48.840
这个handle清洁

39:48.840 --> 39:49.840
对不对

39:49.840 --> 39:50.840
好

39:50.840 --> 39:51.840
接下来我这边

39:51.840 --> 39:55.840
首先通过这个1.target.name

39:55.840 --> 39:57.840
我们来拿到什么呢

39:57.840 --> 39:59.840
来拿到这个name字

39:59.840 --> 40:00.840
我们看能不能拿得到

40:00.840 --> 40:01.840
好

40:01.840 --> 40:02.840
我们这边

40:02.840 --> 40:03.840
const

40:03.840 --> 40:05.840
一个name

40:05.840 --> 40:06.840
等于这个

40:06.840 --> 40:07.840
好

40:07.840 --> 40:08.840
然后接下来我们这边

40:08.840 --> 40:10.840
打一下name字

40:10.840 --> 40:11.840
好

40:11.840 --> 40:12.840
这边看一下

40:12.840 --> 40:13.840
好

40:13.840 --> 40:14.840
我在这边的话

40:14.840 --> 40:15.840
我现在

40:15.840 --> 40:16.840
在这边的话

40:16.840 --> 40:17.840
我输入

40:17.840 --> 40:18.840
走

40:18.840 --> 40:19.840
这边现在肯定是

40:19.840 --> 40:20.840
这没有变化的

40:20.840 --> 40:21.840
虽然我输入

40:21.840 --> 40:22.840
他肯定是没有变化的

40:22.840 --> 40:23.840
ok

40:23.840 --> 40:24.840
这边你看

40:24.840 --> 40:25.840
是不是可以拿到这个name字

40:25.840 --> 40:26.840
对不对

40:26.840 --> 40:28.840
这边可以拿到这个name字

40:28.840 --> 40:29.840
ok

40:29.840 --> 40:31.840
拿到之后就已经成功一半了

40:31.840 --> 40:32.840
好

40:32.840 --> 40:33.840
然后接下来的话

40:33.840 --> 40:34.840
咱们这边的话

40:34.840 --> 40:36.840
做一个判断

40:36.840 --> 40:39.840
switch name

40:39.840 --> 40:41.840
s1

40:41.840 --> 40:43.840
说明什么

40:43.840 --> 40:44.840
说明是不是就是

40:44.840 --> 40:45.840
第一个输入框

40:45.840 --> 40:49.840
ks2

40:49.840 --> 40:50.840
ks2

40:50.840 --> 40:51.840
说明什么

40:51.840 --> 40:52.840
是不是第二个输入框

40:52.840 --> 40:53.840
对吧

40:53.840 --> 40:54.840
好

40:54.840 --> 40:59.500
这边把这个break加上

40:59.500 --> 41:00.500
好

41:00.500 --> 41:01.500
那回头进了这个分子

41:01.500 --> 41:02.500
进了分子

41:02.500 --> 41:03.500
进了这个分子

41:03.500 --> 41:04.500
说明什么

41:04.500 --> 41:05.500
说明

41:05.500 --> 41:08.500
用户输入的

41:08.500 --> 41:09.500
是

41:09.500 --> 41:11.500
第一个输入框

41:11.500 --> 41:12.500
对吧

41:12.500 --> 41:13.500
好

41:13.500 --> 41:14.500
然后接下来的话

41:14.500 --> 41:15.500
我们这边

41:15.500 --> 41:16.500
我们要对他的这个值

41:16.500 --> 41:17.500
进行设置

41:17.500 --> 41:18.500
那我们以前的话

41:18.500 --> 41:19.500
是什么

41:19.500 --> 41:20.500
z点

41:20.500 --> 41:21.500
set

41:21.500 --> 41:22.500
set

41:22.500 --> 41:23.500
好

41:23.500 --> 41:24.500
然后接下来的话

41:24.500 --> 41:25.500
这边

41:25.500 --> 41:26.500
设置那个

41:26.500 --> 41:28.500
设置Value1

41:28.500 --> 41:29.500
他是自动进行覆盖

41:29.500 --> 41:30.500
虽然我们这边有Value1

41:30.500 --> 41:31.500
Value2

41:31.500 --> 41:32.500
但我们这边

41:32.500 --> 41:33.500
只需要设置Value1

41:33.500 --> 41:34.500
就可以

41:34.500 --> 41:35.500
Value2我们可以不管他

41:35.500 --> 41:36.500
不管他

41:36.500 --> 41:37.500
这个Value

41:37.500 --> 41:38.500
Value1的话

41:38.500 --> 41:40.500
以前我们就直接1点

41:40.500 --> 41:41.500
target

41:41.500 --> 41:43.500
点Value

41:43.500 --> 41:44.500
对不对

41:44.500 --> 41:46.500
我们这边我们来看一下

41:46.500 --> 41:48.500
第一个

41:48.500 --> 41:49.500
OK

41:49.500 --> 41:51.500
现在输入是不OK了

41:51.500 --> 41:52.500
对

41:52.500 --> 41:53.500
输入是OK了

41:53.500 --> 41:54.500
好

41:54.500 --> 41:55.500
接下来

41:55.500 --> 41:56.500
我要把它转成大写

41:56.500 --> 41:57.500
怎么转大写

41:57.500 --> 41:58.500
那很简单了

41:58.500 --> 41:59.500
我在这边的话

41:59.500 --> 42:00.500
我是不是

42:00.500 --> 42:01.500
可以直接

42:01.500 --> 42:02.500
这个

42:02.500 --> 42:03.500
他是自付串

42:03.500 --> 42:04.500
然后直接

42:05.500 --> 42:07.500
oper

42:08.500 --> 42:09.500
对不对

42:09.500 --> 42:10.500
我们这边保存一下

42:10.500 --> 42:11.500
你看一下

42:11.500 --> 42:12.500
我现在我没有开大写

42:12.500 --> 42:13.500
我没有开大写

42:13.500 --> 42:14.500
我这边输入

42:14.500 --> 42:15.500
你看

42:15.500 --> 42:17.500
他自动就转成一个大写

42:17.500 --> 42:18.500
看到没有

42:18.500 --> 42:20.500
自动转成一个大写

42:20.500 --> 42:22.500
就是你看我们这边

42:22.500 --> 42:23.500
用户的输入

42:23.500 --> 42:25.500
是不是完全受我这边

42:25.500 --> 42:26.500
state的这个控制

42:26.500 --> 42:27.500
对不对

42:27.500 --> 42:28.500
我可以针对你的输入

42:28.500 --> 42:29.500
接下来

42:29.500 --> 42:30.500
我可以对你进行一定的控制

42:30.500 --> 42:31.500
接下来

42:31.500 --> 42:33.500
复制给新的state

42:34.500 --> 42:36.500
完全受这个state的这个控制

42:37.500 --> 42:38.500
ok

42:38.500 --> 42:39.500
然后接下来

42:39.500 --> 42:40.500
这边第二个

42:40.500 --> 42:41.500
第二个的话

42:41.500 --> 42:42.500
基本也是同理的

42:42.500 --> 42:43.500
你只要第一个听

42:43.500 --> 42:44.500
就是听懂了

42:44.500 --> 42:45.500
第二个的话

42:45.500 --> 42:46.500
你也就知道

42:46.500 --> 42:47.500
这也是拿到

42:47.500 --> 42:49.500
他的这个1点target点value

42:49.500 --> 42:50.500
然后干嘛

42:50.500 --> 42:51.500
是判断

42:51.500 --> 42:52.500
对吧

42:52.500 --> 42:54.500
判断是否是数字

42:55.500 --> 42:56.500
如果是数字就ok

42:56.500 --> 42:57.500
如果不是数字

42:57.500 --> 42:58.500
是不是就是

42:58.500 --> 42:59.500
不让他复制

43:00.500 --> 43:01.500
对不对

43:01.500 --> 43:02.500
大家其实可以

43:02.500 --> 43:03.500
暂停一下

43:03.500 --> 43:04.500
暂停一下

43:04.500 --> 43:05.500
自己想一下

43:05.500 --> 43:06.500
第二个该如何写

43:06.500 --> 43:07.500
可以自己写一下

43:08.500 --> 43:09.500
ok

43:09.500 --> 43:10.500
只要你第一个听懂了

43:10.500 --> 43:11.500
第一个听懂了

43:11.500 --> 43:12.500
你第二个的话

43:12.500 --> 43:13.500
应该是有失路的

43:14.500 --> 43:15.500
好

43:15.500 --> 43:16.500
然后我们这边

43:16.500 --> 43:17.500
我们直接来看

43:17.500 --> 43:18.500
这边那是

43:19.500 --> 43:20.500
这边说明什么

43:20.500 --> 43:21.500
说明用户

43:22.500 --> 43:24.500
输入的是

43:24.500 --> 43:25.500
第二

43:26.500 --> 43:27.500
第二个输入框

43:28.500 --> 43:29.500
对吧

43:29.500 --> 43:30.500
这个的话是只能输大写

43:31.500 --> 43:34.500
只能输入大写

43:34.500 --> 43:36.500
这个的话是只能输数字

43:37.500 --> 43:39.500
只能输入数字

43:40.500 --> 43:41.500
好

43:41.500 --> 43:43.500
这边我提供一种方案

43:43.500 --> 43:44.500
但方案的话

43:44.500 --> 43:45.500
应该是有很多的

43:45.500 --> 43:46.500
对吧

43:46.500 --> 43:47.500
然后这边

43:49.500 --> 43:50.500
我这边的话

43:50.500 --> 43:51.500
就是直接

43:51.500 --> 43:53.500
1点target

43:53.500 --> 43:55.500
点这个value

43:57.500 --> 43:58.500
拿到什么

43:58.500 --> 44:00.500
是不是拿到用户输入的这个值

44:01.500 --> 44:02.500
对不对

44:02.500 --> 44:03.500
拿到用户输入的值之后

44:03.500 --> 44:05.500
然后接下来这边点split

44:08.500 --> 44:09.500
split

44:09.500 --> 44:10.500
把它拆

44:10.500 --> 44:12.500
拆成一个数组

44:12.500 --> 44:13.500
拆成一个数组之后

44:13.500 --> 44:14.500
然后接下来

44:14.500 --> 44:16.500
这边点map

44:16.500 --> 44:18.500
map是不是可以去便利

44:18.500 --> 44:19.500
便利然后接下来

44:19.500 --> 44:21.500
拿到它的每一项

44:22.500 --> 44:24.500
拿到它的每一项之后

44:24.500 --> 44:26.500
然后接下来进行一个判断

44:26.500 --> 44:27.500
ef

44:27.500 --> 44:28.500
你这边

44:28.500 --> 44:30.500
ef

44:30.500 --> 44:32.500
这个item

44:32.500 --> 44:33.500
如果这个是

44:33.500 --> 44:35.500
q的话说明什么

44:35.500 --> 44:37.500
说明什么非数

44:37.500 --> 44:38.500
对不对

44:38.500 --> 44:39.500
所以我们这边

44:39.500 --> 44:40.500
这里要取个反

44:40.500 --> 44:41.500
要取个反

44:41.500 --> 44:42.500
ef

44:42.500 --> 44:43.500
非

44:43.500 --> 44:44.500
ef

44:44.500 --> 44:46.500
那我们这边就干嘛

44:46.500 --> 44:48.500
这就是return

44:48.500 --> 44:49.500
return这个item

44:49.500 --> 44:50.500
那最终这个

44:50.500 --> 44:51.500
会拿到一个什么

44:51.500 --> 44:53.500
会拿到一个这个数组

44:53.500 --> 44:54.500
对吧

44:54.500 --> 44:55.500
因为我这边是map

44:55.500 --> 44:56.500
这个会拿到一个数组

44:56.500 --> 44:57.500
数组的话

44:57.500 --> 44:58.500
这边再调什么

44:58.500 --> 44:59.500
再调

44:59.500 --> 45:00.500
join

45:01.500 --> 45:02.500
对吧

45:02.500 --> 45:03.500
再调join

45:03.500 --> 45:05.500
得到一个新的制服创

45:05.500 --> 45:06.500
新的制服创

45:06.500 --> 45:07.500
我们这边

45:07.500 --> 45:08.500
把它存一下

45:08.500 --> 45:09.500
const

45:09.500 --> 45:11.500
这个new value

45:13.500 --> 45:14.500
ok

45:14.500 --> 45:15.500
好那接下存了之后

45:15.500 --> 45:16.500
然后这边再来干嘛

45:16.500 --> 45:18.500
再来这个

45:18.500 --> 45:19.500
z

45:19.500 --> 45:20.500
set state

45:22.500 --> 45:23.500
这边value

45:23.500 --> 45:24.500
2

45:24.500 --> 45:26.500
对应的是这个new value

45:28.500 --> 45:29.500
看了没有

45:29.500 --> 45:31.500
好我们这边保存一下

45:31.500 --> 45:32.500
保存了之后

45:32.500 --> 45:33.500
让我们这边来看一下

45:33.500 --> 45:34.500
只能输数字

45:34.500 --> 45:35.500
我现在输a

45:35.500 --> 45:37.500
你看我输abc这些没用

45:37.500 --> 45:38.500
我输数字

45:38.500 --> 45:40.500
数字是不是就ok了

45:40.500 --> 45:41.500
看了没有

45:41.500 --> 45:42.500
你看我们这边

45:42.500 --> 45:43.500
就完完全全

45:43.500 --> 45:45.500
可以对用户的输入

45:45.500 --> 45:47.500
是不是进行一个控制

45:47.500 --> 45:48.500
对不对

45:48.500 --> 45:49.500
比如说你这边写的是

45:49.500 --> 45:51.500
写的是只能输数字

45:51.500 --> 45:52.500
那以前的话

45:52.500 --> 45:53.500
你就做不到这个效果

45:53.500 --> 45:55.500
以前的话用户想输什么就输什么

45:55.500 --> 45:56.500
最多就是什么

45:56.500 --> 45:58.500
最多就是最终

45:58.500 --> 46:00.500
最终就是比如在提交的时候

46:00.500 --> 46:02.500
拿到他的这个值

46:02.500 --> 46:03.500
然后接下来的话

46:03.500 --> 46:04.500
给他做一个处理

46:04.500 --> 46:05.500
对不对

46:05.500 --> 46:06.500
但是我现在的话

46:06.500 --> 46:07.500
你看我这个

46:07.500 --> 46:08.500
我让你只能输数字

46:08.500 --> 46:09.500
对吧

46:09.500 --> 46:11.500
我可以实时的反馈给这个用户

46:11.500 --> 46:12.500
反馈给用户

46:12.500 --> 46:13.500
用户输

46:13.500 --> 46:14.500
你看输这个什么

46:14.500 --> 46:16.500
字母这些是没有效果的

46:16.500 --> 46:17.500
包括这边

46:17.500 --> 46:19.500
这边自动转成大写

46:19.500 --> 46:20.500
用户的话

46:20.500 --> 46:21.500
立马就可以看到

46:21.500 --> 46:22.500
对吧

46:22.500 --> 46:23.500
立马就可以看到效果

46:23.500 --> 46:24.500
OK

46:24.500 --> 46:26.500
这个就是关于一个

46:26.500 --> 46:27.500
叫我们这里

46:27.500 --> 46:29.500
对用户输入内容进行限制

46:29.500 --> 46:31.500
这个其实也是这个

46:31.500 --> 46:32.500
受控组件

46:32.500 --> 46:34.500
它体现了一个优势

46:34.500 --> 46:35.500
OK

46:35.500 --> 46:36.500
把这个例子

46:36.500 --> 46:38.500
我把它放到笔记里面

46:38.500 --> 46:41.810
这边是react

46:44.120 --> 46:46.120
然后我就把整个这个

46:46.120 --> 46:48.120
我把整个这个

46:48.120 --> 46:49.120
我把它粘过来

46:49.120 --> 46:50.120
放过来

46:51.120 --> 46:52.120
OK

46:52.120 --> 46:54.120
这是第二个例子

46:54.120 --> 46:55.120
好

46:55.120 --> 46:56.120
那接下来的话

46:56.120 --> 46:57.120
接下来的话

46:57.120 --> 46:58.120
我们就来看一下

46:58.120 --> 47:00.120
关于这个文本粤

47:00.120 --> 47:02.120
单选和多选框

47:02.120 --> 47:04.120
以及这个下拉列表

47:04.120 --> 47:05.120
后面这一块

47:05.120 --> 47:06.120
后面这一块

47:06.120 --> 47:08.120
其实就是想说明一个问题

47:08.120 --> 47:10.120
就无论你是哪一个表达空间

47:10.120 --> 47:12.120
我们都让他干嘛呢

47:12.120 --> 47:14.120
都让他和这个

47:14.120 --> 47:15.120
state

47:15.120 --> 47:17.120
进行这个绑定了

47:17.120 --> 47:18.120
其实就这个

47:18.120 --> 47:19.120
其实就这个

47:19.120 --> 47:20.120
OK

47:20.120 --> 47:22.120
每个来看一下就可以了

47:22.120 --> 47:23.120
这就说明一个问题

47:23.120 --> 47:25.120
就是刚开始讲的那个问题

47:25.120 --> 47:27.120
无论你是哪一个表达空间

47:27.120 --> 47:28.120
他都和什么呢

47:28.120 --> 47:29.120
都和那个state绑定了

47:29.120 --> 47:31.120
你以后操控就操控state

47:31.120 --> 47:32.120
你不要跟我操控其他

47:32.120 --> 47:33.120
七七八八的

47:33.120 --> 47:34.120
对吧

47:34.120 --> 47:35.120
好

47:35.120 --> 47:36.120
来我们这边我们来看一下

47:38.120 --> 47:39.120
把这个干掉

47:39.120 --> 47:40.120
我就不要了

47:40.120 --> 47:42.120
笔记里面反正也

47:42.120 --> 47:43.120
记了的

47:44.120 --> 47:45.120
好这个干掉

47:45.120 --> 47:46.120
这个写个value吧

47:46.120 --> 47:47.120
写一个

47:48.120 --> 47:50.120
好这个这个把他干掉

47:51.120 --> 47:54.120
这个按钮按钮要不要按钮留着吧

47:54.120 --> 47:55.120
好

47:55.120 --> 47:56.120
然后接下来话这里

47:56.120 --> 47:59.120
这里话我们写一个text area

47:59.120 --> 48:01.120
写个text area

48:01.120 --> 48:02.120
出来了

48:02.120 --> 48:03.120
好你回忆一下

48:03.120 --> 48:05.120
以前的话你这个原生

48:05.120 --> 48:06.120
这个

48:06.120 --> 48:08.120
就原生js开bar的时候

48:08.120 --> 48:10.120
你要获取text area

48:10.120 --> 48:11.120
里面输的字

48:11.120 --> 48:13.120
是获取什么

48:13.120 --> 48:14.120
仔细想一想

48:14.120 --> 48:16.120
他和那个

48:16.120 --> 48:18.120
和那个

48:18.120 --> 48:20.120
input那个输入框

48:20.120 --> 48:21.120
还不一样

48:21.120 --> 48:22.120
对不对

48:22.120 --> 48:23.120
input输入框的话

48:23.120 --> 48:24.120
他是通过什么

48:24.120 --> 48:26.120
是不是通过就是这个value

48:26.120 --> 48:28.120
还记得吧

48:28.120 --> 48:30.120
就你如果原生js

48:30.120 --> 48:32.120
你要获取这个input输入框的字

48:32.120 --> 48:34.120
他实际上是获取了什么

48:34.120 --> 48:35.120
说获取这个value的字

48:35.120 --> 48:37.120
我首先拿到这个动物节点

48:37.120 --> 48:38.120
拿到这个动物节点之后

48:38.120 --> 48:40.120
然后加这边获取这个value这个字

48:40.120 --> 48:41.120
对不对

48:41.120 --> 48:42.120
好然后这个

48:42.120 --> 48:44.120
文本域的话他还不一样

48:44.120 --> 48:46.120
文本域的话其实是获取什么

48:46.120 --> 48:47.120
什么获取这儿的字

48:47.120 --> 48:48.120
对不对

48:48.120 --> 48:49.120
获取这儿的字

48:49.120 --> 48:50.120
OK

48:50.120 --> 48:51.120
还有点不一样

48:51.120 --> 48:52.120
我们这边来看一下

48:52.120 --> 48:54.120
这边是不是出来了

48:54.120 --> 48:55.120
对不对

48:55.120 --> 48:56.120
OK

48:56.120 --> 48:57.120
好那现在的话

48:57.120 --> 48:58.120
在wrapped里面的话

48:58.120 --> 49:00.120
他就给你统一了

49:00.120 --> 49:01.120
给你统一

49:01.120 --> 49:02.120
你这边你不要就是一会儿

49:02.120 --> 49:03.120
就是获取value

49:03.120 --> 49:05.120
一会儿又是获取这个标签之间的

49:05.120 --> 49:06.120
对吧

49:06.120 --> 49:07.120
标签之间的这个字

49:07.120 --> 49:09.120
搞得乱七八糟的

49:09.120 --> 49:10.120
统一让你干嘛

49:10.120 --> 49:11.120
统一你这边

49:11.120 --> 49:13.120
你就直接给我绑定了

49:13.120 --> 49:14.120
就完事了

49:14.120 --> 49:15.120
OK

49:15.120 --> 49:18.120
说我这边就直接给他绑定一个value

49:18.120 --> 49:20.120
绑定一个value

49:20.120 --> 49:22.120
value等于一个

49:22.120 --> 49:26.120
z.stat.value

49:26.120 --> 49:27.120
看到没有

49:27.120 --> 49:29.120
好把这些

49:29.120 --> 49:31.120
这些我把它干掉

49:31.120 --> 49:34.620
好把这个

49:34.620 --> 49:35.620
OK

49:35.620 --> 49:36.620
那你现在这个的话

49:36.620 --> 49:37.620
就可以写成一个什么

49:37.620 --> 49:38.620
可以写成一个单标签了

49:38.620 --> 49:39.620
对不对

49:39.620 --> 49:41.620
就可以写成个单标签了

49:41.620 --> 49:42.620
好然后加这边的话

49:42.620 --> 49:43.620
同样通过什么

49:43.620 --> 49:44.620
通过这边

49:44.620 --> 49:46.620
一个unchanged等于

49:46.620 --> 49:49.620
z.handleChange

49:49.620 --> 49:51.620
其实这边都是一样的

49:51.620 --> 49:52.620
其实是一样的

49:52.620 --> 49:53.620
然后这边的话

49:53.620 --> 49:55.620
setstat

49:55.620 --> 49:57.620
然后这边value

49:57.620 --> 49:58.620
对应的是什么

49:58.620 --> 49:59.620
是吧

49:59.620 --> 50:03.620
1.target.value

50:03.620 --> 50:04.620
对不对

50:04.620 --> 50:06.620
来我们这边我们来看一下

50:06.620 --> 50:07.620
刷新一下

50:07.620 --> 50:09.620
这边输入

50:09.620 --> 50:10.620
输入之后提交

50:10.620 --> 50:11.620
是不是拿到了

50:11.620 --> 50:12.620
对不对

50:12.620 --> 50:14.620
也就是我现在统一都通过什么

50:14.620 --> 50:15.620
都通过stat

50:15.620 --> 50:17.620
说白了就这个意思

50:17.620 --> 50:19.620
都通过这个stat来进行控制

50:19.620 --> 50:21.620
我管你什么

50:21.620 --> 50:22.620
就是单行输

50:22.620 --> 50:23.620
框也好

50:23.620 --> 50:24.620
还是文本域也好

50:24.620 --> 50:25.620
包括我们后面

50:25.620 --> 50:27.620
要介绍的这个下拉

50:27.620 --> 50:29.620
就是那个叫什么

50:29.620 --> 50:31.620
就是下拉列表也好

50:31.620 --> 50:33.620
还是这个多选框

50:33.620 --> 50:34.620
单选框也好

50:34.620 --> 50:36.620
全部通过他就完事了

50:36.620 --> 50:38.620
全部和这个stat绑定在一起

50:38.620 --> 50:39.620
回头你要提交

50:39.620 --> 50:40.620
整个表单的时候

50:40.620 --> 50:42.620
stat拿直就可以了

50:42.620 --> 50:44.620
这个就是他这个react

50:44.620 --> 50:46.620
他传达的一个思想

50:46.620 --> 50:47.620
什么叫收控组件

50:47.620 --> 50:48.620
就这个意思

50:48.620 --> 50:51.620
受到这个stat的这个控制

50:52.620 --> 50:54.620
把这个放过去

50:54.620 --> 50:56.620
放到笔记里面

50:56.620 --> 50:58.620
这里

50:59.620 --> 51:01.620
然后接下来的话

51:01.620 --> 51:03.620
这边是单选框和多选框

51:03.620 --> 51:04.620
包括下拉列表

51:04.620 --> 51:05.620
这个的话

51:05.620 --> 51:07.620
我就快速的演示一下

51:07.620 --> 51:09.620
找你能明白这个思想

51:09.620 --> 51:10.620
那代码的话

51:10.620 --> 51:11.620
对你来讲的话

51:11.620 --> 51:12.620
其实不是什么大问题

51:12.620 --> 51:15.620
而且大家又是学过这个view的

51:15.620 --> 51:16.620
是吧

51:16.620 --> 51:17.620
你想想你view里面

51:17.620 --> 51:18.620
你那个

51:18.620 --> 51:19.620
无论是下拉列表

51:19.620 --> 51:20.620
还是文本域

51:20.620 --> 51:22.620
还是这个单选框

51:22.620 --> 51:23.620
复选框

51:23.620 --> 51:25.620
是不是都和这个wagon model

51:25.620 --> 51:27.620
是绑定和那个data是不绑定

51:27.620 --> 51:28.620
双向绑定

51:28.620 --> 51:29.620
对不对

51:29.620 --> 51:30.620
就一个意思

51:30.620 --> 51:31.620
一个意思

51:31.620 --> 51:34.620
好来看一下这个单选

51:34.620 --> 51:35.620
单选

51:35.620 --> 51:37.620
怎么跳过来了

51:37.620 --> 51:38.620
好来看一下

51:38.620 --> 51:40.620
我们这边过来嘛

51:40.620 --> 51:42.620
然后这边的话单选

51:42.620 --> 51:44.620
单选的话我们这里

51:44.620 --> 51:46.620
我们这边state

51:46.620 --> 51:47.620
state的话

51:47.620 --> 51:49.620
我们这边给他一个

51:49.620 --> 51:51.620
我们写个那个嘛

51:51.620 --> 51:52.620
写个复选框吗

51:52.620 --> 51:54.620
写个这个checkbox

51:54.620 --> 51:56.620
checkbox

51:56.620 --> 51:59.060
checkbox

51:59.060 --> 52:01.060
然后我们给他对应是一个什么呢

52:01.060 --> 52:02.060
对应是个数组

52:02.060 --> 52:03.060
数组里面

52:03.060 --> 52:04.060
然后接下来这边

52:04.060 --> 52:06.060
就是会有这个content

52:06.060 --> 52:08.060
content

52:08.060 --> 52:10.060
content的比如说对应的是

52:10.060 --> 52:13.060
比如说HTML

52:13.060 --> 52:17.060
然后在这边对应了一个这个check的

52:17.060 --> 52:19.060
check的对应的是一个

52:19.060 --> 52:20.060
foss

52:20.060 --> 52:21.060
ok

52:21.060 --> 52:22.060
我们多搞几个

52:22.060 --> 52:24.060
比如说这边的话

52:24.060 --> 52:25.060
css

52:25.060 --> 52:26.060
这边

52:26.060 --> 52:28.060
model都是foss嘛

52:28.060 --> 52:29.060
然后接下来这边

52:29.060 --> 52:30.060
jss

52:30.060 --> 52:31.060
然后在这边比如说

52:31.060 --> 52:32.060
vue

52:32.060 --> 52:33.060
这边

52:33.060 --> 52:35.060
react

52:35.060 --> 52:36.060
ok

52:36.060 --> 52:37.060
那接下来我们这边

52:37.060 --> 52:39.060
我们来渲染一个

52:39.060 --> 52:41.060
好这边单独给个tiv

52:41.060 --> 52:42.060
让他稍微分割一下

52:42.060 --> 52:44.060
好我这边就可以通过什么呢

52:44.060 --> 52:46.060
这边我就可以通过

52:46.060 --> 52:47.060
z

52:47.060 --> 52:49.060
点state

52:49.060 --> 52:51.060
点这个什么

52:51.060 --> 52:53.060
checkbox

52:53.060 --> 52:54.060
ok

52:54.060 --> 52:55.060
这个拿到的是什么

52:55.060 --> 52:57.060
这个拿到的是不是这个数组啊

52:57.060 --> 52:58.060
对不对

52:58.060 --> 53:00.060
拿到的是这个数组

53:00.060 --> 53:01.060
拿到的是这个数组

53:01.060 --> 53:02.060
然后接下来我这边

53:02.060 --> 53:04.060
点map

53:04.060 --> 53:05.060
就便利他

53:05.060 --> 53:06.060
便利他之后

53:06.060 --> 53:07.060
然后接下来的话

53:07.060 --> 53:09.060
我这边拿到每一项

53:09.060 --> 53:11.060
以及他的这个下标

53:11.060 --> 53:12.060
ok

53:12.060 --> 53:13.060
好然后接下来的话

53:13.060 --> 53:16.060
我这边我返回

53:16.060 --> 53:18.060
我返回一个什么呢

53:18.060 --> 53:20.060
我这边的话

53:20.060 --> 53:23.060
我返回一个这个input

53:23.060 --> 53:26.890
这边这边改成什么

53:26.890 --> 53:28.890
改成这个checkbox

53:28.890 --> 53:31.890
checkbox

53:31.890 --> 53:32.890
ok

53:32.890 --> 53:33.890
好然后接下来

53:33.890 --> 53:34.890
这边这个value

53:34.890 --> 53:35.890
value的话

53:35.890 --> 53:38.890
我们这边就让他对应的是

53:38.890 --> 53:40.890
你这边对应的应该是

53:40.890 --> 53:42.890
我想想

53:42.890 --> 53:44.890
这里的话就应该是

53:44.890 --> 53:45.890
item

53:45.890 --> 53:46.890
item是吧

53:46.890 --> 53:47.890
每个对象

53:47.890 --> 53:48.890
大家点什么

53:48.890 --> 53:49.890
不content

53:49.890 --> 53:50.890
对吧

53:50.890 --> 53:51.890
value应该是这个

53:51.890 --> 53:52.890
好然后加这边

53:52.890 --> 53:54.890
我们给他一个这个checked

53:54.890 --> 53:55.890
checked的话就等于什么呢

53:55.890 --> 53:57.890
等于你这个item

53:57.890 --> 53:59.890
点这个checked

53:59.890 --> 54:00.890
ok

54:00.890 --> 54:01.890
我们整体的话

54:01.890 --> 54:02.890
我看一下整体

54:02.890 --> 54:05.890
要不要给他包一个

54:05.890 --> 54:06.890
让他包一个

54:06.890 --> 54:07.890
因为他这边的话

54:07.890 --> 54:08.890
因为我们设置到这个map

54:08.890 --> 54:10.890
map他一会会提示那个key

54:10.890 --> 54:11.890
我们一会再说吧

54:11.890 --> 54:12.890
一会再说

54:12.890 --> 54:13.890
ok好这边

54:13.890 --> 54:14.890
给一个这个checked

54:14.890 --> 54:15.890
好大家这边

54:15.890 --> 54:16.890
还应该有个什么呢

54:16.890 --> 54:18.890
还应该有一个这个

54:18.890 --> 54:20.890
把这个这样子写

54:20.890 --> 54:21.890
我们一步一步来玩上

54:21.890 --> 54:23.890
这边这个view

54:23.890 --> 54:25.890
ok

54:25.890 --> 54:26.890
一步一步来玩上

54:26.890 --> 54:27.890
好我们首先的话

54:27.890 --> 54:29.890
我们先就这样子

54:29.890 --> 54:30.890
先就这样子

54:30.890 --> 54:31.890
保存一下

54:31.890 --> 54:32.890
什么样子

54:32.890 --> 54:33.890
好现在的话是这个样子的

54:33.890 --> 54:34.890
你看

54:34.890 --> 54:35.890
啊包了这边

54:35.890 --> 54:36.890
首先第一个

54:36.890 --> 54:38.890
17 child

54:38.890 --> 54:39.890
in a list

54:39.890 --> 54:41.890
should have a unique key

54:41.890 --> 54:42.890
对吧

54:42.890 --> 54:43.890
这就是我刚才所说的

54:43.890 --> 54:44.890
他会包那个key

54:44.890 --> 54:45.890
这个问题

54:45.890 --> 54:46.890
key这个问题的话

54:46.890 --> 54:47.890
你参照这里

54:47.890 --> 54:48.890
参照这边

54:48.890 --> 54:50.890
类表 and key

54:50.890 --> 54:51.890
ok

54:51.890 --> 54:52.890
这个的话

54:52.890 --> 54:53.890
大家下去自己

54:53.890 --> 54:54.890
把他看一下

54:54.890 --> 54:55.890
这个就和那个view一是一样的

54:55.890 --> 54:56.890
view一的话

54:56.890 --> 54:57.890
你通过那个map

54:57.890 --> 54:58.890
选择的时候

54:58.890 --> 54:59.890
是不是也是需要一个key

54:59.890 --> 55:00.890
对吧

55:00.890 --> 55:01.890
ok

55:01.890 --> 55:02.890
好大家这边

55:02.890 --> 55:03.890
这边的话

55:03.890 --> 55:04.890
是you provided

55:04.890 --> 55:05.890
check the pop

55:05.890 --> 55:06.890
from this without

55:06.890 --> 55:07.890
unchained

55:07.890 --> 55:08.890
这个时候我们也知道了

55:08.890 --> 55:09.890
对不对

55:09.890 --> 55:10.890
我们这边呢

55:10.890 --> 55:12.890
需要给他绑定一个

55:12.890 --> 55:14.890
这个unchained

55:15.890 --> 55:16.890
unchained

55:16.890 --> 55:18.890
等于一个handle

55:18.890 --> 55:21.520
chained

55:21.520 --> 55:22.520
等于一个handle

55:22.520 --> 55:23.520
chained

55:23.520 --> 55:24.520
先住掉

55:24.520 --> 55:25.520
ok

55:25.520 --> 55:26.520
保存

55:26.520 --> 55:27.520
保存之后

55:27.520 --> 55:28.520
然后就在这边

55:28.520 --> 55:29.520
就只剩那个key

55:29.520 --> 55:30.520
key的话

55:30.520 --> 55:31.520
我们这边

55:31.520 --> 55:32.520
我们现在这里

55:32.520 --> 55:33.520
这里的话

55:33.520 --> 55:34.520
你看是不是就五个

55:34.520 --> 55:35.520
多选谎

55:35.520 --> 55:36.520
我们这边

55:36.520 --> 55:37.520
这样子

55:37.520 --> 55:38.520
我们这边后面再给他

55:38.520 --> 55:39.520
添加一个span

55:40.520 --> 55:41.520
span的话

55:41.520 --> 55:42.520
这边对应一个什么呢

55:42.520 --> 55:44.520
对应一个

55:45.520 --> 55:47.520
item.content

55:47.520 --> 55:49.900
ok

55:49.900 --> 55:50.900
然后整体的话

55:50.900 --> 55:52.900
然后把它包在一个什么呢

55:52.900 --> 55:53.900
包在一个

55:53.900 --> 55:55.900
diway里面

55:55.900 --> 55:58.460
ok

55:58.460 --> 55:59.460
格式化一下

55:59.460 --> 56:00.460
保存

56:00.460 --> 56:02.460
现在是不是这样子

56:02.460 --> 56:03.460
这样子之后

56:03.460 --> 56:04.460
一个key

56:04.460 --> 56:05.460
你把它设置一下

56:05.460 --> 56:06.460
这边这个key

56:06.460 --> 56:07.460
key的话就是

56:07.460 --> 56:08.460
应该是等于

56:08.460 --> 56:11.460
我们就直接index

56:11.460 --> 56:14.460
是不是就ok了

56:14.460 --> 56:15.460
对不对

56:15.460 --> 56:16.460
好

56:16.460 --> 56:17.460
接下来

56:17.460 --> 56:18.460
我这边我来选择

56:18.460 --> 56:19.460
选不动

56:19.460 --> 56:20.460
对不对

56:20.460 --> 56:21.460
选不动

56:21.460 --> 56:22.460
为什么会选不动

56:22.460 --> 56:23.460
原因很简单

56:23.460 --> 56:24.460
你这边的话

56:24.460 --> 56:25.460
你这边

56:25.460 --> 56:26.460
它是不是

56:26.460 --> 56:27.460
它是个受控组建

56:27.460 --> 56:28.460
受控组建的话

56:28.460 --> 56:29.460
你回头

56:29.460 --> 56:30.460
需要去操控什么

56:30.460 --> 56:32.460
需要去操控他

56:32.460 --> 56:33.460
对不对

56:33.460 --> 56:35.460
你需要去操控你的checkbox

56:35.460 --> 56:36.460
说说我们这边

56:36.460 --> 56:38.460
我们来看一下

56:38.460 --> 56:39.460
我们这边来看一下

56:39.460 --> 56:43.460
这边拿到的是什么

56:43.460 --> 56:44.460
你这里的话

56:44.460 --> 56:45.460
这边是一个e

56:45.460 --> 56:46.460
e的话

56:46.460 --> 56:48.460
我们这边我们来看一下

56:48.460 --> 56:51.460
e.target

56:51.460 --> 56:52.460
ok

56:52.460 --> 56:54.460
大家这边

56:54.460 --> 56:55.460
点击

56:55.460 --> 56:56.460
你看拿到的是什么

56:56.460 --> 56:58.460
是不是拿到的是这个checkbox

56:58.460 --> 56:59.460
对不对

56:59.460 --> 57:01.460
拿到的是这个复权框

57:01.460 --> 57:02.460
这边的话

57:02.460 --> 57:03.460
我们想干嘛呢

57:03.460 --> 57:05.460
我们是不是想要拿到他的下标

57:05.460 --> 57:06.460
说说我们把这边

57:06.460 --> 57:08.460
我们要改一下

57:08.460 --> 57:09.460
把这里

57:09.460 --> 57:11.460
这里我们需要传一个参数

57:11.460 --> 57:12.460
说说我们这边

57:12.460 --> 57:14.460
这个传参之前讲过的

57:14.460 --> 57:15.460
对吧

57:15.460 --> 57:16.460
事件如何传参

57:16.460 --> 57:17.460
把这改一下

57:17.460 --> 57:18.460
然后我们这边把什么

57:18.460 --> 57:20.460
把这个index

57:20.460 --> 57:22.460
我们把它传递过去

57:22.460 --> 57:23.460
index传递过去

57:23.460 --> 57:24.460
然后接下来

57:24.460 --> 57:26.460
回到我们的事件处理函数

57:26.460 --> 57:27.460
事件处理函数这边

57:27.460 --> 57:28.460
这边就是

57:28.460 --> 57:30.460
应该是可以拿到index

57:30.460 --> 57:32.460
我们这边来看一下

57:32.460 --> 57:34.460
能不能拿到这个index

57:34.460 --> 57:35.460
刷新一下

57:35.460 --> 57:36.460
走

57:36.460 --> 57:37.460
拿到没有

57:37.460 --> 57:38.460
走

57:38.460 --> 57:39.460
是不是就拿到了

57:39.460 --> 57:40.460
对不对

57:40.460 --> 57:41.460
拿到之后

57:41.460 --> 57:42.460
后面好不好办

57:42.460 --> 57:43.460
后面是不是就好办了

57:43.460 --> 57:44.460
对不对

57:44.460 --> 57:45.460
拿到index之后

57:45.460 --> 57:46.460
要这样我去改谁

57:46.460 --> 57:47.460
去改他

57:47.460 --> 57:49.460
根据你的index

57:49.460 --> 57:50.460
要这样我去改

57:50.460 --> 57:52.460
里面对应的某一个

57:52.460 --> 57:53.460
我是不是把它改成

57:53.460 --> 57:55.460
对应的check的是

57:55.460 --> 57:57.460
是不是就ok了

57:57.460 --> 57:58.460
对吧

57:58.460 --> 57:59.460
好

57:59.460 --> 58:00.460
我们这边的话

58:00.460 --> 58:01.460
你这边改的话

58:01.460 --> 58:03.460
你不要直接去修改他

58:03.460 --> 58:04.460
有东西说

58:04.460 --> 58:05.460
那改很简单

58:05.460 --> 58:06.460
我这边拿到state

58:06.460 --> 58:08.460
然后这样我这边checkbox

58:08.460 --> 58:09.460
对吧

58:09.460 --> 58:10.460
这样我获取到

58:10.460 --> 58:11.460
数组具体的某一项

58:11.460 --> 58:13.460
然后这样直接去修改

58:13.460 --> 58:14.460
你不要

58:14.460 --> 58:15.460
我们这边拿一个新的数组

58:15.460 --> 58:17.460
去覆盖他

58:17.460 --> 58:18.460
ok

58:18.460 --> 58:19.460
所以我们这边就是

58:19.460 --> 58:20.460
这样子

58:20.460 --> 58:22.460
点点点

58:22.460 --> 58:23.460
z点

58:23.460 --> 58:24.460
state

58:24.460 --> 58:27.460
点这个checkbox

58:27.460 --> 58:28.460
获取到一个新的数组

58:28.460 --> 58:29.460
对吧

58:29.460 --> 58:31.460
我们这边const

58:31.460 --> 58:32.460
一个这个ar

58:33.460 --> 58:35.460
拿到这个新的数组

58:35.460 --> 58:36.460
拿到这个新的数组之后

58:36.460 --> 58:37.460
然后接下来的话

58:37.460 --> 58:38.460
这个ar

58:38.460 --> 58:41.460
然后接下来index

58:41.460 --> 58:44.460
对应了这一项的这个check的

58:44.460 --> 58:45.460
等于什么呢

58:45.460 --> 58:48.460
等于这一项是不取版

58:48.460 --> 58:51.460
等于这一项的index

58:51.460 --> 58:52.460
是不取版

58:52.460 --> 58:53.460
对不对

58:53.460 --> 58:54.460
取完之后

58:54.460 --> 58:55.460
然后接下来

58:55.460 --> 58:56.460
z点

58:56.460 --> 58:58.460
setstate

58:58.460 --> 59:00.460
再来设置

59:00.460 --> 59:03.460
然后把这个checkbox

59:03.460 --> 59:05.460
checkbox

59:05.460 --> 59:07.460
设置为这个

59:07.460 --> 59:08.460
ok

59:08.460 --> 59:09.460
好

59:09.460 --> 59:10.460
大家这边来看一下

59:10.460 --> 59:11.460
刷新

59:11.460 --> 59:13.460
走

59:13.460 --> 59:14.460
走

59:14.460 --> 59:15.460
是不是就ok了

59:15.460 --> 59:16.460
回头你在提交的时候

59:16.460 --> 59:17.460
提交的时候

59:17.460 --> 59:18.460
你这边就直接干嘛

59:18.460 --> 59:19.460
这边的话就可以

59:19.460 --> 59:21.460
拿到这个z点

59:21.460 --> 59:22.460
state点

59:22.460 --> 59:23.460
checkbox

59:23.460 --> 59:24.460
回头你就可以知道

59:24.460 --> 59:25.460
是不是哪些是选中了

59:25.460 --> 59:27.460
哪些是没选中

59:27.460 --> 59:28.460
对不对

59:28.460 --> 59:29.460
好

59:29.460 --> 59:30.460
这边来看一下

59:30.460 --> 59:31.460
选中

59:31.460 --> 59:33.460
这三个提交

59:33.460 --> 59:35.460
诶

59:35.460 --> 59:36.460
这边是

59:36.460 --> 59:37.460
他应该是做了一个转换

59:37.460 --> 59:39.460
我们这边就直接打印吧

59:39.460 --> 59:42.780
打印这个

59:42.780 --> 59:45.780
然后这边的话

59:45.780 --> 59:46.780
走

59:46.780 --> 59:47.780
你看

59:47.780 --> 59:48.780
这边是不是可以直接拿到

59:48.780 --> 59:49.780
哪些是cho

59:49.780 --> 59:50.780
对吧

59:50.780 --> 59:51.780
哪些是force

59:51.780 --> 59:53.780
通过这个state

59:53.780 --> 59:54.780
总之你记住

59:54.780 --> 59:55.780
最终你

59:55.780 --> 59:57.780
比如说你要提交的时候

59:57.780 --> 59:58.780
因为我们一般的话就是

59:58.780 --> 01:00:01.780
获取到这个用户输入的表达内容

01:00:01.780 --> 01:00:03.780
最终是要提交给这个服务器的

01:00:03.780 --> 01:00:04.780
对不对

01:00:04.780 --> 01:00:05.780
你最终提交提交的是谁

01:00:05.780 --> 01:00:07.780
提交的是他

01:00:07.780 --> 01:00:08.780
ok

01:00:08.780 --> 01:00:10.780
提交的是你的state

01:00:10.780 --> 01:00:11.780
啊

01:00:11.780 --> 01:00:12.780
提交是你的state

01:00:12.780 --> 01:00:13.780
state和你的这边

01:00:13.780 --> 01:00:15.780
进行一个绑定

01:00:15.780 --> 01:00:17.780
这就所谓的受控逐渐

01:00:17.780 --> 01:00:18.780
好

01:00:18.780 --> 01:00:19.780
把这个例子

01:00:19.780 --> 01:00:21.780
放到笔记里面

01:00:21.780 --> 01:00:27.550
放到这边

01:00:27.550 --> 01:00:28.550
好

01:00:28.550 --> 01:00:30.550
这个单选和多选框

01:00:30.550 --> 01:00:31.550
然后接下这边的话

01:00:31.550 --> 01:00:32.550
下一个

01:00:32.550 --> 01:00:34.550
下一个的话是关于这个下拉列表

01:00:34.550 --> 01:00:37.550
下拉列表的话在这个

01:00:37.550 --> 01:00:39.550
他官网他这边应该是介绍的

01:00:39.550 --> 01:00:41.550
下拉列表看一下啊

01:00:41.550 --> 01:00:43.550
这是text area

01:00:43.550 --> 01:00:44.550
在这里

01:00:44.550 --> 01:00:45.550
这边是介绍的

01:00:45.550 --> 01:00:47.550
也是一样的

01:00:47.550 --> 01:00:48.550
也是一样的

01:00:48.550 --> 01:00:49.550
那么来看一下啊

01:00:49.550 --> 01:00:50.550
在html中

01:00:50.550 --> 01:00:52.550
这个select

01:00:52.550 --> 01:00:53.550
创建了下拉列表

01:00:53.550 --> 01:00:54.550
比如这个

01:00:54.550 --> 01:00:56.550
这个的话一般我们会写一个什么

01:00:56.550 --> 01:00:59.550
是不是写一个selected

01:00:59.550 --> 01:01:00.550
代表什么

01:01:00.550 --> 01:01:01.550
代表是不是这个

01:01:01.550 --> 01:01:02.550
就是默认被选择

01:01:02.550 --> 01:01:04.550
在rept中的话

01:01:04.550 --> 01:01:06.550
我们如果要使用这个受控逐渐

01:01:06.550 --> 01:01:08.550
我们统一使用什么呢

01:01:08.550 --> 01:01:10.550
使用这个value来进行处理

01:01:10.550 --> 01:01:12.550
看不看这样会更便捷一些

01:01:12.550 --> 01:01:13.550
通过value

01:01:13.550 --> 01:01:14.550
然后这边的话

01:01:14.550 --> 01:01:16.550
是不是会有一个这个value

01:01:16.550 --> 01:01:17.550
对应了这个值

01:01:17.550 --> 01:01:18.550
ok

01:01:18.550 --> 01:01:19.550
好

01:01:19.550 --> 01:01:20.550
然后再这边你看

01:01:20.550 --> 01:01:21.550
这边select

01:01:21.550 --> 01:01:22.550
看不看

01:01:22.550 --> 01:01:23.550
直接设置这个value就可以了

01:01:23.550 --> 01:01:25.550
然后这样你安清级的时候

01:01:25.550 --> 01:01:27.550
就是拿到

01:01:27.550 --> 01:01:30.550
拿到这个你选择了这个值

01:01:30.550 --> 01:01:32.550
你选择了哪个opin

01:01:32.550 --> 01:01:33.550
拿到这个值

01:01:33.550 --> 01:01:34.550
改变这个value值

01:01:34.550 --> 01:01:35.550
就可以了

01:01:35.550 --> 01:01:36.550
好

01:01:36.550 --> 01:01:37.550
来我们来写一下

01:01:37.550 --> 01:01:38.550
写一下你就知道了

01:01:38.550 --> 01:01:39.550
比如说我这边

01:01:42.550 --> 01:01:43.550
然后把这边

01:01:45.550 --> 01:01:46.550
这边比如说

01:01:46.550 --> 01:01:48.550
我们有一个下拉列表

01:01:48.550 --> 01:01:49.550
select

01:01:49.550 --> 01:01:50.550
对吧

01:01:50.550 --> 01:01:51.550
select

01:01:51.550 --> 01:01:52.550
然后接下来里面

01:01:52.550 --> 01:01:53.550
会有一些opin

01:01:54.550 --> 01:01:56.550
opin对应的比如说

01:01:56.550 --> 01:01:57.550
html

01:01:57.550 --> 01:01:58.550
然后

01:01:58.550 --> 01:01:59.550
css

01:01:59.550 --> 01:02:00.550
然后

01:02:00.550 --> 01:02:01.550
js

01:02:02.550 --> 01:02:03.550
然后再这边

01:02:03.550 --> 01:02:04.550
表ve

01:02:04.550 --> 01:02:05.550
然后

01:02:05.550 --> 01:02:06.550
react

01:02:06.550 --> 01:02:08.550
对应了这个value值

01:02:08.550 --> 01:02:09.550
html

01:02:09.550 --> 01:02:10.550
css

01:02:10.550 --> 01:02:11.550
然后

01:02:11.550 --> 01:02:12.550
js

01:02:13.550 --> 01:02:14.550
ve

01:02:15.550 --> 01:02:16.550
react

01:02:16.550 --> 01:02:17.550
ok

01:02:17.550 --> 01:02:18.550
那以前的话

01:02:18.550 --> 01:02:19.550
在html里面

01:02:19.550 --> 01:02:20.550
比如说要设置某一个

01:02:20.550 --> 01:02:21.550
是被选中的

01:02:21.550 --> 01:02:22.550
是不是在这个

01:02:22.550 --> 01:02:24.550
这边加一个select

01:02:24.550 --> 01:02:25.550
就这样子来写的

01:02:25.550 --> 01:02:26.550
现在就不是了

01:02:26.550 --> 01:02:27.550
这个的话

01:02:27.550 --> 01:02:28.550
统一通过什么呢

01:02:28.550 --> 01:02:29.550
统一通过这边

01:02:29.550 --> 01:02:30.550
通过这个

01:02:30.550 --> 01:02:32.550
set来进行控制

01:02:32.550 --> 01:02:33.550
set如何进行控制呢

01:02:33.550 --> 01:02:35.550
比如我们这边有一个value

01:02:35.550 --> 01:02:38.550
value对应比如说对应的就是html

01:02:38.550 --> 01:02:39.550
ok

01:02:39.550 --> 01:02:40.550
好

01:02:40.550 --> 01:02:42.550
接下来在你的select这边

01:02:42.550 --> 01:02:44.550
select这边的话

01:02:44.550 --> 01:02:45.550
我们这边就可以写一个

01:02:45.550 --> 01:02:46.550
这两个都不要了

01:02:46.550 --> 01:02:48.550
可以写一个value

01:02:48.550 --> 01:02:50.550
它的value就等于一个

01:02:50.550 --> 01:02:54.550
z.state.value

01:02:54.550 --> 01:02:56.550
那z.state value就是谁

01:02:56.550 --> 01:02:57.550
是不是就是这边

01:02:57.550 --> 01:02:58.550
html

01:02:58.550 --> 01:02:59.550
对吧

01:02:59.550 --> 01:03:01.550
那默认的话就是谁被选中

01:03:01.550 --> 01:03:03.550
是不是就是html被选中

01:03:03.550 --> 01:03:04.550
可不可以

01:03:04.550 --> 01:03:05.550
而且你现在改不了

01:03:05.550 --> 01:03:06.550
可不可以

01:03:06.550 --> 01:03:07.550
改不了

01:03:07.550 --> 01:03:08.550
它是受控的

01:03:08.550 --> 01:03:09.550
受state控制

01:03:09.550 --> 01:03:10.550
改不了

01:03:10.550 --> 01:03:11.550
想要改怎么办

01:03:11.550 --> 01:03:12.550
一样的

01:03:12.550 --> 01:03:13.550
这边是不是通过

01:03:13.550 --> 01:03:14.550
change

01:03:14.550 --> 01:03:16.550
z.handleChange

01:03:16.550 --> 01:03:17.550
对吧

01:03:17.550 --> 01:03:18.550
好

01:03:18.550 --> 01:03:20.550
在这里

01:03:20.550 --> 01:03:22.550
这里拿到什么

01:03:22.550 --> 01:03:28.550
拿到你的这个1.target.value

01:03:28.550 --> 01:03:29.550
对吧

01:03:29.550 --> 01:03:30.550
这个是可以拿到的

01:03:30.550 --> 01:03:33.930
我们来看一下

01:03:33.930 --> 01:03:34.930
这边

01:03:34.930 --> 01:03:35.930
刷新

01:03:35.930 --> 01:03:37.930
然后这边css

01:03:37.930 --> 01:03:38.930
是不是可以拿到这个字

01:03:38.930 --> 01:03:39.930
对不对

01:03:39.930 --> 01:03:40.930
这个value值我们是可以拿到了

01:03:40.930 --> 01:03:41.930
拿到之后

01:03:41.930 --> 01:03:42.930
让我们去更新什么

01:03:42.930 --> 01:03:43.930
更新state

01:03:43.930 --> 01:03:44.930
这就完事了

01:03:44.930 --> 01:03:45.930
对不对

01:03:45.930 --> 01:03:46.930
你state又和select

01:03:46.930 --> 01:03:48.930
这边是绑定在一起的

01:03:48.930 --> 01:03:50.930
所以你这边state一变

01:03:50.930 --> 01:03:51.930
select

01:03:51.930 --> 01:03:53.930
它选择的项目是不是就变了

01:03:53.930 --> 01:03:54.930
对吧

01:03:54.930 --> 01:03:55.930
所以这边

01:03:55.930 --> 01:03:59.930
z.state

01:03:59.930 --> 01:04:00.930
value

01:04:00.930 --> 01:04:02.930
value doing的是

01:04:02.930 --> 01:04:06.930
1.target.value

01:04:06.930 --> 01:04:07.930
保存

01:04:07.930 --> 01:04:09.930
保存来看一下

01:04:09.930 --> 01:04:10.930
这边

01:04:10.930 --> 01:04:11.930
是不是可以改了

01:04:11.930 --> 01:04:12.930
对

01:04:12.930 --> 01:04:14.930
并且你这边提交的时候

01:04:14.930 --> 01:04:15.930
提交这边

01:04:15.930 --> 01:04:16.930
提交的话是不是

01:04:16.930 --> 01:04:18.930
提交这个value就可以了

01:04:18.930 --> 01:04:19.930
对吧

01:04:19.930 --> 01:04:21.930
刷新一下

01:04:21.930 --> 01:04:22.930
这边

01:04:22.930 --> 01:04:23.930
你这边是可以改了

01:04:23.930 --> 01:04:24.930
改了之后再提交

01:04:24.930 --> 01:04:27.930
这边是不是拿到这个view

01:04:27.930 --> 01:04:29.930
拿到你选择的这个字

01:04:29.930 --> 01:04:30.930
看了没有

01:04:30.930 --> 01:04:34.930
这就是下拉列表

01:04:34.930 --> 01:04:35.930
整理明白了思想

01:04:35.930 --> 01:04:36.930
我还是那句话

01:04:36.930 --> 01:04:38.930
就整理明白了思想

01:04:38.930 --> 01:04:40.930
你就知道它这里面是怎么玩的了

01:04:40.930 --> 01:04:41.930
它的思想就是

01:04:41.930 --> 01:04:43.930
所有的都和谁绑定

01:04:43.930 --> 01:04:44.930
都和state绑定

01:04:44.930 --> 01:04:45.930
整理明白了这一点

01:04:45.930 --> 01:04:47.930
你这边就不会

01:04:49.930 --> 01:04:50.930
想着我这边的话

01:04:50.930 --> 01:04:52.930
下拉列表该怎么写

01:04:52.930 --> 01:04:53.930
接下复选框该怎么写

01:04:53.930 --> 01:04:55.930
单选框是该怎么写

01:04:55.930 --> 01:04:56.930
你看我们刚才举的是什么

01:04:56.930 --> 01:04:58.930
举的是复选框

01:04:58.930 --> 01:04:59.930
多选框

01:04:59.930 --> 01:05:01.930
我这边没有举单选框

01:05:01.930 --> 01:05:03.930
举的是复选框

01:05:03.930 --> 01:05:04.930
单选框该怎么写

01:05:04.930 --> 01:05:06.930
你下去就可以自己试一试

01:05:06.930 --> 01:05:09.930
这就留给大家

01:05:09.930 --> 01:05:11.930
算是留一个作业

01:05:11.930 --> 01:05:12.930
大家自己思考一下

01:05:12.930 --> 01:05:14.930
我这个复选框

01:05:14.930 --> 01:05:15.930
我这边扣转上演示了

01:05:15.930 --> 01:05:18.930
单选框该怎么做呢

01:05:18.930 --> 01:05:20.930
你只要理解了思想

01:05:20.930 --> 01:05:22.930
那肯定是否还是和state

01:05:22.930 --> 01:05:24.930
是绑定在一起

01:05:26.930 --> 01:05:29.930
我看一下官网有没有讲

01:05:29.930 --> 01:05:32.930
官网好像没有那个例子

01:05:32.930 --> 01:05:33.930
没有单选框的

01:05:33.930 --> 01:05:35.930
大家下去可以研究一下

01:05:35.930 --> 01:05:37.930
研究一下单选框

01:05:40.930 --> 01:05:43.930
这是关于受控逐渐

01:05:44.930 --> 01:05:46.930
举了这么几个例子

01:05:46.930 --> 01:05:49.930
我们把那个非受控逐渐说一下

01:05:49.930 --> 01:05:50.930
讲了一个多小时了

01:05:50.930 --> 01:05:51.930
没关系

01:05:51.930 --> 01:05:53.930
我们这边就三个例子

01:05:53.930 --> 01:05:55.930
我们把这个非受控逐渐说一下

01:05:55.930 --> 01:05:57.930
什么叫做非受控逐渐

01:05:57.930 --> 01:05:59.930
我们刚才讲这个受控逐渐

01:05:59.930 --> 01:06:00.930
受控逐渐的话

01:06:00.930 --> 01:06:04.930
就是你表达空间和state

01:06:04.930 --> 01:06:06.930
进行一个绑定

01:06:06.930 --> 01:06:07.930
非受控的话

01:06:07.930 --> 01:06:09.930
是不是就是相反的

01:06:09.930 --> 01:06:11.930
就没有和state进行绑定

01:06:11.930 --> 01:06:12.930
对不对

01:06:12.930 --> 01:06:14.930
你没有和state进行绑定的话

01:06:14.930 --> 01:06:16.930
那我比如说我想获取

01:06:16.930 --> 01:06:19.930
表达空间里面说的这个值

01:06:19.930 --> 01:06:20.930
那怎么办

01:06:20.930 --> 01:06:22.930
还是就是使用

01:06:22.930 --> 01:06:25.930
就是以前传统的动物这种方案

01:06:25.930 --> 01:06:26.930
OK

01:06:26.930 --> 01:06:28.930
就使用这种方案

01:06:28.930 --> 01:06:29.930
使用这种方案

01:06:29.930 --> 01:06:30.930
然后接下来的话

01:06:30.930 --> 01:06:31.930
去获取他的这个值

01:06:31.930 --> 01:06:32.930
我们这边

01:06:32.930 --> 01:06:33.930
我们演示三个

01:06:33.930 --> 01:06:36.930
一个是非受控逐渐

01:06:36.930 --> 01:06:37.930
基本势力

01:06:37.930 --> 01:06:39.930
还有一个是默认值

01:06:39.930 --> 01:06:40.930
还有一个就是

01:06:40.930 --> 01:06:42.930
打官方的这个文件上传

01:06:42.930 --> 01:06:43.930
我们一个一个来看

01:06:43.930 --> 01:06:47.260
好

01:06:47.260 --> 01:06:48.260
首先第一个

01:06:48.260 --> 01:06:52.260
关于非受控逐渐的一个基本的势力

01:06:52.260 --> 01:06:53.260
好吧

01:06:53.260 --> 01:06:54.260
这个就干掉

01:06:54.260 --> 01:06:56.260
这边我们就不需要state了

01:06:56.260 --> 01:06:57.260
对吧

01:06:57.260 --> 01:06:58.260
state就不需要了

01:06:58.260 --> 01:07:01.260
这些也就先把它干掉吧

01:07:01.260 --> 01:07:03.260
先让它干干净净的

01:07:03.260 --> 01:07:05.260
OK

01:07:05.260 --> 01:07:08.260
稍等

01:07:08.260 --> 01:07:09.260
然后接下来的话

01:07:09.260 --> 01:07:10.260
我们这里

01:07:10.260 --> 01:07:13.960
这里我们来看一下

01:07:13.960 --> 01:07:14.960
好

01:07:14.960 --> 01:07:15.960
这里的话

01:07:15.960 --> 01:07:16.960
我们首先我们来写一个这个input

01:07:16.960 --> 01:07:18.960
这边还是先来个DIV吧

01:07:18.960 --> 01:07:19.960
先把它包一下

01:07:19.960 --> 01:07:20.960
好

01:07:20.960 --> 01:07:21.960
大家这边让我们来写一个input

01:07:21.960 --> 01:07:23.960
以及写一个button

01:07:23.960 --> 01:07:25.960
button的话就是获取

01:07:25.960 --> 01:07:26.960
对吧

01:07:26.960 --> 01:07:28.960
获取内容

01:07:28.960 --> 01:07:31.960
获取用户

01:07:31.960 --> 01:07:33.960
输入的内容

01:07:33.960 --> 01:07:34.960
好

01:07:34.960 --> 01:07:35.960
然后我现在呢

01:07:35.960 --> 01:07:36.960
我是非受控的

01:07:36.960 --> 01:07:37.960
非受控的话

01:07:37.960 --> 01:07:38.960
也就是说我这边

01:07:38.960 --> 01:07:39.960
不会用state和它进行

01:07:39.960 --> 01:07:40.960
绑定在一起

01:07:40.960 --> 01:07:41.960
那不绑定在一起

01:07:41.960 --> 01:07:42.960
那我这边

01:07:42.960 --> 01:07:44.960
我如何来获取

01:07:44.960 --> 01:07:46.960
这个动物元素呢

01:07:46.960 --> 01:07:47.960
首先这个

01:07:47.960 --> 01:07:48.960
是一个问题

01:07:48.960 --> 01:07:50.960
我如何来获取这个动物元素

01:07:50.960 --> 01:07:51.960
在react里面

01:07:51.960 --> 01:07:52.960
它给你提供了一个什么呢

01:07:52.960 --> 01:07:55.960
提供了一个叫做creatorif

01:07:55.960 --> 01:07:56.960
你这边可以

01:07:56.960 --> 01:07:58.960
比我们这边写一个constructor

01:07:58.960 --> 01:08:01.960
tructo

01:08:01.960 --> 01:08:02.960
constructor

01:08:02.960 --> 01:08:04.960
在constructor里面

01:08:04.960 --> 01:08:05.960
你就可以通过什么呢

01:08:05.960 --> 01:08:07.960
通过react

01:08:07.960 --> 01:08:09.960
react它身上的话

01:08:09.960 --> 01:08:10.960
会有一个叫做

01:08:10.960 --> 01:08:12.960
creatorif

01:08:12.960 --> 01:08:13.960
OK

01:08:13.960 --> 01:08:14.960
但后面

01:08:14.960 --> 01:08:15.960
可能有的同学知道

01:08:15.960 --> 01:08:16.960
后面还有一个userif

01:08:16.960 --> 01:08:18.960
两者有点区别

01:08:18.960 --> 01:08:19.960
我们后面讲hook的时候再说

01:08:19.960 --> 01:08:21.960
我们现在先就用这个

01:08:21.960 --> 01:08:24.960
这个是react上面的一个方法

01:08:24.960 --> 01:08:25.960
OK

01:08:25.960 --> 01:08:26.960
这个很明显是一个什么

01:08:26.960 --> 01:08:28.960
这很明显是个静谈方法

01:08:28.960 --> 01:08:29.960
对吧

01:08:29.960 --> 01:08:30.960
直接通过内来调用

01:08:30.960 --> 01:08:31.960
好

01:08:31.960 --> 01:08:32.960
这个方法你调用

01:08:32.960 --> 01:08:33.960
调用的话

01:08:33.960 --> 01:08:34.960
它就会给你返回一个ref

01:08:34.960 --> 01:08:36.960
那既然你把它传一下

01:08:36.960 --> 01:08:37.960
OK

01:08:37.960 --> 01:08:38.960
比如我这边呢

01:08:38.960 --> 01:08:39.960
叫做

01:08:39.960 --> 01:08:42.960
input

01:08:42.960 --> 01:08:43.960
crl

01:08:43.960 --> 01:08:46.960
稍微区别一下

01:08:46.960 --> 01:08:48.960
比如这边的话叫做input

01:08:48.960 --> 01:08:49.960
control

01:08:49.960 --> 01:08:50.960
control是不怎么评的

01:08:50.960 --> 01:08:51.960
trl是吧

01:08:51.960 --> 01:08:52.960
control

01:08:52.960 --> 01:08:53.960
con

01:08:53.960 --> 01:08:54.960
OK

01:08:54.960 --> 01:08:56.960
z.input.con

01:08:56.960 --> 01:08:57.960
我这边呢

01:08:57.960 --> 01:08:59.960
就是创建了一个ref

01:08:59.960 --> 01:09:01.960
这个其实在view里面

01:09:01.960 --> 01:09:02.960
也是有的

01:09:02.960 --> 01:09:06.960
创建了一个ref

01:09:06.960 --> 01:09:07.960
ref的话

01:09:07.960 --> 01:09:08.960
它其实就是reference

01:09:08.960 --> 01:09:10.960
它的那个单词的缩写

01:09:10.960 --> 01:09:11.960
reference是什么意思

01:09:11.960 --> 01:09:12.960
这笔引用的意思

01:09:12.960 --> 01:09:13.960
对吧

01:09:13.960 --> 01:09:14.960
好

01:09:14.960 --> 01:09:16.960
然后接下来我这边我干嘛呢

01:09:16.960 --> 01:09:17.960
我这边的话

01:09:17.960 --> 01:09:19.960
通过if

01:09:19.960 --> 01:09:21.960
再加上它等于一个值

01:09:21.960 --> 01:09:22.960
这个值是多少呢

01:09:22.960 --> 01:09:23.960
这个值就是你这边说

01:09:23.960 --> 01:09:26.960
创建了这个ref

01:09:26.960 --> 01:09:27.960
OK

01:09:27.960 --> 01:09:29.960
创建了这个ref

01:09:29.960 --> 01:09:30.960
也就是说

01:09:30.960 --> 01:09:34.960
回头我要获取这个input

01:09:34.960 --> 01:09:35.960
这个多么节点

01:09:35.960 --> 01:09:36.960
就通过什么呢

01:09:36.960 --> 01:09:37.960
就通过这个ref

01:09:37.960 --> 01:09:39.960
来进行获取

01:09:39.960 --> 01:09:41.960
回头

01:09:41.960 --> 01:09:47.960
回头我们就可以获取到

01:09:47.960 --> 01:09:48.960
获取到什么

01:09:48.960 --> 01:09:51.960
和该ref

01:09:51.960 --> 01:09:53.960
绑定了的

01:09:53.960 --> 01:09:55.960
绑定了的

01:09:55.960 --> 01:09:57.960
多么节点

01:09:57.960 --> 01:09:58.960
OK

01:09:58.960 --> 01:09:59.960
好来我们这边

01:09:59.960 --> 01:10:00.960
我们来试一下

01:10:00.960 --> 01:10:01.960
我们这边我们来

01:10:01.960 --> 01:10:02.960
绑定一个an

01:10:02.960 --> 01:10:03.960
click

01:10:03.960 --> 01:10:05.960
等于一个

01:10:06.960 --> 01:10:08.960
z.click

01:10:08.960 --> 01:10:09.960
handle

01:10:09.960 --> 01:10:11.960
我们在这边

01:10:11.960 --> 01:10:12.960
这边的话

01:10:12.960 --> 01:10:13.960
click handle

01:10:13.960 --> 01:10:14.960
等于一个

01:10:16.960 --> 01:10:17.960
箭头换术

01:10:17.960 --> 01:10:18.960
好

01:10:18.960 --> 01:10:19.960
大家我们这边

01:10:19.960 --> 01:10:20.960
我们来打印一下

01:10:20.960 --> 01:10:22.960
z.input

01:10:23.960 --> 01:10:24.960
OK

01:10:24.960 --> 01:10:25.960
保存

01:10:25.960 --> 01:10:26.960
保存了之后

01:10:26.960 --> 01:10:27.960
然后我们这边

01:10:27.960 --> 01:10:28.960
我们来try一try

01:10:28.960 --> 01:10:29.960
刷新

01:10:29.960 --> 01:10:30.960
刷新抱错了是吧

01:10:30.960 --> 01:10:31.960
我们来看一下

01:10:31.960 --> 01:10:33.960
master call super

01:10:33.960 --> 01:10:34.960
这边必须要有super

01:10:35.960 --> 01:10:37.960
把这些该写的要写上

01:10:38.960 --> 01:10:39.960
super

01:10:40.960 --> 01:10:41.960
OK出来了

01:10:41.960 --> 01:10:42.960
好大家这边

01:10:42.960 --> 01:10:44.960
这边让我先输入一些东西

01:10:44.960 --> 01:10:45.960
因为它是非受控的

01:10:45.960 --> 01:10:46.960
所以你直接就可以输入

01:10:46.960 --> 01:10:47.960
对

01:10:47.960 --> 01:10:48.960
它是非受控的

01:10:48.960 --> 01:10:49.960
直接可以输入

01:10:49.960 --> 01:10:50.960
但现在关键是

01:10:50.960 --> 01:10:51.960
我如何获取用户

01:10:51.960 --> 01:10:53.960
输入的内容

01:10:53.960 --> 01:10:54.960
这个是一个问题

01:10:54.960 --> 01:10:56.960
大家我们这边点击一下

01:10:56.960 --> 01:10:57.960
点击一下

01:10:57.960 --> 01:10:58.960
你看这边

01:10:58.960 --> 01:10:59.960
它拿到的是一个什么

01:10:59.960 --> 01:11:00.960
这拿到的是个对象

01:11:00.960 --> 01:11:02.960
对象里面有一个什么呢

01:11:02.960 --> 01:11:03.960
有个current属性

01:11:03.960 --> 01:11:04.960
current属性

01:11:04.960 --> 01:11:05.960
对象里面有一个input

01:11:05.960 --> 01:11:06.960
对象里面有一个input

01:11:06.960 --> 01:11:08.960
input就是什么

01:11:08.960 --> 01:11:09.960
input就是什么

01:11:09.960 --> 01:11:10.960
input是不是就是

01:11:10.960 --> 01:11:11.960
我们这个dorm元素

01:11:11.960 --> 01:11:12.960
对不对

01:11:12.960 --> 01:11:14.960
那只要能拿到这个dorm元素的话

01:11:14.960 --> 01:11:16.960
我们是不是就可以通过这个value

01:11:16.960 --> 01:11:17.960
来访问

01:11:17.960 --> 01:11:18.960
对不对

01:11:18.960 --> 01:11:19.960
就可以通过value

01:11:19.960 --> 01:11:21.960
来拿到用户输入的内容

01:11:21.960 --> 01:11:23.960
所以我们这边点current

01:11:23.960 --> 01:11:25.960
注意到这一步为止

01:11:25.960 --> 01:11:27.960
它是拿到这个dorm

01:11:27.960 --> 01:11:28.960
拿到这个dorm元素

01:11:28.960 --> 01:11:30.960
拿到这个dorm元素之后

01:11:30.960 --> 01:11:32.960
然后接下来这边点value

01:11:32.960 --> 01:11:34.960
拿到用户输入的字

01:11:34.960 --> 01:11:36.960
这边刷新一下

01:11:36.960 --> 01:11:37.960
随便输入一点

01:11:37.960 --> 01:11:38.960
走

01:11:38.960 --> 01:11:40.960
就拿到了

01:11:40.960 --> 01:11:41.960
看到没有

01:11:41.960 --> 01:11:45.960
这就是一个非受控组件的一个势力

01:11:45.960 --> 01:11:47.960
一个非受控组件

01:11:47.960 --> 01:11:49.960
那什么时候用非受控组件呢

01:11:49.960 --> 01:11:50.960
你看它官方的话

01:11:50.960 --> 01:11:51.960
它其实给你说了的

01:11:51.960 --> 01:11:53.960
就绝大多数情况下

01:11:53.960 --> 01:11:55.960
它都是要求你使用受控

01:11:55.960 --> 01:11:58.960
这个是属于高级指引里面了

01:11:58.960 --> 01:12:00.960
它不在核心概念里面

01:12:00.960 --> 01:12:03.960
高级指引的这个位置

01:12:03.960 --> 01:12:05.960
非受控组件

01:12:05.960 --> 01:12:06.960
你看

01:12:06.960 --> 01:12:08.960
在大多数情况下

01:12:08.960 --> 01:12:10.960
我们都推荐你使用什么呢

01:12:10.960 --> 01:12:13.960
使用这个受控组件

01:12:13.960 --> 01:12:14.960
你不要去用非受控

01:12:14.960 --> 01:12:15.960
对吧

01:12:15.960 --> 01:12:16.960
非受控不好控制

01:12:16.960 --> 01:12:17.960
你非受控说白了

01:12:17.960 --> 01:12:18.960
其实就是回到了什么

01:12:18.960 --> 01:12:19.960
回到了以前

01:12:19.960 --> 01:12:22.960
那个操作dorm的那个时代

01:12:22.960 --> 01:12:23.960
对不对

01:12:23.960 --> 01:12:24.960
先获取这个dorm节点

01:12:24.960 --> 01:12:27.960
然后接下来就获取它的值

01:12:27.960 --> 01:12:28.960
所以它这边

01:12:28.960 --> 01:12:30.960
大多数情况下推荐你使用受控

01:12:30.960 --> 01:12:32.960
但是有些情况

01:12:32.960 --> 01:12:34.960
有些情况你可能就是需要

01:12:34.960 --> 01:12:36.960
你确认实实就需要这个非受控

01:12:36.960 --> 01:12:38.960
那这个时候你就是

01:12:38.960 --> 01:12:40.960
需要什么呢

01:12:40.960 --> 01:12:43.960
需要就是传统的那种操作dorm的那种方式

01:12:43.960 --> 01:12:45.960
所以这个时候它给你提供了一种

01:12:45.960 --> 01:12:46.960
这种替代方案

01:12:46.960 --> 01:12:48.960
就是这种非受控的

01:12:48.960 --> 01:12:50.960
非受控的话就怎么办呢

01:12:50.960 --> 01:12:52.960
通过这个ref

01:12:52.960 --> 01:12:53.960
ok 通过这个ref

01:12:53.960 --> 01:12:55.960
就像我刚才势力的这样子

01:12:55.960 --> 01:12:57.960
通过ref和你的这个

01:12:57.960 --> 01:12:58.960
空间

01:12:58.960 --> 01:12:59.960
首先绑定

01:12:59.960 --> 01:13:00.960
绑定了之后

01:13:00.960 --> 01:13:01.960
接下来后期的话

01:13:01.960 --> 01:13:02.960
我们就通过这个ref

01:13:02.960 --> 01:13:04.960
是不是去获取到这个dorm节点

01:13:05.960 --> 01:13:06.960
对不对

01:13:06.960 --> 01:13:07.960
好 这边写下

01:13:07.960 --> 01:13:08.960
通过

01:13:09.960 --> 01:13:12.960
通过zs.card

01:13:13.960 --> 01:13:20.960
可以获取到inputdorm节点

01:13:22.960 --> 01:13:23.960
对吧

01:13:23.960 --> 01:13:24.960
dorm节点

01:13:24.960 --> 01:13:25.960
这是一个基本势力

01:13:27.960 --> 01:13:29.960
好 我把它放到笔记里面

01:13:29.960 --> 01:13:30.960
ok

01:13:30.960 --> 01:13:32.960
好 关于这个非受控

01:13:32.960 --> 01:13:34.960
组建的这个默认值

01:13:34.960 --> 01:13:35.960
这个默认值的话

01:13:35.960 --> 01:13:37.960
它这边的话也稍微有一些不一样

01:13:37.960 --> 01:13:38.960
我们这边我们来看一下

01:13:38.960 --> 01:13:40.960
关于这个默认值

01:13:40.960 --> 01:13:42.960
这边那表单元素的话

01:13:42.960 --> 01:13:43.960
这边我们要给默认值

01:13:43.960 --> 01:13:44.960
给默认值的话

01:13:44.960 --> 01:13:45.960
这种情况下

01:13:45.960 --> 01:13:46.960
你看它这边写的有

01:13:46.960 --> 01:13:48.960
你需要指定一个什么

01:13:48.960 --> 01:13:50.960
指定一个default value

01:13:50.960 --> 01:13:51.960
而不是什么呢

01:13:51.960 --> 01:13:52.960
而不是value

01:13:52.960 --> 01:13:55.960
以前我们给默认值是怎么给的

01:13:55.960 --> 01:13:56.960
回一下

01:13:56.960 --> 01:13:57.960
以前给默认值

01:13:57.960 --> 01:13:58.960
以前的话

01:13:58.960 --> 01:13:59.960
我们这边

01:13:59.960 --> 01:14:00.960
比如这个input

01:14:00.960 --> 01:14:01.960
我们想给个默认值

01:14:01.960 --> 01:14:02.960
是不是这边的话value

01:14:02.960 --> 01:14:03.960
对不对

01:14:03.960 --> 01:14:04.960
value

01:14:04.960 --> 01:14:05.960
不要给个123

01:14:05.960 --> 01:14:06.960
以前是这样子来做的

01:14:06.960 --> 01:14:07.960
我看一下

01:14:07.960 --> 01:14:09.960
它还什么生效呢

01:14:09.960 --> 01:14:11.960
它到时候还生效

01:14:11.960 --> 01:14:12.960
到时候还生效

01:14:12.960 --> 01:14:13.960
但是它这边

01:14:13.960 --> 01:14:14.960
它会告诉你

01:14:14.960 --> 01:14:15.960
一旦你用了value的话

01:14:15.960 --> 01:14:16.960
它就会认为你是一个

01:14:16.960 --> 01:14:17.960
受控逐渐

01:14:17.960 --> 01:14:18.960
对不对

01:14:18.960 --> 01:14:19.960
一旦

01:14:21.960 --> 01:14:24.960
一旦你用了value

01:14:24.960 --> 01:14:26.960
大家react

01:14:26.960 --> 01:14:28.960
会干嘛

01:14:28.960 --> 01:14:31.960
会认为你这是一个

01:14:31.960 --> 01:14:33.960
受控逐渐

01:14:33.960 --> 01:14:35.960
受

01:14:35.960 --> 01:14:37.960
这是一个

01:14:37.960 --> 01:14:39.960
受控逐渐

01:14:39.960 --> 01:14:40.960
对吧

01:14:40.960 --> 01:14:41.960
你看它这边给你的提示

01:14:41.960 --> 01:14:42.960
都是什么

01:14:42.960 --> 01:14:43.960
是不是让你去写一个

01:14:43.960 --> 01:14:44.960
unchained handler

01:14:44.960 --> 01:14:45.960
对不对

01:14:45.960 --> 01:14:46.960
所以你这边的话

01:14:46.960 --> 01:14:48.960
你如果要给默认值

01:14:48.960 --> 01:14:51.960
如果想要

01:14:51.960 --> 01:14:53.960
给默认值

01:14:53.960 --> 01:14:54.960
那就干嘛呢

01:14:54.960 --> 01:14:58.960
使用default value

01:14:58.960 --> 01:15:00.960
它给你提供了一个新的属性

01:15:00.960 --> 01:15:01.960
叫做default value

01:15:01.960 --> 01:15:02.960
所以你这边的话

01:15:02.960 --> 01:15:03.960
不应该是value

01:15:03.960 --> 01:15:05.960
而是default value

01:15:05.960 --> 01:15:06.960
我这边来看一下

01:15:06.960 --> 01:15:07.960
放心

01:15:07.960 --> 01:15:08.960
所以就搞定了

01:15:08.960 --> 01:15:09.960
对吧

01:15:09.960 --> 01:15:11.960
这是关于这个默认值

01:15:11.960 --> 01:15:13.960
我这边就只负责这一块

01:15:14.960 --> 01:15:18.270
放到笔记里面

01:15:18.270 --> 01:15:22.350
react

01:15:24.350 --> 01:15:26.350
把它拿过来一点

01:15:27.350 --> 01:15:28.350
ok

01:15:28.350 --> 01:15:29.350
好

01:15:29.350 --> 01:15:31.350
然后什么时候会用到

01:15:31.350 --> 01:15:32.350
这个非受控呢

01:15:32.350 --> 01:15:33.350
对吧

01:15:33.350 --> 01:15:35.350
绝大多数情况下都是用这个

01:15:35.350 --> 01:15:36.350
受控什么时候

01:15:36.350 --> 01:15:37.350
用到非受控

01:15:37.350 --> 01:15:38.350
它这边就给你

01:15:38.350 --> 01:15:40.350
举了一个文件上传

01:15:40.350 --> 01:15:41.350
我们这边来看一下

01:15:41.350 --> 01:15:43.350
在这里

01:15:43.350 --> 01:15:45.350
比如说这个文件输入

01:15:45.350 --> 01:15:47.350
在html中的话

01:15:47.350 --> 01:15:49.350
你这个可以让用户选择

01:15:49.350 --> 01:15:50.350
一个和多个文件

01:15:50.350 --> 01:15:52.350
上传到服务器

01:15:52.350 --> 01:15:54.350
或者通过file API

01:15:54.350 --> 01:15:56.350
接下来的话在react中

01:15:56.350 --> 01:15:58.350
这个的话它是一个什么呢

01:15:58.350 --> 01:15:59.350
它是一个非受控

01:15:59.350 --> 01:16:00.350
为什么

01:16:00.350 --> 01:16:03.350
因为它的值只能有用户设置

01:16:03.350 --> 01:16:05.350
而不能通过代码控制

01:16:05.350 --> 01:16:07.350
也就是我们之前的话

01:16:07.350 --> 01:16:09.350
之所以设置成受控主线

01:16:09.350 --> 01:16:10.350
我们就是想通过什么

01:16:10.350 --> 01:16:12.350
是不是通过代码去控制

01:16:12.350 --> 01:16:14.350
用户输入的值

01:16:14.350 --> 01:16:15.350
对不对

01:16:15.350 --> 01:16:16.350
你看刚才的

01:16:16.350 --> 01:16:18.350
就是刚才那个大小写的个案例

01:16:18.350 --> 01:16:20.350
就那个只能输入大写的个案例

01:16:20.350 --> 01:16:21.350
就特别明显

01:16:21.350 --> 01:16:23.350
就这个就这个案例

01:16:23.350 --> 01:16:24.350
就特别明显

01:16:24.350 --> 01:16:25.350
我们想干嘛

01:16:25.350 --> 01:16:26.350
我们想通过代码

01:16:26.350 --> 01:16:28.350
通过代码去控制

01:16:28.350 --> 01:16:31.350
用户输入框的输入

01:16:31.350 --> 01:16:32.350
对吧

01:16:32.350 --> 01:16:35.350
但是你看比如说像这个文件

01:16:35.350 --> 01:16:36.350
文件的话

01:16:36.350 --> 01:16:38.350
它只能有用户设置

01:16:38.350 --> 01:16:39.350
所以它始终是一个什么呢

01:16:39.350 --> 01:16:42.350
始终是一个非受控主键

01:16:42.350 --> 01:16:44.350
说像这些场景的话

01:16:44.350 --> 01:16:46.350
就需要你使用非受控主键

01:16:46.350 --> 01:16:49.350
而不是受控主键

01:16:49.350 --> 01:16:50.350
OK

01:16:50.350 --> 01:16:51.350
那我们这边我们来看一下

01:16:51.350 --> 01:16:53.350
文件上传

01:16:53.350 --> 01:16:54.350
文件上传的话

01:16:54.350 --> 01:16:56.350
比如说我这里

01:16:56.350 --> 01:16:58.350
这里要写个input

01:16:58.350 --> 01:17:00.350
input file

01:17:00.350 --> 01:17:01.350
那这边的话

01:17:01.350 --> 01:17:03.350
有一个这个上传文件

01:17:03.350 --> 01:17:04.350
对吧

01:17:04.350 --> 01:17:05.350
上传文件

01:17:05.350 --> 01:17:06.350
既然我这边我如何获取到

01:17:06.350 --> 01:17:08.350
它的这个

01:17:08.350 --> 01:17:10.350
用户上传的这个内容呢

01:17:10.350 --> 01:17:12.350
这边首先一样的其实

01:17:12.350 --> 01:17:14.350
就是先创建一个criff

01:17:14.350 --> 01:17:15.350
这个riff

01:17:15.350 --> 01:17:16.350
这riff我们把名字改一下

01:17:16.350 --> 01:17:18.350
比如叫做upload

01:17:18.350 --> 01:17:19.350
upload

01:17:19.350 --> 01:17:20.350
这边的话一般我们会取一个

01:17:20.350 --> 01:17:22.350
叫做什么什么riff

01:17:22.350 --> 01:17:24.350
所以刚才的话其实应该是叫做什么呢

01:17:24.350 --> 01:17:26.350
叫做input riff

01:17:26.350 --> 01:17:28.350
叫这个名字其实要好一些

01:17:28.350 --> 01:17:29.350
OK

01:17:29.350 --> 01:17:30.350
就一般我们取名的时候

01:17:30.350 --> 01:17:31.350
就是你是个riff是吧

01:17:31.350 --> 01:17:33.350
那我这边就给你加一个riff

01:17:33.350 --> 01:17:34.350
到时候我一看代码的时候

01:17:34.350 --> 01:17:35.350
我就知道哦

01:17:35.350 --> 01:17:37.350
你这边是一个riff对吧

01:17:37.350 --> 01:17:40.350
所以我们这边叫做riff

01:17:40.350 --> 01:17:41.350
好吧这个说一下吧

01:17:41.350 --> 01:17:43.350
就创建riff的时候

01:17:43.350 --> 01:17:49.240
创建riff的时候

01:17:49.240 --> 01:17:51.240
然后加命名

01:17:51.240 --> 01:17:54.240
命名一般采用

01:17:55.240 --> 01:17:57.240
这个叉叉叉

01:17:57.240 --> 01:17:59.240
riff结尾

01:17:59.240 --> 01:18:02.240
这个相当是一个不成文的规定吗

01:18:02.240 --> 01:18:04.240
OK就大家一看就都懂

01:18:04.240 --> 01:18:06.240
知道哦你这是个riff

01:18:06.240 --> 01:18:08.240
好然后接下来的话在这边

01:18:08.240 --> 01:18:10.240
这边呢是不是就是riff

01:18:10.240 --> 01:18:12.240
等于

01:18:12.240 --> 01:18:15.240
等于什么等于是不是this

01:18:15.240 --> 01:18:18.240
点upload riff

01:18:18.240 --> 01:18:20.240
这关联起来了对吧

01:18:20.240 --> 01:18:21.240
关联起来了之后

01:18:21.240 --> 01:18:23.240
大家回头你这边你要获取的时候

01:18:23.240 --> 01:18:25.240
你这边就直接通过这个

01:18:25.240 --> 01:18:28.240
current.value

01:18:28.240 --> 01:18:30.240
这边

01:18:30.240 --> 01:18:32.240
可以获取到这个input

01:18:32.240 --> 01:18:33.240
多么极点

01:18:33.240 --> 01:18:34.240
对的OK

01:18:34.240 --> 01:18:36.240
好来我们来试一下

01:18:36.240 --> 01:18:37.240
来试一试啊

01:18:37.240 --> 01:18:38.240
try try

01:18:38.240 --> 01:18:39.240
OK

01:18:39.240 --> 01:18:42.240
好这边的话选择

01:18:42.240 --> 01:18:44.240
随便选择一个

01:18:44.240 --> 01:18:45.240
这个文档

01:18:45.240 --> 01:18:46.240
好大家这边获取

01:18:46.240 --> 01:18:48.240
这边是不是拿到了

01:18:48.240 --> 01:18:50.240
对不对拿到对应的值

01:18:50.240 --> 01:18:51.240
OK

01:18:51.240 --> 01:18:53.240
好他回头到你这边要

01:18:53.240 --> 01:18:56.240
上传的时候就通过这种方式

01:18:56.240 --> 01:18:58.240
来获取这个用户

01:18:58.240 --> 01:19:00.240
他上传的这个文件

01:19:00.240 --> 01:19:03.240
看一下他官方举了例子呢

01:19:03.240 --> 01:19:05.240
官方

01:19:05.240 --> 01:19:08.240
官方他这边是通过这个files

01:19:08.240 --> 01:19:10.240
这边这个files

01:19:10.240 --> 01:19:12.240
首先他这边拿到这个current

01:19:12.240 --> 01:19:14.240
你这边的话他不再是value

01:19:14.240 --> 01:19:16.240
而是什么点files

01:19:16.240 --> 01:19:17.240
我们来看一下

01:19:17.240 --> 01:19:19.240
点files

01:19:19.240 --> 01:19:21.240
点files

01:19:21.240 --> 01:19:23.240
刚才那个是路径

01:19:23.240 --> 01:19:26.240
路径然后那边是一个fake pass

01:19:26.240 --> 01:19:27.240
是吧

01:19:27.240 --> 01:19:29.240
好这边走

01:19:29.240 --> 01:19:30.240
拿到对吧

01:19:30.240 --> 01:19:32.240
拿到之后再加这边0

01:19:32.240 --> 01:19:34.240
这边就拿到这边具体的

01:19:34.240 --> 01:19:36.240
这个上传的这个文件

01:19:36.240 --> 01:19:38.240
对应的这个内容对不对

01:19:38.240 --> 01:19:40.240
OK

01:19:40.240 --> 01:19:42.240
这是关于这个上传文件

01:19:42.240 --> 01:19:44.240
其他的话他这边这个

01:19:44.240 --> 01:19:45.240
非受控组建这一张啊

01:19:45.240 --> 01:19:47.240
也就没有介绍什么了

01:19:47.240 --> 01:19:49.240
就没有介绍什么了

01:19:49.240 --> 01:19:50.240
OK

01:19:50.240 --> 01:19:51.240
好来回顾一下啊

01:19:51.240 --> 01:19:52.240
回顾一下

01:19:52.240 --> 01:19:54.240
讲了一个多小时了

01:19:54.240 --> 01:19:56.240
是吧这节课讲了一个多小时了

01:19:56.240 --> 01:19:57.240
我们以后就这样子

01:19:57.240 --> 01:19:58.240
我们一节课

01:19:58.240 --> 01:19:59.240
一节课的话

01:19:59.240 --> 01:20:01.240
差不多就是一个多小时

01:20:01.240 --> 01:20:03.240
然后接下来我们把整个这个react

01:20:03.240 --> 01:20:05.240
的课程这个就数量

01:20:05.240 --> 01:20:07.240
把它压缩一下

01:20:07.240 --> 01:20:09.240
对吧把数量压缩一下

01:20:09.240 --> 01:20:10.240
然后每节课的时间的话

01:20:10.240 --> 01:20:12.240
咱们就是可以长一点

01:20:12.240 --> 01:20:13.240
比如一个多小时啊

01:20:13.240 --> 01:20:15.240
一个半小时啊都可以

01:20:15.240 --> 01:20:16.240
OK

01:20:16.240 --> 01:20:18.240
这样子大家上完一节课

01:20:18.240 --> 01:20:20.240
就可以休息一下

01:20:20.240 --> 01:20:22.240
好

01:20:22.240 --> 01:20:23.240
我们这节课

01:20:23.240 --> 01:20:24.240
这节课的话

01:20:24.240 --> 01:20:26.240
讲的是这个表单

01:20:26.240 --> 01:20:27.240
表单的话

01:20:27.240 --> 01:20:28.240
我们这节课先复习了

01:20:28.240 --> 01:20:29.240
是吧复习了

01:20:29.240 --> 01:20:30.240
然后写了一个那个

01:20:30.240 --> 01:20:32.240
状态提升的那个案例

01:20:32.240 --> 01:20:34.240
那个汇利转换的案例

01:20:34.240 --> 01:20:36.240
这节课的主要内容的话是这个表单

01:20:36.240 --> 01:20:37.240
表单的话

01:20:37.240 --> 01:20:38.240
这边就分为两个部分

01:20:38.240 --> 01:20:39.240
一个是受控组建

01:20:39.240 --> 01:20:41.240
一个是非受控组建

01:20:41.240 --> 01:20:43.240
核心就是要去理解

01:20:43.240 --> 01:20:45.240
这个受控组建

01:20:45.240 --> 01:20:47.240
究竟指的是什么

01:20:47.240 --> 01:20:49.240
究竟指的是什么

01:20:49.240 --> 01:20:51.240
指的是不是就是

01:20:51.240 --> 01:20:53.240
把你这个表单空间

01:20:53.240 --> 01:20:55.240
和我的state

01:20:55.240 --> 01:20:56.240
关联在一起

01:20:56.240 --> 01:20:57.240
对不对

01:20:57.240 --> 01:20:58.240
回头的话

01:20:58.240 --> 01:21:00.240
我就可以通过去控制这个state

01:21:00.240 --> 01:21:02.240
从而达到控制你这个

01:21:02.240 --> 01:21:04.240
表单空间的这个内容的

01:21:04.240 --> 01:21:05.240
这个目的

01:21:05.240 --> 01:21:06.240
OK

01:21:06.240 --> 01:21:07.240
这是受控

01:21:07.240 --> 01:21:08.240
那非受控

01:21:08.240 --> 01:21:09.240
非受控自然而然就是什么

01:21:09.240 --> 01:21:10.240
是不是就没有关联

01:21:10.240 --> 01:21:11.240
对吧

01:21:11.240 --> 01:21:12.240
没有和这个state

01:21:12.240 --> 01:21:14.240
进行一个关联

01:21:14.240 --> 01:21:15.240
这个的话就是

01:21:15.240 --> 01:21:16.240
非受控

01:21:16.240 --> 01:21:17.240
非受控

01:21:17.240 --> 01:21:18.240
那非受控

01:21:18.240 --> 01:21:20.240
我如何获取内容呢

01:21:20.240 --> 01:21:21.240
那很简单

01:21:21.240 --> 01:21:23.240
是不是通过这个ref

01:21:23.240 --> 01:21:24.240
对吧

01:21:24.240 --> 01:21:25.240
通过这个

01:21:25.240 --> 01:21:27.240
通过这个ref

01:21:27.240 --> 01:21:28.240
这ref的话

01:21:28.240 --> 01:21:29.240
其实也不是新知识

01:21:29.240 --> 01:21:30.240
ref的话

01:21:30.240 --> 01:21:31.240
你在那个view里面

01:21:31.240 --> 01:21:33.240
是不是也接触过了

01:21:33.240 --> 01:21:34.240
对吧view里面

01:21:34.240 --> 01:21:36.240
我记得有个downer ref吧

01:21:36.240 --> 01:21:37.240
还是downer refs

01:21:37.240 --> 01:21:39.240
downer refs

01:21:39.240 --> 01:21:41.240
所以也不是他新东西

01:21:41.240 --> 01:21:42.240
OK

01:21:42.240 --> 01:21:43.240
好 下去的话

01:21:43.240 --> 01:21:45.240
大家把这几颗写的这些例子

01:21:45.240 --> 01:21:46.240
自己敲一敲

01:21:46.240 --> 01:21:48.240
印象要深一些

01:21:48.240 --> 01:21:49.240
OK

01:21:49.240 --> 01:21:50.240
这一颗就到这里

01:21:50.240 --> 01:21:51.240
再见

