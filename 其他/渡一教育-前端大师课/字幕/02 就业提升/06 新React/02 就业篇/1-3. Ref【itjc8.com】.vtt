WEBVTT

00:00.110 --> 00:03.510
这节课的话 咱们来看一下这个REF

00:03.510 --> 00:09.510
REF的话 这个其实咱们之前在那个入门篇的时候 咱们已经在用了

00:09.510 --> 00:13.110
对不对 不知道大家还记不记得 当时我们在哪个地方用的

00:13.110 --> 00:17.510
当时我们不是那个 就是那个 有一个那个markdown编辑器吗

00:17.510 --> 00:21.110
对吧 就用户在写那个 就是文章的时候

00:21.110 --> 00:24.510
或者提问的时候 有一个markdown编辑器

00:24.510 --> 00:27.110
然后我们需要获取到这个markdown的内容

00:27.310 --> 00:31.510
那我们当时就用了什么 当时是不是就是用的是REF 对吧

00:31.510 --> 00:35.910
包括那个表单 表单的话一般是不是也是设置了这个REF的

00:35.910 --> 00:39.910
通过这个REF获取到那个表单元素 获取到了之后

00:39.910 --> 00:44.510
然后接下来把它的这个内容进行一个还原

00:44.510 --> 00:50.110
就表单回填 对吧 说这个东西的话 其实不是个新东西

00:50.110 --> 00:56.110
不是个新东西 但是呢 他是一个是在高阶里面 正式出现的

00:56.110 --> 01:03.060
这边我们看一下吧 还是把那个react关门把它打开

01:03.060 --> 01:12.700
react关门 这里 今天挺快的哈 今天蛮快的 下次就打开了

01:14.200 --> 01:21.200
好 然后接下来这边 他是在这边 高级指引 高级指引的这个位置

01:21.200 --> 01:26.700
REFs and DOM 包括什么呢 包括这边还有个什么 还有个REFs转发

01:26.700 --> 01:29.700
所以说我们这边的话 我们就一起来看一下

01:29.700 --> 01:34.700
就我们这边的话 花一节课的时间 我们把整个REF以及REF相关的

01:34.700 --> 01:40.700
包括REF转发 还有就是新增的户客 这个其实也不算新增的了

01:40.700 --> 01:43.700
这个是第一批户客 第一批户客就有的

01:43.700 --> 01:47.700
但他户客的话 他一直在这个 就随着这个版本的更新

01:47.700 --> 01:53.700
他一直在新增 包括react18 他也新增了一些新的户客

01:53.700 --> 01:57.700
这个我们后面看那个react18新特性的时候 我们再说

01:57.700 --> 02:02.700
好 我们这边的话 反正就把这个整个REF这个一套相关的

02:02.700 --> 02:06.700
我们把它看一下 包括这个UserREF 对吧

02:06.700 --> 02:12.700
还有这个User Imperative Handle

02:12.700 --> 02:18.700
这个很难念 User Imperative Handle OK

02:18.700 --> 02:22.700
就这个REF我们把它看一下 一个一个来吧

02:22.700 --> 02:25.700
首先第一个是关于这个过时的API

02:25.700 --> 02:29.700
这过时的API的话 它最早的话 这个REF就是什么呢

02:29.700 --> 02:32.700
REF的话 它接收的值就是一个支付串

02:32.700 --> 02:36.700
看不看 就是个支付串 然后把这个例子我们把它写一下

02:36.700 --> 02:40.700
我这边的话 把之前的那个什么HACR Components那些

02:40.700 --> 02:42.700
不需要的文件夹 我就把它删了

02:42.700 --> 02:46.700
我们争取就是每节课的话 这个文件夹都是比较干净的

02:46.700 --> 02:49.700
这个YouTube是我留着的 因为我想着万一后面我要用

02:49.700 --> 02:52.700
我把留着的 好 然后接下来这边

02:52.700 --> 02:56.700
这边的话我写一个什么呢 我写一个这个输入框

02:56.700 --> 03:01.700
Input 写一个Input输入框

03:01.700 --> 03:05.700
它这边好像还不支持这样子

03:05.700 --> 03:09.700
OK 这个Input输入框 大家这边给个Type

03:09.700 --> 03:12.700
Type 然后Text OK

03:12.700 --> 03:15.700
大家这边上你给它设置这个REF

03:15.700 --> 03:18.700
REF 既然它对应的值是个什么呢

03:18.700 --> 03:21.700
对应值最早的话是一个什么呢 是一个支付串

03:21.700 --> 03:24.700
就它允许你设置成一个支付串

03:24.700 --> 03:27.700
比如我们这边叫做Input

03:27.700 --> 03:30.700
Input REF

03:30.700 --> 03:32.700
然后回头的话 我们这边就可以干嘛呢

03:32.700 --> 03:36.700
我们就可以通过这个REF 获取到这个动物节点

03:36.700 --> 03:38.700
对吧 我们说过这个REF REF的话

03:38.700 --> 03:39.700
它最主要的作用就是什么

03:39.700 --> 03:42.700
所以获取到里面具体的某个动物

03:42.700 --> 03:46.700
对吧 好 比如我们这边我们来一个Button

03:46.700 --> 03:49.700
我知道我这边不是JSX

03:49.700 --> 03:51.700
难怪不得 我把这个改一下吧

03:51.700 --> 03:54.700
改成JSX

03:54.700 --> 03:58.700
OK 我就说怎么我这边按Type

03:58.700 --> 03:59.700
这下就好了

03:59.700 --> 04:03.700
好 这边比如我们是一个聚焦

04:03.700 --> 04:06.700
聚焦 绑定一个点击实践

04:06.700 --> 04:12.700
Click 等于一个Click Handle

04:12.700 --> 04:13.700
对吧 好

04:13.700 --> 04:16.700
然后加这边上面的话一个方形

04:16.700 --> 04:19.700
这边没有Pops 这个三了

04:19.700 --> 04:22.700
好 这边的话方形

04:22.700 --> 04:24.700
Click Handle

04:24.700 --> 04:26.700
这里我要做什么事情呢

04:26.700 --> 04:29.700
这里的话我要聚焦

04:29.700 --> 04:30.700
我要聚焦的话

04:30.700 --> 04:32.700
这边的话你就可以通过什么

04:32.700 --> 04:34.700
可以通过这个REF

04:34.700 --> 04:38.840
这里还不行

04:38.840 --> 04:39.840
我突然想起来了

04:39.840 --> 04:41.840
因为它这边要引REF的话

04:41.840 --> 04:42.840
它是通过这种方式

04:42.840 --> 04:44.840
JS.REF

04:44.840 --> 04:45.840
你看我们现在用的是什么

04:45.840 --> 04:46.840
我们现在用的是不

04:46.840 --> 04:48.840
这个函数组件

04:48.840 --> 04:50.840
对不对 函数组件它是没有JS的

04:50.840 --> 04:52.840
好 我把这个改一下

04:52.840 --> 04:54.840
改成那个类组件

04:54.840 --> 04:57.840
好 这边RCC

04:57.840 --> 04:59.840
OK 好 把刚才这个这个

04:59.840 --> 05:00.840
粘过来

05:00.840 --> 05:01.840
各式画一下

05:01.840 --> 05:02.840
好 这边那就是

05:02.840 --> 05:05.840
JS.Click Handle

05:05.840 --> 05:07.840
好 然后接下来这边

05:07.840 --> 05:08.840
这边那就是

05:08.840 --> 05:11.840
Click Handle

05:11.840 --> 05:15.840
等于一个箭头函数

05:15.840 --> 05:16.840
对吧

05:16.840 --> 05:17.840
好 再加我们这边

05:17.840 --> 05:18.840
我们来干嘛呢

05:18.840 --> 05:19.840
我们来聚焦

05:19.840 --> 05:20.840
聚焦的话

05:20.840 --> 05:21.840
这边你就可以通过这个

05:21.840 --> 05:24.840
JS.REF

05:24.840 --> 05:26.840
来访问到什么呢

05:26.840 --> 05:27.840
JS.REF

05:27.840 --> 05:28.840
然后接下来这边

05:28.840 --> 05:29.840
点InputREF

05:29.840 --> 05:30.840
我们这样子

05:30.840 --> 05:31.840
我们先把这个

05:31.840 --> 05:32.840
JS.REF

05:32.840 --> 05:34.840
先把它打印出来

05:34.840 --> 05:35.840
先把它打印出来

05:35.840 --> 05:36.840
打印出来

05:36.840 --> 05:37.840
大家看一下

05:37.840 --> 05:38.840
这边为什么会有个横杆

05:38.840 --> 05:39.840
这边其实就是

05:39.840 --> 05:41.840
它检测到你这边是

05:41.840 --> 05:43.840
使用的这个制服串的形式

05:43.840 --> 05:44.840
我们说过这个制服串的话

05:44.840 --> 05:45.840
它已经是什么

05:45.840 --> 05:47.840
这已经是过时的这个API

05:47.840 --> 05:48.840
对吧

05:48.840 --> 05:49.840
你这边你把鼠标移上去

05:49.840 --> 05:51.840
它这边有说明的

05:51.840 --> 05:52.840
看到没有

05:52.840 --> 05:53.840
REF是已经弃用

05:53.840 --> 05:55.840
当我们这个说一下

05:55.840 --> 05:56.840
简单说一下

05:56.840 --> 05:57.840
好 那我们这边

05:57.840 --> 06:00.840
我们来看一下

06:00.840 --> 06:02.840
好 把这打开

06:02.840 --> 06:06.620
好

06:06.620 --> 06:07.620
这边

06:07.620 --> 06:08.620
这边要点击一下是吧

06:08.620 --> 06:09.620
点击

06:09.620 --> 06:10.620
你看这边

06:10.620 --> 06:11.620
是不是拿到了

06:11.620 --> 06:13.620
对了 我们把整个REF打印一下

06:13.620 --> 06:16.620
把整个REF

06:16.620 --> 06:17.620
打印一下

06:17.620 --> 06:18.620
刷新

06:18.620 --> 06:19.620
好 这边走

06:19.620 --> 06:20.620
你看这个REF

06:20.620 --> 06:21.620
REF的话是访问到什么

06:21.620 --> 06:24.620
说访问到我们整个这个APP组件

06:24.620 --> 06:26.620
这APP组件你把它展开

06:26.620 --> 06:27.620
展开的话这边有个什么

06:27.620 --> 06:28.620
是不是有个REF

06:28.620 --> 06:30.620
REF是它对应的是一个什么

06:30.620 --> 06:32.620
说对应的是一个对象

06:32.620 --> 06:33.620
对吧

06:33.620 --> 06:34.620
对应的是个对象

06:34.620 --> 06:36.620
对象里面这个inputREF

06:36.620 --> 06:37.620
inputREF是什么

06:37.620 --> 06:38.620
inputREF是不是就是

06:38.620 --> 06:40.620
我们这边给的这个制服串

06:40.620 --> 06:41.620
也就是你给的这个制服串

06:41.620 --> 06:42.620
会成为什么

06:42.620 --> 06:45.620
会成为REF生里面的一个界

06:45.620 --> 06:46.620
对应的值是什么

06:46.620 --> 06:48.620
对应的值就是动物元素

06:48.620 --> 06:49.620
这边

06:49.620 --> 06:50.620
看这边

06:50.620 --> 06:52.620
对应的是input

06:52.620 --> 06:53.620
OK

06:53.620 --> 06:54.620
那你既然你都拿了

06:54.620 --> 06:55.620
这个动物的话

06:55.620 --> 06:56.620
那我这边就可以干吗

06:56.620 --> 06:57.620
我是不是就可以调

06:57.620 --> 06:59.620
原生的动物方法

06:59.620 --> 07:00.620
对不对

07:00.620 --> 07:02.620
比如说我这边

07:02.620 --> 07:06.620
this.refs.fox

07:06.620 --> 07:08.620
这是原生的动物方法

07:08.620 --> 07:09.620
原生动物方法

07:09.620 --> 07:10.620
fox

07:10.620 --> 07:12.620
好来这边来看一下

07:12.620 --> 07:13.620
重新

07:13.620 --> 07:14.620
走

07:15.620 --> 07:17.620
fox是不是写错了

07:17.620 --> 07:18.620
看一下

07:18.620 --> 07:19.620
不是

07:19.620 --> 07:20.620
这边的话你要什么

07:20.620 --> 07:22.620
点这个input

07:22.620 --> 07:24.620
inputREF

07:24.620 --> 07:25.620
对吧

07:25.620 --> 07:26.620
你要通过这个inputREF

07:26.620 --> 07:28.620
是不是拿到这个动物节点

07:28.620 --> 07:29.620
对吧拿到之后

07:29.620 --> 07:30.620
然后接下来这边

07:30.620 --> 07:33.620
再来fox

07:33.620 --> 07:34.620
再来fox

07:34.620 --> 07:35.620
保存

07:35.620 --> 07:36.620
OK

07:36.620 --> 07:37.620
重新来

07:37.620 --> 07:38.620
你看

07:38.620 --> 07:39.620
这边是不是就聚焦了

07:39.620 --> 07:40.620
对不对

07:40.620 --> 07:41.620
这个的话

07:41.620 --> 07:43.620
其实就是REF

07:43.620 --> 07:44.620
最早的用法

07:44.620 --> 07:46.620
最最最开始的用法

07:46.620 --> 07:47.620
也非常简单

07:47.620 --> 07:48.620
也非常好理解

07:48.620 --> 07:50.620
而且这个东西的话

07:50.620 --> 07:52.620
哪怕你是第一次接触RECT

07:52.620 --> 07:54.620
你之前在view里面

07:54.620 --> 07:56.620
是不是其实也有REF

07:56.620 --> 07:58.620
view里面是不是有DoublerREF

07:58.620 --> 07:59.620
对不对

07:59.620 --> 08:01.620
说两个东西其实是一样的

08:01.620 --> 08:02.620
它这个REF的话

08:02.620 --> 08:04.620
其实它就是音乐

08:04.620 --> 08:06.620
reference

08:06.620 --> 08:08.620
reference的缩写

08:08.620 --> 08:10.620
reference是不是引用的意思

08:10.620 --> 08:11.620
对吧

08:11.620 --> 08:12.620
说它这边代表引用

08:12.620 --> 08:13.620
我给你提供一种方式

08:13.620 --> 08:14.620
你可以这边

08:14.620 --> 08:16.620
拿到这个真实的动物节点

08:16.620 --> 08:18.620
OK

08:18.620 --> 08:19.620
好

08:19.620 --> 08:20.620
然后但是这个的话

08:20.620 --> 08:21.620
这个的话

08:21.620 --> 08:22.620
它已经过时了

08:22.620 --> 08:23.620
我们来看一下

08:23.620 --> 08:24.620
我们这边

08:24.620 --> 08:25.620
就上面的势力中

08:25.620 --> 08:28.620
我们进行了聚焦的操作

08:28.620 --> 08:31.620
但是有两个地方要注意

08:31.620 --> 08:32.620
首先

08:32.620 --> 08:34.620
这个是也是它官网所说的

08:34.620 --> 08:37.620
避免使用REFs

08:37.620 --> 08:41.620
来做任何可以生命式完成

08:41.620 --> 08:44.620
通过这个生命式来实现

08:44.620 --> 08:46.620
来完成的这个事情

08:46.620 --> 08:48.620
这句话什么意思

08:48.620 --> 08:50.620
也就是说一旦你比如说

08:50.620 --> 08:51.620
你某个功能

08:51.620 --> 08:52.620
它其实是可以通过

08:52.620 --> 08:54.620
这种生命式来完成的话

08:54.620 --> 08:56.620
你叫避免使用REFs

08:56.620 --> 08:57.620
REFs的话

08:57.620 --> 09:00.620
相当于是让你回到了什么

09:00.620 --> 09:02.620
相当于是让你回到了

09:03.620 --> 09:05.620
你回一下我们的那个

09:05.620 --> 09:06.620
接query时代

09:06.620 --> 09:07.620
接query时代的话

09:07.620 --> 09:08.620
最大的特点就是什么

09:08.620 --> 09:10.620
操作这个真实动物

09:10.620 --> 09:11.620
对不对

09:11.620 --> 09:12.620
那种的话

09:12.620 --> 09:13.620
我们称之为命令式的

09:13.620 --> 09:14.620
命令式

09:14.620 --> 09:15.620
我获取了这个动物节点

09:15.620 --> 09:17.620
那这样我要对这个动物节点

09:17.620 --> 09:18.620
进行什么样的操作

09:18.620 --> 09:20.620
一条一条命令

09:20.620 --> 09:22.620
那我们现代前端框架

09:22.620 --> 09:24.620
现代前端框架

09:24.620 --> 09:26.620
有一个非常重要的一个特点就是什么

09:26.620 --> 09:28.620
就是声明式

09:28.620 --> 09:29.620
响应式

09:29.620 --> 09:30.620
对吧

09:30.620 --> 09:31.620
声明式和响应式

09:31.620 --> 09:32.620
我这边的话我只需要干吗

09:32.620 --> 09:34.620
我这边他只需要

09:35.620 --> 09:37.620
只需要这边把我的这个

09:37.620 --> 09:39.620
就是我的这个gst

09:39.620 --> 09:40.620
在vue里面叫做模板

09:40.620 --> 09:41.620
对吧

09:41.620 --> 09:42.620
写好写好之后

09:42.620 --> 09:44.620
和我的数据进行绑定

09:44.620 --> 09:45.620
绑定之后

09:45.620 --> 09:46.620
然后将我数据一变

09:46.620 --> 09:48.620
假设我这边有这个data

09:48.620 --> 09:49.620
数据一变

09:49.620 --> 09:50.620
接下来这边的话

09:50.620 --> 09:53.620
是不是自动就发生变化

09:53.620 --> 09:55.620
这个是现代前端框架的

09:55.620 --> 09:56.620
这个特点

09:56.620 --> 09:58.620
也就是说我们要尽量的去避免

09:58.620 --> 09:59.620
像以前那样

09:59.620 --> 10:01.620
直接去操作这个动作

10:01.620 --> 10:02.620
OK

10:02.620 --> 10:04.620
说为什么他这边的话给你说的

10:04.620 --> 10:05.620
这个是官网的话

10:05.620 --> 10:07.620
你这边可以在官网看到的

10:07.620 --> 10:09.620
再看一下

10:09.620 --> 10:12.620
应该是在refs这边

10:12.620 --> 10:13.620
这儿看到没有

10:13.620 --> 10:15.620
避免使用refs来做

10:15.620 --> 10:17.620
任何可以通过声明式

10:17.620 --> 10:19.620
实现来完成的这个事情

10:19.620 --> 10:20.620
OK

10:20.620 --> 10:22.620
那他为什么还要提供呢

10:22.620 --> 10:23.620
为什么还要提供呢

10:23.620 --> 10:24.620
原因很简单

10:24.620 --> 10:25.620
因为有些时候的话

10:25.620 --> 10:27.620
你没办法

10:27.620 --> 10:29.620
比如他这边举了几种情况

10:29.620 --> 10:31.620
比如你这边的话要管理焦点

10:31.620 --> 10:33.620
我们刚才是不是就是管理焦点

10:33.620 --> 10:34.620
对吧

10:34.620 --> 10:35.620
或者你这边要文本选择

10:35.620 --> 10:37.620
或者这个媒体播放

10:37.620 --> 10:38.620
比如你是个v6元素

10:38.620 --> 10:39.620
你要播放

10:39.620 --> 10:40.620
对吧

10:40.620 --> 10:42.620
或者这边的话触发强制动画

10:42.620 --> 10:44.620
集成第三方多摩库

10:44.620 --> 10:45.620
OK

10:45.620 --> 10:46.620
就有些时候你在这个

10:46.620 --> 10:48.620
迫不得已的这个情况下

10:48.620 --> 10:49.620
你没办法

10:49.620 --> 10:50.620
你必须要去操作的一个多摩

10:50.620 --> 10:53.620
说他这边就通过这个refs

10:53.620 --> 10:55.620
通过这个

10:56.620 --> 10:57.620
通过这个ref

10:57.620 --> 10:59.620
给你提供了一种这种方式

10:59.620 --> 11:02.620
但是不是说你这边就烂用这个

11:02.620 --> 11:03.620
没有没有

11:03.620 --> 11:05.620
不是说就烂用这个

11:05.620 --> 11:08.620
你这边就是应该是在他说的这几种情况下

11:08.620 --> 11:10.620
就他说的这几种情况下

11:10.620 --> 11:11.620
没办法

11:11.620 --> 11:14.620
说这边的话才使用这个ref

11:14.620 --> 11:15.620
比如说你回忆一下

11:15.620 --> 11:16.620
我们之前写那个

11:16.620 --> 11:20.620
就是我们写那个入门前写那个项目的时候

11:20.620 --> 11:22.620
我们要获取到那个

11:22.620 --> 11:24.620
马克当里面的那个内容

11:24.620 --> 11:25.620
我们是不是没办法

11:25.620 --> 11:26.620
对不对

11:26.620 --> 11:28.620
我们必须要获取到他那个项目节点

11:28.620 --> 11:30.620
接下来获取那个就是用户

11:30.620 --> 11:31.620
说书写的这个内容

11:31.620 --> 11:32.620
对不对

11:32.620 --> 11:33.620
所以在那种情况下

11:33.620 --> 11:35.620
我们才会使用这个ref

11:35.620 --> 11:37.620
这首先是第一点

11:37.620 --> 11:38.620
好

11:38.620 --> 11:40.620
然后接下来第二点

11:40.620 --> 11:41.620
第二点就是刚才所说的

11:41.620 --> 11:42.620
就是你这边的话

11:42.620 --> 11:45.620
你采用这个制服创的方式

11:45.620 --> 11:47.620
这个API的话已经过时了

11:47.620 --> 11:48.620
这个我们看是不是看到了

11:48.620 --> 11:49.620
对不对

11:49.620 --> 11:50.620
他在这个未来的版本

11:50.620 --> 11:51.620
他可能会被移除

11:51.620 --> 11:53.620
那官方建议我们什么呢

11:53.620 --> 11:55.620
建议我们使用这个回调函数

11:55.620 --> 11:58.620
或者这个createref API

11:58.620 --> 12:00.620
那这个的话就是对象的方式

12:00.620 --> 12:02.620
就你要么使用函数的方式

12:02.620 --> 12:03.620
要么使用对象的方式

12:03.620 --> 12:05.620
来进行一个替代

12:05.620 --> 12:06.620
OK

12:06.620 --> 12:07.620
这边还有官网

12:07.620 --> 12:09.620
这边官网是说了的

12:11.620 --> 12:12.620
在这里

12:12.620 --> 12:13.620
看到没有

12:13.620 --> 12:14.620
过时的API

12:14.620 --> 12:15.620
实坠内心的这个refs

12:15.620 --> 12:17.620
我们不建议

12:17.620 --> 12:18.620
看到没有

12:18.620 --> 12:19.620
我们不建议使用它

12:19.620 --> 12:20.620
因为它存在一些问题

12:20.620 --> 12:22.620
那这个时候你肯定就会有要问了

12:22.620 --> 12:23.620
存在什么问题

12:23.620 --> 12:25.620
那这边你把这个链接点开就可以了

12:25.620 --> 12:28.620
但我不知道这个链接打得开吧

12:28.620 --> 12:29.620
这是这个get hub的

12:29.620 --> 12:32.620
最近get hub不怎么打得开

12:32.620 --> 12:34.620
今天又打开了

12:34.620 --> 12:35.620
今天又打开了

12:35.620 --> 12:36.620
怎么还在做

12:36.620 --> 12:38.620
我这边那结了个图

12:38.620 --> 12:39.620
在这里

12:39.620 --> 12:40.620
其实就是这个人说的

12:40.620 --> 12:41.620
这几点

12:41.620 --> 12:42.620
其实主要就是什么

12:42.620 --> 12:43.620
主要就是他会有一些

12:43.620 --> 12:45.620
这个性能的这个问题

12:45.620 --> 12:46.620
大家有兴趣的话

12:46.620 --> 12:47.620
可以自己去看一下

12:47.620 --> 12:48.620
你看他这边

12:48.620 --> 12:51.620
there are multiple problems with it

12:51.620 --> 12:53.620
有一些这个问题

12:53.620 --> 12:54.620
这边第一点

12:54.620 --> 12:55.620
第二点

12:55.620 --> 12:56.620
第三点

12:56.620 --> 12:57.620
他给你罗列出来了

12:57.620 --> 12:58.620
OK

12:58.620 --> 12:59.620
总之你记住

12:59.620 --> 13:00.620
就这个的话

13:00.620 --> 13:01.620
它过时了

13:01.620 --> 13:02.620
以后不这么用就行了

13:02.620 --> 13:03.620
OK

13:03.620 --> 13:04.620
你用的话

13:04.620 --> 13:05.620
他这边也会有什么

13:05.620 --> 13:07.620
也会有这个横线

13:07.620 --> 13:08.620
让你看着不舒服

13:08.620 --> 13:09.620
对不对

13:09.620 --> 13:10.620
也会有这个

13:11.620 --> 13:12.620
好

13:12.620 --> 13:13.620
那接下来的话

13:13.620 --> 13:14.620
我们来看一下

13:14.620 --> 13:16.620
这个通过这个crate

13:16.620 --> 13:17.620
crateref API

13:17.620 --> 13:19.620
这个的话是这个

13:19.620 --> 13:21.620
官方推荐的这种形式

13:21.620 --> 13:22.620
好

13:22.620 --> 13:23.620
来我们这边

13:23.620 --> 13:24.620
让我们来看一下例子

13:24.620 --> 13:25.620
OK

13:25.620 --> 13:27.620
回到我们这边

13:27.620 --> 13:28.620
这里的话

13:28.620 --> 13:31.620
我们来使用这个crateref API

13:31.620 --> 13:32.620
好

13:32.620 --> 13:33.620
这边的话

13:33.620 --> 13:35.620
我们添加一个constructor

13:35.620 --> 13:37.620
constructor

13:37.620 --> 13:38.620
好

13:38.620 --> 13:40.620
这边的话super

13:40.620 --> 13:41.620
好

13:41.620 --> 13:42.620
然后接下来

13:42.620 --> 13:43.620
这里的话

13:43.620 --> 13:45.620
你就需要使用这个crate

13:45.620 --> 13:46.620
crateref API

13:46.620 --> 13:48.620
那这边还是react

13:48.620 --> 13:50.620
上面的一个静态方法

13:50.620 --> 13:51.620
crateref

13:51.620 --> 13:52.620
这些的话

13:52.620 --> 13:54.620
我们都称之为静态方法

13:54.620 --> 13:55.620
我希望大家现在能

13:55.620 --> 13:57.620
就是我说这个静态方法

13:57.620 --> 13:59.620
还有这个实力方法

13:59.620 --> 14:00.620
你能够分得清楚

14:00.620 --> 14:01.620
OK

14:01.620 --> 14:02.620
这个crateref

14:02.620 --> 14:03.620
这个react一看就是一个什么

14:03.620 --> 14:04.620
一看就是一个类

14:04.620 --> 14:05.620
对不对

14:05.620 --> 14:06.620
然后我在类上面

14:06.620 --> 14:07.620
直接调方法

14:07.620 --> 14:09.620
这种方法就是静态方法

14:09.620 --> 14:11.620
我不需要去实力化对象的

14:11.620 --> 14:12.620
对不对

14:12.620 --> 14:13.620
说这个的话

14:13.620 --> 14:14.620
它就是一个静态方法

14:14.620 --> 14:15.620
关于这种API

14:15.620 --> 14:17.620
你也可以在哪看得到呢

14:17.620 --> 14:19.620
你也可以在这个位置

14:19.620 --> 14:21.620
那这边是不是有一个API

14:21.620 --> 14:23.620
这个reference

14:23.620 --> 14:24.620
对吧

14:24.620 --> 14:25.620
你把它展开

14:25.620 --> 14:26.620
展开之后

14:26.620 --> 14:27.620
然后接下来在这里

14:27.620 --> 14:28.620
这里面所有的这个API

14:28.620 --> 14:29.620
你都看得到

14:29.620 --> 14:31.620
这边是关于组件的

14:31.620 --> 14:33.620
这个我们之前什么讲过

14:33.620 --> 14:34.620
Pover Component

14:34.620 --> 14:35.620
Memo

14:35.620 --> 14:36.620
Memo还没讲是吧

14:36.620 --> 14:37.620
后面会说

14:37.620 --> 14:39.620
这边就都看得到

14:39.620 --> 14:40.620
看一下

14:40.620 --> 14:41.620
这里

14:41.620 --> 14:42.620
看到没有

14:42.620 --> 14:43.620
都看得到

14:43.620 --> 14:44.620
这个是和REF

14:44.620 --> 14:45.620
转发相关的

14:45.620 --> 14:47.620
我们这几颗也会说

14:47.620 --> 14:48.620
也会说

14:48.620 --> 14:49.620
这几颗应该会有点长

14:49.620 --> 14:51.620
稍微有点长

14:51.620 --> 14:53.620
然后这里的话

14:53.620 --> 14:54.620
我们回到这边

14:54.620 --> 14:56.620
我们这边继续

14:56.620 --> 14:57.620
我们这边的话

14:57.620 --> 14:58.620
通过这个

14:58.620 --> 14:59.620
通过这个的话

14:59.620 --> 15:01.620
就可以创建一个REF的对象

15:01.620 --> 15:02.620
然后加这边的话

15:02.620 --> 15:03.620
我在给

15:03.620 --> 15:05.620
给我的实力上面

15:05.620 --> 15:07.620
这边

15:07.620 --> 15:08.620
添加一个属性

15:08.620 --> 15:11.620
比如叫做InputREF

15:12.620 --> 15:13.620
也就是说

15:13.620 --> 15:14.620
我这边的话

15:14.620 --> 15:16.620
rect.createREF

15:16.620 --> 15:17.620
他回头的话

15:17.620 --> 15:18.620
他会干嘛呢

15:18.620 --> 15:19.620
他会返回一个这个对象

15:19.620 --> 15:21.620
我把这个对象

15:21.620 --> 15:22.620
复制给谁呢

15:22.620 --> 15:24.620
复制给这个InputREF

15:24.620 --> 15:25.620
回头

15:25.620 --> 15:26.620
我的这个组件上面

15:26.620 --> 15:27.620
就会多一个属性

15:27.620 --> 15:28.620
叫做InputREF

15:28.620 --> 15:29.620
来我们这边

15:29.620 --> 15:30.620
我们来看一下

15:30.620 --> 15:32.620
我们把这些都删了

15:32.620 --> 15:34.620
把这些都删了

15:34.620 --> 15:35.620
OK

15:35.620 --> 15:36.620
我们先看一下

15:36.620 --> 15:37.620
是不是

15:37.620 --> 15:38.620
好

15:38.620 --> 15:39.620
然后接下来

15:39.620 --> 15:40.620
这边

15:40.620 --> 15:41.620
好

15:41.620 --> 15:42.620
这边点一下

15:42.620 --> 15:43.620
点一下之后

15:43.620 --> 15:44.620
再加我们这边

15:44.620 --> 15:45.620
把这个组件展开

15:45.620 --> 15:46.620
展开之后你看

15:46.620 --> 15:47.620
他这个REF是什么

15:47.620 --> 15:48.620
还有

15:48.620 --> 15:49.620
对不对

15:49.620 --> 15:50.620
REF是什么

15:50.620 --> 15:51.620
REF是你刚才这边

15:51.620 --> 15:52.620
挂的那个支付串的时候

15:52.620 --> 15:53.620
他这边的话

15:53.620 --> 15:54.620
就会有REF是

15:54.620 --> 15:55.620
不用你这边

15:55.620 --> 15:56.620
刚才你写的REF

15:56.620 --> 15:57.620
我们随便写了

15:57.620 --> 15:58.620
就等于A

15:58.620 --> 15:59.620
OK

15:59.620 --> 16:00.620
刷新一下

16:00.620 --> 16:03.000
这边

16:03.000 --> 16:04.000
是不是这个A

16:04.000 --> 16:05.000
对不对

16:05.000 --> 16:06.000
对应的是这个Input

16:06.000 --> 16:07.000
那我们这边

16:07.000 --> 16:08.000
先不这样写

16:08.000 --> 16:10.000
先不这样写

16:10.000 --> 16:11.000
好

16:11.000 --> 16:12.000
然后我们这边

16:12.000 --> 16:13.000
刷新一下

16:13.000 --> 16:14.000
你看

16:14.000 --> 16:15.000
现在这个REF

16:15.000 --> 16:16.000
是空的

16:16.000 --> 16:17.000
但是你注意这里

16:17.000 --> 16:18.000
这里

16:18.000 --> 16:19.000
我们给这个

16:19.000 --> 16:20.000
组件上面

16:20.000 --> 16:21.000
这个属性上面

16:21.000 --> 16:22.000
多添加了一个什么

16:22.000 --> 16:23.000
是不是多添加了一个

16:23.000 --> 16:24.000
叫做InputREF

16:24.000 --> 16:25.000
在哪里

16:25.000 --> 16:27.000
是不是在这边添加的

16:27.000 --> 16:28.000
对不对

16:28.000 --> 16:29.000
在这添加的

16:29.000 --> 16:31.000
多添加了一个InputREF

16:31.000 --> 16:32.000
他对应的值是什么

16:32.000 --> 16:35.000
他对应的值就是一个对象

16:35.000 --> 16:36.000
OK

16:36.000 --> 16:38.000
他对应的值就是个对象

16:38.000 --> 16:39.000
对象的话

16:39.000 --> 16:40.000
Current

16:40.000 --> 16:42.000
Current现在对应的是一个No

16:42.000 --> 16:43.000
也就是说

16:43.000 --> 16:44.000
现在你这边

16:44.000 --> 16:45.000
创建了一个这么一个REF

16:45.000 --> 16:47.000
他这边指向什么呢

16:47.000 --> 16:48.000
他现在还没有关联

16:48.000 --> 16:49.000
任何的动物元素

16:49.000 --> 16:50.000
说他这边是No

16:50.000 --> 16:51.000
OK

16:51.000 --> 16:52.000
好

16:52.000 --> 16:53.000
然后接下来的话

16:53.000 --> 16:55.000
我要让他进行一个关联

16:55.000 --> 16:56.000
如何让他进行关联呢

16:56.000 --> 16:57.000
好

16:57.000 --> 16:58.000
这边很简单

16:58.000 --> 16:59.000
这边REF

16:59.000 --> 17:00.000
你就不再是个制符创了

17:00.000 --> 17:01.000
而是什么呢

17:01.000 --> 17:02.000
而是一个对象

17:02.000 --> 17:05.000
Z.InputREF

17:06.000 --> 17:07.000
OK

17:07.000 --> 17:08.000
Z.InputREF

17:08.000 --> 17:09.000
好

17:09.000 --> 17:10.000
然后接下来我们这边

17:10.000 --> 17:11.000
我们再来看一下

17:11.000 --> 17:12.000
刷新

17:12.000 --> 17:13.000
走

17:13.000 --> 17:14.000
好

17:14.000 --> 17:15.000
你看现在

17:15.000 --> 17:16.000
现在的话

17:16.000 --> 17:17.000
这个InputREF

17:17.000 --> 17:18.000
他对应的仍然是

17:18.000 --> 17:19.000
刚才那个对象

17:19.000 --> 17:20.000
但是他现在的话

17:20.000 --> 17:21.000
这个Current

17:21.000 --> 17:22.000
是不是就有值了

17:23.000 --> 17:24.000
对不对

17:24.000 --> 17:25.000
这Current对应的值是什么

17:25.000 --> 17:27.000
Current对应的值是Input

17:27.000 --> 17:28.000
Input是谁

17:28.000 --> 17:29.000
Input是不是他呀

17:29.000 --> 17:30.000
对不对

17:30.000 --> 17:31.000
Input是他

17:31.000 --> 17:32.000
OK

17:32.000 --> 17:33.000
那我们一换的话

17:33.000 --> 17:34.000
就可以通过什么

17:34.000 --> 17:36.000
通过Z.InputREF

17:36.000 --> 17:38.000
点Current

17:38.000 --> 17:39.000
是不是就可以拿到

17:39.000 --> 17:41.000
这个动物元刷

17:41.000 --> 17:42.000
对不对

17:42.000 --> 17:43.000
好来我们这边来试一下

17:44.000 --> 17:45.000
Z.InputREF

17:45.000 --> 17:47.000
Z.InputREF

17:47.000 --> 17:48.000
Z.InputREF

17:48.000 --> 17:49.000
Z.InputREF

17:49.000 --> 17:50.000
Z.InputREF

17:50.000 --> 17:51.000
Z.InputREF

17:51.000 --> 17:52.000
Z.InputREF

17:52.000 --> 17:53.000
Z.InputREF

17:53.000 --> 17:54.000
Z.InputREF

17:54.000 --> 17:55.000
对吧

17:55.000 --> 17:56.000
我们直接就那个吧

17:56.000 --> 17:57.000
直接就调这个Fox

17:57.000 --> 17:59.000
因为他拿到的是一个Input

17:59.000 --> 18:00.000
直接调Fox

18:00.000 --> 18:01.000
好

18:01.000 --> 18:03.000
热焦这边的话刷新一下

18:03.000 --> 18:04.000
走

18:04.000 --> 18:05.000
搞定了

18:05.000 --> 18:06.000
是不是就搞定了

18:06.000 --> 18:07.000
对不对

18:07.000 --> 18:08.000
你看他这个的话

18:08.000 --> 18:09.000
其实就是这个

18:09.000 --> 18:10.000
现在这个

18:10.000 --> 18:13.000
REF官方推荐了这个形式

18:13.000 --> 18:15.000
他这边的话他这个

18:15.000 --> 18:16.000
CurrentREF的话他这边

18:16.000 --> 18:17.000
其实做的事情

18:17.000 --> 18:18.000
就是返回一个这个对象

18:18.000 --> 18:19.000
OK

18:19.000 --> 18:20.000
你这边

18:20.000 --> 18:21.000
你可以在这个圆码里面

18:21.000 --> 18:22.000
你可以看一下

18:22.000 --> 18:24.000
这边的话你找到他的

18:24.000 --> 18:25.000
这个

18:25.000 --> 18:26.000
找一下吗

18:26.000 --> 18:27.000
在这边

18:27.000 --> 18:28.000
REF

18:28.000 --> 18:30.000
OPQR

18:30.000 --> 18:31.000
是吧

18:31.000 --> 18:32.000
REF

18:32.000 --> 18:33.000
在这边

18:33.000 --> 18:34.000
REF

18:34.000 --> 18:35.000
好

18:35.000 --> 18:36.000
这边你把它这边

18:36.000 --> 18:38.000
Development.js

18:38.000 --> 18:39.000
打开

18:39.000 --> 18:40.000
打开之后

18:40.000 --> 18:42.000
在这边你搜索一下

18:42.000 --> 18:44.000
这边

18:44.000 --> 18:47.000
CurrentREF

18:47.000 --> 18:49.000
搜一下

18:49.000 --> 18:50.000
这边是不是有了

18:50.000 --> 18:51.000
看到没有

18:51.000 --> 18:52.000
这边CurrentREF

18:52.000 --> 18:54.000
你看他这边就定义了一个什么

18:54.000 --> 18:55.000
是不是定义了个叫做REF

18:55.000 --> 18:56.000
Object

18:56.000 --> 18:57.000
这边是一个什么

18:57.000 --> 18:59.000
是不是这边是一个对象

18:59.000 --> 19:00.000
对不对

19:00.000 --> 19:01.000
好

19:01.000 --> 19:02.000
大家这边他调用什么

19:02.000 --> 19:03.000
调用这个Object.sale

19:03.000 --> 19:04.000
这边处理一下

19:04.000 --> 19:05.000
处理完了之后

19:05.000 --> 19:06.000
然后接下来这边干嘛

19:06.000 --> 19:07.000
是返回

19:07.000 --> 19:08.000
这个的话是

19:08.000 --> 19:09.000
接使原生的这个方法

19:09.000 --> 19:11.000
这个不是他react什么东西

19:11.000 --> 19:13.000
它是接使原生的这个方法

19:13.000 --> 19:14.000
OK

19:14.000 --> 19:15.000
你如果这个方法你不熟悉的话

19:15.000 --> 19:17.000
你自己去看一下这个MDN

19:17.000 --> 19:18.000
OK

19:18.000 --> 19:19.000
然后大家最后他就干嘛

19:19.000 --> 19:21.000
最后他这边就是把这个

19:21.000 --> 19:22.000
对象干嘛

19:22.000 --> 19:23.000
是返回出去

19:23.000 --> 19:24.000
对不对

19:24.000 --> 19:26.000
他这边是一个

19:26.000 --> 19:27.000
不可辨的对象

19:27.000 --> 19:29.000
with a single mutable value

19:29.000 --> 19:30.000
OK

19:30.000 --> 19:32.000
这就是这个CurrentREF

19:32.000 --> 19:33.000
你做的事情

19:33.000 --> 19:34.000
其实没做啥

19:34.000 --> 19:35.000
对不对

19:35.000 --> 19:36.000
其实没有做什么

19:36.000 --> 19:39.310
OK

19:39.310 --> 19:41.310
好这是关于这个

19:41.310 --> 19:43.310
CurrentREF

19:44.310 --> 19:45.310
好

19:45.310 --> 19:46.310
然后接下来的话

19:46.310 --> 19:47.310
这个

19:47.310 --> 19:48.310
这边我也贴的有

19:48.310 --> 19:49.310
这边我也贴的有

19:49.310 --> 19:50.310
OK

19:50.310 --> 19:51.310
好然后最后的话

19:51.310 --> 19:52.310
我们这边把这个对象

19:52.310 --> 19:53.310
和这个input

19:53.310 --> 19:55.310
进行一个这个关联

19:55.310 --> 19:58.520
好

19:58.520 --> 19:59.520
然后除了什么

19:59.520 --> 20:01.520
除了就是你这边在

20:01.520 --> 20:02.520
接使差里面

20:02.520 --> 20:03.520
关联这个REF

20:03.520 --> 20:04.520
我们还可以干嘛呢

20:04.520 --> 20:05.520
我们还可以直接关联

20:05.520 --> 20:07.520
一个这个内组件

20:07.520 --> 20:08.520
关联了之后

20:08.520 --> 20:09.520
到时候这个REF的话

20:09.520 --> 20:10.520
他得到的什么

20:10.520 --> 20:12.520
他得到的就是一个组件

20:12.520 --> 20:13.520
然后回头的话

20:13.520 --> 20:14.520
你可以调用这个

20:14.520 --> 20:15.520
组件内部的这个方法

20:15.520 --> 20:17.520
我们这边我们来看一下

20:17.520 --> 20:18.520
你目前来讲的话

20:18.520 --> 20:20.520
你这个REF是挂在哪上面的

20:20.520 --> 20:21.520
是挂到这个

20:21.520 --> 20:22.520
接使差里面的这个

20:22.520 --> 20:23.520
动物元素上面的

20:23.520 --> 20:24.520
对不对

20:24.520 --> 20:25.520
那我现在的我这个REF

20:25.520 --> 20:26.520
关联的是谁

20:26.520 --> 20:27.520
是不是你挂了哪个

20:27.520 --> 20:28.520
动物元素

20:28.520 --> 20:29.520
他就挂这个关联谁

20:29.520 --> 20:30.520
对不对

20:30.520 --> 20:31.520
我现在的话

20:31.520 --> 20:32.520
我是挂在这个input上面的

20:32.520 --> 20:33.520
他这边的话

20:34.520 --> 20:35.520
他除了就是

20:35.520 --> 20:36.520
关联这个就是

20:36.520 --> 20:38.520
接差里面的动物元素以外

20:38.520 --> 20:39.520
他还可以关联这个

20:39.520 --> 20:40.520
内组件

20:40.520 --> 20:41.520
比如说我们这边

20:41.520 --> 20:42.520
我们来看个例子

20:42.520 --> 20:44.830
好

20:44.830 --> 20:45.830
这边的话

20:46.830 --> 20:47.830
新建一个吧

20:48.830 --> 20:50.830
新建一个component

20:50.830 --> 20:51.830
好

20:51.830 --> 20:52.830
这边的话

20:52.830 --> 20:53.830
然后一个choud

20:53.830 --> 20:55.830
choud.com

20:55.830 --> 20:56.830
接差

20:56.830 --> 20:57.830
好这边

20:57.830 --> 20:58.830
这边的话

20:58.830 --> 21:00.830
还是用这个内组件吧

21:00.830 --> 21:01.830
RCC

21:01.830 --> 21:02.830
一会会说

21:02.830 --> 21:04.830
为什么没用函数组件

21:04.830 --> 21:05.830
好

21:05.830 --> 21:06.830
然后这样这边这个

21:06.830 --> 21:07.830
直组件

21:07.830 --> 21:08.830
直组件的话

21:08.830 --> 21:09.830
我们给他一个这个方法

21:09.830 --> 21:11.830
这是直组件

21:11.830 --> 21:13.830
直组件

21:14.830 --> 21:15.830
好

21:15.830 --> 21:16.830
我们给他一个方法

21:16.830 --> 21:17.830
这个方法呢

21:17.830 --> 21:18.830
比如说叫做这个test

21:18.830 --> 21:24.060
ok

21:24.060 --> 21:25.060
好

21:25.060 --> 21:26.060
这test的方法

21:26.060 --> 21:27.060
这test的方法

21:27.060 --> 21:28.060
做的事情也很简单

21:28.060 --> 21:30.060
这边就做个打印

21:30.060 --> 21:31.060
比较这边

21:31.060 --> 21:32.060
这是

21:32.060 --> 21:34.060
这个直组件

21:34.060 --> 21:36.060
这个test

21:36.060 --> 21:37.060
方法

21:37.060 --> 21:38.060
ok

21:38.060 --> 21:39.060
好

21:39.060 --> 21:40.060
然后接下来的话

21:40.060 --> 21:42.060
我在这边我引入这个直组件

21:42.060 --> 21:44.060
import

21:45.060 --> 21:46.060
import

21:46.060 --> 21:48.060
choud.com

21:48.060 --> 21:50.060
然后

21:50.060 --> 21:54.270
当前目录下面的

21:54.270 --> 21:55.270
choud

21:56.270 --> 21:58.270
choud.com

21:58.270 --> 22:00.270
那个component下面

22:01.270 --> 22:03.270
component下面的

22:03.270 --> 22:04.270
choud.com

22:04.270 --> 22:05.270
把引入

22:05.270 --> 22:06.270
然后引入了之后

22:06.270 --> 22:07.270
然后接下来的话

22:07.270 --> 22:08.270
我们在这边

22:09.270 --> 22:11.270
这个import我们就不要了

22:11.270 --> 22:12.270
就不要了

22:12.270 --> 22:14.270
我们这边就这个choud.com

22:14.270 --> 22:18.250
ok

22:18.250 --> 22:19.250
这边的话就是在干嘛

22:19.250 --> 22:21.250
这边是不是在使用这个直组件

22:21.250 --> 22:22.250
好

22:22.250 --> 22:23.250
然后接下来的话

22:23.250 --> 22:25.250
我把这个ref就挂在哪里呢

22:25.250 --> 22:27.250
挂在这个直组件上面

22:27.250 --> 22:28.250
这边就是应该是

22:28.250 --> 22:30.250
js.importref

22:31.250 --> 22:32.250
对吧

22:32.250 --> 22:33.250
挂到这上面

22:33.250 --> 22:34.250
好

22:34.250 --> 22:35.250
那接下来

22:35.250 --> 22:36.250
这个时候这个ref

22:36.250 --> 22:37.250
它就指向什么

22:37.250 --> 22:40.250
就指向你整个这个组件

22:40.250 --> 22:41.250
指向你整个这个组件

22:41.250 --> 22:43.250
然后我们这边我们来看一下

22:43.250 --> 22:44.250
好

22:44.250 --> 22:45.250
我们这边保存

22:45.250 --> 22:46.250
保存了之后

22:46.250 --> 22:47.250
然后加我们这边

22:47.250 --> 22:48.250
把这个按钮

22:48.250 --> 22:49.250
点击一下

22:49.250 --> 22:50.250
嗯

22:50.250 --> 22:51.250
我看这边它是

22:51.250 --> 22:52.250
它这边是js

22:52.250 --> 22:54.250
我们这边应该是js

22:54.250 --> 22:56.250
.importref

22:56.250 --> 22:58.250
就这样子嘛

22:59.250 --> 23:00.250
好

23:00.250 --> 23:01.250
走

23:01.250 --> 23:02.250
你看

23:02.250 --> 23:03.250
这边这个current

23:03.250 --> 23:04.250
current是不是就指向你这个

23:04.250 --> 23:06.250
choud.com

23:06.250 --> 23:07.250
对不对

23:07.250 --> 23:08.250
好

23:08.250 --> 23:09.250
这样我这边的话

23:09.250 --> 23:10.250
就可以干嘛呢

23:10.250 --> 23:11.250
我就可以调用这个

23:11.250 --> 23:12.250
组件的这个方法

23:12.250 --> 23:13.250
这边点

23:13.250 --> 23:17.710
这边把人拿出来

23:17.710 --> 23:19.710
这边的话点什么

23:19.710 --> 23:20.710
点current

23:20.710 --> 23:21.710
current拿到什么

23:21.710 --> 23:23.710
是不是拿到这个直组件

23:23.710 --> 23:24.710
拿到直组件之后

23:24.710 --> 23:25.710
大家它上面有个什么

23:25.710 --> 23:27.710
是不是它有个test的方法

23:27.710 --> 23:28.710
对吧

23:28.710 --> 23:29.710
我直接调

23:29.710 --> 23:31.710
直接调用直组件的方法

23:31.710 --> 23:34.710
直接调用

23:34.710 --> 23:36.710
直组件的方法

23:36.710 --> 23:37.710
OK

23:37.710 --> 23:38.710
保存一下

23:38.710 --> 23:40.710
好来看一下

23:40.710 --> 23:41.710
这边走

23:41.710 --> 23:42.710
搞定了

23:42.710 --> 23:43.710
搞定了

23:43.710 --> 23:44.710
你看我这边

23:44.710 --> 23:45.710
可以直接调用

23:45.710 --> 23:47.710
直组件的这个方法

23:47.710 --> 23:48.710
直接通过这个

23:48.710 --> 23:49.710
引用到这个直组件

23:49.710 --> 23:51.710
去调用它的这个方法

23:51.710 --> 23:52.710
OK

23:52.710 --> 23:54.710
所以它这边不仅可以关联这个

23:54.710 --> 23:56.710
就是不仅可以关联你这边

23:56.710 --> 23:57.710
这个JSX里面的

23:57.710 --> 23:58.710
这个动物元素

23:58.710 --> 23:59.710
还可以关联什么

23:59.710 --> 24:00.710
还可以关联这个

24:00.710 --> 24:01.710
就是内组件

24:01.710 --> 24:03.710
大家直接调用什么呢

24:03.710 --> 24:05.710
直接调用这个组件

24:05.710 --> 24:07.710
内部的这个方法

24:07.710 --> 24:08.710
OK

24:08.710 --> 24:09.710
但是你要注意

24:09.710 --> 24:11.710
就还是要强调那一点

24:11.710 --> 24:12.710
雷点了

24:12.710 --> 24:13.710
就虽然提供这种方式

24:13.710 --> 24:14.710
但是呢

24:14.710 --> 24:16.710
它是一种反模式

24:16.710 --> 24:17.710
反模式

24:17.710 --> 24:19.710
我把这个给你加粗

24:19.710 --> 24:21.710
它是一种反模式

24:21.710 --> 24:23.710
也就是说它相当于让你回到了什么

24:23.710 --> 24:25.710
回到了这个Jquery时代

24:25.710 --> 24:26.710
对不对

24:26.710 --> 24:27.710
所以你这边的话

24:27.710 --> 24:28.710
你要尽量避免这么做

24:28.710 --> 24:29.710
你这边的话

24:29.710 --> 24:30.710
就是能够用声明式的

24:30.710 --> 24:33.710
你叫就改成声明式

24:33.710 --> 24:34.710
通过一些什么

24:34.710 --> 24:35.710
状态提升啊之类的

24:35.710 --> 24:36.710
对不对

24:36.710 --> 24:37.710
尽量避免这种

24:37.710 --> 24:39.710
直接去获取到一个组件

24:39.710 --> 24:40.710
或者直接获取到一个DOM解点

24:40.710 --> 24:42.710
直接调它的方法

24:42.710 --> 24:43.710
对不对

24:43.710 --> 24:44.710
或者直接调这个DOM的

24:44.710 --> 24:45.710
原生的这个方法

24:45.710 --> 24:46.710
尽量避免

24:46.710 --> 24:47.710
除非逼不得已

24:47.710 --> 24:48.710
原来没有

24:48.710 --> 24:49.710
反复强调

24:49.710 --> 24:50.710
反复强调

24:50.710 --> 24:53.340
好

24:53.340 --> 24:54.340
然后接下来

24:54.340 --> 24:55.340
这边要说一下

24:55.340 --> 24:56.340
这边要说一下

24:56.340 --> 24:57.340
就是这个CreatRefAPN

24:57.340 --> 24:59.340
它是在React16.3

24:59.340 --> 25:01.340
这个版本引入的

25:01.340 --> 25:03.340
16.3

25:03.340 --> 25:05.340
现在的话已经18版本了

25:05.340 --> 25:07.340
如果是稍早一点的版本

25:07.340 --> 25:09.340
稍早一点的版本怎么办呢

25:09.340 --> 25:10.340
稍早一点的版本

25:10.340 --> 25:11.340
官方推荐你使用

25:11.340 --> 25:13.340
这个回调的这种形式

25:13.340 --> 25:16.340
也就是函数的形式

25:16.340 --> 25:17.340
好

25:17.340 --> 25:18.340
来我们把这个例子来看一下吧

25:18.340 --> 25:19.340
就我现在的话

25:19.340 --> 25:21.340
我压根这个React.CreatRefAPN

25:21.340 --> 25:23.340
这个也没有

25:23.340 --> 25:24.340
也没有

25:24.340 --> 25:25.340
那这边怎么办

25:25.340 --> 25:26.340
这边的话

25:26.340 --> 25:28.340
你就可以用一个函数

25:28.340 --> 25:29.340
OK

25:29.340 --> 25:30.340
用个回调函数

25:30.340 --> 25:32.340
这边Element

25:32.340 --> 25:34.340
这个的话是它的这个函数

25:34.340 --> 25:37.850
这个是它的函数

25:37.850 --> 25:39.850
OK

25:39.850 --> 25:40.850
好

25:40.850 --> 25:41.850
然后接下来的话

25:41.850 --> 25:42.850
这边Element是什么

25:42.850 --> 25:43.850
Element的话

25:43.850 --> 25:44.850
你这边如果

25:44.850 --> 25:45.850
绑在这个Dom上面

25:45.850 --> 25:47.850
它拿到的就是那个Dom解点

25:47.850 --> 25:48.850
如果你绑在这个

25:48.850 --> 25:49.850
植主键上面

25:49.850 --> 25:50.850
它拿到的就是这个植主键

25:50.850 --> 25:51.850
OK

25:51.850 --> 25:52.850
比如说我们这边来两个嘛

25:52.850 --> 25:54.850
我们这边再来一个Input

25:54.850 --> 26:00.670
InputType等于一个Text

26:00.670 --> 26:02.670
OK

26:02.670 --> 26:03.670
好

26:03.670 --> 26:04.670
我们这边

26:04.670 --> 26:06.670
这个Ref

26:06.670 --> 26:15.690
Ref等于一个Z.InputRef

26:15.690 --> 26:16.690
OK

26:16.690 --> 26:17.690
你看我这边

26:17.690 --> 26:18.690
我这边的话

26:18.690 --> 26:20.690
我现在Z.InputRef

26:20.690 --> 26:21.690
这边对应的是什么

26:21.690 --> 26:23.690
对应的是个回调函数

26:23.690 --> 26:24.690
回调函数的话

26:24.690 --> 26:25.690
这边就会有个形参

26:25.690 --> 26:26.690
形参对应的是什么呢

26:26.690 --> 26:27.690
对应的是这个

26:27.690 --> 26:29.690
对应的是这个Input

26:29.690 --> 26:30.690
对应是这个Input

26:30.690 --> 26:31.690
然后接下来的话

26:31.690 --> 26:34.320
你这边

26:34.320 --> 26:35.320
这里的话

26:35.320 --> 26:36.320
我们再来添加一个属性

26:36.320 --> 26:37.320
比如Z.Input

26:37.320 --> 26:40.320
点这个InputDom

26:40.320 --> 26:41.320
等于一个什么呢

26:41.320 --> 26:44.320
等于一个Element

26:44.320 --> 26:45.320
Element

26:45.320 --> 26:46.320
什么意思啊

26:46.320 --> 26:47.320
也就是说我们这边的话

26:47.320 --> 26:48.320
往这个

26:48.320 --> 26:50.320
往这个主键上面

26:50.320 --> 26:51.320
新增了一个什么

26:51.320 --> 26:53.320
是不是新增了一个InputDom属性

26:53.320 --> 26:55.320
那这个inputDom属性

26:55.320 --> 26:56.320
就是指向什么了

26:56.320 --> 26:57.320
是不是指向你那个

26:57.320 --> 26:58.320
动物元素了

26:58.320 --> 26:59.320
对不对

26:59.320 --> 27:00.320
OK

27:00.320 --> 27:01.320
回头的话

27:01.320 --> 27:02.320
我们这边

27:02.320 --> 27:03.320
可以一刻的时候

27:03.320 --> 27:04.320
我们这边就可以干嘛

27:04.320 --> 27:05.320
我们这边是不是

27:05.320 --> 27:06.320
就可以通过Z.InputDom

27:06.320 --> 27:07.320
是不是来拿到你的这个

27:07.320 --> 27:08.320
动物元素

27:08.320 --> 27:09.320
对不对

27:09.320 --> 27:10.320
拿到之后再加这边

27:10.320 --> 27:11.320
你要做什么

27:11.320 --> 27:12.320
你直接做就可以了

27:12.320 --> 27:13.320
比我们这边要做Fox

27:13.320 --> 27:14.320
对吧

27:14.320 --> 27:15.320
好了

27:15.320 --> 27:16.320
比如说这边

27:16.320 --> 27:17.320
这边也是一样的

27:17.320 --> 27:18.320
比我们这边

27:18.320 --> 27:21.320
Z.Com

27:21.320 --> 27:24.320
ComRef

27:24.320 --> 27:25.320
ComRef

27:25.320 --> 27:27.320
等于一个Element

27:27.320 --> 27:29.760
OK

27:29.760 --> 27:30.760
这边

27:30.760 --> 27:31.760
这边这个Element

27:31.760 --> 27:32.760
Element就是什么

27:32.760 --> 27:33.760
Element是不是你的这个

27:33.760 --> 27:34.760
直主键

27:34.760 --> 27:35.760
直主键

27:35.760 --> 27:36.760
然后加我们这边

27:36.760 --> 27:40.760
Z.Com

27:40.760 --> 27:42.760
Com比较叫做Instance

27:42.760 --> 27:44.760
等于一个Element

27:44.760 --> 27:45.760
对吧

27:45.760 --> 27:46.760
好

27:46.760 --> 27:47.760
回头的话

27:47.760 --> 27:48.760
你在这边

27:48.760 --> 27:49.760
这边的话

27:49.760 --> 27:50.760
你就可以通过Z.Com

27:50.760 --> 27:51.760
Instance

27:51.760 --> 27:52.760
拿到什么

27:52.760 --> 27:53.760
是不是拿到这个直主键

27:53.760 --> 27:54.760
拿到之后

27:54.760 --> 27:55.760
再加这边

27:55.760 --> 27:56.760
你调直主键的这个

27:56.760 --> 27:57.760
方法什么的

27:57.760 --> 27:58.760
你调用就可以了

27:58.760 --> 27:59.760
就和之前是一样的

27:59.760 --> 28:00.760
OK

28:00.760 --> 28:01.760
好

28:01.760 --> 28:02.760
来我们这边

28:02.760 --> 28:03.760
我们来看一下

28:03.760 --> 28:04.760
好

28:04.760 --> 28:05.760
这边

28:05.760 --> 28:06.760
我们现在点击

28:06.760 --> 28:07.760
点击的话这边

28:07.760 --> 28:08.760
就应该是有两个效果

28:08.760 --> 28:09.760
一个是什么

28:09.760 --> 28:10.760
一个是这边是不是聚焦

28:10.760 --> 28:11.760
另外一个这边

28:11.760 --> 28:12.760
是不是打印出

28:12.760 --> 28:13.760
直主键的方法

28:13.760 --> 28:14.760
对吧

28:14.760 --> 28:15.760
我们这边来看一下

28:15.760 --> 28:18.760
Z.InputDomFox

28:18.760 --> 28:20.760
is not function

28:20.760 --> 28:23.760
InputDom

28:23.760 --> 28:24.760
not function

28:24.760 --> 28:26.760
好看一下

28:26.760 --> 28:27.760
好

28:27.760 --> 28:28.760
我们这边

28:28.760 --> 28:29.760
我们来打印一下

28:29.760 --> 28:30.760
打印一下

28:30.760 --> 28:31.760
这边的话

28:31.760 --> 28:33.760
Z.InputDom

28:33.760 --> 28:34.760
对吧

28:34.760 --> 28:38.760
这个是Z.ComeInstance

28:38.760 --> 28:40.760
下面这边

28:40.760 --> 28:41.760
这边也没改

28:41.760 --> 28:42.760
这边的话

28:42.760 --> 28:43.760
应该是Bundit什么

28:43.760 --> 28:45.760
ComoRef

28:45.760 --> 28:47.760
这边是Ref等于

28:47.760 --> 28:48.760
Z.ComeRef

28:48.760 --> 28:49.760
对吧

28:49.760 --> 28:50.760
这边对你

28:50.760 --> 28:51.760
是这么一个回调

28:51.760 --> 28:52.760
还说

28:52.760 --> 28:53.760
其他的话

28:53.760 --> 28:54.760
应该是对的

28:54.760 --> 28:55.760
来看一下

28:55.760 --> 28:56.760
怎么回事

28:56.760 --> 28:57.760
可以了

28:57.760 --> 28:58.760
可以了

28:58.760 --> 28:59.760
刚才是不是

28:59.760 --> 29:00.760
就是因为这儿写错了

29:00.760 --> 29:01.760
可能刚才

29:01.760 --> 29:02.760
就是因为这儿写错了

29:02.760 --> 29:04.760
现在是不是就可以了

29:04.760 --> 29:05.760
对吧

29:05.760 --> 29:06.760
这边的话聚焦了

29:06.760 --> 29:07.760
这边也打印出什么

29:07.760 --> 29:08.760
说打印出

29:08.760 --> 29:09.760
这个植株键的方法

29:09.760 --> 29:10.760
而且你通过这儿

29:10.760 --> 29:11.760
也可以看得到

29:11.760 --> 29:12.760
对不对

29:12.760 --> 29:13.760
现在的话

29:13.760 --> 29:14.760
是不是就关联了

29:14.760 --> 29:15.760
对应的动模元素

29:15.760 --> 29:16.760
以及什么

29:16.760 --> 29:18.760
以及对应的植株键

29:18.760 --> 29:19.760
看到没有

29:19.760 --> 29:20.760
这个就是回调的

29:20.760 --> 29:21.760
这种方式

29:21.760 --> 29:23.760
这个是在16.3之前

29:23.760 --> 29:24.760
它没有提供

29:24.760 --> 29:26.760
CreatRefAPI的时候

29:26.760 --> 29:27.760
你可以通过

29:27.760 --> 29:28.760
回调的方式

29:28.760 --> 29:29.760
但是现在

29:29.760 --> 29:30.760
它提供了

29:30.760 --> 29:31.760
CreatRefAPI了

29:31.760 --> 29:33.760
那肯定就用什么

29:33.760 --> 29:35.760
就用这个

29:35.760 --> 29:36.760
就用这个

29:36.760 --> 29:37.760
对不对

29:37.760 --> 29:38.760
肯定就是用它

29:40.760 --> 29:41.760
好

29:41.760 --> 29:43.760
这是关于这个CreatRef

29:43.760 --> 29:44.760
但这边的话

29:44.760 --> 29:45.760
可能就是大家

29:45.760 --> 29:46.760
可能会觉得很奇怪

29:46.760 --> 29:48.760
就是你有没有发现

29:48.760 --> 29:49.760
我们上面举的例子

29:49.760 --> 29:50.760
全是什么

29:50.760 --> 29:51.760
这全是类组件

29:51.760 --> 29:53.760
按道理来讲的话

29:53.760 --> 29:54.760
我们这边

29:54.760 --> 29:55.760
现在的话

29:55.760 --> 29:56.760
是不是都是这个

29:56.760 --> 29:57.760
函数组件

29:57.760 --> 29:58.760
占大流了

29:58.760 --> 29:59.760
对不对

29:59.760 --> 30:00.760
首先第一个就是什么

30:00.760 --> 30:01.760
第一个就是

30:01.760 --> 30:02.760
你看这边

30:02.760 --> 30:03.760
它全是用的什么

30:03.760 --> 30:04.760
是不是全是用的RES

30:04.760 --> 30:05.760
对不对

30:05.760 --> 30:06.760
全是用的RES

30:06.760 --> 30:07.760
所以这边

30:07.760 --> 30:09.760
它只能用这个类组件来举例

30:09.760 --> 30:10.760
还有就是什么

30:10.760 --> 30:11.760
还有就是你这个

30:11.760 --> 30:12.760
函数组件

30:12.760 --> 30:13.760
上面你是不能有

30:13.760 --> 30:14.760
这个Ref属性

30:14.760 --> 30:15.760
为什么呢

30:15.760 --> 30:17.760
因为它没有实力

30:17.760 --> 30:18.760
没有实力

30:18.760 --> 30:19.760
这个在官方这边

30:19.760 --> 30:21.760
它是有说明的

30:21.760 --> 30:24.760
这边你自己看一下

30:24.760 --> 30:26.760
给大家找一下

30:26.760 --> 30:27.760
就是回调

30:27.760 --> 30:28.760
16.3

30:28.760 --> 30:29.760
我看一下

30:29.760 --> 30:30.760
函数

30:30.760 --> 30:31.760
看到没有

30:31.760 --> 30:32.760
在这里

30:33.760 --> 30:34.760
这里

30:34.760 --> 30:35.760
默认情况下

30:35.760 --> 30:37.760
你不能在函数组件上

30:37.760 --> 30:39.760
使用这个Ref属性

30:39.760 --> 30:40.760
那因为什么呢

30:40.760 --> 30:41.760
因为它没有实力

30:41.760 --> 30:42.760
它就是个函数

30:42.760 --> 30:43.760
对不对

30:43.760 --> 30:44.760
函数

30:44.760 --> 30:45.760
再加上你这边调用的函数

30:45.760 --> 30:46.760
它给你返回一段

30:46.760 --> 30:47.760
这个GSX

30:47.760 --> 30:49.760
它是没有实力的

30:50.760 --> 30:51.760
没有实力对象的

30:51.760 --> 30:52.760
OK

30:52.760 --> 30:53.760
所以你不能使用

30:53.760 --> 30:54.760
但是你可以在什么呢

30:54.760 --> 30:56.760
你可以在函数内部

30:56.760 --> 30:57.760
也就是你这边的话

30:57.760 --> 30:59.760
你可以在这里面使用

30:59.760 --> 31:00.760
这里面是什么

31:00.760 --> 31:01.760
是不是GSX

31:01.760 --> 31:02.760
对不对

31:02.760 --> 31:04.760
GSX里面你这边可以使用Ref

31:04.760 --> 31:05.760
Ref然后回头的话

31:05.760 --> 31:06.760
它这边关联到什么

31:06.760 --> 31:08.760
关联到动物对象

31:08.760 --> 31:09.760
对不对

31:09.760 --> 31:11.760
但是你不能像这样子用

31:11.760 --> 31:12.760
这边的话

31:12.760 --> 31:13.760
你这边这个敲的抗拇

31:13.760 --> 31:14.760
如果这个敲的抗拇

31:14.760 --> 31:15.760
它是一个

31:15.760 --> 31:18.760
如果是一个函数组件的话

31:18.760 --> 31:20.760
那你这边就不能这样子用

31:20.760 --> 31:21.760
这样子用的话

31:21.760 --> 31:22.760
它这边是拿不到

31:22.760 --> 31:23.760
实力的

31:23.760 --> 31:24.760
没有没有

31:24.760 --> 31:25.760
OK

31:26.760 --> 31:27.760
好

31:27.760 --> 31:29.760
这是关于这个QR

31:29.760 --> 31:30.760
好

31:30.760 --> 31:31.760
那接下来的话

31:31.760 --> 31:32.760
咱们要说一下

31:32.760 --> 31:33.760
关于这个Ref转发

31:33.760 --> 31:35.760
咱们把整个这个Ref

31:35.760 --> 31:36.760
这个知识点

31:36.760 --> 31:37.760
咱们把它讲完

31:37.760 --> 31:39.760
看一下什么是这个Ref转发

31:39.760 --> 31:40.760
Ref转发

31:40.760 --> 31:43.760
它是一个可选特性

31:43.760 --> 31:45.760
允许某些组件

31:45.760 --> 31:46.760
接收Ref

31:46.760 --> 31:49.760
并将其向下传递

31:49.760 --> 31:51.760
给这个指主键

31:51.760 --> 31:52.760
或者叫做

31:52.760 --> 31:54.760
转发给这个指主键

31:54.760 --> 31:55.760
什么意思

31:55.760 --> 31:56.760
感觉有点绕

31:56.760 --> 31:57.760
对不对

31:57.760 --> 31:59.760
一会我们写个例子你就明白了

31:59.760 --> 32:00.760
写个例子就明白了

32:00.760 --> 32:01.760
我们来看一下

32:01.760 --> 32:03.760
什么时候需要使用这个Ref转发

32:03.760 --> 32:04.760
往往就是什么

32:04.760 --> 32:06.760
往往就是高接主键的时候

32:06.760 --> 32:08.760
来我们这边来看个例子

32:08.760 --> 32:10.760
我这边其实已经写了个例子了

32:10.760 --> 32:11.760
咱们把这个例子

32:11.760 --> 32:12.760
咱们把它看一下

32:12.760 --> 32:13.760
好

32:13.760 --> 32:17.710
回到我们这边这个代码

32:17.710 --> 32:18.710
好

32:18.710 --> 32:20.710
这边让我先创建一个高接主键

32:20.710 --> 32:21.710
好

32:21.710 --> 32:23.710
这边新建一个文件叫做HOC

32:23.710 --> 32:24.710
好

32:24.710 --> 32:26.710
我们之前使用过的

32:26.710 --> 32:30.020
这个叫做VaseNog

32:30.020 --> 32:31.020
OK

32:31.020 --> 32:32.020
好

32:32.020 --> 32:34.020
这边我就直接把高接主键拿过来了

32:34.020 --> 32:37.020
高接主键在这个位置

32:37.020 --> 32:39.020
这把拿过来

32:39.020 --> 32:40.020
还记得吧

32:40.020 --> 32:43.020
这个高接主键也就上级可采奖的

32:43.020 --> 32:44.020
对吧

32:44.020 --> 32:45.020
这边那是什么

32:45.020 --> 32:46.020
接收一个主键

32:46.020 --> 32:47.020
返回一个什么

32:47.020 --> 32:49.020
返回一个新主键

32:49.020 --> 32:50.020
对不对

32:50.020 --> 32:51.020
返回一个新主键

32:51.020 --> 32:52.020
好

32:52.020 --> 32:54.020
这边我用的是内主键

32:55.020 --> 32:56.020
添加

32:56.020 --> 33:00.020
就是你这个主键创建的时候

33:00.020 --> 33:02.020
这边就是打一个日子

33:02.020 --> 33:04.020
主键已经创建

33:04.020 --> 33:05.020
看这边得用

33:05.020 --> 33:06.020
这边有

33:06.020 --> 33:07.020
这边有

33:07.020 --> 33:09.020
这个主键已经创建

33:09.020 --> 33:10.020
销毁的时候

33:10.020 --> 33:11.020
这边是什么

33:11.020 --> 33:12.020
主键已经销毁

33:12.020 --> 33:13.020
我们先来看一下

33:13.020 --> 33:14.020
先来看一下

33:14.020 --> 33:15.020
好

33:15.020 --> 33:16.020
我们这边的话

33:16.020 --> 33:17.020
这个撬的

33:17.020 --> 33:18.020
对吧

33:18.020 --> 33:19.020
撬的完了之后

33:19.020 --> 33:20.020
再加我们这边

33:20.020 --> 33:21.020
把它包一下

33:21.020 --> 33:22.020
Const

33:22.020 --> 33:23.020
New Child

33:24.020 --> 33:25.020
等于一个什么呢

33:25.020 --> 33:26.020
等于一个

33:26.020 --> 33:27.020
这边要把那个引一下

33:27.020 --> 33:29.020
这边Import

33:31.020 --> 33:32.020
Import

33:32.020 --> 33:33.020
这个Waste

33:34.020 --> 33:36.020
WasteNog

33:37.020 --> 33:38.020
Front

33:38.020 --> 33:40.020
当前目录下面的Hoc

33:40.020 --> 33:42.020
下面的WasteNog

33:43.020 --> 33:44.020
好

33:44.020 --> 33:45.020
这边WasteNog

33:46.020 --> 33:47.020
WasteNog

33:47.020 --> 33:48.020
把这个Child

33:49.020 --> 33:50.020
ChildComp

33:50.020 --> 33:51.020
放进去

33:51.020 --> 33:52.020
放进去之后

33:52.020 --> 33:53.020
然后加这边

33:54.020 --> 33:56.020
这边咱们就是

33:56.020 --> 33:58.020
这个新的这个主键

33:58.020 --> 33:59.020
对吧

33:59.020 --> 34:00.020
好

34:00.020 --> 34:01.020
这边我们就做一个

34:01.020 --> 34:03.020
做一个显影的操作

34:04.020 --> 34:05.020
按钮放上面

34:06.020 --> 34:08.020
这边就是显示

34:09.020 --> 34:10.020
显示

34:10.020 --> 34:12.020
然后隐藏

34:12.020 --> 34:15.460
隐藏

34:15.460 --> 34:16.460
OK

34:16.460 --> 34:17.460
然后加这边

34:17.460 --> 34:18.460
这边的话

34:18.460 --> 34:19.460
我们需要有一个状态

34:19.460 --> 34:20.460
对吧

34:20.460 --> 34:21.460
我们先把这个Ref

34:21.460 --> 34:22.460
先不说

34:22.460 --> 34:23.460
不说他要做什么事情

34:23.460 --> 34:25.460
咱们这边先

34:25.460 --> 34:27.460
把那个最基本的结构先写出来

34:27.460 --> 34:29.460
Ref.Stats

34:29.460 --> 34:31.460
等于一个

34:31.460 --> 34:32.460
这边这个Show

34:32.460 --> 34:33.460
对应的是什么呢

34:33.460 --> 34:35.460
对应的是这个View

34:35.460 --> 34:36.460
OK

34:36.460 --> 34:37.460
好

34:37.460 --> 34:38.460
然后接下来我们这边这个主键

34:38.460 --> 34:39.460
这个主键的这个显示

34:39.460 --> 34:40.460
取决于什么呢

34:40.460 --> 34:43.460
取决于你这个Ref.Stats.Show

34:43.460 --> 34:44.460
取决于这个

34:44.460 --> 34:45.460
这个他如果是

34:45.460 --> 34:46.460
这个真的话

34:46.460 --> 34:48.460
我们这个主键显示出来

34:48.460 --> 34:49.460
否则就是

34:49.460 --> 34:50.460
什么

34:51.460 --> 34:52.460
对吧

34:52.460 --> 34:53.460
好然后这边

34:55.460 --> 34:56.460
这边

34:56.460 --> 34:57.460
要做的事情就很简单

34:57.460 --> 34:58.460
这边其实没有必要写

34:58.460 --> 34:59.460
这个

35:01.460 --> 35:03.460
这边直接在这写了就可以了

35:03.460 --> 35:04.460
对吧

35:04.460 --> 35:06.460
在这写了

35:06.460 --> 35:07.460
这边

35:07.460 --> 35:08.460
这边就是

35:12.460 --> 35:14.460
在这边给个新对象

35:14.460 --> 35:15.460
这边是这个

35:15.460 --> 35:16.460
Show

35:16.460 --> 35:17.460
Show对应的是这个

35:21.460 --> 35:22.460
Stats

35:22.460 --> 35:23.460
点这个Show

35:23.460 --> 35:25.460
然后取一个反

35:25.460 --> 35:26.460
对不对

35:26.460 --> 35:27.460
OK

35:27.460 --> 35:31.740
好来我们这边来看一下

35:31.740 --> 35:32.740
刷新一下

35:32.740 --> 35:34.740
这边主键已经创建

35:34.740 --> 35:35.740
我们把它隐藏

35:35.740 --> 35:36.740
隐藏之后

35:36.740 --> 35:37.740
主键是不是已经销毁了

35:37.740 --> 35:38.740
对吧

35:38.740 --> 35:39.740
这个其实就是之前写的

35:39.740 --> 35:41.740
之前写的一个高階主键

35:41.740 --> 35:42.740
OK

35:42.740 --> 35:43.740
好那现在的话

35:43.740 --> 35:45.740
我们这边会遇到一个问题

35:45.740 --> 35:46.740
什么问题呢

35:46.740 --> 35:47.740
现在的话

35:47.740 --> 35:48.740
我们想要触发

35:48.740 --> 35:50.740
这个直主键的这个方法

35:50.740 --> 35:51.740
比如说我这边

35:51.740 --> 35:52.740
还有个按钮

35:53.740 --> 35:54.740
Button

35:54.740 --> 35:56.740
触发

35:56.740 --> 35:57.740
直主键

35:57.740 --> 36:01.050
直主键的这个方法

36:01.050 --> 36:02.050
OK

36:02.050 --> 36:04.050
好那在这边

36:04.050 --> 36:06.050
click

36:06.050 --> 36:07.050
这边

36:07.050 --> 36:09.050
这边是unclick

36:10.050 --> 36:11.050
unclick

36:13.550 --> 36:14.550
这边

36:14.550 --> 36:16.550
this

36:16.550 --> 36:18.550
点click handle

36:18.550 --> 36:21.310
好这里

36:21.310 --> 36:23.310
click handle

36:23.310 --> 36:25.690
OK

36:25.690 --> 36:26.690
好那在这边的话

36:26.690 --> 36:27.690
我们要创建一个什么

36:27.690 --> 36:29.690
创建一个ref

36:29.690 --> 36:30.690
对吧

36:30.690 --> 36:32.690
我们这边this.comref

36:32.690 --> 36:34.690
等于一个

36:34.690 --> 36:37.690
rect.createref

36:37.690 --> 36:38.690
对吧

36:38.690 --> 36:39.690
我们按照之前的方式

36:39.690 --> 36:41.690
首先这边创建一个ref

36:41.690 --> 36:42.690
创建一个ref之后

36:42.690 --> 36:43.690
然后接下来的话

36:43.690 --> 36:44.690
这边

36:44.690 --> 36:45.690
this.comref

36:45.690 --> 36:46.690
和谁进行绑定

36:46.690 --> 36:48.690
是不是和他进行绑定

36:48.690 --> 36:49.690
对吧

36:49.690 --> 36:50.690
这边这个ref

36:50.690 --> 36:51.690
等于一个

36:51.690 --> 36:53.690
这个this.comref

36:53.690 --> 36:54.690
好

36:54.690 --> 36:55.690
然后接下来的话

36:55.690 --> 36:56.690
你这边你来看一下

36:56.690 --> 36:57.690
这边的话

36:57.690 --> 36:59.690
你这个this.comref

36:59.690 --> 37:00.690
拿到的是谁

37:00.690 --> 37:02.690
也就是你还能不能通过

37:02.690 --> 37:04.690
之前的那种形式

37:04.690 --> 37:05.690
这边

37:06.690 --> 37:07.690
这个current

37:07.690 --> 37:08.690
对吧

37:08.690 --> 37:09.690
能不能通过之前的那种形式

37:09.690 --> 37:11.690
这边就直接调用什么呢

37:11.690 --> 37:12.690
直接调用这个

37:13.690 --> 37:14.690
test

37:14.690 --> 37:16.690
你看一下行不行

37:16.690 --> 37:17.690
OK

37:17.690 --> 37:18.690
那我们这边保存

37:18.690 --> 37:19.690
保存之后

37:19.690 --> 37:20.690
让一下这边

37:20.690 --> 37:22.690
首先这个高级主键是OK的

37:22.690 --> 37:23.690
对吧

37:23.690 --> 37:24.690
好

37:24.690 --> 37:25.690
然后在这边

37:25.690 --> 37:26.690
我们触发直主键方法

37:26.690 --> 37:27.690
你看

37:27.690 --> 37:29.690
这边它就爆错了

37:29.690 --> 37:30.690
爆到什么错

37:30.690 --> 37:33.690
this.comref.current

37:33.690 --> 37:34.690
点test

37:34.690 --> 37:36.690
is not a function

37:36.690 --> 37:37.690
OK

37:37.690 --> 37:38.690
你可以看到这边current

37:38.690 --> 37:39.690
它对应的有没有值呢

37:39.690 --> 37:40.690
有值

37:40.690 --> 37:41.690
对吧

37:41.690 --> 37:43.690
这边对应的是一个component

37:43.690 --> 37:44.690
好

37:44.690 --> 37:45.690
你看一下这个component

37:45.690 --> 37:47.690
这个component

37:47.690 --> 37:48.690
这个component

37:48.690 --> 37:51.690
这边怎么会有个set

37:51.690 --> 37:52.690
这是我之前写的

37:52.690 --> 37:54.690
之前在那个

37:54.690 --> 37:55.690
之前写的

37:55.690 --> 37:57.690
这边的this.set

37:57.690 --> 37:59.690
这边设置了一个n等于1

37:59.690 --> 38:00.690
OK

38:00.690 --> 38:02.690
那这边它是不是也就证明了什么

38:02.690 --> 38:04.690
证明了它这边拿到的这个current

38:04.690 --> 38:06.690
拿到的是谁

38:06.690 --> 38:08.690
是不是拿到的是你整个这个主键

38:10.690 --> 38:11.690
是不是这个新主键

38:11.690 --> 38:12.690
对不对

38:12.690 --> 38:13.690
你默认的话

38:13.690 --> 38:15.690
你这边返回的是不是就是新主键

38:15.690 --> 38:16.690
对不对

38:16.690 --> 38:17.690
你想一想

38:17.690 --> 38:18.690
你讲道理吗

38:18.690 --> 38:20.690
对吧你返回的是这个新主键

38:20.690 --> 38:21.690
返回的是新主键

38:21.690 --> 38:23.690
然后接下来你这边的话

38:23.690 --> 38:25.690
这边这个newchow的

38:25.690 --> 38:27.690
newchow的是不是就相当于是

38:27.690 --> 38:28.690
这个主键吗

38:28.690 --> 38:29.690
对不对

38:29.690 --> 38:30.690
那我这个ref

38:30.690 --> 38:31.690
我这边ref

38:31.690 --> 38:32.690
是不是自然而然

38:32.690 --> 38:34.690
就应该关联上谁

38:34.690 --> 38:36.690
是不是就应该关联上他呀

38:36.690 --> 38:38.690
其实人家是没有问题的

38:38.690 --> 38:39.690
对不对

38:39.690 --> 38:40.690
人家是没有问题的

38:40.690 --> 38:42.690
但是我们想不想这样子

38:42.690 --> 38:44.690
我们是不是不想啊

38:44.690 --> 38:45.690
对不对

38:45.690 --> 38:48.690
我们想要让这个ref关联上谁

38:48.690 --> 38:49.690
关联上谁

38:49.690 --> 38:51.690
这关联上这个就是你传进来的

38:51.690 --> 38:53.690
就是你原本的这个

38:53.690 --> 38:56.690
原本的这个chow的com

38:56.690 --> 38:57.690
对不对

38:57.690 --> 38:58.690
我们想让他关联上他

38:58.690 --> 39:00.690
说一说我们这边的话

39:00.690 --> 39:01.690
要进行一个转发

39:01.690 --> 39:02.690
也就这边

39:02.690 --> 39:03.690
这边你收到ref之后

39:03.690 --> 39:05.690
再将我继续转发转发给他

39:05.690 --> 39:06.690
最终让什么呢

39:06.690 --> 39:08.690
最终让你这个app的这个ref

39:08.690 --> 39:09.690
关联上他

39:09.690 --> 39:12.690
这个就叫做ref转发

39:12.690 --> 39:13.690
明白没有

39:13.690 --> 39:14.690
首先的话

39:14.690 --> 39:16.690
把这个概念先搞懂

39:16.690 --> 39:18.690
什么叫做ref转发

39:18.690 --> 39:20.690
为什么要ref转发

39:20.690 --> 39:21.690
什么样的场景下

39:21.690 --> 39:23.690
我们需要ref转发

39:23.690 --> 39:25.690
先把这个搞清楚

39:25.690 --> 39:27.690
好搞清楚之后

39:27.690 --> 39:28.690
然后接下来

39:28.690 --> 39:29.690
我们就来看一下

39:29.690 --> 39:32.690
具体如何来实现这个ref转发

39:32.690 --> 39:33.690
这边呢

39:33.690 --> 39:35.690
其实官方给我们

39:35.690 --> 39:37.690
给了我们一个app

39:37.690 --> 39:39.690
来看一下

39:39.690 --> 39:41.690
这是刚才讲的

39:41.690 --> 39:42.690
我们直接看这

39:42.690 --> 39:43.690
官方的话

39:43.690 --> 39:44.690
实际上

39:44.690 --> 39:46.690
就实际上已经为我们提供了一个app

39:46.690 --> 39:47.690
叫做什么呢

39:47.690 --> 39:49.690
叫做rex

39:49.690 --> 39:51.690
forwardref

39:51.690 --> 39:53.690
forwardref api

39:53.690 --> 39:54.690
这个就是干嘛呢

39:54.690 --> 39:56.690
这个就是可以允许你把这个ref

39:56.690 --> 39:59.690
向下传递给这个指主键

39:59.690 --> 40:01.690
好来我们这边来看一下

40:01.690 --> 40:02.690
怎么用

40:02.690 --> 40:03.690
我们这边要修改

40:03.690 --> 40:04.690
其实很简单

40:04.690 --> 40:06.690
你那个就是副主键和指主键

40:06.690 --> 40:07.690
你都不需要改

40:07.690 --> 40:08.690
你要改的仅仅是什么

40:08.690 --> 40:10.690
仅仅是这个高階主键

40:10.690 --> 40:12.690
把这个高階主键把它改一下

40:12.690 --> 40:14.690
回到我们的代码

40:14.690 --> 40:16.690
回到我们这个高階主键

40:17.690 --> 40:19.690
这个高階主键怎么改呢

40:19.690 --> 40:21.690
我们这边一点点来捋

40:21.690 --> 40:22.690
首先你看这边

40:22.690 --> 40:24.690
我们说过高階主键的话

40:24.690 --> 40:26.690
最终你要返回一个什么

40:26.690 --> 40:29.690
所以要返回一个新的主键

40:29.690 --> 40:30.690
对不对

40:30.690 --> 40:31.690
要返回一个新的主键

40:31.690 --> 40:32.690
我们返回的是谁

40:32.690 --> 40:33.690
是不是返回的是这边

40:33.690 --> 40:34.690
class

40:34.690 --> 40:35.690
exchange component

40:35.690 --> 40:36.690
对吧

40:36.690 --> 40:38.690
好那这样我们给这个返回的这个主键

40:38.690 --> 40:39.690
我们给它取个名字

40:39.690 --> 40:40.690
这边叫做什么呢

40:40.690 --> 40:42.690
这边叫做with

40:42.690 --> 40:43.690
nog

40:43.690 --> 40:44.690
come

40:44.690 --> 40:45.690
可不可以

40:45.690 --> 40:46.690
没问题吧

40:46.690 --> 40:47.690
对吧

40:47.690 --> 40:48.690
我只不过就是

40:48.690 --> 40:49.690
之前的话这边没有名字

40:49.690 --> 40:50.690
我这边给了

40:50.690 --> 40:51.690
这个内

40:51.690 --> 40:52.690
就是这个内主键

40:52.690 --> 40:53.690
给了一个名字

40:53.690 --> 40:54.690
ok

40:54.690 --> 40:55.690
好然后接下来

40:55.690 --> 40:56.690
我们这边继续来改

40:56.690 --> 40:57.690
好那接下来的话

40:57.690 --> 40:58.690
我这边是不是

40:58.690 --> 40:59.690
就可以改成这个样子

40:59.690 --> 41:00.690
return

41:00.690 --> 41:03.690
withnog come

41:03.690 --> 41:04.690
ok

41:04.690 --> 41:05.690
这也是一样的

41:05.690 --> 41:06.690
对不对

41:06.690 --> 41:07.690
基本上是没有变化的

41:07.690 --> 41:08.690
好

41:08.690 --> 41:10.690
然后接下来下一步

41:10.690 --> 41:12.690
你现在返回的是不是

41:12.690 --> 41:13.690
这个主键

41:13.690 --> 41:14.690
这边的话

41:15.690 --> 41:16.690
这样子

41:16.690 --> 41:17.690
你现在呢

41:17.690 --> 41:18.690
返回的是不是这个主键

41:18.690 --> 41:19.690
对

41:19.690 --> 41:20.690
返回这个主键之前

41:20.690 --> 41:21.690
然后接下来我

41:21.690 --> 41:24.690
这边我外面给你包一层

41:24.690 --> 41:26.690
这边return

41:26.690 --> 41:27.690
return什么呢

41:27.690 --> 41:32.690
react.forwardRef

41:32.690 --> 41:33.690
ok

41:33.690 --> 41:34.690
return

41:34.690 --> 41:36.690
react.forwardRef

41:36.690 --> 41:37.690
它仍然是一个什么

41:37.690 --> 41:39.690
仍然是一个静态方法

41:39.690 --> 41:41.690
这边我们可以再观望

41:41.690 --> 41:43.690
这边可以看得到

41:44.690 --> 41:45.690
这里

41:45.690 --> 41:46.690
对吧

41:46.690 --> 41:47.690
它仍然是一个静态方法

41:47.690 --> 41:48.690
好我们来看一下

41:48.690 --> 41:49.690
它会干嘛

41:49.690 --> 41:53.690
它会创建一个react主键

41:53.690 --> 41:54.690
ok

41:54.690 --> 41:55.690
也就是最后

41:55.690 --> 41:56.690
最终我这个代码

41:56.690 --> 41:57.690
我是什么

41:57.690 --> 41:58.690
我是会返回一个主键

41:58.690 --> 42:00.690
那最终我要返回

42:00.690 --> 42:01.690
给外界的就是什么

42:01.690 --> 42:03.690
就是他所返回的这个主键

42:03.690 --> 42:05.690
而不再是他了

42:05.690 --> 42:07.690
我们之前正常情况下

42:07.690 --> 42:08.690
我们返回给外界的主键

42:08.690 --> 42:09.690
是谁

42:09.690 --> 42:10.690
是不是他是谁

42:10.690 --> 42:12.690
他是不就是这个class

42:12.690 --> 42:13.690
对不对

42:13.690 --> 42:15.690
之前我们的逻辑是这样子

42:15.690 --> 42:16.690
但现在我们就干嘛呢

42:16.690 --> 42:18.690
现在我们就是return

42:18.690 --> 42:21.690
react.forwardRef

42:21.690 --> 42:23.690
因为它会返回一个主键

42:23.690 --> 42:24.690
对吧

42:24.690 --> 42:26.690
最终返回给外部的就是这个主键

42:26.690 --> 42:27.690
好

42:27.690 --> 42:29.690
这个它里面接收什么呢

42:29.690 --> 42:30.690
我们来看一下

42:30.690 --> 42:34.690
它里面接收一个回调函数

42:34.690 --> 42:35.690
看到没有

42:35.690 --> 42:37.690
接收一个回调函数

42:37.690 --> 42:38.690
所以这边

42:38.690 --> 42:41.690
它里面接收的是一个回调函数

42:42.690 --> 42:43.690
OK

42:43.690 --> 42:44.690
这边react

42:44.690 --> 42:46.690
我们这边解了够的

42:46.690 --> 42:49.690
这边我们把这个引一下吧

42:49.690 --> 42:51.690
这边的话或者叫做

42:51.690 --> 42:52.690
我看一下

42:52.690 --> 42:56.690
这边我们就改成react吧

42:56.690 --> 42:58.690
改成react

42:58.690 --> 42:59.690
改成react

42:59.690 --> 43:01.690
它叫你这边要改一下

43:01.690 --> 43:02.690
OK

43:02.690 --> 43:03.690
这样就OK了

43:03.690 --> 43:04.690
好

43:04.690 --> 43:05.690
然后这边这个回调函数

43:05.690 --> 43:06.690
这个回调函数

43:06.690 --> 43:07.690
这边就有两个属性

43:07.690 --> 43:08.690
一个是什么呢

43:08.690 --> 43:09.690
一个是props

43:09.690 --> 43:10.690
一个是什么呢

43:10.690 --> 43:11.690
一个是ref

43:11.690 --> 43:13.690
一个是props

43:13.690 --> 43:15.690
一个是ref

43:15.690 --> 43:16.690
好

43:16.690 --> 43:18.690
那你猜的猜的到这个props是什么

43:18.690 --> 43:20.690
props是不是就是上一层

43:20.690 --> 43:21.690
对不对

43:21.690 --> 43:24.690
上一层传递进来的这个属性

43:24.690 --> 43:33.690
props就是上一层传递进来的属性

43:33.690 --> 43:34.690
好

43:34.690 --> 43:35.690
那这个ref

43:35.690 --> 43:37.690
ref自然而言是什么

43:37.690 --> 43:38.690
就是什么

43:38.690 --> 43:44.690
上一层传递进来的这个ref

43:44.690 --> 43:46.690
也就是说是谁呀

43:46.690 --> 43:48.690
也就是说是谁

43:48.690 --> 43:50.690
是不是就是在哪

43:50.690 --> 43:52.690
是不是就是他呀

43:52.690 --> 43:53.690
是不是就是他

43:53.690 --> 43:54.690
对不对

43:54.690 --> 43:55.690
props是什么

43:55.690 --> 43:56.690
props就是我这边

43:56.690 --> 43:58.690
我这边比如还有什么属性之类的

43:58.690 --> 43:59.690
对吧

43:59.690 --> 44:00.690
我这边如果还有什么属性的

44:00.690 --> 44:02.690
props就可以拿到这个属性

44:02.690 --> 44:04.690
ref的话就是什么

44:04.690 --> 44:05.690
ref的话就是你这边

44:05.690 --> 44:07.690
传递的这个ref

44:07.690 --> 44:08.690
ok

44:08.690 --> 44:09.690
这两个东西就可以拿得到

44:09.690 --> 44:10.690
好

44:10.690 --> 44:11.690
这两个东西拿得到之后

44:11.690 --> 44:13.690
然后接下来我这边在干嘛呢

44:13.690 --> 44:16.690
我这边的话再来

44:16.690 --> 44:17.690
啊

44:17.690 --> 44:18.690
这边最终给你返回什么

44:18.690 --> 44:20.690
是返回这个

44:20.690 --> 44:21.690
对不对

44:21.690 --> 44:23.690
返回这个wysnogcom

44:23.690 --> 44:24.690
好

44:24.690 --> 44:25.690
这边的话就是什么

44:25.690 --> 44:27.690
这边就是把这个props

44:27.690 --> 44:29.690
把它展开

44:29.690 --> 44:30.690
ok

44:30.690 --> 44:31.690
也就是props让我原封不动的

44:31.690 --> 44:33.690
我这边往下穿

44:33.690 --> 44:34.690
好

44:34.690 --> 44:35.690
人家这边ref

44:35.690 --> 44:36.690
ref的话我也干嘛

44:36.690 --> 44:38.690
也往下穿

44:38.690 --> 44:39.690
对不对

44:39.690 --> 44:40.690
我也往下穿

44:40.690 --> 44:42.690
那这边我就给个字

44:42.690 --> 44:44.690
这个名字你随便取

44:44.690 --> 44:46.690
我这边就叫做forward

44:46.690 --> 44:48.690
forwardref

44:48.690 --> 44:49.690
ok

44:49.690 --> 44:50.690
名字你自己随便去

44:50.690 --> 44:51.690
等于什么

44:51.690 --> 44:54.690
等于你传下来的这个ref

44:54.690 --> 44:55.690
ok

44:55.690 --> 44:57.690
等于你传下来的ref

44:57.690 --> 44:58.690
好

44:58.690 --> 45:00.690
然后回头在这里

45:00.690 --> 45:01.690
在这边

45:01.690 --> 45:02.690
扔点这边

45:02.690 --> 45:03.690
扔点这边的话

45:03.690 --> 45:04.690
我们就可以通过什么呢

45:04.690 --> 45:07.690
我们就可以通过wys.props

45:07.690 --> 45:09.690
我们就可以拿到什么呢

45:09.690 --> 45:11.690
可以拿到你这边

45:11.690 --> 45:13.690
所有的东西

45:13.690 --> 45:14.690
看到没有

45:14.690 --> 45:16.690
拿到你所有的东西

45:16.690 --> 45:17.690
拿到你所有的东西之后

45:17.690 --> 45:19.690
然后接下来我再把这个ref

45:19.690 --> 45:20.690
挂在哪上面

45:20.690 --> 45:22.690
挂在这个com上面

45:22.690 --> 45:23.690
是不是就ok了

45:23.690 --> 45:24.690
对不对

45:24.690 --> 45:26.690
我再挂在这个指主键

45:26.690 --> 45:27.690
就真真真正正

45:27.690 --> 45:28.690
你要挂在这个指主键的地方

45:28.690 --> 45:29.690
我再挂在这上面

45:29.690 --> 45:30.690
就ok了

45:30.690 --> 45:32.690
所以说我们这边就可以

45:32.690 --> 45:35.690
这边我们const

45:37.690 --> 45:38.690
这边一个是什么呢

45:38.690 --> 45:41.690
一个是forwardref

45:41.690 --> 45:42.690
ok

45:42.690 --> 45:43.690
另外一个

45:43.690 --> 45:44.690
另外一个是点点点

45:44.690 --> 45:45.690
rest

45:45.690 --> 45:47.690
就是他其他的props

45:47.690 --> 45:48.690
对不对

45:48.690 --> 45:49.690
把拿到

45:49.690 --> 45:50.690
拿到之后

45:50.690 --> 45:51.690
然后接下来

45:51.690 --> 45:52.690
这边ref

45:52.690 --> 45:53.690
你看我这边

45:53.690 --> 45:55.690
我就真真正的把ref挂在哪上面

45:55.690 --> 45:57.690
挂在这个forward

45:57.690 --> 45:58.690
就我这边

45:58.690 --> 46:00.690
就把ref挂在哪上面

46:00.690 --> 46:01.690
挂在这个com上面

46:01.690 --> 46:02.690
对不对

46:02.690 --> 46:04.690
这边就应该是等于是吗

46:04.690 --> 46:07.690
ref等于forwardref

46:07.690 --> 46:08.690
对吧

46:08.690 --> 46:09.690
好

46:09.690 --> 46:10.690
这边这边

46:10.690 --> 46:11.690
他剩下的这些属性

46:11.690 --> 46:12.690
剩下的属性

46:12.690 --> 46:13.690
这边就是应该是点点点

46:13.690 --> 46:14.690
rest

46:14.690 --> 46:16.690
点点点rest

46:16.690 --> 46:17.690
ok

46:17.690 --> 46:18.690
好

46:18.690 --> 46:19.690
然后我们这边

46:19.690 --> 46:20.690
我们来看一下好不好使

46:20.690 --> 46:22.690
看一下好不好使

46:22.690 --> 46:23.690
好

46:23.690 --> 46:24.690
这边让我刷新一下

46:24.690 --> 46:25.690
ok

46:25.690 --> 46:26.690
好

46:26.690 --> 46:27.690
这个高级主键是没问题的

46:27.690 --> 46:28.690
是吧

46:28.690 --> 46:29.690
好

46:29.690 --> 46:30.690
这边

46:30.690 --> 46:31.690
说没问题

46:31.690 --> 46:33.690
这边是不是拿到了

46:33.690 --> 46:35.690
这个就是关联上的这个直主键

46:35.690 --> 46:36.690
就这个ref的话

46:36.690 --> 46:37.690
关联上的直主键

46:37.690 --> 46:40.690
调用了这个直主键的这个方法

46:40.690 --> 46:41.690
对吧

46:41.690 --> 46:43.690
这边没有热晕吧

46:43.690 --> 46:44.690
各位

46:44.690 --> 46:45.690
没问题吧

46:45.690 --> 46:46.690
其实很简单

46:46.690 --> 46:47.690
这边相当于就是什么

46:47.690 --> 46:48.690
相当于就是

46:48.690 --> 46:50.690
通过这个rekt.forwardref

46:50.690 --> 46:52.690
我可以拿到什么

46:52.690 --> 46:54.690
拿到你上一层的这个ref

46:54.690 --> 46:55.690
全部主要就是要谁

46:55.690 --> 46:57.690
主要就是要他

46:57.690 --> 46:58.690
对不对

46:58.690 --> 46:59.690
主要就是要他

46:59.690 --> 47:00.690
要他之后

47:00.690 --> 47:01.690
然后接下来的话

47:01.690 --> 47:03.690
我这边给你返回

47:03.690 --> 47:05.690
返回这个

47:05.690 --> 47:07.690
这个这个高级主键的时候

47:07.690 --> 47:09.690
我这边的话这个ref

47:09.690 --> 47:10.690
继续干嘛

47:10.690 --> 47:11.690
继续是不是往下传

47:11.690 --> 47:12.690
对不对

47:12.690 --> 47:13.690
继续往下传

47:13.690 --> 47:14.690
往下传了之后

47:14.690 --> 47:15.690
再加我把这个ref挂在哪里

47:15.690 --> 47:17.690
都挂在这个直主键上面

47:17.690 --> 47:18.690
对不对

47:18.690 --> 47:19.690
其实就两步

47:19.690 --> 47:20.690
就两步

47:20.690 --> 47:21.690
这边首先拿到

47:21.690 --> 47:22.690
通过这个回掉寒朔

47:22.690 --> 47:24.690
拿到你这个ref

47:24.690 --> 47:25.690
拿到了之后

47:25.690 --> 47:27.690
然后加这边继续往下传

47:27.690 --> 47:29.690
然后加这边这个抗补这边

47:29.690 --> 47:32.690
进行一个这个ref的一个绑定

47:32.690 --> 47:33.690
ok

47:33.690 --> 47:36.690
这就是关于这个ref的这个转发

47:36.690 --> 47:37.690
你这边的话

47:37.690 --> 47:39.690
你其实可以把这个视频暂停

47:39.690 --> 47:41.690
暂停了你自己把他敲一下

47:41.690 --> 47:43.690
敲一下你慢慢就知道

47:43.690 --> 47:44.690
为什么要

47:44.690 --> 47:47.690
就是要使用这个reactforwardref

47:47.690 --> 47:48.690
ok

47:48.690 --> 47:50.690
其实我在这个文档里面写了的

47:50.690 --> 47:52.690
在这里

47:52.690 --> 47:55.690
这个reactforwardref

47:55.690 --> 47:57.690
接收一个渲染寒树

47:57.690 --> 47:58.690
这个寒树的话

47:58.690 --> 47:59.690
他接收什么呢

47:59.690 --> 48:02.690
接收这个props和ref参数

48:02.690 --> 48:03.690
那返回什么呢

48:03.690 --> 48:04.690
返回我们

48:04.690 --> 48:06.690
就是我们的这个增强主键

48:06.690 --> 48:08.690
也就是我们的这个高阶主键

48:08.690 --> 48:09.690
对吧

48:09.690 --> 48:10.690
就返回这个主键

48:10.690 --> 48:11.690
返回的同时

48:11.690 --> 48:12.690
然后接下来

48:12.690 --> 48:13.690
这边的话

48:13.690 --> 48:15.690
然后还看了下他的原码

48:15.690 --> 48:17.690
他原码其实也没做什么

48:17.690 --> 48:18.690
他原码的话

48:18.690 --> 48:20.690
就是这边接收一个这个Render

48:20.690 --> 48:21.690
Render是什么

48:21.690 --> 48:22.690
Render的话

48:22.690 --> 48:24.690
是你这边传入的这个寒树

48:24.690 --> 48:25.690
对吧

48:25.690 --> 48:27.690
你传入了这个回调寒树

48:27.690 --> 48:28.690
接收一个Render

48:28.690 --> 48:29.690
接收一个Render之后

48:29.690 --> 48:31.690
接下来他这边返回这个

48:31.690 --> 48:32.690
ElementType

48:32.690 --> 48:33.690
返回的是一个对象

48:33.690 --> 48:35.690
对象里面有个Render方法

48:35.690 --> 48:37.690
Render方法大家这边对应的是什么

48:37.690 --> 48:38.690
对应的是你的这个Render

48:38.690 --> 48:40.690
ok

48:40.690 --> 48:41.690
好

48:41.690 --> 48:43.690
那为什么要这么多词一举

48:43.690 --> 48:45.690
其实就是因为你这个渲染寒树里面

48:45.690 --> 48:46.690
他会自动传入什么

48:46.690 --> 48:48.690
传入这个props和ref

48:48.690 --> 48:50.690
关键点就是在哪里

48:50.690 --> 48:51.690
就是在这个ref

48:51.690 --> 48:52.690
就这边

48:52.690 --> 48:53.690
我们可以通过这个回调寒树

48:53.690 --> 48:55.690
拿到这个ref

48:55.690 --> 48:56.690
拿到了之后

48:56.690 --> 48:58.690
人家这边继续往下传递

48:58.690 --> 48:59.690
对不对

48:59.690 --> 49:00.690
传递了之后

49:00.690 --> 49:01.690
人家这边Render的时候

49:01.690 --> 49:03.690
这边通过z点props

49:03.690 --> 49:04.690
我可以拿到这个ref

49:04.690 --> 49:05.690
对吧

49:05.690 --> 49:06.690
你这边绑的

49:06.690 --> 49:07.690
我可以拿到

49:07.690 --> 49:08.690
拿到之后

49:08.690 --> 49:09.690
我就可以绑在哪上面了

49:09.690 --> 49:11.690
这可以绑在这个

49:11.690 --> 49:12.690
植树间上面了

49:12.690 --> 49:13.690
对不对

49:13.690 --> 49:14.690
ok

49:14.690 --> 49:17.690
这是关于这个ref的这个转发

49:17.690 --> 49:19.690
我建议你先暂停

49:19.690 --> 49:21.690
暂停了你把这儿敲一下

49:21.690 --> 49:22.690
敲一下

49:22.690 --> 49:24.690
敲一下你慢慢就知道了

49:24.690 --> 49:26.690
ok

49:26.690 --> 49:27.690
好

49:27.690 --> 49:29.690
这是关于这个转发

49:29.690 --> 49:30.690
然后最后

49:30.690 --> 49:31.690
这就这节课

49:31.690 --> 49:32.690
最后一个

49:32.690 --> 49:33.690
最后一个

49:33.690 --> 49:35.690
最后一个是关于这个Userif

49:35.690 --> 49:38.690
和Userive Imperative Handle

49:38.690 --> 49:40.690
这两个

49:40.690 --> 49:41.690
这两个是hook

49:41.690 --> 49:42.690
是吧

49:42.690 --> 49:43.690
来我们这边

49:43.690 --> 49:46.130
我们来看一下

49:46.130 --> 49:47.130
这边的话

49:47.130 --> 49:49.130
我们首先来看这个Userif

49:49.130 --> 49:50.130
因为我们说过

49:50.130 --> 49:51.130
现在的话

49:51.130 --> 49:52.130
整个react

49:52.130 --> 49:54.130
是这个寒树组件

49:54.130 --> 49:55.130
对吧

49:55.130 --> 49:56.130
主要就是这个寒树组件

49:56.130 --> 49:57.130
说这边的话

49:57.130 --> 49:58.130
一般来讲的话

49:58.130 --> 49:59.130
这个寒树组件

49:59.130 --> 50:00.130
用的多一些

50:00.130 --> 50:01.130
那寒树组件里面

50:01.130 --> 50:02.130
然后这个

50:02.130 --> 50:04.130
首先我们刚说的寒树组件

50:04.130 --> 50:05.130
就是你这个

50:05.130 --> 50:07.130
内部的这个GSX这边

50:07.130 --> 50:08.130
这边能不能用ref

50:08.130 --> 50:09.130
这边是可以的

50:09.130 --> 50:11.130
我们刚说的这个寒树组件

50:11.130 --> 50:12.130
不能用ref是指什么

50:12.130 --> 50:14.130
是不能像这个样子

50:14.130 --> 50:16.130
不能像这边这个样子

50:16.130 --> 50:18.130
就你比如说你

50:18.130 --> 50:19.130
这个

50:19.130 --> 50:21.130
这个是返回的是吧

50:21.130 --> 50:22.130
这个Chow的

50:22.130 --> 50:23.130
这Chow的看不

50:23.130 --> 50:24.130
他是个寒树组件

50:24.130 --> 50:25.130
你ref直接去关联他

50:25.130 --> 50:26.130
这个是不行的

50:26.130 --> 50:27.130
对吧

50:27.130 --> 50:28.130
这个官网的话

50:28.130 --> 50:29.130
刚才也说过

50:29.130 --> 50:30.130
但是你寒树组件内部

50:30.130 --> 50:31.130
内部能不能关联呢

50:31.130 --> 50:33.130
内部是可以的

50:33.130 --> 50:34.130
OK

50:34.130 --> 50:35.130
就内部你的那个GSX

50:35.130 --> 50:36.130
是可以的

50:36.130 --> 50:37.130
OK

50:37.130 --> 50:38.130
好

50:38.130 --> 50:39.130
来我们这边

50:39.130 --> 50:40.130
我们来看一下

50:40.130 --> 50:43.130
我们这边一个寒树组件

50:43.130 --> 50:44.130
把这

50:44.130 --> 50:46.130
这个代码我就把它干嘛呢

50:46.130 --> 50:48.130
这个

50:48.130 --> 50:50.130
在笔记里面有

50:50.130 --> 50:51.130
你把它删了

50:51.130 --> 50:52.130
我直接写

50:52.130 --> 50:53.130
写后面的了

50:53.130 --> 50:54.130
笔记里面都有的

50:54.130 --> 50:55.130
好

50:55.130 --> 50:56.130
然后我这边

50:56.130 --> 50:58.130
我就把它改成一个寒树组件

50:58.130 --> 50:59.130
OK

50:59.130 --> 51:00.130
好

51:00.130 --> 51:01.130
寒树组件之后

51:01.130 --> 51:02.130
人家我们这边来写

51:02.130 --> 51:03.130
input

51:05.130 --> 51:06.130
我们写两个嘛

51:06.130 --> 51:07.130
写两个

51:07.130 --> 51:08.130
好

51:08.130 --> 51:09.130
然后加这边

51:09.130 --> 51:10.130
写一个这个button

51:10.130 --> 51:12.130
button的话是矩胶

51:13.130 --> 51:14.130
矩胶

51:15.130 --> 51:16.130
OK

51:16.130 --> 51:17.130
unclick

51:18.130 --> 51:19.130
等于一个

51:19.130 --> 51:22.890
click

51:22.890 --> 51:23.890
handle

51:24.890 --> 51:25.890
OK

51:25.890 --> 51:26.890
好

51:26.890 --> 51:27.890
这边

51:27.890 --> 51:28.890
function

51:28.890 --> 51:29.890
clickhandle

51:30.890 --> 51:33.890
先把这个最基本的结构写出来

51:33.890 --> 51:34.890
好

51:34.890 --> 51:35.890
然后接下来我们这边

51:35.890 --> 51:36.890
这边的话

51:36.890 --> 51:37.890
我们想要这个创建Ref

51:37.890 --> 51:38.890
创建Ref的话

51:38.890 --> 51:39.890
之前的那个

51:39.890 --> 51:40.890
createRef

51:40.890 --> 51:41.890
app能不能用

51:41.890 --> 51:42.890
可以用

51:42.890 --> 51:43.890
可以用的

51:43.890 --> 51:44.890
比我们这边来创建一个

51:44.890 --> 51:45.890
const

51:45.890 --> 51:46.890
一个inputRef

51:48.890 --> 51:49.890
ref1

51:49.890 --> 51:50.890
它是通过什么呢

51:50.890 --> 51:52.890
它是通过这个create

51:52.890 --> 51:53.890
react

51:53.890 --> 51:56.890
点这个createRef

51:56.890 --> 51:58.890
它是通过这个来创建的

51:58.890 --> 51:59.890
这个创建之后

51:59.890 --> 52:00.890
人家加这边

52:00.890 --> 52:02.890
你这边绑定一下

52:02.890 --> 52:04.890
Name id 这些我们就不要了

52:04.890 --> 52:05.890
好

52:05.890 --> 52:06.890
这边这个ref

52:06.890 --> 52:07.890
等于一个什么

52:07.890 --> 52:08.890
等于一个

52:08.890 --> 52:09.890
inputRef1

52:09.890 --> 52:10.890
对吧

52:10.890 --> 52:11.890
好

52:11.890 --> 52:12.890
这边我们点击

52:12.890 --> 52:13.890
我们让它聚焦

52:13.890 --> 52:14.890
我们来看一下行不行

52:14.890 --> 52:16.890
inputRef1

52:16.890 --> 52:17.890
点什么呢

52:17.890 --> 52:18.890
点current

52:18.890 --> 52:19.890
点fox

52:19.890 --> 52:22.330
对吧

52:22.330 --> 52:23.330
保存

52:23.330 --> 52:24.330
保存了之后

52:24.330 --> 52:25.330
人家这边来看一下

52:26.330 --> 52:27.330
走

52:27.330 --> 52:28.330
可不可以

52:28.330 --> 52:29.330
没问题

52:29.330 --> 52:30.330
对不对

52:30.330 --> 52:31.330
可以的

52:31.330 --> 52:32.330
好

52:32.330 --> 52:33.330
那接下来的话

52:33.330 --> 52:34.330
我这边

52:34.330 --> 52:35.330
它新提供了一个

52:35.330 --> 52:36.330
新提供了一个叫做

52:36.330 --> 52:37.330
useRef

52:37.330 --> 52:39.330
比如我们这边

52:39.330 --> 52:40.330
结构

52:40.330 --> 52:41.330
拿到这个useRef

52:41.330 --> 52:42.330
我们之前那个

52:42.330 --> 52:43.330
useState

52:43.330 --> 52:44.330
useEffect

52:44.330 --> 52:45.330
是不是都这么拿的

52:45.330 --> 52:46.330
对吧

52:46.330 --> 52:47.330
你这边通过结构

52:47.330 --> 52:48.330
从这个react里面结构

52:48.330 --> 52:49.330
拿到

52:49.330 --> 52:50.330
拿到之后

52:50.330 --> 52:51.330
然后

52:52.330 --> 52:53.330
我这边的话

52:53.330 --> 52:54.330
我看

52:54.330 --> 52:55.330
我把这个react

52:56.330 --> 52:57.330
react还是引入吧

52:57.330 --> 52:59.330
本来要包错

52:59.330 --> 53:00.330
好

53:00.330 --> 53:01.330
拿到之后

53:01.330 --> 53:02.330
然后接下来

53:02.330 --> 53:03.330
我们这边再来创建一个

53:04.330 --> 53:06.330
const inputRef2

53:06.330 --> 53:08.330
它就通过什么呢

53:08.330 --> 53:09.330
它就通过useRef

53:10.330 --> 53:11.330
你看我这边

53:11.330 --> 53:12.330
它是个函数

53:12.330 --> 53:13.330
它是个hook

53:13.330 --> 53:15.330
hook基本都是个函数

53:15.330 --> 53:16.330
对吧

53:16.330 --> 53:17.330
你这边就是雕用

53:17.330 --> 53:18.330
雕用之后

53:18.330 --> 53:19.330
然后接下来的话

53:19.330 --> 53:21.960
我这边绑定

53:21.960 --> 53:24.960
ref等于一个

53:24.960 --> 53:25.960
input

53:26.960 --> 53:28.960
inputRef2

53:28.960 --> 53:29.960
好

53:29.960 --> 53:30.960
大家我们这边看一下

53:31.960 --> 53:32.960
inputRef2

53:32.960 --> 53:33.960
能不能去叫

53:33.960 --> 53:34.960
这边

53:34.960 --> 53:35.960
input

53:35.960 --> 53:40.910
inputRef2

53:40.910 --> 53:42.910
然后点

53:42.910 --> 53:43.910
current

53:43.910 --> 53:45.910
点fox

53:46.910 --> 53:47.910
好

53:47.910 --> 53:48.910
来这边来看一下

53:48.910 --> 53:49.910
放心

53:50.910 --> 53:51.910
可以吧

53:51.910 --> 53:52.910
这边也是可以的

53:52.910 --> 53:53.910
对不对

53:53.910 --> 53:54.910
也就是说你这边

53:54.910 --> 53:55.910
你会发现

53:55.910 --> 53:56.910
你无论用这个老的

53:56.910 --> 53:57.910
这个createRef

53:57.910 --> 53:58.910
还是用这个新的

53:58.910 --> 53:59.910
这个useRef

54:00.910 --> 54:01.910
都可以

54:01.910 --> 54:02.910
都可以达到这个效果

54:02.910 --> 54:03.910
就是我这个Ref

54:03.910 --> 54:04.910
和一个这个

54:04.910 --> 54:05.910
动物节点

54:05.910 --> 54:06.910
所以引用到这个

54:06.910 --> 54:07.910
这个动物

54:07.910 --> 54:08.910
对不对

54:08.910 --> 54:09.910
那这两者

54:09.910 --> 54:10.910
有没有什么区别呢

54:10.910 --> 54:11.910
有没有区别呢

54:11.910 --> 54:12.910
它这两者的话

54:12.910 --> 54:14.910
其实还是有一些区别

54:14.910 --> 54:15.910
什么区别呢

54:15.910 --> 54:16.910
就你这边的话

54:16.910 --> 54:18.910
你这个react点

54:19.910 --> 54:21.910
因为你这个是个函数组件

54:21.910 --> 54:22.910
函数组件

54:22.910 --> 54:23.910
每次重新渲染的时候

54:23.910 --> 54:24.910
这边是不是

54:24.910 --> 54:26.910
它会重新执行这个函数

54:26.910 --> 54:27.910
重新执行函数的话

54:27.910 --> 54:29.910
它是不是会重新执行这句话

54:29.910 --> 54:30.910
对不对

54:30.910 --> 54:31.910
它会重新执行这句话

54:31.910 --> 54:32.910
重新执行这句话

54:32.910 --> 54:33.910
意味着什么

54:33.910 --> 54:34.910
意味着你这个

54:34.910 --> 54:35.910
每次你这个ref

54:35.910 --> 54:36.910
它都是新建的

54:36.910 --> 54:38.910
每次都是新建的

54:38.910 --> 54:40.910
而这个useRef就不一样

54:40.910 --> 54:41.910
useRef的话

54:41.910 --> 54:42.910
这个后面我们讲到

54:42.910 --> 54:43.910
那个就是

54:43.910 --> 54:44.910
整个react

54:44.910 --> 54:45.910
原码分析的时候

54:45.910 --> 54:46.910
我们会讲到

54:46.910 --> 54:48.910
它是挂在fiber上面的

54:48.910 --> 54:49.910
它是挂在fiber

54:49.910 --> 54:50.910
但你现在听不懂

54:50.910 --> 54:51.910
什么叫做fiber

54:51.910 --> 54:52.910
它fiber的话

54:52.910 --> 54:53.910
它是

54:53.910 --> 54:54.910
你可以把理解的

54:54.910 --> 54:55.910
也是一个jess对象

54:55.910 --> 54:56.910
挂在fiber上面的

54:56.910 --> 54:57.910
说它这边的话

54:57.910 --> 54:58.910
只会什么

54:58.910 --> 54:59.910
只会在第一次

54:59.910 --> 55:01.910
第一次创建出新的

55:01.910 --> 55:02.910
后面的话

55:02.910 --> 55:03.910
它就不会了

55:03.910 --> 55:05.910
你回忆一下那个useState

55:05.910 --> 55:06.910
useState的话

55:06.910 --> 55:07.910
我每一次

55:07.910 --> 55:08.910
我那个就是函数组件

55:08.910 --> 55:10.910
重新渲染的时候

55:10.910 --> 55:11.910
那个state

55:11.910 --> 55:12.910
useState它是不是可以保持

55:12.910 --> 55:13.910
我之前的那个state

55:13.910 --> 55:14.910
对不对

55:14.910 --> 55:15.910
为什么

55:15.910 --> 55:16.910
挂在fiber上面的

55:16.910 --> 55:18.910
那这边的话也是

55:18.910 --> 55:20.910
它这个ref它挂在fiber上面

55:20.910 --> 55:21.910
挂在fiber上面的话

55:21.910 --> 55:22.910
你这边重新渲染的话

55:22.910 --> 55:23.910
我这边可以拿到什么

55:23.910 --> 55:25.910
可以拿到之前的这个ref

55:25.910 --> 55:27.910
而就不像这上面这个

55:27.910 --> 55:28.910
上面这个你每次重新渲染

55:28.910 --> 55:29.910
它都每次

55:29.910 --> 55:31.910
创建一个新的ref

55:31.910 --> 55:33.910
就这个区别

55:33.910 --> 55:34.910
就这个区别

55:34.910 --> 55:36.910
来我们来证明一下

55:36.910 --> 55:37.910
怎么证明呢

55:37.910 --> 55:40.910
我们这边log一下

55:40.910 --> 55:43.910
log一下inputref1

55:43.910 --> 55:45.910
loginputref2

55:45.910 --> 55:46.910
对吧

55:46.910 --> 55:48.910
大家这边在这边

55:48.910 --> 55:52.990
在这边我们也来打印一下

55:52.990 --> 55:53.990
打印一下

55:53.990 --> 55:54.990
这边12

55:54.990 --> 55:55.990
大家我们这边

55:55.990 --> 55:56.990
让我们再来一个什么呢

55:56.990 --> 55:58.990
我们再来一个这个状态

55:58.990 --> 56:00.990
再来个状态

56:00.990 --> 56:01.990
我们这边可以看到

56:01.990 --> 56:02.990
就是你渲染的时候

56:02.990 --> 56:03.990
对吧

56:03.990 --> 56:05.990
useState

56:05.990 --> 56:07.990
我们这边

56:07.990 --> 56:08.990
const

56:08.990 --> 56:10.990
一个conventer

56:10.990 --> 56:13.990
setconventer

56:13.990 --> 56:16.990
等于一个useState

56:16.990 --> 56:17.990
对吧

56:17.990 --> 56:18.990
好

56:18.990 --> 56:19.990
然后接下来这边

56:19.990 --> 56:20.990
这边的话

56:20.990 --> 56:23.990
我们给个这个button

56:23.990 --> 56:24.990
我们这边

56:24.990 --> 56:25.990
clickhandle

56:25.990 --> 56:26.990
clickhandle

56:26.990 --> 56:27.990
我们这边就是加一

56:27.990 --> 56:29.990
这边就加一

56:29.990 --> 56:30.990
加一的话

56:30.990 --> 56:31.990
这里面

56:31.990 --> 56:32.990
forks就不要了

56:32.990 --> 56:33.990
这里面

56:33.990 --> 56:35.990
这里面的话就是setconventer

56:35.990 --> 56:37.990
这边就是conventer

56:37.990 --> 56:39.990
加一

56:39.990 --> 56:41.990
每次我们让这个conventer

56:41.990 --> 56:42.990
加一

56:42.990 --> 56:43.990
好

56:43.990 --> 56:44.990
来我们这边来看一下

56:44.990 --> 56:45.990
刷新

56:45.990 --> 56:46.990
一开始的话

56:46.990 --> 56:47.990
这个

56:47.990 --> 56:48.990
上面这个是什么

56:48.990 --> 56:49.990
上面这个是

56:49.990 --> 56:51.990
我们这边加一个那个

56:52.990 --> 56:54.990
这个是react

56:54.990 --> 56:55.990
createRef

56:55.990 --> 57:00.540
创建的

57:00.540 --> 57:02.540
这个的话是useRef

57:02.540 --> 57:03.540
创建的

57:03.540 --> 57:07.580
useRef

57:07.580 --> 57:08.580
创建的

57:08.580 --> 57:10.580
下面这个我们也把加上

57:10.580 --> 57:17.060
这个也把加上

57:17.060 --> 57:18.060
保存

57:18.060 --> 57:19.060
保存之后

57:19.060 --> 57:20.060
大家这边我们刷新一下

57:20.060 --> 57:21.060
你看

57:21.060 --> 57:22.060
一开始的话

57:22.060 --> 57:23.060
这边你react

57:23.060 --> 57:24.060
createRef

57:24.060 --> 57:25.060
这边current是一个now

57:25.060 --> 57:26.060
对吧

57:26.060 --> 57:27.060
大家这边

57:27.060 --> 57:28.060
这个是一个什么

57:28.060 --> 57:29.060
这个是一个undify

57:29.060 --> 57:30.060
然后完事之后

57:30.060 --> 57:31.060
它这边渲染了之后

57:31.060 --> 57:32.060
然后接下来

57:32.060 --> 57:33.060
它这边是不是就挂上去了

57:33.060 --> 57:34.060
对不对

57:34.060 --> 57:35.060
挂上去你这边

57:35.060 --> 57:36.060
你点击这个clickhandle的时候

57:36.060 --> 57:38.060
这边再打印的话

57:38.060 --> 57:40.060
它就是应该是关联

57:40.060 --> 57:41.060
关联这个input

57:41.060 --> 57:42.060
它就应该关联

57:42.060 --> 57:43.060
关联下面这个input

57:43.060 --> 57:44.060
对不对

57:44.060 --> 57:45.060
大家我们这边

57:46.060 --> 57:47.060
OK

57:47.060 --> 57:48.060
我们这边

57:48.060 --> 57:49.060
我们来看一下

57:49.060 --> 57:50.060
这边发生了什么事情

57:50.060 --> 57:51.060
发生了什么事情

57:51.060 --> 57:52.060
点击加一

57:52.060 --> 57:54.060
点击加一

57:54.060 --> 57:56.060
这边触发点击事件

57:56.060 --> 57:57.060
触发点击事件之后

57:57.060 --> 57:59.060
它是不是会执行这个函数

57:59.060 --> 58:00.060
对不对

58:00.060 --> 58:01.060
执行这个函数之后

58:01.060 --> 58:02.060
它立马就会打印什么

58:02.060 --> 58:03.060
是不是打印这两句

58:03.060 --> 58:04.060
这两句在哪里

58:04.060 --> 58:07.890
这两句在这里

58:07.890 --> 58:08.890
这两句在这里

58:08.890 --> 58:09.890
看到没有

58:09.890 --> 58:10.890
在这里

58:10.890 --> 58:11.890
在这里之后

58:11.890 --> 58:12.890
我们可以看到

58:12.890 --> 58:13.890
现在它们各自都关联上了

58:13.890 --> 58:14.890
它关联上了

58:14.890 --> 58:15.890
它这个

58:15.890 --> 58:17.890
它关联上了

58:17.890 --> 58:19.890
它现在是闹了

58:19.890 --> 58:21.890
它关联上了这个input

58:21.890 --> 58:23.890
它关联上了这个input

58:23.890 --> 58:24.890
大家这边

58:24.890 --> 58:27.890
它关联上了这个input

58:27.890 --> 58:28.890
对不对

58:28.890 --> 58:29.890
好

58:29.890 --> 58:30.890
然后接下来

58:30.890 --> 58:31.890
你这边是不是

58:31.890 --> 58:32.890
设置这个状态加音

58:32.890 --> 58:34.890
设置状态加音会导致什么

58:34.890 --> 58:37.890
是不是整个函数重新执行

58:37.890 --> 58:38.890
因为我是个函数组建

58:38.890 --> 58:39.890
对不对

58:39.890 --> 58:40.890
重新执行

58:40.890 --> 58:41.890
重新执行这边

58:41.890 --> 58:42.890
又一句一句执行

58:42.890 --> 58:43.890
首先执行第一句

58:43.890 --> 58:44.890
执行第一句

58:44.890 --> 58:45.890
然后接下来

58:45.890 --> 58:46.890
这边执行第二句

58:46.890 --> 58:47.890
这边的状态

58:47.890 --> 58:48.890
大家这边

58:48.890 --> 58:50.890
这边再一次打印

58:50.890 --> 58:52.890
区别出来没有

58:52.890 --> 58:54.890
区别是不是就出来了

58:54.890 --> 58:55.890
对不对

58:55.890 --> 58:56.890
你会发现这边的话

58:56.890 --> 58:57.890
它就是什么

58:57.890 --> 58:58.890
是不是重新创建了

58:58.890 --> 58:59.890
一个新的

58:59.890 --> 59:00.890
全新的这个ref

59:00.890 --> 59:01.890
但是这边就没有

59:01.890 --> 59:02.890
可不可以

59:02.890 --> 59:03.890
这边就没有

59:03.890 --> 59:04.890
OK

59:04.890 --> 59:05.890
这个其实就是这个

59:05.890 --> 59:07.890
quaterref和这个userref

59:07.890 --> 59:09.890
它的这个区别

59:09.890 --> 59:11.890
说为什么在函数组建里面

59:11.890 --> 59:13.890
更加推荐你使用什么呢

59:13.890 --> 59:15.890
使用userref

59:15.890 --> 59:16.890
使用userref

59:16.890 --> 59:17.890
OK

59:17.890 --> 59:18.890
它这个其实就是为了什么

59:18.890 --> 59:21.890
就是为了函数组建而生的

59:21.890 --> 59:22.890
对不对

59:22.890 --> 59:23.890
你想一想

59:23.890 --> 59:26.890
为什么官方要给你推出一个userref

59:26.890 --> 59:29.890
假设和之前的quaterref一模一样的话

59:29.890 --> 59:31.890
那我没有必要推出这个

59:31.890 --> 59:32.890
对不对

59:32.890 --> 59:34.890
你直接用之前的quaterref就可以了

59:34.890 --> 59:36.890
就是因为官方发现

59:36.890 --> 59:37.890
我这边每次

59:37.890 --> 59:38.890
因为我们函数渲染的话

59:38.890 --> 59:39.890
意味着什么

59:39.890 --> 59:40.890
意味着这边

59:40.890 --> 59:42.890
整个代码要重新执行一次

59:42.890 --> 59:43.890
对不对

59:43.890 --> 59:44.890
它就会发现

59:44.890 --> 59:45.890
每次都会创建一个新的ref

59:45.890 --> 59:47.890
所以说给你推出了什么

59:47.890 --> 59:49.890
推出了userref

59:49.890 --> 59:50.890
明白没有

59:50.890 --> 59:52.890
两者的区别

59:53.890 --> 59:55.890
这边看一下

59:56.890 --> 59:57.890
OK

59:57.890 --> 59:58.890
我们可以看出

59:58.890 --> 01:00:00.890
虽然这个quaterref和userref

01:00:00.890 --> 01:00:02.890
都是创建ref的

01:00:02.890 --> 01:00:03.890
但是呢

01:00:03.890 --> 01:00:05.890
还是有一些区别

01:00:05.890 --> 01:00:06.890
什么区别

01:00:06.890 --> 01:00:08.890
主要提前在下面的点

01:00:08.890 --> 01:00:10.890
userref是hooks的一种

01:00:10.890 --> 01:00:12.890
一般用于什么

01:00:12.890 --> 01:00:13.890
function组建

01:00:13.890 --> 01:00:15.890
也就是用于函数组建

01:00:15.890 --> 01:00:16.890
这个quaterref的话

01:00:16.890 --> 01:00:18.890
一般就用于类组建

01:00:18.890 --> 01:00:19.890
你想在类组建里面

01:00:19.890 --> 01:00:21.890
用hook也用不了

01:00:21.890 --> 01:00:22.890
对不对

01:00:22.890 --> 01:00:24.890
你的hook只能用于函数组建

01:00:24.890 --> 01:00:25.890
好

01:00:25.890 --> 01:00:26.890
userref创建了ref对象

01:00:26.890 --> 01:00:28.890
在组建了整个生命周期内

01:00:28.890 --> 01:00:30.890
是不会改变的

01:00:30.890 --> 01:00:31.890
但是你这个quaterref

01:00:31.890 --> 01:00:32.890
创建了ref对象

01:00:32.890 --> 01:00:34.890
你组建每更新一次

01:00:34.890 --> 01:00:37.890
ref对象就会被重新创建

01:00:37.890 --> 01:00:38.890
对不对

01:00:38.890 --> 01:00:39.890
所以说

01:00:39.890 --> 01:00:40.890
实际上就是因为什么

01:00:40.890 --> 01:00:42.890
就是因为在函数组建里面

01:00:42.890 --> 01:00:43.890
你如果使用quaterref

01:00:43.890 --> 01:00:45.890
它会有这个b端

01:00:45.890 --> 01:00:46.890
每次组建更新

01:00:46.890 --> 01:00:47.890
它就会重新创建

01:00:47.890 --> 01:00:49.890
所以说出现了什么

01:00:49.890 --> 01:00:51.890
出现了这个userref

01:00:51.890 --> 01:00:54.890
来解决这个问题

01:00:54.890 --> 01:00:58.890
关于这个userref

01:00:58.890 --> 01:00:59.890
userref的话

01:00:59.890 --> 01:01:01.890
它还接收一个什么

01:01:01.890 --> 01:01:04.890
它还接收一个初始字

01:01:04.890 --> 01:01:06.890
它还接收一个初始字

01:01:06.890 --> 01:01:07.890
这个的话

01:01:07.890 --> 01:01:09.890
它在关联这个多摩元素的时候

01:01:09.890 --> 01:01:10.890
没什么用

01:01:10.890 --> 01:01:11.890
但是有些时候

01:01:11.890 --> 01:01:12.890
你可以作为什么

01:01:12.890 --> 01:01:15.890
可以作为就是不需要变化的

01:01:15.890 --> 01:01:16.890
这边给你加出

01:01:16.890 --> 01:01:19.890
存储不需要变化的

01:01:19.890 --> 01:01:21.890
这个全局变量的时候

01:01:21.890 --> 01:01:22.890
非常方便

01:01:22.890 --> 01:01:24.890
我们这边来看个例子吧

01:01:24.890 --> 01:01:26.890
看个例子

01:01:26.890 --> 01:01:28.890
回到这边

01:01:28.890 --> 01:01:30.890
回到这边

01:01:30.890 --> 01:01:32.890
把这儿删了

01:01:32.890 --> 01:01:33.890
把这儿删了

01:01:33.890 --> 01:01:34.890
笔记里面有的

01:01:34.890 --> 01:01:35.890
把这儿删了

01:01:35.890 --> 01:01:36.890
OK

01:01:36.890 --> 01:01:37.890
来我们现在的话

01:01:37.890 --> 01:01:38.890
我们写一个这个例子

01:01:38.890 --> 01:01:40.890
或者我直接把这个例子

01:01:40.890 --> 01:01:41.890
拿过来

01:01:41.890 --> 01:01:42.890
OK

01:01:42.890 --> 01:01:43.890
这个例子因为他不难

01:01:43.890 --> 01:01:44.890
他不难

01:01:44.890 --> 01:01:46.890
我直接把他拿过来

01:01:47.890 --> 01:01:49.890
好我们来看一下

01:01:49.890 --> 01:01:50.890
来看一下这边

01:01:50.890 --> 01:01:51.890
这边做了什么事情

01:01:51.890 --> 01:01:53.890
这边首先user state

01:01:53.890 --> 01:01:54.890
user effect

01:01:54.890 --> 01:01:55.890
这两个是

01:01:55.890 --> 01:01:58.890
之前入门篇就接触过的这个hook

01:01:58.890 --> 01:01:59.890
这边的话

01:01:59.890 --> 01:02:00.890
维护了一个状态

01:02:00.890 --> 01:02:02.890
维护了一个状态是1

01:02:02.890 --> 01:02:03.890
对吧

01:02:03.890 --> 01:02:04.890
然后接下来

01:02:04.890 --> 01:02:06.890
这边的话有一个副作用

01:02:06.890 --> 01:02:07.890
副作用的话

01:02:07.890 --> 01:02:08.890
这边是set interval

01:02:08.890 --> 01:02:09.890
每个一秒

01:02:09.890 --> 01:02:10.890
这边会打印什么呢

01:02:10.890 --> 01:02:11.890
打印输出

01:02:11.890 --> 01:02:12.890
出发了

01:02:12.890 --> 01:02:13.890
对不对

01:02:13.890 --> 01:02:14.890
每个一秒

01:02:14.890 --> 01:02:15.890
这边的话

01:02:15.890 --> 01:02:16.890
然后我们这边有一个time

01:02:17.890 --> 01:02:18.890
对吧

01:02:18.890 --> 01:02:19.890
有个time

01:02:19.890 --> 01:02:21.890
time是存储

01:02:21.890 --> 01:02:24.890
就是clear interval的id

01:02:24.890 --> 01:02:26.890
就是停止即时期的id

01:02:27.890 --> 01:02:28.890
OK

01:02:28.890 --> 01:02:29.890
然后接下来的话

01:02:29.890 --> 01:02:30.890
你这边

01:02:30.890 --> 01:02:32.890
我看一下这边点击加1

01:02:32.890 --> 01:02:33.890
点击加1之后

01:02:33.890 --> 01:02:36.890
这边是让这个变化一下

01:02:36.890 --> 01:02:37.890
变化一下之后

01:02:37.890 --> 01:02:39.890
然后再来打你这个time

01:02:39.890 --> 01:02:41.890
这边是这个停止

01:02:41.890 --> 01:02:43.890
看看效果吧

01:02:43.890 --> 01:02:45.890
这边其实已经飘黄了

01:02:45.890 --> 01:02:46.890
对不对

01:02:46.890 --> 01:02:47.890
已经飘黄了

01:02:47.890 --> 01:02:48.890
他这边告诉你什么

01:02:48.890 --> 01:02:51.890
这个time variable

01:02:51.890 --> 01:02:52.890
这边他会干吗

01:02:52.890 --> 01:02:54.890
他是will be lost

01:02:54.890 --> 01:02:55.890
对不对

01:02:55.890 --> 01:02:57.890
他会被这个消失

01:02:57.890 --> 01:02:59.890
他说你如果这边的话

01:02:59.890 --> 01:03:01.890
你想存储一个

01:03:01.890 --> 01:03:02.890
存储一个就是

01:03:02.890 --> 01:03:06.890
可以一直保留的变量的话

01:03:06.890 --> 01:03:07.890
应该是使用什么

01:03:07.890 --> 01:03:09.890
使用这个use ref

01:03:09.890 --> 01:03:11.890
可以用这个use ref

01:03:11.890 --> 01:03:12.890
好

01:03:12.890 --> 01:03:13.890
来我们这边来看一下

01:03:13.890 --> 01:03:15.890
现在会出现什么问题

01:03:15.890 --> 01:03:16.890
刷新一下

01:03:16.890 --> 01:03:18.890
看一下控制台

01:03:18.890 --> 01:03:20.890
这边是不是出发了

01:03:20.890 --> 01:03:21.890
对不对

01:03:21.890 --> 01:03:23.890
他这边会每个一秒打印这个

01:03:23.890 --> 01:03:24.890
为什么

01:03:24.890 --> 01:03:25.890
因为我们这边设置了

01:03:25.890 --> 01:03:27.890
设置了一个即时器

01:03:27.890 --> 01:03:28.890
对不对

01:03:28.890 --> 01:03:29.890
OK

01:03:29.890 --> 01:03:30.890
好

01:03:30.890 --> 01:03:31.890
然后接下来的话

01:03:31.890 --> 01:03:32.890
我这边点击停止

01:03:32.890 --> 01:03:33.890
点击停止的话

01:03:33.890 --> 01:03:34.890
他这边就是什么

01:03:34.890 --> 01:03:35.890
clear interval

01:03:35.890 --> 01:03:36.890
好

01:03:36.890 --> 01:03:37.890
来我们看一下

01:03:37.890 --> 01:03:38.890
好不好使

01:03:38.890 --> 01:03:39.890
停止

01:03:39.890 --> 01:03:41.890
这会是没问题的

01:03:41.890 --> 01:03:42.890
对不对

01:03:42.890 --> 01:03:43.890
这会是可以停止的

01:03:43.890 --> 01:03:44.890
没有任何问题

01:03:44.890 --> 01:03:45.890
好

01:03:45.890 --> 01:03:46.890
然后接下来

01:03:46.890 --> 01:03:48.890
我们这边重新来

01:03:48.890 --> 01:03:49.890
重新来

01:03:49.890 --> 01:03:50.890
现在的话

01:03:50.890 --> 01:03:51.890
我做什么事情

01:03:51.890 --> 01:03:53.890
现在假设我这边

01:03:53.890 --> 01:03:54.890
我这个状态

01:03:54.890 --> 01:03:55.890
这边这个1

01:03:55.890 --> 01:03:57.890
我这边进行个加1

01:03:57.890 --> 01:03:58.890
OK

01:03:58.890 --> 01:03:59.890
进行个加1

01:03:59.890 --> 01:04:00.890
加1之后

01:04:00.890 --> 01:04:01.890
然后接下来

01:04:01.890 --> 01:04:02.890
你整个这个组件

01:04:02.890 --> 01:04:03.890
是不是重新渲染

01:04:03.890 --> 01:04:04.890
对不对

01:04:04.890 --> 01:04:05.890
再点击这个停止

01:04:05.890 --> 01:04:07.890
你看好不好使

01:04:07.890 --> 01:04:08.890
不好使了

01:04:08.890 --> 01:04:10.890
停不了了

01:04:10.890 --> 01:04:12.890
你停不了了

01:04:12.890 --> 01:04:13.890
为什么

01:04:13.890 --> 01:04:14.890
原因很简单

01:04:14.890 --> 01:04:15.890
你这边重新刷新之后

01:04:15.890 --> 01:04:17.890
你之前这个即时器

01:04:17.890 --> 01:04:18.890
你之前你这边

01:04:18.890 --> 01:04:19.890
是不是启动一个

01:04:19.890 --> 01:04:20.890
这个即时器

01:04:20.890 --> 01:04:21.890
这个即时器是存在哪里的

01:04:21.890 --> 01:04:22.890
就存在这个time

01:04:22.890 --> 01:04:23.890
里面的

01:04:23.890 --> 01:04:24.890
对不对

01:04:24.890 --> 01:04:25.890
好

01:04:25.890 --> 01:04:26.890
再加这边的话

01:04:26.890 --> 01:04:27.890
你整个重新渲染

01:04:27.890 --> 01:04:28.890
重新渲染之后

01:04:28.890 --> 01:04:29.890
你这个time

01:04:29.890 --> 01:04:30.890
之前的这个值

01:04:30.890 --> 01:04:31.890
还在不在

01:04:31.890 --> 01:04:32.890
就不在了

01:04:32.890 --> 01:04:33.890
对不对

01:04:33.890 --> 01:04:34.890
在哪里的吗

01:04:34.890 --> 01:04:36.890
time就不在了

01:04:36.890 --> 01:04:37.890
就不在了

01:04:37.890 --> 01:04:38.890
那像这种

01:04:38.890 --> 01:04:39.890
这种怎么办

01:04:39.890 --> 01:04:40.890
这种的话

01:04:40.890 --> 01:04:41.890
你这边的话

01:04:41.890 --> 01:04:42.890
就可以干嘛呢

01:04:42.890 --> 01:04:43.890
这边把它做个修改

01:04:43.890 --> 01:04:44.890
你这边这个time

01:04:44.890 --> 01:04:45.890
这个time

01:04:45.890 --> 01:04:46.890
time

01:04:46.890 --> 01:04:47.890
就等于什么呢

01:04:47.890 --> 01:04:48.890
我们这边可以使用

01:04:48.890 --> 01:04:49.890
什么呢

01:04:49.890 --> 01:04:50.890
使用use ref

01:04:52.890 --> 01:04:53.890
你看他这边的话

01:04:53.890 --> 01:04:55.890
刚才他其实也给你有提示

01:04:56.890 --> 01:05:00.260
我们再把这个提示看一下

01:05:01.260 --> 01:05:04.640
这边time

01:05:04.640 --> 01:05:05.640
他这边其实也有提示

01:05:06.640 --> 01:05:07.640
对不对

01:05:07.640 --> 01:05:08.640
他让你干嘛

01:05:08.640 --> 01:05:10.640
他说你这个time variable

01:05:10.640 --> 01:05:11.640
他会干嘛

01:05:11.640 --> 01:05:13.640
will be lost

01:05:13.640 --> 01:05:14.640
对不对

01:05:14.640 --> 01:05:15.640
after each render

01:05:15.640 --> 01:05:16.640
就每一次渲染之后

01:05:16.640 --> 01:05:17.640
他会干嘛

01:05:17.640 --> 01:05:19.640
是不是会丢失

01:05:19.640 --> 01:05:21.640
人家这边其实写的很明白

01:05:21.640 --> 01:05:22.640
很明白

01:05:22.640 --> 01:05:24.640
to preserve

01:05:24.640 --> 01:05:25.640
这个serve

01:05:25.640 --> 01:05:26.640
为了阻止

01:05:26.640 --> 01:05:27.640
阻止这个

01:05:27.640 --> 01:05:28.640
他这边

01:05:28.640 --> 01:05:29.640
这个preserve

01:05:29.640 --> 01:05:30.640
好像是阻止的意思

01:05:30.640 --> 01:05:32.640
下去查一下

01:05:32.640 --> 01:05:33.640
这边让你干嘛呢

01:05:33.640 --> 01:05:34.640
让你这个start

01:05:34.640 --> 01:05:35.640
是不是让你存储一下

01:05:35.640 --> 01:05:36.640
存储到哪里

01:05:36.640 --> 01:05:37.640
所以use ref

01:05:37.640 --> 01:05:38.640
这个户口里面

01:05:38.640 --> 01:05:39.640
对不对

01:05:39.640 --> 01:05:40.640
他可以去保留

01:05:40.640 --> 01:05:41.640
使用什么呢

01:05:41.640 --> 01:05:42.640
使用这个点current

01:05:42.640 --> 01:05:43.640
这个属性

01:05:43.640 --> 01:05:44.640
OK

01:05:44.640 --> 01:05:45.640
所以我们这边

01:05:45.640 --> 01:05:46.640
就可以把它改造一下

01:05:47.640 --> 01:05:48.640
这边的话

01:05:48.640 --> 01:05:50.640
use ref

01:05:50.640 --> 01:05:51.640
这边这个time

01:05:51.640 --> 01:05:53.640
time的话就等于一个

01:05:53.640 --> 01:05:55.640
use ref

01:05:55.640 --> 01:05:56.640
这边可以给个初始值

01:05:56.640 --> 01:05:57.640
初始值

01:05:57.640 --> 01:05:58.640
我们这边就给个no

01:05:58.640 --> 01:05:59.640
看看什么时候

01:05:59.640 --> 01:06:00.640
给初始值

01:06:00.640 --> 01:06:01.640
一般就是这种时候

01:06:01.640 --> 01:06:02.640
一般就这种时候

01:06:02.640 --> 01:06:03.640
好

01:06:03.640 --> 01:06:04.640
人家这边这个time

01:06:04.640 --> 01:06:05.640
time的话

01:06:05.640 --> 01:06:07.640
我们就让他点current

01:06:08.640 --> 01:06:09.640
点current

01:06:09.640 --> 01:06:11.640
等于你的这个返回值

01:06:11.640 --> 01:06:12.640
那你这边的话

01:06:12.640 --> 01:06:14.640
你无论这个如何刷新

01:06:14.640 --> 01:06:15.640
让我这个值的话

01:06:15.640 --> 01:06:16.640
是不是还保存着的

01:06:16.640 --> 01:06:17.640
对不对

01:06:17.640 --> 01:06:18.640
我们刚才那个例子

01:06:18.640 --> 01:06:19.640
我们也看到了

01:06:19.640 --> 01:06:20.640
你这个use ref

01:06:20.640 --> 01:06:21.640
use ref

01:06:21.640 --> 01:06:22.640
它是在整个

01:06:22.640 --> 01:06:23.640
这个组建生命周期里面

01:06:23.640 --> 01:06:24.640
它是不是都存在的

01:06:25.640 --> 01:06:26.640
对吧

01:06:26.640 --> 01:06:27.640
好 那我们这边

01:06:27.640 --> 01:06:28.640
我们来看一下

01:06:28.640 --> 01:06:29.640
重新刷新一下

01:06:30.640 --> 01:06:32.640
好 这边触发

01:06:32.640 --> 01:06:33.640
对吧

01:06:33.640 --> 01:06:34.640
这边我点击加1

01:06:35.640 --> 01:06:36.640
点击加1

01:06:36.640 --> 01:06:37.640
加1之后

01:06:37.640 --> 01:06:38.640
然后接下来这边

01:06:38.640 --> 01:06:39.640
这77

01:06:39.640 --> 01:06:42.080
好 再加我们这边停止

01:06:46.080 --> 01:06:47.080
等一下

01:06:47.080 --> 01:06:48.080
我看一下

01:06:49.080 --> 01:06:52.080
这边的话加了之后停止

01:06:53.080 --> 01:06:54.080
这边

01:06:55.080 --> 01:06:56.080
这里得干嘛

01:06:56.080 --> 01:06:57.080
这边要改成什么

01:06:57.080 --> 01:06:59.080
是不是点current

01:06:59.080 --> 01:07:00.080
对不对

01:07:00.080 --> 01:07:02.080
你这边要改成点current

01:07:02.080 --> 01:07:03.080
重新来

01:07:03.080 --> 01:07:04.080
再来

01:07:04.080 --> 01:07:05.080
这边触发

01:07:05.080 --> 01:07:06.080
对吧

01:07:06.080 --> 01:07:07.080
G17正在跑

01:07:07.080 --> 01:07:08.080
好 我这边让我加1

01:07:09.080 --> 01:07:10.080
加1

01:07:10.080 --> 01:07:11.080
加1之后

01:07:11.080 --> 01:07:12.080
这边G17正在跑

01:07:12.080 --> 01:07:13.080
对不对

01:07:13.080 --> 01:07:15.080
这边让我点击这个停止

01:07:15.080 --> 01:07:16.080
OK了没有

01:07:16.080 --> 01:07:17.080
是不是OK了

01:07:17.080 --> 01:07:18.080
对不对

01:07:18.080 --> 01:07:19.080
这G17就停止了

01:07:19.080 --> 01:07:20.080
说明什么

01:07:20.080 --> 01:07:21.080
说明我们这个time

01:07:21.080 --> 01:07:22.080
它是不是

01:07:22.080 --> 01:07:23.080
就是time点current里面

01:07:23.080 --> 01:07:25.080
成功的保存了什么

01:07:25.080 --> 01:07:26.080
是不是你这个

01:07:26.080 --> 01:07:27.080
停止G17的这个ID

01:07:28.080 --> 01:07:29.080
对吧

01:07:29.080 --> 01:07:30.080
无论你怎么渲染

01:07:30.080 --> 01:07:31.080
我这边这个值

01:07:31.080 --> 01:07:32.080
一直保持着的

01:07:32.080 --> 01:07:33.080
OK

01:07:34.080 --> 01:07:36.080
关于这个UZREF

01:07:36.080 --> 01:07:37.080
这么一个例子

01:07:38.080 --> 01:07:40.080
这例子在笔记里面也有

01:07:40.080 --> 01:07:41.080
也有

01:07:42.080 --> 01:07:43.080
OK

01:07:43.080 --> 01:07:45.080
我讲了一个多小时了

01:07:45.080 --> 01:07:47.080
最后有一个这个知识点

01:07:47.080 --> 01:07:48.080
我看一下

01:07:48.080 --> 01:07:50.080
这是刚才我们讲的那个

01:07:50.080 --> 01:07:51.080
在这

01:07:51.080 --> 01:07:52.080
最后把这个讲了

01:07:52.080 --> 01:07:55.080
这个UZ imperative handle

01:07:55.080 --> 01:07:57.080
这个imparative

01:07:57.080 --> 01:07:58.080
这个是什么意思

01:07:58.080 --> 01:08:00.080
就你这边你在学一个新知识的时候

01:08:00.080 --> 01:08:01.080
你这边

01:08:01.080 --> 01:08:03.080
就遇到不认识的单词

01:08:03.080 --> 01:08:04.080
一定要去查

01:08:04.080 --> 01:08:05.080
知道吧

01:08:05.080 --> 01:08:06.080
你首先看它

01:08:06.080 --> 01:08:07.080
这边是什么意思

01:08:07.080 --> 01:08:08.080
我记得是

01:08:08.080 --> 01:08:10.080
好像是紧急的意思

01:08:10.080 --> 01:08:11.080
之前查过

01:08:11.080 --> 01:08:12.080
果然是

01:08:12.080 --> 01:08:13.080
对不对

01:08:13.080 --> 01:08:14.080
重要的紧急的

01:08:14.080 --> 01:08:16.080
迫切的急需处理的

01:08:16.080 --> 01:08:18.080
imparative

01:08:18.080 --> 01:08:20.080
imparative

01:08:20.080 --> 01:08:21.080
对的

01:08:21.080 --> 01:08:23.080
imparative

01:08:23.080 --> 01:08:25.080
imparative

01:08:25.080 --> 01:08:26.080
OK对的

01:08:26.080 --> 01:08:28.080
那这个的话是什么意思

01:08:28.080 --> 01:08:30.080
UZ imperative handle

01:08:30.080 --> 01:08:32.080
这边一个紧急的

01:08:32.080 --> 01:08:33.080
handle

01:08:33.080 --> 01:08:35.080
那它这边是要干什么事情

01:08:35.080 --> 01:08:36.080
它这边的话

01:08:36.080 --> 01:08:38.080
它一般主要就是配合什么

01:08:38.080 --> 01:08:42.080
配合react.forwardRef来使用的

01:08:42.080 --> 01:08:44.080
它的主要作用就是什么呢

01:08:44.080 --> 01:08:45.080
主要作用就是

01:08:45.080 --> 01:08:47.080
你副组件传入Ref的时候

01:08:47.080 --> 01:08:49.080
我这边可以自定义

01:08:49.080 --> 01:08:52.080
这三个字化终点

01:08:52.080 --> 01:08:54.080
我自己来定义

01:08:54.080 --> 01:08:56.080
我要暴露给副组件

01:08:56.080 --> 01:08:58.080
哪些实例值

01:08:59.080 --> 01:09:00.080
OK

01:09:00.080 --> 01:09:02.080
我要暴露给副组件那些实例值

01:09:02.080 --> 01:09:04.080
我们这边我们来看一下

01:09:04.080 --> 01:09:07.350
我们这边的话

01:09:07.350 --> 01:09:10.350
首先还是先去这个官网

01:09:10.350 --> 01:09:12.350
官网我们去看一下这个Hook

01:09:12.350 --> 01:09:13.350
Hook在哪里找

01:09:13.350 --> 01:09:14.350
在这边

01:09:14.350 --> 01:09:15.350
这边Hook

01:09:15.350 --> 01:09:17.350
这官网单独开了一个分类

01:09:17.350 --> 01:09:19.350
这边的话有一个

01:09:19.350 --> 01:09:21.350
Hook API索引

01:09:21.350 --> 01:09:23.350
在这个Hook API索引里面

01:09:23.350 --> 01:09:26.350
它有所有的Hook

01:09:26.350 --> 01:09:28.350
这边的话在这里

01:09:28.350 --> 01:09:29.350
imparative handle

01:09:29.350 --> 01:09:31.350
这边我们来看一下它的这个使用

01:09:31.350 --> 01:09:32.350
它这边的话

01:09:32.350 --> 01:09:34.350
imparative handle

01:09:34.350 --> 01:09:35.350
这边的话有三个层属

01:09:35.350 --> 01:09:36.350
一个是Ref

01:09:36.350 --> 01:09:38.350
一个是Creat handle

01:09:38.350 --> 01:09:40.350
一个是Deep

01:09:40.350 --> 01:09:42.350
官网倒没有说太多

01:09:42.350 --> 01:09:43.350
没有说太多

01:09:43.350 --> 01:09:44.350
好来我们这边的话

01:09:44.350 --> 01:09:45.350
我们来看一下

01:09:45.350 --> 01:09:46.350
来看一下它这边是怎么用的

01:09:46.350 --> 01:09:47.350
这边的话

01:09:47.350 --> 01:09:49.350
它是一个函数组件

01:09:49.350 --> 01:09:50.350
函数组件

01:09:50.350 --> 01:09:51.350
然后接下来

01:09:51.350 --> 01:09:52.350
这边的话

01:09:52.350 --> 01:09:53.350
它是使用一个forwardRef

01:09:53.350 --> 01:09:55.350
做了一个转发

01:09:55.350 --> 01:09:57.350
做了一个转发之后

01:09:57.350 --> 01:09:58.350
然后接下来的话

01:09:58.350 --> 01:10:01.350
这边使用useimparative handle

01:10:01.350 --> 01:10:03.350
这边要做一个这个映射

01:10:03.350 --> 01:10:05.350
它其实整个这个官网说的

01:10:05.350 --> 01:10:08.350
说的非常的这个粗略

01:10:08.350 --> 01:10:09.350
对不对

01:10:09.350 --> 01:10:10.350
所以说这也导致

01:10:10.350 --> 01:10:12.350
就是很多同学跟我反映

01:10:12.350 --> 01:10:14.350
我看官网看不懂

01:10:14.350 --> 01:10:15.350
是这样子的

01:10:15.350 --> 01:10:16.350
有些时候

01:10:16.350 --> 01:10:17.350
它这个官网

01:10:17.350 --> 01:10:19.350
它的整个这个官方文档

01:10:19.350 --> 01:10:20.350
所以我们有些时候会说

01:10:20.350 --> 01:10:21.350
这个官方文档写的好

01:10:21.350 --> 01:10:23.350
这个官方文档写的不好

01:10:23.350 --> 01:10:24.350
就是这个原因

01:10:24.350 --> 01:10:25.350
OK

01:10:25.350 --> 01:10:26.350
但我们这边

01:10:26.350 --> 01:10:27.350
这个特点就是它在这边的话

01:10:27.350 --> 01:10:28.350
一般和什么

01:10:28.350 --> 01:10:30.350
和这个就是forwardRef

01:10:30.350 --> 01:10:31.350
一起使用

01:10:31.350 --> 01:10:33.350
forwardRef是什么

01:10:33.350 --> 01:10:34.350
刚才讲了的

01:10:34.350 --> 01:10:36.350
什么那个就是Ref转发

01:10:36.350 --> 01:10:37.350
对不对

01:10:37.350 --> 01:10:38.350
我给你写个例子

01:10:38.350 --> 01:10:40.350
写个例子你就明白了

01:10:40.350 --> 01:10:41.350
好

01:10:41.350 --> 01:10:42.350
我这边的话

01:10:42.350 --> 01:10:44.350
比如说把这边删了吧

01:10:44.350 --> 01:10:46.350
删了

01:10:46.350 --> 01:10:47.350
好

01:10:47.350 --> 01:10:48.350
这里

01:10:48.350 --> 01:10:50.350
首先留一个干净的

01:10:50.350 --> 01:10:52.350
OK

01:10:52.350 --> 01:10:53.350
好

01:10:53.350 --> 01:10:54.350
然后在这边

01:10:54.350 --> 01:10:56.350
引入我的这个值主键

01:10:56.350 --> 01:10:58.350
input

01:10:58.350 --> 01:11:00.350
input

01:11:00.350 --> 01:11:02.350
child.com

01:11:02.350 --> 01:11:04.350
from

01:11:04.350 --> 01:11:05.350
components

01:11:05.350 --> 01:11:06.350
下面的

01:11:06.350 --> 01:11:08.350
child.com

01:11:08.350 --> 01:11:09.350
首先引入

01:11:09.350 --> 01:11:10.350
引入了之后

01:11:10.350 --> 01:11:11.350
然后接下来的话

01:11:11.350 --> 01:11:13.350
我这边

01:11:13.350 --> 01:11:15.350
我这边使用这个值主键

01:11:15.350 --> 01:11:17.350
child.com

01:11:17.350 --> 01:11:18.350
OK

01:11:18.350 --> 01:11:19.350
使用

01:11:19.350 --> 01:11:20.350
这边就一个代表签就可以了

01:11:20.350 --> 01:11:21.350
child.com

01:11:21.350 --> 01:11:22.350
好

01:11:22.350 --> 01:11:23.350
然后接下来

01:11:23.350 --> 01:11:24.350
什么呢

01:11:24.350 --> 01:11:25.350
创建一个Ref

01:11:25.350 --> 01:11:27.350
input

01:11:27.350 --> 01:11:29.350
useRef

01:11:29.350 --> 01:11:31.350
然后from

01:11:31.350 --> 01:11:32.350
react

01:11:32.350 --> 01:11:33.350
对吧

01:11:33.350 --> 01:11:34.350
好

01:11:34.350 --> 01:11:35.350
我们这边

01:11:35.350 --> 01:11:36.350
我们来创建一个Ref

01:11:36.350 --> 01:11:37.350
comeRef

01:11:37.350 --> 01:11:39.350
等于一个useRef

01:11:39.350 --> 01:11:40.350
OK

01:11:40.350 --> 01:11:41.350
好

01:11:41.350 --> 01:11:42.350
然后接下来

01:11:42.350 --> 01:11:43.350
我们这边给它管理

01:11:43.350 --> 01:11:44.350
ref

01:11:44.350 --> 01:11:45.350
等于一个

01:11:45.350 --> 01:11:48.350
这个comeRef

01:11:48.350 --> 01:11:49.350
好

01:11:49.350 --> 01:11:50.350
那这边

01:11:50.350 --> 01:11:51.350
有同学就会提疑问了

01:11:51.350 --> 01:11:52.350
谢老师

01:11:52.350 --> 01:11:53.350
你刚才不是说过

01:11:53.350 --> 01:11:54.350
我们这个child.com

01:11:54.350 --> 01:11:55.350
child.com

01:11:55.350 --> 01:11:57.350
我这边把它改成一个那个

01:11:57.350 --> 01:11:59.350
改成一个韩束主键

01:11:59.350 --> 01:12:00.350
OK

01:12:00.350 --> 01:12:02.350
这边是一个值主键

01:12:02.350 --> 01:12:06.880
值主键

01:12:06.880 --> 01:12:09.880
值主键

01:12:09.880 --> 01:12:10.880
OK

01:12:10.880 --> 01:12:11.880
那有同学就会要说了

01:12:11.880 --> 01:12:12.880
你这个

01:12:12.880 --> 01:12:13.880
值主键

01:12:13.880 --> 01:12:14.880
它是一个韩束主键

01:12:14.880 --> 01:12:15.880
韩束主键

01:12:15.880 --> 01:12:16.880
你刚才不是说过

01:12:16.880 --> 01:12:17.880
这个韩束主键

01:12:17.880 --> 01:12:18.880
你这边是没办法用Ref的吗

01:12:18.880 --> 01:12:19.880
你用Ref

01:12:19.880 --> 01:12:21.880
你是以用不到它的

01:12:21.880 --> 01:12:22.880
对吧

01:12:22.880 --> 01:12:23.880
我们刚才在那个

01:12:23.880 --> 01:12:24.880
官网我们是不是也看到了

01:12:24.880 --> 01:12:25.880
有那么一句话

01:12:25.880 --> 01:12:26.880
对不对

01:12:26.880 --> 01:12:27.880
这么说

01:12:27.880 --> 01:12:28.880
确实没有错

01:12:28.880 --> 01:12:30.880
但是我在值主键

01:12:30.880 --> 01:12:31.880
这边我要做处理

01:12:31.880 --> 01:12:32.880
我这边的话

01:12:32.880 --> 01:12:33.880
不是说直接去

01:12:33.880 --> 01:12:35.880
导出这个韩束主键

01:12:35.880 --> 01:12:36.880
而是干嘛呢

01:12:36.880 --> 01:12:37.880
我这边的话是

01:12:37.880 --> 01:12:42.880
要做一个rekt.forwardRef

01:12:42.880 --> 01:12:45.880
这个forwardRef

01:12:45.880 --> 01:12:46.880
看到没有

01:12:46.880 --> 01:12:47.880
我这边导出的是什么

01:12:47.880 --> 01:12:48.880
导出的是最终通过

01:12:48.880 --> 01:12:50.880
rekt.forwardRef

01:12:50.880 --> 01:12:51.880
是包裹了的

01:12:51.880 --> 01:12:52.880
是处理过了的

01:12:52.880 --> 01:12:53.880
也就是它是不是

01:12:53.880 --> 01:12:55.880
返回的这个主键

01:12:55.880 --> 01:12:56.880
对不对

01:12:56.880 --> 01:12:57.880
它返回的主键

01:12:57.880 --> 01:12:58.880
ok

01:12:58.880 --> 01:12:59.880
那这边

01:12:59.880 --> 01:13:00.880
这边就可以直接

01:13:00.880 --> 01:13:01.880
通过Ref

01:13:01.880 --> 01:13:02.880
引用的到

01:13:02.880 --> 01:13:03.880
引用到之后

01:13:03.880 --> 01:13:05.880
然后接下来在我这边

01:13:05.880 --> 01:13:06.880
这边的话

01:13:06.880 --> 01:13:07.880
我就可以引入什么

01:13:07.880 --> 01:13:09.880
我就可以引入这个

01:13:09.880 --> 01:13:11.880
首先把那个

01:13:11.880 --> 01:13:12.880
useRef

01:13:12.880 --> 01:13:14.880
先引进来

01:13:14.880 --> 01:13:15.880
那还有一个什么

01:13:15.880 --> 01:13:16.880
还有一个use

01:13:16.880 --> 01:13:18.880
这个inpar

01:13:18.880 --> 01:13:19.880
太难念了

01:13:19.880 --> 01:13:20.880
inpar relative

01:13:20.880 --> 01:13:21.880
handle

01:13:21.880 --> 01:13:22.880
把这两个

01:13:22.880 --> 01:13:23.880
把它引进来

01:13:23.880 --> 01:13:24.880
好引进来之后

01:13:24.880 --> 01:13:25.880
然后将我们说下

01:13:25.880 --> 01:13:27.880
它究竟是要做什么事情

01:13:27.880 --> 01:13:28.880
我比如说我这边

01:13:28.880 --> 01:13:31.880
我这个主键

01:13:31.880 --> 01:13:32.880
我这边的话

01:13:32.880 --> 01:13:33.880
我给它创建一个Ref

01:13:33.880 --> 01:13:34.880
这边来一个

01:13:34.880 --> 01:13:36.880
这边的话就是

01:13:36.880 --> 01:13:37.880
const

01:13:37.880 --> 01:13:38.880
这边那就叫做什么

01:13:38.880 --> 01:13:39.880
叫做这个choud

01:13:39.880 --> 01:13:41.880
叫做choud

01:13:41.880 --> 01:13:42.880
choudRef

01:13:42.880 --> 01:13:46.880
等于一个useRef

01:13:46.880 --> 01:13:47.880
ok

01:13:47.880 --> 01:13:48.880
然后接下来

01:13:48.880 --> 01:13:49.880
我们在这边

01:13:49.880 --> 01:13:50.880
我们订一个Ref

01:13:50.880 --> 01:13:53.880
Ref等于一个choudRef

01:13:53.880 --> 01:13:54.880
好那现在呢

01:13:54.880 --> 01:13:55.880
我这个choudRef

01:13:55.880 --> 01:13:56.880
是吧指向哪里

01:13:56.880 --> 01:13:57.880
这边呢

01:13:57.880 --> 01:13:58.880
是不是就是

01:13:58.880 --> 01:13:59.880
指向这个DIV

01:13:59.880 --> 01:14:00.880
对不对

01:14:00.880 --> 01:14:01.880
好然后接下来

01:14:01.880 --> 01:14:02.880
你在这边

01:14:02.880 --> 01:14:03.880
你在这边的话

01:14:03.880 --> 01:14:04.880
你可以使用什么呢

01:14:04.880 --> 01:14:05.880
使用这个use

01:14:05.880 --> 01:14:07.880
inpar relative

01:14:07.880 --> 01:14:08.880
inpar relative

01:14:08.880 --> 01:14:09.880
对的

01:14:09.880 --> 01:14:10.880
useinpar relative

01:14:10.880 --> 01:14:11.880
handle

01:14:11.880 --> 01:14:12.880
这边你就可以

01:14:12.880 --> 01:14:13.880
干嘛呢

01:14:13.880 --> 01:14:14.880
你可以自定义

01:14:14.880 --> 01:14:16.880
自定义

01:14:16.880 --> 01:14:17.880
像什么呢

01:14:17.880 --> 01:14:19.880
像这个副组件

01:14:19.880 --> 01:14:22.880
像副组件

01:14:22.880 --> 01:14:25.880
要暴露的东西

01:14:25.880 --> 01:14:28.880
要暴露的东西

01:14:28.880 --> 01:14:29.880
ok

01:14:29.880 --> 01:14:30.880
它主要是起这个作用的

01:14:30.880 --> 01:14:31.880
这边的话

01:14:31.880 --> 01:14:32.880
官网刚才应该也说了吧

01:14:32.880 --> 01:14:33.880
对不对

01:14:33.880 --> 01:14:35.880
你这边在使用Refs

01:14:35.880 --> 01:14:37.880
注意这边是使用Refs

01:14:37.880 --> 01:14:40.880
使用Refs

01:14:40.880 --> 01:14:41.880
自定义

01:14:41.880 --> 01:14:42.880
使用Refs

01:14:42.880 --> 01:14:43.880
像副组件

01:14:43.880 --> 01:14:45.880
要暴露的这个东西

01:14:45.880 --> 01:14:46.880
它这边的话

01:14:46.880 --> 01:14:47.880
先说两个参数

01:14:47.880 --> 01:14:48.880
首先第一个

01:14:48.880 --> 01:14:49.880
它这边实际上是

01:14:49.880 --> 01:14:50.880
三个参数

01:14:50.880 --> 01:14:51.880
这边还有一个Deep

01:14:51.880 --> 01:14:52.880
Deep是你猜的猜的到

01:14:52.880 --> 01:14:53.880
这个应该是什么

01:14:53.880 --> 01:14:54.880
这边是乘数

01:14:54.880 --> 01:14:55.880
对不对

01:14:55.880 --> 01:14:56.880
你看就是乘数

01:14:56.880 --> 01:14:57.880
要暴露这个

01:14:57.880 --> 01:14:58.880
给副组件

01:14:58.880 --> 01:14:59.880
因为我有可能就是什么

01:14:59.880 --> 01:15:00.880
有可能就是副组件

01:15:00.880 --> 01:15:01.880
上面还有副组件

01:15:01.880 --> 01:15:02.880
对吧

01:15:02.880 --> 01:15:03.880
这边应该是乘数

01:15:03.880 --> 01:15:04.880
好

01:15:04.880 --> 01:15:05.880
这边

01:15:05.880 --> 01:15:06.880
这边首先它

01:15:06.880 --> 01:15:07.880
第一个参数

01:15:07.880 --> 01:15:10.960
这边的话这个Ref

01:15:10.960 --> 01:15:11.960
Ref

01:15:11.960 --> 01:15:12.960
第一个Ref是什么呢

01:15:12.960 --> 01:15:13.960
第一个Ref

01:15:13.960 --> 01:15:14.960
是副组件

01:15:14.960 --> 01:15:17.960
传递过来的Ref

01:15:17.960 --> 01:15:18.960
第一个

01:15:18.960 --> 01:15:22.460
第一个

01:15:22.460 --> 01:15:23.460
是什么呢

01:15:23.460 --> 01:15:25.460
是这个副组件

01:15:25.460 --> 01:15:29.460
传递过来的Ref

01:15:29.460 --> 01:15:30.460
OK

01:15:30.460 --> 01:15:31.460
也就是说我这边

01:15:31.460 --> 01:15:32.460
除了有Pops以外

01:15:32.460 --> 01:15:33.460
我这边副组件

01:15:33.460 --> 01:15:35.460
把这个拿过来

01:15:35.460 --> 01:15:36.460
关了

01:15:36.460 --> 01:15:37.460
我这边副组件

01:15:37.460 --> 01:15:38.460
副组件这边是不是在使用

01:15:38.460 --> 01:15:39.460
对不对

01:15:39.460 --> 01:15:40.460
在使用的话

01:15:40.460 --> 01:15:41.460
我这边副组件

01:15:41.460 --> 01:15:42.460
除了有Pops以外

01:15:42.460 --> 01:15:43.460
我这边还有什么呢

01:15:43.460 --> 01:15:45.460
还有Ref

01:15:45.460 --> 01:15:46.460
OK

01:15:46.460 --> 01:15:47.460
这是副组件

01:15:47.460 --> 01:15:48.460
传递过来的Ref

01:15:48.460 --> 01:15:49.460
好 再加第二个

01:15:49.460 --> 01:15:50.460
第二个参数

01:15:50.460 --> 01:15:51.460
第二个参数的话

01:15:51.460 --> 01:15:54.460
是一个回调函数

01:15:54.460 --> 01:15:55.460
这个回调函数

01:15:55.460 --> 01:15:56.460
这个回调函数

01:15:56.460 --> 01:15:57.460
返回一个什么呢

01:15:57.460 --> 01:15:59.460
返回一个对象

01:15:59.460 --> 01:16:00.460
可了没有

01:16:00.460 --> 01:16:01.460
返回一个对象

01:16:01.460 --> 01:16:02.460
第二个参数

01:16:02.460 --> 01:16:07.860
第二个参数

01:16:07.860 --> 01:16:08.860
第二个参数

01:16:08.860 --> 01:16:12.860
是一个回调函数

01:16:12.860 --> 01:16:19.750
该函数返回一个对象

01:16:19.750 --> 01:16:20.750
返回一个对象

01:16:20.750 --> 01:16:21.750
那这个对象有什么用呢

01:16:21.750 --> 01:16:23.750
这个对象里面就定义

01:16:23.750 --> 01:16:24.750
硬色关系

01:16:24.750 --> 01:16:27.750
这个对象里面就

01:16:27.750 --> 01:16:31.750
定义硬色关系

01:16:31.750 --> 01:16:32.750
硬色关系就是

01:16:32.750 --> 01:16:34.750
你这边具体要向

01:16:34.750 --> 01:16:36.750
这个副组件暴露东西

01:16:36.750 --> 01:16:39.750
也就是具体

01:16:39.750 --> 01:16:47.190
要向副组件暴露的东西

01:16:47.190 --> 01:16:48.190
OK

01:16:48.190 --> 01:16:49.190
比如说我这边

01:16:49.190 --> 01:16:50.190
我举个例子

01:16:50.190 --> 01:16:51.190
比如说我这边的话

01:16:51.190 --> 01:16:52.190
写一个这个click

01:16:52.190 --> 01:16:54.190
回头到副组件的话

01:16:54.190 --> 01:16:57.190
它这边外面就可以拿到这个click

01:16:57.190 --> 01:16:58.190
拿到这个

01:16:58.190 --> 01:16:59.190
这个click

01:16:59.190 --> 01:17:00.190
比如说我对应的是一个什么呢

01:17:00.190 --> 01:17:02.190
对应的是一个函数

01:17:02.190 --> 01:17:03.190
OK

01:17:03.190 --> 01:17:04.190
对应的是个函数

01:17:04.190 --> 01:17:05.190
那回头的话

01:17:05.190 --> 01:17:06.190
这个副组件这边

01:17:06.190 --> 01:17:07.190
它就可以拿到什么呢

01:17:07.190 --> 01:17:09.190
拿到你暴露的这个click

01:17:09.190 --> 01:17:10.190
调用这个click

01:17:10.190 --> 01:17:11.190
调用这个click

01:17:11.190 --> 01:17:13.190
就要执行这边

01:17:13.190 --> 01:17:14.190
对呀

01:17:14.190 --> 01:17:15.190
那我这边

01:17:15.190 --> 01:17:16.190
比如说我很简单

01:17:16.190 --> 01:17:18.190
我这边就答应

01:17:18.190 --> 01:17:19.190
做个答应

01:17:19.190 --> 01:17:20.190
答应什么呢

01:17:20.190 --> 01:17:21.190
CharterRiff

01:17:23.190 --> 01:17:26.190
CharterRiff.current

01:17:27.190 --> 01:17:28.190
对吧

01:17:28.190 --> 01:17:29.190
CharterRiff.current应该是谁

01:17:29.190 --> 01:17:30.190
是不是他

01:17:30.190 --> 01:17:31.190
是不是也是他

01:17:31.190 --> 01:17:32.190
对不对

01:17:32.190 --> 01:17:33.190
好那接下来

01:17:33.190 --> 01:17:35.190
再回到我们的这个副组件这边

01:17:35.190 --> 01:17:37.190
回到我们副组件这边

01:17:37.190 --> 01:17:38.190
回到我们副组件这边

01:17:38.190 --> 01:17:40.190
比如说我们这边一个button

01:17:40.190 --> 01:17:42.190
这边的话就比如说

01:17:42.190 --> 01:17:44.190
click嘛

01:17:44.190 --> 01:17:46.190
这边是unclick

01:17:46.190 --> 01:17:48.190
给它绑定一个实现

01:17:49.190 --> 01:17:51.190
好这边的话就是

01:17:51.190 --> 01:17:52.190
这边还没写

01:17:53.190 --> 01:17:55.190
这边等于个click handle

01:17:57.570 --> 01:17:58.570
这边

01:17:59.570 --> 01:18:00.570
function

01:18:00.570 --> 01:18:02.570
function click handle

01:18:02.570 --> 01:18:04.570
我们这边点击这个按钮的时候

01:18:04.570 --> 01:18:05.570
这边是不是会

01:18:05.570 --> 01:18:07.570
这个是这个

01:18:07.570 --> 01:18:08.570
点击的这个回调

01:18:08.570 --> 01:18:09.570
对不对

01:18:09.570 --> 01:18:10.570
好在这边

01:18:10.570 --> 01:18:11.570
这边的话我们这边

01:18:11.570 --> 01:18:12.570
CharterRiff

01:18:12.570 --> 01:18:15.940
首先CharterRiff

01:18:15.940 --> 01:18:16.940
CharterRiff

01:18:16.940 --> 01:18:18.940
然后接下来点这个current

01:18:19.940 --> 01:18:20.940
拿到谁

01:18:20.940 --> 01:18:22.940
拿到这个整个这个组组件

01:18:22.940 --> 01:18:23.940
对吧

01:18:23.940 --> 01:18:24.940
拿到这个组组件

01:18:24.940 --> 01:18:25.940
接下来这边的话

01:18:25.940 --> 01:18:26.940
你可以调用什么

01:18:26.940 --> 01:18:27.940
可以调用这边这个

01:18:27.940 --> 01:18:28.940
它暴露给你的这个方法

01:18:28.940 --> 01:18:29.940
比如他这边

01:18:29.940 --> 01:18:30.940
是不是给你暴露了

01:18:30.940 --> 01:18:31.940
一个click方法

01:18:31.940 --> 01:18:32.940
好你这边

01:18:32.940 --> 01:18:33.940
你这边

01:18:33.940 --> 01:18:34.940
你就可以干嘛

01:18:34.940 --> 01:18:35.940
这边就可以调用

01:18:35.940 --> 01:18:36.940
这个click方法

01:18:37.940 --> 01:18:38.940
OK

01:18:38.940 --> 01:18:39.940
好来我们这边

01:18:39.940 --> 01:18:40.940
我们来看一下

01:18:41.940 --> 01:18:42.940
看一下

01:18:42.940 --> 01:18:44.940
但这个用的很少

01:18:44.940 --> 01:18:45.940
用的很少

01:18:45.940 --> 01:18:46.940
因为我们说过

01:18:46.940 --> 01:18:47.940
CharterRiff

01:18:47.940 --> 01:18:48.940
它就是一个反模式

01:18:48.940 --> 01:18:49.940
对吧

01:18:49.940 --> 01:18:50.940
你看这边

01:18:50.940 --> 01:18:51.940
就拿到了

01:18:51.940 --> 01:18:52.940
对不对

01:18:52.940 --> 01:18:53.940
就拿到了

01:18:53.940 --> 01:18:54.940
OK

01:18:54.940 --> 01:18:55.940
也就是我这边

01:18:55.940 --> 01:18:56.940
我组组件

01:18:56.940 --> 01:18:57.940
我想给你暴露些什么方法

01:18:57.940 --> 01:18:59.940
那叫你外接的话

01:18:59.940 --> 01:19:00.940
你这边就可以

01:19:00.940 --> 01:19:01.940
调用什么方法

01:19:01.940 --> 01:19:02.940
比如我们这边

01:19:02.940 --> 01:19:03.940
我们再来一个

01:19:03.940 --> 01:19:04.940
这边function

01:19:05.940 --> 01:19:07.940
function比較test

01:19:08.940 --> 01:19:09.940
对吧

01:19:09.940 --> 01:19:10.940
这边打印一句话

01:19:10.940 --> 01:19:11.940
比如说

01:19:11.940 --> 01:19:12.940
这是

01:19:13.940 --> 01:19:15.940
这是组组件的

01:19:16.940 --> 01:19:17.940
test的方法

01:19:18.940 --> 01:19:19.940
test

01:19:19.940 --> 01:19:20.940
方法

01:19:21.940 --> 01:19:22.940
对吧

01:19:22.940 --> 01:19:23.940
好人家这边

01:19:23.940 --> 01:19:24.940
这边我们再来

01:19:24.940 --> 01:19:25.940
这边让我们叫做

01:19:25.940 --> 01:19:26.940
这个

01:19:27.940 --> 01:19:29.940
test

01:19:29.940 --> 01:19:30.940
handle

01:19:31.940 --> 01:19:32.940
对应的是什么

01:19:32.940 --> 01:19:33.940
对应的是这个test

01:19:34.940 --> 01:19:35.940
test handle

01:19:35.940 --> 01:19:37.940
对应的是这个test

01:19:37.940 --> 01:19:38.940
好然后回头的话

01:19:38.940 --> 01:19:39.940
我在这边

01:19:39.940 --> 01:19:40.940
我在这边

01:19:40.940 --> 01:19:41.940
我就可以干嘛

01:19:41.940 --> 01:19:42.940
so comeRiff

01:19:43.940 --> 01:19:44.940
点current

01:19:46.940 --> 01:19:48.940
点这个test handle

01:19:49.940 --> 01:19:50.940
对吧

01:19:50.940 --> 01:19:51.940
好这边来看一下

01:19:53.940 --> 01:19:54.940
刷新

01:19:54.940 --> 01:19:55.940
走

01:19:55.940 --> 01:19:56.940
看到没有

01:19:56.940 --> 01:19:57.940
这边打印出

01:19:57.940 --> 01:19:58.940
刚才那个

01:19:58.940 --> 01:19:59.940
动物元素

01:19:59.940 --> 01:20:00.940
以及触发什么

01:20:00.940 --> 01:20:02.940
触发指数件的方法

01:20:02.940 --> 01:20:03.940
对不对

01:20:03.940 --> 01:20:04.940
也就是说我这边

01:20:04.940 --> 01:20:05.940
我想暴露

01:20:05.940 --> 01:20:06.940
我想暴露

01:20:06.940 --> 01:20:07.940
给这个副组件

01:20:07.940 --> 01:20:08.940
想暴露什么

01:20:08.940 --> 01:20:09.940
你就写到这里面

01:20:09.940 --> 01:20:10.940
就可以了

01:20:10.940 --> 01:20:11.940
所以他这边叫做

01:20:11.940 --> 01:20:12.940
use imperative

01:20:12.940 --> 01:20:13.940
紧急的

01:20:13.940 --> 01:20:14.940
对吧紧急的

01:20:14.940 --> 01:20:15.940
我紧急的

01:20:15.940 --> 01:20:16.940
他要向这个副组件

01:20:16.940 --> 01:20:17.940
暴露这个方法

01:20:17.940 --> 01:20:18.940
暴露这个方法

01:20:19.940 --> 01:20:21.940
就这么一个意思

01:20:23.940 --> 01:20:25.940
关于整个Riff的话

01:20:25.940 --> 01:20:27.940
差不多就讲完了

01:20:27.940 --> 01:20:28.940
我们这边Riff的话

01:20:28.940 --> 01:20:29.940
我们就把整个Riff相关的

01:20:29.940 --> 01:20:31.940
就都讲了

01:20:31.940 --> 01:20:32.940
我们后面我们就这样子

01:20:32.940 --> 01:20:34.940
比如说我们这边比如说

01:20:34.940 --> 01:20:35.940
下几颗下几颗

01:20:35.940 --> 01:20:36.940
应该是讲那个context

01:20:37.940 --> 01:20:38.940
讲context

01:20:38.940 --> 01:20:39.940
我们就把这个

01:20:39.940 --> 01:20:40.940
context相关的

01:20:40.940 --> 01:20:41.940
我们就全部把它讲了

01:20:41.940 --> 01:20:42.940
对吧

01:20:42.940 --> 01:20:43.940
然后我们这边讲Riff

01:20:43.940 --> 01:20:44.940
我们就把这个Riff

01:20:44.940 --> 01:20:46.940
整个这个旧的API

01:20:46.940 --> 01:20:47.940
CreatorRiff

01:20:47.940 --> 01:20:48.940
这个转发

01:20:48.940 --> 01:20:49.940
包括这个

01:20:49.940 --> 01:20:50.940
相关的这些户客

01:20:50.940 --> 01:20:51.940
就都把它讲了

01:20:51.940 --> 01:20:52.940
这样子的话

01:20:52.940 --> 01:20:54.940
你后面就没有必要

01:20:54.940 --> 01:20:55.940
单独拿一些课

01:20:55.940 --> 01:20:57.940
单独讲那个户客

01:20:57.940 --> 01:20:58.940
我觉得没有必要

01:20:58.940 --> 01:20:59.940
对吧

01:20:59.940 --> 01:21:00.940
你这个户客的话

01:21:00.940 --> 01:21:02.940
就穿插到各个知识点里面

01:21:02.940 --> 01:21:03.940
就把它讲了

01:21:03.940 --> 01:21:04.940
OK

01:21:04.940 --> 01:21:05.940
这就是关于

01:21:05.940 --> 01:21:07.940
这些课的这个内容

01:21:07.940 --> 01:21:08.940
Riff

01:21:08.940 --> 01:21:10.940
但下来的话再看一下

01:21:10.940 --> 01:21:11.940
有些代码的话

01:21:11.940 --> 01:21:12.940
你自己把它敲一遍

01:21:12.940 --> 01:21:13.940
把它过一下

01:21:13.940 --> 01:21:16.940
过一下基本就没有太大问题了

01:21:16.940 --> 01:21:17.940
OK

01:21:17.940 --> 01:21:19.940
这些课的话就到这里

01:21:19.940 --> 01:21:20.940
再见

