WEBVTT

00:00.000 --> 00:03.000
ok 这节课的话 咱们来看一下这个

00:03.000 --> 00:05.000
context

00:05.000 --> 00:07.000
这个算是个重点内容

00:07.000 --> 00:10.000
啊 重点内容 非常重要的一个这个知识点

00:10.000 --> 00:14.000
包括我们后面 我们后面在写比如说这个mini react

00:14.000 --> 00:16.000
或者这个mini的这个reactor rotor

00:16.000 --> 00:18.000
包括这个redux的时候

00:18.000 --> 00:20.000
我们都会用到它 都会用到它

00:20.000 --> 00:23.000
包括你平时啊 平时你做开发的话

00:23.000 --> 00:26.000
你涉及到一个组件之间这个状态的共享

00:26.000 --> 00:28.000
你也可以使用它

00:28.000 --> 00:30.000
ok 来我们一起来看一下啊

00:30.000 --> 00:33.000
这边主要包含这么几个知识点

00:33.000 --> 00:35.000
首先就是你要明白这个context

00:35.000 --> 00:38.000
它解决什么样的问题

00:38.000 --> 00:40.000
它是用来什么 解决什么问题的

00:40.000 --> 00:42.000
然后第二个就是什么 这个就是它的一个基本用法

00:42.000 --> 00:44.000
对吧 你要回去用

00:44.000 --> 00:47.000
第三个的话就是它相关的这个hook

00:47.000 --> 00:49.000
这个我们之前也说过了

00:49.000 --> 00:51.000
就我们这边在讲知识点的时候

00:51.000 --> 00:53.000
然后接下来和这个知识点相关的hook

00:53.000 --> 00:55.000
我们就一起讲了

00:55.000 --> 00:57.000
不要单独开一节课

00:57.000 --> 00:59.000
然后讲这个hook 讲那个hook

00:59.000 --> 01:01.000
对吧 这样子讲其实要好一些

01:01.000 --> 01:03.000
对吧 你刚好就在学这个知识点

01:03.000 --> 01:05.000
在学这个知识点 然后刚好就把这个hook

01:05.000 --> 01:08.000
相关的hook一起就把它看了

01:08.000 --> 01:09.000
ok

01:09.000 --> 01:10.000
好了 我们一个一个来

01:10.000 --> 01:12.000
首先的话 这边第一个

01:12.000 --> 01:14.000
这个context

01:14.000 --> 01:16.000
它要解决的这个问题

01:16.000 --> 01:18.000
它要解决什么问题呢

01:18.000 --> 01:20.000
它实际上就是要解决一个

01:20.000 --> 01:24.000
组件之间状态共享的问题

01:24.000 --> 01:25.000
就这么简单

01:25.000 --> 01:28.000
就组件之间状态共享问题

01:28.000 --> 01:29.000
比如说举个例子

01:29.000 --> 01:30.000
你看我这边的话

01:30.000 --> 01:32.000
我有一个这个组件数

01:32.000 --> 01:35.000
对吧 我们说过一般你那个组件

01:35.000 --> 01:37.000
组件那个组件牵套下来

01:37.000 --> 01:39.000
是不是也会形成一根这个一棵树

01:39.000 --> 01:41.000
就和那个多姆树一样

01:41.000 --> 01:43.000
对吧 比如说这个是我的app跟组件

01:43.000 --> 01:45.000
它有两个直组件

01:45.000 --> 01:47.000
这个sub-comp a

01:47.000 --> 01:48.000
sub-comp b

01:48.000 --> 01:50.000
好 a 下面又有两个什么呢

01:50.000 --> 01:52.000
就a-1 a-2

01:52.000 --> 01:54.000
这边的话 b-1 b-2

01:54.000 --> 01:56.000
好 那这边就会涉及到一个问题

01:56.000 --> 01:58.000
比如说我这个组件

01:58.000 --> 02:01.000
它这边的话有这个状态对吧

02:01.000 --> 02:02.000
我如何干嘛呢

02:02.000 --> 02:05.000
我如何这个共享给这个组件

02:05.000 --> 02:07.000
我如何给它呢

02:07.000 --> 02:09.000
那根据我们前面讲过

02:09.000 --> 02:11.000
我们的这个req它是什么

02:11.000 --> 02:13.000
它是不是单向数据流

02:13.000 --> 02:15.000
对不对 单向数据流

02:15.000 --> 02:16.000
那单向数据流的话

02:16.000 --> 02:17.000
那这边你就应该干嘛

02:17.000 --> 02:20.000
你就应该把这个状态提升到哪里

02:20.000 --> 02:23.000
是不是提升到app这个跟组件

02:23.000 --> 02:25.000
对不对 那app跟组件

02:25.000 --> 02:28.000
再一点一点的传递给它

02:28.000 --> 02:30.000
然后加这边再传递给它

02:30.000 --> 02:32.000
是不是一点点的这个留下去

02:32.000 --> 02:35.000
对不对 就正常情况下来讲的话

02:35.000 --> 02:37.000
你应该是把这个状态提升到

02:37.000 --> 02:40.000
他们两个这个公共的一个这个副组件

02:40.000 --> 02:42.000
OK 好 那这边的话

02:42.000 --> 02:44.000
你这样子提升的话

02:44.000 --> 02:46.000
你这个如果乘数不多的话

02:46.000 --> 02:48.000
到底还好 对吧

02:48.000 --> 02:50.000
就一乘一乘这个传递吗

02:50.000 --> 02:54.000
当我如果涉及到我这个乘数非常多的话

02:54.000 --> 02:56.000
你这样传递是不是就非常麻烦了

02:56.000 --> 02:58.000
对不对

02:58.000 --> 02:59.000
你看这边这边官方的话

02:59.000 --> 03:00.000
它也举了个例子

03:00.000 --> 03:02.000
我们这边来看一下这个官网

03:02.000 --> 03:03.000
在这里

03:03.000 --> 03:06.000
何时使用这个context

03:06.000 --> 03:08.000
大家可以把这个官方的这个例子

03:08.000 --> 03:09.000
把它看一下

03:09.000 --> 03:11.000
它这边有个什么

03:11.000 --> 03:13.000
这边是不是有个app组件

03:13.000 --> 03:14.000
再加这边有个什么

03:14.000 --> 03:16.000
这边是不是有个toolbar

03:16.000 --> 03:17.000
对吧

03:17.000 --> 03:19.000
然后下面下面又有个什么

03:19.000 --> 03:21.000
这个叫做sim的barton

03:21.000 --> 03:23.000
对吧一共三个组件

03:23.000 --> 03:25.000
只不过它写在一个文件里面的

03:25.000 --> 03:26.000
好 那现在的话就在这边

03:26.000 --> 03:27.000
这边传递一个什么

03:27.000 --> 03:29.000
是不是传递一个这个sim

03:29.000 --> 03:31.000
对应的只是dark

03:31.000 --> 03:32.000
传递给谁

03:32.000 --> 03:35.000
传递给这个toolbar

03:35.000 --> 03:37.000
但toolbar的话拿到这个pops

03:37.000 --> 03:38.000
拿到这个pops

03:38.000 --> 03:40.000
toolbar有没有用呢

03:40.000 --> 03:42.000
toolbar是没有用的

03:42.000 --> 03:44.000
谁想用这个sim等于dark

03:44.000 --> 03:45.000
谁想用

03:45.000 --> 03:47.000
是这个sim的barton

03:47.000 --> 03:49.000
这个组件想用

03:49.000 --> 03:50.000
这个组件想用

03:50.000 --> 03:51.000
但是你这边又是这种

03:51.000 --> 03:53.000
一层一层的这种嵌桃关系

03:53.000 --> 03:54.000
那没办法了

03:54.000 --> 03:57.000
对吧 那我先把这个pops传递给他

03:57.000 --> 03:59.000
传递给这个toolbar

03:59.000 --> 04:01.000
toolbar然后接下来这边再干嘛

04:01.000 --> 04:02.000
你看这边

04:02.000 --> 04:04.000
再继续传递

04:04.000 --> 04:05.000
传递给谁

04:05.000 --> 04:06.000
传递给他

04:06.000 --> 04:07.000
对不对

04:07.000 --> 04:09.000
你这样子的话那就是干嘛

04:09.000 --> 04:11.000
是非常的麻烦

04:11.000 --> 04:13.000
OK 那这个context的话

04:13.000 --> 04:16.000
就是为了解决这么一个问题

04:16.000 --> 04:17.000
明白没有

04:17.000 --> 04:19.000
我们看一下这边

04:19.000 --> 04:21.000
这边他就在举例子了

04:21.000 --> 04:22.000
这边使用context

04:22.000 --> 04:23.000
你可以避免什么呢

04:23.000 --> 04:24.000
其实就是这里

04:24.000 --> 04:26.000
这画重点

04:26.000 --> 04:28.000
避免通过中间元素

04:28.000 --> 04:30.000
传递pops

04:30.000 --> 04:33.000
context的话主要就是做这个事情的

04:33.000 --> 04:34.000
明白没有

04:34.000 --> 04:35.000
OK

04:35.000 --> 04:37.000
但有的同学肯定会问

04:37.000 --> 04:39.000
他说你这个属于这个

04:39.000 --> 04:42.000
主线之间的这个状态的共识

04:42.000 --> 04:45.000
你前面不是讲过这个玩意吗

04:45.000 --> 04:46.000
对不对

04:46.000 --> 04:48.000
你前面不是在入门篇

04:48.000 --> 04:50.000
我们不是已经学过这个redux了吗

04:50.000 --> 04:52.000
redux当时你讲的时候

04:52.000 --> 04:53.000
不就是解决这个问题的吗

04:53.000 --> 04:54.000
没错

04:54.000 --> 04:56.000
redux是解决这个问题

04:56.000 --> 04:58.000
但是redux它的这个原理

04:58.000 --> 04:59.000
其实就是什么呢

04:59.000 --> 05:01.000
就是基于context

05:01.000 --> 05:03.000
到时候我们写那个mini版

05:03.000 --> 05:05.000
这个redux的时候你就会看到

05:05.000 --> 05:06.000
其实内部就是用了什么呢

05:06.000 --> 05:09.000
就是用的是这个context

05:09.000 --> 05:10.000
所以如果你比如说

05:10.000 --> 05:11.000
你不想用这个redux

05:11.000 --> 05:12.000
不想用redux

05:12.000 --> 05:14.000
你直接用这个context行不行

05:14.000 --> 05:15.000
可以

05:15.000 --> 05:17.000
没问题

05:17.000 --> 05:18.000
明白没有

05:18.000 --> 05:19.000
所以我们为什么

05:19.000 --> 05:21.000
这边要学习这个context

05:21.000 --> 05:23.000
我如果不讲这个context的话

05:23.000 --> 05:25.000
后面讲那个redux

05:25.000 --> 05:27.000
原码的时候你听都听不懂

05:27.000 --> 05:29.000
OK

05:29.000 --> 05:30.000
好

05:30.000 --> 05:31.000
然后接下来我们这边要说一下

05:31.000 --> 05:33.000
关于这个context

05:33.000 --> 05:34.000
context的话

05:34.000 --> 05:36.000
如果你把它翻译成中文

05:36.000 --> 05:37.000
它叫做什么呢

05:37.000 --> 05:39.000
它叫做上下文

05:39.000 --> 05:40.000
叫做上下文

05:40.000 --> 05:43.000
那什么叫做上下文

05:43.000 --> 05:45.000
这个其实在咱们这个

05:45.000 --> 05:46.000
软件领域

05:46.000 --> 05:49.000
它其实是一个比较常见的这个词

05:49.000 --> 05:50.000
比较常见的词

05:50.000 --> 05:51.000
这个不仅仅是这个

05:51.000 --> 05:52.000
你学接词有

05:52.000 --> 05:54.000
你学其他语言里面的话

05:54.000 --> 05:57.000
你也会就是听到这个上下文

05:57.000 --> 05:58.000
也会听到这个词语

05:58.000 --> 06:00.000
非常常见的一个词

06:00.000 --> 06:01.000
变成我们之前

06:01.000 --> 06:03.000
其实我们学这个接词的时候

06:03.000 --> 06:05.000
我们之前是不是也学习过

06:05.000 --> 06:07.000
这个执行上下文

06:07.000 --> 06:08.000
对不对

06:08.000 --> 06:09.000
执行上下文

06:09.000 --> 06:12.000
那究竟什么是上下文

06:12.000 --> 06:14.000
我相信到现在估计有的人

06:14.000 --> 06:16.000
都还没搞清楚

06:16.000 --> 06:17.000
都还没搞清楚

06:17.000 --> 06:18.000
究竟啥是上下文

06:18.000 --> 06:19.000
好

06:19.000 --> 06:20.000
上下文的话

06:20.000 --> 06:22.000
你不用把它理解得那么复杂

06:22.000 --> 06:23.000
什么是上下文

06:23.000 --> 06:26.000
上下文就是你代码执行时

06:26.000 --> 06:29.000
所需的数据环境信息

06:29.000 --> 06:30.000
好

06:30.000 --> 06:32.570
这个话重点

06:32.570 --> 06:33.570
OK

06:33.570 --> 06:36.570
你所需的数据环境信息

06:36.570 --> 06:38.570
比如说举个例子

06:38.570 --> 06:40.570
我们比如说我们写的这个接识原码

06:40.570 --> 06:41.570
接识原码的话

06:41.570 --> 06:42.570
它会经过什么

06:42.570 --> 06:44.570
是不是会经过预编译

06:44.570 --> 06:47.570
这个之前在讲执行上下文的时候

06:47.570 --> 06:48.570
我讲过的

06:48.570 --> 06:49.570
如果我没讲过

06:49.570 --> 06:50.570
其他老师肯定也讲过

06:50.570 --> 06:51.570
陈哥也讲过

06:51.570 --> 06:53.570
那个袁老师也讲过

06:53.570 --> 06:54.570
对吧

06:54.570 --> 06:56.570
你这个会进行个预编译

06:56.570 --> 06:57.570
预编译的话

06:57.570 --> 06:58.570
它这边的话

06:58.570 --> 06:59.570
就会生成一个什么

06:59.570 --> 07:01.570
生成一个这个上下文环境

07:01.570 --> 07:03.570
上下文环境里面就包含什么

07:03.570 --> 07:05.570
它就会生成两块

07:05.570 --> 07:09.070
换个图吧

07:09.070 --> 07:10.070
好

07:10.070 --> 07:13.070
比较这边是你的一个这个接识的原码

07:13.070 --> 07:14.070
对不对

07:14.070 --> 07:15.070
接识的原码

07:15.070 --> 07:16.070
OK

07:16.070 --> 07:17.070
这个原码的话

07:17.070 --> 07:18.070
它这边会干嘛呢

07:18.070 --> 07:20.070
这边让它会对你的这个原码

07:20.070 --> 07:21.070
进行一个什么

07:21.070 --> 07:22.070
进行一个预编译

07:22.070 --> 07:23.070
预编译的话

07:23.070 --> 07:25.070
这边它就会生成一个什么

07:25.070 --> 07:27.070
生成一个这个上下文环境

07:27.070 --> 07:28.070
上下文环境里面

07:28.070 --> 07:29.070
里面就有什么

07:29.070 --> 07:31.070
里面就有这个

07:31.070 --> 07:32.070
那个叫什么

07:32.070 --> 07:33.070
vio

07:34.070 --> 07:36.070
变量对象

07:36.070 --> 07:37.070
还会有什么呢

07:37.070 --> 07:39.070
可执行代码

07:39.070 --> 07:41.070
可执行

07:41.070 --> 07:43.070
这边触摸版写字

07:43.070 --> 07:45.070
不是太好写

07:45.070 --> 07:46.070
可执行

07:46.070 --> 07:48.070
我就写个可执行就可以了

07:48.070 --> 07:50.070
可执行这个代码

07:50.070 --> 07:52.070
它就会生成这两个东西

07:52.070 --> 07:53.070
这两个东西

07:53.070 --> 07:54.070
可执行代码

07:54.070 --> 07:55.070
顾名思义就是什么

07:55.070 --> 07:57.070
就是你这边的一行一行代码

07:57.070 --> 07:58.070
对不对

07:58.070 --> 07:59.070
哪些是需要执行的

07:59.070 --> 08:00.070
然后接下它就干嘛呢

08:00.070 --> 08:02.070
它就一句一句的执行

08:02.070 --> 08:03.070
那一句一句执行

08:03.070 --> 08:04.070
但是执行代码的途中

08:04.070 --> 08:06.070
会遇到什么呢

08:06.070 --> 08:09.070
会遇到就是比较变量

08:09.070 --> 08:10.070
对不对

08:10.070 --> 08:11.070
你在执行代码的途中

08:11.070 --> 08:12.070
会遇到变量

08:12.070 --> 08:13.070
会遇到函数

08:13.070 --> 08:15.070
那这些要用到的变量

08:15.070 --> 08:17.070
要用到的函数去哪去取

08:17.070 --> 08:19.070
什么就去这个vio这边去取

08:19.070 --> 08:20.070
对不对

08:20.070 --> 08:22.070
那什么叫做上下文

08:22.070 --> 08:24.070
这边的话就是你所用到的

08:24.070 --> 08:25.070
数据环境信息

08:25.070 --> 08:27.070
我一旦要用到变量

08:27.070 --> 08:29.070
去上下文里面去找

08:29.070 --> 08:31.070
如果我要用到这个函数

08:31.070 --> 08:33.070
去上下文里面去找

08:33.070 --> 08:34.070
可能没有

08:34.070 --> 08:37.070
我这边我举了一个生活中的例子

08:37.070 --> 08:39.070
生活中其实也有类似的场景

08:39.070 --> 08:41.070
比如你在厨房做饭

08:41.070 --> 08:43.070
我这边放了张厨房的土

08:43.070 --> 08:45.070
你在厨房做饭

08:45.070 --> 08:46.070
那这个的话就是

08:46.070 --> 08:48.070
一个你的上下文环境

08:48.070 --> 08:49.070
看到没有

08:49.070 --> 08:50.070
整个厨房

08:50.070 --> 08:51.070
这个厨房就是一个

08:51.070 --> 08:53.070
你的上下文环境

08:53.070 --> 08:54.070
你周围有什么

08:54.070 --> 08:55.070
你周围有各种各样

08:55.070 --> 08:57.070
你要用到的这个厨具

08:57.070 --> 08:58.070
有什么菜刀

08:58.070 --> 08:59.070
按板

08:59.070 --> 09:00.070
锅碗瓢盆

09:00.070 --> 09:01.070
这些

09:01.070 --> 09:02.070
各种各样的

09:02.070 --> 09:04.070
这些工具就构成了一个什么

09:04.070 --> 09:07.070
构成了一个上下文环境

09:07.070 --> 09:08.070
回头你比如说

09:08.070 --> 09:09.070
你要做饭

09:09.070 --> 09:10.070
你要用到这个菜刀

09:10.070 --> 09:11.070
你直接干嘛

09:11.070 --> 09:12.070
你直接是不是从这个

09:12.070 --> 09:13.070
上下文环境里面

09:13.070 --> 09:15.070
是不是去取就可以了

09:15.070 --> 09:16.070
你要用到这个按板

09:16.070 --> 09:17.070
按板的话是不是也是

09:17.070 --> 09:18.070
直接从这个

09:18.070 --> 09:20.070
上下文环境里面去取就可以了

09:20.070 --> 09:21.070
对不对

09:21.070 --> 09:23.070
这就叫做上下文环境

09:23.070 --> 09:24.070
没有没有

09:24.070 --> 09:25.070
包括我们这边

09:25.070 --> 09:26.070
context

09:26.070 --> 09:27.070
context也是这样子

09:27.070 --> 09:29.070
这边创建这么一个环境

09:29.070 --> 09:31.070
回头这个其他主见

09:31.070 --> 09:32.070
然后比如说

09:32.070 --> 09:33.070
要获取什么数据

09:33.070 --> 09:34.070
对吧

09:34.070 --> 09:35.070
要共享什么数据

09:35.070 --> 09:36.070
直接从这个

09:36.070 --> 09:38.070
上下文环境里面去取就可以了

09:38.070 --> 09:41.070
就这个意思

09:41.070 --> 09:42.070
好

09:42.070 --> 09:43.070
这是关于这个

09:43.070 --> 09:44.070
首先这个context

09:44.070 --> 09:47.070
首先做一个简单的介绍

09:47.070 --> 09:48.070
好

09:48.070 --> 09:49.070
接下来的话咱们来看一下

09:49.070 --> 09:50.070
关于这个context

09:50.070 --> 09:52.070
它的一个用法

09:52.070 --> 09:54.070
那这个context用法的话

09:54.070 --> 09:56.070
这个官方对于这个context

09:56.070 --> 09:57.070
它分成了什么

09:57.070 --> 09:58.070
分成了旧版API

09:58.070 --> 10:00.070
和这个新版这个API

10:00.070 --> 10:02.070
以前这个袁老师在讲的时候

10:02.070 --> 10:03.070
他是把两个版本都讲了

10:03.070 --> 10:04.070
又讲了旧版

10:04.070 --> 10:05.070
又讲了新版

10:05.070 --> 10:08.070
但现在到了这个react18之后

10:08.070 --> 10:10.070
我觉得这个没有太大必要了

10:10.070 --> 10:12.070
没有必要再讲这个旧版了

10:12.070 --> 10:13.070
OK

10:13.070 --> 10:14.070
如果你这边你想看旧版的话

10:14.070 --> 10:16.070
你自己去看他这个文档就可以了

10:16.070 --> 10:19.070
我把这个链接放在这里了

10:19.070 --> 10:21.070
这边过时的这个context

10:21.070 --> 10:23.070
你这边自己看一下就可以了

10:23.070 --> 10:24.070
OK

10:24.070 --> 10:25.070
我们这边

10:25.070 --> 10:26.070
我们直接就看什么呢

10:26.070 --> 10:27.070
我们直接就看新版

10:27.070 --> 10:29.070
你以后写肯定也是写新版吧

10:29.070 --> 10:31.070
你不可能写过时的API吗

10:31.070 --> 10:32.070
对不对

10:32.070 --> 10:33.070
OK

10:33.070 --> 10:34.070
而这新版是怎么做的呢

10:34.070 --> 10:35.070
新版的话

10:35.070 --> 10:36.070
首先你这边

10:36.070 --> 10:39.070
他给你提供了一个静态方法

10:39.070 --> 10:41.070
叫做crate context

10:41.070 --> 10:42.070
这种形式的话

10:42.070 --> 10:44.070
我们其实很熟悉了

10:44.070 --> 10:47.070
我们上集有个叫做crate ref

10:47.070 --> 10:48.070
对不对

10:48.070 --> 10:51.070
还有最早的crate element

10:51.070 --> 10:52.070
对吧

10:52.070 --> 10:53.070
所以这种方式

10:53.070 --> 10:54.070
我们其实很熟悉

10:54.070 --> 10:55.070
crate context

10:55.070 --> 10:57.070
那顾名思义就是干嘛

10:58.070 --> 11:00.070
是不是创建一个这个

11:00.070 --> 11:02.070
上下文的这个对象

11:02.070 --> 11:03.070
对不对

11:03.070 --> 11:05.070
创建了之后把它导出出去

11:05.070 --> 11:06.070
好

11:06.070 --> 11:08.070
来我们这边来写一下

11:08.070 --> 11:09.070
打开

11:09.070 --> 11:11.070
这是上级课的代码

11:11.070 --> 11:13.070
上级课的代码

11:13.070 --> 11:15.070
我们这边新建一个

11:15.070 --> 11:17.070
新建一个叫做context

11:17.070 --> 11:19.070
一般我们这个上下文的话

11:19.070 --> 11:22.070
我们会单独建一个这个文件夹

11:22.070 --> 11:23.070
单独建一个文件夹

11:23.070 --> 11:24.070
然后下这边

11:24.070 --> 11:27.070
写一个index.js

11:27.070 --> 11:28.070
OK

11:28.070 --> 11:30.070
好在这里面

11:30.070 --> 11:32.070
import

11:32.070 --> 11:33.070
import

11:33.070 --> 11:35.070
react

11:35.070 --> 11:36.070
from

11:36.070 --> 11:39.340
from

11:39.340 --> 11:41.340
react

11:41.340 --> 11:42.340
好

11:42.340 --> 11:43.340
然后接下来这边

11:43.340 --> 11:44.340
通过什么呢

11:44.340 --> 11:45.340
通过react

11:45.340 --> 11:46.340
它有个静态方法

11:46.340 --> 11:48.340
叫做crate context

11:48.340 --> 11:49.340
通过它

11:49.340 --> 11:51.340
所以创建一个上下文

11:51.340 --> 11:53.340
把这个上下文保存到一个

11:53.340 --> 11:54.340
变量里面

11:54.340 --> 11:57.340
叫做my context

11:57.340 --> 11:58.340
对吧

11:58.340 --> 11:59.340
好

11:59.340 --> 12:00.340
然后接下来把这玩意儿干嘛呢

12:00.340 --> 12:02.340
把它导出出去

12:02.340 --> 12:04.340
export default

12:04.340 --> 12:06.340
my context

12:06.340 --> 12:07.340
很简单吧

12:07.340 --> 12:08.340
就上行代码

12:08.340 --> 12:09.340
对不对

12:09.340 --> 12:10.340
就上行代码

12:10.340 --> 12:12.340
上行代码你这个导入不算

12:12.340 --> 12:13.340
实际上就是这边就干嘛

12:13.340 --> 12:15.340
这边就是调用了一下

12:15.340 --> 12:16.340
crate context

12:16.340 --> 12:18.340
创建一个上下文对象

12:18.340 --> 12:20.340
我们称之为上下文对象

12:20.340 --> 12:22.340
上下文对象

12:24.340 --> 12:25.340
ok

12:25.340 --> 12:27.340
创建一个上下文对象之后

12:27.340 --> 12:28.340
把它干嘛

12:28.340 --> 12:29.340
所以把它导出出去

12:29.340 --> 12:30.340
对吧

12:30.340 --> 12:31.340
好

12:31.340 --> 12:33.340
然后接下来来到我们的这个app

12:33.340 --> 12:35.340
来到app这边

12:35.340 --> 12:37.340
然后再电到风扇又开始

12:37.340 --> 12:38.340
转起来了

12:38.340 --> 12:41.340
上午讲那个ref的时候

12:41.340 --> 12:43.340
这个风扇都还没转

12:45.340 --> 12:47.340
这个先注视掉吧

12:47.340 --> 12:48.340
好

12:48.340 --> 12:49.340
这边的话

12:49.340 --> 12:50.340
我们把这个上下文对象

12:50.340 --> 12:52.340
我们把它导进来

12:52.340 --> 12:55.340
import my context

12:55.340 --> 12:57.340
然后from

12:57.340 --> 13:00.340
当前目楼下面的context

13:01.340 --> 13:03.340
把它导入进来

13:03.340 --> 13:05.660
好

13:05.660 --> 13:06.660
接下来的话咱们先不着急

13:06.660 --> 13:07.660
咱们这边的话

13:07.660 --> 13:08.660
咱们把它打印出来

13:08.660 --> 13:10.660
我们看一下

13:10.660 --> 13:11.660
看一下这边的话

13:11.660 --> 13:13.660
你通过这个crate context

13:13.660 --> 13:16.660
创建出来的究竟是个什么东西

13:16.660 --> 13:17.660
对吧

13:17.660 --> 13:18.660
context

13:18.660 --> 13:19.660
ok

13:19.660 --> 13:21.660
这边的话就写个Hello吧

13:21.660 --> 13:23.660
这边就

13:23.660 --> 13:24.660
写个diw

13:24.660 --> 13:25.660
好了

13:25.660 --> 13:26.660
ok

13:26.660 --> 13:27.660
保存

13:27.660 --> 13:28.660
保存了之后

13:28.660 --> 13:30.660
然后在这边咱们来看一下

13:30.660 --> 13:34.120
好

13:34.120 --> 13:35.120
这边控制台

13:35.120 --> 13:36.120
你看

13:36.120 --> 13:37.120
它这边的话是一个什么

13:37.120 --> 13:38.120
是不是一个object

13:38.120 --> 13:39.120
我们刚才说过

13:39.120 --> 13:41.120
你创建的是一个上下文什么

13:41.120 --> 13:42.120
上下文对象

13:42.120 --> 13:43.120
对吧

13:43.120 --> 13:44.120
所以这边是个object

13:44.120 --> 13:46.120
而object里面有什么呢

13:46.120 --> 13:48.120
object你展开的话

13:48.120 --> 13:49.120
这边

13:49.120 --> 13:50.120
它这边会有一些这个

13:50.120 --> 13:52.120
就是隐藏的隐藏的这些属性

13:52.120 --> 13:54.120
这些我们不管它

13:54.120 --> 13:57.120
最重要的就是这两个东西

13:57.120 --> 13:59.120
一个叫做provider

13:59.120 --> 14:02.120
一个叫做consumer

14:02.120 --> 14:03.120
这个provider

14:03.120 --> 14:04.120
这两个是什么

14:04.120 --> 14:06.120
这两个是两个组件

14:06.120 --> 14:08.120
注意这两个是两个组件

14:08.120 --> 14:11.120
两个组件分别用于干什么呢

14:11.120 --> 14:14.120
这个provider用于提供数据

14:14.120 --> 14:16.120
而这个consumer

14:16.120 --> 14:17.120
consumer用于什么呢

14:17.120 --> 14:19.120
用于消费数据

14:19.120 --> 14:20.120
ok

14:20.120 --> 14:23.120
这个的话其实是一种设计模式

14:23.120 --> 14:24.120
是一种设计模式

14:24.120 --> 14:26.120
一个是专门负责提供数据的

14:26.120 --> 14:28.120
一个是专门负责消费数据的

14:28.120 --> 14:29.120
好

14:29.120 --> 14:30.120
那我们这边的话

14:30.120 --> 14:32.120
我们这边把它结构

14:32.120 --> 14:35.120
我们这边const

14:35.120 --> 14:36.120
把谁结构出来

14:36.120 --> 14:38.120
把这个provider

14:39.120 --> 14:40.120
provider

14:40.120 --> 14:41.120
把它结构出来

14:41.120 --> 14:42.120
等于一个什么呢

14:42.120 --> 14:44.120
等于一个my context

14:45.120 --> 14:46.120
对不对

14:46.120 --> 14:47.120
结构出来

14:47.120 --> 14:48.120
结构出来了之后

14:48.120 --> 14:49.120
然后接下来回头的话

14:49.120 --> 14:51.120
我在这个app这边

14:51.120 --> 14:54.120
我就可以给它去提供这么一个

14:54.120 --> 14:55.120
数据

14:55.120 --> 14:57.120
比如说我们在这里

14:58.120 --> 15:00.120
我们这边import

15:00.120 --> 15:03.120
一个userState

15:04.120 --> 15:06.120
然后from

15:06.120 --> 15:07.120
react

15:07.120 --> 15:08.120
好

15:08.120 --> 15:09.120
我在我的app组件里面

15:09.120 --> 15:11.120
我维护一个数据

15:11.120 --> 15:12.120
这边const

15:12.120 --> 15:14.120
一个conter

15:14.120 --> 15:16.120
一个setcontainer

15:16.120 --> 15:22.070
等于一个userState

15:22.070 --> 15:24.070
OK

15:24.070 --> 15:25.070
这个的话

15:25.070 --> 15:26.070
是不是我在根组件

15:26.070 --> 15:27.070
维护的数据

15:27.070 --> 15:28.070
注意

15:29.070 --> 15:33.070
这是我在根组件

15:33.070 --> 15:34.070
根组件

15:34.070 --> 15:37.070
维护的这个状态数据

15:38.070 --> 15:39.070
对吧

15:39.070 --> 15:40.070
好那接下来

15:40.070 --> 15:41.070
我就可以直接

15:41.070 --> 15:42.070
把这个状态数据干完了

15:42.070 --> 15:44.070
我就可以直接向下

15:44.070 --> 15:45.070
我就可以把它放到

15:45.070 --> 15:47.070
那个上下文环境里面

15:47.070 --> 15:48.070
可以把它放到

15:48.070 --> 15:49.070
上下文环境里面

15:49.070 --> 15:50.070
怎么放

15:50.070 --> 15:51.070
这边很简单

15:51.070 --> 15:52.070
这边呢

15:52.070 --> 15:53.070
就是它是个组件

15:53.070 --> 15:54.070
对吧

15:54.070 --> 15:55.070
它是个组件

15:55.070 --> 15:56.070
那你这边就可以使用这个组件

16:00.150 --> 16:01.150
怎么回事

16:01.150 --> 16:02.150
好

16:02.150 --> 16:04.150
这边的话就可以使用这个组件

16:04.150 --> 16:05.150
看到没有

16:05.150 --> 16:06.150
好使用这个组件

16:06.150 --> 16:07.150
然后接下来的话

16:07.150 --> 16:08.150
我们这边

16:08.150 --> 16:09.150
把这个放进去

16:11.720 --> 16:12.720
各示化一下

16:12.720 --> 16:14.720
这个是app跟组件

16:14.720 --> 16:15.720
好人家在这里

16:15.720 --> 16:16.720
这里的话

16:16.720 --> 16:17.720
它会有一个什么

16:17.720 --> 16:19.720
它会有个value属性

16:19.720 --> 16:21.720
value属性对应的只是一个什么呢

16:21.720 --> 16:23.720
是对应的只是一个对象

16:23.720 --> 16:25.720
这个对象里面就是你这边

16:25.720 --> 16:26.720
要传递什么

16:26.720 --> 16:28.720
就是要把什么样的数据

16:28.720 --> 16:30.720
放到上下文环境里面

16:30.720 --> 16:31.720
好我们这边

16:31.720 --> 16:32.720
我们就把什么呢

16:32.720 --> 16:36.720
就把conventor和这个setcontainer

16:36.720 --> 16:38.720
我们就把这两个数据

16:38.720 --> 16:40.720
这边相当于是什么

16:40.720 --> 16:41.720
这里

16:42.720 --> 16:45.720
这里的value

16:45.720 --> 16:47.720
这里的value

16:47.720 --> 16:49.720
相当于是

16:49.720 --> 16:50.720
什么

16:50.720 --> 16:53.720
将后面的数据

16:53.720 --> 16:55.720
就你value对应的值嘛

16:55.720 --> 16:57.720
对吧你对应了这个value对应的值是这个吗

16:57.720 --> 16:59.720
对吧将后面的数据

16:59.720 --> 17:01.720
放入到什么

17:01.720 --> 17:04.720
上下文环境中

17:05.720 --> 17:06.720
看到没有

17:06.720 --> 17:08.720
它这边就是这么个意思

17:09.720 --> 17:10.720
好那回头的话

17:10.720 --> 17:11.720
我们这边

17:11.720 --> 17:12.720
我们这边的话

17:12.720 --> 17:14.720
来使用一个这个组件

17:14.720 --> 17:15.720
比如说我这边

17:15.720 --> 17:16.720
我再多创建一个

17:16.720 --> 17:17.720
这个的话叫做

17:18.720 --> 17:19.720
chow.com1

17:22.100 --> 17:24.100
大家我们这边再多创建几个

17:24.100 --> 17:26.100
这边是chow.com2

17:27.100 --> 17:30.860
chow.com2

17:33.860 --> 17:35.860
好大家这边再来一个

17:36.860 --> 17:37.860
chow.com3

17:39.860 --> 17:40.860
好人家我们这边

17:40.860 --> 17:41.860
我们来什么样的结构呢

17:41.860 --> 17:42.860
我们这边

17:42.860 --> 17:44.860
首先把那个chow.com1

17:44.860 --> 17:45.860
这边

17:46.860 --> 17:48.860
chow.com1

17:48.860 --> 17:49.860
我们把它引入

17:49.860 --> 17:50.860
引入了之后

17:50.860 --> 17:51.860
然后接下来这边的话

17:51.860 --> 17:53.860
这边是chow.com1

17:56.360 --> 17:57.360
chow.com1

17:58.360 --> 18:00.360
OK他使用这个chow.com1

18:00.360 --> 18:01.360
好使用chow.com1

18:01.360 --> 18:03.360
chow.com1里面干什么

18:03.360 --> 18:05.360
chow.com1里面很简单

18:05.360 --> 18:07.360
把这些这个上去的代码把删了

18:09.360 --> 18:10.360
把这些

18:10.360 --> 18:12.360
这些把他干掉

18:12.360 --> 18:14.360
好这里面的话他就干嘛呢

18:14.360 --> 18:16.360
这边这这里我是什么

18:16.360 --> 18:17.360
chow.com1

18:17.360 --> 18:18.360
对吧

18:18.360 --> 18:19.360
好的这样我在引入什么呢

18:19.360 --> 18:21.360
我在引入这个chow.com2

18:21.360 --> 18:22.360
和chow.com3

18:25.570 --> 18:26.570
import

18:27.570 --> 18:29.570
chow.com2

18:29.570 --> 18:30.570
from

18:30.570 --> 18:32.570
当前目录下的

18:32.570 --> 18:33.570
chow.com2

18:33.570 --> 18:34.570
以及什么呢

18:34.570 --> 18:36.570
以及chow.com3

18:37.570 --> 18:38.570
把他引入

18:38.570 --> 18:39.570
好引入了之后

18:39.570 --> 18:40.570
然后接下来的话

18:40.570 --> 18:42.570
我这边让我来使用

18:42.570 --> 18:44.570
我来使用

18:44.570 --> 18:46.570
chow.com2

18:46.570 --> 18:47.570
对吧

18:47.570 --> 18:49.570
还有chow.com3

18:50.570 --> 18:51.570
对吧

18:51.570 --> 18:52.570
那我现在的话

18:52.570 --> 18:53.570
我这边是什么样的这个结构

18:53.570 --> 18:54.570
大家看一下

18:54.570 --> 18:55.570
你这边的话

18:55.570 --> 18:56.570
你自己都可以把这个图

18:56.570 --> 18:57.570
把他画出来

18:57.570 --> 18:59.570
首先这边是有一个app

19:00.570 --> 19:01.570
对吧

19:01.570 --> 19:02.570
这个的话是app

19:04.570 --> 19:05.570
app

19:05.570 --> 19:06.570
这是我们的组建书

19:06.570 --> 19:07.570
app

19:07.570 --> 19:09.570
好app下面用的是谁

19:09.570 --> 19:11.570
用的是不这个chow.com1

19:12.570 --> 19:13.570
对不对

19:13.570 --> 19:15.570
这个就写个com1吧

19:15.570 --> 19:17.570
我这个触摸板确实不太好

19:17.570 --> 19:19.570
不太好弄

19:19.570 --> 19:20.570
这边com1

19:20.570 --> 19:21.570
com1下面又用了什么

19:21.570 --> 19:23.570
是不是又用了两个指主键

19:23.570 --> 19:24.570
对吧

19:24.570 --> 19:26.570
我把这个图给你画在旁边

19:26.570 --> 19:28.570
这个是com2

19:28.570 --> 19:33.200
com2

19:33.200 --> 19:34.200
哎呦

19:34.200 --> 19:35.200
好

19:35.200 --> 19:36.200
这边

19:36.200 --> 19:37.200
再来一个

19:38.200 --> 19:40.200
这个的话就是com3

19:41.200 --> 19:42.200
我应该就写个C3

19:42.200 --> 19:43.200
其实就可以了

19:43.200 --> 19:44.200
好

19:44.200 --> 19:45.200
这边com3

19:45.200 --> 19:46.200
OK

19:46.200 --> 19:47.200
你看

19:47.200 --> 19:49.200
这个是不是我们现在的这个组建书

19:49.200 --> 19:50.200
对吧

19:50.200 --> 19:51.200
好

19:51.200 --> 19:52.200
正常情况下的话

19:52.200 --> 19:53.200
你这边

19:53.200 --> 19:54.200
你的数据在哪上面

19:54.200 --> 19:56.200
你的数据在这个app上面

19:56.200 --> 19:57.200
你如果不用

19:57.200 --> 19:58.200
不用这个context的话

19:58.200 --> 19:59.200
他需要干嘛

19:59.200 --> 20:01.200
是不是一层一层的先传到这儿

20:01.200 --> 20:02.200
传到这儿

20:02.200 --> 20:03.200
然后接下来再往下干嘛

20:03.200 --> 20:04.200
再往下传

20:04.200 --> 20:05.200
对吧

20:05.200 --> 20:06.200
好

20:06.200 --> 20:07.200
那我们现在的话

20:07.200 --> 20:08.200
我们这边创建了个什么呢

20:08.200 --> 20:10.200
我们这边有一个这个provider

20:10.200 --> 20:11.200
有个provider

20:11.200 --> 20:12.200
provider的话

20:12.200 --> 20:13.200
相当于是

20:13.200 --> 20:15.200
一会你看一下那个

20:15.200 --> 20:16.200
结构

20:16.200 --> 20:17.200
它相当于这上面的话

20:17.200 --> 20:18.200
包了一个

20:18.200 --> 20:19.200
就这个com1

20:19.200 --> 20:21.200
com1这边

20:21.200 --> 20:23.200
这边还提供了一个这个provider

20:23.200 --> 20:25.200
provider再提供了一个

20:25.200 --> 20:26.200
上下文的这个环境

20:26.200 --> 20:27.200
OK

20:27.200 --> 20:28.200
那在这边的话

20:28.200 --> 20:29.200
放了这个数据

20:29.200 --> 20:30.200
放了这个数据

20:30.200 --> 20:31.200
好

20:31.200 --> 20:35.020
然后接下来我们在这边

20:35.020 --> 20:37.020
在这个com2和com3里面

20:37.020 --> 20:39.020
com2和com3里面

20:39.020 --> 20:40.020
我们就可以直接干嘛呢

20:40.020 --> 20:42.020
直接从上下文中

20:42.020 --> 20:44.020
去获取这个数据

20:44.020 --> 20:45.020
把这个插了

20:46.020 --> 20:47.020
我都图差了

20:47.020 --> 20:49.720
OK

20:49.720 --> 20:50.720
好

20:50.720 --> 20:51.720
来我们这边

20:51.720 --> 20:52.720
RSF

20:52.720 --> 20:53.720
这是com2

20:53.720 --> 20:54.720
对吧

20:54.720 --> 20:55.720
好这边怎么获取

20:55.720 --> 20:56.720
首先的话

20:56.720 --> 20:57.720
你把那个上下文

20:57.720 --> 20:58.720
你把它引进来

20:58.720 --> 21:01.720
import my context

21:01.720 --> 21:05.720
from context

21:05.720 --> 21:06.720
这边先引进来

21:06.720 --> 21:07.720
引进来了之后

21:07.720 --> 21:08.720
然后接下来的话

21:08.720 --> 21:09.720
这边结构

21:09.720 --> 21:11.720
const

21:11.720 --> 21:14.720
然后这边my context

21:14.720 --> 21:15.720
这边结构

21:15.720 --> 21:16.720
这边结构

21:16.720 --> 21:17.720
拿到什么呢

21:17.720 --> 21:19.720
拿到这个consumer

21:19.720 --> 21:23.420
consumer

21:23.420 --> 21:25.420
OK拿到这个consumer

21:25.420 --> 21:27.420
这个consumer就是什么

21:27.420 --> 21:29.420
数据的消费者

21:29.420 --> 21:30.420
对吧

21:30.420 --> 21:31.420
他是干嘛的

21:31.420 --> 21:32.420
他是专门从上下文里面

21:32.420 --> 21:33.420
读数据的

21:33.420 --> 21:36.920
专门

21:36.920 --> 21:39.920
从上下文中

21:39.920 --> 21:41.920
读取数据

21:41.920 --> 21:43.920
你这边分清楚

21:43.920 --> 21:44.920
providers是什么

21:44.920 --> 21:45.920
providers就是

21:45.920 --> 21:46.920
你可以把它理解为

21:46.920 --> 21:48.920
像上下文里面写入数据

21:48.920 --> 21:49.920
就算我放这个数据

21:49.920 --> 21:51.920
到这个上下文环境里面

21:51.920 --> 21:52.920
这个consumer就干嘛呢

21:52.920 --> 21:53.920
consumer就是专门

21:53.920 --> 21:54.920
从这个上下文里面

21:54.920 --> 21:56.920
去读取这个数据

21:56.920 --> 21:57.920
我们现在这个

21:57.920 --> 21:58.920
上下文里面有没有数据

21:58.920 --> 21:59.920
有吗

21:59.920 --> 22:00.920
你这边是不是放进去了

22:00.920 --> 22:01.920
对不对

22:01.920 --> 22:02.920
放进去了那肯定有

22:02.920 --> 22:03.920
有的话

22:03.920 --> 22:04.920
那接下来这边来读

22:05.920 --> 22:06.920
这边怎么读

22:06.920 --> 22:07.920
这边一样的

22:07.920 --> 22:08.920
这边的话

22:08.920 --> 22:09.920
你这个consumer

22:09.920 --> 22:10.920
他是个组建

22:10.920 --> 22:11.920
对不对

22:11.920 --> 22:12.920
你这边首先

22:12.920 --> 22:13.920
最外层是consumer

22:13.920 --> 22:14.920
好 consumer

22:14.920 --> 22:15.920
然后接下来

22:15.920 --> 22:16.920
这边会接收一个

22:16.920 --> 22:17.920
什么呢

22:17.920 --> 22:18.920
这边

22:18.920 --> 22:19.920
这边让他会接收一个

22:19.920 --> 22:21.920
回调函数

22:21.920 --> 22:22.920
看到没有

22:22.920 --> 22:23.920
回调函数

22:23.920 --> 22:24.920
回调函数

22:24.920 --> 22:26.920
我们这边会返回一段什么

22:26.920 --> 22:28.920
说会返回一段这个ges差

22:28.920 --> 22:29.920
对不对

22:29.920 --> 22:30.920
返回一段这个ges差

22:30.920 --> 22:31.920
好人家在这里

22:31.920 --> 22:32.920
这里的话

22:32.920 --> 22:33.920
他就会干嘛呢

22:33.920 --> 22:34.920
他就会把你的

22:34.920 --> 22:35.920
整个上下文

22:35.920 --> 22:36.920
整个上下文

22:36.920 --> 22:37.920
这个对象

22:37.920 --> 22:38.920
把它拿到

22:38.920 --> 22:39.920
拿到之后

22:39.920 --> 22:40.920
我们这边可以来看一下

22:40.920 --> 22:42.920
我们这边这个样子

22:42.920 --> 22:43.920
这样子

22:43.920 --> 22:44.920
我们这边

22:44.920 --> 22:46.920
这边首先

22:46.920 --> 22:47.920
context

22:47.920 --> 22:48.920
好

22:48.920 --> 22:50.920
再让我们这边再return

22:50.920 --> 22:52.920
他要求你返回一段

22:52.920 --> 22:54.920
返回

22:54.920 --> 22:57.920
return怎么写的

22:57.920 --> 22:59.920
返回一段ges差

22:59.920 --> 23:00.920
这边的话

23:00.920 --> 23:01.920
第二位

23:01.920 --> 23:02.920
OK

23:02.920 --> 23:03.920
这边就是

23:03.920 --> 23:05.920
child.comer

23:05.920 --> 23:06.920
好

23:06.920 --> 23:07.920
我们先来看一下

23:07.920 --> 23:08.920
先看一下这个context

23:08.920 --> 23:10.920
拿到的究竟是啥

23:10.920 --> 23:11.920
好

23:11.920 --> 23:13.920
我们这边来看一下

23:13.920 --> 23:14.920
这边抱错了

23:14.920 --> 23:17.920
抱到什么呀

23:17.920 --> 23:19.920
you likely forgot this port

23:19.920 --> 23:22.920
your component

23:22.920 --> 23:24.920
it's defecting

23:24.920 --> 23:29.920
or you may have mixed up

23:29.920 --> 23:31.920
name imports

23:31.920 --> 23:33.920
在child.com

23:33.920 --> 23:35.920
comer

23:35.920 --> 23:37.920
comer

23:37.920 --> 23:38.920
这里

23:38.920 --> 23:39.920
这里的话

23:39.920 --> 23:40.920
就是应该干嘛

23:40.920 --> 23:41.920
这边是不是

23:41.920 --> 23:43.920
这边是不是直接导出

23:43.920 --> 23:44.920
对

23:44.920 --> 23:45.920
这边改一下名字

23:45.920 --> 23:46.920
叫做comer

23:46.920 --> 23:47.920
保存

23:47.920 --> 23:49.920
重新来

23:49.920 --> 23:50.920
再看一下

23:50.920 --> 23:51.920
comer

23:51.920 --> 23:54.920
然后ges差12

23:54.920 --> 23:57.920
ges差

23:57.920 --> 23:58.920
我看一下

23:58.920 --> 24:02.380
这边的话

24:02.380 --> 24:03.380
应该是

24:03.380 --> 24:04.380
我看

24:04.380 --> 24:05.380
这个不要了

24:05.380 --> 24:06.380
这边应该是没什么问题

24:06.380 --> 24:09.380
他说抱到ges12

24:09.380 --> 24:10.380
我再看一下

24:10.380 --> 24:12.380
再看一下

24:12.380 --> 24:13.380
这边是第10行

24:13.380 --> 24:15.380
第10行是这边

24:15.380 --> 24:16.380
3

24:16.380 --> 24:17.380
哦

24:17.380 --> 24:18.380
这里是什么

24:18.380 --> 24:19.380
这里是没写

24:19.380 --> 24:20.380
对吧

24:20.380 --> 24:21.380
我们这边先写一下吧

24:21.380 --> 24:24.380
这边的话是这个

24:24.380 --> 24:25.380
保存

24:25.380 --> 24:26.380
OK

24:26.380 --> 24:27.380
出来了

24:27.380 --> 24:28.380
对吧

24:28.380 --> 24:29.380
这边是

24:29.380 --> 24:30.380
直途线1

24:30.380 --> 24:31.380
2

24:31.380 --> 24:32.380
3

24:32.380 --> 24:33.380
你看这边拿到的是什么

24:33.380 --> 24:34.380
你看拿到的

24:34.380 --> 24:36.380
是不是就是这个呀

24:36.380 --> 24:37.380
是不是就是你这边

24:37.380 --> 24:38.380
provider

24:38.380 --> 24:40.380
这边提供的对象

24:40.380 --> 24:41.380
对不对

24:41.380 --> 24:42.380
拿到数据没有

24:42.380 --> 24:43.380
拿到了

24:43.380 --> 24:44.380
是不是就拿到了

24:44.380 --> 24:46.380
哎那我这边是不是就实现了什么

24:46.380 --> 24:48.380
说跨这个

24:48.380 --> 24:50.380
这个组件成绩

24:50.380 --> 24:52.380
去这个共享数据

24:52.380 --> 24:53.380
对不对

24:53.380 --> 24:55.380
哎我们就实现了这一点

24:55.380 --> 24:58.380
我这边让我把那个

24:58.380 --> 25:01.380
我把这边这个返回了这个

25:01.380 --> 25:03.380
返回了这个ges差

25:03.380 --> 25:05.380
稍微把它这个调整一下

25:05.380 --> 25:06.380
这个在笔记里面有

25:06.380 --> 25:08.380
我这边直接看笔记

25:08.380 --> 25:10.380
在

25:10.380 --> 25:12.380
这个这个是那个

25:12.380 --> 25:14.380
这个是跟组件

25:14.380 --> 25:17.380
把跟组件先把它改一改

25:17.380 --> 25:18.380
跟组件这边是

25:18.380 --> 25:19.380
我们现在是包的

25:19.380 --> 25:20.380
直接包的敲的

25:20.380 --> 25:21.380
看不一对吧

25:21.380 --> 25:22.380
好让稍微改一下

25:22.380 --> 25:23.380
其实也没改什么

25:23.380 --> 25:25.380
就这边外层有个DIV

25:25.380 --> 25:26.380
DIV稍微给了一个border

25:26.380 --> 25:27.380
看到没有

25:27.380 --> 25:29.380
给了一个border

25:29.380 --> 25:31.380
然后接下来这边

25:31.380 --> 25:32.380
这边的话

25:32.380 --> 25:34.380
我们也把它改一下

25:34.380 --> 25:35.380
这里不需要改

25:35.380 --> 25:37.380
这边的话也是什么呢

25:37.380 --> 25:39.380
这边它也是有个DIV

25:40.380 --> 25:42.380
也是有个DIV

25:42.380 --> 25:44.380
这边

25:44.380 --> 25:45.380
各式换一下

25:45.380 --> 25:46.380
这边一个DIV

25:46.380 --> 25:48.380
DIV这边设置了一个border

25:48.380 --> 25:50.380
设置了一个border

25:50.380 --> 25:51.380
大家这边的话

25:51.380 --> 25:53.380
绑定了一个这个事件

25:53.380 --> 25:56.380
这里

25:56.380 --> 25:57.380
这里就是干嘛

25:57.380 --> 25:58.380
这里的话就是从这个

25:58.380 --> 26:00.380
上下文里面去干嘛

26:00.380 --> 26:01.380
去获取这个数据

26:01.380 --> 26:02.380
因为我刚才我们都看到了

26:02.380 --> 26:03.380
你这边的话

26:03.380 --> 26:05.380
是不是可以访问到这个数据

26:05.380 --> 26:06.380
对不对

26:06.380 --> 26:07.380
能够访问到这个数据

26:07.380 --> 26:08.380
那我这边就干嘛

26:08.380 --> 26:10.380
是不是获取上下文的数据

26:10.380 --> 26:11.380
对不对

26:11.380 --> 26:12.380
显示出来

26:12.380 --> 26:13.380
这边是干嘛

26:13.380 --> 26:14.380
你这边是不是还传了一个

26:14.380 --> 26:16.380
这个setcontroller的这个方法

26:16.380 --> 26:18.380
这setcontroller就是什么

26:18.380 --> 26:19.380
就是你app组建的

26:19.380 --> 26:20.380
是不是这个东西

26:20.380 --> 26:21.380
只不过你这个东西

26:21.380 --> 26:22.380
把它放到哪去了

26:22.380 --> 26:24.380
就放到这个上下文环境里面去了

26:24.380 --> 26:25.380
对吧

26:25.380 --> 26:26.380
那我这边

26:26.380 --> 26:28.380
可不可以通过上下文环境

26:28.380 --> 26:30.380
拿到你这个方法

26:30.380 --> 26:31.380
可以吧

26:31.380 --> 26:32.380
对不对

26:32.380 --> 26:33.380
我拿到之后再将我这边

26:33.380 --> 26:34.380
进行一个设置

26:34.380 --> 26:35.380
好

26:35.380 --> 26:37.380
我们这边来看一下

26:37.380 --> 26:39.380
这边是这个跟组件

26:39.380 --> 26:41.380
大家这边敲的抗补意

26:41.380 --> 26:42.380
这边敲的抗门

26:42.380 --> 26:46.380
这边这个直没出来是吧

26:46.380 --> 26:48.380
直没出来

26:48.380 --> 26:50.380
我们看一下这边怎么回事

26:50.380 --> 26:53.380
这边context

26:53.380 --> 26:55.380
我们这个叫controller

26:55.380 --> 26:57.380
叫做controller

26:57.380 --> 26:58.380
OK

26:58.380 --> 27:00.380
这边是controller加一

27:00.380 --> 27:02.380
那我们这边也是setcontroller

27:02.380 --> 27:04.380
保存

27:04.380 --> 27:05.380
出来了吧

27:05.380 --> 27:06.380
这打印就可以不要了

27:06.380 --> 27:09.380
打印就不要了

27:09.380 --> 27:10.380
算新

27:10.380 --> 27:11.380
出来了吧

27:11.380 --> 27:12.380
不仅出来了

27:12.380 --> 27:13.380
我这边还可以干嘛

27:13.380 --> 27:14.380
我这边的话

27:14.380 --> 27:15.380
还可以去修改

27:15.380 --> 27:16.380
比方点击一下

27:16.380 --> 27:18.380
你看这边是不是就变成2了

27:18.380 --> 27:19.380
对不对

27:19.380 --> 27:20.380
这边就变成2了

27:20.380 --> 27:21.380
这边2的话相当于是什么

27:21.380 --> 27:23.380
相当于是就是你这边的话

27:23.380 --> 27:25.380
把这个跟组件的

27:25.380 --> 27:26.380
这个状态

27:26.380 --> 27:28.380
把它修改了

27:28.380 --> 27:29.380
OK

27:29.380 --> 27:30.380
你这边可以在

27:30.380 --> 27:32.380
在这边你可以看得到

27:32.380 --> 27:33.380
你这边APP

27:33.380 --> 27:34.380
你看

27:34.380 --> 27:36.380
相当于就是把这个跟组件的

27:36.380 --> 27:37.380
这个状态改了

27:37.380 --> 27:38.380
因为它这边放的话

27:38.380 --> 27:40.380
是把跟组件的这个状态

27:40.380 --> 27:42.380
放到这个上下文环境里面

27:42.380 --> 27:43.380
对不对

27:43.380 --> 27:44.380
那你现在的话

27:44.380 --> 27:46.380
整个这个组件的这个

27:46.380 --> 27:47.380
结构数

27:47.380 --> 27:49.380
它这边就相当于什么呢

27:49.380 --> 27:50.380
相当于是APP

27:50.380 --> 27:52.380
APP大家这边有个provider

27:52.380 --> 27:53.380
provider下面

27:53.380 --> 27:54.380
看模一看模二

27:54.380 --> 27:55.380
看模二下面有个什么呢

27:55.380 --> 27:56.380
有个consumer

27:56.380 --> 27:57.380
consumer是负责什么呢

27:57.380 --> 27:58.380
负责这个消费的

27:58.380 --> 28:00.380
provider是负责提供的

28:00.380 --> 28:01.380
整个这个组件数

28:01.380 --> 28:03.380
其实类似于像这个样子

28:03.380 --> 28:05.380
下面换了个图

28:05.380 --> 28:07.380
类似于像这个样子

28:07.380 --> 28:08.380
可不可以啊

28:08.380 --> 28:09.380
你这边呢是

28:09.380 --> 28:10.380
APP跟组件

28:10.380 --> 28:12.380
然后加这个是你的

28:12.380 --> 28:13.380
chot.com1

28:13.380 --> 28:14.380
大家你这个在使用

28:14.380 --> 28:15.380
这个chot.com1的时候

28:15.380 --> 28:16.380
你包了一个什么

28:16.380 --> 28:17.380
是包了一个provider

28:17.380 --> 28:19.380
它是个组件

28:19.380 --> 28:20.380
对不对

28:20.380 --> 28:21.380
你回头这边再来看一下

28:21.380 --> 28:24.210
这边再来看一下

28:24.210 --> 28:25.210
对不对

28:25.210 --> 28:26.210
你这个在使用这个

28:26.210 --> 28:27.210
chot.com1

28:27.210 --> 28:28.210
你在它的外面

28:28.210 --> 28:29.210
包了一个什么

28:29.210 --> 28:30.210
包了一个provider

28:30.210 --> 28:31.210
它是个组件

28:31.210 --> 28:32.210
所以它这个上一集

28:32.210 --> 28:33.210
其实是有个provider

28:33.210 --> 28:35.210
而provider就提供了一个什么呢

28:35.210 --> 28:37.210
提供了一个上下文环境

28:39.210 --> 28:40.210
看到没有

28:40.210 --> 28:41.210
你这边可以理解成

28:41.210 --> 28:42.210
这边整个这个圈

28:42.210 --> 28:44.210
它是个上下文环境

28:44.210 --> 28:45.210
然后我往这个

28:45.210 --> 28:46.210
上下文环境里面

28:46.210 --> 28:47.210
就放了什么

28:47.210 --> 28:49.210
是放了刚才我们这个APP的

28:49.210 --> 28:51.210
这个数据

28:51.210 --> 28:52.210
对不对

28:52.210 --> 28:53.210
放到这个环境里面

28:53.210 --> 28:54.210
放到这个环境里面之后

28:54.210 --> 28:55.210
然后加这边的话

28:55.210 --> 28:56.210
在这个chot.com2里面

28:56.210 --> 28:57.210
我这边就有个什么呢

28:57.210 --> 28:58.210
有个consumer

28:58.210 --> 28:59.210
consumer我就可以

28:59.210 --> 29:00.210
直接从这个环境里面

29:00.210 --> 29:01.210
去拿

29:02.210 --> 29:03.210
直接去拿

29:03.210 --> 29:04.210
拿这个counter来用

