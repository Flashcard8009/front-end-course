WEBVTT

00:00.000 --> 00:05.840
OK 这个的话 咱们来看一个东西 叫做高阶组建

00:06.800 --> 00:10.400
高阶组建 高阶组建的话 英语全称叫做这个

00:10.920 --> 00:16.040
hiner order components 简称叫做什么 简称叫做hoc

00:16.960 --> 00:22.240
所以以后别人说这个东西 你得通过这个hoc来实现 你要看得懂别人在说什么

00:22.920 --> 00:26.200
ok 啊hoc的话 那就是什么 就是高阶组建

00:26.920 --> 00:33.280
这玩意儿是什么呢 他其实是这个req中一种这个逻辑附用的这个技巧

00:34.520 --> 00:36.120
好 来 咱们这边的话一点点来看

00:36.880 --> 00:43.240
好 这边那罗列了两个点啊 就是你这边让你在学习这个高阶组建的时候 就是主要有两个点

00:44.040 --> 00:51.320
两个点你这边的话 你需要认识到 首先第一个你需要认识到高阶组建 他其实并非指的是一个组建

00:52.040 --> 01:00.600
首先把这个这个这个就这一点啊 你要认识得到啊 这个让人很疑惑啊 高阶组建就是

01:01.160 --> 01:08.280
听上去就是你高阶组建 那就应该是一个组建呗 但他其实不是个组建 他是一个什么呢 他是一个增强这个组建功能

01:09.720 --> 01:13.720
组建功能的一个函数 这边写反了 应该是增强

01:15.240 --> 01:16.440
增强组建功能

01:17.160 --> 01:24.760
功能的一个函数 拿着首先第一点 第二点是什么呢 第二点的话是这个高阶组建他的作用

01:25.240 --> 01:32.360
实际上就是对这个多个组建 多个组建我可能会存在什么呢 我可能会存在一些这个公共的一些逻辑

01:33.160 --> 01:41.320
对不对 我对他进行一个什么呢 对他进行一个横向的这个抽离 什么叫做横向 我们以后来解释哈 什么叫做横向

01:42.040 --> 01:44.680
好 那我们一个点一个点来看 首先第一个

01:46.120 --> 01:53.560
关于高阶高阶组建是一个函数 这个没什么好讲的 反正你就记住嘛 这个高阶组建他是一个函数

01:54.200 --> 01:57.240
他这个名字的话稍微有一点这个欺骗性

01:57.960 --> 02:03.000
对因为很多人看到这个名字就会认为高阶组建他应该是一个组建 但其实不是

02:03.960 --> 02:10.280
这名字稍微有一些欺骗品 这个欺骗性就有点类似于什么 有点类似于就是java script

02:11.000 --> 02:18.360
经常会被就是一些初学者误认为和这个java相关一样 但其实我们的java script和这个java其实没有任何关系

02:19.080 --> 02:20.680
对不对 这边也是一样

02:21.400 --> 02:28.680
好的 官方的话对这个高阶组建他给了这个很明确的这个定义 甚至还有个什么 甚至还有个公事

02:29.400 --> 02:35.360
哎 还有个公事啊 来我们来看一下 高阶组建是什么参数为组建

02:36.000 --> 02:39.440
返回值为新组建的什么 函数

02:40.360 --> 02:44.160
看到没有啊 这句话可不是我说的啊 这边他在这里官网这里

02:45.680 --> 02:51.480
官网这边啊 看到没有 OK 这个的话是他的公事 你这边的话你传进去的是个组建

02:52.320 --> 02:56.280
啊 传到哪里呢 传到他里面 他是个什么 他是个函数

02:57.280 --> 03:03.600
可不可以啊 他是个函数 传进去传进去之后 然后他给你返回一个什么 返回一个新的函数

03:04.600 --> 03:05.760
返回一个新的组建

03:06.840 --> 03:12.760
ok 新的组建啊 这是首先第一点啊 高阶组建是个函数啊 这没什么好说的啊

03:13.280 --> 03:17.480
好 然后这边的话 我们来看一下这个第二点 就是关于这个高阶组建

03:17.960 --> 03:20.280
他具体他要做什么事情

03:22.710 --> 03:31.910
刚刚我们说了 就是高阶组建的话 他这边主要是什么呢 主要是对这个多组建这个公共的这个逻辑进行一个横向抽离

03:32.430 --> 03:36.750
什么叫做横向抽离 来 我们这边看一下 好 这边画了个图哈

03:37.510 --> 03:43.030
这边的图的话 我这边每一个这个形状就代表是什么呢 就代表是一个组建

03:43.670 --> 03:48.350
ok 好 然后接下来的话 我组建里面我会有什么呢 我会有自身的这个仕图

03:48.990 --> 03:55.070
对了 我这边让我返回一个就是我自己的这个gs差啊 比如说这个组建这个组建有我自己的gs差

03:55.590 --> 03:58.110
这个组建有自己的gs差 ok 这个没问题

03:58.630 --> 04:02.710
好 然后这样这边的话 我这边 我这个组建是不是有我自身的业务逻辑啊

04:03.230 --> 04:09.070
好 大家我这个组建有我自身的业务逻辑啊 这个这个的话也有啊 我自己的一些这个独有的这个逻辑

04:09.670 --> 04:15.790
好 然后接下来他们还存在一部分什么呢 还存在一部分公共逻辑

04:16.750 --> 04:21.870
他们叫公共逻辑 也就是这几个组建的话 这一部分逻辑是完全相同的

04:23.470 --> 04:24.190
完全相同的

04:24.910 --> 04:34.110
ok 那这边的话 我们作为一个程序员的话 我们自然而然就会想到什么 是不是自然而然就会想到我要把这段公共逻辑我要把它干嘛呀

04:34.510 --> 04:36.350
是不是我要把它抽离出来

04:37.270 --> 04:45.110
对不对 你看这个的话就是一个横向的抽离 看不看 这边这样子横向的把这个公共逻辑把它抽离出来

04:45.910 --> 04:51.070
ok 那接下来的话 这个高階组建的话 实际上就是来做这个事情的

04:51.790 --> 04:59.190
ok 那么早期的话 早期的话 这个react它实际上采用的是什么呢 采用的是这个mix ins

05:00.270 --> 05:05.270
采用这个mix ins来解决这种横切关注点这个相关的这个问题

05:05.950 --> 05:13.910
啊 你看这个东西 这个东西你演说吧 mix ins 啊 这边大家可以看一下啊 早期在最早期的时候这个react里面创建组建通过什么呢

05:14.150 --> 05:17.310
通过react点creator class这个class

05:18.150 --> 05:26.150
啊 这个可能很多同学见都没见过啊 这个通过react点creator class 这是最最早期的这个语法了 现在已经被废弃了

05:26.790 --> 05:33.670
已经被废弃了啊 好 早期的话 通过这种语法来创建这个组建 你看它这边啊 是不是就有个什么 是不是就有一个

05:34.070 --> 05:40.710
mix ins 对不对 好 大家这边这边对应了这个数组 数组里面的对应了 这玩意很显然是一个什么呢 是个对象

05:41.670 --> 05:46.470
是个对象 对象里面就可以书写什么呢 就可以书写你的这个公共逻辑

05:47.350 --> 05:53.590
ok 啊 但这个这个东西呢 其实你很眼熟 对不对 为什么 因为在这个view

05:54.470 --> 05:59.350
2.0的这个版本里面 是不是也支持这样子的这个mix ins这个混入

06:00.390 --> 06:06.950
对不对 所以你看着很眼熟啊 其实这个整个这个view啊view的话 其实从这个react里面借鉴了很多东西

06:07.430 --> 06:13.350
你这个越学到后面你就越会发现 ok 包括什么 比如说这个虚拟多摸啊

06:13.990 --> 06:19.910
然后这个deaf算法啊 这些 其实都是这个view 从这个react里面借鉴过去了

06:20.230 --> 06:29.030
说为什么 就是大家会说这个view是一个比较中用的这个框架 啊 为什么这么说 ok 你很多创新的话 其实都是来自于这个react

06:29.910 --> 06:33.270
对不对 包括这个react后面推出了这个hook

06:33.830 --> 06:40.550
啊 让那个view的那个view3.0 它的那个composition api啊 其实就是什么 实际上就是hook

06:41.270 --> 06:48.680
对不对 就hook 好来回到这边啊 回到这边啊 这个的话你在view里面你一定是见过的

06:49.160 --> 06:53.560
对不对 一定是见过的 怎么问的话 这个的话 现在已经被废弃掉了啊

06:54.040 --> 06:58.680
他这边的话只能通过什么呢 只能通过这个react点这个creator class

06:59.240 --> 07:04.520
通过这种方式来使用这个mix ins 但是现在的话你连这个都废弃掉了

07:04.920 --> 07:12.680
对不对 这玩意儿都废弃掉了 那自然而然这个这个东西 这个东西现在也没有了 为什么呢 他这边呢 这个mix ins 他这边罗列了一下

07:13.080 --> 07:18.120
就是会有这么一些问题 首先第一个叫做什么呢 第一个叫做隐私依赖

07:19.160 --> 07:24.200
什么叫做隐私依赖 你看下面 就比如说你写了一个有状态的组件

07:24.760 --> 07:28.040
有状态 就我一个组件 组件里面 我有我自己的这个state

07:29.240 --> 07:32.280
好 那加你的同事 你的同事的话 写了一个mix in

07:33.240 --> 07:33.560
ok

07:34.280 --> 07:39.640
好 你同时写了这个mix in 去读取什么呢 去读取你组件的这个状态

07:40.200 --> 07:47.400
这个是不可以做到 对吧 因为你这个mix in的话 最终就会被混入到什么 是不是 最终这一块 就这个对象会被混入到哪里

07:47.720 --> 07:53.800
所以混入到你这个 就这边这个选项里面啊 其实就和那个view那个是一样的啊 会混入进去

07:54.280 --> 07:54.520
ok

07:55.160 --> 07:59.880
好 那几个月后 你可能希望将这个state移动到这个副组件

08:00.360 --> 08:05.640
也就是说 现在我这个组件 我不维护这个数据了 这个数据来源于哪里呢 就副组件给我提供

08:06.680 --> 08:10.840
那这个时候的话 你这边你就还要去干嘛 你还得去更新这个mix in

08:11.480 --> 08:18.600
为什么 因为你mix in 读取了这个状态 那现在这个状态不在了 这状态已经是由这个副元素提供给我了

08:19.800 --> 08:23.080
ok 那你这边的话 就是你这边能不能记得去更新

08:23.800 --> 08:26.840
对不对 那如果就是其他组件也用了这个mix in

08:27.160 --> 08:32.200
对不对 那你这边的话就是要去更新 挨着挨着去更新一下

08:32.600 --> 08:35.480
这首先第一个 就是关于这个影视依赖的问题

08:36.280 --> 08:39.720
然后第二个是什么呢 第二个就是这个名称 他容易冲突

08:40.440 --> 08:45.400
因为我们这个mix in 他是可以定义多个的 你看这就看得出来 这边他对应是一个什么

08:45.800 --> 08:50.600
对应是个数组啊 数组的话那就意味着什么 意味着我这边是不可以定义多个

08:51.400 --> 08:54.920
对不对 那定义多个的话 那我如果两个这个mix in

08:55.400 --> 09:02.520
他们都有一个同名的这个方法 那这个时候他就会起一个这个冲突 你就不能一起使用他们

09:03.240 --> 09:09.160
ok 第三个 第三个的话是这个mix in 他会导致这个滚雪球式的这个复杂性

09:10.120 --> 09:17.080
比如说我们这边 就是你看这边 每一个这个需求会使这个mix in 非常难以理解

09:17.880 --> 09:24.600
就随着这个时间的这个推移啊 你任何这个新功能都可以使用的 使用这个mix in

09:25.080 --> 09:30.360
添加到所有组件中 什么意思啊 比如说我这边有个组件啊 比如画个图

09:32.120 --> 09:38.520
啊 图啊 比如说我这边有个组件啊 这个是个组件 这个是个组件啊 这个是个组件

09:38.920 --> 09:44.520
那么他们都使用到了什么 都使用到了这个mix in 啊 比如画个圈啊 都使用到这个mix in

09:44.840 --> 09:46.840
啊 这个里面的话我现在封装了一个方法

09:47.560 --> 09:52.920
对不对 我封装了一个叫做a的方法 好那接下来啊 他啊 他这个在这个组件里面使用了

09:53.240 --> 09:56.920
在这个组件里面使用了 在这个组件里面也使用了

09:57.640 --> 10:04.120
对不对啊 那接下来这三个组件是不是都会有你这个a这个方法 好 我现在的话 我往你这个mix in 里面添加一个b这个方法

10:04.520 --> 10:08.040
那接下来的话就会导致什么 导致你这个所有的这个组件

10:08.520 --> 10:11.080
就同时都会有什么 都会有这个b这个方法

10:11.960 --> 10:15.080
对不对啊 所以渐渐的这个封装边界就被侵蚀了

10:15.720 --> 10:19.720
ok 好这个的话就是他所存在的一些问题啊

10:20.440 --> 10:24.840
好了 这边关于这个mix in的这个讨论的话 你这边其实可以去看这个官方

10:25.480 --> 10:29.160
官方的话是专门写了一篇文章的啊 在这里

10:30.600 --> 10:34.920
在这边啊 单省写的还记得单省吧 记不记得单省

10:35.320 --> 10:39.160
就我之前在讲那个redax的时候 我告诉大家那个很帅的那个

10:39.880 --> 10:43.480
对不对啊 那个单省一般我们称之为单省啊 就他写的

10:43.880 --> 10:47.720
ok 这单省他是redax的作者啊 他是redax作者

10:47.880 --> 10:50.440
他现在的话已经加入到这个react官方去了

10:51.240 --> 10:55.720
ok 这边他写了这个文章 大家可以看一下啊 英文的

10:56.360 --> 11:01.960
英文的 有没有中文我不知道 你需要自己去查一下啊 你这边的话你既然

11:02.280 --> 11:06.200
决定搞这一行的话 我建议你慢慢去习惯去看这个英文的文章

11:06.760 --> 11:11.160
你不要着急 对不对 不要着急 我说过你看这些东西你就不要着急

11:11.800 --> 11:15.560
啊 你找一个下午 下午没事的时候 那你就一点一点这个看一下

11:16.120 --> 11:20.920
啊 一点点看一下 对不对 你会发现你越着急的话 你做事情反而就越慢

11:21.240 --> 11:25.320
你不着急的话 你慢慢做的话 反而就是做的感觉还挺快的

11:26.040 --> 11:28.920
ok 所以你把这个心把它静下来

11:29.800 --> 11:31.320
知道吧 ok

11:32.280 --> 11:35.640
啊 这是关于这个mixing啊 这就不说了啊 这是过去的事情了

11:36.280 --> 11:41.320
啊 所以说之后的话这个react他就推出了什么呢 他就推出了这个高阶主见

11:42.120 --> 11:44.600
啊 推出了这个高阶主见的这个抽离方式

11:45.320 --> 11:49.320
啊 高阶主见是什么呢 高阶主见我们刚说过 这边刚才是不是说过一个公司啊

11:49.800 --> 11:52.440
对不对 你给我传一个组件 我给你返回一个什么

11:52.920 --> 11:55.240
返回一个新组件 ok 来看这张图

11:55.800 --> 12:01.000
你给我传一个组件 对吧 我是个函数嘛 这玩意是个函数 对不对 你给我传一个组件进来

12:01.320 --> 12:03.720
好 那这样我给你返回一个什么 我给你返回一个新组件

12:04.200 --> 12:09.400
啊 你给我传一个这个组件进来 然后接下来我给你返回一个什么新组件啊 这边也一样

12:09.720 --> 12:13.000
对吧 接收这个旧的组件 那这样我这边让给你返回一个什么

12:13.400 --> 12:20.840
返回一个这个新的组件 ok 那返回这个新的组件很明显这边他就会新增什么 是不是新增这个公共逻辑

12:21.720 --> 12:26.360
对不对 你看我这张图 那很明显这个公共逻辑是谁增加进去了

12:26.840 --> 12:27.880
什么就是这个高阶主见

12:28.440 --> 12:34.600
增加进去了 对不对 高阶主见就是干这个事情的啊 我这边呢相当于就是给你返回一个新的组件

12:35.000 --> 12:38.040
新的组件这边其实就是什么呢 是给你增强了

12:38.680 --> 12:41.160
啊给你增强了给你增加了一部分逻辑

12:41.880 --> 12:42.120
ok

12:43.880 --> 12:47.960
好 来我们这边我们来看一下啊 来看一下啊 这边来看看这个具体的实力吧

12:48.680 --> 12:53.720
ok 回到这边 然后这边是写了两个组件 行 我把这两个组件吧

12:54.360 --> 13:01.160
写一下 一个是这个chill的啊 这是上级客的代码啊 上级客的代码我已经放到那个已经放到这边了

13:02.440 --> 13:03.880
哦 这什么东西

13:05.640 --> 13:08.840
稍等 上级客的代码的话已经放到这里面了

13:09.800 --> 13:18.760
在旧一片第一张啊 已经放到这了啊 所以说我这边每级客的代码我都会放进去 所以这边让我就把这个就删了

13:19.400 --> 13:25.140
ok 把这些就删掉了 好 我们这边就是一个织组件

13:28.220 --> 13:33.100
啊 织组件 织组件的话他这边接受一个什么呢 接受一个比如说这边一个姓名

13:35.990 --> 13:39.990
接受一个name啊 这边就是你要给我传一个props

13:40.790 --> 13:41.510
点name

13:42.470 --> 13:42.950
ok

13:44.390 --> 13:51.990
好 然后接下来啊 这边这边是比如说这个第一个织组件嘛啊 敲的抗一啊 这边把名字也改下敲的抗一

13:52.950 --> 13:55.110
好 然后接下来我们这边呢 我们再来新建一个

13:57.110 --> 14:00.790
好 yes 好 这边再来新建一个 这边那是敲的

14:01.430 --> 14:06.630
看我二点接叉啊 接下来这个二二的话和一差不多

14:09.060 --> 14:15.260
和一差不多 只不过这边那是接受一个什么的 接受一个连领啊 这电脑

14:16.140 --> 14:19.180
又转起来了啊 接受一个连领 edge

14:20.220 --> 14:25.260
ok啊 这边呢是应该是二 对吧 这个是织组件二 这个也是二

14:25.900 --> 14:28.940
好吧 这边也改一下 这边是织组件一啊 保存

14:29.740 --> 14:37.100
保存之后 然后接下来在这里 这里的话咱们来导入一下啊 这边呢是织组件一 然后接下来把这些删掉吧

14:38.380 --> 14:42.780
好 我们这边呢 使用这两个织组件 一个是敲的抗目一

14:47.190 --> 14:48.150
敲的抗目一

14:49.590 --> 14:52.790
啊 一个是敲的抗目二

14:53.990 --> 14:55.830
对吧 二还没影啊 把影一下

14:56.790 --> 14:57.510
啊 这边是二

14:59.900 --> 15:03.340
ok 引进来 引进来之后 然后这边呢是不听讲这个属性

15:04.380 --> 15:04.620
对吧

15:06.620 --> 15:11.340
好 我们这边呢 加一个内幕 内幕的话 这边呢是有细节

15:12.220 --> 15:16.540
好 然后这边呢是 edge edge的话 这边啊 给一个18

15:17.260 --> 15:19.100
ok 好 来这边来看一下

15:20.220 --> 15:24.140
啊 这边 这是织组件一 我们加个div吧

15:26.940 --> 15:32.060
加一个div 把放进来 第二个也是 加个div

15:33.740 --> 15:39.580
ok 保存一下 好 然后这边那是不两个组件 对不对 这个的话是织组件一

15:39.900 --> 15:45.660
这个是织组件二 好 这两个其实是并不是有什么关联的组件 对不对 没什么关联

15:46.140 --> 15:49.740
好 那接下来的话 我这边有一个逻辑 啊 有一个这个需求

15:50.220 --> 15:54.620
这需求是什么呢 这个需求的话 是就是有一个这个日子报告的打印

15:55.260 --> 15:57.980
打印就是你这个组件已经创建了

15:59.020 --> 16:02.060
已经创建了 啊 创建时间为多少多少多少

16:02.700 --> 16:07.340
好 那这边的话 我就是需要写个什么 所以需要写一个这个user effect

16:09.340 --> 16:11.740
对不对 这个很明显设计到什么副作用

16:12.460 --> 16:20.620
user effect 啊 这边的user effect 啊 这边呢 接收一个横数啊 人家这边呢 他就打印一次

16:20.860 --> 16:24.620
所以这边没有依赖啊 在这里面 在这里面的话 我们就打印

16:25.180 --> 16:30.220
clg 哦 这边我就直接把他拿过来吧 在我们的这个文档里面

16:31.580 --> 16:33.660
这把他拿过来啊 就这块啊

16:34.300 --> 16:40.810
这一块 把他拿过来 拿过来之后人家这边大家看一下

16:41.610 --> 16:43.770
嗯 这边的话是comname

16:44.810 --> 16:48.490
嗯 这边我看一下啊 这边这边呢 你就应该是什么什么敲的一

16:49.530 --> 16:51.530
主键 然后敲的一

16:53.210 --> 17:00.730
已经创建啊 主键敲的一已经销毁 对不对啊 这边这边呢 有一个时间 时间的话就用我们之前

17:00.810 --> 17:03.530
我们之前那个入门篇不是有一个那个工具函数吗

17:04.170 --> 17:07.210
把拿过来啊 这边我们新建一个utus

17:07.930 --> 17:10.730
utus下面然后新建一个这个tools

17:11.450 --> 17:16.810
ok 好 我们把之前那个之前我们写的那个辅助函数 我们把拿过来

17:17.690 --> 17:20.170
啊 就我们之前那个前台后台是不是都用了的

17:21.690 --> 17:23.850
啊 入门篇啊 随便找一个

17:24.730 --> 17:27.930
然后这个啊 客厂代码

17:29.450 --> 17:31.770
然后src下面是吧

17:32.570 --> 17:35.210
然后utu啊 把这个

17:35.850 --> 17:41.190
把这个复制过来吧 看一下这边能不能粘过来

17:41.670 --> 17:42.790
哎 这边还粘不过来

17:43.430 --> 17:48.310
然后这边把它打开啊 就这个啊

17:49.190 --> 17:53.750
把这个这个函数把拿过来啊 contrc

17:55.430 --> 17:56.550
啊 把这个拿过来

17:57.190 --> 17:57.670
ok

17:58.390 --> 18:01.990
啊 这个这个就这个就不管它了啊 这是前用的这个工具函数

18:02.950 --> 18:04.950
好 然后这里这里的话是不是就是引入

18:06.150 --> 18:06.950
import

18:08.470 --> 18:11.030
那个叫什么 format that

18:11.910 --> 18:12.310
然后

18:13.510 --> 18:13.910
from

18:15.350 --> 18:16.390
这个上一级

18:17.670 --> 18:20.950
上一级的utus下面的tools

18:21.830 --> 18:25.670
好 然后保存 保存之后来这边来看一下

18:28.580 --> 18:30.100
控制台 你看这边

18:30.740 --> 18:32.660
是不是这边啊 这个看不一已经创建

18:33.300 --> 18:37.300
对不对 好 人家这边相同的逻辑你就还得干嘛 是不是再写一遍

18:38.820 --> 18:41.940
来到这边啊 然后接下来话这里

18:43.300 --> 18:45.460
再来写一遍 然后到这里

18:47.460 --> 18:49.220
对不对啊 这边呢是contr

18:49.780 --> 18:50.580
contr

18:50.900 --> 18:52.740
好了 你这边让你是不是就发现问题了

18:53.300 --> 18:54.020
什么问题啊

18:54.340 --> 18:59.220
这一段代码它是什么 它是不是属于那种公共的这个逻辑

18:59.780 --> 19:02.980
我没有必要在这个每个这个组件里面什么都写一份

19:03.540 --> 19:06.660
对不对 虽然效果是达到了哈 效果是达到了

19:06.980 --> 19:11.060
ok 但是我这边让我实际上 实际上没有必要就是每个组这个组件里面

19:11.540 --> 19:12.580
写一份这个逻辑

19:12.900 --> 19:15.140
这个其实就是什么 这个其实就是公共逻辑

19:15.700 --> 19:17.780
啊 就是我们刚才这边这个图片这边

19:18.580 --> 19:20.100
所以就是属于这种公共逻辑

19:20.740 --> 19:24.980
对不对 那公共逻辑的话 我这边就可以干嘛 我这边就可以通过高階组件

19:25.300 --> 19:26.580
我把它抽离出来

19:27.220 --> 19:29.860
ok 啊 所以说我这边的话我新建一个

19:31.460 --> 19:35.220
我在这边新建一个文件夹 叫做什么呢 叫做hoc

19:36.580 --> 19:39.300
啊 这个呢就是专门来放这个高階组件了

19:39.860 --> 19:44.020
好 这边这边呢 我们就新建一个 新建一个比如说叫做这个wisnog

19:45.620 --> 19:47.940
啊 高階组件一般是以这个wis开头

19:48.580 --> 19:49.700
啊 这边是js啊

19:50.580 --> 19:51.220
点js

19:51.780 --> 19:55.940
它一般是以这个wis开头啊 这个的话它是一些不成文的这个规定

19:56.180 --> 19:59.780
啊 我们这边遵守它这个规定啊 就好比你那个自定义互可

20:00.020 --> 20:01.460
一般是用这个use开头

20:02.180 --> 20:05.620
对不对 它这边高階组件一般是用这个wis开头啊

20:06.020 --> 20:08.340
好 然后里面里面是什么 里面是不是函数啊

20:09.220 --> 20:10.260
对不对 function

20:13.830 --> 20:14.390
方 a

20:15.350 --> 20:16.390
function

20:17.030 --> 20:19.510
啊 大家这边呢 我们叫做什么 叫做wisnog

20:20.790 --> 20:22.070
ok 它就是一个函数

20:22.550 --> 20:25.270
啊 这个函数的话 然后你把它干嘛 你把它导出出去

20:25.670 --> 20:26.070
对不对

20:26.710 --> 20:27.190
export

20:28.470 --> 20:29.110
defort

20:29.750 --> 20:30.790
把它导出出去

20:31.270 --> 20:35.110
好 然后接下来在这个函数里面 这个函数里面是不是接收一个组件

20:36.790 --> 20:41.030
对不对 接收一个组件 然后接下来返回什么呢 返回一个新组件

20:42.070 --> 20:42.630
return

20:45.990 --> 20:46.550
return

20:46.870 --> 20:49.110
return一个新组件 这边function

20:49.750 --> 20:50.630
newcom

20:53.420 --> 20:55.740
ok 好 然后我们这边把这个注释写一下

20:57.660 --> 21:00.460
接收参数 接收参数什么呢 接收一个新组件

21:02.140 --> 21:03.180
接收一个

21:03.740 --> 21:05.420
就接收一个组件

21:06.300 --> 21:09.180
对吧 然后返回 返回一个

21:10.620 --> 21:11.100
新组件

21:12.460 --> 21:12.940
对不对

21:12.940 --> 21:17.260
好 整个函数 整个函数是目标是干嘛 目标的话是就是

21:17.740 --> 21:19.500
在接收的

21:20.540 --> 21:23.260
接收的组件

21:23.980 --> 21:24.940
这个上面

21:25.580 --> 21:29.420
然后添加一些什么呢 添加一些公共的逻辑

21:33.370 --> 21:33.770
看到没有

21:34.330 --> 21:37.610
好 那回头的话我们就可以干嘛 我们回头的话就可以把这一块

21:39.370 --> 21:45.130
这一块直接写到哪里 是不是直接写到我们这边返回了这个新组件这边

21:45.930 --> 21:48.330
对不对 我这边直接就把这个就抽离了

21:48.890 --> 21:49.530
抽离出来

21:50.010 --> 21:52.650
抽离出来之后 然后你把这个该引的把引一下

21:53.210 --> 21:54.330
啊 这边Import

21:56.170 --> 21:58.170
UserEffect

21:58.890 --> 21:59.610
from

22:00.890 --> 22:01.290
react

22:02.890 --> 22:03.290
react

22:03.610 --> 22:05.130
好 人家这边的Import

22:06.170 --> 22:07.450
这个format

22:08.170 --> 22:08.490
Dat

22:09.370 --> 22:10.010
把引一下

22:10.410 --> 22:12.970
引下之后人家这边 这边的话因为它是公共的

22:13.450 --> 22:17.530
一会我不论是这个组件1 就是直组件1还是直组件2

22:17.690 --> 22:20.810
是不是都要用它 对不对 所以你这边肯定不可能写死

22:22.330 --> 22:27.050
这边就应该是什么 这边是不是你这边不是就是你之前的这个组件传过来了吗

22:27.610 --> 22:30.250
传过来了之后它这边它有一个什么的有个内幕属性

22:31.770 --> 22:34.810
OK 因为你本身就是函数嘛 函数呢它这边就有内幕属性嘛

22:35.450 --> 22:36.490
对不对 OK

22:37.290 --> 22:38.650
好 我们这边把他拿过来

22:40.170 --> 22:43.610
上面啊 我就把什么 我就把这个逻辑封装到哪里

22:43.610 --> 22:46.010
是封装到我这个新组件上面啊

22:46.730 --> 22:51.210
对不对 让我新组件我这边要干嘛 我新组件是不是要返回一段仕图啊

22:52.650 --> 22:55.450
对不对 让我新组件我比如说我返回个这个div

22:56.010 --> 22:59.930
123 那最终你这个用我这个高级组件包了之后拿到了新组件

23:00.490 --> 23:04.650
返回的仕图就是123 对不对 但我们这边肯定不可能想当人啊

23:05.050 --> 23:08.090
想返回什么就返回什么 我们这边其实就应该返回什么

23:08.410 --> 23:10.650
是不是你给我传入了这个组件的这个仕图啊

23:11.450 --> 23:13.610
对不对 啊所以我们这边呢就是

23:15.130 --> 23:15.610
come

23:16.250 --> 23:17.610
哎 返回他就可以了

23:18.650 --> 23:18.890
ok

23:19.770 --> 23:24.330
好 返回他之后 然后接下来的话 我们这边就是在用的时候啊 这个一会再说吧

23:25.210 --> 23:29.930
这一会再说 好 我们总之的话 我们现在的话 这边就封装好了啊 这边写一下啊

23:30.730 --> 23:31.450
就一般来讲

23:33.130 --> 23:35.770
一般来讲 就是传入的组件

23:37.130 --> 23:43.130
传入的组件会作为什么呢 新组件的仕图

23:44.090 --> 23:45.050
啊 仕图部分

23:45.930 --> 23:50.490
ok 那这一部分这一部分是不是就是什么 是抽离的这个公共逻辑

23:52.330 --> 23:53.370
抽离的

23:54.090 --> 23:54.890
公共

23:55.930 --> 23:56.330
逻辑

23:57.530 --> 23:59.770
ok 好 来 我们这边让我们来试一下

24:00.730 --> 24:01.530
啊 来试一下

24:02.170 --> 24:07.930
好 这边的话 我们这个组件这个就不变了啊 这个的话 我们就把它改回去 这边那就是这个样子

24:09.450 --> 24:12.410
ok 好 我们把直组件2 直组件2也把它改回去

24:16.200 --> 24:22.040
好 ok 啊 这个是组件2 好 然后接下来来到哪里了 来到我们的这个app

24:22.600 --> 24:27.560
来到app 这边这边的话 我们就引入 我们刚才封装好的这个高阶组件

24:28.200 --> 24:30.200
啊 这边呢 是叫做visnog

24:31.720 --> 24:32.840
对吧 然后from

24:33.640 --> 24:37.000
当前目录下面的hoc 下面的visnog

24:37.800 --> 24:40.840
好 那他是一个什么 他是不是他是个函数

24:41.480 --> 24:45.880
对不对 他是个函数 然后传入什么 是不传入我们这个旧的组件

24:46.280 --> 24:51.400
他会给你返回一个什么 会给你返回一个新的组件 对不对 那我们这边就叫做new

24:52.120 --> 24:53.800
new这个childcome

24:55.720 --> 24:56.200
com1

24:57.800 --> 25:02.680
对不对啊 这边那是一样 这边那是二啊 这边那是二

25:03.640 --> 25:08.840
ok 回头你这边在使用的时候 你就应该是使用什么了 就是使用这个new

25:10.200 --> 25:14.040
对不对啊 一个是newchildcome1 newchildcome2

25:14.760 --> 25:15.960
好 来 我们来看一下好不好使

25:17.000 --> 25:23.880
过来 出来没有啊 首先的话 这边这个封装的这个日子功能

25:24.920 --> 25:28.600
好不好使啊 好使 对不对啊 没问题

25:29.480 --> 25:35.560
这个倒是没问题 但是呢 我们这边的话会存在一个问题 什么呢 你这边传的这个prop

25:36.280 --> 25:39.240
prop的话 这边是干嘛呀 这边是不是没拿到啊

25:40.280 --> 25:45.000
对不对 也就是说你这边啊 你这个child1这边这边是没有拿到的 为什么没有拿到

25:45.480 --> 25:48.360
因为你这边在用的时候 你这边是给谁传的

25:48.920 --> 25:54.280
newchildcome1 newchildcome1是谁啊 newchildcome1是这个组件

25:56.040 --> 26:01.800
看到没有 是这个组件啊 也就是说他这边接收到了什么 他这边接收到了props

26:03.320 --> 26:07.320
啊 他这边接收 接收到了之后 然后接下来你这边需要把这个props给谁

26:07.880 --> 26:14.040
是不是给你的这个看嘛 对不对 给你之前传入的这个组件啊 所以我们这边呢一般就是什么呢

26:15.240 --> 26:21.160
一般这边就是点点点props把它展开就可以了啊 保存

26:21.960 --> 26:27.000
看一下 搞定没有 搞定了吧啊 刷新一下 怎么搞定了

26:27.640 --> 26:33.400
啊 我们这边的话可以来尝试一下这个销毁啊 销毁的话 我们这边让我们就在这写个这个状态

26:35.510 --> 26:38.870
import这个useState

26:40.070 --> 26:42.070
啊 大家这边让我们来定一个状态

26:43.030 --> 26:44.070
const

26:44.630 --> 26:45.830
一个这个toggle

26:46.630 --> 26:48.070
然后settoggle

26:49.990 --> 26:54.230
然后等于一个useState啊 默认什么呢 默认是true

26:55.270 --> 26:59.190
ok好 大家这边这边我们给一个这个barton

27:01.290 --> 27:02.250
这边给个barton

27:05.000 --> 27:07.880
barton是做什么呢 barton的话做一个这个切换

27:11.640 --> 27:12.920
啊 做一个这个切换

27:14.440 --> 27:16.600
啊切换大家这边的话就是unclick

27:17.560 --> 27:19.880
unclick等于

27:21.160 --> 27:25.240
啊这边做什么呢 这边的话其实做的很简单 这边就是settoggle

27:25.800 --> 27:28.280
啊 然后把这个toggle取个反就可以了

27:30.310 --> 27:31.030
toggle

27:32.950 --> 27:38.870
把它取个反 ok好 这边这边就根据什么呢 这边那就根据你的这个toggle的这个值

27:39.990 --> 27:44.950
toggle是否为真 如果为真的话我们这边就渲染这个chow的

27:47.430 --> 27:48.470
嗯 稍等

27:49.270 --> 27:49.990
就渲染他

27:50.870 --> 27:52.870
对吧 如果为真我们就渲染他

27:53.510 --> 27:56.150
否则的话我们就渲染谁 否则我们就渲染他

27:57.270 --> 27:58.390
对吧 我把它改一下

28:00.760 --> 28:03.960
ok好 大家这边我们来看一下 小心

28:05.400 --> 28:07.720
ok 你看一开始 一开始的话是不是只有这个啊

28:08.360 --> 28:12.760
chow的com1 对不对 创建啊这边 好大家这边切换

28:13.480 --> 28:16.280
切换之后让家这边chow的com1是不是已经销毁

28:16.840 --> 28:17.880
对了 销毁时间

28:18.440 --> 28:20.760
好 大家这边这个组建2是不是创建

28:21.400 --> 28:23.000
对不对 让家这边再切换回来

28:23.480 --> 28:25.480
好 大家这边是吧2已经销毁

28:25.800 --> 28:26.760
那1是不是创建

28:27.400 --> 28:31.240
对不对 那说明什么 说明我们这边这个逻辑是不是完全OK的

28:31.880 --> 28:33.160
对吧 没有问题

28:34.200 --> 28:34.760
没有问题

28:36.120 --> 28:39.320
ok 这就是关于这个高筋组这个组建的这个势力

28:40.040 --> 28:40.680
不难吗这个

28:41.480 --> 28:42.920
对不对 喝口水

28:50.870 --> 28:54.390
这就是关于这个高筋组建 说白了其实就是接受一个组建

28:54.870 --> 28:56.550
然后这样我给你返回一个什么新组建

28:57.110 --> 28:59.030
但我肯定不是原封不动的给你返回

28:59.430 --> 29:02.390
对不对 原封不动的给你返回这个我干嘛呢

29:02.710 --> 29:04.150
所以我这边会给你干嘛

29:04.470 --> 29:05.990
所以添加一些公共的逻辑上去

29:06.550 --> 29:09.110
对不对 然后接下来你这个之前的组建 我再作为什么呢

29:09.270 --> 29:10.790
作为我新组建的这个仕途

29:11.270 --> 29:12.230
我给他返回回去

29:12.710 --> 29:16.470
一般来讲的话这个probs 然后加你这边就接收接收到了之后

29:16.470 --> 29:20.630
然后加这边原样给这个就是之前的组建就可以了

29:21.350 --> 29:23.110
真正我这边给了之后我这边还可以干嘛

29:23.270 --> 29:25.270
我这边是不是还可以给一些这个额外的

29:25.830 --> 29:28.230
对不对 还可以给一些这个额外的这些属性

29:28.870 --> 29:29.670
都是可以的

29:30.790 --> 29:32.070
好 这是关于这个

29:33.350 --> 29:36.150
好 然后接下来我们继续往下啊 继续往下

29:38.070 --> 29:39.110
这是刚才那个例子

29:40.230 --> 29:44.390
好 然后高筋组建的话他还可以干嘛呢 还可以这个嵌桃操作

29:45.030 --> 29:47.270
比如说现在我有两段公共逻辑

29:47.750 --> 29:51.110
但是这两段公共逻辑的话你写在一个高筋组建里面

29:51.110 --> 29:52.390
他其实又不太合适

29:53.430 --> 29:54.710
对不对 有这样的情况吧

29:55.190 --> 29:58.710
对不对 我不可能所有的这个公共逻辑我都写到一个高筋组建里面

29:59.510 --> 30:00.550
这样不太合适

30:00.790 --> 30:03.110
所以有些时候的话我需要根据你的这个功能

30:03.590 --> 30:05.190
我是不是会做一些这个其他的

30:05.910 --> 30:10.390
对不对啊 那我这边就把它拆分成这个几个这个高筋组建

30:11.030 --> 30:12.950
啊 那比如说我这边取了个例子

30:13.430 --> 30:15.590
比如我这边呢有一个这个叫做with timer的

30:15.910 --> 30:16.870
那我们把它写一下吧

30:17.430 --> 30:17.830
写一下

30:19.430 --> 30:20.070
好 保存

30:20.070 --> 30:23.910
啊 这边呢是with timer

30:25.190 --> 30:27.110
啊 就是给它加一个 timer上去

30:27.990 --> 30:29.590
啊 这边呢是export

30:30.710 --> 30:31.350
default

30:32.390 --> 30:32.870
方形

30:33.510 --> 30:34.870
啊 这边with timer

30:37.030 --> 30:37.510
对吧

30:37.510 --> 30:40.470
啊 with timer 这边这边呢是接受一个

30:41.350 --> 30:41.670
come

30:43.190 --> 30:45.030
啊 大家这边呢是返回一个

30:46.390 --> 30:46.950
return

30:47.910 --> 30:49.430
return 一个这个

30:49.510 --> 30:49.990
function

30:50.630 --> 30:51.350
new come

30:53.510 --> 30:54.790
啊 返回一个新组建

30:55.350 --> 30:56.870
新组建这边会接受一个什么

30:57.510 --> 30:57.910
probs

30:58.710 --> 30:59.110
对吧

30:59.110 --> 31:00.390
好 来 我们把注释写一下

31:01.190 --> 31:03.190
啊 这个呢是with组建

31:05.510 --> 31:06.310
with组建

31:06.950 --> 31:07.670
添加什么呢

31:07.670 --> 31:09.030
添加这个 timer

31:09.750 --> 31:10.070
啊

31:10.390 --> 31:12.230
啊 这个这个呢是就组建

31:14.070 --> 31:14.870
就组建

31:14.870 --> 31:16.150
返回 返回什么呢

31:16.150 --> 31:17.270
返回新的组建

31:18.870 --> 31:19.270
OK

31:19.830 --> 31:21.270
好 然后现在在这里

31:21.350 --> 31:24.870
这里的话咱们就来抽离这个公共逻辑

31:24.870 --> 31:25.990
我们要添加一个 timer

31:26.470 --> 31:28.950
啊 让我这边呢首先需要有一个这个状态

31:29.830 --> 31:31.030
这边的话 import

31:32.310 --> 31:34.390
import 一个 user state

31:34.950 --> 31:37.430
还有一个 user effect

31:38.390 --> 31:38.790
from

31:39.830 --> 31:40.310
react

31:41.510 --> 31:41.910
OK

31:42.230 --> 31:44.790
好 大家这边这边呢我们来抽离公共逻辑

31:45.830 --> 31:46.470
抽离

31:49.240 --> 31:50.200
公共逻辑

31:53.620 --> 31:55.620
好 这边这边呢咱们就来一个这个

31:55.700 --> 31:56.260
container

31:56.980 --> 31:57.380
set

31:58.340 --> 31:58.820
container

32:00.180 --> 32:01.780
等于一个 user state

32:03.540 --> 32:03.780
e

32:04.740 --> 32:05.060
OK

32:07.370 --> 32:10.410
好 然后接下来的话我们给它添加一个计时器

32:10.410 --> 32:12.410
那这个很明显是水负作用

32:12.410 --> 32:14.170
对吧 我们这边 user effect

32:16.100 --> 32:16.660
啊 这边

32:17.380 --> 32:18.260
user effect

32:18.820 --> 32:20.900
然后这边这边它也没有什么依赖项

32:21.300 --> 32:22.660
啊 这边的话添加一次

32:23.300 --> 32:26.100
好 然后接下这边这边呢我们就是一个set

32:26.580 --> 32:26.980
interval

32:31.450 --> 32:33.370
好 大家这边呢每个多少呢

32:33.370 --> 32:34.890
伟格这个一秒钟

32:35.610 --> 32:37.770
每个一秒钟 然后接下来我们这边就打印

32:39.610 --> 32:41.290
打印这个conventer

32:41.930 --> 32:44.570
OK 打印之后然后接下来这边的话set

32:44.570 --> 32:45.210
conventer

32:45.370 --> 32:46.490
这边这个conventer

32:46.810 --> 32:47.290
加1

32:49.290 --> 32:49.610
OK

32:50.410 --> 32:52.970
啊 这边这边它有个依赖项 依赖项应该是conventer

32:56.020 --> 32:58.340
OK 这边呢就是设置一个这个计时器

32:58.580 --> 33:01.300
好 大家这边呢我们这边保存下它的返回值

33:01.620 --> 33:02.260
conventer

33:02.260 --> 33:02.980
一个stop

33:04.260 --> 33:05.140
这个timer

33:07.480 --> 33:07.880
OK

33:08.120 --> 33:10.280
好 大家这边呢你这边还需要干嘛 是吧

33:10.280 --> 33:11.000
还需要销回

33:11.640 --> 33:13.640
对 返回一个新的方形

33:15.240 --> 33:17.240
啊 这新的方形这边就是cleared

33:18.600 --> 33:19.880
clearedinterval

33:20.680 --> 33:21.480
stop timer

33:21.800 --> 33:23.240
然后我这边呢是就干嘛 是吧

33:23.240 --> 33:24.520
添加了一个这个计时器

33:24.840 --> 33:26.840
那既然你这个组件在销回的时候我干嘛

33:26.840 --> 33:28.440
我把你这个计时器给你清空

33:29.160 --> 33:29.560
对不对

33:29.880 --> 33:31.400
好 大家这边呢我们返回

33:34.040 --> 33:35.480
返回这个con

33:40.540 --> 33:41.580
返回这个con

33:41.580 --> 33:42.860
啊 把这个props

33:43.100 --> 33:43.900
点点点

33:44.620 --> 33:45.180
props

33:45.420 --> 33:45.980
把它过来

33:46.460 --> 33:46.860
OK

33:47.020 --> 33:48.300
好 我们这边呢就是这个

33:48.540 --> 33:49.260
with timer

33:49.660 --> 33:50.620
我们就写好了

33:51.100 --> 33:52.060
好 写好了之后

33:52.060 --> 33:53.580
然后接下来的话来到哪里呢

33:53.580 --> 33:54.460
来到我们这边

33:55.740 --> 33:56.780
来到app这边

33:57.020 --> 33:58.380
好 这边的话咱们就干嘛

33:58.380 --> 34:01.100
这边咱们这边呢就把那个with timer再把它引进来

34:03.610 --> 34:04.410
with timer

34:06.330 --> 34:06.810
哎

34:06.890 --> 34:07.690
with timer

34:07.930 --> 34:08.410
引进来

34:08.650 --> 34:10.010
好 引进来了之后你这边

34:10.010 --> 34:11.450
这边它是可以切套的

34:11.850 --> 34:13.290
因为你本身你这个东西

34:13.290 --> 34:14.570
这玩意它是干嘛

34:14.730 --> 34:15.930
它说返回一个组件

34:16.330 --> 34:16.730
对不对

34:16.730 --> 34:17.370
返回一个组件

34:17.370 --> 34:18.890
那我这边是不是可以继续

34:19.930 --> 34:21.450
with timer

34:21.770 --> 34:22.810
然后接下来这边继续

34:23.210 --> 34:23.530
对不对

34:23.530 --> 34:24.650
你整个这个返回一个组件

34:24.650 --> 34:26.090
组件让我又传入到什么

34:26.090 --> 34:28.570
是不是传入到这个with timer这个高階组件里面

34:28.890 --> 34:29.450
可不可以

34:29.690 --> 34:30.410
可以吗

34:30.570 --> 34:31.290
咋不可以呢

34:31.530 --> 34:32.010
对不对

34:32.250 --> 34:33.210
啊 说这边的话

34:34.730 --> 34:35.770
with timer

34:37.780 --> 34:38.260
对不对

34:38.580 --> 34:38.980
OK

34:39.300 --> 34:40.660
好 来看一下好不好使

34:40.660 --> 34:41.220
保存

34:42.260 --> 34:43.220
啊 这边重新呢

34:44.740 --> 34:45.860
啊 这边这个计时器

34:46.740 --> 34:47.620
是不是开始打印了

34:48.420 --> 34:48.820
对不对

34:48.820 --> 34:50.500
你要这个逻辑的话就已经上去了

34:50.900 --> 34:52.340
啊 大家我们这边切换一下

34:52.900 --> 34:53.380
切换

34:54.660 --> 34:56.340
看不看 这边那就是这个组件2

34:57.220 --> 34:57.620
对吧

34:57.620 --> 34:58.100
组件2

34:58.420 --> 34:59.220
啊 开始打印

35:00.020 --> 35:00.420
对吧

35:00.420 --> 35:01.380
啊 大家这边呢

35:01.380 --> 35:02.340
这个再切换回来

35:03.220 --> 35:04.020
是不是组件1

35:04.020 --> 35:04.900
是不是从头开始啊

35:05.860 --> 35:06.340
对不对

35:06.660 --> 35:07.060
OK

35:08.020 --> 35:09.780
啊 这就是关于这个

35:10.580 --> 35:11.620
啊 高階组件

35:12.180 --> 35:13.700
啊 高階组件要做了这个事情

35:14.100 --> 35:14.980
说白了就是什么

35:14.980 --> 35:16.580
是不是添加这个公共逻辑

35:17.540 --> 35:17.940
对不对

35:18.420 --> 35:18.660
OK

35:19.460 --> 35:20.420
啊 最后啊

35:20.420 --> 35:21.140
最后说一下

35:21.140 --> 35:22.660
关于这个高階组件

35:22.660 --> 35:24.100
它的一个现状

35:24.660 --> 35:25.380
啊 它的现状

35:25.940 --> 35:26.900
这高階组件

35:26.900 --> 35:28.420
它的这个出现啊

35:28.820 --> 35:30.660
它确确事实解决了什么呢

35:30.660 --> 35:32.100
解决的就是组件之间

35:32.500 --> 35:34.820
我如何这个横向抽离

35:34.820 --> 35:36.660
这个公共逻辑的这个问题

35:37.460 --> 35:38.420
它解决这个问题

35:38.820 --> 35:40.260
啊 说你在这个

35:40.260 --> 35:42.500
各 就是各个这种生态库里面

35:42.500 --> 35:44.420
啊 你都能见到这个

35:44.420 --> 35:45.780
高階组件的这个生意

35:46.660 --> 35:48.180
比如说我们之前是不是学过这个

35:48.580 --> 35:49.540
react redox

35:50.340 --> 35:50.660
对吧

35:51.220 --> 35:52.900
react redox里面有一个什么呢

35:52.900 --> 35:54.340
有一个叫做connect

35:55.140 --> 35:55.940
有一个这个方法

35:56.420 --> 35:57.460
只不过我们没有用

35:58.020 --> 35:58.340
对不对

35:58.340 --> 35:59.300
我给大家说就是

35:59.860 --> 36:01.460
这个connect以前用了很多

36:01.940 --> 36:02.340
现在的话

36:02.340 --> 36:04.100
它官方建议你使用什么

36:04.100 --> 36:05.380
是不是建议你使用这个

36:05.460 --> 36:06.980
UserSelector

36:07.300 --> 36:08.660
然后我们后面写项目的时候

36:08.660 --> 36:09.860
都是用了UserSelector

36:10.340 --> 36:10.740
对不对

36:10.740 --> 36:13.300
但是在这个UserSelector出来之前

36:13.940 --> 36:14.500
你这边的话

36:14.500 --> 36:15.380
你这个直组件

36:15.380 --> 36:17.300
想要访问这个仓库的数据

36:17.300 --> 36:18.100
都是通过什么呢

36:18.100 --> 36:19.140
都是通过connect

36:20.260 --> 36:21.060
通过connect

36:21.460 --> 36:22.340
去连接一下

36:22.660 --> 36:24.340
好 你看一下这个connect怎么用的

36:24.340 --> 36:25.700
我这边给了一些视力

36:25.700 --> 36:26.740
这边connect

36:27.300 --> 36:28.100
一个扩耗

36:29.220 --> 36:29.620
对不对

36:29.940 --> 36:31.140
好 大家这边呢就是什么呢

36:31.140 --> 36:32.900
这边就是传入MyComponent

36:32.900 --> 36:33.940
这个很明显是个组件

36:34.740 --> 36:35.140
对不对

36:35.220 --> 36:36.100
很明显是个组件

36:36.900 --> 36:37.380
你看这边

36:37.380 --> 36:38.580
看一下它的用法

36:39.060 --> 36:41.780
那你这边很明显就是这个connect

36:42.180 --> 36:43.380
你调用之后

36:43.380 --> 36:45.300
它返回的是一个什么

36:45.860 --> 36:46.740
你就看这一句

36:47.060 --> 36:47.700
就看这一句

36:48.660 --> 36:49.380
connect

36:49.380 --> 36:50.180
调用之后

36:50.180 --> 36:51.220
你就让它就这一块

36:51.220 --> 36:52.740
这一块你觉得它返回的是什么

36:53.620 --> 36:55.380
说很明显是个高阶组件

36:56.420 --> 36:56.900
对不对

36:56.900 --> 36:58.100
很明显是个高阶组件

36:58.100 --> 36:58.820
然后接下来的话

36:58.820 --> 36:59.620
我这边在干嘛

36:59.620 --> 37:01.140
是不是这边再传入个组件

37:01.140 --> 37:03.140
那整个这一块在干嘛

37:03.140 --> 37:04.740
所以再给我返回一个新的组件

37:05.860 --> 37:06.500
对不对

37:06.500 --> 37:07.540
再返回新的组件

37:08.260 --> 37:08.740
这个的话

37:08.740 --> 37:09.620
其实你在这个官网

37:09.620 --> 37:10.500
你这边是看得到的

37:11.060 --> 37:11.940
这边还在计时

37:11.940 --> 37:12.740
等它计时吧

37:13.780 --> 37:14.580
看得到的

37:14.580 --> 37:15.620
读一下这一句话

37:16.580 --> 37:18.660
the return of connect

37:19.300 --> 37:20.500
is a what

37:20.500 --> 37:21.620
whopper function

37:22.260 --> 37:23.060
它是一个什么

37:23.060 --> 37:25.060
是不是它是一个这个whopper function

37:25.860 --> 37:26.420
对不对

37:26.420 --> 37:28.260
that takes your component

37:28.820 --> 37:31.060
and returns a whopper component

37:31.700 --> 37:34.180
with additional props

37:34.740 --> 37:35.780
it injects

37:36.340 --> 37:37.540
就它这边它是一个什么

37:37.540 --> 37:39.700
它的返回值是一个whopper function

37:40.260 --> 37:42.260
说白了就是一个高阶组件

37:42.260 --> 37:43.380
那接受一个什么

37:43.380 --> 37:44.900
接受一个你的组件

37:44.900 --> 37:46.340
那再给你返回一个什么

37:46.340 --> 37:47.380
whopper component

37:48.020 --> 37:49.620
就是一个增强了的组件

37:51.140 --> 37:51.460
OK

37:52.020 --> 37:52.420
看到没有

37:52.980 --> 37:53.780
这是关于这个

37:54.660 --> 37:56.580
就各个这个生态库

37:56.580 --> 37:57.940
你其实都可以看到这个

37:57.940 --> 37:59.940
高阶组件的这个身影

38:00.500 --> 38:01.060
但是

38:02.020 --> 38:02.500
但是

38:03.220 --> 38:05.300
就你如果去查这个官网

38:05.300 --> 38:06.660
你会发现这个官网

38:06.660 --> 38:09.300
它给的这个高阶组件的这个设立

38:09.300 --> 38:10.500
基本上都是什么呢

38:10.500 --> 38:11.780
基本上都是内组件

38:11.780 --> 38:13.380
来我们这边来看一下吧

38:13.380 --> 38:14.580
我这边打开了的

38:15.780 --> 38:16.580
来看一下呗

38:17.220 --> 38:18.100
是不是内组件

38:18.500 --> 38:18.980
对不对

38:20.100 --> 38:20.740
内组件

38:21.380 --> 38:21.780
对不对

38:21.780 --> 38:22.580
你整个翻完了

38:22.580 --> 38:24.260
你发现它给的实力都全都是

38:24.260 --> 38:25.060
这个是一个

38:25.380 --> 38:25.780
不对

38:26.180 --> 38:26.580
不对

38:26.580 --> 38:27.460
这个的话它是什么

38:27.460 --> 38:28.900
它是写的这个高阶组件

38:28.900 --> 38:30.660
那么说高阶组件本身就是个函数

38:31.220 --> 38:31.620
对

38:31.620 --> 38:33.380
这个是它写的这个高阶组件

38:33.940 --> 38:35.780
你会发现它势力的话都是什么

38:35.780 --> 38:37.540
都是就是函数式组件

38:37.940 --> 38:39.300
你这个你自己去翻一下

38:39.700 --> 38:40.260
OK

38:40.260 --> 38:40.820
为什么

38:41.780 --> 38:42.340
为什么

38:43.060 --> 38:46.020
为什么这个这个势力全是这个内组件呢

38:47.700 --> 38:48.500
原因很简单

38:49.060 --> 38:50.260
就是这个hoc

38:50.740 --> 38:53.300
它实际上早期就是为了解决什么呢

38:53.300 --> 38:55.300
就是为了解决这个内组件

38:55.860 --> 38:57.940
公共逻辑的这个抽离问题

38:58.980 --> 39:00.420
那个时候的话在这个

39:00.420 --> 39:01.460
整个react中

39:01.940 --> 39:02.980
内组件

39:03.620 --> 39:04.260
占主流

39:05.140 --> 39:05.540
OK

39:05.780 --> 39:06.580
就早期

39:06.820 --> 39:08.100
互可还没出来的时候

39:08.500 --> 39:09.140
那个时候

39:09.380 --> 39:10.660
基本上大家就是因为你这个

39:10.660 --> 39:11.940
只有内组件才有状态嘛

39:12.580 --> 39:14.260
对大家用的都是内组件

39:14.500 --> 39:15.780
内组件占主流

39:16.020 --> 39:18.100
但内组件的话就又会遇到什么

39:18.100 --> 39:20.660
又会遇到这个公共逻辑抽离的这个问题

39:21.700 --> 39:22.180
OK

39:22.580 --> 39:23.620
所以你看早期的话

39:23.620 --> 39:24.740
它这个hoc出现

39:24.740 --> 39:25.780
其实就是为了解决

39:25.780 --> 39:27.540
内组件的这个抽离问题的

39:28.180 --> 39:29.860
但是随着就是后面这个

39:30.020 --> 39:30.820
互可出现

39:31.940 --> 39:32.820
互可出现之后

39:32.820 --> 39:34.420
然后这个函数组件

39:35.060 --> 39:36.340
是慢慢开始占主流了

39:36.980 --> 39:37.460
对不对

39:37.780 --> 39:39.780
而加上我们整个这个react

39:39.780 --> 39:41.380
它这个开发的这个思想

39:41.780 --> 39:43.860
也从这个面向对象转成了

39:43.860 --> 39:44.900
这个函数式变成

39:45.300 --> 39:46.580
这个字项我们是说过的

39:47.220 --> 39:47.620
对不对

39:48.100 --> 39:49.540
那你这个函数式变成

39:49.540 --> 39:50.580
那你里面是什么

39:50.820 --> 39:52.100
什么一个一个的函数啊

39:52.740 --> 39:53.940
一个一个函数的话

39:53.940 --> 39:55.460
那你这个天然就是什么

39:55.700 --> 39:56.500
天然是不是就是

39:56.500 --> 39:57.620
其实就是可以抽

39:57.860 --> 39:59.220
就是可以抽取这个

39:59.220 --> 40:00.180
公共逻辑

40:01.140 --> 40:01.540
对不对

40:01.860 --> 40:03.220
所以你看现在这个抽离

40:03.220 --> 40:04.900
这个公共逻辑就很简单了

40:05.060 --> 40:05.940
我直接通过什么

40:05.940 --> 40:07.700
我直接通过这个制定互可就可以了

40:08.260 --> 40:09.860
我们之前是不是讲过制定互可

40:10.660 --> 40:11.060
对不对

40:11.460 --> 40:13.060
你这个你本身就是函数吗

40:13.060 --> 40:14.100
函数天然就是什么

40:14.100 --> 40:15.860
天然是就可以把这个公共逻辑

40:16.020 --> 40:17.140
给它抽离出来

40:17.700 --> 40:18.100
OK

40:19.300 --> 40:21.620
说你这边上你在这个react

40:21.700 --> 40:22.660
react redux官网

40:22.660 --> 40:24.100
你也可以看到这么一句话

40:24.580 --> 40:25.780
这边你在这看吗

40:25.780 --> 40:26.420
就就在这

40:27.460 --> 40:28.740
就在这就在这最上面

40:29.540 --> 40:29.940
看不看

40:30.740 --> 40:32.820
conlect still walks

40:33.460 --> 40:35.860
就是conlect它仍然是就是可以用的

40:36.500 --> 40:38.180
and is this supported

40:38.740 --> 40:40.820
in thisreact redux barter

40:41.060 --> 40:43.380
就这边在这个react redux barter

40:43.380 --> 40:44.020
几的版本

40:44.020 --> 40:44.820
它是支持的

40:45.380 --> 40:46.260
however

40:46.820 --> 40:48.180
然而对不对

40:48.740 --> 40:50.020
we recommended

40:50.420 --> 40:51.300
we recommend

40:51.780 --> 40:53.220
using the hooks

40:53.220 --> 40:54.500
我们推荐你使用什么

40:54.500 --> 40:55.220
使用hooks

40:55.700 --> 40:57.140
使用这个hooks api

40:57.540 --> 40:58.420
s default

40:59.220 --> 41:02.100
就我们推荐你默认使用这个hooks api

41:02.980 --> 41:04.260
所以这个hooks的出现

41:04.260 --> 41:05.060
大家会发现

41:05.060 --> 41:06.340
就是慢慢现在的话

41:06.340 --> 41:07.860
就是互可占主流

41:08.740 --> 41:10.020
很多以前的一些东西

41:10.020 --> 41:11.220
比如什么高阶主建啊

41:11.220 --> 41:12.580
这些慢慢的话

41:12.580 --> 41:13.540
其实就用的少了

41:14.020 --> 41:14.500
对不对

41:14.820 --> 41:16.340
它这边它一个时期

41:16.820 --> 41:19.460
是为了解决一个时期的这个特定问题

41:20.020 --> 41:21.220
才出现了这个技术

41:22.100 --> 41:22.580
明白吧

41:22.900 --> 41:23.460
这个

41:23.860 --> 41:24.740
就这一点哈

41:24.740 --> 41:27.220
我希望大家就是要有一个这个认知

41:27.780 --> 41:28.180
OK

41:28.180 --> 41:29.540
要有一个认知

41:29.540 --> 41:31.700
包括其实vue不也是这样子吗

41:31.700 --> 41:32.420
vue的话

41:32.420 --> 41:33.780
vue这个二点差

41:34.180 --> 41:35.060
用的是什么

41:35.060 --> 41:36.740
所以用的是这个mixins

41:37.860 --> 41:38.260
对不对

41:38.260 --> 41:40.340
但是你看现在到了这个vue3

41:40.340 --> 41:41.380
还需不需要这个东西

41:42.260 --> 41:42.820
还需不需要

41:43.380 --> 41:45.380
vue3的话就不需要这个东西了

41:45.380 --> 41:45.780
为什么

41:45.780 --> 41:46.660
因为vue3的话

41:46.660 --> 41:48.660
它改成那种composition api

41:48.660 --> 41:49.780
composition api是不是

41:49.780 --> 41:50.980
其实就是那种函数式呢

41:51.860 --> 41:52.420
对不对

41:52.420 --> 41:55.780
天然就支持这个公共逻辑的一个抽离

41:55.780 --> 41:56.980
所以就不需要你了

41:57.540 --> 41:58.100
对不对

41:58.100 --> 41:58.900
就不需要了

42:00.740 --> 42:01.060
好

42:01.060 --> 42:04.580
这就是关于整个这个高阶主建这节课

42:04.580 --> 42:06.660
要给大家介绍的这个内容

42:06.660 --> 42:07.460
大家下去的话

42:07.460 --> 42:08.260
可以把这个

42:08.260 --> 42:10.260
就是咱们课堂上写的这个两个例子

42:10.260 --> 42:10.740
哈

42:10.740 --> 42:11.940
下去把它写一些

42:11.940 --> 42:13.700
对这个高阶主建

42:13.700 --> 42:14.980
有这么一个认识

42:15.460 --> 42:15.860
OK

42:15.860 --> 42:16.420
好

42:16.420 --> 42:17.940
这节课就到这里

42:17.940 --> 42:18.900
再见

