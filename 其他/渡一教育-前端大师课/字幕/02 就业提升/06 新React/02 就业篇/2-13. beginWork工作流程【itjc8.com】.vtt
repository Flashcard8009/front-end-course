WEBVTT

00:00.050 --> 00:06.450
OK 在前面的话 我们给大家介绍了就是关于整个react的这个渲染流程

00:06.450 --> 00:13.250
它分成两大阶段 一个是Render阶段 一个是Commit阶段 对吧

00:13.250 --> 00:19.250
其中这个Render阶段它对于两个组件 一个是Scheduler 一个是Reconceptor

00:19.250 --> 00:25.250
那这个Scheduler的话 我在之前在前面的课程里面 我们已经给大家介绍了

00:25.250 --> 00:28.850
带着大家把这个圆码过了一下 对吧

00:28.850 --> 00:32.850
好 那这边的话 我们就正式进入到这个Reconceptor了

00:32.850 --> 00:38.850
好 Reconceptor 协调器 它的话是Render的这个第二阶段工作

00:38.850 --> 00:46.290
Reconceptor 这个它是协调器 翻译成中文叫做协调器

00:46.290 --> 00:54.290
它是这个Render阶段 Render阶段的这个第二阶段工作

00:54.290 --> 01:01.290
好 整个工作的这个过程可以分成什么呢 可以分成这个D和G

01:01.290 --> 01:13.290
整个工作的这个过程可以分为什么呢 可以分为这个D和什么呢 和这个G

01:13.290 --> 01:23.620
对吧 其中这个D它执行的是什么呢 它执行的是Beginwork

01:23.620 --> 01:34.620
而这个龟 龟的话执行的是什么呢 执行的是Complete Work

01:34.620 --> 01:40.620
对不对 我们之前在介绍这个整个渲染流程的时候 我们是给大家介绍过的

01:40.620 --> 01:46.620
好 我们把这张图的话拿过来 稍等 这边卡住了

01:46.620 --> 01:52.620
稍等 稍等 好 这边我们把这张图拿过来 这张图的话是之前看过的

01:53.620 --> 01:54.620
就这张图

01:57.620 --> 01:58.620
没有在上传

01:59.620 --> 02:04.620
好 这边 这边还记得吧 这边我们有这么样的一个这个结构

02:04.620 --> 02:07.620
这边DIV下面一个P 下面一个UR3个粒

02:07.620 --> 02:11.620
好 那接下来这边DIV 下面这个P 然后UR3个粒

02:11.620 --> 02:16.620
那接下来这个最顶层的DIV 是不是最先执行Beginwork

02:16.620 --> 02:21.620
对不对 接下来的话这个深度优先往下走 往下走 接下来的这个P

02:21.620 --> 02:24.620
P的话执行Beginwork

02:24.620 --> 02:28.620
Beginwork完了之后 然后接下来没有其他东西了 然后接下来它执行什么

02:28.620 --> 02:32.620
执行Completework 对不对 执行Completework

02:32.620 --> 02:37.620
好 回忆一下我们这个整个Completework 它主要是做什么的

02:37.620 --> 02:39.620
大家还记不记得

02:39.620 --> 02:42.620
这个Beginwork方法的话 我们之前说过

02:42.620 --> 02:48.620
Beginwork方法它主要是什么呢 主要是根据传入的fiberload

02:48.620 --> 02:53.620
然后创建下一级的fiberload 对不对

02:53.620 --> 03:03.620
Beginwork方法主要是根据传入的什么呢 传入的fiberload

03:03.620 --> 03:06.620
就你fiber这个节点

03:06.620 --> 03:18.270
然后干嘛呢 然后创建下一级 下一级 下一级的fiberload

03:19.270 --> 03:24.270
它是不是主要是做这样的事情 对不对 回忆一下

03:24.270 --> 03:31.270
然后我们这边把整个Beginwork的流程 来看一下

03:31.270 --> 03:39.270
整个Beginwork方法的流程如下图

03:39.270 --> 03:47.900
我这边先把流程图 我先把它拿过来 放到这里

03:47.900 --> 03:50.900
好 这边大家可以看一下 整个Beginwork

03:50.900 --> 03:54.900
它这边的话 实际上大致的这个流程就是这个样子的

03:54.900 --> 03:58.900
你这边的话 实际上首先它可以分成两大阶段

03:58.900 --> 04:04.900
一个是什么呢 一个是mount 或者是update 对不对

04:04.900 --> 04:11.900
首先在这个Beginwork中

04:11.900 --> 04:19.900
然后会判断 会判断当前的这个流程是mount

04:19.900 --> 04:25.470
mount就是什么 是不是初次渲染 对不对 初次渲染

04:25.470 --> 04:31.470
它是mount 还是什么呢 还是update update就是更新

04:31.470 --> 04:34.470
那么它如何判断呢 它判断的依据就是

04:34.470 --> 04:39.470
你的这个currentfiberload是否存在

04:39.470 --> 04:49.470
判断判断的依据就是currentfiberload是否存在

04:49.470 --> 04:53.470
OK 对应了代码的话 大致就是这个样子的

04:53.470 --> 04:58.190
我把这儿拿过来

04:58.190 --> 05:02.190
如果你这个current不等于nau

05:02.190 --> 05:06.190
那current不等于nau说明什么 说明是不是currentfiberload存在

05:06.190 --> 05:11.190
对不对 currentfiberload就是什么 是不是已经渲染到屏幕上的

05:11.190 --> 05:17.190
这个真实的这个dome 就是有存在 存在这个真实的这个dome

05:17.190 --> 05:19.190
对不对 那它就是应该是什么呢

05:19.190 --> 05:22.190
如果你听这个分子 它就应该是update

05:22.190 --> 05:26.190
否则的话它就是什么呢 它就是mount OK

05:26.190 --> 05:29.190
好 然后如果是什么呢 如果是update

05:29.190 --> 05:31.190
我们看这边 如果是update

05:31.190 --> 05:34.190
如果是update的话它接下来就会判断什么呢

05:34.190 --> 05:36.190
判断是否能够附用

05:36.190 --> 05:38.190
如果它不能够附用的话

05:38.190 --> 05:41.190
然后这个mount的这个流程是否基本上是相似的

05:41.190 --> 05:43.190
对不对

05:43.190 --> 05:48.500
如果是这个update

05:48.500 --> 05:53.500
接下来会判断 判断什么呢

05:53.500 --> 05:56.500
判断这个wip

05:56.500 --> 05:59.500
wip这个fiberload

05:59.500 --> 06:01.500
这个是什么 这个是不是我们之前讲的

06:01.500 --> 06:05.500
类似于那种后缓充区的这个load

06:05.500 --> 06:08.500
对不对 后缓充区的这个fiber节列

06:08.500 --> 06:11.500
在类传里面 就判断这个节点

06:11.500 --> 06:14.500
它是否什么呢 是否能够附用

06:14.500 --> 06:21.120
是否能够附用

06:21.120 --> 06:23.120
那如果能够附用 能够附用的话

06:23.120 --> 06:25.120
它接下来就继续往后面走

06:25.120 --> 06:28.120
这边会有一个优化路径 这个我们后面会说

06:28.120 --> 06:30.120
如果它不能够附用

06:30.120 --> 06:31.120
如果不能够附用的话

06:31.120 --> 06:34.120
那它的流程和这个mount是不基本一致

06:34.120 --> 06:36.120
你看不能附用的话 它是不是走这边

06:36.120 --> 06:38.120
是不是和mount基本一致

06:38.120 --> 06:39.120
对不对

06:39.120 --> 06:43.120
如果不能够附用

06:43.120 --> 06:50.120
那么update和这个mount的这个流程

06:50.120 --> 06:52.120
大体上一致

06:52.120 --> 06:55.120
只能说大体上

06:55.120 --> 06:57.120
只能说大体上

06:57.120 --> 07:00.120
大体上一致 主要就是分成这么几步

07:00.120 --> 07:03.120
首先第一个就是根据你的这个wip target

07:03.120 --> 07:07.120
进行这个不同的这个分支处理

07:07.120 --> 07:12.120
根据wip.target

07:12.120 --> 07:16.120
进行什么呢 进行不同的分支处理

07:16.120 --> 07:18.560
ok

07:18.560 --> 07:20.560
好 然后接下下一步 下一步的话

07:20.560 --> 07:21.560
这边这边是什么呢

07:21.560 --> 07:23.560
reconcil child fiber

07:23.560 --> 07:26.560
这个的话就是根据reconcil算法

07:26.560 --> 07:29.560
生成下一级的fiber load

07:29.560 --> 07:32.560
根据reconcil

07:32.560 --> 07:34.560
reconcil算法

07:34.560 --> 07:42.560
生成下一级的fiber load

07:42.560 --> 07:45.560
这个的话实际上就是有名的这个dif算法

07:45.560 --> 07:49.560
我们后面的话会专门拿一个章节来讲这个dif算法

07:49.560 --> 07:50.560
ok

07:50.560 --> 07:53.560
好 然后两个这个就两个流程

07:53.560 --> 07:55.560
两个流程的区别就在于

07:55.560 --> 07:56.560
就是你如果是update

07:56.560 --> 07:58.560
update它这边会标记什么呢

07:58.560 --> 08:00.560
会标记这个flex

08:00.560 --> 08:03.560
会标记这个就是有一些这个标记

08:03.560 --> 08:04.560
而如果是mount

08:04.560 --> 08:06.560
mount的话它这边是没有标记

08:06.560 --> 08:08.560
对不对

08:08.560 --> 08:11.560
update就是无法附用

08:11.560 --> 08:17.560
无法附用的这个update流程

08:17.560 --> 08:20.560
和mount流程

08:20.560 --> 08:21.560
大体一致

08:21.560 --> 08:22.560
这个是不是刚刚说过

08:22.560 --> 08:23.560
对不对

08:23.560 --> 08:24.560
大体一致

08:24.560 --> 08:26.560
然后主要区别

08:26.560 --> 08:29.560
主要区别在于

08:29.560 --> 08:34.560
是否会生成这个代

08:34.560 --> 08:37.560
副作用标记的

08:37.560 --> 08:41.560
就是副作用标记就是你这个flex的这个fiber load

08:41.560 --> 08:45.130
因为你如果是这个创建

08:45.130 --> 08:47.130
如果是这个新创建的如果是mount阶段

08:47.130 --> 08:48.130
它这边呢

08:48.130 --> 08:50.130
是不是就不存在什么这个副作用

08:50.130 --> 08:51.130
对不对

08:51.130 --> 08:52.130
你这边呢

08:52.130 --> 08:53.130
如果是这个更新

08:53.130 --> 08:54.130
如果是update

08:54.130 --> 08:55.130
那这边它就会

08:55.130 --> 08:58.130
可能就会存在一些这个副作用

08:58.130 --> 09:01.130
比如你要删除要修改之类的

09:01.130 --> 09:02.130
ok

09:02.130 --> 09:03.130
好

09:03.130 --> 09:05.130
那整体的这个beginwork方法

09:05.130 --> 09:07.130
它的这个代码结构如下

09:07.130 --> 09:14.130
beginwork方法的这个代码结构

09:14.130 --> 09:18.130
结构如下

09:18.130 --> 09:19.130
好

09:19.130 --> 09:20.130
这边让我把它拿过来

09:20.130 --> 09:26.640
放这里

09:26.640 --> 09:27.640
ok

09:27.640 --> 09:28.640
好

09:28.640 --> 09:29.640
首先进来你看这边的话有两个参数

09:29.640 --> 09:30.640
首先这个current

09:30.640 --> 09:31.640
current的话代表的是什么呢

09:31.640 --> 09:34.640
代表的是这个currentfiber load

09:34.640 --> 09:35.640
这边你注意

09:35.640 --> 09:45.640
这边这个current代表的是currentfiber load

09:45.640 --> 09:52.080
而这个walking progress代表的是什么呢

09:52.080 --> 09:55.080
代表的是这个walking progressfiber load

09:55.080 --> 09:57.900
ok

09:57.900 --> 09:58.900
后面

09:58.900 --> 10:01.900
后面我们会简称

10:01.900 --> 10:06.900
简称为这个wipfiber load

10:06.900 --> 10:08.900
一个是前缓冲区

10:08.900 --> 10:10.900
一个是后缓冲区

10:10.900 --> 10:11.900
对吧

10:11.900 --> 10:13.900
这个之前在讲那个fiber双缓冲的时候

10:13.900 --> 10:14.900
我们说过了

10:14.900 --> 10:15.900
ok

10:15.900 --> 10:16.900
好

10:16.900 --> 10:17.900
然后接下来这边

10:17.900 --> 10:18.900
这边还有一个是这个nince

10:18.900 --> 10:20.900
nince的话我们在后面会说

10:20.900 --> 10:22.900
这个在上节课讲那个

10:22.900 --> 10:23.900
未运算的时候

10:23.900 --> 10:24.900
我们是不是提了一下

10:24.900 --> 10:25.900
对不对

10:25.900 --> 10:27.900
react里面有一个这个nince

10:27.900 --> 10:29.900
它可以进行这个更细腻度的

10:29.900 --> 10:31.900
这个优先级的这个控制

10:31.900 --> 10:33.900
我们来看一下这边

10:33.900 --> 10:34.900
你看这边的话

10:34.900 --> 10:36.900
是不是就是根据你的这个current

10:36.900 --> 10:37.900
如果不等于空

10:37.900 --> 10:38.900
它就是更新

10:38.900 --> 10:39.900
否则的话

10:39.900 --> 10:40.900
那就是什么呢

10:40.900 --> 10:41.900
否则它就是手持渲染

10:41.900 --> 10:43.900
这边一个efls

10:43.900 --> 10:44.900
好

10:44.900 --> 10:45.900
然后接下来的话

10:45.900 --> 10:46.900
这边这个switch

10:46.900 --> 10:47.900
这个就是什么呢

10:47.900 --> 10:49.900
这个就是根据这个不同的这个tag

10:49.900 --> 10:52.900
进入不同的这个处理逻辑

10:52.900 --> 10:55.900
上面这个efls

10:55.900 --> 10:56.900
上面这个efls

10:56.900 --> 10:57.900
其实主要就是哪里

10:57.900 --> 10:58.900
是不是这边

10:58.900 --> 10:59.900
对不对

10:59.900 --> 11:00.900
判断你是这个update

11:00.900 --> 11:01.900
还是这个mount

11:01.900 --> 11:03.900
如果你是update

11:03.900 --> 11:04.900
比如你这边

11:04.900 --> 11:05.900
如果进入到这边是更新

11:05.900 --> 11:06.900
更新的话

11:06.900 --> 11:08.900
让它这边看你是否能够附用

11:08.900 --> 11:09.900
如果能够附用的话

11:09.900 --> 11:10.900
它直接就跳到这个

11:10.900 --> 11:11.900
后面的优化路径了

11:11.900 --> 11:12.900
如果不能附用的话

11:12.900 --> 11:14.900
它是不是还是就是和mount一样

11:14.900 --> 11:17.900
是不是走后面的这个switch这个流程

11:17.900 --> 11:18.900
对不对

11:18.900 --> 11:20.900
走这个流程

11:20.900 --> 11:21.900
好那接下来

11:21.900 --> 11:22.900
我们这边我们来看一下

11:22.900 --> 11:24.900
关于这个switch

11:24.900 --> 11:25.900
switch的话

11:25.900 --> 11:28.900
先根据你这个walkinprogress.tag

11:28.900 --> 11:30.900
就是你这个fiber

11:30.900 --> 11:31.900
它对应了这个tag

11:31.900 --> 11:32.900
这个tag的话

11:32.900 --> 11:36.900
它是定义在这个reactwalktag.json文件里面

11:36.900 --> 11:38.900
它一共的话有28种tag

11:38.900 --> 11:40.900
关于tag

11:40.900 --> 11:42.900
关于tag

11:42.900 --> 11:45.900
在这个react

11:45.900 --> 11:46.900
原码中

11:46.900 --> 11:50.900
定义了28种

11:50.900 --> 11:55.280
28种这个tag

11:55.280 --> 11:57.280
这里我这边从原码里面

11:57.280 --> 11:59.280
把它拿出来

11:59.280 --> 12:00.280
这边

12:00.280 --> 12:01.280
哪一部分出来

12:01.280 --> 12:02.280
你可以看到这边

12:02.280 --> 12:04.280
function component

12:04.280 --> 12:06.280
class component

12:06.280 --> 12:07.280
这个是

12:07.280 --> 12:09.280
injitter-mediate

12:09.280 --> 12:11.280
这个component

12:11.280 --> 12:12.280
hoster-root

12:12.280 --> 12:13.280
你看这边就是针对你

12:13.280 --> 12:15.280
这个不同的这个组件

12:15.280 --> 12:17.280
它这边是不是有不同的这个标签

12:17.280 --> 12:18.280
对不对

12:18.280 --> 12:19.280
不同的

12:19.280 --> 12:23.780
应该说不同的这个fiber-node

12:23.780 --> 12:26.780
就你不同的fiber-node节点

12:26.780 --> 12:27.780
它会有什么呢

12:27.780 --> 12:31.800
它会有不同的这个tag

12:31.800 --> 12:34.800
会有不同的这个tag

12:34.800 --> 12:36.800
那上面的这个tag代表什么意思呢

12:36.800 --> 12:38.800
比如这个host

12:38.800 --> 12:40.800
host component

12:40.800 --> 12:42.800
这个tag的话代表了什么

12:42.800 --> 12:44.800
代表的就是原生组件

12:44.800 --> 12:46.800
代表的就是

12:46.800 --> 12:48.800
原生组件

12:48.800 --> 12:49.800
OK

12:49.800 --> 12:50.800
什么叫原生组件

12:50.800 --> 12:52.800
好比你呢比如DIV

12:52.800 --> 12:53.800
span

12:53.800 --> 12:54.800
p

12:54.800 --> 12:56.800
这些是原生组件

12:56.800 --> 12:57.800
好

12:57.800 --> 12:59.800
然后接下来的话这个

12:59.800 --> 13:02.800
injitter-mediate component

13:02.800 --> 13:03.800
这个是什么呢

13:03.800 --> 13:05.800
这个是模糊的意思

13:05.800 --> 13:06.800
对不对

13:06.800 --> 13:07.800
模糊

13:07.800 --> 13:08.800
就像这边它写的有主事

13:08.800 --> 13:09.800
before we know

13:09.800 --> 13:12.800
whether it is a function or class

13:12.800 --> 13:13.800
就现在的话无法知道

13:13.800 --> 13:14.800
它究竟是function

13:14.800 --> 13:16.800
还是这个class

13:16.800 --> 13:17.800
究竟是这个函数组件

13:17.800 --> 13:18.800
还是类组件

13:18.800 --> 13:19.800
好

13:19.800 --> 13:21.800
这个的话就是你这个fc

13:21.800 --> 13:22.800
给你函数组件

13:22.800 --> 13:24.800
函数组件在这个mount

13:24.800 --> 13:28.240
在mount的时候

13:28.240 --> 13:30.240
会进入什么呢

13:30.240 --> 13:31.240
会进入这个

13:31.240 --> 13:32.240
在mount的时候

13:32.240 --> 13:34.240
它对应了这个tag就是这个

13:34.240 --> 13:38.510
对应了tag

13:38.510 --> 13:40.510
在mount的时候

13:41.510 --> 13:45.210
对应

13:45.210 --> 13:47.210
对应的tag

13:47.210 --> 13:49.210
为这个

13:49.210 --> 13:52.210
injitter-mediate component

13:52.210 --> 13:53.210
OK

13:53.210 --> 13:54.210
所以它就会进入什么呢

13:54.210 --> 13:56.210
它就会进入这个分子

13:56.210 --> 13:57.210
对不对

13:57.210 --> 13:59.210
它在这个update的时候

13:59.210 --> 14:02.210
在update的时候

14:02.210 --> 14:03.210
你update的时候

14:03.210 --> 14:04.210
是不是已经确定是

14:04.210 --> 14:06.210
这个function component了

14:06.210 --> 14:07.210
对不对

14:07.210 --> 14:08.210
它就会进入什么呢

14:08.210 --> 14:11.210
就会进入这个function

14:11.210 --> 14:15.220
function component

14:15.220 --> 14:16.220
OK

14:16.220 --> 14:17.220
好

14:17.220 --> 14:18.220
然后加这边

14:18.220 --> 14:19.220
这边这个class component

14:19.220 --> 14:20.220
这个也就是

14:20.220 --> 14:21.220
很明显

14:21.220 --> 14:22.220
就是什么

14:22.220 --> 14:23.220
类组件

14:23.220 --> 14:24.220
对不对

14:24.220 --> 14:25.220
类组件

14:25.220 --> 14:26.220
好

14:26.220 --> 14:28.220
这个比如这个host text

14:28.220 --> 14:29.220
就表示什么呢

14:29.220 --> 14:32.730
表示这个文本元素

14:32.730 --> 14:34.730
host text

14:34.730 --> 14:38.730
表示的是文本元素

14:38.730 --> 14:41.490
OK

14:41.490 --> 14:42.490
好

14:42.490 --> 14:43.490
然后接下来的话

14:43.490 --> 14:44.490
你这边

14:44.490 --> 14:46.490
不同tag类型的fiber load

14:46.490 --> 14:48.490
它这边进入到这个不同的分子

14:48.490 --> 14:50.490
做完处理之后

14:50.490 --> 14:51.490
好

14:51.490 --> 14:52.490
那如果你是mount流程

14:52.490 --> 14:53.490
它就会这边

14:53.490 --> 14:54.490
就会进入什么呢

14:54.490 --> 14:55.490
就会进入mount

14:55.490 --> 14:56.490
这个childfiber

14:56.490 --> 14:58.490
如果你是这个update流程

14:58.490 --> 14:59.490
这边就是什么呢

15:00.490 --> 15:01.490
这个childfiber

15:01.490 --> 15:02.490
它这边两个

15:02.490 --> 15:04.490
这个就是对应的

15:04.490 --> 15:05.490
这个函数是不一样的

15:05.490 --> 15:06.490
OK

15:06.490 --> 15:07.490
好

15:07.490 --> 15:08.490
来我们这边记一下

15:08.490 --> 15:13.490
根据不同的这个tag处理完

15:13.490 --> 15:17.490
处理完这个fiber load之后

15:17.490 --> 15:19.490
然后根据

15:19.490 --> 15:21.490
是mount

15:21.490 --> 15:23.490
还是这个update

15:23.490 --> 15:24.490
会进入什么呢

15:24.490 --> 15:28.490
会进入不同的这个方法

15:28.490 --> 15:30.490
如果你是这个mount

15:30.490 --> 15:32.990
如果你是mount

15:32.990 --> 15:33.990
mount的话

15:33.990 --> 15:34.990
它进入的是什么呢

15:34.990 --> 15:37.990
进入到的是这个child

15:37.990 --> 15:38.990
就这边

15:38.990 --> 15:41.990
这个是叫做mountchildfiber

15:41.990 --> 15:46.990
它进入的是mountchildfiber

15:46.990 --> 15:47.990
如果的话

15:47.990 --> 15:49.990
你是这个update

15:49.990 --> 15:51.990
如果是update

15:51.990 --> 15:52.990
它进入的是什么呢

15:52.990 --> 15:54.990
进入的是reconcil

15:54.990 --> 16:01.450
reconcil childfiber

16:01.450 --> 16:02.450
OK

16:02.450 --> 16:03.450
好

16:03.450 --> 16:04.450
这两个方法

16:04.450 --> 16:05.450
它这边有个s

16:05.450 --> 16:06.450
有个s

16:06.450 --> 16:11.100
这两个方法的话

16:11.100 --> 16:13.100
实际上他们都是

16:13.100 --> 16:15.100
一个叫做childreconcil

16:15.100 --> 16:17.100
方法的返回值

16:17.100 --> 16:20.100
这两个方法

16:20.100 --> 16:23.100
实际上

16:23.100 --> 16:25.100
实际上都是一个

16:25.100 --> 16:26.100
叫什么呢

16:26.100 --> 16:31.930
叫childreconcil

16:31.930 --> 16:36.010
reconcil

16:36.010 --> 16:38.010
方法的返回值

16:38.010 --> 16:40.010
大值的话是这样子的

16:40.010 --> 16:43.960
把这儿拿过来

16:43.960 --> 16:46.960
大值的话是这样子的

16:46.960 --> 16:47.960
OK

16:47.960 --> 16:49.960
这边有个childreconcil

16:49.960 --> 16:50.960
好

16:50.960 --> 16:52.960
这边你如果传一个q

16:52.960 --> 16:53.960
它这边返回的是什么呢

16:53.960 --> 16:57.960
返回的是reconcil childfiber

16:57.960 --> 16:59.960
如果你传一个force

16:59.960 --> 17:00.960
这边是什么呢

17:00.960 --> 17:02.960
这边是mountchildfiber

17:02.960 --> 17:03.960
对不对

17:03.960 --> 17:04.960
这边传一个布尔茲

17:04.960 --> 17:05.960
这个布尔茲谁接受到

17:05.960 --> 17:08.960
是不是就是shouldtrucksideeffect

17:08.960 --> 17:09.960
对不对

17:09.960 --> 17:15.850
也就是说

17:15.850 --> 17:17.850
在childreconcil

17:17.850 --> 17:22.160
方法内

17:22.160 --> 17:27.160
shouldtrucksideeffect

17:27.160 --> 17:32.660
是一个布尔茲

17:32.660 --> 17:33.660
它如果是什么呢

17:33.660 --> 17:36.660
如果是force

17:36.660 --> 17:38.660
force的话代表是什么

17:38.660 --> 17:40.660
代表不追踪

17:40.660 --> 17:41.660
对不对

17:42.660 --> 17:44.660
force的话代表不追踪

17:44.660 --> 17:45.660
你通过这个名字

17:45.660 --> 17:46.660
你就可以看得出来

17:46.660 --> 17:48.660
shouldtrucksideeffect

17:48.660 --> 17:50.660
是否追踪这个副作用

17:50.660 --> 17:52.660
force的话代表不追踪

17:52.660 --> 17:57.170
这个不追踪副作用

17:57.170 --> 17:59.170
也就是说不做什么呢

17:59.170 --> 18:02.170
不做flex

18:02.170 --> 18:04.170
flex标记

18:04.170 --> 18:05.170
这个非常好理解

18:05.170 --> 18:06.170
为什么

18:06.170 --> 18:07.170
因为你是mount阶段

18:07.170 --> 18:08.170
对不对

18:08.170 --> 18:11.170
因为你是mount阶段

18:11.170 --> 18:12.170
你不存在什么

18:12.170 --> 18:13.170
要追踪副作用

18:13.170 --> 18:15.170
要做flex标记

18:15.170 --> 18:18.170
而如果你这边传的是q

18:18.170 --> 18:20.170
q的话自然就是

18:20.170 --> 18:23.170
要追踪

18:23.170 --> 18:27.170
要追踪副作用

18:27.170 --> 18:32.170
然后做flex标记

18:32.170 --> 18:33.170
对吧

18:33.170 --> 18:36.170
因为你是update阶段

18:36.170 --> 18:38.170
整个是不是就串起来了

18:38.170 --> 18:39.170
各位

18:39.170 --> 18:42.170
你这边的shouldtrucksideeffect

18:42.170 --> 18:44.170
根据你这边传的q还是force

18:44.170 --> 18:45.170
对不对

18:45.170 --> 18:46.170
如果你传的q

18:46.170 --> 18:48.170
最终这边返回的是reconcel

18:48.170 --> 18:49.170
childfibers

18:49.170 --> 18:50.170
如果你这边传的是force

18:50.170 --> 18:53.170
这边是mountchildfibers

18:53.170 --> 18:55.170
好那接下来在这个方法内部

18:55.170 --> 18:57.170
在你这个childreconceler

18:57.170 --> 18:58.170
方法内部

18:58.170 --> 18:59.170
这个方法内部的话

18:59.170 --> 19:00.170
这边就会根据什么呢

19:00.170 --> 19:02.170
根据你这个字

19:02.170 --> 19:06.480
做一些不同的处理

19:06.480 --> 19:08.480
在这个childreconceler

19:08.480 --> 19:10.480
方法内部

19:10.480 --> 19:12.480
方法内部

19:12.480 --> 19:14.480
就会根据什么呢

19:14.480 --> 19:18.480
根据这个shouldtrucksideeffects

19:18.480 --> 19:20.480
然后做一些什么呢

19:20.480 --> 19:23.480
做一些不同的处理

19:23.480 --> 19:25.480
比如说我们这边

19:25.480 --> 19:32.220
拿一个这个原码片段过来

19:32.220 --> 19:34.220
这边你看一下

19:34.220 --> 19:36.220
这边比如说他内部

19:36.220 --> 19:38.220
内部有一个叫做placechild

19:38.220 --> 19:39.220
你看这边就根据什么

19:39.220 --> 19:41.220
根据这个shouldtrucksideeffects

19:41.220 --> 19:43.220
是不是来做判断

19:43.220 --> 19:44.220
如果这个是force

19:44.220 --> 19:46.220
force的话取反是to

19:46.220 --> 19:47.220
进到这个衣服

19:47.220 --> 19:48.220
进到这个衣服说明什么呢

19:48.220 --> 19:50.220
说明是初始化

19:50.220 --> 19:51.220
否则什么呢

19:51.220 --> 19:52.220
否则说明什么呢

19:52.220 --> 19:54.220
说明是更新

19:54.220 --> 19:56.220
说明是更新

19:56.220 --> 19:57.220
你可以看到在这个

19:57.220 --> 19:59.220
begin walks方法里面

19:59.220 --> 20:00.220
他也会做一些什么呢

20:00.220 --> 20:03.220
也会做一些flex的标记

20:03.220 --> 20:06.540
可以看到

20:06.540 --> 20:11.540
在这个begin walks方法内部

20:11.540 --> 20:13.540
也会做一些什么呢

20:13.540 --> 20:16.540
也会做一些flex标记

20:16.540 --> 20:18.980
好

20:18.980 --> 20:19.980
这些flex标记的话

20:19.980 --> 20:22.980
主要和这个元素的位置有关

20:22.980 --> 20:28.480
这些flex标记

20:28.480 --> 20:33.480
主要和元素的位置有关系

20:33.480 --> 20:34.480
他包括什么呢

20:34.480 --> 20:37.480
包括比如说这个标记

20:37.480 --> 20:40.480
标记这个child

20:40.480 --> 20:41.480
delation

20:41.480 --> 20:44.050
这个是什么呢

20:44.050 --> 20:46.050
这个是代表三处操作

20:46.050 --> 20:50.050
这个是代表三处操作

20:50.050 --> 20:51.050
标记什么呢

20:51.050 --> 20:55.050
标记比如说placement

20:55.050 --> 20:56.050
placement

20:56.050 --> 20:57.050
这个是代表什么呢

20:57.050 --> 21:00.050
这个是代表插入

21:00.050 --> 21:01.050
或者什么呢

21:01.050 --> 21:04.050
或者移动操作

21:04.050 --> 21:05.050
OK

21:05.050 --> 21:07.050
在整个这个begin walk方法里面

21:07.050 --> 21:08.050
也会做一些标记

21:08.050 --> 21:09.050
OK

21:09.050 --> 21:10.050
其他的话就没什么了

21:10.050 --> 21:11.050
你回头到你这边

21:11.050 --> 21:12.050
再看一下图

21:12.050 --> 21:13.050
再看一下图

21:13.050 --> 21:15.050
这边根据这个WebTag

21:15.050 --> 21:16.050
区别进行对待

21:16.050 --> 21:18.050
这边还会进行一个判断

21:18.050 --> 21:19.050
是否能复用

21:19.050 --> 21:20.050
再一次判断

21:20.050 --> 21:21.050
如果是的话

21:21.050 --> 21:22.050
这边就走这里

21:22.050 --> 21:23.050
如果不是

21:23.050 --> 21:24.050
这边就执行什么呢

21:24.050 --> 21:26.050
执行reconcile

21:26.050 --> 21:27.050
childfiber

21:27.050 --> 21:28.050
这个reconcile childfiber

21:28.050 --> 21:29.050
它是由谁生成的呢

21:29.050 --> 21:31.050
这个我们刚才说过

21:31.050 --> 21:32.050
它是有什么

21:32.050 --> 21:35.050
是不是由childreconciler生成的

21:35.050 --> 21:37.050
这边传的是q

21:37.050 --> 21:38.050
对应了这边

21:38.050 --> 21:40.050
shouldtrucksideeffects

21:40.050 --> 21:41.050
对应了这就是q

21:41.050 --> 21:42.050
如果是q的话

21:42.050 --> 21:43.050
这边的话

21:43.050 --> 21:45.050
它就会做一些这种标记

21:45.050 --> 21:46.050
对不对

21:46.050 --> 21:47.050
所以最终的话

21:47.050 --> 21:48.050
你这个方法

21:48.050 --> 21:49.050
这个方法生成的

21:49.050 --> 21:50.050
这个指fiberload

21:50.050 --> 21:51.050
它是什么

21:51.050 --> 21:52.050
它是不是diflex的

21:52.050 --> 21:54.050
而你这个mount

21:54.050 --> 21:55.050
这边执行了

21:55.050 --> 21:56.050
这个mountchildfiber

21:56.050 --> 21:58.050
这个方法也是由谁

21:58.050 --> 22:01.050
是不是也是由这个childreconciler

22:01.050 --> 22:03.050
这个方法的这个返回值

22:03.050 --> 22:04.050
对不对

22:04.050 --> 22:05.050
这边传的是force

22:05.050 --> 22:06.050
force对应了就是

22:06.050 --> 22:08.050
shouldtrucksideeffects

22:08.050 --> 22:09.050
对应了是force

22:09.050 --> 22:10.050
也就是说不标记

22:10.050 --> 22:11.050
不标记复作用

22:11.050 --> 22:12.050
不标记复作用的话

22:12.050 --> 22:14.050
那最终你这边生成的就是什么

22:14.050 --> 22:16.050
这普通的这个指fiberload

22:16.050 --> 22:17.050
对不对

22:17.050 --> 22:18.050
ok

22:18.050 --> 22:19.050
这个的话就是整个

22:19.050 --> 22:22.050
这个bigginwork的这个流程

22:22.050 --> 22:23.050
但它这个圆码里面

22:23.050 --> 22:26.050
对应了这个代码是非常非常多的

22:26.050 --> 22:27.050
你回头有兴趣的话

22:27.050 --> 22:29.050
你可以把这个bigginwork

22:29.050 --> 22:30.050
整个它的这个圆码

22:30.050 --> 22:31.050
打开看一下

22:31.050 --> 22:32.050
非常非常长

22:32.050 --> 22:33.050
但这边

22:33.050 --> 22:34.050
我们只要把什么

22:34.050 --> 22:36.050
只要把它整体的这个流程

22:36.050 --> 22:38.050
把它整理这个清楚

22:38.050 --> 22:39.050
就ok了

22:39.050 --> 22:40.050
好吧

22:40.050 --> 22:42.050
这是关于整个这个bigginwork

22:42.050 --> 22:44.050
这个方法的这个流程

22:44.050 --> 22:45.050
回头的话

22:45.050 --> 22:46.050
我们这边我们来看一下

22:46.050 --> 22:48.050
这边这个

22:48.050 --> 22:50.050
这个面是提起来

22:50.050 --> 22:51.050
bigginwork中

22:51.050 --> 22:52.050
主要做一些

22:52.050 --> 22:54.050
什么样的这个工作

22:54.050 --> 22:55.050
整体的这个流程

22:55.050 --> 22:56.050
是什么样子的

22:56.050 --> 22:57.050
好

22:57.050 --> 22:58.050
这边让我把这个答案

22:58.050 --> 22:59.050
我就把它拿过来

22:59.050 --> 23:03.580
把它翻过来

23:03.580 --> 23:04.580
我们来看一下

23:04.580 --> 23:05.580
bigginwork

23:05.580 --> 23:07.580
它会根据什么呢

23:07.580 --> 23:08.580
根据这个mount

23:08.580 --> 23:10.580
还是这个update

23:10.580 --> 23:12.580
它有着不一样的这个流程

23:12.580 --> 23:13.580
首先你看这边

23:13.580 --> 23:14.580
首先第一步是不是就是判断

23:14.580 --> 23:16.580
究竟是mount还是update

23:16.580 --> 23:17.580
对不对

23:17.580 --> 23:18.580
好

23:18.580 --> 23:19.580
然后接下来的话

23:19.580 --> 23:20.580
这边如果当前是update

23:20.580 --> 23:21.580
那接下来的话

23:21.580 --> 23:22.580
你的这个walking

23:22.580 --> 23:23.580
programs

23:23.580 --> 23:24.580
fiberload

23:24.580 --> 23:25.580
它是存在对应的

23:25.580 --> 23:26.580
currentfiberload

23:26.580 --> 23:28.580
接下来它就会判断什么呢

23:28.580 --> 23:29.580
判断是否

23:29.580 --> 23:30.580
能够附用

23:30.580 --> 23:31.580
对吧

23:31.580 --> 23:32.580
对应了就是什么

23:32.580 --> 23:33.580
对应了是不是就这一步

23:33.580 --> 23:34.580
对不对

23:34.580 --> 23:35.580
如果不能附用

23:35.580 --> 23:37.580
如果无法附用

23:37.580 --> 23:38.580
那它和这个mount

23:38.580 --> 23:39.580
这个流程是不是

23:39.580 --> 23:40.580
大致是相似的

23:40.580 --> 23:41.580
对不对

23:41.580 --> 23:42.580
首先根据什么呢

23:42.580 --> 23:43.580
根据这个viptag

23:43.580 --> 23:44.580
进入不同类型元素的

23:44.580 --> 23:45.580
这个处理分支

23:45.580 --> 23:46.580
好

23:46.580 --> 23:48.580
然后再使用这个reconcel算法

23:48.580 --> 23:50.580
生成这个下一级的这个fiberload

23:50.580 --> 23:51.580
你看这边

23:51.580 --> 23:53.580
如果不能附用

23:53.580 --> 23:54.580
那接下来走这边

23:54.580 --> 23:55.580
走这边的话和mount

23:55.580 --> 23:57.580
流程基本相似

23:57.580 --> 23:58.580
首先做这个

23:58.580 --> 23:59.580
根据viptag

23:59.580 --> 24:00.580
区别对待

24:00.580 --> 24:01.580
好

24:01.580 --> 24:02.580
然后再这边

24:02.580 --> 24:04.580
这边那是这个reconcel

24:04.580 --> 24:05.580
对不对

24:05.580 --> 24:07.580
reconcel生成下一级fiberload

24:07.580 --> 24:08.580
和mount的区别在于什么呢

24:08.580 --> 24:11.580
它所生成的是带flex的

24:11.580 --> 24:13.580
如果mount的话生成的是

24:13.580 --> 24:14.580
不带flex

24:14.580 --> 24:15.580
对不对

24:15.580 --> 24:17.580
所以这边就是

24:17.580 --> 24:19.580
大致相同

24:19.580 --> 24:21.580
两个流程的区别在于

24:21.580 --> 24:23.580
最终是否会生成

24:23.580 --> 24:25.580
生成的这个指fiberload

24:25.580 --> 24:27.580
它是否会标记flex

24:28.580 --> 24:29.580
好

24:29.580 --> 24:30.580
这个在beginwork中

24:30.580 --> 24:33.580
它也会标记一些flex

24:33.580 --> 24:34.580
对应了就是什么

24:34.580 --> 24:36.580
对应了就是更新的时候

24:36.580 --> 24:37.580
更新的时候

24:38.580 --> 24:39.580
就是主要是

24:40.580 --> 24:41.580
这边写一下

24:41.580 --> 24:44.910
主要是在什么

24:44.910 --> 24:47.910
是在update阶段

24:47.910 --> 24:48.910
对

24:48.910 --> 24:50.910
主要是update阶段

24:50.910 --> 24:51.910
因为你mount的话

24:51.910 --> 24:53.910
不会标记flex

24:53.910 --> 24:55.910
只有update的时候

24:57.910 --> 24:58.910
如果它标记了

24:58.910 --> 24:59.910
附作用flex

24:59.910 --> 25:01.910
它所标记的flex

25:01.910 --> 25:02.910
主要是什么呢

25:02.910 --> 25:04.910
主要是和元素的位置相关

25:04.910 --> 25:05.910
包含什么呢

25:05.910 --> 25:07.910
包含比如删除

25:07.910 --> 25:08.910
敲的direction

25:08.910 --> 25:09.910
这个我们后面讲那个

25:09.910 --> 25:11.910
地步算法的时候你就会看到

25:11.910 --> 25:13.910
你这边你先大致有个印象

25:13.910 --> 25:14.910
然后还有什么呢

25:14.910 --> 25:15.910
还有就是placement

25:15.910 --> 25:17.910
这个代表插入

25:17.910 --> 25:18.910
或者这个移动

25:18.910 --> 25:19.910
ok

25:19.910 --> 25:21.910
这个的话就是整个beginwork

25:21.910 --> 25:23.910
它的一个工作流程

25:25.910 --> 25:26.910
好

25:26.910 --> 25:27.910
这边大家下来的话

25:27.910 --> 25:29.910
可以再把这个beginwork的工作流程

25:29.910 --> 25:30.910
自己再把它看一下

25:30.910 --> 25:31.910
好吧

25:31.910 --> 25:32.910
ok

25:32.910 --> 25:33.910
好

25:33.910 --> 25:34.910
这些课的话就到这里

25:34.910 --> 25:35.910
再见

