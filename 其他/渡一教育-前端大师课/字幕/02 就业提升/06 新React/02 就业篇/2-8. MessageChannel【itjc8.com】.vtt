WEBVTT

00:00.300 --> 00:07.060
OK 上节课的话 给大家讲了 整个react 它的一个渲染流程 对吧

00:07.700 --> 00:15.060
然后从这几课开始啊 然后到后面的课 咱们就一个部分一个部分来看啊 分别是从这个scheduler

00:15.460 --> 00:18.740
就看senor 还有那个人的呢 一步一步来看

00:19.340 --> 00:29.860
好 那这里的话就该进入到这个scheduler 那scheduler在正式讲scheduler 这个scheduler之前啊 先给大家 然后介绍一个这个叫做message channel

00:30.620 --> 00:38.300
因为在这个react 中 它就是通过这个message channel来派发的这个红任务 说这边首先介绍一下这个

00:39.380 --> 00:45.540
好 这节课的话会讲这么两个知识点 首先的话我们会回顾什么呢 回顾这个世界

00:46.540 --> 00:47.180
世界循环

00:48.940 --> 00:53.060
回顾世界循环 好 然后接下来的话 接下来是这个message

00:54.300 --> 00:55.500
message channel

00:56.500 --> 01:02.460
一个基本的介绍 以及为什么 以及为什么选择它

01:04.020 --> 01:11.580
OK 好 那我们一个部分一个部分来看啊 好 首先第一个 第一个是回顾一下世界循环

01:12.220 --> 01:20.900
那世界循环的话 大家在之前学这个ges基础的时候 应该也是学过的 对不对 有一个这个任务的这个对列

01:21.420 --> 01:27.100
好 然后接下来的话 把这个同步代码执行完了之后 大家一步的代码会交给这个web API

01:27.780 --> 01:33.620
进行这个执行 执行完了之后 然后接下来微博 API 会把结果放到哪里 这放到这个任务对列里面

01:34.380 --> 01:40.180
对啊 让大家回头的话 然后从这个任务对列里面 一个一个去获取这个任务 要去执行

01:41.100 --> 01:43.700
也就是说大家以前看的更多的可能是这张图

01:44.740 --> 01:47.020
哇 这张图放到咱们的这个笔记里面

01:47.580 --> 02:00.130
啊 啊 之前在学习这个世界循环的时候 世界循环的时候 大家看的更多的

02:01.290 --> 02:07.960
更多的啊 是下面这张图 下面这张图

02:09.750 --> 02:13.350
ok 这张图是张洞图啊 我截了这个洞图

02:15.110 --> 02:17.070
啊 这边出来了 来看一下这个洞图

02:17.710 --> 02:23.750
这洞图的话 这边啊 首先的话这个stack 这边的话有这么三行带吗 对不对啊 扛收点log

02:24.030 --> 02:27.630
嗨 大家这个是set them out 大家这边扛收点log

02:28.150 --> 02:32.310
好 大家他首先干嘛 首先在这个战区先执行什么 先执行这个

02:32.950 --> 02:36.830
对对 那到这的时候 他就会把这个放到哪里 这放到这个web API里面

02:37.830 --> 02:43.670
对不对啊 大家这边执行这个 好 等这边这边时间到了之后 这边我们延时是延时5秒

02:44.230 --> 02:48.150
啊 等时间到了之后 他就会被放入到什么 放入到这个任务队列

02:49.030 --> 02:52.270
对不对 放入到任务队列之后 然后接下来等你这个就是

02:53.470 --> 03:01.310
这边空闲了 整个空闲了 然后将它进入到这个stack 进入到stack之后 然后将它这边干嘛 执行这里的这个带吗

03:01.990 --> 03:11.790
log there 对不对啊 这个的话是大家就是以前啊 看这个世界循环的时候 看的更多的这个一张图啊 那我们这边来回顾一下啊 首先

03:12.110 --> 03:16.990
会执行什么 会执行这个同步代码

03:18.710 --> 03:22.910
对不对 先执行同步代码啊 然后同步代码 同步代码

03:24.710 --> 03:29.790
执行完毕之后啊 同步代码执行的时候 执行的时候

03:30.830 --> 03:36.310
同步代码执行的时候 如果遇到一步代码

03:37.310 --> 03:43.710
那一步代码的话 就是比如说像这种set timeout 啊 以及比如说你的一些网络请求啊之类的

03:44.190 --> 03:49.830
好 他就会干嘛呢 他是不是就会放到这个一步处理的这个模块里面啊 我们这边称之为这个web API

03:51.190 --> 03:55.230
就会放到什么呢 放到这个web API

03:57.350 --> 04:01.670
web API 里面啊 然后进行执行

04:02.670 --> 04:08.390
啊 那我这边上我主线程的话 是不是就不这个不管了 对不对 我就不管了啊

04:08.990 --> 04:14.790
好 然后当这个web API 呃 执行完毕之后

04:15.710 --> 04:19.550
完毕之后 会将什么呢 会将这个结果

04:20.590 --> 04:23.990
放入到什么 说放入到这个叫做task clean

04:25.110 --> 04:28.710
task clean 对不对 这个我们就称之为什么 不是任务对列

04:29.550 --> 04:37.070
会放到任务对列里面 啊 放入到这个任务对列里面之后 然后接下来的话 我这边我这边这个同步代码是不是已经执行完了

04:37.470 --> 04:41.430
执行完了之后 然后现在我就会从这个任务对列里面去取啊

04:42.270 --> 04:47.190
那同步代码 同步代码执行完毕后

04:47.910 --> 04:57.590
就会从什么呢 就会从任务对列中去获取一个一个的这个任务

04:59.270 --> 05:00.590
啊 然后接下来进行执行

05:02.630 --> 05:08.350
对吧 啊 这个的话是大家比较熟悉的一个这个事件循环啊 他这边一直在这儿转啊

05:08.950 --> 05:13.150
好 那我们如果把这个事件循环和这个浏览器渲染

05:14.030 --> 05:18.190
结合到一起 那这个图的话应该又是什么样子呢 我们来看一下啊

05:19.110 --> 05:20.590
啊 如果将

05:21.950 --> 05:23.030
这个事件循环

05:24.550 --> 05:25.030
事件

05:25.870 --> 05:28.150
循环和什么呢 和这个浏览器

05:28.910 --> 05:29.350
渲染

05:30.350 --> 05:34.470
结合到一起 结合到一起啊 大致

05:35.670 --> 05:37.790
就是这个下面这张图

05:40.580 --> 05:44.260
ok 啊 这边还有一张图 这张图的话在这里

05:46.920 --> 05:52.120
帮我们这边来看一下 这个也是一张动图啊 为了方便大家理解啊 这边的话我结的都是动图

05:53.040 --> 05:58.120
好 这个是什么 这个先解释一下啊 先解释一下 首先的话这边的话是事件循环

05:58.840 --> 06:04.600
啊 这边中间有个圈 看到没有 中间有个圈啊 这个的话它就是一圈一圈的这个转圈啊

06:05.160 --> 06:07.960
那这个是什么呢 这个是你的一个一个的这个任务

06:08.920 --> 06:12.920
啊 一个一个任务 当你这个任务队列啊 你可以假设这边的话有一个任务队列

06:13.880 --> 06:15.960
啊 这里有个任务队列 把这个

06:18.940 --> 06:26.620
假设你可以假设这边的话有一个什么呢 有一个任务队列 任务队列里面 然后既然就排队排了一个一个的这个任务

06:27.500 --> 06:36.380
对不对 排了一个一个任务啊 就和我们这边是一样的 对吧 排了一个一个任务之后 然后接下来的话 我这边假设我同步单码执行完了之后 然后这边这个任务他就会干嘛

06:36.620 --> 06:39.420
他这边 回头上他就会取什么 是不是取第一个任务

06:40.140 --> 06:46.380
对不对 取第一个任务进行执行 执行完了之后 然后接下来的话一次这个事件循环就结束了

06:46.940 --> 06:51.020
结束之后 如果你还有任务 然后这样我就又从任务队里面 又取一个任务

06:51.580 --> 07:00.060
啊 大家进行执行 也就是说你一次这个世界循环他会干嘛 他会从这个任务队列里面取一个任务啊 首先我们明确这一点

07:01.180 --> 07:01.820
好吧 这个图

07:02.780 --> 07:09.820
啊 擦了啊 从上面的图 从上面的动图啊 我们可以看出

07:11.020 --> 07:11.420
可以

07:12.220 --> 07:16.060
看出每一次这个事件循环

07:17.020 --> 07:24.940
事件循环会从什么呢 会从任务队列里面干嘛 是不是获取一个任务

07:26.220 --> 07:30.380
获取一个任务 任务来执行

07:31.580 --> 07:37.980
对不对啊 你执行完了之后 他就会又会经历一次循环啊 又会经历一次循环 然后加这边过来又执行

07:38.620 --> 07:44.540
好 然后接下来这里会涉及到一个问题什么呢 那如果这个时候我们就是之前那几颗讲过

07:44.860 --> 07:49.740
浏览器的话每格这个16.66毫秒 是不是他要渲染一次啊

07:50.860 --> 07:53.980
对不对啊 你如果是60盒子的话啊 对吧

07:55.660 --> 07:59.180
之前有讲过啊 大多数

07:59.980 --> 08:02.300
大多数这个设备

08:03.260 --> 08:11.260
设备的这个刷新率 刷新率是60盒子对不对啊 也就是一秒钟

08:11.580 --> 08:13.260
一秒钟

08:15.100 --> 08:16.140
要汇制

08:17.340 --> 08:21.420
要汇制60次啊 这意味着

08:22.140 --> 08:26.460
这意味着呃浏览器每格

08:28.220 --> 08:32.620
每每格什么呢 16.66毫秒

08:33.580 --> 08:39.340
16.66毫秒就需要干嘛 是不是就需要重新渲染一次

08:40.300 --> 08:45.340
渲染一次对不对啊 当他这边的话他循环完一次之后

08:45.340 --> 08:48.780
然后接下来的话 然后这个浏览器通知我需要重新渲染的

08:48.780 --> 08:51.900
好 那他这边的话就会干嘛呢 他就这边就会跑到这个跑道来

08:52.540 --> 08:58.300
看到没有啊 我们这边来看一下啊 现在这边啊 这边他又走对不对每一次执行一个任务

08:58.540 --> 09:02.940
好 这一次浏览器通知啊 你要重新渲染了 好 这边过来看到没有

09:03.740 --> 09:08.860
重新渲染啊 渲染完了之后人家这边又从这个任务队列里面啊 然后取一个任务来执行

09:09.340 --> 09:12.780
看到没有 比如说他这边整体的这个机制啊 我们这边来总结一下

09:14.540 --> 09:20.620
总结一下啊 整体事件循环的机制事件循环的机制

09:21.180 --> 09:34.940
就是每一次循环会从什么呢 会从任务队列中取一个任务 他不会取多个啊 取一个任务来执行

09:37.210 --> 09:44.650
ok 好 然后如果还没有达到没有达到浏览器

09:46.490 --> 09:53.290
浏览器需要重新渲染的时间 打拥时间

09:54.090 --> 10:00.010
啊 因为我说了就是你这边的话 基本上啊 是16点16点66毫秒

10:00.970 --> 10:07.130
对不对 还没达到这个确认的时间 那么就干嘛呢 那么就继续

10:08.250 --> 10:14.170
啊 循环一次 然后从这个世界啊 这个任务队列里面

10:15.690 --> 10:19.450
任务队列里面再取一个

10:21.130 --> 10:28.090
再取一个任务来执行啊 这个的话就取决于你这个任务的这个时间

10:28.650 --> 10:35.450
啊 别人这个任务的时间很短 对不对 都还没有达到就要重新渲染啊 那我这边就再循环一次 再取一个

10:36.170 --> 10:41.370
看到没有 直到什么呢 直到需要这个重新渲染了啊

10:42.410 --> 10:45.130
啊 一直内推 一直内推

10:45.930 --> 10:53.210
然后直到什么呢 直到浏览器需要重新渲染

10:54.170 --> 10:56.410
啊 需要重新渲染这个时候

10:57.290 --> 11:02.250
这个时候就会执行什么 执行重新渲染的任务

11:02.970 --> 11:06.490
重新渲染的任务啊 执行完毕之后

11:07.290 --> 11:12.570
执行完毕以后回到这个之前的流程

11:14.090 --> 11:19.930
之前的流程啊 回到之前的流程就是什么 是不是又是从这个任务队列里面 是不是取这个任务来执行

11:20.330 --> 11:24.330
直到什么了 直到你这个任务队列啊 这里面的这个任务全部执行完

11:25.050 --> 11:28.410
看到没有啊 这个的话就是配合什么了 配合这个浏览器渲染

11:29.210 --> 11:35.370
这个流程它是怎么走的啊 我相信就是大家看了这张图之后 应该是比较清晰的

11:36.250 --> 11:39.690
应该是比较清晰的好 然后接下来的话 咱们这边再来看一下

11:40.170 --> 11:45.770
你看这边在浏览器渲染的时候 你看这边啊 有好几个东西对不对啊 raf

11:46.330 --> 11:52.170
加这个s lp 这个分别代表什么啊 这边呢代表什么呢 代表你重新计算你的 html

11:52.650 --> 11:59.690
css生成那个 html那个动物数 对吧 然后还有这个css的那个css oam那个数

12:00.090 --> 12:05.130
啊 人家这边呢这个layout就重新的这个布局 那这个的话是这个pint

12:05.450 --> 12:10.410
重新的这个绘制啊 这个的话其实就和那个浏览器渲染那一块相关了

12:10.890 --> 12:17.210
你如果这一块你不太清晰的话 你可以去看一下那个袁老师之前讲的啊 浏览器的这个渲染原理

12:17.690 --> 12:20.490
他每一针渲染的时候 他经历了那些步骤啊

12:21.530 --> 12:24.970
好 然后我这边我着重的要强调的是什么呢 强调的是这个

12:26.890 --> 12:30.010
强调的是这个 这个是什么 这个的话叫做request

12:30.410 --> 12:32.330
这个animation frame

12:32.970 --> 12:39.290
request 啊animation frame 他是在什么之前呢 他是在就是你每一次

12:39.850 --> 12:47.930
重新渲染 就你这边的话 这后面不是执行重新渲染吗 对不对 他是在你每一次重新渲染的时候

12:48.250 --> 12:50.650
执行一次啊request

12:53.100 --> 12:55.100
request animation

12:55.900 --> 12:56.460
然后frame

12:57.100 --> 12:58.940
这个之前袁老师应该是讲过的啊

12:59.660 --> 13:01.260
ok 这个api

13:03.560 --> 13:09.560
这个api啊这个api是在每一次这个重新

13:10.360 --> 13:11.960
渲染之前

13:13.000 --> 13:13.480
执行

13:14.360 --> 13:21.640
ok 所以他是比较稳定的啊 所以他是专 首先我就是明确一点啊 他是专门用来做动画的

13:22.440 --> 13:25.560
哎 他是专门用来做动画的啊 这个api的出现

13:26.680 --> 13:28.680
这个这个api

13:28.920 --> 13:31.320
api的出现

13:32.360 --> 13:36.040
就是专门拿来做动画的

13:38.520 --> 13:41.160
ok 那以前的话我们做动画用的是什么

13:41.640 --> 13:46.200
以前的话我们用的是不 你可以用这个set interval 可以用这个set timeout

13:46.760 --> 13:49.400
对不对 interval或者set timeout啊

13:49.720 --> 13:54.280
好 那以前的话这些api这些api他本身不是拿来做动画的

13:55.160 --> 13:58.920
啊 所以先明确一下 以前我们做动画

13:59.880 --> 14:01.080
啊 用的更多的

14:01.880 --> 14:06.360
用的更多的是什么呢 是这个set interval

14:07.640 --> 14:11.080
set interval啊 或者set timeout

14:12.760 --> 14:22.440
对不对啊 但是这些api本事就本意啊 本意不是拿来做动画的

14:24.120 --> 14:28.680
对吧 他就有点类似于什么啊 有点类似于以前你们学那个css的时候

14:29.080 --> 14:31.800
啊 最早的话都是用什么 是不是用浮动来布局

14:32.360 --> 14:37.080
但浮动的话他是不是拿来布局的 他本意上他不是拿来做布局的 他是做什么

14:37.240 --> 14:42.040
是做文字环绕的 对不对 所以后面的话专门出现了这个flex

14:42.760 --> 14:46.760
啊 flexbox 弹性和布局 那这个的话是不是就专门拿来布局的

14:47.400 --> 14:52.760
对不对 那这边也是一样啊 这边也是一样 你这个request animation frame api

14:53.080 --> 14:57.800
他是专门拿来做这个动画的 那他相比这个set interval或者这个set timeout

14:58.040 --> 15:03.080
他有什么优点呢 他的优点就占于他的话和浏览器的这个

15:03.560 --> 15:08.390
渲染的频率是一次的 就是使用这个api

15:11.770 --> 15:13.290
使用这个api啊

15:14.570 --> 15:17.770
拿来做动画拿来做动画

15:18.890 --> 15:23.530
嗯 最大的优点最大的优点就是频率

15:25.050 --> 15:31.450
适合什么适合浏览器呃 重新渲染的频率

15:33.380 --> 15:33.780
一字

15:35.380 --> 15:39.140
ok 和这个渲染的频率一致 啊 比如说我这边的话我举个例子

15:39.940 --> 15:41.140
啊给大家画个图啊

15:42.580 --> 15:50.260
画个图稍等 我把那个把这个打开 好来画个图

15:52.500 --> 15:57.370
然后啊就这个对啊稍等啊

15:58.730 --> 16:02.650
啊 这边我看第三页啊第四页啊 把这个缩小一点

16:03.450 --> 16:11.130
ok 好是这样子的 比如说这边的话是我浏览器的每一针啊 假设这个是我的浏览器的每一针

16:12.730 --> 16:12.970
嗯

16:15.210 --> 16:19.210
啊 这边是第一针 这边是第二针 大家这边呢是第三针

16:20.090 --> 16:25.770
对吧 我浏览器的每一针 然后每一针的话那要经历什么 要经历这个就是刚才我们那张图

16:27.130 --> 16:32.090
啊 这边是不是重新了这个啊 不这个就是计算对吧 计算你的这个

16:32.970 --> 16:37.610
和cdc是om 然后加layout 然后加这个pint 对吧 啊 假设我们这边

16:39.370 --> 16:44.410
啊 我们这边再画一点啊 统一的话 这边的话要经历这么两个步骤

16:46.330 --> 16:46.490
啊

16:47.850 --> 16:53.290
这边 嗯 换 换一个颜色啊 比较这边 然后加这边复制一份

16:54.490 --> 16:59.850
啊 比如说这个是计算嘛 我们就合成一步啊 然后接下来的话 这边是pint pint我们用的是什么

17:00.570 --> 17:03.130
pint用的是啊 这个绿色 是吧

17:04.890 --> 17:14.410
啊 用个绿色 ok 你看每一针的话都会干嘛 每一针的话 这边的话都是会经历这两个步骤啊 就我渲染的时候啊 就我重新渲染的时候

17:15.050 --> 17:15.930
对吧好

17:17.690 --> 17:25.130
然后渲染完了之后啊 接下来的时间就会干嘛 接下来的时间是不是就会去啊 执行就这边你这个空于了这个时间

17:25.770 --> 17:30.570
空于了时间是不是就是会去执行这个红任务啊 就是我们的任务嘛

17:31.290 --> 17:36.330
就是我们的任务 也就是我们这边这个就是这边任务对列里面的这个task

17:36.890 --> 17:40.490
好 这边执行多少个呢 执行多少个这个是不一定的

17:41.370 --> 17:44.730
知道吧 执行多少个这个是不一定的啊 比如说我这边

17:46.410 --> 17:51.850
这个的话执行了三个 对吧 有这个任务耗死一点啊 然后加这个

17:52.810 --> 17:59.290
然后加这个耗死一点 然后加这个这个的话 然后时间又没那么耗死

18:00.170 --> 18:02.410
我们换个颜色啊 换个比方黄色

18:04.330 --> 18:10.220
ok 怎么样啊 比如这个 然后加这边这边的话 然后也是一样

18:11.580 --> 18:17.100
啊 这边的话 比如从我们这边执行啊 执行的话 让他执行了这个 他只执行了两个

18:20.470 --> 18:26.230
执行了两个 对吧 好 人家这个这个的话 然后第三就下面第三针 第三针的话 他又执行的比较多

18:33.400 --> 18:36.280
啊 比如这边 他又执行的比较多 再来一个

18:38.360 --> 18:44.520
ok 也就是我每一针的话 我通过这种任务对列 从任务对列里面取任务来执行的方式

18:44.840 --> 18:49.000
他每一针的话他的这个执行方式 执行的这个任务的个数

18:49.800 --> 18:53.800
他是不一定的 对不对 他是不一定的 首先这边明确这一点啊

18:56.580 --> 19:00.100
嗯 这里 就是每一针

19:01.140 --> 19:03.540
每一针所执行

19:04.740 --> 19:07.940
所执行的这个任务的个数

19:09.060 --> 19:11.380
的个数是不一定的

19:12.740 --> 19:17.380
不一定的啊 好 那接下来的话 这边的话会存存在一种情况

19:18.180 --> 19:26.870
我先把这个放大一点啊 首先这个能理解吗 对不对 你看刚才的那个图吗 刚那个图是不是就这样子了

19:27.190 --> 19:34.070
对 比如我这边到达这个渲染时间了啊 渲染完了之后 然后只要还没有到渲染时间 我这边是不是就一直执行 对不对 这边转过来

19:34.470 --> 19:41.430
那家这边又执行 对不对 然后还没有到渲染时间啊 然后又转过来 是不是又取一个这个任务 是不是又进行执行

19:42.070 --> 19:49.670
对吧 每一针他这边的话执行的这个任务的个数是不一定的 好 那这边的话会存在一些什么样的情况呢 就比如说我一个任务

19:50.710 --> 19:56.550
我一个任务比如说这个时间过长 那他就会影响这个下一针啊 比如我们这边把它复制一份

20:01.820 --> 20:02.780
啊 把他拿下来

20:03.980 --> 20:08.940
ok 好 比如说我这个任务 我这个任务的话 我这个比较长啊 别把这个删了啊

20:09.980 --> 20:15.210
把这个往右边一 把右边一啊

20:16.330 --> 20:23.210
然后加这个 比如这个任务 比如这个任务 这个任务所花的时间会比较长 它会占用什么 是会占用下一针

20:24.010 --> 20:28.650
对不对 占用下一针的话 导致你下一针的这个渲染啊 出现了这个时间

20:29.370 --> 20:35.770
比较晚啊 比较晚的话 然后加就干嘛 所以这个就会掉针啊 对不对 这个就是我们所说的掉针

20:38.410 --> 20:38.810
如果

20:40.490 --> 20:43.770
如果某一针某一针

20:45.050 --> 20:47.050
渲染之后 渲染之后

20:47.930 --> 20:52.410
执行任务时 执行任务时啊 该任务

20:53.130 --> 20:58.330
该任务这个所花费的时间所花费的时间

20:59.610 --> 21:03.210
时间过长啊 那么就会导致

21:04.170 --> 21:04.570
那么

21:05.850 --> 21:08.890
就会导致什么 是不是导致这个

21:09.690 --> 21:12.810
就会占用啊 占用下一针

21:13.690 --> 21:15.690
下一针的这个渲染时间

21:16.570 --> 21:19.130
对不对 导致什么 导致这个掉针

21:21.530 --> 21:26.730
导致就是下一针 下一针不能够及时的出来

21:27.690 --> 21:29.850
及时的渲染出来

21:30.810 --> 21:35.850
然后这个就是什么呢 这个就是所谓的丢针

21:37.050 --> 21:38.570
丢针啊 或者掉针

21:40.250 --> 21:42.330
看到没有啊 他就会导致这个问题

21:43.290 --> 21:45.850
好吧这个这样子吧 okay

21:46.650 --> 21:47.850
啊 他就会导致这个问题

21:48.250 --> 21:54.970
说我们这边的话使用这个set timeout啊 也好 set interval也好啊 你做动画的话 实际上是不太合适的

21:55.690 --> 21:58.250
太合适了 我把这个图给大家截一个啊

22:06.040 --> 22:07.160
把这个给他截个图

22:09.160 --> 22:10.120
好放到笔记里面

22:12.520 --> 22:12.840
ok

22:14.760 --> 22:15.800
好 但是这个

22:16.440 --> 22:21.560
就是你这边 这边的话这个request animation frame他就不会存在这个问题

22:22.120 --> 22:25.160
为什么呢 因为他是这边的话是放在这个渲染前面对不对

22:25.400 --> 22:29.320
你每一次的话就是我这边执行完了之后的接下来一步就是渲染

22:29.640 --> 22:31.720
啊 他是和什么呢 和你的渲染是同频的

22:33.000 --> 22:38.150
request animation frame就不会存在这个问题

22:39.030 --> 22:42.310
就不会存在这个问题

22:43.350 --> 22:46.150
啊 因为他是在什么 他是在

22:47.350 --> 22:52.070
他是在渲染之前 对吧 每一次的渲染之前

22:52.870 --> 22:54.710
好吧 这图稍微说小一点点

22:55.030 --> 23:01.590
渲染之前啊 保证了什么呢 保证了和这个浏览器渲染

23:02.230 --> 23:05.030
浏览器渲染是同频的

23:07.220 --> 23:10.020
ok 你可以把理解成什么呢 理解成就是像这个样子

23:12.220 --> 23:15.340
就这个样子 就他这边的话 我还是这边再挤振

23:18.740 --> 23:19.220
站过来

23:20.340 --> 23:21.860
啊 复制一份 站过来

23:22.500 --> 23:25.060
好 然后接下来的话 他是什么呢 他是放在后面的

23:27.500 --> 23:28.460
啊 把这个删了

23:29.980 --> 23:30.700
他是这样子的

23:31.660 --> 23:34.700
就这个是我们的渲染人嘛 对不对 他是站我们的这个之前

23:36.140 --> 23:39.020
啊 始终的话是在这之前 渲染之前

23:39.660 --> 23:41.340
啊 把这个拿过来

23:43.020 --> 23:47.450
好 那换个眼是吧 换个

23:48.090 --> 23:51.370
换个什么 换个指色啊 好 然后加这边

23:52.650 --> 23:53.290
这边也是

23:55.290 --> 23:59.940
用这边啊 这边比较这个

24:02.300 --> 24:04.300
调整一下 好 能能看懂这个意思吧

24:05.100 --> 24:09.340
所以他这边的话是在你这个渲染之前 对不对 他这个个数的话也是固定的

24:10.620 --> 24:11.980
啊 把这个复制一份

24:15.270 --> 24:18.950
把这个三个吧 把这个往右边再移一点

24:19.990 --> 24:21.190
ok 看到没有

24:21.830 --> 24:22.950
好 然后这里

24:25.830 --> 24:29.990
ok 你看他是在什么 他是在你每次渲染之前是不执行

24:30.230 --> 24:33.990
执行完了之后你就立马干嘛 是不是立马重新进行一个这个渲染

24:34.710 --> 24:38.390
对不对 说他是最适合用来做这个动画的

24:39.190 --> 24:39.510
喵喵

24:40.070 --> 24:45.510
ok 好 把这个给大家截个图 稍等啊 把这个调一下 强迫症

24:46.150 --> 24:49.590
好 把这个给他调一下 他就是这样子的

24:53.720 --> 24:54.600
好 放到这里

24:56.440 --> 25:00.280
ok 这是关于这个request animation frame

25:01.400 --> 25:03.160
啊 好 我把这个也说小一下吧

25:05.080 --> 25:09.480
ok 好 然后还有一个东西 还有东西是这个微任

25:10.200 --> 25:17.000
还有一个东西是微任务 啊微任务他和这个红任务他的区别是在于哪里呢

25:17.560 --> 25:23.480
啊 我们之前的话 我们之前的这种任务啊 之前这种任务我们有种说法就是把它称之为这个红任务

25:23.880 --> 25:29.400
对不对 但现在的话慢慢就不不讲什么红任务了啊 就把它称之为什么呢 就把它称之为任务

25:29.880 --> 25:36.600
对不对 他这个task啊一个这个任务 ok 然后有别于 就是有别于这种任务

25:36.760 --> 25:42.040
然后有一个什么呢 有一种叫做这种微任务 微任务和这个普通的任务之间

25:42.600 --> 25:48.760
有一个这个最大的区别就是微任务会就是你循环一次之后 如果微任务对立里面

25:49.640 --> 25:55.640
如果微任务对立里面存在任务

25:57.240 --> 25:58.760
那么试见循环

25:59.880 --> 26:05.880
试见循环会在什么呢 会在循环一次的时候

26:07.240 --> 26:10.280
将整个微任务

26:11.240 --> 26:14.360
微任务对立清空

26:16.280 --> 26:21.000
看到没有 将整个微任务对立全部把它清空啊

26:21.400 --> 26:26.040
所以说有些时候就是我们比较一些比较紧急的一些任务啊 需要立即更新的任务

26:26.200 --> 26:28.760
好 那这里的话就是放到什么呢 放到这个微任务里面

26:32.740 --> 26:36.900
也就是微任务的话 实际上是提供了一种这种插队的这种机制

26:37.380 --> 26:43.860
可以让一些这种就是优先需要执行的任务 在这一次事件这个循环中就把它执行了

26:44.260 --> 26:47.060
好 这边呢 仍然是有张图啊 我把这张动图

26:48.100 --> 26:52.020
我拿过来 让大家可以看一下 他们之间的这个区别

26:54.420 --> 27:00.980
好 那如下图 就这几种任务啊 这几种任务的这个区别

27:01.940 --> 27:02.660
啊 如下图

27:04.340 --> 27:09.380
每一次每一次这个事件循环时

27:10.500 --> 27:13.140
啊 这几种任务的这个区别 如下图

27:14.100 --> 27:18.020
啊 这个也是一张动图 大家可以看一下啊 这边这个task

27:20.330 --> 27:21.130
咋 咋回事

27:21.930 --> 27:22.570
啊 出来了

27:23.210 --> 27:28.490
啊 这边这边这个task了 这个就是指的一般任务啊 一般任务他每次干嘛每次取一个对吧

27:28.570 --> 27:30.730
哪怕你新增的任务进来 我还是取一个

27:31.210 --> 27:33.770
啊 那这个animation callbacks

27:34.170 --> 27:40.810
啊 这个就是我们刚才的那个 刚才这个request animation啊这个 这个他会什么呢 他会把你所有的任务把你执行完

27:41.050 --> 27:43.370
啊 大家你后面新增的话就下一次再执行

27:43.850 --> 27:50.890
但是这个微任务 微任务的话他是会干嘛 假设你这边一直在新增 他会把你这个所有的这个任务全部执行完毕

27:51.530 --> 27:54.730
啊 全部执行完毕之后 然后接下来啊 才算完

27:55.530 --> 27:56.570
ok啊

27:57.050 --> 27:58.810
这是关于这个微任务 ok

28:01.370 --> 28:03.690
好吧 这个稍微说小一点吧 ok

28:04.730 --> 28:11.930
好 这是首先的话回顾了一下这个之前的这个 关于这个事件循环啊 这个的话 实际上之前的话 应该也是讲过的

28:12.490 --> 28:14.810
对不对 原来是应该给他讲过的啊

28:15.370 --> 28:19.610
好 然后接下来回到我们这边 我们这节课的话 我们要讲的是这个

28:20.410 --> 28:21.290
message channel

28:22.250 --> 28:25.690
那这个message channel是什么的 message channel的话 他本

28:26.090 --> 28:35.530
就是他的本意啊 他是允许我们创建一个这个消息这个通道啊 然后接下来通过什么呢 通过他两个这个port属性来发送数据

28:35.850 --> 28:37.290
啊 比我们这边来看一下啊

28:38.410 --> 28:39.450
message channel

28:41.290 --> 28:44.490
message channel这个接口啊 本身

28:45.450 --> 28:47.610
是用来什么呢 是用来做

28:48.810 --> 28:50.330
做这个消息通信的

28:51.850 --> 28:53.050
消息通信的

28:53.530 --> 28:59.050
允许什么呢 允许我们创建一个这个消息通道

29:00.250 --> 29:04.970
消息通道啊 然后通过什么呢 通过他的两个

29:06.330 --> 29:08.970
他的两个这个message

29:10.810 --> 29:12.170
message这个port

29:13.850 --> 29:19.610
来进行信息的这个发送和接收

29:21.290 --> 29:22.890
好 来我们这边来看个例子啊

29:23.210 --> 29:23.850
来看个例子

29:24.970 --> 29:26.010
好 这边的话

29:26.810 --> 29:31.610
新建一个吧 index 5.html

29:32.810 --> 29:33.850
啊 把这个放大点

29:35.210 --> 29:35.530
ok

29:39.220 --> 29:42.740
好 这里 这里的话呢 我首先呢 我写一个这个input

29:43.460 --> 29:44.660
这个是一个输入框

29:47.380 --> 29:48.180
啊 不好意思啊

29:49.460 --> 29:53.140
好 这边放到一个输入框里面啊 这边的话就是输入内容

29:54.900 --> 29:55.700
啊 给个id嘛

29:56.420 --> 29:58.180
这个id id是content

29:58.660 --> 30:00.420
大家这边有个这个placeholder

30:01.060 --> 30:03.380
请输入消息

30:04.260 --> 30:07.300
回头我们就在这个输入框里面 输入要发送的这个消息

30:07.780 --> 30:10.260
好 然后接下来的话 这边一个div

30:10.580 --> 30:11.140
然后里面

30:12.420 --> 30:13.620
里面一个这个button

30:14.180 --> 30:14.900
两个button嘛

30:15.380 --> 30:16.900
这个是什么呢 这个是给port1

30:18.580 --> 30:20.260
给这个port1

30:21.060 --> 30:21.620
发消息

30:23.060 --> 30:24.900
啊 下面这个的话是给port2

30:25.380 --> 30:25.940
发消息

30:26.420 --> 30:28.500
好 然后分别的话 给一个这个id

30:30.420 --> 30:32.980
id id的话 然后上面这个

30:33.540 --> 30:35.380
上面这个我们叫做btn1

30:35.700 --> 30:37.220
大家这个叫做btn

30:38.340 --> 30:38.740
诶

30:40.940 --> 30:44.140
btn1啊 然后加这个这个叫做btn2

30:44.860 --> 30:45.180
ok

30:45.740 --> 30:49.580
好 然后接下来我们这边让我们这里来写我们的script

30:50.380 --> 30:52.620
好 const const一个channel

30:53.820 --> 30:55.980
等于一个什么呢 等于一个这个new message

30:57.100 --> 30:57.980
messagechannel

30:58.620 --> 31:00.780
啊 这个是这个浏览器原生支持的

31:01.340 --> 31:03.980
啊 原生支持的啊 就好比你使用的那些什么

31:04.540 --> 31:08.060
orea 还有你new的那个什么那个小黄泽那些对象啊

31:08.620 --> 31:09.980
原生支持的啊

31:10.620 --> 31:12.940
这这是浏览器啊 这浏览器这边支持的

31:13.420 --> 31:15.340
好 然后接下来我们这边我们来看一下

31:16.540 --> 31:17.500
看一下这个channel

31:19.100 --> 31:21.180
好 我这边保存 保存了之后我们看一下

31:26.520 --> 31:27.560
啊 这边检查

31:30.410 --> 31:31.130
啊 来看一下

31:32.490 --> 31:33.210
啊 你看这边

31:33.690 --> 31:37.130
它这边呢就创建了一个messagechannel的一个实力对象

31:37.530 --> 31:39.370
啊 这个实力对象里面有两个东西

31:39.770 --> 31:44.010
看到没有 有两个叫做这个这个对象里面啊 有两个啊这个port

31:44.410 --> 31:46.410
啊 一个是port1 一个是port2

31:46.890 --> 31:50.810
啊 两个属性 两个属性分别又对应什么 分别又对应一个对象

31:51.610 --> 31:55.210
看到没有 分别对应对象啊 这个对象呢 这边有一个什么有个onmessage

31:55.690 --> 31:58.170
对不对port1port2分别又对应一个对象

31:58.650 --> 32:00.410
好 然后接下来这边怎么用呢

32:00.730 --> 32:04.250
啊 我们这边现在我们已经创建了什么 创建了channel这个实力了

32:04.730 --> 32:07.690
对不对 好 然后接下来的话我们这边const

32:08.570 --> 32:12.970
这个port1等于一个这个channel点这个port1

32:13.690 --> 32:16.170
啊 把它提取出来这是2

32:16.890 --> 32:20.970
啊 这这里就是什么呢 这里的话就是你两个这个啊 端口

32:21.610 --> 32:22.970
啊 两个信息端口

32:24.330 --> 32:26.810
两个信息端口

32:27.450 --> 32:30.170
这两个信息端口

32:31.370 --> 32:32.090
可以

32:33.530 --> 32:36.890
啊 进行什么呢 进行这个信息的通信

32:39.580 --> 32:45.180
ok 啊 怎么通信呢啊 很简单 比如说我们这边的话给这个btn1把一个这个实践

32:46.540 --> 32:47.420
btn1

32:49.500 --> 32:51.260
点这个onclick

32:52.380 --> 32:53.260
等于一个方形

32:54.940 --> 32:58.220
啊 他是要干做什么 他是不是他要做的是给这个

32:58.780 --> 33:03.420
我看btn1啊 这个是给port1是吧 行吗那就给port1

33:05.750 --> 33:12.550
他要做的是给这个port1发消息啊 他要给port1发消息 然后怎么办呢 他这边的话

33:14.310 --> 33:19.910
他这里的话就是应该是什么呢 是不是就是由port2来发售 对不对

33:20.550 --> 33:20.950
那么

33:22.630 --> 33:24.790
那么这个信息

33:25.590 --> 33:27.830
就应该有什么

33:28.630 --> 33:29.990
由这个port

33:32.150 --> 33:32.310
p

33:34.230 --> 33:34.870
port2

33:35.750 --> 33:36.710
来进行

33:37.830 --> 33:42.950
发送 这没问题吧 对不对 我要给port1来发 谁来发 那就port2了 因为就这两个端口

33:43.270 --> 33:46.710
对不对 就这两个端口 我要给他发消息 那就是由谁发 是不是由他来发

33:47.030 --> 33:49.270
好了 那这边的话就是什么呢 这边就是port2

33:50.230 --> 33:53.350
port2 点什么呢 他有一个叫做post

33:53.990 --> 33:54.470
message

33:55.510 --> 33:56.550
post message

33:56.550 --> 33:58.150
post message 大家你要发什么

33:58.230 --> 34:01.190
我要发的就是这边的内容啊 所以我这边就直接content

34:03.290 --> 34:04.890
content.value

34:06.250 --> 34:10.570
对不对 好那你这边发消息呢 我这边port1 我得干嘛 我这边是不是得监听啊

34:11.130 --> 34:14.330
所以这边port1他得干嘛呢 得message

34:14.890 --> 34:16.410
这边需要什么呢 需要监听

34:17.210 --> 34:17.690
port1

34:19.050 --> 34:21.530
port1需要监听

34:23.130 --> 34:25.210
监听啊 然后发送

34:26.970 --> 34:28.970
给自己的这个消息

34:29.610 --> 34:34.010
那这边通过这个onmessage啊 然后加这边等于一个方式

34:35.930 --> 34:41.130
对吧 好 然后加这边呢 就是拿到这个时间对象 拿到时间对象之后

34:41.130 --> 34:45.530
然后加通过什么呢 通过时间对象点data 能够拿到这个消息

34:46.010 --> 34:47.210
啊 比方我们这边cancel

34:48.170 --> 34:48.890
点log一下

34:50.090 --> 34:57.860
啊 收到了 收到了这个来自port2

34:58.980 --> 35:00.020
port2

35:01.220 --> 35:03.060
这个消息 这个消息是什么呢

35:03.940 --> 35:05.300
啊 这边的话 event

35:06.340 --> 35:06.660
点

35:07.700 --> 35:08.340
点data

35:11.460 --> 35:15.300
ok 好 然后下面的话也是一样的啊 下面我就直接复制一份啊

35:16.100 --> 35:18.740
这边这边也是一样 这边呢给这个btn2

35:19.140 --> 35:21.140
他就是应该是什么 是不给port2

35:22.100 --> 35:24.740
发消息 那由谁来发 是不是由port1来发

35:25.220 --> 35:27.860
对不对啊 那这边就是port1.postermessage

35:28.100 --> 35:30.820
那这个port2同样也是需要干嘛 是不监听

35:31.460 --> 35:35.540
对不对啊 需要这个监听 监听的话 这边就是收到了port1

35:35.940 --> 35:36.980
发给自己的消息

35:37.460 --> 35:40.660
好 来我们保存一下 保存了之后 让我们这边来看一下啊

35:41.220 --> 35:43.940
好 然后接下来我们这边随便输一个 比如你好

35:45.380 --> 35:50.740
你好 大家这边给port1发消息 这边是不是对不对啊 收到了port2的消息

35:50.740 --> 35:53.140
你好啊 比如这边哈哈哈

35:54.100 --> 35:59.140
好 大家这边给port2发消息 这边是吧 收到了这个port1

36:00.100 --> 36:02.580
来自port1的消息 对了吧 给port2发

36:03.460 --> 36:07.140
把这儿稍微再改一下吧 这边呢就是port1

36:08.420 --> 36:11.540
port1收到了 这边是port2

36:12.580 --> 36:13.620
收到了 对吧

36:15.060 --> 36:15.540
重新来

36:16.180 --> 36:17.540
哈哈走

36:18.100 --> 36:21.060
对吧port1收到了来自port2的这个消息

36:22.340 --> 36:24.500
对不对啊 随便随便写一点

36:24.900 --> 36:28.020
这边port2收到了来自port1的消息

36:28.580 --> 36:34.820
对不对 说这个message channel啊 它本质上就是建立一个这个信息这个通道啊

36:34.820 --> 36:38.580
然后可以进行一个信息的发送和这个接收

36:39.060 --> 36:40.820
好 我们把这个例子的话 我们先放过去

36:42.660 --> 36:43.780
先放到我们笔记里面

36:44.820 --> 36:45.780
基本使用

36:46.980 --> 36:49.060
基本使用 如下

36:51.610 --> 36:52.890
这是html

36:53.450 --> 36:54.410
大家可以试一下

36:55.450 --> 36:57.290
啊 大家这边ges

36:59.370 --> 37:00.650
这边对应ges

37:06.410 --> 37:07.290
好 把它放过来

37:09.930 --> 37:16.170
好 这个的话本就是本意 本意的话是进行一个这个消息的发送和接收

37:16.170 --> 37:20.730
那它和咱们这个就是scheduler有什么联系呢 对吧

37:21.290 --> 37:25.690
那么那么这个和这个scheduler

37:26.970 --> 37:30.490
scheduler有什么关系呢

37:31.930 --> 37:36.010
我们scheduler是拿来干嘛的 是不是拿来调度任务的 对不对

37:36.250 --> 37:40.890
来调度任务的啊 这个的话是拿来就是你这个两个端口可以进行相互通信的

37:41.290 --> 37:43.050
这个能有什么联系啊

37:43.530 --> 37:44.890
好 我们这边来回顾一下

37:45.850 --> 37:50.650
我们之前的话 我们说过这个scheduler需要用来这个调度任务

37:51.210 --> 37:55.370
那你这边的话调度任务的话需要满足什么呢 需要满足两个条件

37:57.450 --> 38:03.370
之前我们有说过这个scheduler是用来

38:03.850 --> 38:05.690
什么 是不是这个调度任务

38:06.490 --> 38:09.290
对不对 调度任务啊 那调度任务

38:10.250 --> 38:13.450
调度任务需要什么呢 需要满足

38:14.490 --> 38:15.370
两个条件

38:16.890 --> 38:23.210
哪两个条件呢 首先第一个你是需要能够什么 需要就是能够暂停这个geser的这个执行

38:23.690 --> 38:27.610
让这个浏览器能够及时的 是不是更新页面对不对

38:28.410 --> 38:29.130
就geser

38:30.010 --> 38:31.450
geser啊暂停

38:32.250 --> 38:36.730
然后接下来将主线程啊还给浏览器

38:37.770 --> 38:41.370
还给浏览器让这个浏览器

38:42.010 --> 38:43.210
干嘛 是不是能够

38:44.170 --> 38:48.650
能够有续的这个重新渲染

38:49.290 --> 38:49.770
页面

38:50.490 --> 38:54.570
对吧 这是第一个条件 第二个是什么呢 第二个是你暂停了的geser

38:55.530 --> 38:57.930
暂停了的geser

38:58.330 --> 39:00.810
说明什么 是不是说明还没有执行完啊 对不对

39:00.890 --> 39:03.210
说明还没有执行完

39:03.770 --> 39:09.530
那说明还没有执行完的话 那我们这边需要干嘛 是不是需要再下一次 是不是接着来执行

39:10.730 --> 39:11.530
需要再

39:12.810 --> 39:13.530
下一次

39:14.490 --> 39:15.210
下一次

39:15.770 --> 39:17.690
接着来执行

39:20.100 --> 39:20.660
来执行

39:21.860 --> 39:26.740
那如何就是能够就是没执行完的这个geser 下一次接着来执行呢

39:27.060 --> 39:28.820
哎 你自然而然就会想到什么

39:29.300 --> 39:32.020
是不是想到这边 我们的这个事件循环

39:32.740 --> 39:38.420
对不对 我们事件循环不就是这样子吗 对不对啊 这边渲染对吧 该渲染了 渲染完了之后接下来

39:38.820 --> 39:42.820
接着是不是从你的这个任务队列里面 是不是取一个这个任务

39:43.140 --> 39:44.660
出来执行 对不对

39:47.060 --> 39:47.540
好 那么

39:48.660 --> 39:53.300
那么这里自然而然就会

39:54.820 --> 39:56.980
想到什么呢 想到事件循环

39:57.860 --> 40:00.260
对吧 我们可以将

40:00.980 --> 40:04.180
没有执行完的这个geser

40:05.460 --> 40:08.660
放入到什么 放入到任务队列

40:10.020 --> 40:12.260
啊 放入到任务队列 好到下一次

40:13.060 --> 40:15.300
下一次事件循环

40:16.020 --> 40:20.820
的时候啊 再干嘛 再取出来执行

40:22.500 --> 40:23.700
对不对 okay

40:24.740 --> 40:28.100
啊 好 那接下来的话 这里就会有个问题 那我如何把他

40:28.660 --> 40:32.260
放到这个这个就任务队列里面呢 那么

40:33.860 --> 40:36.740
如何将没有执行完的

40:37.780 --> 40:43.540
没有执行完的这个任务放入到任务队列中呢

40:46.970 --> 40:50.250
好 那这里这里的话就需要什么呢 需要产生一个红任务

40:51.050 --> 40:57.530
啊 那么这里就需要产生一个红任务

40:58.090 --> 41:00.970
啊 但现在这个红任务的这个说法啊 现在越来越少了

41:01.530 --> 41:05.130
啊 一般就称之为什么呢 一般就称之为这个任务 产生一个任务

41:05.930 --> 41:09.370
啊 这个我打个注是吗 这个就是以前的红任务的这个说法

41:09.770 --> 41:13.770
ok 好 你基本上你需要产生任务 那产生这个任务的话

41:14.410 --> 41:18.330
那这边就可以用什么呢 就可以使用这个这个message channel

41:20.410 --> 41:26.570
这里就可以使用message channel

41:28.010 --> 41:30.890
ok 因为message channel

41:33.340 --> 41:34.380
message channel

41:35.660 --> 41:41.020
channel 能够什么呢 能够产生啊 这个红任务

41:42.380 --> 41:49.020
ok 啊 所以说最终为什么react选择了这个message channel啊 就是因为他要做这上面的这个事情

41:49.580 --> 41:54.140
知道吧 他需要产生这么一个任务 把这个任务放到什么呢 放到这个任务队列里面

41:54.780 --> 41:59.020
下次的话 然后就是你渲染完了之后对吧 你时间循环 然后再从任务队列里面

41:59.180 --> 42:02.300
把这个任务取出来 然后继续的进行这个执行

42:03.100 --> 42:05.020
好 那这里的话就会有一些这个疑问了

42:05.580 --> 42:10.060
啊 有些疑问 就你这边呢 你说这个message channel啊 你这边要产生这个红任务 对吧

42:10.300 --> 42:15.660
好 那我之前的话 我们这个最常见的产生这个红任务的这个手段是什么 是不是set them out

42:16.460 --> 42:21.180
对不对啊 说这边呢 会有一些这个面试题 他会问你啊 为什么

42:22.460 --> 42:25.420
不选择set them out

42:26.380 --> 42:30.220
啊 注意哦 这个是面试题哦啊 问你为什么不选择set them out

42:30.620 --> 42:32.780
好 原因很简单 就是以前

42:33.900 --> 42:37.340
以前要创建一个这个红任务

42:39.020 --> 42:43.660
啊 可以采用什么呢 可以采用这个set them out

42:45.500 --> 42:53.020
set them out 然后这边这边是你要做的这个回调 对不对 大家这边你设置成零 对不对 可以采用这种方式

42:53.580 --> 42:58.540
这种方式 但是react团队

42:59.740 --> 43:10.760
团队没有采用这种方式 啊 为什么呢 为什么呢 原因很简单啊 这是因为这个set them out

43:12.440 --> 43:15.800
set them out 在这个嵌套

43:17.080 --> 43:20.040
成绩啊 超过什么呢 超过五成

43:20.360 --> 43:25.400
然后你这个time out time out time out

43:27.400 --> 43:32.440
time out time out 就是指的是这个啊 就这个时间 就你的这个延时啊 把把这个

43:33.080 --> 43:37.720
啊 这个大家一看了吧 这time out 就是指的这个时间啊 就你的这个延时

43:39.400 --> 43:43.400
延时啊 你的time out 如果小于

43:44.520 --> 43:46.520
如果小于四毫秒

43:47.320 --> 43:49.480
啊 那么 则会

43:51.160 --> 43:54.840
则会设置为什么呢 设置为四毫秒

43:56.040 --> 44:01.960
ok 啊 这个的话不是说在乱说 这个的话你可以参与什么呢 你可以参与html规范

44:02.600 --> 44:07.320
啊 我们拿规范说话 对吧 这个你可以参与

44:08.040 --> 44:09.240
这个html规范

44:11.080 --> 44:14.760
html规范啊 这规范的话我已经在这打开了

44:15.080 --> 44:20.520
啊 我还怕打不开 提前给大家打开了 啊 这边这边呢 就是关于这个set time out

44:21.160 --> 44:22.520
你看这里第四句

44:23.800 --> 44:27.480
呃 if time out is less than zero

44:28.120 --> 44:33.720
then set time out to zero 啊 这个是小于零的时候 他就设置为零啊 这里这里第五句啊

44:34.200 --> 44:35.080
if

44:35.080 --> 44:38.200
listing level is this gratinger than five

44:38.840 --> 44:41.080
and time out is less than four

44:41.640 --> 44:44.040
then set time out to four

44:44.760 --> 44:48.920
对不对 这个是人家这个规范说了的啊 我把这个给大家

44:49.560 --> 44:55.180
放到这个笔记里面 放到笔记里面 ok

44:56.060 --> 44:58.220
啊 这个规范也给把这个链接

44:58.780 --> 45:00.780
这规范的这个链接也给大家一个

45:08.550 --> 45:12.150
ok 这是规范的链接 看到没有 好 那我们这边呢 我们可以

45:12.870 --> 45:16.230
来实际的写一个例子啊 写个实际的例子来看一下

45:16.950 --> 45:19.270
好 我们就在这写吧 就在这写

45:20.230 --> 45:24.710
好吧 这个就删了吧 这个笔记刚才已经给他记了啊 这个这个就不需要了

45:25.030 --> 45:28.070
好 我们在这来写个例子 好 比如说我这边

45:28.950 --> 45:33.270
我let net 一个这个 count 等于一个零

45:34.310 --> 45:38.550
好 然后接下来的话 net 一个这个 start

45:39.750 --> 45:40.870
这个start time

45:42.150 --> 45:44.310
等于一个什么呢 等于一个这个new

45:45.030 --> 45:45.430
that

45:47.270 --> 45:48.950
是不是获取这个当前的时间错

45:49.750 --> 45:51.430
对不对 获取当前的时间错

45:52.390 --> 45:54.950
获取当前的时间错

45:57.660 --> 45:58.860
时间错

45:59.580 --> 46:03.420
错错啊啊 这个是什么 这个是技术器啊 技术器

46:04.940 --> 46:07.260
啊好 然后接下来的话 我们这边

46:08.460 --> 46:08.940
cancel

46:09.740 --> 46:10.300
点log

46:11.020 --> 46:12.620
啊 这个呢 是start time

46:13.740 --> 46:14.620
start time

46:15.340 --> 46:17.260
好 这边呢 先把这个

46:18.860 --> 46:22.620
start time 这边呢 是00啊 一开始是00

46:23.180 --> 46:25.740
好 然后接下来我们这边写一个function

46:26.300 --> 46:28.220
啊 我们这边写一个比如说啊 fn

46:30.220 --> 46:31.660
啊 这边呢 调用这个 fn

46:33.580 --> 46:37.580
好 然后接下来在这个 fn 里面 fn 里面我们就什么呢 我们就设置

46:38.140 --> 46:38.620
timeout

46:39.180 --> 46:40.940
啊 设置 timeout 人家这边function

46:41.980 --> 46:44.380
啊 这边呢 我们设置什么呢 设置他的这个时间

46:44.780 --> 46:46.140
是零啊

46:46.700 --> 46:49.740
好 然后接下来在这里面 在这里面的话 我们就cancel

46:50.380 --> 46:51.100
点log

46:51.900 --> 46:55.740
啊 这边呢 来计算这个执行的时间 exec

46:55.740 --> 46:56.060
time

46:57.580 --> 46:59.260
啊 这个执行的时间的话 这边

46:59.820 --> 47:03.580
首先的话 这个次数 次数就是应该是这边你就加加

47:04.140 --> 47:04.460
count

47:05.260 --> 47:10.220
啊 这是你的这个次数 然后接下来的话这个时间 时间的话就是你当前的new date

47:10.460 --> 47:15.020
对吧 然后减去一个什么呢 减去一个你的这个start time

47:16.700 --> 47:16.940
ok

47:17.500 --> 47:19.900
好 然后完事之后 然后接下来我们这边

47:21.100 --> 47:25.180
技术 艺术什么呢 艺术你的这个 count

47:25.900 --> 47:28.060
全等于一个什么呢 全等于一个50

47:29.340 --> 47:30.540
啊 让我们这边return

47:31.180 --> 47:32.620
啊 我们让他执行50次

47:33.180 --> 47:36.460
否则就干嘛呢 否则就重新调用这个 fn

47:37.340 --> 47:38.780
啊 好来保存一下

47:39.500 --> 47:41.340
保存了之后 然后接下来这边来看一下

47:42.940 --> 47:46.620
ok 刷新一下啊 你看 这边的话

47:47.180 --> 47:55.740
我看啊 这个在前面的话 这边相差比较大啊 这边是用了8毫秒 这边用了

47:56.300 --> 48:00.700
2毫秒 对不对 但是到后面 后面你看 后面的话基本就比较稳定了 你看从

48:01.740 --> 48:06.860
从这里啊 51到55 是不是4毫秒 对不对 大家这边5毫秒

48:07.420 --> 48:11.420
5毫秒 那这个是4毫秒啊 大家这个啊 这个花的多一点

48:11.900 --> 48:17.660
好 大家这边6毫秒5毫秒5毫秒5毫秒对不对啊 大家这边5毫秒

48:18.220 --> 48:24.060
后面基本上很稳定了啊 很稳定的这个5毫秒 你每次刷新了 他可能会略有一些差异啊

48:25.660 --> 48:30.620
对吧 每次刷新会有率 会有一些这个差异 但是你会发现基本上的话 你看这边

48:30.940 --> 48:34.060
明明我们这边设置的是多少 是不是设置的是零

48:34.700 --> 48:40.860
对不对 但你这边你看他达得到吧 达不到 他必然会有什么呢 就是至少会有这个4毫秒

48:40.940 --> 48:47.820
就后期 你看这边131到135 至少会有这个4毫秒的这个时间销哈 对不对

48:48.220 --> 48:51.260
所以正因为这个原因啊 把这个例子

48:52.780 --> 48:53.660
放到笔记里面

48:55.100 --> 48:57.180
啊 就是可以写一个例子

48:58.540 --> 49:04.060
可以写一个例子来进行验证

49:05.100 --> 49:06.780
这个例子给大家放到笔记里面

49:10.710 --> 49:17.270
ok 好 把这个执行结果给大家截个图吧 执行结果我们就截后面的吧 后面的比较稳定啊

49:17.910 --> 49:21.910
我们就截后面的 后面就比较稳定啊 截一部分就好了啊

49:25.270 --> 49:29.750
好 放到这边啊 执行结果如下 执行结果

49:30.390 --> 49:32.310
部分截图如下

49:34.980 --> 49:36.980
ok 把这个说小点

49:37.940 --> 49:43.140
他每次沾这个图 他会卡一下 比如说现在 现在他又卡住了

49:45.860 --> 49:47.780
ok 把他说小一下

49:53.240 --> 49:56.200
好 所以说正因为这个原因啊 正因为这个原因

49:57.320 --> 50:00.840
正因为这个原因

50:02.280 --> 50:07.560
啊 正因为这个原因 所以这个rap团队

50:08.280 --> 50:10.600
团队没有选择

50:11.480 --> 50:14.440
没有选择使用这个set timeout

50:15.800 --> 50:17.800
timeout

50:18.680 --> 50:21.400
来这个产生这个任务

50:22.280 --> 50:23.160
ok 因为

50:24.440 --> 50:28.280
因为这个4毫秒啊 4毫秒的这个时间

50:29.560 --> 50:31.720
的浪费啊 还是

50:32.760 --> 50:36.220
不可忽视的

50:36.220 --> 50:39.180
对不对 你这边说浪费这个4毫秒 我一共都拆多少

50:39.340 --> 50:45.740
我整个一针一针是16.66 对不对 整个才16毫秒 你就跟我浪费了这个4毫秒

50:46.380 --> 50:50.060
基本上就是1 4分之1了 对不对 4分之1的时间就光浪费了

50:50.060 --> 50:53.100
这4分之1时间我可以执行好多任务啊 对不对

50:53.660 --> 50:56.540
啊 说这个4毫秒的这个浪费 还是不可忽视的

50:57.340 --> 50:59.660
所以他这边没有选择这个set timeout

51:00.140 --> 51:02.700
啊 然后还有就是会问啊 就是为什么

51:04.810 --> 51:07.050
为什么没有啊 把把这个

51:08.010 --> 51:10.330
这个加个出就可以了 这个不要弄成一个标题

51:12.650 --> 51:14.090
啊 这个这样子把加出就可以了

51:14.650 --> 51:18.890
好 这边为什么没有选择这个request

51:20.890 --> 51:24.650
to request the animation of the frame

51:26.570 --> 51:30.330
ok 就我们之前的话 刚才是不是看了这个request the animation frame

51:30.330 --> 51:33.290
对不对 他是什么呢 他是在这个每一针

51:34.250 --> 51:38.090
是在每一针这个渲染之前才执行 对不对

51:38.490 --> 51:41.930
那你这个肯定也不合适 是不是也不合适 为什么

51:41.930 --> 51:45.290
因为比如说我这边的话 你看 我这边如果就是包装成一个任务团

51:45.290 --> 51:47.290
我这边可以干嘛 是不是可以执行多个 对不对

51:47.290 --> 51:50.330
只要没到你渲染时间 我这边就可以执行多个 对不对

51:50.330 --> 51:54.170
那你如果使用这个 使用这个的话 我每次渲染之前是不是才能执行一次

51:54.970 --> 51:56.890
对不对 啊 这个也不合适

51:57.770 --> 52:04.650
这个也不合适 因为这个只能在什么 是不是重新渲染之前

52:05.530 --> 52:12.810
重新渲染之前才能够执行一次 执行一次

52:13.530 --> 52:22.410
而如果我们啊 就是包装成一个任务 包装成一个任务

52:23.050 --> 52:30.250
放入到放入到任务对列中啊 那么只要没到

52:31.210 --> 52:38.970
没到这个重新渲染 重新渲染的这个时间就可以干嘛 就可以一直

52:38.970 --> 52:45.210
从什么 是不是从任务对列里面 然后获取任务来执行

52:46.730 --> 52:52.090
对不对啊 而且这个request animation frame 它还会有一定的兼容性的问题

52:53.130 --> 52:58.410
而且这个还会有一定的兼容性问题

52:58.810 --> 53:02.890
它兼容性问题 它体现在哪里呢 它这边的话就是

53:05.370 --> 53:05.930
这边怎么

53:07.770 --> 53:08.170
刚才

53:08.890 --> 53:14.330
哦 这个这个稍微有点问题啊 我保存一下 我还怕一会儿写那么多啊 稍等稍等 我保存一下

53:14.890 --> 53:21.530
一会儿别没了啊 它还会有什么兼容性问题呢 就是你现在看到了这个 raf 它是在哪里

53:22.090 --> 53:23.130
它是在这个位置

53:24.090 --> 53:28.970
对吧 它在这个位置 好 然后接下来这个的话 它是在重新渲染之前

53:29.610 --> 53:34.010
对不对 放在重新渲染之前的 但是如果是在safari或者这个 age

53:34.330 --> 53:37.210
这两款浏览器的话 它是在什么 它是在重新渲染之后

53:38.170 --> 53:44.170
哎 它和谷歌和火葫的表现就不一样 谷歌和火葫的话 它是放在什么呢 放在这个渲染之前的

53:44.730 --> 53:50.250
啊 实际上我们的规范 你去看那个html的规范 规范的话也是要求是放在之前的

53:50.730 --> 53:56.010
啊 然后那个就是safari和 age 它是放在这之后的 说会存在这个问题

53:57.770 --> 53:59.530
这边感觉这个东西有点卡了呢

54:01.690 --> 54:03.370
就是这个safari

54:04.490 --> 54:06.490
safari safari怎么评

54:07.450 --> 54:10.490
safari啊safari和这个 age

54:11.450 --> 54:13.450
age age

54:14.570 --> 54:16.890
那个 age 哎 那个 age怎么评的

54:17.850 --> 54:19.690
啊 我忘了 这个

54:20.810 --> 54:22.570
age 那个 age 浏览器

54:23.130 --> 54:23.610
我看一下

54:25.940 --> 54:29.460
微软 age 啊 adge

54:31.060 --> 54:32.500
啊 刚才刚才我评的就是

54:33.380 --> 54:35.140
dge age

54:36.020 --> 54:37.220
所以还是要自信点 是吧

54:37.940 --> 54:43.300
啊 safari和 age 浏览器是将什么呢 是将这个request

54:45.590 --> 54:50.790
这个animation frame 放到什么呢 放到这个渲染之后

54:51.430 --> 54:54.310
执行的啊 然后这个谷歌

54:55.590 --> 54:59.830
谷歌和这个什么呢 就谷歌的这个空和这个火狐

55:01.270 --> 55:02.390
firefox

55:03.990 --> 55:05.110
firefox

55:05.110 --> 55:10.870
是将这个这个request animation frame

55:11.750 --> 55:13.990
放到什么呢 放到这个渲染之前

55:15.030 --> 55:15.830
渲染之前

55:16.710 --> 55:18.230
执行的啊 所以

55:19.910 --> 55:25.190
所以这里存在什么呢 存在这个不同的浏览器

55:25.830 --> 55:31.030
有这个不同的执行顺序的问题

55:31.670 --> 55:34.790
啊 但这边的话要说一下这个标准啊 这个标准

55:38.060 --> 55:44.380
根据标准应该是什么呢 应该是放在渲染之前

55:45.340 --> 55:50.700
渲染之前啊 也就是说你这个com和firefox 他们是符合标准的

55:52.140 --> 55:55.500
啊 这是为什么没有选择这个request animation frame

55:56.460 --> 55:58.940
啊 最后一个最后一个就是为什么没有选择这个

55:59.500 --> 56:05.580
弄成一个微任务啊 这边有些人还会问你为什么没有选择

56:06.780 --> 56:12.620
啊 就是包装成一个微任务 包装成一个微任务

56:14.540 --> 56:14.860
ok

56:16.300 --> 56:20.540
啊 为什么没有选择包装成这个微任务呢 你从这边能不能得到答案

56:21.100 --> 56:24.060
就这张图啊 我专门就是放了这张图的

56:24.780 --> 56:25.180
为什么

56:25.980 --> 56:31.020
你看一下 这微任务的话他会干嘛 是不是会等待你整个这个任务队列

56:31.420 --> 56:33.020
这不执行完毕之后

56:33.660 --> 56:38.220
是不是拆这个结束啊 他就不像你这边 这边是什么每次是不是取一个任务

56:38.700 --> 56:41.180
对呀 你的这个任务队列每次取一个任务

56:41.340 --> 56:46.540
而你的这个微任务微任务的话 他是什么 会清空整个微任务队列

56:50.900 --> 56:56.820
啊 这是因为微任务的这个执行机制

56:57.620 --> 57:05.380
而导致的导致的啊 这也比较导致啊 因为这个这是因为啊 这是因为

57:06.100 --> 57:09.060
和这个微任务的执行机制有关系

57:09.620 --> 57:10.420
啊微任务

57:11.380 --> 57:15.860
微任务队列会什么 会在这个清空

57:17.380 --> 57:17.860
清空

57:18.660 --> 57:19.300
整个

57:20.260 --> 57:24.180
队列之后才会什么 才会结束

57:25.700 --> 57:28.500
对不对啊 那也就是什么呢 微任务的话 你会在这个

57:29.140 --> 57:32.740
这个页面更新之前啊 那么微任务

57:33.460 --> 57:36.980
微任务会在页面更新前

57:37.940 --> 57:40.020
更新前啊 一直执行

57:40.580 --> 57:43.060
一直执行直到

57:44.820 --> 57:48.580
直到这个队列被清空

57:49.780 --> 57:56.100
对不对啊 打不到什么 打不到将这个主线程还给

57:57.220 --> 57:59.860
还给浏览器的目的

58:00.740 --> 58:03.700
ok啊 这就是为什么没有包装成一个微任务

58:04.500 --> 58:08.900
ok好 整个这节课的话 主要就是给大家介绍这个

58:09.460 --> 58:14.980
这个message channel 啊 当然这个你在了解这个message channel之前

58:14.980 --> 58:17.620
其实最最主要的是什么呢 最主要是你要把这个

58:18.180 --> 58:22.740
事件循环啊 先把这个看懂啊 这个看懂之后你就知道他为什么

58:22.740 --> 58:26.660
就是为要包装成一个任务了 对不对 他是为了就是你

58:26.660 --> 58:30.900
后面就是渲染完了之后啊 可以再一次从这个任务队列里面

58:30.900 --> 58:35.060
取出之前没有执行完的这个任务啊 再继续进行一个执行

58:35.060 --> 58:42.900
没有没有 ok啊 这是有关这个message channel啊 好 这节课就先到这里啊 再见

