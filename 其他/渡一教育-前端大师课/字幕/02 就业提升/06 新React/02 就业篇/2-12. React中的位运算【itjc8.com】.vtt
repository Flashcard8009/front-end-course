WEBVTT

00:00.000 --> 00:03.000
OK 我们来看一下这道题

00:03.000 --> 00:05.360
这道题的话 然后他问的是

00:05.360 --> 00:09.400
react中 哪些地方用到了这个卫运算

00:09.400 --> 00:12.280
实际上在整个这个react里面

00:12.280 --> 00:14.240
大量用到了这个卫运算

00:14.240 --> 00:16.400
为什么呢 因为这个卫运算的话

00:16.400 --> 00:18.080
它可以很方便的表达

00:18.080 --> 00:20.840
比如说我针 删 改 查

00:20.840 --> 00:24.600
可以表达这些需求

00:24.600 --> 00:26.280
在这个react内部的话

00:26.280 --> 00:29.080
像比如说flex 还有这个状态

00:29.160 --> 00:32.080
还有这个优先级这些 这些操作的话

00:32.080 --> 00:35.080
都大量的使用到了这个卫运算

00:35.080 --> 00:37.080
OK 所以说我们这些课的话

00:37.080 --> 00:40.080
我们这边的话来把这个react中的这个卫运算

00:40.080 --> 00:42.080
我们来给大家介绍一下

00:42.080 --> 00:43.080
好 那我们这边的话

00:43.080 --> 00:46.080
我们会从这么两个方面去介绍

00:46.080 --> 00:48.080
首先第一个是什么呢

00:48.080 --> 00:51.080
首先第一个就是卫运算的基础知识

00:51.080 --> 00:54.080
卫运算的基础知识

00:54.080 --> 00:56.080
另外一个就是什么呢

00:56.080 --> 01:01.080
就是react中的这个卫运算

01:01.080 --> 01:04.080
OK 从这么两个方面

01:04.080 --> 01:05.080
好 这个卫运算

01:05.080 --> 01:06.080
卫运算的话

01:06.080 --> 01:09.080
首先第一步你要理解的是二净子

01:09.080 --> 01:11.080
那什么是二净子

01:11.080 --> 01:13.080
二净子的话 顾名思义就是

01:13.080 --> 01:16.080
以二为技术的一种技术方式

01:16.080 --> 01:19.080
对吧 所谓二净子

01:19.080 --> 01:24.080
指的 就是以二为底

01:24.080 --> 01:28.080
以二为底

01:28.080 --> 01:33.080
以二为底的一种技术方式

01:33.080 --> 01:41.610
技术方式

01:41.610 --> 01:43.610
那我们常用的话

01:43.610 --> 01:45.610
其实就是我们生活中常用的是什么

01:45.610 --> 01:47.610
生活中常用的是十净子

01:47.610 --> 01:49.610
对吧 12345678910

01:49.610 --> 01:50.610
十净子

01:50.610 --> 01:51.610
而我们程序里面的话

01:51.610 --> 01:53.610
经常会用这个二净子

01:53.610 --> 01:55.610
那除了这个二净子以外的话

01:55.610 --> 01:56.610
它会有什么呢

01:56.610 --> 01:59.610
还会有这个八净子和十六净子

01:59.610 --> 02:01.610
那这个不同的净子的话

02:01.610 --> 02:02.610
它最大的特点就是什么

02:02.610 --> 02:03.610
是缝多少

02:03.610 --> 02:05.610
就比如说你是叉叉净子

02:05.610 --> 02:07.610
它就是到了那一位之后

02:07.610 --> 02:09.610
价格是需要净一

02:09.610 --> 02:10.610
对不对

02:10.610 --> 02:11.610
比如我二净子

02:11.610 --> 02:14.610
二净子的话是缝二净一

02:14.610 --> 02:16.610
然后那个八净子是缝八净一

02:16.610 --> 02:19.610
十六净子是缝十六净一

02:19.610 --> 02:21.610
也就是在对应的那个净子里面

02:21.610 --> 02:23.610
它是没有相应的那个符号的

02:23.610 --> 02:24.610
什么意思

02:24.610 --> 02:25.610
比如我这边

02:25.610 --> 02:26.610
我们先说十净子

02:26.610 --> 02:27.610
十净子的话

02:27.610 --> 02:28.610
这边零

02:28.610 --> 02:33.610
然后一二三四五六七八九

02:33.610 --> 02:34.610
好

02:34.610 --> 02:35.610
接下来到十

02:35.610 --> 02:36.610
十的话

02:36.610 --> 02:39.610
它是没有那种特殊的符号的

02:39.610 --> 02:41.610
你看前面

02:41.610 --> 02:42.610
前面的话

02:42.610 --> 02:43.610
你看这边零到九

02:43.610 --> 02:45.610
它什么都有一个自己的这种写法

02:45.610 --> 02:46.610
对吧

02:46.610 --> 02:47.610
比方零是这样子写的

02:47.610 --> 02:48.610
一是这样写的

02:48.610 --> 02:49.610
二是这样写的

02:49.610 --> 02:50.610
都有一个独特的

02:50.610 --> 02:52.610
支撑的这种写法

02:52.610 --> 02:53.610
但是到了十

02:53.610 --> 02:55.610
因为它是十净子

02:55.610 --> 02:57.610
十的话它就没有特殊的符号了

02:57.610 --> 02:58.610
那怎么办呢

02:58.610 --> 03:00.610
那接下来重新回到零

03:00.610 --> 03:01.610
重新回到零的话

03:01.610 --> 03:03.610
那你这边和这里是不是就是一样的

03:03.610 --> 03:04.610
对不对

03:04.610 --> 03:05.610
那怎么办呢

03:05.610 --> 03:06.610
那我前面再倾一位

03:06.610 --> 03:08.610
那说说在十净子里面

03:08.610 --> 03:09.610
十是这么来的

03:09.610 --> 03:11.610
一词类推比如说这个二净子

03:11.610 --> 03:13.610
二净子的话比如说零

03:13.610 --> 03:14.610
一

03:14.610 --> 03:15.610
好到了二

03:15.610 --> 03:16.610
到了二的话

03:16.610 --> 03:18.610
它就没有这个二这个符号

03:18.610 --> 03:20.610
你一定记住

03:20.610 --> 03:21.610
这边的话它多少净子

03:21.610 --> 03:22.610
它这边的话

03:22.610 --> 03:23.610
就到了那么多之后

03:23.610 --> 03:24.610
它较轻微

03:24.610 --> 03:25.610
二净子的话

03:25.610 --> 03:26.610
它到二较轻易

03:26.610 --> 03:27.610
那说这边怎么办呢

03:27.610 --> 03:28.610
这边就是

03:28.610 --> 03:29.610
10

03:29.610 --> 03:30.610
没有没有

03:30.610 --> 03:32.610
它是这样子的

03:32.610 --> 03:33.610
好我这边的话

03:33.610 --> 03:34.610
我有个表格

03:34.610 --> 03:35.610
我把这个表格

03:35.610 --> 03:36.610
把它拿过来

03:37.610 --> 03:38.610
算了

03:38.610 --> 03:39.610
我的表格拿过来

03:41.610 --> 03:42.610
这边有个表格

03:42.610 --> 03:43.610
这表格的话

03:43.610 --> 03:44.610
大家可以看一下

03:44.610 --> 03:45.610
这边对比的就是

03:45.610 --> 03:46.610
零

03:46.610 --> 03:47.610
零到这个十五

03:47.610 --> 03:49.610
那下面的话是二净子的

03:49.610 --> 03:51.610
这个零到十五

03:51.610 --> 03:52.610
零到十五

03:52.610 --> 03:54.610
以及十六净子的零到十五

03:54.610 --> 03:55.610
你看十六净子

03:55.610 --> 03:57.610
十六净子它这边十

03:57.610 --> 03:59.610
你看它是不是就有一个特殊的符号

03:59.610 --> 04:00.610
它用什么

04:00.610 --> 04:01.610
它是不是用A表示十

04:01.610 --> 04:02.610
对

04:02.610 --> 04:03.610
用B表示十一

04:03.610 --> 04:04.610
C表示十二

04:04.610 --> 04:07.610
然后既然这边一直到F

04:07.610 --> 04:09.610
F表示十五

04:09.610 --> 04:11.610
然后有没有十六

04:11.610 --> 04:13.610
十六的话它就没有特殊符号了

04:13.610 --> 04:14.610
对不对

04:14.610 --> 04:15.610
它就应该净位了

04:15.610 --> 04:16.610
所以说这个十六净子

04:16.610 --> 04:18.610
它的十六就写作什么呢

04:18.610 --> 04:19.610
就写作10

04:19.610 --> 04:20.610
写作10

04:20.610 --> 04:21.610
OK

04:21.610 --> 04:24.610
这是首先关于二净子

04:24.610 --> 04:25.610
关于净子

04:25.610 --> 04:27.610
这里应该是关于净子

04:27.610 --> 04:28.610
好

04:28.610 --> 04:29.610
接下来的话

04:29.610 --> 04:30.610
我们经常的话

04:30.610 --> 04:32.610
会使用二净子

04:32.610 --> 04:37.610
我们经常会使用二净子

04:37.610 --> 04:40.610
来进行计算

04:40.610 --> 04:43.610
来进行计算

04:43.610 --> 04:44.610
为什么呢

04:44.610 --> 04:45.610
因为你这边的话

04:45.610 --> 04:47.610
这种二净子

04:47.610 --> 04:49.610
这种未运算

04:49.610 --> 04:50.610
基于

04:50.610 --> 04:52.610
二净子的

04:52.610 --> 04:53.610
未运算

04:53.610 --> 04:56.560
未运算

04:56.560 --> 04:59.560
能够很方便的

04:59.560 --> 05:01.560
很方便的表达什么呢

05:01.560 --> 05:02.560
表达

05:02.560 --> 05:04.560
就是我刚才说的表征

05:04.560 --> 05:06.560
这个3

05:06.560 --> 05:11.450
然后接下来这个查

05:11.450 --> 05:12.450
查感

05:12.450 --> 05:15.450
可以很方便的表达这些需求

05:15.450 --> 05:16.450
OK

05:16.450 --> 05:18.450
所以你在很多项目里面

05:18.450 --> 05:20.450
包括这个操作系统里面

05:20.450 --> 05:23.450
你经常能够看到这种未运算的声音

05:23.450 --> 05:25.450
那我们这边举个例子

05:25.450 --> 05:27.450
比如说一个后台管理系统

05:27.450 --> 05:33.850
例如一个后台管理系统

05:33.850 --> 05:38.760
它一般的话

05:38.760 --> 05:39.760
一般的话

05:39.760 --> 05:40.760
会有什么呢

05:40.760 --> 05:47.650
会有针对权限的这个控制

05:47.650 --> 05:48.650
对不对

05:48.650 --> 05:50.650
那这个权限的控制的话

05:50.650 --> 05:52.650
一般就使用的是二净子

05:52.650 --> 05:56.280
权限的控制

05:56.280 --> 06:00.280
就使用的是二净子

06:00.280 --> 06:02.280
比如说我们这边来看一下

06:02.280 --> 06:04.280
比如说有这么一个

06:04.280 --> 06:05.280
把这儿拿过来

06:05.280 --> 06:07.980
对吗

06:07.980 --> 06:08.980
你看这里

06:08.980 --> 06:10.980
这里的话有一个permissions

06:10.980 --> 06:12.980
它这边就有几个权限呢

06:12.980 --> 06:14.980
它这边就有对应五个权限

06:14.980 --> 06:16.980
比如说这个是SYS setting

06:16.980 --> 06:18.980
这个是data and mean

06:18.980 --> 06:19.980
这个是user

06:19.980 --> 06:20.980
这个是post

06:20.980 --> 06:22.980
这个是postedit

06:22.980 --> 06:24.980
这个是postedit

06:24.980 --> 06:26.980
它这边就有对应的权限制

06:26.980 --> 06:28.980
这个权限制用的就是什么

06:28.980 --> 06:30.980
什么用的就是二净子

06:30.980 --> 06:31.980
对不对

06:31.980 --> 06:32.980
而在比如说

06:32.980 --> 06:35.980
比如说在这个Linux操作系统里面

06:35.980 --> 06:37.980
再例如

06:37.980 --> 06:42.760
再例如

06:42.760 --> 06:46.580
再这个

06:46.580 --> 06:47.580
这个再

06:47.580 --> 06:52.580
再例如在这个Linux操作系统里面

06:52.580 --> 06:55.580
这个AX代表什么呢

06:55.580 --> 06:59.580
代表可执行权限

07:00.580 --> 07:02.580
然后这个W

07:02.580 --> 07:03.580
W代表什么呢

07:03.580 --> 07:06.960
代表可写权限

07:06.960 --> 07:08.960
然后再下这个R

07:08.960 --> 07:10.960
R的话代表什么呢

07:10.960 --> 07:12.960
代表可读权限

07:12.960 --> 07:13.960
OK

07:13.960 --> 07:15.960
那对应的权限值的话

07:15.960 --> 07:16.960
它分别就是什么呢

07:16.960 --> 07:20.960
对应的权限值

07:20.960 --> 07:24.960
分别就是124

07:24.960 --> 07:25.960
看到没有

07:25.960 --> 07:26.960
它是什么

07:26.960 --> 07:28.960
刚好就是二的密尺方

07:28.960 --> 07:29.960
对不对

07:29.960 --> 07:33.960
二的密尺方

07:33.960 --> 07:36.960
那使用这个二净子的这种表示方式

07:36.960 --> 07:37.960
它首先的话

07:37.960 --> 07:39.960
它这个计算速度上面

07:39.960 --> 07:41.960
它肯定会更快一些

07:41.960 --> 07:42.960
另外一个的话

07:42.960 --> 07:45.960
它就是在表示这个多种权限的时候

07:45.960 --> 07:47.960
它会更加方便一些

07:47.960 --> 07:48.960
OK

07:48.960 --> 07:51.960
使用这个二净子

07:51.960 --> 07:55.960
来表示这个权限

07:55.960 --> 07:57.960
首先

07:57.960 --> 07:58.960
速度上面

07:58.960 --> 08:00.960
速度上面

08:00.960 --> 08:03.960
会更快一些

08:03.960 --> 08:05.960
其次

08:05.960 --> 08:07.960
在表示

08:07.960 --> 08:12.960
在表示多种权限的时候

08:12.960 --> 08:16.960
会更加方便一些

08:16.960 --> 08:18.960
它方便在哪里呢

08:18.960 --> 08:19.960
我举个例子

08:19.960 --> 08:21.960
比如说有些场面

08:21.960 --> 08:22.960
比如

08:22.960 --> 08:23.960
现在的话

08:23.960 --> 08:25.960
我们有一些权限

08:25.960 --> 08:26.960
比如

08:26.960 --> 08:30.960
现在有三个权限

08:30.960 --> 08:32.960
这三个权限分别是什么

08:32.960 --> 08:33.960
A

08:33.960 --> 08:34.960
B

08:34.960 --> 08:35.960
然后C

08:35.960 --> 08:36.960
后面的话

08:36.960 --> 08:37.960
还有更多的权限

08:37.960 --> 08:38.960
那你这边的话

08:38.960 --> 08:40.960
你需要根据不同的权限

08:40.960 --> 08:42.960
是不是可以做不同的事情

08:42.960 --> 08:43.960
对不对

08:43.960 --> 08:49.530
根据不同的权限

08:49.530 --> 08:53.530
然后做不同的事情

08:53.530 --> 08:56.530
那你可能会写出这样子的代码

08:56.530 --> 08:58.530
就是if

08:58.530 --> 09:00.530
假设你这边有个value

09:00.530 --> 09:02.530
我这边就写这个伟代码了

09:02.530 --> 09:03.530
假设这个value

09:03.530 --> 09:04.530
如果是A

09:04.530 --> 09:06.530
对应的是A这个权限

09:06.530 --> 09:07.530
那这边的话

09:07.530 --> 09:08.530
你可以做一些事情

09:08.530 --> 09:09.530
对吧

09:09.530 --> 09:10.530
Ls,if

09:10.530 --> 09:12.530
你的这个value

09:12.530 --> 09:13.530
等等的

09:13.530 --> 09:14.530
这个B

09:14.530 --> 09:15.530
好

09:15.530 --> 09:16.530
那接下来

09:16.530 --> 09:17.530
你这边的话

09:17.530 --> 09:18.530
就需要做一些事情

09:18.530 --> 09:19.530
那接下来的话

09:19.530 --> 09:20.530
问题来了

09:20.530 --> 09:21.530
你现在的话

09:21.530 --> 09:22.530
你这边的话

09:22.530 --> 09:23.530
只是什么

09:23.530 --> 09:24.530
你这边的话

09:24.530 --> 09:25.530
你的关系是不是

09:25.530 --> 09:26.530
对不对

09:26.530 --> 09:28.530
你仅仅是1对1的关系

09:28.530 --> 09:30.530
那如果我是1对多呢

09:30.530 --> 09:31.530
就我这个value

09:31.530 --> 09:33.530
可能对应好几个字

09:33.530 --> 09:35.530
比如它又有A又有B

09:35.530 --> 09:37.530
它可以做一些事情

09:37.530 --> 09:39.530
又有A又有C

09:39.530 --> 09:40.530
它可以做一些事情

09:40.530 --> 09:41.530
又有B又有C

09:41.530 --> 09:42.530
可以做些事情

09:42.530 --> 09:44.530
那你这样子写下来的话

09:44.530 --> 09:46.530
是不是相当的麻烦

09:46.530 --> 09:47.530
对不对

09:47.530 --> 09:52.350
在上面的代码中

09:52.350 --> 09:53.350
代码中

09:53.350 --> 09:55.350
会有一个问题

09:55.350 --> 09:56.350
什么问题呢

09:56.350 --> 09:59.350
就是目前仅仅只是什么

09:59.350 --> 10:03.350
是不是1对1的关系

10:03.350 --> 10:04.350
对不对

10:04.350 --> 10:08.350
但是在实际开发中

10:08.350 --> 10:11.350
往往有很多

10:11.350 --> 10:16.350
有很多1对多的关系

10:16.350 --> 10:18.350
一个value

10:18.350 --> 10:23.350
可能会对应好几个字

10:23.350 --> 10:24.350
对不对

10:24.350 --> 10:25.350
对不对

10:25.350 --> 10:26.350
我这边有个图

10:26.350 --> 10:28.350
把图拉过来

10:28.350 --> 10:31.350
就是像这个样子的

10:31.350 --> 10:32.350
像这样子的

10:32.350 --> 10:33.350
你前面的话

10:33.350 --> 10:34.350
你这边这个value

10:34.350 --> 10:35.350
1对1

10:35.350 --> 10:36.350
你可以这样子写

10:36.350 --> 10:37.350
那我现在这个value

10:37.350 --> 10:38.350
1对多呢

10:38.350 --> 10:39.350
对不对

10:39.350 --> 10:40.350
而说这种时候的话

10:40.350 --> 10:42.350
我们的这个位应算

10:42.350 --> 10:44.350
就非常方便了

10:44.350 --> 10:45.350
OK

10:45.350 --> 10:46.350
好

10:46.350 --> 10:47.350
那我们这边

10:47.350 --> 10:48.350
我们来复习一下

10:48.350 --> 10:49.350
和这个二净子相关

10:49.350 --> 10:51.350
一些常见的这个运算

10:51.350 --> 10:53.350
复习一下

10:53.350 --> 10:56.350
和这个二净子

10:56.350 --> 10:59.350
相关的这个运算

10:59.350 --> 11:00.350
好常见的有什么呢

11:00.350 --> 11:02.350
常见的话有这个语

11:02.350 --> 11:03.350
语

11:03.350 --> 11:04.350
用的是一个什么呢

11:04.350 --> 11:06.350
一个and

11:06.350 --> 11:07.350
一个and

11:07.350 --> 11:08.350
语

11:08.350 --> 11:09.350
这个语是什么呢

11:09.350 --> 11:10.350
语的话是

11:10.350 --> 11:12.350
只要有一位数为0

11:12.350 --> 11:13.350
它的结果

11:13.350 --> 11:14.350
什么就是0

11:14.350 --> 11:15.350
对吧

11:15.350 --> 11:20.350
只要有一位数为0

11:20.350 --> 11:22.350
那么最终

11:22.350 --> 11:24.350
结果就是0

11:24.350 --> 11:25.350
也就是说

11:25.350 --> 11:27.350
就是你必须两位

11:27.350 --> 11:30.350
就是两位都是1

11:30.350 --> 11:33.350
也就是说必须

11:33.350 --> 11:36.350
两位都是1

11:36.350 --> 11:39.350
最终结果

11:39.350 --> 11:40.350
才是1

11:40.350 --> 11:41.350
对吧

11:41.350 --> 11:42.350
这是语

11:42.350 --> 11:43.350
好

11:43.350 --> 11:45.350
然后接下来是和

11:45.350 --> 11:46.350
和的话

11:46.350 --> 11:48.350
它这个是一个数线

11:48.350 --> 11:49.350
好

11:49.350 --> 11:50.350
这个是什么呢

11:50.350 --> 11:52.350
这个是只要有一位数

11:52.350 --> 11:54.350
只要有

11:54.350 --> 11:56.350
一位数

11:56.350 --> 11:57.350
是什么呢

11:57.350 --> 11:58.350
是1

11:58.350 --> 12:00.350
那么最终结果

12:00.350 --> 12:02.350
就是1

12:02.350 --> 12:03.350
也就是说你必须什么

12:03.350 --> 12:04.350
是不是必须

12:04.350 --> 12:06.350
这个两个都是0

12:06.350 --> 12:08.350
也就是说

12:08.350 --> 12:11.350
必须两个都是0

12:11.350 --> 12:13.350
最终才是0

12:13.350 --> 12:15.350
它这个其实有点类似于

12:15.350 --> 12:17.350
就是比如你这边语

12:17.350 --> 12:18.350
语的话就有点类似于

12:19.350 --> 12:20.350
对不对

12:20.350 --> 12:21.350
两个都是真

12:21.350 --> 12:22.350
你可以把1看作是真

12:22.350 --> 12:24.350
0看作是假

12:24.350 --> 12:25.350
对不对

12:25.350 --> 12:26.350
两个都是真

12:26.350 --> 12:27.350
最终才是真

12:27.350 --> 12:28.350
只要有一个是假

12:28.350 --> 12:29.350
最终就是假

12:29.350 --> 12:30.350
这边这个货的话

12:30.350 --> 12:32.350
它就和那个逻辑货很像

12:32.350 --> 12:33.350
对不对

12:33.350 --> 12:35.350
你这边只要有一个是1

12:35.350 --> 12:36.350
那就是1

12:36.350 --> 12:37.350
除非什么呢

12:37.350 --> 12:38.350
除非两个都是0

12:38.350 --> 12:39.350
两个都是假

12:39.350 --> 12:40.350
好

12:40.350 --> 12:41.350
然后接下来的话

12:41.350 --> 12:43.350
这边是非

12:43.350 --> 12:44.350
非

12:44.350 --> 12:46.350
非这边的话是一样的

12:46.350 --> 12:48.350
它这边是一个漂

12:48.350 --> 12:49.350
一个漂

12:49.350 --> 12:50.350
这个非

12:50.350 --> 12:51.350
这个非是什么呢

12:51.350 --> 12:53.350
这个非的话是对一个

12:53.350 --> 12:54.350
二净子操作数

12:54.350 --> 12:57.350
这个足位的进行取反操作

12:57.350 --> 12:59.350
对一个

12:59.350 --> 13:01.350
二净子数

13:01.350 --> 13:05.500
对一个二净子数

13:05.500 --> 13:06.500
足位

13:06.500 --> 13:09.190
足位

13:09.190 --> 13:12.500
然后取反

13:12.500 --> 13:14.500
也就是说01互换

13:14.500 --> 13:16.880
也就是

13:16.880 --> 13:19.880
01互换

13:19.880 --> 13:21.880
这个的话也非常好理解

13:21.880 --> 13:22.880
对不对

13:22.880 --> 13:23.880
和那个逻辑飞

13:23.880 --> 13:24.880
也非常相似

13:24.880 --> 13:25.880
逻辑飞的话

13:25.880 --> 13:26.880
什么也是

13:26.880 --> 13:27.880
就是非真即假

13:27.880 --> 13:28.880
非假即真

13:28.880 --> 13:29.880
对不对

13:29.880 --> 13:30.880
它这边的就是

13:30.880 --> 13:31.880
你0就换成1

13:31.880 --> 13:32.880
1就换成0

13:32.880 --> 13:33.880
好

13:33.880 --> 13:34.880
然后还有一个东西

13:34.880 --> 13:35.880
还有一个东西叫做

13:35.880 --> 13:36.880
e货

13:36.880 --> 13:41.450
e是

13:41.450 --> 13:45.080
e统的e

13:45.080 --> 13:46.080
这个

13:46.080 --> 13:48.080
e货

13:48.080 --> 13:49.080
ok

13:49.080 --> 13:50.080
这边对应的

13:50.080 --> 13:51.080
它是一个这个

13:51.080 --> 13:52.080
肩

13:52.080 --> 13:53.080
肩这个符号

13:53.080 --> 13:54.080
这个是什么呢

13:54.080 --> 13:56.080
这个是如果

13:56.080 --> 13:57.080
就是两个

13:57.080 --> 13:59.080
二净之位不相同

13:59.080 --> 14:02.080
如果

14:02.080 --> 14:04.080
两个二净之位

14:04.080 --> 14:06.080
不相同

14:06.080 --> 14:07.080
那么

14:07.080 --> 14:09.080
结果

14:09.080 --> 14:12.080
结果就为e

14:12.080 --> 14:13.080
相同

14:13.080 --> 14:14.080
就为什么呢

14:14.080 --> 14:15.080
就为0

14:15.080 --> 14:16.080
看到没有

14:16.080 --> 14:18.080
这是关于这个e货

14:18.080 --> 14:19.080
好来我们这边

14:19.080 --> 14:20.080
我们来举一下例子

14:20.080 --> 14:22.080
我这边来举点例子

14:22.080 --> 14:23.080
好

14:23.080 --> 14:24.080
例子的话都很简单

14:24.080 --> 14:25.080
我这边我就直接拿过来吧

14:25.080 --> 14:26.080
好吧

14:26.080 --> 14:27.080
把这个例子都拿过来

14:27.080 --> 14:28.080
你大致看一下

14:28.080 --> 14:31.100
好

14:31.100 --> 14:32.100
这里

14:32.100 --> 14:33.100
来我们一个一个来看一下

14:33.100 --> 14:34.100
首先

14:34.100 --> 14:36.100
e and e

14:36.100 --> 14:37.100
e and e的话

14:37.100 --> 14:38.100
这个e

14:38.100 --> 14:39.100
e的话你这边用这个

14:39.100 --> 14:40.100
二净之来表示

14:40.100 --> 14:41.100
前面就全部补0

14:41.100 --> 14:42.100
对不对

14:42.100 --> 14:44.100
00001

14:44.100 --> 14:45.100
00001

14:45.100 --> 14:46.100
and

14:46.100 --> 14:47.100
and是什么

14:47.100 --> 14:48.100
and的话是不是

14:48.100 --> 14:49.100
两位都是e才是e

14:49.100 --> 14:50.100
对不对

14:50.100 --> 14:51.100
所以你这边的e

14:51.100 --> 14:52.100
那最终这边得到e

14:52.100 --> 14:53.100
前面的话都是0

14:53.100 --> 14:54.100
那最终得到0

14:54.100 --> 14:55.100
所以你这边e

14:55.100 --> 14:57.100
and e最终得到了还是什么

14:57.100 --> 14:58.100
还是e

14:58.100 --> 14:59.100
对不对

14:59.100 --> 15:00.100
好

15:00.100 --> 15:01.100
然后这个e

15:01.100 --> 15:03.100
and这个0

15:03.100 --> 15:04.100
and0

15:04.100 --> 15:05.100
这边e和0

15:05.100 --> 15:06.100
你这边e和0的话

15:06.100 --> 15:07.100
因为你是and

15:07.100 --> 15:08.100
and的话说

15:08.100 --> 15:10.100
这边就还是得到0

15:10.100 --> 15:11.100
对不对

15:11.100 --> 15:13.100
所以最终这边得到的是0

15:13.100 --> 15:14.100
好

15:14.100 --> 15:15.100
e货这个0

15:15.100 --> 15:16.100
e货这个0的话

15:16.100 --> 15:18.100
这边是不是就是货

15:18.100 --> 15:19.100
只要有一个是e

15:19.100 --> 15:20.100
所以最终得到就是e

15:20.100 --> 15:21.100
对不对

15:21.100 --> 15:23.100
所以e这边对这个0

15:23.100 --> 15:25.100
人家这边得到什么

15:25.100 --> 15:26.100
是不是得到e

15:26.100 --> 15:27.100
好

15:27.100 --> 15:28.100
其他的话都是0

15:28.100 --> 15:30.100
所以最终得到的是e

15:30.100 --> 15:31.100
看到没有

15:31.100 --> 15:32.100
好

15:32.100 --> 15:33.100
然后接下来这边

15:33.100 --> 15:34.100
e

15:34.100 --> 15:36.100
然后这个e或0

15:36.100 --> 15:37.100
这边e或0

15:37.100 --> 15:38.100
e或0的话

15:38.100 --> 15:39.100
我们这边看一下

15:39.100 --> 15:41.100
e或0是两位不相同

15:41.100 --> 15:43.100
结果是e

15:43.100 --> 15:44.100
那接下来你这边

15:44.100 --> 15:45.100
这边是e

15:45.100 --> 15:46.100
这边是0

15:46.100 --> 15:47.100
那两个不相同

15:47.100 --> 15:48.100
是不是得到e

15:48.100 --> 15:49.100
那其他的话

15:49.100 --> 15:50.100
全部都是相同

15:50.100 --> 15:51.100
相同的话是不是得到0

15:51.100 --> 15:52.100
对不对

15:52.100 --> 15:53.100
这边e

15:53.100 --> 15:54.100
e或0

15:54.100 --> 15:55.100
得到的是e

15:55.100 --> 15:56.100
好

15:56.100 --> 15:57.100
最后这个是3

15:57.100 --> 16:00.100
3的话你对他取这个非

16:00.100 --> 16:01.100
取反操作

16:01.100 --> 16:02.100
最终的话他得到的是

16:02.100 --> 16:03.100
0000

16:03.100 --> 16:05.100
然后0011

16:05.100 --> 16:06.100
这个是

16:06.100 --> 16:08.100
首先是他的这个二镜子

16:08.100 --> 16:10.100
3到二镜子这边是0011

16:10.100 --> 16:11.100
然后接下来这边

16:11.100 --> 16:13.100
这个足位取反

16:13.100 --> 16:14.100
也就说这边的话

16:14.100 --> 16:15.100
0变成e

16:15.100 --> 16:16.100
对吧

16:16.100 --> 16:17.100
0变成e

16:17.100 --> 16:18.100
那叫e变成什么

16:18.100 --> 16:19.100
e变成0

16:19.100 --> 16:20.100
e变成0

16:20.100 --> 16:21.100
最终计算出来的

16:21.100 --> 16:23.100
这个结果是什么呢

16:23.100 --> 16:25.100
是这个富士

16:25.100 --> 16:27.100
但这边他会涉及到一个补码的

16:27.100 --> 16:29.100
一个这个知识

16:29.100 --> 16:31.100
这个就不展开了

16:31.100 --> 16:33.100
这个属于这个计算机基础

16:33.100 --> 16:35.100
这个是这个二镜子

16:35.100 --> 16:36.100
一些常见的

16:36.100 --> 16:38.100
一些常规的这个操作

16:38.100 --> 16:39.100
这个看完之后

16:39.100 --> 16:41.100
然后接下来我们来看一下

16:41.100 --> 16:42.100
就是关于这个位运算

16:42.100 --> 16:44.100
在全线系统里面

16:44.100 --> 16:47.100
实际的应用

16:47.100 --> 16:49.100
接下来

16:49.100 --> 16:51.100
我们来看一下

16:51.100 --> 16:53.100
这个位运算

16:53.100 --> 16:58.100
在全线系统里面的

16:58.100 --> 17:02.100
这个实际运用

17:02.100 --> 17:03.100
好

17:03.100 --> 17:04.100
比如现在的话

17:04.100 --> 17:07.100
我们有这么一个全线关系

17:07.100 --> 17:08.100
把这个表格

17:08.100 --> 17:09.100
我把他过来

17:09.100 --> 17:12.980
这边有个表格

17:12.980 --> 17:13.980
好这边看一下

17:13.980 --> 17:14.980
这边呢

17:14.980 --> 17:16.980
我们现在有这么一个全线关系

17:16.980 --> 17:17.980
这边呢

17:17.980 --> 17:19.980
这个下载打印查看审核

17:19.980 --> 17:21.980
就这么几个编辑创建

17:21.980 --> 17:23.980
这边对应的都是0

17:23.980 --> 17:24.980
然后接下来

17:24.980 --> 17:26.980
如果是0代表什么呢

17:26.980 --> 17:29.980
如果是0代表

17:29.980 --> 17:32.980
没有全线

17:32.980 --> 17:35.980
没有全线

17:35.980 --> 17:38.980
如果是这个1代表什么呢

17:38.980 --> 17:41.980
代表有全线

17:41.980 --> 17:42.980
那举个例子

17:42.980 --> 17:43.980
比如说你这边

17:43.980 --> 17:45.980
0000

17:45.980 --> 17:47.980
然后001

17:47.980 --> 17:48.980
这个代表什么

17:48.980 --> 17:50.980
代表只有创建的全线

17:50.980 --> 17:51.980
对不对

17:51.980 --> 17:56.980
代表只有创建的全线

17:56.980 --> 17:59.980
好比如说你0010

17:59.980 --> 18:01.980
然后0011

18:01.980 --> 18:02.980
这个代表什么

18:02.980 --> 18:04.980
代表有查看

18:04.980 --> 18:06.980
代表有查看

18:06.980 --> 18:07.980
然后还有什么

18:07.980 --> 18:09.980
还有这个编辑

18:09.980 --> 18:11.980
以及

18:11.980 --> 18:15.980
以及创建的这个全线

18:15.980 --> 18:16.980
对不对

18:16.980 --> 18:17.980
你看这边这种

18:17.980 --> 18:18.980
这种卫银算

18:18.980 --> 18:20.980
它就可以非常方便的就是干嘛

18:20.980 --> 18:23.980
是不是几种这种值的这种组合

18:23.980 --> 18:25.980
就像我们刚才这边说讲的一样

18:25.980 --> 18:26.980
对不对

18:26.980 --> 18:27.980
你如果像这样子

18:27.980 --> 18:29.980
以前这种一肥又是判断

18:29.980 --> 18:31.980
它这种的话就是单纯的一对一的关系

18:31.980 --> 18:32.980
用这种卫银算的话

18:32.980 --> 18:35.980
它是不是就可以非常好的就是表达

18:35.980 --> 18:37.980
我几种全线的这种组合

18:37.980 --> 18:38.980
对不对

18:38.980 --> 18:40.980
通过这种方式来表达

18:40.980 --> 18:41.980
OK

18:41.980 --> 18:42.980
那现在的话

18:42.980 --> 18:44.980
我们这边这个全线系统

18:44.980 --> 18:46.980
这边你就可以这样子来设计

18:46.980 --> 18:49.980
好那比如说我要添加一个全线

18:49.980 --> 18:52.980
比如说我要添加全线

18:52.980 --> 18:54.980
添加全线这个怎么做呢

18:54.980 --> 18:55.980
非常简单

18:55.980 --> 18:57.980
你要添加一个全线的时候

18:57.980 --> 18:59.980
你直接用货就可以了

18:59.980 --> 19:04.980
直接使用货运算

19:04.980 --> 19:06.980
货运算即可

19:06.980 --> 19:07.980
比如说现在的话

19:07.980 --> 19:08.980
我们这边比如说

19:08.980 --> 19:10.980
这个有一个这个全线

19:10.980 --> 19:13.980
0000然后0011

19:13.980 --> 19:14.980
它目前是什么

19:14.980 --> 19:17.980
目前的话是有创建和编辑的全线

19:17.980 --> 19:18.980
对不对

19:18.980 --> 19:23.980
目前有创建和编辑的全线

19:23.980 --> 19:25.980
好我们要给它添加一个

19:25.980 --> 19:30.980
我们要给它添加一个什么呢

19:30.980 --> 19:34.300
添加一个查看的全线

19:34.300 --> 19:36.300
查看的全线

19:36.300 --> 19:38.300
那查看的全线是什么

19:38.300 --> 19:40.300
是不是0010

19:40.300 --> 19:42.300
然后后面都是0

19:42.300 --> 19:43.300
对不对

19:43.300 --> 19:44.300
就这一位是1吗

19:44.300 --> 19:45.300
这位是1

19:45.300 --> 19:46.300
好那怎么做呢

19:46.300 --> 19:47.300
很简单

19:47.300 --> 19:49.300
就两个做货运算就可以了

19:49.300 --> 19:51.300
这边就直接这两个

19:51.300 --> 19:53.300
0000

19:53.300 --> 19:55.930
和什么呢

19:55.930 --> 19:56.930
和这个

19:56.930 --> 20:00.690
做货运算

20:00.690 --> 20:02.690
做了货运算之后

20:02.690 --> 20:03.690
你回一下货运算

20:03.690 --> 20:04.690
货运算的话

20:04.690 --> 20:05.690
是不是只要有一个是1

20:05.690 --> 20:06.690
是不是就是1

20:06.690 --> 20:07.690
对不对

20:07.690 --> 20:08.690
所以这边0010

20:08.690 --> 20:10.690
0011

20:10.690 --> 20:12.690
最终的话就得到了什么

20:12.690 --> 20:14.690
这边就是把这个查看

20:14.690 --> 20:16.690
这位变成1了

20:16.690 --> 20:17.690
对不对

20:17.690 --> 20:19.690
编辑和创建这个保值不变

20:19.690 --> 20:20.690
看不看

20:20.690 --> 20:22.690
这就是添加全线

20:22.690 --> 20:23.690
非常方便

20:23.690 --> 20:24.690
好

20:24.690 --> 20:25.690
然后接下来的话

20:25.690 --> 20:30.280
比如说这个三处全线

20:30.280 --> 20:32.280
三处全线

20:32.280 --> 20:33.280
三处全线的话

20:33.280 --> 20:34.280
然后加这个怎么做呢

20:34.280 --> 20:36.280
这个的话就是

20:36.280 --> 20:38.280
你可以用这个异货

20:38.280 --> 20:42.980
可以使用异货

20:42.980 --> 20:44.980
异货

20:44.980 --> 20:45.980
可以使用这个

20:45.980 --> 20:47.980
同样我们这边取立

20:47.980 --> 20:48.980
就目前的话

20:48.980 --> 20:49.980
它是什么呢

20:49.980 --> 20:50.980
目前的话

20:50.980 --> 20:52.980
然后0011

20:52.980 --> 20:53.980
它目前是什么

20:53.980 --> 20:55.980
目前有这个查看

20:55.980 --> 21:00.980
然后编辑和这个创建

21:00.980 --> 21:01.980
对不对

21:01.980 --> 21:02.980
好

21:02.980 --> 21:03.980
然后接下来我们比如说

21:03.980 --> 21:04.980
我们要取消什么呢

21:04.980 --> 21:07.980
取消它这个编辑的全线

21:07.980 --> 21:10.980
取消它这个编辑

21:10.980 --> 21:14.670
编辑的全线

21:14.670 --> 21:16.670
那编辑的全线是什么

21:16.670 --> 21:18.670
是不是0000

21:18.670 --> 21:19.670
然后00

21:19.670 --> 21:20.670
然后10

21:20.670 --> 21:22.670
就这一位是1

21:22.670 --> 21:23.670
这位是1

21:23.670 --> 21:24.670
对不对

21:24.670 --> 21:25.670
然后接下来怎么做呢

21:25.670 --> 21:27.670
两个做异货就可以了

21:27.670 --> 21:31.180
我们这边

21:31.180 --> 21:33.180
这个是原来的全线

21:33.180 --> 21:35.180
然后这个是你要做取消的全线

21:35.180 --> 21:36.180
对吧

21:36.180 --> 21:39.180
这边异货是什么

21:39.180 --> 21:41.180
来回顾一下异货

21:41.180 --> 21:44.180
异货的话这边是什么

21:44.180 --> 21:46.180
是不相同是1

21:46.180 --> 21:48.180
相同是不是就是0

21:48.180 --> 21:49.180
对不对

21:49.180 --> 21:51.180
比如说你看这边

21:51.180 --> 21:53.180
这边1和1是不是相同

21:53.180 --> 21:55.180
相同的话这位是不是变成0了

21:55.180 --> 21:56.180
对不对

21:56.180 --> 21:58.180
这边是00

21:58.180 --> 22:00.180
这边1和0不相同

22:00.180 --> 22:01.180
所以是1

22:01.180 --> 22:02.180
然后00

22:02.180 --> 22:04.180
然后再这边变成0

22:04.180 --> 22:05.180
然后1

22:05.180 --> 22:06.180
是不是就搞定了

22:06.180 --> 22:08.180
所以就把这个编辑的这个全线

22:08.180 --> 22:09.180
就该取消了

22:09.180 --> 22:10.180
对不对

22:10.180 --> 22:11.180
好

22:11.180 --> 22:12.180
然后我们这边还可以干嘛呢

22:12.180 --> 22:14.180
我们还可以判断

22:14.180 --> 22:17.180
判断它是否有某一个这个全线

22:17.180 --> 22:21.020
判断

22:21.020 --> 22:23.020
是否有

22:23.020 --> 22:25.020
某一个全线

22:25.020 --> 22:27.020
这个是不是也是经常需要做的一个操作

22:27.020 --> 22:28.020
对不对

22:28.020 --> 22:30.020
你究竟比如说你现在要编辑

22:30.020 --> 22:33.020
你究竟有没有这个编辑的这个全线

22:33.020 --> 22:35.020
有没有编辑的全线

22:35.020 --> 22:36.020
那这边的话

22:36.020 --> 22:37.020
我们就可以使用什么呢

22:37.020 --> 22:39.020
我们就可以使用语

22:39.020 --> 22:43.020
可以使用这个语

22:43.020 --> 22:46.020
来这个进行判断

22:46.020 --> 22:48.020
好比如说我们举个例子

22:48.020 --> 22:50.020
那仍然是这个00

22:50.020 --> 22:51.020
比如说11

22:51.020 --> 22:52.020
然后11

22:52.020 --> 22:53.020
它现在这个是什么

22:53.020 --> 22:55.020
这个是查看

22:55.020 --> 22:58.020
然后这个审核

22:58.020 --> 22:59.020
查看审核

22:59.020 --> 23:00.020
然后详细删除

23:00.020 --> 23:01.020
对吧

23:01.020 --> 23:03.020
查看审核

23:03.020 --> 23:05.020
详细

23:05.020 --> 23:06.020
详细

23:06.020 --> 23:08.020
然后删除

23:08.020 --> 23:10.020
然后接下来我们这边做什么呢

23:10.020 --> 23:11.020
我们接下来的话

23:11.020 --> 23:12.020
我们来判断

23:12.020 --> 23:14.020
是否有

23:14.020 --> 23:16.020
查看全线

23:16.020 --> 23:17.020
查看全线

23:17.020 --> 23:18.020
然后再判断

23:18.020 --> 23:20.020
再判断

23:20.020 --> 23:22.020
是否有有创建全线

23:22.020 --> 23:24.340
ok

23:24.340 --> 23:25.340
那我们这边可以看到

23:25.340 --> 23:26.340
查看的话是不是有的

23:26.340 --> 23:28.340
那创建的话是不是没有

23:28.340 --> 23:29.340
对不对

23:29.340 --> 23:31.340
好那接下来我们这边这个查看

23:31.340 --> 23:33.340
查看对应的是什么

23:33.340 --> 23:35.340
查看是0010

23:35.340 --> 23:37.340
0010

23:37.340 --> 23:39.340
然后0000

23:39.340 --> 23:40.340
对不对

23:40.340 --> 23:41.340
然后这个创建

23:41.340 --> 23:42.340
创建是什么

23:42.340 --> 23:43.340
创建是

23:43.340 --> 23:44.340
最后一个是11

23:44.340 --> 23:45.340
这边就是0000

23:45.340 --> 23:47.340
然后001

23:47.340 --> 23:48.340
对不对

23:48.340 --> 23:49.340
好你接下来

23:49.340 --> 23:50.340
你这边你要判断

23:50.340 --> 23:51.340
是否有这个全线

23:51.340 --> 23:52.340
这两个全线

23:52.340 --> 23:53.340
直接做什么呢

23:53.340 --> 23:55.340
直接做这个

23:55.340 --> 23:56.340
这个鱼

23:56.340 --> 23:57.340
直接做这个鱼

23:57.340 --> 23:59.340
这个操作就可以了

23:59.340 --> 24:01.340
好我们这边来过来

24:01.340 --> 24:02.340
首先我们来判断

24:02.340 --> 24:03.340
他是否有这个

24:03.340 --> 24:07.100
查看这个全线

24:07.100 --> 24:08.100
ok

24:08.100 --> 24:09.100
这边

24:09.100 --> 24:10.100
这边的话

24:10.100 --> 24:11.100
然后鱼

24:11.100 --> 24:13.100
鱼的话是什么

24:13.100 --> 24:14.100
鱼的话是什么

24:14.100 --> 24:16.100
来回忆一下

24:16.100 --> 24:17.100
到哪去了

24:17.100 --> 24:18.100
这边鱼

24:18.100 --> 24:20.100
是不是必须两个都是1

24:20.100 --> 24:21.100
结果才是1

24:21.100 --> 24:22.100
对不对

24:22.100 --> 24:23.100
那接下来两个必须都是1

24:23.100 --> 24:24.100
那这边

24:24.100 --> 24:25.100
这个肯定是零的

24:25.100 --> 24:26.100
这个是零的

24:26.100 --> 24:27.100
两个都是1

24:27.100 --> 24:28.100
这边是不是1

24:28.100 --> 24:29.100
对不对

24:29.100 --> 24:30.100
然后接下来这边是零

24:30.100 --> 24:33.100
这边是0000

24:33.100 --> 24:34.100
ok

24:34.100 --> 24:35.100
那最终的话你看

24:35.100 --> 24:36.100
你这边在查看

24:36.100 --> 24:37.100
这个是否有查看

24:37.100 --> 24:38.100
这个全线的时候

24:38.100 --> 24:40.100
你这边做这个鱼运算

24:40.100 --> 24:41.100
最终他返回的是什么

24:41.100 --> 24:42.100
返回的时候

24:42.100 --> 24:44.100
这个查看是不是一模一样的

24:44.100 --> 24:45.100
对不对

24:45.100 --> 24:46.100
一模一样的

24:46.100 --> 24:47.100
那说明什么呢

24:47.100 --> 24:48.100
说明有这个

24:48.100 --> 24:49.100
有这个查看全线

24:50.100 --> 24:51.100
这边

24:51.100 --> 24:54.860
查看

24:54.860 --> 24:56.860
查看是否有

24:56.860 --> 24:58.860
就判断

24:58.860 --> 25:00.860
判断是否有

25:00.860 --> 25:02.860
这个查看

25:02.860 --> 25:04.860
全线

25:04.860 --> 25:06.860
然后作语操作师

25:06.860 --> 25:08.860
作语操作师

25:08.860 --> 25:10.860
得到了

25:10.860 --> 25:12.860
这个查看

25:12.860 --> 25:15.860
查看全线值

25:15.860 --> 25:16.860
本身

25:16.860 --> 25:19.300
说明什么呢

25:19.300 --> 25:22.670
说明有这个全线

25:22.670 --> 25:23.670
ok

25:23.670 --> 25:24.670
说明有这个全线

25:24.670 --> 25:28.180
好比如说我们这边再来看

25:28.180 --> 25:29.180
不要这边

25:29.180 --> 25:30.180
这个全线

25:30.180 --> 25:31.180
好接下来

25:31.180 --> 25:32.180
我要看什么呢

25:32.180 --> 25:34.180
来看是否有创建这个全线

25:36.180 --> 25:38.180
这边是否有这个创建

25:38.180 --> 25:40.180
那这边的话得到了都是什么

25:40.180 --> 25:42.180
这边是不是得到了都是零

25:42.180 --> 25:44.180
你仔细看一下

25:44.180 --> 25:45.180
是不是都应该是零

25:45.180 --> 25:46.180
对不对

25:46.180 --> 25:47.180
因此的话

25:47.180 --> 25:48.180
这边

25:48.180 --> 25:51.180
最终得到的值

25:51.180 --> 25:52.180
为0

25:52.180 --> 25:53.180
说明什么呢

25:53.180 --> 25:58.180
说明没有此全线

25:58.180 --> 25:59.180
ok

25:59.180 --> 26:00.180
没有此全线

26:00.180 --> 26:01.180
那你看

26:01.180 --> 26:02.180
通过这么一个例子

26:02.180 --> 26:03.180
你会发现

26:03.180 --> 26:04.180
这个使用这个二性子

26:04.180 --> 26:06.180
来进行这个操作

26:06.180 --> 26:07.180
使用这种卫命算

26:07.180 --> 26:08.180
来进行操作

26:08.180 --> 26:09.180
是不是确确实实

26:09.180 --> 26:11.180
非常方便

26:11.180 --> 26:12.180
对不对

26:12.180 --> 26:13.180
通过

26:13.180 --> 26:15.180
上面的例子

26:15.180 --> 26:17.180
我们会发现

26:17.180 --> 26:19.180
使用卫命算

26:19.180 --> 26:21.180
确确实实

26:21.180 --> 26:24.740
是非常的方便

26:24.740 --> 26:25.740
对不对

26:25.740 --> 26:26.740
无论是增加也好

26:26.740 --> 26:28.740
还是删除也好

26:28.740 --> 26:29.740
还是这边判断

26:29.740 --> 26:30.740
是否有也好

26:30.740 --> 26:31.740
确实比较方便

26:31.740 --> 26:33.740
速度也很快

26:33.740 --> 26:34.740
说说

26:34.740 --> 26:35.740
这就是为什么

26:35.740 --> 26:36.740
很多操作系统

26:36.740 --> 26:38.740
包括后台管理全线系统

26:38.740 --> 26:39.740
以及一些就是

26:39.740 --> 26:41.740
非常有名的一些项目里面

26:41.740 --> 26:44.740
它都会用到卫命算

26:44.740 --> 26:45.740
ok

26:45.740 --> 26:47.740
那么接下来

26:47.740 --> 26:48.740
接下来

26:48.740 --> 26:50.740
我们就来看一下

26:50.740 --> 26:52.740
react中

26:52.740 --> 26:54.740
针对这个

26:54.740 --> 26:56.740
卫命算的使用

26:56.740 --> 26:58.740
卫命算的使用

26:58.740 --> 26:59.740
ok

26:59.740 --> 27:01.740
好我们来到这边

27:01.740 --> 27:02.740
react里面

27:02.740 --> 27:04.740
react里面在哪些地方用了

27:04.740 --> 27:06.740
这个卫命算呢

27:06.740 --> 27:08.740
其实主要在这么三个地方

27:08.740 --> 27:09.740
这三个地方呢

27:09.740 --> 27:13.180
首先第一个的话是fiber

27:13.180 --> 27:16.180
fiber的flex

27:16.180 --> 27:18.180
第二个是什么呢

27:18.180 --> 27:20.180
第二个是内模型

27:20.180 --> 27:21.180
第三个是

27:21.180 --> 27:23.180
上下温

27:23.180 --> 27:24.180
ok

27:24.180 --> 27:25.180
好来我们这边

27:25.180 --> 27:27.940
我们一个一个来看

27:27.940 --> 27:30.940
首先这边fiberflex

27:30.940 --> 27:33.940
然后内模型

27:33.940 --> 27:36.940
然后上下温

27:36.940 --> 27:38.940
我们一个一个来看

27:38.940 --> 27:41.940
首先是关于fiber的flex

27:41.940 --> 27:42.940
fiber的话

27:42.940 --> 27:43.940
我们之前在

27:43.940 --> 27:45.940
之前我们已经讲了很多次了

27:45.940 --> 27:46.940
对不对

27:46.940 --> 27:48.940
它就是一个对象

27:48.940 --> 27:50.940
新的这种fiber架构里面

27:50.940 --> 27:51.940
如果fiber这个对象

27:51.940 --> 27:54.940
去描述这个dorm

27:54.940 --> 27:56.940
就是它的这个层次关系

27:56.940 --> 27:57.940
好那这个fiber

27:57.940 --> 27:58.940
那我们这边的话

27:58.940 --> 27:59.940
针对fiber

27:59.940 --> 28:01.940
我们是有具体操作的

28:01.940 --> 28:02.940
就是你针对这个fiber

28:02.940 --> 28:03.940
你究竟是要删除

28:03.940 --> 28:04.940
还是要增加

28:04.940 --> 28:06.940
还是要干嘛

28:06.940 --> 28:07.940
那在react里面

28:07.940 --> 28:08.940
它会采用什么呢

28:08.940 --> 28:09.940
它不是说你比如说

28:09.940 --> 28:11.940
要删除一个这个节点

28:11.940 --> 28:13.940
那接下来就直接这个fiber

28:13.940 --> 28:14.940
直接把它删除了

28:14.940 --> 28:15.940
不是

28:15.940 --> 28:18.940
它是会先做一个标记

28:18.940 --> 28:19.940
先做一个标记

28:19.940 --> 28:21.940
这个标记就是flex

28:21.940 --> 28:22.940
OK

28:22.940 --> 28:23.940
做了标记之后

28:23.940 --> 28:24.940
然后回头的话

28:24.940 --> 28:26.940
再统一进行删除

28:26.940 --> 28:32.320
在react中

28:32.320 --> 28:39.320
用来标记fiber操作的flex

28:39.320 --> 28:41.320
使用的就是什么呢

28:41.320 --> 28:44.700
就是二净子

28:44.700 --> 28:45.700
二净子

28:45.700 --> 28:46.700
OK

28:46.700 --> 28:47.700
这边让我把这个

28:47.700 --> 28:48.700
这个是圆码里面

28:48.700 --> 28:49.700
解决出来了

28:49.700 --> 28:52.700
往这边直接把它拿过来

28:52.700 --> 28:54.700
这边大家可以看一下

28:54.700 --> 28:55.700
在这边

28:55.700 --> 28:57.700
no flex

28:57.700 --> 28:59.700
performed work

28:59.700 --> 29:00.700
这边是1

29:00.700 --> 29:01.700
对不对

29:01.700 --> 29:02.700
placement

29:02.700 --> 29:04.700
这边是2

29:04.700 --> 29:05.700
OK

29:05.700 --> 29:07.700
在这边有一个did capture

29:07.700 --> 29:08.700
大家还有这个

29:08.700 --> 29:09.700
Hydrating

29:09.700 --> 29:10.700
这些

29:10.700 --> 29:11.700
这边是不是就是二净子

29:11.700 --> 29:12.700
对不对

29:12.700 --> 29:13.700
这些flag用来干嘛的

29:13.700 --> 29:19.710
它就是用来标记fiber状态的

29:19.710 --> 29:24.540
这些flex

29:24.540 --> 29:33.540
flex就是用来标记fiber状态的

29:33.540 --> 29:34.540
OK

29:34.540 --> 29:37.540
为什么要专门抽离fiber的状态呢

29:37.540 --> 29:40.540
因为你这种操作是非常高效的

29:40.540 --> 29:41.540
知道吧

29:41.540 --> 29:44.540
之所以

29:44.540 --> 29:49.540
要专门抽离fiber的状态

29:49.540 --> 29:53.540
是因为这种操作

29:53.540 --> 29:58.540
这种操作是非常高效的

29:58.540 --> 30:01.540
高效

30:01.540 --> 30:02.540
OK

30:02.540 --> 30:03.540
比如举个例子

30:03.540 --> 30:05.540
比如说你一群小朋友

30:05.540 --> 30:06.540
在沙滩

30:06.540 --> 30:08.540
在沙滩上去挖保障

30:08.540 --> 30:09.540
好

30:09.540 --> 30:10.540
那这个时候的话

30:10.540 --> 30:11.540
你可以干嘛呢

30:11.540 --> 30:14.540
可以把这群小朋友分成两组

30:14.540 --> 30:16.540
一组专门什么呢

30:16.540 --> 30:18.540
专门负责探索保障

30:18.540 --> 30:19.540
比如说发现保障了

30:19.540 --> 30:20.540
发现保障了之后

30:20.540 --> 30:21.540
我不是直接开挖

30:21.540 --> 30:22.540
而是做一个什么呢

30:22.540 --> 30:24.540
做一个标记

30:24.540 --> 30:25.540
对不对

30:25.540 --> 30:27.540
另外一组小朋友的话

30:27.540 --> 30:28.540
就专门负责去

30:28.540 --> 30:29.540
就是你有标记对吧

30:29.540 --> 30:31.540
我专门到有标记的地方

30:31.540 --> 30:32.540
去挖这个保障

30:32.540 --> 30:33.540
这个流程

30:33.540 --> 30:36.540
实际上是最高效的

30:36.540 --> 30:38.540
而不是说我发现一个挖一个

30:38.540 --> 30:40.540
一组的话

30:40.540 --> 30:41.540
专门去探索

30:41.540 --> 30:42.540
另外一组

30:42.540 --> 30:45.540
专门就是根据你探索出来的标记去挖

30:45.540 --> 30:47.540
把不同的这种任务

30:47.540 --> 30:50.540
分给不同的小朋友

30:50.540 --> 30:51.540
对不对

30:51.540 --> 30:52.540
各进其职

30:52.540 --> 30:55.540
这是一种非常高效的做法

30:55.540 --> 30:59.300
因此的话

30:59.300 --> 31:01.300
这里针对fiber节点

31:01.300 --> 31:02.300
打flag

31:02.300 --> 31:05.300
基本上也是同样的道理

31:05.300 --> 31:07.300
就针对

31:07.300 --> 31:11.300
针对一个fiber的操作

31:11.300 --> 31:12.300
对吧

31:12.300 --> 31:13.300
有什么呢

31:13.300 --> 31:15.300
可能有增加

31:15.300 --> 31:17.300
可能有删除

31:17.300 --> 31:19.300
可能有修改

31:19.300 --> 31:20.300
但是呢

31:20.300 --> 31:23.300
但是我不直接

31:23.300 --> 31:25.300
进行这个操作

31:25.300 --> 31:26.300
而是什么呢

31:26.300 --> 31:29.300
而是给这个fiber

31:29.300 --> 31:31.300
给这个fiber

31:31.300 --> 31:34.300
打上一个flag

31:34.300 --> 31:35.300
ok

31:35.300 --> 31:37.300
然后接下来

31:37.300 --> 31:38.300
接下来

31:38.300 --> 31:41.300
在后面的这个流程中

31:41.300 --> 31:44.300
流程中针对什么呢

31:44.300 --> 31:46.300
针对有flag

31:46.300 --> 31:49.300
有flag的这个fiber

31:49.300 --> 31:52.300
所以统一进行操作

31:52.300 --> 31:54.300
统一进行操作

31:54.300 --> 31:55.300
对不对

31:55.300 --> 31:57.300
主要是这个目的

31:57.300 --> 31:58.300
那你这边的话

31:58.300 --> 32:00.300
通过这种二镜子慰名算

32:00.300 --> 32:01.300
那你这边呢

32:01.300 --> 32:03.300
就可以非常方便的解决

32:03.300 --> 32:04.300
就是一个fiber节点

32:04.300 --> 32:08.300
它有多个flag标记的这种问题

32:08.300 --> 32:11.300
通过慰名算

32:11.300 --> 32:13.300
慰名算

32:13.300 --> 32:17.300
就可以很好的解决

32:17.300 --> 32:18.300
解决什么呢

32:18.300 --> 32:20.300
解决一个fiber

32:20.300 --> 32:24.300
一个fiber有多个flag

32:24.300 --> 32:27.300
flag标记的这个问题

32:27.300 --> 32:28.300
ok

32:28.300 --> 32:29.300
方便什么呢

32:29.300 --> 32:31.300
方便合并

32:31.300 --> 32:33.300
合并多个状态

32:33.300 --> 32:35.300
比如说这边举个例子

32:35.300 --> 32:38.300
我把这个这个代码直接把拿过来

32:38.300 --> 32:40.300
这个代码也不多

32:40.300 --> 32:41.300
就一点点

32:41.300 --> 32:43.610
大家可以看一下

32:43.610 --> 32:44.610
标这里

32:44.610 --> 32:46.610
这里的话你看我这边

32:46.610 --> 32:48.610
初始化了一些这个状态

32:48.610 --> 32:49.610
flags

32:49.610 --> 32:50.610
对初始化了

32:50.610 --> 32:52.610
好人家这边nate这个flag

32:52.610 --> 32:54.610
等于个这个noflags

32:54.610 --> 32:55.610
就一开始的话

32:55.610 --> 32:56.610
它是没有状态的

32:56.610 --> 32:58.610
好然后既然你这边可以通过什么

32:58.610 --> 33:00.610
是不可以通过这个慰名算

33:00.610 --> 33:01.610
回头你就可以干嘛

33:01.610 --> 33:03.610
是不是去合并多个状态

33:03.610 --> 33:04.610
对不对

33:04.610 --> 33:06.610
比如说这边perform the work

33:06.610 --> 33:07.610
update

33:07.610 --> 33:10.610
是不是可以去这个做合并

33:10.610 --> 33:11.610
对不对

33:11.610 --> 33:13.610
我们之前讲那个

33:13.610 --> 33:14.610
增加的时候

33:14.610 --> 33:16.610
是不是就是通过这个货

33:16.610 --> 33:17.610
对不对

33:17.610 --> 33:19.610
使用这个货去添加

33:19.610 --> 33:20.610
添加完了之后

33:20.610 --> 33:21.610
人家你要判断

33:21.610 --> 33:22.610
判断了你就通过什么

33:22.610 --> 33:23.610
是不是通过and

33:23.610 --> 33:24.610
对不对

33:24.610 --> 33:26.610
通过and去判断

33:26.610 --> 33:27.610
判断出来

33:27.610 --> 33:28.610
因为它如果没有

33:28.610 --> 33:29.610
没有它就是0

33:29.610 --> 33:31.610
这我们之前是不是说过

33:31.610 --> 33:32.610
这边如果你没有

33:32.610 --> 33:33.610
没有的话是0

33:33.610 --> 33:34.610
有有的话

33:34.610 --> 33:35.610
它是不是

33:35.610 --> 33:37.610
就是得到你这个权限值本身

33:37.610 --> 33:38.610
对不对

33:38.610 --> 33:39.610
判断是否有查看

33:39.610 --> 33:40.610
那最终的话

33:40.610 --> 33:44.610
得到了就是查看的权限值的本身

33:44.610 --> 33:46.610
这边我就可以通过这种方式

33:46.610 --> 33:48.610
来进行判断

33:48.610 --> 33:49.610
是非常方便

33:49.610 --> 33:50.610
对不对

33:50.610 --> 33:54.610
这是关于首先flex

33:54.610 --> 33:55.610
好

33:55.610 --> 33:56.610
第二个地方

33:56.610 --> 33:58.610
第二个地方是在哪里呢

33:58.610 --> 33:59.610
第二个地方的话

33:59.610 --> 34:01.610
是在内模型

34:01.610 --> 34:02.610
这个的话

34:02.610 --> 34:03.610
可能是大家第一次

34:03.610 --> 34:04.610
听到这个词

34:04.610 --> 34:05.610
内模型

34:05.610 --> 34:06.610
我们后面的话

34:06.610 --> 34:08.610
会专门拿一节课来讲

34:08.610 --> 34:09.610
内模型

34:09.610 --> 34:10.610
它是什么呢

34:10.610 --> 34:11.610
它也是一套

34:11.610 --> 34:13.610
这个优先级的这个机制

34:13.610 --> 34:19.010
内模型

34:19.010 --> 34:22.010
内模型

34:22.010 --> 34:25.010
内模型也是一套

34:25.010 --> 34:26.010
什么呢

34:26.010 --> 34:27.010
优先级

34:27.010 --> 34:30.010
优先级机制

34:30.010 --> 34:31.010
那有同学会说

34:31.010 --> 34:32.010
你那个scheduler

34:32.010 --> 34:33.010
不就已经是在

34:33.010 --> 34:36.010
派发这个任务的优先级吗

34:36.010 --> 34:37.010
这边的话

34:37.010 --> 34:38.010
这个内模型的话

34:38.010 --> 34:39.010
它的力度

34:39.010 --> 34:40.010
相比这个scheduler

34:40.010 --> 34:42.010
它会更细一些

34:42.010 --> 34:43.010
而且它这个内模型的话

34:43.010 --> 34:45.010
它是和react

34:45.010 --> 34:46.010
深度绑定的

34:46.010 --> 34:47.010
也就是它是在

34:47.010 --> 34:49.010
属于react的东西

34:49.010 --> 34:50.010
它不像scheduler

34:50.010 --> 34:51.010
scheduler的话

34:51.010 --> 34:52.010
我们说过scheduler的话

34:52.010 --> 34:54.010
后期react团队

34:54.010 --> 34:56.010
它是打算把scheduler

34:56.010 --> 34:59.010
这个包独立发布出去

34:59.010 --> 35:00.010
对不对

35:00.010 --> 35:01.010
所以scheduler这个包

35:01.010 --> 35:02.010
它一定要独立

35:02.010 --> 35:03.010
一定要独立

35:03.010 --> 35:04.010
一定要通用

35:04.010 --> 35:05.010
而这个内模型的话

35:05.010 --> 35:08.010
它就是属于react里面的

35:08.010 --> 35:09.010
OK

35:09.010 --> 35:11.010
它相比scheduler

35:11.010 --> 35:14.010
它的力度会更细一些

35:14.010 --> 35:17.010
相比scheduler

35:17.010 --> 35:19.010
这种内模型

35:19.010 --> 35:21.010
内模型

35:21.010 --> 35:24.010
能够对这个任务

35:24.010 --> 35:27.010
进行更细力度

35:27.010 --> 35:30.010
细力度的这个控制

35:30.010 --> 35:31.010
OK

35:31.010 --> 35:32.010
好

35:32.010 --> 35:33.010
来我们这边

35:33.010 --> 35:34.010
让我们来看一下

35:34.010 --> 35:35.010
内模型

35:35.010 --> 35:37.010
这边仍然是从圆码里面

35:37.010 --> 35:40.010
拿出来的

35:40.010 --> 35:42.010
你看这边

35:42.010 --> 35:43.010
noness

35:43.010 --> 35:44.010
你看这边对应了

35:44.010 --> 35:45.010
是不是也是二镜子

35:45.010 --> 35:46.010
对不对

35:46.010 --> 35:47.010
synchronite

35:47.010 --> 35:49.010
然后还有input

35:49.010 --> 35:50.010
contentious

35:50.010 --> 35:51.010
然后这个是什么

35:51.010 --> 35:53.010
hidration net

35:53.010 --> 35:54.010
对不对

35:54.010 --> 35:55.010
我这边解决了一部分

35:55.010 --> 35:56.010
你可以看到这边

35:56.010 --> 35:57.010
它也是什么呢

35:57.010 --> 35:58.010
也是这个二镜子

35:58.010 --> 35:59.010
好

35:59.010 --> 36:00.010
那接下来

36:00.010 --> 36:01.010
我们这边

36:01.010 --> 36:02.010
我们可以看一下

36:02.010 --> 36:03.010
比如说在react圆码里面

36:03.010 --> 36:05.010
我们举个例子

36:05.010 --> 36:07.010
例如

36:07.010 --> 36:11.010
例如在react圆码中

36:11.010 --> 36:15.730
有一段如下的代码

36:15.730 --> 36:20.420
如下的代码

36:20.420 --> 36:21.420
这代码就什么呢

36:21.420 --> 36:23.420
这代码就这样子的

36:23.420 --> 36:27.020
OK

36:27.020 --> 36:28.020
你看它这边

36:28.020 --> 36:30.020
这边会有一个ness

36:30.020 --> 36:31.020
有个ness

36:31.020 --> 36:32.020
ness

36:32.020 --> 36:33.020
然后接下来

36:33.020 --> 36:34.020
这边有一个

36:34.020 --> 36:36.020
get highest priority net

36:36.020 --> 36:37.020
这个是什么呢

36:37.020 --> 36:39.020
这个是分离出

36:39.020 --> 36:40.020
优先级

36:40.020 --> 36:42.020
这个最高的这个net

36:42.020 --> 36:43.020
首先这个ness是什么

36:43.020 --> 36:44.020
ness呢

36:44.020 --> 36:46.020
它是一套优先级的这个组合

36:46.020 --> 36:47.020
OK

36:47.020 --> 36:48.020
它是一套net的这个组合

36:48.020 --> 36:50.020
就好比我们刚才这个

36:50.020 --> 36:51.020
刚才这种一样

36:51.020 --> 36:52.020
对不对

36:52.020 --> 36:54.020
就组合了这个多个权限

36:54.020 --> 36:55.020
组合多个权限

36:55.020 --> 36:56.020
好

36:56.020 --> 36:57.020
然后它这边呢

36:57.020 --> 36:58.020
是一套优先级的这个组合

36:58.020 --> 36:59.020
好

36:59.020 --> 37:00.020
然后既然它这边呢

37:00.020 --> 37:01.020
会有一个这个方法

37:01.020 --> 37:03.020
叫做get highest priority net

37:03.020 --> 37:05.020
它会从这一套组合里面

37:05.020 --> 37:07.020
去分离出优先级

37:07.020 --> 37:09.020
最高的这个net

37:09.020 --> 37:10.020
然后接下来这边在做什么呢

37:10.020 --> 37:12.020
在做这个不同的这个事情

37:12.020 --> 37:15.020
那这边的话它这里

37:15.020 --> 37:17.020
这里它是如何进行这个分离的呢

37:17.020 --> 37:18.020
我们来看一下

37:18.020 --> 37:19.020
好

37:19.020 --> 37:20.020
首先的话

37:20.020 --> 37:22.020
这边这个net

37:22.020 --> 37:24.020
这个在

37:24.020 --> 37:27.020
表示优先级的时候

37:27.020 --> 37:29.020
大致是这样子的

37:29.020 --> 37:32.020
大致是这样的

37:32.020 --> 37:33.020
什么样子呢

37:33.020 --> 37:35.020
比如说0000

37:35.020 --> 37:37.020
然后0000

37:37.020 --> 37:38.020
好

37:38.020 --> 37:39.020
比如说这边

37:39.020 --> 37:41.020
0000

37:41.020 --> 37:43.020
0010

37:43.020 --> 37:44.020
对吧

37:44.020 --> 37:45.020
比如说这边

37:45.020 --> 37:47.020
0010

37:47.020 --> 37:48.020
然后0000

37:48.020 --> 37:49.020
这个就是一个一个的net

37:49.020 --> 37:50.020
那接下来的话

37:50.020 --> 37:51.020
我这边的话

37:51.020 --> 37:53.020
我就是nance

37:53.020 --> 37:55.020
nance

37:55.020 --> 37:56.020
表示什么呢

37:56.020 --> 37:58.020
表示这个一套

37:58.020 --> 38:01.020
net的组合

38:01.020 --> 38:03.020
net的组合

38:03.020 --> 38:05.020
那比如说我针对上面的

38:05.020 --> 38:07.020
三个net

38:07.020 --> 38:09.020
我这边组合在一起

38:09.020 --> 38:10.020
比如

38:10.020 --> 38:12.020
上面的

38:12.020 --> 38:14.020
三个net

38:14.020 --> 38:17.020
组合到一起

38:17.020 --> 38:19.020
它就变成了一个nance

38:19.020 --> 38:23.020
就变成了一个nance

38:23.020 --> 38:24.020
加了个s

38:24.020 --> 38:25.020
它对的值是什么

38:25.020 --> 38:27.020
0010

38:27.020 --> 38:29.020
然后0011

38:29.020 --> 38:30.020
对不对

38:30.020 --> 38:31.020
好

38:31.020 --> 38:32.020
然后接下来它这边

38:32.020 --> 38:34.020
通过这个函数

38:34.020 --> 38:35.020
这个

38:35.020 --> 38:36.020
这个的话它需要干嘛呢

38:36.020 --> 38:38.020
它需要分离出

38:38.020 --> 38:40.020
这个方法

38:40.020 --> 38:42.020
这个方法

38:42.020 --> 38:45.020
要做的事情

38:45.020 --> 38:48.020
就是分离出

38:48.020 --> 38:51.020
分离出这个优先级最高的

38:51.020 --> 38:55.020
优先级最高的

38:55.020 --> 38:56.020
也就是说你这边的话

38:56.020 --> 39:00.020
你这个0010这个nance

39:00.020 --> 39:01.020
这个

39:01.020 --> 39:02.020
这个的话

39:02.020 --> 39:03.020
接下来把这个

39:03.020 --> 39:05.020
把它传入到

39:05.020 --> 39:06.020
这个方法里面

39:06.020 --> 39:08.020
它就会给你返回什么呢

39:08.020 --> 39:10.020
它就会给你返回这个优先级最高的

39:10.020 --> 39:11.020
就是什么呢

39:11.020 --> 39:12.020
这个0000

39:12.020 --> 39:14.020
0011

39:14.020 --> 39:15.020
假设这个最右边

39:15.020 --> 39:16.020
它这个优先级最右侧

39:16.020 --> 39:18.020
越靠越靠右的

39:18.020 --> 39:20.020
优先级就越高

39:20.020 --> 39:22.020
它这边的话就给你分离出来

39:22.020 --> 39:23.020
OK

39:23.020 --> 39:24.020
那我们这边

39:24.020 --> 39:25.020
我们看一下这个函数是怎么写的

39:25.020 --> 39:26.020
这个函数是这样写的

39:26.020 --> 39:28.020
相当的简单

39:30.020 --> 39:31.020
相当的简单

39:31.020 --> 39:32.020
这个函数

39:32.020 --> 39:34.020
这边接受一个nance

39:34.020 --> 39:35.020
返回什么呢

39:35.020 --> 39:38.020
返回nance and fullnance

39:38.020 --> 39:39.020
你看

39:39.020 --> 39:41.020
你可以去自己去体会一下

39:41.020 --> 39:43.020
这个威明算你要是玩好了的话

39:43.020 --> 39:45.020
你会发现这边真的是

39:45.020 --> 39:46.020
速度又快

39:46.020 --> 39:48.020
又方便

39:48.020 --> 39:49.020
对不对

39:49.020 --> 39:50.020
它就这么一写

39:50.020 --> 39:54.020
它就可以就是分离出这个优先级最高的

39:54.020 --> 39:55.020
这个究竟怎么做呢

39:55.020 --> 39:56.020
然后我们这边

39:56.020 --> 39:58.020
我带着大家来走一遍这个流程

39:58.020 --> 40:00.020
假设

40:01.020 --> 40:03.020
假设现在

40:03.020 --> 40:08.580
我们针对这个两个nance

40:08.580 --> 40:10.580
进行一个合并

40:10.580 --> 40:11.580
我们合并哪两个呢

40:11.580 --> 40:15.790
我们合并这两个呢

40:15.790 --> 40:20.060
我们合并这两个

40:20.060 --> 40:21.060
这两个

40:21.060 --> 40:22.060
一个是syncnance

40:22.060 --> 40:24.060
这个在原码里面是有的

40:24.060 --> 40:25.060
对不对

40:25.060 --> 40:26.060
还有一个是什么呢

40:26.060 --> 40:28.060
还有一个是这个input

40:28.060 --> 40:31.060
这个是continuousnance

40:31.060 --> 40:32.060
这边

40:32.060 --> 40:33.060
100

40:33.060 --> 40:34.060
这个

40:34.060 --> 40:35.060
对不对

40:35.060 --> 40:36.060
把他们俩进行一个合并

40:36.060 --> 40:38.060
合并出来是不是就是

40:38.060 --> 40:40.060
这个nance

40:40.060 --> 40:41.060
对不对

40:41.060 --> 40:42.060
合并

40:42.060 --> 40:44.060
合并出来

40:44.060 --> 40:47.060
就是一个nance

40:47.060 --> 40:48.060
OK

40:48.060 --> 40:50.060
那合并出来的结果是什么呢

40:50.060 --> 40:51.060
合并

40:51.060 --> 40:52.060
出来的

40:52.060 --> 40:53.060
结果

40:53.060 --> 40:56.820
如下

40:56.820 --> 40:57.820
合并合并使用什么

40:57.820 --> 40:59.820
是不是使用这个货

40:59.820 --> 41:00.820
对不对

41:00.820 --> 41:02.820
这边直接把这个流程拿过来了

41:02.820 --> 41:03.820
这个刚才也讲过了

41:03.820 --> 41:05.820
这边就是10

41:05.820 --> 41:07.820
这不就合并出来了

41:07.820 --> 41:08.820
对不对

41:08.820 --> 41:09.820
合并出来的这个结果

41:09.820 --> 41:10.820
就是这个

41:10.820 --> 41:11.820
这个就是什么呢

41:11.820 --> 41:13.820
这个就是你的这个nance

41:13.820 --> 41:14.820
好

41:14.820 --> 41:15.820
然后接下来的话

41:15.820 --> 41:17.820
你把他传入到这个方法里面

41:17.820 --> 41:19.820
传入到这个方法里面

41:19.820 --> 41:20.820
既然他做了一个什么

41:20.820 --> 41:22.820
他是不是这边这个nance

41:22.820 --> 41:23.820
n的这个负nance

41:23.820 --> 41:24.820
对不对

41:24.820 --> 41:26.820
他首先对这个进行了一个这个

41:26.820 --> 41:28.820
负数的这个取之

41:28.820 --> 41:29.820
他这边的话

41:29.820 --> 41:30.820
涉及到什么呢

41:30.820 --> 41:31.820
涉及到这个补码的这个操作了

41:31.820 --> 41:33.820
这边我们就不展开了

41:33.820 --> 41:34.820
总之

41:34.820 --> 41:36.820
这个东西是我们的nance

41:36.820 --> 41:37.820
这个

41:37.820 --> 41:39.820
是

41:39.820 --> 41:41.820
我们的这个nance

41:41.820 --> 41:43.820
接下来

41:43.820 --> 41:44.820
接下来

41:44.820 --> 41:45.820
然后取什么呢

41:45.820 --> 41:47.820
取负值

41:47.820 --> 41:51.650
取负值

41:51.650 --> 41:53.650
取负

41:53.650 --> 41:54.650
取负值

41:54.650 --> 41:55.650
对吧

41:55.650 --> 41:56.650
这个负nance

41:56.650 --> 41:57.650
取出来的话

41:57.650 --> 41:58.650
这个值是多少呢

41:58.650 --> 42:01.340
这个值是这么多

42:01.340 --> 42:02.340
这个值是这么多

42:02.340 --> 42:03.340
我就直接拿过来了

42:03.340 --> 42:06.340
这个涉及到这个补码的一些操作了

42:07.340 --> 42:08.340
取出来这个负nance

42:08.340 --> 42:10.340
取出来的话就是这么多

42:10.340 --> 42:11.340
好

42:11.340 --> 42:12.340
最后一步

42:12.340 --> 42:15.230
最后一步

42:15.230 --> 42:16.230
最后一步

42:16.230 --> 42:17.230
最后一步干嘛呢

42:17.230 --> 42:19.230
再和

42:19.230 --> 42:22.230
再和这个本身

42:22.230 --> 42:25.230
本身的nance

42:25.230 --> 42:27.230
做一个什么

42:27.230 --> 42:30.230
做一个n的操作

42:30.230 --> 42:31.230
对不对

42:31.230 --> 42:32.230
n的操作的话是什么

42:32.230 --> 42:34.230
是不是两个都是1才是1

42:34.230 --> 42:35.230
只要有一个是0

42:35.230 --> 42:36.230
是不是就是0

42:36.230 --> 42:37.230
对不对

42:37.230 --> 42:38.230
接下来你这边来做

42:38.230 --> 42:39.230
这边的话

42:39.230 --> 42:42.610
我们这边是这个

42:42.610 --> 42:43.610
然后和谁呢

42:43.610 --> 42:46.500
和他

42:46.500 --> 42:48.500
就做一个n的操作

42:48.500 --> 42:49.500
对不对

42:49.500 --> 42:50.500
做一个n的操作

42:50.500 --> 42:51.500
好

42:51.500 --> 42:52.500
做出来的话最终是什么

42:52.500 --> 42:53.500
你会发现做出来的话

42:53.500 --> 42:55.500
最终就是

42:55.500 --> 42:58.900
这个

42:58.900 --> 42:59.900
看一下是不是

42:59.900 --> 43:00.900
最后一位

43:00.900 --> 43:01.900
1

43:01.900 --> 43:02.900
这边是1

43:02.900 --> 43:03.900
其他全部都是0

43:03.900 --> 43:05.900
就把这个优先级最高的

43:05.900 --> 43:07.900
分离出来了

43:07.900 --> 43:08.900
对不对

43:08.900 --> 43:10.900
经过这个n的操作

43:10.900 --> 43:11.900
经过n的操作之后

43:12.900 --> 43:14.900
n的操作之后

43:14.900 --> 43:16.900
之后

43:16.900 --> 43:18.900
之后

43:18.900 --> 43:19.900
就把什么呢

43:19.900 --> 43:21.900
就把优先级

43:21.900 --> 43:22.900
最高的

43:22.900 --> 43:26.210
最高的n

43:26.210 --> 43:27.210
给

43:27.210 --> 43:29.210
分离出来了

43:29.210 --> 43:30.210
看到没有

43:30.210 --> 43:31.210
OK

43:31.210 --> 43:32.210
像这种

43:32.210 --> 43:33.210
像这样子的代码

43:33.210 --> 43:34.210
在这个react里面

43:34.210 --> 43:35.210
非常非常多

43:35.210 --> 43:36.210
非常非常多

43:36.210 --> 43:38.210
就基于这种

43:38.210 --> 43:39.210
这个未允算

43:39.210 --> 43:41.210
来进行这个计算的

43:41.210 --> 43:43.210
是关于这个n

43:43.210 --> 43:44.210
n这一块

43:44.210 --> 43:46.210
它也是大量的使用了

43:46.210 --> 43:48.210
使用到了这个未允算

43:49.210 --> 43:50.210
好 然后接下来

43:50.210 --> 43:51.210
还有一个是什么呢

43:51.210 --> 43:52.210
还有一个是这个

43:52.210 --> 43:53.210
上下文

43:53.210 --> 43:55.210
在这个react原码内部

43:55.210 --> 43:59.780
它是有这个多个上下文的

43:59.780 --> 44:00.780
在react

44:00.780 --> 44:02.780
原码内部

44:02.780 --> 44:04.780
有多个

44:04.780 --> 44:06.780
上下文

44:06.780 --> 44:07.780
比我们这边还是

44:07.780 --> 44:08.780
让人来看一下

44:08.780 --> 44:13.300
这边是这个原码里面

44:13.300 --> 44:14.300
OK

44:14.300 --> 44:15.300
你会发现这边

44:15.300 --> 44:16.300
比较no context

44:16.300 --> 44:18.300
这边对应的是一个二进字

44:18.300 --> 44:20.300
然后bunk的context

44:20.300 --> 44:22.300
还有Render context

44:22.300 --> 44:23.300
Commit context

44:23.300 --> 44:24.300
就它这边

44:24.300 --> 44:25.300
究竟处于哪个阶段

44:25.300 --> 44:27.300
它有不同的阶段

44:27.300 --> 44:28.300
这边的话

44:28.300 --> 44:31.300
它可能会有同名的方法

44:31.300 --> 44:32.300
同名的方法

44:32.300 --> 44:34.300
但是根据你不同的阶段

44:34.300 --> 44:35.300
你这边执行了

44:35.300 --> 44:37.300
基本是同名的方法

44:37.300 --> 44:41.300
它执行了代码是不一样的

44:41.300 --> 44:43.300
执行的方法是不一样的

44:43.300 --> 44:44.300
说它这边在执行的时候

44:44.300 --> 44:45.300
它会需要干嘛呢

44:45.300 --> 44:46.300
判断一下

44:46.300 --> 44:49.300
是否进入到了某一个阶段

44:49.300 --> 44:52.740
比如说

44:52.740 --> 44:57.120
当执行流程

44:57.120 --> 44:59.120
然后到了

44:59.120 --> 45:01.120
扔点阶段

45:01.120 --> 45:02.120
这个两个阶段

45:02.120 --> 45:04.120
我们之前是不讲过的

45:04.120 --> 45:06.120
整个渲染的流程

45:06.120 --> 45:07.120
整个渲染流程

45:07.120 --> 45:08.120
我们之前都讲过的

45:08.120 --> 45:09.120
比如说这边

45:09.120 --> 45:10.120
它是有扔点阶段

45:10.120 --> 45:11.120
Commit阶段

45:11.120 --> 45:12.120
比如说现在到了扔点阶段

45:12.120 --> 45:13.120
那接下来

45:13.120 --> 45:14.120
它就会干嘛呢

45:14.120 --> 45:16.120
它就会切换上下文

45:16.120 --> 45:21.120
接下来就会切换上下文

45:21.120 --> 45:22.120
切换到什么呢

45:22.120 --> 45:24.120
切换到扔点阶段的上下文

45:24.120 --> 45:25.120
切换到

45:25.120 --> 45:26.120
它这边叫做

45:26.120 --> 45:29.120
Render Context

45:29.120 --> 45:30.120
对不对

45:30.120 --> 45:33.120
对应的代码是这样子的

45:33.120 --> 45:36.430
把它拿过来

45:36.430 --> 45:37.430
对应代码是这样子的

45:37.430 --> 45:39.430
一开始是No Context

45:39.430 --> 45:41.430
那下来这边就是货等

45:41.430 --> 45:43.430
货等于Render Context

45:43.430 --> 45:44.430
对不对

45:44.430 --> 45:45.430
回头的话

45:45.430 --> 45:46.430
我执行了一些方法的话

45:46.430 --> 45:49.430
这是Render Context对应的方法

45:49.430 --> 45:54.430
回头你这边在执行这个方法的时候

45:54.430 --> 45:55.430
它就会有一个什么呢

45:55.430 --> 45:57.430
就会有一个判断

45:57.430 --> 45:58.430
比如说判断

45:58.430 --> 46:01.430
是否处于某一上下文中

46:01.430 --> 46:06.430
在执行方法的时候

46:06.430 --> 46:08.430
就会有一个什么呢

46:08.430 --> 46:09.430
有一个判断

46:09.430 --> 46:10.430
判断什么呢

46:10.430 --> 46:16.430
判断当前处于哪一个上下文中

46:16.430 --> 46:17.430
因为它这个不同的上下文

46:17.430 --> 46:19.430
它可能方法名是一样的

46:19.430 --> 46:20.430
都叫这个方法

46:20.430 --> 46:21.430
对方法的名字一模一样

46:21.430 --> 46:23.430
但是你不同的上下文的话

46:23.430 --> 46:25.430
你执行的对应的方法是不一样的

46:25.430 --> 46:27.430
所以它这边需要进行一个判断

46:27.430 --> 46:28.430
它这边比如说

46:28.430 --> 46:31.430
它可以通过这种方式来进行判断

46:31.430 --> 46:33.430
这边把这个

46:33.430 --> 46:36.430
这个也是从原码里面拎出来的

46:36.430 --> 46:38.430
这边Excusing Context

46:38.430 --> 46:40.430
And Render Context

46:40.430 --> 46:42.430
不等于No Context

46:42.430 --> 46:44.430
这个就是判断你

46:44.430 --> 46:46.430
是否处于Render Context

46:46.430 --> 46:47.430
上下文里面

46:47.430 --> 46:48.430
它这边结果是

46:49.430 --> 46:51.430
你现在是处于Render

46:51.430 --> 46:52.430
那你就不在什么

46:52.430 --> 46:53.430
不在Commit阶段

46:53.430 --> 46:55.430
说你这边And Commit Context

46:55.430 --> 46:56.430
大家这边判断

46:56.430 --> 46:57.430
它不等于No Context

46:57.430 --> 46:59.430
这边它结果就是

46:59.430 --> 47:00.430
Force

47:01.430 --> 47:02.430
接下来你这边

47:02.430 --> 47:04.430
如果要离开

47:04.430 --> 47:06.430
如果

47:06.430 --> 47:09.430
如果要离开

47:09.430 --> 47:13.430
要离开某一个上下文

47:14.430 --> 47:15.430
ok 那这边

47:15.430 --> 47:16.430
这个你看一下

47:16.430 --> 47:18.430
原码所对应的

47:19.430 --> 47:20.430
这边就是什么呢

47:20.430 --> 47:21.430
这边就是And

47:24.190 --> 47:25.190
这边就是什么呢

47:25.190 --> 47:26.190
这边就是漂

47:26.190 --> 47:27.190
看到没有

47:27.190 --> 47:28.190
这边通过这个漂

47:28.190 --> 47:29.190
这个漂是飞

47:29.190 --> 47:30.190
对不对

47:30.190 --> 47:31.190
安慰飞

47:31.190 --> 47:32.190
通过安慰飞

47:32.190 --> 47:33.190
以处这个标记

47:33.190 --> 47:34.190
就可以了

47:34.190 --> 47:35.190
ok

47:35.190 --> 47:37.190
通过这种方式

47:37.190 --> 47:38.190
我这种方式

47:38.190 --> 47:40.190
这是关于这个上下文

47:40.190 --> 47:41.190
上下文内部

47:41.190 --> 47:43.190
也使用到了这个

47:43.190 --> 47:44.190
微运算

47:44.190 --> 47:45.190
ok

47:45.190 --> 47:46.190
好 那最后的话

47:46.190 --> 47:47.190
我们来看一下

47:47.190 --> 47:49.190
关于这个整体解答

47:49.190 --> 47:51.190
rekt哪些地方

47:51.190 --> 47:52.190
用到了微运算

47:52.190 --> 47:54.190
那这个就很简单了

47:54.190 --> 47:55.190
对不对

47:55.190 --> 47:56.190
我这边

47:56.190 --> 47:57.190
我就直接把这个答案

47:57.190 --> 47:58.190
就把它拿过来

47:58.190 --> 48:01.980
ok

48:01.980 --> 48:02.980
微运算可以很方便的

48:02.980 --> 48:04.980
表达这个真相改差

48:04.980 --> 48:05.980
在rekt内部的话

48:05.980 --> 48:07.980
像这个flex

48:07.980 --> 48:08.980
状态优先级这些

48:08.980 --> 48:10.980
都大量使用到了微运算

48:10.980 --> 48:11.980
细分下来的话

48:11.980 --> 48:12.980
主要是三个地方

48:12.980 --> 48:15.980
首先是fiber的flex

48:15.980 --> 48:17.980
然后既然是内模型

48:17.980 --> 48:19.980
还有一个是上下文

48:19.980 --> 48:20.980
然后你回答的时候

48:20.980 --> 48:21.980
你可以再举点例子

48:21.980 --> 48:22.980
对不对

48:22.980 --> 48:23.980
比如说这边这个内模型

48:23.980 --> 48:24.980
内模型的话

48:24.980 --> 48:26.980
你可以把get highest priority

48:26.980 --> 48:29.980
内把这个方法说一下

48:29.980 --> 48:30.980
说出来一下

48:30.980 --> 48:31.980
对不对

48:31.980 --> 48:32.980
这个方法

48:32.980 --> 48:33.980
这个方法可以用来分离

48:33.980 --> 48:35.980
优先级最高的内

48:35.980 --> 48:37.980
它是如何进行一个分离的

48:37.980 --> 48:39.980
这些什么都可以说

48:39.980 --> 48:40.980
对不对

48:40.980 --> 48:41.980
ok

48:41.980 --> 48:43.980
这是关于rekt中

48:43.980 --> 48:45.980
使用到的微运算

48:45.980 --> 48:47.980
大家下来的话

48:47.980 --> 48:48.980
可以再看一下

48:48.980 --> 48:49.980
好吧

48:49.980 --> 48:50.980
好

48:50.980 --> 48:51.980
这期课就到这里

48:51.980 --> 48:52.980
再见

