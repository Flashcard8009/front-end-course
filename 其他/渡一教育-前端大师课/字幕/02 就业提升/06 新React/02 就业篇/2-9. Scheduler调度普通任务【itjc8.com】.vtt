WEBVTT

00:00.000 --> 00:05.000
OK 这期课的话 咱们来看一下那三大组件的第一个组件

00:05.680 --> 00:08.200
scheduler scheduler的话 我们之前在

00:08.920 --> 00:15.480
呃 讲那个react的这个渲染流程的时候 我们说过scheduler的话 他是拿来这个调度任务的

00:16.080 --> 00:21.320
对吧 好 这个scheduler他调度任务的时候 他的任务其实就实际上他分成两类

00:21.920 --> 00:26.080
一个的话是普通任务 另外一个的话是这个严实任务

00:26.560 --> 00:31.760
好 那我们这一期课的话 主要来看一下这个scheduler 他是如何来调度这个普通任务的

00:32.400 --> 00:37.200
好吧 好 那这里的话 就会涉及到去查看一下他的这个圆码

00:38.040 --> 00:44.360
他的圆码的话 位于这个位置啊 这边呢 是我们整个这个react圆码 他在这个package是

00:45.040 --> 00:47.000
下面的这个scheduler

00:47.760 --> 00:52.520
对吧 好 然后接下来有个index.js 你会发现他这边的话是从什么

00:53.240 --> 00:55.800
是不是从fox 下面的scheduler

00:56.400 --> 01:02.920
好 你把这个src 打开打开的话 然后加这边一个fox fox的这个schedulers啊schedulers

01:03.360 --> 01:07.600
点击也是 那整个的话 实际上我们就回头看主啊 就是看这个文件

01:08.520 --> 01:11.320
啊 这个文件的话 这个代码其实也不多啊

01:11.920 --> 01:19.160
这个不算多啊 这不算多 这个呢 六百多啊 一千行都还不到 不算多啊 你出去这些这个导入导出啊之类的

01:19.560 --> 01:25.080
就也还好 ok 好 说说我们这两节课啊 这两节课我们主要其实就是看这个

01:25.760 --> 01:27.040
好 这边笔记记一下啊

01:28.360 --> 01:28.960
scheduler

01:30.520 --> 01:33.600
schedulers 这个核心元码

01:34.760 --> 01:36.840
核心元码 位于

01:38.040 --> 01:39.800
位于什么呢 package

01:40.920 --> 01:43.920
他叫做packages 是吧 package 是

01:44.520 --> 01:47.320
然后下面的这个scheduler

01:48.320 --> 01:51.880
schedulers 下面的src 对吧

01:52.320 --> 01:57.760
the package 是下面的scheduler 下面的src 下面的这个fox

01:58.960 --> 02:00.280
下面的这个scheduler

02:01.760 --> 02:02.280
schedulers

02:04.000 --> 02:13.720
点击是啊 主要是这个文件啊 这个文件的话 它里面的话 就会有一个一个的这个函数啊 你这边可以把它折起来啊 我这边把它折起来

02:14.720 --> 02:23.120
ok 这边折起来 清爽多了 是吧 啊 这边你看啊 这边实际上就是一个一个的这个方法 对不对

02:23.680 --> 02:29.040
好 然后这样我们这边看哪个呢 他这边的话 他入口是从这个

02:29.840 --> 02:35.680
叫做这个 unstable unstable 是不稳定的意思啊 他就目前这边还不是稳定的

02:36.000 --> 02:42.240
大家这边scheduler 这个schedul callback啊 那我们首先的话就从这个函数开始看起

02:43.840 --> 02:45.520
schedul 把他拿过来

02:46.680 --> 02:51.060
拿到这边 拿到这边来 ok

02:52.300 --> 02:58.690
那把这儿稍微调整一下 这边的话是他的一个等级

02:59.690 --> 03:08.050
啊 这个callback callback 实际上是我们的这个任务啊 人家这边呢 还是还有一个option 这个option是可选的 这边有个问号

03:08.570 --> 03:09.930
表示这玩意是可选的

03:10.810 --> 03:14.570
啊 那他这边是一个这个推迟的时间 对应的是一个对象

03:15.570 --> 03:21.490
好 返回 返回的是一个什么的 返回的是一个任务对象啊 这个task 我们来看一下啊

03:21.970 --> 03:28.330
我之前说过他这个的话是就是根据这个flow flow的话 你可以把理解成就和那个type script很像

03:28.930 --> 03:33.530
啊 但你这边你如果也没学过这个ts啊 那我这边就把这些就删掉

03:34.050 --> 03:38.650
好了 这边呢 就是这代表什么呢 代表就是你返回的值是一个这个task类型的

03:39.170 --> 03:40.930
那这个task类型 我们这边来看一下

03:41.650 --> 03:42.330
task类型

03:43.330 --> 03:52.050
task啊 在这里 可不可以啊 他这边的话定义了一个这个task类型啊 这个task类型啊 在这里面 他是个对象

03:52.130 --> 03:57.210
对象里面有id 有callback 有这个purity level

03:58.090 --> 04:02.210
啊 我看这个这个应该怎么练啊purity 应该是purity吧 看一下

04:04.900 --> 04:07.100
我看这个的读法啊 他是优先级的意思

04:07.660 --> 04:09.420
就你优先级的这个等级

04:12.580 --> 04:16.980
优先级的等级purity 好像我突然想起来了 你叫做purity

04:19.140 --> 04:19.860
priority

04:21.620 --> 04:23.020
priority

04:23.580 --> 04:33.540
priority ok 这边呢 是priority level 这个是你的这个优先级的这个等级 然后现在这个是开始时间过期时间啊 一个所有的index

04:34.340 --> 04:36.660
是否在这个对列里面啊 这个是个布尔滋

04:37.140 --> 04:43.740
怎么样 他flow.js 那个flow.js就和那个ts非常像啊 他可以定义这些

04:44.980 --> 04:46.140
好 那回到我们这边

04:47.300 --> 04:51.820
回到我们这边 把这个就删了啊 你知道一会儿返回只返回的是一个这样的类型啊

04:53.100 --> 04:59.140
好 然后其他的话我看还有没有 其他的话就没什么了 这就没什么了 好来我们接下来我们来看一下

05:00.020 --> 05:06.180
啊 我们这边首先来看一下这个schedule callback 这边

05:08.140 --> 05:08.700
schedule

05:09.300 --> 05:09.820
callback

05:10.740 --> 05:16.060
啊 这个schedule callback 这个是什么呢 这个顾名思义就是用来调度任务的

05:16.900 --> 05:23.620
对不对啊 schedule schedule 是调度的意思 那callback callback的话是你的这个任务 所以该函数

05:24.780 --> 05:28.060
该函数的主要目的

05:29.140 --> 05:37.180
就是用来调度任务啊 schedule 这个是调度的意思 callback callback 就是你要做的事情

05:37.740 --> 05:43.300
啊 你的这个事情我把它包装成一个任务 那你这个任务不是说是直接传进来

05:43.700 --> 05:48.020
我就直接就开始这个做 那要经过我的什么 是不要经过我的这个调度

05:48.780 --> 05:54.620
对不对 我要进行一个调度 好 那接下来我们来看一下这个函数它具体啊 具体的一些东西

05:56.380 --> 06:01.580
好 那这边首先第一行 这边的话是get current time啊 大家等于这个current time

06:01.980 --> 06:04.260
这个是什么呢 这个是获取当前的时间

06:04.980 --> 06:07.500
获取当前

06:09.500 --> 06:13.940
当前的时间 好 我们这边来看一下这个get current time

06:15.420 --> 06:17.260
啊 到回到这边来 回到原码这边

06:18.260 --> 06:19.540
get current time 在这里

06:20.700 --> 06:24.900
对吧啊 这边get current time啊 这边的话 这边是定义

06:25.780 --> 06:28.500
我看一下get current time啊 在这里

06:30.060 --> 06:34.140
在这里啊 它这边get current time对应的是有什么 对应的是一个这个

06:34.260 --> 06:41.780
函数 对吧 通过这个local performance点绕啊 大家这个local performance就是什么呢 就是 performance

06:42.380 --> 06:47.220
啊 也就是这边啊 你可以把理解成这个 它这边其实就是什么呢 就是这样子的

06:48.700 --> 06:49.700
可以把理解成这边

06:51.820 --> 06:56.620
let一个get current time就等于什么呢 就等于这边一个函数

06:57.980 --> 07:01.260
一个箭头函数 然后返回什么呢 返回这个performance

07:01.820 --> 07:08.980
no 对不对 啊 返回你的这个当前的这个时间 这个的话 它更加精确一些啊 它相比那个就是啊

07:09.780 --> 07:11.620
new date 要更加精确一些

07:12.940 --> 07:17.700
好 然后接下来的话 这边的话有一个这个start time 那这个呢 就是你的起始时间

07:18.420 --> 07:19.740
好 然后接下来它这边

07:20.700 --> 07:24.260
type of option 如果等于这个object

07:24.860 --> 07:28.740
并且什么呢 并且option是不为no option 是什么 option 是这

07:29.340 --> 07:31.260
对不对 这三个参数 我们这边来看一下

07:32.140 --> 07:37.020
这三个参数 这个是什么 这个呢 是你的等级啊 优先级等级

07:38.900 --> 07:41.180
优先级等级

07:43.500 --> 07:46.140
啊 这个是什么 这个是不是就是我们具体要做的任务

07:47.260 --> 07:54.140
具体要做的任务 对不对 这个option是还记得吧 option是它是那个一个对象

07:54.940 --> 07:58.860
你回到这 看一下 看一下它刚才的那个task 这边

07:59.660 --> 08:00.260
option

08:01.780 --> 08:09.620
option在哪里 我找一找啊 这边啊 这个是返回值 是吧 返回值 我们找一下那个

08:10.820 --> 08:12.660
找一下这个skidio callback

08:16.300 --> 08:21.980
呃 这边 这边啊 它是一个对象 对不对 对象的话 再加这边就是你什么 你要延时多久

08:22.700 --> 08:23.820
啊 你要延时多久

08:24.740 --> 08:33.260
这边这个option啊 对应的就是你延时的这个时间啊 这是一个对象啊 然后该对象

08:34.100 --> 08:36.060
该对象有这个delay属性

08:36.980 --> 08:40.940
delay属性 表示要延时

08:42.500 --> 08:42.980
的时间

08:43.980 --> 08:50.780
对吧 好 那接下来 接下来 这边这个e4l是判断这边就是干嘛 这边是不是就是把你的这个延时时间把它加上去啊

08:51.380 --> 08:57.820
对了 我们来看一下 这边首先获取到这个延时时间 获取到之后 然后接下来这边 如果它等于number 并且大于0

08:58.700 --> 09:05.900
那这个开始时间就是在当前时间上面加上延时时间 对吧 啊 这边 如果有延时时间

09:07.100 --> 09:11.740
如果有延时 或者说设置了啊 就设置了

09:12.780 --> 09:16.220
设置了延时时间 那么这个start

09:17.100 --> 09:17.980
start time

09:18.540 --> 09:28.140
就就为什么呢 就为当前时间 这边current time 对了 当前时间加上延时时间

09:29.980 --> 09:40.140
对不对啊 否则的话 这边就是这个当前时间啊 这边啊 如果没有进一幅的话 那这边也是当前时间啊 所以也就是说整个这个e4ls就是在干嘛 是不是设置

09:40.700 --> 09:44.300
这个开始时间 对不对 整个这个

09:45.020 --> 09:46.540
e4ls

09:47.980 --> 09:51.980
带着你一点点来看啊 整个e4ls就是

09:53.020 --> 09:56.620
就是在设置什么 是不是起始时间

09:58.140 --> 09:58.780
起始

10:00.620 --> 10:07.340
起始啊 或者叫做开始 起始时间啊 然后如果有延时

10:08.060 --> 10:09.420
然后这个起始时间

10:10.540 --> 10:11.180
起始

10:12.060 --> 10:17.660
起始时间啊 需要添加上这个延时

10:18.300 --> 10:25.660
ok 啊 这个e4ls是不是就看懂了 看懂了 这你就把折起来啊 不要给自己压力 对吧 把折起来

10:25.980 --> 10:30.140
好 折起来之后 然后接下来的话 这边的话 又有一个这个timeout

10:30.780 --> 10:34.620
timeout timeout 然后接下来这边 我们来看这个switch

10:35.180 --> 10:39.660
switch的话 这边就是什么呢 根据你的这个priority level

10:39.980 --> 10:44.140
level 对不对 根据你传入的这个优先级等级

10:46.060 --> 10:50.860
根据传入的优先级等级

10:51.740 --> 10:55.740
来设置什么 是不是来设置timeout

10:56.300 --> 11:02.300
啊 我们可以看到这边 如果你是这个immediate priority 啊 这边呢这个timeout就等于这个

11:02.780 --> 11:08.620
如果是user broken这个priority 它这边就是等于这个 那这个字从哪来

11:09.100 --> 11:10.060
啊 这个字你找一下

11:11.660 --> 11:18.700
好 回到我们这边圆码 你从这找一下啊 这个值的话就是在这个位置

11:19.580 --> 11:26.380
可不可以啊 它这边的话是不是就是定义了 这边这个immediate这个immediate这个priority timeout

11:26.700 --> 11:32.300
这个是什么呢 这个是附一代表什么呢 代表要立即执行啊 这个这个是user broken

11:32.700 --> 11:40.460
priority timeout 这个是250 大家这边 这边呢是这个normal 就正常的这个优先级啊 这个是5秒

11:40.860 --> 11:46.990
ok 好 它这边就设置了 我们把这个拿过来啊 拿到这边

11:50.940 --> 11:56.940
这边 okay 我把它放在这里啊 这边呢就是什么 是不是就是这个timeout

11:57.420 --> 12:04.690
它对应的各种就是值啊 对不对 timeout对应了值 timeout

12:05.650 --> 12:14.800
对应的这个值啊 好 然后啊 这些都是timeout所对应的这个值

12:15.280 --> 12:21.920
ok 好 那接下来这这边是不是就看得懂了 对不对 这边就根据你的这个优先级等级啊 大家我这边这个timeout

12:22.240 --> 12:25.680
啊 把它设置成这个不同的对应了这个不同的这个timeout

12:26.880 --> 12:28.960
根据这个传入的优先级等级

12:29.920 --> 12:33.200
来设置不同的timeout

12:33.840 --> 12:38.720
ok 好 然后接下来这边的话 这边就算出什么了 算出我的过期时间

12:39.520 --> 12:46.620
接下来 接下来就计算出过期时间

12:49.660 --> 12:55.180
计算出过期时间 这个过期时间就是什么 就是你的开始时间 我们刚才不是最开始有个这个开始时间吗

12:55.820 --> 13:00.220
对不对 开始时间加上一个你的这个timeout

13:00.860 --> 13:05.420
啊加上timeout 那你这么一加的话 那接下来就会有这么集中可能性

13:06.140 --> 13:10.380
没集中可能性呢 就你这边的话 你看刚才这边有一个是多少

13:10.940 --> 13:16.540
所以有一个是负一啊 那后面是什么 后面的话是不是都是这个就是啊 比如这个250

13:17.100 --> 13:22.780
5000 这个就是5秒啊 这个呢就是10秒啊 这边呢就是有什么呢 就是有这个不同的这个时间

13:23.180 --> 13:24.540
那你这么一加了之后

13:26.140 --> 13:30.300
一加了之后 那我对应的这个时间是不是有些比当前的时间

13:30.700 --> 13:33.740
就是要找 有些比这个当前的时间要晚

13:34.460 --> 13:36.780
对不对 计算出来的时间

13:38.300 --> 13:40.780
计算出来的时间

13:42.060 --> 13:43.740
有些比

13:45.820 --> 13:48.460
当前时间要早

13:49.820 --> 13:53.260
对吧 因为你这个比较比较低 比较低 这个你这个是负一啊

13:54.060 --> 13:58.620
那是负一啊 对不对 我在当前的这个时间上面我还减啊 减个一

13:58.940 --> 14:01.500
所以比当前的时间要早 有些的话

14:02.620 --> 14:05.340
呃 然后绝大部分 绝大部分

14:05.980 --> 14:06.220
比

14:08.060 --> 14:12.220
比当前的时间要晚一些

14:13.420 --> 14:16.540
对不对 okay 这是这个过期时间啊

14:16.860 --> 14:19.740
好了 这个计算出来有什么意义呢 他这个是这样子的

14:21.620 --> 14:24.500
好 我这边给大家看张图啊 看张图你有明白了

14:24.980 --> 14:26.260
稍等 我把这张图打开

14:27.220 --> 14:29.540
啊 就这张图 你看他这边是这样子的

14:29.940 --> 14:33.540
就你这个 这个是当前时间 对不对 好 然后加你这个

14:33.940 --> 14:36.180
Inmediate啊 Inmediate

14:36.500 --> 14:38.740
然后这个Priority 然后Timeout

14:39.140 --> 14:42.340
那这个的话他就是什么 是不是在比你的这个当前时间要早

14:42.980 --> 14:46.420
对不对 为什么 因为这个刚才说了他是什么啊 他是不是负一啊

14:47.300 --> 14:49.540
对不对 负一 我这边的话 我如果这个

14:50.340 --> 14:54.660
呃 这边 这边上我的这个Start Time啊 比如说假设我这边计算出来是当前时间

14:54.900 --> 14:58.980
那像我再加上一个Timeout 加上你的Timeout 是比我当前时间还要早一点

14:59.700 --> 15:06.660
对不对 还要早一点啊 好 那接下来他就在左边 那其余的话就在怎么了 其余的就在右边

15:07.620 --> 15:11.300
那像这种 这种的话就代表什么呢 就代表紧急任务

15:11.780 --> 15:17.140
我已经比我当前的时间还要这个小了 对不对 叫做紧急任务 立即就要执行

15:17.460 --> 15:21.220
好 那像这边 这边的话 那比我的这个当前时间是比较大一些

15:21.700 --> 15:26.820
而要大一些的话 那接下来就说明还没有过期 那我等到到这个时间之后 我再执行

15:27.380 --> 15:29.540
哎 他这边就是这样子的 ok

15:30.260 --> 15:31.860
啊 所以说我们这边继续往后面看

15:33.220 --> 15:37.060
啊 这边 这边的话是怎么呢 这边是创建一个新的任务

15:38.020 --> 15:44.100
啊 这边这个task task 就是你这new task 必须是那个 task 内心 这task 内心刚给大家看了

15:44.580 --> 15:48.420
对吧 好 这边 创建一个新的任务

15:52.540 --> 15:59.020
创建一个新的任务 新的任务的话 他这边有些这个属性啊 我们来看一下

16:00.300 --> 16:02.860
好 首先这个这个的话是一个任务的id

16:03.660 --> 16:08.700
啊 这是任务id好 这个这个的话这个callback 是不是就是我们这边传入的

16:09.660 --> 16:12.220
是不是这边传入的 这个是不是就是我们具体要做的事情

16:13.020 --> 16:17.580
对不对啊 这个就是啊 该任务该任务

16:18.220 --> 16:21.340
具体要做的事情

16:21.900 --> 16:23.740
啊 这个这个的话是任务优先级

16:24.860 --> 16:27.740
任务的优先级别

16:28.540 --> 16:33.660
好 然后下这个这个是任务开始时间啊 这个是任务

16:34.860 --> 16:36.220
任务的过期时间

16:38.140 --> 16:48.260
过期过期时间啊 这个这个的话是他这个在进行这个小顶堆排序的时候啊 主要是用于这个排序的

16:49.140 --> 16:54.420
用于后面在这个小顶堆小顶堆我们后面来说 他是一种算法

16:55.060 --> 17:01.220
算法就是我可以从这个对列里面始终拿出什么呢 拿出就是即将过期的这个任务

17:02.020 --> 17:02.980
这个是一种算法

17:03.700 --> 17:10.260
这是一种算法可以始终从这个任务对列中

17:11.140 --> 17:15.460
任务对列中拿出这个最优先的任务

17:18.500 --> 17:24.260
ok 就是这个小顶堆啊 后面用来在这个小顶堆里面进行排序的

17:25.220 --> 17:28.100
进行排序的这个索引

17:28.820 --> 17:32.420
对吧 你看到这个index也知道他是索引的意思

17:33.140 --> 17:39.780
好 然后加这边if这个enable啊 然后这个profiling 我们来看一下这个profiling这个是什么

17:42.960 --> 17:43.760
呃 在这里

17:47.840 --> 17:50.160
profiling在这里对吧 我看一下这里

17:50.960 --> 17:57.440
这边的话是从这边这个scheduler 然后这个feature flex 也就是说这边倒入的

17:58.480 --> 18:04.240
啊 这边的默认是什么 默认的话是一个force对不对 也就是实际上就是你那个

18:04.880 --> 18:10.560
呃 制定优先几秒对不对 他这边就是一些这这种就是全局的一些变量啊

18:11.600 --> 18:18.380
好 那既然我们这边我们就知道了啊 回到我们刚才那 回到回到这边吧

18:19.260 --> 18:25.020
回到回到这边吧啊好 义父啊 他那他第一次他就不会进对不对 不会进

18:25.500 --> 18:31.020
好 然后接下来后我们来看下面来看下面 下面的话又是一个什么 又是一个义父要是

18:31.740 --> 18:37.500
对不对 这个义父要是完了之后 然后这边完了 完了这这边是干嘛 所以向外部返回任务

18:38.620 --> 18:40.380
对不对 向外部

18:41.820 --> 18:45.420
向外部返回任务

18:46.140 --> 18:52.060
啊 好 那接下来后我们着重我们来看一下就是这个义父 else 他这边的话他做了什么

18:53.820 --> 19:01.540
好 我们这边看一下啊 这里如果start time大于这个current time

19:02.100 --> 19:03.940
start time是什么 我们这边来看一下

19:04.500 --> 19:07.540
start time是不是最开始定义的这个开始时间

19:08.340 --> 19:10.260
开始时间有没有可能大于

19:11.220 --> 19:14.020
大于这个current time

19:14.580 --> 19:20.660
有没有可能 有可能嘛 对不对 你这边干嘛 你这边start time等于这个current time加一个delay

19:21.060 --> 19:22.900
你这个是什么 是不是设置了延时的

19:24.180 --> 19:29.300
对不对 那你设置了延时的话 那你这个start time当然就干嘛 是不是大于他

19:29.860 --> 19:34.260
对不对 他是有可能的 那这边呢 如果进入这个义父说明是吗

19:34.660 --> 19:38.660
说明这是一个延时任务 啊 人家这边其实也写的有注释

19:39.380 --> 19:42.180
对不对 说明 说明

19:43.140 --> 19:46.100
这是一个延时任务

19:48.940 --> 19:57.900
延时任务 那延时任务的话 然后既然我这边针对这个任务啊 我这边设置这个他的sort index啊 设置完了之后人家这边注意这句

19:58.380 --> 20:01.660
把它推入到什么呢 推入到叫做time mark

20:02.140 --> 20:07.500
这个是什么呢 这个就是我们这个scheduler有两个对列啊 这个要说一下

20:08.220 --> 20:13.820
在我们的这个scheduler里面 他有两个对列 一个叫做time mark

20:15.100 --> 20:16.380
time mark啊 在这里

20:18.540 --> 20:23.260
在这里 看到没有 这边呢 他是两个对列 一个叫做task

20:23.980 --> 20:29.180
对应的是一个什么呢 对应的是一个数组 那一个这个time mark 他对应的也是一个数组

20:29.500 --> 20:35.340
那但是他在从这个数组里面取这个任务的时候 因为到时候就是我们所有的任务都会被推入到这个数组里面

20:36.060 --> 20:41.500
你如果是不严实的任务 不严实的任务是不是就是普通任务 普通任务就推入到这个数组里面

20:41.820 --> 20:45.020
然后如果是延时任务 延时任务的话就推到这个数组里面

20:45.980 --> 20:51.900
那到时候我们所有的任务我都会推到这个数组里面 但是取的时候他会采用一种这种算法

20:52.060 --> 20:55.900
叫做小顶堆的算法 这边看到没有 他这个作词写的有

20:57.420 --> 21:00.060
task 就是任务 are stored

21:00.780 --> 21:06.700
on the main heap 这个的话就是最小堆啊 最小堆或者叫做小顶堆 okay

21:07.100 --> 21:08.620
好 把这边拿过来

21:10.300 --> 21:17.120
然后这边啊 这边两个对领啊

21:17.840 --> 21:19.840
有两个对领

21:20.480 --> 21:22.480
有两个对领

21:23.040 --> 21:26.800
分别存储什么呢 存储这个普通任务

21:27.600 --> 21:30.640
普通任务和延时任务

21:31.600 --> 21:38.240
对不对 他这边呢是这个类型的标准啊 这是一个array array里面放的是一个一个的任务啊 task 类型

21:40.160 --> 21:43.680
把这个 我就把这个删了嘛 因为我还怕有同学没学过这个啊

21:44.320 --> 21:46.960
可不可以啊 这个是这个tasker query 这个就是存储

21:48.480 --> 21:54.880
存放普通任务啊 这个是什么呢 这个是存放延时任务

21:56.400 --> 21:57.760
延时任务 okay

21:58.080 --> 22:03.440
好 存进去之后再回头他这个 他里面他里面的话采用了一种叫做小顶堆的算法

22:04.640 --> 22:09.760
里面采用了一种叫做小顶堆

22:10.960 --> 22:11.840
啊 算法

22:12.560 --> 22:15.040
保证什么呢 保证每次

22:17.120 --> 22:20.160
每次这个从这个对列里面

22:20.880 --> 22:25.600
对列里面取出来的都是什么呢 都是这个就是

22:26.160 --> 22:27.760
啊 时间最短的嘛

22:28.720 --> 22:33.200
就是优先级最高的 优先级最高啊 或者说这个时间

22:34.480 --> 22:36.000
时间即将过期的

22:37.360 --> 22:39.520
他会自动进行个排序啊

22:40.480 --> 22:42.000
好 那接下来回到我们这边

22:43.360 --> 22:47.440
回到我们这边啊 你看这边这边是不是就把这个任务 因为你这个是一个延时任务嘛

22:47.680 --> 22:50.000
把延时任务那接下来这边将

22:50.960 --> 22:51.600
该任务

22:52.720 --> 22:55.360
推入到这个timer queen

22:57.390 --> 22:59.790
timer queen的这个任务对列中

23:02.500 --> 23:07.060
ok 好 推进去了之后 然后接下来这边是不是又是一个义父判断

23:07.540 --> 23:10.500
对不对 先把它折起来啊 我们来看一下这个义父判断在做什么

23:10.980 --> 23:15.940
接下来的话他这个这个铺锡是推入pick啊 这个pick的话是拿出来一个

23:16.740 --> 23:20.340
拿出来一个啊 他这边那干嘛呢 他从task queen里面

23:20.820 --> 23:21.940
拿一个任务出来

23:23.060 --> 23:28.580
对不对 这个小顶端我们后面会讲啊 这个小顶堆 究竟他这个算法具体是如何做的

23:28.900 --> 23:31.300
我们后面应该是下下这一刻啊

23:31.860 --> 23:35.140
好 这边这边他先从这个task queen里面拿出来一个任务

23:35.540 --> 23:38.340
拿出来一个任务他发现什么 发现这边是不是空

23:38.980 --> 23:42.100
对不对 是空 并且的话这边的话就是你这边

23:42.660 --> 23:45.220
这个从这个timer queen

23:46.180 --> 23:52.500
就这个严实任务对立里面 取一个出来 取出来的话呢 这样这边就是什么呢 就是这个newtask

23:52.740 --> 23:54.340
那说明什么啊 说明

23:55.700 --> 24:02.400
啊 我们写在哪呢 写在这吧 写在这啊 他这边实际上这边有注释

24:03.920 --> 24:06.960
就什么呢 就是你这边说明 进入此义父

24:08.160 --> 24:13.040
进入此if 说明什么 说明这个task

24:14.000 --> 24:15.600
这个task queen

24:17.810 --> 24:25.490
task queen里面的任务已经是执行完毕了 执行完毕了 并且

24:27.170 --> 24:33.250
啊 并且什么呢 并且这个从timer queen timer queen是不是就是那个严实的

24:33.650 --> 24:38.930
严实对立啊 里面取出一个最新的

24:39.250 --> 24:44.610
最新的任务又是什么呢 又是当前任务

24:46.210 --> 24:52.290
啊 又是当前任务 好 那接下来他这边做一件事情 什么事情啊 我们这边把这个if 展开

24:53.170 --> 24:59.490
好 他这边的话 这边这边是看这个easyhosttimeoutscheduler啊 这个这个是什么呢

25:01.170 --> 25:07.170
啊 这边我们来看一下easyhosttimeoutscheduler 我们到原码这边

25:09.250 --> 25:11.010
来看一下 把他来找一下

25:12.770 --> 25:18.850
这边啊 在这里 他默认他是一个全局辩量 对不对 默认的话这边是force

25:19.410 --> 25:25.010
啊 默认是force 默认是force的话 他这边的话进来进来的话 进这个l是把它设置成q

25:25.410 --> 25:28.290
啊 这边呢 实际上其实就是个开关啊 你把它理解成

25:29.010 --> 25:30.050
下面的easyhost

25:30.850 --> 25:33.570
下面的easyhost

25:34.530 --> 25:36.930
l is 就是一个开关

25:37.410 --> 25:43.090
对吧 表明你这边是否有这个 呃 正在调度这个调度的这个timeout 任务

25:43.330 --> 25:49.730
好 那接下来主要是看这一句 啊 主要是看这一句 那这边的话 就是如果针对延时任务的话 我们这边是干嘛

25:49.970 --> 25:55.250
是不是通过这个requesthosttimeout来进行这个调度 对不对

25:55.810 --> 25:57.410
如果是延时任务

25:58.450 --> 26:01.010
如果是延时任务

26:01.490 --> 26:06.610
啊 然后接下来话 呃 调度是否有这个调度

26:07.090 --> 26:08.770
要用这个request

26:09.170 --> 26:10.370
hosttimeout

26:11.090 --> 26:12.770
啊 进行任务

26:13.730 --> 26:15.090
因任务的调度

26:15.650 --> 26:16.050
ok

26:16.610 --> 26:17.570
好 这是eaf

26:17.810 --> 26:19.010
啊 如果进 else

26:19.330 --> 26:25.250
进 else 说明什么 说明是不是就不是延时任务啊 对不对 你把折起来 折起来的话 那接下来这边 else

26:25.970 --> 26:26.370
说明

26:27.490 --> 26:28.850
说明不是

26:29.410 --> 26:30.210
延时任务

26:31.810 --> 26:35.250
啊 那不是延时任务的话 这边的话应该就是一个普通任务 好 这边啊

26:35.810 --> 26:41.330
啊 首先还是设置他的这个salt index 设置完了之后 大家回头他就可以进行一个什么

26:41.570 --> 26:44.130
是不是在任务队列里面进行一个排序 对不对

26:44.930 --> 26:46.450
设置了这个salt

26:47.410 --> 26:52.610
salt index 后啊 可以在任务队列

26:53.490 --> 26:57.490
里面进行一个排序 对不对

26:57.890 --> 27:00.610
好 然后接下来话 这边推入到什么呢

27:02.290 --> 27:04.530
推入到这个task clean

27:07.140 --> 27:08.820
推出到task clean

27:09.140 --> 27:09.860
任务队列

27:10.900 --> 27:12.260
任务队列啊

27:12.740 --> 27:18.980
好 然后这这个eaf你不用看 然后加这边你核心啊 核心你注意千万不要陷入这个细节

27:19.700 --> 27:25.380
啊 看圆码的时候千万不要陷入这个细节啊 你陷入到细节的话 你有可能就出不来了

27:25.860 --> 27:30.580
ok 你这边呢着重就什么 着重就看他这一块代码 他最终是要干什么

27:31.140 --> 27:32.740
啊 他这边呢是进行一些设置

27:33.220 --> 27:34.980
对不对啊 设置这个easycreen

27:35.220 --> 27:40.020
他是这个q 好 然后这样最终他是要干嘛 最终的话他是要调用这个

27:40.580 --> 27:42.580
request hoster callback

27:43.220 --> 27:47.230
啊 最终最终调用

27:48.750 --> 27:51.550
最终调用什么呢 调用这个request

27:52.670 --> 27:54.830
request hoster callback

27:55.470 --> 27:57.310
进行任务的调用

28:00.370 --> 28:03.090
ok 那整个这个方法的话我们就看完了

28:03.570 --> 28:06.450
好 把这个方法的话我们把它放到我们的笔记里面

28:07.170 --> 28:08.770
啊 该方法

28:09.570 --> 28:10.610
该方法

28:11.410 --> 28:12.290
到这个分析

28:13.010 --> 28:13.410
如下

28:16.820 --> 28:18.020
ok 在这里

28:18.420 --> 28:24.900
啊 好 这边的话整个这个方法就是注意那么那么几个关键点啊 哪几个关键点呢

28:26.100 --> 28:26.900
啊 该方法

28:28.260 --> 28:31.620
该方法主要注意以下

28:33.220 --> 28:38.580
以下几个关键点啊 来我们来捋一捋啊 哪几个关键点

28:39.140 --> 28:40.980
首先的话就是你的这个任务对立

28:41.540 --> 28:46.740
任务对立有两个 一个是task cream 一个是timer cream啊 这个注意

28:48.980 --> 28:50.420
关于任务对立

28:51.380 --> 28:53.300
任务对立有两个

28:54.260 --> 28:56.900
一个是什么呢 一个是task cream

28:58.580 --> 29:01.460
啊 另一个是timer cream

29:03.220 --> 29:06.900
对不对好 task cream task cream

29:07.860 --> 29:10.260
然后存放普通任务

29:11.220 --> 29:12.820
普通任务

29:12.820 --> 29:14.260
而这个timer cream

29:15.380 --> 29:17.300
timer cream存放什么

29:17.300 --> 29:19.380
这存放这个就是延时任务

29:20.580 --> 29:24.420
延时任务啊 再加任务对立内部

29:25.540 --> 29:32.180
任务对立内部用到了什么呢 用到了小顶堆

29:33.140 --> 29:37.300
小顶堆的这个算法 啊 保证这个始终

29:38.500 --> 29:41.060
始终这个放进去的

29:41.940 --> 29:44.420
放进去的这个这个任务

29:45.300 --> 29:48.340
能够进行正常的排序

29:49.780 --> 29:50.740
正常的排序

29:50.740 --> 29:54.500
然后回头通过什么呢 通过这个peak

29:55.140 --> 29:57.460
我们放进去的时候 放进去是使用的是什么

29:57.460 --> 29:58.660
所以用的是铺锡方法

29:59.700 --> 30:01.940
还记得吧 这边啊 这边是铺锡方法

30:02.020 --> 30:04.500
好 取的时候 取的时候是使用什么

30:04.500 --> 30:06.660
所以用的是这个peak

30:07.780 --> 30:09.940
在这里是peak对不对

30:10.660 --> 30:13.460
回头通过这个peak 取出任务是

30:14.100 --> 30:17.220
取出任务是始终

30:18.900 --> 30:22.740
取出的是啊 这个时间

30:23.700 --> 30:24.500
优先级

30:26.100 --> 30:29.700
优先级最高的那个任务

30:30.660 --> 30:32.820
对吧 啊 这时间第一点

30:32.820 --> 30:35.940
好 再加第二点 第二点的话就是这边

30:35.940 --> 30:37.300
这边的话 我看一下

30:38.180 --> 30:40.340
嗯 就这里 这里的话 它会根据什么呢

30:40.340 --> 30:42.980
就是根据你这边传入的啊

30:42.980 --> 30:48.340
这个priority level 是不是进行一个这个timeout的设置

30:49.860 --> 30:51.780
对吧 第二点

30:52.340 --> 30:52.900
根据

30:53.460 --> 30:57.380
传入的这个不同的priority level

30:57.380 --> 30:58.900
这个是不是就是优先级的等级

30:59.460 --> 31:03.140
啊 然后会进行不同的

31:03.700 --> 31:06.580
什么呀 会进行这个不同的这个timeout

31:08.180 --> 31:10.900
timeout的这个设置

31:11.860 --> 31:13.700
对 会进行这个不同的设置

31:14.260 --> 31:15.620
好 设置完了之后

31:15.620 --> 31:18.180
然后接下来你这边 你这个start time

31:18.900 --> 31:20.260
啊 就这个current time

31:20.260 --> 31:21.860
它这边的话 就会具有一个什么

31:21.860 --> 31:23.940
是不是具有一个这个时间关系啊

31:23.940 --> 31:26.180
时间关系就是刚才给大家看到那张图

31:26.180 --> 31:27.860
就这样图啊 把这张图

31:28.500 --> 31:30.180
给大家放到笔记里面

31:31.940 --> 31:33.220
啊 它这边这个时间走

31:37.060 --> 31:37.780
好 放到这儿

31:41.020 --> 31:44.860
OK 会进行这个不同的这个timeout设置

31:44.860 --> 31:46.060
啊 然后接下来任务

31:47.420 --> 31:49.180
任务的这个timeout

31:49.740 --> 31:53.260
timeout时间啊 也就不一样了

31:53.820 --> 31:56.060
不一样了 对不对

31:56.060 --> 31:58.620
有的比这个当前时间

32:00.380 --> 32:02.700
当前时间还要小

32:04.300 --> 32:05.660
还要小 对不对

32:05.660 --> 32:07.100
当前时间就是这个current time

32:07.100 --> 32:07.980
你比它还小

32:07.980 --> 32:08.860
那这个代表什么

32:09.500 --> 32:13.260
这个代表是不是立即需要执行的

32:14.140 --> 32:15.820
对了 你通过名字也可以看出来

32:15.820 --> 32:19.340
这个叫做inmediate立即的意思

32:19.340 --> 32:20.940
你可以去查一下这个单词

32:20.940 --> 32:21.980
立即的意思

32:21.980 --> 32:24.380
代表立即需要执行的

32:25.020 --> 32:25.660
对不对

32:25.660 --> 32:29.420
那有的时间绝大部分时间

32:29.500 --> 32:31.420
应该说是绝大部分

32:32.220 --> 32:34.380
绝大部分时间比这个当前时间

32:35.340 --> 32:36.780
当前时间大

32:37.340 --> 32:37.980
对不对

32:37.980 --> 32:39.500
那接下来后面的这个任务的话

32:39.500 --> 32:40.380
其实就根据什么

32:40.380 --> 32:41.340
什么根据你的这个时间

32:41.900 --> 32:42.780
怎么来进行执行

32:43.500 --> 32:43.820
对不对

32:46.110 --> 32:46.750
啊 这是这个

32:47.390 --> 32:50.430
好 然后看一下还没什么要记录的

32:51.870 --> 32:52.830
啊 还有就是这边

32:53.550 --> 32:54.590
不同的任务

32:57.390 --> 32:58.510
稍等啊 卡住了

33:00.990 --> 33:02.030
啊 不同的任务

33:02.990 --> 33:04.430
不同的任务

33:04.990 --> 33:05.950
这个调用

33:07.630 --> 33:08.110
最终

33:09.230 --> 33:11.390
调用的函数不一样

33:12.910 --> 33:15.070
啊 那你这边如果是这个普通任务

33:16.030 --> 33:16.990
普通任务

33:16.990 --> 33:18.110
普通任务的话他这边

33:18.990 --> 33:19.710
调用的是什么

33:20.350 --> 33:22.590
普通任务他这边是这个request

33:23.310 --> 33:24.270
host callback

33:25.470 --> 33:26.030
对不对

33:26.030 --> 33:27.070
调用的是这个

33:27.070 --> 33:29.630
啊 大家这边传了一个这个flush walk

33:29.630 --> 33:30.750
这个我们后面都会看啊

33:31.310 --> 33:31.950
flush walk

33:33.070 --> 33:34.750
好 然后如果是延时任务

33:35.550 --> 33:36.830
延时任务

33:36.830 --> 33:38.750
延时任务他这边调用的是什么

33:39.470 --> 33:41.230
他这边调用的是这个

33:41.790 --> 33:42.430
是这一块

33:43.070 --> 33:43.550
对不对

33:43.550 --> 33:45.150
传了两个参数过去

33:46.110 --> 33:48.270
一个是这个handle timeout

33:48.270 --> 33:49.550
一个是start time

33:49.550 --> 33:50.430
减去什么呢

33:50.430 --> 33:51.470
减去current time

33:53.390 --> 33:54.030
ok

33:54.030 --> 33:55.070
好了 我们这一节课的话

33:55.070 --> 33:55.870
我们主要是看什么呢

33:55.870 --> 33:56.990
主要是看这个普通任务

33:57.790 --> 33:59.230
主要是看普通任务

33:59.230 --> 33:59.710
ok

34:02.370 --> 34:03.090
好 接下来的话

34:03.090 --> 34:04.290
我们继续往下面看

34:04.290 --> 34:06.050
那我们这节课看普通任务的话

34:06.130 --> 34:07.010
那就应该看谁

34:07.010 --> 34:07.970
我看他呀

34:07.970 --> 34:08.530
对不对

34:08.530 --> 34:10.370
requesthost callback

34:11.090 --> 34:12.370
好 回到我们这边

34:13.970 --> 34:14.770
回到这边

34:16.370 --> 34:17.170
让我们来看一下

34:18.370 --> 34:20.370
requesthost callback

34:20.930 --> 34:21.410
在这里

34:22.290 --> 34:22.770
对不对

34:22.770 --> 34:23.650
在这里

34:23.650 --> 34:25.170
好 我们把整个这个方法

34:25.170 --> 34:26.050
我把他复制

34:26.610 --> 34:26.930
复制了

34:26.930 --> 34:27.890
让我把他拿过来

34:27.890 --> 34:29.090
我们一个一个取出来看

34:29.650 --> 34:29.970
ok

34:29.970 --> 34:30.770
哎 这个方法很

34:31.650 --> 34:32.370
很简单

34:32.370 --> 34:32.850
对不对

34:32.850 --> 34:33.490
而这边呢

34:33.490 --> 34:34.930
requesthost callback

34:35.010 --> 34:36.370
这边接收一个参数

34:36.370 --> 34:37.010
callback

34:38.290 --> 34:39.330
接收一个callback

34:39.330 --> 34:40.290
callback是什么呀

34:40.850 --> 34:42.930
callback是不是你这边调用的时候

34:42.930 --> 34:43.250
这边

34:44.450 --> 34:46.050
传入的这个flash walk

34:46.610 --> 34:46.930
对不对

34:46.930 --> 34:47.970
但是这个flash walk

34:47.970 --> 34:49.250
我们这个现在是什么

34:49.250 --> 34:49.730
我不知道

34:50.370 --> 34:50.610
对不对

34:50.610 --> 34:51.810
那我们回头再来看

34:51.810 --> 34:52.530
但我现在的话

34:52.530 --> 34:54.370
我这边我先把他标注出来

34:54.370 --> 34:55.170
可不可以

34:55.170 --> 34:55.650
对不对

34:55.650 --> 34:56.290
这个的话是

34:57.330 --> 34:59.810
是在调用的时候

35:00.370 --> 35:02.690
传入的flash walk

35:03.810 --> 35:04.050
好

35:04.050 --> 35:04.690
然后接下来

35:04.690 --> 35:06.130
把这个值又给了什么

35:06.130 --> 35:07.650
给了这个scheduled

35:07.650 --> 35:08.690
host callback

35:08.690 --> 35:09.970
那这个scheduled

35:09.970 --> 35:10.850
host callback

35:10.850 --> 35:11.650
他对应了值

35:14.060 --> 35:15.020
他对应了值

35:15.020 --> 35:15.900
也就是什么

35:15.900 --> 35:16.220
是吧

35:16.220 --> 35:17.260
flash walk

35:18.540 --> 35:18.860
对不对

35:19.500 --> 35:19.820
好

35:19.820 --> 35:20.540
然后接下来

35:20.540 --> 35:20.700
的话

35:20.700 --> 35:22.380
这边有一个义父判断

35:22.380 --> 35:23.180
义父这边

35:23.180 --> 35:25.100
is the message loop running

35:25.100 --> 35:25.500
这边呢

35:25.500 --> 35:26.700
是你通过名字

35:26.700 --> 35:27.580
其实都看得出来

35:27.580 --> 35:28.460
这边是不是这个

35:28.460 --> 35:29.100
消息循环

35:29.660 --> 35:30.140
对不对

35:30.140 --> 35:31.420
把这个设置为True

35:31.420 --> 35:32.700
这个这个一看就是什么

35:32.700 --> 35:34.220
是不是也是做那种开关的

35:35.180 --> 35:35.580
对不对

35:36.300 --> 35:37.180
在react里面

35:37.180 --> 35:37.900
很多这种

35:37.900 --> 35:39.740
就是做这种开关的这种作用的

35:40.540 --> 35:40.780
好

35:40.780 --> 35:41.580
他这边核心

35:41.580 --> 35:42.460
其实就是怎么呢

35:42.460 --> 35:44.300
核心就是调用这个方法

35:44.300 --> 35:45.260
也就是我们这边

35:45.260 --> 35:46.220
其实可以记录一下

35:46.700 --> 35:47.340
request

35:47.980 --> 35:49.180
host callback

35:49.180 --> 35:50.060
没做什么事情

35:51.180 --> 35:52.140
这个函数

35:53.580 --> 35:55.180
这个函数

35:55.180 --> 35:57.180
没有做什么事情

35:58.540 --> 36:00.140
做什么事情

36:00.700 --> 36:02.380
主要就是什么

36:02.380 --> 36:03.740
主要就是调用

36:04.460 --> 36:05.100
调用这个

36:06.540 --> 36:07.260
对不对

36:07.260 --> 36:08.460
主要就是调用它

36:08.460 --> 36:10.300
那我们这两个就一起看了

36:10.300 --> 36:11.020
好吧

36:11.020 --> 36:11.980
我们来看一下这个

36:13.820 --> 36:14.780
看一下它

36:14.780 --> 36:15.980
它又是在做什么

36:19.550 --> 36:20.430
这边

36:20.430 --> 36:21.710
这边首先这个

36:21.710 --> 36:22.670
它是一个

36:24.990 --> 36:25.710
它是个辨量

36:26.430 --> 36:27.390
一开始是个辨量

36:27.390 --> 36:28.190
辨量的话

36:28.190 --> 36:30.430
这边那就是应该是一个undefy

36:30.430 --> 36:30.910
对不对

36:30.910 --> 36:32.670
undefy非常奇怪的是

36:32.670 --> 36:33.390
它这边

36:33.390 --> 36:33.950
我看一下

36:36.720 --> 36:37.120
这边

36:37.680 --> 36:38.160
这边

36:38.160 --> 36:39.520
这边它就给了一个值

36:41.200 --> 36:41.920
这边

36:41.920 --> 36:42.720
skidio

36:43.920 --> 36:46.160
skidio perform walk

36:46.160 --> 36:47.600
然后这边的话是这个

36:48.560 --> 36:49.440
我们来看一下

36:49.440 --> 36:49.760
等一下

36:49.760 --> 36:50.560
我看一下这里

36:56.000 --> 36:58.000
它这边它做了一个判断

36:58.000 --> 37:00.080
这边做了一个不同环境的判断

37:00.080 --> 37:01.200
把它整个这一块

37:01.200 --> 37:02.160
把它拿过来

37:03.360 --> 37:04.400
它这边是这个样子的

37:06.000 --> 37:07.040
我们来看一下

37:07.040 --> 37:07.920
首先的话这个

37:07.920 --> 37:08.400
这个的话

37:08.400 --> 37:09.920
你目前对应的值是什么

37:10.080 --> 37:11.840
是不是对应的值是undefy

37:12.560 --> 37:13.360
对不对

37:13.360 --> 37:14.480
对应是undefy之后

37:14.480 --> 37:15.920
人家它这边来根据你的这个

37:15.920 --> 37:18.160
local set immediate

37:18.160 --> 37:19.600
是否是function

37:19.600 --> 37:20.560
它这边是什么呢

37:20.560 --> 37:21.200
这边是这个

37:22.080 --> 37:23.040
node.js

37:23.040 --> 37:25.440
或者是这个就的这个ie这个环境

37:25.440 --> 37:26.480
它这边解释了一下

37:27.120 --> 37:28.640
there's a few reasons

37:29.200 --> 37:31.120
for why we prefer

37:31.120 --> 37:33.040
这个set immediate

37:33.040 --> 37:34.800
就是这边的话有一些这个原因

37:34.800 --> 37:36.640
就为什么我们选择这个

37:36.640 --> 37:37.840
set immediate

37:37.840 --> 37:39.120
它这边给了些原因

37:39.200 --> 37:40.400
这边还给了个链接

37:40.400 --> 37:41.680
好那这这一块我们就不要了

37:42.320 --> 37:42.960
ok

37:42.960 --> 37:44.800
这一块你有兴趣你下来自己看一下

37:44.800 --> 37:46.640
我把这个链接给大家留着嘛

37:48.320 --> 37:49.520
把链接给大家留着

37:51.700 --> 37:52.020
ok

37:52.820 --> 37:53.940
好那这边判断

37:53.940 --> 37:54.820
如果你这个

37:54.820 --> 37:55.780
这个是function的话

37:55.780 --> 37:56.740
那我这边这个

37:56.740 --> 37:57.780
它对应的就是什么

37:57.780 --> 38:00.260
对应的就是这个local set immediate

38:00.820 --> 38:02.900
好那如果你这个type of

38:02.900 --> 38:04.500
这个message channel

38:04.500 --> 38:06.020
不等于这个undefy

38:06.020 --> 38:06.820
那它就用什么

38:06.820 --> 38:08.100
是不是就用message channel

38:09.060 --> 38:09.780
对不对

38:09.860 --> 38:11.780
那大多数情况下

38:12.180 --> 38:13.780
大多数情况下

38:14.420 --> 38:16.900
这个使用的是什么

38:16.900 --> 38:18.580
使用的是这个message channel

38:19.540 --> 38:22.260
使用的是message channel

38:23.540 --> 38:24.420
这个message channel

38:24.420 --> 38:25.700
是不是也是上几颗讲过的

38:26.260 --> 38:26.740
对不对

38:26.740 --> 38:29.140
你看它这边就用的是message channel

38:29.140 --> 38:30.660
来进行的一个调度

38:30.660 --> 38:32.020
好人家这个这个就什么了

38:32.020 --> 38:34.180
这个是使用这个set timeout

38:34.180 --> 38:35.300
进行一个到底

38:35.300 --> 38:38.100
有的人说这个local set timeout是什么

38:38.100 --> 38:39.060
local set timeout

38:39.060 --> 38:41.620
它这边其实就是timeout

38:41.620 --> 38:43.060
就是这个set timeout

38:43.060 --> 38:43.860
你这边看一下吧

38:45.860 --> 38:46.180
在这

38:46.900 --> 38:47.700
在这

38:47.700 --> 38:51.620
const local set timeout

38:51.620 --> 38:53.380
这边看你这个是否是function

38:53.380 --> 38:54.980
是function这边就是什么

38:54.980 --> 38:55.620
set timeout

38:56.180 --> 38:56.660
对不对

38:56.660 --> 38:59.700
所以它这边实际上就是set timeout

39:01.700 --> 39:02.900
这个就你可以写一下

39:02.900 --> 39:04.660
这个相当于就是set timeout

39:05.700 --> 39:07.860
set timeout进行

39:09.300 --> 39:10.100
进行到底

39:12.820 --> 39:13.220
ok

39:13.220 --> 39:15.380
那觉得多数情况下的话

39:15.380 --> 39:16.420
其实都是什么

39:16.420 --> 39:16.980
都是它

39:17.780 --> 39:18.660
都是它

39:18.660 --> 39:19.380
ok

39:19.380 --> 39:19.620
好了

39:19.620 --> 39:20.900
那接下来我们这边就知道了

39:20.900 --> 39:21.940
这边scaled

39:21.940 --> 39:24.340
这个scaleder

39:24.340 --> 39:26.260
然后这个perform work

39:26.260 --> 39:27.860
这个until deadline

39:27.860 --> 39:28.820
这边就是什么

39:28.820 --> 39:30.260
这边的话实际上就是

39:30.260 --> 39:32.260
生成一个message channel

39:32.260 --> 39:34.020
那进行一个调度

39:34.660 --> 39:34.980
对不对

39:36.740 --> 39:38.500
这边就是实力化

39:39.620 --> 39:41.140
实力化message channel

39:42.660 --> 39:45.780
然后进行后面的调度

39:46.740 --> 39:47.060
ok

39:47.700 --> 39:49.220
好把这个就把它拿过来

39:49.940 --> 39:50.580
放到这边

39:52.800 --> 39:53.680
放到笔记里面

39:56.270 --> 39:57.870
这边是request

39:58.590 --> 39:59.470
然后host

40:00.190 --> 40:01.070
这个callback

40:02.270 --> 40:02.990
callback

40:06.110 --> 40:07.310
那以及什么呢

40:07.310 --> 40:07.950
以及这个

40:10.180 --> 40:10.820
以及这个

40:12.100 --> 40:12.420
和

40:14.500 --> 40:14.980
和它

40:14.980 --> 40:15.220
对吧

40:15.300 --> 40:16.340
这个名字

40:16.340 --> 40:17.060
相当长

40:17.060 --> 40:18.020
相当长

40:18.020 --> 40:18.260
好

40:18.260 --> 40:18.820
我们这边

40:18.820 --> 40:19.940
我们这边还是记录一下

40:20.820 --> 40:20.980
好

40:20.980 --> 40:22.100
这边这个request

40:22.100 --> 40:23.060
host callback

40:25.250 --> 40:27.890
主要就是调用了

40:27.890 --> 40:28.450
什么呢

40:28.450 --> 40:29.090
调用了它

40:30.850 --> 40:31.410
对不对

40:31.410 --> 40:32.930
主要就是调用了它

40:32.930 --> 40:34.450
而它又是干嘛呢

40:34.450 --> 40:35.330
它一开始

40:36.210 --> 40:38.050
一开始是undefined

40:38.930 --> 40:39.650
对不对

40:39.650 --> 40:39.890
好

40:39.890 --> 40:43.250
然后根据这个不同的这个环境

40:44.050 --> 40:44.610
选择

40:46.850 --> 40:48.370
选择这个不同的

40:51.230 --> 40:51.790
生成

40:52.350 --> 40:53.310
这个红任务

40:54.190 --> 40:54.750
的方式

40:55.630 --> 40:56.030
对不对

40:56.030 --> 40:57.310
那最终它选择了什么

40:57.310 --> 40:58.910
选择了这个message channel

40:59.550 --> 40:59.950
对吧

40:59.950 --> 41:00.750
message channel

41:01.470 --> 41:01.710
好

41:01.710 --> 41:02.270
那接下来

41:02.270 --> 41:04.350
我们这边就需要来看一下这里了

41:04.350 --> 41:04.990
看一下这一块

41:05.630 --> 41:06.990
这边message channel

41:06.990 --> 41:07.870
它这边port

41:07.870 --> 41:08.990
等于这个channel

41:08.990 --> 41:09.790
port2

41:09.790 --> 41:11.310
有这个port是port2

41:12.190 --> 41:12.510
好的

41:12.510 --> 41:13.150
这个port1

41:13.150 --> 41:13.790
port1的话

41:13.790 --> 41:14.670
监听一个什么呢

41:14.670 --> 41:16.190
监听一个这个message

41:16.190 --> 41:16.990
这个message的话

41:16.990 --> 41:17.630
这边是什么

41:18.190 --> 41:19.310
这边的话是

41:19.310 --> 41:20.990
perform walk

41:20.990 --> 41:22.030
然后接下来的话

41:22.030 --> 41:24.430
这个是until dead night

41:25.310 --> 41:25.790
看到没有

41:25.790 --> 41:26.910
掉了这个函数

41:26.910 --> 41:27.870
所以说我们接下来

41:27.870 --> 41:28.670
我们来看一下它

41:29.310 --> 41:30.350
它是在做什么

41:33.460 --> 41:34.420
看一下这个函数

41:35.060 --> 41:36.020
perform work

41:36.820 --> 41:38.020
until dead night

41:41.500 --> 41:41.900
回到

41:42.940 --> 41:43.580
回到这边

41:44.780 --> 41:45.420
回到这边

41:48.400 --> 41:48.560
好

41:48.560 --> 41:49.440
我们这边来看一下

41:51.280 --> 41:52.960
perform until

41:53.680 --> 41:54.560
这边应该是

41:56.160 --> 41:56.720
这边应该是它

41:57.600 --> 41:58.240
对不对

41:58.240 --> 41:59.040
perform

41:59.040 --> 41:59.840
perform

41:59.840 --> 42:00.640
然后work

42:00.640 --> 42:01.600
until dead night

42:02.560 --> 42:03.360
也是一个方法

42:03.920 --> 42:04.080
好

42:04.080 --> 42:04.880
我们把人拿过来

42:07.100 --> 42:07.820
好来看一下

42:10.690 --> 42:10.770
好

42:10.770 --> 42:12.050
这边写了大量的注释

42:12.050 --> 42:13.250
写大量的注释

42:13.250 --> 42:13.410
好

42:13.410 --> 42:14.370
我们这边我们来看一下

42:16.210 --> 42:16.370
好

42:16.370 --> 42:16.850
这边

42:16.850 --> 42:17.410
这边呢

42:17.410 --> 42:18.130
首先的话

42:18.130 --> 42:18.690
const

42:18.690 --> 42:20.130
一个current time

42:20.130 --> 42:21.890
等于一个getcurrent time

42:21.890 --> 42:22.850
这个是获取什么

42:22.850 --> 42:23.890
这是获取当前时间

42:24.450 --> 42:25.410
我们先说一下这里

42:26.210 --> 42:27.330
这里的话它有一个什么

42:27.330 --> 42:28.610
是不是有一个if else

42:29.250 --> 42:29.570
对不对

42:29.570 --> 42:30.770
有一个if else

42:30.770 --> 42:31.650
if else完了之后

42:31.650 --> 42:33.010
这边的话有一个这个

42:33.010 --> 42:34.450
needspint

42:34.450 --> 42:35.410
等于一个force

42:36.050 --> 42:37.170
所以你看这边看圆码

42:37.170 --> 42:37.810
就是这样子的

42:37.810 --> 42:39.090
一定要把心沉下来

42:39.890 --> 42:40.770
之前给你们说了

42:40.770 --> 42:42.930
就是这个是以年为单位的

42:42.930 --> 42:43.250
为什么

42:43.250 --> 42:45.330
因为太多这种关联的了

42:45.330 --> 42:45.650
对不对

42:45.650 --> 42:46.130
你现在的话

42:46.130 --> 42:47.330
你看到那你又不知道

42:47.330 --> 42:48.850
这个needspint又是什么

42:49.570 --> 42:49.890
对不对

42:50.450 --> 42:51.010
OK

42:51.010 --> 42:52.610
所以一定要把心沉下来

42:53.010 --> 42:54.370
一定要把心沉下来

42:54.370 --> 42:55.090
没关系

42:55.170 --> 42:55.570
没关系

42:55.570 --> 42:56.050
咱们这边

42:56.050 --> 42:57.010
咱们来看关键的

42:57.490 --> 42:58.130
关键的话

42:58.130 --> 42:59.490
它这边是判断这个

43:00.290 --> 43:02.530
这个scheduledhost

43:02.530 --> 43:03.410
callback

43:03.410 --> 43:04.850
是否不为空

43:04.850 --> 43:06.610
那这玩意儿是什么

43:06.610 --> 43:07.970
这玩意儿还记不记得

43:07.970 --> 43:08.930
我们刚才的话

43:08.930 --> 43:11.570
这个scheduledhost callback

43:12.210 --> 43:13.810
这边说把这个callback给它

43:14.370 --> 43:14.690
对不对

43:14.690 --> 43:16.370
那你这个scheduledhost callback

43:16.370 --> 43:17.010
就等于什么

43:17.010 --> 43:18.770
就等于flashwork

43:19.570 --> 43:19.890
对不对

43:19.890 --> 43:21.490
因为你这边在调用的时候

43:22.770 --> 43:24.050
这边在调用的时候

43:24.210 --> 43:25.890
是不传入的是这个flashwork

43:26.370 --> 43:26.690
对不对

43:26.690 --> 43:28.050
那你猜都猜到这个flashwork

43:28.050 --> 43:28.850
应该是个什么

43:28.850 --> 43:29.570
这边应该是个

43:29.570 --> 43:30.290
肯定是个函数

43:30.930 --> 43:31.570
对不对

43:31.570 --> 43:32.370
它就是做什么

43:32.370 --> 43:33.250
做清理工作的

43:35.090 --> 43:35.250
好

43:35.250 --> 43:36.050
回到这边

43:36.050 --> 43:36.930
我们这边来说一下

43:37.970 --> 43:38.530
这边的话

43:39.330 --> 43:40.930
scheduledhost callback

43:42.930 --> 43:43.970
它就是什么

43:43.970 --> 43:48.610
就是之前所传的这个flashwork

43:49.330 --> 43:50.370
是叫flashwork吧

43:51.170 --> 43:51.650
对了

43:51.650 --> 43:52.290
flashwork

43:52.850 --> 43:53.250
OK

43:53.330 --> 43:54.450
它如果不为空

43:54.450 --> 43:54.930
不为空

43:54.930 --> 43:56.050
那将我们进这个义服

43:56.050 --> 43:57.010
我们来看一下

43:57.010 --> 43:57.810
它这边的话

43:57.810 --> 43:59.250
首先获取当前时间

44:01.090 --> 44:03.810
获取当前的时间

44:04.930 --> 44:05.250
好

44:05.250 --> 44:05.810
然后接下来

44:05.810 --> 44:06.370
它这边的话

44:07.090 --> 44:09.010
keep track of the start time

44:09.010 --> 44:10.930
So we can measure

44:11.490 --> 44:14.530
how long the main thread has been blocked

44:14.530 --> 44:15.250
这个是什么呢

44:15.250 --> 44:16.290
这个相当于它这边

44:16.290 --> 44:17.410
这个start time

44:17.410 --> 44:18.770
注意这个start time

44:18.770 --> 44:21.090
它不是我们刚才那个start time

44:21.090 --> 44:22.530
我们刚才是不是有个start time

44:23.330 --> 44:24.690
在最开始的时候

44:25.650 --> 44:26.130
嗯

44:26.130 --> 44:26.450
这里

44:27.170 --> 44:28.290
这里是不是有个start time

44:28.850 --> 44:29.170
对不对

44:29.170 --> 44:31.250
这个的话是在哪个方法里面

44:31.250 --> 44:34.610
在这个unstable schedule callback里面

44:34.610 --> 44:36.210
这里有个这个start time

44:36.210 --> 44:36.450
好

44:36.450 --> 44:38.050
注意这个start time不是

44:39.490 --> 44:40.370
这个

44:40.370 --> 44:40.770
这里

44:41.810 --> 44:43.810
这里的start time

44:45.410 --> 44:46.130
并非

44:46.690 --> 44:47.170
什么呢

44:47.170 --> 44:47.970
并非那个

44:48.530 --> 44:49.490
就这个方法里面

44:52.610 --> 44:53.250
这个方法

44:54.210 --> 44:54.610
方法

44:55.170 --> 44:56.770
里面的这个start time

44:58.850 --> 45:00.130
而是一个什么呢

45:00.130 --> 45:00.770
而是

45:01.570 --> 45:04.290
一个全局辩量

45:04.930 --> 45:07.330
默认值为负一

45:08.450 --> 45:08.690
啊

45:08.690 --> 45:09.490
默认值为负一

45:09.490 --> 45:10.370
然后我们这边我们来看一下

45:11.010 --> 45:11.410
是不是

45:13.330 --> 45:13.730
这边

45:15.090 --> 45:16.130
这边我们把它展开

45:16.130 --> 45:16.850
展开之后

45:16.850 --> 45:18.450
然后下这边你看这个start time

45:19.090 --> 45:19.570
是不是在这里

45:20.450 --> 45:21.170
对不对

45:21.170 --> 45:21.570
在这里

45:24.300 --> 45:24.620
啊

45:24.620 --> 45:25.260
往上边吧

45:27.340 --> 45:27.820
在这里

45:28.460 --> 45:28.780
对

45:28.780 --> 45:29.660
默认值为负一

45:29.660 --> 45:31.980
大家这边要把你的这个当前时间

45:31.980 --> 45:32.700
复制给它

45:32.700 --> 45:33.740
它是哪来干什么的

45:34.300 --> 45:34.940
哪来干什么的

45:34.940 --> 45:36.540
人家这行注释是不给你说的

45:36.540 --> 45:37.420
很清楚了

45:37.420 --> 45:38.060
是不是来

45:38.060 --> 45:40.620
测量你这个就是主线程

45:40.620 --> 45:42.220
会被主设多久

45:42.220 --> 45:42.620
对不对

45:42.620 --> 45:43.100
说白了

45:43.100 --> 45:44.540
其实就是用来

45:45.260 --> 45:45.900
测量

45:46.540 --> 45:47.820
任务的执行时间

45:48.700 --> 45:51.020
任务的执行时间

45:52.300 --> 45:55.260
从而能够知道

45:56.700 --> 45:57.740
知道

45:57.740 --> 46:00.460
主线程被

46:00.460 --> 46:02.380
主设了多久

46:03.740 --> 46:04.060
对吧

46:04.780 --> 46:05.100
好

46:05.100 --> 46:05.900
然后接下来的话

46:05.900 --> 46:07.100
这边 has time

46:07.580 --> 46:08.140
这个

46:08.140 --> 46:09.420
remarrying等于true

46:09.420 --> 46:10.140
这个是什么

46:10.140 --> 46:10.780
是吧

46:10.780 --> 46:13.020
就是默认这个就是剩下的时间为true

46:13.740 --> 46:14.460
对不对

46:14.460 --> 46:15.420
还有剩余时间

46:17.180 --> 46:17.660
默认

46:18.300 --> 46:18.860
还有

46:20.460 --> 46:21.180
剩余时间

46:24.180 --> 46:24.740
还有

46:25.780 --> 46:26.420
剩余

46:27.940 --> 46:28.260
时间

46:29.540 --> 46:32.050
这边

46:32.050 --> 46:33.010
这边是什么

46:33.010 --> 46:34.850
什么 has more work

46:34.850 --> 46:35.570
就是什么

46:35.570 --> 46:37.090
就是还有需要做的任务

46:37.490 --> 46:37.890
对不对

46:38.690 --> 46:39.650
默认

46:39.650 --> 46:44.130
就是还有需要做的任务

46:44.130 --> 46:45.570
原来这边写的有

46:46.370 --> 46:46.770
就是

46:47.810 --> 46:48.450
if

46:48.450 --> 46:51.170
这个 schedule the host call back errors

46:51.170 --> 46:53.090
然这个 has more work

46:53.090 --> 46:54.770
will remain true

46:55.330 --> 46:56.770
就这个人他会保持

46:56.770 --> 46:58.370
保持是true

46:58.370 --> 46:59.650
保持true就代表什么

46:59.810 --> 47:00.370
什么

47:00.370 --> 47:01.090
还有这个

47:01.090 --> 47:02.210
就是要做的任务

47:02.210 --> 47:03.170
那他会干嘛

47:03.170 --> 47:05.330
continue the work loop

47:05.330 --> 47:07.330
work loop就是那个工作循环

47:07.330 --> 47:09.490
他会重新这个工作循环

47:09.490 --> 47:10.210
ok

47:10.210 --> 47:10.690
好

47:10.690 --> 47:12.450
这边他就做这个try

47:12.450 --> 47:13.250
try

47:13.890 --> 47:14.930
这边就干嘛呢

47:14.930 --> 47:15.970
这边就是使用

47:17.090 --> 47:19.810
使用这个schedule the host call back

47:19.810 --> 47:20.930
这个再上强调

47:20.930 --> 47:22.210
这个最玩意儿就是什么

47:22.850 --> 47:25.970
这个就是你最开始传入的flashwork

47:27.330 --> 47:29.170
就是你最开始传入flashwork

47:30.210 --> 47:30.530
好

47:30.530 --> 47:31.970
然后接下来这边传入什么

47:31.970 --> 47:33.330
传入这个就是时间

47:34.290 --> 47:35.010
时间是tue

47:35.730 --> 47:36.210
还有就是什么呢

47:36.210 --> 47:37.570
还有就是当前的开始时间

47:38.290 --> 47:38.930
对不对

47:38.930 --> 47:40.210
这个一开始是一个tue

47:40.690 --> 47:41.490
这个tue

47:41.490 --> 47:41.810
好

47:41.810 --> 47:42.770
那这个这个是什么

47:42.770 --> 47:43.010
什么

47:43.010 --> 47:43.570
开始时间

47:45.970 --> 47:46.450
开始

47:48.610 --> 47:49.010
开始

47:49.970 --> 47:50.370
时间

47:51.330 --> 47:51.650
对吧

47:53.730 --> 47:53.970
好

47:53.970 --> 47:54.370
那这个

47:54.370 --> 47:56.610
这个整个这个肯定是反回一个什么

47:56.610 --> 47:57.890
是反回一个布尔子

47:58.690 --> 47:59.410
对不对

47:59.410 --> 48:01.570
他这边让他反回的是一个布尔子

48:02.530 --> 48:03.570
反回的是个布尔子

48:03.570 --> 48:03.730
啊

48:03.730 --> 48:04.370
这个布尔子

48:04.370 --> 48:07.010
然后重新给这个hashmorework负责

48:07.010 --> 48:07.410
啊

48:07.410 --> 48:08.130
如果是tue

48:10.130 --> 48:11.730
如果是tue

48:13.010 --> 48:13.890
代表什么

48:13.890 --> 48:15.410
是不代表工作没做完

48:16.050 --> 48:17.810
工作没做完

48:18.690 --> 48:19.170
对不对

48:19.170 --> 48:19.650
那force

48:20.610 --> 48:21.010
force

48:21.570 --> 48:22.450
代表

48:22.450 --> 48:23.250
说没有任务了

48:24.130 --> 48:25.650
没有任务了

48:25.650 --> 48:26.050
好了

48:26.050 --> 48:26.450
接下来的话

48:26.450 --> 48:26.850
这边

48:26.850 --> 48:28.050
如果你这边是tue

48:28.050 --> 48:28.450
tue的话

48:29.010 --> 48:29.250
啊

48:29.250 --> 48:30.370
这边写的要

48:30.370 --> 48:31.970
if there's more work

48:31.970 --> 48:33.650
就是还有更多的这个work

48:33.650 --> 48:34.690
然后接下来他就干嘛

48:34.690 --> 48:36.290
是不是进行一个这个message

48:36.290 --> 48:37.970
event的一个调度

48:37.970 --> 48:38.450
对不对

48:38.450 --> 48:38.610
啊

48:38.610 --> 48:39.650
那就进行个调度

48:40.530 --> 48:42.610
那么就使用什么

48:42.610 --> 48:43.650
使用message

48:44.290 --> 48:44.690
channel

48:47.810 --> 48:48.130
对吧

48:48.130 --> 48:48.610
你这玩意

48:48.610 --> 48:49.890
这玩意就是message channel嘛

48:49.890 --> 48:50.130
对吧

48:50.130 --> 48:51.490
使用message channel

48:51.490 --> 48:53.890
进行一个这个message

48:55.250 --> 48:56.050
message

48:56.050 --> 48:56.530
事件

48:58.050 --> 48:59.330
事件的这个调度

49:00.050 --> 49:00.450
对不对

49:00.530 --> 49:01.170
调度了之后

49:01.170 --> 49:02.690
他就放到这个任务队列里面

49:03.810 --> 49:04.690
就将任务

49:06.450 --> 49:12.130
就将任务放入到任务队列里面

49:13.170 --> 49:13.650
对不对

49:13.650 --> 49:14.770
方便你下一次

49:14.770 --> 49:16.930
浏览器这个重新渲染完了之后

49:16.930 --> 49:18.450
再从这个任务队列里面

49:18.450 --> 49:19.090
取出来

49:19.090 --> 49:20.210
再进行做

49:20.210 --> 49:20.770
对不对

49:20.770 --> 49:22.690
否则进l是l是就说明什么

49:22.690 --> 49:23.650
说明做完了

49:24.610 --> 49:25.730
说明做完了

49:26.290 --> 49:27.570
对对任务做完了

49:28.770 --> 49:29.730
任务做完了

49:29.810 --> 49:31.010
至于这边怎么

49:31.010 --> 49:32.610
ease message loop running啊

49:32.610 --> 49:33.570
这些这些就是什么

49:33.570 --> 49:34.690
这些就是一些开关了

49:35.490 --> 49:35.970
对不对

49:35.970 --> 49:36.370
他这个

49:36.930 --> 49:38.050
整个reactor里面

49:38.050 --> 49:38.930
他很多开关

49:39.330 --> 49:39.730
开关

49:39.730 --> 49:40.770
其中我们之前

49:40.770 --> 49:42.450
在写的这种轮波图的时候

49:42.450 --> 49:43.810
我们是不是也自己用到过了

49:44.290 --> 49:45.010
对不对

49:45.010 --> 49:45.890
写个开关

49:45.890 --> 49:46.690
如果是q

49:46.690 --> 49:47.650
他就进去

49:47.650 --> 49:48.690
否则的话他就不进去

49:49.330 --> 49:50.530
写一个这个开关的效果

49:51.330 --> 49:51.570
好

49:51.570 --> 49:52.210
这边任务做完了

49:52.210 --> 49:52.850
那把什么

49:52.850 --> 49:54.930
什么把这个schedule的host callback

49:54.930 --> 49:55.570
设置为什么

49:56.050 --> 49:56.610
设置为空

49:57.330 --> 49:57.730
对不对

49:58.130 --> 49:58.450
这个

49:59.810 --> 50:00.290
这个

50:01.330 --> 50:02.530
之前为什么

50:02.530 --> 50:04.370
之前为这个flash walk

50:05.730 --> 50:06.130
对不对

50:07.250 --> 50:07.970
之前是

50:08.690 --> 50:09.970
之前为flash walk

50:10.530 --> 50:12.210
然后设置为空

50:13.970 --> 50:14.290
ok

50:15.010 --> 50:15.650
这是这个

50:16.690 --> 50:17.570
不为空的情况下

50:17.570 --> 50:19.650
就是你这边有flash walk的情况下

50:20.210 --> 50:21.250
然后这样如果没有

50:21.250 --> 50:22.850
没有就是单纯的你看这边

50:23.490 --> 50:24.610
就把这个设置成force

50:25.410 --> 50:25.810
对不对

50:25.810 --> 50:26.850
大家这边如果做完了

50:26.850 --> 50:28.610
做完了也是把它设置为force

50:28.850 --> 50:29.650
这个设置为空

50:30.210 --> 50:30.850
对不对

50:30.850 --> 50:32.610
那这个方法我们就看完了

50:34.770 --> 50:35.650
回到这边

50:38.050 --> 50:38.690
回到这边

50:42.430 --> 50:44.190
来总结一下这个这个方法

50:44.190 --> 50:46.270
这个方法其实也就还好

50:47.310 --> 50:48.590
主要就是什么

50:48.590 --> 50:50.270
主要是不是其实就是在调用它

50:50.910 --> 50:52.670
你仔细想想是不是就是在做这个事情

50:53.390 --> 50:54.030
对不对

50:54.030 --> 50:55.310
其实主要就是在调用它

50:56.990 --> 50:57.550
该方法

50:59.070 --> 51:00.190
该方法

51:00.910 --> 51:01.790
实际上

51:02.430 --> 51:06.590
主要就是在调用它

51:06.590 --> 51:07.390
对不对

51:07.390 --> 51:08.270
而它又是什么

51:08.270 --> 51:11.390
它又是我们之前传的这个flash walk

51:12.110 --> 51:12.670
对不对

51:12.670 --> 51:12.990
好

51:12.990 --> 51:13.710
调用之后

51:14.990 --> 51:16.110
调用之后

51:16.830 --> 51:19.470
然后返回一个布尔茲

51:20.270 --> 51:21.070
对不对

51:21.070 --> 51:21.470
根据

51:22.190 --> 51:23.710
根据这个布尔茲

51:24.510 --> 51:25.230
布尔茲

51:27.310 --> 51:27.950
布尔茲

51:28.670 --> 51:30.510
来判断

51:30.510 --> 51:31.790
是否有

51:32.430 --> 51:34.110
就是还有剩余任务

51:34.110 --> 51:38.190
是否还有剩余的任务

51:38.190 --> 51:39.390
那如果还有

51:40.190 --> 51:41.150
如果还有

51:41.790 --> 51:42.990
就使用什么

51:42.990 --> 51:44.670
是不是使用这个message channel

51:47.890 --> 51:49.810
message channel

51:50.370 --> 51:52.850
是不是进行一个这个红任务

51:53.410 --> 51:54.770
红任务的这个包装

51:55.570 --> 51:56.130
对不对

51:56.210 --> 51:59.490
然后放入到任务对立

52:00.130 --> 52:00.530
里面

52:01.570 --> 52:02.290
ok

52:02.290 --> 52:05.570
这个的话就是这个perform work until deadline

52:06.130 --> 52:07.650
这个他做的这个事情

52:07.650 --> 52:09.970
你通过这个名字也看得出来

52:09.970 --> 52:10.450
对不对

52:10.450 --> 52:11.490
until直到

52:12.050 --> 52:13.570
直到什么直到 deadline

52:13.570 --> 52:14.290
deadline是什么

52:14.290 --> 52:15.010
期限的意思

52:15.650 --> 52:16.130
对不对

52:16.130 --> 52:17.890
我这边我就一直perform

52:17.890 --> 52:19.410
这个perform work

52:20.050 --> 52:21.410
就一直让你工作

52:21.410 --> 52:22.050
一直到什么呢

52:22.050 --> 52:23.170
一直到你这个期限

52:24.050 --> 52:24.850
对不对

52:25.010 --> 52:26.290
所以你英语好的话

52:26.290 --> 52:27.570
你看这个react

52:27.570 --> 52:28.690
看他这些名字

52:28.690 --> 52:30.130
你大概都可以猜得到

52:30.130 --> 52:31.410
他这个方法是干什么的

52:32.850 --> 52:33.650
好那接下来

52:33.650 --> 52:36.050
我们的重点自然而然就到哪里了

52:36.050 --> 52:36.850
就到他了

52:37.730 --> 52:38.850
他究竟在干什么

52:39.330 --> 52:40.450
他究竟是什么

52:41.010 --> 52:42.690
他是不是这个flash walk

52:43.570 --> 52:44.210
对不对

52:44.210 --> 52:45.250
说说我们接下来

52:45.250 --> 52:46.210
我们自然而然我们会

52:46.850 --> 52:47.970
我们的目光

52:47.970 --> 52:49.570
就会集中到哪里了

52:49.570 --> 52:51.410
集中到这个flash walk

52:52.850 --> 52:53.730
flash walk

52:54.290 --> 52:55.090
我们来看一下

52:55.090 --> 52:55.890
这个方法

52:55.890 --> 52:56.530
他在做什么

52:59.170 --> 52:59.810
flash walk

53:02.860 --> 53:04.460
flash walk

53:05.340 --> 53:06.140
好在这里

53:07.020 --> 53:07.580
对吧

53:07.580 --> 53:08.220
在这里

53:08.220 --> 53:09.180
好来我们这边

53:09.180 --> 53:10.220
把他拿过来

53:14.660 --> 53:15.300
flash walk

53:16.020 --> 53:17.380
好这边接下来两个字

53:17.380 --> 53:20.020
这个的话是has time remarrying

53:20.020 --> 53:21.220
这边是个布尔茲

53:21.220 --> 53:21.700
这个是什么

53:21.700 --> 53:22.980
这个是他开始的时间

53:24.500 --> 53:25.140
对不对

53:25.140 --> 53:26.580
把这个直接干掉

53:27.140 --> 53:28.180
那这边写个注射

53:29.380 --> 53:30.500
这个呢是个布尔茲

53:31.460 --> 53:33.460
这个是是否有剩下的时间

53:34.260 --> 53:37.140
是否有剩余的时间

53:38.420 --> 53:40.180
这个和哪就连上了

53:40.180 --> 53:42.820
和刚才这个地方是不是就连上了

53:43.620 --> 53:43.940
对不对

53:44.820 --> 53:45.780
然后一开始是q

53:46.900 --> 53:47.620
一开始

53:49.380 --> 53:51.380
一开始是q

53:51.940 --> 53:52.660
而这个是什么

53:52.660 --> 53:55.380
这个是做这个任务的时候

53:55.380 --> 53:57.940
做这一个任务时

53:57.940 --> 53:59.460
什么开始执行的时间

53:59.780 --> 54:03.060
开始执行的时间

54:03.700 --> 54:04.820
刚才传的是什么

54:04.820 --> 54:06.340
传的是不这个current time

54:06.340 --> 54:07.620
current time又是什么

54:08.180 --> 54:08.980
current time

54:09.700 --> 54:10.900
这不就是这个开始时间

54:11.540 --> 54:13.940
对他主要要做一个这个测量的

54:15.300 --> 54:16.020
好来我们这边

54:16.020 --> 54:16.900
我们来看一下

54:16.900 --> 54:17.860
来看一下这边

54:17.860 --> 54:18.900
就这个方法

54:18.900 --> 54:20.020
主要做了些什么

54:21.860 --> 54:22.980
好这个方法的话

54:22.980 --> 54:23.620
你看这边

54:24.180 --> 54:24.980
这边让你会发现

54:24.980 --> 54:25.700
他前面的话

54:25.700 --> 54:27.860
进行了一大堆的这个判断

54:27.860 --> 54:29.380
这一判断时间都不重要

54:29.700 --> 54:30.340
你有兴趣了

54:30.340 --> 54:31.540
你自己点进去看一下

54:32.180 --> 54:33.380
我这边把这些不重要的

54:33.380 --> 54:34.740
我给你先干掉

54:35.860 --> 54:36.180
好

54:36.180 --> 54:36.900
然后下这边

54:36.900 --> 54:39.220
这边的话把这些都干掉

54:39.940 --> 54:40.740
干掉之后

54:40.740 --> 54:41.380
然后下这边

54:41.380 --> 54:42.420
这边是一堆的这个

54:42.420 --> 54:43.220
什么tri-catch

54:43.860 --> 54:44.260
对

54:44.260 --> 54:44.900
tri-catch

54:44.900 --> 54:45.460
然后接下来

54:45.460 --> 54:46.260
核心是什么

54:46.260 --> 54:47.140
核心是这一句

54:48.580 --> 54:49.140
知道吧

54:49.140 --> 54:50.580
核心是这一句

54:50.580 --> 54:51.300
这边那就是什么呢

54:51.300 --> 54:52.260
这边就是return

54:52.740 --> 54:53.620
这个work loop

54:54.660 --> 54:55.140
work loop

54:55.140 --> 54:55.540
这个就是什么

54:55.540 --> 54:57.140
这个就是工作循环

54:57.140 --> 54:58.820
说核心实际上是这一句

55:00.260 --> 55:00.820
核心

55:02.580 --> 55:03.380
实际上

55:05.920 --> 55:08.240
实际上是这一句

55:09.360 --> 55:10.320
调用什么呢

55:10.320 --> 55:11.200
调用work loop

55:13.890 --> 55:14.930
调用work loop

55:14.930 --> 55:15.650
work loop

55:15.650 --> 55:16.050
然后接下来

55:16.050 --> 55:16.370
这边你看

55:16.370 --> 55:17.810
传的参数是不是都是什么

55:17.810 --> 55:18.610
是不是都是一样的

55:19.490 --> 55:19.730
对了

55:19.730 --> 55:20.850
传的参数都是这个

55:20.850 --> 55:22.290
has time to remarry

55:22.290 --> 55:23.810
还有这个这个initial time

55:24.930 --> 55:25.410
好

55:25.410 --> 55:26.370
然后接下来

55:26.370 --> 55:27.410
这边是一个

55:27.410 --> 55:29.490
我看这边是一个eve else

55:29.490 --> 55:30.450
无论是进eve

55:30.450 --> 55:31.170
还是进 else

55:31.170 --> 55:32.050
他的核心是什么

55:32.130 --> 55:33.090
核心是不是都是这一句

55:33.970 --> 55:34.290
对不对

55:35.650 --> 55:36.290
所以这些的话

55:36.290 --> 55:37.410
其实可以把它干掉

55:38.690 --> 55:39.650
核心就是这一句

55:40.290 --> 55:41.490
然后加这边这个catch

55:42.050 --> 55:42.850
catch这边呢

55:42.850 --> 55:44.930
他就是获取当前的时间

55:44.930 --> 55:46.210
然后进行一个这个mark

55:47.010 --> 55:49.570
mark mark task error的

55:49.570 --> 55:50.370
可能是我爆错

55:50.370 --> 55:51.410
你猜的猜的到

55:51.410 --> 55:52.850
你从他这个名字猜的猜的到

55:52.850 --> 55:53.490
他在干

55:53.490 --> 55:54.370
这个在干什么

55:54.930 --> 55:55.570
对不对

55:55.570 --> 55:57.090
然后加这边他是

55:57.090 --> 55:58.690
相当于就是mark一下

55:58.690 --> 55:59.650
标记一下

55:59.650 --> 56:00.770
任务出作了

56:00.770 --> 56:01.090
对吧

56:01.090 --> 56:01.730
因为你是catch

56:01.890 --> 56:03.090
catch是补货错误的

56:03.650 --> 56:04.130
对不对

56:04.130 --> 56:05.570
这边相当于标记一下

56:05.570 --> 56:06.530
任务出错了

56:06.530 --> 56:08.050
然后加这边slow error

56:08.930 --> 56:10.130
这些我们就先给他

56:10.770 --> 56:11.170
干掉

56:13.310 --> 56:14.270
这些先给他干掉

56:15.310 --> 56:16.350
然后这个finally

56:16.350 --> 56:18.190
finally是这个最终要执行的

56:18.190 --> 56:18.990
最终要执行的

56:18.990 --> 56:19.870
他这边也是什么

56:19.870 --> 56:20.830
这边也是一个mark

56:21.470 --> 56:21.790
对不对

56:21.790 --> 56:22.750
就你这边执行了

56:22.750 --> 56:23.950
多长的这个时间

56:23.950 --> 56:24.510
比如说这边

56:24.510 --> 56:26.030
你可以把理解成就是在做什么

56:26.030 --> 56:27.390
这时间的记录

56:27.390 --> 56:29.550
和刚开始那一块是一样的

56:29.550 --> 56:30.190
那一块

56:30.190 --> 56:31.390
刚开始那一块相当于

56:31.390 --> 56:32.750
记录一个开始时间

56:32.910 --> 56:33.310
这边的话

56:33.310 --> 56:34.910
应该是记录这个结束时间

56:36.110 --> 56:37.470
这一块先把它干掉

56:40.620 --> 56:40.940
ok

56:42.140 --> 56:42.540
好

56:42.540 --> 56:43.820
这是flashwork

56:44.940 --> 56:45.180
好

56:45.180 --> 56:46.540
那我们就就这个work loop

56:46.540 --> 56:47.820
我们就一起看了吗

56:47.820 --> 56:48.620
好吧

56:48.620 --> 56:49.740
一起看了

56:49.740 --> 56:50.060
好

56:50.060 --> 56:50.460
然后这样

56:50.460 --> 56:52.140
我们这边我们来看一下这个work loop

56:52.860 --> 56:54.140
work loop是不是就在他下面

56:55.180 --> 56:55.740
对不对

56:55.740 --> 56:56.700
就在他下面

56:56.700 --> 56:56.860
好

56:56.860 --> 56:57.740
我们这边来看一下

57:00.480 --> 57:01.280
work loop

57:02.080 --> 57:03.120
work loop干了什么

57:04.960 --> 57:05.760
好

57:05.760 --> 57:06.960
各式画一下

57:06.960 --> 57:08.560
这个work loop也挺长的

57:08.560 --> 57:08.880
是吧

57:08.880 --> 57:09.760
也挺长的

57:09.760 --> 57:09.920
好

57:09.920 --> 57:10.960
这边仍然是什么

57:10.960 --> 57:12.240
是不是仍然是两个参数

57:13.680 --> 57:14.560
把这干掉

57:15.760 --> 57:16.800
仍然是两个参数

57:17.920 --> 57:18.880
两个参数的话

57:18.880 --> 57:19.920
和这是一样的

57:20.960 --> 57:21.920
就直接拿过来了

57:23.680 --> 57:24.160
那这个

57:24.160 --> 57:26.240
这个是初始时间

57:28.540 --> 57:28.780
ok

57:29.980 --> 57:30.860
这边这个current time

57:30.860 --> 57:32.780
current time首先保存了这个初始时间

57:33.660 --> 57:34.460
这个

57:34.460 --> 57:35.580
这个是什么

57:35.580 --> 57:36.860
and the onester

57:36.860 --> 57:37.420
tammers

57:38.060 --> 57:38.940
这个是干什么的

57:40.140 --> 57:41.820
这个的话实际上它是什么呢

57:41.820 --> 57:42.700
它实际上你看

57:42.700 --> 57:43.420
and the ones

57:44.060 --> 57:44.620
tammers

57:45.500 --> 57:46.220
tammers是什么

57:46.220 --> 57:48.380
tammers就是我们有一个那个延时队列

57:48.380 --> 57:49.900
叫做timber cream

57:49.900 --> 57:50.540
对不对

57:50.540 --> 57:50.780
好

57:50.780 --> 57:52.460
这个方法它是用来干什么的

57:52.460 --> 57:53.500
它是用来便利

57:54.860 --> 57:55.580
该方法

57:59.580 --> 58:04.940
该方法实际上是用来便利

58:04.940 --> 58:05.500
什么呢

58:05.500 --> 58:07.100
便利这个timber cream

58:08.380 --> 58:10.060
这个一会会带着大家去看

58:10.060 --> 58:11.660
你先了解一下这个方法

58:11.660 --> 58:12.780
它是干什么的

58:12.780 --> 58:14.060
便利这个timber cream

58:14.060 --> 58:15.100
然后判断

58:15.900 --> 58:16.620
是否

58:17.580 --> 58:18.540
有这个什么呢

58:18.540 --> 58:20.220
有这个已经到期的任务

58:21.340 --> 58:26.700
是否有已经到期了的任务

58:26.700 --> 58:27.260
如果有

58:28.780 --> 58:29.180
对不对

58:29.180 --> 58:29.820
你这个timber

58:29.820 --> 58:31.820
timber本身是存这个延时任务的

58:31.820 --> 58:32.060
好

58:32.060 --> 58:32.860
这样我进去发现

58:32.860 --> 58:33.580
哎这个任务

58:33.580 --> 58:34.780
它现在已经不延时了

58:35.340 --> 58:37.020
它已经就是已经到期了

58:37.100 --> 58:38.060
如果有

58:38.060 --> 58:39.340
那将这个任务

58:40.380 --> 58:44.060
将这个任务放入到什么呢

58:44.060 --> 58:45.340
放入到

58:45.340 --> 58:46.220
这边换一下吧

58:47.580 --> 58:48.540
放入到什么呢

58:48.540 --> 58:49.900
放入到task

58:49.900 --> 58:51.100
这个task cream

58:53.020 --> 58:53.740
ok

58:53.740 --> 58:56.860
也就是说它两个任务对它始终实际上是从哪

58:56.860 --> 59:00.460
是不是是从这个task cream里面取任务来执行

59:01.180 --> 59:01.740
对不对

59:01.740 --> 59:01.980
好

59:01.980 --> 59:03.740
你这个timber cream这个延时任务

59:03.740 --> 59:04.780
任务到期了怎么办

59:04.780 --> 59:05.020
哎

59:05.020 --> 59:06.300
我把你放到这里来

59:07.340 --> 59:07.820
对不对

59:07.820 --> 59:09.100
我把他放到这里来

59:09.100 --> 59:10.220
这个意思

59:10.220 --> 59:10.460
好

59:10.460 --> 59:11.100
这个啊

59:11.100 --> 59:12.140
这就代码很简单

59:12.140 --> 59:12.860
这个就是什么

59:12.860 --> 59:16.300
这个是不是就从这个task cream里面取一个任务出来

59:17.900 --> 59:24.060
从task cream里面取一个任务出来

59:25.260 --> 59:25.980
对不对

59:25.980 --> 59:26.380
好

59:26.380 --> 59:27.020
然后接下来的话

59:27.020 --> 59:27.900
这边有个wile

59:27.900 --> 59:29.500
我们先来看这个wile

59:29.500 --> 59:30.940
这个wile是什么

59:30.940 --> 59:34.620
如果当前这个就取出来任务不为空

59:34.620 --> 59:35.580
对不对

59:35.740 --> 59:37.180
然后接下来并且什么呢

59:37.180 --> 59:39.580
并且这边inable schedule debugging

59:39.580 --> 59:41.500
这个应该是debug相关的

59:41.500 --> 59:42.620
大家这边

59:42.620 --> 59:44.540
is scheduler parsed

59:44.540 --> 59:46.540
就这边这个scheduler

59:46.540 --> 59:47.980
它是暂停了吗

59:47.980 --> 59:48.540
还是什么

59:48.540 --> 59:49.420
这个要去看一下

59:49.420 --> 59:50.220
好

59:50.220 --> 59:51.340
这边的话总之就是

59:51.340 --> 59:53.260
你如果这个任务不为空

59:53.260 --> 59:54.940
我这边在这个wile里面

59:54.940 --> 59:55.820
对不对

59:55.820 --> 59:56.300
好

59:56.300 --> 59:57.180
然后接下来这边的话

59:57.180 --> 59:57.820
还有个什么呢

59:57.820 --> 59:59.100
还有一个这个义父判断

59:59.100 --> 01:00:00.940
我们来看这个义父判断

01:00:00.940 --> 01:00:01.660
在做什么

01:00:03.660 --> 01:00:04.940
这个义父判断的话

01:00:04.940 --> 01:00:05.740
非常简单

01:00:05.740 --> 01:00:06.220
这边的话

01:00:06.220 --> 01:00:08.940
就是current task

01:00:08.940 --> 01:00:12.140
点这个expression time

01:00:12.140 --> 01:00:12.780
还记得吧

01:00:12.780 --> 01:00:14.060
我们每一个任务

01:00:14.060 --> 01:00:15.500
都有这个属性的

01:00:15.500 --> 01:00:16.620
你看一下

01:00:16.620 --> 01:00:17.580
每一个任务

01:00:18.700 --> 01:00:19.740
是不是都有这个属性

01:00:19.740 --> 01:00:20.460
表示什么

01:00:20.460 --> 01:00:22.700
表示任务的这个过期时间

01:00:22.700 --> 01:00:23.820
过期时间

01:00:23.820 --> 01:00:25.340
如果它的过期时间

01:00:25.340 --> 01:00:27.820
大于这个current time

01:00:27.820 --> 01:00:28.380
说明什么

01:00:28.380 --> 01:00:29.420
是不是说明这个任务

01:00:29.420 --> 01:00:30.860
还没有过期

01:00:30.860 --> 01:00:31.980
对不对

01:00:31.980 --> 01:00:33.260
就你这一句

01:00:33.260 --> 01:00:34.380
这句表示什么呢

01:00:34.380 --> 01:00:36.300
表示任务还没有过期

01:00:38.060 --> 01:00:42.540
表示任务还没有过期

01:00:43.260 --> 01:00:43.500
好

01:00:43.500 --> 01:00:45.500
然后接下来这个 has time

01:00:45.500 --> 01:00:47.580
has this time remarrying

01:00:47.580 --> 01:00:48.300
这个代表什么

01:00:49.900 --> 01:00:50.540
这个什么代表

01:00:50.540 --> 01:00:52.300
是否有这个时间

01:00:52.300 --> 01:00:53.180
对不对

01:00:53.180 --> 01:00:55.980
代表是否有剩余时间

01:00:57.660 --> 01:00:57.820
好

01:00:57.820 --> 01:00:59.100
那你这个如果是 false

01:00:59.100 --> 01:01:00.380
false就没有剩余时间了

01:01:00.380 --> 01:01:01.180
那你这边去反是不是

01:01:01.180 --> 01:01:01.900
就是去啊

01:01:01.900 --> 01:01:02.380
对不对

01:01:02.380 --> 01:01:03.340
或者什么呢

01:01:03.340 --> 01:01:03.900
或者这个

01:01:04.700 --> 01:01:06.700
should this yield to host

01:01:07.420 --> 01:01:08.300
这个非常重要

01:01:08.300 --> 01:01:09.340
这个我们一会要看一下

01:01:11.180 --> 01:01:11.900
可算一下

01:01:12.620 --> 01:01:14.460
should this host

01:01:14.460 --> 01:01:16.460
should this yield to host

01:01:16.940 --> 01:01:17.900
这个代表什么意思

01:01:17.900 --> 01:01:18.940
这个的话就是代表

01:01:18.940 --> 01:01:21.100
就是是否应该这个暂停

01:01:21.900 --> 01:01:22.940
然后这边的话

01:01:22.940 --> 01:01:23.500
交给什么呢

01:01:23.500 --> 01:01:24.780
交给这个主线程

01:01:26.060 --> 01:01:26.460
任务

01:01:29.700 --> 01:01:32.420
是否应该暂停

01:01:33.140 --> 01:01:34.580
然后归还什么呢

01:01:34.580 --> 01:01:35.220
归还

01:01:36.980 --> 01:01:37.380
归

01:01:39.060 --> 01:01:39.860
归还

01:01:40.900 --> 01:01:41.540
主线程

01:01:42.500 --> 01:01:43.220
也就是什么

01:01:43.220 --> 01:01:44.260
就你该暂停了

01:01:44.260 --> 01:01:44.900
我现在的话

01:01:44.900 --> 01:01:46.260
我这个浏览器要渲染了

01:01:46.820 --> 01:01:47.540
对不对

01:01:47.540 --> 01:01:48.420
如果你这边的话

01:01:48.420 --> 01:01:49.140
到达了这个

01:01:49.140 --> 01:01:49.940
进入这个衣服

01:01:49.940 --> 01:01:50.900
就说明啊

01:01:50.900 --> 01:01:51.620
可能这么几个

01:01:52.180 --> 01:01:52.660
对不对

01:01:52.660 --> 01:01:52.820
好

01:01:52.820 --> 01:01:53.700
那接下来我就干嘛

01:01:53.700 --> 01:01:54.740
我就break

01:01:54.740 --> 01:01:55.780
就跳出什么

01:01:55.780 --> 01:01:56.420
跳出挖

01:01:58.420 --> 01:01:58.740
啊

01:01:59.700 --> 01:02:00.020
那么

01:02:00.980 --> 01:02:02.900
我们就跳出挖

01:02:06.140 --> 01:02:07.100
跳出这个

01:02:07.100 --> 01:02:07.740
挖

01:02:08.300 --> 01:02:08.620
好了

01:02:08.620 --> 01:02:09.420
那如果这边的话

01:02:09.420 --> 01:02:11.020
没有进入到上面的衣服

01:02:11.980 --> 01:02:13.100
没有进入到上面的衣服

01:02:13.660 --> 01:02:14.460
把这些都删了

01:02:17.390 --> 01:02:18.270
这边他是说

01:02:18.270 --> 01:02:19.470
这个到时候他要把他

01:02:19.870 --> 01:02:21.550
把这升级到这个

01:02:21.550 --> 01:02:21.790
fro

01:02:22.590 --> 01:02:23.470
这些先把他干掉

01:02:24.030 --> 01:02:24.190
好

01:02:24.190 --> 01:02:24.670
没有

01:02:26.590 --> 01:02:30.350
没有进入到上面的衣服

01:02:30.990 --> 01:02:31.550
说明什么

01:02:32.350 --> 01:02:32.910
说明

01:02:32.910 --> 01:02:33.950
首先的话这个任务

01:02:34.750 --> 01:02:35.950
这个任务

01:02:35.950 --> 01:02:37.070
就到过去时间了

01:02:37.870 --> 01:02:38.190
对不对

01:02:38.910 --> 01:02:40.190
到过去时间了

01:02:41.710 --> 01:02:42.350
并且什么

01:02:42.990 --> 01:02:47.630
并且有剩余时间来执行

01:02:48.350 --> 01:02:49.230
对不对

01:02:49.230 --> 01:02:52.510
没有到达需要这个

01:02:53.470 --> 01:02:54.590
浏览器渲染的时间

01:02:55.310 --> 01:02:57.470
没有到达

01:02:57.470 --> 01:02:59.630
需要浏览器渲染的时候

01:03:00.350 --> 01:03:00.750
对不对

01:03:00.750 --> 01:03:01.710
那我们就干什么

01:03:01.710 --> 01:03:02.910
那就执行呗

01:03:02.910 --> 01:03:03.710
对不对

01:03:03.710 --> 01:03:05.470
那我们就干嘛

01:03:05.470 --> 01:03:06.510
就执行

01:03:07.150 --> 01:03:07.630
该任务

01:03:08.510 --> 01:03:09.150
就即可

01:03:09.950 --> 01:03:10.510
对不对

01:03:10.510 --> 01:03:11.310
说你看这边

01:03:11.310 --> 01:03:14.190
他从current task.callback

01:03:14.750 --> 01:03:16.270
这边首先是拿到这个任务

01:03:17.630 --> 01:03:19.630
拿到这个任务

01:03:19.630 --> 01:03:20.750
拿到这个任务之后

01:03:20.750 --> 01:03:22.350
然后加这边他做了一个判断

01:03:22.990 --> 01:03:24.430
判断他是否是这个

01:03:25.550 --> 01:03:25.870
function

01:03:26.430 --> 01:03:27.230
你要function的话

01:03:27.230 --> 01:03:28.510
我这边才能执行吗

01:03:28.510 --> 01:03:28.830
对不对

01:03:28.830 --> 01:03:29.390
你不是function

01:03:29.390 --> 01:03:29.950
不是function

01:03:29.950 --> 01:03:30.750
那我这边干嘛

01:03:30.750 --> 01:03:31.550
直接弹出

01:03:34.480 --> 01:03:35.120
对不对

01:03:35.120 --> 01:03:37.120
直接弹出

01:03:37.680 --> 01:03:38.240
那你这边

01:03:38.240 --> 01:03:38.880
这边的话

01:03:38.880 --> 01:03:39.520
你是function

01:03:39.520 --> 01:03:40.000
是function

01:03:40.000 --> 01:03:40.800
那我就执行

01:03:40.800 --> 01:03:41.200
执行完了

01:03:41.200 --> 01:03:42.400
我是不是也得执行这句话

01:03:43.120 --> 01:03:43.440
对不对

01:03:43.440 --> 01:03:43.920
你讲道理

01:03:43.920 --> 01:03:44.880
我肯定也得干嘛

01:03:44.880 --> 01:03:46.240
是不是也得把当前这个任务

01:03:46.240 --> 01:03:46.720
怎么弹出

01:03:47.360 --> 01:03:48.000
对不对

01:03:48.000 --> 01:03:48.320
好

01:03:48.320 --> 01:03:49.120
弹出了之后

01:03:49.120 --> 01:03:50.640
然后接下来这边再干嘛

01:03:50.640 --> 01:03:53.280
再从这个taskqueen里面

01:03:53.280 --> 01:03:54.560
再拿一个任务出来

01:03:56.160 --> 01:03:56.560
再从

01:03:57.760 --> 01:03:59.600
再从这个taskqueen里面

01:04:01.520 --> 01:04:03.440
里面拿一个

01:04:05.120 --> 01:04:07.680
拿一个任务出来

01:04:08.480 --> 01:04:08.800
对不对

01:04:08.800 --> 01:04:09.520
拿出来干嘛呢

01:04:09.520 --> 01:04:10.160
拿出来

01:04:10.160 --> 01:04:11.120
这边来做个判断

01:04:11.120 --> 01:04:13.360
判断你是否这个不等于空

01:04:13.360 --> 01:04:14.240
不等于空

01:04:14.240 --> 01:04:15.520
这边就是taskqueen

01:04:15.520 --> 01:04:16.720
taskqueen代表什么

01:04:16.720 --> 01:04:18.320
代表就是還是more work

01:04:18.320 --> 01:04:19.680
和哪就连上了

01:04:19.680 --> 01:04:20.880
和这边是不是就连上了

01:04:22.000 --> 01:04:22.400
和你

01:04:23.440 --> 01:04:24.720
这边是不是就连上了

01:04:24.720 --> 01:04:25.120
对不对

01:04:25.120 --> 01:04:26.560
你最重要的这边就拿到什么

01:04:26.560 --> 01:04:27.680
是不是这个taskqueen

01:04:27.680 --> 01:04:28.160
对不对

01:04:28.160 --> 01:04:29.440
代表就还有更多的任务

01:04:31.280 --> 01:04:32.160
如果不为空

01:04:33.440 --> 01:04:34.560
如果不为空

01:04:35.280 --> 01:04:35.920
不为空

01:04:36.560 --> 01:04:36.960
代表

01:04:37.600 --> 01:04:38.800
这还有更多的任务

01:04:39.680 --> 01:04:41.600
还有更多的

01:04:43.200 --> 01:04:44.560
那么回头

01:04:46.720 --> 01:04:47.760
外部的这个

01:04:47.760 --> 01:04:49.280
has more work

01:04:50.240 --> 01:04:50.880
more work

01:04:51.840 --> 01:04:53.280
然后拿到的

01:04:53.280 --> 01:04:54.880
就也是什么

01:04:54.880 --> 01:04:55.600
是不是也是true

01:04:56.400 --> 01:04:57.040
对不对

01:04:57.040 --> 01:04:58.240
还有else

01:04:58.240 --> 01:04:59.600
else那说明什么

01:04:59.600 --> 01:05:01.120
说明就是你的这个task

01:05:01.680 --> 01:05:02.880
这个对立是不是空了

01:05:03.920 --> 01:05:04.560
对不对

01:05:04.560 --> 01:05:05.120
说明这个

01:05:05.840 --> 01:05:07.840
这个对立是空了

01:05:08.640 --> 01:05:09.360
那是空了

01:05:09.360 --> 01:05:10.640
那我们这边就完了吗

01:05:10.640 --> 01:05:11.440
也不是

01:05:12.080 --> 01:05:12.560
也不是

01:05:12.560 --> 01:05:13.360
那我们这边就干嘛

01:05:13.360 --> 01:05:14.080
我们是不是就是

01:05:14.080 --> 01:05:15.680
从这个timerqueen里面去找

01:05:16.640 --> 01:05:17.280
对不对

01:05:17.280 --> 01:05:18.560
从timerqueen里面去找

01:05:21.300 --> 01:05:22.420
那么我们

01:05:23.860 --> 01:05:24.260
我们

01:05:25.060 --> 01:05:25.940
就从什么呢

01:05:25.940 --> 01:05:27.860
就从timerqueen里面

01:05:28.420 --> 01:05:30.260
去看这个延时任务

01:05:32.100 --> 01:05:33.060
延时任务

01:05:34.260 --> 01:05:35.540
是否有这个延时任务

01:05:35.540 --> 01:05:36.580
我们这边把它取

01:05:36.580 --> 01:05:37.620
取一个出来

01:05:37.620 --> 01:05:38.500
取一个出来之后

01:05:38.820 --> 01:05:40.020
如果它这个不等于空

01:05:40.020 --> 01:05:40.740
不等于空的话

01:05:40.740 --> 01:05:41.540
这边就掉什么

01:05:41.540 --> 01:05:42.820
这边掉request

01:05:42.820 --> 01:05:44.020
host timeout

01:05:44.020 --> 01:05:45.300
和哪就连上了

01:05:45.300 --> 01:05:46.900
和这边是不是就连上了

01:05:46.900 --> 01:05:48.180
就我们最早讲的时候

01:05:49.300 --> 01:05:50.180
最早讲的时候

01:05:50.180 --> 01:05:50.820
这里

01:05:50.820 --> 01:05:52.500
普通任务掉request

01:05:52.500 --> 01:05:53.620
host callback

01:05:53.620 --> 01:05:54.740
延时任务掉什么

01:05:54.740 --> 01:05:55.460
request

01:05:55.460 --> 01:05:56.340
host timeout

01:05:56.900 --> 01:05:57.620
你看它这边是不是

01:05:57.620 --> 01:05:58.260
request

01:05:58.260 --> 01:05:59.140
host timeout

01:05:59.940 --> 01:06:00.340
对不对

01:06:00.340 --> 01:06:00.980
就掉用这个

01:06:01.700 --> 01:06:02.980
那如果没有进这个

01:06:02.980 --> 01:06:04.340
没有进一步

01:06:04.340 --> 01:06:05.060
那说明什么

01:06:05.060 --> 01:06:06.420
说明这个timerqueen

01:06:06.420 --> 01:06:06.980
也没有了

01:06:07.780 --> 01:06:08.260
对不对

01:06:09.220 --> 01:06:12.580
没有进入上面的这个eave

01:06:14.260 --> 01:06:14.980
说明什么

01:06:14.980 --> 01:06:16.420
说明这个timerqueen

01:06:16.420 --> 01:06:17.940
延时堆裂任务也完了

01:06:19.380 --> 01:06:22.020
里面的任务也完了

01:06:23.460 --> 01:06:23.940
对不对

01:06:23.940 --> 01:06:25.220
那接下来返回

01:06:25.940 --> 01:06:26.740
返回force

01:06:27.300 --> 01:06:28.100
那回头的话

01:06:28.100 --> 01:06:28.900
你这个

01:06:28.900 --> 01:06:30.340
回头外部的这个

01:06:30.340 --> 01:06:31.380
拿到的就是什么

01:06:31.380 --> 01:06:32.340
就拿到的就是force

01:06:33.860 --> 01:06:34.580
对不对

01:06:34.580 --> 01:06:35.300
那就force

01:06:36.980 --> 01:06:37.220
好

01:06:37.220 --> 01:06:38.100
然后接下来这边

01:06:38.100 --> 01:06:38.660
这边的话

01:06:38.660 --> 01:06:39.940
就看你想不想看

01:06:39.940 --> 01:06:40.900
你这边你知道了

01:06:40.900 --> 01:06:42.500
他这边在做什么之后

01:06:42.500 --> 01:06:43.380
就看你自己想不想

01:06:43.380 --> 01:06:44.260
继续看一下

01:06:44.260 --> 01:06:45.700
进去看一下也可以

01:06:45.700 --> 01:06:46.580
他这边

01:06:46.580 --> 01:06:47.380
也有这么多代码

01:06:48.100 --> 01:06:48.500
对不对

01:06:48.500 --> 01:06:49.380
有这么多代码

01:06:49.380 --> 01:06:50.820
你这边看一下吧

01:06:50.820 --> 01:06:52.260
如果违方性

01:06:52.260 --> 01:06:53.620
那这边上你就是

01:06:53.620 --> 01:06:54.500
具体的逻辑

01:06:54.500 --> 01:06:55.220
大致的逻辑

01:06:55.220 --> 01:06:56.260
你要知道

01:06:56.260 --> 01:06:56.580
说明

01:06:57.780 --> 01:06:59.700
当前的任务

01:06:59.700 --> 01:07:01.860
是一个函数

01:07:01.860 --> 01:07:02.820
是不是执行该函数

01:07:03.540 --> 01:07:06.180
我们执行该任务

01:07:07.540 --> 01:07:08.180
对不对

01:07:08.180 --> 01:07:08.980
执行该任务

01:07:10.820 --> 01:07:11.780
这边

01:07:11.780 --> 01:07:14.020
首先把这个设置为空

01:07:14.020 --> 01:07:15.300
因为你这个这个任务的话

01:07:15.300 --> 01:07:16.020
已经给了谁了

01:07:16.020 --> 01:07:17.300
是不是给了这个callback了

01:07:18.020 --> 01:07:18.420
对不对

01:07:18.420 --> 01:07:19.300
给了callback了

01:07:19.300 --> 01:07:20.660
所以他把这个设置为空

01:07:20.660 --> 01:07:21.300
那回头的话

01:07:21.300 --> 01:07:22.420
你这里面的代码

01:07:22.420 --> 01:07:23.860
这里面代码肯定会有干嘛

01:07:23.860 --> 01:07:25.700
是不是肯定有这个执行这个callback

01:07:26.340 --> 01:07:26.740
对不对

01:07:26.740 --> 01:07:27.380
你找一找

01:07:27.380 --> 01:07:27.940
有没有

01:07:27.940 --> 01:07:28.420
有

01:07:28.420 --> 01:07:29.140
就在这个地方

01:07:29.860 --> 01:07:30.500
对不对

01:07:30.500 --> 01:07:30.980
肯定有

01:07:31.940 --> 01:07:32.980
其他的代码的话

01:07:32.980 --> 01:07:33.780
他很多人

01:07:33.780 --> 01:07:34.980
就是做那种就是

01:07:35.860 --> 01:07:36.740
资料收集的

01:07:37.220 --> 01:07:38.180
比如你看这边

01:07:38.180 --> 01:07:40.580
inable profiling

01:07:40.580 --> 01:07:41.220
这个是什么

01:07:41.220 --> 01:07:42.100
这个profiling

01:07:42.100 --> 01:07:44.100
它就是这个资料收集的意思

01:07:44.100 --> 01:07:44.820
就像这种

01:07:45.860 --> 01:07:47.060
这种大型框架

01:07:47.940 --> 01:07:48.420
很多时候

01:07:48.420 --> 01:07:48.900
他不是说

01:07:48.900 --> 01:07:49.860
就是你这边

01:07:49.860 --> 01:07:51.140
这个callback

01:07:51.140 --> 01:07:51.380
对吧

01:07:51.380 --> 01:07:52.260
我的任务是这个

01:07:52.260 --> 01:07:54.180
让我执行这个任务就可以了

01:07:54.180 --> 01:07:54.500
不是

01:07:54.500 --> 01:07:54.900
他这边

01:07:54.900 --> 01:07:56.340
就是你在执行任务之前

01:07:56.340 --> 01:07:57.140
我要做一些什么

01:07:57.140 --> 01:07:58.580
做一些数据的

01:07:58.580 --> 01:08:00.420
这个收集呀之类的

01:08:00.420 --> 01:08:01.620
所以你这边看到很多代码

01:08:01.620 --> 01:08:02.500
比如这边

01:08:02.500 --> 01:08:03.620
如果你这边inable

01:08:03.620 --> 01:08:04.580
inable是允许

01:08:05.220 --> 01:08:06.020
就是close

01:08:06.020 --> 01:08:07.620
就是你看这个inable

01:08:07.620 --> 01:08:08.580
inable是

01:08:08.580 --> 01:08:10.020
就允许的意思

01:08:10.020 --> 01:08:11.380
就使什么变成可能

01:08:12.900 --> 01:08:13.220
在这

01:08:15.380 --> 01:08:15.700
在这

01:08:17.300 --> 01:08:17.620
你看

01:08:18.500 --> 01:08:19.860
就使什么变成可能

01:08:19.860 --> 01:08:20.500
对不对

01:08:20.500 --> 01:08:21.380
然后接下来的话

01:08:21.380 --> 01:08:21.860
你那个

01:08:22.580 --> 01:08:24.260
这个profiling

01:08:24.260 --> 01:08:25.380
profiling它就是什么

01:08:25.380 --> 01:08:26.100
它就是收集

01:08:26.980 --> 01:08:27.780
收集的意思

01:08:30.820 --> 01:08:31.620
可以吗

01:08:31.620 --> 01:08:32.580
资料这个收集

01:08:33.060 --> 01:08:33.460
看到没有

01:08:34.260 --> 01:08:34.500
OK

01:08:35.060 --> 01:08:35.620
说这些

01:08:35.620 --> 01:08:37.220
这些其实你可以把折起来

01:08:37.220 --> 01:08:38.020
你看这个之前

01:08:38.020 --> 01:08:38.740
要收集一次

01:08:38.820 --> 01:08:39.780
然后加这边

01:08:39.780 --> 01:08:40.580
说之后

01:08:40.580 --> 01:08:41.780
之后这边是不是也要收集一次

01:08:42.500 --> 01:08:42.980
对不对

01:08:42.980 --> 01:08:43.620
这边衣服

01:08:43.620 --> 01:08:44.340
也要收集一次

01:08:45.220 --> 01:08:46.100
收集完了之后

01:08:46.100 --> 01:08:47.220
人家这边干嘛

01:08:47.220 --> 01:08:48.740
这边是不是就和这是一样的

01:08:48.740 --> 01:08:49.860
把这个任务什么

01:08:49.860 --> 01:08:50.660
说弹出出去

01:08:51.380 --> 01:08:52.100
对不对

01:08:52.100 --> 01:08:53.140
弹出出去

01:08:53.140 --> 01:08:54.020
肯定是一样的

01:08:55.060 --> 01:08:55.620
就这

01:08:55.620 --> 01:08:56.660
其实核心就是这里

01:08:57.220 --> 01:08:57.620
调用

01:08:59.300 --> 01:09:00.100
任务的执行

01:09:00.660 --> 01:09:01.940
任务的执行

01:09:03.220 --> 01:09:03.780
实际上

01:09:05.060 --> 01:09:05.940
实际上

01:09:05.940 --> 01:09:07.620
就是在这一句

01:09:08.500 --> 01:09:08.980
对不对

01:09:08.980 --> 01:09:10.020
调用这个callback

01:09:10.980 --> 01:09:11.620
调用callback

01:09:12.420 --> 01:09:12.980
OK

01:09:12.980 --> 01:09:14.100
好这个就不展开了

01:09:15.460 --> 01:09:16.100
OK

01:09:16.100 --> 01:09:17.700
那整个这个walk loop

01:09:18.500 --> 01:09:19.140
就是这样子

01:09:19.780 --> 01:09:20.100
OK

01:09:20.740 --> 01:09:21.140
好了

01:09:21.140 --> 01:09:21.700
我们把这个

01:09:21.700 --> 01:09:23.300
我们把它拿过来

01:09:23.300 --> 01:09:24.420
放到我们的笔记里面

01:09:25.780 --> 01:09:27.140
这边flash walk

01:09:30.420 --> 01:09:31.620
flash walk

01:09:31.620 --> 01:09:32.500
和什么呢

01:09:32.500 --> 01:09:34.100
和这个walk loop

01:09:39.200 --> 01:09:40.880
和walk loop

01:09:41.600 --> 01:09:41.920
好了

01:09:41.920 --> 01:09:43.120
我们这边还是来记录一下

01:09:43.840 --> 01:09:44.720
flash walk

01:09:44.720 --> 01:09:45.360
主要就是什么

01:09:45.360 --> 01:09:47.840
主要其实就是在调用这个walk loop

01:09:50.500 --> 01:09:51.860
flash walk

01:09:51.860 --> 01:09:54.660
主要就是在调用

01:09:55.460 --> 01:09:56.660
这个walk loop

01:09:59.840 --> 01:10:00.320
对不对

01:10:00.320 --> 01:10:01.600
那最终的话你看它这边

01:10:03.440 --> 01:10:04.400
在这里

01:10:04.400 --> 01:10:06.560
返回你walk loop的这个返回值

01:10:06.560 --> 01:10:08.160
那walk loop的返回值是什么

01:10:08.160 --> 01:10:09.680
walk loop的返回值

01:10:09.680 --> 01:10:11.360
是不是就是看你的这个任务

01:10:11.360 --> 01:10:12.160
还有没有

01:10:12.160 --> 01:10:12.480
对不对

01:10:12.480 --> 01:10:13.440
还有就返回去

01:10:13.440 --> 01:10:14.320
然后接下来的话

01:10:15.200 --> 01:10:16.880
没有就返回force

01:10:16.880 --> 01:10:17.680
对

01:10:17.680 --> 01:10:18.000
OK

01:10:18.640 --> 01:10:19.120
好

01:10:19.120 --> 01:10:20.720
然后walk loop

01:10:20.720 --> 01:10:22.480
walk loop的话就是在干嘛

01:10:22.480 --> 01:10:24.720
walk loop它的关键代码是哪句

01:10:24.720 --> 01:10:26.160
关键代码实际上就是这一句

01:10:27.200 --> 01:10:28.320
关键代码就是这一句

01:10:31.060 --> 01:10:32.820
首先还有一个这个walk loop

01:10:32.820 --> 01:10:34.260
walk loop

01:10:36.430 --> 01:10:37.310
walk loop

01:10:38.350 --> 01:10:41.470
首先有一个这个walk loop

01:10:42.590 --> 01:10:43.550
walk loop

01:10:44.190 --> 01:10:45.790
该walk loop

01:10:46.510 --> 01:10:47.790
该walk loop

01:10:47.790 --> 01:10:48.670
宣换

01:10:48.670 --> 01:10:49.950
保证了什么呢

01:10:49.950 --> 01:10:54.350
保证了能够从这个任务对列中

01:10:55.310 --> 01:10:58.670
任务对列中是不停的

01:11:01.060 --> 01:11:02.660
不停的取任务出来

01:11:03.860 --> 01:11:04.580
对不对

01:11:04.580 --> 01:11:05.380
取任务

01:11:06.580 --> 01:11:07.380
出来

01:11:07.380 --> 01:11:08.740
啊核心的话就是这一句

01:11:11.790 --> 01:11:14.030
核心就是这一句

01:11:14.830 --> 01:11:15.550
把他过来

01:11:18.750 --> 01:11:19.390
对吧

01:11:19.390 --> 01:11:20.510
啊核心就是这一句

01:11:23.380 --> 01:11:23.860
OK

01:11:23.860 --> 01:11:26.180
就你这边当前的这个这个任务不为空

01:11:26.180 --> 01:11:26.980
啊

01:11:26.980 --> 01:11:28.820
当然的话不是说取出来

01:11:28.820 --> 01:11:29.220
啊

01:11:29.220 --> 01:11:29.620
当然

01:11:31.220 --> 01:11:33.540
当然不是说

01:11:33.540 --> 01:11:34.500
就是一直

01:11:35.380 --> 01:11:37.940
一直从任务对列里面

01:11:38.740 --> 01:11:39.780
里面啊

01:11:39.780 --> 01:11:40.740
取任务出来

01:11:41.700 --> 01:11:44.660
取任务出来就

01:11:44.660 --> 01:11:45.940
取任务出来执行

01:11:46.980 --> 01:11:48.180
执行就完事

01:11:49.460 --> 01:11:50.980
就完事啊

01:11:50.980 --> 01:11:51.540
每次

01:11:52.260 --> 01:11:52.900
取出

01:11:54.100 --> 01:11:55.060
每次

01:11:55.060 --> 01:11:55.860
取出

01:11:56.820 --> 01:11:58.900
一个任务后

01:11:58.900 --> 01:12:00.340
我们还需要什么

01:12:00.340 --> 01:12:01.220
还需要

01:12:01.780 --> 01:12:03.060
什么一系列的判断

01:12:04.580 --> 01:12:05.220
对不对

01:12:05.220 --> 01:12:06.820
还需要一系列的判断

01:12:06.820 --> 01:12:09.380
啊对应的这个核心的代码就是哪句呢

01:12:09.380 --> 01:12:11.140
对应的核心代码就是

01:12:12.500 --> 01:12:13.300
啊这一句

01:12:14.260 --> 01:12:14.820
对不对

01:12:14.820 --> 01:12:15.380
就这一句

01:12:20.020 --> 01:12:20.580
对对

01:12:20.580 --> 01:12:21.060
这一句

01:12:21.060 --> 01:12:22.660
啊他里面对应的就是很简单

01:12:22.660 --> 01:12:23.780
里面对应的就是break

01:12:24.740 --> 01:12:25.700
break

01:12:27.140 --> 01:12:27.780
对不对

01:12:27.780 --> 01:12:28.980
啊你这边啊如果

01:12:30.740 --> 01:12:32.660
啊其实就是我们上面注释写的呢

01:12:32.660 --> 01:12:33.860
我们注释是不是写了的

01:12:35.540 --> 01:12:36.020
在这里

01:12:36.980 --> 01:12:37.700
注释写了的

01:12:39.860 --> 01:12:40.820
那直接把你拿过来

01:12:40.820 --> 01:12:40.980
啊

01:12:43.860 --> 01:12:45.780
啊如果你这个current task

01:12:45.780 --> 01:12:47.620
啊这边大于这个current time

01:12:47.620 --> 01:12:48.100
表示什么

01:12:48.100 --> 01:12:49.460
是表示任务还没有过钱

01:12:50.260 --> 01:12:50.740
对不对

01:12:50.740 --> 01:12:52.900
啊这个这个表示是否还要剩余时间

01:12:53.700 --> 01:12:54.740
啊这个这个表示

01:12:54.740 --> 01:12:56.340
是你的这个任务是否应该

01:12:57.140 --> 01:12:59.540
这个暂停啊归还这个主线程

01:13:00.180 --> 01:13:01.540
啊如果这边进入eve

01:13:02.820 --> 01:13:03.540
进入eve

01:13:04.580 --> 01:13:06.820
如果进入eve

01:13:07.540 --> 01:13:07.940
说明

01:13:08.500 --> 01:13:08.900
因为

01:13:09.460 --> 01:13:10.180
某些原因

01:13:11.940 --> 01:13:15.540
某些原因是不能再执行任务了

01:13:15.540 --> 01:13:15.940
不能

01:13:16.820 --> 01:13:19.540
再执行任务

01:13:19.540 --> 01:13:20.420
需要什么

01:13:20.420 --> 01:13:21.780
需要立即

01:13:22.500 --> 01:13:23.060
归还

01:13:26.060 --> 01:13:26.860
归还

01:13:27.500 --> 01:13:28.220
是主线程

01:13:29.420 --> 01:13:31.260
对不对啊那么我们就干嘛

01:13:31.260 --> 01:13:32.140
你这边break

01:13:32.140 --> 01:13:33.020
break就干嘛

01:13:33.020 --> 01:13:33.900
是不是就跳出玩

01:13:35.020 --> 01:13:35.820
对吧

01:13:35.820 --> 01:13:37.020
跳出玩啊

01:13:37.900 --> 01:13:41.020
啊这是关于这个flash walk和walk loop

01:13:43.100 --> 01:13:44.460
啊其实整个这个

01:13:44.460 --> 01:13:46.620
普通任务的调度其实就这样子了

01:13:46.620 --> 01:13:47.500
啊其实我们这边呢

01:13:47.500 --> 01:13:49.660
就已经把这个最核心的这个

01:13:49.660 --> 01:13:50.780
最核心的这些

01:13:50.780 --> 01:13:52.940
就已经带着大家一起来看了

01:13:52.940 --> 01:13:53.660
ok

01:13:53.660 --> 01:13:54.540
已经看了

01:13:55.260 --> 01:13:55.900
啊这边呢

01:13:55.900 --> 01:13:56.860
然后还有几个函数

01:13:56.860 --> 01:13:58.460
还有几个函数我们来看一下

01:13:58.460 --> 01:13:59.180
一个是什么呢

01:13:59.180 --> 01:14:01.500
一个就是刚才你这边不是有一个那个

01:14:02.620 --> 01:14:04.220
and one is tamer吗

01:14:04.860 --> 01:14:05.260
对不对

01:14:05.260 --> 01:14:06.220
这个and one is tamer

01:14:06.220 --> 01:14:06.700
我们刚才说了

01:14:06.700 --> 01:14:07.580
这个and one is tamer

01:14:07.580 --> 01:14:08.060
它是什么

01:14:08.620 --> 01:14:10.300
它是就是从这个

01:14:10.300 --> 01:14:11.260
tamer queen里面

01:14:11.820 --> 01:14:13.420
是取一个这个任务出来

01:14:13.900 --> 01:14:14.380
对不对

01:14:14.380 --> 01:14:15.260
那还有一个什么呢

01:14:15.260 --> 01:14:16.380
还有一个是这个yield

01:14:16.940 --> 01:14:18.700
shouldyield to host

01:14:18.700 --> 01:14:19.980
是否归还

01:14:20.780 --> 01:14:22.380
这个主线程

01:14:22.860 --> 01:14:24.140
啊来我们就一个一个来看吧

01:14:24.220 --> 01:14:25.020
我们先来看这个吧

01:14:25.900 --> 01:14:26.540
先看这个

01:14:30.910 --> 01:14:31.870
先来看这个

01:14:31.870 --> 01:14:33.390
shouldyield to host

01:14:43.020 --> 01:14:45.260
啊下面在这里

01:14:45.260 --> 01:14:45.580
对不对

01:14:45.580 --> 01:14:47.340
你让它这边是个返回一个布尔兹

01:14:47.340 --> 01:14:48.700
啊返回一个布尔兹

01:14:54.880 --> 01:14:55.360
ok

01:14:55.360 --> 01:14:56.000
各式画一下

01:14:56.640 --> 01:14:57.520
好来我们这边

01:14:57.520 --> 01:14:58.960
我们把这个看一下

01:15:01.760 --> 01:15:02.480
啊这边的话

01:15:02.480 --> 01:15:04.560
它首先这个get current time

01:15:04.560 --> 01:15:05.920
这个是获取当前时间

01:15:06.480 --> 01:15:06.880
对不对

01:15:06.880 --> 01:15:08.720
啊这个的话是当前时间

01:15:11.140 --> 01:15:14.020
这个是获取当前时间

01:15:14.900 --> 01:15:16.260
好减去start time

01:15:16.260 --> 01:15:17.540
还记得start time吧

01:15:17.540 --> 01:15:19.380
start time是我们任务开始的时间

01:15:20.100 --> 01:15:20.580
对不对

01:15:20.580 --> 01:15:27.300
start time是我们任务开始时的时间

01:15:27.300 --> 01:15:28.180
一开始是什么

01:15:28.180 --> 01:15:29.780
一开始是附一

01:15:29.780 --> 01:15:30.500
还记得吧

01:15:30.500 --> 01:15:31.940
就是那个全局变量

01:15:32.340 --> 01:15:32.820
对不对

01:15:32.820 --> 01:15:33.780
一开始是附一

01:15:33.780 --> 01:15:35.380
然后接下来后面是把那个

01:15:35.860 --> 01:15:37.220
就你这边开始的时候

01:15:38.580 --> 01:15:39.940
就这边开始的时候

01:15:40.820 --> 01:15:42.020
呃在这里

01:15:42.020 --> 01:15:43.220
我看是在哪里

01:15:43.940 --> 01:15:45.220
啊做了一个复职

01:15:46.740 --> 01:15:47.220
在这里

01:15:47.940 --> 01:15:49.540
啊我看啊在这里

01:15:49.540 --> 01:15:50.580
啊这里的话把怎么呢

01:15:50.580 --> 01:15:52.100
把你这个current time

01:15:52.100 --> 01:15:53.460
这边是获取当前的时间

01:15:53.460 --> 01:15:55.460
是不是给了这个start time

01:15:55.460 --> 01:15:55.860
对不对

01:15:55.860 --> 01:15:57.860
它就表示你这个任务开始的时间

01:15:58.980 --> 01:15:59.700
啊

01:15:59.700 --> 01:16:00.900
一开始是附一

01:16:00.900 --> 01:16:02.340
啊然后之后

01:16:03.060 --> 01:16:04.100
任务开始时

01:16:04.740 --> 01:16:06.100
任务开始时

01:16:06.740 --> 01:16:11.620
将任务开始时的这个时间

01:16:12.580 --> 01:16:13.460
复职

01:16:15.740 --> 01:16:16.220
复职

01:16:22.580 --> 01:16:22.980
复职

01:16:24.980 --> 01:16:25.860
啊复职

01:16:25.860 --> 01:16:26.420
给了它

01:16:28.020 --> 01:16:28.660
对不对

01:16:28.660 --> 01:16:29.860
啊这边拿到这个

01:16:29.860 --> 01:16:31.140
把拿到这个时间

01:16:31.140 --> 01:16:32.260
拿到这个时间之后

01:16:32.260 --> 01:16:34.020
然后加这边进行一个判断

01:16:34.020 --> 01:16:37.700
如果这个时间小于这个frame interval

01:16:37.700 --> 01:16:38.900
啊 this frame interval

01:16:38.900 --> 01:16:40.580
你猜的猜的到是什么

01:16:40.580 --> 01:16:42.340
frame 是不是一真的意思啊

01:16:42.340 --> 01:16:42.820
对不对

01:16:42.820 --> 01:16:44.900
啊这个 interval 是个间隔的意思

01:16:44.900 --> 01:16:46.260
那这个frame interval 是不是

01:16:46.340 --> 01:16:47.620
小于这个一真的时间

01:16:48.260 --> 01:16:48.660
对不对

01:16:48.660 --> 01:16:49.300
那说明什么呢

01:16:49.300 --> 01:16:51.140
说明就是你还不需要归换

01:16:51.140 --> 01:16:52.500
你它这边也写的有注射

01:16:53.220 --> 01:16:57.940
The main stream that has only been blocked for a really short amount of time

01:16:58.340 --> 01:16:59.940
就你这边的话只被注射了什么

01:16:59.940 --> 01:17:01.220
注射了一点点时间

01:17:01.780 --> 01:17:03.540
啊然后接下来的话这个smaller

01:17:04.180 --> 01:17:05.460
than a single frame

01:17:05.460 --> 01:17:07.540
就它这边就是比这个一真的时间

01:17:07.540 --> 01:17:09.140
啊远远要小于

01:17:09.140 --> 01:17:10.020
你不需要什么呢

01:17:10.020 --> 01:17:10.820
不需要归换

01:17:11.460 --> 01:17:12.500
啊不需要归换

01:17:12.980 --> 01:17:13.700
这边就是

01:17:14.660 --> 01:17:15.620
主线程

01:17:17.060 --> 01:17:17.700
只被

01:17:21.300 --> 01:17:22.020
只被

01:17:22.900 --> 01:17:23.860
注射了

01:17:25.300 --> 01:17:28.260
注射了一点点时间

01:17:28.980 --> 01:17:31.700
啊远远没达到

01:17:32.420 --> 01:17:33.140
什么

01:17:33.140 --> 01:17:34.980
没达到需要归换

01:17:36.100 --> 01:17:37.700
归换的这个时间线

01:17:38.740 --> 01:17:39.220
时间

01:17:40.820 --> 01:17:41.540
时间某点

01:17:42.740 --> 01:17:43.220
对了

01:17:44.580 --> 01:17:45.140
时间

01:17:46.500 --> 01:17:48.660
就没有达到需要归换的时候吗

01:17:49.780 --> 01:17:50.260
ok

01:17:50.260 --> 01:17:52.820
你看东特也有的也不需要归换

01:17:52.820 --> 01:17:54.340
说它这边就是返回什么

01:17:54.340 --> 01:17:55.380
是返回force

01:17:56.020 --> 01:17:56.660
对不对

01:17:56.660 --> 01:17:57.300
啊你这边呢

01:17:57.300 --> 01:17:58.900
你可以看一下这个framing intro

01:18:01.180 --> 01:18:02.140
framing intro

01:18:03.260 --> 01:18:06.140
在这边framing intro等于一个这个framing yale的

01:18:06.140 --> 01:18:08.620
这个啊这个它默认设置了什么

01:18:08.620 --> 01:18:10.300
是不是设置了是这个5毫秒

01:18:11.180 --> 01:18:11.820
对不对

01:18:11.820 --> 01:18:13.020
设置了是5毫秒

01:18:15.020 --> 01:18:15.900
好回到这边

01:18:16.780 --> 01:18:17.740
这边说一下

01:18:18.780 --> 01:18:19.340
就这个

01:18:20.700 --> 01:18:22.620
默认设置

01:18:23.980 --> 01:18:25.260
设置的设

01:18:25.820 --> 01:18:26.460
5毫秒

01:18:27.100 --> 01:18:27.820
啊

01:18:27.820 --> 01:18:28.700
好了下面

01:18:28.700 --> 01:18:30.540
下面的话它这边就有注射了

01:18:30.540 --> 01:18:33.740
the main stream that has been blocked for this non

01:18:33.740 --> 01:18:34.140
这个

01:18:34.940 --> 01:18:35.340
呃

01:18:36.140 --> 01:18:37.580
这个这个这个单词我看一下

01:18:38.700 --> 01:18:39.340
这是什么

01:18:41.340 --> 01:18:41.740
嗯

01:18:44.880 --> 01:18:45.280
呃

01:18:46.400 --> 01:18:47.840
哦不可忽视的意思

01:18:47.840 --> 01:18:49.040
这个好像是忽视的意思

01:18:49.520 --> 01:18:49.840
啊

01:18:50.880 --> 01:18:51.760
neglotable

01:18:52.560 --> 01:18:53.520
neglotable

01:18:54.560 --> 01:18:55.680
neglotable

01:18:55.680 --> 01:18:56.480
neglotable

01:18:56.480 --> 01:18:57.520
neglotable

01:18:57.520 --> 01:18:58.400
neglotable

01:18:58.400 --> 01:18:59.360
啊就是它这边呢

01:18:59.360 --> 01:19:00.400
是不重要啊

01:19:00.400 --> 01:19:01.920
就是不值一提啊

01:19:01.920 --> 01:19:02.880
可以忽略不计

01:19:02.880 --> 01:19:03.920
那前面加个浪

01:19:03.920 --> 01:19:05.200
你注意啊

01:19:05.200 --> 01:19:06.080
前面加个浪

01:19:06.720 --> 01:19:07.360
代表什么

01:19:07.360 --> 01:19:09.360
就不可以忽视啊

01:19:09.360 --> 01:19:10.480
不可以忽视

01:19:10.480 --> 01:19:11.040
就这边呢

01:19:11.040 --> 01:19:12.240
就是你已经说白了

01:19:12.240 --> 01:19:13.920
其实就已经组织了一段时间了

01:19:13.920 --> 01:19:14.960
你需要干嘛

01:19:14.960 --> 01:19:16.960
你需要这个就是归还

01:19:16.960 --> 01:19:17.760
说你看它这边

01:19:17.760 --> 01:19:18.880
这边它虽然进行了

01:19:18.880 --> 01:19:20.000
一堆的这个判断

01:19:20.320 --> 01:19:21.440
实际上最终都是什么了

01:19:21.440 --> 01:19:23.040
最终都是retard two

01:19:23.040 --> 01:19:23.840
retard two

01:19:23.840 --> 01:19:25.200
你不看这个衣服啊

01:19:25.200 --> 01:19:26.080
不看这个衣服

01:19:26.080 --> 01:19:27.280
最终也是什么

01:19:27.280 --> 01:19:27.920
retard two

01:19:28.800 --> 01:19:29.440
对不对

01:19:29.440 --> 01:19:30.640
最终也是retard two

01:19:30.640 --> 01:19:30.880
啊

01:19:30.880 --> 01:19:31.520
总之这边

01:19:31.520 --> 01:19:33.040
在这里的注释啊

01:19:33.040 --> 01:19:34.320
说白了就什么了

01:19:34.320 --> 01:19:34.960
啊之后

01:19:36.640 --> 01:19:42.080
如果没有进入上面的衣服

01:19:42.720 --> 01:19:44.240
说明这个主线程

01:19:45.360 --> 01:19:48.720
啊已经被组设了

01:19:49.520 --> 01:19:52.400
组设了一段时间了

01:19:52.400 --> 01:19:53.680
需要干嘛

01:19:53.680 --> 01:19:55.600
需要归还

01:19:57.680 --> 01:19:59.280
归还主线程

01:20:00.480 --> 01:20:01.120
对不对

01:20:01.120 --> 01:20:02.400
需要归还主线程

01:20:02.400 --> 01:20:02.560
啊

01:20:02.560 --> 01:20:03.040
这是这个

01:20:03.040 --> 01:20:04.480
should yield to host

01:20:06.770 --> 01:20:07.090
好

01:20:07.090 --> 01:20:07.570
在这边

01:20:12.690 --> 01:20:13.570
ok

01:20:13.570 --> 01:20:13.730
啊

01:20:13.730 --> 01:20:14.850
这边这边的话就

01:20:14.850 --> 01:20:15.330
啊

01:20:15.330 --> 01:20:15.970
看这边

01:20:17.010 --> 01:20:18.450
这边实际上就是什么了

01:20:18.450 --> 01:20:19.490
就是计算啊

01:20:19.490 --> 01:20:20.450
首先计算这个

01:20:22.860 --> 01:20:23.660
首先计算

01:20:27.780 --> 01:20:29.300
首先计算

01:20:29.380 --> 01:20:30.500
什么计算它

01:20:30.500 --> 01:20:30.660
啊

01:20:30.660 --> 01:20:34.500
然后判断是否超时

01:20:35.860 --> 01:20:36.180
对不对

01:20:37.140 --> 01:20:37.780
没有的话

01:20:38.900 --> 01:20:39.780
没有的话

01:20:40.420 --> 01:20:42.020
就返回force

01:20:42.660 --> 01:20:43.620
返回force

01:20:44.340 --> 01:20:46.420
表示不需要归还

01:20:48.340 --> 01:20:48.900
否则

01:20:51.060 --> 01:20:52.820
否则就干嘛

01:20:52.820 --> 01:20:53.780
就返回处

01:20:54.900 --> 01:20:56.500
返回处

01:20:58.260 --> 01:20:58.900
返回处

01:20:59.540 --> 01:21:01.540
表示需要归还

01:21:03.060 --> 01:21:03.860
对不对

01:21:03.860 --> 01:21:04.900
需要归还

01:21:04.900 --> 01:21:05.460
啊

01:21:05.460 --> 01:21:05.700
好

01:21:05.700 --> 01:21:07.300
然后在这边还需要注意

01:21:07.300 --> 01:21:08.100
一个就是这个

01:21:08.740 --> 01:21:09.780
frame interval

01:21:09.780 --> 01:21:11.300
默认设置的是5毫秒

01:21:12.740 --> 01:21:16.180
默认设置的是5毫秒

01:21:16.180 --> 01:21:17.140
这个我们刚才看了的

01:21:18.020 --> 01:21:18.820
对不对

01:21:18.820 --> 01:21:19.620
默认是5毫秒

01:21:21.140 --> 01:21:21.380
啊

01:21:21.380 --> 01:21:22.260
这是关于这个

01:21:22.260 --> 01:21:23.780
should yield to host

01:21:24.340 --> 01:21:24.580
啊

01:21:24.580 --> 01:21:25.140
最后的话

01:21:25.140 --> 01:21:26.500
然后我们再看一下这个方法吧

01:21:28.260 --> 01:21:28.740
嗯

01:21:28.820 --> 01:21:29.780
就是刚才那个

01:21:30.820 --> 01:21:31.060
从

01:21:32.020 --> 01:21:32.340
这里

01:21:32.980 --> 01:21:33.140
啊

01:21:33.140 --> 01:21:33.780
就这个方法

01:21:33.780 --> 01:21:34.420
这个方法我说了

01:21:34.420 --> 01:21:34.900
它是干嘛

01:21:34.900 --> 01:21:36.740
它是便利这个time of cream

01:21:36.740 --> 01:21:39.140
判断是否有已经到期的这个任务

01:21:39.140 --> 01:21:42.260
有的话就把它拿出来放到这个task of cream里面

01:21:42.260 --> 01:21:42.580
好来

01:21:42.580 --> 01:21:43.620
我们这边把这个方法

01:21:44.180 --> 01:21:45.060
最后把它看一下

01:21:45.060 --> 01:21:45.220
啊

01:21:49.180 --> 01:21:50.300
and once timer

01:21:54.960 --> 01:21:55.280
好

01:21:55.280 --> 01:21:56.080
这边来看一下

01:21:56.880 --> 01:21:57.120
啊

01:21:57.120 --> 01:21:59.360
这边是那个flag

01:21:59.360 --> 01:22:00.400
我们到这边来看一下

01:22:01.920 --> 01:22:02.480
呃

01:22:02.480 --> 01:22:02.880
在这里

01:22:04.000 --> 01:22:04.560
对了

01:22:04.560 --> 01:22:05.120
在这里

01:22:05.200 --> 01:22:06.080
我们把它拿过来

01:22:09.780 --> 01:22:10.420
拿过来

01:22:11.460 --> 01:22:11.940
啊

01:22:11.940 --> 01:22:13.060
拿过来这个这也不多

01:22:13.860 --> 01:22:14.500
对不对

01:22:14.500 --> 01:22:15.300
也不多

01:22:15.300 --> 01:22:16.020
啊

01:22:16.020 --> 01:22:16.100
好

01:22:16.100 --> 01:22:16.660
这边的话

01:22:16.660 --> 01:22:17.380
接收一个什么呢

01:22:17.380 --> 01:22:18.580
接收一个这个

01:22:18.580 --> 01:22:19.940
时间的这个参数

01:22:19.940 --> 01:22:20.100
啊

01:22:20.100 --> 01:22:21.300
人家这边干嘛

01:22:21.300 --> 01:22:23.380
这边的话是从这个time of cream里面

01:22:23.380 --> 01:22:24.660
是不是拿一个任务出来

01:22:25.940 --> 01:22:26.260
啊

01:22:26.980 --> 01:22:28.660
从这个time of cream

01:22:30.340 --> 01:22:33.380
里面获取一个任务

01:22:35.060 --> 01:22:35.220
啊

01:22:35.220 --> 01:22:35.940
获取一个任务

01:22:35.940 --> 01:22:36.900
你主要这个time of

01:22:36.900 --> 01:22:37.780
它虽然名字叫time of

01:22:37.780 --> 01:22:40.100
那实际上它拿出来的是一个task

01:22:40.100 --> 01:22:41.060
拿出来的是一个任务

01:22:41.620 --> 01:22:41.940
啊

01:22:41.940 --> 01:22:42.980
是从这个time of cream里面

01:22:42.980 --> 01:22:43.940
拿出来的是一个任务

01:22:44.500 --> 01:22:44.740
ok

01:22:45.380 --> 01:22:45.540
啊

01:22:45.540 --> 01:22:46.740
你看它这边写的有注册

01:22:47.380 --> 01:22:50.260
check for task that are no longer denied

01:22:50.260 --> 01:22:51.540
就是这边确认这个

01:22:51.540 --> 01:22:52.340
你的这个任务

01:22:52.340 --> 01:22:53.540
不再需要延时

01:22:54.020 --> 01:22:54.180
啊

01:22:54.180 --> 01:22:56.100
然后and them to this cream

01:22:56.820 --> 01:22:57.140
对不对

01:22:58.500 --> 01:22:58.900
好

01:22:58.900 --> 01:22:59.780
然后接下来的话

01:22:59.780 --> 01:23:01.060
这边就是一个while

01:23:01.700 --> 01:23:02.100
while

01:23:02.100 --> 01:23:03.620
然后将来在那边去便利

01:23:03.620 --> 01:23:05.620
便利就是看你这个是否不为空

01:23:05.620 --> 01:23:06.260
啊不为空的话

01:23:06.260 --> 01:23:07.620
它这边肯定会做处理

01:23:07.860 --> 01:23:09.540
做完处理之后肯定又会执行这一句

01:23:10.340 --> 01:23:10.820
对不对

01:23:10.820 --> 01:23:12.580
又会拿拿出来一个啊

01:23:12.580 --> 01:23:13.940
这边便利整个

01:23:13.940 --> 01:23:15.780
这边相当于就是便利整个time of cream

01:23:17.300 --> 01:23:20.340
便利整个time of cream

01:23:21.860 --> 01:23:22.500
对吧

01:23:22.500 --> 01:23:23.700
好便利整个time of cream

01:23:23.700 --> 01:23:25.060
然后接下来这边

01:23:25.060 --> 01:23:25.780
来看一下吧

01:23:25.780 --> 01:23:27.220
这边e for else

01:23:28.580 --> 01:23:29.540
这边说白了就是什么

01:23:29.540 --> 01:23:30.500
是不是e for else

01:23:30.500 --> 01:23:30.820
e for

01:23:30.820 --> 01:23:32.180
这边做了一个判断

01:23:32.180 --> 01:23:32.820
判断之后

01:23:32.820 --> 01:23:34.180
你看这边我是不是说过

01:23:34.180 --> 01:23:36.180
所以一定又会从这个time of cream里面

01:23:36.180 --> 01:23:37.060
再取一个新的

01:23:37.700 --> 01:23:38.100
对不对

01:23:38.820 --> 01:23:39.860
从time of cream

01:23:40.820 --> 01:23:41.700
time of cream

01:23:42.580 --> 01:23:44.420
里面再取一个新的

01:23:46.260 --> 01:23:48.820
一个新的进行判断

01:23:49.460 --> 01:23:49.700
啊

01:23:50.260 --> 01:23:50.420
好

01:23:50.420 --> 01:23:51.620
我们这边首先来看这个

01:23:52.340 --> 01:23:54.020
如果这个time of cream

01:23:54.020 --> 01:23:54.740
点callback

01:23:54.740 --> 01:23:55.780
如果等于闹

01:23:55.780 --> 01:23:56.580
等于闹的话

01:23:56.580 --> 01:23:57.220
那就说明什么

01:23:57.220 --> 01:23:58.100
是不是就是你这个

01:23:58.100 --> 01:23:59.380
这个任务没有对应

01:23:59.380 --> 01:24:00.180
要执行的任务

01:24:00.740 --> 01:24:01.140
对不对

01:24:01.780 --> 01:24:02.340
这个任务

01:24:03.460 --> 01:24:05.300
这个任务没有

01:24:05.940 --> 01:24:07.220
对应的

01:24:07.220 --> 01:24:10.260
要执行的callback

01:24:11.060 --> 01:24:12.100
是不是直接弹出

01:24:12.740 --> 01:24:13.300
对不对

01:24:13.300 --> 01:24:14.420
直接弹出对立

01:24:15.540 --> 01:24:15.700
啊

01:24:15.700 --> 01:24:16.740
直接从这个对立

01:24:17.700 --> 01:24:19.620
从这个对立

01:24:20.340 --> 01:24:20.740
弹出

01:24:21.460 --> 01:24:21.860
OK

01:24:22.260 --> 01:24:23.380
好 else if

01:24:23.380 --> 01:24:25.540
如果你这个time of start time

01:24:25.540 --> 01:24:26.980
小于等于这个

01:24:28.340 --> 01:24:29.620
小于这个current time

01:24:29.620 --> 01:24:30.500
那说明什么

01:24:30.500 --> 01:24:32.180
是不是说明需要把它转移到

01:24:32.180 --> 01:24:33.060
你看这边有注释

01:24:33.620 --> 01:24:35.940
tries for to the task cream

01:24:36.580 --> 01:24:36.980
对不对

01:24:37.380 --> 01:24:39.060
那接下来进入这个分支

01:24:39.940 --> 01:24:41.620
进入这个分支

01:24:42.180 --> 01:24:47.460
说明当前的任务已经不再是

01:24:47.460 --> 01:24:48.020
什么

01:24:48.020 --> 01:24:48.980
是不是延时任务

01:24:49.860 --> 01:24:50.500
延时任务

01:24:51.060 --> 01:24:51.300
好

01:24:51.300 --> 01:24:54.500
我们需要将其

01:24:56.260 --> 01:24:57.700
将其转移到

01:24:58.980 --> 01:24:59.700
转移到哪里

01:24:59.700 --> 01:25:01.620
说转移到 task cream

01:25:03.790 --> 01:25:04.350
对不对

01:25:04.350 --> 01:25:05.070
转移到这儿

01:25:05.070 --> 01:25:05.150
啊

01:25:05.150 --> 01:25:06.030
说你看它这边

01:25:06.030 --> 01:25:07.070
从这儿弹出

01:25:07.070 --> 01:25:07.790
弹出之后

01:25:07.790 --> 01:25:08.990
然后接下来这边干嘛

01:25:09.470 --> 01:25:10.750
首先从这个time of cream

01:25:10.750 --> 01:25:11.630
里面弹出

01:25:11.630 --> 01:25:12.350
弹出了之后

01:25:12.350 --> 01:25:13.710
让jr这边更改了

01:25:13.710 --> 01:25:15.870
下它的sort index

01:25:15.870 --> 01:25:16.430
那这边

01:25:16.990 --> 01:25:17.470
你看这边

01:25:18.110 --> 01:25:18.830
这边是不是就是

01:25:18.830 --> 01:25:19.310
铺鞋

01:25:20.110 --> 01:25:20.510
对立

01:25:20.510 --> 01:25:21.630
铺鞋到 task cream

01:25:22.430 --> 01:25:22.830
推入

01:25:23.710 --> 01:25:25.950
推入到 task cream

01:25:27.230 --> 01:25:27.550
OK

01:25:27.550 --> 01:25:28.430
那下面下面这个

01:25:28.430 --> 01:25:29.310
又是在做那个

01:25:29.790 --> 01:25:30.830
就是性能

01:25:30.830 --> 01:25:32.350
就是资料的一些收集

01:25:32.350 --> 01:25:33.550
这个这个你不管它了

01:25:34.910 --> 01:25:35.790
你不管它

01:25:35.790 --> 01:25:37.470
你反正看到那个inable

01:25:37.630 --> 01:25:38.830
这个 profiling

01:25:38.830 --> 01:25:39.550
你不管它

01:25:40.590 --> 01:25:41.630
否则 else

01:25:41.630 --> 01:25:42.830
else 这边就 return

01:25:43.550 --> 01:25:43.790
啊

01:25:43.790 --> 01:25:44.430
这边就 return

01:25:45.390 --> 01:25:46.030
OK

01:25:46.030 --> 01:25:47.230
那这个方法也很简单

01:25:47.950 --> 01:25:48.670
对不对

01:25:48.670 --> 01:25:49.310
也很简单

01:25:51.520 --> 01:25:51.840
好

01:25:51.840 --> 01:25:52.800
把他放到这里

01:25:54.160 --> 01:25:54.400
啊

01:25:54.400 --> 01:25:54.720
这边

01:25:55.520 --> 01:25:56.160
该方法

01:25:58.000 --> 01:25:59.120
该方法

01:25:59.680 --> 01:26:01.280
就是变利

01:26:02.480 --> 01:26:04.480
整个time of cream

01:26:05.920 --> 01:26:06.800
对不对

01:26:06.800 --> 01:26:08.560
查看是否

01:26:09.600 --> 01:26:12.000
有已经过期的

01:26:13.280 --> 01:26:14.400
过期的方法

01:26:15.200 --> 01:26:15.920
如果有

01:26:17.520 --> 01:26:18.480
如果有

01:26:18.480 --> 01:26:20.560
不是说直接执行

01:26:22.720 --> 01:26:23.920
而是什么呢

01:26:23.920 --> 01:26:28.240
而是将这个过期的方法

01:26:28.240 --> 01:26:29.520
添加到哪里啊

01:26:30.080 --> 01:26:32.720
添加到这个 task cream

01:26:33.920 --> 01:26:34.960
task cream 里面

01:26:36.240 --> 01:26:37.040
对不对

01:26:37.040 --> 01:26:37.760
这样做的

01:26:38.720 --> 01:26:39.360
这样做的

01:26:40.320 --> 01:26:40.640
好

01:26:40.640 --> 01:26:43.840
这就是关于整个这个scaler

01:26:44.880 --> 01:26:47.040
他调度这个普通任务

01:26:47.040 --> 01:26:48.720
他是如何进行调度的

01:26:49.280 --> 01:26:49.360
啊

01:26:49.360 --> 01:26:50.720
大家可以看一下啊

01:26:50.720 --> 01:26:51.280
可以看一下

01:26:52.800 --> 01:26:54.320
那么咱们这堂课的话

01:26:54.320 --> 01:26:56.800
主要就是带着大家把这个scaler

01:26:56.800 --> 01:26:58.400
调度这个普通任务

01:26:58.880 --> 01:26:59.760
把这个流程

01:26:59.760 --> 01:27:01.120
带着大家走了一遍

01:27:01.680 --> 01:27:01.760
啊

01:27:01.760 --> 01:27:02.240
OK

01:27:02.240 --> 01:27:03.040
那下几课

01:27:03.040 --> 01:27:03.600
下几课的话

01:27:03.600 --> 01:27:04.560
我们就来看什么呢

01:27:04.560 --> 01:27:05.360
我们就来看

01:27:05.360 --> 01:27:06.880
我们这几课主要是看的是什么

01:27:06.880 --> 01:27:07.440
是不是

01:27:07.520 --> 01:27:08.720
就是调度普通任务

01:27:09.280 --> 01:27:09.600
好

01:27:09.600 --> 01:27:10.320
然后我们看到

01:27:10.320 --> 01:27:12.160
就是他在调度严实任务的时候

01:27:12.160 --> 01:27:13.600
他这边调度的是什么

01:27:13.600 --> 01:27:15.200
就调用的是这个request

01:27:15.200 --> 01:27:16.560
host time out

01:27:17.440 --> 01:27:18.000
对不对

01:27:18.000 --> 01:27:19.360
他这边是调度是这个

01:27:19.360 --> 01:27:20.320
那么下几课的话

01:27:20.320 --> 01:27:21.280
我们就来看一下这个

01:27:21.920 --> 01:27:23.120
顺着这个来走一下

01:27:23.760 --> 01:27:24.160
好吧

01:27:24.720 --> 01:27:25.040
OK

01:27:25.680 --> 01:27:26.000
好

01:27:26.000 --> 01:27:27.200
那么这些课的话

01:27:27.200 --> 01:27:28.160
就先到这里

01:27:29.040 --> 01:27:29.280
好

01:27:29.280 --> 01:27:29.680
再见

