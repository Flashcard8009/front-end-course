WEBVTT

00:00.240 --> 00:03.240
我们首先来看一下这道面试题

00:04.240 --> 00:09.240
这道面试题呢它说你谈一谈你对前端框架的理解

00:10.240 --> 00:16.240
那么这道题的话实际上它的答案的话是比较宽泛的 比较自由的

00:16.240 --> 00:22.240
主要就是看一下你对目前的前端框架 你是如何进行理解的

00:22.240 --> 00:27.240
那你的话你首先可以谈一下就是什么是前端框架

00:27.240 --> 00:31.240
对不对啊 什么样的这个东西才能被称之为这个前端框架

00:31.240 --> 00:37.240
第二个就是什么 第二个就是现代的这种前端框架 它解决了什么样的问题

00:38.240 --> 00:45.240
对不对啊 但你可以也可以从一些其他的点来谈啊 我这边的话只是就是我提供了就是两个这个方向

00:45.240 --> 00:51.240
ok 好来我们这边我们来看一下吧 我们这边就从这两个方向入手啊 首先第一个就是

00:51.240 --> 00:55.240
什么是这个前端框架

00:56.240 --> 01:04.240
ok 那首先的话我们需要干嘛呢 我们需要画定这个边界啊 首先我们需要这个画定

01:05.240 --> 01:10.240
边界就什么呢 就大家的话需要思考一个问题啊 就是你这边

01:10.240 --> 01:18.620
就是这个react 我们现在流行的啊 就react也好啊 或者这个view也好

01:18.620 --> 01:22.620
他们究竟是什么呢 究竟是这个cool

01:24.620 --> 01:32.620
是cool 还是框架对不对 你首先的话你要把这个边界你把它画定清楚啊

01:32.620 --> 01:38.620
这个的话在英文里面他两个对应的单词是不一样的 cool 的话他叫做什么 叫做这个lambry

01:39.620 --> 01:40.620
lambry

01:43.620 --> 01:47.620
lambry啊 然后这个框架框架的话叫做filmwork

01:51.310 --> 01:57.310
ok 那你这边的话 嗯 这种cool cool的话 我们之前的话学过比较像gequery啊

01:57.310 --> 02:03.310
nodashi啊 这个的话我们不会把它称之为框架 对不对 这种的话我们称之为这个cool

02:04.310 --> 02:11.310
而那这种框架框架的话 然后经常我们说这个react ve我们说它是框架 那它究竟是cool还是框架

02:11.310 --> 02:18.310
你如果你打开这个react的官网 你会发现这个官网他介绍的是什么呢 他介绍的react

02:18.310 --> 02:27.310
实际上是一个构建ui的这个cool ok 所以这边呢首先我们需要明确啊 实际上无论

02:29.310 --> 02:35.310
无论是react也好 也好 还是view也好

02:36.310 --> 02:48.690
他们啊 本身什么他们的这个核心啊 他们的核心是构建ui的cool ok

02:49.690 --> 02:53.090
他是构建ui的cool 他们的话提供了如下的功能

02:54.290 --> 03:00.290
提供了如下的功能 这边第一个是什么呢 就是基于状态

03:01.690 --> 03:13.510
基于状态的声明视线啊 对吧啊 无论是react也好 还是view也好啊 他们这种mvv m的这种这种架构

03:14.110 --> 03:20.390
啊 他可以基于这种状态 状态的这个改变 然后接下来我的这个ui自动的进行一个更新

03:21.270 --> 03:27.510
对不对啊 基于这个状态的一种声明视的渲染 第二个就是什么呢 第二个的话就是提供

03:28.910 --> 03:38.410
主键化开发 看了没有啊 无论是react也好 还是view也好 他们的核心实际上是提供了这两个东西

03:39.610 --> 03:42.930
ok 主要是拿来干嘛呢 主要是用来构建这个ui的

03:43.730 --> 03:50.290
啊 比如说你这种基于状态的这种声明视渲染 可以让你在构建ui的时候更加的容易啊 基于状态吗

03:50.770 --> 03:53.330
你状态一改了之后 他的这个ui自动的更新

03:53.970 --> 03:59.930
不再像以前这个解query时代啊 需要手动的获取到那个多么节点 然后接下来再手动的进行更新

04:00.690 --> 04:09.770
其次的话就是 现在的话就是非常流行这种单眼应用啊 说这边的话就是react和view 他们都提供了什么呢 提供了这个主键化开发

04:10.650 --> 04:14.250
他们本质是一个什么呢 本质上实际上是一个cool

04:15.090 --> 04:19.370
ok 写明确这一点啊 先把这个边界咱们把它画定了

04:20.050 --> 04:24.450
好 然后接下来的话 当我们的这种应用 他进一步的这个扩展

04:26.530 --> 04:32.770
当应用 进一步的这个扩展 从什么呢 从这个简单的这个页面

04:34.130 --> 04:42.210
升级为了这个sp 就是我们的这个单眼应用 对吧 你看现在的话 基本上都是开发这种单眼应用

04:42.690 --> 04:45.210
啊 因为他的这个用户体验的话会更加好一些

04:46.050 --> 04:52.930
那你开发这个单心这个单眼应用的话 意味着什么 意味着你是不是需要前端的这个路由方案

04:53.610 --> 04:55.290
对不对啊 此时

04:56.250 --> 05:02.770
意味着需要前端要有什么呢 要有前端路由方案

05:04.610 --> 05:09.010
前端路由方案啊 那这个react阵营

05:10.170 --> 05:13.770
react阵营有了什么 是不是有了这个react

05:14.730 --> 05:20.210
然后rotor 对不对 官方提供的 然后这个view阵营

05:22.170 --> 05:22.930
view阵营

05:24.050 --> 05:33.330
有了什么呢 有了这个viewrotor 对不对啊 这个的话有了这个前端路由库

05:34.490 --> 05:41.940
有了这些前端路由库 前端路由库 注意这个也是库

05:42.820 --> 05:48.900
也是库啊 就这边reactrotor也好 还是这个viewrotor也好啊 这些的话他也是

05:49.380 --> 05:55.180
这个前端路由库 好 然后接下来随着你这个应用的这个复杂 这个复杂度的这个提升

05:55.620 --> 06:02.380
我们的组建的数量是不是慢慢也就增多了 对不对 你组建之间这个状态的管理的难度

06:02.940 --> 06:08.940
他也就相应了这个提升了 那么这个时候的话就需要什么呢 就需要状态管理的这个方案

06:09.700 --> 06:12.260
比如我们reactreact的话对应了有这个reduct

06:12.900 --> 06:19.500
那view的话对应了有什么呢 有这个pnx 对不对啊 随着这个应用

06:20.700 --> 06:22.900
复杂度的进一步提升

06:25.290 --> 06:27.610
然后组建的这个数量

06:28.850 --> 06:32.090
越来越多啊 然后状态管理

06:33.090 --> 06:35.290
状态管理越来越

06:36.090 --> 06:40.410
复杂啊 因此就需要什么就需要状态

06:42.170 --> 06:43.490
状态管理

06:43.890 --> 06:49.220
都酷 对吧 好 那接下来这个react阵营

06:50.780 --> 06:52.460
有什么呢 有这个reduct

06:53.180 --> 06:56.260
啊 以及后期的话 他官方出了一个什么是个reactreduct

06:57.660 --> 06:59.220
对不对啊 那view阵营

07:00.100 --> 07:03.180
view阵营有什么有这个viewx

07:04.420 --> 07:05.740
viewx啊

07:06.500 --> 07:09.900
以及啊viewx 以及就是最近比较火的这个平衡

07:11.100 --> 07:15.300
啊 被看作是这个viewx的这个接班 对吧 平衡

07:16.180 --> 07:19.940
对不对 就有了这些库 它仍然是库 仍然是库

07:20.300 --> 07:25.740
ok 好 然后接下来的话 你为了这个提高客户端 比较首评悬染的这个速度

07:26.100 --> 07:33.580
啊 满足这个seu的这个需求他还会什么 还会提供 就是还需要使用到一些这个srg

07:34.300 --> 07:41.980
对不对啊 说说这边的话 很多功能的话 你会发现他 就是这些功能的话他其实react和这个view

07:42.340 --> 07:43.780
本身他是并不包含

07:43.780 --> 07:49.300
都喊的对不对啊我们发现我们发现就是除了

07:50.700 --> 07:54.020
上面啊上面提提到的

07:55.460 --> 07:57.540
提到的呃这些

07:58.580 --> 08:02.100
功能以外啊然后还有很多其他的功能

08:03.060 --> 08:05.940
还有很多其他的功能

08:07.860 --> 08:11.060
啊比如什么呢啊比如说你这个啊构建支持

08:12.020 --> 08:15.300
啊比如你的这个数据流方案

08:17.140 --> 08:19.220
对吧啊你的比如说文档工具

08:20.420 --> 08:24.820
文档工具啊这些功能的话react

08:26.660 --> 08:28.020
react和这个view

08:29.220 --> 08:33.060
本身其实是不止持的

08:34.180 --> 08:35.780
对不对啊说说他们

08:36.660 --> 08:41.220
所以说这个react和view

08:41.940 --> 08:44.660
本身只是专注于什么

08:45.060 --> 08:48.900
只是专注于UI的选择

08:50.180 --> 08:52.340
对不对或者说就是构建UI

08:54.260 --> 08:56.740
对不对啊然后接下来我们可以把什么呢

08:56.740 --> 08:59.300
我们可以把就是react view和他

08:59.780 --> 09:01.380
就是周边的一些这个

09:02.420 --> 09:05.540
其他的一些啊这个比如说这个路由方案啊

09:05.860 --> 09:07.620
还有这个状态管理的库呀

09:07.620 --> 09:10.740
合在一起把这个整体的这个解决方案

09:11.140 --> 09:14.500
是不是称之为这个框架对不对啊因此

09:15.460 --> 09:18.500
我们可以将什么呢可以将就是啊

09:19.620 --> 09:21.140
呃包含库本身

09:23.320 --> 09:28.200
包含库本身以及什么呢其他附加功能

09:30.200 --> 09:33.160
其他附加功能啊比如说就是我们这边所说的啊

09:33.160 --> 09:36.840
比如你这个前端的路由的这个库对吧状态管理的库

09:37.320 --> 09:41.000
啊比如你的构建支持你的文档工具啊这些东西啊

09:41.000 --> 09:43.640
整个一起我们称之为什么呢称之为

09:43.640 --> 09:46.040
就是整个这个的这个解决方案

09:47.480 --> 09:50.120
解决方案称之为框架

09:51.960 --> 09:55.720
对吧啊往往我们其实还就是更加倾向于用另外一个词

09:55.720 --> 09:58.760
叫做什么叫做这个站啊每个技术站

10:00.360 --> 10:02.360
对不对啊比如你去面试的时候

10:02.360 --> 10:05.080
然后接下来比如别人问你你用的是什么技术站

10:05.080 --> 10:06.840
你说我比如说我用的是view技术站

10:07.320 --> 10:10.760
那别人的话就知道啊你用的是view这一套东西

10:11.640 --> 10:16.360
啊不是说单单就一个view对不对啊会包含整个一套东西啊

10:16.360 --> 10:17.880
或者叫做什么呢或者叫做全家筒

10:19.080 --> 10:22.760
之前有个词语叫做技术站或者这个全家筒啊

10:22.760 --> 10:25.880
包含了就是你的这个前端路由方案view rotor

10:26.440 --> 10:29.080
啊包含了你的这个状态管理的库views

10:29.800 --> 10:33.400
对不对以及其他一些相关的东西啊我们把整个这一块

10:33.960 --> 10:34.920
称之为这个框架

10:35.640 --> 10:37.800
ok那比如说啊例如

10:39.080 --> 10:39.880
比如说5米

10:41.400 --> 10:45.240
5米节是5米节是我们之前是不是讲过的对不对

10:45.240 --> 10:48.760
5米节是那他的话他就是一款框架啊

10:49.720 --> 10:55.560
这个就是一款框架啊这款框架的话他是怎么呢

10:55.560 --> 10:59.480
他是基于react啊基于react

10:59.480 --> 11:02.440
然后内置路由啊还有什么呢

11:02.520 --> 11:06.120
还有就是构建以及部署等功能

11:09.450 --> 11:12.330
你看他是不是就是把我们这边刚才所说的比如你的路由啊

11:12.330 --> 11:14.730
还有状态管理啊就全部包含进去了

11:14.730 --> 11:17.850
所以你可以说5米节是他是一个这个框架

11:18.490 --> 11:20.970
ok好比如说这个next

11:23.290 --> 11:26.490
next的点节是他的话啊是一款框架

11:28.500 --> 11:30.820
他是一款框架ok他基于什么呢

11:30.820 --> 11:33.940
同样是同样是基于react啊

11:34.020 --> 11:38.260
然后支持这个ssr就服务器端渲染啊

11:38.260 --> 11:42.340
还有ssg这个是这个静态内容生成啊

11:42.340 --> 11:47.940
他是这个基于react啊支持这两个啊两大功能的

11:49.860 --> 11:55.940
两大功能的服务端框架看到没有啊

11:55.940 --> 11:58.260
这些的话你可以把它称之为框架

11:58.260 --> 12:01.780
而不是说这个react和view本身啊

12:01.860 --> 12:03.780
但是我们往往啊往往

12:05.220 --> 12:10.420
就是在很多地方啊你可以听到就说这个react框架或者view框架的这个说法

12:10.420 --> 12:15.380
那为什么会有这个说法呢啊其实这个原因很简单啊

12:15.380 --> 12:22.500
就是在平时在平时我们经常能够听到啊听到什么呢

12:22.500 --> 12:29.620
比如说react框架然后view框架啊这样的说法

12:30.420 --> 12:35.380
啊为什么会有这样的说法呢啊原因很简单啊这个时候

12:36.340 --> 12:43.300
这个时候所指的所指的这个react或者什么呢或者view

12:43.940 --> 12:47.700
往往指的是啊整个

12:48.900 --> 12:50.260
整个这个react

12:51.460 --> 12:54.420
整个react啊或者什么呢或者view

12:55.380 --> 13:06.340
view这个本身以及啊他们这个周边的周边的这个生态产品

13:08.180 --> 13:13.140
没有吧就平时你在说react的时候往往其实就是包含什么包含了react本身

13:13.140 --> 13:21.910
以及它周边的比如说react rotor啊啊以及这个啊状态库对吧

13:21.990 --> 13:27.910
就包含这一就是整个这一块啊它本身以及它这个周边的这个生态产品

13:27.910 --> 13:32.390
说这个的话其实可以算是一种什么呢算是一种约定熟成的说法

13:33.350 --> 13:36.230
因此这个可以

13:37.830 --> 13:42.310
算是一种约定熟成的说法

13:44.840 --> 13:47.720
约定熟成的这个说法

13:48.440 --> 13:52.360
没有吧啊就往往你听到生活中说react框架view框架

13:52.520 --> 13:57.880
其实就是指的什么呢指的是整个这个他的这个全家桶啊或者说整个这个技术站

13:58.520 --> 14:04.680
ok是这样子的啊但如果你要严谨的来讲的话react和view本身实际上是nebulary

14:05.880 --> 14:11.400
啊本身是cool你不行的话你可以把那个react这个官网打开啊react官网打开

14:11.400 --> 14:18.200
然后你可以看到就是首先他那个标题就说react是一个什么就是可以构建这个用户界面的一个cool

14:18.920 --> 14:20.680
啊是个nebulary ok

14:21.000 --> 14:28.200
好然后接下来的话你这边的话你还可以说一下什么呢你还可以说一下就是现代前端框架的这个特点

14:29.240 --> 14:36.120
现代前端框架有什么特点呢啊就在我认为的话现代前端框架的话至少包含以下几个方面

14:38.040 --> 14:38.600
现代

14:39.720 --> 14:40.440
前端框架

14:41.720 --> 14:42.840
ok至少

14:43.960 --> 14:44.360
包含

14:45.160 --> 14:46.040
以下几个方面

14:47.000 --> 14:51.960
这个我好像之前给大家讲过了啊首先第一个就是吗第一个就是我们刚所说的这个基于

14:52.520 --> 14:53.960
状态的这个声明式渲染

14:56.360 --> 15:02.920
对不对你可以看到就是现在无论是哪个前端框架啊无论是react也好还是view也好啊但我这边就是

15:03.480 --> 15:10.120
说的这种约定疏程的说法了啊无论是react也好还是view也好它一定是就是基于状态声明式渲染的

15:10.680 --> 15:15.480
啊不再像以前了啊不再像这个qquery时代了我还要去操作那个dorm

15:15.480 --> 15:17.720
对不对包括现在新的一些这个框架

15:18.120 --> 15:19.320
不要这个swilt啊

15:19.880 --> 15:29.080
sully的js呀你一定是基于状态的啊咱们前端开发的话就是什么呢就是把你所有的这个精力集中到这个就是状态

15:29.960 --> 15:34.040
数据啊你集中精力的话就思考这个数据是如何变化的

15:34.520 --> 15:38.440
至于这个数据变化了然后页面要重新渲染这个不需要你去考虑了

15:38.760 --> 15:44.680
啊你只需要就是比如说和那个模板啊或者这个react里面js他绑定好了就行了

15:45.240 --> 15:48.520
ok这个的话是首先现代前端框架一定会提供了

15:49.080 --> 15:50.200
第二个什么呢第二个就是

15:51.320 --> 15:52.600
支持主键化开发

15:54.200 --> 15:58.040
啊这个的话也是就是现代前端框架他一定会提供了一个功能

15:58.680 --> 16:04.360
对不对你可以看到无论是react也好还是这个view也好啊他一定是支持这个主键化开发

16:04.760 --> 16:08.280
啊主键化的话其实最大的好处就是什么最大的好处就是附用

16:09.800 --> 16:14.440
对不对最大的好处就是附用啊实际上这个是咱们作为开发人员

16:14.920 --> 16:17.000
说追求的一个终极的目标

16:17.880 --> 16:22.280
对不对你从这个最早的这个函数开始啊为什么会出现函数吗

16:22.600 --> 16:29.000
不就是为了代码的附用吗对不对那到后面的这个面向对象的这种思想啊这面出现了这个内

16:29.560 --> 16:33.480
啊为什么要有内通过内实力化对象不也就是为了这个附用吗

16:34.200 --> 16:41.160
对不对啊所以这个的话附用的话实际上是咱们程序员啊追求的这个终极目标啊包括这边的主键化

16:41.800 --> 16:46.520
之所以有这个主键化就是为了什么最大程度的附用我们的代码啊

16:46.520 --> 16:49.480
主键里面包含了什么呢包含了 html css

16:49.720 --> 16:52.440
gs 它是一整个一套完整的东西

16:53.400 --> 17:00.120
对不对啊一套完整的功能那回头你比如说要在某一个项目里面要用的时候啊直接拿出来用就可以了

17:01.880 --> 17:05.320
好还有什么呢还有就是这个前段路有方案

17:09.210 --> 17:12.810
ok 你会发现无论是react 也好还是这个view 也好

17:12.810 --> 17:15.130
它是不是都会提供这个前段路有方案

17:15.530 --> 17:21.610
这前段路有方案这个是怎么产生的啊这个的话实际上是随着这个单页应用的这个诞生

17:22.170 --> 17:28.570
而产生的啊这个的话我之前给他讲过的对吧啊这个我就不在这这个不在这里多说了

17:29.770 --> 17:34.010
啊这个你是这个前段路有方案啊还有一个就是什么呢还有就是一个状态管理

17:37.110 --> 17:40.550
状态管理方案 ok 你这个主键一多

17:41.030 --> 17:46.230
主键一多的话是不必然会涉及到主键和主键之间进行通信的时候如何进行通信

17:47.110 --> 17:50.870
啊你如果还像这种原始的这种pops啊一层一层这种船

17:51.350 --> 17:54.550
那你如果这个主键的这个成绩稍微多一些

17:55.270 --> 17:57.430
那你这样子船的话就是会非常的费力

17:58.230 --> 18:03.030
对不对说这边的话在大型项目里面的话一定会用到这个状态管理的这种方案

18:03.910 --> 18:08.230
view 里面的话就用的是views 啊当然这个是2.几啊先3.几的话

18:08.630 --> 18:14.550
就是view3的话推荐使用这个平仰啊慢慢慢慢现在这个官方好像都开始推荐这个用平仰了

18:14.950 --> 18:16.950
这个大家下去可以了解一下啊

18:17.430 --> 18:21.590
然后这个reactreact的话就是有什么呢就是有这个reactredux

18:22.630 --> 18:26.550
reactredux对吧他一定会提供这种状态管理的方案

18:27.030 --> 18:33.830
所以你现在的话作为一个现代前段框架你至少的话需要包含什么呢包含这么几个方面

18:34.790 --> 18:40.150
ok好这是关于这个整个对前段框架的一个这个理解啊

18:40.710 --> 18:44.790
好这边这个整体解答谈一谈你对前段框架的这个理解

18:45.110 --> 18:48.550
好我这边呢就把这边一个参考答案我把他拿过来

18:50.810 --> 18:53.210
啊把他放到这里啊大家可以看一下啊

18:54.090 --> 18:59.610
好在早期使用qquery时代啊那个时候开发人员需要什么是不是手动的去操作多么节点

19:00.010 --> 19:03.210
对那个时候还是mp mp就是那个多也应用

19:03.930 --> 19:09.210
啊这个m是那个multiple multiple的一个单车啊multiple这个pagy

19:09.770 --> 19:13.050
啊polycation啊实际上那个时候多也的话不能称之为应用

19:13.610 --> 19:18.890
那个时候更多的时候称之为什么称之为网站对不对称之为网站啊

19:19.930 --> 19:25.850
好然后各个页面的这个接时代码还就是还在能够接受的啊能够接受啊

19:26.890 --> 19:31.770
能够接受的这个范围内啊但是随着什么呢随着你单页应用的这个流行

19:31.930 --> 19:34.250
客户端接时代码量是不是出现这个景喷

19:34.970 --> 19:43.290
对不对啊你单页应用的那个就是前端的那个接时的代码量啊明显啊是一定会比之前这个多月的那个时代

19:43.610 --> 19:46.810
那个代码量是一定会多的多的多的啊

19:47.210 --> 19:54.010
因为你会就是多很多步骤啊所以你如果还去采用这个传统的手动去操作多么的这种方式

19:54.570 --> 19:58.730
这个对于咱们开发人员来讲的话是有非常大的这个心之负担的

19:59.690 --> 20:07.290
面吧啊这个话是实际上一切都是有历史原因的啊就一层套一层的不是说一个技术平白无辜的就出现了

20:08.090 --> 20:11.850
一个新的技术的出现一定是为了解决之前的一些痛点

20:12.650 --> 20:16.410
啊就好比我后面会给大家介绍就是咱们这个react的这种架构

20:16.890 --> 20:18.410
新的架构比如fiber架构

20:19.210 --> 20:24.650
他的出现的话一定是为了解决之前的那种架构他有一些这个没办法解决的问题

20:25.610 --> 20:28.250
面吧啊不是说屏空的出现啊

20:29.130 --> 20:37.290
好啊你这个以前采用这种传统的这种手动操作多么的方式啊对于开发人员来讲有非常大的这种心之负担啊

20:37.290 --> 20:38.410
所以说出现了什么呢

20:38.410 --> 20:44.010
所以说出现了基于状态声明式渲染以及提供组建化开发模式的这种枯

20:44.330 --> 20:46.330
比如这个view和这个react

20:46.970 --> 20:50.730
但是这两者的话他本质仅仅是构建ui的枯

20:51.690 --> 20:55.050
对不对啊随着你应用了这个复复杂度的这个提升

20:55.290 --> 20:59.050
你还需要有这个路由的方案啊状态管理的方案啊

20:59.050 --> 21:02.090
所说有了这些什么呢有了这些周边产品啊

21:02.490 --> 21:08.570
你把这些周边产品啊和这个view啊view和react本身以及就是这些周边产品

21:08.970 --> 21:10.330
啊把它合在一起

21:10.810 --> 21:15.690
他才能什么呢才能共同的构成一个技术站或者说一个全家桶啊

21:15.690 --> 21:18.730
那我们才能把它什么呢把它称之为一个框架

21:19.690 --> 21:24.810
妙妙啊但现在的话你在外面经常听到所说的这个react框架view框架

21:25.210 --> 21:30.570
他实际上就是指的是什么指的是整个view和react以及他周边的这种生态产品

21:31.370 --> 21:34.810
啊他可以算是一种约定俗成的这种说法了

21:35.690 --> 21:40.570
ok啊然后真真正正你比如说你去学这个什么无米階士啊next階士啊

21:40.570 --> 21:42.890
这些其实你说他是框架这个没问题了

21:43.450 --> 21:47.130
啊因为他内部的话就包含了一整套完整的这个解决方案

21:47.850 --> 21:51.290
对不对啊包括路由的包括这个状态管理的啊

21:51.290 --> 21:53.930
包括这个文档构建的啊各种各样的

21:53.930 --> 21:57.930
说这种的话你可以把它称之为框架这个是没问题的啊

21:58.810 --> 22:02.970
啊最后的话就是一块这个一款现代这个前端框架

22:03.610 --> 22:09.690
啊那在他这个本身以及他这个周边的生态中啊至少包含这么四个方面

22:09.690 --> 22:11.610
这四个方面的话刚才我已经说过了

22:12.170 --> 22:16.330
ok啊这是关于这个前端框架的这个理解

22:17.210 --> 22:22.490
啊当我这边的话实际上只是从了其中的几个点来回答的啊

22:22.490 --> 22:24.970
你这边的话其实你下来的话你可以思考一下

22:24.970 --> 22:28.010
就你对前端框架的理解是怎么样子的

22:28.730 --> 22:32.170
你理解了之后你能不能用你自己的语言把它说出来

22:32.170 --> 22:35.850
把它组织出来啊就是你这个要说的话啊

22:35.850 --> 22:37.930
能够把它组织出来把它说出来

22:37.930 --> 22:42.010
你如果能够就是说出你自己的这种理解和看法啊

22:42.010 --> 22:43.370
这个的话实际上是最好的

22:44.090 --> 22:45.770
喵喵这个是最好的

22:46.490 --> 22:50.330
好吧好这就是关于这节课啊就这道面试题啊

22:50.330 --> 22:51.850
谈一谈你对前端框架的理解

22:52.410 --> 22:54.810
好这节课就到这里啊再见

