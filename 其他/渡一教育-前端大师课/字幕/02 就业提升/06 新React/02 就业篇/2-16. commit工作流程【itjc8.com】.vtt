WEBVTT

00:00.000 --> 00:04.720
好 这些课的话 我们来看一下 关于这个commit的这个工作流程

00:05.320 --> 00:06.720
好 这边的话有道面是提

00:07.720 --> 00:14.800
commit阶段 它的工作流程是怎样的 那么这个阶段的话有哪些模块啊 每个模块的话它在做什么

00:15.560 --> 00:24.200
那么关于这个commit啊 这个这个阶段 我们之前的话在讲这个react渲染流程的时候啊 我们做了一个大致的这个介绍

00:24.680 --> 00:30.000
对吧 我们之前讲过 整个这个react它可以分成两个这个两大阶段

00:31.160 --> 00:38.120
整个react的这个工作流程可以分为两大阶段

00:39.200 --> 00:42.480
对吧 一个是什么 一个是不是就是我们的这个Render阶段

00:44.240 --> 00:49.240
Render阶段 一个就是什么 是不是就这个commit阶段

00:49.760 --> 00:57.040
对不对 好 其中的话你这个Render阶段 Render阶段的话又可以分成两个 一个是什么呢 一个是这个是schedule

00:59.160 --> 01:03.190
schedule啊 这个的是调度

01:05.110 --> 01:05.990
schedule

01:07.710 --> 01:10.590
啊 另外一个是什么 另外一个是这个reconcel

01:11.870 --> 01:19.390
对不对 reconcel啊 那前面的话我们针对这个schedule和这个reconcel啊 我们已经做了这个介绍

01:19.830 --> 01:23.790
那接下来的话 我们这几个的话 我们主要就看一下这个关于这个commit

01:24.990 --> 01:30.510
commit阶段的话 我们说过 Commit阶段的话 它这边分成三这个三个指阶段

01:31.230 --> 01:37.430
啊 首先有个要说一下啊 就是你前面这个Render阶段 它的话是在内存中运行的

01:38.790 --> 01:39.070
注意

01:40.390 --> 01:46.510
Render阶段的这个行为是在什么呢 是在内存中

01:47.510 --> 01:55.550
运行的 那在内存中运行的意味着什么呢 意味着是不是可以被打断 对不对 这意味着

01:56.510 --> 02:01.870
可能被打断啊 也可以被打断

02:03.350 --> 02:07.190
哎 这句话能理解吧 就它有可能的话我被打断 那能不能被打断可以

02:08.030 --> 02:14.950
对不对 就你这种打断的这种行为 云不云血也云血啊 对于这个就是用户来讲的话 它看到

02:15.470 --> 02:22.550
就是它这边看不到任何东西 对因为它是在内存里面啊 所以它可能被打断啊 而且这种打断也是可以的啊

02:23.910 --> 02:24.950
而这个commit

02:26.470 --> 02:29.790
commit阶段 则是什么呢 则是

02:31.750 --> 02:33.750
则是一旦开始

02:34.670 --> 02:34.990
就会

02:36.510 --> 02:41.190
这个同步 同步执行 直到什么呢 直到完成

02:43.960 --> 02:53.080
ok 你一定要注意哦 这个commit阶段的话 它是同步的啊 你这边的话这个Render阶段在这里面的这个工作啊 它是在内存里面啊

02:53.320 --> 03:00.200
就是异步的 因为它这个通过这个skill啊 这个派发任务嘛 对不对 它是异步的啊 然后可以被打断的

03:00.600 --> 03:04.520
ok 但是这个commit阶段这个的话 它是同步的 我这个给你加粗

03:06.360 --> 03:10.880
ok 好 然后接下来commit阶段的话 整体可以分成三个指阶段

03:11.840 --> 03:31.840
commit阶段 整体可以分为三个指阶段 你三个指阶段呢 好 这边把它拿过来啊 这个呢 之前在介绍的一个reactor 虽然流程的时候 这个是介绍过的 对吧 分别分为就是before mutation

03:32.240 --> 03:39.040
然后multation 然后layout啊 我们接下来的话 其实就是围绕这三个阶段来就是来展开啊

03:39.600 --> 03:40.800
好 这边有张图啊

03:42.240 --> 03:48.400
整体流程图 楼下 好 把这张图把它过来

03:53.170 --> 03:59.490
好 这边可以看一下这张图啊 这张图的话应该是之前看过的啊 这边呢 首先判断是否有这个副作用

04:00.050 --> 04:07.250
啊 然后如果是no 弄的话 然后接下来这边就直接过来 过来之后 然后加这个fiber tray 进行一个这个切换

04:07.730 --> 04:12.210
啊 你注意这个fiber tray的切换 实际上是在commit阶段进行这个切换的

04:12.770 --> 04:19.010
就我们之前讲那个fiber双晃充的时候 是不是有两颗这个fiber说 对不对 一个是current

04:19.570 --> 04:27.890
current fiber tray 一个是web fiber tray啊 人家这边他是在这个commit阶段进行一个切换 切换完了之后 然后接下来这边

04:29.170 --> 04:34.130
嗯 调度新的更新啊 调度新的更新了就是重新回到什么 重新回到这个schedule

04:34.850 --> 04:41.970
对不对 仁德的这个schedule啊 好 如果有副作用 那接下来会进行什么呢 会进行这个before mortising

04:42.290 --> 04:48.690
那mortising mortising完了之后 然后加这边fiber tree切换切换完了之后 然后接下来这边

04:49.250 --> 04:57.010
not啊 这个before mortising就是什么呢 就是mortising就是修改的意思 修改变动 这个在变动之前

04:57.730 --> 05:03.090
他首先有一个阶段 要做一些事情 好 然后接下来的话 这边进行什么呢 进行一个这个变动

05:03.570 --> 05:09.170
变动完了之后 然后加这边进行一个layout 内奥特就不局的意思啊 那你内奥特一旦

05:09.570 --> 05:14.770
执行完了 是不是这个对应的这个真实的这个ui就发生改变了

05:15.570 --> 05:18.610
对不对 ok 整体流程啊 这样子的

05:19.250 --> 05:24.770
好 然后接下来的话 这边呢 他分成这个就每个阶段 他有分成三个指阶段

05:25.250 --> 05:26.250
注意

05:27.730 --> 05:29.330
每个阶段

05:30.130 --> 05:36.320
又又分成三个指阶段

05:37.200 --> 05:42.000
对 你会发现这个before mortising 这边三个指阶段 mortising

05:43.200 --> 05:44.960
三个指阶段layout

05:45.840 --> 05:51.600
三个指阶段 对不对 而且这三个指阶段都是有规律可寻的 他们基本上都是什么样子 基本上都是这样子

05:52.560 --> 05:54.000
就是这边的话是比如说

05:55.360 --> 05:55.760
commit

05:56.720 --> 05:58.560
然后插插插

05:59.280 --> 06:00.960
然后这个effects

06:04.180 --> 06:05.940
就这样子了 接下来commit

06:06.900 --> 06:08.980
然后这边的话这个插插插

06:09.940 --> 06:11.220
然后这个begin

06:12.820 --> 06:13.460
effects

06:14.100 --> 06:14.420
begin

06:17.250 --> 06:18.690
好 然后加这边的commit

06:21.650 --> 06:22.050
commit

06:22.610 --> 06:24.610
插插插 然后加这边effects

06:26.050 --> 06:26.930
effects

06:26.930 --> 06:27.810
然后complete

06:28.770 --> 06:30.850
每一个都是

06:30.850 --> 06:35.330
对不对 这边的话先执行这个当前的这个 比如你这个是before mortising

06:35.330 --> 06:37.810
这边就是commit before mortising effects

06:37.810 --> 06:40.210
你这边是motation 这边就是commit

06:40.210 --> 06:41.570
motation effects

06:41.570 --> 06:44.050
这边layout 这边就是layout effects

06:44.050 --> 06:46.450
完了之后然后加这边begin

06:46.450 --> 06:47.170
complete

06:47.170 --> 06:48.050
begin

06:48.050 --> 06:48.770
complete

06:48.770 --> 06:49.250
对吧

06:49.250 --> 06:49.810
begin

06:49.810 --> 06:50.370
complete

06:50.370 --> 06:51.170
OK

06:51.170 --> 06:52.370
所以这边的话就是

06:52.370 --> 06:55.890
他每一个阶段分成这三个指阶段

06:56.050 --> 06:58.690
那这三个指阶段有没有共同的规律呢

06:58.690 --> 06:59.730
是有共同的规律的

07:00.770 --> 07:01.570
所分成的

07:03.410 --> 07:07.650
所分成的这三个指阶段

07:08.610 --> 07:10.130
是有一些共同的事情要做的

07:11.010 --> 07:11.970
是有一些

07:13.410 --> 07:15.330
共同的事情

07:16.450 --> 07:16.930
要做的

07:17.570 --> 07:18.930
好 这边的话要做什么呢

07:18.930 --> 07:19.810
好 我们这边来看一下

07:20.450 --> 07:22.130
把这三个把它过来

07:28.700 --> 07:29.580
好 这边

07:29.660 --> 07:31.100
这边首先我们来看这个

07:31.100 --> 07:32.300
叉叉叉effects

07:32.860 --> 07:34.540
好 这个叉叉叉effects

07:34.540 --> 07:35.500
它是做什么呢

07:35.500 --> 07:38.380
这个的话它是每个指阶段的入口函数

07:39.660 --> 07:40.460
就该函数

07:41.580 --> 07:48.380
该函数是每个这个指阶段的这个入口函数

07:48.940 --> 07:50.540
好 在这个入口函数里面的话

07:50.540 --> 07:52.380
那有一个叫做philis的work

07:54.140 --> 07:55.020
philis的

07:56.940 --> 07:58.940
philis的

07:59.820 --> 08:00.540
work

08:00.540 --> 08:01.580
它会作为什么呢

08:01.580 --> 08:03.980
它会作为这个firstchill的叉数传入

08:05.740 --> 08:11.100
会作为firstchill的叉数

08:11.740 --> 08:12.300
传入定讯

08:14.610 --> 08:16.370
传入定讯

08:18.660 --> 08:20.180
OK 好 相关代码

08:20.900 --> 08:22.500
相关代码如下

08:25.120 --> 08:26.960
好 这边让我把这个代码片断

08:26.960 --> 08:27.520
我把他拿过来

08:31.970 --> 08:32.530
你看这边

08:33.090 --> 08:34.370
这边让他接受两个叉数

08:34.370 --> 08:36.130
一个root一个firstchill的

08:36.690 --> 08:37.250
firstchill的

08:37.330 --> 08:38.050
然后来了之后

08:38.050 --> 08:40.370
然后下这边给这个next effect

08:41.490 --> 08:42.370
然后完成之后

08:42.370 --> 08:43.650
然后接下这边调用什么

08:43.650 --> 08:44.930
就调用这个begin

08:45.730 --> 08:46.210
对不对

08:46.450 --> 08:47.170
调用begin

08:47.170 --> 08:48.610
也就是说这边的话在这个

08:49.170 --> 08:50.370
叉叉叉effect里面

08:50.370 --> 08:51.330
它主要就是什么呢

08:51.330 --> 08:53.090
主要就是把这个firstchill的

08:53.490 --> 08:54.850
给这个全局辨量

08:54.850 --> 08:56.210
next effect

08:56.210 --> 08:57.970
然后执行这个begin

08:59.410 --> 08:59.810
因此

09:02.190 --> 09:03.710
因此在该函数中

09:04.670 --> 09:05.790
主要的工作

09:07.630 --> 09:08.270
就是什么呢

09:08.350 --> 09:10.190
就是将这个first

09:11.790 --> 09:12.590
firstchill的

09:13.550 --> 09:14.510
然后复制

09:15.630 --> 09:16.990
给这个全局辨量

09:18.910 --> 09:19.790
给全局辨量

09:19.790 --> 09:22.350
这个next effect

09:23.230 --> 09:25.230
然后执行什么呢

09:25.230 --> 09:26.350
执行这个begin

09:27.870 --> 09:28.510
commit

09:29.070 --> 09:29.630
叉叉叉

09:30.270 --> 09:30.990
这个begin

09:33.980 --> 09:35.180
叉叉叉的effects

09:36.300 --> 09:37.100
effects

09:37.660 --> 09:38.380
然后begin

09:39.340 --> 09:40.940
主要就是执行这个

09:40.940 --> 09:42.220
每个阶段都是

09:44.780 --> 09:47.100
基本都是在做这样的事情

09:47.100 --> 09:48.220
首先把这个

09:48.220 --> 09:50.220
做一个全局辨量的一个标记

09:50.220 --> 09:51.420
把你这边传入的

09:51.420 --> 09:52.460
firstchill的

09:52.460 --> 09:53.980
给这个next effect

09:54.540 --> 09:55.580
然后接下来这边

09:55.580 --> 09:56.620
调用这个begin

09:57.580 --> 09:59.180
然后接下来我们来看一下这个

09:59.820 --> 10:00.700
这个begin

10:00.700 --> 10:02.220
begin它又会做什么

10:02.860 --> 10:03.420
这边有

10:05.740 --> 10:07.180
接下来来看一下这个

10:07.180 --> 10:07.660
begin

10:08.460 --> 10:09.180
好begin

10:09.180 --> 10:11.020
begin它要做的工作就是什么呢

10:11.020 --> 10:11.820
它要做的工作

10:11.820 --> 10:13.420
其实就是向下便利

10:16.510 --> 10:18.590
向下便利

10:19.150 --> 10:20.270
这个fiber load

10:21.310 --> 10:22.830
它要做的主要是这个事情

10:24.270 --> 10:25.870
好那么它向下便利的话

10:25.870 --> 10:28.190
然后便利到什么时候停止呢

10:28.190 --> 10:29.150
有这么两个条件

10:29.950 --> 10:31.950
就是便利的时候

10:32.990 --> 10:34.190
便利的时候

10:34.830 --> 10:36.750
会便利到

10:37.710 --> 10:40.030
便利直到什么呢

10:41.070 --> 10:43.710
便利直到这个第一个

10:44.750 --> 10:46.350
满足如下条件

10:47.150 --> 10:50.990
如下条件之一的这个fiber load

10:52.910 --> 10:53.950
这边有两个条件

10:53.950 --> 10:54.590
第一个就是什么呢

10:54.590 --> 10:57.470
第一个就是当前的这个fiber load

10:58.830 --> 11:00.510
当前的fiber load的这个

11:00.510 --> 11:02.110
直fiber load

11:03.710 --> 11:04.590
然后不包含

11:05.310 --> 11:07.310
不包含

11:07.310 --> 11:08.350
该这个

11:08.350 --> 11:09.550
就是不包含这个

11:10.190 --> 11:10.750
副作用

11:12.270 --> 11:12.990
不包含

11:13.950 --> 11:14.270
该

11:17.260 --> 11:18.860
应该说是该阶段

11:18.860 --> 11:20.060
就该指阶段

11:20.060 --> 11:21.500
因为它这边三个指阶段嘛

11:21.500 --> 11:22.140
对吧

11:22.140 --> 11:23.900
不包含该指阶段

11:25.020 --> 11:26.700
对应的这个flex

11:29.140 --> 11:29.540
ok

11:29.540 --> 11:30.580
这个很好理解嘛

11:30.580 --> 11:30.900
对吧

11:30.900 --> 11:32.340
你这边不包含这个flex

11:32.340 --> 11:34.500
那我这边就没有必要再向下便利了

11:34.500 --> 11:36.420
因为我们这边主要就是处理什么

11:36.580 --> 11:38.020
主要就是处理副作用的

11:38.740 --> 11:39.220
对不对

11:39.220 --> 11:40.260
主要就是处理副作用

11:41.060 --> 11:43.780
所以这边你如果不包含这个对应的flex

11:43.780 --> 11:45.220
它这边就停止

11:45.700 --> 11:46.340
或者什么呢

11:46.340 --> 11:49.620
或者就是当前的这个fiber load

11:50.580 --> 11:51.620
然后不存在

11:53.140 --> 11:56.180
不存在这个指fiber load

11:57.860 --> 11:58.340
ok

11:58.340 --> 11:59.460
不存在指fiber load

12:00.180 --> 12:02.100
它就是这两个条件

12:02.100 --> 12:02.980
任意一个

12:02.980 --> 12:04.580
它这边的话它就会停止

12:04.580 --> 12:05.700
停止向下便利

12:05.780 --> 12:06.660
停止向下便利

12:06.660 --> 12:08.900
然后接下来它会做什么呢

12:08.900 --> 12:09.300
接下来

12:10.180 --> 12:14.500
接下来会对目标这个fiber load

12:16.530 --> 12:17.330
执行什么呢

12:17.330 --> 12:18.690
执行这个commit

12:19.810 --> 12:21.410
然后叉叉叉

12:21.410 --> 12:21.970
effect

12:23.090 --> 12:23.970
effect

12:23.970 --> 12:24.530
然后这个

12:26.690 --> 12:27.650
这个complete

12:29.010 --> 12:29.890
complete

12:29.890 --> 12:30.290
方法

12:31.890 --> 12:32.610
ok

12:32.610 --> 12:32.850
好

12:32.850 --> 12:35.010
我们来看一下这个begin相关的代码图下

12:35.810 --> 12:36.130
这个

12:37.250 --> 12:38.290
这个begin

12:42.370 --> 12:44.610
begin相关代码

12:46.130 --> 12:46.610
图下

12:49.580 --> 12:49.820
好

12:49.820 --> 12:50.140
这边

12:54.350 --> 12:54.510
啊

12:54.510 --> 12:55.310
你看一下这边

12:55.310 --> 12:57.070
这边呢是一个wild循环

12:57.070 --> 12:57.390
啊

12:57.390 --> 12:58.510
wild循环的话你看这边

12:58.510 --> 12:59.950
这边它是不是就是在向下便利

13:00.750 --> 13:01.150
对了

13:01.150 --> 13:02.670
如果你的这个fiber

13:02.670 --> 13:04.510
它的这个subtree flex

13:04.510 --> 13:04.670
啊

13:04.670 --> 13:05.710
如果不等于flag

13:05.710 --> 13:06.670
这个no flag

13:07.470 --> 13:08.030
并且什么的

13:08.030 --> 13:09.950
并且你这边的话有这个指援数

13:09.950 --> 13:10.110
啊

13:10.110 --> 13:11.710
这边它就继续向下便利

13:13.390 --> 13:13.710
啊

13:13.710 --> 13:15.390
然后如果你这边没有进一副

13:15.790 --> 13:16.030
啊

13:16.030 --> 13:17.790
你这边只要有一个不满足

13:17.790 --> 13:18.110
对吧

13:18.110 --> 13:18.990
只要有一个不满足

13:18.990 --> 13:19.630
不会进一副

13:19.630 --> 13:20.590
那接下来这边就干嘛

13:20.590 --> 13:21.870
是不是执行complete

13:22.590 --> 13:22.910
对了

13:22.910 --> 13:23.710
就是我们这边

13:23.710 --> 13:24.830
上面所描述的

13:24.830 --> 13:24.990
啊

13:24.990 --> 13:26.270
你这边便利的时候

13:26.270 --> 13:26.430
啊

13:26.430 --> 13:28.030
只要就是这两个条件

13:28.030 --> 13:29.470
有一个不满足

13:29.470 --> 13:30.590
那这边它就会干嘛

13:30.590 --> 13:31.070
它这边呢

13:31.070 --> 13:33.470
就会进入到这边这个l4

13:33.470 --> 13:34.030
然后

13:34.030 --> 13:35.790
针对这个目标的这个fiber load

13:36.750 --> 13:38.110
执行这个complete

13:38.910 --> 13:39.470
对不对

13:39.470 --> 13:39.630
啊

13:39.630 --> 13:41.230
这是这个begin方法

13:41.230 --> 13:41.550
好

13:41.550 --> 13:42.270
然后接下来的话

13:42.270 --> 13:43.470
来看一下这个complete

13:43.470 --> 13:46.480
方法

13:46.480 --> 13:46.960
complete

13:47.920 --> 13:49.200
那complete的方法的话

13:49.200 --> 13:49.920
它就是什么呢

13:49.920 --> 13:52.160
它就是针对这个flex

13:52.160 --> 13:54.320
是不是做这个具体的这个操作了

13:54.320 --> 13:54.880
对不对

13:54.880 --> 13:55.520
该方法

13:57.520 --> 13:59.040
该方法

13:59.040 --> 14:02.240
主要就是针对flex

14:03.440 --> 14:05.600
做具体的这个操作了

14:06.560 --> 14:06.800
啊

14:06.800 --> 14:07.120
主要

14:08.320 --> 14:09.360
主要包含

14:10.320 --> 14:11.600
以下三个步骤

14:13.360 --> 14:14.480
哪三个步骤呢

14:14.480 --> 14:14.880
好吧

14:14.880 --> 14:15.280
拿过来

14:19.360 --> 14:19.680
啊

14:19.680 --> 14:21.360
主要包含这三个步骤

14:21.360 --> 14:21.920
首先的话

14:21.920 --> 14:24.240
就是当前这个flag load

14:24.240 --> 14:25.360
对当前的这个

14:25.360 --> 14:27.840
执行这个flag对应的这个操作

14:27.840 --> 14:28.960
对应的方法是什么呢

14:28.960 --> 14:30.560
对应的方法是这个commit

14:30.560 --> 14:31.280
叉叉叉

14:31.280 --> 14:32.560
effects on fiber

14:33.280 --> 14:33.600
ok

14:33.600 --> 14:35.360
也就是在这个方法里面是

14:35.360 --> 14:37.280
针对你对应的这个flex

14:37.920 --> 14:38.960
你不同的flex

14:38.960 --> 14:40.320
做不同的操作

14:40.320 --> 14:40.480
好

14:40.480 --> 14:41.120
然后接下来的话

14:41.120 --> 14:43.200
就是看你当前的这个fiber load

14:43.200 --> 14:45.440
是否存在这个兄弟阶点

14:46.480 --> 14:47.760
它可不可能存在直阶点

14:48.400 --> 14:49.280
不可能嘛

14:49.360 --> 14:49.600
对不对

14:49.600 --> 14:51.280
你刚才上面这边变立的时候

14:51.280 --> 14:52.320
是不是就是往下走的

14:53.040 --> 14:53.520
对不对

14:53.520 --> 14:55.040
所以你这边是不可能在存在

14:55.040 --> 14:56.400
存在直阶点的

14:56.400 --> 14:58.160
你这个当前的阶点已经是什么呢

14:58.160 --> 14:59.120
已经是最下面的了

15:00.160 --> 15:00.400
好

15:00.400 --> 15:00.720
这边呢

15:00.720 --> 15:02.240
就是如果看它有没有兄弟阶点

15:02.800 --> 15:04.000
如果有兄弟阶点

15:04.000 --> 15:05.520
然后接下来这边再执行什么

15:05.520 --> 15:06.880
是不是执行刚才的这个begin

15:07.520 --> 15:07.840
对不对

15:07.840 --> 15:08.640
然后回到这边

15:08.640 --> 15:09.040
begin

15:09.040 --> 15:09.920
让家往下走

15:10.640 --> 15:10.800
好

15:10.800 --> 15:12.640
如果不存在兄弟阶点

15:12.640 --> 15:14.080
然后接下来就是对什么呢

15:14.080 --> 15:15.760
对这个负的这个fiber load

15:16.320 --> 15:16.880
执行什么呢

15:16.880 --> 15:18.080
执行这个commit

15:19.040 --> 15:19.680
看到没有

15:19.680 --> 15:20.640
主要是这样子的

15:20.640 --> 15:21.840
这三个步骤

15:21.840 --> 15:22.080
OK

15:23.040 --> 15:24.880
相关代码如下

15:28.140 --> 15:28.940
把他拉过来

15:35.920 --> 15:36.880
这边大家可以看一下

15:37.520 --> 15:37.760
对吧

15:37.760 --> 15:38.880
你看这边进行

15:38.880 --> 15:39.360
首先这边

15:39.920 --> 15:40.400
commit

15:40.400 --> 15:42.240
差差差effects on fiber

15:42.240 --> 15:44.960
这个的话是处理这个对应的flex

15:45.600 --> 15:46.320
完事之后

15:46.320 --> 15:47.360
人家这边这个sabling

15:47.360 --> 15:48.080
怎么找兄弟

15:48.720 --> 15:49.440
对不对

15:49.440 --> 15:51.760
如果这个兄弟不等于空

15:51.760 --> 15:54.000
那接下来把兄弟的这个阶点给什么

15:54.000 --> 15:55.760
所以给这个lux的effect

15:55.840 --> 15:56.800
对return

15:56.800 --> 15:57.360
否则的话

15:57.360 --> 15:59.200
这边就是fiber.return

15:59.200 --> 16:00.800
给这个lux的effect

16:01.680 --> 16:02.480
对不对

16:02.480 --> 16:03.280
OK

16:03.280 --> 16:04.560
这是关于这个commit

16:05.200 --> 16:07.040
所以我们总总结一下

16:07.040 --> 16:07.760
那这边的话

16:07.760 --> 16:09.920
他这个就是各个阶段

16:09.920 --> 16:10.560
各个阶段

16:10.560 --> 16:12.000
他其实每个指阶段

16:12.000 --> 16:13.280
他都会干嘛呢

16:13.280 --> 16:14.000
总结一下

16:16.400 --> 16:17.200
总结一下

16:17.840 --> 16:19.920
每个指阶段

16:21.040 --> 16:21.600
都会

16:22.720 --> 16:23.520
以什么呢

16:23.520 --> 16:25.120
以这个dfs

16:25.200 --> 16:26.160
dfs是什么

16:26.160 --> 16:27.200
是不是深度优先

16:27.760 --> 16:28.240
对不对

16:28.240 --> 16:29.280
深度优先

16:29.280 --> 16:35.760
都会以这个dfs的这个原则来进行便利

16:38.240 --> 16:38.960
进行便利

16:38.960 --> 16:39.840
进行便利之后

16:39.840 --> 16:40.800
然后接下来的话

16:40.800 --> 16:42.480
然后便利完了之后

16:42.480 --> 16:43.440
然后接下来这边

16:43.440 --> 16:45.520
针对这个不同的flex

16:46.480 --> 16:47.680
应该是在这个方法中

16:49.200 --> 16:50.000
在这个方法中

16:50.880 --> 16:53.840
最终会在这个方法中

16:55.520 --> 16:59.120
针对不同的flex

16:59.920 --> 17:02.160
做出不同的处理

17:04.530 --> 17:05.330
对不对

17:05.330 --> 17:07.410
主要的话就是在做这个工作

17:08.770 --> 17:08.930
好

17:08.930 --> 17:09.890
这是这三个

17:10.690 --> 17:12.130
就是每个指阶段

17:12.130 --> 17:13.890
都会有的这三个公共函数

17:14.930 --> 17:15.250
好

17:15.250 --> 17:16.130
然后接下来的话

17:16.130 --> 17:17.250
我们就一个阶段

17:17.250 --> 17:18.530
一个阶段来看

17:18.530 --> 17:21.090
我们这边三个阶段

17:21.090 --> 17:22.130
分别是before

17:23.650 --> 17:24.770
before rotation

17:27.650 --> 17:28.850
然后接下来是什么

17:28.850 --> 17:30.210
接下来是motation

17:31.570 --> 17:34.290
motation阶段对吧

17:34.290 --> 17:35.170
然后还有一个什么

17:35.170 --> 17:36.530
还有一个是nailt

17:37.730 --> 17:39.170
nailt阶段

17:39.170 --> 17:40.450
我们一个一个来看

17:40.450 --> 17:42.690
首先的话是关于before rotation

17:43.330 --> 17:44.610
before rotation的话

17:44.610 --> 17:45.330
它这边的话

17:45.330 --> 17:46.530
它的工作

17:46.530 --> 17:48.850
主要工作还是就是发生在哪里

17:48.850 --> 17:50.290
是不是在complete

17:51.170 --> 17:51.650
对不对

17:51.650 --> 17:52.210
你这个的话

17:52.210 --> 17:53.810
这个首先第一个函数

17:53.810 --> 17:54.370
第一个函数呢

17:54.370 --> 17:55.810
在这边相当于是一个

17:55.890 --> 17:58.210
就是做一个全局变量的一个标记

17:58.210 --> 17:58.530
对不对

17:58.530 --> 18:00.050
然后接下调用这个begin

18:00.050 --> 18:01.170
然后在begin里面

18:02.450 --> 18:03.410
在begin里面

18:03.410 --> 18:05.810
在begin里面是不是主要就是向下便利

18:05.810 --> 18:06.210
对不对

18:06.210 --> 18:08.210
每一个包括motation这边也是

18:08.210 --> 18:09.410
主要就是往下便利

18:09.410 --> 18:10.370
这边begin也是

18:10.370 --> 18:11.570
主要就是往下便利

18:11.570 --> 18:12.930
主要就是进行工作了

18:12.930 --> 18:13.970
还是在哪里面

18:13.970 --> 18:15.330
是不是在complete里面

18:15.330 --> 18:16.690
这是不刚才说的

18:16.690 --> 18:17.010
对不对

18:17.010 --> 18:18.930
complete里面它主要是调用什么

18:18.930 --> 18:19.890
是不是调用那个

18:23.890 --> 18:24.930
在这里

18:25.010 --> 18:27.650
是不是主要是调用这个onfiber这个方法

18:27.650 --> 18:28.370
对不对

18:28.370 --> 18:30.850
所以这边的话这个beforemotation阶段

18:30.850 --> 18:32.370
它这个主要工作

18:32.370 --> 18:34.050
其实就是发生在这个onfiber

18:36.140 --> 18:42.300
beforemotation阶段的这个主要工作

18:44.060 --> 18:45.260
发生在什么呢

18:45.260 --> 18:47.740
发生在commit

18:49.260 --> 18:50.060
commit

18:50.060 --> 18:50.860
然后before

18:52.060 --> 18:53.340
beforemotation

18:54.060 --> 18:57.420
然后这个effects

18:58.940 --> 19:00.060
effects complete

19:03.550 --> 19:04.030
complete

19:04.830 --> 19:05.630
然后终的

19:07.390 --> 19:08.830
终的这个commit

19:09.550 --> 19:10.030
before

19:10.910 --> 19:11.870
然后motation

19:12.990 --> 19:13.950
然后effects

19:13.950 --> 19:15.230
它的名字真的是很长

19:15.230 --> 19:16.350
然后onfiber

19:17.870 --> 19:18.750
这个方法中

19:19.950 --> 19:20.430
OK

19:20.430 --> 19:22.030
主要是发生在这个方法中

19:22.030 --> 19:22.350
好

19:22.350 --> 19:23.470
然后相关代码如下

19:24.430 --> 19:26.670
好把这边这个代码把他过来

19:26.670 --> 19:27.470
OK

19:27.470 --> 19:30.160
好

19:30.160 --> 19:31.280
这边的话你看一下

19:31.280 --> 19:37.980
这边它其实主要是什么呢

19:37.980 --> 19:40.620
主要是处理了两种类型的主件

19:40.620 --> 19:41.580
一个是什么呢

19:41.580 --> 19:43.740
一个是这个class component

19:43.740 --> 19:46.700
另外一个是host component

19:46.700 --> 19:48.620
那针对这个class component

19:48.620 --> 19:49.500
它主要是什么

19:49.500 --> 19:50.940
它主要是执行这个

19:50.940 --> 19:53.420
getsnapshotbeforeupdate

19:53.420 --> 19:54.940
主要是执行这个方法

19:54.940 --> 19:57.260
而针对这个host root

19:57.420 --> 19:59.020
主要是执行这个方法

19:59.020 --> 20:01.260
而针对这个host root

20:01.260 --> 20:02.060
它主要是什么呢

20:02.060 --> 20:02.860
它主要是清空

20:03.740 --> 20:06.300
主要是就是清空这个之前挂载的内容

20:06.300 --> 20:08.140
方便你这个motation阶段

20:08.140 --> 20:09.420
进行一个这个渲染

20:10.540 --> 20:11.340
这边的话就是

20:12.780 --> 20:13.500
整个过程

20:16.290 --> 20:19.410
上面代码的整个过程中

20:20.290 --> 20:21.250
整个过程中

20:21.970 --> 20:24.130
主要是处理什么呢

20:24.130 --> 20:25.490
处理如下

20:26.210 --> 20:29.250
两种类型的这个fiber load

20:31.010 --> 20:32.130
哪两种类型呢

20:32.130 --> 20:34.530
一种的话是这个class component

20:36.690 --> 20:37.650
component

20:39.170 --> 20:39.970
另外一种是什么呢

20:39.970 --> 20:41.970
另外一种是host root

20:43.330 --> 20:45.490
OK那针对这个class component

20:45.490 --> 20:46.210
它主要是什么呢

20:46.210 --> 20:48.770
主要是执行这个方法

20:50.130 --> 20:50.690
对吧

20:50.690 --> 20:55.250
主要是执行这个getsnapshotbeforeupdate

20:55.250 --> 20:55.650
方法

20:57.410 --> 20:59.810
针对这个host root

20:59.810 --> 21:00.370
主要是什么呢

21:00.370 --> 21:01.090
主要是清空

21:01.890 --> 21:10.940
清空这个host root挂载的内容

21:10.940 --> 21:11.820
方便什么呢

21:12.700 --> 21:17.100
方便这个motation阶段

21:17.100 --> 21:18.220
然后进行渲染

21:19.980 --> 21:20.700
OK

21:20.700 --> 21:22.860
这是关于这个beforemotation

21:22.860 --> 21:23.900
主要做了这些工作

21:24.940 --> 21:25.180
好

21:25.180 --> 21:26.460
然后接下来的重点

21:26.460 --> 21:27.900
其实主要是在什么呢

21:27.900 --> 21:29.660
主要是在这个motation

21:31.180 --> 21:33.260
对于这个host component

21:35.820 --> 21:37.180
host component

21:38.060 --> 21:39.340
那这边这个motation

21:40.380 --> 21:43.100
motation阶段的这个主要工作

21:43.900 --> 21:44.940
主要工作

21:44.940 --> 21:46.140
就是对什么呢

21:46.140 --> 21:49.980
就是对动物元素进行增

21:52.220 --> 21:54.860
进行增三

21:55.980 --> 21:56.700
然后改

21:57.900 --> 21:58.540
OK

21:58.620 --> 22:00.140
主要就是做这个

22:00.140 --> 22:01.580
而来我们一个一个来看

22:01.580 --> 22:02.300
我们这边的话

22:03.500 --> 22:04.060
我们来看一下

22:04.060 --> 22:05.820
就是关于比如说三处动物元素

22:07.740 --> 22:08.140
好

22:08.140 --> 22:11.340
然后这边是这个插入和这个移动

22:13.100 --> 22:13.820
动物元素

22:15.020 --> 22:15.340
好

22:15.340 --> 22:16.060
然后还有什么呢

22:16.060 --> 22:17.260
还有就是这个更新

22:18.460 --> 22:20.060
更新动物元素

22:21.660 --> 22:22.140
OK

22:22.140 --> 22:23.180
我们一个一个来看

22:23.180 --> 22:24.940
首先的话是关于这个三处

22:25.740 --> 22:26.300
三处的话

22:26.300 --> 22:27.020
我们在前面

22:27.740 --> 22:29.020
前面我们介绍这个

22:30.460 --> 22:31.740
我想想这个三处之前

22:33.580 --> 22:35.420
之前我们在讲那个

22:35.420 --> 22:37.180
涂解地幅的时候

22:37.180 --> 22:38.060
大家还记不记得

22:38.060 --> 22:39.020
就我们在讲那个

22:39.020 --> 22:41.260
涂解那个地幅算法的时候

22:41.260 --> 22:42.860
我们之前讲过三处的话

22:42.860 --> 22:45.260
它会把要删除的这个fiber节点

22:45.260 --> 22:45.900
放到哪里面

22:46.540 --> 22:49.180
所以放到一个叫做dlation是输足里面

22:49.820 --> 22:50.220
对不对

22:50.220 --> 22:52.940
然后接下来在commit阶段统一三处

22:52.940 --> 22:53.660
那这边的话

22:53.660 --> 22:55.180
你这个删除动物的话

22:55.180 --> 22:56.380
这边实际上就是什么

22:56.380 --> 22:57.660
实际上就是

22:57.660 --> 23:00.220
把那个dlation是那个输足里面

23:00.220 --> 23:01.180
所有的东西

23:01.180 --> 23:03.100
挨着挨着把它删除掉

23:03.100 --> 23:03.340
OK

23:04.460 --> 23:04.540
好

23:04.540 --> 23:05.660
我们这边来看一下

23:05.660 --> 23:06.620
看一下这个相关代码

23:07.580 --> 23:08.620
相关

23:08.620 --> 23:09.100
三处

23:10.540 --> 23:11.740
动物元素

23:13.340 --> 23:14.060
元素

23:14.700 --> 23:15.180
相关

23:16.700 --> 23:17.660
相关代码

23:20.620 --> 23:21.260
OK

23:21.260 --> 23:22.300
我们这边把它过来

23:27.810 --> 23:28.770
可以看到这个的话

23:28.770 --> 23:30.290
首先它是在这个begin里面

23:31.250 --> 23:31.810
对不对

23:31.810 --> 23:32.690
就是这边的话

23:32.690 --> 23:34.850
它这边是在发生在这里

23:35.810 --> 23:36.850
发生在这里

23:36.850 --> 23:37.410
begin这边

23:37.970 --> 23:38.690
begin这边的话

23:38.690 --> 23:40.050
我们看一下它做了什么事情

23:41.410 --> 23:42.130
begin这边

23:42.130 --> 23:44.370
这边让它首先拿到当前的这个fiber

23:44.370 --> 23:45.570
然后再这边拿到什么

23:45.570 --> 23:47.570
这边拿到当前的这个dlation是

23:48.210 --> 23:49.570
这边拿到这个输足

23:49.570 --> 23:50.450
拿到输足之后

23:50.450 --> 23:52.450
然后再这边便利这个输足

23:52.450 --> 23:53.570
便利这个输足之后

23:53.570 --> 23:54.370
然后再这边的话

23:54.370 --> 23:56.290
是不是就在做这个删除操作

23:56.290 --> 23:57.970
这个commitdlation

23:57.970 --> 23:59.490
它是不是就是在做这个删

24:00.370 --> 24:00.690
对不对

24:01.170 --> 24:01.890
OK

24:01.890 --> 24:02.130
好

24:02.130 --> 24:03.650
那这边我们来记录一下

24:03.650 --> 24:04.290
删除

24:06.830 --> 24:10.750
删除动物元素的这个操作

24:11.470 --> 24:12.910
发生在什么呢

24:12.910 --> 24:14.830
发生在这个begin

24:15.870 --> 24:16.510
multi-sync

24:16.990 --> 24:17.790
begin方法中

24:20.380 --> 24:21.020
方法中

24:21.900 --> 24:23.180
然后首先会拿到什么呢

24:23.820 --> 24:24.380
首先

24:26.580 --> 24:28.580
首先会拿到

24:30.260 --> 24:31.140
这个dlation

24:32.260 --> 24:34.180
dlation是输足

24:34.180 --> 24:35.620
先把这个输足拿到

24:35.700 --> 24:36.740
拿到这个输足之后

24:36.740 --> 24:38.500
然后接下来便利该输足

24:38.500 --> 24:39.220
进行删除

24:40.420 --> 24:43.860
之后便利该输足

24:45.620 --> 24:47.380
进行这个删除操作

24:48.660 --> 24:49.460
对吧

24:49.460 --> 24:55.380
对应这个删除动物元素的这个方法

24:55.380 --> 24:55.940
为什么呢

24:55.940 --> 24:56.420
为这个

24:57.380 --> 24:58.740
commitdlation

25:00.020 --> 25:00.900
主要是这个方法

25:01.620 --> 25:01.940
OK

25:03.220 --> 25:04.660
然后有一点你需要注意

25:04.900 --> 25:07.700
就是它整个commitdlation

25:08.100 --> 25:10.500
说了它具体删除这个动物元素的方法

25:10.500 --> 25:11.700
是这个对不对

25:11.700 --> 25:12.580
它内部的话

25:12.580 --> 25:14.740
它其实它的完整逻辑是比较复杂的

25:15.620 --> 25:16.100
commit

25:17.460 --> 25:18.740
commitdlation

25:19.060 --> 25:19.540
方法

25:20.100 --> 25:23.140
内部的这个完整逻辑

25:23.700 --> 25:24.340
实际上

25:25.860 --> 25:28.660
实际上是比较复杂的

25:30.500 --> 25:31.380
为什么呢

25:31.380 --> 25:32.260
因为就是你

25:32.260 --> 25:34.180
当你删除一个动物元素的时候

25:34.180 --> 25:35.780
不是说说删除就删除了

25:37.060 --> 25:43.940
原因是因为在删除一个这个动物元素的时候

25:44.580 --> 25:48.500
不是说删除就直接删除

25:49.700 --> 25:52.020
还需要考虑什么呢

25:52.020 --> 25:55.940
考虑以下的一些因素

25:56.900 --> 25:57.700
比较什么呢

25:57.700 --> 25:59.700
这边大致有这么极点

26:02.460 --> 26:03.660
有这么极点

26:03.660 --> 26:04.460
OK

26:04.540 --> 26:07.500
就是你指数中所有组件

26:08.140 --> 26:09.980
它的这个amount这个逻辑

26:10.620 --> 26:10.860
对吧

26:10.860 --> 26:12.780
你指数里面的这个组件有没有amount

26:12.780 --> 26:13.420
如果有的话

26:13.420 --> 26:14.620
你这边要考虑

26:14.860 --> 26:15.180
对吧

26:15.180 --> 26:17.900
然后接下来你指数中所有的这个ref属性

26:18.540 --> 26:20.060
你要做一个卸载操作

26:20.540 --> 26:22.700
这个我们之前在讲了一个ref是我们说过的

26:23.180 --> 26:23.820
对不对

26:23.820 --> 26:24.140
好

26:24.140 --> 26:24.780
然后接下来还什么呢

26:24.780 --> 26:27.340
还有就是所有effect相关的互可

26:27.340 --> 26:28.780
它的这个destroy回调

26:29.500 --> 26:30.380
这个你也得执行

26:31.180 --> 26:31.660
对不对

26:31.660 --> 26:32.140
好

26:32.140 --> 26:32.620
比如说

26:32.620 --> 26:33.340
假设

26:35.260 --> 26:37.980
假设有如下的这个代码

26:39.660 --> 26:40.780
比如有这个代码

26:43.740 --> 26:44.540
比如这边

26:44.540 --> 26:45.500
有个div

26:45.500 --> 26:47.020
div人家这边有个什么呢

26:47.020 --> 26:47.820
有一个这个

26:49.180 --> 26:50.060
类组件

26:50.060 --> 26:50.380
好

26:50.380 --> 26:51.740
然后把这个形成g是差

26:52.620 --> 26:52.860
好

26:52.860 --> 26:53.900
有个类组件

26:53.900 --> 26:54.140
好

26:54.140 --> 26:55.900
然后接下来这边又有个div

26:55.900 --> 26:57.820
div人家这边有个ref

26:57.820 --> 26:59.180
人家里面又包了一个什么呢

26:59.180 --> 27:00.620
又包了一个函数组件

27:00.620 --> 27:01.180
好

27:01.180 --> 27:01.900
那当你

27:04.130 --> 27:05.170
当你删除

27:05.730 --> 27:06.450
最外层

27:08.830 --> 27:09.950
最外层

27:11.230 --> 27:12.110
这个

27:12.110 --> 27:13.950
最外层的这个div

27:14.670 --> 27:16.110
这个动物元素是

27:16.750 --> 27:19.630
动物元素是需要

27:19.630 --> 27:20.830
考虑了些东西呢

27:20.830 --> 27:22.030
需要考虑这些

27:22.030 --> 27:24.350
首先第一个就是执行这个

27:24.350 --> 27:25.150
这个是类组件

27:25.630 --> 27:26.270
对吧

27:26.270 --> 27:28.510
执行这个类组件

27:30.110 --> 27:31.790
对应的这个component

27:33.310 --> 27:34.590
component

27:34.590 --> 27:36.350
然后vioamount

27:38.460 --> 27:38.860
方法

27:39.740 --> 27:40.860
执行这个

27:40.860 --> 27:41.820
如果有的话

27:41.820 --> 27:42.620
好

27:42.620 --> 27:43.500
那第二个什么呢

27:43.500 --> 27:44.540
第二个就是执行

27:45.580 --> 27:46.220
执行这个

27:47.180 --> 27:48.140
你这个是一个什么

27:48.140 --> 27:49.260
是不是是一个函数组件

27:50.860 --> 27:51.420
对不对

27:51.420 --> 27:53.340
执行这个函数组件中

27:53.340 --> 27:54.140
如果你有什么呢

27:54.140 --> 27:56.780
你有这个user effect

27:56.780 --> 27:58.860
或者这个user layout

28:00.060 --> 28:01.900
layout effect

28:02.860 --> 28:03.740
那如果有这些

28:03.740 --> 28:04.540
这些方法

28:04.540 --> 28:05.420
那如果你写了什么

28:05.420 --> 28:07.100
写了这个destroy方法

28:07.180 --> 28:08.380
那就需要执行

28:08.860 --> 28:09.500
呃

28:09.500 --> 28:10.460
这些互可中

28:11.420 --> 28:14.140
这些互可中的这个destroy

28:16.370 --> 28:17.250
destroy方法

28:17.890 --> 28:18.130
好

28:18.130 --> 28:18.850
然后最后就是什么呢

28:18.850 --> 28:19.810
最后就是关于这个

28:20.450 --> 28:21.730
div ref

28:22.290 --> 28:23.650
的这个卸载操作

28:26.880 --> 28:27.440
ok

28:27.440 --> 28:30.240
说你整个这个commit deletion方法的话

28:30.240 --> 28:31.440
它实际上它内部的逻辑

28:31.440 --> 28:32.640
是比较复杂的

28:32.640 --> 28:32.960
ok

28:32.960 --> 28:34.560
不是说就是你便利的这个数组

28:34.560 --> 28:34.880
对吧

28:34.880 --> 28:35.600
便利数组之后

28:35.600 --> 28:36.960
挨载着一个三组就可以了

28:36.960 --> 28:38.240
它里面其实有很多这个

28:38.240 --> 28:39.920
对应的工作要做的

28:39.920 --> 28:40.720
啊

28:40.800 --> 28:41.520
但是这边的话

28:41.520 --> 28:42.800
其实你只需要理解什么呢

28:42.800 --> 28:43.440
你只需要理解

28:43.440 --> 28:44.960
就是整个这个三组操作

28:45.760 --> 28:48.160
整个三组操作

28:48.160 --> 28:48.640
是以

28:50.080 --> 28:51.920
是以这个dfs

28:52.320 --> 28:54.640
也设就向下便利的这个顺序

28:56.000 --> 28:56.640
ok

28:56.640 --> 28:57.920
那便利啊

28:57.920 --> 29:01.440
这个指数的这个每个fiber load

29:05.900 --> 29:07.020
fiber load

29:07.020 --> 29:07.260
啊

29:07.260 --> 29:08.380
大家执行什么呢

29:08.380 --> 29:09.660
执行对应的操作

29:10.780 --> 29:11.340
ok

29:11.340 --> 29:12.780
你只需要理解这个就可以了

29:12.780 --> 29:12.940
啊

29:12.940 --> 29:14.140
但这边所说的变

29:14.140 --> 29:16.940
便利指数的每个fiber load是从这个

29:16.940 --> 29:17.980
delay性里面

29:18.540 --> 29:19.500
delay性里面

29:19.500 --> 29:20.940
取出来的这个fiber load

29:20.940 --> 29:21.740
你不要整混了

29:21.740 --> 29:22.300
啊

29:22.300 --> 29:22.860
要不然说

29:22.860 --> 29:25.340
哎不是便利这个delay性数组里面的fiber load

29:25.340 --> 29:27.420
然后对应执行这个三组操作吗

29:27.420 --> 29:28.860
怎么这边又在便利指数

29:28.860 --> 29:29.100
啊

29:29.100 --> 29:32.860
比如说我从这个delay性式数组里面拿出一个fiber load

29:32.860 --> 29:33.980
我要对它进行三组

29:33.980 --> 29:36.380
那它下面的这些指数是不是都要删除啊

29:37.100 --> 29:37.580
对不对

29:37.580 --> 29:38.620
那指数要删除的话

29:38.620 --> 29:39.420
就是也是以什么

29:39.420 --> 29:41.580
也是以这个dfs的这个顺序

29:41.580 --> 29:42.140
是有意思

29:42.780 --> 29:43.180
明白吧

29:45.280 --> 29:45.520
好

29:45.520 --> 29:47.280
那是这个关于三组

29:47.280 --> 29:47.600
好

29:47.600 --> 29:48.320
然后接下来的话

29:48.320 --> 29:49.520
我们来看一下关于这个

29:50.480 --> 29:52.000
插入和这个移动

29:54.930 --> 29:55.170
好

29:55.170 --> 29:56.610
刚才我们在讲三组的时候

29:56.610 --> 29:57.570
我们看到三组的话

29:57.570 --> 29:58.770
它是在哪个

29:58.770 --> 29:59.330
三组的话

29:59.330 --> 30:00.770
它是不是在这个commit

30:00.770 --> 30:02.690
motivation effects begin方法里面

30:03.250 --> 30:03.730
对不对

30:03.730 --> 30:03.890
好

30:03.890 --> 30:05.410
我们这边记录一下啊

30:06.130 --> 30:07.010
上面的三组

30:08.050 --> 30:10.450
上面的三组操作

30:11.010 --> 30:11.810
是在什么呢

30:11.810 --> 30:12.690
是在这个begin

30:13.650 --> 30:14.850
方法里面

30:17.220 --> 30:18.660
里面执行的

30:18.660 --> 30:19.940
你回头再来看一下这个图

30:20.820 --> 30:23.220
你第一次看的话容易晕

30:23.220 --> 30:23.620
这边呢

30:23.620 --> 30:24.900
刚才三组是在这里面的

30:26.420 --> 30:26.740
对吧

30:26.740 --> 30:27.540
是在这里面

30:27.540 --> 30:28.260
这个begin的话

30:28.260 --> 30:30.340
我们说它主要做的事情是什么

30:30.340 --> 30:31.780
主要做的事情是不是向下便利

30:32.420 --> 30:32.740
对不对

30:32.740 --> 30:33.780
我们刚才在讲这个

30:34.820 --> 30:35.620
这个begin

30:35.620 --> 30:37.060
公共的这个代码的时候

30:37.060 --> 30:38.420
它主要是向下便利

30:38.420 --> 30:39.140
而向下便利的话

30:39.140 --> 30:41.060
然后接下来这个三组操作的话

30:41.060 --> 30:42.900
它这边的话是在begin里面做的

30:42.900 --> 30:43.140
好

30:43.140 --> 30:44.020
然后接下来的话

30:44.020 --> 30:44.580
这边

30:44.580 --> 30:44.980
这个

30:45.940 --> 30:47.220
插入和移动

30:47.220 --> 30:48.020
它就是在什么呢

30:48.020 --> 30:49.300
它就是在complete里面

30:51.140 --> 30:51.380
好

30:51.380 --> 30:52.180
回到我们这边

30:53.140 --> 30:53.700
回到这边

30:54.340 --> 30:55.700
而上面的三组操作

30:55.700 --> 30:58.180
是在begin方法里面执行的

30:58.180 --> 31:00.900
而这个插入和这个移动

31:02.660 --> 31:03.460
动物元素

31:04.420 --> 31:05.860
则是在什么呢

31:05.860 --> 31:06.980
在这个commit

31:08.260 --> 31:08.980
commit

31:09.860 --> 31:10.900
multation

31:10.900 --> 31:11.860
然后effects

31:13.300 --> 31:13.940
effects

31:14.020 --> 31:14.820
然后complete

31:16.180 --> 31:17.060
complete

31:17.700 --> 31:18.900
它是在这个方法

31:18.900 --> 31:22.260
这个方法里面的什么呢

31:22.260 --> 31:22.900
commit

31:23.540 --> 31:24.180
multation

31:25.380 --> 31:27.140
multation effects

31:27.700 --> 31:28.500
on fiber

31:29.940 --> 31:31.620
它是在这个on fiber

31:31.940 --> 31:32.900
这个on fiber

31:33.700 --> 31:36.020
方法里面执行的

31:36.820 --> 31:37.860
相关代码如下

31:39.140 --> 31:40.900
相关代码如下

31:43.810 --> 31:44.130
好

31:44.930 --> 31:45.970
把这儿拿过来

31:49.260 --> 31:49.900
ok

31:49.900 --> 31:50.780
你看它这边呢

31:50.780 --> 31:52.540
会有一个switch

31:52.540 --> 31:54.700
switch大家这边有不同的这个case

31:55.340 --> 31:56.620
这边让它首先取到什么呢

31:56.620 --> 31:58.460
取到你的这个flag

31:59.260 --> 31:59.740
对吧

31:59.740 --> 32:00.620
取到你的flag

32:00.620 --> 32:02.700
然后接下根据你这边的这个flag

32:02.700 --> 32:04.220
大家这边做不同的事情

32:04.940 --> 32:05.660
你可以看到这边

32:05.660 --> 32:06.860
无论是placement

32:07.420 --> 32:10.220
还是这个placement and update

32:10.220 --> 32:11.740
它最终执行的是什么

32:11.740 --> 32:14.060
是不是最终执行的是commit placement

32:15.340 --> 32:15.740
对不对

32:15.900 --> 32:16.700
那你看一下这个代码

32:16.700 --> 32:17.580
看下这个代码

32:17.580 --> 32:19.340
你仔细看一下你是看得懂的

32:19.340 --> 32:20.300
这边首先拿什么吗

32:20.300 --> 32:21.340
是不是拿这个flags

32:21.980 --> 32:22.300
对了

32:22.300 --> 32:24.380
flags是我们那个副作用的标记

32:24.380 --> 32:25.580
让它拿到这上面

32:25.580 --> 32:26.300
拿到这上面

32:26.300 --> 32:27.900
让它加这边switch进行判断

32:28.460 --> 32:29.020
对不对

32:29.020 --> 32:29.900
不同的分支

32:29.900 --> 32:31.580
然后接下这边进入到不同的这个

32:33.020 --> 32:34.620
就是进入到不同的这个逻辑

32:34.620 --> 32:35.340
但是你会发现

32:35.340 --> 32:36.540
这个无论是placement

32:36.540 --> 32:38.700
还是placement and update

32:38.700 --> 32:39.660
它执行的都是什么

32:39.660 --> 32:41.340
是不是执行的都是commit placement

32:42.060 --> 32:42.620
对不对

32:42.620 --> 32:43.020
ok

32:43.900 --> 32:44.300
好

32:44.380 --> 32:45.740
我们在这边下面记录一下

32:45.740 --> 32:46.860
可以看出

32:48.860 --> 32:51.340
可以看出这个placement

32:53.420 --> 32:54.380
placement

32:54.380 --> 32:58.860
这个flag对应的这个操作方法

32:59.580 --> 33:00.780
操作方法

33:00.780 --> 33:01.500
为什么呢

33:01.500 --> 33:05.900
为这个commit placement好代码入下

33:08.460 --> 33:10.700
好把这边对应的这个代码拼断

33:10.700 --> 33:11.660
把它拿过来

33:15.310 --> 33:15.630
这里

33:16.270 --> 33:17.550
这里的话你可以看到这边

33:18.270 --> 33:18.750
这边的话

33:18.750 --> 33:19.790
你看它这边是不是实际上

33:19.790 --> 33:20.670
就是在做什么

33:20.670 --> 33:22.910
是不是执行这个插入或者移动操作

33:22.910 --> 33:23.470
对不对

33:23.470 --> 33:26.110
insert or append place node

33:26.110 --> 33:27.230
这边就是在

33:27.230 --> 33:28.590
进行这个具体的这个

33:28.590 --> 33:29.630
多目的这种操作了

33:33.380 --> 33:34.580
然后整个这个

33:35.380 --> 33:37.140
这个commit placement的方法

33:37.140 --> 33:37.860
它这里面的话

33:37.860 --> 33:38.740
实际上它的操作

33:38.740 --> 33:40.180
其实可以分成三个步骤

33:41.220 --> 33:41.620
整个

33:43.860 --> 33:46.260
整个这个commit placement

33:47.380 --> 33:48.340
placement

33:49.220 --> 33:51.300
方法的这个流程

33:52.740 --> 33:54.900
执行流程可以分为什么呢

33:54.900 --> 33:56.100
分为三个步骤

33:56.100 --> 33:57.540
哪三个步骤呢

33:57.540 --> 33:58.660
好这边拿过来

34:00.860 --> 34:01.660
好这边的话

34:01.660 --> 34:05.740
其实可以分成这三个步骤

34:05.740 --> 34:06.540
第一个

34:06.540 --> 34:08.620
从当前的这个fiber load

34:08.620 --> 34:09.740
向上边力

34:09.740 --> 34:12.860
获取第一个类型为这个hoster component

34:12.860 --> 34:15.740
host root或者host portal

34:15.740 --> 34:18.540
三者之一的这个主线fiber load

34:18.540 --> 34:19.340
OK

34:19.340 --> 34:20.460
首先拿到这边

34:20.460 --> 34:22.540
拿到这个主线的这个fiber load

34:22.620 --> 34:23.580
那接下来的话

34:23.580 --> 34:24.540
这边第二步

34:24.540 --> 34:25.900
第二步的话就是执行什么呢

34:25.900 --> 34:27.900
第二步就是获取

34:27.900 --> 34:29.020
获取你这边

34:29.020 --> 34:30.540
你到时候要执行这个

34:30.540 --> 34:32.860
polling to load的点insert before

34:32.860 --> 34:33.500
对吧

34:33.500 --> 34:35.340
大家这边是你要插入的指援数

34:35.340 --> 34:36.620
这边是插入到哪个位置

34:36.620 --> 34:38.540
那接下来拿到这个before

34:38.540 --> 34:40.460
拿到这个before对应的这个

34:40.460 --> 34:41.260
动物元素

34:41.260 --> 34:42.380
就是这一步

34:43.260 --> 34:43.980
OK

34:43.980 --> 34:45.980
这一步拿到这个before

34:45.980 --> 34:47.260
对应了动物元素

34:47.260 --> 34:49.420
好最后最后的话就是针对

34:49.420 --> 34:50.940
对应了动物元素

34:51.100 --> 34:52.540
最后的话就是针对

34:52.540 --> 34:54.140
如果你存在这个before

34:54.140 --> 34:56.620
那就执行这个insert before

34:56.620 --> 34:58.380
如果你不存在before

34:58.380 --> 34:59.260
那这边就是什么呢

34:59.260 --> 35:01.180
这边就是opened child

35:01.180 --> 35:02.780
主要就是这三个步骤

35:02.780 --> 35:04.140
第三个就对应到这里

35:04.140 --> 35:05.580
对应到这里

35:05.580 --> 35:07.180
主要就是这三个步骤

35:07.180 --> 35:07.500
OK

35:10.500 --> 35:11.140
那么对于

35:11.940 --> 35:13.300
对于如果是那种

35:13.300 --> 35:14.900
就是还没有插入到

35:14.900 --> 35:16.820
就是还没有插入的这种动物元素

35:17.620 --> 35:21.140
还没有插入的动物元素

35:21.860 --> 35:23.300
这种对应的是哪种场景呢

35:23.300 --> 35:24.180
对应的就是这个

35:24.740 --> 35:27.780
对应的就是mount场景

35:28.820 --> 35:29.380
OK

35:29.380 --> 35:31.940
那你这边呢这个insert before

35:33.540 --> 35:35.380
insert before

35:35.380 --> 35:36.420
它会将什么呢

35:36.420 --> 35:39.460
会将这个目标这个动物元素

35:41.140 --> 35:42.180
插入到什么呢

35:42.180 --> 35:43.540
插入到这个before

35:44.660 --> 35:45.780
before之前

35:47.940 --> 35:48.340
before

35:48.340 --> 35:50.900
before之前

35:50.900 --> 35:54.770
如果是这个opened child

35:54.770 --> 35:57.090
opened child

35:57.090 --> 35:57.970
它会什么呢

35:57.970 --> 35:58.610
它会将

35:59.890 --> 36:01.410
会将这个目标

36:03.090 --> 36:05.010
目标动物元素

36:05.010 --> 36:06.290
作为什么呢

36:06.290 --> 36:07.570
作为这个副元素

36:12.670 --> 36:13.630
副元素

36:13.630 --> 36:14.830
副动物元素

36:14.830 --> 36:20.590
副动物元素的最后一个指元素

36:20.590 --> 36:21.870
这个插入

36:22.110 --> 36:23.630
这个实际上是动物的知识了

36:24.430 --> 36:24.910
对不对

36:24.910 --> 36:26.750
这个其实和react无关

36:26.750 --> 36:28.270
这个是动物的行为了

36:28.270 --> 36:29.390
你这边insert before

36:29.390 --> 36:31.070
它就会插入到before之前

36:31.070 --> 36:31.870
opened child

36:31.870 --> 36:34.830
就会插入到这个副的这个动物元素之后

36:34.830 --> 36:35.470
对不对

36:35.470 --> 36:35.710
好

36:35.710 --> 36:36.510
那如果对于

36:37.550 --> 36:38.110
对于什么呢

36:38.110 --> 36:39.230
对于这个ui中

36:40.430 --> 36:44.830
ui中已经存在的这个动物元素

36:46.670 --> 36:48.030
它其实做的就是一个什么

36:48.030 --> 36:49.470
做的就是一个移动

36:49.470 --> 36:49.790
对不对

36:49.790 --> 36:51.150
这个对应的什么场景

36:51.230 --> 36:52.590
对应的什么update场景

36:54.510 --> 36:54.990
对不对

36:54.990 --> 36:56.030
对应是update

36:56.030 --> 36:57.390
那么你这个insert before

36:59.230 --> 37:01.950
insert before

37:05.890 --> 37:07.010
它会干什么

37:07.010 --> 37:10.930
会将目标这个动物元素

37:13.170 --> 37:14.370
然后移动到

37:15.170 --> 37:18.930
移动到这个before之前

37:19.810 --> 37:20.210
对不对

37:21.810 --> 37:23.250
如果是opened child

37:23.730 --> 37:24.850
那么它就会干嘛

37:24.850 --> 37:27.730
它就会将这个目标动物

37:28.850 --> 37:31.170
目标动物这个元素

37:31.170 --> 37:32.770
移动到什么呢

37:32.770 --> 37:34.210
移动到同级

37:35.810 --> 37:36.770
同级

37:36.770 --> 37:37.970
最后对吧

37:37.970 --> 37:40.050
它做的就是一个移动的这个操作

37:40.050 --> 37:41.890
你注意这个这个不是react的知识

37:41.890 --> 37:43.170
你不要整运动

37:43.170 --> 37:44.530
这个是dorm的知识

37:44.530 --> 37:45.970
dorm的话

37:45.970 --> 37:47.810
你比如说通过这个opened child

37:47.810 --> 37:48.770
如果没有的话

37:48.770 --> 37:49.810
它就是新增

37:49.810 --> 37:51.330
如果没有的话

37:51.570 --> 37:52.370
如果没有的话

37:52.370 --> 37:53.410
它就是新增

37:53.410 --> 37:53.730
对不对

37:53.730 --> 37:54.770
直接插入进去

37:54.770 --> 37:55.570
如果已有的话

37:55.570 --> 37:57.570
它这边是一个移动操作

37:57.570 --> 37:58.130
也不新的话

37:58.130 --> 38:00.130
你可以自己那个把那个

38:00.130 --> 38:01.170
就是写一个dorm节点

38:01.170 --> 38:02.450
自己通过这个opened child

38:02.450 --> 38:03.810
或者这个insert before

38:03.810 --> 38:05.490
自己试一试

38:05.490 --> 38:05.730
OK

38:07.090 --> 38:08.370
说这也是

38:08.370 --> 38:08.850
因此

38:09.970 --> 38:13.970
这也是为什么在这个react中

38:14.770 --> 38:17.170
插入和这个移动

38:17.810 --> 38:20.370
所对应的这个flag

38:21.010 --> 38:21.890
都是什么呢

38:21.890 --> 38:23.170
都是这个placement

38:24.290 --> 38:27.970
placement flag的这个原因

38:30.260 --> 38:31.060
喵喵

38:31.060 --> 38:32.900
这个的话可能面试的时候会被问到

38:34.420 --> 38:37.300
可能面试的时候会被问到

38:38.420 --> 38:39.700
这他就问你

38:39.700 --> 38:41.140
为什么在react中

38:41.940 --> 38:42.900
为什么在react中

38:42.900 --> 38:45.060
它的这个插入和移动

38:45.060 --> 38:46.500
所对应的这个flag

38:46.500 --> 38:48.660
对应的都是placement flag

38:48.660 --> 38:50.500
为什么是同一个flag

38:50.500 --> 38:51.540
实际上就是这个原因

38:52.260 --> 38:52.900
对不对

38:52.900 --> 38:53.540
就这个原因

38:54.260 --> 38:56.180
这是关于这个插入和移动

38:56.740 --> 38:57.060
好

38:57.060 --> 38:58.980
然后接下来的话是这个更新

38:59.940 --> 39:00.900
接下来是更新

39:00.900 --> 39:02.020
我们来看一下这个更新

39:05.060 --> 39:06.820
更新dorm元素的话

39:06.820 --> 39:07.940
其实所谓更新

39:07.940 --> 39:09.300
其实主要就是更新什么呢

39:09.300 --> 39:10.500
主要就是更新它的属性

39:11.060 --> 39:12.020
对不对

39:12.020 --> 39:14.100
更新dorm元素

39:15.060 --> 39:16.820
一个最主要

39:17.700 --> 39:19.220
最主要的这个工作

39:20.260 --> 39:21.700
就是更新什么呢

39:22.660 --> 39:25.300
更新这个对应的属性

39:26.180 --> 39:26.580
对

39:26.580 --> 39:27.780
但是它那种也算是更新

39:27.780 --> 39:29.060
比如说我同样都是div

39:29.060 --> 39:31.300
之前div里面这个文字是1

39:31.300 --> 39:33.060
然后现在的话新的12

39:33.060 --> 39:33.860
它这种的话也是

39:34.420 --> 39:36.260
因为它这个key那些都没变嘛

39:36.260 --> 39:36.580
对吧

39:36.580 --> 39:37.860
key和type都没变

39:37.860 --> 39:40.020
说这边呢也是需要做这个更新操作

39:40.020 --> 39:42.340
回头它也是在这个更新dorm这边

39:42.820 --> 39:44.180
然后这个做操作

39:44.180 --> 39:44.420
OK

39:44.980 --> 39:45.300
好

39:45.300 --> 39:46.420
然后接下来这边的话

39:46.420 --> 39:47.300
它执行的

39:48.500 --> 39:50.180
执行的这个方法

39:51.860 --> 39:52.820
执行的方法

39:52.820 --> 39:55.700
为commit work

39:56.820 --> 39:57.860
然后相关

39:57.860 --> 39:58.500
代码

39:58.500 --> 39:58.900
乳下

40:01.890 --> 40:02.130
好

40:02.130 --> 40:02.770
把它过来

40:07.760 --> 40:08.160
OK

40:08.160 --> 40:09.200
执行的是这个

40:09.200 --> 40:10.320
commit work

40:10.320 --> 40:10.480
好

40:10.480 --> 40:11.520
这边的仍然是什么呢

40:11.520 --> 40:13.760
仍然是根据你这个不同的这个target

40:13.760 --> 40:13.920
啊

40:13.920 --> 40:15.840
这边做这个不同的这个处理

40:15.840 --> 40:16.160
OK

40:16.160 --> 40:17.120
然后我这边只看到

40:17.120 --> 40:18.160
这边key是这个

40:19.200 --> 40:20.160
host component

40:20.880 --> 40:22.560
就如果是这种原生组件

40:22.560 --> 40:23.200
原生组件

40:23.200 --> 40:24.080
然后叫你看这边

40:24.720 --> 40:25.600
看这边

40:25.600 --> 40:27.200
这边的话是不是就是有一步

40:27.280 --> 40:29.360
这边去处理这个变化的这个属性

40:30.080 --> 40:30.800
对不对

40:30.800 --> 40:31.440
啊

40:31.440 --> 40:33.120
那么之前实际上有讲过

40:33.120 --> 40:36.080
变化的属性它会以这个key和value

40:36.640 --> 40:37.680
以这种形式

40:37.680 --> 40:38.720
保存在什么呢

40:38.720 --> 40:42.080
保存在这个fiberload的这个updateq里面

40:42.080 --> 40:42.880
对不对

40:42.880 --> 40:44.080
回顾一下啊

40:44.080 --> 40:44.880
之前有讲过

40:46.880 --> 40:51.600
之前有讲过变化的属性啊

40:52.720 --> 40:53.680
会以什么呢

40:53.680 --> 40:56.160
会以这个key

40:56.960 --> 40:57.840
然后value

40:59.200 --> 41:01.120
的这种就是相铃的形式

41:02.240 --> 41:03.600
相铃的形式

41:04.560 --> 41:06.080
保存在什么呢

41:06.080 --> 41:11.200
保存在fiberload.updateq

41:13.120 --> 41:14.160
是保存在这里面

41:15.040 --> 41:15.680
对吧

41:15.680 --> 41:17.520
好那接下来当你这个

41:17.520 --> 41:18.960
如果你这个fiberload

41:18.960 --> 41:20.400
updateq存在

41:20.400 --> 41:21.360
那么最终的话

41:21.360 --> 41:22.640
这个updateq

41:22.640 --> 41:23.840
它就会在哪里面呢

41:23.840 --> 41:25.600
就会在一个叫做update

41:25.680 --> 41:27.360
domopoperty的方法里面

41:27.360 --> 41:28.080
进行处理

41:29.120 --> 41:33.680
最终在fiberload.q

41:37.860 --> 41:38.660
这边是update

41:39.700 --> 41:43.380
最终在这个fiberload.updateq里面

41:45.870 --> 41:48.270
里面所保存的

41:49.070 --> 41:51.150
这个要变化的属性

41:51.870 --> 41:54.510
要变化的属性

41:54.510 --> 41:56.110
就会在什么呢

41:56.110 --> 41:59.310
就会在一个名为

41:59.310 --> 42:00.270
这个update

42:01.230 --> 42:02.270
update

42:02.270 --> 42:04.590
然后domopoperty

42:07.730 --> 42:08.450
poperty

42:08.450 --> 42:11.170
这个方法中进行

42:11.170 --> 42:11.890
就是被变利

42:12.610 --> 42:14.370
被变利

42:15.010 --> 42:16.450
然后进行处理

42:18.900 --> 42:19.380
OK

42:19.380 --> 42:21.140
就会在这个方法里面进行处理

42:21.140 --> 42:21.700
还记得吧

42:21.700 --> 42:22.660
我们之前讲过的

42:22.660 --> 42:24.820
就你这边变化的这个新的属性

42:24.820 --> 42:26.820
它是不是会以这个keyvalue的形式

42:26.820 --> 42:27.780
它这个属主

42:27.780 --> 42:28.180
对不对

42:28.180 --> 42:30.100
那保存到这个updateq里面

42:31.140 --> 42:32.180
好这边处理的话

42:32.260 --> 42:33.460
主要是处理

42:33.460 --> 42:34.980
就是4种类型的数据

42:36.900 --> 42:38.100
这里的处理

42:39.460 --> 42:42.420
主要是处理

42:42.420 --> 42:44.580
如下的4种数据

42:47.010 --> 42:47.890
那4种呢

42:47.890 --> 42:48.370
这4种

42:52.000 --> 42:52.480
这4种

42:53.040 --> 42:55.040
一个是关于这个style的变化

42:55.760 --> 42:57.600
另外一个的话是这个inner html

42:58.160 --> 43:00.000
就是刚才我讲的那种情况

43:00.000 --> 43:00.320
对吧

43:00.320 --> 43:01.680
你div里面是个1

43:01.680 --> 43:03.120
变成了div里面是个2

43:03.760 --> 43:05.360
然后还有就是文本节点的变化

43:05.760 --> 43:07.360
然后还有就是其他的这个属性

43:07.920 --> 43:08.560
OK

43:08.560 --> 43:09.680
我们来看一下相关的代码

43:10.480 --> 43:12.320
相关代码如下

43:16.500 --> 43:17.060
好

43:17.060 --> 43:17.380
这边

43:18.020 --> 43:18.740
把它过来

43:22.590 --> 43:23.230
这里

43:23.230 --> 43:24.110
你看一下

43:24.110 --> 43:24.670
它这边呢

43:24.670 --> 43:27.470
就是进就进行了很多efls的判断

43:28.030 --> 43:28.750
可不可以啊

43:28.750 --> 43:30.430
进行了很多efls的判断

43:30.430 --> 43:30.990
这边呢

43:30.990 --> 43:31.790
处理style

43:31.790 --> 43:33.390
处理inner html

43:33.390 --> 43:34.430
处理文本节点

43:34.430 --> 43:36.030
处理这个其他元素

43:36.030 --> 43:36.590
OK

43:36.590 --> 43:38.190
那我们这边这个更新操作

43:38.190 --> 43:38.910
也就完成了

43:39.870 --> 43:40.110
好

43:40.110 --> 43:41.470
那整个这个motation

43:42.110 --> 43:43.310
完成之后

43:43.310 --> 43:44.030
那我们的这个

43:44.590 --> 43:45.070
之后的话

43:45.070 --> 43:47.470
它在进入到这个layout阶段之前

43:47.470 --> 43:48.510
它还会做什么事情

43:49.070 --> 43:49.630
来看一下

43:50.830 --> 43:52.190
再等一下

43:52.190 --> 43:52.670
在这边

43:54.030 --> 43:54.910
motation阶段

43:55.550 --> 43:56.350
motation阶段呢

43:56.350 --> 43:56.830
我们现在呢

43:56.830 --> 43:58.750
是不是已经把这个锻木的这种操作

43:58.750 --> 44:00.110
这不已经执行完了

44:00.110 --> 44:00.510
对不对

44:00.510 --> 44:02.110
删除插入移动更新

44:02.110 --> 44:02.750
执行完了

44:02.750 --> 44:03.470
执行完了之后

44:03.470 --> 44:05.790
然后再进入到这个layout之前

44:05.790 --> 44:07.390
它这边会做一步什么

44:07.470 --> 44:08.990
是fiber tray的这个切换

44:09.710 --> 44:10.430
注意哦

44:10.430 --> 44:12.430
这边会进行fiber tray的这个切换

44:14.990 --> 44:15.230
当

44:17.310 --> 44:18.590
当这个motation

44:19.550 --> 44:23.390
motation阶段的主要工作

44:24.430 --> 44:25.310
然后完成后

44:26.510 --> 44:28.030
再进入什么呢

44:28.030 --> 44:32.190
再进入layout阶段之前

44:33.150 --> 44:35.950
会执行如下的代码

44:37.710 --> 44:41.070
来完成什么呢

44:41.070 --> 44:42.750
来完成这个fiber tray

44:43.710 --> 44:45.630
fiber tray的这个切换

44:49.390 --> 44:49.950
它这边呢

44:49.950 --> 44:50.670
会执行这个

44:54.480 --> 44:55.200
会执行这个

44:56.000 --> 44:57.440
这边root.current

44:57.440 --> 44:59.200
等于一个finish work

44:59.200 --> 44:59.920
finish the work

45:00.480 --> 45:02.400
这边来进行一个fiber tray的这个切换

45:02.880 --> 45:03.200
ok

45:03.920 --> 45:05.120
好切换完了之后

45:05.120 --> 45:05.760
然后接下来的话

45:05.760 --> 45:07.200
这边进入到这个layout

45:07.920 --> 45:08.880
layout阶段

45:08.880 --> 45:09.760
layout阶段的话

45:09.760 --> 45:10.720
这边就是什么呢

45:10.800 --> 45:13.040
这边的顾名思义就是进行一个布局了

45:13.040 --> 45:13.520
对吧

45:15.120 --> 45:16.640
不过它这边这个layout的话

45:16.640 --> 45:18.320
其实倒不是布局

45:18.720 --> 45:19.440
你layout的话

45:19.440 --> 45:20.560
你翻译成那个

45:20.800 --> 45:22.480
就你直接去翻译这个单子的话

45:22.480 --> 45:23.360
它是布局

45:23.360 --> 45:23.680
对

45:23.680 --> 45:24.800
这个是布局的意思

45:24.800 --> 45:25.840
但其实它在这个阶段

45:25.840 --> 45:27.280
其实并不是做布局

45:27.280 --> 45:29.280
它这边在这个motation这个阶段

45:29.280 --> 45:31.040
它是不是已经完成了这个dorm的操作

45:31.600 --> 45:32.000
对吧

45:32.000 --> 45:33.120
而在layout阶段呢

45:33.120 --> 45:34.400
它主要是执行什么呢

45:34.400 --> 45:35.840
主要是执行一些就是

45:36.880 --> 45:38.000
比如说你的勾字函数

45:38.960 --> 45:40.640
比如说针对这个class comp

45:41.360 --> 45:43.280
它会去执行这个component

45:43.280 --> 45:44.080
dead mount

45:44.080 --> 45:45.600
或者dead update

45:45.600 --> 45:47.440
对于这个function component

45:47.440 --> 45:48.720
它会去执行这个

45:48.720 --> 45:51.440
比如说use layout effect

45:51.440 --> 45:53.200
执行它的这个辉调函数

45:56.320 --> 45:57.200
在layout中

45:58.720 --> 46:00.640
在layout

46:02.480 --> 46:03.920
在layout阶段

46:03.920 --> 46:04.320
主要

46:05.440 --> 46:07.040
主要的工作

46:08.480 --> 46:09.600
集中在什么呢

46:09.680 --> 46:11.360
集中在这个commit

46:12.160 --> 46:13.120
然后layout

46:14.240 --> 46:16.080
然后layout mount

46:17.440 --> 46:18.160
我看一下啊

46:19.840 --> 46:22.480
哦是commit layout effect

46:24.080 --> 46:25.680
Effect on fiber

46:26.720 --> 46:28.240
主要是集中在这个方法中

46:29.760 --> 46:30.320
ok

46:30.320 --> 46:31.280
那在该方法

46:32.160 --> 46:34.320
在该方法内部

46:34.880 --> 46:35.600
会针对

46:36.960 --> 46:37.840
会针对

46:38.320 --> 46:41.360
不同类型的这个fiber load

46:42.640 --> 46:43.760
然后执行什么呢

46:43.760 --> 46:45.040
执行不同的操作

46:46.080 --> 46:48.720
执行不同的操作

46:49.280 --> 46:51.600
比如说对于这个class

46:52.720 --> 46:54.000
class component

46:56.320 --> 46:58.080
对于这种类组件

46:58.640 --> 47:00.560
那它这边让它会干嘛呢

47:00.560 --> 47:04.560
该阶段会执行这个component

47:06.080 --> 47:06.960
component

47:07.680 --> 47:08.560
dead mount

47:10.160 --> 47:10.720
或者什么呢

47:10.720 --> 47:12.240
或者dead update

47:13.680 --> 47:15.120
会执行这个方法

47:15.120 --> 47:15.920
那么对于

47:17.440 --> 47:19.200
对应这个function

47:19.200 --> 47:20.000
应该是对于

47:23.020 --> 47:23.500
对于

47:28.110 --> 47:29.310
对于这个function

47:30.830 --> 47:31.870
function component

47:36.980 --> 47:37.620
对于这个

47:38.180 --> 47:38.900
那该阶段

47:39.940 --> 47:42.020
该阶段会执行什么呢

47:42.020 --> 47:42.980
会执行这个

47:42.980 --> 47:44.340
use layout

47:45.540 --> 47:46.500
use layout

47:47.140 --> 47:47.940
effect

47:48.420 --> 47:49.620
的这个回调函数

47:52.480 --> 47:53.440
会执行这个

47:53.840 --> 47:54.480
ok

47:54.480 --> 47:56.480
所以你注意它的这个layout阶段

47:56.480 --> 47:57.440
layout阶段呢

47:57.440 --> 47:58.560
其实主要是执行什么呢

47:58.560 --> 48:00.000
主要是执行一些这个

48:00.960 --> 48:02.640
对应的一些这个回调函数

48:02.640 --> 48:03.680
比如类组件的话

48:03.680 --> 48:05.440
那这边的话就是执行component

48:05.440 --> 48:06.320
dead mount

48:06.320 --> 48:07.360
然后dead update

48:08.240 --> 48:09.120
如果是那个

48:09.920 --> 48:10.560
函数组件

48:11.200 --> 48:13.840
这边呢执行的是use layout effect

48:13.840 --> 48:14.800
主要是执行这个

48:15.680 --> 48:17.280
你这边关于这个dorm的操作的话

48:17.280 --> 48:18.800
实际上在这个motation阶段

48:19.120 --> 48:20.320
是不是已经就结束了

48:20.320 --> 48:20.720
对吧

48:20.720 --> 48:21.440
我们这边记一笔

48:22.640 --> 48:23.120
有关

48:25.550 --> 48:29.470
有关dorm元素的操作

48:30.110 --> 48:31.070
在这个motation

48:32.270 --> 48:35.230
motation阶段已经结束了

48:36.190 --> 48:36.830
ok

48:36.830 --> 48:38.670
那么在这个layout阶段的话

48:38.670 --> 48:40.110
主要就是做这些事情

48:41.630 --> 48:43.230
这是关于这个layout阶段

48:43.870 --> 48:46.350
然后其他的话就没什么了

48:46.350 --> 48:48.030
整个这个还是有点多

48:48.830 --> 48:49.630
对不对

48:49.630 --> 48:52.270
你这边的话就是整个这个commit工作流程

48:52.270 --> 48:54.270
你这边要把它一个一个说清楚

48:54.270 --> 48:55.470
其实还是蛮多的

48:56.590 --> 48:56.910
好

48:56.910 --> 48:57.470
那最后的话

48:57.470 --> 48:59.150
我们这边我们来看一下关于这道题

49:00.910 --> 49:03.070
commit阶段的工作流程是怎样的

49:03.790 --> 49:05.470
可以分成哪些模块

49:05.470 --> 49:07.150
每个模块在做什么

49:07.150 --> 49:10.830
那你这边的话就可以把那个整个commit这个阶段

49:10.830 --> 49:12.670
它分成了几个指阶段

49:12.670 --> 49:14.910
before motation motation和layout

49:15.390 --> 49:15.710
对吧

49:15.710 --> 49:18.030
那这样每个指阶段它就在做什么

49:18.030 --> 49:18.670
每个的话

49:18.670 --> 49:20.270
你可以把它描述出来

49:20.910 --> 49:21.230
对不对

49:21.950 --> 49:23.790
我这边呢给个这个参考答案

49:26.420 --> 49:26.580
好

49:26.580 --> 49:27.380
把它放到这里

49:30.420 --> 49:34.500
整个这个commit可以分成三个指阶段

49:34.500 --> 49:37.220
before motation motation和layout

49:37.220 --> 49:38.340
那每个指阶段的话

49:38.340 --> 49:39.460
其实都可以分成什么呢

49:39.460 --> 49:40.260
可以分成这个

49:40.820 --> 49:41.940
tata差effects

49:41.940 --> 49:43.860
tata差effects begin

49:43.860 --> 49:45.940
大家这边tata差effects complete

49:46.900 --> 49:47.700
那begin的话

49:47.700 --> 49:50.180
主要是在做便利节点的操作

49:50.180 --> 49:52.340
当然有它根据你不同的这个指阶段

49:52.340 --> 49:53.540
可能会有些不一样

49:53.540 --> 49:55.140
比如在这个motation里面

49:55.140 --> 49:55.940
motation里面的话

49:55.940 --> 49:56.740
它这个begin的话

49:56.740 --> 49:57.460
它还要做什么

49:57.460 --> 49:58.900
这边还要做这个删除的操作

49:59.460 --> 49:59.780
对不对

50:00.500 --> 50:01.620
然后加这个commit

50:01.620 --> 50:03.220
主要是处理这个副作用

50:04.420 --> 50:04.660
好

50:04.660 --> 50:06.740
然后加这边before motation阶段

50:06.740 --> 50:07.540
它主要是什么呢

50:07.540 --> 50:10.820
主要是处理如下两种类型的这个fiber load

50:10.820 --> 50:13.140
class component host root

50:13.940 --> 50:14.180
好

50:14.180 --> 50:16.340
然后接下来如果是这个motation阶段

50:17.220 --> 50:19.940
motation阶段对于这个host component来讲

50:20.260 --> 50:21.140
它主要是做什么呢

50:21.140 --> 50:23.300
它主要是做动物元素的这个真

50:23.300 --> 50:24.820
三改对不对

50:24.820 --> 50:26.340
那完事之后会进行什么呢

50:26.340 --> 50:28.500
会进行这个fiber trade的这个切换

50:29.620 --> 50:29.860
好

50:29.860 --> 50:31.940
然后接下来这个layout阶段

50:31.940 --> 50:32.820
layout阶段的话

50:32.820 --> 50:35.220
它这边的话会针对每个fiber load

50:35.220 --> 50:38.100
执行这个commit layout effect on fiber

50:38.900 --> 50:39.300
对不对

50:39.300 --> 50:40.420
就我们刚才所讲的

50:40.420 --> 50:41.060
执行这个

50:41.700 --> 50:42.660
执行这个的话

50:42.660 --> 50:45.380
那根据你fiber load的这个类型不同

50:45.380 --> 50:46.820
执行不同的操作

50:46.820 --> 50:48.500
比如如果是类组件

50:48.500 --> 50:51.940
它这边呢就是执行component data amount update

50:51.940 --> 50:53.540
如果是function组件

50:53.540 --> 50:57.140
它这边就执行use layout effect的这个回调函数

50:58.020 --> 50:58.900
ok

50:58.900 --> 51:01.140
这就是关于整个这个commit

51:02.180 --> 51:03.700
commit的一个工作流程

51:04.660 --> 51:06.500
这边大家下来可以再看一看

51:07.220 --> 51:08.020
好吧

51:08.020 --> 51:09.700
好这期课的话就到这里

51:09.700 --> 51:11.700
再见

