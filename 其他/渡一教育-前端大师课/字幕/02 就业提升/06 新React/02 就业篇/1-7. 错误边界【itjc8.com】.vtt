WEBVTT

00:00.000 --> 00:04.860
ok 这节课的话 咱们来看一下这个错误边界

00:04.860 --> 00:08.200
这个英语叫做这个Aero Boundaries

00:08.200 --> 00:10.240
我们来看一下它的这个描述

00:10.240 --> 00:13.820
它说部分UI的这个javascript错误

00:13.820 --> 00:18.680
不应该导致什么呢 导致整个应用崩溃

00:18.680 --> 00:21.500
对吧 以后我们写个例子 大家可以看到

00:21.500 --> 00:23.540
就哪怕我有一个主线出问题

00:23.540 --> 00:27.140
整个页面它是确认不出来的

00:27.140 --> 00:29.440
整个应用它崩溃

00:29.440 --> 00:32.500
为了解决这个问题的话这个react16

00:32.500 --> 00:36.360
16版本 它就引入了一个什么 引入了一个新的概念

00:36.360 --> 00:37.880
叫做错误边界

00:37.880 --> 00:40.700
就这个Aero Boundaries

00:40.700 --> 00:43.000
而这个错误边界首先它是什么呢

00:43.000 --> 00:44.800
它是一个组件

00:44.800 --> 00:47.620
ok 它是个组件 先把这个认识清楚

00:47.620 --> 00:50.680
所以你可以把它称之为错误边界组件

00:50.680 --> 00:52.220
这个组件是干嘛的呢

00:52.220 --> 00:56.580
这个组件可以补货发生在这个纸

00:56.780 --> 00:57.980
纸组件数

00:57.980 --> 01:00.880
任何位置的这个javascript错误

01:00.880 --> 01:03.180
那加这边的话可以打印这些错误

01:03.180 --> 01:06.520
同时什么呢 同时展示这个降级UI

01:06.520 --> 01:08.680
哎 就是我这边发生错误了 是吧

01:08.680 --> 01:11.880
发生错误的话 我给你显示另外一端这个UI

01:11.880 --> 01:13.180
而不会干嘛呢

01:13.180 --> 01:18.040
而并不会渲染那些发生崩溃的这个纸组件数

01:18.040 --> 01:20.760
ok 这个就是这个错误边界

01:20.760 --> 01:22.640
组件它的这个作用

01:22.640 --> 01:24.680
好 那我们这边让我们来看个实例

01:24.680 --> 01:26.480
来看个实例

01:27.380 --> 01:31.380
嗯 这边的话我首先的话我新建这么几个纸组件

01:31.380 --> 01:32.280
这边

01:32.280 --> 01:36.780
chow的chow的看我1.js差

01:36.780 --> 01:38.780
好 然后加这边再来一个

01:38.780 --> 01:43.380
chow的看我2.js差

01:43.380 --> 01:44.580
啊 大家这边chow的

01:46.280 --> 01:49.580
come 3.js差

01:49.580 --> 01:50.380
ok

01:50.380 --> 01:53.180
好 然后接下来我这边首先先来写一下

01:53.180 --> 01:53.980
好 把这个拿下去

01:54.980 --> 01:57.280
好 先写这个APP

01:57.280 --> 01:59.880
APP这边这边的话我会引入

01:59.880 --> 02:05.980
引入这个1和2 importchow的看我1

02:05.980 --> 02:07.480
from

02:07.480 --> 02:10.780
然后components下面的chow的看我1

02:10.780 --> 02:12.980
那这是第一个组织件

02:12.980 --> 02:14.380
啊 这个是第二个组织件

02:15.880 --> 02:16.480
ok

02:16.480 --> 02:18.480
好 在这边这边的话呢也很简单

02:18.480 --> 02:21.860
就是使用这两个组件

02:21.860 --> 02:22.860
啊 这边打一个话嘛

02:22.860 --> 02:24.060
这个是APP组件

02:25.860 --> 02:27.860
APP组织件

02:27.860 --> 02:29.460
好 APP组织件下面

02:29.460 --> 02:32.500
这边来使用

02:32.500 --> 02:34.000
这个chow的看我1

02:34.000 --> 02:35.900
chow的看我2

02:35.900 --> 02:36.500
对吧

02:36.500 --> 02:37.900
这pops把它删掉

02:39.400 --> 02:40.100
ok

02:40.100 --> 02:41.500
好 然后接下来的话这边

02:41.500 --> 02:47.140
这边的话是chow的看我1

02:47.140 --> 02:48.440
chow的看我1

02:48.440 --> 02:49.840
Rsf

02:49.840 --> 02:50.840
这边首先导出

02:50.840 --> 02:51.140
对吧

02:51.140 --> 02:53.040
导出 这边也没有什么属性

02:53.040 --> 02:54.340
这pops不需要

02:54.340 --> 02:55.640
好 然后接下来这边

02:55.640 --> 02:56.840
这边的话就写一个

02:56.840 --> 02:58.540
这边就写一个

02:58.540 --> 03:00.840
这是一个chow的看我1

03:00.840 --> 03:02.540
然后再这边给一个什么呢

03:02.540 --> 03:05.580
给一个这个style

03:05.580 --> 03:06.280
style

03:06.280 --> 03:07.780
简单设置一下样式

03:07.780 --> 03:08.980
这边给了一个宽

03:08.980 --> 03:11.480
宽的话给的是一个

03:11.480 --> 03:13.780
比如说300px

03:13.780 --> 03:14.780
然后再这边高

03:16.180 --> 03:17.280
300px

03:17.280 --> 03:19.280
好 然后给一个这个border

03:19.280 --> 03:21.180
border EPX

03:21.180 --> 03:22.180
收利的

03:22.180 --> 03:23.780
就直接写在这里了

03:23.780 --> 03:25.580
这是我们的chow的看我1

03:25.580 --> 03:26.780
然后chow的看我2的话

03:26.780 --> 03:28.380
基本上两个是差不多的

03:28.380 --> 03:30.380
我们把这个直接拿过来

03:30.380 --> 03:31.080
拿过来之后

03:31.080 --> 03:32.280
然后把这个名字改一下

03:33.480 --> 03:34.380
名字改一下

03:34.380 --> 03:35.880
包括这边改一下

03:35.880 --> 03:37.580
好 来我们这边保存

03:37.580 --> 03:38.280
保存之后

03:38.280 --> 03:39.580
然后下这边我们来看一下

03:39.580 --> 03:41.080
看一下我们的效果

03:41.080 --> 03:44.480
把这个放到右边去吧

03:44.480 --> 03:45.180
OK

03:45.180 --> 03:47.080
现在的效果就是这样子的

03:47.080 --> 03:47.780
整个这个

03:47.780 --> 03:50.080
这个是我的这个APP组件

03:50.080 --> 03:50.780
看到没有

03:50.780 --> 03:52.580
整个这个是我的APP组件

03:52.580 --> 03:53.180
APP组件

03:53.180 --> 03:55.180
我们也加一个那个吧

03:55.180 --> 03:56.180
也加一个

03:56.180 --> 03:59.320
这边这个style

03:59.320 --> 04:01.220
好 这边我们加个

04:01.220 --> 04:03.020
我们加一个这个padding

04:03.020 --> 04:03.820
可以吧

04:03.820 --> 04:04.420
padding

04:04.420 --> 04:06.520
然后给个实相书

04:06.520 --> 04:08.020
好 人家这边也是加个什么呢

04:08.020 --> 04:09.620
也是加个border

04:09.620 --> 04:11.520
EPX收利的

04:11.520 --> 04:12.420
OK

04:12.420 --> 04:13.520
好

04:13.520 --> 04:14.920
好

04:14.920 --> 04:15.620
OK

04:15.620 --> 04:17.320
好 这是我们的这个APP组件

04:17.320 --> 04:19.420
APP组件里面有这个

04:19.420 --> 04:20.620
chow的看我1

04:20.620 --> 04:21.720
chow的看我2

04:21.720 --> 04:22.020
对吧

04:22.020 --> 04:23.420
这个没有任何问题

04:23.420 --> 04:23.620
好

04:23.620 --> 04:24.620
然后接下来的话

04:24.620 --> 04:26.920
我们这边在chow的看我1里面

04:26.920 --> 04:27.920
chow的看我1里面

04:27.920 --> 04:28.920
我们又引入了什么呢

04:28.920 --> 04:31.720
我们又引入了chow的看我3

04:31.720 --> 04:34.120
import

04:34.120 --> 04:36.720
chow的看我3

04:36.720 --> 04:37.520
from

04:37.520 --> 04:39.720
这是当前目录下面

04:39.720 --> 04:40.320
对吧

04:40.320 --> 04:40.520
好

04:40.520 --> 04:44.930
人家在这边使用这个组件

04:44.930 --> 04:47.230
使用这个组件

04:47.230 --> 04:47.930
OK

04:47.930 --> 04:48.130
好

04:48.130 --> 04:49.330
然后接下来的话在这个

04:49.330 --> 04:52.330
chow的看我3这边

04:52.330 --> 04:52.530
好

04:52.530 --> 04:53.930
你这边上你先写一下

04:53.930 --> 04:56.430
这边chow的看我3

04:56.430 --> 04:56.930
OK

04:56.930 --> 04:57.130
好

04:57.130 --> 04:57.930
这边保存

04:57.930 --> 04:59.330
保存之后人家这边

04:59.330 --> 05:00.330
这边是不是有了

05:00.330 --> 05:00.530
对吧

05:00.530 --> 05:02.330
这个是我的这个chow的看我3

05:02.330 --> 05:04.130
这个是在chow的看我1里面

05:04.130 --> 05:06.030
使用的一个组件

05:06.030 --> 05:07.730
好在chow的看我3这边

05:07.730 --> 05:08.430
这边的话

05:08.430 --> 05:09.730
然后我就干嘛呢

05:09.730 --> 05:11.230
我这边的话就是

05:11.230 --> 05:13.030
随便写一个这个错误

05:13.030 --> 05:14.730
随便写个错误

05:14.730 --> 05:17.330
比如说我这边

05:17.330 --> 05:20.730
这里我比如说我想渲染一个ur

05:20.730 --> 05:21.530
然后这里

05:21.530 --> 05:23.330
我这边是想渲染一个什么的

05:23.330 --> 05:24.230
渲染一个ur

05:24.230 --> 05:25.430
而ur正常情况下

05:25.430 --> 05:26.430
你这边有力对吧

05:26.430 --> 05:27.430
一

05:27.430 --> 05:28.230
二

05:28.230 --> 05:28.930
三

05:28.930 --> 05:30.530
现在的话是没有问题的

05:30.530 --> 05:30.830
对吧

05:30.830 --> 05:32.330
这边你这个chow的看我3

05:32.330 --> 05:33.530
是可以渲染出来的

05:33.530 --> 05:34.330
我现在的话

05:34.330 --> 05:35.230
我这个历史干嘛呢

05:35.230 --> 05:37.630
我是通过你这个计算过来的

05:37.630 --> 05:38.330
比如说我这边

05:38.330 --> 05:39.230
通过什么呢

05:39.230 --> 05:44.560
通过一个这个getdata的这个函数

05:44.560 --> 05:46.260
getdata的一个函数

05:46.260 --> 05:47.760
这个是很常见的

05:47.760 --> 05:48.260
对不对

05:48.260 --> 05:50.460
我调用一个这个API接口

05:50.460 --> 05:52.160
大家获取一个这个数据

05:52.160 --> 05:53.060
获取数据之后

05:53.060 --> 05:54.460
大家这边看这个

05:54.460 --> 05:55.560
他拿到的是一个什么呢

05:55.560 --> 05:57.760
拿到的是一个数组

05:57.760 --> 05:59.860
假设他这边拿的是个数组

05:59.860 --> 06:02.060
我这边先把这个函数先写了

06:02.060 --> 06:06.750
方形getdata

06:06.750 --> 06:07.450
ok

06:07.450 --> 06:07.650
好

06:07.650 --> 06:08.250
比如他这边

06:08.250 --> 06:09.450
这边他返回的是什么呢

06:09.450 --> 06:11.050
返回的是

06:11.050 --> 06:13.850
比如说苹果

06:13.850 --> 06:17.820
然后香蕉

06:17.820 --> 06:19.020
香蕉

06:19.020 --> 06:19.420
啊

06:19.420 --> 06:22.420
然后这个离子

06:22.420 --> 06:24.120
离子

06:24.120 --> 06:24.520
ok

06:24.520 --> 06:25.520
返回这个数组

06:25.520 --> 06:25.620
好

06:25.620 --> 06:25.920
这边呢

06:25.920 --> 06:26.520
这个呀

06:26.520 --> 06:27.520
什么拿到这个数组

06:27.520 --> 06:27.620
好

06:27.620 --> 06:28.620
拿到这个数组之后

06:28.620 --> 06:30.320
然后接下来我这边的话

06:30.320 --> 06:33.920
我看似的一个历史

06:33.920 --> 06:35.820
等于一个AR2点什么

06:35.820 --> 06:37.020
说map

06:37.020 --> 06:37.720
对不对

06:37.720 --> 06:37.920
好

06:37.920 --> 06:40.020
这边的话拿到每一项

06:40.020 --> 06:42.320
以及他的这个index

06:42.320 --> 06:42.520
好

06:42.520 --> 06:43.920
大家这边返回什么呢

06:43.920 --> 06:47.390
返回这个粒

06:47.390 --> 06:47.890
对不对

06:47.890 --> 06:48.590
返回粒

06:48.590 --> 06:50.190
粒的话他有个key

06:50.190 --> 06:53.190
key的话对应的是这个index

06:53.190 --> 06:53.390
好

06:53.390 --> 06:54.190
这边这边呢

06:54.190 --> 06:56.790
对应的是这个it

06:56.790 --> 06:57.190
对吧

06:57.190 --> 06:57.390
好

06:57.390 --> 06:58.290
回头的话在这里

06:58.290 --> 06:58.690
这里的话

06:58.690 --> 07:00.390
我们这边就是这个粒

07:01.690 --> 07:02.190
对不对

07:02.190 --> 07:02.290
好

07:02.290 --> 07:03.590
你这边格式化一下

07:03.590 --> 07:04.190
格式化之后

07:04.190 --> 07:05.690
大家这边来看一下

07:05.690 --> 07:06.690
是没问题

07:06.690 --> 07:07.190
对不对

07:07.190 --> 07:07.390
好

07:07.390 --> 07:08.590
假设我这边的话

07:08.590 --> 07:09.790
我这个函数

07:09.790 --> 07:11.490
他比如说他这边出错了

07:11.490 --> 07:11.890
他压根

07:11.890 --> 07:13.590
他就没有返回这个

07:13.590 --> 07:15.190
就没有返回一个数组

07:15.190 --> 07:16.190
他返回的是个什么呢

07:16.190 --> 07:17.190
返回的是一个比如说

07:17.190 --> 07:18.090
支付串

07:18.090 --> 07:19.690
随便写个支付串

07:19.690 --> 07:22.190
或者这个压根就是一个undify

07:22.190 --> 07:23.390
压根是个undify

07:23.390 --> 07:24.890
你这边直接写个绿刹

07:24.890 --> 07:26.090
他是不是就是个undify

07:26.090 --> 07:26.290
对不对

07:26.290 --> 07:27.990
甚至你这边不用写绿刹

07:27.990 --> 07:28.890
不用写绿刹

07:28.890 --> 07:30.490
你直接这边就是个空函数

07:30.490 --> 07:32.590
他默认是不是就得到是undify

07:32.590 --> 07:33.090
对吧

07:33.090 --> 07:33.290
好

07:33.290 --> 07:34.690
那你看现在的话

07:34.690 --> 07:36.390
整个页面就崩溃了

07:37.990 --> 07:38.690
看到没有

07:38.690 --> 07:40.490
整个页面就崩溃了

07:40.490 --> 07:40.690
好

07:40.690 --> 07:42.090
这边他还会告诉你

07:42.090 --> 07:43.090
cannot read

07:43.090 --> 07:43.990
这个property

07:43.990 --> 07:45.590
or這個undify

07:45.590 --> 07:46.290
就是在哪里呢

07:46.290 --> 07:48.090
就是在这个readymap的时候

07:48.090 --> 07:49.890
你这边他这个读取这个map

07:50.690 --> 07:52.590
你这个你这玩意拿到的是什么

07:52.590 --> 07:53.790
什么拿到的是undify

07:53.790 --> 07:54.290
undify的话

07:54.290 --> 07:55.990
能不能去调这个map

07:55.990 --> 07:56.890
这不能

07:56.890 --> 07:57.190
对不对

07:57.190 --> 07:58.690
这边的话就发生了错误

07:58.690 --> 08:00.390
发生错误的话会导致你什么

08:00.390 --> 08:02.590
导致你这个整颗这个主线数

08:03.290 --> 08:04.790
你都渲染不出来

08:04.790 --> 08:06.390
整个应用崩溃

08:06.390 --> 08:09.190
这个其实就是官网这边说写的

08:09.190 --> 08:10.490
部分ui

08:11.490 --> 08:13.290
他这个javascript的错误

08:13.290 --> 08:16.290
不应该导致整个应用的这个崩溃

08:17.090 --> 08:17.790
对不对

08:17.790 --> 08:19.190
说说我们这边需要什么呢

08:19.190 --> 08:22.390
我们需要这个错误边界的这个主线

08:23.090 --> 08:23.490
ok

08:24.090 --> 08:24.590
好来

08:24.590 --> 08:25.890
这边我们回头看一下啊

08:26.890 --> 08:28.690
这是我们刚写的那个例子

08:28.690 --> 08:30.590
基本和这个差不多啊

08:30.590 --> 08:32.890
这个的话是我们的那个逐渐数

08:32.890 --> 08:34.090
我们的逐渐数是不是这样子的

08:34.990 --> 08:36.690
这边是你的app跟逐渐

08:37.390 --> 08:39.090
然后跳的com1跳的com2

08:39.090 --> 08:40.090
然后加这边的话

08:40.090 --> 08:41.290
他是不是发生错误了

08:41.590 --> 08:41.990
对不对

08:41.990 --> 08:42.990
他发生错误之后

08:42.990 --> 08:45.390
大家整个这个逐渐数都崩溃了

08:45.990 --> 08:46.790
都崩溃了

08:46.890 --> 08:48.490
这种的话是没有必要的

08:48.690 --> 08:49.190
对不对

08:49.290 --> 08:51.590
例如比如说有问题的逐渐是什么呢

08:51.590 --> 08:52.790
是比如说是广告

08:52.790 --> 08:55.090
比如这个组件本身他是显示广告的

08:55.290 --> 08:55.990
或者是什么呢

08:55.990 --> 08:58.290
或者是一些无关请要的这个组件

08:58.590 --> 09:00.690
那么这个时候我们就期望什么呢

09:00.690 --> 09:02.090
我们就期望啊

09:02.090 --> 09:06.290
就是渲染出这个问题组件以外的

09:06.890 --> 09:07.590
组件数

09:08.890 --> 09:09.290
对不对

09:09.290 --> 09:10.990
把这句话给他加粗啊

09:12.890 --> 09:13.290
ok

09:13.690 --> 09:14.790
就这个是没有必要的

09:14.790 --> 09:16.290
我们希望渲染出什么呢

09:16.290 --> 09:18.190
问题组件之外的这个组件数

09:18.490 --> 09:19.290
那怎么办呢

09:19.690 --> 09:21.490
req16就给我们提供了什么呢

09:21.490 --> 09:24.090
提供了这个错误边界组件

09:24.490 --> 09:26.690
啊这个错误边界组件就可以解决这个问题

09:27.190 --> 09:27.390
好

09:27.390 --> 09:28.790
我们刚说过这个错误边界

09:28.790 --> 09:29.590
他是一个什么

09:29.590 --> 09:30.690
他是个组件

09:30.990 --> 09:31.990
他是个组件

09:32.090 --> 09:34.290
好让我们这边可以来创建这么一个组件

09:35.890 --> 09:36.790
来到这边

09:37.690 --> 09:39.690
我们就在components下面啊

09:39.690 --> 09:41.390
components下面新建一个

09:41.690 --> 09:42.390
这边叫做什么呢

09:42.390 --> 09:45.590
叫做arrow啊这个boundary.js

09:46.790 --> 09:48.590
ok好让一下他这边

09:48.590 --> 09:50.990
你看他这边观望这边举了这个例子

09:51.090 --> 09:51.690
他是一个什么呢

09:51.690 --> 09:52.890
他是个这个类组件

09:53.190 --> 09:54.190
那类组件里面

09:54.190 --> 09:56.090
然后接下来这边会有两个

09:56.390 --> 09:57.090
两个方法

09:57.090 --> 09:58.290
一个是静态方法

09:58.590 --> 10:01.990
一个叫做get derived state from这个arrow

10:02.490 --> 10:03.490
啊另外一个是什么呢

10:03.490 --> 10:06.090
另外一个是component did catch

10:06.490 --> 10:08.990
啊这两个的话都可以补货到那个错误

10:09.590 --> 10:11.590
看到没有这边他写的有啊写的有

10:11.990 --> 10:16.190
就你如果一个class组件中定义了这两个方法

10:16.390 --> 10:18.490
那他就是一个错误边界组件

10:18.490 --> 10:19.790
你说这个名字不重要

10:20.190 --> 10:21.390
名字你随便取

10:21.990 --> 10:24.090
对吧我们这边呢就是跟着官网来的啊

10:24.090 --> 10:25.990
这边叫做这个arrow boundary

10:26.190 --> 10:28.690
你取个其他什么名字都ok啊

10:28.690 --> 10:30.390
不是说必须要叫这个名字啊

10:30.490 --> 10:33.290
但是你一个类组件中如果定义了这两个

10:33.490 --> 10:36.790
一个是静态方法get derived state from arrow

10:37.090 --> 10:39.390
一个是这个component did catch

10:39.690 --> 10:41.190
啊那他就变成了一个什么呢

10:41.290 --> 10:43.390
他就变成了一个错误边界组件

10:43.890 --> 10:45.690
ok那接下来如果

10:46.090 --> 10:47.190
遇到这个错误

10:47.990 --> 10:48.990
他这边的话就会干嘛呢

10:48.990 --> 10:51.090
他这边就会触发这两个这个

10:51.690 --> 10:53.890
方法啊触发这两个方法

10:53.890 --> 10:55.690
ok来我们这边我们来看一下

10:56.790 --> 10:57.490
来看一下

10:57.890 --> 10:59.890
他这边的话是首先坑

10:59.990 --> 11:01.490
我们这边我带着大家写一下吧

11:01.890 --> 11:02.690
把这写一下

11:04.290 --> 11:06.190
好这里这里的话我们rcc

11:07.390 --> 11:08.890
啊这边类组件对吧

11:09.190 --> 11:11.190
类组件然后接下来这边

11:11.190 --> 11:13.990
这边的话我们首先有一个这个static

11:15.390 --> 11:18.290
啊我们这边首先先写个那个先写个constructor

11:19.790 --> 11:20.890
constructor

11:22.690 --> 11:23.290
pops

11:23.690 --> 11:25.090
啊这边呢这个super

11:25.690 --> 11:27.090
把pops传过去

11:27.390 --> 11:29.190
好然后接下来这边让我写一个

11:29.290 --> 11:31.090
this.state

11:31.590 --> 11:33.690
等于一个什么呢等于一个这个has arrow

11:34.790 --> 11:37.690
has arrowmore的是什么呢more的是force

11:38.790 --> 11:39.690
这个什么意思

11:39.890 --> 11:42.390
就这边需要你定义一个状态

11:43.790 --> 11:46.390
这边需要你定义

11:47.190 --> 11:48.590
啊就维护吗

11:48.990 --> 11:51.590
维护一个状态

11:52.090 --> 11:53.790
该状态干嘛呢

11:53.990 --> 11:56.990
该状态用来记录

11:57.890 --> 12:00.190
用来标记应该叫做啊用来标记

12:00.490 --> 12:01.590
是否有错误

12:02.590 --> 12:05.190
是否有错误

12:05.590 --> 12:07.490
ok默认的话我们这边肯定是force

12:07.890 --> 12:09.490
对不对没有啊

12:09.690 --> 12:12.290
好没有的话那接下来这边在这里

12:13.090 --> 12:14.590
这里的话这边是不是return

12:14.990 --> 12:16.190
对不对return的话

12:16.190 --> 12:17.490
然后接下来我在这边

12:17.790 --> 12:19.490
这个扔点里面扔点里面

12:19.490 --> 12:21.190
然后我在这边我可以做个判断

12:21.990 --> 12:24.090
做个判断eif什么呢

12:25.090 --> 12:29.790
if this点state点has arrow

12:30.090 --> 12:32.390
就也就是你这个has arrow变成q的时候

12:32.390 --> 12:34.590
说明什么说明有错误

12:36.290 --> 12:38.790
说明有错误

12:39.090 --> 12:40.490
那有错误我就干嘛呢

12:40.490 --> 12:46.090
我就渲染这个自定义的这个降级ui

12:47.090 --> 12:49.590
对吧这是他官网这边所说的啊

12:49.590 --> 12:52.090
在这两个位置在这个位置

12:52.290 --> 12:53.990
对了这边展示什么

12:53.990 --> 12:55.390
展示降级ui

12:55.590 --> 12:57.990
降级ui这边就是你自己来写

12:58.190 --> 12:59.590
你这边想写什么就写什么

12:59.990 --> 13:01.790
比如说我这边让我就简单写一下

13:01.790 --> 13:02.690
比如出错了

13:03.790 --> 13:04.490
出错了

13:05.390 --> 13:07.390
对吧那你可以可以做的更好看一些

13:07.390 --> 13:08.690
在实际项目中对吧

13:08.690 --> 13:09.690
做的更好看一些

13:09.990 --> 13:10.990
我这边就渲染什么了

13:10.990 --> 13:11.990
渲染这个出错了

13:12.290 --> 13:13.890
没有进入上面的eif

13:14.690 --> 13:16.590
没有进入啊这边要纸一圈啊

13:18.190 --> 13:18.790
纸一圈

13:20.590 --> 13:21.390
加个扩号啊

13:21.490 --> 13:22.390
就要加个扩号

13:22.990 --> 13:23.790
ok好

13:23.790 --> 13:25.290
然后没有进入上面的eif

13:26.590 --> 13:29.990
没有进入上面的eif

13:31.090 --> 13:32.690
说明什么说明没有错吧

13:32.890 --> 13:34.990
说明没有错

13:35.290 --> 13:36.590
啊那直接干嘛呢

13:36.990 --> 13:40.690
那直接渲染这个直组件数

13:42.790 --> 13:43.890
直组件数

13:46.410 --> 13:46.910
ok

13:47.110 --> 13:48.510
啊那这边就是return什么

13:49.510 --> 13:54.110
return zs.props.children

13:54.710 --> 13:58.410
啊为什么这边是返回这个zs.props.children呢

13:58.610 --> 13:59.910
啊因为我们一会用的时候

13:59.910 --> 14:01.010
我们是这样子来用的

14:01.610 --> 14:04.210
我们这边不是这个这个直组件啊

14:04.210 --> 14:05.410
这个child.com3

14:05.610 --> 14:06.510
是不是他有问题啊

14:06.610 --> 14:07.610
对他有问题的话

14:07.610 --> 14:09.610
然后像我们这边预测他有问题

14:09.610 --> 14:10.710
那我们这边呢就是啊

14:11.310 --> 14:12.110
引入这个

14:13.410 --> 14:15.110
引入这个arrow boundary

14:15.410 --> 14:16.310
啊引入了之后

14:16.310 --> 14:17.510
然后接下来我们会用什么呢

14:17.510 --> 14:19.410
我们会用这个错误边界组件

14:19.610 --> 14:21.010
我们这边去包裹它

14:22.510 --> 14:23.010
知道吧

14:23.510 --> 14:24.210
去包裹它

14:24.510 --> 14:27.310
那你这个针对这个arrow boundary这个组件来讲

14:27.410 --> 14:29.710
他的这个props children是不是就是他呀

14:30.610 --> 14:32.210
对呀props children就是他吗

14:32.510 --> 14:34.610
ok这个就类似于这个插槽吗

14:35.010 --> 14:36.210
对吧就是他

14:36.710 --> 14:37.210
ok

14:38.510 --> 14:40.310
好那这里这里的话我们就干嘛呢

14:40.310 --> 14:42.210
这边我们就是这个返回

14:42.410 --> 14:44.410
返回你的zs.props.children

14:44.610 --> 14:46.110
啊就是你的那个直组件

14:46.710 --> 14:49.410
ok啊这边啊这边写了之后

14:49.410 --> 14:51.310
然后接下来我们这边还需要什么

14:51.410 --> 14:53.310
啊你这边最重要的两个东西还没写

14:53.510 --> 14:56.210
那两个啊这边你看这边官网刚才说过

14:57.210 --> 14:58.110
他要有什么呀

14:58.210 --> 15:02.210
说你要定义这两个对不对这个或者这个啊

15:02.210 --> 15:04.910
两个啊两个你选一个对吧

15:04.910 --> 15:06.810
要么是这个要么是这个

15:06.810 --> 15:09.210
但一般的话就是两个都会定义啊

15:09.210 --> 15:11.310
两个都会定义啊你定义了之后

15:11.310 --> 15:12.310
他才会变成什么

15:12.610 --> 15:15.310
他才会变成一个错误边界啊

15:15.610 --> 15:17.210
好说说我们这边我们来写一下

15:17.210 --> 15:18.510
这边呢是static

15:19.410 --> 15:22.510
static这个叫做get derived

15:24.010 --> 15:24.910
derived

15:26.980 --> 15:29.780
啊get derived state from props

15:30.480 --> 15:33.280
啊from这个error不是from props

15:33.280 --> 15:34.380
是from error

15:35.980 --> 15:38.280
ok好这边呢会自动传入什么呢

15:38.280 --> 15:40.280
会传入你的这个错误对象

15:41.080 --> 15:43.280
ok你的错误信息你这边可以打印象

15:43.980 --> 15:45.180
console.log

15:46.080 --> 15:49.080
error ok好来我们这边我们保存一下

15:49.580 --> 15:51.480
保存了之后人家这边我们来看一下

15:53.810 --> 15:56.610
那这边呢 error应该打印出来了

15:57.310 --> 15:59.010
看没有这边已经打印出来了

15:59.710 --> 16:02.310
啊打印出来之后啊打印之后

16:02.310 --> 16:03.510
人家这边你要干嘛

16:03.510 --> 16:04.810
你这边是不是要把这个

16:04.910 --> 16:06.910
这个是不是改成这个 true

16:07.310 --> 16:09.210
对吧啊所以这边呢你就是

16:09.210 --> 16:10.710
这边是直接return啊

16:10.710 --> 16:14.510
注意这边不需要调这个 z 点这个set state

16:14.910 --> 16:16.910
不需要啊这边呢你是干嘛呢

16:17.110 --> 16:19.710
直接去返回一个状态

16:19.710 --> 16:21.210
那这个状态的话他就会去干嘛呢

16:21.210 --> 16:22.310
他就会去覆盖

16:22.910 --> 16:24.010
啊覆盖这个state

16:24.010 --> 16:25.210
那这边呢我们只需要干嘛呢

16:25.210 --> 16:27.910
只需要把它设置为 true

16:29.850 --> 16:31.150
看没有 ok

16:31.350 --> 16:32.550
把它这边设置成 true

16:32.550 --> 16:35.350
他这边的话会拿这个对象去覆盖他

16:36.050 --> 16:37.250
去覆盖他 ok

16:37.250 --> 16:38.350
那我们这边来看一下

16:38.750 --> 16:41.150
你看这边的话是不是你这边

16:41.550 --> 16:43.650
你的这个整个应用是不是没有崩溃

16:43.750 --> 16:45.950
只是这里这里显示什么

16:46.050 --> 16:47.950
这里显示是不是这边出错了

16:48.450 --> 16:50.750
对不对哎你看这个就是错误边界

16:50.750 --> 16:53.550
他的一个用法啊他的一个用法

16:53.850 --> 16:55.150
好我们这边我们来看一下啊

16:56.650 --> 16:58.950
呃在在这边

16:59.450 --> 17:01.250
这边看到没有他这边的话要求你干嘛呢

17:01.250 --> 17:03.950
要求你返回返回一个对象

17:04.250 --> 17:05.950
我看看这个官网有没有记录啊

17:07.650 --> 17:08.950
官网有没有记录

17:10.450 --> 17:11.650
好像是

17:12.750 --> 17:15.050
关于事件补货看一下

17:15.350 --> 17:16.850
好像是没有没有说

17:17.150 --> 17:18.850
但他这边例子这边是有的

17:19.350 --> 17:20.550
啊例子这边是有的

17:20.550 --> 17:22.950
他让你干嘛让你返回一个对象

17:23.550 --> 17:25.850
看没有好然后下这边还有一个

17:26.250 --> 17:28.950
还有一个是这个component did catch

17:29.250 --> 17:31.250
他这边的话是接收两个一个是arrow

17:31.250 --> 17:32.850
一个是arrow info啊

17:32.950 --> 17:34.350
来我们这边把它拿过来一下

17:37.220 --> 17:39.920
把他拿过来拿过来之后让我们没有这个

17:40.120 --> 17:42.020
对吧我们没有这个我们这边就干嘛呢

17:42.020 --> 17:44.120
我们就这边就单纯的做个打印

17:45.920 --> 17:47.520
啊我们这边clg

17:47.920 --> 17:49.820
这边呢是arrow

17:51.700 --> 17:53.400
啊这边呢是arrow

17:53.900 --> 17:55.600
ok他也是错误信息

17:55.700 --> 17:57.500
大家这边这个是arrow info

17:59.000 --> 17:59.900
arrow info

18:00.800 --> 18:03.200
ok好大家这边的话保存一下

18:03.700 --> 18:05.600
保存了之后然后加这边来看一下

18:06.700 --> 18:09.000
刷新啊啊刷新之后这个

18:09.100 --> 18:10.900
这边的话是哪里打印出来的

18:11.000 --> 18:13.300
这个的话是啊啊这边

18:13.400 --> 18:15.000
对啊我们这边这边记录一下吗

18:16.800 --> 18:18.700
这边是我们这边用冒号

18:22.620 --> 18:23.920
啊这边arrow

18:24.920 --> 18:27.820
ok啊我们这样子来看一下啊保存

18:27.920 --> 18:29.620
保存之后人家这边刷新一下

18:30.420 --> 18:32.220
啊这边这边呢是刚才那个

18:32.420 --> 18:35.420
对啊那个那个静态方法这边打印出来的

18:35.520 --> 18:37.320
这边其实就是什么就是错误信息

18:37.620 --> 18:39.820
对你看和这上面是不是一样的

18:40.220 --> 18:42.220
对只不过我们这边是console.log

18:42.320 --> 18:43.620
你这边你把这改一下

18:43.720 --> 18:45.820
对你这边不是console.log而是console

18:46.120 --> 18:47.020
这个arrow

18:47.920 --> 18:50.020
console.log我记得他有个arrow方法

18:51.120 --> 18:53.420
这就一样的对这边就是一个红色的

18:53.520 --> 18:55.520
啊平时你看到了这些错误信息啊

18:55.620 --> 18:57.120
看到错误信息他这边都是什么呢

18:57.120 --> 19:00.620
都是通过console.arrow方法来打印的啊

19:00.720 --> 19:02.720
ok我们这边还是区分一下

19:02.720 --> 19:04.420
我们这边用loglog方法

19:04.920 --> 19:07.920
ok啊这个呢就是啊错误

19:08.020 --> 19:09.720
啊下面下面这个是一样的

19:10.220 --> 19:11.720
可不可以啊就下面下面下面这个

19:11.720 --> 19:14.020
第一个参数这个arrow和这个这个arrow

19:14.020 --> 19:15.020
实际上是一样的

19:15.320 --> 19:16.720
ok啊第二个

19:18.020 --> 19:19.920
嗯第二个这个arrow info

19:20.120 --> 19:21.520
arrow info他这边就是什么呢

19:21.520 --> 19:23.820
他这边呢其实就是一个这个占信息

19:23.820 --> 19:25.820
你看这边component stack

19:26.220 --> 19:28.620
是不是组件占信息啊对不对啊

19:28.620 --> 19:29.820
你这边可以把它点开

19:30.620 --> 19:31.820
现在这个可以点开的

19:33.420 --> 19:36.020
你可以把它点开啊这里

19:36.420 --> 19:38.820
看没有这里其实就是占信息啊错误

19:38.820 --> 19:40.420
他对应了这个占信息

19:40.720 --> 19:42.720
这个arrow info啊像这个这个的话

19:42.720 --> 19:45.820
就特别适合于上传到就是你那个错误的

19:46.120 --> 19:47.520
错误的那个日字

19:47.920 --> 19:50.520
对吧你一般的话你报错的话会有个错误日字吗

19:50.720 --> 19:53.220
把这个错误日字上传到这个服务器

19:53.220 --> 19:55.020
啊一般就是上传这段信息

19:57.280 --> 20:00.380
好这就是关于这个错误边界啊

20:00.680 --> 20:02.380
啊错误边界的话他这边这两个

20:02.380 --> 20:03.980
这两个的话有什么区别呢

20:04.280 --> 20:06.380
这两个的话一般就是他们这边

20:06.880 --> 20:10.080
嗯get derived state from 这个arrow

20:10.280 --> 20:12.880
他这边的话他首先他是一个静态方法

20:13.480 --> 20:14.880
啊你看他前面加了什么

20:15.180 --> 20:16.580
加了这个static

20:16.780 --> 20:18.380
对吧而这个是一个什么呢

20:18.480 --> 20:20.480
这个的话他是一个实力方法

20:21.080 --> 20:23.580
这首先这是第一点啊第一点

20:23.780 --> 20:27.480
啊第二点第二点就是你这个get derived state from

20:27.480 --> 20:30.080
arrow他这边运行的这个时间点

20:30.280 --> 20:31.080
他是什么呢

20:31.080 --> 20:34.280
他是在这个渲染这个直主键的这个过程中

20:34.280 --> 20:35.880
你发生这个错误之后

20:35.880 --> 20:37.280
他立马他就会出发

20:37.680 --> 20:39.280
ok所以他是在什么呢

20:39.280 --> 20:41.680
他是在你更新页面之前

20:42.780 --> 20:44.780
注意他是在更新页面之前

20:44.980 --> 20:45.480
就是什么呢

20:45.480 --> 20:46.880
也就是你应用没有崩溃

20:49.460 --> 20:52.860
整个应用没有崩溃

20:54.160 --> 20:55.260
啊大家直接什么呢

20:55.260 --> 20:58.260
直接渲染这个降级u i

20:59.360 --> 21:01.160
降级u i

21:01.860 --> 21:04.260
看一看啊啊人他他就不一样

21:04.360 --> 21:04.960
他是怎么呢

21:04.960 --> 21:07.360
他是这个你在渲染直主键的过程中啊

21:07.360 --> 21:08.360
发生错误是吧

21:08.360 --> 21:09.160
发生错误之后

21:09.160 --> 21:11.360
大家他会更新整个页面

21:11.360 --> 21:12.460
更新怎么个页面

21:12.460 --> 21:13.560
这边意味着什么

21:13.560 --> 21:14.860
意味着整个应用

21:15.660 --> 21:17.960
整个应用已经崩溃了

21:20.060 --> 21:20.860
已经崩溃了

21:20.860 --> 21:21.660
那有些东西说

21:21.660 --> 21:22.460
那已经崩溃了

21:22.460 --> 21:24.660
那你这边就应该看不到这些u i啊

21:24.660 --> 21:25.960
哎你崩溃了之后

21:25.960 --> 21:27.360
然后接下来他这边

21:28.660 --> 21:30.260
啊这边这个arrow啊

21:30.260 --> 21:31.460
你崩溃了之后

21:31.660 --> 21:32.760
他这边的话

21:34.260 --> 21:35.660
啊这边我们没改啊

21:35.660 --> 21:36.460
这边我们没改

21:36.460 --> 21:37.260
就是你这边的话

21:37.260 --> 21:37.860
你改状态

21:37.860 --> 21:38.960
你可以在这里改

21:39.560 --> 21:41.160
也可以在这里改

21:41.560 --> 21:42.860
但是一般我们会放在哪里呢

21:42.860 --> 21:44.060
一般我们会放在这里

21:44.060 --> 21:45.460
放在这个信态方法里面

21:45.660 --> 21:47.560
为什么就是因为你如果你这边

21:47.560 --> 21:48.860
你在这边来修改状态

21:48.860 --> 21:51.060
这个就这个啊

21:51.060 --> 21:52.260
这个错误状态的话

21:52.260 --> 21:53.460
他这边的话是这个

21:53.460 --> 21:55.460
整个应用他会先崩溃一次

21:55.960 --> 21:56.860
崩溃一次之后

21:56.860 --> 21:57.860
然后在这边这边是不是

21:57.860 --> 21:59.160
已经把那个状态修改了

21:59.160 --> 22:00.360
修改之后他之后发现

22:00.360 --> 22:01.360
哎又没有错过了

22:01.360 --> 22:02.460
那再干嘛呢

22:02.460 --> 22:04.160
再重新渲染整个应用

22:05.160 --> 22:09.760
之后再重新渲染

22:11.160 --> 22:14.160
渲染整个应用啊

22:14.160 --> 22:14.960
当然他会干

22:14.960 --> 22:16.460
当然会啊

22:16.460 --> 22:18.260
当然会排除什么呢

22:18.260 --> 22:23.260
会排除排除有问题的那一部分

22:23.260 --> 22:27.460
UI啊那一部分那一部分

22:28.060 --> 22:29.060
渲染什么呢

22:29.060 --> 22:31.060
渲染这个就是降级UI

22:32.560 --> 22:33.160
降级UI

22:33.860 --> 22:34.260
ok

22:34.260 --> 22:35.960
说他的这个区别点在这里

22:36.260 --> 22:36.960
所以一般的话

22:36.960 --> 22:37.760
我们改状态的话

22:37.760 --> 22:38.460
在哪里面改

22:38.660 --> 22:39.460
在这里面改

22:40.260 --> 22:40.760
走吧

22:40.960 --> 22:43.260
这边改它不至于就是让用这个应用

22:43.460 --> 22:44.260
崩溃啊

22:44.260 --> 22:45.160
他这边就直接干嘛

22:45.160 --> 22:46.660
直接渲染这个降级组件

22:46.760 --> 22:47.960
而你如果在这里面改

22:48.160 --> 22:49.060
在这里面改的话

22:49.060 --> 22:50.960
他是整个这个组件数

22:50.960 --> 22:51.960
先销毁一遍

22:52.360 --> 22:53.260
销毁一遍了之后

22:53.260 --> 22:54.660
由于你这边状态改了

22:54.660 --> 22:56.060
他发现又没有错过了

22:56.060 --> 22:57.960
他又相当于就是重新又把这个组件说

22:58.160 --> 22:59.060
就就这边

22:59.860 --> 23:01.260
他首先先把这个销毁一遍

23:01.360 --> 23:02.060
销毁一遍之后

23:02.060 --> 23:03.260
发现你那个状态改了

23:03.260 --> 23:03.660
对吧

23:03.660 --> 23:04.160
改了之后

23:04.160 --> 23:05.860
他又重新把这个没有问题的

23:06.060 --> 23:06.960
把它渲染一遍

23:07.760 --> 23:08.460
所以你这边的话

23:08.460 --> 23:11.360
其实他这边会有一些效率上的问题

23:11.660 --> 23:12.060
对吧

23:12.460 --> 23:14.660
这边由于这个运行时间点比较靠后

23:14.760 --> 23:17.260
因此不太会在这个函数中

23:17.460 --> 23:18.660
这边给你加粗

23:20.820 --> 23:23.320
不太会在这个函数中改变这个状态

23:23.520 --> 23:24.920
那这个函数用来干什么呢

23:25.320 --> 23:25.620
对吧

23:25.620 --> 23:26.220
他一般的话

23:26.220 --> 23:28.720
他就是用来记录这个错误信息的

23:29.020 --> 23:29.820
所以这边官网

23:29.820 --> 23:31.320
官网这边是不是也给你势力了

23:32.020 --> 23:32.520
对不对

23:32.620 --> 23:33.220
他这边

23:33.520 --> 23:34.020
这边是不是

23:34.020 --> 23:35.120
他一般是负责什么

23:35.220 --> 23:36.420
是不是记录错误信息

23:36.520 --> 23:37.720
把你的这个错误日子

23:37.820 --> 23:39.420
是不是上传到这个服务器

23:39.720 --> 23:40.820
他一般就是负责干嘛

23:40.820 --> 23:43.020
他一般就是负责来修改状态的

23:43.820 --> 23:44.720
或者修改状态的

23:45.220 --> 23:46.420
这是两个

23:46.920 --> 23:48.720
这个方法他的一个区别

23:49.320 --> 23:51.420
大家这边他是这个函数

23:51.420 --> 23:52.820
他会返回一个这个对象

23:53.120 --> 23:55.620
react会将这个对象的属性覆盖

23:55.920 --> 23:58.220
覆盖掉这个当前组建的这个State

23:58.920 --> 23:59.920
这是不刚刚我们说了

24:00.220 --> 24:00.520
对不对

24:00.520 --> 24:01.720
这边返回一个对象

24:02.720 --> 24:04.520
参数参数的话是一个错误对象

24:04.920 --> 24:07.820
一般这个函数用于改变这个状态

24:08.220 --> 24:09.920
这个函数这个函数就是干嘛

24:10.220 --> 24:11.020
不用于这个

24:11.320 --> 24:12.920
不太会用于改变状态

24:13.220 --> 24:14.120
他一般用于什么

24:14.220 --> 24:15.620
该函数一般用于记录

24:17.420 --> 24:18.720
记录这个错误

24:18.920 --> 24:19.320
对吧

24:19.320 --> 24:21.120
这个函数用于改变状态

24:25.220 --> 24:27.020
这个函数用于改变这个状态

24:27.620 --> 24:27.920
ok

24:29.520 --> 24:29.620
好

24:29.620 --> 24:30.420
这边的话

24:30.420 --> 24:31.320
这个就是

24:31.620 --> 24:33.020
这边包裹我们已经包裹了

24:33.420 --> 24:33.920
已经包裹了

24:34.120 --> 24:34.520
ok

24:35.020 --> 24:35.120
好

24:35.120 --> 24:35.920
那最后

24:36.320 --> 24:38.920
最后的话关于这个错误边界组建

24:39.420 --> 24:41.320
这边最后一点你要注意的

24:41.820 --> 24:43.620
就是他只会用来补货什么的

24:43.820 --> 24:47.320
补货就是你在渲染UI时候的这个错误

24:48.020 --> 24:48.420
ok

24:48.620 --> 24:51.620
这下面这些场景的错误他是没办法补货到的

24:51.820 --> 24:53.420
比较像这个事件处理

24:53.920 --> 24:54.620
易波代码

24:54.920 --> 24:55.820
服务器渲染

24:56.020 --> 24:58.320
还有他就是自身抛出来的这个错误

24:58.320 --> 25:00.820
像这些的话他就是偏什么是不偏易波

25:01.120 --> 25:03.720
对比说你这个事件处理事件处理是不是也是易波

25:04.220 --> 25:04.620
对不对

25:04.720 --> 25:05.520
也是易波的

25:05.720 --> 25:07.320
也就是说你这边总结一下的话

25:07.320 --> 25:10.120
这个错误边界组建他只能处理什么

25:10.320 --> 25:13.620
处理你这个渲染这个值组建期间

25:14.320 --> 25:15.320
期间了什么呢

25:15.520 --> 25:16.920
同步错误

25:17.820 --> 25:18.320
知道吧

25:18.520 --> 25:19.520
同步错误

25:19.720 --> 25:22.120
这个的话在这个官网这边写的有

25:22.120 --> 25:23.020
一开始就写的有

25:23.720 --> 25:24.220
可能没有

25:24.520 --> 25:29.020
就这边无法补货下面场景所产生的这个错误

25:29.420 --> 25:30.020
就这些

25:31.620 --> 25:33.320
前面前面三个比较好理解

25:33.420 --> 25:33.820
对吧

25:33.820 --> 25:34.920
这个是什么意思

25:35.520 --> 25:36.420
这个是什么意思

25:36.520 --> 25:37.620
这个是这个意思

25:37.820 --> 25:39.020
说一下说一下最后一个

25:39.320 --> 25:41.120
就我们现在的话我们这边

25:42.620 --> 25:45.420
我们这边的话我们是不是在这里

25:45.720 --> 25:47.520
这里套了一个这个错误边界

25:47.820 --> 25:48.220
对不对

25:48.220 --> 25:49.620
这边套了一个错误边界

25:49.620 --> 25:51.320
那这里套了一个错误边界的话

25:51.320 --> 25:52.620
那就相当于什么呢

25:52.720 --> 25:54.220
相当于是在这边

25:54.620 --> 25:56.520
这边你相当于套了一个错误边界

25:57.020 --> 25:58.320
我在这边画个图吧

25:58.420 --> 25:59.620
画个图大家就懂了

26:00.720 --> 26:01.420
就你这边

26:01.520 --> 26:03.520
这边假设我这边是不是给他套了一层

26:04.020 --> 26:05.920
我看这边这这边的话

26:06.320 --> 26:07.920
应该是就就这么画吧

26:07.920 --> 26:08.620
就这么画

26:09.620 --> 26:10.220
套了一层

26:10.320 --> 26:11.520
这边的话是个错误边界

26:11.620 --> 26:12.320
错误边界的话

26:12.320 --> 26:14.620
大家他里面就是个悄的康姆山

26:14.920 --> 26:16.320
里面包含什么呢

26:16.320 --> 26:17.720
包含他的这个值组建

26:18.020 --> 26:19.220
包含他的值组建

26:19.320 --> 26:20.720
啊他发生错误

26:20.720 --> 26:22.820
这不都能够这个补货得到

26:23.020 --> 26:23.520
对不对

26:23.520 --> 26:26.020
但是如果比如说我这个翘的二发生错误

26:26.720 --> 26:27.520
不获得到吧

26:27.720 --> 26:29.120
翘的一发生错误

26:29.120 --> 26:29.820
不获得到吧

26:29.820 --> 26:30.820
这补货不到

26:31.520 --> 26:32.020
对不对

26:32.020 --> 26:33.920
你翘的一这个这个是补货不到的

26:33.920 --> 26:35.220
好来我们这边我们来看一下吧

26:35.420 --> 26:36.220
来看一下

26:37.720 --> 26:38.620
我们这边

26:39.820 --> 26:40.920
啊把这个

26:41.520 --> 26:42.720
我们这边再来写个

26:43.520 --> 26:45.920
比如说我们这边翘的山

26:46.020 --> 26:47.720
啊翘的山这边是ok了

26:48.120 --> 26:49.220
啊不要这边ok了

26:51.040 --> 26:51.840
这边return

26:52.440 --> 26:53.540
啊这个是ok的

26:54.140 --> 26:54.740
return

26:57.930 --> 26:59.630
啊这边呢是苹果

27:00.630 --> 27:01.330
苹果

27:04.070 --> 27:04.670
香蕉

27:07.860 --> 27:10.060
香蕉啊比如说西瓜

27:10.660 --> 27:12.560
ok好来这边来看一下

27:14.500 --> 27:15.100
小心一下

27:15.300 --> 27:16.300
好这边是ok

27:16.300 --> 27:18.300
ok之后然后接下来在这里

27:18.300 --> 27:19.700
啊我们这边来个div

27:21.200 --> 27:22.200
来个div

27:22.600 --> 27:24.400
div让一下这边第一个U圆

27:26.960 --> 27:27.960
格式画一下啊

27:27.960 --> 27:29.760
好在这边我们再来个蜘蛛剑

27:29.960 --> 27:31.060
我们这边的话

27:32.060 --> 27:33.760
再来个翘的

27:34.860 --> 27:36.960
康姆斯点接场

27:37.160 --> 27:38.360
啊这翘的康姆斯

27:38.360 --> 27:40.560
这个的话就是和这个翘的康姆山很像

27:41.460 --> 27:41.960
ok

27:42.660 --> 27:44.060
啊这边翘的康姆斯

27:44.460 --> 27:46.260
啊但是他这边的话他有什么呢

27:46.260 --> 27:47.360
他有这个问题

27:49.680 --> 27:51.080
ok我们先看一下没问题吗

27:51.080 --> 27:52.080
先看一下没问题

27:52.380 --> 27:53.780
啊这边的话引入什么呢

27:53.780 --> 27:54.480
引入这个

27:55.180 --> 27:56.180
import

27:57.180 --> 27:59.180
翘的康姆斯

27:59.780 --> 28:00.180
for

28:01.380 --> 28:02.680
翘的康姆斯

28:04.280 --> 28:06.480
对吧好大家这边使用这个逐渐

28:08.650 --> 28:09.650
使用这个逐渐

28:10.850 --> 28:13.050
啊啊我们这把这边这边改一下嘛

28:13.050 --> 28:14.950
这边改成什么呢

28:15.750 --> 28:18.050
改成比如说HTMR

28:18.750 --> 28:19.850
然后CSS

28:20.750 --> 28:21.850
然后JS

28:23.950 --> 28:25.550
JS啊这边保存

28:25.950 --> 28:27.150
保存之后嗯

28:29.360 --> 28:30.260
找不到

28:30.760 --> 28:33.260
看一下康姆三是吧

28:33.660 --> 28:35.960
啊当前当前摸到下面

28:36.560 --> 28:39.360
ok啊这边这边呢能看懂结构吧

28:39.460 --> 28:40.960
这边呢是翘的康姆一对吧

28:40.960 --> 28:42.060
整个这个翘的康姆一

28:42.060 --> 28:43.560
翘的康姆一然后加这个是什么

28:43.560 --> 28:45.360
这个是翘的康姆三

28:45.560 --> 28:47.060
翘的康姆三下面这个是什么

28:47.160 --> 28:48.360
这个是翘的康姆四

28:48.960 --> 28:50.960
对啊这边来来一个那个吧

28:51.760 --> 28:53.660
来一个那个框框

28:54.060 --> 28:54.760
style

28:56.260 --> 28:57.560
啊这边呢这个border

29:00.650 --> 29:01.350
border

29:01.450 --> 29:02.850
epx solid

29:03.050 --> 29:03.850
啊这边

29:04.850 --> 29:06.850
这边康姆四啊这边

29:07.750 --> 29:08.650
这边也来一个

29:11.460 --> 29:12.660
ok各色化一下

29:13.960 --> 29:18.260
哎啊大家这边呢保存

29:19.260 --> 29:20.760
啊我刚才按到什么了

29:22.580 --> 29:26.180
ok啊保存好然后加这边的话来看一下

29:27.180 --> 29:29.580
ok现在的话是整个这个结构是这样子的

29:29.580 --> 29:31.280
对吧好大家这边的话我们来看一下

29:31.280 --> 29:32.280
这个翘的四

29:32.380 --> 29:33.980
比翘翘的四出错

29:34.180 --> 29:35.480
他能不能补获得到

29:36.180 --> 29:37.880
ok好来我们这边来看一下

29:38.480 --> 29:39.480
这能够补获得到

29:40.280 --> 29:42.980
对不对你这边你错误边界是设置在哪里的

29:43.080 --> 29:45.480
你错误边界是设置在

29:46.280 --> 29:47.780
设置在这个位置的

29:48.380 --> 29:49.580
对不对设置在这个位置的

29:49.580 --> 29:51.380
那这个位置下面的这个UI

29:51.380 --> 29:53.180
你翘的三以及翘的三

29:53.580 --> 29:56.280
之后的所有直主线只要一出错

29:56.280 --> 29:58.280
那接下来的话他这边整个这一块

29:58.480 --> 30:01.080
他确认不出来对不对但是这边是边界

30:01.080 --> 30:02.280
你要理解边界

30:02.780 --> 30:04.880
哎这边就真的像是画了一条线一样

30:05.580 --> 30:07.380
对不对相当于画了条线啊

30:07.380 --> 30:09.580
这是一个边界啊你出错你

30:09.980 --> 30:11.280
下面的这个直主键出错

30:11.280 --> 30:13.280
那你这边的话就是翘的四啊

30:13.280 --> 30:16.580
翘的看不识翘的看不三啊崩溃没关系

30:16.780 --> 30:18.280
我这边给你画了一个边界

30:18.480 --> 30:20.280
那你崩溃就只能崩溃到这

30:20.980 --> 30:22.580
对不对只能崩溃到这

30:22.780 --> 30:24.380
说你这边你会发现就是

30:24.480 --> 30:26.080
翘的看不一和翘的看不二

30:26.380 --> 30:28.080
这个是没问题的对不对

30:28.280 --> 30:30.680
但我现在的话我这个错误边界在这

30:31.580 --> 30:32.580
啊错误边界在这

30:32.680 --> 30:33.980
那我如果是什么呢

30:34.180 --> 30:36.780
如果是哎比如说我这个

30:37.980 --> 30:39.080
翘的看不一

30:39.480 --> 30:40.580
自身发生错误

30:41.180 --> 30:42.580
那关不关这个边界的事

30:42.980 --> 30:44.480
是不是这个边界就不管了

30:44.680 --> 30:46.880
对不对啊如果是这个翘的看不二

30:47.080 --> 30:47.880
发生错误

30:47.980 --> 30:49.980
这边界管得到吧管不到

30:50.180 --> 30:52.280
对不对他该崩溃一样的这个崩溃

30:52.880 --> 30:54.880
明不明啊该崩溃一样的崩溃

30:55.080 --> 30:56.280
啊比我们这边来看一下吧

30:57.280 --> 30:59.780
比我们这边呢在哪行吧在这边写

31:00.980 --> 31:02.880
这边我们就直接抛出个错误吧

31:03.080 --> 31:04.580
啊我们这边就直接收

31:05.580 --> 31:07.080
收

31:08.380 --> 31:09.980
收这个New Error

31:13.010 --> 31:14.610
啊直接抛出个错误

31:16.010 --> 31:17.510
啊比如说Error

31:18.510 --> 31:20.210
啊就Error

31:20.510 --> 31:22.310
ok啊这边来看一下

31:22.410 --> 31:24.410
你看这不整个这个错误

31:25.010 --> 31:26.410
对不对这边哎

31:26.710 --> 31:28.610
这边这边对不对

31:28.610 --> 31:31.710
整个逐渐说啊出不来啊

31:31.710 --> 31:33.410
比如说包括这边这边也是

31:33.910 --> 31:35.010
这个看门

31:35.610 --> 31:37.610
看门这边抛出个错误

31:38.110 --> 31:38.610
ok

31:39.710 --> 31:41.310
这也是一样的对不对

31:41.310 --> 31:43.010
整个组件说出不来

31:43.410 --> 31:46.210
ok说你要注意啊就是关于这个错误边界

31:46.310 --> 31:48.310
就他的这个边界在哪里啊

31:48.310 --> 31:50.110
这个的话你也要去这个理解

31:50.610 --> 31:52.610
ok其实就是他这边说的这句话

31:53.710 --> 31:55.310
就是他这边说的这句话啊

31:55.310 --> 31:57.110
他自身抛出了这个错误啊

31:57.110 --> 31:58.810
并非他的指主前那这个的话

31:58.810 --> 32:00.910
他也是啊无法补货到的啊

32:00.910 --> 32:02.410
包括就是你这边其他的

32:02.810 --> 32:04.710
对不对其他的这些抛出错误

32:04.910 --> 32:06.910
他也是没办法补货到的

32:07.410 --> 32:07.910
ok

32:09.210 --> 32:11.410
啊这就是关于这个

32:12.510 --> 32:13.710
把保存一下啊

32:13.710 --> 32:15.810
这就是关于这个错误边界啊

32:15.810 --> 32:18.110
大家下去的话把这一小节把它再看一下吧

32:18.610 --> 32:20.210
好吧其他的话就没什么了

32:20.210 --> 32:23.010
然后把这个官方这个这个错误边界

32:23.110 --> 32:24.810
把这篇文档把它通读啊

32:24.810 --> 32:26.610
从头到尾把它通读一遍

32:26.710 --> 32:29.110
然后把我课堂上讲的这个代码

32:29.410 --> 32:31.410
自己把它写一写好吧

32:31.610 --> 32:34.510
ok啊这些课的话就到这里

32:34.910 --> 32:36.110
下去自己看一下

32:36.410 --> 32:36.910
再见

