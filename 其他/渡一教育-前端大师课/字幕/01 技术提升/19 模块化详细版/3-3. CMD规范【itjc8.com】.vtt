WEBVTT

00:00.820 --> 00:03.820
好 上天后来我们讲了这个AMD规范

00:03.820 --> 00:06.520
这一块我们学习CMD规范

00:06.520 --> 00:11.320
CMD规范它其实跟AMD规范

00:11.320 --> 00:14.120
实现原理上差不多

00:14.120 --> 00:15.920
但是它的API上面

00:15.920 --> 00:19.120
实现方式上 就是我们用它的时候

00:19.120 --> 00:21.620
CMD规范更加好用一点

00:21.620 --> 00:25.520
因为CMD规范它就更加类似于common.js了

00:25.520 --> 00:26.820
我来看一下吧

00:26.820 --> 00:29.720
它的全程叫做common module definition

00:29.920 --> 00:33.320
公共模块定义规范 它非常类似于common.js

00:33.320 --> 00:35.020
这个规范提出来之后

00:35.020 --> 00:38.820
咱们国内的一个淘宝工程师写了一个C.js

00:38.820 --> 00:40.820
它实现了CMD规范

00:40.820 --> 00:43.520
在CMD规范中导入导出模块

00:43.520 --> 00:46.020
它都必须要放到跟AMD差不多

00:46.020 --> 00:48.120
必须要放到define函数里边

00:48.120 --> 00:49.820
那么define函数里边怎么写呢

00:49.820 --> 00:51.020
就是写法上有区别

00:51.020 --> 00:52.620
看一下下面的代码

00:52.620 --> 00:54.520
define里边写一个函数

00:54.520 --> 00:57.120
直接只有一个函数 只有这么一个函数

00:57.120 --> 00:59.120
这个函数里边有三个函数

00:59.120 --> 01:02.720
分别是require export和module

01:02.720 --> 01:03.720
懂了吗

01:03.720 --> 01:05.620
是不是跟上级课讲的一样的

01:05.620 --> 01:07.820
我们上级课不是已经做过了吗

01:07.820 --> 01:09.320
require.js

01:09.320 --> 01:11.520
我们上级课是不是学的require.js

01:11.520 --> 01:14.520
require.js里边不是能够实现这样的功能吗

01:14.520 --> 01:16.920
那为什么还要重新打一个呢

01:16.920 --> 01:17.520
是这样子

01:17.520 --> 01:20.920
它有点历史远远在里边

01:20.920 --> 01:24.020
最一开始require.js

01:24.020 --> 01:26.520
它是没有实现这种方式的

01:26.520 --> 01:29.120
我们把固定一下

01:29.120 --> 01:31.520
最开始require.js

01:31.520 --> 01:34.320
它只实现了amd规范

01:34.320 --> 01:35.620
它只能这样用

01:35.620 --> 01:36.120
不要的意思吧

01:36.120 --> 01:37.320
它只能这样用

01:37.320 --> 01:38.720
后来出现

01:38.720 --> 01:40.920
然后再出现了cmd规范

01:40.920 --> 01:43.720
然后再被c.js实现了

01:43.720 --> 01:46.720
于是c.js就是大受欢迎

01:46.720 --> 01:49.220
这种写法大家都觉得很好用

01:49.220 --> 01:51.120
因为跟common.js是一样的

01:51.120 --> 01:52.920
就是外面套了一个define而已

01:52.920 --> 01:54.120
用法都是一样的

01:54.120 --> 01:56.220
就是大家能更加喜欢这种

01:56.220 --> 01:58.720
后来require.js

01:58.720 --> 02:01.220
它就把它里边除了支持这种

02:01.220 --> 02:04.220
同时也支持了cmd规范

02:04.220 --> 02:05.220
是这么回事

02:05.220 --> 02:07.120
所以require.js实际上

02:07.120 --> 02:08.820
它既实现了amd规范

02:08.820 --> 02:10.220
又实现了cmd

02:10.220 --> 02:11.220
不要的意思吧

02:11.220 --> 02:14.620
不过最早实现的cmd是c.js

02:14.620 --> 02:15.620
这个js

02:15.620 --> 02:17.520
咱们国内的淘宝工程师

02:17.520 --> 02:19.420
预博开发的c.js

02:19.420 --> 02:21.320
实现了cmd规范

02:21.320 --> 02:22.620
那么就没什么好说的了

02:22.620 --> 02:24.720
那么我们接下来看一看

02:24.720 --> 02:27.220
c.js怎么来用

02:27.220 --> 02:29.420
既然我们上级课已经写过了

02:29.420 --> 02:31.220
我们直接把上级课的东西拿过来

02:31.220 --> 02:32.620
复制过来

02:32.620 --> 02:33.920
再三天过来

02:33.920 --> 02:34.820
c.js在这

02:34.820 --> 02:35.720
我已经放到这了

02:35.720 --> 02:37.720
大家要去试验一下的话

02:37.720 --> 02:38.720
自己下来去

02:38.720 --> 02:40.520
倒过来试验就行了

02:40.520 --> 02:42.120
然后我们在这里建个文件

02:42.120 --> 02:42.720
英这个设计

02:42.720 --> 02:44.820
前面看一下

02:44.820 --> 02:46.820
用法上稍微有一点点区别

02:46.820 --> 02:50.620
首先我们这里倒入c.js

02:50.720 --> 02:52.720
其实无论是c.js

02:52.720 --> 02:54.020
还是require.js

02:54.020 --> 02:55.820
他们还可以做一些配置

02:55.820 --> 02:57.120
我们不用去管那么多了

02:57.120 --> 02:58.020
因为这两个东西

02:58.020 --> 03:00.420
现在基本上不大用了

03:00.420 --> 03:02.020
c.js倒入进来

03:02.020 --> 03:02.820
倒入进来之后

03:02.820 --> 03:04.620
它不像require.js那样子

03:04.620 --> 03:05.720
在这里写入口文件

03:05.720 --> 03:07.620
require.js在这里写了

03:07.620 --> 03:09.420
c.js是要在这里写

03:09.420 --> 03:10.320
这里怎么写

03:10.320 --> 03:11.520
它这个js里面

03:11.520 --> 03:12.920
包含了一个全聚变量

03:12.920 --> 03:15.020
叫做c.js

03:15.020 --> 03:16.620
里面有一个方法

03:16.620 --> 03:19.020
叫做use

03:19.020 --> 03:20.620
use方法里面你就写上

03:20.620 --> 03:22.820
你的启动文件入口文件

03:22.820 --> 03:23.420
在哪呢

03:23.420 --> 03:25.420
js下面的index

03:25.420 --> 03:27.220
都可以不用写后续名

03:27.220 --> 03:28.320
好就写完了

03:28.320 --> 03:31.680
运行看一下吧

03:31.680 --> 03:32.380
右键

03:32.380 --> 03:35.020
检查

03:35.020 --> 03:36.220
看到没

03:36.220 --> 03:38.120
是不是一切都是正常的执行

03:38.120 --> 03:39.120
跟之前有啥区别

03:39.120 --> 03:40.220
没啥区别了

03:40.220 --> 03:41.320
看这边带

03:41.320 --> 03:43.220
只是我们使用了换成了

03:43.220 --> 03:45.320
换成了c.md规范来写了

03:45.320 --> 03:47.020
其他都是完全一样的

03:47.020 --> 03:49.120
完全一样的

03:49.120 --> 03:50.620
来看一下吧

03:51.520 --> 03:52.320
对吧

03:52.320 --> 03:54.520
跟那个common.js就没啥区别了

03:54.520 --> 03:55.720
另外呢

03:55.720 --> 03:57.020
在这个

03:57.020 --> 03:57.920
多说一点吧

03:57.920 --> 04:00.120
其实都说不说都无所谓了

04:00.120 --> 04:02.120
就在这个c.md规范里面

04:02.120 --> 04:03.420
它又考虑到一个问题

04:03.420 --> 04:04.820
就是我们之前说过问题

04:04.820 --> 04:05.720
就是我们这里呢

04:05.720 --> 04:07.820
是不是要加载这个scripts的元素

04:07.820 --> 04:09.220
我们说到这个scripts的元素

04:09.220 --> 04:10.420
我这里说一下

04:10.420 --> 04:13.120
c.js它这里有这么一种做法

04:13.120 --> 04:14.420
你可以看到它的页面中

04:14.420 --> 04:15.520
实际上是没有多出

04:15.520 --> 04:17.320
任何的scripts元素的

04:17.320 --> 04:18.920
你看是没有的

04:19.020 --> 04:21.520
那么它怎么加这个scripts呢

04:21.520 --> 04:22.620
实际上是这样

04:22.620 --> 04:24.920
我们刷新仔细看一下

04:24.920 --> 04:26.120
太快了

04:26.120 --> 04:27.520
实际上它是由引入的

04:27.520 --> 04:29.820
这个scripts它是由引入的

04:29.820 --> 04:32.120
引入之后它马上就把3了

04:32.120 --> 04:32.920
马上就把3了

04:32.920 --> 04:34.720
然后把它的就是导出的东西

04:34.720 --> 04:35.720
把它放到内存里面

04:35.720 --> 04:36.620
放到一个变量里面

04:36.620 --> 04:37.720
缓存

04:37.720 --> 04:39.020
实际上是有的

04:39.020 --> 04:40.120
实际上是有的

04:40.120 --> 04:41.520
主要是这个太快了

04:41.520 --> 04:42.820
看不到

04:42.820 --> 04:43.720
看不到太快了

04:43.720 --> 04:45.420
太快了

04:45.420 --> 04:46.420
没啥意思吗

04:46.420 --> 04:47.120
OK

04:47.120 --> 04:48.320
我们这里就说一点

04:48.320 --> 04:51.420
就是说在c.js里面

04:51.420 --> 04:53.620
它也考虑到这么一个问题

04:53.620 --> 04:55.520
因为我们这里的导入

04:55.520 --> 04:57.720
因为这里有点类似于common.js

04:57.720 --> 04:59.520
common.js是同步的

04:59.520 --> 05:01.720
它这里是不是要远程读取文件

05:01.720 --> 05:02.420
读取了过后

05:02.420 --> 05:04.120
把文件的内容运行出来

05:04.120 --> 05:05.020
然后返回

05:05.020 --> 05:06.720
它要做这么一件事

05:06.720 --> 05:09.220
那么这个过程如果说

05:09.220 --> 05:10.420
如果你这么写的话

05:10.420 --> 05:13.220
可能会导致后边的单码主色

05:13.220 --> 05:14.220
因为它是同步的

05:14.220 --> 05:16.320
前面的没有把.js文件导入进来

05:16.320 --> 05:18.220
那么后边单码就一直在等着

05:18.420 --> 05:20.520
如果说你特别在意这个点的话

05:20.520 --> 05:22.820
那么它可以提供了另外一种方式来导入

05:22.820 --> 05:23.820
怎么的导入呢

05:23.820 --> 05:26.620
就是在这里写上一个sync

05:26.620 --> 05:28.220
require里面有这么一个函数

05:28.220 --> 05:28.820
sync

05:28.820 --> 05:29.720
它除了导入

05:29.720 --> 05:32.320
它就是用一步的方式来导入模块

05:32.320 --> 05:33.220
那么比方说

05:33.220 --> 05:34.820
我们这里使用了这种方式过后

05:34.820 --> 05:36.320
它就是这么回事了

05:36.320 --> 05:37.820
导入模块A

05:37.820 --> 05:38.820
导入模块A

05:38.820 --> 05:40.220
导入完了过后

05:40.220 --> 05:42.420
这里运行一个函数

05:42.420 --> 05:43.820
运行一个函数

05:43.820 --> 05:45.320
我们输出A

05:45.320 --> 05:46.620
它是用回调的模式

05:46.620 --> 05:48.120
它可以使用回调的模式

05:48.120 --> 05:49.520
把它变成一步的

05:49.520 --> 05:51.620
导入模块B

05:51.620 --> 05:52.520
运行完了过

05:52.520 --> 05:53.520
导入完了过后

05:53.520 --> 05:56.520
输出模块B

05:56.520 --> 05:57.420
保存

05:57.420 --> 05:58.520
咱们来看一下

05:58.520 --> 05:59.020
你看

05:59.020 --> 06:00.620
是不是仍然可以输出

06:00.620 --> 06:02.420
A

06:02.420 --> 06:04.020
导入模块A

06:04.020 --> 06:05.020
然后呢

06:05.020 --> 06:06.320
模块A的内

06:06.320 --> 06:08.720
模块A的

06:08.720 --> 06:09.520
A模块的内容

06:09.520 --> 06:10.520
A模块

06:10.520 --> 06:12.520
可能要网络传说要慢一点

06:12.520 --> 06:13.720
网络传说要慢一点

06:13.720 --> 06:14.820
可能最后导入

06:14.820 --> 06:17.820
然后模块B的内容

06:17.820 --> 06:20.320
模块B的内容

06:20.320 --> 06:21.520
模块B在这

06:21.520 --> 06:22.920
模块B的内容

06:22.920 --> 06:24.020
模块B在这

06:24.020 --> 06:24.320
对吧

06:24.320 --> 06:24.820
在这

06:24.820 --> 06:25.220
你看

06:25.220 --> 06:26.620
是不是这两个index的JS

06:26.620 --> 06:27.820
index的JS

06:27.820 --> 06:29.620
也可以用这种一步的方式来导入

06:29.620 --> 06:30.220
都行

06:30.220 --> 06:31.420
都行

06:31.420 --> 06:32.320
没啥意思吗

06:32.320 --> 06:32.720
ok

06:32.720 --> 06:35.720
这就关于CMD和AMD规范

06:35.720 --> 06:36.320
就没了

06:36.320 --> 06:38.120
其实非常非常简单

06:38.120 --> 06:39.020
因为这些东西呢

06:39.020 --> 06:41.720
都已然在前端的发展历程中

06:41.720 --> 06:44.320
成为了历史了

06:44.320 --> 06:45.920
肯定更新换代了

06:45.920 --> 06:47.820
现在已经是ES6的模块化了

06:47.820 --> 06:50.220
所以说我们终点是在下一张

06:50.220 --> 06:51.620
就是ES6的模块化

06:51.620 --> 06:53.220
那个就非常非常重要了

06:53.220 --> 06:54.820
官方出了规范了

06:54.820 --> 06:55.420
好吧

06:55.420 --> 06:56.920
那么咱们这一张就介绍到这里

06:56.920 --> 06:58.020
AMD和CMD

06:58.020 --> 06:58.820
简单了解一下

