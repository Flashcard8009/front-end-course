WEBVTT

00:00.500 --> 00:03.220
各位同学 咱们继续往下看

00:03.220 --> 00:07.020
上一节课 咱们所讲的这个术图 其实并没有完

00:07.020 --> 00:10.020
并没有完 跟这个术图相关 其实还有另外一种

00:10.020 --> 00:11.380
就是这个吹麦谱

00:11.380 --> 00:13.620
吹麦谱 你看这个词是不是很像

00:13.620 --> 00:17.420
只不过它多了一个MAP 是不是 跟上一个相比

00:17.420 --> 00:21.300
咱们这节课就花一些时间来详细的去介绍一下

00:21.300 --> 00:24.140
这个吹麦谱 这个图表的类型

00:24.140 --> 00:26.420
首先先来说一下这个吹麦谱

00:26.580 --> 00:29.540
吹麦谱 它其实也是一种树图

00:29.540 --> 00:30.900
也是一种树图

00:30.900 --> 00:34.860
它翻译过来叫什么 叫句形树图

00:34.860 --> 00:37.300
它跟这个吹其实是一样的

00:37.300 --> 00:38.620
跟这个吹是一样的

00:38.620 --> 00:41.460
都是用来展示这种树状的数据

00:41.460 --> 00:44.500
或者说有层级的这种数据

00:44.500 --> 00:47.260
但是他们有很大的一个区别 是不是

00:47.260 --> 00:49.420
大家从这一眼就能够看出来

00:49.420 --> 00:50.700
你说这个图表长的

00:50.700 --> 00:52.580
跟它完全不一样

00:52.580 --> 00:54.380
它怎么能够叫树呢 是吧

00:54.380 --> 00:55.620
好 我解释一下

00:55.660 --> 00:57.060
大家就懂了 行吧

00:57.060 --> 00:59.220
那这个也是这两种图表类型

00:59.220 --> 01:01.780
它们的一个非常之大的一个区别

01:01.780 --> 01:03.380
先来说一下这个树

01:03.380 --> 01:04.220
吹 是不是

01:04.220 --> 01:05.620
我们在上一一课讲过

01:05.620 --> 01:10.060
这个吹它其实展示的形式是非常的形象的

01:10.060 --> 01:10.580
是吧

01:10.580 --> 01:12.180
它就跟我们生活当中

01:12.180 --> 01:13.660
现实生活当中的这个树

01:13.660 --> 01:14.340
是不是一样的

01:14.340 --> 01:15.300
你看这是树根

01:15.300 --> 01:17.100
然后接下来就是树枝

01:17.100 --> 01:19.220
然后它其实是一目了然的

01:19.220 --> 01:20.620
你比如说这个地方

01:20.620 --> 01:21.980
好 这一些所有的数据

01:21.980 --> 01:23.340
是不是都是属于它

01:23.420 --> 01:26.900
从它的这根枝上面发展出来了

01:26.900 --> 01:28.420
就非常的清晰

01:28.420 --> 01:30.140
看上去一目了然

01:30.140 --> 01:31.740
这个就是树土

01:31.740 --> 01:32.340
对不对

01:32.340 --> 01:35.260
那我们再来看一下这个巨型的树土

01:35.260 --> 01:37.020
就是这个吹麦谱

01:37.020 --> 01:38.260
很多同学就是

01:38.260 --> 01:40.500
在第一眼看这个东西的时候

01:40.500 --> 01:41.660
一脸茫然

01:41.660 --> 01:43.020
我考这个到底是个啥

01:43.020 --> 01:43.500
是不是

01:43.500 --> 01:45.020
看不明白 是吧

01:45.020 --> 01:45.940
其实那个时候

01:45.940 --> 01:47.860
我在第一次看这个图形的时候

01:47.860 --> 01:48.940
也是一样的

01:48.940 --> 01:52.260
到底这是什么样的这个图形

01:52.260 --> 01:53.580
就是完全就不知道

01:53.580 --> 01:56.980
然后在这就跟大家去解释一下

01:57.820 --> 01:59.380
那这个就是一个吹麦谱

01:59.380 --> 02:00.540
它的一个表现形式

02:00.540 --> 02:03.380
你看跟这个吹是完全是两个风格

02:03.380 --> 02:05.100
是不是一点都不相似

02:05.100 --> 02:05.460
好

02:05.460 --> 02:07.380
它的展现形式是这样的

02:07.380 --> 02:10.140
就是它是以利用什么

02:10.140 --> 02:12.220
利用巨型的这种形状

02:12.220 --> 02:13.980
去展示数据

02:13.980 --> 02:17.020
然后数据跟什么有关系

02:17.020 --> 02:20.180
跟这个巨型它的一个大小是有关系的

02:20.180 --> 02:20.860
换句话说

02:20.900 --> 02:23.180
跟它的面积是有关系的

02:23.180 --> 02:25.340
我的数据大

02:25.340 --> 02:27.980
那对应的这个巨型就会大

02:27.980 --> 02:29.420
它的面积是不是就大

02:29.420 --> 02:30.980
我的数据小

02:30.980 --> 02:32.780
所对应的这个巨型

02:32.780 --> 02:35.180
它的数据是不是就小了

02:35.180 --> 02:36.580
你看

02:36.580 --> 02:37.460
这样去看的话

02:37.460 --> 02:39.180
是不是就明白了

02:39.180 --> 02:40.900
这个大色块到底啥意思

02:40.900 --> 02:41.860
是不是不懂

02:41.860 --> 02:42.220
好

02:42.220 --> 02:42.820
这是其一

02:42.820 --> 02:44.060
然后其二就是

02:44.060 --> 02:44.820
我们的数

02:44.820 --> 02:45.980
它是不是有什么

02:45.980 --> 02:46.500
复杰

02:46.500 --> 02:47.940
复杰点跟紫杰点

02:47.940 --> 02:48.580
是不是

02:48.580 --> 02:49.540
那复杰点

02:49.580 --> 02:50.860
它的关系

02:50.860 --> 02:51.980
你看这块

02:51.980 --> 02:53.020
这是不是一个大的

02:53.020 --> 02:54.620
一个红色的一个块

02:54.620 --> 02:55.220
那它里头

02:55.220 --> 02:56.180
你看有没有分

02:56.180 --> 02:56.860
有没有分

02:56.860 --> 02:57.420
对不对

02:57.420 --> 02:58.580
那其实这个东西

02:58.580 --> 03:01.140
就属于它的一个紫杰点

03:01.140 --> 03:02.580
它的一个紫杰点

03:02.580 --> 03:03.420
明白吧

03:03.420 --> 03:06.420
那这个是其中的一种表现形式

03:06.420 --> 03:08.100
那其实还有另外一种表现形式

03:08.100 --> 03:09.140
就是说在这个地方

03:09.140 --> 03:11.100
它是不展示这个紫杰点

03:11.100 --> 03:11.860
那紫杰点

03:11.860 --> 03:13.300
想要展示怎么办

03:13.300 --> 03:14.220
点击一下

03:14.220 --> 03:15.660
就能够进来了

03:15.660 --> 03:17.940
整个我的图表就会变成

03:17.940 --> 03:19.420
所有的内容都变成了

03:19.420 --> 03:22.860
当前紫杰点当中的所有的数据了

03:22.860 --> 03:24.540
这么去解释的话

03:24.540 --> 03:27.340
是不是就明白这个图到底是什么意思了

03:27.340 --> 03:27.940
好吧

03:27.940 --> 03:31.580
这个就是所谓的一个巨型书图

03:31.580 --> 03:32.260
巨型书图

03:32.260 --> 03:34.340
好

03:34.340 --> 03:36.180
那总结一下

03:36.180 --> 03:37.180
这个巨型的书图

03:37.180 --> 03:39.100
它其实是把这个数据

03:39.100 --> 03:40.780
给我们映射到了

03:40.780 --> 03:41.100
哪里

03:41.100 --> 03:44.220
映射到了面积的视觉元素身上

03:44.220 --> 03:44.900
当然了

03:44.900 --> 03:46.460
它也可以去映射到什么

03:46.460 --> 03:46.940
比如说

03:46.940 --> 03:47.420
颜色

03:47.420 --> 03:48.100
透明度

03:48.100 --> 03:49.580
明暗度等等这些

03:49.580 --> 03:51.100
但是这些方块

03:51.100 --> 03:52.900
这些巨型是最基本的

03:52.900 --> 03:54.100
你必须要有的

03:54.100 --> 03:54.940
明白吧

03:54.940 --> 03:55.380
OK

03:55.380 --> 03:56.620
介绍完这个东西之后

03:56.620 --> 03:57.540
那接下来

03:57.540 --> 03:58.420
咱们就要说一下

03:58.420 --> 03:58.860
这节课

03:58.860 --> 04:00.340
咱要学的一个东西

04:00.340 --> 04:00.980
那这节课

04:00.980 --> 04:02.580
咱肯定是要去介绍一下

04:02.580 --> 04:04.940
这个吹MAP当中的一些配置参数

04:04.940 --> 04:07.220
但是首先先去说一下

04:07.220 --> 04:08.580
我们要做的一个例子

04:08.580 --> 04:09.700
咱要做的一个例子

04:09.700 --> 04:10.340
是这个

04:10.340 --> 04:10.940
这个例子

04:10.940 --> 04:12.100
我就拿这个例子

04:12.100 --> 04:14.740
咱们去讲一下这个吹MAP当中的

04:14.740 --> 04:15.700
这些配置参数

04:15.700 --> 04:17.220
到底该如何去用

04:17.220 --> 04:18.220
好吧

04:18.220 --> 04:20.580
那先来说一下这个例子

04:20.580 --> 04:20.980
好不好

04:20.980 --> 04:21.420
这个例子

04:21.420 --> 04:23.700
也是官方给出的这么一个例子

04:23.700 --> 04:24.500
那这个例子

04:24.500 --> 04:26.020
到底它统计的是什么

04:26.020 --> 04:26.620
是这样的

04:26.620 --> 04:30.300
就是它统计的是在2016年4月份

04:30.300 --> 04:31.540
这个Echars

04:31.540 --> 04:34.660
它的配置项查询的一个数量

04:34.660 --> 04:35.540
啥意思呢

04:35.540 --> 04:37.220
就是在2016年的4月份

04:37.220 --> 04:39.900
这个整个月份用户使用Echars的时候

04:39.900 --> 04:41.220
在这去搜

04:41.220 --> 04:41.820
是不是

04:41.820 --> 04:44.100
你搜哪个配置项

04:44.100 --> 04:44.940
那搜一次

04:44.940 --> 04:46.340
它就给你记录一次

04:46.420 --> 04:47.340
你比如说

04:47.340 --> 04:49.540
很多人搜这个Series.NET

04:49.540 --> 04:50.100
是不是

04:50.100 --> 04:51.220
搜这些什么

04:51.220 --> 04:52.260
折线图

04:52.260 --> 04:53.060
这个比较多

04:53.060 --> 04:53.660
搜了

04:53.660 --> 04:55.220
你看我们的Tour Tip

04:55.220 --> 04:56.820
弹出的是51897

04:56.820 --> 04:59.460
当然这个数据统计的到底是次数

04:59.460 --> 04:59.940
还是啥

04:59.940 --> 05:00.740
咱就不知道了

05:00.740 --> 05:02.020
这个到无所谓了

05:02.020 --> 05:03.060
这不是重点

05:03.060 --> 05:03.540
是吧

05:03.540 --> 05:05.420
所以这个解释了一下

05:05.420 --> 05:06.980
就是用户再去搜

05:06.980 --> 05:07.380
搜什么的

05:07.380 --> 05:10.300
搜这一个配置参数相应的一些数量

05:10.300 --> 05:11.620
它统计下来了

05:11.620 --> 05:12.460
统计下来了

05:12.460 --> 05:13.420
明白吧

05:13.420 --> 05:14.380
好

05:15.060 --> 05:15.660
好

05:15.660 --> 05:17.060
那本身这个Echars

05:17.060 --> 05:18.060
它的一个配置参数

05:18.060 --> 05:19.500
我们之前都已经说过

05:19.500 --> 05:21.860
它其实就是一个数状的一个形状

05:21.860 --> 05:23.500
它就是一个数形的一个结构

05:23.500 --> 05:23.980
是不是

05:23.980 --> 05:26.260
所以就是按照这个数形的结构

05:26.260 --> 05:27.700
来统计的话

05:27.700 --> 05:28.580
统计的话

05:28.580 --> 05:30.900
那你说它的这种数据结构

05:30.900 --> 05:33.460
是不是刚好符合我们的数状图

05:33.460 --> 05:36.420
对于数据的一个格式的要求

05:36.420 --> 05:36.980
对吧

05:36.980 --> 05:39.460
所以就是我们使用这个TreeMap

05:39.460 --> 05:40.380
去展示它

05:40.380 --> 05:41.660
还是挺合适的

05:41.660 --> 05:42.980
挺合适的

05:42.980 --> 05:43.660
行

05:43.660 --> 05:45.740
然后接着再来

05:45.740 --> 05:47.660
这是咱们这节课要讲的

05:47.660 --> 05:48.780
然后咱们这节课

05:48.780 --> 05:51.020
其实它的内容还是比较多的

05:51.020 --> 05:51.860
因为这个里头

05:51.980 --> 05:53.420
我们涉及到另外一个东西

05:53.420 --> 05:55.820
就是数据的一个格式化

05:55.820 --> 05:57.700
这个东西需要去花一些时间

05:57.700 --> 05:59.980
所以说我们整个课

05:59.980 --> 06:01.900
就是这个这节课

06:01.900 --> 06:02.900
我们的TreeMap

06:02.900 --> 06:04.540
它是分为两个阶段

06:04.540 --> 06:05.180
第一个阶段

06:05.180 --> 06:07.580
就是我们需要去处理一下数据

06:07.580 --> 06:08.540
第二个阶段

06:08.540 --> 06:10.820
咱们才是真正的去说一下

06:10.820 --> 06:12.420
这里头的一些配置参数

06:12.420 --> 06:13.140
行不行

06:13.180 --> 06:13.740
那好

06:13.740 --> 06:15.300
我们先来说第一个阶段

06:15.300 --> 06:17.140
就是这个数据的这么一个处理

06:18.740 --> 06:21.100
那先来说一下这个数据点开

06:21.100 --> 06:22.900
那人界的这个数据

06:22.900 --> 06:25.620
它是通过JSNP的这种方式

06:25.620 --> 06:26.860
去请求过来的

06:26.860 --> 06:29.540
你看这个是数据它的一个地址

06:29.540 --> 06:30.860
它的一个接口地址

06:30.860 --> 06:32.300
然后我们也同样

06:32.300 --> 06:33.660
可以通过JSNP

06:33.660 --> 06:34.900
直接去请求

06:34.900 --> 06:36.980
咱们在这就不费劲了

06:36.980 --> 06:37.740
不费劲了

06:37.740 --> 06:40.780
我就直接把这个数据给它荡下来了

06:40.820 --> 06:41.940
荡下来之后

06:41.940 --> 06:43.420
就是在我们的页面当中

06:43.420 --> 06:45.700
咱们直接通过script标签

06:45.700 --> 06:47.620
就能够把它引入进来了

06:47.620 --> 06:49.660
那数据就是这个JSNP的文件

06:49.660 --> 06:51.620
到时候这个文件会给大家的

06:51.620 --> 06:52.300
行不行

06:52.300 --> 06:53.780
然后咱们的重点

06:53.780 --> 06:56.060
要说一下这个数据结构

06:56.060 --> 06:57.180
就是这个东西

06:57.940 --> 06:59.500
这个东西好

06:59.500 --> 07:00.980
拿到这个数据之后

07:01.340 --> 07:02.660
我们先来看一下

07:02.660 --> 07:04.140
其实这个数据

07:04.140 --> 07:05.940
我们是没法用的

07:06.260 --> 07:07.100
没法用的

07:07.100 --> 07:08.580
但是它确实是

07:08.580 --> 07:10.060
数形的这么一个结构

07:10.100 --> 07:10.940
我把它关掉

07:11.580 --> 07:13.460
这些我已经提前关掉了

07:13.460 --> 07:14.260
一些再关一些

07:14.580 --> 07:15.940
来我们对比一下

07:16.740 --> 07:17.780
它的这种统计

07:17.900 --> 07:18.980
其实就跟什么

07:18.980 --> 07:21.060
跟我们在这的配置项的统计

07:21.060 --> 07:21.820
是一样的

07:21.820 --> 07:22.460
是一样的

07:22.460 --> 07:24.420
你看title legend

07:24.420 --> 07:25.180
然后grade

07:25.180 --> 07:26.620
那比如说我们点进去

07:26.620 --> 07:27.300
这个title

07:27.300 --> 07:28.140
这个title当中

07:28.180 --> 07:29.020
你看有id

07:29.100 --> 07:29.620
show

07:29.620 --> 07:30.220
txt

07:30.220 --> 07:30.940
我们试一下

07:31.060 --> 07:32.620
点击title

07:32.620 --> 07:33.780
点完进去以后

07:33.780 --> 07:34.500
你看show

07:34.500 --> 07:35.580
txtile

07:35.580 --> 07:37.060
txt等等这些

07:37.060 --> 07:37.660
是不是

07:37.660 --> 07:39.020
你看这些都有

07:39.100 --> 07:40.220
当然有的一些参数

07:40.220 --> 07:40.820
它没有统计

07:40.820 --> 07:42.380
想这个id是没有的

07:42.380 --> 07:43.580
那可能用户就没有

07:43.580 --> 07:44.820
没有搜呗

07:44.820 --> 07:46.860
或者说人家根就没有统计

07:46.860 --> 07:47.900
可能就是统计了一些

07:47.900 --> 07:49.100
关键的一些东西

07:49.100 --> 07:49.540
行吧

07:49.540 --> 07:50.740
这个咱们不纠结

07:50.740 --> 07:51.460
行不行

07:51.460 --> 07:52.780
那我想说的是什么

07:52.780 --> 07:54.180
就是这个地方

07:54.180 --> 07:54.780
这个地方

07:54.780 --> 07:55.660
数据的结构

07:55.780 --> 07:57.380
完全跟我们这个地方

07:57.380 --> 07:58.100
配置项当中

07:58.220 --> 08:00.020
结构是一模一样的

08:00.020 --> 08:01.100
是一模一样的

08:01.100 --> 08:02.620
但是这个数据

08:02.700 --> 08:03.780
咱家根没法用

08:04.180 --> 08:04.700
没法用

08:05.580 --> 08:06.540
为什么没法用

08:06.620 --> 08:07.100
是这样的

08:07.140 --> 08:09.020
就是我们通过上节课

08:09.020 --> 08:10.140
大家应该都知道

08:10.140 --> 08:10.580
知道什么

08:10.580 --> 08:11.700
就是我们的数图

08:11.700 --> 08:12.420
这个吹

08:12.420 --> 08:14.260
我们上节课用到了这个数据

08:14.380 --> 08:16.060
咱点开吹data

08:16.060 --> 08:16.860
这个数据

08:17.380 --> 08:18.460
这个数图

08:19.100 --> 08:20.820
它对于这个数据的结构

08:20.820 --> 08:21.740
要求是这样的

08:21.740 --> 08:25.020
就是结构肯定是数的这种形状

08:25.020 --> 08:25.420
但是

08:26.140 --> 08:28.380
你看人有内幕属性

08:28.420 --> 08:29.700
有求准

08:29.740 --> 08:30.460
然后

08:30.460 --> 08:31.100
求准当中

08:31.300 --> 08:32.500
还有value

08:32.500 --> 08:33.020
对不对

08:33.020 --> 08:35.140
数据的值放在value当中

08:35.140 --> 08:36.220
然后数据的名字

08:36.340 --> 08:37.780
是放在这个内幕当中

08:37.780 --> 08:39.380
如果说你有紫节点的话

08:39.380 --> 08:40.860
你需要给上一个抽准

08:40.900 --> 08:41.980
把所有的紫节点

08:41.980 --> 08:43.820
都放在这个抽准当中

08:43.900 --> 08:44.620
明白吧

08:44.620 --> 08:47.700
这个才是人家要求的这么一种数据结构

08:47.740 --> 08:49.540
你比如说咱简单的回顾一下

08:49.540 --> 08:49.820
好吧

08:49.820 --> 08:51.380
然后这个地方的数据结构

08:51.380 --> 08:53.180
我们是压根是没法用的

08:53.220 --> 08:54.100
没法用的

08:54.140 --> 08:56.140
他要求的数据结构是这样的

08:56.780 --> 08:57.420
你比如说

08:57.420 --> 08:58.540
首先来上一个数组

08:58.540 --> 08:59.060
对不对

08:59.060 --> 08:59.580
这个里头

08:59.700 --> 09:01.020
可能有两条数据

09:01.180 --> 09:01.820
咱假设

09:02.020 --> 09:02.740
两条数据

09:02.740 --> 09:03.220
是不是

09:03.220 --> 09:03.940
演示一下

09:04.020 --> 09:05.100
比如说第一条数据

09:05.140 --> 09:06.580
它的一种数据结构

09:06.580 --> 09:07.660
到底是怎样的

09:07.660 --> 09:08.180
是这样的

09:08.180 --> 09:09.740
就是他首先有一个name

09:09.740 --> 09:10.140
是不是

09:10.140 --> 09:10.660
name

09:10.660 --> 09:11.900
我们就拿这个title

09:13.260 --> 09:14.780
我所写的这个

09:14.780 --> 09:17.220
是我们想要的一种数据结构

09:17.220 --> 09:17.820
换句话说

09:17.820 --> 09:20.100
就是人家要求的这种数据结构

09:20.100 --> 09:22.980
他才能够把你的图形给你展示出来

09:22.980 --> 09:23.300
好

09:23.300 --> 09:24.180
这是name

09:24.180 --> 09:24.700
对不对

09:24.700 --> 09:26.020
然后跟着什么

09:26.020 --> 09:27.580
跟着他有一个抽准

09:28.020 --> 09:29.060
因为这个name

09:29.060 --> 09:30.100
因为这个title当中

09:30.260 --> 09:32.260
他下面有一些紫元素

09:32.260 --> 09:34.140
所以说他需要来上一个抽准

09:34.220 --> 09:35.100
这个抽准当中

09:35.100 --> 09:35.780
咱们再来给

09:36.980 --> 09:38.020
再来上一个name

09:38.020 --> 09:38.780
然后这个name

09:38.780 --> 09:39.020
注意

09:39.020 --> 09:40.100
他是这么去写的

09:40.100 --> 09:41.220
title下的什么

09:41.900 --> 09:42.460
show

09:42.460 --> 09:43.420
title下的show

09:44.020 --> 09:45.300
这条属性是有的

09:45.420 --> 09:47.380
然后跟着他会有一个value

09:47.380 --> 09:48.140
这个value

09:48.140 --> 09:49.620
比如说1880

09:49.620 --> 09:50.140
随便给

09:50.300 --> 09:51.340
这是他的一个值

09:51.340 --> 09:52.940
也就表示现在title当中

09:53.100 --> 09:54.020
show这条属性

09:54.020 --> 09:56.300
被查询了1884

09:56.700 --> 09:57.420
明白吗

09:57.420 --> 10:00.460
这是一条完整的数据

10:00.460 --> 10:00.860
对不对

10:00.860 --> 10:01.420
完了之后

10:01.540 --> 10:02.580
他可能还有多个

10:02.580 --> 10:03.140
多个的话

10:03.140 --> 10:03.900
你看name

10:03.940 --> 10:04.620
咱们再来一个

10:05.140 --> 10:07.180
比如说title下的什么

10:07.460 --> 10:08.860
text style

10:09.060 --> 10:09.420
好

10:09.420 --> 10:09.820
注意

10:09.820 --> 10:10.980
这个text style

10:10.980 --> 10:12.700
人家还有止节点

10:12.700 --> 10:13.020
是不是

10:13.020 --> 10:13.620
那怎么办

10:13.620 --> 10:14.180
抽准

10:14.860 --> 10:15.260
继续来

10:15.260 --> 10:17.500
然后在这个里头再来

10:18.500 --> 10:19.260
对象是不是

10:19.260 --> 10:20.100
然后这个name

10:20.100 --> 10:20.700
一定要注意

10:20.700 --> 10:21.180
这个name

10:21.180 --> 10:21.780
怎么去表示

10:22.180 --> 10:25.420
title下的text style

10:25.420 --> 10:26.660
下边的这个什么

10:26.860 --> 10:27.420
color

10:27.580 --> 10:28.100
好

10:28.100 --> 10:28.860
这条属性

10:28.900 --> 10:30.100
人家统计出来一个值

10:30.100 --> 10:30.940
这个值是多少

10:30.940 --> 10:32.100
比如说599

10:32.820 --> 10:33.340
行吧

10:33.340 --> 10:33.780
可以吧

10:33.860 --> 10:34.660
然后这个里头

10:34.660 --> 10:36.700
比如说他有很多个抽准

10:36.700 --> 10:37.660
很多个

10:37.660 --> 10:38.540
这个紫元素

10:38.540 --> 10:38.980
是不是

10:38.980 --> 10:39.780
那这个紫元素

10:39.780 --> 10:40.900
咱们在这就不写了

10:40.900 --> 10:41.740
点点点

10:41.740 --> 10:42.460
点点点

10:42.460 --> 10:42.860
好不好

10:42.860 --> 10:43.660
点点点

10:43.660 --> 10:44.500
就ok了

10:44.500 --> 10:45.820
你看这个抽准当中

10:46.100 --> 10:46.940
这是一条属性

10:46.940 --> 10:47.220
然后

10:47.220 --> 10:48.780
这是第二条

10:48.900 --> 10:49.860
第二条数据

10:49.860 --> 10:51.500
然后这个里边也有很多

10:51.500 --> 10:53.500
我们用点点点去代替他

10:54.260 --> 10:55.140
明白吗

10:55.140 --> 10:56.140
这个能明白吧

10:56.140 --> 10:56.580
好

10:56.580 --> 10:57.700
这个是不是说

10:57.700 --> 10:58.860
我的第一条

10:58.860 --> 11:00.500
第一条就是关于title

11:00.500 --> 11:01.900
他所对应的一个数据

11:01.900 --> 11:02.260
是吧

11:02.260 --> 11:03.420
那接着我们再来一条

11:03.700 --> 11:04.900
来两条就够了

11:04.900 --> 11:05.980
那第二条

11:05.980 --> 11:07.340
比如说我们再举一个例子

11:07.340 --> 11:08.380
这个内幕叫什么

11:08.380 --> 11:09.340
叫Legend的

11:10.620 --> 11:11.140
图粒

11:11.140 --> 11:11.580
是不是

11:11.580 --> 11:11.820
好

11:11.820 --> 11:12.180
图粒

11:12.180 --> 11:12.940
然后图粒

11:12.940 --> 11:15.820
肯定是有很多的一些紫元素

11:16.020 --> 11:16.820
这是一个帽

11:16.820 --> 11:17.300
好吗

11:17.980 --> 11:18.660
紫节点

11:18.660 --> 11:18.940
是不是

11:18.940 --> 11:19.420
紫节点

11:19.420 --> 11:21.020
比如说来上一个

11:21.340 --> 11:22.020
内幕

11:22.020 --> 11:22.660
这个内幕

11:22.660 --> 11:23.620
给上一个

11:24.220 --> 11:25.620
Legend的点点什么

11:25.620 --> 11:26.340
Type

11:26.340 --> 11:26.740
Type

11:26.740 --> 11:27.260
是不是

11:27.260 --> 11:28.460
然后这个Type

11:28.460 --> 11:29.340
他有一个值

11:29.340 --> 11:30.180
就是一个Value

11:30.180 --> 11:31.380
这个Value234

11:31.380 --> 11:32.380
随便给

11:32.380 --> 11:33.380
然后继续往下

11:33.740 --> 11:34.500
这是第一个

11:34.500 --> 11:34.980
是不是

11:34.980 --> 11:35.940
然后第二个

11:35.940 --> 11:37.860
Legend的

11:39.790 --> 11:41.070
Legend的下边

11:41.070 --> 11:43.070
给上一个Type

11:43.070 --> 11:43.710
Style

11:44.390 --> 11:45.630
他也有这条属性

11:45.630 --> 11:46.430
有这条属性

11:46.430 --> 11:46.950
是不是

11:46.950 --> 11:47.390
好

11:47.390 --> 11:48.350
然后

11:48.350 --> 11:49.390
这条属性

11:49.390 --> 11:50.670
人家有紫节点

11:50.670 --> 11:51.390
那就是

11:51.910 --> 11:52.510
抽准

11:53.830 --> 11:55.030
然后在这个抽准当中

11:55.030 --> 11:56.190
我们给上一个对象

11:57.190 --> 11:58.710
那这个内幕的值是什么

11:59.630 --> 12:01.590
Legend的点Type

12:02.190 --> 12:03.310
Style下边的

12:03.310 --> 12:05.470
比如说FountSize这个字

12:05.470 --> 12:06.110
行吗

12:06.110 --> 12:07.590
然后他统计出来了

12:07.590 --> 12:08.830
一个点击的次数

12:08.830 --> 12:10.510
是3008

12:10.790 --> 12:11.590
3008

12:11.590 --> 12:11.990
OK

12:11.990 --> 12:12.510
行了

12:12.510 --> 12:14.030
我们写到这就够了

12:14.030 --> 12:14.510
够了

12:14.510 --> 12:15.070
行不行

12:15.070 --> 12:17.070
然后比如说他里头还有别的

12:17.070 --> 12:18.070
那点点点

12:18.070 --> 12:18.550
是不是

12:18.550 --> 12:20.030
然后以及这个抽准当中

12:20.030 --> 12:21.150
还有一些别的

12:21.150 --> 12:22.030
那点点点

12:22.030 --> 12:22.670
就OK了

12:22.670 --> 12:23.110
行吗

12:23.110 --> 12:24.350
以及我们的数据

12:24.350 --> 12:26.390
现在仅仅是统计了两条

12:26.390 --> 12:27.270
有很多条

12:27.270 --> 12:27.750
是不是

12:27.750 --> 12:28.430
点点点

12:29.030 --> 12:29.350
行

12:29.350 --> 12:30.470
我就这么去表示了

12:30.470 --> 12:31.070
那行

12:31.070 --> 12:31.870
这样的话

12:31.870 --> 12:32.990
这种数据结构

12:33.030 --> 12:34.310
才是咱们想要的

12:35.030 --> 12:35.830
换句话说

12:35.830 --> 12:38.110
只有你是这种数据结构

12:38.110 --> 12:39.470
它的图形

12:39.470 --> 12:41.510
才能够正确的显示

12:42.670 --> 12:43.550
那我们来看一下

12:43.550 --> 12:45.030
这是咱们获取到的数据

12:45.030 --> 12:45.750
不是这

12:46.190 --> 12:46.670
在这

12:48.710 --> 12:50.270
这是咱们获取到的

12:50.270 --> 12:51.790
请求到的数据

12:51.790 --> 12:53.630
跟它完全是两码事

12:54.150 --> 12:55.110
两码事

12:55.110 --> 12:55.950
明白吗

12:55.950 --> 12:57.590
那我们来看一下

12:57.590 --> 12:59.150
这个里头他统计的是啥

12:59.150 --> 12:59.950
是这样的

12:59.950 --> 13:00.750
很简单

13:00.750 --> 13:02.710
他统计了就是这个数值

13:02.790 --> 13:04.510
也就是说查询的一个次数

13:04.510 --> 13:05.910
你比如说X走

13:05.910 --> 13:06.630
X走当中

13:06.630 --> 13:08.630
这个X's labor

13:08.630 --> 13:09.150
是不是

13:09.150 --> 13:09.350
好

13:09.350 --> 13:10.790
它下面的这条属性

13:10.790 --> 13:11.870
那这条属性之后

13:11.870 --> 13:13.710
它里头肯定有很多的紫元素

13:13.710 --> 13:14.150
那OK

13:14.150 --> 13:15.430
照着人家的格式往下写

13:15.430 --> 13:16.910
写完之后

13:16.910 --> 13:17.270
注意

13:17.670 --> 13:19.190
这里头会出现大量的

13:19.190 --> 13:20.470
一个这条K

13:20.830 --> 13:22.230
Dollar一个Count

13:22.510 --> 13:23.430
这个东西是什么

13:23.430 --> 13:24.950
就是现在这条属性

13:24.950 --> 13:26.630
它对应了一个查询的次数

13:27.230 --> 13:29.750
这给的是一个2534

13:29.750 --> 13:31.590
就表示现在这个X's labor

13:31.870 --> 13:34.590
它被查询了25344

13:34.590 --> 13:36.150
然后继续往下写

13:36.150 --> 13:36.670
是不是

13:36.670 --> 13:38.070
那这条参数查询多少

13:38.070 --> 13:38.870
444

13:39.870 --> 13:41.310
这个就是咱们请求到的

13:41.310 --> 13:42.630
一个数据的格式

13:42.630 --> 13:45.350
它里头主要是给了一个什么的数值

13:45.350 --> 13:47.030
那你说这种数据格式

13:47.030 --> 13:48.350
我们没有办法去用

13:48.350 --> 13:49.830
我们需要把它换成什么

13:49.830 --> 13:51.470
换成这种数据格式

13:51.470 --> 13:53.070
才能够使用

13:53.070 --> 13:53.790
明白吧

13:53.790 --> 13:54.950
这个就是咱们

13:54.950 --> 13:56.630
要讲的第一个部分

13:56.630 --> 13:57.590
然后这个部分

13:57.590 --> 13:59.990
就是用来转换数据格式的

14:00.910 --> 14:02.310
转换数据格式的

14:02.310 --> 14:03.430
那转换数据格式

14:03.430 --> 14:04.030
怎么去转换

14:04.030 --> 14:06.390
我们就需要去写上一个方法

14:06.390 --> 14:07.350
去转换它了

14:07.350 --> 14:07.910
好不好

14:07.910 --> 14:08.750
所以接下来

14:08.750 --> 14:10.150
咱们需要去花一些时间

14:10.150 --> 14:11.190
来介绍一下

14:11.190 --> 14:13.790
我们转换的数据格式的方式

14:13.790 --> 14:14.950
该如何去写

14:14.950 --> 14:16.350
这个函数该如何去写

14:16.350 --> 14:17.230
OK

14:18.630 --> 14:19.230
好

14:19.590 --> 14:20.070
在这儿

14:20.070 --> 14:21.190
给上一个Faction

14:21.470 --> 14:23.270
那这个Faction是这样的

14:23.270 --> 14:24.430
我们给上一个名字

14:26.270 --> 14:27.030
convert

14:28.030 --> 14:28.550
好

14:28.990 --> 14:29.870
那这个方法

14:29.870 --> 14:31.990
就是用来转换什么数据的

14:31.990 --> 14:32.910
那先别急

14:32.910 --> 14:34.110
我们先来看一下

14:34.110 --> 14:34.910
首先

14:34.910 --> 14:36.030
咱们先来说一下

14:36.030 --> 14:36.910
这个数据

14:36.910 --> 14:37.990
它是嵌套的

14:37.990 --> 14:38.230
是不是

14:39.230 --> 14:39.750
你看

14:39.750 --> 14:40.310
这个数据

14:40.310 --> 14:41.590
它必然是嵌套的

14:41.590 --> 14:43.270
就跟我们这块的数据

14:43.310 --> 14:44.390
这块的结构

14:44.390 --> 14:45.550
是一模一样的

14:45.550 --> 14:46.310
一模一样的

14:46.310 --> 14:46.990
都一样

14:46.990 --> 14:48.590
所以我们在这儿

14:48.590 --> 14:50.830
要实现这个数据格式化

14:50.830 --> 14:52.870
转换成这种形式的话

14:53.190 --> 14:54.710
就需要用到一个东西

14:54.710 --> 14:55.070
是什么

14:55.670 --> 14:56.550
抵规

14:56.830 --> 14:57.670
这个就是

14:57.670 --> 14:58.670
我想要讲的

14:58.670 --> 14:59.310
抵规

14:59.310 --> 14:59.990
明白吧

14:59.990 --> 15:00.430
好

15:00.430 --> 15:00.990
也就是说

15:00.990 --> 15:01.350
现在

15:01.390 --> 15:02.550
其实我需要去

15:02.550 --> 15:03.830
通过抵规的方式

15:03.910 --> 15:04.830
把这种结构

15:04.830 --> 15:05.670
给它转成

15:05.670 --> 15:06.070
转成什么

15:06.070 --> 15:07.350
转成这种结构

15:07.350 --> 15:08.510
转成这种结构

15:09.110 --> 15:10.510
所以说到这个

15:10.510 --> 15:11.190
抵规的话

15:11.190 --> 15:11.910
然后这个东西

15:12.030 --> 15:13.830
其实在我们的基础课当中

15:13.830 --> 15:14.990
是有讲过的

15:14.990 --> 15:15.710
然后这个东西

15:15.710 --> 15:17.230
是稍微有一些难度的

15:17.230 --> 15:17.870
咱们在这儿

15:17.870 --> 15:18.750
就实践一下

15:18.750 --> 15:19.310
好不好

15:19.310 --> 15:20.550
借着这个机会

15:20.670 --> 15:22.350
就跟大家去实践一下

15:22.350 --> 15:23.110
看这个抵规

15:23.230 --> 15:24.310
该如何去用

15:24.310 --> 15:25.070
行不行

15:25.070 --> 15:26.230
那先来说一下

15:26.270 --> 15:26.870
这个抵规

15:26.870 --> 15:27.390
是不是

15:27.390 --> 15:28.110
那抵规

15:28.110 --> 15:29.270
它其实就是函数

15:29.270 --> 15:30.670
自己调自己

15:30.950 --> 15:31.790
写完之后

15:31.790 --> 15:33.190
其实这个抵规的函数

15:33.470 --> 15:35.270
代码量倒是非常之少

15:35.270 --> 15:36.790
也就那么几行代码

15:36.790 --> 15:37.910
但是理解起来

15:37.910 --> 15:38.670
我给你想

15:38.710 --> 15:40.070
可费死老尽了

15:40.070 --> 15:41.190
它不好理解

15:41.590 --> 15:42.670
会非常的绕

15:42.670 --> 15:43.110
而且

15:43.150 --> 15:43.870
这个逻辑性

15:43.870 --> 15:45.510
是特别的强的

15:45.950 --> 15:46.510
那怎么办

15:46.510 --> 15:48.470
就只能多看

15:48.470 --> 15:49.510
并多写

15:49.510 --> 15:50.550
次数多了之后

15:50.870 --> 15:52.390
你就能够理解了

15:52.390 --> 15:53.350
能够理解了

15:53.350 --> 15:53.870
行吗

15:53.870 --> 15:54.550
然后

15:54.550 --> 15:55.910
我写的这个方法

15:56.030 --> 15:57.830
跟官方的这个例子

15:57.830 --> 15:59.310
人家给出的这个方法

15:59.950 --> 16:00.830
是不一样的

16:00.830 --> 16:03.390
我把他的方法进行了改进

16:03.390 --> 16:03.830
然后

16:03.830 --> 16:06.590
就是在人家官方的这个方法

16:06.910 --> 16:08.870
外边去套了一个壳

16:09.270 --> 16:10.070
不要慌

16:10.070 --> 16:11.350
那这个壳

16:11.350 --> 16:13.790
它是用来获取结果的

16:14.030 --> 16:15.230
也就是说

16:15.230 --> 16:18.710
我其实只是把数据结果的获取方式

16:18.950 --> 16:20.430
给它改进了一下

16:20.430 --> 16:21.910
那咱们就解释一下

16:21.910 --> 16:22.510
行不行

16:22.510 --> 16:23.950
那比如说这个方法

16:23.950 --> 16:25.430
那官方的写法

16:25.430 --> 16:26.110
是这样的

16:27.270 --> 16:28.230
source

16:28.510 --> 16:29.230
第一个参数

16:29.230 --> 16:30.110
第二个参数

16:30.110 --> 16:30.790
target

16:30.790 --> 16:32.310
然后第三个参数

16:32.310 --> 16:33.910
是basepass

16:33.910 --> 16:34.830
basepass

16:34.830 --> 16:35.390
好

16:35.390 --> 16:37.790
这是官方给出的这么一个方法

16:37.790 --> 16:39.310
它的函数

16:39.310 --> 16:40.750
需要去接收三个参数

16:40.750 --> 16:42.310
然后接收三个参数之后

16:42.310 --> 16:43.070
接下来

16:43.070 --> 16:45.550
这里头人家一顿猛如虎的操作

16:45.550 --> 16:45.950
是不是

16:45.950 --> 16:47.790
我们现在先给上点点点

16:47.790 --> 16:48.030
好

16:48.030 --> 16:48.950
这个不重点

16:48.950 --> 16:49.510
不重要

16:49.510 --> 16:49.750
是不是

16:49.750 --> 16:51.590
那接下来咱们说一下

16:51.590 --> 16:53.630
那这个方法如何去用呢

16:53.630 --> 16:54.550
那是这样的

16:54.670 --> 16:55.750
声明一个变量

16:55.750 --> 16:56.230
这个变量

16:56.230 --> 16:57.950
比如说叫一个new date

17:00.230 --> 17:01.350
等上一个空数组

17:01.350 --> 17:03.110
然后这个空数组怎么去用呢

17:03.110 --> 17:04.390
直接去调这个方法

17:04.390 --> 17:05.230
调这个方法

17:05.230 --> 17:06.230
然后这个方法当中

17:07.070 --> 17:07.750
第一个参数

17:07.750 --> 17:09.030
传的就是什么呢

17:09.030 --> 17:11.430
传的就是我们通过这个请求

17:11.430 --> 17:12.790
拿过来的这个数据

17:12.790 --> 17:14.790
把这个名字放到这

17:14.790 --> 17:15.190
data

17:15.190 --> 17:15.710
对吧

17:15.710 --> 17:16.870
第二个参数是啥

17:16.870 --> 17:17.630
就是它

17:17.630 --> 17:18.990
然后第三个参数

17:18.990 --> 17:20.030
在第一次的时候

17:20.030 --> 17:21.070
默认是一个空

17:21.070 --> 17:21.790
就ok了

17:21.790 --> 17:22.870
这样的话

17:22.870 --> 17:23.910
写完之后

17:23.910 --> 17:24.750
也就是说

17:24.750 --> 17:26.270
这个方法一顿操作

17:26.350 --> 17:27.430
操作完成之后

17:27.430 --> 17:28.830
它会把这个数据

17:28.830 --> 17:30.630
就是转换之后的数据

17:30.630 --> 17:31.350
丢给谁

17:31.350 --> 17:33.070
丢给这个new date

17:33.070 --> 17:33.910
换句话说

17:33.910 --> 17:34.590
我们

17:35.390 --> 17:36.830
调完这个方法之后

17:36.830 --> 17:38.430
这个new date当中

17:38.430 --> 17:41.350
它其实就已经有数据了

17:41.350 --> 17:42.870
那这个数据是啥呢

17:42.870 --> 17:44.190
就是这个地方

17:44.190 --> 17:45.270
这种格式

17:45.270 --> 17:45.910
懂吧

17:45.910 --> 17:46.710
就是这种格式

17:46.710 --> 17:47.190
ok

17:47.190 --> 17:49.910
这个是人家官方的这种写法

17:50.910 --> 17:52.350
然后我再来说一下

17:52.350 --> 17:53.750
我的这种写法

17:53.750 --> 17:55.190
我的这种写法

17:55.350 --> 17:56.510
就给它加了一个壳

17:56.510 --> 17:56.990
是不是

17:56.990 --> 17:58.550
那这个壳是怎么去加的

17:58.550 --> 17:59.030
是这样的

17:59.030 --> 17:59.510
就是

18:00.750 --> 18:01.350
这种方式

18:01.470 --> 18:02.990
感觉不太好

18:02.990 --> 18:04.470
反正我自己感觉不太好

18:04.470 --> 18:05.710
我们一般情况下

18:05.710 --> 18:06.070
你比如说

18:06.070 --> 18:06.710
这个函数

18:06.750 --> 18:08.470
它是用来处理某一个东西

18:08.470 --> 18:08.950
是不是

18:08.950 --> 18:09.990
一顿的操作

18:09.990 --> 18:11.110
那操作完成

18:11.110 --> 18:12.910
往往咱是怎么去用的

18:12.910 --> 18:14.390
往往我们是这么去用的

18:14.390 --> 18:15.630
就是生命一个变量

18:15.630 --> 18:16.150
是不是

18:16.150 --> 18:16.710
v a

18:16.710 --> 18:17.710
一个new date

18:17.710 --> 18:18.430
等于什么呢

18:18.430 --> 18:20.230
等于直接去调这个对象

18:20.230 --> 18:20.590
不是

18:20.590 --> 18:21.910
直接去调这个方法

18:21.910 --> 18:23.430
然后这个方法

18:23.470 --> 18:25.630
就是你把你操作之后的结果

18:25.630 --> 18:26.630
作为一个返回值

18:26.630 --> 18:27.230
丢给我

18:27.230 --> 18:28.350
那我生命一个变量

18:28.350 --> 18:28.790
变量

18:28.790 --> 18:29.630
去接收

18:29.630 --> 18:30.510
是不是就行了

18:30.510 --> 18:31.350
所以就是

18:31.350 --> 18:34.470
我把这个改成了这种形式

18:34.470 --> 18:35.190
明白吧

18:35.190 --> 18:36.510
那改成这个形式之后

18:36.510 --> 18:37.910
就是在调用的时候

18:37.910 --> 18:39.590
只需要去传什么

18:39.590 --> 18:40.670
传上一个纸

18:40.670 --> 18:41.830
我先把它注释掉

18:41.830 --> 18:42.870
传上一个参数

18:46.500 --> 18:47.220
注释掉

18:47.220 --> 18:48.460
传上一个参数

18:48.460 --> 18:49.860
然后这个参数就是说

18:49.860 --> 18:50.740
原数据

18:50.740 --> 18:52.580
就是咱们请求过来的这个数据

18:52.580 --> 18:54.420
那传完这个参数之后

18:54.740 --> 18:56.060
你里头一顿操作

18:56.060 --> 18:56.980
操作完成之后

18:56.980 --> 18:57.820
那ok

18:57.820 --> 18:59.820
我的new date就能够接收了

18:59.820 --> 19:00.940
接收完成之后

19:01.100 --> 19:01.580
接下来

19:01.580 --> 19:02.940
我的new date当中

19:02.940 --> 19:04.660
就有数据了

19:04.660 --> 19:05.580
明白吧

19:05.580 --> 19:07.740
所以这个就是我套了一个壳

19:07.740 --> 19:08.620
套了一个壳

19:08.620 --> 19:10.420
就是想用这种方式

19:10.420 --> 19:11.820
去接收数据

19:11.820 --> 19:12.220
好

19:12.220 --> 19:13.740
那这两种方式

19:13.740 --> 19:16.020
其实他们

19:16.020 --> 19:17.020
我的这种方式

19:17.020 --> 19:18.500
就是套了一个壳

19:18.500 --> 19:19.380
套了一个壳

19:19.380 --> 19:20.380
核心的一些东西

19:20.380 --> 19:23.700
还是用的是人家里头的内容

19:23.700 --> 19:24.380
懂吗

19:24.420 --> 19:25.540
所以这两种

19:25.540 --> 19:27.060
只有那么一丁点的不同

19:27.060 --> 19:27.460
到时候

19:27.460 --> 19:29.300
大家自己去选择

19:29.300 --> 19:29.940
就行了

19:29.940 --> 19:30.660
好不好

19:30.660 --> 19:31.900
然后接下来

19:31.900 --> 19:33.300
我需要去说一下

19:33.300 --> 19:34.980
我的这种方式

19:34.980 --> 19:36.060
它需要去用到什么

19:36.060 --> 19:37.420
用到b包

19:38.420 --> 19:39.620
用到b包

19:39.620 --> 19:40.460
为什么呢

19:40.460 --> 19:41.420
来解释一下

19:42.780 --> 19:43.380
我们说过

19:43.380 --> 19:44.300
整体的功能

19:44.300 --> 19:47.380
咱是需要通过地规去实现的

19:47.380 --> 19:48.660
地规去实现的

19:48.660 --> 19:50.900
那这个地规到底是怎么去实现的呢

19:50.900 --> 19:52.180
其实是这样的

19:52.180 --> 19:53.820
就是他们里头的结构

19:53.820 --> 19:54.980
其实都是一样的

19:54.980 --> 19:55.780
一个对象当中

19:55.780 --> 19:56.660
有一个纸

19:56.660 --> 19:57.180
对不对

19:57.180 --> 19:57.580
好

19:57.580 --> 19:59.380
那其实就是通过地规

19:59.540 --> 20:01.220
一层一层往里边去找

20:01.220 --> 20:03.140
直到找到你的最深处

20:03.140 --> 20:05.140
然后找到的最深处之后

20:05.420 --> 20:06.220
这一条数据

20:06.420 --> 20:07.980
然后通过一顿操作

20:08.220 --> 20:08.980
给他处理了

20:08.980 --> 20:10.100
给他隔世化了

20:10.100 --> 20:10.660
是不是

20:10.660 --> 20:11.540
隔世化之后

20:12.100 --> 20:12.540
OK

20:12.540 --> 20:13.260
那这条数据

20:13.260 --> 20:14.540
我是不是处理完了

20:14.540 --> 20:15.300
处理完之后

20:15.300 --> 20:16.300
你需要存一下

20:17.220 --> 20:17.900
所以说

20:17.900 --> 20:19.740
你就需要每一次处理完成之后

20:19.740 --> 20:21.900
把处理完成之后的数据

20:21.900 --> 20:23.380
也就是正确的一个结果

20:23.420 --> 20:24.460
给他存起来

20:24.900 --> 20:25.820
给他存起来

20:26.180 --> 20:26.980
明白吧

20:26.980 --> 20:27.980
所以就是

20:27.980 --> 20:30.220
我在这就需要有一个变量

20:30.220 --> 20:30.900
干嘛

20:30.900 --> 20:32.140
始终的去

20:32.820 --> 20:34.300
存在内存当中

20:34.300 --> 20:38.740
然后用于干嘛存储我们隔世化之后的

20:38.740 --> 20:39.620
这个数据

20:40.500 --> 20:41.540
那好

20:41.540 --> 20:42.460
这是地规

20:42.460 --> 20:43.300
它的一个逻辑

20:43.300 --> 20:45.860
那但是由于就是这个地规

20:46.020 --> 20:47.500
它是要含述自己

20:47.500 --> 20:48.540
去调自己

20:48.540 --> 20:49.100
那比如说

20:49.100 --> 20:50.300
我们在这个含述当中

20:50.300 --> 20:51.660
在这声明了一个data

20:51.660 --> 20:52.180
是不是

20:52.180 --> 20:52.660
那好

20:52.700 --> 20:54.420
这个data就是用来存储

20:54.420 --> 20:56.180
我处理好的数据

20:56.340 --> 20:58.660
那当我地规一调用的时候

20:58.660 --> 21:00.060
就会有问题了

21:00.060 --> 21:00.620
什么问题

21:00.820 --> 21:02.420
地规就是自己调自己

21:02.420 --> 21:03.620
当第二次去调的话

21:03.620 --> 21:06.140
那这个data是不是就又清空了

21:06.140 --> 21:07.980
又变成了一个空数组了

21:07.980 --> 21:10.140
我上一次存到它里头的数据

21:10.140 --> 21:11.140
是不是就没有了

21:12.340 --> 21:13.540
说的高大上一点

21:13.540 --> 21:14.380
这个东西干嘛了

21:14.380 --> 21:16.500
被垃圾回收期日

21:16.500 --> 21:17.540
给它回收了

21:17.540 --> 21:18.180
对吧

21:18.180 --> 21:20.500
所以说咱们在这是不行的

21:20.500 --> 21:21.300
你这个变量

21:21.300 --> 21:22.260
没法在这声明

21:22.260 --> 21:24.100
因为地规它每次要调的话

21:24.100 --> 21:25.940
含述肯定从头到尾要执行

21:26.380 --> 21:26.940
那怎么办

21:26.940 --> 21:29.460
有两个办法

21:29.460 --> 21:30.060
第一个办法

21:30.060 --> 21:32.620
就是说把这个变量拿到外边去声明

21:32.620 --> 21:33.260
相对来说

21:33.260 --> 21:35.020
它是不是就是一个全聚变量

21:35.020 --> 21:35.740
这样的话

21:35.740 --> 21:37.420
是不是不是特别的好

21:37.420 --> 21:39.860
这个含述可能就是不是特别的独立

21:39.860 --> 21:41.860
它可能需要依赖于外边的东西

21:41.860 --> 21:42.420
另外一个

21:42.420 --> 21:43.060
这个东西

21:43.060 --> 21:43.700
相对来说

21:43.700 --> 21:44.740
是一个全聚变量

21:44.740 --> 21:47.220
咱们是不是不提倡这个全聚变量

21:47.260 --> 21:47.620
好

21:47.620 --> 21:48.700
所以说这种方法

21:48.700 --> 21:49.940
我把它淘汰了

21:49.940 --> 21:50.780
那怎么办

21:51.780 --> 21:53.060
用B包

21:53.060 --> 21:53.620
对吧

21:53.620 --> 21:55.860
所以就需要使用这个B包了

21:55.860 --> 21:57.500
那这个使用这个B包的话

21:57.500 --> 21:58.300
这个变量

21:58.300 --> 22:01.580
它不会被垃圾回收机制给它清除

22:01.580 --> 22:03.820
它会始终存到哪里了

22:03.820 --> 22:05.020
内存当中

22:05.020 --> 22:05.780
内存当中

22:05.780 --> 22:06.460
所以这个东西

22:06.580 --> 22:08.220
咱们就解决了这个问题

22:08.220 --> 22:08.780
懂吗

22:08.780 --> 22:09.860
所以这个就是

22:09.860 --> 22:10.980
我使用B包

22:10.980 --> 22:12.900
它的一个原因解释了一下

22:12.900 --> 22:15.660
所以这节课咱们又能够把B包

22:15.660 --> 22:16.260
实践一下

22:16.260 --> 22:18.540
又能够把地规实践一下

22:18.540 --> 22:19.220
所以这节课

22:19.220 --> 22:20.620
还是比较划算的

22:21.140 --> 22:21.580
好

22:21.580 --> 22:22.540
那继续吧

22:22.540 --> 22:23.620
咱们啰嗦了半天

22:23.620 --> 22:24.140
是不是

22:24.140 --> 22:24.820
然后接下来

22:24.980 --> 22:26.460
我们就来实现这个方法

22:26.460 --> 22:27.340
实现这个方法

22:27.340 --> 22:28.100
好不好

22:28.100 --> 22:28.860
那这个方法

22:29.100 --> 22:32.060
其实里头的代码倒不是很多

22:32.060 --> 22:33.820
但是理解起来确实有难度

22:34.060 --> 22:34.580
来

22:34.580 --> 22:35.740
咱慢慢的去写

22:36.260 --> 22:37.180
首先在这

22:37.460 --> 22:39.380
这是最外层的这么一个方法

22:39.380 --> 22:39.860
是不是

22:39.860 --> 22:40.660
这么一个方法

22:40.660 --> 22:41.260
完了之后

22:41.460 --> 22:42.340
最外层的方法

22:42.340 --> 22:43.260
里头怎么去写

22:43.420 --> 22:45.220
里头直接来写Return

22:46.580 --> 22:48.220
B包就是一个Return

22:48.220 --> 22:49.020
然后这个Return

22:49.020 --> 22:49.580
我先写

22:49.580 --> 22:50.220
写完之后

22:50.260 --> 22:51.380
跟大家去解释

22:51.380 --> 22:53.220
然后它是一个自执行的

22:53.220 --> 22:54.260
这么一个函数

22:54.540 --> 22:55.980
这个函数是这样的

22:56.140 --> 22:56.540
好

22:56.540 --> 22:57.700
它Inner

22:57.700 --> 22:58.020
对不对

22:58.020 --> 23:00.940
Inner里边接收了三个参数

23:00.940 --> 23:02.580
这三个参数就是它

23:02.820 --> 23:04.060
刚才这个地方

23:04.180 --> 23:06.220
留着就是在这用

23:06.220 --> 23:06.660
好

23:07.260 --> 23:07.980
Source

23:07.980 --> 23:09.220
然后这个

23:09.220 --> 23:10.580
注释干掉

23:10.700 --> 23:12.180
接收三个参数

23:13.580 --> 23:14.300
Source

23:14.300 --> 23:15.300
Target

23:15.300 --> 23:16.500
还有一个Base

23:16.500 --> 23:17.100
Pass

23:17.100 --> 23:18.260
然后这个外边

23:18.300 --> 23:20.460
只去接收一个Source

23:20.460 --> 23:20.900
就行了

23:20.900 --> 23:22.060
然后就是传

23:22.060 --> 23:22.460
传一个什么

23:22.740 --> 23:23.460
元数据

23:23.460 --> 23:24.140
就OK了

23:24.140 --> 23:24.740
然后在这

23:25.580 --> 23:27.700
这是一个自执行的函数

23:27.700 --> 23:28.140
对不对

23:28.140 --> 23:29.420
然后这是行参

23:29.420 --> 23:30.100
行参的话

23:30.100 --> 23:30.340
在这

23:30.340 --> 23:32.100
我需要去给时参

23:32.100 --> 23:33.060
那这个时参

23:33.140 --> 23:34.140
就是第一个

23:34.420 --> 23:35.100
给的是什么

23:35.460 --> 23:35.820
第一个

23:35.820 --> 23:37.340
就是我们Data

23:37.940 --> 23:38.820
明白吗

23:38.860 --> 23:39.660
就是什么

23:39.660 --> 23:43.020
就是从数据请求拿过来的

23:43.020 --> 23:43.460
那个什么

23:44.820 --> 23:45.620
这个地方

23:46.620 --> 23:47.660
不

23:47.660 --> 23:48.660
还错了

23:48.660 --> 23:49.980
数据请求的

23:49.980 --> 23:50.700
只在这

23:51.980 --> 23:52.620
这个东西

23:52.620 --> 23:53.300
我们调的时候

23:53.540 --> 23:54.620
给了一个Data

23:54.620 --> 23:55.300
这个地方

23:55.300 --> 23:56.260
不能给Data

23:56.260 --> 23:56.980
就是给这个

23:56.980 --> 23:58.060
用户传进来了

23:58.060 --> 23:58.780
这个东西

23:58.780 --> 23:59.300
好

23:59.300 --> 24:00.660
然后第二个参数

24:00.660 --> 24:01.300
Target

24:01.300 --> 24:02.820
Target在第一次的时候

24:02.940 --> 24:05.020
给上一个空数组

24:05.020 --> 24:06.260
然后第三个参数

24:06.260 --> 24:06.860
第一次的时候

24:06.980 --> 24:08.060
给的是什么

24:08.100 --> 24:08.860
空

24:08.860 --> 24:09.700
数不转

24:09.700 --> 24:10.460
数不转

24:10.460 --> 24:11.020
OK

24:11.020 --> 24:11.700
写到这了

24:11.700 --> 24:12.020
是不是

24:12.020 --> 24:13.540
我知道你们有很多的疑问

24:13.540 --> 24:14.100
对吧

24:14.100 --> 24:14.940
然后接下来

24:14.980 --> 24:15.820
咱们就挨个的

24:15.820 --> 24:17.180
把这里头所有的东西

24:17.180 --> 24:18.740
都跟大家去解释一下

24:18.740 --> 24:19.660
解释一下

24:20.300 --> 24:20.860
好

24:20.860 --> 24:21.860
这个

24:22.700 --> 24:24.060
这个函数是这样的

24:24.580 --> 24:25.060
首先

24:25.060 --> 24:25.660
先来说一下

24:25.660 --> 24:26.380
这个Return

24:26.660 --> 24:27.620
Return什么意思

24:28.340 --> 24:29.420
那这个Return

24:29.420 --> 24:30.940
它其实主要是为了什么

24:30.940 --> 24:32.580
我们这个函数调用之后

24:32.660 --> 24:33.780
是不是有一个结果

24:33.780 --> 24:35.220
你看在这要接收

24:35.220 --> 24:35.940
所以说

24:36.100 --> 24:37.740
你就需要来上一个Return

24:38.500 --> 24:39.220
明白吧

24:39.220 --> 24:40.540
你的数据最终

24:40.540 --> 24:41.620
你的数据在哪里

24:41.860 --> 24:43.540
就是这个函数执行之后

24:44.100 --> 24:45.220
函数执行之后

24:45.220 --> 24:46.220
它有一个结果

24:46.220 --> 24:47.220
然后这个结果

24:47.460 --> 24:48.540
咱直接通过Return

24:48.540 --> 24:49.540
给它丢出去

24:49.540 --> 24:50.300
丢出去之后

24:50.300 --> 24:50.900
在这

24:50.900 --> 24:52.460
你是不是就能够接收到了

24:52.540 --> 24:53.420
但是

24:54.020 --> 24:54.620
这个里头

24:54.620 --> 24:56.820
其实我们还需要再来上一个Return

24:58.730 --> 24:59.490
Return什么

24:59.490 --> 25:00.810
Return这个Target

25:01.490 --> 25:02.090
好

25:02.090 --> 25:03.810
为什么要Return这个Target

25:03.810 --> 25:04.530
是这样的

25:04.930 --> 25:06.290
我们的函数

25:06.290 --> 25:07.010
对不对

25:07.010 --> 25:08.530
这个函数是一个核心的函数

25:08.530 --> 25:09.450
它是用来处理

25:09.450 --> 25:10.930
这个数据格式化的

25:10.930 --> 25:12.050
那它处理完成之后

25:12.570 --> 25:13.570
结果放在哪里

25:13.810 --> 25:15.290
放在这个参数当中

25:15.690 --> 25:17.010
那放在这个参数当中

25:17.330 --> 25:18.490
你要Return

25:18.490 --> 25:19.290
是不是说

25:19.290 --> 25:20.330
这个东西必然

25:20.330 --> 25:21.570
它有一个结果

25:21.570 --> 25:22.650
有个结果是啥

25:22.650 --> 25:24.370
就是我处理好的

25:24.370 --> 25:25.650
这么一个值

25:26.370 --> 25:27.370
所以说在这

25:27.370 --> 25:29.130
是不是说函数执行完成之后

25:29.210 --> 25:30.130
它有一个值

25:30.130 --> 25:31.170
你才能Return

25:32.170 --> 25:32.930
值怎么来的

25:33.210 --> 25:34.850
其实还是通过这个Return

25:34.850 --> 25:36.010
给它丢出去了

25:36.050 --> 25:36.770
也换句话说

25:36.770 --> 25:38.090
这个Target处理完成之后

25:38.170 --> 25:39.810
就是一层在这先Return

25:39.810 --> 25:41.410
然后第二层在这再Return

25:41.410 --> 25:43.490
我在外边才能够接收

25:43.490 --> 25:44.410
接收到它

25:44.410 --> 25:44.970
懂吗

25:44.970 --> 25:46.050
这个就是Return

25:46.050 --> 25:46.850
它的一个作用

25:46.850 --> 25:48.210
Return它的一个作用

25:49.330 --> 25:49.770
好

25:49.770 --> 25:50.890
然后继续往下

25:51.210 --> 25:52.050
继续往下之后

25:52.210 --> 25:53.050
咱们来说一下

25:54.970 --> 25:56.450
自执行的函数

25:56.970 --> 25:59.250
那这个东西是一个自执行的函数

25:59.290 --> 26:00.570
自执行的函数的时候

26:00.770 --> 26:02.650
其实我们在这调完之后

26:02.730 --> 26:04.290
它是不是就能够被执行一次

26:05.090 --> 26:05.610
对不对

26:05.610 --> 26:06.410
被执行一次

26:06.730 --> 26:07.290
好

26:07.290 --> 26:09.610
然后这个东西被执行之后

26:09.930 --> 26:11.290
这个函数里头

26:11.290 --> 26:13.010
它核心的内容

26:13.050 --> 26:15.130
都是放在这个函数当中的

26:15.570 --> 26:16.490
函数当中的

26:16.490 --> 26:17.250
换句话说

26:17.250 --> 26:19.170
其实我们所有的逻辑的处理

26:19.170 --> 26:20.930
都是在这个函数当中

26:21.170 --> 26:22.530
都是在这个函数当中

26:22.530 --> 26:26.650
然后这个函数给了一个函数的名字

26:27.090 --> 26:29.330
给了一个函数的名字

26:29.330 --> 26:30.010
明白吗

26:30.010 --> 26:30.410
好

26:30.410 --> 26:32.130
这个名字是为什么

26:32.330 --> 26:34.690
其实这个函数核心的内容

26:34.690 --> 26:35.730
我们的地规

26:35.730 --> 26:38.010
其实也是需要去调用它的

26:38.010 --> 26:39.450
而我在这个地方

26:39.450 --> 26:40.730
给了一个Inner

26:40.730 --> 26:41.890
给了它一个名字

26:41.890 --> 26:44.530
就是为了能够在这个函数的内部

26:44.530 --> 26:46.250
能够自己调自己

26:46.250 --> 26:47.450
通过这个名字

26:47.450 --> 26:48.850
能够找到自己

26:48.850 --> 26:51.170
其实也就是为了地规

26:51.890 --> 26:53.210
也就是为了地规

26:53.210 --> 26:53.930
明白吧

26:53.930 --> 26:54.290
好

26:54.290 --> 26:56.090
这是函数解释了一下

26:56.090 --> 26:58.610
然后接下来就是这三个参数了

26:58.610 --> 26:59.490
这三个参数

26:59.490 --> 27:00.450
那函数

27:00.450 --> 27:02.050
它是接收三个参数

27:02.050 --> 27:02.970
分别解释一下

27:02.970 --> 27:04.530
这三个参数到底什么意思

27:04.530 --> 27:05.330
第一个参数

27:05.330 --> 27:07.010
就是一个原数据

27:07.010 --> 27:07.490
对不对

27:07.490 --> 27:08.130
原数据

27:08.130 --> 27:10.170
当然这个原数据指的是什么

27:10.330 --> 27:14.250
指的是我们在这调的时候

27:14.250 --> 27:15.530
传的这个字

27:15.530 --> 27:16.090
懂吗

27:16.090 --> 27:17.610
就是通过它接收到的

27:17.610 --> 27:18.490
那这个函数

27:18.490 --> 27:18.970
就是

27:18.970 --> 27:19.850
其实我们在这

27:19.850 --> 27:22.450
是人工的调了一次

27:22.450 --> 27:24.250
其实也是第一次

27:24.250 --> 27:25.770
第一次调

27:25.770 --> 27:26.490
调的时候

27:26.490 --> 27:26.970
好

27:26.970 --> 27:27.450
把什么

27:27.450 --> 27:29.970
我们请求过来的数据

27:29.970 --> 27:31.490
给它丢进去

27:31.490 --> 27:32.090
它在这

27:32.090 --> 27:34.010
是不是就接收到了

27:34.010 --> 27:35.890
接收到了

27:35.890 --> 27:38.330
这个参数非常重要

27:38.410 --> 27:39.610
地规

27:39.610 --> 27:41.130
完全依靠于这个参数

27:41.130 --> 27:42.330
以及它

27:42.330 --> 27:43.050
它俩

27:43.050 --> 27:43.690
懂吗

27:43.690 --> 27:44.650
好

27:44.650 --> 27:46.570
来解释一下这个参数

27:46.570 --> 27:47.850
这个参数是这样的

27:47.850 --> 27:51.050
就是我们要传的是一个原数据

27:51.050 --> 27:52.170
其实也就是说

27:52.170 --> 27:53.610
我需要对于这个数据

27:53.610 --> 27:55.610
它的结构进行一个处理

27:55.610 --> 27:56.330
明白吧

27:56.330 --> 27:57.610
对于它进行一个处理

27:57.610 --> 27:58.810
然后这个处理

27:58.810 --> 28:01.370
它之所以能够地规是这样的

28:01.370 --> 28:02.570
就是第一次的时候

28:02.570 --> 28:04.650
咱传的是不是这个对象

28:04.650 --> 28:05.370
整个对象

28:05.370 --> 28:05.770
是不是

28:05.770 --> 28:08.250
那这个对象处理完了

28:08.570 --> 28:10.970
接下来是不是要一层一层往里进

28:10.970 --> 28:12.730
那怎么进去

28:12.730 --> 28:14.410
这个就是

28:14.410 --> 28:16.330
当我第二次调这个参数的时候

28:16.330 --> 28:18.010
需要把这个值给它改了

28:18.010 --> 28:18.810
改成谁

28:18.810 --> 28:19.450
改成

28:19.450 --> 28:21.450
比如说我们的access labor

28:21.450 --> 28:22.170
它的一个值

28:22.170 --> 28:22.650
这样的话

28:22.650 --> 28:24.170
它是不是就能够进去了

28:24.170 --> 28:26.490
所以这个东西很关键

28:26.490 --> 28:27.770
第二次调用的时候

28:27.770 --> 28:28.490
需要去

28:28.490 --> 28:30.890
能够进入到这个字节点当中

28:30.890 --> 28:31.290
行吧

28:31.290 --> 28:32.970
一会咱们会详细的去说

28:32.970 --> 28:33.850
怎么进

28:33.850 --> 28:34.490
行吧

28:34.490 --> 28:34.890
好

28:34.890 --> 28:36.490
然后接下来它给它

28:37.450 --> 28:38.730
那这个target

28:38.730 --> 28:40.730
它是一个处理的一个结果

28:40.730 --> 28:41.770
处理的结果

28:41.770 --> 28:43.770
每一条数据处理完成之后

28:43.770 --> 28:45.450
都需要去放在这个里边

28:45.450 --> 28:47.930
然后最终咱把它整体的返回出去

28:47.930 --> 28:48.650
返回出去

28:48.650 --> 28:50.650
用户在外边是不是就能够接收到了

28:50.650 --> 28:51.850
接收到之后

28:51.850 --> 28:55.610
就是一个完整的处理之后的一个数据结构了

28:55.610 --> 28:55.930
好

28:55.930 --> 28:56.570
target

28:56.570 --> 28:58.490
第三个就是一个base pass

28:58.490 --> 28:59.690
那这个base pass

28:59.690 --> 29:01.530
它其实主要来处理什么

29:01.530 --> 29:02.810
处理这个地方

29:02.810 --> 29:03.610
你有没有发现

29:03.610 --> 29:05.930
其实我们的数据结构是这个样子的

29:06.810 --> 29:09.770
就是每一个数性

29:09.770 --> 29:11.130
它并不是孤零零

29:11.130 --> 29:14.090
只有它的数性名作为一个内幕

29:14.090 --> 29:16.650
它的内幕其实是有前缀的

29:16.650 --> 29:18.650
这个东西可以称之为这个数性

29:18.650 --> 29:19.450
它的一个路径

29:20.250 --> 29:21.530
那通过这个纸

29:21.530 --> 29:24.170
是不是就能够完整的找到这条数性

29:24.170 --> 29:26.010
它的一个所在的一个位置了

29:26.810 --> 29:27.450
懂吗

29:27.450 --> 29:28.810
这个是人家的要求

29:28.810 --> 29:30.810
所以说咱们要处理成这个样子

29:30.810 --> 29:32.010
那这个base pass

29:32.010 --> 29:34.170
其实就是用来处理它的

29:34.810 --> 29:35.770
处理它了

29:35.770 --> 29:36.410
行吧

29:36.570 --> 29:36.890
ok

29:36.890 --> 29:39.370
那这些参数咱们就解释了一遍

29:39.370 --> 29:40.090
解释了一遍

29:40.090 --> 29:40.730
好不好

29:40.730 --> 29:43.130
那然后在这还有一个就是说

29:43.130 --> 29:44.570
这个地方我们是实参

29:44.570 --> 29:45.530
是不是调用函数

29:45.530 --> 29:46.570
它的一个实参

29:46.570 --> 29:47.450
实参的时候

29:47.450 --> 29:48.650
默认我们传了

29:48.650 --> 29:49.850
第一次传的是什么呢

29:49.850 --> 29:50.410
是date

29:50.410 --> 29:51.130
这个date

29:51.130 --> 29:52.250
然后第二个值

29:52.250 --> 29:54.170
target就是一个数组

29:54.170 --> 29:54.970
空数组

29:54.970 --> 29:56.010
然后第三个

29:56.010 --> 29:57.450
第一次的时候没有路径

29:57.450 --> 29:58.810
我们就给上一个空

29:58.810 --> 29:59.930
就ok了

29:59.930 --> 30:00.650
行吧

30:00.650 --> 30:00.970
ok

30:01.850 --> 30:02.410
完了

30:02.410 --> 30:03.130
解释完了

30:03.130 --> 30:06.010
接下来咱们就要去实现这个方法了

30:06.010 --> 30:07.450
那来看一下这个方法

30:07.450 --> 30:09.210
该如何去写

30:09.210 --> 30:11.290
这个方法当中的这个代码

30:11.290 --> 30:12.250
确实并不多

30:12.250 --> 30:12.570
来

30:12.570 --> 30:13.610
首先第一个

30:13.610 --> 30:14.410
我们在这

30:14.810 --> 30:15.130
在这

30:16.490 --> 30:17.530
要怎么去写呢

30:17.530 --> 30:19.290
首先fold循环

30:19.290 --> 30:21.130
那这个fold循环使用的是什么呢

30:21.130 --> 30:22.090
in循环

30:22.090 --> 30:22.730
var

30:22.730 --> 30:23.450
一个什么呢

30:23.450 --> 30:24.490
生命一个k

30:24.490 --> 30:25.210
然后呢in

30:25.210 --> 30:25.850
in谁呢

30:25.850 --> 30:26.490
in this

30:26.490 --> 30:27.290
sorry

30:27.290 --> 30:27.770
这个东西

30:31.300 --> 30:31.700
in它

30:33.700 --> 30:36.500
那我为什么要使用这个fold in这个循环呢

30:36.580 --> 30:39.540
因为我们现在传进来的这个东西呢

30:39.540 --> 30:41.060
它是一个对象

30:41.060 --> 30:41.780
对象的话

30:41.780 --> 30:43.860
你要取到里头的每一条属性的话

30:43.860 --> 30:46.820
是不是必然要使用这个foldin循环啊

30:46.820 --> 30:47.460
对不对

30:47.460 --> 30:47.940
好

30:47.940 --> 30:48.820
foldin循环

30:48.820 --> 30:50.500
然后这个foldin循环

30:50.500 --> 30:51.780
接下来里头呢

30:51.780 --> 30:52.740
咱们的第一步

30:52.740 --> 30:54.660
生命一个变量这个变量pass

30:55.460 --> 30:56.420
等于什么呢

30:56.420 --> 30:59.060
这个变量就是用来处理这个basepass

30:59.060 --> 30:59.540
然后呢

30:59.540 --> 31:01.060
它的值是这样的

31:01.060 --> 31:03.940
问一下这个basepass这个值有没有

31:03.940 --> 31:05.860
如果说有的话怎么办啊

31:05.860 --> 31:06.420
有的话

31:06.420 --> 31:09.220
我让它再加上一个点

31:09.220 --> 31:09.700
然后呢

31:09.700 --> 31:11.060
再加上一个什么的k

31:12.900 --> 31:13.860
否则的话

31:13.860 --> 31:14.420
干嘛

31:14.420 --> 31:15.700
直接返回一个k

31:15.700 --> 31:16.260
ok

31:16.260 --> 31:17.460
解释一下

31:17.460 --> 31:18.180
那这句话

31:18.820 --> 31:20.020
什么意思呢

31:20.020 --> 31:21.060
是这样的

31:21.060 --> 31:21.380
来

31:21.380 --> 31:22.500
我们要说一下啊

31:22.500 --> 31:23.700
咱的这种拼法

31:23.700 --> 31:24.980
大家知道吗

31:24.980 --> 31:25.780
这种拼法呢

31:25.780 --> 31:26.660
其实就是说

31:26.660 --> 31:27.620
负极

31:27.620 --> 31:27.700
哎

31:27.700 --> 31:28.180
你看

31:28.180 --> 31:29.620
循环到第一层

31:29.620 --> 31:30.420
access

31:30.420 --> 31:31.060
先来

31:31.060 --> 31:31.620
对不对

31:31.620 --> 31:33.140
接下来循环到第二个

31:33.140 --> 31:34.900
是不是access点

31:34.900 --> 31:36.340
access labor

31:36.340 --> 31:38.020
然后循环到第三个show

31:38.020 --> 31:40.740
是不是access点access labor

31:40.740 --> 31:42.580
再点点售啊

31:42.580 --> 31:42.980
然后呢

31:42.980 --> 31:44.580
跟它是不是就一样了呀

31:44.580 --> 31:45.620
是不是就一样了

31:45.620 --> 31:46.580
所以这个地方呢

31:46.580 --> 31:48.900
就是我在第一次的时候呢

31:48.900 --> 31:50.180
是传了一个空

31:50.180 --> 31:50.740
懂吗

31:50.740 --> 31:51.940
传了一个空的话

31:51.940 --> 31:53.460
那就证明现在他

31:53.460 --> 31:55.540
他这个这个条件是不是不满足

31:55.540 --> 31:56.660
不满足就证明

31:56.660 --> 31:58.020
现在其实这个方法

31:58.020 --> 31:59.540
是第一次调用

31:59.540 --> 32:00.580
第一次调用的时候呢

32:00.580 --> 32:00.900
你看

32:00.900 --> 32:02.020
你循环的k

32:02.020 --> 32:03.300
k对应的是什么呢

32:03.300 --> 32:05.060
就是这个属性名

32:05.060 --> 32:06.260
就是属性名

32:06.260 --> 32:06.980
属性名

32:06.980 --> 32:08.260
所以第一次的时候呢

32:08.260 --> 32:10.020
直接就把第一个循环

32:10.020 --> 32:10.900
咱第一个循环呢

32:10.900 --> 32:13.220
是不是就是access

32:13.220 --> 32:15.140
把它放到前边

32:15.140 --> 32:15.940
明白吧

32:15.940 --> 32:16.500
好

32:16.500 --> 32:18.180
然后由于我们的这个东西呢

32:18.180 --> 32:19.300
要抵规是不是

32:19.300 --> 32:20.580
那第二次的时候呢

32:20.580 --> 32:22.820
是不是要加上第一次呀

32:22.820 --> 32:23.780
肯定吧

32:23.780 --> 32:24.900
第二次的时候呢

32:24.900 --> 32:26.740
我们循环到access labor

32:26.740 --> 32:28.740
那他前边必须要有一个access

32:28.740 --> 32:30.500
那这个access怎么办呢

32:30.500 --> 32:32.260
哎是不是第二次的时候呢

32:32.260 --> 32:34.020
bass pass啊

32:34.020 --> 32:35.780
他的值就有了

32:35.780 --> 32:36.260
是啥

32:36.260 --> 32:37.300
就是一个access

32:37.300 --> 32:38.900
那他是不是就满足了

32:38.900 --> 32:40.020
满足条件之后呢

32:40.020 --> 32:41.300
那是不是返回冒号

32:41.300 --> 32:42.740
前面的这个东西

32:42.740 --> 32:45.300
那是不是说access加上一个点

32:45.300 --> 32:47.300
加上第二次我循环到谁了

32:47.300 --> 32:48.820
循环到这个什么呢

32:48.820 --> 32:49.940
access labor了

32:49.940 --> 32:50.260
是不是

32:50.260 --> 32:52.740
所以第二次的k是不是就是access labor

32:52.740 --> 32:53.220
所以这呢

32:53.220 --> 32:57.220
是不是就变成了access.access labor

32:57.220 --> 32:57.860
懂了吧

32:57.860 --> 32:58.180
这个呢

32:58.180 --> 33:00.980
就是用来处理这个pass的啊

33:00.980 --> 33:01.620
好

33:01.620 --> 33:02.580
处理完pass了

33:02.580 --> 33:03.060
对不对

33:03.060 --> 33:03.460
然后呢

33:03.460 --> 33:04.020
接下来

33:04.020 --> 33:05.540
就是一个eave条件

33:07.220 --> 33:08.180
我先来写啊

33:08.180 --> 33:09.060
这个eave当中呢

33:09.060 --> 33:10.180
放上一个条件

33:10.180 --> 33:10.820
这个条件呢

33:10.820 --> 33:13.300
是k.indexoff

33:13.300 --> 33:13.860
off什么呢

33:13.860 --> 33:14.820
off这个东西

33:14.820 --> 33:15.860
一个到了服务

33:15.860 --> 33:16.500
然后呢

33:16.500 --> 33:16.980
如果说

33:16.980 --> 33:19.140
他的值等于等于什么呢

33:19.140 --> 33:20.260
负一

33:20.260 --> 33:20.980
好

33:20.980 --> 33:23.220
接下来咱要解释一下这个条件啊

33:23.220 --> 33:24.820
我先把这个格式画一下啊

33:24.820 --> 33:25.060
好

33:26.820 --> 33:28.260
解释一下这个条件

33:28.260 --> 33:30.020
那这个条件我跟你说啊

33:30.020 --> 33:31.860
这个eave很关键啊

33:31.860 --> 33:32.980
它的里边放的

33:32.980 --> 33:35.460
就是地规的一些核心的内容

33:35.460 --> 33:36.580
核心的内容

33:36.580 --> 33:37.700
都有哪些呢

33:37.700 --> 33:40.260
包括我们需要去创建一个节点

33:40.260 --> 33:41.380
这个节点是啥呢

33:41.380 --> 33:42.340
就是一个抽准

33:43.380 --> 33:44.580
然后放啊

33:44.580 --> 33:45.620
这个抽准当中呢

33:45.620 --> 33:46.340
放的是什么呢

33:46.340 --> 33:47.780
所有的紫节点

33:48.980 --> 33:49.780
这个抽准呢

33:49.780 --> 33:50.500
它是一个数组

33:50.500 --> 33:51.540
它就是一个对象

33:51.540 --> 33:52.100
是不是

33:52.100 --> 33:52.580
然后呢

33:52.580 --> 33:54.020
我们在这个里边

33:54.020 --> 33:55.300
不光要创建

33:55.300 --> 33:58.100
同时还要给他去添加内容

33:58.100 --> 33:59.140
添加内容

33:59.140 --> 34:00.420
然后接下来呢

34:00.420 --> 34:01.460
就是要什么啊

34:01.460 --> 34:03.380
继续调用函数了

34:03.380 --> 34:04.660
也就是地规了

34:04.660 --> 34:05.220
在这呢

34:05.220 --> 34:06.740
我们需要去再去调

34:06.740 --> 34:08.020
in的这个方法

34:09.540 --> 34:10.420
那这个里边

34:10.420 --> 34:11.940
确实没有几行的代码

34:12.900 --> 34:14.580
无非也就是三五行的代码

34:15.300 --> 34:15.940
但是呢

34:16.580 --> 34:18.500
你要理解起来的话

34:18.500 --> 34:20.420
确实是非常之难的啊

34:20.420 --> 34:22.500
它的逻辑确实很绕的啊

34:22.500 --> 34:22.980
行吧

34:22.980 --> 34:24.580
这个里头放的东西咱说了

34:24.580 --> 34:26.980
接下来要解释一下这个条件

34:26.980 --> 34:28.180
为什么所有的内容

34:28.180 --> 34:29.780
都要放在这个条件当中

34:30.500 --> 34:31.060
这个条件

34:31.060 --> 34:33.220
首先咱们先来看一下这个条件

34:33.220 --> 34:34.420
这个条件是这样的

34:34.420 --> 34:36.100
就是从这个k当中呢

34:36.100 --> 34:38.100
我去找找一个字符到哪

34:39.380 --> 34:41.380
等于哪一副一表啥意思呢

34:41.380 --> 34:44.020
就是没有找到这个字符

34:44.020 --> 34:44.180
啊

34:44.180 --> 34:45.140
我在这标一下吧

34:47.900 --> 34:50.700
这个条件成立说明

34:51.420 --> 34:54.060
在现在的啊

34:54.060 --> 34:55.420
在这个循环

34:55.980 --> 34:57.180
到的k

34:58.060 --> 34:59.340
这个啊

34:59.340 --> 35:00.140
直

35:00.140 --> 35:00.460
里

35:01.420 --> 35:02.540
k这条属性吗

35:03.660 --> 35:06.220
属性里没有找到

35:06.940 --> 35:07.420
算了

35:07.420 --> 35:07.980
这样吧

35:07.980 --> 35:09.820
就是这个条件成立说明

35:09.820 --> 35:10.860
循环到的

35:12.700 --> 35:15.900
这个k是不包含

35:18.200 --> 35:19.320
包含什么呢

35:19.320 --> 35:20.440
这个doller

35:21.560 --> 35:21.960
doller

35:22.760 --> 35:23.320
字符的

35:25.000 --> 35:25.560
来

35:25.560 --> 35:28.120
那这句话不包含这个doller有啥用呢

35:28.120 --> 35:29.880
我们还要看这个原数据

35:30.440 --> 35:30.840
来

35:31.000 --> 35:31.960
一有没有发现

35:31.960 --> 35:33.640
我们的doller是不是都有啊

35:33.640 --> 35:35.320
在counter的前边

35:35.320 --> 35:36.200
那这条属性

35:36.760 --> 35:37.640
啥意思呢

35:37.640 --> 35:38.520
这条属性

35:38.520 --> 35:39.480
这条属性呢

35:39.480 --> 35:40.680
我们解释过

35:40.680 --> 35:43.640
如果说我的这个k包含了一个doller符

35:43.640 --> 35:45.960
就证明现在我的这条属性

35:45.960 --> 35:47.480
所对应的是什么呢

35:47.480 --> 35:49.960
是一个真真正正的一个数据值

35:50.600 --> 35:51.480
数据值

35:51.480 --> 35:52.600
那这条属性

35:52.600 --> 35:54.600
我们需要让它展示在这个

35:55.160 --> 35:56.120
数据结构当中吗

35:56.680 --> 35:57.480
不需要

35:57.480 --> 35:58.760
我们要的是谁

35:58.840 --> 36:01.080
要的就是它对应的一个value值

36:02.520 --> 36:03.560
要的就是这个值

36:03.560 --> 36:04.360
但是这个值呢

36:04.360 --> 36:05.800
咱们一会再去处理它

36:05.800 --> 36:06.360
行不行

36:07.240 --> 36:07.960
这是其

36:08.520 --> 36:09.400
然后其二呢

36:10.120 --> 36:10.840
如果说

36:10.840 --> 36:12.200
这条属性啊

36:12.360 --> 36:14.360
它是孤零零的一条

36:14.920 --> 36:16.120
孤零零的一条

36:16.760 --> 36:17.400
也就说

36:17.400 --> 36:18.680
它没有兄弟

36:19.160 --> 36:20.120
没有兄弟节点

36:20.520 --> 36:21.560
那这个时候呢

36:21.560 --> 36:22.600
说明什么呢

36:23.080 --> 36:24.520
它的负节点

36:25.640 --> 36:27.640
没有字节点

36:28.840 --> 36:30.360
没有字节点的话

36:30.360 --> 36:31.320
那我问你

36:31.320 --> 36:32.120
刚才咱们说

36:32.120 --> 36:33.880
它里边要创建这个求准

36:33.880 --> 36:34.360
是不是

36:34.360 --> 36:35.000
那这个时候呢

36:35.000 --> 36:36.280
要不要创建求准呢

36:37.560 --> 36:38.200
这个时候

36:38.440 --> 36:39.240
要不要创建

36:39.320 --> 36:40.360
不需要创建吧

36:40.920 --> 36:41.400
对不对

36:41.400 --> 36:42.120
因为它压根

36:42.120 --> 36:43.560
它就没有字节点

36:43.640 --> 36:45.960
你是不需要去创建这个求准的

36:46.600 --> 36:48.120
那只有当这个属性

36:48.120 --> 36:49.880
它不包含这个doller符

36:50.280 --> 36:50.760
是不是

36:50.760 --> 36:51.400
这条属性

36:51.400 --> 36:53.000
它是不是就不包含doller符

36:53.320 --> 36:55.960
那它有没有负节点

36:55.960 --> 36:56.760
有

36:56.760 --> 36:58.760
它是不是就是一个字节点

36:59.320 --> 37:00.360
那相对来说

37:00.360 --> 37:02.200
当我循环到它的时候呢

37:02.200 --> 37:04.760
要不要去创建一个求准对象

37:05.480 --> 37:06.440
必须要吧

37:06.440 --> 37:07.000
你看

37:07.000 --> 37:08.120
它是字节点

37:08.120 --> 37:09.240
它是负节点

37:10.200 --> 37:11.240
它是负节点

37:11.240 --> 37:11.800
明白了吧

37:12.280 --> 37:12.680
好

37:12.680 --> 37:13.240
所以说呢

37:13.240 --> 37:14.200
咱们在这判断的

37:14.200 --> 37:14.920
就是这个意思

37:16.120 --> 37:17.320
那换句话说呢

37:17.320 --> 37:18.440
就是如果说

37:18.440 --> 37:20.600
现在咱查找到这个k呢

37:20.600 --> 37:21.720
它没有包含它

37:21.720 --> 37:22.840
其实也就是它

37:22.840 --> 37:23.640
或者说是它

37:23.640 --> 37:24.600
或者说是它

37:24.600 --> 37:25.480
那这个时候呢

37:25.560 --> 37:26.200
不是它

37:26.840 --> 37:27.160
这个

37:28.840 --> 37:29.640
这个时候呢

37:29.640 --> 37:30.280
说明

37:30.280 --> 37:32.680
我们需要去创建一个求准对象了

37:33.800 --> 37:35.560
要创建一个求准对象了

37:35.560 --> 37:36.200
明白吧

37:36.200 --> 37:37.080
怎么去创建呢

37:37.080 --> 37:37.720
在这呢

37:37.720 --> 37:38.280
它给它

37:39.000 --> 37:39.320
这个呢

37:39.320 --> 37:41.160
是不是就是咱们的目标一个对象啊

37:41.720 --> 37:43.960
所有的内容是不是都放在它里面

37:43.960 --> 37:45.320
所以我就给它的身上

37:45.320 --> 37:46.360
来上一个什么呢

37:46.360 --> 37:47.240
来上一个求准

37:49.160 --> 37:49.800
好

37:49.800 --> 37:50.760
然后这个求准呢

37:50.760 --> 37:51.560
只等于什么呢

37:51.560 --> 37:52.680
等于这个

37:54.040 --> 37:54.520
或者

37:55.160 --> 37:55.800
或者什么呢

37:55.800 --> 37:56.920
或者一个空对象

37:58.120 --> 37:59.000
空对象

37:59.000 --> 38:00.440
然后在这解释一下啊

38:01.400 --> 38:02.520
为什么这么去写呢

38:02.520 --> 38:03.000
是这样的

38:03.000 --> 38:04.920
就是我的target的出准

38:04.920 --> 38:05.400
是不是

38:05.400 --> 38:07.640
它其实是取自己或者说

38:07.640 --> 38:09.000
取上一个空

38:09.000 --> 38:10.600
那为什么是这样的呢

38:10.600 --> 38:11.880
是来解释一下

38:11.880 --> 38:12.520
是由于啊

38:12.520 --> 38:13.000
你看

38:13.000 --> 38:14.920
比如说我们循环循环到这个

38:14.920 --> 38:15.800
access labor

38:15.800 --> 38:17.640
循环到它的一个对象了

38:17.640 --> 38:18.200
它的值

38:18.200 --> 38:18.680
是不是

38:18.680 --> 38:19.160
那OK

38:19.160 --> 38:20.040
走到这之后呢

38:20.040 --> 38:20.840
这个show

38:20.840 --> 38:22.280
有没有包括这个dollof

38:22.280 --> 38:22.760
没有

38:22.760 --> 38:23.400
没有的话

38:23.480 --> 38:24.040
那你说

38:24.040 --> 38:25.960
它是不是它的止节点

38:25.960 --> 38:27.320
要不要创建

38:27.320 --> 38:28.200
求准呢

38:28.200 --> 38:29.160
必须要吧

38:29.160 --> 38:29.880
必须要创建

38:29.880 --> 38:31.160
所以走到这的时候呢

38:31.160 --> 38:32.520
要创建一个求准

38:32.520 --> 38:33.560
然后继续往下走

38:33.560 --> 38:33.960
哎

38:33.960 --> 38:35.240
又发现一个info

38:35.240 --> 38:37.240
它也没有包含这个dollof

38:37.240 --> 38:37.960
那问你

38:37.960 --> 38:40.120
它是不是也是人家的止节点

38:40.120 --> 38:41.080
那走到这的时候

38:41.080 --> 38:41.880
根据条件

38:41.880 --> 38:42.360
这个地方

38:42.360 --> 38:43.480
咱们都要创建

38:43.480 --> 38:45.240
那你说在这要不要创建

38:45.240 --> 38:46.760
也要创建一个求准

38:46.760 --> 38:47.480
那这样的话

38:47.480 --> 38:49.560
这个求准跟它创建的求准

38:49.560 --> 38:50.680
是不是就重合了呀

38:51.400 --> 38:52.920
都是它的止节点吧

38:52.920 --> 38:54.440
创建一个是不是就够了

38:54.440 --> 38:55.240
所以在这呢

38:55.240 --> 38:55.800
就是说

38:55.800 --> 38:57.640
当我创建一次之后呢

38:57.640 --> 38:59.160
第二次的时候呢

38:59.160 --> 38:59.880
我就看

38:59.880 --> 39:01.080
它有没有求准了

39:01.080 --> 39:02.920
有的话就用它本身

39:02.920 --> 39:03.960
如果说没有的话

39:03.960 --> 39:06.520
其实就是循环到第一次的时候呢

39:06.520 --> 39:08.440
循环到这个show的时候呢

39:08.440 --> 39:09.320
没有这个求准

39:09.320 --> 39:10.680
在这创建了

39:10.680 --> 39:12.280
循环到intel的时候呢

39:12.280 --> 39:13.560
其实已经有了

39:13.560 --> 39:14.360
有了的话

39:14.360 --> 39:18.040
就使用刚才所创建的那个求准

39:18.040 --> 39:18.680
懂了吧

39:18.680 --> 39:19.000
这个呢

39:19.000 --> 39:20.840
就是他给他的求准

39:22.120 --> 39:22.680
行嘞

39:22.760 --> 39:23.800
继续往下

39:23.800 --> 39:25.000
继续往下啊

39:25.000 --> 39:25.880
那现在呢

39:25.880 --> 39:27.640
止节点现在已经创建完了

39:30.100 --> 39:33.620
止节点对象容器

39:33.620 --> 39:34.100
容器吧

39:36.100 --> 39:37.300
容器对象啊

39:37.300 --> 39:37.700
好

39:37.700 --> 39:39.620
然后这个容器对象当中放的

39:39.620 --> 39:41.060
都是一些止节点啊

39:41.060 --> 39:41.380
行

39:41.380 --> 39:41.940
接下来

39:41.940 --> 39:42.420
接下来

39:43.140 --> 39:45.220
那这个止节点现在有了

39:45.220 --> 39:45.700
是不是

39:45.700 --> 39:46.660
止节点有了

39:46.660 --> 39:47.380
有了之后呢

39:47.380 --> 39:48.020
接下来

39:48.660 --> 39:50.180
那里头放啥呢

39:50.180 --> 39:51.060
这个里头

39:51.060 --> 39:51.620
对不对

39:51.620 --> 39:52.420
这里头放啥呢

39:52.420 --> 39:53.140
我们来看

39:53.220 --> 39:54.580
是放一个个对象

39:54.580 --> 39:55.460
一个个对象

39:56.820 --> 39:58.260
那一个个对象当中呢

39:58.260 --> 39:59.060
包含啥

39:59.060 --> 40:00.020
是不是一个name属性

40:00.020 --> 40:00.900
一个value属性啊

40:02.020 --> 40:02.820
对不对

40:02.820 --> 40:04.020
所以这里头呢

40:04.020 --> 40:05.300
我们往里头要C

40:05.300 --> 40:05.860
C啥

40:05.860 --> 40:07.140
你首先要C一个对象

40:08.020 --> 40:08.420
对不对

40:08.420 --> 40:08.820
所以说呢

40:08.820 --> 40:09.460
咱们在这呢

40:09.460 --> 40:10.900
就生命一个辩量

40:10.900 --> 40:11.940
vAR一个chart

40:12.660 --> 40:13.220
等于什么呢

40:13.220 --> 40:14.100
等于一个对象

40:14.100 --> 40:15.220
然后这个对象当中呢

40:15.220 --> 40:16.180
有两条属性

40:16.180 --> 40:16.580
一个呢

40:16.580 --> 40:17.620
是name是不是

40:17.620 --> 40:18.180
另外一个呢

40:18.180 --> 40:18.740
是什么呢

40:18.740 --> 40:19.780
value对不对

40:19.780 --> 40:20.100
好

40:20.100 --> 40:21.940
先这么来

40:21.940 --> 40:22.900
那给完这个对象

40:22.900 --> 40:23.940
当中呢

40:23.940 --> 40:24.980
这些值怎么给

40:24.980 --> 40:25.780
咱先不管

40:25.780 --> 40:26.260
是不是

40:26.260 --> 40:27.460
假设说这个对象

40:27.460 --> 40:28.500
值已经给对了

40:28.500 --> 40:29.300
给对了之后呢

40:29.300 --> 40:30.580
接下来怎么办啊

40:30.580 --> 40:30.980
是不是说

40:30.980 --> 40:32.980
你要把它添到这个筹准当中

40:32.980 --> 40:33.700
所以在这呢

40:33.700 --> 40:34.260
是不是说

40:34.260 --> 40:35.460
他给的点筹准

40:35.460 --> 40:36.260
应该干嘛呀

40:36.260 --> 40:36.660
push

40:37.700 --> 40:38.820
push啥呢

40:38.820 --> 40:39.140
是不是

40:39.140 --> 40:40.340
push这个chart

40:40.900 --> 40:42.340
刚才你所创建的

40:42.340 --> 40:43.540
这些字节点啊

40:43.540 --> 40:43.860
在这

40:46.500 --> 40:47.460
一个个

40:47.460 --> 40:48.660
字节点

40:48.660 --> 40:49.380
一个字

40:49.380 --> 40:50.020
字节点

40:50.020 --> 40:51.780
那这个逻辑没有问题吧

40:51.780 --> 40:52.180
对不对

40:52.180 --> 40:52.980
没有问题啊

40:52.980 --> 40:53.380
那

40:53.380 --> 40:54.020
然后接下来

40:54.020 --> 40:54.900
咱们就来说一下

40:54.900 --> 40:55.540
它里头的

40:55.540 --> 40:56.580
这两条属性的值

40:56.580 --> 40:57.540
应该怎么给

40:57.540 --> 40:58.980
先来看这个name

40:58.980 --> 41:00.180
那这个name

41:00.180 --> 41:01.140
怎么给呢

41:01.140 --> 41:01.780
其实

41:01.780 --> 41:02.420
这个name

41:02.420 --> 41:03.540
是不是就是这

41:03.540 --> 41:04.340
就这个东西

41:04.340 --> 41:06.260
那这个东西咱有没有处理啊

41:06.260 --> 41:08.100
是不是在这已经有处理了

41:08.100 --> 41:08.500
所以说

41:08.500 --> 41:09.060
这个name

41:09.060 --> 41:10.100
是不是就是一个pass呀

41:10.660 --> 41:11.140
对不对

41:11.140 --> 41:11.940
多么的简单

41:12.500 --> 41:13.060
是吧

41:13.060 --> 41:13.700
就是啊

41:13.700 --> 41:14.740
这个pass啊

41:14.740 --> 41:14.980
行

41:14.980 --> 41:17.300
他刚才咱们已经解释半天了啊

41:17.300 --> 41:18.100
嗯

41:18.100 --> 41:18.740
不会的同学

41:18.740 --> 41:19.460
再回顾一下

41:19.460 --> 41:20.100
行吧

41:20.100 --> 41:20.340
好

41:20.340 --> 41:21.780
然后再来说这个value

41:21.780 --> 41:22.820
那这个value的值

41:22.820 --> 41:23.940
应该怎么给呢

41:24.020 --> 41:24.580
这个value

41:24.580 --> 41:25.300
其实在这啊

41:25.300 --> 41:25.780
这个value

41:25.780 --> 41:26.980
我们给不上

41:26.980 --> 41:27.540
为什么呢

41:28.260 --> 41:29.300
这个value的值

41:29.300 --> 41:30.100
首先啊

41:30.100 --> 41:30.820
我们先来看

41:30.820 --> 41:32.260
它的值应该是啥

41:32.260 --> 41:33.060
这个value的值

41:33.060 --> 41:34.020
是不是应该就是这个

41:34.020 --> 41:35.140
dollofcounter

41:35.140 --> 41:35.700
对后

41:35.700 --> 41:37.540
它所对应的一个value值啊

41:38.260 --> 41:38.660
这个呢

41:38.660 --> 41:39.380
就是说

41:39.380 --> 41:42.420
它统计的这么一个查询的次数

41:42.420 --> 41:43.220
那我们的value

41:43.220 --> 41:44.180
就是要给的

41:44.180 --> 41:45.620
就是一个查询的次数

41:45.620 --> 41:46.580
但是我们在这呢

41:46.580 --> 41:47.780
其实是给不上的

41:47.780 --> 41:48.820
为什么给不上

41:48.820 --> 41:50.180
因为我们这个条件呢

41:50.180 --> 41:52.260
他压根就把这个dollof

41:52.260 --> 41:52.820
这个东西呢

41:52.820 --> 41:54.340
给他排除掉了

41:54.340 --> 41:55.460
给他排除掉了

41:55.460 --> 41:56.180
你有沒有发现

41:56.180 --> 41:56.500
就是说

41:56.500 --> 41:57.140
我们这个条件

41:57.140 --> 41:57.860
一满足的话

41:57.860 --> 41:58.820
是不是说

41:58.820 --> 42:00.020
循环的这个k呢

42:00.020 --> 42:00.980
是包含这个

42:00.980 --> 42:02.900
不包含这个dollof呢

42:02.900 --> 42:03.940
那也就是说

42:03.940 --> 42:06.020
但凡循环到他直接跳

42:06.740 --> 42:08.020
直接条件不满足

42:08.020 --> 42:10.340
那你说你在这能给value吗

42:10.340 --> 42:11.380
能给得上吗

42:11.380 --> 42:13.380
能取得着这个值吗

42:13.380 --> 42:14.740
是取不到的

42:14.740 --> 42:15.460
所以啊

42:15.460 --> 42:16.340
在这呢

42:16.340 --> 42:18.260
我们先不去处理这个value

42:19.060 --> 42:20.340
先去处理什么呢

42:20.340 --> 42:21.780
先去处理name

42:21.780 --> 42:22.740
那这个value呢

42:22.820 --> 42:24.660
我们放在下边再去处理

42:25.860 --> 42:26.500
明白吧

42:27.780 --> 42:28.100
行

42:28.740 --> 42:29.540
好嘞

42:29.540 --> 42:29.780
行

42:29.780 --> 42:30.500
那到这呢

42:30.500 --> 42:31.940
咱们这一点就说完了

42:31.940 --> 42:32.740
说完之后呢

42:32.740 --> 42:33.940
剩下最后一个

42:33.940 --> 42:36.100
这里头要做的最后一件事情了

42:36.100 --> 42:37.460
很重要的一件事情

42:37.460 --> 42:38.260
是什么事情呢

42:38.820 --> 42:39.300
地归

42:40.340 --> 42:41.060
哎地归

42:41.060 --> 42:41.780
那地归呢

42:41.780 --> 42:42.500
怎么去地归呢

42:42.500 --> 42:44.980
就是掉一下in哪这个方法

42:45.780 --> 42:47.060
掉一下这个方法

42:47.060 --> 42:48.260
那这个方法当中

42:48.260 --> 42:50.100
这个参数怎么给啊

42:50.100 --> 42:50.980
你不可能说

42:50.980 --> 42:52.500
跟第一次调用的参数

42:52.500 --> 42:53.460
一模一样吧

42:53.460 --> 42:55.220
那你地归个毛线

42:55.220 --> 42:56.180
有什么作用

42:56.180 --> 42:56.900
没啥作用

42:57.540 --> 42:58.020
对不对

42:58.020 --> 42:58.660
所以在这呢

42:58.660 --> 42:59.940
这个参数要改

42:59.940 --> 43:01.220
那这就说一下

43:01.220 --> 43:01.860
这个地归

43:01.860 --> 43:03.060
该怎么去地归

43:03.060 --> 43:03.620
是不是

43:03.620 --> 43:05.460
我们还得看这个数据啊

43:05.460 --> 43:06.660
看这个数据

43:06.660 --> 43:07.620
其实是这样的

43:07.620 --> 43:08.820
就是你看啊

43:08.820 --> 43:10.740
我第一次先去处理xs

43:10.740 --> 43:12.340
他对应的这个对象

43:12.340 --> 43:13.460
是不是这个里头

43:13.460 --> 43:13.940
好

43:13.940 --> 43:15.620
然后往里头找找到谁

43:15.620 --> 43:16.500
xs labor

43:16.500 --> 43:17.380
是不是找到他

43:17.380 --> 43:19.300
然后呢再找到xs line

43:19.300 --> 43:19.780
是不是

43:19.780 --> 43:20.580
因为你看在这

43:20.580 --> 43:21.780
我fold寻环

43:21.780 --> 43:22.580
fold硬寻环

43:22.580 --> 43:22.980
是不是

43:22.980 --> 43:23.860
那这个k呢

43:23.860 --> 43:24.740
这个sauce

43:24.740 --> 43:25.540
sauce

43:25.540 --> 43:26.180
是啥

43:26.180 --> 43:27.220
就是这个什么

43:27.220 --> 43:28.740
就是这个xs labor

43:28.740 --> 43:29.780
他的一个值

43:29.780 --> 43:30.820
就是这个对象

43:30.820 --> 43:32.020
那这个对象当中的k

43:32.020 --> 43:32.260
是不是

43:32.260 --> 43:32.660
他

43:32.660 --> 43:33.060
他

43:33.060 --> 43:33.460
他

43:33.460 --> 43:33.860
他

43:33.860 --> 43:34.420
他

43:34.420 --> 43:35.540
这些东西啊

43:35.540 --> 43:36.180
所以你看

43:36.180 --> 43:37.940
我fold寻环的时候呢

43:37.940 --> 43:39.140
那这个k对应的

43:39.140 --> 43:40.340
可不就是什么

43:40.340 --> 43:41.220
xs labor

43:41.220 --> 43:41.940
xs line

43:41.940 --> 43:43.140
以及这个dollocount

43:43.140 --> 43:45.140
bundlegap

43:45.140 --> 43:46.420
对应的就是这些东西

43:46.420 --> 43:46.900
对不对

43:46.900 --> 43:47.300
好

43:47.300 --> 43:49.220
那他寻环完一遍了

43:49.300 --> 43:51.220
寻环是不是就ok了

43:51.220 --> 43:51.940
那接下来

43:51.940 --> 43:53.860
到这条件满足之后呢

43:53.860 --> 43:55.140
也就是走到这

43:55.140 --> 43:56.980
发现这个xs labor呢

43:56.980 --> 43:58.740
他竟然还有

43:58.740 --> 43:59.940
紫节点

43:59.940 --> 44:01.460
那怎么办

44:01.460 --> 44:02.740
不要放过他

44:02.740 --> 44:05.780
我的寻环要先进到这个里头

44:05.780 --> 44:08.020
那你的寻环要进到这个里头

44:08.020 --> 44:10.420
那这个才是低规知道吗

44:10.420 --> 44:11.380
你只有进去之后呢

44:11.380 --> 44:13.140
才能找到最深处

44:13.140 --> 44:14.180
那进到这个里头

44:14.180 --> 44:15.300
怎么进到这个里头呢

44:15.300 --> 44:16.260
其实关键点

44:16.260 --> 44:18.980
不就在于这个sauce吗

44:18.980 --> 44:20.980
你把这个纸给他改成什么呢

44:20.980 --> 44:22.340
改成xs labor

44:22.340 --> 44:23.540
所对应的一个结果

44:23.540 --> 44:24.900
那你说这个follow寻环

44:24.900 --> 44:26.180
他里头的k对应的

44:26.180 --> 44:30.310
不就是他里头的这些东西吗

44:30.310 --> 44:31.110
明白吧

44:31.110 --> 44:32.150
所以说在这呢

44:32.150 --> 44:33.750
这个sauce应该是什么呢

44:33.750 --> 44:35.750
就是当我们寻环到这个k

44:35.750 --> 44:36.870
这个外部这个k了

44:36.870 --> 44:38.550
寻环到xs labor了

44:38.550 --> 44:39.350
接下来

44:39.350 --> 44:41.590
我要进到这个xs labor里边

44:41.590 --> 44:43.430
刚才寻环到xs

44:43.430 --> 44:45.430
那我要进到他的里边

44:45.430 --> 44:47.190
那他的结果怎么去取

44:47.190 --> 44:47.750
是不是

44:47.750 --> 44:48.550
这个东西

44:48.550 --> 44:50.790
下边的xs labor

44:50.790 --> 44:51.350
对不对

44:51.350 --> 44:52.310
所以在这呢

44:52.310 --> 44:53.510
这个纸我们要改

44:53.510 --> 44:55.670
改成什么呢

44:55.670 --> 44:56.790
是不是应该改成

44:56.790 --> 44:59.430
他的一个k啊

44:59.430 --> 45:01.030
对不对

45:01.030 --> 45:01.990
是不是他的k

45:01.990 --> 45:03.270
也就是说现在

45:03.270 --> 45:05.590
这个纸变成一个xs labor了

45:05.590 --> 45:06.470
xs labor

45:06.470 --> 45:07.990
然后这个sauce当中呢

45:07.990 --> 45:09.350
那xs

45:09.350 --> 45:10.630
是刚才我们给的

45:10.630 --> 45:12.630
就是第一次寻环这个sauce

45:12.630 --> 45:15.030
是不是就是xs他的这个对象

45:15.030 --> 45:16.550
那我想进入到这个里头

45:16.550 --> 45:17.430
是不是这个对象

45:17.430 --> 45:19.350
下边给上这么一个k

45:19.350 --> 45:21.270
那这个对象是sauce

45:21.270 --> 45:23.030
然后呢k呢

45:23.030 --> 45:23.830
对吧

45:23.830 --> 45:24.230
好

45:24.230 --> 45:25.750
这样的话是不是就进入到

45:25.750 --> 45:27.590
他的这个对象当中了

45:27.590 --> 45:29.270
这样的话才能够抵规

45:29.270 --> 45:29.910
懂吗

45:29.910 --> 45:30.390
抵规呢

45:30.390 --> 45:31.750
就是说你不能说

45:31.750 --> 45:32.390
这个条件

45:32.390 --> 45:32.870
这个参数

45:32.870 --> 45:34.870
你一直给跟外边一模一样

45:34.870 --> 45:37.350
这样的话就没有意义了啊

45:37.350 --> 45:37.830
好

45:37.830 --> 45:39.190
当我们给上这个纸之后呢

45:39.190 --> 45:40.230
接下来第二个

45:40.230 --> 45:41.110
target

45:41.110 --> 45:41.430
哎

45:41.430 --> 45:42.230
target

45:42.230 --> 45:42.870
target

45:42.870 --> 45:43.830
我们要想一想

45:43.830 --> 45:44.710
这个target

45:44.710 --> 45:45.590
里边要放

45:45.590 --> 45:46.310
确准

45:46.310 --> 45:46.950
对不对

45:46.950 --> 45:48.550
target要放确准

45:48.550 --> 45:49.510
那是不是说

45:49.510 --> 45:52.310
那这个对象是啥呢

45:52.310 --> 45:53.590
是不是这个东西

45:53.590 --> 45:54.950
也就是第一次的时候呢

45:54.950 --> 45:57.110
你看我们寻环的是xs

45:57.110 --> 45:59.590
xs假设说xs对应的是这个

45:59.590 --> 46:00.070
是不是

46:00.070 --> 46:01.270
那他的一个确准

46:01.270 --> 46:02.150
这个里边是不是

46:02.150 --> 46:03.430
这个内幕应该是啥

46:03.430 --> 46:06.070
这个内幕是不是应该是xs labor

46:06.070 --> 46:07.590
是不是这个字啊

46:07.590 --> 46:08.150
然后呢

46:08.150 --> 46:09.590
这个内幕是啥呢

46:09.590 --> 46:11.670
假设说他是一个什么的xs labor

46:11.670 --> 46:12.630
把它关一下啊

46:12.630 --> 46:13.830
xs line

46:13.830 --> 46:15.670
对不对

46:15.670 --> 46:16.310
好

46:16.390 --> 46:17.350
那接下来

46:17.350 --> 46:18.310
你会发现

46:18.310 --> 46:20.070
这个xs labor里边呢

46:20.070 --> 46:21.270
还有紫节点

46:21.270 --> 46:23.190
那紫节点应该放在哪里了

46:23.190 --> 46:24.870
是不是应该在这来上一个

46:25.990 --> 46:27.270
抽准啊

46:27.270 --> 46:28.230
对不对

46:28.230 --> 46:29.430
那换句话说就是

46:29.430 --> 46:31.030
我的抽准在哪里创建了

46:31.030 --> 46:32.070
是不是在这儿

46:32.070 --> 46:32.790
创建了

46:32.790 --> 46:33.430
所以说呢

46:33.430 --> 46:34.950
这个前坠这个target

46:35.910 --> 46:36.630
target

46:36.630 --> 46:38.070
是不是应该变成什么呢

46:38.070 --> 46:38.630
哎

46:38.630 --> 46:39.990
我的刚才那个东西啊

46:39.990 --> 46:40.870
变成他了

46:40.870 --> 46:41.750
是不是变成他了呀

46:43.270 --> 46:43.830
对不对

46:43.830 --> 46:44.950
变成他

46:45.030 --> 46:47.670
你才能往里边去添加这个抽准

46:47.670 --> 46:48.230
懂不懂

46:48.230 --> 46:50.150
那这个他指的是啥呀

46:50.150 --> 46:51.830
是不是上一次抽准当中

46:51.830 --> 46:53.910
我们创建的这个chow的呀

46:54.870 --> 46:55.750
这个chow的指的

46:55.750 --> 46:57.270
是不是就是一个个紫节点

46:58.390 --> 47:00.470
是不是就是一个个紫节点

47:00.470 --> 47:01.990
相对于上一次来说呢

47:01.990 --> 47:03.350
那chow的是不是就是他呀

47:04.470 --> 47:05.030
对不对

47:05.030 --> 47:05.510
所以说呢

47:05.510 --> 47:05.990
在这呢

47:05.990 --> 47:07.510
我们的值应该给上什么呢

47:07.510 --> 47:08.630
给上chow的

47:10.310 --> 47:11.670
给上一个chow的

47:11.670 --> 47:12.870
明白吧

47:12.870 --> 47:13.750
好

47:13.750 --> 47:14.150
然后呢

47:14.150 --> 47:14.710
那继续啊

47:14.710 --> 47:15.190
这个地方

47:15.190 --> 47:16.790
我在山调山调

47:16.790 --> 47:17.190
哎

47:17.750 --> 47:18.870
咱撤销一下吧

47:25.770 --> 47:26.250
好

47:26.250 --> 47:27.050
然后这块呢

47:27.050 --> 47:28.170
我们要给上什么呢

47:28.170 --> 47:29.610
给上这个chow的

47:29.610 --> 47:30.250
明白吧

47:30.250 --> 47:31.210
这个chow的对应呢

47:31.210 --> 47:32.570
就是我们第一次创建的

47:32.570 --> 47:33.530
这个紫节点

47:33.530 --> 47:34.410
然后第二次情怀

47:34.410 --> 47:36.010
就是在这个紫节点当中呢

47:36.010 --> 47:37.370
咱们要去创建什么呢

47:37.370 --> 47:38.250
创建这个抽准

47:38.250 --> 47:38.730
所以说呢

47:38.730 --> 47:40.250
这个target必须要变

47:40.250 --> 47:40.970
变成什么呢

47:40.970 --> 47:41.690
变成这个

47:41.690 --> 47:42.010
这个呢

47:42.010 --> 47:44.650
就是上一次所创建的那个chow的

47:44.650 --> 47:45.290
就是他

47:45.290 --> 47:46.010
好吧

47:46.010 --> 47:46.410
好

47:46.410 --> 47:47.610
那第三个参数呢

47:47.610 --> 47:48.410
第三个参数

47:48.410 --> 47:50.170
直接把我们这儿

47:50.730 --> 47:52.090
处理完成的路径

47:52.090 --> 47:52.970
给他丢进来

47:53.610 --> 47:54.810
丢进来也就是说

47:54.810 --> 47:56.090
这次我们处理的是

47:56.090 --> 47:58.010
legend点点什么呢

47:58.010 --> 47:58.330
啊

47:58.330 --> 47:59.370
我们在这说吧

47:59.370 --> 48:00.890
是不是access

48:00.890 --> 48:02.410
access labor

48:02.410 --> 48:03.770
这是我们这次处理的

48:03.770 --> 48:04.090
然后呢

48:04.090 --> 48:05.130
把它丢进去之后呢

48:05.130 --> 48:05.690
也就是

48:05.690 --> 48:06.970
当循环进入他

48:06.970 --> 48:08.410
到他的里边的时候呢

48:08.410 --> 48:08.890
是不是

48:08.890 --> 48:09.610
这个东西呢

48:09.610 --> 48:11.290
已经作为一个前坠了

48:11.290 --> 48:12.410
然后在下边

48:12.410 --> 48:13.050
比如说chow

48:13.050 --> 48:13.690
chow的话

48:13.690 --> 48:14.250
access

48:14.250 --> 48:15.530
access点label

48:15.530 --> 48:16.170
点什么呢

48:16.170 --> 48:16.730
点chow

48:17.370 --> 48:18.090
懂了吧

48:18.250 --> 48:19.610
就是这么神奇啊

48:19.610 --> 48:21.050
这就是地规

48:21.050 --> 48:21.530
pass

48:21.530 --> 48:22.090
传进去

48:22.810 --> 48:23.450
行吧

48:23.450 --> 48:24.570
那这个地规呢

48:24.570 --> 48:25.290
这么去解释

48:25.290 --> 48:27.050
估计大家也能够听得明白

48:27.050 --> 48:27.450
好不好

48:28.170 --> 48:28.490
行吧

48:28.490 --> 48:30.010
那写到这之后呢

48:30.010 --> 48:32.890
其实我们已经实现了90%了

48:32.890 --> 48:32.970
啊

48:32.970 --> 48:33.930
90%了

48:33.930 --> 48:35.290
实现90%之后呢

48:35.290 --> 48:36.650
其实现在这个里头

48:36.650 --> 48:38.170
已经有数据了

48:38.170 --> 48:39.050
有数据了

48:39.050 --> 48:40.570
那我们来看一下

48:40.570 --> 48:41.770
打开这个页面

48:41.770 --> 48:42.010
走

48:43.130 --> 48:43.850
控制台

48:44.730 --> 48:45.610
刷新一下

48:45.610 --> 48:46.330
这个时候呢

48:46.330 --> 48:46.970
有没有发现

48:47.530 --> 48:48.010
是不是

48:48.010 --> 48:49.130
26

48:49.130 --> 48:50.010
点开

48:50.010 --> 48:50.970
点开

48:50.970 --> 48:52.330
然后咱们再来看

48:52.330 --> 48:52.570
哎

48:52.570 --> 48:53.290
这个数据呢

48:53.290 --> 48:54.970
是不是就是咱们想要的

48:54.970 --> 48:56.010
你看进来之后呢

48:56.010 --> 48:56.810
数组当中呢

48:56.810 --> 48:57.690
放的一个对象

48:57.690 --> 48:57.930
是不是

48:57.930 --> 48:58.570
这个对象呢

48:58.570 --> 48:59.370
是access

48:59.370 --> 49:00.410
那access当中呢

49:00.410 --> 49:01.850
是不是有求准有止节点

49:01.850 --> 49:02.810
我们点开

49:02.810 --> 49:04.010
点开这个止节点

49:04.010 --> 49:05.770
总共有21个止节点

49:05.770 --> 49:06.570
点来进

49:06.570 --> 49:07.530
点开进来之后呢

49:07.530 --> 49:09.210
你看access labor

49:09.210 --> 49:10.330
access lan

49:10.330 --> 49:11.450
那access labor

49:11.450 --> 49:12.810
它也有止节点

49:12.810 --> 49:13.450
总共有7个

49:13.450 --> 49:15.050
你看继续往里边点

49:15.050 --> 49:16.170
是不是有7个

49:16.170 --> 49:16.490
哎

49:16.490 --> 49:17.210
7个之后呢

49:17.210 --> 49:18.570
这些都没有止节点了

49:18.570 --> 49:19.130
到这

49:19.130 --> 49:20.090
access掉

49:20.090 --> 49:21.050
又有止节点

49:21.050 --> 49:21.690
你看进来

49:22.330 --> 49:22.890
对不对

49:22.890 --> 49:23.210
好

49:23.210 --> 49:23.850
抽准

49:23.850 --> 49:24.170
对不对

49:24.170 --> 49:25.370
一层一层往里边进

49:25.370 --> 49:25.930
那这个呢

49:25.930 --> 49:26.570
其实就是

49:26.570 --> 49:28.090
由帝规实现的

49:28.090 --> 49:29.690
就是由帝规实现的

49:29.690 --> 49:30.730
我们其实在这呢

49:30.730 --> 49:31.530
处理的就是说

49:32.090 --> 49:32.570
第一个呢

49:32.570 --> 49:33.930
就是target

49:33.930 --> 49:34.570
target

49:34.570 --> 49:35.610
target给他身上去

49:35.610 --> 49:36.810
添加一个抽准

49:36.810 --> 49:37.850
添加了一个抽准

49:37.850 --> 49:39.050
就是D0次的时候呢

49:39.050 --> 49:40.090
我们点开这个啊

49:40.090 --> 49:41.050
D0次的时候

49:41.050 --> 49:41.450
这个呢

49:41.450 --> 49:42.410
是一个target

49:42.410 --> 49:43.050
target呢

49:43.050 --> 49:44.570
给他身上来上一个抽准

49:44.570 --> 49:45.530
但是这个抽准呢

49:45.610 --> 49:46.890
并不是所有都添加

49:46.890 --> 49:47.210
你看

49:47.210 --> 49:48.250
他就没有

49:48.250 --> 49:49.050
是因为什么呢

49:49.050 --> 49:50.170
因为这个color

49:50.170 --> 49:51.210
他里边呢

49:51.210 --> 49:52.570
有一个doller

49:52.570 --> 49:53.530
所以说呢

49:53.530 --> 49:54.090
doller

49:54.090 --> 49:55.930
是不是就直接就跳过去了

49:55.930 --> 49:57.050
那他的抽准

49:57.050 --> 49:58.010
还创建吗

49:58.010 --> 49:59.050
不创建了

49:59.050 --> 50:00.170
那不创建啊

50:00.170 --> 50:02.410
那他就是一个光棍一条背

50:02.410 --> 50:03.370
然后接下来呢

50:03.370 --> 50:04.650
他给他创建之后呢

50:04.650 --> 50:06.410
target里边放的

50:06.410 --> 50:06.730
这啊

50:06.730 --> 50:06.970
不

50:06.970 --> 50:07.370
抽准

50:07.370 --> 50:08.570
抽准创建之后呢

50:08.570 --> 50:10.010
抽准里边放的是什么呢

50:10.010 --> 50:11.370
一个个止节点

50:11.370 --> 50:12.570
一个个止节点

50:12.570 --> 50:13.530
这个止节点

50:13.530 --> 50:14.010
是不是

50:14.090 --> 50:15.770
我们只处理了一个name属性

50:15.770 --> 50:16.490
所以说你看

50:16.490 --> 50:17.450
这只有name

50:17.450 --> 50:18.330
并没有value

50:18.330 --> 50:18.650
对不对

50:18.650 --> 50:19.930
value不着急啊

50:19.930 --> 50:20.810
一会再去说

50:20.810 --> 50:22.090
name是不是就有了

50:22.090 --> 50:23.210
有了之后呢

50:23.210 --> 50:24.490
把它添到哪里呢

50:24.490 --> 50:26.170
添到这个抽准当中了

50:26.170 --> 50:27.530
接下来这是第一次

50:27.530 --> 50:27.930
对不对

50:27.930 --> 50:28.890
我们的第一次

50:28.890 --> 50:30.410
第一次创建了这么多

50:30.410 --> 50:32.410
第二次就开往里边进了

50:32.410 --> 50:33.210
往里边进了

50:33.210 --> 50:33.930
明白吧

50:33.930 --> 50:34.730
那进的时候

50:34.730 --> 50:35.770
顺序是这样的

50:35.770 --> 50:37.130
首先先进他

50:37.130 --> 50:38.810
他里边的全部进完了

50:38.810 --> 50:39.690
一层一层

50:39.690 --> 50:40.970
往里边进你知道吧

50:40.970 --> 50:41.450
好

50:41.450 --> 50:43.610
进到这个d0个d0个d0个

50:43.690 --> 50:45.050
d0个d0个

50:45.050 --> 50:46.410
假设说都有字元素

50:46.410 --> 50:47.450
他一直往里进

50:47.450 --> 50:48.170
进完之后

50:48.170 --> 50:50.810
d0个d0个的第1个

50:50.810 --> 50:51.770
然后进他

50:51.770 --> 50:53.130
然后d1个进完之后

50:53.130 --> 50:54.730
d0个d0个的第2个

50:54.730 --> 50:55.130
好

50:55.130 --> 50:56.410
这一坨全部进完了

50:56.410 --> 50:57.370
是不是就出去了

50:57.370 --> 50:58.250
跳出到这了

50:58.250 --> 50:58.810
好

50:58.810 --> 50:59.370
然后呢

50:59.370 --> 51:01.370
这块就开始进他的第1个

51:01.370 --> 51:02.250
进这

51:02.250 --> 51:02.970
明白吧

51:02.970 --> 51:03.930
这个就是地规

51:03.930 --> 51:06.890
就是出入站跟出站

51:06.890 --> 51:09.370
那么这个详细的内容呢

51:09.370 --> 51:11.530
咱们在这就不解释了

51:11.530 --> 51:12.650
你们回顾一下

51:12.650 --> 51:13.850
之前的课程就行了

51:13.850 --> 51:14.490
好嘞

51:14.490 --> 51:15.130
那在这呢

51:15.130 --> 51:16.410
咱就不啰嗦了

51:16.410 --> 51:17.290
不啰嗦了

51:17.290 --> 51:18.010
那好

51:18.010 --> 51:18.490
这块呢

51:18.490 --> 51:19.690
就算是已经完成了

51:19.690 --> 51:20.490
完成了之后呢

51:20.490 --> 51:22.410
但是现在这个数据当中呢

51:22.410 --> 51:24.490
它仅仅是只有一个内部属性

51:24.490 --> 51:26.810
那内部属性光有是不够的

51:26.810 --> 51:28.010
我们还缺了一个什么呢

51:28.010 --> 51:29.450
还缺了一个value

51:29.450 --> 51:29.930
对不对

51:29.930 --> 51:30.730
那这个value呢

51:30.730 --> 51:31.690
刚才咱们在这呢

51:31.690 --> 51:32.490
是没法处理的

51:32.490 --> 51:33.370
因为这个条件

51:33.370 --> 51:35.530
直接把这个dol count

51:35.530 --> 51:37.290
直接给他筛选掉了

51:37.290 --> 51:37.770
所以说呢

51:37.770 --> 51:38.570
没法给

51:38.570 --> 51:40.890
没法给怎么办呢

51:40.890 --> 51:42.330
我们需要找一个地方

51:42.330 --> 51:43.610
去添加数据

51:43.610 --> 51:46.170
那这个地方要选择在哪里呢

51:46.170 --> 51:48.170
选择在哪里呢

51:48.170 --> 51:49.370
选择在

51:49.370 --> 51:50.490
这里

51:50.490 --> 51:51.290
这个地方

51:51.290 --> 51:51.930
这个地方呢

51:51.930 --> 51:52.810
是在哪里呢

51:52.810 --> 51:56.250
是还是在我的Inner这个faction内

51:56.250 --> 51:58.490
然后但是是在fold循环的外部

51:58.490 --> 52:00.170
在return的前边

52:00.170 --> 52:03.450
在这我们去添加数据

52:03.450 --> 52:04.730
在这里

52:04.730 --> 52:05.770
添加数据

52:05.770 --> 52:06.250
ok

52:06.250 --> 52:07.130
添加数据啊

52:07.130 --> 52:08.970
那添加数据放在这个地方

52:08.970 --> 52:10.570
添加是

52:10.570 --> 52:11.130
为什么呢

52:11.130 --> 52:11.770
是这样的

52:11.770 --> 52:12.730
你看啊

52:12.730 --> 52:13.770
我们的数据是不是

52:13.770 --> 52:14.810
其实也是

52:14.810 --> 52:16.890
那我的这个函数走一次

52:16.890 --> 52:19.210
他其实是处理一条数据

52:19.210 --> 52:20.810
那处理一条数据的时候呢

52:20.810 --> 52:23.370
我就需要去给他添加上一个value

52:23.370 --> 52:24.570
对不对

52:24.570 --> 52:27.530
那你看我们当时设定这个Inner

52:27.530 --> 52:30.570
就是让他处理每一条一条的数据

52:30.570 --> 52:32.010
处理完每一条数据之后呢

52:32.010 --> 52:33.530
全部丢给他给他

52:33.530 --> 52:35.210
所以函数执行一次

52:35.210 --> 52:36.970
其实是处理了一条数据

52:36.970 --> 52:37.850
那你说啊

52:37.850 --> 52:39.370
他在这会不会

52:39.370 --> 52:41.130
这个我的代码放到这

52:41.130 --> 52:42.170
能不能走

52:42.170 --> 52:43.050
必然能走

52:43.050 --> 52:43.530
所以说呢

52:43.530 --> 52:44.250
你看啊

52:44.250 --> 52:45.450
数量对吧

52:45.450 --> 52:47.050
绝对是对的号的

52:47.050 --> 52:48.250
走一次Inner

52:48.250 --> 52:49.530
他必然会走到这

52:49.530 --> 52:51.210
那我就处理一下value

52:52.250 --> 52:52.890
懂吧

52:52.890 --> 52:53.130
好

52:54.330 --> 52:54.890
这个呢

52:54.890 --> 52:56.250
位置找对了啊

52:56.250 --> 52:58.650
放到这是妥妥的啊

52:58.650 --> 52:59.690
然后呢

52:59.690 --> 53:02.090
那具体该如何去写呢

53:02.090 --> 53:02.890
如何去写呢

53:04.730 --> 53:05.610
如何去写啊

53:05.610 --> 53:07.610
我们现在先看一下啊

53:07.610 --> 53:07.930
来

53:07.930 --> 53:09.850
咱们还得看一下这个数据啊

53:09.850 --> 53:10.490
这个数据

53:10.570 --> 53:11.530
我们点开

53:11.530 --> 53:12.250
这个数据呢

53:12.250 --> 53:13.930
他其实是有一个特点

53:13.930 --> 53:14.650
什么特点呢

53:14.650 --> 53:16.890
就是有的里边有抽准

53:16.890 --> 53:17.690
有的里边呢

53:17.690 --> 53:18.970
没有抽准

53:18.970 --> 53:19.370
哎

53:19.370 --> 53:21.530
你看这些是不是都没有抽准

53:21.530 --> 53:22.490
这些没有抽准

53:22.490 --> 53:22.650
好

53:22.650 --> 53:24.010
我们看一下这个数据结构

53:24.010 --> 53:24.490
比如说这个

53:24.490 --> 53:26.010
animation这个最后一个啊

53:26.010 --> 53:27.290
来数据结构

53:27.290 --> 53:29.050
数据结构是在这的

53:29.050 --> 53:30.650
animation它是在最后的

53:30.650 --> 53:32.650
我们拉到最下边

53:32.650 --> 53:33.290
你看

53:33.290 --> 53:34.330
这条属性

53:34.330 --> 53:35.210
他对应的一个值

53:35.210 --> 53:35.930
就是一个对象

53:35.930 --> 53:36.650
这个对象当中呢

53:36.650 --> 53:37.770
是不是仅仅只有一个

53:37.770 --> 53:38.810
dollar count

53:38.810 --> 53:39.370
所以说呢

53:39.450 --> 53:40.970
他就是他的负极

53:40.970 --> 53:42.810
他并没有此元素

53:42.810 --> 53:43.610
没有此节点

53:43.610 --> 53:44.090
所以说呢

53:44.090 --> 53:45.530
他压根就没有去创建

53:45.530 --> 53:46.090
是不是

53:46.090 --> 53:46.490
好

53:46.490 --> 53:46.970
他呢

53:46.970 --> 53:47.690
就是什么呢

53:47.690 --> 53:48.970
就是一个啊

53:48.970 --> 53:50.730
没有抽准的这么一个对象

53:51.850 --> 53:53.210
那没有抽准这个对象呢

53:54.330 --> 53:55.450
我们怎么处理呢

53:55.450 --> 53:55.930
是不是说

53:55.930 --> 53:57.290
直接把这个value

53:57.850 --> 53:58.810
取到这个值

53:58.810 --> 53:59.450
添给他

53:59.850 --> 54:00.490
换句话说

54:00.490 --> 54:02.250
直接在这后面来上一个value

54:02.490 --> 54:03.610
再加上一条属性

54:03.610 --> 54:04.330
是不是就行了

54:04.970 --> 54:05.530
所以他呢

54:05.530 --> 54:07.530
是一种单独的处理方式

54:07.530 --> 54:08.730
但是这种方式呢

54:08.730 --> 54:10.730
它适用于这个有抽准吗

54:10.730 --> 54:11.610
它不是用

54:12.410 --> 54:13.210
不是用

54:13.210 --> 54:14.090
这个抽准呢

54:14.090 --> 54:15.530
你需要单独的去处理

54:15.530 --> 54:16.330
你需要去找到

54:16.330 --> 54:17.610
它里头的每一个

54:17.610 --> 54:18.970
每一个子元素当中的

54:18.970 --> 54:19.850
最后一点

54:19.850 --> 54:20.890
最后一个

54:20.890 --> 54:21.850
真正的一个节点

54:22.410 --> 54:23.050
在这呢

54:23.050 --> 54:24.250
给他加上一个value

54:25.530 --> 54:26.090
懂吗

54:26.090 --> 54:27.210
所以换句话说啊

54:27.210 --> 54:27.610
就是

54:27.610 --> 54:29.050
我的数据结构当中呢

54:29.050 --> 54:30.890
有抽准跟没有抽准

54:30.890 --> 54:32.170
他们的处理方式不一样

54:33.130 --> 54:34.250
不一样怎么办呢

54:34.250 --> 54:35.290
很简单

54:35.290 --> 54:36.010
在这呢

54:36.010 --> 54:37.210
给上一副条件

54:37.210 --> 54:38.170
做判断

54:38.970 --> 54:40.010
那这个判断呢

54:40.010 --> 54:41.050
刚才咱们说了

54:41.050 --> 54:42.090
没有抽准的

54:42.090 --> 54:42.890
最好办了

54:42.890 --> 54:43.770
那是不是啊

54:43.770 --> 54:46.330
我们要找到target点抽准

54:46.330 --> 54:46.890
那如果说

54:46.890 --> 54:47.690
这个元素身上

54:47.690 --> 54:48.410
这个对象身上

54:48.410 --> 54:49.610
没有这条属性

54:49.610 --> 54:49.850
哎

54:49.850 --> 54:50.730
是不是很happy

54:50.730 --> 54:51.210
在这呢

54:51.210 --> 54:51.850
怎么办呢

54:51.850 --> 54:54.090
我们直接给这个target

54:54.090 --> 54:54.970
因为这个东西呢

54:54.970 --> 54:56.330
其实每一条每一条

54:56.330 --> 54:57.690
是不是就是一条数据啊

54:57.690 --> 54:59.770
我们又一次强调一点啊

54:59.770 --> 55:00.730
这个inner

55:00.730 --> 55:02.090
方法就是用来处理

55:02.090 --> 55:03.290
一条一条的数据

55:03.290 --> 55:04.010
处理完之后呢

55:04.010 --> 55:04.890
把它全部

55:04.890 --> 55:06.730
怼到这个target之后

55:06.730 --> 55:07.850
target身上之后呢

55:07.930 --> 55:09.290
再给它怼出去

55:09.290 --> 55:09.850
懂吗

55:09.850 --> 55:10.250
好

55:10.250 --> 55:10.730
处理

55:10.730 --> 55:11.530
它走一次

55:11.530 --> 55:13.530
处理的就是一个target

55:13.530 --> 55:14.330
那这个

55:14.330 --> 55:16.970
我们是不是直接拿到target点

55:17.770 --> 55:18.650
value啊

55:18.650 --> 55:19.850
等于什么呢

55:19.850 --> 55:21.370
等于我们要取的值

55:21.370 --> 55:23.290
是不是这个dollar count

55:23.290 --> 55:24.170
dollar count

55:24.170 --> 55:25.290
这个值啊

55:25.290 --> 55:27.130
那这个值怎么去取呢

55:27.130 --> 55:28.410
它肯定是一个属性

55:28.970 --> 55:29.930
要取到它

55:29.930 --> 55:31.530
前面必须要加上一个

55:31.530 --> 55:33.130
它的一个锁鼠

55:33.130 --> 55:34.010
它锁鼠谁啊

55:34.650 --> 55:35.610
它锁鼠谁啊

55:35.610 --> 55:36.490
是这个东西

55:36.490 --> 55:37.050
是不是啊

55:37.130 --> 55:37.930
那这个东西呢

55:37.930 --> 55:38.890
怎么去取呢

55:39.450 --> 55:42.410
其实是不是就是source

55:42.410 --> 55:43.130
source

55:43.130 --> 55:43.610
这个东西

55:44.890 --> 55:45.930
是不是就是它

55:45.930 --> 55:46.570
这个东西呢

55:46.570 --> 55:47.290
是不是就是

55:47.290 --> 55:48.090
我们每一次

55:48.090 --> 55:48.810
你看啊

55:48.810 --> 55:49.530
第一次的时候

55:49.530 --> 55:51.370
咱再回来说一遍

55:51.370 --> 55:52.170
第一次的时候呢

55:52.170 --> 55:53.770
是不是整个这个对象

55:53.770 --> 55:54.810
然后第二次的时候呢

55:54.810 --> 55:56.650
可能传的就是这个access

55:56.650 --> 55:58.170
它所对应的这个对象

55:58.970 --> 55:59.850
第三次的时候

55:59.850 --> 56:00.810
传的是什么呢

56:00.810 --> 56:02.330
传的就是access labor

56:02.330 --> 56:03.690
它所对应的一个对象

56:03.690 --> 56:05.130
那它所对应的这个对象

56:05.130 --> 56:05.690
你看看

56:05.690 --> 56:07.690
这个比如说这个count

56:07.690 --> 56:08.010
是不是

56:08.890 --> 56:09.770
找到这个show

56:09.770 --> 56:10.810
是不是通过这个对象

56:10.810 --> 56:11.530
点它

56:11.530 --> 56:12.170
点count

56:12.970 --> 56:13.610
明白吧

56:13.610 --> 56:15.610
所以每一次传进去之后呢

56:15.610 --> 56:16.330
接下来show

56:16.330 --> 56:16.970
是不是要进来

56:16.970 --> 56:17.530
进来之后呢

56:17.530 --> 56:18.730
其实就是它的这个纸

56:19.370 --> 56:20.250
它的这个纸

56:20.250 --> 56:20.810
懂吗

56:20.810 --> 56:22.410
所以我们要取到这个count

56:22.410 --> 56:23.610
是不是就是这个source

56:23.610 --> 56:24.090
source

56:25.130 --> 56:25.770
每一次

56:25.770 --> 56:26.410
我们在这呢

56:26.410 --> 56:28.810
是不是kkk往里边进啊

56:28.810 --> 56:29.130
好

56:29.130 --> 56:29.530
在这呢

56:29.530 --> 56:30.410
就是直接

56:34.550 --> 56:35.270
对着呢

56:35.270 --> 56:36.310
已经写过了

56:36.310 --> 56:36.950
就是它

56:36.950 --> 56:37.350
就是它

56:38.870 --> 56:40.150
source点count

56:40.150 --> 56:41.190
然后这个count呢

56:41.190 --> 56:41.590
在这呢

56:41.590 --> 56:42.790
我们要多处理一下

56:42.790 --> 56:43.830
就是给上一个企业

56:43.830 --> 56:44.390
给上一个e

56:44.950 --> 56:45.750
这个目的呢

56:45.750 --> 56:46.150
是这样的

56:46.150 --> 56:46.470
就是

56:47.510 --> 56:49.030
我们取到的这些数据

56:49.030 --> 56:49.750
有的时候呢

56:49.750 --> 56:50.630
这个count

56:50.630 --> 56:51.430
这个count

56:51.430 --> 56:52.390
它是没有值的

56:52.870 --> 56:53.510
有的时候呢

56:53.510 --> 56:54.310
是没有值的

56:54.310 --> 56:55.270
或者说有的时候呢

56:55.270 --> 56:56.390
它压根没有count

56:56.390 --> 56:57.750
它可能是这个样子

56:57.750 --> 56:58.950
是有这种数据的

56:58.950 --> 56:59.430
你们

56:59.430 --> 57:00.630
往里边翻一翻

57:00.630 --> 57:01.670
里头数据太多了

57:01.670 --> 57:03.190
这里头有一万多条

57:03.190 --> 57:04.310
你们查一下啊

57:04.310 --> 57:05.510
我就不浪费时间了

57:05.510 --> 57:06.310
所以在这呢

57:06.310 --> 57:07.910
咱就谨慎的去处理一下

57:08.630 --> 57:10.070
如果说没有这个count的话

57:10.070 --> 57:10.550
给它默认

57:10.550 --> 57:11.590
来上一个e

57:11.590 --> 57:12.710
你别给人0了

57:12.710 --> 57:13.990
0多好看啊

57:13.990 --> 57:15.350
一次都没有查找

57:15.350 --> 57:15.990
是不是

57:15.990 --> 57:16.790
给上一个e啊

57:17.830 --> 57:18.310
行

57:18.310 --> 57:19.030
给完之后呢

57:19.030 --> 57:19.750
我们来看啊

57:19.750 --> 57:20.230
这个时候呢

57:20.230 --> 57:21.270
就有效果了

57:21.270 --> 57:22.150
来走

57:22.150 --> 57:22.710
这个时候呢

57:22.710 --> 57:23.670
再点开

57:23.670 --> 57:24.390
往里边进

57:25.030 --> 57:25.750
然后

57:25.750 --> 57:26.950
有没有发现

57:26.950 --> 57:27.670
这个color

57:27.670 --> 57:28.150
你看

57:28.150 --> 57:29.190
它没有抽准

57:29.190 --> 57:30.470
它是不是有value来

57:31.030 --> 57:31.830
有没有

57:31.830 --> 57:32.630
有value了吧

57:32.630 --> 57:33.350
你看这个呢

57:33.350 --> 57:34.230
是不是有value

57:34.230 --> 57:35.350
这个有抽准呢

57:35.350 --> 57:36.470
他们身上没有value

57:36.470 --> 57:37.190
但是

57:37.190 --> 57:37.990
往里边进

57:38.070 --> 57:38.710
咱进

57:38.710 --> 57:39.270
再进

57:39.270 --> 57:39.910
再进

57:39.910 --> 57:40.710
再进

57:40.710 --> 57:41.910
你有没有发现

57:41.910 --> 57:42.790
这个对象

57:42.790 --> 57:44.230
它有没有抽准

57:44.230 --> 57:45.110
没抽准

57:45.110 --> 57:46.310
那它有没有value

57:46.310 --> 57:47.110
有value

57:47.830 --> 57:48.230
对吧

57:48.230 --> 57:48.710
所以说呢

57:48.710 --> 57:49.590
你看他们的数据

57:49.590 --> 57:50.630
是不是就很

57:50.630 --> 57:51.270
很容易

57:51.270 --> 57:52.070
很简单

57:52.070 --> 57:52.710
添上去了

57:53.430 --> 57:54.310
添上去了啊

57:54.310 --> 57:54.710
好

57:54.710 --> 57:56.150
这块我们在这添了

57:56.150 --> 57:57.190
但是这个数据呢

57:57.190 --> 57:58.310
都不对啊

57:58.310 --> 57:59.750
现在你仅仅是处理了

57:59.750 --> 58:00.150
什么呢

58:00.150 --> 58:01.350
有这个啊

58:01.350 --> 58:02.870
没有没有这个

58:02.870 --> 58:04.310
抽准的这个对象

58:04.310 --> 58:05.750
那有抽准这个对象了

58:05.750 --> 58:07.190
他身上也有数据啊

58:07.270 --> 58:08.550
你比如说这个access

58:08.550 --> 58:09.670
那这个access呢

58:09.670 --> 58:10.390
有人搜

58:10.390 --> 58:11.190
是不是access

58:11.190 --> 58:12.310
你看啊

58:12.310 --> 58:12.950
他的值

58:12.950 --> 58:13.430
他的值

58:13.430 --> 58:14.150
他的值

58:14.150 --> 58:15.350
他里头

58:15.350 --> 58:16.070
你看在这呢

58:16.070 --> 58:17.750
是不是有一个count

58:17.750 --> 58:18.070
这个呢

58:18.070 --> 58:19.430
对应的就是access

58:19.430 --> 58:20.310
这条属性

58:20.310 --> 58:22.710
人家统计的一个数量

58:22.710 --> 58:24.390
那这个access呢

58:24.390 --> 58:25.910
它的value呢

58:25.910 --> 58:26.310
没有

58:28.070 --> 58:28.950
压根就没有

58:29.750 --> 58:30.310
对不对

58:30.310 --> 58:31.910
那比如说咱再近一点吧

58:31.910 --> 58:33.190
就是这个access labor

58:33.190 --> 58:33.670
好不好

58:33.670 --> 58:34.550
他呢

58:34.550 --> 58:35.190
来

58:35.190 --> 58:36.630
咱看一下access labor

58:36.710 --> 58:37.750
那access labor呢

58:37.750 --> 58:38.310
你看啊

58:38.310 --> 58:39.270
人家是有一个

58:39.270 --> 58:40.390
dollar count

58:40.390 --> 58:41.830
2534

58:41.830 --> 58:42.630
那我问一下

58:42.630 --> 58:43.830
人家这条属性

58:43.830 --> 58:44.950
所对应的一个value

58:44.950 --> 58:48.070
在这里头有没有压根就没有

58:48.070 --> 58:48.950
所以接下来呢

58:48.950 --> 58:50.870
我们还是要处理一下

58:50.870 --> 58:51.750
就是else

58:52.790 --> 58:53.670
else的时候呢

58:53.670 --> 58:55.350
就证明现在呢

58:55.350 --> 58:56.310
这条数据

58:56.310 --> 58:57.270
他没有什么呢

58:58.310 --> 58:58.870
没有

58:58.870 --> 58:59.750
这条数据

58:59.750 --> 59:01.190
它是有抽准的

59:01.190 --> 59:02.230
有抽准的话

59:02.230 --> 59:02.870
那怎么办啊

59:02.870 --> 59:03.990
这个数据

59:03.990 --> 59:04.870
这个数据

59:04.870 --> 59:05.830
也就是

59:05.910 --> 59:07.030
现在换句话说

59:07.030 --> 59:08.310
就是有抽准

59:08.310 --> 59:11.590
就我的这个负极access labor

59:11.590 --> 59:13.830
他所对应的一个统计数量

59:13.830 --> 59:14.950
应该怎么办

59:14.950 --> 59:16.070
那这个统计数量呢

59:16.070 --> 59:16.790
很简单

59:16.790 --> 59:19.430
咱直接给他添到这个抽准当中

59:19.430 --> 59:21.670
给他来额外的来一条数据

59:21.670 --> 59:22.870
对到这个里边

59:22.870 --> 59:23.270
行不行

59:23.270 --> 59:23.750
那么呢

59:23.750 --> 59:26.230
给他变成我们负极的access labor

59:26.230 --> 59:26.870
value呢

59:26.870 --> 59:28.070
取上对应的值

59:28.070 --> 59:28.870
就行了

59:28.870 --> 59:29.430
换句话说

59:29.430 --> 59:29.910
就是

59:29.910 --> 59:31.510
把自己啊

59:31.510 --> 59:32.630
自己点击的

59:32.630 --> 59:34.070
或者说查询的数量

59:34.070 --> 59:34.630
这条

59:34.630 --> 59:35.590
这条数据呢

59:35.590 --> 59:36.790
给他塞到这个

59:36.790 --> 59:39.830
自己的抽准这个这个属性身上

59:39.830 --> 59:40.630
好吧

59:40.630 --> 59:41.190
来

59:41.190 --> 59:41.910
那怎么做呢

59:41.910 --> 59:42.550
很简单

59:43.590 --> 59:44.150
在这呢

59:44.150 --> 59:44.790
直接

59:44.790 --> 59:45.990
target点

59:46.950 --> 59:47.750
抽准

59:47.750 --> 59:48.070
然后呢

59:48.070 --> 59:49.830
掉一下他身上的一个push方法

59:49.830 --> 59:50.950
不就行了吗

59:50.950 --> 59:52.950
因为这个他就是一个数组嘛

59:52.950 --> 59:53.990
所有的数据

59:53.990 --> 59:55.830
都是通过他身上添上去了

59:55.830 --> 59:58.150
那就使用这个push这个方法啊

59:58.150 --> 59:58.950
然后这个里头呢

59:58.950 --> 59:59.510
怎么给呢

59:59.510 --> 01:00:00.390
很简单嘛

01:00:00.390 --> 01:00:02.150
内幕咱们就按人家的格式

01:00:02.150 --> 01:00:02.950
那这个内幕呢

01:00:02.950 --> 01:00:03.990
给上什么

01:00:03.990 --> 01:00:05.110
这个内幕

01:00:05.110 --> 01:00:05.750
这个内幕呢

01:00:05.750 --> 01:00:06.710
其实就是什么呢

01:00:06.710 --> 01:00:07.910
就是现在

01:00:07.910 --> 01:00:08.550
哎

01:00:08.550 --> 01:00:09.510
bass pass

01:00:10.790 --> 01:00:11.590
bass pass

01:00:11.590 --> 01:00:13.510
就是每一次处理过后的

01:00:13.510 --> 01:00:13.910
这个呢

01:00:13.910 --> 01:00:14.630
是不是说

01:00:14.630 --> 01:00:17.830
每一次处理之前是不是access labor

01:00:17.830 --> 01:00:19.030
往里边进的时候呢

01:00:19.030 --> 01:00:20.710
才加上一个点

01:00:20.710 --> 01:00:21.670
往里边进的时候呢

01:00:21.670 --> 01:00:22.550
其实有相当于说

01:00:22.550 --> 01:00:23.190
我第二次

01:00:23.190 --> 01:00:24.150
第归的时候呢

01:00:24.150 --> 01:00:25.190
传到这个pass

01:00:26.070 --> 01:00:27.350
但原始

01:00:27.350 --> 01:00:29.670
还是在这个bass pass当中

01:00:30.390 --> 01:00:30.950
好吧

01:00:30.950 --> 01:00:31.750
然后这个呢

01:00:31.750 --> 01:00:32.390
是name

01:00:32.390 --> 01:00:33.750
然后value呢

01:00:33.750 --> 01:00:34.710
value是什么呢

01:00:34.710 --> 01:00:35.510
value其实

01:00:35.510 --> 01:00:36.630
所有的value都是通过

01:00:36.630 --> 01:00:37.910
这种方式去取的

01:00:37.910 --> 01:00:39.110
这个没有变

01:00:39.110 --> 01:00:39.750
没有变

01:00:39.750 --> 01:00:40.070
行

01:00:40.070 --> 01:00:40.950
这么去加啊

01:00:40.950 --> 01:00:41.590
来走

01:00:41.590 --> 01:00:43.030
我们再来看一下

01:00:43.030 --> 01:00:45.430
刚才那个地方是没有access labor的

01:00:45.430 --> 01:00:47.590
我们在这点点点进来

01:00:47.590 --> 01:00:48.630
再进

01:00:48.630 --> 01:00:49.110
在这呢

01:00:49.110 --> 01:00:51.430
应有被发现access labor

01:00:51.430 --> 01:00:52.310
现在就有了

01:00:52.310 --> 01:00:53.150
刚才那个地方

01:00:53.150 --> 01:00:53.830
愣死为期

01:00:54.550 --> 01:00:55.030
现在呢

01:00:55.030 --> 01:00:55.990
是多了一个

01:00:55.990 --> 01:00:56.790
二五三四

01:00:57.430 --> 01:00:58.150
你看

01:00:58.150 --> 01:00:59.830
刚才那条数据是没有的啊

01:00:59.830 --> 01:01:00.790
没有没有的

01:01:00.790 --> 01:01:01.910
你们可以回过头

01:01:01.910 --> 01:01:02.870
看一下这个视频

01:01:02.870 --> 01:01:04.310
把它订到那对比一下

01:01:04.870 --> 01:01:05.190
行吧

01:01:06.230 --> 01:01:06.630
这样的话

01:01:06.630 --> 01:01:08.150
我们就是不是就处理了

01:01:08.150 --> 01:01:09.510
但是这个这个地方

01:01:09.510 --> 01:01:10.550
有一个问题

01:01:10.550 --> 01:01:11.350
什么问题呢

01:01:11.350 --> 01:01:12.230
我们的初准呢

01:01:12.230 --> 01:01:14.070
其实现在变成了一个27

01:01:14.070 --> 01:01:14.470
这样吧

01:01:14.470 --> 01:01:15.510
咱们把这个 else 呢

01:01:15.510 --> 01:01:16.630
给他去掉啊

01:01:16.630 --> 01:01:17.110
去掉

01:01:17.110 --> 01:01:18.790
再来看一下啊刷新

01:01:18.790 --> 01:01:19.830
有没有是26

01:01:19.830 --> 01:01:20.550
对不对

01:01:20.550 --> 01:01:21.270
26

01:01:21.270 --> 01:01:21.670
然后呢

01:01:21.670 --> 01:01:22.470
现在我加上

01:01:22.470 --> 01:01:22.950
他之后呢

01:01:22.950 --> 01:01:23.510
变成多少

01:01:23.510 --> 01:01:24.710
变成27了

01:01:24.710 --> 01:01:25.110
27

01:01:25.110 --> 01:01:26.630
你看多了哪一个呢

01:01:26.630 --> 01:01:27.670
多了这个东西

01:01:27.670 --> 01:01:28.790
下面有一个

01:01:28.790 --> 01:01:29.590
啥都没有

01:01:29.590 --> 01:01:30.550
然后他的value呢

01:01:30.550 --> 01:01:31.910
是一个andefund

01:01:31.910 --> 01:01:32.870
那这条数据

01:01:32.870 --> 01:01:34.550
它是怎么出来的呢

01:01:34.550 --> 01:01:35.670
就是由于

01:01:35.670 --> 01:01:37.510
我们获取到的这个数据

01:01:37.510 --> 01:01:38.230
当中

01:01:38.230 --> 01:01:39.190
有的时候呢

01:01:39.190 --> 01:01:39.830
这个里头呢

01:01:39.830 --> 01:01:41.350
压根就没有这个count

01:01:41.350 --> 01:01:42.310
找不到这个count

01:01:43.990 --> 01:01:45.510
绝对是有的啊

01:01:45.510 --> 01:01:47.030
我记得是哪一个

01:01:51.160 --> 01:01:51.960
有一条属性

01:01:51.960 --> 01:01:53.480
在很多的地方都出现

01:01:53.480 --> 01:01:54.520
他身上是没有的

01:01:56.520 --> 01:01:57.080
算了

01:01:57.080 --> 01:01:57.960
你们可以找一下

01:01:57.960 --> 01:01:58.520
你们找一下

01:01:58.520 --> 01:01:59.320
确实是有啊

01:01:59.320 --> 01:01:59.880
那在这呢

01:01:59.880 --> 01:02:00.920
咱们就处理一下吧

01:02:00.920 --> 01:02:01.640
咱们去处理呢

01:02:01.640 --> 01:02:02.200
我们在这呢

01:02:02.200 --> 01:02:03.080
给上一个条件

01:02:03.080 --> 01:02:03.640
不就行了吗

01:02:04.600 --> 01:02:05.640
给上一个条件

01:02:05.640 --> 01:02:06.520
也就是说

01:02:06.520 --> 01:02:08.360
比如说这个东西

01:02:08.360 --> 01:02:10.520
它等于等于andefund的

01:02:10.520 --> 01:02:11.480
它不等于

01:02:11.480 --> 01:02:14.280
它不等于andefund的

01:02:14.280 --> 01:02:14.840
那就证明

01:02:14.840 --> 01:02:16.760
现在我获取到的数据当中

01:02:16.760 --> 01:02:17.640
是不是有这个

01:02:17.640 --> 01:02:19.560
dollar count这条属性

01:02:19.560 --> 01:02:20.120
是吧

01:02:20.120 --> 01:02:22.200
那我再去干嘛

01:02:22.200 --> 01:02:23.560
往里头去C

01:02:23.560 --> 01:02:25.560
C我的自己的这条数据啊

01:02:26.760 --> 01:02:27.320
给完成后呢

01:02:27.320 --> 01:02:28.200
再来看刷新

01:02:28.200 --> 01:02:30.120
是不是变成26了

01:02:30.120 --> 01:02:31.080
最后那一条呢

01:02:31.080 --> 01:02:32.680
我们点开就没有了

01:02:33.560 --> 01:02:34.280
没有了啊

01:02:34.280 --> 01:02:35.240
在这标一下吧

01:02:36.200 --> 01:02:39.160
获取到的数据

01:02:39.160 --> 01:02:41.160
有的时候

01:02:42.120 --> 01:02:43.080
会没有

01:02:45.240 --> 01:02:45.960
没有什么

01:02:45.960 --> 01:02:46.680
dollar count

01:02:48.980 --> 01:02:50.100
这条属性

01:02:52.200 --> 01:02:53.960
这里处理一下

01:02:53.960 --> 01:02:54.600
处理一下

01:02:54.600 --> 01:02:54.920
行吧

01:02:56.120 --> 01:02:56.360
好

01:02:57.240 --> 01:02:57.640
行

01:02:57.640 --> 01:02:58.440
那这样的话

01:02:58.440 --> 01:02:59.960
我们所有的数据

01:02:59.960 --> 01:03:01.480
算是已经处理完事了

01:03:01.480 --> 01:03:03.640
就算已经处理完事了啊

01:03:03.640 --> 01:03:04.920
处理完事之后呢

01:03:04.920 --> 01:03:06.040
那接下来呢

01:03:06.040 --> 01:03:07.480
咱们就需要去干嘛呢

01:03:07.560 --> 01:03:09.080
就需要去给这个

01:03:09.960 --> 01:03:12.120
才是咱们真正的这个

01:03:12.120 --> 01:03:12.840
图表

01:03:12.840 --> 01:03:13.640
所对应的

01:03:13.640 --> 01:03:14.840
这些配置参数

01:03:15.480 --> 01:03:16.040
去说一下

01:03:16.040 --> 01:03:17.800
这里头的一些配置参数了

01:03:17.800 --> 01:03:18.680
那在这呢

01:03:18.680 --> 01:03:19.800
咱们这节课呢

01:03:19.800 --> 01:03:21.400
我们就先说到这

01:03:21.400 --> 01:03:22.040
好吧

01:03:22.040 --> 01:03:22.760
下节课呢

01:03:22.760 --> 01:03:24.360
咱们来详细的去说一下

01:03:24.360 --> 01:03:26.200
它里头的这些配置参数

