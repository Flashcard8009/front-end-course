WEBVTT

00:00.750 --> 00:03.750
各位同学 咱们继续往下学习

00:03.750 --> 00:07.750
这节课咱们要学习的是restful API

00:07.750 --> 00:12.750
restful API 这个是一个比较偏概念性的东西

00:12.750 --> 00:15.750
所以大家听起来会有一些抽象

00:15.750 --> 00:18.750
想要把它讲明白不是特别的容易

00:18.750 --> 00:22.750
所以这节课我准备了好长的时间

00:22.750 --> 00:24.750
我尽量用比较通俗的语言

00:24.750 --> 00:26.750
以及这种接地器的方式去表达

00:26.750 --> 00:29.750
尽可能保证各位同学都能听得懂

00:29.750 --> 00:33.750
好吧 那首先先要给它来上一个定义

00:33.750 --> 00:37.750
咱们说一下restful API 它是一个什么东西呢

00:37.750 --> 00:43.750
我在这写一下 是一种互联网

00:43.750 --> 00:49.900
互联网然后软件架构

00:49.900 --> 00:52.900
软件架构的设计规范

00:52.900 --> 00:56.900
或者说还有叫设计指南

00:56.900 --> 00:59.900
以及设计风格

00:59.900 --> 01:02.900
还有一个设计原则

01:02.900 --> 01:04.900
他们指的其实都是一回事

01:04.900 --> 01:08.900
好 在这我估计大家对于

01:08.900 --> 01:11.900
什么互联网 软件架构

01:11.900 --> 01:13.900
这个东西是有些陌生的 是吧

01:13.900 --> 01:14.900
那想要去理解它的话

01:14.900 --> 01:15.900
你得继续往下停

01:15.900 --> 01:17.900
咱们在后边去解释

01:17.900 --> 01:18.900
我们先来说什么呢

01:18.900 --> 01:20.900
规范 指南 风格还是原则

01:20.900 --> 01:21.900
这个东西 是不是

01:21.900 --> 01:23.900
这个东西到底是啥呢

01:23.900 --> 01:26.900
其实好比我们平常所学习的

01:26.900 --> 01:28.900
那个外部标准

01:28.900 --> 01:30.900
标准咱都知道啥意思吧

01:30.900 --> 01:32.900
是不是有一些权威的机构

01:32.900 --> 01:33.900
所制定的一些规判

01:33.900 --> 01:36.900
那比方说我们的这个

01:36.900 --> 01:37.900
外部的标准

01:37.900 --> 01:39.900
浏览器你要按这个规范

01:39.900 --> 01:40.900
去解析代码

01:40.900 --> 01:41.900
然后我们作为开发者

01:41.900 --> 01:42.900
是不是要按这个规范

01:42.900 --> 01:44.900
去写这个代码

01:44.900 --> 01:47.900
HTML跟CSS的标准是由

01:47.900 --> 01:49.900
W3C这个组织来制定的

01:49.900 --> 01:51.900
那GS的标准 是不是

01:51.900 --> 01:54.900
由ECMSCrypt这个组织来制定的

01:54.900 --> 01:56.900
那RestfulAPI这个东西

01:56.900 --> 01:59.900
它其实就类似于这个标准

01:59.900 --> 02:00.900
但是一定要注意

02:00.900 --> 02:02.900
它仅仅是类似

02:02.900 --> 02:03.900
它可并不是标准

02:03.900 --> 02:04.900
为啥呢

02:04.900 --> 02:05.900
是因为这个东西

02:05.900 --> 02:08.900
它并不是一个组织提供了

02:08.900 --> 02:09.900
而是什么呢

02:09.900 --> 02:12.900
而是一个个人所提出来的

02:12.900 --> 02:14.900
但是这个个人了不得

02:14.900 --> 02:16.900
咱们后边还要去介绍 好吧

02:16.900 --> 02:18.900
所以说我们管它叫什么

02:18.900 --> 02:20.900
顶对叫做规范

02:20.900 --> 02:23.900
或者说叫一个原则就行了

02:23.900 --> 02:25.900
然后接下来

02:25.900 --> 02:26.900
我们要去说一下

02:26.900 --> 02:28.900
它产生的一个背景

02:28.900 --> 02:30.900
为什么这个人会提出

02:30.900 --> 02:32.900
RestfulAPI这么一个概念

02:32.900 --> 02:33.900
是不是

02:33.900 --> 02:35.900
好 咱们要简单的去介绍一下

02:35.900 --> 02:36.900
这个历史

02:36.900 --> 02:37.900
很有必要的

02:37.900 --> 02:38.900
在早期的时候

02:38.900 --> 02:40.900
这个外部开发

02:40.900 --> 02:41.900
我们是前后端

02:41.900 --> 02:43.900
都是融合在一起的

02:43.900 --> 02:45.900
然后没有像现在一样

02:45.900 --> 02:46.900
分得这么清楚

02:46.900 --> 02:47.900
那这种情况

02:47.900 --> 02:49.900
它会带来一系列的问题

02:49.900 --> 02:50.900
关于这个问题

02:50.900 --> 02:52.900
咱们后边还要详细的去说

02:52.900 --> 02:53.900
就知道了

02:53.900 --> 02:55.900
这是早期

02:55.900 --> 02:56.900
但是到了今年来

02:56.900 --> 02:58.900
这些它是不是规范了

02:58.900 --> 03:00.900
就是前后端进行了一个分离

03:00.900 --> 03:02.900
并且就是

03:02.900 --> 03:04.900
我们前端各种客户端

03:04.900 --> 03:06.900
层出不穷

03:06.900 --> 03:07.900
客户端知道吧

03:07.900 --> 03:08.900
我们之前所用的客户端

03:08.900 --> 03:11.900
就是你所看到的这个电脑

03:11.900 --> 03:12.900
但是现在不一样了

03:12.900 --> 03:14.900
因为有了一栋端

03:14.900 --> 03:15.900
一栋端当中

03:15.900 --> 03:17.900
像Android

03:17.900 --> 03:18.900
还有IOS

03:18.900 --> 03:19.900
也就是苹果系统

03:19.900 --> 03:20.900
等等

03:20.900 --> 03:22.900
成为一个新的客户端

03:22.900 --> 03:23.900
那这个时候

03:23.900 --> 03:24.900
基于这种现状

03:24.900 --> 03:26.900
就需要去有一个统一的机制

03:26.900 --> 03:27.900
来干嘛

03:27.900 --> 03:29.900
为前后端通信

03:29.900 --> 03:31.900
去提供一个服务

03:31.900 --> 03:33.900
为了节约的开发成本

03:33.900 --> 03:35.900
避免一系列的问题

03:35.900 --> 03:36.900
所以说

03:36.900 --> 03:38.900
把前后端的开发

03:38.900 --> 03:40.900
给它分离了

03:40.900 --> 03:43.900
我们前后端只使用什么

03:43.900 --> 03:44.900
API

03:44.900 --> 03:46.900
这个API又叫什么

03:46.900 --> 03:50.780
是不是叫接口

03:50.780 --> 03:52.780
是不是要比API

03:52.780 --> 03:54.780
要接力气一些

03:54.780 --> 03:55.780
我们前后端

03:55.780 --> 03:56.780
就通过这个接口

03:56.780 --> 03:58.780
来传递数据

03:58.780 --> 04:00.780
各自开发

04:00.780 --> 04:01.780
各自的功能

04:01.780 --> 04:03.780
谁也不然

04:03.780 --> 04:04.780
想要联系的话

04:04.780 --> 04:06.780
你就需要去通过这个接口

04:06.780 --> 04:07.780
于是

04:07.780 --> 04:08.780
Restful API

04:08.780 --> 04:09.780
它

04:09.780 --> 04:12.780
就作为制定接口的规范

04:12.780 --> 04:13.780
诞生了

04:13.780 --> 04:14.780
理解吧

04:14.780 --> 04:16.780
按照它的规范

04:16.780 --> 04:17.780
去制定这个接口

04:17.780 --> 04:19.780
就能够保证统一

04:19.780 --> 04:20.780
所有的开发者

04:20.780 --> 04:21.780
我们都能够

04:21.780 --> 04:22.780
看得懂

04:22.780 --> 04:23.780
用的明白

04:23.780 --> 04:25.780
其实就跟标准是一模一样的

04:25.780 --> 04:26.780
在之前没有标准

04:26.780 --> 04:27.780
你看我们的网页

04:27.780 --> 04:28.780
是不是写一个网页

04:28.780 --> 04:29.780
那时候

04:29.780 --> 04:30.780
兼容性

04:30.780 --> 04:32.780
我跟你讲

04:32.780 --> 04:33.780
你们应该是没有体会

04:33.780 --> 04:34.780
兼容性

04:34.780 --> 04:35.780
真是让人头疼

04:35.780 --> 04:36.780
特别麻烦

04:36.780 --> 04:37.780
但有了标准之后

04:37.780 --> 04:38.780
这些所有的问题

04:38.780 --> 04:39.780
都给它避免了

04:39.780 --> 04:40.780
所以

04:40.780 --> 04:41.780
这个其实就是

04:41.780 --> 04:42.780
Restful API

04:42.780 --> 04:44.780
它诞生了这么一个背景

04:44.780 --> 04:45.780
行

04:46.780 --> 04:47.780
明白了这个背景了之后

04:47.780 --> 04:48.780
接下来咱们就要

04:48.780 --> 04:50.780
详细的去介绍一下

04:50.780 --> 04:51.780
Restful API了

04:51.780 --> 04:53.780
那想要去理解它的话

04:53.780 --> 04:54.780
我们必须要把它拆分

04:54.780 --> 04:55.780
知道吗

04:55.780 --> 04:58.780
那我就先说这个 API

04:58.780 --> 04:59.780
这个东西

04:59.780 --> 05:00.780
API

05:00.780 --> 05:01.780
刚才我们说

05:01.780 --> 05:02.780
这个API是啥

05:02.780 --> 05:03.780
就是一个接口

05:03.780 --> 05:04.780
但是这个接口

05:04.780 --> 05:05.780
它并不是简简单单的

05:05.780 --> 05:06.780
这么一个接口

05:06.780 --> 05:07.780
来

05:07.780 --> 05:08.780
这个API

05:08.780 --> 05:09.780
首先

05:09.780 --> 05:10.780
它是一个简称

05:10.780 --> 05:11.780
来

05:11.780 --> 05:13.780
咱打开页面

05:14.780 --> 05:15.780
打开

05:16.780 --> 05:18.780
我们去搜一下

05:18.780 --> 05:19.780
API

05:19.780 --> 05:20.780
然后这个API

05:20.780 --> 05:22.780
它有一个全称

05:22.780 --> 05:23.780
全称是叫什么的

05:23.780 --> 05:24.780
叫这个

05:25.780 --> 05:26.780
来

05:26.780 --> 05:27.780
这是它的一个简称

05:27.780 --> 05:29.780
这是全称

05:29.780 --> 05:30.780
然后俗话讲

05:30.780 --> 05:31.780
叫接口

05:31.780 --> 05:33.780
人家有一个官方的名字

05:33.780 --> 05:35.780
官方的名字叫什么的

05:35.780 --> 05:36.780
应用程序

05:36.780 --> 05:37.780
编程接口

05:37.780 --> 05:38.780
就这个

05:39.780 --> 05:41.780
我们平常管它叫什么的

05:41.780 --> 05:42.780
叫接口

05:42.780 --> 05:44.780
其实人家是有官话的

05:44.780 --> 05:45.780
好

05:45.780 --> 05:46.780
API

05:46.780 --> 05:48.780
Application Programming Interface

05:48.780 --> 05:49.780
就是这个东西

05:49.780 --> 05:50.780
那这个

05:50.780 --> 05:51.780
就是咱们平时

05:51.780 --> 05:52.780
所说的那个接口

05:52.780 --> 05:53.780
像前面

05:53.780 --> 05:54.780
这个东西

05:54.780 --> 05:55.780
接口咱应该非常熟了

05:55.780 --> 05:56.780
像前面咱们

05:56.780 --> 05:57.780
学的

05:57.780 --> 05:59.780
做的学生信息管理系统

05:59.780 --> 06:00.780
那个项目

06:00.780 --> 06:01.780
是不是那里头

06:01.780 --> 06:02.780
是不是有很多的一些接口

06:02.780 --> 06:03.780
比如说

06:03.780 --> 06:04.780
我可以去取到

06:04.780 --> 06:05.780
所有学生的信息

06:05.780 --> 06:06.780
是不是有一个接口

06:06.780 --> 06:07.780
能取到

06:07.780 --> 06:08.780
我还可以去

06:08.780 --> 06:09.780
添加一名学生

06:09.780 --> 06:10.780
也是有接口

06:10.780 --> 06:11.780
就能够实现的

06:11.780 --> 06:12.780
接口

06:12.780 --> 06:13.780
就是一个API

06:13.780 --> 06:15.780
那通过这个API

06:15.780 --> 06:16.780
或者说通过这个接口

06:16.780 --> 06:18.780
我们就可以跟服务器

06:18.780 --> 06:19.780
进行连接

06:19.780 --> 06:21.780
或者说进行交互了

06:21.780 --> 06:22.780
但在这

06:22.780 --> 06:23.780
我要去说一下

06:23.780 --> 06:25.780
就是人家在这所提出的

06:25.780 --> 06:26.780
这个API

06:26.780 --> 06:27.780
这个接口

06:27.780 --> 06:28.780
它可不光指

06:28.780 --> 06:30.780
我们外部端的这个接口

06:30.780 --> 06:31.780
可能大家

06:31.780 --> 06:32.780
如果说你没有

06:32.780 --> 06:33.780
其他语言的一些基础的话

06:33.780 --> 06:34.780
仅仅知道

06:34.780 --> 06:35.780
接口在我们的

06:35.780 --> 06:36.780
这个外部端是有的

06:36.780 --> 06:38.780
其实在软件开发

06:38.780 --> 06:39.780
这个领域

06:39.780 --> 06:40.780
它也是有接口的

06:40.780 --> 06:41.780
人家其实

06:41.780 --> 06:43.780
也不是特指

06:43.780 --> 06:44.780
我们的外部端

06:46.780 --> 06:48.780
我们举上一些实际的例子

06:48.780 --> 06:50.780
比方说

06:50.780 --> 06:52.780
现在的互联网的一些产品

06:52.780 --> 06:53.780
都会有些开放平台

06:53.780 --> 06:55.780
特别是一些大的公司

06:55.780 --> 06:57.780
像百度 微信 支付宝 微博

06:57.780 --> 06:58.780
等等这些公司

06:58.780 --> 07:00.780
他们都会有一个开放平台

07:00.780 --> 07:02.780
这个开放平台是干嘛用的

07:02.780 --> 07:04.780
它其实是对外提供接口的

07:04.780 --> 07:06.780
让你通过这些接口

07:06.780 --> 07:08.780
去实现一些相应的功能

07:08.780 --> 07:10.780
我们举上一些实际的例子

07:10.780 --> 07:11.780
大家就能知道了

07:11.780 --> 07:12.780
好不好

07:12.780 --> 07:14.780
跟我们生活息息相关的

07:14.780 --> 07:16.780
比如说微信跟微博

07:16.780 --> 07:19.780
他们都有对外提供登陆的这个功能

07:19.780 --> 07:21.780
应该是有很多的小伙伴

07:21.780 --> 07:22.780
应该是体验过的

07:22.780 --> 07:25.780
你再去使用第三方的一些产品

07:25.780 --> 07:27.780
或说第三方的一些软件

07:27.780 --> 07:28.780
这个时候你去注册

07:28.780 --> 07:29.780
是不是

07:29.780 --> 07:30.780
它会给你有一个选项

07:30.780 --> 07:32.780
就是使用微信号

07:32.780 --> 07:34.780
或者说使用微博的账号

07:34.780 --> 07:35.780
去登陆

07:35.780 --> 07:36.780
那这个功能

07:36.780 --> 07:38.780
就是人家微信微博

07:38.780 --> 07:39.780
官方提供的

07:39.780 --> 07:40.780
这个一个功能

07:40.780 --> 07:41.780
知道吗

07:41.780 --> 07:42.780
这样的话

07:42.780 --> 07:43.780
我们就省了再去注册这个账号了

07:43.780 --> 07:45.780
因为现在产品太多了

07:45.780 --> 07:46.780
你注册的账号乱七八糟

07:46.780 --> 07:47.780
到时候你就忘了

07:47.780 --> 07:48.780
是不是

07:48.780 --> 07:50.780
我们通过微信跟微博

07:50.780 --> 07:52.780
就能够登陆第三方产品了

07:52.780 --> 07:53.780
非常的简单

07:54.780 --> 07:55.780
这是一个

07:55.780 --> 07:56.780
然后第二个

07:56.780 --> 07:57.780
微信微博

07:57.780 --> 07:59.780
还有一个分享道的功能

07:59.780 --> 08:00.780
你可以把你喜欢的

08:00.780 --> 08:01.780
比如说我看了一篇帖子

08:01.780 --> 08:02.780
是不是

08:02.780 --> 08:04.780
或者说我看了一篇文章

08:04.780 --> 08:05.780
那这个我就可以通过

08:05.780 --> 08:07.780
我们的这个按钮

08:07.780 --> 08:09.780
就能够分享到什么微博

08:09.780 --> 08:10.780
或者说

08:10.780 --> 08:12.780
分享到你的朋友圈里边了

08:12.780 --> 08:13.780
是吧

08:13.780 --> 08:14.780
也会有这些功能

08:14.780 --> 08:16.780
我们很多的第三方的一些APP

08:16.780 --> 08:17.780
其实都有的

08:17.780 --> 08:18.780
线下支付

08:18.780 --> 08:19.780
扫码

08:19.780 --> 08:20.780
这个现在跟大家

08:20.780 --> 08:22.780
是不是非常非常的

08:22.780 --> 08:23.780
非常非常的近

08:23.780 --> 08:25.780
我们几乎每天都在用

08:25.780 --> 08:26.780
会有很多的一些平台

08:26.780 --> 08:28.780
再去做扫码支付

08:28.780 --> 08:29.780
它提供一个

08:29.780 --> 08:30.780
同样的一个二维码

08:30.780 --> 08:31.780
这个时候

08:31.780 --> 08:32.780
你通过微信

08:32.780 --> 08:33.780
或者说通过支付宝

08:33.780 --> 08:34.780
扫完之后

08:34.780 --> 08:36.780
都可以进行一些支付

08:36.780 --> 08:39.780
还有像地图的360度全景

08:39.780 --> 08:41.780
我们可以真实的去看到这些接景

08:41.780 --> 08:44.780
那这些功能都是官方产品

08:44.780 --> 08:45.780
所提供的

08:45.780 --> 08:47.780
对外开放的一些开发接口

08:48.780 --> 08:49.780
那我们的开发者

08:49.780 --> 08:51.780
就是通过这些接口

08:51.780 --> 08:53.780
实现了相应的一些功能

08:53.780 --> 08:54.780
理解了吧

08:54.780 --> 08:55.780
好 API

08:56.780 --> 08:58.780
然后这个API

08:58.780 --> 08:59.780
我们接下来要说一下

08:59.780 --> 09:01.780
它的一个发展的历史

09:01.780 --> 09:03.780
这个也是很有必要去了解的

09:03.780 --> 09:05.780
最开始的时候

09:05.780 --> 09:06.780
就是压根

09:06.780 --> 09:08.780
没有这个API的这个概念

09:08.780 --> 09:09.780
或者说有的话

09:09.780 --> 09:10.780
它也是非常的弱

09:10.780 --> 09:11.780
在原来

09:11.780 --> 09:13.780
是因为我们的前后端

09:13.780 --> 09:14.780
它是不分家的

09:14.780 --> 09:15.780
那这个数据

09:15.780 --> 09:16.780
它怎么弄出来

09:16.780 --> 09:17.780
咱们现在都知道

09:17.780 --> 09:18.780
这个API主要干嘛

09:18.780 --> 09:20.780
就是用来给我提供数据的

09:20.780 --> 09:21.780
那在之前

09:21.780 --> 09:22.780
没有这个API

09:22.780 --> 09:24.780
没有这个接口数据怎么办

09:24.780 --> 09:25.780
对不对

09:25.780 --> 09:27.780
如果说是一些老程序员的话

09:27.780 --> 09:29.780
它应该是体验过之前

09:29.780 --> 09:30.780
是怎么做的

09:30.780 --> 09:31.780
那我们在这

09:31.780 --> 09:33.780
就跟大家简单的回顾一下

09:33.780 --> 09:35.780
算是给大家扩展一个点

09:36.780 --> 09:38.780
那在之前是怎么做的呢

09:38.780 --> 09:40.780
比如说我们写一篇

09:40.780 --> 09:41.780
写一个页面

09:41.780 --> 09:42.780
这个页面当中

09:42.780 --> 09:43.780
有一个新闻的列表

09:43.780 --> 09:44.780
是不是很常见的

09:44.780 --> 09:45.780
新闻列表

09:45.780 --> 09:46.780
然后你看

09:46.780 --> 09:47.780
我们通过切图

09:47.780 --> 09:48.780
然后写出来

09:48.780 --> 09:49.780
结构

09:49.780 --> 09:50.780
样式什么都有了

09:50.780 --> 09:51.780
是不是这个时候怎么办

09:51.780 --> 09:52.780
这个

09:52.780 --> 09:54.780
我们把它丢给谁

09:54.780 --> 09:55.780
丢给后端

09:55.780 --> 09:57.780
假设说你的后端是PHP

09:57.780 --> 09:58.780
这是早些年

09:58.780 --> 10:00.780
然后PHP拿到之后

10:00.780 --> 10:01.780
比如说我们写一个

10:01.780 --> 10:03.780
在这有一个新闻的列表

10:03.780 --> 10:04.780
是不是

10:04.780 --> 10:05.780
我通过一个Li

10:05.780 --> 10:06.780
这个表现

10:06.780 --> 10:07.780
写了一堆

10:07.780 --> 10:08.780
是不是好好复制一个随便

10:08.780 --> 10:09.780
行

10:09.780 --> 10:10.780
然后写完了

10:10.780 --> 10:11.780
写完之后

10:11.780 --> 10:13.780
这个数据肯定不能静态数据

10:13.780 --> 10:14.780
他要通过数据库

10:14.780 --> 10:16.780
去给他C上真实的数据

10:16.780 --> 10:17.780
那怎么办

10:17.780 --> 10:18.780
我们没有接口

10:18.780 --> 10:19.780
我们前端无能为力

10:19.780 --> 10:20.780
这个时候

10:20.780 --> 10:21.780
不用担心

10:21.780 --> 10:22.780
我们的后端

10:22.780 --> 10:23.780
在那个时候

10:23.780 --> 10:25.780
有一个东西叫什么

10:25.780 --> 10:26.780
叫CMS

10:26.780 --> 10:28.780
如果说是老程序员的话

10:28.780 --> 10:30.780
应该是非常的了解的

10:30.780 --> 10:31.780
CMS

10:31.780 --> 10:33.780
现在这些东西

10:33.780 --> 10:34.780
依然存在

10:34.780 --> 10:35.780
你依然能够用

10:35.780 --> 10:37.780
之前有一个非常出名的

10:37.780 --> 10:39.780
叫德德CMS

10:39.780 --> 10:40.780
我们就拿他

10:40.780 --> 10:41.780
来举上一个例子

10:41.780 --> 10:43.780
他其实就是一个系统

10:43.780 --> 10:45.780
我们把静态页面

10:45.780 --> 10:47.780
按照人家所给的那些

10:47.780 --> 10:48.780
模板

10:48.780 --> 10:49.780
嵌套进来之后

10:49.780 --> 10:51.780
就能够生成动态的一些

10:51.780 --> 10:52.780
网站了

10:52.780 --> 10:53.780
非常的厉害

10:53.780 --> 10:54.780
在当时也是

10:54.780 --> 10:55.780
非常厉害的一个产物

10:55.780 --> 10:57.780
然后我就演示一下

10:57.780 --> 10:59.780
这个东西怎么做

10:59.780 --> 11:00.780
是这样的

11:01.780 --> 11:03.780
你这不是要动态数据吗

11:03.780 --> 11:04.780
OK

11:04.780 --> 11:05.780
把它删掉

11:05.780 --> 11:06.780
这些活都是后端

11:06.780 --> 11:07.780
后端在做

11:07.780 --> 11:08.780
怎么做

11:08.780 --> 11:09.780
人家用的是什么

11:09.780 --> 11:11.780
模板语言

11:11.780 --> 11:12.780
后端的一个模板语言

11:12.780 --> 11:14.780
其实就是CMS提供的

11:14.780 --> 11:15.780
这个模板语言

11:15.780 --> 11:17.780
然后是这样的

11:17.780 --> 11:18.780
第一

11:18.780 --> 11:19.780
一个帽号

11:19.780 --> 11:20.780
Aclist

11:20.780 --> 11:22.780
然后给上一个Type ID

11:22.780 --> 11:23.780
等上几

11:23.780 --> 11:24.780
等上一个1

11:24.780 --> 11:25.780
然后再空格

11:25.780 --> 11:26.780
给上一个Row

11:26.780 --> 11:27.780
等于几

11:27.780 --> 11:28.780
等于一个6

11:28.780 --> 11:29.780
OK

11:29.780 --> 11:30.780
完了在这

11:30.780 --> 11:31.780
再来上一个

11:31.780 --> 11:32.780
结束的

11:32.780 --> 11:33.780
第一

11:33.780 --> 11:34.780
然后

11:34.780 --> 11:35.780
一个帽号

11:36.780 --> 11:37.780
List

11:37.780 --> 11:38.780
这个帽次

11:38.780 --> 11:39.780
就跟我们的表签

11:39.780 --> 11:40.780
是不是一样

11:40.780 --> 11:41.780
这是开始表签

11:41.780 --> 11:42.780
这是笔合表签

11:42.780 --> 11:43.780
是不是

11:43.780 --> 11:44.780
好

11:44.780 --> 11:45.780
差不多

11:45.780 --> 11:46.780
然后这里头

11:46.780 --> 11:49.100
放中括号

11:49.100 --> 11:50.100
中括号

11:50.100 --> 11:51.100
Fill的

11:51.100 --> 11:52.100
Fill的

11:52.100 --> 11:53.100
是什么

11:53.100 --> 11:54.100
Title

11:54.100 --> 11:55.100
Title

11:55.100 --> 11:56.100
然后有一个Function

11:56.100 --> 11:57.100
Function

11:57.100 --> 11:58.100
等于

11:58.100 --> 11:59.100
等于什么

12:00.100 --> 12:01.100
STR

12:02.100 --> 12:03.100
一个

12:03.100 --> 12:04.100
这是随意给的

12:04.100 --> 12:05.100
63

12:06.100 --> 12:07.100
好

12:07.100 --> 12:08.100
这个

12:08.100 --> 12:09.100
是之前的一个东西

12:09.100 --> 12:10.100
就是我拿过来

12:10.100 --> 12:11.100
跟大家去演示一下

12:11.100 --> 12:12.100
行

12:12.100 --> 12:13.100
完了之后

12:13.100 --> 12:14.100
这有一个鞋杠

12:14.100 --> 12:15.100
结束了

12:15.100 --> 12:16.100
好吧

12:16.100 --> 12:17.100
这个就OK的

12:17.100 --> 12:18.100
这就是在之前

12:18.100 --> 12:19.100
没有接口

12:19.100 --> 12:20.100
我们的数据该如何展示

12:20.100 --> 12:21.100
就是通过

12:21.100 --> 12:22.100
这种

12:22.100 --> 12:23.100
模板自服串的

12:23.100 --> 12:24.100
这种形式

12:24.100 --> 12:25.100
去给它挖坑

12:25.100 --> 12:26.100
挖坑完之后

12:26.100 --> 12:27.100
到时候

12:27.100 --> 12:28.100
把这个页面

12:28.100 --> 12:29.100
一跑

12:29.100 --> 12:30.100
一生成

12:30.100 --> 12:31.100
里边就有数据了

12:31.100 --> 12:32.100
那这个模板语言

12:32.100 --> 12:33.100
简单的介绍一下

12:33.100 --> 12:34.100
好不好

12:34.100 --> 12:35.100
你像这个Arklist

12:35.100 --> 12:36.100
其实就是

12:36.100 --> 12:37.100
要去取

12:37.100 --> 12:38.100
取什么的

12:38.100 --> 12:39.100
取我们的新闻的一个列表

12:39.100 --> 12:40.100
然后

12:40.100 --> 12:41.100
这个列表当中

12:41.100 --> 12:42.100
它有一个ID

12:42.100 --> 12:43.100
也就是说

12:43.100 --> 12:44.100
它有很多的分类

12:44.100 --> 12:45.100
是不是

12:45.100 --> 12:46.100
我要取ID唯一的分类

12:46.100 --> 12:47.100
下面的文章

12:47.100 --> 12:48.100
取多少条

12:48.100 --> 12:49.100
取六条

12:49.100 --> 12:50.100
取六条之后

12:50.100 --> 12:51.100
这儿

12:51.100 --> 12:52.100
它就自动的

12:52.100 --> 12:53.100
给你生成

12:53.100 --> 12:54.100
6个 Li 标签

12:54.100 --> 12:55.100
这个 Li 标签

12:55.100 --> 12:56.100
放的是啥

12:56.100 --> 12:57.100
就是文章的标题

12:57.100 --> 12:58.100
所以说呢

12:58.100 --> 12:59.100
你看这里头

12:59.100 --> 13:00.100
它的值是 title

13:00.100 --> 13:01.100
那这个后边

13:01.100 --> 13:02.100
跟了一个 function

13:02.100 --> 13:03.100
就是说

13:03.100 --> 13:04.100
让这个 title 呢

13:04.100 --> 13:05.100
要执行一下这个 function

13:05.100 --> 13:06.100
那这个 function 是干嘛

13:06.100 --> 13:07.100
就是把这个

13:07.100 --> 13:08.100
字

13:08.100 --> 13:10.100
这个标题给它结了

13:10.100 --> 13:11.100
结多少

13:11.100 --> 13:12.100
结63个字符

13:12.100 --> 13:13.100
懂吗

13:13.100 --> 13:15.100
避免它超出去了

13:15.100 --> 13:16.100
理解吧

13:16.100 --> 13:18.100
这个就是在之前

13:18.100 --> 13:19.100
开发方式

13:21.100 --> 13:23.100
应该有同学啊

13:23.100 --> 13:24.100
就是如果说

13:24.100 --> 13:25.100
你是老成学的话

13:25.100 --> 13:26.100
应该是知道了

13:26.100 --> 13:27.100
行吗

13:27.100 --> 13:28.100
那在之前

13:28.100 --> 13:29.100
咱简单的介绍了一下

13:29.100 --> 13:30.100
在之前

13:30.100 --> 13:31.100
这个页面

13:31.100 --> 13:32.100
还有数据

13:32.100 --> 13:33.100
渲染等等这些

13:33.100 --> 13:34.100
都是在服务端

13:34.100 --> 13:35.100
去完成的

13:35.100 --> 13:36.100
开发人员

13:36.100 --> 13:37.100
必须同时具备

13:37.100 --> 13:39.100
前后端的技术能力

13:39.100 --> 13:40.100
那个时候

13:40.100 --> 13:42.100
前端是一个很尴尬的

13:42.100 --> 13:43.100
这么一个职位

13:43.100 --> 13:44.100
就是它的活

13:44.100 --> 13:45.100
是什么呢

13:45.100 --> 13:46.100
就是切一个页面

13:46.100 --> 13:47.100
其实我们说

13:47.100 --> 13:48.100
切图切图

13:48.100 --> 13:49.100
切图仔

13:49.100 --> 13:50.100
就是从那个时候

13:50.100 --> 13:51.100
给它传下来的

13:51.100 --> 13:53.100
那多的话

13:53.100 --> 13:54.100
你无非就是说

13:54.100 --> 13:55.100
去网上

13:56.100 --> 13:57.100
比如说这个轮波图

13:57.100 --> 13:58.100
你扒一个

13:58.100 --> 13:59.100
然后丢到你的页面当中

13:59.100 --> 14:01.100
那这个工作

14:01.100 --> 14:02.100
那个时候

14:02.100 --> 14:03.100
要么是设计干

14:03.100 --> 14:05.100
要么是后端干

14:05.100 --> 14:07.100
没有专门的前端

14:07.100 --> 14:09.100
后来发展发展

14:09.100 --> 14:10.100
算是勉强有了

14:10.100 --> 14:11.100
但它也不叫前端

14:11.100 --> 14:12.100
叫什么呢

14:12.100 --> 14:13.100
叫网页制作

14:14.100 --> 14:15.100
但是

14:15.100 --> 14:17.100
大多数的这种职位

14:17.100 --> 14:18.100
它还是要求你

14:18.100 --> 14:20.100
要么会点设计

14:20.100 --> 14:21.100
要么会点后端

14:21.100 --> 14:22.100
就感觉

14:22.100 --> 14:23.100
前不着村

14:23.100 --> 14:24.100
后不着电

14:24.100 --> 14:25.100
不伦不累

14:26.100 --> 14:27.100
这就是之前

14:27.100 --> 14:28.100
前端的一个尴尬的

14:28.100 --> 14:29.100
一个处境

14:29.100 --> 14:32.100
那前后端混在一起的方式

14:32.100 --> 14:33.100
让这个代码

14:33.100 --> 14:34.100
变得极其的庸重

14:34.100 --> 14:35.100
业务逻辑

14:35.100 --> 14:36.100
极其的混乱

14:36.100 --> 14:37.100
后期维护

14:37.100 --> 14:38.100
扩展

14:38.100 --> 14:39.100
极其的痛苦

14:39.100 --> 14:40.100
并且

14:40.100 --> 14:42.100
我们还不能够直接去访问

14:42.100 --> 14:44.100
其他域下边的数据

14:44.100 --> 14:45.100
我们现在是不是通过JSNP

14:45.100 --> 14:47.100
是不是很容易就能够搞定掉

14:47.100 --> 14:48.100
对吧

14:48.100 --> 14:49.100
好

14:49.100 --> 14:50.100
但之前绝对是不行的

14:50.100 --> 14:51.100
那只有

14:51.100 --> 14:52.100
你想访问

14:52.100 --> 14:53.100
其他域的数据

14:53.100 --> 14:54.100
只能是通过后端

14:54.100 --> 14:56.100
然后进行一些反锁的处理之后

14:56.100 --> 14:58.100
你才能够访问到

14:58.100 --> 14:59.100
这个其实就是

14:59.100 --> 15:00.100
刚才咱们所说的

15:00.100 --> 15:02.100
就是前后端不分家的时候

15:02.100 --> 15:04.100
他所带来的一系列的问题

15:04.100 --> 15:05.100
我们在这儿

15:05.100 --> 15:06.100
把那个坑给它补上了

15:06.100 --> 15:07.100
好吧

15:08.100 --> 15:10.100
那效率低下的东西

15:10.100 --> 15:12.100
它终究是会被淘汰的

15:12.100 --> 15:13.100
那后来

15:13.100 --> 15:14.100
就是谷歌的公司

15:14.100 --> 15:16.100
把这个AJX的技术

15:16.100 --> 15:17.100
给它带动了起来

15:17.100 --> 15:18.100
那兴起了

15:18.100 --> 15:20.100
前后端分离的思想

15:20.100 --> 15:22.100
跟着我们的API

15:22.100 --> 15:24.100
就刮手滴落了

15:24.100 --> 15:26.100
水到渠成了

15:26.100 --> 15:29.100
后端你只需要去给数据

15:29.100 --> 15:30.100
然后

15:30.100 --> 15:31.100
数据

15:31.100 --> 15:34.100
我们前端就通过API

15:34.100 --> 15:35.100
去拿到

15:35.100 --> 15:36.100
拿到之后

15:36.100 --> 15:39.100
前端把数据进行渲染

15:39.100 --> 15:41.100
然后我们亏的一些道母

15:41.100 --> 15:43.100
是不是就OK了

15:43.100 --> 15:45.100
各思其职

15:45.100 --> 15:46.100
所以说

15:46.100 --> 15:47.100
这个API

15:47.100 --> 15:48.100
咱说了半天

15:48.100 --> 15:49.100
其实想要缠述一个道理

15:49.100 --> 15:50.100
是什么呢

15:50.100 --> 15:53.100
就是API是前后端分离的

15:53.100 --> 15:54.100
一个产物

15:54.100 --> 15:55.100
这个就是

15:55.100 --> 15:57.100
它相应的一些历史

15:57.100 --> 15:58.100
咱们介绍了一下

15:58.100 --> 15:59.100
好不好

15:59.100 --> 16:00.100
API

16:00.100 --> 16:01.100
行吧

16:01.100 --> 16:02.100
那API这个概念说完了

16:02.100 --> 16:04.100
接下来咱们要去说这个概念了

16:04.100 --> 16:05.100
注意

16:05.100 --> 16:06.100
不是restful

16:06.100 --> 16:07.100
是rest

16:08.100 --> 16:09.100
rest

16:09.100 --> 16:10.100
好

16:10.100 --> 16:11.100
rest

16:11.100 --> 16:12.100
行

16:12.100 --> 16:13.100
首先先来说一下

16:13.100 --> 16:14.100
rest这个词

16:14.100 --> 16:15.100
那这个词

16:15.100 --> 16:17.100
是一个非常著名的一个人物

16:17.100 --> 16:19.100
就是刚才咱们说到的那个人物

16:19.100 --> 16:21.100
由人家所提出来的

16:21.100 --> 16:22.100
这个人物是啥呢

16:22.100 --> 16:23.100
来在这

16:23.100 --> 16:25.100
我们再搜一下

16:25.100 --> 16:26.100
rest

16:26.100 --> 16:27.100
这个

16:28.100 --> 16:29.100
然后呢

16:29.100 --> 16:31.100
这个人物是叫这个

16:31.100 --> 16:33.100
这个Roy Fielding

16:33.100 --> 16:35.100
其实他还缺了一个

16:35.100 --> 16:36.100
托马斯

16:36.100 --> 16:38.100
就是这个翻译过来

16:38.100 --> 16:41.100
叫罗伊托马斯菲尔丁

16:41.100 --> 16:42.100
这是一个人物

16:42.100 --> 16:44.100
这个人物很重要

16:44.100 --> 16:45.100
你看

16:45.100 --> 16:46.100
他是一个博士

16:46.100 --> 16:47.100
2000年

16:47.100 --> 16:49.100
他的博士论文当中提出来的

16:49.100 --> 16:52.100
这个rest的这个概念

16:52.100 --> 16:54.100
那我们先不去说这个rest

16:54.100 --> 16:56.100
我们先来说一下这个人物

16:56.100 --> 16:57.100
那这个人物呢

16:57.100 --> 16:58.100
非常的重要

16:58.100 --> 16:59.100
就是他呢

16:59.100 --> 17:00.100
是http

17:00.100 --> 17:01.100
http协议

17:01.100 --> 17:02.100
这个知道吧

17:02.100 --> 17:04.100
我们前边网络客有讲过

17:04.100 --> 17:06.100
http协议的主要设计者

17:06.100 --> 17:07.100
以及呢还有那个

17:07.100 --> 17:08.100
apachi的服务器

17:08.100 --> 17:10.100
我不知道有同学用过吗

17:10.100 --> 17:11.100
那个在之前

17:11.100 --> 17:12.100
我们讲那个ax

17:12.100 --> 17:13.100
的时候呢就是用apachi

17:13.100 --> 17:14.100
去搭一个

17:14.100 --> 17:15.100
搭一个什么呢

17:15.100 --> 17:17.100
在本地搭一个服务器的环境

17:17.100 --> 17:18.100
因为我们的ax呢

17:18.100 --> 17:19.100
他需要去

17:19.100 --> 17:21.100
很多的一些东西都需要在http的

17:21.100 --> 17:22.100
协议下才能完成

17:22.100 --> 17:23.100
所以说呢

17:23.100 --> 17:24.100
就用那个东西来去

17:24.100 --> 17:26.100
搭一个服务器的一个环境啊

17:26.100 --> 17:27.100
apachi

17:28.100 --> 17:29.100
ap

17:30.100 --> 17:31.100
ah

17:31.100 --> 17:32.100
c1

17:33.100 --> 17:34.100
ch1

17:34.100 --> 17:35.100
不对

17:35.100 --> 17:36.100
ap

17:37.100 --> 17:38.100
ch1

17:38.100 --> 17:39.100
apachi

17:39.100 --> 17:40.100
这个东西啊

17:40.100 --> 17:41.100
往后

17:41.100 --> 17:43.100
你们会听到我录的那个课

17:43.100 --> 17:45.100
选修的那个echarse那个

17:45.100 --> 17:46.100
那个课啊

17:46.100 --> 17:47.100
那个echarse呢

17:47.100 --> 17:48.100
他现在呢

17:48.100 --> 17:50.100
其实就已经被这个apachi

17:50.100 --> 17:51.100
给干嘛啊

17:51.100 --> 17:52.100
给他服务化了

17:52.100 --> 17:53.100
其实啊

17:53.100 --> 17:54.100
到时候呢

17:54.100 --> 17:55.100
你们听了一课

17:55.100 --> 17:56.100
去看他的那个官网就知道了

17:56.100 --> 17:57.100
行吧

17:57.100 --> 17:58.100
apachi

17:58.100 --> 17:59.100
人呢

17:59.100 --> 18:01.100
也是这个软件的一个

18:01.100 --> 18:02.100
作者之一

18:02.100 --> 18:03.100
好不好

18:03.100 --> 18:04.100
所以啊就是

18:04.100 --> 18:06.100
他非常有影响力啊

18:06.100 --> 18:08.100
就是他当时发完这篇论文之后呢

18:08.100 --> 18:10.100
就引起了这个业界的关注

18:10.100 --> 18:11.100
啊并且呢

18:11.100 --> 18:13.100
并且对这个互联网的开发呢

18:13.100 --> 18:15.100
产生了深远的影响

18:15.100 --> 18:17.100
那时至今日这个api的开发呢

18:17.100 --> 18:19.100
基本上啊都是遵循

18:19.100 --> 18:21.100
他所提出的rest

18:21.100 --> 18:22.100
rest的这个原则

18:22.100 --> 18:23.100
提出的这个规范

18:23.100 --> 18:24.100
去进行开发的

18:24.100 --> 18:25.100
所以说

18:25.100 --> 18:26.100
这个人呢

18:26.100 --> 18:28.100
是非常非常了不得的

18:28.100 --> 18:30.100
人家有先见之明

18:30.100 --> 18:32.100
那我们简单在这儿要去说一下

18:32.100 --> 18:34.100
就是他提出的这个rest呢

18:34.100 --> 18:35.100
或者说他的论文当中呢

18:35.100 --> 18:37.100
这个观点是什么呢

18:37.100 --> 18:38.100
他其实

18:38.100 --> 18:39.100
研究的就是

18:39.100 --> 18:40.100
软件跟网络的交叉点

18:40.100 --> 18:41.100
咱们需要去解释

18:41.100 --> 18:42.100
互联网

18:42.100 --> 18:43.100
软件架构

18:43.100 --> 18:44.100
这个概念了

18:44.100 --> 18:45.100
好吧

18:45.100 --> 18:46.100
好在这儿呢

18:46.100 --> 18:47.100
你就知道了啊

18:47.100 --> 18:49.100
他研究的是什么呢

18:49.100 --> 18:50.100
就是这个

18:50.100 --> 18:52.100
软件跟网络的一个交叉点

18:52.100 --> 18:53.100
关于这个呢

18:53.100 --> 18:54.100
咱们要去说一下

18:54.100 --> 18:55.100
就是啊

18:55.100 --> 18:56.100
我们就拿这个咱们

18:56.100 --> 18:58.100
前端开发人员来说吧

18:58.100 --> 18:59.100
在以前啊

18:59.100 --> 19:01.100
在以前咱们仅仅是跟谁啊

19:01.100 --> 19:02.100
跟网站去打交道

19:02.100 --> 19:03.100
是不是

19:03.100 --> 19:04.100
我们写的这些东西呢

19:04.100 --> 19:06.100
其实都是来实现一个网站的啊

19:06.100 --> 19:08.100
那自打这个安卓系统

19:08.100 --> 19:09.100
或者说自打这个

19:09.100 --> 19:10.100
移动端吧

19:10.100 --> 19:11.100
移动端

19:11.100 --> 19:12.100
这个问世之后呢

19:12.100 --> 19:13.100
像安卓系统

19:13.100 --> 19:14.100
还有这个苹果系统

19:14.100 --> 19:15.100
出来之后呢

19:15.100 --> 19:16.100
我们的前端人员

19:16.100 --> 19:19.100
可不单单是跟网站打交道了

19:19.100 --> 19:20.100
还有跟什么呢

19:20.100 --> 19:21.100
app

19:21.100 --> 19:22.100
或者说app

19:22.100 --> 19:23.100
application

19:23.100 --> 19:24.100
这些软件打交道了

19:24.100 --> 19:26.100
我不知道在做的同学有没有

19:26.100 --> 19:27.100
哪位小伙伴呢

19:27.100 --> 19:28.100
是做这个的啊

19:28.100 --> 19:29.100
肯定是有的

19:30.100 --> 19:31.100
那这个呢

19:31.100 --> 19:32.100
其实就相当于说是

19:32.100 --> 19:33.100
软件开发了

19:33.100 --> 19:34.100
知道吧

19:34.100 --> 19:35.100
软件开发

19:35.100 --> 19:36.100
跟我们的网络开发呢

19:36.100 --> 19:38.100
它是有很大的一些区别的啊

19:38.100 --> 19:39.100
啊

19:39.100 --> 19:40.100
那人家这个啊

19:40.100 --> 19:41.100
这个博士

19:41.100 --> 19:43.100
他提出的这个观点呢

19:43.100 --> 19:46.100
其实就是想要让网络开发的方式

19:46.100 --> 19:49.100
向软件开发的方式去靠拢

19:49.100 --> 19:50.100
所以说呢

19:50.100 --> 19:52.100
会有一个什么的互联网

19:52.100 --> 19:53.100
软件架构

19:53.100 --> 19:55.100
理解这个意思了吧

19:56.100 --> 19:58.100
所以人家提出了这个rest

19:58.100 --> 19:59.100
这个概念啊

19:59.100 --> 20:00.100
会说是一个规范吧

20:00.100 --> 20:01.100
啊

20:01.100 --> 20:02.100
那然后呢

20:02.100 --> 20:03.100
接下来咱们要去说一下

20:03.100 --> 20:04.100
他本身好不好

20:04.100 --> 20:05.100
那这个rest呢

20:05.100 --> 20:07.100
他那并不是一个单词啊

20:07.100 --> 20:08.100
他是一个简称

20:08.100 --> 20:10.100
那他的一个全称呢

20:10.100 --> 20:12.100
全称是这个啊

20:12.100 --> 20:13.100
是这个

20:13.100 --> 20:14.100
放到这

20:14.100 --> 20:15.100
然后呢

20:15.100 --> 20:18.600
他其实还缺了一个resource

20:18.600 --> 20:20.600
这是一个主语

20:20.600 --> 20:21.600
一会儿呢

20:21.600 --> 20:22.600
咱们就会讲到了啊

20:22.600 --> 20:23.600
resource

20:23.600 --> 20:24.600
这一串呢

20:24.600 --> 20:25.600
非常的长

20:25.600 --> 20:26.600
对吧

20:26.600 --> 20:27.600
然后呢

20:27.600 --> 20:28.600
他们简称

20:28.600 --> 20:29.600
称之为rest

20:29.600 --> 20:30.600
那这个东西呢

20:30.600 --> 20:31.600
翻译过来叫啥呀

20:31.600 --> 20:33.600
如果说我们硬去翻译的话

20:33.600 --> 20:34.600
翻译过来叫

20:34.600 --> 20:36.600
资源表现层

20:36.600 --> 20:37.600
状态转移

20:37.600 --> 20:38.600
这有没有啊

20:38.600 --> 20:40.600
你看啊

20:40.600 --> 20:41.600
表述性

20:41.600 --> 20:42.600
状态

20:42.600 --> 20:43.600
传递

20:43.600 --> 20:45.600
转移反正跟我讲的差不多

20:45.600 --> 20:46.600
那么一个意思

20:46.600 --> 20:48.600
然后如果说再详细一点讲

20:48.600 --> 20:50.600
还有人管他叫什么呢

20:50.600 --> 20:52.600
资源在网络中

20:52.600 --> 20:55.600
以某种表现形式

20:55.600 --> 20:57.600
进行状态转移

20:57.600 --> 20:58.600
那这个翻译呢

20:58.600 --> 20:59.600
恐怕大家是听不懂

20:59.600 --> 21:00.600
太灰色了

21:00.600 --> 21:01.600
感觉呢

21:01.600 --> 21:02.600
他不是人话

21:02.600 --> 21:03.600
是吧

21:03.600 --> 21:04.600
那我们的一贯作风

21:04.600 --> 21:06.600
就是要讲人话啊

21:06.600 --> 21:07.600
要通促来讲

21:07.600 --> 21:08.600
通促来讲呢

21:08.600 --> 21:09.600
就是说

21:09.600 --> 21:10.600
他是啥

21:10.600 --> 21:11.600
他其实就是一个互联网

21:11.600 --> 21:12.600
就是我们刚才在这

21:12.600 --> 21:13.600
所说的互联网

21:13.600 --> 21:15.600
软件架构的一个

21:15.600 --> 21:16.600
设计规范

21:16.600 --> 21:18.600
这个规范

21:18.600 --> 21:19.600
就是人家所提出来了

21:19.600 --> 21:20.600
这个规范呢

21:20.600 --> 21:22.600
结构清晰

21:22.600 --> 21:23.600
符合标准

21:23.600 --> 21:24.600
意义理解

21:24.600 --> 21:25.600
扩展方便

21:25.600 --> 21:26.600
所以说

21:26.600 --> 21:27.600
得到了

21:27.600 --> 21:29.600
越来越多网站的采用

21:29.600 --> 21:31.600
越来越多的开发者呢

21:31.600 --> 21:32.600
都依据他的规范

21:32.600 --> 21:35.600
去给咱们提供API

21:36.600 --> 21:37.600
这么去讲的话

21:37.600 --> 21:39.600
应该是能理解了吧

21:39.600 --> 21:41.600
就像我们刚才所说的

21:41.600 --> 21:42.600
这个微博啊

21:42.600 --> 21:44.600
微信啊这些开放平台

21:44.600 --> 21:46.600
他们所对外提供的那些接口

21:46.600 --> 21:47.600
其实都是遵循了人家

21:47.600 --> 21:50.600
Restful API的这种规范

21:50.600 --> 21:51.600
理解了吧

21:51.600 --> 21:52.600
好

21:52.600 --> 21:53.600
然后呢

21:53.600 --> 21:54.600
接下来

21:54.600 --> 21:55.600
我们想要去理解

21:55.600 --> 21:56.600
这个Rest的话

21:56.600 --> 21:57.600
咱就需要把这几个单词

21:57.600 --> 21:58.600
给他拆开

21:58.600 --> 21:59.600
挨个了去

21:59.600 --> 22:00.600
解释一下

22:00.600 --> 22:01.600
好不好

22:01.600 --> 22:04.600
来 第一个resource

22:04.600 --> 22:05.600
我在下面写了

22:06.600 --> 22:08.600
这个resource呢

22:08.600 --> 22:09.600
它叫啥

22:09.600 --> 22:10.600
叫资源

22:10.600 --> 22:14.960
资源

22:14.960 --> 22:16.960
所谓这个资源呢

22:16.960 --> 22:18.960
就是在网络上

22:18.960 --> 22:20.960
它是一个具体的一个信息

22:20.960 --> 22:22.960
它可以是一段文本

22:22.960 --> 22:23.960
可以是一张图片

22:23.960 --> 22:25.960
可以是一首歌曲

22:25.960 --> 22:26.960
可以是一种服务

22:26.960 --> 22:27.960
那这些呢

22:27.960 --> 22:30.960
统称为资源

22:30.960 --> 22:32.960
每个资源呢

22:32.960 --> 22:33.960
都会有一个东西

22:33.960 --> 22:34.960
叫做URI

22:34.960 --> 22:36.960
注意URI

22:36.960 --> 22:37.960
好吧

22:37.960 --> 22:38.960
URI

22:38.960 --> 22:39.960
这个URI呢

22:39.960 --> 22:40.960
是指向这个资源的

22:40.960 --> 22:41.960
每一种资源呢

22:41.960 --> 22:43.960
都会对应一个特定的URI

22:43.960 --> 22:45.960
你想要获取到这个资源的话

22:45.960 --> 22:47.960
你通过访问

22:47.960 --> 22:48.960
他的URI

22:48.960 --> 22:50.960
就能够取到这个资源了

22:50.960 --> 22:52.960
在这里一定要注意

22:52.960 --> 22:54.960
你们平时见过的是URI

22:54.960 --> 22:55.960
我估计

22:55.960 --> 22:57.960
很多人没有见过这个URI

22:57.960 --> 22:58.960
是不是

22:58.960 --> 22:59.960
这两个东西呢

22:59.960 --> 23:00.960
咱们需要去解释一下

23:00.960 --> 23:02.960
来解释一下

23:02.960 --> 23:04.960
这个URI呢

23:04.960 --> 23:05.960
是什么呢

23:05.960 --> 23:06.960
URI

23:06.960 --> 23:07.960
资源

23:07.960 --> 23:09.960
统一资源什么的

23:09.960 --> 23:13.720
标识服

23:13.720 --> 23:15.720
它呢是一个自服串

23:15.720 --> 23:16.720
是一个自服串啊

23:16.720 --> 23:18.720
用来标识

23:18.720 --> 23:20.720
互联网

23:20.720 --> 23:22.720
互联网

23:22.720 --> 23:24.720
资源的名称

23:24.720 --> 23:26.720
这个呢就叫URI

23:26.720 --> 23:28.720
然后呢这个URI呢

23:28.720 --> 23:29.720
URI呢

23:29.720 --> 23:31.720
统一资源

23:31.720 --> 23:33.720
资源什么的定位服

23:33.720 --> 23:35.720
然后呢

23:35.720 --> 23:37.720
它是一种具体的

23:37.720 --> 23:39.720
URI

23:39.720 --> 23:41.720
不理解吧

23:41.720 --> 23:43.720
解释一下啊

23:43.720 --> 23:45.720
我举一个例子

23:45.720 --> 23:47.720
就好比咱们学这个

23:47.720 --> 23:49.720
原生GS当中的这个面向对象

23:49.720 --> 23:51.720
面向对象当中咱们讲过这个

23:51.720 --> 23:52.720
构造函数

23:52.720 --> 23:53.720
是不是啊

23:53.720 --> 23:54.720
我们说这个构造函数呢

23:54.720 --> 23:56.720
它是可以去生成这个实力的

23:56.720 --> 23:57.720
那其实在这呢

23:57.720 --> 23:58.720
这个URI呢

23:58.720 --> 24:00.720
就好比是一个构造函数

24:00.720 --> 24:01.720
而这个URI呢

24:01.720 --> 24:02.720
就好比啊

24:02.720 --> 24:04.720
构造函数生成的实力

24:04.720 --> 24:05.720
理解吧

24:05.720 --> 24:06.720
也就是说它是爹

24:06.720 --> 24:07.720
它是儿子

24:07.720 --> 24:09.720
明白这个意思吧

24:09.720 --> 24:10.720
这么去讲的话

24:10.720 --> 24:12.720
应该是瞬间就能够理解了

24:12.720 --> 24:13.720
也就是说啊

24:13.720 --> 24:14.720
我一个资源

24:14.720 --> 24:15.720
它其实是有一个什么呢

24:15.720 --> 24:16.720
有一个地址的

24:16.720 --> 24:18.720
那这个是定义了这个地址

24:18.720 --> 24:19.720
是不是

24:19.720 --> 24:21.720
那这个地址具体的表现是多少呢

24:21.720 --> 24:22.720
URI

24:22.720 --> 24:23.720
理解吧

24:23.720 --> 24:25.720
它是一个更高范图的这么一个抽象的

24:25.720 --> 24:26.720
一个东西啊

24:26.720 --> 24:27.720
构造函数

24:27.720 --> 24:29.720
这是一个实实在在的一个实力啊

24:30.720 --> 24:32.720
资源呢是一个互联网的

24:32.720 --> 24:33.720
基本组成部分

24:33.720 --> 24:34.720
咱们平时上网

24:34.720 --> 24:35.720
所谓上网了

24:35.720 --> 24:36.720
就是说啊

24:36.720 --> 24:37.720
我们在互联网上啊

24:37.720 --> 24:40.720
跟一系列的资源进行互动

24:40.720 --> 24:41.720
然后呢

24:41.720 --> 24:43.720
调用的是他们的URI

24:43.720 --> 24:44.720
知道吧

24:44.720 --> 24:45.720
因为通过它

24:45.720 --> 24:46.720
就能够找到这个资源啊

24:46.720 --> 24:47.720
好

24:47.720 --> 24:48.720
这是第一个资源

24:48.720 --> 24:49.720
一会呢

24:49.720 --> 24:50.720
我知道

24:50.720 --> 24:51.720
就是这几个概念呢

24:51.720 --> 24:52.720
是时候

24:52.720 --> 24:53.720
稍微有些抽象啊

24:53.720 --> 24:54.720
没有关系

24:54.720 --> 24:55.720
咱们最后呢

24:55.720 --> 24:56.720
用通俗的话呢

24:56.720 --> 24:57.720
把这几个概念

24:57.720 --> 24:58.720
给它串起来

24:58.720 --> 24:59.720
好不好

24:59.720 --> 25:00.720
来

25:00.720 --> 25:01.720
第二个

25:01.720 --> 25:02.720
就是这个

25:02.720 --> 25:03.720
非常长的这个单词啊

25:03.720 --> 25:04.720
读起来

25:04.720 --> 25:05.720
特别的拗口啊

25:05.720 --> 25:06.720
我就不读了啊

25:06.720 --> 25:07.720
然后呢

25:07.720 --> 25:08.720
这个东西叫啥

25:08.720 --> 25:09.720
它叫表现层

25:09.720 --> 25:11.720
表现层

25:11.720 --> 25:12.720
表现层

25:12.720 --> 25:13.720
又是一个灰色的概念

25:13.720 --> 25:14.720
是不是

25:14.720 --> 25:15.720
我就不愿意讲这个东西

25:15.720 --> 25:16.720
但是没办法

25:16.720 --> 25:17.720
所以说呢

25:17.720 --> 25:18.720
不得不去讲啊

25:18.720 --> 25:19.720
好

25:19.720 --> 25:20.720
来咱们再来说啊

25:20.720 --> 25:21.720
刚才你说

25:21.720 --> 25:22.720
这个资源在互联网当中呢

25:22.720 --> 25:23.720
一个东西

25:23.720 --> 25:24.720
实实在的东西

25:24.720 --> 25:25.720
就是一个资源

25:25.720 --> 25:26.720
是不是

25:26.720 --> 25:27.720
OK

25:27.720 --> 25:28.720
那这个资源呢

25:28.720 --> 25:29.720
我们通过这个URI啊

25:29.720 --> 25:30.720
通过URI

25:30.720 --> 25:32.720
代表的是资源的一个位置

25:32.720 --> 25:33.720
但是

25:33.720 --> 25:35.720
仅仅是代表它的一个位置

25:35.720 --> 25:37.720
它可不代表这个资源的

25:37.720 --> 25:38.720
表现形式

25:38.720 --> 25:39.720
注意听

25:39.720 --> 25:40.720
这稍微确实是有

25:40.720 --> 25:41.720
有一些绕的啊

25:41.720 --> 25:43.720
而一个资源

25:43.720 --> 25:45.720
可是它是可以有多种

25:45.720 --> 25:47.720
表现形式的

25:47.720 --> 25:49.720
我们把资源的具体

25:49.720 --> 25:51.720
呈现出来的形式

25:51.720 --> 25:53.720
叫做它的表现层

25:53.720 --> 25:55.720
或者说叫做这个资源的

25:55.720 --> 25:56.720
表现形式

25:56.720 --> 25:57.720
我举上一个例子

25:57.720 --> 25:59.720
大家瞬间就能够明白了

25:59.720 --> 26:01.720
比方说

26:01.720 --> 26:02.720
文本

26:02.720 --> 26:03.720
那为你

26:03.720 --> 26:05.720
文本是不是一个资源

26:05.720 --> 26:06.720
必须是吧

26:06.720 --> 26:07.720
刚才咱们已经说了

26:07.720 --> 26:08.720
你眼睛看到了

26:08.720 --> 26:09.720
看不到了

26:09.720 --> 26:10.720
其实都是资源

26:10.720 --> 26:11.720
那文本绝对是一个资源

26:11.720 --> 26:12.720
那好

26:12.720 --> 26:14.720
那这个资源

26:14.720 --> 26:15.720
我怎么通

26:15.720 --> 26:16.720
通过什么形式

26:16.720 --> 26:17.720
去表现它的呢

26:17.720 --> 26:19.720
有很多的方式

26:19.720 --> 26:20.720
我是不是

26:20.720 --> 26:22.720
可以通过TXT

26:22.720 --> 26:23.720
这是一个文档吧

26:23.720 --> 26:24.720
文档的一个东西

26:24.720 --> 26:25.720
我通过它

26:25.720 --> 26:27.720
能不能表现文本啊

26:27.720 --> 26:28.720
可以吧

26:28.720 --> 26:30.720
那我通过这个呢

26:30.720 --> 26:32.720
html

26:32.720 --> 26:34.720
能不能表现它

26:34.720 --> 26:36.720
不要这个点吧

26:36.720 --> 26:38.720
html能不能代表文本

26:38.720 --> 26:39.720
必须可以吧

26:39.720 --> 26:40.720
然后呢

26:40.720 --> 26:41.720
再来我通过

26:41.720 --> 26:42.720
Jason

26:42.720 --> 26:44.720
还有一种格式

26:44.720 --> 26:45.720
叫xml

26:45.720 --> 26:46.720
这个呢

26:46.720 --> 26:47.720
可能大家不熟悉

26:47.720 --> 26:48.720
你知道就行了

26:48.720 --> 26:49.720
还有另外一个熟悉的

26:49.720 --> 26:50.720
Jason

26:50.720 --> 26:51.720
你看

26:51.720 --> 26:53.720
甚至你还可以通过二进制

26:53.720 --> 26:56.160
二进制

26:56.160 --> 26:59.160
都能够去表现一个文本

26:59.160 --> 27:00.160
所以说呢

27:00.160 --> 27:02.160
一个资源

27:02.160 --> 27:03.160
URI

27:03.160 --> 27:05.160
仅仅是它的一个

27:05.160 --> 27:06.160
标识符

27:06.160 --> 27:07.160
但是这个东西呢

27:07.160 --> 27:08.160
具体它应该怎么呈现

27:08.160 --> 27:10.160
需要通过表现层

27:10.160 --> 27:11.160
来决定

27:11.160 --> 27:12.160
那一个资源

27:12.160 --> 27:14.160
它有很多个表现形式

27:14.160 --> 27:15.160
你看一个文本

27:15.160 --> 27:16.160
我就可以通过这种形式

27:16.160 --> 27:17.160
这些形式

27:17.160 --> 27:18.160
都能够去表现它

27:18.160 --> 27:19.160
以及呢

27:19.160 --> 27:21.160
比如说我们熟悉的图片

27:21.160 --> 27:22.160
那图片你可以通过

27:22.160 --> 27:23.160
jpg去表现它

27:23.160 --> 27:24.160
也可以通过

27:24.160 --> 27:26.160
png去表现它

27:26.160 --> 27:27.160
能理解这个意思吧

27:27.160 --> 27:28.160
那其实

27:28.160 --> 27:29.160
表现层呢

27:29.160 --> 27:31.160
我们在这个http协议当中

27:31.160 --> 27:32.160
是有说过的

27:32.160 --> 27:33.160
知道吗

27:33.160 --> 27:34.160
来咱来看一下

27:34.160 --> 27:35.160
回顾一下

27:35.160 --> 27:36.160
比如说这个啊

27:36.160 --> 27:37.160
这个我刷新一下

27:37.160 --> 27:39.160
我们看一下这个network

27:39.160 --> 27:40.160
然后咱们随便找

27:40.160 --> 27:42.160
随便找啊

27:42.160 --> 27:43.160
比如说这个

27:43.160 --> 27:44.160
best.js

27:44.160 --> 27:45.160
那好吧

27:45.160 --> 27:46.160
它呢是个啥

27:46.160 --> 27:47.160
它的一个表现层呢

27:47.160 --> 27:48.160
我们在协议当中

27:48.160 --> 27:51.160
这有一个content type

27:51.160 --> 27:52.160
看到吗

27:52.160 --> 27:53.160
这个呢其实就是

27:53.160 --> 27:54.160
表现层

27:54.160 --> 27:55.160
它具体的一个呈现的方式

27:55.160 --> 27:56.160
它是一个什么呢

27:56.160 --> 27:57.160
是一个文本

27:57.160 --> 27:58.160
那是一个文本

27:58.160 --> 27:59.160
我通过什么去呈现呢

27:59.160 --> 28:00.160
通过javascript

28:00.160 --> 28:02.160
它就是一个js

28:02.160 --> 28:03.160
看到吗

28:03.160 --> 28:04.160
然后呢比如说啊

28:04.160 --> 28:05.160
我们这个啊

28:05.160 --> 28:06.160
这个呢

28:06.160 --> 28:07.160
这是网页的一个小图标

28:07.160 --> 28:08.160
知道吧就是这个

28:08.160 --> 28:09.160
小图标

28:09.160 --> 28:10.160
好你看它啊

28:10.160 --> 28:11.160
它也是有的

28:11.160 --> 28:13.160
它有一个content type

28:13.160 --> 28:14.160
content type

28:14.160 --> 28:15.160
在哪在这

28:15.160 --> 28:16.160
是吧

28:16.160 --> 28:17.160
它是一张图片

28:17.160 --> 28:18.160
是一张图片呢

28:18.160 --> 28:19.160
但是这个图片

28:19.160 --> 28:20.160
我通过什么去呈现

28:20.160 --> 28:22.160
它呢通过icone的

28:22.160 --> 28:23.160
这种形式

28:23.160 --> 28:24.160
表现形式

28:24.160 --> 28:25.160
去呈现它

28:25.160 --> 28:26.160
比如说这个

28:26.160 --> 28:27.160
这个jif

28:27.160 --> 28:28.160
是不是啊

28:28.160 --> 28:29.160
那这个jif呢

28:29.160 --> 28:30.160
我们再来看啊

28:30.160 --> 28:31.160
它呢类型

28:31.160 --> 28:32.160
是不是

28:32.160 --> 28:33.160
它是一张图片

28:33.160 --> 28:34.160
那我通过什么格式

28:34.160 --> 28:35.160
通过什么形式

28:35.160 --> 28:36.160
去展现它

28:36.160 --> 28:37.160
通过jif

28:37.160 --> 28:38.160
去展现它

28:38.160 --> 28:39.160
这个呢

28:39.160 --> 28:40.160
就叫什么呢

28:40.160 --> 28:41.160
表现层

28:43.160 --> 28:44.160
好

28:44.160 --> 28:45.160
表现层咱就过了

28:45.160 --> 28:46.160
来继续啊

28:46.160 --> 28:47.160
咱一个一个

28:47.160 --> 28:48.160
把他们啃下来啊

28:48.160 --> 28:49.160
难啃的骨头

28:49.160 --> 28:50.160
照样啃

28:50.160 --> 28:51.160
来继续

28:51.160 --> 28:52.160
第三个

28:52.160 --> 28:53.160
第三个

28:53.160 --> 28:54.160
然后呢

28:55.160 --> 28:56.160
放在一起

28:56.160 --> 28:57.160
这个东西呢

28:57.160 --> 28:58.160
叫什么呢

28:58.160 --> 28:59.160
状态

28:59.160 --> 29:00.160
状态什么呢

29:00.160 --> 29:01.160
转化

29:02.160 --> 29:03.160
状态转化

29:03.160 --> 29:04.160
这啥意思啊

29:04.160 --> 29:05.160
互联网

29:05.160 --> 29:06.160
他的一个通信的协议

29:06.160 --> 29:08.160
是不是http啊

29:08.160 --> 29:09.160
之前有说过

29:09.160 --> 29:10.160
是吧

29:10.160 --> 29:11.160
http协议呢

29:11.160 --> 29:12.160
是一个什么呢

29:12.160 --> 29:13.160
无状态的协议

29:13.160 --> 29:14.160
那这就意味着

29:14.160 --> 29:15.160
就是所有的状态呢

29:15.160 --> 29:16.160
其实我们前端

29:16.160 --> 29:17.160
是没法去跟踪的

29:17.160 --> 29:19.160
它都是保存在服务器端

29:19.160 --> 29:21.160
那如果说我们的

29:21.160 --> 29:22.160
这个客户端

29:22.160 --> 29:23.160
也就是我们前端吧

29:23.160 --> 29:24.160
他想要去操作

29:24.160 --> 29:26.160
想要去改变那个状态

29:26.160 --> 29:27.160
怎么办啊

29:27.160 --> 29:29.160
是有方法的

29:29.160 --> 29:30.160
什么方法呢

29:30.160 --> 29:32.160
啊其实我们通过的方法

29:32.160 --> 29:34.160
就是http当中

29:34.160 --> 29:35.160
给咱们提供的

29:35.160 --> 29:36.160
请求方式

29:36.160 --> 29:37.160
请求的方式

29:37.160 --> 29:38.160
咱们熟知的什么

29:38.160 --> 29:39.160
概调posed

29:39.160 --> 29:40.160
是不是

29:40.160 --> 29:41.160
当然他不止这些啊

29:41.160 --> 29:42.160
那我们通过

29:42.160 --> 29:43.160
这些方式呢

29:43.160 --> 29:44.160
其实是能够

29:44.160 --> 29:45.160
改变这个什么呢

29:45.160 --> 29:47.160
改变他的一个状态的

29:49.160 --> 29:50.160
什么意思呢

29:50.160 --> 29:51.160
咱们细说啊

29:51.160 --> 29:52.160
什么意思啊

29:52.160 --> 29:53.160
是这样的

29:53.160 --> 29:54.160
呃

29:54.160 --> 29:55.160
比如说啊

29:55.160 --> 29:56.160
这个文本

29:56.160 --> 29:57.160
这个文本呢

29:57.160 --> 29:58.160
然后呢

29:58.160 --> 29:59.160
他是一个json

29:59.160 --> 30:00.160
然后呢

30:00.160 --> 30:01.160
这个json呢

30:01.160 --> 30:02.160
我通过这个api

30:02.160 --> 30:03.160
是不是咱们前端

30:03.160 --> 30:04.160
啊拿到

30:04.160 --> 30:05.160
拿到之后呢

30:05.160 --> 30:06.160
其实这个时候呢

30:06.160 --> 30:07.160
我们是通过guide

30:07.160 --> 30:08.160
是不是guide

30:08.160 --> 30:09.160
其实就是请求

30:09.160 --> 30:10.160
也就是说

30:10.160 --> 30:11.160
他现在是

30:11.160 --> 30:12.160
被请求的一个状态

30:12.160 --> 30:13.160
然后呢

30:13.160 --> 30:14.160
请求过来之后呢

30:14.160 --> 30:15.160
我们前端对json

30:15.160 --> 30:16.160
进行了一些修改

30:16.160 --> 30:17.160
数据改变了

30:17.160 --> 30:18.160
改变之后呢

30:18.160 --> 30:19.160
我们需要去

30:19.160 --> 30:20.160
在耕金到服务器当中

30:20.160 --> 30:21.160
这个时候呢

30:21.160 --> 30:22.160
就要变成什么的

30:22.160 --> 30:23.160
put

30:23.160 --> 30:24.160
是不是你不能guide

30:24.160 --> 30:25.160
了吧

30:25.160 --> 30:26.160
guide之后呢

30:26.160 --> 30:27.160
你请求过来

30:27.160 --> 30:28.160
还是你原来修改

30:28.160 --> 30:29.160
修改之前的东西啊

30:29.160 --> 30:30.160
你现在已经修改完了

30:30.160 --> 30:31.160
是不是应该put了

30:31.160 --> 30:32.160
所以说呢

30:32.160 --> 30:33.160
状态的变化

30:33.160 --> 30:34.160
变化

30:34.160 --> 30:35.160
我们就通过http

30:35.160 --> 30:37.160
当中的这几个请求方式

30:37.160 --> 30:39.160
就能够对他进行一个状态的

30:39.160 --> 30:40.160
改变了

30:40.160 --> 30:41.160
好吧

30:41.160 --> 30:42.160
行

30:42.160 --> 30:43.160
到这呢

30:43.160 --> 30:44.160
我们算是把这三个概念

30:44.160 --> 30:45.160
给他说完了

30:45.160 --> 30:46.160
我估计大家呢

30:46.160 --> 30:47.160
嗯

30:47.160 --> 30:48.160
是云理物理吧

30:48.160 --> 30:49.160
是吧

30:49.160 --> 30:50.160
那在这呢

30:50.160 --> 30:52.160
我简单的做一个总结

30:52.160 --> 30:53.160
咱把它串起来

30:53.160 --> 30:55.160
大家就能够理解了

30:55.160 --> 30:57.160
这三个概念呢

30:57.160 --> 30:59.160
共同组成了这个rest

30:59.160 --> 31:02.160
人家这个博士所提供的

31:02.160 --> 31:04.160
所提出的这个概念

31:04.160 --> 31:05.160
rest

31:05.160 --> 31:07.160
由他们三共同组成

31:07.160 --> 31:09.160
那我们可以这么去理解

31:09.160 --> 31:11.160
在网络上

31:11.160 --> 31:13.160
你肉眼能够看到的

31:13.160 --> 31:14.160
以及看不到的东西呢

31:14.160 --> 31:16.160
都称之为资源

31:16.160 --> 31:17.160
一张图片啊

31:17.160 --> 31:18.160
一个音乐啊

31:18.160 --> 31:19.160
这些都是一个资源

31:19.160 --> 31:20.160
然后呢

31:20.160 --> 31:21.160
每一个资源呢

31:21.160 --> 31:22.160
都会有一个自己

31:22.160 --> 31:23.160
所特定的

31:23.160 --> 31:24.160
URI

31:25.160 --> 31:26.160
然后呢

31:26.160 --> 31:27.160
这些资源呢

31:27.160 --> 31:28.160
我们眼睛所看到

31:28.160 --> 31:31.160
他有一个具体的表现形式

31:31.160 --> 31:33.160
那具体的表现形式呢

31:33.160 --> 31:34.160
是不是

31:34.160 --> 31:35.160
有很多的方式

31:35.160 --> 31:37.160
特别的多

31:37.160 --> 31:38.160
然后呢

31:38.160 --> 31:39.160
同时

31:39.160 --> 31:40.160
这些资源

31:40.160 --> 31:42.160
我们是可以进行操作的

31:42.160 --> 31:43.160
通过什么操作呢

31:43.160 --> 31:45.160
就是通过我们前后端的

31:45.160 --> 31:46.160
数据交互

31:46.160 --> 31:48.160
其实就是通过API

31:48.160 --> 31:50.160
来进行操作的

31:50.160 --> 31:51.160
嗯

31:51.160 --> 31:52.160
也就是说

31:52.160 --> 31:54.160
我们前后端

31:54.160 --> 31:56.160
互相可以

31:56.160 --> 31:58.160
传送这些资源

31:58.160 --> 32:01.160
那具体的操作方式是什么呢

32:01.160 --> 32:02.160
就是要通过我们

32:02.160 --> 32:05.160
http协议当中的那几种

32:05.160 --> 32:06.160
请求

32:06.160 --> 32:08.160
那几种请求的方式

32:08.160 --> 32:09.160
什么

32:09.160 --> 32:10.160
get

32:10.160 --> 32:11.160
posed就是那些

32:11.160 --> 32:12.160
懂吗

32:12.160 --> 32:13.160
这个呢就叫

32:13.160 --> 32:14.160
rest

32:14.160 --> 32:15.160
也可以说

32:15.160 --> 32:16.160
这是一个rest

32:16.160 --> 32:17.160
原则

32:17.160 --> 32:19.160
那只要你符合了

32:19.160 --> 32:21.160
这个原则呢

32:21.160 --> 32:23.160
就称上为称称

32:23.160 --> 32:26.160
称它为restful架构

32:26.160 --> 32:30.260
能理解吗

32:30.260 --> 32:31.260
看到这儿的小伙伴啊

32:31.260 --> 32:32.260
要蒙的话

32:32.260 --> 32:33.260
你可以暂停

32:33.260 --> 32:34.260
然后呢

32:34.260 --> 32:35.260
再仔细的品味一下啊

32:35.260 --> 32:36.260
自己呢

32:36.260 --> 32:37.260
试着去消化一下

32:37.260 --> 32:39.260
那我们就继续往下说了啊

32:39.260 --> 32:41.260
咱不能耽误时间啊

32:41.260 --> 32:42.260
来

32:42.260 --> 32:44.260
那我们刚才所说的是一个

32:44.260 --> 32:45.260
是一套rest

32:45.260 --> 32:46.260
他的一个原则

32:46.260 --> 32:47.260
是不是

32:47.260 --> 32:49.260
那关于这个restfulAPI呢

32:49.260 --> 32:51.260
它是有一些具体的

32:51.260 --> 32:52.260
设计规范的啊

32:52.260 --> 32:54.260
你像我们的这个标准是吧

32:54.260 --> 32:55.260
标准外部的标准

32:55.260 --> 32:56.260
他也是有一些具体的

32:56.260 --> 32:58.260
他不光全都是思想上的东西啊

32:58.260 --> 32:59.260
你比如说

32:59.260 --> 33:00.260
这个标准

33:00.260 --> 33:02.260
我们标签你是不是要笔合呀

33:02.260 --> 33:03.260
必须要笔合

33:03.260 --> 33:04.260
这个呢其实就是一个

33:04.260 --> 33:05.260
具体的一个啊

33:05.260 --> 33:07.260
设计的一个规范了

33:07.260 --> 33:08.260
那这个restfulAPI呢

33:08.260 --> 33:10.260
其实他也是有具体的

33:10.260 --> 33:11.260
设计规范的啊

33:11.260 --> 33:12.260
那我们接下来

33:12.260 --> 33:13.260
就花一些时间呢

33:13.260 --> 33:14.260
去介绍一些

33:14.260 --> 33:16.260
他具体的一些设计规范

33:16.260 --> 33:17.260
好吧

33:17.260 --> 33:18.260
但是在这儿有一个

33:18.260 --> 33:20.260
就是这个API这个接扣

33:20.260 --> 33:21.260
这个东西呢

33:21.260 --> 33:23.260
我们前端是没有办法去设计的

33:23.260 --> 33:24.260
所以说呢

33:24.260 --> 33:25.260
这个东西呢

33:25.260 --> 33:27.260
他主要是偏后端啊

33:27.260 --> 33:28.260
因为这个API呢

33:28.260 --> 33:29.260
都是后端来设计的

33:29.260 --> 33:30.260
所以说呢

33:30.260 --> 33:31.260
这些规范

33:31.260 --> 33:33.260
其实都是针对后端去做的

33:33.260 --> 33:35.260
我们前端是操作不了的

33:35.260 --> 33:38.260
但是前端要看得懂

33:38.260 --> 33:39.260
用的明白

33:39.260 --> 33:41.260
所以你还需要去学

33:41.260 --> 33:42.260
懂吗

33:42.260 --> 33:43.260
在这儿呢

33:43.260 --> 33:44.260
我写上一句话啊

33:44.260 --> 33:47.260
restfulrestfulAPI

33:47.260 --> 33:52.260
具体设计规范

33:52.260 --> 33:53.260
来都哪些呢

33:53.260 --> 33:54.260
挺多的啊

33:54.260 --> 33:55.260
咱们拿出几个呢

33:55.260 --> 33:56.260
说一下啊

33:56.260 --> 33:57.260
第一个呢

33:57.260 --> 33:58.260
就是协议了

33:58.260 --> 33:59.260
协议啊

33:59.260 --> 34:01.260
其实这里头的一些设计规范呢

34:01.260 --> 34:02.260
呃

34:02.260 --> 34:04.260
其实大家很多都熟悉

34:04.260 --> 34:05.260
你知道吗

34:05.260 --> 34:06.260
但是就是不知道

34:06.260 --> 34:07.260
你比如说这个协议

34:07.260 --> 34:08.260
咱都知道吧

34:08.260 --> 34:09.260
协议

34:09.260 --> 34:10.260
知道吧

34:10.260 --> 34:11.260
他其实就是

34:11.260 --> 34:13.260
人家所提出的

34:13.260 --> 34:14.260
理解吧

34:14.260 --> 34:15.260
那这个协议呢

34:15.260 --> 34:16.260
就是restfulAPI呢

34:16.260 --> 34:19.260
他要求我们的通信方式

34:19.260 --> 34:23.260
是https的这个协议

34:23.260 --> 34:25.260
因为这个安全

34:25.260 --> 34:26.260
但是呢

34:26.260 --> 34:27.260
就是这个东西呢

34:27.260 --> 34:28.260
就是有一些麻烦

34:28.260 --> 34:29.260
你要申请

34:29.260 --> 34:30.260
所以说呢

34:30.260 --> 34:32.260
有一些像个人的一些网站啊

34:32.260 --> 34:33.260
小的一些网站呢

34:33.260 --> 34:35.260
就是都没有遵循

34:35.260 --> 34:37.260
他使用的就是http的协议

34:37.260 --> 34:38.260
在这呢

34:38.260 --> 34:39.260
尽量去使用就行了

34:39.260 --> 34:40.260
好不好

34:40.260 --> 34:41.260
来

34:41.260 --> 34:42.260
第二个啊

34:42.260 --> 34:43.260
第二个

34:43.260 --> 34:44.260
第二个呢

34:44.260 --> 34:47.280
是什么呢

34:47.280 --> 34:48.280
预名啊

34:48.280 --> 34:49.280
好预名

34:49.280 --> 34:50.280
那预名呢

34:50.280 --> 34:51.280
就是说

34:51.280 --> 34:53.280
尽量要把这个API

34:53.280 --> 34:55.280
部署到专用的预名之下

34:55.280 --> 34:56.280
比方说啊

34:56.280 --> 34:57.280
咱举上一个例子啊

34:57.280 --> 34:59.280
我有一个自己的预名

34:59.280 --> 35:00.280
https

35:00.280 --> 35:01.280
是啊

35:01.280 --> 35:05.280
3w.caven.com

35:05.280 --> 35:06.280
这是我的一个预名

35:06.280 --> 35:07.280
是不是啊

35:07.280 --> 35:08.280
那我现在呢

35:08.280 --> 35:09.280
比如说我是后端

35:09.280 --> 35:10.280
我要提供一个

35:10.280 --> 35:11.280
对外的一个接口

35:11.280 --> 35:12.280
让别人去获取

35:12.280 --> 35:13.280
比如说获取我的一些

35:13.280 --> 35:14.280
技术文档

35:14.280 --> 35:15.280
好不好

35:15.280 --> 35:16.280
假设的

35:16.280 --> 35:17.280
假设

35:17.280 --> 35:18.280
很牛逼的样子啊

35:18.280 --> 35:19.280
好

35:19.280 --> 35:20.280
然后呢

35:20.280 --> 35:21.280
这是我的预名

35:21.280 --> 35:22.280
是吧

35:22.280 --> 35:23.280
我就需要去开发

35:23.280 --> 35:24.280
我要需要去提供一个

35:24.280 --> 35:25.280
对外的一个接口

35:25.280 --> 35:26.280
那这个接口呢

35:26.280 --> 35:27.280
我就需要把它放到

35:27.280 --> 35:28.280
哪里呢

35:28.280 --> 35:29.280
放到我的这个预名下

35:29.280 --> 35:30.280
但是这个

35:30.280 --> 35:31.280
这个地址呢

35:31.280 --> 35:32.280
应该怎么去给呢

35:32.280 --> 35:33.280
我们应该是API

35:33.280 --> 35:34.280
尽量这么去给

35:35.280 --> 35:36.280
理解吧

35:36.280 --> 35:37.280
这个呢

35:37.280 --> 35:38.280
我把它删掉

35:38.280 --> 35:39.280
这个就是咱对外

35:39.280 --> 35:40.280
提供的一个API的

35:40.280 --> 35:41.280
这个预名

35:41.280 --> 35:43.280
所有对外提供的一些

35:43.280 --> 35:44.280
API

35:44.280 --> 35:45.280
你都需要去

35:45.280 --> 35:47.280
那有的人会想

35:47.280 --> 35:48.280
我简简单单

35:48.280 --> 35:49.280
就一个接口

35:49.280 --> 35:51.280
那其实也没有必要是吧

35:51.280 --> 35:52.280
你可以这样去干

35:52.280 --> 35:53.280
对吧

35:53.280 --> 35:54.280
来把它复制一下

35:54.280 --> 35:55.280
然后呢

35:55.280 --> 35:57.280
这还是

35:57.280 --> 35:58.280
还原成3w

35:58.280 --> 35:59.280
开门

35:59.280 --> 36:00.280
我们再给上一个目录

36:00.280 --> 36:01.280
啊

36:01.280 --> 36:02.280
这个目录呢

36:02.280 --> 36:03.280
叫什么叫API

36:03.280 --> 36:04.280
你把所有的

36:04.280 --> 36:05.280
放到啊

36:05.280 --> 36:06.280
当然你也没几个

36:06.280 --> 36:07.280
是吧

36:07.280 --> 36:08.280
你就放到这个目录下

36:08.280 --> 36:09.280
就行了

36:09.280 --> 36:10.280
这个呢

36:10.280 --> 36:11.280
就是对于预名

36:11.280 --> 36:12.280
他的一个要求啊

36:12.280 --> 36:13.280
来第三个呢

36:13.280 --> 36:16.870
是版本

36:16.870 --> 36:17.870
我们知道这个

36:17.870 --> 36:18.870
API这个东西呢

36:18.870 --> 36:19.870
其实他并不是

36:19.870 --> 36:20.870
一成不变的啊

36:20.870 --> 36:21.870
啊

36:21.870 --> 36:22.870
其实有很多很多的一些接口呢

36:22.870 --> 36:24.870
都是会更新的啊

36:24.870 --> 36:25.870
这个版本会变化的

36:25.870 --> 36:26.870
所以说呢

36:26.870 --> 36:27.870
啊

36:27.870 --> 36:28.870
这个版本号

36:28.870 --> 36:29.870
我们需要去提供

36:29.870 --> 36:30.870
那这个版本呢

36:30.870 --> 36:31.870
怎么去提供呢

36:31.870 --> 36:32.870
是这样的啊

36:32.870 --> 36:33.870
这是你提供的

36:33.870 --> 36:34.870
一个对外接口

36:34.870 --> 36:35.870
是不是啊

36:35.870 --> 36:36.870
好

36:36.870 --> 36:37.870
这个接口下边的

36:37.870 --> 36:38.870
比如说我更新了

36:38.870 --> 36:39.870
现在呢

36:39.870 --> 36:40.870
是第一个版本

36:40.870 --> 36:41.870
我就给上一个v1

36:41.870 --> 36:42.870
在后边跟上一个v1

36:42.870 --> 36:43.870
就行了

36:43.870 --> 36:44.870
明白吧

36:44.870 --> 36:45.870
好

36:45.870 --> 36:46.870
嗯

36:46.870 --> 36:47.870
这个简单啊

36:47.870 --> 36:48.870
来

36:48.870 --> 36:49.870
继续往下啊

36:49.870 --> 36:50.870
你更新完之后呢

36:50.870 --> 36:51.870
你就把这个版本

36:51.870 --> 36:52.870
给他改一下就行了

36:52.870 --> 36:53.870
然后呢

36:53.870 --> 36:54.870
第四个是什么呢

36:54.870 --> 36:55.870
路径

36:55.870 --> 36:56.870
好

36:56.870 --> 36:57.870
说到这个路径呢

36:57.870 --> 36:58.870
就又需要去说一下

36:58.870 --> 36:59.870
这个uh

36:59.870 --> 37:00.870
那这个路径呢

37:00.870 --> 37:01.870
其实

37:01.870 --> 37:02.870
他是干嘛

37:02.870 --> 37:03.870
他其实指的就是

37:03.870 --> 37:04.870
这个资源的一个地址

37:04.870 --> 37:05.870
哎

37:05.870 --> 37:06.870
就是这个资源的一个地址

37:06.870 --> 37:07.870
啊

37:07.870 --> 37:08.870
我们通过这个地址呢

37:08.870 --> 37:10.870
就能够获取到这个资源了

37:10.870 --> 37:11.870
所以说呢

37:11.870 --> 37:12.870
就是你在对外提供呢

37:12.870 --> 37:14.870
这个路径当中呢

37:14.870 --> 37:16.870
是不能够有动词的

37:16.870 --> 37:17.870
只能够有名词

37:17.870 --> 37:18.870
而且呢

37:18.870 --> 37:20.870
所用到的这些名词呢

37:20.870 --> 37:23.870
往往要跟你的数据库的表

37:23.870 --> 37:24.870
他的名是对应的啊

37:24.870 --> 37:25.870
数据库

37:25.870 --> 37:26.870
这个

37:26.870 --> 37:27.870
这个

37:27.870 --> 37:28.870
你们到后边都会去学到的啊

37:28.870 --> 37:29.870
数据库啊

37:29.870 --> 37:30.870
数据库里边呢

37:30.870 --> 37:32.870
其实就是一个表一个表啊

37:32.870 --> 37:33.870
表里头放的

37:33.870 --> 37:34.870
都是所有的一些数据啊

37:34.870 --> 37:35.870
那我们的这个名词呢

37:35.870 --> 37:36.870
就应该跟

37:36.870 --> 37:37.870
表的名字呢

37:37.870 --> 37:38.870
是对应的

37:38.870 --> 37:39.870
那一般情况下

37:39.870 --> 37:40.870
这个表里边呢

37:40.870 --> 37:42.870
放的都是很多个数据

37:42.870 --> 37:43.870
其实就是一个数据的集合

37:43.870 --> 37:44.870
所以说呢

37:44.870 --> 37:45.870
这个API当中呢

37:45.870 --> 37:46.870
这个名词

37:46.870 --> 37:48.870
你应该给上一个附属

37:48.870 --> 37:49.870
比方说

37:49.870 --> 37:50.870
举上一个例子啊

37:50.870 --> 37:52.870
我们还拿这个https

37:52.870 --> 37:54.870
我的这个域名来说啊

37:54.870 --> 37:55.870
呃

37:55.870 --> 37:57.870
API点开门

37:57.870 --> 37:58.870
诶

37:58.870 --> 38:00.870
这缺了一个写杠是吧

38:00.870 --> 38:01.870
开门

38:01.870 --> 38:02.870
点点点什么呢

38:02.870 --> 38:03.870
点com

38:03.870 --> 38:04.870
好

38:04.870 --> 38:06.870
然后在这呢

38:06.870 --> 38:07.870
我们V1

38:07.870 --> 38:08.870
这是版本号啊

38:08.870 --> 38:09.870
V1

38:09.870 --> 38:10.870
接下来呢

38:10.870 --> 38:11.870
我对外提供了一个接口

38:11.870 --> 38:12.870
还是刚才我所说的

38:12.870 --> 38:13.870
那个接口

38:13.870 --> 38:15.870
什么接口呢

38:15.870 --> 38:16.870
让用户去获取到

38:16.870 --> 38:18.870
我所有的技术文章是吧

38:18.870 --> 38:19.870
那这个名字呢

38:19.870 --> 38:21.870
叫blogs

38:21.870 --> 38:22.870
那这个blog呢

38:22.870 --> 38:23.870
其实就是啊

38:23.870 --> 38:24.870
比如说我的数据库当中呢

38:24.870 --> 38:26.870
针对这个技术的文章呢

38:26.870 --> 38:27.870
有一个表叫blogs

38:27.870 --> 38:28.870
blog

38:28.870 --> 38:29.870
然后呢

38:29.870 --> 38:30.870
我这么给这个

38:30.870 --> 38:31.870
这个提供的

38:31.870 --> 38:32.870
这个接口呢

38:32.870 --> 38:34.870
就是用户通过这个接口

38:34.870 --> 38:35.870
就能够获取到

38:35.870 --> 38:36.870
我现在服务器当中

38:36.870 --> 38:37.870
所有的这个啊

38:37.870 --> 38:39.870
文章了blogs

38:39.870 --> 38:40.870
明白吗

38:40.870 --> 38:41.870
那你看啊

38:41.870 --> 38:42.870
这个动词

38:42.870 --> 38:43.870
没有动词

38:43.870 --> 38:44.870
我们有没有加s

38:44.870 --> 38:45.870
加s

38:45.870 --> 38:46.870
但是你可千万

38:46.870 --> 38:47.870
不要这么去设计啊

38:47.870 --> 38:49.870
有同学可能就会想

38:49.870 --> 38:50.870
我get

38:50.870 --> 38:51.870
getblogs

38:51.870 --> 38:52.870
是不是

38:52.870 --> 38:53.870
没毛病吗

38:53.870 --> 38:54.870
对啊

38:54.870 --> 38:55.870
听着是没毛病

38:55.870 --> 38:56.870
但是呢

38:56.870 --> 38:57.870
不符合人家的这些规范啊

38:57.870 --> 38:59.870
这出现动词了

38:59.870 --> 39:00.870
懂吗

39:00.870 --> 39:01.870
所以这种设计呢

39:01.870 --> 39:03.870
是不规范的

39:03.870 --> 39:05.870
那因为这个资源呢

39:05.870 --> 39:07.870
我们刚才已经说过啊

39:07.870 --> 39:08.870
其实啊

39:08.870 --> 39:10.870
它可以发生状态变化

39:10.870 --> 39:11.870
其实也就是说

39:11.870 --> 39:12.870
我们可以操作这个资源

39:12.870 --> 39:13.870
那你看啊

39:13.870 --> 39:14.870
现在你这个东西呢

39:14.870 --> 39:16.870
仅仅是给我提供了

39:16.870 --> 39:17.870
你所有的文章

39:17.870 --> 39:19.870
那我想操作怎么办呢

39:19.870 --> 39:20.870
哎

39:20.870 --> 39:21.870
接下来

39:21.870 --> 39:23.870
第五个

39:23.870 --> 39:24.870
就是就是什么呢

39:24.870 --> 39:25.870
方法

39:25.870 --> 39:26.870
那这个方法呢

39:26.870 --> 39:28.870
其实就是用来去操作

39:28.870 --> 39:30.870
我们取到的这些资源的啊

39:30.870 --> 39:32.870
那所有针对资源的操作呢

39:32.870 --> 39:34.870
人家的规范要求是

39:34.870 --> 39:36.870
要通过http

39:36.870 --> 39:37.870
提供的那些方法

39:37.870 --> 39:39.870
去实现它

39:39.870 --> 39:40.870
那http当中呢

39:40.870 --> 39:41.870
提供了很多的一些方法

39:41.870 --> 39:42.870
第一个呢

39:42.870 --> 39:44.870
就是一个guide

39:44.870 --> 39:45.870
guide这个方法

39:45.870 --> 39:46.870
它是用来干嘛

39:46.870 --> 39:48.870
它是用来获取资源的

39:48.870 --> 39:52.250
哎哎

39:52.250 --> 39:54.250
获取资源好吧

39:54.250 --> 39:56.250
那获取资源的话

39:56.250 --> 39:57.250
那我们使用这个方法

39:57.250 --> 39:58.250
怎么去用呢

39:58.250 --> 39:59.250
来

39:59.250 --> 40:00.250
假设说我还是提供了

40:00.250 --> 40:01.250
一个对外的接口

40:01.250 --> 40:02.250
你请求的时候呢

40:02.250 --> 40:04.250
一定要用guide这个方法

40:04.250 --> 40:05.250
然后呢

40:05.250 --> 40:06.250
你请求这个接口呢

40:06.250 --> 40:07.250
还是这

40:07.250 --> 40:08.250
还是我设计的这个接口

40:08.250 --> 40:09.250
好

40:09.250 --> 40:10.250
你通过guide的方式呢

40:10.250 --> 40:12.250
去去请求了这个接接口

40:12.250 --> 40:13.250
然后呢

40:13.250 --> 40:14.250
它是干嘛

40:14.250 --> 40:17.250
它是获取所有的文章

40:17.250 --> 40:19.250
所有的文章

40:19.250 --> 40:20.250
明白吧

40:20.250 --> 40:21.250
好

40:21.250 --> 40:22.250
那我还有

40:22.250 --> 40:23.250
有的时候呢

40:23.250 --> 40:24.250
我不需要去获取所有的文章

40:24.250 --> 40:26.250
我需要去获取某一篇文章

40:26.250 --> 40:27.250
怎么办呢

40:27.250 --> 40:28.250
继续往后边

40:28.250 --> 40:29.250
你可以再加上一个id

40:29.250 --> 40:30.250
每一篇文章呢

40:30.250 --> 40:32.250
其实都会有一个自己的id

40:32.250 --> 40:33.250
就跟我们的人

40:33.250 --> 40:34.250
是一模一样的

40:34.250 --> 40:35.250
有一个身份证号

40:35.250 --> 40:36.250
绝对是不能够重复的

40:36.250 --> 40:37.250
啊好

40:37.250 --> 40:38.250
网络当中的这些产品

40:38.250 --> 40:39.250
但凡去做产品

40:39.250 --> 40:41.250
其实都会给上一个id啊

40:41.250 --> 40:42.250
好那这个呢

40:42.250 --> 40:44.250
我就是获取

40:44.250 --> 40:45.250
到

40:45.250 --> 40:48.940
到某一篇

40:48.940 --> 40:52.580
文章

40:52.580 --> 40:53.580
可以吧

40:53.580 --> 40:54.580
来继续啊

40:54.580 --> 40:55.580
第二个

40:55.580 --> 40:56.580
这是guide啊

40:56.580 --> 40:57.580
然后呢

40:57.580 --> 40:58.580
post

40:58.580 --> 40:59.580
那post呢

40:59.580 --> 41:00.580
我们知道

41:00.580 --> 41:01.580
它是用来提交的

41:01.580 --> 41:02.580
那这个呢

41:02.580 --> 41:03.580
我们用管它叫做什么呢

41:03.580 --> 41:05.580
添加资源

41:05.580 --> 41:10.620
你现在有很多文章了

41:10.620 --> 41:11.620
对吧

41:11.620 --> 41:12.620
我现在要添一篇文章

41:12.620 --> 41:13.620
可以吗

41:13.620 --> 41:14.620
必须可以啊

41:14.620 --> 41:15.620
啊

41:15.620 --> 41:16.620
那怎么去添呢

41:16.620 --> 41:17.620
注意这个接口

41:17.620 --> 41:18.620
还是这个

41:18.620 --> 41:20.620
还是这个

41:20.620 --> 41:22.620
但是你的请求方式要变了

41:22.620 --> 41:24.620
你就不能用guide

41:24.620 --> 41:25.620
你应该用什么呢

41:25.620 --> 41:26.620
用post

41:26.620 --> 41:28.620
地址绝对是一模一样的

41:28.620 --> 41:29.620
理解吧

41:29.620 --> 41:31.620
就是刚才咱们所说的啊

41:31.620 --> 41:34.620
我们提供的这个路径当中啊

41:34.620 --> 41:36.620
绝对是不能够出现动词的

41:36.620 --> 41:37.620
它就是一个名词

41:37.620 --> 41:38.620
然后呢

41:38.620 --> 41:40.620
至于你想去操作它

41:40.620 --> 41:42.620
你就要改变请求方式了

41:42.620 --> 41:43.620
post

41:43.620 --> 41:45.620
那我们这么去做的话

41:45.620 --> 41:47.620
就是增加

41:47.620 --> 41:52.620
一篇文章

41:52.620 --> 41:54.620
能理解吧

41:54.620 --> 41:55.620
这么简单啊

41:55.620 --> 41:56.620
来第三个

41:56.620 --> 41:57.620
第三个呢

41:57.620 --> 41:58.620
是什么呢

41:58.620 --> 41:59.620
put

41:59.620 --> 42:00.620
put

42:00.620 --> 42:01.620
那这个put呢

42:01.620 --> 42:04.620
它是修改资源

42:04.620 --> 42:05.620
好

42:05.620 --> 42:06.620
修改资源

42:06.620 --> 42:08.620
啥意思呢

42:08.620 --> 42:09.620
就是啊

42:09.620 --> 42:10.620
这篇文章比如说啊

42:10.620 --> 42:11.620
我的作者啊

42:11.620 --> 42:12.620
换了

42:12.620 --> 42:13.620
或者说啊

42:13.620 --> 42:14.620
中间文章当中呢

42:14.620 --> 42:16.620
某一个词我修改了

42:16.620 --> 42:17.620
这个时候呢

42:17.620 --> 42:18.620
你就可以通过put

42:18.620 --> 42:19.620
发送这个请求

42:19.620 --> 42:20.620
然后呢

42:20.620 --> 42:21.620
发送这个请求之后呢

42:21.620 --> 42:22.620
它就变成了什么呢

42:22.620 --> 42:23.620
修改文章了

42:23.620 --> 42:24.620
理解吧

42:24.620 --> 42:25.620
但是你要修改

42:25.620 --> 42:26.620
可不是修改全部

42:26.620 --> 42:27.620
你要修改的是

42:27.620 --> 42:28.620
某一篇文章

42:28.620 --> 42:29.620
所以你在这呢

42:29.620 --> 42:31.620
要加上一个id

42:31.620 --> 42:32.620
那这呢

42:32.620 --> 42:34.620
我们要改一下啦

42:34.620 --> 42:35.620
修改

42:35.620 --> 42:43.660
修改某一篇文章

42:43.660 --> 42:44.660
好put

42:44.660 --> 42:45.660
来继续啊

42:45.660 --> 42:47.660
还有一个跟他差不多啊

42:47.660 --> 42:48.660
有点相似

42:48.660 --> 42:49.660
这个叫什么呢

42:49.660 --> 42:50.660
第四个第四个呢

42:50.660 --> 42:51.660
是叫什么呢

42:51.660 --> 42:55.540
叫patch

42:55.540 --> 42:56.540
patch

42:56.540 --> 42:57.540
这个呢

42:57.540 --> 42:58.540
可能大家

42:58.540 --> 42:59.540
不太熟悉吧

42:59.540 --> 43:00.540
patch

43:00.540 --> 43:01.540
是有这个方法的啊

43:01.540 --> 43:02.540
这个呢是干嘛

43:02.540 --> 43:04.540
它是更新资源

43:04.540 --> 43:05.540
更新资源

43:05.540 --> 43:06.540
哎

43:06.540 --> 43:07.540
这个更新资源

43:07.540 --> 43:08.540
跟修改资源

43:08.540 --> 43:10.540
有什么区别呢

43:10.540 --> 43:12.540
更新资源啊

43:12.540 --> 43:13.540
修改资源呢

43:13.540 --> 43:15.540
是修改了整篇文章

43:15.540 --> 43:16.540
你需要

43:16.540 --> 43:17.540
我在这呢

43:17.540 --> 43:19.540
写上一句话啊

43:19.540 --> 43:21.540
就是我们的客户端

43:21.540 --> 43:23.540
需要提供

43:23.540 --> 43:24.540
改变

43:24.540 --> 43:30.240
后的完整资源

43:30.240 --> 43:31.240
完整资源

43:31.240 --> 43:32.240
啥意思啊

43:32.240 --> 43:33.240
就是你要修改

43:33.240 --> 43:34.240
这一篇文章

43:34.240 --> 43:35.240
你到时候要提交的时候呢

43:35.240 --> 43:36.240
你要把

43:36.240 --> 43:37.240
这篇文章

43:37.240 --> 43:38.240
所有的信息呢

43:38.240 --> 43:39.240
都要给我提交过来

43:39.240 --> 43:40.240
而这个更新资源呢

43:40.240 --> 43:41.240
他就不用了

43:41.240 --> 43:42.240
那吧

43:42.240 --> 43:43.240
他就是

43:43.240 --> 43:44.240
你更新某一条属性

43:44.240 --> 43:45.240
某一个地方

43:45.240 --> 43:46.240
是不是

43:46.240 --> 43:47.240
端

43:49.240 --> 43:51.240
客户端需要

43:51.240 --> 43:54.240
提供改变

43:54.240 --> 43:56.240
的属性

43:56.240 --> 43:57.240
所以啊

43:57.240 --> 43:58.240
这个呢就叫

43:58.240 --> 43:59.240
更新资源

43:59.240 --> 44:00.240
理解吧

44:00.240 --> 44:01.240
好

44:01.240 --> 44:02.240
我们在这改一下

44:02.240 --> 44:04.240
更新一篇文章

44:04.240 --> 44:06.240
patch

44:06.240 --> 44:07.240
好

44:07.240 --> 44:08.240
然后呢

44:08.240 --> 44:09.240
继续再往下第五个

44:09.240 --> 44:10.240
第五个呢

44:10.240 --> 44:11.240
是什么呢

44:11.240 --> 44:12.240
是delate

44:12.240 --> 44:13.240
这个呢

44:13.240 --> 44:14.240
大家应该都熟了

44:14.240 --> 44:15.240
delate

44:15.240 --> 44:16.240
delate呢

44:16.240 --> 44:17.240
是什么呢

44:17.240 --> 44:20.510
是删除资源

44:20.510 --> 44:22.510
删除资源啊

44:22.510 --> 44:27.680
删除资源

44:27.680 --> 44:28.680
那在这呢

44:28.680 --> 44:29.680
给他换啊

44:29.680 --> 44:30.680
这个往显

44:30.680 --> 44:31.680
你请求的方式

44:31.680 --> 44:32.680
一定要变啊

44:32.680 --> 44:33.680
delate

44:33.680 --> 44:34.680
你看啊

44:34.680 --> 44:35.680
第一句呢

44:35.680 --> 44:37.680
其实是不是都是一样的

44:37.680 --> 44:38.680
只不过

44:38.680 --> 44:40.680
对他的不同的操作

44:40.680 --> 44:41.680
通过什么去体现

44:41.680 --> 44:42.680
通过我们的

44:42.680 --> 44:43.680
请求方式去体现

44:43.680 --> 44:45.680
其实我们上边的

44:45.680 --> 44:46.680
这几个啊

44:46.680 --> 44:47.680
五个词是不是

44:47.680 --> 44:48.680
他对应的就是

44:48.680 --> 44:49.680
增山改茶

44:49.680 --> 44:50.680
四个属性

44:50.680 --> 44:52.680
啊利用了http

44:52.680 --> 44:53.680
这个

44:53.680 --> 44:54.680
其实他们叫http

44:54.680 --> 44:55.680
当中呢

44:55.680 --> 44:56.680
这个什么的动词啊

44:56.680 --> 44:57.680
对资源进行操作

44:57.680 --> 44:58.680
好吧

44:58.680 --> 44:59.680
这个呢

44:59.680 --> 45:00.680
就是第五个方法啊

45:00.680 --> 45:01.680
然后呢

45:01.680 --> 45:02.680
第六个啊

45:02.680 --> 45:03.680
第六个

45:03.680 --> 45:05.680
数据过滤

45:05.680 --> 45:07.680
数据过滤啊

45:07.680 --> 45:09.680
如果说你的服务器的数据

45:09.680 --> 45:10.680
比如说

45:10.680 --> 45:11.680
比方还是说

45:11.680 --> 45:12.680
我的这个网站当中呢

45:12.680 --> 45:13.680
这个博客啊

45:13.680 --> 45:15.680
我现在有几十万条博客啊

45:15.680 --> 45:17.680
写了几十万篇文章了

45:17.680 --> 45:18.680
那这个时候呢

45:18.680 --> 45:20.680
就是数据非常之庞大

45:20.680 --> 45:22.680
那我们再去用户

45:22.680 --> 45:23.680
再去获取的时候呢

45:23.680 --> 45:24.680
你不可能一下

45:24.680 --> 45:25.680
把所有的数据呢

45:25.680 --> 45:26.680
都丢给用户啊

45:26.680 --> 45:27.680
一个呢

45:27.680 --> 45:28.680
你你这边压力很大

45:28.680 --> 45:29.680
另外一个呢

45:29.680 --> 45:30.680
用户拿到这么多

45:30.680 --> 45:31.680
他其实用不了

45:31.680 --> 45:32.680
他也麻烦

45:32.680 --> 45:33.680
他还要去处理

45:33.680 --> 45:35.680
所以我们提供的这个

45:35.680 --> 45:36.680
API当中呢

45:36.680 --> 45:37.680
就应该提供

45:37.680 --> 45:39.680
数据过滤的这个功能

45:39.680 --> 45:40.680
那这个功能呢

45:40.680 --> 45:41.680
如何实现呢

45:41.680 --> 45:42.680
就是通过啊

45:42.680 --> 45:43.680
参数来实现的

45:43.680 --> 45:44.680
嗯

45:44.680 --> 45:45.680
比方说

45:45.680 --> 45:46.680
第一个

45:48.680 --> 45:49.680
哎

45:49.680 --> 45:50.680
这应该是

45:50.680 --> 45:51.680
英文的

45:51.680 --> 45:53.680
Limit等于一个10

45:53.680 --> 45:54.680
那这个呢

45:54.680 --> 45:55.680
是啥

45:55.680 --> 45:57.680
指定返回

45:57.680 --> 45:59.680
指定

45:59.680 --> 46:02.680
指定返回

46:02.680 --> 46:04.680
数据的

46:04.680 --> 46:06.680
数据的数量

46:06.680 --> 46:07.680
什么意思啊

46:07.680 --> 46:08.680
就是

46:08.680 --> 46:10.680
我现在加上这个参数啊

46:10.680 --> 46:11.680
好

46:11.680 --> 46:12.680
当然我要用guide请求

46:12.680 --> 46:13.680
那么好

46:13.680 --> 46:14.680
guide请求

46:14.680 --> 46:15.680
这个时候呢干嘛

46:15.680 --> 46:16.680
我在后边呢

46:16.680 --> 46:18.680
加上加上这个

46:18.680 --> 46:19.680
问号

46:19.680 --> 46:21.680
Limit等于10

46:21.680 --> 46:22.680
那

46:22.680 --> 46:24.680
这个地址

46:24.680 --> 46:26.680
他给我返回

46:26.680 --> 46:29.680
10条数据

46:29.680 --> 46:30.680
这个呢

46:30.680 --> 46:33.680
就是指定返回数量的

46:33.680 --> 46:35.680
指定返回数据的数量啊

46:35.680 --> 46:36.680
一个意思

46:36.680 --> 46:37.680
行吧

46:37.680 --> 46:38.680
就不去纠结他了

46:38.680 --> 46:39.680
好

46:39.680 --> 46:40.680
这个呢

46:40.680 --> 46:41.680
就叫做什么呢

46:41.680 --> 46:42.680
就叫做过滤啊

46:42.680 --> 46:43.680
然后那第二种

46:43.680 --> 46:44.680
第二种形式呢

46:44.680 --> 46:48.570
offside

46:48.570 --> 46:49.570
等于一个史

46:49.570 --> 46:50.570
那这个呢

46:50.570 --> 46:51.570
是啥

46:51.570 --> 46:52.570
指定一个偏一辆

46:52.570 --> 46:53.570
指定

46:53.570 --> 46:55.570
一个偏一辆

46:55.570 --> 46:57.570
这个偏一辆啊

46:57.570 --> 46:58.570
大家能理解吗

46:58.570 --> 46:59.570
偏一辆啊

46:59.570 --> 47:00.570
我写一下啊

47:00.570 --> 47:01.570
当然你还是用什么

47:01.570 --> 47:03.570
用这个guide请求啊

47:03.570 --> 47:04.570
这个偏一辆的意思呢

47:04.570 --> 47:05.570
就是说

47:05.570 --> 47:06.570
我现在呢

47:06.570 --> 47:07.570
从第10条数据

47:07.570 --> 47:08.570
从那开始

47:08.570 --> 47:10.570
我不是从第1条开始获取了

47:10.570 --> 47:13.570
从第10条开始去获取

47:13.570 --> 47:14.570
这个呢

47:14.570 --> 47:15.570
就叫偏一辆啊

47:15.570 --> 47:16.570
这是第2个

47:16.570 --> 47:17.570
然后呢

47:17.570 --> 47:20.070
第3个来

47:20.070 --> 47:21.070
第3个呢

47:21.070 --> 47:22.070
就是

47:22.070 --> 47:23.070
我们要指定

47:23.070 --> 47:24.070
翻页

47:24.070 --> 47:25.070
那这个翻页呢

47:25.070 --> 47:26.070
稍微麻烦一些

47:26.070 --> 47:27.070
多一些啊

47:27.070 --> 47:28.070
就是一个配置

47:28.070 --> 47:29.070
配置呢

47:29.070 --> 47:30.070
等于比如说

47:30.070 --> 47:31.070
等于一个2

47:31.070 --> 47:32.070
然后呢

47:32.070 --> 47:33.070
后边跟

47:33.070 --> 47:34.070
你要用这个按的的符号啊

47:34.070 --> 47:35.070
跟什么呢

47:35.070 --> 47:36.070
跟这个啊

47:36.070 --> 47:37.070
p1啊

47:37.070 --> 47:38.070
下滑键

47:38.070 --> 47:39.070
一个什么的配置

47:39.070 --> 47:40.070
等于一个10啊

47:40.070 --> 47:41.070
当然啊

47:41.070 --> 47:42.070
对于这里头

47:42.070 --> 47:43.070
这些参数的这个名字

47:43.070 --> 47:44.070
这是后端去取的

47:44.070 --> 47:45.070
这个名字呢

47:45.070 --> 47:46.070
其实啊

47:46.070 --> 47:47.070
它并不是一成不变的

47:47.070 --> 47:49.070
像在之前啊

47:49.070 --> 47:50.070
我们在这个百度之道

47:50.070 --> 47:52.070
我们要去取这个啊

47:52.070 --> 47:53.070
回答的

47:53.070 --> 47:54.070
就是比如说某一个问题

47:54.070 --> 47:55.070
他回答的

47:55.070 --> 47:56.070
这个啊

47:56.070 --> 47:57.070
答案的数量

47:57.070 --> 47:59.070
那有的时候呢

47:59.070 --> 48:00.070
他要翻页

48:00.070 --> 48:01.070
那么翻页的话

48:01.070 --> 48:02.070
人家在那儿

48:02.070 --> 48:03.070
给的就是一个pn

48:03.070 --> 48:04.070
还有一个rn

48:04.070 --> 48:06.070
就不是按照他的配置了

48:06.070 --> 48:07.070
还有p1啊

48:07.070 --> 48:09.070
下滑线这个配置了

48:09.070 --> 48:10.070
这个很灵活

48:10.070 --> 48:11.070
再让他说一下

48:11.070 --> 48:12.070
好不好

48:12.070 --> 48:14.070
那这个是什么意思呢

48:14.070 --> 48:15.070
这个呢

48:15.070 --> 48:17.070
就是指定

48:17.070 --> 48:19.070
指定什么呢

48:19.070 --> 48:23.470
指定第几页

48:23.470 --> 48:24.470
然后呢

48:24.470 --> 48:26.470
以及

48:26.470 --> 48:28.470
每页的数量

48:28.470 --> 48:29.470
什么意思呢

48:29.470 --> 48:31.470
就是我现在要获取

48:31.470 --> 48:33.470
第二页的数据

48:33.470 --> 48:34.470
那我现在呢

48:34.470 --> 48:36.470
这儿有一个参数为10

48:36.470 --> 48:37.470
那就表示啊

48:37.470 --> 48:38.470
每10个数据呢

48:38.470 --> 48:40.470
当作一页

48:40.470 --> 48:42.470
获取第二第二页

48:42.470 --> 48:43.470
那就表示

48:43.470 --> 48:44.470
现在呢

48:44.470 --> 48:45.470
获取的是

48:45.470 --> 48:47.470
从1到9

48:47.470 --> 48:48.470
从0到9

48:48.470 --> 48:49.470
然后呢

48:49.470 --> 48:50.470
第二页是不是就是说

48:50.470 --> 48:52.470
从10到多少

48:52.470 --> 48:53.470
19了

48:53.470 --> 48:55.470
那我们这么给的话

48:55.470 --> 48:56.470
他取到的就是

48:56.470 --> 48:58.470
从10到19的

48:58.470 --> 48:59.470
那几条数据

48:59.470 --> 49:00.470
翻页

49:00.470 --> 49:01.470
这个东西呢

49:01.470 --> 49:02.470
用来做翻页

49:02.470 --> 49:03.470
那吧

49:03.470 --> 49:04.470
第三个啊

49:04.470 --> 49:06.470
第四个

49:06.470 --> 49:07.470
第四个呢

49:07.470 --> 49:08.470
就是

49:08.470 --> 49:10.470
关于这个排序了啊

49:10.470 --> 49:11.470
排序

49:11.470 --> 49:12.470
排序的话

49:12.470 --> 49:13.470
是这样的

49:13.470 --> 49:14.470
by

49:14.470 --> 49:15.470
等于

49:15.470 --> 49:16.470
time

49:16.470 --> 49:17.470
然后呢

49:17.470 --> 49:18.470
按的

49:18.470 --> 49:19.470
一个order

49:19.470 --> 49:20.470
等于arc

49:20.470 --> 49:21.470
这个呢

49:21.470 --> 49:22.470
是啥

49:22.470 --> 49:23.470
这个呢

49:23.470 --> 49:24.470
是指定

49:25.470 --> 49:26.470
指定

49:26.470 --> 49:27.470
返回

49:28.470 --> 49:29.470
返回结果

49:31.470 --> 49:34.420
按照

49:34.420 --> 49:36.420
按照哪个属性

49:36.420 --> 49:38.420
排排排序

49:39.420 --> 49:40.420
排序

49:40.420 --> 49:44.120
以及排序的

49:44.120 --> 49:45.120
的方式

49:47.120 --> 49:48.120
那我们还是用

49:48.120 --> 49:49.120
概的请求啊

49:49.120 --> 49:50.120
来在这呢

49:50.120 --> 49:52.120
我把这个地址写一下

49:52.120 --> 49:54.120
放到这儿

49:54.120 --> 49:55.120
写一下

49:55.120 --> 49:58.070
错了

49:58.070 --> 49:59.070
那这个啥意思啊

49:59.070 --> 50:00.070
salt by

50:00.070 --> 50:02.070
这个自断的意思呢

50:02.070 --> 50:03.070
就是说

50:03.070 --> 50:04.070
我现在你给我拿到

50:04.070 --> 50:05.070
我要给你返回数据

50:05.070 --> 50:06.070
是不是

50:06.070 --> 50:07.070
好这个数据呢

50:07.070 --> 50:08.070
我们后端已经做了

50:08.070 --> 50:09.070
你只要给自断

50:09.070 --> 50:10.070
他就自能够

50:10.070 --> 50:11.070
他就自动的听你话了

50:11.070 --> 50:12.070
比如说

50:12.070 --> 50:13.070
我现在要让他排序

50:13.070 --> 50:15.070
是不是那按照什么去排序呢

50:15.070 --> 50:16.070
这个数据当中的

50:16.070 --> 50:17.070
这个时间去排序

50:17.070 --> 50:18.070
按照时间去排序呢

50:18.070 --> 50:19.070
这个order呢

50:19.070 --> 50:21.070
就是排序的一个方式

50:21.070 --> 50:22.070
arc呢表示呢

50:22.070 --> 50:23.070
就是生序

50:23.070 --> 50:25.070
就是从d到高

50:25.070 --> 50:27.070
就是我们今天发的数据呢

50:27.070 --> 50:28.070
肯定在上面

50:28.070 --> 50:29.070
以前发的数据呢

50:29.070 --> 50:30.070
在下边

50:30.070 --> 50:31.070
理解吧

50:31.070 --> 50:33.070
这个呢就是能够给他去指定一个

50:33.070 --> 50:34.070
排序的方式

50:35.070 --> 50:36.070
好第四个啊

50:36.070 --> 50:37.070
行那这些呢

50:37.070 --> 50:38.070
就是咱们

50:38.070 --> 50:40.070
举了几个常见的一些例子啊

50:40.070 --> 50:41.070
当然我们在设计

50:41.070 --> 50:42.070
API的时候呢

50:42.070 --> 50:43.070
关于这个数据过滤呢

50:43.070 --> 50:44.070
他可不止这么多

50:44.070 --> 50:45.070
好不好

50:45.070 --> 50:46.070
那我们在这呢

50:46.070 --> 50:47.070
就说几个

50:47.070 --> 50:48.070
一下啊

50:48.070 --> 50:49.070
大家能够理解就行了

50:49.070 --> 50:50.070
好不好

50:50.070 --> 50:51.070
那继续往下吧

50:51.070 --> 50:52.070
继续往下啊

50:52.070 --> 50:53.070
然后呢

50:53.070 --> 50:55.070
接下来我们要说的就是一个状态码了

50:55.070 --> 50:56.070
那这个状态码呢

50:56.070 --> 50:58.070
其实咱们也不用过多的去讲了

50:58.070 --> 51:00.070
因为在这个网络的课里边呢

51:00.070 --> 51:01.070
是有说过的啊

51:01.070 --> 51:02.070
好

51:02.070 --> 51:03.070
这个状态码呢

51:03.070 --> 51:04.070
就是分为几个四段

51:04.070 --> 51:05.070
是不是

51:05.070 --> 51:06.070
二叉叉

51:06.070 --> 51:07.070
二开头的

51:07.070 --> 51:08.070
或者说三开头

51:08.070 --> 51:09.070
四开头

51:09.070 --> 51:10.070
五开头的

51:10.070 --> 51:11.070
每一个开头的

51:11.070 --> 51:12.070
所代表的意义

51:12.070 --> 51:13.070
是不一样的

51:13.070 --> 51:14.070
其实啊

51:14.070 --> 51:15.070
在http协议当中呢

51:15.070 --> 51:16.070
其实已经有讲过

51:16.070 --> 51:17.070
你会发现

51:17.070 --> 51:18.070
其实这些东西呢

51:18.070 --> 51:20.070
就是咱们之前所讲的啊

51:20.070 --> 51:21.070
但是咱之前

51:21.070 --> 51:22.070
确实是不知道啊

51:22.070 --> 51:24.070
他们其实是有一个规范的

51:24.070 --> 51:25.070
就是按照了人家

51:25.070 --> 51:27.070
restful api这个规范

51:27.070 --> 51:29.070
来设定的啊

51:30.070 --> 51:31.070
好这个呢

51:31.070 --> 51:32.070
就过了啊

51:32.070 --> 51:33.070
来接下来呢

51:33.070 --> 51:34.070
就是第八个

51:34.070 --> 51:36.070
返回结果

51:36.070 --> 51:37.070
返回结果呢

51:37.070 --> 51:38.070
需要去提一下

51:38.070 --> 51:39.070
返回结果呢

51:39.070 --> 51:41.070
也是分为不同的方式啊

51:41.070 --> 51:42.070
那你看我通过

51:42.070 --> 51:44.070
guide去请求

51:45.070 --> 51:46.070
guide去请求

51:46.070 --> 51:47.070
guide请求之后呢

51:47.070 --> 51:48.070
那后端

51:48.070 --> 51:49.070
你设计的这个 api

51:49.070 --> 51:50.070
到底给我返回什么东西呢

51:50.070 --> 51:52.070
这个也是有规范的

51:52.070 --> 51:53.070
理解吧

51:53.070 --> 51:54.070
然后呢

51:54.070 --> 51:55.070
当我通过guide去请求的话

51:55.070 --> 51:57.070
它返回的是一个

51:57.070 --> 51:58.070
什么呢

51:58.070 --> 52:00.070
资源对象列表

52:01.070 --> 52:02.070
这个资源对象列表呢

52:02.070 --> 52:03.070
是一个对象的形式

52:03.070 --> 52:05.070
是一个数组的形式啊

52:05.070 --> 52:06.070
数组的形式

52:06.070 --> 52:07.070
然后呢

52:07.070 --> 52:08.070
假设说你取到的是

52:08.070 --> 52:09.070
某一条数据

52:09.070 --> 52:10.070
那它返回的

52:10.070 --> 52:12.070
如果取的是

52:12.070 --> 52:13.070
一条数据

52:13.070 --> 52:15.070
那返回一个对象

52:15.070 --> 52:17.070
返回就是你取到的那个

52:17.070 --> 52:18.070
资源对象

52:18.070 --> 52:19.070
知道吧

52:19.070 --> 52:20.070
好

52:20.070 --> 52:21.070
如果说取的是多的话

52:21.070 --> 52:23.070
它返回的就是一个数组

52:24.070 --> 52:26.070
这是guide这个方式

52:26.070 --> 52:27.070
然后呢

52:27.070 --> 52:28.070
post

52:28.070 --> 52:29.070
post咱们知道

52:29.070 --> 52:30.070
刚才上面已经说

52:30.070 --> 52:31.070
它是添加资源

52:31.070 --> 52:32.070
是吧

52:32.070 --> 52:33.070
那添加资源的话

52:33.070 --> 52:34.070
服务器要不要返回

52:34.070 --> 52:35.070
必须也要返回

52:35.070 --> 52:36.070
其实有的时候呢

52:36.070 --> 52:37.070
当我们去提交的时候呢

52:37.070 --> 52:38.070
服务器也是

52:38.070 --> 52:40.070
会给咱们返回一些

52:40.070 --> 52:41.070
response

52:41.070 --> 52:42.070
是吧

52:42.070 --> 52:43.070
到时候你们去注意一下

52:43.070 --> 52:45.070
那它返回的是什么呢

52:45.070 --> 52:46.070
返回

52:47.070 --> 52:50.070
返回修改后的资源对象

52:51.070 --> 52:52.070
有的时候呢

52:52.070 --> 52:53.070
以及会

52:53.070 --> 52:55.070
以及会有可能啊

52:55.070 --> 52:57.070
这是有可能会加上

52:57.070 --> 52:59.070
是否成功

53:04.430 --> 53:05.430
成功

53:06.430 --> 53:07.430
是否成功呢

53:07.430 --> 53:08.430
这个字段

53:10.430 --> 53:11.430
来第三个啊

53:11.430 --> 53:12.430
这是post

53:12.430 --> 53:13.430
post

53:13.430 --> 53:14.430
post

53:14.430 --> 53:15.430
然后呢是put

53:16.430 --> 53:17.430
put是什么呢

53:17.430 --> 53:18.430
是修改资源

53:18.430 --> 53:20.430
那这个修改资源呢

53:20.430 --> 53:21.430
它返回的是什么呢

53:21.430 --> 53:23.430
其实返回的跟这个是一样的啊

53:23.430 --> 53:24.430
返回的是a

53:24.430 --> 53:25.430
put

53:26.430 --> 53:27.430
put

53:27.430 --> 53:28.430
这是错了啊

53:28.430 --> 53:30.430
这是添加资源

53:30.430 --> 53:34.020
好

53:34.020 --> 53:35.020
添加资源啊

53:35.020 --> 53:36.020
这是修改资源

53:36.020 --> 53:38.020
修改后的资源对象

53:38.020 --> 53:39.020
然后呢

53:39.020 --> 53:40.020
也会加上什么呢

53:40.020 --> 53:41.020
是否成功

53:41.020 --> 53:42.020
put

53:42.020 --> 53:44.020
然后还有patch

53:44.020 --> 53:47.100
patch

53:47.100 --> 53:48.100
是什么呢

53:48.100 --> 53:50.100
patch是更新资源

53:50.100 --> 53:53.100
返回更新后的资源对象

53:54.100 --> 53:56.100
也有可能会加上是否成功

53:56.100 --> 53:57.100
它其实就是一个字段啊

53:57.100 --> 53:58.100
来第五个

53:59.100 --> 54:00.100
第五个呢

54:00.100 --> 54:01.100
是什么呢

54:01.100 --> 54:04.310
是一个delete

54:04.310 --> 54:05.310
它返回的是啥

54:05.310 --> 54:07.310
它返回的是一个空文的

54:09.310 --> 54:10.310
返回空

54:10.310 --> 54:12.310
有可能会加上一个什么呢

54:12.310 --> 54:14.310
你是否删除成功

54:14.310 --> 54:16.310
这其实就是一个可选的

54:16.310 --> 54:18.310
那关于这个返回的结果呢

54:18.310 --> 54:19.310
我建议大家以后呢

54:19.310 --> 54:21.310
你去用到一个api的时候呢

54:21.310 --> 54:22.310
你去看一下

54:22.310 --> 54:24.310
通过这些方式呢

54:24.310 --> 54:26.310
拿到的一个结果是否是

54:26.310 --> 54:28.310
符合人家这要求的

54:28.310 --> 54:30.310
那就说明它是否遵循了

54:30.310 --> 54:32.310
我们的wrestful api的一个规范

54:32.310 --> 54:33.310
理解了吧

54:33.310 --> 54:34.310
好

54:34.310 --> 54:35.310
然后呢第九个

54:35.310 --> 54:36.310
第九个快完了

54:36.310 --> 54:37.310
第九个呢就是一个

54:37.310 --> 54:40.310
返回返回的数据格式啊

54:40.310 --> 54:41.310
返回的一个数据格式

54:41.310 --> 54:42.310
其实也是一个

54:42.310 --> 54:44.310
人家也是有规范的

54:44.310 --> 54:47.310
就是返回的数据格式

54:47.310 --> 54:49.310
尽量使用

54:50.310 --> 54:52.310
尽量使用json

54:53.310 --> 54:54.310
这是尽量

54:54.310 --> 54:56.310
那么还有一个

54:56.310 --> 54:58.310
就是避免

54:58.310 --> 55:01.310
避免使用xml

55:01.310 --> 55:03.310
这个东西呢就比较笨重啊

55:03.310 --> 55:04.310
现在呢

55:04.310 --> 55:06.310
以前呢其实是通过它

55:06.310 --> 55:07.310
现在呢

55:07.310 --> 55:09.310
基本上用的都是一个json

55:09.310 --> 55:11.310
你符合这个规则就行了

55:11.310 --> 55:12.310
好

55:12.310 --> 55:13.310
那到这呢

55:13.310 --> 55:14.310
就不再去写了

55:14.310 --> 55:16.310
关于它的一个具体的

55:16.310 --> 55:17.310
规范了

55:17.310 --> 55:19.310
我们就写上九个就行了啊

55:19.310 --> 55:20.310
不要再去花时间了

55:20.310 --> 55:21.310
因为这个东西呢

55:21.310 --> 55:23.310
大家看一下就知道了

55:23.310 --> 55:24.310
好吧

55:24.310 --> 55:25.310
那到这呢

55:25.310 --> 55:27.310
我们算是把这个wrestful api这个概念

55:27.310 --> 55:28.310
跟大家呢

55:28.310 --> 55:30.310
去讲了一下啊

55:30.310 --> 55:32.310
估计呢是

55:32.310 --> 55:33.310
会有些懵啊

55:33.310 --> 55:34.310
不过没有关系啊

55:34.310 --> 55:35.310
咱在最后呢

55:35.310 --> 55:36.310
我再给大家呢

55:36.310 --> 55:38.310
去做一个整体整个

55:38.310 --> 55:40.310
整体的一个总结吧

55:43.310 --> 55:44.310
总结

55:44.310 --> 55:46.310
这个字打的是相当不利索啊

55:46.310 --> 55:47.310
来

55:48.310 --> 55:49.310
那这个restful api呢

55:49.310 --> 55:50.310
我在这呢

55:50.310 --> 55:51.310
用三句话啊

55:51.310 --> 55:52.310
来总结一下

55:52.310 --> 55:53.310
那三句话

55:53.310 --> 55:55.310
就是看url

55:55.310 --> 55:57.310
看url就知道

55:58.310 --> 55:59.310
知道要什么

56:00.310 --> 56:01.310
然后呢

56:01.310 --> 56:02.310
第二个呢

56:02.310 --> 56:04.310
是看http

56:04.310 --> 56:05.310
然后呢

56:05.310 --> 56:07.310
method

56:07.310 --> 56:09.690
method

56:09.690 --> 56:11.690
就知道干什么

56:11.690 --> 56:14.580
然后呢

56:14.580 --> 56:15.580
第三个

56:15.580 --> 56:18.580
是看http

56:18.580 --> 56:19.580
然后呢

56:20.580 --> 56:21.580
status

56:21.580 --> 56:25.550
code

56:25.550 --> 56:29.310
就知道结果

56:29.310 --> 56:33.520
如何

56:33.520 --> 56:34.520
如何

56:34.520 --> 56:35.520
好来解释一下啊

56:35.520 --> 56:36.520
其实这三句话呢

56:36.520 --> 56:38.520
还是比较精闢的啊

56:38.520 --> 56:39.520
第一句话就说

56:39.520 --> 56:41.520
看url就知道干什么

56:41.520 --> 56:42.520
那不就是说

56:42.520 --> 56:43.520
你看啊

56:43.520 --> 56:44.520
我们在这儿

56:44.520 --> 56:46.520
你要是理解了这个规范

56:46.520 --> 56:47.520
那是不是就知道

56:47.520 --> 56:48.520
比如说啊

56:48.520 --> 56:49.520
我们现在看到他了

56:49.520 --> 56:50.520
是吧

56:50.520 --> 56:51.520
看到他之后呢

56:51.520 --> 56:52.520
其实就是说

56:52.520 --> 56:53.520
我要去找某一篇文章了吧

56:53.520 --> 56:54.520
对不对

56:54.520 --> 56:55.520
这是

56:55.520 --> 56:56.520
是不是咱们就知道

56:56.520 --> 56:57.520
是干嘛了

56:57.520 --> 56:58.520
就知道干嘛了

56:58.520 --> 56:59.520
然后呢

56:59.520 --> 57:00.520
看什么呢

57:00.520 --> 57:01.520
是要什么呢

57:01.520 --> 57:02.520
我们要的是啥

57:02.520 --> 57:03.520
要的就是这个

57:03.520 --> 57:04.520
所有的文章

57:04.520 --> 57:05.520
然后呢干嘛

57:05.520 --> 57:06.520
是通过谁啊

57:06.520 --> 57:08.520
通过master的这个方法

57:08.520 --> 57:09.520
然后这个方法

57:09.520 --> 57:10.520
他是一个delete

57:10.520 --> 57:11.520
那你就知道

57:11.520 --> 57:12.520
哎这是删除那一篇文章

57:12.520 --> 57:13.520
那我在这儿呢

57:13.520 --> 57:14.520
post

57:14.520 --> 57:16.520
我就添加一篇文章

57:16.520 --> 57:17.520
看看是不是这么一个意思

57:17.520 --> 57:18.520
然后第三个呢

57:18.520 --> 57:19.520
就是说

57:19.520 --> 57:20.520
我通过这个状态码

57:20.520 --> 57:21.520
结果如何了

57:21.520 --> 57:22.520
状态码呢

57:22.520 --> 57:23.520
我们在这儿呢

57:23.520 --> 57:24.520
并没有去写啊

57:24.520 --> 57:25.520
你们到时候

57:25.520 --> 57:26.520
自己去回顾一下

57:26.520 --> 57:27.520
就行了

57:27.520 --> 57:28.520
好不好

57:28.520 --> 57:29.520
然后呢

57:29.520 --> 57:30.520
这个返回结果

57:30.520 --> 57:31.520
这块了就简单了

57:31.520 --> 57:32.520
就不用去说了

57:32.520 --> 57:33.520
所以说呢

57:33.520 --> 57:34.520
我们总结为三句话

57:34.520 --> 57:35.520
第一个

57:35.520 --> 57:36.520
看Url

57:36.520 --> 57:37.520
你就知道要什么了

57:37.520 --> 57:38.520
然后呢

57:38.520 --> 57:39.520
第二看http

57:39.520 --> 57:40.520
method

57:40.520 --> 57:41.520
方法

57:41.520 --> 57:42.520
你就知道干什么呢

57:42.520 --> 57:43.520
看这个状态码

57:43.520 --> 57:44.520
你就知道结果如何了

57:44.520 --> 57:45.520
好

57:45.520 --> 57:47.520
这个就是restful api

57:47.520 --> 57:48.520
那这节课呢

