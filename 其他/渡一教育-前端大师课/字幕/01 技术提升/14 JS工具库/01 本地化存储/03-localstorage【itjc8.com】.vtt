WEBVTT

00:00.300 --> 00:03.740
我们继续学习本地存储的课程

00:03.740 --> 00:08.260
在前两节课 咱们算是详细的学习了一下Cookie

00:08.260 --> 00:13.260
通过上两节课的学习 相信我们应该都知道Cookie

00:13.260 --> 00:17.900
它的一个本职的工作 其实并非去做本地存储

00:17.900 --> 00:20.300
而是维持状态

00:20.300 --> 00:24.300
为什么呢 是因为HTTP协议是一个无状态的

00:24.300 --> 00:28.300
我们要通过Cookie来保持这个请求的状态

00:28.300 --> 00:30.300
这样的话才能够实现像登录

00:30.300 --> 00:32.300
我们在一个页面登录之后

00:32.300 --> 00:34.300
在其他的页面都是一个登录的状态

00:34.300 --> 00:38.300
这个其实就是要保持请求的这么一个状态

00:38.300 --> 00:42.300
那Cookie他身上有很多的一些缺陷

00:42.300 --> 00:45.300
决定了他不适合去做本地存储

00:45.300 --> 00:48.300
虽然说把它归到本地存储的类里边

00:48.300 --> 00:52.300
但是他实质的工作确实是不是做存储用的

00:52.300 --> 00:56.300
比如说咱举上几个例子

00:56.300 --> 01:00.300
他会被HTTP请求带到服务器

01:00.300 --> 01:03.300
是吧 他跟着请求非来非去

01:03.300 --> 01:05.300
这样的话他就能够降低性能了

01:05.300 --> 01:07.300
造成资源浪费

01:07.300 --> 01:11.300
那你的请求多了 这是一个不可低估的开销

01:11.300 --> 01:15.300
比如说我们的Cookie非常之多

01:15.300 --> 01:20.300
那这个时候 每一个请求都会把这些Cookie带过去

01:20.300 --> 01:25.300
那这样的话 如果说我们的流量非常大

01:26.300 --> 01:29.300
百度知道他们的手艺流量就在2个亿左右

01:29.300 --> 01:32.300
这个时候你看 每人请求一次 带过去一次

01:32.300 --> 01:34.300
那得多大的一些流量

01:34.300 --> 01:36.300
所以说这个性能真是

01:36.300 --> 01:38.300
当你请求非常庞大的时候

01:38.300 --> 01:43.300
绝对是不可低估的这么一个优化的一个点

01:43.300 --> 01:45.300
然后还有就是

01:45.300 --> 01:48.300
假设说用它来做本地存储

01:48.300 --> 01:52.300
那它就有点 你看它的个数跟大小都有限制

01:52.300 --> 01:55.300
它没有办法去存储一些大量的一些数据

01:55.300 --> 01:57.300
所以说它还是很局限的

01:57.300 --> 02:01.300
那在HTML5诞生以前本地化的存储方案

02:01.300 --> 02:03.300
只能够通过这个Cookie去做

02:03.300 --> 02:05.300
所以说那个时候咱们也说

02:05.300 --> 02:08.300
就是我们不得不去使用这个Cookie

02:08.300 --> 02:10.300
纵使你的心中极不情愿

02:10.300 --> 02:12.300
但也万般无奈

02:12.300 --> 02:15.300
那到了HTML5诞生之后

02:15.300 --> 02:18.300
它带来了一个真正的本地化的存储方案

02:18.300 --> 02:21.300
是什么 就是咱们今天这节课要学习的

02:21.300 --> 02:24.300
我在这儿标一下

02:24.300 --> 02:30.660
叫wibe storage

02:30.660 --> 02:33.660
这个就是本地化的存储方案

02:33.660 --> 02:36.660
这个才是真正做存储用的

02:36.660 --> 02:39.660
所以Cookie你就老老实实的去维持你的状态

02:39.660 --> 02:42.660
前端咱们尽量不要去碰它

02:42.660 --> 02:43.660
想要存储的话

02:43.660 --> 02:45.660
我们就需要去用wibe storage

02:45.660 --> 02:48.660
它比Cookie强大的多了

02:48.660 --> 02:51.660
咱们就来对比一下

02:51.660 --> 02:53.660
第一个你看Cookie

02:53.660 --> 02:55.660
它的一个大小限制在多少

02:55.660 --> 02:57.660
4K左右 是不是

02:57.660 --> 02:58.660
那wibe storage

02:58.660 --> 03:00.660
它的一个大小在多少

03:00.660 --> 03:01.660
5MB

03:01.660 --> 03:03.660
那这个MB是啥 是照

03:03.660 --> 03:07.660
那么1024KB等于一照

03:07.660 --> 03:08.660
明白吧

03:08.660 --> 03:09.660
所以说是4KB

03:09.660 --> 03:10.660
它的好几千倍

03:10.660 --> 03:12.660
有同学可能会想

03:12.660 --> 03:15.660
5照 这也没多大

03:15.660 --> 03:17.660
你看现在的存储空间

03:17.660 --> 03:19.660
都是论计算的

03:19.660 --> 03:21.660
几个计 几个计

03:21.660 --> 03:23.660
然后甚至现在都已经论T去算了

03:23.660 --> 03:26.660
那你这个5照跟他们去比

03:26.660 --> 03:28.660
确实是九牛一萌

03:28.660 --> 03:30.660
不值一提

03:30.660 --> 03:34.660
但是我们存储的是数据

03:34.660 --> 03:36.660
并不是电影

03:36.660 --> 03:38.660
你用不了那么大

03:38.660 --> 03:40.660
没有对比就没有伤害

03:40.660 --> 03:42.660
我们就做一个对比

03:42.660 --> 03:44.660
比如说咱们学习的Gquery

03:44.660 --> 03:47.660
一个Gquery的位压缩的文件

03:47.660 --> 03:48.660
这个版本

03:48.660 --> 03:50.660
它的一个大小在多少

03:50.660 --> 03:52.660
在300K左右

03:52.660 --> 03:56.660
那你知道它里面的代码量有多少吗

03:56.660 --> 03:58.660
一万多

03:58.660 --> 04:00.660
这个你回头去看一下

04:00.660 --> 04:01.660
好不好 确认一下

04:01.660 --> 04:03.660
那你就要脑补一下

04:03.660 --> 04:06.660
这个5照 它能够放多少代码

04:06.660 --> 04:08.660
那你迅速脑补一下

04:08.660 --> 04:10.660
并且有些浏览器

04:10.660 --> 04:12.660
它能够存多少 存10照

04:12.660 --> 04:14.660
像谷歌浏览器

04:14.660 --> 04:16.660
就能够存10照的大小

04:16.660 --> 04:17.660
所以说这么来讲

04:17.660 --> 04:19.660
它是非常庞大的

04:19.660 --> 04:20.660
理解吧

04:20.660 --> 04:22.660
所以从4K到5照

04:22.660 --> 04:26.660
绝对是一个了不起的一个提升

04:26.660 --> 04:28.660
那QQ

04:28.660 --> 04:29.660
它的一个请求

04:29.660 --> 04:30.660
咱们知道

04:30.660 --> 04:31.660
QQ在请求的时候

04:31.660 --> 04:32.660
咱们都知道

04:32.660 --> 04:34.660
它会跟着请求走

04:34.660 --> 04:36.660
跟着请求飞来飞去

04:36.660 --> 04:37.660
而这个Web Storage

04:37.660 --> 04:38.660
你就放心去用

04:38.660 --> 04:39.660
它不会

04:39.660 --> 04:40.660
因为这个东西

04:40.660 --> 04:43.660
它跟我们的Http的协议

04:43.660 --> 04:45.660
没有半毛钱的关系

04:45.660 --> 04:46.660
所以说

04:46.660 --> 04:47.660
你用的再多

04:47.660 --> 04:50.660
它也不会去增加性能的开销

04:50.660 --> 04:52.660
QQ有时间的限制

04:52.660 --> 04:53.660
而这个Web Storage

04:53.660 --> 04:55.660
它是没有时间限制的

04:55.660 --> 04:56.660
当然

04:56.660 --> 04:58.660
指的是里边的其中一种

04:58.660 --> 04:59.660
叫Local Storage

04:59.660 --> 05:01.660
它是没有时间限制的

05:01.660 --> 05:02.660
那个Session Storage

05:02.660 --> 05:04.660
它是有时间限制的

05:04.660 --> 05:05.660
它其实还是一个

05:05.660 --> 05:06.660
绘画级别的

05:06.660 --> 05:07.660
这么一个存储方案

05:07.660 --> 05:09.660
所以说Local Storage

05:09.660 --> 05:11.660
它永远不会过期

05:11.660 --> 05:13.660
你想要删除它的话

05:13.660 --> 05:14.660
怎么办

05:14.660 --> 05:16.660
只能手动的去删除

05:16.660 --> 05:17.660
浏览器

05:17.660 --> 05:20.660
它可不会自动的帮你去清除

05:20.660 --> 05:21.660
那QQ

05:21.660 --> 05:22.660
我们相解可知道

05:22.660 --> 05:24.660
它没有原生的这些方法

05:24.660 --> 05:25.660
对它进行操作

05:25.660 --> 05:27.660
我们还是费了半天进去

05:27.660 --> 05:29.660
封装了一个自己的一个方法

05:29.660 --> 05:32.660
对它才能够进行一些操作

05:32.660 --> 05:35.660
然后Web Storage

05:35.660 --> 05:36.660
这个东西

05:36.660 --> 05:39.660
它是既成于一个对象

05:39.660 --> 05:40.660
这个对象叫什么

05:40.660 --> 05:41.660
叫Storage

05:41.660 --> 05:42.660
这个对象

05:42.660 --> 05:45.660
是一个原生的GS的内置对象

05:45.660 --> 05:46.660
所以它的身上有

05:46.660 --> 05:48.660
专门的一些操作方法

05:48.660 --> 05:49.660
一会会跟大家去

05:49.660 --> 05:51.660
演示一下Storage这个对象

05:51.660 --> 05:52.660
好不好

05:52.660 --> 05:53.660
QQ是一个字符串

05:53.660 --> 05:54.660
定义的时候

05:54.660 --> 05:57.660
需要用便量去拼这个字符串

05:57.660 --> 05:58.660
特别的麻烦

05:58.660 --> 06:00.660
而取的时候

06:00.660 --> 06:02.660
我们又要去拆这个字符串

06:02.660 --> 06:05.660
所以说存取都是特别的麻烦

06:05.660 --> 06:07.660
需要我们自己去封装方法才行

06:07.660 --> 06:09.660
而这个Web Storage

06:09.660 --> 06:11.660
它的定义到使用

06:11.660 --> 06:12.660
是非常非常的简单

06:12.660 --> 06:14.660
它的存储的方式

06:14.660 --> 06:17.660
就是我们平时所常用的那种

06:17.660 --> 06:19.660
建值队的那种形式

06:19.660 --> 06:21.660
这样的话是不是就很灵活

06:21.660 --> 06:23.660
就是我们平时操作一个对象身上的

06:23.660 --> 06:24.660
一些属性

06:24.660 --> 06:26.660
一个点等于就复职了

06:26.660 --> 06:27.660
然后一个点

06:27.660 --> 06:28.660
是不是生命一个便量

06:28.660 --> 06:29.660
付给它

06:29.660 --> 06:30.660
那是不是就是取之类

06:30.660 --> 06:32.660
所以说你看

06:32.660 --> 06:33.660
简简单单

06:33.660 --> 06:36.660
咱们就列出来了这么多的一些区别

06:36.660 --> 06:37.660
很明显

06:37.660 --> 06:38.660
Web Storage

06:38.660 --> 06:40.660
完胜Cookie

06:40.660 --> 06:42.660
是灭的一败徒弟

06:42.660 --> 06:43.660
是不是好

06:43.660 --> 06:44.660
但是他跟Cookie有一个

06:44.660 --> 06:45.660
共同的一个特征

06:45.660 --> 06:46.660
是什么

06:46.660 --> 06:47.660
不能跨域

06:47.660 --> 06:49.660
这个一定要注意了

06:49.660 --> 06:50.660
不能跨域

06:50.660 --> 06:51.660
这玩意这么给力

06:51.660 --> 06:52.660
是不是

06:52.660 --> 06:54.660
它都有哪些实际的应用

06:54.660 --> 06:55.660
我就说几个

06:55.660 --> 06:56.660
比如说

06:56.660 --> 06:58.660
像大家有没有用过那种功能

06:58.660 --> 07:00.660
就是他能够去保存你的用户的

07:00.660 --> 07:02.660
一些偏好的一些设置

07:02.660 --> 07:03.660
像颜色

07:03.660 --> 07:05.660
主题等等这些

07:05.660 --> 07:07.660
他能够帮你去保存

07:07.660 --> 07:09.660
那这个就是通过Local Storage

07:09.660 --> 07:10.660
去实现的

07:10.660 --> 07:11.660
还有就是

07:11.660 --> 07:14.660
像表单的一些历史输入

07:14.660 --> 07:16.660
特别是像搜索引擎

07:16.660 --> 07:17.660
你可以去试一下

07:17.660 --> 07:19.660
当你去搜索玩一个内容之后

07:19.660 --> 07:20.660
在下一次的时候

07:20.660 --> 07:22.660
其实在这个输入框当中

07:22.660 --> 07:23.660
你是能够看到

07:23.660 --> 07:25.660
它会给你一个提示

07:25.660 --> 07:27.660
就是你之前的搜索历史

07:27.660 --> 07:28.660
这个东西

07:28.660 --> 07:29.660
它怎么存下来

07:29.660 --> 07:32.660
也是通过Local Storage存下来的

07:32.660 --> 07:34.660
还有购物车的功能

07:34.660 --> 07:36.660
购物车的功能

07:36.660 --> 07:38.660
这个大家深有体会

07:38.660 --> 07:40.660
现在购物

07:40.660 --> 07:42.660
电商的网站风筝水起

07:42.660 --> 07:44.660
咱们都在网上去买东西

07:44.660 --> 07:45.660
在买东西的时候

07:45.660 --> 07:47.660
我们是要使用这个购物车

07:47.660 --> 07:49.660
我打开了一个鞋子的页面

07:49.660 --> 07:51.660
在这我收藏了一双鞋子

07:51.660 --> 07:52.660
放到我的购物车了

07:52.660 --> 07:55.660
然后我又打开了一个裤子的页面

07:55.660 --> 07:56.660
我又买了一个裤子

07:56.660 --> 07:57.660
又放到购物车了

07:57.660 --> 07:58.660
这个时候

07:58.660 --> 07:59.660
两个页面

07:59.660 --> 08:01.660
注意是两个页面

08:01.660 --> 08:02.660
不同的页面

08:02.660 --> 08:04.660
当你去结算的时候

08:04.660 --> 08:05.660
你的购物车当中

08:05.660 --> 08:06.660
是既有鞋子

08:06.660 --> 08:07.660
又有裤子

08:07.660 --> 08:09.660
它不会说少了鞋子

08:09.660 --> 08:11.660
或者说少了裤子

08:11.660 --> 08:12.660
懂吗

08:12.660 --> 08:14.660
购物车的这么一个功能

08:14.660 --> 08:15.660
关于这个功能

08:15.660 --> 08:16.660
一会咱们在下节课

08:16.660 --> 08:18.660
会给大家去来上一个实力

08:18.660 --> 08:20.660
就去做购物车的一个功能

08:20.660 --> 08:23.660
还有一些像HTML5当中新增的

08:23.660 --> 08:24.660
这些做游戏

08:24.660 --> 08:25.660
做游戏

08:25.660 --> 08:26.660
它就需要用到一些

08:26.660 --> 08:28.660
本地存储的一些数据了

08:28.660 --> 08:31.660
所以这个应用是非常的广泛的

08:31.660 --> 08:33.660
但凡需要去用到存储

08:33.660 --> 08:35.660
你首先想到的就是Local

08:36.660 --> 08:37.660
行

08:37.660 --> 08:38.660
那接下来咱们就详细的

08:38.660 --> 08:40.660
去说一下这个WebStorage

08:40.660 --> 08:41.660
那这个WebStorage

08:41.660 --> 08:44.660
它其实是提供了两个对象

08:44.660 --> 08:46.660
本地存储的对象

08:46.660 --> 08:53.430
一个叫LocalStorage

08:53.430 --> 08:54.430
记忆

08:54.430 --> 08:55.430
好

08:55.430 --> 09:02.580
另外一个是Session

09:02.580 --> 09:03.580
好

09:03.580 --> 09:04.580
一个是LocalStorage

09:04.580 --> 09:06.580
另外一个是SessionStorage

09:06.580 --> 09:07.580
那这个Session

09:07.580 --> 09:08.580
是不是又见了吧

09:08.580 --> 09:10.580
我们之前在讲的一个Cookie

09:10.580 --> 09:11.580
是不是说过Session

09:11.580 --> 09:12.580
其实就是一个

09:12.580 --> 09:14.580
绘画级别的这么一个存储

09:14.580 --> 09:17.580
那其实SessionStorage也是一样的

09:17.580 --> 09:19.580
它跟虽然说是一个本地存储

09:19.580 --> 09:23.580
但是它还是一个绘画级别的这么一个存储

09:23.580 --> 09:26.580
然后它存储的数据

09:26.580 --> 09:29.580
仅在本次绘画的时候才有用

09:29.580 --> 09:30.580
绘画知道吗

09:30.580 --> 09:32.580
就是一次我们的数据沟通

09:32.580 --> 09:33.580
绘画结束之后

09:33.580 --> 09:36.580
它存储的数据就自动失效了

09:37.580 --> 09:39.580
而且还有一个特点

09:39.580 --> 09:43.580
就是它的数据仅在当前的窗口

09:43.580 --> 09:44.580
有效

09:45.580 --> 09:47.580
而我们的LocalStorage

09:47.580 --> 09:49.580
它是在整个域名下

09:49.580 --> 09:52.580
所有的页面都是有效的

09:52.580 --> 09:53.580
理解吧

09:53.580 --> 09:55.580
所以就是SessionStorage

09:55.580 --> 09:58.580
它由于身上的这些特征限制了它

09:58.580 --> 10:00.580
所以导致SessionStorage

10:00.580 --> 10:03.580
它的一个使用场景是比较少的

10:03.580 --> 10:05.580
平时咱们基本上是用不到的

10:05.580 --> 10:08.580
我们用到的就是LocalStorage

10:08.580 --> 10:10.580
LocalStorage它又叫什么

10:10.580 --> 10:12.580
叫域名的一个本地存储

10:12.580 --> 10:14.580
刚才那个叫什么

10:14.580 --> 10:15.580
绘画存储

10:15.580 --> 10:16.580
这个叫本地存储

10:18.580 --> 10:20.580
它跟SessionStorage

10:20.580 --> 10:22.580
是具有同样的功能

10:22.580 --> 10:23.580
但是

10:23.580 --> 10:25.580
这个东西在浏览器关了之后

10:25.580 --> 10:26.580
就没了

10:26.580 --> 10:27.580
而这个东西

10:27.580 --> 10:28.580
当页面关了

10:28.580 --> 10:30.580
当这个东西页面关了之后

10:30.580 --> 10:31.580
它是依然存在的

10:31.580 --> 10:32.580
其实浏览器关了

10:32.580 --> 10:33.580
它也存在

10:33.580 --> 10:34.580
只是咱们

10:34.580 --> 10:35.580
浏览器已经关了

10:35.580 --> 10:36.580
你要它还有何用

10:36.580 --> 10:37.580
是吧

10:37.580 --> 10:38.580
只有打开浏览器

10:38.580 --> 10:40.580
它才有用

10:40.580 --> 10:42.580
当我们重新去打开页面的时候

10:42.580 --> 10:43.580
这个数据

10:43.580 --> 10:45.580
它是仍然存在的

10:45.580 --> 10:46.580
所以咱们重点

10:46.580 --> 10:48.580
就要去说一下LocalStorage

10:50.580 --> 10:51.580
首先

10:51.580 --> 10:54.580
他们俩都继承于一个对象

10:54.580 --> 10:55.580
叫Storage

10:55.580 --> 10:56.580
OK

10:56.580 --> 10:58.580
我们就来看一下Storage

10:58.580 --> 11:00.580
这是一个GS的一个内置对象

11:00.580 --> 11:01.580
打开页面

11:01.580 --> 11:02.580
控制台

11:02.580 --> 11:03.580
这样的话

11:03.580 --> 11:05.580
我们是不是看到了一个Storage

11:05.580 --> 11:06.580
刷新

11:06.580 --> 11:09.900
不行 我得DIR

11:09.900 --> 11:10.900
再来

11:10.900 --> 11:11.900
把它展开

11:11.900 --> 11:12.900
看一下

11:12.900 --> 11:13.900
它其实就是一个

11:13.900 --> 11:14.900
构造函数

11:14.900 --> 11:15.900
看到了

11:15.900 --> 11:16.900
它身上

11:16.900 --> 11:18.900
其实是有很多的一些

11:18.900 --> 11:19.900
功用的一些属性跟方法

11:19.900 --> 11:20.900
那一会

11:20.900 --> 11:21.900
咱们就能够用得到了

11:21.900 --> 11:23.900
PortoTap当中

11:23.900 --> 11:24.900
这些东西

11:24.900 --> 11:25.900
咱们需要去用到的

11:25.900 --> 11:26.900
好

11:26.900 --> 11:27.900
然后

11:27.900 --> 11:28.900
WebStorage

11:28.900 --> 11:30.900
它所提供的

11:30.900 --> 11:31.900
API的这些接口

11:31.900 --> 11:33.900
都是存储在Storage

11:33.900 --> 11:34.900
对象身上

11:34.900 --> 11:36.900
它跟Array

11:36.900 --> 11:37.900
等等

11:37.900 --> 11:38.900
都是一样的

11:38.900 --> 11:39.900
是GS的内置对象

11:39.900 --> 11:41.900
这是一个构造函数

11:41.900 --> 11:43.900
我们的SessionStorage

11:43.900 --> 11:44.900
还有LocalStorage

11:44.900 --> 11:48.270
其实都是继承于它

11:48.270 --> 11:49.270
来看一下

11:49.270 --> 11:54.610
然后这是LocalSessionStorage

11:54.610 --> 11:55.610
刷新一下

11:55.610 --> 11:56.610
当我们去点开

11:56.610 --> 11:57.610
点开之后

11:57.610 --> 11:58.610
你看到没有

11:58.610 --> 11:59.610
这有一个Porto

11:59.610 --> 12:01.610
Porto是指的圆形对象

12:01.610 --> 12:02.610
其实就是

12:02.610 --> 12:05.610
刚才咱们所看到的Storage的对象

12:05.610 --> 12:06.610
然后

12:06.610 --> 12:07.610
这个对象

12:07.610 --> 12:09.610
是让它圆形里边放的属性跟方法

12:09.610 --> 12:10.610
你看

12:10.610 --> 12:11.610
我的对象继承了

12:11.610 --> 12:12.610
能不能用

12:12.610 --> 12:13.610
必须可以

12:13.610 --> 12:14.610
这个也是一样的

12:14.610 --> 12:15.610
你看看

12:15.610 --> 12:16.610
是不是指向的是Storage

12:16.610 --> 12:17.610
所以

12:17.610 --> 12:18.610
这两个都会继承

12:18.610 --> 12:20.610
我们Storage对象身上的

12:20.610 --> 12:23.610
这些属性跟方法

12:24.610 --> 12:25.610
这个Storage

12:25.610 --> 12:26.610
对象

12:26.610 --> 12:28.610
它其实提供了

12:28.610 --> 12:29.610
五个方法

12:29.610 --> 12:30.610
跟一条属性

12:30.610 --> 12:31.610
你看

12:31.610 --> 12:32.610
这是方法

12:32.610 --> 12:33.610
12345

12:33.610 --> 12:34.610
五个

12:34.610 --> 12:35.610
然后一条属性

12:35.610 --> 12:37.610
就是一个Lens属性

12:37.610 --> 12:38.610
接着

12:38.610 --> 12:39.610
咱们就来介绍一下

12:39.610 --> 12:40.610
这里头的

12:40.610 --> 12:41.610
这些属性跟方法

12:41.610 --> 12:42.610
都是有什么用

12:42.610 --> 12:43.610
好不好

12:43.610 --> 12:44.610
我就在这标一下

12:44.610 --> 12:45.610
来

12:45.610 --> 12:46.610
第一个

12:46.610 --> 12:47.610
第一个是Lens

12:49.610 --> 12:50.610
这个大家一看

12:50.610 --> 12:51.610
是不是就知道

12:52.610 --> 12:53.610
Lens

12:53.610 --> 12:55.610
Lens指的是什么

12:55.610 --> 12:57.610
本地存储

12:57.610 --> 12:59.610
数据的数量

12:59.610 --> 13:00.610
Lens

13:00.610 --> 13:01.610
然后

13:01.610 --> 13:02.610
第二个是什么

13:02.610 --> 13:03.610
K

13:04.610 --> 13:05.610
这是一个方法

13:05.610 --> 13:06.610
这个方法是

13:06.610 --> 13:07.610
通过锁影

13:07.610 --> 13:08.610
锁影

13:08.610 --> 13:10.610
去找到存储的数据

13:11.610 --> 13:12.610
这个方法

13:12.610 --> 13:13.610
有一些积累

13:13.610 --> 13:14.610
为什么有一些积累

13:14.610 --> 13:16.610
先提前说一下

13:16.610 --> 13:17.610
你看

13:17.610 --> 13:18.610
它是通过锁影去找

13:18.610 --> 13:19.610
是吧

13:19.610 --> 13:20.610
通过锁影去找

13:20.610 --> 13:21.610
按道理就是

13:21.610 --> 13:22.610
我们一般想的

13:22.610 --> 13:23.610
是不是

13:23.610 --> 13:24.610
我们存储的时候

13:24.610 --> 13:26.610
比如说存储多条

13:26.610 --> 13:27.610
存储的时候

13:27.610 --> 13:28.610
会不会

13:28.610 --> 13:30.610
是不是就是按照我存储的

13:30.610 --> 13:32.610
先后顺序来放的

13:32.610 --> 13:33.610
所以按道理

13:33.610 --> 13:35.610
是不是要跟我存储的时候的

13:35.610 --> 13:36.610
锁影

13:36.610 --> 13:37.610
保持一致

13:37.610 --> 13:38.610
只有这样的话

13:38.610 --> 13:39.610
我们才能知道

13:39.610 --> 13:40.610
这条数据的锁影

13:40.610 --> 13:42.610
如果说你给我保持不一致的话

13:42.610 --> 13:43.610
我就不知道锁影了

13:43.610 --> 13:45.610
那我怎么去通过锁影

13:45.610 --> 13:47.610
取到我想要的呢

13:47.610 --> 13:48.610
其实

13:48.610 --> 13:50.610
它就是这样

13:50.610 --> 13:51.610
所以说

13:51.610 --> 13:52.610
它有一些积累

13:52.610 --> 13:53.610
我们存储

13:53.610 --> 13:55.610
比如说存储3条数据

13:55.610 --> 13:56.610
这3条数据

13:56.610 --> 13:58.610
按照我们的顺序去存

13:58.610 --> 13:59.610
存完之后

13:59.610 --> 14:01.610
人家在本地存储那儿就变了

14:01.610 --> 14:02.610
这个顺序

14:02.610 --> 14:03.610
人家的浏览器给咱们变了

14:03.610 --> 14:04.610
所以

14:04.610 --> 14:05.610
你看存储

14:05.610 --> 14:06.610
第0条的时候

14:06.610 --> 14:07.610
这个比如说

14:07.610 --> 14:08.610
NAME

14:08.610 --> 14:09.610
但是

14:09.610 --> 14:10.610
我们去取第0条的时候

14:10.610 --> 14:11.610
它可不一定是NAME

14:11.610 --> 14:12.610
所以这个东西

14:12.610 --> 14:13.610
有一些积累

14:13.610 --> 14:14.610
好

14:14.610 --> 14:15.610
然后第3个

14:15.610 --> 14:16.610
第3个是

14:16.610 --> 14:21.560
GateItem

14:21.560 --> 14:22.560
Item

14:22.560 --> 14:23.560
那这个方法

14:23.560 --> 14:24.560
它是用来干嘛

14:24.560 --> 14:25.560
它是通过

14:25.560 --> 14:28.870
通过建名

14:28.870 --> 14:29.870
建名

14:29.870 --> 14:30.870
然后

14:30.870 --> 14:32.870
取到

14:32.870 --> 14:35.870
本地存储的数据

14:35.870 --> 14:37.870
这是第3个

14:37.870 --> 14:39.870
那这个简单

14:39.870 --> 14:40.870
我们上节课

14:40.870 --> 14:42.870
封装的CookieGate

14:42.870 --> 14:43.870
的那个方法是一样的

14:43.870 --> 14:44.870
你给上一个什么的

14:44.870 --> 14:45.870
local storage

14:45.870 --> 14:46.870
它的一个名字

14:46.870 --> 14:48.870
就能够取到这条数据了

14:48.870 --> 14:49.870
这些方法都是人家原生的

14:49.870 --> 14:50.870
所以说

14:50.870 --> 14:51.870
它操作起来

14:51.870 --> 14:52.870
非常的简单

14:52.870 --> 14:55.870
然后再来一个SiteItem

14:55.870 --> 14:59.270
SiteItem

14:59.270 --> 15:00.270
这个是什么

15:00.270 --> 15:02.270
是设置

15:02.270 --> 15:03.270
或者说存储

15:03.270 --> 15:06.270
一个设置

15:06.270 --> 15:10.270
一个本地存储数据

15:10.270 --> 15:11.270
就好比

15:11.270 --> 15:12.270
我们的那个

15:12.270 --> 15:13.270
那个什么

15:13.270 --> 15:14.270
Site

15:14.270 --> 15:15.270
就是上节课

15:15.270 --> 15:16.270
咱封装的那个Site

15:16.270 --> 15:17.270
跟他们其实都是一样的

15:17.270 --> 15:18.270
然后还有一个Remove

15:18.270 --> 15:21.270
RemoveItem

15:21.270 --> 15:22.270
这个是什么

15:22.270 --> 15:24.270
删除

15:24.270 --> 15:25.270
删除

15:25.270 --> 15:27.270
删除一个

15:27.270 --> 15:33.650
本地存储数据

15:33.650 --> 15:34.650
好

15:34.650 --> 15:35.650
删除一个

15:35.650 --> 15:37.650
然后还有一个Clear

15:37.650 --> 15:39.650
那个Clear

15:39.650 --> 15:40.650
是什么

15:40.650 --> 15:42.650
本地存储数据

15:42.650 --> 15:47.010
总共提供了

15:47.010 --> 15:48.010
五个方法

15:48.010 --> 15:50.010
一条属性

15:50.010 --> 15:51.010
好

15:51.010 --> 15:52.010
然后接下来

15:52.010 --> 15:53.010
咱们就来演示一下

15:53.010 --> 15:54.010
行吗

15:54.010 --> 15:55.010
首先我们先来看一下

15:55.010 --> 15:56.010
Lens

15:56.010 --> 15:57.010
Lens

15:57.010 --> 15:58.010
那就是Consulogue

15:58.010 --> 16:01.580
local storage

16:01.580 --> 16:02.580
它的Lens属性

16:02.580 --> 16:03.580
注意

16:03.580 --> 16:04.580
这个跟Cooke

16:04.580 --> 16:05.580
是一样的

16:05.580 --> 16:06.580
取到的就是所有的

16:06.580 --> 16:07.580
但是Cooke

16:07.580 --> 16:08.580
不是没有Lens吗

16:08.580 --> 16:09.580
人家有Lens

16:09.580 --> 16:10.580
但是取到的

16:10.580 --> 16:11.580
所有这一点

16:11.580 --> 16:12.580
是它俩共同的一个特征

16:12.580 --> 16:13.580
来看一下

16:13.580 --> 16:14.580
在这我们刷新一下

16:14.580 --> 16:15.580
控制台结果

16:15.580 --> 16:16.580
就是一个0

16:16.580 --> 16:18.580
那关于local storage

16:18.580 --> 16:19.580
它是在哪里存储

16:19.580 --> 16:20.580
在这个application

16:20.580 --> 16:21.580
当中

16:21.580 --> 16:22.580
local storage

16:22.580 --> 16:23.580
看到吗

16:23.580 --> 16:24.580
Storage

16:24.580 --> 16:25.580
这有一个local storage

16:25.580 --> 16:26.580
点击一下

16:26.580 --> 16:28.580
在这要去说一下

16:28.580 --> 16:29.580
我们刚才有句话

16:29.580 --> 16:30.580
不知道大家有没有注意

16:30.580 --> 16:32.580
就是说Cooke

16:32.580 --> 16:33.580
跟它的一个区别的时候

16:33.580 --> 16:34.580
说过

16:34.580 --> 16:35.580
Cooke

16:35.580 --> 16:36.580
它会

16:36.580 --> 16:39.580
依托于HTTP的一个协议

16:39.580 --> 16:40.580
是不是

16:40.580 --> 16:41.580
而我们在刚才

16:41.580 --> 16:42.580
我说

16:42.580 --> 16:43.580
local storage

16:43.580 --> 16:46.580
它跟HTTP协议

16:46.580 --> 16:47.580
没有半毛钱的关系

16:47.580 --> 16:48.580
所以说

16:48.580 --> 16:49.580
你看

16:49.580 --> 16:50.580
在这咱存储的

16:50.580 --> 16:51.580
这个是一个fuel的协议

16:51.580 --> 16:52.580
这个地方

16:52.580 --> 16:53.580
其实是有的

16:53.580 --> 16:54.580
只不过

16:54.580 --> 16:55.580
现在是没有

16:55.580 --> 16:56.580
咱是看不到

16:56.580 --> 16:57.580
一会就能看到了

16:57.580 --> 16:59.580
你就不需要再给它

16:59.580 --> 17:01.580
变成一个什么的HTTP了

17:01.580 --> 17:02.580
行

17:02.580 --> 17:03.580
这个Lens为0

17:03.580 --> 17:04.580
就证明现在

17:04.580 --> 17:05.580
什么东西都没有

17:05.580 --> 17:06.580
然后

17:06.580 --> 17:07.580
接下来咱们就添几个

17:07.580 --> 17:08.580
好不好

17:08.580 --> 17:09.580
那添几个

17:09.580 --> 17:10.580
是怎么去添

17:10.580 --> 17:11.580
local storage

17:11.580 --> 17:12.580
身上的这个方法

17:12.580 --> 17:13.580
这个方法叫什么

17:13.580 --> 17:15.580
SiteItem

17:16.580 --> 17:18.580
我设置一个数据

17:18.580 --> 17:19.580
这个数据

17:19.580 --> 17:20.580
比如说

17:20.580 --> 17:22.580
我们叫它一个name

17:22.580 --> 17:23.580
它就是

17:23.580 --> 17:25.580
kvalue的形式

17:25.580 --> 17:27.580
前面有说过

17:27.580 --> 17:28.580
所以说你去用的话

17:28.580 --> 17:30.580
就是k跟value

17:30.580 --> 17:31.580
它的一个value

17:31.580 --> 17:32.580
我给上一个开门

17:32.580 --> 17:33.580
name

17:33.580 --> 17:34.580
就是一个开门

17:34.580 --> 17:35.580
再来看

17:35.580 --> 17:36.580
刷新一下

17:36.580 --> 17:37.580
现在你看到没有

17:37.580 --> 17:38.580
是不是已经多出来

17:38.580 --> 17:39.580
一条数据了

17:39.580 --> 17:40.580
好

17:40.580 --> 17:41.580
k

17:41.580 --> 17:42.580
存储就这么简单

17:42.580 --> 17:43.580
一个k 一个value

17:43.580 --> 17:44.580
别的自断都没了

17:44.580 --> 17:45.580
它比

17:45.580 --> 17:48.580
Cookie要简单太多了

17:48.580 --> 17:49.580
行吧

17:49.580 --> 17:50.580
那你看我们的fuel协议当中

17:50.580 --> 17:52.580
是不是已经有local storage了

17:52.580 --> 17:53.580
OK

17:53.580 --> 17:54.580
这个就存了一下

17:54.580 --> 17:55.580
存了之后

17:55.580 --> 17:57.580
你看我们的lens

17:57.580 --> 17:58.580
我在下边

17:58.580 --> 17:59.580
再来一下

17:59.580 --> 18:00.580
然后我们再来看

18:00.580 --> 18:01.580
这个结果

18:01.580 --> 18:02.580
其实不用看了

18:02.580 --> 18:03.580
就是一个lens

18:03.580 --> 18:04.580
现在就是一个e

18:04.580 --> 18:06.580
好

18:06.580 --> 18:08.580
现在我存储了一条数据

18:08.580 --> 18:09.580
然后接下来

18:09.580 --> 18:10.580
我们再来存储

18:10.580 --> 18:11.580
这个东西

18:11.580 --> 18:12.580
用起来真的

18:12.580 --> 18:13.580
方便的

18:13.580 --> 18:14.580
不行

18:14.580 --> 18:15.580
site item

18:15.580 --> 18:16.580
这是啥

18:16.580 --> 18:17.580
H

18:17.580 --> 18:18.580
H就是一个年龄

18:18.580 --> 18:19.580
这个年龄是多少

18:19.580 --> 18:20.580
是一个18

18:20.580 --> 18:21.580
好

18:21.580 --> 18:22.580
我们再来看

18:22.580 --> 18:23.580
刷新一下

18:23.580 --> 18:24.580
在这

18:24.580 --> 18:25.580
Application

18:25.580 --> 18:26.580
看到吗

18:26.580 --> 18:27.580
多出来了一个H

18:27.580 --> 18:28.580
它的值就是一个18

18:28.580 --> 18:29.580
再来

18:29.580 --> 18:30.580
再来上一个Sex

18:30.580 --> 18:31.580
Sex就是一个性别

18:31.580 --> 18:32.580
这没有

18:32.580 --> 18:34.580
男性

18:34.580 --> 18:35.580
刷新

18:35.580 --> 18:36.580
有没有Sex

18:36.580 --> 18:37.580
看到吗

18:37.580 --> 18:38.580
好

18:38.580 --> 18:39.580
这个地方

18:39.580 --> 18:40.580
让大家看的是什么

18:40.580 --> 18:41.580
我再来一个

18:41.580 --> 18:42.580
再来一个

18:42.580 --> 18:44.580
再来上一个兴趣

18:45.580 --> 18:46.580
interest

18:47.580 --> 18:50.580
stere

18:51.580 --> 18:52.580
对着了

18:52.580 --> 18:53.580
interest drink

18:55.580 --> 18:56.580
是吧

18:56.580 --> 18:57.580
爱好喝酒

18:57.580 --> 18:58.580
drink

18:58.580 --> 18:59.580
好

18:59.580 --> 19:00.580
那在这儿

19:00.580 --> 19:01.580
我想让大家看的是什么

19:01.580 --> 19:02.580
就是顺序

19:02.580 --> 19:03.580
你看

19:03.580 --> 19:04.580
我在这存储的

19:04.580 --> 19:05.580
第一个

19:05.580 --> 19:06.580
是不是内蒙

19:06.580 --> 19:07.580
但是内蒙

19:07.580 --> 19:08.580
你发现

19:08.580 --> 19:09.580
到这了

19:10.580 --> 19:11.580
有没有发现

19:11.580 --> 19:12.580
然后

19:12.580 --> 19:13.580
H在它的后边

19:13.580 --> 19:14.580
你会发现

19:14.580 --> 19:15.580
H到上边了

19:15.580 --> 19:16.580
它这个排序

19:16.580 --> 19:18.580
貌似是通过什么

19:19.580 --> 19:20.580
自服

19:20.580 --> 19:22.580
自母的顺序去排的

19:22.580 --> 19:23.580
但是

19:23.580 --> 19:24.580
没有研究过

19:24.580 --> 19:25.580
这个东西

19:25.580 --> 19:26.580
所以我们的

19:26.580 --> 19:27.580
K

19:27.580 --> 19:28.580
通过这个去取

19:28.580 --> 19:30.580
就有一些积累了

19:30.580 --> 19:31.580
比如说

19:31.580 --> 19:32.580
我们去取H

19:32.580 --> 19:33.580
本身

19:33.580 --> 19:34.580
我知道H

19:34.580 --> 19:35.580
假设说

19:35.580 --> 19:37.580
我是放在第二次去添加

19:37.580 --> 19:38.580
它的一个

19:38.580 --> 19:39.580
假设就是一个E

19:39.580 --> 19:40.580
但是

19:40.580 --> 19:41.580
我们在真正去取的话

19:41.580 --> 19:42.580
01E对是啥

19:42.580 --> 19:43.580
是内蒙

19:43.580 --> 19:45.580
所以你就取不到了

19:45.580 --> 19:46.580
我们演示一下

19:46.580 --> 19:47.580
理解吧

19:48.580 --> 19:49.580
好

19:49.580 --> 19:50.580
然后还有

19:50.580 --> 19:51.580
我们到这个

19:51.580 --> 19:52.580
low cost storage

19:52.580 --> 19:53.580
大家所看到的

19:53.580 --> 19:54.580
就是说

19:54.580 --> 19:55.580
存储的时候

19:55.580 --> 19:56.580
其实都是一个自负串

19:56.580 --> 19:57.580
你说对象

19:57.580 --> 19:58.580
它能否存储呢

19:58.580 --> 20:00.580
来 咱试一下

20:00.580 --> 20:01.580
我想存一个对象

20:01.580 --> 20:02.580
比如说

20:02.580 --> 20:03.580
对象color

20:03.580 --> 20:04.580
然后它的一个结果

20:04.580 --> 20:05.580
是什么呢

20:05.580 --> 20:06.580
是这个

20:06.580 --> 20:07.580
我们这用这个

20:07.580 --> 20:08.580
right

20:08.580 --> 20:09.580
红

20:09.580 --> 20:10.580
然后呢

20:10.580 --> 20:11.580
绿

20:11.580 --> 20:12.580
就两个就够了

20:12.580 --> 20:13.580
好

20:13.580 --> 20:14.580
我

20:14.580 --> 20:15.580
取到的一个数据

20:15.580 --> 20:16.580
是一个数组

20:16.580 --> 20:18.580
这个数组能否存储到

20:18.580 --> 20:19.580
low cost storage

20:19.580 --> 20:20.580
我们来看

20:20.580 --> 20:21.580
发现一下

20:21.580 --> 20:22.580
这个时候

20:25.950 --> 20:26.950
这还是一个什么的

20:26.950 --> 20:27.950
我说不对

20:27.950 --> 20:29.950
这还是一个什么的

20:29.950 --> 20:30.950
还是一个

20:30.950 --> 20:31.950
自负串

20:32.950 --> 20:33.950
color

20:33.950 --> 20:34.950
等于这个

20:35.950 --> 20:36.950
然后接着

20:36.950 --> 20:37.950
第二个参数

20:37.950 --> 20:38.950
就是一个color

20:39.950 --> 20:40.950
好

20:40.950 --> 20:41.950
然后再来看

20:41.950 --> 20:42.950
发现一下

20:49.880 --> 20:50.880
难道说数组

20:50.880 --> 20:51.880
它能够解析吗

20:52.880 --> 20:54.880
靠这么意外吗

20:54.880 --> 20:55.880
稍等

20:55.880 --> 20:56.880
来

20:56.880 --> 20:57.880
这是一个意外

20:57.880 --> 20:59.880
color等于这个

20:59.880 --> 21:00.880
给上一个

21:00.880 --> 21:01.880
真正的一个对象

21:01.880 --> 21:02.880
这个对象

21:02.880 --> 21:03.880
比如说

21:03.880 --> 21:04.880
C1

21:04.880 --> 21:05.880
是一个right

21:05.880 --> 21:06.880
然后呢

21:06.880 --> 21:07.880
C2

21:07.880 --> 21:08.880
C2

21:08.880 --> 21:09.880
C2

21:09.880 --> 21:10.880
是一个green

21:11.880 --> 21:12.880
然后这时候

21:12.880 --> 21:13.880
我们再来存

21:13.880 --> 21:14.880
这个color

21:14.880 --> 21:15.880
把上面给它覆盖了

21:15.880 --> 21:16.880
再来看

21:16.880 --> 21:17.880
发现一下

21:17.880 --> 21:18.880
这个就

21:18.880 --> 21:19.880
是我想要的

21:19.880 --> 21:20.880
好吧

21:20.880 --> 21:21.880
原来是这个数组

21:21.880 --> 21:22.880
它好像还能够

21:23.880 --> 21:24.880
给它解析

21:24.880 --> 21:25.880
稍等

21:25.880 --> 21:26.880
我再看一下

21:26.880 --> 21:27.880
这个之前还真不知道

21:27.880 --> 21:28.880
来

21:28.880 --> 21:29.880
发现一下

21:31.880 --> 21:32.880
解析成这个样子

21:32.880 --> 21:34.880
它是把它转成了一个自负串了

21:34.880 --> 21:35.880
行吧

21:35.880 --> 21:36.880
好吧

21:36.880 --> 21:37.880
那其实也无所谓

21:37.880 --> 21:39.880
那如果说

21:39.880 --> 21:40.880
你要去

21:40.880 --> 21:41.880
用它的这个特征的话

21:41.880 --> 21:43.880
反而会给你增加麻烦

21:43.880 --> 21:44.880
为什么呢

21:44.880 --> 21:45.880
是这样的

21:45.880 --> 21:46.880
你看

21:46.880 --> 21:47.880
对象的话

21:47.880 --> 21:48.880
它其实

21:48.880 --> 21:50.880
都是给它转成一个自负串

21:50.880 --> 21:51.880
我知道

21:51.880 --> 21:52.880
对了

21:52.880 --> 21:53.880
是没有问题

21:53.880 --> 21:55.880
人家就是转成自负串了

21:55.880 --> 21:56.880
color转成自负串之后

21:56.880 --> 21:58.880
就是把扩号去掉

21:58.880 --> 21:59.880
对着

21:59.880 --> 22:00.880
对着

22:00.880 --> 22:01.880
刚才一下没想到这

22:01.880 --> 22:02.880
对着

22:02.880 --> 22:03.880
它都是转成一个自负串了

22:03.880 --> 22:05.880
转成自负串之后

22:05.880 --> 22:06.880
对象转成一个自负串

22:06.880 --> 22:07.880
它的一个结果

22:07.880 --> 22:08.880
是什么呢

22:08.880 --> 22:09.880
就是Object

22:09.880 --> 22:10.880
对吧

22:10.880 --> 22:11.880
Object

22:11.880 --> 22:12.880
来

22:13.880 --> 22:14.880
我把

22:14.880 --> 22:19.280
刷新一下

22:19.280 --> 22:21.280
我说咋回事了

22:21.280 --> 22:22.280
没有刷新

22:22.280 --> 22:23.280
把它复制一下

22:23.280 --> 22:24.280
放到这

22:24.280 --> 22:25.280
好

22:25.280 --> 22:26.280
转自负串之后

22:26.280 --> 22:27.280
它的一个结果

22:27.280 --> 22:28.280
对着

22:28.280 --> 22:29.280
好

22:29.280 --> 22:30.280
然后在这我要去说一下

22:30.280 --> 22:31.280
什么

22:31.280 --> 22:32.280
就是

22:32.280 --> 22:34.280
我们往往所取到的数据

22:34.280 --> 22:35.280
有的时候

22:35.280 --> 22:36.280
其实是很庞大的

22:36.280 --> 22:37.280
因为有的时候

22:37.280 --> 22:39.280
比如购物车

22:39.280 --> 22:40.280
购物车的功能当中

22:40.280 --> 22:42.280
我要存储这个商品

22:42.280 --> 22:43.280
这个商品

22:43.280 --> 22:45.280
它可能就包括商品的名称

22:45.280 --> 22:46.280
然后它的颜色

22:46.280 --> 22:47.280
它的一些属性

22:47.280 --> 22:48.280
它的一些价格

22:48.280 --> 22:50.280
销量等等这些东西

22:50.280 --> 22:52.280
它其实是一个

22:52.280 --> 22:54.280
对象类型的一个数据

22:54.280 --> 22:55.280
我就需要把这个数据

22:55.280 --> 22:56.280
给它存储了

22:56.280 --> 22:57.280
明白吧

22:57.280 --> 22:58.280
但是

22:58.280 --> 22:59.280
local storage存储的

22:59.280 --> 23:00.280
就是把你的数据

23:00.280 --> 23:02.280
给它转成一个自负串

23:02.280 --> 23:03.280
理解吧

23:03.280 --> 23:05.280
转成自负串之后

23:05.280 --> 23:06.280
得出的一个结果

23:06.280 --> 23:07.280
就是什么

23:07.280 --> 23:08.280
这个ride

23:08.280 --> 23:09.280
还有这个grin

23:09.280 --> 23:10.280
这个是正确的

23:10.280 --> 23:11.280
好

23:11.280 --> 23:13.280
然后这个就得出来一个结果

23:13.280 --> 23:14.280
是这个样子

23:14.280 --> 23:16.280
那这样的话就不行了

23:16.280 --> 23:17.280
那这样的话

23:17.280 --> 23:18.280
是不是我的数据

23:18.280 --> 23:19.280
只能去用什么呢

23:19.280 --> 23:20.280
用这个数组

23:20.280 --> 23:21.280
而且还有另外一个问题

23:21.280 --> 23:22.280
就是说

23:22.280 --> 23:23.280
我存储的时候

23:23.280 --> 23:24.280
是一个

23:24.280 --> 23:25.280
假设说

23:25.280 --> 23:26.280
是一个数组

23:26.280 --> 23:27.280
那我取过来之后

23:27.280 --> 23:29.280
也想要让它变成一个数组

23:29.280 --> 23:30.280
而不是

23:30.280 --> 23:31.280
你现在这个东西

23:31.280 --> 23:32.280
取过来

23:32.280 --> 23:33.280
它是一个什么呢

23:33.280 --> 23:34.280
是一个自负串

23:34.280 --> 23:36.280
那我就需要把自负串

23:36.280 --> 23:37.280
再转成一个数组了

23:37.280 --> 23:38.280
就麻烦了

23:38.280 --> 23:39.280
理解吧

23:39.280 --> 23:40.280
那所以

23:40.280 --> 23:41.280
这个地方

23:41.280 --> 23:43.280
我们能不能存这个对象

23:43.280 --> 23:44.280
必须可以存对象

23:44.280 --> 23:46.280
那怎么存的

23:46.280 --> 23:47.280
我们在这

23:47.280 --> 23:49.280
就需要通过

23:49.280 --> 23:50.280
just点

23:50.280 --> 23:51.280
点什么呢

23:51.280 --> 23:52.280
点pass

23:52.280 --> 23:55.720
首先你应该是

23:55.720 --> 23:56.720
是这个

23:56.720 --> 23:57.720
然后我把

23:57.720 --> 23:58.720
color

23:58.720 --> 23:59.720
当然我这个

23:59.720 --> 24:00.720
不标准

24:00.720 --> 24:01.720
标准的话

24:01.720 --> 24:03.720
它应该是一个双引号

24:03.720 --> 24:05.720
也是一个双引号

24:05.720 --> 24:06.720
双引号

24:06.720 --> 24:09.720
这个估计也是双引号吧

24:09.720 --> 24:12.720
我就改一下

24:12.720 --> 24:14.720
这个结子呢

24:14.720 --> 24:16.720
有这点毛病啊

24:16.720 --> 24:20.250
要求可多了

24:20.250 --> 24:21.250
好

24:21.250 --> 24:22.250
双引号这样的话

24:22.250 --> 24:23.250
就对了啊

24:23.250 --> 24:24.250
符合这个格式了

24:24.250 --> 24:25.250
行然后呢

24:25.250 --> 24:26.250
再来看刷新一下

24:26.250 --> 24:27.250
这个时候呢

24:27.250 --> 24:28.250
你看在这存储的

24:28.250 --> 24:29.250
是不是就是

24:29.250 --> 24:30.250
我们原来的那个对象

24:30.250 --> 24:32.250
那个对象长什么样子呢

24:32.250 --> 24:33.250
它就是什么样子

24:33.250 --> 24:34.250
以及我把它注释掉

24:34.250 --> 24:35.250
然后再来看刷新一下

24:35.250 --> 24:36.250
是不是

24:36.250 --> 24:37.250
还是一个数组吧

24:37.250 --> 24:38.250
好

24:38.250 --> 24:39.250
函数我就不再去测试了

24:39.250 --> 24:40.250
明白吧

24:40.250 --> 24:41.250
行

24:41.250 --> 24:42.250
这样的话你看存下来了

24:42.250 --> 24:43.250
存下来之后呢

24:43.250 --> 24:44.250
那接下来

24:44.250 --> 24:45.250
我其实是可以去

24:45.250 --> 24:46.250
获取到的

24:46.250 --> 24:47.250
懂吧

24:47.250 --> 24:48.250
我获取

24:48.250 --> 24:49.250
怎么去获取呢

24:49.250 --> 24:50.250
local storage

24:50.250 --> 24:51.250
点

24:51.250 --> 24:54.580
get item

24:54.580 --> 24:55.580
item

24:55.580 --> 24:56.580
然后呢

24:56.580 --> 24:57.580
这个里头呢

24:57.580 --> 24:58.580
我们要给给什么呢

24:58.580 --> 24:59.580
给这个color

25:00.580 --> 25:01.580
然后注意看啊

25:01.580 --> 25:02.580
来刷新一下

25:02.580 --> 25:03.580
控制台

25:03.580 --> 25:04.580
这个时候呢

25:04.580 --> 25:05.580
取到没有

25:05.580 --> 25:06.580
这个东西取到了

25:06.580 --> 25:07.580
但是它是个啥

25:07.580 --> 25:08.580
是一个字符串

25:08.580 --> 25:10.580
我们想要让它变成一个对象

25:10.580 --> 25:11.580
那怎么办呢

25:11.580 --> 25:12.580
是不是

25:12.580 --> 25:13.580
jason

25:13.580 --> 25:14.580
点点

25:14.580 --> 25:15.580
pass

25:16.580 --> 25:17.580
然后

25:17.580 --> 25:18.580
再来看结果

25:18.580 --> 25:19.580
刷新

25:19.580 --> 25:21.580
变成真实的对象了吧

25:21.580 --> 25:22.580
明白吧

25:22.580 --> 25:23.580
这样的话

25:23.580 --> 25:24.580
我们再去操作对象

25:24.580 --> 25:25.580
是不是就是那些属性操作的

25:25.580 --> 25:26.580
一些方法了

25:26.580 --> 25:27.580
好

25:27.580 --> 25:28.580
在这呢

25:28.580 --> 25:29.580
需要去注意一下

25:29.580 --> 25:31.580
当你去存储的数据呢

25:31.580 --> 25:32.580
是一个对象型的数据

25:32.580 --> 25:34.580
那你就需要给他

25:34.580 --> 25:35.580
干嘛

25:35.580 --> 25:36.580
先给他

25:36.580 --> 25:37.580
用jason

25:37.580 --> 25:38.580
给他转一下

25:38.580 --> 25:39.580
转成一个jason的字符串

25:39.580 --> 25:40.580
完了之后呢

25:40.580 --> 25:42.580
到时候你再去取回来之后呢

25:42.580 --> 25:44.580
再给他用jason的方法

25:44.580 --> 25:46.580
转成一个jason对象

25:46.580 --> 25:47.580
明白吧

25:47.580 --> 25:48.580
好

25:48.580 --> 25:49.580
然后呢

25:49.580 --> 25:50.580
那还有一个方法

25:50.580 --> 25:51.580
我们的guide

25:51.580 --> 25:52.580
side

25:52.580 --> 25:53.580
guide都已经说了

25:53.580 --> 25:54.580
接下来呢

25:54.580 --> 25:55.580
我们再来local storage

25:55.580 --> 25:56.580
点

25:56.580 --> 25:57.580
我们还有一个remove

25:57.580 --> 25:58.580
是不是

25:58.580 --> 25:59.580
remove item

25:59.580 --> 26:00.580
那比如说

26:00.580 --> 26:02.580
我现在把这个

26:02.580 --> 26:03.580
把

26:03.580 --> 26:05.580
calor给他去掉

26:05.580 --> 26:06.580
删掉他

26:06.580 --> 26:07.580
注意啊

26:07.580 --> 26:08.580
再来刷新

26:08.580 --> 26:09.580
calor

26:09.580 --> 26:10.580
是不是就没了

26:10.580 --> 26:11.580
删除

26:11.580 --> 26:13.580
开油

26:13.580 --> 26:14.580
点

26:14.580 --> 26:15.580
clear

26:15.580 --> 26:16.580
clear之后呢

26:16.580 --> 26:17.580
再来看啊

26:17.580 --> 26:18.580
刷新

26:18.580 --> 26:19.580
啥也没有

26:19.580 --> 26:20.580
完全清空了

26:20.580 --> 26:21.580
明白吧

26:21.580 --> 26:22.580
行

26:22.580 --> 26:23.580
这个呢

26:23.580 --> 26:24.580
就是我们的local storage

26:24.580 --> 26:25.580
他的一个

26:25.580 --> 26:26.580
用法

26:26.580 --> 26:27.580
是不是非常的简单啊

26:27.580 --> 26:28.580
人家提供的这个API

26:28.580 --> 26:29.580
你去用

26:29.580 --> 26:31.580
确实很简单啊

26:31.580 --> 26:32.580
然后呢

26:32.580 --> 26:33.580
还有一个

26:33.580 --> 26:34.580
是什么呢

26:34.580 --> 26:35.580
就是local storage

26:35.580 --> 26:36.580
当中呢

26:36.580 --> 26:37.580
也提供了一个事件

26:37.580 --> 26:38.580
这个事件呢

26:38.580 --> 26:39.580
是很给力的

26:39.580 --> 26:40.580
这个事件啊

26:40.580 --> 26:41.580
这个事件呢

26:41.580 --> 26:42.580
就是一个storage的事件

26:42.580 --> 26:43.580
这个事件呢

26:43.580 --> 26:44.580
他是干嘛用的呢

26:44.580 --> 26:46.580
当你的local storage

26:46.580 --> 26:48.580
发生变化的时候呢

26:48.580 --> 26:49.580
这个事件呢

26:49.580 --> 26:51.580
他就能够监听到了

26:51.580 --> 26:52.580
监听到了

26:52.580 --> 26:53.580
那监听到了

26:53.580 --> 26:54.580
他有一个好处

26:54.580 --> 26:55.580
是什么呢

26:55.580 --> 26:56.580
就是他其实是

26:56.580 --> 26:57.580
跨页面的

26:57.580 --> 26:58.580
也就是说

26:58.580 --> 27:00.580
我在这个页面当中呢

27:00.580 --> 27:01.580
我的local storage

27:01.580 --> 27:02.580
的话

27:02.580 --> 27:03.580
在另外一个页面

27:03.580 --> 27:05.580
当然他们必须在同域啊

27:05.580 --> 27:06.580
同域一下啊

27:06.580 --> 27:07.580
不能跨域啊

27:07.580 --> 27:08.580
那那个页面呢

27:08.580 --> 27:10.580
他就能够监听到这个

27:10.580 --> 27:11.580
这个什么呢

27:11.580 --> 27:12.580
事件啊

27:12.580 --> 27:13.580
或者说那个事件呢

27:13.580 --> 27:14.580
在那个页面就能够发生了

27:14.580 --> 27:15.580
这样的话

27:15.580 --> 27:16.580
你其实就能够实现

27:16.580 --> 27:17.580
两个页面

27:17.580 --> 27:18.580
进行通信了

27:18.580 --> 27:19.580
很简单的

27:19.580 --> 27:20.580
最简单的一个应用

27:20.580 --> 27:21.580
就是我们下节课

27:21.580 --> 27:22.580
要讲那个购物车

27:22.580 --> 27:23.580
我购物车呢

27:23.580 --> 27:24.580
我在这个页面当中呢

27:24.580 --> 27:25.580
添加了一双鞋子

27:25.580 --> 27:26.580
然后呢

27:26.580 --> 27:27.580
在

27:27.580 --> 27:28.580
衣服的那个页面

27:28.580 --> 27:30.580
你的购物车当中呢

27:30.580 --> 27:31.580
你的鞋子添完之后呢

27:31.580 --> 27:33.580
在衣服的那个页面的

27:33.580 --> 27:34.580
购物车当中呢

27:34.580 --> 27:36.580
他就能够展示出来

27:36.580 --> 27:38.580
就能够做到同步了

27:38.580 --> 27:39.580
是吧

27:39.580 --> 27:40.580
好

27:40.580 --> 27:41.580
那这个呢

27:41.580 --> 27:42.580
咱们下节课

27:42.580 --> 27:43.580
再去说这个事件

27:43.580 --> 27:44.580
好不好

27:44.580 --> 27:46.580
我们就直接在这个

27:46.580 --> 27:47.580
真正的案例当中呢

27:47.580 --> 27:49.580
去讲一下这个事件啊

27:49.580 --> 27:50.580
那行呢

27:50.580 --> 27:51.580
这节课呢

27:51.580 --> 27:52.580
咱们那我在问

27:52.580 --> 27:53.580
最后一个问题啊

27:53.580 --> 27:54.580
什么问题呢

27:54.580 --> 27:55.580
就是说

27:55.580 --> 27:57.580
除了我们主动去删除

27:57.580 --> 27:59.580
本地存储数据啊

27:59.580 --> 28:01.580
通过这两个方法是主动

28:01.580 --> 28:02.580
那浏览器

28:02.580 --> 28:03.580
这个控制台

28:03.580 --> 28:04.580
也提供了功能啊

28:04.580 --> 28:05.580
就是这啊

28:05.580 --> 28:06.580
这个功能呢

28:06.580 --> 28:07.580
我们也能够删

28:07.580 --> 28:08.580
是吧

28:08.580 --> 28:09.580
除了这两个功能

28:09.580 --> 28:10.580
咱们能够删掉

28:10.580 --> 28:12.580
这个本地存储的数据

28:12.580 --> 28:13.580
呃

28:13.580 --> 28:14.580
以外呢

28:14.580 --> 28:15.580
还有没有别的方式

28:15.580 --> 28:18.580
能够删除本地存储的数据了呢

28:18.580 --> 28:20.580
其实是有的

28:20.580 --> 28:21.580
这个问题呢

28:21.580 --> 28:23.580
你们可以思考一下

28:23.580 --> 28:24.580
行吧

28:24.580 --> 28:25.580
可以暂停啊

28:25.580 --> 28:26.580
暂停之后呢

28:26.580 --> 28:27.580
思考一下

28:27.580 --> 28:28.580
那我接下来就要说

28:28.580 --> 28:29.580
这个答案了

28:29.580 --> 28:31.580
还有一种方式是什么呢

28:31.580 --> 28:33.580
浏览器的一个无痕模式

28:33.580 --> 28:34.580
看到吗

28:34.580 --> 28:37.580
打开新的一个无痕窗口

28:37.580 --> 28:39.580
那在这个窗口当中呢

28:39.580 --> 28:41.580
你访问的那些东西

28:41.580 --> 28:44.580
他都不会给你存储下来

28:44.580 --> 28:45.580
也就是说

28:45.580 --> 28:46.580
其实啊

28:46.580 --> 28:48.580
当我们进入了浏览器的

28:48.580 --> 28:50.580
这也叫隐私的模式啊

28:50.580 --> 28:52.580
进入到这个模式的时候呢

28:52.580 --> 28:54.580
他其实会创建一个新的

28:54.580 --> 28:56.580
临时的这么一个数据库

28:56.580 --> 28:59.580
来存储local storage的数据

28:59.580 --> 29:02.580
那当我们去关闭掉这个什么呢

29:02.580 --> 29:04.580
关闭掉这个隐私的模式

29:04.580 --> 29:06.580
那数据库呢

29:06.580 --> 29:09.580
就会被清空并丢弃掉了

29:09.580 --> 29:10.580
好

29:10.580 --> 29:14.580
隐私的模式也能够删除local storage

29:14.580 --> 29:16.580
本地存储的数据

29:16.580 --> 29:17.580
行吧

29:17.580 --> 29:18.580
那这节课呢

29:18.580 --> 29:19.580
咱们就说到这

29:19.580 --> 29:20.580
下节课呢

29:20.580 --> 29:22.580
咱们就去写一个实际的案例啊

