WEBVTT

00:00.690 --> 00:02.690
来我们继续往下说

00:02.690 --> 00:05.690
那在上节课咱们学习了这个AJAX

00:05.690 --> 00:09.690
详细的去介绍了一下它里头的这些使用方式

00:09.690 --> 00:13.690
那这节课咱们继续还来去说这个数据请求

00:13.690 --> 00:18.690
那我们在这节课还要去说一个非常非常重要

00:18.690 --> 00:22.690
而且使用频率非常之高的一种数据请求方式

00:22.690 --> 00:24.690
那这种数据请求方式叫做什么呢

00:24.690 --> 00:25.690
来我标一下

00:27.690 --> 00:28.690
叫做什么呢

00:28.690 --> 00:29.690
叫做JSNP

00:29.690 --> 00:33.690
JSNP这个东西其实在前面的网络课里边

00:33.690 --> 00:34.690
大家听过

00:34.690 --> 00:37.690
我们有讲过就是在解决这个跨域的时候

00:37.690 --> 00:40.690
它算是其中的一种解决的方案

00:40.690 --> 00:42.690
在之前都有说过

00:42.690 --> 00:45.690
那它如何能够做到这个跨域的呢

00:45.690 --> 00:49.690
那这是咱们这节课要详细去学习的这么一个知识点

00:50.690 --> 00:53.690
JSNP它是一种就是使用频率

00:53.690 --> 00:56.690
非常非常之高的这种数据请求的方式

00:56.690 --> 00:58.690
因为它能够跨域

00:58.690 --> 01:02.690
而且呢就是它在使用起来呢是非常非常的简单的

01:03.690 --> 01:05.690
以及呢就是现在啊

01:05.690 --> 01:07.690
咱们在跟其他的一些域啊

01:07.690 --> 01:09.690
下边的一些数据呢交互

01:09.690 --> 01:11.690
像这种需求呢是变得非常非常的多

01:11.690 --> 01:13.690
而且呢非常非常的普遍

01:13.690 --> 01:15.690
所以就导致这个东西呢就是啊

01:15.690 --> 01:17.690
它非常的火爆啊

01:17.690 --> 01:18.690
比如说啊就是

01:18.690 --> 01:21.690
现在很多大的一些互联网络公司呢

01:21.690 --> 01:24.690
他们都会有一些对外的开放平台

01:24.690 --> 01:27.690
那比如说像那个百度地图呀新浪微博呀

01:27.690 --> 01:28.690
还有这个微信呀等等

01:28.690 --> 01:31.690
他们都会有对外的一些这个开放平台

01:31.690 --> 01:33.690
那这个平台当中呢

01:33.690 --> 01:35.690
他们就会提供很多很多的一些接口

01:35.690 --> 01:37.690
那这些接口要注意了

01:37.690 --> 01:40.690
就是用来实现某些需求或说某些功能了

01:41.690 --> 01:43.690
但是这些接口当中呢

01:43.690 --> 01:45.690
这些数据存在哪里了

01:45.690 --> 01:47.690
是存在人家自己的服务器当中

01:47.690 --> 01:49.690
它是供谁去使用呢

01:49.690 --> 01:51.690
供我们所有的开发者

01:51.690 --> 01:53.690
你可以用我也可以用

01:53.690 --> 01:55.690
那这样的话肯定会涉及到一个跨域了呀

01:55.690 --> 01:56.690
怎么办呢

01:56.690 --> 01:58.690
人家把这个接口呢都提供成

01:58.690 --> 02:00.690
JSMP的这种形式

02:00.690 --> 02:01.690
哎这样的话

02:01.690 --> 02:03.690
就能够解决掉这个跨域的问题了

02:03.690 --> 02:04.690
所以说呢

02:04.690 --> 02:06.690
这个东西呢就是非常的实用啊

02:06.690 --> 02:08.690
用的人非常非常的多

02:10.690 --> 02:11.690
那JSMP这个东西呢

02:11.690 --> 02:13.690
他其实是一个简称啊

02:13.690 --> 02:14.690
他的全称是什么呢

02:14.690 --> 02:15.690
是这个啊

02:15.690 --> 02:16.690
JSWIS

02:17.690 --> 02:18.690
WIS是什么呢

02:18.690 --> 02:19.690
WIS padding

02:22.060 --> 02:23.060
啊这小写吧

02:24.060 --> 02:26.060
然后把这个变成大写了啊

02:26.060 --> 02:27.060
好

02:27.060 --> 02:28.060
JSWIS padding

02:28.060 --> 02:29.060
好这个东西呢

02:29.060 --> 02:30.060
我们一看啊

02:30.060 --> 02:31.060
这里头呢

02:31.060 --> 02:32.060
有一个JSON

02:32.060 --> 02:33.060
那这个JSON呢是

02:33.060 --> 02:35.060
JS当中的这个东西

02:35.060 --> 02:36.060
是数据的一种格式

02:36.060 --> 02:37.060
是吧

02:37.060 --> 02:38.060
还有一个什么呢

02:38.060 --> 02:39.060
PIDING

02:39.060 --> 02:41.060
那这个PIDING呢是啥

02:41.060 --> 02:43.060
SS当中的一个内编句

02:43.060 --> 02:44.060
它是一条样式

02:44.060 --> 02:45.060
啊这两个东西呢

02:45.060 --> 02:46.060
其实大家非常熟悉

02:46.060 --> 02:47.060
但是呢

02:47.060 --> 02:49.060
你们肯定会有疑问是吧

02:49.060 --> 02:51.060
哎一个

02:51.060 --> 02:52.060
JS当中的一个东西呢

02:52.060 --> 02:54.060
跟我们的SS当中的一个东西呢

02:54.060 --> 02:56.060
结合在一起

02:56.060 --> 02:57.060
那这个呢

02:57.060 --> 02:59.060
他们怎么能够结合在一起呢

02:59.060 --> 03:00.060
是吧

03:00.060 --> 03:01.060
你听到后边呢

03:01.060 --> 03:03.060
你就能够明白了啊

03:04.060 --> 03:05.060
那我们接下来呢

03:05.060 --> 03:07.060
就咱们实际的给大家呢

03:07.060 --> 03:08.060
去写上例子

03:08.060 --> 03:09.060
然后呢演示一下

03:09.060 --> 03:11.060
然后呢咱们再去说这个知识点

03:11.060 --> 03:12.060
好不好

03:12.060 --> 03:13.060
那我们在上节课的时候呢

03:13.060 --> 03:15.060
使用了这个接口

03:15.060 --> 03:16.060
关于那个

03:16.060 --> 03:18.060
学生信息管理系统的那个接口

03:18.060 --> 03:19.060
在这呢咱们不能用

03:19.060 --> 03:20.060
为什么呢

03:20.060 --> 03:21.060
因为那个接口呢

03:21.060 --> 03:23.060
后端已经帮咱们去做了

03:23.060 --> 03:24.060
这个跨域的处理了

03:24.060 --> 03:26.060
你再去用那个接口的话

03:26.060 --> 03:27.060
啊其实你看不出来

03:27.060 --> 03:28.060
他的一些区别啊

03:28.060 --> 03:29.060
明白吧

03:29.060 --> 03:30.060
所以说呢我们在这节课呢

03:30.060 --> 03:32.060
就换上一个接口啊

03:32.060 --> 03:34.060
来我们就直接上手呢

03:34.060 --> 03:35.060
去写这个例子啊

03:35.060 --> 03:36.060
啊这个例子呢

03:36.060 --> 03:37.060
很简单啊

03:37.060 --> 03:38.060
也是一个按钮

03:38.060 --> 03:40.060
button给他来上一个id

03:41.060 --> 03:43.060
id呢叫jsnp

03:43.060 --> 03:44.060
然后呢

03:44.060 --> 03:45.060
jsnp好

03:46.060 --> 03:47.060
这是一个按钮

03:47.060 --> 03:49.060
按钮有了之后呢

03:49.060 --> 03:51.060
我去把我们的这个

03:51.060 --> 03:52.060
给他引入进来啊

03:52.060 --> 03:53.060
他呢

03:53.060 --> 03:56.060
呃在gs下边的这个啊

03:56.060 --> 03:57.060
好

03:57.060 --> 03:59.060
引入进来之后呢

03:59.060 --> 04:01.060
接着呢再来上一个script标签

04:03.060 --> 04:06.590
好

04:06.590 --> 04:08.590
那我们要实现的一个功能是什么呢

04:08.590 --> 04:09.590
其实就是说

04:09.590 --> 04:11.590
当我去点击这个按钮的时候呢

04:11.590 --> 04:13.590
其实我要去发送一个请求

04:13.590 --> 04:14.590
但是呢

04:14.590 --> 04:15.590
这个请求的方式呢

04:15.590 --> 04:17.590
我使用的是jsnp的这种方式

04:17.590 --> 04:19.590
那请求完之后呢

04:19.590 --> 04:20.590
他会给我反馈一个结果是吧

04:20.590 --> 04:23.590
我们就做这么一个简单的一个功能啊

04:23.590 --> 04:24.590
来看一下

04:24.590 --> 04:25.590
怎么去做啊

04:25.590 --> 04:28.590
首先我需要去拿到这个按钮啊

04:28.590 --> 04:29.590
jsnp

04:29.590 --> 04:31.590
拿到他之后呢

04:31.590 --> 04:35.900
给他的身上去添加一个点击的事件

04:35.900 --> 04:36.900
嗯

04:36.900 --> 04:39.410
这个里头呢

04:39.410 --> 04:40.410
我们怎么办啊

04:40.410 --> 04:41.410
直接去发送请求

04:41.410 --> 04:42.410
那就是啊

04:42.410 --> 04:44.410
到那点a jacks

04:44.410 --> 04:46.410
a jacks

04:46.410 --> 04:47.410
里边呢

04:47.410 --> 04:49.410
要传相应的一些参数啊

04:49.410 --> 04:50.410
unl

04:50.410 --> 04:52.410
这个unl这个地址呢

04:52.410 --> 04:53.410
是什么呢

04:53.410 --> 04:54.410
是这个http

04:54.410 --> 04:55.410
呵呵

04:55.410 --> 04:56.410
呵呵

04:56.410 --> 04:57.410
嗯

04:57.410 --> 04:58.410
然后div

04:58.410 --> 05:01.620
点点

05:01.620 --> 05:02.620
读一

05:02.620 --> 05:03.620
e d u

05:03.620 --> 05:04.620
点

05:04.620 --> 05:05.620
然后呢

05:05.620 --> 05:06.620
再写杠一个e d u

05:06.620 --> 05:07.620
然后呢

05:07.620 --> 05:08.620
再来

05:08.620 --> 05:09.620
test

05:09.620 --> 05:10.620
json

05:10.620 --> 05:11.620
好

05:11.620 --> 05:13.620
这个呢就是咱们要请求的这么一个接口啊

05:13.620 --> 05:14.620
那这个接口呢

05:14.620 --> 05:16.620
其实反回的就是一个json的这么一个数据啊

05:16.620 --> 05:17.620
一会呢

05:17.620 --> 05:18.620
大家就能看得到了啊

05:18.620 --> 05:20.620
我们直接来sys

05:20.620 --> 05:22.620
我们先干嘛

05:22.620 --> 05:24.620
我们先不用jsonp的形式

05:24.620 --> 05:25.620
我们先用啊

05:25.620 --> 05:26.620
就是常规的这个a jacks

05:26.620 --> 05:28.620
他默认是不是就是一个guide请求呀

05:28.620 --> 05:29.620
好在这呢

05:29.620 --> 05:30.620
给上一个参数啊

05:30.620 --> 05:31.620
然后convlog

05:32.620 --> 05:33.620
data

05:33.620 --> 05:34.620
打开一面

05:34.620 --> 05:35.620
控制台

05:35.620 --> 05:36.620
看一下啊

05:36.620 --> 05:37.620
来注意啊

05:37.620 --> 05:38.620
我在这要点击了啊

05:38.620 --> 05:40.620
当我去点击之后呢

05:40.620 --> 05:41.620
哎

05:41.620 --> 05:43.620
干嘛给咱们报了一个错

05:44.620 --> 05:45.620
报了一个什么错啊

05:45.620 --> 05:46.620
这个错

05:46.620 --> 05:47.620
应该都见过吧

05:47.620 --> 05:48.620
其实他呢

05:48.620 --> 05:49.620
就是说a jacks

05:49.620 --> 05:51.620
当中的这个xmlhttp

05:51.620 --> 05:52.620
request

05:52.620 --> 05:54.620
这是不是他的一个核心啊

05:54.620 --> 05:56.620
请求数据的这么一个核心啊

05:56.620 --> 05:57.620
那现在呢

05:57.620 --> 05:58.620
就是说这个错呢

05:58.620 --> 05:59.620
就是说

05:59.620 --> 06:00.620
现在你不能跨域

06:00.620 --> 06:02.620
也就是说你现在的请求的域

06:02.620 --> 06:03.620
已经跨域了

06:03.620 --> 06:04.620
那么所以说呢

06:04.620 --> 06:05.620
给咱们报了一个错

06:06.620 --> 06:07.620
那说明什么呢

06:07.620 --> 06:10.620
说明我们的这个请求地址

06:10.620 --> 06:12.620
他后端并没有帮咱们

06:12.620 --> 06:14.620
去做这个跨域的一个处理

06:14.620 --> 06:15.620
知道吧

06:15.620 --> 06:17.620
我主要先演示一下这个啊

06:17.620 --> 06:18.620
好

06:18.620 --> 06:20.620
那既然你后端不能跨域了

06:20.620 --> 06:21.620
你又说过这个JSMP

06:21.620 --> 06:22.620
他能够跨域

06:22.620 --> 06:24.620
那我们就用一下这个JSMP

06:24.620 --> 06:25.620
看一下他是否能够

06:25.620 --> 06:27.620
把数据给我抓过来啊

06:27.620 --> 06:28.620
怎么去用呢

06:28.620 --> 06:29.620
很简单

06:29.620 --> 06:30.620
就是在这个a jacks

06:30.620 --> 06:31.620
当中呢

06:31.620 --> 06:32.620
给他添上一条参数

06:32.620 --> 06:33.620
这个参数呢

06:33.620 --> 06:34.620
叫什么呢

06:34.620 --> 06:35.620
叫data type

06:35.620 --> 06:36.620
这个东西

06:36.620 --> 06:37.620
他的值呢

06:37.620 --> 06:38.620
就是一个JSMP啊

06:38.620 --> 06:39.620
嗯

06:39.620 --> 06:40.620
我们在这找一下啊

06:40.620 --> 06:42.620
找一下这个a jacks

06:42.620 --> 06:44.620
a jacks

06:44.620 --> 06:49.680
嘿

06:49.680 --> 06:50.680
哪去了啊

06:50.680 --> 06:51.680
在这呢

06:51.680 --> 06:53.680
他的里头这个参数在哪里呢

06:53.680 --> 06:54.680
在

06:55.680 --> 06:56.680
data type

06:56.680 --> 06:57.680
看到吗

06:57.680 --> 06:58.680
然后他有一个值

06:58.680 --> 06:59.680
这个值呢

06:59.680 --> 07:00.680
叫什么呢

07:00.680 --> 07:01.680
叫JSMP

07:01.680 --> 07:02.680
那意思就是说

07:02.680 --> 07:03.680
以JSMP的方式呢

07:03.680 --> 07:05.680
去再入这个JSMP数据快

07:05.680 --> 07:06.680
也就是说啊

07:06.680 --> 07:07.680
我们的请求方式呢

07:07.680 --> 07:09.680
就变成了JSMP的这种方式了

07:09.680 --> 07:10.680
好不好

07:10.680 --> 07:11.680
那行啊

07:11.680 --> 07:13.680
当我给上这条参数之后呢

07:13.680 --> 07:14.680
我们再回头再来看啊

07:14.680 --> 07:15.680
在这

07:16.680 --> 07:17.680
我刷新

07:17.680 --> 07:18.680
注意啊

07:18.680 --> 07:19.680
当我再去点击请求

07:19.680 --> 07:20.680
哎之后

07:20.680 --> 07:21.680
哦

07:21.680 --> 07:22.680
这个地址不对啊

07:22.680 --> 07:23.680
不对啊

07:24.680 --> 07:26.680
do e d u

07:26.680 --> 07:27.680
com

07:27.680 --> 07:29.680
test json啊

07:29.680 --> 07:31.680
缺了一个p啊

07:31.680 --> 07:32.680
缺了一个p啊

07:32.680 --> 07:33.680
再来看啊

07:33.680 --> 07:34.680
刷新一下

07:34.680 --> 07:35.680
当我去点击

07:35.680 --> 07:36.680
哎

07:36.680 --> 07:37.680
这时候呢

07:37.680 --> 07:38.680
你会看到

07:38.680 --> 07:39.680
其实我们的空台当中呢

07:39.680 --> 07:40.680
已经给咱们打印出数据了

07:40.680 --> 07:41.680
那就证明

07:41.680 --> 07:42.680
现在我的这个请求呢

07:42.680 --> 07:43.680
就已经成功了

07:43.680 --> 07:45.680
我们看一下这个network啊

07:45.680 --> 07:46.680
在这

07:46.680 --> 07:47.680
看一下

07:47.680 --> 07:48.680
hiders

07:48.680 --> 07:49.680
有没有发现

07:49.680 --> 07:50.680
这呢是一个200

07:50.680 --> 07:51.680
那就证明

07:51.680 --> 07:53.680
就已经发送成功了呀

07:54.680 --> 07:55.680
那好

07:55.680 --> 07:56.680
刚才啊

07:56.680 --> 07:57.680
咱们对比了一下

07:57.680 --> 07:58.680
如果说你不使用这个

07:58.680 --> 07:59.680
jsonp的话

07:59.680 --> 08:01.680
你是没办法跨域的

08:01.680 --> 08:03.680
当我去使用jsonp的话

08:03.680 --> 08:05.680
他是可以进行一个跨域的

08:05.680 --> 08:06.680
理解吗

08:06.680 --> 08:07.680
好

08:07.680 --> 08:09.680
那这块咱们看完之后呢

08:09.680 --> 08:10.680
那接下来

08:10.680 --> 08:11.680
就需要去说一下啊

08:11.680 --> 08:13.680
说一下我们的这个jsonp了

08:14.680 --> 08:15.680
首先啊

08:15.680 --> 08:16.680
咱们先来看一下

08:16.680 --> 08:18.680
这个请求的一个地址啊

08:18.680 --> 08:19.680
来啊

08:19.680 --> 08:20.680
在这个啊

08:20.680 --> 08:22.680
request

08:22.680 --> 08:23.680
当中我们来看啊

08:23.680 --> 08:25.680
我们给的这个请求地址

08:25.680 --> 08:26.680
是这看到吗

08:26.680 --> 08:27.680
他是不是到什么test

08:27.680 --> 08:28.680
jsonp

08:28.680 --> 08:29.680
是不是就完事了

08:29.680 --> 08:30.680
但是呢

08:30.680 --> 08:31.680
其实啊

08:31.680 --> 08:32.680
真正在去发

08:32.680 --> 08:33.680
这个请求的时候呢

08:33.680 --> 08:34.680
这个地址呢

08:34.680 --> 08:35.680
你看是这么长

08:35.680 --> 08:37.680
那这个地址当中呢

08:37.680 --> 08:38.680
他其实是

08:38.680 --> 08:39.680
增加了两个东西啊

08:39.680 --> 08:40.680
一个呢

08:40.680 --> 08:41.680
是callback

08:41.680 --> 08:42.680
另外一个呢

08:42.680 --> 08:43.680
是一个下滑线

08:43.680 --> 08:45.680
增加了这两个东西

08:45.680 --> 08:46.680
行

08:46.680 --> 08:47.680
先不着急啊

08:47.680 --> 08:48.680
我们一会还要再去说他

08:48.680 --> 08:49.680
那咱们再来看一下

08:49.680 --> 08:50.680
这个response

08:50.680 --> 08:52.680
就是给咱们返回的

08:52.680 --> 08:53.680
这个数据啊

08:53.680 --> 08:54.680
返回的

08:54.680 --> 08:55.680
这个数据呢

08:55.680 --> 08:56.680
是这样的东西

08:57.680 --> 08:58.680
有没有发现啊

08:58.680 --> 08:59.680
其实啊

08:59.680 --> 09:00.680
这个东西呢

09:00.680 --> 09:01.680
就是啊

09:01.680 --> 09:02.680
如果说咱之前

09:02.680 --> 09:03.680
没有了解过jsonp的话

09:03.680 --> 09:04.680
应该算是第一次见

09:04.680 --> 09:05.680
因为啊

09:05.680 --> 09:06.680
在之前咱们讲

09:06.680 --> 09:07.680
那个ax

09:07.680 --> 09:08.680
时候说过

09:08.680 --> 09:09.680
请求过来的

09:09.680 --> 09:10.680
这个数据呢

09:10.680 --> 09:11.680
其实

09:11.680 --> 09:12.680
要么你就是一个

09:12.680 --> 09:13.680
数组

09:13.680 --> 09:14.680
要么就是一个对象

09:14.680 --> 09:15.680
是不是

09:15.680 --> 09:16.680
但是呢

09:16.680 --> 09:17.680
你会看到

09:17.680 --> 09:18.680
有学习的

09:18.680 --> 09:19.680
两种形式

09:19.680 --> 09:20.680
也就是说

09:20.680 --> 09:21.680
他返回的

09:21.680 --> 09:23.680
这个并不是一个单纯的数据

09:23.680 --> 09:24.680
那这个东西呢

09:24.680 --> 09:25.680
返回的叫啥呀

09:25.680 --> 09:26.680
其实

09:26.680 --> 09:27.680
我们先

09:27.680 --> 09:29.680
不考虑数据层面

09:29.680 --> 09:30.680
咱先看一下

09:30.680 --> 09:31.680
这个东西像啥

09:31.680 --> 09:32.680
像啥呢

09:32.680 --> 09:33.680
他你看啊

09:33.680 --> 09:34.680
这个东西呢

09:34.680 --> 09:35.680
这个扩号

09:35.680 --> 09:36.680
是不是啊

09:36.680 --> 09:37.680
扩前面有这么一长串

09:37.680 --> 09:38.680
然后呢

09:38.680 --> 09:39.680
后边又有一个扩号

09:39.680 --> 09:40.680
然后呢

09:40.680 --> 09:41.680
这里头有一个

09:41.680 --> 09:42.680
中扩号

09:42.680 --> 09:43.680
这像啥

09:43.680 --> 09:44.680
像不像我们的

09:44.680 --> 09:45.680
调用函数呀

09:45.680 --> 09:46.680
前面的这个叫啥

09:46.680 --> 09:47.680
函数的名字

09:47.680 --> 09:48.680
加上一个扩号

09:48.680 --> 09:49.680
那这个里头呢

09:49.680 --> 09:50.680
这个对象叫啥

09:50.680 --> 09:52.680
叫做参数呀

09:52.680 --> 09:53.680
实际的参数

09:53.680 --> 09:54.680
懂吗

09:54.680 --> 09:55.680
所以其实他的一个

09:55.680 --> 09:56.680
返回的一个结果呢

09:56.680 --> 09:57.680
就是一个什么呢

09:57.680 --> 09:58.680
函数调用

09:58.680 --> 10:00.680
数据放在哪里呢

10:00.680 --> 10:01.680
其实数据呢

10:01.680 --> 10:02.680
是当做了参数

10:02.680 --> 10:04.680
给他传进来了

10:04.680 --> 10:07.180
理解吧

10:07.180 --> 10:08.180
还有

10:09.180 --> 10:10.180
然后呢

10:10.180 --> 10:11.180
再来啊

10:11.180 --> 10:13.180
那这个东西呢

10:14.180 --> 10:15.180
这么长

10:15.180 --> 10:16.180
他是怎么来的呢

10:17.180 --> 10:18.180
这个函数的名字

10:18.180 --> 10:19.180
我们在这看这

10:19.180 --> 10:20.180
其实啊

10:20.180 --> 10:21.180
大家注意啊

10:21.180 --> 10:22.180
这query

10:22.180 --> 10:23.180
什么34100

10:23.180 --> 10:24.180
是不是记住

10:24.180 --> 10:25.180
这前面了啊

10:25.180 --> 10:26.180
然后呢

10:26.180 --> 10:27.180
在这个地址

10:27.180 --> 10:28.180
蓝当

10:28.180 --> 10:29.180
在这个地址当中呢

10:29.180 --> 10:30.180
有一个callback

10:30.180 --> 10:32.180
他的值是什么呢

10:32.180 --> 10:34.180
这query34100

10:34.180 --> 10:35.180
是不是那一长串啊

10:36.180 --> 10:37.180
所以说啊

10:37.180 --> 10:39.180
这个函数的名字呢

10:39.180 --> 10:40.180
来源于谁啊

10:40.180 --> 10:42.180
来源于在我们的

10:42.180 --> 10:43.180
地址当中呢

10:43.180 --> 10:44.180
这个callback

10:44.180 --> 10:45.180
对应的那个

10:45.180 --> 10:46.180
值

10:47.180 --> 10:48.180
好

10:48.180 --> 10:49.180
这个呢

10:49.180 --> 10:50.180
其实就是

10:50.180 --> 10:51.180
他的一个特征

10:51.180 --> 10:52.180
那么

10:52.180 --> 10:53.180
然后呢

10:53.180 --> 10:54.180
咱们再来说一下

10:54.180 --> 10:55.180
这两个参数啊

10:55.180 --> 10:57.180
那这个callback呢

10:57.180 --> 10:58.180
他啥意思啊

10:58.180 --> 10:59.180
这个东西呢

10:59.180 --> 11:00.180
叫做回调函数

11:00.180 --> 11:01.180
回调函数

11:01.180 --> 11:02.180
是不是很熟悉啊

11:02.180 --> 11:03.180
其实就是一个

11:03.180 --> 11:04.180
异部的这么一个

11:04.180 --> 11:05.180
使用方式

11:05.180 --> 11:06.180
回调函数

11:06.180 --> 11:07.180
也就是说

11:07.180 --> 11:08.180
当我的数据

11:08.180 --> 11:09.180
请求成功之后呢

11:09.180 --> 11:10.180
那这个就会去调用一下

11:10.180 --> 11:11.180
我们的callback

11:11.180 --> 11:12.180
这个值

11:12.180 --> 11:14.180
他是一个函数

11:14.180 --> 11:15.180
在这呢

11:15.180 --> 11:16.180
咱直接去拿他

11:16.180 --> 11:17.180
当作函数名

11:17.180 --> 11:18.180
去调用函数了

11:18.180 --> 11:19.180
好

11:19.180 --> 11:20.180
然后呢

11:20.180 --> 11:21.180
这个东西是啥啊

11:21.180 --> 11:22.180
他的这个值

11:22.180 --> 11:24.180
其实是一个随机生成的啊

11:24.180 --> 11:25.180
一会呢

11:25.180 --> 11:26.180
咱们要去写啊

11:26.180 --> 11:27.180
然后呢

11:27.180 --> 11:28.180
这个东西是啥

11:28.180 --> 11:29.180
这个东西呢

11:29.180 --> 11:30.180
其实是一个时间戳啊

11:30.180 --> 11:32.180
那加上这个时间戳

11:32.180 --> 11:33.180
他的意义在于什么呢

11:33.180 --> 11:35.180
就在于阻止

11:35.180 --> 11:36.180
我们的浏览器

11:36.180 --> 11:37.180
进行缓存数据

11:38.180 --> 11:40.180
为什么要阻止这个缓存数据呢

11:40.180 --> 11:41.180
其实有同学会想

11:41.180 --> 11:42.180
缓存一下数据

11:42.180 --> 11:43.180
不是更好吗

11:43.180 --> 11:44.180
其实啊

11:44.180 --> 11:45.180
他为了什么呢

11:45.180 --> 11:46.180
就是啊

11:46.180 --> 11:47.180
我们的数据

11:47.180 --> 11:48.180
如果说

11:48.180 --> 11:49.180
但凡你要更新

11:49.180 --> 11:50.180
那这个地方

11:50.180 --> 11:53.180
假设说浏览器给我缓存下来了

11:53.180 --> 11:55.180
即使你更新完了之后呢

11:55.180 --> 11:58.180
他取到的仍然是缓存的那个就数据

11:58.180 --> 12:00.180
不是那个新数据

12:00.180 --> 12:01.180
理解吧

12:01.180 --> 12:02.180
所以啊

12:02.180 --> 12:03.180
就是避免导致这么一个问题啊

12:03.180 --> 12:04.180
你的数据

12:04.180 --> 12:05.180
更新完了

12:05.180 --> 12:06.180
后台更新完了

12:06.180 --> 12:07.180
在前端啊

12:07.180 --> 12:08.180
依然是没法显示的

12:08.180 --> 12:10.180
显示的仍然是就数据

12:10.180 --> 12:12.180
这个就是因为浏览器

12:12.180 --> 12:14.180
这个数据给他缓存了

12:14.180 --> 12:15.180
然后呢

12:15.180 --> 12:16.180
加上这个值之后呢

12:16.180 --> 12:17.180
他是一个时间戳

12:17.180 --> 12:18.180
呃

12:18.180 --> 12:20.180
为什么加上这个值之后呢

12:20.180 --> 12:21.180
就能够啊

12:21.180 --> 12:22.180
阻止缓存数据了

12:22.180 --> 12:24.180
是因为时间戳呢

12:24.180 --> 12:25.180
其实每次都会变

12:25.180 --> 12:27.180
用户再去请求的时候呢

12:27.180 --> 12:28.180
请求一次他就会变

12:28.180 --> 12:29.180
变完之后呢

12:29.180 --> 12:30.180
就相当于说

12:30.180 --> 12:31.180
我们的这个地址呢

12:31.180 --> 12:32.180
更新了

12:32.180 --> 12:33.180
更新之后呢

12:33.180 --> 12:35.180
浏览器其实是没有办法去

12:35.180 --> 12:36.180
如果说你不更新

12:36.180 --> 12:37.180
他能够存储

12:37.180 --> 12:39.180
你要更新的话啊

12:39.180 --> 12:41.180
其实你第二次用用的时候呢

12:41.180 --> 12:43.180
所以他永远用的都是新数据

12:43.180 --> 12:44.180
理解吧

12:44.180 --> 12:45.180
这个呢

12:45.180 --> 12:46.180
就是两个参数

12:46.180 --> 12:47.180
他的一个作用啊

12:47.180 --> 12:49.180
嗯

12:49.180 --> 12:50.180
好

12:50.180 --> 12:51.180
嗯

12:51.180 --> 12:52.180
那这个呢

12:52.180 --> 12:53.180
其实就是杰森p

12:53.180 --> 12:55.180
他的一个表现的形式啊

12:55.180 --> 12:57.180
那我们继续在回到代码当中

12:57.180 --> 12:58.180
在这呢

12:58.180 --> 12:59.180
咱再去修改一下

12:59.180 --> 13:00.180
怎么去修改呢

13:00.180 --> 13:01.180
呃

13:01.180 --> 13:02.180
我们的请求

13:02.180 --> 13:03.180
在之前

13:03.180 --> 13:04.180
在上节课咱们说过啊

13:04.180 --> 13:05.180
有概态

13:05.180 --> 13:06.180
还有什么呢

13:06.180 --> 13:07.180
posed这个方法

13:07.180 --> 13:08.180
默认情况下

13:08.180 --> 13:09.180
他就是一个概态

13:09.180 --> 13:10.180
那我在这呢

13:10.180 --> 13:12.180
我们改一下method

13:12.180 --> 13:14.180
改成一个posed

13:14.180 --> 13:16.180
就表示现在

13:16.180 --> 13:17.180
我的这个ax的请求呢

13:17.180 --> 13:19.180
是一个posed这种形式

13:19.180 --> 13:20.180
是吧

13:20.180 --> 13:21.180
我们来看一下结果啊

13:21.180 --> 13:22.180
来在这呢

13:22.180 --> 13:23.180
我刷新一下啊

13:23.180 --> 13:24.180
刷新之后呢

13:24.180 --> 13:25.180
把这儿清空

13:25.180 --> 13:26.180
当去点击

13:26.180 --> 13:27.180
点击之后呢

13:27.180 --> 13:28.180
我们点开这个东西

13:28.180 --> 13:29.180
再来看一下

13:29.180 --> 13:31.180
你会发现啊

13:31.180 --> 13:32.180
其实他的这个

13:32.180 --> 13:33.180
请求的方式

13:33.180 --> 13:35.180
仍然是一个guide

13:35.180 --> 13:38.180
即使你在这个地方

13:38.180 --> 13:39.180
给了一个method

13:39.180 --> 13:40.180
这儿的他的值

13:40.180 --> 13:41.180
是一个posed

13:41.180 --> 13:42.180
那不好意思

13:42.180 --> 13:43.180
我们的空台当中呢

13:43.180 --> 13:44.180
能够看到

13:44.180 --> 13:45.180
这个请求的方式

13:45.180 --> 13:47.180
依然是一个guide

13:47.180 --> 13:48.180
的这种方式

13:48.180 --> 13:49.180
那这是为啥呢

13:49.180 --> 13:50.180
啊

13:50.180 --> 13:51.180
其实是

13:51.180 --> 13:52.180
因为啊

13:52.180 --> 13:53.180
Jquery

13:53.180 --> 13:55.180
他做了什么

13:55.180 --> 13:56.180
是否同源的一个判断

13:56.180 --> 13:58.180
当你的请求的地址

13:58.180 --> 13:59.180
跟我的

13:59.180 --> 14:00.180
跟你的这个

14:00.180 --> 14:01.180
当你的这个地址

14:01.180 --> 14:02.180
跟你请求的那个地址

14:02.180 --> 14:04.180
是属于同源

14:04.180 --> 14:06.180
那你设置的

14:06.180 --> 14:08.180
这儿是什么请求方式

14:08.180 --> 14:09.180
就会按什么请求方式

14:09.180 --> 14:11.180
给你去发送

14:11.180 --> 14:12.180
那如果说

14:12.180 --> 14:13.180
你的请求地址呢

14:13.180 --> 14:15.180
跟我当前的这个地址呢

14:15.180 --> 14:17.180
他不是一个同源

14:17.180 --> 14:19.180
那是不是就跨域了呀

14:19.180 --> 14:20.180
跨域的话

14:20.180 --> 14:21.180
一律

14:21.180 --> 14:22.180
把这个请求的方式

14:22.180 --> 14:25.180
给他设置成guide的方式

14:25.180 --> 14:27.180
为什么会设置成guide的方式呢

14:27.180 --> 14:28.180
这个原因咱们

14:28.180 --> 14:29.180
后边再去说

14:29.180 --> 14:31.180
行不行啊

14:31.180 --> 14:32.180
那这样的话

14:32.180 --> 14:33.180
我们就把这个

14:33.180 --> 14:34.180
这query当中呢

14:34.180 --> 14:35.180
这个jsonp

14:35.180 --> 14:36.180
他的一个使用

14:36.180 --> 14:37.180
以及表现形式呢

14:37.180 --> 14:38.180
跟大家呢

14:38.180 --> 14:39.180
详细的去

14:39.180 --> 14:40.180
讲了一下

14:40.180 --> 14:41.180
讲了一下之后呢

14:41.180 --> 14:43.180
接下来咱们要说的是什么呢

14:43.180 --> 14:45.180
jsonp他的一个原理

14:45.180 --> 14:47.180
我们要知其然

14:47.180 --> 14:48.180
并知其所以然

14:48.180 --> 14:49.180
对吧

14:49.180 --> 14:51.180
所以接下来咱们花一些时间

14:51.180 --> 14:52.180
详细的去

14:52.180 --> 14:53.180
介绍一下jsonp

14:53.180 --> 14:55.180
他背后的一个原理啊

14:55.180 --> 14:56.180
那我们首先

14:56.180 --> 14:57.180
第一个呢

14:57.180 --> 14:58.180
先来回顾一下咱们

14:58.180 --> 14:59.180
前面网络课当中呢

14:59.180 --> 15:00.180
这个内容啊

15:00.180 --> 15:01.180
就是啊

15:01.180 --> 15:02.180
我们想一下

15:02.180 --> 15:03.180
前面网络课当中呢

15:03.180 --> 15:04.180
咱们讲过这个

15:04.180 --> 15:06.180
发送网络请求的方式

15:06.180 --> 15:07.180
有很多种啊

15:07.180 --> 15:09.180
至少有五六种吗

15:09.180 --> 15:10.180
这时候啊

15:10.180 --> 15:12.180
你可以把把这个视频暂停一下

15:12.180 --> 15:14.180
你先回忆一下

15:14.180 --> 15:16.180
好那其中有一种是什么呢

15:16.180 --> 15:20.180
就是带src属性的这个标签啊

15:20.180 --> 15:22.180
src属性的这个标签

15:22.180 --> 15:24.180
那这个标签呢

15:24.180 --> 15:25.180
他是可以去发送

15:25.180 --> 15:27.180
一个网络请求的

15:27.180 --> 15:28.180
那这种标签呢

15:28.180 --> 15:29.180
啊不

15:29.180 --> 15:30.180
这是属性是吧

15:30.180 --> 15:31.180
那都有哪些标签

15:31.180 --> 15:32.180
身上带他呢

15:32.180 --> 15:33.180
其实有很多

15:33.180 --> 15:34.180
比如说咱们最常见

15:34.180 --> 15:35.180
最熟悉的

15:35.180 --> 15:36.180
莫过于什么呢

15:36.180 --> 15:37.180
莫过于这个图片了吧

15:37.180 --> 15:38.180
是不是

15:38.180 --> 15:39.180
这个东西啊

15:39.180 --> 15:41.180
他的身上是不是有一个

15:41.180 --> 15:43.180
src的这个属性啊

15:43.180 --> 15:44.180
好

15:44.180 --> 15:46.180
还有像Vidio啊

15:46.180 --> 15:47.180
Audio啊

15:47.180 --> 15:49.180
还有以及我们的这个script标签啊

15:49.180 --> 15:50.180
他们身上是不是都会有一个

15:50.180 --> 15:52.180
src的这个属性啊

15:52.180 --> 15:55.180
那具有这个属性的标签呢

15:55.180 --> 15:56.180
他就可以从外部

15:56.180 --> 15:58.180
去引入一些资源文件

15:59.180 --> 16:00.180
这样的话

16:00.180 --> 16:01.180
其实就能够

16:01.180 --> 16:02.180
就相当于说

16:02.180 --> 16:04.180
我们可以去跨域了

16:04.180 --> 16:05.180
在别的域下边呢

16:05.180 --> 16:07.180
我们能够通过具有

16:07.180 --> 16:08.180
src属性的标签

16:08.180 --> 16:10.180
把这些资源呢

16:10.180 --> 16:12.180
给他引入进来

16:12.180 --> 16:13.180
好

16:13.180 --> 16:14.180
记住这个啊

16:14.180 --> 16:15.180
那然后呢

16:15.180 --> 16:16.180
其实我们的jsonp呢

16:16.180 --> 16:17.180
他跨域

16:17.180 --> 16:18.180
之所以能够跨域

16:18.180 --> 16:19.180
其实利用呢

16:19.180 --> 16:20.180
就是这个特征

16:20.180 --> 16:21.180
利用呢

16:21.180 --> 16:22.180
就是这个src

16:22.180 --> 16:23.180
好

16:23.180 --> 16:24.180
那src

16:24.180 --> 16:26.180
你说有那么多的标签呢

16:26.180 --> 16:27.180
jsonp他选择

16:27.180 --> 16:29.180
哪个标签合适呢

16:29.180 --> 16:30.180
通过排除法

16:30.180 --> 16:32.180
你是不是也能够知道呀

16:32.180 --> 16:35.180
肯定是script的标签了吧

16:35.180 --> 16:36.180
好

16:36.180 --> 16:37.180
这是一点

16:37.180 --> 16:38.180
其次呢

16:38.180 --> 16:39.180
我们在前面还讲过

16:39.180 --> 16:42.180
这个具有src属性的这个标签呢

16:42.180 --> 16:44.180
他其实是都可以进行

16:44.180 --> 16:45.180
这个跨域请求的

16:45.180 --> 16:46.180
是吧

16:46.180 --> 16:47.180
这个理解吧

16:47.180 --> 16:48.180
就是比如说

16:48.180 --> 16:49.180
那image这个标签呢

16:49.180 --> 16:51.180
你当然可以去引入

16:51.180 --> 16:53.180
其他域下边的图片

16:53.180 --> 16:54.180
引入进来之后呢

16:54.180 --> 16:56.180
在你当前的页面当中的

16:56.180 --> 16:58.180
绝对是完全没有问题的

16:58.180 --> 16:59.180
好不好

16:59.180 --> 17:01.180
那这个s

17:01.180 --> 17:02.180
script的这个标签呢

17:02.180 --> 17:04.180
他是不是同样可以去引入

17:04.180 --> 17:06.180
这个任意域下边的

17:06.180 --> 17:08.180
这个gs文件呀

17:08.180 --> 17:09.180
这个呢就好比呀

17:09.180 --> 17:11.180
就像我们在去使用

17:11.180 --> 17:12.180
第三方的一些库

17:12.180 --> 17:13.180
比如说我们的这个

17:13.180 --> 17:14.180
jquery

17:14.180 --> 17:15.180
你如果说你不想去download

17:15.180 --> 17:16.180
是吧

17:16.180 --> 17:18.180
那你就可以去使用cdn

17:18.180 --> 17:19.180
cdn这种形式

17:19.180 --> 17:21.180
很多很多的第三方的库呢

17:21.180 --> 17:23.180
都会去提供这个cdn的

17:23.180 --> 17:24.180
这种引入形式

17:24.180 --> 17:25.180
那这个很明显啊

17:25.180 --> 17:26.180
cdn的这个域

17:26.180 --> 17:27.180
绝对是跟你的域

17:27.180 --> 17:28.180
不在同一个域下边

17:28.180 --> 17:29.180
绝对是跨域的

17:29.180 --> 17:30.180
但是呢

17:30.180 --> 17:31.180
你把它引入进来

17:31.180 --> 17:32.180
能不能用啊

17:32.180 --> 17:33.180
必然是可以去用的

17:33.180 --> 17:34.180
理解吧

17:34.180 --> 17:35.180
这个呢

17:35.180 --> 17:36.180
其实就是跨域啊

17:36.180 --> 17:38.180
src属性就能够跨域了

17:39.180 --> 17:40.180
所以呀

17:40.180 --> 17:41.180
纵上所述啊

17:41.180 --> 17:43.180
script标签

17:43.180 --> 17:44.180
既可以发送

17:44.180 --> 17:45.180
网络请求

17:45.180 --> 17:46.180
又可以跨域

17:46.180 --> 17:47.180
所以说呢

17:47.180 --> 17:49.180
这个script标签呢

17:49.180 --> 17:50.180
监护起了

17:50.180 --> 17:52.180
jsonp请求数据的

17:52.180 --> 17:53.180
重任啊

17:53.180 --> 17:55.180
其实也就是我们的这个

17:55.180 --> 17:57.180
jsonp的背后原理呢

17:57.180 --> 17:59.180
就是这种形式

17:59.180 --> 18:00.180
通过script标签

18:00.180 --> 18:01.180
去加载

18:01.180 --> 18:03.180
第三方的这个数据啊

18:03.180 --> 18:05.180
但是还有另外一个点

18:05.180 --> 18:06.180
非常重要

18:06.180 --> 18:07.180
不能忽略

18:07.180 --> 18:08.180
什么点呢

18:08.180 --> 18:09.180
就是

18:09.180 --> 18:10.180
如果说

18:10.180 --> 18:12.180
我们通过script标签

18:12.180 --> 18:15.180
src去引入了一个文件

18:15.180 --> 18:16.180
比如说啊

18:16.180 --> 18:17.180
引入了一个js的这个文件

18:17.180 --> 18:18.180
是不是

18:18.180 --> 18:20.180
那当引入进来之后呢

18:20.180 --> 18:21.180
我们的浏览器

18:21.180 --> 18:23.180
就能够把它当做什么呢

18:23.180 --> 18:24.180
js

18:24.180 --> 18:26.180
真正的js的代码

18:26.180 --> 18:27.180
去执行

18:27.180 --> 18:28.180
那这点

18:28.180 --> 18:29.180
好像对于咱们来说呢

18:29.180 --> 18:31.180
有点有点废话

18:31.180 --> 18:32.180
是吗

18:32.180 --> 18:33.180
其实我给你讲

18:33.180 --> 18:34.180
这个点呢

18:34.180 --> 18:35.180
它非常的重要

18:35.180 --> 18:36.180
你绝对是不能忽略的啊

18:36.180 --> 18:38.180
比如说咱们来试一下

18:38.180 --> 18:39.180
好不好

18:39.180 --> 18:40.180
这个东西呢

18:40.180 --> 18:41.180
是啥

18:41.180 --> 18:42.180
是我们要请求的这么一个

18:42.180 --> 18:43.180
数据的地址

18:43.180 --> 18:44.180
然后呢

18:44.180 --> 18:45.180
这个地址呢

18:45.180 --> 18:46.180
我在这呢

18:46.180 --> 18:47.180
直接输

18:47.180 --> 18:48.180
输完之后呢

18:48.180 --> 18:49.180
这个里面呢

18:49.180 --> 18:50.180
显示的不对

18:50.180 --> 18:52.180
我们需要去加上一个参数啊

18:52.180 --> 18:53.180
必须要加这个参啊

18:53.180 --> 18:55.180
加完这个参数之后呢

18:55.180 --> 18:56.180
我们会看到

18:56.180 --> 18:57.180
这个东西呢

18:57.180 --> 18:59.180
是不是就是跟刚才咱们所看到的

18:59.180 --> 19:01.180
那个东西是一模一样的呀

19:01.180 --> 19:02.180
然后呢

19:02.180 --> 19:03.180
注意啊

19:03.180 --> 19:04.180
打开控制台

19:04.180 --> 19:05.180
在这呢

19:05.180 --> 19:06.180
我们刷新一下

19:06.180 --> 19:07.180
来看啊

19:07.180 --> 19:09.180
这是我们通过地址篮发送的

19:09.180 --> 19:11.180
这么一个请求

19:11.180 --> 19:12.180
然后呢

19:12.180 --> 19:13.180
这个请求当中

19:13.180 --> 19:15.180
我们看一下这个response

19:15.180 --> 19:16.180
看到吗

19:16.180 --> 19:17.180
这个东西呢

19:17.180 --> 19:18.180
是不是刚才一直在看的

19:18.180 --> 19:19.180
以及在这呢

19:19.180 --> 19:20.180
绝对是一模一样的

19:20.180 --> 19:21.180
能理解吧

19:21.180 --> 19:22.180
好

19:22.180 --> 19:23.180
那

19:23.180 --> 19:24.180
其实啊

19:24.180 --> 19:25.180
你看

19:25.180 --> 19:26.180
这种形式

19:26.180 --> 19:28.180
就是刚才咱们所说的

19:28.180 --> 19:29.180
函数调用

19:29.180 --> 19:30.180
能理解吧

19:30.180 --> 19:31.180
好

19:31.180 --> 19:32.180
那如果说

19:32.180 --> 19:34.180
按照刚才我所讲的

19:34.180 --> 19:35.180
啊

19:35.180 --> 19:36.180
它那是

19:36.180 --> 19:38.180
浏览器就能够把它当做什么的

19:38.180 --> 19:40.180
真正的gs代码给执行了

19:40.180 --> 19:42.180
那我们就验证一下呗

19:42.180 --> 19:43.180
看看是不是

19:43.180 --> 19:44.180
好

19:44.180 --> 19:45.180
来怎么去验证呢

19:45.180 --> 19:47.180
我们在这个script标签的

19:47.180 --> 19:49.180
下边再来上一个

19:49.180 --> 19:51.180
然后在这给上一个src

19:51.180 --> 19:52.180
然后地址呢

19:52.180 --> 19:53.180
就给这个东西啊

19:53.180 --> 19:54.180
当然你要加上

19:54.180 --> 19:55.180
啊

19:55.180 --> 19:56.180
我们应该给这个地址啊

19:56.180 --> 19:59.880
如果不加那个东西的话

19:59.880 --> 20:00.880
咱取不到那个数据啊

20:00.880 --> 20:01.880
行吧

20:01.880 --> 20:02.880
这样的话

20:02.880 --> 20:03.880
你看啊

20:03.880 --> 20:05.880
我是不是通过了一个script标签

20:05.880 --> 20:06.880
去引入了

20:06.880 --> 20:07.880
我们请求的这个

20:07.880 --> 20:08.880
结口呀

20:08.880 --> 20:09.880
好

20:09.880 --> 20:10.880
给完之后呢

20:10.880 --> 20:11.880
在这刷新

20:11.880 --> 20:12.880
刷新啊

20:12.880 --> 20:13.880
刷新完了之后呢

20:13.880 --> 20:14.880
我们在这

20:14.880 --> 20:15.880
点击

20:15.880 --> 20:19.980
扛手

20:19.980 --> 20:20.980
嘿

20:20.980 --> 20:22.980
怎么没有

20:23.980 --> 20:24.980
没有抱错呢

20:24.980 --> 20:25.980
我看一下

20:25.980 --> 20:30.020
啊

20:30.020 --> 20:31.020
不不不

20:31.020 --> 20:32.020
看错了啊

20:32.020 --> 20:33.020
这是那个地址

20:33.020 --> 20:34.020
那个页面啊

20:34.020 --> 20:35.020
我把它关掉啊

20:35.020 --> 20:36.020
是这个这个啊

20:36.020 --> 20:37.020
来在这啊

20:37.020 --> 20:38.020
刷新一下

20:38.020 --> 20:39.020
好

20:39.020 --> 20:40.020
这时候呢

20:40.020 --> 20:41.020
你会看到这是不是已经抱错了

20:41.020 --> 20:42.020
看到吗

20:42.020 --> 20:43.020
一个error

20:43.020 --> 20:44.020
我们点开

20:44.020 --> 20:45.020
点开

20:45.020 --> 20:46.020
这说什么

20:46.020 --> 20:47.020
is not defined

20:47.020 --> 20:48.020
那就是说

20:48.020 --> 20:49.020
他呢

20:49.020 --> 20:50.020
是一个未定义

20:50.020 --> 20:51.020
所以就抱错了

20:51.020 --> 20:52.020
我们先不管

20:52.020 --> 20:53.020
这个错

20:53.020 --> 20:54.020
到底是啥意思

20:54.020 --> 20:55.020
是吧

20:55.020 --> 20:57.020
当咱们看到这个错的时候呢

20:57.020 --> 20:58.020
他能够说明什么呀

20:58.020 --> 20:59.020
是不是说明

20:59.020 --> 21:00.020
我们的gs

21:00.020 --> 21:01.020
肯定执行了呀

21:01.020 --> 21:04.020
肯定是有gs执行了

21:04.020 --> 21:06.020
只有gs执行之后呢

21:06.020 --> 21:07.020
有错

21:07.020 --> 21:08.020
他才会抱

21:08.020 --> 21:09.020
是不是啊

21:09.020 --> 21:10.020
好

21:10.020 --> 21:11.020
那

21:11.020 --> 21:12.020
我们再来看那个错

21:12.020 --> 21:13.020
说这个fn

21:13.020 --> 21:14.020
not defined的

21:14.020 --> 21:15.020
那的确

21:15.020 --> 21:16.020
这个东西呢

21:16.020 --> 21:17.020
我们没有定义

21:17.020 --> 21:18.020
压根就没有定义

21:18.020 --> 21:19.020
你在这个页面当中呢

21:19.020 --> 21:20.020
能够找到他吗

21:20.020 --> 21:21.020
没有

21:21.020 --> 21:22.020
所以

21:22.020 --> 21:23.020
这个错抱的

21:23.020 --> 21:25.020
绝对是一点毛病都没有

21:25.020 --> 21:26.020
理解吧

21:26.020 --> 21:27.020
但是呢

21:27.020 --> 21:28.020
你通过他引入的

21:28.020 --> 21:30.020
他能够把把什么的

21:30.020 --> 21:31.020
把你的返回值

21:31.020 --> 21:33.020
当做真正的gs的代码

21:33.020 --> 21:35.020
给他执行了

21:35.020 --> 21:36.020
这是一个很很重要的

21:36.020 --> 21:37.020
这么一个点

21:37.020 --> 21:38.020
好不好

21:38.020 --> 21:39.020
那行吧

21:39.020 --> 21:40.020
那既然他抱错了

21:40.020 --> 21:42.020
那我现在就要去解决

21:42.020 --> 21:43.020
这个错误

21:43.020 --> 21:44.020
怎么去解决呢

21:44.020 --> 21:45.020
我就去定义一下这个fn

21:45.020 --> 21:46.020
来

21:46.020 --> 21:47.020
比如说我们在这呢

21:47.020 --> 21:48.020
生命一个变量

21:48.020 --> 21:49.020
叫fn

21:49.020 --> 21:50.020
这个fn当中呢

21:50.020 --> 21:51.020
我们就concelogue

21:51.020 --> 21:52.020
log什么呢

21:52.020 --> 21:53.020
log一个开翻

21:53.020 --> 21:54.020
来看一下

21:54.020 --> 21:55.020
控制台啊

21:55.020 --> 21:56.020
注意啊

21:57.020 --> 21:58.020
看到没有

21:58.020 --> 21:59.020
我concel的那个内容

21:59.020 --> 22:01.020
现在是不是已经答应出来了

22:01.020 --> 22:02.020
那就证明现在呢

22:02.020 --> 22:04.020
我的这个fn这个方法呢

22:04.020 --> 22:06.020
他已经被调用了

22:06.020 --> 22:07.020
哎

22:07.020 --> 22:09.020
我有没有主动去调他呀

22:09.020 --> 22:10.020
没有吧

22:10.020 --> 22:12.020
那是不是更加证明

22:12.020 --> 22:14.020
刚才咱们所说的

22:14.020 --> 22:15.020
绝对是没有问题的

22:15.020 --> 22:16.020
谁调用了

22:16.020 --> 22:17.020
就是他调用了

22:17.020 --> 22:18.020
他怎么调用呢

22:18.020 --> 22:20.020
因为这个数据

22:20.020 --> 22:21.020
返回了一个结果

22:21.020 --> 22:22.020
这个结果呢

22:22.020 --> 22:23.020
是啥

22:23.020 --> 22:24.020
是这个啊

22:24.020 --> 22:25.020
我们在

22:25.020 --> 22:26.020
在这

22:26.020 --> 22:27.020
在这看一下

22:27.020 --> 22:28.020
这个结果呢

22:28.020 --> 22:29.020
是这个东西

22:29.020 --> 22:30.020
那这个东西的话

22:30.020 --> 22:31.020
好

22:31.020 --> 22:32.020
那浏览器

22:32.020 --> 22:33.020
现在

22:33.020 --> 22:34.020
他是通过script标签

22:34.020 --> 22:35.020
给他加载进来的

22:35.020 --> 22:36.020
那浏览器

22:36.020 --> 22:38.020
就能够把他返回的

22:38.020 --> 22:39.020
这个结果

22:39.020 --> 22:40.020
当作真正的GS代码

22:40.020 --> 22:41.020
给他执行了

22:41.020 --> 22:42.020
所以说呢

22:42.020 --> 22:44.020
他就相当于去调用了

22:44.020 --> 22:45.020
fn这个方法

22:45.020 --> 22:46.020
懂吗

22:46.020 --> 22:47.020
好

22:47.020 --> 22:48.020
那既然你调用了

22:48.020 --> 22:49.020
是不是

22:49.020 --> 22:50.020
你看啊

22:50.020 --> 22:51.020
这个东西呢

22:51.020 --> 22:52.020
是啥

22:52.020 --> 22:53.020
是不是

22:53.020 --> 22:54.020
是食餐的话

22:54.020 --> 22:55.020
我在这呢

22:55.020 --> 22:56.020
是不是就能够

22:56.020 --> 22:57.020
给上一个行餐

22:57.020 --> 22:58.020
去接收了呀

22:58.020 --> 22:59.020
来

22:59.020 --> 23:00.020
接收之后呢

23:00.020 --> 23:01.020
我把他打印出来

23:01.020 --> 23:02.020
看一下

23:02.020 --> 23:03.020
刷新

23:03.020 --> 23:04.020
这时候呢

23:04.020 --> 23:05.020
我们看

23:05.020 --> 23:06.020
有没有

23:06.020 --> 23:07.020
这个东西呢

23:07.020 --> 23:08.020
是不是跟刚才

23:08.020 --> 23:09.020
咱们所看到的

23:09.020 --> 23:10.020
那个返回结果

23:10.020 --> 23:11.020
是一模一样的呀

23:11.020 --> 23:12.020
所以啊

23:12.020 --> 23:13.020
你看

23:13.020 --> 23:14.020
JSNP

23:14.020 --> 23:15.020
他就是这么玩的

23:15.020 --> 23:16.020
理解了吧

23:16.020 --> 23:17.020
好

23:17.020 --> 23:18.020
这个呢

23:18.020 --> 23:19.020
其实就是

23:19.020 --> 23:20.020
JSNP

23:20.020 --> 23:21.020
他的一个原理

23:21.020 --> 23:22.020
好

23:22.020 --> 23:23.020
那到这呢

23:23.020 --> 23:24.020
大家已经理解了

23:24.020 --> 23:25.020
这个JSNP的

23:25.020 --> 23:26.020
一个原理了

23:26.020 --> 23:27.020
然后呢

23:27.020 --> 23:28.020
接下来呢

23:28.020 --> 23:29.020
咱们要去介绍一下

23:29.020 --> 23:30.020
在这query当中呢

23:30.020 --> 23:31.020
这个对于JSNP的

23:31.020 --> 23:32.020
这个原理

23:32.020 --> 23:33.020
他是如何去实现的

23:33.020 --> 23:34.020
或者说啊

23:34.020 --> 23:35.020
我们在这query当中呢

23:35.020 --> 23:36.020
这个JSNP

23:36.020 --> 23:37.020
他的一个实现的

23:37.020 --> 23:38.020
一个步骤

23:38.020 --> 23:39.020
也就是当我们给上一个餐

23:39.020 --> 23:40.020
他是怎么能够

23:40.020 --> 23:41.020
把这个

23:41.020 --> 23:42.020
请求给他

23:42.020 --> 23:43.020
啊换成这个

23:43.020 --> 23:44.020
JSNP的一个请求的

23:44.020 --> 23:45.020
咱们要

23:45.020 --> 23:46.020
详细的去说一下

23:46.020 --> 23:47.020
好不好

23:47.020 --> 23:48.020
那第一步

23:48.020 --> 23:50.020
我们通过了一个

23:50.020 --> 23:52.020
X去发送了一个请求

23:52.020 --> 23:53.020
是吧

23:53.020 --> 23:54.020
这个时候呢

23:54.020 --> 23:56.020
他要先去判断一下

23:56.020 --> 23:57.020
当然前期条件

23:57.020 --> 23:58.020
你这个东西呢

23:58.020 --> 23:59.020
要给上啊

23:59.020 --> 24:00.020
JSNP啊

24:00.020 --> 24:01.020
他先要去判断

24:01.020 --> 24:02.020
判断什么呢

24:02.020 --> 24:03.020
是否同源

24:03.020 --> 24:04.020
就是刚才怎么所说的

24:04.020 --> 24:05.020
假设说

24:05.020 --> 24:07.020
现在我们的这个文件

24:07.020 --> 24:09.020
跟我们请求的这个地址呢

24:09.020 --> 24:10.020
他是同源

24:10.020 --> 24:12.020
那同源的话

24:12.020 --> 24:13.020
你觉得还有必要去

24:13.020 --> 24:14.020
把他

24:14.020 --> 24:15.020
把这个请求给他

24:15.020 --> 24:16.020
变成JSNP吗

24:16.020 --> 24:17.020
有没有必要

24:17.020 --> 24:19.020
完全没有必要了吧

24:19.020 --> 24:20.020
因为我们的JSNP

24:20.020 --> 24:21.020
他是干嘛

24:21.020 --> 24:22.020
他就是用来解决

24:22.020 --> 24:23.020
这个跨域的嘛

24:23.020 --> 24:24.020
你现在同源了

24:24.020 --> 24:26.020
他没有跨域了

24:26.020 --> 24:27.020
那我就发送一个

24:27.020 --> 24:29.020
普通的JX请求就行了

24:29.020 --> 24:31.020
所以啊

24:31.020 --> 24:33.020
这块人先做同源

24:33.020 --> 24:35.020
是否同源的一个判断

24:35.020 --> 24:36.020
如果说同源的话

24:36.020 --> 24:38.020
那即使你在这

24:38.020 --> 24:39.020
给了是一个JSNP

24:39.020 --> 24:40.020
那不好意思

24:40.020 --> 24:41.020
他也会给你

24:41.020 --> 24:42.020
发送一个普通的

24:42.020 --> 24:44.020
一个JX的请求

24:44.020 --> 24:45.020
啊

24:45.020 --> 24:46.020
因为你压根

24:46.020 --> 24:47.020
就不存在跨域

24:47.020 --> 24:48.020
这种情况嘛

24:48.020 --> 24:49.020
对吧

24:49.020 --> 24:50.020
然后呢

24:50.020 --> 24:52.020
如果说他不同源

24:52.020 --> 24:53.020
那他就会干嘛

24:53.020 --> 24:55.020
去用JSNP的这种形式呢

24:55.020 --> 24:56.020
去帮咱们

24:56.020 --> 24:58.020
去进行数据的请求

24:58.020 --> 24:59.020
那这种请求呢

24:59.020 --> 25:00.020
他具体怎么做呢

25:00.020 --> 25:01.020
啊

25:01.020 --> 25:02.020
他分好几个步骤啊

25:02.020 --> 25:03.020
首先啊

25:03.020 --> 25:04.020
第一个步骤就是说

25:04.020 --> 25:06.020
用户丢进来的这个地址

25:06.020 --> 25:07.020
然后呢

25:07.020 --> 25:08.020
我需要对这个地址呢

25:08.020 --> 25:09.020
进行一些改造

25:09.020 --> 25:10.020
怎么改造呢

25:10.020 --> 25:11.020
我们在一上来的时候呢

25:11.020 --> 25:12.020
是不是说过啊

25:12.020 --> 25:14.020
他这个里头啊

25:14.020 --> 25:15.020
当然我没有这啊

25:15.020 --> 25:16.020
点击一下

25:16.020 --> 25:17.020
看这个

25:17.020 --> 25:19.020
他在这个地址当中呢

25:19.020 --> 25:21.020
去添加了两个属性

25:21.020 --> 25:22.020
啊

25:22.020 --> 25:23.020
或者说两条参数吧

25:23.020 --> 25:24.020
一个呢

25:24.020 --> 25:25.020
是cobike

25:25.020 --> 25:26.020
另外一个呢

25:26.020 --> 25:27.020
是这个啊

25:27.020 --> 25:28.020
下滑线

25:28.020 --> 25:29.020
啊

25:29.020 --> 25:30.020
cobike呢

25:30.020 --> 25:31.020
就是一个毁掉函数

25:31.020 --> 25:32.020
然后呢

25:32.020 --> 25:33.020
这个下滑线呢

25:33.020 --> 25:34.020
就是一个时间戳

25:34.020 --> 25:35.020
行吧

25:35.020 --> 25:36.020
然后呢

25:36.020 --> 25:37.020
他把这个地址呢

25:37.020 --> 25:38.020
进行一顿改造

25:38.020 --> 25:39.020
改造完成之后呢

25:39.020 --> 25:40.020
接下来干嘛啊

25:40.020 --> 25:41.020
接下来

25:41.020 --> 25:42.020
他就需要去

25:42.020 --> 25:44.020
创建一个script标签

25:44.020 --> 25:45.020
然后呢

25:45.020 --> 25:46.020
啊

25:46.020 --> 25:47.020
先解决那个坑老

25:47.020 --> 25:48.020
创建这个标签

25:48.020 --> 25:49.020
先等一下啊

25:49.020 --> 25:50.020
啊

25:50.020 --> 25:51.020
我们在这说一下

25:51.020 --> 25:52.020
前面

25:52.020 --> 25:53.020
咱们说的那个问题啊

25:53.020 --> 25:54.020
就是

25:54.020 --> 25:55.020
为啥他都给他

25:55.020 --> 25:57.020
转成了guide请求

25:57.020 --> 25:58.020
还记不记啊

25:58.020 --> 25:59.020
我们给了post

25:59.020 --> 26:01.020
然后人仍然是一个guide请求啊

26:01.020 --> 26:02.020
原因是

26:02.020 --> 26:03.020
因为什么呢

26:03.020 --> 26:04.020
因为我们的jsonb

26:04.020 --> 26:05.020
他其实请求

26:05.020 --> 26:07.020
他是通过script的标签

26:07.020 --> 26:08.020
去请求的

26:08.020 --> 26:10.020
通过这种形式呢

26:10.020 --> 26:11.020
去发送的

26:11.020 --> 26:12.020
发送请求

26:12.020 --> 26:13.020
那么

26:13.020 --> 26:14.020
然后呢

26:14.020 --> 26:15.020
这种标签

26:15.020 --> 26:16.020
这些属性的

26:16.020 --> 26:18.020
以及戴浩夫属性的

26:18.020 --> 26:19.020
这些标签

26:19.020 --> 26:20.020
他们所发送的

26:20.020 --> 26:21.020
这个网络请求呢

26:21.020 --> 26:23.020
只能是guide的方式

26:23.020 --> 26:25.020
不能是post的方式

26:25.020 --> 26:27.020
所以就是在这

26:27.020 --> 26:29.020
即使咱们给了post

26:29.020 --> 26:30.020
不好意思

26:30.020 --> 26:32.020
我仍然是一个guide请求

26:32.020 --> 26:33.020
理解了吧

26:33.020 --> 26:34.020
好

26:34.020 --> 26:35.020
把那个坑给他填一下啊

26:35.020 --> 26:36.020
然后呢

26:36.020 --> 26:37.020
咱们继续啊

26:37.020 --> 26:38.020
说这个script标签

26:38.020 --> 26:39.020
那在这呢

26:39.020 --> 26:41.020
就是地址拼完了

26:41.020 --> 26:42.020
拼完之后呢

26:42.020 --> 26:44.020
他要创建一个script标签

26:44.020 --> 26:46.020
把我拼完了这个地址呢

26:46.020 --> 26:50.020
啊付给标签身上的src的这个属性

26:50.020 --> 26:51.020
懂吗

26:51.020 --> 26:52.020
行

26:52.020 --> 26:53.020
这样的话

26:53.020 --> 26:54.020
好

26:54.020 --> 26:55.020
因为这个标签自带去

26:55.020 --> 26:56.020
发送网络请求吗

26:56.020 --> 26:57.020
行

26:57.020 --> 26:59.020
那当我们把它添到页面上之后呢

26:59.020 --> 27:00.020
他就去发一个请求

27:00.020 --> 27:02.020
发完请求之后呢

27:02.020 --> 27:03.020
接下来我们的后端

27:03.020 --> 27:05.020
是不是就能够收到这个数据了

27:05.020 --> 27:06.020
当我们的后端

27:06.020 --> 27:07.020
收到数据之后呢

27:07.020 --> 27:09.020
他根据你的请求地址

27:09.020 --> 27:10.020
然后呢

27:10.020 --> 27:11.020
把要返回的数据

27:11.020 --> 27:12.020
数据呢

27:12.020 --> 27:13.020
给你进行一顿的操作

27:13.020 --> 27:15.020
完成了是不是就处理成

27:15.020 --> 27:17.020
想要想返回的那个数据格式了

27:17.020 --> 27:18.020
ok

27:18.020 --> 27:19.020
这样的话

27:19.020 --> 27:21.020
他会通过哪种形式去返回的呢

27:21.020 --> 27:23.020
通过的就是这种形式

27:23.020 --> 27:27.020
他把你地址当中的那个callback

27:27.020 --> 27:29.020
他的值拿过来

27:29.020 --> 27:30.020
然后呢

27:30.020 --> 27:33.020
当做函数的名字

27:33.020 --> 27:35.020
然后呢加扩号

27:35.020 --> 27:37.020
加一对小扩号

27:37.020 --> 27:39.020
那在小扩号的中间

27:39.020 --> 27:42.020
把处理好的数据丢进来

27:43.020 --> 27:45.020
他通过这种形式呢

27:45.020 --> 27:46.020
把数据呢

27:46.020 --> 27:48.020
就给咱们返回了

27:48.020 --> 27:49.020
返回了之后呢

27:49.020 --> 27:51.020
接下来是不是浏览器就接收到了呀

27:51.020 --> 27:52.020
啊我们这个地址

27:52.020 --> 27:54.020
只要发送请求成功之后呢

27:54.020 --> 27:56.020
浏览器就能够接收到了

27:56.020 --> 27:58.020
那浏览器接收到数据之后呢

27:58.020 --> 28:01.020
接下来他收到了是这一坨东西

28:01.020 --> 28:02.020
对不对

28:02.020 --> 28:03.020
我们已经说过啊

28:03.020 --> 28:04.020
但凡是他夹载的

28:04.020 --> 28:06.020
返回的一个内容

28:06.020 --> 28:08.020
人家浏览器都能够把它当作

28:08.020 --> 28:10.020
真正的js的代码给他执行了

28:10.020 --> 28:12.020
随时浏览器接收到之后呢

28:12.020 --> 28:15.020
就直接去调这个函数了

28:15.020 --> 28:17.910
那这个函数呢

28:17.910 --> 28:19.910
你当然要去定义了

28:19.910 --> 28:20.910
而且呢

28:20.910 --> 28:22.910
你要切记这个函数的定义

28:22.910 --> 28:24.910
你不能够放在调用之前

28:24.910 --> 28:27.910
不能够放在调用之后

28:27.910 --> 28:28.910
错了啊

28:29.910 --> 28:30.910
调用之后

28:30.910 --> 28:33.910
也就是你先调用再去定义啊

28:33.910 --> 28:34.910
这呢是调用

28:34.910 --> 28:35.910
这是定义

28:35.910 --> 28:36.910
你这么给的话

28:36.910 --> 28:37.910
那他就抱错了

28:37.910 --> 28:38.910
刷新一下

28:38.910 --> 28:39.910
看到吗抱错了

28:39.910 --> 28:40.910
抱错

28:40.910 --> 28:42.910
依然是刚才的那个错误

28:42.910 --> 28:44.910
所以这个顺序不要搞错

28:44.910 --> 28:45.910
好

28:45.910 --> 28:46.910
这个呢

28:46.910 --> 28:48.910
就是我们的这个

28:48.910 --> 28:49.910
这个

28:49.910 --> 28:50.910
他呢

28:50.910 --> 28:51.910
内部的这个jsonp

28:51.910 --> 28:53.910
实现的一个步骤啊

28:53.910 --> 28:55.910
那我们光说不练

28:55.910 --> 28:56.910
假靶式

28:56.910 --> 28:57.910
是不是

28:57.910 --> 28:58.910
咱们接下来呢

28:58.910 --> 28:59.910
来写代码啊

28:59.910 --> 29:00.910
跟大家呢

29:00.910 --> 29:01.910
去操作一下

29:01.910 --> 29:02.910
那接下来

29:02.910 --> 29:03.910
咱们花些时间

29:03.910 --> 29:04.910
我就带着大家呢

29:04.910 --> 29:05.910
咱们去啊

29:05.910 --> 29:06.910
写一下这个

29:06.910 --> 29:07.910
这块当中呢

29:07.910 --> 29:08.910
这个jsonp 这个方法

29:08.910 --> 29:10.910
看一下他具体该怎么去操作啊

29:10.910 --> 29:12.910
当然在这要去生命一下

29:12.910 --> 29:13.910
就是

29:13.910 --> 29:14.910
嗯

29:14.910 --> 29:16.910
我只是大致的去实现了这一下步骤

29:16.910 --> 29:17.910
这些步骤

29:17.910 --> 29:19.910
有很多很多的一些细节呢

29:19.910 --> 29:20.910
其实我都忽略了啊

29:20.910 --> 29:21.910
你们在用的时候呢

29:21.910 --> 29:22.910
其实不用

29:22.910 --> 29:24.910
不要去用我的这个版本

29:24.910 --> 29:26.910
还是去用人家

29:26.910 --> 29:27.910
这个版本就行了

29:27.910 --> 29:28.910
我们在这呢

29:28.910 --> 29:29.910
主要是教大家呢

29:29.910 --> 29:31.910
去把刚才所学习的那个东西呢

29:31.910 --> 29:32.910
实践一下

29:32.910 --> 29:33.910
所以说呢

29:33.910 --> 29:34.910
不要去在意这个

29:34.910 --> 29:36.910
在意这个细节好不好

29:36.910 --> 29:37.910
来咱们看一下

29:37.910 --> 29:38.910
该如何去做啊

29:38.910 --> 29:39.910
那我就在这呢

29:39.910 --> 29:41.910
去声明声明一个什么呢

29:41.910 --> 29:42.910
声明一个辩量

29:42.910 --> 29:43.910
这个辩量呢

29:43.910 --> 29:44.910
叫jsonp jp

29:44.910 --> 29:45.910
好不好

29:45.910 --> 29:46.910
它呢是一个对象啊

29:46.910 --> 29:48.910
其实就好比说我们的那个刀老夫啊

29:48.910 --> 29:49.910
然后呢

29:49.910 --> 29:50.910
它的里头呢

29:50.910 --> 29:51.910
是有一个啊

29:51.910 --> 29:52.910
这个ajx

29:52.910 --> 29:54.910
是一个方式

29:54.910 --> 29:56.910
完全跟它是一模一样

29:56.910 --> 29:57.910
当你去调用的时候呢

29:57.910 --> 29:58.910
怎么去调呢

29:58.910 --> 29:59.910
其实就是这个

29:59.910 --> 30:00.910
是吧

30:00.910 --> 30:01.910
好吧

30:01.910 --> 30:02.910
应该是这样

30:02.910 --> 30:03.910
这样叫是吧

30:03.910 --> 30:04.910
好

30:04.910 --> 30:05.910
然后呢

30:05.910 --> 30:06.910
ajx里边呢

30:06.910 --> 30:08.910
他接收了很多的参数是吧

30:08.910 --> 30:09.910
那这个参数呢

30:09.910 --> 30:10.910
是一个对象

30:10.910 --> 30:11.910
我们给上一个行参

30:11.910 --> 30:12.910
off-sense

30:13.910 --> 30:14.910
然后

30:14.910 --> 30:16.910
当用户的行参传进来之后呢

30:16.910 --> 30:18.910
我需要去取到很多

30:18.910 --> 30:19.910
很多的一些东西

30:19.910 --> 30:20.910
什么东西呢

30:20.910 --> 30:21.910
比如说第1个url

30:22.910 --> 30:23.910
这个等于什么呢

30:23.910 --> 30:25.910
off-sense的url

30:25.910 --> 30:26.910
那你看啊

30:26.910 --> 30:27.910
像这个地方

30:27.910 --> 30:28.910
其实我就没有错

30:28.910 --> 30:29.910
没有去做这个

30:29.910 --> 30:30.910
严谨的处理

30:30.910 --> 30:33.910
如果说要做严谨的处理的话

30:33.910 --> 30:34.910
你需要去判断一下

30:34.910 --> 30:35.910
off-sense当中

30:35.910 --> 30:38.910
用户有没有给这个url

30:38.910 --> 30:39.910
是不是啊

30:39.910 --> 30:40.910
那这些东西呢

30:40.910 --> 30:41.910
咱们都忽略了啊

30:41.910 --> 30:42.910
不重要

30:42.910 --> 30:43.910
好吧

30:43.910 --> 30:44.910
来

30:44.910 --> 30:45.910
我取到了这个

30:45.910 --> 30:47.910
用户传的这个请求地址

30:47.910 --> 30:49.910
因为我需要去

30:49.910 --> 30:51.910
从这个地址当中呢

30:51.910 --> 30:53.910
要去取很多的东西

30:53.910 --> 30:54.910
要去取什么呢

30:54.910 --> 30:55.910
一会咱们再说

30:55.910 --> 30:56.910
再生命一个变量

30:56.910 --> 30:58.910
这个变量了叫什么呢

30:58.910 --> 30:59.910
叫data type

30:59.910 --> 31:00.910
那他呢

31:00.910 --> 31:01.910
是什么呢

31:01.910 --> 31:03.910
他是off-sense里边的data type

31:04.910 --> 31:08.610
那这个data type呢

31:08.610 --> 31:09.610
指的是啥呢

31:09.610 --> 31:11.610
就是用户

31:11.610 --> 31:13.610
不是请求方式

31:13.610 --> 31:16.610
用户传进来的这个请求方式啊

31:16.610 --> 31:18.610
因为我们刚才看了啊

31:18.610 --> 31:19.610
这个data type

31:19.610 --> 31:21.610
是不是里头有很多很多的一些值啊

31:21.610 --> 31:22.610
我们在这呢

31:22.610 --> 31:23.610
就需要去知道

31:23.610 --> 31:24.610
他传的到底

31:24.610 --> 31:26.610
是不是一个JSMP

31:26.610 --> 31:27.610
行

31:27.610 --> 31:28.610
两个啊

31:28.610 --> 31:29.610
两个

31:29.610 --> 31:30.610
然后呢

31:30.610 --> 31:31.610
接下来再来

31:31.610 --> 31:33.610
我接下来要生命

31:33.610 --> 31:34.610
另外的两个变量

31:34.610 --> 31:35.610
这两个变量呢

31:35.610 --> 31:36.610
是什么呢

31:36.610 --> 31:37.610
就是啊

31:37.610 --> 31:41.610
要根据用户传入的这个请求的地址存储

31:41.610 --> 31:42.610
一个啊

31:42.610 --> 31:45.610
是用户地址当中的协议

31:45.610 --> 31:46.610
另外一个呢

31:46.610 --> 31:47.610
是用户地址的

31:47.610 --> 31:49.610
域名跟端口

31:49.610 --> 31:51.610
那这两个变量呢

31:51.610 --> 31:52.610
他是用来干嘛呢

31:52.610 --> 31:54.610
他其实是用来做判断的

31:54.610 --> 31:55.610
判断什么呢

31:55.610 --> 31:56.610
判断是否同源

31:56.610 --> 31:57.610
同源

31:57.610 --> 31:59.610
咱们一直是不是强调这个啊

31:59.610 --> 32:02.610
ajax再去发这个JSMP的请求的时候呢

32:02.610 --> 32:04.610
要判断到底是否同源

32:04.610 --> 32:05.610
所以啊

32:05.610 --> 32:07.610
这两个东西很重要啊

32:07.610 --> 32:08.610
target

32:08.610 --> 32:09.610
target

32:09.610 --> 32:10.610
particle

32:10.610 --> 32:14.300
等上一个空

32:14.300 --> 32:15.300
然后这个我写一下

32:15.300 --> 32:16.300
这是

32:16.300 --> 32:19.300
用户地址

32:19.300 --> 32:21.300
地址的什么呢

32:21.300 --> 32:23.680
协议

32:23.680 --> 32:24.680
再来一个

32:24.680 --> 32:26.680
target host

32:26.680 --> 32:31.890
这是用户地址的

32:31.890 --> 32:32.890
啊

32:32.890 --> 32:35.890
域名和端口啊

32:35.890 --> 32:37.890
域名跟端口在去取的时候呢

32:37.890 --> 32:38.890
他们是在一起的

32:38.890 --> 32:39.890
所以啊

32:39.890 --> 32:40.890
就通过一个变量了

32:40.890 --> 32:42.890
就能够把他们存储了

32:42.890 --> 32:44.890
好存储了

32:44.890 --> 32:46.890
相应的一些变量之后呢

32:46.890 --> 32:47.890
接下来

32:47.890 --> 32:50.890
我们第一件事情要干嘛呀

32:50.890 --> 32:51.890
第一件事情

32:51.890 --> 32:54.890
我们需要去给他俩去复职

32:54.890 --> 32:56.890
那他俩复职怎么去复职呢

32:56.890 --> 32:57.890
在这里呢

32:57.890 --> 32:59.890
其实是有一个情况

32:59.890 --> 33:00.890
有一个什么情况了

33:00.890 --> 33:01.890
其实

33:01.890 --> 33:02.890
呃

33:02.890 --> 33:04.890
是用户传进来的这个地址呢

33:04.890 --> 33:05.890
他呢

33:05.890 --> 33:07.890
是http协议的呢

33:07.890 --> 33:08.890
还是我们

33:08.890 --> 33:09.890
呃

33:09.890 --> 33:10.890
或者这么去讲吧

33:10.890 --> 33:12.890
他用户传进来的这个地址呢

33:12.890 --> 33:13.890
是一个绝对地址

33:13.890 --> 33:14.890
还是一个啊

33:14.890 --> 33:15.890
相对地址

33:15.890 --> 33:16.890
因为啊

33:16.890 --> 33:17.890
你看啊

33:17.890 --> 33:18.890
我们平时在发

33:18.890 --> 33:19.890
这个ax请求的时候呢

33:19.890 --> 33:20.890
像这个东西呢

33:20.890 --> 33:21.890
是啥

33:21.890 --> 33:22.890
就是一个绝对的地址

33:22.890 --> 33:23.890
而有的时候呢

33:23.890 --> 33:24.890
我们在写项目的时候呢

33:24.890 --> 33:25.890
是不是这样

33:25.890 --> 33:26.890
你看gs

33:26.890 --> 33:27.890
下边的什么呢

33:27.890 --> 33:28.890
data.ges

33:28.890 --> 33:29.890
那这个地址呢

33:29.890 --> 33:30.890
就叫什么呢

33:30.890 --> 33:31.890
相对地址

33:31.890 --> 33:32.890
其实换句话说啊

33:32.890 --> 33:33.890
绝对地址

33:33.890 --> 33:34.890
是不是啊

33:34.890 --> 33:35.890
他呢

33:35.890 --> 33:36.890
有可能

33:36.890 --> 33:37.890
是什么呢

33:37.890 --> 33:38.890
是别的喻

33:38.890 --> 33:40.890
当然有可能也是本地

33:40.890 --> 33:41.890
啊

33:41.890 --> 33:42.890
有可能也是我们跟

33:42.890 --> 33:44.890
当前文件的喻是一样的啊

33:44.890 --> 33:45.890
有可能

33:45.890 --> 33:46.890
但是呢

33:46.890 --> 33:47.890
我们给上一个这个

33:47.890 --> 33:49.890
相对的地址的话

33:49.890 --> 33:50.890
那这个

33:50.890 --> 33:52.890
是不是肯定是一个什么的

33:52.890 --> 33:53.890
是一个本地啊

33:53.890 --> 33:55.890
就是跟我们的这个文件

33:55.890 --> 33:57.890
是属于同一个喻啊

33:57.890 --> 33:58.890
是吗

33:58.890 --> 33:59.890
必须的啊

33:59.890 --> 34:00.890
本地的嘛

34:00.890 --> 34:01.890
那肯定是这样的啊

34:01.890 --> 34:03.890
所以其实他们还有另外

34:03.890 --> 34:04.890
这么一层意思啊

34:04.890 --> 34:05.890
那在这呢

34:05.890 --> 34:06.890
我们就要去判断啊

34:06.890 --> 34:08.890
因为用户传进来的

34:08.890 --> 34:10.890
这两个地址不一样的话

34:10.890 --> 34:11.890
我们去给他复职

34:11.890 --> 34:12.890
是不一样的

34:12.890 --> 34:13.890
所以啊

34:13.890 --> 34:14.890
在这儿

34:14.890 --> 34:15.890
就做一个条件的判断

34:15.890 --> 34:16.890
去处理一下啊

34:16.890 --> 34:17.890
那怎么去处理呢

34:17.890 --> 34:18.890
U R L

34:18.890 --> 34:19.890
是不是用户传进来的

34:19.890 --> 34:20.890
这个U R L

34:20.890 --> 34:21.890
然后呢

34:21.890 --> 34:22.890
怎么样

34:22.890 --> 34:23.890
我们去index

34:23.890 --> 34:24.890
哦

34:24.890 --> 34:25.890
找什么呢

34:25.890 --> 34:26.890
找这个

34:26.890 --> 34:28.890
http

34:28.890 --> 34:31.840
找这个

34:31.840 --> 34:32.840
那如果说

34:32.840 --> 34:33.840
他的职为零

34:33.840 --> 34:35.840
为零啥意思啊

34:35.840 --> 34:36.840
是不是

34:36.840 --> 34:37.840
我们在一开始的时候呢

34:37.840 --> 34:38.840
就找到了

34:38.840 --> 34:39.840
因为这个协议

34:39.840 --> 34:41.840
肯定是顶着头开始的啊

34:41.840 --> 34:42.840
所以说呢

34:42.840 --> 34:43.840
他的职为零

34:43.840 --> 34:44.840
就表示现在呢

34:44.840 --> 34:46.840
用户的地址当中呢

34:46.840 --> 34:48.840
有http的协议

34:48.840 --> 34:49.840
或者说

34:49.840 --> 34:50.840
或者还有一种情况

34:50.840 --> 34:51.840
U R L

34:51.840 --> 34:52.840
index of

34:53.840 --> 34:55.840
用户有可能传的是

34:55.840 --> 34:57.840
https

34:57.840 --> 34:59.840
不要把这个忘了啊

34:59.840 --> 35:01.840
他如果说也等于等于零

35:02.840 --> 35:04.840
是不是跟他一个意思啊

35:04.840 --> 35:05.840
那就判断一下

35:05.840 --> 35:06.840
用户的地址

35:06.840 --> 35:07.840
是不是以他

35:07.840 --> 35:08.840
或者说

35:08.840 --> 35:09.840
以他做一个开头

35:09.840 --> 35:10.840
是吧

35:10.840 --> 35:12.840
那如果说这个条件成立

35:12.840 --> 35:13.840
标一下吧

35:13.840 --> 35:15.840
这个条件成立

35:15.840 --> 35:19.150
成立说明用

35:19.150 --> 35:22.150
说明用户传入的地址

35:22.150 --> 35:24.150
是一个绝对啊

35:24.150 --> 35:25.150
地址啊

35:25.150 --> 35:26.150
绝对地址

35:26.150 --> 35:28.150
好是一个绝对地址的话

35:28.150 --> 35:29.150
那现在呢

35:29.150 --> 35:31.150
我就需要去把这个地址给他解析了

35:31.150 --> 35:32.150
解析完之后呢

35:32.150 --> 35:34.150
再去给他俩复职

35:34.150 --> 35:35.150
那怎么去解析呢

35:35.150 --> 35:36.150
首先我声明一个辩量

35:36.150 --> 35:37.150
他给他

35:40.150 --> 35:41.150
等于什么呢

35:41.150 --> 35:43.150
new url

35:43.150 --> 35:44.150
把谁啊

35:44.150 --> 35:46.150
把这个 url 给他丢进来

35:46.150 --> 35:48.150
这句话啥意思啊

35:48.150 --> 35:49.150
这句话

35:49.150 --> 35:51.150
把用户

35:53.150 --> 35:56.150
传进来的地址

35:56.150 --> 35:58.150
注意这个地址是一个什么呢

35:58.150 --> 36:00.530
自付串

36:00.530 --> 36:01.530
在这呢

36:01.530 --> 36:02.530
是不是一个自付串

36:02.530 --> 36:03.530
必须是一个自付串啊

36:03.530 --> 36:04.530
把这个

36:04.530 --> 36:08.530
变成一个真正的地址对象

36:08.530 --> 36:10.530
所以也就是说

36:10.530 --> 36:11.530
new url

36:11.530 --> 36:12.530
就是说

36:12.530 --> 36:13.530
把这个呢

36:13.530 --> 36:14.530
给他实力化

36:14.530 --> 36:15.530
实力化之后呢

36:15.530 --> 36:17.530
就变成了 url 对象的一个实力了

36:17.530 --> 36:19.530
他就是一个对象了

36:19.530 --> 36:20.530
为什么要这么去变呢

36:20.530 --> 36:21.530
是因为啊

36:21.530 --> 36:22.530
我想要去取

36:22.530 --> 36:24.530
这个域名

36:24.530 --> 36:25.530
那如果说

36:25.530 --> 36:26.530
你变成一个对象的话

36:26.530 --> 36:28.530
那这个对象身上

36:28.530 --> 36:29.530
就会相应的

36:29.530 --> 36:31.530
有取域名的属性

36:31.530 --> 36:32.530
我通过那个

36:32.530 --> 36:33.530
是不是就很简单

36:33.530 --> 36:34.530
取到了

36:34.530 --> 36:36.530
如果说你不这么干的话

36:36.530 --> 36:37.530
你想取他

36:37.530 --> 36:38.530
那怎么取啊

36:38.530 --> 36:41.530
你是不是要去拆这个自付串啊

36:41.530 --> 36:43.530
是不是就很麻烦了呀

36:43.530 --> 36:44.530
所以啊

36:44.530 --> 36:45.530
我把它变成一个对象

36:45.530 --> 36:46.530
懂吗

36:46.530 --> 36:48.530
好变成对象之后呢

36:48.530 --> 36:49.530
你比如说啊

36:49.530 --> 36:51.530
现在我要取这个协议

36:51.530 --> 36:52.530
那简单怎么去取呢

36:52.530 --> 36:53.530
他给他

36:55.530 --> 36:56.530
他给他

36:56.530 --> 36:59.530
人家身上有一条属性

36:59.530 --> 37:00.530
particle

37:00.530 --> 37:01.530
这个东西呢

37:01.530 --> 37:02.530
就

37:02.530 --> 37:04.530
返回返回

37:04.530 --> 37:06.530
地址对象的什么呢

37:06.530 --> 37:07.530
协议

37:07.530 --> 37:08.530
哎

37:08.530 --> 37:10.530
你看这样是不是就超级简单啊

37:10.530 --> 37:12.530
那还有他给他host

37:12.530 --> 37:13.530
那host呢

37:13.530 --> 37:15.530
也有人一条属性host

37:15.530 --> 37:19.420
地址对象的什么呢

37:19.420 --> 37:20.420
域名

37:22.420 --> 37:23.420
和

37:23.420 --> 37:24.420
端口

37:24.420 --> 37:27.240
行吧

37:27.240 --> 37:29.240
当这个条件成立的时候呢

37:29.240 --> 37:31.240
你看咱这么去处理啊

37:31.240 --> 37:32.240
好

37:32.240 --> 37:33.240
那如果说这个条件

37:33.240 --> 37:34.240
他不成立的话

37:35.240 --> 37:36.240
else

37:37.240 --> 37:40.240
代码走到这里说明什么呢

37:40.240 --> 37:43.240
说明用户传入的地址

37:43.240 --> 37:46.240
是一个相对相对地址

37:46.240 --> 37:47.240
相对地址的话

37:47.240 --> 37:48.240
那这两个址

37:48.240 --> 37:50.240
你就不能够通过人家

37:50.240 --> 37:52.240
这种方式呢去给了

37:52.240 --> 37:53.240
理解吧

37:53.240 --> 37:54.240
这两个址呢

37:54.240 --> 37:55.240
应该怎么去给呢

37:55.240 --> 37:56.240
复制一下

37:57.240 --> 37:58.240
这个时候呢

37:58.240 --> 37:59.240
没有他了

37:59.240 --> 38:00.240
但是

38:00.240 --> 38:02.240
他传入的是一个相对地址

38:02.240 --> 38:03.240
那相对地址的话

38:03.240 --> 38:05.240
是不是刚才咱们说过啊

38:05.240 --> 38:07.240
相对地址就相当于说

38:07.240 --> 38:09.240
他跟我当前的文件

38:09.240 --> 38:10.240
属于同一个域下边

38:10.240 --> 38:11.240
只有同一个域

38:11.240 --> 38:13.240
你才能够使用那个相对地址吗

38:13.240 --> 38:14.240
那好

38:14.240 --> 38:16.240
那这个地址我怎么去取的呢

38:16.240 --> 38:17.240
既然你同一个域

38:17.240 --> 38:19.240
那是不是local

38:19.240 --> 38:21.240
local

38:21.240 --> 38:22.240
local

38:22.240 --> 38:23.240
不是local

38:23.240 --> 38:24.240
location

38:24.240 --> 38:26.240
location

38:26.240 --> 38:28.240
location取到的就是

38:28.240 --> 38:29.240
当前我的这个文件

38:29.240 --> 38:31.240
所在的那个域

38:31.240 --> 38:32.240
是吧

38:32.240 --> 38:33.240
是同一个域

38:33.240 --> 38:34.240
那所以说呢

38:34.240 --> 38:36.240
你看我使用他就能够取到了

38:36.240 --> 38:37.240
理解吧

38:38.240 --> 38:39.240
嗯好

38:40.240 --> 38:41.240
那这个e-files呢

38:41.240 --> 38:42.240
我们就算是

38:42.240 --> 38:43.240
完了

38:43.240 --> 38:44.240
完了之后呢

38:44.240 --> 38:45.240
接下来啊

38:45.240 --> 38:46.240
你看我们两个变量了

38:46.240 --> 38:47.240
现在已经有值了

38:47.240 --> 38:48.240
有值了之后呢

38:48.240 --> 38:50.240
那接下来我就需要去处理谁啊

38:50.240 --> 38:53.240
就处理我们的这个JSNP了

38:53.240 --> 38:55.240
但是要去处理这个JSNP的话

38:55.240 --> 38:57.240
其实也需要去做一个条件判断

38:57.240 --> 38:58.240
判断什么呢

38:58.240 --> 39:00.240
判断这个data type

39:00.240 --> 39:01.240
这个值呢

39:01.240 --> 39:03.240
是否不等于什么呢

39:04.240 --> 39:05.240
JSNP

39:06.240 --> 39:08.240
这个条件成立

39:08.240 --> 39:12.240
说明用户的请求方式

39:12.240 --> 39:15.810
不是JSNP

39:15.810 --> 39:16.810
那

39:16.810 --> 39:19.310
那什么呀

39:19.310 --> 39:20.310
那

39:21.310 --> 39:23.310
就直接返回

39:24.310 --> 39:25.310
return

39:25.310 --> 39:29.330
去了一个n是吧

39:29.330 --> 39:30.330
什么意思啊

39:31.330 --> 39:33.330
如果说人家现在给的请求方式

39:33.330 --> 39:35.330
比如说是一个guide

39:35.330 --> 39:37.330
它不是一个JSNP

39:38.330 --> 39:39.330
那怎么办啊

39:39.330 --> 39:41.330
我们接下来要做的事情

39:41.330 --> 39:43.330
其实就是要处理JSNP的

39:43.330 --> 39:44.330
这种请求的方式

39:44.330 --> 39:46.330
那后边的代码还需要走吗

39:46.330 --> 39:48.330
就不需要了

39:48.330 --> 39:49.330
理解吧

39:49.330 --> 39:52.330
那如果说用户传进来的类型

39:52.330 --> 39:53.330
就是它

39:53.330 --> 39:54.330
这个条件能满足吗

39:54.330 --> 39:55.330
不能满足

39:55.330 --> 39:56.330
return能发生吗

39:56.330 --> 39:57.330
不能

39:57.330 --> 39:58.330
后边的代码能不能执行

39:58.330 --> 39:59.330
必须可以

40:00.330 --> 40:01.330
懂吗

40:01.330 --> 40:02.330
所以说呢

40:02.330 --> 40:03.330
后边的代码

40:03.330 --> 40:04.330
才是真正去处理

40:04.330 --> 40:05.330
JSNP

40:05.330 --> 40:07.330
那怎么去处理的呢

40:07.330 --> 40:08.330
我们记住

40:08.330 --> 40:09.330
始终要记住

40:09.330 --> 40:10.330
人家Jquery

40:10.330 --> 40:11.330
它其实是做了

40:11.330 --> 40:13.330
同源跟不同源的这么一个判断

40:13.330 --> 40:14.330
所以说呢

40:14.330 --> 40:16.330
我们在这也要去做

40:16.330 --> 40:18.330
同源跟不同源的这么一个判断

40:18.330 --> 40:19.330
那我们就来判断

40:19.330 --> 40:21.330
怎么去判断的呢

40:21.330 --> 40:22.330
location

40:23.330 --> 40:24.330
这个呢

40:24.330 --> 40:26.330
是不是我当前文件所在的一个预

40:26.330 --> 40:27.330
然后呢

40:27.330 --> 40:29.330
它的particle

40:30.330 --> 40:32.330
是否

40:32.330 --> 40:33.330
跟什么呢

40:33.330 --> 40:35.330
我们存的这个东西呢

40:35.330 --> 40:36.330
相等

40:37.330 --> 40:38.330
如果说相等的话

40:38.330 --> 40:40.330
是不是就证明现在预相等

40:40.330 --> 40:41.330
预相等并没有完

40:41.330 --> 40:43.330
我们的同源一定要保证

40:43.330 --> 40:44.330
是不是

40:44.330 --> 40:45.330
这是协议

40:45.330 --> 40:46.330
协议

40:46.330 --> 40:47.330
预名

40:47.330 --> 40:48.330
端口

40:48.330 --> 40:49.330
都得一致的才行

40:50.330 --> 40:51.330
还有另外一个

40:51.330 --> 40:54.330
location.host

40:54.330 --> 40:55.330
如果说

40:55.330 --> 40:56.330
这个东西呢

40:56.330 --> 40:57.330
跟谁啊

40:57.330 --> 40:58.330
跟我们刚才存的

40:58.330 --> 40:59.330
这个东西

40:59.330 --> 41:01.330
他给他host

41:01.330 --> 41:02.330
跟他相等

41:02.330 --> 41:03.330
那就证明

41:03.330 --> 41:04.330
来

41:04.330 --> 41:05.330
这个条件

41:05.330 --> 41:06.330
条件

41:06.330 --> 41:07.330
成立

41:07.330 --> 41:08.330
然后呢

41:08.330 --> 41:09.330
说明

41:09.330 --> 41:10.330
现在

41:11.330 --> 41:13.330
再一个

41:13.330 --> 41:14.330
现在是

41:14.330 --> 41:15.330
同预吧

41:16.330 --> 41:17.330
同预

41:17.330 --> 41:18.330
好

41:18.330 --> 41:19.330
那是同预的话

41:19.330 --> 41:20.330
然后呢

41:20.330 --> 41:21.330
干嘛

41:21.330 --> 41:22.330
还记不记

41:22.330 --> 41:23.330
我们

41:23.330 --> 41:24.330
刚才所说的

41:24.330 --> 41:25.330
如果说

41:25.330 --> 41:26.330
它是一个同预

41:26.330 --> 41:27.330
那

41:27.330 --> 41:28.330
我们还有必要使用

41:28.330 --> 41:29.330
这个jsonp

41:29.330 --> 41:30.330
的这种方式吗

41:30.330 --> 41:31.330
没有必要了

41:31.330 --> 41:32.330
就直接

41:32.330 --> 41:33.330
发送一个普通的

41:33.330 --> 41:34.330
exe的请求

41:34.330 --> 41:35.330
就ok了

41:35.330 --> 41:36.330
懂吗

41:36.330 --> 41:37.330
那在这个里头呢

41:37.330 --> 41:38.330
我就不再去写了

41:38.330 --> 41:39.330
好不好

41:39.330 --> 41:40.330
我就不再去写了

41:40.330 --> 41:41.330
这个呢

41:41.330 --> 41:42.330
到时候呢

41:42.330 --> 41:43.330
就是一个普通的

41:43.330 --> 41:44.330
exe的请求

41:44.330 --> 41:45.330
咱

41:45.330 --> 41:46.330
咱主要去说一下

41:46.330 --> 41:47.330
它不同预的情况下

41:47.330 --> 41:48.330
不同预

41:48.330 --> 41:49.330
那你看

41:49.330 --> 41:50.330
我说不同预吧

41:50.330 --> 41:52.330
这是不同

41:52.330 --> 41:58.860
不同预

41:58.860 --> 41:59.860
那不同预的话

41:59.860 --> 42:00.860
现在

42:00.860 --> 42:01.860
我们怎么去

42:01.860 --> 42:03.860
做这个jsonp的请求呢

42:03.860 --> 42:04.860
很简单

42:04.860 --> 42:05.860
其实刚才咱

42:05.860 --> 42:06.860
首先

42:06.860 --> 42:07.860
我们要做第一步

42:07.860 --> 42:08.860
就是要

42:08.860 --> 42:09.860
改造这个地址

42:09.860 --> 42:10.860
是不是

42:10.860 --> 42:11.860
那怎么去改造这个地址呢

42:11.860 --> 42:12.860
需要在这个地址当中

42:12.860 --> 42:13.860
去增加两个参数

42:13.860 --> 42:14.860
是吧

42:14.860 --> 42:15.860
一个是coback

42:15.860 --> 42:17.860
它等于什么呢

42:17.860 --> 42:18.860
这个呢

42:18.860 --> 42:19.860
是我随意给的

42:19.860 --> 42:20.860
那么cb

42:20.860 --> 42:21.860
cb

42:21.860 --> 42:22.860
然后呢

42:22.860 --> 42:23.860
加加什么呢

42:23.860 --> 42:24.860
加后边那个数字呢

42:24.860 --> 42:25.860
它其实是一个随机

42:25.860 --> 42:26.860
那怎么去随机呢

42:26.860 --> 42:27.860
mas

42:27.860 --> 42:32.010
mas.floor

42:32.010 --> 42:33.010
然后呢

42:33.010 --> 42:35.010
mas.random

42:35.010 --> 42:37.010
拿这个诚意

42:38.010 --> 42:39.010
诚意多少

42:39.010 --> 42:41.010
诚意一个100万

42:41.010 --> 42:42.010
啥意思啊

42:42.010 --> 42:43.010
其实就是说

42:43.010 --> 42:44.010
这个得出来的一个结果呢

42:44.010 --> 42:45.010
就是一个cb

42:45.010 --> 42:46.010
什么呢

42:46.010 --> 42:47.010
后边一刷数字

42:47.010 --> 42:49.010
至于这个数字是多少呢

42:49.010 --> 42:50.010
其实就是说

42:50.010 --> 42:52.010
从0到100万之间吧

42:52.010 --> 42:53.010
就是这么一个纸

42:53.010 --> 42:54.010
懂吗

42:54.010 --> 42:55.010
那这个呢

42:55.010 --> 42:56.010
是随机啊

42:56.010 --> 42:57.010
随机

42:57.010 --> 43:00.010
生成一个函数名

43:00.010 --> 43:01.010
当然啊

43:01.010 --> 43:02.010
我们在这做的简单啊

43:02.010 --> 43:05.010
人家真正的其实啊

43:05.010 --> 43:06.010
他还要做

43:06.010 --> 43:07.010
做那个什么呢

43:07.010 --> 43:08.010
很多事情啊

43:08.010 --> 43:09.010
你看啊

43:09.010 --> 43:11.010
我们在

43:11.010 --> 43:12.010
network

43:12.010 --> 43:13.010
我点击一下

43:14.010 --> 43:15.010
你看啊

43:15.010 --> 43:16.010
他这个里边了

43:16.010 --> 43:17.010
他可不是简简单单

43:17.010 --> 43:19.010
就是这么一个什么的

43:19.010 --> 43:21.010
这么一个随机的一个数字啊

43:21.010 --> 43:23.010
当然前面人家是jquery

43:23.010 --> 43:24.010
我们在这呢

43:24.010 --> 43:25.010
给的是一个cb啊

43:25.010 --> 43:26.010
如果说你想给jquery

43:26.010 --> 43:27.010
也可以啊

43:27.010 --> 43:28.010
好吧无所谓啊

43:28.010 --> 43:29.010
然后呢

43:29.010 --> 43:30.010
你看啊

43:30.010 --> 43:31.010
他这个数字呢

43:31.010 --> 43:32.010
后边还有一个下滑线

43:32.010 --> 43:33.010
下滑线这个后边是啥

43:33.010 --> 43:34.010
就是一个时间出啊

43:34.010 --> 43:35.010
他其实随机了

43:35.010 --> 43:36.010
一长串的数字

43:36.010 --> 43:37.010
又加了一个什么呢

43:37.010 --> 43:38.010
加了一个时间出

43:38.010 --> 43:40.010
当然其实这些东西呢

43:40.010 --> 43:41.010
都无所谓

43:41.010 --> 43:42.010
你知道吧

43:42.010 --> 43:43.010
你只需要去保证

43:43.010 --> 43:45.010
每次的名字不一样就行了

43:45.010 --> 43:47.010
至于你怎么去随机

43:47.010 --> 43:48.010
那这个呢

43:48.010 --> 43:49.010
就看心情了

43:49.010 --> 43:50.010
理解吧

43:50.010 --> 43:51.010
大家知道这么一个原理就行了啊

43:51.010 --> 43:52.010
在这呢

43:52.010 --> 43:53.010
我就这么去写好

43:53.010 --> 43:54.010
行吗

43:54.010 --> 43:56.010
这个随机了一个名字啊

43:56.010 --> 43:57.010
随机了一个名字之后呢

43:57.010 --> 43:58.010
接下来

43:58.010 --> 43:59.010
他其实还有一个时间戳是吧

43:59.010 --> 44:01.010
那那个时间戳呢

44:01.010 --> 44:02.010
这个东西呢

44:02.010 --> 44:03.010
我就不再去加了

44:03.010 --> 44:04.010
你们呢

44:04.010 --> 44:05.010
到时候自己去加一下就行了

44:05.010 --> 44:06.010
就是一个下滑线

44:06.010 --> 44:07.010
然后呢等于一个时间戳

44:07.010 --> 44:08.010
时间戳呢

44:08.010 --> 44:09.010
你通过这个new date

44:09.010 --> 44:10.010
点get time

44:10.010 --> 44:11.010
就行了

44:11.010 --> 44:12.010
好不好

44:12.010 --> 44:13.010
我们给上一个参数

44:13.010 --> 44:14.010
大家理解这个方式

44:14.010 --> 44:15.010
就可以了啊

44:15.010 --> 44:16.010
行吧

44:16.010 --> 44:17.010
这个呢

44:17.010 --> 44:18.010
我们是生成了一个

44:18.010 --> 44:19.010
函数的名字

44:19.010 --> 44:20.010
那接下来呢

44:20.010 --> 44:21.010
就是要生成

44:21.010 --> 44:22.010
script

44:22.010 --> 44:23.010
标签啊

44:23.010 --> 44:24.010
咱主要去说一些

44:24.010 --> 44:25.010
核心的东西啊

44:25.010 --> 44:26.010
来

44:26.010 --> 44:27.010
生命辩量

44:27.010 --> 44:28.010
script

44:28.010 --> 44:29.010
等于什么呢

44:29.010 --> 44:32.010
document.crate

44:33.010 --> 44:34.010
create element

44:34.010 --> 44:35.010
我们要创建一个

44:35.010 --> 44:36.010
script

44:37.010 --> 44:38.010
然后呢

44:38.010 --> 44:39.010
创建完了之后呢

44:39.010 --> 44:40.010
接下来

44:40.010 --> 44:42.010
就要给他的身上去复职了

44:42.010 --> 44:44.010
但是这个时候呢

44:44.010 --> 44:46.010
你可千万不要直接src等

44:46.010 --> 44:47.010
啊

44:47.010 --> 44:48.010
你可千万不要这么干

44:48.010 --> 44:49.010
为啥呢

44:49.010 --> 44:50.010
啊

44:50.010 --> 44:51.010
是这样的

44:51.010 --> 44:53.010
我们的这个src啊

44:53.010 --> 44:54.010
在给的时候呢

44:54.010 --> 44:55.010
你看啊

44:55.010 --> 44:57.010
这个地址啊

44:57.010 --> 44:58.010
我们给的这个地址

44:58.010 --> 45:00.010
里头有参数吗

45:00.010 --> 45:01.010
也就是啊

45:01.010 --> 45:02.010
我们在这儿

45:02.010 --> 45:03.010
请求的这个地址

45:03.010 --> 45:04.010
他里头有没有参数

45:04.010 --> 45:05.010
没有参数

45:06.010 --> 45:08.010
但是他可不代表说

45:08.010 --> 45:09.010
人家别人一定要

45:09.010 --> 45:11.010
给一个没有参数的地址

45:11.010 --> 45:12.010
有的时候

45:12.010 --> 45:14.010
人家可能要给上一个

45:14.010 --> 45:15.010
这个地址

45:15.010 --> 45:16.010
要带这个参数

45:16.010 --> 45:17.010
那当人家

45:17.010 --> 45:19.010
已经带了这个参数的时候呢

45:19.010 --> 45:21.010
你再去拼这两个啊

45:21.010 --> 45:22.010
参数的时候呢

45:22.010 --> 45:23.010
这儿就不能用什么呢

45:23.010 --> 45:24.010
用问号了

45:24.010 --> 45:25.010
你要用的是什么呢

45:25.010 --> 45:27.010
用的是按的这个符号

45:27.010 --> 45:30.010
只有当人家的这个地址

45:30.010 --> 45:31.010
没有任何参数的时候呢

45:31.010 --> 45:33.010
你给拼参数的时候呢

45:33.010 --> 45:34.010
前面

45:34.010 --> 45:35.010
要加上一个问号

45:35.010 --> 45:36.010
接下来

45:36.010 --> 45:38.010
才能够去使用按的符号

45:38.010 --> 45:39.010
所以这个地方

45:39.010 --> 45:40.010
要切记啊

45:40.010 --> 45:41.010
这是一个坑

45:41.010 --> 45:43.010
你要处理一下懂吗

45:43.010 --> 45:45.010
还是条件判断啊

45:45.010 --> 45:47.010
判断一下怎么去判断啊

45:47.010 --> 45:48.010
还是判断

45:48.010 --> 45:50.010
用户丢进来的这个Url

45:50.010 --> 45:51.010
然后呢index of

45:51.010 --> 45:52.010
off什么呢

45:52.010 --> 45:53.010
off这个问号

45:53.010 --> 45:54.010
看一下这个东西

45:54.010 --> 45:55.010
有没有那如果说

45:55.010 --> 45:56.010
他大于零

45:56.010 --> 45:57.010
表示啥意思啊

45:57.010 --> 45:59.580
这个

45:59.580 --> 46:04.140
这个条件成立

46:04.140 --> 46:06.140
说明啊

46:06.140 --> 46:10.140
用户传的Url里面有有什么

46:10.140 --> 46:11.140
有参数

46:11.140 --> 46:12.140
或者说啊

46:12.140 --> 46:17.250
就是带问号了

46:17.250 --> 46:18.250
问号了

46:18.250 --> 46:19.250
懂吗

46:19.250 --> 46:20.250
大于零嘛

46:20.250 --> 46:21.250
就证明现在

46:21.250 --> 46:23.250
我们能够找到了他

46:23.250 --> 46:24.250
好

46:24.250 --> 46:26.250
然后呢当这个条件成立之后呢

46:26.250 --> 46:28.250
我们应该怎么做呢啊

46:28.250 --> 46:31.250
script标签身上的src

46:31.250 --> 46:32.250
这个属性呢

46:32.250 --> 46:33.250
他应该等于什么呢

46:33.250 --> 46:35.250
等于用户传的这个Url

46:35.250 --> 46:37.250
然后呢去加加什么呢

46:37.250 --> 46:38.250
这个时候呢

46:38.250 --> 46:39.250
一定要注意了啊

46:39.250 --> 46:41.250
你可不能给问号

46:41.250 --> 46:42.250
要给什么呢

46:42.250 --> 46:43.250
按的符号

46:43.250 --> 46:44.250
按的什么呢

46:44.250 --> 46:45.250
callback

46:45.250 --> 46:46.250
等于什么呢

46:46.250 --> 46:48.250
等于我们拼的

46:48.250 --> 46:51.250
callback的名字就是他

46:51.250 --> 46:52.250
callback

46:52.250 --> 46:55.250
然后 else

46:55.250 --> 46:56.250
else的时候呢

46:56.250 --> 46:57.250
这时候呢

46:57.250 --> 46:58.250
是不是就证明

46:58.250 --> 47:00.250
现在用户传的参数里头

47:00.250 --> 47:01.250
他不是用户

47:01.250 --> 47:02.250
用户传的地址当中呢

47:02.250 --> 47:03.250
没有参数

47:03.250 --> 47:04.250
没有参数

47:04.250 --> 47:05.250
是不是说

47:05.250 --> 47:07.250
我们应该要问好了

47:07.250 --> 47:08.250
能理解吧

47:08.250 --> 47:09.250
好

47:09.250 --> 47:10.250
区别就在于这

47:10.250 --> 47:12.250
行

47:12.250 --> 47:13.250
有了之后呢

47:13.250 --> 47:14.250
那接下来

47:14.250 --> 47:15.250
你看我们的

47:15.250 --> 47:16.250
我们的这个东西呢

47:16.250 --> 47:17.250
已经拼完了

47:17.250 --> 47:18.250
拼完了之后呢

47:18.250 --> 47:19.250
接下来是不是

47:19.250 --> 47:21.250
document点点点的

47:21.250 --> 47:23.250
hi的abend child

47:23.250 --> 47:26.250
把咱们创建的script标签的

47:26.250 --> 47:28.250
给他传进来

47:28.250 --> 47:29.250
这样的话

47:29.250 --> 47:31.250
他就能够给我天到

47:31.250 --> 47:32.250
我们的页面

47:32.250 --> 47:33.250
hi的里边了

47:33.250 --> 47:34.250
好

47:34.250 --> 47:35.250
到这儿了

47:35.250 --> 47:36.250
我们就把整个

47:36.250 --> 47:38.250
jsonp的一个请求

47:38.250 --> 47:39.250
写完了

47:39.250 --> 47:40.250
写完之后呢

47:40.250 --> 47:41.250
接下来我们验证一下

47:41.250 --> 47:42.250
好不好

47:42.250 --> 47:43.250
咱们去验证呢

47:43.250 --> 47:44.250
在这个下边

47:44.250 --> 47:45.250
jp

47:45.250 --> 47:49.390
点点ajax

47:49.390 --> 47:50.390
好

47:50.390 --> 47:51.390
然后呢

47:51.390 --> 47:52.390
在这个里ULL

47:52.390 --> 47:53.390
这个地址呢

47:53.390 --> 47:54.390
还是他

47:54.390 --> 47:56.390
还是他

47:56.390 --> 47:57.390
放到这儿

47:57.390 --> 47:58.390
然后

47:58.390 --> 48:00.390
data type

48:00.390 --> 48:01.390
要给

48:01.390 --> 48:02.390
一个

48:02.390 --> 48:04.390
jsonp

48:04.390 --> 48:05.390
给完之后呢

48:05.390 --> 48:06.390
来我们刷新

48:06.390 --> 48:07.390
看一下控制台

48:07.390 --> 48:08.390
控制台

48:08.390 --> 48:09.390
这时候呢

48:09.390 --> 48:10.390
报错了

48:10.390 --> 48:12.390
报了一个错

48:12.390 --> 48:13.390
什么错呢

48:13.390 --> 48:15.390
cb9644

48:15.390 --> 48:16.390
is not defined

48:16.390 --> 48:18.390
就跟刚才的那个fn

48:18.390 --> 48:19.390
是不是一样呀

48:19.390 --> 48:20.390
好

48:20.390 --> 48:21.390
同样的一个错误

48:21.390 --> 48:22.390
同样一个错误

48:22.390 --> 48:23.390
是什么错误呢

48:23.390 --> 48:24.390
你看

48:24.390 --> 48:25.390
其实我们的这个请求呢

48:25.390 --> 48:26.390
你看这个请求的

48:26.390 --> 48:27.390
这个地址

48:27.390 --> 48:28.390
其实已经有了

48:28.390 --> 48:29.390
当然我们在这儿

48:29.390 --> 48:30.390
看到吗

48:30.390 --> 48:31.390
是不是

48:31.390 --> 48:32.390
这个请求的地址

48:32.390 --> 48:33.390
已经OK了

48:33.390 --> 48:34.390
是不是刚才

48:34.390 --> 48:36.390
咱们所拼的

48:36.390 --> 48:37.390
然后呢

48:37.390 --> 48:38.390
这是cb

48:38.390 --> 48:39.390
加上了一个什么的

48:39.390 --> 48:41.390
随机的这么一创书字

48:41.390 --> 48:42.390
每次的时候呢

48:42.390 --> 48:43.390
其实绝对是不一样的

48:43.390 --> 48:44.390
你看

48:44.390 --> 48:45.390
98421

48:45.390 --> 48:46.390
再来看

48:46.390 --> 48:47.390
刷新一下

48:47.390 --> 48:50.390
98825

48:50.390 --> 48:51.390
那

48:51.390 --> 48:53.390
报了一个跟fn

48:53.390 --> 48:55.390
not defined的

48:55.390 --> 48:56.390
错是一模一样的

48:56.390 --> 48:57.390
这什么原因呢

48:57.390 --> 48:58.390
就是说

48:58.390 --> 48:59.390
我们现在呢

48:59.390 --> 49:00.390
是调用了

49:00.390 --> 49:01.390
因为我们现在呢

49:01.390 --> 49:03.390
其实通过script标签加载进来

49:03.390 --> 49:04.390
那就相当于说

49:04.390 --> 49:05.390
它是调用了

49:05.390 --> 49:06.390
调用函数

49:06.390 --> 49:07.390
那这个函数呢

49:07.390 --> 49:08.390
压根就没有定义

49:08.390 --> 49:09.390
那这个怎么办呢

49:09.390 --> 49:10.390
怎么办

49:10.390 --> 49:11.390
哎

49:11.390 --> 49:12.390
我们在哪里呢

49:12.390 --> 49:14.390
在这个地方

49:14.390 --> 49:15.390
在这儿

49:15.390 --> 49:17.390
把

49:17.390 --> 49:19.390
生成的方法

49:19.390 --> 49:20.390
定义

49:20.390 --> 49:21.390
到

49:21.390 --> 49:23.390
温斗身上

49:23.390 --> 49:25.390
那不就证明现在呢

49:25.390 --> 49:27.390
温斗是一个群聚对象

49:27.390 --> 49:29.390
他身上定义了这个方法了

49:29.390 --> 49:30.390
那你再去调用的时候呢

49:30.390 --> 49:31.390
绝对是

49:31.390 --> 49:32.390
不会报错的话

49:32.390 --> 49:33.390
温斗

49:34.390 --> 49:35.390
什么呀

49:35.390 --> 49:36.390
生成的一个方法

49:36.390 --> 49:38.390
名字保持一致

49:38.390 --> 49:39.390
都是cobank

49:39.390 --> 49:40.390
等于什么呢

49:40.390 --> 49:43.390
obsense.success

49:43.390 --> 49:44.390
也就是说啊

49:44.390 --> 49:45.390
啊

49:45.390 --> 49:46.390
这个方法由谁来定啊

49:46.390 --> 49:47.390
用户来定

49:47.390 --> 49:48.390
用户在这儿呢

49:48.390 --> 49:50.390
给上了一个success

49:50.390 --> 49:51.390
那就证明

49:51.390 --> 49:53.390
现在你的方法定义了

49:53.390 --> 49:55.390
如果说用户没有给

49:55.390 --> 49:56.390
那就证明你的这个方法

49:56.390 --> 49:57.390
用户没有定义

49:57.390 --> 49:58.390
懂吧

49:58.390 --> 49:59.390
然后呢

49:59.390 --> 50:00.390
我们传上一个餐

50:00.390 --> 50:01.390
传餐之后呢

50:01.390 --> 50:02.390
在这儿呢

50:05.390 --> 50:06.390
来在

50:06.390 --> 50:07.390
这个页面

50:07.390 --> 50:08.390
我们刷新啊

50:08.390 --> 50:09.390
看一下空的台

50:09.390 --> 50:10.390
这时候呢

50:10.390 --> 50:11.390
有没有发现

50:11.390 --> 50:12.390
内容已经ok了

50:12.390 --> 50:13.390
啊

50:13.390 --> 50:14.390
当然他是在

50:14.390 --> 50:15.390
我看一下

50:15.390 --> 50:16.390
86行

50:16.390 --> 50:17.390
是这个

50:17.390 --> 50:18.390
这个

50:19.390 --> 50:20.390
没有问题吧

50:20.390 --> 50:21.390
好

50:21.390 --> 50:22.390
这样的话

50:22.390 --> 50:23.390
你看啊

50:23.390 --> 50:24.390
我们就已经把

50:24.390 --> 50:25.390
这块儿当中的

50:25.390 --> 50:26.390
这个jsonp

50:26.390 --> 50:27.390
它的一个大致的步骤呢

50:27.390 --> 50:28.390
跟大家呢

50:28.390 --> 50:29.390
去实现了一下

50:29.390 --> 50:30.390
好吧

50:30.390 --> 50:31.390
实现了一下

50:31.390 --> 50:32.390
大家这里头

50:32.390 --> 50:33.390
有很多的一些细节

50:33.390 --> 50:34.390
跟人家不一样

50:34.390 --> 50:35.390
在这儿呢

50:35.390 --> 50:36.390
其实没有关系

50:36.390 --> 50:37.390
大家只需要去记住

50:37.390 --> 50:38.390
这个原理就行了

50:38.390 --> 50:39.390
行吧

50:39.390 --> 50:40.390
还有最后一个问题

50:40.390 --> 50:41.390
是什么呢

50:41.390 --> 50:42.390
就是我们在一开始说过

50:42.390 --> 50:43.390
啊

50:43.390 --> 50:44.390
json with padding

50:44.390 --> 50:45.390
这个

50:45.390 --> 50:46.390
json跟pading

50:46.390 --> 50:47.390
怎么关联在一起了

50:47.390 --> 50:48.390
嗯

50:48.390 --> 50:49.390
是这样的

50:49.390 --> 50:50.390
这个pading呢

50:50.390 --> 50:51.390
意思啊

50:51.390 --> 50:52.390
是这

50:52.390 --> 50:53.390
来我们看一下

50:53.390 --> 50:54.390
network

50:54.390 --> 50:55.390
当中看这儿啊

50:55.390 --> 50:57.390
他的一个response

50:57.390 --> 50:59.390
其实就相当于说啊

50:59.390 --> 51:00.390
你看

51:00.390 --> 51:02.390
pading不是一个那边具吗

51:02.390 --> 51:04.390
那就把数据

51:04.390 --> 51:06.390
当作什么的参数丢进来

51:06.390 --> 51:07.390
然后呢

51:07.390 --> 51:08.390
这是一个什么的

51:08.390 --> 51:09.390
pading

51:09.390 --> 51:10.390
然后呢

51:10.390 --> 51:11.390
这是什么的

51:11.390 --> 51:12.390
这是那个json

51:12.390 --> 51:13.390
其实也就是说

51:13.390 --> 51:14.390
json的数据呢

51:14.390 --> 51:15.390
在这儿

51:15.390 --> 51:16.390
当作参数

51:16.390 --> 51:18.390
其实就好比说是吧

51:18.390 --> 51:20.390
就是一个pading啊

51:20.390 --> 51:21.390
这其实就是一个形象的

51:21.390 --> 51:22.390
一个比喻啊

51:22.390 --> 51:23.390
嗯

51:23.390 --> 51:25.390
json with padding

51:25.390 --> 51:27.390
这个呢就叫jsonp啊

51:27.390 --> 51:28.390
好

51:28.390 --> 51:30.390
那关于这个jsonp的内容呢

51:30.390 --> 51:31.390
咱们就说到这里

51:31.390 --> 51:32.390
啊

51:32.390 --> 51:34.390
这节课呢咱们就说到这儿

