WEBVTT

00:00.300 --> 00:05.000
继续往下说 这节课咱们要学习的是Object这个对象

00:05.000 --> 00:09.500
Object这个对象 它其实也是写了很多的一些方法

00:09.500 --> 00:12.900
这节课可能也是需要有一些时间了

00:12.900 --> 00:16.800
挨个来说 首先第一个就是Essence这个方法

00:16.800 --> 00:20.700
这个方法其实在原生的Object身上也是有的

00:20.700 --> 00:24.100
它是用来干嘛呢 是用来合并对象的

00:24.100 --> 00:27.700
我们的Object身上就具备这个方法

00:27.700 --> 00:34.100
然后以及在这In 然后以及In,Wace 还有这个Wace

00:34.100 --> 00:37.100
他们其实都是一样的 咱们来解释一下

00:37.100 --> 00:40.700
这个In在这我们还能够看到 是不是

00:40.700 --> 00:43.500
In跟Extend是不一样的

00:43.500 --> 00:46.100
这两个它们的方法都是一样的

00:46.100 --> 00:49.500
只不过有两个名字 是一个双胞胎知道吧

00:49.500 --> 00:51.600
那这个方法它的一个作用是什么呢

00:51.600 --> 00:55.300
Essence这个方法它合并的对象

00:55.300 --> 00:59.200
它是不包括 假设说这个对象它有继承

00:59.200 --> 01:02.000
它可能继承原形身上的属性 是吧

01:02.000 --> 01:04.700
那这个东西它是不包括的

01:04.700 --> 01:07.800
而这个Essence它是能够合并

01:07.800 --> 01:10.300
能够把这个继承过来身上的属性

01:10.300 --> 01:13.000
也给它合并过来

01:13.000 --> 01:16.300
所以这个就是他们的一个区别

01:16.300 --> 01:18.900
然后接下来它是不是加了一个Wace

01:18.900 --> 01:20.200
这个Wace这个方法

01:20.200 --> 01:23.900
你看这是不是也有一个ExtendWace这个方法

01:23.900 --> 01:26.200
那这个加了一个Wace

01:26.200 --> 01:29.100
其实跟我们前面所说的是一样的

01:29.100 --> 01:31.200
它是接收了一个什么的

01:31.200 --> 01:33.200
比较器的这么一个方法

01:33.200 --> 01:35.700
然后拿这个方法去进行一个处理

01:35.700 --> 01:37.900
这个咱们就不再去说了

01:37.900 --> 01:42.000
然后另外还有另外一个EssenceWace这个方法

01:42.000 --> 01:43.800
然后这个方法是啥呢

01:43.800 --> 01:48.100
这个方法它其实也是接收了一个比较器

01:48.100 --> 01:50.200
看到吗 它后边多了一个参数

01:50.200 --> 01:52.700
那这个参数就是一个函数

01:52.700 --> 01:53.700
懂吧 好

01:53.700 --> 01:56.900
所以这几个它其实都是用来合并的

01:56.900 --> 02:00.000
区别就在于说这个合并到底是要合并

02:00.000 --> 02:03.800
要不要合并我们继承过来的属性

02:03.800 --> 02:06.100
好 这些咱们知道就行了

02:06.100 --> 02:08.500
原生的方法身上就有

02:09.700 --> 02:10.700
那往下说

02:10.700 --> 02:12.500
我们要说第一个就是一个Eight

02:12.500 --> 02:14.300
好 Eight咱回到这

02:16.800 --> 02:18.700
Eight这个方法它是干嘛

02:18.700 --> 02:22.300
它其实是根据我们传入的属性

02:22.300 --> 02:24.100
去创建一个数组

02:24.100 --> 02:26.200
来 在这咱写一个

02:26.200 --> 02:28.500
我们用一下人家的这个变量

02:28.500 --> 02:31.000
Object这个变量 复制一下放到这

02:32.300 --> 02:34.800
然后在这我们直接去Consologue

02:34.800 --> 02:37.500
Log什么 点Eight

02:37.500 --> 02:40.300
Eight然后这里头需要去接收一个参数

02:40.300 --> 02:42.700
然后你第一个参数就是这个

02:42.700 --> 02:44.300
你要去合并

02:44.300 --> 02:45.900
不是 你要去生成

02:45.900 --> 02:47.900
你知道吧 你要根据谁去生成

02:47.900 --> 02:49.500
我要根据这个对象去生成

02:49.500 --> 02:50.700
生成一个数组 是吧

02:50.700 --> 02:51.800
Object生成

02:51.800 --> 02:53.900
然后接下来 第二个参数

02:53.900 --> 02:55.400
第二个参数就是

02:55.400 --> 02:56.900
你要生成的那个数组

02:56.900 --> 02:58.400
它长什么样子

02:58.400 --> 02:59.200
那长什么样子

02:59.200 --> 03:00.700
我们先给上一个数组

03:00.700 --> 03:02.100
然后这里头 数组里头

03:02.100 --> 03:03.800
肯定是要放数据的

03:03.800 --> 03:05.700
这个数据咱们怎么去取

03:05.700 --> 03:07.700
这里头我们给上什么

03:07.700 --> 03:09.500
这个对象 它的一个路径

03:09.500 --> 03:11.000
这个路径指的是啥

03:11.000 --> 03:12.800
指的是K的这个路径

03:12.800 --> 03:13.500
知道吧

03:13.500 --> 03:14.700
也就是说现在

03:14.700 --> 03:16.500
比如说我现在要找到这个三

03:16.500 --> 03:19.000
我问你 怎么能找到这个三

03:19.000 --> 03:20.900
是不是应该先A

03:21.000 --> 03:23.000
然后它是一个什么的数组

03:23.000 --> 03:24.800
那数组 你要取哪一个

03:24.800 --> 03:27.000
第零个 是不是取到这个了

03:28.300 --> 03:29.000
取到这个

03:29.000 --> 03:30.600
这是第零个 是吧

03:30.600 --> 03:31.400
取到这个之后

03:31.400 --> 03:32.200
它是一个对象

03:32.200 --> 03:33.800
那还要找到这个B 是吧

03:33.800 --> 03:34.800
点B

03:34.800 --> 03:36.000
然后点B之后

03:36.000 --> 03:36.900
还是一个对象

03:36.900 --> 03:38.400
那是不是再接着点

03:38.400 --> 03:39.600
点谁 点C

03:39.600 --> 03:40.100
这样的话

03:40.100 --> 03:41.200
我就找到什么

03:41.200 --> 03:42.600
找到了这个三了

03:42.600 --> 03:45.300
那把三作为它的第零个数据

03:45.300 --> 03:46.700
接着第一个数据

03:46.700 --> 03:48.400
怎么办 是不是

03:48.400 --> 03:49.500
一样的 注意

03:49.500 --> 03:51.600
这你可不能给辨量

03:51.600 --> 03:52.300
它是什么

03:52.300 --> 03:53.800
它是一个字幅串 知道吗

03:53.800 --> 03:55.300
那我就找到这个A

03:55.300 --> 03:57.700
然后取它的第一个数据

03:57.700 --> 03:58.700
是不是就可以了

03:58.700 --> 03:59.300
好

03:59.300 --> 04:00.700
然后隔着画一下

04:00.700 --> 04:01.700
来 打开页面

04:01.700 --> 04:04.000
我们怀着激动的心情走

04:04.000 --> 04:05.200
哎呀

04:05.200 --> 04:06.200
好尴尬 是吧

04:07.800 --> 04:09.000
console log

04:10.000 --> 04:11.100
再来 伤心

04:11.100 --> 04:13.400
好 这时候出结果了

04:13.400 --> 04:14.500
这个结果是啥

04:14.500 --> 04:15.700
是一个三和四

04:17.200 --> 04:18.300
就是咱们想要的

04:18.300 --> 04:20.200
这个就是ite它的一个作用

04:20.200 --> 04:22.400
那么根据我们对象

04:22.400 --> 04:23.100
然后丢进来

04:23.100 --> 04:23.900
丢进来完之后

04:23.900 --> 04:26.300
你要找这个对象当中的哪些数据

04:26.300 --> 04:28.300
然后直接把它放到这个扩号当中

04:28.300 --> 04:29.900
中扩号当中就OK了

04:29.900 --> 04:30.200
好

04:30.200 --> 04:32.100
然后接着往下来

04:32.100 --> 04:33.000
往下来

04:33.000 --> 04:35.800
我们再回到这个API当中

04:35.800 --> 04:37.500
然后是create这个方法

04:39.100 --> 04:40.600
create这个方法是啥呢

04:40.600 --> 04:42.700
它是用来创建一个对象的

04:42.700 --> 04:45.900
这个跟我们原生object身上的create

04:45.900 --> 04:47.600
方法是一模一样的

04:47.600 --> 04:49.800
你们去了解一下那个就ok了

04:49.800 --> 04:52.000
再往下是defaults

04:52.000 --> 04:54.900
这个defaults它也是用来合并对象的

04:56.300 --> 05:00.100
它跟我们上面的assent对象

05:00.100 --> 05:02.100
assent方法其实是一样的

05:02.100 --> 05:04.000
但是它是有区别的

05:04.000 --> 05:05.000
区别在于什么

05:05.000 --> 05:05.900
区别就在于

05:05.900 --> 05:08.700
当他们遇到同名属性的时候

05:08.700 --> 05:10.200
他们怎么去处理

05:10.200 --> 05:11.100
来 这个就是

05:11.100 --> 05:16.520
它俩的一个区别defaults

05:16.520 --> 05:17.420
log一下

05:17.420 --> 05:19.920
第一个就是我先调一下defaults

05:19.920 --> 05:21.120
然后我们传 传参

05:21.120 --> 05:22.920
那么你传的这个参

05:22.920 --> 05:24.720
就是你要合并的这些对象

05:24.720 --> 05:25.920
比如说A为1

05:25.920 --> 05:26.920
这是第一个

05:26.920 --> 05:28.720
然后再来上第2个

05:28.720 --> 05:30.720
就是一个B为2

05:31.520 --> 05:33.920
B为2

05:33.920 --> 05:35.120
这是第2个

05:35.120 --> 05:36.820
然后第3个是不是

05:36.820 --> 05:38.520
给上一个C为3

05:38.520 --> 05:39.120
好

05:39.120 --> 05:40.820
这是我要合并的3个

05:42.420 --> 05:43.320
3个对象

05:43.320 --> 05:44.520
看一下这个结果

05:44.520 --> 05:46.220
我们来看 刷新一下

05:46.220 --> 05:48.020
现在是不是A1 B2 C3

05:48.120 --> 05:50.220
没有相同名的错了

05:50.220 --> 05:51.820
这咱要给上一个3

05:51.820 --> 05:52.920
再来看 刷新

05:52.920 --> 05:54.720
这个时候是不是A1 B2

05:54.720 --> 05:55.920
我先把它复制过来

05:57.520 --> 05:58.420
放到这

05:58.420 --> 05:59.020
你看

05:59.020 --> 06:02.120
把他们三对象是不是合在了一起

06:02.120 --> 06:04.320
遇到同名的属性怎么办

06:04.320 --> 06:06.720
拿前面覆盖后面的

06:06.720 --> 06:08.820
这个就是defaults它的一个作用

06:08.820 --> 06:10.620
然后我们前面说这个assin

06:11.720 --> 06:13.520
它也能够用来合并对象

06:13.520 --> 06:14.520
然后我们看一下

06:14.520 --> 06:15.920
它合并之后的一个结果

06:15.920 --> 06:19.300
刷新一下

06:19.300 --> 06:20.800
assin

06:21.600 --> 06:22.600
再来刷新

06:22.600 --> 06:23.100
好

06:23.100 --> 06:25.100
看一下它的一个结果

06:25.100 --> 06:27.900
跟我们的defaults完全不一样

06:27.900 --> 06:29.900
它合并的同名属性

06:29.900 --> 06:32.300
是拿后边去覆盖前面

06:32.300 --> 06:34.900
而这个是拿前面去覆盖后面

06:34.900 --> 06:37.700
这个就是它俩的一个区别defaults

06:37.700 --> 06:38.800
好 再往下吧

06:38.800 --> 06:40.700
往下是一个defaults

06:40.700 --> 06:41.300
defaults

06:41.300 --> 06:42.500
defaults deep

06:42.500 --> 06:44.300
这个加了一个deep

06:44.300 --> 06:47.700
是不是说可以往里头扎猛子

06:47.700 --> 06:49.400
咱们上节可以有说过

06:49.400 --> 06:50.800
它其实就是可以抵规

06:52.100 --> 06:52.500
好

06:52.500 --> 06:54.100
这个咱们就不再去说了

06:54.100 --> 06:56.700
再往下就是to pairs

06:56.700 --> 06:57.500
这

06:57.500 --> 06:59.700
咱们说一下最后

06:59.700 --> 07:01.000
to pairs

07:01.000 --> 07:02.700
to pairs这个是啥

07:04.000 --> 07:07.400
它是把我们的对象当中

07:07.400 --> 07:09.300
可美举的属性

07:09.300 --> 07:11.700
给它创建成一个数组

07:11.700 --> 07:12.500
知道吧

07:12.500 --> 07:15.700
然后这个跟我们的to pairs

07:15.700 --> 07:17.900
还有一个intress是一样的

07:17.900 --> 07:18.900
intress

07:18.900 --> 07:20.200
intress

07:20.200 --> 07:21.300
在这看到没有

07:21.300 --> 07:21.600
好

07:21.600 --> 07:22.200
to pairs

07:22.200 --> 07:23.600
intress是一样的

07:23.600 --> 07:25.500
它俩是双胞胎

07:25.500 --> 07:26.600
然后他们的一个作用

07:26.600 --> 07:30.100
就说把对象当中的可美举的属性

07:30.100 --> 07:31.400
创建成数组

07:31.400 --> 07:32.000
这个方法

07:32.000 --> 07:34.500
跟我们的objects身上的intress

07:34.500 --> 07:35.900
是一模一样的

07:35.900 --> 07:37.100
然后加了一个int

07:37.100 --> 07:38.600
咱们都懂啥意思

07:38.600 --> 07:40.600
是不是可以往里头进

07:43.000 --> 07:44.300
deep是往里头进

07:44.300 --> 07:45.200
加int是啥

07:45.300 --> 07:47.400
就是说它能够在美举出

07:47.400 --> 07:49.800
继承过来的那些属性

07:49.800 --> 07:50.300
好

07:50.300 --> 07:51.000
deep跟int

07:51.000 --> 07:52.400
它的一个区别

07:52.400 --> 07:53.200
intress

07:55.200 --> 07:56.300
然后这两个东西

07:56.300 --> 07:58.200
咱们已经刚才在这已经说过了

07:58.200 --> 07:58.800
那接下来

07:58.800 --> 08:00.400
就是翻的k了

08:00.400 --> 08:02.600
这个翻的k跟我们前面所讲的

08:02.600 --> 08:04.000
那个fan的那个方法

08:04.000 --> 08:05.200
其实是一样的

08:05.200 --> 08:06.100
都是用来找

08:06.100 --> 08:06.400
是不是

08:06.400 --> 08:08.400
但是返回的结果不一样

08:08.400 --> 08:10.500
我们再用一下人家的变量

08:10.500 --> 08:12.000
users

08:12.000 --> 08:14.710
复制一下

08:14.710 --> 08:15.210
好

08:15.310 --> 08:19.410
然后直接concelogue

08:19.410 --> 08:20.210
然后这个log

08:20.210 --> 08:22.210
我们直接去调

08:22.210 --> 08:24.410
翻的k

08:24.410 --> 08:25.310
ky

08:25.310 --> 08:26.810
ky是大写

08:26.810 --> 08:28.010
翻的k这个方法

08:28.010 --> 08:28.910
然后这个方法当中

08:28.910 --> 08:29.610
我们传

08:29.610 --> 08:31.710
第一个你要去找哪个对象

08:31.710 --> 08:33.610
我们要去找的是users

08:33.610 --> 08:34.310
这个对象

08:34.310 --> 08:35.610
然后你要找

08:35.610 --> 08:36.910
找哪一条属性

08:36.910 --> 08:38.610
我们给上一个h

08:39.910 --> 08:41.910
然后h的结果就是一个e

08:41.910 --> 08:42.210
好

08:42.210 --> 08:43.610
这是第一个属性

08:43.610 --> 08:46.980
然后第二个是active

08:46.980 --> 08:48.180
它的值是一个什么的

08:48.480 --> 08:49.980
这次一定要写对了

08:49.980 --> 08:51.480
跟人家是一一对应的

08:51.480 --> 08:51.880
行

08:51.880 --> 08:53.580
那也有说在这个对象当中

08:53.580 --> 08:55.280
我们去找这条属性

08:55.280 --> 08:56.780
看看谁有

08:56.780 --> 08:57.380
是不是

08:57.380 --> 08:59.080
它返回的结果是啥

08:59.080 --> 09:00.280
返回的是一个k

09:00.280 --> 09:00.880
知道吧

09:00.880 --> 09:02.680
而我们之前用的fan的index

09:02.680 --> 09:03.780
返回的是啥

09:03.780 --> 09:06.080
返回的是一个锁引值

09:06.080 --> 09:08.580
这返回的就是一个k

09:08.580 --> 09:09.680
找到的是谁

09:09.680 --> 09:10.380
是他

09:10.380 --> 09:12.680
所以就把他所对应的这个k

09:12.680 --> 09:14.180
给咱们返回出来

09:14.180 --> 09:16.580
这个就是fan的k

09:16.580 --> 09:18.780
然后跟fan的k

09:18.780 --> 09:21.680
类似的有一个fan的lasterk

09:21.680 --> 09:23.180
这个是啥

09:23.180 --> 09:23.980
是从右

09:23.980 --> 09:25.180
或者说从到的来

09:25.180 --> 09:26.180
那个是正的来

09:26.180 --> 09:26.880
从左往右

09:26.880 --> 09:28.980
这个是从右往左

09:28.980 --> 09:30.180
然后再往下

09:31.080 --> 09:32.280
就是这个foing了

09:32.280 --> 09:32.980
那这个foing

09:32.980 --> 09:35.180
其实大家是非常的熟悉的

09:35.180 --> 09:36.680
它就是一个便利的一个方法

09:36.680 --> 09:37.080
是不是

09:37.080 --> 09:39.480
这个方法用来便利对象

09:39.480 --> 09:40.680
那foing这个东西

09:40.680 --> 09:41.580
就是他在这

09:41.580 --> 09:43.180
帮咱们去改造了一下

09:43.180 --> 09:43.980
改造成什么

09:43.980 --> 09:45.580
我们原来其实是一个fo

09:45.580 --> 09:48.580
循环的foing循环的那种语法格式

09:48.580 --> 09:49.380
但是在这

09:49.380 --> 09:50.680
他变成了一个方法

09:50.680 --> 09:51.980
就是一个faction

09:51.980 --> 09:53.680
然后这个方法跟谁类似

09:53.680 --> 09:56.480
就跟我们的数组当中的什么

09:59.180 --> 09:59.980
mip

09:59.980 --> 10:00.780
还有那个

10:03.580 --> 10:04.380
一下到嘴边

10:04.380 --> 10:04.980
就是

10:06.580 --> 10:07.580
mip filter

10:07.580 --> 10:08.580
还有那个

10:10.380 --> 10:11.680
foage

10:11.680 --> 10:13.880
好一下想不起来了

10:13.880 --> 10:14.480
好

10:14.480 --> 10:15.480
跟那个是一样的

10:15.580 --> 10:16.980
他们第二个参数是不是

10:16.980 --> 10:17.880
也是一个faction

10:17.880 --> 10:19.380
faction当中接收三个参数

10:19.380 --> 10:19.680
是不是

10:19.680 --> 10:20.880
他接收两个

10:20.880 --> 10:22.280
其实都是一个意思

10:22.280 --> 10:22.780
foing

10:22.780 --> 10:23.880
跟我们那个

10:23.880 --> 10:25.480
foing的那个语法

10:25.480 --> 10:25.880
不一样

10:25.880 --> 10:27.680
但是他们的作用是一样的

10:27.680 --> 10:28.180
foing

10:28.180 --> 10:28.580
好

10:28.580 --> 10:29.680
然后foing之后

10:29.680 --> 10:31.880
接着就是一个foing right

10:31.880 --> 10:32.680
foing right

10:32.680 --> 10:33.880
就是倒着走

10:33.880 --> 10:35.380
人家是正着走

10:35.380 --> 10:35.980
好吧

10:35.980 --> 10:36.580
完了之后

10:36.580 --> 10:38.380
接着就是一个foing

10:38.380 --> 10:39.480
那这个foing

10:39.480 --> 10:40.880
跟foing是一样的

10:40.880 --> 10:42.380
但是foing

10:42.380 --> 10:43.280
你看加了一个in

10:43.280 --> 10:43.780
是不是

10:43.780 --> 10:45.080
我们前面已经说过

10:45.080 --> 10:45.580
这个in

10:45.580 --> 10:46.780
其实是不是就是

10:46.780 --> 10:48.580
他可以能够获取到

10:49.180 --> 10:50.580
继承过来的属性

10:50.580 --> 10:52.180
所以说foing

10:52.180 --> 10:54.280
他不光能够便利自身的属性

10:54.280 --> 10:55.280
还能够便利

10:55.280 --> 10:56.880
继承过来的属性

10:56.880 --> 10:58.080
这个foing

10:58.080 --> 10:58.780
很明显吗

10:58.780 --> 11:01.180
他不是只能够便利自己

11:01.180 --> 11:02.780
自身的属性

11:02.780 --> 11:04.080
继承过来的属性

11:04.080 --> 11:04.780
不好意思

11:04.780 --> 11:05.980
他便利不到

11:05.980 --> 11:07.380
在往下

11:07.380 --> 11:09.180
就是一个foing right

11:09.180 --> 11:09.680
一样的

11:09.680 --> 11:10.180
从

11:10.680 --> 11:11.380
倒着来

11:11.380 --> 11:12.480
那个是正着来

11:12.480 --> 11:13.480
这是倒着来

11:15.080 --> 11:15.480
好

11:15.480 --> 11:16.780
往下factions

11:16.780 --> 11:17.780
这个没啥用

11:17.780 --> 11:18.480
咱不说

11:18.480 --> 11:19.980
然后这个guide

11:19.980 --> 11:20.880
那这个guide

11:20.880 --> 11:22.580
它是用来获取属性的

11:22.580 --> 11:24.280
获取属性的值

11:24.280 --> 11:25.480
获取属性的值

11:25.480 --> 11:26.780
不是获取属性

11:26.780 --> 11:27.880
那这个东西

11:27.880 --> 11:28.580
跟谁一样

11:28.580 --> 11:29.480
跟我们的原生

11:29.480 --> 11:32.680
object身上有一个different property

11:32.680 --> 11:35.380
那个是属性描述对象

11:35.380 --> 11:37.080
属性描述对象

11:37.080 --> 11:38.980
有一个方法叫guide

11:38.980 --> 11:39.880
那这个guide

11:39.880 --> 11:43.680
跟guide object.different property

11:43.680 --> 11:44.780
那个一样

11:45.780 --> 11:48.080
是用来获取属性

11:48.080 --> 11:48.780
某一条属性

11:48.780 --> 11:49.680
它的一个值

11:49.680 --> 11:51.880
然后跟guide

11:51.880 --> 11:53.780
一堆的一个东西

11:53.780 --> 11:55.180
就是还有一个叫什么

11:55.180 --> 11:55.980
叫side

11:55.980 --> 11:56.680
side

11:56.680 --> 11:58.280
那那个是获取

11:58.280 --> 11:58.980
这个是啥

11:58.980 --> 12:00.080
这个是side

12:00.080 --> 12:01.180
就是一个设置

12:01.180 --> 12:01.780
懂吧

12:01.780 --> 12:03.480
它也是跟我们的

12:03.480 --> 12:05.580
object身上的different property

12:05.580 --> 12:07.280
那个属性描述对象上的

12:07.280 --> 12:08.380
side方法

12:08.380 --> 12:10.080
是一模一样的

12:10.080 --> 12:10.580
好

12:10.580 --> 12:11.480
跟side

12:11.480 --> 12:12.280
还有一个

12:12.280 --> 12:12.880
一起的

12:12.980 --> 12:14.580
就是一个side width

12:14.580 --> 12:15.380
这么一个方法

12:16.580 --> 12:17.180
这个方法

12:17.680 --> 12:18.180
解释一下

12:20.780 --> 12:23.880
它肯定也是用来去设置这个属性的

12:23.880 --> 12:25.480
那不过的就是这个方法

12:25.480 --> 12:26.480
设置属性的时候

12:26.480 --> 12:28.380
它可以再接收一个参数

12:28.380 --> 12:28.980
什么参数

12:28.980 --> 12:29.880
我们来看

12:29.880 --> 12:31.380
console.log

12:31.380 --> 12:31.980
log什么

12:31.980 --> 12:32.580
假设

12:32.580 --> 12:33.580
现在我去调

12:33.580 --> 12:35.080
调一下side width这个方法

12:35.080 --> 12:36.080
然后这个方法当中

12:36.080 --> 12:37.080
传递一个参

12:37.080 --> 12:38.580
就是给上一个空对象

12:38.580 --> 12:39.380
那其实也就说

12:39.380 --> 12:40.680
现在我就设置

12:40.680 --> 12:41.780
设置一个空对象

12:41.780 --> 12:43.380
当然如果说你去设置优刺

12:43.380 --> 12:43.780
可以吗

12:43.780 --> 12:44.580
当然可以

12:44.580 --> 12:46.280
我们在这为了避免混淆

12:46.280 --> 12:47.880
就给上一个空对象

12:47.880 --> 12:48.180
好

12:48.180 --> 12:48.880
然后再来

12:48.880 --> 12:49.680
第二个参数

12:49.680 --> 12:51.980
就是你要设置的对象当中的

12:51.980 --> 12:52.780
这条属性

12:52.780 --> 12:53.980
当然我们现在在这

12:53.980 --> 12:54.980
是不是肯定没有

12:54.980 --> 12:56.780
你当然也可以给它添

12:56.780 --> 12:58.380
我在这就懒不添了

12:58.380 --> 13:00.280
跟人官方那个例子一样

13:00.280 --> 13:00.780
怎么去给

13:00.780 --> 13:01.680
我们直接在这

13:01.680 --> 13:03.180
这是0

13:03.180 --> 13:04.380
然后这是一个1

13:06.980 --> 13:07.680
那就表示

13:07.680 --> 13:09.280
现在在这个对象当中

13:09.280 --> 13:10.580
有这么一条属性

13:10.580 --> 13:11.380
这是K

13:11.380 --> 13:11.880
知道吧

13:11.880 --> 13:12.780
这是一个K

13:12.780 --> 13:13.280
好

13:13.280 --> 13:14.580
然后接下来

13:14.580 --> 13:16.880
我把属性给它设置成一个值

13:16.880 --> 13:17.780
这个值叫什么

13:17.780 --> 13:19.380
叫A就行了

13:19.380 --> 13:20.380
完了之后

13:20.380 --> 13:22.280
它还可以再接收一个参数

13:22.280 --> 13:23.480
这个参数是啥呢

13:23.480 --> 13:24.780
就是最后

13:24.780 --> 13:26.280
你设置完是一个对象

13:26.280 --> 13:26.680
是不是

13:26.680 --> 13:27.180
那OK

13:27.180 --> 13:29.380
你就给我返回出来一个对象

13:29.380 --> 13:30.180
就行了

13:30.180 --> 13:31.880
那我们先来看

13:31.880 --> 13:32.580
来在这

13:32.580 --> 13:34.280
我们刷新走着点开

13:34.280 --> 13:34.880
看到吗

13:34.880 --> 13:35.680
是不是0

13:35.680 --> 13:37.180
然后继续往里头进

13:37.180 --> 13:38.380
0里边有一个1

13:38.380 --> 13:40.380
1里头的值是叫什么

13:40.380 --> 13:41.880
是一个A

13:41.880 --> 13:42.380
好

13:42.380 --> 13:43.380
这是Object

13:43.380 --> 13:45.880
当然你还可以换成Rate

13:45.880 --> 13:47.380
这个就是它的一个区别

13:47.380 --> 13:48.380
再来看刷新

13:48.380 --> 13:49.280
当我们进去之后

13:49.280 --> 13:50.580
你会发现这个0对应

13:50.580 --> 13:52.380
是不是就是一个数组

13:52.380 --> 13:53.580
看到吗

13:53.580 --> 13:55.480
当然它低零个数据是一个AntiFan的

13:55.480 --> 13:57.180
这个到无所谓了

13:57.180 --> 13:58.380
所以这个SiteWiz

13:58.380 --> 13:59.780
就是有这么一点

13:59.780 --> 14:00.680
它可以决定

14:00.680 --> 14:02.180
现在你设置完了

14:02.180 --> 14:03.580
这个对象到底最后

14:03.580 --> 14:04.380
它是一个什么

14:04.380 --> 14:07.380
是对象还是一个数组

14:07.380 --> 14:10.240
SiteWiz

14:10.240 --> 14:14.310
往下继续来说

14:14.310 --> 14:15.410
然后这个to pairs

14:15.410 --> 14:16.410
咱们已经说过

14:16.410 --> 14:17.210
to pairs

14:17.210 --> 14:19.710
to pairs是在这

14:19.710 --> 14:21.310
不是

14:21.310 --> 14:22.610
这是intress

14:22.610 --> 14:23.610
to pairs没有说

14:23.610 --> 14:25.310
咱们一会最后再去说

14:25.310 --> 14:26.810
然后咱们说一下

14:26.810 --> 14:30.310
hice

14:30.310 --> 14:30.910
不对

14:30.910 --> 14:32.610
hice不在这

14:32.610 --> 14:33.410
hice在这

14:33.410 --> 14:34.310
在这好

14:34.310 --> 14:35.810
刚才咱们点错了

14:35.810 --> 14:36.910
hice在这

14:36.910 --> 14:39.810
那这个hice它是什么作用

14:39.810 --> 14:41.610
它的作用就是用来检查

14:41.610 --> 14:45.410
这个属性是否为对象的直接属性

14:45.410 --> 14:47.210
对象的属性可以去继承

14:47.210 --> 14:48.610
也可以是自身的

14:48.610 --> 14:50.010
所以通过这个方法

14:50.010 --> 14:51.410
就能够去检测一下

14:51.410 --> 14:53.810
属性到底是不是自己亲生的

14:53.810 --> 14:55.610
那这个其实跟我们的原生

14:55.610 --> 14:56.610
object的身上

14:56.610 --> 14:59.110
有一个方法叫hice on property

14:59.110 --> 15:00.610
那个是一模一样的

15:00.610 --> 15:01.310
当然

15:01.310 --> 15:02.010
注意

15:02.010 --> 15:02.710
那个方法

15:02.710 --> 15:03.910
它返回两个数据

15:03.910 --> 15:04.810
要么就是true

15:04.810 --> 15:05.810
要么就是false

15:05.810 --> 15:07.010
那这个hice

15:07.010 --> 15:10.010
它的作用是跟hice on property

15:10.010 --> 15:12.710
返回的值为true的时候

15:12.710 --> 15:15.310
表现是一样的

15:15.310 --> 15:17.210
然后这有一个hice in

15:17.210 --> 15:18.910
hice in才是真正的

15:18.910 --> 15:20.910
跟我们的hice on property

15:20.910 --> 15:22.510
那个方法是一模一样的

15:22.510 --> 15:23.910
它可以返回两个值

15:23.910 --> 15:25.410
那么这个东西

15:25.410 --> 15:27.410
它直接就是检查

15:27.410 --> 15:28.210
什么你这个属性

15:28.210 --> 15:30.610
到底是不是我直接的属性

15:30.610 --> 15:31.110
懂吗

15:31.110 --> 15:33.110
它没有两个选择

15:33.110 --> 15:34.010
它只有一个选择

15:34.010 --> 15:35.410
就是是或者说不是

15:37.810 --> 15:38.210
好

15:38.210 --> 15:40.610
然后hice是跟object身上

15:40.610 --> 15:41.510
hice on property

15:41.510 --> 15:43.110
那个方法是一模一样的

15:43.110 --> 15:44.110
来继续往下

15:44.110 --> 15:45.110
咱们就不说了

15:45.110 --> 15:47.110
然后说一下invert

15:47.110 --> 15:48.510
那invert

15:48.510 --> 15:49.110
这个

15:49.110 --> 15:51.710
它是把对象的k跟value

15:51.710 --> 15:53.310
进行一个点导

15:53.310 --> 15:55.010
然后后边的属性

15:55.010 --> 15:56.410
会覆盖前面的属性

15:56.410 --> 15:58.310
假设有相同的

15:58.310 --> 15:59.010
点导完之后

15:59.010 --> 16:00.410
出现相同的了

16:00.410 --> 16:01.110
invert

16:02.810 --> 16:05.410
我声明一个object

16:06.310 --> 16:07.110
然后这个东西

16:07.110 --> 16:09.210
等于A为1

16:09.210 --> 16:10.010
这是一条

16:10.010 --> 16:13.310
然后再来一个B为2

16:13.310 --> 16:14.510
这是第二条

16:14.510 --> 16:16.710
然后再来一个C为1

16:16.710 --> 16:17.710
这是第三条

16:17.710 --> 16:18.310
好

16:18.310 --> 16:19.210
利用这个对象

16:19.210 --> 16:22.980
我们console.log

16:22.980 --> 16:26.520
有错了

16:26.520 --> 16:27.920
console.log

16:27.920 --> 16:29.120
log什么呢

16:29.120 --> 16:30.920
log这个调这个方法

16:32.020 --> 16:34.920
然后把ovjack的传进来

16:34.920 --> 16:36.120
我们看一下结果

16:36.120 --> 16:36.920
在这咱们来看

16:36.920 --> 16:38.320
而刷新走着

16:38.320 --> 16:40.720
变成这个结果了

16:40.720 --> 16:42.320
来我们说一下

16:42.320 --> 16:43.620
它的结果是不是

16:43.620 --> 16:45.620
它把我们的k跟value

16:45.620 --> 16:46.720
进行了一个点导

16:46.720 --> 16:47.320
是不是说

16:47.320 --> 16:48.620
现在k是A

16:48.620 --> 16:50.820
那现在就把A干掉了

16:50.820 --> 16:52.520
因为有同名了

16:52.520 --> 16:53.720
我们说这个B吧

16:53.720 --> 16:54.820
现在B是一个k

16:54.820 --> 16:55.320
是不是

16:55.320 --> 16:56.120
那导这之后

16:56.120 --> 16:57.420
B变成一个value了

16:57.420 --> 16:58.720
它所对应的这个value

16:58.720 --> 17:00.120
才变成了一个k了

17:00.120 --> 17:00.820
然后接下来

17:00.820 --> 17:02.520
你看点导过来之后

17:02.520 --> 17:04.120
是不是k1

17:04.120 --> 17:04.820
这也有

17:04.820 --> 17:06.020
然后这也有

17:06.020 --> 17:06.920
那怎么办

17:06.920 --> 17:07.820
就是后边的

17:07.820 --> 17:09.620
把前边的给它覆盖了

17:09.620 --> 17:13.220
那就是C把A给它覆盖了

17:13.220 --> 17:15.920
这个就是invert这个方法

17:15.920 --> 17:16.420
好

17:16.420 --> 17:17.820
那invert这个方法

17:17.820 --> 17:20.620
跟着的是一个invert by的这个方法

17:20.620 --> 17:21.220
这个by

17:21.220 --> 17:22.020
是不是又看到了

17:22.020 --> 17:23.820
它其实是添加了一个什么呢

17:23.820 --> 17:25.920
添加了一个

17:25.920 --> 17:27.920
iterator

17:27.920 --> 17:28.820
迭代器

17:28.820 --> 17:29.420
迭代器

17:31.320 --> 17:35.800
然后是invoke这个方法

17:35.800 --> 17:37.000
invoke这个方法

17:37.000 --> 17:38.900
它是用来调用一个方法

17:38.900 --> 17:43.500
去处理我们取道的某一个属性值

17:43.500 --> 17:43.900
然后在这

17:43.900 --> 17:45.700
还是一样

17:45.700 --> 17:46.900
生命一个对象

17:46.900 --> 17:48.100
这个对象有点长

17:48.100 --> 17:49.100
我就复制了

17:49.100 --> 17:50.300
用人家的这个

17:50.300 --> 17:52.500
咱就不再去耽误时间了

17:52.500 --> 17:53.500
放到这

17:53.500 --> 17:57.300
然后接下来我们console.log

17:57.300 --> 18:00.700
直接去调invoke这个方法

18:00.700 --> 18:01.600
第一个参数

18:01.600 --> 18:02.900
其实跟那个是一样的

18:02.900 --> 18:04.700
跟这个invert是一样的

18:04.700 --> 18:05.700
就是这个对象

18:05.700 --> 18:06.800
我们要传进来

18:06.800 --> 18:07.800
然后第二个

18:07.800 --> 18:08.800
第二个你要处理

18:08.800 --> 18:09.100
是不是

18:09.100 --> 18:10.800
你要处理哪一条属性

18:10.800 --> 18:12.100
你要处理哪条属性的

18:12.100 --> 18:12.300
好

18:12.300 --> 18:13.500
这个时候注意了

18:13.500 --> 18:14.800
它的显法是这样的

18:14.800 --> 18:15.600
还是一个路径

18:15.600 --> 18:17.100
是不是A我要取到A

18:17.100 --> 18:18.700
但是A是一个数组

18:18.700 --> 18:19.600
取到第几个

18:19.600 --> 18:20.500
第零个

18:20.500 --> 18:21.500
取到这个之后

18:21.500 --> 18:22.600
它里头有一个B

18:22.600 --> 18:24.700
然后再来B里头有一个C

18:24.700 --> 18:25.100
是不是

18:25.100 --> 18:26.500
拿到C之后

18:26.500 --> 18:27.300
它是一个数组

18:27.300 --> 18:27.700
是不是

18:27.700 --> 18:28.100
OK

18:28.100 --> 18:29.300
接下来没有完

18:29.300 --> 18:31.500
数组我想怎么去处理它

18:31.500 --> 18:34.300
比如说我想要结取这个数组

18:34.400 --> 18:38.000
那这个结取的话掉slice这个方法

18:38.000 --> 18:38.600
好

18:38.600 --> 18:40.000
那这个结取

18:40.000 --> 18:41.400
它需要去传参

18:41.400 --> 18:42.600
传什么参

18:42.600 --> 18:43.600
开始的所引

18:43.600 --> 18:47.600
以及结束的那个所引

18:47.600 --> 18:48.300
是不是

18:48.300 --> 18:49.600
那这是两个参数

18:49.600 --> 18:50.200
那怎么办

18:50.200 --> 18:52.200
你往后边跟着写

18:52.200 --> 18:52.900
那也就是说

18:52.900 --> 18:54.400
我从开始第一位

18:54.400 --> 18:56.600
开始结接到第三位的前面

18:56.600 --> 18:59.200
它是不包括这一位的

18:59.200 --> 19:01.200
这是我们原生的slice的那个方法

19:01.200 --> 19:02.100
咱们来看一下

19:02.100 --> 19:03.300
它的结果是什么

19:03.300 --> 19:06.600
来刷新结果就是一个2跟3

19:06.600 --> 19:07.400
那你看一下

19:07.400 --> 19:08.000
是不是

19:08.000 --> 19:09.600
来我们取到0

19:09.600 --> 19:10.200
第一位

19:10.200 --> 19:10.800
第二位

19:10.800 --> 19:11.400
第三位

19:11.400 --> 19:12.300
不包括第三位

19:12.300 --> 19:13.800
是不是前面的2跟3

19:13.800 --> 19:15.200
那就是slice

19:15.200 --> 19:15.800
那可以看到

19:15.800 --> 19:16.900
就是这个方法

19:16.900 --> 19:19.900
直接是跟它写到了这个地方

19:19.900 --> 19:20.300
好

19:20.300 --> 19:21.800
这个就是invoke

19:21.800 --> 19:24.100
它是调用调用方法

19:24.100 --> 19:25.200
去处理我们

19:25.200 --> 19:27.400
取到的那个属性

19:28.700 --> 19:32.400
往下

19:32.400 --> 19:34.800
往下就是case

19:34.800 --> 19:36.000
那case

19:36.000 --> 19:39.200
它是用来把我们的对象当中的k

19:39.200 --> 19:41.300
放到一个数组当中

19:41.300 --> 19:42.900
我们的object身上

19:42.900 --> 19:45.500
也有case的这个方法

19:45.500 --> 19:46.700
然后casein

19:46.700 --> 19:47.600
是不是看到in了

19:47.600 --> 19:48.500
都知道

19:48.500 --> 19:49.500
上面这个东西

19:49.500 --> 19:51.200
它是不包括

19:51.200 --> 19:52.700
继承过来的属性的

19:52.700 --> 19:54.000
而casein

19:54.000 --> 19:57.300
它是包括继承过来的属性的

19:57.300 --> 19:57.700
好

19:57.700 --> 19:59.500
那跟case

19:59.500 --> 20:00.600
相对应的一个方法

20:00.600 --> 20:02.500
就是我们既可以把k

20:02.500 --> 20:03.800
放到一个数组当中

20:03.800 --> 20:05.300
还可以把什么的value

20:05.300 --> 20:06.400
放到一个数组当中

20:06.400 --> 20:07.200
那value

20:07.200 --> 20:09.200
那我们看这也有

20:09.200 --> 20:10.800
叫values这个方法

20:10.800 --> 20:12.800
以及还有一个valuesin

20:12.800 --> 20:13.700
也是一样的

20:13.700 --> 20:16.800
它是包括我们继承过来的那些属性的

20:16.800 --> 20:17.200
好

20:17.200 --> 20:18.400
这两个方法

20:18.400 --> 20:20.800
其实我们的原生object身上

20:20.800 --> 20:21.600
都具备

20:23.200 --> 20:23.700
好

20:23.700 --> 20:24.900
那这个说完

20:24.900 --> 20:26.400
我们继续往下

20:26.400 --> 20:27.000
继续往下

20:27.000 --> 20:27.800
咱们要去说一下

20:27.800 --> 20:29.200
这个mapcase

20:30.400 --> 20:31.500
这个mapcase

20:31.500 --> 20:34.500
它是用来修改这个对象的k的

20:34.500 --> 20:35.500
你看map

20:35.500 --> 20:36.500
其实是变利

20:36.500 --> 20:37.200
是不是变利

20:37.200 --> 20:38.400
什么变利这个k

20:38.400 --> 20:38.900
但是

20:38.900 --> 20:40.500
它能够修改这个k

20:40.500 --> 20:40.700
来

20:40.700 --> 20:41.700
咱看一下在这

20:41.700 --> 20:42.900
mapcase

20:43.700 --> 20:44.900
修改对象的一个k

20:44.900 --> 20:45.400
我们在这

20:45.400 --> 20:47.300
直接声明一个变量result

20:48.400 --> 20:49.000
等于什么

20:49.000 --> 20:50.100
我直接去调

20:50.100 --> 20:51.200
调这个方法

20:51.200 --> 20:53.100
就是一个mapcase

20:53.100 --> 20:54.300
然后这个方法当中

20:54.300 --> 20:55.100
第一个参数

20:55.100 --> 20:55.900
就是一个对象

20:55.900 --> 20:56.700
是不是

20:56.700 --> 20:57.500
你现在

20:57.500 --> 20:59.500
你是不是要修改人家的k

20:59.500 --> 21:00.900
那你肯定需要给我一个对象

21:01.300 --> 21:02.900
那这个对象就是一个

21:06.870 --> 21:07.470
点错了

21:07.470 --> 21:08.270
好

21:08.270 --> 21:09.470
第一个就是一个A

21:09.470 --> 21:09.870
是吧

21:09.870 --> 21:11.070
那A对应的一个值

21:11.070 --> 21:11.670
就是一个1

21:11.670 --> 21:13.270
然后接下来就是一个B

21:14.470 --> 21:15.070
用单引

21:15.070 --> 21:15.670
好吧

21:15.670 --> 21:16.470
统一一下

21:16.470 --> 21:18.670
B对应的值是一个2

21:20.270 --> 21:20.670
好

21:20.670 --> 21:22.870
这是我传进去的第一个对象

21:22.870 --> 21:23.470
完了之后

21:23.470 --> 21:24.270
第二个参数

21:24.270 --> 21:25.670
就是一个faction

21:25.670 --> 21:26.270
这个faction

21:26.270 --> 21:27.870
就是用来做处理的

21:28.470 --> 21:29.670
它去接收

21:29.670 --> 21:30.470
Value

21:30.470 --> 21:32.070
其实就是跟我们的

21:32.670 --> 21:33.870
方法是一样的

21:33.870 --> 21:35.070
然后就是一个k

21:35.070 --> 21:35.470
好

21:35.470 --> 21:36.870
然后在这怎么去处理

21:36.870 --> 21:37.870
我return

21:37.870 --> 21:39.270
return这个k

21:39.270 --> 21:40.870
再加上一个什么的Value

21:42.470 --> 21:43.070
好

21:43.070 --> 21:44.470
然后接着

21:44.470 --> 21:45.370
我们直接console

21:47.700 --> 21:48.900
又写错了

21:49.900 --> 21:51.100
console log

21:52.300 --> 21:52.900
result

21:52.900 --> 21:53.900
看一下这个结果

21:54.900 --> 21:55.900
在这我们刷新

21:55.900 --> 21:56.700
来看到

21:56.700 --> 21:58.300
这打印出来了一个对象

21:58.300 --> 21:59.500
我把对象拿过来

21:59.500 --> 22:01.100
然后我们分析一下

22:02.100 --> 22:03.700
那这个map case

22:03.700 --> 22:05.500
它就是用来辨历我们的

22:06.500 --> 22:06.900
k

22:06.900 --> 22:09.500
然后已经还可以给上一个逻辑处理

22:09.500 --> 22:11.300
一个逻辑处理的一个函数

22:11.300 --> 22:11.500
是不是

22:11.500 --> 22:14.100
我们在这个函数当中是让k

22:14.100 --> 22:15.300
加了一个Value

22:15.300 --> 22:16.300
你看一下

22:16.300 --> 22:18.300
它原来的k是不是a跟b

22:18.300 --> 22:20.100
对应的一个Value是1跟2

22:20.100 --> 22:22.100
所以说a加自己的Value是变成了

22:22.100 --> 22:22.900
一个a1

22:22.900 --> 22:25.500
然后b加自己的Value变成了一个b2

22:25.500 --> 22:27.300
那他们的一个结果Value值

22:27.300 --> 22:28.000
有没有变

22:28.000 --> 22:28.800
没有变

22:28.800 --> 22:31.100
这个就是map case这个方法

22:31.100 --> 22:32.000
它的一个作用

22:34.200 --> 22:35.000
然后再来

22:35.000 --> 22:37.000
既然有map case

22:37.000 --> 22:39.500
肯定对应的就是一个map values了

22:39.500 --> 22:40.700
那这个map values

22:40.700 --> 22:42.800
跟它其实是一一对应的

22:42.800 --> 22:44.900
就是你修改的是k

22:44.900 --> 22:45.700
Value不变

22:45.700 --> 22:46.100
是不是

22:46.100 --> 22:49.500
那我的map values是修改的是Value

22:49.500 --> 22:51.400
我们的k是不变的

22:51.400 --> 22:53.800
那在这我就不再去演示了

22:53.800 --> 22:55.100
你们自己下去试一下

22:55.100 --> 22:55.600
就行了

22:55.600 --> 22:56.700
好

22:56.700 --> 22:59.900
然后再往下往下是merge这个方法

23:01.900 --> 23:03.500
那这个merge这个方法

23:03.500 --> 23:05.700
它跟我们一向来所说的

23:05.700 --> 23:08.200
assign那个方法是一模一样的

23:08.200 --> 23:11.300
它也是用来干嘛合并对象的

23:11.300 --> 23:12.100
合并对象

23:12.100 --> 23:14.300
但是这个合并对象

23:14.300 --> 23:15.900
它是有一些区别的

23:15.900 --> 23:16.700
知道吗

23:16.700 --> 23:19.000
我们在之前合并对象的时候

23:19.000 --> 23:20.900
是不是遇到相同的属性

23:20.900 --> 23:23.000
后边或者说前边

23:23.000 --> 23:24.900
反正就是说相互能够覆盖

23:25.900 --> 23:26.400
是吧

23:26.600 --> 23:29.100
这个merge它其实并不会覆盖

23:29.100 --> 23:32.100
而是会把它们全部的放在一起

23:32.100 --> 23:33.200
合并在一起

23:33.200 --> 23:34.400
比如说Object

23:35.600 --> 23:36.400
这个是一个对象

23:36.400 --> 23:36.900
是不是

23:36.900 --> 23:37.800
嗯啊

23:37.800 --> 23:39.200
这个也是有点多

23:39.200 --> 23:40.200
我就不耽误时间了

23:40.200 --> 23:41.000
咱复制一下

23:43.570 --> 23:44.970
好放到这

23:47.010 --> 23:48.110
然后在这呢

23:48.110 --> 23:49.710
就是console点

23:49.710 --> 23:51.810
嘿咋回事呢

23:52.510 --> 23:53.010
嘿

23:55.610 --> 23:56.910
改天我得把这个console

23:56.910 --> 23:59.010
给它敲上个500辫才行啊

23:59.010 --> 23:59.910
console log

23:59.910 --> 24:00.510
log什么呢

24:00.610 --> 24:01.510
log啊

24:01.510 --> 24:02.410
我们不用换好啊

24:02.410 --> 24:03.510
直接去调一个方法

24:05.310 --> 24:06.310
merge这个方法

24:06.310 --> 24:06.610
对吧

24:06.610 --> 24:07.010
然后呢

24:07.010 --> 24:08.410
第一个参数Object

24:08.410 --> 24:09.910
第二个参数Other

24:11.820 --> 24:12.320
好

24:12.320 --> 24:13.620
两个参数丢进来

24:13.620 --> 24:14.420
丢进来之后呢

24:14.420 --> 24:15.320
我们看结果

24:15.820 --> 24:18.920
刷新结果来走着点开啊

24:18.920 --> 24:20.720
你看啊A A是一个什么呢

24:20.720 --> 24:21.520
A是一个Array

24:21.520 --> 24:22.720
那这个Array当中呢

24:22.720 --> 24:24.120
总共有两条数径

24:24.120 --> 24:25.420
两条数据

24:25.420 --> 24:26.520
也就是说啊

24:26.520 --> 24:28.020
它这呢给合并了

24:28.020 --> 24:29.020
是不是合并之后呢

24:29.020 --> 24:29.820
它有一个A

24:29.820 --> 24:30.520
那这个A呢

24:30.520 --> 24:31.320
是一个数组

24:31.320 --> 24:32.420
然后这个数组当中呢

24:32.420 --> 24:33.720
放了两条数据

24:33.720 --> 24:34.120
第一个呢

24:34.120 --> 24:34.620
是它

24:34.620 --> 24:35.820
第二个是它

24:36.420 --> 24:37.420
那这两个A呢

24:37.420 --> 24:38.320
能合并吗

24:38.320 --> 24:39.620
它是不能合并的

24:39.620 --> 24:40.120
所以啊

24:40.120 --> 24:40.420
这个呢

24:40.420 --> 24:42.120
就是merge跟前边的

24:42.120 --> 24:43.520
那个Essence那个东西呢

24:43.520 --> 24:44.720
他们的一个区别啊

24:46.620 --> 24:47.120
好

24:47.120 --> 24:48.020
那这个呢

24:48.020 --> 24:48.820
过了之后呢

24:48.820 --> 24:49.220
接着呢

24:49.220 --> 24:49.820
再来

24:50.620 --> 24:50.920
然后呢

24:50.920 --> 24:51.820
就是一个merge

24:51.820 --> 24:52.420
vis

24:52.620 --> 24:53.220
vis呢

24:53.220 --> 24:54.920
它是接收了一个什么呢

24:54.920 --> 24:56.020
对比器啊

24:56.020 --> 24:57.320
这个这个东西

24:58.120 --> 24:58.520
这个啊

24:58.520 --> 24:59.920
我们前面有说过啊

24:59.920 --> 25:00.520
咱们在这呢

25:00.520 --> 25:01.520
就不再去说了

25:03.020 --> 25:03.720
比较气壶

25:03.720 --> 25:05.520
说对比器都一样啊

25:05.520 --> 25:05.820
啊

25:05.820 --> 25:06.220
然后呢

25:06.220 --> 25:07.020
再往下呢

25:07.020 --> 25:08.320
是这个方法啊

25:08.320 --> 25:09.020
这个方法

25:12.470 --> 25:12.870
嘿

25:13.770 --> 25:14.570
这个方法

25:14.570 --> 25:15.570
那这个方法呢

25:15.570 --> 25:16.870
它是用来干嘛

25:16.870 --> 25:18.370
它是用来删除

25:18.370 --> 25:19.470
我们对象当中的

25:19.470 --> 25:20.370
这个属性的啊

25:20.370 --> 25:21.670
我们就直接cancelogue

25:24.190 --> 25:25.090
然后这个里头呢

25:25.090 --> 25:27.290
我们直接去调这个方法啊

25:27.290 --> 25:28.590
那它的里头呢

25:28.590 --> 25:29.690
咱这么写

25:29.690 --> 25:31.290
写上一个对象啊

25:31.690 --> 25:32.090
A

25:33.090 --> 25:33.490
E

25:33.490 --> 25:34.090
然后呢

25:36.190 --> 25:37.290
说这一下吧

25:38.690 --> 25:39.290
就这个

25:41.810 --> 25:42.210
好

25:42.210 --> 25:43.110
这个对象啊

25:45.110 --> 25:46.810
然后这是第一个

25:46.910 --> 25:48.510
我们要传一个对象是吧

25:48.510 --> 25:48.910
然后呢

25:48.910 --> 25:49.510
接下来呢

25:49.510 --> 25:50.810
跟着的参数是啥了

25:50.810 --> 25:51.310
就是说

25:51.310 --> 25:54.410
要删除它里头的某一条属性

25:54.410 --> 25:55.310
那这个属性呢

25:55.310 --> 25:56.110
我们可以删一条

25:56.110 --> 25:57.010
也可以删多条

25:57.010 --> 25:57.510
是不是

25:57.510 --> 25:58.410
那怎么办啊

25:58.410 --> 25:59.610
给上一个数组

25:59.610 --> 26:00.810
那在这个数组当中呢

26:00.810 --> 26:02.910
咱直接去给属性的名字

26:02.910 --> 26:03.810
比如说A跟C

26:03.810 --> 26:04.710
我看的不怪

26:04.710 --> 26:05.610
是不是啊

26:05.610 --> 26:07.010
我就想把它干掉

26:07.010 --> 26:07.610
那这个时候呢

26:07.610 --> 26:09.010
你就把这个A跟C

26:09.010 --> 26:11.010
也就是他们所对应的这个K

26:11.010 --> 26:12.110
给它丢进来

26:12.110 --> 26:12.910
丢进来之后呢

26:12.910 --> 26:14.910
它就能够去删除了

26:14.910 --> 26:16.210
我们来看一下这个结果

26:16.210 --> 26:17.010
刷新一下

26:17.010 --> 26:17.510
这个时候呢

26:17.510 --> 26:19.010
是不是我们的这个对象呢

26:19.010 --> 26:20.310
仅仅是剩下了一个

26:20.310 --> 26:21.410
零零的一个B

26:21.410 --> 26:23.010
是不是A跟C呢

26:23.010 --> 26:23.910
是不是就没有了

26:23.910 --> 26:24.210
这个呢

26:24.210 --> 26:26.210
就是把它删除了啊

26:26.210 --> 26:26.810
删除

26:26.810 --> 26:27.610
那删除

26:27.610 --> 26:27.910
然后呢

26:27.910 --> 26:28.310
接着呢

26:28.310 --> 26:29.310
跟了就是一个by

26:29.310 --> 26:30.010
是不是啊

26:30.010 --> 26:31.610
加了一个by这个后坠啊

26:31.610 --> 26:32.010
然后呢

26:32.010 --> 26:34.510
再来跟它相应的一个方法

26:34.510 --> 26:35.410
叫peak

26:36.310 --> 26:37.110
这个方法

26:37.110 --> 26:38.110
然后这个方法呢

26:40.250 --> 26:40.750
嗯

26:43.510 --> 26:44.110
不行

26:44.110 --> 26:45.310
今天呢

26:45.310 --> 26:46.510
犯console啊

26:46.510 --> 26:47.310
console log

26:47.310 --> 26:48.510
log log log

26:48.510 --> 26:48.910
这个

26:50.310 --> 26:50.710
点

26:51.610 --> 26:52.110
peak

26:52.710 --> 26:53.610
那这个方法呢

26:53.610 --> 26:54.510
他是用来干嘛

26:54.510 --> 26:55.810
他是用来筛选啊

26:55.810 --> 26:57.310
其实跟这个这个方法呢

26:57.310 --> 26:58.610
是刚好是相反的

26:58.610 --> 27:00.110
你看这个方法呢

27:00.110 --> 27:01.710
他是把这个A跟C呢

27:01.710 --> 27:02.210
给我干

27:02.210 --> 27:02.610
干嘛

27:02.610 --> 27:03.910
给我删掉了

27:03.910 --> 27:05.010
而这个方法呢

27:05.010 --> 27:06.210
恰恰是相反

27:06.210 --> 27:06.510
干嘛

27:06.510 --> 27:07.910
他就是把A跟C呢

27:07.910 --> 27:09.210
给我筛选出来

27:09.210 --> 27:10.410
而删掉的是谁啊

27:10.410 --> 27:12.210
删掉的就是那个B啊

27:13.010 --> 27:13.510
所以啊

27:13.510 --> 27:16.510
他俩是一对应的互相相反的啊

27:18.310 --> 27:19.010
peak

27:19.010 --> 27:19.910
那peak呢

27:19.910 --> 27:21.410
后边跟了一个也是一样的

27:21.410 --> 27:22.510
peakby

27:22.510 --> 27:23.410
加了一个后坠

27:23.410 --> 27:24.410
就是一个by啊

27:24.410 --> 27:25.010
再往下

27:25.010 --> 27:26.810
咱们再来说一下这个result

27:29.490 --> 27:30.290
result

27:30.290 --> 27:31.190
result呢

27:31.190 --> 27:31.490
他呢

27:31.490 --> 27:33.290
是用来获取对象的属性的

27:33.290 --> 27:35.390
就跟我们前面所说的那个

27:35.390 --> 27:36.690
guide那个方法呢

27:36.690 --> 27:37.790
是一样的啊

27:37.790 --> 27:39.290
只不过就是说啊

27:39.290 --> 27:39.890
这个东西呢

27:39.890 --> 27:42.290
跟前面的方法有一个区别

27:42.290 --> 27:43.290
区别在哪里呢

27:43.290 --> 27:45.390
就区别就在于说这个属性呢

27:45.390 --> 27:47.690
他的值是否为函数

27:47.690 --> 27:49.690
如果说遇到函数的时候呢

27:49.690 --> 27:50.190
那完了

27:50.190 --> 27:51.590
他俩区别就出来了

27:51.590 --> 27:52.890
那咱们来看一下啊

27:52.890 --> 27:53.390
比如说啊

27:53.390 --> 27:55.090
这生命一个变量叫obj

27:55.090 --> 27:55.390
然后呢

27:55.390 --> 27:57.190
他等于一个对象啊

27:57.190 --> 27:58.490
给上一个A是12

27:58.490 --> 27:58.790
然后呢

27:58.790 --> 27:59.390
这个B呢

27:59.390 --> 27:59.690
他呢

27:59.690 --> 28:00.590
是一个faction

28:01.790 --> 28:02.790
这条属性

28:02.790 --> 28:04.590
然后这条属性当中呢

28:04.590 --> 28:05.090
哎呀

28:05.090 --> 28:06.890
看来今天是真的是犯那个

28:10.020 --> 28:11.020
犯那个console啊

28:11.520 --> 28:12.320
console.log

28:13.420 --> 28:15.120
老实打错啊

28:15.120 --> 28:16.520
然后loglog什么呢

28:16.520 --> 28:18.320
log这个this.a

28:20.020 --> 28:21.720
这是一个对象

28:21.720 --> 28:23.120
那我就拿这个对象呢

28:23.120 --> 28:24.120
跟大家去演示啊

28:24.120 --> 28:26.920
我们直接console

28:26.920 --> 28:28.820
慢一点打吧console

28:28.820 --> 28:29.420
console什么呢

28:29.420 --> 28:31.420
console这个直接去调result

28:32.220 --> 28:33.020
这个方法

28:33.020 --> 28:35.020
然后把obj给他丢进去

28:35.020 --> 28:35.520
完了之后呢

28:35.520 --> 28:36.620
他接收第二个参数

28:36.620 --> 28:38.120
就是这条属性

28:38.120 --> 28:39.420
他的一个名字

28:39.420 --> 28:40.520
那我们说过啊

28:40.520 --> 28:41.220
就是他呢

28:41.220 --> 28:42.720
跟这个guide是一样的

28:42.720 --> 28:44.520
是用来取取什么呢

28:44.520 --> 28:46.920
取我们的这个某一条属性的啊

28:46.920 --> 28:47.520
那现在呢

28:47.520 --> 28:49.320
就是我丢了这么一个对象

28:49.320 --> 28:50.020
在他的里头

28:50.020 --> 28:51.520
我要去取这个A是不是啊

28:51.520 --> 28:52.020
那这个呢

28:52.020 --> 28:53.220
应该很简单吧

28:53.220 --> 28:54.320
结果呢是什么呢

28:54.320 --> 28:55.320
就是这个12吗

28:55.320 --> 28:56.920
我们取到的这个12

28:56.920 --> 28:57.620
好这个呢

28:57.620 --> 28:58.420
倒没什么

28:58.420 --> 29:00.220
是不是关键就是说第二个

29:00.220 --> 29:00.820
第二个

29:00.820 --> 29:01.620
那第二个呢

29:01.620 --> 29:03.120
他的B是什么

29:03.120 --> 29:04.120
是一个faction

29:04.120 --> 29:05.120
那么好

29:05.120 --> 29:06.920
那如果说B是一个faction的话

29:06.920 --> 29:09.020
我们在这直接点result

29:09.020 --> 29:10.020
去调这个方法

29:10.020 --> 29:11.220
然后这个里头obj

29:11.220 --> 29:11.920
传进去之后呢

29:11.920 --> 29:13.520
我要接收第二个参数是啥

29:13.520 --> 29:15.220
是个B这个时候呢

29:15.220 --> 29:16.220
我们来看一下

29:16.220 --> 29:16.820
注意啊

29:16.820 --> 29:18.120
我现在并没有console

29:18.120 --> 29:19.920
我的这一条并没有console

29:19.920 --> 29:20.520
再来看

29:20.520 --> 29:21.220
刷新一下

29:21.220 --> 29:21.720
有没有

29:21.720 --> 29:22.720
你会发现这呢

29:22.720 --> 29:24.220
仍然会弹出一个12

29:24.220 --> 29:25.320
打印出一个12

29:25.320 --> 29:26.220
这是为什么呢

29:26.220 --> 29:27.720
就是由于

29:27.720 --> 29:29.020
我的result

29:29.020 --> 29:30.320
碰到的这条属性

29:30.320 --> 29:31.520
他的值是一个faction

29:31.520 --> 29:32.220
那ok

29:32.220 --> 29:33.020
result呢

29:33.020 --> 29:34.720
他会主动的去调

29:34.720 --> 29:35.920
调这个faction

29:35.920 --> 29:36.720
那这个faction

29:36.720 --> 29:37.420
调完之后呢

29:37.420 --> 29:38.920
他同时会把这个faction

29:38.920 --> 29:39.920
当中的this呢

29:39.920 --> 29:40.820
指向谁

29:40.820 --> 29:42.320
指向这个对象

29:42.320 --> 29:43.320
那就就是说

29:43.320 --> 29:44.520
你看我this点a嘛

29:44.520 --> 29:46.020
不就是他身上有一个a

29:46.020 --> 29:46.920
得出的结果呢

29:46.920 --> 29:47.820
就是一个12

29:47.820 --> 29:48.220
这个呢

29:48.220 --> 29:49.420
就是object

29:49.420 --> 29:51.720
他跟我们前边的那个guide

29:51.720 --> 29:52.720
是不一样的

29:52.720 --> 29:53.620
那那个guide呢

29:53.620 --> 29:54.420
咱们来看一下

29:54.420 --> 29:55.720
点guide是吧

29:55.720 --> 29:56.820
guideobj

29:56.820 --> 29:57.120
然后呢

29:57.120 --> 29:57.520
第二个呢

29:57.520 --> 29:58.320
就是一个B

29:58.320 --> 30:00.120
那来走

30:00.120 --> 30:00.720
刷新

30:00.720 --> 30:01.720
没有任何的反应

30:01.720 --> 30:02.220
是不是

30:02.220 --> 30:03.920
那其实他取到了吗

30:03.920 --> 30:04.720
取到了

30:04.720 --> 30:05.420
只不过了

30:05.420 --> 30:07.320
他取到的是这个函数啊

30:07.320 --> 30:08.220
那这个函数呢

30:08.220 --> 30:11.120
他并不会给我们去调用了

30:11.120 --> 30:12.720
那我把它打印出来呢

30:12.720 --> 30:14.620
给大家看一下啊

30:14.620 --> 30:15.120
再来看

30:15.120 --> 30:15.820
刷新一下

30:15.820 --> 30:16.420
看到没

30:16.420 --> 30:17.820
他是不是就是一个console

30:17.820 --> 30:18.020
啊

30:18.020 --> 30:19.820
就是那个方法

30:19.820 --> 30:20.420
所以啊

30:20.420 --> 30:20.720
这个呢

30:20.720 --> 30:21.820
就是result

30:21.820 --> 30:22.720
跟这个guide

30:22.720 --> 30:23.720
他的一个区别

30:23.720 --> 30:25.020
他们同样都是用来取

30:25.020 --> 30:25.820
这个属性的

30:25.820 --> 30:27.020
但是不一样啊

30:27.020 --> 30:27.920
不一样

30:27.920 --> 30:29.020
嗯

30:29.020 --> 30:29.220
好

30:29.220 --> 30:30.320
继续往下吧

30:30.320 --> 30:30.720
嗯

30:30.720 --> 30:31.920
咱们接下来呢

30:31.920 --> 30:32.920
再来说啊

30:32.920 --> 30:34.420
这个set已经说过了

30:34.420 --> 30:35.320
setways

30:35.320 --> 30:35.820
说过了

30:35.820 --> 30:37.320
就是这个to pairs

30:37.320 --> 30:39.220
接下来咱们要说这个方法了

30:40.820 --> 30:41.720
那to pairs

30:41.720 --> 30:42.320
这个方法呢

30:42.320 --> 30:42.920
他是干嘛

30:42.920 --> 30:44.420
他是用来把对象的k

30:44.420 --> 30:45.220
跟value

30:45.220 --> 30:47.720
一起放到这个数组当中啊

30:47.720 --> 30:48.620
那我们在这呢

30:48.620 --> 30:49.220
faction

30:49.220 --> 30:50.920
faction一个full

30:50.920 --> 30:51.720
这是跟官方的

30:51.720 --> 30:52.320
是一样的

30:52.320 --> 30:53.920
this.a等于一个1

30:55.120 --> 30:56.820
然后this.b等于一个2

30:57.520 --> 30:57.620
好

30:57.620 --> 30:58.220
然后呢

30:58.220 --> 30:59.320
这个full

30:59.320 --> 31:01.020
添加一个partotype

31:01.020 --> 31:02.220
身上去添加一个方法

31:02.220 --> 31:02.920
叫c等

31:02.920 --> 31:04.020
添加一条属性

31:04.020 --> 31:04.620
等于3

31:04.620 --> 31:05.120
是不是

31:05.120 --> 31:05.420
然后呢

31:05.420 --> 31:06.520
接下来我们去console

31:07.520 --> 31:08.520
log什么呢

31:08.520 --> 31:10.520
log这个方法

31:10.520 --> 31:11.520
to

31:11.520 --> 31:13.520
p,a,i,r,s

31:13.520 --> 31:15.020
调这个方法

31:15.020 --> 31:16.020
调这个方法之后呢

31:16.020 --> 31:16.920
接收一个参数

31:16.920 --> 31:18.120
是一个newfull

31:19.120 --> 31:20.120
实力化一个

31:20.120 --> 31:20.520
是吧

31:20.520 --> 31:21.320
实力化啊

31:21.320 --> 31:22.620
实力化之后呢

31:22.620 --> 31:23.120
他呢

31:23.120 --> 31:23.920
会把什么呢

31:23.920 --> 31:25.720
把这个对象身上的这个k

31:25.720 --> 31:26.520
跟value呢

31:26.520 --> 31:28.520
分别的放到这个数组当中

31:28.520 --> 31:28.920
来

31:28.920 --> 31:29.820
咱们看一下啊

31:29.820 --> 31:30.320
结果啊

31:30.320 --> 31:31.520
我们刷新走着

31:31.520 --> 31:31.920
好

31:31.920 --> 31:33.320
弹出来了两个r

31:33.320 --> 31:33.720
是不是

31:33.720 --> 31:34.120
一个呢

31:34.120 --> 31:35.120
是a等于1

31:35.120 --> 31:35.420
然后呢

31:35.420 --> 31:35.820
第二个呢

31:35.820 --> 31:37.020
是b等于2

31:37.020 --> 31:37.720
看到没有

31:37.720 --> 31:38.220
也就是说啊

31:38.220 --> 31:39.020
我的这个对象

31:39.020 --> 31:40.020
本身的这个a呢

31:40.020 --> 31:42.020
属性跟他的一个k

31:42.020 --> 31:43.420
他的一个k跟value呢

31:43.420 --> 31:44.720
放到一个数组当中

31:44.720 --> 31:45.920
另外一个k跟value

31:45.920 --> 31:47.120
放在另外一个数组当中

31:47.120 --> 31:48.420
他们其实形成了一个

31:48.420 --> 31:49.820
二维的数组

31:51.220 --> 31:51.920
明白吧

31:51.920 --> 31:52.320
好

31:52.320 --> 31:53.020
然后呢

31:53.020 --> 31:53.320
这个呢

31:53.320 --> 31:54.320
就是他的一个作用

31:54.320 --> 31:55.320
那跟他类似的

31:55.320 --> 31:56.020
还有一个什么呢

31:56.020 --> 31:57.520
加了一个in的这个方法

31:57.520 --> 31:58.520
那这个in的方法

31:58.520 --> 31:59.820
咱们一直没有去演示

31:59.820 --> 32:00.320
是不是

32:00.320 --> 32:01.620
刚好借助这个机会呢

32:01.620 --> 32:03.020
咱们去演示一下

32:03.020 --> 32:03.820
那来看一下

32:03.820 --> 32:05.220
跟他有什么不一样

32:05.320 --> 32:05.820
这样吧

32:05.820 --> 32:07.020
我复制再来

32:08.820 --> 32:09.620
再来一个

32:11.020 --> 32:11.620
放到这

32:13.220 --> 32:14.220
来在这呢

32:14.220 --> 32:15.720
我们刷新走着啊

32:15.720 --> 32:16.520
很明显吗

32:16.520 --> 32:17.820
人家的认死为3

32:17.820 --> 32:18.920
你的认死为2

32:18.920 --> 32:19.820
那我们点开啊

32:19.820 --> 32:22.220
他其实是把记成的那个属性呢

32:22.220 --> 32:23.820
也给他拿过来了

32:23.820 --> 32:24.620
那这个c呢

32:24.620 --> 32:26.220
是不是我们原型身上的

32:26.220 --> 32:27.320
那对于他来说呢

32:27.320 --> 32:28.820
其实这个nu4来说呢

32:28.820 --> 32:30.220
他只是一个记成嘛

32:30.220 --> 32:30.620
所以啊

32:30.620 --> 32:32.220
你看in是不是就能够

32:32.220 --> 32:34.620
取到这个记成的这个属性啊

32:34.620 --> 32:36.220
前边咱们说了半天在这了

32:36.220 --> 32:38.020
算是演示了一下啊

32:38.020 --> 32:38.420
好

32:38.420 --> 32:38.820
然后呢

32:38.820 --> 32:39.820
继续往下吧

32:39.820 --> 32:40.120
啊

32:40.120 --> 32:41.020
再往下呢

32:41.020 --> 32:42.220
有一个transfo

32:42.220 --> 32:42.520
这个呢

32:42.520 --> 32:43.020
不用说啊

32:43.020 --> 32:43.520
没啥用处

32:43.520 --> 32:44.020
然后呢

32:44.020 --> 32:45.120
这个ansight

32:45.620 --> 32:46.520
ansight呢

32:46.520 --> 32:47.120
他呢

32:47.120 --> 32:49.520
也是用来删除属性的

32:49.520 --> 32:50.020
嗯

32:51.120 --> 32:52.020
删除属性

32:52.020 --> 32:53.620
我们拿这个object

32:53.620 --> 32:54.420
复制一下啊

32:55.620 --> 32:56.320
放到这

32:56.920 --> 32:57.320
来

32:58.020 --> 32:59.320
然后我直接去调

32:59.720 --> 33:00.420
调什么呢

33:00.420 --> 33:01.620
ansight

33:02.420 --> 33:03.020
调这个方法

33:03.020 --> 33:03.820
嘿嘿

33:03.820 --> 33:04.520
什么情况

33:05.620 --> 33:07.220
这个方法啊

33:07.220 --> 33:07.720
好

33:07.720 --> 33:08.320
然后呢

33:08.320 --> 33:09.020
这个方法呢

33:09.020 --> 33:10.320
他接收几个参数啊

33:10.320 --> 33:11.920
其实跟前面是差不多的

33:11.920 --> 33:12.220
第一个呢

33:12.220 --> 33:14.120
就是object这个对象

33:14.120 --> 33:15.420
你要删删谁啊

33:15.420 --> 33:16.820
删这个对象当中的

33:16.820 --> 33:17.120
然后呢

33:17.120 --> 33:17.920
这个对象当中呢

33:17.920 --> 33:19.020
你要删删什么呢

33:19.020 --> 33:20.020
我们要删啊

33:20.020 --> 33:21.320
他其实第二个参数呢

33:21.320 --> 33:22.620
就是一个路径了

33:22.620 --> 33:23.920
就是a

33:23.920 --> 33:24.320
是不是啊

33:24.320 --> 33:25.320
你是不是很复杂啊

33:25.320 --> 33:25.820
没关系

33:25.820 --> 33:26.520
我取你啊

33:26.520 --> 33:28.120
我照照能取你啊

33:28.120 --> 33:29.120
ad0个

33:29.120 --> 33:30.720
然后呢点点点什么呢

33:30.720 --> 33:31.620
点b是不是啊

33:31.620 --> 33:32.020
然后呢

33:34.620 --> 33:35.420
到这个之后呢

33:35.420 --> 33:36.320
ok完了

33:36.320 --> 33:37.320
他就把它删掉了

33:37.320 --> 33:37.920
删掉之后呢

33:37.920 --> 33:39.420
我们在后边直接conflog

33:39.420 --> 33:40.120
log什么呢

33:40.120 --> 33:41.720
log这个object

33:42.120 --> 33:43.320
看一下这个结果啊

33:43.320 --> 33:43.720
来

33:43.720 --> 33:44.620
咱们在这呢

33:44.620 --> 33:46.220
刷新走哎

33:46.220 --> 33:46.920
看到没有

33:46.920 --> 33:47.520
现在呢

33:47.520 --> 33:48.320
是一个array

33:48.320 --> 33:50.320
是不是让我们点开往里头进

33:50.320 --> 33:51.520
进完到这之后呢

33:51.520 --> 33:53.320
b发现空空如也

33:53.320 --> 33:54.220
啥也没有

33:54.220 --> 33:55.620
那就是我们现在呢

33:55.620 --> 33:57.520
把b身上的这个c

33:57.520 --> 33:58.220
这个属性呢

33:58.220 --> 33:59.120
给他干掉了

33:59.120 --> 33:59.920
干掉之后呢

33:59.920 --> 34:01.520
那你说他是不是空的啊

34:01.520 --> 34:03.020
绝对绝对是一个空的啊

34:03.020 --> 34:03.820
没有问题

34:03.820 --> 34:04.320
好吧

34:04.820 --> 34:05.120
这个呢

34:05.120 --> 34:07.020
就是用来删除啊

34:07.020 --> 34:07.820
用来删除

34:07.820 --> 34:08.720
然后呢

34:08.720 --> 34:09.520
用来删除呢

34:09.520 --> 34:11.020
还有跟他另外一个方法

34:11.020 --> 34:13.520
叫 ansight width

34:13.520 --> 34:14.820
ansight width

34:14.820 --> 34:15.520
这个方法

34:15.520 --> 34:16.520
那这个方法呢

34:16.520 --> 34:18.020
他跟我们之前的那个

34:18.020 --> 34:20.220
width倒是有些区别啊

34:20.220 --> 34:20.820
他呢

34:20.820 --> 34:21.820
不一样在哪里呢

34:21.820 --> 34:24.520
就是他还接收了一个路径

34:24.520 --> 34:25.120
你知道吧

34:25.120 --> 34:26.220
接收了一个路径

34:26.220 --> 34:26.820
然后呢

34:26.820 --> 34:26.920
呃

34:26.920 --> 34:29.120
不路径是刚才咱们那个接收

34:29.120 --> 34:30.820
他接收的一个方法

34:30.820 --> 34:32.520
这个方法能对于我们这个路径

34:32.520 --> 34:33.820
许到的这个参数呢

34:33.820 --> 34:35.220
进行一个处理

34:35.220 --> 34:35.620
来

34:37.220 --> 34:37.820
安

34:38.820 --> 34:40.020
哎不不是 ans

34:41.120 --> 34:42.020
ansight

34:42.020 --> 34:43.320
啊up date

34:43.720 --> 34:44.720
嘿嘿嘿

34:44.720 --> 34:45.520
说错了

34:46.120 --> 34:46.820
up date

34:49.020 --> 34:50.520
up date啊哎呀

34:51.020 --> 34:53.120
一下跳到这了啊

34:53.120 --> 34:55.120
up date啊不是 ansight width啊

34:55.120 --> 34:56.520
up date好

34:56.520 --> 34:57.320
up date呢

34:57.320 --> 34:57.820
他呢

34:57.820 --> 34:58.920
跟这个site呢

34:58.920 --> 34:59.420
是一样的

34:59.420 --> 35:00.820
他是接收一个什么呢

35:00.820 --> 35:02.020
接收一个参数啊

35:02.020 --> 35:03.320
来咱们在这呢

35:03.320 --> 35:04.020
声明一个对象

35:04.120 --> 35:05.220
up date

35:05.220 --> 35:06.220
这个呢是

35:06.620 --> 35:09.420
简简单单来上一个a等于一个10

35:10.020 --> 35:11.120
a等于一个10啊

35:11.120 --> 35:11.620
然后呢

35:11.620 --> 35:12.520
我们去调一下

35:16.220 --> 35:17.020
哎错了

35:19.380 --> 35:20.080
up date

35:20.580 --> 35:20.980
好

35:21.780 --> 35:22.780
然后这个里头呢

35:22.780 --> 35:23.580
第一个参数呢

35:23.580 --> 35:24.680
跟上面是一样的

35:25.080 --> 35:25.680
up date

35:26.380 --> 35:26.680
然后呢

35:26.680 --> 35:27.180
接下来呢

35:27.180 --> 35:28.280
第二个参数就是a

35:28.280 --> 35:29.580
这是他的一个路径

35:29.580 --> 35:30.380
第三个参数呢

35:30.380 --> 35:31.280
就是一个faction

35:31.280 --> 35:32.280
那这个faction当中呢

35:32.280 --> 35:33.580
我们接收一个参数就是n

35:33.580 --> 35:34.880
那他其实也就说

35:34.980 --> 35:35.680
取到了什么

35:35.680 --> 35:36.680
取到这个a的值

35:36.680 --> 35:36.980
然后呢

35:36.980 --> 35:38.080
把他丢进来了

35:38.080 --> 35:38.780
然后我们在这呢

35:38.780 --> 35:39.780
就是一个return

35:39.780 --> 35:40.580
return什么呢

35:40.580 --> 35:42.180
n乘上一个n

35:43.380 --> 35:44.080
看到吗

35:44.080 --> 35:45.180
然后接着呢

35:45.180 --> 35:46.580
我们再来console一下

35:48.180 --> 35:49.980
这个object

35:50.680 --> 35:51.780
看一下这个结果啊

35:51.780 --> 35:52.080
在这呢

35:52.080 --> 35:53.680
我刷新走着啊

35:53.680 --> 35:54.680
弹出的一个结果呢

35:54.680 --> 35:56.280
就是一个a是一个100

35:56.380 --> 35:58.980
是不是说把我的这个值呢

35:58.980 --> 36:02.080
进行了一个逻辑处理处理完之后呢

36:02.080 --> 36:03.180
那我的object呢

36:03.180 --> 36:04.280
现在就变了

36:04.280 --> 36:05.380
就就更新了一下

36:05.380 --> 36:05.880
是不是

36:05.880 --> 36:06.480
然后呢

36:06.480 --> 36:07.280
up date呢

36:07.280 --> 36:08.580
是有一个update width

36:09.780 --> 36:10.280
update

36:10.280 --> 36:11.180
update width

36:11.180 --> 36:12.580
那这个update width呢

36:12.580 --> 36:14.680
他是有一个功能是啥呢

36:14.680 --> 36:17.380
就跟我们前边的那个那个那个方法

36:17.380 --> 36:18.380
这个方法是一样的

36:18.380 --> 36:19.080
side width

36:19.080 --> 36:19.780
是一模一样的

36:19.780 --> 36:21.580
就是他能够决定一个

36:21.580 --> 36:22.380
你最终啊

36:22.380 --> 36:22.980
这个东西呢

36:22.980 --> 36:25.180
返回出来的一个是类型

36:25.980 --> 36:26.480
哪呢

36:26.480 --> 36:26.980
这个

36:28.380 --> 36:29.680
你可以是一个对象

36:29.680 --> 36:30.880
也可以是一个数组

36:30.880 --> 36:31.380
是不是

36:33.080 --> 36:33.880
这是一个con

36:33.880 --> 36:34.780
con的一个对象

36:34.780 --> 36:35.080
然后呢

36:35.080 --> 36:37.480
直接去调这个方法

36:37.480 --> 36:39.680
然后把object传进来

36:39.680 --> 36:40.280
第二个呢

36:40.280 --> 36:42.080
我们要给上一个比如说a

36:42.080 --> 36:42.380
然后呢

36:42.380 --> 36:43.480
再来上一个b

36:44.480 --> 36:45.080
是吧

36:45.080 --> 36:45.380
然后呢

36:45.380 --> 36:46.480
接下来第三个参数

36:46.480 --> 36:47.280
就是一个faction

36:49.280 --> 36:50.380
然后faction当中呢

36:50.380 --> 36:50.880
return

36:50.880 --> 36:51.680
return一个多少

36:51.680 --> 36:52.580
return一个12

36:52.580 --> 36:53.480
那其实也就是说

36:53.480 --> 36:55.180
给我们这里头

36:55.180 --> 36:56.080
来了一个路径

36:56.080 --> 36:56.480
是不是啊

36:56.480 --> 36:56.780
这个呢

36:56.780 --> 36:57.380
就是一个k

36:57.380 --> 36:58.280
他的一个value值呢

36:58.280 --> 36:59.180
就是一个12

36:59.180 --> 36:59.580
关键点

36:59.580 --> 37:00.680
就在于他能够接收

37:00.680 --> 37:01.480
最后一个参数

37:01.480 --> 37:02.480
就是object

37:04.380 --> 37:04.780
好

37:04.780 --> 37:06.580
然后接下来呢

37:06.580 --> 37:07.680
我们console一下

37:09.180 --> 37:12.080
log log object

37:12.080 --> 37:12.980
再来看啊

37:12.980 --> 37:13.180
来

37:13.180 --> 37:14.780
我们在这刷新一下

37:14.780 --> 37:14.980
好

37:14.980 --> 37:15.980
结果点

37:15.980 --> 37:16.380
然后呢

37:16.380 --> 37:17.880
再点点a进去之后呢

37:17.880 --> 37:18.580
就是一个b

37:18.580 --> 37:19.280
b是一个12

37:19.280 --> 37:19.780
是不是

37:19.780 --> 37:20.280
那这呢

37:20.280 --> 37:21.580
咱可以改上一个ret

37:22.480 --> 37:23.780
再来刷新一下走

37:23.780 --> 37:24.380
这点开

37:24.380 --> 37:24.780
你看

37:24.780 --> 37:25.980
是不是就是一个数组

37:25.980 --> 37:27.180
跟那个site width

37:27.180 --> 37:28.380
是一模一样的

37:28.380 --> 37:29.380
一个道理

37:29.380 --> 37:30.980
update width

37:30.980 --> 37:31.380
ok

37:31.380 --> 37:32.280
那到这呢

37:32.280 --> 37:33.880
我们算是把这个

37:33.880 --> 37:34.380
object

37:34.380 --> 37:35.480
身上的这些方法呢

37:35.480 --> 37:36.980
跟大家去说完了

37:36.980 --> 37:38.180
那我们的这节课呢

37:38.180 --> 37:39.280
就说到这里

