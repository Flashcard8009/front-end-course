WEBVTT

00:00.560 --> 00:03.560
上一课咱们搞定了这个文档这一块

00:03.560 --> 00:06.560
就是ATM元素属性这一块

00:06.560 --> 00:08.560
ATM有两个部分

00:08.560 --> 00:10.560
另外一部分就是WebAPI

00:10.560 --> 00:13.560
所谓API其实就是给你增加了一些

00:13.560 --> 00:17.560
堆箱 函数 供你使用

00:17.560 --> 00:20.560
就是API 应用程序 编程接口

00:20.560 --> 00:23.560
那么这一块是跟介石是有关系的

00:23.560 --> 00:25.560
提供给介石使用的

00:25.560 --> 00:28.560
那么我们来看一下WebAPI能不能增加哪些东西

00:28.560 --> 00:30.560
实际上这一块我给大家说一下

00:30.560 --> 00:34.560
ATM在WebAPI这一块呢

00:34.560 --> 00:36.560
增加的东西比较多

00:36.560 --> 00:40.560
我们平时说这个H5 其实我们平时说H5

00:40.560 --> 00:45.560
更多的时候指的就是它提供的这些新的WebAPI

00:45.560 --> 00:49.560
而这些WebAPI里面大部分是跟移动端相关的

00:49.560 --> 00:52.560
比方说我们去获取移动端的地理定位

00:52.560 --> 00:57.560
获取它的设备的方向

00:57.560 --> 01:01.560
或者它的陀螺仪 或者是拔开相机

01:01.560 --> 01:03.560
这些都是跟移动端相关的

01:03.560 --> 01:05.560
但是我们第一个阶段呢

01:05.560 --> 01:07.560
我们只学习PC

01:07.560 --> 01:08.560
所以说第一个阶段呢

01:08.560 --> 01:11.560
我们WebAPI这一部分的移动端的很多API

01:11.560 --> 01:12.560
我们都不涉及

01:12.560 --> 01:16.560
有的时候我们说H5 H5就指的是移动端开发

01:16.560 --> 01:18.560
利用它给我们提供的API

01:18.560 --> 01:21.560
来实现移动端的各种丰富的效果

01:21.560 --> 01:23.560
好 这是给大家说一下

01:23.560 --> 01:26.560
然后我们由于地阶段我们不涉及到移动端

01:26.560 --> 01:29.560
所以说它的WebAPI就会少很多

01:29.560 --> 01:31.560
因此就变成这样子了

01:31.560 --> 01:34.560
只有这么几个 而且都比较简单

01:34.560 --> 01:36.560
虽然简单 但它非常重要

01:36.560 --> 01:37.560
经常我们都会用的

01:37.560 --> 01:39.560
仍然一样 不需要记

01:39.560 --> 01:41.560
忘记了 查约稳当

01:41.560 --> 01:43.560
都给你分门别类写好的

01:43.560 --> 01:46.560
第一个就是给你提供了一个函数

01:46.560 --> 01:48.560
叫做query selector

01:48.560 --> 01:49.560
这个玩意干嘛的呢

01:49.560 --> 01:51.560
它是用来选中元素的

01:51.560 --> 01:53.560
就是获取动物元素

01:53.560 --> 01:55.560
那你看我们之前获取动物元素

01:55.560 --> 01:56.560
用的是啥呀

01:56.560 --> 01:59.560
so getElementById

01:59.560 --> 02:03.560
还有什么getElementByClassName

02:03.560 --> 02:07.560
然后还有getElementByTypeName

02:07.560 --> 02:08.560
对吧

02:08.560 --> 02:10.560
我们之前会用这么三个函数

02:10.560 --> 02:12.560
来获取元素

02:12.560 --> 02:14.560
然后AC5这个东西出来过后

02:14.560 --> 02:16.560
我不是针对谁

02:16.560 --> 02:18.560
这些玩意全是垃圾

02:18.560 --> 02:19.560
都可以不用了

02:19.560 --> 02:20.560
只用它

02:20.560 --> 02:23.560
一个函数就可以搞定所有的功能

02:23.560 --> 02:25.560
那我们来看一下它怎么来用的

02:25.560 --> 02:26.560
它提供了两个函数

02:26.560 --> 02:28.560
一个是选中单个元素

02:28.560 --> 02:31.560
传入一个CS的选择器

02:31.560 --> 02:33.560
选中匹配的第一个元素

02:33.560 --> 02:36.560
另外一个是select all

02:36.560 --> 02:37.560
根据一个CS的选择器

02:37.560 --> 02:39.560
选中所有的元素

02:39.560 --> 02:41.560
然后返回的是一个伪数组

02:41.560 --> 02:42.560
好 咱们来看一下

02:42.560 --> 02:43.560
随便找个地方吧

02:43.560 --> 02:45.560
就惊动吧

02:45.560 --> 02:46.560
随便找个玩意

02:46.560 --> 02:49.560
打开控制台

02:49.560 --> 02:50.560
我们来找一个

02:50.560 --> 02:52.560
比方说就这个DAV

02:52.560 --> 02:53.560
我们要获取它

02:53.560 --> 02:55.560
过去是不是挺麻烦的

02:55.560 --> 02:56.560
get class name

02:56.560 --> 02:58.560
然后选中第一个没必要

02:58.560 --> 03:00.560
直接就直接来这个

03:00.560 --> 03:03.560
document query semagator

03:03.560 --> 03:05.560
里边选CS的选择器

03:05.560 --> 03:06.560
选中哪个

03:06.560 --> 03:09.560
我们就直接放下来吧

03:09.560 --> 03:11.560
打开这个

03:11.560 --> 03:13.560
好 我们就直接选用这个

03:13.560 --> 03:14.560
内样式

03:14.560 --> 03:16.560
内样式是不是一点开头

03:16.560 --> 03:17.560
对不对

03:17.560 --> 03:19.560
我们用CS的选择器

03:19.560 --> 03:20.560
选择器

03:20.560 --> 03:21.560
由于CS的选择器是很丰富的

03:21.560 --> 03:23.560
所以说我们获取元素

03:23.560 --> 03:24.560
也变得很丰富了

03:24.560 --> 03:25.560
那么它返回的

03:25.560 --> 03:26.560
就是一个动物元素

03:26.560 --> 03:27.560
你看是不是就这个玩意儿

03:27.560 --> 03:28.560
选中第一个

03:28.560 --> 03:30.560
特别特别方便

03:30.560 --> 03:31.560
然后我们再选中一个

03:31.560 --> 03:32.560
比较有层级的

03:32.560 --> 03:35.560
比方说是随便来一个吧

03:35.560 --> 03:37.560
我们就选中这个

03:37.560 --> 03:39.560
search 下面的这个

03:39.560 --> 03:41.560
比方说我们网页上

03:41.560 --> 03:43.560
有很多的选择内

03:43.560 --> 03:45.560
那么我们只选中它

03:45.560 --> 03:46.560
怎么选中

03:46.560 --> 03:47.560
我们可以用层级

03:47.560 --> 03:50.560
document query

03:50.560 --> 03:51.560
像这个的函数

03:51.560 --> 03:53.560
你不用刻意去计

03:53.560 --> 03:54.560
你写多了

03:54.560 --> 03:55.560
要熟悉的不得了

03:55.560 --> 03:56.560
这个函数

03:56.560 --> 03:57.560
天天要用

03:57.560 --> 03:58.560
然后选中什么呢

03:58.560 --> 04:00.560
内样式为w

04:00.560 --> 04:02.560
下面的这个id

04:02.560 --> 04:04.560
为search

04:04.560 --> 04:06.560
下面那个search

04:06.560 --> 04:07.560
橫桿a

04:07.560 --> 04:09.560
你看不就选中它了吗

04:09.560 --> 04:10.560
就是很舒服啊

04:10.560 --> 04:11.560
这个东西

04:11.560 --> 04:12.560
我们之后

04:12.560 --> 04:14.560
选中元素都可以用它

04:14.560 --> 04:16.560
就会过去到一个动物元素

04:16.560 --> 04:17.560
那么如果说

04:17.560 --> 04:18.560
我们要选中多个呢

04:18.560 --> 04:19.560
也找到

04:19.560 --> 04:21.560
比方说我们找一个这个地方

04:21.560 --> 04:22.560
你看这里呢

04:22.560 --> 04:23.560
有一个li

04:23.560 --> 04:25.560
li里边有个相同的那样式

04:25.560 --> 04:27.560
我们要把这些li全部选中

04:27.560 --> 04:28.560
那么我们怎么办呢

04:28.560 --> 04:30.560
我们可以用document

04:30.560 --> 04:32.560
query signature

04:32.560 --> 04:33.560
哦

04:33.560 --> 04:34.560
就可以选中多个

04:34.560 --> 04:35.560
里面还是一样

04:35.560 --> 04:36.560
传set选择器

04:36.560 --> 04:40.560
cat menu item

04:40.560 --> 04:41.560
你看

04:41.560 --> 04:43.560
办回的是不是一个数主啊

04:43.560 --> 04:44.560
不过它是一个伪语数主

04:44.560 --> 04:45.560
它不是真正的数主

04:45.560 --> 04:46.560
你看它的圆形链上

04:46.560 --> 04:47.560
是load list

04:47.560 --> 04:48.560
它不是array

04:49.560 --> 04:50.560
对吧

04:50.560 --> 04:51.560
就完事了啊

04:51.560 --> 04:52.560
这就是选中动物元素

04:52.560 --> 04:53.560
一个多个一个单个

04:53.560 --> 04:54.560
好

04:54.560 --> 04:55.560
同学们的暂停视频

04:55.560 --> 04:57.560
随便找一个网页

04:57.560 --> 04:58.560
还找啥呢

04:58.560 --> 04:59.560
找啥

04:59.560 --> 05:00.560
打开网页

05:00.560 --> 05:01.560
然后呢

05:01.560 --> 05:02.560
看它的元素结构

05:02.560 --> 05:03.560
然后练习一下

05:03.560 --> 05:04.560
cars indicator

05:04.560 --> 05:05.560
cars indicator

05:05.560 --> 05:06.560
哦

05:06.560 --> 05:07.560
去选中一些元素

05:07.560 --> 05:08.560
试一下啊

05:08.560 --> 05:09.560
好了呗

05:09.560 --> 05:10.560
好

05:10.560 --> 05:11.560
OK啊咱们继续

05:11.560 --> 05:12.560
这是第一个API

05:12.560 --> 05:13.560
简单啊

05:13.560 --> 05:14.560
忘了就在查

05:14.560 --> 05:16.560
第二个的是控制内样式

05:16.560 --> 05:17.560
这个网页是干嘛的呢

05:17.560 --> 05:18.560
你看啊

05:18.560 --> 05:19.560
我们之前呢

05:19.560 --> 05:20.560
比方说我们就随便找一个吧

05:20.560 --> 05:21.560
就找这个DIV

05:21.560 --> 05:23.560
我们把它找到

05:24.560 --> 05:25.560
拿到这个DIV

05:25.560 --> 05:28.560
document query signature

05:28.560 --> 05:31.560
demo container

05:31.560 --> 05:34.000
好

05:34.000 --> 05:35.000
找个DIV

05:35.000 --> 05:36.000
这个DIV呢

05:36.000 --> 05:37.000
我们过去要控制它内样式

05:37.000 --> 05:38.000
是不是

05:38.000 --> 05:39.000
过去内样式

05:39.000 --> 05:40.000
用class name

05:40.000 --> 05:41.000
对不对

05:41.000 --> 05:42.000
是不是拿到它的所有内样式啊

05:42.000 --> 05:43.000
对吧

05:43.000 --> 05:44.000
如果说它有多个内样式呢

05:44.000 --> 05:45.000
比方说我这里随便

05:45.000 --> 05:46.000
应该加一个

05:46.000 --> 05:47.000
AP

05:47.000 --> 05:48.000
那么我现在

05:48.000 --> 05:49.000
class name

05:49.000 --> 05:50.000
拿到就是这个东西

05:50.000 --> 05:51.000
一个字母串

05:51.000 --> 05:52.000
对不对

05:52.000 --> 05:55.000
那么现在的H5出来过后呢

05:55.000 --> 05:56.000
不是针对你

05:56.000 --> 05:57.000
确实打击

05:57.000 --> 05:58.000
所以说H5过后呢

05:58.000 --> 06:00.000
它给我们提供了这么一个API

06:00.000 --> 06:01.000
叫做class list

06:01.000 --> 06:02.000
这样子呢

06:02.000 --> 06:03.000
获取的它不是一个字母串

06:03.000 --> 06:05.000
获取的是一个字母串的数组

06:05.000 --> 06:07.000
这样子是不是更加明确啊

06:07.000 --> 06:08.000
它有三个的样式

06:08.000 --> 06:09.000
第一个

06:09.000 --> 06:10.000
第二个

06:10.000 --> 06:11.000
第三个

06:11.000 --> 06:12.000
同样的它是一个

06:12.000 --> 06:13.000
呃

06:13.000 --> 06:14.000
它是一个

06:14.000 --> 06:16.000
伪数组啊

06:16.000 --> 06:17.000
而且它这个方

06:17.000 --> 06:19.000
它里边根本提供了一些方法

06:19.000 --> 06:21.000
可以便于我们操作这个内样式

06:21.000 --> 06:23.000
比方说提供了这么一些方法啊

06:23.000 --> 06:26.000
一个是class list

06:26.000 --> 06:27.000
一个是ADD

06:27.000 --> 06:28.000
添加一个的样式

06:28.000 --> 06:30.000
比方添加一个C

06:30.000 --> 06:31.000
你看是不是加了一个C

06:31.000 --> 06:32.000
这个内样式

06:32.000 --> 06:33.000
再添加一个C

06:33.000 --> 06:34.000
它就不会加了

06:34.000 --> 06:35.000
对吧

06:35.000 --> 06:36.000
然后呢

06:36.000 --> 06:38.000
移除class list

06:38.000 --> 06:39.000
remove

06:39.000 --> 06:40.000
C

06:40.000 --> 06:42.000
你看是不是移出一个内样式

06:42.000 --> 06:43.000
对吧

06:43.000 --> 06:44.000
还有就是切换

06:44.000 --> 06:46.000
class list

06:46.000 --> 06:47.000
不用去计啊

06:47.000 --> 06:48.000
我们那里边都有

06:48.000 --> 06:49.000
C

06:49.000 --> 06:50.000
你看

06:50.000 --> 06:51.000
没有就加

06:51.000 --> 06:52.000
有的话就减

06:52.000 --> 06:53.000
没有就加

06:53.000 --> 06:54.000
有的话就减

06:54.000 --> 06:56.000
它用来切换内样式

06:56.000 --> 06:57.000
然后还有什么呢

06:57.000 --> 06:58.000
还有就是包含

06:58.000 --> 07:00.000
可以判断一个内样式

07:00.000 --> 07:01.000
是否存在

07:01.000 --> 07:03.000
div class list contains

07:03.000 --> 07:06.000
是否包含的内样式C

07:06.000 --> 07:07.000
force

07:07.000 --> 07:08.000
不包含

07:08.000 --> 07:10.000
该添加一个C

07:10.000 --> 07:11.000
然后再看是否包含

07:11.000 --> 07:12.000
q

07:12.000 --> 07:13.000
包含

07:13.000 --> 07:14.000
对吧

07:14.000 --> 07:15.000
就这么一

07:15.000 --> 07:16.000
这个意思啊

07:16.000 --> 07:17.000
这就是

07:17.000 --> 07:18.000
咱们这个

07:18.000 --> 07:19.000
这几个API

07:19.000 --> 07:20.000
特别简单

07:20.000 --> 07:21.000
ok

07:21.000 --> 07:23.000
这就是控制内样式

07:23.000 --> 07:25.000
再下一个

07:25.000 --> 07:26.000
同学们暂停视频啊

07:26.000 --> 07:27.000
暂停视频

07:27.000 --> 07:28.000
随便找个网页

07:28.000 --> 07:29.000
随便找一个元素

07:29.000 --> 07:31.000
练习一下这几个方法

07:31.000 --> 07:33.000
来看一下这个效果

07:33.000 --> 07:35.000
好 ok 咩

07:35.000 --> 07:36.000
咱们继续啊

07:36.000 --> 07:38.000
下一个本地存储

07:38.000 --> 07:39.000
两个函数

07:39.000 --> 07:40.000
两个函数

07:40.000 --> 07:41.000
一个是local storage

07:41.000 --> 07:43.000
一个是session storage

07:43.000 --> 07:45.000
那么都是用来做本地存储的

07:45.000 --> 07:46.000
因为以前

07:46.000 --> 07:48.000
我们在网页上啊

07:48.000 --> 07:50.000
我们所有东西都保存了

07:50.000 --> 07:51.000
变量里面

07:51.000 --> 07:52.000
变量有个什么问题呢

07:52.000 --> 07:53.000
就是我们一旦刷新页面

07:53.000 --> 07:54.000
这个变量纸就会消失

07:54.000 --> 07:56.000
表面的程序运行到中途

07:56.000 --> 07:58.000
这个变量的指引等于别的指的

07:58.000 --> 07:59.000
但是你刷新页面

07:59.000 --> 08:01.000
利用从最开始重新运行一遍

08:01.000 --> 08:03.000
这是我们以前网页的特点

08:03.000 --> 08:05.000
它不能做一些持就性的保存

08:05.000 --> 08:07.000
因为我们变量的数据呢

08:07.000 --> 08:08.000
都是在内存里边

08:08.000 --> 08:10.000
而要做持就性的保存

08:10.000 --> 08:12.000
必须要保存到硬盘

08:12.000 --> 08:13.000
在持盘上

08:13.000 --> 08:15.000
那么以前这个网页上

08:15.000 --> 08:16.000
是没有这个功能的

08:16.000 --> 08:18.000
以前的保存的

08:18.000 --> 08:19.000
所有的保存

08:19.000 --> 08:20.000
永久保存的操作

08:20.000 --> 08:22.000
都必须要放到服务器

08:22.000 --> 08:23.000
你们以后会学习

08:23.000 --> 08:24.000
放到服务器上

08:24.000 --> 08:26.000
然后通过远程通信来解决

08:26.000 --> 08:28.000
那么现在H5出来过后

08:28.000 --> 08:29.000
就夹了这么两个东西

08:29.000 --> 08:31.000
它就可以让我们网页

08:31.000 --> 08:33.000
在本地去保存一些内容

08:33.000 --> 08:34.000
就可以让我们

08:34.000 --> 08:36.000
实现这样的一个效果

08:36.000 --> 08:38.000
那么但是这两个东西

08:38.000 --> 08:39.000
不是说以后

08:39.000 --> 08:40.000
所有东西全部保存在这

08:40.000 --> 08:41.000
比如说账号密码

08:41.000 --> 08:42.000
全部保存在这

08:42.000 --> 08:43.000
它肯定不是的

08:43.000 --> 08:45.000
我们保存一些小的数据

08:45.000 --> 08:46.000
比方说网页上有的时候

08:46.000 --> 08:47.000
可以谈一些广告

08:47.000 --> 08:49.000
或者可以做一些

08:49.000 --> 08:51.000
新手提示

08:51.000 --> 08:52.000
这些东西

08:52.000 --> 08:53.000
一些提示的东西

08:53.000 --> 08:54.000
那么如果说

08:54.000 --> 08:55.000
应该勾选上

08:55.000 --> 08:56.000
以后不再提示

08:56.000 --> 08:59.000
那么它就把你的选中

08:59.000 --> 09:00.000
做个记录

09:00.000 --> 09:01.000
就记录在本地

09:01.000 --> 09:03.000
一个noh storage里边

09:03.000 --> 09:04.000
做一个永久保存

09:04.000 --> 09:05.000
下一次打开网页

09:05.000 --> 09:06.000
它就不会给你提示

09:06.000 --> 09:07.000
不会来反立

09:07.000 --> 09:09.000
那就这么一个效果

09:09.000 --> 09:11.000
那么我们来试一下吧

09:11.000 --> 09:12.000
noh storage

09:12.000 --> 09:14.000
noh storage

09:14.000 --> 09:17.820
里边set item

09:17.820 --> 09:19.820
传两个值

09:19.820 --> 09:20.820
两个参数

09:20.820 --> 09:22.820
第一个参数叫做键

09:22.820 --> 09:23.820
第二个参数叫做值

09:23.820 --> 09:24.820
都是字不刷

09:24.820 --> 09:26.820
什么叫键呢

09:26.820 --> 09:28.820
我们这里有个概念

09:28.820 --> 09:29.820
第一次接触这个概念

09:29.820 --> 09:30.820
叫键值队

09:30.820 --> 09:31.820
当然有些同学

09:31.820 --> 09:32.820
可能接触过的

09:32.820 --> 09:33.820
什么叫键值队

09:33.820 --> 09:34.820
我们这个世界上

09:34.820 --> 09:36.820
到处充次的键值队

09:36.820 --> 09:37.820
就是一个东西

09:37.820 --> 09:38.820
对应一个东西

09:38.820 --> 09:39.820
就这个意思

09:39.820 --> 09:41.820
比方说你的身份证号

09:41.820 --> 09:42.820
对你的个人

09:42.820 --> 09:44.820
这就是键值队

09:44.820 --> 09:45.820
键值队有这么一个特点

09:45.820 --> 09:47.820
就是键是唯一的

09:47.820 --> 09:49.820
它不能重复

09:49.820 --> 09:51.820
比方说我们人的

09:51.820 --> 09:53.820
身份证和姓名

09:53.820 --> 09:54.820
你们觉得这两个东西

09:54.820 --> 09:55.820
哪个可以做

09:55.820 --> 09:56.820
如果说他们要

09:56.820 --> 09:57.820
成一个段的话

09:57.820 --> 09:59.820
哪个作为键比较好

09:59.820 --> 10:00.820
是不是身份证

10:00.820 --> 10:01.820
身份证不能重复

10:01.820 --> 10:03.820
而姓名是可以重复的

10:03.820 --> 10:04.820
对不对

10:04.820 --> 10:05.820
那就是键值队

10:05.820 --> 10:07.820
键值队其实在很多地方

10:07.820 --> 10:08.820
无论是现实的情况

10:08.820 --> 10:10.820
还是在我们的程序开发中

10:10.820 --> 10:11.820
大物出可见

10:11.820 --> 10:13.820
比方说你写个对象

10:13.820 --> 10:14.820
只是你们以前

10:14.820 --> 10:18.710
没有那样教而已

10:18.710 --> 10:20.710
这个属性名就是键

10:20.710 --> 10:21.710
A就是键

10:21.710 --> 10:22.710
B就是它的值

10:22.710 --> 10:23.710
B就是键

10:23.710 --> 10:24.710
R就是它的值

10:24.710 --> 10:25.710
这就是一个键值队

10:25.710 --> 10:26.710
第二个键值队

10:26.710 --> 10:27.710
就是一个东西对应

10:27.710 --> 10:28.710
一个东西就是键值队

10:28.710 --> 10:29.710
那么你看一下

10:29.710 --> 10:30.710
对象里边

10:30.710 --> 10:32.710
属性是不是不能重复的

10:32.710 --> 10:34.710
属性的名字得唯一

10:34.710 --> 10:35.710
它不可能出现

10:35.710 --> 10:36.710
两个同名的属性

10:36.710 --> 10:37.710
对不对

10:37.710 --> 10:38.710
所以这就是个键值队

10:38.710 --> 10:40.710
它包括我们的元素里边

10:40.710 --> 10:41.710
到处是键值队

10:41.710 --> 10:43.710
比方说这个Type

10:45.710 --> 10:47.710
还有一些自定义的属性

10:47.710 --> 10:48.710
那么这个

10:48.710 --> 10:49.710
这就是键

10:49.710 --> 10:50.710
这就是值

10:50.710 --> 10:51.710
这就是键值队

10:51.710 --> 10:53.710
键值队可以用在任何地方

10:53.710 --> 10:58.300
那么我们刚才看到这

10:58.300 --> 10:59.300
控材这里

10:59.300 --> 11:00.300
第一个就是键

11:00.300 --> 11:02.300
就是你要存一个东西

11:02.300 --> 11:03.300
给它取个名字

11:03.300 --> 11:05.300
一个唯一的名字就是键

11:05.300 --> 11:06.300
给它取个名字吧

11:06.300 --> 11:07.300
比方说里面

11:07.300 --> 11:08.300
它取个名字

11:08.300 --> 11:09.300
Test 123

11:09.300 --> 11:10.300
完成

11:11.300 --> 11:12.300
存了一个名字

11:12.300 --> 11:13.300
为Test的东西

11:13.300 --> 11:15.300
它的值是123

11:15.300 --> 11:16.300
我们再来存一个

11:16.300 --> 11:18.300
再存一个Test2

11:18.300 --> 11:19.300
也是123

11:19.300 --> 11:20.300
它就完成了

11:20.300 --> 11:21.300
它存进去了

11:21.300 --> 11:22.300
然后我们在哪里看呢

11:22.300 --> 11:24.300
在哪里可以看到它存进去了呢

11:24.300 --> 11:26.300
我们可以找到这个

11:26.300 --> 11:28.300
浏览器里面调词工具

11:28.300 --> 11:29.300
叫Application

11:30.300 --> 11:32.300
你看这有个Local Storage

11:32.300 --> 11:33.300
在京东这个网页里边

11:33.300 --> 11:35.300
我就在存了两个东西

11:35.300 --> 11:37.300
一个是Test2 123

11:37.300 --> 11:38.300
当然还有些别的

11:38.300 --> 11:39.300
是京东自己存的

11:39.300 --> 11:41.300
存了一些小东西进去

11:41.300 --> 11:43.300
Test 123

11:43.300 --> 11:45.300
这就是我存的东西

11:45.300 --> 11:46.300
存的两个字不错

11:46.300 --> 11:48.300
它只能存字不错

11:48.300 --> 11:49.300
Local Storage

11:50.300 --> 11:52.300
那么Sation Storage

11:52.300 --> 11:53.300
效果是一样的

11:53.300 --> 11:55.300
咱们来看一下Sation Storage

11:55.300 --> 11:56.300
一模一样的用法

11:56.300 --> 11:58.300
一点区别都没有

11:58.300 --> 12:00.300
给它存个A等于1

12:00.300 --> 12:02.300
看一下Sation Storage

12:02.300 --> 12:03.300
以为我这里没有存字不错

12:03.300 --> 12:05.300
它会自动转换成字不错

12:05.300 --> 12:07.300
你看是不是存了一个A等于1

12:08.300 --> 12:09.300
就这两个地方可以存

12:09.300 --> 12:11.300
那么这两个有什么区别呢

12:11.300 --> 12:12.300
有什么区别呢

12:12.300 --> 12:14.300
我们把浏览器关掉看一下

12:15.300 --> 12:16.300
重新打开

12:16.300 --> 12:17.300
京东

12:21.700 --> 12:22.700
到这

12:22.700 --> 12:23.700
过来

12:23.700 --> 12:27.360
好

12:27.360 --> 12:28.360
我们看Local Storage里边

12:28.360 --> 12:30.360
Test2是不是还在

12:30.360 --> 12:31.360
对吧

12:31.360 --> 12:32.360
重新打开网页

12:32.360 --> 12:33.360
并没有让我们之前的消失

12:33.360 --> 12:34.360
Test2

12:36.360 --> 12:37.360
Test2

12:37.360 --> 12:39.360
难道京东他给我删掉了

12:40.360 --> 12:42.360
他做一些存处

12:42.360 --> 12:44.360
可能要做一些山处

12:44.360 --> 12:46.360
我们看一下Sation Storage

12:46.360 --> 12:47.360
所以Sation Storage里边

12:47.360 --> 12:49.360
A等于1没了

12:49.360 --> 12:50.360
但是Local Storage里边

12:50.360 --> 12:52.360
是不是我们的东西还在

12:52.360 --> 12:53.360
对吧

12:53.360 --> 12:54.360
刚才那个名字

12:54.360 --> 12:56.360
可能被京东山处掉了

12:56.360 --> 12:57.360
那么我们存的东西

12:57.360 --> 12:58.360
是不是在

12:58.360 --> 12:59.360
所以Local Storage

12:59.360 --> 13:00.360
跟Sation Storage的区别

13:00.360 --> 13:01.360
就是它是永久存处

13:01.360 --> 13:03.360
除非你手动把它清除掉

13:03.360 --> 13:05.360
或者是你利用一些

13:06.360 --> 13:08.360
什么电脑管架之类的

13:08.360 --> 13:09.360
把它清除掉了

13:09.360 --> 13:11.360
否则它就一直存在

13:12.360 --> 13:13.360
当然

13:13.360 --> 13:14.360
像Local Storage

13:14.360 --> 13:15.360
它又不可能存太多的东西

13:15.360 --> 13:16.360
你可要存十几个

13:16.360 --> 13:17.360
二十个G

13:17.360 --> 13:18.360
那是不可能的

13:18.360 --> 13:19.360
它只有几兆的空间

13:20.360 --> 13:21.360
然后Sation Storage

13:21.360 --> 13:24.360
它就是关掉浏览器过后

13:24.360 --> 13:25.360
它就没了

13:25.360 --> 13:26.360
这就是两个的区别

13:26.360 --> 13:27.360
我们平时用的比较多的

13:27.360 --> 13:29.360
是Local Storage

13:30.360 --> 13:31.360
那么这边可以存

13:31.360 --> 13:33.360
存进去过我们怎么

13:33.360 --> 13:34.360
读了

13:34.360 --> 13:35.360
比方说我们在这里

13:35.360 --> 13:36.360
要读它

13:36.360 --> 13:37.360
怎么读呢

13:37.360 --> 13:39.360
Local Storage getsItem

13:39.360 --> 13:40.360
把键填上

13:40.360 --> 13:41.360
因为键的值

13:41.360 --> 13:42.360
键是唯一的

13:42.360 --> 13:43.360
它通过这个键

13:43.360 --> 13:44.360
就找了个值

13:44.360 --> 13:45.360
然后就一二三

13:45.360 --> 13:46.360
可能读出来

13:46.360 --> 13:47.360
就这么简单

13:47.360 --> 13:49.360
Sation Storage的读法是一样的

13:49.360 --> 13:51.360
那如果要删除呢

13:51.360 --> 13:53.360
Local Storage removeItem

13:54.360 --> 13:55.360
开始二

13:55.360 --> 13:56.360
那么这一下就没了

13:57.360 --> 13:58.360
就这么简单

13:58.360 --> 13:59.360
就是一个可以存东西的地方

13:59.360 --> 14:00.360
存的是什么

14:00.360 --> 14:01.360
存的是支付刷

14:02.360 --> 14:03.360
就这个点

14:03.360 --> 14:04.360
好 接下来

14:04.360 --> 14:05.360
我给大家说

14:05.360 --> 14:06.360
就都有的一个

14:06.360 --> 14:07.360
都有这个文档的

14:07.360 --> 14:08.360
还clear

14:08.360 --> 14:09.360
clear就全部删除

14:09.360 --> 14:13.570
Local Storage

14:13.570 --> 14:14.570
clear

14:14.570 --> 14:15.570
那么就把其他都全部删掉了

14:15.570 --> 14:17.570
心中自己存的也删掉了

14:18.570 --> 14:20.570
好 这就是Local Storage

14:20.570 --> 14:21.570
然后这里呢

14:21.570 --> 14:22.570
我要给大家说一个点

14:22.570 --> 14:24.570
就是Local Storage里面呢

14:24.570 --> 14:25.570
无论是Local Storage

14:25.570 --> 14:26.570
还是Sation Storage

14:26.570 --> 14:28.570
它只能存支付刷

14:28.570 --> 14:29.570
那如果说

14:29.570 --> 14:30.570
你要存一个对象

14:30.570 --> 14:31.570
怎么办呢

14:31.570 --> 14:32.570
你再把这个对象啊

14:32.570 --> 14:33.570
无论是对象

14:33.570 --> 14:34.570
还是输出

14:34.570 --> 14:35.570
它都没发存的

14:35.570 --> 14:36.570
那你要把对象

14:36.570 --> 14:37.570
转换存支付刷

14:37.570 --> 14:38.570
来进行存出

14:38.570 --> 14:39.570
我举个例子

14:39.570 --> 14:40.570
比方说有这么一个对象

14:41.570 --> 14:42.570
在这吧

14:42.570 --> 14:43.570
OBG

14:43.570 --> 14:44.570
就这个对象

14:44.570 --> 14:45.570
比方说有这么一个对象

14:45.570 --> 14:46.570
我要去存进去

14:46.570 --> 14:47.570
那怎么存呢

14:48.570 --> 14:49.570
没发存

14:49.570 --> 14:50.570
要把它转成支付刷

14:50.570 --> 14:51.570
那里有很多种转法

14:51.570 --> 14:52.570
比方说你可以转成这样子

14:53.570 --> 14:54.570
B等于2

14:54.570 --> 14:55.570
转成这种格式

14:55.570 --> 14:57.570
也或者是转成这种格式

14:59.570 --> 15:00.570
总之你要用这种格式

15:00.570 --> 15:01.570
对吧

15:01.570 --> 15:02.570
转换要有一种格式

15:03.570 --> 15:04.570
那么平时呢

15:04.570 --> 15:06.570
我们一般会使用一些标准的格式

15:06.570 --> 15:08.570
不会去自定义这种格式

15:08.570 --> 15:09.570
一种标准的格式

15:09.570 --> 15:10.570
这种标准的格式呢

15:10.570 --> 15:11.570
叫做接成

15:11.570 --> 15:12.570
所以接成的叫做一个

15:12.570 --> 15:14.570
它是一个支付刷

15:14.570 --> 15:16.570
接成是一个支付刷格式

15:18.570 --> 15:19.570
标准格式

15:19.570 --> 15:20.570
这个这种格式呢

15:20.570 --> 15:22.570
我们以后学网络那一块

15:22.570 --> 15:23.570
还会接触

15:23.570 --> 15:25.570
非常有用的

15:25.570 --> 15:27.570
非常的简单

15:27.570 --> 15:28.570
简单的不得了

15:28.570 --> 15:29.570
因为我们学的是介式

15:29.570 --> 15:30.570
学的是全前端

15:30.570 --> 15:32.570
你要说你学的是加碼

15:32.570 --> 15:33.570
学的是C下谱

15:33.570 --> 15:35.570
那么这一块你还要去

15:35.570 --> 15:37.570
好好熟悉一下

15:37.570 --> 15:40.570
但是介式跟前端的介式对象

15:40.570 --> 15:43.570
那相似程度简直就是近亲了

15:43.570 --> 15:44.570
就是两兄弟了

15:44.570 --> 15:46.570
几乎是双胞胎

15:46.570 --> 15:48.570
它的写法跟介式对象的写法

15:48.570 --> 15:50.570
跟介式数组的写法一模一样

15:50.570 --> 15:51.570
就一个区别

15:51.570 --> 15:55.570
就是属性必须加上双硬

15:55.570 --> 15:56.570
就这么简单

15:56.570 --> 15:58.570
比如说我们写个支付刷

15:58.570 --> 15:59.570
要写个介式的对象

15:59.570 --> 16:01.570
A等EB等于2

16:01.570 --> 16:02.570
这是介式的写法

16:02.570 --> 16:03.570
对吧

16:03.570 --> 16:05.570
介式的写法就是把前面加上

16:05.570 --> 16:06.570
加上一个双硬

16:06.570 --> 16:07.570
没了

16:07.570 --> 16:08.570
所以我们前端学习的

16:08.570 --> 16:10.570
这个介式格式是极其简单的

16:10.570 --> 16:12.570
这就是一个介式格式的支付刷

16:12.570 --> 16:13.570
那么写出来的话

16:13.570 --> 16:14.570
写成支付刷的话

16:14.570 --> 16:16.570
那你要进行一下转移

16:16.570 --> 16:18.570
那么你前面可以用单硬

16:18.570 --> 16:20.570
那么就不需要转移双硬

16:20.570 --> 16:22.570
这就是一个介式格式的支付刷

16:22.570 --> 16:23.570
就这么简单

16:23.570 --> 16:25.570
那么现在我要把它转换成

16:25.570 --> 16:26.570
它怎么转换呢

16:26.570 --> 16:27.570
我们可以手动转换

16:27.570 --> 16:28.570
太麻烦了

16:28.570 --> 16:29.570
我们可以利用

16:30.570 --> 16:32.570
介式根本提供了两个函数

16:32.570 --> 16:35.570
一个叫做介省的stream

16:35.570 --> 16:36.570
stream是什么意思

16:36.570 --> 16:37.570
支付刷

16:37.570 --> 16:38.570
就是把对象转成支付刷

16:38.570 --> 16:39.570
你传入一个对象

16:39.570 --> 16:40.570
它给你返回一个支付刷

16:41.570 --> 16:42.570
就是介省格式

16:42.570 --> 16:43.570
你看

16:43.570 --> 16:44.570
是不是A B

16:44.570 --> 16:45.570
它转移过了

16:46.570 --> 16:48.570
那么拿到这个支付刷过后

16:48.570 --> 16:50.570
比方说我们拿到一个支付刷

16:50.570 --> 16:51.570
我要把它转换成对象

16:51.570 --> 16:54.570
就使用介省Pose解析

16:54.570 --> 16:55.570
它可以把一个

16:55.570 --> 16:56.570
介省格式支付刷

16:56.570 --> 16:58.570
转换成一个对象

16:58.570 --> 17:00.570
可就这么简单

17:00.570 --> 17:01.570
所以说你要保存到

17:01.570 --> 17:02.570
local storage里面

17:02.570 --> 17:03.570
要保存对象怎么办

17:03.570 --> 17:05.570
先把它转换成支付刷

17:05.570 --> 17:06.570
再进行保存

17:06.570 --> 17:07.570
比方说保存一下

17:07.570 --> 17:09.570
介省

17:09.570 --> 17:11.570
obg

17:11.570 --> 17:12.570
是不是拿到支付刷了

17:12.570 --> 17:13.570
然后再进行保存

17:13.570 --> 17:14.570
local storage

17:14.570 --> 17:15.570
set item

17:17.570 --> 17:19.570
然后abc

17:19.570 --> 17:21.570
str

17:21.570 --> 17:22.570
你看

17:22.570 --> 17:23.570
保存一个支付刷进去

17:23.570 --> 17:24.570
这是个支付刷

17:24.570 --> 17:25.570
其实我们在浏览器

17:25.570 --> 17:26.570
调试工具里面

17:26.570 --> 17:27.570
它发现它是一个介省格式的

17:27.570 --> 17:28.570
支付刷

17:28.570 --> 17:30.570
它可以自动的把它解析成对象

17:30.570 --> 17:31.570
电源我们查看

17:31.570 --> 17:33.570
非常方便

17:33.570 --> 17:34.570
那么到时候

17:34.570 --> 17:35.570
读出来的时候怎么读呢

17:35.570 --> 17:36.570
local storage

17:36.570 --> 17:37.570
get item

17:39.570 --> 17:40.570
get item

17:40.570 --> 17:41.570
abc

17:41.570 --> 17:42.570
然后呢

17:42.570 --> 17:43.570
注意一下

17:43.570 --> 17:44.570
这拿到一个支付刷

17:49.540 --> 17:50.540
我来看一下

17:50.540 --> 17:51.540
str拿到是不是一个支付刷

17:51.540 --> 17:54.540
要把它转换成对象

17:54.540 --> 17:55.540
把读出来

17:56.540 --> 17:58.540
这就是保存一些

17:58.540 --> 18:00.540
保存一些复杂结构的数据

18:00.540 --> 18:01.540
比方说对象

18:01.540 --> 18:02.540
像数主

18:02.540 --> 18:03.540
可以用这种方式

18:04.540 --> 18:05.540
我们先了解

18:05.540 --> 18:07.540
小点了解它能做什么

18:07.540 --> 18:08.540
我们将来遇到一些

18:08.540 --> 18:09.540
场景的时候

18:09.540 --> 18:10.540
自然而然就会想到它

18:12.540 --> 18:13.540
这是本地存储

18:13.540 --> 18:15.540
下一个渲染针

18:15.540 --> 18:16.540
这是什么概念呢

18:16.540 --> 18:18.540
这个东西跟我们平时开发

18:19.540 --> 18:20.540
如果说你不用自己

18:20.540 --> 18:21.540
你不用自己去

18:21.540 --> 18:22.540
做介石动画的话

18:22.540 --> 18:23.540
一般来说

18:23.540 --> 18:24.540
不需要你自己去

18:24.540 --> 18:25.540
去写介石动画

18:26.540 --> 18:27.540
一般来说

18:27.540 --> 18:28.540
如果说你需要

18:28.540 --> 18:30.540
自己去写介石动画

18:30.540 --> 18:32.540
比方说你每隔一段时间

18:32.540 --> 18:33.540
改变一个远处的位置

18:33.540 --> 18:34.540
如果说你只需要

18:34.540 --> 18:35.540
自己去写

18:35.540 --> 18:36.540
那么你要知道

18:36.540 --> 18:37.540
这个渲染针的概念

18:38.540 --> 18:39.540
它可以让我们的动画

18:39.540 --> 18:40.540
更加平和

18:41.540 --> 18:42.540
什么意思呢

18:42.540 --> 18:43.540
看一下它的原理

18:44.540 --> 18:45.540
我们的浏览器

18:45.540 --> 18:46.540
它实际上

18:46.540 --> 18:47.540
它会对网页

18:47.540 --> 18:48.540
进行不断的渲染

18:48.540 --> 18:49.540
就你动都不动它

18:49.540 --> 18:50.540
它一定会不停的渲染

18:51.540 --> 18:52.540
一般来说

18:52.540 --> 18:53.540
这个速度是每秒

18:53.540 --> 18:54.540
60次

18:54.540 --> 18:55.540
我们每渲染一次

18:55.540 --> 18:56.540
成为一针

18:56.540 --> 18:57.540
因此我们可以说

18:57.540 --> 18:59.540
浏览器的渲染速率是60帧

18:59.540 --> 19:00.540
但是它不是一定的

19:00.540 --> 19:02.540
它会受到各种因素的影响

19:02.540 --> 19:04.540
因此针率往往有浮动

19:04.540 --> 19:05.540
比方说这个时候

19:05.540 --> 19:06.540
介石蛋坝一直在运行

19:06.540 --> 19:08.540
就导致浏览器没发现了

19:08.540 --> 19:09.540
它就会推迟

19:09.540 --> 19:10.540
就导致了这一针很长

19:11.540 --> 19:14.540
那么可能一秒钟就没有浏览器了

19:14.540 --> 19:16.540
或者是这个时候浏览器

19:17.540 --> 19:19.540
你的操作系统很卡

19:19.540 --> 19:20.540
它可能也达不到60帧

19:21.540 --> 19:22.540
或者是有的时候

19:22.540 --> 19:24.540
你的电脑配置很高

19:24.540 --> 19:25.540
它可能超过60帧

19:25.540 --> 19:26.540
都有可能

19:26.540 --> 19:27.540
它的针率是浮动的

19:27.540 --> 19:29.540
这就会导致一个问题

19:29.540 --> 19:30.540
如果说我们以前

19:30.540 --> 19:31.540
去做一些动画效果

19:31.540 --> 19:32.540
像比方说我们在

19:32.540 --> 19:33.540
写的Centrum Turbo里边

19:33.540 --> 19:35.540
去写这么一个东西

19:35.540 --> 19:37.540
写个伟代码

19:37.540 --> 19:41.050
我们在技时器里边

19:41.050 --> 19:42.050
每隔一段时间

19:42.050 --> 19:43.050
去做一件事

19:43.050 --> 19:44.050
那么这个事

19:44.050 --> 19:45.050
就比方说

19:45.050 --> 19:46.050
举个例子

19:46.050 --> 19:47.050
去做了什么事呢

19:48.050 --> 19:49.050
我就把一个元素

19:49.050 --> 19:51.050
它的Left

19:51.050 --> 19:52.050
加加

19:52.050 --> 19:53.050
写个伟代码

19:53.050 --> 19:54.050
并不是真实的代码

19:54.050 --> 19:55.050
就这么个意思

19:56.050 --> 19:58.050
把它的位置增加

19:59.050 --> 20:01.050
做了这么一个动画效果

20:01.050 --> 20:03.050
那么就会导致一个什么问题呢

20:03.050 --> 20:05.050
由于我们的针率是浮动的

20:05.050 --> 20:07.050
而我们这个间隔时间

20:07.050 --> 20:08.050
是定时的

20:08.050 --> 20:09.050
但是这个间隔时间

20:09.050 --> 20:10.050
也是不准确的

20:11.050 --> 20:12.050
我们无法达到一个

20:12.050 --> 20:13.050
准确的时间

20:13.050 --> 20:14.050
它就有可能会出现

20:14.050 --> 20:15.050
这种情况

20:16.050 --> 20:17.050
出现夹针和跳针

20:18.050 --> 20:19.050
什么叫夹针和跳针

20:19.050 --> 20:20.050
看这个图就知道了

20:20.050 --> 20:22.050
我们这个红色的表示

20:22.050 --> 20:23.050
美国20毫秒

20:23.050 --> 20:25.050
执行了这个函数

20:25.050 --> 20:26.050
这个玩意

20:26.050 --> 20:27.050
我要给你演示

20:27.050 --> 20:28.050
还不好演示

20:28.050 --> 20:29.050
但是你看分析图

20:29.050 --> 20:30.050
就知道了

20:31.050 --> 20:32.050
你看这里

20:32.050 --> 20:33.050
这个红色之间

20:33.050 --> 20:34.050
间隔时间是相等的

20:34.050 --> 20:35.050
20毫秒

20:35.050 --> 20:38.050
但是针率是有浮动的

20:38.050 --> 20:39.050
你看这个

20:39.050 --> 20:40.050
每一个蓝色的块

20:40.050 --> 20:41.050
就是一针

20:42.050 --> 20:43.050
那就会导致一个

20:43.050 --> 20:44.050
什么问题呢

20:44.050 --> 20:45.050
你看啊

20:45.050 --> 20:46.050
浏览器的渲染时间点

20:46.050 --> 20:48.050
在这里已经渲染

20:48.050 --> 20:49.050
一针结束了

20:49.050 --> 20:50.050
渲染

20:50.050 --> 20:51.050
一针结束了

20:51.050 --> 20:52.050
一针结束了

20:52.050 --> 20:53.050
渲染

20:56.050 --> 20:57.050
你看有一些

20:57.050 --> 20:58.050
什么叫夹针

20:59.050 --> 21:00.050
就是在一针中

21:00.050 --> 21:02.050
出现了两个动画效果

21:02.050 --> 21:03.050
改变位置的

21:03.050 --> 21:05.050
你说这个东西有意义吗

21:05.050 --> 21:07.050
你这个时候改变了

21:07.050 --> 21:08.050
改变了位置

21:08.050 --> 21:09.050
我又没有渲染

21:09.050 --> 21:11.050
一会你又改变了位置

21:11.050 --> 21:12.050
我这个时候渲染

21:12.050 --> 21:13.050
所以我这个一次渲染

21:13.050 --> 21:14.050
就渲染了谁

21:14.050 --> 21:15.050
只渲染了他

21:15.050 --> 21:17.050
前面有没有渲染

21:17.050 --> 21:18.050
没有渲染

21:18.050 --> 21:19.050
那么就会出现

21:20.050 --> 21:22.050
动画就会出现跳跃

21:22.050 --> 21:23.050
就从这个位置

21:23.050 --> 21:24.050
你看这个位置渲染了

21:24.050 --> 21:26.050
这个位置也渲染了

21:26.050 --> 21:27.050
他改变了

21:27.050 --> 21:28.050
改变了

21:28.050 --> 21:30.050
然后这个东西

21:30.050 --> 21:31.050
这个东西

21:31.050 --> 21:33.050
是不是没有做任何事情

21:33.050 --> 21:35.050
这一针是没有做任何事情

21:35.050 --> 21:37.050
然后这里改变

21:37.050 --> 21:38.050
又改变

21:38.050 --> 21:39.050
所以说他就会出现

21:39.050 --> 21:40.050
一

21:40.050 --> 21:41.050
二

21:42.050 --> 21:43.050
四

21:43.050 --> 21:45.050
从一二直接跳到四这个位置了

21:45.050 --> 21:46.050
那么动画效果上

21:46.050 --> 21:48.050
就感觉好像出现卡了一下

21:48.050 --> 21:50.050
虽然很细微

21:50.050 --> 21:51.050
但是呢

21:51.050 --> 21:52.050
这种情况累计多了

21:52.050 --> 21:53.050
往往是感觉

21:53.050 --> 21:55.050
动画不流畅

21:55.050 --> 21:56.050
这就是以前使用

21:56.050 --> 21:57.050
这次Interfer的问题

21:57.050 --> 21:58.050
那么这个问题

21:58.050 --> 21:59.050
怎么解决的

21:59.050 --> 22:00.050
以前是没法解决的

22:00.050 --> 22:01.050
根本就没法解决

22:01.050 --> 22:03.050
那么现在可以解决了

22:03.050 --> 22:04.050
我们的最理想的状态就是

22:04.050 --> 22:06.050
我们的改变

22:06.050 --> 22:07.050
就位置的改变

22:07.050 --> 22:08.050
动画效果的改变

22:08.050 --> 22:10.050
最好是跟真率是同步的

22:11.050 --> 22:12.050
就是我做一次改变

22:12.050 --> 22:13.050
你渲染一下

22:13.050 --> 22:14.050
做一次改变

22:14.050 --> 22:15.050
渲染一下

22:15.050 --> 22:16.050
就是我们在每一针中间

22:16.050 --> 22:17.050
做一些改变

22:17.050 --> 22:18.050
做一些改变

22:18.050 --> 22:21.050
那么这就是真炫了

22:21.050 --> 22:23.050
这样子的动画会流畅很多

22:23.050 --> 22:24.050
那么怎么来实现

22:24.050 --> 22:25.050
这种理想的效果呢

22:25.050 --> 22:27.050
就要使用另外一个寒树

22:27.050 --> 22:28.050
Request animation free

22:28.050 --> 22:30.050
就不用不再用这个Set Interfer了

22:30.050 --> 22:32.050
就说动画不再用它了

22:32.050 --> 22:33.050
而用它

22:33.050 --> 22:34.050
它啥意思呢

22:34.050 --> 22:37.050
就是它里有传了一个回调寒树

22:37.050 --> 22:38.050
这个就高速浏览器

22:38.050 --> 22:41.050
你在下一针渲染之前

22:41.050 --> 22:43.050
运行一次这个回调寒树

22:43.050 --> 22:44.050
运行一次就可以了

22:44.050 --> 22:45.050
然后再炫了

22:46.050 --> 22:47.050
比如说

22:47.050 --> 22:48.050
我这个Request animation

22:48.050 --> 22:49.050
凋用这个寒树

22:49.050 --> 22:50.050
一个寒树传进去了

22:50.050 --> 22:51.050
相当于是在这里卡了一个寒树

22:51.050 --> 22:52.050
它在下一针渲染之前

22:52.050 --> 22:53.050
它就会运行这个寒树

22:53.050 --> 22:54.050
然后再炫了

22:55.050 --> 22:56.050
但是它只有一次

22:57.050 --> 22:59.050
所以说我们如果说要做那种

22:59.050 --> 23:01.050
重复的炫染

23:02.050 --> 23:04.050
就是不断的去改变一些东西

23:04.050 --> 23:06.050
那么我们可以用这样的代把格式

23:06.050 --> 23:07.050
封装一个寒树

23:07.050 --> 23:08.050
这个寒树呢

23:08.050 --> 23:09.050
凋用它

23:10.050 --> 23:11.050
高速浏览器

23:11.050 --> 23:13.050
你在下一针的渲染之前

23:13.050 --> 23:14.050
运行这个寒树

23:15.050 --> 23:16.050
减了我们运行这个寒树

23:16.050 --> 23:18.050
运行的过后你看

23:18.050 --> 23:21.050
高速浏览器在下一针运行之前

23:21.050 --> 23:23.050
你去给我运行这个寒树

23:23.050 --> 23:25.050
就卡了一个寒树进去了

23:25.050 --> 23:27.050
于是等了一会

23:27.050 --> 23:28.050
浏览器下一针

23:28.050 --> 23:29.050
要炫染了

23:29.050 --> 23:30.050
那么它就会运行这个寒树

23:30.050 --> 23:31.050
运行这个寒树

23:31.050 --> 23:32.050
它怎么运行的呢

23:32.050 --> 23:33.050
它说

23:33.050 --> 23:34.050
它首先判断了

23:34.050 --> 23:35.050
这个动画是不是应该停了

23:35.050 --> 23:36.050
因为有些动画

23:36.050 --> 23:38.050
不是一直自运行下去

23:38.050 --> 23:40.050
它有的到那条件过后会停止

23:40.050 --> 23:41.050
如果说停了

23:41.050 --> 23:42.050
那就结束了

23:42.050 --> 23:43.050
那我这个寒树实际上

23:43.050 --> 23:44.050
结束了

23:44.050 --> 23:45.050
你就去后续宣传

23:45.050 --> 23:46.050
完成了

23:46.050 --> 23:47.050
然后如果说

23:47.050 --> 23:48.050
不会停止的话

23:48.050 --> 23:50.050
我就改变目前的远处状态

23:50.050 --> 23:51.050
改变状态

23:51.050 --> 23:52.050
比方说

23:52.050 --> 23:54.050
它的宽度增加

23:54.050 --> 23:55.050
位置改变

23:55.050 --> 23:57.050
总之你去改变

23:57.050 --> 23:58.050
改变完了过后

23:58.050 --> 24:00.050
我再重新调用这个寒树

24:00.050 --> 24:01.050
又重新调用它

24:01.050 --> 24:02.050
一重新调用它

24:02.050 --> 24:05.050
是不是又去注册了一个毁掉

24:05.050 --> 24:06.050
对吧

24:06.050 --> 24:07.050
那么又告诉浏览器

24:07.050 --> 24:09.050
你在下一针的时候

24:09.050 --> 24:11.050
再去运行这个寒树

24:11.050 --> 24:12.050
那么这个

24:12.050 --> 24:13.050
当前这个寒树运行完了

24:13.050 --> 24:14.050
然后浏览器渲染

24:14.050 --> 24:15.050
到了下一针

24:15.050 --> 24:16.050
它又会运行这个寒树

24:16.050 --> 24:17.050
又会运行它

24:17.050 --> 24:18.050
又会运行它的时候

24:18.050 --> 24:19.050
又来判断

24:19.050 --> 24:20.050
又来改变远处状态

24:20.050 --> 24:21.050
然后又调用它

24:21.050 --> 24:23.050
于是又告诉浏览器

24:23.050 --> 24:25.050
在上面了

24:25.050 --> 24:27.050
在这个位置

24:27.050 --> 24:29.050
去运行一下这个寒树

24:29.050 --> 24:31.050
好那么这一次宣传完成

24:31.050 --> 24:32.050
就这样的模式

24:32.050 --> 24:33.050
这个模式看上去

24:33.050 --> 24:35.050
因为它涉及到一个间接地归

24:35.050 --> 24:36.050
所以说这里看上去

24:36.050 --> 24:38.050
有一点绕

24:38.050 --> 24:39.050
绕没关系

24:40.050 --> 24:41.050
不太去写这种动画的

24:41.050 --> 24:42.050
因为你们以后写动画

24:42.050 --> 24:44.050
都是使用第三方库

24:44.050 --> 24:45.050
有些第三方库

24:45.050 --> 24:47.050
就别人已经给你写好了

24:47.050 --> 24:48.050
他就用这种方式给你写好了

24:48.050 --> 24:50.050
你们直接用就完事了

24:50.050 --> 24:52.050
但是你要知道它的原理

24:52.050 --> 24:53.050
它为什么能够平均化

24:53.050 --> 24:54.050
就是因为它使用了

24:54.050 --> 24:56.050
request animation free

24:56.050 --> 24:57.050
你只需要知道

24:57.050 --> 24:58.050
这个东西它能够平均化

24:58.050 --> 24:59.050
宣传就完事了

24:59.050 --> 25:00.050
我们今天的练习体力

25:00.050 --> 25:02.050
也不会出现这个东西

25:02.050 --> 25:03.050
好后边那就是

25:03.050 --> 25:05.050
音视频的API

25:05.050 --> 25:06.050
因为我们前面增加

25:06.050 --> 25:07.050
两个元素的吧

25:07.050 --> 25:08.050
一个是video

25:08.050 --> 25:09.050
那么它给我们介绍了

25:09.050 --> 25:10.050
增加了一些API

25:10.050 --> 25:12.050
就是你获取到video元素

25:12.050 --> 25:13.050
动物元素

25:13.050 --> 25:14.050
你获取到audio动物元素

25:14.050 --> 25:16.050
它里边有些特殊的属性

25:16.050 --> 25:17.050
有一些特殊的方法

25:17.050 --> 25:19.050
有一些特殊的时间

25:19.050 --> 25:20.050
可以供你使用

25:20.050 --> 25:22.050
一个都不要去看

25:22.050 --> 25:24.050
需要用到的时候查阅

25:24.050 --> 25:25.050
完事了

25:25.050 --> 25:26.050
好那么接下来

25:26.050 --> 25:27.050
我们直接开始做

25:27.050 --> 25:28.050
今天的练习体

25:30.490 --> 25:31.490
第一道练习体

25:31.490 --> 25:34.630
哎呀

25:37.630 --> 25:38.630
这里没有效果

25:38.630 --> 25:40.630
所以说我们直接来做

25:40.630 --> 25:42.630
把负责科长代码里面

25:42.630 --> 25:46.100
好这地道题

25:46.100 --> 25:48.100
地道题就做什么意思呢

25:48.100 --> 25:50.100
我的样式那些都给你写好了啊

25:50.100 --> 25:52.100
让你在点击这个li的时候呢

25:52.100 --> 25:54.100
切换内样式

25:54.100 --> 25:55.100
你看这个li有个内样式

25:55.100 --> 25:56.100
iq

25:57.100 --> 25:59.100
就是这个样式

25:59.100 --> 26:00.100
你点它的时候呢

26:00.100 --> 26:02.100
也要把这个内样式切到这儿

26:03.100 --> 26:05.100
这是个非常经典的做法

26:05.100 --> 26:06.100
对吧

26:06.100 --> 26:07.100
切到这儿

26:07.100 --> 26:08.100
就这么个意思

26:08.100 --> 26:10.100
好来我们来写这个接式代码

26:10.100 --> 26:12.100
首先得注册时间吧

26:13.100 --> 26:14.100
对不对

26:14.100 --> 26:15.100
得注册时间吧

26:15.100 --> 26:16.100
给谁注册时间

26:16.100 --> 26:18.100
是不是给所有的li注册时间

26:19.100 --> 26:20.100
对不对

26:20.100 --> 26:21.100
好那么我们是不是要

26:21.100 --> 26:22.100
选中所有的li

26:23.100 --> 26:24.100
那怎么来选中呢

26:26.100 --> 26:28.100
document query是那个调

26:28.100 --> 26:30.100
以后就用它就完事了

26:31.100 --> 26:32.100
选中什么

26:32.100 --> 26:33.100
menu下面的li

26:34.100 --> 26:36.100
选中所有的li

26:37.100 --> 26:39.100
好接下来给li注册点击时间

26:39.100 --> 26:40.100
那么是不是循环它

26:40.100 --> 26:42.100
for i循环

26:43.100 --> 26:45.100
i小u i s 表面是

26:47.100 --> 26:48.100
然后呢找到u i s i

26:48.100 --> 26:49.100
onclick

26:49.100 --> 26:50.100
点击

26:53.100 --> 26:55.100
点击的时候干嘛呢

26:55.100 --> 26:56.100
干嘛

26:56.100 --> 26:58.100
是不是给当前元素加上

26:58.100 --> 26:59.100
active属下

26:59.100 --> 27:01.100
你点的哪个就加了一个

27:01.100 --> 27:02.100
好怎么加呢

27:02.100 --> 27:04.100
是不是我们可以使用this

27:04.100 --> 27:06.100
是不是当前元素

27:06.100 --> 27:08.100
class list

27:08.100 --> 27:09.100
对吧

27:09.100 --> 27:10.100
忘记了就去查文档

27:10.100 --> 27:11.100
我现在要加元素了

27:11.100 --> 27:12.100
怎么加元素啊

27:12.100 --> 27:14.100
我忘了忘了我去查呗

27:14.100 --> 27:15.100
控制那样式

27:16.100 --> 27:17.100
对不对

27:17.100 --> 27:18.100
要养成查月文档的习惯

27:18.100 --> 27:19.100
像这些东西呢

27:19.100 --> 27:21.100
写多了慢慢就不会忘了

27:21.100 --> 27:22.100
记忆啊

27:22.100 --> 27:24.100
它是一个自然而然的过程

27:24.100 --> 27:26.100
它不是一个强迫的过程

27:26.100 --> 27:29.600
强迫记忆是记不牢的

27:29.600 --> 27:30.600
好咱们来看啊

27:30.600 --> 27:32.600
这里有个class list

27:32.600 --> 27:34.600
ad天价格那样式

27:34.600 --> 27:35.600
什么那样式呢

27:35.600 --> 27:36.600
来个题吧

27:36.600 --> 27:38.600
好接下来我们来看一下

27:38.600 --> 27:40.600
点击点击就加上了

27:40.600 --> 27:41.600
我们以前有个问题就是

27:41.600 --> 27:43.600
要去掉之前的那样式

27:43.600 --> 27:44.600
怎么去掉呢

27:44.600 --> 27:46.600
诶我这里其实有很多种方法

27:46.600 --> 27:47.600
我这些

27:47.600 --> 27:48.600
给大家说一个方法的

27:48.600 --> 27:50.600
就是我在加这个那样式之前

27:50.600 --> 27:53.600
我先去掉其他的

27:55.600 --> 28:00.600
就是去掉之前被选中的li的x

28:00.600 --> 28:01.600
对吧

28:01.600 --> 28:02.600
是不是这么个逻辑

28:02.600 --> 28:04.600
我在加这个之前

28:04.600 --> 28:05.600
不要让我点它

28:05.600 --> 28:07.600
我在加这个之前

28:07.600 --> 28:09.600
我先把之前有这个那样式的元素

28:09.600 --> 28:11.600
把那样式给它去掉

28:11.600 --> 28:12.600
那么我这里说

28:12.600 --> 28:13.600
有两个问题

28:13.600 --> 28:14.600
第一个问题我怎么选中它

28:14.600 --> 28:16.600
第一个问题我怎么去掉

28:16.600 --> 28:17.600
怎么选中它

28:17.600 --> 28:19.600
怎么选中之前被

28:19.600 --> 28:20.600
就是我点它的时候

28:20.600 --> 28:21.600
要选中它对吧

28:21.600 --> 28:23.600
那我怎么来选中它

28:23.600 --> 28:25.600
不还是大数目的

28:25.600 --> 28:27.600
快要选那个团吧

28:27.600 --> 28:29.600
什么没有加面的什么

28:30.600 --> 28:31.600
非常方便

28:31.600 --> 28:33.600
它下面以前有一个题目的

28:33.600 --> 28:34.600
我是不是把

28:34.600 --> 28:37.600
首先把它选中

28:37.600 --> 28:38.600
b4

28:38.600 --> 28:40.600
之前

28:40.600 --> 28:41.600
之前那个元素

28:41.600 --> 28:42.600
那你看一下

28:42.600 --> 28:44.600
我们输出一下b4

28:49.470 --> 28:50.470
然后点击

28:50.470 --> 28:51.470
你看

28:51.470 --> 28:53.470
达到的是item2

28:53.470 --> 28:54.470
之前被选中的一个

28:54.470 --> 28:55.470
好

28:55.470 --> 28:56.470
那么我们要做的事情

28:56.470 --> 28:57.470
就是把这个玩意儿

28:57.470 --> 28:58.470
那样式给它去掉

28:58.470 --> 28:59.470
去掉那样式

28:59.470 --> 29:00.470
用class list

29:00.470 --> 29:01.470
remove

29:01.470 --> 29:03.470
来个题目

29:03.470 --> 29:05.470
那你玩算了

29:06.470 --> 29:07.470
就切换了

29:07.470 --> 29:09.470
就这么几行代嘛

29:09.470 --> 29:10.470
这是这道题

29:10.470 --> 29:11.470
大家暂停视频

29:11.470 --> 29:12.470
理解这个题

29:12.470 --> 29:14.470
怎么去它的实现思路

29:14.470 --> 29:16.470
把它做一下

29:16.470 --> 29:18.470
好 接下来第二道题

29:18.470 --> 29:20.470
第二道题是有一个表单

29:20.470 --> 29:21.470
非常简单

29:21.470 --> 29:22.470
有个表单

29:22.470 --> 29:23.470
我这里就是

29:23.470 --> 29:25.470
我在填写这个表单的时候

29:25.470 --> 29:27.470
我要把它保存起来

29:27.470 --> 29:28.470
我要把它保存起来

29:28.470 --> 29:30.470
每一次改变我都要保存

29:30.470 --> 29:32.470
保存到Local Storage里面

29:33.470 --> 29:35.470
将来我们关闭这个网页过后

29:35.470 --> 29:37.470
重新打开这个网页的时候

29:37.470 --> 29:38.470
它会自动的

29:38.470 --> 29:40.470
把我们之前保存内容

29:40.470 --> 29:42.470
夹到表单里面去

29:42.470 --> 29:43.470
就做这么一件事

29:43.470 --> 29:45.470
避免它重复填写

29:45.470 --> 29:47.470
假设有这么个功能

29:47.470 --> 29:49.470
那么我们来实现一下

29:49.470 --> 29:52.470
这里边首先涉及到一个事件

29:52.470 --> 29:55.470
填写表单的时候保存数据到本地

29:55.470 --> 29:56.470
那么什么时候保存

29:56.470 --> 29:57.470
就是我填写的时候

29:57.470 --> 29:58.470
填写的时候是不是时间

29:58.470 --> 30:00.470
我是不是要给它注册时间

30:00.470 --> 30:01.470
是不是要给它注册时间

30:01.470 --> 30:02.470
是不是要给它注册时间

30:02.470 --> 30:03.470
给它注册时间

30:03.470 --> 30:05.470
是不是都要注册时间

30:05.470 --> 30:06.470
对不对

30:06.470 --> 30:08.470
那么我们就选中所有的inputs

30:08.470 --> 30:10.470
inputs

30:10.470 --> 30:12.470
document

30:12.470 --> 30:14.470
所有的inputs全部拿到

30:14.470 --> 30:16.470
注册什么时间呢

30:16.470 --> 30:17.470
循环

30:17.470 --> 30:19.470
注册inputs的时间

30:19.470 --> 30:21.470
实时变化时间

30:21.470 --> 30:25.230
inputs

30:27.230 --> 30:28.230
什么时间

30:28.230 --> 30:29.230
就是inputs

30:29.230 --> 30:30.230
oninputs的时间

30:30.230 --> 30:32.230
或者用adm.nation的inputs的时间

30:32.230 --> 30:34.230
好 咱们来看一下

30:34.230 --> 30:36.230
输出123

30:36.230 --> 30:39.250
看一下

30:39.250 --> 30:41.690
是吧

30:41.690 --> 30:43.690
时间在出发吗

30:43.690 --> 30:44.690
点这个

30:44.690 --> 30:45.690
是不是时间在出发

30:45.690 --> 30:46.690
对吧

30:46.690 --> 30:47.690
只要有变化

30:47.690 --> 30:48.690
它就会出发这个时间

30:48.690 --> 30:50.690
这个inputs的时间

30:50.690 --> 30:51.690
那么在这世界里边

30:51.690 --> 30:52.690
是不是要保存

30:52.690 --> 30:53.690
那么我就写个函数

30:53.690 --> 30:55.690
当你save

30:55.690 --> 30:57.690
保存

30:57.690 --> 30:59.690
调用这个函数就完成了

30:59.690 --> 31:00.690
或者把这个函数

31:00.690 --> 31:01.690
直接放到我的时间

31:01.690 --> 31:02.690
这里

31:02.690 --> 31:03.690
对

31:03.690 --> 31:04.690
注册时间

31:04.690 --> 31:06.690
只要你改变

31:06.690 --> 31:08.690
我就调用这个函数保存

31:08.690 --> 31:09.690
保存做什么呢

31:09.690 --> 31:10.690
就是把表单的信息

31:10.690 --> 31:11.690
全部获取到

31:11.690 --> 31:12.690
放到local storage里面

31:12.690 --> 31:13.690
对吧

31:13.690 --> 31:15.690
这还是说的事情就是

31:15.690 --> 31:17.690
将表单信息

31:17.690 --> 31:19.690
放到local storage

31:19.690 --> 31:21.690
里面

31:21.690 --> 31:23.690
保存起来

31:23.690 --> 31:24.690
好 接下来

31:24.690 --> 31:25.690
那我们怎么在保存呢

31:25.690 --> 31:27.690
我这里需要给这些元数

31:27.690 --> 31:28.690
因为不同的名

31:28.690 --> 31:30.690
这些inputs还是有一些

31:30.690 --> 31:31.690
内容上的区别的

31:31.690 --> 31:33.690
比方说这里给它个id

31:33.690 --> 31:35.690
这里就是

31:35.690 --> 31:37.690
给它写上一个name

31:38.690 --> 31:40.690
这是

31:40.690 --> 31:41.690
id

31:41.690 --> 31:42.690
tsd

31:42.690 --> 31:43.690
age

31:43.690 --> 31:45.690
这是性别

31:45.690 --> 31:47.690
性别的话

31:47.690 --> 31:49.690
我就找

31:49.690 --> 31:51.690
radio哪个选中就完成了

31:51.690 --> 31:52.690
对吧

31:52.690 --> 31:53.690
我找哪个选中就完成了

31:53.690 --> 31:55.690
那么这里呢

31:55.690 --> 31:57.690
给它一个id

31:57.690 --> 31:59.690
six

31:59.690 --> 32:00.690
mail

32:00.690 --> 32:01.690
给一个就行了

32:01.690 --> 32:03.690
因为它没有选中的话

32:03.690 --> 32:05.690
那么

32:05.690 --> 32:06.690
这样

32:06.690 --> 32:07.690
id

32:07.690 --> 32:08.690
six

32:08.690 --> 32:09.690
mail

32:09.690 --> 32:10.690
行了

32:10.690 --> 32:11.690
我把这些元数一个个拿到

32:11.690 --> 32:13.690
那么这是个体力活了

32:13.690 --> 32:14.690
这个就没什么好说的了

32:14.690 --> 32:15.690
你们可以

32:15.690 --> 32:17.690
跟着写一下

32:18.690 --> 32:20.690
txtname

32:21.690 --> 32:23.690
拿到什么

32:23.690 --> 32:25.690
document

32:25.690 --> 32:29.830
query is negative

32:29.830 --> 32:32.980
txtname

32:32.980 --> 32:34.980
一共四个

32:34.980 --> 32:39.800
txt age

32:39.800 --> 32:40.800
还有什么呢

32:41.800 --> 32:45.240
sixmail

32:51.520 --> 32:52.520
好就这么四个元数

32:52.520 --> 32:53.520
拿到过后呢

32:53.520 --> 32:55.520
我把它封装成一个对象

32:56.520 --> 32:58.520
比方说我这里有一个ob

32:58.520 --> 32:59.520
封装成一个对象

32:59.520 --> 33:00.520
对象里边呢

33:00.520 --> 33:01.520
我们就写一下

33:01.520 --> 33:02.520
一个是名字

33:02.520 --> 33:05.520
名字就来自于txtname的value

33:05.520 --> 33:07.520
还有就是 age

33:07.520 --> 33:08.520
年龄

33:08.520 --> 33:10.520
年龄的话就来自于txt

33:10.520 --> 33:11.520
age.value

33:11.520 --> 33:12.520
然后呢

33:12.520 --> 33:13.520
还有一个是

33:13.520 --> 33:15.520
性别six

33:15.520 --> 33:16.520
性别到底是男还是女

33:16.520 --> 33:18.520
取决于他选中还是他选中

33:18.520 --> 33:21.520
如果说sixmail

33:21.520 --> 33:23.520
就是txt

33:23.520 --> 33:26.520
我先叫txt

33:26.520 --> 33:28.520
txt

33:28.520 --> 33:29.520
他选中了吗

33:29.520 --> 33:31.520
他选中了的话

33:31.520 --> 33:33.520
那么就是男

33:33.520 --> 33:35.520
否则的话就是女

33:35.520 --> 33:38.540
那么这里呢

33:38.540 --> 33:39.540
我干脆先

33:39.540 --> 33:40.540
这个其实就没必要了

33:40.540 --> 33:41.540
对吧

33:41.540 --> 33:42.540
不用去看他了

33:42.540 --> 33:43.540
然后这里呢

33:43.540 --> 33:44.540
我给他加一个默认吧

33:44.540 --> 33:45.540
txt

33:45.540 --> 33:47.540
这是个布尔数学

33:47.540 --> 33:48.540
好

33:48.540 --> 33:49.540
咱们来试一下

33:49.540 --> 33:53.620
我们输出一下ob

33:53.620 --> 33:55.620
我点击这个新名

33:55.620 --> 33:56.620
你看

33:56.620 --> 33:57.620
新名年龄

33:57.620 --> 34:00.620
新别年龄

34:00.620 --> 34:01.620
差不多对吧

34:01.620 --> 34:03.620
年龄我可以把它转换成什么

34:03.620 --> 34:05.620
转换成那个

34:05.620 --> 34:07.620
数字

34:07.620 --> 34:08.620
比方说他有

34:08.620 --> 34:09.620
他有值吗

34:09.620 --> 34:10.620
他有值的话

34:10.620 --> 34:11.620
我就把它转换成数字

34:11.620 --> 34:13.620
tag.value

34:13.620 --> 34:14.620
他没有值的话

34:14.620 --> 34:15.620
我就用0

34:15.620 --> 34:18.060
就这样

34:19.060 --> 34:20.060
用正号

34:20.060 --> 34:21.060
就叫正数

34:21.060 --> 34:22.060
用数字符号

34:22.060 --> 34:23.060
算数运算

34:23.060 --> 34:24.060
把它转换成数字

34:24.060 --> 34:26.060
好 再来看

34:26.060 --> 34:28.060
年龄

34:28.060 --> 34:30.060
新名

34:30.060 --> 34:32.060
年龄

34:32.060 --> 34:34.060
新别

34:34.060 --> 34:35.060
对吧 是不是打到对象了

34:35.060 --> 34:37.060
那么接着我要把对象保存到哪

34:37.060 --> 34:38.060
local storage里面

34:38.060 --> 34:39.060
怎么保存

34:39.060 --> 34:41.060
是吧 先把它转换成接生格式

34:41.060 --> 34:43.060
接生

34:43.060 --> 34:45.060
strandify

34:45.060 --> 34:47.060
然后再把它

34:47.060 --> 34:48.060
使用local storage

34:48.060 --> 34:50.060
setsItem

34:50.060 --> 34:51.060
我们就用foam

34:51.060 --> 34:52.060
表单

34:52.060 --> 34:55.060
然后再加上一个obg

34:55.060 --> 34:56.060
好

34:56.060 --> 34:57.060
它就会自动保存到

34:57.060 --> 34:58.060
local storage里面

34:58.060 --> 34:59.060
咱们来试一下

34:59.060 --> 35:00.060
这里写一个新名

35:00.060 --> 35:02.060
新名年龄

35:02.060 --> 35:03.060
你看每一步都要保存

35:03.060 --> 35:07.140
我们看一下local storage

35:07.140 --> 35:08.140
你看

35:08.140 --> 35:09.140
foam

35:09.140 --> 35:10.140
怎么是obg

35:10.140 --> 35:11.140
我这里写错了

35:11.140 --> 35:15.340
应该是保存接生

35:15.340 --> 35:16.340
好 来看

35:16.340 --> 35:17.340
接着我们再

35:17.340 --> 35:18.340
你看

35:18.340 --> 35:20.340
local storage里面

35:20.340 --> 35:21.340
保存进来了

35:21.340 --> 35:22.340
你看

35:22.340 --> 35:24.340
是保存进来了

35:24.340 --> 35:25.340
好

35:25.340 --> 35:26.340
那么接下来

35:26.340 --> 35:27.340
那就是

35:27.340 --> 35:29.340
当我们打开网页的时候

35:29.340 --> 35:31.340
要从表单里面夹仔数据

35:31.340 --> 35:33.340
那么这些动物

35:33.340 --> 35:36.340
原来是我干脆直接拿到吧

35:36.340 --> 35:38.340
放到外面

35:38.340 --> 35:40.340
好像这个女孩

35:40.340 --> 35:42.340
是真正的还得必须得有

35:42.340 --> 35:44.340
这个是

35:44.340 --> 35:47.230
还得有一个

35:47.230 --> 35:48.230
因为以后我要设置

35:48.230 --> 35:53.720
选中效果

35:53.720 --> 35:54.720
这是保存

35:54.720 --> 35:58.990
我再抽示一下

35:58.990 --> 36:00.990
年龄

36:00.990 --> 36:03.990
比方说Molica

36:03.990 --> 36:05.990
年龄

36:05.990 --> 36:07.990
17

36:07.990 --> 36:09.990
现在保存到local storage里面了

36:09.990 --> 36:10.990
那么接下来

36:10.990 --> 36:11.990
我们关闭网页过后

36:11.990 --> 36:14.990
再重新打开的时候

36:14.990 --> 36:15.990
local storage里面

36:15.990 --> 36:16.990
还是仍然有值的

36:16.990 --> 36:17.990
你看

36:17.990 --> 36:18.990
还是保存进来的

36:18.990 --> 36:19.990
仍然是有值的

36:19.990 --> 36:20.990
那么接下来

36:20.990 --> 36:21.990
就是我们

36:21.990 --> 36:22.990
网页在夹仔的时候

36:22.990 --> 36:23.990
要从

36:23.990 --> 36:24.990
要把一个保存的

36:24.990 --> 36:25.990
夹仔到页面上去

36:25.990 --> 36:26.990
那么这里呢

36:26.990 --> 36:27.990
我再写一个函数

36:27.990 --> 36:28.990
叫load

36:28.990 --> 36:29.990
那么这个load函数

36:29.990 --> 36:30.990
是一开始要运行的

36:30.990 --> 36:31.990
是一个初始化函数

36:31.990 --> 36:32.990
相当于

36:32.990 --> 36:33.990
它怎么做呢

36:33.990 --> 36:34.990
它就从local storage里面

36:34.990 --> 36:36.990
读出来对吧

36:36.990 --> 36:37.990
get item

36:37.990 --> 36:38.990
foam

36:38.990 --> 36:39.990
把它读出来

36:39.990 --> 36:40.990
读出来是什么

36:40.990 --> 36:41.990
节省植物圈

36:41.990 --> 36:43.990
然后再把它转换成OBG

36:43.990 --> 36:46.990
转换对象

36:46.990 --> 36:47.990
post

36:47.990 --> 36:49.990
忘了就是查文档

36:51.990 --> 36:52.990
输出OBG

36:52.990 --> 36:54.990
好 咱们来看一下

36:54.990 --> 36:55.990
就拿到对象了

36:55.990 --> 36:57.990
把之前保存的

36:57.990 --> 36:58.990
那么接下来

36:58.990 --> 36:59.990
我们就把对象

36:59.990 --> 37:00.990
放到相应的表达里面去

37:00.990 --> 37:02.990
txtname.value

37:02.990 --> 37:04.990
等于OBG.lim

37:04.990 --> 37:05.990
那就做好了

37:05.990 --> 37:06.990
调整条件判断一下

37:06.990 --> 37:07.990
因为它拿出来过后

37:07.990 --> 37:08.990
有可能之前没有保存

37:08.990 --> 37:09.990
或者是

37:09.990 --> 37:10.990
被一些煞动软件

37:10.990 --> 37:11.990
没有煞动软件

37:11.990 --> 37:12.990
被一些电脑管家

37:12.990 --> 37:13.990
或者是你人工的

37:13.990 --> 37:14.990
把它清除掉了

37:14.990 --> 37:16.990
所以说有可能它没有

37:16.990 --> 37:17.990
没有的话就算了

37:17.990 --> 37:18.990
啥都不说

37:18.990 --> 37:20.990
拿出来过后是一个nau

37:20.990 --> 37:22.990
它没有的话就拿出来是nau

37:22.990 --> 37:23.990
好

37:23.990 --> 37:24.990
OBG.lim

37:24.990 --> 37:26.990
然后就txtname.value

37:26.990 --> 37:28.990
等于OBG.ag

37:28.990 --> 37:29.990
然后

37:30.990 --> 37:32.990
如果说OBG.sex

37:32.990 --> 37:34.990
等于男

37:35.990 --> 37:36.990
就拿出来对象里面的

37:36.990 --> 37:37.990
属性等于男

37:37.990 --> 37:38.990
然后就

37:39.990 --> 37:41.990
sexmail.sex

37:41.990 --> 37:42.990
等于出

37:42.990 --> 37:43.990
否则的话

37:43.990 --> 37:44.990
我就是

37:44.990 --> 37:46.990
sexmail

37:46.990 --> 37:48.990
female.sex

37:48.990 --> 37:49.990
等于出

37:50.990 --> 37:51.990
写完了

37:52.990 --> 37:53.990
好咱们来试一下

37:53.990 --> 37:54.990
你看现在我们刷新页面

37:54.990 --> 37:56.990
是不是就自动加载进来了

37:56.990 --> 37:57.990
对吧

37:57.990 --> 37:58.990
我们关闭页面

37:58.990 --> 37:59.990
重新打开

37:59.990 --> 38:00.990
它就把我们之前

38:00.990 --> 38:01.990
前的结果

38:01.990 --> 38:03.990
加载到表达里面去了

38:03.990 --> 38:05.990
它就是local storage

38:05.990 --> 38:06.990
这个例子

38:06.990 --> 38:07.990
同样的

38:07.990 --> 38:08.990
暂停视频

38:08.990 --> 38:09.990
把它写一遍

38:09.990 --> 38:10.990
好写一遍过后

38:10.990 --> 38:11.990
我们这里有块就完了

38:11.990 --> 38:13.990
没有这个联系题了

38:13.990 --> 38:14.990
好这就是咱们

38:14.990 --> 38:15.990
这里可讲的东西

38:15.990 --> 38:16.990
加了一些API

38:16.990 --> 38:17.990
加了一些对象

38:17.990 --> 38:18.990
加了一些函数

38:18.990 --> 38:19.990
这东西

38:19.990 --> 38:20.990
吓我一跳

38:20.990 --> 38:22.990
加了一些函数

38:22.990 --> 38:23.990
这些东西

38:23.990 --> 38:24.990
然后呢

38:25.990 --> 38:26.990
有些东西

38:26.990 --> 38:27.990
我们平时开发是用不到的

38:27.990 --> 38:28.990
比方说像那个针

38:29.990 --> 38:30.990
针这个东西

38:30.990 --> 38:31.990
但是你需要知道

38:31.990 --> 38:32.990
平发动画

38:32.990 --> 38:33.990
要靠这个渲染针

38:34.990 --> 38:35.990
本地存储

38:35.990 --> 38:36.990
我们有的社会用到

38:36.990 --> 38:38.990
其他东西都比较简单

38:38.990 --> 38:39.990
不要去记

38:39.990 --> 38:41.990
我们需要的时候

38:41.990 --> 38:42.990
查阅文档

38:42.990 --> 38:43.990
就可以解决

38:43.990 --> 38:44.990
好了

38:44.990 --> 38:45.990
那么本期可以到这了

38:45.990 --> 38:46.990
同学们拜拜

