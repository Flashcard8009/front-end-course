WEBVTT

00:00.750 --> 00:09.750
然后接下来的话我们这里啊我就带着大家一起来实现一下就是上级可讲那个瀑布流啊

00:09.750 --> 00:15.750
但我希望就是你在看这个视频之前的话你是先自己动手做了的啊

00:15.750 --> 00:19.750
我不管你做没做出来啊至少自己先尝试做一做

00:19.750 --> 00:24.750
好吧好了我这边的话首先我在我的桌面上先新建一个啊

00:24.750 --> 00:32.750
这个的话比如叫做图片瀑布流瀑布流二好吧

00:32.750 --> 00:35.750
然后这样我把这个把它打开

00:37.750 --> 00:42.750
ok好打开之后然后接下来需要把那个图片需要把它拿过来

00:42.750 --> 00:50.750
啊就是瀑布流我们有那么多图片对吧我把它拿过来一下啊在这里 image

00:51.750 --> 00:57.750
ok把放过来好放过来之后然后接下来的话我们这边

00:59.750 --> 01:02.750
好这个的话我就不全屏了哈我就这个样子

01:03.750 --> 01:08.750
然后我们这边要先把那个对应的文件加先把建好这边的话html

01:09.750 --> 01:10.750
然后 css

01:11.750 --> 01:13.750
然后js

01:15.750 --> 01:21.750
ok好然后每个目录下面对应的文件这个呢是index.html

01:22.750 --> 01:27.750
然后这边的话是index.css

01:28.750 --> 01:33.750
然后接下来还有一个就是js index.js

01:33.750 --> 01:37.750
ok好首先来到我们的这个html啊我们这边啊

01:38.750 --> 01:43.750
咦怎么回事

01:44.750 --> 01:45.750
这里咋回事

01:46.750 --> 01:47.750
我看一下

01:48.750 --> 01:49.750
咋不出来了呢

01:51.750 --> 01:52.750
ok了好这里

01:53.750 --> 01:56.750
好这里的话就是图片瀑布流

01:57.750 --> 02:03.750
图片瀑布瀑布流二

02:04.750 --> 02:08.750
ok好那接下来首先首先的话我们应该有一个什么呢

02:08.750 --> 02:12.750
我们应该有一个容器啊所以我这边让我写个div

02:13.750 --> 02:16.750
div然后接下来我给一个这个container

02:17.750 --> 02:21.750
然后这个是id然后接下来这边再点container

02:22.750 --> 02:24.750
这个是什么呢这个是lay class

02:24.750 --> 02:28.750
然后你按一下这个table键看到没有啊这个容器就出来了

02:28.750 --> 02:31.750
这个就是什么呢这个就是我们的最外层容器

02:32.750 --> 02:35.750
最外层容器

02:35.750 --> 02:37.750
好然后接下来容器里面

02:38.750 --> 02:41.750
啊就是我们现在的话这个最外层这个容器写好了

02:41.750 --> 02:42.750
我把那边也打开吧

02:43.750 --> 02:45.750
我把这边我也把它跑起来

02:46.750 --> 02:49.320
啊我把跑起来

02:50.320 --> 02:51.320
把这边也跑起来

02:51.320 --> 02:53.320
就我们现在的话就是这个容器

02:54.320 --> 02:55.320
这容器是不是写好了

02:56.320 --> 03:01.320
对吧容器写好了之后然后接下来里面就应该是写图片一张一张的图片

03:01.320 --> 03:05.320
但是这个图片的话我们通过这个js动态的来生成

03:05.320 --> 03:08.320
啊你在html里面写的话你看这边这么多张图片

03:08.320 --> 03:10.320
你是不是要写好多个这个emage去了

03:11.320 --> 03:12.320
对不对

03:12.320 --> 03:15.320
所以我们这边的话我们就通过这个啊我这边给你记录一下啊

03:15.320 --> 03:20.320
就里面的图片通过什么呢

03:21.320 --> 03:26.320
通过js来动态的生成

03:27.320 --> 03:28.320
没有没有

03:29.320 --> 03:32.320
啊说我们这个的话啊html结构很简单

03:33.320 --> 03:36.320
就一个外层的空的div就可以了

03:37.320 --> 03:39.320
然后完事之后然后我们把这个

03:41.320 --> 03:43.320
把这个css影一下

03:43.320 --> 03:45.320
然后包括下面的这个js

03:48.020 --> 03:51.020
啊这边的话js ok

03:51.020 --> 03:54.020
好css css也非常的简单

03:54.020 --> 03:56.020
我这边的话快速把css写下

03:56.020 --> 03:57.020
那首先就是什么呢

03:57.020 --> 04:00.020
首先就是疊container

04:00.020 --> 04:02.020
啊设置这个container

04:02.020 --> 04:03.020
我设置它什么呢

04:03.020 --> 04:05.020
我设置它这个宽度

04:05.020 --> 04:08.020
宽度的话是90%

04:08.020 --> 04:10.020
啊就是你整个这个屏幕的90%

04:10.020 --> 04:13.020
所以你这边让你看到这个宽度看到没有

04:14.020 --> 04:15.020
就这个容器大家看一下

04:15.020 --> 04:17.020
我这边的话有一个边框

04:17.020 --> 04:18.020
看到没有

04:18.020 --> 04:19.020
它是整个什么呢

04:19.020 --> 04:22.020
整个这个你的这个窗口这个宽度的90%

04:22.020 --> 04:24.020
啊比如说我现在让我把它变一变

04:24.020 --> 04:27.020
你看是不是始终是90%啊

04:27.020 --> 04:30.020
我这边再往走一下看到没有

04:30.020 --> 04:33.020
啊所以我这边的设置宽度是90%

04:33.020 --> 04:34.020
然后设置一个什么呢

04:34.020 --> 04:38.020
设置一个margin 0 auto

04:38.020 --> 04:40.020
让它是一个这个居中对齐

04:40.020 --> 04:41.020
对吧

04:41.020 --> 04:42.020
然后接下来的话

04:42.020 --> 04:43.020
这边给了一个border

04:43.020 --> 04:46.020
border的话是epx solid

04:46.020 --> 04:48.020
啊给了一个这个颜色

04:48.020 --> 04:50.020
警号1e

04:50.020 --> 04:53.020
就是一个有点浅灰的这种颜色

04:53.020 --> 04:55.020
然后接下来这边这一步很重要

04:55.020 --> 04:58.020
设置position relative

04:58.020 --> 04:59.020
为什么呢

04:59.020 --> 05:01.020
啊只绝复乡

05:01.020 --> 05:02.020
对吧

05:02.020 --> 05:03.020
只绝复乡

05:03.020 --> 05:04.020
你回头的话

05:04.020 --> 05:05.020
这些图片

05:05.020 --> 05:06.020
比较这个图片

05:06.020 --> 05:07.020
其实就是什么呢

05:07.020 --> 05:09.020
其实就是相对于这个容器

05:09.020 --> 05:10.020
啊比较这个容器

05:10.020 --> 05:11.020
它什么呀

05:11.020 --> 05:12.020
是不是左边

05:12.020 --> 05:14.020
左边有个left

05:14.020 --> 05:15.020
这边有一个top

05:15.020 --> 05:16.020
对不对

05:16.020 --> 05:18.020
其实就是设置它的left和top

05:18.020 --> 05:20.020
啊当时你这个image就得干嘛

05:20.020 --> 05:22.020
是不是设置是绝对定位

05:22.020 --> 05:24.020
外面的这个容器

05:24.020 --> 05:25.020
外面的这个盒子

05:25.020 --> 05:27.020
你就得设置它是什么

05:27.020 --> 05:28.020
什么相对定位

05:28.020 --> 05:29.020
对吧

05:29.020 --> 05:31.020
好这个是外层容器

05:31.020 --> 05:32.020
把这个注释写下

05:32.020 --> 05:34.020
这个是外层容器

05:36.020 --> 05:39.020
外层容器

05:39.020 --> 05:40.020
样式

05:40.020 --> 05:41.020
OK

05:41.020 --> 05:42.020
好完了之后

05:42.020 --> 05:43.020
然后接下来下面

05:43.020 --> 05:44.020
下面的话

05:44.020 --> 05:46.020
就是这个下面的这个image

05:46.020 --> 05:48.020
container

05:48.020 --> 05:50.020
下面的image

05:50.020 --> 05:51.020
这image的话

05:51.020 --> 05:52.020
这是什么呢

05:52.020 --> 05:54.020
主要就是设置这个position

05:54.020 --> 05:56.020
是一个absolute

05:56.020 --> 05:57.020
啊

05:57.020 --> 05:59.020
但是现在这个left和top

05:59.020 --> 06:00.020
你现在没办法写

06:00.020 --> 06:01.020
为什么呢

06:01.020 --> 06:03.020
因为这个left和top

06:03.020 --> 06:04.020
是不是回头要动态

06:04.020 --> 06:06.020
通过这个计算来计算的

06:06.020 --> 06:07.020
对不对

06:07.020 --> 06:09.020
说现在的话没办法写

06:09.020 --> 06:10.020
那我们目前的话

06:10.020 --> 06:12.020
这个样式就写这么多

06:12.020 --> 06:14.020
这个是图片

06:15.020 --> 06:16.020
图片

06:16.020 --> 06:17.020
样式

06:17.020 --> 06:19.020
OK

06:19.020 --> 06:20.020
好

06:20.020 --> 06:22.020
然后接下来

06:22.020 --> 06:23.020
接下来的话

06:23.020 --> 06:24.020
然后下一步

06:24.020 --> 06:26.020
下个我们就写这个ges

06:26.020 --> 06:27.020
啊ges

06:27.020 --> 06:28.020
那ges呢

06:28.020 --> 06:29.020
我们这边还是干嘛呢

06:29.020 --> 06:31.020
先写一个这个组含数

06:31.020 --> 06:33.020
程序组含数

06:33.020 --> 06:37.220
那我们这边的话就是

06:37.220 --> 06:39.220
function main

06:40.220 --> 06:41.220
对吧

06:41.220 --> 06:42.220
然后接下来这边

06:42.220 --> 06:44.220
main调用一下

06:44.220 --> 06:45.220
那在这个组含数里面

06:45.220 --> 06:47.220
我们要做什么事情

06:47.220 --> 06:48.220
我们首先第一步

06:48.220 --> 06:49.220
是不是就是

06:49.220 --> 06:50.220
应该是做我们的初始化

06:50.220 --> 06:51.220
工作

06:51.220 --> 06:52.220
把这个图片这些位置

06:52.220 --> 06:53.220
是不是该归位的

06:53.220 --> 06:54.220
要归位

06:54.220 --> 06:55.220
对不对

06:55.220 --> 06:57.220
所以首先第一步

06:57.220 --> 06:59.220
首先第一步干嘛呢

06:59.220 --> 07:01.220
就是加入图片元素

07:01.220 --> 07:04.220
加入图片元素

07:04.220 --> 07:06.220
进行

07:06.220 --> 07:09.220
进行一个初始化

07:09.220 --> 07:11.220
操作

07:11.220 --> 07:13.220
进行一个初始化操作

07:13.220 --> 07:14.220
那我这边

07:14.220 --> 07:15.220
我就封装一个函数

07:15.220 --> 07:17.220
比如说creator image

07:19.220 --> 07:20.220
对吧

07:20.220 --> 07:21.220
封装这么一个方法

07:21.220 --> 07:22.220
那接下来在上面

07:22.220 --> 07:24.220
是不是就要来写这个方法

07:24.220 --> 07:26.220
好那接下来到我们的上面

07:27.220 --> 07:29.220
我们这边就来写这个方法

07:29.220 --> 07:31.220
creator image

07:31.220 --> 07:33.220
这边就是function

07:33.220 --> 07:35.220
creator image

07:35.220 --> 07:36.220
这个方法就是什么呢

07:36.220 --> 07:38.220
创造

07:38.220 --> 07:40.220
就是创建图片

07:41.220 --> 07:43.220
创建图片

07:43.220 --> 07:45.220
并且干嘛呢

07:45.220 --> 07:49.220
对图片的位置

07:49.220 --> 07:54.110
进行归位

07:56.110 --> 07:57.110
对吧

07:57.110 --> 07:58.110
好那接下来我们一步一步来

07:58.110 --> 07:59.110
那首先第一步

07:59.110 --> 08:01.110
第一步你要创建图片

08:01.110 --> 08:02.110
图片的话

08:02.110 --> 08:03.110
你打开我的印卖机

08:03.110 --> 08:04.110
你看一下

08:04.110 --> 08:05.110
我这边有多少张

08:05.110 --> 08:07.110
是不是这边从0开始

08:07.110 --> 08:08.110
这边是0

08:08.110 --> 08:10.110
然后一直到多少

08:10.110 --> 08:12.110
一直到40

08:12.110 --> 08:13.110
对吧

08:13.110 --> 08:15.110
也就是说一共是41张

08:15.110 --> 08:16.110
那我在这边上

08:16.110 --> 08:17.110
我就可以干嘛呢

08:17.110 --> 08:19.110
我这边就是通过for循环

08:19.110 --> 08:20.110
for

08:20.110 --> 08:21.110
然后接下来的话

08:21.110 --> 08:24.110
哇一个i等于0

08:24.110 --> 08:27.110
i小于等于一个40

08:27.110 --> 08:28.110
i加加

08:28.110 --> 08:29.110
对吧

08:29.110 --> 08:30.110
从0开始

08:30.110 --> 08:33.110
然后一直到这个40

08:33.110 --> 08:34.110
然后完事之后

08:34.110 --> 08:35.110
然后接下来的话

08:35.110 --> 08:36.110
我们这边

08:36.110 --> 08:38.110
首先这边的话

08:38.110 --> 08:39.110
src

08:39.110 --> 08:40.110
等于一个什么呢

08:40.110 --> 08:41.110
等于一个

08:41.110 --> 08:42.110
这里的话就是

08:42.110 --> 08:45.110
应该是上一集目录的image

08:45.110 --> 08:47.110
是不是image

08:47.110 --> 08:49.110
对image

08:49.110 --> 08:52.110
然后接下来下面

08:52.110 --> 08:53.110
下面的什么

08:53.110 --> 08:54.110
是不是就是

08:54.110 --> 08:57.110
应该是这个i加上一个

08:57.110 --> 09:00.110
这个点jpg

09:00.110 --> 09:02.110
是不是这样子

09:02.110 --> 09:03.110
这个是生成什么

09:03.110 --> 09:04.110
这个是生成

09:04.110 --> 09:07.110
我们图片的src路径

09:07.110 --> 09:14.110
生成图片的src路径

09:14.110 --> 09:15.110
ok

09:15.110 --> 09:16.110
当然我们这边的话

09:16.110 --> 09:18.110
用的是这个制服穿拼接

09:18.110 --> 09:20.110
其实在后面的学习的话

09:20.110 --> 09:22.110
大家会学到这个s6的语法

09:22.110 --> 09:23.110
s6的语法

09:23.110 --> 09:24.110
然后接下来

09:24.110 --> 09:26.110
他会教你比如说这个

09:26.110 --> 09:28.110
制服穿模板之类的

09:28.110 --> 09:29.110
但这个是后面

09:29.110 --> 09:31.110
大家要学习的这个知识

09:31.110 --> 09:33.110
我这边可以提前给大家看一下

09:33.110 --> 09:34.110
就后面的话

09:34.110 --> 09:35.110
你就可以这样子行

09:35.110 --> 09:37.110
哇一个src

09:37.110 --> 09:38.110
等于一个什么呢

09:38.110 --> 09:39.110
这边制服穿模板

09:39.110 --> 09:41.110
接下来这边

09:41.110 --> 09:44.110
上一集的image

09:44.110 --> 09:46.110
接下来这边

09:46.110 --> 09:47.110
downer

09:48.110 --> 09:49.110
看了没有

09:49.110 --> 09:50.110
downer

09:50.110 --> 09:52.110
然后接下来这边的话就是

09:52.110 --> 09:54.110
点jpg

09:54.110 --> 09:55.110
就是这种语法

09:55.110 --> 09:56.110
到时候的话

09:56.110 --> 09:58.110
我们称之为制服穿模板

09:58.110 --> 10:00.110
然后回头这个制服穿模板的话

10:00.110 --> 10:02.110
它就会去解析这个i

10:02.110 --> 10:04.110
i比如说第一次是0对不对

10:04.110 --> 10:06.110
它这边最终就会渲染成多少呢

10:06.110 --> 10:07.110
就会渲染成0

10:07.110 --> 10:08.110
0.jpg

10:08.110 --> 10:10.110
然后第二次

10:11.110 --> 10:13.110
第二次i加加是变成1

10:13.110 --> 10:14.110
对不对

10:14.110 --> 10:15.110
然后加它这边

10:15.110 --> 10:16.110
它就会渲染成多少呢

10:16.110 --> 10:17.110
1

10:17.110 --> 10:18.110
总之它就会进行这个

10:18.110 --> 10:19.110
变量的渲染

10:19.110 --> 10:20.110
它这边的话就会去

10:20.110 --> 10:23.110
把这个变量

10:23.110 --> 10:25.110
它去把它解析出来

10:25.110 --> 10:27.110
它会把它解析出来

10:27.110 --> 10:29.110
这个是后面要学的语法

10:29.110 --> 10:30.110
然后这边给你说一下

10:30.110 --> 10:33.110
这个是通过es6

10:34.110 --> 10:37.110
通过es6的

10:37.110 --> 10:39.110
制服穿模板语法

10:41.110 --> 10:42.110
OK

10:42.110 --> 10:43.110
好那现在的话

10:43.110 --> 10:45.110
你的这个src

10:45.110 --> 10:46.110
就搞好了

10:46.110 --> 10:47.110
搞好之后

10:47.110 --> 10:48.110
然后这样我这边

10:48.110 --> 10:49.110
挖一个什么呢

10:49.110 --> 10:51.110
挖一个image

10:51.110 --> 10:57.110
等于一个document.creator element

10:57.110 --> 10:58.110
创建一个什么呢

10:58.110 --> 11:01.110
创建一个image元素

11:01.110 --> 11:02.110
对吧

11:02.110 --> 11:07.110
创建一个image元素

11:07.110 --> 11:08.110
好创建了之后

11:08.110 --> 11:09.110
然后这样你就要把什么呢

11:09.110 --> 11:11.110
你就要把这个image

11:11.110 --> 11:12.110
的这个src

11:12.110 --> 11:14.110
把它挂上去

11:16.110 --> 11:17.110
挂上去之后

11:17.110 --> 11:18.110
然后接下来你还需要

11:18.110 --> 11:19.110
设置一下什么呢

11:19.110 --> 11:21.110
需要设置一下它的这个宽度

11:21.110 --> 11:22.110
所以我们在上面的话

11:22.110 --> 11:24.110
我们先把这个宽度

11:24.110 --> 11:25.110
把它设置一下

11:25.110 --> 11:30.110
我这边的话就是挖一个image vice

11:30.110 --> 11:31.110
等于多少呢

11:31.110 --> 11:33.110
等于220

11:33.110 --> 11:34.110
这个的话就是

11:34.110 --> 11:37.110
每张图片的宽度

11:37.110 --> 11:43.110
每张图片的宽度

11:43.110 --> 11:44.110
因为它定宽嘛

11:45.110 --> 11:46.110
对吧

11:46.110 --> 11:47.110
上级课我们就讲了

11:47.110 --> 11:48.110
它是定宽的220

11:48.110 --> 11:49.110
好

11:49.110 --> 11:50.110
说在下面

11:50.110 --> 11:51.110
下面的话你就可以设置

11:51.110 --> 11:55.420
image.style

11:55.420 --> 11:59.420
image.style.wise

11:59.420 --> 12:00.420
等于什么呢

12:00.420 --> 12:02.420
等于一个image vice

12:02.420 --> 12:05.420
这个就是设置

12:05.420 --> 12:08.420
设置图片的宽度

12:08.420 --> 12:14.420
这个是设置图片的src

12:15.420 --> 12:16.420
好搞定之后

12:16.420 --> 12:17.420
然后接下来我们这边的话

12:17.420 --> 12:18.420
图片已经有了

12:18.420 --> 12:20.420
有了我就把它添加到容器里面

12:20.420 --> 12:22.420
我们容器还没获取是吧

12:22.420 --> 12:23.420
我们这边获取一下

12:23.420 --> 12:25.420
挖一个这个的话

12:25.420 --> 12:28.420
divcontainer

12:28.420 --> 12:29.420
这个的话就等于什么呢

12:29.420 --> 12:36.420
这个就等于一个document.getElementById

12:36.420 --> 12:37.420
对吧

12:37.420 --> 12:38.420
然后这里

12:38.420 --> 12:40.420
这里我们的容器

12:40.420 --> 12:41.420
是不是container

12:42.420 --> 12:44.420
那你这边就直接container

12:45.420 --> 12:46.420
container

12:46.420 --> 12:48.420
获取这个容器

12:48.420 --> 12:52.420
获取图片容器

12:52.420 --> 12:53.420
对吧

12:53.420 --> 12:54.420
好

12:54.420 --> 12:55.420
然后接下来下面

12:55.420 --> 12:56.420
下面的话我这边

12:56.420 --> 12:57.420
图片已经搞定了

12:57.420 --> 12:58.420
搞定之后

12:58.420 --> 13:00.420
然后接下来我这边divcontainer

13:00.420 --> 13:01.420
然后接下来点

13:01.420 --> 13:03.420
pun的choud

13:03.420 --> 13:05.420
是不是添加这个动物元素

13:05.420 --> 13:06.420
你要添加谁

13:06.420 --> 13:08.420
添加这个image

13:08.420 --> 13:09.420
对吧

13:09.420 --> 13:11.420
那就是将

13:11.420 --> 13:14.420
将该图片

13:14.420 --> 13:16.420
添加到

13:16.420 --> 13:17.420
哪里呢

13:17.420 --> 13:20.420
添加到容器里面

13:20.420 --> 13:21.420
对吧

13:21.420 --> 13:22.420
好

13:22.420 --> 13:23.420
我们来看一下好不好使

13:23.420 --> 13:25.420
我们这边回到

13:25.420 --> 13:27.420
我们这边要重新打开一下

13:27.420 --> 13:30.420
这边打开

13:30.420 --> 13:32.420
看一下好不好使

13:32.420 --> 13:34.420
是不是就出来了

13:34.420 --> 13:35.420
看到没有

13:35.420 --> 13:37.420
这边就已经出来了

13:37.420 --> 13:38.420
就已经出来了

13:38.420 --> 13:39.420
图片已经出来了

13:39.420 --> 13:40.420
就是这个样子

13:40.420 --> 13:41.420
为什么呢

13:41.420 --> 13:42.420
就是因为你这个图片

13:42.420 --> 13:44.420
你是写了这个绝对定位的

13:44.420 --> 13:46.420
它这边是不是就全部都在这个位置

13:46.420 --> 13:47.420
看到没有

13:47.420 --> 13:49.420
正因为绝对定位

13:49.420 --> 13:50.420
你看这边

13:50.420 --> 13:51.420
是不是就是

13:51.420 --> 13:53.420
它没有在常规流里面

13:53.420 --> 13:54.420
说这边的这个盒子

13:54.420 --> 13:56.420
你看是不是这个高度就没有了

13:56.420 --> 13:57.420
看到没有

13:57.420 --> 13:59.420
高度就没有了

13:59.420 --> 14:01.420
这个是OK的

14:01.420 --> 14:02.420
好

14:02.420 --> 14:03.420
然后你这边

14:03.420 --> 14:05.420
你如果把这个绝对定位

14:05.420 --> 14:06.420
你把它关掉

14:06.420 --> 14:07.420
我把它关掉

14:07.420 --> 14:09.420
关掉的话它现在就是这个样子的

14:09.420 --> 14:10.420
比我这边一刷新

14:10.420 --> 14:11.420
看到没有

14:11.420 --> 14:12.420
它就是这个样子的

14:12.420 --> 14:14.420
它是不是就把这个图片的这个盒子

14:14.420 --> 14:16.420
这个高度是不是把它撑起来了

14:16.420 --> 14:17.420
看到没有

14:17.420 --> 14:18.420
撑起来了

14:18.420 --> 14:19.420
它就这样子

14:19.420 --> 14:20.420
一张一张排列就是了

14:20.420 --> 14:22.420
比较这个是第一张图片

14:22.420 --> 14:23.420
这个是第二张图片

14:23.420 --> 14:24.420
这是第三张

14:24.420 --> 14:25.420
反正要挨着挨着排

14:25.420 --> 14:26.420
排不下了就排到

14:26.420 --> 14:27.420
是不是下一行

14:27.420 --> 14:28.420
对不对

14:28.420 --> 14:29.420
挨着挨着排

14:29.420 --> 14:30.420
但是你这边的话

14:30.420 --> 14:32.420
一旦把这个

14:33.420 --> 14:34.420
不是这里

14:34.420 --> 14:36.420
你这边的话一旦把这个

14:36.420 --> 14:38.420
把这个打开了

14:39.420 --> 14:40.420
绝对定位打开了

14:40.420 --> 14:41.420
它是不是所有的图片

14:41.420 --> 14:42.420
是不是都

14:42.420 --> 14:44.420
就是没有在标准流里面

14:44.420 --> 14:45.420
对不对

14:45.420 --> 14:47.420
所以就变成这个样子了

14:47.420 --> 14:48.420
并且你的这个容器

14:48.420 --> 14:49.420
容器的话

14:49.420 --> 14:50.420
它是不是也是

14:50.420 --> 14:51.420
因为没有东西来支撑

14:51.420 --> 14:52.420
它这边的话高度

14:52.420 --> 14:53.420
是不是就没有高度

14:53.420 --> 14:54.420
对吧

14:54.420 --> 14:56.420
因为你图片没有在标准流里面了

14:56.420 --> 14:57.420
对不对

14:57.420 --> 14:58.420
OK

14:58.420 --> 14:59.420
好

14:59.420 --> 15:01.420
目前为止的话就是这个样子

15:01.420 --> 15:02.420
好

15:02.420 --> 15:03.420
这个样子完了之后

15:03.420 --> 15:04.420
然后接下来

15:04.420 --> 15:05.420
下一步

15:05.420 --> 15:07.420
下一步我们要做的事情是什么呢

15:07.420 --> 15:08.420
那接下来我们是不是

15:08.420 --> 15:09.420
就是要排列

15:09.420 --> 15:10.420
每一张图片了

15:11.420 --> 15:12.420
接下来

15:14.420 --> 15:15.420
接下来

15:16.420 --> 15:18.420
我们要做的

15:20.420 --> 15:21.420
我们要

15:22.420 --> 15:23.420
做的工作

15:25.420 --> 15:26.420
工作

15:26.420 --> 15:27.420
就是什么呢

15:27.420 --> 15:28.420
就是排列

15:29.420 --> 15:31.420
每一张图片

15:32.420 --> 15:33.420
对吧

15:33.420 --> 15:34.420
每一张图片它都会有自己的

15:34.420 --> 15:36.420
Left值和Top值

15:36.420 --> 15:37.420
那既然我们这边

15:37.420 --> 15:38.420
我们就可以这样子

15:38.420 --> 15:39.420
我们这边是不是有

15:39.420 --> 15:40.420
Image这个元素

15:40.420 --> 15:41.420
对吧

15:41.420 --> 15:42.420
我该绑一个事件

15:42.420 --> 15:44.420
叫做Unload事件

15:45.420 --> 15:47.420
当这张图片加载好之后

15:47.420 --> 15:49.420
然后这样我们要重新排列

15:49.420 --> 15:50.420
那重新排列

15:50.420 --> 15:51.420
是不是就是我们这个

15:51.420 --> 15:52.420
上级课讲的

15:55.420 --> 15:56.420
我把这个打开

15:57.420 --> 15:59.420
我把那个课件打开

16:01.800 --> 16:02.800
在这边

16:02.800 --> 16:03.800
是不是就是我们

16:03.800 --> 16:05.800
上级课讲的这个制作思路

16:05.800 --> 16:06.800
对不对

16:06.800 --> 16:07.800
整个这个制作思路

16:07.800 --> 16:09.800
然后首先你要找到什么

16:09.800 --> 16:11.800
是不是要找到这个列

16:11.800 --> 16:13.800
究竟有多少列

16:13.800 --> 16:14.800
找到有多少列之后

16:14.800 --> 16:15.800
然后接下来这边是不是

16:15.800 --> 16:17.800
数组来存放每一列的

16:17.800 --> 16:18.800
这个

16:18.800 --> 16:19.800
就是每一列

16:19.800 --> 16:21.800
它的这个高度

16:21.800 --> 16:22.800
对吧

16:22.800 --> 16:23.800
存放这个每一列的高度

16:23.800 --> 16:24.800
存放了之后

16:24.800 --> 16:25.800
然后接下来去找

16:25.800 --> 16:26.800
这个最小的高度

16:26.800 --> 16:27.800
然后现在是不是放图片

16:27.800 --> 16:29.800
是不是就这一系列的东西

16:29.800 --> 16:30.800
对吧

16:30.800 --> 16:31.800
所以你要做的就是

16:31.800 --> 16:33.800
一个我们这个制作思路的

16:33.800 --> 16:35.800
一系列的这个操作

16:35.800 --> 16:36.800
那这边的话

16:36.800 --> 16:37.800
我就干嘛呢

16:37.800 --> 16:38.800
我这边就选择单独

16:38.800 --> 16:40.800
封装一个函数

16:40.800 --> 16:41.800
不要叫做什么

16:41.800 --> 16:45.500
叫做set a position

16:45.500 --> 16:46.500
positions

16:47.500 --> 16:48.500
这边我写一下

16:48.500 --> 16:49.500
这个就是什么

16:49.500 --> 16:50.500
当

16:51.500 --> 16:53.500
每张图片

16:54.500 --> 16:55.500
夹载

16:56.500 --> 16:58.500
夹载完毕后

16:59.500 --> 17:00.500
然后接下来

17:00.500 --> 17:02.500
都要进行

17:02.500 --> 17:04.500
重新排列

17:05.500 --> 17:06.500
对吧

17:06.500 --> 17:07.500
都要进行重新排列

17:07.500 --> 17:09.500
那重新排列的这个

17:09.500 --> 17:10.500
方法我这边就

17:10.500 --> 17:11.500
封装一个这个

17:11.500 --> 17:14.500
叫做set a positions

17:14.500 --> 17:16.500
set a positions

17:16.500 --> 17:18.500
positions是不是写错了

17:18.500 --> 17:20.500
这边还有一个i是吧

17:20.500 --> 17:21.500
positions

17:22.500 --> 17:23.500
OK

17:23.500 --> 17:25.500
注意你这边能不能加库号呀

17:26.500 --> 17:28.500
这边能不能加库号

17:28.500 --> 17:29.500
你注意啊

17:29.500 --> 17:30.500
我们这边到这边onload

17:30.500 --> 17:32.500
它后面对应的是一个什么

17:32.500 --> 17:33.500
对应的是一个function

17:33.500 --> 17:34.500
就按道理来讲

17:34.500 --> 17:35.500
应该是对应的是什么

17:35.500 --> 17:37.500
对应的是一个这个东西

17:37.500 --> 17:38.500
对不对

17:38.500 --> 17:39.500
应该对应的是一个function

17:39.500 --> 17:41.500
所以你不能加库号

17:41.500 --> 17:42.500
你加库号就变成什么了

17:42.500 --> 17:44.500
所以变成把这个

17:44.500 --> 17:46.500
把这个set a position

17:46.500 --> 17:48.500
这个方法

17:48.500 --> 17:50.500
或者说这个函数调用一遍

17:50.500 --> 17:51.500
调用一遍

17:51.500 --> 17:52.500
然后再把这个结果

17:52.500 --> 17:53.500
返回给它

17:53.500 --> 17:54.500
对不对

17:54.500 --> 17:55.500
所以你这边是不能加这个

17:55.500 --> 17:56.500
库号的

17:56.500 --> 17:57.500
加了库号

17:57.500 --> 17:58.500
它就变成函数调用了

17:59.500 --> 18:00.500
OK

18:00.500 --> 18:01.500
好那接下来

18:01.500 --> 18:02.500
仅就是下一步

18:02.500 --> 18:03.500
下一步的话

18:03.500 --> 18:04.500
是不是就是应该是来写

18:04.500 --> 18:05.500
这么一个函数了

18:06.500 --> 18:07.500
对不对

18:07.500 --> 18:08.500
我们来看一下这个函数

18:08.500 --> 18:09.500
该怎么写

18:10.500 --> 18:14.060
好这样我们来看这里

18:14.060 --> 18:16.060
然后在上面

18:17.060 --> 18:19.060
这边的话

18:19.060 --> 18:20.060
function

18:20.060 --> 18:22.060
然后set

18:22.060 --> 18:23.060
positions

18:23.060 --> 18:25.060
这么一个方法

18:25.060 --> 18:26.060
那这么一个方法就是什么呢

18:26.060 --> 18:28.060
是不是就是设置

18:28.060 --> 18:30.060
每张图片位置的

18:30.060 --> 18:32.060
该方法

18:32.060 --> 18:35.060
该方法

18:35.060 --> 18:36.060
用于

18:36.060 --> 18:37.060
设置

18:37.060 --> 18:39.060
每一张

18:40.060 --> 18:42.060
每一张图片的

18:42.060 --> 18:44.060
位置

18:44.060 --> 18:45.060
对吧

18:45.060 --> 18:46.060
那么我们在设置

18:46.060 --> 18:48.060
这个图片位置之前

18:48.060 --> 18:50.060
我们需要思考一个问题

18:50.060 --> 18:51.060
那么我设置这个图片位置

18:51.060 --> 18:53.060
我是不是首先得知道

18:53.060 --> 18:54.060
是不是几行

18:54.060 --> 18:55.060
几列

18:55.060 --> 18:56.060
对不对

18:56.060 --> 18:58.060
在设置

18:58.060 --> 19:00.060
图片

19:00.060 --> 19:02.060
位置之前

19:04.060 --> 19:05.060
我们

19:05.060 --> 19:07.060
首先需要

19:07.060 --> 19:09.060
知道

19:10.060 --> 19:12.060
需要知道什么呢

19:12.060 --> 19:14.060
几行

19:14.060 --> 19:15.060
几列

19:15.060 --> 19:16.060
你几行几列都不知道

19:16.060 --> 19:18.060
我怎么设置呢

19:18.060 --> 19:19.060
对不对

19:19.060 --> 19:21.060
说需要先知道这个几行几列

19:21.060 --> 19:23.060
好那我这边让我

19:23.060 --> 19:25.060
要设计算这个几行几列

19:25.060 --> 19:26.060
再封装一个函数

19:26.060 --> 19:27.060
比如这边

19:27.060 --> 19:29.060
叫做CAL

19:29.060 --> 19:31.060
通过这个方法

19:31.060 --> 19:33.060
我们就可以得到

19:33.060 --> 19:35.060
通过

19:35.060 --> 19:37.060
通过该方法

19:37.060 --> 19:39.060
我们就可以

19:39.060 --> 19:40.060
得到

19:40.060 --> 19:42.060
这个列数

19:44.060 --> 19:45.060
几行的话

19:45.060 --> 19:46.060
其实

19:46.060 --> 19:48.060
几行的话其实不需要

19:48.060 --> 19:49.060
因为你几行的话

19:49.060 --> 19:50.060
到时候你那个图片

19:50.060 --> 19:51.060
能铺多少行

19:51.060 --> 19:53.060
主要是关键要知道什么呢

19:53.060 --> 19:54.060
关键是要知道几列

19:55.060 --> 19:56.060
主要是知道几列

19:56.060 --> 19:57.060
我知道几列之后

19:57.060 --> 19:59.060
我回头那个数组的那个长度

19:59.060 --> 20:01.060
是不是就是它的列数

20:01.060 --> 20:02.060
对不对

20:02.060 --> 20:04.060
说主要是要得到这个几列

20:04.060 --> 20:06.060
那既然我们这边

20:06.060 --> 20:08.060
来书写这么一个方法

20:08.060 --> 20:11.760
方形

20:11.760 --> 20:12.760
方形

20:12.760 --> 20:13.760
然后这边的话

20:13.760 --> 20:15.760
CAL

20:16.760 --> 20:18.760
该方法

20:18.760 --> 20:20.760
该方法

20:20.760 --> 20:21.760
可以

20:21.760 --> 20:24.760
计算出几列

20:24.760 --> 20:25.760
那怎么计算呢

20:25.760 --> 20:26.760
一步一步来

20:26.760 --> 20:27.760
首先是不是

20:27.760 --> 20:29.760
要得到容器的宽度啊

20:29.760 --> 20:30.760
说我这边

20:30.760 --> 20:32.760
哇一个container

20:32.760 --> 20:34.760
wise

20:34.760 --> 20:35.760
等于一个什么呢

20:35.760 --> 20:37.760
等于一个divcontainer

20:37.760 --> 20:40.760
点这个clientwise

20:40.760 --> 20:41.760
对吧

20:41.760 --> 20:42.760
这个的话是拿到什么呢

20:42.760 --> 20:45.760
拿到你容器的宽度

20:45.760 --> 20:47.760
先把这个拿到

20:47.760 --> 20:48.760
拿到之后

20:48.760 --> 20:51.760
然后接下来你的这个列数

20:51.760 --> 20:53.760
列数

20:53.760 --> 20:55.760
列数是不是就应该是等于

20:55.760 --> 20:57.760
容器的宽度

20:57.760 --> 20:59.760
出一个什么呀

20:59.760 --> 21:02.760
出一个图片的宽度

21:04.760 --> 21:05.760
对不对

21:05.760 --> 21:07.760
说我们这边的话就是

21:07.760 --> 21:09.760
哇一个这个chrome

21:11.760 --> 21:12.760
chrome

21:12.760 --> 21:13.760
它等于什么呢

21:13.760 --> 21:15.760
它等于一个这个

21:15.760 --> 21:17.760
container

21:17.760 --> 21:19.760
containerwise

21:19.760 --> 21:20.760
然后出一个什么呢

21:20.760 --> 21:22.760
出一个这个imagewise

21:22.760 --> 21:23.760
除了之后

21:23.760 --> 21:25.760
然后接下来你需要

21:25.760 --> 21:26.760
向下取整

21:26.760 --> 21:29.760
比如你除出来是3.5

21:29.760 --> 21:30.760
对吧

21:30.760 --> 21:31.760
3.5的话呢

21:31.760 --> 21:32.760
你就应该是

21:32.760 --> 21:33.760
是不是三列

21:33.760 --> 21:35.760
对吧

21:35.760 --> 21:37.760
比如说这边

21:37.760 --> 21:38.760
不是这个

21:38.760 --> 21:40.760
比如说这边

21:40.760 --> 21:42.760
这边我们这边

21:42.760 --> 21:43.760
计算的时候

21:43.760 --> 21:45.760
那张图到哪去了

21:46.760 --> 21:47.760
就这张图

21:47.760 --> 21:49.760
这张图的话你这个100

21:49.760 --> 21:50.760
100的话

21:50.760 --> 21:51.760
这边100

21:51.760 --> 21:53.760
100出一个这个22

21:53.760 --> 21:55.760
它是不是得到了是这个

21:55.760 --> 21:56.760
4.几

21:56.760 --> 21:57.760
对不对

21:57.760 --> 21:58.760
那4.几的话多的部分

21:58.760 --> 21:59.760
我们就要把它省去

21:59.760 --> 22:01.760
因为多的部分是哪来做什么的

22:01.760 --> 22:02.760
是不是做这个间隙的

22:02.760 --> 22:03.760
对不对

22:03.760 --> 22:04.760
说它就应该是4.0

22:04.760 --> 22:05.760
说这边的话

22:05.760 --> 22:07.760
会有一个向下取整

22:07.760 --> 22:08.760
说这边那就是

22:08.760 --> 22:11.760
mess.throw

22:14.070 --> 22:15.070
对吧

22:15.070 --> 22:17.070
这个那就是计算出这个列数

22:17.070 --> 22:19.070
那列数计算出来之后

22:19.070 --> 22:21.070
然后还有一个东西

22:21.070 --> 22:23.070
我们也就在这个函数里面

22:23.070 --> 22:24.070
一起计算了

22:24.070 --> 22:25.070
什么东西呢

22:25.070 --> 22:27.070
就是还需要

22:28.070 --> 22:30.070
还需要计算什么呢

22:30.070 --> 22:31.070
间隙

22:32.070 --> 22:33.070
你还需要把这个

22:33.070 --> 22:35.070
间隙把它计算出来

22:35.070 --> 22:38.070
那间隙的这个计算又怎么计算的

22:38.070 --> 22:39.070
间隙的话是不是就是

22:39.070 --> 22:40.070
应该是

22:40.070 --> 22:42.070
就是总间隙

22:43.070 --> 22:44.070
总间隙

22:44.070 --> 22:46.070
它就应该是等于什么呢

22:46.070 --> 22:48.070
等于你的这个容器

22:49.070 --> 22:51.070
容器宽度

22:52.070 --> 22:54.070
容器宽度

22:55.070 --> 22:56.070
减去

22:57.070 --> 22:58.070
减去什么呢

22:58.070 --> 23:00.070
减去你的这个列数

23:00.070 --> 23:02.070
乘以一个这个

23:02.070 --> 23:03.070
图片宽度

23:04.070 --> 23:05.070
你看呀

23:05.070 --> 23:07.070
这个公式对不对

23:07.070 --> 23:09.070
比方你容器宽度是100

23:09.070 --> 23:10.070
然后接下来图片

23:10.070 --> 23:12.070
宽度是30

23:12.070 --> 23:14.070
然后加一共是3列

23:15.070 --> 23:16.070
那3列的话

23:16.070 --> 23:17.070
是不是就是还剩十项数

23:17.070 --> 23:19.070
那十项数是不是就是你的

23:19.070 --> 23:20.070
总间隙

23:20.070 --> 23:21.070
对不对

23:21.070 --> 23:22.070
好那我们这边

23:22.070 --> 23:23.070
我们就来呗

23:24.070 --> 23:25.070
那我们这边

23:25.070 --> 23:26.070
挖一个

23:27.070 --> 23:28.070
挖一个这个

23:28.070 --> 23:29.070
space

23:30.070 --> 23:31.070
space number

23:31.070 --> 23:32.070
它等于一个什么呢

23:32.070 --> 23:33.070
等于一个这个

23:34.070 --> 23:35.070
加一

23:35.070 --> 23:36.070
这个是什么

23:36.070 --> 23:37.070
这个是你的这个

23:37.070 --> 23:38.070
间隙的数量

23:39.070 --> 23:41.070
间隙的数量

23:42.070 --> 23:43.070
间隙的数量的话

23:43.070 --> 23:44.070
就应该是等于你的这个

23:44.070 --> 23:45.070
列数加一

23:45.070 --> 23:47.070
这个应该好理解吧

23:47.070 --> 23:48.070
就比如说我这边

23:50.070 --> 23:51.070
不用我这边

23:51.070 --> 23:52.070
好这边是五列

23:52.070 --> 23:53.070
五列的话间隙啊

23:53.070 --> 23:55.070
这个是第一个间隙

23:55.070 --> 23:56.070
这个是第二个

23:56.070 --> 23:57.070
这个是第三个

23:57.070 --> 23:58.070
这是第四个

23:58.070 --> 23:59.070
这是第五个

23:59.070 --> 24:00.070
那接下来这边

24:00.070 --> 24:01.070
是不是还要多一个

24:01.070 --> 24:02.070
对不对

24:02.070 --> 24:03.070
它就应该是等于你的这个

24:03.070 --> 24:04.070
间隙

24:04.070 --> 24:05.070
等于你的这个

24:05.070 --> 24:06.070
列数

24:06.070 --> 24:07.070
加一

24:07.070 --> 24:08.070
对吧

24:08.070 --> 24:10.070
好那接下来完了之后

24:10.070 --> 24:11.070
完了之后

24:11.070 --> 24:13.070
然后加你的计算剩余空间

24:13.070 --> 24:14.070
那我这边

24:14.070 --> 24:17.070
left space

24:17.070 --> 24:18.070
它就应该等于什么呢

24:18.070 --> 24:19.070
它就应该等于你的这个

24:19.070 --> 24:20.070
container

24:21.070 --> 24:22.070
减去

24:22.070 --> 24:23.070
是不是就是你的这个

24:23.070 --> 24:24.070
列数

24:24.070 --> 24:25.070
chrome

24:27.700 --> 24:28.700
chrome

24:28.700 --> 24:29.700
成一个什么呢

24:29.700 --> 24:31.700
成一个image wise

24:32.700 --> 24:33.700
这个是不是

24:33.700 --> 24:34.700
计算剩余的空间

24:35.700 --> 24:38.700
计算剩余的空间

24:39.700 --> 24:40.700
对吧

24:40.700 --> 24:41.700
计算了剩余空间之后

24:41.700 --> 24:42.700
然后加每一个

24:42.700 --> 24:44.700
间隙的这个宽度

24:44.700 --> 24:46.700
是不是就计算出来了

24:46.700 --> 24:47.700
这边每个间隙

24:47.700 --> 24:49.700
哇一个space

24:49.700 --> 24:50.700
就应该是等于什么呀

24:50.700 --> 24:51.700
是不是总间隙

24:52.700 --> 24:55.700
总间隙是这个left space

24:55.700 --> 24:57.700
然后你间隙有多少个呢

24:57.700 --> 24:59.700
有这个space number

24:59.700 --> 25:00.700
那这个是不是就是你

25:00.700 --> 25:02.700
每个间隙的空间

25:04.700 --> 25:05.700
对不对

25:06.700 --> 25:07.700
每个间隙的空间

25:07.700 --> 25:09.700
你就计算出来了

25:09.700 --> 25:10.700
好了我们这边呢

25:10.700 --> 25:11.700
列数也计算出来了

25:11.700 --> 25:13.700
间隙数也

25:13.700 --> 25:14.700
这个间隙

25:14.700 --> 25:16.700
间隙的这个空间

25:16.700 --> 25:17.700
也计算出来了

25:17.700 --> 25:18.700
那我们这边

25:18.700 --> 25:20.700
我们就返回return

25:20.700 --> 25:21.700
return一个什么呢

25:21.700 --> 25:22.700
return一个对象

25:22.700 --> 25:23.700
这个对象里面的话

25:23.700 --> 25:25.700
就是这个space

25:25.700 --> 25:27.700
对应space

25:28.700 --> 25:29.700
然后接下来

25:29.700 --> 25:30.700
这边这个chrome

25:31.700 --> 25:32.700
chrome

25:34.700 --> 25:35.700
对应这个chrome

25:36.700 --> 25:37.700
一个是这个间隙

25:37.700 --> 25:39.700
间隙是多宽

25:39.700 --> 25:41.700
然后再一个是这个列数

25:41.700 --> 25:42.700
有多少列

25:42.700 --> 25:44.700
你到时候你后面的话

25:44.700 --> 25:45.700
你学了es6之后

25:45.700 --> 25:46.700
你会发现

25:46.700 --> 25:47.700
你这边的话这个

25:47.700 --> 25:49.700
间值对说名字都是一样的

25:49.700 --> 25:50.700
对吧那es6的话

25:50.700 --> 25:52.700
它就允许你这样子来写

25:53.700 --> 25:54.700
怎么写呢

25:54.700 --> 25:55.700
直接这样子写

25:58.850 --> 25:59.850
看到没有

25:59.850 --> 26:00.850
直接这样子写

26:00.850 --> 26:01.850
你就不需要再写

26:01.850 --> 26:02.850
间值对了

26:02.850 --> 26:03.850
因为你间值对名字都是一样的

26:03.850 --> 26:05.850
就可以直接这样子来写

26:05.850 --> 26:06.850
但这个的话

26:06.850 --> 26:07.850
后面学es6的时候

26:07.850 --> 26:09.850
老师会给大家讲的

26:09.850 --> 26:10.850
好吧

26:10.850 --> 26:12.850
那我们现在就先用这种方式

26:12.850 --> 26:13.850
好

26:13.850 --> 26:14.850
然后接下来这里

26:14.850 --> 26:15.850
这里的话让我这边

26:15.850 --> 26:16.850
调用这个方法

26:16.850 --> 26:19.850
是不是就可以得到列数和什么

26:19.850 --> 26:21.850
和这个间隙

26:22.850 --> 26:23.850
对不对

26:23.850 --> 26:25.850
你可以得到列数和这个间隙

26:25.850 --> 26:26.850
让我把这个信息的话

26:26.850 --> 26:28.850
我就把它保存一下

26:28.850 --> 26:30.850
让我这边就是挖一个

26:31.850 --> 26:33.850
挖一个inf等于

26:34.850 --> 26:36.850
等于它的这个

26:36.850 --> 26:37.850
CAL

26:37.850 --> 26:39.850
这个方法调用的这个结果

26:39.850 --> 26:40.850
好完事之后

26:40.850 --> 26:42.850
我们就该干嘛了

26:42.850 --> 26:44.850
你现在列数已经知道了

26:44.850 --> 26:45.850
列数已经知道

26:45.850 --> 26:46.850
然后这样我们是不是

26:46.850 --> 26:47.850
就是应该是

26:48.850 --> 26:49.850
创建数组

26:49.850 --> 26:51.850
数组里面是保存

26:51.850 --> 26:52.850
每一列的高度

26:53.850 --> 26:54.850
对不对

26:54.850 --> 26:55.850
接下来

26:56.850 --> 26:58.850
我们就需要

26:58.850 --> 27:00.850
创建数组

27:01.850 --> 27:03.850
创建数组

27:03.850 --> 27:04.850
然后数组里面

27:05.850 --> 27:07.850
数组里面

27:10.670 --> 27:11.670
保存

27:11.670 --> 27:13.670
每一列的高度

27:14.670 --> 27:15.670
对不对

27:15.670 --> 27:16.670
所以为什么要先计算

27:16.670 --> 27:17.670
就是有多少列

27:17.670 --> 27:19.670
因为你多少列你不计算出来的话

27:19.670 --> 27:20.670
你这个数组

27:20.670 --> 27:22.670
它的长度是不是你也没办法定

27:23.670 --> 27:24.670
对吧

27:24.670 --> 27:25.670
那我们这边就是

27:25.670 --> 27:26.670
挖一个

27:27.670 --> 27:28.670
挖一个这个

27:29.670 --> 27:30.670
AR

27:30.670 --> 27:31.670
等于一个什么呢

27:31.670 --> 27:33.670
等于一个这个

27:33.670 --> 27:35.670
New

27:36.670 --> 27:37.670
New

27:37.670 --> 27:38.670
然后里面

27:38.670 --> 27:39.670
里面写什么呢

27:39.670 --> 27:40.670
写这个inf

27:40.670 --> 27:41.670
点什么呢

27:41.670 --> 27:42.670
点cron

27:44.670 --> 27:45.670
对不对

27:45.670 --> 27:46.670
inf点cron

27:46.670 --> 27:47.670
然后接下来

27:47.670 --> 27:48.670
你这个数组的话

27:48.670 --> 27:49.670
现在的话它都是这个

27:50.670 --> 27:51.670
它是一个空的数组

27:51.670 --> 27:52.670
空的数组

27:52.670 --> 27:53.670
然后这样我要给它

27:53.670 --> 27:54.670
填充东西

27:54.670 --> 27:55.670
那怎么填充呢

27:55.670 --> 27:57.670
那这边可以使用这个数组的

27:57.670 --> 27:58.670
一个叫做

27:58.670 --> 27:59.670
Fail方法

28:00.670 --> 28:01.670
Fail方法

28:01.670 --> 28:03.670
就填充这个数组

28:03.670 --> 28:04.670
填充这个数组

28:04.670 --> 28:05.670
然后这个数组里面

28:05.670 --> 28:06.670
每一下你要填充

28:06.670 --> 28:07.670
值为多少呢

28:07.670 --> 28:09.670
要填充是0

28:10.670 --> 28:11.670
这个代表什么意思呢

28:11.670 --> 28:12.670
就是数组

28:13.670 --> 28:15.670
数组里面的

28:15.670 --> 28:17.670
每一项

28:17.670 --> 28:20.670
填充为0

28:20.670 --> 28:21.670
对不对

28:21.670 --> 28:22.670
你在这的时候

28:22.670 --> 28:23.670
声明了这个数组的长度

28:23.670 --> 28:24.670
然后在这一步的话

28:24.670 --> 28:25.670
就是每一项

28:25.670 --> 28:26.670
填充为0

28:26.670 --> 28:27.670
好 那我们这边

28:27.670 --> 28:28.670
我们可以看一下吗

28:28.670 --> 28:29.670
有没有这个数组

28:29.670 --> 28:30.670
哎呀

28:30.670 --> 28:32.670
好 然后接下来到这边

28:34.670 --> 28:35.670
来到这边

28:35.670 --> 28:36.670
然后先让我们这边检查

28:38.670 --> 28:39.670
重新刷新

28:39.670 --> 28:40.670
看到没有

28:41.670 --> 28:42.670
看到没有

28:42.670 --> 28:43.670
是不是就填充了

28:43.670 --> 28:44.670
对不对

28:44.670 --> 28:45.670
一共是这个5列

28:45.670 --> 28:46.670
5列

28:46.670 --> 28:47.670
而且现在每一项

28:47.670 --> 28:48.670
是不是都是0

28:48.670 --> 28:49.670
对不对

28:49.670 --> 28:50.670
有同学说

28:50.670 --> 28:52.670
怎么打印这么多次

28:53.670 --> 28:54.670
为什么打印这么多次

28:54.670 --> 28:55.670
33行

28:55.670 --> 28:56.670
我们来看一下

28:57.670 --> 28:58.670
33行

28:58.670 --> 29:00.670
为什么打印这么多次

29:00.670 --> 29:01.670
因为你这边的话

29:01.670 --> 29:02.670
是不是4循环

29:03.670 --> 29:04.670
对吧

29:04.670 --> 29:05.670
4循环每次完了之后

29:05.670 --> 29:06.670
都会掉这个方法

29:06.670 --> 29:07.670
这个方法里面

29:07.670 --> 29:08.670
会打印

29:08.670 --> 29:09.670
对不对

29:09.670 --> 29:10.670
OK

29:10.670 --> 29:12.670
好 数组就创建完了

29:12.670 --> 29:13.670
数组里面保存了什么呢

29:13.670 --> 29:16.670
保存了每一列的高度

29:16.670 --> 29:17.670
那接下来的话

29:17.670 --> 29:18.670
支持的话

29:18.670 --> 29:20.670
我们的准备工作就做好了

29:20.670 --> 29:21.670
支持

29:21.670 --> 29:25.670
我们的准备工作

29:25.670 --> 29:27.670
就做好了

29:30.110 --> 29:31.110
准备工作就做好了

29:31.110 --> 29:32.110
做好了之后

29:32.110 --> 29:34.110
接下来下一步

29:34.110 --> 29:35.110
接下来

29:35.110 --> 29:37.110
下一步

29:37.110 --> 29:39.110
我们就需要干嘛呢

29:39.110 --> 29:41.110
是不是就开始放图片了

29:41.110 --> 29:42.110
对不对

29:42.110 --> 29:43.110
一张一张去放呗

29:43.110 --> 29:44.110
所以接下来

29:44.110 --> 29:45.110
我们就需要

29:45.110 --> 29:47.110
一张一张

29:47.110 --> 29:50.110
一张一张的图片

29:50.110 --> 29:51.110
计算什么

29:51.110 --> 29:53.110
是不是计算TOP

29:53.110 --> 29:57.110
和LIFT

29:57.110 --> 29:58.110
对不对

29:58.110 --> 29:59.110
那来呗

29:59.110 --> 30:00.110
那这边

30:00.110 --> 30:01.110
那就是首先

30:02.110 --> 30:03.110
4循环

30:04.110 --> 30:05.110
然后接下来

30:05.110 --> 30:07.110
挖一个i等于0

30:07.110 --> 30:09.110
i小于一个

30:09.110 --> 30:11.110
这个divcontainer

30:11.110 --> 30:13.110
点这个children

30:14.110 --> 30:16.110
点这个认识

30:16.110 --> 30:18.110
然后加这边 i加加

30:18.110 --> 30:20.110
首先去便利它里面的

30:20.110 --> 30:21.110
每一张图片

30:21.110 --> 30:22.110
便利之后

30:22.110 --> 30:23.110
然后接下来的话

30:23.110 --> 30:25.110
拿到对应的这张图片

30:26.110 --> 30:29.110
获取当前的图片

30:29.110 --> 30:30.110
那当前图片的话

30:30.110 --> 30:31.110
我这边的话就是

30:31.110 --> 30:33.110
挖一个image

30:33.110 --> 30:35.110
等于一个

30:35.110 --> 30:38.110
这个divcontainer

30:38.110 --> 30:40.110
点这个children

30:40.110 --> 30:41.110
i

30:42.110 --> 30:43.110
对吧

30:43.110 --> 30:45.110
获取到当前的图片

30:45.110 --> 30:47.110
获取到当前的图片之后

30:47.110 --> 30:48.110
然后接下来

30:48.110 --> 30:49.110
我们要找什么呢

30:49.110 --> 30:50.110
我们是不是要找

30:50.110 --> 30:52.110
数组里面的最小值

30:52.110 --> 30:53.110
对不对

30:53.110 --> 30:54.110
接下来

30:55.110 --> 30:56.110
接下来

30:56.110 --> 30:59.110
我们要寻找

31:00.110 --> 31:02.110
寻找数组

31:03.110 --> 31:05.110
里面的

31:06.110 --> 31:08.110
最小值

31:09.110 --> 31:11.110
你应该找数组里面的

31:11.110 --> 31:13.110
这个最小值

31:13.110 --> 31:14.110
那接下来的话

31:14.110 --> 31:15.110
这边怎么找最小值呢

31:15.110 --> 31:16.110
好我这边

31:16.110 --> 31:17.110
我封装一个这个方法

31:17.110 --> 31:18.110
不要叫做什么呢

31:18.110 --> 31:20.110
叫做getme

31:20.110 --> 31:22.110
然后把什么传过去呢

31:22.110 --> 31:24.110
把你的这个数组传过去

31:24.110 --> 31:25.110
哎呀啊

31:25.110 --> 31:26.110
那接下来

31:26.110 --> 31:27.110
在你的上面

31:27.110 --> 31:29.110
是不是就应该有这么一个方法

31:29.110 --> 31:31.110
获取最小值的方法

31:31.110 --> 31:32.110
对吧

31:32.110 --> 31:35.110
获取最小值

31:36.110 --> 31:37.110
那我们这边的话

31:37.110 --> 31:38.110
方形

31:38.110 --> 31:42.620
方形然后get这个me

31:44.620 --> 31:46.620
好把这个air

31:46.620 --> 31:47.620
把它传过来

31:47.620 --> 31:48.620
传过来之后

31:48.620 --> 31:49.620
然后接下来

31:49.620 --> 31:50.620
我们这边就要开始找了

31:50.620 --> 31:52.620
那这边的话就是

31:52.620 --> 31:53.620
我要找一个数组里面的

31:53.620 --> 31:54.620
最小值

31:54.620 --> 31:55.620
你想想该怎么找

31:55.620 --> 31:57.620
啊这里设计到算法了

31:57.620 --> 31:59.620
啊设计到算法了

31:59.620 --> 32:00.620
我要找一堆数里面的

32:00.620 --> 32:01.620
最小值

32:01.620 --> 32:02.620
那我怎么办呢

32:02.620 --> 32:04.620
我是不是可以假设

32:04.620 --> 32:06.620
先假设

32:06.620 --> 32:08.620
第一项

32:08.620 --> 32:09.620
是不是最小的

32:09.620 --> 32:10.620
对不对

32:10.620 --> 32:11.620
这边

32:11.620 --> 32:13.620
假设

32:13.620 --> 32:15.620
第一项

32:15.620 --> 32:16.620
设

32:16.620 --> 32:17.620
最小的

32:17.620 --> 32:18.620
所以我挖了一个me

32:18.620 --> 32:20.620
就等于air0

32:20.620 --> 32:21.620
就等于它的第一项

32:21.620 --> 32:23.620
然后干嘛呢

32:23.620 --> 32:27.620
然后这边的话去便利它

32:27.620 --> 32:29.620
挖一个i等于一个e

32:29.620 --> 32:31.620
就从它的第二项开始

32:31.620 --> 32:33.620
i小于air0

32:33.620 --> 32:34.620
认识

32:34.620 --> 32:36.620
i加加

32:36.620 --> 32:37.620
看到没有

32:37.620 --> 32:39.620
然后if

32:39.620 --> 32:40.620
if找到什么呢

32:40.620 --> 32:42.620
找到air这个i

32:42.620 --> 32:45.620
如果小于这个me

32:45.620 --> 32:46.620
那是不是已经找到

32:46.620 --> 32:47.620
比你这个最小值

32:47.620 --> 32:49.620
你假设的这个最小值

32:49.620 --> 32:50.620
还要小的

32:50.620 --> 32:51.620
那我就应该干嘛呀

32:51.620 --> 32:52.620
我这边的话

32:52.620 --> 32:53.620
是不是就是

32:53.620 --> 32:55.620
应该是把这个值给它

32:55.620 --> 32:56.620
对不对

32:56.620 --> 32:57.620
好然后接下来

32:57.620 --> 32:58.620
整个 FOR 循环

32:58.620 --> 33:00.620
这个 FOR 循环

33:00.620 --> 33:02.620
整个 FOR 循环跑完的话

33:02.620 --> 33:03.620
那你的最小值

33:03.620 --> 33:04.620
是不是也就找到了

33:04.620 --> 33:05.620
找到之后

33:05.620 --> 33:08.620
然后将我们这边return

33:08.620 --> 33:09.620
return

33:09.620 --> 33:11.620
把这个值返回就可以了

33:11.620 --> 33:13.620
其实你们后面学了

33:13.620 --> 33:14.620
这个后面的姿势之后

33:14.620 --> 33:15.620
你会发现

33:15.620 --> 33:16.620
其实不用写这么复杂

33:16.620 --> 33:18.620
你现在之所以写这么复杂

33:18.620 --> 33:20.620
是因为你的姿势不够

33:20.620 --> 33:21.620
后面的话

33:21.620 --> 33:22.620
你会发现

33:22.620 --> 33:23.620
直接就是一句话

33:23.620 --> 33:24.620
什么呢

33:24.620 --> 33:27.620
就直接mess掉mess的方法

33:27.620 --> 33:28.620
掉它的命方法

33:28.620 --> 33:29.620
然后接下来这边

33:29.620 --> 33:30.620
Apply

33:30.620 --> 33:31.620
然后接下来这边

33:31.620 --> 33:32.620
No

33:32.620 --> 33:33.620
然后

33:34.620 --> 33:35.620
看到没有

33:35.620 --> 33:36.620
一行代码就找完了

33:36.620 --> 33:38.620
我就找数组的最小值

33:38.620 --> 33:39.620
或者怎么做呢

33:39.620 --> 33:40.620
或者这样子做

33:40.620 --> 33:44.620
min.mess.min

33:44.620 --> 33:45.620
然后加这边

33:45.620 --> 33:46.620
传入多个数

33:46.620 --> 33:48.620
那我这边可以解构这个数组

33:48.620 --> 33:50.620
解构这个

33:51.620 --> 33:52.620
看到没有

33:52.620 --> 33:54.620
就直接这样子写就完事了

33:54.620 --> 33:56.620
这个的话是

33:56.620 --> 33:58.620
就是大家后面要学的姿势

33:58.620 --> 33:59.620
所以我这边的话

33:59.620 --> 34:00.620
就先把它注射掉

34:00.620 --> 34:01.620
你先知道

34:01.620 --> 34:02.620
先看一眼

34:02.620 --> 34:04.620
看一眼有那么个印象

34:04.620 --> 34:05.620
好吧

34:05.620 --> 34:06.620
好了接下来

34:06.620 --> 34:07.620
我们这边

34:07.620 --> 34:08.620
这边是不是就找到

34:08.620 --> 34:09.620
这个最小值了

34:09.620 --> 34:10.620
对不对

34:10.620 --> 34:11.620
找到最小值

34:11.620 --> 34:12.620
那我这边就是存一下

34:12.620 --> 34:13.620
这边那就是

34:13.620 --> 34:16.620
哇一个main top

34:17.620 --> 34:19.620
这边就是找到数组里面

34:19.620 --> 34:21.620
最小的这个

34:21.620 --> 34:22.620
找到最小的这个之后

34:22.620 --> 34:23.620
然后接下来

34:23.620 --> 34:24.620
我们就需要干嘛呢

34:24.620 --> 34:25.620
我们这边的话

34:25.620 --> 34:26.620
是不是就是应该是

34:26.620 --> 34:28.620
设置这个top值

34:29.620 --> 34:30.620
对不对

34:30.620 --> 34:31.620
设置这个top值

34:31.620 --> 34:33.620
所以当前的这个image

34:33.620 --> 34:35.620
点这个style

34:35.620 --> 34:37.620
点这个top

34:37.620 --> 34:39.620
就等于一个什么呢

34:39.620 --> 34:41.620
等于一个min top

34:41.620 --> 34:45.620
然后加上一个p差

34:45.620 --> 34:47.620
加上一个p差

34:47.620 --> 34:48.620
那我这边的话

34:48.620 --> 34:50.620
一张图片是不是就设置完了

34:50.620 --> 34:51.620
但设置完了之后

34:51.620 --> 34:53.620
然后既然有一个很重要的事情

34:53.620 --> 34:54.620
什么事情

34:54.620 --> 34:56.620
有一个非常重要的事情

34:56.620 --> 34:58.620
你是不是得改变

34:58.620 --> 35:00.620
这一列的最小高度啊

35:00.620 --> 35:01.620
对不对

35:01.620 --> 35:02.620
不然的话他就一直在

35:02.620 --> 35:03.620
同一个位置

35:03.620 --> 35:05.620
所以我这边给你写一下

35:05.620 --> 35:07.620
接下来有一个

35:07.620 --> 35:12.620
非常非常重要的事情

35:12.620 --> 35:14.620
就是什么呢

35:14.620 --> 35:16.620
就是要改变

35:16.620 --> 35:20.620
当前列的高度

35:20.620 --> 35:21.620
对不对

35:21.620 --> 35:23.620
你得把当前列的高度

35:23.620 --> 35:25.620
你把它改了

35:25.620 --> 35:26.620
那怎么来改呢

35:26.620 --> 35:28.620
那我这边的话

35:28.620 --> 35:30.620
首先我们得找到什么呢

35:30.620 --> 35:32.620
是不是找到这个最小数

35:32.620 --> 35:34.620
在这个数组里面的位置

35:34.620 --> 35:35.620
对不对

35:35.620 --> 35:36.620
你现在的话就是

35:36.620 --> 35:37.620
我找到这个最小数了

35:37.620 --> 35:38.620
那现在我反过来

35:38.620 --> 35:39.620
根据这个最小数

35:39.620 --> 35:41.620
我来找它是第几列

35:41.620 --> 35:42.620
因为我回头是不要改

35:42.620 --> 35:43.620
改这个最小数

35:43.620 --> 35:45.620
对应列的这个高度

35:45.620 --> 35:46.620
对不对

35:46.620 --> 35:49.620
首先找到

35:49.620 --> 35:52.620
首先找到

35:52.620 --> 35:55.620
这个最小数

35:55.620 --> 35:57.620
最小数

35:57.620 --> 35:59.620
对应的列数

35:59.620 --> 36:00.620
然后对应的列数

36:00.620 --> 36:01.620
其实就是什么呀

36:01.620 --> 36:03.620
所以就是在数组里面的位置

36:03.620 --> 36:04.620
对吧

36:04.620 --> 36:05.620
所以我这边可以

36:05.620 --> 36:06.620
one index

36:06.620 --> 36:07.620
等于什么呢

36:07.620 --> 36:08.620
等于一个

36:08.620 --> 36:10.620
这个就是我们这边

36:10.620 --> 36:11.620
这个ar

36:11.620 --> 36:12.620
然后接下来

36:12.620 --> 36:15.620
点index of

36:15.620 --> 36:16.620
然后把谁扔进去

36:16.620 --> 36:18.620
是不是就是把这个min

36:18.620 --> 36:19.620
top

36:19.620 --> 36:21.620
把它扔进去

36:21.620 --> 36:22.620
对不对

36:22.620 --> 36:24.620
这里就找到了这个最小数

36:24.620 --> 36:25.620
它对应的位置

36:25.620 --> 36:27.620
也就是说它对应的列数

36:27.620 --> 36:28.620
然后接下来这边

36:28.620 --> 36:29.620
ar

36:29.620 --> 36:31.620
是不是修改这个

36:31.620 --> 36:33.620
ar index

36:33.620 --> 36:34.620
是不是修改这个数

36:34.620 --> 36:35.620
那这个数的话

36:35.620 --> 36:36.620
就应该干嘛呢

36:36.620 --> 36:37.620
这个数的话

36:37.620 --> 36:39.620
就是应该是加等于一个

36:39.620 --> 36:41.620
你这个image

36:41.620 --> 36:43.620
就你这张图片的

36:43.620 --> 36:45.620
这个高度

36:46.620 --> 36:48.620
这张图片的高度

36:48.620 --> 36:49.620
并且还要加上什么呀

36:49.620 --> 36:51.620
是不是加上间谍

36:51.620 --> 36:52.620
对不对

36:52.620 --> 36:54.620
所以这边就是应该是infer

36:54.620 --> 36:56.620
infer

36:56.620 --> 37:00.620
点这个space

37:00.620 --> 37:01.620
看到没有

37:01.620 --> 37:03.620
这个的话就是新的高度

37:03.620 --> 37:04.620
好

37:04.620 --> 37:05.620
这边你写一下

37:05.620 --> 37:07.620
就是新的高度

37:07.620 --> 37:09.620
新的高度等于什么呢

37:09.620 --> 37:13.620
等于图片的高度

37:13.620 --> 37:16.620
加上间谍的高度

37:16.620 --> 37:19.060
对不对

37:19.060 --> 37:21.060
加上这个间谍的高度

37:21.060 --> 37:23.060
那这个就是新的高度

37:23.060 --> 37:24.060
你就把设置完了

37:24.060 --> 37:25.060
设置完了之后

37:25.060 --> 37:26.060
然后接下来

37:26.060 --> 37:27.060
我们整个top

37:27.060 --> 37:28.060
是不是就搞定了

37:28.060 --> 37:29.060
对不对

37:29.060 --> 37:33.060
支持整个top

37:33.060 --> 37:35.060
top

37:35.060 --> 37:39.060
就已经确定了

37:39.060 --> 37:40.060
top值是多少

37:40.060 --> 37:42.060
是不是就是这个mintop

37:42.060 --> 37:43.060
是不是就是它

37:43.060 --> 37:44.060
对不对

37:44.060 --> 37:44.560
mintop

37:44.560 --> 37:45.560
整个top值就确定了

37:45.560 --> 37:47.560
还需要确定什么呢

37:47.560 --> 37:50.560
还需要确定

37:50.560 --> 37:53.560
是不是你的left值呀

37:53.560 --> 37:56.870
是不是还需要确定这个left值

37:56.870 --> 37:57.870
对吧

37:57.870 --> 37:58.870
left值的话

37:58.870 --> 37:59.870
它就和什么

37:59.870 --> 38:02.870
是不是和它的这个列数有关系

38:02.870 --> 38:03.870
对不对

38:03.870 --> 38:05.870
你看这个笔记里面

38:05.870 --> 38:07.870
这个left值

38:07.870 --> 38:08.870
left值

38:08.870 --> 38:10.870
比如我现在是第二张图片

38:10.870 --> 38:11.870
让我知道这个

38:11.870 --> 38:12.870
这个left值

38:12.870 --> 38:13.870
是不是就是和你的这个列数

38:13.870 --> 38:14.870
有关系

38:14.870 --> 38:15.870
对不对

38:15.870 --> 38:16.870
所以我们这边

38:16.870 --> 38:17.870
我们来写

38:17.870 --> 38:18.870
这边呢

38:18.870 --> 38:19.870
这个left值

38:19.870 --> 38:24.870
挖一个left

38:24.870 --> 38:25.870
这left值

38:25.870 --> 38:26.870
就应该等于什么呢

38:26.870 --> 38:30.870
等于一个这个index

38:30.870 --> 38:32.870
加1

38:32.870 --> 38:35.870
然后乘一个这个infer

38:35.870 --> 38:38.870
infer.space

38:38.870 --> 38:39.870
首先呢

38:39.870 --> 38:40.870
这边呢

38:40.870 --> 38:42.870
就是它的这个

38:42.870 --> 38:43.870
键系

38:43.870 --> 38:45.870
究竟有多少个键系

38:45.870 --> 38:47.870
那就是应该是index加1个

38:47.870 --> 38:48.870
对不对

38:48.870 --> 38:49.870
如果你是这个

38:49.870 --> 38:51.870
如果你是这个

38:51.870 --> 38:53.870
看这边

38:53.870 --> 38:54.870
看这边

38:54.870 --> 38:55.870
如果你是第一列

38:55.870 --> 38:56.870
第一列是不是就是一个

38:56.870 --> 38:58.870
是不是一个键系

38:58.870 --> 38:59.870
如果你是第二列

38:59.870 --> 39:00.870
第二列是不是就是

39:00.870 --> 39:01.870
两个键系

39:01.870 --> 39:02.870
这一个

39:02.870 --> 39:03.870
是不是这一个

39:03.870 --> 39:04.870
对不对

39:04.870 --> 39:06.870
所以这边就是这个index加1

39:06.870 --> 39:09.870
乘一个infer.space

39:09.870 --> 39:11.870
然后再加上一个什么呢

39:11.870 --> 39:13.870
再加上一个index

39:13.870 --> 39:14.870
还要乘一个什么呢

39:14.870 --> 39:18.870
乘一个这个infer.space

39:18.870 --> 39:21.870
是不是确定这个left值啊

39:21.870 --> 39:22.870
对不对

39:22.870 --> 39:23.870
确定了之后呢

39:23.870 --> 39:26.870
再设置一下这个left值

39:26.870 --> 39:27.870
好我们这边呢

39:27.870 --> 39:32.870
就是infer.style.left

39:32.870 --> 39:33.870
等于什么呢

39:33.870 --> 39:34.870
等于left

39:34.870 --> 39:37.870
加上一个p差

39:37.870 --> 39:38.870
OK

39:38.870 --> 39:39.870
那到目前为止的话

39:39.870 --> 39:40.870
你的整个

39:40.870 --> 39:42.870
这个盒子里面的图片

39:42.870 --> 39:43.870
就全部

39:43.870 --> 39:45.870
这个就是位置

39:45.870 --> 39:46.870
就全部搞好了

39:46.870 --> 39:47.870
我们这边我们来看一下

39:47.870 --> 39:48.870
回到这边

39:48.870 --> 39:50.870
我们重新刷新

39:50.870 --> 39:52.870
看到没有

39:52.870 --> 39:54.870
是不是就全部排好了

39:54.870 --> 39:56.870
就全部排好了

39:56.870 --> 39:57.870
排好之后

39:57.870 --> 39:58.870
然后既然你这边

39:58.870 --> 39:59.870
会发现一个问题

39:59.870 --> 40:01.870
就这个盒子的高度

40:01.870 --> 40:02.870
这个盒子的高度

40:02.870 --> 40:04.870
是不是仍然没有撑开

40:04.870 --> 40:05.870
对不对

40:05.870 --> 40:06.870
原因很简单

40:06.870 --> 40:08.870
因为你这个

40:08.870 --> 40:10.870
图片是绝对定位

40:10.870 --> 40:12.870
脱离了标准流

40:12.870 --> 40:13.870
那盒子里面

40:13.870 --> 40:14.870
标准流里面没有高度

40:14.870 --> 40:16.870
是不是撑不起这个盒子

40:16.870 --> 40:17.870
对不对

40:17.870 --> 40:18.870
那怎么办呢

40:18.870 --> 40:20.870
那我们这边可以这个样子

40:20.870 --> 40:22.870
我们这边来到外面

40:22.870 --> 40:24.870
来到外面

40:24.870 --> 40:25.870
我们继续写

40:25.870 --> 40:28.870
就是因为图片是

40:28.870 --> 40:30.870
绝对定位

40:30.870 --> 40:31.870
对吧

40:31.870 --> 40:33.870
脱离了什么呀

40:33.870 --> 40:36.870
脱离了标准流

40:36.870 --> 40:39.870
脱离了标准

40:39.870 --> 40:41.870
标准流流

40:41.870 --> 40:42.870
这里啊

40:42.870 --> 40:43.870
脱离了标准流

40:43.870 --> 40:47.870
所以无法撑开

40:47.870 --> 40:50.870
盒子的高度

40:50.870 --> 40:51.870
对吧

40:51.870 --> 40:52.870
那无法撑开盒子的高度

40:52.870 --> 40:53.870
那我们就干嘛呢

40:53.870 --> 40:56.870
那么我们就手动来计算

40:56.870 --> 40:59.870
那么我们就

40:59.870 --> 41:02.870
手动来计算

41:02.870 --> 41:05.870
盒子的高度

41:05.870 --> 41:06.870
那怎么来计算呢

41:06.870 --> 41:08.870
那你这边的话就是

41:08.870 --> 41:09.870
我们这个竖竹里面

41:09.870 --> 41:11.870
竖竹里面是不是就是存放了

41:11.870 --> 41:13.870
就是每一粒的这个高度

41:13.870 --> 41:14.870
对不对

41:14.870 --> 41:15.870
那你就找什么呀

41:15.870 --> 41:17.870
是不是找最大的那个

41:17.870 --> 41:18.870
对不对

41:18.870 --> 41:19.870
比如说我这边

41:19.870 --> 41:20.870
这边这一粒

41:20.870 --> 41:22.870
这一粒啊就是这一粒

41:22.870 --> 41:24.870
这一粒的话他是不是这个最高

41:24.870 --> 41:25.870
那你就是找这一粒

41:25.870 --> 41:26.870
他的这个最大值

41:26.870 --> 41:28.870
他的最大值是不是就是

41:28.870 --> 41:30.870
我的这个盒子的高度啊

41:30.870 --> 41:31.870
对不对

41:31.870 --> 41:32.870
说我们这边

41:32.870 --> 41:33.870
就直接啊

41:33.870 --> 41:34.870
再来封装一个嘛

41:34.870 --> 41:36.870
该是获取最小的

41:36.870 --> 41:37.870
那这边就是

41:37.870 --> 41:40.870
应该是有一个获取最大值

41:40.870 --> 41:43.240
最大值的话

41:43.240 --> 41:45.240
这边那就是max

41:45.240 --> 41:46.240
对吧

41:46.240 --> 41:48.240
那这边那就是max

41:48.240 --> 41:52.240
假设第一项最大

41:52.240 --> 41:53.240
第一项最大

41:53.240 --> 41:54.240
那这边的话

41:54.240 --> 41:55.240
这边的话便利

41:55.240 --> 41:56.240
便利的话

41:56.240 --> 41:57.240
如果他什么呀

41:57.240 --> 42:00.240
他是不是大于max

42:00.240 --> 42:01.240
对不对

42:01.240 --> 42:04.240
他如果大于max

42:04.240 --> 42:07.240
那加这个max等于

42:07.240 --> 42:10.240
等于一个这个ai

42:10.240 --> 42:12.240
这边写错了

42:12.240 --> 42:14.240
最终返回什么呢

42:14.240 --> 42:18.240
返回这个max

42:18.240 --> 42:20.240
这边是这样子

42:20.240 --> 42:21.240
对不对

42:21.240 --> 42:23.240
这边同样也有方法

42:23.240 --> 42:25.240
这边就是叫做max方法

42:25.240 --> 42:27.240
也可以这样子来写

42:27.240 --> 42:28.240
这个你们后面学了

42:28.240 --> 42:29.240
后面的东西

42:29.240 --> 42:30.240
你就知道

42:30.240 --> 42:31.240
这个什么意思了

42:31.240 --> 42:32.240
现在的话

42:32.240 --> 42:33.240
这个看不懂没关系

42:33.240 --> 42:35.240
你关键是把这儿搞懂

42:35.240 --> 42:36.240
这其实是一个

42:36.240 --> 42:38.240
最最简单的算法

42:38.240 --> 42:41.240
你把这一块搞懂

42:41.240 --> 42:42.240
ok

42:42.240 --> 42:43.240
好然后接下来的话

42:43.240 --> 42:44.240
这边

42:44.240 --> 42:46.240
这边我这个盒子的高度

42:46.240 --> 42:47.240
就是什么

42:47.240 --> 42:49.240
我这边是不是就直接getmax

42:49.240 --> 42:51.240
把这个ai

42:51.240 --> 42:52.240
把它传过去

42:52.240 --> 42:53.240
传过去之后

42:53.240 --> 42:55.240
拿到这个max这个值

42:55.240 --> 42:57.240
拿到这个值

42:57.240 --> 42:58.240
拿到这个值之后

42:58.240 --> 42:59.240
然后接下来这边

42:59.240 --> 43:01.240
那就是divcontainer

43:01.240 --> 43:03.240
这个style

43:03.240 --> 43:05.240
点这个heat

43:05.240 --> 43:06.240
设置这个高度

43:06.240 --> 43:07.240
这个高度的话

43:07.240 --> 43:08.240
是不是就是等于

43:08.240 --> 43:10.240
你算出来的这个max

43:10.240 --> 43:12.240
加上一个

43:12.240 --> 43:14.240
pizza

43:14.240 --> 43:15.240
是不是也这样子

43:15.240 --> 43:16.240
好我们这边

43:16.240 --> 43:17.240
我们来看一下这个盒子

43:17.240 --> 43:18.240
能不能称出来

43:18.240 --> 43:20.240
刷新

43:20.240 --> 43:22.240
看到没有

43:22.240 --> 43:24.240
是不是就称出来了

43:24.240 --> 43:25.240
看到没有

43:25.240 --> 43:26.240
就称出来了

43:26.240 --> 43:28.240
这边就等于这个图片

43:28.240 --> 43:30.240
这个图片加上什么

43:30.240 --> 43:31.240
加上这个间隙

43:31.240 --> 43:33.240
所以你看到不是挨着的

43:33.240 --> 43:35.240
这边是不是有一个间隙的

43:35.240 --> 43:36.240
对不对

43:36.240 --> 43:38.240
有这么一个间隙

43:38.240 --> 43:39.240
目前为止的话

43:39.240 --> 43:41.240
你这边其实基本就差不多了

43:41.240 --> 43:42.240
差不多了

43:42.240 --> 43:44.240
还剩最后一步

43:44.240 --> 43:45.240
最后一步是什么呢

43:45.240 --> 43:47.240
最后一步是这个

43:47.240 --> 43:49.240
就我这边你看我现在

43:49.240 --> 43:50.240
我现在这个做托动的话

43:50.240 --> 43:51.240
它是不是

43:51.240 --> 43:53.240
这个并没有变化

43:53.240 --> 43:55.240
那这个我们就需要干嘛呢

43:55.240 --> 43:56.240
我们就需要绑定

43:56.240 --> 43:58.240
对应的事件

43:58.240 --> 43:59.240
回到我们这边

43:59.240 --> 44:01.240
第一步其实就做完了

44:01.240 --> 44:02.240
说实话操作

44:02.240 --> 44:03.240
然后加在这边的话

44:03.240 --> 44:04.240
第二步

44:04.240 --> 44:05.240
第二步要干嘛呢

44:05.240 --> 44:07.240
第二步的话就是

44:07.240 --> 44:09.240
绑定事件

44:09.240 --> 44:11.880
对吧

44:11.880 --> 44:12.880
让我这边我写一个

44:12.880 --> 44:17.880
绑定事件

44:17.880 --> 44:19.880
让我这边写在这里

44:19.880 --> 44:21.880
放心

44:21.880 --> 44:25.880
绑的事件

44:25.880 --> 44:27.880
我们要绑什么事件

44:27.880 --> 44:29.880
我们要绑的事件是不是就一个

44:29.880 --> 44:32.880
是Windows.Unresize

44:32.880 --> 44:33.880
时间

44:33.880 --> 44:34.880
对吧

44:34.880 --> 44:38.880
所以这边就是Windows.Unresize

44:38.880 --> 44:42.880
Resize

44:42.880 --> 44:44.880
这个是吧

44:44.880 --> 44:45.880
Unresize

44:45.880 --> 44:48.880
等于一个这个方形

44:48.880 --> 44:49.880
也就是说这个

44:49.880 --> 44:51.880
这个事件会在什么时候出发呢

44:51.880 --> 44:53.880
该事件

44:53.880 --> 44:55.880
该事件会在

44:55.880 --> 44:56.880
窗体

44:56.880 --> 44:58.880
大小

44:58.880 --> 45:02.880
发生改变的时候

45:02.880 --> 45:04.880
出发

45:04.880 --> 45:05.880
对吧

45:05.880 --> 45:06.880
它会在这个窗体大小

45:06.880 --> 45:08.880
发生改变的时候出发

45:08.880 --> 45:09.880
那出发的话

45:09.880 --> 45:11.880
我们要做什么事情

45:11.880 --> 45:12.880
出发

45:12.880 --> 45:14.880
该事件

45:14.880 --> 45:17.880
我们就需要

45:17.880 --> 45:20.880
重新对图片

45:20.880 --> 45:24.880
进行排列

45:24.880 --> 45:25.880
对不对

45:25.880 --> 45:26.880
那你重新对这个

45:26.880 --> 45:27.880
图片进行排列

45:27.880 --> 45:28.880
就是要干嘛

45:28.880 --> 45:31.880
是不是先计算它的这个几行几列

45:31.880 --> 45:33.880
就是这边

45:33.880 --> 45:35.880
就是这个方法

45:35.880 --> 45:36.880
就是这个方法

45:36.880 --> 45:38.880
是不是先得到它是几列

45:38.880 --> 45:39.880
没有几行

45:39.880 --> 45:40.880
我老是说顺了

45:40.880 --> 45:41.880
老是说几行几列

45:41.880 --> 45:43.880
是不是首先要知道它是不是几列

45:43.880 --> 45:44.880
根据几列

45:44.880 --> 45:45.880
然后接下来这边的话

45:45.880 --> 45:47.880
是不是一张一张的

45:47.880 --> 45:49.880
来分配这个图片

45:49.880 --> 45:50.880
对不对

45:50.880 --> 45:51.880
说这边的话

45:51.880 --> 45:52.880
其实就是要做什么事情呢

45:52.880 --> 45:53.880
这边的话

45:53.880 --> 45:54.880
其实就是调这个方法

45:54.880 --> 45:55.880
调什么方法

45:55.880 --> 45:56.880
调这个

45:56.880 --> 45:59.880
set positions

45:59.880 --> 46:02.880
调这个方法

46:02.880 --> 46:03.880
但是我们说了

46:03.880 --> 46:04.880
你这里的话

46:04.880 --> 46:05.880
你要做一个什么呢

46:05.880 --> 46:06.880
你要做一个防斗的操作

46:06.880 --> 46:07.880
你不能说它这个

46:07.880 --> 46:08.880
稍微

46:08.880 --> 46:10.880
船体大小改变一下

46:10.880 --> 46:12.880
你就马上调这个方法

46:12.880 --> 46:13.880
对不对

46:13.880 --> 46:14.880
你不能这样子

46:14.880 --> 46:15.880
我们这边就是要等它

46:15.880 --> 46:16.880
确认最后这个

46:16.880 --> 46:17.880
它拖动这个船体大小

46:17.880 --> 46:19.880
然后就要不拖动了

46:19.880 --> 46:21.880
就比如说我这边拖动

46:21.880 --> 46:22.880
对吧

46:22.880 --> 46:23.880
我这样一直拖动

46:23.880 --> 46:24.880
它拖一下它就会

46:24.880 --> 46:25.880
就是我这样子一直拖动

46:25.880 --> 46:28.880
它就会一直触发这个resize

46:28.880 --> 46:30.880
我这边

46:30.880 --> 46:31.880
我看一下呢

46:31.880 --> 46:33.880
这个好像不是一直

46:33.880 --> 46:34.880
不是一直这个触发

46:34.880 --> 46:35.880
我看一下

46:35.880 --> 46:36.880
这边的话

46:36.880 --> 46:41.880
比如说我写一个resize

46:41.880 --> 46:44.880
resize

46:44.880 --> 46:46.880
这边我看一下

46:46.880 --> 46:50.960
检查

46:50.960 --> 46:54.650
刷新

46:54.650 --> 46:58.030
比如说我这边

46:58.030 --> 47:01.980
我看一下

47:01.980 --> 47:02.980
就是看到没有

47:02.980 --> 47:03.980
我这边的话

47:03.980 --> 47:04.980
我拖动了它

47:04.980 --> 47:05.980
是不是一直在触发

47:05.980 --> 47:06.980
对不对

47:06.980 --> 47:07.980
那我就要等什么

47:07.980 --> 47:08.980
是不是等它最终

47:08.980 --> 47:09.980
它不拖动了

47:09.980 --> 47:10.980
也就是最后一次

47:10.980 --> 47:11.980
我才干吗

47:11.980 --> 47:12.980
我是不是才去调用

47:12.980 --> 47:13.980
那个方法

47:13.980 --> 47:14.980
说这边

47:14.980 --> 47:15.980
你这边就需要来修

47:15.980 --> 47:17.980
这边你就是有一个防斗

47:17.980 --> 47:18.980
有个防斗

47:18.980 --> 47:19.980
这防斗的话

47:19.980 --> 47:20.980
我在上节课

47:20.980 --> 47:22.980
是不是要把代码片段

47:22.980 --> 47:23.980
写了的

47:23.980 --> 47:24.980
对吧

47:24.980 --> 47:25.980
这边就是什么

47:25.980 --> 47:26.980
你这边的话挖一个

47:26.980 --> 47:29.980
挖一个time id

47:29.980 --> 47:31.980
等于一个now

47:31.980 --> 47:33.980
这个的话就是一个

47:33.980 --> 47:35.980
即时器

47:35.980 --> 47:37.980
即时器的id

47:37.980 --> 47:38.980
然后完事之后

47:38.980 --> 47:42.980
这边就是if time id

47:42.980 --> 47:43.980
所以当前是不是有

47:43.980 --> 47:44.980
这个set time out

47:44.980 --> 47:45.980
是不是还没执行

47:45.980 --> 47:46.980
对不对

47:46.980 --> 47:47.980
那我就把这个

47:47.980 --> 47:48.980
这个time out

47:48.980 --> 47:49.980
我先干吗呢

47:49.980 --> 47:51.980
我先把它清除掉

47:51.980 --> 47:53.980
这边 id

47:53.980 --> 47:54.980
好

47:54.980 --> 47:55.980
接下来这边干吗呢

47:55.980 --> 47:56.980
是不是来一个新的

47:56.980 --> 47:58.980
time id等于一个set time out

47:59.980 --> 48:01.980
你要执行哪一个方法

48:02.980 --> 48:03.980
你要执行哪个方法

48:03.980 --> 48:06.980
你是不是就是要执行这个set

48:07.980 --> 48:09.980
set point

48:10.980 --> 48:11.980
是不是执行这个方法

48:11.980 --> 48:13.980
然后接下来这边

48:13.980 --> 48:14.980
是500

48:14.980 --> 48:15.980
对吧

48:15.980 --> 48:16.980
我设置的是500

48:16.980 --> 48:18.980
你就可以这样子来写

48:18.980 --> 48:19.980
这样子来写

48:19.980 --> 48:20.980
现在我们这边

48:20.980 --> 48:21.980
我们来看一下

48:21.980 --> 48:23.980
我们这边重新刷新一下

48:24.980 --> 48:26.980
比如说我们这边

48:32.940 --> 48:33.940
这边拖动一下

48:36.510 --> 48:37.510
看到没有

48:37.510 --> 48:38.510
是不是OK了

48:39.510 --> 48:40.510
对不对

48:40.510 --> 48:41.510
这边就OK了

48:41.510 --> 48:42.510
OK

48:42.510 --> 48:44.510
这个宽度怎么回事

48:46.510 --> 48:48.510
宽度计算出来对不对

48:48.510 --> 48:49.510
我看一下

48:49.510 --> 48:50.510
这边

48:50.510 --> 48:53.510
这边应该是这个样子的

48:53.510 --> 48:54.510
那宽度

48:57.010 --> 48:58.010
然后

48:58.010 --> 48:59.010
然后我这边

48:59.010 --> 49:00.010
让我拖动一下

49:00.010 --> 49:01.010
拖动

49:01.010 --> 49:02.010
是不是改了

49:02.010 --> 49:03.010
对吧

49:03.010 --> 49:04.010
没问题

49:04.010 --> 49:05.010
这边走

49:05.010 --> 49:06.010
这没问题

49:06.010 --> 49:07.010
对吧

49:07.010 --> 49:08.010
走

49:08.010 --> 49:09.010
这没问题

49:10.010 --> 49:11.010
好了你这边

49:11.010 --> 49:13.010
就是根据这个窗口大小

49:13.010 --> 49:15.010
你这边动态的来计算

49:15.010 --> 49:16.010
有多少裂

49:16.010 --> 49:18.010
那这个功能就做完了

49:18.010 --> 49:19.010
那这个功能做完的话

49:19.010 --> 49:20.010
那有的同学还会觉得

49:20.010 --> 49:21.010
就是

49:21.010 --> 49:22.010
看到我们这个成品

49:22.010 --> 49:24.010
是不是他这边会有一个

49:25.010 --> 49:26.010
会有一个就是这个

49:26.010 --> 49:28.010
缓慢的这个变动效果

49:28.010 --> 49:29.010
但你这边

49:29.010 --> 49:31.010
这个是不是直接就变了

49:31.010 --> 49:32.010
对不对

49:32.010 --> 49:33.010
是不是直接就变了

49:33.010 --> 49:34.010
这个东西你要实现的话

49:34.010 --> 49:35.010
其实很简单

49:35.010 --> 49:37.010
一行代码就搞定了

49:37.010 --> 49:38.010
这个是什么呢

49:38.010 --> 49:39.010
这个的话你给他加一个

49:39.010 --> 49:41.010
那个过渡就行了

49:41.010 --> 49:42.010
明白吧

49:42.010 --> 49:44.010
加一个这个图片的这个过渡

49:44.010 --> 49:46.010
过渡是什么呢

49:46.010 --> 49:48.010
我这边简单介绍一下

49:48.010 --> 49:50.010
过渡是这个样子的

49:50.010 --> 49:52.010
比如说我这边我新建一个

49:53.010 --> 49:56.010
新建一个比较Test.html

49:58.010 --> 50:01.010
好比如说我这边有个DIV

50:01.010 --> 50:02.010
DIV然后这样

50:02.010 --> 50:04.010
我这边写一个这个style

50:04.010 --> 50:05.010
比如这个DIV

50:05.010 --> 50:07.010
我给他一个宽100

50:07.010 --> 50:08.010
高100

50:08.010 --> 50:10.010
我给他一个背景颜色

50:10.010 --> 50:12.010
Banglone Conner

50:12.010 --> 50:13.010
Red

50:13.010 --> 50:14.010
对吧

50:14.010 --> 50:15.010
好了先让我把它打开

50:17.010 --> 50:18.010
打开在我们浏览器

50:18.010 --> 50:19.010
这边是不是有一个

50:19.010 --> 50:20.010
这个红色的这个框框

50:20.010 --> 50:21.010
好然后接下来

50:21.010 --> 50:23.010
我这边我要做一个效果

50:23.010 --> 50:24.010
什么效果呢

50:24.010 --> 50:25.010
我这边就是让他

50:25.010 --> 50:27.010
Hover的时候

50:27.010 --> 50:29.010
我改变他的这个高度

50:29.010 --> 50:30.010
改变他的高度

50:30.010 --> 50:31.010
高度的话我该改成多少呢

50:31.010 --> 50:33.010
改成比如说300

50:34.010 --> 50:35.010
改成300

50:35.010 --> 50:36.010
那目前来讲的话

50:36.010 --> 50:37.010
我这边的话你看我这边

50:37.010 --> 50:38.010
我重新刷新一下

50:39.010 --> 50:40.010
你看是不改是改了

50:40.010 --> 50:42.010
但是是不是很生硬啊

50:42.010 --> 50:43.010
对不对

50:43.010 --> 50:44.010
那么CSS3的话

50:44.010 --> 50:45.010
他就给我们提供了一个

50:45.010 --> 50:46.010
什么呢

50:46.010 --> 50:48.010
提供了一个新的属性叫做Trization

50:50.010 --> 50:51.010
Trization

50:51.010 --> 50:53.010
这个的话就代表过渡

50:53.010 --> 50:54.010
然后这样你这边的话

50:54.010 --> 50:55.010
就可以写一个Or

50:56.010 --> 50:57.010
Or代表什么呢

50:57.010 --> 50:58.010
代表所有属性

50:58.010 --> 50:59.010
针对所有属性

50:59.010 --> 51:00.010
我都要应用这个过渡

51:01.010 --> 51:02.010
然后这样后面

51:02.010 --> 51:04.010
可以写个过渡的时间

51:04.010 --> 51:06.010
比如说一秒钟

51:06.010 --> 51:07.010
对吧

51:07.010 --> 51:08.010
一秒钟

51:08.010 --> 51:09.010
然后这样我们这边

51:09.010 --> 51:10.010
我们来看一下刷新

51:10.010 --> 51:11.010
你看

51:11.010 --> 51:12.010
看到没有

51:12.010 --> 51:13.010
他是不是就是有一个

51:13.010 --> 51:15.010
很缓和的这个效果

51:15.010 --> 51:16.010
看到没有

51:16.010 --> 51:17.010
有一个很缓

51:17.010 --> 51:19.010
这个很缓和的这个效果

51:19.010 --> 51:21.010
所以我们这边也是一样

51:21.010 --> 51:22.010
这边的话

51:22.010 --> 51:23.010
你现在的话一切换

51:23.010 --> 51:24.010
走

51:25.010 --> 51:26.010
这边他直接就变了

51:26.010 --> 51:27.010
对吧

51:27.010 --> 51:28.010
那这个的话你只需要干嘛

51:28.010 --> 51:29.010
只需要设置一下

51:29.010 --> 51:31.010
这边这个Trization

51:31.010 --> 51:32.010
给这个Image

51:32.010 --> 51:34.010
设置一下这个Trization

51:35.010 --> 51:36.010
比如这边Or

51:36.010 --> 51:37.010
然后点5秒

51:38.010 --> 51:40.010
或者一秒钟吗

51:40.010 --> 51:41.010
一秒钟

51:41.010 --> 51:42.010
我们来看一下

51:42.010 --> 51:43.010
好不好使

51:43.010 --> 51:45.010
我们这边重新刷新一下

51:45.010 --> 51:46.010
你看这边效果

51:46.010 --> 51:47.010
是不是已经出来了

51:47.010 --> 51:48.010
走

51:49.010 --> 51:50.010
看到没有

51:50.010 --> 51:52.010
是不是已经出来了

51:52.010 --> 51:53.010
一秒钟

51:53.010 --> 51:55.010
好像太太长了点

51:56.010 --> 51:58.010
这个点5吗

51:58.010 --> 51:59.010
点5

51:59.010 --> 52:00.010
好重新刷新

52:01.010 --> 52:02.010
OK

52:02.010 --> 52:03.010
这个时间差不多

52:03.010 --> 52:04.010
走

52:04.010 --> 52:05.010
对吧

52:06.010 --> 52:07.010
好

52:07.010 --> 52:08.010
你看

52:08.010 --> 52:10.010
是不是效果就出来了

52:10.010 --> 52:11.010
效果就出来了

52:11.010 --> 52:13.010
那我们整个这个瀑布流的话

52:13.010 --> 52:15.010
就是这个样子的

52:15.010 --> 52:16.010
其实很简单

52:16.010 --> 52:17.010
上一节课的话

52:17.010 --> 52:19.010
就是这个前置之事忘记讲了

52:19.010 --> 52:20.010
就这个过度

52:20.010 --> 52:21.010
这个忘记讲了

52:21.010 --> 52:22.010
但这个不影响你做

52:22.010 --> 52:23.010
这个就是

52:23.010 --> 52:25.010
整个这个瀑布流

52:25.010 --> 52:26.010
这瀑布流布局

52:26.010 --> 52:27.010
是不影响你做的

52:27.010 --> 52:28.010
你不要跟我讲

52:28.010 --> 52:30.010
就是因为你没讲这个过度

52:30.010 --> 52:32.010
所以说我没做出来

52:32.010 --> 52:33.010
知道吧

52:33.010 --> 52:35.010
你瀑布流还是能做出来的

52:35.010 --> 52:38.010
只不过就是你在切换这个大小的时候

52:38.010 --> 52:41.010
它是没有一个这个很缓和的这个效果

52:41.010 --> 52:42.010
对不对

52:42.010 --> 52:43.010
就这个你可能没做

52:43.010 --> 52:45.010
但其他的你都是能做的

52:46.010 --> 52:49.010
好 下来把这个瀑布流这个代码再看一下吧

52:49.010 --> 52:50.010
好吧

52:50.010 --> 52:51.010
再看一下

52:51.010 --> 52:53.010
看一下然后没做出来的地方

52:53.010 --> 52:55.010
你看下哪个地方没做出来

52:55.010 --> 52:57.010
自己再做一下

52:57.010 --> 52:59.010
对照着我的代码自己看一下

52:59.010 --> 53:00.010
好吧

53:00.010 --> 53:02.010
这期课就先到这里

