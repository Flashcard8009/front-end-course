WEBVTT

00:00.690 --> 00:08.090
Hello 同学们 这节课的话要给大家带来的是一个这个瀑布流的这么一个案例

00:09.170 --> 00:14.410
那首先的话这个什么是瀑布流呢 这个的话其实我相信有的同学应该是见过的

00:14.930 --> 00:18.890
你看这边就有一张这个瀑布流的这个网页设计图

00:19.530 --> 00:23.890
看到没有 上面的话有对这个瀑布这个瀑布流的一个这个介绍

00:24.610 --> 00:27.650
瀑布流啊又称之为是瀑布流势布局

00:28.250 --> 00:31.930
它是一种什么呢 一种比较流行的这个网站页面的这个布局

00:32.530 --> 00:39.490
这个的话其实在设计内的网站特别的多啊 比如说举个例子 比如说这边

00:41.050 --> 00:45.170
比如说这边的话有一个这个设计相关的网站叫做这个花瓣

00:46.930 --> 00:52.900
花瓣花瓣啊就这个

00:53.900 --> 00:59.620
这个看到没有 这个花瓣应该是这个啊花瓣网

01:00.420 --> 01:06.260
应该是这个啊你看它这个这个的话它就是采用的是瀑布流 比如说这个中式家具

01:09.100 --> 01:12.300
你看看到没有 各位你看这是不是就是一个典型的这个瀑布流

01:13.100 --> 01:17.260
啊你看这边啊就是它的这个图片的高度是不是称之不齐的

01:17.980 --> 01:24.060
对吧啊说这个的话一般就是在这种设计内的这种网站特别的这个多件啊

01:24.140 --> 01:28.300
这个就是这个瀑布流 它做出来的话其实看上去也比较的美观

01:29.020 --> 01:37.180
对吧 看上去也非常的不错 它主要特点是什么呢 它主要特点的话就是你看称之不齐的这个多难布局

01:38.140 --> 01:40.060
啊称之不齐的这个多难布局

01:40.780 --> 01:46.460
好 那我们这边让我们来看一下我们这次要做的这么一个效果啊 我这边让我已经打开了

01:46.940 --> 01:52.300
这个的话是我们要做的这个效果 你看我这个的话是不是就是一个典型的这个瀑布流的这个布局

01:53.020 --> 02:00.620
啊 并且我们这个瀑布流的话会干嘛呢 会随着你这边哈 比如说我这个改变这个窗口的这个宽度

02:01.900 --> 02:06.060
看到没有 这个瀑布流的话它会是会自动的来计算

02:07.020 --> 02:11.660
你应该有几列 对 就是有一个这种响应式的效果啊 比如说我这边再

02:12.380 --> 02:18.300
再来 你看现在是不是就只有两列了 对吧 然后接下来我这边往右边走一点

02:18.860 --> 02:25.500
所以重新回到三列走一点是不是四列 然后接下来的话这边啊五列

02:26.300 --> 02:30.940
好 我们整体的话要实现的就是这么一个效果

02:31.660 --> 02:37.740
好 那这个怎么来实现呢 我这边的话来给大家讲一下这个思路啊 所以我们这边第二个

02:38.300 --> 02:41.100
第二个就是我们的这个制作思路啊

02:42.060 --> 02:49.180
什么这个制作思路是什么呢 首先首先呢 我们仔细观察这个上面的这个瀑布流啊 你观察

02:49.660 --> 02:51.260
观察这个瀑布流或者看这个

02:51.980 --> 02:57.020
你会发现一件事情 每一张图片的话它什么是一定的

02:58.220 --> 03:05.340
你自己想一下啊 仔细想一下每一张图片它什么是一定的 是不是它是个宽度是一定的

03:06.060 --> 03:11.740
看到没有 比如这个图片这么宽 第二张图片是不是也是这么宽 第三张是不是也是这么宽

03:12.620 --> 03:19.500
看到没有宽度是一定的 但高度定不定啊 高度定不定 所以高度不定

03:20.380 --> 03:23.900
对不对 也就是说我们的这个图片的话它是什么呢 它是这个

03:24.540 --> 03:27.660
呃 它是这个定宽不定高

03:28.700 --> 03:30.700
看到没有 定宽不定高

03:31.420 --> 03:38.540
那既然定了宽的话 那接下来的话 我们容器的宽度我们也知道对吧 容器的话到时候我们可以就是获取到

03:39.020 --> 03:45.020
那容器的宽度获取到了 然后图片的宽度它又是定宽的 那我是不是就可以计算出有几列

03:45.980 --> 03:51.420
对不对啊 既然是定宽 那么一共有几列我们是可以计算出来的

03:51.820 --> 03:54.220
那我这边让我举一个例子啊 比如你看这张图

03:54.780 --> 04:01.980
比如说假设我们这个容器 外面这个是容器啊 假设这个容器是多宽呢 这个的话是

04:02.860 --> 04:03.660
100像素

04:04.620 --> 04:09.180
100像素 然后接下来的话 每一张图片它宽是多少呢 宽是22

04:10.460 --> 04:13.980
那你是不是就可以计算出是不是一共有多少列

04:14.780 --> 04:21.420
对不对 一共最多是能放几列 一共最多是不是就是只能放4列 对不对 因为4乘一个这个22

04:22.220 --> 04:25.980
是不是88 88的话 然后接下来这个100像素占满没有

04:27.180 --> 04:33.500
占满没有 是没有占满 没有占满的话 那你这个的话 减去那个88 是不是还有剩余的像素

04:34.060 --> 04:39.500
那还有剩余的像素就是什么呢 是不是就是用来平均分配中间的这个空格啊

04:40.380 --> 04:44.060
看到没有 图片啊 图片之间中间是不是有间隙的

04:44.700 --> 04:47.180
啊 说剩下的话就是用来分配这个

04:47.820 --> 04:48.220
间隙

04:49.260 --> 04:58.060
啊 说这个的话就是首先确定多少列啊 这个的话搞明白没有啊 你如果没搞明白的话 你把视频暂停了 你先想一想

04:58.700 --> 04:59.740
对吧 先想一想

05:01.180 --> 05:05.820
好 然后接下来确定了这个列数之后啊 我们继续往下面看

05:06.300 --> 05:11.020
那接下来的话 我们就要干嘛呢 我们接下来的话就需要拿一个这个数组

05:11.580 --> 05:14.460
来保存这个每一列的这个高度

05:15.260 --> 05:17.020
啊 这边的话应该是就是每一列

05:17.900 --> 05:19.660
保存每一列

05:20.460 --> 05:23.980
每一列的高度 什么意思呢 好 你看我这边给你做了个图

05:24.300 --> 05:27.420
那首先一开始 一开始的话我们这个容器是不是空的

05:28.380 --> 05:31.980
对吧 空的容器 然后我们这边的话刚才已经计算出来几列

05:32.540 --> 05:35.820
是不是四列 对不对 这个是你的第一列 这个是你的第二列

05:36.060 --> 05:41.020
啊 然后接下来的话 这边是这个是第三列 这个是第四列 一共是四列

05:41.340 --> 05:44.540
那接下来的话 一开始的话都是多少呢 都是初始化为零

05:44.780 --> 05:48.300
所以你的数组就该干嘛呢 你的数组就应该是长这个样子的

05:49.420 --> 05:52.860
啊 里面四个零 注意四个零是代表什么呢 代表四列

05:53.340 --> 05:58.620
第一列的高度是零 第二列也是零 第三列也是零 第四列也是零

05:59.580 --> 06:03.500
那有的同学就会觉得奇怪了 你这个拿个数组来保存这个高度

06:03.900 --> 06:06.700
啊 这个什么意思呢 好 你继续往下面看啊

06:07.100 --> 06:09.900
那接下来的话 我们是不是要往你往这个容器里面

06:10.860 --> 06:13.020
往这个容器里面是不是放这个图片

06:13.980 --> 06:20.780
对不对 那关键就是有个问题 我放在哪呢 我就放在这个数组里面最小的

06:21.740 --> 06:25.340
那一块啊 这个数组里面最小的那一块

06:26.060 --> 06:29.420
我就放在那一列啊 哪一列高度最小

06:29.980 --> 06:31.260
那我就放在哪一列

06:31.980 --> 06:35.180
那有的同学会问啊 你这边的话不是现在都是

06:35.660 --> 06:40.460
一样的嘛 都是零吗啊 对啊 因为你开始都是零嘛 但是后面随着你慢慢慢慢

06:41.020 --> 06:44.380
一张一张的这个图片放进去 它就不一样了呀

06:45.180 --> 06:49.020
对吧 让我们来看一下 那首先呢 我放入第一张图片 比如我这个

06:49.580 --> 06:53.980
放入第一张图片 让我这个第一列 第一列的高度是不是就发生了改变

06:54.540 --> 06:57.420
对不对啊 那这第一列的高度是不是就是应该是这么高

06:58.220 --> 07:02.220
对不对 我加上了上面这个啊 加上上面这个就应该是这么高

07:02.540 --> 07:08.620
而不再是零了 不再是零的话 让我这边怎么办呢 我这边那是不是就更新数组的第一项

07:09.100 --> 07:13.980
对不对 数组的第一项啊 然后这边的话就是第一列

07:14.620 --> 07:15.660
第一列的高度

07:16.700 --> 07:20.860
然后完事之后 然后接下来我们就继续 我们现在是不是要放第二张图片

07:21.660 --> 07:25.340
第二张图片的话 然后既然你仍然是要看放在第几列

07:26.140 --> 07:27.580
由于现在的话 后面

07:28.940 --> 07:32.620
第二列 第三列 第四列是不是都是零 所以说他就找到这个了

07:33.820 --> 07:35.980
找到这个之后 然后第二张图片就放在

07:36.700 --> 07:37.580
是不是放在这个位置啊

07:38.540 --> 07:45.260
看到没有 然后接下来的话 这一项是不是会重新被填充值啊 假设这个是填充的是十五

07:45.900 --> 07:53.340
假设啊 假设这个是十五 那他是不是就填充了 填充了是不是变成就你就变成十十五

07:53.740 --> 07:58.060
然后零零 然后接下来第三张图片自然而然就会填充到

07:58.780 --> 08:03.420
是不是第三列 然后接下来第四张图片是不是就会填充到第四列

08:04.380 --> 08:07.740
对不对 那你的第一行就填充完了

08:08.860 --> 08:14.620
那么第一行填充完之后 然后接下来我们来看一下啊 目前为止的话 你的这个数组 你看一下

08:15.340 --> 08:22.300
我每一列的高度是不是都发生了变化啊 第一列的话是十 第二列是十五 然后接下来我

08:22.940 --> 08:26.220
八 那接下来我开始放这个第二排的时候

08:27.180 --> 08:33.740
啊 第二排的时候 那我接下来的话 就会找到哪一列呢 仍然是去找最小值

08:35.740 --> 08:40.380
没有没有 仍然是去找最小值 找到谁 是不是就找到他了

08:41.260 --> 08:46.620
对不对 找到他 找到他的话 那说明就是我下一张图片就是不是就应该是放在他屁股后面

08:48.060 --> 08:53.340
对不对 放在他屁股后面 放在这个位置 放在这个位置之后 然后接下来你不要忘了干嘛呀

08:53.740 --> 08:57.900
不要忘了 把这个位置的这个高度 就这一列的高度 是不是要给他更新

08:59.180 --> 09:02.540
对不对 更新之后 然后下一次他再找的话 是不是就是找到他了

09:03.740 --> 09:10.540
可能啊 你看这边 我来看一下啊 目前第一行满了 该放在第二行了 那第二行放在第几列呢

09:11.100 --> 09:14.860
实际上和上面的算法是一样的 你找数组的最小值

09:15.500 --> 09:20.300
是不是就找到他 对不对 找到他之后 然后接下来就放在他屁股后面就可以了

09:20.860 --> 09:27.100
啊 放完之后 然后有一件事情非常重要 什么事情呢 就是你一定要更新数组

09:28.540 --> 09:33.180
一定要更新数组 为什么 你数组不更新的话 是不是始终这一列是

09:34.060 --> 09:38.780
最小的 那也就是说后面的图片全部都放在哪个位置 是不是全部都放在这个位置

09:39.740 --> 09:45.580
对不对 所以你一定要更新数组 更新了之后 然后接下来的话 他再找的时候 是不是这个就是最小的了

09:46.300 --> 09:49.820
对不对 这一列就是最小的 所以他下一张图片是不是就是放在这个位置

09:50.780 --> 09:57.820
看到没有 所以一定要去更新啊 一定要去更新啊 这个就是这个高度

09:59.020 --> 10:02.140
啊 这边这边就是新的高度的计算公式啊 就比如说我这儿

10:02.780 --> 10:08.460
我这儿放了一张图片之后 比如我这边是不是放一张图片 放上图片之后 然后我说的是不要去更新

10:08.940 --> 10:11.740
更新的话 接下来新的这一列的这个高度

10:12.460 --> 10:18.780
新的这一列的高度 应该等于什么呢 是不是应该是等于这张图片的高度 加上这个见习 你不要把见习忘了

10:19.500 --> 10:25.740
啊 你图片和图片之间是不是有见习的 对吧 加上这个见习再加上这张图片的这个高度

10:26.380 --> 10:33.980
看到没有 所以我这边让给你写的有公式啊 就这一列的高度还等于什么呢 等于这一列就原本的高度

10:34.700 --> 10:39.180
啊 就之前嘛 之前的高度 这个是不是在你数组里面是存了的

10:39.900 --> 10:46.060
对吧 之前的高度加上什么呢 加上见习再加上新的图片的这个高度

10:46.300 --> 10:51.180
明白没有啊 所以一定要去把数组去把他更新了

10:52.220 --> 10:58.460
啊 然后接下来这个脱布值搞定之后 然后接下来我们还要计算什么呢 还要计算这个Left值

10:59.580 --> 11:05.020
看到没有 还要计算这个Left值啊 有同学已经猜到了啊 就说我们整个这个容器肯定是一个

11:05.980 --> 11:12.700
肯定是一个什么 是不是肯定是一个相对定位 然后接下来这边每一张图片每一张图片啊

11:12.940 --> 11:19.180
他绝对是什么 是不是绝对定位 对不对 通过这个脱布值和Left值来定位的啊 那我们刚才计算的是

11:19.420 --> 11:21.740
脱布值 那接下来的话是这个Left

11:22.620 --> 11:24.380
Left值该怎么计算呢

11:25.020 --> 11:29.420
Left值的话他其实的话 和我们图片的这个编号

11:30.220 --> 11:33.740
并没有关系 他和什么有关系呢 他和这个东西有关系

11:34.860 --> 11:37.100
就是你图片所在的列

11:38.300 --> 11:41.020
啊 和图片所在的列有关系

11:41.580 --> 11:47.660
比如举个例子啊 比如你看这张图 这个是我的第一列 第二列 第三列 第四列 第五列

11:48.300 --> 11:50.700
那接下来你看这边 比如第二张图片

11:51.500 --> 11:55.980
第二张图片的话 他的Left值是不是就是应该是等于你第一张图片

11:56.620 --> 11:58.060
再加上他

11:59.340 --> 12:01.100
对不对 然后接下来的话 这边

12:02.060 --> 12:07.020
比如第三张图片 第三张图片是不是就是应该是等于这个图片的宽度的几倍

12:07.820 --> 12:09.900
是不是两倍 再加这个间隙

12:10.780 --> 12:15.420
间隙是不是也是两个 对不对 那依此类推是不是规律就出来了

12:15.740 --> 12:19.820
那这边的话是不是就是Itemwise 是不是就是他的这个宽度

12:20.460 --> 12:23.660
加上什么呢 加上这个Gap 也就是加上这个间隙

12:24.700 --> 12:27.740
加上之后再乘一个什么呢 是不是再乘一个这个倍数啊

12:28.620 --> 12:30.140
对不对 再乘一个倍数

12:30.700 --> 12:31.260
就ok了

12:31.820 --> 12:35.980
啊 所以这个整个这个瀑布流的话 核心就是什么呢 核心就是

12:36.540 --> 12:41.820
对这个图片进行去定位 计算他的TOP值和Left值

12:42.700 --> 12:44.060
啊 这个其实就是他的核心

12:45.180 --> 12:50.300
明白没有啊 主要就是去计算TOP值该怎么计算Left值该怎么计算

12:50.860 --> 12:54.940
啊 TOP值该怎么计算 TOP值的话是不是就是首先你要拿一个数组来装

12:55.420 --> 12:56.860
每一列的这个高度

12:57.580 --> 12:59.020
对不对 然后再去找最小的

12:59.820 --> 13:03.660
找了最小之后 然后接下来我下一张图片是不是就是应该是放在这一列

13:04.380 --> 13:07.900
对吧 放了之后 然后再去更新这个值 再把这个值更新了

13:08.300 --> 13:11.180
Left怎么算呢 Left是不是就是根据你这个列数

13:12.540 --> 13:15.260
对不对 根据你的列数 你当前是第几列

13:15.660 --> 13:22.460
好 然后接下来你去计算他的这个规律啊 就是什么呢 就是这个图片的宽度加上这个间隙的宽度

13:22.860 --> 13:28.220
好 然后接下来是几列 然后加你这边的话去乘以这个相应的倍数

13:29.020 --> 13:29.580
就可以了

13:30.300 --> 13:32.940
啊 这个就是整个这个制作思路

13:33.820 --> 13:38.140
然后还有一个东西 还有一个东西是什么呢 还有一个东西就是这个寒树防斗

13:39.420 --> 13:42.060
啊 这个要简单说一下 什么叫做寒树防斗

13:42.700 --> 13:45.900
所谓寒树防斗的话 就是我们在哪会用到呢 在这个地方

13:46.700 --> 13:49.020
就我刚才演示 比如说我现在改变这个大小

13:50.140 --> 13:56.300
看到没有 图片是不是自动的这个列数就发生了改变 对吧 然后将我这边让我再来

13:57.580 --> 13:58.380
比我这边再来

13:59.660 --> 14:01.580
是不是自动这个列数就发生改变

14:02.300 --> 14:04.060
然后接下来的话 这边拉开

14:05.420 --> 14:10.380
看到没有 啊 自动发生改变 那这个是怎么做到的呢 啊 这个其实很简单

14:11.580 --> 14:20.220
为什么说很简单呢 就是我们的话会去监听一个这个事件 什么事件呢 叫做这个Windows的一个叫做Resize事件

14:21.340 --> 14:24.620
每当你这个窗口的这个窗体的这个大小

14:25.260 --> 14:29.580
发生变化的时候 它就会去触发这个Resize事件

14:30.300 --> 14:33.660
那触发这个Resize事件的话 那我们就需要这个重新排列

14:34.380 --> 14:36.700
对不对 需要重新去排列你的这个

14:37.660 --> 14:41.020
图片 那首先的话 你就是要重新去计算这个列数

14:41.740 --> 14:47.180
然后接下来重新去计算每张图片它的这个top值 对吧 让你的那个数组里面

14:47.740 --> 14:49.740
元素的个数是不是也要发生改变

14:50.540 --> 14:54.700
对不对 好 那其实就是什么呢 就是我们上面的这个制作思路

14:55.500 --> 15:00.060
对吧 那你把整个制作思路 你把它干嘛的 你把它封装成一个函数

15:01.660 --> 15:07.500
是不是就ok了 就我们刚才讲了这么多啊 就是这里制作思路首先找多少列

15:07.980 --> 15:12.620
找了之后 然后接下来拿数组来装啊 然后接下来的话找到它的这个top值

15:13.020 --> 15:14.940
然后接下来再找它的这个left值

15:15.660 --> 15:19.900
整个这个制作思路 你把它一旦封装成一个函数之后

15:20.620 --> 15:26.540
那你到时候 你这个触发率赛制事件的时候 你是不是直接调用这个函数

15:27.420 --> 15:29.100
是不是就可以了 对吧

15:31.440 --> 15:36.800
但是呢 调用函数的话 这里的话会涉及到一个知识 就是我这边写了这个函数防斗

15:37.360 --> 15:41.360
啊 这个函数防斗究竟是什么意思 就是我这边的话 我每次

15:42.960 --> 15:47.440
你注意看哈 就是我这边的话 我每次 比如说我这样子 我一拉

15:48.400 --> 15:51.440
我每次拉的时候 他就是你看我这边来回拉的时候

15:52.080 --> 15:55.760
每一次他都会触发什么的 是不是都会触发这个resize实现

15:56.480 --> 16:04.080
克拉面我现在来回再拉克拉面啊 那他是不是每次都会触发这个resize啊 那触发这个resize呢 接下来我马上就去调这个函数吗

16:04.720 --> 16:12.960
啊 不是 我要就是确定这个用户已经就是确定就是这么大了啊 比如说我现在的话拉到这个位置 然后没有再拉了

16:13.840 --> 16:22.160
对吧 我要确定用户没有再拉了 我是不是再去触发那个就是就是调用那个函数啊 我不能说用户比如说从这

16:22.960 --> 16:24.000
啊 比如说我从这

16:25.360 --> 16:26.960
用户从这拉到这

16:27.600 --> 16:34.080
好 那这边是不是横跨了差不多这么长距离的这个就是移动 然后每一次我都去调这个函数

16:34.720 --> 16:39.120
那你这样子的话 是不是 其实我们要的指是什么呀 是不是只是要的是拉到这个点的时候

16:40.080 --> 16:43.200
对不对 拉到这个点的时候也就是说最后一次的时候

16:44.000 --> 16:49.200
说这样我这边的话就是有一个函数访懂 我不能让我的这个函数触发那么多次

16:50.080 --> 16:57.600
我只干嘛呢 我只触发最后一次 那怎么做呢啊 很简单这个的话我把这个代码片段给你放在这里了

16:58.240 --> 17:01.200
其实就是写一个什么呢 就是写一个这个timeout

17:02.160 --> 17:08.560
啊这个set timeout这个大家是学过的 这是不是就是啊 一段时间后执行某个函数啊

17:09.200 --> 17:11.680
对不对 我这边设置什么呢 设置这个500毫秒

17:12.720 --> 17:19.440
500毫秒之后 然后接下来再来触发 那这个时候用户比如他又在拖动了 又在拖动是不是又会触发这个

17:20.000 --> 17:21.280
这个unresize啊

17:22.080 --> 17:26.720
对吧 又触发之后 然后这一次的话我就看什么呢 我就看他有没有这个timeout

17:27.360 --> 17:30.480
啊 第一次他是没有的 因为第一次你看我刚开始设的是不是闹

17:31.040 --> 17:35.120
对吧 第一次是没有的 不会进这个衣服 然后接下来这边是500毫秒之后

17:35.600 --> 17:38.560
会重新触发这个函数 这个就是我封装好的

17:39.280 --> 17:43.520
啊 这个是封装好的 触发这个函数 就是啊 就调用这个函数

17:43.920 --> 17:49.600
调用这个函数之后 然后接下来用还在还在改变那个窗口大小 那是不是又会触发他

17:50.240 --> 17:53.760
触发他时候这一次就会干嘛了 这一次是不是就会进衣服了

17:54.800 --> 18:01.840
看到没有 这一次就会进衣服 那这一次进衣服的话 让我干嘛呢 我是不是把这个就是上一次的那个timeout

18:02.480 --> 18:07.760
我给他删除掉 对吧 删除掉之后要重新干嘛呢 重新set timeout

18:09.120 --> 18:16.960
看到没有 重新set timeout啊 这个的话这个函数防抖啊 大家也可以尝试写一下啊 尝试写一下

18:17.520 --> 18:22.640
那整个这个瀑布流的这个制作思路的话 大致就是这个样子的

18:23.840 --> 18:26.640
啊 你下来的话自己做一下嘛

18:27.920 --> 18:31.600
自己做一下啊 就做成这种效果就可以了 首先的话这个图片

18:32.160 --> 18:35.680
能够按照这个瀑布流的这个样子 把它排出来

18:36.240 --> 18:43.840
然后接下来的话 这边你改变这个窗口大小 他可以有一个这个就是排列的这个更改啊 就是这个列书的更改

18:44.480 --> 18:50.160
可以有个这个啊 大家下来的话做一下 好吧 好 这些课就先到这里

