WEBVTT

00:00.050 --> 00:04.350
这些可能咱们来实现这个无缝轮波图这么一个效果

00:04.650 --> 00:08.050
这个效果呢 其实也没有多少可以掩饰的

00:08.450 --> 00:11.550
因为上网的过程中经常都看见这种类型的轮波图

00:11.550 --> 00:12.650
对吧 把它放大一点

00:14.250 --> 00:15.250
它可以自动切换

00:15.850 --> 00:17.250
而且是无缝切换

00:17.350 --> 00:18.550
什么叫无缝切换呢

00:18.550 --> 00:20.550
你注意看它切换到最后一张的时候

00:21.150 --> 00:22.550
你看 现在到最后一张了

00:22.550 --> 00:23.350
继续切换

00:23.450 --> 00:25.350
它仍然是向左滑动

00:25.550 --> 00:27.050
可以进行无缝切换

00:27.650 --> 00:30.550
然后鼠标移上去的时候它停止切换

00:30.950 --> 00:36.050
左右两边有可以操作的区域来进行无缝切换

00:36.450 --> 00:38.350
你看这里向右切换的时候

00:38.350 --> 00:39.550
就像左切换的时候

00:39.750 --> 00:41.050
它其实也是无缝的

00:41.050 --> 00:42.350
也是可以无缝的

00:42.950 --> 00:44.450
那么这里边有指示器

00:44.450 --> 00:46.250
指示器的话就是一个正常切换

00:47.950 --> 00:50.050
就这么一个效果 无缝轮波图

00:50.850 --> 00:52.250
那么像这种轮波图

00:52.250 --> 00:56.150
你们以后在公司里边开发的多不多

00:57.250 --> 00:59.950
效果肯定十之八九都会遇到

01:00.550 --> 01:04.350
但是倒是不需要你去写什么代码

01:04.350 --> 01:08.550
因为好多轮波图的插件都已经给你写好了

01:08.550 --> 01:09.950
你直接拿去用就行了

01:09.950 --> 01:11.550
比方你们以后学到框架

01:11.550 --> 01:13.750
学到一些框架里边的组件库

01:13.750 --> 01:14.650
它都给你做好了

01:14.650 --> 01:15.950
你直接用就完事了

01:16.750 --> 01:17.950
那为什么还要学习呢

01:18.250 --> 01:19.250
这又回到老问题了

01:19.750 --> 01:23.150
我们为什么要经过这么些天的训练

01:23.750 --> 01:26.950
目的不是为了让你去知道这个效果怎么做

01:27.150 --> 01:28.150
那是次要的

01:28.350 --> 01:30.150
因为你们以后到公司里边做什么效果

01:30.150 --> 01:30.950
我也不知道

01:31.450 --> 01:33.450
十之八九你都是以前没有遇到过的

01:33.450 --> 01:34.850
千奇百怪的效果

01:35.750 --> 01:38.850
我们是希望通过这些效果训练大家的程序

01:38.850 --> 01:40.950
思维能力都是最关键的

01:41.650 --> 01:43.550
那么最近后来这个无缝轮波图

01:44.550 --> 01:49.750
对于初学者而言是比较困难的

01:50.950 --> 01:52.550
困难的有两个层面

01:52.650 --> 01:55.150
一个层面是没有思路

01:55.950 --> 01:58.150
如果说一个普通轮波图还好说

01:58.250 --> 02:00.350
像这种无缝轮波图就比较困难了

02:00.850 --> 02:01.650
思路都没有

02:02.050 --> 02:02.750
这是一个

02:03.150 --> 02:05.950
第二个就是有了思路过后

02:07.050 --> 02:08.750
老师告诉你的思路

02:08.950 --> 02:10.850
你还是无法把代码写出来

02:11.850 --> 02:13.950
这两个问题都会存在

02:14.550 --> 02:15.450
那么这里呢

02:15.950 --> 02:19.750
我们会把思路完完整整的告诉大家

02:20.050 --> 02:21.350
不需要你去想思路了

02:21.550 --> 02:24.750
因为现阶段让你们去想这个玩意的思路

02:25.650 --> 02:27.050
那有点赶压制上架了

02:27.350 --> 02:28.150
不太现实

02:28.950 --> 02:32.450
你能够把老师的思路转换成代码

02:32.950 --> 02:34.950
写出个70% 80%

02:35.550 --> 02:37.450
就非常非常不错了

02:37.450 --> 02:39.950
同学们不要对自己要求那么严格

02:40.150 --> 02:42.850
初学者能够根据思路把代码写出来

02:42.850 --> 02:44.050
就非常非常不错了

02:44.650 --> 02:46.950
如果说你实在写不出来也是正常的

02:47.350 --> 02:51.650
在刚开始肯定会像这种效果都会遇到困难

02:52.550 --> 02:54.450
但是一定要去写

02:54.850 --> 02:56.750
我跟你讲完了之后你一定要去写

02:57.450 --> 03:00.550
因为那我先听再写不行吗

03:00.850 --> 03:01.350
不好

03:01.350 --> 03:02.650
那样子学习效果了

03:03.050 --> 03:05.150
跟你自己去经历做了之后再来听

03:05.150 --> 03:06.150
是完全不一样的

03:06.650 --> 03:07.850
就是你自己没有做

03:07.850 --> 03:09.050
你直接听老师讲

03:09.550 --> 03:10.850
可能你的感觉就是

03:12.550 --> 03:12.950
对

03:13.550 --> 03:14.550
是这样

03:15.750 --> 03:17.350
然后你自己去做了

03:17.450 --> 03:18.650
哪怕你没有完成

03:18.650 --> 03:20.550
遇到很多很多的困难和问题

03:21.650 --> 03:22.750
那个时候你再来听

03:22.750 --> 03:24.150
你的感觉是什么

03:24.650 --> 03:25.650
你听我讲过后

03:25.650 --> 03:28.150
你就原来是这样

03:29.350 --> 03:31.350
那是完全不一样的感觉

03:31.950 --> 03:33.750
这两种完全不一样的感觉

03:33.750 --> 03:36.350
给你带来的学习收获

03:36.850 --> 03:38.150
有着天壤之别

03:38.150 --> 03:39.950
同学们一定要引起重视

03:40.150 --> 03:41.350
不管你能不能做得出来

03:41.350 --> 03:43.250
听老师思路过后一定要去做

03:44.450 --> 03:44.650
好

03:44.650 --> 03:46.350
那么这里我首先

03:46.550 --> 03:48.250
分成这么几个层面来讲

03:48.250 --> 03:48.950
首先第一个

03:48.950 --> 03:51.250
我给大家一些要做一些补充

03:51.250 --> 03:52.450
一些指使的补充

03:52.650 --> 03:54.150
第一个补充就是

03:54.150 --> 03:54.950
咱们之前

03:54.950 --> 03:56.650
因为这里边肯定用到动画

03:56.650 --> 03:57.150
对吧

03:57.350 --> 03:58.150
是不是有动画

03:58.150 --> 03:59.150
那么有动画的话

03:59.150 --> 04:00.150
就不可避免的

04:00.150 --> 04:01.450
会用到咱们之前写的

04:01.450 --> 04:02.950
这个animate.js

04:03.350 --> 04:04.350
写这么一个东西

04:04.350 --> 04:06.450
这个东西当时写的时候

04:06.550 --> 04:08.450
有一个小的问题

04:08.750 --> 04:09.950
没有去处理

04:09.950 --> 04:10.750
这个问题

04:10.750 --> 04:12.150
这里稍微改一下

04:12.150 --> 04:13.350
什么小的问题

04:13.550 --> 04:14.850
就是这个函数

04:14.850 --> 04:16.150
这个毁掉函数

04:17.250 --> 04:20.350
当它动画结束的时候

04:20.350 --> 04:21.650
我运行到这个函数

04:21.650 --> 04:22.150
对吧

04:22.950 --> 04:25.550
那么后边我又运行到animate.js

04:25.550 --> 04:27.150
这就会导致一个问题

04:27.150 --> 04:30.150
就是它最终动画结束的那一刻

04:30.150 --> 04:32.350
它会先运行animate.js

04:32.350 --> 04:33.950
再运行animate.js

04:34.550 --> 04:36.550
那么这个不太符合逻辑

04:36.550 --> 04:37.750
好的逻辑

04:37.750 --> 04:39.550
就正确的逻辑是什么呢

04:39.550 --> 04:41.950
animate.js表示动画完成

04:41.950 --> 04:44.350
动画完成一定是最后运行的

04:45.750 --> 04:47.750
那么哪怕你是最后一次的

04:47.750 --> 04:48.950
最后一次变化了

04:48.950 --> 04:49.950
动画完成

04:49.950 --> 04:51.150
你不能动画完成之后

04:51.250 --> 04:53.250
还有又去运行一次animate.js

04:53.250 --> 04:55.250
应该是最后一次也得是

04:55.250 --> 04:56.450
先运行animate.js

04:56.450 --> 04:57.850
最后运行animate.js

04:57.850 --> 04:59.050
那么这个地方怎么来改

04:59.050 --> 05:00.050
非常简单

05:00.050 --> 05:02.250
你把最后一行复制粘体到这

05:02.250 --> 05:04.450
然后这里用了一个return

05:04.450 --> 05:06.050
把这个函数结束了

05:06.050 --> 05:06.550
就可以了

05:06.550 --> 05:08.250
就保证了先运行animate.js

05:08.250 --> 05:09.450
再运行animate.js

05:09.450 --> 05:11.450
这是一个小的地方改一下

05:11.450 --> 05:12.850
这是第一个我要补充的

05:12.850 --> 05:13.250
第二个

05:13.250 --> 05:14.950
咱们在实现这个效果的时候

05:14.950 --> 05:16.750
有一个非常小的细节

05:16.750 --> 05:20.450
就是关于图片尺寸那一块

05:20.550 --> 05:22.550
给大家补充一个小的知识

05:22.550 --> 05:26.150
补充一下一个css3的一个属性

05:26.150 --> 05:27.150
叫做object fit

05:27.150 --> 05:28.350
因为以后也会学习的

05:28.350 --> 05:28.950
非常简单

05:28.950 --> 05:30.150
我这里就直接说了

05:31.150 --> 05:32.250
是怎么回事呢

05:32.250 --> 05:33.950
比方说我这里写一个图片

05:33.950 --> 05:35.450
我这里去引用咱们的

05:35.450 --> 05:36.150
英语级文件一下

05:36.150 --> 05:37.250
下面的一些图片

05:38.550 --> 05:40.250
让我说引用一个

05:40.250 --> 05:41.150
随便来一个吧

05:49.780 --> 05:51.280
这个图片很大

05:51.280 --> 05:51.780
对不对

05:51.780 --> 05:52.680
那么有的时候

05:52.680 --> 05:54.080
我们可能需要把这个图片

05:54.080 --> 05:54.980
稍微控制一下

05:54.980 --> 05:56.680
把它设置的稍微小一点

05:56.680 --> 05:57.980
于是我会找到这个图片

05:57.980 --> 05:59.480
去给它设置一个宽高

05:59.480 --> 06:01.980
比方说宽度为200个像素

06:01.980 --> 06:04.880
高度为300个像素

06:04.880 --> 06:05.780
但是这样子一设置

06:05.780 --> 06:06.980
你就会发现有问题

06:06.980 --> 06:08.580
由于它的比例

06:08.580 --> 06:10.880
跟图片原始的比例是不一样的

06:10.880 --> 06:13.880
比方说我们这里再设置一个500

06:13.880 --> 06:15.880
500这里边也是500

06:15.880 --> 06:17.780
它的比例跟图片的原始比例

06:17.780 --> 06:18.980
是不一样的

06:18.980 --> 06:20.680
就导致这个图片的比例

06:20.680 --> 06:22.480
10条被拉伸了

06:22.480 --> 06:24.480
那么这种问题怎么来处理呢

06:24.480 --> 06:25.680
这种问题我们可以利用

06:25.680 --> 06:27.780
这个Object的Fit来处理

06:27.780 --> 06:30.380
那么这里边有很多的取值

06:30.380 --> 06:31.780
它不同的取值

06:31.780 --> 06:33.380
代表着不同的含义

06:33.380 --> 06:34.980
我这里给大家举个例子

06:34.980 --> 06:36.680
比方说把图片的Border给它加上

06:36.680 --> 06:37.980
大家看得很清楚了

06:39.680 --> 06:41.480
我给它加上一个Object的Fit

06:41.480 --> 06:42.180
比方说这里边

06:42.180 --> 06:44.380
我给它写上这么一个Content

06:44.380 --> 06:45.380
这是啥意思

06:45.380 --> 06:47.880
就是保持图片的宽高比例

06:47.880 --> 06:49.780
Content就是包含

06:49.780 --> 06:51.180
对吧

06:51.180 --> 06:54.480
它一定要保证图片完整的区域

06:54.480 --> 06:57.880
全部被包含在这个图片区域里边

06:57.880 --> 06:59.180
但是不能宽高比例

06:59.180 --> 07:00.480
不能失条

07:00.480 --> 07:01.780
就是Content

07:01.780 --> 07:03.780
然后还有一个叫做Cover

07:03.780 --> 07:04.880
Cover是什么呢

07:04.880 --> 07:08.280
比方说图片它的原始比例是这么大

07:08.280 --> 07:10.580
但是我这个区域只有中间这一块

07:10.580 --> 07:10.980
对吧

07:10.980 --> 07:12.980
所以它就把图片

07:12.980 --> 07:15.080
Cover几种历史就覆盖的意思

07:15.080 --> 07:17.580
一定要保证这个图片

07:17.580 --> 07:19.180
覆盖掉整个区域

07:19.180 --> 07:21.480
整个一密集区域

07:21.480 --> 07:23.680
但是又同时不能宽高比例

07:23.680 --> 07:24.580
又不能失条

07:24.580 --> 07:25.880
它只能这个样子了

07:25.880 --> 07:27.680
比方说图片原始是这个样子

07:27.680 --> 07:29.380
原始的比例是这个样子

07:29.380 --> 07:29.680
对吧

07:29.680 --> 07:30.280
对吧

07:30.280 --> 07:31.280
它只能这样子了

07:31.280 --> 07:31.980
其实那么就

07:31.980 --> 07:34.980
这就会导致图片有一些区域是看不见的

07:34.980 --> 07:35.180
对吧

07:35.180 --> 07:36.080
这是两种

07:36.080 --> 07:37.180
我们这些课

07:37.180 --> 07:39.680
由于在无缝轮波图里边

07:39.680 --> 07:41.380
我们会使用图片

07:41.380 --> 07:44.280
而且这个图片的宽高是给它定下来的

07:44.280 --> 07:46.780
那么就有可能会保持图片的比例失条

07:46.780 --> 07:48.580
那么这里我们在这个效果里边

07:48.580 --> 07:50.380
我们就会使用Cover

07:50.380 --> 07:53.180
让图片覆盖掉整个一密集

07:53.180 --> 07:55.080
这个大家给大家说一下

07:55.080 --> 07:56.980
就是补充这么两个知识

07:56.980 --> 07:57.980
那么接下来就是

07:57.980 --> 08:02.180
我们要给大家介绍一些思路了

08:02.180 --> 08:02.980
整体的思路

08:02.980 --> 08:04.180
首先分文件

08:04.180 --> 08:05.980
CSS是文件空的

08:05.980 --> 08:06.880
一个GS文件

08:06.880 --> 08:08.980
还有我们之前写的这个animate

08:08.980 --> 08:09.880
两个GS

08:09.880 --> 08:11.280
图片就是这么一些图片

08:11.280 --> 08:12.980
然后页面呢

08:12.980 --> 08:13.880
页面在这

08:13.880 --> 08:14.780
引用CSS

08:14.780 --> 08:15.880
引用我们的animate

08:15.880 --> 08:17.580
引用GS

08:17.580 --> 08:18.380
那么一个个说

08:18.380 --> 08:21.980
首先说央视和网页结构

08:21.980 --> 08:23.780
央视和网页结构呢

08:23.780 --> 08:26.580
我这里给它有个示意图

08:26.580 --> 08:29.870
再看一下

08:29.870 --> 08:31.570
我把这个图片

08:31.570 --> 08:39.940
我用这个吧

08:39.940 --> 08:40.940
好 咱们来看一下

08:40.940 --> 08:43.040
这个整个无缝轮波图

08:43.040 --> 08:45.740
我整个无缝轮波图这个区域呢

08:45.740 --> 08:48.640
我用一个内样式叫Carousel

08:48.640 --> 08:50.240
叫浙马灯

08:50.240 --> 08:51.240
Carousel Container

08:51.240 --> 08:52.640
表示是一个容器

08:52.640 --> 08:53.440
这个容器里边

08:53.440 --> 08:55.840
包含了轮波图里边所有的东西

08:55.840 --> 08:57.840
整个容器的宽高固定

08:57.840 --> 08:59.640
在无缝轮波图这个区域

08:59.640 --> 09:01.240
轮波图区域一般来说

09:01.240 --> 09:03.440
宽高都是固定的

09:03.440 --> 09:05.240
如果宽延的话就是百分之百

09:05.240 --> 09:07.640
反正你也是要给它设置宽度

09:07.640 --> 09:09.640
反正高度的要固定

09:09.640 --> 09:11.440
就是这个整个容器区域

09:11.440 --> 09:13.840
然后一出隐藏

09:13.840 --> 09:15.640
这整个容器没什么好说的

09:15.640 --> 09:17.940
容器里边包含了三个部分

09:17.940 --> 09:20.140
一个是这个图片区域

09:20.140 --> 09:21.840
一个是下面那个指示器

09:21.840 --> 09:24.440
下面这个指示器

09:24.440 --> 09:27.340
一个是左右两边这个箭头

09:27.340 --> 09:28.640
所以有三个区域

09:28.640 --> 09:29.840
我们单个单个说

09:29.840 --> 09:31.440
首先是图片这个区域

09:31.440 --> 09:33.140
这个是从视觉效果上

09:33.140 --> 09:34.840
看到是最主要的区域

09:34.840 --> 09:37.940
图片这个区域实际上是下边这个

09:37.940 --> 09:41.340
我们把它叫做Carousel List

09:41.340 --> 09:43.440
浙马灯的列表

09:43.440 --> 09:44.940
都是个容器

09:44.940 --> 09:48.440
这个容器它的宽度实际上是很宽的

09:48.440 --> 09:50.040
为什么看上去没有那么宽呢

09:50.040 --> 09:52.640
因为我外面这个容器一出隐藏了

09:52.640 --> 09:54.040
它里边的那个容器

09:54.040 --> 09:55.640
这个包含图片这个容器

09:55.640 --> 09:57.440
宽度实际上是很宽的

09:57.440 --> 09:58.840
它宽度为多少呢

09:58.840 --> 10:00.440
里边比方说有五张图片

10:00.440 --> 10:03.440
那么它的宽度就是500%

10:03.440 --> 10:04.940
相对于复原数500%

10:04.940 --> 10:06.340
它的宽度是很宽的

10:06.340 --> 10:08.240
只不过一出隐藏了

10:08.240 --> 10:10.140
就这里能为三个图片为例子

10:10.140 --> 10:12.440
那么它的宽度就是300%

10:12.440 --> 10:14.740
所以说这个地方有宽度

10:14.740 --> 10:16.740
然后再设置一下宽度

10:16.740 --> 10:20.940
然后它里边是一个一个的图片

10:20.940 --> 10:22.540
我们把这个图片给它一个内样

10:22.540 --> 10:24.040
是Carousel Item

10:24.040 --> 10:27.640
表示是它里边的列表箱

10:27.640 --> 10:30.540
那么这些图片我们通通使用左浮动

10:30.540 --> 10:32.340
那么是不是就并排显示了

10:32.340 --> 10:34.140
那么就形成这个样子了

10:34.140 --> 10:36.540
由于外面这个区域

10:36.540 --> 10:38.540
因为我这里画的时候是把它分开画了

10:38.540 --> 10:40.040
外面这个区域只有这么大

10:40.040 --> 10:42.040
所以说你看到的只有一张图片

10:42.040 --> 10:44.540
一出分是不是都被隐藏掉了

10:44.540 --> 10:45.740
是这么一回事

10:45.740 --> 10:48.340
那么到时候像这种切换要怎么切换呢

10:48.340 --> 10:51.240
其实无非就是改变它的Margin Left

10:51.240 --> 10:52.740
改变这个容器的Margin Left

10:52.740 --> 10:53.740
把它变为复数

10:53.740 --> 10:54.740
把它变为复数之后

10:54.740 --> 10:57.740
它是不是整个就往右边移动了

10:57.740 --> 10:59.740
它整个就往右边移动了

10:59.740 --> 11:01.740
你看现在就显示第二张

11:01.740 --> 11:03.740
再往前面移动就显示第三张

11:03.740 --> 11:05.240
就这么一回事

11:05.240 --> 11:06.740
所以说这里边是左浮动

11:06.740 --> 11:08.740
图片也是要定宽高的

11:08.740 --> 11:11.740
宽度就是可视区域的宽度

11:11.740 --> 11:15.740
然后高度就是这个区域的高度

11:15.740 --> 11:17.740
这是第一个区域

11:17.740 --> 11:19.740
图片和图片容器

11:19.740 --> 11:21.740
好 接下来是指示器

11:21.740 --> 11:26.370
指示器这个区域就这个区域

11:26.370 --> 11:29.370
这个区域实际上是一个

11:32.370 --> 11:34.370
是一个绝对定位

11:34.370 --> 11:35.370
它要覆盖上

11:35.370 --> 11:37.370
它是一个绝对定位

11:37.370 --> 11:41.370
这个区域里边又有很多的指援数

11:41.370 --> 11:42.370
你看12345

11:42.370 --> 11:44.370
那么到底有几个指援数呢

11:44.370 --> 11:46.370
取决有多少当图片

11:46.370 --> 11:48.370
5张图片就有5个指援数

11:48.370 --> 11:50.370
3张图片就有3个指援数

11:50.370 --> 11:52.370
指示器表示目前切换到哪一张了

11:52.370 --> 11:55.370
也可以通过点击它来进行切换

11:55.370 --> 11:57.370
那么这是一个绝对定位

11:57.370 --> 11:59.370
那么在绝对定位的时候

11:59.370 --> 12:01.370
我是不是可以设置一些样式

12:01.370 --> 12:03.370
让它里边的元素集中

12:03.370 --> 12:04.370
怎么集中呢

12:04.370 --> 12:05.370
非常简单

12:05.370 --> 12:07.370
我让里边的元素变成一个航快合

12:07.370 --> 12:08.370
然后复元素

12:08.370 --> 12:10.370
就是我现在框框这个元素

12:10.370 --> 12:12.370
设置一个tex二代center

12:12.370 --> 12:14.370
内容居中

12:14.370 --> 12:16.370
就可以居中了

12:16.370 --> 12:18.370
然后里边的指示器是非常简单

12:18.370 --> 12:20.370
就是一个航快合就完事了

12:20.370 --> 12:21.370
但是你要注意

12:21.370 --> 12:23.370
里边的指示器有些可能会有

12:23.370 --> 12:24.370
带有特殊样式

12:24.370 --> 12:26.370
比方说像这个

12:26.370 --> 12:28.370
你看是不是有特殊样式

12:28.370 --> 12:30.370
当它目前是被激活状态的时候

12:30.370 --> 12:31.370
它是不是有特殊样式

12:31.370 --> 12:32.370
所以说这里边的元素

12:32.370 --> 12:33.370
它有激活状态

12:33.370 --> 12:34.370
什么叫激活状态

12:34.370 --> 12:36.370
它可能会有一个特殊的那样式

12:36.370 --> 12:38.370
只要有这个那样式

12:38.370 --> 12:40.370
有一些稍微有些变化

12:40.370 --> 12:42.370
这是指示区

12:42.370 --> 12:45.370
然后就是我们的箭头区域了

12:45.370 --> 12:46.370
箭头区域非常简单

12:46.370 --> 12:48.370
左右两个箭头都是决定位

12:48.370 --> 12:49.370
一个靠左边

12:49.370 --> 12:50.370
一个靠右边

12:50.370 --> 12:51.370
然后想办法

12:51.370 --> 12:52.370
让它里边的东西居中

12:52.370 --> 12:56.370
这里边在镇尔巴顶开发的时候

12:56.370 --> 12:57.370
应该是有一张图片

12:57.370 --> 12:58.370
居中的图片

12:58.370 --> 13:00.370
我这里就用了一个文字

13:00.370 --> 13:01.370
一个大语符号

13:01.370 --> 13:03.370
一个小语符号

13:03.370 --> 13:05.370
我就没有用图片

13:06.370 --> 13:09.370
这是它的静态的ATM结构

13:09.370 --> 13:12.370
到时候你其实也可以暂停视频

13:12.370 --> 13:15.370
你先把ATM CSS写出来再说

13:15.370 --> 13:18.370
这样子有加深印象

13:18.370 --> 13:21.370
你把ATM CSS搞定之后

13:21.370 --> 13:23.370
就开始要写GS了

13:23.370 --> 13:24.370
GS我们之前说

13:24.370 --> 13:26.370
是不是有两大部分

13:26.370 --> 13:27.370
一部分是初始化

13:27.370 --> 13:28.370
就是你啥也不干

13:28.370 --> 13:30.370
它一开始要做啥

13:30.370 --> 13:31.370
第二部分是交互

13:31.370 --> 13:33.370
就是我动了一些东西的时候

13:33.370 --> 13:34.370
它要做啥

13:34.370 --> 13:35.370
我们一个个说话

13:35.370 --> 13:37.370
首先说初始化

13:37.370 --> 13:41.390
我们来看一下这个

13:41.390 --> 13:42.390
这是指示器

13:42.390 --> 13:43.390
这是可见区域

13:43.390 --> 13:44.390
分开了

13:44.390 --> 13:46.390
实际上上面重列在一起的

13:46.390 --> 13:48.390
这是图片的区域

13:48.390 --> 13:50.390
刚才说的Carolist

13:50.390 --> 13:52.390
那么我们这里初始化的时候

13:52.390 --> 13:55.390
有一个点大家不太容易想得到的

13:55.390 --> 13:58.390
就是我这些元素

13:58.390 --> 14:00.390
一开始写静态页面的时候

14:00.390 --> 14:02.390
我只是把央视给它写出来

14:02.390 --> 14:04.390
当我真正开始写GS的时候

14:04.390 --> 14:07.390
要把页面上这些元素全部删除掉

14:07.390 --> 14:10.390
这些元素必须由GS来创建

14:10.390 --> 14:11.390
原来就那里面

14:11.390 --> 14:14.390
我直接写到这个页面上不行吗

14:14.390 --> 14:15.390
可不可以呢

14:15.390 --> 14:17.390
可以倒是可以

14:17.390 --> 14:18.390
但是不好

14:18.390 --> 14:19.390
为什么不好呢

14:19.390 --> 14:20.390
你想一想

14:20.390 --> 14:22.390
你在网站开发中

14:22.390 --> 14:24.390
这些轮波图是不是永远不变的

14:24.390 --> 14:26.390
你随便去一个网站看

14:26.390 --> 14:28.390
同学可能

14:28.390 --> 14:30.390
对于的官网

14:30.390 --> 14:32.390
淘宝 京东

14:32.390 --> 14:34.390
这轮波图是不是永远不变的

14:34.390 --> 14:36.390
是不是经常会发生变化

14:36.390 --> 14:39.390
那么如果说你写到静态页面写死了之后

14:39.390 --> 14:41.390
到时候要发生变化

14:41.390 --> 14:43.390
围固形态就比较麻烦

14:43.390 --> 14:44.390
对吧

14:44.390 --> 14:46.390
而且你看还有个逻辑

14:46.390 --> 14:47.390
就是这里的图片

14:47.390 --> 14:49.390
和这里的指示器的数量

14:49.390 --> 14:51.390
要保持一致的

14:51.390 --> 14:53.390
那到时候围固形态在静态页面上去改

14:53.390 --> 14:54.390
更加麻烦

14:54.390 --> 14:56.390
所以说我们这里呢

14:56.390 --> 14:58.390
需要用GS动态的创建这些区域

14:58.390 --> 15:00.390
动态的创建指示器

15:00.390 --> 15:02.390
静态的创建这些元素

15:04.390 --> 15:05.390
懂得意思吧

15:05.390 --> 15:06.390
那么比方说

15:06.390 --> 15:07.390
我们这里呢就可以准备

15:07.390 --> 15:09.390
准备好一个变量

15:09.390 --> 15:11.390
这个变量呢我们把它叫做

15:11.390 --> 15:12.390
随便起个名字吧

15:12.390 --> 15:14.390
data是一式一个数组

15:14.390 --> 15:15.390
这个数组里边记录了

15:15.390 --> 15:17.390
每一张轮波图的图片路径

15:17.390 --> 15:19.390
比方说一开始轮波图的路径是

15:19.390 --> 15:20.390
1.jp1

15:20.390 --> 15:22.390
有这么三张轮波图

15:22.390 --> 15:24.390
2.jp1

15:24.390 --> 15:29.430
3.jp1

15:29.430 --> 15:31.430
比方说有三张

15:31.430 --> 15:33.430
我们用GS就可以根据这个数组

15:33.430 --> 15:34.430
循环它

15:34.430 --> 15:35.430
每循环一次

15:35.430 --> 15:36.430
创建一个图片

15:36.430 --> 15:38.430
然后加入到这个容器里边去

15:38.430 --> 15:39.430
是不是可以做这些事

15:39.430 --> 15:40.430
然后呢

15:40.430 --> 15:41.430
每循环一次

15:41.430 --> 15:42.430
我就创建一个指示器

15:42.430 --> 15:43.430
加进去

15:43.430 --> 15:44.430
是不是可以做这些事

15:44.430 --> 15:46.430
将来维护起来就非常方便

15:46.430 --> 15:48.430
比方说将来图片变了

15:48.430 --> 15:49.430
那么多加一张

15:49.430 --> 15:51.430
我只需要改动一下数组

15:52.430 --> 15:53.430
就完事了

15:53.430 --> 15:55.430
其他代码一概不改

15:55.430 --> 15:57.430
懂得意思吧

15:57.430 --> 15:58.430
所以说这里的

15:58.430 --> 16:00.430
最好使用GS来创建

16:00.430 --> 16:01.430
那么于是呢

16:01.430 --> 16:03.430
我们这里就需要有这么一个函数

16:03.430 --> 16:04.430
叫音列车函数

16:04.430 --> 16:05.430
叫初始化函数

16:05.430 --> 16:06.430
一开始就雕用

16:06.430 --> 16:08.430
这个函数要做这么几件事

16:09.430 --> 16:10.430
第一件事

16:10.430 --> 16:12.430
创建图片

16:12.430 --> 16:14.430
比方说你有一个数组

16:14.430 --> 16:16.430
那么根据这个数组里面的图片路径

16:16.430 --> 16:17.430
创建图片

16:17.430 --> 16:19.430
把这个图片加到容器里边去

16:19.430 --> 16:21.430
加到这个容器里边去

16:22.430 --> 16:23.430
第二件事

16:23.430 --> 16:25.430
要去设置容器的宽度

16:25.430 --> 16:28.430
这个容器的宽度是百分之多少

16:28.430 --> 16:30.430
有四张图片有百分之400

16:30.430 --> 16:31.430
对吧

16:32.430 --> 16:33.430
为什么要去设置容器宽度

16:33.430 --> 16:35.430
如果说你不设置的话

16:35.430 --> 16:36.430
那就会导致一个问题

16:36.430 --> 16:38.430
这个容器宽度它只有这么宽

16:38.430 --> 16:39.430
它最大只有这么宽

16:39.430 --> 16:40.430
因为它默认情况下

16:40.430 --> 16:41.430
宽度是百分之百

16:41.430 --> 16:42.430
那么这里边就没有

16:42.430 --> 16:43.430
虽然它们里面在浮动

16:43.430 --> 16:44.430
但是浮动呢

16:44.430 --> 16:45.430
由于宽度不够

16:45.430 --> 16:47.430
所以它就换行了

16:47.430 --> 16:48.430
懂得意思吧

16:48.430 --> 16:49.430
所以说我要让它并排显示

16:49.430 --> 16:51.430
就必须要去设置

16:51.430 --> 16:55.060
附容器的宽度

16:55.060 --> 16:57.060
要适配里边的图片数量

16:57.060 --> 16:59.060
那么这里有一个小问题

16:59.060 --> 17:01.060
就是不算小问题了

17:01.060 --> 17:02.060
是一个核心问题

17:02.060 --> 17:03.060
它为什么这里

17:03.060 --> 17:05.060
老师你为什么要标击一个

17:05.060 --> 17:07.060
特殊的颜色

17:07.060 --> 17:09.060
就是因为我们现在做的是

17:09.060 --> 17:10.060
无缝轮波

17:10.060 --> 17:11.060
如果说是普通轮波的话

17:11.060 --> 17:12.060
这个东西就没有

17:12.060 --> 17:14.060
有三张图片那就是三张

17:14.060 --> 17:16.060
由于我们做的是无缝轮波

17:16.060 --> 17:18.060
我们就必须要多加一张

17:18.060 --> 17:21.060
这一张跟第一张是一模一样的

17:21.060 --> 17:23.060
将来把第一张复制粘贴到这

17:23.060 --> 17:25.060
为什么要这样做

17:25.060 --> 17:26.060
你想啊

17:26.060 --> 17:28.060
如果说你没有这个东西的时候

17:28.060 --> 17:29.060
那么就会导致一个问题

17:29.060 --> 17:31.060
到时候我将来再做

17:31.060 --> 17:33.060
无缝轮波的时候

17:33.060 --> 17:35.060
你看第一张

17:35.060 --> 17:37.060
可见区积放到第一张

17:37.060 --> 17:38.060
显示第二张

17:38.060 --> 17:39.060
显示第三张

17:39.060 --> 17:41.060
我把这个移到最前

17:41.060 --> 17:43.060
显示第二张

17:43.060 --> 17:44.060
显示第三张

17:44.060 --> 17:45.060
然后再显示下一张

17:45.060 --> 17:46.060
是没了

17:46.060 --> 17:47.060
我切不过去了

17:47.060 --> 17:48.060
对不对

17:48.060 --> 17:49.060
是没了

17:49.060 --> 17:51.060
那我只能回来了

17:51.060 --> 17:52.060
就不是无缝了

17:52.060 --> 17:55.060
所以说我这里必须要给它加一个

17:55.060 --> 17:57.060
必须要给它加一个

17:57.060 --> 17:59.060
这样子一来就可以了

17:59.060 --> 18:00.060
你看

18:00.060 --> 18:01.060
切放到下一张

18:01.060 --> 18:02.060
再切放到下一张

18:02.060 --> 18:03.060
再切放到下一张

18:03.060 --> 18:04.060
是不是又可以了

18:04.060 --> 18:06.060
再切放到下一张就不行了

18:06.060 --> 18:07.060
再切放到下一张

18:07.060 --> 18:08.060
我们有办法解决

18:08.060 --> 18:11.060
我一会说那种的失录

18:11.060 --> 18:13.060
至少现在最后一张切过去

18:13.060 --> 18:14.060
是不是无缝的

18:14.060 --> 18:16.060
所以说我们要多加一张

18:16.060 --> 18:18.060
这里出事话的时候注意一下

18:18.060 --> 18:20.060
但是指示器

18:20.060 --> 18:21.060
你不能多加一个

18:21.060 --> 18:23.060
比方说你之前就三个图片

18:23.060 --> 18:25.060
那么指示器只能有三个

18:25.060 --> 18:27.060
这里还要创建指示器

18:27.060 --> 18:29.060
加到这个指示器的容器里面

18:29.060 --> 18:31.060
指示器只能有三个

18:31.060 --> 18:33.060
但是图片我要多加一张

18:33.060 --> 18:34.060
是这么个容器

18:34.060 --> 18:35.060
然后还要做一件事

18:35.060 --> 18:37.060
就是设置指示器的状态

18:37.060 --> 18:38.060
那么这里有个变量中的

18:38.060 --> 18:39.060
Curr Index

18:39.060 --> 18:41.060
大家需要做一个全具变量

18:41.060 --> 18:43.060
那么这个变量的作用是什么呢

18:43.060 --> 18:44.060
作用是记录

18:44.060 --> 18:46.060
当前你显示的是第几张

18:46.060 --> 18:47.060
是一个锁印

18:47.060 --> 18:49.060
一开始应该是零

18:49.060 --> 18:51.060
当前显示的是第1张

18:51.060 --> 18:52.060
那么下边就是零

18:52.060 --> 18:53.060
那么一会切过去

18:53.060 --> 18:54.060
显示的就是第二张

18:54.060 --> 18:55.060
下边就是零

18:55.060 --> 18:57.060
需要一个全具变量做记录

18:57.060 --> 18:59.060
为什么需要做记录呢

18:59.060 --> 19:00.060
因为一会我要下一张

19:00.060 --> 19:01.060
下一张进行切换

19:01.060 --> 19:02.060
那我也得知道

19:02.060 --> 19:03.060
之前是第几张

19:03.060 --> 19:04.060
之前是第几张

19:04.060 --> 19:06.060
我才能加一就是下一张

19:06.060 --> 19:08.060
所以说我得有这么一个变量

19:08.060 --> 19:09.060
来进行记录

19:09.060 --> 19:11.060
那么这里指示器

19:11.060 --> 19:12.060
它要做的事情

19:12.060 --> 19:13.060
就是我们这里要去

19:13.060 --> 19:14.060
设置指示器的状态

19:14.060 --> 19:16.060
比方说目前显示的是第1张

19:16.060 --> 19:17.060
就这个东西是零

19:17.060 --> 19:18.060
于是指示器

19:18.060 --> 19:20.060
它第1个就要是一个激活样式

19:20.060 --> 19:22.060
那一会我改变了它

19:22.060 --> 19:23.060
变成一了

19:23.060 --> 19:24.060
那么就是显示第2张

19:24.060 --> 19:26.060
那么第2个就变成激活样式

19:28.060 --> 19:30.060
这是初始化的操作

19:30.060 --> 19:31.060
第1个创建图片

19:31.060 --> 19:32.060
夹到容器里面去

19:32.060 --> 19:34.060
第2个设置容器的宽度

19:34.060 --> 19:35.060
第3个创建指示器

19:35.060 --> 19:36.060
一个个夹进去

19:36.060 --> 19:38.060
第4个设置哪个指示器

19:38.060 --> 19:39.060
被激活

19:40.060 --> 19:42.060
这就是一开始的状态

19:42.060 --> 19:44.060
那么这些事情做完了过后

19:44.060 --> 19:47.060
一开始的效果就正常了

19:47.060 --> 19:49.060
就是用户没操作的时候的

19:49.060 --> 19:50.060
情况就正常了

19:50.060 --> 19:51.060
那么至于这个自动切换

19:51.060 --> 19:52.060
我们先不管

19:53.060 --> 19:55.060
好 接下来下一步

19:56.060 --> 19:57.060
真正复杂的在这

19:57.060 --> 19:58.060
交户

19:59.060 --> 20:01.060
交户这里呢

20:01.060 --> 20:03.060
涉及到了一些事件

20:03.060 --> 20:05.060
但是事件不是关键点

20:05.060 --> 20:07.060
关键点是一些功能

20:07.060 --> 20:08.060
就交户的时候

20:08.060 --> 20:09.060
你到底有什么功能

20:09.060 --> 20:10.060
事件是什么

20:10.060 --> 20:13.060
事件就是用户做了什么操作过后

20:13.060 --> 20:15.060
我去运行那个功能

20:15.060 --> 20:16.060
什么叫事件

20:17.060 --> 20:20.060
用户做了某个操作

20:22.060 --> 20:24.060
执行某个功能

20:24.060 --> 20:25.060
这句话里边

20:25.060 --> 20:27.060
注意核心的是不是功能

20:28.060 --> 20:30.060
功能才是最核心的

20:30.060 --> 20:32.060
至于做了某一个操作

20:32.060 --> 20:34.060
只需要去监听一个事件就完事了

20:34.060 --> 20:35.060
对不对

20:35.060 --> 20:36.060
所以我们要把这个功能写出来

20:36.060 --> 20:37.060
功能是什么

20:37.060 --> 20:38.060
等于上就是函数

20:39.060 --> 20:40.060
这里边

20:40.060 --> 20:42.060
你需要有三个函数

20:42.060 --> 20:43.060
这三个函数写完了

20:43.060 --> 20:44.060
我都不用我说

20:44.060 --> 20:45.060
你都知道怎么去

20:45.060 --> 20:46.060
后面怎么写

20:47.060 --> 20:49.060
第一个非常核心的函数

20:50.060 --> 20:51.060
这个函数呢

20:51.060 --> 20:52.060
传入一个新的参数

20:52.060 --> 20:53.060
叫New Index

20:53.060 --> 20:54.060
表示什么意思

20:54.060 --> 20:56.060
表示我要移动到

20:56.060 --> 21:00.060
我要切换到一个新的下标

21:00.060 --> 21:02.060
来进行展示

21:02.060 --> 21:03.060
你看之前我们说有

21:03.060 --> 21:04.060
Current

21:04.060 --> 21:05.060
叫做Current

21:05.060 --> 21:06.060
当前的

21:06.060 --> 21:08.060
当前显示的第几章

21:08.060 --> 21:11.060
我要切换到一个新的章数

21:11.060 --> 21:13.060
不要让我调用这个函数

21:13.060 --> 21:14.060
我调用这个

21:15.060 --> 21:16.060
五

21:16.060 --> 21:17.060
二

21:18.060 --> 21:19.060
相当于什么

21:19.060 --> 21:21.060
切换到第三章

21:21.060 --> 21:22.060
它就会从当前

21:22.060 --> 21:23.060
那么这个玩意

21:23.060 --> 21:25.060
就会从当前位置

21:25.060 --> 21:28.950
当前不管的是第几章

21:28.950 --> 21:30.950
反正就是从当前位置

21:30.950 --> 21:32.950
切换到第三章

21:32.950 --> 21:33.950
它就会切换到过来

21:33.950 --> 21:35.950
这个函数就这么神奇

21:35.950 --> 21:36.950
也把这个函数完成

21:36.950 --> 21:38.950
那一会我又调用

21:38.950 --> 21:39.950
目突零

21:39.950 --> 21:41.950
于是它这里就会

21:41.950 --> 21:43.950
把这个干脆直接

21:44.950 --> 21:47.950
我就把这个直接分个组

21:51.260 --> 21:53.260
如果刚才我们是

21:53.260 --> 21:54.260
切换到第三章了

21:54.260 --> 21:56.260
然后我又调用目突零

21:56.260 --> 21:58.260
是不是要切换到第一章

21:58.260 --> 22:00.260
于是它就

22:00.260 --> 22:01.260
跑过来了

22:01.260 --> 22:02.260
一定要用这个函数

22:02.260 --> 22:04.260
它就直接跑过来了

22:04.260 --> 22:06.260
当然这个过程是有动画的

22:07.260 --> 22:08.260
那同学说

22:08.260 --> 22:09.260
那要不要无缝

22:09.260 --> 22:11.260
这个地方不考虑无缝

22:11.260 --> 22:12.260
考都不考虑无缝

22:12.260 --> 22:14.260
它的做的事情

22:14.260 --> 22:15.260
非常简单

22:15.260 --> 22:17.260
只考虑从当前位置

22:17.260 --> 22:20.260
切换到你指定的章数

22:20.260 --> 22:21.260
表现在又是零了

22:21.260 --> 22:23.260
一会我又调用

22:23.260 --> 22:24.260
一

22:24.260 --> 22:26.260
它就会从这个位置

22:26.260 --> 22:28.260
跑到这个位置

22:28.260 --> 22:30.260
一会我又调用

22:30.260 --> 22:31.260
三

22:31.260 --> 22:32.260
它就从这个位置

22:32.260 --> 22:34.260
跑到这个位置

22:34.260 --> 22:35.260
一会我又调用

22:35.260 --> 22:36.260
零

22:36.260 --> 22:38.260
它就从这个位置

22:38.260 --> 22:39.260
跑到这个位置

22:39.260 --> 22:40.260
懂得意思吗

22:40.260 --> 22:42.260
这个函数就这么一个作用

22:44.260 --> 22:45.260
那么具体的解释就是

22:45.260 --> 22:47.260
这个参数是

22:47.260 --> 22:48.260
要切换的图片所引

22:48.260 --> 22:50.260
你要切换到第几章

22:51.260 --> 22:53.260
那么这个函数的具体实现上

22:54.260 --> 22:56.260
分为这么几个核心步骤

22:57.260 --> 22:58.260
第一步

22:58.260 --> 22:59.260
你要算出

23:00.260 --> 23:02.260
新的那张图片

23:03.260 --> 23:05.260
它对应的 margin left

23:05.260 --> 23:06.260
啥意思

23:06.260 --> 23:08.260
像我们这里滚动来滚动去

23:08.260 --> 23:09.260
实际上是改变了什么

23:09.260 --> 23:11.260
改变了这个容器的 margin left

23:11.260 --> 23:13.260
你看现在 margin left 是零

23:13.260 --> 23:15.260
这个是不是负的

23:16.260 --> 23:17.260
负的一个宽度

23:17.260 --> 23:19.260
这负的两个宽度

23:19.260 --> 23:20.260
实际上是不是就改变

23:20.260 --> 23:22.260
它的 margin left 就行了

23:22.260 --> 23:23.260
对吧

23:23.260 --> 23:25.260
那么我们这里就要计算出

23:27.260 --> 23:29.260
它的目标图片

23:29.260 --> 23:31.260
比方说你要切换到第三章

23:32.260 --> 23:33.260
那么你就要算出

23:33.260 --> 23:34.260
第三章的时候

23:34.260 --> 23:35.260
它的 margin left 的值

23:35.260 --> 23:37.260
应该是多少

23:38.260 --> 23:40.260
这里是不是负的两个宽度

23:41.260 --> 23:42.260
那么接下来你要做的事情

23:42.260 --> 23:45.260
就是让这个图片容器

23:45.260 --> 23:46.260
就这个容器

23:46.260 --> 23:48.260
从当前的 margin left

23:48.260 --> 23:49.260
当前 margin left 是零

23:49.260 --> 23:50.260
但是不一定是零

23:50.260 --> 23:51.260
有可能从这里切换到第三章

23:51.260 --> 23:52.260
都有可能的

23:53.260 --> 23:55.260
从当前的 margin left

23:55.260 --> 23:58.260
一步一步变到你的目标值

23:58.260 --> 23:59.260
是不是就动画

23:59.260 --> 24:01.260
我们之前做了一个插件

24:01.260 --> 24:02.260
动画插件

24:02.260 --> 24:04.260
一步一步变过去

24:06.260 --> 24:08.260
同时你要去更改

24:08.260 --> 24:09.260
克林这个设置

24:09.260 --> 24:10.260
因为你现在切换到

24:10.260 --> 24:12.260
新的一个图片所印的

24:12.260 --> 24:14.260
所以说当前显示的图片所印

24:14.260 --> 24:15.260
是不是变化了

24:15.260 --> 24:16.260
要更改这个值

24:16.260 --> 24:19.260
同时要更改一个指示器的状态

24:19.260 --> 24:21.260
这就是这个函数要做的事情

24:21.260 --> 24:23.260
好好去梳理一下

24:23.260 --> 24:24.260
然后后边两个函数

24:24.260 --> 24:26.260
才是真正来做无缝的

24:26.260 --> 24:27.260
一个是 next 函数

24:27.260 --> 24:29.260
表示下一章

24:29.260 --> 24:30.260
它就是这样子无缝

24:30.260 --> 24:31.260
刷刷刷

24:31.260 --> 24:33.260
后边还刷刷刷

24:33.260 --> 24:35.260
就是这么做无缝的

24:35.260 --> 24:37.260
那么它到底是怎么做无缝的呢

24:38.260 --> 24:39.260
它的作用

24:39.260 --> 24:41.260
就是雕用母无吐函数

24:41.260 --> 24:42.260
就刚才写的函数

24:42.260 --> 24:43.260
进行切换

24:43.260 --> 24:44.260
非常简单

24:44.260 --> 24:45.260
你看

24:45.260 --> 24:47.260
我要雕用那个词

24:47.260 --> 24:49.260
当前表示显示是0

24:51.260 --> 24:54.260
我这边切换到下一章

24:54.260 --> 24:56.260
是不是就是克林那个词加1

24:56.260 --> 24:57.260
那么就是切换到下边

24:57.260 --> 24:59.260
唯一的那一章就切过去了

24:59.260 --> 25:01.260
那么它又变成1了

25:01.260 --> 25:03.260
那么下一次再雕用那个词

25:03.260 --> 25:05.260
它又从1加1又变成2了

25:05.260 --> 25:07.260
于是就切换到这一章

25:07.260 --> 25:08.260
就雕用这个母无吐函数

25:08.260 --> 25:10.260
把新的锁印传进去

25:10.260 --> 25:11.260
好

25:11.260 --> 25:14.260
再下一次再雕用那个词

25:15.260 --> 25:18.260
目前这个克林那个词

25:18.260 --> 25:19.260
已经是几了

25:19.260 --> 25:20.260
已经是2了

25:20.260 --> 25:22.260
那么又是2加1

25:22.260 --> 25:23.260
给这个母无吐传进去

25:23.260 --> 25:25.260
于是就切换到下一章

25:25.260 --> 25:26.260
对吧

25:26.260 --> 25:28.260
那怎么实现无缝呢

25:28.260 --> 25:30.260
注意就这么一个小的点

25:30.260 --> 25:32.260
当你切换到最后一章的时候

25:32.260 --> 25:33.260
表示这里

25:33.260 --> 25:34.260
已经无缝划过来了

25:34.260 --> 25:36.260
当你切换到最后一章的时候

25:36.260 --> 25:38.260
动画结束的时候

25:38.260 --> 25:40.260
瞬间更改margin level

25:40.260 --> 25:42.260
才为你

25:42.260 --> 25:44.260
把变到第一章

25:44.260 --> 25:45.260
由于它

25:45.260 --> 25:46.260
因为这个变化是非常快的

25:46.260 --> 25:48.260
我没有经过动画

25:48.260 --> 25:49.260
这里

25:49.260 --> 25:50.260
你看划过来了

25:50.260 --> 25:51.260
爽

25:51.260 --> 25:52.260
变过来了

25:52.260 --> 25:54.260
所以用户是感觉不到的

25:54.260 --> 25:55.260
你看

25:55.260 --> 25:56.260
再来一次

25:56.260 --> 25:57.260
最后一章的时候

25:57.260 --> 25:58.260
划过来了

25:58.260 --> 25:59.260
划过来了

25:59.260 --> 26:00.260
划过来

26:00.260 --> 26:01.260
爽

26:01.260 --> 26:02.260
变过来了

26:02.260 --> 26:04.260
用户是感觉不到的

26:04.260 --> 26:05.260
懂的意思吧

26:05.260 --> 26:06.260
于是你后边切换

26:06.260 --> 26:08.260
又可以从头来了

26:08.260 --> 26:09.260
就爽

26:09.260 --> 26:10.260
变过来了

26:10.260 --> 26:12.260
这就是你那个时候的函数

26:12.260 --> 26:13.260
然后pr5函数

26:13.260 --> 26:15.260
就是无缝往前切换

26:15.260 --> 26:16.260
那么这个时候

26:16.260 --> 26:17.260
也是一样

26:17.260 --> 26:18.260
调用moo2

26:18.260 --> 26:20.260
比方说目前是这一章

26:20.260 --> 26:21.260
以往前切换

26:21.260 --> 26:24.260
它就把剪1

26:24.260 --> 26:26.260
柯寅那个时候剪1

26:26.260 --> 26:27.260
就是1

26:27.260 --> 26:28.260
传到moo2里边

26:28.260 --> 26:30.260
于是就切换到了上一章

26:30.260 --> 26:31.260
你看moo2的函数

26:31.260 --> 26:33.260
是非常核心的函数

26:33.260 --> 26:34.260
调用moo2过后

26:34.260 --> 26:36.260
它是不是变成1了

26:36.260 --> 26:38.260
然后再下一步

26:38.260 --> 26:39.260
再切换到上一章

26:39.260 --> 26:41.260
那么这里传到什么0

26:41.260 --> 26:42.260
那么切换往后

26:42.260 --> 26:43.260
它就变成0了

26:43.260 --> 26:44.260
好 注意

26:44.260 --> 26:45.260
这里再往前切换

26:45.260 --> 26:47.260
是不是前面没了

26:47.260 --> 26:48.260
那怎么办

26:48.260 --> 26:49.260
当你发现

26:49.260 --> 26:51.260
它已经是第一章的时候

26:51.260 --> 26:53.260
这个时候你还要往前切换

26:53.260 --> 26:55.260
先做一件事

26:55.260 --> 26:57.260
先把它瞬间变到这个位置

26:57.260 --> 26:59.260
用户是感觉不到的

26:59.260 --> 27:03.260
然后再切换到这一章

27:04.260 --> 27:05.260
懂了意思吗

27:05.260 --> 27:07.260
所以就可以变成无缝切换

27:07.260 --> 27:08.260
这样刷

27:08.260 --> 27:09.260
好 下一次再要切换

27:09.260 --> 27:10.260
先变到这个位置

27:10.260 --> 27:12.260
然后再进一切换

27:12.260 --> 27:13.260
对吧

27:13.260 --> 27:15.260
这就是整个无缝轮波的

27:15.260 --> 27:17.260
胶固的逻辑里面的这些函数

27:17.260 --> 27:18.260
这三个函数写完了

27:18.260 --> 27:20.260
像什么注册时间

27:20.260 --> 27:21.260
那些东西

27:21.260 --> 27:22.260
你自己写

27:22.260 --> 27:23.260
你都知道该怎么写

27:23.260 --> 27:26.260
功能都已经完成了

27:26.260 --> 27:27.260
有点复杂

27:27.260 --> 27:29.260
对不对

27:29.260 --> 27:31.260
尽自己最大的努力

27:31.260 --> 27:32.260
能够写出几个函数

27:32.260 --> 27:34.260
就尽量写出几个

27:34.260 --> 27:36.260
尽自己最大努力

27:36.260 --> 27:39.260
这样子才能达到最好的学习效果

27:39.260 --> 27:40.260
好了

27:40.260 --> 27:41.260
那么这里

27:41.260 --> 27:42.260
失路

27:42.260 --> 27:43.260
补充了知识

27:43.260 --> 27:44.260
效果都给大家讲了

27:44.260 --> 27:45.260
同学们加油

27:45.260 --> 27:47.260
自己去试一试

27:47.260 --> 27:48.260
花点时间

27:48.260 --> 27:49.260
好

27:49.260 --> 27:50.260
以后我给大家讲

27:50.260 --> 27:52.260
具体的是代码实现

