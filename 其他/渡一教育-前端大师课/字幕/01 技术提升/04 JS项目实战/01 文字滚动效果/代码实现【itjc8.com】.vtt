WEBVTT

00:00.000 --> 00:06.000
我这里新建个文件夹 文字滚动效果圆码

00:07.000 --> 00:12.570
好 到时候我给大家发的话就发这个圆码 克兰上写的代码

00:12.570 --> 00:15.570
那么我们清楚了它大概是一个怎么回事之后呢

00:15.570 --> 00:19.570
我们来去书写代码来做这个效果的话

00:19.570 --> 00:21.570
无非就是这么三件事

00:21.570 --> 00:25.570
首先写ATML 然后再写CSS 然后再写GS

00:25.570 --> 00:30.570
对吧 我们首先写个ATML 就应这个是ATML吧

00:31.570 --> 00:34.570
再加一个文字滚动效果

00:35.570 --> 00:39.570
好 然后这边我去引用一下CSS文件

00:39.570 --> 00:42.570
我这里需要加一个CSS文件

00:42.570 --> 00:46.570
CSS 去引用一下CSS

00:46.570 --> 00:49.570
然后再加一个GS 一会儿肯定有GS的

00:49.570 --> 00:51.570
然后我们这边去引用一下GS

00:51.570 --> 00:54.570
这个GS的引用的话有两种方式

00:54.570 --> 00:56.570
一种是把它写到最下边

00:56.570 --> 00:58.570
在这里去引用它

00:59.570 --> 01:00.570
SRC

01:01.570 --> 01:02.570
它写到这里

01:02.570 --> 01:05.570
那么第二种方式是写到这 写到最上边

01:05.570 --> 01:07.570
让它尽快的去加了这个GS

01:07.570 --> 01:09.570
不过我给它加上一个Def

01:09.570 --> 01:11.570
这个是讲过的 我不再追数了

01:12.570 --> 01:15.570
好 于是我就写好了这么三个文件

01:15.570 --> 01:18.570
在书写的顺序上我首先去书写这个ATML

01:18.570 --> 01:20.570
这个ATML是书写起来是最简单的

01:20.570 --> 01:22.570
对吧 外面一个容器

01:22.570 --> 01:24.570
你看这个结构就非常清晰

01:24.570 --> 01:25.570
外面一个容器

01:25.570 --> 01:28.570
给它写个DIV 给它一个内央是container

01:28.570 --> 01:31.570
然后里边呢 左边是一个标题

01:31.570 --> 01:33.570
对吧 然后我们该拿一个吧

01:33.570 --> 01:36.570
左边就拿一个SE 元素 还是什么元素都行

01:36.570 --> 01:37.570
给它一个title

01:37.570 --> 01:40.570
这个结构可能跟我们这个效果的一个结构不太一样

01:40.570 --> 01:43.570
这个写法很多的 不用去过于纠结

01:43.570 --> 01:45.570
这边我们给它写上一个最新公告

01:49.480 --> 01:51.480
然后右边是一个

01:51.480 --> 01:53.480
其实是一个列表 对吧

01:53.480 --> 01:54.480
是不是一个列表

01:54.480 --> 01:56.480
那么我们就直接用UL

01:56.480 --> 01:57.480
用一个list

01:58.480 --> 02:00.480
一个列表 列表里面有很多的LI

02:00.480 --> 02:04.480
那么这里呢 我就写上这么三个 四个LI

02:04.480 --> 02:06.480
我就不去写这些文字了

02:06.480 --> 02:08.480
这些文字随便可以改的 都无所谓

02:08.480 --> 02:10.480
我就随便生成四个吧

02:10.480 --> 02:12.480
这里大家可以给大家一个小技巧

02:12.480 --> 02:15.480
像我们去写这些静态页面的时候

02:15.480 --> 02:18.480
有的地方内容不用去过于关心

02:18.480 --> 02:22.480
比方说 我们去写淘宝的静态页面

02:24.480 --> 02:26.480
淘宝的静态页面里面

02:26.480 --> 02:28.480
这些商品啊 图片啊 其实都无所谓的

02:28.480 --> 02:30.480
因为将来肯定会变动

02:30.480 --> 02:32.480
我们在写页面的时候呢

02:32.480 --> 02:34.480
只是把央视给它做出来

02:34.480 --> 02:36.480
像这些东西都有可能会变动的

02:36.480 --> 02:38.480
所以我们不用去太过于关心内容

02:38.480 --> 02:40.480
内容随便写就完事了

02:40.480 --> 02:43.480
那么这里呢 我就给它加上一些

02:43.480 --> 02:45.480
用一些静态的文字去前冲

02:45.480 --> 02:47.480
那么怎么样去用静态文字呢

02:47.480 --> 02:50.480
非常简单 比方说我这里呢

02:50.480 --> 02:52.480
我就可以给它写的放一个mall rain

02:52.480 --> 02:54.480
这个东西叫做乱数假文

02:54.480 --> 02:55.480
它没有任何意义

02:55.480 --> 02:58.480
它写这个玩意儿呢 就是生成出来

02:58.480 --> 03:01.480
生成一段水积 生成一段文字

03:01.480 --> 03:03.480
而且呢 你可以通过后边的数字呢

03:03.480 --> 03:05.480
来控制它生成文字的数量

03:05.480 --> 03:08.480
比方说是 表示生成四个单词

03:08.480 --> 03:11.480
你看 每个生成四个单词

03:11.480 --> 03:13.480
这就是随便生成一些东西

03:13.480 --> 03:15.480
叫乱数假文

03:15.480 --> 03:17.480
乱数假文

03:17.480 --> 03:19.480
这个玩意儿一般是用

03:19.480 --> 03:22.480
是最早的是用在印刷学里边拍板的时候

03:22.480 --> 03:24.480
随便做一些填充

03:24.480 --> 03:25.480
保存

03:25.480 --> 03:26.480
那么这个

03:27.480 --> 03:28.480
这边 保存

03:28.480 --> 03:31.480
这里我们就把这个写好了

03:31.480 --> 03:34.480
打开 这样就出来了

03:34.480 --> 03:36.480
接下来让我们来做样式

03:37.480 --> 03:38.480
好 样式这一块呢

03:38.480 --> 03:41.480
我们首先找到这个container容器

03:41.480 --> 03:42.480
这个容器呢

03:42.480 --> 03:44.480
我们给它加上一个背景颜色

03:44.480 --> 03:45.480
这个背景颜色呢

03:45.480 --> 03:46.480
也不用过于去纠结

03:46.480 --> 03:48.480
我们在这里去量一下

03:49.480 --> 03:51.480
我用了一个取色器

03:51.480 --> 03:54.480
你们也可以在网上去下载一些取色器

03:54.480 --> 03:55.480
非常好用的

03:55.480 --> 03:57.480
有很多的

03:57.480 --> 03:59.480
好 给它一个背景颜色

03:59.480 --> 04:02.480
然后呢 给它一个高度吧

04:02.480 --> 04:04.480
这个高度就为

04:04.480 --> 04:06.480
其实也不用给它高度

04:06.480 --> 04:07.480
让它高度自动吧

04:07.480 --> 04:08.480
我们在里边去控制

04:08.480 --> 04:10.480
里边是有两个元素

04:10.480 --> 04:11.480
一个是ness

04:11.480 --> 04:13.480
一个是title

04:13.480 --> 04:14.480
首先呢

04:14.480 --> 04:16.480
我们要把它排列成这个样子

04:17.480 --> 04:19.480
排列成左右两个部分

04:19.480 --> 04:20.480
对吧

04:20.480 --> 04:21.480
那么左边是一个title

04:21.480 --> 04:23.480
右边呢 是一个列表

04:23.480 --> 04:24.480
那么这两个元素呢

04:24.480 --> 04:25.480
要并排排列

04:25.480 --> 04:26.480
所以说我们可以这里呢

04:26.480 --> 04:27.480
可以使用浮动

04:27.480 --> 04:29.480
把title进行floatnaps

04:29.480 --> 04:30.480
然后呢ness呢

04:30.480 --> 04:32.480
也进行floatnaps

04:33.480 --> 04:34.480
这样子有并排排列了

04:34.480 --> 04:36.480
哎 背景颜色去哪了呢

04:36.480 --> 04:37.480
是不是静态一面的姿势

04:37.480 --> 04:38.480
对吧

04:38.480 --> 04:39.480
set的姿势

04:39.480 --> 04:40.480
那么由于复元素

04:40.480 --> 04:41.480
它里边的元素浮动了

04:41.480 --> 04:44.480
就导致了复元素高度摊塌

04:44.480 --> 04:45.480
你看这个高度是零

04:45.480 --> 04:46.480
看没 一面上

04:46.480 --> 04:48.480
高度是零 摊塌了

04:48.480 --> 04:49.480
这两个元素倒是浮动了

04:49.480 --> 04:50.480
所以说呢

04:50.480 --> 04:51.480
我们这一块呢

04:51.480 --> 04:52.480
要避免高度摊塌

04:52.480 --> 04:53.480
是不是有很多的办法

04:53.480 --> 04:54.480
一个是清除浮动

04:54.480 --> 04:56.480
那么清除浮动咋显的

04:56.480 --> 04:58.480
可以用container after

04:58.480 --> 04:59.480
然后content

05:00.480 --> 05:02.480
然后display block

05:02.480 --> 05:03.480
clear both

05:03.480 --> 05:04.480
对吧

05:04.480 --> 05:06.480
这个玩意是静态一面的姿势

05:06.480 --> 05:07.480
没什么好说的

05:07.480 --> 05:08.480
还有一种显化呢

05:08.480 --> 05:10.480
就是把它变成一个bfc

05:10.480 --> 05:11.480
overflow item

05:11.480 --> 05:12.480
对吧

05:12.480 --> 05:13.480
都可以

05:13.480 --> 05:15.480
搞定这个高度摊塌的问题

05:15.480 --> 05:16.480
好 接下来我们来

05:16.480 --> 05:18.480
一部一份一部分来去设置它

05:18.480 --> 05:21.480
首先我给它设置一个

05:21.480 --> 05:22.480
标题这一块

05:22.480 --> 05:24.480
标题这个文字太大了

05:24.480 --> 05:25.480
我们一点点来

05:25.480 --> 05:27.480
方size把它变成Normal

05:29.480 --> 05:32.480
把它变成一个绝对的值吧

05:33.480 --> 05:35.480
字体文字大小的话

05:35.480 --> 05:36.480
就16个相处吧

05:37.480 --> 05:39.480
文字不要加粗

05:39.480 --> 05:42.480
所以说加下方字为Normal

05:43.480 --> 05:44.480
好了

05:44.480 --> 05:46.480
然后你左边有一段距离

05:46.480 --> 05:48.480
这稍微控制一下就行了

05:48.480 --> 05:49.480
margin left

05:49.480 --> 05:52.480
再加上一个20个相数

05:54.480 --> 05:55.480
差不多了

05:55.480 --> 05:56.480
有这么个意思的对吧

05:56.480 --> 05:58.480
然后右边的列表呢

05:58.480 --> 06:00.480
列表我们首先把它的底儿给它去掉

06:00.480 --> 06:01.480
list style now

06:01.480 --> 06:04.480
然后把它里面的pending去掉

06:07.980 --> 06:09.980
那么列表在这儿了

06:09.980 --> 06:10.980
为了让你们看清楚

06:10.980 --> 06:11.980
我给它加上一个包的吧

06:12.980 --> 06:13.980
ps solid

06:16.980 --> 06:17.980
好

06:17.980 --> 06:18.980
接下来我这个列表呢

06:18.980 --> 06:19.980
它里面有很多内容

06:19.980 --> 06:21.980
它里面内容它导致了

06:21.980 --> 06:23.980
把这个列表的高度撑开了

06:23.980 --> 06:25.980
但是实际上我们看这边

06:25.980 --> 06:26.980
这边的列表呢

06:26.980 --> 06:27.980
高度呢

06:27.980 --> 06:29.980
实际上它有一个固定的高度

06:29.980 --> 06:30.980
然后使用了滚动条

06:30.980 --> 06:31.980
对吧

06:31.980 --> 06:32.980
我们打开这里

06:36.420 --> 06:37.420
你看

06:37.420 --> 06:38.420
它高度是30

06:38.420 --> 06:39.420
是一个固定高度

06:39.420 --> 06:41.420
然后艺术部分是隐藏的

06:41.420 --> 06:43.420
我们这边的也可以使用这种方式

06:43.420 --> 06:45.420
这边我们给它一个高度

06:45.420 --> 06:47.420
高度就为30个像素

06:49.420 --> 06:50.420
然后

06:50.420 --> 06:52.420
里边艺术部分呢

06:52.420 --> 06:54.420
我们这里为了让大家看得清楚

06:54.420 --> 06:55.420
横向艺术我就艺术了

06:55.420 --> 06:56.420
无所谓

06:56.420 --> 06:57.420
中向艺术呢

06:57.420 --> 06:59.420
我给它使用一个滚动条

06:59.420 --> 07:01.420
这样子里面就看得比较清楚了

07:01.420 --> 07:02.420
对吧

07:02.420 --> 07:03.420
好

07:03.420 --> 07:04.420
然后呢

07:06.420 --> 07:07.420
把包子里面去掉

07:07.420 --> 07:08.420
好

07:08.420 --> 07:09.420
那么现在的问题呢

07:09.420 --> 07:10.420
是

07:11.420 --> 07:13.420
可以看一看变成这个样子了

07:13.420 --> 07:15.420
那么这个问题发生了什么情况呢

07:15.420 --> 07:17.420
就是我希望它每一航

07:17.420 --> 07:19.420
真正的占30个像素

07:19.420 --> 07:21.420
高度30个像素

07:21.420 --> 07:22.420
好

07:22.420 --> 07:23.420
那么这里怎么办呢

07:23.420 --> 07:25.420
我就给它电视里面的找到它的Li

07:25.420 --> 07:28.420
然后给它设置高度为30个像素

07:28.420 --> 07:30.420
这样子它每一航就占30个像素

07:30.420 --> 07:32.420
那么目前的

07:32.420 --> 07:33.420
显示到第一航

07:33.420 --> 07:35.420
后边的隐藏交来

07:35.420 --> 07:37.420
为了让它在

07:37.420 --> 07:39.420
为了让这个每一航的文字

07:39.420 --> 07:40.420
这是每一航每个Li

07:40.420 --> 07:42.420
刚好占30

07:42.420 --> 07:45.420
但它的文字实际上是没有在Li里面居中的

07:45.420 --> 07:46.420
对不对

07:46.420 --> 07:48.420
为了让它的文字

07:48.420 --> 07:50.420
在Li里面垂直居中

07:50.420 --> 07:51.420
怎么办

07:51.420 --> 07:52.420
就写过的

07:52.420 --> 07:54.420
设置一个单航文字垂直居中

07:54.420 --> 07:56.420
non-height

07:57.420 --> 07:59.420
跟高度相等

07:59.420 --> 08:00.420
好那么这个区域

08:00.420 --> 08:01.420
实际上就出来了

08:01.420 --> 08:02.420
对吧

08:02.420 --> 08:04.420
然后我为了让它跟最新公告之间

08:04.420 --> 08:05.420
有一点很距离的话

08:05.420 --> 08:07.420
我给它设置一个Martineft

08:07.420 --> 08:08.420
给这个UL

08:08.420 --> 08:10.420
给整个列表设这个Martineft

08:10.420 --> 08:12.420
表设30个像素

08:12.420 --> 08:14.420
每个50个像素

08:14.420 --> 08:16.420
差不多

08:16.420 --> 08:17.420
好差不多了

08:17.420 --> 08:18.420
那么整个Li

08:18.420 --> 08:20.420
我们再来看一下这个元素结构

08:20.420 --> 08:21.420
H1在这

08:21.420 --> 08:24.420
然后Li在这

08:24.420 --> 08:26.420
没问题吧

08:26.420 --> 08:27.420
好

08:27.420 --> 08:28.420
那么

08:28.420 --> 08:30.420
这一块是不是搞定了

08:30.420 --> 08:32.420
这个Martineft哪来的呢

08:32.420 --> 08:33.420
这个Li的Martineft

08:33.420 --> 08:34.420
ULMartineft

08:34.420 --> 08:36.420
是因为UL它本身有一个Martineft

08:36.420 --> 08:38.420
我们把Martineft清除掉

08:39.420 --> 08:41.420
首先把Martineft清除掉

08:42.420 --> 08:44.420
好就变成了这个样子再看

08:44.420 --> 08:45.420
这是H1

08:45.420 --> 08:46.420
H1它本身也有个Martineft

08:46.420 --> 08:47.420
H1

08:47.420 --> 08:50.420
然后这个是一个UL

08:50.420 --> 08:53.420
我们把H1的Martineft清除掉吧

08:53.420 --> 08:55.420
就像在真实项目里边

08:55.420 --> 08:57.420
像这些代码

08:57.420 --> 08:59.420
我们通常都会把它

08:59.420 --> 09:00.420
浏览器的默认样式给它清除掉

09:00.420 --> 09:02.420
然后再续写我们的代码

09:02.420 --> 09:04.420
好你看

09:04.420 --> 09:05.420
现在就比较合理了

09:05.420 --> 09:07.420
对吧 就是我们目前的情况了

09:08.420 --> 09:11.420
好 接下来我们为了让它跟右边的东西对齐

09:11.420 --> 09:15.420
所以说我给它单独的去设置一个Martineft

09:17.420 --> 09:20.420
单独去设置一个Martineft

09:20.420 --> 09:22.420
稍微去控制一下

09:22.420 --> 09:24.420
Martineft10有点多了

09:24.420 --> 09:25.420
5个相处吧

09:25.420 --> 09:27.420
差不多了 有点对齐的意思了

09:28.420 --> 09:30.420
好 这是这一块

09:31.420 --> 09:33.420
接下来我们为了让整个容器

09:33.420 --> 09:35.420
上下有一点边距

09:35.420 --> 09:37.420
我给它设置一个Pending

09:37.420 --> 09:39.420
左右的Pending为0

09:39.420 --> 09:41.420
上下的边

09:41.420 --> 09:43.420
上下为一个20个相处

09:43.420 --> 09:45.420
左右为0吧

09:45.420 --> 09:47.420
好 我们再来看这个结构

09:47.420 --> 09:49.420
你看 外面是有Pending的绿色的部分

09:49.420 --> 09:51.420
然后里边的左浮动

09:51.420 --> 09:53.420
左浮动

09:53.420 --> 09:55.420
好 这一块没什么问题了吧

09:55.420 --> 09:57.420
那剩下的就是中间这个速线了

09:57.420 --> 10:01.420
这个速线我们可以利用H1元素的

10:01.420 --> 10:03.420
一个右边框

10:03.420 --> 10:05.420
可以来搞定

10:05.420 --> 10:07.420
好 我们找到这个H1元素

10:07.420 --> 10:09.420
给它设置一个右边框

10:09.420 --> 10:11.420
Border Right

10:11.420 --> 10:12.420
一个相处吧

10:12.420 --> 10:13.420
Solid

10:13.420 --> 10:15.420
一个CCC 归车

10:15.420 --> 10:17.420
你看 是不是有一个右边框了

10:17.420 --> 10:18.420
两个相处吧

10:18.420 --> 10:20.420
有一个右边框了

10:20.420 --> 10:22.420
那么由于右边框是紧贴着文字的

10:22.420 --> 10:23.420
为什么呢

10:23.420 --> 10:25.420
因为现在目前H1就这么宽

10:25.420 --> 10:26.420
所以这些问题

10:26.420 --> 10:28.420
我们写这些央视的时候

10:28.420 --> 10:30.420
所以它说已经学过了东西

10:30.420 --> 10:32.420
写这一央视的时候 发现了问题

10:32.420 --> 10:33.420
不要着急

10:33.420 --> 10:34.420
你先去调试

10:34.420 --> 10:35.420
看它到底是怎么回事

10:35.420 --> 10:37.420
你希望是什么样子

10:37.420 --> 10:39.420
你看目前的问题在哪

10:39.420 --> 10:40.420
它是怎么造成的

10:40.420 --> 10:41.420
你就知道怎么去解决了

10:41.420 --> 10:42.420
那么目前怎么造成的呢

10:42.420 --> 10:45.420
是因为这个H1元素它的宽度只有这么多

10:45.420 --> 10:46.420
所以我们只需要把它宽度

10:46.420 --> 10:48.420
给它变宽就行了 对吧

10:48.420 --> 10:50.420
变宽一点 宽度的话

10:50.420 --> 10:52.420
BorderRight该设置右边的Pending也行

10:52.420 --> 10:54.420
PendingRight

10:54.420 --> 10:58.420
设置一个30个相处

10:58.420 --> 10:59.420
差不多有这么个意思了

10:59.420 --> 11:01.420
对吧 够了

11:01.420 --> 11:03.420
好了

11:03.420 --> 11:06.420
ATMCCSS就写完了

11:06.420 --> 11:09.420
接下来重头戏就是JS

11:09.420 --> 11:11.420
在写JS的时候

11:11.420 --> 11:14.420
其实你无论拿到什么效果

11:14.420 --> 11:17.420
任何网页 任何效果

11:17.420 --> 11:19.420
包括你们以后学的各种各样的介石

11:19.420 --> 11:21.420
就是什么框架 工程化

11:21.420 --> 11:24.420
其实整个网页分析下来

11:24.420 --> 11:26.420
本质上就这么两件事需要做

11:26.420 --> 11:29.420
第一件事一个要考虑的问题是

11:29.420 --> 11:32.420
一开始做什么

11:32.420 --> 11:34.420
我们把它称之为初始化

11:34.420 --> 11:36.420
什么叫初始化

11:36.420 --> 11:38.420
就是网页打开之后

11:38.420 --> 11:40.420
你啥都不用动 你不动

11:40.420 --> 11:42.420
它就会做一些事

11:42.420 --> 11:44.420
这叫做初始化

11:44.420 --> 11:46.420
一开始要做什么

11:46.420 --> 11:51.380
第二件事就是

11:51.380 --> 11:55.380
用户操作之后要做什么

11:55.380 --> 11:57.380
就在这个网页上用户可以做什么

11:57.380 --> 11:59.380
操作可以点哪里

11:59.380 --> 12:01.380
然后网页上又会发生什么事

12:01.380 --> 12:05.940
这叫做交户

12:05.940 --> 12:08.940
整个网页无非就能这么两件事

12:08.940 --> 12:10.940
一开始要做什么

12:10.940 --> 12:11.940
把它写了

12:11.940 --> 12:14.940
然后用户操作之后要做什么

12:14.940 --> 12:16.940
就这么两件事

12:16.940 --> 12:18.940
所有的网页都是这样子

12:18.940 --> 12:21.940
我们首先看一下我们这个效果

12:21.940 --> 12:24.940
这个效果用户有操作吗

12:24.940 --> 12:25.940
是不是没有操作

12:25.940 --> 12:26.940
用户操作有啥用

12:26.940 --> 12:27.940
没有什么用

12:27.940 --> 12:29.940
用户不进行任何操作

12:29.940 --> 12:30.940
操作的也没用

12:30.940 --> 12:32.940
所以说我们这个效果里边

12:32.940 --> 12:34.940
是没有交户的

12:34.940 --> 12:36.940
使效果

12:36.940 --> 12:41.410
无交户

12:41.410 --> 12:42.410
没有交户

12:42.410 --> 12:44.410
它只有初始化

12:44.410 --> 12:46.410
所以只有初始化

12:46.410 --> 12:48.410
在最开始的时候要做什么

12:48.410 --> 12:49.410
最开始的时候

12:49.410 --> 12:50.410
我们就要做各种各样的事情

12:50.410 --> 12:52.410
让它自动稳动

12:52.410 --> 12:53.410
那么也就是我们现在

12:53.410 --> 12:54.410
这个效果比较简单

12:54.410 --> 12:57.410
我们只需要考虑初始化就行了

12:57.410 --> 12:59.410
那么我们在写代码的时候

12:59.410 --> 13:01.410
为了避免

13:01.410 --> 13:02.410
因为我们这个效果里边

13:02.410 --> 13:04.410
倒是不会写太多的技业史文件

13:04.410 --> 13:05.410
但是在真实项目里边

13:05.410 --> 13:07.410
会有很多的技业史文件

13:07.410 --> 13:09.410
那么为了避免

13:09.410 --> 13:10.410
命名冲突

13:10.410 --> 13:11.410
所以说呢

13:11.410 --> 13:14.410
以及避免那个污染全局变量

13:14.410 --> 13:16.410
所以说我们通常会把代码

13:16.410 --> 13:19.410
放到一个立即执行函数里边去

13:19.410 --> 13:23.170
让我们的所有代码写到这里边

13:23.170 --> 13:25.170
这样子我们所谓的定型的变量也好

13:25.170 --> 13:27.170
各种函数也好

13:27.170 --> 13:28.170
它都不会污染全局

13:28.170 --> 13:29.170
因为它的作用预备

13:29.170 --> 13:32.170
限制到了立即执行函数里边去了

13:32.170 --> 13:34.170
这就是我们常见的一些做法

13:34.170 --> 13:36.170
不过这种做法都比较传统

13:36.170 --> 13:38.170
以后我们学了工程化之后

13:38.170 --> 13:40.170
还有更多更好的方式

13:40.170 --> 13:41.170
来处理这些问题

13:41.170 --> 13:44.170
不过目前我们先用这种方式来做

13:44.170 --> 13:46.170
接下来我们就来思考

13:46.170 --> 13:48.170
一开始要做什么

13:48.170 --> 13:51.170
有哪些事情要做

13:51.170 --> 13:54.170
那我们再回到这个小伙来看一下

13:55.170 --> 13:59.800
把这个打开

13:59.800 --> 14:01.800
它要进行滚动

14:01.800 --> 14:03.800
相信大同学们都看到那个效果

14:03.800 --> 14:04.800
看了很久了

14:04.800 --> 14:06.800
它要进行滚动

14:06.800 --> 14:09.800
那么这里边就涉及到一个问题

14:09.800 --> 14:11.800
滚动到最后又怎么办

14:11.800 --> 14:13.800
你看这是一二三

14:13.800 --> 14:14.800
最后就是第三步了

14:14.800 --> 14:17.800
滚动到第三步又怎么办

14:17.800 --> 14:19.800
是不是又跑到这了

14:19.800 --> 14:21.800
又跑到第一步去了

14:21.800 --> 14:23.800
那它怎么看上去

14:23.800 --> 14:25.800
像无线向下滚动一样

14:25.800 --> 14:27.800
但是实际上

14:27.800 --> 14:32.200
我们把它放大一点

14:32.200 --> 14:33.200
放大一点

14:33.200 --> 14:36.200
看那个滚动条

14:36.200 --> 14:39.200
实际上是怎么实现无线向下滚动的

14:39.200 --> 14:41.200
它实际上滚动到最后一个的时候

14:41.200 --> 14:44.200
它瞬间回到第一个了

14:44.200 --> 14:46.200
由于最后一个的文字

14:46.200 --> 14:49.200
跟第一个的文字是完全一样的

14:49.200 --> 14:51.200
所以说

14:51.200 --> 14:54.200
就给人造成了好像没有回去的感觉

14:54.200 --> 14:57.200
又回到第一个又继续往下滚动

14:57.200 --> 15:00.200
所以说我们首先要搞定的就是

15:00.200 --> 15:02.200
这个结构

15:02.200 --> 15:03.200
ATM结构上

15:03.200 --> 15:05.200
我们目前需要把

15:05.200 --> 15:08.200
我们的UL这个列表里面的

15:08.200 --> 15:11.200
第一项给它复制一项

15:11.200 --> 15:13.200
相当于是复制一项

15:13.200 --> 15:15.200
然后粘贴到最后一项

15:15.200 --> 15:17.200
把第一项复制到最后一项

15:17.200 --> 15:18.200
你看这意思吧

15:18.200 --> 15:21.200
把这一项复制到最后一项

15:21.200 --> 15:24.200
把这一项复制到最后一项

15:24.200 --> 15:27.200
那么到时候我们才方便

15:27.200 --> 15:29.200
实现这个无纷滚动

15:29.200 --> 15:31.200
所以说这是我们必须要做的事

15:31.200 --> 15:33.200
因此这个事是不是一开始要做

15:33.200 --> 15:34.200
那么就是初始化的内容

15:34.200 --> 15:36.200
那么所以说我们这里第一件事

15:36.200 --> 15:37.200
分析出来

15:37.200 --> 15:40.200
先分析思路再去形成代码

15:40.200 --> 15:43.200
第一件事是什么

15:43.200 --> 15:46.200
将列表中的

15:46.200 --> 15:48.200
第一个元素

15:48.200 --> 15:52.200
克隆到列表的最后一个

15:52.200 --> 15:54.200
先做这个准备工作

15:54.200 --> 15:56.200
然后我们再说怎么去滚动的问题

15:56.200 --> 15:58.200
好那么这件事怎么去做呢

15:58.200 --> 16:00.200
接下来就是具体去做了

16:00.200 --> 16:01.200
具体写代码了

16:01.200 --> 16:02.200
怎么去做呢

16:02.200 --> 16:03.200
那么这是一件事

16:03.200 --> 16:05.200
我们就完全可以把它写成一个函数

16:05.200 --> 16:08.200
Clone First Item

16:08.200 --> 16:10.200
克隆列表的第一项

16:10.200 --> 16:12.200
然后我们以后去调用这个函数

16:12.200 --> 16:15.090
是不是就完了

16:15.090 --> 16:16.090
对不对

16:16.090 --> 16:18.090
好那么接下来就是怎么做的问题

16:18.090 --> 16:19.090
我们写成去就是

16:19.090 --> 16:21.090
从大的思路到小的思路

16:21.090 --> 16:23.090
在具体的细节

16:23.090 --> 16:25.090
好那么怎么去做呢

16:25.090 --> 16:27.090
克隆第一项到最后一个

16:27.090 --> 16:29.090
就是我们学过的一些 API

16:29.090 --> 16:30.090
就可以解决

16:30.090 --> 16:31.090
那这里呢

16:31.090 --> 16:33.090
我们肯定要拿到列表元素

16:33.090 --> 16:34.090
对不对

16:34.090 --> 16:35.090
那么这里呢

16:35.090 --> 16:37.090
我们首先去获取这个列表元素

16:37.090 --> 16:38.090
这个列表元素就是个 List

16:38.090 --> 16:40.090
我们使用 Documents

16:40.090 --> 16:41.090
Cyrus Nectar

16:41.090 --> 16:42.090
这里边是可以根据

16:42.090 --> 16:45.090
CSS选择器来选中元素

16:45.090 --> 16:47.090
我们的列表的内容是 List

16:47.090 --> 16:49.090
那么这里用CSS选择内选择器

16:49.090 --> 16:51.090
就可以选用这个列表

16:51.090 --> 16:53.090
好那么在这个函数里边

16:53.090 --> 16:54.090
我们是不是可以拿到

16:54.090 --> 16:56.090
因为要克隆第一个元素吗

16:56.090 --> 16:58.090
可以拿到它的

16:58.090 --> 17:00.090
CHILD

17:00.090 --> 17:02.090
它的所有的指援数

17:02.090 --> 17:03.090
怎么来取第一个呢

17:03.090 --> 17:04.090
是不是给下表0

17:04.090 --> 17:06.090
所以取第一个元素了

17:06.090 --> 17:07.090
对吧

17:07.090 --> 17:09.090
那么这是 First Item

17:09.090 --> 17:11.090
因为这边全是英文

17:11.090 --> 17:13.090
你们可能看上去呢

17:13.090 --> 17:14.090
有点

17:14.090 --> 17:16.090
分不清第几个是第几个

17:16.090 --> 17:18.090
那么这里边我该加个标号吧

17:18.090 --> 17:22.810
好你看现在是不是出来了

17:22.810 --> 17:24.810
1234

17:24.810 --> 17:26.810
好 接下来我们要把拿到

17:26.810 --> 17:27.810
第一个元素之后

17:27.810 --> 17:28.810
我们要进行克隆

17:28.810 --> 17:29.810
克隆是不是里面

17:29.810 --> 17:32.810
本身就有一个方法叫Clone Load

17:32.810 --> 17:33.810
雕用这个方法

17:33.810 --> 17:36.810
它就可以把这个元素进行克隆

17:36.810 --> 17:39.810
产生一个一模一样的元素返回

17:39.810 --> 17:41.810
那么这里边会有一个参数

17:41.810 --> 17:43.810
参数的值呢是一个布尔

17:43.810 --> 17:46.810
表示是不是进行深度克隆

17:46.810 --> 17:47.810
是不是学过的

17:47.810 --> 17:48.810
如果说你不传

17:48.810 --> 17:50.810
或者是传的是Force的话

17:50.810 --> 17:52.810
那么就进行的是浅度克隆

17:52.810 --> 17:53.810
什么叫浅度克隆呢

17:53.810 --> 17:54.810
我们来看一下

17:54.810 --> 17:56.810
这是克隆的元素

17:56.810 --> 17:58.810
New Item

17:58.810 --> 18:00.810
我们打印一下

18:00.810 --> 18:01.810
是不是只有个Li

18:01.810 --> 18:02.810
只有元素本身

18:02.810 --> 18:04.810
如果说本身有属性的话

18:04.810 --> 18:05.810
它不会包含属性

18:05.810 --> 18:06.810
但是没有元素里边的东西

18:06.810 --> 18:07.810
对吧

18:07.810 --> 18:09.810
那么这里我们给它传一个处

18:09.810 --> 18:10.810
这样克隆出来的

18:10.810 --> 18:11.810
形成的元素

18:11.810 --> 18:12.810
它就带有它里边的东西

18:12.810 --> 18:14.810
一模一样的

18:14.810 --> 18:15.810
好 克隆之后

18:15.810 --> 18:16.810
我们产生了一个新的动物

18:16.810 --> 18:17.810
我们需要把这个动物

18:17.810 --> 18:18.810
夹到列表里边

18:18.810 --> 18:19.810
作为最后一项

18:19.810 --> 18:20.810
那这个好办

18:20.810 --> 18:21.810
就利用这个

18:21.810 --> 18:23.810
Urpan Child

18:24.810 --> 18:26.810
所以夹进去用完手

18:28.810 --> 18:29.810
好 咱们再看

18:30.810 --> 18:31.810
然后我们看一下

18:31.810 --> 18:32.810
是不是把这一项

18:32.810 --> 18:34.810
克隆到最后一项了

18:34.810 --> 18:36.810
好 这里滑动

18:36.810 --> 18:37.810
你看到最后一项

18:37.810 --> 18:38.810
是不是一了

18:38.810 --> 18:39.810
对吧

18:39.810 --> 18:41.810
那么这件事就做完了

18:41.810 --> 18:42.810
这是第一件事

18:42.810 --> 18:44.810
好 这件事做完了之后

18:44.810 --> 18:45.810
我们现在要思考

18:45.810 --> 18:46.810
第二件事

18:46.810 --> 18:47.810
第二件事是什么

18:47.810 --> 18:48.810
是不是滚动

18:49.810 --> 18:50.810
好 我们再把它说细一点

18:50.810 --> 18:52.810
你光说一个滚动是一个

18:52.810 --> 18:54.810
说的是太模糊了

18:54.810 --> 18:55.810
什么滚动

18:57.810 --> 18:59.810
就是这个列表

18:59.810 --> 19:01.810
每隔一段时间

19:01.810 --> 19:03.810
滚动到下一个位置

19:05.810 --> 19:06.810
对吧

19:06.810 --> 19:08.810
是不是滚动到下一个位置

19:08.810 --> 19:09.810
所以说这里滚动

19:09.810 --> 19:10.810
什么叫滚动

19:11.810 --> 19:13.810
每隔一段时间

19:15.810 --> 19:20.810
将列表滚动到下一个位置

19:20.810 --> 19:21.810
所以就做这么一件事

19:21.810 --> 19:22.810
那么这件事

19:22.810 --> 19:24.810
一看这个描述就非常清楚了

19:24.810 --> 19:25.810
我们要做什么

19:25.810 --> 19:27.810
是不是要设置一个计时器

19:27.810 --> 19:28.810
间隔时间是多少

19:28.810 --> 19:30.810
你可以自行来订

19:30.810 --> 19:31.810
通常来说

19:31.810 --> 19:32.810
我们比方说

19:32.810 --> 19:33.810
你可以写出

19:33.810 --> 19:34.810
这个这么一个代码

19:35.810 --> 19:36.810
然后后面写个

19:36.810 --> 19:38.810
良妙中滚动一次

19:38.810 --> 19:39.810
但是那种同学能够告诉大家

19:39.810 --> 19:41.810
那种代码不是很好

19:41.810 --> 19:42.810
为什么呢

19:42.810 --> 19:43.810
像这种

19:43.810 --> 19:45.810
你把某一些制服圈

19:45.810 --> 19:47.810
数字写死到某一个位置

19:47.810 --> 19:48.810
这种做法

19:48.810 --> 19:50.810
我们通常把它叫做硬编码

19:52.810 --> 19:54.810
把它叫做hardcode

19:55.810 --> 19:57.810
什么叫硬编码呢

19:57.810 --> 19:59.810
就是你把一些字面量

19:59.810 --> 20:01.810
直接写死到某一个位置了

20:01.810 --> 20:02.810
这样子

20:02.810 --> 20:04.810
将来我们要调整

20:04.810 --> 20:05.810
以后我要需要3秒钟

20:05.810 --> 20:06.810
4秒钟

20:06.810 --> 20:07.810
不是

20:07.810 --> 20:09.810
会造成一些维护的困难

20:09.810 --> 20:11.810
那么怎么来消除硬编码

20:11.810 --> 20:12.810
其实非常简单

20:12.810 --> 20:14.810
我们用一个变量来保存

20:14.810 --> 20:15.810
就行了

20:15.810 --> 20:17.810
比方说我们该用个deration

20:17.810 --> 20:18.810
像这些平时

20:18.810 --> 20:19.810
我们做开发做多了

20:19.810 --> 20:20.810
像这些单词

20:20.810 --> 20:21.810
你慢慢就熟悉了

20:21.810 --> 20:22.810
这个叫间隔

20:23.810 --> 20:24.810
deration

20:24.810 --> 20:25.810
那么deration

20:25.810 --> 20:26.810
我们给它设置

20:26.810 --> 20:27.810
2000

20:27.810 --> 20:28.810
表示什么

20:29.810 --> 20:31.810
滚动的间隔时间

20:33.810 --> 20:34.810
那么这点

20:34.810 --> 20:35.810
我们是不是可以把变量放走了

20:35.810 --> 20:37.810
这样子就好了多了

20:37.810 --> 20:38.810
好

20:38.810 --> 20:39.810
每隔一段时间

20:39.810 --> 20:40.810
运行一个函数

20:40.810 --> 20:41.810
这个函数干嘛

20:41.810 --> 20:44.810
将列表滚动到下一个位置

20:45.810 --> 20:46.810
那么

20:46.810 --> 20:48.810
我们完全可以再去写一个函数

20:48.810 --> 20:50.810
叫做move next

20:50.810 --> 20:51.810
这个函数

20:51.810 --> 20:53.810
要做的事情就是

20:53.810 --> 20:54.810
因为这个函数里面

20:54.810 --> 20:55.810
肯定可以想象

20:55.810 --> 20:56.810
这个函数里面

20:56.810 --> 20:57.810
单码肯定很多的

20:57.810 --> 20:58.810
说全部写到这呢

20:58.810 --> 21:00.810
也是不好维护

21:00.810 --> 21:01.810
看上去不好阅读

21:01.810 --> 21:03.810
所以我们把单独开一个函数

21:03.810 --> 21:08.810
就是将列表滚动到下一个位置

21:08.810 --> 21:10.810
那么有了这个函数过后

21:10.810 --> 21:12.810
我们就可以把函数直接放到这

21:12.810 --> 21:13.810
就完成

21:14.810 --> 21:15.810
对不对

21:15.810 --> 21:16.810
一样的嘛

21:16.810 --> 21:17.810
可以一段时间去运行这个函数

21:17.810 --> 21:18.810
注意啊

21:18.810 --> 21:20.810
这里千万不能这样子写

21:20.810 --> 21:22.810
你这样子写是啥意思

21:22.810 --> 21:25.810
调用这个函数

21:26.810 --> 21:27.810
这个函数返回啥

21:27.810 --> 21:28.810
返回 返回 昂迪凡的

21:28.810 --> 21:29.810
对吧

21:29.810 --> 21:30.810
你没有写吗

21:30.810 --> 21:31.810
没有写 别突然返回昂迪凡

21:31.810 --> 21:32.810
那么相当于是

21:32.810 --> 21:34.810
这里是返了一个昂迪凡的

21:34.810 --> 21:35.810
调用这个函数

21:35.810 --> 21:37.810
把这个函数的返回值

21:37.810 --> 21:39.810
作为利益的函数

21:39.810 --> 21:41.810
不是把这个函数作为利益的函数

21:41.810 --> 21:42.810
搞清楚

21:43.810 --> 21:45.810
好 那么这边我们就输出一下吧

21:45.810 --> 21:47.810
move next 慢慢做

21:47.810 --> 21:49.810
做效果其实挺有意思的

21:49.810 --> 21:50.810
对吧

21:50.810 --> 21:51.810
你可以看到

21:51.810 --> 21:52.810
首先你不能着急

21:52.810 --> 21:53.810
你越着急的话

21:53.810 --> 21:55.810
你就觉得做效果就没意思了

21:55.810 --> 21:56.810
就很痛苦

21:56.810 --> 21:57.810
就做效果挺有意思的

21:57.810 --> 21:59.810
你做一点点就改变一点点

21:59.810 --> 22:00.810
做一点点就改变一点点

22:00.810 --> 22:01.810
对吧

22:01.810 --> 22:02.810
你如果说你写后段的话

22:02.810 --> 22:04.810
还看不出来这种改变的

22:04.810 --> 22:05.810
学前段的话

22:05.810 --> 22:06.810
你很容易看出来

22:06.810 --> 22:07.810
有效果有改变的

22:07.810 --> 22:08.810
但你不用着急

22:08.810 --> 22:11.810
你不要想着一下子就把它做出来

22:11.810 --> 22:12.810
没有任何人能够做到

22:12.810 --> 22:13.810
一下子把它做出来的

22:13.810 --> 22:15.810
不管你是学的一年

22:15.810 --> 22:16.810
还是你工作了十年

22:16.810 --> 22:19.810
都不能说瞬间把效果做出来的

22:19.810 --> 22:20.810
做不到的

22:20.810 --> 22:21.810
慢慢做

22:21.810 --> 22:22.810
好 那么这里边

22:22.810 --> 22:24.810
你看一下技师系就出来了

22:24.810 --> 22:25.810
对吧

22:25.810 --> 22:26.810
是不是

22:26.810 --> 22:27.810
每隔两秒钟

22:27.810 --> 22:28.810
就运行了这个函数

22:28.810 --> 22:30.810
不断的在运行

22:30.810 --> 22:32.810
好 我来这儿来

22:33.810 --> 22:34.810
接下来我们也就是说

22:34.810 --> 22:36.810
要完成这个函数

22:36.810 --> 22:37.810
你想啊

22:37.810 --> 22:39.810
这个函数写完了是不是没了

22:39.810 --> 22:40.810
还要做啥吗

22:40.810 --> 22:41.810
你说还要做啥吗

22:42.810 --> 22:43.810
无非就是这么件事

22:43.810 --> 22:45.810
每隔一段时间

22:45.810 --> 22:47.810
滚动到下一步

22:47.810 --> 22:49.810
每隔一段时间滚动到下一步

22:49.810 --> 22:50.810
每隔一段时间滚动到下一步

22:50.810 --> 22:51.810
就没其他事了

22:51.810 --> 22:52.810
所以我们接下来

22:52.810 --> 22:55.810
要做的事情就是写完这个函数

22:55.810 --> 22:58.810
那么怎么样滚动到下一个位置呢

22:58.810 --> 23:00.810
你想想看本质

23:00.810 --> 23:01.810
本质是啥

23:01.810 --> 23:05.810
不就是调整这个元素的

23:05.810 --> 23:08.810
scroutop

23:08.810 --> 23:09.810
对不对

23:09.810 --> 23:10.810
不就是调整它吗

23:10.810 --> 23:11.810
比方说

23:11.810 --> 23:13.810
你看一下我怎么来去调整它

23:13.810 --> 23:15.810
为了方便展示

23:15.810 --> 23:17.810
我先不着急写这个利息之音函数

23:17.810 --> 23:19.810
这样的方便调试一点

23:20.810 --> 23:21.810
比方说

23:21.810 --> 23:22.810
那么这里我就可以拿到这个列式

23:22.810 --> 23:23.810
对吧

23:23.810 --> 23:24.810
全局面量列式

23:24.810 --> 23:25.810
就是我们的UEL

23:25.810 --> 23:28.810
你看UEL的scroutop复制

23:28.810 --> 23:29.810
复制为0

23:29.810 --> 23:30.810
它就在顶部

23:30.810 --> 23:31.810
复制为30呢

23:31.810 --> 23:33.810
你看就滑到第二个了

23:33.810 --> 23:34.810
复制为60呢

23:35.810 --> 23:36.810
好了

23:36.810 --> 23:37.810
第三个了

23:37.810 --> 23:38.810
就是呢

23:38.810 --> 23:39.810
第四个了

23:39.810 --> 23:41.810
120呢

23:41.810 --> 23:42.810
最底下的一个了

23:42.810 --> 23:43.810
对吧

23:43.810 --> 23:44.810
我们复制的

23:44.810 --> 23:45.810
这个元素是我们复制的

23:45.810 --> 23:46.810
从把第一个复制过来的

23:46.810 --> 23:47.810
对吧

23:47.810 --> 23:48.810
然后调整为0呢

23:48.810 --> 23:49.810
你看

23:49.810 --> 23:51.810
是不是就给它复制就完事了

23:51.810 --> 23:53.810
对不对

23:53.810 --> 23:55.810
那么我们也就是说

23:55.810 --> 23:56.810
需要知道的就是

23:56.810 --> 23:59.810
我要复制为什么值

23:59.810 --> 24:01.810
我们先不考虑动画

24:01.810 --> 24:02.810
我们先考虑就是

24:02.810 --> 24:04.810
没有动画

24:04.810 --> 24:06.810
复制到什么值

24:06.810 --> 24:07.810
是不是我就要看

24:07.810 --> 24:09.810
它滚动到第几个

24:09.810 --> 24:10.810
滚动到第一个

24:10.810 --> 24:12.810
是不是就给它复制为0

24:12.810 --> 24:14.810
滚动到第二个

24:14.810 --> 24:16.810
是不是就给它复制为30

24:16.810 --> 24:17.810
滚动到第三个

24:17.810 --> 24:19.810
复制为60

24:19.810 --> 24:20.810
对吧

24:20.810 --> 24:21.810
就是目前需要滚动

24:21.810 --> 24:24.810
到第几个的问题

24:24.810 --> 24:25.810
对不对

24:25.810 --> 24:26.810
好

24:26.810 --> 24:27.810
那么这个东西

24:27.810 --> 24:29.810
是不是可以用为辩量了

24:29.810 --> 24:32.810
叫做curl index

24:32.810 --> 24:40.810
目前展示的是第几项

24:40.810 --> 24:42.810
当然是用的是下标

24:42.810 --> 24:44.810
程序里面下标都是从0开始的

24:44.810 --> 24:46.810
0表示第一下

24:46.810 --> 24:48.810
目前展示的是第一下

24:48.810 --> 24:49.810
那一会儿呢

24:49.810 --> 24:50.810
可能又把它变成1

24:50.810 --> 24:52.810
就把它变成展示第二项

24:52.810 --> 24:54.810
那么有了这个辩量之后

24:54.810 --> 24:55.810
我们滚动到下一个位置

24:55.810 --> 24:57.810
什么叫滚动到下一个位置

24:57.810 --> 24:59.810
是不是就把它加1

24:59.810 --> 25:00.810
对吧

25:00.810 --> 25:01.810
目前是第1项

25:01.810 --> 25:03.810
一开始是第1项

25:03.810 --> 25:04.810
滚动到下一个位置

25:04.810 --> 25:06.810
是不是把它加1就完成了

25:06.810 --> 25:09.810
是不是这个意思

25:09.810 --> 25:11.810
对吧

25:11.810 --> 25:13.810
然后它每一次加1

25:13.810 --> 25:14.810
每一次加1

25:14.810 --> 25:15.810
是不是就变化了

25:15.810 --> 25:16.810
我们来输出一下

25:16.810 --> 25:17.810
curl index

25:17.810 --> 25:18.810
好 你看

25:18.810 --> 25:19.810
最开始

25:19.810 --> 25:22.810
两秒后滚动到第二项

25:22.810 --> 25:24.810
两秒后滚动到第三项

25:24.810 --> 25:26.810
再两秒后滚动到第四项

25:26.810 --> 25:28.810
两秒后滚动到第五项

25:28.810 --> 25:29.810
对吧

25:29.810 --> 25:30.810
后边就不管了

25:30.810 --> 25:32.810
是不是把它加1

25:32.810 --> 25:33.810
好 加1过后

25:33.810 --> 25:35.810
那么这个东西有什么用呢

25:35.810 --> 25:36.810
它是不是可以通过

25:36.810 --> 25:42.810
它来算出滚动之后的滚动条高度

25:42.810 --> 25:43.810
对吧

25:43.810 --> 25:44.810
我们来用个2

25:44.810 --> 25:46.810
就是达到的高度

25:46.810 --> 25:48.810
滚动之后

25:48.810 --> 25:54.810
就下一项的滚动高度

25:54.810 --> 25:55.810
刚才分析过了

25:55.810 --> 25:58.810
第一项是不是0

25:58.810 --> 26:01.810
然后我们来再分析一下

26:01.810 --> 26:03.810
这是怎么算的

26:03.810 --> 26:04.810
第一项

26:04.810 --> 26:05.810
是不是滚动高度就是0

26:05.810 --> 26:06.810
第二项

26:06.810 --> 26:07.810
滚动高度是30

26:07.810 --> 26:08.810
第三项

26:08.810 --> 26:10.810
滚动高度是60

26:10.810 --> 26:11.810
第四项

26:11.810 --> 26:12.810
滚动高度是90

26:12.810 --> 26:13.810
对吧

26:13.810 --> 26:14.810
后边不说了

26:14.810 --> 26:15.810
那么第N项

26:15.810 --> 26:17.810
滚动高度是多少

26:17.810 --> 26:19.810
是不是就是30

26:19.810 --> 26:20.810
N乘以30

26:20.810 --> 26:22.810
所以说这个2

26:22.810 --> 26:23.810
非常容易算

26:23.810 --> 26:24.810
怎么算呢

26:24.810 --> 26:26.810
就是Curr index乘以30

26:26.810 --> 26:27.810
注意啊

26:27.810 --> 26:28.810
你看你这里写的30

26:28.810 --> 26:30.810
是不是又是硬边嘛

26:30.810 --> 26:31.810
一把写死的

26:31.810 --> 26:33.810
所以我们最好了用一个变量

26:33.810 --> 26:35.810
Item height

26:35.810 --> 26:37.810
每一项的高度30

26:37.810 --> 26:41.810
每一项的高度

26:41.810 --> 26:42.810
好

26:42.810 --> 26:44.810
把这个项变量放在

26:44.810 --> 26:46.810
这个高度都是一样

26:46.810 --> 26:47.810
好

26:47.810 --> 26:48.810
那么就是算出来

26:48.810 --> 26:49.810
下一项的滚动高度了

26:49.810 --> 26:51.810
滚动高度算出来

26:51.810 --> 26:52.810
我们是不是可以利用

26:52.810 --> 26:54.810
Nessus crowd top

26:54.810 --> 26:58.120
给它设置为Q

26:58.120 --> 26:59.120
你看

27:00.120 --> 27:01.120
两秒后

27:01.120 --> 27:02.120
你看是不是变了

27:03.120 --> 27:04.120
放大一点

27:05.120 --> 27:06.120
放大一点

27:06.120 --> 27:07.120
好

27:07.120 --> 27:08.120
无所谓吧

27:08.120 --> 27:09.120
你看是不是变了

27:09.120 --> 27:10.120
滚动调位置

27:10.120 --> 27:11.120
好

27:11.120 --> 27:12.120
再刷新啊

27:12.120 --> 27:13.120
再来

27:13.120 --> 27:14.120
每隔两秒钟

27:14.120 --> 27:15.120
改变它

27:15.120 --> 27:16.120
改变了过后

27:16.120 --> 27:19.070
再重新设置滚动高度

27:19.070 --> 27:20.070
你看

27:20.070 --> 27:21.070
滚动高度是不是

27:21.070 --> 27:22.070
不断的电话

27:22.070 --> 27:23.070
对不对

27:23.070 --> 27:24.070
这是这个问题

27:25.070 --> 27:26.070
那么现在呢

27:26.070 --> 27:27.070
我们要

27:27.070 --> 27:29.070
考虑的问题就是动画了

27:29.070 --> 27:31.070
它现在呢

27:31.070 --> 27:32.070
是瞬间过去的

27:32.070 --> 27:33.070
对吧

27:33.070 --> 27:34.070
瞬间到了滚动高度的

27:35.070 --> 27:36.070
我不希望瞬间

27:36.070 --> 27:38.070
我需要慢慢过去

27:39.070 --> 27:40.070
你这样写的

27:40.070 --> 27:41.070
肯定是瞬间过去了

27:41.070 --> 27:43.070
那怎么要慢慢过去呢

27:44.070 --> 27:46.070
慢慢过去就是动画

27:46.070 --> 27:48.070
那动画的本质是什么呢

27:48.070 --> 27:49.070
就是我不要让它

27:49.070 --> 27:51.070
一下打到这个位置

27:51.070 --> 27:53.070
我用一点一点的改变

27:53.070 --> 27:54.070
最终打到这个位置

27:54.070 --> 27:55.070
就是动画

27:56.070 --> 27:57.070
一开始呢

27:57.070 --> 27:58.070
大家学习这个

27:58.070 --> 28:00.070
用GS实现动画的时候呢

28:00.070 --> 28:01.070
可能不是很适应啊

28:01.070 --> 28:02.070
写多了

28:02.070 --> 28:03.070
反正夫妻都是这样子写

28:04.070 --> 28:05.070
那么你要实现动画

28:05.070 --> 28:06.070
你就要知道

28:06.070 --> 28:07.070
两个值

28:07.070 --> 28:08.070
最开始的值

28:08.070 --> 28:10.070
和最终的值

28:10.070 --> 28:11.070
这是最终的值

28:11.070 --> 28:12.070
我们算出来的对吧

28:12.070 --> 28:13.070
那么开始的值呢

28:15.070 --> 28:16.070
开始的值是不是在

28:16.070 --> 28:17.070
它没有加之前

28:18.070 --> 28:19.070
来进行计算

28:20.070 --> 28:21.070
per index

28:21.070 --> 28:23.070
乘以iPhone X

28:23.070 --> 28:24.070
对吧

28:24.070 --> 28:26.070
开始的滚动高度

28:27.070 --> 28:29.070
最开始是这么高的

28:29.070 --> 28:30.070
然后呢加一之后

28:30.070 --> 28:31.070
到了下一项

28:31.070 --> 28:32.070
下一项滚动高度是这一项

28:32.070 --> 28:33.070
那么也就是说

28:33.070 --> 28:34.070
我们这里呢

28:34.070 --> 28:37.600
要做的事情就是

28:38.600 --> 28:43.300
从from

28:43.300 --> 28:46.930
到to

28:46.930 --> 28:48.930
我们就要做这么一件事

28:48.930 --> 28:49.930
好看一下

28:49.930 --> 28:51.930
从0到30要变化

28:51.930 --> 28:53.930
然后从30到60进行变化

28:53.930 --> 28:54.930
90到90进行变化

28:54.930 --> 28:56.930
从90到120进行变化

28:56.930 --> 28:57.930
原来的意思吧

28:57.930 --> 28:59.930
是不是我们要做这么一件事

29:00.930 --> 29:01.930
那么这里的变化

29:01.930 --> 29:03.930
也就是我们这里的打住式

29:03.930 --> 29:04.930
要做什么事呢

29:05.930 --> 29:06.930
让

29:06.930 --> 29:09.930
next的滚动高度

29:09.930 --> 29:10.930
screw top

29:11.930 --> 29:13.930
从from

29:14.930 --> 29:16.930
慢慢变为to

29:16.930 --> 29:18.930
它不是说一下子变过去

29:18.930 --> 29:21.930
那什么叫做慢慢变为呢

29:22.930 --> 29:25.560
在程序里边

29:25.560 --> 29:27.560
这个东西就是即时器

29:27.560 --> 29:29.560
什么叫做慢慢变为

29:29.560 --> 29:33.640
是指的是

29:33.640 --> 29:36.640
在一段时间内

29:38.640 --> 29:41.640
一点点的进行变化

29:41.640 --> 29:43.640
或者说的再明确一点

29:43.640 --> 29:44.640
一点时间内

29:44.640 --> 29:48.640
每隔一小段时间

29:49.640 --> 29:51.640
变化一点

29:52.640 --> 29:54.640
是不是就是即时器

29:54.640 --> 29:56.640
每隔一段时间去做一些变化

29:56.640 --> 29:57.640
最终

29:58.640 --> 30:00.640
完成整个变化

30:00.640 --> 30:02.640
那么这里边需要几个信息

30:02.640 --> 30:04.640
你第一次写到这种介绍动画

30:04.640 --> 30:05.640
可能不是很适应

30:05.640 --> 30:06.640
慢慢去适应

30:06.640 --> 30:07.640
不用怕

30:08.640 --> 30:10.640
一个是总时间

30:10.640 --> 30:14.640
总时间那就是total duration

30:14.640 --> 30:15.640
总时间那种

30:15.640 --> 30:16.640
这里可以设置一下

30:16.640 --> 30:17.640
比方说是

30:17.640 --> 30:19.640
我要在500毫秒内

30:19.640 --> 30:21.640
总时间

30:21.640 --> 30:23.640
变化的总时间

30:25.640 --> 30:26.640
另外一个需要知道的信息

30:26.640 --> 30:27.640
那就是

30:27.640 --> 30:29.640
每隔一小段时间

30:30.640 --> 30:32.640
总时间500毫秒内

30:32.640 --> 30:33.640
完成这个变化

30:33.640 --> 30:35.640
从0到30

30:36.640 --> 30:37.640
完成这个变化

30:38.640 --> 30:39.640
那你

30:40.640 --> 30:43.640
如果说你每个小段间隔时间

30:43.640 --> 30:44.640
有100

30:45.640 --> 30:46.640
那你看

30:46.640 --> 30:47.640
总时间是500

30:52.700 --> 30:54.700
间隔时间

30:54.700 --> 30:56.700
间隔时间你可能100毫秒

30:56.700 --> 30:58.700
那么你是不是只变化5次

30:58.700 --> 31:00.700
5次就要到达到达这个位置

31:00.700 --> 31:01.700
对吧

31:01.700 --> 31:03.700
那动画就可能不是很平滑

31:03.700 --> 31:05.700
比方说你跑100米

31:08.210 --> 31:09.210
然后一个相机

31:09.210 --> 31:10.210
那个相机

31:12.210 --> 31:14.210
你跑100米需要10秒钟

31:14.210 --> 31:15.210
那个相机

31:15.210 --> 31:17.210
每两秒钟拍照一次

31:17.210 --> 31:19.210
所以每一次拍照的位置

31:19.210 --> 31:20.210
都差别很大

31:20.210 --> 31:21.210
就感觉有跳跃

31:21.210 --> 31:22.210
所以我们一般来说

31:22.210 --> 31:24.210
这个间隔时间越短

31:24.210 --> 31:25.210
它动画就越平滑

31:26.210 --> 31:27.210
所以我们这里有一个间隔时间

31:27.210 --> 31:28.210
间隔时间

31:28.210 --> 31:30.210
我们还是用第二类型

31:31.210 --> 31:32.210
因为我们这里面

31:32.210 --> 31:34.210
这个海处里面用不到外面的第二类型

31:34.210 --> 31:35.210
所以说从0的话

31:35.210 --> 31:37.210
它就用里面的第二类型

31:38.210 --> 31:39.210
这边间隔时间

31:39.210 --> 31:40.210
我该是取一个10

31:40.210 --> 31:41.210
或者15

31:41.210 --> 31:43.210
就写小一点

31:43.210 --> 31:44.210
就是

31:45.210 --> 31:46.210
动画的

31:46.210 --> 31:49.210
就变化的间隔时间

31:51.210 --> 31:52.210
总时间

31:52.210 --> 31:54.210
反正在500毫秒一代

31:54.210 --> 31:55.210
完成整个变化

31:55.210 --> 31:57.210
然后每一次变化

31:57.210 --> 31:58.210
间隔时间是15

31:58.210 --> 31:59.210
那么这样子

31:59.210 --> 32:00.210
通过这两个值

32:00.210 --> 32:02.210
是不是可以算出变化的次数

32:04.210 --> 32:05.210
是不是可以算出来

32:06.210 --> 32:07.210
你想想

32:07.210 --> 32:08.210
我随便写10嘛

32:08.210 --> 32:09.210
比方说

32:09.210 --> 32:12.210
一共需要500毫秒

32:13.210 --> 32:15.210
每10毫秒变化一次

32:15.210 --> 32:16.210
那么变化的次数

32:16.210 --> 32:17.210
是不是500除以10

32:17.210 --> 32:18.210
要变化50次

32:18.210 --> 32:19.210
对吧

32:19.210 --> 32:21.210
那么我们可以把变化的次数

32:21.210 --> 32:22.210
算出来

32:22.210 --> 32:25.210
就偷偷

32:25.210 --> 32:27.210
变化的次数

32:28.210 --> 32:30.210
好 那么现在就明确了

32:30.210 --> 32:32.210
非常非常明确了一级

32:33.210 --> 32:34.210
就是要在

32:36.210 --> 32:38.210
就是要在500毫秒内

32:38.210 --> 32:41.210
从它变到它变化这么多次

32:41.210 --> 32:43.210
那么你每一次变化多少

32:43.210 --> 32:44.210
是不是可以算出来

32:46.210 --> 32:47.210
就例子

32:47.210 --> 32:50.210
你要从30变到60

32:50.210 --> 32:52.210
一共变化10

32:52.210 --> 32:53.210
10次

32:53.210 --> 32:55.210
每次变化多少

32:56.210 --> 32:58.210
是不是60-30

32:59.210 --> 33:01.210
多少 30

33:01.210 --> 33:02.210
除以10

33:02.210 --> 33:04.210
每次变化是不是3个相处

33:04.210 --> 33:05.210
对吧

33:05.210 --> 33:06.210
所以说这里的

33:06.210 --> 33:07.210
每一次变化

33:07.210 --> 33:08.210
我们用第四

33:08.210 --> 33:09.210
就可以得到

33:09.210 --> 33:11.210
Front to 减Front

33:11.210 --> 33:12.210
你会发现

33:12.210 --> 33:13.210
以后这些东西

33:13.210 --> 33:14.210
翻的覆去都是这个东西

33:14.210 --> 33:15.210
都是这种写法

33:15.210 --> 33:16.210
总时间

33:16.210 --> 33:17.210
间隔时间

33:17.210 --> 33:18.210
次数

33:18.210 --> 33:19.210
每次变化的量

33:20.210 --> 33:21.210
然后除以

33:25.900 --> 33:27.900
每次变化的量

33:27.900 --> 33:28.900
好了

33:28.900 --> 33:30.900
这几个东西准备好了

33:30.900 --> 33:31.900
你就可以写了

33:31.900 --> 33:32.900
写什么呢

33:34.900 --> 33:36.900
每个多少时间变化一下

33:36.900 --> 33:38.900
每个DRation

33:38.900 --> 33:40.900
每个这么多时间变化一下

33:41.900 --> 33:43.900
每次怎么变化呢

33:43.900 --> 33:45.900
从它变到它

33:45.900 --> 33:48.900
是不是它的值要加上这个间隔

33:48.900 --> 33:49.900
比方说

33:49.900 --> 33:52.900
你从60变到90

33:52.900 --> 33:54.900
每次变化

33:54.900 --> 33:55.900
每次变化是3

33:55.900 --> 33:57.900
每次变化

33:57.900 --> 33:58.900
3

33:58.900 --> 33:59.900
那么怎么变

33:59.900 --> 34:01.900
是不是一开始变63

34:01.900 --> 34:02.900
然后变66

34:02.900 --> 34:03.900
然后变69

34:03.900 --> 34:05.900
然后变72

34:05.900 --> 34:06.900
对不对

34:06.900 --> 34:07.900
是不是就这样变了

34:07.900 --> 34:08.900
还是怎么变了

34:08.900 --> 34:10.900
所以说你要从哪里加

34:10.900 --> 34:12.900
从Front加上

34:12.900 --> 34:14.900
不断的去改变Front

34:14.900 --> 34:16.900
每隔一段时间

34:16.900 --> 34:17.900
去

34:19.900 --> 34:21.900
从它加上它

34:21.900 --> 34:22.900
对吧

34:22.900 --> 34:24.900
那么这个有没有结束呢

34:24.900 --> 34:25.900
肯定有结束

34:25.900 --> 34:27.900
不然这个计时器永远就运行下去了

34:27.900 --> 34:28.900
什么时候结束

34:28.900 --> 34:30.900
是不是加到大于等于90

34:30.900 --> 34:31.900
到了目标了

34:31.900 --> 34:32.900
对吧

34:32.900 --> 34:33.900
是不是就结束了

34:33.900 --> 34:34.900
说这里的判断一下

34:34.900 --> 34:36.900
如果Front大于等于的什么

34:36.900 --> 34:38.900
就到了目标了

34:38.900 --> 34:41.900
到達目标值了

34:41.900 --> 34:43.900
就结束了

34:43.900 --> 34:44.900
怎么结束

34:44.900 --> 34:46.900
是不是就停止计时器

34:47.900 --> 34:49.900
Clear

34:49.900 --> 34:50.900
Interval

34:51.900 --> 34:53.900
所以这两个变量是有区别的

34:54.900 --> 34:55.900
停止计时器

34:55.900 --> 34:57.900
或者谈完ID

34:57.900 --> 35:02.750
停止计时器

35:02.750 --> 35:04.750
就是你不用再变了

35:04.750 --> 35:06.750
到达目标就不用再变了

35:06.750 --> 35:07.750
好

35:07.750 --> 35:08.750
我们这里输出一下图

35:08.750 --> 35:09.750
你看一下

35:09.750 --> 35:14.370
你看

35:14.370 --> 35:15.370
变化第一次了

35:15.370 --> 35:17.370
第二次你看变到60

35:17.370 --> 35:19.370
一个小数运算不精确还正常

35:19.370 --> 35:21.370
再变化到120

35:21.370 --> 35:22.370
再变化到150

35:22.370 --> 35:23.370
对吧

35:23.370 --> 35:24.370
是不断的进行变化

35:24.370 --> 35:26.370
那么我们现在要做的事情就是

35:26.370 --> 35:27.370
不断的把这些值

35:27.370 --> 35:29.370
每一次变化了一点点

35:29.370 --> 35:30.370
我就把这个值

35:30.370 --> 35:31.370
设置到哪

35:31.370 --> 35:34.370
设置到列表的scroll top

35:34.370 --> 35:39.430
你看

35:39.430 --> 35:43.700
现在就已经有效果了

35:43.700 --> 35:45.700
如果说你觉得它滚动不够快

35:45.700 --> 35:46.700
怎么办

35:46.700 --> 35:47.700
那就改这个

35:47.700 --> 35:48.700
你说很容易调整

35:48.700 --> 35:49.700
改这个

35:49.700 --> 35:50.700
然后我只要300毫秒

35:50.700 --> 35:54.080
那些完成变动

35:54.080 --> 35:55.080
开始变快了

35:55.080 --> 35:58.080
就非常容易调整

35:58.080 --> 35:59.080
好

35:59.080 --> 36:00.080
那么现在还剩最后一个问题

36:00.080 --> 36:01.080
什么问题

36:01.080 --> 36:02.080
就到最后一项了

36:02.080 --> 36:03.080
就要出问题了

36:03.080 --> 36:04.080
因为它滚动不了了

36:04.080 --> 36:06.080
最后一项

36:06.080 --> 36:07.080
那么这里边

36:07.080 --> 36:09.080
所以说还有一个问题就是

36:09.080 --> 36:11.080
当我们滚动

36:11.080 --> 36:13.080
这个是不是滚动完成

36:13.080 --> 36:14.080
滚动完成到

36:14.080 --> 36:15.080
如果说滚动完成的时候

36:15.080 --> 36:17.080
已经是最后一项了

36:17.080 --> 36:20.080
是有一些事要做的

36:20.080 --> 36:24.080
滚动完成后

36:24.080 --> 36:27.080
如果是最后一项

36:27.080 --> 36:28.080
那么怎么来判断

36:28.080 --> 36:29.080
是不是最后一项

36:29.080 --> 36:30.080
是不是判断一下

36:30.080 --> 36:31.080
Curr Index

36:31.080 --> 36:32.080
它的下标

36:32.080 --> 36:33.080
就是滚动到的目标

36:33.080 --> 36:36.080
是不是就已经是

36:36.080 --> 36:39.080
等于了列表的

36:39.080 --> 36:41.080
Chill-Lens-1

36:41.080 --> 36:42.080
啥意思

36:42.080 --> 36:44.080
你这个下标

36:44.080 --> 36:46.080
表示你目前滚动到

36:46.080 --> 36:47.080
是第幾项

36:47.080 --> 36:48.080
如果说这个下标

36:48.080 --> 36:51.080
等于了它最后一项的下标

36:51.080 --> 36:52.080
你看Curr Index

36:52.080 --> 36:53.080
一开始是0吧

36:53.080 --> 36:54.080
是第1项

36:54.080 --> 36:55.080
然后变成1

36:55.080 --> 36:56.080
是第2项

36:56.080 --> 36:57.080
是

36:57.080 --> 37:00.080
所以刚好是这个Li的下标

37:00.080 --> 37:02.080
也就是它的指援数的最大下标

37:02.080 --> 37:03.080
对吧

37:03.080 --> 37:04.080
那么就说明它啥

37:04.080 --> 37:07.080
已经滚动到最后一项了

37:07.080 --> 37:08.080
那么如果说

37:08.080 --> 37:09.080
它滚动到最后一项

37:09.080 --> 37:12.080
我们这里打印一下吧

37:12.080 --> 37:14.080
滚动到了最后一项

37:14.080 --> 37:16.080
因为这是

37:16.080 --> 37:17.080
你们学习的第一个效果

37:17.080 --> 37:20.080
所以说我这里讲的比较慢一点

37:20.080 --> 37:21.080
3

37:21.080 --> 37:23.080
4

37:23.080 --> 37:24.080
5

37:24.080 --> 37:25.080
滚动完成

37:25.080 --> 37:26.080
是不是判断到了

37:26.080 --> 37:27.080
滚动到了最后一项

37:27.080 --> 37:28.080
那么这个时候

37:28.080 --> 37:30.080
是有一些事情要做的

37:30.080 --> 37:32.080
当最后一项滚动完成过

37:32.080 --> 37:33.080
你看一下这边

37:33.080 --> 37:35.080
我把这个再加上

37:37.080 --> 37:41.500
好

37:41.500 --> 37:42.500
最后一项滚动完成过

37:42.500 --> 37:44.500
是不是要回到

37:44.500 --> 37:45.500
回到什么

37:45.500 --> 37:48.500
NestScrollTop等于0

37:48.500 --> 37:50.500
就回到0这个位置

37:50.500 --> 37:51.500
保存好

37:51.500 --> 37:52.500
咱们再看一下

37:52.500 --> 37:56.260
2

37:56.260 --> 37:58.260
3

37:59.260 --> 38:01.260
4

38:01.260 --> 38:02.260
5

38:02.260 --> 38:03.260
1

38:03.260 --> 38:04.260
它为什么没回去呢

38:04.260 --> 38:06.260
我不是射了之后回去等于0吗

38:06.260 --> 38:07.260
这个代码肯定是运行的

38:07.260 --> 38:08.260
因为我刚才打印了

38:08.260 --> 38:09.260
它就打印出来了

38:09.260 --> 38:10.260
看一下这个代码

38:10.260 --> 38:12.260
你觉得哪里有问题

38:12.260 --> 38:15.700
好好看一下

38:15.700 --> 38:17.700
哪里有问题呢

38:17.700 --> 38:18.700
因为你这个代码运行了

38:18.700 --> 38:20.700
有没有运行运行了

38:20.700 --> 38:21.700
它有没有回到0

38:21.700 --> 38:22.700
回到0了

38:22.700 --> 38:24.700
但是你下边又运行了

38:24.700 --> 38:25.700
这个就代码

38:25.700 --> 38:27.700
它又把它射到这个位置了

38:27.700 --> 38:29.700
又把它射到最底下这个位置了

38:29.700 --> 38:31.700
所以说这里怎么办呢

38:31.700 --> 38:32.700
这里要做法呢

38:32.700 --> 38:33.700
非常简单

38:33.700 --> 38:34.700
两种做法

38:34.700 --> 38:36.700
要么让它函数在这里结束

38:36.700 --> 38:38.700
这个函数就不要再运行了

38:38.700 --> 38:39.700
运行到到底够了

38:39.700 --> 38:40.700
下面就不要运行了

38:40.700 --> 38:41.700
第二种做法

38:41.700 --> 38:44.700
你把Front设置为0

38:44.700 --> 38:45.700
因为它后面就是根据Front的值

38:45.700 --> 38:46.700
再设置它

38:46.700 --> 38:47.700
对吧

38:47.700 --> 38:48.700
你设置为0就行了

38:48.700 --> 38:50.700
后面就设置为0了

38:50.700 --> 38:52.700
两种做法都可以

38:52.700 --> 38:53.700
看一下

38:53.700 --> 38:54.700
现在

38:54.700 --> 38:55.700
2

38:55.700 --> 38:56.700
3

38:56.700 --> 38:57.700
4

38:58.700 --> 38:59.700
好

38:59.700 --> 39:01.700
你看是不是回到第1个了

39:03.700 --> 39:05.700
那么现在又出问题了

39:05.700 --> 39:06.700
那么下一个

39:06.700 --> 39:07.700
那么为什么到第1个

39:07.700 --> 39:09.700
它没有往继续往后滚动呢

39:09.700 --> 39:10.700
你看它又回到底部了

39:10.700 --> 39:11.700
为什么呢

39:11.700 --> 39:12.700
因为Curling这个是这个值

39:12.700 --> 39:13.700
你没有把它

39:13.700 --> 39:15.700
你没有把它归零

39:15.700 --> 39:16.700
你没有把它归零的话

39:16.700 --> 39:17.700
你就会导致

39:17.700 --> 39:18.700
它们值不断的增加

39:18.700 --> 39:19.700
不断的增加

39:19.700 --> 39:20.700
不断的增加

39:20.700 --> 39:21.700
增加到很恐怖的值

39:21.700 --> 39:22.700
那么

39:22.700 --> 39:23.700
因为它的值

39:23.700 --> 39:25.700
就影响到了这个值

39:25.700 --> 39:27.700
这个值就是我们最终的目标值

39:27.700 --> 39:28.700
所以它就会出问题

39:28.700 --> 39:29.700
因此

39:29.700 --> 39:31.700
我们在滚到最后一项的时候

39:31.700 --> 39:32.700
不仅要把它归零

39:32.700 --> 39:34.700
还要把Curling这个是归零

39:34.700 --> 39:41.560
好

39:41.560 --> 39:42.560
再来看

39:42.560 --> 39:47.560
4

39:48.560 --> 39:49.560
5

39:49.560 --> 39:50.560
你看回到第1项了

39:50.560 --> 39:51.560
然后Curling这个是

39:51.560 --> 39:53.560
从0开始就不断的增加

39:55.560 --> 39:56.560
好 懂这个意思吗

39:57.560 --> 39:58.560
好

39:58.560 --> 39:59.560
那么这里呢

39:59.560 --> 40:00.560
这个效果就做完了

40:00.560 --> 40:02.560
最后我们把这个

40:02.560 --> 40:04.560
Overflow Heighten给它加上

40:06.560 --> 40:07.560
加上

40:07.560 --> 40:09.560
好 那么就实现了这么一个滚动

40:09.560 --> 40:11.560
播放公告的这么一个效果

40:11.560 --> 40:13.560
这个效果本身

40:13.560 --> 40:15.560
其实它多重要呢

40:15.560 --> 40:16.560
也不是多重要

40:16.560 --> 40:18.560
也可能以后你们开在公司里面

40:18.560 --> 40:19.560
都害怕

40:19.560 --> 40:21.560
可能又遇不到这个效果

40:21.560 --> 40:23.560
也可能你们一辈子都遇不到

40:23.560 --> 40:24.560
但是我们希望的是

40:24.560 --> 40:25.560
通过这个效果

40:25.560 --> 40:27.560
去训练大家的

40:27.560 --> 40:29.560
解决问题的能力

40:29.560 --> 40:30.560
这个需要长时间训练的

40:30.560 --> 40:31.560
好了 同学们

40:31.560 --> 40:32.560
讲完了之后

40:32.560 --> 40:34.560
你根据老师的思路

40:34.560 --> 40:35.560
看一下你之前写的单码

40:35.560 --> 40:37.560
不管你有没有完成

40:37.560 --> 40:39.560
最终按照老师的思路

40:39.560 --> 40:40.560
再去写一写

40:40.560 --> 40:41.560
写一次

40:41.560 --> 40:43.560
来导致最好的学习效果

40:43.560 --> 40:44.560
好 这一刻就到这了

40:44.560 --> 40:45.560
拜拜

