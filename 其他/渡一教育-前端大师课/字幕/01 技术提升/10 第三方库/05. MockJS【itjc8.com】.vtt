WEBVTT

00:00.940 --> 00:03.480
Mock.js

00:03.480 --> 00:06.460
首先说这个单词啊 Mock

00:06.460 --> 00:09.140
Mock 什么意思呢 叫做模拟

00:09.140 --> 00:10.780
就模拟一些东西

00:10.780 --> 00:13.180
你看咱们之前不是有一个结合文档吗

00:13.180 --> 00:15.620
这个结合文档里面不是一个Mock 地址

00:15.620 --> 00:17.740
对吧 叫做模拟地址

00:17.740 --> 00:18.700
就是什么意思呢

00:18.700 --> 00:20.780
就是它里面表里访问这个地址

00:20.780 --> 00:22.460
它会给你一个模拟数据

00:22.460 --> 00:24.180
对吧 我们这里点运行

00:24.180 --> 00:26.100
你看这里有几种形式

00:26.100 --> 00:27.820
我们直接使用生产环境的呢

00:27.820 --> 00:29.220
就得到的是真实数据

00:29.660 --> 00:31.340
登录是真实的登录

00:31.340 --> 00:34.660
然后这边就是模拟的 模拟数据

00:34.660 --> 00:37.540
就这一刻咱们讲Mock.js是一个第三方库

00:37.540 --> 00:40.100
就这个第三方库具体怎么去使用

00:40.100 --> 00:41.780
真的不重要

00:41.780 --> 00:43.340
真正重要的是什么

00:43.340 --> 00:46.300
你要理解为什么需要模拟

00:46.300 --> 00:49.220
我用真实的数据多好啊 对吧

00:49.220 --> 00:50.940
模拟干嘛呢

00:50.940 --> 00:53.500
这是有这么一个原因存在

00:53.500 --> 00:56.020
咱们看一下为什么需要模拟

00:56.100 --> 00:58.020
这跟里面以后在公司里面

00:58.020 --> 01:00.140
具体怎么去开发是有关系的

01:00.140 --> 01:02.540
怎么去前后端协作有关系

01:02.540 --> 01:04.860
大概的流程是这么个样子

01:04.860 --> 01:05.940
就是我们首先呢

01:05.940 --> 01:07.180
我们要去做一个东西

01:07.180 --> 01:08.660
得确定一个项目

01:08.660 --> 01:10.540
这个项目一般是由

01:10.540 --> 01:11.900
有可能是由甲方发起

01:11.900 --> 01:13.100
或者是由老板发起

01:13.100 --> 01:14.460
或者是由产品经理发起

01:14.460 --> 01:16.540
总之有一个东西需要做

01:16.540 --> 01:17.940
然后这个时候

01:17.940 --> 01:20.220
当然其他的人员就不考虑了

01:20.220 --> 01:22.900
什么产品啊

01:22.900 --> 01:24.100
还有UI啊

01:24.100 --> 01:24.940
这些都不考虑了

01:24.980 --> 01:26.940
我们就考虑前后端

01:26.940 --> 01:28.540
写单一码的

01:28.540 --> 01:29.540
那么前后端呢

01:29.540 --> 01:30.140
这个时候呢

01:30.140 --> 01:31.220
他们会

01:31.220 --> 01:32.700
Leader他们的领导

01:32.700 --> 01:34.980
会相互商量

01:34.980 --> 01:37.380
一般来说都会相互商量一下

01:37.380 --> 01:38.260
咱们要做这个项目

01:38.260 --> 01:39.860
肯定要前后端要协作啊

01:39.860 --> 01:40.900
你要开发服务器

01:40.900 --> 01:43.060
我要开发页面

01:43.060 --> 01:44.580
那么我们之间怎么来协作呢

01:44.580 --> 01:47.140
得有一个API接口文档

01:47.140 --> 01:49.300
这个接口文档是商量出来的

01:49.300 --> 01:51.660
然后最终编写这个接口文档的人呢

01:51.660 --> 01:54.580
一般来说是后端Leader

01:54.580 --> 01:57.220
或者是专门指定一个后端开发人员

01:57.220 --> 02:00.700
让他专门来负责编写这个接口文档

02:00.700 --> 02:02.900
像你们看到了这个

02:02.900 --> 02:04.260
我们的网页上

02:04.260 --> 02:05.940
这个东西这就是个接口文档

02:05.940 --> 02:06.220
对吧

02:06.220 --> 02:07.660
他一般会放到一个网站上

02:07.660 --> 02:08.780
但是也有可能的

02:08.780 --> 02:10.460
他直接给你一个mockdown

02:10.460 --> 02:12.260
写成一个mockdown文件

02:12.260 --> 02:12.900
发过来

02:12.900 --> 02:13.740
都有可能啊

02:13.740 --> 02:14.820
他不一定是一个网页

02:14.820 --> 02:15.980
他有可能是各种形式

02:15.980 --> 02:17.860
总之他会有一个这么一个接口文档

02:17.860 --> 02:20.060
好有了接口文档之后呢

02:20.060 --> 02:23.060
后端他就基于这个接口文档进行开发

02:23.060 --> 02:24.420
他要实现这个接口文档啊

02:24.460 --> 02:26.220
比如说你前端访问这个地址

02:26.220 --> 02:27.700
我要给你一个什么样的东西

02:27.700 --> 02:28.900
后端要去做开发

02:28.900 --> 02:29.780
他开发了什么了

02:29.780 --> 02:31.660
开发的就是一个web服务器

02:31.660 --> 02:33.500
让前端去访问他的时候

02:33.500 --> 02:35.780
通过这个接口文档的地址去访问他的时候

02:35.780 --> 02:37.940
他能够给你一个正确的东西

02:37.940 --> 02:39.620
把这后端要做的事

02:39.620 --> 02:42.180
那么前端的当然也要基于这个接口文档

02:42.180 --> 02:43.620
去做一些前端的开发

02:43.620 --> 02:44.500
开发页面的时候

02:44.500 --> 02:46.060
该去访问的接口的时候

02:46.060 --> 02:47.660
要去访问接口

02:47.660 --> 02:49.620
但是到这里就会出现一个问题

02:49.620 --> 02:53.140
因为前后端是可能是共同一起在开发的

02:53.140 --> 02:54.740
你看时间线是一起的开发的

02:54.740 --> 02:55.900
同步开发

02:55.900 --> 02:57.300
因此就会出现

02:57.300 --> 02:59.580
后前端去请求接口的时候

02:59.580 --> 03:01.700
后端还没有开发完

03:01.700 --> 03:03.700
这个接口的地址里边没东西

03:03.700 --> 03:04.820
或者那个接口都没有

03:04.820 --> 03:06.620
它没开发出来

03:06.620 --> 03:10.740
因此前端无法请求到真实的接口

03:10.740 --> 03:11.900
这个时候怎么办呢

03:11.900 --> 03:15.020
这个时候常见做法就是进行模拟

03:15.020 --> 03:16.620
这个时候后端没开发出来

03:16.620 --> 03:17.980
它只能进行模拟

03:17.980 --> 03:19.420
不然的话我前端只能等

03:19.420 --> 03:20.020
它不能等

03:20.020 --> 03:20.860
这个等的话

03:20.860 --> 03:21.820
工期就拉长了

03:21.820 --> 03:25.260
而且前端也没有事做浪费的公司的成本

03:25.260 --> 03:26.940
所以说我们一般就会

03:26.940 --> 03:28.580
这个时候就会使用模拟

03:28.580 --> 03:29.380
原来的意思吧

03:29.380 --> 03:33.020
所以模拟它是有这么一个作用

03:33.020 --> 03:35.380
那么这个模拟有很多种方式

03:35.380 --> 03:36.700
比方说我们看到

03:36.700 --> 03:39.020
我们目前给大家一个接口文档里边

03:39.020 --> 03:40.620
其实这个接口文档平台里边

03:40.620 --> 03:42.420
它本身就能模拟

03:42.420 --> 03:43.700
比方说后端没有开发完

03:43.700 --> 03:45.220
你不能请求这样的一个地址

03:45.220 --> 03:47.500
你不能请求生产环境的地址

03:47.500 --> 03:50.820
应该去请求模拟的地址

03:50.820 --> 03:53.060
那么这个时候你就直接请求就完事了

03:53.060 --> 03:54.940
它就能够给你一些模拟的数据

03:54.940 --> 03:56.300
都是假的数据

03:56.300 --> 03:57.020
随意生产的

03:57.020 --> 03:59.140
或者是直接一个固定的一个假的数据

03:59.140 --> 04:03.420
反正让你知道这么一个请求可以请求通就行了

04:03.420 --> 04:05.380
那么有的时候你在公司里边

04:05.380 --> 04:08.220
它没有像我们这种一个平台

04:08.220 --> 04:10.100
也就是说它可能给你的接口文档

04:10.100 --> 04:10.900
是一个马克档

04:10.900 --> 04:12.580
比方说我们这些合遥做了练习

04:12.580 --> 04:13.500
它给你这个接口文档

04:13.500 --> 04:15.380
就是这么一个东西

04:15.380 --> 04:17.380
一个马克档哪有模拟

04:17.380 --> 04:18.180
没有模拟

04:18.180 --> 04:19.620
那么这个时候你去请求它

04:19.620 --> 04:20.740
后端都没有开发完成

04:20.740 --> 04:22.260
你都不知道怎么去请求

04:22.260 --> 04:23.500
没什么意思吧

04:23.500 --> 04:24.660
它没法模拟

04:24.660 --> 04:25.820
没法模拟的时候

04:25.820 --> 04:28.660
就需要前端开发人员自行模拟

04:28.660 --> 04:31.780
那么自行模拟的常见做法是这样子

04:31.780 --> 04:33.580
我们在发送阿迦克斯的时候

04:33.580 --> 04:35.740
对阿迦克斯请求进行拦截

04:35.740 --> 04:36.820
你不要发出去

04:36.820 --> 04:38.660
你发出去根本没有人接收

04:38.660 --> 04:38.940
对吧

04:38.940 --> 04:40.420
后端都没有开发完成

04:40.420 --> 04:41.580
你不要发出去

04:41.580 --> 04:43.020
然后拦截过后

04:43.020 --> 04:45.220
直接给它一个模拟数据

04:45.220 --> 04:47.420
这个时候你才会需要用到

04:47.420 --> 04:48.500
墨河结石

04:48.500 --> 04:50.340
这个第三方库

04:50.380 --> 04:51.540
说清楚了没

04:51.540 --> 04:53.500
首先第一个为什么要模拟

04:53.500 --> 04:55.060
是因为你们前后端共同开发

04:55.060 --> 04:56.460
后端没有开发完

04:56.460 --> 04:57.980
这个时候你请求不到

04:57.980 --> 04:59.860
你只能模拟数据

04:59.860 --> 05:01.460
那么怎么来模拟

05:01.460 --> 05:02.540
两种方式

05:02.540 --> 05:05.780
有些接口平台自动给你提供了模拟的功能

05:05.780 --> 05:07.260
那你就不需要墨河结石了

05:07.260 --> 05:09.860
你直接用请求这样的地址就行了

05:09.860 --> 05:11.180
对吧

05:11.180 --> 05:12.540
还有一种情况就是

05:12.540 --> 05:14.700
后端这个接口平台

05:14.700 --> 05:17.380
它没有提供模拟的功能

05:17.380 --> 05:19.820
总之你它没有现成的模拟的数据

05:19.820 --> 05:22.060
那么这个时候就需要前端开发人员

05:22.060 --> 05:23.260
利用这个第三方库

05:23.260 --> 05:24.620
墨河结石

05:24.620 --> 05:27.460
自行去设置模拟数据

05:27.460 --> 05:30.660
墨河结石只有在这个场景下才能使用

05:30.660 --> 05:32.860
因此你们以后要会不会用

05:32.860 --> 05:34.660
那取决于你们那个公司

05:34.660 --> 05:35.940
那个接口平台

05:35.940 --> 05:37.340
有没有给你提供模拟数据

05:37.340 --> 05:39.380
没用的话就自己模拟

05:39.380 --> 05:40.660
就这么个情况

05:40.660 --> 05:41.700
那么它具体的方式

05:41.700 --> 05:43.700
其实就这个结石的功能

05:43.700 --> 05:45.700
其实它要做的事情就两件事

05:45.700 --> 05:46.700
一个是男嘉宾的事情

05:46.700 --> 05:48.500
就一个是产生模拟数据

05:48.540 --> 05:50.620
就这么两个功能

05:50.620 --> 05:51.140
知道吧

05:51.140 --> 05:52.980
什么场景下会使用它

05:52.980 --> 05:54.260
那么这个墨河结石

05:54.260 --> 05:56.420
它就相当于是一个拦截者

05:56.420 --> 05:57.940
浏览器本来要发出一个请求

05:57.940 --> 05:58.820
到真实的服务器

05:58.820 --> 06:00.820
但是这个服务器正在开发中

06:00.820 --> 06:01.700
不能去请求它

06:01.700 --> 06:03.340
请求它啥都没有

06:03.340 --> 06:04.540
所以说这个墨河结石

06:04.540 --> 06:05.860
就写到前端

06:05.860 --> 06:07.740
前端发现你在请求

06:07.740 --> 06:08.660
然后给你拦截了

06:08.660 --> 06:11.300
直接给你返回响应的模拟数据

06:11.300 --> 06:13.260
好 咱们来看一下这个库

06:13.260 --> 06:15.140
首先它的CD

06:15.140 --> 06:15.940
在这

06:15.940 --> 06:18.300
我们在印面上去引用它

06:18.300 --> 06:21.580
写个Test

06:21.580 --> 06:22.860
这个我们简单说一下

06:22.860 --> 06:23.660
然后说一下练习

06:23.660 --> 06:26.820
主要是还是学习看它的官方文道

06:26.820 --> 06:27.620
非常简单

06:27.620 --> 06:29.020
你就要学习它怎么去模拟数据

06:29.020 --> 06:31.020
怎么去拦截就完事了

06:31.020 --> 06:32.580
很简单

06:32.580 --> 06:34.780
咱们这里打开它

06:42.360 --> 06:48.570
把这个录过来吧

06:48.570 --> 06:49.250
好了

06:49.250 --> 06:50.690
我们引用了这个戒指过后了

06:50.690 --> 06:53.890
它就会提供一个对象叫做mock

06:53.890 --> 06:55.090
就这个对象

06:55.090 --> 06:56.290
这个对象里面有些方法

06:56.290 --> 06:57.490
你可以拦截

06:57.530 --> 06:58.650
而且不是请求

06:58.650 --> 07:01.570
也可以利用它来进行一些模拟数据

07:01.570 --> 07:02.930
那么具体的用法

07:02.930 --> 07:05.890
需要你去参照一个官方文档

07:05.890 --> 07:08.370
咱们来看一下官方文档

07:08.370 --> 07:10.760
在这

07:10.760 --> 07:13.360
官方文档里面我们直接看这吧

07:13.360 --> 07:14.720
我看一下

07:16.160 --> 07:17.360
我们首先看

07:17.360 --> 07:19.720
我们指模拟数据

07:19.720 --> 07:21.600
那么就是使用mock.mock

07:21.600 --> 07:24.160
然后数据模板

07:24.160 --> 07:25.840
也就是说我们要模拟一个数据

07:26.000 --> 07:27.040
怎么写这个代表

07:27.040 --> 07:28.280
就是mock

07:28.280 --> 07:29.680
mock

07:29.680 --> 07:30.440
这个方法

07:30.440 --> 07:32.000
然后这里边是一个数据模板

07:32.000 --> 07:34.160
数据模板是一个对象

07:34.160 --> 07:35.720
那么这个数据模板怎么写呢

07:35.720 --> 07:39.160
这个函数它就会返回一个模拟数据

07:40.480 --> 07:42.080
fake data

07:42.080 --> 07:43.040
假的数据

07:43.040 --> 07:45.200
我们输出一下fake data

07:45.200 --> 07:46.560
那么目前它输出什么了

07:46.560 --> 07:48.280
目前你看它传的一个空对象

07:48.280 --> 07:49.360
它就输出一个空对象

07:49.360 --> 07:51.600
你模拟出了一个空对象

07:51.600 --> 07:53.720
但是我们肯定模拟不一定是空对象

07:53.880 --> 07:55.840
我们一般会模拟一些乱七八糟的东西

07:55.840 --> 07:58.680
那么这个时候你要去参考官方文档里边

07:58.680 --> 08:02.520
这个数据模板该怎么去编写

08:02.520 --> 08:04.000
那么进入官方文档

08:04.000 --> 08:06.320
咱们看一下它的文档

08:07.720 --> 08:09.600
它其实就是个github

08:09.600 --> 08:11.760
这里边有个语法规范

08:11.760 --> 08:13.040
点击这个语法规范

08:13.040 --> 08:14.200
咱们来

08:14.200 --> 08:15.320
它这里就告诉你

08:15.320 --> 08:18.600
这个数据模板定义规范

08:18.600 --> 08:19.800
它的缩写叫DTD

08:19.800 --> 08:21.200
data template is definition

08:22.200 --> 08:23.320
好 咱们来看一下

08:23.320 --> 08:24.680
数据模板定义规范

08:24.680 --> 08:26.760
这里边它有这么几种形式

08:27.480 --> 08:29.120
首先你这里边必须传对象

08:29.120 --> 08:30.560
你必须传一个对象

08:30.560 --> 08:33.880
然后它是对象里边写的属性名

08:33.880 --> 08:35.240
它是有这么一种格式

08:35.240 --> 08:37.080
就是首先是属性的名字

08:37.080 --> 08:38.280
然后一个数线

08:38.280 --> 08:40.560
然后后边是生成规则

08:40.560 --> 08:44.640
然后后边是一个对应的生成值

08:44.640 --> 08:46.960
有它的对象里边属性怎么写

08:46.960 --> 08:48.640
属性就是这样的写法

08:48.640 --> 08:50.040
属性的名字

08:50.160 --> 08:52.080
然后后边是规则

08:52.080 --> 08:54.080
然后帽号属性的值

08:54.080 --> 08:56.000
就是一个参考值

08:57.400 --> 08:58.360
那这是什么玩意

08:58.360 --> 08:59.280
这个东西是什么玩意

08:59.280 --> 09:00.480
我接着往后看吧

09:00.480 --> 09:01.000
不着急

09:02.000 --> 09:04.320
那么这里它又给你一说明了

09:04.320 --> 09:05.240
这个文档里面

09:05.240 --> 09:06.520
学会看文档

09:06.520 --> 09:07.720
一给你说明了

09:08.520 --> 09:10.520
你属性值是什么

09:10.520 --> 09:15.240
类型它会影响到生成的属性的东西

09:15.240 --> 09:16.440
生成的东西

09:16.440 --> 09:17.640
我们一个个看吧

09:17.640 --> 09:18.120
不着急

09:18.840 --> 09:20.880
比方说它这个规则

09:20.880 --> 09:23.280
你属性值是一个字符创类型

09:24.400 --> 09:26.760
那么你的属性名

09:26.760 --> 09:29.040
后边跟的是一个这么一种格式

09:29.040 --> 09:30.600
它就是什么意思呢

09:30.600 --> 09:32.400
通过重复这个字符创

09:32.400 --> 09:33.400
生成一个字符创

09:33.400 --> 09:34.800
重复次数大有等于命

09:34.800 --> 09:36.240
小有等于max

09:36.240 --> 09:38.320
说的是啥意思啊

09:38.320 --> 09:39.480
咱们来试一下吧

09:39.480 --> 09:41.480
试一下你就明白啥意思

09:41.480 --> 09:42.120
我们这里

09:44.280 --> 09:45.640
比方说它刚才告诉你

09:45.640 --> 09:46.800
这个属性的值

09:46.800 --> 09:48.000
如果说是一个字符创

09:48.000 --> 09:48.880
比方说我们的字符创

09:48.880 --> 09:50.480
给它一个abc

09:50.480 --> 09:51.720
随便给一个

09:51.720 --> 09:53.600
然后这是我们的属性名

09:53.600 --> 09:55.720
属性名字你定义随便写

09:55.720 --> 09:57.600
然后属性的规则是什么

09:57.600 --> 09:59.200
是这种格式

09:59.200 --> 10:00.440
命到max

10:00.440 --> 10:02.320
那么这里是两个数字

10:02.320 --> 10:03.480
命就最小值

10:03.480 --> 10:04.360
最大值

10:04.360 --> 10:05.880
命的话我们就写个1

10:05.880 --> 10:07.360
max就写个5

10:07.360 --> 10:08.160
啥意思呢

10:08.160 --> 10:08.920
一保存

10:08.920 --> 10:09.640
你看一下

10:09.640 --> 10:11.080
它生成的对象里面

10:11.080 --> 10:12.480
就有一个属性name

10:12.480 --> 10:14.480
它就对应到这里的属性名字

10:14.480 --> 10:16.040
然后属性的值

10:16.080 --> 10:17.760
它就参考这个字符创

10:17.760 --> 10:19.800
由于它的属性值是字符创

10:19.800 --> 10:21.480
它就生成1到5次

10:21.480 --> 10:23.120
重复这个字符创

10:23.120 --> 10:23.640
那属于记得

10:23.640 --> 10:24.680
它目前重复了几次

10:24.680 --> 10:25.640
重复了三次

10:25.640 --> 10:26.480
那不是一定的

10:26.480 --> 10:26.880
对吧

10:26.880 --> 10:28.080
我们刷新一下

10:28.080 --> 10:29.800
它现在就重复了四次

10:29.800 --> 10:30.560
对不对

10:30.560 --> 10:31.400
懂这个意思吗

10:31.400 --> 10:33.120
就这么个意思

10:33.120 --> 10:34.480
然后你这个看懂了过后

10:34.480 --> 10:36.760
你后边就基本上就明白啥意思了

10:36.760 --> 10:38.120
原来属性值是字符创

10:38.120 --> 10:39.640
它是这么一个意思

10:39.640 --> 10:40.480
属性值是字符创

10:40.480 --> 10:41.520
还有这种显法

10:41.520 --> 10:44.080
你只写一个数字

10:44.080 --> 10:45.040
那么它就重复

10:45.040 --> 10:45.840
指定的次数

10:45.840 --> 10:46.640
比方说两次

10:46.640 --> 10:48.280
写个二

10:48.280 --> 10:49.160
老淳

10:49.160 --> 10:50.000
你看

10:50.000 --> 10:51.640
它生成出来就只重复两次

10:51.640 --> 10:52.960
永远重复两次

10:52.960 --> 10:53.280
当然了

10:53.280 --> 10:54.800
这个规则你是可选的

10:54.800 --> 10:55.920
规则都是可选的

10:55.920 --> 10:57.320
如果说你不写规则的话

10:57.320 --> 10:58.600
那么你写的是啥

10:58.600 --> 11:00.920
这个属性名字生成出来就是啥

11:00.920 --> 11:01.320
看到没

11:01.320 --> 11:02.080
这就是

11:02.080 --> 11:03.080
它就帮你做这么一个事

11:03.080 --> 11:05.040
生成一个魔力的对象

11:05.040 --> 11:05.240
对吧

11:05.240 --> 11:06.360
生成一个普通的对象

11:06.360 --> 11:08.040
对象是魔力出来的

11:08.040 --> 11:08.720
没啥了

11:08.720 --> 11:09.840
然后我既然看后边

11:09.840 --> 11:11.000
它有很多可以玩的

11:11.000 --> 11:13.160
所以后边你们就参与稳当就完事了

11:13.160 --> 11:15.160
属性值如果说是数字

11:15.160 --> 11:16.960
这个地方如果说是一个数字

11:16.960 --> 11:18.680
数字你随便写一个吧

11:18.680 --> 11:20.080
然后呢

11:20.080 --> 11:22.280
你这里写个加一啥意思呀

11:22.280 --> 11:25.200
就是表示数字的自动加一

11:27.200 --> 11:27.840
自动加一

11:29.480 --> 11:31.240
你看一开始是二三四

11:31.240 --> 11:34.360
然后我这边再多生成几次吧

11:36.080 --> 11:37.160
我用列车

11:37.160 --> 11:43.050
再多生成几次

11:43.050 --> 11:43.330
哎

11:43.330 --> 11:45.210
这样子好像不行啊

11:45.210 --> 11:46.130
那么这个加一以后

11:46.130 --> 11:48.570
在数组里面才能看到这个功能

11:48.570 --> 11:50.530
因为你要生成很多个这样的对象

11:50.530 --> 11:51.530
它第一个是二三四

11:51.530 --> 11:52.850
第二个就是二三五

11:52.850 --> 11:53.810
二三七

11:53.810 --> 11:54.770
那么从零开始呢

11:54.770 --> 11:56.050
就是从零开始

11:56.050 --> 11:56.970
下一次就是一

11:56.970 --> 11:57.970
再下一次就是二

11:57.970 --> 11:59.890
那么这个玩意我们以后留到数组里面吧

11:59.890 --> 12:02.090
数组里面才能看得出来

12:02.090 --> 12:03.050
再我们再看一下吧

12:03.050 --> 12:05.490
如果说你的属性值是Number

12:05.490 --> 12:06.010
你这样

12:06.010 --> 12:07.450
这里的规则是这样子写的

12:07.450 --> 12:08.610
那么就生成一个

12:08.610 --> 12:10.810
踏到它之间的一个

12:10.810 --> 12:12.130
水积数字

12:12.130 --> 12:15.010
比方说我这里有个N

12:15.130 --> 12:18.570
刚才的内容我们不变吧

12:18.570 --> 12:20.290
我们再加一个属性

12:20.290 --> 12:21.930
A级

12:21.930 --> 12:24.250
A级我这里随便写一个数字

12:24.250 --> 12:25.570
我们这

12:25.570 --> 12:26.650
随便写个数字

12:26.650 --> 12:29.130
然后这边我们这里写一个Mind Max

12:29.130 --> 12:31.170
比方说10到50

12:31.170 --> 12:34.250
那么它就生成一个10到50的数字

12:34.250 --> 12:36.410
哎呀 它说的这个零是啥意思呢

12:36.410 --> 12:39.650
那么这里它几个官方文档给你说的明白了

12:39.650 --> 12:42.850
属性值Number只用来确定内容

12:42.850 --> 12:44.050
它像这种规则

12:44.050 --> 12:46.330
在这种规则下

12:46.410 --> 12:47.610
它只用来确定内容

12:47.610 --> 12:49.890
所以说里水写什么数字都无所谓

12:49.890 --> 12:51.690
它真正确定数字的是这个

12:53.010 --> 12:55.330
然后还有这种就生成小数的做法

12:55.330 --> 12:58.770
比方说你这里这样子写Mind Max

12:58.770 --> 12:59.890
然后这边有个底

12:59.890 --> 13:00.850
底后边D

13:00.850 --> 13:02.010
Mind到D Max

13:02.010 --> 13:02.770
啥意思呢

13:02.770 --> 13:04.210
你看下面有例子

13:04.210 --> 13:05.330
比方Number 1

13:05.330 --> 13:06.290
1到100

13:06.290 --> 13:08.170
底1到10

13:08.170 --> 13:08.930
然后1

13:08.930 --> 13:10.970
那么这个数字出来就是

13:10.970 --> 13:12.450
12.92

13:12.450 --> 13:12.850
啥意思呢

13:12.850 --> 13:14.810
就是小数点后面

13:15.770 --> 13:18.250
保留1位到10位

13:18.970 --> 13:20.010
就这么个意思

13:20.010 --> 13:21.130
那一些2.3的

13:21.130 --> 13:23.330
就是小数点后面保留3位

13:23.330 --> 13:25.250
那么这个数字肯定是水写生成的

13:25.250 --> 13:26.050
后面的这个东西

13:26.050 --> 13:27.490
它只是用来确定内容

13:27.490 --> 13:28.730
没啥意思吧

13:28.730 --> 13:30.930
好 那么你可以通过同样的规则

13:30.930 --> 13:32.170
去看一下这个布林

13:37.480 --> 13:40.600
就是布尔如何来水写生成

13:40.600 --> 13:42.040
然后呢

13:42.040 --> 13:44.160
属性值如果说是对象的话

13:44.160 --> 13:45.720
那么这个对象里边

13:45.760 --> 13:48.120
这个规则这样子写个数字

13:48.120 --> 13:49.120
那么就从对象里面

13:49.120 --> 13:52.640
随机选择多少个属性

13:52.640 --> 13:54.440
随机选择出来

13:54.440 --> 13:57.400
那么如果说属性值是一个数组的话

13:57.400 --> 13:59.520
比方说我们属性值是一个数组

14:01.840 --> 14:03.160
∞r

14:04.320 --> 14:05.720
当然如果说你不写规则的话

14:05.720 --> 14:07.720
还得到直接得到的一个数组

14:07.720 --> 14:09.920
好 如果说属性值是数组的话

14:09.920 --> 14:11.400
那么有几种写法

14:11.400 --> 14:12.880
那么这个是1

14:12.880 --> 14:14.120
如果这里写的是1的话

14:14.160 --> 14:15.080
那么就从数组里面

14:15.080 --> 14:17.560
随机选择一个元素作为最终值

14:17.560 --> 14:19.360
比方说我们这里写个1 2 3 4

14:19.360 --> 14:20.560
随便写一个

14:21.960 --> 14:23.400
当然你不给规则的话

14:23.400 --> 14:24.760
你写的是啥就是啥

14:25.320 --> 14:26.920
如果说你给规则

14:26.920 --> 14:28.720
咱们写一个1

14:29.720 --> 14:30.320
好 你看

14:30.320 --> 14:31.240
它就会从数组里面

14:31.240 --> 14:34.160
随机选择一下来作为

14:34.160 --> 14:35.320
这个属性的值

14:35.320 --> 14:36.160
对我们刷新一下

14:36.160 --> 14:36.840
它右边

14:36.840 --> 14:38.000
刷新一下

14:39.200 --> 14:40.200
刷新一下

14:40.200 --> 14:41.480
你看

14:41.480 --> 14:42.800
是右边

14:42.800 --> 14:44.000
就这么个意思

14:44.200 --> 14:45.240
那如果说我这里

14:45.240 --> 14:46.560
就是要生成数组怎么办

14:46.560 --> 14:46.960
你看

14:47.600 --> 14:48.520
文档里面有写

14:50.800 --> 14:52.200
我们可以用一个范围

14:53.400 --> 14:54.520
比方说

14:54.520 --> 14:56.680
它会按照数组里面的规则

14:57.840 --> 14:59.880
数组里面定义的东西来生成一个

15:00.480 --> 15:01.080
新的数组

15:01.080 --> 15:03.400
这个数组的长度是这个到这个之间

15:03.400 --> 15:04.240
啥意思

15:04.240 --> 15:07.600
比方说我们这里能写上一个5到10

15:07.600 --> 15:08.480
然后数组里面

15:08.480 --> 15:09.880
让我们写一个对象

15:12.400 --> 15:15.200
那么它就会在数组里面去选择

15:15.240 --> 15:16.720
对象就选择个对象

15:16.720 --> 15:17.760
按照这个对象的规则

15:17.760 --> 15:20.800
生成5到10个长度为5到10之间的数组

15:20.800 --> 15:22.240
你看现在目前的长度为5

15:23.400 --> 15:24.560
再刷新一下

15:24.560 --> 15:25.240
长度为8

15:25.240 --> 15:27.240
5到10之间的这么一个数组

15:28.120 --> 15:29.320
那数组的每一项的值

15:29.320 --> 15:31.040
就按照这个对象来生成

15:31.040 --> 15:33.120
那么这个对象里面又可以写模板

15:33.120 --> 15:34.560
比方说我们可以对象里面

15:34.560 --> 15:35.680
就可以写一些属性

15:35.680 --> 15:36.800
比方说我们这里写ID

15:37.880 --> 15:38.720
从一开始

15:38.720 --> 15:40.200
那么每一个就自征

15:40.200 --> 15:41.760
那么这个时候就可以用上了

15:41.760 --> 15:42.640
加1

15:42.640 --> 15:43.440
啥意思

15:43.440 --> 15:44.760
保存我们来看一下

15:44.800 --> 15:46.760
它生成了长度为9的数组

15:46.760 --> 15:48.560
然后第一个对象里面ID为1

15:48.560 --> 15:50.080
第二个对象里面ID为2

15:50.080 --> 15:51.200
你看ID为1之道

15:51.200 --> 15:52.720
这个自征1就是可以用上了

15:53.440 --> 15:54.680
就这么个意思

15:54.680 --> 15:55.520
然后对象里面

15:55.520 --> 15:56.880
我们比方说生成一个NAM

15:57.960 --> 15:58.600
NAM

15:58.600 --> 16:00.000
我们就随即生成一个吧

16:00.560 --> 16:01.800
3到5

16:03.640 --> 16:04.200
ABC

16:05.040 --> 16:05.680
你看

16:05.680 --> 16:07.560
数组里面每一项是一个对象

16:07.560 --> 16:09.440
对象里面有ID自征

16:09.440 --> 16:10.800
然后NAM属性

16:10.800 --> 16:12.000
是不是可以

16:12.000 --> 16:12.280
对吧

16:12.280 --> 16:13.080
就这么个意思

16:14.080 --> 16:16.120
然后你可以自己去看一下文章

16:16.120 --> 16:17.160
我就不一一讲了

16:17.160 --> 16:18.480
还可以是郑者表达式

16:18.480 --> 16:19.360
比方说我这里

16:19.360 --> 16:22.160
每个人他有一个手机号

16:22.160 --> 16:23.040
手机号的话

16:23.040 --> 16:24.080
我们就可以用tell

16:24.600 --> 16:25.160
手机号的话

16:25.160 --> 16:26.720
我们就给他写个郑者表达式吧

16:26.720 --> 16:28.040
第一位为1

16:28.680 --> 16:31.240
第二位后面就是有个数字

16:32.000 --> 16:33.160
十位的数字

16:34.480 --> 16:34.760
对吧

16:34.760 --> 16:36.280
就是手机号的郑者表达式

16:36.280 --> 16:37.360
那么他在生成的时候

16:37.360 --> 16:38.760
他就会生成

16:38.760 --> 16:40.600
满足这个郑者表达式的

16:41.000 --> 16:42.040
这么一个属性值

16:42.480 --> 16:43.520
保存

16:43.520 --> 16:44.400
你会看到

16:45.600 --> 16:46.400
这里边

16:46.400 --> 16:47.760
每个对象里边是一个tell

16:47.760 --> 16:49.040
而tell字还不一样

16:50.040 --> 16:51.200
这就是水积生成

16:51.200 --> 16:52.080
是不是非常方便

16:52.080 --> 16:53.120
就是水积生成一些数据

16:53.120 --> 16:54.520
就是这是模拟数据

16:54.960 --> 16:55.480
知道吧

16:55.480 --> 16:56.080
这是数据

16:56.080 --> 16:57.040
模拟数据的模板

16:57.040 --> 16:57.880
他就按照这个模板

16:57.880 --> 16:59.120
来水积生成一些数据

16:59.440 --> 17:02.040
然后这里边我们就不一一介绍了

17:02.040 --> 17:02.600
我们来看一下

17:02.600 --> 17:05.000
这个数据占位符是什么意思

17:05.320 --> 17:06.760
数据占位符的好处

17:06.760 --> 17:08.200
就在于你在这里边

17:08.200 --> 17:10.160
可以使用一些特殊的语法

17:10.160 --> 17:11.560
来引用某一个地方

17:11.600 --> 17:12.320
啥意思啊

17:12.320 --> 17:13.480
比方说我们的名字

17:13.480 --> 17:15.000
我们就该是这样子写

17:15.360 --> 17:16.880
比方说我们姓名

17:16.880 --> 17:18.280
姓名我希望第一个人

17:18.280 --> 17:19.240
id唯一的这个人

17:19.240 --> 17:23.120
姓名就得到一个就是姓名1

17:23.120 --> 17:24.320
第二个人就是姓名2

17:24.320 --> 17:25.680
第三个人就是姓名3

17:25.680 --> 17:28.240
那如果说我需要有这么一种操作的话

17:28.240 --> 17:31.120
那么这个地方就需要使用数据占位符

17:31.120 --> 17:33.120
水积生成符是A打开头的

17:33.120 --> 17:35.880
后边跟上你的属性的名字

17:35.880 --> 17:38.360
比方说你要把哪个属性都只放过来

17:38.360 --> 17:39.000
id

17:39.560 --> 17:40.200
保存

17:40.200 --> 17:41.040
我们来看一下

17:41.160 --> 17:42.240
这边生成出来

17:42.240 --> 17:43.480
你看是不是姓名1

17:43.480 --> 17:44.480
那么这个e哪来的

17:44.480 --> 17:46.160
他就把这个id都只放过来了

17:46.160 --> 17:47.760
这是数据占位符的意思

17:48.360 --> 17:48.880
对吧

17:49.360 --> 17:51.960
好数据占位符不仅仅是可以使用这里的属性

17:51.960 --> 17:53.360
这文章里面都有写

17:53.360 --> 17:53.920
你看

17:53.920 --> 17:55.920
这个4nm等于1st

17:56.680 --> 17:57.480
midl

17:58.240 --> 17:58.920
nast

17:59.840 --> 18:00.520
看到没

18:01.280 --> 18:05.560
而数据占位符不仅仅是可以使用本对象的属性

18:05.560 --> 18:06.600
还可以使用什么呢

18:06.600 --> 18:08.560
还可以使用它的一些函数

18:09.280 --> 18:10.480
这个函数在哪呢

18:10.480 --> 18:11.200
在这

18:13.080 --> 18:13.520
在这里

18:13.520 --> 18:14.480
voke write

18:14.480 --> 18:16.680
write里面还可以提供了很多的函数

18:16.680 --> 18:18.800
那么这个函数也可以作为数据占位符

18:18.800 --> 18:19.600
直接写到这

18:19.600 --> 18:20.760
比方说举个例子

18:20.760 --> 18:22.280
它这里面有很多的函数

18:22.280 --> 18:24.160
包括水积生成一个图片

18:24.160 --> 18:25.280
我们一会儿都看一下吧

18:25.280 --> 18:26.560
我们这里呢

18:26.560 --> 18:28.160
水积生成一个名字

18:28.160 --> 18:28.800
姓名

18:29.680 --> 18:30.840
姓名你看

18:30.840 --> 18:32.320
使用first这个函数

18:32.320 --> 18:35.280
是不是可以生成一个英文的姓

18:35.280 --> 18:36.080
nast

18:36.080 --> 18:37.360
这应该是英文的名

18:37.360 --> 18:37.840
对吧

18:37.840 --> 18:38.480
first name

18:38.640 --> 18:41.240
然后是用nast这个函数生成一个英文的姓

18:41.240 --> 18:42.240
那么我们这里也比方说

18:42.240 --> 18:44.200
要生成一个英文的名字

18:44.200 --> 18:45.360
那么我就可以用

18:45.360 --> 18:46.800
atta first

18:49.160 --> 18:49.720
保存

18:50.680 --> 18:52.680
你看它就会调用那个first函数

18:52.680 --> 18:55.720
然后生成一个水积的英文名字

18:55.720 --> 18:57.800
当然你可以用nast生成一个水积的nast name

18:57.800 --> 18:58.920
也可以

18:58.920 --> 19:02.000
还有一个水积的medal name的都可以

19:02.000 --> 19:04.000
然后也可以生成中文的名字

19:04.000 --> 19:05.120
就是用stain name

19:05.120 --> 19:06.200
你看这里都有介绍

19:11.430 --> 19:12.430
stain name

19:12.430 --> 19:14.430
生成一个水积的常见的中文名字

19:14.430 --> 19:15.430
保存

19:17.430 --> 19:17.830
你看

19:17.830 --> 19:19.430
是不是可以生成一个中文的名字

19:19.430 --> 19:22.430
都是用模拟数据常用的一些功能

19:22.430 --> 19:24.430
还有比方说我们来生成一个水积的地址

19:24.430 --> 19:26.430
addr

19:26.430 --> 19:28.030
我们来生成一个水积的地址

19:28.030 --> 19:29.430
那么这里边我们就可以使用

19:29.430 --> 19:31.430
站位符调用它的函数叫irdrace

19:33.430 --> 19:34.430
irdrace呢

19:34.430 --> 19:36.430
这里可以水积生成一个中国的大区

19:36.430 --> 19:37.430
中国的省份

19:37.430 --> 19:38.430
中国的城市

19:38.430 --> 19:40.430
不要让我们生成一个中国的城市吧

19:41.430 --> 19:43.430
因为这个库是中国人做的

19:43.430 --> 19:45.430
所以说对中国的知识特别特别好

19:45.430 --> 19:47.430
city

19:47.430 --> 19:49.430
将来你们很幸福

19:49.430 --> 19:51.430
将来你们会看到很多很多的

19:51.430 --> 19:53.430
国人做的非常优秀的一些库

19:54.430 --> 19:55.430
你看是不是生成一个城市

19:55.430 --> 19:57.430
但是这个城市前面没有什么

19:57.430 --> 19:58.430
没有那个省份对吧

19:58.430 --> 19:59.430
那么那个城市呢

19:59.430 --> 20:01.430
实际上可以传一个参数

20:02.430 --> 20:03.430
表示一个布尔池

20:03.430 --> 20:04.430
如果说传入处的话

20:04.430 --> 20:06.430
它就会加上省份

20:06.430 --> 20:07.430
那么我们该传一个处

20:07.430 --> 20:08.430
那么这里可以是这样的写的

20:08.430 --> 20:10.430
传一个处

20:13.430 --> 20:15.430
你看是不是加上了省份了

20:16.430 --> 20:17.430
对不对

20:17.430 --> 20:19.430
就这么一个回事

20:20.430 --> 20:22.430
那么这是那个站位符

20:22.430 --> 20:24.430
你看站位符里边还有很多

20:24.430 --> 20:25.430
比方说我们这里

20:25.430 --> 20:27.430
比方说用户有头箱

20:27.430 --> 20:28.430
头箱的话我们有个amg

20:28.430 --> 20:30.430
它可以水积生成一个图片

20:30.430 --> 20:31.430
它生成的图片

20:31.430 --> 20:33.430
是一个水积的图片访问地址

20:33.430 --> 20:34.430
那么试一下吧

20:34.430 --> 20:36.430
我们这里只用那个erbata

20:36.430 --> 20:38.430
表示用户的头箱

20:38.430 --> 20:40.430
头箱的话我们来水积生成一个图片

20:40.430 --> 20:41.430
它的写法有很多

20:41.430 --> 20:42.430
它是一个函数

20:42.430 --> 20:43.430
它有各种各样的写法

20:43.430 --> 20:46.430
比方说我们就用一个最简单的image

20:47.430 --> 20:48.430
来看一下

20:48.430 --> 20:49.430
那么它就会生成

20:49.430 --> 20:52.430
为每一个对象生成一个图片

20:53.430 --> 20:55.430
这是图片来访问路径

20:55.430 --> 20:56.430
咱们来试一下吧

20:56.430 --> 20:58.810
访问那个图片

20:58.810 --> 21:01.810
你看就这么一个模拟图片

21:02.810 --> 21:03.810
当然你还可以根据一些

21:03.810 --> 21:05.810
其他的参数来设置这个图片的

21:05.810 --> 21:06.810
一些东西

21:06.810 --> 21:07.810
比方说

21:07.810 --> 21:08.810
那个image里边

21:08.810 --> 21:09.810
它可以写个size

21:09.810 --> 21:10.810
size是什么呢

21:10.810 --> 21:11.810
就是图片的宽高

21:11.810 --> 21:13.810
比方说我们这里的写一个

21:13.810 --> 21:14.810
180 x 150

21:14.810 --> 21:15.810
9个例子

21:16.810 --> 21:17.810
就这样写

21:17.810 --> 21:18.810
好

21:18.810 --> 21:19.810
然后后边

21:19.810 --> 21:21.810
可以设置图片的背景颜色

21:21.810 --> 21:22.810
背景颜色的话

21:22.810 --> 21:23.810
我们一家设置008080

21:24.810 --> 21:27.810
然后还可以设置图片的前景颜色

21:27.810 --> 21:28.810
前景颜色的话

21:28.810 --> 21:30.810
我们这里设置那个

21:31.810 --> 21:32.810
白色吧

21:33.810 --> 21:35.810
然后可以设置图片的文字

21:36.810 --> 21:38.810
然后可以设置图片的格式

21:38.810 --> 21:39.810
这无所谓

21:39.810 --> 21:40.810
我们刚说这个图片的文字

21:40.810 --> 21:41.810
图片的文字注意

21:41.810 --> 21:42.810
它这里不能使用

21:42.810 --> 21:44.810
不能使用中文名

21:44.810 --> 21:45.810
它不能使用中文名

21:45.810 --> 21:47.810
它这里应该是有一些问题

21:47.810 --> 21:48.810
不能使用中文名

21:48.810 --> 21:49.810
只能使用

21:49.810 --> 21:50.810
就不是名

21:50.810 --> 21:52.810
不能使用中文字不算

21:52.810 --> 21:53.810
只能使用英文

21:53.810 --> 21:56.810
比方说给它设一个test image

21:56.810 --> 21:57.810
好

21:57.810 --> 21:58.810
保存

21:58.810 --> 21:59.810
咱们来看一下

21:59.810 --> 22:03.120
你看生成的图片是这个

22:03.120 --> 22:04.120
图片路径

22:04.120 --> 22:05.120
好

22:05.120 --> 22:06.120
咱们来访问一下

22:06.120 --> 22:11.760
你看

22:11.760 --> 22:12.760
这是背景颜色

22:13.760 --> 22:15.760
我设置的前景颜色是

22:15.760 --> 22:16.760
白色

22:16.760 --> 22:18.760
为什么会变成红色

22:20.760 --> 22:21.760
这个地方

22:21.760 --> 22:22.760
好像是有问题

22:22.760 --> 22:24.760
那我把空格去掉

22:24.760 --> 22:27.970
我这里写的是

22:30.970 --> 22:31.970
把空格去掉

22:31.970 --> 22:33.970
这个好像不是

22:33.970 --> 22:34.970
夺了个空格

22:34.970 --> 22:35.970
它不能使用空格

22:35.970 --> 22:37.970
最好就不要加上空格

22:38.970 --> 22:39.970
按照你的要求生成

22:39.970 --> 22:40.970
这么一个魔力图片

22:40.970 --> 22:42.970
这就是咱们

22:42.970 --> 22:44.970
这个魔力数据的生成

22:44.970 --> 22:45.970
讲完了吧

22:45.970 --> 22:47.970
当然不会一一讲完

22:47.970 --> 22:48.970
你们自行去查阅

22:48.970 --> 22:49.970
这个官方文档

22:49.970 --> 22:50.970
在官方文档里边

22:50.970 --> 22:51.970
给你说了清清楚楚

22:51.970 --> 22:52.970
该怎么去做

22:52.970 --> 22:54.970
需要魔力什么东西的时候

22:54.970 --> 22:55.970
就去查阅

22:55.970 --> 22:56.970
好 接下来

22:56.970 --> 22:57.970
我们看第二个问题

22:57.970 --> 22:58.970
因为我们官方魔力数据没用

22:58.970 --> 23:00.970
我们要拦夹是请求

23:00.970 --> 23:01.970
对吧

23:01.970 --> 23:02.970
那么怎么来做呢

23:02.970 --> 23:04.970
它可以一句话写完

23:04.970 --> 23:05.970
拦截

23:05.970 --> 23:07.970
同时加上魔力数据

23:07.970 --> 23:09.970
写法非常简单

23:09.970 --> 23:10.970
就是第一个参数

23:10.970 --> 23:13.970
要传入你要拦截的URL地址

23:14.970 --> 23:15.970
第二个参数

23:15.970 --> 23:17.970
传递要拦截的方法

23:17.970 --> 23:18.970
第三个参数

23:18.970 --> 23:20.970
传递数据模板

23:20.970 --> 23:21.970
就是要魔力的数据

23:21.970 --> 23:22.970
啥意思

23:22.970 --> 23:23.970
我们来看一下

23:23.970 --> 23:24.970
这边

23:24.970 --> 23:26.970
官方文档里边的说明

23:30.470 --> 23:32.470
魔力的时候有很多种写法

23:32.470 --> 23:33.470
你可以像我们刚才那样子

23:33.470 --> 23:36.470
直接传一个魔力数据的模板

23:36.470 --> 23:37.470
没问题

23:37.470 --> 23:39.470
也可以用下面这种传法

23:39.470 --> 23:40.470
就是

23:40.470 --> 23:42.470
传一个URL地址

23:42.470 --> 23:44.470
当你去请求这样的地址的时候

23:44.470 --> 23:45.470
它就不给你拦截掉了

23:45.470 --> 23:46.470
不准你发出去

23:46.470 --> 23:47.470
然后呢

23:47.470 --> 23:49.470
给你响应这么一个模板

23:49.470 --> 23:50.470
按照这个模板

23:50.470 --> 23:52.470
可以生成一些魔力数据来响应

23:52.470 --> 23:54.470
也可以给你写各种形式

23:54.470 --> 23:56.470
这个参数还可以写成函数

23:56.470 --> 23:58.470
这个函数的反回值是什么

23:58.470 --> 24:00.470
那么你请求这样的地址

24:00.470 --> 24:01.470
它就会给你响应什么

24:01.470 --> 24:03.470
还可以写成这种形式

24:03.470 --> 24:06.470
如果说你请求一个URL地址

24:06.470 --> 24:08.470
并且同时匹配它的请求方法

24:08.470 --> 24:10.470
比方说get请求

24:10.470 --> 24:12.470
用get请求请求这样的一个地址

24:12.470 --> 24:14.470
那么它就会给你拦截掉

24:14.470 --> 24:16.470
按照这个模板生成魔力数据

24:16.470 --> 24:17.470
给你返回

24:17.470 --> 24:19.470
也可以写成这种格式

24:19.470 --> 24:21.470
当你用某一个请求方法

24:21.470 --> 24:22.470
去请求一个地址的时候

24:22.470 --> 24:24.470
那么它就会运行这个函数

24:24.470 --> 24:26.470
把函数的返回值给你返回

24:26.470 --> 24:28.470
咱们再试一下吧

24:28.470 --> 24:30.470
比方说我们这里

24:32.470 --> 24:33.470
就这个地方吧

24:33.470 --> 24:35.470
这不是个数据模板吗

24:35.470 --> 24:36.470
对不对

24:36.470 --> 24:37.470
这是个数据模板

24:37.470 --> 24:38.470
然后比方说我们这里的

24:38.470 --> 24:40.470
去请求这样的一个地址

24:42.910 --> 24:44.910
比方说我们请求这样的一个地址

24:44.910 --> 24:45.910
拦截这个请求

24:45.910 --> 24:46.910
这里返回了

24:46.910 --> 24:48.910
不需要返回值了

24:49.910 --> 24:50.910
什么意思

24:50.910 --> 24:52.910
拦截对这个地址的请求

24:53.910 --> 24:55.910
如果说去请求它的话

24:55.910 --> 24:56.910
那么

24:56.910 --> 24:58.910
就会被这个摸可接式拦截

24:58.910 --> 25:00.910
然后它会给你按照这个模板

25:00.910 --> 25:01.910
给你返回魔力数据

25:01.910 --> 25:02.910
但是你要注意

25:02.910 --> 25:04.910
有一个点非常重要

25:04.910 --> 25:06.910
它拦截的只能拦截

25:07.910 --> 25:09.910
就是我们最传统的

25:13.910 --> 25:15.910
它只能拦截这种

25:15.910 --> 25:17.910
它不能拦截废棋的

25:17.910 --> 25:19.910
废棋是拦截不了的

25:19.910 --> 25:21.910
我们之前学过的一个东西

25:21.910 --> 25:22.910
叫Axios

25:23.910 --> 25:25.910
Axios它就封装了

25:25.910 --> 25:27.910
是Axios的请求

25:27.910 --> 25:28.910
所以它对Axios而言

25:28.910 --> 25:29.910
它是可以拦截的

25:29.910 --> 25:30.910
你直接使用

25:30.910 --> 25:31.910
废棋是拦截不了的

25:31.910 --> 25:32.910
就这样说明

25:32.910 --> 25:36.670
好 再来用

25:41.870 --> 25:42.870
用Axios

25:42.870 --> 25:43.870
咱们来试一下

25:43.870 --> 25:44.870
我们现在用Axios

25:44.870 --> 25:45.870
去请求一下

25:45.870 --> 25:46.870
get

25:46.870 --> 25:48.870
请求这个地址

25:48.870 --> 25:49.870
这个地址有吗

25:49.870 --> 25:50.870
肯定是没有

25:50.870 --> 25:51.870
然后看一下

25:51.870 --> 25:52.870
是不是能够

25:52.870 --> 25:54.870
正确地拦截到

25:55.870 --> 25:57.870
输出一下

25:59.870 --> 26:00.870
刷新

26:00.870 --> 26:01.870
你看 是不是拿到了

26:01.870 --> 26:03.870
拿到了这个响应结果

26:03.870 --> 26:04.870
这个响应

26:04.870 --> 26:05.870
请求有没有发出去

26:05.870 --> 26:06.870
根本就没有

26:06.870 --> 26:07.870
你看网络请求里边

26:07.870 --> 26:08.870
请求有没有发出去

26:08.870 --> 26:09.870
根本就没有发出

26:09.870 --> 26:10.870
Hello的一个请求

26:10.870 --> 26:12.870
因为为什么被拦截掉了

26:12.870 --> 26:13.870
你看这个图

26:13.870 --> 26:17.270
在这里

26:17.270 --> 26:19.270
请求根本就没有发出去

26:19.270 --> 26:20.270
你发出这个Hello的请求

26:20.270 --> 26:22.270
它被这个默合接式拦截掉了

26:22.270 --> 26:23.270
当然

26:23.270 --> 26:24.270
代码的顺序

26:24.270 --> 26:26.270
要先写默合接式

26:26.270 --> 26:27.270
先配置拦截规则

26:27.270 --> 26:28.270
然后再发请求的时候

26:28.270 --> 26:29.270
就会被拦截

26:30.270 --> 26:31.270
对吧

26:31.270 --> 26:32.270
它就给你

26:32.270 --> 26:34.270
响应这个模板里边的数据

26:34.270 --> 26:35.270
好 那如果说

26:35.270 --> 26:36.270
你是发动Pose

26:36.270 --> 26:37.270
当然也是一样的

26:37.270 --> 26:38.270
发动Pose的请求

26:38.270 --> 26:39.270
你看 也被拦截了

26:39.270 --> 26:40.270
那如果说

26:40.270 --> 26:41.270
你只想拦截Gate

26:41.270 --> 26:42.270
不想拦截Pose的

26:42.270 --> 26:43.270
那么你就这里就写一个

26:43.270 --> 26:44.270
第二个参数

26:44.270 --> 26:45.270
写个Gate

26:45.270 --> 26:47.270
表示我只拦截Gate的方法

26:48.270 --> 26:49.270
发动 那么你看Pose

26:49.270 --> 26:50.270
就真的发出去了

26:50.270 --> 26:52.270
发出去发现根本就没有

26:52.270 --> 26:53.270
那么用Gate的时候

26:53.270 --> 26:54.270
就会被拦截

26:54.270 --> 26:55.270
没意思吧

26:55.270 --> 26:56.270
就这么简单

26:56.270 --> 26:57.270
好 第三个参数呢

26:57.270 --> 26:58.270
可以写模板

26:58.270 --> 26:59.270
你可以写模板

26:59.270 --> 27:00.270
配置模板规则

27:00.270 --> 27:01.270
然后它就根据模板规则

27:01.270 --> 27:02.270
给你生成模里数据

27:02.270 --> 27:03.270
给你响应过来

27:03.270 --> 27:05.270
也可以写一个函数

27:06.270 --> 27:07.270
这个函数反回什么

27:07.270 --> 27:09.270
它就给你想一整

27:10.270 --> 27:11.270
反回个一二三

27:11.270 --> 27:13.270
它就给你想一二三

27:13.270 --> 27:14.270
没意思吧

27:14.270 --> 27:15.270
都可以

27:16.270 --> 27:17.270
好 这就是咱们的

27:17.270 --> 27:19.270
这个摩托街市的用法

27:19.270 --> 27:20.270
好了

27:20.270 --> 27:22.270
我们知道摩托街市用法之后

27:22.270 --> 27:24.270
我们接下来就开始来做事情了

27:24.270 --> 27:28.120
做一个练习

27:28.120 --> 27:29.120
这个练习呢

27:29.120 --> 27:31.120
是接着咱们之前的

27:31.120 --> 27:33.120
那个购物车来做

27:33.120 --> 27:35.120
打开购物车

27:36.120 --> 27:37.120
好 你看

27:37.120 --> 27:38.120
购物车里边

27:38.120 --> 27:40.120
我们之前是一些静态的内容

27:40.120 --> 27:42.120
哪个商品信息全是静态的内容

27:42.120 --> 27:44.120
而真实的情况是什么呢

27:44.120 --> 27:45.120
真实的情况是

27:45.120 --> 27:46.120
到了这个购物车页面

27:46.120 --> 27:49.120
到底我们用户选中了哪些商品

27:49.120 --> 27:51.120
就是加入到购物车了

27:51.120 --> 27:52.120
哪些商品

27:52.120 --> 27:54.120
我们需要从服务器去获取

27:54.120 --> 27:56.120
服务器可以给我们一个数据

27:56.120 --> 27:58.120
用户物权购物车里边有哪些东西

27:58.120 --> 27:59.120
每个东西的单价是什么

27:59.120 --> 28:00.120
数量是什么

28:00.120 --> 28:01.120
对吧

28:01.120 --> 28:02.120
它会给你一串数据

28:02.120 --> 28:03.120
因此呢

28:03.120 --> 28:05.120
我们这里肯定要用远程请求

28:05.120 --> 28:06.120
去请求服务器

28:06.120 --> 28:08.120
但是遗憾的是

28:09.120 --> 28:11.120
服务器那边没有开发

28:11.120 --> 28:12.120
正在开发当中

28:12.120 --> 28:14.120
拿不到这个数据

28:14.120 --> 28:16.120
因此我们这里就需要模拟

28:16.120 --> 28:17.120
所以说我们这一刻

28:17.120 --> 28:19.120
来实现这么一个效果

28:19.120 --> 28:20.120
于是呢

28:20.120 --> 28:21.120
我就接着上一节课来

28:21.120 --> 28:22.120
就是不是上一节课

28:22.120 --> 28:24.120
接课人类的节课来做

28:24.120 --> 28:25.120
接课人类的节课

28:25.120 --> 28:26.120
是不是全是假的

28:26.120 --> 28:27.120
全是假数据

28:27.120 --> 28:28.120
好 那么这里

28:28.120 --> 28:29.120
我们把它变成真实

28:29.120 --> 28:30.120
真实的数据

28:30.120 --> 28:31.120
要用户

28:31.120 --> 28:32.120
阿里克斯去请求

28:32.120 --> 28:33.120
所以说我们在页面上

28:33.120 --> 28:35.120
去引用两段介石

28:35.120 --> 28:36.120
这边

28:37.120 --> 28:38.120
一个是X尺

28:38.120 --> 28:39.120
我们要发出请求

28:39.120 --> 28:40.120
一个是lock

28:40.120 --> 28:41.120
因为后台服务器

28:41.120 --> 28:42.120
没有开发完成

28:42.120 --> 28:43.120
需要我们模拟

28:45.120 --> 28:46.120
把这两个东西加进来

28:47.120 --> 28:49.120
接下来我们来写它的介石

28:49.120 --> 28:50.120
到介石里面去

28:52.430 --> 28:53.430
正常的情况

28:53.430 --> 28:54.430
应该是什么呢

28:54.430 --> 28:55.430
应该是我这里

28:55.430 --> 28:56.430
因为我们做页面

28:56.430 --> 28:58.430
我之前给大家反复说

28:58.430 --> 28:59.430
无非就是两个步骤

28:59.430 --> 29:01.430
一个步骤是初始化

29:01.430 --> 29:03.430
一个步骤是

29:04.430 --> 29:05.430
设置用户交户

29:05.430 --> 29:06.430
你看

29:06.430 --> 29:07.430
因为我们这个页面

29:07.430 --> 29:08.430
之前是没有初始化的

29:08.430 --> 29:10.430
初始化没有什么事情可做

29:10.430 --> 29:11.430
因为是静态的

29:11.430 --> 29:13.430
我们只需要注射各种事件

29:13.430 --> 29:14.430
完成交户就完成了

29:14.430 --> 29:16.430
那么现在有初始化了

29:16.430 --> 29:17.430
在注意开始的时候

29:17.430 --> 29:18.430
就你不动

29:18.430 --> 29:19.430
进入这个页面的时候

29:19.430 --> 29:20.430
要干嘛呢

29:20.430 --> 29:22.430
它其实是没有这些东西的

29:23.430 --> 29:25.430
我就随便找一个吧

29:26.430 --> 29:27.430
这里

29:29.430 --> 29:30.430
有几个item

29:30.430 --> 29:31.430
对吧

29:31.430 --> 29:32.430
这item都是假的

29:33.430 --> 29:35.430
它实际上是一个都没有的

29:35.430 --> 29:37.430
我就把你注射掉一个

29:37.430 --> 29:39.430
一开始实际上是这种情况

29:39.430 --> 29:40.430
一个都没有

29:40.430 --> 29:41.430
那么这个数据哪来

29:41.430 --> 29:43.430
要从远程请求服务器

29:43.430 --> 29:45.430
然后拿到一个数据

29:45.430 --> 29:47.430
生成这些item给它加进去

29:47.430 --> 29:48.430
所以说这里边

29:48.430 --> 29:50.430
我们就做一个事情

29:50.430 --> 29:51.430
就是我们要干嘛

29:51.430 --> 29:53.430
我们要远程去请求

29:53.430 --> 29:54.430
我们的服务器

29:54.430 --> 29:56.430
那么比方说服务器的路径是这个

29:56.430 --> 29:57.430
假设

29:57.430 --> 29:58.430
API

29:58.430 --> 29:59.430
这里我们要看

29:59.430 --> 30:00.430
接客文档

30:00.430 --> 30:01.430
到底要去请求哪个地址

30:01.430 --> 30:02.430
我们要看接客文档

30:02.430 --> 30:06.960
接客文档里面说

30:06.960 --> 30:10.780
请求的路径是这个

30:10.780 --> 30:12.780
请求的路径是这个

30:12.780 --> 30:13.780
然后呢

30:13.780 --> 30:15.780
就前面我们就省略了

30:15.780 --> 30:17.780
然后请求的方法是get

30:17.780 --> 30:18.780
那么就get方法

30:18.780 --> 30:19.780
然后服务器

30:19.780 --> 30:20.780
会给我们返回一个

30:20.780 --> 30:21.780
就是数据

30:21.780 --> 30:22.780
这个数据里面

30:22.780 --> 30:23.780
对象里面有code

30:23.780 --> 30:24.780
表示没有错误

30:24.780 --> 30:25.780
message表示错误消息

30:25.780 --> 30:26.780
没有消息

30:26.780 --> 30:27.780
就表示没有错误

30:27.780 --> 30:28.780
然后data是主体数据

30:28.780 --> 30:29.780
它是一个数据

30:29.780 --> 30:31.780
数据里面有很多的对象

30:31.780 --> 30:32.780
每个对象里面有商品的名称

30:32.780 --> 30:33.780
商品的UI

30:33.780 --> 30:35.780
图片的链接地址

30:35.780 --> 30:36.780
商品的单价

30:36.780 --> 30:37.780
商品的数量

30:38.780 --> 30:39.780
对吧

30:39.780 --> 30:41.780
服务器给我们返回这么一个结果

30:41.780 --> 30:42.780
这是接客文档给我们说明的

30:42.780 --> 30:43.780
但是呢

30:43.780 --> 30:45.780
由于我们目前

30:45.780 --> 30:47.780
根本就请求不到

30:47.780 --> 30:48.780
因为服务器那边

30:48.780 --> 30:49.780
根本还没有开发完成

30:49.780 --> 30:50.780
对吧

30:50.780 --> 30:51.780
我们只能把代码写出来

30:51.780 --> 30:52.780
但是这个代码没法运行

30:52.780 --> 30:54.780
比方说我们写的话怎么写

30:54.780 --> 30:55.780
请求这个地址

30:55.780 --> 30:57.780
然后z

30:57.780 --> 30:59.780
是不是要达到一个响应结果

30:59.780 --> 31:01.780
响应结果里面

31:01.780 --> 31:03.780
我们就可以用data

31:03.780 --> 31:05.780
对吧

31:05.780 --> 31:06.780
是不是可以达到这个

31:06.780 --> 31:07.780
这是我们的响应体

31:07.780 --> 31:08.780
响应体里面的一个data属性

31:08.780 --> 31:10.780
就是拿到我们的

31:10.780 --> 31:11.780
就是购物车的数据

31:11.780 --> 31:12.780
对吧

31:12.780 --> 31:13.780
我们就用products

31:13.780 --> 31:14.780
定一个边量

31:14.780 --> 31:18.480
products

31:18.480 --> 31:21.480
获取到商品数据

31:21.480 --> 31:22.480
好

31:22.480 --> 31:23.480
然后呢

31:23.480 --> 31:24.480
我们要根据这个商品数据

31:24.480 --> 31:26.480
根据products

31:26.480 --> 31:28.480
我们先把逻辑理顺

31:28.480 --> 31:31.480
生成元素

31:31.480 --> 31:33.480
加入到页面中

31:33.480 --> 31:34.480
对吧

31:34.480 --> 31:35.480
是不是要做这么一件事

31:35.480 --> 31:36.480
我们要根据这个数组

31:36.480 --> 31:38.480
它可以返回products数组

31:38.480 --> 31:39.480
然后呢

31:39.480 --> 31:40.480
生成一系列的购物车

31:40.480 --> 31:43.480
然后给它加到这个区域里面去

31:43.480 --> 31:44.480
然后加入完了之后

31:44.480 --> 31:47.480
我们是不是才能去注册各种时间

31:47.480 --> 31:48.480
把这些时间

31:48.480 --> 31:49.480
因为数据元素没有注册时间

31:49.480 --> 31:50.480
有什么用呢

31:50.480 --> 31:51.480
所以我们这个时候呢

31:51.480 --> 31:52.480
加入完了之后

31:52.480 --> 31:55.480
我们才去注册这些时间

31:55.480 --> 31:57.480
是不是这么一个逻辑

31:57.480 --> 31:58.480
对吧

31:58.480 --> 31:59.480
好

31:59.480 --> 32:00.480
那么这个地方呢

32:00.480 --> 32:01.480
我们先暂时不着急

32:01.480 --> 32:02.480
这个地方

32:02.480 --> 32:03.480
现在一个问题就出现了

32:03.480 --> 32:04.480
我这个products

32:04.480 --> 32:05.480
根本就打不到

32:05.480 --> 32:06.480
根本就没东西

32:06.480 --> 32:07.480
我们来看一下

32:07.480 --> 32:08.480
有东西吗

32:08.480 --> 32:09.480
根本就没有东西

32:09.480 --> 32:10.480
到404

32:10.480 --> 32:11.480
根本就没有这个地址

32:11.480 --> 32:12.480
因为服务器那边

32:12.480 --> 32:13.480
还没有开发完成

32:13.480 --> 32:14.480
所以这个时候干嘛

32:14.480 --> 32:15.480
这边要模拟

32:15.480 --> 32:16.480
于是呢

32:16.480 --> 32:17.480
我们可以再写个解释

32:17.480 --> 32:18.480
一般来说

32:18.480 --> 32:19.480
模拟解释呢

32:19.480 --> 32:24.480
我们会单独开一个moke的解释

32:24.480 --> 32:25.480
好

32:25.480 --> 32:26.480
然后呢

32:26.480 --> 32:27.480
我们在页面上去

32:27.480 --> 32:28.480
先引用moke解释

32:28.480 --> 32:37.420
然后再引用index解释

32:37.420 --> 32:40.420
srcmoke解释

32:40.420 --> 32:42.420
先引用我们的模拟数据

32:42.420 --> 32:43.420
在这里

32:43.420 --> 32:44.420
去创建模拟规则

32:44.420 --> 32:46.420
比方我们这里简单的写下

32:46.420 --> 32:51.420
moke.moke.moke

32:51.420 --> 32:52.420
拦戒什么地址

32:52.420 --> 32:54.420
拦戒API cart

32:54.420 --> 32:55.420
对吧

32:55.420 --> 32:56.420
然后什么琴球呢

32:56.420 --> 32:57.420
戒指琴球

32:57.420 --> 32:58.420
我给你返回什么呢

32:58.420 --> 33:01.420
返回一个空队箱吧

33:01.420 --> 33:02.420
返回空队箱里边

33:02.420 --> 33:03.420
一个data属性

33:03.420 --> 33:04.420
买123

33:04.420 --> 33:05.420
是不是拿到123了

33:05.420 --> 33:06.420
对吧

33:06.420 --> 33:07.420
这边就是拿到

33:07.420 --> 33:08.420
这个模拟数据了

33:08.420 --> 33:09.420
好

33:09.420 --> 33:11.420
同学们暂停视频

33:11.420 --> 33:13.420
会一下这个模拟数据的作用

33:13.420 --> 33:14.420
然后呢

33:14.420 --> 33:16.420
把代码写成这种格式

33:16.420 --> 33:18.420
好了没

33:18.420 --> 33:19.420
好

33:19.420 --> 33:20.420
那么接下来

33:20.420 --> 33:22.420
我们就去搞定这个模拟数据

33:22.420 --> 33:24.420
模拟数据要怎么去写这个模板

33:24.420 --> 33:25.420
这是个模拟数据的模板

33:25.420 --> 33:26.420
对吧

33:26.420 --> 33:27.420
应该去参业

33:27.420 --> 33:28.420
一个是当然

33:28.420 --> 33:29.420
moke解释的官方文档

33:29.420 --> 33:30.420
你要参业

33:30.420 --> 33:31.420
还要参业什么呢

33:31.420 --> 33:32.420
还要参业就是咱们的

33:32.420 --> 33:34.420
接口文档

33:34.420 --> 33:35.420
接口文档里边就告诉你

33:35.420 --> 33:37.420
它的返回的数据的规则是什么

33:37.420 --> 33:39.420
你看它返回的是一个对象

33:39.420 --> 33:40.420
对象里边有个什么

33:40.420 --> 33:41.420
扣的属性

33:41.420 --> 33:42.420
那就要写

33:42.420 --> 33:43.420
扣的

33:43.420 --> 33:44.420
有没有错误

33:44.420 --> 33:46.420
那我就假设没有错误了

33:46.420 --> 33:47.420
就直接写

33:47.420 --> 33:48.420
对吧你如果说你直接写这么一个属性

33:48.420 --> 33:49.420
没有写规则的话

33:49.420 --> 33:50.420
那你写的是啥

33:50.420 --> 33:51.420
那就生成啥

33:51.420 --> 33:52.420
好没这些是什么呢

33:52.420 --> 33:54.420
是一个风之不串

33:54.420 --> 33:55.420
还有什么呢

33:55.420 --> 33:56.420
还有data是一个什么呢

33:56.420 --> 33:57.420
是一个数组

33:57.420 --> 33:59.420
诶数组有几项

33:59.420 --> 34:00.420
是不是可以随机生成

34:00.420 --> 34:01.420
咱们再随机生成

34:01.420 --> 34:03.420
数组有几项呢

34:03.420 --> 34:04.420
比方说有10到

34:04.420 --> 34:06.420
5到

34:06.420 --> 34:07.420
20项

34:07.420 --> 34:08.420
假设啊

34:08.420 --> 34:09.420
这是数组

34:09.420 --> 34:11.420
后边写上一个数组

34:11.420 --> 34:16.380
那每一个数组里边写的是啥呢

34:16.380 --> 34:20.840
它就不能给我换个函嘛

34:20.840 --> 34:21.840
每一个数组里边

34:21.840 --> 34:22.840
每一项是个啥呢

34:22.840 --> 34:23.840
是一个对象

34:23.840 --> 34:26.840
你看我现在即便是这样的写

34:26.840 --> 34:28.840
这样写的之后我们来看一下页面

34:28.840 --> 34:29.840
得到的是不是

34:29.840 --> 34:31.840
就数组的长度是随机的

34:31.840 --> 34:33.840
5到20之间

34:33.840 --> 34:34.840
然后呢

34:34.840 --> 34:35.840
每一项是一个对象

34:35.840 --> 34:36.840
有些同学说

34:36.840 --> 34:37.840
扣的属性跑哪去了

34:37.840 --> 34:42.240
每次就属性跑哪去了

34:42.240 --> 34:44.240
我只获取了它的data

34:44.240 --> 34:46.240
如果说你不获取它的data的话

34:46.240 --> 34:47.240
就是扣的message

34:47.240 --> 34:51.900
好 那么就现在就搞定

34:51.900 --> 34:53.900
每一个对象里边有啥

34:53.900 --> 34:54.900
每个对象里边有啥呢

34:54.900 --> 34:56.900
我们就还是参与文档了

34:56.900 --> 34:59.900
每个对象里边有个project name

34:59.900 --> 35:00.900
对吧

35:00.900 --> 35:01.900
产品的名字

35:01.900 --> 35:03.900
产品的名字是什么呢

35:03.900 --> 35:05.900
随机生成一个名字

35:05.900 --> 35:08.900
好 我怎么来随机生成一个名字呢

35:08.900 --> 35:11.900
查阅 墨河结石文档

35:11.900 --> 35:13.900
墨河结石

35:13.900 --> 35:15.900
你看随机生成里边

35:15.900 --> 35:17.900
有没有什么随机生成一个文本啊

35:17.900 --> 35:18.900
之类的东西

35:18.900 --> 35:19.900
text

35:19.900 --> 35:21.900
这个玩意是不是可以随机生成一个文本

35:21.900 --> 35:23.900
诶 随机生成一个段落

35:23.900 --> 35:25.900
随机生成一个

35:25.900 --> 35:26.900
一句话

35:26.900 --> 35:29.900
随机生成就是中文的一句话

35:29.900 --> 35:31.900
对吧 都可以

35:31.900 --> 35:33.900
那我就生成中文的一句话吧

35:33.900 --> 35:34.900
see sentence

35:34.900 --> 35:36.900
我之前用的是英文的

35:36.900 --> 35:38.900
好 我们就是要用站位符

35:38.900 --> 35:39.900
sentence

35:39.900 --> 35:40.900
这里还可以传参数

35:40.900 --> 35:42.900
长度会多少啊

35:42.900 --> 35:45.900
最小长度和最大长度啊

35:45.900 --> 35:47.900
对吧 都可以设置的

35:47.900 --> 35:52.550
好 咱们来看一下这边

35:52.550 --> 35:54.550
是不是随机生成这么一句话

35:54.550 --> 35:55.550
对吧

35:55.550 --> 35:56.550
好

35:56.550 --> 35:58.550
那不就这样吧

35:58.550 --> 35:59.550
接下来我们继续啊

35:59.550 --> 36:00.550
下一个属性

36:00.550 --> 36:01.550
project URL

36:01.550 --> 36:04.550
这是个商品的图片地址

36:04.550 --> 36:05.550
对吧 图片地址

36:05.550 --> 36:06.550
我们要生成一个什么

36:06.550 --> 36:08.550
生成一个图片的路径

36:08.550 --> 36:09.550
好 生成图片路径

36:09.550 --> 36:11.550
我们之前是不是演示过的

36:11.550 --> 36:12.550
那么又来查文档

36:12.550 --> 36:14.550
像我这些都经常查文档的

36:14.550 --> 36:15.550
讲了就忘了

36:15.550 --> 36:16.550
图片

36:16.550 --> 36:18.550
路径片

36:18.550 --> 36:20.550
使寸

36:20.550 --> 36:21.550
我们用哪一个呢

36:21.550 --> 36:23.550
就用这个吧

36:23.550 --> 36:31.240
size的话我们用一个

36:31.240 --> 36:33.240
180×150吧

36:34.240 --> 36:35.240
背景颜色

36:35.240 --> 36:40.560
前景颜色

36:40.560 --> 36:42.560
文本的话随便写个

36:42.560 --> 36:43.560
就测

36:43.560 --> 36:45.560
test image

36:45.560 --> 36:49.000
好 那么我们来看一下啊

36:49.000 --> 36:50.000
这边

36:50.000 --> 36:52.310
生成的对象里边

36:52.310 --> 36:53.310
是不是有多那个属性的

36:53.310 --> 36:55.310
project URL

36:55.310 --> 36:56.310
我这就写错了

36:56.310 --> 36:58.310
应该用站位符啊

36:58.310 --> 37:02.610
好 你看

37:02.610 --> 37:04.610
属于有这么一个 URL 地址

37:04.610 --> 37:05.610
对吧 你去访问一下

37:05.610 --> 37:08.610
你就可以拿到这个测试图片

37:08.610 --> 37:11.610
好 接下来我们继续写

37:11.610 --> 37:13.610
下面 unit price

37:13.610 --> 37:14.610
商品单价

37:14.610 --> 37:15.610
商品单价

37:15.610 --> 37:16.610
是不是要生成一个

37:16.610 --> 37:17.610
随机的数字

37:17.610 --> 37:20.610
那里就写规则的

37:20.610 --> 37:22.610
那么你可以参考规则

37:22.610 --> 37:23.610
哪里呢

37:23.610 --> 37:25.610
生成一个

37:25.610 --> 37:28.940
语法规范

37:28.940 --> 37:29.940
数字

37:29.940 --> 37:31.940
那么后面只要你写个数字就行了

37:31.940 --> 37:32.940
对吧

37:32.940 --> 37:33.940
然后给他一个范围

37:33.940 --> 37:35.940
好 后面指上

37:35.940 --> 37:36.940
只需要写个数字

37:36.940 --> 37:37.940
随便写个数字吧

37:37.940 --> 37:38.940
然后给他一个范围

37:38.940 --> 37:39.940
最小值到最大值

37:39.940 --> 37:40.940
最小值到最大值

37:40.940 --> 37:43.940
比方说最小的单价呢是

37:43.940 --> 37:45.940
十块钱

37:45.940 --> 37:46.940
然后最大值

37:46.940 --> 37:47.940
或者是

37:47.940 --> 37:48.940
一块钱

37:48.940 --> 37:51.940
最大的单价呢是

37:51.940 --> 37:52.940
五百

37:52.940 --> 37:53.940
比方说吧

37:53.940 --> 37:54.940
保留小数点

37:54.940 --> 37:55.940
后面两位

37:55.940 --> 37:56.940
好 保存

37:56.940 --> 37:58.940
你看一下

37:58.940 --> 37:59.940
不好意思

37:59.940 --> 38:00.940
刚才我电脑卡住了

38:00.940 --> 38:02.940
然后我这里重启了一下

38:02.940 --> 38:04.940
好 那么急着来

38:04.940 --> 38:05.940
刚才我们把这个

38:05.940 --> 38:07.940
魔力数据是不是生成出来了

38:07.940 --> 38:08.940
你看现在有了一个

38:08.940 --> 38:09.940
图片的路径呢

38:09.940 --> 38:10.940
对不对

38:10.940 --> 38:11.940
还有一个就是单价了

38:11.940 --> 38:12.940
也有了对不对

38:12.940 --> 38:13.940
好 现在我们还看一下

38:13.940 --> 38:17.260
还有没有别的呢

38:17.260 --> 38:18.260
接下来还有个靠着

38:18.260 --> 38:19.260
购物数量

38:19.260 --> 38:20.260
那这个简单

38:20.260 --> 38:21.260
生成一个随机的数字就完事了

38:21.260 --> 38:22.260
对吧

38:22.260 --> 38:23.260
到底多少个呢

38:23.260 --> 38:24.260
最小为一

38:24.260 --> 38:25.260
最大为十个

38:25.260 --> 38:27.260
你随机生成一个

38:27.260 --> 38:28.260
那么后面去随便写个啥

38:28.260 --> 38:29.260
都行了

38:29.260 --> 38:30.260
确定内容的

38:30.260 --> 38:32.260
官方文章里面这个游戏

38:32.260 --> 38:33.260
好 保存

38:33.260 --> 38:34.260
我们再看一下

38:34.260 --> 38:36.260
生成出来的cult

38:36.260 --> 38:38.260
cult数据在这

38:38.260 --> 38:39.260
对吧 是不是有了

38:39.260 --> 38:40.260
好 那么这个数据

38:40.260 --> 38:41.260
是不是魔力出来了

38:41.260 --> 38:43.260
那接下来事情就很简单了

38:43.260 --> 38:44.260
我们要做啥呀

38:44.260 --> 38:47.260
我们就是拿到这个数组

38:47.260 --> 38:49.260
来看一下

38:49.260 --> 38:50.260
我们要拿到这个数组

38:50.260 --> 38:52.260
然后把数组的每一项

38:52.260 --> 38:53.260
这个事就是你们以后

38:53.260 --> 38:54.260
经常来做

38:54.260 --> 38:55.260
把这个数组的每一项

38:55.260 --> 38:56.260
是个对象 对吧

38:56.260 --> 38:57.260
把每个对象变成啥

38:57.260 --> 38:58.260
变成这么一个东西

38:59.260 --> 39:04.700
把每个对象变成

39:04.700 --> 39:05.700
这么一个玩意

39:05.700 --> 39:06.700
就完事了

39:07.700 --> 39:08.700
把每个对象变成这么一个

39:08.700 --> 39:09.700
制服串

39:09.700 --> 39:10.700
然后给它夹到这个

39:10.700 --> 39:11.700
垃圾里面去

39:11.700 --> 39:12.700
就完事了

39:12.700 --> 39:14.700
好像能写一个代码

39:18.700 --> 39:20.700
把里面的每一个对象

39:22.700 --> 39:23.700
变成什么了

39:23.700 --> 39:25.700
变成这么一个制服串

39:26.700 --> 39:27.700
对吧

39:27.700 --> 39:28.700
那么是不是形成

39:28.700 --> 39:29.700
一个制服串的数组

39:29.700 --> 39:30.700
把这么一个

39:30.700 --> 39:31.700
每个对象变成这么一个制服串

39:31.700 --> 39:33.700
每个对象变成这么一个制服串

39:33.700 --> 39:34.700
然后把这个制服串拳

39:34.700 --> 39:35.700
把这个制服串的数组

39:35.700 --> 39:37.700
用胶引连成一个

39:37.700 --> 39:39.700
很大的一个制服串

39:39.700 --> 39:40.700
对吧

39:40.700 --> 39:42.700
是不是拿到一个AT秒的

39:44.700 --> 39:45.700
然后我们输出一下

39:45.700 --> 39:46.700
AT秒

39:47.700 --> 39:48.700
是不是拿到一个

39:48.700 --> 39:49.700
很长的AT秒

39:50.700 --> 39:51.700
那么接下来

39:51.700 --> 39:52.700
就是把这个制服串里面

39:52.700 --> 39:53.700
有幸

39:53.700 --> 39:54.700
然后我们把这个AT秒

39:54.700 --> 39:55.700
干嘛呢

39:55.700 --> 39:56.700
放到哪儿

39:56.700 --> 39:58.700
放到这个Nest里面去

39:58.700 --> 39:59.700
Nest

40:00.700 --> 40:01.700
放到这里面去

40:01.700 --> 40:02.700
对吧

40:02.700 --> 40:03.700
给它设置AT秒

40:03.700 --> 40:04.700
结块里面怎么去

40:04.700 --> 40:05.700
设置AT秒呢

40:05.700 --> 40:06.700
又可以查文档

40:06.700 --> 40:07.700
一查出来就是这个

40:07.700 --> 40:08.700
查什么

40:08.700 --> 40:09.700
查属性处理的一块

40:09.700 --> 40:11.700
把AT秒设置进去

40:12.700 --> 40:13.700
使用调用AT秒的方法

40:13.700 --> 40:15.700
然后把变相的值

40:15.700 --> 40:16.700
放进去

40:16.700 --> 40:17.700
好好保存

40:18.700 --> 40:19.700
你看一下

40:20.700 --> 40:21.700
不是出来了吗

40:21.700 --> 40:22.700
但目前是静态内容

40:22.700 --> 40:23.700
对吧

40:23.700 --> 40:24.700
我们把有些地方

40:24.700 --> 40:25.700
把它改成正确的

40:25.700 --> 40:27.700
首先是这个图片路径

40:27.700 --> 40:28.700
图片路径的话

40:28.700 --> 40:29.700
我们是不是要

40:29.700 --> 40:30.700
应该读啊

40:30.700 --> 40:31.700
读哪一个

40:32.700 --> 40:33.700
打开

40:33.700 --> 40:34.700
图片路径

40:34.700 --> 40:35.700
我们是不是应该读

40:35.700 --> 40:37.700
它的Product

40:37.700 --> 40:38.700
UI

40:38.700 --> 40:40.700
然后这里是

40:40.700 --> 40:41.700
商品的标题

40:41.700 --> 40:42.700
是不是应该读

40:42.700 --> 40:43.700
Product

40:45.700 --> 40:47.700
然后这里是单价

40:47.700 --> 40:48.700
单价的话

40:48.700 --> 40:49.700
这里是不是应该读

40:52.700 --> 40:53.700
叫做

40:54.700 --> 40:57.700
UnitPrice

40:57.700 --> 40:58.700
对吧

40:58.700 --> 40:59.700
然后把它变成

40:59.700 --> 41:00.700
ToFist

41:01.700 --> 41:02.700
两个

41:02.700 --> 41:03.700
两位小数

41:04.700 --> 41:05.700
好

41:05.700 --> 41:07.700
然后这边是

41:08.700 --> 41:09.700
有几个

41:09.700 --> 41:10.700
对吧

41:10.700 --> 41:11.700
目前有几个

41:12.700 --> 41:13.700
然后这边是总价

41:13.700 --> 41:14.700
总价的话

41:14.700 --> 41:15.700
说应该这样读

41:16.700 --> 41:17.700
UnitPrice

41:17.700 --> 41:18.700
成意思吗

41:18.700 --> 41:19.700
Cort

41:20.700 --> 41:21.700
单价成数量

41:21.700 --> 41:22.700
然后不要忘记

41:22.700 --> 41:23.700
成出来过后

41:23.700 --> 41:24.700
单价成

41:24.700 --> 41:25.700
使用两位小数

41:25.700 --> 41:26.700
ToFist

41:28.700 --> 41:29.700
就写完了

41:30.700 --> 41:31.700
看一下页面

41:32.700 --> 41:33.700
把上面前面的书

41:33.700 --> 41:34.700
删掉

41:37.010 --> 41:38.010
就出来了

41:38.010 --> 41:39.010
它的图片

41:39.010 --> 41:40.010
图片尺寸

41:40.010 --> 41:41.010
好像

41:41.010 --> 41:42.010
不是很好

41:42.010 --> 41:43.010
图片尺寸

41:43.010 --> 41:44.010
在样式里面

41:44.010 --> 41:45.010
好像没有去控制

41:45.010 --> 41:46.010
那是

41:46.010 --> 41:47.010
里面去控制一下

41:47.010 --> 41:48.010
在样式里面

41:48.010 --> 41:49.010
去控制一下

41:49.010 --> 41:50.010
图片尺寸

41:50.010 --> 41:51.010
我就写一下吧

41:51.010 --> 41:52.010
写下一个

41:52.010 --> 41:53.010
图片尺寸

41:53.010 --> 41:54.010
之前

41:54.010 --> 41:56.830
我们就直接写一下吧

41:58.830 --> 41:59.830
Nest下面的image

42:00.830 --> 42:01.830
随便找个地方写

42:01.830 --> 42:02.830
随便找个地方写

42:02.830 --> 42:03.830
Nest

42:04.830 --> 42:07.210
下面的image

42:07.210 --> 42:08.210
来个宽度

42:08.210 --> 42:09.210
100个相处

42:11.210 --> 42:12.210
高度

42:14.210 --> 42:15.210
80个相处

42:16.210 --> 42:17.210
就写完了

42:18.210 --> 42:19.210
OK 那么这个

42:19.210 --> 42:20.210
效果就做出来了

42:20.210 --> 42:21.210
将来有一天

42:21.210 --> 42:23.210
后端开发完成之后

42:23.210 --> 42:24.210
李浩做的事情

42:24.210 --> 42:25.210
非常简单

42:27.210 --> 42:28.210
把这个玩意儿一注释

42:29.210 --> 42:30.210
就完了

42:30.210 --> 42:31.210
那么它就会真正

42:31.210 --> 42:32.210
就没有魔力

42:32.210 --> 42:33.210
就没有拦截了

42:33.210 --> 42:34.210
又会请求真实的接口

42:34.210 --> 42:35.210
拿到真实的数据

42:35.210 --> 42:37.210
由于真实的数据的结构

42:37.210 --> 42:38.210
跟我们的魔力数据的结构

42:38.210 --> 42:40.210
都是按照API稳当

42:40.210 --> 42:41.210
出来的

42:41.210 --> 42:42.210
所以说

42:42.210 --> 42:43.210
它们的结构是一样的

42:43.210 --> 42:44.210
只是直不一样

42:44.210 --> 42:45.210
数据里面长度不一样

42:45.210 --> 42:46.210
直不一样

42:46.210 --> 42:47.210
那些无所谓

42:48.210 --> 42:49.210
好 那么这就是

42:49.210 --> 42:51.210
咱们这个魔力数据的作用

42:51.210 --> 42:52.210
以及它的用法

42:52.210 --> 42:53.210
好 同学们下来

42:53.210 --> 42:54.210
把这个事情

42:54.210 --> 42:55.210
给它完成

42:55.210 --> 42:56.210
把个作业完成

42:56.210 --> 42:57.210
点

42:57.210 --> 42:58.210
不要听得简单

42:58.210 --> 42:59.210
自己做一遍

42:59.210 --> 43:00.210
有这么一个体会

43:00.210 --> 43:01.210
就OK了

43:01.210 --> 43:02.210
再重申一次

43:02.210 --> 43:03.210
魔力数据

43:03.210 --> 43:04.210
你们以后工作中

43:04.210 --> 43:05.210
不一定会用到

43:06.210 --> 43:07.210
魔力这个事

43:07.210 --> 43:08.210
你肯定会遇到

43:08.210 --> 43:09.210
因为你们跟后端

43:09.210 --> 43:10.210
同时开发

43:10.210 --> 43:11.210
就会出现

43:11.210 --> 43:12.210
访问不了

43:13.210 --> 43:15.210
真实服务器的问题

43:16.210 --> 43:17.210
那么这个时候

43:17.210 --> 43:18.210
一定会有魔力

43:18.210 --> 43:19.210
但是魔力不一定

43:19.210 --> 43:20.210
由你们来做

43:20.210 --> 43:21.210
有可能接口平台

43:21.210 --> 43:22.210
就直接给人家做了

43:22.210 --> 43:23.210
这是这么一个情况

43:23.210 --> 43:24.210
给大家说一下

43:24.210 --> 43:25.210
如果接口平台没有做

43:25.210 --> 43:26.210
就直接出去

43:26.210 --> 43:27.210
那是什么口气

