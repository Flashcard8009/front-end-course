WEBVTT

00:00.370 --> 00:03.770
这节课咱们来做这么一个小的效果

00:03.770 --> 00:05.570
使用来看一下这个效果

00:05.570 --> 00:08.970
这个效果其实就是一个非常简单的功能

00:08.970 --> 00:10.770
咱们有试见商品

00:10.770 --> 00:13.370
那么这些商品哪些要上架 销售

00:13.370 --> 00:15.570
哪些是目前下架的

00:15.570 --> 00:18.170
如果说你要上架的话你把勾选上

00:18.170 --> 00:22.970
那么下面就会显示出目前正在销售中的这些商品

00:22.970 --> 00:26.570
然后这里每一个商品名字还可以改它的名字

00:26.570 --> 00:28.370
比方说我们这里改小米

00:28.770 --> 00:30.370
这里改成华为

00:31.370 --> 00:32.970
然后我们把这个iPhone下架

00:33.570 --> 00:35.370
上面就是这么一个效果

00:35.370 --> 00:37.370
这个效果特别简单

00:37.770 --> 00:40.970
相信大家用5u2也可以轻松的把它做出来

00:41.370 --> 00:43.770
但是我们这里要用5u3来做

00:44.170 --> 00:46.170
如果说你没有这节课的支持

00:46.170 --> 00:49.570
你用5u3去做的时候会遇到一些问题

00:49.970 --> 00:52.370
主要的问题集中在5u3

00:52.370 --> 00:55.970
它对那个模板里边是有一些改动的

00:55.970 --> 00:58.170
而这些改动是不兼容的

00:58.570 --> 01:00.670
所以说你按照过去5u2的写法

01:00.670 --> 01:02.670
可能会遇到很多的模板里边的问题

01:02.670 --> 01:05.770
所以说我们这节课通过去完成这个效果

01:05.770 --> 01:08.770
就把模板里边的变化给大家讲清楚

01:09.270 --> 01:09.970
好 来吧

01:10.870 --> 01:12.770
我们先不着急去谈什么理论

01:12.770 --> 01:13.870
我们先直接来做

01:15.070 --> 01:17.670
这个效果里边我们看到有一个地方

01:17.670 --> 01:20.170
就这个地方有一个复选框

01:20.170 --> 01:22.370
同时复选框后边有一个纹奔框

01:22.370 --> 01:23.670
纹奔框可以改内容

01:23.770 --> 01:28.270
那么我们这里首先考虑把这个玩意做成一个组件

01:29.070 --> 01:30.870
这个组件带一个复选框

01:30.870 --> 01:32.870
然后带一个这么一个东西

01:32.870 --> 01:33.670
一个纹奔框

01:34.370 --> 01:36.370
好 那么做这个组件之前

01:36.370 --> 01:37.670
我们首先要想清楚

01:37.670 --> 01:39.670
首先把一个组件建起来

01:39.670 --> 01:41.270
这是我们的一个空的工程

01:41.270 --> 01:42.470
我们点击右键打开

01:43.970 --> 01:45.070
把空的工程

01:47.370 --> 01:48.070
NPM

01:49.670 --> 01:53.560
NPM装备跑起来

01:54.160 --> 01:55.160
看一下 啥都没有

01:55.160 --> 01:55.560
对不对

01:55.560 --> 01:56.760
我们来看一下这个工程

01:56.960 --> 02:01.060
里面就一个媒典节是一个入口文件

02:01.060 --> 02:01.860
入口模块

02:01.860 --> 02:03.560
然后跟组件是这个

02:03.960 --> 02:04.960
APP啥都没有

02:04.960 --> 02:05.360
对不对

02:05.360 --> 02:07.160
那么这里有一些数据

02:07.160 --> 02:08.560
就是目前的商品数据

02:09.760 --> 02:10.860
每个商品有ID

02:10.860 --> 02:13.260
有目前是否正在销售中

02:13.260 --> 02:14.860
商品的名称

02:14.860 --> 02:16.060
对吧 有这么一个数据

02:16.060 --> 02:17.060
我们之后会用的

02:17.060 --> 02:18.360
现在也用不到

02:18.560 --> 02:21.160
那么这里我们首先考虑的是做一个组件出来

02:21.460 --> 02:23.060
今天文件讲compolance

02:24.260 --> 02:24.960
新鲜一个

02:25.060 --> 02:28.260
取个名字叫做checkedit

02:29.060 --> 02:29.960
啥意思呢

02:29.960 --> 02:31.060
就是说它既能够

02:31.060 --> 02:32.560
它既像一个互选框

02:32.560 --> 02:33.260
这个box

02:34.060 --> 02:35.360
同时又能编辑

02:35.360 --> 02:36.360
是个editor

02:36.360 --> 02:36.860
对吧

02:36.860 --> 02:38.160
那么就做这么一个组件

02:40.670 --> 02:41.370
写到这

02:41.970 --> 02:43.270
那么我们做组件的时候

02:43.270 --> 02:44.270
首先想的是啥

02:45.470 --> 02:47.170
首先想的是这个组件

02:47.170 --> 02:49.170
注意中别人要用的时候

02:49.170 --> 02:50.470
应该是怎么个用法

02:50.970 --> 02:51.470
对吧

02:51.470 --> 02:52.570
是不是应该这样子想

02:52.970 --> 02:55.070
那么我们观察一下这个组件

02:55.570 --> 02:57.170
这个组件有两个东西

02:57.170 --> 02:58.270
有一个互选框

02:58.270 --> 02:58.870
对吧

02:58.870 --> 03:00.770
有一个文本框

03:01.070 --> 03:03.870
那么无论是互选框还是文本框

03:04.570 --> 03:05.870
是不是在组件内部的

03:05.870 --> 03:07.570
那么比方说我们用一个尾代码

03:08.070 --> 03:09.470
这里边就是有一个

03:09.470 --> 03:10.770
至少有这么一个东西

03:10.770 --> 03:11.570
切个box

03:13.170 --> 03:14.770
然后有一个文本框

03:15.070 --> 03:15.570
text

03:15.570 --> 03:16.070
对吧

03:16.370 --> 03:17.170
简单说一下

03:17.570 --> 03:19.370
那么如果说这种情况的话

03:19.570 --> 03:21.970
这两个东西是不是用户都可以编辑的

03:22.370 --> 03:23.470
那么用户都可以编辑

03:23.470 --> 03:24.870
那么组件内部是会

03:24.870 --> 03:26.070
是不是会发生变化

03:26.570 --> 03:28.170
而组件内部一发生变化

03:28.170 --> 03:30.570
是不是要向上面的组件发出通知

03:30.870 --> 03:31.470
对不对

03:31.870 --> 03:33.470
哎也就是说呢

03:33.470 --> 03:35.870
我就不不担心这里多扯了啊

03:35.870 --> 03:37.670
因为你们以前学过5u2

03:37.670 --> 03:38.470
应该知道

03:38.670 --> 03:39.870
这个组件里面

03:39.870 --> 03:42.070
应该有两个双向绑定

03:42.270 --> 03:44.870
就是我到时候在使用这个组件的时候呢

03:45.070 --> 03:46.270
可能是这样子使用的

03:46.270 --> 03:47.070
切个box

03:47.070 --> 03:48.370
哎呦切个editor

03:49.570 --> 03:50.570
就是你写一个组件

03:50.570 --> 03:52.370
一定要首先要规划好

03:52.370 --> 03:53.570
他到时候怎么去用

03:54.470 --> 03:55.370
那么到时候我呢

03:55.370 --> 03:57.670
我可能会这样子传递啊vmode

03:58.970 --> 04:00.970
绑定一个是否选中的状态

04:00.970 --> 04:02.970
他对吧绑定一个动态数据

04:03.170 --> 04:03.970
是否选中

04:03.970 --> 04:04.870
那么组件内部呢

04:04.870 --> 04:05.870
有可能会更改

04:05.970 --> 04:06.270
对吧

04:06.270 --> 04:08.570
这就设计到自定义组件里面的vmode

04:08.570 --> 04:09.370
是不是学过了

04:09.770 --> 04:10.770
然后呢另外一个呢

04:10.770 --> 04:12.170
也要进行双向绑定

04:12.170 --> 04:12.970
是不是就是个

04:13.270 --> 04:13.670
呃

04:14.170 --> 04:15.170
文本数据

04:15.170 --> 04:15.970
比方的text

04:16.970 --> 04:17.570
text

04:17.670 --> 04:19.170
过去是怎么用的sync对吧

04:19.170 --> 04:20.570
也要进行双向绑定

04:20.870 --> 04:21.970
好iphone

04:23.370 --> 04:24.370
12

04:24.870 --> 04:25.670
懂了意思吧

04:26.470 --> 04:28.070
好那么这个地方呢

04:28.170 --> 04:30.170
我们手按照这样的模式

04:30.170 --> 04:31.670
我们去思考一下

04:32.870 --> 04:33.570
把这个过来

04:34.170 --> 04:37.070
既然这个组件里面要提供两个双向绑定

04:37.770 --> 04:38.770
所以说呢我们这里

04:38.770 --> 04:40.670
首先把这个组件的央视啊

04:40.670 --> 04:41.670
这东西弄好啊

04:41.770 --> 04:43.370
央视这些我们不是

04:43.970 --> 04:44.870
课程里面的重点啊

04:44.870 --> 04:45.570
所以说我这里呢

04:45.570 --> 04:46.570
把央视给你们了

04:46.670 --> 04:47.770
央视素材啊

04:47.770 --> 04:48.770
这个切个editor

04:48.970 --> 04:50.170
他的模板呢

04:50.170 --> 04:51.770
就是这个把负责过来啊

04:52.070 --> 04:52.970
模板就这个

04:53.770 --> 04:55.270
呃然后呢央视

04:55.370 --> 04:56.570
央视的就下面这个

04:57.470 --> 04:58.870
你可以看一下吧打开

05:00.370 --> 05:02.270
看一下就这么给这么一个效果啊

05:03.370 --> 05:04.070
好然后呢

05:04.070 --> 05:05.670
我们这里把央视复制一下

05:10.570 --> 05:11.370
好到这边来啊

05:11.370 --> 05:12.270
加上一个sculpt

05:14.270 --> 05:14.870
sculpt

05:18.120 --> 05:19.120
啊沾进去啊

05:19.320 --> 05:19.820
行了

05:19.920 --> 05:21.820
咱们来使用一下这个组件

05:21.920 --> 05:23.220
瞅一瞅啊

05:23.220 --> 05:23.720
这边呢

05:23.720 --> 05:25.320
我们导入这个组件啊

05:25.420 --> 05:26.920
Input在上面导入吧

05:27.820 --> 05:28.420
Input

05:29.820 --> 05:30.420
check

05:31.020 --> 05:31.820
editor

05:32.120 --> 05:32.620
是吧

05:33.420 --> 05:35.220
components to editor

05:35.420 --> 05:36.520
啊这边呢还是一样啊

05:36.520 --> 05:37.820
要注册一下这个组件

05:37.920 --> 05:38.820
components

05:39.720 --> 05:40.920
components

05:42.320 --> 05:43.920
啊于是呢我们在

05:44.420 --> 05:46.120
这个app调模模板里边

05:46.320 --> 05:47.320
去使用这个组件

05:50.270 --> 05:50.770
好了

05:50.870 --> 05:52.670
咱们来看一下一面上的效果啊

05:53.970 --> 05:55.770
哎这里出问题了

05:56.570 --> 05:57.370
报了一个错

05:57.370 --> 05:58.970
他说切个editor

05:58.970 --> 05:59.770
啊明白了

06:00.070 --> 06:01.270
这边没有写后维对吧

06:01.370 --> 06:03.170
在vc这个角色架里边呢

06:03.170 --> 06:04.270
他现在要写后维

06:04.270 --> 06:05.370
我这里顺便说一下

06:06.570 --> 06:08.070
目前而言啊

06:08.070 --> 06:10.570
vc啊他还不是一个正式的版本

06:10.870 --> 06:12.870
vc啊就是个角色加工具啊

06:12.970 --> 06:14.570
他是一个rc啊

06:14.670 --> 06:15.470
还在提

06:15.870 --> 06:17.570
就最终提案的这个阶段

06:18.170 --> 06:19.570
啊因此呢

06:21.070 --> 06:23.570
我建议啊大家在实际的开发中

06:23.570 --> 06:24.970
在公司里面真实的开发中

06:24.970 --> 06:27.770
您不要用vc啊还是有不少坑的啊

06:27.770 --> 06:29.730
暂时呢还是要用那个vucl

06:30.070 --> 06:31.270
只是我们上课的时候呢

06:31.270 --> 06:32.670
尽量用一些新的东西啊

06:32.670 --> 06:33.970
还是得用vucl

06:34.170 --> 06:35.970
等他位置成熟了过后啊

06:35.970 --> 06:38.170
等别的公司或者别的开发的去踩坑

06:38.170 --> 06:38.970
踩完了过后呢

06:38.970 --> 06:39.970
里面再去用啊

06:41.570 --> 06:43.070
好那么我倒进来啊

06:43.570 --> 06:44.070
放心

06:44.470 --> 06:46.270
那你看是不是就效果就出来了

06:46.470 --> 06:47.470
他目前是选中的

06:47.470 --> 06:48.870
那是怎么让他不选中呢

06:48.870 --> 06:50.770
不选中的话方式很简单啊

06:50.770 --> 06:52.070
方式的话就是在这里呢

06:52.070 --> 06:53.770
加上一把这个切个

06:53.970 --> 06:55.370
这个内央式啊大家确定

06:56.870 --> 06:57.970
其实你可以看到这里呢

06:57.970 --> 06:59.870
其实我没有用什么没有用那个

07:00.470 --> 07:02.670
啊切个报的是文本方

07:02.670 --> 07:04.170
对吧没有用那个音扑车元素

07:04.170 --> 07:06.370
直接用那个带央式的div啊

07:06.670 --> 07:07.970
给他加上checked属性

07:08.070 --> 07:10.070
内央式呢他就是选中状态

07:10.170 --> 07:11.170
没有加上内央式呢

07:11.170 --> 07:12.470
他就是没有选中状态

07:12.670 --> 07:13.170
对吧

07:13.770 --> 07:14.570
所以说呢这里呢

07:14.570 --> 07:16.070
我们自己要去写点击事件

07:16.070 --> 07:17.470
点击过后加上这个内央式

07:18.070 --> 07:19.170
对吧是这么个意思

07:19.570 --> 07:20.070
好了

07:21.170 --> 07:21.970
那么现在呢

07:21.970 --> 07:23.470
我们再回到我们刚才的问题

07:23.570 --> 07:24.470
刚才的问题是

07:24.470 --> 07:26.270
我们现在有两个双向绑定

07:26.270 --> 07:27.070
一个是vmode

07:27.070 --> 07:28.170
一个是text

07:28.170 --> 07:29.670
有两个数据双向绑定

07:29.970 --> 07:32.070
那么如果说你在5u3里边

07:32.470 --> 07:33.670
你要这样用的话

07:33.770 --> 07:34.570
就出问题了

07:34.970 --> 07:37.170
因为5u3里边在模板里边

07:37.170 --> 07:40.570
对vmode和sync这两个双向绑定

07:40.570 --> 07:42.270
做了一个不兼容的更新

07:42.970 --> 07:44.370
为什么他要做更新呢

07:44.370 --> 07:46.170
大家想一想测个玩意儿

07:48.070 --> 07:49.370
效果是不是一样的

07:49.970 --> 07:50.970
你用vmode

07:51.270 --> 07:52.270
双向绑定呗

07:52.770 --> 07:53.770
你用sync

07:53.770 --> 07:55.270
是不是也在做双向绑定

07:55.270 --> 07:56.370
含义是一样的

07:56.570 --> 07:57.770
过去在5u2的时候

07:57.770 --> 08:00.270
江湘家还见过类似的面试题

08:01.470 --> 08:03.970
就是让你说一说vmode和sync的区别

08:05.270 --> 08:05.970
但是这两个

08:05.970 --> 08:08.270
虽然说用法上有没有有一些区别

08:08.670 --> 08:10.170
但是实际上

08:10.770 --> 08:12.770
他们的作用都是一样的

08:12.770 --> 08:14.270
都是来做双向绑定

08:14.570 --> 08:16.570
这是过去的设计的缺陷

08:16.970 --> 08:18.370
既然是双向

08:18.470 --> 08:19.670
都是在做双向绑定

08:19.670 --> 08:22.270
干嘛要搞出两种模板语法出来了

08:22.870 --> 08:23.870
没有必要嘛

08:24.170 --> 08:25.370
所以5u3在这里

08:25.970 --> 08:27.770
他就做了一个很大档的决定

08:28.870 --> 08:29.570
干脆

08:29.870 --> 08:31.170
既然都是在做双向绑定

08:31.170 --> 08:32.670
我干脆就去掉其中一个

08:33.270 --> 08:34.170
他就去掉了谁了

08:34.170 --> 08:35.170
他就去掉了sync

08:35.370 --> 08:36.470
把sync给你去掉了

08:37.270 --> 08:38.670
把sync的那种写法

08:38.870 --> 08:40.770
就变成了vmode的写法

08:40.770 --> 08:42.670
也就是现在的5u3里面vmode

08:42.770 --> 08:44.870
是可以绑定多个

08:45.670 --> 08:46.870
双向绑定数据的

08:47.070 --> 08:48.170
对吧 过去只有一个

08:48.570 --> 08:51.070
那么在5u3里面这个地方要写成什么呢

08:53.400 --> 08:54.100
写成这个样子

08:55.600 --> 08:56.500
把sync去掉了

08:57.800 --> 08:58.600
懂了意思吧

08:59.300 --> 09:01.900
所以说以后在5u3里面是没有这个sync

09:02.000 --> 09:03.500
没有这个sync求是服了

09:03.700 --> 09:04.700
变成了这个样子

09:05.900 --> 09:07.200
好 咱们来看一下文档

09:07.200 --> 09:09.100
因此我们要做这个组件

09:10.100 --> 09:13.000
我们就要搞清楚5u3里面的vmode

09:13.000 --> 09:14.200
他可以绑定多个数据

09:14.300 --> 09:16.600
那么他到底是什么样的一个原理

09:17.200 --> 09:18.800
好 看一下5u3的vmode

09:19.700 --> 09:20.300
简单看一下

09:20.300 --> 09:21.700
然后我们来写这个组件

09:22.900 --> 09:24.400
前面blahblah说了一大堆

09:24.400 --> 09:26.100
其实就是说这个sync vmode

09:26.100 --> 09:27.400
没有必要同时存在

09:27.500 --> 09:29.100
因为他们都是含义都是一样的

09:29.100 --> 09:31.800
所以说在5u3里面做出了以下修改

09:32.200 --> 09:33.000
第一个呢

09:34.000 --> 09:35.600
过去的vmode的指令

09:35.700 --> 09:37.200
它实际上表示什么意思呢

09:37.300 --> 09:38.800
它实际上是一个语法堂

09:40.100 --> 09:40.500
啥意思呢

09:40.500 --> 09:42.500
就是Value绑定某一个东西

09:42.500 --> 09:45.000
然后注册了一个input时间

09:45.100 --> 09:47.200
input时间它的时间参数

09:47.200 --> 09:48.700
就是我们新的值

09:48.800 --> 09:49.300
对不对

09:49.300 --> 09:50.800
在针对自定义组件的时候

09:50.800 --> 09:51.600
它是不是这个意思

09:51.600 --> 09:55.000
看一下5u2的情况

09:55.800 --> 09:57.800
Value绑定了一个数据

09:59.000 --> 10:00.200
然后input的时候

10:00.200 --> 10:01.400
给这个数据重新复制

10:01.800 --> 10:05.000
那么这个东西可以简写为vmode

10:05.800 --> 10:06.300
对不对

10:06.300 --> 10:07.500
这是i5u2的情况

10:07.500 --> 10:08.700
那么在5u2的时候

10:08.700 --> 10:09.400
组件里面

10:09.400 --> 10:10.600
就这个组件里面

10:10.700 --> 10:11.800
比方说我们这个组件

10:11.900 --> 10:13.500
这个组件里面是不是要有两个属性

10:13.600 --> 10:14.600
一个属性

10:14.700 --> 10:15.400
这个属性是什么呢

10:15.400 --> 10:16.400
Value

10:16.400 --> 10:17.700
要不传个Value过来

10:17.800 --> 10:18.300
到时候呢

10:18.300 --> 10:19.400
我在适当的时候

10:19.400 --> 10:21.000
会触发一个input时间

10:21.000 --> 10:22.500
比如说我们这里点击过后

10:22.600 --> 10:23.300
点击这个DIV

10:23.300 --> 10:24.900
是不是触发一个input时间

10:25.100 --> 10:25.500
对吧

10:25.500 --> 10:26.600
过去得这样子写

10:27.100 --> 10:28.900
但是5u3里面就不一样了

10:28.900 --> 10:29.900
你看下5u3

10:30.500 --> 10:31.200
5u3呢

10:31.200 --> 10:34.200
其实它就是把这个属性名字

10:34.300 --> 10:36.400
和世界名字给你改了

10:36.500 --> 10:37.800
改成统一的东西了

10:38.600 --> 10:41.000
谁跟谁统一呢

10:41.100 --> 10:42.400
就跟以前那个sync

10:42.900 --> 10:43.500
那个玩意儿

10:43.500 --> 10:44.600
他觉得那个东西呢

10:44.600 --> 10:46.700
更加像一个双向绑定的世界名

10:46.900 --> 10:47.300
于是呢

10:47.300 --> 10:48.300
他就变成这个样子了

10:48.300 --> 10:48.800
看着啊

10:49.500 --> 10:51.100
属性名不再是Value了

10:53.200 --> 10:55.000
世界名变成了什么

10:55.000 --> 10:55.900
不再是input了

10:55.900 --> 10:57.400
变成了什么update

10:57.900 --> 10:59.400
帽号后边写上

11:00.300 --> 11:04.000
你要更新的名字啊属性名字

11:04.100 --> 11:06.000
我打算要更新这个属性

11:06.100 --> 11:07.200
短modeValue

11:08.000 --> 11:09.800
也就说现在的vmode呀

11:10.400 --> 11:13.200
他的他的等同于的语法堂

11:13.200 --> 11:14.300
他是一个语法堂吗

11:14.400 --> 11:17.600
他等同于你绑定的是modeValue

11:18.600 --> 11:22.100
世界名等是update是帽号modeValue

11:22.800 --> 11:23.300
明儿意思啊

11:23.300 --> 11:24.000
对比一下啊

11:24.000 --> 11:25.300
应该很容易看明白

11:25.600 --> 11:28.400
所以说在Value3的组建里的这个probs

11:29.200 --> 11:30.700
是否选中这个状态

11:31.100 --> 11:32.700
要做双向绑定的这个状态

11:33.500 --> 11:34.300
应该写什么呢

11:34.300 --> 11:35.400
按照我们的要求啊

11:35.800 --> 11:36.500
vmode

11:36.500 --> 11:37.800
这是选中状态

11:38.100 --> 11:39.000
他们应该写啥

11:39.400 --> 11:40.600
这选中状态接触的属性

11:40.600 --> 11:43.200
是不是应该写modeValue

11:43.900 --> 11:44.400
对不对

11:45.600 --> 11:46.300
他什么类型

11:46.300 --> 11:47.700
他自然是一个不领的类型

11:50.770 --> 11:51.370
懂了意思吧

11:52.170 --> 11:53.070
那么这边呢

11:54.470 --> 11:55.370
这边我看啊

11:55.970 --> 11:58.770
是不是就要绑定modeValue

11:59.270 --> 11:59.670
为啥呢

11:59.670 --> 12:02.570
我随便我们这里先暂时写这么一个data吗

12:03.770 --> 12:04.170
return

12:05.870 --> 12:06.370
切个字

12:10.080 --> 12:10.780
好那么这边呢

12:10.780 --> 12:11.680
是不是有切个字

12:13.080 --> 12:13.780
懂了意思吧

12:14.680 --> 12:17.580
好那么这个有了这个属性过后

12:17.580 --> 12:18.980
那么接下来我们还要看啊

12:19.780 --> 12:21.280
什么时候这个属性会变化呢

12:21.280 --> 12:22.780
他是不是点这个div的时候

12:22.780 --> 12:23.880
这个属性会变化

12:24.180 --> 12:24.580
对不对

12:24.580 --> 12:25.780
说点这个div的时候

12:25.780 --> 12:26.880
是不是会抛出事件

12:26.880 --> 12:27.880
抛出什么事件

12:28.280 --> 12:29.280
抛出这个事件

12:29.680 --> 12:30.680
是抛出这个事件

12:30.980 --> 12:31.480
对吧

12:32.380 --> 12:34.780
把相应的变化的数据呢

12:35.080 --> 12:35.980
扔过去好

12:35.980 --> 12:36.680
那么这里边呢

12:36.680 --> 12:37.680
我们使用那个

12:38.080 --> 12:40.780
vue3新的completion api那些啊

12:40.780 --> 12:41.780
就是setup来的数

12:42.780 --> 12:43.480
好来吧

12:44.980 --> 12:46.180
接下来我们这里呢

12:46.180 --> 12:48.080
要注册一个点击事件

12:48.180 --> 12:48.780
click

12:48.780 --> 12:51.980
点击事件点击的时候

12:51.980 --> 12:53.580
我们是要运是不是要运行的方法

12:53.580 --> 12:55.080
那这里是不是要提供一个方法

12:55.380 --> 12:56.980
对吧提供一个方法啊

12:57.080 --> 12:58.780
方法就是hand

12:59.380 --> 13:00.280
处理

13:01.180 --> 13:01.680
checked

13:01.980 --> 13:02.380
啊

13:03.380 --> 13:03.980
处理

13:04.680 --> 13:05.980
选中状态的变化

13:06.680 --> 13:08.080
那么他自己这是一个函数

13:08.680 --> 13:09.880
这个函数干嘛呢

13:09.880 --> 13:11.980
这个函数是不是要触发一个事件

13:12.280 --> 13:13.280
我要问题来了

13:13.280 --> 13:14.680
这里怎么触发事件

13:15.380 --> 13:17.780
过去是使用什么Zs ms

13:17.780 --> 13:18.280
对吧

13:19.280 --> 13:19.980
amat

13:20.380 --> 13:21.680
触发一个什么音谱者之间

13:21.680 --> 13:22.580
现在不能是音谱者了

13:22.580 --> 13:23.680
变成了update

13:24.080 --> 13:24.680
mode

13:24.880 --> 13:25.480
value

13:25.480 --> 13:25.880
对吧

13:26.480 --> 13:28.080
说变成这个变成这个东西了

13:28.180 --> 13:29.580
然后呢事件的参数

13:29.580 --> 13:31.080
要去写上一个东西啊

13:31.580 --> 13:32.380
好那么这里

13:32.680 --> 13:34.380
这里呢一个个问题过问题来

13:34.380 --> 13:35.680
这里能用Zs吗

13:36.280 --> 13:36.880
是不能的

13:36.880 --> 13:37.680
因为之前说过啊

13:37.680 --> 13:39.680
setup函数里边是没有这个Zs的

13:39.980 --> 13:40.780
Zs是不能用的

13:40.780 --> 13:41.580
还是on define

13:41.780 --> 13:42.380
那么问题来了

13:42.380 --> 13:44.280
我这里在哪里去用这个amat呢

13:44.680 --> 13:45.480
在哪里去用呢

13:46.280 --> 13:47.080
好注意看

13:47.080 --> 13:48.280
这个setup函数里边

13:48.280 --> 13:49.680
实际上是可以有参数的

13:49.980 --> 13:51.380
它可以有两个参数

13:51.480 --> 13:52.180
一个参数呢

13:52.180 --> 13:53.480
是第一个参数是probs

13:54.580 --> 13:56.380
就是我们这个主线的所有的属性

13:56.380 --> 13:57.380
它会给你传进来

13:57.880 --> 13:59.580
那么这里是不是可以通过Zs叫probs

13:59.580 --> 14:00.680
得到所有的属性

14:00.880 --> 14:01.280
对吧

14:01.280 --> 14:02.780
第二个参数是一个context

14:03.580 --> 14:05.080
context是个上下文

14:05.180 --> 14:06.380
那么一个上下文里边

14:06.380 --> 14:07.880
有我们需要的一些

14:09.080 --> 14:09.980
函数在里边

14:09.980 --> 14:11.180
我们来输出一下啊

14:11.280 --> 14:12.380
输出一下context

14:13.280 --> 14:14.280
好保存啊

14:14.880 --> 14:15.380
刷新

14:15.380 --> 14:17.180
你看是不是输出一个context

14:17.480 --> 14:18.580
这里是不是有一个

14:19.080 --> 14:19.480
amat

14:19.480 --> 14:20.580
包括htrs

14:20.580 --> 14:22.180
那么这个都跟你以前的

14:22.180 --> 14:25.080
Zs $htrs是一样的

14:25.180 --> 14:27.080
Zs $s $s是一样的

14:27.180 --> 14:28.080
都是一样的

14:28.180 --> 14:29.180
所以说我们这里呢

14:29.380 --> 14:30.880
可以通过这个context

14:31.780 --> 14:33.080
来去触发一个时间

14:33.680 --> 14:35.080
context触发

14:35.080 --> 14:35.780
那没有多了

14:35.780 --> 14:36.580
没有多了符号

14:36.580 --> 14:37.480
直接触发一个时间

14:37.480 --> 14:38.480
时间名字一样的

14:39.480 --> 14:39.880
好

14:39.880 --> 14:40.980
然后这边呢

14:42.480 --> 14:43.780
我要给他传什么数据呢

14:44.780 --> 14:46.280
那你这个多选框的状态

14:46.280 --> 14:47.680
就是这个DIV点击过后

14:47.880 --> 14:49.080
第一是点点击过后

14:49.080 --> 14:50.480
是不是把它变成相反的值

14:50.480 --> 14:50.780
对吧

14:50.780 --> 14:51.280
之前为True

14:51.280 --> 14:52.380
现在变Force

14:52.580 --> 14:53.180
之前为Force

14:53.180 --> 14:54.180
现在变True

14:54.280 --> 14:55.180
那么这里是不是

14:55.180 --> 14:56.680
要取这个属性相反的值

14:56.680 --> 14:57.280
你同样的啊

14:57.280 --> 14:58.080
不能用Zs

14:58.080 --> 14:59.180
不能用这种方式啊

14:59.280 --> 15:00.080
应该用什么

15:00.080 --> 15:00.780
probs

15:00.880 --> 15:01.080
对吧

15:01.080 --> 15:02.480
通过这参数传进来的

15:03.080 --> 15:05.180
点什么mode value

15:05.580 --> 15:06.980
把取相反的值就可以了

15:09.600 --> 15:09.800
看吧

15:09.800 --> 15:10.600
这就写完了

15:10.800 --> 15:11.200
之后呢

15:11.200 --> 15:12.100
把这个函数返回

15:12.100 --> 15:12.700
return

15:13.300 --> 15:14.000
handle

15:16.400 --> 15:16.900
checked

15:17.300 --> 15:17.900
checked

15:19.300 --> 15:20.100
在这

15:21.400 --> 15:21.700
好了

15:21.700 --> 15:23.100
有了这个东西过后呢

15:23.100 --> 15:24.200
我们来看一下啊

15:24.300 --> 15:26.800
看一下是不是能够打到我们的要求

15:27.500 --> 15:29.100
为了大家看得清楚呢

15:29.100 --> 15:30.100
我们在下面呢

15:30.100 --> 15:31.400
在写上这么一个

15:32.300 --> 15:34.700
目前的checked的值啊

15:35.200 --> 15:35.800
选中

15:36.400 --> 15:36.900
装开

15:38.200 --> 15:38.600
好

15:38.600 --> 15:39.300
保存啊

15:39.700 --> 15:40.100
看一下

15:40.300 --> 15:41.600
目前选动当他为True

15:41.600 --> 15:42.600
那么现在有个问题啊

15:42.600 --> 15:43.500
选中当他为True的时候

15:43.500 --> 15:44.500
他为什么没选动呢

15:44.900 --> 15:46.300
实际上这个数据传过去了

15:46.400 --> 15:47.100
传过去了

15:47.100 --> 15:47.700
但是呢

15:47.700 --> 15:48.300
这边

15:48.900 --> 15:50.700
并没有根据这个数据

15:50.700 --> 15:52.300
加上这个内样式对不对

15:52.400 --> 15:53.000
所以我们这里呢

15:53.000 --> 15:54.300
还要绑进一个内样式

15:54.800 --> 15:57.800
什么内样式呢

15:57.800 --> 15:59.000
check这个内样式

16:00.200 --> 16:00.800
等于什么呢

16:00.800 --> 16:02.500
等于mode value

16:04.000 --> 16:04.200
好

16:04.200 --> 16:04.700
保存啊

16:04.700 --> 16:05.400
现在看一下

16:05.800 --> 16:07.000
一开始是选中的对吧

16:07.200 --> 16:08.000
点一下

16:09.400 --> 16:11.200
为什么没有变变成不选中

16:11.200 --> 16:13.100
是因为我这里触发了时间

16:13.100 --> 16:13.600
但是呢

16:13.600 --> 16:15.600
这边是不是没有注册时间啊

16:15.700 --> 16:16.700
因此我们在这边

16:16.800 --> 16:18.700
这些东西都都是在呼吸

16:18.700 --> 16:19.800
v2的知识啊

16:20.400 --> 16:21.000
呃

16:21.400 --> 16:22.300
时间与名字是什么

16:22.300 --> 16:24.300
现在不再叫做input时间了

16:24.300 --> 16:25.100
叫做什么呢

16:25.100 --> 16:26.200
叫做update

16:26.700 --> 16:28.300
mode value时间

16:28.700 --> 16:29.500
在这个时间里面

16:29.500 --> 16:30.600
我们是不是要给这个check

16:30.600 --> 16:31.400
重新复制

16:31.400 --> 16:32.200
复作于什么了

16:32.200 --> 16:33.000
复作于event

16:33.000 --> 16:33.500
对吧

16:34.700 --> 16:37.800
所以把个时间传过来的时间参数

16:38.400 --> 16:39.800
传过来的时间参数

16:39.900 --> 16:41.700
重新给这个check是复制

16:42.000 --> 16:42.500
好

16:42.500 --> 16:43.300
保存看一下

16:44.400 --> 16:45.900
所以选中状态搞定了

16:46.600 --> 16:47.800
那么目前这种解法

16:47.800 --> 16:48.900
你看是不是就是这种

16:49.200 --> 16:49.900
这种解法

16:49.900 --> 16:51.400
这种解法在5u3里面

16:51.400 --> 16:53.600
可以减些为vmode对不对

16:53.800 --> 16:55.300
5u2的是这种解法

16:55.300 --> 16:56.500
可以减些为vmode

16:56.600 --> 16:58.900
但5u3的时间名和属性名都变了

16:59.300 --> 16:59.400
好

16:59.400 --> 17:01.600
那么这边我们就可以使用什么vmode

17:05.430 --> 17:06.030
能听懂吧

17:06.030 --> 17:07.830
这是这一块啊

17:07.830 --> 17:08.830
vmode的情况

17:09.630 --> 17:10.430
效果是一样

17:10.830 --> 17:11.330
看呗

17:12.730 --> 17:12.930
好

17:12.930 --> 17:13.730
我们继续啊

17:14.330 --> 17:15.830
就这个组件里边呢

17:15.830 --> 17:17.130
它还有东西

17:17.430 --> 17:19.330
就是还有一个地方需要绑定

17:19.330 --> 17:21.630
就是这个input文文框

17:21.830 --> 17:22.630
需要绑定

17:23.830 --> 17:25.530
那么这个地方怎么来绑定呢

17:25.730 --> 17:27.630
因为我们以前5u2的时候

17:27.630 --> 17:29.030
vmode它只能绑定

17:29.930 --> 17:31.430
双向绑定一个数据对吧

17:31.430 --> 17:32.630
但是5u3呢

17:32.830 --> 17:34.430
可以双向绑定多个了

17:34.630 --> 17:35.630
默认的情况下

17:35.630 --> 17:37.330
vmode它绑定的是这个属性

17:38.330 --> 17:39.530
触发的是这个世界

17:39.830 --> 17:42.230
那么如果说有不同的数据呢

17:42.230 --> 17:43.630
你看看下面

17:44.130 --> 17:46.230
5u3它去掉了胜可修饰服

17:47.230 --> 17:49.730
把原本的功能有vmode的参数代替

17:49.730 --> 17:50.530
啥意思呢

17:50.530 --> 17:51.230
你看啊

17:51.430 --> 17:52.330
过去

17:52.830 --> 17:53.830
这种情况

17:53.830 --> 17:55.030
是不是也是双向绑定

17:55.430 --> 17:56.930
过去这种情况变成了什么

17:57.130 --> 17:57.830
Title性格

17:57.830 --> 17:59.030
这是5u2的情况

17:59.130 --> 18:00.830
那么5u3去掉了这个性格

18:01.230 --> 18:02.530
在5u3里面变成什么呢

18:02.830 --> 18:03.730
这种情况

18:03.930 --> 18:06.430
这种情况就是属性名和世界名是不是没变

18:06.930 --> 18:09.630
然后变成了vmode冒好Title

18:10.330 --> 18:10.930
看到没

18:11.630 --> 18:13.330
而这样子一回看的话

18:13.630 --> 18:14.930
是不是这个vmode

18:14.930 --> 18:16.330
不加参数的vmode

18:16.530 --> 18:20.030
就相当于它的这个绑定的属性是mode value

18:20.530 --> 18:20.830
对吧

18:20.830 --> 18:22.230
绑定的属性是mode value

18:22.230 --> 18:24.030
那么这个时候你可以不用加参数

18:24.230 --> 18:26.130
那么除了除了这个属性之外

18:26.530 --> 18:29.030
是不是那个其他的都要加上参数啊

18:29.030 --> 18:30.030
冒好Title

18:30.230 --> 18:30.530
对吧

18:30.530 --> 18:31.430
是一样的

18:32.230 --> 18:33.030
好因此呢

18:33.030 --> 18:34.530
这边我们就很好写了啊

18:34.530 --> 18:35.830
也就是我们这边呢

18:35.830 --> 18:37.830
在用的时候可以这样用啊

18:37.830 --> 18:38.330
切个字

18:38.630 --> 18:39.130
Title

18:40.830 --> 18:41.330
小米

18:42.130 --> 18:42.830
不要说啊

18:43.830 --> 18:44.630
哎

18:44.630 --> 18:46.330
这边我们在vmode

18:47.030 --> 18:47.530
Title

18:47.830 --> 18:48.730
绑定什么呢

18:48.730 --> 18:49.330
Title

18:49.830 --> 18:51.130
绑定我们这个数据

18:52.230 --> 18:52.930
没有问题吧

18:52.930 --> 18:53.130
好

18:53.130 --> 18:53.630
那么这边呢

18:53.630 --> 18:55.330
就相当于是对应的属性是什么呢

18:55.330 --> 18:55.930
Title

18:56.330 --> 18:57.130
是一个什么

18:57.130 --> 18:57.730
支付刷

19:00.130 --> 19:01.330
那么这边是不是要绑定

19:01.930 --> 19:02.330
对不对

19:02.830 --> 19:04.330
这边我们value

19:04.930 --> 19:05.530
为什么

19:05.630 --> 19:06.130
Title

19:07.030 --> 19:07.530
对吧

19:07.830 --> 19:08.130
好

19:08.130 --> 19:08.530
你看

19:10.600 --> 19:11.500
绑定进来了

19:11.500 --> 19:12.300
同时呢

19:13.200 --> 19:14.400
他有可能会出发事件

19:14.400 --> 19:16.200
就是他的input的时候啊

19:16.200 --> 19:18.000
input的时候是不是会出发

19:18.000 --> 19:19.400
这个事件我们要用

19:19.600 --> 19:20.500
处理函数

19:20.800 --> 19:21.900
更改这个抬头

19:21.900 --> 19:22.400
对吧

19:22.400 --> 19:24.100
向上发出一个通知

19:24.100 --> 19:25.200
来更改这个抬头

19:25.200 --> 19:25.800
那么同样的

19:25.800 --> 19:26.500
我们在这里呢

19:26.500 --> 19:28.000
需要一个函数来支撑

19:28.400 --> 19:29.000
handle

19:29.700 --> 19:30.200
in

19:30.400 --> 19:31.400
handle change

19:32.300 --> 19:33.200
txt change

19:35.500 --> 19:36.500
给我一个

19:36.800 --> 19:37.700
试验参数页啊

19:37.700 --> 19:38.300
因为这边

19:38.300 --> 19:39.200
我们把这个handle

19:39.200 --> 19:40.400
迁击放过去过后

19:41.400 --> 19:42.100
他出发的时候

19:42.100 --> 19:43.700
是不是有一个试验参数页啊

19:43.900 --> 19:45.400
我们这里是用contact

19:45.400 --> 19:47.400
amd出发事件update

19:47.400 --> 19:48.600
怎么这里写啥

19:49.400 --> 19:50.200
是不是写抬头

19:50.600 --> 19:51.200
好

19:51.200 --> 19:52.600
呃那种呢

19:52.700 --> 19:53.900
新的文猛框那种呢

19:53.900 --> 19:56.000
是e.toget.value

19:57.500 --> 19:58.000
对不对

19:58.500 --> 19:59.400
这样就写好了

20:00.000 --> 20:01.200
好到这边来看一下

20:01.700 --> 20:02.400
合不可以呢

20:02.800 --> 20:04.200
呃为了让大家看得清楚啊

20:04.200 --> 20:05.100
我在这边呢

20:05.200 --> 20:07.000
再加上一个在这边

20:07.200 --> 20:08.300
再加上一个

20:10.100 --> 20:10.900
商品

20:11.900 --> 20:12.700
呃

20:13.000 --> 20:13.900
银撑

20:19.420 --> 20:20.720
好保存啊看一下

20:21.520 --> 20:22.120
这里改了

20:22.120 --> 20:23.120
是不是下面跟着改了

20:23.120 --> 20:23.620
对吧

20:23.620 --> 20:24.920
那就双向绑定

20:26.520 --> 20:27.220
没问题吧

20:28.320 --> 20:28.420
好

20:28.420 --> 20:30.320
接下来我们再往下看一看啊

20:31.220 --> 20:33.220
由于这种变化发生了之后呢

20:33.220 --> 20:34.120
在view3里面

20:34.120 --> 20:35.820
这个mode配置被移出了

20:35.820 --> 20:36.320
这个配置呢

20:36.320 --> 20:37.520
其实大家也很少用

20:37.720 --> 20:39.120
这mode配置配置啥呢

20:39.120 --> 20:40.920
是在以前view2的时候

20:41.220 --> 20:42.620
配这个vmode

20:42.920 --> 20:44.320
他绑定了属性名

20:44.420 --> 20:45.620
绑定了事件名

20:45.720 --> 20:46.820
他是配置这个东西

20:47.020 --> 20:48.020
那么现在不需要了

20:48.020 --> 20:48.220
对吧

20:48.220 --> 20:49.020
因为以前vmode

20:49.020 --> 20:50.820
他只能绑定一个双向绑定

20:50.920 --> 20:51.320
所以说呢

20:51.320 --> 20:52.520
我们可能不

20:52.720 --> 20:53.220
呃

20:54.220 --> 20:57.120
不要默认的属性名和事件名

20:57.220 --> 20:58.320
可能像变一下啊

20:58.420 --> 20:59.220
那么vmode

20:59.320 --> 21:01.120
这个配置是配置这个玩意的

21:01.220 --> 21:01.880
那么view3

21:01.880 --> 21:03.520
vmode他本身可以绑定多个了

21:03.520 --> 21:05.020
那这没有什么意义了

21:05.120 --> 21:06.520
所以这个配置不存在了

21:08.020 --> 21:08.420
好

21:08.620 --> 21:10.120
接下来还有一个功能

21:10.720 --> 21:12.020
也是view2不具有的

21:12.020 --> 21:13.420
是view3给你新增的

21:13.520 --> 21:15.420
他允许自定义

21:15.720 --> 21:17.420
vmode修饰服

21:18.120 --> 21:19.220
这啥意思呢

21:19.220 --> 21:19.920
你看着啊

21:19.920 --> 21:21.120
比较说我们这里有个需求

21:22.120 --> 21:23.420
这个文本框啊

21:24.120 --> 21:24.920
他的数据啊

21:24.920 --> 21:26.620
他要去掉守卫空格

21:27.320 --> 21:29.320
就是我们这里双向绑定了一个数据

21:29.420 --> 21:30.320
绑定的是的

21:31.220 --> 21:31.720
这个文本

21:31.720 --> 21:34.020
绑定到这个文本框里边的文本

21:35.020 --> 21:35.920
我们希望呢

21:35.920 --> 21:37.520
无论如何这个数据呢

21:37.520 --> 21:40.020
一定是去掉守卫空格之后的数据

21:40.420 --> 21:41.720
所以说我们可能呢

21:41.820 --> 21:43.020
希望这样子来写

21:43.220 --> 21:45.120
加上一个修饰服去

21:46.020 --> 21:47.020
加上这么一个修饰服

21:47.520 --> 21:49.620
但是你单装单加这个修饰服

21:50.120 --> 21:50.920
有用吗

21:51.820 --> 21:52.220
有用吗

21:52.220 --> 21:53.320
我来看一下有用吗

21:54.120 --> 21:54.520
啊

21:54.920 --> 21:55.520
老孙啊

21:56.720 --> 21:57.720
现在来我们刷新一下

21:58.520 --> 21:59.620
前面加几个空格

22:00.520 --> 22:02.220
是没有前面还是有空格看到没

22:02.420 --> 22:03.320
还是有空格

22:03.420 --> 22:04.220
并没有用

22:04.820 --> 22:05.320
怎么

22:06.320 --> 22:07.320
那么这么办呢

22:07.620 --> 22:10.120
这个修饰服需要你自己去实现

22:10.420 --> 22:11.820
那怎么来实现呢

22:12.420 --> 22:14.320
这设计到一个高级用法了啊

22:14.420 --> 22:15.220
看下面这个图

22:16.620 --> 22:18.520
你把这个图看懂了你就自然就明白了

22:19.320 --> 22:21.220
我们在使用微目的的时候

22:21.220 --> 22:23.820
在无诱三中允许你加一些修饰服

22:24.520 --> 22:26.520
你看默认情况下这样子加

22:27.020 --> 22:27.520
啊

22:27.520 --> 22:28.520
这种情况下这样子加

22:28.520 --> 22:30.720
当然还有可能会多个修饰服就让这样子

22:30.720 --> 22:32.720
a b c

22:33.020 --> 22:34.520
可以加很多个修饰服

22:34.620 --> 22:35.320
再进去

22:36.020 --> 22:36.220
啊

22:36.220 --> 22:38.320
总之会加可以加一些修饰服

22:38.920 --> 22:41.020
那么这个修饰服本质上是啥呢

22:41.420 --> 22:42.020
我给你看啊

22:42.020 --> 22:43.220
我再使用一个主线

22:43.220 --> 22:45.020
然后呢微目的加了一个修饰服

22:45.220 --> 22:46.920
Tex这个加了一个修饰服

22:47.820 --> 22:50.320
传递到这个传递到这个组件的时候

22:50.620 --> 22:51.620
这个组件呢

22:52.320 --> 22:54.820
就会他的这个mode y6这个没什么好说的啊

22:54.820 --> 22:56.020
mode y6是data1对吧

22:56.020 --> 22:57.120
就这个数据啊

22:57.120 --> 22:58.820
那么Tex这个属性呢就这个数据

22:58.820 --> 22:59.720
这个刚才说过了

23:00.620 --> 23:02.220
同时会多两个属性

23:02.320 --> 23:03.920
这两个属性你要先声明啊

23:04.020 --> 23:04.620
声明过后呢

23:04.620 --> 23:05.620
他会多两个属性

23:05.620 --> 23:06.520
一个是mode

23:07.020 --> 23:07.920
mode files

23:08.620 --> 23:09.420
他是个对象

23:10.420 --> 23:11.520
这个对象他就会自动

23:11.520 --> 23:13.820
他他就会给你加上一个属性叫cap

23:13.820 --> 23:14.920
你看微mode

23:15.920 --> 23:17.320
你不是有个修饰服吗

23:17.420 --> 23:18.920
那么在组件内部呢

23:18.920 --> 23:20.120
他就会多一个属性啊

23:20.120 --> 23:23.120
mode modifiers cap等于2

23:23.820 --> 23:26.320
表示说在使用这个组件的时候

23:26.320 --> 23:28.620
别人给我传了一个修饰服cap进来

23:29.820 --> 23:30.620
同样的这边

23:32.320 --> 23:35.020
这个属性针对这个属性加了一个修饰服

23:36.220 --> 23:37.020
那么于是呢

23:37.020 --> 23:39.220
我们在组件里边就多了一个属性

23:39.220 --> 23:40.620
叫tex modifiers

23:40.920 --> 23:41.820
你看这个命名啊

23:41.820 --> 23:42.920
这个命名是固定的

23:43.220 --> 23:45.720
默认情况下是mode modifiers

23:46.420 --> 23:47.920
如果说是其他属性的话

23:47.920 --> 23:50.220
那么就是属性名加上mode files

23:51.220 --> 23:51.920
然后是个对象

23:51.920 --> 23:53.320
对对象里边有个cap

23:53.320 --> 23:55.520
表示说在使用这个组件的时候

23:55.520 --> 23:57.220
他给我传了一个修饰服进来

23:58.620 --> 23:59.820
好我们来看一下啊

24:01.420 --> 24:02.320
我们这边

24:03.220 --> 24:05.420
刚刚刚才我们加上了一个

24:06.120 --> 24:07.920
去掉守卫空格

24:08.820 --> 24:09.920
他不是自动完成的啊

24:09.920 --> 24:11.920
需要你自己去携带吗完成

24:12.720 --> 24:13.920
好于是呢

24:13.920 --> 24:15.920
我们可以需要在组件内部

24:15.920 --> 24:17.420
去声明一个属性

24:18.120 --> 24:19.420
这属性名字叫什么呢

24:20.720 --> 24:22.620
针对tex的修饰服对吧

24:22.620 --> 24:24.120
那么就tex modifiers

24:24.720 --> 24:26.420
tex modifiers

24:26.420 --> 24:28.420
这个命名是固定的啊固定的

24:29.820 --> 24:31.020
我给他一个默认值吧

24:31.020 --> 24:33.220
默认值就是一个对象

24:37.020 --> 24:37.820
就是个对象

24:39.890 --> 24:41.190
好接下来我们来看一下

24:41.990 --> 24:43.490
我就直接在这里说出啊

24:43.490 --> 24:46.290
tex modifiers

24:47.290 --> 24:47.990
probs

24:49.490 --> 24:50.890
setup的时候输出一下

24:52.090 --> 24:52.690
保存

24:53.390 --> 24:53.890
小心

24:55.390 --> 24:56.190
probs

24:56.690 --> 24:58.190
tex modifiers

24:59.590 --> 25:01.190
这是default是错了

25:02.490 --> 25:03.090
放心

25:03.490 --> 25:05.290
嗯我东西呢

25:06.790 --> 25:07.390
看一下啊

25:09.360 --> 25:12.260
哦这个地方属性属性名字抬头啊

25:12.260 --> 25:13.560
不是那个tex

25:14.360 --> 25:17.520
写错了写错了

25:18.720 --> 25:20.020
好保存啊再来

25:20.520 --> 25:21.120
小心

25:21.120 --> 25:23.120
你看说传掉一个tune

25:23.320 --> 25:24.320
微tune对吧

25:24.320 --> 25:27.320
表示说别人在使用这个组件的时候呢

25:27.320 --> 25:28.620
针对这个tex

25:28.620 --> 25:29.920
抬头属性呢

25:29.920 --> 25:31.320
传定了一个修饰服过来

25:31.320 --> 25:32.720
他就保存了这个属性里边

25:33.520 --> 25:34.720
啊传掉几个修饰服呢

25:34.720 --> 25:35.920
传定了一个tune

25:35.920 --> 25:37.520
那么如果说我刚才说了啊穿

25:37.520 --> 25:38.620
如果说这样子写的

25:39.720 --> 25:40.520
我看一下

25:40.820 --> 25:41.420
小心

25:41.420 --> 25:43.320
你看说穿了三个修饰服紧的

25:43.320 --> 25:43.720
对吧

25:43.720 --> 25:44.920
那具体要做什么事

25:44.920 --> 25:45.920
别人传进来了

25:45.920 --> 25:46.620
你要做什么事

25:46.620 --> 25:47.620
你自己去决定

25:48.020 --> 25:49.520
那我这里要做什么事呢

25:50.120 --> 25:52.720
无非就是在触发这个事件的时候

25:53.220 --> 25:55.020
如果说你传了这个修饰服去

25:56.320 --> 25:57.820
在触发这个事件的时候呢

25:57.820 --> 25:59.720
我把这个玩意儿去掉所谓风格

26:00.320 --> 26:01.120
就做这么一件事

26:01.120 --> 26:02.620
所以说这个事情就很简单了

26:02.620 --> 26:03.820
我们在这里判断一下啊

26:05.320 --> 26:05.820
probs

26:06.920 --> 26:07.520
probs

26:08.620 --> 26:09.220
title

26:09.220 --> 26:10.320
mode files

26:10.320 --> 26:12.420
你如果说给我传了这个修饰服紧来

26:13.120 --> 26:14.920
我们这里首先得到一个value嘛

26:15.220 --> 26:16.120
value等于这个

26:18.350 --> 26:20.150
你给我传了这个修饰服紧来

26:20.150 --> 26:22.650
那么我就把value重新复制为value

26:23.550 --> 26:24.150
就去

26:24.950 --> 26:26.750
去掉所谓空格用制服刷处理

26:26.850 --> 26:28.250
然后呢把这个value放进去

26:29.650 --> 26:30.650
自己手动处理

26:30.850 --> 26:32.150
以前是没有这个功能的啊

26:32.150 --> 26:33.050
现在是可以的

26:33.650 --> 26:35.050
好那么这样子一来了过后

26:35.050 --> 26:35.650
你看啊

26:36.750 --> 26:38.050
加这个修饰服过后

26:39.350 --> 26:41.350
我们在这里前面加上一个空格一写

26:41.350 --> 26:41.850
对吧

26:42.050 --> 26:43.250
空格它自动就消失了

26:43.850 --> 26:44.250
看呗

26:44.650 --> 26:46.850
这样也是前面加一些空格

26:48.150 --> 26:49.250
空格至于消失了

26:50.450 --> 26:51.750
如果说你不加这个修饰服

26:53.350 --> 26:54.750
它就可以允许稍微空

26:55.350 --> 26:56.050
就没问题

26:56.550 --> 26:56.950
好吧

26:56.950 --> 26:59.950
这是我们可以自己通过修饰服来进行实现

27:01.250 --> 27:02.750
这就是5u3里面

27:02.950 --> 27:06.950
对双向绑定这一块做出了重大更新

27:07.150 --> 27:09.150
会影响那个模板书写

27:10.050 --> 27:11.150
好那么现在呢

27:11.150 --> 27:12.550
我们这个组件呢

27:12.550 --> 27:14.350
是不是就写完了

27:14.850 --> 27:15.150
对吧

27:15.150 --> 27:15.850
没问题吧

27:15.850 --> 27:16.850
这个组件就写完了

27:17.350 --> 27:18.350
接下来继续啊

27:18.750 --> 27:20.250
这个组件写完了过后呢

27:20.250 --> 27:21.450
接下来我们要做这个区域

27:22.250 --> 27:22.650
对吧

27:22.650 --> 27:24.050
这个区域其实没什么好说的

27:24.050 --> 27:25.250
就是一个整个组件

27:25.250 --> 27:26.550
就是app这个组件

27:26.850 --> 27:27.850
那么这个app组件呢

27:27.850 --> 27:28.850
我这里已经写了啊

27:29.450 --> 27:30.350
央视书才这边

27:30.850 --> 27:32.650
它的模板在这

27:33.350 --> 27:33.850
扔过来

27:35.150 --> 27:35.650
模板

27:36.250 --> 27:37.850
呃它的那个

27:38.650 --> 27:39.650
样式在这

27:42.320 --> 27:43.320
写上一个样式啊

27:52.670 --> 27:53.470
它样式扔在这

27:54.170 --> 27:54.570
对吧

27:54.570 --> 27:56.580
看一下啊

27:56.580 --> 27:57.480
不写成这个样子

27:58.380 --> 27:59.680
好来吧

27:59.680 --> 28:00.980
我们这里先注册组件啊

28:00.980 --> 28:02.380
注册组件切个切个editor

28:02.380 --> 28:03.480
要用进去

28:03.480 --> 28:05.580
这是我们的数据以后要用的

28:06.180 --> 28:07.080
好那么数据呢

28:07.080 --> 28:08.180
我们不再用data的方式的

28:08.180 --> 28:08.980
我们还是用

28:08.980 --> 28:09.980
complay线API

28:10.980 --> 28:11.980
一步一步写

28:13.780 --> 28:14.480
首先

28:14.880 --> 28:15.380
这边呢

28:15.380 --> 28:16.380
我们应该是

28:16.580 --> 28:18.680
页面上的应该要提供一个数据

28:18.780 --> 28:19.480
这个数据呢

28:19.480 --> 28:21.080
是所有的商品

28:21.580 --> 28:23.480
啊每个商品里面包含了

28:23.480 --> 28:25.880
当前是否正在上架销售

28:26.280 --> 28:28.580
商品的名字和商品的id

28:28.580 --> 28:30.180
那么这个商品数据呢已经有了

28:30.180 --> 28:31.080
但那个商品数据呢

28:31.080 --> 28:32.980
也可以远程从服务器获取啊

28:32.980 --> 28:34.280
不过我这里没有服务器

28:34.380 --> 28:35.380
我又模拟一下吧

28:35.380 --> 28:36.380
就这么一个数据

28:36.680 --> 28:38.680
好那么这肯定是一个响应式数据

28:38.680 --> 28:39.180
对吧

28:39.380 --> 28:41.180
所以应该是一个响应式数据

28:41.380 --> 28:42.080
好那于是呢

28:42.080 --> 28:44.080
我需要导入5.6里边的wraith

28:46.760 --> 28:48.160
from view

28:49.260 --> 28:51.060
后边我们做各种案例的时候啊

28:51.060 --> 28:52.760
都会用complay线API来说

28:53.060 --> 28:54.160
因为你们以后在

28:54.460 --> 28:56.060
公司里边去使用5.3的话

28:56.060 --> 28:58.560
十四八九都让你用complay线API

28:59.060 --> 29:01.060
好通过default

29:01.060 --> 29:03.360
把这个默认默认数据传进去

29:03.760 --> 29:04.960
初始数据传进去

29:06.160 --> 29:07.160
好拿到一个什么

29:07.260 --> 29:08.460
拿到一个就是

29:09.760 --> 29:11.960
sales wraith

29:12.160 --> 29:13.260
然后就叫做那个

29:15.760 --> 29:19.030
products wraith

29:19.830 --> 29:20.630
所有的商品

29:21.230 --> 29:21.830
安徽

29:24.610 --> 29:25.110
wraith

29:25.110 --> 29:26.310
哦真有顺便说一下啊

29:26.610 --> 29:27.710
它有可能在反

29:27.810 --> 29:29.210
我们在setup里边

29:29.210 --> 29:30.810
为之所以加上这个wraith啊

29:31.310 --> 29:32.210
因为它里边

29:33.010 --> 29:34.510
容易忘记.value

29:34.710 --> 29:36.410
因为在setup海术里边说要.value

29:36.410 --> 29:37.210
它是个对象

29:37.210 --> 29:38.810
风刀浪的对象里边的

29:38.910 --> 29:40.610
但是除了这个setup海术

29:40.810 --> 29:42.310
至于没有.value了

29:42.610 --> 29:43.510
说说有些公司呢

29:43.510 --> 29:45.310
可能会要求的这样子些啊

29:45.810 --> 29:47.510
这是根据我自己的技术经验

29:47.510 --> 29:48.610
我可以想象的到的

29:49.410 --> 29:50.210
要去这样子些

29:50.210 --> 29:51.010
就是出去

29:51.110 --> 29:52.110
扔出去的时候呢

29:52.110 --> 29:53.410
就把它变成一个正常的

29:53.510 --> 29:55.310
没有wraith这个后维的东西

29:55.510 --> 29:56.110
这样子呢

29:56.310 --> 29:57.310
模板上使用的时候

29:57.310 --> 29:58.910
就直接使用这个prologs了啊

29:59.310 --> 29:59.910
别的意思吧

30:01.790 --> 30:02.490
那么看以后

30:02.490 --> 30:03.890
你们公司里边的具体规范

30:04.590 --> 30:05.990
好于是呢

30:05.990 --> 30:08.590
我们在有的这个所有的商品之后

30:08.690 --> 30:09.390
我们在页面上

30:09.390 --> 30:11.690
是不是要循环渲染出这个组件

30:11.890 --> 30:12.190
对吧

30:12.190 --> 30:13.390
是不是要渲染出第一行

30:13.690 --> 30:15.390
把第一行的所有组件渲染出来

30:15.590 --> 30:17.190
那么怎么来写呢

30:17.590 --> 30:18.290
哎我们这里呢

30:18.290 --> 30:19.290
有个那样式啊

30:19.290 --> 30:20.990
这下面是正在销售中的

30:21.290 --> 30:22.390
正在销售中的

30:22.390 --> 30:23.590
那么上面还有一个啊

30:23.590 --> 30:25.290
我们还是用同样的那样是nest

30:26.090 --> 30:26.890
一个straw

30:27.090 --> 30:28.190
叫做编辑

30:30.800 --> 30:32.000
你看这边有个编辑

30:32.100 --> 30:32.900
编辑下面呢

30:32.900 --> 30:33.700
有一个div

30:34.000 --> 30:35.000
这个div里边

30:35.000 --> 30:36.900
我们就是要循环渲染出很多个

30:36.900 --> 30:38.000
checked editor

30:38.500 --> 30:38.900
对不对

30:38.900 --> 30:39.300
来吧

30:39.300 --> 30:39.900
循环渲染

30:40.700 --> 30:43.000
checked editor

30:43.900 --> 30:44.500
循环渲染

30:45.200 --> 30:45.800
好来吧

30:45.900 --> 30:47.000
一个是v4

30:47.000 --> 30:47.800
v4指令

30:48.200 --> 30:48.900
渲染什么呢

30:48.900 --> 30:52.100
item in products

30:53.100 --> 30:53.800
循环这个

30:53.800 --> 30:54.100
对吧

30:54.100 --> 30:55.500
循环给我们的提供的数据

30:56.500 --> 30:57.000
好

30:57.500 --> 30:57.900
呃

30:58.700 --> 30:59.200
然后呢

30:59.200 --> 31:00.100
绑定keyz

31:00.100 --> 31:00.800
keyz为什么呢

31:00.800 --> 31:01.800
item叫id

31:02.400 --> 31:04.100
每个商品有一个id

31:05.100 --> 31:05.300
好

31:05.300 --> 31:06.700
那么是不是

31:06.700 --> 31:08.300
他是不是选中状态了

31:08.300 --> 31:11.100
取决于他是不是正在销售中vmode

31:11.400 --> 31:12.200
选中状态

31:12.400 --> 31:15.700
绑定到item的seal里面

31:15.700 --> 31:16.100
对吧

31:16.100 --> 31:17.700
是否是正在销售

31:19.000 --> 31:19.200
好

31:19.200 --> 31:19.800
继续啊

31:20.000 --> 31:20.200
呃

31:20.200 --> 31:20.700
还有什么呢

31:20.700 --> 31:21.700
还有他的文本

31:21.700 --> 31:23.300
是不是要绑定vmode

31:24.100 --> 31:25.100
什么title

31:25.600 --> 31:26.400
要绑定什么呢

31:26.700 --> 31:28.000
绑定这个他的title

31:28.500 --> 31:31.040
item叫item

31:31.240 --> 31:31.740
保存

31:32.640 --> 31:32.740
好

31:32.740 --> 31:33.440
你看一下这边

31:34.140 --> 31:34.840
做出来了

31:35.340 --> 31:35.640
哎

31:35.640 --> 31:36.140
哎

31:36.140 --> 31:37.440
这个这个央视

31:38.140 --> 31:39.240
这个央视咋回事

31:39.840 --> 31:40.640
这个央视

31:41.140 --> 31:41.940
央视的话

31:41.940 --> 31:42.840
我改一下吧

31:43.440 --> 31:44.740
把这里边的央视改一下

31:44.740 --> 31:45.840
改成display

31:47.540 --> 31:48.240
可能咋了

31:48.640 --> 31:49.540
我看一下啊

31:49.840 --> 31:51.040
这个央视

31:54.310 --> 31:55.210
这是我们的一个

31:55.210 --> 31:57.010
checker editor

31:57.510 --> 31:58.610
这个点啊

31:58.610 --> 32:00.010
这个点我给他个内央视吧

32:00.410 --> 32:02.010
给他个内央视list

32:02.110 --> 32:04.910
因为他这个玩意是个弹性弹性盒啊

32:04.910 --> 32:06.110
他就并排显示了

32:06.910 --> 32:07.910
好了是不是出来了

32:07.910 --> 32:08.410
对吧

32:08.410 --> 32:09.410
情况就出来了

32:09.410 --> 32:11.410
那么这样表可不可以选中取消

32:11.410 --> 32:12.410
选中取消

32:13.410 --> 32:14.910
啊这里可以修改

32:16.110 --> 32:16.410
好

32:16.410 --> 32:17.610
接下来看下面这个

32:17.610 --> 32:18.910
又有新知识了啊

32:20.410 --> 32:21.410
啊一个来

32:21.410 --> 32:21.910
这里呢

32:21.910 --> 32:23.410
我们要显示出

32:23.410 --> 32:26.910
所有目前正在销售的商品

32:26.910 --> 32:27.910
这些东西

32:27.910 --> 32:32.310
我们要显示出所有目前正在销售的商品

32:34.480 --> 32:35.280
你会怎么做

32:35.980 --> 32:38.480
我要显示出目前正在销售的商品

32:40.460 --> 32:41.760
那么你就这个区域啊

32:42.260 --> 32:42.960
这个地方

32:43.960 --> 32:45.160
是不是得循环啊

32:46.660 --> 32:47.560
是不是得循环

32:47.860 --> 32:48.860
在这个位置

32:49.860 --> 32:51.660
那么这里怎么去循环呢

32:52.260 --> 32:53.560
你看每循环的什么

32:53.560 --> 32:56.060
每一次循环是不是有两个元素

32:57.260 --> 32:57.560
对不对

32:57.560 --> 32:59.560
所以有两个元素得去循环吧

33:00.460 --> 33:01.660
那么我们怎么循环了

33:01.660 --> 33:03.160
这里有很多的问题啊

33:03.760 --> 33:04.560
一个个来

33:05.660 --> 33:08.260
我们在v2里面遇到这种情况怎么循环了

33:08.260 --> 33:09.860
是不是要加上一个template

33:10.860 --> 33:11.760
是不是循环他

33:12.160 --> 33:12.560
对不对

33:12.560 --> 33:13.360
一个个说啊

33:15.060 --> 33:16.960
v4去循环他

33:18.260 --> 33:19.860
因为我们这里还有个编号嘛

33:19.860 --> 33:21.260
所以说我们还需要一个index

33:21.260 --> 33:22.460
item index

33:23.160 --> 33:24.660
啊循环什么呢

33:24.960 --> 33:26.060
循环product

33:27.060 --> 33:27.760
一个个来啊

33:27.760 --> 33:28.760
这里面有很多问题

33:29.860 --> 33:31.760
这个地方如果说我们循环他的话

33:31.760 --> 33:34.060
是不是循环的是所有的商品

33:35.660 --> 33:36.060
对不对

33:36.060 --> 33:37.560
是不是循环了所有商品

33:38.560 --> 33:39.760
然后呢

33:39.760 --> 33:42.060
我们可以通过vif来判断

33:42.560 --> 33:43.660
判断说什么呢

33:43.860 --> 33:45.160
商品的

33:45.860 --> 33:46.560
sale

33:46.860 --> 33:48.560
必须要有值啊

33:48.560 --> 33:50.160
必须要为q的时候

33:50.360 --> 33:51.260
我才显示

33:51.360 --> 33:54.360
因为在v2里边v4的优先级

33:54.360 --> 33:55.760
是不是高于vif

33:56.160 --> 33:57.560
他一定会进行循环

33:57.660 --> 33:59.760
他会在每一次循环的时候

34:00.860 --> 34:01.660
运行这个

34:02.560 --> 34:03.360
懂我意思吗

34:03.560 --> 34:05.660
他会在每一次循环的时候运行这个

34:05.760 --> 34:07.260
看一下周围循环的这一项

34:07.360 --> 34:08.660
要不要显示这一块

34:09.260 --> 34:10.060
这是过去

34:10.460 --> 34:11.860
但是无忧二的

34:11.960 --> 34:13.960
在无忧二中大家有印象没有

34:14.160 --> 34:15.760
他明确的说了

34:15.960 --> 34:17.460
不要去这样写

34:17.660 --> 34:20.560
尽管了他告诉你v4的优先级高于vif

34:20.560 --> 34:22.660
但是告诉大家不要去这样子写

34:22.960 --> 34:25.660
他为什么需要大家让大家不要去这样子写呢

34:26.460 --> 34:27.860
是因为这样子写的话

34:27.960 --> 34:29.260
会影响效率

34:30.660 --> 34:32.460
为什么说会影响效率呢

34:34.370 --> 34:35.770
比方说给大家举个例子

34:38.000 --> 34:40.100
我们现在有五件商品

34:42.780 --> 34:43.580
五件商品

34:43.980 --> 34:44.780
其中呢

34:47.270 --> 34:48.270
这件商品

34:48.870 --> 34:49.770
是不显示的

34:51.370 --> 34:52.570
是不显示的

34:52.570 --> 34:53.770
也就是不显示的啊

34:53.770 --> 34:55.370
他vif判断v4

34:55.370 --> 34:56.170
他不显示

34:56.370 --> 34:57.770
于是通过这个玩意儿

34:57.770 --> 34:59.170
第一次渲染出来是什么

34:59.170 --> 35:01.170
渲染出来了一三四五

35:01.470 --> 35:02.470
就渲染出来这个玩意儿

35:03.870 --> 35:06.770
好接下来我们再修改了修改了什么

35:06.770 --> 35:07.670
修改了数据

35:07.970 --> 35:09.570
但是他循环要循环几次

35:09.570 --> 35:10.970
是不是还要循环五次

35:11.570 --> 35:14.170
对他每一次循环每次循环都要判断吗

35:14.170 --> 35:14.670
对不对

35:15.070 --> 35:16.470
接下来呢我们修改了什么呢

35:16.470 --> 35:17.770
修改了二这个东西

35:18.770 --> 35:19.870
修改了二这个东西

35:19.870 --> 35:21.070
就这一项修改了

35:21.170 --> 35:23.070
他是不是又要导致重新循环

35:23.370 --> 35:24.570
又要导致重新循环

35:24.570 --> 35:25.770
又要重新去判断

35:26.470 --> 35:28.170
说这个效率是很低的

35:28.870 --> 35:31.870
因为他是在循环的便利的过程中去判断的

35:32.670 --> 35:34.370
那么最好的做法是什么呢

35:34.470 --> 35:35.870
这种场景这种场景

35:36.370 --> 35:38.070
99%的情况

35:38.370 --> 35:40.370
你都可以写一个计算属性

35:40.470 --> 35:42.870
把我要循环的东西写成一个计算属性

35:42.970 --> 35:45.770
来降低对效率的影响

35:45.970 --> 35:47.770
说正确的做法呢这里应该是

35:49.470 --> 35:50.570
写一个计算属性

35:52.670 --> 35:55.070
你看这个暗地虽然很小

35:55.070 --> 35:56.870
但是你被包含了很多的理念

35:56.970 --> 35:59.970
包括包括了很多无约3的更新点在里面

36:00.470 --> 36:01.170
computer

36:02.470 --> 36:03.570
所以得到计算属性

36:03.570 --> 36:04.970
计算属性等于Return

36:04.970 --> 36:06.370
我们直接用

36:06.970 --> 36:07.770
减写的啊

36:07.970 --> 36:08.570
curdux

36:08.870 --> 36:10.070
reef.value

36:10.270 --> 36:10.870
filter

36:13.620 --> 36:15.420
他正在销售着

36:15.620 --> 36:16.020
对吧

36:16.220 --> 36:17.220
得到这么一个

36:18.020 --> 36:18.920
sales

36:19.620 --> 36:20.520
salesreef

36:20.820 --> 36:21.820
所以得到这么一个东西

36:22.120 --> 36:23.020
那么这里呢

36:23.020 --> 36:24.020
我们直接导出

36:24.020 --> 36:24.620
sales

36:25.220 --> 36:26.020
sales

36:26.220 --> 36:26.720
reef

36:27.720 --> 36:30.220
这到底导出的名字是啥

36:30.220 --> 36:31.620
看公司里面具体的规定

36:31.820 --> 36:33.420
我这个词是跟大家说一下

36:33.520 --> 36:35.020
有可能会出现这样的规范

36:36.320 --> 36:37.020
好那么这边呢

36:37.020 --> 36:37.920
我们是循环什么

36:38.020 --> 36:39.220
循环sales

36:40.220 --> 36:40.720
对不对

36:41.320 --> 36:42.220
应该这样去做

36:43.220 --> 36:45.020
那么为了在5月2

36:45.020 --> 36:46.820
然后就这里就出现一个问题了

36:46.820 --> 36:47.720
就是5月2

36:47.820 --> 36:49.820
他v4的优先级高于vif

36:50.020 --> 36:51.420
但是又不建议这样去用

36:51.720 --> 36:52.720
于是呢在5月3里面

36:52.720 --> 36:53.920
就干脆做了一个

36:54.520 --> 36:55.020
更新

36:55.520 --> 36:57.220
从此以后在5月3里面

36:57.620 --> 36:59.820
就不是你完全就不能这样用了

36:59.820 --> 37:01.220
因为他vif的优先级

37:01.220 --> 37:02.620
现在高于v4了

37:03.020 --> 37:04.420
他会先判断vif

37:04.820 --> 37:05.920
再判断vif

37:06.320 --> 37:08.620
因为他觉得过去这种设计呢

37:08.620 --> 37:09.420
是不对的

37:10.220 --> 37:11.820
这种设计是有缺陷的

37:12.520 --> 37:13.520
既然vif的

37:13.520 --> 37:15.820
以前过去vif的优先级高于vif

37:15.820 --> 37:16.920
他又不准利这样用

37:17.020 --> 37:19.020
那这个优先级比他高有什么意义的

37:19.120 --> 37:20.220
就完全没有意义了

37:21.220 --> 37:22.420
所以说呢

37:22.520 --> 37:23.920
他在5月3里面

37:24.420 --> 37:26.420
他的优先级就高于他了

37:26.420 --> 37:27.420
所以说5月3里面

37:27.420 --> 37:29.120
这个地方了就直接导致爆错了

37:29.120 --> 37:29.620
比如说

37:31.120 --> 37:32.320
直接导致爆错了

37:33.220 --> 37:33.920
你看看

37:36.180 --> 37:37.180
Connors reader

37:40.830 --> 37:42.730
Connors reader properties

37:44.230 --> 37:45.430
of undefined

37:46.130 --> 37:46.730
说这吧

37:49.730 --> 37:50.730
对就是这个地方

37:50.730 --> 37:52.130
你看你在这样的写的话

37:52.130 --> 37:53.530
他就你爆错了直接

37:54.730 --> 37:57.130
所以说因为item已经不存在了

37:57.230 --> 37:58.430
这个item已经不存在了

37:58.530 --> 38:00.030
因为先运行的vif

38:00.030 --> 38:01.330
这时候还没有循环

38:01.830 --> 38:02.530
懂了意思

38:02.730 --> 38:04.330
所以5月3里面是不能这样做了

38:04.530 --> 38:05.830
你得写个计算属性

38:05.830 --> 38:07.030
都用正确的做法

38:08.130 --> 38:09.330
好接下来我们继续啊

38:09.830 --> 38:11.230
好循环这个template

38:11.330 --> 38:12.730
每一循环一次

38:12.830 --> 38:14.130
是不是要写两个元素

38:14.230 --> 38:16.930
一个元素是里边放什么放index

38:16.930 --> 38:19.130
对他的下标

38:19.830 --> 38:21.130
就是index加1吗

38:21.830 --> 38:24.630
另一个呢就是item.title

38:26.670 --> 38:29.070
那么在过去啊在5u2的时候

38:29.370 --> 38:30.270
我们要写key啊

38:30.270 --> 38:31.570
因为这个vc这个角色加了

38:31.570 --> 38:33.770
他倒是没有给你包了一个key的错误

38:33.870 --> 38:34.770
key的警告

38:34.870 --> 38:36.970
但是实际上这里在vucity

38:36.970 --> 38:39.170
cd里边他都要包了个key的警告的啊

38:39.470 --> 38:40.870
你是应该加上key的

38:40.970 --> 38:43.070
但是现在我们没有加key对不对

38:43.070 --> 38:44.670
那么5u2的时候

38:44.670 --> 38:46.070
是不是让你把key加到这儿

38:46.270 --> 38:48.870
每一个template里面的每一个更节点

38:49.270 --> 38:49.670
对吧

38:50.070 --> 38:51.270
在5u3里面不需要了

38:51.770 --> 38:54.670
以前以前的这样子写item.id

38:57.270 --> 38:58.270
item.id

38:58.970 --> 39:01.170
那么在5u3里面不能这样子写啊

39:01.270 --> 39:03.470
5u3里面如果说遇到这种情况的话

39:03.670 --> 39:04.670
没有根元素

39:05.070 --> 39:06.570
导致让我们必须要用个template

39:06.570 --> 39:08.370
那么你的key直接写到template里面

39:09.370 --> 39:11.670
这是5u3这一块的变化key值

39:12.070 --> 39:13.670
当template使用v4循环的时候

39:13.670 --> 39:14.970
把key值放到template里面

39:14.970 --> 39:16.370
而不是它的指元素中

39:17.070 --> 39:17.770
懂了意思吗

39:18.170 --> 39:19.770
好保存啊看一下

39:19.970 --> 39:20.370
发现

39:21.870 --> 39:23.370
你看这就写就搞定了

39:28.610 --> 39:30.110
好下来一定要去做一下啊

39:30.110 --> 39:32.010
体会一下5u3在这一块的变化

39:33.510 --> 39:35.010
好了那么这个效果做出来了

39:35.010 --> 39:36.110
效果做出来的过后呢

39:36.110 --> 39:37.110
最后我们说一下

39:38.210 --> 39:40.410
哦还有一些没想到的啊说一下

39:40.410 --> 39:42.410
一个是key的另外一种情况

39:42.410 --> 39:44.910
就是在使用vf vlcf

39:44.910 --> 39:47.010
这消息了 vlcf

39:47.810 --> 39:50.310
以及vlcf的时候就是写分支的时候

39:51.310 --> 39:52.910
你不需要再指定key值了

39:53.810 --> 39:54.610
啊这个地方呢

39:54.610 --> 39:55.910
我给大家掩饰一下吧

39:55.910 --> 39:57.010
就在这里掩饰啊

39:57.310 --> 39:58.210
就在这里掩饰

40:00.510 --> 40:01.710
呃在下边

40:05.060 --> 40:05.760
先说这个吧

40:05.760 --> 40:07.160
我们先把这个地方说了

40:07.360 --> 40:08.360
就fragment啊

40:08.660 --> 40:10.460
这个地方很简单非常非常简单

40:10.460 --> 40:11.760
现在在组件中

40:11.760 --> 40:13.060
你可以写多个根节点的

40:13.460 --> 40:14.360
可以写多个根的

40:14.360 --> 40:15.460
这是一个根啊

40:15.460 --> 40:16.360
我还可以写一个

40:17.060 --> 40:17.860
没问题的啊

40:17.860 --> 40:19.260
这5u3里面是允许的

40:19.260 --> 40:20.760
这个东西相当于是

40:20.760 --> 40:22.060
rex的fragment

40:22.960 --> 40:24.460
对他有个虚拟的根节点

40:24.660 --> 40:26.060
对他可以自动给你生成的

40:26.060 --> 40:26.760
你不用管

40:27.460 --> 40:28.560
可以写多个根了啊

40:28.560 --> 40:29.360
我再说一下

40:29.660 --> 40:31.760
呃那么如果说你在vscode里边了

40:31.760 --> 40:33.260
这里应该会爆一个红线啊

40:33.260 --> 40:34.560
有可能会爆一个红线

40:34.560 --> 40:36.460
这个跟那个verter啊

40:37.460 --> 40:38.660
这个插件有关系

40:40.060 --> 40:40.660
这个插件

40:40.660 --> 40:42.460
这个插件将来正式更新了过后了

40:42.460 --> 40:44.060
就适应了5u3过后了

40:44.060 --> 40:45.260
应该这个问题可以解决

40:45.460 --> 40:46.260
那么现阶段呢

40:46.260 --> 40:48.260
你可以通过这种方式来解决啊

40:48.260 --> 40:49.260
就是设置

40:49.960 --> 40:51.360
设置去收一下verter

40:52.360 --> 40:54.760
呃那个template

40:56.560 --> 40:57.360
把这个去掉

40:57.360 --> 40:58.660
哎看一下我找一下啊

41:00.660 --> 41:01.760
把这个这个去掉

41:02.360 --> 41:03.660
就是验证模板啊

41:03.660 --> 41:04.860
5u里边的模板

41:05.160 --> 41:06.860
你把这个勾如果它不认识勾上了

41:06.860 --> 41:08.460
勾上的话就会遇到这么一个问题

41:08.460 --> 41:09.660
它识别不了

41:09.760 --> 41:10.960
那么把这个勾去掉

41:11.560 --> 41:13.860
其实它识不识别跟运营出来的效果

41:13.860 --> 41:14.760
没有什么影响

41:15.060 --> 41:16.160
好我再说一下

41:16.960 --> 41:18.260
说一下这上面这个问题

41:19.660 --> 41:20.660
啊其实很简单的

41:20.960 --> 41:22.260
在5u2里边

41:22.360 --> 41:23.660
因为我现在不是5u2啊

41:23.660 --> 41:25.460
我没没没办法给大家演示

41:25.660 --> 41:27.260
来说说明这个现象流行的

41:27.860 --> 41:30.460
比方说这里原来有一个

41:33.760 --> 41:34.560
div吧

41:35.560 --> 41:38.960
这个div里边呢有两个div

41:39.560 --> 41:41.860
一个div里面显示的是

41:44.420 --> 41:45.120
帐号

41:47.360 --> 41:48.760
后边一个input元素

41:50.360 --> 41:52.660
另一个div呢显示的是

41:54.460 --> 41:54.960
label

41:57.000 --> 41:59.600
手机号啊有登录的两种方式

41:59.800 --> 42:01.600
一个是帐号登录一个是手机号登录

42:01.600 --> 42:02.300
也有一个input

42:02.300 --> 42:03.800
你看这一个结构是一样的

42:04.800 --> 42:06.600
那么目前到底是用帐号登录

42:06.600 --> 42:07.800
还是有手机号登录呢

42:07.800 --> 42:09.000
取决于我们一个数据

42:09.200 --> 42:09.600
你看

42:10.400 --> 42:11.100
在这里呢

42:13.590 --> 42:14.490
写上一个数据啊

42:14.490 --> 42:16.090
就是数据的值呢

42:16.090 --> 42:16.690
就是

42:18.890 --> 42:19.290
e

42:20.590 --> 42:21.290
account

42:22.090 --> 42:22.890
isaccount

42:23.290 --> 42:24.890
是否使用的是帐号登录

42:25.190 --> 42:26.590
默认的是去

42:29.660 --> 42:30.360
加那个vif

42:31.960 --> 42:34.060
然后再提供就行了吧

42:34.060 --> 42:34.960
就这个东西行了

42:35.960 --> 42:37.160
isaccount

42:38.740 --> 42:40.040
啊就这么个东西

42:40.940 --> 42:41.940
如果说

42:43.740 --> 42:44.340
vif

42:47.700 --> 42:48.600
isaccount

42:49.500 --> 42:50.900
如果说使用帐号登录的话

42:50.900 --> 42:51.800
那么就显示这一块

42:51.900 --> 42:53.500
vls就显示下面这一块

42:54.600 --> 42:55.300
什么意思

42:58.870 --> 43:00.470
目前是这个帐号登录

43:00.770 --> 43:02.970
啊然后呢下面呢我们这里

43:03.270 --> 43:05.170
如果说他把它设为force的话

43:07.790 --> 43:08.790
是不是手机号登录

43:08.890 --> 43:09.290
对吧

43:09.690 --> 43:11.290
啊央视不管了啊有点难看

43:11.990 --> 43:12.390
好

43:12.790 --> 43:14.890
呃现在呢我们下面加上一个按钮

43:15.790 --> 43:16.390
达成

43:17.390 --> 43:19.590
切换登录方式

43:19.890 --> 43:21.090
那么点这个按钮

43:22.290 --> 43:22.790
click

43:23.290 --> 43:24.690
啊把这个e isaccount

43:24.690 --> 43:25.690
来重新改一下

43:26.490 --> 43:27.190
account

43:27.890 --> 43:28.490
等于

43:28.890 --> 43:29.990
isaccount

43:32.410 --> 43:32.910
来看

43:33.110 --> 43:33.510
切换

43:36.640 --> 43:37.640
你用vul

43:37.740 --> 43:38.540
去做一下

43:39.040 --> 43:41.140
你会发现vul呢有一个问题

43:43.660 --> 43:44.460
点击过后

43:44.760 --> 43:45.960
他这里的数据呢

43:46.060 --> 43:47.560
刚才写的数据仍然保留

43:48.860 --> 43:50.260
他就有这么一个问题

43:52.180 --> 43:54.280
为于是呢在vul2里边要解决

43:54.280 --> 43:55.180
这个问题怎么办呢

43:55.180 --> 43:57.080
我要给他们每一个div啊

43:57.180 --> 43:58.180
加上一个key

43:58.280 --> 43:59.680
表示他的key为1

43:59.780 --> 44:01.880
他的key为2才能够解决

44:02.180 --> 44:02.680
对吧

44:03.080 --> 44:04.780
就这么个意思我就想说这个

44:06.380 --> 44:07.980
在vul2里面是不是必须要这样做

44:07.980 --> 44:09.280
才能解决这个问题啊

44:09.680 --> 44:11.680
vul应该是选过这个点的

44:12.880 --> 44:14.780
那么现在在vul3里面不需要了

44:14.780 --> 44:16.280
你可以看到啊不需要了

44:16.680 --> 44:19.580
因为他vul3里面他发现了分支过后

44:20.180 --> 44:22.480
他会自动的给分每一个分支一个

44:22.480 --> 44:23.280
唯一的key

44:23.480 --> 44:24.880
比如你不用这样子做了

44:25.580 --> 44:26.580
也就是说呢

44:26.580 --> 44:29.680
现在vul3里面key值啊

44:30.280 --> 44:33.080
就加到vul3循环里面就够了

44:33.080 --> 44:34.080
就需要手动加

44:34.280 --> 44:35.980
其他地方的分支这里

44:35.980 --> 44:37.680
他会自动给你加唯一的key值

44:38.180 --> 44:39.180
我就想说这个啊

44:39.180 --> 44:39.880
其他就没啥了

44:41.580 --> 44:42.480
就这个的意思

44:44.180 --> 44:46.880
然后呢就是如果你能不能手动加key呢

44:46.880 --> 44:48.080
也可以手动加key啊

44:48.080 --> 44:48.880
但是没必要了

44:48.880 --> 44:50.880
你手动给加key的话也要保证key为1

44:50.880 --> 44:52.580
要不然说那我想重用怎么办

44:54.580 --> 44:55.380
我想重用的话

44:55.380 --> 44:56.680
能不能把key值写成一样

45:04.060 --> 45:06.360
这个地方倒是没有力报警告啊

45:06.560 --> 45:09.160
将来那个角色加给你做好一点的话

45:09.560 --> 45:11.060
应该要稍微报警告的

45:11.960 --> 45:13.160
是不是没法切换了

45:13.260 --> 45:14.660
那么他为什么没法切换了

45:14.660 --> 45:15.560
给key值一样

45:15.560 --> 45:16.960
他不一定不能一样的啊

45:17.460 --> 45:18.760
他跟那个vul3的

45:19.060 --> 45:19.960
我们之前不是讲了

45:19.960 --> 45:21.260
渲染效率的提升吗

45:21.660 --> 45:22.960
有个东西叫block tree

45:23.360 --> 45:24.760
分支这里每分

45:24.760 --> 45:26.260
当他看到有分支的时候

45:26.260 --> 45:27.660
他会建立一个block

45:29.360 --> 45:30.960
所以说呢这一块呢

45:31.060 --> 45:32.660
由于你看这个block里边

45:32.660 --> 45:34.760
没有人就如果把整个当成个block

45:35.760 --> 45:37.060
block里边我们是不是说过

45:37.060 --> 45:37.960
他会记录什么

45:37.960 --> 45:39.360
记录动态节点

45:39.360 --> 45:40.660
是没有一个动态节点

45:41.860 --> 45:42.960
然后就导致了

45:43.360 --> 45:44.060
就导致了

45:44.060 --> 45:45.260
他觉得不需要更新

45:46.160 --> 45:49.060
所以说呢他由于vul3的特有方式啊

45:49.060 --> 45:50.360
key值是不能相同的

45:50.560 --> 45:51.460
一定不能相同

45:51.460 --> 45:52.660
那又说那怎么办呢

45:52.660 --> 45:53.960
我要重用这个input

45:54.860 --> 45:57.160
你绑立到同一个数数据不完了吗

45:57.860 --> 45:58.360
对不对

45:58.660 --> 46:02.060
然后有个数据叫account all mobile

46:02.360 --> 46:04.260
一绑用微墨的绑立到同一个数据

46:04.260 --> 46:04.960
不就完了吗

46:05.560 --> 46:06.860
这还是正确的做法啊

46:06.860 --> 46:09.160
因为它元素结构上就不应该重用

46:09.760 --> 46:11.060
元素结构上是不是不应该重用

46:11.060 --> 46:11.760
它是一个input

46:11.760 --> 46:12.560
它是一个input

46:12.560 --> 46:13.760
凭什么是一个呢

46:13.760 --> 46:14.860
就不应该是一个

46:14.960 --> 46:15.260
对吧

46:15.260 --> 46:16.960
过去的那种做法才是错误的

46:17.260 --> 46:18.660
不要因为你做错误的东西

46:18.660 --> 46:19.760
做了太久了

46:20.160 --> 46:21.560
然后导致了自己的

46:22.060 --> 46:22.760
跟着

46:22.860 --> 46:23.760
跟着走远了

46:23.760 --> 46:25.860
这些现在才是回归到正确的做法

46:25.860 --> 46:27.660
因为从我们熟悉的元素结构上

46:27.660 --> 46:28.860
本来就是两个东西

46:29.460 --> 46:31.460
只不过你希望的是这两个东西

46:31.460 --> 46:32.960
使用一个值而已

46:33.360 --> 46:35.760
是不是该用微墨的绑立同一个值

46:35.760 --> 46:36.860
这才是正确的做法

46:37.260 --> 46:37.660
是吧

46:38.360 --> 46:38.760
好

46:39.160 --> 46:40.360
这一刻就说这个啊

46:41.160 --> 46:41.960
主要是通过一个案例

46:41.960 --> 46:43.160
把这些东西也说明一下

46:43.160 --> 46:44.160
其实都很简单的

46:44.160 --> 46:45.360
大家把这个案例做一次

46:45.360 --> 46:46.260
基本上都明白

46:46.860 --> 46:47.060
好

46:47.060 --> 46:48.060
这是这一刻的内容

