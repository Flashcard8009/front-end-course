WEBVTT

00:00.880 --> 00:04.180
上课之前 我先说一下

00:04.180 --> 00:06.680
上节课我们讲安装和下载包

00:06.680 --> 00:09.280
当时好像少讲的东西

00:09.280 --> 00:10.780
顺便说一句

00:10.780 --> 00:13.680
就是你下载包和安装包的时候

00:13.680 --> 00:15.980
其实你可以同时下载安装多个包

00:15.980 --> 00:17.580
比方说 比如例子

00:17.580 --> 00:22.480
比方说 我们在这 总能中打开

00:22.480 --> 00:25.280
再点

00:25.280 --> 00:28.480
比方说我们要同时安装接框类

00:28.480 --> 00:30.380
或者是和楼单洗包

00:30.480 --> 00:31.380
那么怎么安装呢

00:31.380 --> 00:33.680
我们可以这样子写NPMI

00:33.680 --> 00:35.380
然后接query

00:35.380 --> 00:36.280
空格

00:36.280 --> 00:37.380
楼单洗

00:37.380 --> 00:38.980
回车就完事了

00:38.980 --> 00:41.080
它就可以同时下载两个包

00:41.080 --> 00:42.880
然后一起把它加到楼单

00:42.880 --> 00:44.180
就是目睹下边去

00:44.180 --> 00:44.780
对吧

00:44.780 --> 00:46.680
这是补充一句

00:46.680 --> 00:47.980
很简单的东西

00:47.980 --> 00:48.680
补充一句

00:48.680 --> 00:50.580
然后把它也删掉

00:50.580 --> 00:52.780
然后回到我们这几课

00:52.780 --> 00:55.480
这几课我们讲包的配置

00:55.480 --> 00:57.580
那么这几课学习的过后

00:57.580 --> 00:59.280
它可以解决什么样的问题

00:59.380 --> 01:00.280
首先我们看一下

01:00.280 --> 01:02.680
目前我们学习了安装包

01:02.680 --> 01:04.980
它还遇到什么样的问题

01:04.980 --> 01:05.680
第一个问题

01:05.680 --> 01:07.480
就是拷贝的工程之后

01:07.480 --> 01:08.880
你如何还原

01:08.880 --> 01:10.180
啥意思

01:10.180 --> 01:11.680
我们上一课说了

01:11.680 --> 01:13.280
你拷贝一个工程

01:13.280 --> 01:14.980
你把工程上传到服务器

01:14.980 --> 01:16.780
或者是把你的工程分享出去

01:16.780 --> 01:18.280
给别人使用

01:18.280 --> 01:20.680
那么你是不能拷贝哪个目录的

01:20.680 --> 01:22.080
哪个目录是不能拷贝的

01:22.080 --> 01:24.080
是不是个no的嘛就是目录

01:24.080 --> 01:25.580
这个目录是不是不能拷贝

01:25.580 --> 01:26.680
因为东西太多了

01:26.680 --> 01:26.880
对吧

01:26.880 --> 01:28.580
大家也看到了几千个文件

01:28.580 --> 01:30.380
我们才安装了那麽几个包

01:30.380 --> 01:32.080
才就有几千个文件了

01:32.080 --> 01:33.880
那么实际上我们以后

01:33.880 --> 01:35.380
特别是开发一些大型应用

01:35.380 --> 01:38.180
像rexrview开发的应用

01:38.180 --> 01:40.580
那文件可能都上万个文件了

01:40.580 --> 01:41.780
那这个东西能拷贝吗

01:41.780 --> 01:43.380
肯定是不能拷贝的

01:43.380 --> 01:44.080
那拷贝的话

01:44.080 --> 01:45.980
只要有一个文件到时候传输出问题

01:45.980 --> 01:47.780
它整个叫出问题

01:47.780 --> 01:49.580
所以说我们通常是不拷贝

01:49.580 --> 01:52.180
no的嘛就是目录

01:52.180 --> 01:53.780
那么不拷贝这个目录的话

01:53.780 --> 01:55.480
那麽你拷贝过去过后

01:55.480 --> 01:57.480
那边它就不知道怎麽一带了

01:57.480 --> 01:58.680
比方说我们这里

01:58.680 --> 02:01.080
由于它不拷贝这个no的嘛就是目录

02:01.080 --> 02:02.480
你拷贝其他代码文件

02:02.480 --> 02:04.280
当然我们上去可能没谁代码

02:04.280 --> 02:05.780
如果说你还有其他代码

02:05.780 --> 02:06.880
那么其他代码里面

02:06.880 --> 02:08.680
就是我们自己工程的代码

02:08.680 --> 02:09.280
对吧

02:09.280 --> 02:10.680
我们自己工程写的一些index

02:10.680 --> 02:11.880
sr.js

02:11.880 --> 02:13.180
sr.js

02:13.180 --> 02:15.080
v.js等等一大堆

02:15.080 --> 02:16.780
我们自己写的很多.js

02:16.780 --> 02:17.780
那些.js

02:17.780 --> 02:18.980
我们后边会讲

02:18.980 --> 02:19.780
那个.js里面

02:19.780 --> 02:21.680
它是可以用这里面的包的

02:21.680 --> 02:22.080
对吧

02:22.080 --> 02:23.980
是不是可以用这里面的包

02:23.980 --> 02:25.480
那麽你拷贝过去过后

02:25.480 --> 02:28.180
由于它没有no的嘛就是目录

02:28.180 --> 02:30.380
那麽那边工程是不是要运行出问题

02:30.380 --> 02:30.580
对吧

02:30.580 --> 02:31.880
它没有下载这些包

02:31.880 --> 02:32.880
那麽就意味到

02:32.880 --> 02:34.180
就是会出那个问题

02:34.180 --> 02:35.980
就是到了那边

02:35.980 --> 02:37.780
你是怎麽去把它还原

02:37.780 --> 02:40.280
这种依赖怎麽还原

02:40.280 --> 02:41.180
这是这个问题

02:41.180 --> 02:44.180
因为那边它不知道你依赖哪些东西

02:44.180 --> 02:45.980
所以第一个问题就是遇到了

02:45.980 --> 02:47.680
第二个问题呢

02:47.680 --> 02:51.680
如何区分开发依赖和生产依赖

02:51.680 --> 02:52.680
什麽意识呢

02:52.680 --> 02:53.680
就是有些依赖

02:53.680 --> 02:55.980
它是在生产环境里边用的

02:55.980 --> 02:59.980
而开发环境可能会用到一些额外的依赖

02:59.980 --> 03:02.380
比方说生产环境里边用到一些包

03:02.380 --> 03:03.980
开发环境可能要做一些测试

03:03.980 --> 03:06.780
安装了我们上节课说的mucha

03:06.780 --> 03:08.580
那麽安装了一些生产

03:08.580 --> 03:09.980
开发环境开发的时候

03:09.980 --> 03:11.680
结端它需要用到的包

03:11.680 --> 03:13.780
那麽如何来进行区分呢

03:13.780 --> 03:14.880
首先大家要清楚

03:14.880 --> 03:16.080
为什麽要区分

03:16.080 --> 03:17.280
那还是一个问题

03:17.280 --> 03:19.180
我把这个包上传到服务器过后

03:19.180 --> 03:22.580
由于我没有上传No的嘛就是目录

03:22.580 --> 03:24.580
那麽服务器那边是不是在还原

03:24.580 --> 03:27.580
是不是要把这个它用到的包在还原

03:27.580 --> 03:28.580
那麽还原的时候

03:28.580 --> 03:31.480
它只需要还原生产环境

03:31.480 --> 03:32.780
应该用到的东西就行了

03:32.780 --> 03:32.980
对吧

03:32.980 --> 03:35.180
我们整个代码运行的时候

03:35.180 --> 03:36.380
要用到的那些包

03:36.380 --> 03:38.080
还原这些就行了

03:38.080 --> 03:40.280
像什麽测试啊这些东西

03:40.280 --> 03:41.680
是不是就可以不用还原

03:41.680 --> 03:43.080
因为到了服务器呢

03:43.080 --> 03:44.880
那麽开发环境额外的东西

03:44.880 --> 03:46.380
那就不用还原了

03:46.380 --> 03:48.780
说这个东西也是个问题

03:48.780 --> 03:50.480
好第三个问题

03:50.480 --> 03:52.280
那如果说你的项目呢

03:52.280 --> 03:53.280
自身也是个包

03:53.280 --> 03:54.380
因为我们开发项目啊

03:54.380 --> 03:55.480
比方说我们开发

03:55.480 --> 03:58.080
不是一个用于啊

03:58.080 --> 04:00.180
像我们说的用于生产环境的

04:00.180 --> 04:03.080
而就就是一个就是

04:03.080 --> 04:04.980
开发让别人使用的啊

04:04.980 --> 04:06.480
一些通用的库啊

04:06.480 --> 04:08.480
或者一些一些一些插件

04:08.480 --> 04:10.080
那麽我们开发的这个项目呢

04:10.080 --> 04:11.580
它也是一个包

04:11.580 --> 04:13.680
那麽这个包里面肯定要包含一些信息

04:13.680 --> 04:15.280
我们之前讲过包的概念

04:15.280 --> 04:16.980
包里面包含什麽作者啊

04:16.980 --> 04:18.780
包的名称啊等等等等

04:18.780 --> 04:19.580
对吧

04:19.580 --> 04:20.580
那麽我怎麽来知道

04:20.580 --> 04:22.280
这个包里面的信息呢

04:22.280 --> 04:23.480
那麽像这些问题呢

04:23.480 --> 04:24.780
这些可都能解决

04:24.780 --> 04:27.080
这一课我们学习的配置文件

04:27.080 --> 04:28.980
就是在解决这个事情

04:28.980 --> 04:30.880
那麽我们这几课学习的包的配置

04:30.880 --> 04:31.680
什麽叫包的配置

04:31.680 --> 04:33.380
我们这几课学习的包的配置

04:33.380 --> 04:35.780
指的是针对一个包啊

04:35.780 --> 04:38.180
或者是针对我们自己的工程

04:38.180 --> 04:39.480
它如何来配置

04:39.480 --> 04:41.780
来描述一些信息

04:41.780 --> 04:43.980
那麽我们首先看一个配置文件

04:43.980 --> 04:45.480
这个配置文件呢

04:45.480 --> 04:46.180
它是这样子

04:46.180 --> 04:47.780
它的逻辑是这样子的

04:47.780 --> 04:52.480
NPM它将每一个使用的NPM的工程

04:52.480 --> 04:54.080
都看作是一个包

04:54.080 --> 04:55.880
比方说我们自己开发一个项目

04:55.880 --> 04:58.280
那麽我们自己开发的项目本身

04:58.280 --> 04:59.880
它就是一个包

04:59.880 --> 05:02.580
比方说我们项目里面要用到什麽解夸锐啊

05:02.580 --> 05:05.280
要用到什麽boot strap啊这些东西

05:05.280 --> 05:07.280
那麽我们的项目呢就是个包

05:07.280 --> 05:08.280
那用到了别的东西呢

05:08.280 --> 05:09.380
别的东西又是个包

05:09.380 --> 05:10.780
它是不是形成一代关系

05:10.780 --> 05:11.480
对吧

05:11.480 --> 05:12.580
它是就这样子看的

05:12.580 --> 05:14.880
我们的项目本身那就是个包

05:14.880 --> 05:15.580
比方说上一课呢

05:15.580 --> 05:17.380
我们这个文件讲

05:17.380 --> 05:19.280
那麽可以认为这个文件讲的

05:19.280 --> 05:20.180
就是一个包

05:20.180 --> 05:23.180
我们这个文件讲本身的就是一个包

05:23.180 --> 05:24.080
那麽这个包呢

05:24.080 --> 05:25.280
它肯定有包的信息

05:25.280 --> 05:25.580
对吧

05:25.580 --> 05:26.080
包的信息

05:26.080 --> 05:27.380
包的名字啊

05:27.380 --> 05:30.980
包的就是各种各样的信息啊

05:30.980 --> 05:31.680
那麽这个东西

05:31.680 --> 05:33.580
肯定需要一个东西来描述

05:33.580 --> 05:34.780
通过什麽描述呢

05:34.780 --> 05:36.680
它是通过一个文件来描述的

05:36.680 --> 05:38.480
这个文件就是我们这几课要讲的

05:38.480 --> 05:40.180
配置文件

05:40.180 --> 05:41.380
而且这个文件呢

05:41.380 --> 05:43.180
它是有一个固定名称

05:43.180 --> 05:44.980
它的名称是固定的

05:44.980 --> 05:46.480
那固定的名称是什麽呢

05:46.580 --> 05:48.580
package.json

05:48.580 --> 05:49.880
后续名都给写好了

05:49.880 --> 05:51.080
.json

05:51.080 --> 05:51.980
也就是说

05:51.980 --> 05:53.280
通过这个后续名呢

05:53.280 --> 05:53.980
你可以知道啊

05:53.980 --> 05:55.780
这个文件里面存放的是什麽

05:55.780 --> 05:57.580
json格式的

05:57.580 --> 05:58.580
自付串

05:58.580 --> 06:00.380
json格式的自付串

06:00.380 --> 06:00.980
因此呢

06:00.980 --> 06:01.980
我们今后呢

06:01.980 --> 06:05.080
反而是要使用NPM的工程

06:05.080 --> 06:08.080
我们都会在工程的跟目录下面

06:08.080 --> 06:10.680
去建立这么一个配置文件

06:10.680 --> 06:11.680
比方说我们这一课啊

06:11.680 --> 06:12.480
比方说啊

06:12.480 --> 06:14.280
这一课就是这么一个工程

06:14.280 --> 06:16.080
把这个东西删掉

06:16.080 --> 06:17.380
这一课就是这么一个工程

06:17.380 --> 06:18.080
在工程里面

06:18.080 --> 06:19.380
我们可以新建一个文件

06:19.380 --> 06:23.280
给它取个名字叫做package.json

06:23.280 --> 06:24.580
啊

06:24.580 --> 06:25.580
就是这么一个文件

06:25.580 --> 06:26.680
在这个文件里面写

06:26.680 --> 06:27.980
它的意思

06:27.980 --> 06:28.980
没了意思吧

06:28.980 --> 06:29.480
当然了

06:29.480 --> 06:31.980
这是一种建立这个文件的方式

06:31.980 --> 06:33.080
另外呢

06:33.080 --> 06:35.080
我们也可以通过一个命令

06:35.080 --> 06:36.180
来建立这个文件

06:36.180 --> 06:38.380
就是NPM init

06:38.380 --> 06:39.680
NPM初始化

06:39.680 --> 06:40.780
通过这个命令呢

06:40.780 --> 06:42.780
像这个

06:42.780 --> 06:43.580
通过这个命令呢

06:43.580 --> 06:44.980
像这个就是

06:44.980 --> 06:46.780
文件夹这个工程目录下面

06:46.780 --> 06:47.980
去建立这么一个文件

06:47.980 --> 06:48.380
好吧

06:48.380 --> 06:48.980
三条啊

06:48.980 --> 06:50.080
两种方式都可以

06:50.080 --> 06:50.480
一种呢

06:50.480 --> 06:51.980
是可以自己收写

06:51.980 --> 06:52.480
另外一种呢

06:52.480 --> 06:55.080
是可以可以通过NPM init来创建

06:55.080 --> 06:55.780
有什么区别呢

06:55.780 --> 06:56.680
没有区别

06:56.680 --> 06:57.580
没有区别

06:57.580 --> 06:58.680
可能唯一的区别就是

06:58.680 --> 07:01.280
你用NPM init创建的时候呢

07:01.280 --> 07:04.580
它会有一个就是相当于是

07:04.580 --> 07:05.580
相当于是什么

07:05.580 --> 07:06.380
导航啊

07:06.380 --> 07:08.480
像就是引导你一步一步

07:08.480 --> 07:10.780
把这些文件里边的基本配置

07:10.780 --> 07:11.680
给你写出来

07:11.680 --> 07:12.680
还会引导你

07:12.680 --> 07:14.780
我们这里回车

07:14.780 --> 07:15.780
你看呀

07:15.780 --> 07:17.280
他可以说说的大堆啊

07:17.280 --> 07:17.780
说的大堆

07:17.780 --> 07:19.080
你不用去管他

07:19.080 --> 07:19.580
好

07:19.580 --> 07:20.580
那么这里呢

07:20.580 --> 07:22.780
我们来看

07:22.780 --> 07:24.080
他会一步一步问你

07:24.080 --> 07:24.780
他问你

07:24.780 --> 07:27.380
你这个包的名字是什么呢

07:27.380 --> 07:28.480
如果说你不写的话

07:28.480 --> 07:31.080
他默认就按照这个文件夹的名字

07:31.080 --> 07:32.380
作为包的名字

07:32.380 --> 07:34.980
他会按照文件夹来作为包的名字

07:34.980 --> 07:36.480
那么这个文件墙呢

07:36.480 --> 07:38.080
他以为他里边有中文啊

07:38.080 --> 07:39.780
这个字是不允许的啊

07:39.780 --> 07:40.580
在NPM呢

07:40.580 --> 07:41.480
他这个写配置

07:41.480 --> 07:44.680
因为这个配置文件是要给NPM读取的

07:44.680 --> 07:46.280
NPM是要到时候呢

07:46.280 --> 07:47.480
你发布包的话

07:47.480 --> 07:50.280
你是要用这个用到这个配置文件的

07:50.280 --> 07:50.880
所以说呢

07:50.880 --> 07:53.280
他里边也要符合NPM的规范

07:53.280 --> 07:54.180
这个包的名字呢

07:54.180 --> 07:56.280
他必须是英文单词制服啊

07:56.280 --> 07:58.680
他支持这个横杠作为连接符

07:58.680 --> 07:59.180
因此呢

07:59.180 --> 07:59.880
你彻底呢

07:59.880 --> 08:00.980
我们这里有中文啊

08:00.980 --> 08:01.680
肯定是不行

08:01.680 --> 08:02.880
比方说我这里回车

08:02.880 --> 08:03.380
他说吧

08:03.380 --> 08:03.880
sorry

08:03.880 --> 08:04.280
对吧

08:04.280 --> 08:04.980
说了sorry

08:04.980 --> 08:05.480
你就明白了

08:05.480 --> 08:06.080
对吧

08:06.080 --> 08:07.780
他说啊

08:07.780 --> 08:09.280
你这个名字呢

08:09.280 --> 08:10.980
是不能有这些特殊制服的

08:10.980 --> 08:12.280
你只能是英文制服

08:12.280 --> 08:13.280
那么怎么写呢

08:13.280 --> 08:14.780
这个名字随便写吧

08:14.780 --> 08:15.280
呃

08:15.280 --> 08:18.580
就比方说Chapter 2

08:18.580 --> 08:19.780
比方说我们随便写个名字吧

08:19.780 --> 08:20.780
包的名字

08:20.780 --> 08:21.180
好

08:21.180 --> 08:21.480
回车

08:23.280 --> 08:23.480
好

08:23.480 --> 08:24.380
问你

08:24.380 --> 08:25.680
然后接下来又问你啊

08:25.680 --> 08:27.680
版本是多少啊

08:27.680 --> 08:29.680
你如果说你直接写回车的话

08:29.680 --> 08:31.780
默认就是1.0.0

08:31.780 --> 08:33.380
我们来看一下这个版本啊

08:33.380 --> 08:33.780
版本呢

08:33.780 --> 08:35.380
我们先简单的认识一下

08:35.380 --> 08:36.580
版本的基本知识

08:36.580 --> 08:37.780
可能有一些同学呢

08:37.780 --> 08:39.280
平时经常按照软件

08:39.280 --> 08:41.180
看到软件各种各样的版本啊

08:41.180 --> 08:42.380
但是呢都还不清楚

08:42.380 --> 08:43.480
版本的基本知识

08:43.480 --> 08:44.880
我们来认识一下啊

08:44.880 --> 08:45.980
我们他这里的版本呢

08:45.980 --> 08:47.180
npm是有规范的

08:47.180 --> 08:48.080
规范是什么呢

08:48.080 --> 08:50.280
你在版本应该是这样子写

08:50.280 --> 08:51.780
大家平时看的一些软件里边

08:51.780 --> 08:53.080
他版本都是这样写的

08:53.080 --> 08:53.680
对吧

08:53.680 --> 08:54.380
差差点

08:54.380 --> 08:54.980
差差点

08:54.980 --> 08:55.580
差差点

08:55.580 --> 08:58.180
他比方说1.2.3啊

08:58.180 --> 09:01.680
或者是3.165.0

09:01.680 --> 09:02.080
对吧

09:02.080 --> 09:02.680
就这样子写的

09:02.680 --> 09:03.380
对不对

09:03.380 --> 09:05.180
那为什么版本都是这样子写呢

09:05.180 --> 09:06.780
他是有个版本规范

09:06.780 --> 09:07.780
版本规范是什么呢

09:07.780 --> 09:08.980
他是主版本号

09:09.080 --> 09:10.580
2.4版本号

09:10.580 --> 09:12.680
2.補丁版本号

09:12.680 --> 09:14.680
我们一切也来打开认识一下啊

09:14.680 --> 09:16.780
什么叫主版本号呢

09:16.780 --> 09:17.280
主版本号

09:17.280 --> 09:19.280
这个版本一定是不断的升高的啊

09:19.280 --> 09:20.580
不断的升高

09:20.580 --> 09:22.880
主版本号就是第一个数字

09:22.880 --> 09:24.980
第一个数字就是主版本号

09:24.980 --> 09:29.080
什么情况下会导致主版本号升高呢

09:29.080 --> 09:29.880
那么

09:29.880 --> 09:33.380
只有当程序发生重大的变化的时候

09:33.380 --> 09:35.580
才会增长啊

09:35.580 --> 09:38.680
比方说举个例子啊

09:39.680 --> 09:40.480
以前呢

09:40.480 --> 09:41.380
你们用QQ

09:41.380 --> 09:41.780
对不对

09:41.780 --> 09:43.480
QQ没有群功能啊

09:43.480 --> 09:43.980
最早的时候

09:43.980 --> 09:44.680
我们可以啊

09:44.680 --> 09:46.080
认为QQ没有群功能

09:46.080 --> 09:48.080
只能好友之间好友之间聊天

09:48.080 --> 09:49.380
突然有一天还加了一个群

09:49.380 --> 09:50.580
是不是重大更新

09:50.580 --> 09:51.080
对不对

09:51.080 --> 09:53.980
它会对整个产品造成深远的影响

09:53.980 --> 09:55.880
还有这么这么重大的更新的时候呢

09:55.880 --> 09:57.980
主版本号会发生变化啊

09:57.980 --> 09:59.680
会新增主版本号啊

09:59.680 --> 10:00.380
比方说

10:00.380 --> 10:01.980
你新增了一个重要的功能

10:01.980 --> 10:03.780
或者是新增了大量的API

10:03.780 --> 10:05.280
或者是技术架构

10:05.280 --> 10:06.380
实现了重大变化

10:06.380 --> 10:08.480
不然你们后边要学五幼

10:08.480 --> 10:11.480
五幼现在很快可能要出这个3.0了

10:11.480 --> 10:14.280
3.0它就是技术架构发生了天翻附近的变化

10:14.280 --> 10:17.480
基本上五幼的整个代码都得到重写了

10:17.480 --> 10:19.280
是不是主版本号变更新了

10:19.280 --> 10:21.180
我们比如说五幼二五幼三

10:21.180 --> 10:23.380
都指的是它的主版本号

10:23.380 --> 10:25.080
明儿的意思吧

10:25.080 --> 10:25.580
接下来呢

10:25.580 --> 10:26.780
是四版本号

10:26.780 --> 10:28.580
就第二个数字

10:28.580 --> 10:29.980
四版本号呢是什么

10:29.980 --> 10:32.580
是新增了一些小的功能啊

10:32.580 --> 10:35.380
发生了一些小的变化的时候才会增长啊

10:35.380 --> 10:37.180
比如说

10:37.180 --> 10:39.980
一面上哪个地方多了一个图标

10:39.980 --> 10:42.480
做了一些小范围的修改

10:42.480 --> 10:45.080
或者是增加了一些辅助的API

10:45.080 --> 10:46.580
没有什么核心的变化

10:46.580 --> 10:50.180
那么这种情况下增加四版本号

10:50.180 --> 10:52.280
最后一个是补丁版本号

10:52.280 --> 10:54.980
那么这个版本号主要就是用于修复bug

10:54.980 --> 10:56.780
然后我们之前哪个程序没有bug了

10:56.780 --> 10:57.780
肯定有bug对吧

10:57.780 --> 11:00.280
但具体的使用过程中可能会有些bug

11:00.280 --> 11:02.080
那么对bug进行修复

11:02.080 --> 11:03.480
或者是有一些地方

11:03.480 --> 11:04.680
可能执行效率太低了

11:04.680 --> 11:06.280
慢慢对它进行优化

11:06.280 --> 11:07.980
没有保持API的改动

11:07.980 --> 11:09.980
就是API都没有发生变化

11:09.980 --> 11:11.980
就是含述的名字

11:11.980 --> 11:12.880
含述的参数

11:12.880 --> 11:15.480
含述的返回的什么东西

11:15.480 --> 11:16.680
这些东西都没发生变化

11:16.680 --> 11:17.980
就是把bug修改了

11:17.980 --> 11:19.280
做了一些优化

11:19.280 --> 11:21.380
那么这种情况下呢

11:21.380 --> 11:23.680
去增加补丁版本号

11:23.680 --> 11:24.580
明白的意思吗

11:24.580 --> 11:26.680
就是这个版本的大概意思

11:26.680 --> 11:27.380
说到这里的话

11:27.380 --> 11:29.180
问你这个包

11:29.180 --> 11:30.180
你开发了这个工程

11:30.180 --> 11:31.680
你的版本是什么

11:31.680 --> 11:32.980
版本就是什么

11:32.980 --> 11:34.980
如果说你这些东西

11:34.980 --> 11:36.480
如果说你要把自己的工程

11:36.480 --> 11:38.780
拿去发布有意义

11:38.780 --> 11:39.680
如果说你自己的工程

11:39.680 --> 11:40.780
根本就不发布

11:40.780 --> 11:41.880
就是纯粹来开发

11:41.880 --> 11:42.980
到时候我们自己把布

11:42.980 --> 11:44.980
说服务器运行就完事了

11:44.980 --> 11:47.280
不管它发布到NPM上

11:47.280 --> 11:48.680
来作为一个通用的包

11:48.680 --> 11:50.280
让别人使用的包

11:50.280 --> 11:51.680
如果你不做这件事情的话

11:51.680 --> 11:53.380
那么这些东西意义不大

11:53.380 --> 11:55.880
所以说这一块我们就默认吧

11:55.880 --> 11:56.480
默认

11:56.480 --> 11:57.280
回车就行了

11:57.280 --> 11:58.880
1.0.1

11:58.880 --> 12:00.280
好 接下来他问你

12:00.280 --> 12:02.680
这个包人描述是什么

12:02.680 --> 12:03.680
描述是啥

12:03.680 --> 12:04.480
好 再来看一下

12:04.480 --> 12:06.380
description 描述

12:06.380 --> 12:08.180
就是你给用一句话

12:08.180 --> 12:09.280
简单的一句话

12:09.280 --> 12:12.880
来解释一下你这个包的干嘛

12:12.880 --> 12:14.280
那这个东西咋解释了

12:14.280 --> 12:15.880
我这里也可以直接不写

12:15.880 --> 12:16.880
也可以直接不写

12:16.880 --> 12:18.680
标准的回车就啥都没写

12:18.680 --> 12:21.380
也可以写两句话吧

12:21.380 --> 12:23.980
usiness

12:23.980 --> 12:25.880
没啥用

12:25.880 --> 12:27.680
just test

12:27.680 --> 12:29.080
只是用来做测试

12:29.080 --> 12:32.480
测试一下

12:32.680 --> 12:36.280
will not publish to npm

12:36.280 --> 12:38.680
我们也不会把它发布到 npm 上

12:38.680 --> 12:40.480
就这么简单描述一下吧

12:40.480 --> 12:41.480
随便描述一下

12:41.480 --> 12:42.480
这么个意思

12:42.480 --> 12:43.680
当然你不写也行

12:43.680 --> 12:44.680
回车

12:44.680 --> 12:47.080
好 接下来是 entry point

12:47.080 --> 12:49.480
entry point 什么 entry 什么入口

12:49.480 --> 12:50.480
point 是什么

12:50.480 --> 12:51.680
入口文件

12:51.680 --> 12:54.080
你这个包里边入口文件是啥

12:54.080 --> 12:55.080
我们都知道

12:55.080 --> 12:56.680
都得他不是有个启动文件吗

12:56.680 --> 12:57.280
对吧

12:57.280 --> 12:59.480
包了他有一个对应的入口文件

12:59.480 --> 13:00.680
入口文件

13:00.680 --> 13:01.680
那么这个入口文件

13:01.680 --> 13:04.080
我们通常也把它称之为主文件

13:04.080 --> 13:05.880
它其实这里的配置就是妹

13:05.880 --> 13:07.080
主文件

13:07.080 --> 13:08.880
那么这个主文件是什么意思呢

13:08.880 --> 13:10.280
现在大家理解不到

13:10.280 --> 13:12.480
我们下节课还是下节课

13:12.480 --> 13:13.480
我安排一下

13:13.480 --> 13:15.880
后边我们会学习包的使用

13:15.880 --> 13:18.280
当别人要使用你这个包的时候

13:18.280 --> 13:20.080
因为包里边肯定有很多文件

13:20.080 --> 13:21.480
你自己要写很多代码

13:21.480 --> 13:22.680
分布到不同的文件

13:22.680 --> 13:24.080
不同的模块里边去

13:24.080 --> 13:25.880
那么以哪个模块作为入口

13:25.880 --> 13:27.680
就别人使用你这个包的时候

13:27.680 --> 13:29.880
那么用的是哪个其中的哪个文件

13:29.880 --> 13:31.280
那么你要告诉他

13:31.480 --> 13:33.080
默认是index.js

13:33.080 --> 13:34.680
当然你可以去随便换一下

13:34.680 --> 13:36.080
不换的话你就直接回车

13:37.080 --> 13:38.080
好 接下来问题

13:38.080 --> 13:39.480
测试命令是什么

13:39.480 --> 13:41.280
这个东西是跟我们后边学的

13:41.280 --> 13:42.680
测试课程有关系

13:42.680 --> 13:43.680
那么这里呢

13:43.680 --> 13:44.480
跟你没关系

13:44.480 --> 13:44.980
直接回车

13:44.980 --> 13:46.480
没有测试命令

13:46.480 --> 13:47.480
好 接下来问题

13:47.480 --> 13:49.880
git repository

13:49.880 --> 13:51.080
什么意思

13:51.080 --> 13:54.480
表示的是git仓库的地址

13:54.480 --> 13:55.380
git仓库的地址

13:55.380 --> 13:57.680
也就是仓库地址

13:57.680 --> 13:59.480
那么仓库地址可以是git

13:59.480 --> 14:01.880
也可以是svn

14:01.880 --> 14:03.880
svn不知道里面学没学过

14:03.880 --> 14:05.880
现在目前都是用git

14:05.880 --> 14:07.880
那么你给他一个git地址就行了

14:07.880 --> 14:09.280
给他一个git地址

14:09.280 --> 14:11.480
那么我们的git地址是啥

14:11.480 --> 14:12.480
我们的git地址

14:12.480 --> 14:13.680
我这里看一下

14:13.680 --> 14:15.080
看一下我们的git地址是啥

14:16.880 --> 14:17.680
随便看一个

14:17.680 --> 14:19.880
就是用git remote

14:21.880 --> 14:23.280
remote

14:23.280 --> 14:24.380
钢杯

14:24.380 --> 14:25.880
我们的git地址是这个

14:25.880 --> 14:29.240
然后复制一下

14:29.240 --> 14:30.240
复制一下

14:30.240 --> 14:31.440
到时候里面下载代码的话

14:31.440 --> 14:33.840
也是从这个地址下载

14:33.840 --> 14:34.440
我要转

14:34.440 --> 14:35.640
给他掌声过来

14:35.640 --> 14:37.440
这是我们的git地址

14:37.440 --> 14:38.440
keywords

14:38.440 --> 14:39.840
keywords是什么意思

14:39.840 --> 14:41.840
keywords表示的是搜索关键字

14:41.840 --> 14:44.440
就是到时候你这个包发布出去过后

14:44.440 --> 14:46.840
我们到npm网站上去搜索的话

14:46.840 --> 14:48.240
搜索什么样的关键字

14:48.240 --> 14:49.440
可以把你搜索出来

14:49.440 --> 14:50.640
就这么个意思

14:50.640 --> 14:51.440
keywords

14:51.440 --> 14:52.540
它可以写多个

14:52.540 --> 14:53.840
我这里也不写了

14:53.840 --> 14:55.040
也不写了

14:55.040 --> 14:57.040
author比较作者

14:57.040 --> 14:59.340
作者我们随便写一个

14:59.340 --> 15:00.540
远近

15:00.540 --> 15:02.040
作者

15:02.040 --> 15:03.840
那么这个作者我说一下

15:03.840 --> 15:05.040
这个作者我刚才写的是

15:05.040 --> 15:06.740
没有按照规范来写

15:06.740 --> 15:08.440
其实npm它是有规范的

15:08.440 --> 15:09.540
它的规范是什么呢

15:09.540 --> 15:13.140
规范是让你去在npm上注册一个账号

15:13.140 --> 15:14.440
我们后面会讲

15:14.440 --> 15:16.440
我们要讲到包发布的时候

15:16.440 --> 15:18.040
我才会说这些东西才有用

15:18.040 --> 15:19.540
包不会发布的话

15:19.540 --> 15:20.840
这些东西都没用

15:20.840 --> 15:23.840
像我们这些讲的东西都没用

15:23.840 --> 15:25.540
我们说的是包发布过后

15:25.540 --> 15:26.640
它要填个作者

15:26.640 --> 15:29.040
那么这个作者就是你npm的账号

15:29.040 --> 15:31.240
然后一个空格后面写上你的邮箱

15:31.240 --> 15:32.240
注册邮箱

15:32.240 --> 15:33.240
表上这里

15:33.240 --> 15:37.040
张三空格张三一个邮箱

15:37.040 --> 15:39.840
那么这个如果说你乱写个作者的话

15:39.840 --> 15:40.940
那么到时候发布的时候

15:40.940 --> 15:42.540
就可能会导致发布失败

15:42.540 --> 15:43.440
我这里无所谓

15:43.440 --> 15:46.340
反正我也不发布的回车

15:46.340 --> 15:48.740
接下来来试试那个就是来省市

15:48.740 --> 15:50.440
来省市我这里记录没有

15:50.440 --> 15:51.740
没有我说一下的

15:51.740 --> 15:53.740
来省市的表示协议

15:53.740 --> 15:56.140
这个协议我们发布包的时候再说

15:56.140 --> 15:58.240
再具体说我们这里默认就行了

15:58.240 --> 15:59.640
直接回车

15:59.640 --> 16:03.040
然后他告诉你是不是OK了

16:03.040 --> 16:05.740
OK如果说OK的话你就按回车

16:05.740 --> 16:08.140
OK

16:08.140 --> 16:10.740
你看经过一大堆乱七八糟的东西

16:10.740 --> 16:11.840
配置

16:11.840 --> 16:14.040
比如他的导航提示

16:14.040 --> 16:15.440
一步一步完成配置过后

16:15.440 --> 16:17.740
这里是不是生成了一个package点

16:17.740 --> 16:18.940
节省

16:18.940 --> 16:20.340
是不是生成了这么一个文件

16:20.340 --> 16:21.640
我们打开看一下

16:21.640 --> 16:23.740
看一下这个文件

16:23.740 --> 16:25.240
这个文件里面你看npm是不是

16:25.940 --> 16:27.240
其实就是个节省文件

16:27.240 --> 16:28.740
就配置了一个节省对象

16:28.740 --> 16:30.440
nam就是包的名字

16:30.440 --> 16:31.740
包的版本

16:31.740 --> 16:33.240
包的描述

16:33.240 --> 16:34.740
me是不是入口文件

16:34.740 --> 16:35.940
入口文件

16:35.940 --> 16:37.540
这个script我们后边会讲

16:37.540 --> 16:38.740
现在别管它

16:38.740 --> 16:40.440
repository

16:40.440 --> 16:42.140
这是什么就是我们的仓库

16:42.140 --> 16:43.240
内层是git

16:43.240 --> 16:44.140
内层是git

16:44.140 --> 16:46.640
我们的仓库地址是这个地址

16:46.640 --> 16:47.540
然后我们坐着

16:47.540 --> 16:48.240
远近

16:48.240 --> 16:49.640
来省市我们的协议

16:49.640 --> 16:51.040
isc

16:51.040 --> 16:53.240
bugs就是我们提交的

16:53.240 --> 16:54.940
我们提交的提交bug的时候

16:54.940 --> 16:56.440
提交了哪个地址

16:56.440 --> 16:58.440
一般地址上面是有这个地址

16:58.440 --> 17:00.040
那么它给你加进来了

17:00.040 --> 17:01.240
它们不写的话也无所谓

17:01.240 --> 17:03.740
这些东西它跟发布有关系

17:03.740 --> 17:04.640
home page

17:04.640 --> 17:06.240
我们的就是主页

17:06.240 --> 17:10.540
主页它也是给你默认用的是git的地址

17:10.540 --> 17:11.340
那么像这些东西

17:11.340 --> 17:12.640
你一句话不写什么想

17:12.640 --> 17:14.340
可以

17:14.340 --> 17:15.740
因为我并不发布

17:15.740 --> 17:15.940
对不对

17:15.940 --> 17:18.440
我并不把它作为发布

17:18.440 --> 17:19.340
我们把它写着

17:19.340 --> 17:19.740
无所谓

17:19.740 --> 17:21.540
这东西大家可以了解一下就行了

17:21.540 --> 17:22.140
这就是

17:22.140 --> 17:23.940
是不是通过了一个配置文件

17:23.940 --> 17:26.240
来描述了各种各样的信息

17:26.240 --> 17:26.940
对不对

17:26.940 --> 17:28.840
这个配置文件可以自己手动创建

17:28.840 --> 17:31.640
也可以通过npm引力车来创建

17:31.640 --> 17:33.040
另外我再说一点

17:33.040 --> 17:35.440
就是当你创建一个

17:35.440 --> 17:38.140
package.json这个配置文件的时候

17:38.140 --> 17:39.940
还有一种更加简变的方式

17:39.940 --> 17:41.240
因为绝大部分时候

17:41.240 --> 17:42.440
我们并不需要发布

17:42.440 --> 17:43.640
所以说这些信息没意义

17:43.640 --> 17:45.740
我没有必要挨债的一个一个写

17:45.740 --> 17:46.440
认认认的写

17:46.440 --> 17:47.640
没有啥意义

17:47.640 --> 17:50.240
所以说我们很多时候可以这样做

17:50.240 --> 17:52.040
比方说我这里随便建讼

17:52.040 --> 17:53.640
我们在这里随便建个指纹念甲

17:55.440 --> 17:56.140
subfold

17:58.640 --> 17:59.640
我们就建个指纹念甲

17:59.640 --> 18:01.140
比方说把这个指纹念甲

18:01.140 --> 18:02.540
当成工程跟目录

18:02.540 --> 18:03.240
假设嘛

18:03.240 --> 18:03.640
随便嘛

18:03.640 --> 18:04.340
假设

18:04.340 --> 18:05.740
我们把它当成工程跟目录

18:05.740 --> 18:08.440
我要在这里面去初识化一个配置文件

18:08.440 --> 18:09.240
那么怎么写呢

18:09.240 --> 18:10.540
我们可以用这种方式

18:10.540 --> 18:12.240
npm引力车

18:12.240 --> 18:13.440
两个横杠Yes

18:14.440 --> 18:15.240
什么意思

18:15.240 --> 18:16.940
所有的配置

18:16.940 --> 18:18.340
给我写默认值

18:18.340 --> 18:18.740
回车

18:20.340 --> 18:21.540
你看是不是一下就生成出来了

18:22.440 --> 18:23.440
那么你看一下

18:23.440 --> 18:25.240
它可以写的什么默认值呢

18:25.240 --> 18:27.640
nm是不是这个文件的假的名字

18:27.640 --> 18:30.440
当然你要保证文件假的名字是没有中文

18:30.440 --> 18:31.840
一般来说工程是不会

18:31.840 --> 18:35.240
工程目录的文件假名字是一定不会是中文的

18:35.240 --> 18:37.240
你看那些乱七八糟的是不是给它配置好了

18:37.240 --> 18:38.040
对吧

18:38.040 --> 18:39.240
key或者是一个空速组

18:39.240 --> 18:40.640
对不对

18:40.640 --> 18:41.240
当然了

18:41.240 --> 18:42.740
这个还有一个减写

18:42.740 --> 18:43.240
我们再来

18:45.540 --> 18:47.340
npm引力车

18:47.340 --> 18:48.040
横杠Y

18:48.040 --> 18:49.540
刚才是两个横杠Yes

18:49.540 --> 18:50.640
这里写个横杠Y

18:50.640 --> 18:51.440
也是一样的

18:52.640 --> 18:54.940
就是所有的都默认为Yes

18:54.940 --> 18:56.940
还有询问里的时候都默认为Yes

18:56.940 --> 18:57.840
都是可以的

18:57.840 --> 18:59.840
让它保持默认就行了

19:00.640 --> 19:01.440
那样的意思吗

19:01.440 --> 19:01.840
当然了

19:01.840 --> 19:03.840
我们一个工程里面不太会写多个

19:03.840 --> 19:05.240
不太会写多个

19:05.240 --> 19:07.240
我们一般一个工程里面就写一个

19:07.240 --> 19:08.840
放到跟目楼下面去就行了

19:09.940 --> 19:10.040
好

19:10.040 --> 19:12.040
这就是这个文件

19:12.040 --> 19:13.840
package.json

19:13.840 --> 19:15.540
文件的名字不是很好读

19:17.540 --> 19:17.740
好

19:17.740 --> 19:18.340
那么接下来

19:18.340 --> 19:19.740
我们看一下这个配置文件

19:19.740 --> 19:23.540
除了描述我们自身工程的一些信息之外

19:24.240 --> 19:25.640
还有什么作用

19:25.640 --> 19:27.240
接下来才是重点

19:27.240 --> 19:30.440
接下来才是配置文件的

19:30.440 --> 19:32.040
注意重要的功能

19:33.040 --> 19:34.340
因为绝大部分时候

19:34.340 --> 19:36.140
我们仅仅是开发项目

19:36.140 --> 19:37.940
并不会把这个项目的打包发出去

19:38.840 --> 19:39.740
尽管如此

19:39.740 --> 19:41.440
我们仍然会需要这个文件

19:41.440 --> 19:42.040
为什么呢

19:42.040 --> 19:44.540
因为这个文件注意重要的作用

19:44.540 --> 19:47.440
是记录当前工程的依赖

19:48.440 --> 19:49.940
就是说我这个工程

19:49.940 --> 19:51.440
我要依赖哪些东西

19:51.440 --> 19:53.340
这才是它最重要的目的

19:53.340 --> 19:54.940
它是在记录这个东西

19:54.940 --> 19:56.240
这里有讲了很多了

19:56.240 --> 19:56.640
删掉

19:59.540 --> 20:01.240
那么怎么来记录呢

20:01.240 --> 20:02.940
它里边有两个配置

20:02.940 --> 20:04.440
一个是dependencies

20:05.540 --> 20:08.440
表示的是生产环境的依赖

20:08.440 --> 20:10.440
当然生产环境都要依赖它

20:10.440 --> 20:11.840
那么开发环境肯定依赖了

20:11.840 --> 20:13.040
对吧

20:13.040 --> 20:14.640
开发环境肯定要比依赖的东西

20:14.640 --> 20:16.040
肯定要比生产环境

20:16.440 --> 20:17.840
大于等于生产环境

20:19.240 --> 20:22.840
第二个配置是div dependencies

20:22.840 --> 20:24.140
那么这个配置的指的是

20:24.140 --> 20:26.540
只有开发环境才会依赖的东西

20:27.640 --> 20:29.940
那么比方说我会怎么写呢

20:29.940 --> 20:31.840
我要在里边我可以这样写

20:31.840 --> 20:34.040
看着配置文件里边

20:34.040 --> 20:35.040
这是我们的工程

20:35.040 --> 20:36.140
我们的工程里面前面

20:36.140 --> 20:37.840
是我们对我们的工程一些描述

20:37.840 --> 20:39.440
对我们自身工程的描述

20:39.440 --> 20:40.540
然后后边我们再写

20:42.740 --> 20:45.640
dependencies

20:45.640 --> 20:46.640
怎么一下就出来了

20:46.640 --> 20:48.140
它有提示的

20:48.140 --> 20:49.940
这个vscode是有提示的

20:49.940 --> 20:51.740
一回射就行了

20:51.740 --> 20:52.840
它是个堆箱

20:52.840 --> 20:53.740
为啥是个堆箱呢

20:53.740 --> 20:56.040
因为你可能有很多依赖

20:56.040 --> 20:57.140
每个依赖是什么呢

20:57.140 --> 20:59.240
每个依赖就是它的属性名

20:59.240 --> 21:00.740
比方说我们这个工程

21:00.740 --> 21:04.040
依赖 jQuery

21:04.040 --> 21:05.540
这样子写

21:05.540 --> 21:06.840
帽号后边写啥呢

21:06.840 --> 21:08.140
写它的版本

21:08.140 --> 21:09.440
结块哪个版本呢

21:09.440 --> 21:11.340
如果说你依赖的是最刑版

21:11.340 --> 21:13.640
最刑版通常文都不会这样写

21:13.640 --> 21:14.940
通常都不会这样写

21:14.940 --> 21:17.640
如果说你一定要依赖最刑版的话

21:17.640 --> 21:18.240
你去写

21:21.840 --> 21:22.740
我一会会告诉大家

21:22.740 --> 21:25.040
为什么平时我们不会这样子写

21:25.040 --> 21:26.440
dodog

21:26.440 --> 21:27.940
如果说你还有别的依赖

21:27.940 --> 21:29.940
当然这个是生产环境的依赖

21:29.940 --> 21:31.540
生产环境的依赖

21:31.540 --> 21:33.340
那么比方说你还有别的依赖

21:33.340 --> 21:34.640
别的依赖是什么呢

21:34.640 --> 21:35.740
当然生产环境的依赖了

21:35.740 --> 21:36.740
开发环境肯定依赖

21:36.740 --> 21:38.140
这毫不疑问的

21:38.140 --> 21:40.140
比方说还有一个loadage

21:40.140 --> 21:41.440
我们还依赖这个

21:41.440 --> 21:42.140
那么这个地方

21:42.140 --> 21:43.340
我就不指定那个了

21:43.340 --> 21:44.140
不指定最刑版了

21:44.140 --> 21:46.040
我要指定它具体的版本

21:46.040 --> 21:48.740
比方说我们在NPC们去看一下

21:48.740 --> 21:50.340
NPC们上去看一下

21:50.340 --> 21:53.940
loadage看一下是现在目前是哪个版本

21:53.940 --> 21:55.940
loadage

21:55.940 --> 21:57.940
你看这里108个版本了

21:57.940 --> 22:01.340
目前是4.17.15

22:01.340 --> 22:03.040
把版本号写上

22:03.040 --> 22:04.640
没人意识吗

22:04.640 --> 22:08.140
我们的生产环境里边依赖这两个

22:08.140 --> 22:09.740
好 接下来我们再来看

22:09.740 --> 22:11.240
都号下一个

22:11.240 --> 22:13.440
叫做Dev Detent Cs

22:13.440 --> 22:14.240
这是什么意思呢

22:14.240 --> 22:15.740
这是开发依赖

22:15.740 --> 22:18.040
就是只有在我们开发的环境里边

22:18.040 --> 22:19.240
我们才需要的依赖

22:19.240 --> 22:20.840
生产环境是不需要的

22:20.840 --> 22:22.640
就是这样子可以描述出来了

22:22.640 --> 22:25.440
哪些是依赖是生产环境的

22:25.440 --> 22:26.640
哪些依赖是开发

22:26.640 --> 22:28.640
仅在开发环境下有效的

22:28.640 --> 22:29.540
那么这里呢

22:29.540 --> 22:32.240
比方说我们写一个Mochia

22:32.240 --> 22:35.540
看一下这个版本

22:35.540 --> 22:38.050
Mochia

22:38.050 --> 22:40.050
看一下它的版本

22:40.050 --> 22:42.350
它的版本是6.2.2

22:42.450 --> 22:44.850
OK 6.2.2

22:44.850 --> 22:45.550
没了意思吗

22:45.550 --> 22:47.550
那么这样子是不是把依赖描述出来了

22:47.550 --> 22:50.450
这个配置文件是不是描述得很清楚了

22:50.450 --> 22:51.250
那么接下来

22:51.250 --> 22:53.450
描述完了过后有没有这个依赖

22:53.450 --> 22:54.550
保有没有下载下来

22:54.550 --> 22:55.050
肯定没有

22:55.050 --> 22:55.850
不是说你写的过

22:55.850 --> 22:57.350
保有没有下载下来

22:57.350 --> 22:58.650
肯定是没有下载下来

22:58.650 --> 22:59.750
那么我们接下来干嘛

22:59.750 --> 23:02.750
是不是要根据我们这个配置文件的配置

23:02.750 --> 23:04.450
我们配置好了依赖关系

23:04.450 --> 23:07.150
然后我们去安装依赖

23:07.150 --> 23:08.550
对不对 是不是要安装

23:08.550 --> 23:10.150
那么怎么安装呢

23:10.150 --> 23:11.550
有两种安装方式

23:11.550 --> 23:12.950
看下面的命令

23:12.950 --> 23:15.650
第一种安装就是直接npminstore

23:15.650 --> 23:18.050
后来不写包名了

23:18.050 --> 23:20.250
当你不写包名的时候

23:20.250 --> 23:23.150
它就会去找这个工程下面的

23:23.150 --> 23:25.050
package.json这个文件

23:25.050 --> 23:26.750
然后把这个文件里边

23:26.750 --> 23:30.050
这里边的所有依赖全部安装

23:30.050 --> 23:31.850
包括生产环境的依赖

23:31.850 --> 23:33.350
和开发环境的依赖

23:33.350 --> 23:33.850
对吧

23:33.850 --> 23:34.750
通过这种方式

23:34.750 --> 23:36.350
就把所有的全部安装了

23:36.350 --> 23:37.350
它又减一些

23:37.350 --> 23:39.650
减一些就是i 对不对

23:39.750 --> 23:41.650
如果说你只需要安装

23:41.650 --> 23:43.250
生产环境的依赖的话

23:43.250 --> 23:44.650
那么你加上一个参数

23:44.650 --> 23:46.850
两个横杠 可能大概行

23:46.850 --> 23:49.450
好 咱们来都来试一下

23:49.450 --> 23:50.350
都来试一下

23:50.350 --> 23:52.050
比方说我们这里npm

23:52.050 --> 23:54.150
我们使用i 回车

23:54.150 --> 23:56.660
instore

23:56.660 --> 24:02.240
好 稍等

24:02.240 --> 24:03.140
好 安装完成了

24:03.140 --> 24:03.640
对吧

24:03.640 --> 24:04.840
说安装完成了

24:04.840 --> 24:06.240
它安装一共安装了多少个

24:06.240 --> 24:07.540
93个

24:07.540 --> 24:08.940
93个包 对不对

24:08.940 --> 24:10.040
我们上里可能都看到

24:10.040 --> 24:10.840
接快位呢

24:10.840 --> 24:12.540
很多大型是没有依赖的

24:12.540 --> 24:13.540
没有别的依赖

24:13.540 --> 24:15.440
但是摩卡它的依赖的东西比较多

24:15.440 --> 24:17.140
所以说它把依赖的也安装进来了

24:17.140 --> 24:18.340
全部安装进来了

24:18.340 --> 24:18.840
对吧

24:18.840 --> 24:20.640
这就是instore这个命令

24:20.640 --> 24:22.640
直接找这个文件

24:22.640 --> 24:23.540
这个文件里面

24:23.540 --> 24:25.740
它依赖的东西全部安装

24:25.740 --> 24:27.040
全部安装

24:27.040 --> 24:28.440
原来的意思吗

24:28.440 --> 24:29.340
把它下载到load嘛

24:29.340 --> 24:31.240
就是摩路下面

24:31.240 --> 24:33.040
好 这里多生产的一个文件

24:33.040 --> 24:34.940
叫package.lock.json

24:34.940 --> 24:35.640
这个文件别管

24:35.640 --> 24:38.140
我们后面会提一下

24:38.140 --> 24:41.710
好 那么现在我们把删除掉

24:41.710 --> 24:43.310
删除每次都比较慢

24:43.310 --> 24:44.410
OK 删除掉了

24:44.410 --> 24:47.810
好 那么如果说我们只安装那个生产环境的

24:47.810 --> 24:49.010
比方说我们到服务器那边

24:49.010 --> 24:50.610
是不是只需要安装生产环境

24:50.610 --> 24:51.510
那么怎么办

24:51.510 --> 24:52.810
npm

24:52.810 --> 24:53.910
instore

24:53.910 --> 24:54.910
加上个参数

24:54.910 --> 24:56.710
prodcasty

24:56.710 --> 24:58.310
prodcasty

24:58.310 --> 24:59.210
prodcasty什么意思

24:59.210 --> 25:01.910
就是产品 生产的意思

25:01.910 --> 25:03.610
好

25:03.610 --> 25:05.010
你看一下现在load嘛就是摩路

25:05.010 --> 25:05.910
是不是只有两个

25:05.910 --> 25:06.710
对吧 只有两个

25:06.710 --> 25:08.310
它就不会安装这个

25:08.310 --> 25:09.910
原来的意思吧

25:09.910 --> 25:11.410
那么有了这个东西过后

25:11.410 --> 25:12.910
有了这个配置文件过后

25:13.010 --> 25:13.810
你想一想

25:13.810 --> 25:17.010
刚才我们课前说的问题是不是解决了

25:17.010 --> 25:19.110
我们要把工程拷贝给别人

25:19.110 --> 25:21.110
或者是把它发布到服务器上

25:21.110 --> 25:22.810
那么都叫做代码遗址

25:22.810 --> 25:24.810
把我们的代码copy过去

25:24.810 --> 25:27.310
那么这个遗址的过程就不再是问题了

25:27.310 --> 25:29.710
我们只需要遗址原代码

25:29.710 --> 25:30.310
什么叫原代码

25:30.310 --> 25:32.510
就是我们工程里边我们自己写的代码

25:32.510 --> 25:34.510
就是我们工程里边自己写的代码

25:34.510 --> 25:36.410
那肯定要遗址放过去

25:36.410 --> 25:37.510
那么和什么

25:37.510 --> 25:39.510
和这个配置文件

25:39.510 --> 25:41.310
只需要这两个东西就行了

25:41.310 --> 25:42.810
我们自己的代码和配置文件

25:42.810 --> 25:43.710
就行了

25:43.710 --> 25:45.510
不用去移植哪个部落

25:45.510 --> 25:48.010
这个漏的码就是不用放过去

25:48.010 --> 25:49.710
我们只需要把这个文件告诉它

25:49.710 --> 25:51.510
那么它那边是不是可以还原的

25:51.510 --> 25:53.410
它是不是通过一个命令就可以还原

25:53.410 --> 25:54.210
对吧

25:54.210 --> 25:55.010
比方说

25:55.010 --> 25:56.610
比方说我们拷贝过来

25:56.610 --> 25:57.310
哎

25:57.310 --> 25:58.210
把他删掉

25:58.210 --> 26:00.310
拷贝过来过后就是这个东西

26:00.310 --> 26:01.410
不要说这个东西是

26:01.410 --> 26:03.410
我们从别人工程拷贝过来的

26:03.410 --> 26:06.210
别人工程里面肯定是有漏的码就是这个部落

26:06.210 --> 26:07.610
但是拷贝过来是不没有

26:07.610 --> 26:09.310
因为他不会给我们拷了一个东西

26:09.310 --> 26:10.510
那么怎么来还原呢

26:10.510 --> 26:11.810
还原这个代码

26:11.910 --> 26:12.810
是不是这里有记录

26:12.810 --> 26:14.710
我们只需要掉入一个命令就完事了

26:14.710 --> 26:16.210
他只要有这个配置文件存在

26:16.210 --> 26:18.110
他只要把这个东西给我拷贝过来了

26:18.110 --> 26:20.910
那么我就把那个npm

26:21.610 --> 26:23.210
如果要全部安装就安

26:23.210 --> 26:24.610
如果只安装生产环境

26:24.610 --> 26:25.610
比方说在服务器上

26:25.610 --> 26:27.810
是不是只需要生产环境里面的依赖

26:27.810 --> 26:28.310
对吧

26:29.010 --> 26:30.210
是不是就安装完成了

26:30.210 --> 26:31.010
对不对

26:31.010 --> 26:33.010
如果说你也是开发环境

26:33.010 --> 26:34.410
比方说一个程序员

26:34.410 --> 26:36.110
你考试你的同事

26:36.110 --> 26:37.510
别人要接着开发

26:37.510 --> 26:40.010
可能你先离职的别人要接着开发

26:40.010 --> 26:40.610
那么

26:40.610 --> 26:42.110
他从地址上拿去过来过后

26:42.110 --> 26:43.610
他可能要全部安装

26:43.610 --> 26:45.810
就用instorm就不加后面的一个参数

26:45.810 --> 26:47.110
就这么个意思

26:47.110 --> 26:50.510
那么现在的考备工程就变得非常非常简单了

26:50.510 --> 26:53.310
那想想前面的问题是不是解决了

26:53.310 --> 26:54.210
考备工程如何还原

26:54.210 --> 26:55.310
是不是解决了

26:55.310 --> 26:57.810
如何区分开发一代和生产一代

26:57.810 --> 26:59.410
是不是解决了

26:59.410 --> 27:00.810
包着描述信息那肯定有

27:00.810 --> 27:02.210
这里面这么多信息

27:02.210 --> 27:02.610
对不对

27:02.610 --> 27:03.610
是不是就解决了

27:05.610 --> 27:06.610
因此

27:08.210 --> 27:10.010
我们用使用了这个配置文件

27:10.010 --> 27:11.710
为什么我们所有的工程

27:11.710 --> 27:13.510
都要求大家使用这个配置文件

27:13.510 --> 27:15.510
就是你们以后开发工程的时候

27:15.510 --> 27:16.510
第一件事

27:16.510 --> 27:17.610
你什么代码都没有写

27:17.610 --> 27:19.510
先把这个网约给我申称出来

27:19.510 --> 27:20.210
申称出来再说

27:21.410 --> 27:22.210
接着我们记得看

27:24.210 --> 27:27.510
为了我们方便添加依赖

27:27.510 --> 27:29.010
我们刚才添加依赖是怎么写的

27:29.010 --> 27:30.510
是自己手冻写的

27:30.510 --> 27:30.710
对吧

27:30.710 --> 27:31.610
我们自己在这里

27:31.610 --> 27:32.210
直接书写的

27:32.210 --> 27:33.410
手冻写的

27:33.410 --> 27:35.210
为了方便添加依赖的话

27:35.210 --> 27:36.910
我们也可以不用手冻写

27:36.910 --> 27:38.810
手冻写其实也还是比较麻烦

27:38.810 --> 27:39.910
我们还要去查一下版本

27:39.910 --> 27:40.710
对不对

27:42.710 --> 27:43.910
然后我再说一下

27:43.910 --> 27:44.810
刚才我们说这里

27:44.810 --> 27:47.410
为什么不要去加这个东西

27:47.410 --> 27:50.210
这个东西是一定安装最新的

27:50.210 --> 27:51.410
什么意思呢

27:51.410 --> 27:51.910
我假设

27:53.310 --> 27:56.110
假设你现在开发的时候

27:56.110 --> 27:57.010
现在是多久了

27:57.010 --> 27:58.810
现在是2019年

27:58.810 --> 28:00.410
12月16号

28:00.410 --> 28:01.410
这一天

28:01.410 --> 28:02.910
你在开发一个项目

28:02.910 --> 28:05.010
这个项目用到了结块位

28:05.110 --> 28:08.010
比方说你使用的是Netist

28:08.010 --> 28:09.210
表示最新

28:09.210 --> 28:11.610
你在配置文件里面写的是最新

28:11.610 --> 28:12.510
安装最新版

28:12.510 --> 28:13.310
那么这个时候

28:13.310 --> 28:15.210
你开始来开发的时候

28:15.210 --> 28:17.010
你瞎在下来是什么版本的

28:17.010 --> 28:18.210
是比方说

28:18.210 --> 28:19.510
现在多好版了

28:19.510 --> 28:20.210
我也不知道

28:20.210 --> 28:21.210
结块位

28:21.210 --> 28:21.910
4.1版

28:21.910 --> 28:23.210
4.1.6

28:23.210 --> 28:24.410
比方说

28:24.410 --> 28:26.010
目前的结块位版本

28:26.010 --> 28:27.410
随便加一个例子

28:27.410 --> 28:29.310
4.1.6

28:29.310 --> 28:30.810
比方说是这个版本

28:30.810 --> 28:32.410
那么你现在开发开发开发

28:32.410 --> 28:33.710
写了一证

28:33.710 --> 28:35.010
一年过后

28:35.010 --> 28:38.010
这个项目可能要进行进一步开发

28:38.010 --> 28:40.410
因为项目是不断的迭代的

28:40.410 --> 28:41.610
不断的改进的

28:41.610 --> 28:45.010
所以说到了2020年

28:45.010 --> 28:47.510
12月16号

28:47.510 --> 28:48.710
那么这个时候

28:48.710 --> 28:52.210
是以别的程序来开发了

28:52.210 --> 28:53.110
张三

28:53.110 --> 28:55.610
他把你这个项目拷贝过去了

28:55.610 --> 28:56.310
原来的意思吗

28:56.310 --> 28:57.910
他把这个项目拷贝过去了

28:57.910 --> 29:00.910
那么他又使用NPM Install来进行安装

29:00.910 --> 29:02.510
由于他这个结块位

29:02.510 --> 29:04.210
结块位

29:04.210 --> 29:07.010
你使用的是NETIS的模式来描述的

29:07.010 --> 29:08.510
那么张三在安装的时候

29:08.510 --> 29:11.010
安装的时候可能就不是4.1.6了

29:11.010 --> 29:15.410
他可能安装的是10.3.5

29:15.410 --> 29:17.910
因为他这里是不是始终安装最新的

29:17.910 --> 29:20.010
那么就会导致同一个工程

29:20.010 --> 29:21.210
你在开发的时候

29:21.210 --> 29:23.010
你是按照这个版本来开发的

29:23.010 --> 29:24.710
因为你下的下的就是个版本

29:24.710 --> 29:25.810
而张三在开发的时候

29:25.810 --> 29:27.410
是不是按照这个版本来开发的

29:27.410 --> 29:29.210
同一个工程是不是版本不一致的

29:29.210 --> 29:29.710
对不对

29:29.710 --> 29:30.510
那么就可能

29:30.510 --> 29:31.810
张三下载下来过后

29:31.810 --> 29:33.810
你之前写的代码就用不了了

29:33.810 --> 29:35.810
因为你之前是按照这个版本来写的

29:35.810 --> 29:39.210
这就是为什么我们现在不太会使用

29:39.210 --> 29:40.810
我们平时写的时候的版本号

29:40.810 --> 29:42.810
是不太会使用这种版本号的

29:42.810 --> 29:44.710
就是始终按照最新版

29:44.710 --> 29:46.010
那么随着时间的变

29:46.010 --> 29:47.010
时间的迁移

29:47.010 --> 29:48.910
那么工程就会出问题

29:48.910 --> 29:50.610
所以我们因为每一次下载过后

29:50.610 --> 29:51.810
都是最新版

29:51.810 --> 29:53.710
更之前的版本就不一致了

29:53.710 --> 29:54.310
比方程序

29:54.310 --> 29:57.110
就下载的时候是一个版本

29:57.110 --> 29:57.710
过了一段时间

29:57.710 --> 29:59.210
把工程考外给别的程序

29:59.210 --> 30:01.110
它下载的时候就是另一个版本

30:01.110 --> 30:02.710
不太会用这种方式

30:02.710 --> 30:04.910
我们需要一个比较稳健的版本

30:04.910 --> 30:05.910
版本控制

30:05.910 --> 30:08.210
所以说我们要写个具体的版本

30:08.210 --> 30:09.310
这样子的保证

30:09.310 --> 30:13.210
那个版本是基本相同的

30:13.210 --> 30:14.710
我这里顺便说一句

30:14.710 --> 30:16.110
好 再回到我们刚才的说法

30:16.110 --> 30:17.110
刚才的问题就是

30:17.110 --> 30:20.410
我们平时也不太会自己写这个东西

30:20.410 --> 30:21.710
也不太会去自己写

30:21.710 --> 30:23.110
那么平时我们是怎么做的呢

30:23.110 --> 30:25.010
我们是在用NPM

30:25.010 --> 30:26.310
就是我们上级科学的

30:26.310 --> 30:27.610
在安装的时候

30:27.610 --> 30:29.410
加入一些额外的参数

30:29.410 --> 30:31.110
用于将安装的包

30:31.110 --> 30:32.910
安装的依赖的保存到

30:32.910 --> 30:34.810
自动的保存到这个文件里边

30:34.810 --> 30:36.110
说了半天啥意思

30:36.110 --> 30:37.510
看着啊

30:37.510 --> 30:39.610
我们把三除掉

30:39.610 --> 30:41.210
然后我们把这个删掉

30:41.210 --> 30:42.810
删掉

30:42.810 --> 30:44.410
把这边删掉

30:44.410 --> 30:47.410
接下来我们看一下

30:47.410 --> 30:50.210
我们上级科学习的NPM

30:50.210 --> 30:52.210
安装接query

30:52.210 --> 30:57.120
现在我们再俩安装一下

30:57.120 --> 30:58.720
安装完了

30:58.720 --> 30:59.720
完了之后我们看一下

30:59.720 --> 31:01.720
loadmarchus目录下面是不是多了一个接query

31:01.720 --> 31:02.920
这个没什么好说的

31:02.920 --> 31:06.600
然后我们来看一下package连接生

31:06.600 --> 31:09.700
你会看到一个神奇的事情发生了

31:09.700 --> 31:10.600
package连接生里边

31:10.600 --> 31:13.300
它会自动加入一个dependency

31:13.300 --> 31:14.300
自动加

31:14.300 --> 31:15.700
把我们的接query的版本

31:15.700 --> 31:17.600
3.4.1是不是加进来了

31:17.600 --> 31:18.200
对吧

31:18.200 --> 31:19.400
前面那个三角什么意思

31:19.400 --> 31:20.700
我们一会再说

31:20.700 --> 31:22.800
这个3.4.1是不是加进来了

31:22.800 --> 31:24.700
它会自动帮你生成

31:24.700 --> 31:25.200
意思吗

31:25.200 --> 31:27.700
所以说你不用去手东西

31:27.700 --> 31:29.100
那么这里老顺便说一句

31:29.100 --> 31:32.100
以前在早期的版本里边

31:32.100 --> 31:35.300
NPM这种方式是它不会给你加进来的

31:35.300 --> 31:37.800
早期的版本里面你在用加面的那种写法

31:37.800 --> 31:38.900
NPM i

31:38.900 --> 31:40.300
然后加一个参数

31:40.300 --> 31:41.600
两个横杠 save

31:41.600 --> 31:42.800
然后写上包米

31:42.800 --> 31:44.300
或者是一个减写

31:44.300 --> 31:44.900
一个横杠

31:44.900 --> 31:46.900
一个大写的s加上包米

31:46.900 --> 31:48.300
你得用这种写法

31:48.300 --> 31:49.700
你不能直接这样写

31:49.700 --> 31:50.600
但是现在可以了

31:50.600 --> 31:53.300
现在默认就是比你不会保存到这里的

31:53.300 --> 31:54.600
之前不是报警告吗

31:54.600 --> 31:55.700
报警告的原因

31:55.700 --> 31:57.500
根本原因就是因为你没有这个文件

31:57.500 --> 32:01.600
它没法在文件里面写这个保存

32:01.600 --> 32:04.300
写这个倚带关系

32:04.300 --> 32:07.400
那么现在安装就非常方便了

32:07.400 --> 32:08.700
你不用自己手东西

32:08.700 --> 32:13.000
不要说我们在安装i加个横杠s

32:13.000 --> 32:14.100
效果是一样的

32:14.100 --> 32:15.600
楼代写

32:15.600 --> 32:17.200
看一下吧

32:17.200 --> 32:19.700
它保存到生产环境的倚带

32:19.700 --> 32:20.800
看一下

32:20.800 --> 32:21.700
就加进来了

32:21.700 --> 32:23.300
楼代写加进来了

32:23.300 --> 32:24.800
没问题吧

32:24.800 --> 32:27.100
那如果说我要安装的东西

32:27.200 --> 32:28.400
是开发环境

32:28.400 --> 32:30.500
仅在开发环境里边使用的

32:30.500 --> 32:32.000
那么就必须要加参数了

32:32.000 --> 32:33.200
两个横杠一个s5

32:33.200 --> 32:35.200
一个横杠d5

32:35.200 --> 32:36.300
development

32:36.300 --> 32:37.800
就表示这个单词

32:37.800 --> 32:39.300
往往就表示的是开发

32:39.300 --> 32:40.900
开发的意思

32:40.900 --> 32:42.600
那么保存到开发依赖

32:42.600 --> 32:43.800
后面写上包米

32:43.800 --> 32:46.200
或者是减写横杠d

32:46.200 --> 32:47.600
包米都可以

32:47.600 --> 32:48.500
比方说

32:48.500 --> 32:50.900
我们这里安装一下摩抢

32:50.900 --> 32:51.900
i

32:51.900 --> 32:53.400
横杠d

32:53.400 --> 32:56.400
那么摩抢

32:56.500 --> 32:57.500
注意看那个配置文件

32:57.500 --> 32:58.900
它下载肯定是会下载

32:58.900 --> 33:00.700
这个没什么好说的

33:00.700 --> 33:04.090
等一会

33:04.090 --> 33:04.790
你看

33:04.790 --> 33:06.790
是不是加了一个dev dependencies

33:06.790 --> 33:07.290
摩抢

33:07.290 --> 33:08.090
就加进来了

33:08.090 --> 33:09.390
所以说我们以后

33:09.390 --> 33:10.990
安装包的时候

33:10.990 --> 33:12.190
安装包之前

33:12.190 --> 33:13.690
你首先得把这个文件建立好

33:13.690 --> 33:15.190
最好是在工程文件

33:15.190 --> 33:16.390
假建立好过后

33:16.390 --> 33:17.590
先别管3721

33:17.590 --> 33:19.590
你先把这个东西加进去

33:19.590 --> 33:20.190
加进去过后

33:20.190 --> 33:20.990
我们再去安装包

33:20.990 --> 33:22.790
那么自然而然就会形成依赖

33:22.790 --> 33:23.690
形成依赖的时候

33:23.690 --> 33:25.190
你要去考虑清楚

33:25.190 --> 33:26.490
哪些是开发依赖

33:26.490 --> 33:29.190
哪些是生产环境的依赖

33:29.190 --> 33:31.090
那么怎么来区分呢

33:31.090 --> 33:33.290
凡是你自己的工程里边

33:33.290 --> 33:34.890
呆码要用到的东西

33:34.890 --> 33:37.290
就是你写呆码要用到的东西

33:37.290 --> 33:39.990
十之八九都是

33:39.990 --> 33:41.490
生产环境的依赖

33:41.490 --> 33:43.190
如果是仅仅在开发阶段

33:43.190 --> 33:45.190
在服务器上不会用到这个东西

33:45.190 --> 33:48.090
那么就是开发依赖

33:48.090 --> 33:48.890
那么这个东西

33:48.890 --> 33:49.690
你现在可能还

33:49.690 --> 33:51.290
还是不太分得清楚

33:51.290 --> 33:51.890
没关系

33:51.890 --> 33:52.490
我们以后

33:52.490 --> 33:53.790
学习了具体的技术过后

33:53.790 --> 33:54.990
你自然而然就明白了

33:54.990 --> 33:56.390
哪些东西是开发依赖的

33:56.390 --> 33:58.490
哪些东西是生产环境依赖的

33:58.490 --> 33:59.190
像我们什么

33:59.190 --> 33:59.790
楼单系啊

33:59.790 --> 34:00.690
结块位这些东西啊

34:00.690 --> 34:02.290
都是属于开

34:02.290 --> 34:03.590
就是生产环境依赖

34:05.590 --> 34:05.990
OK

34:05.990 --> 34:07.190
那么就完了

34:07.190 --> 34:07.590
对

34:07.590 --> 34:07.990
最后呢

34:07.990 --> 34:09.590
我说一下这个版本

34:09.590 --> 34:11.190
我们它自动保存的一代版本

34:11.190 --> 34:12.390
像这种邪法

34:12.390 --> 34:13.390
这种邪法有点怪

34:13.390 --> 34:13.590
对吧

34:13.590 --> 34:15.190
前面一个三角什么意思呢

34:15.190 --> 34:16.290
它这种书写方式

34:16.290 --> 34:17.890
叫做语异版本

34:17.890 --> 34:20.090
后面我们会专门有一节课

34:20.090 --> 34:20.990
来专门来讲解

34:20.990 --> 34:22.390
什么叫做语异版本

34:22.390 --> 34:24.290
那么它的有哪些规则

34:24.290 --> 34:25.490
我们后边再说

34:25.590 --> 34:26.490
这些可能

34:26.490 --> 34:27.190
只需要知道

34:27.190 --> 34:29.690
它的名字叫做语异版本好就行了

34:29.690 --> 34:30.390
OK

34:30.390 --> 34:32.090
这就是如何使用配置文件

34:32.090 --> 34:32.690
以及配置文件

34:32.690 --> 34:34.790
对我们整个工程的意义在哪

34:34.790 --> 34:35.690
其实它就是一个文件

34:35.690 --> 34:37.390
这个文件它记录了很多的信息

34:37.390 --> 34:39.490
包括我们的依赖关系

34:39.490 --> 34:39.990
OK

34:39.990 --> 34:40.490
那么接下来

34:40.490 --> 34:42.690
大家下来往这个练习

34:42.690 --> 34:44.190
就按照这三个宝宝

34:44.190 --> 34:45.290
生成个配置文件

34:45.290 --> 34:46.990
然后把依赖加进去

34:46.990 --> 34:47.990
然后安装

34:47.990 --> 34:48.290
极限

34:48.290 --> 34:49.490
集中方式都试一下

34:49.490 --> 34:51.290
一种是自己手写

34:51.290 --> 34:52.390
手写依赖关系

34:52.390 --> 34:55.690
然后Install把整个安装下来

34:55.690 --> 34:57.890
一种再把删除掉

34:57.890 --> 34:58.590
删除掉之后

34:58.590 --> 35:00.390
我们在安装一个的时候

35:00.390 --> 35:01.690
让它自动记录

35:01.690 --> 35:03.790
大家都去自己去写一下

35:03.790 --> 35:04.590
好了

35:04.590 --> 35:05.390
这一回到这了

