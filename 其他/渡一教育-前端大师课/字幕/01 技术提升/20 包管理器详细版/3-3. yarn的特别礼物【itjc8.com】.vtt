WEBVTT

00:00.000 --> 00:07.500
上节课呢我们讲了就是N篇命令里面的命令呢在压里边去怎么去使用啊

00:07.500 --> 00:14.700
实际上呢压除了把N篇的命令呢搬过来然后改了一下名字啊改了一下他的样子

00:14.700 --> 00:18.500
除此之外呢当然优化是少不了的啊

00:18.500 --> 00:26.000
他还给你加了一些命令啊加了一些命令然后呢这些命令呢我这节课呢把它叫做要的特别礼物啊

00:26.000 --> 00:30.300
就是给他加了一些特有的时候呢还蛮好用的一些命令啊咱们来看一下啊

00:30.900 --> 00:35.900
第一个呢就是gr check这个命令干嘛了这个命令呢他就是可以验证啊你的

00:36.700 --> 00:45.700
配就是包配置文件和你的lock文件里边的依赖啊他的版本依赖是不是一致的啊如果说不一致的话那么会导致问题

00:45.700 --> 00:52.400
所以说他就会他就会给你提示他有问题啊这这呢他对于防止串改非常有用好咱们来举个例子啊

00:52.800 --> 00:54.200
比方说我们这里有个样啊

00:55.400 --> 01:01.800
ok啊那我们这里直接安装一个啊虽然我们没有这个配置文件啊但是用压的安装包的时候呢他如果说

01:02.000 --> 01:06.600
如果说他发现没有配置文件的话他会给你加一个配置文件好那么咱们直接来

01:07.100 --> 01:10.100
12 add比方说我们来还是no dash嘛

01:11.400 --> 01:14.800
回车安装一个啊你看他有缓存安装过后了非常快

01:15.500 --> 01:21.500
就是之前我们安装过了然后就非常快了好然后你看他生成了拍几点节省对吧也生成了个lock文件

01:21.900 --> 01:27.900
好如果说我做了这么一件事啊我看一下这个我看一下这个六大写的包有哪些版本

01:29.800 --> 01:38.400
我们随便找个版本吧比方3.6.0啊3.6.0好那如果说啊你看着啊目前安装的版本呢是4.17.15

01:38.500 --> 01:44.700
那么我们现在把现在把版本改一下3.6.0好那么现在这样子改了改了过后呢我们现在

01:45.500 --> 01:49.500
来看一下啊就是我们用呀check来看一下

01:51.300 --> 01:53.100
他说他妈他就是给你包错了对吧他说

01:55.100 --> 02:05.700
嗯他的就是lock file啊就是锁文件里边就压点lock这个文件里边他无没有包含这个这种版本啊就是3.6.0这种版本啊

02:06.500 --> 02:13.700
那么都安心了他说出现了一个错误的版本他本来应该是3.10.1对吧他组版本好不变吗

02:13.700 --> 02:20.900
你看这里啊本来应该是10点3.10.1啊他的这3组版本好三的推行版本呢就是3.10.1

02:21.100 --> 02:26.500
但是呢得到了是版本呢却是就是锁里边的版本呢其实确实是4.17.15

02:26.600 --> 02:32.400
那么这样子会出问题啊他就会给你检测出来啊从通了呀check那么这个命令呢主要是来做什么呢

02:32.500 --> 02:35.800
就是说别人给你考备工程的时候考备过来了

02:35.900 --> 02:41.100
那么你要检测一下一可能要检测一下哎这个工程里边我们安装的依赖里边呢

02:41.100 --> 02:45.400
是不是有人穿改过啊有人去手动的去改过这个东西啊在压里面呢

02:45.400 --> 02:49.800
尽量不要去手动改这个东西啊尽量不要去手动改那么如果说有人手动的改了

02:49.900 --> 02:55.300
一不小心给你改错了那么就可以检测出来啊有的时候呢会有电用啊这个东西啊

02:55.300 --> 03:00.100
就压check好这个关系这个啊下面这个就很用用了

03:00.300 --> 03:04.800
叫压Audit特别是在公司里面开发开发的时候啊就特别有用

03:05.100 --> 03:10.100
以前的n片面没有那么看到压里面有这个东西的过后n片面赶快把加上去了啊

03:10.500 --> 03:15.700
那么这个东西怎么有用了它是用来检测我安装的包呢有哪些漏洞

03:16.500 --> 03:20.700
因为我们我们安装了别人的用的别人的东西对吧别人东西也不是完美的

03:20.700 --> 03:26.300
不可能说啊就彻底完美一点漏洞都没有那么这些漏洞呢可能会影响到我们的代码

03:26.500 --> 03:31.900
甚至呢我们的代码的安全环境啊因此呢我们可以通过这个命令就可以非常简单的

03:31.900 --> 03:36.500
检查检查出来我们目前一代的版本当中啊一代的包的版本当中

03:36.700 --> 03:38.700
有哪些移植漏洞什么叫移植漏洞呢

03:39.500 --> 03:42.300
就是说我们的那些就是互联网络的开发者

03:42.900 --> 03:47.100
他用的这些包用的过程中呢发现了有些问题他就会把这个问题呢提交到这个包的

03:47.300 --> 03:52.900
github上面啊那么就会成为移植漏洞我们你们之前学过gith对吧gith里边是不是issues

03:52.900 --> 03:58.300
对不对那就是漏洞啊表示的问题那么这些问题呢他就会被这个要呢就是裸裂出来

03:58.700 --> 04:02.300
好比方说我们刚才安装的楼大喜对吧我们来看一下啊

04:03.300 --> 04:09.300
12 audios那么他可以检测本地安装的所有的包部那么我们这里只有楼大喜啊

04:09.300 --> 04:13.300
如果说还有别的包法都会进行检测啊我们这里把版本赶回去啊

04:14.300 --> 04:21.300
audios看一下有没有漏洞呢啊他告诉你啊您啊没有漏洞没有漏洞啊没有漏洞的话

04:21.300 --> 04:26.900
就那么说明不是说他真的没有漏洞是至少目前没有发现啊这个版本里面没有都

04:27.900 --> 04:34.900
就是有漏洞没有发现啊有发现的话你会提交上去提交上去的官方的话就会尽快的把修复啊形成新单本

04:35.700 --> 04:42.300
那么如果说我比方说我举个例子啊然后呢我们把移除掉啊remove啊我在上课之前呢已经把全局

04:42.700 --> 04:46.500
之前全局安装了个漏洞啊也把移除掉了啊大家下来也把移除一下

04:47.500 --> 04:48.900
remove 啊

04:49.500 --> 04:56.900
no dash 把移除掉啊好移除掉过后呢我们来安装一个旧版本比方说我们安装一个12add

04:57.500 --> 05:01.300
啊什么no dash 一个旧版本啊3.6.

05:02.300 --> 05:07.790
什么呢3.6.0吗啊ok

05:08.690 --> 05:12.490
好安装这么个版本好那么现在我们再来检测一下啊12audit

05:15.470 --> 05:19.870
好你看是不是有漏洞了我们来看一下啊他用表格的形式给你展示出漏洞

05:20.070 --> 05:24.270
那么这里漏洞呢前面有一个单词就这个单词这个单词呢表示漏洞的级别

05:24.870 --> 05:29.270
啊有这么几个级别一个是info 叫信息级别那么这种级别呢

05:30.270 --> 05:33.670
啊也如果说你宽松一点的话他都不算是漏洞了啊

05:34.270 --> 05:41.670
这种东西呢就是写的时候呢作者没有考虑到但是呢他出现了这个现象这个现象呢也没啥啊只不过作者呢

05:42.170 --> 05:45.770
他应该没有这样子考虑过了啊就随便举个例子吧

05:46.270 --> 05:50.370
比方说你是作者你写了这么一个方法啊你写了这么一个方法

05:51.470 --> 05:54.070
啊什么方法呢就是比方说啊get上

05:55.570 --> 06:01.170
得到一得到就是两个得到所有的啊得到所有的参数之合

06:02.070 --> 06:06.070
啊得到所有的参数之合那么你这里return了一个啊argue

06:06.070 --> 06:12.400
是让我这里在这里边写吧啊你导出了一个方法

06:16.270 --> 06:16.770
argue

06:17.470 --> 06:21.770
那么这里呢返回的是argue reduce reduce

06:23.270 --> 06:25.570
这里边让我们写上啊s

06:27.370 --> 06:28.270
and item

06:30.070 --> 06:31.670
s 加上item

06:31.870 --> 06:36.170
这个大家都见过吧应该见过吧不用说了吧啊这是求和对吧

06:36.770 --> 06:40.670
把所有的参数来求和啊返回然后我们写了这么一个方法

06:40.770 --> 06:45.070
那么我们希望的是呢他各个传来一些数字进来我们把数字求和返回

06:45.470 --> 06:49.070
那么结果了他有可能传了一些数字传了一些制服创

06:49.070 --> 06:50.870
那么就变成了制服创拼接了对吧

06:51.070 --> 06:54.170
专门变成了制服创拼接了那么这个呢是可能是作者的

06:54.170 --> 06:57.870
没有没有想那么多啊没有考虑到的但是他他也能不能算是漏洞的

06:58.070 --> 06:59.570
也不能算啊你这个东西

07:00.070 --> 07:04.570
你说他是漏洞的也行说他不是漏洞的也行啊就是他没有多大的影响

07:04.670 --> 07:08.170
啊像这种很轻微的很轻微的那么叫做信息级别啊

07:08.170 --> 07:12.270
他只是给你提示一下这个地方有这么一个现象啊这种级别

07:12.670 --> 07:17.370
然后呢他就是一次走高了啊低级别中级别高级别关键级别

07:17.870 --> 07:21.570
好所以说呢你们之后呢我主要说的想说的事情是

07:21.670 --> 07:25.770
你们之后呢在公司里面开发啊公司里面开发的时候呢

07:25.870 --> 07:29.970
你安装了一些第三方一代的时候呢最好利用这东西检测一下

07:30.070 --> 07:34.070
要检测一下检测一下看有没有漏洞啊

07:34.070 --> 07:36.970
如果像出现了那种高漏洞的东西啊或者是中漏洞

07:36.970 --> 07:40.570
或者是最后一个就是那个关键级别的漏洞啊critical

07:41.570 --> 07:44.870
那么这种漏洞出现过后呢你要引起注意啊

07:44.870 --> 07:48.770
看一下他是哪个包引起的啊哪个包里边有这个缺陷啊

07:48.770 --> 07:52.270
然后呢点击点这个啊more info啊点击这个里边

07:52.270 --> 07:55.470
他还可以查看详细信息啊关于这个漏洞的详细描述啊

07:55.470 --> 07:57.070
比方说这里点进去看一下啊

07:59.470 --> 08:03.770
他在这里看有篇文档啊他告诉你啊有哪有什么地方啊

08:03.770 --> 08:06.570
会有这么一个现象出现有什么样的现象出现

08:06.870 --> 08:09.770
ok 那么你可以检测一下啊检测一下如果说

08:09.770 --> 08:12.870
你这个漏洞这种漏洞啊或者是这个问题

08:12.870 --> 08:14.570
里面这个项目是不能接受的

08:14.570 --> 08:18.270
那么你赶快换一个包啊或者是用一个还比较稳定的版本

08:18.270 --> 08:21.470
或者是啊就直接换包了啊

08:21.470 --> 08:24.070
一般来说你安装了一些成熟的依赖包的话

08:24.070 --> 08:27.670
那么有漏洞的话他一般修复的速度是非常非常快的啊

08:27.670 --> 08:30.870
基本上一天或者是几个小时就一定修复了啊

08:30.870 --> 08:32.870
你把铁药上去过后啊

08:32.870 --> 08:34.770
这是关于这个啊这个还蛮有用的啊

08:34.770 --> 08:36.770
audit 在真实的开发环境里面啊

08:36.770 --> 08:40.170
像我们平时学习在学校里面学习的话一般不去care他

08:40.170 --> 08:42.270
但是呢在真实的开发环境里面啊

08:42.270 --> 08:44.870
在公司里面开发的时候呢这个迷你蛮有用的

08:45.670 --> 08:47.370
好 接下来我们再看这个迷你啊

08:47.370 --> 08:49.770
ya y 为什么

08:49.770 --> 08:51.270
后面跟上一个包名

08:51.270 --> 08:54.270
那么这个可以在控制台呢打印出啊

08:54.270 --> 08:57.370
其实上面那个迷你呢npm也有了啊现在也有了

08:57.370 --> 08:59.870
那么下面这个 y 后面跟上一个包名

08:59.870 --> 09:01.870
那么表示的是啊在控制台打印出哎

09:01.870 --> 09:03.370
为什么会安装这个包呢

09:03.370 --> 09:06.470
那么这个包为什么会是什么情况下会用到这个包呢

09:06.570 --> 09:07.770
有的时候你包安装多了

09:07.770 --> 09:09.470
以莫名其妙的多了一个包出来啊

09:09.470 --> 09:10.870
你也搞不清楚这个包啊

09:10.870 --> 09:11.670
为什么会安装它

09:11.670 --> 09:13.670
那么可以通过这个迷你来查看一下

09:13.670 --> 09:17.070
嗯比方说哎我们我们在这里呢安装一个

09:18.470 --> 09:21.570
npm add 啊安装个摩恰吧啊

09:21.570 --> 09:22.370
随便安装一个啊

09:23.970 --> 09:26.770
啊当然摩恰的话一般是那个哎

09:26.770 --> 09:27.470
我的天

09:28.570 --> 09:28.970
啊应该

09:32.620 --> 09:33.220
我看一下啊

09:34.720 --> 09:38.620
那怎么用npm的安装啊应该有ya add 啊摩恰

09:39.820 --> 09:42.220
啊我们加上横杠地吧啊devment

09:43.420 --> 09:43.920
啊安装

09:45.720 --> 09:47.820
好安装好了啊你可以看到明显的啊

09:47.820 --> 09:50.520
ya的速度呢确实要比npm要快一些啊

09:50.520 --> 09:52.520
尽管现在npm已经优化的非常好了

09:52.520 --> 09:54.960
但是呢还是比不上啊

09:54.960 --> 09:57.220
ya的速度总之要快那么一点啊

09:57.220 --> 09:59.420
那么这里呢安装好了安装好了之后呢

09:59.420 --> 10:02.020
我们这里可以通过ya

10:03.220 --> 10:06.220
这个 y 这个迷你比方说我们看到这个

10:06.220 --> 10:08.120
依赖包里边呢有很多包啊

10:08.120 --> 10:09.420
那么其中一个包叫witch

10:09.420 --> 10:10.620
哎为什么会安装这个包呢

10:10.620 --> 10:12.920
我们可以用y witch 来看一下

10:14.820 --> 10:16.120
啊那么他就会告诉你啊

10:16.120 --> 10:16.920
为什么安装包呢

10:16.920 --> 10:20.620
他说in for reasons reasons 什么原因

10:20.620 --> 10:23.120
这个这个摩恰存在的原因是什么

10:23.120 --> 10:25.620
他说mocha depends on it

10:25.620 --> 10:28.920
就是说啊摩恰啊这个包他会依赖他

10:28.920 --> 10:30.120
那么完整的依赖关系呢

10:30.120 --> 10:32.220
是摩恰下面啊依赖witch

10:32.820 --> 10:35.420
好那么这就是啊通过y这个迷你啊

10:35.420 --> 10:36.220
来进行查看

10:37.020 --> 10:38.720
ok 那么比方说我们再看啊

10:38.720 --> 10:41.220
ya y nodash

10:41.720 --> 10:43.320
为什么会有nodash这个包呢

10:43.320 --> 10:44.220
他说啊

10:46.020 --> 10:46.520
嗯

10:48.820 --> 10:49.020
嗯

10:50.220 --> 10:52.920
就是他这个包呢必提提升到哪呢

10:52.920 --> 10:55.620
就是个horace提的表示提升的意思啊

10:55.620 --> 10:57.520
就是安装了这个nodemagius下面

10:57.520 --> 10:59.620
呃这个nodash这个目录下面

10:59.620 --> 11:00.920
然后呢这个marge

11:01.420 --> 11:03.520
这个模块呢存在的原因呢

11:03.520 --> 11:04.420
是因为他

11:04.520 --> 11:07.020
纸地被紫金在这个呃配置文件

11:07.020 --> 11:09.420
李彭正谁是里边啊等等等等啊

11:10.020 --> 11:11.420
然后呢他还发现了

11:11.420 --> 11:12.920
他还发现了这个地方啊

11:12.920 --> 11:15.220
这个地方呢他也依赖nodash啊

11:15.220 --> 11:17.420
这个包他也依赖nodash啊

11:17.720 --> 11:19.320
你看这个摩恰下面

11:19.320 --> 11:21.620
这个这个依赖他也依赖nodash

11:21.620 --> 11:23.420
ok ok

11:23.420 --> 11:25.820
那么这就是关于啊y这个迷你啊

11:25.820 --> 11:27.920
有的时候呢你可以可以通过这个迷你

11:27.920 --> 11:30.820
看某一个包哪些哪些东西在依赖他啊

11:30.820 --> 11:33.020
哪他为什么会出现哪些东西在依赖他

11:33.120 --> 11:34.420
可以通过他来查看

11:35.420 --> 11:37.520
好那么最后一个命令呢就比较有意思了

11:37.520 --> 11:39.820
也是我们之后呢可能会用到的迷你啊

11:40.220 --> 11:42.120
也应该说如果说你用压的话

11:42.120 --> 11:44.120
应该是少不了用这个用这个迷你

11:44.720 --> 11:45.520
这怎么回事呢

11:45.520 --> 11:46.920
他非常有趣的一个迷你啊

11:47.720 --> 11:49.420
今后呢我们这门客不会设计

11:49.420 --> 11:51.520
今后呢我们会学习一些脚手架

11:52.020 --> 11:53.220
什么叫脚手架呢

11:53.520 --> 11:56.420
就是说我们现在的建工程还比较简单

11:56.420 --> 11:58.020
你看目录结构都非常简单

11:58.020 --> 12:00.020
我们要安装什么依赖都是手动安装

12:00.120 --> 12:00.820
那么今后呢

12:00.820 --> 12:02.620
我们可能要用到一些技术的时候呢

12:02.620 --> 12:03.920
特别是一些前端框架

12:03.920 --> 12:04.920
像什么view啊

12:05.120 --> 12:06.420
rekt啊这些东西

12:06.620 --> 12:08.720
你要使用他们去搭建一个

12:09.120 --> 12:11.720
呃完整的项目的时候

12:11.920 --> 12:14.320
光是搭建工程你可能要安装

12:14.920 --> 12:15.820
十几个依赖

12:16.320 --> 12:18.320
啊可能要安装十几个甚至几十个依赖

12:18.320 --> 12:19.020
都有可能

12:19.820 --> 12:22.720
然后呢你还要去构建这个工程里面的目录

12:23.120 --> 12:24.820
啊在这里边去建立一些目录

12:24.820 --> 12:26.720
在不同的目录里面保存不同的东西

12:26.820 --> 12:29.020
包括我们之前写做写的个

12:29.420 --> 12:31.720
呃前端页面的时候是吧

12:31.820 --> 12:32.720
是不是也要建一些目录

12:32.720 --> 12:34.220
什么CSS文件夹啊

12:34.520 --> 12:36.120
啊1米几是文件夹啊

12:36.320 --> 12:37.320
啊图片文件夹吧

12:37.420 --> 12:39.120
还有什么JS文件夹对吧

12:39.120 --> 12:40.220
要建立一些目录

12:40.520 --> 12:41.720
而且呢可能还会

12:41.720 --> 12:43.120
之后呢我们写工程的时候呢

12:43.120 --> 12:44.320
还会写一些配置文件

12:44.420 --> 12:46.320
比方说像这个东西就是个配置文件对吧

12:46.920 --> 12:47.520
这个玩意

12:47.620 --> 12:49.720
那么以后呢会有更多的配置文件出现

12:49.920 --> 12:51.720
啊当然跟那个n片名无关了

12:52.720 --> 12:54.120
是别的技术的配置文件

12:54.420 --> 12:56.120
那么也就是我们工程的结构

12:56.120 --> 12:57.420
就别的非常非常复杂

12:57.620 --> 12:58.820
光是要搞定那个

12:58.820 --> 13:00.320
我们每次要做工程的时候

13:00.420 --> 13:01.920
光是要搞定那个工程结构

13:01.920 --> 13:03.020
去写这些配置

13:03.120 --> 13:04.720
就要花费我们大量的时间

13:04.720 --> 13:06.520
几个小时水水背面啊

13:06.520 --> 13:08.220
你把测试跑通

13:08.520 --> 13:10.020
几个小时就就耗完了

13:10.320 --> 13:11.320
那么我们还没有写代

13:11.320 --> 13:12.520
把这些时间就浪费掉了

13:12.820 --> 13:14.020
所以说呢嗯

13:14.020 --> 13:15.920
于是呢有一些嗯

13:15.920 --> 13:16.720
第三方库呢

13:16.720 --> 13:17.720
他就做了一些

13:17.920 --> 13:19.120
命令航工具出来

13:19.320 --> 13:21.320
你可以安装这个命令航工具啊

13:21.320 --> 13:22.820
就是通过n片名去安装

13:22.920 --> 13:24.120
安装好了之后呢

13:24.120 --> 13:25.320
你就可以通过他的命令

13:25.320 --> 13:27.720
他会自动的帮你搭建一个工程结构出来

13:27.920 --> 13:28.820
这就是搅售价

13:29.020 --> 13:30.120
所以搅售价干嘛呢

13:30.120 --> 13:32.020
他就在帮你来搭建工程的

13:32.220 --> 13:32.920
明白吧

13:33.220 --> 13:34.720
现在呢我们还没有学习什么

13:34.720 --> 13:35.520
vr rex

13:35.520 --> 13:37.020
那么比方说我们来看一下

13:37.120 --> 13:39.120
rex跟我们提供的角色下啊

13:39.320 --> 13:41.220
我们平时要用角色价怎么来用呢

13:41.220 --> 13:42.520
我们往往是这样子用的

13:43.020 --> 13:44.120
首先呢我们第一步

13:44.120 --> 13:45.720
全局安装啊

13:45.720 --> 13:47.520
全局安装为什么要全局安装

13:47.820 --> 13:48.520
因为我们要

13:48.520 --> 13:50.320
要全局的去使用这个命令

13:50.320 --> 13:51.420
来帮我们搭建工程

13:51.420 --> 13:52.420
我们工程都没有

13:52.520 --> 13:53.320
哪有什么

13:53.720 --> 13:54.620
本地安装的

13:54.620 --> 13:55.120
对不对

13:55.220 --> 13:57.420
所以说他要帮我们来搭建工程啊

13:57.420 --> 13:59.220
在工程里面去生成啊

13:59.220 --> 14:00.320
生成配置文件

14:00.320 --> 14:01.420
生成工程目录

14:01.520 --> 14:03.920
还要自动的去安装工程依赖等等等等

14:03.920 --> 14:04.920
要做一大堆事情

14:05.020 --> 14:05.920
我们以前怎么做呢

14:06.020 --> 14:08.320
我们以前呢要全局安装角色价

14:08.620 --> 14:10.620
啊怎么来安装就是通过一样啊

14:10.620 --> 14:12.020
当然用npm也一样啊

14:12.220 --> 14:14.420
global add啊安装个角色价

14:14.820 --> 14:17.020
那么比方说比方说我们rex的角色价

14:17.020 --> 14:18.220
叫做create

14:18.820 --> 14:20.520
rex app啊

14:21.020 --> 14:22.320
这个很长的单词啊

14:22.420 --> 14:24.420
就是全局安装这么一个角色价

14:24.720 --> 14:26.020
这是第一步要做的事情

14:26.420 --> 14:27.420
第二步呢

14:27.420 --> 14:29.720
我们要使用脚手价命令来搭建

14:30.520 --> 14:31.520
使用全局命令

14:31.520 --> 14:32.920
就是个角色价里面会带一个

14:33.120 --> 14:34.220
命令航工具啊

14:34.220 --> 14:36.320
使用这个角色价的命令来搭建角色价

14:36.320 --> 14:38.020
然后比方说来一次吧来一次

14:39.320 --> 14:39.820
来吧

14:40.220 --> 14:41.020
好你看啊

14:41.120 --> 14:43.020
我们首先全局安装这个

14:43.720 --> 14:44.220
命令

14:45.120 --> 14:46.120
好安装好了

14:46.520 --> 14:47.720
安装好了过后呢

14:47.720 --> 14:49.820
我们要使用这个命令来搭建工程

14:49.820 --> 14:50.720
那么你看一下啊

14:50.720 --> 14:52.220
咱们就现在就有这个命令了啊

14:52.220 --> 14:53.520
create rex app

14:53.920 --> 14:55.820
那么这个命令呢后边跟上一个

14:56.220 --> 14:57.420
你的工程名字

14:57.420 --> 14:58.920
比方说我们现在的这个目录下面

14:59.020 --> 15:01.420
跟上一个工程名字比方说mine app

15:01.920 --> 15:02.820
跟上这个名字

15:03.520 --> 15:04.520
好那么一回测

15:04.720 --> 15:06.820
那么就利用这个角色价命令啊

15:06.820 --> 15:07.920
他把我们来搭建工程

15:07.920 --> 15:09.720
你看是不是给我们创建了一个目录

15:10.320 --> 15:10.720
对吧

15:11.620 --> 15:12.520
给我们创建了一个目录

15:12.520 --> 15:13.920
哎这个目录里边还有很多东西

15:13.920 --> 15:15.720
你看他会自动帮我们安装依赖

15:16.120 --> 15:17.420
有很多的依赖啊

15:18.420 --> 15:19.620
稍等啊这个东西很多

15:19.620 --> 15:22.020
一看要安装的文件只有三万多个啊

15:22.020 --> 15:24.020
有价的文件都有三万多个特别特别多

15:25.220 --> 15:25.520
啊

15:26.520 --> 15:27.320
稍等一下呗

15:27.320 --> 15:28.520
那只有稍等一下啊

15:32.160 --> 15:32.960
等他安装

15:37.370 --> 15:38.170
稍等一下啊

15:40.460 --> 15:41.060
太多了

15:42.060 --> 15:44.360
啊你说你这些东西你自己手动安装的话

15:44.360 --> 15:45.460
得要等多久

15:45.860 --> 15:46.660
好安装完了

15:48.570 --> 15:50.470
啊你看啊还没完啊

15:53.090 --> 15:54.190
我的天啊

15:55.390 --> 15:56.390
还没完啊

16:00.670 --> 16:01.670
啊这里的警告啊

16:01.670 --> 16:02.970
这里的警告我说一下啊

16:03.170 --> 16:05.570
因为这个角色家里面管理的依赖相当多啊

16:05.570 --> 16:08.170
他也没有办法确保每一个依赖都是正确的

16:08.370 --> 16:09.470
啊也不说正确吧

16:09.470 --> 16:11.370
每一个依赖都是完美的啊

16:11.370 --> 16:13.170
因此呢他那边可能角色家呢

16:13.170 --> 16:14.570
没有有些有些时候呢

16:14.570 --> 16:15.370
没有更新啊

16:15.370 --> 16:16.270
导致的里边呢

16:16.270 --> 16:18.070
安装到一些依赖了并不完美啊

16:18.070 --> 16:19.170
他这里的警告呢

16:19.170 --> 16:21.070
主要是根据就是版本依赖的

16:21.470 --> 16:23.270
版本依赖的警告啊

16:23.270 --> 16:24.270
版本的依赖的警告

16:24.970 --> 16:26.270
不用管他啊不用管他

16:27.770 --> 16:29.070
ok那么安装完了

16:30.070 --> 16:31.270
安装完了过后呢你看

16:31.270 --> 16:32.770
这个工程结构给搭建出来了

16:32.770 --> 16:34.170
public的目录看没

16:34.570 --> 16:38.070
src目录该有的基本结构是不是搭建出来了

16:38.270 --> 16:39.770
如果说你这些东西要手动去做的话

16:39.770 --> 16:40.970
你看依赖关系啊

16:41.170 --> 16:43.070
这里边依赖你看dependence也是啊

16:43.070 --> 16:46.070
依赖还包括了一些脚奔给你写好的脚奔啊

16:46.070 --> 16:47.270
这不都加搭进来了

16:47.270 --> 16:48.070
这些东西不用管啊

16:48.070 --> 16:49.170
这些东西我们以后会讲

16:49.770 --> 16:51.570
啊那么是不是给搭建进来了

16:51.670 --> 16:53.770
ok那么这就是角色家的工了

16:54.170 --> 16:56.670
就是以前呢我们安装角色家要经过这么两个步骤

16:56.670 --> 16:57.970
一个是全局安装一个命令

16:57.970 --> 16:59.470
然后呢去搭建一个角色家

17:00.070 --> 17:00.870
那么之后呢

17:00.870 --> 17:01.870
我们就可以通过呀

17:01.870 --> 17:03.570
create的命令来完成了

17:03.570 --> 17:04.070
为什么呢

17:04.070 --> 17:05.470
因为大部分的角色家工具呢

17:05.470 --> 17:07.270
都是以这个名称开头的

17:07.370 --> 17:10.670
create衡杠啥啥这个名字命名的啊

17:11.070 --> 17:13.470
如果说你这个名字命名的角色家呢

17:13.470 --> 17:16.870
那么你可以使用呀create命令来完成搭建安装

17:16.870 --> 17:18.570
你看一下下面的例子就明白了

17:18.970 --> 17:21.170
下面我们刚才那两句在马是这样的写的

17:21.170 --> 17:21.570
对吧

17:21.670 --> 17:22.870
看一下是这样的写的

17:23.370 --> 17:25.270
啊我们先安装这个角色家

17:25.870 --> 17:27.170
然后全局安装

17:27.170 --> 17:28.970
然后呢再使用这个角色家命令呢

17:28.970 --> 17:30.470
去做一些事啊

17:30.470 --> 17:32.470
后面跟他一些参数做一些事啊

17:32.470 --> 17:33.670
比方说跟工程的名字

17:33.670 --> 17:34.770
他就帮你建立工程

17:34.970 --> 17:37.070
那么你完全可以用呀create

17:37.070 --> 17:38.170
一条命令来搞定

17:38.170 --> 17:38.970
那么这条命令呢

17:38.970 --> 17:40.970
就相当于是运行的下面两条命令

17:41.070 --> 17:42.870
就变得更加简洁一点啊

17:42.970 --> 17:45.070
呀create啊后面呢

17:45.270 --> 17:46.970
角色家的名字呢就去掉create

17:47.070 --> 17:48.270
然后呢后面跟上角下了

17:48.270 --> 17:50.070
角色家的参数就完事了

17:50.170 --> 17:51.270
一条命令就搞定了

17:51.370 --> 17:52.170
好比方说啊

17:52.170 --> 17:52.870
咱们再来一个

17:53.870 --> 17:55.070
我们把这个删掉了啊

17:58.030 --> 17:58.530
删掉

17:59.730 --> 18:00.930
这个毒性太多了啊

18:02.530 --> 18:03.930
要卡一会要卡一会

18:07.600 --> 18:08.100
稍等

18:13.400 --> 18:15.200
然后每次啊好了啊

18:15.500 --> 18:17.600
那么这里我们就直接使用呀create

18:17.800 --> 18:19.000
react app

18:19.000 --> 18:20.400
后面跟上卖 app

18:20.900 --> 18:21.500
回车

18:21.700 --> 18:23.800
那么他就连带连带什么呢

18:23.800 --> 18:26.200
连带就是安装全卷的角色家

18:26.200 --> 18:27.600
以前的搭建工程全部

18:27.600 --> 18:28.800
一时一时跟你做完了

18:28.800 --> 18:30.400
你看工程就也出来了啊

18:30.400 --> 18:31.200
就这么个意思啊

18:31.200 --> 18:32.000
其他都没啥

18:32.100 --> 18:33.400
就这个东西方便一点啊

18:33.400 --> 18:34.400
平时呢我们

18:34.500 --> 18:35.500
搭建角色家的时候呢

18:35.500 --> 18:37.700
如果是使用呀的话一般都会使用他

18:38.300 --> 18:39.700
ok啊这是关于

18:40.600 --> 18:41.900
这个呀create

18:42.900 --> 18:43.700
其他那就没啥了啊

18:43.800 --> 18:45.400
我也本来去等他安装完了啊

18:45.400 --> 18:46.900
没什么好看的都是一样的啊

18:47.700 --> 18:50.300
那么这就是关于呀的提供了一些

18:50.500 --> 18:51.300
特别的命令

18:51.300 --> 18:52.200
其实还有一些啊

18:52.200 --> 18:53.700
我们平时我们平时用不到

18:53.800 --> 18:55.700
我们用到的话也就是这么一些了

18:56.300 --> 18:58.500
ok那么呀这一块呢就讲解完成了

18:58.500 --> 18:59.200
你会发现呢

18:59.600 --> 19:00.700
你学了npm之后呢

19:00.700 --> 19:02.300
再学习其他的就是保管力气的

19:02.300 --> 19:03.700
就非常非常的简单了

19:04.100 --> 19:05.300
好咱们下一张呢

19:05.900 --> 19:07.400
就是听着玩一玩啊

19:07.400 --> 19:11.000
可能也市面上的还存在一些别的保管力气啊

19:11.000 --> 19:12.500
咱们了解一下就行了啊

19:12.600 --> 19:14.200
因为平时也不怎么会用的啊

19:14.200 --> 19:15.700
下一张我就听着玩一玩就行了

19:15.800 --> 19:18.500
ok那么这是这一张的呀这一点的知识

