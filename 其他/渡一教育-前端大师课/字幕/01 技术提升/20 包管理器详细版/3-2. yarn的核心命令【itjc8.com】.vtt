WEBVTT

00:00.750 --> 00:04.750
好了 咱们这节课就开始来学习这个压的命令

00:04.750 --> 00:07.250
其实压我上一课已经说了

00:07.250 --> 00:10.050
它其实并没有改变什么东西

00:10.050 --> 00:13.250
它只是对NPM一些不足的地方进行了优化

00:13.250 --> 00:16.250
很多地方跟NPM还是相同的

00:16.250 --> 00:18.250
比方说像什么配置文件

00:18.250 --> 00:22.250
像那个package.json 肯定是这个名字

00:22.250 --> 00:24.250
配置的方式跟NPM是一样的

00:24.250 --> 00:27.250
包括了下载的目录也是node modules

00:28.250 --> 00:30.250
为什么呢

00:30.250 --> 00:34.250
其实我们后面还会学一些别的保管理器

00:34.250 --> 00:36.250
它们都是基于NPM的

00:36.250 --> 00:37.250
为啥呢

00:37.250 --> 00:38.250
就一个原因

00:38.250 --> 00:41.250
因为node它只认NPM

00:41.250 --> 00:43.250
因为node它本身类似NPM

00:43.250 --> 00:45.250
我这样跟你说吧

00:45.250 --> 00:47.250
node那个创始人 叫啥名字来的

00:47.250 --> 00:49.250
它已经没有管node了

00:49.250 --> 00:50.250
它早就没管了

00:50.250 --> 00:52.250
它现在把node交给谁了

00:52.250 --> 00:54.250
交给NPM公司了

00:54.250 --> 00:56.250
所以说现在node就相当于

00:56.250 --> 00:57.250
NPM这个公司在管理

00:57.250 --> 00:58.250
你自己看吧

00:58.250 --> 00:59.250
你自己想去吧

00:59.250 --> 01:02.250
所以说别的保管理器也跑不了NPM的

01:02.250 --> 01:04.250
因为它也得使用NPM那种规则

01:04.250 --> 01:06.250
比方说下载的包

01:06.250 --> 01:07.250
它下载到什么地方呢

01:07.250 --> 01:08.250
也得是node modules

01:08.250 --> 01:10.250
因为node介绍它只认这个目录

01:10.250 --> 01:13.250
所以说一样它变化

01:13.250 --> 01:15.250
其实也就是在命令上变化

01:15.250 --> 01:18.250
其他地方也没有怎么变化

01:18.250 --> 01:20.250
只是它的命令有些区别

01:20.250 --> 01:21.250
然后它做了一些优化

01:21.250 --> 01:22.250
怎么去优化的呢

01:22.250 --> 01:23.250
上一课我已经说了

01:23.250 --> 01:25.250
那么那些优化它是自动完成的

01:25.250 --> 01:27.250
比方说什么缓存

01:27.250 --> 01:28.250
兵型下载

01:28.250 --> 01:29.250
它是自动完成的

01:29.250 --> 01:30.250
你都不用管

01:30.250 --> 01:31.250
对我们开发者而言的话

01:31.250 --> 01:33.250
可能最重要的就是

01:33.250 --> 01:35.250
学一下E2的一些核心的命令

01:35.250 --> 01:37.250
那么这就可能我们学习到命令的

01:37.250 --> 01:39.250
都是NPM里面有的

01:39.250 --> 01:41.250
它就是同样的功能

01:41.250 --> 01:43.250
或者说几乎同样的功能

01:43.250 --> 01:45.250
来 咱们来看一下

01:45.250 --> 01:46.250
首先是初始化

01:46.250 --> 01:49.250
它就相当于是NPM里面的init

01:49.250 --> 01:51.250
那么它把它变成了E2init

01:51.250 --> 01:53.250
就这么简单

01:53.250 --> 01:54.250
init

01:54.250 --> 01:56.250
这个地方我好像写错了

01:56.250 --> 01:58.250
这个地方没有这个玩意

01:58.250 --> 02:00.250
这个玩意应该写下来

02:00.250 --> 02:01.250
在这里

02:01.250 --> 02:02.250
把它写下来

02:03.250 --> 02:04.250
写下来

02:04.250 --> 02:05.250
OK

02:05.250 --> 02:07.250
我这里重新打开一次

02:08.250 --> 02:09.250
OK

02:09.250 --> 02:10.250
那么初始化来吧

02:10.250 --> 02:11.250
来初始化吧

02:11.250 --> 02:12.250
关了

02:12.250 --> 02:13.250
右键

02:13.250 --> 02:14.250
同样打开

02:15.250 --> 02:16.250
初始化

02:16.250 --> 02:18.250
init

02:18.250 --> 02:19.250
当然同样的

02:19.250 --> 02:20.250
后边如果说跟上两个

02:20.250 --> 02:21.250
HKs

02:21.250 --> 02:23.250
或者是跟上一个HKy

02:23.250 --> 02:24.250
那么它就是

02:24.250 --> 02:26.250
所谓的东西都是默认

02:26.250 --> 02:27.250
我们这里回车

02:27.250 --> 02:28.250
它让你问你

02:28.250 --> 02:29.250
这个名字是咋

02:29.250 --> 02:30.250
名字的话

02:30.250 --> 02:31.250
我们肯定不能用中文

02:31.250 --> 02:32.250
一样的

02:32.250 --> 02:33.250
这规则都是一样的

02:33.250 --> 02:35.250
就Chapter 3

02:36.250 --> 02:37.250
然后后边全部默认

02:37.250 --> 02:38.250
全部默认

02:38.250 --> 02:39.250
就完了

02:39.250 --> 02:40.250
就完了

02:40.250 --> 02:41.250
就生生的

02:41.250 --> 02:42.250
拍片点节省了

02:42.250 --> 02:43.250
实际上是一样的

02:43.250 --> 02:44.250
最一样的

02:44.250 --> 02:45.250
有它的区别

02:45.250 --> 02:46.250
是一样的

02:46.250 --> 02:48.250
好 那么这是初始化

02:48.250 --> 02:49.250
初始化

02:51.250 --> 02:52.250
接下来我们看下面

02:52.250 --> 02:53.250
然后安装包

02:54.250 --> 02:55.250
安装包

02:55.250 --> 02:56.250
它是使用的命令

02:56.250 --> 02:57.250
它不是Install

02:57.250 --> 02:58.250
是ADD

02:58.250 --> 03:00.250
使用添加一个包

03:00.250 --> 03:01.250
添加一个或多个包

03:01.250 --> 03:02.250
就使用ADD

03:02.250 --> 03:04.250
比方说我们安装一个包

03:04.250 --> 03:05.250
一样

03:05.250 --> 03:06.250
它肯定是本地安装

03:06.250 --> 03:07.250
就是本地安装

03:07.250 --> 03:08.250
一样比方说

03:08.250 --> 03:09.250
我们安装一个什么

03:09.250 --> 03:11.250
一安装一个

03:11.250 --> 03:12.250
Jecorate

03:12.250 --> 03:13.250
Jecorate

03:13.250 --> 03:14.250
好 回车

03:15.250 --> 03:16.250
就安装好了

03:16.250 --> 03:17.250
你可以看到

03:17.250 --> 03:18.250
一样的提示

03:18.250 --> 03:19.250
是非常简洁的

03:19.250 --> 03:20.250
实际上

03:20.250 --> 03:21.250
像这种提示

03:22.250 --> 03:24.250
后边也是被NPM所学习的

03:24.250 --> 03:25.250
你看现在NPM的提示

03:25.250 --> 03:27.250
也非常简洁的

03:27.250 --> 03:28.250
这就是安装一个包

03:28.250 --> 03:30.250
你看速度是非常快的

03:30.250 --> 03:32.250
然后我们再来安装一个

03:32.250 --> 03:33.250
一样

03:33.250 --> 03:34.250
不要安装两个吧

03:34.250 --> 03:35.250
一样

03:35.250 --> 03:36.250
ADD

03:36.250 --> 03:37.250
Lowdash

03:37.250 --> 03:39.250
Lowdash再安装一个什么

03:39.250 --> 03:40.250
mock.js

03:40.250 --> 03:41.250
随便安装一些

03:41.250 --> 03:43.250
那么就安装两个包

03:43.250 --> 03:44.250
就这么简单

03:44.250 --> 03:45.250
就这么简单

03:46.250 --> 03:47.250
那么这里就是

03:47.250 --> 03:48.250
一样的安装方式

03:48.250 --> 03:49.250
ADD

03:49.250 --> 03:51.250
它命令给你换成ADD了

03:51.250 --> 03:52.250
如果说你要

03:52.250 --> 03:53.250
把它变成什么

03:53.250 --> 03:55.250
把它变成这个就是

03:55.250 --> 03:57.250
开发一代的话

03:57.250 --> 03:58.250
那么加上两个横杆

03:58.250 --> 03:59.250
两个横杆

03:59.250 --> 04:01.250
或者是大写的一个横杆D

04:01.250 --> 04:03.250
比方说我们安装一个开发一代

04:03.250 --> 04:05.250
要ADD

04:05.250 --> 04:06.250
比方说什么

04:06.250 --> 04:07.250
mock.js

04:07.250 --> 04:08.250
横杆D

04:08.250 --> 04:09.250
大写的横杆D

04:10.250 --> 04:11.250
那么就安装好了

04:11.250 --> 04:12.250
mock.js

04:13.250 --> 04:14.250
那么它就把

04:14.250 --> 04:15.250
它所安装的包

04:15.250 --> 04:16.250
安装的哪些包

04:16.250 --> 04:18.250
具体安装的是什么版本

04:18.250 --> 04:19.250
安装的是什么

04:19.250 --> 04:20.250
它直接安装的

04:20.250 --> 04:21.250
依赖了是mock.js

04:21.250 --> 04:22.250
然后

04:22.250 --> 04:23.250
它所有的依赖了

04:23.250 --> 04:24.250
它给你打印出来

04:24.250 --> 04:26.250
下面是info信息

04:26.250 --> 04:27.250
那么它的信息

04:27.250 --> 04:28.250
其实已经很简洁了

04:28.250 --> 04:30.250
不像以前NPM

04:30.250 --> 04:31.250
进行了

04:31.250 --> 04:32.250
每一个安装包了

04:32.250 --> 04:33.250
它又搭对信息

04:33.250 --> 04:34.250
它这里就很简洁了

04:34.250 --> 04:35.250
一个包的名字

04:35.250 --> 04:36.250
一个就是包的版本

04:36.250 --> 04:37.250
它具体的安装版本

04:37.250 --> 04:38.250
给打印出来

04:38.250 --> 04:39.250
OK 那么这就是

04:39.250 --> 04:40.250
安装包

04:40.250 --> 04:41.250
那么这样子

04:41.250 --> 04:43.250
我们看一下Packy.json

04:44.250 --> 04:45.250
看下面

04:46.250 --> 04:47.250
你看 是不是

04:48.250 --> 04:49.250
对吧

04:49.250 --> 04:50.250
那有一个人说

04:50.250 --> 04:51.250
我们要全局安装呢

04:51.250 --> 04:52.250
是这样子的

04:52.250 --> 04:54.250
压室支持全局安装的

04:54.250 --> 04:55.250
但是呢

04:55.250 --> 04:57.250
它是非常不建议

04:57.250 --> 04:58.250
进行全局安装

04:58.250 --> 04:59.250
全局安装

04:59.250 --> 05:00.250
我这两个给你说吧

05:00.250 --> 05:02.250
是因为以前呢

05:02.250 --> 05:03.250
NPM里边呢

05:03.250 --> 05:05.250
要执行一些全局的命令

05:05.250 --> 05:06.250
我们之前说过

05:06.250 --> 05:07.250
全局安装的目的是什么呢

05:07.250 --> 05:08.250
就是要执行一些

05:08.250 --> 05:09.250
全局的命令

05:09.250 --> 05:10.250
当时呢

05:10.250 --> 05:11.250
又没有这个npx

05:11.250 --> 05:12.250
那个工具

05:12.250 --> 05:13.250
所以说呢

05:13.250 --> 05:14.250
你本地安装的

05:14.250 --> 05:15.250
一些命令呢

05:15.250 --> 05:16.250
也没法执行

05:16.250 --> 05:17.250
你只能全局安装命令

05:17.250 --> 05:18.250
然后呢

05:18.250 --> 05:19.250
后来呢

05:19.250 --> 05:20.250
出现了npx

05:20.250 --> 05:21.250
出现了这个东西过后呢

05:21.250 --> 05:23.250
全局安装的意义

05:23.250 --> 05:24.250
已经不大了

05:24.250 --> 05:25.250
已经不大了

05:25.250 --> 05:26.250
所以说呢

05:26.250 --> 05:27.250
现在呢尽量

05:27.250 --> 05:28.250
能不全局安装的话

05:28.250 --> 05:29.250
就尽量的

05:29.250 --> 05:30.250
不要全局安装

05:30.250 --> 05:31.250
全局安装的

05:31.250 --> 05:33.250
可能还剩下一个意义

05:33.250 --> 05:34.250
就是我们之后呢

05:34.250 --> 05:35.250
后边的课程

05:35.250 --> 05:36.250
会学习的脚头架

05:36.250 --> 05:37.250
脚头架呢

05:37.250 --> 05:38.250
你得全局安装

05:38.250 --> 05:39.250
不然的话

05:39.250 --> 05:40.250
这不是很好用

05:40.250 --> 05:41.250
所以说呢

05:41.250 --> 05:43.250
我们全局安装的意义

05:43.250 --> 05:44.250
很大了

05:44.250 --> 05:45.250
所以尽量建议你

05:45.250 --> 05:46.250
用本地安装

05:46.250 --> 05:47.250
那如果说你一定要

05:47.250 --> 05:48.250
进行全局安装

05:48.250 --> 05:49.250
比方说我们后边

05:49.250 --> 05:51.250
就要安装脚头架

05:51.250 --> 05:52.250
那必须得全局安装

05:52.250 --> 05:53.250
那么这个时候

05:53.250 --> 05:54.250
咱们怎么办呢

05:54.250 --> 05:55.250
而这个时候呢

05:55.250 --> 05:56.250
我们只要在

05:56.250 --> 05:57.250
凡是设计到全局啊

05:57.250 --> 05:59.250
只要在这个命令之前

05:59.250 --> 06:00.250
注意位置啊

06:00.250 --> 06:01.250
一定是之前

06:01.250 --> 06:02.250
加上一个glob

06:02.250 --> 06:03.250
就完事了

06:03.250 --> 06:04.250
好

06:04.250 --> 06:05.250
比方说吧

06:05.250 --> 06:06.250
咱们来安装一个啥呀

06:06.250 --> 06:08.250
安装一个全局

06:08.250 --> 06:09.250
比方说

06:09.250 --> 06:10.250
随便安装一个吧

06:10.250 --> 06:12.250
比方说全局安装一个NOTOM

06:13.250 --> 06:14.250
Glob

06:14.250 --> 06:15.250
NOTOM

06:15.250 --> 06:16.250
好

06:16.250 --> 06:17.250
那么这样子

06:17.250 --> 06:19.250
少了个命令

06:19.250 --> 06:20.250
少了个命令

06:20.250 --> 06:21.250
Glob

06:21.250 --> 06:22.250
ADD

06:22.250 --> 06:23.250
NOTOM

06:24.250 --> 06:25.250
那么这样子

06:25.250 --> 06:26.250
就进行了全局安装

06:28.250 --> 06:29.250
好

06:29.250 --> 06:30.250
然后我们来运行一下

06:30.250 --> 06:31.250
这个命令

06:31.250 --> 06:32.250
你看

06:32.250 --> 06:33.250
NOTOM

06:33.250 --> 06:34.250
那么它就变成了全局命令了

06:34.250 --> 06:35.250
OK

06:35.250 --> 06:36.250
当然现在没有入口文件

06:36.250 --> 06:37.250
没有写入口文件

06:37.250 --> 06:38.250
我们随便写一个吧

06:38.250 --> 06:40.250
应得点解释

06:41.250 --> 06:42.250
OK

06:44.250 --> 06:45.250
哈喽

06:45.250 --> 06:46.250
好

06:46.250 --> 06:47.250
你看是不是说哈喽了

06:47.250 --> 06:48.250
对吧

06:48.250 --> 06:50.250
这就是全局安装

06:50.250 --> 06:52.250
加上Glob就完事了

06:52.250 --> 06:53.250
好

06:53.250 --> 06:54.250
然后安装还有一种情况

06:54.250 --> 06:55.250
还有一种情况

06:55.250 --> 06:56.250
它是把分开的

06:56.250 --> 06:58.250
安装单个或多个包

06:58.250 --> 07:00.250
和安装所有依赖

07:00.250 --> 07:01.250
它两个命令是分开的

07:01.250 --> 07:02.250
避免你混淆

07:02.250 --> 07:04.250
所以它给你加另外一个命令

07:04.250 --> 07:05.250
叫YAH INSTOR

07:05.250 --> 07:07.250
如果说你使用这个命令的话

07:07.250 --> 07:09.250
那么就像那样NPM INSTOR

07:09.250 --> 07:10.250
但是后来跟的

07:10.250 --> 07:11.250
不会跟包民

07:11.250 --> 07:13.250
跟包民也是没意义的

07:13.250 --> 07:14.250
那么它这个东西

07:14.250 --> 07:15.250
就是安装所有依赖

07:15.250 --> 07:16.250
这是什么情况呢

07:16.250 --> 07:17.250
就是说

07:17.250 --> 07:18.250
如果说你的NOTOM就是

07:18.250 --> 07:19.250
没有拷贝过去

07:19.250 --> 07:20.250
比方说这里

07:20.250 --> 07:21.250
碗衫除掉

07:21.250 --> 07:22.250
你看

07:22.250 --> 07:23.250
比方说我们把工程拷贝过去

07:23.250 --> 07:24.250
它是不是只拷贝了

07:24.250 --> 07:25.250
这个东西

07:25.250 --> 07:26.250
对不对

07:26.250 --> 07:27.250
有可能还怕

07:27.250 --> 07:28.250
会把这个文件拷贝过去

07:28.250 --> 07:29.250
这个文件里边记录了什么呢

07:29.250 --> 07:30.250
记录了确切依赖

07:30.250 --> 07:32.250
记录了它每个版本的确切依赖

07:32.250 --> 07:33.250
那么

07:33.250 --> 07:34.250
那么现在我们来还原

07:34.250 --> 07:35.250
那么怎么写呢

07:35.250 --> 07:37.250
就是YAH INSTOR

07:37.250 --> 07:38.250
就不是ADD了

07:38.250 --> 07:39.250
INSTOR

07:39.250 --> 07:40.250
这样子呢

07:40.250 --> 07:41.250
就把它还原了

07:41.250 --> 07:42.250
OK

07:42.250 --> 07:43.250
就这么简单

07:43.250 --> 07:44.250
就这么简单

07:44.250 --> 07:45.250
然后呢

07:45.250 --> 07:46.250
还有就是

07:46.250 --> 07:47.250
如果说你在后边

07:47.250 --> 07:48.250
加上一个PRODUCTING

07:48.250 --> 07:50.250
或者是两个横杠

07:50.250 --> 07:51.250
PRO

07:51.250 --> 07:52.250
那么这个是什么意思呢

07:52.250 --> 07:55.250
它只安装生产环境的依赖

07:55.250 --> 07:56.250
有开发环境的

07:56.250 --> 07:57.250
就是这个地方

07:57.250 --> 07:58.250
就不安装了

07:58.250 --> 08:00.250
跟NPM是一样的

08:00.250 --> 08:01.250
这是关于安装

08:01.250 --> 08:02.250
是不是很简单

08:02.250 --> 08:03.250
就算命里边了一下

08:03.250 --> 08:05.250
然后是那个

08:05.250 --> 08:06.250
你看看

08:06.250 --> 08:07.250
运行脚本

08:07.250 --> 08:08.250
跟脚本相关的

08:08.250 --> 08:09.250
脚本的话

08:09.250 --> 08:10.250
你还是一样的

08:10.250 --> 08:12.250
还是配置在这个PACKET.JSON里边

08:12.250 --> 08:13.250
还是配置在这里边

08:13.250 --> 08:15.250
比方说我们这里配置个脚本

08:15.250 --> 08:18.250
配置个啥脚本呢

08:18.250 --> 08:19.250
比方说

08:19.250 --> 08:21.250
配置了一个ABC

08:21.250 --> 08:22.250
脚本

08:22.250 --> 08:23.250
这个比方干嘛呢

08:23.250 --> 08:24.250
就DR嘛

08:24.250 --> 08:26.250
打印当前的目录

08:26.250 --> 08:27.250
就随便写个

08:27.250 --> 08:28.250
我就看一下怎么去运行

08:28.250 --> 08:29.250
这个脚本

08:29.250 --> 08:30.250
来吧

08:30.250 --> 08:31.250
运行脚本的话

08:31.250 --> 08:32.250
非常简单

08:32.250 --> 08:34.250
使用YAH ROUND

08:34.250 --> 08:35.250
运行

08:35.250 --> 08:36.250
之前是NPM ROUND

08:36.250 --> 08:37.250
那么这是YAH ROUND

08:37.250 --> 08:39.250
那么这里是写了什么ABC

08:39.250 --> 08:41.250
你看是不是把目录列出来了

08:41.250 --> 08:43.250
就这么简单

08:43.250 --> 08:44.250
同样的道理

08:44.250 --> 08:46.250
什么START

08:46.250 --> 08:47.250
START

08:47.250 --> 08:48.250
还有什么STOP

08:48.250 --> 08:49.250
TEST

08:49.250 --> 08:50.250
那么这些都可以上去

08:50.250 --> 08:52.250
比方说我们这里运行一下

08:52.250 --> 08:53.250
START

08:53.250 --> 08:56.250
比方说我们这里写个START

08:56.250 --> 08:57.250
START

08:57.250 --> 08:58.250
START

08:58.250 --> 09:00.250
我们用LOAD IN这个字

09:00.250 --> 09:01.250
来

09:01.250 --> 09:02.250
我们来看一下

09:02.250 --> 09:04.880
好

09:04.880 --> 09:05.880
这里的NPM

09:06.880 --> 09:07.880
START

09:07.880 --> 09:08.880
你看

09:08.880 --> 09:09.880
是不是就运行

09:09.880 --> 09:11.880
index.js

09:11.880 --> 09:12.880
一样的

09:12.880 --> 09:14.880
唯一的区别在哪呢

09:14.880 --> 09:15.880
唯一的区别是

09:15.880 --> 09:16.880
YAH里面

09:16.880 --> 09:18.880
它就不存在什么NPX的

09:18.880 --> 09:19.880
就不存在这个东西的

09:19.880 --> 09:20.880
所以说你如果说

09:20.880 --> 09:22.880
你要运行本地脚本的话

09:22.880 --> 09:23.880
那么你要加上

09:23.880 --> 09:25.880
你可以直接用这个命令

09:25.880 --> 09:26.880
来运行本地脚本

09:26.880 --> 09:28.880
不是本地的CD命令

09:28.880 --> 09:29.880
怎么意思呢

09:29.880 --> 09:30.880
就是我们之前安装了

09:30.880 --> 09:31.880
一些本地包的时候

09:31.880 --> 09:33.880
它在这个并目录下面

09:33.880 --> 09:34.880
它给你加了一些命令

09:34.880 --> 09:35.880
比方说这里呢

09:35.880 --> 09:36.880
一个摩卡

09:36.880 --> 09:37.880
一个摩卡命令

09:37.880 --> 09:38.880
那么我们要运行这个命令

09:38.880 --> 09:39.880
我们之前是用什么

09:39.880 --> 09:41.880
是不是用NPX摩卡

09:41.880 --> 09:42.880
对吧

09:42.880 --> 09:43.880
用这种方式来运行

09:43.880 --> 09:44.880
然后这个摩卡的

09:44.880 --> 09:45.880
后边没有写文件

09:45.880 --> 09:46.880
没有写文件

09:46.880 --> 09:47.880
它是个测试命令

09:47.880 --> 09:48.880
后面要跟文件的

09:48.880 --> 09:49.880
这是爆出了

09:49.880 --> 09:50.880
但是命令人能识别

09:50.880 --> 09:51.880
如果说

09:51.880 --> 09:52.880
那么你使用YAH的话

09:52.880 --> 09:53.880
那么怎么办呢

09:53.880 --> 09:54.880
就是YAH wrong

09:54.880 --> 09:55.880
摩卡就完了

09:55.880 --> 09:57.880
它就不存在什么NPX

09:58.880 --> 09:59.880
YAH

09:59.880 --> 10:00.880
看

10:00.880 --> 10:01.880
是不是YAH

10:01.880 --> 10:02.880
这就是关于

10:02.880 --> 10:03.880
运行本地脚本

10:03.880 --> 10:04.880
当然全局脚本了

10:04.880 --> 10:06.880
全局的CD的话

10:06.880 --> 10:07.880
全局的CD的话

10:07.880 --> 10:08.880
是不是直接就来了

10:08.880 --> 10:09.880
对不对

10:09.880 --> 10:10.880
一样的

10:10.880 --> 10:11.880
好

10:11.880 --> 10:12.880
接下来我们看一下

10:12.880 --> 10:14.880
一些关键信息的查询

10:14.880 --> 10:15.880
其实最重要的

10:15.880 --> 10:16.880
也就是这么一些了

10:16.880 --> 10:17.880
最重要的这么一些了

10:17.880 --> 10:19.880
后边让我们来看一下

10:19.880 --> 10:20.880
一些查询

10:20.880 --> 10:22.880
首先是关于目录的查询

10:22.880 --> 10:23.880
就是YAH的目录

10:23.880 --> 10:24.880
YAH的并目录

10:24.880 --> 10:25.880
其他的目录

10:25.880 --> 10:26.880
它都不是很重要

10:26.880 --> 10:27.880
主要是YAH的并目录

10:27.880 --> 10:29.880
YAH的并目录是什么

10:29.880 --> 10:31.880
就是它的CNN

10:31.880 --> 10:32.880
的命令行工具

10:32.880 --> 10:33.880
所保存的目录

10:33.880 --> 10:34.880
那么这样子

10:34.880 --> 10:35.880
你看一下

10:35.880 --> 10:36.880
是不是在这

10:36.880 --> 10:37.880
在哪呢

10:37.880 --> 10:38.880
是不是在漏的吗

10:38.880 --> 10:39.880
就是这个地方

10:39.880 --> 10:40.880
它可以查询

10:40.880 --> 10:41.880
YAH的并目录

10:41.880 --> 10:42.880
好

10:42.880 --> 10:43.880
如果说你跟上前面

10:43.880 --> 10:44.880
跟上一个Global

10:44.880 --> 10:45.880
Global一定要跟前面

10:45.880 --> 10:46.880
那么加上个并

10:46.880 --> 10:47.880
它就可以查看

10:47.880 --> 10:48.880
全局的

10:48.880 --> 10:49.880
全局安装的时候

10:49.880 --> 10:50.880
它并的目录

10:50.880 --> 10:51.880
咱们进去看一下

10:51.880 --> 10:53.880
YAH的全局目录在这

10:53.880 --> 10:54.880
后边跟上一个并

10:54.880 --> 10:55.880
就是并的文件夹

10:55.880 --> 10:56.880
咱们看一下

11:00.030 --> 11:01.030
你看

11:01.030 --> 11:02.030
这就是YAH的全局并目录

11:02.030 --> 11:04.030
我们不是安装的Global吗

11:04.030 --> 11:05.030
对吧

11:05.030 --> 11:06.030
安装在这

11:06.030 --> 11:07.030
好

11:07.030 --> 11:08.030
我们回到上一期目录

11:08.030 --> 11:09.030
你看一下

11:09.030 --> 11:10.030
它在全局目录下面

11:10.030 --> 11:11.030
有这么三个

11:11.030 --> 11:12.030
这个是不是缓存

11:12.030 --> 11:13.030
对不对

11:13.030 --> 11:14.030
YAH的缓存

11:14.030 --> 11:15.030
这里边记录了很多东西

11:15.030 --> 11:16.030
缓存了很多的包

11:16.030 --> 11:18.030
每个版本

11:18.030 --> 11:19.030
然后呢

11:19.030 --> 11:20.030
并目录就是记录了

11:20.030 --> 11:21.030
全局的

11:21.030 --> 11:22.030
就是CNN

11:22.030 --> 11:23.030
然后呢

11:23.030 --> 11:24.030
这个data目录

11:24.030 --> 11:26.030
就记录了Global

11:26.030 --> 11:27.030
这个就是全局目录

11:27.030 --> 11:29.030
是不是Global就是安装在这

11:29.030 --> 11:30.030
对吧

11:30.030 --> 11:31.030
也是全局的包

11:31.030 --> 11:32.030
全部安装在这了

11:32.030 --> 11:33.030
而且呢

11:33.030 --> 11:34.030
我们之前说过

11:34.030 --> 11:36.030
YAH里边的全局目录里边

11:36.030 --> 11:37.030
它会多这么一个东西

11:37.030 --> 11:38.030
拍一点节省

11:38.030 --> 11:39.030
多这么一个东西

11:39.030 --> 11:41.030
这东西多了有什么好处呢

11:41.030 --> 11:43.030
就在于你还原

11:43.030 --> 11:45.030
然后到了另外一台计算机

11:45.030 --> 11:46.030
我怎么办呢

11:46.030 --> 11:47.030
我要还原这个全局安装

11:47.030 --> 11:49.030
我只需要把这个拍一点节省

11:49.030 --> 11:50.030
给它拷贝过去

11:50.030 --> 11:52.030
那么它到这个目录过后

11:52.030 --> 11:53.030
然后呢

11:53.030 --> 11:55.030
运行一下Install

11:55.030 --> 11:56.030
是不是就全局安装了

11:56.030 --> 11:57.030
对吧

11:57.030 --> 11:58.030
它就一一主要在这

11:59.030 --> 12:00.030
OK

12:00.030 --> 12:01.030
查看并目录

12:01.030 --> 12:02.030
然后呢

12:02.030 --> 12:03.030
我们看一下

12:03.030 --> 12:04.030
之前呢

12:04.030 --> 12:05.030
我们学NPM的时候

12:05.030 --> 12:06.030
是不是学了

12:06.030 --> 12:07.030
可以查一个包的一些信息

12:07.030 --> 12:08.030
对不对

12:08.030 --> 12:09.030
用什么

12:09.030 --> 12:10.030
用NPM5U

12:10.030 --> 12:11.030
也可以用秀

12:11.030 --> 12:12.030
也可以用info都一样

12:12.030 --> 12:13.030
加了很多别名

12:13.030 --> 12:14.030
后面跟上一个包

12:14.030 --> 12:16.030
是不是可以看一个包的信息

12:16.030 --> 12:18.030
那么YAH也是差不多的

12:18.030 --> 12:19.030
YAHinfo一个包名

12:19.030 --> 12:21.030
它就可以把一个包的信息

12:21.030 --> 12:22.030
查看出来

12:22.030 --> 12:23.030
只不过YAH里边

12:23.030 --> 12:24.030
它查看了包的信息

12:24.030 --> 12:25.030
非常非常丰富

12:25.030 --> 12:27.030
东西特别特别特别多

12:27.030 --> 12:28.030
你看info

12:28.030 --> 12:30.030
我们比方查看一个reacts

12:30.030 --> 12:32.030
你看东西特别特别多

12:32.030 --> 12:34.030
它把它的所有的情况

12:34.030 --> 12:35.030
版本一

12:35.030 --> 12:37.030
它的所有的依赖关系

12:37.030 --> 12:38.030
以及呢

12:38.030 --> 12:39.030
它的发布时间

12:39.030 --> 12:41.030
全部给你查看出来了

12:41.030 --> 12:43.030
所以说它东西特别多

12:43.030 --> 12:44.030
因此呢

12:44.030 --> 12:45.030
我们不太会用这一个命令

12:45.030 --> 12:46.030
用这种命令来查看

12:46.030 --> 12:47.030
我们一般

12:47.030 --> 12:49.030
一般的会在后面跟上纸之端

12:49.030 --> 12:51.030
就跟那个NPM是一样的

12:51.030 --> 12:53.030
比方说我们可以看

12:53.030 --> 12:54.030
info

12:54.030 --> 12:55.030
reacts

12:55.030 --> 12:57.030
我们看一下它的比方说

12:57.030 --> 12:59.030
它的那个版本吧

12:59.030 --> 13:00.030
有哪些版本

13:00.030 --> 13:01.030
virtues

13:01.030 --> 13:03.030
它一共有这么一些版本

13:03.030 --> 13:04.030
看没

13:04.030 --> 13:05.030
它可以全部查出来

13:05.030 --> 13:06.030
在这儿

13:06.030 --> 13:07.030
从这里开始

13:07.030 --> 13:08.030
好,然后我们再来

13:08.030 --> 13:09.030
clear

13:09.030 --> 13:11.030
比方说我们要查看

13:11.030 --> 13:12.030
reacts这个包

13:12.030 --> 13:14.030
它还可以

13:14.030 --> 13:16.030
查看它的说明文档

13:16.030 --> 13:17.030
因为我们工程

13:17.030 --> 13:18.030
跟目录下面

13:18.030 --> 13:19.030
一般会有这么一个文件

13:19.030 --> 13:20.030
就是readme

13:20.030 --> 13:21.030
md

13:21.030 --> 13:22.030
有这么一个文件

13:22.030 --> 13:23.030
它会把这个工程里边

13:23.030 --> 13:24.030
这个文件也读出来

13:24.030 --> 13:26.030
就是在发布到包里边的

13:26.030 --> 13:27.030
这个说明文档给你读出来

13:27.030 --> 13:29.030
那么后面跟上readme

13:29.030 --> 13:31.790
你可以看到

13:31.790 --> 13:32.790
它是用markdown写成的

13:32.790 --> 13:33.790
看,是标题

13:33.790 --> 13:35.790
对吧,markdown写成的

13:35.790 --> 13:36.790
然后呢,这边有些

13:36.790 --> 13:37.790
夹出字体

13:37.790 --> 13:38.790
对吧

13:38.790 --> 13:39.790
这里边有一些信息

13:39.790 --> 13:41.790
关于reacts的一些简单描述

13:41.790 --> 13:43.790
给你打印出来

13:43.790 --> 13:44.790
就这么个意思

13:44.790 --> 13:45.790
这查看吧

13:45.790 --> 13:47.790
当然我们通常情况下

13:47.790 --> 13:48.790
查看一个包的信息

13:48.790 --> 13:49.790
我们一般的官网上

13:49.790 --> 13:51.790
看得更舒服一点

13:51.790 --> 13:53.790
这里是关于查询

13:53.790 --> 13:54.790
包信息

13:54.790 --> 13:55.790
然后下面这个

13:55.790 --> 13:57.790
是关于列局

13:57.790 --> 13:59.790
已经安装的依赖

13:59.790 --> 14:01.790
是不是跟那个

14:01.790 --> 14:03.790
npm list是一样的

14:03.790 --> 14:04.790
跟npm list是一样的

14:04.790 --> 14:05.790
咱们来看一下吧

14:05.790 --> 14:07.790
这里是用yarn list

14:07.790 --> 14:08.790
好,回车

14:08.790 --> 14:09.790
那么它就会把

14:09.790 --> 14:11.790
依赖关系给打印出来

14:11.790 --> 14:12.790
依赖关系,看一下吧

14:12.790 --> 14:13.790
依赖关系

14:13.790 --> 14:14.790
那么它这种依赖关系

14:14.790 --> 14:16.790
格式跟npm就不太一样

14:16.790 --> 14:19.790
npm是从直接依赖开始

14:19.790 --> 14:20.790
对吧

14:20.790 --> 14:21.790
我们看一下npm list

14:21.790 --> 14:23.790
再对比一下

14:23.790 --> 14:24.790
clear

14:24.790 --> 14:26.790
npm list

14:26.790 --> 14:28.790
好,看一下

14:28.790 --> 14:30.790
好

14:30.790 --> 14:33.790
你会看到这个npm list

14:33.790 --> 14:35.790
跑到下面

14:35.790 --> 14:36.790
npm list

14:36.790 --> 14:37.790
它是从直接依赖开始

14:37.790 --> 14:38.790
这是顶级依赖

14:38.790 --> 14:39.790
这是顶级依赖

14:39.790 --> 14:40.790
这是顶级依赖

14:40.790 --> 14:41.790
就是我们直接依赖了它

14:41.790 --> 14:42.790
然后它又依赖了它

14:42.790 --> 14:43.790
对吧

14:43.790 --> 14:44.790
它是从这样子开始的

14:44.790 --> 14:45.790
而这个yarn

14:45.790 --> 14:46.790
它不是这样子

14:46.790 --> 14:47.790
yarn

14:47.790 --> 14:49.790
它是按照这个目录来裸裂的

14:49.790 --> 14:50.790
它是按照这个

14:50.790 --> 14:51.790
load margins

14:51.790 --> 14:53.790
能目录来裸裂的

14:53.790 --> 14:54.790
把这个目录里面的

14:54.790 --> 14:56.790
依赖关系给打印出来

14:56.790 --> 14:59.790
因此像我们它依赖的就是

14:59.790 --> 15:00.790
它这个目录里面的文念甲

15:00.790 --> 15:02.790
它都会给你打印出来

15:02.790 --> 15:04.790
那么这样子有什么好处呢

15:04.790 --> 15:05.790
这样子它主要是输出了

15:05.790 --> 15:07.790
信息更加丰富

15:07.790 --> 15:08.790
而且你可以看到

15:08.790 --> 15:09.790
它这里面的每一个包

15:09.790 --> 15:11.790
它给大家一个版本号

15:11.790 --> 15:12.790
就是你安装那个包

15:12.790 --> 15:14.790
安装的是具体的什么版本

15:14.790 --> 15:15.790
它可以把这个东西

15:15.790 --> 15:17.790
也给你打印出来了

15:17.790 --> 15:18.790
没了意思吗

15:18.790 --> 15:21.790
它这个信息的比较丰富

15:21.790 --> 15:22.790
它里面包含了

15:22.790 --> 15:23.790
什么顶级目录结构

15:23.790 --> 15:24.790
就是load margins

15:24.790 --> 15:25.790
里面的顶级目录结构

15:25.790 --> 15:26.790
然后呢

15:26.790 --> 15:27.790
每一个包的一代版本号

15:27.790 --> 15:28.790
它都在里面了

15:28.790 --> 15:29.790
所以说看你自己

15:29.790 --> 15:31.790
看你喜欢看哪种模式

15:31.790 --> 15:33.790
如果说你喜欢NPM

15:33.790 --> 15:34.790
那么模式的话

15:34.790 --> 15:35.790
你就用NPM来查看

15:35.790 --> 15:36.790
如果你喜欢亚洲模式的话

15:36.790 --> 15:37.790
就用亚洲的方式来查看

15:37.790 --> 15:39.790
它这个方式的主要好处

15:39.790 --> 15:40.790
在在于它里面

15:40.790 --> 15:41.790
给你列出来版本号

15:41.790 --> 15:42.790
而且呢同样的道理

15:42.790 --> 15:44.790
它是给你

15:44.790 --> 15:45.790
这是什么

15:45.790 --> 15:47.790
这里是list

15:47.790 --> 15:48.790
然后可以给你

15:48.790 --> 15:50.790
让你指定这个深度

15:50.790 --> 15:51.790
深度为0

15:51.790 --> 15:52.790
那么深度为0的话

15:52.790 --> 15:53.790
它跟NPM不一样

15:53.790 --> 15:54.790
NPM的话

15:54.790 --> 15:55.790
是不是只打印

15:55.790 --> 15:56.790
直接一代

15:56.790 --> 15:57.790
那么它不是

15:57.790 --> 15:58.790
它是把顶级目录给打印出来

15:58.790 --> 15:59.790
它是按照这个目录结构

15:59.790 --> 16:00.790
给打印的

16:00.790 --> 16:02.790
就看你自己需要哪一种

16:03.790 --> 16:04.790
那么如果说你加上

16:04.790 --> 16:05.790
那个global的话

16:05.790 --> 16:06.790
那么它自然而然

16:06.790 --> 16:07.790
就打印的是什么

16:07.790 --> 16:09.790
打印的是那个就是

16:10.790 --> 16:11.790
那个什么

16:11.790 --> 16:12.790
那个全局

16:12.790 --> 16:13.790
全局安装的

16:13.790 --> 16:15.790
全局安装的就是列表

16:15.790 --> 16:16.790
就这么简单

16:16.790 --> 16:18.790
这是关于这个

16:18.790 --> 16:19.790
查询

16:20.790 --> 16:21.790
然后更新

16:22.790 --> 16:23.790
更新的话

16:23.790 --> 16:24.790
一个是查询更新

16:24.790 --> 16:26.790
检查哪些需要更新的

16:26.790 --> 16:28.790
一个是更新具体的包

16:28.790 --> 16:29.790
更新具体的包

16:29.790 --> 16:30.790
如果说你不给包名的话

16:30.790 --> 16:31.790
就更新所有的

16:31.790 --> 16:32.790
什么意思呢

16:32.790 --> 16:33.790
我们来随便来一个吧

16:33.790 --> 16:34.790
随便来一个

16:34.790 --> 16:37.790
比方说我安装一个

16:39.790 --> 16:40.790
我把它删了

16:40.790 --> 16:43.230
删了

16:43.230 --> 16:44.230
好 删了过后

16:44.230 --> 16:45.230
我们这里呢

16:45.230 --> 16:47.230
查询一下楼大喜

16:48.230 --> 16:49.230
12

16:49.230 --> 16:51.230
info

16:51.230 --> 16:52.230
楼大喜

16:53.230 --> 16:54.230
这个versions

16:54.230 --> 16:55.230
看一下它有哪些版本

16:56.230 --> 16:57.230
比方说我们安装

16:57.230 --> 16:58.230
一个楼大喜版本吧

16:58.230 --> 17:00.230
3.5.0

17:01.230 --> 17:02.230
我们到party.json里边

17:05.120 --> 17:06.120
好 这里边我们把它删掉

17:07.120 --> 17:08.120
这边楼大喜呢

17:08.120 --> 17:09.120
保留

17:09.120 --> 17:11.120
只是给它设置为

17:11.120 --> 17:12.120
3.5.0

17:13.120 --> 17:14.120
好 这样吧

17:14.120 --> 17:15.120
我们先也不安装了

17:15.120 --> 17:16.120
我们直接在

17:16.120 --> 17:17.120
命令行里边安装

17:18.120 --> 17:20.120
就是使用12 ADD

17:20.120 --> 17:21.120
对吧

17:21.120 --> 17:22.120
然后楼大喜

17:22.120 --> 17:23.120
可以直接版本号

17:23.120 --> 17:24.120
3.5.0 一样的

17:25.120 --> 17:26.120
安装

17:27.120 --> 17:28.120
安装好了过后

17:28.120 --> 17:29.120
目前安装的什么版本呢

17:29.120 --> 17:30.120
就是3.5.0

17:31.120 --> 17:32.120
咱们可以通过什么命令呢

17:32.120 --> 17:34.120
12 list的命令

17:34.120 --> 17:35.120
来进行查看

17:35.120 --> 17:36.120
你看 是不是3.5.0

17:37.120 --> 17:38.120
好 那么这边生成的结构呢

17:38.120 --> 17:39.120
我们这里

17:39.120 --> 17:40.120
加上这个

17:41.120 --> 17:42.120
3.5.0

17:43.120 --> 17:44.120
好 然后现在我们来升级

17:44.120 --> 17:45.120
看一下有没有需要

17:45.120 --> 17:47.120
在目前的这个一代关系下面

17:47.120 --> 17:48.120
能不能升级呢

17:48.120 --> 17:49.120
我们可以通过这个

17:49.120 --> 17:50.120
1.2.0

17:50.120 --> 17:51.120
跟那个npm一样

17:51.120 --> 17:52.120
outstated

17:53.120 --> 17:54.120
对吧

17:55.120 --> 17:57.120
哎呀 这里哪写错了

17:57.120 --> 17:59.120
outstated

17:59.120 --> 18:00.120
1.2.0

18:00.120 --> 18:02.490
哪写错了

18:02.490 --> 18:03.490
没有写错了

18:03.490 --> 18:05.490
没有写错 看一下

18:07.490 --> 18:09.490
please

18:09.490 --> 18:10.490
明白了 明白了

18:10.490 --> 18:11.490
就是因为我们刚才改的

18:11.490 --> 18:12.490
我们刚才是手动产的

18:12.490 --> 18:14.490
并没有用它的卸载命令

18:14.490 --> 18:15.490
对吧

18:15.490 --> 18:16.490
我们刚才是用

18:16.490 --> 18:17.490
没有用它的卸载命令

18:17.490 --> 18:18.490
那么导致了一个结果

18:18.490 --> 18:19.490
结果呢

18:19.490 --> 18:21.490
就是我这个package.json文件

18:21.490 --> 18:22.490
跟那个1.lock文件

18:22.490 --> 18:23.490
跟那个锁的文件

18:23.490 --> 18:24.490
是不一致的

18:24.490 --> 18:25.490
不一致的话

18:25.490 --> 18:26.490
还会报错的

18:26.490 --> 18:27.490
那么这里呢

18:27.490 --> 18:29.930
我先把这个锁删掉

18:29.930 --> 18:30.930
好 那么这里

18:30.930 --> 18:31.930
我们来

18:31.930 --> 18:32.930
outstated

18:33.930 --> 18:34.930
他说什么

18:35.930 --> 18:36.930
他说还是

18:36.930 --> 18:37.930
他必须要用锁文件

18:37.930 --> 18:38.930
必须要用锁文件

18:38.930 --> 18:39.930
那行吧

18:39.930 --> 18:40.930
那行吧

18:40.930 --> 18:41.930
我这里呢

18:41.930 --> 18:42.930
把这个去掉

18:42.930 --> 18:43.930
重新来一次

18:43.930 --> 18:44.930
重新来一次

18:48.840 --> 18:49.840
我们以后

18:49.840 --> 18:51.840
删除包 卸载包

18:51.840 --> 18:52.840
我们尽量的使用

18:52.840 --> 18:54.840
它指定的卸载命令

18:54.840 --> 18:55.840
我们一会会说

18:55.840 --> 18:56.840
add

18:56.840 --> 18:57.840
添加一个

18:58.840 --> 18:59.840
主要是把锁文件

18:59.840 --> 19:00.840
添加出来

19:00.840 --> 19:01.840
OK

19:01.840 --> 19:02.840
那么现在呢

19:02.840 --> 19:03.840
我们通过out

19:03.840 --> 19:05.840
这里加上这个

19:05.840 --> 19:06.840
这里

19:06.840 --> 19:07.840
它没有

19:07.840 --> 19:08.840
加上这个东西呢

19:08.840 --> 19:09.840
它就不是指定版本了

19:09.840 --> 19:10.840
对吧

19:10.840 --> 19:11.840
它不是指定版本

19:11.840 --> 19:12.840
那像这样吧

19:12.840 --> 19:13.840
它就是

19:13.840 --> 19:15.840
它就是精确版本了

19:15.840 --> 19:16.840
我们这样

19:16.840 --> 19:17.840
给它加上

19:17.840 --> 19:18.840
手动给它加上这个

19:18.840 --> 19:19.840
然后呢

19:19.840 --> 19:23.500
install

19:24.500 --> 19:26.500
安装好了

19:26.500 --> 19:27.500
然后呢

19:27.500 --> 19:28.500
我们在这里

19:28.500 --> 19:29.500
看一下

19:31.500 --> 19:33.500
它已经安装到最新了

19:33.500 --> 19:34.500
已经安装到最新了

19:34.500 --> 19:35.500
这个位置

19:35.500 --> 19:36.500
我想想

19:36.500 --> 19:37.500
这是什么

19:37.500 --> 19:39.500
那我还不好举例子

19:39.500 --> 19:40.500
这里

19:40.500 --> 19:41.500
就是什么意思呢

19:41.500 --> 19:42.500
刚才我

19:42.500 --> 19:44.500
如果说我直接安装

19:44.500 --> 19:45.500
说一下

19:45.500 --> 19:46.500
刚才遇到什么问题

19:46.500 --> 19:47.500
这个地方

19:47.500 --> 19:48.500
我想给大家举

19:48.500 --> 19:49.500
一个例子

19:49.500 --> 19:50.500
方向还不是很好举例子

19:50.500 --> 19:52.500
这个跟NPM

19:52.500 --> 19:53.500
有点区别

19:53.500 --> 19:54.500
就是说

19:54.500 --> 19:55.500
如果说

19:55.500 --> 19:56.500
我们用NPMinstall

19:56.500 --> 19:57.500
来安装的话

19:57.500 --> 19:58.500
那么你安装到哪个版本

19:58.500 --> 19:59.500
它不给你自动加上这个

19:59.500 --> 20:00.500
对吧

20:00.500 --> 20:01.500
那么

20:01.500 --> 20:02.500
压也是这样子

20:02.500 --> 20:03.500
只不过呢

20:03.500 --> 20:04.500
如果说

20:04.500 --> 20:06.500
用压来进行这样的安装

20:06.500 --> 20:08.500
压

20:08.500 --> 20:09.500
删掉

20:09.500 --> 20:10.500
如果说你用压来

20:10.500 --> 20:11.500
进行这样的安装

20:11.500 --> 20:12.500
ADD

20:12.500 --> 20:13.500
什么呢

20:13.500 --> 20:14.500
就是Lowdash

20:16.500 --> 20:17.500
刚才这里几个

20:17.500 --> 20:18.500
哪个版本

20:18.500 --> 20:19.500
3.5.0

20:19.500 --> 20:20.500
是吧

20:20.500 --> 20:21.500
OK

20:21.500 --> 20:22.500
3.5.0

20:22.500 --> 20:23.500
如果你进行这样的安装的话

20:23.500 --> 20:24.500
那么

20:24.500 --> 20:25.500
它给你添加的压来

20:25.500 --> 20:26.500
就自动是缺席版本了

20:26.500 --> 20:28.500
因为你指定的是缺席版本

20:28.500 --> 20:29.500
那么它安装的时候

20:29.500 --> 20:30.500
一定是缺席版本

20:30.500 --> 20:31.500
那为什么我在这里

20:31.500 --> 20:32.500
不能手动加呢

20:32.500 --> 20:34.500
为什么不能手动加呢

20:34.500 --> 20:35.500
因为你这样子

20:35.500 --> 20:36.500
一手动加的话

20:36.500 --> 20:37.500
会导致一个问题

20:37.500 --> 20:39.500
那么这里的压来关系

20:39.500 --> 20:40.500
它的版本

20:40.500 --> 20:41.500
跟这个lock文件

20:41.500 --> 20:42.500
就不一致了

20:42.500 --> 20:44.500
它就这么回事了

20:44.500 --> 20:45.500
它就不一致了

20:45.500 --> 20:46.500
所以说

20:46.500 --> 20:47.500
这个时候

20:47.500 --> 20:48.500
它要出问题

20:48.500 --> 20:49.500
就要出问题

20:49.500 --> 20:50.500
那个lock文件

20:50.500 --> 20:51.500
它又不能没有

20:51.500 --> 20:52.500
所以说

20:52.500 --> 20:53.500
这个地方就不好办了

20:53.500 --> 20:54.500
实际上我们

20:54.500 --> 20:55.500
我们在真实的开发中

20:55.500 --> 20:57.500
是不会遇到这种情况的

20:57.500 --> 20:58.500
我主要是想

20:58.500 --> 20:59.500
给它演示什么呢

20:59.500 --> 21:00.500
我安装3.5.0

21:00.500 --> 21:01.500
然后去检测

21:01.500 --> 21:03.500
它能不能升级

21:03.500 --> 21:04.500
现在就检测不了了

21:04.500 --> 21:06.500
因为它是依赖的缺席版本

21:06.500 --> 21:07.500
你看吧

21:10.500 --> 21:12.500
所以检测不了了

21:12.500 --> 21:14.500
现在的版本是什么呢

21:14.500 --> 21:15.500
3.5.0

21:15.500 --> 21:16.500
想要的版本

21:16.500 --> 21:17.500
也是3.5.0

21:17.500 --> 21:18.500
它就没有什么可以升级的

21:18.500 --> 21:19.500
对吧

21:19.500 --> 21:20.500
可以升级的

21:20.500 --> 21:22.500
所以说现在就检测不了了

21:22.500 --> 21:23.500
不要了

21:25.500 --> 21:26.500
那怎么办

21:26.500 --> 21:27.500
那怎么办了

21:27.500 --> 21:28.500
那就没法了

21:28.500 --> 21:29.500
那就没法了

21:29.500 --> 21:31.500
所以这个命令还是有用的

21:31.500 --> 21:32.500
它什么情况要用的

21:32.500 --> 21:34.500
就是说你安装了一个包的时候

21:34.500 --> 21:36.500
比方说你安装的是

21:36.500 --> 21:38.500
就是依赖的最新版本

21:38.500 --> 21:41.500
当时生成出来的可能是这样子的

21:41.500 --> 21:45.770
我再重新举个例子

21:45.770 --> 21:47.770
伤掉

21:47.770 --> 21:49.770
就是说你正常来操作的话

21:49.770 --> 21:50.770
那么是有用的

21:50.770 --> 21:52.770
因为我这里也不可能去等个一年

21:52.770 --> 21:54.770
我这个课程不可能

21:54.770 --> 21:56.770
等个一两个月

21:56.770 --> 21:57.770
或者是等一两周

21:57.770 --> 21:58.770
然后再给你看效果吧

21:58.770 --> 22:00.770
所以说没办法

22:00.770 --> 22:01.770
那么ADD比方说我们这里

22:01.770 --> 22:03.770
如果是这样正常安装的话

22:03.770 --> 22:04.770
正常安装的话

22:04.770 --> 22:05.770
你看一下是不是

22:05.770 --> 22:06.770
它目前依赖的版本是

22:06.770 --> 22:07.770
4.1

22:07.770 --> 22:09.770
17.15至上

22:09.770 --> 22:10.770
对吧

22:10.770 --> 22:11.770
只要逐版本好五遍就行了

22:11.770 --> 22:12.770
那么过了一段时间

22:12.770 --> 22:14.770
那么这个版本是不是会增加

22:14.770 --> 22:15.770
这个版本是不是也可能会增加

22:15.770 --> 22:16.770
那么你可以通过要

22:16.770 --> 22:17.770
outdated

22:17.770 --> 22:18.770
那么就可以检测出

22:18.770 --> 22:20.770
因为没有新版本可以安装

22:20.770 --> 22:22.770
就这么个意思

22:22.770 --> 22:24.770
那么如果说你加上global

22:24.770 --> 22:25.770
就检测权具

22:25.770 --> 22:27.770
加上global的话

22:27.770 --> 22:29.770
如果说这里加上global

22:29.770 --> 22:31.770
就检测权具的

22:31.770 --> 22:33.770
好像这个地方是不能加global的

22:33.770 --> 22:35.770
好像这个地方是不能加的

22:35.770 --> 22:36.770
那么更新包

22:36.770 --> 22:37.770
更新包的话是

22:37.770 --> 22:40.770
压globalupgrade

22:40.770 --> 22:42.770
upgrade加上包迷

22:42.770 --> 22:44.770
那么就可以更新指定的包

22:44.770 --> 22:46.770
那么跟NPM是一样的

22:46.770 --> 22:47.770
NPM是不过是update

22:47.770 --> 22:51.770
upgrade也是NPM的一个别名

22:51.770 --> 22:53.770
那么这里直接是用upgrade

22:53.770 --> 22:55.770
如果说你要权具更新的话

22:55.770 --> 22:57.770
更新权具的包的话

22:57.770 --> 22:58.770
那么就是用global

22:58.770 --> 23:00.770
那么如果你不指定包迷的话

23:00.770 --> 23:02.770
那就是把你本地的依赖全部更新

23:02.770 --> 23:04.770
能更新的全部更新

23:04.770 --> 23:07.770
比方说我们这里一样update

23:07.770 --> 23:08.770
upgrade

23:08.770 --> 23:09.770
是不是全部更新

23:09.770 --> 23:10.770
对吧 全部更新

23:10.770 --> 23:11.770
不过现在没有什么更新的

23:11.770 --> 23:13.770
没有什么更新的

23:13.770 --> 23:15.770
OK 这是关于更新

23:15.770 --> 23:17.770
那么最后就是卸载

23:17.770 --> 23:18.770
re-remove

23:18.770 --> 23:20.770
以后在操作压里面的东西的时候

23:20.770 --> 23:23.770
一定要用这个命令来进行卸载

23:23.770 --> 23:24.770
一定要用命令来进行卸载

23:24.770 --> 23:27.770
比方说我们用re-remove

23:27.770 --> 23:28.770
no dash

23:28.770 --> 23:30.770
一定要用这个命令来卸载

23:30.770 --> 23:31.770
为什么呢

23:31.770 --> 23:32.770
因为你卸载的时候

23:32.770 --> 23:34.770
它会改动这个lock文件

23:34.770 --> 23:36.770
或者lock文件里面进行改动

23:36.770 --> 23:38.770
所以说你一定要用这个remove

23:38.770 --> 23:39.770
命令来卸载

23:39.770 --> 23:40.770
咱们再安装两个吧

23:40.770 --> 23:41.770
ADD

23:41.770 --> 23:42.770
解query

23:42.770 --> 23:44.770
no dash

23:44.770 --> 23:47.340
安装好了

23:47.340 --> 23:49.340
然后我们来卸载一样

23:49.340 --> 23:51.340
卸载的时候你可以跟多个包名

23:51.340 --> 23:53.340
比方说我们解query

23:53.340 --> 23:54.340
空格

23:54.340 --> 23:55.340
no dash

23:55.340 --> 23:56.340
把两个包都进行卸载

23:56.340 --> 23:58.340
很轻鬆 对吧

23:58.340 --> 23:59.340
那如果有些同学说

23:59.340 --> 24:02.340
咱们要把全部卸载怎么办呢

24:02.340 --> 24:04.340
全部卸载的话

24:04.340 --> 24:06.340
你自己手中操作就完事了

24:06.340 --> 24:08.340
怎么卸载

24:08.340 --> 24:10.340
这个东西一删

24:10.340 --> 24:11.340
lock文件一删

24:11.340 --> 24:13.340
排科技里面dependence

24:13.340 --> 24:14.340
全部删完

24:14.340 --> 24:16.340
lock码90一删就完事了

24:16.340 --> 24:18.340
自己手中去删一下就完事了

24:18.340 --> 24:20.340
我们一般不太会

24:20.340 --> 24:22.340
全部卸载

24:22.340 --> 24:23.340
全部卸载的话

24:23.340 --> 24:25.340
什么情况下你会全部卸载呢

24:25.340 --> 24:27.340
是不是你做错了这个工程

24:27.340 --> 24:28.340
做错了你重新建个文件夹

24:28.340 --> 24:29.340
重新哪一次呗

24:29.340 --> 24:32.340
你把之前的文件夹全部删完了 得了

24:32.340 --> 24:34.340
那么就是这里关于这个压的

24:34.340 --> 24:36.340
这些用法

24:36.340 --> 24:38.340
压里边其实还有什么配置文件那些

24:38.340 --> 24:39.340
我们就不讲了

24:39.340 --> 24:40.340
因为为什么呢

24:40.340 --> 24:41.340
因为压了配置文件

24:41.340 --> 24:42.340
我们往往就不怎么用

24:42.340 --> 24:43.340
我们用的

24:43.340 --> 24:45.340
如果说要用配置的话

24:45.340 --> 24:46.340
就是这个东西

24:46.340 --> 24:47.340
config

24:47.340 --> 24:48.340
如果要用这个东西的话

24:48.340 --> 24:49.340
一般就用npm的

24:49.340 --> 24:51.340
压了个config

24:51.340 --> 24:52.340
一般不会用

24:52.340 --> 24:53.340
我们可以看一下吧

24:53.340 --> 24:55.780
可以看一下

24:55.780 --> 24:57.780
它里边的配置

24:57.780 --> 24:58.780
它里面也有一些配置

24:58.780 --> 24:59.780
压里面的配置

24:59.780 --> 25:00.780
不过我们平常都不用

25:00.780 --> 25:01.780
都不用

25:01.780 --> 25:04.780
然后他还会给你列举出npm的配置

25:04.780 --> 25:05.780
OK我们都不用的

25:05.780 --> 25:06.780
所以说我们平时

25:06.780 --> 25:07.780
如果配置的话

25:07.780 --> 25:08.780
还是用npm

25:08.780 --> 25:09.780
然后包括那个什么

25:09.780 --> 25:11.780
包的登录

25:11.780 --> 25:13.780
就是npm登录

25:13.780 --> 25:14.780
然后登出

25:14.780 --> 25:15.780
然后发布

25:15.780 --> 25:16.780
那么都是用npm

25:16.780 --> 25:18.780
都不太会使用这个压

25:18.780 --> 25:19.780
OK

25:19.780 --> 25:21.780
那么这就是关于压的

25:21.780 --> 25:22.780
核心的命令

25:22.780 --> 25:23.780
好我们学习了

25:23.780 --> 25:24.780
其实你看一下

25:24.780 --> 25:25.780
其实很简单

25:25.780 --> 25:26.780
因为你把这些

25:26.780 --> 25:28.780
这些原理性的东西的

25:28.780 --> 25:29.780
这些概念性的东西

25:29.780 --> 25:30.780
理解清楚之后

25:30.780 --> 25:31.780
你剩下的就是

25:31.780 --> 25:32.780
这些命令的话

25:32.780 --> 25:33.780
就很简单

25:33.780 --> 25:34.780
你还有一些介绍完了

25:34.780 --> 25:36.780
然后是最后的就是

25:36.780 --> 25:37.780
下一节课

25:37.780 --> 25:38.780
下一节课我们讲的是

25:38.780 --> 25:40.780
压里边

25:40.780 --> 25:42.780
比较独特的一些东西

25:42.780 --> 25:43.780
比较独特的

25:43.780 --> 25:44.780
其实有些东西的npm

25:44.780 --> 25:45.780
现在也有了

25:45.780 --> 25:46.780
有些也有了

25:46.780 --> 25:47.780
以前是没有的

25:47.780 --> 25:49.780
压里边比较独特的东西

25:49.780 --> 25:50.780
拿出来讲一下

25:50.780 --> 25:51.780
OK

