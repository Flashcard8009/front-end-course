WEBVTT

00:00.560 --> 00:04.560
这期课咱们来说一下这个Bower

00:04.560 --> 00:11.560
这个玩意 没它用了 已经彻底的被历史淘汰了

00:11.560 --> 00:14.560
简单了解一下 几分钟直接了解一下

00:14.560 --> 00:16.560
在上课之前 说一下上级课的东西

00:16.560 --> 00:19.560
上级课可能 如果说你听了上级课扩展课程的同学

00:19.560 --> 00:21.560
可能会有一个疑问 我上级课忘了说了

00:21.560 --> 00:25.560
就是关于这个PMP它的目录结构会不会太深了

00:25.560 --> 00:28.560
太深了导致的Windows系统 因为我们知道Windows系统

00:28.560 --> 00:31.560
如果说文件的路径太长 它可能识别不了

00:31.560 --> 00:35.560
那么PMPM 它会不会导致文件的路径过长呢

00:35.560 --> 00:37.560
不会 为什么不会呢

00:37.560 --> 00:39.560
因为它的文件路径是可控的

00:39.560 --> 00:43.560
如果说你没有听过上级课的课的话 你快进一下

00:43.560 --> 00:47.560
我再补充一下 它的文件路径是可控的

00:47.560 --> 00:49.560
比方说我们刚才的 比方说在这里边

00:49.560 --> 00:53.560
看上去好像很深的样子 看上去好像很深

00:53.560 --> 00:56.560
但是它到这无论你这个依赖关系多么的复杂

00:56.560 --> 00:58.560
千头多么的深 它到这一定结束了

00:58.560 --> 01:02.560
它路径一定到这就结束了 你想想那个道理

01:02.560 --> 01:04.560
比方说 你我们比方举个例子

01:04.560 --> 01:09.560
A依赖B B依赖C C依赖D D依赖E E依赖F

01:09.560 --> 01:12.560
那么这个样子会不会导致过程呢 不会

01:12.560 --> 01:14.560
还是这么多 你看一下吧

01:14.560 --> 01:17.560
因为这里只放置B的直接依赖

01:17.560 --> 01:20.560
你看它只放置A和B

01:20.560 --> 01:22.560
那么这里B由于依赖C

01:22.560 --> 01:25.560
那么这里放置什么 B和C同级目录

01:25.560 --> 01:27.560
然后下面这里是不是还有一个C纹念价

01:27.560 --> 01:29.560
C放置什么了 C放置C和D

01:29.560 --> 01:31.560
然后是不是还有一个D纹念价

01:31.560 --> 01:33.560
D放置D和E 还有一个E纹念价放置E

01:33.560 --> 01:36.560
所以它这种格式呢 看上去目录很深不深

01:36.560 --> 01:38.560
但是它是可控的

01:38.560 --> 01:41.560
它不像NPM最早期那种 它是不可控的

01:41.560 --> 01:43.560
NPM早期它是怎么做的

01:43.560 --> 01:45.560
A下面有个node modules

01:45.560 --> 01:47.560
你不要放置什么 放置B

01:47.560 --> 01:49.560
B下面有个node modules

01:49.560 --> 01:51.560
放置C

01:51.560 --> 01:52.560
那么这个是动态的

01:52.560 --> 01:54.560
它是根据依赖关系动态生成的

01:54.560 --> 01:56.560
一代关系越深那么它就会越深

01:56.560 --> 01:59.560
但是NPM它这种方式呢

01:59.560 --> 02:00.560
虽然说看上去很深

02:00.560 --> 02:02.560
但是无论一代关系多陌生

02:02.560 --> 02:04.560
它都是一样的深度

02:04.560 --> 02:07.560
所以说它不会导致这个结构过程

02:07.560 --> 02:08.560
而且上一课我也说到了

02:08.560 --> 02:13.560
NPM现在已经把问题解决了

02:13.560 --> 02:17.560
就是我们之前说的这个话

02:17.560 --> 02:20.560
我们之前说NPM的

02:20.560 --> 02:22.560
这里注意事向这里

02:23.560 --> 02:25.560
每个包它只能使用直接一代

02:25.560 --> 02:26.560
而不能使用间接一代

02:26.560 --> 02:29.560
因此如果说使用NPM安装了

02:29.560 --> 02:30.560
包含间接一代的话

02:30.560 --> 02:32.560
会出问题 现在不会了

02:32.560 --> 02:37.560
现在不会了

02:37.560 --> 02:41.560
除非使用了绝对路径

02:41.560 --> 02:43.560
就是如果说一个包开发者

02:43.560 --> 02:45.560
一个包开发者已经傻到什么程度呢

02:45.560 --> 02:47.560
它在包里面写这种代码

02:47.560 --> 02:49.560
require

02:49.560 --> 02:51.560
当前目的下面node modules

02:51.560 --> 02:53.560
下面这种代码

02:53.560 --> 02:55.560
它写这种代码的时候

02:55.560 --> 02:56.560
它要出问题

02:56.560 --> 02:58.560
除了使用这种代码之外

02:58.560 --> 03:00.560
它不会出问题了

03:00.560 --> 03:01.560
所以现在不会了

03:01.560 --> 03:05.560
因此我这里就非常推荐大家使用NPM

03:05.560 --> 03:07.560
下面我们讲几分钟时间

03:07.560 --> 03:09.560
讲一下包含已经过时的东西

03:09.560 --> 03:10.560
这个玩意是什么呢

03:10.560 --> 03:13.560
就是以前包管令系出来之后

03:13.560 --> 03:15.560
当时ES6都还没有出来

03:15.560 --> 03:18.560
官方的模块化ES6 module也没出来

03:18.560 --> 03:20.560
那么包管令就是NPM出来之后

03:20.560 --> 03:22.560
很多人就在想

03:22.560 --> 03:25.560
在node的这个环境下边

03:25.560 --> 03:27.560
我们可以这么舒服的写代

03:27.560 --> 03:29.560
那么浏览器环境怎么办呢

03:29.560 --> 03:31.560
就开始有些人想些办法了

03:31.560 --> 03:33.560
包含了这个库

03:33.560 --> 03:34.560
这个第三方库

03:34.560 --> 03:35.560
它就是在想这个办法

03:35.560 --> 03:37.560
它是用来在浏览器端

03:37.560 --> 03:39.560
搞定这个问题的

03:39.560 --> 03:41.560
它的浏览器端来搞定

03:41.560 --> 03:42.560
已经在关系

03:42.560 --> 03:43.560
但是现在用不用它了

03:43.560 --> 03:44.560
完全不用了

03:44.560 --> 03:45.560
因为它这种方式太多后了

03:45.560 --> 03:47.560
因为它是非常非常早期

03:47.560 --> 03:48.560
它有它的历史作用

03:48.560 --> 03:50.560
包括它当时出来的过后

03:50.560 --> 03:51.560
还蛮激动的人心的

03:51.560 --> 03:53.560
很多的浏览器一些第三方库

03:53.560 --> 03:55.560
它都去支持了包耳的这种格式

03:55.560 --> 03:56.560
这种结构

03:56.560 --> 03:58.560
但是现在还有意义吗

03:58.560 --> 03:59.560
现在没意义了

03:59.560 --> 04:01.560
因为现在ES6官方出来的模块化之后

04:01.560 --> 04:03.560
而且有一个非常强大的东西

04:03.560 --> 04:04.560
叫做WePAC

04:04.560 --> 04:06.560
我们后边的课程会讲

04:06.560 --> 04:08.560
会中年讲

04:08.560 --> 04:09.560
它已经完全能够

04:09.560 --> 04:11.560
特别特别好的解决这个问题了

04:11.560 --> 04:13.560
在浏览器端使用这个模块化

04:13.560 --> 04:14.560
使用模块化

04:14.560 --> 04:15.560
已经使用这个包管令系

04:15.560 --> 04:17.560
已经非常好的解决了

04:17.560 --> 04:19.560
所以包耳已经没用了

04:19.560 --> 04:21.560
那么我们还是来认识一下

04:21.560 --> 04:24.560
历史上的这么一个东西

04:24.560 --> 04:25.560
我们进入这个目录

04:25.560 --> 04:26.560
首先我们首先要

04:26.560 --> 04:28.560
全局安装这个包耳

04:28.560 --> 04:30.560
同样是用NPM安装

04:30.560 --> 04:33.560
韩钢技叫包耳

04:33.560 --> 04:36.940
安装一下

04:36.940 --> 04:37.940
那么这句话

04:37.940 --> 04:38.940
它已经告诉了

04:38.940 --> 04:39.940
War

04:39.940 --> 04:41.940
警告

04:41.940 --> 04:44.940
Deprecated

04:44.940 --> 04:46.940
表示已经过时了

04:46.940 --> 04:47.940
包耳已经过时了

04:47.940 --> 04:50.940
我们已经不再推荐你使用包耳了

04:50.940 --> 04:51.940
对于一些新的工程

04:51.940 --> 04:52.940
已经不再推荐你使用了

04:52.940 --> 04:54.940
请考虑使用AR

04:54.940 --> 04:55.940
或者是WePAC

04:55.940 --> 04:56.940
或者是Puzzle

04:56.940 --> 04:57.940
你说

04:57.940 --> 04:59.940
可以使用这东西

04:59.940 --> 05:01.940
后边我们重点讲WePAC

05:01.940 --> 05:03.940
用这东西已经很好能解决

05:03.940 --> 05:04.940
包耳能解决的问题了

05:04.940 --> 05:05.940
包耳其实非常简单

05:05.940 --> 05:07.940
简单到令人发指

05:07.940 --> 05:08.940
它做到什么事情呢

05:08.940 --> 05:09.940
安装好了包耳过后

05:09.940 --> 05:11.940
就可以使用包耳命令了

05:11.940 --> 05:12.940
我们很刚微

05:12.940 --> 05:14.940
来看一下它的版本

05:14.940 --> 05:15.940
那么我们首先

05:15.940 --> 05:16.940
到这个目录里边

05:16.940 --> 05:18.940
之前不是用NPM来出示化工程吗

05:18.940 --> 05:20.940
那么现在在浏览器环境里面

05:20.940 --> 05:22.940
包耳可以使用包耳Init

05:22.940 --> 05:24.940
来出示化工程

05:24.940 --> 05:25.940
稍等一下

05:25.940 --> 05:26.940
我用你名字

05:26.940 --> 05:28.940
就是无数位

05:28.940 --> 05:29.940
OK

05:29.940 --> 05:30.940
那么这里

05:30.940 --> 05:31.940
我们看一下

05:31.940 --> 05:32.940
它给我们生成了一个

05:32.940 --> 05:33.940
一个接生文件

05:33.940 --> 05:34.940
是不是类似于NPM

05:34.940 --> 05:35.940
PAC一点接生

05:35.940 --> 05:36.940
对吧

05:36.940 --> 05:37.940
一样的差不多的

05:37.940 --> 05:38.940
其实包耳

05:38.940 --> 05:40.940
它也有一个服务器

05:40.940 --> 05:42.940
来放置一些浏览器包的

05:42.940 --> 05:44.940
那么这里的

05:44.940 --> 05:46.940
这些东西

05:46.940 --> 05:48.940
都是它从Git

05:48.940 --> 05:49.940
本地安装的Git里边

05:49.940 --> 05:50.940
读出来的

05:50.940 --> 05:51.940
OK

05:51.940 --> 05:52.940
那么这个配置文件

05:52.940 --> 05:53.940
安装好了过后

05:53.940 --> 05:54.940
接下来我们

05:54.940 --> 05:55.940
同样可以使用

05:55.940 --> 05:56.940
包耳命令的安装一代

05:56.940 --> 05:57.940
就是我们要开发

05:57.940 --> 05:58.940
一个浏览器端的

05:58.940 --> 05:59.940
应用程序

05:59.940 --> 06:00.940
那么我们肯定要有些一代

06:00.940 --> 06:01.940
比方说我们最常见的

06:01.940 --> 06:02.940
接夸位对吧

06:02.940 --> 06:03.940
我们现在就不是用

06:03.940 --> 06:04.940
NPM的安装了

06:04.940 --> 06:05.940
是用什么

06:05.940 --> 06:06.940
包耳的安装

06:06.940 --> 06:07.940
Install

06:07.940 --> 06:08.940
Save

06:08.940 --> 06:09.940
保存到

06:09.940 --> 06:10.940
配置文件里边

06:10.940 --> 06:12.940
然后我们接夸位

06:14.940 --> 06:16.940
下载接夸位

06:16.940 --> 06:17.940
让它下载吧

06:17.940 --> 06:20.440
你看

06:20.440 --> 06:22.440
它是不是生成了一个目录

06:22.440 --> 06:24.440
没它啥事了

06:24.440 --> 06:25.440
它生成了一个目录

06:25.440 --> 06:26.440
叫包耳Component

06:26.440 --> 06:27.440
那么这里边

06:27.440 --> 06:28.440
是有接夸位对吧

06:28.440 --> 06:29.440
有接夸位

06:29.440 --> 06:30.440
接夸位的代码

06:30.440 --> 06:31.440
在哪里呢在desk

06:31.440 --> 06:32.440
里边这个接夸位

06:32.440 --> 06:33.440
Mind.ts

06:33.440 --> 06:34.440
压缩过的

06:34.440 --> 06:36.440
使用这个

06:36.440 --> 06:37.440
好

06:37.440 --> 06:38.440
没了

06:38.440 --> 06:39.440
它的功能就到这了

06:39.440 --> 06:40.440
就到这就没了

06:40.440 --> 06:42.440
它就是来帮你下载的

06:42.440 --> 06:44.440
你不用去进入百度去搜

06:44.440 --> 06:45.440
你不用去搜

06:45.440 --> 06:46.440
你不用去进入官网

06:46.440 --> 06:47.440
它直接帮你下载好

06:47.440 --> 06:48.440
就通过一个命令

06:48.440 --> 06:49.440
其他的东西没了

06:49.440 --> 06:50.440
真没了

06:50.440 --> 06:51.440
现在我们接下来

06:51.440 --> 06:52.440
就是全次手动操作了

06:52.440 --> 06:53.440
比方说

06:53.440 --> 06:54.440
in this

06:54.440 --> 06:56.440
我们在这里呢

06:56.440 --> 06:57.440
比如说

06:57.440 --> 06:59.440
src 引用

06:59.440 --> 07:00.440
引用什么

07:00.440 --> 07:01.440
包耳Component

07:01.440 --> 07:02.440
接夸位

07:02.440 --> 07:03.440
desk

07:03.440 --> 07:04.440
然后什么

07:04.440 --> 07:05.440
接夸位

07:05.440 --> 07:06.440
Mind.ts

07:06.440 --> 07:07.440
没了

07:07.440 --> 07:08.440
然后我们这里

07:08.440 --> 07:09.440
输出一下多了

07:09.440 --> 07:10.440
看一下能不能输出

07:10.440 --> 07:12.440
console

07:12.440 --> 07:13.440
log

07:13.440 --> 07:14.440
讲多了

07:14.440 --> 07:15.440
看一下能不能输出

07:15.440 --> 07:16.440
就没了

07:16.440 --> 07:17.440
它就这样用

07:17.440 --> 07:18.440
它就是来帮你管理包的

07:18.440 --> 07:20.440
当然还有些下载命令

07:20.440 --> 07:21.440
更新命令我就不讲了

07:21.440 --> 07:23.440
就打开说一下

07:23.440 --> 07:25.440
运行一下

07:25.440 --> 07:26.440
右键

07:26.440 --> 07:27.440
检查

07:27.440 --> 07:29.440
控制它

07:29.440 --> 07:32.440
解块就能识别出来了

07:32.440 --> 07:34.440
就这么简单

07:34.440 --> 07:35.440
就这么简单

07:35.440 --> 07:36.440
没啥意义

07:36.440 --> 07:37.440
没啥意义

07:37.440 --> 07:38.440
你想这种东西

07:38.440 --> 07:39.440
这种用法比方说你包一多

07:39.440 --> 07:40.440
那是不是还是一个

07:40.440 --> 07:41.440
一代关系混乱的问题

07:41.440 --> 07:43.440
我到底该先引用哪一个

07:43.440 --> 07:45.440
还是有些这些问题存在

07:45.440 --> 07:46.440
当然你可以搭配一些

07:46.440 --> 07:47.440
什么别的

07:47.440 --> 07:48.440
什么AMD

07:48.440 --> 07:49.440
CMD

07:49.440 --> 07:50.440
我们之前讲过磨块

07:50.440 --> 07:51.440
那种东西

07:51.440 --> 07:52.440
可以搭配这些东西使用

07:52.440 --> 07:54.440
但是那也挺麻烦的

07:54.440 --> 07:55.440
根本不优雅

07:55.440 --> 07:56.440
所以说这个东西早就过时了

07:56.440 --> 07:58.440
我们了解一下它就行了

07:58.440 --> 08:00.440
以后我们有更好的解决

08:00.440 --> 08:01.440
解决办法

08:01.440 --> 08:02.440
好了

08:02.440 --> 08:05.440
我们包管的一期就到这了

08:05.440 --> 08:06.440
包管的一期

08:06.440 --> 08:07.440
我们就

08:08.440 --> 08:09.440
到此结束了

08:09.440 --> 08:10.440
包管的一期这里

08:10.440 --> 08:12.440
我们终点给大家推荐一下

08:12.440 --> 08:14.440
最重要的就是NPM

08:14.440 --> 08:16.440
你学会了它是最核心的

08:16.440 --> 08:18.440
因为它是官方的

08:18.440 --> 08:20.440
第二个是YAR

08:20.440 --> 08:22.440
然后是CNPM

08:22.440 --> 08:24.440
CNPM我们讲的简单

08:24.440 --> 08:26.440
因为它的用法跟NPM是完全一样的

08:26.440 --> 08:28.440
它就是提供别名CNPM

08:28.440 --> 08:31.440
然后把入口变成了什么

08:31.440 --> 08:34.440
变成了淘宝的入口

08:34.440 --> 08:36.440
后来它做了一些更新

08:36.440 --> 08:38.440
它学习的PNPM的东西

08:38.440 --> 08:40.440
那么现在我最推荐的

08:40.440 --> 08:42.440
就是如果说你自己写代

08:42.440 --> 08:43.440
写着玩

08:43.440 --> 08:44.440
我最推荐的是什么

08:44.440 --> 08:45.440
PNPM

08:45.440 --> 08:46.440
就推荐这个

08:46.440 --> 08:48.440
如果说你到公司里面去用的话

08:48.440 --> 08:50.440
那里看公司里面统一用啥

08:50.440 --> 08:52.440
你不要去制作主张

08:52.440 --> 08:54.440
公司里面如果说NPM就用它

08:54.440 --> 08:56.440
如果说用YAR就用它

08:56.440 --> 08:57.440
用CNPM就用它

08:57.440 --> 08:58.440
说不准

08:58.440 --> 09:00.440
就是说我们这些人都给大家讲了

09:00.440 --> 09:01.440
如果说个人推荐的话

09:01.440 --> 09:03.440
因为PNPM现在毕竟解决了

09:03.440 --> 09:04.440
之前那个问题了

09:04.440 --> 09:05.440
好久都没关注了

09:05.440 --> 09:07.440
讲这个课的时候去关注一下

09:07.440 --> 09:08.440
确实解决了

09:08.440 --> 09:10.440
讲个人项目的时候可以使用PNPM

09:10.440 --> 09:12.440
特别舒服

09:12.440 --> 09:13.440
OK

09:13.440 --> 09:14.440
其他的就没啥了

09:14.440 --> 09:15.440
就是保管力气

09:15.440 --> 09:16.440
整个课程也非常简单

09:16.440 --> 09:18.440
就是一些东西的使用

09:18.440 --> 09:19.440
命令是啥的

09:19.440 --> 09:20.440
也没有太多的远利

09:20.440 --> 09:22.440
可以给大家讲解

09:22.440 --> 09:23.440
OK

09:23.440 --> 09:25.440
这就是保管力气的课程

09:25.440 --> 09:26.440
到此结束了

09:26.440 --> 09:27.440
拜拜

