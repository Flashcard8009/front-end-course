WEBVTT

00:00.050 --> 00:02.930
好 我们来说这个事件

00:02.930 --> 00:04.770
事件这一块一讲

00:04.770 --> 00:08.050
我们整个DOM的最核心部分就结束了

00:08.050 --> 00:12.850
一看这个DOM 包括一个页面的界面控制

00:12.850 --> 00:15.610
很简单吧 对吧 有什么复杂的呢

00:15.610 --> 00:18.210
就是一堆对象 界面上就是一堆对象

00:18.210 --> 00:20.770
我们张级克说了 如何来获取它呢

00:20.770 --> 00:23.890
可以创建也可以获取现成的

00:23.890 --> 00:26.210
可以改动这些东西 对吧

00:26.210 --> 00:28.650
通过这个对象设置属性调用方法

00:28.650 --> 00:30.730
可以做这么一些事

00:30.730 --> 00:32.290
好 那么接下来我们来看一下

00:32.290 --> 00:35.610
关于DOM的事件 它是怎么回意思呢

00:35.610 --> 00:39.810
其实事件这一块我们可以用一句话来描述

00:39.810 --> 00:45.170
就是某一个DOM它发生了某一件事

00:45.170 --> 00:47.210
比方说用户点了一下

00:47.210 --> 00:50.610
用户鼠标移入了 等等等等

00:50.610 --> 00:51.970
发生了某一件事

00:51.970 --> 00:56.730
那么之后我可能要做某一些处理

00:56.770 --> 00:58.650
比方说我点了一个按钮

00:58.650 --> 01:00.330
这个页面上弹个框框出来

01:00.330 --> 01:02.370
对吧 我可能会做某一些处理

01:02.370 --> 01:04.610
这就是世界

01:04.610 --> 01:08.210
那么这句话里边它包含了三个东西

01:08.210 --> 01:10.570
一个是某个DOM

01:10.570 --> 01:11.290
它表示什么意思呢

01:11.290 --> 01:13.050
就是我要监听事件 是吗

01:13.050 --> 01:14.690
我一直把它盯着

01:14.690 --> 01:16.530
我看它发生了什么事

01:16.530 --> 01:19.290
就监听谁的问题

01:19.290 --> 01:23.210
那这句话就这个意思

01:23.210 --> 01:25.090
我到底要监听哪一个DOM

01:25.130 --> 01:27.930
随着我们事件这一块监听的是谁

01:27.930 --> 01:28.930
这跟什么东西相关

01:28.930 --> 01:31.610
还是跟DOM相关

01:31.610 --> 01:33.650
某件事说的是啥呢

01:33.650 --> 01:37.050
表示事件的类型

01:37.050 --> 01:42.050
它描述了你监听它发生了什么事呢

01:42.050 --> 01:44.050
然后它被点击了

01:44.050 --> 01:45.410
它鼠标移入了

01:45.410 --> 01:46.850
鼠标移出了

01:46.850 --> 01:47.690
还是什么情况了

01:47.690 --> 01:49.330
键盘按下了

01:49.330 --> 01:52.730
这些就是事件类型

01:52.730 --> 01:55.290
那这件事发生了之后

01:55.290 --> 01:56.890
我要做什么处理呢

01:56.890 --> 01:58.050
我要干嘛呢

01:58.050 --> 01:59.650
那用户点了点就点了呗

01:59.650 --> 02:01.210
那我要干嘛呢

02:01.210 --> 02:02.890
这叫处理函数

02:02.890 --> 02:05.090
就是说我要做什么

02:05.090 --> 02:06.410
事件里边就三个东西

02:06.410 --> 02:08.050
就这三个东西了

02:08.050 --> 02:09.410
那代码怎么来描述呢

02:09.410 --> 02:10.890
代码描述一看

02:10.890 --> 02:12.570
就是对应到这三个东西

02:12.570 --> 02:13.690
哪一个DOM

02:13.690 --> 02:14.850
那DOM哪来的

02:14.850 --> 02:15.690
前面说过的吧

02:15.690 --> 02:16.370
怎么获取DOM

02:16.370 --> 02:17.770
怎么创建DOM

02:17.770 --> 02:19.530
有非常丰富的方式

02:19.530 --> 02:22.570
你要监听哪一个DOM

02:23.530 --> 02:25.610
当它发生了什么的时候

02:25.610 --> 02:27.610
发生什么时候呢

02:27.610 --> 02:29.410
这里我写的是Click

02:29.410 --> 02:31.890
表示发生点击的时候

02:31.890 --> 02:33.890
当它被点击了

02:33.890 --> 02:34.250
对吧

02:34.250 --> 02:36.690
这某件事发生了

02:36.690 --> 02:38.170
那我要做什么呢

02:38.170 --> 02:39.090
叫处理函数

02:39.090 --> 02:40.370
给它复职

02:40.370 --> 02:42.650
复职一个函数

02:42.650 --> 02:44.010
相当于是给一个对象

02:44.010 --> 02:45.290
一个属性复职为一个函数

02:45.290 --> 02:46.850
就这么简单

02:46.850 --> 02:48.650
那么当它被点击的时候

02:48.650 --> 02:50.050
它就会自动的

02:50.050 --> 02:52.330
运行这个函数

02:52.410 --> 02:53.090
就完了

02:53.090 --> 02:55.170
这就是处设时间

02:55.170 --> 02:55.890
那么这句话

02:55.890 --> 02:57.290
我们可以把这样的描述

02:57.290 --> 03:00.330
以后我们说到这种描述方式

03:00.330 --> 03:03.130
你要知道老师说的什么意思

03:03.130 --> 03:04.810
我这句话可以这样描述

03:04.810 --> 03:05.770
为这个DOM

03:05.770 --> 03:07.650
处设点击时间

03:07.650 --> 03:09.530
处设的是点击时间

03:09.530 --> 03:11.490
当被点击的时候

03:11.490 --> 03:14.050
运行事件处理函数

03:14.050 --> 03:15.690
运行这个函数

03:15.690 --> 03:16.730
说这么一个意思

03:16.730 --> 03:17.450
那么这个函数

03:17.450 --> 03:20.610
也称之为事件的处理函数

03:20.650 --> 03:24.610
整个过程称之为事件处设

03:24.610 --> 03:26.210
处设一个时间

03:26.210 --> 03:27.210
处设什么意思

03:27.210 --> 03:29.410
一开始都没有人去监听它

03:29.410 --> 03:30.410
现在我监听了

03:30.410 --> 03:31.410
我告诉他

03:31.410 --> 03:33.250
就好像拿个小本记一下

03:33.250 --> 03:34.090
你来了

03:34.090 --> 03:36.530
你说我监听它之后

03:36.530 --> 03:37.810
你要去调用这个函数

03:37.810 --> 03:39.050
就叫事件处设

03:40.050 --> 03:41.410
那么我们来试试

03:41.410 --> 03:42.850
来写一写

03:42.850 --> 03:47.330
比方说我们这里随便来个客船代码

03:47.330 --> 03:50.300
就来个页面

03:50.300 --> 03:52.540
比方这里一个按钮

03:52.740 --> 03:55.540
然后我们要为这个按钮

03:55.540 --> 03:56.340
注册事件

03:56.340 --> 03:57.820
那咋注册呢

03:57.820 --> 03:59.220
首先要拿到这个动物

03:59.220 --> 04:00.420
你要监听谁

04:00.420 --> 04:01.940
你先把这个问题想清楚

04:01.940 --> 04:02.980
你要监听谁

04:02.980 --> 04:04.460
是不是监听这个按钮

04:04.460 --> 04:06.540
因此你必须要拿到这个按钮

04:06.540 --> 04:08.780
我们可以有很多方式来拿到

04:08.780 --> 04:09.780
Farrae Synecator

04:16.260 --> 04:17.580
好 说拿到这个按钮

04:17.580 --> 04:19.740
好 接下来注册事件

04:19.740 --> 04:21.020
注册事件什么意思

04:21.020 --> 04:21.980
打个动

04:22.860 --> 04:24.140
发生了什么事

04:24.140 --> 04:25.100
发生什么事呢

04:25.100 --> 04:26.940
是不是我要监听的是点击

04:26.940 --> 04:27.900
那我就是clit

04:28.740 --> 04:30.460
发生了这个件事的时候

04:30.460 --> 04:31.820
我要做什么呢

04:31.820 --> 04:33.180
就是处理函数

04:33.900 --> 04:35.300
那这个它的报社点击的时候

04:35.300 --> 04:37.100
就会自动的运行这个函数

04:37.100 --> 04:38.060
然后点击

04:39.780 --> 04:41.380
好 我们来运行一下

04:41.380 --> 04:43.420
但是函数里面是不是只能输出

04:43.420 --> 04:44.140
那不是的

04:44.140 --> 04:46.020
函数里面是不是可以写任何

04:46.020 --> 04:47.420
任何语矩都可以

04:47.980 --> 04:48.540
对吧

04:48.540 --> 04:49.500
我们来看一下

04:50.460 --> 04:51.420
控制台打开

04:55.460 --> 04:56.780
好 那我们现在

04:57.300 --> 05:00.220
首先看一开始有没有运行这个函数

05:00.700 --> 05:02.500
没有啊 为什么一开始没有运行

05:03.540 --> 05:04.780
因为它没有点击啊

05:04.780 --> 05:05.700
你现在谁在点击它

05:05.700 --> 05:06.500
没有人点击它

05:06.500 --> 05:06.980
对吧

05:06.980 --> 05:09.220
这个函数是告诉它什么叫事件注册

05:09.220 --> 05:11.660
不是说我马上运行事件处理函数

05:12.220 --> 05:12.980
指的是

05:13.500 --> 05:15.380
当什么什么的时候

05:15.380 --> 05:16.820
我要去做什么事情

05:17.060 --> 05:18.660
把这个理解清楚

05:18.660 --> 05:19.460
你说现在运行吗

05:19.460 --> 05:20.340
现在不运行

05:21.340 --> 05:23.380
那么这里我点击的时候

05:23.380 --> 05:24.500
你看没点击一次

05:24.500 --> 05:25.580
没点击一次

05:25.580 --> 05:26.780
是不是下面就运行了

05:27.140 --> 05:27.860
就这么简单

05:27.860 --> 05:28.540
这就是事件

05:28.540 --> 05:29.820
当然这里边写啥

05:29.820 --> 05:30.900
它就运行啥

05:31.460 --> 05:32.540
你要做什么事情

05:32.540 --> 05:33.420
你随便做

05:33.940 --> 05:34.980
那就完了

05:35.820 --> 05:37.740
那这里写法有很多

05:37.740 --> 05:39.460
那这里我可以写这么一个函数

05:39.460 --> 05:41.460
那我能不能我先定义一个函数

05:41.460 --> 05:42.180
比方说

05:42.180 --> 05:43.340
可以一个handle

05:43.340 --> 05:44.660
随便写个函数

05:44.660 --> 05:46.460
然后我把这个函数

05:46.780 --> 05:47.940
放过来可不可以

05:47.940 --> 05:48.940
那为什么不可以

05:48.940 --> 05:50.140
我刚才写的是函数表

05:50.580 --> 05:52.980
那我把函数的变量名字放过来可不可以

05:54.980 --> 05:55.860
也可以

05:56.580 --> 05:57.180
怎么不可以

05:57.780 --> 06:00.420
这是跟我们没有什么特别的

06:00.540 --> 06:01.780
不要老是觉得

06:01.780 --> 06:03.140
见面上是不是好特殊

06:03.140 --> 06:04.100
没有什么特殊的

06:04.100 --> 06:06.140
不就是一个对象一个属性给它复制吗

06:06.260 --> 06:06.940
你怎么复制

06:06.940 --> 06:08.220
给它反正是一个函数

06:08.460 --> 06:09.380
一个函数哪来的

06:09.380 --> 06:10.060
无所谓

06:10.580 --> 06:12.380
你跟他写个表达是在这也行

06:12.380 --> 06:14.980
你单独定义一个把变量名字放过来也行

06:15.220 --> 06:16.060
咋都行

06:18.340 --> 06:19.860
那么现在还有一个细节

06:19.860 --> 06:20.820
大家注意一下

06:20.820 --> 06:22.660
就是容易造成的一个误解

06:22.660 --> 06:26.300
就是表下面输出一个end

06:26.740 --> 06:30.500
那么这句话是不是要等到被点击之后才会运行

06:31.100 --> 06:31.940
不是的

06:32.340 --> 06:32.900
不是的

06:32.900 --> 06:34.660
这句话没有什么特别的

06:34.660 --> 06:36.620
它只是给一个属性复制

06:36.780 --> 06:38.860
复完指它马上就往后运行了

06:38.860 --> 06:39.340
对吧

06:40.100 --> 06:41.020
没有什么特别的

06:41.020 --> 06:42.700
就跟一个对象一样

06:42.700 --> 06:44.300
一个对象OBG

06:44.300 --> 06:45.660
然后里边一个属性

06:45.660 --> 06:46.420
unclick

06:46.420 --> 06:47.860
然后给它复制

06:48.020 --> 06:50.100
复完指它是不是要运行后边的语句

06:50.420 --> 06:51.300
这一样的

06:51.620 --> 06:52.420
这里也是

06:52.420 --> 06:54.340
你给它复制一个属性

06:54.340 --> 06:55.540
复制为一个函数

06:55.540 --> 06:57.140
然后继续往后运行用完事了

06:57.620 --> 06:59.620
只有当被点击的时候

06:59.620 --> 07:01.460
它才会去自动运行这个函数

07:02.220 --> 07:03.860
所以一开始就会看到这个end

07:04.740 --> 07:05.860
所以GS就在

07:05.860 --> 07:06.740
我们之前说过

07:06.740 --> 07:08.100
GS是异步的

07:08.100 --> 07:10.100
它不会等待

07:10.420 --> 07:12.300
它不会卡在那等待

07:13.020 --> 07:13.900
没什么别的

07:13.900 --> 07:16.380
它后边还有事情就接到往后桌就完成了

07:17.380 --> 07:19.420
OK 这是那个关于这个事件

07:19.420 --> 07:20.380
哪些事件最简单

07:20.380 --> 07:21.540
最核心的就是这个东西

07:22.020 --> 07:23.820
那么后边无非就是说

07:23.820 --> 07:25.380
有哪些事件内行

07:25.380 --> 07:26.460
那除了点击之外

07:26.460 --> 07:26.660
对吧

07:26.660 --> 07:28.060
用户还有很多操作

07:28.060 --> 07:28.780
对不对

07:28.940 --> 07:29.980
还包括鼠标移动

07:29.980 --> 07:30.980
没有点击

07:30.980 --> 07:33.060
鼠标只按下了没有抬起

07:33.300 --> 07:33.540
对吧

07:33.540 --> 07:34.860
还有键盘的事件

07:34.860 --> 07:36.060
按下进某一个键

07:36.060 --> 07:37.620
还有很多很多的事件

07:37.620 --> 07:39.420
无非就是这里的写法

07:39.420 --> 07:41.020
就与这个单词不同而已

07:41.660 --> 07:42.780
好 我们来看一下吧

07:42.940 --> 07:43.860
事件内行

07:43.860 --> 07:45.020
有哪些事件呢

07:45.020 --> 07:45.900
哪有好多

07:46.020 --> 07:50.340
我们这里有些东西就难得去给大家举例子了

07:50.340 --> 07:52.580
你只需要知道就是一个单词不同而已

07:52.980 --> 07:54.580
所以说这些东西也不用背

07:54.820 --> 07:57.260
你需要监听什么在这个表格里面来查

07:57.540 --> 08:00.020
完整的事件内行有特别特别多

08:00.020 --> 08:01.380
可以点进去看

08:02.140 --> 08:03.420
这是官方文档里面

08:03.420 --> 08:05.740
常见的事件内别特别特别多

08:05.740 --> 08:07.500
但是绝大部分我们都用不到

08:07.500 --> 08:08.780
你看后面好多事件

08:08.780 --> 08:11.260
还包括移动端的一些触摸事件

08:11.900 --> 08:13.540
我们现在用不到

08:13.540 --> 08:14.180
移动端的东西

08:14.180 --> 08:15.180
我们以后再说

08:16.180 --> 08:16.980
那我们来看一下

08:16.980 --> 08:19.820
目前我们可能或多或少

08:19.820 --> 08:21.260
会接触哪些事件呢

08:21.260 --> 08:22.460
一个是submit

08:22.900 --> 08:24.220
这是表单内的事件

08:24.220 --> 08:26.900
就是表单内里面会出发一些事件

08:26.900 --> 08:28.060
那么我们来看一下吧

08:28.060 --> 08:29.220
第二个例子

08:30.140 --> 08:32.220
比方说我们这里有一个表单

08:32.900 --> 08:33.700
foam

08:35.100 --> 08:35.980
有这么一个表单

08:35.980 --> 08:37.420
表单里面有个按钮

08:38.620 --> 08:40.180
然后有一个文文框

08:41.540 --> 08:42.700
那想想它就这样

08:43.420 --> 08:46.260
那么这个submit事件是什么呢

08:46.260 --> 08:48.780
是表单被提交的时候触发

08:48.780 --> 08:51.580
它一般会注册到给表单注册

08:51.580 --> 08:52.780
不是给按钮注册

08:52.780 --> 08:55.460
是给表单监控这个表单提交

08:55.940 --> 08:58.540
提交的时候它会触发这个事件

08:58.540 --> 09:00.060
那么比方说我们这些f

09:00.060 --> 09:01.380
documents

09:02.180 --> 09:02.780
query

09:02.780 --> 09:03.740
snegetphone

09:04.540 --> 09:05.820
好我给它注册什么事件呢

09:05.820 --> 09:06.940
unsubmit

09:07.500 --> 09:08.020
对吧

09:08.420 --> 09:10.820
你看只是把这个单词给它换了一下

09:10.820 --> 09:11.820
un什么什么的单词

09:11.860 --> 09:13.540
把换成事件内形就完事了

09:14.020 --> 09:17.300
然后我们这里输出表单被提交了

09:19.060 --> 09:21.140
好我们来看一下右键运行

09:24.620 --> 09:25.660
注意看控制台

09:26.140 --> 09:28.660
我们这里的随便写一点点点击

09:29.860 --> 09:31.860
我不知道这个录屏能不能把它录上

09:33.020 --> 09:34.260
如果说多试几次

09:34.780 --> 09:36.500
应该下面是不是一闪而过

09:36.980 --> 09:38.820
一闪而过这句话是不是输出过了

09:38.820 --> 09:39.300
输出过了

09:39.300 --> 09:40.980
那么说明这个函数运行了

09:40.980 --> 09:42.700
那为什么突然又消失了呢

09:42.700 --> 09:43.940
因为我们表单提交

09:43.980 --> 09:45.340
是不是会导致刷新页面

09:45.340 --> 09:47.020
页面刷新到一些都在重来了

09:48.100 --> 09:49.540
那这个东西有什么意义呢

09:49.900 --> 09:51.020
现在没啥意义

09:51.020 --> 09:53.060
后面学了一些知识之后就有意义了

09:53.460 --> 09:54.620
现在你了解就想到

09:54.620 --> 09:55.620
这是表单提交

09:55.780 --> 09:57.860
那么除了点按钮进行表单提交

09:57.860 --> 09:58.780
其实我们按回车

09:58.780 --> 10:00.060
是不是也可以表单提交

10:00.220 --> 10:00.620
对吧

10:00.620 --> 10:01.940
一提交的时候你看

10:02.140 --> 10:04.420
只要是提交不管你利用哪种方式

10:04.420 --> 10:05.620
提交的都无所谓

10:05.620 --> 10:06.380
只要提交了

10:06.380 --> 10:07.380
它就会出发这个事情

10:07.780 --> 10:08.380
什么意思

10:09.460 --> 10:10.740
还有什么事件呢

10:11.300 --> 10:12.980
还有这个input时间

10:13.180 --> 10:14.780
input是文本框

10:15.300 --> 10:17.700
文本框的别的文本被改变的事件

10:17.900 --> 10:19.100
那比方说我们这里

10:19.940 --> 10:20.980
找到这个文本框

10:20.980 --> 10:24.920
txt input

10:26.240 --> 10:29.000
我要监控它文本被改变的事件

10:29.400 --> 10:30.680
on input

10:32.080 --> 10:33.080
我们来看一下这个时间

10:33.280 --> 10:34.720
这个时间是什么时候发生的

10:35.040 --> 10:37.760
我们这里输出文本改变了

10:39.720 --> 10:40.520
我们在这里写

10:41.360 --> 10:43.520
是不是每一次文本改变

10:43.520 --> 10:44.800
它都会触发这个时间

10:45.840 --> 10:46.440
就这么个意思

10:46.440 --> 10:47.040
文本改变

10:47.040 --> 10:48.160
它就会触发这个时间

10:50.560 --> 10:52.920
那如果说我这里

10:52.920 --> 10:54.240
比方说我这里要想要输出

10:54.240 --> 10:55.760
它目前的文本怎么办呢

10:55.760 --> 10:57.800
是不是输出这个txt的Value

10:58.160 --> 10:58.400
对吧

10:58.400 --> 10:59.360
我们上级课学的

10:59.360 --> 11:00.120
它里面属性吗

11:00.120 --> 11:01.880
Value就可以拿到它的值

11:02.800 --> 11:05.040
它就可以得到每一次输入的值

11:06.080 --> 11:07.160
on input的时间

11:07.800 --> 11:09.160
那么除了这个on input

11:09.160 --> 11:11.200
其实还有一个叫做签计

11:12.000 --> 11:12.600
签计

11:12.760 --> 11:15.160
签计了也可以应用到文木框里面

11:15.400 --> 11:17.120
那么on签计我们来看一下

11:19.560 --> 11:21.720
现在我们用这个时间来试一下

11:21.720 --> 11:23.280
签计是什么改变的意思

11:23.280 --> 11:24.840
那么它跟input有什么区别呢

11:24.840 --> 11:25.640
我们再输入

11:25.640 --> 11:26.920
你看这个时间有没有触发

11:26.920 --> 11:27.680
并没有触发

11:27.680 --> 11:27.920
对吧

11:27.920 --> 11:29.320
触发的话还会有输出

11:29.760 --> 11:30.480
没有触发

11:30.480 --> 11:31.760
那什么时候触发呢

11:32.080 --> 11:33.760
当我失去交点的时候

11:33.760 --> 11:34.600
它才会触发

11:35.880 --> 11:38.520
这就是它跟那个input的区别

11:39.400 --> 11:41.480
input是每一次改变都会触发

11:41.800 --> 11:44.200
而签计要稍微晚一点

11:44.200 --> 11:45.800
就是你改变完了之后

11:45.800 --> 11:47.040
你写完了

11:47.240 --> 11:48.080
写完了之后

11:48.080 --> 11:49.400
你离开了这个文本框

11:49.400 --> 11:50.600
它才会触发这个时间

11:51.080 --> 11:52.840
当然你如果说你文本没有改变的话

11:52.840 --> 11:53.720
它就不会触发

11:54.280 --> 11:56.800
比方说再写一个改变了触发

11:56.800 --> 11:57.200
对吧

11:57.200 --> 11:58.640
你没有改变它就不触发

11:59.120 --> 12:00.080
那就是签计

12:00.400 --> 12:02.040
那么签计时间呢

12:02.040 --> 12:04.720
它还可以应用到下达列表

12:08.860 --> 12:11.500
比方说文木框保留吧

12:11.620 --> 12:12.220
下达列表

12:12.220 --> 12:13.580
我们这里写上一个

12:13.620 --> 12:14.300
不行

12:14.820 --> 12:16.300
一就随便写一些吧

12:16.300 --> 12:16.940
乘计时

12:20.290 --> 12:20.530
好

12:20.530 --> 12:21.010
那么比方

12:21.010 --> 12:22.770
我们现在去找一个下达列表

12:26.590 --> 12:28.030
sell documents

12:30.070 --> 12:32.750
其实我这里和最核心的东西都影响完了

12:33.350 --> 12:35.590
后边只是小的细节

12:36.030 --> 12:37.110
各种时间内想

12:37.110 --> 12:38.350
大家了解一下就行了

12:39.470 --> 12:40.070
select

12:41.550 --> 12:43.590
sell unchanged

12:44.270 --> 12:46.030
当下达列表改变的时候

12:46.030 --> 12:47.190
我也可以输出

12:47.190 --> 12:47.470
对吧

12:47.510 --> 12:49.070
我可以输出这个下达列表的

12:50.790 --> 12:51.550
就输出一二三

12:51.550 --> 12:52.910
我随便输出一个吧

12:53.910 --> 12:54.350
好

12:54.350 --> 12:54.830
你看

12:55.950 --> 12:56.750
下达列表这里

12:56.750 --> 12:58.030
它不需要失去焦点

12:58.390 --> 12:59.230
一只要一改变

12:59.230 --> 13:00.110
它就会触发

13:00.430 --> 13:00.670
对吧

13:00.670 --> 13:02.590
所以说我们经常使用 unchanged

13:02.590 --> 13:05.230
来监听下达列表的适逢变化

13:06.510 --> 13:06.950
看到没

13:07.390 --> 13:07.910
就完了

13:09.390 --> 13:10.750
这是表达内的

13:11.310 --> 13:12.830
然后还有包括什么 focus

13:13.470 --> 13:15.510
元素聚焦的时候触发

13:15.550 --> 13:16.230
blur

13:16.230 --> 13:18.350
失去焦点的时候触发

13:18.510 --> 13:18.750
对吧

13:18.750 --> 13:19.510
什么叫聚焦

13:19.510 --> 13:20.550
这就是聚焦

13:20.910 --> 13:21.990
这就是聚焦

13:22.190 --> 13:22.750
对吧

13:23.150 --> 13:24.150
什么叫失去焦点

13:24.150 --> 13:25.230
这叫失去焦点

13:27.030 --> 13:28.270
这个东西一看

13:28.270 --> 13:30.590
这个描述是不是就知道怎么用了

13:30.950 --> 13:31.270
对吧

13:31.270 --> 13:34.030
那具体什么时候我要用这哪个时间呢

13:34.030 --> 13:35.150
那就看具体的情况

13:35.150 --> 13:36.190
看具体的需求

13:36.350 --> 13:38.230
这个晚上也没法用规律来终结

13:39.310 --> 13:41.350
resets表达被重置的时候触发

13:41.350 --> 13:42.510
就是各种时间内想

13:42.510 --> 13:44.630
它的触发点不一样

13:45.190 --> 13:45.390
好

13:45.390 --> 13:46.710
鼠标内的时间click

13:46.710 --> 13:47.630
我们刚才演示过了

13:47.630 --> 13:48.030
对吧

13:48.030 --> 13:49.190
就是鼠标按下台戏

13:49.190 --> 13:50.670
就点了一下就触发

13:50.910 --> 13:54.390
context menu是右键菜单弹出的时候触发

13:54.550 --> 13:55.590
那是右键菜单

13:55.590 --> 13:56.510
比方说

13:57.470 --> 14:00.190
其实我们在这里顺便给大家说一下

14:00.550 --> 14:02.110
尽管我们绝大部分时候

14:02.110 --> 14:04.310
都是往那个多蜢上注册时间

14:04.590 --> 14:07.670
但实际上我们也可以给window注册一些时间

14:07.670 --> 14:08.910
比方说window里边

14:09.750 --> 14:11.550
可以给他注册onclick时间

14:11.550 --> 14:12.110
也可以

14:12.110 --> 14:14.150
他点整个窗口的时候都会触发

14:14.830 --> 14:15.350
window

14:15.350 --> 14:16.950
就点这个页面中的任何位置

14:16.950 --> 14:18.070
他都会触发这个时间

14:20.110 --> 14:21.110
我这边运行出来

14:28.200 --> 14:29.040
好看一样

14:30.480 --> 14:31.640
是不是点任何地方

14:31.800 --> 14:32.880
当然你点上面不行

14:32.880 --> 14:34.240
你监控不到上面了

14:34.240 --> 14:35.760
就点这个窗口里边

14:35.920 --> 14:37.760
页面窗口里边任何地方都可以

14:38.560 --> 14:40.080
这顺便给大家说一下

14:40.280 --> 14:42.040
当然你可以注册到某一个洞

14:42.040 --> 14:44.160
那只能点到洞的时候才会触发

14:45.360 --> 14:46.280
就这么个意思

14:46.520 --> 14:50.160
context menu是表示右键菜单

14:50.280 --> 14:51.680
显示前触发

14:51.680 --> 14:52.600
那么就什么

14:52.600 --> 14:54.600
oncontext menu

14:55.240 --> 14:58.240
只要你点到这个东西

14:58.240 --> 15:00.160
右键菜单

15:01.960 --> 15:03.280
当我们点进右键菜单的时候

15:03.280 --> 15:04.560
你看是不是又触发这个时间

15:04.560 --> 15:07.360
这种时间有的时候有一些用

15:07.680 --> 15:09.240
后边我们会给大家举一些例子

15:11.040 --> 15:12.120
还有什么mouse down

15:12.120 --> 15:14.600
当鼠标按下的时候触发mouse up

15:14.840 --> 15:17.960
当鼠标抬起的时候触发mouse move

15:18.080 --> 15:20.360
鼠标在元素上移动的时候触发

15:20.360 --> 15:21.760
那么这个时间我们来看一下

15:22.560 --> 15:24.160
我给温斗注册

15:24.160 --> 15:25.040
当然不一定是温斗

15:25.040 --> 15:26.560
这是非常灵活的

15:26.560 --> 15:27.520
你前面可以放动

15:28.000 --> 15:29.120
比方说有一个div

15:29.120 --> 15:30.280
它的div只有这么大

15:30.280 --> 15:32.000
你看这个div注册这个事件

15:32.440 --> 15:34.000
注册这个鼠标移动事件

15:34.480 --> 15:36.840
那只有在这个div里边移动的时候

15:36.840 --> 15:38.000
它才会触发这个事件

15:38.960 --> 15:39.800
就这么个意思

15:40.000 --> 15:40.840
那一个温斗的话

15:40.840 --> 15:42.040
就整个窗口里边移动的时候

15:42.040 --> 15:44.240
它都会触发mouse move

15:46.710 --> 15:47.270
你看

15:47.710 --> 15:49.230
你看这个事件是不是不停的触发

15:49.470 --> 15:50.270
只要你在移动

15:50.270 --> 15:51.670
它就不停的不停的在触发

15:52.590 --> 15:53.750
这就是鼠标移动

15:54.230 --> 15:55.070
了解就行了

15:55.070 --> 15:56.870
我不一一去去举例的

15:57.110 --> 15:58.870
mouse enter和mouse leave

15:59.270 --> 16:01.950
这表示鼠标进入元素的时候触发

16:01.950 --> 16:04.110
鼠标离开元素的时候触发

16:04.110 --> 16:05.590
那比方说是什么意思呢

16:05.790 --> 16:07.750
那就来一个啥呢

16:07.750 --> 16:09.030
就来一个button吧

16:09.030 --> 16:10.230
我就随便来一个

16:13.460 --> 16:15.020
找到这个button

16:15.620 --> 16:16.340
document

16:18.140 --> 16:19.620
query selector

16:20.620 --> 16:21.700
给它注册

16:21.700 --> 16:23.340
on mouse

16:24.260 --> 16:24.820
对不

16:25.060 --> 16:25.660
放什么

16:26.300 --> 16:26.780
对

16:26.780 --> 16:28.220
mouse enter

16:28.220 --> 16:29.100
inter什么意思

16:29.100 --> 16:29.740
进入

16:31.140 --> 16:32.500
我们输出inter

16:32.860 --> 16:34.100
然后还有一个

16:34.100 --> 16:37.780
on mouse leave

16:38.180 --> 16:39.300
鼠标移开

16:39.860 --> 16:41.180
输出leave

16:42.180 --> 16:43.420
我们把它放大一点

16:44.740 --> 16:45.940
你看这个按钮

16:45.940 --> 16:47.740
我现在的鼠标乱动

16:47.740 --> 16:49.220
有没有触发事件没有

16:49.380 --> 16:52.020
只有当你移动到这个按钮的上上的时候

16:52.020 --> 16:52.980
你看是不enter了

16:52.980 --> 16:55.700
下面在里面移动无所谓

16:56.220 --> 16:57.420
然后离开了

16:57.420 --> 16:58.300
是不是离谱了

16:58.700 --> 16:59.700
鼠标移入

16:59.700 --> 17:00.260
离开

17:00.260 --> 17:00.660
移入

17:00.660 --> 17:01.180
离开

17:02.220 --> 17:03.100
这就是这些事件

17:03.100 --> 17:04.700
当然事件里面做啥随便你

17:05.900 --> 17:06.900
包括什么

17:06.900 --> 17:08.820
这里有个什么不冒泡

17:08.820 --> 17:10.620
下面也有一个进入元素

17:10.620 --> 17:11.340
离开元素

17:11.340 --> 17:13.380
但是它是冒泡的

17:14.620 --> 17:15.620
一个上面是不冒泡

17:15.620 --> 17:16.180
下面是冒泡

17:16.180 --> 17:17.500
那这个玩意是啥意思呢

17:17.500 --> 17:18.420
我们后边解释

17:18.900 --> 17:20.460
之后进階部分再解释

17:20.460 --> 17:22.420
现在那就当成差不多的一样的

17:22.980 --> 17:23.940
但是我们用的时候

17:23.940 --> 17:25.740
一般都是用enter和leave

17:25.740 --> 17:27.860
一般不太会用over or out

17:28.740 --> 17:29.100
好

17:29.100 --> 17:31.940
will 鼠标滚轮滚动的时候触发

17:31.940 --> 17:33.180
那比方要说吧

17:34.260 --> 17:35.020
window

17:35.380 --> 17:37.500
给它注册一个on will

17:39.060 --> 17:40.820
当鼠标滚轮滚动的时候

17:40.820 --> 17:44.300
我们触发滚轮滚动了

17:45.180 --> 17:47.180
在这边我们滚动鼠标滚轮

17:47.180 --> 17:47.700
你看看

17:47.740 --> 17:49.060
我现在在滚动鼠标滚轮

17:49.060 --> 17:50.140
你们可能看不见

17:50.140 --> 17:51.660
你们肯定是看不见

17:51.660 --> 17:53.300
我向下滚动向上滚动

17:53.300 --> 17:54.340
向下滚动向上滚动

17:54.340 --> 17:55.660
它是不是不停的在触发

17:56.660 --> 17:57.780
这就是鼠标滚轮

17:59.580 --> 18:00.820
然后键盘事件

18:00.820 --> 18:03.100
键盘事件我们一般就关注两个

18:03.100 --> 18:04.140
一个keydown

18:04.620 --> 18:06.660
当某个键被按一下的时候触发

18:06.660 --> 18:07.380
keyup

18:07.380 --> 18:09.700
某个键被抬起的时候触发

18:10.500 --> 18:11.660
那比方说

18:11.660 --> 18:13.740
我就给window注册吧

18:14.740 --> 18:15.980
window注册

18:16.540 --> 18:17.700
onkeydown

18:19.500 --> 18:21.540
当键盘按一下的时候触发

18:22.140 --> 18:26.140
那么我就输出一个键盘按下了

18:26.500 --> 18:27.740
你按下任何一个键

18:27.740 --> 18:28.460
它都会触发

18:28.460 --> 18:29.940
我现在搞清楚了

18:29.940 --> 18:31.860
它为什么有个晃晃晃给我框住了

18:31.860 --> 18:33.220
凡是那种中文符号

18:33.220 --> 18:34.700
它都会给我提醒我

18:35.300 --> 18:36.300
因为我们程序里面

18:36.300 --> 18:37.380
好多都是英文符号

18:38.300 --> 18:39.420
中文符号就会提醒我

18:39.420 --> 18:40.100
管它的

18:40.940 --> 18:41.940
我也不知道是什么差践

18:41.940 --> 18:43.180
还是VSCO的升级之后

18:43.180 --> 18:43.860
它就自带的

18:44.540 --> 18:44.700
好

18:44.700 --> 18:45.980
那么现在我们看一下

18:45.980 --> 18:47.260
我按下键盘的

18:47.260 --> 18:48.940
你们看不见我按键盘是吧

18:48.940 --> 18:50.420
那我把虚拟键盘打开

18:53.740 --> 18:56.100
这样子我按某一个键盘就看得到了

18:56.100 --> 18:57.380
我按A键

19:00.420 --> 19:01.620
你们都是看到到了

19:01.620 --> 19:03.180
这个被它遮住了

19:05.470 --> 19:05.950
说法

19:09.600 --> 19:10.720
你看我在这里按键

19:10.720 --> 19:11.200
是吧

19:11.200 --> 19:12.680
这里就在模拟键盘

19:13.000 --> 19:13.920
是不是就触发了

19:13.920 --> 19:15.720
但是我真实键盘里面的键

19:15.720 --> 19:16.720
是不是也会触发

19:17.600 --> 19:19.040
只要按键它就会触发

19:19.640 --> 19:20.840
就这么个意思

19:20.840 --> 19:22.720
那么这是按下的时候触发

19:22.760 --> 19:26.000
还有一个就是键盘抬起的时候触发

19:26.000 --> 19:28.080
就 on key up

19:29.720 --> 19:31.240
当键盘抬起的时候触发

19:31.240 --> 19:32.080
那么这个时候

19:32.880 --> 19:34.280
我按下它没有触发

19:34.280 --> 19:35.960
但是我抬起了过后它就触发了

19:35.960 --> 19:37.320
按下没有触发

19:37.320 --> 19:38.200
抬起触发

19:38.640 --> 19:39.640
就这么个意思

19:39.640 --> 19:40.840
它触发的时机

19:40.840 --> 19:41.840
就是事件内形了

19:41.840 --> 19:43.520
它就决定了触发的时机

19:43.520 --> 19:44.680
什么时候触发

19:45.400 --> 19:46.200
就这么个意思

19:47.680 --> 19:49.520
键盘事件这一块是这样

19:50.080 --> 19:51.320
它还有一个事件

19:51.320 --> 19:52.640
叫做teapraise

19:53.640 --> 19:55.960
这个事件我就不介绍了

19:55.960 --> 19:57.560
以前课堂上我会介绍

19:57.560 --> 19:58.640
但是现在我不介绍了

19:58.640 --> 20:00.400
因为看了官方文档

20:00.400 --> 20:02.280
他说这个事件已经被弃用了

20:02.640 --> 20:04.000
建议大家不要使用了

20:04.200 --> 20:05.440
可能在不久的将来

20:05.440 --> 20:06.800
就会删除掉这个事件

20:07.320 --> 20:09.040
就会变成不是标准的一部分了

20:09.320 --> 20:10.800
因此这个事件就不要用了

20:10.800 --> 20:12.320
用键盘事件就用这两个

20:12.320 --> 20:13.720
key down和key up

20:14.920 --> 20:16.040
好 这就是事件内形

20:17.120 --> 20:18.440
事件内形搞清楚了吧

20:18.800 --> 20:19.240
没问题

20:19.240 --> 20:20.200
我们来看一下

20:20.200 --> 20:21.960
剩下的就是一些小的细节了

20:21.960 --> 20:23.080
这些细节非常简单

20:23.080 --> 20:24.240
你别看我写的这么多文档

20:24.240 --> 20:25.240
其实非常简单

20:25.240 --> 20:26.480
我这里快速给它过一下

20:26.480 --> 20:27.960
然后我们再来做练习题

20:28.520 --> 20:30.240
好 我们来看一下这个注册事件

20:30.520 --> 20:32.240
这注册事件是不是刚才都讲了

20:32.560 --> 20:33.800
只不过我先告诉你

20:34.160 --> 20:36.520
注册事件有还有几种方式

20:36.760 --> 20:39.160
第一种方式是使用这种方式

20:39.160 --> 20:40.560
就在元素里边

20:40.560 --> 20:42.080
直接给它写一个unclick

20:42.320 --> 20:43.880
之前我们是在GS代码里边写的

20:44.520 --> 20:46.240
unclick等于一个函数

20:46.520 --> 20:49.200
我们也可以在元素里边给它写一个

20:49.400 --> 20:51.880
这种东西看一看得了

20:51.880 --> 20:53.480
现在基本被弃用了

20:53.480 --> 20:55.160
这是好早好早以前

20:55.160 --> 20:57.040
可能有些同学在那边还没有出生

20:57.560 --> 20:58.920
好早好早以前的方式

20:58.920 --> 21:00.440
这种方式基本被弃用了

21:01.040 --> 21:01.640
啥意思呢

21:01.640 --> 21:04.840
就是比方说我们这里的按钮点击

21:04.840 --> 21:07.000
我可以这样子写unclick

21:07.680 --> 21:09.960
然后这里写GS代码

21:10.200 --> 21:11.480
这里写GS代码

21:11.840 --> 21:12.520
知道吧

21:12.840 --> 21:14.000
比方说那我这里

21:14.000 --> 21:15.160
是不是可以调用函数

21:15.760 --> 21:17.320
我这里可以调用函数的

21:18.320 --> 21:20.720
比方说我这里

21:20.720 --> 21:23.320
调用一个函数名字叫做handleclick

21:26.590 --> 21:27.670
是不是调用函数

21:27.670 --> 21:29.550
当点击的时候调用这个函数

21:29.550 --> 21:32.070
然后把GS里边给它提供一个函数

21:32.070 --> 21:33.510
handleclick就可以了

21:37.980 --> 21:38.740
好看一下吧

21:39.580 --> 21:40.300
点击

21:41.300 --> 21:42.660
这个点击就提交了

21:42.660 --> 21:43.660
就刷新页面

21:43.660 --> 21:45.260
我把它变成一个普通按钮

21:47.540 --> 21:49.020
因为有蜂蜜元素的存在

21:50.020 --> 21:50.620
是吧

21:50.620 --> 21:52.620
还是可以运行这个click

21:53.020 --> 21:53.820
就这么个意思

21:54.820 --> 21:56.220
这第一种方式了解就行了

21:56.220 --> 21:57.220
还有这么一种方式

21:57.220 --> 21:58.020
第二种方式

21:58.820 --> 22:00.420
就是我们刚才的方式的

22:00.420 --> 22:02.820
通过dome加上一个on

22:02.820 --> 22:05.020
后边跟上世界内形的名字

22:05.020 --> 22:06.020
世界内形的名字在哪

22:06.020 --> 22:07.420
在这可以查阅

22:07.420 --> 22:07.660
对吧

22:07.660 --> 22:09.020
你要注册什么事件

22:09.020 --> 22:10.020
把名字写这

22:10.220 --> 22:12.220
然后给它复制为一个函数

22:12.220 --> 22:13.620
当事件发生的时候

22:13.620 --> 22:16.620
它就会运行这个事件处理函数

22:17.420 --> 22:18.420
这种方式呢

22:18.420 --> 22:20.220
它还可以移除事件

22:20.620 --> 22:22.220
就有一天我不想监听了

22:22.420 --> 22:24.620
那我就把它onclick设为now

22:24.620 --> 22:25.420
就完事了

22:25.420 --> 22:26.220
比方说在这

22:26.620 --> 22:29.220
我来一个btn onclick

22:29.420 --> 22:30.620
把它设置为now

22:31.620 --> 22:32.620
那一看再点

22:32.620 --> 22:34.020
说就没有那个click了

22:34.220 --> 22:34.620
然后呢

22:34.620 --> 22:38.220
我再来btn onmouse enter

22:38.220 --> 22:39.220
把它设为now

22:40.220 --> 22:41.420
这样子鼠标移入的时候

22:41.420 --> 22:42.220
是不是没有时间了

22:42.220 --> 22:43.420
只有鼠标离开还有

22:43.420 --> 22:45.820
然后我就把那个onmouse leave

22:47.420 --> 22:49.420
它是可以移除这个事件监听的

22:49.420 --> 22:50.020
设为now

22:50.020 --> 22:52.020
就是相当于是给属性重新复制

22:52.220 --> 22:52.620
对吧

22:52.620 --> 22:53.620
你都可以想象到

22:53.620 --> 22:55.020
浏览器是怎么处理的

22:55.020 --> 22:56.620
它发现你鼠标移入了

22:56.620 --> 22:57.420
它就给你掉

22:57.420 --> 22:58.820
因为这个玩意就是函数嘛

22:58.820 --> 22:59.220
做

22:59.820 --> 23:00.820
这就是个函数

23:01.020 --> 23:03.020
刚才我们就给它复制为一个函数的

23:03.820 --> 23:05.420
那我们鼠标移入的时候

23:05.420 --> 23:07.420
浏览器就帮我们做了这么一件事

23:07.420 --> 23:13.020
onmouse enter

23:13.820 --> 23:15.020
然后给你雕用一次

23:15.020 --> 23:15.420
对吧

23:15.420 --> 23:17.220
鼠标移入的关系帮你雕用一次

23:17.220 --> 23:18.420
所以这个函数被雕用

23:18.420 --> 23:19.420
就这么简单

23:20.220 --> 23:21.820
这是第二种方式

23:21.820 --> 23:22.620
这种方式呢

23:22.620 --> 23:24.420
我们有的时候也会用

23:25.620 --> 23:26.720
它的优点在于

23:26.720 --> 23:28.020
它非常简单

23:28.020 --> 23:28.720
非常非常简单

23:28.720 --> 23:29.420
非常直观

23:29.420 --> 23:30.020
对吧

23:30.020 --> 23:31.420
然后我可以复制个函数

23:31.420 --> 23:32.820
就是注册事件了

23:32.820 --> 23:33.620
给它复制为now

23:33.620 --> 23:34.620
就表示移除

23:35.420 --> 23:36.920
一于监听覆盖

23:36.920 --> 23:37.820
什么叫覆盖呢

23:37.820 --> 23:39.920
就是给它重新复制为另外一个函数

23:39.920 --> 23:41.620
是不是把之前的函数就覆盖了

23:42.620 --> 23:44.220
一于覆盖移除

23:44.220 --> 23:45.920
缺点也很明显

23:45.920 --> 23:48.220
它只能注册一个处理函数

23:50.420 --> 23:51.420
什么意思呢

23:51.420 --> 23:52.220
比方说这里

23:53.420 --> 23:54.620
我给它再来一个

23:56.620 --> 23:59.420
btn onmouse enter

24:00.420 --> 24:01.820
再来一个鼠标移入事件

24:01.820 --> 24:02.720
再给它注册一个

24:04.020 --> 24:04.420
输出

24:05.420 --> 24:06.820
现在我们来个中文

24:06.820 --> 24:08.220
鼠标移入了

24:11.170 --> 24:12.870
到现在我们复制过后

24:12.970 --> 24:14.070
我们再看鼠标移入

24:15.270 --> 24:17.070
所以它之前那个时间就失销了

24:17.070 --> 24:17.470
对吧

24:17.470 --> 24:19.070
给它覆盖掉了

24:19.070 --> 24:19.770
就这么个意思

24:21.770 --> 24:23.670
只能注册一个处理函数

24:23.670 --> 24:24.370
这是它的缺点

24:24.370 --> 24:26.470
有的时候我们可能会注册多个

24:26.470 --> 24:28.870
但为什么会注册多个呀

24:28.870 --> 24:29.670
你这样想想吧

24:29.670 --> 24:32.270
这几个比较有意思的例子

24:32.270 --> 24:33.070
就是一个页面

24:33.070 --> 24:35.370
它可能GSE文件有很多个

24:35.370 --> 24:38.370
你跟你的同事都要编写GSE文件

24:38.370 --> 24:39.770
在你的GSE文件里边

24:39.770 --> 24:41.770
你想给这个安柳注册一些点击时间

24:42.870 --> 24:44.470
那你的同事邓哥

24:44.470 --> 24:46.470
他也想给这个安柳注册一些点击时间

24:46.470 --> 24:46.670
对吧

24:46.670 --> 24:49.670
他还不知道你已经注册的点击时间了

24:49.670 --> 24:51.370
他如果说用这种方式注册的话

24:51.370 --> 24:52.970
就会把你的事件给你覆盖掉

24:54.470 --> 24:58.070
因此我们希望最完美的解决办法就是

24:58.070 --> 24:59.670
你注册你的我注册我的

24:59.670 --> 24:59.970
对吧

24:59.970 --> 25:00.770
管他有多少个时间

25:00.770 --> 25:01.970
他一是运行就完事了

25:03.370 --> 25:04.270
缺点就是这个

25:04.270 --> 25:05.470
主要是这个缺点

25:05.470 --> 25:06.370
还有另外一个缺点

25:06.370 --> 25:07.670
就是有一些

25:07.670 --> 25:10.870
特别像一些新版本标准里边的一些事件

25:10.870 --> 25:12.570
那么他可能不支持

25:12.670 --> 25:14.470
以后我们特别是与动端的一块

25:14.470 --> 25:15.870
我们会发现有这么一些事件

25:16.770 --> 25:18.770
所以说我们最完美的事件注册方式

25:18.770 --> 25:19.970
是第三种方式

25:20.770 --> 25:21.470
多么里边

25:21.470 --> 25:22.970
专门给你写了一个函数

25:22.970 --> 25:23.970
名字叫做ADD

25:23.970 --> 25:24.470
什么意思

25:24.470 --> 25:25.670
添加Event

25:25.670 --> 25:26.270
什么意思

25:26.270 --> 25:27.670
事件Lationer

25:27.670 --> 25:28.470
什么意思

25:28.470 --> 25:29.770
监听函数

25:30.370 --> 25:31.170
监听器

25:31.570 --> 25:33.570
添加事件的监听器

25:34.170 --> 25:35.270
两个参数

25:35.270 --> 25:36.970
第一个参数写事件名字

25:36.970 --> 25:37.770
事件类型

25:38.070 --> 25:39.470
第二个参数写函数

25:39.470 --> 25:40.970
其实跟刚才那个unclick

25:40.970 --> 25:42.070
是不是一样的呀

25:42.370 --> 25:43.070
这个玩意

25:43.070 --> 25:44.570
这种代码的书写方式

25:45.170 --> 25:46.770
比方说上面这个

25:46.770 --> 25:47.870
我把它换成了

25:48.370 --> 25:50.070
换成下面这个书写方式

25:50.370 --> 25:52.370
ADD Event Listener

25:52.370 --> 25:53.570
事件的名字叫什么

25:53.570 --> 25:54.770
叫Mouse Enter

25:56.070 --> 25:56.570
对吧

25:56.570 --> 25:58.170
那么事件的处理函数

25:58.170 --> 25:58.970
就写着

26:00.170 --> 26:02.070
效果是完全一样的

26:02.370 --> 26:05.070
不过用这种方式的好处在哪呢

26:05.070 --> 26:06.170
比方说就点击吗

26:09.560 --> 26:10.560
click1

26:11.060 --> 26:12.960
好处在于我可以注册多个事件

26:12.960 --> 26:13.960
这是一个

26:14.060 --> 26:15.260
我再来一个

26:15.460 --> 26:15.960
对吧

26:16.660 --> 26:17.460
click2

26:18.260 --> 26:19.260
我再来一个

26:19.360 --> 26:20.260
click3

26:22.160 --> 26:22.560
对不对

26:22.560 --> 26:23.360
是不是我可以注册

26:23.360 --> 26:24.460
就你点击的时候

26:24.460 --> 26:25.760
你要运行这个函数

26:26.060 --> 26:26.660
我又说

26:26.660 --> 26:27.460
你点击的时候

26:27.460 --> 26:28.360
你要运行这个函数

26:28.360 --> 26:29.560
它不是覆盖关系

26:29.860 --> 26:30.960
都会运行

26:31.760 --> 26:32.560
那你现在

26:33.160 --> 26:33.760
多么

26:34.060 --> 26:35.260
这里换成一天

26:37.840 --> 26:38.540
那点击是吧

26:38.540 --> 26:38.940
两个都

26:38.940 --> 26:39.840
三个都运行了

26:39.840 --> 26:40.640
我这里

26:41.540 --> 26:42.940
我这里没刷新

26:43.940 --> 26:44.540
点击

26:48.440 --> 26:49.240
我知道了

26:49.640 --> 26:50.240
这个玩意

26:52.600 --> 26:53.600
刷新一次了

26:53.800 --> 26:54.800
现在点击

26:56.100 --> 26:57.300
怎么还有个click1

26:57.300 --> 26:58.200
明白了

26:58.500 --> 26:59.500
上面还有一个

26:59.500 --> 27:01.400
上面还有一个原式的方式注册

27:04.800 --> 27:05.500
好看

27:05.600 --> 27:07.100
是不是123都会运行

27:07.400 --> 27:07.800
对吧

27:07.800 --> 27:08.300
他就

27:08.800 --> 27:10.500
这样子是最完美的解决办法

27:10.900 --> 27:12.100
虽然他单码好像单

27:12.100 --> 27:14.000
就是提示也单码也没有多多少

27:14.000 --> 27:15.600
就是单词长了一点对吧

27:15.700 --> 27:17.100
而且有智能提示

27:17.700 --> 27:18.300
你看吧

27:18.400 --> 27:19.000
btn

27:20.200 --> 27:20.700
add

27:20.700 --> 27:21.400
1分成离身的

27:21.400 --> 27:22.700
基本上有智能提示的

27:22.700 --> 27:24.500
所以说写写的还是比较快的

27:24.800 --> 27:26.700
最好的注册实验

27:26.700 --> 27:27.700
就是用这种方式

27:27.900 --> 27:29.500
原老师有可能写习惯了

27:29.500 --> 27:31.000
或者不是写习惯了

27:31.000 --> 27:31.900
有可能是

27:32.900 --> 27:34.000
为了减变

27:34.000 --> 27:36.000
有的时候注册实验用on来注册

27:36.000 --> 27:37.500
但是同学们写的时候

27:37.500 --> 27:39.900
建议大家尽量使用这种方式来注册实验

27:40.500 --> 27:40.900
好吧

27:42.400 --> 27:43.100
然后

27:43.500 --> 27:44.500
用这种方式注册实验

27:44.500 --> 27:45.900
怎么来移除实验的

27:45.900 --> 27:46.600
比方说

27:47.000 --> 27:48.200
我要把这个移除掉

27:48.500 --> 27:51.300
将来我点击的时候不要用这个函数了

27:51.800 --> 27:52.800
那我怎么来做了

27:53.000 --> 27:54.900
如果说要移除时间的话

27:55.100 --> 27:57.000
那么你要调用另外一个方法

27:57.000 --> 27:58.100
叫做remove

27:59.000 --> 27:59.600
什么意思

27:59.600 --> 28:00.200
移除

28:00.400 --> 28:01.500
1分成离身的

28:02.100 --> 28:03.800
第一个参数是件名字

28:04.200 --> 28:05.100
我移除的是

28:05.300 --> 28:06.100
哪个

28:06.300 --> 28:07.600
针对哪个时间的移除

28:07.800 --> 28:09.000
针对点击事件

28:09.000 --> 28:10.600
我要移除一个处理函数

28:10.900 --> 28:12.700
后边写上处理函数

28:13.000 --> 28:14.500
所以是写的是函数啊

28:14.500 --> 28:16.600
你不要重复把这个函数给我写过来

28:16.900 --> 28:18.000
那我现在又一个

28:18.100 --> 28:19.100
哲学问题问大家

28:19.100 --> 28:21.200
这个函数跟这个函数是一个函数吗

28:22.700 --> 28:24.400
双胞胎是一个人吧

28:25.100 --> 28:25.800
不是吧

28:26.300 --> 28:26.800
对吧

28:27.400 --> 28:29.100
有个人跟函个长得很像

28:29.100 --> 28:30.000
那是函个吗

28:30.200 --> 28:31.100
那也不是吧

28:31.800 --> 28:32.300
对吧

28:32.400 --> 28:33.100
所以呢

28:34.300 --> 28:35.200
我们要怎么办呢

28:35.200 --> 28:37.200
我们如果说你要移除事件的话

28:37.200 --> 28:40.400
你得把这个事件提出去写成一个函数

28:41.500 --> 28:43.800
比方说我们这里写上一个Click

28:43.800 --> 28:44.400
2

28:44.700 --> 28:45.400
Handler

28:45.900 --> 28:47.700
然后呢我们这个样子注册事件的时候

28:47.700 --> 28:49.100
因为反正这里传的是函数吗

28:49.100 --> 28:49.700
列个函数

28:50.300 --> 28:51.800
因此我是不是可以把这个传进来

28:52.000 --> 28:53.200
这个人不就是函数吗

28:53.700 --> 28:55.300
注意一下后面不能加扩号啊

28:55.300 --> 28:56.900
一加扩号表示函数调用了

28:56.900 --> 28:57.800
这个是传的什么

28:58.100 --> 29:01.900
传的是函数返回值就执行的返回值

29:02.000 --> 29:03.500
表示说立即执行函数

29:03.600 --> 29:04.700
把这个函数的返回值

29:04.700 --> 29:05.500
undefend

29:06.000 --> 29:06.900
放到这个位置

29:07.400 --> 29:08.400
那就不一样了哈

29:08.800 --> 29:09.600
你不能写扩号了

29:09.600 --> 29:10.700
扩号表示调用

29:11.800 --> 29:12.500
这样写

29:12.900 --> 29:14.700
表示一个函数传进来了

29:15.000 --> 29:16.300
那我要移除的时候呢

29:16.300 --> 29:17.900
也是移除的这个函数

29:19.400 --> 29:20.400
是这么个意思

29:20.800 --> 29:21.800
那我现在先不移除

29:21.800 --> 29:23.600
我们首先看一下时间也没做到成功

29:24.300 --> 29:25.200
就都做成功了

29:25.200 --> 29:26.200
然后我们来移除一下

29:26.200 --> 29:27.400
btnremove

29:27.800 --> 29:28.800
evensnesenar

29:29.100 --> 29:30.500
哪个时间的Click时间

29:30.500 --> 29:31.700
哪个函数呢

29:32.400 --> 29:33.400
Click

29:34.300 --> 29:35.600
Click2Handler

29:36.100 --> 29:37.100
好现在给他移除了

29:37.100 --> 29:38.800
然后再点击是不是就有遗伤了

29:39.700 --> 29:41.300
这是最灵活的方式

29:42.400 --> 29:43.900
处理时间的最灵活的方式

29:44.400 --> 29:45.200
这是第二个点

29:45.200 --> 29:46.900
注册时间有三种方式

29:46.900 --> 29:48.300
我们刚才用的是第二种

29:48.600 --> 29:49.100
第二种呢

29:49.100 --> 29:51.100
其实我们平时做练习的时候也可以用

29:51.100 --> 29:52.800
但是第三种一定要会

29:52.800 --> 29:53.900
你不能说你不会

29:54.500 --> 29:55.900
因此我建议同学们的

29:56.400 --> 29:57.800
在练习的时候

29:57.800 --> 29:58.800
使用第三种

30:00.100 --> 30:01.000
其实

30:01.200 --> 30:02.900
以后学到框架之后

30:03.300 --> 30:04.500
用的是哪一种呢

30:04.900 --> 30:05.900
也不是第一种

30:05.900 --> 30:06.600
也不是第二种

30:06.600 --> 30:07.600
也不是第三种

30:08.300 --> 30:09.700
框架帮你解决了

30:09.700 --> 30:11.800
框架有一套更好的方式

30:11.800 --> 30:13.000
来让你处理时间

30:13.500 --> 30:14.300
但是现在呢

30:14.300 --> 30:16.500
至少原生的解决是你在会

30:16.500 --> 30:17.600
你不能说你不会

30:19.400 --> 30:20.400
好接下来我们来看

30:20.400 --> 30:21.100
第三个点

30:21.100 --> 30:22.500
有些小的细节

30:22.500 --> 30:23.900
其实最核心的内容

30:24.400 --> 30:25.300
就是我们客气

30:25.300 --> 30:27.300
就是本节客意开始的时候

30:27.300 --> 30:28.100
给他讲的

30:29.300 --> 30:30.800
元素坚挺什么

30:30.800 --> 30:32.800
然后又要做什么就完了

30:33.200 --> 30:34.200
时间并不复杂

30:34.200 --> 30:35.600
这些都有小的细节

30:36.200 --> 30:37.400
然后事件处理函数

30:37.400 --> 30:38.000
我们来看一下

30:38.000 --> 30:39.100
就这个函数

30:39.100 --> 30:40.400
无论你是使用

30:40.800 --> 30:42.400
on的那种方式来注册

30:43.100 --> 30:44.700
还是使用这种方式来注册

30:44.700 --> 30:45.600
管理用什么方式

30:45.600 --> 30:47.100
它总得是一个函数

30:47.100 --> 30:47.500
对吧

30:47.500 --> 30:49.300
事件处理的总得是一个函数

30:49.900 --> 30:51.300
那么这个函数呢

30:51.900 --> 30:53.300
看一下有什么样的特点

30:54.100 --> 30:56.100
其实在触发事件的时候

30:56.100 --> 30:58.600
它会往这个函数里面传一个参数

30:59.300 --> 31:00.500
它会给你传过来

31:02.000 --> 31:04.300
那么你这个参数里是一个对象

31:04.300 --> 31:06.700
我们把它称之为事件对象

31:06.700 --> 31:08.700
叫event object

31:09.500 --> 31:10.900
称之为事件对象

31:11.400 --> 31:13.800
这个对象里面有很多的属性

31:13.800 --> 31:15.200
有些还有一些方法

31:16.400 --> 31:17.600
它可以告诉你

31:19.000 --> 31:21.200
跟这个事件相关的一些信息

31:21.200 --> 31:22.400
这说的是啥意思

31:22.900 --> 31:25.200
就比方说我这个点击

31:25.200 --> 31:26.800
我在鼠标上在它们点击了

31:27.800 --> 31:29.600
那么我点的是鼠标左键

31:29.600 --> 31:31.200
还是右键

31:32.600 --> 31:33.400
右键还不会出吧

31:33.400 --> 31:34.400
点击

31:34.400 --> 31:36.700
鼠标点击的位置在哪呢

31:36.700 --> 31:38.400
鼠标在哪个位置点击的呢

31:39.400 --> 31:40.000
懂了意思吧

31:40.100 --> 31:42.100
就是有一些额外的信息

31:42.100 --> 31:45.100
它就会把这些信息通过参数告诉你

31:45.100 --> 31:46.700
你爱用就用

31:46.700 --> 31:47.900
不用就拿到

31:48.700 --> 31:49.700
反正它会告诉你

31:49.700 --> 31:51.300
你不能说我没给你

31:51.300 --> 31:53.300
你给的你不用那是你的事情

31:53.300 --> 31:54.700
你可能确实用不到

31:54.700 --> 31:55.700
比方我就数数一句话

31:55.700 --> 31:57.300
我哪需要知道那么多

31:58.100 --> 32:00.500
但是你可以用可以用

32:00.500 --> 32:01.300
可以用的话

32:01.300 --> 32:03.300
你就可以需要写个参数

32:03.300 --> 32:05.100
参数名字的水遍写

32:05.100 --> 32:06.500
它会给你传进来

32:07.500 --> 32:10.500
它会把这个东西给你传到参数里面去

32:10.500 --> 32:11.500
你就可以用了

32:11.500 --> 32:14.000
那比方说我们这里就输出这个参数

32:14.000 --> 32:18.000
当然我们通常习惯上是写个E在这

32:18.000 --> 32:20.500
但是不是说参数名字必须是E

32:20.500 --> 32:23.500
参数的形参力I写啥写啥

32:23.500 --> 32:24.500
它会给你传过来

32:24.500 --> 32:27.500
我只问通常情况下写的是E

32:27.500 --> 32:28.500
叫E本乘

32:28.500 --> 32:30.500
好本来点击一下

32:30.500 --> 32:32.000
你看第一个实验处理的参数

32:32.000 --> 32:33.000
它得到的是一个对象

32:33.000 --> 32:35.500
它告诉你好多好多的信息

32:35.500 --> 32:36.500
包括这些

32:36.500 --> 32:39.500
你们有没有按住键盘的Alt

32:39.500 --> 32:41.500
你按的

32:41.500 --> 32:44.500
按的那个就是鼠标是左键

32:44.500 --> 32:45.500
你就表示左键

32:45.500 --> 32:48.500
那么鼠标在整个页面的

32:48.500 --> 32:50.500
在整个窗口里面的坐标

32:50.500 --> 32:51.500
横坐标238

32:51.500 --> 32:53.500
中坐标19

32:53.500 --> 32:54.500
各种各样的信息

32:54.500 --> 32:56.500
一大堆信息都会告诉你

32:57.500 --> 32:59.500
那么这些信息

32:59.500 --> 33:00.500
一些我们有的时候开发

33:00.500 --> 33:01.500
需要用到的这些信息

33:01.500 --> 33:03.500
如果说需要用到的这些信息

33:03.500 --> 33:05.500
那你就使用这个对象

33:05.500 --> 33:07.500
不需要就拿到

33:07.500 --> 33:09.500
好吧没问题吧

33:09.500 --> 33:11.500
OK

33:11.500 --> 33:12.500
那我们的事件这一块

33:12.500 --> 33:13.500
还有一个点

33:13.500 --> 33:15.500
就是那常见的事件对象

33:15.500 --> 33:16.500
我们有两种

33:16.500 --> 33:17.500
一个是鼠标事件对象

33:17.500 --> 33:19.500
这里有一个文档

33:19.500 --> 33:21.500
如果说有一天

33:21.500 --> 33:23.500
鼠标跟鼠标事件相关

33:23.500 --> 33:24.500
你需要知道鼠标

33:24.500 --> 33:25.500
目前的各种信息

33:25.500 --> 33:26.500
各种位置信息

33:26.500 --> 33:28.500
那么你就可以查约这个文档

33:28.500 --> 33:30.500
将来我们在

33:30.500 --> 33:32.500
做某些效果的时候

33:32.500 --> 33:33.500
会给大家说

33:33.500 --> 33:34.500
我们会用到哪些

33:34.500 --> 33:35.500
鼠标信息

33:35.500 --> 33:37.500
鼠标对象里边的信息

33:37.500 --> 33:38.500
然后如果说你一次

33:38.500 --> 33:39.500
一个键盘时间

33:39.500 --> 33:40.500
你需要知道

33:40.500 --> 33:41.500
键盘里边的信息

33:41.500 --> 33:43.500
你就查约这个文档

33:43.500 --> 33:44.500
这文档会用一个列表的方式

33:44.500 --> 33:45.500
告诉你

33:45.500 --> 33:46.500
在键盘的对象里边

33:46.500 --> 33:47.500
有哪些属性可以用

33:47.500 --> 33:49.500
这些属性表示什么意思

33:49.500 --> 33:50.500
将来我们在用

33:50.500 --> 33:51.500
这个键盘事件的时候

33:51.500 --> 33:52.500
那我就会给大家

33:52.500 --> 33:55.500
解释怎么来查约这个文档

33:55.500 --> 33:57.500
另外在事件的处理

33:57.500 --> 33:58.500
函数当中

33:58.500 --> 33:59.500
又可以使用Z

33:59.500 --> 34:00.500
这个Z

34:00.500 --> 34:03.500
始终指向注册事件的动物

34:03.500 --> 34:04.500
啥意思

34:04.500 --> 34:06.500
就是你这边可以

34:06.500 --> 34:07.500
可以聊到这里

34:07.500 --> 34:10.500
我们输出一个Z

34:12.500 --> 34:13.500
或者在这里输出一个Z

34:13.500 --> 34:14.500
都像啊都一样

34:14.500 --> 34:15.500
那么这个Z

34:15.500 --> 34:17.500
指向谁呢

34:17.500 --> 34:18.500
这里你把它当为

34:18.500 --> 34:20.500
事件函数传过去了

34:20.500 --> 34:21.500
对吧

34:21.500 --> 34:22.500
把这个

34:22.500 --> 34:23.500
把它当为一个

34:23.500 --> 34:24.500
事件处理函数传过去了

34:24.500 --> 34:26.500
当谁再调用这个函数

34:26.500 --> 34:27.500
谁再调用

34:27.500 --> 34:29.500
甚至说浏览器在自动调用

34:29.500 --> 34:31.500
浏览器在调用这个函数的时候

34:31.500 --> 34:33.500
它会把这个函数的Z

34:33.500 --> 34:35.500
绑定成这个东西

34:35.500 --> 34:38.500
就是你给谁注册的事件

34:38.500 --> 34:39.500
那么这个Z

34:39.500 --> 34:40.500
就指向谁

34:40.500 --> 34:41.500
Initial

34:41.500 --> 34:42.500
在事件处理函数

34:42.500 --> 34:43.500
里面你可以使用Z

34:43.500 --> 34:44.500
表示

34:44.500 --> 34:47.500
当前的事件对象

34:47.500 --> 34:49.500
当前的事件源

34:49.500 --> 34:51.500
就是我给谁注册的事件

34:51.500 --> 34:52.500
那么这个Z

34:52.500 --> 34:53.500
就指向谁

34:53.500 --> 34:54.500
就这么简单

34:54.500 --> 34:55.500
我们来看一下

34:55.500 --> 34:57.500
这里点击

34:57.500 --> 35:00.500
没有保持

35:00.500 --> 35:01.500
点击你看

35:01.500 --> 35:02.500
这里输出的Z

35:02.500 --> 35:03.500
是不是就是这个按钮

35:03.500 --> 35:05.500
哪怕你将来

35:05.500 --> 35:07.500
把这个BTN

35:07.500 --> 35:10.500
设置为NOW

35:10.500 --> 35:11.500
那这个Z

35:11.500 --> 35:13.500
是不是也变成NOW了

35:13.500 --> 35:15.500
朋友们来回答元老师

35:15.500 --> 35:16.500
这个Z

35:16.500 --> 35:18.500
是不是也会变成NOW

35:18.500 --> 35:20.500
会吗

35:20.500 --> 35:22.500
不会吧

35:22.500 --> 35:23.500
为什么不会

35:23.500 --> 35:24.500
Z

35:24.500 --> 35:25.500
这个

35:25.500 --> 35:26.500
我们之前学的

35:26.500 --> 35:28.500
值和引用是一样的

35:28.500 --> 35:29.500
我现在有个动物

35:29.500 --> 35:31.500
动物是不是个对象

35:31.500 --> 35:33.500
对吧

35:33.500 --> 35:35.500
然后BTN

35:35.500 --> 35:37.500
只是保存了

35:37.500 --> 35:39.500
对象地址

35:39.500 --> 35:42.640
BTN和Z

35:42.640 --> 35:43.640
它只是保存了

35:43.640 --> 35:46.640
对象地址

35:46.640 --> 35:47.640
你有一天

35:47.640 --> 35:48.640
把BTN变成NOW

35:48.640 --> 35:50.640
跟Z有关系吗

35:50.640 --> 35:52.640
没有关系

35:52.640 --> 35:54.640
Z始终指向对象

35:54.640 --> 35:56.640
它里面也是个地址

35:56.640 --> 35:57.640
所以说

35:57.640 --> 35:59.640
这样的好处在于

35:59.640 --> 36:00.640
如果说你在这里

36:00.640 --> 36:02.640
可以Z就是BTN

36:02.640 --> 36:03.640
它能不能直接使用BTN

36:03.640 --> 36:04.640
可以

36:04.640 --> 36:05.640
但是有隐患

36:05.640 --> 36:07.640
因为将来说不准

36:07.640 --> 36:08.640
什么情况

36:08.640 --> 36:09.640
BTN就重新复制了

36:09.640 --> 36:11.640
那你这就要出问题

36:11.640 --> 36:13.640
所以Z来表示

36:13.640 --> 36:14.640
注册的目标

36:14.640 --> 36:15.640
是绝对没问题的

36:15.640 --> 36:16.640
因为它始终

36:16.640 --> 36:17.640
指向注册目标

36:17.640 --> 36:18.640
你看一下

36:18.640 --> 36:22.460
是不是还是这个

36:22.460 --> 36:23.460
对吧

36:23.460 --> 36:24.460
你出发这个

36:24.460 --> 36:25.460
点击出发的时间

36:25.460 --> 36:26.460
它注册的时间

36:26.460 --> 36:27.460
那就指向这个

36:28.460 --> 36:29.460
好了

36:29.460 --> 36:31.460
这些都是小的细节

36:31.460 --> 36:33.460
最重要的

36:33.460 --> 36:35.460
就是我们本节可以开始说的

36:35.460 --> 36:37.460
因为我们学校

36:37.460 --> 36:39.460
一定要抓住钢铃

36:39.460 --> 36:40.460
最核心的东西是什么

36:40.460 --> 36:41.460
其他小的细节

36:41.460 --> 36:42.460
查文档

36:42.460 --> 36:43.460
解决

36:43.460 --> 36:45.460
事件内行查文档

36:45.460 --> 36:46.460
处理函数里边

36:46.460 --> 36:48.460
有哪些注册方式查文档

36:48.460 --> 36:49.460
然后

36:49.460 --> 36:50.460
这一块

36:50.460 --> 36:52.460
事件处理函数里边

36:52.460 --> 36:54.460
一个老拿东西查文档

36:54.460 --> 36:55.460
这才是

36:55.460 --> 36:57.460
正确的学习程序的方式

36:57.460 --> 36:58.460
好 接下来

36:58.460 --> 36:59.460
来做联系题

37:01.460 --> 37:02.460
第一道题

37:02.460 --> 37:03.460
第一道题其实就是

37:03.460 --> 37:04.460
接着商业节课

37:04.460 --> 37:10.980
我们来继续做

37:10.980 --> 37:11.980
让小点

37:12.980 --> 37:13.980
商业节课

37:13.980 --> 37:18.480
我们做到了招了

37:18.480 --> 37:19.480
里面商业课

37:19.480 --> 37:20.480
也接着里面商业课的

37:20.480 --> 37:21.480
代码写

37:21.480 --> 37:22.480
做到招了

37:22.480 --> 37:23.480
对吧

37:23.480 --> 37:24.480
我写了三个函数

37:24.480 --> 37:25.480
一个是

37:25.480 --> 37:28.480
设置这里的按钮的

37:28.480 --> 37:30.480
央视状态

37:30.480 --> 37:32.480
一个是设置这个

37:32.480 --> 37:34.480
发送验证码的状态

37:34.480 --> 37:36.480
一个是设置这个选中的

37:36.480 --> 37:38.480
就以选择爱好的状态

37:38.480 --> 37:39.480
就设置了三个函数

37:39.480 --> 37:40.480
那么这三个函数

37:40.480 --> 37:42.480
其实一开始的时候

37:42.480 --> 37:44.480
要不要雕用

37:44.480 --> 37:46.480
一开始状态就必须要正确

37:46.480 --> 37:47.480
所以一开始要雕用

37:47.480 --> 37:48.480
雕用这三个函数

37:48.480 --> 37:50.480
一开始我们来写一次

37:51.480 --> 37:53.480
submit button

37:53.480 --> 37:54.480
denters

37:54.480 --> 37:55.480
一开始

37:55.480 --> 37:56.480
要把状态设

37:56.480 --> 37:57.480
因为这三个函数

37:57.480 --> 37:58.480
三个函数

37:58.480 --> 37:59.480
商业课已经做好了

37:59.480 --> 38:00.480
对吧

38:00.480 --> 38:01.480
就表示说一雕用它

38:01.480 --> 38:03.480
那么就可以保证它的状态

38:03.480 --> 38:04.480
是正确的

38:05.480 --> 38:06.480
然后第二个函数

38:06.480 --> 38:08.480
set send code

38:08.480 --> 38:09.480
button

38:09.480 --> 38:10.480
denters

38:10.480 --> 38:13.480
那么这个状态也正确了

38:13.480 --> 38:15.480
然后再来一个

38:15.480 --> 38:16.480
set

38:17.480 --> 38:21.050
selected notes

38:21.050 --> 38:23.050
目前这个状态也正确了

38:23.050 --> 38:24.050
对吧

38:24.050 --> 38:25.050
只要一雕这个函数

38:25.050 --> 38:26.050
它的相应的状态

38:26.050 --> 38:27.050
就会变成正确

38:27.050 --> 38:28.050
好

38:28.050 --> 38:29.050
那接下来就是时间了

38:29.050 --> 38:31.050
将上边的函数跟用户事件

38:31.050 --> 38:32.050
进行连接

38:32.050 --> 38:33.050
其实我们以后开发

38:33.050 --> 38:34.050
经常都是这样子

38:34.050 --> 38:37.050
我们先用函数把功能写好

38:38.050 --> 38:39.050
就有几种方式

38:39.050 --> 38:41.050
有些人的习惯上

38:41.050 --> 38:42.050
它会从事件开始写

38:42.050 --> 38:44.050
我发生了什么事的时候

38:44.050 --> 38:45.050
我再去做什么事

38:45.050 --> 38:47.050
我再去写函数

38:48.050 --> 38:49.050
有些人的刚好相反

38:49.050 --> 38:50.050
像袁老师

38:50.050 --> 38:51.050
就有点怪异

38:51.050 --> 38:52.050
这不要怪异

38:53.050 --> 38:54.050
这是多年的习惯

38:54.050 --> 38:55.050
养成的习惯

38:55.050 --> 38:57.050
袁老师写这个东西

38:57.050 --> 39:00.050
在习惯上先写好函数

39:00.050 --> 39:01.050
我要做什么事

39:01.050 --> 39:02.050
就有哪些功能

39:02.050 --> 39:04.050
我把功能写成函数

39:04.050 --> 39:05.050
然后在事件这一块

39:05.050 --> 39:07.050
处理的非常简单

39:07.050 --> 39:08.050
发生什么事

39:08.050 --> 39:10.050
我调用什么函数就完了

39:10.050 --> 39:11.050
好

39:11.050 --> 39:13.050
那么这里我怎么写呢

39:13.050 --> 39:15.050
首先是发送验证

39:15.050 --> 39:17.050
它跟什么有关系

39:17.050 --> 39:18.050
跟这个玩意有关系

39:19.050 --> 39:20.050
对吧

39:20.050 --> 39:22.050
跟这个文闷框有关系

39:22.050 --> 39:24.050
只要文闷框的文闷改变

39:24.050 --> 39:26.050
是不是要重新设置这个状态

39:26.050 --> 39:28.050
因此我这里怎么处理

39:28.050 --> 39:32.050
我就写上找到文闷框

39:32.050 --> 39:33.050
这个文闷框

39:33.050 --> 39:35.050
之前好像找过

39:36.050 --> 39:38.050
TST 缝

39:40.050 --> 39:41.050
TST

39:42.050 --> 39:43.050
TST 缝

39:44.050 --> 39:45.050
是不是找到文闷框

39:45.050 --> 39:46.050
这是个DOM

39:46.050 --> 39:48.050
你可以先把它保存到变量里边

39:48.050 --> 39:50.050
然后给变量注册时间

39:50.050 --> 39:52.050
也可以直接通过表达

39:52.050 --> 39:53.050
不就是个DOM

39:53.050 --> 39:55.050
给它ADD

39:55.050 --> 39:56.050
Events

39:57.050 --> 39:58.050
Lesson

39:58.050 --> 39:59.050
什么时间

39:59.050 --> 40:00.050
Input时间

40:00.050 --> 40:02.050
文闷框被改变的时间

40:02.050 --> 40:03.050
只要文闷框

40:03.050 --> 40:04.050
用户写了一个字

40:05.050 --> 40:06.050
那么我就要干嘛

40:06.050 --> 40:08.050
我就要重新设置

40:09.050 --> 40:10.050
状态

40:10.050 --> 40:11.050
调用这个函数

40:12.050 --> 40:13.050
就完了

40:14.050 --> 40:16.050
元老师写的单码里边

40:16.050 --> 40:18.050
事件这一部分反而是最简单的

40:18.050 --> 40:20.050
因为我之前的功能已经起了

40:20.050 --> 40:21.050
已经完全齐全了

40:21.050 --> 40:23.050
只需要把事件连过去就行了

40:23.050 --> 40:24.050
就像连线一样

40:24.050 --> 40:25.050
对吧

40:25.050 --> 40:26.050
你做什么事的时候

40:26.050 --> 40:27.050
我要去做

40:27.050 --> 40:28.050
我要去做这点上

40:29.050 --> 40:30.050
那么这样子

40:30.050 --> 40:31.050
其实还可以简写

40:31.050 --> 40:33.050
直接把这个函数名字写上

40:33.050 --> 40:34.050
是不是可以

40:34.050 --> 40:35.050
对吧

40:35.050 --> 40:36.050
当发生这件事的时候

40:36.050 --> 40:38.050
你去调用这个函数

40:38.050 --> 40:39.050
这也可以

40:39.050 --> 40:41.050
那我们来看一下吧

40:42.050 --> 40:43.050
每一次在调用

40:43.050 --> 40:44.050
我写一个字

40:44.050 --> 40:45.050
它也会调用一次

40:45.050 --> 40:46.050
只不过调用这一次

40:46.050 --> 40:48.050
由于它还不足

40:48.050 --> 40:49.050
是一位

40:49.050 --> 40:51.050
这个函数里边会处理

40:51.050 --> 40:52.050
之前写的

40:52.050 --> 40:54.050
它必须要等于十一的时候

40:54.050 --> 40:55.050
它才会设置为

40:56.050 --> 40:57.050
可用

40:57.050 --> 40:58.050
我们继续写

41:00.050 --> 41:01.050
可用了

41:01.050 --> 41:02.050
你再多写

41:02.050 --> 41:03.050
多写不了了

41:03.050 --> 41:04.050
你删一个

41:04.050 --> 41:05.050
又不可用了

41:06.050 --> 41:07.050
就完事了

41:07.050 --> 41:08.050
好

41:08.050 --> 41:09.050
然后下边这个

41:09.050 --> 41:10.050
这个多选框

41:11.050 --> 41:12.050
多选框

41:13.050 --> 41:14.050
在哪呢

41:15.050 --> 41:16.050
在这

41:16.050 --> 41:17.050
在这

41:17.050 --> 41:24.030
这个多选框

41:24.030 --> 41:25.030
这个多选框

41:25.030 --> 41:27.030
我要监听什么时间呢

41:27.030 --> 41:28.030
我监听它

41:28.030 --> 41:30.030
它是不是被改变的时间

41:30.030 --> 41:32.030
所以多选框那个直

41:32.030 --> 41:33.030
就是选中状态

41:33.030 --> 41:34.030
被改变的时间

41:34.030 --> 41:35.030
对吧

41:35.030 --> 41:37.030
因此我这里可以使用

41:39.030 --> 41:40.030
也可以使用input

41:40.030 --> 41:41.030
这个玩意其实

41:41.030 --> 41:43.030
跟input效果是一样的

41:43.030 --> 41:45.030
当我们改变的时候

41:45.030 --> 41:47.030
我要去运行哪个函数了

41:47.030 --> 41:48.030
运行这个函数

41:48.030 --> 41:51.620
好

41:51.620 --> 41:52.620
我们来看

41:52.620 --> 41:53.620
是不是可以了

41:53.620 --> 41:54.620
对吧

41:54.620 --> 41:56.620
只要一个多选框被改变了

41:56.620 --> 41:57.620
你只要一改变

41:57.620 --> 41:58.620
它就会运行一次这个函数

41:58.620 --> 41:59.620
一运行的时候

41:59.620 --> 42:00.620
状态就正确了

42:01.620 --> 42:02.620
所以我们再来

42:02.620 --> 42:03.620
梳理一下

42:03.620 --> 42:04.620
我先写函数

42:04.620 --> 42:05.620
把函数

42:05.620 --> 42:06.620
只要一雕函数

42:06.620 --> 42:07.620
它就变成正确的状态了

42:08.620 --> 42:10.620
然后我再去搞定时间

42:10.620 --> 42:11.620
你当什么的时候

42:11.620 --> 42:13.620
用户做了什么操作的时候

42:14.620 --> 42:15.620
我要去雕容一下

42:16.620 --> 42:17.620
就完事了

42:18.620 --> 42:19.620
体会一下

42:20.620 --> 42:21.620
然后我们还有个什么的

42:21.620 --> 42:22.620
还有一个就是下达列表

42:22.620 --> 42:23.620
对吧

42:23.620 --> 42:25.620
下达列表的元素在哪呢

42:25.620 --> 42:26.620
在这

42:26.620 --> 42:27.620
是那个字

42:29.620 --> 42:30.620
是那个字

42:31.620 --> 42:32.620
给它做了什么时间

42:32.620 --> 42:33.620
Change

42:33.620 --> 42:36.620
当下达列表改变的时候

42:37.620 --> 42:38.620
我要雕容那个

42:40.620 --> 42:43.510
这个函数

42:44.510 --> 42:48.300
对吧

42:48.300 --> 42:49.300
它每一次改变

42:49.300 --> 42:50.300
它都会雕用这个函数

42:50.300 --> 42:51.300
一雕这个函数

42:51.300 --> 42:52.300
是不是就变成正确了

42:53.300 --> 42:54.300
这一块注册时间

42:54.300 --> 42:55.300
就变得非常简单了

42:55.300 --> 42:57.300
事件在原来实际眼中

42:57.300 --> 42:59.300
就是一个连线的过程

42:59.300 --> 43:00.300
我有这些功能

43:00.300 --> 43:02.300
我这功能早就做好了

43:02.300 --> 43:03.300
一个功能一些功能

43:03.300 --> 43:05.300
然后用户可以

43:05.300 --> 43:07.300
用户可以做这些操作

43:07.300 --> 43:08.300
各种各样的操作

43:08.300 --> 43:09.300
然后就连线

43:10.300 --> 43:12.300
用户做了这个操作的时候

43:12.300 --> 43:13.300
我可能要去雕这个函数

43:14.300 --> 43:15.300
用户做了这个操作的时候

43:15.300 --> 43:16.300
我要雕这个函数

43:17.300 --> 43:18.300
用户做了这个操作的时候

43:18.300 --> 43:19.300
我也要雕这个函数

43:19.300 --> 43:20.300
雕它

43:21.300 --> 43:22.300
雕它

43:23.300 --> 43:24.300
我就连线就完事了

43:26.300 --> 43:27.300
好 下面这个

43:28.300 --> 43:31.300
给纹笨框注册事件

43:31.300 --> 43:33.300
若用户在输入的过程中

43:33.300 --> 43:35.300
按下了ESC

43:35.300 --> 43:37.300
则将纹笨框清空

43:37.300 --> 43:39.300
给所有的纹笨框

43:39.300 --> 43:40.300
那么这个页面上

43:40.300 --> 43:42.300
是不是有很多的纹笨框

43:43.300 --> 43:44.300
是不是有很多

43:45.300 --> 43:46.300
那么我们是不是要

43:46.300 --> 43:48.300
拿到所有的纹笨框

43:48.300 --> 43:50.300
那怎么来拿呢

43:50.300 --> 43:51.300
怎么拿

43:52.300 --> 43:53.300
TATIS

43:53.300 --> 43:54.300
是不是可以使用

43:55.300 --> 43:56.300
Documents

43:56.300 --> 43:57.300
Curry

43:57.300 --> 43:58.300
Select

43:58.300 --> 44:00.300
现在我拿到所有的了

44:01.300 --> 44:02.300
拿到所有的什么呢

44:02.300 --> 44:03.300
Input

44:04.300 --> 44:05.300
Type等于

44:12.660 --> 44:13.660
Type等于

44:14.660 --> 44:15.660
放大一点

44:15.660 --> 44:17.660
我们看一下哪些是纹笨框

44:18.660 --> 44:19.660
现在就当你写个

44:19.660 --> 44:20.660
CSS选择器

44:20.660 --> 44:21.660
选中所有的纹笨框

44:21.660 --> 44:23.660
你该怎么来写这个选择器

44:24.660 --> 44:25.660
写个选择器

44:25.660 --> 44:26.660
来选中所有的纹笨框

44:26.660 --> 44:28.660
是不是有包括Text

44:29.660 --> 44:30.660
看一下我们的页面上

44:30.660 --> 44:31.660
是不是已经

44:31.660 --> 44:32.660
好像是不是有

44:32.660 --> 44:33.660
特殊的那样式

44:33.660 --> 44:34.660
可以直接让我们选中

44:35.660 --> 44:36.660
ClassTST

44:36.660 --> 44:37.660
TST

44:37.660 --> 44:38.660
TST

44:38.660 --> 44:39.660
好像就直接通过

44:39.660 --> 44:40.660
那样式就可以了

44:40.660 --> 44:41.660
对吧

44:41.660 --> 44:42.660
我还不用那么麻烦

44:44.660 --> 44:45.660
那可以的

44:45.660 --> 44:46.660
可以的

44:46.660 --> 44:47.660
Documents

44:47.660 --> 44:48.660
Documents

44:48.660 --> 44:49.660
也是TST

44:49.660 --> 44:50.660
行了

44:50.660 --> 44:51.660
那就简单了

44:51.660 --> 44:52.660
我还说我用

44:52.660 --> 44:53.660
元素选择器

44:53.660 --> 44:54.660
属性选择器

44:55.660 --> 44:56.660
那么这样子

44:56.660 --> 44:57.660
是不是拿到

44:57.660 --> 44:58.660
所谓的纹笨框了

45:04.860 --> 45:05.860
拿到了5个

45:05.860 --> 45:06.860
我们看一下

45:06.860 --> 45:08.860
第2个第3个第4个第5个

45:08.860 --> 45:09.860
都没问题

45:11.860 --> 45:12.860
那么现在我要给

45:12.860 --> 45:14.860
每一个纹笨框注册时间

45:14.860 --> 45:15.860
是不是要循环

45:17.860 --> 45:18.860
这个数组

45:18.860 --> 45:19.860
我要循环这个数组

45:19.860 --> 45:21.860
一个一个拿出来注册时间

45:27.370 --> 45:28.370
直接来吧

45:28.370 --> 45:29.370
TSTSI

45:29.370 --> 45:30.370
那么这是不是

45:30.370 --> 45:31.370
其中一个纹笨框

45:32.370 --> 45:34.370
是不是要给它注册时间

45:34.370 --> 45:35.370
好来

45:35.370 --> 45:36.370
ADD1分成离成了

45:36.370 --> 45:37.370
注册什么时间

45:39.370 --> 45:40.370
纹笨框

45:40.370 --> 45:42.370
我要监盘按下

45:42.370 --> 45:43.370
什么时间

45:43.370 --> 45:44.370
期待

45:45.370 --> 45:47.370
监盘按下的时间

45:49.370 --> 45:50.370
那么我要

45:50.370 --> 45:51.370
每在时间里边

45:51.370 --> 45:52.370
我来输出一个吧

45:53.370 --> 45:54.370
123

45:54.370 --> 45:55.370
我先输出一个

45:55.370 --> 45:56.370
123

45:56.370 --> 45:57.370
加上来试一下

45:57.370 --> 45:58.370
有没有把时间注册上

45:59.370 --> 46:00.370
我来第1个纹笨框

46:00.370 --> 46:01.370
里面按一个监盘

46:01.370 --> 46:02.370
是不是输出了123

46:02.370 --> 46:03.370
是运行的时间

46:03.370 --> 46:04.370
我在第1个纹笨框里面

46:04.370 --> 46:05.370
按下监盘

46:05.370 --> 46:06.370
是不是也输出了

46:06.370 --> 46:07.370
也运行的时间

46:07.370 --> 46:08.370
对吧

46:08.370 --> 46:09.370
每一个纹笨框

46:09.370 --> 46:10.370
它都会

46:10.370 --> 46:11.370
监盘按下的时候

46:11.370 --> 46:12.370
都会运行一个函数

46:12.370 --> 46:14.370
那么在这个函数里边

46:14.370 --> 46:16.370
我要知道

46:16.370 --> 46:18.370
你按下的是哪一个键

46:18.370 --> 46:20.370
因为你按任何一个键

46:20.370 --> 46:22.370
它都会出发一个时间

46:22.370 --> 46:23.370
但是我要

46:23.370 --> 46:25.370
我只关心ESC

46:25.370 --> 46:27.370
我怎么来获得

46:27.370 --> 46:29.370
你按的是哪一个键呢

46:30.370 --> 46:31.370
同学们

46:31.370 --> 46:32.370
你们肯定不知道

46:32.370 --> 46:33.370
你如果说你之前

46:33.370 --> 46:34.370
没有接触过的话

46:34.370 --> 46:35.370
肯定不知道

46:35.370 --> 46:37.370
当然我要问你的是

46:37.370 --> 46:39.370
在文档哪一个地方查询

46:42.260 --> 46:44.260
跟事件类型有关系吗

46:45.260 --> 46:46.260
没有什么直接关系吗

46:46.260 --> 46:47.260
事件类型

46:47.260 --> 46:49.260
描述了什么时候出发时间

46:49.260 --> 46:50.260
我知道它什么时候出发

46:50.260 --> 46:53.630
键盘一按下就出发

46:53.630 --> 46:55.630
跟注册时间有关系吗

46:55.630 --> 46:56.630
你用这种方式注册

46:56.630 --> 46:57.630
用这种方式注册

46:57.630 --> 46:59.630
用这种方式注册有关系吗

46:59.630 --> 47:00.630
没有关系

47:00.630 --> 47:01.630
那跟什么有关系

47:01.630 --> 47:03.630
跟事件处理函数有关系

47:03.630 --> 47:04.630
是不是我要知道

47:04.630 --> 47:06.630
一个事件的一些相关信息

47:06.630 --> 47:07.630
对吧

47:07.630 --> 47:08.630
那我要用什么

47:08.630 --> 47:09.630
用事件对象

47:09.630 --> 47:10.630
就是这个参数

47:10.630 --> 47:11.630
这个参数里边

47:11.630 --> 47:13.630
会提供给我们相关信息

47:13.630 --> 47:14.630
好

47:14.630 --> 47:15.630
因此我这里是不是

47:15.630 --> 47:16.630
要用到这个参数

47:17.630 --> 47:19.630
我打印这个参数

47:19.630 --> 47:21.630
那参数里边我要用什么

47:21.630 --> 47:22.630
有两种方式

47:22.630 --> 47:23.630
一种是查文档

47:23.630 --> 47:24.630
一种就把打印出来

47:24.630 --> 47:25.630
一看就知道了

47:25.630 --> 47:26.630
好

47:26.630 --> 47:27.630
我们现在就把打印出来

47:27.630 --> 47:28.630
一看一下

47:28.630 --> 47:29.630
我按一个A

47:29.630 --> 47:31.630
是不是得到一个对象

47:31.630 --> 47:33.630
它告诉你

47:33.630 --> 47:34.630
什么code

47:34.630 --> 47:35.630
什么key

47:35.630 --> 47:36.630
key是不是告诉你

47:36.630 --> 47:37.630
按的是A

47:37.630 --> 47:39.630
那我按ESC

47:39.630 --> 47:42.260
ESC

47:42.260 --> 47:44.260
它是不是又出发一个对象

47:44.260 --> 47:45.260
又得到一个对象

47:45.260 --> 47:46.260
对象里边什么key

47:46.260 --> 47:49.260
等于escap

47:49.260 --> 47:50.260
escap

47:50.260 --> 47:52.260
那你说我通过什么来判断

47:52.260 --> 47:54.260
通过这个key来判断

47:54.260 --> 47:55.260
这里另外一个

47:55.260 --> 47:56.260
还有一个keycode

47:56.260 --> 47:57.260
表示键盘的按键

47:57.260 --> 47:59.260
这个玩意不要用了

47:59.260 --> 48:01.260
现在已经过时了

48:01.260 --> 48:03.260
将来有可能会被移除了

48:03.260 --> 48:05.260
官方要求你不要用这个了

48:05.260 --> 48:07.260
建议你用key来得到

48:07.260 --> 48:09.260
当前按的是哪一个键

48:09.260 --> 48:10.260
它是个制服串

48:10.260 --> 48:12.260
所以说我们这里就非常简单了

48:12.260 --> 48:15.260
我就判断你是不是1点key

48:15.260 --> 48:18.260
等于escap

48:18.260 --> 48:20.260
你按的是不是ESC

48:20.260 --> 48:22.260
如果说你其他情况

48:22.260 --> 48:23.260
我不处理

48:23.260 --> 48:25.260
我就看你按的是不是ESC

48:25.260 --> 48:27.260
如果说你按的是ESC的话

48:27.260 --> 48:28.260
我干嘛

48:28.260 --> 48:31.260
我要清空文本框

48:31.260 --> 48:33.260
清空文本框

48:33.260 --> 48:37.340
我们来试一下

48:37.340 --> 48:38.340
现在我按别的键

48:38.340 --> 48:39.340
没问题的话

48:39.340 --> 48:40.340
它甩的没甩我

48:40.340 --> 48:41.340
有没有出发事件

48:41.340 --> 48:42.340
有啊

48:42.340 --> 48:44.340
有一些同学把这个代码

48:44.340 --> 48:45.340
签到这么多层

48:45.340 --> 48:47.340
一下就脑袋就晕了

48:47.340 --> 48:48.340
那如果说你脑袋晕了的话

48:48.340 --> 48:50.340
你就敢单独提成函数

48:50.340 --> 48:53.340
函多提到

48:53.340 --> 48:56.340
处理

48:56.340 --> 48:59.340
处理键盘按下的事件

48:59.340 --> 49:03.550
那有这样的写

49:03.550 --> 49:04.550
那这样的写还晕

49:04.550 --> 49:05.550
我就没着了

49:05.550 --> 49:06.550
但是这样的写法

49:06.550 --> 49:08.550
跟它那个写法没有什么区别

49:08.550 --> 49:09.550
刚才那个写法

49:09.550 --> 49:11.550
是不是把函数直接放这了

49:11.550 --> 49:14.550
对吧

49:14.550 --> 49:15.550
好

49:15.550 --> 49:17.550
那么现在这个函数

49:17.550 --> 49:18.550
写到了

49:18.550 --> 49:19.550
我们现在按别的键

49:19.550 --> 49:20.550
没问题

49:20.550 --> 49:21.550
函数有没有出发

49:21.550 --> 49:22.550
有出发

49:22.550 --> 49:23.550
它进不了判断而已

49:23.550 --> 49:24.550
只要我们按ESC

49:24.550 --> 49:25.550
你看

49:25.550 --> 49:26.550
是不是清空文本框了

49:26.550 --> 49:28.550
那这里我按一下ESC

49:28.550 --> 49:29.550
又清空文本框了

49:29.550 --> 49:32.550
记得我按ESC也清空文本框了

49:32.550 --> 49:34.550
那怎么清空呢

49:34.550 --> 49:36.550
怎么清空文本框来着

49:36.550 --> 49:38.550
炸清空

49:38.550 --> 49:40.550
是不是我看给谁注册的事件

49:40.550 --> 49:41.550
对吧

49:41.550 --> 49:42.550
在哪个文本框里边

49:42.550 --> 49:43.550
我就把谁清空

49:43.550 --> 49:45.550
然后是不是用Z

49:45.550 --> 49:47.550
表示的是

49:47.550 --> 49:49.550
到底是哪一个文本框

49:49.550 --> 49:51.550
出发的这个事件

49:51.550 --> 49:52.550
哪个文本框

49:52.550 --> 49:53.550
出发的键盘按下事件

49:53.550 --> 49:54.550
它按了ESC

49:54.550 --> 49:56.550
那我就把哪一个文本框清空

49:56.550 --> 49:57.550
那么Z是指代谁

49:57.550 --> 49:58.550
指代就是文本框

49:58.550 --> 50:00.550
我们打印一下就知道了

50:00.550 --> 50:01.550
好 这边

50:01.550 --> 50:03.550
我们按一下ESC

50:03.550 --> 50:04.550
你看

50:04.550 --> 50:05.550
是不是这个文本框

50:05.550 --> 50:06.550
然后在这里

50:06.550 --> 50:07.550
按一下ESC

50:07.550 --> 50:08.550
它打印的Z

50:08.550 --> 50:09.550
是不是这个文本框

50:09.550 --> 50:10.550
对吧

50:10.550 --> 50:12.550
Z的指向就不一样

50:12.550 --> 50:13.550
那么这里的Z

50:13.550 --> 50:14.550
我就找了这个文本框

50:14.550 --> 50:15.550
Z就是个动物元素

50:15.550 --> 50:16.550
把它的Value组设为

50:16.550 --> 50:17.550
空置捕捉就完成了

50:17.550 --> 50:18.550
这就清空了

50:18.550 --> 50:20.550
带吧 很好写

50:20.550 --> 50:21.550
好 看一下

50:21.550 --> 50:24.550
这边我们写一个ESC

50:24.550 --> 50:26.550
写一个ESC

50:26.550 --> 50:27.550
写一个ESC

50:28.550 --> 50:29.550
ESC

50:31.550 --> 50:32.550
ESC

50:32.550 --> 50:33.550
对对

50:33.550 --> 50:34.550
好 就完成了

50:34.550 --> 50:35.550
这是第一道题

50:37.550 --> 50:39.550
好 接下来我们看第二题

50:39.550 --> 50:41.550
第二题运行出来

50:42.550 --> 50:43.550
第二题是要做一个

50:43.550 --> 50:45.550
自动的图片切换

50:46.550 --> 50:48.550
把它运行好

50:48.550 --> 50:50.550
其他的关闭

50:50.550 --> 50:51.550
看一下

50:52.550 --> 50:53.550
这里有个图片文件夹

50:53.550 --> 50:56.550
一 二 三 四

50:56.550 --> 50:57.550
四张图片

50:58.550 --> 50:59.550
是不是跟那个英雄

50:59.550 --> 51:01.550
一样的切换图片

51:02.550 --> 51:04.550
ESC需要里来写

51:04.550 --> 51:05.550
页面上

51:06.550 --> 51:08.550
就是一个非常简单的DIV

51:08.550 --> 51:10.550
里边包含了一张图片

51:10.550 --> 51:12.550
好 ESC里边

51:12.550 --> 51:14.550
每隔一秒钟

51:14.550 --> 51:16.550
自动的切换图片

51:16.550 --> 51:17.550
然后我们程序里边

51:17.550 --> 51:19.550
还有个功能就是

51:19.550 --> 51:20.550
鼠标移动到

51:20.550 --> 51:21.550
这个元素上的时候

51:21.550 --> 51:22.550
就不能自动切换了

51:22.550 --> 51:24.550
然后停止切换

51:24.550 --> 51:26.550
移出让又开始切换

51:26.550 --> 51:27.550
是不是我们程序里边

51:27.550 --> 51:29.550
有一个功能

51:29.550 --> 51:31.550
就是开始自动切换

51:31.550 --> 51:33.550
和停止自动切换

51:33.550 --> 51:35.550
所以有这么一个功能存在

51:35.550 --> 51:37.550
因此既然有功能存在

51:37.550 --> 51:38.550
袁老师的习惯了

51:38.550 --> 51:40.550
先把它写成函数

51:40.550 --> 51:42.550
我先不注册时间

51:42.550 --> 51:43.550
我先写函数

51:43.550 --> 51:44.550
这是袁老师的习惯

51:44.550 --> 51:46.550
当然有些人的习惯是

51:46.550 --> 51:47.550
我直接写事件

51:47.550 --> 51:49.550
然后在事件里边写函数

51:50.550 --> 51:52.550
就事件不是本身有个函数

51:52.550 --> 51:54.550
事件函数里边写

51:54.550 --> 51:56.550
每个人的开发习惯不一样

51:56.550 --> 51:57.550
都行

51:57.550 --> 51:59.550
袁老师都能写

52:00.550 --> 52:02.550
开始切换和停止切换

52:02.550 --> 52:04.550
那我们先把这两个函数写好

52:04.550 --> 52:06.550
这个表示开始切换

52:06.550 --> 52:07.550
开始切换

52:07.550 --> 52:09.550
这个表示停止切换

52:11.550 --> 52:12.550
那怎么叫开始切换呢

52:12.550 --> 52:14.550
是不是每隔一秒钟

52:14.550 --> 52:15.550
自动切换图片

52:15.550 --> 52:16.550
也就是每隔一秒钟

52:16.550 --> 52:18.550
我要改变这个图片的

52:18.550 --> 52:19.550
SRC路径

52:19.550 --> 52:20.550
把一改成二

52:20.550 --> 52:21.550
二改成三

52:21.550 --> 52:22.550
对吧

52:22.550 --> 52:23.550
所以说我们这里是不是

52:23.550 --> 52:24.550
之前写过了

52:24.550 --> 52:25.550
我们就要定个边量

52:25.550 --> 52:26.550
然后里边表示

52:26.550 --> 52:27.550
curl index

52:27.550 --> 52:29.550
当前的下标

52:29.550 --> 52:32.550
当前的下标一开始是一

52:32.550 --> 52:33.550
对吧

52:34.550 --> 52:36.550
然后我还要拿到图片

52:37.550 --> 52:38.550
document

52:38.550 --> 52:39.550
curl is negative

52:40.550 --> 52:41.550
里面就一个container

52:41.550 --> 52:43.550
这个内样是下边的image

52:43.550 --> 52:44.550
当然我们网页上

52:44.550 --> 52:45.550
只有一张图片

52:45.550 --> 52:46.550
你也可以直接写个image

52:46.550 --> 52:47.550
都行

52:47.550 --> 52:49.550
当然我们最好了

52:49.550 --> 52:50.550
特别是一开始开发

52:50.550 --> 52:51.550
最好先把它打印一下

52:51.550 --> 52:53.550
看它有没有获取到

52:54.550 --> 52:55.550
远的搞了半天

52:55.550 --> 52:56.550
元素都没有获取到

52:57.550 --> 52:58.550
现在是不是获取到了

52:58.550 --> 52:59.550
没问题

53:00.550 --> 53:01.550
写一点就打印一下

53:01.550 --> 53:03.550
观察一下结果

53:03.550 --> 53:04.550
这样子也可以帮助

53:04.550 --> 53:05.550
同学们理解整个程序

53:05.550 --> 53:06.550
每一步在干啥

53:07.550 --> 53:09.550
我们先写这个函数

53:09.550 --> 53:10.550
这个函数要做什么

53:10.550 --> 53:11.550
就是set interval

53:12.550 --> 53:14.550
每隔一段时间

53:14.550 --> 53:15.550
去运行一个函数

53:15.550 --> 53:16.550
每隔多少时间

53:16.550 --> 53:17.550
每隔一秒钟

53:17.550 --> 53:18.550
去运行一个函数

53:18.550 --> 53:19.550
运行什么

53:19.550 --> 53:20.550
这个函数要做什么呢

53:20.550 --> 53:22.550
是不是把它加1

53:23.550 --> 53:24.550
curl index加加

53:25.550 --> 53:26.550
然后了判断一下

53:26.550 --> 53:27.550
因为它只一共只有四张

53:27.550 --> 53:29.550
如果加了之后等于5

53:29.550 --> 53:30.550
是不是超过了4

53:30.550 --> 53:31.550
超过了4你又回到1

53:32.550 --> 53:33.550
就要做这么一件事

53:33.550 --> 53:34.550
那这样子

53:34.550 --> 53:35.550
我们这个curl index

53:35.550 --> 53:36.550
是不断的变化

53:37.550 --> 53:39.550
我们输出一下curl index

53:40.550 --> 53:41.550
好看一下

53:41.550 --> 53:42.550
我们是调动这个start

53:42.550 --> 53:43.550
开始

53:44.550 --> 53:45.550
2

53:45.550 --> 53:46.550
3

53:46.550 --> 53:47.550
4

53:47.550 --> 53:48.550
1

53:48.550 --> 53:49.550
3

53:49.550 --> 53:50.550
4

53:50.550 --> 53:52.550
是不是就这样子不断的变化

53:52.550 --> 53:54.550
当然我们也可以利用

53:54.550 --> 53:56.550
之前有讲过一个取巧的办法

53:56.550 --> 53:58.550
就是curl index

53:58.550 --> 54:00.550
可以让它等于curl index

54:00.550 --> 54:01.550
对不对

54:01.550 --> 54:02.550
curl index

54:03.550 --> 54:05.550
除以4的余数加1

54:05.550 --> 54:06.550
所以也可以

54:06.550 --> 54:07.550
对吧

54:07.550 --> 54:08.550
这样子的也行

54:10.550 --> 54:11.550
也是2

54:11.550 --> 54:12.550
3

54:12.550 --> 54:13.550
4

54:13.550 --> 54:14.550
1

54:14.550 --> 54:15.550
2

54:15.550 --> 54:16.550
3

54:16.550 --> 54:17.550
4

54:17.550 --> 54:18.550
现在要做的是

54:18.550 --> 54:19.550
无分就是

54:19.550 --> 54:21.550
给image的src重新复制

54:21.550 --> 54:22.550
复制为怎么呢

54:22.550 --> 54:24.550
复制为这个路径

54:24.550 --> 54:26.550
把这个数字那个地方

54:26.550 --> 54:27.550
t换成curl index就行了

54:27.550 --> 54:28.550
对吧

54:28.550 --> 54:29.550
把这个数字这个位置

54:29.550 --> 54:31.550
t换成curl index

54:36.720 --> 54:37.720
不就完了吗

54:37.720 --> 54:38.720
那我现在调动这个函数

54:38.720 --> 54:39.720
start

54:39.720 --> 54:40.720
开始

54:41.720 --> 54:42.720
是不停的切换

54:42.720 --> 54:43.720
那你看一下元素

54:43.720 --> 54:44.720
元素里面image

54:44.720 --> 54:46.720
你看是不是不断的在变化

54:46.720 --> 54:47.720
这个src

54:48.720 --> 54:49.720
对吧

54:50.720 --> 54:51.720
没问题

54:53.720 --> 54:54.720
好

54:54.720 --> 54:56.720
那是现在有一个隐患

54:56.720 --> 54:57.720
就是

54:57.720 --> 54:58.720
如果说我不停的

54:58.720 --> 54:59.720
因为我写函数

54:59.720 --> 55:01.720
就一定要把这个函数写好

55:01.720 --> 55:02.720
不至于出问题

55:02.720 --> 55:04.720
如果说我不停的调动

55:04.720 --> 55:05.720
start

55:05.720 --> 55:06.720
它会切换得越来越快

55:06.720 --> 55:07.720
越来越快

55:07.720 --> 55:09.720
你看不停的在变化

55:09.720 --> 55:10.720
越来越快

55:10.720 --> 55:11.720
那为什么呢

55:11.720 --> 55:13.720
是因为开了很多的

55:13.720 --> 55:14.720
计时期在里边

55:14.720 --> 55:16.720
它就开了很多的计时期

55:16.720 --> 55:17.720
每调用一次是不是开一个计时期

55:17.720 --> 55:18.720
那这个怎么解决

55:20.720 --> 55:21.720
有印象吗

55:21.720 --> 55:22.720
怎么解决

55:22.720 --> 55:24.720
是不是我要定一个tamarid

55:24.720 --> 55:25.720
在这

55:25.720 --> 55:26.720
一开始没有纸

55:26.720 --> 55:27.720
或者是给它复制为大

55:27.720 --> 55:28.720
都行

55:28.720 --> 55:29.720
然后start的时候

55:29.720 --> 55:30.720
我先判断一下

55:30.720 --> 55:31.720
这个玩意有没有纸

55:31.720 --> 55:33.720
有纸的话我就结束了

55:33.720 --> 55:34.720
表示正在切换中

55:34.720 --> 55:35.720
对吧

55:35.720 --> 55:36.720
正在切换中

55:36.720 --> 55:38.720
已经有计时期了

55:38.720 --> 55:39.720
你不要再开计时期了

55:39.720 --> 55:41.720
只有你没有计时期的时候

55:41.720 --> 55:43.720
我在给你复制

55:43.720 --> 55:44.720
再开启一个计时期

55:44.720 --> 55:46.720
并把计时期的id

55:46.720 --> 55:47.720
编号

55:47.720 --> 55:48.720
放到这个变量里边

55:48.720 --> 55:49.720
这样子的

55:49.720 --> 55:50.720
我就避免了

55:50.720 --> 55:52.720
你不断的调用start

55:52.720 --> 55:54.720
现在开始切换

55:54.720 --> 55:56.720
你再调用

55:56.720 --> 55:58.720
第二次调用的时候

55:58.720 --> 55:59.720
由于它已经有纸了

55:59.720 --> 56:00.720
所以说它就直接停止

56:00.720 --> 56:01.720
它就直接结束了

56:01.720 --> 56:03.720
它就没有做任何事情

56:03.720 --> 56:05.720
这种切换一定要学会

56:05.720 --> 56:07.720
经常会使用

56:07.720 --> 56:09.720
停止切换的话

56:09.720 --> 56:10.720
就非常简单了

56:10.720 --> 56:12.720
我们就用clear interval

56:12.720 --> 56:13.720
把这个tamarid

56:13.720 --> 56:14.720
喘进去

56:14.720 --> 56:16.720
停止这个计时期

56:16.720 --> 56:17.720
但是不要忘记

56:18.720 --> 56:19.720
不然的话

56:19.720 --> 56:22.480
它下一次调用start

56:22.480 --> 56:23.480
这个计时期id

56:23.480 --> 56:24.480
还是有纸的

56:24.480 --> 56:25.480
虽然它已经停止了

56:25.480 --> 56:27.480
但是它的变量还是有纸

56:27.480 --> 56:28.480
好

56:28.480 --> 56:29.480
咱们再试一下

56:29.480 --> 56:30.480
start

56:30.480 --> 56:31.480
开始

56:32.480 --> 56:33.480
切换

56:33.480 --> 56:34.480
start

56:34.480 --> 56:35.480
停止

56:36.480 --> 56:37.480
再来切换

56:39.480 --> 56:40.480
再停止

56:41.480 --> 56:42.480
所以两个函数有写好了

56:43.480 --> 56:44.480
好

56:44.480 --> 56:45.480
那接下来的事情就变得

56:45.480 --> 56:46.480
一切都变得非常简单了

56:46.480 --> 56:47.480
你只要有了函数之后

56:47.480 --> 56:48.480
函数是功能

56:48.480 --> 56:49.480
功能已经起了

56:49.480 --> 56:50.480
对吧

56:50.480 --> 56:51.480
就好别说我们

56:51.480 --> 56:52.480
功能模块已经写了

56:52.480 --> 56:53.480
两个功能模块了

56:53.480 --> 56:55.480
那剩下的什么事件

56:55.480 --> 56:56.480
这些东西就太简单了

56:57.480 --> 56:58.480
第一个需求

56:58.480 --> 57:00.480
每个一秒自动切换图片

57:00.480 --> 57:01.480
一开始的时候

57:01.480 --> 57:02.480
是不是就开始自动切换

57:02.480 --> 57:03.480
一开始的时候

57:03.480 --> 57:05.480
调用一下这个函数就完事了

57:05.480 --> 57:06.480
它就自动切换了

57:06.480 --> 57:07.480
因为这个函数

57:07.480 --> 57:08.480
就是在做自动切换的

57:08.480 --> 57:09.480
好

57:09.480 --> 57:10.480
下面这个需求

57:10.480 --> 57:12.480
当鼠标移动到元素上的时候

57:12.480 --> 57:13.480
是不是给图片

57:13.480 --> 57:15.480
或者给整个DIV也行

57:15.480 --> 57:16.480
都行

57:16.480 --> 57:17.480
给图片注册一个

57:17.480 --> 57:20.480
事件add event listener

57:20.480 --> 57:23.480
叫做mouse enter

57:24.480 --> 57:25.480
当鼠标移入的时候

57:25.480 --> 57:26.480
我干嘛呀

57:26.480 --> 57:28.480
我要停止切换

57:30.480 --> 57:31.480
鼠标移入

57:33.480 --> 57:34.480
没取消

57:34.480 --> 57:35.480
它是不是停止切换了

57:37.480 --> 57:38.480
鼠标移出

57:40.480 --> 57:41.480
mouse need

57:43.480 --> 57:45.480
又开始切换

57:45.480 --> 57:46.480
对吧

57:46.480 --> 57:47.480
我们来试一下

57:47.480 --> 57:48.480
鼠标移入

57:48.480 --> 57:49.480
停止切换

57:49.480 --> 57:50.480
鼠标移出

57:50.480 --> 57:52.480
又继续切换

57:52.480 --> 57:53.480
鼠标移入

57:53.480 --> 57:54.480
停止切换

57:54.480 --> 57:55.480
鼠标移出

57:55.480 --> 57:56.480
继续切换

57:57.480 --> 57:58.480
对吧

57:58.480 --> 57:59.480
就完事了

57:59.480 --> 58:00.480
这就是第二题

58:01.480 --> 58:02.480
第三题

58:02.480 --> 58:11.490
第三题是有一个

58:11.490 --> 58:12.490
页面

58:12.490 --> 58:13.490
这个页面能引用一个CSS

58:13.490 --> 58:15.490
CSS我们完全不用去看

58:15.490 --> 58:16.490
这个CSS没有什么复杂的

58:16.490 --> 58:18.490
无非就是多了一个CSS3的英勇

58:18.490 --> 58:19.490
英勇我们很快

58:19.490 --> 58:21.490
后边学习CSS3就会讲

58:22.490 --> 58:23.490
无说也不用去看CSS

58:23.490 --> 58:25.490
因为我们给我们介绍没什么关系

58:25.490 --> 58:27.490
介绍的只会操作ATML

58:28.490 --> 58:31.490
那么这是有一个典型的

58:32.490 --> 58:33.490
叫做

58:33.490 --> 58:35.490
代办事项的一个小程序

58:36.490 --> 58:38.490
这里给大家推荐一下

58:38.490 --> 58:39.490
如果同学们用的是Mac

58:39.490 --> 58:40.490
Mac电脑的话

58:40.490 --> 58:42.490
给大家推荐一个应用叫Synth

58:42.490 --> 58:43.490
非常的方便

58:43.490 --> 58:44.490
用者

58:44.490 --> 58:45.490
非常舒服

58:45.490 --> 58:47.490
它可以记录你每一天要做的事情

58:47.490 --> 58:49.490
以及你的将来的一些计划

58:50.490 --> 58:52.490
比方这里就是一个非常小的程序

58:52.490 --> 58:53.490
在这个文笨框里边

58:53.490 --> 58:55.490
你可以写上一些文字

58:55.490 --> 58:56.490
一按回车

58:56.490 --> 58:57.490
它就把你的代办事项

58:57.490 --> 58:59.490
加入到下边的列表了

58:59.490 --> 59:00.490
代办事项

59:00.490 --> 59:01.490
你如果说完成了

59:01.490 --> 59:02.490
你可以点删除

59:02.490 --> 59:03.490
它就把这一项删除了

59:03.490 --> 59:05.490
当然我目前只有一个静态页面

59:05.490 --> 59:07.490
只是把央视给你做出来

59:07.490 --> 59:09.490
我们看一下这个ATML解构

59:09.490 --> 59:10.490
这就是个标题Synth

59:11.490 --> 59:12.490
然后这个玩意

59:12.490 --> 59:14.490
是一个文笨框

59:14.490 --> 59:16.490
你目前需要做什么

59:16.490 --> 59:17.490
一个提示

59:17.490 --> 59:18.490
一个文笨框

59:18.490 --> 59:20.490
然后下边的是一个UIL列表

59:20.490 --> 59:21.490
每一个Li

59:21.490 --> 59:23.490
那就是目前的代办事项

59:23.490 --> 59:25.490
后面有个按钮删除

59:25.490 --> 59:26.490
完了

59:26.490 --> 59:27.490
就这么简单

59:27.490 --> 59:28.490
这个ATML里面

59:28.490 --> 59:29.490
首先给大家说一下

59:29.490 --> 59:31.490
从逻辑上来讲的话

59:31.490 --> 59:32.490
这里边是没有东西的

59:32.490 --> 59:34.490
这个UIL是没有东西的

59:34.490 --> 59:35.490
为什么

59:35.490 --> 59:37.490
因为一开始是没有代办事项的

59:37.490 --> 59:39.490
所以这个UIL是空的

59:39.490 --> 59:41.490
这里写了一个代办事项

59:41.490 --> 59:42.490
一按回车

59:42.490 --> 59:44.490
它就会加一个Li进去

59:44.490 --> 59:45.490
懂了意思吧

59:45.490 --> 59:46.490
它是这么一个逻辑

59:46.490 --> 59:48.490
Li里面一个Spian表示

59:48.490 --> 59:55.720
Li里面一个Spian表示的是文字内容

59:55.720 --> 59:57.720
然后Barton表示一个按钮

59:57.720 --> 59:59.720
点击删除按钮

59:59.720 --> 01:00:01.720
所以一开始是没有的

01:00:01.720 --> 01:00:02.720
都需要用介石来控制

01:00:02.720 --> 01:00:04.720
我这里只是显示出来的原因

01:00:04.720 --> 01:00:05.720
主要是给你们看一下

01:00:05.720 --> 01:00:07.720
静态页面长什么样子

01:00:07.720 --> 01:00:09.720
它的结构是什么样子

01:00:09.720 --> 01:00:11.720
以后慢慢就会理解了

01:00:11.720 --> 01:00:14.720
我们写这个页面的话

01:00:14.720 --> 01:00:15.720
写ATML和CSS

01:00:15.720 --> 01:00:17.720
其实也就是做个样子出来

01:00:18.720 --> 01:00:21.720
真正的功能控制权在介石里面

01:00:23.720 --> 01:00:24.720
接下来我们来写介石

01:00:24.720 --> 01:00:26.720
介石已经引用进来了

01:00:26.720 --> 01:00:27.720
这个是介石

01:00:27.720 --> 01:00:29.720
第一个问题

01:00:29.720 --> 01:00:32.720
输入代办事项按下回车之后

01:00:32.720 --> 01:00:35.720
添加事项到列表

01:00:35.720 --> 01:00:37.720
那么现在前面两道题

01:00:37.720 --> 01:00:38.720
我都是先写函数

01:00:38.720 --> 01:00:39.720
我给它演示一下

01:00:39.720 --> 01:00:40.720
先写

01:00:40.720 --> 01:00:41.720
从事件开始写

01:00:41.720 --> 01:00:44.720
也可以写都行

01:00:44.720 --> 01:00:45.720
那么现在比方说

01:00:45.720 --> 01:00:47.720
我们现在要输入代办事项

01:00:47.720 --> 01:00:49.720
就在文本框里面输入

01:00:49.720 --> 01:00:51.720
然后按一下回车

01:00:51.720 --> 01:00:53.720
我要做一些事

01:00:53.720 --> 01:00:56.720
把这句话理解清楚

01:00:56.720 --> 01:00:57.720
我们从一个需求里面

01:00:57.720 --> 01:00:59.720
要提取出关键信息

01:00:59.720 --> 01:01:02.720
就是我要监听谁

01:01:02.720 --> 01:01:03.720
我要监听谁

01:01:03.720 --> 01:01:04.720
监听文本框

01:01:04.720 --> 01:01:07.720
文本框的什么事件

01:01:07.720 --> 01:01:08.720
什么事件

01:01:08.720 --> 01:01:10.720
键盘按一下的时间

01:01:10.720 --> 01:01:11.720
在文本框里面

01:01:11.720 --> 01:01:13.720
按一个键盘回车

01:01:13.720 --> 01:01:15.720
是不是我要做一些事

01:01:15.720 --> 01:01:16.720
具体做什么事

01:01:16.720 --> 01:01:17.720
一会再说

01:01:17.720 --> 01:01:19.720
但是我们监听的目标要搞定

01:01:19.720 --> 01:01:20.720
监听的是谁呢

01:01:20.720 --> 01:01:21.720
监听的是文本框

01:01:21.720 --> 01:01:24.720
TST document

01:01:24.720 --> 01:01:27.720
query is a negative

01:01:27.720 --> 01:01:33.290
那样是为TST

01:01:33.290 --> 01:01:34.290
我要监听文本框

01:01:34.290 --> 01:01:35.290
打印一下

01:01:35.290 --> 01:01:36.290
TST

01:01:36.290 --> 01:01:40.010
看一下

01:01:40.010 --> 01:01:42.010
是不是就是文本框

01:01:42.010 --> 01:01:43.010
我要监听它

01:01:43.010 --> 01:01:45.010
好 监听它的什么呢

01:01:45.010 --> 01:01:46.010
ADD event listener

01:01:46.010 --> 01:01:47.010
监听它什么呢

01:01:48.010 --> 01:01:50.010
键盘按一下的时间

01:01:51.010 --> 01:01:52.010
对吧

01:01:52.010 --> 01:01:53.010
键盘按一下的时候

01:01:53.010 --> 01:01:54.010
我要做一些事

01:01:55.010 --> 01:01:57.010
那么键盘按一下的时候

01:01:57.010 --> 01:01:58.010
我是不是可以打印出

01:01:58.010 --> 01:01:59.010
按下的是哪一个键

01:01:59.010 --> 01:02:00.010
对吧

01:02:00.010 --> 01:02:03.090
1.T

01:02:03.090 --> 01:02:04.090
你看

01:02:04.090 --> 01:02:06.090
按下的回车

01:02:06.090 --> 01:02:07.090
ESC

01:02:07.090 --> 01:02:08.090
对吧

01:02:08.090 --> 01:02:09.090
CF车

01:02:09.090 --> 01:02:10.090
对不对

01:02:10.090 --> 01:02:12.090
这些都是键盘的事件

01:02:12.090 --> 01:02:13.090
好

01:02:14.090 --> 01:02:15.090
我要监听

01:02:15.090 --> 01:02:16.090
干嘛呢

01:02:16.090 --> 01:02:18.090
当它按下回车的时候

01:02:18.090 --> 01:02:19.090
是不是我要判断

01:02:19.090 --> 01:02:20.090
如果说你的键盘

01:02:20.090 --> 01:02:21.090
按下T等于什么

01:02:21.090 --> 01:02:22.090
Enter

01:02:22.090 --> 01:02:23.090
表示回车

01:02:23.090 --> 01:02:25.090
一按下回车的时候

01:02:25.090 --> 01:02:26.090
我要干嘛

01:02:26.090 --> 01:02:28.090
我要添加事项

01:02:28.090 --> 01:02:32.300
到列表

01:02:32.300 --> 01:02:33.300
好 比方说

01:02:33.300 --> 01:02:34.300
这里随便输入其他那种

01:02:34.300 --> 01:02:35.300
都无所谓

01:02:35.300 --> 01:02:36.300
随便输入都无所谓

01:02:36.300 --> 01:02:37.300
一按下回车

01:02:37.300 --> 01:02:38.300
是不是要运行到

01:02:38.300 --> 01:02:40.300
这个判断里边的单码

01:02:40.300 --> 01:02:42.300
运行到这儿

01:02:42.300 --> 01:02:43.300
好 那么这里

01:02:43.300 --> 01:02:44.300
现在我们就要

01:02:44.300 --> 01:02:45.300
开始考虑这儿了

01:02:45.300 --> 01:02:48.300
如何把事项添加到列表

01:02:48.300 --> 01:02:50.300
什么叫做把事项添加到列表

01:02:50.300 --> 01:02:53.300
也要把它表述成程序的语言

01:02:53.300 --> 01:02:55.300
什么叫把事项添加到列表

01:02:55.300 --> 01:02:58.300
就是说我要生成

01:02:58.300 --> 01:03:01.300
换句话说我要生成一个Li

01:03:01.300 --> 01:03:05.300
然后Li里边有一个span

01:03:05.300 --> 01:03:07.300
有span还有一个button

01:03:07.300 --> 01:03:08.300
删除 对吧

01:03:08.300 --> 01:03:10.300
要生成这么一个Li

01:03:10.300 --> 01:03:13.670
是不是这个意思

01:03:13.670 --> 01:03:15.670
好 来吧

01:03:15.670 --> 01:03:18.980
怎么来生成一个Li

01:03:18.980 --> 01:03:20.980
创建元素

01:03:20.980 --> 01:03:22.980
document

01:03:22.980 --> 01:03:24.980
creaseElement

01:03:24.980 --> 01:03:26.980
Li 创建元素

01:03:26.980 --> 01:03:28.980
元素里边是不是

01:03:28.980 --> 01:03:29.980
又要创建两个元素

01:03:29.980 --> 01:03:31.980
一个是span

01:03:31.980 --> 01:03:32.980
document

01:03:32.980 --> 01:03:33.980
span

01:03:33.980 --> 01:03:35.980
还有个什么button

01:03:35.980 --> 01:03:36.980
创建三个元素

01:03:36.980 --> 01:03:37.980
Li

01:03:37.980 --> 01:03:38.980
span

01:03:38.980 --> 01:03:39.980
button

01:03:39.980 --> 01:03:41.980
那么我要把span

01:03:41.980 --> 01:03:42.980
span加入到Li里边

01:03:42.980 --> 01:03:44.980
要把button加入到Li里边

01:03:44.980 --> 01:03:45.980
要怎么来加入

01:03:45.980 --> 01:03:46.980
元素结构的变化

01:03:46.980 --> 01:03:48.980
Append Child

01:03:48.980 --> 01:03:49.980
span

01:03:49.980 --> 01:03:53.980
然后Li Append Child

01:03:53.980 --> 01:03:54.980
button

01:03:54.980 --> 01:03:55.980
说到加进去

01:03:55.980 --> 01:03:57.980
我们打印一下Li

01:03:57.980 --> 01:04:02.150
回车

01:04:02.150 --> 01:04:04.150
生成一个Li

01:04:04.150 --> 01:04:05.150
它里边有两个span

01:04:05.150 --> 01:04:06.150
一个button

01:04:06.150 --> 01:04:07.150
那么目前还有什么问题

01:04:07.150 --> 01:04:09.150
span里边是没有文字的

01:04:09.150 --> 01:04:11.150
button里边是没有文字的

01:04:11.150 --> 01:04:12.150
我们首先搞定

01:04:12.150 --> 01:04:13.150
span里边的文字

01:04:13.150 --> 01:04:15.150
span里边是有文字的

01:04:15.150 --> 01:04:16.150
那个文字是啥呢

01:04:16.150 --> 01:04:17.150
文字是不是

01:04:17.150 --> 01:04:19.150
就是目前文闷框的字

01:04:19.150 --> 01:04:20.150
是不是就是

01:04:20.150 --> 01:04:21.150
目前文闷框的字

01:04:21.150 --> 01:04:22.150
那我怎么来过去

01:04:22.150 --> 01:04:23.150
文闷框的字呢

01:04:23.150 --> 01:04:24.150
是不是就是z

01:04:24.150 --> 01:04:26.150
你目前在这个函数里边

01:04:26.150 --> 01:04:27.150
这个函数

01:04:27.150 --> 01:04:28.150
不就是处理函数吗

01:04:28.150 --> 01:04:30.150
处理函数里边的z是指向

01:04:30.150 --> 01:04:33.150
就是出发世界的元素的

01:04:33.150 --> 01:04:36.150
那么就是z是第二value

01:04:36.150 --> 01:04:38.150
这样子span里边是有字的

01:04:38.150 --> 01:04:39.150
好 再看

01:04:39.150 --> 01:04:44.700
你看span里边是有字的

01:04:44.700 --> 01:04:45.700
button里边有没有字呢

01:04:45.700 --> 01:04:46.700
button里边

01:04:46.700 --> 01:04:47.700
我们可以说是

01:04:47.700 --> 01:04:48.700
直接一个固定的字

01:04:48.700 --> 01:04:49.700
删

01:04:49.700 --> 01:04:54.490
这样子就把li做好了

01:04:54.490 --> 01:04:56.490
那么我做好li之后

01:04:56.490 --> 01:04:57.490
我还要把li加到哪里去

01:04:57.490 --> 01:04:59.490
是不是加到这个ul里边去

01:04:59.490 --> 01:05:01.490
好 我们这里获取到ul

01:05:01.490 --> 01:05:04.860
ul document

01:05:05.860 --> 01:05:10.330
好 这里呢

01:05:10.330 --> 01:05:13.330
就是我用ul append child

01:05:13.330 --> 01:05:15.330
加到把li加进去

01:05:15.330 --> 01:05:20.690
好 现在我们来试一下

01:05:20.690 --> 01:05:22.690
看能不能加进去

01:05:22.690 --> 01:05:24.690
回车 说加进去了

01:05:24.690 --> 01:05:25.690
回车 说加进去了

01:05:25.690 --> 01:05:27.690
这样就加进去了

01:05:27.690 --> 01:05:29.690
那如果说我加进去之后

01:05:29.690 --> 01:05:31.690
还要把文本框清空呢

01:05:31.690 --> 01:05:32.690
也很好办 对吧

01:05:32.690 --> 01:05:34.690
文本框清空

01:05:34.690 --> 01:05:35.690
也好办

01:05:35.690 --> 01:05:36.690
怎么弄呢

01:05:36.690 --> 01:05:38.690
是不是把li

01:05:39.690 --> 01:05:41.690
是不是把z的value

01:05:41.690 --> 01:05:43.690
设为空置不错就完了

01:05:45.690 --> 01:05:47.690
好 回车

01:05:47.690 --> 01:05:48.690
回车

01:05:48.690 --> 01:05:50.690
那如果说你啥也没写就回车了

01:05:50.690 --> 01:05:52.690
他就给你加了一个空的li

01:05:52.690 --> 01:05:53.690
就是span里边空的 对吧

01:05:53.690 --> 01:05:55.690
span里边啥的内容都没有

01:05:55.690 --> 01:05:56.690
那这种情况

01:05:56.690 --> 01:05:58.690
如果说你要避免的话

01:05:58.690 --> 01:05:59.690
你在前边

01:05:59.690 --> 01:06:01.690
你在前边判断一下

01:06:01.690 --> 01:06:02.690
当你按下回车的时候

01:06:02.690 --> 01:06:03.690
我首先判断一下

01:06:03.690 --> 01:06:05.690
我的文本框里的内容

01:06:05.690 --> 01:06:07.690
是不是有值的

01:06:07.690 --> 01:06:08.690
如果说你还要去掉

01:06:08.690 --> 01:06:09.690
所谓空格的话

01:06:09.690 --> 01:06:10.690
你就写个q

01:06:10.690 --> 01:06:12.690
这都行啊 都行

01:06:12.690 --> 01:06:14.690
就看有没有值

01:06:14.690 --> 01:06:16.690
如果说你没有值的话

01:06:16.690 --> 01:06:18.690
表示你文本框里边啥都没写

01:06:18.690 --> 01:06:20.690
就结束

01:06:20.690 --> 01:06:21.690
那如果说你这里一回车

01:06:21.690 --> 01:06:22.690
他就没有做任何事情

01:06:22.690 --> 01:06:24.690
因为你结束了

01:06:24.690 --> 01:06:27.690
这些事情都可以做的

01:06:27.690 --> 01:06:28.690
好 这就做完了

01:06:28.690 --> 01:06:29.690
第一个需求就做完了

01:06:29.690 --> 01:06:30.690
对吧

01:06:30.690 --> 01:06:33.690
写个文本回车就夹进去

01:06:33.690 --> 01:06:35.690
好 那么接下来是点三除

01:06:35.690 --> 01:06:37.690
当我们点三除的时候

01:06:37.690 --> 01:06:40.690
要三除对应的代办事项

01:06:40.690 --> 01:06:42.690
那首先又问题又来了

01:06:42.690 --> 01:06:45.690
第一个问题就是我要监听谁

01:06:45.690 --> 01:06:47.690
监听文本框吗

01:06:47.690 --> 01:06:48.690
监听谁啊

01:06:48.690 --> 01:06:50.690
监听这个按钮

01:06:50.690 --> 01:06:52.690
按钮在哪 是不是这个

01:06:52.690 --> 01:06:54.690
是不是我声称出来了

01:06:54.690 --> 01:06:56.690
声称出来过后是不是要监听他

01:06:56.690 --> 01:06:58.690
因此你要在这里接着写

01:06:58.690 --> 01:07:00.690
我声称了按钮之后

01:07:00.690 --> 01:07:02.690
我要监听他被点击

01:07:02.690 --> 01:07:03.690
ADD一分成零

01:07:03.690 --> 01:07:04.690
可以

01:07:04.690 --> 01:07:09.240
对吧

01:07:09.240 --> 01:07:11.240
因为你只有在这儿

01:07:11.240 --> 01:07:13.240
才能拿到这个按钮对象吗

01:07:13.240 --> 01:07:14.240
监听

01:07:14.240 --> 01:07:16.240
按钮

01:07:16.240 --> 01:07:17.240
的

01:07:17.240 --> 01:07:21.260
点击事件

01:07:21.260 --> 01:07:23.260
当这个按钮被点击的时候

01:07:23.260 --> 01:07:24.260
我要干嘛

01:07:24.260 --> 01:07:26.260
是不是我要把整个li都

01:07:26.260 --> 01:07:28.260
删掉

01:07:28.260 --> 01:07:30.260
那我怎么能拿到这个li不就在这儿吗

01:07:30.260 --> 01:07:32.260
你直接把liremove

01:07:32.260 --> 01:07:34.260
删掉就完事了

01:07:34.260 --> 01:07:35.260
做完了

01:07:35.260 --> 01:07:37.260
我们来试一下

01:07:37.260 --> 01:07:41.460
点击三除就删掉了

01:07:41.460 --> 01:07:43.460
删掉了

01:07:43.460 --> 01:07:45.460
这道题是非常具有代表性的

01:07:45.460 --> 01:07:48.460
我们动态的创建的一些元素

01:07:48.460 --> 01:07:50.460
然后创建的元素

01:07:50.460 --> 01:07:52.460
它又有时间

01:07:52.460 --> 01:07:53.460
新创建的元素

01:07:53.460 --> 01:07:55.460
这个元素不是一面上一开始就有的

01:07:55.460 --> 01:07:56.460
它是新创建的

01:07:56.460 --> 01:07:58.460
创建过后来我要监听它

01:07:58.460 --> 01:08:00.460
你将来被点击的时候

01:08:00.460 --> 01:08:02.460
要运行这个函数

01:08:02.460 --> 01:08:03.460
对吧

01:08:03.460 --> 01:08:04.460
那你同学说

01:08:04.460 --> 01:08:07.460
原老师你不说你喜欢写函数吗

01:08:07.460 --> 01:08:09.460
那如果说按照你的习惯的话

01:08:09.460 --> 01:08:10.460
你这个东西会怎么写

01:08:10.460 --> 01:08:12.460
我会这样子写

01:08:12.460 --> 01:08:14.460
我会写这么一个函数

01:08:14.460 --> 01:08:16.460
叫做creaseli

01:08:16.460 --> 01:08:17.460
创建一个li

01:08:17.460 --> 01:08:19.460
我会写这么一个东西

01:08:19.460 --> 01:08:20.460
然后呢给我传一个参数

01:08:20.460 --> 01:08:22.460
就是内容

01:08:22.460 --> 01:08:24.460
创建一个li

01:08:24.460 --> 01:08:26.460
然后你把li的就这里面

01:08:26.460 --> 01:08:27.460
文字内容给我

01:08:27.460 --> 01:08:31.100
然后我就把这个代码

01:08:31.100 --> 01:08:34.730
写到这里面去

01:08:34.730 --> 01:08:37.730
把内容呢替换掉这

01:08:37.730 --> 01:08:38.730
替换掉这

01:08:38.730 --> 01:08:40.730
那么通过这个函数

01:08:40.730 --> 01:08:42.730
只要我一定要用这个函数

01:08:42.730 --> 01:08:43.730
我就可以创建一个li

01:08:43.730 --> 01:08:45.730
比方说ABC

01:08:45.730 --> 01:08:47.730
它就会帮我创建一个li

01:08:47.730 --> 01:08:50.730
然后再给它一个其他的

01:08:50.730 --> 01:08:51.730
一掉这个函数

01:08:51.730 --> 01:08:53.730
它就会创建一个li进去

01:08:53.730 --> 01:08:55.730
有了这个函数的帮忙之后

01:08:55.730 --> 01:08:56.730
都是我们程序里面的功能

01:08:56.730 --> 01:08:57.730
对吧

01:08:57.730 --> 01:08:58.730
有了这个函数的帮忙之后

01:08:58.730 --> 01:08:59.730
那么这边

01:08:59.730 --> 01:09:01.730
试建筑上来变得非常简单了

01:09:01.730 --> 01:09:04.730
我这里怎么玩呢

01:09:04.730 --> 01:09:05.730
就是

01:09:05.730 --> 01:09:06.730
调问这个函数

01:09:06.730 --> 01:09:08.730
creaseli

01:09:08.730 --> 01:09:09.730
内容是什么

01:09:09.730 --> 01:09:10.730
this is your value

01:09:10.730 --> 01:09:12.730
甚至我还可以给它一个

01:09:12.730 --> 01:09:14.730
去掉所谓空格

01:09:14.730 --> 01:09:15.730
那么这里判断的时候

01:09:15.730 --> 01:09:17.730
也可以给它去掉所谓空格

01:09:17.730 --> 01:09:18.730
这样子呢

01:09:18.730 --> 01:09:19.730
哪怕你全部给它写个空格

01:09:19.730 --> 01:09:22.730
这样子也是不行的

01:09:22.730 --> 01:09:23.730
哪怕你前面写了个空格

01:09:23.730 --> 01:09:24.730
后面又写了个空格

01:09:24.730 --> 01:09:25.730
一回车

01:09:25.730 --> 01:09:27.730
它是去掉所谓空格的

01:09:27.730 --> 01:09:28.730
都行

01:09:28.730 --> 01:09:29.730
好了

01:09:29.730 --> 01:09:30.730
就没了

01:09:30.730 --> 01:09:31.730
把这个三道题做完

01:09:31.730 --> 01:09:33.730
基本上我们这些学的东西

01:09:33.730 --> 01:09:35.730
就练得差不多了

01:09:35.730 --> 01:09:36.730
去完成

