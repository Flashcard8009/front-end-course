WEBVTT

00:01.010 --> 00:05.110
好 同学们 我们前边呢 已经做了一些知识回顾了

00:05.110 --> 00:09.210
这些知识回顾了 把我们前边学习的东西呢 给它走了一遍啊

00:09.210 --> 00:14.610
从这就开始 我们来陆续的介绍一些核心概念

00:14.610 --> 00:19.210
那为什么要介绍核心概念呢 因为我们学习介绍最主要的

00:19.210 --> 00:23.010
是为了在浏览器上去实现各种各样丰富的效果

00:23.010 --> 00:28.410
现在呢 具体我们做界面上的效果呢 还差两个东西

00:28.810 --> 00:33.120
一个呢 是那个核心概念

00:33.120 --> 00:36.320
就好 比如说现在还有两个BOSS 我们也需要过

00:36.320 --> 00:39.120
一个是核心概念 一个是标准库

00:39.120 --> 00:42.520
标准库是非常非常简单的啊 那个东西都不能算BOSS的

00:42.520 --> 00:45.320
都只能算小娄乐啊 那个非常非常简单

00:45.320 --> 00:48.720
有些同学呢 可能刚好搞反了 觉得标准库难啊

00:48.720 --> 00:51.920
这一块是非常简单的 到时候听袁老师讲就知道了

00:51.920 --> 00:54.720
有点难度的就是这个核心概念

00:55.720 --> 00:59.520
为什么我们写代码还要去知道这么多原理

00:59.520 --> 01:03.320
概念性质的东西呢 当然一方面是为了应对以后的面试题

01:03.320 --> 01:06.720
不过我们后边会专门有一个课啊 叫比面试题课

01:06.720 --> 01:08.720
那个是专门来应对面试题的

01:08.720 --> 01:12.720
只不过呢 这些核心概念它不仅仅是为了应对面试题

01:12.720 --> 01:15.720
它还会对我们写代码造成影响

01:15.720 --> 01:19.320
其实呢 你会发现啊 很多人学到核心概念的时候啊

01:19.320 --> 01:21.720
都会有这么一种感觉 就是说

01:21.720 --> 01:24.720
我这个概念学到的感觉好像也没有多少的用处

01:24.720 --> 01:28.720
没有什么大用 它不是说没有用 它没有什么大用

01:28.720 --> 01:32.720
这个感觉是正常的 核心概念这一块本身

01:32.720 --> 01:36.720
就是这种感觉 没有什么大用 那是为什么呢

01:36.720 --> 01:40.720
然后是给大家举个例子啊 就好被说你玩游戏

01:40.720 --> 01:43.720
游戏里边有一个人物啊 你的角色

01:43.720 --> 01:46.720
角色里边呢 他有两种伤害 一种叫物理伤害

01:46.720 --> 01:48.720
一种叫魔法伤害

01:48.720 --> 01:54.720
因为我们平时写代码的过程中啊 遇到了大部分的怪兽

01:54.720 --> 01:58.720
都是属于用物理伤害就可以解决掉的

01:58.720 --> 02:02.720
用刀砍量下 用剑砍量下就可以把它砍倒了

02:02.720 --> 02:04.720
就可以解决这个问题了 所以说很多时候呢

02:04.720 --> 02:06.720
我们的魔法是没有用出来的

02:06.720 --> 02:11.720
但是没有用出来不代表你不拥有魔法

02:11.720 --> 02:13.720
知道吧 你还是必须要有魔法伤害的

02:13.720 --> 02:16.720
这个核心概念就是这一块 我们锻炼自己的魔法伤害

02:16.720 --> 02:20.720
不然的话将来有一天 如果说中间出现了一个小怪

02:20.720 --> 02:24.720
或者是一个小boss 他物理抗性特别高

02:24.720 --> 02:28.720
全身亏奖 你用剑用刀砍不动他

02:28.720 --> 02:30.720
这个时候你就要用魔法了

02:30.720 --> 02:35.720
所以说不然的话 那个关键过不去的效果就出不来

02:35.720 --> 02:39.720
所以说核心概念这一块呢 主要是提升咱们的魔法伤害

02:39.720 --> 02:43.720
有些同样抬杠了 那如果说遇到一个boss

02:43.720 --> 02:47.720
他物理抗性和魔法抗性都高怎么办

02:47.720 --> 02:51.720
别抬杠 别抬杠就说这么个意思 都高我咬死他

02:51.720 --> 02:54.720
别抬杠 就是这个意思

02:54.720 --> 02:57.720
那么这个核心概念呢 其实有没有难度呢

02:57.720 --> 03:00.720
肯定是有难度的 每一个核心概念都有

03:00.720 --> 03:02.720
多多少少有点难度 有点难度稍微高一点

03:02.720 --> 03:06.720
有点难度稍微低一点 不过他再有难度还是那句话

03:06.720 --> 03:08.720
他首先是数量有限的

03:08.720 --> 03:11.720
他就那么几个核心概念 对吧 过一个少一个

03:11.720 --> 03:14.720
过一个少一个 就那么几个 过完就没了

03:14.720 --> 03:17.720
第二个呢 他的难度也是有限的

03:17.720 --> 03:20.720
不是造芯片 不是造核武器

03:20.720 --> 03:24.720
需要搞一代人的努力 才能往前推进那么一小步

03:24.720 --> 03:27.720
不是的 我们核心概念这一块呢

03:27.720 --> 03:30.720
也就是一两天搞定一个 一两天搞定一个

03:30.720 --> 03:34.720
就几天时间就完事了 也没有那么恐怖了

03:34.720 --> 03:36.720
好 我们之后结合讲的核心概念呢

03:36.720 --> 03:38.720
叫做数据的存俗和传递

03:38.720 --> 03:41.720
那么这一块讲咋呢 讲的其实就是

03:41.720 --> 03:43.720
值和应用 这一块

03:43.720 --> 03:46.720
前面同学呢 可能多多少少接触过值和应用

03:46.720 --> 03:49.720
我就当里没有接触过 那我这里得给大家讲一讲

03:49.720 --> 03:52.720
这一块呢 我就直接使用代码的形式

03:52.720 --> 03:54.720
给大家进行解释了

03:54.720 --> 03:57.720
好 比方说呢 我们现在呢有一段代码

03:57.720 --> 04:00.720
这个代码的非常简单 就是往变量里面存一个1

04:00.720 --> 04:02.720
把1放到变量里边

04:02.720 --> 04:05.720
那么放到变量里边的时候呢 它到底发生了什么事呢

04:05.720 --> 04:09.720
如果说我再把一个B放一个对象

04:09.720 --> 04:11.720
那么又会发生什么事呢

04:11.720 --> 04:13.720
我们把这个地方研究清楚

04:13.720 --> 04:17.720
比方说这里边n等于1

04:17.720 --> 04:20.720
n1等于1

04:20.720 --> 04:24.720
n2等于2 比方说就这么一段小的代码

04:24.720 --> 04:28.720
那么我们来研究一下这段代码到底发生了什么事

04:28.720 --> 04:34.220
下面一个鼠标的阴影 我再重新解个头

04:34.220 --> 04:40.240
这里有个挥图工具 我在挥图工具里边给大家画出来

04:40.240 --> 04:43.240
就这么一段代码 我先看第一句话

04:43.240 --> 04:47.240
定一个变量等于1 把1放进去

04:47.240 --> 04:50.240
其实我们知道这个变量其实在我们的程序里边

04:50.240 --> 04:54.240
不就是一个内存空间嘛 对吧 就是一块内存空间

04:54.240 --> 04:56.240
所以说我们第一句话非常好解释

04:56.240 --> 05:01.240
就是我们现在有一个变量 它的名字叫做A

05:01.240 --> 05:04.240
然后它是一块内存空间

05:04.240 --> 05:08.240
这个内存空间里边放的是什么呢 放的就是1

05:08.240 --> 05:12.240
就这么简单 那么不仅仅是数字是如此的

05:12.240 --> 05:16.240
所有的原始内想都是这样的一个情况

05:16.240 --> 05:19.240
比方说你给它复制过一个true 给它复制过一个字符串

05:19.240 --> 05:24.240
数字字符串 布尔 或者是NOW onDFAN的

05:24.240 --> 05:27.240
它都是这么一个情况 就是你给它复制的是什么

05:27.240 --> 05:32.240
它就直接放什么 就是这种原始内想叫做直内想

05:32.240 --> 05:36.240
叫直内想 就是把这个数据直接放到变量里边

05:36.240 --> 05:40.240
这个是直内想 懂了意思吧

05:40.240 --> 05:45.240
那么除了原始内想之外 还有一种内想叫做引用内想

05:45.240 --> 05:47.240
就是我们有一把叫做对象内想

05:47.240 --> 05:51.240
什么普通对象 数组 函数都是属于这种内想的

05:51.240 --> 05:54.240
好 那么现在我们在这里有个B

05:54.240 --> 05:56.240
一个变量B 那么这里呢

05:56.240 --> 05:59.240
我们要怎么来理解下边这段代码呢

05:59.240 --> 06:02.240
这段代码该怎么理解 大家注意听

06:02.240 --> 06:05.240
一定要好好地注意听 这里的代码是这样子的

06:05.240 --> 06:08.240
我们开辟了一块内存空间B

06:08.240 --> 06:11.240
这里边放什么呢 放的不是这个对象

06:11.240 --> 06:14.240
这个代码要从右向左看

06:14.240 --> 06:17.240
右边是一个对象 对吧

06:17.240 --> 06:19.240
那么光看右边这个代码

06:19.240 --> 06:21.240
右边这个代码发生了什么事呢

06:21.240 --> 06:25.240
它会在程序里边开辟一块新的内存空间

06:25.240 --> 06:28.240
这个里面每一句话都是自制足迹的

06:28.240 --> 06:30.240
只看这边的代码

06:30.240 --> 06:34.240
它会在我们的程序里边开辟一块新的内存空间

06:34.240 --> 06:37.240
这个内存空间里边有两个东西

06:37.240 --> 06:40.240
一个是属性N1 它的指是1

06:40.240 --> 06:43.240
然后还有一个属性N2

06:43.240 --> 06:46.240
它的指是2

06:46.240 --> 06:49.240
懂了意思吧 那么这就是一个对象

06:49.240 --> 06:52.240
这就是一个对象 对象就开辟出来了

06:52.240 --> 06:54.240
我现在说的是它

06:54.240 --> 06:56.240
我现在说的是仅是这边的代码

06:56.240 --> 06:58.240
就已经产生这样的现象了

06:58.240 --> 07:00.240
跟左边的没关系 跟左边的变量没关系

07:00.240 --> 07:03.240
就产生这么一个对象了

07:03.240 --> 07:04.240
懂了意思吧

07:04.240 --> 07:08.240
那么现在把这个对象复制给这个变量B

07:08.240 --> 07:11.240
那么复制给变量B 又发生了什么呢

07:11.240 --> 07:15.240
那是它相当于是把这个对象的一个地址

07:15.240 --> 07:17.240
这毫必是一栋楼

07:17.240 --> 07:21.240
它有一个哪条街 门牌号是多少

07:21.240 --> 07:24.240
这个地址 把这个地址复制给了B

07:24.240 --> 07:26.240
所以B里面存的是什么呢

07:26.240 --> 07:29.240
存的是这个对象的地址

07:29.240 --> 07:31.240
它不是这个对象本身

07:31.240 --> 07:35.240
因此我们将来通过B点N1

07:35.240 --> 07:38.240
B点N1去找属性的时候

07:38.240 --> 07:39.240
怎么找的呢

07:39.240 --> 07:41.240
我们比方说写这么一个代码

07:41.240 --> 07:45.240
我们写的是B点N1

07:45.240 --> 07:46.240
那什么意思呢

07:46.240 --> 07:47.240
先找B

07:47.240 --> 07:49.240
B是什么 B是一个地址

07:50.240 --> 07:52.240
那么它发现它是一个地址

07:52.240 --> 07:54.240
它就会去通过这个地址去找的吧

07:54.240 --> 07:56.240
找到哪条街 哪个门牌号

07:56.240 --> 07:58.240
所以找到这个内存空间了

07:58.240 --> 08:00.240
就找到这了

08:00.240 --> 08:03.240
然后再从内存空间里面去找N1

08:03.240 --> 08:04.240
所以找到这了

08:04.240 --> 08:06.240
找出来不就是1吗

08:06.240 --> 08:07.240
懂了意思吧

08:07.240 --> 08:08.240
它是这么存的

08:08.240 --> 08:12.240
也就是说我们程序里面在存数据的时候

08:12.240 --> 08:14.240
有两种存法

08:14.240 --> 08:17.240
第一种存法就是直接存它的纸

08:17.240 --> 08:18.240
这叫纸内形

08:18.240 --> 08:20.240
所有的原式内形

08:20.240 --> 08:23.240
制幅圈 数字 布尔 拉奥 昂基泛的

08:23.240 --> 08:25.240
都是属于纸内形 原式内形

08:25.240 --> 08:26.240
都是这样存的

08:26.240 --> 08:27.240
直接放进来

08:27.240 --> 08:29.240
好 另一种存法就是

08:29.240 --> 08:32.240
存的是地址 引用内形

08:32.240 --> 08:34.240
就只有一个对象

08:34.240 --> 08:37.240
我们的什么普通对象

08:37.240 --> 08:39.240
数组 函数都是属于引用内形

08:39.240 --> 08:41.240
那么他们在存的时候

08:41.240 --> 08:43.240
是先开辟一块内存空间

08:43.240 --> 08:45.240
然后放什么数各种属性

08:45.240 --> 08:46.240
数组的话

08:46.240 --> 08:48.240
无非就是属性的名字是0 1

08:48.240 --> 08:50.240
其实本质上是一样的

08:50.240 --> 08:53.240
然后把它的地址放在这个边疆里面

08:53.240 --> 08:54.240
懂了意思吧

08:54.240 --> 08:57.240
这两种存法是不一样的

08:57.240 --> 08:59.240
不一样的话

08:59.240 --> 09:01.240
就是我要讲的就讲完了

09:01.240 --> 09:03.240
后面就可以推理

09:03.240 --> 09:05.240
很多东西都可以推理得到了

09:05.240 --> 09:06.240
比如说存的不一样

09:06.240 --> 09:08.240
那我们如何来理解这个呢

09:08.240 --> 09:10.240
比如说现在我们有A等于1

09:10.240 --> 09:13.240
然后再定一个B等于A

09:13.240 --> 09:15.240
我们如何来理解这个代码呢

09:15.240 --> 09:20.600
这个图

09:20.600 --> 09:22.600
电脑是越来越卡了

09:22.600 --> 09:25.600
好 那么我们现在不看这个

09:25.600 --> 09:27.600
这个没话来说

09:27.600 --> 09:29.600
好 那么现在我们有个A等于1

09:29.600 --> 09:30.600
第一句话完了

09:30.600 --> 09:32.600
接下来我们把A负质给B

09:32.600 --> 09:34.600
那怎么理解呢

09:34.600 --> 09:36.600
开辟一块新的存空间B

09:36.600 --> 09:39.600
B里边存什么呢

09:39.600 --> 09:41.600
把A的值存进去

09:41.600 --> 09:42.600
A的值是什么 是不是1

09:42.600 --> 09:44.600
那就负质粘贴

09:44.600 --> 09:46.600
不是减切

09:46.600 --> 09:49.600
把A里边的负质粘贴到B

09:49.600 --> 09:51.600
说B等于1了

09:51.600 --> 09:53.600
懂了意思吧

09:53.600 --> 09:55.600
好 那么如果说接下来

09:55.600 --> 09:56.600
我们再做一件事

09:56.600 --> 09:58.600
比如说B加加

09:58.600 --> 10:00.600
B自身加1

10:00.600 --> 10:02.600
那么会不会影响到A呢

10:02.600 --> 10:04.600
你看吧 B自身加1

10:04.600 --> 10:05.600
所以加的是它

10:05.600 --> 10:06.600
跟A有没有什么关系

10:06.600 --> 10:07.600
没有关系

10:07.600 --> 10:08.600
所以说这输出什么

10:08.600 --> 10:11.600
A和B就输出1和2

10:12.600 --> 10:14.600
就输出的结果是1和2

10:14.600 --> 10:16.600
能理解吧

10:16.600 --> 10:17.600
我们这里讲完之后

10:17.600 --> 10:20.600
我们会有一套是列系题

10:20.600 --> 10:21.600
我们先做

10:21.600 --> 10:23.600
然后再做我们面试题

10:23.600 --> 10:25.600
没问题吧

10:25.600 --> 10:27.600
这就是这种情况

10:27.600 --> 10:29.600
那如果说除了这种情况之外呢

10:29.600 --> 10:31.600
比如说我们现在的A不是这样子的

10:31.600 --> 10:33.600
A是一个对象

10:33.600 --> 10:37.600
N1等于1

10:37.600 --> 10:39.600
然后B把A负质给B

10:39.600 --> 10:43.600
然后B点N加加

10:43.600 --> 10:46.600
然后我们再输出A点N

10:46.600 --> 10:48.600
和B点N

10:48.600 --> 10:49.600
那么现在我们来看这段代吧

10:49.600 --> 10:54.100
这段代吧又该如何来进行解释

10:54.100 --> 10:55.100
我们多来几次

10:55.100 --> 10:57.100
多来几次大概就明白了

10:57.100 --> 10:59.100
我们重新到来

10:59.100 --> 11:00.100
有这段代吧

11:00.100 --> 11:02.100
现在我们看第一句话

11:02.100 --> 11:03.100
第一句话怎么能理解

11:03.100 --> 11:05.100
来创建一个对象

11:05.100 --> 11:07.100
里边有一个属性N

11:07.100 --> 11:08.100
N是1

11:08.100 --> 11:10.100
于是我们有一个对象

11:10.100 --> 11:12.100
对象里面只有一个属性N

11:12.100 --> 11:14.100
N是1

11:18.100 --> 11:22.950
我把字调大一点

11:22.950 --> 11:25.950
接下来要把对象负质给A

11:25.950 --> 11:28.950
所以说又产生了一块内存空间

11:28.950 --> 11:30.950
又产生了一块内存空间

11:30.950 --> 11:32.950
内存空间里面存放的是什么

11:32.950 --> 11:34.950
存放的是地址

11:34.950 --> 11:37.950
内存空间的名字是一个变量A

11:37.950 --> 11:40.950
没问题吧

11:40.950 --> 11:42.950
那么现在那个地址指向谁

11:42.950 --> 11:43.950
指向这个对象

11:43.950 --> 11:45.950
所以说有的时候我画图

11:45.950 --> 11:46.950
可能就画得简约一点

11:46.950 --> 11:47.950
这里面存的是地址

11:47.950 --> 11:49.950
这个地址就直接指向那个对象了

11:49.950 --> 11:51.950
我就可能不写这个地址了

11:51.950 --> 11:53.950
但道理是这个道理

11:53.950 --> 11:54.950
这里面有个地址

11:54.950 --> 11:57.950
这个地址就指向这块内存空间

11:57.950 --> 12:00.950
然后我们把A负质给B

12:00.950 --> 12:02.950
那又是怎么负质的呢

12:02.950 --> 12:03.950
我们现在又多了一个空间了

12:03.950 --> 12:04.950
叫做B

12:04.950 --> 12:06.950
其实负质的过程是一样的

12:06.950 --> 12:08.950
跟那个质内形是一样的

12:09.950 --> 12:11.950
质内形不就是把这块空间的

12:11.950 --> 12:13.950
A的空间的东西负质粘贴到B吗

12:13.950 --> 12:14.950
现在仍然是一样

12:14.950 --> 12:17.950
把这里面的地址负质粘贴过来

12:17.950 --> 12:19.950
因为它粘贴的是地址

12:19.950 --> 12:20.950
负质的是地址

12:20.950 --> 12:22.950
所以说它就会导致这个B

12:22.950 --> 12:26.950
它的地址也会指向这个内存空间

12:26.950 --> 12:27.950
懂的意思吧

12:27.950 --> 12:28.950
所以说接下来我们通过这句话

12:28.950 --> 12:31.950
B点N加加那怎么理解呢

12:31.950 --> 12:33.950
就是B是不是地址

12:33.950 --> 12:34.950
地址就找到一个对象

12:34.950 --> 12:36.950
在对象里面找到个属性N

12:36.950 --> 12:37.950
N的值是什么

12:37.950 --> 12:38.950
1就要找到这个值

12:38.950 --> 12:39.950
1把这个值加加

12:39.950 --> 12:40.950
就变成2

12:40.950 --> 12:41.950
那么它一变的话

12:41.950 --> 12:44.950
A点N是不是也跟着变了

12:44.950 --> 12:46.950
A点N是不是也跟着变了

12:46.950 --> 12:47.950
B点N是不是一样的

12:47.950 --> 12:48.950
对吧

12:48.950 --> 12:49.950
它们两个地址一样

12:49.950 --> 12:50.950
地址一样

12:50.950 --> 12:52.950
所以找到这个内存空间是一样的

12:52.950 --> 12:53.950
因此在负质的时候

12:53.950 --> 12:55.950
其实没有什么变化

12:55.950 --> 12:56.950
它还是负质粘贴

12:56.950 --> 12:57.950
把它的地址负质粘贴过来

12:57.950 --> 12:59.950
只不过之前负质粘贴的是它

12:59.950 --> 13:00.950
具体的值

13:00.950 --> 13:02.950
现在负质粘贴的是它的地址

13:02.950 --> 13:03.950
懂的意思吧

13:03.950 --> 13:05.950
所以说这两个输出结构是怎么

13:05.950 --> 13:08.950
输出结构就是两个二

13:08.950 --> 13:10.950
两个二

13:10.950 --> 13:11.950
对吧

13:11.950 --> 13:12.950
好

13:12.950 --> 13:13.950
那么这一块理解清楚了吧

13:13.950 --> 13:15.950
然后我们接下来再来理解

13:15.950 --> 13:17.950
那又如何来解释这个代码呢

13:17.950 --> 13:19.950
代码线稍微复杂一点

13:19.950 --> 13:20.950
比方说我们这个ADD

13:20.950 --> 13:23.950
有一个U2

13:23.950 --> 13:24.950
U21

13:24.950 --> 13:26.950
有一个N

13:26.950 --> 13:28.950
Molika

13:28.950 --> 13:31.950
然后它有一个家庭柱子

13:31.950 --> 13:33.950
Province

13:34.950 --> 13:36.950
City

13:39.950 --> 13:40.950
然后再来一个吧

13:40.950 --> 13:41.950
我们稍微把它写复杂点

13:41.950 --> 13:42.950
它喜欢什么呢

13:42.950 --> 13:43.950
喜欢一个输出

13:43.950 --> 13:45.950
输出里边的是

13:47.950 --> 13:49.950
音乐

13:49.950 --> 13:51.950
电影

13:51.950 --> 13:52.950
好

13:52.950 --> 13:54.950
那我们如何来理解这个U21

13:54.950 --> 13:56.950
U21又咋理解了

13:56.950 --> 13:57.950
我们又来画个图

13:57.950 --> 13:59.950
我们这里的几个图

14:00.950 --> 14:02.950
我是电脑

14:02.950 --> 14:04.950
不知道是不是开了个录屏院

14:04.950 --> 14:05.950
软件的原因啊

14:05.950 --> 14:07.950
特别卡

14:07.950 --> 14:09.950
如果是16G的那一存

14:09.950 --> 14:10.950
买麦克的时候

14:10.950 --> 14:12.950
当时买的时候买的是顶配

14:12.950 --> 14:14.950
还卡

14:14.950 --> 14:15.950
不知道按到什么乱七八糟的东西

14:15.950 --> 14:17.950
好我们来看一下右边的啊

14:17.950 --> 14:18.950
还是一样

14:18.950 --> 14:19.950
右边这一坨

14:19.950 --> 14:20.950
该怎么来理解右边这一坨呢

14:20.950 --> 14:22.950
首先把右边这一坨搞清楚

14:22.950 --> 14:24.950
然后把一个地址给它就完事了

14:24.950 --> 14:26.950
所以我们要理解右边这一坨

14:26.950 --> 14:27.950
右边那一坨呢

14:27.950 --> 14:28.950
我们有很多属性

14:28.950 --> 14:30.950
有什么Name属性

14:30.950 --> 14:31.950
Name

14:31.950 --> 14:34.950
然后呢有什么这个Molika

14:35.950 --> 14:36.950
就是这个属性

14:36.950 --> 14:38.950
我们把文贝稍微调小一点

14:39.950 --> 14:40.950
接下来呢

14:40.950 --> 14:41.950
还有一属性

14:41.950 --> 14:42.950
什么属性呢

14:42.950 --> 14:43.950
好

14:43.950 --> 14:45.950
ADDR

14:45.950 --> 14:47.950
好ADDR是啥呀

14:47.950 --> 14:48.950
ADDR是啥

14:48.950 --> 14:49.950
是不是也是个对象

14:49.950 --> 14:50.950
这是不是又遇到一个对象

14:50.950 --> 14:52.950
遇到对象

14:52.950 --> 14:54.950
就哪一次刚才的流程

14:54.950 --> 14:55.950
哪个流程

14:55.950 --> 14:57.950
又开辟了一块内存空间

14:58.950 --> 15:00.950
又开辟了一块新的内存空间

15:00.950 --> 15:02.950
这个对象有两个属性

15:02.950 --> 15:03.950
Provance我就不写了

15:03.950 --> 15:04.950
写完啊

15:04.950 --> 15:05.950
这是黑龙箱

15:06.950 --> 15:09.950
然后呢下边又有一个属性

15:09.950 --> 15:11.950
叫什么叫City

15:11.950 --> 15:14.780
哈尔滨

15:14.780 --> 15:15.780
对吧

15:15.780 --> 15:17.780
它是直内形的时候

15:18.780 --> 15:19.780
那么没什么问题

15:19.780 --> 15:20.780
它是对象内形的时候

15:20.780 --> 15:21.780
只要遇到对象

15:21.780 --> 15:23.780
它马上要开辟一块新的内存空间

15:23.780 --> 15:24.780
对吧有两个属性

15:24.780 --> 15:25.780
这个对象有两个属性

15:25.780 --> 15:26.780
Provance

15:26.780 --> 15:27.780
City

15:27.780 --> 15:29.780
好那么接下来呢

15:29.780 --> 15:33.090
我们要把这个对象

15:33.090 --> 15:34.090
复制给哪个属性

15:34.090 --> 15:36.090
复制给ADDR这个属性

15:36.090 --> 15:38.090
那么ADDR属性里边放的是啥

15:38.090 --> 15:40.090
放的是不是也是个地址

15:40.090 --> 15:41.090
对不对

15:41.090 --> 15:42.090
这个地址指向谁

15:42.090 --> 15:45.400
指向这一边

15:45.400 --> 15:46.400
懂得意思吗

15:46.400 --> 15:48.400
说ADDR里面存的也是地址

15:48.400 --> 15:49.400
只要看到对象

15:49.400 --> 15:51.400
它就是开了一块新的内存空间

15:51.400 --> 15:53.400
然后里面各种属性

15:53.400 --> 15:54.400
那如果说这个对象里边

15:54.400 --> 15:55.400
还有对象呢

15:55.400 --> 15:56.400
那又来呗

15:56.400 --> 15:58.400
又往后面嵌套呗

15:58.400 --> 16:00.400
它这一存结构就是这样的结构

16:00.400 --> 16:02.400
好接下来还有一个属性叫Nurfs

16:02.400 --> 16:04.400
Nurfs又是什么

16:04.400 --> 16:05.400
这是不是对象

16:05.400 --> 16:06.400
输出是不是对象

16:06.400 --> 16:07.400
输出也是对象

16:07.400 --> 16:09.400
所以又开了一块内存空间

16:09.400 --> 16:10.400
又是一个对象

16:10.400 --> 16:12.400
这对象里边是个输出

16:12.400 --> 16:13.400
输出无分就是个

16:13.400 --> 16:14.400
也是个对象

16:14.400 --> 16:15.400
没有什么特别的

16:15.400 --> 16:16.400
它的属性名是0

16:16.400 --> 16:17.400
0是什么

16:17.400 --> 16:18.400
0是音乐

16:18.400 --> 16:19.400
对吧

16:19.400 --> 16:21.400
然后1是什么

16:21.400 --> 16:22.400
1是电影

16:22.400 --> 16:24.400
然后把对象地址

16:24.400 --> 16:25.400
复制给谁

16:25.400 --> 16:27.400
复制给属性Nurfs

16:27.400 --> 16:28.400
那现在呢

16:28.400 --> 16:29.400
我们又多了一个属性了

16:29.400 --> 16:33.120
这里

16:33.120 --> 16:35.120
可能有点反应不过来的话

16:35.120 --> 16:36.120
要好好看一下

16:36.120 --> 16:37.120
结合这个图看一下

16:37.120 --> 16:38.120
你就明白了

16:38.120 --> 16:40.120
那这里边是也是个地址

16:40.120 --> 16:41.120
这个地址指向谁指向这个

16:41.120 --> 16:42.120
于是呢

16:42.120 --> 16:44.120
光是右边这一坨

16:44.120 --> 16:45.120
光是右边这一坨

16:45.120 --> 16:46.120
其实我们平时写单码的时候呢

16:46.120 --> 16:48.120
脑袋里边倒是没有去想这个

16:48.120 --> 16:49.120
这种结构

16:49.120 --> 16:51.120
脑袋倒是没有去生存的这种结构

16:51.120 --> 16:52.120
但是呢

16:52.120 --> 16:53.120
我们要分析的话

16:53.120 --> 16:55.120
比方有些面试题目

16:55.120 --> 16:56.120
要分析他的话

16:56.120 --> 16:57.120
肯定要用这种结构

16:57.120 --> 16:59.120
在心里边想出来也好

16:59.120 --> 17:00.120
纸上画出来也好

17:00.120 --> 17:01.120
但是我建议呢

17:01.120 --> 17:02.120
初学的时候啊

17:02.120 --> 17:03.120
要分析一些问题的时候

17:03.120 --> 17:05.120
特别是职合引用

17:05.120 --> 17:06.120
这种问题的时候

17:06.120 --> 17:07.120
最好把它画出来

17:07.120 --> 17:08.120
画出来一目了然

17:08.120 --> 17:09.120
看得非常清楚

17:09.120 --> 17:10.120
对吧

17:10.120 --> 17:12.120
你看我现在是怎么对象

17:12.120 --> 17:13.120
整个对象

17:13.120 --> 17:14.120
就是这个

17:14.120 --> 17:15.120
对吧

17:15.120 --> 17:16.120
是不是这个

17:16.120 --> 17:17.120
然后呢

17:17.120 --> 17:19.120
这里边的对象呢

17:19.120 --> 17:20.120
哎

17:20.120 --> 17:21.120
就是这个

17:21.120 --> 17:22.120
好

17:22.120 --> 17:23.120
然后

17:23.120 --> 17:24.120
这个对象呢

17:24.120 --> 17:26.120
下面的Nurfs

17:26.120 --> 17:28.120
这个Nurfs

17:28.120 --> 17:29.120
是谁啊

17:29.120 --> 17:31.120
是不是这个

17:31.120 --> 17:32.120
对吧

17:32.120 --> 17:33.120
你自己对照一下吧

17:33.120 --> 17:35.120
那么就就都形成这么一个东西了

17:35.120 --> 17:37.120
然后现在把它复制给U21

17:37.120 --> 17:38.120
把谁复制给U21

17:38.120 --> 17:39.120
是不是把红色的这个东西

17:39.120 --> 17:40.120
复制给U21

17:40.120 --> 17:41.120
对不对

17:41.120 --> 17:42.120
好因此呢

17:42.120 --> 17:44.120
那么这个U21就出来了

17:44.120 --> 17:45.120
这个U21

17:45.120 --> 17:47.620
地址指向谁

17:47.620 --> 17:49.620
指向这个

17:49.620 --> 17:51.620
随便指吧

17:51.620 --> 17:52.620
指向这个对象

17:52.620 --> 17:53.620
好

17:53.620 --> 17:54.620
于是呢

17:54.620 --> 17:55.620
将来我们去这样访问

17:55.620 --> 17:56.620
然后我们访问

17:56.620 --> 17:57.620
他的城市

17:57.620 --> 18:00.620
U21.ADDR.CT

18:00.620 --> 18:01.620
我们这样子写

18:01.620 --> 18:02.620
那么这样子写怎么理解呢

18:02.620 --> 18:03.620
你看U21

18:03.620 --> 18:05.620
是不是找到地址

18:05.620 --> 18:06.620
地址马上就找了个对象了

18:06.620 --> 18:07.620
通过这个门牌号

18:07.620 --> 18:08.620
找了个对象了

18:08.620 --> 18:10.620
然后U21.ADDR

18:10.620 --> 18:11.620
是不是找到这个地址

18:11.620 --> 18:12.620
通过这个地址

18:12.620 --> 18:13.620
是不是找到这个对象了

18:13.620 --> 18:15.620
然后DRCT

18:15.620 --> 18:16.620
是不是找到这个

18:16.620 --> 18:17.620
哈尔滨了

18:18.620 --> 18:19.620
懂了意思吧

18:19.620 --> 18:20.620
就这么个意思

18:20.620 --> 18:21.620
好

18:21.620 --> 18:22.620
那么接下来

18:22.620 --> 18:24.620
我们来玩一些别的东西

18:24.620 --> 18:25.620
现在呢

18:25.620 --> 18:27.620
我要把U21

18:27.620 --> 18:28.620
复制给

18:30.620 --> 18:32.620
U21.ADDR

18:32.620 --> 18:35.620
复制给U21.ADDR

18:35.620 --> 18:37.620
复制给U21.ADDR

18:37.620 --> 18:39.620
那这个玩意有什么理解呢

18:39.620 --> 18:42.620
然后我们再把U21.ADDR.CT

18:42.620 --> 18:43.620
改一下

18:43.620 --> 18:44.620
改成

18:46.620 --> 18:47.620
黑龙江海澜

18:47.620 --> 18:48.620
程度

18:48.620 --> 18:49.620
我也不知道

18:49.620 --> 18:50.620
谁要提到城市

18:50.620 --> 18:51.620
然后我们来书

18:51.620 --> 18:52.620
我们来看一下

18:52.620 --> 18:53.620
这个东西

18:54.620 --> 18:56.620
把这个解决通

18:56.620 --> 19:00.470
好

19:00.470 --> 19:01.470
那么现在我们来

19:01.470 --> 19:02.470
如何来理解

19:02.470 --> 19:03.470
下面这个代码

19:03.470 --> 19:04.470
把U21.ADDR

19:04.470 --> 19:05.470
复制给U21.ADDR

19:05.470 --> 19:06.470
于是现在是不是

19:06.470 --> 19:07.470
有个新的变量

19:07.470 --> 19:08.470
ADDR

19:10.470 --> 19:11.470
现在呢

19:11.470 --> 19:12.470
我们要干嘛呀

19:12.470 --> 19:13.470
我们是不是

19:13.470 --> 19:14.470
把U21.ADDR

19:14.470 --> 19:15.470
放过来

19:15.470 --> 19:16.470
不是的

19:16.470 --> 19:18.470
是把U21.ADDR

19:18.470 --> 19:19.470
放过来

19:19.470 --> 19:20.470
就把这个属性

19:20.470 --> 19:21.470
把这个属性放过来

19:21.470 --> 19:22.470
把这个地址放过来

19:22.470 --> 19:23.470
因此这个地址

19:23.470 --> 19:26.040
放过来了

19:26.040 --> 19:27.040
就这个地址

19:27.040 --> 19:28.040
放过来过后

19:28.040 --> 19:29.040
那这个地址指向谁

19:29.040 --> 19:30.040
是不是指向他

19:30.040 --> 19:32.040
因此他的是不是也指向他的

19:32.040 --> 19:34.040
所以也指向他的

19:34.040 --> 19:35.040
所以说我接下来修改什么

19:35.040 --> 19:37.040
而追似点CT

19:37.040 --> 19:39.040
通过他去修改CT

19:39.040 --> 19:40.040
修改的是谁

19:40.040 --> 19:41.040
是不是修改这儿

19:41.040 --> 19:42.040
修改成了什么

19:42.040 --> 19:43.040
修改成了程度

19:43.040 --> 19:44.040
那这个时候呢

19:44.040 --> 19:46.040
你会发现

19:46.040 --> 19:48.040
通过他再去找这个CT

19:48.040 --> 19:50.040
和通过他去找这个CT

19:50.040 --> 19:51.040
是不是都一样的

19:51.040 --> 19:52.040
是吧

19:52.040 --> 19:54.040
只要你看到有对象的地方

19:54.040 --> 19:55.040
通过对象再复制的

19:55.040 --> 19:58.040
对象在数据传递的地方

19:58.040 --> 19:59.040
我们这一颗辽论

19:59.040 --> 20:00.040
就是纯粹的传递吧

20:00.040 --> 20:01.040
纯粹我们讲完了

20:01.040 --> 20:02.040
传递也是讲

20:02.040 --> 20:04.040
反而是出现数据传递的地方

20:04.040 --> 20:06.040
它都是这样的传递的

20:06.040 --> 20:07.040
出现了什么传递的

20:07.040 --> 20:08.040
如果是对象的话

20:08.040 --> 20:09.040
它们传递的是

20:09.040 --> 20:11.040
都是相同的地址

20:11.040 --> 20:12.040
通过这个地址

20:12.040 --> 20:14.040
去处理它里边的东西

20:14.040 --> 20:16.040
它都会造成影响的

20:16.040 --> 20:18.040
大家都会受到影响

20:18.040 --> 20:20.040
DIR-CT

20:20.040 --> 20:22.040
DIR-CT

20:22.040 --> 20:23.040
像这种情况呢

20:23.040 --> 20:24.040
我们平时开发

20:25.040 --> 20:27.040
DIR-CT

20:29.040 --> 20:30.040
两个都变成程度了

20:30.040 --> 20:32.040
对吧

20:32.040 --> 20:33.040
好

20:33.040 --> 20:34.040
那么接下来我们再来

20:34.040 --> 20:35.040
再来

20:35.040 --> 20:39.350
如果说我这样子写呢

20:39.350 --> 20:41.350
我把这个DIR-CT

20:41.350 --> 20:42.350
重新复制

20:42.350 --> 20:43.350
复制为C

20:43.350 --> 20:45.350
Province

20:45.350 --> 20:46.350
四川

20:46.350 --> 20:49.350
CT等于程度

20:49.350 --> 20:50.350
好

20:50.350 --> 20:51.350
现在我们再去输出

20:51.350 --> 20:53.350
DIR-CT

20:54.350 --> 20:56.350
DIR-CT

20:57.350 --> 20:59.350
那现在会不会是一样的呢

20:59.350 --> 21:01.350
接下来我们来

21:01.350 --> 21:03.350
这个图看一下

21:03.350 --> 21:04.350
就这些东西

21:04.350 --> 21:05.350
其实你只要画图

21:05.350 --> 21:06.350
有信不信现在

21:06.350 --> 21:07.350
不知道同学

21:07.350 --> 21:08.350
就在那里听

21:08.350 --> 21:10.350
你如果说把一个视频暂停

21:10.350 --> 21:11.350
你就来画一个图

21:11.350 --> 21:13.350
你都能分析出来

21:13.350 --> 21:15.350
你都能分析出来

21:15.350 --> 21:16.350
就你不画图

21:16.350 --> 21:17.350
你老在那边想

21:17.350 --> 21:18.350
因为你刚刚初学

21:18.350 --> 21:19.350
像我现在老在那边想

21:19.350 --> 21:20.350
肯定是没问题的

21:20.350 --> 21:22.350
但是你们刚刚初学

21:22.350 --> 21:23.350
你这个时候你不画图

21:23.350 --> 21:25.350
你肯定是很难分析的出来的

21:25.350 --> 21:26.350
好

21:26.350 --> 21:27.350
我们来看一下这句话

21:27.350 --> 21:28.350
一开始没变

21:28.350 --> 21:29.350
没变

21:29.350 --> 21:30.350
是这样子吧

21:30.350 --> 21:31.350
上面这句话是没有

21:31.350 --> 21:32.350
效果是一样的

21:32.350 --> 21:33.350
对吧

21:33.350 --> 21:34.350
我把他的地址

21:34.350 --> 21:36.350
复制暂停到这儿

21:36.350 --> 21:37.350
对吧

21:37.350 --> 21:38.350
然后他也有两个

21:38.350 --> 21:39.350
是相同的地址

21:39.350 --> 21:40.350
于是他只相照了

21:40.350 --> 21:41.350
这个没问题吧

21:41.350 --> 21:42.350
好

21:42.350 --> 21:43.350
关键是下边这句话

21:43.350 --> 21:45.350
下边这句话我之前咋说了

21:45.350 --> 21:46.350
这个是啥

21:46.350 --> 21:47.350
是不是又创建了

21:47.350 --> 21:49.350
一个新的对象

21:49.350 --> 21:50.350
是不是又创建了

21:50.350 --> 21:51.350
一个新的对象

21:51.350 --> 21:53.350
于是我们这里

21:54.350 --> 21:55.350
又来了一个新的对象

21:55.350 --> 21:57.350
这个新的对象也有两个属性

21:57.350 --> 21:58.350
一个是Provence

21:58.350 --> 21:59.350
变成了四川

22:00.350 --> 22:02.350
一个是City变成了成都

22:02.350 --> 22:04.350
这里原来还是哈尔滨

22:06.350 --> 22:08.350
然后再把新的对象的地址

22:08.350 --> 22:09.350
复制给什么

22:09.350 --> 22:10.350
又重新给它复制

22:10.350 --> 22:12.350
它本来以前只像是它的

22:12.350 --> 22:14.350
但是这样子一重新复制

22:14.350 --> 22:15.350
给这个变量

22:15.350 --> 22:17.350
它里边的地址又变了

22:17.350 --> 22:18.350
变成了这个地址的

22:18.350 --> 22:20.350
所以说它那边的地址变了过后

22:20.350 --> 22:21.350
它现在只像它了

22:21.350 --> 22:24.790
那接下来

22:24.790 --> 22:25.790
我干了什么事呢

22:25.790 --> 22:29.360
没啥事可以干了

22:29.360 --> 22:31.360
那么现在我再去输出

22:31.360 --> 22:33.360
这个而主义是点City

22:33.360 --> 22:34.360
说输出的是它

22:34.360 --> 22:36.360
我再去输出那个

22:36.360 --> 22:38.360
User1点什么

22:38.360 --> 22:39.360
而主义是点City

22:39.360 --> 22:40.360
说输出了它

22:41.360 --> 22:42.360
两个是不是分开了

22:42.360 --> 22:43.360
你分离了

22:44.360 --> 22:45.360
对吧

22:45.360 --> 22:46.360
懂了意思吧

22:46.360 --> 22:47.360
所以说你

22:47.360 --> 22:49.360
你通过这个变量

22:49.360 --> 22:51.360
如果说你不给它重新复制

22:51.360 --> 22:53.360
你通过这个变量往里边去干

22:53.360 --> 22:54.360
没问题

22:54.360 --> 22:55.360
但是你给它重新复制了

22:55.360 --> 22:57.360
那它就只像新的东西了

22:57.360 --> 22:59.360
跟原来那个就没什么关系了

22:59.360 --> 23:00.360
懂了意思吧

23:00.360 --> 23:01.360
所以说现在我们输出啥

23:01.360 --> 23:02.360
输出的是

23:04.360 --> 23:05.360
什么

23:05.360 --> 23:09.700
成都和哈尔滨吗

23:09.700 --> 23:10.700
懂了意思吧

23:10.700 --> 23:12.700
要学会用画图的方式来分析

23:12.700 --> 23:14.700
我知道可能有那本

23:14.700 --> 23:15.700
就是我以后开发的时候

23:15.700 --> 23:17.700
是不是每次都要去画这个图

23:17.700 --> 23:18.700
写代码都要画个图

23:18.700 --> 23:19.700
不是

23:19.700 --> 23:21.700
是要分析一些除了问题的程序

23:21.700 --> 23:23.700
比方程序除了问题

23:23.700 --> 23:24.700
你要分析它

23:24.700 --> 23:25.700
那么你要画图

23:26.700 --> 23:28.700
或者是做面试题的时候要画图

23:28.700 --> 23:29.700
你不要在脑袋里边想

23:29.700 --> 23:31.700
目前还达不到这样的一个境界

23:32.700 --> 23:34.700
要非常非常熟悉过后

23:34.700 --> 23:35.700
脑袋里面才会形成这样的图

23:36.700 --> 23:37.700
好

23:37.700 --> 23:39.700
那么这里我就把这些课的东西讲完了

23:39.700 --> 23:40.700
数据的存促和传递

23:40.700 --> 23:42.700
你只要画图你就能解决

23:42.700 --> 23:43.700
你不画图你就解决不了

23:43.700 --> 23:44.700
好

23:44.700 --> 23:45.700
接下来我们来看一下

23:45.700 --> 23:46.700
首先看电视题

23:47.700 --> 23:48.700
这电视题做的过程中

23:48.700 --> 23:49.700
就会出现问题

23:49.700 --> 23:50.700
就会出现问题

23:51.700 --> 23:52.700
那么出现了问题过后

23:52.700 --> 23:54.700
我们看一下画图能不能帮我们解决

23:54.700 --> 23:55.700
这个问题

23:55.700 --> 23:56.700
好

23:56.700 --> 23:58.700
第一道题交换两个变量的值

23:58.700 --> 23:59.700
这个交换两个变量的值

23:59.700 --> 24:01.700
好像应该都我过了

24:01.700 --> 24:02.700
这个事情都我过了

24:02.700 --> 24:03.700
比方说一个变量1

24:03.700 --> 24:05.700
B等于2

24:05.700 --> 24:07.700
就不看上面的函数

24:07.700 --> 24:08.700
现在我要交换两个变量的值

24:08.700 --> 24:09.700
非常简单

24:09.700 --> 24:10.700
我定一个新的变量

24:10.700 --> 24:11.700
对吧

24:11.700 --> 24:12.700
要不要

24:12.700 --> 24:13.700
这个我需要说一下

24:14.700 --> 24:15.700
有一个

24:16.700 --> 24:17.700
有一个变量

24:18.700 --> 24:20.700
第二个变量

24:22.700 --> 24:23.700
这个是A

24:23.700 --> 24:24.700
这个是B

24:25.700 --> 24:26.700
A里边是1

24:26.700 --> 24:27.700
B里边是2

24:28.700 --> 24:29.700
你要交换

24:29.700 --> 24:30.700
A里边变成2

24:30.700 --> 24:31.700
B里边变成1

24:31.700 --> 24:32.700
要交换他们的值

24:32.700 --> 24:33.700
怎么交换呢

24:33.700 --> 24:34.700
你需要

24:34.700 --> 24:35.700
第三个变量

24:35.700 --> 24:36.700
就好像两杯水一样

24:36.700 --> 24:37.700
对吧

24:37.700 --> 24:38.700
你要把两杯水交换

24:38.700 --> 24:39.700
你是不是需要第三个空杯子

24:39.700 --> 24:40.700
好

24:40.700 --> 24:41.700
你需要第三个变量

24:41.700 --> 24:43.700
我们把它叫做temp

24:43.700 --> 24:45.700
temp表示临时的

24:45.700 --> 24:46.700
临时的

24:47.700 --> 24:49.700
你先把A的东西扔过来

24:49.700 --> 24:51.700
或者先把B的东西扔过来都行

24:51.700 --> 24:52.700
变成1

24:53.700 --> 24:54.700
对不对

24:54.700 --> 24:55.700
把A的东西暂存一下

24:55.700 --> 24:57.700
然后接下来就可以放心大掌的改A了

24:57.700 --> 24:59.700
然后把B的东西放到放过来

24:59.700 --> 25:00.700
对吧

25:00.700 --> 25:01.700
是第二步

25:01.700 --> 25:02.700
B的东西放过来

25:02.700 --> 25:04.700
然后再把他的东西放过去

25:04.700 --> 25:05.700
就1

25:05.700 --> 25:06.700
就是3步

25:08.700 --> 25:09.700
所以说代码型很好写

25:09.700 --> 25:10.700
temp等于A

25:11.700 --> 25:13.700
当然也有其他的写法

25:13.700 --> 25:14.700
我这里不撤远了

25:15.700 --> 25:18.700
然后把A就可以改了

25:18.700 --> 25:19.700
改成B

25:19.700 --> 25:21.700
然后再把B改成temp

25:21.700 --> 25:22.700
这样子一完

25:22.700 --> 25:23.700
中间这个过程就是交换

25:23.700 --> 25:24.700
对吧

25:24.700 --> 25:25.700
一完了过后来

25:25.700 --> 25:27.700
看一下AB的值就改过来了

25:27.700 --> 25:28.700
是不是变成2厘了

25:28.700 --> 25:29.700
就交换两个变量

25:30.700 --> 25:31.700
好 那么现在我想

25:31.700 --> 25:32.700
有的时候我们觉得

25:32.700 --> 25:34.700
程序里边经常要做交换

25:34.700 --> 25:35.700
所以说我想把它写成一个函数

25:35.700 --> 25:37.700
于是我把这个代码

25:37.700 --> 25:39.700
把A和B交换的代码放到这

25:40.700 --> 25:41.700
对吧

25:41.700 --> 25:42.700
你从我参数给我传进来

25:42.700 --> 25:43.700
传进来过后

25:43.700 --> 25:44.700
就已经交换

25:44.700 --> 25:45.700
那么这样子行不行呢

25:45.700 --> 25:46.700
首先看

25:47.700 --> 25:48.700
你们觉得行不行

25:50.700 --> 25:51.700
如果说将我们这几个

25:51.700 --> 25:52.700
相对核心概念

25:52.700 --> 25:53.700
所属于魔法上

25:53.700 --> 25:54.700
还我再重生一次

25:54.700 --> 25:56.700
大部分的时候

25:57.700 --> 25:59.700
我们用剑用刀

25:59.700 --> 26:00.700
就可以解决问题了

26:00.700 --> 26:01.700
对吧

26:01.700 --> 26:02.700
但有的时候解决不了问题

26:02.700 --> 26:03.700
我们就要分析了

26:03.700 --> 26:04.700
交用魔法了

26:04.700 --> 26:05.700
所以我们写程序

26:05.700 --> 26:06.700
要两手抓

26:06.700 --> 26:07.700
对吧

26:07.700 --> 26:08.700
左手有剑右手有光

26:08.700 --> 26:09.700
这样子最好的状态

26:10.700 --> 26:12.700
现在我们就定义两个辩量

26:12.700 --> 26:15.700
A等于1B等于2

26:16.700 --> 26:18.700
这里的也和B跟这里不一样

26:18.700 --> 26:19.700
它有作用预的

26:20.700 --> 26:21.700
前面上有没有

26:21.700 --> 26:22.700
应该结束过作用预

26:22.700 --> 26:23.700
后面我还会强调

26:23.700 --> 26:24.700
如果说你们搞不清楚的话

26:24.700 --> 26:26.700
就写它N1N2

26:26.700 --> 26:29.700
现在我们要把N1N2来进行交换

26:30.700 --> 26:31.700
那我怎么交换呢

26:31.700 --> 26:33.700
SwapN1N2

26:33.700 --> 26:35.700
好我们交换完了过后看一下

26:35.700 --> 26:36.700
N1N2

26:36.700 --> 26:37.700
有没有交换

26:37.700 --> 26:38.700
是不是没有交换

26:38.700 --> 26:41.700
有时候把这个给改成A和B就交换了

26:41.700 --> 26:43.700
别测蛋

26:43.700 --> 26:44.700
没有任何关系的

26:44.700 --> 26:47.700
这里的AB跟里边的AB没有任何关系的

26:47.700 --> 26:49.700
这里说说A和B

26:51.700 --> 26:52.700
还是一样的

26:52.700 --> 26:53.700
那怎么回事呢

26:53.700 --> 26:54.700
为什么没交换

26:54.700 --> 26:56.700
那这个时候你看出了问题了

26:56.700 --> 26:57.700
对吧

26:57.700 --> 26:58.700
一个代码反而目前都没问题

26:58.700 --> 27:00.700
那就可能是值和应用的问题了

27:00.700 --> 27:01.700
那怎么办

27:01.700 --> 27:02.700
那就要分析了

27:02.700 --> 27:03.700
画图分析

27:03.700 --> 27:04.700
好我们来看一下

27:04.700 --> 27:05.700
再看一下

27:07.700 --> 27:09.700
到底怎么回事

27:09.700 --> 27:13.970
不行我交换一个解除工具了

27:13.970 --> 27:15.970
这个解除工具怎么

27:20.200 --> 27:23.200
我再加一个吧

27:24.200 --> 27:26.200
改之前的那个

27:26.200 --> 27:28.200
以后可能还要用

27:28.200 --> 27:31.920
好了

27:31.920 --> 27:32.920
来吧

27:32.920 --> 27:33.920
这里有个函数定义

27:33.920 --> 27:34.920
这里有个函数定义

27:34.920 --> 27:35.920
这个函数定义呢

27:35.920 --> 27:36.920
一不运行的

27:36.920 --> 27:38.920
函数只有调用的时候才会运行

27:38.920 --> 27:39.920
所以说我们直接看这

27:39.920 --> 27:41.920
N1等于N1N2等于N2

27:41.920 --> 27:42.920
来吧

27:42.920 --> 27:43.920
所以说我们这里有两个

27:43.920 --> 27:48.920
一个是N1等于1

27:48.920 --> 27:49.920
稍微放大一点

27:49.920 --> 27:55.730
这是N1

27:55.730 --> 27:57.730
它的值是1

27:57.730 --> 27:59.730
还有一个是N2

27:59.730 --> 28:05.660
它的值是2

28:05.660 --> 28:06.660
好

28:06.660 --> 28:07.660
那么接下来我们调用了函数

28:07.660 --> 28:08.660
对吧

28:08.660 --> 28:09.660
调用了函数

28:09.660 --> 28:10.660
然后把N1传进去

28:10.660 --> 28:11.660
N1什么传进去

28:11.660 --> 28:12.660
N1的值传进去

28:12.660 --> 28:13.660
N2传进去

28:13.660 --> 28:14.660
N2的值传进去

28:14.660 --> 28:15.660
这是数据的传递

28:15.660 --> 28:16.660
数据的传递不仅就

28:16.660 --> 28:18.660
发生在变量负值的位置

28:18.660 --> 28:19.660
发生在这些传输的传递

28:19.660 --> 28:21.660
实参到行参也是数据的传递

28:21.660 --> 28:23.660
好那么这个时候要运行函数了

28:23.660 --> 28:24.660
运行函数的时候

28:24.660 --> 28:26.660
是不是产生了行参

28:26.660 --> 28:28.660
对不对

28:28.660 --> 28:29.660
产生了函数的行参

28:29.660 --> 28:31.660
那么这个时候开始运行函数了

28:31.660 --> 28:36.860
A B

28:36.860 --> 28:37.860
好现在我要干嘛呀

28:37.860 --> 28:39.860
现在我要把N1的数据传进去

28:39.860 --> 28:40.860
N2的数据传进去

28:40.860 --> 28:42.860
传递的话是不是复制粘贴

28:42.860 --> 28:43.860
把N1复制粘贴到A

28:43.860 --> 28:45.860
把N2复制粘贴到B

28:45.860 --> 28:47.860
对吧

28:47.860 --> 28:48.860
是不是传进去了

28:48.860 --> 28:50.860
好开始在运行函数来看吧

28:50.860 --> 28:52.860
我还是运行的过程中

28:52.860 --> 28:53.860
哎呀反正

28:53.860 --> 28:55.860
这段代表里面都懂

28:55.860 --> 28:57.860
这段代表的作用是什么

28:57.860 --> 28:59.860
改变哪个的A和改变哪两个

28:59.860 --> 29:01.860
改变行参的值

29:01.860 --> 29:03.860
说行参的值有没有交换

29:03.860 --> 29:04.860
有交换啊

29:04.860 --> 29:05.860
2

29:05.860 --> 29:06.860
1

29:06.860 --> 29:07.860
行参的值交换了

29:07.860 --> 29:09.860
跟这有关系吗

29:09.860 --> 29:11.860
是不是没关系啊

29:11.860 --> 29:12.860
跟这一点关系都没有

29:12.860 --> 29:13.860
改变的是谁

29:13.860 --> 29:15.860
改变的是他的值

29:15.860 --> 29:16.860
懂了意思吧

29:16.860 --> 29:17.860
改变的是他的值

29:17.860 --> 29:19.860
跟这里就没有关系

29:20.860 --> 29:22.860
而函数运行完成之后

29:22.860 --> 29:23.860
行参消失

29:23.860 --> 29:25.860
函数运行完了

29:25.860 --> 29:26.860
结束了

29:26.860 --> 29:27.860
行参就没了

29:27.860 --> 29:29.860
因为他把这里改成A和B

29:29.860 --> 29:30.860
不就可以吗

29:30.860 --> 29:31.860
不一样

29:31.860 --> 29:33.860
这里的A和B和行参的A和B

29:33.860 --> 29:34.860
不是一个东西

29:34.860 --> 29:35.860
只能让它同一个名字

29:35.860 --> 29:36.860
它不是一个东西

29:36.860 --> 29:37.860
所以它还是分开的

29:37.860 --> 29:38.860
你改的是这

29:39.860 --> 29:40.860
函数运行结束

29:40.860 --> 29:41.860
行参消失

29:41.860 --> 29:42.860
最后一在这一看

29:42.860 --> 29:44.860
所以还是没动

29:44.860 --> 29:45.860
对不对

29:45.860 --> 29:46.860
还是没动

29:46.860 --> 29:48.860
那就说那怎么办呢

29:49.860 --> 29:50.860
无解

29:51.860 --> 29:52.860
在级S程序里面

29:52.860 --> 29:53.860
这种情况就无解

29:54.860 --> 29:56.860
你没有办法去交换

29:56.860 --> 29:57.860
因为你交换了交换去

29:57.860 --> 29:58.860
只能交换这样

29:58.860 --> 30:00.860
你不能改变外边的东西

30:00.860 --> 30:01.860
改变不了

30:02.860 --> 30:03.860
知道吧

30:03.860 --> 30:05.860
除非你知道外边有N1N2

30:05.860 --> 30:06.860
在这里不喘参数

30:06.860 --> 30:07.860
直接去改变N1N2可以

30:07.860 --> 30:09.860
但是你这里要用

30:09.860 --> 30:10.860
这种方式来写

30:10.860 --> 30:11.860
肯定是不行的

30:11.860 --> 30:12.860
肯定是不行的

30:12.860 --> 30:13.860
无解

30:14.860 --> 30:15.860
到我这里传

30:15.860 --> 30:16.860
传对象是不可以

30:16.860 --> 30:17.860
对象也一样

30:17.860 --> 30:18.860
也无解

30:21.300 --> 30:22.300
不要说我这里

30:23.300 --> 30:25.300
传一个N1N2

30:26.300 --> 30:27.300
我看这两个对象怎么讲

30:27.300 --> 30:28.300
不一样的

30:28.300 --> 30:30.300
无非就是

30:30.300 --> 30:32.300
无非就是这里存了个地址1

30:32.300 --> 30:33.300
对吧

30:33.300 --> 30:34.300
一个对象的地址1

30:34.300 --> 30:35.300
这里存了一个地址2

30:37.870 --> 30:39.870
本来是复制粘贴过来的

30:39.870 --> 30:40.870
地址1

30:43.870 --> 30:44.870
地址1

30:44.870 --> 30:45.870
复制过来

30:45.870 --> 30:47.870
地址2复制过来

30:47.870 --> 30:49.870
对象我就不画了

30:49.870 --> 30:51.870
后来交换没交换交换交换了

30:51.870 --> 30:52.870
交换的是谁

30:52.870 --> 30:54.870
交换的是A1的地址

30:54.870 --> 30:56.870
变成了地址2

30:56.870 --> 30:57.870
B的地址变成了地址1

30:57.870 --> 30:58.870
那跟这个有关系吗

30:58.870 --> 31:00.870
还不是没关系

31:00.870 --> 31:01.870
是吧

31:02.870 --> 31:03.870
无解

31:03.870 --> 31:04.870
所以地道体的

31:04.870 --> 31:05.870
我就会告诉你

31:05.870 --> 31:06.870
当你出现问题过后

31:06.870 --> 31:07.870
你经过分析

31:07.870 --> 31:10.870
发现这种函数就写不了

31:10.870 --> 31:13.870
在纪念识表就写不了这种函数

31:14.870 --> 31:15.870
懂了意思吗

31:15.870 --> 31:16.870
无解

31:16.870 --> 31:17.870
所以最终得到的结果

31:21.870 --> 31:23.870
不能直接改这里的题

31:24.870 --> 31:25.870
演习题

31:25.870 --> 31:31.060
讲解

31:33.060 --> 31:34.060
地道体

31:34.060 --> 31:37.720
无解

31:38.720 --> 31:39.720
分析得出来的节目

31:39.720 --> 31:40.720
第二道题

31:40.720 --> 31:41.720
发现无解了

31:41.720 --> 31:43.720
那我退而求其次

31:43.720 --> 31:44.720
我不交换两个变量

31:44.720 --> 31:45.720
交换两个变量

31:45.720 --> 31:46.720
我确实没办法

31:46.720 --> 31:47.720
用函数来搞定

31:47.720 --> 31:48.720
确实没办法

31:49.720 --> 31:50.720
但是我可以交换

31:50.720 --> 31:51.720
一个对象的两个属性

31:51.720 --> 31:52.720
可不可以交换呢

31:52.720 --> 31:53.720
这有这个函数

31:53.720 --> 31:54.720
我给你一个对象

31:54.720 --> 31:55.720
告诉你

31:55.720 --> 31:56.720
把这个属性的值

31:56.720 --> 31:57.720
和这个属性的值

31:57.720 --> 31:58.720
就两个属性名

31:58.720 --> 31:59.720
来进行交换

31:59.720 --> 32:00.720
比方说

32:00.720 --> 32:01.720
我有一个属性对象

32:01.720 --> 32:02.720
对象里边

32:03.720 --> 32:04.720
有两个属性

32:04.720 --> 32:05.720
A等于1

32:05.720 --> 32:06.720
B等于2

32:06.720 --> 32:07.720
那我能不能这样交换呢

32:07.720 --> 32:08.720
Swap

32:08.720 --> 32:09.720
把对象给力

32:09.720 --> 32:10.720
然后告诉你

32:10.720 --> 32:11.720
把A和B

32:11.720 --> 32:12.720
两个属性交换

32:12.720 --> 32:14.720
我这样子能不能交换呢

32:15.720 --> 32:16.720
这样子可以交换

32:17.720 --> 32:18.720
我们先写完了再说

32:18.720 --> 32:19.720
怎么交换

32:19.720 --> 32:20.720
为什么可以交换

32:21.720 --> 32:22.720
怎么写呢

32:22.720 --> 32:23.720
还不是一样的吧

32:23.720 --> 32:24.720
还是

32:24.720 --> 32:26.720
跟这里的道理是一样的

32:26.720 --> 32:27.720
先两个变量

32:27.720 --> 32:28.720
变量先保存啥

32:28.720 --> 32:30.720
保存第一个属性的值

32:30.720 --> 32:32.720
这个写法没问题吧

32:32.720 --> 32:33.720
不要到这了

32:33.720 --> 32:34.720
一告诉我一个写法

32:34.720 --> 32:35.720
你看不懂

32:35.720 --> 32:36.720
把这个属性

32:36.720 --> 32:38.720
把这个参数值

32:38.720 --> 32:39.720
读出来

32:39.720 --> 32:41.720
来读出它的属性值

32:41.720 --> 32:42.720
管它是什么值

32:42.720 --> 32:43.720
放到变量里面

32:43.720 --> 32:45.720
然后再去改变

32:45.720 --> 32:46.720
objq1

32:47.720 --> 32:49.720
复制为objq2

32:49.720 --> 32:50.720
然后再objq2

32:50.720 --> 32:51.720
等于10

32:51.720 --> 32:53.720
对一下

32:53.720 --> 32:54.720
三句代码

32:55.720 --> 32:56.720
没问题吧

32:57.720 --> 32:58.720
这样子能不能交换呢

32:58.720 --> 32:59.720
我们来看一下

32:59.720 --> 33:00.720
就让输出obj

33:02.720 --> 33:03.720
是不是交换过来了

33:03.720 --> 33:04.720
为什么这样子

33:04.720 --> 33:05.720
又可以交换呢

33:06.720 --> 33:07.720
那我们又来呗

33:17.140 --> 33:18.140
我们来看

33:18.140 --> 33:19.140
我传的是什么呢

33:19.140 --> 33:20.140
传了

33:20.140 --> 33:21.140
三个东西过去

33:22.140 --> 33:23.140
我们这里有个obj

33:24.140 --> 33:26.140
我们一步过来

33:27.140 --> 33:29.140
这里创下了一个obj

33:30.140 --> 33:31.140
是不是这

33:31.140 --> 33:33.140
那么是不是有两个属性

33:33.140 --> 33:37.540
A等于1

33:38.540 --> 33:41.540
然后B

33:43.540 --> 33:44.540
B等于2

33:45.540 --> 33:46.540
把它保存到哪

33:46.540 --> 33:47.540
保存到obj里边

33:48.540 --> 33:49.540
它是不是有个地址

33:50.540 --> 33:51.540
我就不画这个地址

33:51.540 --> 33:52.540
它就是一个指向

33:52.540 --> 33:53.540
地址就是指向这

33:54.540 --> 33:55.540
没问题吧

33:56.540 --> 33:57.540
接下来我传递

33:58.540 --> 33:59.540
调用函数

33:59.540 --> 34:01.540
把obj传到这里的obj

34:01.540 --> 34:02.540
两个是不一样的

34:03.540 --> 34:06.810
肯定是不一样的

34:06.810 --> 34:07.810
两个是不一样的

34:07.810 --> 34:09.810
这是形参的obj

34:09.810 --> 34:10.810
我打个标注

34:11.810 --> 34:12.810
形参obj

34:13.810 --> 34:14.810
然后把它里边的东西传过

34:14.810 --> 34:15.810
它里面是不是地址

34:15.810 --> 34:16.810
地址传过来

34:16.810 --> 34:17.810
A和B就不用说了

34:18.810 --> 34:19.810
地址是不是传过来了

34:19.810 --> 34:20.810
传过来了过后

34:20.810 --> 34:21.810
是不是它的地址

34:21.810 --> 34:22.810
也指向这儿了

34:23.810 --> 34:24.810
对不对

34:24.810 --> 34:25.810
是不是也指过来了

34:25.810 --> 34:26.810
接下来它里边开始

34:26.810 --> 34:27.810
运行函数了

34:27.810 --> 34:28.810
函数的运行过程中

34:28.810 --> 34:29.810
改变的是谁

34:29.810 --> 34:31.810
改变的是这个obj

34:31.810 --> 34:33.810
的属性1和属性2

34:33.810 --> 34:35.810
交换的是这两个

34:36.810 --> 34:37.810
这两个交换了

34:37.810 --> 34:38.810
交换了过后

34:38.810 --> 34:39.810
是不是这里变成了

34:39.810 --> 34:40.810
这里变成了2

34:40.810 --> 34:41.810
这里变成了1

34:42.810 --> 34:43.810
它交换了过后

34:43.810 --> 34:44.810
它也跟着变了

34:44.810 --> 34:45.810
所以改变的是对象的

34:45.810 --> 34:46.810
属性就没问题

34:47.810 --> 34:48.810
你看

34:49.810 --> 34:50.810
容易了是吧

34:51.810 --> 34:52.810
OK没问题吧

34:52.810 --> 34:54.810
这道题就可以搞定了

34:55.810 --> 34:56.810
好再看第三题

34:56.810 --> 34:58.810
交换数组的两个位置

34:58.810 --> 34:59.810
对吧

34:59.810 --> 35:01.810
就是比方说我这里的一个数组

35:01.810 --> 35:05.760
12345

35:05.760 --> 35:07.760
然后我调用这个函数

35:07.760 --> 35:08.760
把数组传进去

35:08.760 --> 35:10.760
比方说告诉他交换

35:10.760 --> 35:11.760
这两个交换2和3

35:11.760 --> 35:12.760
然后就传一个1

35:12.760 --> 35:13.760
对吧

35:13.760 --> 35:14.760
下标1下标2

35:14.760 --> 35:15.760
你把下标1的位置

35:15.760 --> 35:16.760
和下标2的位置

35:16.760 --> 35:17.760
给我交换

35:18.760 --> 35:19.760
好那我们最终

35:19.760 --> 35:20.760
我再输出一个数组

35:22.760 --> 35:23.760
现在没有交换对吧

35:24.760 --> 35:25.760
我就希望它交换

35:25.760 --> 35:26.760
那这个能不能办到呢

35:27.760 --> 35:28.760
这怎么不能办到的

35:29.760 --> 35:30.760
数组也是对象吗

35:31.760 --> 35:32.760
对象传进去

35:32.760 --> 35:33.760
属性名1

35:35.760 --> 35:36.760
属性名2

35:37.760 --> 35:38.760
所以下标为2的地方

35:38.760 --> 35:40.760
下标不就是属性名吗

35:40.760 --> 35:41.760
而且不仅能办到

35:41.760 --> 35:42.760
这个代表改都不用改

35:43.760 --> 35:44.760
放过来

35:45.760 --> 35:47.760
只不过把Q1变成了什么

35:47.760 --> 35:48.760
变成I1

35:49.760 --> 35:50.760
把Q2变成I2

35:52.760 --> 35:54.760
把OB界变成AR2

35:57.760 --> 35:58.760
一样的

36:00.760 --> 36:01.760
不交换了吧

36:01.760 --> 36:03.760
这个话你不要分析自己去分析

36:03.760 --> 36:05.760
因为它跟对象是一样的

36:06.760 --> 36:07.760
都没问题吧

36:09.760 --> 36:10.760
第四题

36:11.760 --> 36:13.760
第四题是一个经典的一道题

36:13.760 --> 36:16.760
我们编诗题里边也考了很多次了

36:17.760 --> 36:18.760
让你修改对象

36:18.760 --> 36:20.760
仅保留需要的属性

36:20.760 --> 36:21.760
就是给你一个对象

36:21.760 --> 36:22.760
然后给你一个

36:22.760 --> 36:23.760
这里是一个数组

36:23.760 --> 36:25.760
要能看得懂这个注释

36:25.760 --> 36:26.760
这个数组什么意思

36:26.760 --> 36:27.760
一个制服串的数组

36:27.760 --> 36:29.760
就数组里面每一项是个制服串

36:30.760 --> 36:31.760
啥意思呢

36:31.760 --> 36:32.760
就比方说我一个对象

36:33.760 --> 36:35.760
有这么一些属性

36:35.760 --> 36:36.760
A等于1

36:36.760 --> 36:37.760
B等于2

36:37.760 --> 36:38.760
C等于3

36:38.760 --> 36:39.760
D等于4

36:39.760 --> 36:40.760
好

36:40.760 --> 36:41.760
我调用这个函数

36:41.760 --> 36:42.760
pick

36:42.760 --> 36:44.760
这个函数不需要返回

36:45.760 --> 36:47.760
我给它传递一个这个东西

36:47.760 --> 36:48.760
ac

36:49.760 --> 36:51.760
我希望调用这个函数之后

36:51.760 --> 36:53.760
我再打印这个OB界的时候

36:53.760 --> 36:55.760
它得到的对象是这样子的

36:55.760 --> 36:56.760
A等于1

36:56.760 --> 36:57.760
C等于3

36:57.760 --> 36:58.760
就其他属性没了

36:58.760 --> 37:00.760
它只保留了ac

37:00.760 --> 37:01.760
叫pick

37:01.760 --> 37:03.760
pick就相当于是拿对吧

37:03.760 --> 37:05.760
从调减

37:05.760 --> 37:06.760
调减一些

37:06.760 --> 37:07.760
剩下的不要了

37:09.760 --> 37:11.760
那么这个函数咋写了

37:11.760 --> 37:13.760
是不是要更改这个对象

37:14.760 --> 37:15.760
对吧

37:15.760 --> 37:17.760
这种函数有可能

37:17.760 --> 37:19.760
我只能说有可能有同学

37:19.760 --> 37:21.760
可能会写出这样一个代码

37:22.760 --> 37:23.760
怎么写呢

37:24.760 --> 37:26.760
那我就来一个新的对象

37:26.760 --> 37:27.760
对吧

37:27.760 --> 37:28.760
来一个新的对象

37:28.760 --> 37:29.760
6OB界

37:30.760 --> 37:31.760
来个新的对象

37:32.760 --> 37:34.760
然后便利原来的对象

37:36.760 --> 37:37.760
便利原来的对象

37:38.760 --> 37:39.760
Fo循环

37:41.760 --> 37:42.760
A等于0

37:42.760 --> 37:43.760
Fo硬循环

37:43.760 --> 37:45.760
便利原来对象的所有属性

37:45.760 --> 37:49.350
T

37:49.350 --> 37:50.350
硬OB界

37:51.350 --> 37:52.350
这样子不可以打印

37:52.350 --> 37:53.350
我打印一下

37:53.350 --> 37:55.350
有的时候你开发的过程中

37:55.350 --> 37:56.350
可以先打印

37:56.350 --> 37:58.350
ABCC所有属性名出来了

37:59.350 --> 38:00.350
我看一下这个名字

38:00.350 --> 38:02.350
A再不在这个数组里边

38:02.350 --> 38:03.350
再不在这个数组里边

38:03.350 --> 38:04.350
栽的话

38:05.350 --> 38:06.350
我就该夹进去

38:06.350 --> 38:07.350
不栽的话我就不夹

38:08.350 --> 38:09.350
是不是可以

38:10.350 --> 38:11.350
A再不在这个属性里边

38:11.350 --> 38:12.350
栽的话我就往这边夹

38:12.350 --> 38:13.350
不栽的话我就不夹

38:13.350 --> 38:14.350
所以说这里

38:14.350 --> 38:15.350
我们需要判断它再不再

38:15.350 --> 38:16.350
判断它再不再

38:17.350 --> 38:19.350
是不是我们可以单独的写一个函数

38:20.350 --> 38:22.350
而且这个函数是不是我们之前还写过的

38:22.350 --> 38:23.350
哪里写过的

38:26.620 --> 38:28.620
我们之前练习题讲解

38:36.780 --> 38:37.780
是不是这个函数

38:39.780 --> 38:40.780
就是这个函数

38:40.780 --> 38:41.780
你可以把这个函数直接拿过来用

38:41.780 --> 38:42.780
当然你可以再重新写一次

38:43.780 --> 38:45.780
你没必要在这里边再去展开写了

38:45.780 --> 38:46.780
拿过来用

38:47.780 --> 38:48.780
给我一个数组

38:48.780 --> 38:49.780
我判断这个数组里边

38:49.780 --> 38:50.780
这个东西存不存在

38:50.780 --> 38:51.780
存在的话就返回

38:51.780 --> 38:52.780
不存在就返回Force

38:52.780 --> 38:54.780
写好了我就不去看它了

38:55.780 --> 38:56.780
那我这里怎么判断

38:56.780 --> 38:58.780
我要判断这个玩意

38:58.780 --> 38:59.780
在这里边是不是存在

38:59.780 --> 39:00.780
对吧

39:00.780 --> 39:02.780
所以说判断Include

39:02.780 --> 39:03.780
Tis

39:03.780 --> 39:04.780
T

39:05.780 --> 39:06.780
是不是就是判断

39:06.780 --> 39:07.780
它在它里面存不存在

39:07.780 --> 39:09.780
如果说存在怎么办

39:09.780 --> 39:11.780
是不是往6OB借里面加一下

39:12.780 --> 39:15.420
6OB借

39:15.420 --> 39:16.420
里边

39:17.420 --> 39:18.420
这个属性等于什么

39:18.420 --> 39:20.420
等于OB借T

39:21.420 --> 39:22.420
对吧

39:22.420 --> 39:24.420
属性名还是用原来的属性名

39:24.420 --> 39:26.420
属性值还是用原来的属性值

39:27.420 --> 39:28.420
只要你存在

39:28.420 --> 39:29.420
在这里面存在这个属性

39:29.420 --> 39:31.420
就表示这个属性是我想要的

39:31.420 --> 39:32.420
想要的属性

39:32.420 --> 39:33.420
想要的属性我就给它

39:33.420 --> 39:34.420
加到新对象里面

39:34.420 --> 39:36.420
这样子一循环结束

39:36.420 --> 39:37.420
我这个新对象里面就是

39:37.420 --> 39:38.420
我们想要的东西

39:39.420 --> 39:40.420
你看是不是就A-HC了

39:41.420 --> 39:42.420
对吧

39:42.420 --> 39:43.420
那么现在问题来了

39:43.420 --> 39:44.420
我怎么来改它

39:44.420 --> 39:45.420
对吧

39:45.420 --> 39:47.420
因为我要去修改原来的对象

39:47.420 --> 39:48.420
修改原来的对象

39:48.420 --> 39:49.420
我怎么去改它

39:49.420 --> 39:50.420
原来就这样子写

39:50.420 --> 39:52.420
OB借等于6OB借

39:53.420 --> 39:54.420
不就改过来了吗

39:55.420 --> 39:56.420
那我们看改过来没有

39:57.420 --> 39:58.420
改过来没有

39:58.420 --> 39:59.420
没有改过来

39:59.420 --> 40:00.420
所以我们再重申一次

40:00.420 --> 40:01.420
像这些核心概念

40:01.420 --> 40:02.420
我们讲的是什么

40:03.420 --> 40:04.420
讲的是魔法

40:05.420 --> 40:06.420
那魔法有什么用

40:06.420 --> 40:09.420
遇到那种物理抗性很足的

40:10.420 --> 40:12.420
就要用魔法去分析

40:13.420 --> 40:14.420
它到底是怎么回事

40:15.420 --> 40:16.420
那么现在就要来分析了

40:16.420 --> 40:17.420
那颗里肯定是

40:17.420 --> 40:18.420
涉及到值和应用的问题了

40:19.420 --> 40:20.420
来吧

40:26.380 --> 40:27.380
我们就看这一坨

40:28.380 --> 40:30.380
把这一块结出来

40:35.890 --> 40:36.890
来吧

40:36.890 --> 40:37.890
就直接删了

40:41.220 --> 40:42.220
前面的函数定义不用看

40:42.220 --> 40:44.220
就看下面的

40:44.220 --> 40:45.220
函数要调用的时候

40:45.220 --> 40:46.220
才有意义

40:46.220 --> 40:47.220
这里有个对象

40:47.220 --> 40:49.220
ABCD4个属性

40:50.220 --> 40:52.220
这里有ABCD4个属性

40:53.220 --> 40:55.220
那么我这里为了简单

40:56.220 --> 40:58.220
我还是一个来吧

40:59.220 --> 41:00.220
有的时候在纸上画

41:00.220 --> 41:02.220
可以稍微画得了草有点

41:02.220 --> 41:04.220
只要能自己能看得懂就行了

41:05.220 --> 41:07.220
比方说我现在可以这样画

41:07.220 --> 41:08.220
我们画一个

41:08.220 --> 41:10.220
如果说我来分析这些问题的时候

41:10.220 --> 41:11.220
我可以这样来写

41:11.220 --> 41:12.220
我有个对象

41:12.220 --> 41:13.220
出来了

41:13.220 --> 41:14.220
A等于1

41:15.220 --> 41:16.220
B等于2

41:18.220 --> 41:20.220
然后C等于3

41:21.220 --> 41:22.220
D等于4

41:24.540 --> 41:25.540
我有这么一个对象

41:25.540 --> 41:27.540
现在我有一个就是OBC

41:28.540 --> 41:30.540
那么这个OBC要指向谁

41:30.540 --> 41:31.540
指向的就是对象

41:32.540 --> 41:33.540
对吧 指向对象

41:34.540 --> 41:35.540
然后接下来

41:35.540 --> 41:36.540
我还要把OBC传到这

41:36.540 --> 41:38.540
传到这个形参OBC

41:39.540 --> 41:43.870
这样自己传过去

41:43.870 --> 41:44.870
是不是现在形参

41:44.870 --> 41:45.870
它里面也是个地址

41:45.870 --> 41:46.870
也是指向对象的

41:47.870 --> 41:49.870
那么接下来就是玩了

41:49.870 --> 41:51.870
接下来一个6OBC

41:51.870 --> 41:53.870
6OBC是不是一个新的对象

41:54.870 --> 41:55.870
是不是一个新的对象

41:55.870 --> 41:56.870
这是个空对象

41:56.870 --> 41:57.870
是个新的对象

41:57.870 --> 41:59.870
新的对象也是数据

41:59.870 --> 42:02.870
你在内存里不要占有自己的位置

42:02.870 --> 42:10.790
6OBC

42:10.790 --> 42:11.790
在纸上画的时候

42:11.790 --> 42:12.790
就不用画得那么严格

42:12.790 --> 42:15.790
但是到底是要画出来的

42:15.790 --> 42:17.790
形参是不是也指向这

42:17.790 --> 42:19.790
好 现在6OBC是不是指向这

42:19.790 --> 42:23.170
接下来经过一系列的循环

42:23.170 --> 42:25.170
循环谁 循环那个形参

42:25.170 --> 42:27.170
循环形参是不是循环对象

42:27.170 --> 42:29.170
然后一个个往OBC里面放

42:29.170 --> 42:30.170
6OBC里面放

42:30.170 --> 42:31.170
你知道最终放完了之后

42:31.170 --> 42:33.170
6OBC里面是不是这个

42:33.170 --> 42:34.170
A等于1

42:34.170 --> 42:36.170
C等于3

42:36.170 --> 42:37.170
6OBC里面的东西

42:38.170 --> 42:40.170
好 接下来做了这么一件事

42:40.170 --> 42:43.170
把6OBC复制给OBC

42:43.170 --> 42:44.170
那么这样子一来

42:44.170 --> 42:45.170
是不是把6OBC的地址

42:45.170 --> 42:47.170
这里面是不是保存的地址

42:47.170 --> 42:49.170
复制给谁 复制给他

42:49.170 --> 42:52.170
把他之前的地址复改掉了

42:52.170 --> 42:54.170
于是他之前的地址

42:54.170 --> 42:56.170
变成了这样子的

42:56.170 --> 42:57.170
现在的地址变成这样子

42:57.170 --> 43:00.170
也跟6OBC一样指向这个对象的

43:00.170 --> 43:02.170
懂了意思吗 看懂了吗

43:02.170 --> 43:03.170
你改来改去

43:03.170 --> 43:05.170
你说改的还是形参

43:06.170 --> 43:08.170
你说改的还是形参

43:08.170 --> 43:10.170
影响到他了吗

43:10.170 --> 43:11.170
没有影响到他

43:11.170 --> 43:13.170
说大家写久了程序

43:13.170 --> 43:16.170
你会发现有这么一条一个现象

43:16.170 --> 43:18.170
就是在函数里边

43:18.170 --> 43:19.170
你能不能改

43:19.170 --> 43:21.170
就是你改形参可以改

43:21.170 --> 43:22.170
但是你一定要知道

43:22.170 --> 43:24.170
你只要给形参重新复制

43:24.170 --> 43:25.170
就直接重新复制

43:25.170 --> 43:27.170
而不是给他里边重新复制

43:27.170 --> 43:29.170
所以直接给形参重新复制

43:29.170 --> 43:31.170
对外面没有丝毫的影响

43:33.170 --> 43:35.170
你只要知道这一点就行了

43:35.170 --> 43:38.170
在函数里面给形参重新复制

43:38.170 --> 43:39.170
丝毫不影响外面

43:39.170 --> 43:41.170
就跟外面断绝了

43:41.170 --> 43:42.170
断绝关系了

43:42.170 --> 43:44.170
外面刚传过来的

43:44.170 --> 43:46.170
之前的东西就跟他没关系了

43:46.170 --> 43:48.170
因为你重新复制

43:48.170 --> 43:50.170
懂了意思吧

43:50.170 --> 43:52.170
好 那么现在这道题该怎么做呢

43:53.170 --> 43:54.170
那我们来看一下

43:54.170 --> 43:55.170
刚才的分析

43:56.170 --> 44:00.700
那我们该怎么做呢

44:00.700 --> 44:01.700
这道题

44:01.700 --> 44:02.700
这道题呢

44:02.700 --> 44:05.700
你就不要去产生什么新的对象了

44:05.700 --> 44:07.700
你就在原来的对象里边玩

44:09.700 --> 44:10.700
形参本来他就是

44:10.700 --> 44:11.700
两个都指向同一个对象了

44:11.700 --> 44:12.700
对吧

44:12.700 --> 44:13.700
本来就是指向一个的

44:13.700 --> 44:15.700
你不要给他重新复制了

44:15.700 --> 44:17.700
你复制没用的

44:17.700 --> 44:18.700
那怎么办呢

44:18.700 --> 44:20.700
那你就在里边玩

44:20.700 --> 44:21.700
看一个属向

44:21.700 --> 44:23.700
他OK就不动他

44:23.700 --> 44:24.700
他没有

44:24.700 --> 44:25.700
还不行

44:25.700 --> 44:27.700
那就把它删掉

44:27.700 --> 44:28.700
对吧

44:28.700 --> 44:29.700
他OK就不动他

44:29.700 --> 44:31.700
他不行就把它删掉

44:31.700 --> 44:34.700
这样就可以直接改动原来的对象了

44:34.700 --> 44:36.700
只要这么去玩

44:36.700 --> 44:37.700
就是你要分析出原因

44:37.700 --> 44:39.700
你才找得到解决办法

44:39.700 --> 44:40.700
那怎么办呢

44:40.700 --> 44:42.700
我就直接循环这个对象

44:42.700 --> 44:44.700
如果说他不保含

44:44.700 --> 44:46.700
就是不保留

44:46.700 --> 44:48.700
不保留

44:48.700 --> 44:50.700
持属性

44:50.700 --> 44:52.700
你这不是要保留的属性吗

44:52.700 --> 44:53.700
对吧

44:53.700 --> 44:54.700
你不保留这个属性

44:54.700 --> 44:56.700
那我就给你删掉

44:56.700 --> 45:01.860
定位置

45:01.860 --> 45:03.860
那现在就没问题了

45:03.860 --> 45:05.860
因为他们三对象

45:05.860 --> 45:06.860
从对象里边删掉属性

45:06.860 --> 45:07.860
跟那边是一样的

45:07.860 --> 45:08.860
跟这个对象是一样的

45:08.860 --> 45:10.860
这个OB界是这个对象

45:10.860 --> 45:12.860
这边的OB界也是这个对象

45:12.860 --> 45:13.860
对吧

45:13.860 --> 45:15.860
通过它去删它的属性

45:15.860 --> 45:17.860
会影响到它

45:17.860 --> 45:19.860
懂了意思吧

45:19.860 --> 45:21.860
OK 我们这四道练习题就做完了

45:21.860 --> 45:24.860
做这四道练习题的目的

45:24.860 --> 45:25.860
事要告诉大家

45:25.860 --> 45:26.860
我们在程序开发的时候

45:26.860 --> 45:28.860
过程中可能会预测到

45:28.860 --> 45:29.860
一些意想不到的问题

45:29.860 --> 45:31.860
这些问题就必须要通过

45:31.860 --> 45:33.860
这些概念和原理的方式

45:33.860 --> 45:35.860
来去分析

45:35.860 --> 45:36.860
不然的话

45:36.860 --> 45:37.860
你遇到问题不知道怎么办

45:37.860 --> 45:39.860
你只能往上提

45:39.860 --> 45:40.860
这个问题我解决不了

45:40.860 --> 45:41.860
或者是往里面的同事

45:41.860 --> 45:43.860
那你永远没有什么价值

45:43.860 --> 45:44.860
你只能解决

45:44.860 --> 45:49.500
所有人都能解决到你能解决

45:49.500 --> 45:51.500
其他比较小众的问题

45:51.500 --> 45:52.500
其他人能解决你解决不了

45:52.500 --> 45:54.500
你就没有什么价值

45:54.500 --> 45:56.500
好 我们来看面试题

45:56.500 --> 45:57.500
这里有三道面试题

45:57.500 --> 45:58.500
这些三道面试题

45:58.500 --> 46:01.500
都是对值和引用的顶级难度

46:01.500 --> 46:03.500
顶级难度也不过如此

46:03.500 --> 46:05.500
你会发现真的不过如此

46:05.500 --> 46:06.500
这里有大厂的面试题

46:06.500 --> 46:07.500
一个是心动的

46:07.500 --> 46:09.500
一个是字节的

46:09.500 --> 46:10.500
你会发现这两方面

46:10.500 --> 46:11.500
真的不过如此

46:11.500 --> 46:13.500
只要我们用图来画来分析

46:13.500 --> 46:15.500
它也不过如此

46:15.500 --> 46:16.500
我们来看地道题

46:16.500 --> 46:17.500
地道题是哪来的

46:17.500 --> 46:19.500
我忘了 也是大面试题

46:19.500 --> 46:23.130
他问你最多输出结果是啥

46:23.130 --> 46:26.630
同学们也可以暂停

46:26.630 --> 46:28.630
视频来看一下

46:28.630 --> 46:29.630
这个要画图的

46:29.630 --> 46:30.630
你最一定要画图

46:30.630 --> 46:31.630
你不画图的话

46:31.630 --> 46:32.630
你脑袋要晕

46:32.630 --> 46:33.630
因为这种情形是要绕晕你的

46:33.630 --> 46:34.630
它会各种绕的

46:34.630 --> 46:36.630
不管它绕的层次有多深

46:36.630 --> 46:37.630
它怎么去绕

46:37.630 --> 46:38.630
你只要画图

46:38.630 --> 46:40.630
就没有解决不了的问题

46:40.630 --> 46:42.630
好 我们来现在画个图

46:42.630 --> 46:43.630
第一句话

46:43.630 --> 46:45.630
右边那个对象是啥

46:45.630 --> 46:47.630
是N等于

46:47.630 --> 46:48.630
你看

46:48.630 --> 46:51.630
N等于

46:51.630 --> 46:55.630
我就简单的这样子画一下

46:55.630 --> 47:00.930
懂得意思就行了

47:00.930 --> 47:04.560
把字体稍微挑大一点

47:04.560 --> 47:07.560
N为多少

47:07.560 --> 47:09.560
为0

47:09.560 --> 47:12.560
然后我把文本也挑一下

47:12.560 --> 47:20.770
还是举中吧

47:20.770 --> 47:21.770
N等于0

47:21.770 --> 47:23.770
然后K

47:23.770 --> 47:24.770
K是啥呢

47:24.770 --> 47:26.770
K是一个地址

47:26.770 --> 47:27.770
K是不是地址

47:27.770 --> 47:29.770
肯定是个地址

47:29.770 --> 47:31.770
这个地址是不是指向一个新的对象

47:31.770 --> 47:34.770
这个新的对象里边也有一个N

47:34.770 --> 47:36.770
N等于0

47:36.770 --> 47:38.770
所以这样子画出来了

47:38.770 --> 47:40.770
我们再打上一个箭头

47:40.770 --> 47:44.270
再打上一个箭头

47:44.270 --> 47:46.270
箭头指向这个对象

47:46.270 --> 47:48.270
然后这里是这个地址

47:48.270 --> 47:49.270
不出来了吗

47:49.270 --> 47:50.270
这个结果就出来了

47:50.270 --> 47:52.270
然后给它给谁负责

47:52.270 --> 47:54.270
给这个负负责

47:54.270 --> 47:56.270
就没有解决不了的问题

47:56.270 --> 47:58.270
这种画图

47:58.270 --> 47:59.270
它可能会慢一点

47:59.270 --> 48:02.270
但是慢一点它不会出错

48:02.270 --> 48:04.270
你特别心急的在头脑里面一想

48:04.270 --> 48:06.270
就给它写个答案出来

48:06.270 --> 48:08.270
18就都要出问题

48:08.270 --> 48:10.270
那这里边说也是地址

48:10.270 --> 48:12.270
这个地址指向谁啊

48:12.270 --> 48:14.270
指向这个对象

48:14.270 --> 48:16.270
这结果不就出来了吗

48:16.270 --> 48:18.270
那画图万无一失

48:18.270 --> 48:19.270
负责K

48:19.270 --> 48:21.270
那负责K你看一下

48:21.270 --> 48:22.270
负责K

48:22.270 --> 48:24.270
想把这个地址负责给谁呢

48:24.270 --> 48:26.270
负责给另外一个变相叫BAR

48:26.270 --> 48:28.270
好来呗

48:28.270 --> 48:33.660
这叫BAR

48:33.660 --> 48:34.660
它里面说也是个地址

48:34.660 --> 48:35.660
这个地址是谁

48:35.660 --> 48:36.660
是哪个地址

48:36.660 --> 48:37.660
是不是这个地址

48:37.660 --> 48:38.660
负责K

48:38.660 --> 48:40.660
是不是把它的地址

48:40.660 --> 48:43.660
把它的地址负责给BAR

48:43.660 --> 48:44.660
那么这样一来

48:44.660 --> 48:46.660
BAR的地址是不是也指向了

48:46.660 --> 48:49.360
这个对象了

48:49.360 --> 48:50.360
对吧

48:50.360 --> 48:51.360
好接下来

48:51.360 --> 48:53.360
BAR.N++

48:53.360 --> 48:55.360
那它是不是变成1

48:58.570 --> 49:01.570
然后BAR又重新负责给谁

49:01.570 --> 49:03.570
重新负责一个新的对象

49:03.570 --> 49:05.570
看来又产生一个新的对象了

49:05.570 --> 49:07.570
N等于10

49:07.570 --> 49:09.570
又是一个新的对象

49:09.570 --> 49:13.570
这个对象一般N等于10

49:13.570 --> 49:14.570
把BAR重新负责了

49:14.570 --> 49:15.570
负责到过去

49:15.570 --> 49:16.570
之前的地址就覆盖掉了

49:16.570 --> 49:18.570
把它的地址就重新覆盖掉它

49:18.570 --> 49:20.570
是不是它现在就指向这了

49:20.570 --> 49:23.010
好接下来

49:23.010 --> 49:25.010
负又负责给BAR

49:25.010 --> 49:27.010
又把它的地址

49:27.010 --> 49:28.010
又负责粘贴过来

49:28.010 --> 49:30.010
是不是它的地址又变了

49:30.010 --> 49:31.010
它的地址是指向它的

49:31.010 --> 49:32.010
对吧

49:32.010 --> 49:34.010
它的地址是不是又变了

49:34.010 --> 49:36.010
不管它怎么绕

49:36.010 --> 49:38.010
一步步来

49:38.010 --> 49:40.010
好又来BAR.N++

49:40.010 --> 49:42.010
那么它的地址N++是不是加2

49:42.010 --> 49:44.010
加到1

49:44.010 --> 49:47.010
然后又把负.N负责给BAR

49:47.010 --> 49:48.010
负责N是什么

49:48.010 --> 49:50.010
负.N是不是这个1

49:50.010 --> 49:51.010
把这个1负责给BAR

49:51.010 --> 49:52.010
它本来是对象的

49:52.010 --> 49:54.010
现在把地址干掉

49:54.010 --> 49:55.010
变成了什么

49:55.010 --> 49:56.010
变成1了

49:56.010 --> 49:57.010
那现在还是不是地址

49:57.010 --> 49:58.010
那就不是地址了

49:58.010 --> 50:00.010
它里面存了一个1

50:00.010 --> 50:01.010
对吧

50:01.010 --> 50:03.010
负.N负责给BAR

50:03.010 --> 50:04.010
好接下来BAR++

50:04.010 --> 50:05.010
它自己加1

50:05.010 --> 50:07.010
所以变成2

50:07.010 --> 50:08.010
好最后输出

50:08.010 --> 50:09.010
输出什么了

50:09.010 --> 50:11.010
负.N是不是输出1

50:11.010 --> 50:13.010
负.K.N

50:13.010 --> 50:15.010
负.K.N

50:15.010 --> 50:17.010
是不是也是输出1

50:17.010 --> 50:18.010
对吧

50:18.010 --> 50:19.010
输出两个1

50:19.010 --> 50:20.010
那不就完事了吗

50:20.010 --> 50:23.010
所以这到底输出两个1

50:23.010 --> 50:26.010
这样的分析万无一时

50:26.010 --> 50:27.010
平时我们会写得那么难吗

50:27.010 --> 50:28.010
绝对不会写

50:28.010 --> 50:29.010
那面试下来

50:29.010 --> 50:31.010
可能会用这种方式来绕理

50:31.010 --> 50:32.010
就你能这样子分

50:32.010 --> 50:33.010
都能分析得出来

50:33.010 --> 50:34.010
就没啥问题了

50:34.010 --> 50:35.010
我们来看一下

50:35.010 --> 50:37.010
这函数的关系

50:39.010 --> 50:41.010
接下来我就用那个技式本

50:41.010 --> 50:42.010
我就不去画图了

50:42.010 --> 50:46.980
用技式本来写

50:46.980 --> 50:47.980
好有来

50:47.980 --> 50:49.980
有一个负

50:49.980 --> 50:51.980
它里面存的是一个

50:51.980 --> 50:55.260
我用地址吗

50:55.260 --> 50:58.260
我就用ADDR1

50:58.260 --> 51:00.260
它里面存的是什么

51:00.260 --> 51:01.260
地址1

51:01.260 --> 51:02.260
ADDR1

51:02.260 --> 51:04.260
那么ADDR1是个对象

51:04.260 --> 51:05.260
这个地址1是个对象

51:05.260 --> 51:08.260
对象里面有个N等于1

51:08.260 --> 51:09.260
好接下来

51:09.260 --> 51:11.260
ARR

51:11.260 --> 51:12.260
ARR是什么

51:12.260 --> 51:13.260
是一个数组

51:13.260 --> 51:15.260
数组我用ADDR2

51:15.260 --> 51:17.260
这是一个数组

51:17.260 --> 51:20.260
数组我也把它写成对象的形式吧

51:20.260 --> 51:21.260
数组的第一项

51:21.260 --> 51:23.260
就零这一项是什么

51:23.260 --> 51:24.260
是负

51:24.260 --> 51:26.260
它把负放到第零下

51:26.260 --> 51:28.260
这是啥意思

51:28.260 --> 51:30.260
它是不是这个意思

51:30.260 --> 51:32.260
不是哪有这种写法

51:32.260 --> 51:33.260
它是把这个是什么

51:33.260 --> 51:34.260
负里面是什么

51:34.260 --> 51:36.260
负里面是个地址1

51:36.260 --> 51:37.260
对不对

51:37.260 --> 51:39.260
把地址1放这

51:39.260 --> 51:41.260
说数组的第零下是什么

51:41.260 --> 51:42.260
是一个对象

51:42.260 --> 51:43.260
它是一个地址

51:43.260 --> 51:46.260
这个地址指向一个对象

51:46.260 --> 51:47.260
看到没有

51:47.260 --> 51:48.260
是这个意思

51:48.260 --> 51:49.260
好上面三个函数

51:49.260 --> 51:50.260
现在看着难得看着

51:50.260 --> 51:51.260
好现在要用第1个函数

51:51.260 --> 51:52.260
MS1

51:52.260 --> 51:54.260
把ARR传进去

51:54.260 --> 51:56.260
好现在有个形参

51:56.260 --> 51:57.260
这里是ADDR2

51:57.260 --> 51:59.260
是数组的地址

51:59.260 --> 52:01.260
是数组的地址

52:01.260 --> 52:05.260
好有个形参ARR

52:05.260 --> 52:08.260
我们就慢慢来分析吧

52:08.260 --> 52:10.260
这个形参ARR传过来了

52:10.260 --> 52:11.260
把谁传过来了

52:11.260 --> 52:13.260
把这个ARR传过来了

52:13.260 --> 52:15.260
ARR的这个地址2传过来了

52:15.260 --> 52:17.260
好现在形参ARR

52:17.260 --> 52:18.260
是不是也指向这个

52:18.260 --> 52:19.260
好来吧

52:19.260 --> 52:20.260
我们看一下这里边写的

52:20.260 --> 52:21.260
什么乱七八糟的

52:21.260 --> 52:22.260
又写了一大堆

52:22.260 --> 52:23.260
好这个

52:23.260 --> 52:25.260
这里有个局部变量BAR

52:25.260 --> 52:28.260
叫函数里面的局部变量BAR

52:28.260 --> 52:29.260
来自于什么呢

52:29.260 --> 52:33.260
来自ARR这个形参ARR的0

52:33.260 --> 52:36.260
ARR是不是这个关联起来的

52:36.260 --> 52:37.260
0是什么

52:37.260 --> 52:38.260
ADDR1

52:38.260 --> 52:39.260
ADDR1

52:39.260 --> 52:41.260
这样子分析万物一事

52:41.260 --> 52:43.260
然后再把ARR

52:43.260 --> 52:45.260
是不是这个形参

52:45.260 --> 52:46.260
形参是谁

52:46.260 --> 52:47.260
是不是这个玩意

52:47.260 --> 52:50.260
给他加一项BARR

52:50.260 --> 52:51.260
是不是加了一项

52:51.260 --> 52:53.260
数组里面多了一项

52:53.260 --> 52:54.260
多了一项1是

52:54.260 --> 52:55.260
第二项是什么

52:55.260 --> 52:56.260
第二项加的是什么

52:56.260 --> 52:57.260
加的是BAR

52:57.260 --> 52:58.260
BAR是什么

52:58.260 --> 53:00.260
ADDR1是不是还是ADDR1

53:00.260 --> 53:02.260
好接下来又来玩

53:02.260 --> 53:04.260
它一定会往实力招的

53:04.260 --> 53:08.260
BAR.NBAR

53:08.260 --> 53:09.260
是什么

53:09.260 --> 53:10.260
是这个玩意吗

53:10.260 --> 53:11.260
N是什么

53:11.260 --> 53:12.260
N就这么

53:12.260 --> 53:13.260
加1

53:13.260 --> 53:16.260
变成2

53:16.260 --> 53:17.260
没问题吧

53:17.260 --> 53:20.260
然后ARR

53:20.260 --> 53:21.260
这什么ARR

53:21.260 --> 53:22.260
是不是形参ARR

53:22.260 --> 53:24.260
重新复制一个新数组

53:24.260 --> 53:25.260
看到没

53:25.260 --> 53:26.260
新数组产生了

53:26.260 --> 53:28.260
看到两个综扩号就是新数组

53:28.260 --> 53:31.260
看到两个大扩号就是新对象

53:31.260 --> 53:33.260
新数组产生了

53:33.260 --> 53:35.260
新数组里边什么

53:35.260 --> 53:36.260
D零像是什么

53:36.260 --> 53:37.260
BAR

53:37.260 --> 53:38.260
BAR是什么

53:38.260 --> 53:40.260
ADDR1

53:40.260 --> 53:41.260
好

53:41.260 --> 53:42.260
那么现在的形参在一块

53:42.260 --> 53:45.260
变成ADDR3了

53:45.260 --> 53:46.260
所以变成那个

53:46.260 --> 53:48.260
第三个地址了

53:48.260 --> 53:49.260
你们要

53:49.260 --> 53:51.260
刚才那种方式去画图也可以

53:51.260 --> 53:53.260
慢慢画

53:53.260 --> 53:55.260
熟悉了过后就用这种方式

53:55.260 --> 53:57.260
这种方式虽然没有那么直观

53:57.260 --> 53:59.260
但是写的快

53:59.260 --> 54:01.260
画图的慢一些

54:01.260 --> 54:02.260
好了

54:02.260 --> 54:03.260
那么现在就是这个东西

54:03.260 --> 54:04.260
形参

54:04.260 --> 54:05.260
是不是指向这个了

54:05.260 --> 54:07.260
指向这个新数组了

54:07.260 --> 54:08.260
好接下来

54:08.260 --> 54:11.260
一往个数组里边加一项BAR

54:11.260 --> 54:14.260
说往新数组里边加一项BAR

54:14.260 --> 54:15.260
BAR是什么

54:15.260 --> 54:16.260
ADDR1

54:16.260 --> 54:18.260
然后找到这个数组的第二项

54:18.260 --> 54:19.260
找到第二项

54:19.260 --> 54:20.260
第二项是什么

54:20.260 --> 54:21.260
ADDR1

54:21.260 --> 54:22.260
找到这个ADDR1是什么

54:22.260 --> 54:23.260
是个对象

54:23.260 --> 54:25.260
对象的什么N属性

54:25.260 --> 54:27.260
加一变成3

54:27.260 --> 54:29.260
韩数运行结束

54:29.260 --> 54:31.260
韩数运行结束

54:31.260 --> 54:32.260
形参消失

54:32.260 --> 54:34.260
里边的局部变量消失

54:34.260 --> 54:35.260
然后这里边

54:35.260 --> 54:39.260
定义的天端起跑道的对象消失

54:39.260 --> 54:41.260
没事的一运行完成

54:41.260 --> 54:44.570
没事的二

54:44.570 --> 54:45.570
又来

54:45.570 --> 54:46.570
又把副传过去

54:46.570 --> 54:48.570
又变成一个形参副

54:51.140 --> 54:54.900
然后里边副是

54:54.900 --> 54:55.900
副是ADDR1

54:55.900 --> 54:56.900
就传过去了

54:56.900 --> 54:58.900
副是粘贴过去了

54:58.900 --> 54:59.900
好接下来

54:59.900 --> 55:01.900
又来副.N++

55:01.900 --> 55:04.900
那就是ADDR1的N++

55:04.900 --> 55:05.900
等于是

55:05.900 --> 55:07.900
韩数运行结束

55:07.900 --> 55:08.900
形参消失

55:08.900 --> 55:09.900
没事的三

55:09.900 --> 55:11.900
把副.N傳进去

55:11.900 --> 55:13.900
副ADDR1N是什么

55:13.900 --> 55:14.900
传到什么

55:14.900 --> 55:16.900
传到形参N

55:16.900 --> 55:18.900
那形参N是什么

55:18.900 --> 55:19.900
不就是4吗

55:19.900 --> 55:20.900
它不是地址

55:20.900 --> 55:22.900
是副.N把这个4传过去了

55:22.900 --> 55:24.900
那形参N不就是4吗

55:24.900 --> 55:26.900
N++把它变成5

55:26.900 --> 55:28.900
变成5过后运行结束

55:28.900 --> 55:30.900
运行结束它消失

55:30.900 --> 55:31.900
最后问你

55:31.900 --> 55:33.900
副.N是多少

55:33.900 --> 55:35.900
副.N不就是4吗

55:35.900 --> 55:36.900
ARLN是多少

55:36.900 --> 55:38.900
ARLN不就是两个

55:38.900 --> 55:39.900
两项吗

55:39.900 --> 55:40.900
4和2

55:40.900 --> 55:41.900
也就

55:41.900 --> 55:42.900
京东的

55:42.900 --> 55:43.900
也就5

55:43.900 --> 55:45.900
1不过5是4吗

55:45.900 --> 55:46.900
它5非就是想

55:46.900 --> 55:47.900
把你多招一下

55:47.900 --> 55:48.900
你不能把一招运

55:48.900 --> 55:49.900
你画图

55:49.900 --> 55:50.900
你先用这种方式来写

55:50.900 --> 55:51.900
你数一遍它怎么招

55:51.900 --> 55:53.900
它都不可能把一招运的

55:53.900 --> 55:55.900
那也就不过5是4吗

55:55.900 --> 55:56.900
一个大成连实体

55:56.900 --> 55:57.900
然后下面这个字节的

55:57.900 --> 55:58.900
去看一下吧

55:58.900 --> 56:01.900
你们要不要让自己去招一招

56:01.900 --> 56:03.900
因为这个函数你们可能没学过

56:03.900 --> 56:05.900
这个没学过

56:05.900 --> 56:07.900
这里要给大家说一说

56:07.900 --> 56:09.900
这个函数你们之后才会学

56:09.900 --> 56:11.900
但是它核心考的不是这个函数

56:11.900 --> 56:12.900
还是考的值和引用

56:12.900 --> 56:14.900
那又来呗

56:14.900 --> 56:16.900
因为这个函数你们不知道

56:16.900 --> 56:18.900
首先一个副

56:18.900 --> 56:19.900
来一个对象

56:19.900 --> 56:21.900
对象里面有一个属性

56:21.900 --> 56:23.900
8 2 1

56:23.900 --> 56:24.900
那么这个对象

56:24.900 --> 56:26.900
A D D R 1对吧

56:26.900 --> 56:27.900
地址吗

56:27.900 --> 56:28.900
它里面放的是什么

56:28.900 --> 56:29.900
放的是个地址

56:29.900 --> 56:30.900
没问题吧

56:30.900 --> 56:32.900
然后接下来A R 2 1

56:32.900 --> 56:33.900
A R 2 1

56:33.900 --> 56:35.900
里面是个数组

56:35.900 --> 56:36.900
数组

56:36.900 --> 56:38.900
数组是不是一个对象

56:38.900 --> 56:40.900
数组的第一项是啥

56:40.900 --> 56:41.900
第一项是1

56:41.900 --> 56:43.900
第二项是啥

56:43.900 --> 56:45.900
第二项是2

56:45.900 --> 56:46.900
第三项是啥

56:46.900 --> 56:47.900
第三项是这个副

56:47.900 --> 56:48.900
副是啥

56:48.900 --> 56:50.900
A D D R 1

56:50.900 --> 56:52.900
不就写出来了吗

56:52.900 --> 56:53.900
那么这个A R 1是

56:53.900 --> 56:55.900
A D D R 2

56:55.900 --> 56:57.900
好 A R 2

56:57.900 --> 56:58.900
这就要给大家说一下

56:58.900 --> 56:59.900
这个函数

56:59.900 --> 57:00.900
这个是什么意思

57:00.900 --> 57:02.900
这个表示数组的结取

57:02.900 --> 57:04.900
就是在原有数组

57:04.900 --> 57:07.900
A R 1的这个数组的基础上

57:07.900 --> 57:09.900
结取从下标1的位置

57:09.900 --> 57:10.900
开始结取

57:10.900 --> 57:11.900
下标1的位置开始结取

57:11.900 --> 57:12.900
就把这两个结出来

57:12.900 --> 57:14.900
形成一个新数组

57:14.900 --> 57:16.900
所以它会形成一个新数组

57:16.900 --> 57:19.900
1 2

57:19.900 --> 57:21.900
就是把这个东西粘过来

57:21.900 --> 57:23.900
它会形成一个新数组

57:23.900 --> 57:27.720
把新数组返回

57:27.720 --> 57:28.720
也就是把这个A D D R 3返回

57:28.720 --> 57:29.720
它就起这么个作用

57:29.720 --> 57:30.720
后面我们会说

57:30.720 --> 57:31.720
它不会改动原来的数组的

57:31.720 --> 57:33.720
它会形成一个新数组

57:33.720 --> 57:34.720
好 把这个返回来的新数组

57:34.720 --> 57:35.720
A D D R 3

57:35.720 --> 57:36.720
副是给谁

57:36.720 --> 57:38.720
副是给他

57:38.720 --> 57:40.720
就形成这么一种节奏了

57:40.720 --> 57:45.250
好 现在开始玩了

57:45.250 --> 57:46.250
你开始玩了

57:46.250 --> 57:47.250
你把这个都划出来

57:48.250 --> 57:50.250
A R 2

57:50.250 --> 57:51.250
是不是这个玩意

57:51.250 --> 57:52.250
是不是这个玩意

57:52.250 --> 57:53.250
它的第几项

57:53.250 --> 57:54.250
第零项

57:54.250 --> 57:55.250
是不是这个玩意加加

57:55.250 --> 57:56.250
变成3

57:56.250 --> 57:58.250
然后A R 2

57:58.250 --> 57:59.250
是不是还是这个玩意

57:59.250 --> 58:00.250
第一项

58:00.250 --> 58:01.250
第一项的是A D D R 1

58:01.250 --> 58:02.250
是不是找到这个对象的

58:02.250 --> 58:03.250
这个对象的什么

58:03.250 --> 58:04.250
BAR加1

58:04.250 --> 58:05.250
所以它变成2

58:05.250 --> 58:07.250
然后又把副点BAR

58:07.250 --> 58:08.250
副点BAR

58:08.250 --> 58:09.250
是不是A D D R 1

58:09.250 --> 58:10.250
是不是还是把它加1

58:10.250 --> 58:12.250
又把A R 1

58:12.250 --> 58:14.250
A R 1

58:14.250 --> 58:15.250
就这个玩意

58:15.250 --> 58:16.250
这个玩意的什么

58:17.250 --> 58:18.250
A R 1

58:18.250 --> 58:19.250
是这个数组

58:19.250 --> 58:20.250
这个数组的第二项

58:21.250 --> 58:22.250
第二项是个对象

58:22.250 --> 58:23.250
对象里面的BAR

58:23.250 --> 58:24.250
又加1

58:24.250 --> 58:25.250
所以变成4

58:26.250 --> 58:27.250
好 我再问你

58:28.250 --> 58:29.250
这个的第一项

58:29.250 --> 58:30.250
和这个的第二

58:30.250 --> 58:32.250
第零项是不是一样的

58:32.250 --> 58:33.250
这个的第一项

58:33.250 --> 58:35.250
和这个的第零项

58:36.250 --> 58:38.250
这里是零

58:39.250 --> 58:40.250
不好意思

58:40.250 --> 58:42.250
这里是零

58:42.250 --> 58:44.250
刚才把这个解去出来

58:44.250 --> 58:46.250
这里下标会变化

58:47.250 --> 58:48.250
下标会变化

58:49.250 --> 58:50.250
好 那么现在问你

58:52.250 --> 58:53.250
这个的第

58:53.250 --> 58:54.250
第二项

58:54.250 --> 58:55.250
下标为1的这一项

58:55.250 --> 58:56.250
就2

58:56.250 --> 58:58.250
跟这个下标为0的这一项

58:58.250 --> 58:59.250
是不是想等的

58:59.250 --> 59:00.250
那肯定是不想等的

59:00.250 --> 59:01.250
这个第一个是FORCE

59:01.250 --> 59:02.250
所以说我们得到结果

59:03.250 --> 59:04.250
FORCE

59:04.250 --> 59:05.250
好 第二个

59:06.250 --> 59:07.250
A R 1的2

59:07.250 --> 59:08.250
是不是这个玩意

59:08.250 --> 59:10.250
跟A R R 2的1

59:10.250 --> 59:11.250
跟这个玩意是不一样的

59:11.250 --> 59:12.250
两个地图是一样的

59:12.250 --> 59:13.250
两个地图的空间里面

59:13.250 --> 59:14.250
存在是一样的地址

59:14.250 --> 59:16.250
所以说这里是Q

59:17.250 --> 59:18.250
好 副雕霸

59:19.250 --> 59:20.250
副雕霸不就是4吗

59:21.250 --> 59:22.250
4

59:22.250 --> 59:23.250
FORCE

59:23.250 --> 59:24.250
Q

59:24.250 --> 59:25.250
4

59:25.250 --> 59:27.750
音响

59:27.750 --> 59:28.750
没出来了

59:29.750 --> 59:30.750
这种题其实

59:30.750 --> 59:31.750
你要说它难吧

59:31.750 --> 59:32.750
我觉得没有什么难的

59:32.750 --> 59:34.750
它就是想恶心你

59:34.750 --> 59:36.750
它就是想反应你

59:36.750 --> 59:37.750
你就这样一步一步画图

59:37.750 --> 59:38.750
一步画图

59:38.750 --> 59:39.750
它不可能出错的

59:40.750 --> 59:41.750
就是那个值和应用

59:41.750 --> 59:42.750
也就这样子了

59:43.750 --> 59:44.750
还能怎么样呢

59:45.750 --> 59:46.750
对我们平时做题的话

59:46.750 --> 59:48.750
你可以不用去想这些问题

59:49.750 --> 59:51.750
你可能就一个地方注意一下

59:51.750 --> 59:53.750
就是你只要给参数重新复制

59:53.750 --> 59:54.750
参数跟外面就脱离了

59:55.750 --> 59:56.750
你只要知道这一点就行了

59:56.750 --> 59:57.750
其他的情况

59:57.750 --> 59:58.750
大部分都不会出问题的

59:58.750 --> 59:59.750
除了问题

59:59.750 --> 01:00:00.750
我们用刚才的方式来分析

01:00:00.750 --> 01:00:01.750
就可以了

01:00:02.750 --> 01:00:04.750
OK 这是关于这个值和应用

