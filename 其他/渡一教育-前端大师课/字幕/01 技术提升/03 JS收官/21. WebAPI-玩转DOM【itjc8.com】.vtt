WEBVTT

00:00.050 --> 00:02.610
好了 从这节课开始

00:02.610 --> 00:06.050
我们会花好几节课的时间来学习这个动物

00:06.050 --> 00:08.050
这个动物到底是什么玩意儿呢

00:08.050 --> 00:10.850
通过它我们就可以操作页面了

00:10.850 --> 00:13.650
页面上各种东西啊 什么丰富的特效权

00:13.650 --> 00:16.050
是通过操作动物来实现的

00:16.050 --> 00:19.050
动物是什么玩意儿 它其实就是一个对象

00:19.050 --> 00:21.050
什么对象 那就是介石对象

00:21.050 --> 00:24.050
没有什么特别的 就是一个介石对象嘛

00:24.050 --> 00:28.050
这个对象里边有一大堆的属性 方法

00:28.050 --> 00:31.050
各种各样的属性方法全在里边

00:31.050 --> 00:33.050
所以说我们这一块学的是啥

00:33.050 --> 00:36.050
复杂吗 一点儿不复杂

00:36.050 --> 00:40.050
就是学对象里边哪些属性 哪些方法

00:40.050 --> 00:42.050
那么首先你第一个问题就是

00:42.050 --> 00:45.050
你这个对象照理从哪里来

00:45.050 --> 00:47.050
哪一个人在哪里

00:47.050 --> 00:50.050
那这就是获取动物 创建动物

00:50.050 --> 00:51.050
我可以创建一个对象

00:51.050 --> 00:54.050
我也可以从一有的对象里面获取

00:54.050 --> 00:57.050
然后后边的东西呢都是属于

00:57.050 --> 01:00.050
更改里边的属性啊 调用里边的方法呀

01:00.050 --> 01:02.050
这些东西 无非就是这么一个玩意儿嘛

01:02.050 --> 01:04.050
说动物它一点儿不复杂啊

01:04.050 --> 01:06.050
你把前面的基础打好之后呢

01:06.050 --> 01:09.050
这一块是非常轻松愉悦的

01:09.050 --> 01:11.050
那么动物到底是一种什么对象呢

01:11.050 --> 01:13.050
它是这样子啊 它会对应到

01:13.050 --> 01:15.050
AT面中的每一个节点

01:15.050 --> 01:17.050
啥意思啊 你看下面有个例子

01:17.050 --> 01:19.050
比方说我这里有个P元素

01:19.050 --> 01:21.050
P元素里边有段文字 有一个标圈

01:21.050 --> 01:23.050
然后呢 标圈里边有一个文字

01:23.050 --> 01:25.050
然后又有一个文字

01:25.050 --> 01:28.050
它在介事里边都可以对它们进行操作

01:28.050 --> 01:30.050
全都可以操作这段

01:30.050 --> 01:32.050
这里边任何东西都可以操作

01:32.050 --> 01:33.050
那么具体怎么操作呢

01:33.050 --> 01:34.050
就是通过对象来操作

01:34.050 --> 01:37.050
通过什么对象呢 就是动物对象

01:37.050 --> 01:40.050
那么这个玩意儿跟动物对象有什么关系呢

01:40.050 --> 01:41.050
啥是这样子的

01:41.050 --> 01:44.050
每一个标圈它就会生成一个动物对象

01:44.050 --> 01:48.050
每标圈里边的文字也会生成动物对象

01:48.050 --> 01:49.050
注意这不是制服串啊

01:49.050 --> 01:51.050
它是动物对象

01:51.050 --> 01:53.050
对象里面就各种属性了对吧

01:53.050 --> 01:55.050
然后这里又是一个标圈

01:55.050 --> 01:56.050
它又生成一个动物对象

01:56.050 --> 01:58.050
然后标圈里边一个文字

01:58.050 --> 01:59.050
它又生成一个动物对象

01:59.050 --> 02:01.050
然后标圈完了之后有一个文字

02:01.050 --> 02:03.050
它又是个动物对象

02:03.050 --> 02:05.050
都是动物对象

02:05.050 --> 02:07.050
只不过呢 我们在平时开发中

02:07.050 --> 02:09.050
百分之九十九的情况

02:09.050 --> 02:12.050
都不会去直接操作文字

02:12.050 --> 02:14.050
这个文字叫做文本节点

02:14.050 --> 02:17.050
有个专业名词 叫文本节点

02:17.050 --> 02:19.050
那么我们一般都是操作这个标圈

02:19.050 --> 02:21.050
标圈形成的动物对象

02:21.050 --> 02:22.050
但是他们都叫动物对象

02:22.050 --> 02:24.050
只不过呢 这个叫做

02:24.050 --> 02:26.050
动物对象里面的文本节点

02:26.050 --> 02:30.050
这个叫做动物对象里面的元素

02:30.050 --> 02:33.050
其实呢 都是动物对象

02:33.050 --> 02:35.050
懂这个意思吗 就这么个意思

02:35.050 --> 02:37.050
因此我们的网页不是从ATM开始吗

02:37.050 --> 02:39.050
对吧 我们的网页是一个数形结构

02:39.050 --> 02:41.050
ATM Head Body

02:41.050 --> 02:44.050
Body里边又有一些乱七八糟的元素

02:44.050 --> 02:45.050
元素里边又套元素

02:45.050 --> 02:46.050
元素里边又套元素

02:46.050 --> 02:47.050
是不是形成一个数形结构

02:47.050 --> 02:49.050
那么这个数形结构呢

02:49.050 --> 02:51.050
我们就可以让我们在数形结构里边

02:51.050 --> 02:54.050
每一个节点都是一个动物对象

02:54.050 --> 02:56.050
我们就可以操作每一个节点

02:56.050 --> 02:58.050
所以我们玩界面就是这样子玩的

02:58.050 --> 03:00.050
因此我们先把对动物对象

03:00.050 --> 03:01.050
有个初步的认识

03:01.050 --> 03:03.050
那接下来就开始玩了

03:03.050 --> 03:05.050
你要操作它

03:05.050 --> 03:07.050
你要玩它的属性 玩它的方法

03:07.050 --> 03:09.050
那你不得先有这个对象吧

03:09.050 --> 03:11.050
对象都没有你怎么玩呢

03:11.050 --> 03:12.050
所以说我们是先来说

03:12.050 --> 03:14.050
怎么来拿到对象

03:14.050 --> 03:15.050
拿到有两种方式

03:15.050 --> 03:17.050
一种叫获取 一种叫创建

03:17.050 --> 03:18.050
获取是咋意思呢

03:18.050 --> 03:21.050
获取指责就是从刚才那个数形结构

03:21.050 --> 03:23.050
这个数形结构刚才画了不再画了

03:23.050 --> 03:25.050
就一个数形结构

03:25.050 --> 03:27.050
这个数形结构里边直接拿

03:27.050 --> 03:28.050
它本来就有的吧

03:28.050 --> 03:30.050
一天本来就是一个结构

03:30.050 --> 03:32.050
我们直接拿它就行了

03:32.050 --> 03:33.050
这就是获取

03:33.050 --> 03:34.050
那什么叫创建呢

03:34.050 --> 03:37.050
就是我新来一个节点

03:37.050 --> 03:39.050
新来一个动物对象

03:39.050 --> 03:41.050
然后把这个动物对象呢

03:41.050 --> 03:42.050
我们还可以

03:42.050 --> 03:43.050
最后还可以把它夹到

03:43.050 --> 03:44.050
这个数形结构里边去

03:44.050 --> 03:46.050
夹到任何一个节点位置都可以

03:46.050 --> 03:47.050
这就是创建

03:47.050 --> 03:48.050
这就是创建

03:48.050 --> 03:49.050
就这么写的

03:49.050 --> 03:50.050
好 来吧

03:50.050 --> 03:51.050
我们来获取

03:51.050 --> 03:53.050
看一下获取有哪些方式

03:53.050 --> 03:55.050
我这里边API特别多

03:55.050 --> 03:56.050
都写的是一些

03:56.050 --> 03:59.050
我们有可能会用到的API

03:59.050 --> 04:01.050
但是有可能它不代表常用

04:01.050 --> 04:02.050
那这种

04:02.050 --> 04:04.050
下边我给你用一种特殊的颜色

04:04.050 --> 04:05.050
标志出来的

04:05.050 --> 04:06.050
那么都是常用的API

04:06.050 --> 04:08.050
但是都不需要记

04:08.050 --> 04:10.050
因为常用的一些练习题

04:10.050 --> 04:13.050
基本上就多练了无数次

04:13.050 --> 04:15.050
所以说不需要记

04:15.050 --> 04:16.050
那么这一块

04:16.050 --> 04:17.050
为什么API这么多呢

04:17.050 --> 04:19.050
官方为什么不少来一点

04:19.050 --> 04:20.050
对吧 那不学习

04:20.050 --> 04:22.050
学习起来不是很舒服一点吗

04:22.050 --> 04:24.050
它为什么做那么多

04:24.050 --> 04:25.050
它是这个意思

04:25.050 --> 04:27.050
你可以说你可以不用

04:27.050 --> 04:29.050
但是你不能说我没有

04:29.050 --> 04:30.050
所以说它为了

04:30.050 --> 04:33.050
因为我们开发各种场景都会有

04:33.050 --> 04:34.050
所以说它为了

04:34.050 --> 04:36.050
让我们在各种场景里边

04:36.050 --> 04:38.050
都能拿到多么对象

04:38.050 --> 04:40.050
可以提供了很多的API

04:40.050 --> 04:41.050
各种各样的API

04:41.050 --> 04:42.050
反正我给你

04:42.050 --> 04:44.050
你用不用是你的事

04:44.050 --> 04:45.050
也不需要你去背

04:45.050 --> 04:46.050
你需要的时候

04:46.050 --> 04:48.050
你查閱一下就完事了

04:48.050 --> 04:49.050
反正它给你提供了

04:49.050 --> 04:51.050
非常非常丰富的

04:51.050 --> 04:53.050
获取多么对象的方式

04:53.050 --> 04:54.050
我们来看一看吧

04:54.050 --> 04:55.050
首先第一个方式

04:55.050 --> 04:57.050
GateElementById

04:57.050 --> 04:59.050
Gate啥意思啊

04:59.050 --> 05:00.050
获取

05:00.050 --> 05:01.050
Element啥意思啊

05:01.050 --> 05:04.050
元素ById

05:04.050 --> 05:05.050
翻译过来这么说

05:05.050 --> 05:06.050
翻译

05:06.050 --> 05:09.050
根据ID来获取一个元素

05:09.050 --> 05:10.050
对吧

05:10.050 --> 05:11.050
那么它来自于

05:11.050 --> 05:13.050
Document都向里面的一个方法

05:13.050 --> 05:14.050
那么这个Document是啥呢

05:14.050 --> 05:16.050
这个Document是

05:16.050 --> 05:18.050
是Window里面的一个属性

05:18.050 --> 05:21.490
比方说我们这里

05:21.490 --> 05:25.440
放了一个淘宝吧

05:25.440 --> 05:26.440
看看

05:26.440 --> 05:29.440
Window里面一个属性叫做Document

05:29.440 --> 05:31.440
由于它是Window里面的属性

05:31.440 --> 05:33.440
因此我们可以

05:33.440 --> 05:34.440
直接打出来

05:34.440 --> 05:36.440
Document是一样的

05:36.440 --> 05:38.440
Document直接打出来

05:38.440 --> 05:39.440
你看这就是

05:39.440 --> 05:40.440
Document是什么意思

05:40.440 --> 05:41.440
就文档

05:41.440 --> 05:42.440
就整个文档

05:42.440 --> 05:43.440
它给你

05:43.440 --> 05:44.440
整个文档其实也是一个

05:44.440 --> 05:45.440
多么对象

05:45.440 --> 05:47.440
它给你封装了一下

05:47.440 --> 05:48.440
那么整个文档里面

05:48.440 --> 05:50.440
就包含了什么atmail

05:50.440 --> 05:51.440
head body

05:51.440 --> 05:53.440
你看在浏览器控制台里面

05:53.440 --> 05:55.440
它为了让你调试方便

05:55.440 --> 05:56.440
因此它用这种模式

05:56.440 --> 05:57.440
给你打印出来

05:57.440 --> 05:58.440
可以非常方便的

05:58.440 --> 06:00.440
你看到你获取的是什么东西

06:00.440 --> 06:01.440
对吧

06:01.440 --> 06:03.440
但是有些人可能觉得不习惯

06:03.440 --> 06:05.440
你不说它是个对象吗

06:05.440 --> 06:06.440
打印出来的对象结构

06:06.440 --> 06:07.440
跟我们平时看到的

06:07.440 --> 06:09.440
GS对象不太一样

06:09.440 --> 06:11.440
GS平时的GS对象

06:11.440 --> 06:13.440
是这么一个玩意

06:13.440 --> 06:15.440
感觉这才要对象吧

06:15.440 --> 06:16.440
打印出来为什么是这个东西

06:16.440 --> 06:18.440
它只是为了让你调试方便

06:18.440 --> 06:19.440
如果说你想把它看成

06:19.440 --> 06:21.440
它的对象结构的话

06:21.440 --> 06:23.440
那么你就可以使用ConsultDNR

06:23.440 --> 06:25.440
它专门来查看对象结构的

06:25.440 --> 06:26.440
Document

06:26.440 --> 06:27.440
你看一下

06:27.440 --> 06:29.440
这样子它就用对象结构

06:29.440 --> 06:30.440
打印出来了

06:30.440 --> 06:31.440
你看各种各样的属性

06:31.440 --> 06:32.440
对吧 方法

06:32.440 --> 06:33.440
属性里面还有属性

06:33.440 --> 06:34.440
也是对象的

06:34.440 --> 06:35.440
对象里面还有东西

06:35.440 --> 06:37.440
全就是在对

06:37.440 --> 06:39.440
就这么一个东西

06:39.440 --> 06:40.440
Document

06:40.440 --> 06:41.440
Document里面

06:41.440 --> 06:42.440
它由于它是动物对象

06:42.440 --> 06:43.440
它里面呢

06:43.440 --> 06:44.440
会有一些方法属性

06:44.440 --> 06:45.440
那么其中一个方法

06:45.440 --> 06:46.440
叫GetsElement

06:46.440 --> 06:47.440
把ID

06:47.440 --> 06:49.440
你这里面传一个ID

06:49.440 --> 06:50.440
进去

06:50.440 --> 06:51.440
那么因为我们知道

06:51.440 --> 06:52.440
ID是不是圆

06:52.440 --> 06:53.440
ATM元素里面可以写ID

06:53.440 --> 06:55.440
ID是整个

06:55.440 --> 06:57.440
网页里面唯一的

06:57.440 --> 06:58.440
它又可以通过唯一的

06:58.440 --> 07:00.440
一个ID来得到一个动物对象

07:00.440 --> 07:02.440
我们现在研究的是它

07:02.440 --> 07:03.440
研究的不就是

07:03.440 --> 07:04.440
怎么拿到这个对象吗

07:04.440 --> 07:05.440
要玩的对象

07:05.440 --> 07:07.440
肯定是想要拿到吗

07:07.440 --> 07:08.440
这就是这么一个东西吧

07:08.440 --> 07:10.440
那我们看一下这个ID

07:10.440 --> 07:12.440
哪里有ID呢

07:12.440 --> 07:13.440
找一找吧

07:13.440 --> 07:14.440
看一下哪里

07:14.440 --> 07:16.440
有没有什么ID

07:19.440 --> 07:21.440
我记得有这么一个DM

07:21.440 --> 07:23.440
这里有个ID

07:23.440 --> 07:24.440
你看

07:24.440 --> 07:25.440
看一面上

07:25.440 --> 07:26.440
不就这个元素吗

07:26.440 --> 07:28.440
我就用这个ID去拿

07:28.440 --> 07:30.440
那么返回的

07:30.440 --> 07:31.440
它会返回

07:31.440 --> 07:32.440
这个函数它会返回

07:32.440 --> 07:34.440
返回一个动物对象

07:34.440 --> 07:36.440
接收就行了

07:36.440 --> 07:37.440
你用任何一个变量名字

07:37.440 --> 07:38.440
这个都无所谓的

07:38.440 --> 07:39.440
反正就是一个对象

07:39.440 --> 07:40.440
保存了就保存了

07:40.440 --> 07:41.440
要保存个对象地址

07:41.440 --> 07:42.440
怎么就完事了

07:42.440 --> 07:44.440
就做完了

07:44.440 --> 07:45.440
就拿到这个动物对象了

07:45.440 --> 07:47.440
那么至于这个动物对象里边

07:47.440 --> 07:48.440
有哪些属性

07:48.440 --> 07:50.440
有哪些方法

07:50.440 --> 07:51.440
后边再说吧

07:51.440 --> 07:52.440
反正我们先拿到

07:52.440 --> 07:53.440
这个对象再说

07:53.440 --> 07:54.440
就拿到了

07:54.440 --> 07:55.440
再看一下吧

07:55.440 --> 07:56.440
浏览器为了让你调试方便

07:56.440 --> 07:58.440
它用这种格式

07:58.440 --> 07:59.440
给你显示出来

07:59.440 --> 08:00.440
你指着它

08:00.440 --> 08:01.440
你会发现页面上

08:01.440 --> 08:02.440
有个地方变颜色了

08:02.440 --> 08:03.440
它就告诉你

08:03.440 --> 08:04.440
你拿到一个动物对象

08:04.440 --> 08:05.440
它对应到页面上

08:05.440 --> 08:06.440
是这个东西

08:06.440 --> 08:07.440
当然你要用

08:07.440 --> 08:08.440
这个对象格式

08:08.440 --> 08:09.440
把它打印的话

08:09.440 --> 08:12.440
也可以用这种方式打印

08:12.440 --> 08:13.440
就是对象格式

08:13.440 --> 08:15.440
还有各种各样的属性大队

08:15.440 --> 08:17.440
它就这么一个玩意

08:17.440 --> 08:19.440
Gate of Elements by ID

08:19.440 --> 08:20.440
它拿到了的是

08:20.440 --> 08:21.440
当一个对象阅

08:21.440 --> 08:24.440
ID的话是唯一的对吧

08:24.440 --> 08:25.440
好像我们继续往后看

08:25.440 --> 08:26.440
还有一个就是

08:26.440 --> 08:27.440
Gate of Elements

08:27.440 --> 08:28.440
对呀

08:28.440 --> 08:29.440
这是付出了

08:29.440 --> 08:30.440
看到没

08:30.440 --> 08:31.440
从命名上就可以看出

08:31.440 --> 08:32.440
它拿到的不是一个

08:32.440 --> 08:34.440
靠什么来拿到呢

08:34.440 --> 08:36.440
通过Tag Name

08:36.440 --> 08:37.440
Tag什么意思

08:37.440 --> 08:38.440
Tag Name的名字

08:38.440 --> 08:40.440
通过标签的名字去拿

08:40.440 --> 08:42.440
那这又是啥意思

08:42.440 --> 08:43.440
比方说我们这里

08:43.440 --> 08:44.440
通过Document

08:44.440 --> 08:50.440
Gate of Elements by Tag Name

08:50.440 --> 08:52.440
拿什么呢

08:52.440 --> 08:53.440
不要拿DIV

08:53.440 --> 08:54.440
就拿到页面上

08:54.440 --> 08:55.440
所有的DIV了

08:55.440 --> 08:57.440
那我们看一下这个DIV

08:57.440 --> 08:58.440
哇

08:58.440 --> 08:59.440
219个

08:59.440 --> 09:00.440
对吧

09:00.440 --> 09:02.440
它是一个很大的一个数组

09:02.440 --> 09:04.440
我们看一下DIV.links

09:04.440 --> 09:05.440
219

09:05.440 --> 09:06.440
大家要注意

09:06.440 --> 09:08.440
它是一个违以数组

09:08.440 --> 09:09.440
它是一个违以数组

09:09.440 --> 09:10.440
它不是真正的数组

09:10.440 --> 09:11.440
所以说我们

09:11.440 --> 09:14.440
如果说通过DIV.links

09:14.440 --> 09:16.440
Instance of Array

09:16.440 --> 09:17.440
来看一下

09:17.440 --> 09:18.440
它是Force

09:18.440 --> 09:19.440
它不是真正的数组

09:19.440 --> 09:20.440
因此它里边有些数组方法

09:20.440 --> 09:21.440
是没有的

09:21.440 --> 09:22.440
比方说像Sort

09:22.440 --> 09:23.440
没有这个方法

09:23.440 --> 09:25.440
它不是真正的数组

09:25.440 --> 09:26.440
如果说你要把它

09:26.440 --> 09:27.440
转成真正的数组

09:27.440 --> 09:28.440
是不是讲过了

09:28.440 --> 09:29.440
跟之前一样

09:29.440 --> 09:30.440
没有什么特点

09:30.440 --> 09:31.440
千万不要认为

09:31.440 --> 09:32.440
什么界面的对象

09:32.440 --> 09:33.440
好特殊

09:33.440 --> 09:34.440
有什么特殊的

09:34.440 --> 09:35.440
就是对象

09:35.440 --> 09:37.440
它就是跟界面对应的对象

09:37.440 --> 09:38.440
对吧

09:38.440 --> 09:39.440
界面上的每一个元素

09:39.440 --> 09:40.440
每一个节点

09:40.440 --> 09:41.440
它都是对应到一个对象

09:41.440 --> 09:42.440
没有什么特殊的

09:42.440 --> 09:44.440
因此跟之前的操作方式

09:44.440 --> 09:45.440
是一样的

09:45.440 --> 09:46.440
Array

09:46.440 --> 09:47.440
Prototype of slice

09:47.440 --> 09:48.440
然后call

09:48.440 --> 09:50.440
把DIV.links传进去

09:50.440 --> 09:52.440
这不就变成真正的数组了吗

09:52.440 --> 09:55.880
所以前边学好了之后

09:55.880 --> 09:56.880
你后边

09:56.880 --> 09:58.880
这个东西就非常简单了

09:58.880 --> 10:01.880
Instance of Array

10:01.880 --> 10:02.880
不就出了吗

10:02.880 --> 10:04.880
那么现在就可以用各种

10:04.880 --> 10:05.880
方法都可以用

10:05.880 --> 10:07.880
就这么简单

10:07.880 --> 10:10.880
这是get elements by tag name

10:10.880 --> 10:12.880
那么这里我下面又写了一个

10:12.880 --> 10:15.880
叫dom.get elements by tag name

10:15.880 --> 10:17.880
那么这又是啥意思呢

10:17.880 --> 10:18.880
是这样子的

10:18.880 --> 10:19.880
它可以

10:19.880 --> 10:21.880
就是document其实就是一个dom

10:21.880 --> 10:23.880
它就是一个特殊的dom

10:23.880 --> 10:26.880
就是你用哪一个dom

10:26.880 --> 10:28.880
去调用这个函数

10:28.880 --> 10:30.880
那么就是在哪一个dom

10:30.880 --> 10:31.880
你后边找

10:31.880 --> 10:32.880
就你一边去找

10:32.880 --> 10:34.880
用document来调用这个函数

10:34.880 --> 10:36.880
就在整个文档里边找

10:36.880 --> 10:37.880
你用了一个

10:37.880 --> 10:39.880
某一个dom来调用这个函数

10:39.880 --> 10:41.880
就是在这个dom里边去找

10:41.880 --> 10:43.880
找到的范围不一样

10:43.880 --> 10:44.880
一个是整个网页

10:44.880 --> 10:46.880
一个是某一个元素里边

10:46.880 --> 10:48.880
比方说我们刚才不是拿到一个元素吗

10:48.880 --> 10:50.880
看一下

10:50.880 --> 10:51.880
在哪呢

10:51.880 --> 10:52.880
这

10:52.880 --> 10:53.880
拿到这个元素

10:53.880 --> 10:55.880
这个是这么一个DIV

10:55.880 --> 10:56.880
这个是一个dom

10:56.880 --> 10:57.880
dom里边有个方法

10:57.880 --> 11:03.880
叫get elements by tag name

11:03.880 --> 11:05.880
我在这里边去找DIV

11:05.880 --> 11:07.880
那只是在这个元素里边找了

11:07.880 --> 11:09.880
它不是整个网页里边找了

11:09.880 --> 11:10.880
那看一下这个DIV

11:10.880 --> 11:11.880
那只有25个

11:11.880 --> 11:12.880
是不是少很多了

11:12.880 --> 11:14.880
他说小的他造范围

11:14.880 --> 11:16.880
都不要计

11:16.880 --> 11:17.880
泡杯咖啡

11:17.880 --> 11:19.880
泡杯茶

11:19.880 --> 11:20.880
吃点零食

11:20.880 --> 11:21.880
听就行了

11:21.880 --> 11:23.880
以后做作业的时候才动起来

11:23.880 --> 11:25.880
那不要去计这些东西

11:25.880 --> 11:26.880
什么意思呢

11:26.880 --> 11:27.880
反正它的意思就是说

11:27.880 --> 11:29.880
我给你提供一大的东西

11:29.880 --> 11:30.880
你按用啥用啥

11:30.880 --> 11:31.880
反正你用各种方案

11:31.880 --> 11:32.880
都可以拿到动物对象

11:32.880 --> 11:33.880
不是唯一的方案

11:33.880 --> 11:34.880
对吧

11:34.880 --> 11:35.880
各种形式都可以拿

11:35.880 --> 11:37.880
自己看你自己喜欢用哪一个

11:37.880 --> 11:39.880
那后边你看

11:39.880 --> 11:41.880
又给你出来这么一个东西

11:41.880 --> 11:42.880
叫get elements

11:42.880 --> 11:44.880
是不是拿到多个

11:44.880 --> 11:45.880
靠什么拿

11:45.880 --> 11:47.880
靠内样式来拿

11:47.880 --> 11:48.880
你给它一个内样式传进去

11:48.880 --> 11:49.880
它就给

11:49.880 --> 11:50.880
凡是有这个内样式的

11:50.880 --> 11:51.880
全部拿到

11:51.880 --> 11:53.880
可以通过整个文档来拿

11:53.880 --> 11:55.880
也可以在某一个动物元素里边拿

11:55.880 --> 11:56.880
都可以

11:56.880 --> 11:57.880
对吧

11:57.880 --> 11:58.880
那就不讲了

11:58.880 --> 11:59.880
还是可以什么好讲的

12:00.880 --> 12:02.880
但是这三个API

12:02.880 --> 12:05.880
现在都显得有点

12:05.880 --> 12:07.880
烈显幼稚了

12:07.880 --> 12:09.880
因为你觉得它功能很强大

12:09.880 --> 12:11.880
你开发多了之后

12:11.880 --> 12:13.880
就觉得它功能太不够了

12:13.880 --> 12:14.880
所以说有些同学

12:14.880 --> 12:16.880
应该或多或少听说过

12:16.880 --> 12:18.880
听说过也没关系

12:18.880 --> 12:19.880
后面你们都会学

12:19.880 --> 12:20.880
一个东西叫get query

12:20.880 --> 12:21.880
get query

12:21.880 --> 12:23.880
用来解决什么问题

12:23.880 --> 12:24.880
就是因为

12:24.880 --> 12:26.880
web API里边

12:26.880 --> 12:27.880
它给你提供的

12:27.880 --> 12:29.880
获取动物的东西太少了

12:29.880 --> 12:30.880
太少了

12:30.880 --> 12:31.880
根本不够用

12:31.880 --> 12:32.880
你觉得现在多

12:32.880 --> 12:33.880
它根本不够用的后面

12:33.880 --> 12:34.880
你写单一把的时候

12:34.880 --> 12:36.880
就会发现太不方便了

12:36.880 --> 12:37.880
所以呢

12:37.880 --> 12:38.880
get query再出来

12:38.880 --> 12:39.880
让你更加方便的

12:39.880 --> 12:41.880
来拿到各种动物对象

12:41.880 --> 12:44.880
就其中一个作用

12:44.880 --> 12:46.880
实际上现在

12:46.880 --> 12:47.880
为什么说get query

12:47.880 --> 12:48.880
已经过时了

12:48.880 --> 12:50.880
已经不太会使用了

12:50.880 --> 12:52.880
是因为现在web API里边

12:52.880 --> 12:55.880
又给你加了一些

12:55.880 --> 12:56.880
它给你加了这两个

12:56.880 --> 12:59.880
这两个是非常强大的功能

12:59.880 --> 13:01.880
get query也推出历史舞台

13:01.880 --> 13:03.880
跟这两个东西有很大的关系

13:03.880 --> 13:05.880
get query的官方文档里边

13:05.880 --> 13:08.880
就说为什么我不更新呢

13:08.880 --> 13:09.880
就是因为这两个东西出来了

13:09.880 --> 13:11.880
因为这两个东西

13:11.880 --> 13:12.880
就已经提供了

13:12.880 --> 13:15.880
非常强大的获取动物对象的方式了

13:15.880 --> 13:17.880
叫query snegator

13:17.880 --> 13:19.880
这是获取单个的

13:19.880 --> 13:20.880
这是query

13:20.880 --> 13:21.880
query什么意思

13:21.880 --> 13:22.880
查询 snegator呢

13:22.880 --> 13:23.880
选择器

13:23.880 --> 13:24.880
什么选择器

13:24.880 --> 13:25.880
css选择器

13:25.880 --> 13:28.880
根据css选择器查询

13:28.880 --> 13:30.880
当然它也支持整个文档里边查

13:30.880 --> 13:32.880
在某一个动物里边查

13:32.880 --> 13:34.880
整个文档查动物里边查

13:34.880 --> 13:35.880
只不过前边的这个呢

13:35.880 --> 13:37.880
是获取单个的

13:37.880 --> 13:38.880
这个加了一个or

13:38.880 --> 13:39.880
是不是获取多个的

13:39.880 --> 13:40.880
拿到的是一个伪数组

13:40.880 --> 13:42.880
就这么一点区别

13:42.880 --> 13:44.880
所以说你前边三个

13:44.880 --> 13:45.880
全部都可以不用

13:45.880 --> 13:47.880
直接用这两个无敌

13:47.880 --> 13:49.880
我们来看一下

13:49.880 --> 13:51.880
我要拿到

13:51.880 --> 13:53.880
刚才我们写的这么一个东西

13:53.880 --> 13:55.880
拿到id为这个的

13:55.880 --> 13:56.880
不用这种方式了

13:56.880 --> 13:57.880
怎么写呢

13:57.880 --> 13:59.880
query snegator

13:59.880 --> 14:01.880
id选择器

14:01.880 --> 14:02.880
cssid选择器怎么写

14:02.880 --> 14:04.880
是不是紧

14:04.880 --> 14:06.880
是不是可以拿到

14:06.880 --> 14:07.880
对吧

14:07.880 --> 14:08.880
如果说它拿不到的话怎么办

14:08.880 --> 14:09.880
拿不到的话

14:09.880 --> 14:11.880
它就是得到的是

14:11.880 --> 14:12.880
now

14:12.880 --> 14:14.880
得到的是now

14:14.880 --> 14:16.880
那如果说是

14:16.880 --> 14:18.880
我要通过标签名字

14:18.880 --> 14:20.880
去拿呢

14:20.880 --> 14:22.880
query snegator

14:25.580 --> 14:26.580
document

14:26.580 --> 14:30.340
query snegator

14:30.340 --> 14:32.340
是不是拿到标签名字

14:32.340 --> 14:33.340
为什么只有一个呢

14:33.340 --> 14:35.340
因为你用的是query snegator

14:35.340 --> 14:37.340
它只会找到第一个满足条件的

14:37.340 --> 14:39.340
通过元素选择器

14:39.340 --> 14:41.340
当然如果说你要拿到多个怎么办

14:41.340 --> 14:43.340
加个over

14:43.340 --> 14:45.340
不就多个了吗

14:45.340 --> 14:47.340
你看不就多个了吗

14:47.340 --> 14:49.340
所以说这个是非常强大的

14:49.340 --> 14:52.340
比方说我还要拿什么呢

14:52.340 --> 14:55.340
我要拿到那个

14:56.340 --> 14:57.340
cover

14:57.340 --> 14:59.340
这个div

14:59.340 --> 15:00.340
借cover

15:00.340 --> 15:03.340
我要拿到这个那样是下边的

15:03.340 --> 15:04.340
拿吧

15:04.340 --> 15:06.340
document

15:06.340 --> 15:08.340
query snegator

15:08.340 --> 15:09.340
那样是怎么写

15:09.340 --> 15:10.340
是不是del

15:10.340 --> 15:11.340
对吧

15:11.340 --> 15:13.340
这里面写的就是选择器

15:13.340 --> 15:15.340
选中了啥就拿到啥

15:15.340 --> 15:16.340
然后呢

15:16.340 --> 15:18.340
我要拿到这个下边的

15:18.340 --> 15:22.350
三一层duv

15:24.350 --> 15:25.350
你看它返回的结果

15:25.350 --> 15:27.350
不就是这么一个玩意吗

15:27.350 --> 15:28.350
就这个dm

15:28.350 --> 15:29.350
是不是返回了

15:29.350 --> 15:30.350
就这么个意思

15:30.350 --> 15:32.350
非常简单

15:34.350 --> 15:35.350
然后下边这个

15:35.350 --> 15:37.350
下边这个是获取atm元素

15:37.350 --> 15:39.350
有的时候我们要拿到atm元素

15:39.350 --> 15:41.350
去做就整个根元素

15:41.350 --> 15:42.350
要去做一些事

15:42.350 --> 15:43.350
我们就可以通过这个属性

15:43.350 --> 15:44.350
它不是方法

15:44.350 --> 15:45.350
学会看文档

15:45.350 --> 15:47.350
方法是加了小过号的

15:47.350 --> 15:48.350
它不是方法

15:48.350 --> 15:49.350
它是一个属性

15:49.350 --> 15:50.350
获取atm元素

15:50.350 --> 15:51.350
也就是说啥意思呢

15:51.350 --> 15:52.350
就是z wire

15:52.350 --> 15:53.350
document

15:53.350 --> 15:54.350
document element

15:54.350 --> 15:55.350
它就是atm

15:55.350 --> 15:56.350
它就是atm

15:57.350 --> 15:58.350
跟那个document

16:00.350 --> 16:02.350
atm效果是一模一样的

16:02.350 --> 16:04.350
一点区别都没有

16:04.350 --> 16:05.350
利用它可以

16:05.350 --> 16:06.350
利用它也可以

16:06.350 --> 16:08.350
总之可以都可以

16:08.350 --> 16:09.350
后边又是什么

16:09.350 --> 16:10.350
通过body这个属性

16:10.350 --> 16:11.350
拿到body元素

16:11.350 --> 16:12.350
通过head

16:12.350 --> 16:13.350
拿到head元素

16:13.350 --> 16:14.350
注意

16:14.350 --> 16:15.350
再重称一次

16:15.350 --> 16:17.350
拿到的全是动物对象

16:17.350 --> 16:18.350
然后呢

16:18.350 --> 16:19.350
通过这个qt

16:19.350 --> 16:22.350
可以获得当前动物的指元素

16:22.350 --> 16:24.350
qt就是儿子的意思

16:25.350 --> 16:26.350
比方说我们这里

16:26.350 --> 16:27.350
document

16:27.350 --> 16:28.350
body是不是一个dome

16:28.350 --> 16:30.350
那dome里边说有个qt

16:30.350 --> 16:31.350
对吧

16:31.350 --> 16:32.350
说可以拿到

16:32.350 --> 16:33.350
发现啊

16:33.350 --> 16:34.350
body里边有33个指元素

16:34.350 --> 16:35.350
每一个

16:35.350 --> 16:36.350
都是也是尾元

16:36.350 --> 16:37.350
尾数组啊

16:37.350 --> 16:38.350
每一个数组里面

16:38.350 --> 16:39.350
每一项

16:39.350 --> 16:41.350
是不是又是一个dome

16:41.350 --> 16:42.350
对吧

16:42.350 --> 16:43.350
就这么个意思

16:43.350 --> 16:44.350
那比方说我还可以写啊

16:44.350 --> 16:45.350
这个里面还可以写

16:45.350 --> 16:46.350
我都可多了

16:46.350 --> 16:47.350
比方说body里边

16:47.350 --> 16:49.350
第一个指元素的指元素

16:49.350 --> 16:50.350
对吧

16:50.350 --> 16:51.350
又是不是可以这样子拿

16:51.350 --> 16:52.350
第一个指元素

16:52.350 --> 16:53.350
好像没有指元素

16:53.350 --> 16:54.350
指元素

16:55.350 --> 16:56.350
好像也没有

16:56.350 --> 16:58.350
第三个指元素的指元素

16:59.350 --> 17:00.350
也没有了

17:00.350 --> 17:02.350
就这么个意思啊

17:02.350 --> 17:03.350
就是qt

17:04.350 --> 17:05.350
那么下面这个呢

17:05.350 --> 17:06.350
我给大家说一下啊

17:06.350 --> 17:07.350
还有一个东西叫做

17:07.350 --> 17:09.350
qt的漏指

17:10.350 --> 17:11.350
它跟qt有准的

17:11.350 --> 17:12.350
什么区别呢

17:12.350 --> 17:13.350
就下面那种很少用

17:13.350 --> 17:14.350
说一下

17:14.350 --> 17:16.350
qt是拿到指元素

17:17.350 --> 17:18.350
qt的漏指呢

17:18.350 --> 17:19.350
是拿到所有

17:19.350 --> 17:20.350
比方说

17:20.350 --> 17:21.350
下面这个

17:21.350 --> 17:22.350
这个p元素

17:22.350 --> 17:23.350
如果说我要拿到qt的话

17:23.350 --> 17:25.350
它只会拿到一个时创

17:26.350 --> 17:27.350
只会拿到这一个

17:28.350 --> 17:30.350
如果说我要拿到qt的漏指

17:30.350 --> 17:32.350
拿到指节点的话

17:32.350 --> 17:33.350
它会拿到三个

17:34.350 --> 17:36.350
比方说我们来试验一下吧

17:36.350 --> 17:37.350
我在这里呢

17:37.350 --> 17:38.350
新签一个页面

17:38.350 --> 17:39.350
一点点

17:41.660 --> 17:43.660
就一个p元素吧

17:43.660 --> 17:45.660
war is

17:49.660 --> 17:55.920
好吧 我就页面上文吧

17:55.920 --> 17:56.920
好 接下来我们看一下

17:56.920 --> 17:58.920
我们通过这个document

17:58.920 --> 17:59.920
query

17:59.920 --> 18:01.920
这里顺便给大家说一下

18:01.920 --> 18:02.920
一个小技巧

18:02.920 --> 18:04.920
这个小技巧可以

18:04.920 --> 18:05.920
出于装逼的

18:05.920 --> 18:07.920
就是在那个

18:07.920 --> 18:08.920
控制台里边

18:08.920 --> 18:09.920
注意

18:09.920 --> 18:11.920
只能是控制台里边

18:11.920 --> 18:12.920
把手机调一下精英

18:15.920 --> 18:17.920
在控制台里边呢

18:17.920 --> 18:18.920
你可以使用一种

18:18.920 --> 18:20.920
比较简洁的方式

18:20.920 --> 18:21.920
来调用这个query's negator

18:21.920 --> 18:22.920
就是dodger

18:24.920 --> 18:25.920
只能是控制台

18:25.920 --> 18:27.920
你不能在介绍台里边这样写

18:27.920 --> 18:28.920
只能是控制台里边

18:28.920 --> 18:30.920
你可以通过dodger

18:30.920 --> 18:31.920
来替代

18:31.920 --> 18:33.920
那个就是document

18:33.920 --> 18:34.920
query's negator

18:34.920 --> 18:35.920
只能是控制台

18:35.920 --> 18:36.920
方便你调试的

18:37.920 --> 18:38.920
比方说p元素

18:39.920 --> 18:41.920
你看是不是拿到p元素了

18:41.920 --> 18:43.920
如果说query's negator

18:43.920 --> 18:45.920
war就是两个dodger

18:46.920 --> 18:48.920
它拿到就是一个伪术组

18:50.920 --> 18:52.920
这个玩意还拿到是真素组

18:52.920 --> 18:53.920
跟query's negator war

18:53.920 --> 18:54.920
还不太一样

18:55.920 --> 18:56.920
没关系

18:56.920 --> 18:57.920
主要是用来调试的

18:57.920 --> 18:58.920
其他没啥用

18:59.920 --> 19:00.920
我们能拿到p元素

19:01.920 --> 19:02.920
是拿到一个dome了

19:05.740 --> 19:06.740
是拿到一个dome了

19:07.740 --> 19:09.740
那么我们通过的dome

19:09.740 --> 19:10.740
拿到chill

19:10.740 --> 19:11.740
你看拿到几个

19:11.740 --> 19:12.740
是不是只有一个

19:13.740 --> 19:14.740
一个实装的元素

19:14.740 --> 19:15.740
但是如果说我们通过

19:17.740 --> 19:20.740
dom.chill的nose

19:21.740 --> 19:22.740
它拿到13个

19:22.740 --> 19:23.740
你看第一个是文本

19:23.740 --> 19:24.740
你看一面上

19:24.740 --> 19:25.740
把一面放大一点

19:27.740 --> 19:28.740
你看一面上

19:28.740 --> 19:29.740
是不是文本

19:29.740 --> 19:30.740
第二个是实装标圈

19:30.740 --> 19:31.740
第三个也是文本

19:32.740 --> 19:33.740
文本它也是对象

19:34.740 --> 19:35.740
文本也是对象

19:36.740 --> 19:37.740
文本它会告诉你

19:37.740 --> 19:38.740
它的load type等于3

19:38.740 --> 19:39.740
等于3是什么意思

19:39.740 --> 19:40.740
它是用一个数字来表示

19:40.740 --> 19:41.740
它的类型

19:41.740 --> 19:42.740
一个节点的类型

19:42.740 --> 19:43.740
是一个文本节点

19:44.740 --> 19:45.740
就这么个意思

19:45.740 --> 19:50.740
然后它的文本的值

19:50.740 --> 19:51.740
load value

19:51.740 --> 19:52.740
文本的值

19:52.740 --> 19:53.740
是一个换行服务

19:53.740 --> 19:54.740
然后前面一段空格

19:55.740 --> 19:56.740
然后load is

19:57.740 --> 19:58.740
然后又换行

19:58.740 --> 19:59.740
它跟这里

19:59.740 --> 20:00.740
原代码是对应的

20:01.740 --> 20:03.740
就这段东西

20:03.740 --> 20:04.740
一个换行服务一些空格

20:05.740 --> 20:06.740
然后load is

20:06.740 --> 20:07.740
然后又换行一些空格

20:08.740 --> 20:09.740
这是文本

20:10.740 --> 20:11.740
我们这个玩意

20:11.740 --> 20:12.740
其实可以改的

20:13.740 --> 20:14.740
可以直接改文本的

20:15.740 --> 20:16.740
了解就行了

20:16.740 --> 20:17.740
这个玩意

20:17.740 --> 20:18.740
平常很少用的

20:18.740 --> 20:19.740
比方说拿到第一个

20:19.740 --> 20:20.740
第一个是不是文本

20:20.740 --> 20:22.740
我们可以改它的load value

20:22.740 --> 20:23.740
改成123

20:25.740 --> 20:26.740
那就变成123

20:27.740 --> 20:29.740
它可以直接改文本的

20:30.740 --> 20:31.740
了解就行了

20:31.740 --> 20:32.740
这是

20:33.740 --> 20:35.740
我们用了最多的还是求准

20:35.740 --> 20:36.740
拿指元数

20:36.740 --> 20:37.740
因为我们大部分时候

20:37.740 --> 20:38.740
都只关心元数

20:38.740 --> 20:39.740
还有什么呢

20:39.740 --> 20:41.740
还要拿到兄弟元数

20:41.740 --> 20:43.740
兄弟元数有两种

20:49.250 --> 20:51.250
一个是拿到previous

20:51.250 --> 20:52.250
previous是什么意思

20:52.250 --> 20:54.250
就是前一个element

20:54.250 --> 20:55.250
元数sablin

20:55.250 --> 20:57.250
sablin是兄弟姐妹的意思

20:57.250 --> 20:59.250
前一个兄弟元数

20:59.250 --> 21:01.250
下一个兄弟元数

21:02.250 --> 21:03.250
对吧

21:03.250 --> 21:04.250
它可以通过当前元数

21:04.250 --> 21:05.250
去找兄弟元数

21:05.250 --> 21:07.250
比方说吧

21:07.250 --> 21:08.250
就这个玩意

21:08.250 --> 21:09.250
我随便找一个吧

21:10.250 --> 21:11.250
我随便找一个

21:13.250 --> 21:15.250
那hd

21:15.250 --> 21:17.250
看一下这里拿一下

21:17.250 --> 21:21.800
那hd

21:22.800 --> 21:23.800
下边的第一个li

21:28.420 --> 21:29.420
li

21:29.420 --> 21:30.420
你看是不是拿到这个

21:30.420 --> 21:32.420
天猫看页面上

21:32.420 --> 21:34.420
我可以拿下一个

21:34.420 --> 21:36.420
next element

21:36.420 --> 21:37.420
sablin

21:37.420 --> 21:38.420
就拿到下一个了

21:38.420 --> 21:39.420
它返回

21:39.420 --> 21:40.420
它返回的又是一个动物

21:40.420 --> 21:42.420
就拿到下一个了

21:42.420 --> 21:43.420
下一个的下一个

21:43.420 --> 21:44.420
下一个的next

21:44.420 --> 21:45.420
sablin

21:45.420 --> 21:46.420
因为前面

21:46.420 --> 21:48.420
这个表达数也是动物

21:48.420 --> 21:49.420
那么这个动物的下一个

21:49.420 --> 21:50.420
是不是就

21:50.420 --> 21:51.420
你看吧就拿到这个了

21:52.420 --> 21:53.420
不复杂吧

21:54.420 --> 21:55.420
就是单词比较长吗

21:55.420 --> 21:57.420
单词没有让你去记

21:58.420 --> 22:00.420
然后还可以拿到前一个

22:00.420 --> 22:01.420
比方说

22:02.420 --> 22:04.420
下一个的下一个的前一个

22:04.420 --> 22:05.420
尽管这样子写

22:05.420 --> 22:06.420
有点神经病

22:06.420 --> 22:07.420
但是

22:08.420 --> 22:09.420
确实可以的

22:09.420 --> 22:10.420
确实可以

22:10.420 --> 22:11.420
li

22:11.420 --> 22:13.420
li是第1个

22:13.420 --> 22:14.420
第1个的下一个的

22:14.420 --> 22:15.420
下一个的前一个

22:15.420 --> 22:17.420
不是拿到一个句话算吗

22:18.420 --> 22:19.420
还有好多

22:19.420 --> 22:20.420
真的好多这些东西

22:20.420 --> 22:22.420
它提供了非常非常丰富

22:22.420 --> 22:25.420
丰富的令人发指的功能

22:25.420 --> 22:26.420
让你去获取元数

22:26.420 --> 22:28.420
就从一个数

22:28.420 --> 22:30.420
动物数里面去获取元数

22:30.420 --> 22:32.420
还可以什么first element child

22:32.420 --> 22:33.420
拿到第1个指援数

22:33.420 --> 22:35.420
UL的第1个指援数

22:35.420 --> 22:37.420
还可以通过last element child

22:37.420 --> 22:39.420
拿到最后一个指援数

22:39.420 --> 22:40.420
都可以

22:40.420 --> 22:41.420
反正就是各种方式

22:41.420 --> 22:42.420
让你拿到这个东西

22:42.420 --> 22:44.420
因为只有拿到之后才能玩

22:45.420 --> 22:47.420
还有 parent element

22:47.420 --> 22:48.420
得到副元数

22:49.420 --> 22:50.420
你不要去记

22:50.420 --> 22:51.420
反正就是要用的时候

22:51.420 --> 22:53.420
要拿什么你去查文档

22:53.420 --> 22:55.420
拿到副元数

22:55.420 --> 22:57.420
那副元数的副元数呢

22:59.420 --> 23:01.420
那副元数的副元数的副元数呢

23:01.420 --> 23:04.420
最终就到那个保底了

23:04.420 --> 23:06.420
然后再副元数呢

23:07.420 --> 23:08.420
就到哪了

23:08.420 --> 23:09.420
到AT面了

23:09.420 --> 23:11.420
然后再副元数呢

23:11.420 --> 23:13.420
parent element

23:13.420 --> 23:14.420
就是now了

23:14.420 --> 23:16.420
因为AT面实在是没有副元数的

23:17.420 --> 23:18.420
就这样

23:18.420 --> 23:19.420
获取动物

23:19.420 --> 23:20.420
再重生一次

23:20.420 --> 23:21.420
获取动物啥意识

23:21.420 --> 23:22.420
终点是什么

23:22.420 --> 23:24.420
终点是获取动物啥意识

23:24.420 --> 23:25.420
不重要

23:25.420 --> 23:26.420
查就完事了

23:26.420 --> 23:28.420
手段多得不得了

23:28.420 --> 23:29.420
也不是说

23:29.420 --> 23:30.420
每做一道题

23:30.420 --> 23:32.420
就必须要把全部都用到了

23:32.420 --> 23:33.420
封了

23:33.420 --> 23:34.420
用哪个用哪个

23:34.420 --> 23:36.420
你喜欢用哪个用哪个

23:36.420 --> 23:38.420
但是肯定你最终就喜欢用这个

23:38.420 --> 23:39.420
对吧

23:39.420 --> 23:40.420
不喜欢不

23:40.420 --> 23:41.420
你喜欢

23:41.420 --> 23:42.420
你很快就会喜欢

23:43.420 --> 23:44.420
这个获取动物呢

23:44.420 --> 23:45.420
其实就是

23:45.420 --> 23:47.420
什么意识你要搞清楚

23:47.420 --> 23:49.420
就是我们页面上

23:49.420 --> 23:51.420
是一个AT面文档

23:51.420 --> 23:52.420
有很多元数

23:52.420 --> 23:53.420
文本组成的

23:53.420 --> 23:54.420
对吧

23:54.420 --> 23:56.420
那么这个文档里边呢

23:56.420 --> 23:58.420
它就形成了一个数结构

23:58.420 --> 23:59.420
获取动物啥意识

23:59.420 --> 24:01.420
就是从这个数结构里边

24:01.420 --> 24:03.420
去拿到动物

24:03.420 --> 24:04.420
好下一个

24:04.420 --> 24:06.420
创建动物

24:06.420 --> 24:07.420
除了我获取之外

24:07.420 --> 24:09.420
我还可以创建

24:09.420 --> 24:11.420
我可以新来一个动物

24:11.420 --> 24:12.420
比方就这边

24:12.420 --> 24:13.420
我来一个Document

24:13.420 --> 24:15.420
CreateElement

24:15.420 --> 24:17.420
创建一个DIV

24:17.420 --> 24:18.420
可不可以

24:18.420 --> 24:19.420
可以

24:19.420 --> 24:21.420
它返回一个动物

24:21.420 --> 24:22.420
这个就是个动物

24:22.420 --> 24:23.420
DIV在哪呢

24:23.420 --> 24:24.420
注意

24:24.420 --> 24:26.420
你新创建的动物元数

24:26.420 --> 24:27.420
它不在数结构里边

24:27.420 --> 24:28.420
这是一棵数

24:28.420 --> 24:29.420
对吧

24:29.420 --> 24:30.420
我们网易上的一棵数

24:30.420 --> 24:31.420
你新创建的是在旁边

24:31.420 --> 24:32.420
反正它

24:32.420 --> 24:34.420
不是说脱离这个数结构

24:34.420 --> 24:35.420
它就不是对象了

24:35.420 --> 24:36.420
它还是一个对象

24:36.420 --> 24:37.420
对象是对象

24:37.420 --> 24:38.420
对吧

24:38.420 --> 24:39.420
那你说吧

24:39.420 --> 24:40.420
我这里一个OBC

24:40.420 --> 24:41.420
这个对象

24:41.420 --> 24:43.420
它跟那个E面上的数有啥关系

24:43.420 --> 24:44.420
没有啥关系

24:44.420 --> 24:45.420
它是不是对象

24:45.420 --> 24:46.420
还是对象

24:46.420 --> 24:47.420
那这里是一样的

24:47.420 --> 24:48.420
我就创建了一个对象

24:48.420 --> 24:50.420
不要把它想复杂了

24:51.420 --> 24:53.420
它就是一个对象而已

24:54.420 --> 24:55.420
原来是使多大的机会

24:55.420 --> 24:57.420
给你们说这个道理

24:57.420 --> 24:58.420
它就是一个对象

24:58.420 --> 25:00.420
它只不过它数性比较多而已

25:00.420 --> 25:01.420
它就是一个对象

25:01.420 --> 25:03.420
因此你创建就创建了

25:03.420 --> 25:04.420
怎么样

25:04.420 --> 25:05.420
它跟E面有没有关系

25:05.420 --> 25:06.420
它没有关系

25:06.420 --> 25:08.420
它跟我们那棵数是没有关系的

25:08.420 --> 25:09.420
对吧

25:09.420 --> 25:10.420
就创建了

25:10.420 --> 25:11.420
它仍然是对象

25:11.420 --> 25:13.420
它可以有各种各样的属性

25:13.420 --> 25:14.420
它后边属性的操作

25:14.420 --> 25:15.420
各种东西

25:15.420 --> 25:16.420
跟我们后边学的

25:16.420 --> 25:17.420
什么操作属性

25:17.420 --> 25:19.420
那种都是完全一样的

25:19.420 --> 25:21.420
只是它不在E面那个数结构里面

25:22.420 --> 25:23.420
好吧

25:23.420 --> 25:24.420
就创建就完了

25:24.420 --> 25:25.420
就创建了

25:25.420 --> 25:27.420
那就是一啥用了

25:27.420 --> 25:29.420
你马上看后边吧

25:29.420 --> 25:30.420
比方说

25:30.420 --> 25:31.420
跟下边那个

25:31.420 --> 25:32.420
更改动物结构

25:32.420 --> 25:33.420
这是啥意思

25:33.420 --> 25:35.420
这指的就是在数里面变动

25:35.420 --> 25:37.420
比方说我要把这个节点

25:37.420 --> 25:40.420
给它干掉

25:40.420 --> 25:41.420
这就是更改动物结构

25:41.420 --> 25:43.420
或者是我要把这个东西

25:43.420 --> 25:45.420
给它夹到数里面去

25:45.420 --> 25:46.420
这就是更改结构

25:46.420 --> 25:47.420
就改动这棵数

25:48.420 --> 25:49.420
就叫更改动物结构

25:49.420 --> 25:50.420
所以说你

25:50.420 --> 25:51.420
最重要的是你要看懂

25:51.420 --> 25:53.420
它到底在做什么

25:53.420 --> 25:54.420
那具体怎么做

25:54.420 --> 25:55.420
要哪些手段

25:55.420 --> 25:57.420
刁用哪个函数不重要

25:57.420 --> 25:58.420
查就完事了

25:59.420 --> 26:00.420
比方说这个鞋带

26:00.420 --> 26:01.420
我鞋带

26:01.420 --> 26:02.420
我这个地方数结构

26:02.420 --> 26:03.420
要变动一下

26:03.420 --> 26:04.420
那你查哪里就查这儿

26:04.420 --> 26:05.420
怎么变动

26:05.420 --> 26:06.420
你要干嘛

26:06.420 --> 26:07.420
你要删除

26:07.420 --> 26:08.420
还要做什么事情

26:09.420 --> 26:10.420
好

26:10.420 --> 26:11.420
那还有哪些手段

26:11.420 --> 26:12.420
可以变动数结构吗

26:12.420 --> 26:13.420
第一个就是

26:13.420 --> 26:14.420
remove删除

26:14.420 --> 26:15.420
要干掉

26:15.420 --> 26:16.420
比方说我们现在

26:16.420 --> 26:17.420
选中这个实状

26:18.420 --> 26:20.420
当时来完整的鞋法

26:20.420 --> 26:22.420
是Documents, Choirs, Negator

26:22.420 --> 26:24.420
选中这个实状

26:24.420 --> 26:25.420
有的时候我们说

26:25.420 --> 26:26.420
简洁点就是选中

26:26.420 --> 26:28.420
其实就是获取这个动物元素

26:28.420 --> 26:30.420
所以拿到个动物对象了

26:30.420 --> 26:32.420
对象里面就有一个方法

26:32.420 --> 26:33.420
方法叫什么

26:33.420 --> 26:34.420
remove

26:34.420 --> 26:35.420
叫什么

26:35.420 --> 26:36.420
叫自杀

26:36.420 --> 26:37.420
把自己干掉

26:38.420 --> 26:39.420
比方说我们这里的

26:39.420 --> 26:40.420
保存了边量里面

26:40.420 --> 26:41.420
但不保存边量

26:41.420 --> 26:42.420
行不行也可以

26:42.420 --> 26:43.420
还是个表达式嘛

26:43.420 --> 26:44.420
得到就是个动物对象

26:44.420 --> 26:45.420
把这个动物去上干掉

26:46.420 --> 26:47.420
remove

26:48.420 --> 26:49.420
是不是一面上就没了

26:49.420 --> 26:50.420
它指的啥意思

26:50.420 --> 26:52.420
指的是从这个数结构里面

26:53.420 --> 26:54.420
把它给干掉

26:54.420 --> 26:55.420
但是对象在不在

26:55.420 --> 26:56.420
对象是在的

26:58.420 --> 26:59.420
一看动物在不在

26:59.420 --> 27:00.420
还在啊

27:00.420 --> 27:01.420
对象还在

27:01.420 --> 27:03.420
只是它这个数结构里面没了

27:03.420 --> 27:04.420
它不在这个数结构里面

27:04.420 --> 27:06.420
所以说一面上你看不见了

27:06.420 --> 27:08.420
对象还是在的

27:08.420 --> 27:10.420
有一天你把它夹回去

27:10.420 --> 27:11.420
对象直接夹回去就行了

27:12.420 --> 27:13.420
这是remove

27:13.420 --> 27:14.420
remove

27:14.420 --> 27:15.420
然后呢

27:15.420 --> 27:16.420
下面这个用的比较少一点

27:16.420 --> 27:18.420
下面这个叫remove child

27:18.420 --> 27:19.420
都指的是什么呢

27:19.420 --> 27:21.420
移除某一个指节点

27:21.420 --> 27:22.420
比方说吧

27:22.420 --> 27:24.420
我们又来一个UL

27:24.420 --> 27:26.420
然后li乘1

27:26.420 --> 27:27.420
5个

27:27.420 --> 27:28.420
这里选项

27:28.420 --> 27:29.420
DOL

27:32.370 --> 27:34.370
比方说我要把第1个干掉

27:34.370 --> 27:35.370
我要干掉它第1个

27:35.370 --> 27:36.370
那怎么弄呢

27:37.370 --> 27:38.370
我首先拿到这个

27:39.370 --> 27:40.370
但是用法

27:40.370 --> 27:41.370
做法特别特别多

27:41.370 --> 27:43.370
我比方拿到UL

27:46.450 --> 27:47.450
UL对吧

27:48.450 --> 27:50.450
算了我还是用那个完整的写法

27:50.450 --> 27:51.450
免得同学们会误解

27:51.450 --> 27:53.450
在代码里面也可以这样子写

27:53.450 --> 27:54.450
代码里面不能这样写

27:54.450 --> 27:56.450
拿到这个UL

27:56.450 --> 27:58.450
我怎么做法多的要命

27:58.450 --> 28:01.450
我现在可以拿到first element child

28:01.450 --> 28:03.450
是不是可以拿到第1个动物对象

28:03.450 --> 28:04.450
然后把它自杀

28:04.450 --> 28:06.450
你去自杀remove

28:06.450 --> 28:08.450
就自己把自己干掉了

28:08.450 --> 28:09.450
对吧

28:09.450 --> 28:10.450
也可以怎么弄呢

28:10.450 --> 28:12.450
也可以拿到这个UL之后

28:13.450 --> 28:14.450
remove child

28:15.450 --> 28:17.450
移除指节链

28:17.450 --> 28:20.450
那么这里传一个指节链的动物对象

28:20.450 --> 28:22.450
这里要传个动物对象

28:22.450 --> 28:23.450
从哪一个呢

28:23.450 --> 28:28.450
我就把first element 传进去

28:28.450 --> 28:30.450
是不是它第1个指节链

28:30.450 --> 28:31.450
把个动物对象传进去

28:31.450 --> 28:33.450
那么它就会在它的指援数中

28:33.450 --> 28:35.450
移除对应的动物对象

28:35.450 --> 28:36.450
用的是比较少一点

28:36.450 --> 28:37.450
它都可以

28:39.450 --> 28:40.450
懂了意思吗

28:40.450 --> 28:41.450
就这么个意思

28:41.450 --> 28:43.450
那如果说我再要删除第2项呢

28:43.450 --> 28:45.450
那现在的第1项是不是变成了那个了

28:45.450 --> 28:46.450
选项2了

28:46.450 --> 28:48.450
就删除第2项

28:49.450 --> 28:51.450
它会返回3出的动物对象

28:53.450 --> 28:55.450
然后还有一个insert before

28:56.450 --> 28:58.450
这是什么意思呢

28:58.450 --> 29:00.450
比方说吧我们又来

29:01.450 --> 29:03.450
我现在要把这个

29:04.450 --> 29:06.450
选项2跟选项1互换

29:06.450 --> 29:07.450
换句话说什么

29:07.450 --> 29:09.450
我要把选项2的动物对象

29:09.450 --> 29:11.450
加到选项1前面去

29:12.450 --> 29:14.450
就是insert before

29:14.450 --> 29:16.450
插入到什么什么之前

29:16.450 --> 29:17.450
那么这个玩意怎么玩呢

29:17.450 --> 29:19.450
我首先拿到它的复原数

29:19.450 --> 29:21.450
Ul

29:21.450 --> 29:23.450
然后Ul里面不是有一个

29:24.450 --> 29:25.450
第1个对吧

29:25.450 --> 29:27.450
第1个就是Ul first element

29:27.450 --> 29:28.450
还有一个什么

29:28.450 --> 29:30.450
第2个是Ul

29:32.450 --> 29:34.450
child 1

29:34.450 --> 29:35.450
对吧

29:35.450 --> 29:36.450
好多好多的那种方式

29:36.450 --> 29:37.450
可以拿到动物对象

29:37.450 --> 29:39.450
所以拿到第2个了

29:39.450 --> 29:40.450
那Lie

29:40.450 --> 29:41.450
是不是第1个

29:41.450 --> 29:42.450
对吧

29:42.450 --> 29:43.450
Li2

29:43.450 --> 29:44.450
是不是第2个

29:44.450 --> 29:46.450
那我现在我要把第2个加到第1个前面

29:46.450 --> 29:47.450
怎么弄的

29:47.450 --> 29:48.450
找它的复原数

29:48.450 --> 29:50.450
找它的方法insert before

29:51.450 --> 29:52.450
before

29:53.450 --> 29:54.450
两个参数

29:54.450 --> 29:55.450
第1个参数

29:55.450 --> 29:56.450
你要插入的节点

29:56.450 --> 29:57.450
插入哪个节点

29:57.450 --> 29:58.450
第2个节点

29:59.450 --> 30:00.450
第2个参数你要插入

30:00.450 --> 30:02.450
插入哪个节点之前

30:02.450 --> 30:03.450
插入哪个节点之前

30:03.450 --> 30:04.450
插到第1个节点之前

30:04.450 --> 30:06.450
就是我要把第2个节点

30:06.450 --> 30:07.450
插到第1个节点之前

30:07.450 --> 30:08.450
就换过来了

30:09.450 --> 30:11.450
它的数节就变动了

30:11.450 --> 30:13.450
当然你也可以怎么样

30:13.450 --> 30:15.450
你可以新建一个动物对象

30:15.450 --> 30:16.450
哎呀

30:16.450 --> 30:17.450
哪法太多了

30:17.450 --> 30:18.450
crazy elements

30:19.450 --> 30:20.450
Li

30:20.450 --> 30:21.450
我创建一个Li

30:25.340 --> 30:26.340
然后呢

30:26.340 --> 30:27.340
拿一个Ul

30:27.340 --> 30:28.340
insert before

30:31.350 --> 30:33.350
现在我把这个Li加到哪了

30:33.350 --> 30:34.350
加到Li2之前

30:36.350 --> 30:37.350
就选项2之前

30:38.350 --> 30:39.350
现在它变成第1个了

30:39.350 --> 30:40.350
选项2之前

30:40.350 --> 30:41.350
那你看

30:41.350 --> 30:42.350
这是不是多了个Li了

30:43.350 --> 30:45.350
那如果说要加到选项1之前呢

30:45.350 --> 30:47.350
那就在这里加了

30:47.350 --> 30:48.350
就这么个意思

30:50.350 --> 30:51.350
这个用的比较少一点

30:51.350 --> 30:52.350
但是有的是

30:52.350 --> 30:53.350
万一有可能会用到

30:53.350 --> 30:54.350
这里一个超链接

30:54.350 --> 30:55.350
可以点进去看一下

30:55.350 --> 30:56.350
它的详情

30:57.350 --> 30:58.350
有些比较简单的

30:58.350 --> 30:59.350
我就懒得给你写超链接了

31:01.350 --> 31:02.350
这个玩意用的比较多

31:02.350 --> 31:03.350
而Paint Child

31:03.350 --> 31:04.350
这个玩意用的很多

31:04.350 --> 31:05.350
那它是什么呢

31:05.350 --> 31:07.350
它是加入一个

31:07.350 --> 31:09.350
指节点到末尾

31:11.350 --> 31:12.350
加一个指节点到末尾

31:12.350 --> 31:13.350
其实这个玩意

31:13.350 --> 31:14.350
也可以加指节点到末尾

31:14.350 --> 31:15.350
比方说你写个NOW

31:17.350 --> 31:18.350
你查到哪个之前

31:18.350 --> 31:19.350
NOW之前NOW

31:19.350 --> 31:21.350
它就当成最后一个节点了

31:21.350 --> 31:22.350
你看

31:22.350 --> 31:23.350
它就加到最后一个

31:24.350 --> 31:25.350
那么除了用这种方式

31:25.350 --> 31:26.350
加到最后一个之外呢

31:26.350 --> 31:28.350
还可以用Appaint Child

31:29.350 --> 31:30.350
比方说我要在

31:31.350 --> 31:32.350
Ul里边Appaint

31:33.350 --> 31:35.350
就是再来一个Li嘛

31:36.350 --> 31:38.350
我要在Ul里边Appaint Child

31:41.350 --> 31:42.350
所以就加了一个

31:42.350 --> 31:44.350
只不过这个Li没有内容

31:44.350 --> 31:45.350
因为我只是一个

31:45.350 --> 31:46.350
一个干净的元素

31:46.350 --> 31:48.350
里边啥内容都没有

31:48.350 --> 31:49.350
没有内容的

31:50.350 --> 31:51.350
这就是

31:52.350 --> 31:53.350
那结构嘛

31:54.350 --> 31:55.350
没啥嘛

31:56.350 --> 31:57.350
就是拿了动

31:57.350 --> 31:58.350
创建动物也好

31:58.350 --> 31:59.350
拿了动物也好

31:59.350 --> 32:01.350
然后了改动它的结构

32:01.350 --> 32:02.350
再重生一次

32:02.350 --> 32:04.350
不要去背这些东西

32:04.350 --> 32:05.350
不要去记这种各种

32:05.350 --> 32:06.350
各种乱七八糟的规则

32:06.350 --> 32:08.350
你就想你现在要干嘛

32:09.350 --> 32:10.350
你要拿到动物就看这

32:10.350 --> 32:12.350
你要创建动物就看这

32:12.350 --> 32:14.350
你要改它的数型结构就看这

32:14.350 --> 32:16.350
抓住它的提缸

32:17.350 --> 32:18.350
然后呢

32:18.350 --> 32:20.350
现在下面就是动物属性

32:20.350 --> 32:21.350
因为我们知道

32:21.350 --> 32:22.350
ATM元素啊

32:22.350 --> 32:23.350
它是有属性的

32:23.350 --> 32:24.350
比方说

32:24.350 --> 32:25.350
我们这里能拿一个AMG

32:26.350 --> 32:27.350
找一个属

32:27.350 --> 32:28.350
找一个吧

32:31.350 --> 32:33.350
或者拿一个A元素吧

32:33.350 --> 32:34.350
A元素

32:35.350 --> 32:36.350
进去

32:37.350 --> 32:38.350
进去

32:38.350 --> 32:40.350
或者是连接到哪呢

32:40.350 --> 32:41.350
连接到2.ATM

32:42.350 --> 32:46.370
连接到2.ATM

32:47.370 --> 32:48.370
Go to

32:50.370 --> 32:51.370
2.ATM

32:51.370 --> 32:52.370
好来这么一个A元素

32:52.370 --> 32:54.370
你看元素是不是有属性的

32:54.370 --> 32:55.370
对吧

32:55.370 --> 32:56.370
那这一块说的就是什么

32:56.370 --> 32:58.370
说的就是超多元素的属性

32:58.370 --> 32:59.370
那属性怎么玩

33:01.370 --> 33:02.370
咱们来首先

33:02.370 --> 33:04.370
获得这个A元素

33:07.450 --> 33:08.450
下面就这个

33:09.450 --> 33:10.450
Documents

33:10.450 --> 33:11.450
query

33:11.450 --> 33:12.450
select

33:12.450 --> 33:13.450
对吧

33:13.450 --> 33:14.450
我们一面上只有一个A

33:14.450 --> 33:15.450
那就是A元素

33:15.450 --> 33:16.450
拿到了对吧

33:16.450 --> 33:18.450
好那怎么来拿它那边的属性呢

33:19.450 --> 33:22.450
所以这个属性的一块规则

33:22.450 --> 33:23.450
反而遇到规则

33:23.450 --> 33:25.450
概念性的东西变得重要了

33:26.450 --> 33:28.450
因为你只要掌握了规则和概念

33:28.450 --> 33:30.450
你就可以搞定一系列的事情

33:31.450 --> 33:34.450
属性它认为有两种

33:34.450 --> 33:36.450
一种叫标准属性

33:36.450 --> 33:37.450
什么叫标准属性

33:38.450 --> 33:40.450
就是这个元素本身就有的属性

33:40.450 --> 33:42.450
比方说像这个属性就是标准属性

33:42.450 --> 33:44.450
那你像这个属性是不是标准属性

33:45.450 --> 33:46.450
不是它能不能写

33:46.450 --> 33:47.450
肯定是可以写

33:47.450 --> 33:48.450
它写的又怎么样

33:49.450 --> 33:50.450
电脑又不会爆炸

33:51.450 --> 33:55.040
不还在这吗

33:55.040 --> 33:57.040
对吧你看这个Element里面不还在这吗

33:57.040 --> 33:58.040
它没啥用对吧

33:58.040 --> 33:59.040
它没啥用

34:00.040 --> 34:02.040
这叫自定义属性

34:02.040 --> 34:03.040
就有些属性是标准属性

34:03.040 --> 34:05.040
就是你写的有特殊作用的

34:05.040 --> 34:07.040
有些属性没有啥用处

34:07.040 --> 34:08.040
那么就是你随便瞎写的

34:08.040 --> 34:09.040
叫自定义属性

34:12.040 --> 34:14.040
自定属性有没有用有用

34:14.040 --> 34:16.040
将来你们遇到一些场景的时候

34:16.040 --> 34:17.040
就会发现它有用

34:17.040 --> 34:19.040
但是跟界面没有直接的关系

34:19.040 --> 34:20.040
它是有间接的关系

34:21.040 --> 34:23.040
但是现在我们没啥用

34:23.040 --> 34:25.040
自定义属性就是标准属性

34:25.040 --> 34:26.040
它分成两种

34:26.040 --> 34:28.040
对于标准属性

34:28.040 --> 34:30.040
它本身就是多么对象的属性

34:30.040 --> 34:31.040
你可以直接点出来

34:32.040 --> 34:33.040
啥意思

34:33.040 --> 34:36.040
比方说你这个不是一个A元素吗

34:37.040 --> 34:38.040
A的动物对象

34:38.040 --> 34:41.040
标准属性REF是可以直接打出来的

34:41.040 --> 34:43.040
你可以获取属性的值

34:43.040 --> 34:44.040
看到没

34:46.040 --> 34:48.040
比方说TITLE是不是标准属性

34:48.040 --> 34:49.040
也是

34:49.040 --> 34:51.040
表示属标移上去它那个提示

34:51.040 --> 34:53.040
TITLE也是标准属性

34:53.040 --> 34:55.040
那么也可以直接用的属性

34:56.040 --> 34:58.040
你会发现它不是OND犯的

34:58.040 --> 35:00.040
只要是标准属性

35:00.040 --> 35:01.040
它都会有一些默认值

35:01.040 --> 35:02.040
它是它的默认值

35:02.040 --> 35:04.040
你不管你这里写没写

35:04.040 --> 35:06.040
写没写TITLE

35:06.040 --> 35:08.040
那么它这里

35:08.040 --> 35:10.040
都是有值的

35:10.040 --> 35:11.040
就这么个意思

35:12.040 --> 35:13.040
那么看一下

35:13.040 --> 35:14.040
比标准属性

35:14.040 --> 35:16.040
都可以通过多么第二属性来获取

35:16.040 --> 35:17.040
其中

35:17.040 --> 35:20.040
多而属性会被自动转换成布定

35:20.040 --> 35:22.040
这又是啥意思

35:22.040 --> 35:24.040
比方说我们这里有一个INPUT

35:24.040 --> 35:26.040
CHECKBOX

35:26.040 --> 35:28.040
有一个夺选框

35:29.040 --> 35:30.040
是不是这个玩意

35:30.040 --> 35:32.040
好 我们来获取一下

35:39.120 --> 35:40.120
是不是夺选框

35:40.120 --> 35:41.120
那么它里边

35:41.120 --> 35:43.120
是不是有个属性叫CHECKZ

35:43.120 --> 35:45.120
是否选中

35:45.120 --> 35:46.120
它是一个什么布耳

35:46.120 --> 35:48.120
它目前没有选中

35:48.120 --> 35:50.120
那么离它选中过后

35:51.120 --> 35:53.120
它目前就是处了

35:53.120 --> 35:54.120
它是个布耳

35:54.120 --> 35:56.120
那么为什么要单独说为这一点

35:56.120 --> 35:58.120
是因为我们在一天没有写的时候

35:58.120 --> 35:59.120
是应该这样子写

35:59.120 --> 36:00.120
是不是应该这样子写

36:00.120 --> 36:01.120
它的完整写法是这样子写

36:01.120 --> 36:03.120
当然你不写这个也行

36:03.120 --> 36:05.120
布耳属性都可以不写的

36:05.120 --> 36:07.120
那么这个时候我再去看一下

36:07.120 --> 36:09.120
它有没有选中

36:10.120 --> 36:11.120
CHECKZ

36:11.120 --> 36:12.120
它还是布耳

36:12.120 --> 36:14.120
它不会得到这个东西

36:14.120 --> 36:15.120
有什么意思

36:15.120 --> 36:16.120
对于布耳属性

36:16.120 --> 36:18.120
它得到的就是CHECKZ

36:18.120 --> 36:20.120
我说的就是这个点意思

36:20.120 --> 36:22.120
路径内的属性

36:22.120 --> 36:24.120
会被转换成绝对路径

36:24.120 --> 36:25.120
这又是啥意思呢

36:25.120 --> 36:26.120
你看这个A元数

36:26.120 --> 36:28.120
我写的是啥

36:28.120 --> 36:29.120
相对路径

36:30.120 --> 36:31.120
2.18秒

36:31.120 --> 36:34.120
然后我现在去拿到这个A元数

36:35.120 --> 36:36.120
CHECKZ

36:36.120 --> 36:38.120
它是不是变成了绝对路径呢

36:38.120 --> 36:40.120
包括这个电阶

36:40.120 --> 36:42.120
包括图片都是这样的一个规则

36:42.120 --> 36:43.120
它会变成绝对路径

36:45.120 --> 36:47.120
这是这么一个现象

36:47.120 --> 36:48.120
然后

36:50.120 --> 36:52.120
标准属性始终都是存在的

36:52.120 --> 36:53.120
就是刚才看到的现象

36:53.120 --> 36:55.120
不管你有没有在元数里边写这个属性

36:55.120 --> 36:57.120
它始终是存在的

36:57.120 --> 36:58.120
比方说刚才看到这个A点

36:58.120 --> 37:00.120
TITLE实际上是没有写的

37:00.120 --> 37:01.120
包括这里的CHECKZ

37:01.120 --> 37:02.120
实际上是没有写的

37:02.120 --> 37:03.120
它都会存在

37:03.120 --> 37:05.120
因为它是标准

37:05.120 --> 37:07.120
另外一个了

37:07.120 --> 37:08.120
就了解一下就行了

37:08.120 --> 37:09.120
因为现在我们不用的

37:09.120 --> 37:11.120
目前至少目前用不到的

37:11.120 --> 37:13.120
叫制定义属性

37:13.120 --> 37:14.120
制定义属性

37:14.120 --> 37:16.120
它要通过下边的那种方式

37:16.120 --> 37:18.120
刚才还忘了说这个

37:18.120 --> 37:20.120
属性是可以重新复制的

37:20.120 --> 37:24.650
3.18秒

37:25.650 --> 37:27.650
这样子它就变了

37:27.650 --> 37:28.650
变成这个了

37:29.650 --> 37:31.650
它是可以重新改值的

37:31.650 --> 37:33.650
那么现在就过去了

37:33.650 --> 37:35.650
过去了是绝对入境

37:35.650 --> 37:37.650
就这么个意思

37:37.650 --> 37:39.650
制定义属性也是有复制

37:39.650 --> 37:41.650
也是有取值

37:41.650 --> 37:43.650
那复制的话

37:43.650 --> 37:46.650
它是要通过一个函数

37:46.650 --> 37:48.650
叫SET HPUZ

37:48.650 --> 37:50.650
设置属性的名字

37:50.650 --> 37:52.650
属性的值

37:52.650 --> 37:54.650
过去了就是SET HPUZ

37:54.650 --> 37:56.650
把名字传进去

37:57.650 --> 37:58.650
比方说

38:03.280 --> 38:05.280
SET HPUZ

38:05.280 --> 38:07.280
ABC

38:07.280 --> 38:09.280
属性值

38:09.280 --> 38:12.980
于是在这个元素上就多了

38:12.980 --> 38:13.980
这么一个属性了

38:13.980 --> 38:14.980
你看吧

38:14.980 --> 38:15.980
多了这么一个属性了

38:15.980 --> 38:16.980
下边

38:16.980 --> 38:18.980
那我要取值的

38:18.980 --> 38:24.590
GET HPUZ

38:24.590 --> 38:26.590
它就把个值取出来了

38:26.590 --> 38:28.590
所有的属性都可以通过

38:28.590 --> 38:29.590
这种方式来做

38:29.590 --> 38:30.590
就是制定义属性

38:30.590 --> 38:32.590
这里有一个现象

38:32.590 --> 38:33.590
编辑体喜欢考

38:33.590 --> 38:35.590
现代编辑体基本不怎么考了

38:35.590 --> 38:37.590
因为就觉得这个玩意

38:37.590 --> 38:39.590
考这个人也没什么技术含量

38:39.590 --> 38:41.590
因为现在前端考的东西可多了

38:41.590 --> 38:43.590
他不需要考这个了

38:43.590 --> 38:44.590
以前他喜欢考他考什么了

38:44.590 --> 38:46.590
他说

38:46.590 --> 38:48.590
用那个HPUZ

38:48.590 --> 38:50.590
去读标准属性会怎么样

38:50.590 --> 38:52.590
比方说我们刚才用了一个

38:52.590 --> 38:54.590
就是CHECK BOSS

38:54.590 --> 38:56.590
CHECK BOSS

38:56.590 --> 38:57.590
我们CHECK BOSS

38:57.590 --> 38:59.590
标准属性是不是这样在取的

38:59.590 --> 39:00.590
取得出来是FORCE

39:00.590 --> 39:03.590
那如果说我用这种方式

39:03.590 --> 39:05.590
GET HPUZ

39:05.590 --> 39:07.590
CHECK BOSS

39:07.590 --> 39:08.590
取这个属性的值

39:08.590 --> 39:09.590
它能取到吗

39:09.590 --> 39:11.590
那取出来又是啥呢

39:11.590 --> 39:14.290
挺好啊

39:14.290 --> 39:17.290
你用这种方式去取的属性

39:17.290 --> 39:19.290
或者是用这种方式去复制的属性

39:19.290 --> 39:22.290
全部都是跟元代码里边

39:22.290 --> 39:24.290
那个标准的属性是对应的

39:24.290 --> 39:26.290
就元代码你写的

39:26.290 --> 39:27.290
写的是啥

39:27.290 --> 39:28.290
你取出来就是啥

39:28.290 --> 39:30.290
你没写取出来就是UNDIFINE

39:31.290 --> 39:33.290
取出来就是NOW

39:33.290 --> 39:34.290
这里边有写吗

39:34.290 --> 39:35.290
有写7个字吗

39:35.290 --> 39:38.290
没有写的话取出来就是NOW

39:38.290 --> 39:40.290
那如果说你写的呢

39:40.290 --> 39:41.290
你写的呢

39:41.290 --> 39:46.390
那取出来是啥

39:48.390 --> 39:55.220
写错位置了

39:55.220 --> 39:56.220
你现在写的

39:56.220 --> 39:57.220
那你取出来

39:57.220 --> 40:00.220
你这里写的是啥就是啥

40:00.220 --> 40:05.430
包括A元数也是一样

40:05.430 --> 40:06.430
A元数也是一样

40:06.430 --> 40:09.430
你用GET HPUZ

40:09.430 --> 40:11.430
去取它什么REF

40:12.430 --> 40:14.430
你写的是啥就是啥

40:14.430 --> 40:15.430
它就不是绝对路径了

40:15.430 --> 40:17.430
就这么个意思

40:17.430 --> 40:19.430
这就是属性

40:19.430 --> 40:21.430
拿到动物对象过后

40:21.430 --> 40:23.430
我们可以改结构

40:23.430 --> 40:25.430
可以获取属性

40:25.430 --> 40:27.430
可以设置属性

40:27.430 --> 40:30.430
我们不但要进入这些细节

40:30.430 --> 40:32.430
还要从细节里面出来

40:32.430 --> 40:34.430
不要进去就出不来了

40:35.430 --> 40:37.430
细节不重要

40:37.430 --> 40:38.430
我们遇到问题

40:38.430 --> 40:39.430
或者是我们需要去

40:39.430 --> 40:40.430
处理某些东西的时候

40:40.430 --> 40:42.430
我们再去查询

40:42.430 --> 40:43.430
但是提纲很重要

40:43.430 --> 40:46.430
提纲就是我们能做的事

40:47.430 --> 40:48.430
接下来看内容

40:48.430 --> 40:50.430
我们除了改这个元数的属性之外

40:50.430 --> 40:53.430
我还可以改它的内容对吧

40:53.430 --> 40:56.430
都是在玩个动物对象

40:56.430 --> 40:57.430
来吧

40:57.430 --> 40:58.430
我们现在就拿到这个A

40:58.430 --> 40:59.430
改它的内容怎么改呢

40:59.430 --> 41:00.430
两种方式

41:00.430 --> 41:01.430
INATEX

41:01.430 --> 41:03.430
改里面的文本

41:03.430 --> 41:05.430
可以获取

41:05.430 --> 41:09.450
也可以改

41:09.450 --> 41:10.450
你看

41:10.450 --> 41:14.450
改了过后你看这个结构里面

41:14.450 --> 41:16.450
是不是这里也跟着改了

41:16.450 --> 41:19.450
把元数里面也跟着改了

41:19.450 --> 41:20.450
好

41:20.450 --> 41:22.450
那么这种INATEX

41:22.450 --> 41:24.450
还可以给它加一些特殊的文本

41:24.450 --> 41:28.020
比方说我给它加这个

41:28.020 --> 41:29.020
看一下

41:29.020 --> 41:31.020
这是INATEX的特点

41:31.020 --> 41:34.020
加了过后会怎么样呢

41:34.020 --> 41:37.020
它里面不会出现一个H1

41:37.020 --> 41:40.020
你看一下元数结构就知道了

41:40.020 --> 41:42.020
我们点击右键

41:43.020 --> 41:46.020
它会给你自动的进行编码

41:46.020 --> 41:47.020
看到没

41:47.020 --> 41:48.020
自动的进行编码

41:48.020 --> 41:50.020
因为你用INATEX

41:50.020 --> 41:51.020
INATEX代表什么意思

41:51.020 --> 41:53.020
表示里面的Tex

41:53.020 --> 41:54.020
表示文本

41:54.020 --> 41:56.020
你操作的是里面的文本

41:56.020 --> 41:57.020
所以说里面

41:57.020 --> 41:58.020
凡是有特殊制服

41:58.020 --> 42:00.020
都会把它当成普通文本

42:00.020 --> 42:01.020
它会给你进行编码

42:01.020 --> 42:02.020
自动编码

42:02.020 --> 42:04.020
这是INATEX

42:04.020 --> 42:05.020
除了INATEX之外

42:05.020 --> 42:07.020
还有一个叫INATEMEL

42:07.020 --> 42:14.120
也是或许它里面的东西

42:14.120 --> 42:16.120
那么设置的时候

42:16.120 --> 42:20.120
如果说你站来跟它设置一个H1

42:20.120 --> 42:21.120
H1

42:21.120 --> 42:22.120
因为它是INATEMEL

42:22.120 --> 42:24.120
所以说里面可以写ATEMEL标签

42:24.120 --> 42:27.120
它不会给你转一层

42:27.120 --> 42:29.120
不会给你进行实体编码

42:29.120 --> 42:32.120
它就变成了个H1元数了

42:32.120 --> 42:33.120
看到没

42:33.120 --> 42:34.120
就这个区别

42:34.120 --> 42:36.120
这两个内容就完了

42:36.120 --> 42:37.120
就完了

42:38.120 --> 42:40.120
然后是样式

42:40.120 --> 42:42.120
样式这里有概念

42:43.120 --> 42:46.120
介石里面有两种样式

42:46.120 --> 42:48.120
在介石里面可以玩的

42:48.120 --> 42:50.120
有两种样式可以给你玩

42:50.120 --> 42:51.120
第一种叫内连样式

42:51.120 --> 42:53.120
也叫做行内样式

42:53.120 --> 42:54.120
这种样式是什么呢

42:54.120 --> 42:56.120
就是这个元数的style

42:56.120 --> 43:01.070
就是写到这个属性style里面的

43:05.770 --> 43:07.770
就写到这个属性style里面的

43:07.770 --> 43:09.770
这就是内连样式

43:09.770 --> 43:11.770
这个样式介石是可以玩的

43:11.770 --> 43:13.770
可以盘它的

43:13.770 --> 43:15.770
第二种样式叫最终样式

43:15.770 --> 43:16.770
还记得吗

43:16.770 --> 43:20.770
我当时讲的CSS的样式计算

43:20.770 --> 43:22.770
就是这里最终形成的样式结果

43:22.770 --> 43:24.770
每一个元数是不是一大堆样式

43:24.770 --> 43:26.770
每一个元数的所有样式都必须要有

43:26.770 --> 43:28.770
最终样式

43:28.770 --> 43:29.770
以style里面写的样式

43:29.770 --> 43:30.770
是不是最终样式

43:30.770 --> 43:31.770
那不一定

43:31.770 --> 43:35.770
比方说你这里写了一个宽度

43:35.770 --> 43:38.770
或者是它都不是core元数

43:38.770 --> 43:40.770
那这个A11宽度

43:40.770 --> 43:42.770
比方说写一个100个相处

43:42.770 --> 43:45.770
假设每个写100个相处的宽度

43:45.770 --> 43:47.770
或者是被宽度了

43:47.770 --> 43:51.770
给它写个百分之百

43:51.770 --> 43:56.530
好 现在我们看计算样式的宽度

43:56.530 --> 43:59.530
是变成744.5

43:59.530 --> 44:00.530
也就是说啥意思呢

44:00.530 --> 44:01.530
就是这里写的样式

44:01.530 --> 44:03.530
它不一定是最终样式

44:03.530 --> 44:05.530
最终样式它会进行各种换算

44:05.530 --> 44:06.530
还会经过什么成别

44:06.530 --> 44:08.530
权中乱七八糟的规则

44:08.530 --> 44:11.530
等等 才会形成最终的样式

44:11.530 --> 44:13.530
也就是介石里面可以玩两种样式

44:13.530 --> 44:14.530
一种是内年样式

44:14.530 --> 44:17.530
就是style里面的一种是最终样式

44:17.530 --> 44:20.900
看下面这句话很重要

44:20.900 --> 44:23.900
介石可以获取内年样式

44:23.900 --> 44:25.900
和计算样式都可以拿

44:25.900 --> 44:28.900
但是只能设置内年样式

44:28.900 --> 44:29.900
也就是你要改样式的话

44:29.900 --> 44:31.900
你只能改这

44:31.900 --> 44:33.900
你只能改它的style里面的东西

44:33.900 --> 44:34.900
你只能改这 没有别的吧

44:34.900 --> 44:37.900
没有别的地方可以让你改

44:37.900 --> 44:39.900
如果说你要获取的话可以有两种

44:39.900 --> 44:41.900
一种是获取style里面的

44:41.900 --> 44:43.900
一种是获取它最终的样式

44:43.900 --> 44:45.900
懂了意思吗

44:45.900 --> 44:49.340
那么我们来看一下

44:49.340 --> 44:51.340
怎么来获取 怎么来改呢

44:51.340 --> 44:54.340
多么里面有个属性叫style

44:54.340 --> 44:55.340
完了

44:55.340 --> 44:58.340
你只需要知道这个style是一个

44:58.340 --> 44:59.340
它的什么意思呢

44:59.340 --> 45:01.340
获取元素的内年样式

45:01.340 --> 45:03.340
就这个属性可以拿到元素的内年样式

45:03.340 --> 45:05.340
得到的是一个对象

45:05.340 --> 45:07.340
对象里面 每一个属性

45:07.340 --> 45:09.340
就对应一个样式名字

45:09.340 --> 45:10.340
看吧

45:10.340 --> 45:12.340
看一下就知道了

45:12.340 --> 45:15.340
比方说我们现在拿到这个H1

45:15.340 --> 45:17.340
就这样拿吧

45:17.340 --> 45:18.340
简单一点

45:18.340 --> 45:20.340
H1是不是一个洞

45:20.340 --> 45:23.340
然后它里面可以通过style

45:23.340 --> 45:26.340
我回车你看一下

45:26.340 --> 45:28.340
一个超级大的对象

45:28.340 --> 45:29.340
它里面包含所有的样式

45:29.340 --> 45:31.340
因为很多样式你都没写

45:31.340 --> 45:33.340
没写的话就是相当于是空置五串

45:33.340 --> 45:34.340
就相当于是啥也没写

45:34.340 --> 45:36.340
没写的话就相当于是空置五串

45:36.340 --> 45:37.340
就这么个意思

45:37.340 --> 45:39.340
那你写的那我看有没有写

45:39.340 --> 45:40.340
写的一个宽度

45:40.340 --> 45:41.340
对吧

45:41.340 --> 45:42.340
那我们来看一下

45:42.340 --> 45:44.340
H1的宽度

45:44.340 --> 45:45.340
对不对

45:45.340 --> 45:47.340
H1style.宽度

45:47.340 --> 45:49.340
你写的是啥

45:49.340 --> 45:50.340
写的是百分之百的

45:50.340 --> 45:51.340
就是百分之百

45:51.340 --> 45:52.340
得到的是一个制服串

45:52.340 --> 45:53.340
百分之百

45:53.340 --> 45:55.340
就是这样子

45:55.340 --> 45:57.340
那么如果要改的话怎么改呢

45:57.340 --> 45:58.340
它是一个对象

45:58.340 --> 45:59.340
每一个属性就对应一个样式

45:59.340 --> 46:02.340
比方说改它的颜色改成不露

46:02.340 --> 46:05.340
特别蓝色了

46:05.340 --> 46:06.340
对吧

46:06.340 --> 46:07.340
就这么简单

46:07.340 --> 46:09.340
你要改它的文字大小

46:09.340 --> 46:11.340
style. fun. size

46:11.340 --> 46:12.340
注意

46:12.340 --> 46:14.340
这里是不是短横线命运法

46:14.340 --> 46:17.340
所有的CSS里面短横线命运法

46:17.340 --> 46:19.340
全部变成陀缝命运法

46:19.340 --> 46:21.340
对吧

46:21.340 --> 46:23.340
50px

46:23.340 --> 46:24.340
变大了

46:24.340 --> 46:25.340
你看一下

46:25.340 --> 46:26.340
改的是啥

46:26.340 --> 46:27.340
改的就是这个style

46:27.340 --> 46:28.340
你看一个style

46:28.340 --> 46:29.340
宽度对吧

46:29.340 --> 46:30.340
color. fun. size

46:30.340 --> 46:32.340
改的就是这么一个玩意

46:32.340 --> 46:34.340
获取了也是获取这么

46:34.340 --> 46:35.340
这里的玩意

46:35.340 --> 46:36.340
这就是

46:37.340 --> 46:38.340
多么调style

46:38.340 --> 46:39.340
简单不简单

46:39.340 --> 46:40.340
非常简单吗

46:40.340 --> 46:43.340
不是说它复杂在哪儿

46:43.340 --> 46:44.340
我们刚才说了

46:44.340 --> 46:45.340
获取样式的时候

46:45.340 --> 46:46.340
不仅可以获取内联样式

46:46.340 --> 46:48.340
还可以获取计算样式

46:48.340 --> 46:50.340
那么计算样式有怎么获取呢

46:50.340 --> 46:52.340
是要通过这个方法

46:52.340 --> 46:53.340
一个权局方法叫

46:53.340 --> 46:55.340
getcomputed style

46:55.340 --> 46:56.340
把多么传进去

46:56.340 --> 46:58.340
它会反而回一个样式对象

46:58.340 --> 46:59.340
那个样式对象跟那个style

46:59.340 --> 47:02.340
就差不多

47:02.340 --> 47:03.340
然后就

47:03.340 --> 47:04.340
但是它里边的东西

47:04.340 --> 47:05.340
只是指读的

47:05.340 --> 47:06.340
里面发重新复制

47:06.340 --> 47:07.340
因为我们刚才说了

47:07.340 --> 47:08.340
一设置的时候

47:08.340 --> 47:09.340
只能设置内联

47:09.340 --> 47:11.340
也不能改变最终样式

47:11.340 --> 47:13.780
至于为什么

47:13.780 --> 47:14.780
它要这样去设置规则

47:14.780 --> 47:15.780
有它的道理

47:15.780 --> 47:17.780
我这里不去策略

47:18.780 --> 47:20.780
比方说那个Ace

47:20.780 --> 47:23.780
Ace我来一个getcomputed style

47:23.780 --> 47:24.780
computed是什么意思

47:24.780 --> 47:25.780
计算的

47:25.780 --> 47:27.780
被计算的结果style

47:27.780 --> 47:28.780
样式

47:28.780 --> 47:29.780
把Ace传进去

47:29.780 --> 47:30.780
这样子它就会

47:30.780 --> 47:32.780
反回一个对象

47:32.780 --> 47:33.780
对对象里边

47:33.780 --> 47:34.780
还是一样

47:34.780 --> 47:35.780
你看现在

47:35.780 --> 47:36.780
之前style里边

47:36.780 --> 47:38.780
是不是很多都没有指

47:44.300 --> 47:45.300
是不是很多都没有指

47:45.300 --> 47:47.300
它现在是不是都有指了

47:47.300 --> 47:48.300
是不是都有指了

47:48.300 --> 47:49.300
为什么它计算的结果

47:49.300 --> 47:50.300
我们之前说过

47:50.300 --> 47:52.300
CAC样式的计算过程

47:52.300 --> 47:53.300
都有指了

47:53.300 --> 47:54.300
它没有指的话

47:54.300 --> 47:55.300
就有默认指

47:55.300 --> 47:56.300
其实这里呢

47:56.300 --> 47:57.300
你也可以看到

47:57.300 --> 47:58.300
CAC是属性的

47:58.300 --> 48:00.300
有331个

48:02.300 --> 48:04.300
就这么一个东西

48:04.300 --> 48:05.300
我现在试一下

48:05.300 --> 48:09.300
我们得到它的style的宽度

48:09.300 --> 48:11.300
你看是不是744.5

48:12.300 --> 48:13.300
这最终样式

48:14.300 --> 48:15.300
那么最后呢

48:15.300 --> 48:16.300
我们看一下注意的几个点

48:16.300 --> 48:19.300
给样式复制为空置不错的时候

48:19.300 --> 48:21.300
相当于是删除的一点样式

48:21.300 --> 48:22.300
比方说我有的时候

48:22.300 --> 48:24.300
像我这个样式不要了

48:24.300 --> 48:25.300
不是从一个那个覆盖

48:25.300 --> 48:26.300
我是不要了

48:26.300 --> 48:27.300
color不要了

48:27.300 --> 48:28.300
那么我怎么写了

48:28.300 --> 48:30.300
Ace style color

48:30.300 --> 48:32.300
复制为空置不错就行了

48:33.300 --> 48:35.300
你看Color是不是没了

48:35.300 --> 48:37.300
就这么意思

48:37.300 --> 48:38.300
第一个

48:38.300 --> 48:39.300
然后第二个

48:39.300 --> 48:41.300
当样式的复制不合法的时候

48:41.300 --> 48:42.300
复制语句无效

48:42.300 --> 48:43.300
它不会爆错的

48:43.300 --> 48:45.300
比方说我们这里的

48:45.300 --> 48:48.300
Ace style fun size

48:48.300 --> 48:50.300
复制为abc

48:50.300 --> 48:51.300
这是无效的指

48:52.300 --> 48:54.300
然后你看这个fun size变没

48:54.300 --> 48:55.300
没动对吧

48:55.300 --> 48:56.300
它就当你封了

48:56.300 --> 48:58.300
封了就算了

48:59.300 --> 49:00.300
第三个

49:00.300 --> 49:01.300
C是这个短横线命名法

49:01.300 --> 49:03.300
在属性名中表称为

49:03.300 --> 49:04.300
妥封命名法

49:05.300 --> 49:08.300
这个没有什么好说的

49:09.300 --> 49:10.300
就完了

49:11.300 --> 49:12.300
我们这一刻

49:12.300 --> 49:13.300
讲了知识部分就结束了

49:13.300 --> 49:15.300
以后我们做练习

49:15.300 --> 49:16.300
来总结一下

49:16.300 --> 49:18.300
这一刻我们玩的什么东西

49:18.300 --> 49:19.300
其实玩的就是动

49:19.300 --> 49:20.300
动物对象哪来

49:20.300 --> 49:22.300
创建可以拿到

49:22.300 --> 49:24.300
可以获取也可以拿到

49:24.300 --> 49:27.300
然后动物对象可以玩什么东西呢

49:27.300 --> 49:29.300
可以改变动物的塑形结构

49:30.300 --> 49:32.300
结构一变到一变跟着就变了

49:32.300 --> 49:35.300
可以改动它的元素的属性

49:35.300 --> 49:38.300
什么图片的src

49:38.300 --> 49:40.300
超链接的ref

49:41.300 --> 49:44.300
还包括夺选框

49:45.300 --> 49:46.300
夺选框我们

49:46.300 --> 49:48.300
这些属性都可以复制的

49:55.410 --> 49:56.410
选中了对吧

49:56.410 --> 49:58.410
我可以让它不选中

49:58.410 --> 50:01.360
我也可以把它选中

50:01.360 --> 50:03.360
你看一面上是不是有变化

50:03.360 --> 50:06.360
它可以缝进复制了

50:06.360 --> 50:08.800
可以改它的属性

50:08.800 --> 50:09.800
可以改它的内容

50:09.800 --> 50:10.800
元素里面的文本

50:10.800 --> 50:12.800
内容里面的标签

50:12.800 --> 50:14.800
结构都可以改

50:14.800 --> 50:15.800
可以改它的样式

50:15.800 --> 50:17.800
就可以玩这些东西

50:17.800 --> 50:18.800
我们现在玩这些东西

50:18.800 --> 50:19.800
之后还是玩这些东西

50:19.800 --> 50:21.800
再之后还是玩这些东西

50:21.800 --> 50:23.800
一工作三年还是玩这些东西

50:23.800 --> 50:25.800
反正反正去玩这些东西

50:25.800 --> 50:27.800
就这么一个东西

50:27.800 --> 50:29.800
这里我忘了说一个点

50:29.800 --> 50:32.800
属性这一块有一个特殊的属性

50:32.800 --> 50:34.800
就标准属性里边

50:34.800 --> 50:36.800
有一个特殊的属性

50:36.800 --> 50:41.800
就是class 由于和关键字重名

50:41.800 --> 50:46.800
因此需要使用class name

50:46.800 --> 50:48.800
就这个地方注意一下

50:48.800 --> 50:49.800
什么意思呢

50:49.800 --> 50:53.800
就是说你这个标准我要给CB

50:53.800 --> 50:55.800
就是这个input

50:55.800 --> 50:57.800
给它加一个内容式

50:57.800 --> 50:59.800
我给它加内容式怎么加

50:59.800 --> 51:01.800
叫class name来加

51:01.800 --> 51:02.800
不能用class

51:02.800 --> 51:04.800
因为class跟保留字是重名的

51:04.800 --> 51:05.800
将来你们学到的

51:05.800 --> 51:06.800
后边的知识之后

51:06.800 --> 51:08.800
这是一个关键字

51:08.800 --> 51:10.800
所以说它可以换成class name

51:10.800 --> 51:11.800
比方说给它加内容式

51:11.800 --> 51:12.800
给它加啥都可以

51:12.800 --> 51:15.800
随便下去都行

51:15.800 --> 51:16.800
就是给属性复职

51:16.800 --> 51:17.800
那你看这里

51:17.800 --> 51:21.800
那不就有class了吗

51:21.800 --> 51:23.800
这就是这一块

51:23.800 --> 51:29.420
那接下来来做联系题

51:29.420 --> 51:30.420
通过联系题

51:30.420 --> 51:31.420
你就会感受到

51:31.420 --> 51:32.420
咱们玩界面

51:32.420 --> 51:34.420
就是玩的是dom

51:34.420 --> 51:36.420
想办法拿到dom对象

51:37.420 --> 51:38.420
然后呢

51:38.420 --> 51:40.420
去对它做一些

51:40.420 --> 51:43.420
不可描述的事

51:43.420 --> 51:45.420
第一个地道题

51:45.420 --> 51:46.420
地道题呢

51:46.420 --> 51:48.420
我这里已经给你写好了一个页面

51:48.420 --> 51:49.420
央视都给你写好了

51:49.420 --> 51:51.420
你都不用去管它

51:51.420 --> 51:53.420
现在我们来看一下这个页面

51:53.420 --> 51:59.180
放过来

51:59.180 --> 52:03.260
有啥意思呢

52:03.260 --> 52:04.260
就是说这里有个div

52:04.260 --> 52:06.260
就整个容器

52:06.260 --> 52:07.260
整个容器

52:07.260 --> 52:08.260
容器里边

52:08.260 --> 52:10.260
一个英雄就是一个A元素

52:10.260 --> 52:12.260
一个英雄就是一个A元素

52:12.260 --> 52:13.260
A元素里边一个图片

52:13.260 --> 52:14.260
有一个文本

52:14.260 --> 52:15.260
对吧

52:15.260 --> 52:16.260
但是我们目前

52:16.260 --> 52:18.260
ATM里边的东西是假的

52:18.260 --> 52:19.260
还不是真的

52:19.260 --> 52:20.260
所以说全是重复的

52:20.260 --> 52:22.260
我只是把央视给你做出来而已

52:22.260 --> 52:24.260
只是给你做了一个央视出来而已

52:24.260 --> 52:26.260
我要让你用介石

52:26.260 --> 52:28.260
生成这一块去

52:28.260 --> 52:30.260
把所有的英雄加进去

52:30.260 --> 52:32.260
那我给你提供了什么呢

52:32.260 --> 52:33.260
你说这里的

52:33.260 --> 52:34.260
这里的

52:34.260 --> 52:35.260
ATM其实你写一个

52:35.260 --> 52:37.260
写10个写100个都无所谓的

52:37.260 --> 52:39.260
反正我只是做了一个央视

52:39.260 --> 52:40.260
这些里边其实

52:40.260 --> 52:41.260
ATM里边

52:41.260 --> 52:43.260
这里边是空的

52:43.260 --> 52:45.260
要让介石生成东西

52:45.260 --> 52:47.260
往这里边加

52:47.260 --> 52:48.260
生成一个英雄

52:48.260 --> 52:49.260
往这里边加一个

52:49.260 --> 52:50.260
就这么个意思

52:50.260 --> 52:52.260
那么这里的英雄数据

52:52.260 --> 52:54.260
在这个介石文件里边

52:54.260 --> 52:55.260
你看一下

52:55.260 --> 52:56.260
这个介石文件里面

52:56.260 --> 52:57.260
一个数组

52:57.260 --> 52:59.260
这就是英雄数据

52:59.260 --> 53:00.260
这是英雄的点号

53:00.260 --> 53:01.260
英雄的名字

53:01.260 --> 53:02.260
用到这两个就够了

53:02.260 --> 53:04.260
其他属性我们都用不到

53:04.260 --> 53:05.260
就这两个属性就够了

53:05.260 --> 53:06.260
每个英雄是一个对象

53:06.260 --> 53:08.260
这是个英雄的数据

53:08.260 --> 53:10.260
然后另外一个文件

53:10.260 --> 53:11.260
这个是了介石

53:11.260 --> 53:13.260
这个文件是需要理解的

53:13.260 --> 53:15.260
它给你提供了一个

53:15.260 --> 53:18.260
Helros的数组

53:18.260 --> 53:19.260
对吧

53:19.260 --> 53:22.580
无险的数组跟介面有关系吗

53:22.580 --> 53:24.580
一点关系都没有

53:24.580 --> 53:26.580
它给你提供了一个数组

53:26.580 --> 53:27.580
数组很多

53:27.580 --> 53:29.580
各种各样的英雄都给的了

53:29.580 --> 53:31.580
然后我要让你把这些

53:31.580 --> 53:34.580
英雄显示到介面上

53:34.580 --> 53:35.580
我要让你把这些英雄

53:35.580 --> 53:37.580
显示到介面上

53:37.580 --> 53:38.580
那么怎么显示呢

53:38.580 --> 53:39.580
其实就是往这里边加

53:39.580 --> 53:40.580
A元数对吧

53:40.580 --> 53:41.580
生成一个A元数

53:41.580 --> 53:43.580
生成一个A元数往里边加

53:43.580 --> 53:45.580
那我这里比较容易就可以

53:45.580 --> 53:46.580
啊 写法太多了

53:46.580 --> 53:48.580
我就可以写个函数嘛

53:48.580 --> 53:49.580
Craze

53:49.580 --> 53:50.580
Craze

53:50.580 --> 53:52.580
Helros

53:52.580 --> 53:54.580
创建一个英雄

53:54.580 --> 53:55.580
你给我一个英雄对象

53:55.580 --> 53:58.580
我来帮你创建元数啊

53:58.580 --> 54:01.580
为英雄对象

54:01.580 --> 54:03.580
创建元数

54:03.580 --> 54:05.580
就是每个就是个A元数嘛

54:05.580 --> 54:06.580
对吧

54:06.580 --> 54:08.580
那A元数长什么样子呢

54:09.580 --> 54:10.580
刚才那个A元数

54:10.580 --> 54:12.580
每个A元数长这个样子

54:12.580 --> 54:14.580
你现在用Ds来创建

54:14.580 --> 54:16.580
那把这里有写法很多啊

54:16.580 --> 54:18.580
然后是可以给你们提供集中写法

54:18.580 --> 54:19.580
好 比方说这里

54:19.580 --> 54:20.580
给你传一个英雄对象

54:20.580 --> 54:22.580
那我这里不是有个

54:22.580 --> 54:23.580
不是有个数组吗

54:23.580 --> 54:24.580
对吧

54:24.580 --> 54:25.580
那数组那我就可以循环嘛

54:25.580 --> 54:26.580
循环这个数组

54:26.580 --> 54:27.580
I-0

54:27.580 --> 54:29.580
I-Helros

54:29.580 --> 54:30.580
Helros

54:30.580 --> 54:31.580
I加加

54:31.580 --> 54:33.580
那每次循环是不是能拿到一个英雄

54:33.580 --> 54:35.580
Helros

54:35.580 --> 54:39.530
每次循环是不是可以拿到一个英雄对象

54:40.530 --> 54:41.530
就这么简单

54:41.530 --> 54:43.530
然后呢我就调用这个函数

54:43.530 --> 54:45.530
把英雄对象传进去

54:45.530 --> 54:46.530
所以传进去

54:46.530 --> 54:48.530
第一个英雄来帮我创建个对象

54:48.530 --> 54:49.530
帮我创建元数

54:49.530 --> 54:50.530
第二个英雄帮我创建元数

54:50.530 --> 54:51.530
所以说这个函数里边

54:51.530 --> 54:53.530
我是不是可以拿到

54:53.530 --> 54:54.530
每一个英雄对象的

54:54.530 --> 54:56.530
对吧 是不是还是一样的

54:56.530 --> 54:57.530
每次循环调用一次

54:57.530 --> 54:58.530
每次循环调用一次

54:58.530 --> 55:00.530
可以拿到很多的英雄对象

55:00.530 --> 55:01.530
那我要干嘛呀 这里边

55:01.530 --> 55:02.530
那我就来呗

55:02.530 --> 55:04.530
我要创建一个A元数

55:04.530 --> 55:06.530
所以说我这里写个Dock面词

55:06.530 --> 55:08.530
Praise

55:09.530 --> 55:10.530
Element

55:11.530 --> 55:13.530
创建一个A元数

55:13.530 --> 55:17.160
那就创建一个A了

55:19.160 --> 55:21.160
然后把这个A加到哪儿去

55:21.160 --> 55:23.160
光创建A有用吗

55:23.160 --> 55:24.160
光创建一个A有用吗

55:24.160 --> 55:26.160
它只是创建个动物元数对吧

55:26.160 --> 55:28.160
有了 确实有A了

55:28.160 --> 55:30.160
但是它只是创建一个动物元数

55:30.160 --> 55:31.160
它并没有对我们的数节

55:31.160 --> 55:32.160
构造成影响

55:32.160 --> 55:34.160
所以说我要把这个A加到哪儿去

55:34.160 --> 55:36.160
加到这个Content里边去

55:36.160 --> 55:38.160
那这里我是不是可以

55:38.160 --> 55:39.160
通过Document

55:40.160 --> 55:42.160
Priority

55:42.160 --> 55:43.160
Select

55:43.160 --> 55:45.160
拿到这个内向

55:45.160 --> 55:47.160
是为Content的元数对吧

55:47.160 --> 55:51.750
拿到的容器

55:51.750 --> 55:53.750
然后把这个A加到容器里边去

55:53.750 --> 55:54.750
Append

55:56.750 --> 55:58.750
是把A加到容器里边去

55:58.750 --> 55:59.750
我们再看一下

55:59.750 --> 56:01.750
目前至少别的不说

56:01.750 --> 56:03.750
你这里边一定有很多的A元数了

56:03.750 --> 56:05.750
你看A是不是加进来了

56:05.750 --> 56:07.750
那现在少什么呢

56:07.750 --> 56:08.750
少的就是

56:08.750 --> 56:10.750
一个是A元数的

56:11.750 --> 56:13.750
属性超链接地址

56:13.750 --> 56:15.750
那我们来写呗

56:15.750 --> 56:17.750
给A元数的属性超链接地址

56:17.750 --> 56:18.750
就是Ref

56:18.750 --> 56:19.750
复制

56:19.750 --> 56:21.750
复制为啥呢

56:21.750 --> 56:23.750
它的格式是这样子的

56:23.750 --> 56:24.750
超链接的格式

56:26.750 --> 56:28.750
这个地方写的是英雄的ID

56:29.750 --> 56:30.750
写的是英雄的ID

56:30.750 --> 56:32.750
英雄的ID是这个属性

56:33.750 --> 56:34.750
拼接一下

56:34.750 --> 56:35.750
一列

56:36.750 --> 56:37.750
你打印一下

56:37.750 --> 56:38.750
或者是你看一下

56:38.750 --> 56:40.750
Data.hero.js

56:40.750 --> 56:42.750
就一列这个属性

56:43.750 --> 56:45.750
那么这个玩意就有了

56:45.750 --> 56:46.750
属性就加进去了

56:46.750 --> 56:47.750
我们来看一下

56:47.750 --> 56:48.750
A元数是不是

56:48.750 --> 56:49.750
每个A元数都有属性了

56:49.750 --> 56:51.750
你点击过后你看

56:51.750 --> 56:52.750
是不是就链接过去了

56:55.260 --> 56:56.260
然后再看

56:57.260 --> 56:58.260
除了有属性之外

56:58.260 --> 56:59.260
还有它呢

56:59.260 --> 57:00.260
还有Torquette

57:00.260 --> 57:01.260
这个属性

57:01.260 --> 57:02.260
你是不是标准属性

57:02.260 --> 57:03.260
也是标准属性

57:03.260 --> 57:05.260
AdderTorquette等于

57:08.260 --> 57:09.260
Blank

57:11.260 --> 57:14.260
我不想给你提供另外一种写法了

57:14.260 --> 57:15.260
最后一种写法

57:15.260 --> 57:16.260
好好练一下

57:16.260 --> 57:17.260
那种属性的获取

57:17.260 --> 57:18.260
各种东西

57:19.260 --> 57:20.260
就完成了

57:20.260 --> 57:21.260
然后呢

57:21.260 --> 57:22.260
接下来还有什么呢

57:22.260 --> 57:24.260
AdderClass

57:24.260 --> 57:25.260
但是呢

57:25.260 --> 57:27.260
Class要写成ClassName

57:27.260 --> 57:28.260
等于什么

57:28.260 --> 57:29.260
Item

57:30.260 --> 57:31.260
好了

57:31.260 --> 57:32.260
现在我们来看一下

57:32.260 --> 57:33.260
每个A里边

57:33.260 --> 57:34.260
是不是就有Ref

57:34.260 --> 57:35.260
有Torquette

57:35.260 --> 57:36.260
有Class

57:36.260 --> 57:38.260
还有什么呢

57:39.260 --> 57:40.260
A里边是不是有图片

57:40.260 --> 57:42.260
那是不是要创建一个图片元素

57:42.260 --> 57:45.260
那下面我们要创建图片

57:45.260 --> 57:46.260
其实这个代码多不多

57:46.260 --> 57:47.260
它多

57:47.260 --> 57:48.260
但它复不复杂

57:48.260 --> 57:49.260
哪一复杂呢

57:49.260 --> 57:50.260
我都不知道它哪里复杂

57:50.260 --> 57:52.260
代码多不代表复杂

57:52.260 --> 57:53.260
有些代码只有几行

57:53.260 --> 57:54.260
哪个复杂都上天了

57:54.260 --> 57:55.260
你可能看到它们

57:56.260 --> 57:57.260
因为

57:58.260 --> 57:59.260
图片

57:59.260 --> 58:01.260
是不是要创建一个图片元素

58:02.260 --> 58:05.260
然后创建图片元素就有图片了吗

58:05.260 --> 58:06.260
那没有

58:06.260 --> 58:07.260
因为它没有将到数结构里面去

58:07.260 --> 58:08.260
对吧

58:08.260 --> 58:09.260
我要把图片加到哪去

58:09.260 --> 58:10.260
是不是加到A里边去

58:10.260 --> 58:11.260
因此

58:11.260 --> 58:12.260
A

58:12.260 --> 58:13.260
Paint

58:13.260 --> 58:14.260
Chill

58:14.260 --> 58:15.260
当然你们写的时候

58:15.260 --> 58:17.260
可能要一边写一边看文档

58:17.260 --> 58:18.260
都正常

58:18.260 --> 58:20.260
那么现在就形成一个什么结构了

58:21.260 --> 58:23.260
每一个A元素有自己的属性

58:23.260 --> 58:24.260
然后它里边一张图片

58:24.260 --> 58:25.260
对吧

58:25.260 --> 58:26.260
只是这个图片

58:26.260 --> 58:27.260
没有显示出来

58:27.260 --> 58:29.260
是因为它没有设置SRC

58:29.260 --> 58:30.260
因此我还要给图片

58:30.260 --> 58:32.260
去设置SRC

58:32.260 --> 58:33.260
等于什么呢

58:33.260 --> 58:34.260
等于这个

58:35.260 --> 58:39.300
等于这个

58:39.300 --> 58:40.300
好

58:40.300 --> 58:41.300
这里是英雄编号

58:41.300 --> 58:43.300
所以你拼接一下英雄编号就行了

58:44.300 --> 58:46.300
英雄的1.0

58:46.300 --> 58:51.590
英雄的1.0

58:53.590 --> 58:55.590
是不是拼接进去了

58:56.590 --> 58:57.590
超链接有了

58:57.590 --> 58:58.590
点击过后了

58:58.590 --> 59:00.590
像你会链接到这个英雄

59:00.590 --> 59:01.590
链接到是

59:01.590 --> 59:02.590
网络络要官网的

59:02.590 --> 59:04.590
官网的链接地址

59:05.590 --> 59:06.590
然后还有就是

59:06.590 --> 59:07.590
图片之外

59:07.590 --> 59:08.590
是不是还有这个SRC元素

59:08.590 --> 59:10.590
那是不是要创建一个SRC

59:13.930 --> 59:15.930
来创建一个SRC

59:15.930 --> 59:17.930
我要让你把这些函数

59:17.930 --> 59:18.930
翻来覆去练习

59:18.930 --> 59:20.930
所以我不给你提供取巧的办法

59:21.930 --> 59:22.930
其实取巧的办法

59:22.930 --> 59:23.930
同学们

59:23.930 --> 59:24.930
应该可以想到的

59:24.930 --> 59:26.930
我这里的无非就是一个制服串

59:26.930 --> 59:28.930
我拼接好一个制服串

59:28.930 --> 59:29.930
然后把每个英雄的制服串

59:29.930 --> 59:31.930
再拼接成一个完整的制服串

59:31.930 --> 59:32.930
给谁的

59:32.930 --> 59:34.930
给他的InnerATML复制

59:34.930 --> 59:35.930
就完事了

59:35.930 --> 59:37.930
这是你们有兴趣的自己去写

59:37.930 --> 59:39.930
但是要练习这些函数的

59:40.930 --> 59:41.930
创建十般过后

59:41.930 --> 59:42.930
十般是不是也要

59:42.930 --> 59:44.930
也要夹到A里边去

59:50.460 --> 59:51.460
十般里边有个文字

59:51.460 --> 59:53.460
是不是用InnerTags

59:53.460 --> 59:54.460
或者InnerATML都行

59:54.460 --> 59:56.460
文字是1.0

59:58.460 --> 01:00:00.460
文字是1.CN

01:00:06.750 --> 01:00:08.750
我应该先添加Image

01:00:08.750 --> 01:00:09.750
再添加十般

01:00:09.750 --> 01:00:10.750
不就出来了吗

01:00:11.750 --> 01:00:13.750
这个就是英雄的

01:00:14.750 --> 01:00:15.750
所有英雄都在这

01:00:16.750 --> 01:00:18.750
这就是第一道题

01:00:19.750 --> 01:00:20.750
你们先来自己去做

01:00:23.830 --> 01:00:24.830
第二道题

01:00:24.830 --> 01:00:29.830
第二道题

01:00:29.830 --> 01:00:30.830
我们看页面上

01:00:30.830 --> 01:00:31.830
页面上非常简单

01:00:31.830 --> 01:00:32.830
就是有一个

01:00:34.830 --> 01:00:36.830
介石引用

01:00:36.830 --> 01:00:38.830
全部写到页面的最底部

01:00:38.830 --> 01:00:40.830
写到保底结束标签

01:00:41.830 --> 01:00:43.830
至于为什么之后再说

01:00:43.830 --> 01:00:44.830
都写到这

01:00:45.830 --> 01:00:47.830
C也是写到前面都可以

01:00:47.830 --> 01:00:48.830
C是一般写前面

01:00:48.830 --> 01:00:50.830
写到Title下边

01:00:50.830 --> 01:00:52.830
介石写到最后

01:00:52.830 --> 01:00:54.830
页面上有张图片

01:00:54.830 --> 01:00:55.830
图片里边就引用了

01:00:55.830 --> 01:00:56.830
1.9键加

01:00:56.830 --> 01:00:57.830
这里边有四张图片

01:00:57.830 --> 01:00:59.830
1 2 3 4

01:01:01.830 --> 01:01:02.830
1 2 3 4

01:01:02.830 --> 01:01:04.830
目前引用的是第一张图片

01:01:05.830 --> 01:01:07.830
那你可能知道我要干嘛了

01:01:07.830 --> 01:01:08.830
然后引用了一个介石

01:01:08.830 --> 01:01:10.830
这个介石里边啥都没写

01:01:10.830 --> 01:01:11.830
让里面完成

01:01:11.830 --> 01:01:12.830
每隔一段时间

01:01:12.830 --> 01:01:14.830
切换英雄的图片

01:01:14.830 --> 01:01:15.830
让英雄动起来

01:01:16.830 --> 01:01:18.830
那比方说我

01:01:18.830 --> 01:01:19.830
隔一段时间

01:01:19.830 --> 01:01:22.830
隔100毫秒

01:01:22.830 --> 01:01:24.830
假设我隔100毫秒

01:01:24.830 --> 01:01:26.830
然后把图片1

01:01:26.830 --> 01:01:28.830
变成图片2

01:01:28.830 --> 01:01:30.830
再隔100毫秒

01:01:30.830 --> 01:01:32.830
再把图片2变成图片3

01:01:32.830 --> 01:01:33.830
再隔100毫秒

01:01:33.830 --> 01:01:34.830
把图片3变图片4

01:01:34.830 --> 01:01:36.830
我要做这么件事

01:01:36.830 --> 01:01:38.830
那这件事无非就是一个set interval

01:01:38.830 --> 01:01:39.830
是吧

01:01:39.830 --> 01:01:43.340
第一个参数是一个函数

01:01:43.340 --> 01:01:44.340
每隔多少时间

01:01:44.340 --> 01:01:45.340
每隔100毫秒

01:01:45.340 --> 01:01:47.340
每隔100毫秒运行一下这个函数

01:01:47.340 --> 01:01:48.340
对吧

01:01:48.340 --> 01:01:49.340
再看一下

01:01:49.340 --> 01:01:53.930
不断的运行

01:01:53.930 --> 01:01:55.930
每隔100毫秒运行一次

01:01:55.930 --> 01:01:57.930
运行一次干嘛呢

01:01:57.930 --> 01:02:00.930
我要改变英雄的图片

01:02:01.930 --> 01:02:02.930
那我怎么改呢

01:02:02.930 --> 01:02:03.930
是不是我要拿

01:02:03.930 --> 01:02:04.930
随便拿到元素

01:02:04.930 --> 01:02:06.930
不拿到元素怎么改呢

01:02:06.930 --> 01:02:08.930
你随便把元素拿到

01:02:16.980 --> 01:02:18.980
你随时得拿到图片

01:02:18.980 --> 01:02:19.980
那你怎么拿图片呢

01:02:19.980 --> 01:02:20.980
你可以用

01:02:20.980 --> 01:02:21.980
给他加一个id

01:02:21.980 --> 01:02:22.980
也可以呢

01:02:22.980 --> 01:02:23.980
因为这个页面上只有一张图片

01:02:23.980 --> 01:02:24.980
所以说你可以

01:02:24.980 --> 01:02:25.980
直接

01:02:25.980 --> 01:02:27.980
你可以在外面拿到嘛

01:02:27.980 --> 01:02:29.980
Documents

01:02:29.980 --> 01:02:30.980
Curry

01:02:30.980 --> 01:02:31.980
Sneaker

01:02:32.980 --> 01:02:33.980
为什么要写外面

01:02:33.980 --> 01:02:35.980
写外面跟写里面有什么区别

01:02:35.980 --> 01:02:36.980
这里呢

01:02:36.980 --> 01:02:37.980
这里这个这个场景

01:02:37.980 --> 01:02:39.980
写外面效率要高一些

01:02:39.980 --> 01:02:40.980
因为我们页面上的图片

01:02:40.980 --> 01:02:42.980
这个dome是没变化的对吧

01:02:42.980 --> 01:02:43.980
一直都出差

01:02:43.980 --> 01:02:44.980
所以说呢

01:02:44.980 --> 01:02:45.980
我们没有必要

01:02:45.980 --> 01:02:46.980
每隔100毫秒

01:02:46.980 --> 01:02:47.980
去重新去查一次

01:02:47.980 --> 01:02:49.980
重新去查一次图片

01:02:49.980 --> 01:02:51.980
一开始就把图片查出来

01:02:51.980 --> 01:02:52.980
后面就直接拿

01:02:52.980 --> 01:02:54.980
用这个对象就可以了

01:02:55.980 --> 01:02:56.980
好每隔一段时间要干嘛

01:02:56.980 --> 01:02:57.980
要改变这个图片

01:02:57.980 --> 01:02:58.980
对吧

01:02:58.980 --> 01:02:59.980
改变图片是改变啥

01:02:59.980 --> 01:03:01.980
是不是改变src

01:03:01.980 --> 01:03:03.980
src要改成啥呢

01:03:03.980 --> 01:03:07.310
是吧

01:03:07.310 --> 01:03:08.310
改成这样的格式

01:03:08.310 --> 01:03:10.310
只是这里不知道写啥

01:03:10.310 --> 01:03:13.310
是不是这里不知道写啥

01:03:13.310 --> 01:03:14.310
对吧

01:03:14.310 --> 01:03:15.310
目前是1

01:03:15.310 --> 01:03:17.310
那么下一次要变成2

01:03:17.310 --> 01:03:19.310
再运行这个函数变成3

01:03:19.310 --> 01:03:21.310
再运行这个函数变成4

01:03:21.310 --> 01:03:23.310
那这个单码咋写的

01:03:23.310 --> 01:03:24.310
你就写个变

01:03:24.310 --> 01:03:26.310
弄个变量呗

01:03:26.310 --> 01:03:27.310
her index

01:03:27.310 --> 01:03:29.310
当前的下标是1

01:03:29.310 --> 01:03:30.310
对吧

01:03:30.310 --> 01:03:35.310
当前的图片下标是1

01:03:35.310 --> 01:03:37.310
然后每运行这个函数

01:03:37.310 --> 01:03:42.540
是不是把它加1就完成了

01:03:42.540 --> 01:03:43.540
所以它加1

01:03:43.540 --> 01:03:44.540
加1过后

01:03:44.540 --> 01:03:46.540
把它加了只凭借进来

01:03:46.540 --> 01:03:48.540
就完成了

01:03:48.540 --> 01:03:49.540
好

01:03:49.540 --> 01:03:50.540
我们每次加完过后

01:03:50.540 --> 01:03:54.460
输出嘛

01:03:54.460 --> 01:03:56.460
her index

01:03:56.460 --> 01:03:58.460
为什么一会就消失了呢

01:03:58.460 --> 01:04:00.460
那我们把时间调长一点

01:04:00.460 --> 01:04:06.010
每个一秒钟变一次

01:04:06.010 --> 01:04:08.010
因为它看一下

01:04:08.010 --> 01:04:10.010
输出到678了

01:04:10.010 --> 01:04:13.010
所以它加到一个最大值的回带

01:04:13.010 --> 01:04:14.010
最大值是多少

01:04:14.010 --> 01:04:15.010
4对吧

01:04:15.010 --> 01:04:17.010
一共就4张图片吧

01:04:17.010 --> 01:04:19.010
所以到了5的时候变成0

01:04:19.010 --> 01:04:20.010
对吧

01:04:20.010 --> 01:04:22.010
所以我们这里可以判断一下

01:04:22.010 --> 01:04:24.010
如果说它加了过后等于5

01:04:24.010 --> 01:04:28.010
那么我们就把它变成0

01:04:28.010 --> 01:04:30.010
那不就完了吗

01:04:30.010 --> 01:04:31.010
3

01:04:31.010 --> 01:04:32.010
4

01:04:32.010 --> 01:04:33.010
0

01:04:33.010 --> 01:04:35.010
没有0变1

01:04:35.010 --> 01:04:36.010
不好意思

01:04:36.010 --> 01:04:38.010
到5过后就变1

01:04:38.010 --> 01:04:39.010
你看一下

01:04:39.010 --> 01:04:40.010
4

01:04:40.010 --> 01:04:41.010
1

01:04:41.010 --> 01:04:42.010
2

01:04:42.010 --> 01:04:43.010
3

01:04:43.010 --> 01:04:44.010
4

01:04:44.010 --> 01:04:45.010
1

01:04:45.010 --> 01:04:46.010
2

01:04:46.010 --> 01:04:47.010
3

01:04:47.010 --> 01:04:48.010
4

01:04:48.010 --> 01:04:50.010
就这样子写

01:04:50.010 --> 01:04:51.010
不就完了吗

01:04:51.010 --> 01:04:52.010
你要快一点的话

01:04:52.010 --> 01:04:54.010
你就写个100毫秒

01:04:54.010 --> 01:04:55.010
就跑得快一点

01:04:55.010 --> 01:04:56.010
就这样子

01:04:56.010 --> 01:04:58.010
当然这一块代码

01:04:58.010 --> 01:05:00.010
这一块代码其实可以简化

01:05:00.010 --> 01:05:01.010
可以写成一句话

01:05:01.010 --> 01:05:03.010
这是一种取巧的办法

01:05:03.010 --> 01:05:05.010
你首先要学会这种写法

01:05:05.010 --> 01:05:07.010
这种写法是比较好理解的

01:05:07.010 --> 01:05:09.010
接下来我讲的这种写法

01:05:09.010 --> 01:05:10.010
你不太理解的话

01:05:10.010 --> 01:05:11.010
你就写这种

01:05:11.010 --> 01:05:12.010
没有任何问题

01:05:12.010 --> 01:05:13.010
一点问题都没有

01:05:13.010 --> 01:05:15.010
没有人会说的什么

01:05:16.010 --> 01:05:17.010
可以这样子写

01:05:17.010 --> 01:05:20.010
颗二英这个是加1除1

01:05:20.010 --> 01:05:21.010
4

01:05:22.010 --> 01:05:23.010
再加1

01:05:24.010 --> 01:05:25.010
这啥意思

01:05:26.010 --> 01:05:28.010
它之前是1

01:05:28.010 --> 01:05:30.010
那么1加1是不是等于2

01:05:30.010 --> 01:05:32.010
2除14的余数

01:05:32.010 --> 01:05:33.010
是不是还是2

01:05:35.010 --> 01:05:36.010
不需要

01:05:36.010 --> 01:05:37.010
我看一下

01:05:37.010 --> 01:05:38.010
加1

01:05:38.010 --> 01:05:41.900
除14

01:05:41.900 --> 01:05:43.900
加1

01:05:43.900 --> 01:05:49.680
它之前是1变成2

01:05:49.680 --> 01:05:50.680
应该是这样

01:05:51.680 --> 01:05:52.680
应该是这样

01:05:54.680 --> 01:05:56.680
它之前是

01:05:56.680 --> 01:05:58.680
1

01:05:58.680 --> 01:05:59.680
除14的余数是不是1

01:05:59.680 --> 01:06:00.680
1加1等于2

01:06:00.680 --> 01:06:01.680
它之前是2

01:06:01.680 --> 01:06:03.680
2除14的余数是不是2

01:06:03.680 --> 01:06:04.680
现在加1变成3

01:06:04.680 --> 01:06:05.680
它之前是3

01:06:05.680 --> 01:06:07.680
3除14的余数

01:06:07.680 --> 01:06:08.680
是不是3

01:06:08.680 --> 01:06:09.680
加1等于4

01:06:09.680 --> 01:06:10.680
它之前是4

01:06:10.680 --> 01:06:11.680
除14的余数

01:06:11.680 --> 01:06:12.680
是不是等于0

01:06:12.680 --> 01:06:13.680
0加1等于1

01:06:13.680 --> 01:06:14.680
是不是变成1了

01:06:14.680 --> 01:06:15.680
它之前是1

01:06:15.680 --> 01:06:16.680
1除14的余数

01:06:16.680 --> 01:06:17.680
1加1等于2

01:06:17.680 --> 01:06:18.680
所以还是在

01:06:18.680 --> 01:06:19.680
1234里面循环

01:06:20.680 --> 01:06:21.680
这种写法也可以

01:06:23.680 --> 01:06:24.680
就完事了

01:06:24.680 --> 01:06:25.680
第一小题就完事了

01:06:25.680 --> 01:06:27.680
每隔一段时间

01:06:27.680 --> 01:06:28.680
改变英雄的位置

01:06:28.680 --> 01:06:30.680
让英雄向右移动

01:06:30.680 --> 01:06:31.680
那现在有问题来了

01:06:31.680 --> 01:06:32.680
怎么向右移动了

01:06:32.680 --> 01:06:34.680
今天袁老师没有讲

01:06:34.680 --> 01:06:36.680
哪里可以向右移动

01:06:36.680 --> 01:06:38.680
发展一下思维

01:06:38.680 --> 01:06:40.680
什么叫向右移动

01:06:40.680 --> 01:06:42.680
这是一张图片

01:06:43.680 --> 01:06:44.680
什么叫一张图片

01:06:44.680 --> 01:06:46.680
这是个元素跑右边区域

01:06:46.680 --> 01:06:47.680
元素跑右边区域

01:06:47.680 --> 01:06:48.680
应该用什么

01:06:48.680 --> 01:06:49.680
又绝对定位

01:06:49.680 --> 01:06:50.680
对不对

01:06:50.680 --> 01:06:51.680
可以随意的改变桌标

01:06:51.680 --> 01:06:52.680
那因此

01:06:52.680 --> 01:06:53.680
我在这里写个style

01:06:53.680 --> 01:06:54.680
找了这张图片

01:06:54.680 --> 01:06:55.680
给它设一个play

01:06:55.680 --> 01:06:56.680
apps如此

01:06:56.680 --> 01:06:57.680
或者是fix的

01:06:57.680 --> 01:06:58.680
都无所谓

01:06:58.680 --> 01:06:59.680
设字啥都无所谓

01:06:59.680 --> 01:07:00.680
那一开始呢

01:07:00.680 --> 01:07:01.680
neft为0吗

01:07:01.680 --> 01:07:02.680
对吧

01:07:02.680 --> 01:07:06.140
top为0吗

01:07:06.140 --> 01:07:07.140
好那接下来

01:07:07.140 --> 01:07:08.140
我们怎么玩的

01:07:08.140 --> 01:07:09.140
每隔一段时间

01:07:09.140 --> 01:07:10.140
英雄改变位置

01:07:10.140 --> 01:07:11.140
那又来set interval

01:07:12.140 --> 01:07:14.140
每隔一段时间

01:07:14.140 --> 01:07:17.710
比方说隔100毫秒

01:07:18.710 --> 01:07:20.710
英雄还要往右边移动

01:07:20.710 --> 01:07:21.710
是不是我拿到图片

01:07:22.710 --> 01:07:24.710
让他的neft只增加

01:07:24.710 --> 01:07:25.710
对吧

01:07:25.710 --> 01:07:26.710
一开始是多少

01:07:26.710 --> 01:07:27.710
一开始是0

01:07:27.710 --> 01:07:28.710
那我可以用个变量吗

01:07:28.710 --> 01:07:29.710
一开始

01:07:29.710 --> 01:07:30.710
等于0

01:07:31.710 --> 01:07:32.710
或者x也行

01:07:32.710 --> 01:07:33.710
一开始坐标

01:07:33.710 --> 01:07:34.710
横坐标是0

01:07:35.710 --> 01:07:37.710
每隔100毫秒之后

01:07:37.710 --> 01:07:38.710
横坐标呢

01:07:38.710 --> 01:07:39.710
给它加上一段

01:07:39.710 --> 01:07:40.710
加上一个二吗

01:07:41.710 --> 01:07:42.710
那这样子

01:07:42.710 --> 01:07:43.710
x是不是不断增加

01:07:43.710 --> 01:07:44.710
你看

01:07:44.710 --> 01:07:50.040
x是不是不断增加

01:07:50.040 --> 01:07:51.040
对吧

01:07:51.040 --> 01:07:52.040
那么我每一次增加

01:07:52.040 --> 01:07:53.040
完了过后

01:07:53.040 --> 01:07:54.040
把这个x负值过去就行了

01:07:54.040 --> 01:07:55.040
对吧

01:07:55.040 --> 01:07:56.040
负值到什么

01:07:56.040 --> 01:07:57.040
img style

01:07:57.040 --> 01:07:58.040
neft

01:07:58.040 --> 01:07:59.040
给它央视负值

01:07:59.040 --> 01:08:00.040
等于什么

01:08:00.040 --> 01:08:01.040
x

01:08:01.040 --> 01:08:02.040
一定要拼接px

01:08:02.040 --> 01:08:04.040
千万不要直接负值为x

01:08:04.040 --> 01:08:05.040
因为我们neft

01:08:05.040 --> 01:08:07.040
只是要带单位的

01:08:07.040 --> 01:08:08.040
除了0之外

01:08:08.040 --> 01:08:09.040
0可以不带单位

01:08:09.040 --> 01:08:10.040
其他的指数都要带单位

01:08:10.040 --> 01:08:12.040
你不能直接起个22吗

01:08:12.040 --> 01:08:13.040
对吧

01:08:13.040 --> 01:08:14.040
所以说你这里

01:08:14.040 --> 01:08:15.040
一定要拼接一个

01:08:15.040 --> 01:08:16.040
这里是很多出去的

01:08:16.040 --> 01:08:17.040
用于犯错的地方

01:08:17.040 --> 01:08:19.040
带上单位

01:08:19.040 --> 01:08:20.040
比较之前

01:08:20.040 --> 01:08:21.040
现在到了10

01:08:21.040 --> 01:08:22.040
那就是10

01:08:22.040 --> 01:08:23.040
加上px

01:08:25.040 --> 01:08:26.040
这样子就往后跑了

01:08:26.040 --> 01:08:27.040
你觉得它跑的

01:08:27.040 --> 01:08:28.040
太慢了

01:08:28.040 --> 01:08:30.040
那你这里每一次加多一点

01:08:30.040 --> 01:08:32.040
也可以把时间减少一点

01:08:32.040 --> 01:08:33.040
比较50

01:08:33.040 --> 01:08:34.040
对吧

01:08:34.040 --> 01:08:36.040
或者是20

01:08:37.040 --> 01:08:38.040
会跑了吗

01:08:38.040 --> 01:08:39.040
当然它会跑出去

01:08:39.040 --> 01:08:41.040
我怎么让它跑回来

01:08:41.040 --> 01:08:42.040
或者是

01:08:42.040 --> 01:08:43.040
怎么让它不要跑出去

01:08:43.040 --> 01:08:44.040
现在的知识

01:08:44.040 --> 01:08:45.040
还一点不够

01:08:45.040 --> 01:08:46.040
因为这涉及到

01:08:46.040 --> 01:08:47.040
窗口的尺寸

01:08:47.040 --> 01:08:48.040
你要知道窗口的尺寸

01:08:48.040 --> 01:08:50.040
那窗口的尺寸是多少

01:08:50.040 --> 01:08:51.040
你现在还获取不到

01:08:51.040 --> 01:08:53.040
之后就获取得到了

01:08:54.040 --> 01:08:55.040
第二题

01:08:56.040 --> 01:08:57.040
第三

01:08:58.040 --> 01:08:59.040
这是第三题

01:09:00.040 --> 01:09:03.800
这是我们之前做的一个页面

01:09:03.800 --> 01:09:04.800
对吧

01:09:04.800 --> 01:09:06.800
这个页面我就不说了

01:09:06.800 --> 01:09:08.800
我多加了一个这个东西

01:09:08.800 --> 01:09:09.800
这个东西在哪呢

01:09:09.800 --> 01:09:10.800
以后我们看就知道了

01:09:10.800 --> 01:09:12.800
其实就是加了一个div在这

01:09:12.800 --> 01:09:16.710
对吧

01:09:16.710 --> 01:09:17.710
就是加了一个div

01:09:17.710 --> 01:09:18.710
里面有一段文字

01:09:19.710 --> 01:09:20.710
好

01:09:20.710 --> 01:09:21.710
这些都不说了

01:09:21.710 --> 01:09:22.710
因为我们之前写过这个玩意儿

01:09:22.710 --> 01:09:24.710
然后接下来是GS

01:09:24.710 --> 01:09:29.090
GS里面让你实现这三个函数

01:09:29.090 --> 01:09:30.090
第一个函数

01:09:30.090 --> 01:09:32.090
没有参数

01:09:32.090 --> 01:09:33.090
也没有返回值

01:09:33.090 --> 01:09:35.090
有的话我会给打上注尸

01:09:36.090 --> 01:09:38.090
这个函数名字很长

01:09:38.090 --> 01:09:39.090
但是我们来看一下

01:09:39.090 --> 01:09:41.090
set 设置 submet

01:09:41.090 --> 01:09:44.090
提交 button 按钮

01:09:44.090 --> 01:09:45.090
设置提交按钮的什么

01:09:45.090 --> 01:09:47.090
status 状态

01:09:49.090 --> 01:09:51.090
设置这个按钮的状态

01:09:51.090 --> 01:09:52.090
就这个意思

01:09:55.090 --> 01:09:56.090
怎么设置呢

01:09:56.090 --> 01:09:58.090
根据协议的多选框

01:09:58.090 --> 01:09:59.090
是否选中

01:09:59.090 --> 01:10:00.090
啥意思

01:10:00.090 --> 01:10:01.090
就是这里的协议

01:10:01.090 --> 01:10:03.090
如果说多选框没有选中的话

01:10:03.090 --> 01:10:05.090
这个按钮的状态

01:10:05.090 --> 01:10:06.090
就应该是灰衣色

01:10:06.090 --> 01:10:08.090
就是应该看它加上这么一个东西

01:10:08.090 --> 01:10:17.260
就是该加上按钮

01:10:17.260 --> 01:10:19.260
就是给这个立即注册

01:10:19.260 --> 01:10:22.830
加上一个 disabled

01:10:22.830 --> 01:10:23.830
加上这个

01:10:23.830 --> 01:10:24.830
懂得意思吗

01:10:24.830 --> 01:10:26.830
它如果说是选中的话

01:10:26.830 --> 01:10:28.830
那就该加dcblot 去掉

01:10:29.830 --> 01:10:30.830
就这么个意思

01:10:30.830 --> 01:10:34.680
所以呢

01:10:34.680 --> 01:10:35.680
这个函数啥写

01:10:35.680 --> 01:10:36.680
这个函数里面

01:10:36.680 --> 01:10:37.680
是不是设置到两个东西

01:10:37.680 --> 01:10:38.680
两个动物元素

01:10:38.680 --> 01:10:39.680
一个是它

01:10:39.680 --> 01:10:40.680
跟这些没关系吧

01:10:40.680 --> 01:10:41.680
一个是它

01:10:41.680 --> 01:10:43.680
一个是这个按钮

01:10:43.680 --> 01:10:45.680
那两个动物元素先拿到再说

01:10:45.680 --> 01:10:47.680
第一个动物元素是

01:10:47.680 --> 01:10:50.680
这个多选框 agree

01:10:50.680 --> 01:10:54.760
多选框在这

01:10:54.760 --> 01:10:56.760
那怎么来拿这个多选框呢

01:10:56.760 --> 01:10:58.760
拿这个 policy

01:10:58.760 --> 01:11:01.760
就是这个政策

01:11:01.760 --> 01:11:02.760
下边的这个 input

01:11:02.760 --> 01:11:03.760
对不对

01:11:03.760 --> 01:11:05.760
所以说我们用 document

01:11:06.760 --> 01:11:07.760
query

01:11:07.760 --> 01:11:08.760
当你可以再加个 id

01:11:08.760 --> 01:11:09.760
来去拿

01:11:10.760 --> 01:11:12.760
那样是 policy

01:11:12.760 --> 01:11:13.760
下边的什么 input

01:11:13.760 --> 01:11:14.760
对吧

01:11:14.760 --> 01:11:15.760
系列设置选择系嘛

01:11:21.460 --> 01:11:22.460
调整一下

01:11:23.460 --> 01:11:24.460
好不拿到了吗

01:11:24.460 --> 01:11:26.460
输出一下 agree

01:11:26.460 --> 01:11:27.460
就是有的时候

01:11:27.460 --> 01:11:28.460
一个黑字写的时候

01:11:28.460 --> 01:11:29.460
你可以写慢一点

01:11:29.460 --> 01:11:31.460
来调用一下这个函数

01:11:31.460 --> 01:11:33.460
看一下是不是能够拿到

01:11:33.460 --> 01:11:34.460
先把动物元素

01:11:34.460 --> 01:11:35.460
确定能拿到

01:11:35.460 --> 01:11:36.460
能拿到了再说

01:11:36.460 --> 01:11:37.460
可以写慢点

01:11:37.460 --> 01:11:38.460
是不是拿到了

01:11:38.460 --> 01:11:39.460
多选框拿到了吧

01:11:39.460 --> 01:11:40.460
好像还要拿到有什么呢

01:11:40.460 --> 01:11:41.460
还要拿到个按钮

01:11:41.460 --> 01:11:43.460
这个按钮怎么拿到呢

01:11:43.460 --> 01:11:45.460
这个按钮在这

01:11:45.460 --> 01:11:46.460
在 form add

01:11:46.460 --> 01:11:48.460
就是 button type

01:11:48.460 --> 01:11:49.460
等于 sub 名字

01:11:49.460 --> 01:11:50.460
好来吧

01:11:51.460 --> 01:11:53.460
btn 按钮 document

01:11:53.460 --> 01:11:54.460
query is negative

01:11:54.460 --> 01:11:55.460
input type

01:11:55.460 --> 01:11:58.460
等于 sub 名字

01:11:58.460 --> 01:12:00.460
是不是用属性选择器

01:12:00.460 --> 01:12:01.460
对吧

01:12:01.460 --> 01:12:02.460
因为我们一面上有很多的 input

01:12:02.460 --> 01:12:03.460
用属性选择器

01:12:03.460 --> 01:12:05.460
选中了个提交按钮

01:12:05.460 --> 01:12:06.460
这样子呢

01:12:06.460 --> 01:12:08.460
这两个东西不就都拿到了吗

01:12:08.460 --> 01:12:10.460
好看一下

01:12:10.460 --> 01:12:12.460
调用这个函数

01:12:12.460 --> 01:12:14.460
你发现第二个没拿到

01:12:14.460 --> 01:12:15.460
没拿到的话

01:12:16.460 --> 01:12:18.460
不是input

01:12:18.460 --> 01:12:19.460
button

01:12:19.460 --> 01:12:23.100
好看一下调用这个函数

01:12:23.100 --> 01:12:24.100
是不是两个都拿到了

01:12:26.100 --> 01:12:27.100
对吧

01:12:27.100 --> 01:12:28.100
好那再来

01:12:28.100 --> 01:12:29.100
接下来我干嘛呢

01:12:29.100 --> 01:12:31.100
要根据他的状态来设置他

01:12:31.100 --> 01:12:33.100
来设置下面

01:12:33.100 --> 01:12:35.100
来设置下面这个btn对吧

01:12:35.100 --> 01:12:36.100
那么上面什么状态呢

01:12:36.100 --> 01:12:37.100
这个是个多选框

01:12:37.100 --> 01:12:39.100
我要看他有没有选中

01:12:39.100 --> 01:12:40.100
都是dome

01:12:40.100 --> 01:12:41.100
这两个都是dome

01:12:41.100 --> 01:12:44.410
是不是判断

01:12:44.410 --> 01:12:45.410
query checked

01:12:45.410 --> 01:12:47.410
是不是这个属性

01:12:47.410 --> 01:12:49.410
选中了我干嘛呀

01:12:49.410 --> 01:12:53.410
他的属性disabled

01:12:53.410 --> 01:12:56.410
就设为force

01:12:56.410 --> 01:12:58.410
就不要不禁用了对吧

01:12:58.410 --> 01:13:00.410
l是如果他没有选中了

01:13:00.410 --> 01:13:03.410
没有选中他就禁用disabled的

01:13:03.410 --> 01:13:04.410
等于处

01:13:04.410 --> 01:13:05.410
换句话说

01:13:05.410 --> 01:13:07.410
他的disabled的状态呢

01:13:07.410 --> 01:13:09.410
跟这个的状态相反

01:13:09.410 --> 01:13:10.410
他为处他就为force

01:13:10.410 --> 01:13:14.490
那怎么写

01:13:14.490 --> 01:13:15.490
是不是这样的写

01:13:15.490 --> 01:13:20.460
对吧

01:13:21.460 --> 01:13:23.460
我们来看一下

01:13:23.460 --> 01:13:25.460
只要一调这个函数

01:13:25.460 --> 01:13:27.460
他的状态就变正确了

01:13:27.460 --> 01:13:29.460
有可能一开始不正确

01:13:29.460 --> 01:13:31.460
但是一调这个函数就正确了

01:13:31.460 --> 01:13:32.460
比方说我这里选中了

01:13:32.460 --> 01:13:34.460
那我一调这个函数

01:13:34.460 --> 01:13:36.460
他状态又正确了

01:13:36.460 --> 01:13:38.460
老师能不能自动的完成

01:13:38.460 --> 01:13:40.460
我点了过他就自动的

01:13:40.460 --> 01:13:42.460
自动的调用这个函数

01:13:42.460 --> 01:13:43.460
自动完成

01:13:43.460 --> 01:13:44.460
可以

01:13:44.460 --> 01:13:46.460
是我们下节课的指示

01:13:46.460 --> 01:13:47.460
就是事件

01:13:47.460 --> 01:13:49.460
就是监听用户的操作

01:13:49.460 --> 01:13:51.460
其实本质上没有什么复杂的

01:13:51.460 --> 01:13:53.460
当用户做了某一个操作的时候

01:13:53.460 --> 01:13:55.460
调一次这个函数就完成了

01:13:55.460 --> 01:13:56.460
做了某一个操作的时候

01:13:56.460 --> 01:13:57.460
调一次这个函数就完成了

01:13:57.460 --> 01:13:59.460
下节课我们再详细说

01:13:59.460 --> 01:14:00.460
就有这个函数了

01:14:00.460 --> 01:14:02.460
其实这个函数还可以减写

01:14:02.460 --> 01:14:04.460
还可以咋减写呢

01:14:04.460 --> 01:14:05.460
agree

01:14:05.460 --> 01:14:07.460
不就是这个表达式吗

01:14:07.460 --> 01:14:11.420
前面这个btn

01:14:11.420 --> 01:14:16.840
不就是这个表达式吗

01:14:16.840 --> 01:14:17.840
对吧

01:14:17.840 --> 01:14:18.840
可不可以

01:14:18.840 --> 01:14:19.840
可按可以

01:14:19.840 --> 01:14:20.840
为什么不可以

01:14:20.840 --> 01:14:22.840
好下一个函数

01:14:23.840 --> 01:14:26.840
set the code

01:14:26.840 --> 01:14:30.840
设置发送验证码的按钮的状态

01:14:31.840 --> 01:14:33.840
根据手机号文本框

01:14:33.840 --> 01:14:35.840
根据这个文本框的文本

01:14:35.840 --> 01:14:37.840
设置这个按钮的状态

01:14:37.840 --> 01:14:39.840
好来吧

01:14:39.840 --> 01:14:41.840
根据这个文本框

01:14:41.840 --> 01:14:43.840
你不得拿到吗

01:14:43.840 --> 01:14:45.840
在哪呢

01:14:45.840 --> 01:14:47.840
在这个

01:14:47.840 --> 01:14:51.280
在这

01:14:52.280 --> 01:14:54.280
那么这里就会有遇到一个问题

01:14:54.280 --> 01:14:55.280
这里的input

01:14:55.280 --> 01:14:56.280
跟这下面的input

01:14:56.280 --> 01:14:57.280
其实都是一样的

01:14:57.280 --> 01:14:59.280
内样式的一些权益一样

01:14:59.280 --> 01:15:00.280
它的复原数

01:15:00.280 --> 01:15:02.280
你看这些复原数也一样

01:15:02.280 --> 01:15:03.280
那么这里

01:15:03.280 --> 01:15:05.280
要不然我就给个id

01:15:05.280 --> 01:15:07.280
给个id

01:15:07.280 --> 01:15:08.280
tst

01:15:08.280 --> 01:15:09.280
文本框

01:15:09.280 --> 01:15:10.280
文本框

01:15:10.280 --> 01:15:11.280
moban

01:15:12.280 --> 01:15:14.280
根据id来获取

01:15:14.280 --> 01:15:15.280
我们这里先获取

01:15:15.280 --> 01:15:17.280
它的文本框

01:15:17.280 --> 01:15:19.280
document

01:15:19.280 --> 01:15:21.280
query

01:15:21.280 --> 01:15:23.280
tst

01:15:23.280 --> 01:15:25.280
fone

01:15:25.280 --> 01:15:27.280
根据id来获取文本框

01:15:27.280 --> 01:15:28.280
好文本框

01:15:28.280 --> 01:15:29.280
然后还有个什么

01:15:29.280 --> 01:15:30.280
还有这个按钮

01:15:30.280 --> 01:15:31.280
按钮

01:15:31.280 --> 01:15:32.280
document

01:15:32.280 --> 01:15:33.280
query

01:15:34.280 --> 01:15:36.280
按钮在这

01:15:38.280 --> 01:15:40.280
我就找

01:15:40.280 --> 01:15:42.280
capture下面的button吧

01:15:43.280 --> 01:15:45.280
capture下面的button

01:15:46.280 --> 01:15:47.280
打印一下

01:15:47.280 --> 01:15:48.280
一开始写的时候

01:15:48.280 --> 01:15:49.280
多打印

01:15:49.280 --> 01:15:50.280
看每一步的结果

01:15:50.280 --> 01:15:52.280
是不是跟预期相符

01:15:53.280 --> 01:15:54.280
叼这个函数

01:15:59.770 --> 01:16:00.770
是不是两个

01:16:00.770 --> 01:16:01.770
文本框

01:16:01.770 --> 01:16:02.770
按钮

01:16:02.770 --> 01:16:04.770
确定动物元素拿到了

01:16:04.770 --> 01:16:05.770
拿到之后我要干嘛

01:16:05.770 --> 01:16:07.770
我要根据它里面的值

01:16:08.770 --> 01:16:09.770
它里面的文本

01:16:09.770 --> 01:16:10.770
它里面的文本是什么

01:16:10.770 --> 01:16:11.770
就是value

01:16:11.770 --> 01:16:12.770
所以value

01:16:12.770 --> 01:16:13.770
它里面的文本

01:16:13.770 --> 01:16:14.770
文本

01:16:15.770 --> 01:16:17.770
长度为11

01:16:18.770 --> 01:16:20.770
所以文本的长度为11

01:16:20.770 --> 01:16:22.770
表示你输入了11位手机号

01:16:22.770 --> 01:16:23.770
我就拿着去判断

01:16:23.770 --> 01:16:24.770
它是不是全是数字

01:16:24.770 --> 01:16:25.770
就拿着判断了

01:16:25.770 --> 01:16:26.770
那么要判断的话

01:16:26.770 --> 01:16:28.770
现在还有点不好做

01:16:28.770 --> 01:16:29.770
将来我们学了政治表拉式之后

01:16:29.770 --> 01:16:30.770
就好做了

01:16:30.770 --> 01:16:33.770
长度为11就表示你手机号写完了

01:16:33.770 --> 01:16:36.770
手机号写完了

01:16:36.770 --> 01:16:38.770
那么这个按钮就可以用了

01:16:38.770 --> 01:16:40.770
这个按钮就是btndcable的

01:16:40.770 --> 01:16:42.770
就把它设为forced就可以用了

01:16:42.770 --> 01:16:43.770
否则的话

01:16:43.770 --> 01:16:45.770
btndcable的就设为q

01:16:45.770 --> 01:16:46.770
就不能用

01:16:47.770 --> 01:16:49.770
那么也就说

01:16:50.770 --> 01:16:52.770
这个表拉式为q

01:16:52.770 --> 01:16:53.770
它就为forced

01:16:53.770 --> 01:16:55.770
这个表拉式为forced

01:16:55.770 --> 01:16:56.770
它就为q

01:16:56.770 --> 01:17:06.820
不就这样吗

01:17:06.820 --> 01:17:11.740
我们来看一下

01:17:11.740 --> 01:17:12.740
一开始

01:17:12.740 --> 01:17:14.740
是不是肯定是不能用的

01:17:14.740 --> 01:17:15.740
不能点的

01:17:15.740 --> 01:17:16.740
我就写吧

01:17:16.740 --> 01:17:18.740
写手机号的几位了

01:17:18.740 --> 01:17:19.740
写个东哥的

01:17:19.740 --> 01:17:20.740
135

01:17:20.740 --> 01:17:21.740
1234

01:17:21.740 --> 01:17:22.740
1234

01:17:22.740 --> 01:17:24.740
我再调用这个函数

01:17:24.740 --> 01:17:25.740
它就能用了

01:17:25.740 --> 01:17:29.370
那能不能自动的完成

01:17:29.370 --> 01:17:30.370
自动的完成

01:17:30.370 --> 01:17:31.370
我们下几课再说

01:17:31.370 --> 01:17:32.370
下几课我们学了

01:17:32.370 --> 01:17:34.370
时间过后就很简单了

01:17:34.370 --> 01:17:36.370
我监听用户的输入

01:17:36.370 --> 01:17:38.370
每输入一次

01:17:38.370 --> 01:17:39.370
我就雕一次这个函数

01:17:39.370 --> 01:17:40.370
自动雕一次函数

01:17:40.370 --> 01:17:43.740
那就完事了

01:17:43.740 --> 01:17:44.740
再下一个

01:17:44.740 --> 01:17:46.740
根据当前选中的爱号

01:17:46.740 --> 01:17:47.740
设置以选

01:17:47.740 --> 01:17:49.740
以选择爱号文本

01:17:49.740 --> 01:17:50.740
就是我选中了爱号1

01:17:50.740 --> 01:17:51.740
爱号3

01:17:51.740 --> 01:17:52.740
我一雕这个函数

01:17:52.740 --> 01:17:53.740
那么这里就应该显示

01:17:53.740 --> 01:17:54.740
爱号1

01:17:54.740 --> 01:17:55.740
都有爱号3

01:17:55.740 --> 01:17:56.740
就这么个意思

01:17:56.740 --> 01:17:57.740
好

01:17:57.740 --> 01:17:58.740
那么这里是不是

01:17:58.740 --> 01:17:59.740
设置了两个元素

01:17:59.740 --> 01:18:00.740
一个是下面的元素

01:18:00.740 --> 01:18:01.740
对吧

01:18:03.740 --> 01:18:05.740
一个是上面选中的文本

01:18:05.740 --> 01:18:06.740
就这

01:18:06.740 --> 01:18:07.740
就是个省那个词

01:18:10.500 --> 01:18:11.500
Documents

01:18:12.500 --> 01:18:14.500
其实我这里有个小技巧

01:18:14.500 --> 01:18:16.500
就是每一次都要写这么一个Documents

01:18:16.500 --> 01:18:17.500
这是一长串

01:18:17.500 --> 01:18:18.500
很麻烦

01:18:18.500 --> 01:18:19.500
所以说我们有的时候

01:18:19.500 --> 01:18:20.500
为了减少我们的书写

01:18:20.500 --> 01:18:22.500
我就写这么一个函数

01:18:23.500 --> 01:18:24.500
省那个词

01:18:24.500 --> 01:18:26.500
我给你包装一下

01:18:27.500 --> 01:18:28.500
Documents是那个词

01:18:31.710 --> 01:18:32.710
这样子我一雕这个函数

01:18:32.710 --> 01:18:33.710
是不是就相当于是

01:18:33.710 --> 01:18:34.710
吊这个函数了

01:18:34.710 --> 01:18:35.710
还有一种写法

01:18:35.710 --> 01:18:36.710
我直接定一个辨量

01:18:36.710 --> 01:18:37.710
DOLOR等于什么呢

01:18:40.710 --> 01:18:41.710
算了不用这种写法

01:18:41.710 --> 01:18:42.710
这种写法

01:18:43.710 --> 01:18:44.710
就用这种写法

01:18:44.710 --> 01:18:45.710
好那么这里

01:18:45.710 --> 01:18:46.710
我们是不是可以换成DOLOR

01:18:47.710 --> 01:18:48.710
是不是这些Documents

01:18:48.710 --> 01:18:49.710
Carrot Snaggert

01:18:53.110 --> 01:18:54.110
都可以换成DOLOR

01:19:00.090 --> 01:19:01.090
这样子是不是更加简洁一点

01:19:02.090 --> 01:19:03.090
好了

01:19:03.090 --> 01:19:04.090
下面也是一样

01:19:05.090 --> 01:19:06.090
DOLOR

01:19:06.090 --> 01:19:07.090
这里边我们写上

01:19:07.090 --> 01:19:08.090
那个Snaggert

01:19:08.090 --> 01:19:10.090
选用这个下拉列表

01:19:11.090 --> 01:19:13.090
还要选中这个

01:19:13.090 --> 01:19:14.090
下边那个元素

01:19:15.090 --> 01:19:17.090
下边这个元素

01:19:17.090 --> 01:19:18.090
这个元素没有什么特殊的

01:19:18.090 --> 01:19:19.090
那我就给它一个ID

01:19:21.090 --> 01:19:22.090
CellChoose

01:19:23.090 --> 01:19:26.850
表示下拉列表的选中结果

01:19:26.850 --> 01:19:29.670
Choose

01:19:30.670 --> 01:19:33.880
ID选择器

01:19:33.880 --> 01:19:34.880
我们来打印一下

01:19:34.880 --> 01:19:35.880
最好要打印一下

01:19:35.880 --> 01:19:36.880
看一下

01:19:36.880 --> 01:19:37.880
是不是两个元素

01:19:37.880 --> 01:19:38.880
是正常选中

01:19:38.880 --> 01:19:39.880
不然的话你写到后边

01:19:39.880 --> 01:19:40.880
也不知道哪里出了问题

01:19:41.880 --> 01:19:42.880
一调这个函数

01:19:42.880 --> 01:19:43.880
试一下

01:19:43.880 --> 01:19:45.880
叫CellSnaggert's Notes

01:19:46.880 --> 01:19:48.880
设置选中的

01:19:48.880 --> 01:19:49.880
爱好

01:19:50.880 --> 01:19:51.880
一个是下拉列表

01:19:51.880 --> 01:19:52.880
对吧

01:19:52.880 --> 01:19:53.880
一个是DIV

01:19:54.880 --> 01:19:55.880
好那行了

01:19:57.880 --> 01:19:58.880
那接下来

01:19:58.880 --> 01:19:59.880
我们来看

01:19:59.880 --> 01:20:00.880
首先我们要看

01:20:00.880 --> 01:20:02.880
根据下拉列表选中的哪些

01:20:02.880 --> 01:20:03.880
我们要知道

01:20:03.880 --> 01:20:05.880
下拉列表哪些是选中的

01:20:06.880 --> 01:20:07.880
那怎么弄呢

01:20:08.880 --> 01:20:09.880
之前

01:20:09.880 --> 01:20:11.880
我们在学习

01:20:11.880 --> 01:20:12.880
ATM的时候

01:20:12.880 --> 01:20:13.880
这个选项

01:20:13.880 --> 01:20:14.880
它选中

01:20:14.880 --> 01:20:16.880
它是有一个属性的

01:20:16.880 --> 01:20:17.880
叫CellNaggert's

01:20:18.880 --> 01:20:19.880
一个布尔属性

01:20:19.880 --> 01:20:20.880
对吧

01:20:20.880 --> 01:20:21.880
比方说这两项选中了

01:20:22.880 --> 01:20:23.880
保存你看一下

01:20:23.880 --> 01:20:25.880
你看是不是这两项选中了

01:20:25.880 --> 01:20:26.880
爱好一和爱好四

01:20:26.880 --> 01:20:27.880
对吧

01:20:27.880 --> 01:20:29.880
说一说我要怎么样

01:20:29.880 --> 01:20:31.880
我循环它的指元素

01:20:31.880 --> 01:20:33.880
看一下哪些是CellNaggert's

01:20:33.880 --> 01:20:34.880
选中的

01:20:34.880 --> 01:20:35.880
这就叫循环

01:20:36.880 --> 01:20:37.880
循环什么呢

01:20:37.880 --> 01:20:41.880
循环它的指元素CellNaggert's

01:20:41.880 --> 01:20:42.880
CellNaggert's

01:20:42.880 --> 01:20:43.880
是把它的指元素

01:20:44.880 --> 01:20:45.880
找它的长度

01:20:46.880 --> 01:20:47.880
对吧

01:20:47.880 --> 01:20:48.880
不就也是个循环

01:20:48.880 --> 01:20:49.880
你把它当成素主吗

01:20:49.880 --> 01:20:50.880
它是个伪素主

01:20:50.880 --> 01:20:52.880
也可以当成素主来循环

01:20:52.880 --> 01:20:53.880
对吧

01:20:53.880 --> 01:20:54.880
每循环意识

01:20:54.880 --> 01:20:55.880
是不是拿到一个Obsing

01:20:56.880 --> 01:20:57.880
CellNaggert's

01:20:59.880 --> 01:21:00.880
哎

01:21:00.880 --> 01:21:01.880
输出Obsing

01:21:02.880 --> 01:21:03.880
好看一下

01:21:04.880 --> 01:21:05.880
掉这个函数

01:21:06.880 --> 01:21:08.880
好这里报错了

01:21:08.880 --> 01:21:09.880
他说

01:21:09.880 --> 01:21:10.880
CellNaggert's肯定写错了

01:21:10.880 --> 01:21:11.880
CellNaggert's

01:21:12.880 --> 01:21:13.880
好再来

01:21:14.880 --> 01:21:15.880
你看Obsing

01:21:15.880 --> 01:21:16.880
是不是拿到了

01:21:16.880 --> 01:21:17.880
每个Obsing

01:21:17.880 --> 01:21:18.880
又拿到一个洞

01:21:18.880 --> 01:21:19.880
每一次循环拿到一个洞

01:21:19.880 --> 01:21:20.880
看一下这个洞

01:21:20.880 --> 01:21:22.880
以为这个是Naggert's的属性

01:21:22.880 --> 01:21:23.880
是不是Veq

01:21:24.880 --> 01:21:25.880
Obsing

01:21:25.880 --> 01:21:26.880
是Naggert's

01:21:27.880 --> 01:21:28.880
它Veq的时候

01:21:28.880 --> 01:21:30.880
我再把打印出来看一下

01:21:31.880 --> 01:21:32.880
对吧

01:21:32.880 --> 01:21:33.880
再把这一点一点的写

01:21:33.880 --> 01:21:34.880
一行一行的写

01:21:34.880 --> 01:21:35.880
慢慢的你熟悉了之后

01:21:35.880 --> 01:21:36.880
就刷刷刷写出来了

01:21:37.880 --> 01:21:38.880
一开始的时候

01:21:38.880 --> 01:21:39.880
要一底而戴着去输利

01:21:40.880 --> 01:21:41.880
你看目前是不是拿到了

01:21:41.880 --> 01:21:42.880
选中的只拿到选中了

01:21:42.880 --> 01:21:43.880
对吧

01:21:43.880 --> 01:21:44.880
我要拿

01:21:44.880 --> 01:21:45.880
我拿到选中了

01:21:45.880 --> 01:21:46.880
我知道你选中了

01:21:46.880 --> 01:21:47.880
我要干嘛

01:21:48.880 --> 01:21:50.880
我是不是可以把你的文字

01:21:50.880 --> 01:21:52.880
加到一个素主里边去

01:21:53.880 --> 01:21:54.880
对吧

01:21:54.880 --> 01:21:55.880
我可以拿到一个素主

01:21:55.880 --> 01:21:56.880
就是Naggert's

01:21:58.880 --> 01:22:00.880
我每一次看到你选中了

01:22:00.880 --> 01:22:02.880
我就往这素主里边加一个

01:22:02.880 --> 01:22:04.880
你的文字Obsing

01:22:04.880 --> 01:22:05.880
点什么Inner Text

01:22:08.880 --> 01:22:10.880
好 那么这个循环结束之后

01:22:10.880 --> 01:22:11.880
那个素主里边是不是保存了

01:22:11.880 --> 01:22:13.880
你所有选中的文字

01:22:14.880 --> 01:22:15.880
我们来看一下

01:22:17.880 --> 01:22:18.880
ihao1 ihao4

01:22:18.880 --> 01:22:19.880
好 我们再重新选中一些

01:22:19.880 --> 01:22:20.880
ihao234

01:22:22.880 --> 01:22:23.880
ihao234

01:22:23.880 --> 01:22:24.880
一调这个函数

01:22:24.880 --> 01:22:25.880
它就会拿到所有选中的文字

01:22:25.880 --> 01:22:26.880
形成的素主

01:22:27.880 --> 01:22:29.880
然后我再把这个素主

01:22:29.880 --> 01:22:30.880
用胶引

01:22:30.880 --> 01:22:32.880
把你姿势串联系的用了

01:22:32.880 --> 01:22:33.880
胶引 斗号

01:22:33.880 --> 01:22:35.880
就是真正编程

01:22:35.880 --> 01:22:37.880
前期 特别是前期

01:22:37.880 --> 01:22:39.880
最具有挑战性的就是

01:22:39.880 --> 01:22:40.880
如何把学过的姿势

01:22:40.880 --> 01:22:42.880
与灵活的运用

01:22:42.880 --> 01:22:43.880
因此呢 袁老师还给大家

01:22:43.880 --> 01:22:44.880
准备了这么多的练习题

01:22:44.880 --> 01:22:46.880
凡兰夫去练习

01:22:46.880 --> 01:22:48.880
练习很久

01:22:48.880 --> 01:22:50.880
你慢慢就会有这种感觉了

01:22:50.880 --> 01:22:52.880
连接过后是不是形成个制服串

01:22:52.880 --> 01:22:53.880
对吧

01:22:53.880 --> 01:22:55.880
我们再打印一个制服串

01:22:55.880 --> 01:22:56.880
不用打印了吧

01:22:56.880 --> 01:22:57.880
连接完了过后

01:22:57.880 --> 01:23:01.640
不就是一个制服串吗

01:23:01.640 --> 01:23:03.640
好 接下来我要做啥

01:23:03.640 --> 01:23:04.640
我要把这个制服串

01:23:04.640 --> 01:23:06.640
写到这里面去

01:23:06.640 --> 01:23:07.640
是不是写到这里面去

01:23:07.640 --> 01:23:08.640
那这里面是不是

01:23:08.640 --> 01:23:09.640
已经拿到了CHOOSE

01:23:09.640 --> 01:23:11.640
我要给这个CHOOSE

01:23:11.640 --> 01:23:13.640
设置它的INNERTEX也好

01:23:13.640 --> 01:23:14.640
INNERATM也好

01:23:14.640 --> 01:23:15.640
反正都是文字

01:23:16.640 --> 01:23:17.640
怎么设置呢

01:23:17.640 --> 01:23:20.640
设置你以选择的爱好

01:23:21.640 --> 01:23:22.640
是什么呢

01:23:22.640 --> 01:23:23.640
拼接上

01:23:24.640 --> 01:23:25.640
STR

01:23:26.640 --> 01:23:28.640
他为什么要给我筐一下

01:23:28.640 --> 01:23:29.640
我是安装了什么

01:23:29.640 --> 01:23:30.640
查监的吗

01:23:31.640 --> 01:23:33.640
那么就把这个制服串拼接到后边

01:23:33.640 --> 01:23:34.640
不就完了吗

01:23:34.640 --> 01:23:35.640
咱们来试一下

01:23:35.640 --> 01:23:37.640
我这里选中爱好234

01:23:37.640 --> 01:23:39.640
然后调那个函数

01:23:39.640 --> 01:23:40.640
你看这里就显示的

01:23:40.640 --> 01:23:42.640
你选中的爱好1234

01:23:43.640 --> 01:23:44.640
然后呢

01:23:44.640 --> 01:23:48.640
选中一个爱好790

01:23:48.640 --> 01:23:49.640
调这个函数

01:23:49.640 --> 01:23:51.640
它就显示了790

01:23:52.640 --> 01:23:54.640
就写好这么三个函数

01:23:54.640 --> 01:23:55.640
这个程序好好写

01:23:55.640 --> 01:23:57.640
我们后边还会用到的

01:23:57.640 --> 01:23:58.640
后边我们学到事件之后

01:23:58.640 --> 01:24:00.640
下几课我们就学事件

01:24:00.640 --> 01:24:01.640
学到事件之后

01:24:01.640 --> 01:24:02.640
我就把这个函数跟事件串联

01:24:02.640 --> 01:24:05.640
那我就不需要在控制台里边去调函数了

01:24:05.640 --> 01:24:06.640
自动调用

01:24:06.640 --> 01:24:08.640
用户点了某个操作过后自动调动函数

01:24:08.640 --> 01:24:09.640
就完事了

01:24:10.640 --> 01:24:12.640
这就是关于这些课的东西

01:24:12.640 --> 01:24:14.640
东西它看上去有点多

01:24:14.640 --> 01:24:15.640
时间看上去有点长

01:24:15.640 --> 01:24:19.640
实际上我们大部分时间都在弄一些小细节

01:24:19.640 --> 01:24:22.640
真正的刚领性质的东西

01:24:22.640 --> 01:24:24.640
其实很少

01:24:24.640 --> 01:24:26.640
就怎么拿到多么元素

01:24:26.640 --> 01:24:28.640
我见面就是这样子

01:24:28.640 --> 01:24:29.640
你拿到多么元素

01:24:29.640 --> 01:24:31.640
你到底是要新创建的

01:24:31.640 --> 01:24:34.640
还是说我要拿到已有的呢

01:24:34.640 --> 01:24:35.640
根据不同的情况

01:24:35.640 --> 01:24:38.640
比方说我要刚才的王正荣那个例子

01:24:38.640 --> 01:24:40.640
我就是新创建的

01:24:40.640 --> 01:24:41.640
因为要靠借也是来创建的

01:24:41.640 --> 01:24:43.640
一开始页面上没有

01:24:43.640 --> 01:24:44.640
你看表单这个例子

01:24:44.640 --> 01:24:46.640
我就是拿到已有的

01:24:46.640 --> 01:24:48.640
根据这具体的情况来

01:24:48.640 --> 01:24:49.640
拿到多么元素过后

01:24:49.640 --> 01:24:50.640
就可以做各种操作

01:24:50.640 --> 01:24:52.640
改变它的结构

01:24:52.640 --> 01:24:53.640
更改它的属性

01:24:53.640 --> 01:24:54.640
读取它的属性

01:24:54.640 --> 01:24:55.640
更改它的内容

01:24:55.640 --> 01:24:56.640
改变它的样式

01:24:56.640 --> 01:24:58.640
那你需要做什么去查什么

01:24:58.640 --> 01:24:59.640
其实很简单的

01:24:59.640 --> 01:25:02.640
只是很多里边的小细节比较多

01:25:02.640 --> 01:25:03.640
小细节不重要

01:25:03.640 --> 01:25:05.640
到时候用到的时候

01:25:05.640 --> 01:25:07.640
遇到的时候再查就完成了

01:25:07.640 --> 01:25:09.640
这就是关于多么的基本操作

01:25:09.640 --> 01:25:10.640
就这么一些

