WEBVTT

00:00.000 --> 00:05.600
好 咱们继续 再继续讲后边的题之前

00:05.600 --> 00:12.400
我给同学们介绍一个小的工具 叫做断点挑试

00:12.400 --> 00:14.000
介绍这么一个小工具

00:14.000 --> 00:19.000
这个小工具我们之后还会重点来介绍 它挺重要的

00:19.000 --> 00:24.000
它主要是为了解决什么问题的 主要是我们在写的一段程序

00:24.000 --> 00:29.000
各程序可能比较复杂 它得到了结果又跟我们想象的不一样

00:29.000 --> 00:32.000
它肯定是中间有一段出错了 对吧 出了问题

00:32.000 --> 00:37.000
我们断点挑试的主要目的就是为了定位错误所在的问题的

00:37.000 --> 00:41.000
它到底是哪一步出了问题 哪一步代码写错了

00:41.000 --> 00:45.000
然后我们后边写成败上千行代码 我们也不知道哪一行代码写错了

00:45.000 --> 00:49.000
反正就结果不一样 给我们期望的不一样 或者就爆错了

00:49.000 --> 00:52.000
那么这个时候我们就需要进行断点挑试

00:52.000 --> 00:57.000
在这断点挑试其实还有一个小作用 什么作用呢

00:58.000 --> 01:03.000
特别是对于初学者 刚学程序的时候 特别是遇到循环这一块

01:03.000 --> 01:08.000
老师讲了漫天 这样写好像没问题 总感觉哪里

01:08.000 --> 01:12.000
反正就是没有那么 心里面有点没底

01:12.000 --> 01:14.000
我不知道同学们有没有这种感觉

01:14.000 --> 01:17.000
因为我袁老师以前早期在学程序的时候也是有这种感觉

01:17.000 --> 01:20.000
就程序写好了 结果也正确了

01:20.000 --> 01:24.000
心里面总是有点没底的感觉 就是他不知道一步一步

01:24.000 --> 01:27.000
怎么是一步一步就得到这么一个结果的

01:27.000 --> 01:32.000
所以断点挑试还有一个好处 就是可以让同学们非常清楚的看到

01:32.000 --> 01:35.000
程序是怎么一步一步运行的 好吧

01:35.000 --> 01:38.000
那么给大家介绍一下怎么去使用

01:38.000 --> 01:42.000
我先简单介绍一下 后边我们会单独来讲断点挑试的

01:42.000 --> 01:44.000
先简单介绍

01:44.000 --> 01:48.000
我们这可以给 比方说有段代码 我们分不清楚

01:48.000 --> 01:51.000
它怎么运行的 或者是哪一可能有问题

01:51.000 --> 01:53.000
我们需要定位问题

01:53.000 --> 01:56.000
我们就在这段代码之前 就前面这个地方打一个断点

01:56.000 --> 01:59.000
你看 鼠标移过来 移到断 点一下

01:59.000 --> 02:02.000
你看说一个红色的点都在这 断点

02:02.000 --> 02:08.000
那么打了断点之后 我们使用挑试模式去运行程序的时候

02:08.000 --> 02:11.000
它当它遇到断点 它就会停住

02:11.000 --> 02:15.000
程序可以卡在这 不动了 等待你的操作

02:15.000 --> 02:17.000
那么我们要怎么来运行程序呢

02:17.000 --> 02:19.000
我们不能这样运行 不能用coder runner

02:19.000 --> 02:20.000
不能用这种方式

02:20.000 --> 02:22.000
这种方式它是无视断点的

02:22.000 --> 02:26.000
要怎么来运行呢 找到vscoder这 运行和调试

02:26.000 --> 02:29.000
看到没 这里点击 运行和调试

02:29.000 --> 02:34.000
在点运行和调试之前 你先看一下这 这里有个自动附加

02:34.000 --> 02:37.000
我就不给你解释什么叫自动附加了

02:37.000 --> 02:40.000
反正就是有这么一个东西 你点一下

02:40.000 --> 02:44.000
那么这里你选择始终也可以

02:45.000 --> 02:49.000
紧代标志也可以

02:49.000 --> 02:52.000
我就选择紧代标志吧

02:52.000 --> 02:54.000
那你不用去解释什么意思

02:54.000 --> 02:56.000
然后我们这里去点一个断点

02:56.000 --> 03:00.000
接下来我们在运行和调试里点击运行和调试

03:00.000 --> 03:03.000
你看 第一次点击运行和调试的时候

03:03.000 --> 03:05.000
它可能会出现一个选择框

03:05.000 --> 03:09.000
我这里好像没有选择框呢

03:09.000 --> 03:12.000
那可能是这个程序我之前调试过

03:12.000 --> 03:16.000
如果说它出现了一个选择框 比方说点这

03:16.000 --> 03:19.000
就是这上面 就是这个位置

03:19.000 --> 03:21.000
这个位置它出现一个选择框

03:21.000 --> 03:24.000
那么你就选漏的点解释

03:24.000 --> 03:27.000
它有很多种的环境 你就选漏的点解释

03:27.000 --> 03:31.000
因为我们目前在漏的点解释的环境里边

03:31.000 --> 03:35.000
然后你会看到它这里运行到了断点

03:35.000 --> 03:37.000
这里选用这个选项卡

03:37.000 --> 03:41.000
那么到了断点的时候 我们把这个切分一下

03:42.000 --> 03:45.000
这个时候你看一下 这边的变量

03:45.000 --> 03:47.000
这边有一个多的选项卡

03:47.000 --> 03:48.000
监视这些我们暂时用不到

03:48.000 --> 03:50.000
一会我们会告诉它监视怎么用

03:50.000 --> 03:52.000
这里会有很多的变量

03:52.000 --> 03:54.000
就告诉你 现在代码卡在这了

03:54.000 --> 03:57.000
并没有往后运行 没有往后运行

03:57.000 --> 03:59.000
代码卡在这了

03:59.000 --> 04:02.000
那么如果说你想监控代码运行到这

04:02.000 --> 04:04.000
这些变量到底是什么值

04:04.000 --> 04:05.000
比方说这个I是什么值

04:05.000 --> 04:07.000
你就可以指着 用鼠标指着这个I

04:07.000 --> 04:10.000
它会告诉你 I的值是0

04:10.000 --> 04:12.000
然后这个NAMS是什么值

04:12.000 --> 04:13.000
你可以用鼠标指着

04:13.000 --> 04:15.000
它还会告诉你这个NAMS是个数组

04:15.000 --> 04:16.000
它有这么一些值

04:16.000 --> 04:18.000
那么这个NUNAMS是什么值

04:18.000 --> 04:20.000
你可以指着它 目前NUNAMS是空的

04:20.000 --> 04:22.000
这是第一次循环 对吧

04:22.000 --> 04:24.000
其实你可以在左边也可以看到

04:24.000 --> 04:29.000
有个I 有个NUNAMS 有个NUMBERS

04:29.000 --> 04:32.000
那么这三个是我们比较关心的

04:32.000 --> 04:34.000
其他的我们也看不懂是啥

04:34.000 --> 04:36.000
也不用去关心它

04:36.000 --> 04:38.000
那么我们这个时候可以这样的操作

04:38.000 --> 04:40.000
我们把点击这个I

04:40.000 --> 04:41.000
我们比较关心它的值

04:41.000 --> 04:43.000
所以我们点击它右键

04:43.000 --> 04:45.000
这里有个添加到监视

04:45.000 --> 04:47.000
然后再点击NUNAMS

04:47.000 --> 04:49.000
右键添加到监视

04:49.000 --> 04:52.000
NUNAMS点右键添加到监视

04:52.000 --> 04:54.000
这样子就更加清爽一点

04:54.000 --> 04:56.000
我们来把变量折起来

04:56.000 --> 04:57.000
我们看到监视这一块

04:57.000 --> 04:59.000
是不是就是刚才我们添加的这几个

04:59.000 --> 05:00.000
对吧

05:00.000 --> 05:02.000
好 接下来我们就开始来玩了

05:02.000 --> 05:04.000
现在大马卡在这 没动了

05:04.000 --> 05:06.000
我们这边可以调一下

05:06.000 --> 05:09.000
这里调成调时控制台

05:09.000 --> 05:12.000
你会看到现在啥也没输出

05:12.000 --> 05:14.000
正在调时这个二点解释

05:14.000 --> 05:16.000
现在目前什么都没有输出

05:16.000 --> 05:18.000
好 那么接下来我们来

05:18.000 --> 05:21.000
怎么样程序继续呢

05:21.000 --> 05:23.000
我们可以点这个

05:23.000 --> 05:25.000
其他的不用管 点这个

05:25.000 --> 05:27.000
一个弯弯 对吧 一个箭头

05:27.000 --> 05:28.000
叫单步跳过

05:28.000 --> 05:30.000
它有个快捷键叫F10

05:30.000 --> 05:31.000
单步跳过

05:31.000 --> 05:32.000
单步跳过什么意思呢

05:32.000 --> 05:34.000
就是让它运行到下一句代码

05:34.000 --> 05:36.000
就把这句代码运行完

05:36.000 --> 05:37.000
到下一句

05:37.000 --> 05:39.000
好 我们点击一下

05:39.000 --> 05:41.000
为什么跳到这呢

05:41.000 --> 05:43.000
说明啥 说明判断没有成功

05:43.000 --> 05:45.000
因为如果说判断成功了

05:45.000 --> 05:46.000
是不是应该运行这个

05:46.000 --> 05:47.000
对吧

05:47.000 --> 05:49.000
目前说明判断没有成功

05:49.000 --> 05:50.000
于是它会运行哪呢

05:50.000 --> 05:51.000
你看 这里是个箭头

05:51.000 --> 05:53.000
一个黄色的箭头 看到没

05:53.000 --> 05:54.000
后面有个箭头

05:54.000 --> 05:55.000
它运行到这个I++了

05:55.000 --> 05:57.000
运行到这了

05:57.000 --> 05:58.000
运行到I++

05:58.000 --> 05:59.000
所以说目前S1

05:59.000 --> 06:02.000
然后我们再点单步跳过

06:02.000 --> 06:03.000
所以现在它变成了

06:03.000 --> 06:04.000
刚才S0

06:04.000 --> 06:06.000
是不是现在变成S1了

06:06.000 --> 06:07.000
对吧

06:07.000 --> 06:08.000
然后它接下来运行哪呢

06:08.000 --> 06:09.000
运行到这个判断

06:09.000 --> 06:11.000
它的箭头打的位置不是很好

06:11.000 --> 06:13.000
运行到这个判断

06:13.000 --> 06:14.000
判断条件是不是成立了

06:14.000 --> 06:16.000
我们再点单步跳过

06:16.000 --> 06:17.000
条件成立的

06:17.000 --> 06:19.000
然后继续进入循环

06:19.000 --> 06:20.000
那么现在就进入第二次循环了

06:20.000 --> 06:21.000
对吧

06:21.000 --> 06:22.000
I等于1

06:22.000 --> 06:23.000
然后接下来

06:23.000 --> 06:24.000
我们看一下第二次循环

06:24.000 --> 06:25.000
就看这个值

06:25.000 --> 06:26.000
那么判断一下

06:26.000 --> 06:27.000
那么是I

06:27.000 --> 06:28.000
就是第一个

06:28.000 --> 06:30.000
I等于1

06:30.000 --> 06:31.000
I等于1

06:31.000 --> 06:32.000
现在就11

06:32.000 --> 06:33.000
11是不是技术

06:33.000 --> 06:34.000
它是技术

06:34.000 --> 06:35.000
于是它就进入到这里边

06:35.000 --> 06:36.000
看到没

06:36.000 --> 06:37.000
我们把这个技术

06:37.000 --> 06:38.000
加到哪去

06:38.000 --> 06:39.000
加到新宿组里边去

06:39.000 --> 06:41.000
那么这一句代码运行完了之后

06:41.000 --> 06:42.000
你看

06:42.000 --> 06:44.000
这个新宿组里边说有个11了

06:44.000 --> 06:45.000
对吧

06:45.000 --> 06:46.000
说有个11了

06:46.000 --> 06:47.000
好

06:47.000 --> 06:48.000
于是呢

06:48.000 --> 06:49.000
我们这里

06:49.000 --> 06:50.000
再点击

06:50.000 --> 06:51.000
我们就可以一步一步看到

06:51.000 --> 06:52.000
它整个程序运行

06:52.000 --> 06:53.000
对吧

06:53.000 --> 06:54.000
1147

06:54.000 --> 06:55.000
一个个夹进来了

06:55.000 --> 06:56.000
好

06:56.000 --> 06:57.000
那基本上

06:57.000 --> 06:58.000
你到这

06:58.000 --> 06:59.000
基本上那个代码

06:59.000 --> 07:00.000
你已经理解了

07:00.000 --> 07:01.000
对吧

07:01.000 --> 07:02.000
已经理解代码啥意思了

07:02.000 --> 07:03.000
我已经明白了

07:03.000 --> 07:04.000
我想看到最后

07:04.000 --> 07:06.000
把个循环运行完了之后

07:06.000 --> 07:08.000
它应该是什么样子

07:08.000 --> 07:09.000
那么这个时候

07:09.000 --> 07:11.000
你可以点这个

07:11.000 --> 07:12.000
这个是什么意思呢

07:12.000 --> 07:13.000
表示技序

07:13.000 --> 07:14.000
F5

07:14.000 --> 07:15.000
技序啥意思

07:15.000 --> 07:16.000
就是让它立即

07:16.000 --> 07:18.000
不管中间有多好行代码

07:18.000 --> 07:19.000
马上运行

07:19.000 --> 07:20.000
一直运行

07:20.000 --> 07:21.000
运行到哪呢

07:21.000 --> 07:23.000
运行到下一个断点

07:23.000 --> 07:24.000
好

07:24.000 --> 07:25.000
那么目前运行

07:25.000 --> 07:26.000
你看运行到这了

07:26.000 --> 07:27.000
为什么

07:27.000 --> 07:28.000
这就是下一个断点

07:28.000 --> 07:29.000
它还是在这

07:29.000 --> 07:30.000
为什么呢

07:30.000 --> 07:31.000
你看挨得直变了

07:31.000 --> 07:32.000
为什么

07:32.000 --> 07:33.000
因为下一次循环

07:33.000 --> 07:34.000
这里又遇到断点了

07:34.000 --> 07:35.000
就是继续运行

07:35.000 --> 07:36.000
遇到下一个断点为止

07:36.000 --> 07:37.000
因为我的点

07:37.000 --> 07:39.000
点是大到循环里边的

07:39.000 --> 07:40.000
所以说

07:40.000 --> 07:41.000
再点一下

07:41.000 --> 07:42.000
它还是在循环里边

07:42.000 --> 07:43.000
因为下一次循环

07:43.000 --> 07:44.000
又到这个断点了

07:44.000 --> 07:45.000
好

07:45.000 --> 07:46.000
如果说我现在

07:46.000 --> 07:47.000
把个断点取消掉

07:47.000 --> 07:48.000
然后我再这打个断点

07:48.000 --> 07:49.000
你看一下

07:49.000 --> 07:51.000
我现在再点这个F5

07:51.000 --> 07:52.000
这个技序

07:52.000 --> 07:53.000
它就不停的运行

07:53.000 --> 07:54.000
不停的运行

07:54.000 --> 07:55.000
一直要遇到下一个断点

07:55.000 --> 07:56.000
好

07:56.000 --> 07:57.000
再运行

07:57.000 --> 07:58.000
把循环就运行完了

07:58.000 --> 07:59.000
那么目前那个

07:59.000 --> 08:00.000
六纳姆斯的纸

08:00.000 --> 08:01.000
就可以看得很清楚了

08:02.000 --> 08:03.000
对吧

08:03.000 --> 08:04.000
就这么个意思

08:04.000 --> 08:05.000
就这么个意思

08:05.000 --> 08:08.000
这就是那个断点调试

08:08.000 --> 08:09.000
其实比方说

08:09.000 --> 08:10.000
我们再来一次

08:10.000 --> 08:12.000
如果说你看到差不多了

08:12.000 --> 08:13.000
你可以想停止

08:13.000 --> 08:14.000
停止的话点这个

08:14.000 --> 08:15.000
其实循环运行结束之后

08:15.000 --> 08:17.000
它会自动停止

08:17.000 --> 08:18.000
当然你如果说

08:18.000 --> 08:19.000
中途你想强行停止的话

08:19.000 --> 08:20.000
点这个

08:20.000 --> 08:22.000
C2F加F5

08:22.000 --> 08:23.000
或者点这个

08:23.000 --> 08:24.000
也可以停止了

08:24.000 --> 08:25.000
比方说

08:25.000 --> 08:27.000
我想观察一下

08:27.000 --> 08:29.000
它到底整个执行过程中

08:29.000 --> 08:31.000
到底是加了哪些数字

08:31.000 --> 08:32.000
那么我可以把

08:32.000 --> 08:33.000
我们可以怎么样呢

08:33.000 --> 08:34.000
我可以这样吧

08:34.000 --> 08:35.000
我就把这个表达式

08:35.000 --> 08:37.000
保存到变量N里边

08:39.000 --> 08:40.000
那么是N

08:40.000 --> 08:42.000
保存N里边这样变于观察

08:42.000 --> 08:43.000
我用N来判断

08:43.000 --> 08:44.000
对吧

08:44.000 --> 08:45.000
其实这也是

08:45.000 --> 08:46.000
比方说像这个表达式

08:46.000 --> 08:47.000
可以直接写到这里

08:47.000 --> 08:48.000
好像很简洁

08:48.000 --> 08:49.000
其实有的时候

08:49.000 --> 08:50.000
你这段单码里边

08:50.000 --> 08:52.000
用到了很多处这个表达式

08:52.000 --> 08:53.000
那么我们其实

08:53.000 --> 08:54.000
可以先把它保存到变量里边

08:54.000 --> 08:55.000
然后把T完成变量

08:55.000 --> 08:57.000
这样子的反而更连接一些

08:57.000 --> 08:58.000
都行

08:58.000 --> 09:00.000
那么现在我们把断点打到这

09:00.000 --> 09:02.000
然后在这里打个断点

09:02.000 --> 09:03.000
我们看整个运行过程中

09:03.000 --> 09:04.000
因为我现在只关心

09:04.000 --> 09:06.000
整个运行过程中

09:06.000 --> 09:08.000
哪些数字加进去了

09:08.000 --> 09:10.000
于是我们现在运行

09:12.000 --> 09:13.000
我们在变量里边

09:13.000 --> 09:15.000
把N也加进去

09:15.000 --> 09:16.000
N也加进去

09:16.000 --> 09:17.000
天上监视

09:18.000 --> 09:19.000
监视里边你看

09:19.000 --> 09:20.000
现在多个N了

09:20.000 --> 09:22.000
目前是你看

09:22.000 --> 09:23.000
32没有加

09:23.000 --> 09:24.000
加到哪了

09:24.000 --> 09:25.000
加到11

09:25.000 --> 09:26.000
就是第二十循环

09:26.000 --> 09:27.000
加了一个11

09:27.000 --> 09:29.000
我们到下一个断点

09:29.000 --> 09:31.000
你看这里是不是11加进去了

09:31.000 --> 09:32.000
接下来

09:32.000 --> 09:33.000
下面这个N是多少呢

09:33.000 --> 09:34.000
这个N

09:34.000 --> 09:35.000
47

09:35.000 --> 09:36.000
对吧

09:36.000 --> 09:37.000
你看47运行到这

09:37.000 --> 09:38.000
加进去了

09:38.000 --> 09:39.000
你看我们这个数组

09:39.000 --> 09:40.000
是不是不乱地增加

09:40.000 --> 09:41.000
对吧

09:41.000 --> 09:43.000
你看数组不乱地增加

09:43.000 --> 09:44.000
最后循环结束了

09:44.000 --> 09:46.000
就这个数组里面就全是极数了

09:46.000 --> 09:47.000
懂不懂的意思吧

09:47.000 --> 09:49.000
就是目前的断点条式

09:49.000 --> 09:50.000
这断点条式

09:50.000 --> 09:52.000
主要是为了解决错误的

09:52.000 --> 09:53.000
定位错误的

09:53.000 --> 09:54.000
那么目前这个断点条式

09:54.000 --> 09:56.000
可以帮助同学们分析

09:56.000 --> 09:58.000
整个程序的执行过程

09:58.000 --> 10:00.000
如果说同学们对这一块程序

10:00.000 --> 10:01.000
理解不是很清楚的话

10:01.000 --> 10:03.000
那么可以通过断点条式

10:03.000 --> 10:04.000
不要害怕

10:04.000 --> 10:05.000
有些同学我不知道

10:05.000 --> 10:06.000
为什么他会害怕的断点条式

10:06.000 --> 10:08.000
断点条式怎么害怕的

10:08.000 --> 10:10.000
看到这里多了这么的功能

10:10.000 --> 10:11.000
这里有断点

10:11.000 --> 10:12.000
有这么多选项

10:12.000 --> 10:13.000
又害怕了

10:13.000 --> 10:14.000
腿都要发抖

10:15.000 --> 10:16.000
没必要

10:16.000 --> 10:17.000
没必要

10:17.000 --> 10:18.000
大胆的用

10:18.000 --> 10:19.000
反正断点条式

10:19.000 --> 10:21.000
你们以后也必须要学会的

10:23.000 --> 10:25.000
这是给大家提前说一下

10:25.000 --> 10:27.000
接下来进入今天的题

10:28.000 --> 10:29.000
球合

10:30.000 --> 10:31.000
一到一百球合

10:32.000 --> 10:34.000
那就是一加上二加上三

10:34.000 --> 10:35.000
加四加五加六

10:35.000 --> 10:36.000
一直加到一百

10:36.000 --> 10:38.000
那么这个问题怎么做呢

10:38.000 --> 10:40.000
这个问题你可以这样来想

10:40.000 --> 10:42.000
我首先表现一到一百

10:42.000 --> 10:45.000
有一个数列已经在这了

10:45.000 --> 10:47.000
一二三四五六

10:47.000 --> 10:49.000
一直写到一百

10:50.000 --> 10:51.000
怎么来玩这个事呢

10:51.000 --> 10:53.000
我首先准备一张纸

10:53.000 --> 10:55.000
准备一张纸

10:55.000 --> 10:57.000
这张纸上我寄入一个零

10:57.000 --> 10:58.000
表示一开始

10:58.000 --> 10:59.000
这个纸是什么意思

10:59.000 --> 11:01.000
这个纸上寄入的就是最终结果

11:01.000 --> 11:03.000
最终哪一加的结果

11:03.000 --> 11:05.000
一个一个加起来的结果

11:05.000 --> 11:07.000
一开始寄个零

11:07.000 --> 11:09.000
然后我接下来把

11:09.000 --> 11:10.000
第一个数拿出来

11:10.000 --> 11:12.000
一跟纸上的相加

11:13.000 --> 11:14.000
一开始为什么是零

11:14.000 --> 11:15.000
因为一开始都还没有加

11:15.000 --> 11:17.000
所以结果就是零

11:17.000 --> 11:19.000
这个第一个数跟纸上的相加

11:19.000 --> 11:20.000
是不是变成一

11:20.000 --> 11:21.000
改过来

11:21.000 --> 11:23.000
然后再把第二个数拿出来

11:23.000 --> 11:25.000
把第二个数跟纸上的相加

11:25.000 --> 11:26.000
变成三

11:26.000 --> 11:27.000
那么纸上目前寄入的是

11:27.000 --> 11:29.000
寄入的是前两项

11:29.000 --> 11:30.000
再把这个三拿出来

11:30.000 --> 11:31.000
跟它相加

11:31.000 --> 11:32.000
是不是变成六

11:32.000 --> 11:35.000
目前寄入的是前三项之合

11:35.000 --> 11:36.000
再把前三项之合

11:36.000 --> 11:37.000
跟这个相加

11:37.000 --> 11:39.000
是不是变成十

11:39.000 --> 11:40.000
跟它相加

11:40.000 --> 11:41.000
是不是变成十五

11:41.000 --> 11:43.000
其实我们人去做这件事

11:43.000 --> 11:45.000
我也是这样做的

11:45.000 --> 11:47.000
只不过我们在心里边

11:47.000 --> 11:49.000
把在大牢里边

11:49.000 --> 11:50.000
有这么一张纸

11:50.000 --> 11:52.000
我想一加二等于三

11:52.000 --> 11:53.000
三加三等于六

11:53.000 --> 11:54.000
六加四等于十

11:54.000 --> 11:56.000
十加五等于十五

11:56.000 --> 11:57.000
不就是这样子在玩的吗

11:57.000 --> 11:58.000
对吧

11:59.000 --> 12:01.000
不管你在大牢里边

12:01.000 --> 12:03.000
还是在纸上

12:03.000 --> 12:04.000
都在做什么一件事

12:04.000 --> 12:06.000
所以我们反映到程序里边

12:06.000 --> 12:08.000
按照程序的逻辑来写出来

12:08.000 --> 12:09.000
不是一样的吗

12:09.000 --> 12:11.000
程序里边咋写

12:11.000 --> 12:12.000
这张纸是啥

12:12.000 --> 12:13.000
这张纸不就是个变量吗

12:13.000 --> 12:14.000
对吧

12:14.000 --> 12:15.000
我来记录一下

12:15.000 --> 12:16.000
我定一个变量

12:16.000 --> 12:18.000
最终的结果

12:18.000 --> 12:21.000
表示最终的球合结果

12:21.000 --> 12:22.000
这个结果肯定一开始是0

12:22.000 --> 12:24.000
一开始还没有加吗

12:24.000 --> 12:26.000
那就一个个加1加2加3加4加5

12:26.000 --> 12:27.000
对吧

12:27.000 --> 12:29.000
那么这个循环的范围是多少呢

12:29.000 --> 12:30.000
一到一百

12:30.000 --> 12:32.000
这没问题吧

12:32.000 --> 12:33.000
一个看吧

12:33.000 --> 12:34.000
i等于1运行一次

12:34.000 --> 12:35.000
i等于2运行一次

12:35.000 --> 12:37.000
i等于3运行一次

12:37.000 --> 12:38.000
一直运行了一百

12:38.000 --> 12:40.000
那么这里边怎么写呢

12:40.000 --> 12:41.000
怎么写

12:41.000 --> 12:44.000
不就是加等于i吗

12:44.000 --> 12:45.000
对吧

12:45.000 --> 12:47.000
加等于如果看不懂的话

12:47.000 --> 12:48.000
那就这样子写

12:48.000 --> 12:49.000
写出来再说

12:49.000 --> 12:51.000
把自己的刚刚之前的结果

12:51.000 --> 12:53.000
再加上这个数字

12:53.000 --> 12:55.000
然后再重新复制给他

12:55.000 --> 12:56.000
对吧

12:56.000 --> 12:57.000
重新写到纸上去

12:57.000 --> 12:59.000
一开始i等于0的时候

12:59.000 --> 13:00.000
i等于

13:00.000 --> 13:01.000
一开始纸上是0吗

13:01.000 --> 13:02.000
i等于1的时候

13:02.000 --> 13:04.000
是不是0加上1

13:04.000 --> 13:05.000
对吧

13:05.000 --> 13:06.000
等于1

13:06.000 --> 13:07.000
把纸上改一下

13:07.000 --> 13:08.000
对吧

13:08.000 --> 13:09.000
复制过去是不是改一下

13:09.000 --> 13:11.000
把纸上改成1

13:11.000 --> 13:12.000
对不对

13:12.000 --> 13:13.000
然后呢

13:13.000 --> 13:14.000
2的时候是不是又把

13:14.000 --> 13:17.000
纸上的1跟2相加改成3

13:17.000 --> 13:18.000
i等于3的时候

13:18.000 --> 13:19.000
是不是就把纸上的3

13:19.000 --> 13:21.000
跟这个33加是不是改成6

13:21.000 --> 13:22.000
对吧

13:22.000 --> 13:23.000
这样子的循环结束

13:23.000 --> 13:26.000
求和就结束了

13:26.000 --> 13:29.000
最终就是5050

13:29.000 --> 13:31.000
然后这这道题

13:31.000 --> 13:32.000
求和

13:32.000 --> 13:35.000
一个非常经典的问题

13:35.000 --> 13:36.000
好

13:36.000 --> 13:37.000
第二道题

13:37.000 --> 13:38.000
求某个数的阶层

13:38.000 --> 13:39.000
阶层是什么呢

13:39.000 --> 13:41.000
就是

13:41.000 --> 13:42.000
比方说

13:42.000 --> 13:43.000
5的阶层

13:43.000 --> 13:44.000
等于5×1

13:44.000 --> 13:45.000
4×1

13:45.000 --> 13:46.000
3×1

13:46.000 --> 13:47.000
2×1

13:47.000 --> 13:48.000
当然成不成1

13:48.000 --> 13:49.000
都无所谓

13:49.000 --> 13:50.000
这是阶层

13:50.000 --> 13:52.000
我们不去考虑什么

13:52.000 --> 13:53.000
复数

13:53.000 --> 13:54.000
不去考虑复数

13:54.000 --> 13:55.000
0的情况

13:55.000 --> 13:56.000
我们就考虑

13:56.000 --> 13:57.000
大于等于1的情况

13:57.000 --> 13:59.000
那么这个阶层呢

13:59.000 --> 14:00.000
其实跟求和的本质

14:00.000 --> 14:01.000
是一样的

14:01.000 --> 14:02.000
比方说

14:02.000 --> 14:04.000
你要求那个

14:04.000 --> 14:05.000
5的阶层

14:05.000 --> 14:07.000
你人是怎么求的

14:07.000 --> 14:08.000
人怎么求

14:08.000 --> 14:09.000
你是5×1

14:09.000 --> 14:10.000
一个4

14:10.000 --> 14:11.000
对吧

14:11.000 --> 14:12.000
等于多少

14:12.000 --> 14:14.000
哪一张纸出来

14:14.000 --> 14:17.000
首先记录一个5

14:17.000 --> 14:18.000
昨天记录一个5

14:18.000 --> 14:19.000
然后呢

14:19.000 --> 14:20.000
乘以4

14:20.000 --> 14:21.000
是不是20

14:21.000 --> 14:22.000
对吧

14:22.000 --> 14:23.000
再乘以3

14:23.000 --> 14:24.000
是不是60

14:24.000 --> 14:25.000
再乘一个2

14:25.000 --> 14:26.000
是不是120

14:26.000 --> 14:27.000
1就不用乘了

14:27.000 --> 14:29.000
这5的阶层就是120

14:29.000 --> 14:31.000
当然我们也可以反过来

14:31.000 --> 14:32.000
反过来好写程序点

14:32.000 --> 14:33.000
主要是

14:33.000 --> 14:34.000
反过来有什么呢

14:34.000 --> 14:35.000
5的阶层等于多少

14:35.000 --> 14:36.000
等于

14:36.000 --> 14:38.000
现在纸上写个1

14:38.000 --> 14:39.000
对吧

14:39.000 --> 14:40.000
之前求和是写个0

14:40.000 --> 14:41.000
现在纸上写个1

14:41.000 --> 14:43.000
然后5的阶层

14:43.000 --> 14:45.000
是不是乘一个2

14:45.000 --> 14:47.000
将来一把5展开

14:47.000 --> 14:49.000
2,3,4,5

14:49.000 --> 14:50.000
对不对

14:50.000 --> 14:51.000
先乘一个2

14:51.000 --> 14:52.000
1的乘以2等于2

14:52.000 --> 14:53.000
然后再把纸上

14:53.000 --> 14:54.000
跟它3来相乘

14:54.000 --> 14:55.000
是不是等于6

14:55.000 --> 14:56.000
那么6就是

14:56.000 --> 14:57.000
前面两项相乘

14:57.000 --> 14:58.000
对吧

14:58.000 --> 14:59.000
然后6再乘以4

14:59.000 --> 15:00.000
是不是24

15:00.000 --> 15:01.000
那么24就是

15:01.000 --> 15:03.000
前面三项相乘

15:03.000 --> 15:04.000
24乘以5

15:04.000 --> 15:06.000
是不是120

15:06.000 --> 15:07.000
一样

15:07.000 --> 15:09.000
所以说我们反应到代码里边

15:09.000 --> 15:10.000
这个纸是什么

15:10.000 --> 15:12.000
这个纸就是最终结构

15:12.000 --> 15:13.000
维造式

15:13.000 --> 15:14.000
我们用上去

15:14.000 --> 15:15.000
这个单词就不合适了

15:15.000 --> 15:16.000
上个单词表示

15:16.000 --> 15:17.000
求和的意思

15:17.000 --> 15:19.000
然后就这里写个1

15:19.000 --> 15:20.000
从1开始

15:20.000 --> 15:21.000
你不能写0

15:21.000 --> 15:23.000
您认识任何数

15:23.000 --> 15:24.000
那么我们这个循环

15:24.000 --> 15:25.000
范围是多少

15:25.000 --> 15:27.000
是不是从2开始的

15:27.000 --> 15:29.000
2开始的

15:29.000 --> 15:30.000
小一多

15:30.000 --> 15:31.000
到多少

15:31.000 --> 15:32.000
到这个数

15:32.000 --> 15:33.000
对吧

15:33.000 --> 15:34.000
某个数的阶层

15:34.000 --> 15:35.000
哪个数呢

15:35.000 --> 15:36.000
你就随便写个n

15:36.000 --> 15:38.000
那么到这个数n

15:38.000 --> 15:40.000
那么我们就小一点点解

15:40.000 --> 15:41.000
小一点点n

15:41.000 --> 15:43.000
这样子我改了n

15:43.000 --> 15:44.000
下边单码不用动

15:44.000 --> 15:45.000
它自动就可以完成了

15:45.000 --> 15:46.000
哎呀

15:47.000 --> 15:49.000
是不是就可以从2

15:49.000 --> 15:50.000
到n之间进行循环

15:50.000 --> 15:51.000
有些同学只能看懂

15:51.000 --> 15:52.000
这里是写的字面量

15:52.000 --> 15:54.000
写字面量我能看懂

15:54.000 --> 15:55.000
一写表达式

15:55.000 --> 15:56.000
一写变量就看不懂了

15:56.000 --> 15:57.000
不一样的

15:57.000 --> 15:58.000
任何数据的地方

15:58.000 --> 15:59.000
是不是都可以写

15:59.000 --> 16:01.000
字面量表达式和变量

16:01.000 --> 16:02.000
对吧

16:02.000 --> 16:03.000
就把变量的值度

16:03.000 --> 16:04.000
再放这儿

16:04.000 --> 16:05.000
n是多少

16:05.000 --> 16:07.000
二运行一次

16:07.000 --> 16:08.000
三运行一次

16:08.000 --> 16:09.000
四运行一次

16:09.000 --> 16:10.000
五运行一次

16:10.000 --> 16:11.000
每一次运行

16:11.000 --> 16:13.000
是不是乘等于

16:13.000 --> 16:14.000
如果说你乘等于

16:14.000 --> 16:15.000
看不懂的话

16:15.000 --> 16:17.000
就等于result乘以

16:17.000 --> 16:19.000
i

16:19.000 --> 16:20.000
对吧

16:20.000 --> 16:22.000
这就是个哪层嘛

16:22.000 --> 16:23.000
刚才是哪家

16:23.000 --> 16:24.000
这是哪层

16:24.000 --> 16:26.000
最多我们叔叔的result

16:26.000 --> 16:28.000
就120

16:28.000 --> 16:30.000
这是球阶层

16:30.000 --> 16:31.000
好

16:31.000 --> 16:32.000
接下来

16:32.000 --> 16:34.000
数组球合

16:34.000 --> 16:35.000
区别在哪了

16:35.000 --> 16:36.000
我也不知道有啥区别

16:36.000 --> 16:37.000
你写一些吧

16:37.000 --> 16:38.000
我们这里有个数组

16:38.000 --> 16:40.000
随便写一些值

16:40.000 --> 16:41.000
有一个数组

16:41.000 --> 16:42.000
那么我们就是

16:42.000 --> 16:44.000
五分就把第一个数拿出来加上

16:44.000 --> 16:46.000
加到还是纸上一开始是0

16:46.000 --> 16:47.000
对吧

16:47.000 --> 16:48.000
23

16:48.000 --> 16:49.000
43

16:49.000 --> 16:50.000
7

16:50.000 --> 16:51.000
14

16:51.000 --> 16:52.000
15

16:52.000 --> 16:53.000
把数组的第一项拿出来

16:53.000 --> 16:54.000
加到纸上

16:54.000 --> 16:55.000
再把这纸上

16:55.000 --> 16:57.000
跟第二项数相加

16:57.000 --> 16:58.000
对吧

16:58.000 --> 16:59.000
就是66

16:59.000 --> 17:00.000
然后再把纸上的

17:00.000 --> 17:01.000
跟它相加

17:01.000 --> 17:03.000
是不是其实不一样的嘛

17:03.000 --> 17:05.000
一个电量0

17:05.000 --> 17:06.000
然后循环

17:06.000 --> 17:07.000
一个人在这里搞不懂了

17:07.000 --> 17:09.000
那个我怎么循环

17:09.000 --> 17:10.000
23到15呢

17:10.000 --> 17:13.000
中间又是跳跃的怎么循环呢

17:13.000 --> 17:14.000
兄弟

17:14.000 --> 17:17.000
你前面你咋循环数组的

17:17.000 --> 17:18.000
你咋循环数组的

17:18.000 --> 17:20.000
是不是通过下标来循环

17:20.000 --> 17:22.000
它下标的范围不就是0到

17:22.000 --> 17:25.000
小渔内是减1嘛

17:25.000 --> 17:27.000
我这里五分就是

17:27.000 --> 17:28.000
i等于0的时候

17:28.000 --> 17:29.000
下标等于0的时候

17:29.000 --> 17:30.000
运行一次

17:30.000 --> 17:31.000
下标等于1的时候运行一次

17:31.000 --> 17:33.000
一直到循环到最大下标

17:33.000 --> 17:34.000
那么每一次

17:34.000 --> 17:36.000
我是不是可以把数组的数取出来

17:36.000 --> 17:38.000
通过的i是不是把取出来

17:38.000 --> 17:39.000
下标

17:39.000 --> 17:40.000
对不对

17:40.000 --> 17:41.000
不就是取出来了嘛

17:41.000 --> 17:42.000
当然你

17:42.000 --> 17:44.000
这是一个表达式的方式来取

17:44.000 --> 17:46.000
你也可以把它保存到变量里面

17:46.000 --> 17:48.000
可以把它保存到变量里面

17:48.000 --> 17:50.000
每一次保存到变量里面

17:50.000 --> 17:51.000
都可以啊

17:51.000 --> 17:54.000
无论我这一点也没有什么好保存的

17:55.000 --> 17:57.000
加等于是不是可以了

17:57.000 --> 17:59.000
我加的不是i

17:59.000 --> 18:00.000
i是什么下标

18:00.000 --> 18:01.000
我加的是

18:01.000 --> 18:03.000
通过这个下标取出了一个数组的值

18:03.000 --> 18:05.000
第一项23取出来

18:05.000 --> 18:06.000
i等于1的时候

18:06.000 --> 18:08.000
第二项43取出来

18:08.000 --> 18:09.000
对吧

18:09.000 --> 18:11.000
好 最后我们输出一下

18:11.000 --> 18:12.000
当然我们也可以利用

18:12.000 --> 18:14.000
我们这些和开始讲的那个

18:16.000 --> 18:18.000
开始讲的那个就是

18:18.000 --> 18:19.000
断点调式

18:19.000 --> 18:20.000
断点打到这儿

18:20.000 --> 18:21.000
然后每一次把它带满运行一点

18:21.000 --> 18:23.000
好 我们来看一下吧

18:24.000 --> 18:25.000
运行到这儿吧

18:25.000 --> 18:26.000
就打到这儿吧

18:26.000 --> 18:28.000
运行

18:28.000 --> 18:29.000
弄了解释

18:30.000 --> 18:32.000
好 我们可以看到

18:33.000 --> 18:35.000
因为这里没有这个new numbers

18:35.000 --> 18:37.000
我就把监视全部删了

18:37.000 --> 18:38.000
我就看变量吧

18:39.000 --> 18:41.000
一看这个上吧 就看这个上

18:41.000 --> 18:43.000
然后我点

18:43.000 --> 18:44.000
运行到下一个断点

18:44.000 --> 18:45.000
一开始是0嘛 对吧

18:45.000 --> 18:46.000
一开始是0

18:46.000 --> 18:47.000
我把它拖动一下

18:47.000 --> 18:48.000
一开始是0

18:48.000 --> 18:50.000
然后这句话运行完了过后

18:50.000 --> 18:52.000
就变成23了 23

18:52.000 --> 18:54.000
再加上43是不是66

18:54.000 --> 18:55.000
再加上7

18:55.000 --> 18:56.000
你看这儿

18:56.000 --> 18:57.000
再加上73

18:57.000 --> 18:58.000
再加上

18:58.000 --> 18:59.000
变74

18:59.000 --> 19:00.000
再加

19:00.000 --> 19:01.000
所以78

19:02.000 --> 19:03.000
再加

19:03.000 --> 19:04.000
就结束了

19:04.000 --> 19:05.000
就120

19:06.000 --> 19:08.000
好吧 这就是这个球合

19:08.000 --> 19:09.000
数组球合

19:10.000 --> 19:12.000
好 接下一个

19:12.000 --> 19:15.000
球数组中的基数的个数

19:15.000 --> 19:16.000
它不是球合

19:16.000 --> 19:17.000
它球个数

19:18.000 --> 19:20.000
而且只球基数的个数

19:20.000 --> 19:22.000
就数组中有多少个基数

19:22.000 --> 19:23.000
比方说这个数组

19:23.000 --> 19:25.000
在数组里面随便去

19:25.000 --> 19:26.000
就这个数组

19:26.000 --> 19:27.000
这个数组中有多少个基数

19:27.000 --> 19:30.000
一 二 三 四 五个

19:30.000 --> 19:31.000
有五个基数

19:32.000 --> 19:36.000
球个数有怎么球呢

19:36.000 --> 19:38.000
你们是怎么球个数的

19:38.000 --> 19:40.000
你们怎么球个数的

19:40.000 --> 19:42.000
比方说这一般这么多同学

19:42.000 --> 19:44.000
我要知道有几个女生

19:44.000 --> 19:46.000
来 拍一盘站好

19:46.000 --> 19:48.000
第一个看一下 不是

19:48.000 --> 19:49.000
第二个看一下 不是

19:49.000 --> 19:50.000
第三个

19:50.000 --> 19:51.000
有一个了

19:51.000 --> 19:53.000
我心里边一开始是0

19:53.000 --> 19:54.000
我就记得1

19:54.000 --> 19:55.000
我心里边想1

19:55.000 --> 19:56.000
然后接下来

19:56.000 --> 19:57.000
数到一个女生我就加1

19:57.000 --> 19:58.000
数到一个女生就加1

19:58.000 --> 19:59.000
对吧 我就记数了

19:59.000 --> 20:01.000
就是个球个数

20:02.000 --> 20:03.000
那你打一张纸出来

20:03.000 --> 20:04.000
是不是也可以

20:04.000 --> 20:05.000
纸上先写个0

20:05.000 --> 20:07.000
看到一个满足条件的就加1

20:07.000 --> 20:08.000
看到一个满足条件的就加1

20:08.000 --> 20:09.000
那这里是一样的

20:09.000 --> 20:10.000
那个纸是啥

20:10.000 --> 20:12.000
那个纸就是一个变量

20:12.000 --> 20:13.000
cult

20:13.000 --> 20:14.000
我们一般用这个单词

20:14.000 --> 20:17.000
cult表示总数

20:17.000 --> 20:20.000
或者要偷透总数

20:20.000 --> 20:21.000
或者要cult

20:21.000 --> 20:23.000
一般就表示技术的意思

20:23.000 --> 20:24.000
总数

20:24.000 --> 20:25.000
当然一开始

20:25.000 --> 20:26.000
还没有开始找

20:26.000 --> 20:27.000
对吧 肯定是0

20:27.000 --> 20:28.000
所以我们现在有一个数

20:28.000 --> 20:29.000
一个数拿出来看

20:29.000 --> 20:30.000
就是数组的便利

20:30.000 --> 20:33.000
数组的便利真的是无处不善

20:33.000 --> 20:34.000
真的要写2

20:34.000 --> 20:35.000
以后得有代码

20:35.000 --> 20:37.000
以后很多很多地方

20:37.000 --> 20:39.000
都要写数组便利

20:40.000 --> 20:41.000
对吧

20:41.000 --> 20:42.000
来吧 我们一个

20:42.000 --> 20:44.000
我们总数一开始是0

20:44.000 --> 20:45.000
找到一个

20:45.000 --> 20:46.000
就一个个看

20:46.000 --> 20:47.000
这里要做什么

20:47.000 --> 20:49.000
看一下

20:50.000 --> 20:51.000
i

20:51.000 --> 20:52.000
看得到这个数字

20:52.000 --> 20:53.000
不是看i

20:53.000 --> 20:54.000
i是下标

20:54.000 --> 20:55.000
看这个数字

20:55.000 --> 20:57.000
是不是技术

20:57.000 --> 20:59.000
是不是技术

20:59.000 --> 21:02.000
如果是cult加1

21:02.000 --> 21:04.000
对吧 加1

21:04.000 --> 21:06.000
所以说这个字怎么写呢

21:06.000 --> 21:07.000
那还不是个判断

21:07.000 --> 21:08.000
那么是i是不是技术

21:08.000 --> 21:09.000
是不是写过的

21:09.000 --> 21:11.000
除一二的余数不等于0

21:12.000 --> 21:13.000
没有余数

21:13.000 --> 21:15.000
除一二 不能被人认出

21:15.000 --> 21:16.000
那么这样就他是个技术

21:16.000 --> 21:18.000
他是个技术怎么样呢

21:19.000 --> 21:20.000
cult加1

21:21.000 --> 21:24.000
这样子循环结束之后

21:24.000 --> 21:26.000
一定要等到循环结束之后

21:26.000 --> 21:27.000
因为循环都没有结束

21:27.000 --> 21:29.000
他还没有看完

21:29.000 --> 21:30.000
你这个班农同学

21:30.000 --> 21:31.000
只看了一半

21:31.000 --> 21:33.000
你怎么知道有多少个女生

21:33.000 --> 21:35.000
所以你要看完了之后

21:35.000 --> 21:36.000
然后我们来看一下

21:36.000 --> 21:37.000
最终

21:37.000 --> 21:39.000
这个上面写的是多少

21:39.000 --> 21:40.000
有五个

21:40.000 --> 21:41.000
那就是五个

21:41.000 --> 21:43.000
再加一个3

21:43.000 --> 21:45.000
那就是六个

21:45.000 --> 21:47.000
对 就是技术

21:47.000 --> 21:49.000
求数量

21:49.000 --> 21:51.000
好 又来

21:51.000 --> 21:53.000
求数字中的技术和

21:54.000 --> 21:55.000
同学们 这道题

21:55.000 --> 21:56.000
能不能不听我讲

21:56.000 --> 21:58.000
你们自己做一下

21:59.000 --> 22:01.000
我觉得前面能理解的话

22:01.000 --> 22:04.500
这一块应该没有什么问题

22:04.500 --> 22:05.500
有什么问题

22:05.500 --> 22:06.500
他跟他前面

22:06.500 --> 22:07.500
数组求和有什么

22:07.500 --> 22:09.500
有多大的区别呢

22:09.500 --> 22:10.500
他无论就是求技术和

22:10.500 --> 22:11.500
对吧

22:11.500 --> 22:12.500
那你说我不是

22:12.500 --> 22:14.500
每一项都要加到这个纸上去

22:14.500 --> 22:16.500
我纸上只加什么

22:16.500 --> 22:17.500
只加技术

22:17.500 --> 22:19.500
所以加个判断就完了没

22:19.500 --> 22:21.500
主要的余数不等于零

22:22.500 --> 22:24.500
那么把这一项加进去

22:24.500 --> 22:25.500
当然了也可以

22:25.500 --> 22:26.500
先把它保存到

22:26.500 --> 22:28.500
你觉得后面表达是用了两次

22:28.500 --> 22:30.500
有点庸重的代码

22:30.500 --> 22:31.500
那么我们可以先把它保存到

22:31.500 --> 22:32.500
变量里面

22:32.500 --> 22:33.500
一个临时变量里面

22:33.500 --> 22:34.500
然后用后面

22:34.500 --> 22:36.500
就使用那个变量来提一换

22:36.500 --> 22:37.500
都可以

22:37.500 --> 22:40.390
求技术和

22:40.390 --> 22:43.020
没了

22:43.020 --> 22:45.020
这是第三题

22:45.020 --> 22:50.490
第四大题

22:50.490 --> 22:51.490
不要听完了

22:51.490 --> 22:52.490
再去做

22:52.490 --> 22:54.490
听一道题就做一道题

22:54.490 --> 22:56.490
一道题一道题

22:56.490 --> 22:58.490
一道题把它搞清楚

22:58.490 --> 23:00.490
数组中

23:00.490 --> 23:03.490
是否存在某个数

23:03.490 --> 23:05.490
这种题叫查造问题

23:05.490 --> 23:07.490
查造问题是特别容易出问题的

23:07.490 --> 23:09.490
我要的是输出是

23:09.490 --> 23:11.490
或者是否

23:11.490 --> 23:13.490
你告诉我是

23:13.490 --> 23:14.490
存在就是是

23:14.490 --> 23:15.490
你给我输出一个字

23:15.490 --> 23:16.490
是

23:16.490 --> 23:18.490
不存在就是否

23:18.490 --> 23:20.490
这要查造问题

23:20.490 --> 23:23.490
有个东西到底存不存在

23:23.490 --> 23:24.490
那么这种问题怎么做呢

23:24.490 --> 23:26.490
我们模拟一下

23:26.490 --> 23:28.490
比方说邓哥的高中同学

23:28.490 --> 23:30.490
今天集体

23:30.490 --> 23:33.490
做了一辆火车过来

23:33.490 --> 23:35.490
那么现在呢

23:35.490 --> 23:36.490
但是高中同学

23:36.490 --> 23:38.490
可能跟邓哥没有联系上

23:38.490 --> 23:40.490
邓哥在街站

23:40.490 --> 23:41.490
那么他要在火车上

23:41.490 --> 23:43.490
一节车厢一节车厢去找

23:43.490 --> 23:44.490
看一下这辆火车上

23:44.490 --> 23:47.490
有没有他的高中同学

23:47.490 --> 23:48.490
那么这个时候

23:48.490 --> 23:50.490
他怎么找呢

23:50.490 --> 23:51.490
怎么找呢

23:51.490 --> 23:53.490
他只能从第一节车厢开始看

23:53.490 --> 23:54.490
对吧

23:54.490 --> 23:55.490
比方说这里有很多的节车厢

23:55.490 --> 23:57.490
第一节 第二节

23:57.490 --> 23:59.490
第三节 第四节

23:59.490 --> 24:00.490
比方说有五节车厢吗

24:00.490 --> 24:01.490
他也不知道

24:01.490 --> 24:03.490
他的同学在哪节车厢里面

24:03.490 --> 24:04.490
他要找

24:04.490 --> 24:05.490
那他怎么找呢

24:05.490 --> 24:07.490
他看第一节车厢

24:07.490 --> 24:09.490
第一节车厢里面

24:09.490 --> 24:11.490
有没有我的同学

24:11.490 --> 24:18.720
如果说第一节车厢没有

24:18.720 --> 24:20.720
第一节车厢如果说没有

24:20.720 --> 24:21.720
是不是继续找

24:21.720 --> 24:22.720
不能停啊

24:22.720 --> 24:24.720
你后面车厢都没看啊

24:24.720 --> 24:25.720
是不是不能停

24:25.720 --> 24:26.720
还得继续往后看

24:26.720 --> 24:28.720
第二节车厢也没有

24:28.720 --> 24:29.720
继续找

24:29.720 --> 24:32.720
其中第三节车厢找到了

24:32.720 --> 24:34.720
同学找到了是吧

24:34.720 --> 24:36.720
所以不再寻找了

24:36.720 --> 24:37.720
要不要少不了

24:37.720 --> 24:38.720
我找到了

24:38.720 --> 24:39.720
等会吧

24:39.720 --> 24:40.720
拿着他同学的手

24:40.720 --> 24:41.720
还是跟女同学

24:41.720 --> 24:42.720
拿着他的手

24:42.720 --> 24:43.720
我们继续看一下

24:43.720 --> 24:44.720
哪都来了

24:44.720 --> 24:46.720
继续看一下后面的两节

24:46.720 --> 24:47.720
疯了嘛对吧

24:47.720 --> 24:48.720
你找都找到了

24:48.720 --> 24:49.720
在这个场景下边

24:49.720 --> 24:50.720
你找都找到了

24:50.720 --> 24:51.720
是不是就结束了

24:51.720 --> 24:52.720
因为我只要

24:52.720 --> 24:53.720
只要一个结果

24:53.720 --> 24:57.720
就是找到还是没找到

24:57.720 --> 24:58.720
是不是就结束了

24:58.720 --> 24:59.720
找到就结束了

24:59.720 --> 25:01.720
那么具体的怎么在做呢

25:01.720 --> 25:02.720
就是我们在这里

25:02.720 --> 25:05.720
准备好这么一个东西

25:05.720 --> 25:06.720
准备好一个变量

25:06.720 --> 25:07.720
或者是一张纸

25:07.720 --> 25:08.720
一开始呢

25:08.720 --> 25:09.720
给他设置

25:09.720 --> 25:11.720
没有找到

25:11.720 --> 25:12.720
一开始是没有找到的

25:12.720 --> 25:13.720
一开始他没找吗

25:13.720 --> 25:15.720
对吧肯定是没有找到

25:15.720 --> 25:16.720
好那接下来开始找

25:16.720 --> 25:18.720
第一节车厢有吗

25:18.720 --> 25:20.720
没有

25:20.720 --> 25:21.720
继续看

25:21.720 --> 25:22.720
第二节车厢有吗

25:22.720 --> 25:23.720
没有

25:23.720 --> 25:24.720
不动

25:24.720 --> 25:25.720
第三节车厢找到了吗

25:25.720 --> 25:26.720
找到了

25:26.720 --> 25:27.720
找到了

25:27.720 --> 25:28.720
马上把这张纸

25:28.720 --> 25:29.720
改成找到了

25:29.720 --> 25:30.720
OK

25:30.720 --> 25:31.720
不再是没有找到了

25:31.720 --> 25:32.720
找到了

25:32.720 --> 25:34.720
结束

25:34.720 --> 25:36.720
最后我只要看这张纸上

25:36.720 --> 25:38.720
画的是钩还是叉

25:38.720 --> 25:39.720
是不是我就能判断

25:39.720 --> 25:40.720
有没有找到

25:40.720 --> 25:41.720
对吧

25:41.720 --> 25:42.720
那这是找到的情况

25:42.720 --> 25:43.720
那我们来看一下

25:43.720 --> 25:44.720
没有找到的情况

25:44.720 --> 25:45.720
第三节车厢也没有

25:45.720 --> 25:46.720
不动

25:46.720 --> 25:47.720
第四节车厢也没有

25:47.720 --> 25:48.720
不动

25:48.720 --> 25:49.720
那找完了

25:49.720 --> 25:50.720
找完了过后

25:50.720 --> 25:51.720
这张纸记录的是没有找到

25:51.720 --> 25:52.720
因为他一最开始就没有找到

25:52.720 --> 25:53.720
找完了过后

25:53.720 --> 25:54.720
都没有改动他

25:54.720 --> 25:56.720
那就还是没有找到

25:56.720 --> 25:58.720
这就是查到问题的做法

25:58.720 --> 25:59.720
那么既然

25:59.720 --> 26:00.720
我们有了这样的一个思路

26:00.720 --> 26:01.720
那就来吧

26:01.720 --> 26:03.720
比方说我们这里一个数组

26:03.720 --> 26:06.290
随便写一个吧

26:06.290 --> 26:10.240
随便写一些

26:10.240 --> 26:12.240
好我们要找的目标

26:12.240 --> 26:13.240
我们要找啥呢

26:13.240 --> 26:14.240
我们要找这个数组

26:14.240 --> 26:17.240
有没有77

26:17.240 --> 26:18.240
寻找这个数组

26:18.240 --> 26:20.240
有没有这个值

26:20.240 --> 26:22.240
那怎么找呢

26:22.240 --> 26:23.240
刚才怎么说的

26:23.240 --> 26:24.240
准备好一张纸

26:24.240 --> 26:25.240
上面要写上

26:25.240 --> 26:27.240
我们一般用ease find

26:27.240 --> 26:29.240
是不是找到了

26:29.240 --> 26:31.240
或者我们用一个

26:31.240 --> 26:32.240
严谨一点的写吧

26:32.240 --> 26:33.240
就放的

26:33.240 --> 26:34.240
对不对

26:34.240 --> 26:37.240
要是过去完成是吧

26:37.240 --> 26:38.240
有没有找到

26:38.240 --> 26:40.240
我习惯了写翻的

26:40.240 --> 26:42.240
我就这样写了

26:42.240 --> 26:44.240
有没有找到

26:44.240 --> 26:45.240
一开始有没有找到

26:45.240 --> 26:46.240
一开始没找了

26:46.240 --> 26:47.240
是不是没有找

26:47.240 --> 26:48.240
没有找的话

26:48.240 --> 26:49.240
就没有找到

26:49.240 --> 26:50.240
我们用个布尔来表示

26:50.240 --> 26:51.240
要么就找到了

26:51.240 --> 26:52.240
要么就没有找到

26:52.240 --> 26:54.240
没有找就没有找到

26:54.240 --> 26:56.240
好那么接下来开始找

26:56.240 --> 26:58.240
是不是又是个便利数组

26:58.240 --> 26:59.240
一项一项拿出来看

26:59.240 --> 27:01.240
便利数组要把你写码

27:01.240 --> 27:08.590
看谁判断

27:08.590 --> 27:12.590
那么数组的这一项

27:12.590 --> 27:14.590
是否满足条件

27:14.590 --> 27:16.590
什么条件你自己想

27:16.590 --> 27:17.590
是否满足条件

27:17.590 --> 27:19.590
如果满足

27:20.590 --> 27:21.590
设置

27:22.590 --> 27:23.590
找到了

27:23.590 --> 27:24.590
结束

27:24.590 --> 27:26.590
没有满足条件

27:26.590 --> 27:28.590
那就继续往后找

27:28.590 --> 27:29.590
对吧

27:29.590 --> 27:31.590
所以说这个代码怎么写

27:31.590 --> 27:32.590
判断

27:32.590 --> 27:33.590
如果说他满足条件

27:33.590 --> 27:35.590
什么叫满足条件

27:35.590 --> 27:37.590
这一项等于这一项

27:37.590 --> 27:38.590
对吧

27:38.590 --> 27:39.590
所以相等

27:39.590 --> 27:44.250
什么等于topic

27:44.250 --> 27:45.250
相等的话

27:45.250 --> 27:46.250
是不是就表示的是

27:46.250 --> 27:48.250
那个他就找到了

27:48.250 --> 27:50.250
找到了的话

27:50.250 --> 27:51.250
设置找了

27:51.250 --> 27:52.250
什么叫设置找到了

27:52.250 --> 27:53.250
把他设置为

27:53.250 --> 27:54.250
这张纸上

27:54.250 --> 27:55.250
意思fan的设为去

27:55.250 --> 27:57.250
这个表示是否找到

27:59.250 --> 28:00.250
找到了过后要干嘛

28:00.250 --> 28:01.250
要结束

28:01.250 --> 28:02.250
break

28:03.250 --> 28:04.250
break可以结束

28:04.250 --> 28:06.250
当前循环

28:06.250 --> 28:07.250
不要再往后边看了

28:07.250 --> 28:08.250
你都找到了

28:08.250 --> 28:09.250
对吧

28:09.250 --> 28:10.250
你还继续往后边看啥

28:10.250 --> 28:12.250
我们只要的是一个结果

28:12.250 --> 28:13.250
有没有找到

28:13.250 --> 28:15.250
除了循环注意

28:15.250 --> 28:16.250
一定是除了循环

28:16.250 --> 28:17.250
这是一个找的过程

28:17.250 --> 28:19.250
一定要等他找完了再说

28:21.250 --> 28:22.250
不管是找到了

28:22.250 --> 28:23.250
退出循环

28:23.250 --> 28:24.250
还是找完了

28:24.250 --> 28:25.250
都没有找到退出循环

28:25.250 --> 28:26.250
不管你怎么样

28:26.250 --> 28:27.250
一定要等他循环结束

28:27.250 --> 28:29.250
然后再来判断

28:29.250 --> 28:31.250
如果easyfan的找到了

28:31.250 --> 28:33.250
有些人在这里必须要写个等于处

28:35.820 --> 28:36.820
这种代码

28:37.820 --> 28:38.820
最好不要这样子写了

28:38.820 --> 28:39.820
真的会被骂的

28:40.820 --> 28:42.820
你这个玩意就是个布尔

28:42.820 --> 28:43.820
就是个布尔

28:43.820 --> 28:44.820
他为处的时候

28:44.820 --> 28:46.820
那这个判断就成立

28:47.820 --> 28:48.820
他为处的时候

28:48.820 --> 28:49.820
判断就成立

28:49.820 --> 28:50.820
他为Force的时候

28:51.820 --> 28:53.820
为什么要写个等于处呢

28:56.700 --> 28:57.700
除非他有其他类型

28:57.700 --> 28:58.700
他不是一个布尔

28:58.700 --> 28:59.700
他可能有其他类型

28:59.700 --> 29:01.700
我们不希望其他类型进入这个衣服

29:02.700 --> 29:03.700
一般来说

29:03.700 --> 29:04.700
就这样子写就行了

29:05.700 --> 29:06.700
如果说找到了

29:06.700 --> 29:07.700
这个代码也好读

29:07.700 --> 29:10.700
如果easyfan的

29:10.700 --> 29:11.700
如果找到了

29:11.700 --> 29:12.700
说明啥

29:12.700 --> 29:13.700
说明就OK了

29:13.700 --> 29:15.700
就输出一个s

29:16.700 --> 29:17.700
l是就没有找到

29:17.700 --> 29:18.700
他就输出for

29:19.700 --> 29:21.700
最后看那张纸上写的是

29:21.700 --> 29:22.700
force

29:23.700 --> 29:24.700
因为只有找到了

29:24.700 --> 29:26.700
他才会把它设为处

29:26.700 --> 29:28.700
否则的话就保持默认值force

29:29.700 --> 29:30.700
这就是一个

29:30.700 --> 29:31.700
查照问题的经典写法

29:32.700 --> 29:33.700
就这样子写

29:33.700 --> 29:34.700
我都知道

29:34.700 --> 29:35.700
同学们这些这种问题

29:36.700 --> 29:37.700
大概率会出在哪

29:38.700 --> 29:39.700
因为我看了太多

29:39.700 --> 29:40.700
太多词了

29:40.700 --> 29:41.700
我都看麻了

29:42.700 --> 29:43.700
会怎么写呢

29:45.700 --> 29:46.700
我给同学说一下

29:46.700 --> 29:47.700
这个错误写法

29:50.020 --> 29:51.020
要不然先来看一下

29:51.020 --> 29:52.020
看一下正确的断点

29:52.020 --> 29:53.020
断点调词

29:53.020 --> 29:54.020
看一下正确的断点

29:55.020 --> 29:56.020
断点的结果

29:57.020 --> 29:58.020
我们来看一下

29:58.020 --> 29:59.020
我们找了目标是77

29:59.020 --> 30:01.020
找的

30:01.020 --> 30:02.020
这个值是361

30:02.020 --> 30:04.020
我们把断点打这吧

30:04.020 --> 30:05.020
运行到下个断点

30:06.020 --> 30:08.020
我们发现当i等于3的时候

30:08.020 --> 30:09.020
easyfan的

30:09.020 --> 30:10.020
一直是force

30:10.020 --> 30:11.020
一直没有找到

30:11.020 --> 30:13.020
当找到第四节车厢

30:13.020 --> 30:14.020
就是i等于3的时候

30:14.020 --> 30:15.020
就找到这

30:15.020 --> 30:16.020
77

30:16.020 --> 30:17.020
这个77

30:17.020 --> 30:19.020
刚好跟我们的talkit

30:19.020 --> 30:20.020
是一样的

30:20.020 --> 30:21.020
talkit是一样的

30:22.020 --> 30:23.020
条件满足

30:23.020 --> 30:24.020
条件满足的话

30:24.020 --> 30:25.020
那么这个时候

30:25.020 --> 30:26.020
你看

30:26.020 --> 30:27.020
他就把easyfan的

30:27.020 --> 30:28.020
设为q

30:28.020 --> 30:29.020
你还是不是变成q了

30:29.020 --> 30:31.020
然后break结束循环

30:31.020 --> 30:32.020
不再往后边找了

30:32.020 --> 30:34.020
其实后边23不看了

30:34.020 --> 30:35.020
没有必要看了

30:36.020 --> 30:37.020
有什么必要看了

30:37.020 --> 30:38.020
当然你看的话

30:38.020 --> 30:40.020
除了浪费时间之外

30:40.020 --> 30:41.020
也没有什么影响

30:41.020 --> 30:42.020
也不会影响什么

30:42.020 --> 30:44.020
然后最后呢

30:44.020 --> 30:45.020
就结束循环了

30:45.020 --> 30:46.020
然后最后我们判断

30:46.020 --> 30:47.020
easyfan的为q

30:47.020 --> 30:49.020
然后就输出一个事

30:49.020 --> 30:50.020
就是找到的情况

30:50.020 --> 30:51.020
然后我们来看一下

30:51.020 --> 30:52.020
没有找到的情况

30:52.020 --> 30:53.020
就要在这里等我

30:53.020 --> 30:54.020
我们找的目标

30:54.020 --> 30:56.020
不是77是11

30:56.020 --> 30:57.020
假设

30:57.020 --> 30:58.020
我们

30:58.020 --> 30:59.020
起到这吧

31:01.840 --> 31:03.840
我们把这里打两个断点

31:03.840 --> 31:04.840
然后我们来运行

31:04.840 --> 31:05.840
等一下

31:09.180 --> 31:10.180
我刚刚讲了

31:11.180 --> 31:12.180
我们断点打这两个

31:12.180 --> 31:13.180
然后运行

31:15.180 --> 31:16.180
好丽慧发现

31:16.180 --> 31:17.180
他前面的断点没有进

31:17.180 --> 31:18.180
说明啥

31:18.180 --> 31:19.180
说明整个循环过程

31:19.180 --> 31:20.180
都没有进入这个判断

31:20.180 --> 31:21.180
对吧

31:21.180 --> 31:22.180
一个都没有找到

31:22.180 --> 31:23.180
完了

31:23.180 --> 31:24.180
都没找到

31:24.180 --> 31:25.180
最后iD等于5了

31:25.180 --> 31:26.180
对吧

31:26.180 --> 31:27.180
也不满足条件

31:27.180 --> 31:28.180
说明之前的找

31:28.180 --> 31:29.180
有没有找啊

31:29.180 --> 31:30.180
找都找了

31:30.180 --> 31:31.180
这个判断进不去

31:31.180 --> 31:32.180
进不去的话

31:32.180 --> 31:33.180
是不是一直保持

31:33.180 --> 31:34.180
保持默认值

31:34.180 --> 31:35.180
一直force

31:35.180 --> 31:36.180
所以说最后呢

31:36.180 --> 31:37.180
判断进不去

31:37.180 --> 31:38.180
他就进入l10

31:38.180 --> 31:39.180
就输出否

31:39.180 --> 31:40.180
这就是一个

31:40.180 --> 31:41.180
经济的炒造问题

31:41.180 --> 31:42.180
好好去梳理一下

31:42.180 --> 31:47.470
然后我再说错误的写法

31:47.470 --> 31:48.470
错误的写法

31:48.470 --> 31:49.470
就下边这种写法

31:49.470 --> 31:51.470
下边是错误的写法

31:52.470 --> 31:53.470
这种错误

31:53.470 --> 31:54.470
因为现在太多次了

31:55.470 --> 31:57.470
就是不受到这个变量

31:57.470 --> 31:58.470
然后呢

31:58.470 --> 31:59.470
这里没有判断

32:00.470 --> 32:01.470
非常简单的这个写法

32:01.470 --> 32:03.470
就在这里输出4

32:03.470 --> 32:06.620
l4

32:06.620 --> 32:07.620
输出否

32:07.620 --> 32:08.620
我跟同学

32:08.620 --> 32:09.620
模拟一下

32:09.620 --> 32:10.620
他是怎么想的

32:10.620 --> 32:11.620
一开始都没有这个break

32:11.620 --> 32:12.620
结果呢

32:12.620 --> 32:13.620
一运行

32:13.620 --> 32:15.620
他就给我输出5个否

32:15.620 --> 32:16.620
发现输出了太多了

32:16.620 --> 32:18.620
于是他在这里加了一个break

32:19.620 --> 32:20.620
然后呢在这里呢

32:20.620 --> 32:21.620
去输出了一个

32:21.620 --> 32:23.620
比方说早77找到了

32:24.620 --> 32:25.620
他还是输出否

32:25.620 --> 32:26.620
于是他在这里

32:26.620 --> 32:28.620
搞清楚为什么他在想想

32:28.620 --> 32:29.620
这里加个break

32:29.620 --> 32:31.620
我都见到无数次的东西

32:33.620 --> 32:34.620
那这种是怎么

32:34.620 --> 32:35.620
他是怎么找的呢

32:35.620 --> 32:36.620
这个代码他是有含义的

32:36.620 --> 32:37.620
每句代码都是有含义的

32:38.620 --> 32:39.620
他是怎么找的呢

32:39.620 --> 32:40.620
你看啊

32:40.620 --> 32:41.620
这个代码表示什么意思

32:42.620 --> 32:44.620
我先把break去掉

32:44.620 --> 32:45.620
看一下表示什么意思

32:46.620 --> 32:47.620
来吧

32:47.620 --> 32:51.310
有五节车厢

32:51.310 --> 32:52.310
这是顿哥去找人

32:53.310 --> 32:54.310
一二三

32:54.310 --> 32:55.310
哎呦

32:55.310 --> 32:56.310
这个画的还真不容易画

32:56.310 --> 32:57.310
这样子吧

32:58.310 --> 32:59.310
有一张纸

33:00.310 --> 33:01.310
这张纸上呢

33:01.310 --> 33:02.310
先记录是

33:03.310 --> 33:04.310
没有找到

33:06.310 --> 33:07.310
好 接下来

33:07.310 --> 33:08.310
没有这张纸

33:08.310 --> 33:09.310
纸都没有

33:09.310 --> 33:10.310
这个写法没有这张纸

33:10.310 --> 33:12.310
好 那么就直接开始找

33:12.310 --> 33:14.310
找第1个看有人吗

33:14.310 --> 33:15.310
比方说77

33:15.310 --> 33:16.310
有人吗

33:16.310 --> 33:17.310
第1个能找到了吗

33:17.310 --> 33:18.310
找不到

33:19.310 --> 33:20.310
好 第1次找不到

33:21.310 --> 33:22.310
是不是进入要事了

33:23.310 --> 33:24.310
进入要事了没

33:24.310 --> 33:25.310
是不是进入要事了

33:26.310 --> 33:27.310
我就输出了否

33:27.310 --> 33:29.310
也就是我看了第1节车厢

33:29.310 --> 33:31.310
顿哥是个急性子

33:31.310 --> 33:32.310
他看了第1节车厢

33:32.310 --> 33:33.310
没有

33:33.310 --> 33:34.310
马上输出一个否

33:34.310 --> 33:35.310
那么这个否表示什么意思

33:35.310 --> 33:37.310
表示第1节车厢没有

33:38.310 --> 33:39.310
好

33:39.310 --> 33:40.310
循环停没

33:40.310 --> 33:41.310
没停 继续

33:42.310 --> 33:43.310
接下来看第2节车厢

33:43.310 --> 33:44.310
第2节车厢也不是

33:44.310 --> 33:45.310
它是6嘛

33:45.310 --> 33:46.310
对吧

33:46.310 --> 33:47.310
说第2节车厢也不是

33:47.310 --> 33:48.310
也不是的话

33:48.310 --> 33:49.310
也进入要事

33:49.310 --> 33:50.310
他又输出一个否

33:50.310 --> 33:51.310
就输出了两个否了

33:51.310 --> 33:53.310
表示第2节车厢没有

33:53.310 --> 33:55.310
这个代码其实有含义的

33:55.310 --> 33:58.310
它是输出每1节车厢的查到结果

33:58.310 --> 34:00.310
但是它没有得到最终的查到结果

34:00.310 --> 34:01.310
好

34:01.310 --> 34:03.310
第3节车厢有吗没有

34:03.310 --> 34:04.310
那又再输出一个否

34:04.310 --> 34:06.310
就输出三个否了

34:06.310 --> 34:07.310
第4节车厢有吗

34:07.310 --> 34:08.310
第4节车厢有

34:08.310 --> 34:12.310
于是就输出一个是

34:12.310 --> 34:13.310
表示第4节车厢有

34:13.310 --> 34:16.310
然后接下来第5节车厢有吗没有

34:16.310 --> 34:17.310
那就输出否

34:17.310 --> 34:20.310
所以就输出否否是否

34:20.310 --> 34:21.310
好 咱们看一下

34:21.310 --> 34:25.390
这变成这样的一个逻辑了

34:26.390 --> 34:28.390
这个逻辑问题在哪呢

34:28.390 --> 34:30.390
这个逻辑的问题又在于

34:30.390 --> 34:32.390
你找了一个车厢没有

34:32.390 --> 34:35.390
你不能说明整个火车没有

34:35.390 --> 34:37.390
你不要那么着急输出这个否

34:37.390 --> 34:39.390
而我的要求是什么

34:39.390 --> 34:41.390
我的要求是整个火车没有

34:41.390 --> 34:43.390
你才能输出这个否

34:43.390 --> 34:45.390
你找了1节都没看完

34:45.390 --> 34:48.390
所以一定要等查到结束之后

34:48.390 --> 34:50.390
你再来看这个结果

34:50.390 --> 34:51.390
你在查到的过程中

34:51.390 --> 34:52.390
你都没有找完

34:52.390 --> 34:54.390
你怎么能确定结果呢

34:56.390 --> 34:57.390
对不对 是没有这个道理

34:57.390 --> 34:59.390
所以为什么要这个变量一直犯的

34:59.390 --> 35:02.390
就是要记录一个最终结果

35:03.390 --> 35:06.390
最终我们看的是这个章指上的结果

35:06.390 --> 35:07.390
就这么个原因

35:07.390 --> 35:09.390
好 那就说加上break

35:09.390 --> 35:11.390
你不要去乱加代码

35:11.390 --> 35:13.390
加上break行不行

35:13.390 --> 35:14.390
好 咱们来看一下

35:14.390 --> 35:15.390
加上break

35:15.390 --> 35:18.390
这里加上break

35:18.390 --> 35:19.390
那这个代码

35:19.390 --> 35:22.390
我都觉得都不需要循环了

35:22.390 --> 35:24.390
第1节车厢有没有没有

35:25.390 --> 35:27.390
第1节车厢没有

35:27.390 --> 35:28.390
没有的话

35:28.390 --> 35:29.390
能进这个衣服吗

35:29.390 --> 35:30.390
进不去

35:30.390 --> 35:31.390
那就进入else了

35:31.390 --> 35:32.390
就输出否

35:32.390 --> 35:34.390
好 结束了

35:34.390 --> 35:35.390
灯哥转上去跑了

35:35.390 --> 35:37.390
他的同学可能在第3节车厢在等他

35:37.390 --> 35:39.390
灯哥就转上跑了

35:39.390 --> 35:40.390
没有

35:40.390 --> 35:41.390
他说看着第1节车厢已经没有

35:41.390 --> 35:42.390
他就不想了

35:42.390 --> 35:43.390
后面看了

35:43.390 --> 35:44.390
是不是偷懒了

35:44.390 --> 35:45.390
那这个更很多

35:45.390 --> 35:46.390
直接就结束了

35:46.390 --> 35:47.390
你后面车厢找都不找了

35:47.390 --> 35:48.390
那是呢

35:48.390 --> 35:49.390
你说这种情况

35:49.390 --> 35:50.390
什么时候输出是

35:50.390 --> 35:52.390
刚好第1节车厢

35:52.390 --> 35:53.390
刚好就找了他同学了

35:53.390 --> 35:55.390
那就输出是

35:56.390 --> 35:57.390
那这个是找了什么

35:57.390 --> 35:59.390
后边车厢是不是没用啊

35:59.390 --> 36:00.390
后边的车厢

36:00.390 --> 36:01.390
只找到第1个车厢

36:01.390 --> 36:02.390
所以一个代码

36:02.390 --> 36:03.390
你如果说代码这样子写的话

36:03.390 --> 36:05.390
就等同于

36:05.390 --> 36:11.390
等同于代码是这样子写的

36:11.390 --> 36:14.900
你就看了第1节车厢

36:14.900 --> 36:15.900
知道了

36:15.900 --> 36:17.900
所以你写不写循环都无所谓

36:18.900 --> 36:19.900
这是一错误的写法

36:19.900 --> 36:21.900
给大家见识一下

36:22.900 --> 36:24.900
好 第二题

36:25.900 --> 36:28.900
苏祖中是否存在某个书

36:28.900 --> 36:29.900
如果存在

36:29.900 --> 36:31.900
则输出他所在的下标

36:31.900 --> 36:32.900
如果不存在

36:32.900 --> 36:34.900
则输出负一

36:34.900 --> 36:35.900
是不是也是查到问题

36:36.900 --> 36:37.900
不过这个时候呢

36:37.900 --> 36:40.900
我要的不管不仅是找没找到

36:40.900 --> 36:42.900
我还要输出他所在的下标

36:43.900 --> 36:44.900
那怎么来找呢

36:45.900 --> 36:46.900
其实也一样的

36:46.900 --> 36:48.900
道理也是一样的

36:48.900 --> 36:49.900
有几节车厢嘛

36:49.900 --> 36:50.900
然后就写三节嘛

36:50.900 --> 36:52.900
我就不想话多了

36:52.900 --> 36:53.900
这一开始

36:53.900 --> 36:54.900
我们之前用的是什么

36:54.900 --> 36:56.900
用的是布尔来记录找没找到

36:56.900 --> 36:57.900
对不对

36:58.900 --> 36:59.900
那我现在用什么记录

36:59.900 --> 37:01.900
我现在就用负一来记录

37:01.900 --> 37:02.900
一开始没有找到嘛

37:02.900 --> 37:03.900
没有找到就是不存在了

37:03.900 --> 37:05.900
不存在就是负一嘛

37:05.900 --> 37:07.900
找第1个没找到

37:07.900 --> 37:08.900
不动

37:08.900 --> 37:09.900
找第2个找到了

37:09.900 --> 37:10.900
找第2个找到了

37:10.900 --> 37:11.900
我就把第2个下标

37:11.900 --> 37:12.900
下标是不是1

37:12.900 --> 37:14.900
把负一改成1

37:14.900 --> 37:16.900
结束寻找

37:16.900 --> 37:17.900
那么最后在这里记录的

37:17.900 --> 37:19.900
不就是这个下标吗

37:19.900 --> 37:21.900
是不是就是这个道理嘛

37:21.900 --> 37:23.900
写法是一样的

37:23.900 --> 37:25.900
要学会变通啊

37:25.900 --> 37:27.900
咱们程序是特别特别灵活的

37:27.900 --> 37:32.620
好然后找这个

37:32.620 --> 37:34.620
意志粉就不是意志粉的了啊

37:34.620 --> 37:35.620
写的是什么呢

37:35.620 --> 37:36.620
写的是

37:37.620 --> 37:38.620
indexed

37:39.620 --> 37:40.620
下标

37:40.620 --> 37:42.620
默认是负一

37:42.620 --> 37:43.620
对吧

37:43.620 --> 37:45.620
找到了下标

37:45.620 --> 37:47.620
下标

37:48.620 --> 37:51.620
负一表示没有找到

37:51.620 --> 37:53.620
好那为叛徒条件吗

37:53.620 --> 37:54.620
找到了

37:54.620 --> 37:55.620
那干嘛呀

37:55.620 --> 37:56.620
就把他的indexed

37:56.620 --> 37:57.620
设为什么

37:57.620 --> 37:58.620
设为i

37:58.620 --> 37:59.620
那么这一项不就是

37:59.620 --> 38:01.620
i不就是他的下标吗

38:01.620 --> 38:02.620
这一项是满足要求的

38:02.620 --> 38:03.620
那么i就是下标

38:03.620 --> 38:04.620
给他复制过去

38:04.620 --> 38:05.620
然后结束

38:05.620 --> 38:06.620
不用找了对吧

38:06.620 --> 38:11.210
所以不用找了

38:11.210 --> 38:12.210
好然后呢

38:12.210 --> 38:14.210
我们这里输出

38:14.210 --> 38:16.210
最后输出一个indexed

38:16.210 --> 38:19.100
就可以了

38:19.100 --> 38:21.100
目前11没有找到

38:21.100 --> 38:23.100
那6呢

38:23.100 --> 38:24.100
1对吧

38:24.100 --> 38:25.100
下标为1

38:25.100 --> 38:28.920
对不对

38:28.920 --> 38:29.920
当然我这个代码呢

38:29.920 --> 38:30.920
是找的是

38:30.920 --> 38:31.920
第一个满足条件的下标

38:31.920 --> 38:33.920
那如果有多个满足条件的呢

38:33.920 --> 38:34.920
后边也没管了啊

38:34.920 --> 38:36.920
后边也没管了

38:37.920 --> 38:39.920
那同学们可以自行思考一下

38:39.920 --> 38:40.920
如果说我要输出

38:40.920 --> 38:45.000
所有的下标一个怎么办

38:45.000 --> 38:46.000
如果说我要输出

38:46.000 --> 38:48.000
所有下标怎么办

38:48.000 --> 38:50.000
我还是写一写呗

38:50.000 --> 38:53.460
好我要

38:53.460 --> 38:54.460
如果说要输出所有下标

38:54.460 --> 38:55.460
那就不能用

38:55.460 --> 38:58.460
负一代表示没有找到了

38:58.460 --> 38:59.460
我这个下标

38:59.460 --> 39:00.460
是不是要得是一个数组啊

39:00.460 --> 39:01.460
对吧

39:01.460 --> 39:02.460
我一个下标

39:02.460 --> 39:03.460
就是一个数组

39:03.460 --> 39:05.460
我要进入所有的下标啊

39:05.460 --> 39:06.460
那所谓的是不是有很多个呀

39:06.460 --> 39:07.460
他有可能有很多个嘛

39:07.460 --> 39:09.460
那只能是一个数组

39:09.460 --> 39:10.460
这找到了下标

39:10.460 --> 39:11.460
所有下标

39:11.460 --> 39:14.460
那么空数组

39:14.460 --> 39:16.460
表示没有找到

39:16.460 --> 39:17.460
对吧

39:17.460 --> 39:18.460
空的表示一个下标都没有

39:18.460 --> 39:19.460
就没有找到

39:19.460 --> 39:20.460
满足条件的时候呢

39:20.460 --> 39:21.460
我就干嘛了

39:21.460 --> 39:23.460
我就把这个数组里边加一下

39:23.460 --> 39:24.460
对

39:24.460 --> 39:25.460
兔洗

39:25.460 --> 39:26.460
加一个i

39:26.460 --> 39:27.460
把目前满足条件的下标

39:27.460 --> 39:28.460
加进去

39:28.460 --> 39:30.460
但是现在就不能结束了

39:30.460 --> 39:31.460
所以现在不能结束了

39:31.460 --> 39:32.460
你还要继续往后找

39:32.460 --> 39:33.460
比方找到6了

39:33.460 --> 39:34.460
不能结束啊

39:34.460 --> 39:36.460
因为后边还有6

39:36.460 --> 39:37.460
邓哥现在是同学聚会

39:37.460 --> 39:39.460
他来的不是一位同学

39:39.460 --> 39:41.460
来的是多位同学

39:41.460 --> 39:42.460
那么这些多位同学

39:42.460 --> 39:43.460
我们全部要把它找出来

39:43.460 --> 39:45.460
他们分拆在不同的车厢里边

39:45.460 --> 39:47.460
是不是要一个车厢一个厢

39:47.460 --> 39:48.460
要看完

39:48.460 --> 39:49.460
对不对

39:49.460 --> 39:50.460
现在就不能break了

39:50.460 --> 39:51.460
那么最后呢

39:51.460 --> 39:52.460
我们来输出一下

39:52.460 --> 39:53.460
对吧

39:53.460 --> 39:54.460
145

39:54.460 --> 39:55.460
下标为1

39:55.460 --> 39:56.460
下标为4

39:56.460 --> 39:57.460
下标为5

39:57.460 --> 39:58.460
都是满足条件的

39:58.460 --> 39:59.460
那如果说没有找到呢

39:59.460 --> 40:00.460
那就是空数组

40:00.460 --> 40:01.460
要学会变通

40:03.460 --> 40:05.460
一旦你找到数组中

40:05.460 --> 40:09.460
第一个基数和最后一个基数

40:09.460 --> 40:11.460
将他们求合

40:11.460 --> 40:13.460
又来一个数组

40:13.460 --> 40:18.930
找到第一个基数和最后一个基数

40:18.930 --> 40:19.930
那比方说这个数组里边

40:19.930 --> 40:20.930
第一个基数是啥

40:20.930 --> 40:21.930
三

40:21.930 --> 40:22.930
最后一个基数呢

40:22.930 --> 40:23.930
是23

40:23.930 --> 40:25.930
不一定是第一个数

40:25.930 --> 40:27.930
是第一个基数

40:27.930 --> 40:31.500
那么就是3加23

40:31.500 --> 40:32.500
等于多少

40:32.500 --> 40:33.500
等于26

40:33.500 --> 40:35.500
那比方说这里写的算32

40:35.500 --> 40:36.500
那第一个基数就是1

40:36.500 --> 40:37.500
1加上23

40:37.500 --> 40:39.500
就是24

40:40.500 --> 40:41.500
对吧

40:41.500 --> 40:42.500
你要找这个数字

40:42.500 --> 40:44.500
找到第一个基数和最后一个基数

40:44.500 --> 40:45.500
那么这种

40:45.500 --> 40:47.500
这道题其实有简洁的写法

40:47.500 --> 40:49.500
不过简洁的写法呢

40:49.500 --> 40:51.500
不利于我们目前的训练

40:51.500 --> 40:52.500
我们目前呢

40:52.500 --> 40:53.500
用这种方式来做

40:53.500 --> 40:56.500
无非就是两个查到问题

40:56.500 --> 41:00.060
是不是第一步

41:00.060 --> 41:02.060
找到第一个基数

41:02.060 --> 41:03.060
第二步

41:03.060 --> 41:06.060
找到第二个基数

41:06.060 --> 41:07.060
第三步

41:07.060 --> 41:08.060
相讲

41:08.060 --> 41:09.060
第三步是最简单的

41:09.060 --> 41:11.060
简单的相讲

41:11.060 --> 41:12.060
不就完了吗

41:12.060 --> 41:14.060
分步之后来做

41:14.060 --> 41:15.060
好 第一步

41:15.060 --> 41:16.060
找到第一个基数

41:16.060 --> 41:18.630
怎么找第一个基数

41:18.630 --> 41:20.630
是不是还是个车箱的问题

41:20.630 --> 41:22.630
我还是拿出一张纸

41:22.630 --> 41:23.630
不过那张纸上记录的

41:23.630 --> 41:25.630
就不是

41:25.630 --> 41:28.630
就不是那个

41:28.630 --> 41:29.630
当然我这个

41:29.630 --> 41:30.630
有个前提条件

41:30.630 --> 41:31.630
这个数组里边

41:31.630 --> 41:33.630
至少得有一个基数

41:33.630 --> 41:34.630
没有的话

41:34.630 --> 41:36.630
我这里没有说怎么办

41:36.630 --> 41:38.630
那就不考虑这种情况了

41:38.630 --> 41:42.630
假设数组里边至少有一个基数

41:42.630 --> 41:44.630
好 那么现在我们拿出一张纸

41:44.630 --> 41:45.630
然后这里有很多车箱

41:45.630 --> 41:48.630
一个个看

41:48.630 --> 41:50.630
什么叫第一个基数

41:50.630 --> 41:52.630
就是我从头到尾看

41:52.630 --> 41:53.630
找到第一个基数

41:53.630 --> 41:55.630
我就把它记录进来

41:55.630 --> 41:56.630
对不对

41:56.630 --> 41:57.630
当然前提条件得有基数

41:57.630 --> 41:59.630
我这里就假设一定有基数

41:59.630 --> 42:01.630
没有基数就不考虑了

42:01.630 --> 42:02.630
那我怎么办呢

42:02.630 --> 42:03.630
我就可以在这个纸上

42:03.630 --> 42:04.630
一开始记一个

42:04.630 --> 42:05.630
一个非常特别的纸

42:05.630 --> 42:06.630
会零也可以

42:06.630 --> 42:07.630
什么玩意也可以

42:07.630 --> 42:09.630
反正它一定会找到的

42:09.630 --> 42:10.630
记一个纳

42:10.630 --> 42:11.630
也行

42:11.630 --> 42:12.630
记啥都可以

42:12.630 --> 42:13.630
反正它一定会找到的

42:13.630 --> 42:14.630
因为我们前提条件

42:14.630 --> 42:16.630
一定得有一个基数

42:16.630 --> 42:18.630
好 那么现在呢

42:18.630 --> 42:20.630
是不是拿着一张纸

42:20.630 --> 42:23.630
对不对

42:23.630 --> 42:24.630
first

42:24.630 --> 42:25.630
第一个基数

42:25.630 --> 42:27.630
我现在复制为纳

42:27.630 --> 42:28.630
表示一开始都还没有找

42:28.630 --> 42:29.630
对不对

42:29.630 --> 42:30.630
没有找的话

42:30.630 --> 42:31.630
肯定是不知道基督啥

42:31.630 --> 42:34.630
复就是第一个基数

42:34.630 --> 42:35.630
好了 找呗

42:35.630 --> 42:37.630
A等于0

42:37.630 --> 42:40.630
A小U那么是

42:40.630 --> 42:41.630
点点是

42:45.780 --> 42:46.780
对吧 一个个找

42:46.780 --> 42:48.780
找到它是一个基数

42:48.780 --> 42:51.280
不等于0

42:51.280 --> 42:52.280
那是不是基数

42:52.280 --> 42:54.280
这是不是又第一个基数

42:54.280 --> 42:56.280
找到了基数过后

42:56.280 --> 42:57.280
然后我就把这个基数

42:57.280 --> 43:00.280
放到这张纸上

43:00.280 --> 43:01.280
就把这个基数

43:01.280 --> 43:02.280
放到这张纸上

43:02.280 --> 43:04.280
记录这个基数

43:04.280 --> 43:05.280
还找吗

43:05.280 --> 43:07.280
我现在只找第一个基数

43:07.280 --> 43:08.280
是不是不找了

43:08.280 --> 43:09.280
结束

43:09.280 --> 43:11.280
找第一个基数就结束

43:11.280 --> 43:12.280
就找完了

43:12.280 --> 43:13.280
我们来输出一下

43:13.280 --> 43:14.280
第一个基数

43:14.280 --> 43:15.280
first

43:15.280 --> 43:16.280
程序的一段一段做

43:16.280 --> 43:17.280
是不是一

43:17.280 --> 43:18.280
那如果说这里写的是

43:18.280 --> 43:19.280
三

43:19.280 --> 43:21.280
那第一个基数就是三

43:21.280 --> 43:22.280
看到没

43:22.280 --> 43:23.280
就第一个基数

43:23.280 --> 43:24.280
好

43:24.280 --> 43:26.280
然后找到最后一个基数

43:26.280 --> 43:28.280
最后一个基数

43:28.280 --> 43:30.280
那最后一个基数怎么找呢

43:30.280 --> 43:32.280
你反过来找呗

43:32.280 --> 43:33.280
之前是从这边开始找

43:33.280 --> 43:34.280
你反过来找

43:34.280 --> 43:35.280
好

43:35.280 --> 43:37.280
怎么来反过来找

43:38.280 --> 43:40.280
怎么反过来找

43:41.280 --> 43:43.280
那么其实也是利用这个循环

43:43.280 --> 43:45.280
之前写法是

43:45.280 --> 43:47.280
i的值是取是0

43:47.280 --> 43:48.280
1

43:48.280 --> 43:49.280
2

43:49.280 --> 43:50.280
这样子一直取值

43:50.280 --> 43:51.280
一直取到什么

43:51.280 --> 43:52.280
取到一个数字的最大价表

43:52.280 --> 43:53.280
比方说8

43:54.280 --> 43:55.280
那么现在的i的取值

43:55.280 --> 43:56.280
要从这样子取

43:56.280 --> 43:57.280
8

43:57.280 --> 43:58.280
7

43:58.280 --> 43:59.280
6

43:59.280 --> 44:00.280
一直取到多少

44:01.280 --> 44:02.280
对吧

44:02.280 --> 44:03.280
然后还是一样的道理

44:03.280 --> 44:04.280
等于8的时候

44:04.280 --> 44:05.280
运行一次循环

44:05.280 --> 44:06.280
等于7的时候运行一次

44:06.280 --> 44:08.280
等于6的时候运行一次

44:08.280 --> 44:09.280
那我这个单板

44:09.280 --> 44:10.280
这样的鞋边

44:10.280 --> 44:11.280
i的有多少

44:11.280 --> 44:13.280
从numster length开始

44:13.280 --> 44:14.280
是吧

44:14.280 --> 44:15.280
从最大下标开始

44:15.280 --> 44:17.280
从最后一个下标开始

44:17.280 --> 44:21.590
然后i大于等于0

44:21.590 --> 44:22.590
i减减

44:22.590 --> 44:23.590
就是每次减1

44:23.590 --> 44:25.590
先来一个最大下标

44:25.590 --> 44:26.590
然后呢

44:26.590 --> 44:27.590
每次减1

44:27.590 --> 44:28.590
下一个就变成7

44:28.590 --> 44:29.590
再下一个变成6

44:29.590 --> 44:30.590
对吧

44:30.590 --> 44:31.590
一直到0

44:31.590 --> 44:32.590
越大越等于0嘛

44:32.590 --> 44:33.590
所以它的取值范围

44:33.590 --> 44:35.590
是从最大下标到0

44:35.590 --> 44:36.590
那最终

44:36.590 --> 44:37.590
然后你把这个写出来

44:37.590 --> 44:38.590
后边都一样的

44:39.590 --> 44:40.590
顺序掉过来了

44:40.590 --> 44:41.590
不都一样

44:41.590 --> 44:42.590
等于8的时候运行一次循环

44:42.590 --> 44:43.590
等于7的时候运行一次

44:46.480 --> 44:47.480
当然我们得写个变量

44:47.480 --> 44:48.480
last

44:49.480 --> 44:50.480
最后一个

44:50.480 --> 44:54.880
最后一个集数

44:58.020 --> 44:59.020
那么我就把last

45:00.020 --> 45:01.020
记录一下

45:01.020 --> 45:02.020
找到了我就记录一下

45:02.020 --> 45:03.020
好

45:03.020 --> 45:04.020
最后我们来输出一下

45:04.020 --> 45:06.400
last

45:06.400 --> 45:07.400
说23

45:07.400 --> 45:08.400
刚才第1个集数是13

45:08.400 --> 45:10.400
第2个集数是23

45:10.400 --> 45:11.400
那么最后相加

45:13.400 --> 45:14.400
相加目就输出

45:14.400 --> 45:15.400
first

45:15.400 --> 45:16.400
加上last

45:17.400 --> 45:18.400
不是26吗

45:20.400 --> 45:21.400
对 就是这道题

45:21.400 --> 45:22.400
第3题

45:22.400 --> 45:26.570
好 第4题

45:26.570 --> 45:27.570
有两个输出

45:27.570 --> 45:28.570
看两个输出中

45:28.570 --> 45:30.570
是否都存在集数

45:31.570 --> 45:32.570
输出是

45:33.570 --> 45:34.570
或否

45:34.570 --> 45:36.570
必须要两个都有集数

45:36.570 --> 45:37.570
才是是

45:37.570 --> 45:38.570
其他都是否

45:40.570 --> 45:41.570
这其实就是两个问题

45:41.570 --> 45:42.570
分开一做

45:42.570 --> 45:43.570
一定要分开一做

45:44.570 --> 45:47.520
这是第1个数组

45:49.520 --> 45:50.520
这是第2个数组

45:57.890 --> 45:58.890
你都不知道数组里面是啥

45:58.890 --> 45:59.890
无所谓

45:59.890 --> 46:00.890
随便是啥

46:03.780 --> 46:04.780
我要看这2个数组里面

46:04.780 --> 46:06.780
但是数组长度都可能不一样

46:10.430 --> 46:12.430
我要看这2个数组里面

46:12.430 --> 46:14.430
是不是都有集

46:14.430 --> 46:15.430
那就分开找

46:16.430 --> 46:17.430
首先看在它里面

46:17.430 --> 46:18.430
有没有集数

46:18.430 --> 46:19.430
再看它里面有没有集数

46:19.430 --> 46:20.430
那看集数代码是不是

46:23.430 --> 46:24.430
存在一个数

46:24.430 --> 46:25.430
有没有集数

46:25.430 --> 46:26.430
我就再来一遍吧

46:26.430 --> 46:27.430
多写一写

46:27.430 --> 46:28.430
首先看

46:28.430 --> 46:30.430
那么是一中

46:30.430 --> 46:32.430
有没有集数

46:32.430 --> 46:33.430
那怎么写

46:33.430 --> 46:34.430
is a fan的

46:34.430 --> 46:36.430
有没有找到

46:36.430 --> 46:37.430
一开始没有找到

46:37.430 --> 46:38.430
然后佛循环

46:38.430 --> 46:40.430
i等于0

46:40.430 --> 46:41.430
i小于

46:41.430 --> 46:42.430
那么是1

46:42.430 --> 46:43.430
j2n

46:43.430 --> 46:45.430
然后i加加

46:45.430 --> 46:46.430
然后看一下

46:46.430 --> 46:47.430
那么是1

46:47.430 --> 46:49.430
那个i是不是集数

46:49.430 --> 46:50.430
那么是1

46:50.430 --> 46:52.430
那个i是不是集数

46:52.430 --> 46:54.430
如果说它是一个集数

46:54.430 --> 46:55.430
那就找到了

46:55.430 --> 46:56.430
is a fan的等于

46:56.430 --> 46:57.430
就

46:57.430 --> 46:58.430
is a fan的1

46:58.430 --> 47:00.430
is a fan的1

47:00.430 --> 47:01.430
等于2

47:01.430 --> 47:02.430
然后就不找了

47:02.430 --> 47:03.430
那这个循环结束过后

47:03.430 --> 47:04.430
is a fan的1

47:04.430 --> 47:06.430
不就是在表示找没找到吗

47:06.430 --> 47:08.430
找到了就是有集数

47:08.430 --> 47:09.430
没有找到就是没有集数

47:09.430 --> 47:10.430
那么来看一下

47:10.430 --> 47:11.430
比方说这里

47:11.430 --> 47:12.430
我们把它

47:12.430 --> 47:14.430
设置为没有集数的样子

47:17.060 --> 47:18.060
还有集数

47:18.060 --> 47:21.020
这里

47:21.020 --> 47:22.020
所以就是force

47:22.020 --> 47:23.020
表示没有

47:23.020 --> 47:24.020
它这个边上就记录

47:24.020 --> 47:26.020
有没有找到集数

47:26.020 --> 47:28.020
然后那么是2

47:28.020 --> 47:30.020
中有没有集数

47:30.020 --> 47:32.020
那个代码有啥区别呢

47:32.020 --> 47:33.020
我把它复制一下

47:33.020 --> 47:34.020
把变量名字赶一下

47:34.020 --> 47:36.020
这是找的是那么是2

47:36.020 --> 47:38.020
这里是那么是2

47:38.020 --> 47:39.020
这里是2

47:39.020 --> 47:40.020
这里是2

47:40.020 --> 47:41.020
对吧

47:41.020 --> 47:42.020
那最终

47:42.020 --> 47:43.020
这个一字犯的2

47:43.020 --> 47:44.020
记住了

47:44.020 --> 47:45.020
那么是2里面有没有集数

47:45.020 --> 47:46.020
那么最终合并结果

47:46.020 --> 47:47.020
对吧

47:47.020 --> 47:49.020
合并结果

47:49.020 --> 47:50.020
我要的结果是什么呢

47:50.020 --> 47:52.020
就这两个都为趣的情况下

47:52.020 --> 47:53.020
这两个都为趣

47:53.020 --> 47:54.020
说明

47:54.020 --> 47:55.020
我就说出什么

47:56.020 --> 47:57.020
是

47:57.020 --> 47:58.020
两个数字都有集数

47:58.020 --> 48:00.020
其他情况下都是for

48:00.020 --> 48:01.020
所以说我最后判断的结果

48:01.020 --> 48:02.020
是

48:02.020 --> 48:03.020
isfand1

48:05.020 --> 48:07.020
并且isfand2

48:07.020 --> 48:10.520
所以两个都必须要为真

48:10.520 --> 48:11.520
表示

48:11.520 --> 48:12.520
就是4

48:13.520 --> 48:14.520
否则的话

48:14.520 --> 48:15.520
else

48:15.520 --> 48:17.520
就是for

48:19.520 --> 48:20.520
目前是for

48:20.520 --> 48:22.520
其中一个就没有集数

48:22.520 --> 48:24.520
如果把这个集数给它加上

48:25.520 --> 48:26.520
都好

48:26.520 --> 48:28.520
那就4

48:28.520 --> 48:29.520
对不对

48:30.520 --> 48:31.520
没啥

48:31.520 --> 48:32.520
分开做

48:32.520 --> 48:33.520
好就没啥了

48:33.520 --> 48:35.520
一把这两套

48:35.520 --> 48:36.520
两套提三

48:36.520 --> 48:37.520
四这两套提做完了

48:37.520 --> 48:39.520
那里的编程能力又上升了

48:40.520 --> 48:41.520
好吧

48:41.520 --> 48:43.520
好好搞定这些题

48:43.520 --> 48:44.520
OK 我就

48:44.520 --> 48:45.520
讲到这吧

48:45.520 --> 48:47.520
会不会我们慢慢的再来

