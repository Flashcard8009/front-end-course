WEBVTT

00:00.000 --> 00:05.000
好 这也可能我们来聊一聊 这个事件的默认行为

00:05.000 --> 00:10.000
首先了解一下 为什么叫做事件的默认行为 我们为什么要去了解它

00:10.000 --> 00:17.000
事件默认行为其实特别简单 就是说我们网页上有一些元素

00:17.000 --> 00:24.000
它在做出某一种操作的时候 说专业点的话 就是它触发某一些事件的时候

00:24.000 --> 00:29.000
浏览器它会有自己的默认行为 就是你啥也没写 既然啥是空的

00:29.000 --> 00:34.000
浏览器它也会做一些事 比方说像我们的A标圈

00:34.000 --> 00:39.000
它有个事件叫点击事件 那么A标圈点击过后 浏览器会干嘛呀

00:39.000 --> 00:46.000
是不是会跳转页面啊 对吧 还包括我们的forum元素表单 表单的提交事件

00:46.000 --> 00:52.000
提交表单 浏览器会干嘛呀 所以我们目前看到的现象就是它刷新的页面

00:53.000 --> 00:57.000
将来我们学了网络之后 它要干嘛 它就是一个网络情求

00:58.000 --> 01:02.000
像我们的文门框 文门框里边是不是可以按键盘打字

01:02.000 --> 01:07.000
打字的时候实际上就是一个key到事件 键盘按下事件

01:07.000 --> 01:13.000
那么浏览器会干嘛呀 它会把我们的按键 它的文本显示到文门框里边

01:13.000 --> 01:19.000
当然还有其他的很多 假如我们学了移动端之后 还会发现还有很多的默认行为

01:19.000 --> 01:28.000
比如说用手指在浏览器上面滑动的时候 实际上它可以相当于滚动条可以翻页 对吧

01:28.000 --> 01:32.000
可以往下翻 这些都是属于浏览器的默认行为

01:33.000 --> 01:38.000
但有的时候就绝大部分时候 我们不是很care这件事 为什么呢

01:38.000 --> 01:41.000
因为浏览器的默认行为它本身就是方便用补操作的

01:41.000 --> 01:44.000
所以我们有的很多时候我们都不需要care

01:44.000 --> 01:49.000
但有的时候我们确实它会给我们带来一些麻烦

01:49.000 --> 01:54.000
因此有的时候我们会要阻止浏览器的默认行为

01:54.000 --> 01:57.000
怎么阻止呢 就这么一句话

01:57.000 --> 02:00.000
这个意义是啥呢 这个意就是事件对象

02:00.000 --> 02:03.000
那个事件对象我们一般使用的一个单词就是意

02:03.000 --> 02:07.000
就是参数 就这样 举个例子

02:08.000 --> 02:14.700
这个A标圈 诶 百度吧 跳到百度去

02:21.390 --> 02:24.390
好 那么现在我们来获取这个A标圈

02:32.150 --> 02:35.150
然后我们给它注册一个点击事件

02:35.150 --> 02:40.150
那个事件这里边是不是有个事件对象 就是事件参数 对吧

02:41.150 --> 02:44.150
那么我们说了如何来阻止默认行为

02:44.150 --> 02:48.150
就是prevent 它里边提供了一个方法

02:48.150 --> 02:53.150
叫prevent 阻止default 默认

02:53.150 --> 02:55.150
其实我们不用记这么长的单词

02:55.150 --> 02:58.150
我们如果说需要阻止默认行为的话

02:58.150 --> 03:02.150
就给它写一个P开头 直接就出来了

03:02.150 --> 03:05.150
prevent 带多大一点 它直接就有了

03:05.150 --> 03:08.150
还有只能提示的 这就是阻止事件默认行为

03:08.150 --> 03:11.150
当代码运行到这句话的时候 它就知道了

03:11.150 --> 03:16.150
原来这个程序而它不希望用户点击到之后

03:16.150 --> 03:20.150
浏览器会做出一些反应 它不希望有这件事发生

03:20.150 --> 03:24.150
所以说它后边浏览器它就不会去跳转

03:24.150 --> 03:26.150
那么如果说我们不阻止的话

03:26.150 --> 03:31.150
我们来输出一下 点击了A元数

03:31.150 --> 03:35.660
我们来运行看一下 是一个什么样的效果

03:35.660 --> 03:37.660
这里有个A元数 放大一点

03:37.660 --> 03:40.660
然后我们在控制台里边 看一下控制台输出

03:40.660 --> 03:44.800
好 点击

03:44.800 --> 03:46.800
所以说它一开始打印了 对吧

03:46.800 --> 03:48.800
注意看 它一开始打印了

03:48.800 --> 03:51.800
然后马上就跳转了 对不对

03:51.800 --> 03:53.800
所以说就是出现了这么一个情况

03:53.800 --> 03:55.800
就有的时候我们页面上的A元数

03:55.800 --> 03:57.800
我希望它就像按钮一样

03:57.800 --> 03:59.800
点击到过去点击了吗

03:59.800 --> 04:02.800
然后我注册了一些介石时间去操作它

04:02.800 --> 04:05.800
但是我不希望浏览器去做一些事

04:05.800 --> 04:07.800
那么这个时候我们就把这句话加上

04:07.800 --> 04:10.800
这句话写到前面 还写到后面 无所谓

04:10.800 --> 04:13.800
反正你写到这个事件处理 还处理一遍

04:13.800 --> 04:16.800
只要它运行到这句话 浏览器的默认行为就没了

04:16.800 --> 04:18.800
好 我们来看一下

04:18.800 --> 04:21.800
现在我们点击 这不再跳转了 对吧

04:21.800 --> 04:24.800
这个A元数好像就不是A元数

04:24.800 --> 04:27.800
就是一个普通的文本的 可以点击的文本

04:27.800 --> 04:28.800
就这么个意思

04:28.800 --> 04:32.800
这都是事情的默认行为 简单 特别简单

04:32.800 --> 04:35.800
还包括我们直接来练习题吧

04:36.800 --> 04:39.800
这有两道练习题 我把它做完就完事了

04:39.800 --> 04:42.800
也是我们平时 除了A元数之外

04:42.800 --> 04:44.800
A元数之外 当中有兴趣的可以看一看

04:44.800 --> 04:46.800
这没有什么复杂的 对吧

04:47.800 --> 04:51.800
这一块除了A元数之外 还有两个地方

04:51.800 --> 04:54.800
我们可能会使用到组织事件的默认行为

04:54.800 --> 04:56.800
反正这个玩意就是你遇到了默认行为

04:56.800 --> 04:59.800
发现那个浏览器好像自己给你搞了一些事

04:59.800 --> 05:00.800
那你就阻止它

05:00.800 --> 05:03.800
如果说你不希望有的话 你就阻止它就完事了

05:03.800 --> 05:06.800
你也不用去记 浏览器有哪些默认行为

05:06.800 --> 05:08.800
不用去记这个玩意

05:08.800 --> 05:10.800
反正你发现问题 你肯定知道的

05:10.800 --> 05:12.800
你发现这个地方有问题了

05:12.800 --> 05:14.800
浏览器好像自己搞了一些事情出来

05:14.800 --> 05:18.800
你不希望有这件事 那你就去阻止事件的默认行为

05:18.800 --> 05:19.800
就完事了

05:19.800 --> 05:23.800
比方地铁 地铁是这样运行出来

05:23.800 --> 05:25.800
它是一个表单验证

05:25.800 --> 05:28.800
那么这一块我们除了说事件的默认行为之外

05:28.800 --> 05:31.800
顺便给同学们普及一下

05:31.800 --> 05:34.800
表单验证的一个知识

05:34.800 --> 05:36.800
那是这一块是怎么回事呢

05:36.800 --> 05:38.800
我们首先看一下元素结构

05:38.800 --> 05:41.800
元素结构里边我先把这个去除掉

05:41.800 --> 05:43.800
先让同学们理解这个元素结构

05:43.800 --> 05:46.800
因为将来我们会遇到很多表单

05:46.800 --> 05:49.800
将来我们倒是不太会去使用戒业式

05:49.800 --> 05:51.800
原生的戒业式

05:51.800 --> 05:53.800
一次去控制验证表单

05:53.800 --> 05:55.800
因为我们都有一些成熟的框架

05:55.800 --> 05:57.800
可以非常方便的帮助我们完成这件事

05:57.800 --> 06:00.800
但是这个基本原理得要知道

06:00.800 --> 06:03.800
这个表单验证这一块是这样

06:03.800 --> 06:06.800
通常就是一个表单元素

06:07.800 --> 06:11.800
然后里边每一个表单项一般就是个DIV

06:11.800 --> 06:13.800
你看

06:13.800 --> 06:15.800
这就是一个表单项

06:15.800 --> 06:18.800
这下面也是个表单项

06:18.800 --> 06:20.800
这下面也是个表单项

06:20.800 --> 06:22.800
每一个表单项就是个DIV

06:22.800 --> 06:25.800
这个表单项里边东西可多了

06:25.800 --> 06:27.800
有可能有文本框

06:27.800 --> 06:29.800
有可能有下它列表

06:29.800 --> 06:32.800
也有可能有夺选框

06:32.800 --> 06:33.800
单选框

06:33.800 --> 06:35.800
夺航文本框

06:35.800 --> 06:36.800
都有

06:36.800 --> 06:39.800
然后还有可能会有一些提示文字

06:39.800 --> 06:42.800
还有可能会出现这么一个东西

06:42.800 --> 06:44.800
就是一个完整的表单里边

06:44.800 --> 06:45.800
每一个表单项里边

06:45.800 --> 06:48.800
可能会有一个DIV或者是P元素

06:48.800 --> 06:51.800
它表示这个表单项的一些信息

06:51.800 --> 06:54.800
我这里那样是微message

06:54.800 --> 06:56.800
那么这里明显就是一个错误信息

06:56.800 --> 06:59.800
这个错误信息它也不是写死的

06:59.800 --> 07:02.800
它需要解释动态生成

07:02.800 --> 07:04.800
比方说用户没有填写账号

07:04.800 --> 07:06.800
没有填写账号的时候

07:06.800 --> 07:09.800
那么这个信息就没有

07:09.800 --> 07:11.800
就没有

07:11.800 --> 07:13.800
它可能是动态生成的

07:13.800 --> 07:16.800
而且账号有可能它的错误消息也不一样

07:16.800 --> 07:18.800
它可能是账号密码错误

07:18.800 --> 07:19.800
或者是账号不能维空

07:19.800 --> 07:21.800
或者是账号不存在

07:21.800 --> 07:23.800
它总有可能有各种各样的错误信息

07:23.800 --> 07:25.800
我这里只是为了写一个样式出来

07:25.800 --> 07:26.800
懂了意思吧

07:26.800 --> 07:27.800
那么密码这里一块

07:27.800 --> 07:29.800
它也有自己的错误信息

07:29.800 --> 07:31.800
就每一个表单项有一个错误信息

07:31.800 --> 07:35.800
这个错误信息默认是不显示的

07:35.800 --> 07:37.800
它不会显示出来

07:37.800 --> 07:38.800
那我们来看一下

07:38.800 --> 07:39.800
我们的页面元素里面的样式

07:39.800 --> 07:41.800
它怎么来设置的

07:41.800 --> 07:43.800
这不是一定的

07:43.800 --> 07:46.800
大部分表单项它都是这样子玩的

07:46.800 --> 07:48.800
这边顺便还给大家介绍一个

07:48.800 --> 07:51.800
非常小的新知识

07:51.800 --> 07:52.800
这里那里看

07:52.800 --> 07:53.800
账号不能维空

07:53.800 --> 07:54.800
它是没有显示的

07:54.800 --> 07:55.800
你知道对吧

07:55.800 --> 07:56.800
那么我们有可能认为

07:56.800 --> 07:58.800
它是使用的是DisplayNone

07:58.800 --> 07:59.800
而不是的

07:59.800 --> 08:01.800
我这里使用的是另外一种隐藏方式

08:01.800 --> 08:03.800
叫Vatability

08:03.800 --> 08:04.800
Hydron

08:04.800 --> 08:06.800
那么这个隐藏方式

08:06.800 --> 08:09.800
跟这个DisplayNone有什么区别呢

08:09.800 --> 08:10.800
这一块呢

08:10.800 --> 08:12.800
以前面试题还经常会问

08:12.800 --> 08:15.800
现在的问得很少了

08:15.800 --> 08:16.800
Hydron

08:16.800 --> 08:18.800
它也是隐藏元素

08:18.800 --> 08:20.800
DisplayNone

08:20.800 --> 08:21.800
它也是隐藏元素

08:21.800 --> 08:23.800
这两种有什么样的区别呢

08:23.800 --> 08:24.800
区别就在于

08:24.800 --> 08:26.800
如果说你用DisplayNone的话

08:26.800 --> 08:29.800
它是不生成盒子的

08:29.800 --> 08:30.800
我们知道DisplayNone是在

08:30.800 --> 08:32.800
控制盒子内形的

08:32.800 --> 08:34.800
如果说你使用的是DisplayNone的话

08:34.800 --> 08:36.800
它是不生成盒子的

08:36.800 --> 08:38.800
如果说你使用的Vatability

08:38.800 --> 08:39.800
Hydron

08:39.800 --> 08:43.800
它是生成盒子

08:43.800 --> 08:44.800
但是它不显示

08:44.800 --> 08:47.800
这两个完全是两罢事

08:47.800 --> 08:48.800
为什么呢

08:48.800 --> 08:50.800
因为如果说你使用DisplayNone的话

08:50.800 --> 08:51.800
由于它不生成盒子

08:51.800 --> 08:52.800
它在页面上

08:52.800 --> 08:55.800
它是不会占用空间的

08:55.800 --> 08:56.800
VatabilityHydron

08:56.800 --> 08:58.800
它是生成盒子

08:58.800 --> 09:00.800
但是我会占用空间

09:00.800 --> 09:01.800
但是用户看不见

09:01.800 --> 09:03.800
也没法进行操作

09:03.800 --> 09:05.800
但是还有一个隐藏方式

09:05.800 --> 09:07.800
叫Opacity

09:07.800 --> 09:08.800
0

09:08.800 --> 09:10.800
完全透明

09:10.800 --> 09:11.800
那么这个玩意

09:11.800 --> 09:16.800
它也是生成盒子

09:16.800 --> 09:17.800
它要显示

09:17.800 --> 09:19.800
只是用户看不见而已

09:19.800 --> 09:20.800
这个玩意是不显示

09:20.800 --> 09:21.800
那么这个玩意

09:21.800 --> 09:22.800
到底有什么区别呢

09:22.800 --> 09:23.800
我举个例子

09:23.800 --> 09:25.800
比方说这个P元素

09:25.800 --> 09:26.800
如果说使用了

09:26.800 --> 09:27.800
是Opacity0

09:27.800 --> 09:29.800
这种方式来隐藏的话

09:29.800 --> 09:31.800
它是可以有点击事件的

09:31.800 --> 09:33.800
我点它是可以触发事件的

09:33.800 --> 09:35.800
因为它在这只是看不见而已

09:35.800 --> 09:38.800
那如果说我用的是VatabilityHydron

09:38.800 --> 09:41.800
那么它是不显示

09:41.800 --> 09:43.800
因此这里是点不到它的

09:43.800 --> 09:44.800
对吧

09:44.800 --> 09:45.800
就这么一个区别

09:45.800 --> 09:46.800
那DisplayNone的话

09:46.800 --> 09:48.800
那明显就是它不生成盒子

09:48.800 --> 09:50.800
那就更加不可能点得到了

09:50.800 --> 09:51.800
而且它不会占用空间

09:51.800 --> 09:52.800
那么我们试一下

09:52.800 --> 09:55.800
我们把这个DisplayNone给它加上

09:55.800 --> 09:56.800
你看

09:56.800 --> 09:58.800
是不是这个空间就没了

09:58.800 --> 10:00.800
本来这个P元素是有进空间的

10:00.800 --> 10:01.800
空间就没了

10:01.800 --> 10:03.800
你看现在我指的这个P元素

10:04.800 --> 10:05.800
你看

10:05.800 --> 10:06.800
基本上都没有提示

10:06.800 --> 10:07.800
它都没有这个空间

10:07.800 --> 10:09.800
如果说我用的是VatabilityHydron的话

10:09.800 --> 10:10.800
它是有这个空间的

10:10.800 --> 10:11.800
你看

10:11.800 --> 10:12.800
尺寸都有

10:12.800 --> 10:13.800
只是你看不见而已

10:13.800 --> 10:14.800
懂得意思吗

10:14.800 --> 10:15.800
所以说

10:15.800 --> 10:16.800
我们这里的错误

10:16.800 --> 10:18.800
消息了一般使用的是VatabilityHydron

10:19.800 --> 10:21.800
那如果说我要显示怎么办呢

10:21.800 --> 10:23.800
我只需要去掉这个属性

10:23.800 --> 10:25.800
或者是把这个VatabilityHydron的

10:25.800 --> 10:26.800
赶上它的默认值

10:26.800 --> 10:28.800
它的默认值是Vatability

10:28.800 --> 10:29.800
表示显示

10:29.800 --> 10:30.800
对吧

10:30.800 --> 10:31.800
Vatability表示什么意思

10:31.800 --> 10:33.800
表示可见性

10:33.800 --> 10:34.800
把它视为Vatability

10:34.800 --> 10:35.800
表示显示

10:35.800 --> 10:37.800
或者说Hydron不可见

10:37.800 --> 10:38.800
就这么个意思

10:39.800 --> 10:41.800
好 那么这个错误消息

10:41.800 --> 10:42.800
它本来就在一转

10:42.800 --> 10:45.800
只不过它文本有可能不一样

10:45.800 --> 10:47.800
文本到一会我就把你清除掉

10:47.800 --> 10:49.800
或者你只是给它显示这个例子

10:49.800 --> 10:51.800
什么时候显示呢

10:51.800 --> 10:53.800
它如果说要显示这个错误消息

10:53.800 --> 10:55.800
它不是直接控制这个元素的

10:55.800 --> 10:56.800
一般来说

10:56.800 --> 10:58.800
是在这个DIV里边

10:58.800 --> 11:00.800
加一个那样式

11:00.800 --> 11:02.800
比方说加一个Adron

11:02.800 --> 11:03.800
加一个那样式

11:03.800 --> 11:05.800
只要有这么一个那样式

11:05.800 --> 11:06.800
就表示说

11:06.800 --> 11:07.800
这个表单向

11:07.800 --> 11:09.800
它是有错误的

11:09.800 --> 11:10.800
那么既然这个表单向有错误

11:10.800 --> 11:12.800
那么是不是这个元素得显示

11:12.800 --> 11:13.800
其实这个样式很好写

11:13.800 --> 11:15.800
你看过样式怎么写的

11:15.800 --> 11:17.800
FormItem有具有

11:17.800 --> 11:19.800
具有这个Adron这个样式

11:20.800 --> 11:22.800
于是它下边的Message

11:22.800 --> 11:23.800
就把它的Visibility

11:23.800 --> 11:24.800
稍微Visible

11:24.800 --> 11:25.800
就这么简单

11:25.800 --> 11:26.800
一点都不复杂吧

11:26.800 --> 11:28.800
包括这个Input呢

11:31.800 --> 11:32.800
这个Input

11:32.800 --> 11:34.800
这里没显示出来

11:34.800 --> 11:37.800
把它那个就是边框颜色

11:37.800 --> 11:39.800
刷新颜色

11:39.800 --> 11:44.650
再加上一个Adron

11:44.650 --> 11:45.650
你看这个Input

11:45.650 --> 11:47.650
是不是也是有FormItem

11:47.650 --> 11:48.650
Adron这个那样式

11:48.650 --> 11:49.650
下边的Input

11:49.650 --> 11:52.650
把它的边框颜色改为这个红色

11:52.650 --> 11:53.650
懂了意思吗

11:53.650 --> 11:57.650
就是简把这个CSS理解

11:57.650 --> 11:58.650
那么接下来

11:58.650 --> 11:59.650
我们就要实现

11:59.650 --> 12:01.650
这个表单验证的功能

12:01.650 --> 12:03.650
要实现表单验证的时候

12:03.650 --> 12:05.650
我们先把这些去掉

12:05.650 --> 12:06.650
把这些都去掉

12:06.650 --> 12:08.650
因为这些东西都要GS来控制

12:08.650 --> 12:10.650
那这一块怎么玩呢

12:10.650 --> 12:11.650
其实就是

12:11.650 --> 12:13.650
我们要验证这个表单

12:13.650 --> 12:14.650
输入的真不正确

12:14.650 --> 12:16.650
如果说输入的不正确

12:16.650 --> 12:17.650
不要说这一项不正确

12:17.650 --> 12:19.650
一项一项验证

12:19.650 --> 12:20.650
这一项不正确

12:20.650 --> 12:21.650
我要做什么

12:21.650 --> 12:23.650
我要把错误消息写这儿

12:23.650 --> 12:24.650
然后呢

12:24.650 --> 12:26.650
把这个玩意儿

12:26.650 --> 12:28.650
加一个Adron样式

12:28.650 --> 12:30.650
所以就算做这么一件事

12:30.650 --> 12:31.650
对吧

12:31.650 --> 12:33.650
GS我已经引用进去了

12:33.650 --> 12:35.650
那么这个表单验证怎么写

12:35.650 --> 12:36.650
同学们第一次写的

12:36.650 --> 12:38.650
跟着老师写

12:38.650 --> 12:39.650
但是不要抄

12:39.650 --> 12:40.650
听老师讲完一段

12:40.650 --> 12:41.650
你觉得可以了

12:41.650 --> 12:42.650
这一块我接受了

12:42.650 --> 12:44.650
那么先把视频关掉

12:44.650 --> 12:46.650
不要看着视频写

12:46.650 --> 12:47.650
自己写

12:47.650 --> 12:50.650
要成一个做练习的好习惯

12:50.650 --> 12:51.650
好

12:51.650 --> 12:53.650
我们来完成表单验证

12:53.650 --> 12:55.650
完成表单验证这一块呢

12:55.650 --> 12:56.650
最重要的

12:56.650 --> 12:58.650
不是事件这些东西

12:58.650 --> 13:02.650
而是你要写一个验证方法出来

13:02.650 --> 13:05.650
写什么验证方法呢

13:05.650 --> 13:09.650
比方说我们这里写一个Validate for

13:09.650 --> 13:10.650
这个方法

13:10.650 --> 13:11.650
我打个注释

13:11.650 --> 13:13.650
这个方法是什么意思

13:13.650 --> 13:17.650
表示验证整个表单

13:17.650 --> 13:20.650
如果验证通过

13:20.650 --> 13:24.650
或者我们还会给他一个返回值

13:24.650 --> 13:26.650
是一个布林类型

13:26.650 --> 13:31.650
验证通过返回去

13:31.650 --> 13:35.650
不通过返回force

13:35.650 --> 13:36.650
整个方法的意思是

13:36.650 --> 13:38.650
验证整个表单

13:38.650 --> 13:44.650
设置元素内容和状态

13:44.650 --> 13:46.650
就是说我在任何时候

13:46.650 --> 13:49.650
只要一调用这个方法

13:49.650 --> 13:52.650
他一定会把我们整个表单

13:52.650 --> 13:55.650
他一定会把我们整个表单的

13:55.650 --> 13:58.650
就是状态设置为正确的

13:58.650 --> 14:00.650
设置为正确的状态

14:00.650 --> 14:01.650
懂的意思吧

14:01.650 --> 14:03.650
比方说我在这儿

14:03.650 --> 14:05.650
我写一个abc

14:05.650 --> 14:06.650
我一调这个方法

14:06.650 --> 14:07.650
他发现这个是正确的

14:07.650 --> 14:13.710
那么这一块

14:13.710 --> 14:15.710
为什么

14:15.710 --> 14:17.710
这个没有内容了

14:17.710 --> 14:18.710
没有内容了

14:18.710 --> 14:20.710
我先给他加一个

14:20.710 --> 14:23.710
加一个摸的内容吧

14:23.710 --> 14:24.710
他没有内容的话

14:24.710 --> 14:26.710
会导致这个高度就没了

14:26.710 --> 14:27.710
他没有内容

14:27.710 --> 14:29.710
我们看一下他的内容吧

14:29.710 --> 14:30.710
然后我这里一块

14:30.710 --> 14:33.710
给他设置一个固定的高度

14:33.710 --> 14:35.710
我一会把这个cac的样式改一下

14:35.710 --> 14:37.710
这个小的地方没考虑到

14:37.710 --> 14:38.710
因为他刚才没有内容的话

14:38.710 --> 14:39.710
高度就没了

14:39.710 --> 14:40.710
就没把固定站住了

14:40.710 --> 14:42.710
这一块内容高度的话

14:42.710 --> 14:44.710
大概就是16

14:44.710 --> 14:47.710
OK 那我就设置一个16的相处吧

14:47.710 --> 14:51.020
cac里边

14:51.020 --> 14:53.020
找到这一块

14:53.020 --> 14:54.020
message

14:54.020 --> 14:56.020
再加上一个高度

14:56.020 --> 14:58.020
16

14:58.020 --> 15:01.020
把位置站住

15:01.020 --> 15:03.020
好 回到这儿来

15:03.020 --> 15:06.020
比方说我这里写一个abc

15:06.020 --> 15:07.020
我只要在这儿

15:07.020 --> 15:08.020
一定要为这个方法

15:08.020 --> 15:10.020
白天是蜂

15:10.020 --> 15:11.020
首先知道

15:11.020 --> 15:13.020
原来你这一块是OK的

15:13.020 --> 15:15.020
没问题的

15:15.020 --> 15:16.020
然后下边的密码

15:16.020 --> 15:18.020
是不是得重新填写

15:18.020 --> 15:21.020
对吧 得重新填写密码

15:21.020 --> 15:22.020
所以说他就会出现

15:22.020 --> 15:24.020
这么一个验证结果

15:24.020 --> 15:26.020
对不对 就这么一个方法

15:26.020 --> 15:27.020
好 那么这个方法

15:27.020 --> 15:28.020
要完成的话

15:28.020 --> 15:30.020
它是不是要一项一项验证

15:30.020 --> 15:32.020
先验证账号

15:32.020 --> 15:35.020
再验证密码

15:35.020 --> 15:36.020
对吧

15:36.020 --> 15:38.020
是不是要一项一项验证

15:38.020 --> 15:39.020
好 那么既然如此

15:39.020 --> 15:42.020
我又单独的去开两个指方法

15:42.020 --> 15:45.020
一个是validate

15:45.020 --> 15:46.020
账号

15:46.020 --> 15:49.020
我一般用locking id

15:49.020 --> 15:51.020
这是验证账号

15:51.020 --> 15:54.020
过程跟下面的方法是一样的

15:54.020 --> 15:56.020
验证账号

15:56.020 --> 15:57.020
然后再看一个方法

15:57.020 --> 15:59.020
验证密码

15:59.020 --> 16:01.020
Password

16:01.020 --> 16:03.020
当然我这里验证密码

16:03.020 --> 16:05.020
不是判断账号密码是否正确

16:05.020 --> 16:07.020
那个玩意需要学了网络之后

16:07.020 --> 16:08.020
才能判断

16:08.020 --> 16:10.020
我这里在验证的只是说

16:10.020 --> 16:11.020
它有没有写

16:11.020 --> 16:12.020
我去看一下有没有写

16:12.020 --> 16:14.020
那比如说我再加一些规则

16:14.020 --> 16:17.020
账号的长度必须至少是

16:17.020 --> 16:20.020
三位必须要大于三

16:20.020 --> 16:21.020
小于十二

16:21.020 --> 16:23.020
举个例子 我就随便说一下

16:23.020 --> 16:24.020
这么个意思

16:24.020 --> 16:27.020
OK 那么这里我们如何来验证

16:27.020 --> 16:29.020
我们先把这两个方法写好

16:29.020 --> 16:32.020
这是验证密码

16:32.020 --> 16:34.020
我们先把这两个方法写好

16:34.020 --> 16:36.020
因为这两个方法写好过

16:36.020 --> 16:37.020
所以这个方法其实就是

16:37.020 --> 16:39.020
把这两个玩意汇总

16:39.020 --> 16:40.020
对吧 就这么意思

16:40.020 --> 16:41.020
好 来吧

16:42.020 --> 16:44.020
第一个验证请输入账号

16:44.020 --> 16:47.020
那么为了我准确的得到

16:47.020 --> 16:48.020
这个文本框

16:48.020 --> 16:50.020
以及准确的得到这个P元数

16:50.020 --> 16:54.020
我最好在这里给它加上一个ID

16:54.020 --> 16:56.020
给这个DIV加上一个ID

16:56.020 --> 17:00.020
这是Logi ID

17:00.020 --> 17:03.400
这是Password

17:03.400 --> 17:06.400
有的时候那么一个区名为LoginPassword

17:07.400 --> 17:09.400
这是这两个元数

17:09.400 --> 17:10.400
验证账号的时候

17:10.400 --> 17:11.400
怎么做呢

17:11.400 --> 17:14.400
我首先拿到这个DIV document

17:15.400 --> 17:17.400
你可以用git element by ID

17:17.400 --> 17:19.400
也可以用query selector

17:20.400 --> 17:22.400
Login ID

17:22.400 --> 17:23.400
拿到这个DIV了

17:23.400 --> 17:24.400
拿到这个DIV之后

17:24.400 --> 17:25.400
我是不是可以拿到

17:25.400 --> 17:27.400
它里面的文本框

17:27.400 --> 17:29.400
input

17:29.400 --> 17:31.400
等于DIV query selector

17:31.400 --> 17:34.400
在这个DIV里边去找input

17:34.400 --> 17:36.400
然后我还可以拿到这个message

17:36.400 --> 17:37.400
它的错误消息

17:37.400 --> 17:39.400
DIV query selector

17:39.400 --> 17:40.400
里边的什么

17:40.400 --> 17:41.400
那样是为message

17:41.400 --> 17:43.400
是不是拿到这些元数了

17:43.400 --> 17:44.400
我来打印一下

17:44.400 --> 17:45.400
获取元数之后

17:45.400 --> 17:46.400
你们初学的时候

17:46.400 --> 17:49.400
我建议那同学们最好打印一下

17:49.400 --> 17:52.400
看一下获取的东西是不是正确的

17:52.400 --> 17:53.400
有没有获取到

17:53.400 --> 17:55.400
不然你写到半天

17:55.400 --> 17:57.400
你这元数都没有获取到

17:57.400 --> 17:58.400
你接下来怎么玩的

17:59.400 --> 18:00.400
DIV

18:00.400 --> 18:02.400
然后里面的input

18:02.400 --> 18:04.400
P元数什么都拿到了

18:04.400 --> 18:06.400
拿到了之后

18:06.400 --> 18:07.400
接下来我要验证的

18:07.400 --> 18:10.400
验证这个账号有没有问题

18:10.400 --> 18:11.400
那么我怎么知道

18:11.400 --> 18:12.400
账号有没有问题

18:12.400 --> 18:15.400
是不是看文本框里边写的东西

18:15.400 --> 18:17.400
因此我判断一下

18:17.400 --> 18:20.400
我把这个账号Login ID

18:20.400 --> 18:24.400
等于input.value

18:24.400 --> 18:26.400
这不文本框的值

18:26.400 --> 18:28.400
有可能我还需要把它

18:28.400 --> 18:29.400
去掉一个守卫空格

18:29.400 --> 18:31.400
守卫空格我不要

18:31.400 --> 18:33.400
这个东西就看你们自己了

18:33.400 --> 18:34.400
看你们的个人需求了

18:34.400 --> 18:35.400
一般来说

18:35.400 --> 18:37.400
我们这个账号这一块

18:37.400 --> 18:39.400
我们是忽略空格的

18:39.400 --> 18:41.400
守卫空格要忽略的

18:41.400 --> 18:43.400
所以我们需要守卫空格

18:43.400 --> 18:44.400
因为它是个制服串

18:44.400 --> 18:46.400
拿到文本框的值

18:46.400 --> 18:48.400
拿了这个Login ID

18:48.400 --> 18:49.400
它是一个制服串

18:49.400 --> 18:51.400
打印一下Login ID

18:51.400 --> 18:53.400
接下来比方说我们这里

18:53.400 --> 18:55.400
一开始是一个空白的制服串

18:55.400 --> 18:57.400
比方说我们输入一个abc

18:57.400 --> 19:00.400
ValidateLogin ID

19:00.400 --> 19:02.400
是不是得到abc

19:02.400 --> 19:04.400
我们这里输入一个这些东西

19:04.400 --> 19:06.400
是不是得到这么一个制服串

19:06.400 --> 19:08.400
接下来我要验证这个制服串

19:08.400 --> 19:09.400
是不是有效的

19:09.400 --> 19:11.400
比方说我这里的

19:11.400 --> 19:13.400
规则就是这样

19:13.400 --> 19:15.400
首先你不能围空

19:15.400 --> 19:17.400
首先你不能围空

19:17.400 --> 19:19.400
如果说

19:19.400 --> 19:21.400
那么我们这里

19:21.400 --> 19:22.400
设置一个辩量

19:22.400 --> 19:24.400
错误消息

19:24.400 --> 19:26.400
错误消息

19:26.400 --> 19:29.970
这是错误消息

19:29.970 --> 19:32.970
如果说你这个Login ID

19:32.970 --> 19:33.970
是围空的

19:33.970 --> 19:34.970
是没有值的

19:34.970 --> 19:35.970
是个空制服串

19:35.970 --> 19:37.970
那么这里就产生一个错误消息

19:37.970 --> 19:39.970
就是

19:44.300 --> 19:46.300
账号不能围空

19:46.300 --> 19:48.300
看你写什么错误消息

19:49.300 --> 19:51.300
如果说你这个账号

19:51.300 --> 19:53.300
写了账号lcf

19:53.300 --> 19:55.300
你写了账号

19:55.300 --> 19:57.300
但是账号不满足我们的要求

19:57.300 --> 19:58.300
比方什么要求呢

19:58.300 --> 20:00.300
比方说必须要是3到12位的

20:00.300 --> 20:03.300
那么你可能说你的账号的长度

20:03.300 --> 20:05.300
这个制服串的长度小为了3

20:05.300 --> 20:08.300
或者是你这个账号的制服串长度

20:08.300 --> 20:09.300
大于了12

20:09.300 --> 20:11.300
那么我们的错误消息是

20:11.300 --> 20:15.300
账号是3到12位的

20:15.300 --> 20:16.300
实际上登录的时候

20:16.300 --> 20:17.300
一般都没有这个验证

20:17.300 --> 20:19.300
租车的时候倒有可能有验证

20:19.300 --> 20:21.300
我这举个例子

20:21.300 --> 20:23.300
其他的情况下

20:23.300 --> 20:25.300
是不是就没有错误

20:25.300 --> 20:26.300
对吧

20:26.300 --> 20:28.300
看一下这个逻辑

20:29.300 --> 20:30.300
我这里是不是在

20:30.300 --> 20:32.300
是不是最终就要确定一个错误消息

20:32.300 --> 20:34.300
我们来输出这个错误消息

20:36.300 --> 20:37.300
比方说

20:37.300 --> 20:38.300
一开始你看错误消息

20:38.300 --> 20:40.300
是不是账号不能围空

20:40.300 --> 20:42.300
那么我们输入了一个东西

20:42.300 --> 20:43.300
再调用这个方法

20:43.300 --> 20:45.300
错误消息就围空了

20:45.300 --> 20:46.300
就没有错误消息了

20:46.300 --> 20:48.300
那如果说我只输了两位的账号

20:51.260 --> 20:52.260
他有个错误消息

20:52.260 --> 20:54.260
账号是3到12位的

20:54.260 --> 20:55.260
也就是说什么

20:55.260 --> 20:56.260
也就是说这个错误消息

20:56.260 --> 20:58.260
只要有值

20:58.260 --> 20:59.260
说明就有错误

20:59.260 --> 21:01.260
他没有值就没有错误

21:01.260 --> 21:02.260
对吧

21:02.260 --> 21:04.260
因此我们最后来判断

21:04.260 --> 21:06.260
是否有错误

21:07.260 --> 21:09.760
不管怎么样了

21:09.760 --> 21:10.760
这个错误消息

21:10.760 --> 21:11.760
是不是要设置到

21:11.760 --> 21:13.760
设置到这个辟源书里面去

21:13.760 --> 21:14.760
我们来设置一下

21:14.760 --> 21:19.390
Message.InnerText

21:21.390 --> 21:23.390
然后给他设置为说的错误消息

21:24.390 --> 21:26.390
设置错误消息

21:26.390 --> 21:29.390
到辟源书中

21:30.390 --> 21:31.390
那么接下来我要判断

21:31.390 --> 21:32.390
他到底有没有错误

21:32.390 --> 21:33.390
因为有错误的话

21:33.390 --> 21:35.390
我要给你这里加上Error

21:35.390 --> 21:36.390
没有错误的话

21:36.390 --> 21:37.390
我就没有Error

21:37.390 --> 21:38.390
所以我判断一下

21:38.390 --> 21:40.390
就判断错误消息就行了

21:40.390 --> 21:42.390
如果说有错误的话

21:42.390 --> 21:43.390
什么错误消息

21:43.390 --> 21:45.390
这个制服串有值

21:45.390 --> 21:46.390
有错误的话我怎么样了

21:46.390 --> 21:48.390
我给这个DIV

21:48.390 --> 21:50.390
当然这些写法很丰富

21:50.390 --> 21:51.390
最终的目标就是这个目标

21:51.390 --> 21:52.390
看你们怎么写

21:53.390 --> 21:54.390
给他的Class Name

21:54.390 --> 21:55.390
设置一下他内样是

21:55.390 --> 21:56.390
为什么

21:56.390 --> 21:58.390
为FormItem

21:58.390 --> 22:00.390
然后还有一个Error

22:00.390 --> 22:02.390
如果说没有错误的话

22:02.390 --> 22:04.390
那么给他的Class Name

22:05.390 --> 22:07.390
设置一个FormItem就可以了

22:07.390 --> 22:08.390
当然这一块也可以用

22:08.390 --> 22:09.390
三目运算服

22:09.390 --> 22:11.390
代码的写法太多了

22:12.390 --> 22:13.390
为什么呢

22:13.390 --> 22:14.390
如果说有错误

22:14.390 --> 22:15.390
我就给你

22:15.390 --> 22:16.390
是这个

22:16.390 --> 22:18.390
我就给你复指为这个

22:18.390 --> 22:20.390
没有错误就是这个

22:21.390 --> 22:22.390
这也可以用个三目运算服

22:22.390 --> 22:24.390
都行

22:24.390 --> 22:26.390
那么这个函数就写完了

22:26.390 --> 22:27.390
并不复杂

22:27.390 --> 22:28.390
我们来看一下

22:28.390 --> 22:30.390
一开始我验证了就有错误

22:30.390 --> 22:31.390
对吧

22:31.390 --> 22:32.390
但是一开始我一般是不验证的

22:32.390 --> 22:33.390
谁哪个表现一开始

22:33.390 --> 22:34.390
就会验证了

22:34.390 --> 22:35.390
不验证的

22:35.390 --> 22:36.390
好

22:36.390 --> 22:37.390
我们来接着来

22:38.390 --> 22:40.390
现在我们如果说验证一下

22:40.390 --> 22:41.390
是不是就出现错误了

22:41.390 --> 22:42.390
好

22:42.390 --> 22:43.390
这里写了两个

22:43.390 --> 22:44.390
再验证一下

22:44.390 --> 22:46.390
是不是有错误边了

22:46.390 --> 22:48.390
放大一点

22:49.390 --> 22:51.390
然后如果说这个也多写一点

22:51.390 --> 22:52.390
再验证

22:52.390 --> 22:53.390
是不是没有错误了

22:53.390 --> 22:54.390
也就是这个方法

22:54.390 --> 22:55.390
干什么用的

22:55.390 --> 22:56.390
知道了吗

22:56.390 --> 22:57.390
只要一调用它

22:57.390 --> 22:59.390
它那个错误状态

22:59.390 --> 23:00.390
错误消息

23:00.390 --> 23:01.390
就会变得正确

23:01.390 --> 23:03.390
那就会设置错误状态

23:03.390 --> 23:04.390
和错误消息

23:04.390 --> 23:05.390
那么同理

23:05.390 --> 23:07.390
我们是不是可以写出

23:07.390 --> 23:08.390
这个验证密码

23:09.390 --> 23:10.390
对吧

23:10.390 --> 23:11.390
没问题吧

23:11.390 --> 23:12.390
就写出这个验证密码

23:12.390 --> 23:14.390
基本代码都是一样的

23:14.390 --> 23:15.390
这一块实际上是

23:15.390 --> 23:17.390
有一些封装技巧的

23:17.390 --> 23:19.390
同学们可以自行考虑一下

23:19.390 --> 23:20.390
作为一个思考题

23:20.390 --> 23:21.390
这一块如果说了

23:21.390 --> 23:23.390
封装可能不是那么容易

23:23.390 --> 23:24.390
但是实际上是

23:24.390 --> 23:26.390
也有可能可以封装的

23:27.390 --> 23:28.390
后面就差不多了

23:28.390 --> 23:30.390
这里是locking password的

23:30.390 --> 23:33.770
这里是

23:33.770 --> 23:34.770
一个ID

23:34.770 --> 23:36.770
locking password

23:37.770 --> 23:38.770
这是密码

23:38.770 --> 23:40.770
看一下有没有写密码

23:40.770 --> 23:41.770
如果没有密码的话

23:41.770 --> 23:43.770
就是密码不能围空

23:44.770 --> 23:46.770
密码的话

23:46.770 --> 23:48.770
也是3到16位

23:49.770 --> 23:51.770
密码

23:51.770 --> 23:53.770
是3到16位的

23:55.770 --> 23:57.770
应该是6位以上

23:57.770 --> 23:59.770
现在密码基本上6位以上

24:00.770 --> 24:01.770
好了

24:01.770 --> 24:02.770
差不多了吧

24:02.770 --> 24:04.770
然后把这个稍微消息放进去

24:04.770 --> 24:06.770
然后判断一下有没有错误

24:06.770 --> 24:08.770
有错误给他弄出来就完事了

24:08.770 --> 24:09.770
那密码也搞定了

24:09.770 --> 24:11.770
好 咱们来试一下密码

24:12.770 --> 24:14.770
如果说没有写密码

24:14.770 --> 24:16.770
如果说没有写密码

24:16.770 --> 24:19.770
validate password

24:19.770 --> 24:21.770
所以密码不能围空

24:21.770 --> 24:23.770
然后写到3位4位

24:23.770 --> 24:25.770
然后再来

24:25.770 --> 24:27.770
这里有问题

24:27.770 --> 24:29.770
如果说密码

24:29.770 --> 24:30.770
我这里写错了

24:30.770 --> 24:32.770
locking password

24:33.770 --> 24:35.770
我这里写个几位

24:35.770 --> 24:37.770
密码是6到16位的

24:37.770 --> 24:39.770
对吧 然后再写一点

24:39.770 --> 24:41.770
所以OK了

24:41.770 --> 24:43.770
我们先把这个函数写出来

24:43.770 --> 24:45.770
那么接下来

24:45.770 --> 24:47.770
我们再写这么一个方法

24:47.770 --> 24:49.770
这个方法相当于是一个验证的归终

24:49.770 --> 24:51.770
就对整个表达进行验证

24:51.770 --> 24:53.770
那这个完全怎么做了

24:53.770 --> 24:55.770
怎么做了

24:55.770 --> 24:57.770
我是不是就可以这样子写

24:57.770 --> 24:59.770
先来验证一个

24:59.770 --> 25:01.770
locking id

25:01.770 --> 25:03.770
得到一个验证结果

25:03.770 --> 25:05.770
对 这里还没有返回结果

25:05.770 --> 25:07.770
验证错误

25:07.770 --> 25:09.770
就是有到底有没有错误

25:09.770 --> 25:11.770
是要返回一个结果的

25:11.770 --> 25:12.770
true和force

25:12.770 --> 25:14.770
如果说没有错误就是true

25:14.770 --> 25:16.770
有错误就是force

25:17.770 --> 25:18.770
懂了意思吧

25:18.770 --> 25:19.770
没有错误就是true

25:19.770 --> 25:21.770
有错误就是force

25:21.770 --> 25:23.770
验证吧

25:23.770 --> 25:25.770
好 那么这里要返回

25:25.770 --> 25:27.770
true还是force呢 是不是看它

25:27.770 --> 25:29.770
它有值就是true

25:29.770 --> 25:31.770
它有值就是force

25:31.770 --> 25:33.770
它没有值就是true

25:33.770 --> 25:35.770
是不是跟它取相反的情况

25:35.770 --> 25:37.770
完了

25:37.770 --> 25:39.770
不就完了吗 它有值就是

25:39.770 --> 25:41.770
force表示有错误

25:41.770 --> 25:43.770
它没有值就是true

25:43.770 --> 25:45.770
表示没有错误

25:46.770 --> 25:48.770
好 这边是一样的

25:49.770 --> 25:51.770
那么接下来我们这里

25:51.770 --> 25:53.770
先验证locking id

25:53.770 --> 25:55.770
再验证locking password

25:55.770 --> 25:57.770
验证密码

25:57.770 --> 25:59.770
对吧

25:59.770 --> 26:03.460
好 那么接下来呢

26:03.460 --> 26:05.460
我们

26:05.460 --> 26:07.460
这里边是不是也要返回一个true和force

26:07.460 --> 26:09.460
那么这里边的true和force

26:09.460 --> 26:11.460
是整个表达的

26:11.460 --> 26:13.460
整个表达要验证通过

26:13.460 --> 26:15.460
是不是所有的都必须要验证通过

26:15.460 --> 26:17.460
对吧 因此呢

26:17.460 --> 26:19.460
我们这里得到一个result1

26:19.460 --> 26:21.460
这里得到一个result2

26:21.460 --> 26:23.460
就两项的验证结果

26:23.460 --> 26:25.460
针对账号的验证结果

26:25.460 --> 26:27.460
针对密码的验证结果

26:27.460 --> 26:29.460
好 于是呢

26:29.460 --> 26:31.460
我们这里发挥

26:31.460 --> 26:33.460
r1 是不是

26:33.460 --> 26:35.460
r2呢

26:35.460 --> 26:37.460
r1并且r2

26:37.460 --> 26:39.460
如果说两个都委屈

26:39.460 --> 26:41.460
表达验证通过了

26:41.460 --> 26:43.460
一个为force 它都是force

26:43.460 --> 26:45.460
对吧 这里可以这样子验

26:45.460 --> 26:47.460
不是按照表达式的指示

26:47.460 --> 26:49.460
是不是也应该可以这样子验啊

26:49.460 --> 26:51.460
最好不要这样子验

26:51.460 --> 26:53.460
为什么

26:53.460 --> 26:55.460
因为这个并且

26:55.460 --> 26:57.460
它是有短路规则的

26:57.460 --> 26:59.460
如果说第一项验证失败了

26:59.460 --> 27:01.460
它不会继续往

27:01.460 --> 27:03.460
就第一项为force

27:03.460 --> 27:05.460
它就不会运行后边的表达式了

27:05.460 --> 27:07.460
就第二个函数就没有运行

27:07.460 --> 27:09.460
比方说你这样子验

27:09.460 --> 27:11.460
会导致一个结果

27:11.460 --> 27:13.460
比方说我这里只

27:13.460 --> 27:15.460
只有帐

27:15.460 --> 27:17.460
我都没写啊 都没写

27:17.460 --> 27:19.460
wind is full

27:19.460 --> 27:21.460
你看它只验证了第一颗

27:21.460 --> 27:23.460
为什么 因为第一个为force

27:23.460 --> 27:25.460
它就不会运行后边的

27:25.460 --> 27:27.460
因此呢 我得先把它全部都运行了之后

27:27.460 --> 27:29.460
我用这个变量来进行并验

27:29.460 --> 27:31.460
好 离开现在

27:31.460 --> 27:33.460
这两个都有了

27:33.460 --> 27:35.460
OK 我们三个

27:35.460 --> 27:37.460
最核心的函数就写完了

27:37.460 --> 27:39.460
当然如果说有更多的表达式

27:39.460 --> 27:41.460
它写的过程并不复杂

27:41.460 --> 27:43.460
就是有点麻烦

27:43.460 --> 27:45.460
麻烦

27:45.460 --> 27:47.460
然后一项一项写

27:47.460 --> 27:49.460
那么接下来我们来看一下

27:49.460 --> 27:51.460
怎么来用这三个方法

27:51.460 --> 27:53.460
就跟实验挂钩就行了

27:53.460 --> 27:55.460
怎么挂钩呢

27:55.460 --> 27:57.460
首先是输入账号的时候

27:57.460 --> 27:59.460
输入密码的时候

27:59.460 --> 28:01.460
是不是要做相应的验证

28:01.460 --> 28:03.460
下面就注册实验

28:03.460 --> 28:05.460
首先拿到账号

28:05.460 --> 28:07.460
账号是

28:07.460 --> 28:09.460
login

28:09.460 --> 28:12.840
ID

28:12.840 --> 28:14.840
来一个

28:14.840 --> 28:16.840
locument

28:16.840 --> 28:18.840
ID 下面的

28:18.840 --> 28:20.840
input 这是个闻闷框

28:20.840 --> 28:22.840
然后还有一个

28:22.840 --> 28:24.840
login password

28:24.840 --> 28:26.840
login password

28:26.840 --> 28:28.840
下面的闻闷框

28:28.840 --> 28:30.840
好 接下来我们给它注册

28:30.840 --> 28:32.840
实验

28:32.840 --> 28:34.840
它里边的都是闻闷框

28:34.840 --> 28:36.840
它里边有个input

28:36.840 --> 28:38.840
input的时间

28:38.840 --> 28:40.840
就是它里边的文字变化的时候

28:40.840 --> 28:42.840
我要干嘛呀

28:42.840 --> 28:44.840
不就是验证一下

28:44.840 --> 28:46.840
login id

28:46.840 --> 28:48.840
是不是运行这个函数

28:48.840 --> 28:50.840
然后login password

28:50.840 --> 28:52.840
它的闻闷改变的时候

28:52.840 --> 28:54.840
是不是我要验证

28:54.840 --> 28:56.840
validates password

28:56.840 --> 28:58.840
所以这个不能加扩号

28:58.840 --> 29:00.840
千万不能加扩号

29:00.840 --> 29:02.840
加扩号是什么意思

29:02.840 --> 29:04.840
注册时间

29:04.840 --> 29:08.340
它闻闷改变的时候

29:08.340 --> 29:10.340
不是运行函数

29:10.340 --> 29:12.340
而是运行这个

29:12.340 --> 29:14.340
函数的返回结果

29:14.340 --> 29:16.340
是雕用函数的返回结果

29:16.340 --> 29:18.340
这个返回结果是

29:18.340 --> 29:20.340
要么就是false

29:20.340 --> 29:22.340
要么就是true

29:22.340 --> 29:24.340
运行true和运行false

29:24.340 --> 29:26.340
它这个玩意怎么运行

29:26.340 --> 29:28.340
不能雕用啊

29:28.340 --> 29:30.340
要不然函数本身点它

29:30.340 --> 29:32.340
ok

29:32.340 --> 29:34.340
那么现在我们来看

29:34.340 --> 29:36.340
它就有反应了

29:36.340 --> 29:38.340
正确没问题 出过就出现问题

29:38.340 --> 29:40.340
也删掉 帐号不能违空

29:40.340 --> 29:42.340
懂了意思 然后看密码

29:44.340 --> 29:46.340
所以马上就会有反应

29:48.340 --> 29:50.340
这就是给这两个注册时间

29:50.340 --> 29:52.340
事件本身其实很简单的

29:52.340 --> 29:54.340
关键是事件后面的逻辑

29:54.340 --> 29:56.340
逻辑 功能

29:56.340 --> 29:58.340
这些东西写好之后

29:58.340 --> 30:00.340
事件就像连线一样

30:00.340 --> 30:02.340
迁过去就完事了

30:02.340 --> 30:04.340
还有一个时间点

30:04.340 --> 30:06.340
什么时间点的

30:06.340 --> 30:08.340
就是我要在提交表达的时候运行

30:08.340 --> 30:10.340
你这里不都验证了吗

30:10.340 --> 30:12.340
那提交反正它本来就有错误啊

30:12.340 --> 30:14.340
不是的 你看啊

30:14.340 --> 30:16.340
我现在就是验证错误了

30:16.340 --> 30:18.340
怎么样 我提交表达

30:18.340 --> 30:20.340
不是提交了吗

30:20.340 --> 30:22.340
因为我们这个错误

30:22.340 --> 30:24.340
它无非就是一个红色的文本

30:24.340 --> 30:26.340
它跟提交有什么关系的

30:26.340 --> 30:28.340
但是我们应该知道

30:28.340 --> 30:30.340
有错误的时候是不是不能提交的

30:30.340 --> 30:32.340
有也好 你回车也好

30:32.340 --> 30:34.340
你都不应该能提交

30:34.340 --> 30:36.340
所以说我们还要去控制提交事件

30:36.340 --> 30:38.340
找到forum元素

30:38.340 --> 30:41.720
document

30:41.720 --> 30:42.720
query

30:42.720 --> 30:43.720
select

30:43.720 --> 30:47.220
找到forumcontainer

30:47.220 --> 30:49.220
forum元素

30:49.220 --> 30:51.220
给它注册什么时间呢

30:51.220 --> 30:53.220
提交事件

30:53.220 --> 30:55.220
submit

30:55.220 --> 30:57.220
提交的时候要干嘛

30:57.220 --> 30:59.220
要验证整个表达

30:59.220 --> 31:01.220
要验证整个表达

31:01.220 --> 31:03.220
验证起动一个 实验证整个

31:03.220 --> 31:05.220
哪怕你现在啥也没写

31:05.220 --> 31:07.220
因为你没写

31:07.220 --> 31:09.220
我这里表达

31:09.220 --> 31:11.220
好像获取的错误了

31:11.220 --> 31:13.220
应该是单词写错了

31:13.220 --> 31:15.220
应该是这里 选择器写错了

31:15.220 --> 31:17.220
一个点

31:17.220 --> 31:19.220
它随便看一下错误吧

31:19.220 --> 31:21.220
要学会发现错误啊

31:21.220 --> 31:23.220
它说什么Khanat

31:23.220 --> 31:25.220
这种错误经常见到

31:25.220 --> 31:27.220
Khanat is read the properties of law

31:27.220 --> 31:29.220
什么意思

31:29.220 --> 31:31.220
读取属性

31:31.220 --> 31:32.220
谁叫属性

31:32.220 --> 31:34.220
闹的属性

31:34.220 --> 31:36.220
后面还给你告诉你

31:36.220 --> 31:38.220
它在常识读取add event listener

31:38.220 --> 31:39.220
说这么一长串

31:39.220 --> 31:40.220
啥意思

31:40.220 --> 31:42.220
它就说你在这里

31:42.220 --> 31:44.220
读这个属性add event listener

31:44.220 --> 31:45.220
但是呢

31:45.220 --> 31:47.220
前面这个东西是闹

31:47.220 --> 31:48.220
它读不出来这个属性

31:48.220 --> 31:50.220
没法从闹里面去读这个属性

31:50.220 --> 31:51.220
知道吧

31:51.220 --> 31:53.220
那么你就知道它是闹

31:53.220 --> 31:54.220
它为什么是闹呢

31:54.220 --> 31:56.220
那你肯定没有选中吧

31:56.220 --> 31:57.220
肯定没有选中它

31:57.220 --> 31:59.220
要学会发现错误啊

31:59.220 --> 32:01.220
有错误很正常的

32:01.220 --> 32:02.220
那就出了

32:02.220 --> 32:04.220
现在我们来看一下

32:04.220 --> 32:06.220
如果说我现在没有在闷框里面

32:06.220 --> 32:07.220
输入任何东西

32:07.220 --> 32:09.220
是不是又没有input的时间

32:09.220 --> 32:11.220
就没有出发这个时间

32:11.220 --> 32:13.220
那么它自然没有验证

32:13.220 --> 32:14.220
但是我现在直接回车

32:14.220 --> 32:16.220
或者直接点按钮

32:16.220 --> 32:17.220
不应该验证吗

32:17.220 --> 32:18.220
我们点击

32:18.220 --> 32:19.220
就验证了

32:19.220 --> 32:20.220
看到没

32:20.220 --> 32:21.220
就验证了

32:21.220 --> 32:22.220
但是有个问题

32:22.220 --> 32:23.220
验证就没了

32:23.220 --> 32:24.220
为什么没了

32:24.220 --> 32:27.220
表达还是提交了

32:27.220 --> 32:29.220
为什么表达还是要提交呢

32:29.220 --> 32:35.140
这就是事件的默认行为

32:35.140 --> 32:36.140
科目原术的

32:36.140 --> 32:37.140
《杉瓣秘书事件》

32:37.140 --> 32:38.140
刘兰棋会提交表达

32:38.140 --> 32:39.140
导致原术刷新

32:39.140 --> 32:41.140
它跟你验不验证无所谓

32:41.140 --> 32:42.140
它又不知道你验证了

32:42.140 --> 32:45.140
它就知道你搞了一个批元素

32:45.140 --> 32:46.140
大家在设置颜色

32:46.140 --> 32:47.140
设置那样式

32:47.140 --> 32:49.140
它又不知道这是干嘛用的

32:49.140 --> 32:51.140
因此它还是给你提交了

32:51.140 --> 32:52.140
因此呢

32:52.140 --> 32:53.140
这里

32:53.140 --> 32:55.140
我们要做什么一个处理

32:55.140 --> 33:01.240
e.prevent default

33:01.240 --> 33:02.240
阻止

33:02.240 --> 33:04.240
什么阻止那个

33:04.240 --> 33:06.240
刘兰棋默认行为

33:06.240 --> 33:07.240
对吧

33:07.240 --> 33:08.240
然后我们再去验证

33:08.240 --> 33:10.240
或者是先验证再阻止都行

33:10.240 --> 33:12.240
Vat is full

33:12.240 --> 33:14.240
是不是可以这样

33:14.240 --> 33:15.240
好咱们再试一下

33:15.240 --> 33:17.240
那现在我们按回车

33:17.240 --> 33:18.240
就马上就验证了

33:18.240 --> 33:20.240
这里我们改了

33:20.240 --> 33:21.240
再回车

33:21.240 --> 33:22.240
再提交

33:22.240 --> 33:23.240
是不是现在不会提交了

33:23.240 --> 33:26.240
因为默认行为被阻止了

33:26.240 --> 33:27.240
那什么时候可以提交了

33:27.240 --> 33:29.240
是不是这个时候就可以提交了

33:29.240 --> 33:30.240
但这个时候它也不会提交了

33:30.240 --> 33:31.240
为什么

33:31.240 --> 33:32.240
因为你把它阻止了

33:32.240 --> 33:35.240
那又怎么办呢

33:35.240 --> 33:36.240
还不简单吗

33:36.240 --> 33:39.240
我要根据你的验证结果来判断

33:39.240 --> 33:40.240
到底要不要阻止

33:40.240 --> 33:41.240
对吧

33:41.240 --> 33:43.240
如果说你验证结果为处

33:43.240 --> 33:46.240
表示验证通过

33:46.240 --> 33:48.240
验证通过了

33:48.240 --> 33:49.240
说就知道了吧

33:49.240 --> 33:51.240
为什么我要返回一个部门

33:51.240 --> 33:52.240
验证通过了

33:52.240 --> 33:53.240
那么我就提交

33:53.240 --> 33:54.240
我就啥也别说

33:54.240 --> 33:56.240
验证不通过的时候

33:57.240 --> 33:59.240
验证没有通过的时候

33:59.240 --> 34:01.240
我要阻止默认行为

34:01.240 --> 34:04.240
验证未通过

34:04.240 --> 34:07.240
阻止提交

34:07.240 --> 34:09.240
通过就提交了吧

34:09.240 --> 34:10.240
通过我就没有阻止了

34:10.240 --> 34:11.240
对吧

34:11.240 --> 34:12.240
我们来看一下

34:12.240 --> 34:13.240
现在肯定通不过

34:13.240 --> 34:15.240
因此我就写

34:15.240 --> 34:16.240
通过了

34:16.240 --> 34:18.240
回车就提交了

34:19.240 --> 34:23.240
这就是表单提交这一块的做法

34:23.240 --> 34:25.240
去写一遍

34:26.240 --> 34:27.240
第二道题比较简单

34:27.240 --> 34:29.240
第二题就几句话就说完了

34:29.240 --> 34:31.240
来看一下吧

34:31.240 --> 34:32.240
第二道题就是一个文闷框

34:32.240 --> 34:34.240
它可以输入商品价格

34:34.240 --> 34:36.240
那么自然而然

34:36.240 --> 34:39.240
这个商品价格得是一个数字

34:39.240 --> 34:41.240
它不能是别的玩意

34:41.240 --> 34:43.240
它得是一个数字

34:43.240 --> 34:48.150
我们来看一下

34:48.150 --> 34:49.150
这里面就一个文闷框

34:49.150 --> 34:50.150
啥都没有

34:50.150 --> 34:52.150
就练习一下这个

34:52.150 --> 34:55.460
然后戒业生就在这儿写吧

34:55.460 --> 34:57.460
我要注册什么事件

34:57.460 --> 34:58.460
是不是文闷框的改变事件

34:58.460 --> 34:59.460
它是不能输入输入的

34:59.460 --> 35:01.460
就是

35:01.460 --> 35:02.460
除了数字之外

35:02.460 --> 35:04.460
其他东西都不能按

35:04.460 --> 35:05.460
都不能按进去

35:05.460 --> 35:06.460
对吧

35:06.460 --> 35:07.460
那我只能去监听它的

35:07.460 --> 35:08.460
input的事件

35:08.460 --> 35:10.460
或者叫键盘按下的事件

35:10.460 --> 35:12.460
input

35:12.460 --> 35:14.460
dopument

35:14.460 --> 35:15.460
query

35:15.460 --> 35:16.460
negative

35:16.460 --> 35:18.460
input

35:18.460 --> 35:19.460
注册什么事件

35:19.460 --> 35:20.460
input

35:20.460 --> 35:21.460
add

35:21.460 --> 35:22.460
inventism

35:22.460 --> 35:23.460
title

35:23.460 --> 35:26.460
键盘按下的事件

35:26.460 --> 35:28.460
我发现你的按键不合适

35:28.460 --> 35:30.460
我就给你阻止实现默认行为

35:30.460 --> 35:31.460
那比方说我就粗暴一点

35:31.460 --> 35:33.460
直接prevents default

35:33.460 --> 35:35.460
它会发生一个什么事呢

35:35.460 --> 35:38.460
这个文闷框写不进去东西了

35:38.460 --> 35:39.460
为什么呢

35:39.460 --> 35:40.460
本来默认行为

35:40.460 --> 35:41.460
就是你把你键盘的按键

35:41.460 --> 35:42.460
给你写进去

35:42.460 --> 35:43.460
对吧

35:43.460 --> 35:44.460
但是你阻止的默认行为

35:44.460 --> 35:46.460
它就不会写进去东西了

35:46.460 --> 35:48.460
可以做到的

35:48.460 --> 35:50.460
但是我不是所有的情况都阻止

35:50.460 --> 35:51.460
我要阻止什么呢

35:51.460 --> 35:53.460
我要阻止的是

35:53.460 --> 35:55.460
一些特殊的按键

35:56.460 --> 35:58.460
有一些特殊的按键

35:58.460 --> 35:59.460
好

35:59.460 --> 36:01.460
那比方说我这里阻止的是什么呢

36:01.460 --> 36:03.460
我就看一下你的按键

36:03.460 --> 36:05.460
里边是不是权威数字

36:05.460 --> 36:07.460
都是数字类型的

36:07.460 --> 36:08.460
我就可以

36:08.460 --> 36:09.460
我就通过

36:09.460 --> 36:11.460
或者说我在这里定一个边量吧

36:11.460 --> 36:12.460
announce

36:13.460 --> 36:15.460
我允许哪些按键呢

36:15.460 --> 36:16.460
允许

36:17.460 --> 36:18.460
一

36:20.460 --> 36:21.460
二

36:21.460 --> 36:22.460
注意是制服错

36:22.460 --> 36:24.460
它的按键的都是制服错

36:25.460 --> 36:26.460
四

36:26.460 --> 36:27.460
五

36:27.460 --> 36:28.460
六

36:29.460 --> 36:32.840
或者用循环加也行

36:33.840 --> 36:34.840
零

36:35.840 --> 36:36.840
是吧

36:36.840 --> 36:37.840
然后呢

36:37.840 --> 36:38.840
我在

36:38.840 --> 36:39.840
就行吧

36:39.840 --> 36:41.840
就这些数字按键我都允许

36:41.840 --> 36:42.840
因此我这里判断

36:42.840 --> 36:43.840
我这里输出一下

36:43.840 --> 36:44.840
你的T

36:44.840 --> 36:48.340
你按键的是哪个键

36:48.340 --> 36:49.340
我们这里按一个E

36:49.340 --> 36:51.340
是不是就是一个制服错E

36:51.340 --> 36:53.340
它这里得到全是制服错E

36:53.340 --> 36:54.340
一看

36:55.340 --> 36:56.340
对吧

36:57.340 --> 36:58.340
那我这里呢

36:59.340 --> 37:02.550
不好意思

37:02.550 --> 37:03.550
好

37:03.550 --> 37:05.550
那么现在我要做的事情就是

37:05.550 --> 37:06.550
我要看你按的按键

37:06.550 --> 37:08.550
再不在这个数组里边

37:08.550 --> 37:09.550
对吧

37:09.550 --> 37:10.550
所以我们判断一下

37:10.550 --> 37:11.550
announce

37:11.550 --> 37:12.550
include

37:12.550 --> 37:13.550
还记得吗

37:13.550 --> 37:14.550
数组里边有一个方法

37:14.550 --> 37:15.550
叫in

37:16.550 --> 37:17.550
announce

37:17.550 --> 37:18.550
include

37:19.550 --> 37:21.550
是不是包含你的E点T

37:22.550 --> 37:24.550
是不是包含你的按键

37:24.550 --> 37:26.550
如果说你的按键在这个数组里边

37:26.550 --> 37:27.550
说明什么

37:27.550 --> 37:28.550
ok

37:28.550 --> 37:29.550
我就允许

37:29.550 --> 37:30.550
换句话说

37:30.550 --> 37:32.550
如果说不在这个数组里边

37:32.550 --> 37:33.550
或怎么样

37:33.550 --> 37:34.550
我就逐字摸能行为

37:36.550 --> 37:37.550
好

37:37.550 --> 37:38.550
咱们来看一下

37:38.550 --> 37:39.550
其他的按键都无效

37:39.550 --> 37:40.550
只有数字可以按

37:40.550 --> 37:41.550
对吧

37:41.550 --> 37:43.550
当然我这里不是很严谨

37:43.550 --> 37:44.550
简单做了一下

37:44.550 --> 37:45.550
你底耳是不能按的

37:45.550 --> 37:46.550
小数点也没法按

37:46.550 --> 37:47.550
然后退革

37:47.550 --> 37:49.550
除了三除也没法按

37:49.550 --> 37:51.550
三除键也没法按

37:51.550 --> 37:52.550
因此这一块

37:52.550 --> 37:53.550
如果说你要做的

37:53.550 --> 37:55.550
更加完美一点的话

37:55.550 --> 37:56.550
还要写不少的代码

37:56.550 --> 37:57.550
那么同学们现在不用去管这个

37:57.550 --> 37:59.550
以后我们会有一些

37:59.550 --> 38:00.550
别人跟我们做好的东西

38:00.550 --> 38:01.550
直接拿过来用就行了

38:01.550 --> 38:03.550
只是我们通过这个点

38:03.550 --> 38:05.550
让同学们知道

38:05.550 --> 38:07.550
文闷框是可以做成这个样子的

38:07.550 --> 38:08.550
你们可以发现

38:08.550 --> 38:10.550
在上网的过程中

38:10.550 --> 38:12.550
有一些文闷框只能输入数字

38:12.550 --> 38:13.550
你去试一下

38:13.550 --> 38:15.550
它真的只能输入数字

38:15.550 --> 38:17.550
你其他按键是按是无效的

38:17.550 --> 38:19.550
它就是通过这种方式来做的

38:19.550 --> 38:20.550
好吧

38:20.550 --> 38:21.550
这就是咱们这里的做业

38:21.550 --> 38:23.550
把两个问题都做一下

