WEBVTT

00:00.370 --> 00:05.130
好 我们这节课来研究数据的表达 继续来研究

00:05.130 --> 00:08.450
我们所谓的数据表达 就是一个数据怎么去写出来

00:08.450 --> 00:10.970
把它写出来 表达到程序里边

00:10.970 --> 00:15.850
另外我们还要研究就是怎么把它取出来 怎么去修改它 对吧

00:15.850 --> 00:19.050
好 我们这节课主要是研究对象的表达

00:19.050 --> 00:22.530
那为什么需要对象呢 我们来看一下介石里面的数据内容

00:22.530 --> 00:25.730
无非就是这么几种内容 对吧 原式内容和引用内容

00:25.730 --> 00:29.890
原式内容里面有Number, String, Building, Now, Undefend

00:30.250 --> 00:34.450
原来对这个NOW undefend有点分不清楚 啥啥分不清楚

00:34.450 --> 00:38.210
那么这个undefend是什么意思呢 就表示你根本就没有定义

00:38.210 --> 00:40.970
它表示未定义 就是没有这个东西

00:40.970 --> 00:46.770
那么它通常出现在什么情况下呢 比方说你这里写了一个GS

00:46.770 --> 00:49.890
你订了一个变量 这个变量你又没有复制 对吧

00:49.890 --> 00:52.210
那么这个变量的值就是undefend

00:52.210 --> 00:57.250
我们看一下右边右侧 不就是undefend对吧

00:57.410 --> 01:00.810
还有的时候我们写了一个对象 这个对象里边呢

01:00.810 --> 01:03.010
我要去读它一个不存在的属性

01:03.010 --> 01:07.730
那么这个时候它也是undefend的 它不会爆错 它是undefend的

01:07.730 --> 01:11.170
这就是未定义的意思 就没有这个东西 对吧

01:11.170 --> 01:16.410
它里边就没有存过东西 好 那么什么叫NOW呢

01:16.410 --> 01:20.250
NOW跟undefend的区别就在于 就是undefend是什么意思

01:20.250 --> 01:26.970
就是比方开了一个内存空间 但是我忘记了往里边放东西了

01:26.970 --> 01:30.650
这就是undefend的未定义 或者说我根本没有这个箱子

01:30.650 --> 01:33.330
也就是未定义 那什么叫NOW呢

01:33.330 --> 01:37.530
NOW就是我知道有这个箱子 有可以放东西

01:37.530 --> 01:42.010
然后现在我确实是没有东西可以放 我不是忘记了

01:42.010 --> 01:46.490
我没有东西可以放 所以说我需要手动的给它复制为NOW

01:46.490 --> 01:51.210
就这个含义上的区别 没有什么太大的本质区别了

01:51.210 --> 01:56.010
本身说实话 其实要一个NOW就够了

01:56.210 --> 01:59.890
要什么undefend的呀 或者是要一个undefend的就够了

01:59.890 --> 02:04.090
要什么NOW啊 当时设计的时候呢 其实没有考虑到很全面

02:04.090 --> 02:06.930
因为当时这个企业是语言 就两则就设计出来了

02:06.930 --> 02:10.050
所以说有一些地方呢 你不能说它是bug

02:10.050 --> 02:12.970
现在变成了什么 变成了fature

02:12.970 --> 02:16.570
fature的意思 表示特征 这个是语言的特点

02:16.570 --> 02:19.530
所以说你们以后到公司里边 测试说

02:19.530 --> 02:21.570
或者是产品经理说 你这里是个bug

02:21.570 --> 02:24.330
这不是bug 那叫fature 那叫特点

02:24.370 --> 02:28.210
这是我们的有个性的东西 就变成这样子的

02:28.210 --> 02:31.930
那么它既然是这样子 现在也不可能去改回来了

02:31.930 --> 02:34.210
你们要考虑到接种性的问题 不可能改了

02:34.210 --> 02:36.930
所以我们就这样去计吧 就是NOW是什么呢

02:36.930 --> 02:39.690
NOW就是你手动的给它复制 它叫NOW

02:39.690 --> 02:43.250
你没有给它手动复制为NOW

02:43.250 --> 02:48.090
它一定不会是NOW 一定是undefend 就这么一个东西

02:48.090 --> 02:50.330
就是说一些原式内行就这么一些了

02:50.330 --> 02:54.330
然后除了原式内行之外 还有一些引用内行

02:54.330 --> 02:57.330
这个引用内行就只有一种 叫对象

02:57.330 --> 03:00.330
包括什么普通对象 就两个大胞号

03:00.330 --> 03:05.330
包括我们后边要复辞的数组函数 函数也是对象

03:05.330 --> 03:09.330
你后边我复辞到这一块就知道了 都叫做对象

03:09.330 --> 03:12.330
我们这些可能只研究普通对象

03:12.330 --> 03:16.330
普通对象研究清楚了过后 剩下的东西就比较好说了

03:16.330 --> 03:18.330
这就是我们这里数据内行

03:18.330 --> 03:21.330
那么我们什么时候用对象 什么时候用原式内行呢

03:21.330 --> 03:26.330
非常简单 对象就是什么呢 就是一些复合型的数据

03:26.330 --> 03:32.960
复合型 什么叫复合型的数据

03:32.960 --> 03:35.960
它这个东西它不是单个数据 比方说人

03:35.960 --> 03:39.960
人里边有很多很多的信息 有姓名 年龄 身高 体重

03:39.960 --> 03:46.960
出生日期 然后工作 职位 所属的部门

03:46.960 --> 03:51.960
薪资待遇 毕业的学校 很多很多的 特别多的信息

03:51.960 --> 03:56.960
那么这么多复合型的信息 那就需要用对象来表达了

03:56.960 --> 03:59.960
它不是单个数据 什么叫单个数据呢

03:59.960 --> 04:03.960
一个分数 一个数字 一个名字 它叫单个数据

04:03.960 --> 04:05.960
单个数据用原式内行就够了

04:05.960 --> 04:08.960
但是像很多信息那就是复合型的数据

04:08.960 --> 04:12.960
其实复合型的数据也就是原式型 揉在一起的

04:12.960 --> 04:17.960
就好比说我们古代说 金木 水火土 五种基本元素

04:17.960 --> 04:21.960
然后反复的组装多少 金家火 然后再加土 再加木

04:21.960 --> 04:23.960
然后就组装成了世间的万物

04:23.960 --> 04:27.960
这是一种古典哲学的一种想法

04:28.960 --> 04:31.960
那么我们来看一下我们的题 还是做练习题

04:31.960 --> 04:33.960
练习题做了过后基本上就了解了

04:33.960 --> 04:37.960
第一题 这里有三个单个数据

04:38.960 --> 04:44.960
那么现在呢 它来表示一个人

04:44.960 --> 04:48.960
这个人就是邓格 把它组装成一个对象

04:48.960 --> 04:51.960
对象的属性名和变量名是一样的

04:51.960 --> 04:53.960
那我们来写一下这一块

04:53.960 --> 04:55.960
那我们定一个变量吧

04:55.960 --> 04:58.960
你们可以在老师写之前暂停视频

04:58.960 --> 05:00.960
像每一道题都可以

05:00.960 --> 05:02.960
像老师写之前暂停视频自己去做一做

05:02.960 --> 05:05.960
然后再来写 效果是最好的

05:05.960 --> 05:07.960
我们这里定个变量 就该写个邓格吧

05:07.960 --> 05:09.960
邓格用什么英文单词呢

05:09.960 --> 05:11.960
我是真不知道了 邓brother

05:13.960 --> 05:16.960
然后呢 写个对象 打对象两个大货号嘛

05:16.960 --> 05:18.960
这就是对象的字变量表示方式

05:18.960 --> 05:21.960
把这个数据保存到变量 邓格里边

05:21.960 --> 05:23.960
邓brother里边

05:24.960 --> 05:27.960
或者说我们用bro

05:27.960 --> 05:29.960
黑bro

05:29.960 --> 05:30.960
邓格

05:30.960 --> 05:32.960
好 邓格里面有三个属性的

05:32.960 --> 05:35.960
我们这些符合信息不就是属性的形式存在吗

05:35.960 --> 05:38.960
好 属性的名字呢 跟变量名一样

05:38.960 --> 05:40.960
比方说我们第一个属性是name

05:40.960 --> 05:43.960
好 那么它的值来自于哪呢 是不是邓格

05:43.960 --> 05:44.960
对吧

05:44.960 --> 05:47.960
那你看啊 这是不是字面量

05:47.960 --> 05:50.960
把字面量负值给这个属性 是不是这种写法

05:50.960 --> 05:52.960
那么这里是不是写数据啊

05:52.960 --> 05:54.960
属性的值嘛 值就是数据嘛

05:54.960 --> 05:56.960
是不是把数据负值给这个属性名

05:56.960 --> 05:58.960
好 我们之前怎么说的表达是

05:58.960 --> 06:01.960
那个所有可以写数据的地方

06:01.960 --> 06:03.960
都可以写三个东西 一个是变量

06:03.960 --> 06:05.960
一个是字面量 一个是表达式

06:05.960 --> 06:07.960
那我这里可以写字面量

06:07.960 --> 06:09.960
那我能不能把这个变量也放过来呢

06:09.960 --> 06:12.960
可不可以呢 当然可以啊 为什么不行呢

06:12.960 --> 06:14.960
当然是没问题的啊

06:14.960 --> 06:16.960
它这个横向也可化了 不用管它

06:16.960 --> 06:18.960
管它不用管它 这是一个特别的原因

06:18.960 --> 06:20.960
是不是可以 可以的啊 但是

06:20.960 --> 06:22.960
这个name跟这个name不一样的啊

06:22.960 --> 06:24.960
这个name表示属性的名字

06:24.960 --> 06:26.960
这个name它表示的属性的值

06:26.960 --> 06:28.960
值来自于哪呢 来自于

06:28.960 --> 06:30.960
变量0

06:30.960 --> 06:32.960
把变量的读出来

06:32.960 --> 06:35.960
变量的值 灯格读出来

06:35.960 --> 06:37.960
放到这个位置

06:37.960 --> 06:38.960
是这么个意思啊

06:38.960 --> 06:41.960
就是我这到底的主要目的就是要说这个

06:41.960 --> 06:44.960
A级 那么A级

06:44.960 --> 06:46.960
6就完了

06:46.960 --> 06:48.960
我就要说这个东西

06:48.960 --> 06:51.960
然后我们输出灯PRO

06:52.960 --> 06:53.960
运球

06:54.960 --> 06:56.960
PRO

06:58.960 --> 06:59.960
所以可以了

06:59.960 --> 07:01.960
对吧 这就是这个

07:01.960 --> 07:04.960
当然了 如果说我只输出一个属性名的话

07:04.960 --> 07:06.960
那可以啊 那就是

07:06.960 --> 07:08.960
这个对象 保存到这个变量

07:08.960 --> 07:10.960
把个变量里面的对象读出来

07:10.960 --> 07:12.960
然后取它的什么name属性

07:12.960 --> 07:14.960
就输出Name 取它的A级属性

07:14.960 --> 07:16.960
就输出A级

07:16.960 --> 07:18.960
很简单的 对吧

07:18.960 --> 07:20.960
我们不仅要表达一个数据

07:20.960 --> 07:23.960
还会取出这个数据里面的部分信息

07:24.960 --> 07:26.960
当然修改的话也没问题

07:26.960 --> 07:28.960
灯PRO

07:28.960 --> 07:30.960
灯PRO

07:30.960 --> 07:31.960
点Name

07:31.960 --> 07:34.960
对吧 给它改为灯序名

07:35.960 --> 07:37.960
那么这里再输出一下这灯哥

07:38.960 --> 07:39.960
这边名字就改了

07:39.960 --> 07:41.960
这就是对象的表达

07:41.960 --> 07:43.960
这第一题

07:43.960 --> 07:45.960
好 再看第二题

07:46.960 --> 07:48.960
咱们的圈哥 来了啊 圈哥

07:48.960 --> 07:51.960
这个圈有很多的信息

07:51.960 --> 07:53.960
那典型的符合型数据

07:53.960 --> 07:55.960
对吧 那肯定是用对象来表达

07:55.960 --> 07:57.960
有哪些信息大对应

07:57.960 --> 08:00.960
于千蓝 职业朋友 手机号

08:00.960 --> 08:02.960
将会人称千哥

08:02.960 --> 08:05.960
家住北京 八大胡同

08:05.960 --> 08:08.960
其父亲 那就是丁丁大名的王老爷子

08:08.960 --> 08:10.960
是一个古汉语的专家

08:10.960 --> 08:12.960
那么现在有这么多信息

08:12.960 --> 08:14.960
那么我们需要在程序里表达

08:14.960 --> 08:15.960
用什么表达呢

08:15.960 --> 08:17.960
首先你要选择一个类型

08:17.960 --> 08:19.960
你这么多信息用一个字符算

08:19.960 --> 08:20.960
那肯定不合适

08:20.960 --> 08:21.960
那没有区分

08:21.960 --> 08:24.960
所以说我们要选择一些合适的信息来表达

08:25.960 --> 08:28.960
然后再来一个72岁

08:31.660 --> 08:33.660
好 来吧 我们来表达这个

08:33.660 --> 08:35.660
用一个变量 定一个变量来保存一下

08:35.660 --> 08:38.660
于千

08:40.660 --> 08:41.660
设个对象

08:41.660 --> 08:42.660
那里边有很多信息

08:42.660 --> 08:44.660
每个信息就是一个属性呗

08:44.660 --> 08:45.660
首先是名字

08:45.660 --> 08:47.660
那个名字叫于千

08:48.660 --> 08:51.660
然后有个年龄 72

08:52.660 --> 08:53.660
一个新别

08:53.660 --> 08:55.660
新别这里我给大家说一下

08:55.660 --> 08:58.660
你可以用字符算 男 女

08:58.660 --> 08:59.660
可以 没问题

08:59.660 --> 09:02.660
有的人他又喜欢用另外一个东西

09:02.660 --> 09:04.660
用那个布尔

09:04.660 --> 09:07.660
比方说他用处来表示男约

09:07.660 --> 09:09.660
性别只有两种

09:09.660 --> 09:11.660
我们不考虑那些

09:11.660 --> 09:13.660
很花烧的性别

09:13.660 --> 09:15.660
我们不考虑这种情况

09:15.660 --> 09:17.660
我们就认为他是两种

09:17.660 --> 09:18.660
男和女

09:18.660 --> 09:19.660
如果说是这样认为的话

09:19.660 --> 09:20.660
那有些考虑

09:20.660 --> 09:21.660
有些国外的

09:21.660 --> 09:22.660
特别是国外的网站

09:22.660 --> 09:24.660
他们要追求政治正确

09:24.660 --> 09:26.660
所以他们在网站上的

09:26.660 --> 09:27.660
性别那一块

09:28.660 --> 09:31.660
我记得是有十多个性别

09:31.660 --> 09:32.660
反正有很多很多的性别

09:32.660 --> 09:34.660
那就不能用布尔了

09:34.660 --> 09:35.660
我说的布尔就是

09:35.660 --> 09:36.660
你这个网站

09:36.660 --> 09:37.660
或者你这个系统里边

09:37.660 --> 09:38.660
性别只有两种状态

09:38.660 --> 09:40.660
那可以用布尔了

09:40.660 --> 09:41.660
用处来表示男

09:41.660 --> 09:43.660
用处来表示女

09:43.660 --> 09:44.660
女全不要打我

09:44.660 --> 09:46.660
女要说处来表示女

09:46.660 --> 09:47.660
处来表示男

09:47.660 --> 09:48.660
也可以

09:48.660 --> 09:49.660
没问题的都可以

09:49.660 --> 09:50.660
我总得说一个吧

09:51.660 --> 09:53.660
好 那么现在

09:53.660 --> 09:54.660
就是你可以用布尔来表达

09:54.660 --> 09:55.660
对吧 也可以

09:55.660 --> 09:56.660
你用知不知布尔

09:56.660 --> 09:57.660
布尔都可以

09:57.660 --> 09:58.660
那用布尔的时候

09:58.660 --> 10:00.660
最好把属性名改一下

10:00.660 --> 10:02.660
因为你光从一个CX的话

10:02.660 --> 10:04.660
你很难知道处表示男

10:04.660 --> 10:05.660
还是处表示女

10:05.660 --> 10:06.660
你很难知道

10:06.660 --> 10:07.660
所以说你最好

10:07.660 --> 10:08.660
把属性名改一下

10:08.660 --> 10:10.660
这是一个开发的

10:11.660 --> 10:13.660
企业开发的一个技巧

10:13.660 --> 10:14.660
这个网站光学知识

10:14.660 --> 10:15.660
是学不到的

10:15.660 --> 10:16.660
比方说我们

10:16.660 --> 10:18.660
如果说用布尔来表达的话

10:18.660 --> 10:19.660
那就应该

10:19.660 --> 10:20.660
用这么一个单词

10:21.660 --> 10:22.660
意识开头

10:22.660 --> 10:23.660
意识是什么

10:23.660 --> 10:24.660
是不是

10:24.660 --> 10:25.660
对吧 有没有

10:25.660 --> 10:27.660
还是表示有没有

10:27.660 --> 10:29.660
意识表示是不是

10:29.660 --> 10:30.660
我们在代码里面

10:30.660 --> 10:31.660
往往看到

10:31.660 --> 10:33.660
意识开头的名字

10:33.660 --> 10:35.660
那么我们往往就知道

10:35.660 --> 10:36.660
它

10:36.660 --> 10:38.660
十字八九跟那个布尔相关

10:38.660 --> 10:39.660
那么意识什么呢

10:39.660 --> 10:40.660
是不是什么

10:40.660 --> 10:41.660
是不是男

10:41.660 --> 10:42.660
男是没有

10:44.660 --> 10:45.660
那么这样子的话

10:45.660 --> 10:46.660
一看这个名字

10:46.660 --> 10:47.660
是不是就知道了

10:47.660 --> 10:48.660
是不是男

10:48.660 --> 10:49.660
那肯定就是

10:49.660 --> 10:50.660
处表示男

10:50.660 --> 10:51.660
处表示女

10:51.660 --> 10:52.660
那如果说你是要

10:52.660 --> 10:53.660
处表示女

10:53.660 --> 10:54.660
那就写female

10:56.660 --> 10:57.660
对不对

10:57.660 --> 10:58.660
isfemale

10:58.660 --> 10:59.660
那么处

10:59.660 --> 11:00.660
是不是女

11:00.660 --> 11:01.660
那处就表示女

11:01.660 --> 11:02.660
处表示男

11:02.660 --> 11:03.660
就很直观

11:03.660 --> 11:04.660
懂得意思吧

11:04.660 --> 11:06.660
就是为了方便阅读

11:06.660 --> 11:07.660
如果说你要用布尔来表示

11:07.660 --> 11:08.660
就用这样来表示

11:09.660 --> 11:10.660
好 职业捧根

11:10.660 --> 11:13.660
职业就是叫捧根

11:14.660 --> 11:15.660
手机号

11:15.660 --> 11:17.660
好了 这里又一个小的细节

11:17.660 --> 11:18.660
经验

11:19.660 --> 11:21.660
手机号用什么来表达

11:21.660 --> 11:22.660
有同学说

11:22.660 --> 11:23.660
我相信八九十个同学

11:23.660 --> 11:25.660
都应该会说数字

11:25.660 --> 11:26.660
对吧

11:26.660 --> 11:27.660
但是手机号

11:27.660 --> 11:28.660
实际上不是用数字来表达

11:28.660 --> 11:29.660
应该用字幅创

11:30.660 --> 11:31.660
那有同学就要问

11:31.660 --> 11:32.660
这个明显是数字

11:32.660 --> 11:33.660
你为什么不用数字来表达

11:33.660 --> 11:35.660
你为什么要写个字幅创呢

11:35.660 --> 11:36.660
是这样

11:36.660 --> 11:37.660
在程序里边

11:37.660 --> 11:38.660
我们有这么一个习惯

11:38.660 --> 11:39.660
就是

11:40.660 --> 11:41.660
虽然有的时候

11:41.660 --> 11:42.660
它看上去像是一个数字

11:42.660 --> 11:44.660
但是它其实是一个字幅创

11:44.660 --> 11:46.660
那我们怎么区分呢

11:46.660 --> 11:47.660
非常简单

11:47.660 --> 11:48.660
你就读一下

11:48.660 --> 11:50.660
你是按照数字来读

11:50.660 --> 11:52.660
还是字幅创来读

11:52.660 --> 11:54.660
你读手机号打读的

11:54.660 --> 11:56.660
138 1234 1234

11:56.660 --> 11:57.660
这是正常的读法

11:57.660 --> 11:58.660
对吧

11:58.660 --> 11:59.660
这种读法就是字幅创

11:59.660 --> 12:00.660
它是一个字幅

12:00.660 --> 12:02.660
一个字幅往外蹦的

12:02.660 --> 12:03.660
字幅创

12:03.660 --> 12:05.660
从做到与读习读去

12:05.660 --> 12:06.660
那什么叫数字读法呢

12:06.660 --> 12:08.660
我给它来一个变态的读法

12:09.660 --> 12:10.660
哥们

12:10.660 --> 12:11.660
你手机号多少

12:11.660 --> 12:14.660
我的手机号是138亿

12:14.660 --> 12:16.660
1234万1234

12:16.660 --> 12:18.660
这叫数字的读法

12:18.660 --> 12:20.660
如果说你觉得

12:20.660 --> 12:22.660
原来是我就是这样读的

12:22.660 --> 12:23.660
我从做到它读手机号

12:23.660 --> 12:24.660
就是这样读的

12:24.660 --> 12:25.660
好 哪里牛逼

12:25.660 --> 12:26.660
哪里就用数字

12:26.660 --> 12:27.660
对吧

12:27.660 --> 12:28.660
但是世界上

12:28.660 --> 12:29.660
其他人

12:29.660 --> 12:30.660
没有那么牛逼的人

12:30.660 --> 12:32.660
那么它就得用字幅创了

12:32.660 --> 12:33.660
因为它是按字幅创的读法

12:33.660 --> 12:34.660
就这么简单

12:34.660 --> 12:35.660
这是最简单的区分

12:35.660 --> 12:36.660
它到底应该是个数字

12:36.660 --> 12:37.660
还是字幅创

12:39.660 --> 12:40.660
懂了意思吧

12:40.660 --> 12:41.660
包括什么

12:41.660 --> 12:42.660
身份证号

12:42.660 --> 12:43.660
应该是什么

12:43.660 --> 12:44.660
字幅创

12:44.660 --> 12:45.660
学号

12:45.660 --> 12:46.660
应该是什么

12:46.660 --> 12:47.660
字幅创

12:47.660 --> 12:48.660
就是这么一个意思

12:48.660 --> 12:50.660
手机号用字幅创

12:50.660 --> 12:51.660
江湖人称千歌

12:51.660 --> 12:53.660
那么我们用nikname

12:53.660 --> 12:55.660
你称

12:55.660 --> 12:56.660
这个nikname是一个单词

12:56.660 --> 12:57.660
所以说我这里没有

12:57.660 --> 12:58.660
把这个n大写

13:00.660 --> 13:01.660
千歌

13:01.660 --> 13:02.660
就表拉出来了

13:02.660 --> 13:03.660
我们就要追求

13:03.660 --> 13:05.660
追求一个数据的表达

13:06.660 --> 13:07.660
家住 北京

13:07.660 --> 13:09.660
八大普通

13:09.660 --> 13:10.660
那么这是地址

13:10.660 --> 13:11.660
对吧

13:12.660 --> 13:13.660
有的程序有喜欢写一个

13:13.660 --> 13:14.660
addr

13:14.660 --> 13:15.660
写个说写就可以了

13:17.660 --> 13:18.660
那么这个adr

13:18.660 --> 13:19.660
是一个什么

13:19.660 --> 13:20.660
你可以把它写成一个字幅创

13:20.660 --> 13:22.660
这里有两种表达方式

13:23.660 --> 13:24.660
比较粗略的表达方式

13:24.660 --> 13:25.660
就是写一个字幅创

13:25.660 --> 13:26.660
非常粗略的

13:27.660 --> 13:28.660
再精细一点的话

13:28.660 --> 13:29.660
我们可以认为

13:29.660 --> 13:31.660
它是分为城市

13:31.660 --> 13:33.660
和街道

13:33.660 --> 13:34.660
两个部分

13:34.660 --> 13:35.660
城市和街道

13:35.660 --> 13:36.660
就好比说

13:36.660 --> 13:37.660
在页面上填信息的时候

13:37.660 --> 13:38.660
说城市啊

13:38.660 --> 13:39.660
省份啊都分开田的

13:39.660 --> 13:40.660
对吧

13:40.660 --> 13:41.660
如果说了

13:41.660 --> 13:42.660
区分开的话

13:42.660 --> 13:43.660
那么这个

13:43.660 --> 13:44.660
而追求本身

13:44.660 --> 13:45.660
也是一个复合型数据

13:45.660 --> 13:46.660
所以这一块

13:46.660 --> 13:47.660
你可以用对象来表达

13:48.660 --> 13:49.660
对吧

13:49.660 --> 13:50.660
因为它是一个复合型数据

13:50.660 --> 13:51.660
它要分成多个数据的

13:51.660 --> 13:52.660
好

13:52.660 --> 13:53.660
那么这里

13:53.660 --> 13:54.660
我们就可以写个

13:54.660 --> 13:55.660
Provence

13:55.660 --> 13:56.660
City

13:56.660 --> 13:57.660
这里没有设置省份

13:57.660 --> 13:58.660
城市是什么

13:58.660 --> 13:59.660
城市是北京

14:02.030 --> 14:03.030
街道呢

14:03.030 --> 14:05.030
街道是八大普通

14:07.030 --> 14:08.030
对吧

14:08.030 --> 14:09.030
它也是个复合型数据

14:10.030 --> 14:11.030
没问题吧

14:11.030 --> 14:13.030
我们就要追寻数据的表达

14:13.030 --> 14:14.030
好

14:14.030 --> 14:15.030
接下来

14:15.030 --> 14:16.030
其父亲

14:16.030 --> 14:17.030
好

14:17.030 --> 14:18.030
那个父亲

14:18.030 --> 14:19.030
我们可以知道

14:19.030 --> 14:20.030
单词很好说

14:20.030 --> 14:21.030
单词不知道

14:21.030 --> 14:22.030
就是查字典

14:22.030 --> 14:23.030
父亲的

14:23.030 --> 14:24.030
parent

14:24.030 --> 14:25.030
对吧

14:25.030 --> 14:26.030
父亲

14:26.030 --> 14:27.030
那父亲是个啥呢

14:27.030 --> 14:28.030
问题是

14:28.030 --> 14:29.030
那你可以把它

14:29.030 --> 14:30.030
非常非常粗略的话

14:30.030 --> 14:31.030
就把它弄成一个字母串

14:31.030 --> 14:32.030
但是呢

14:32.030 --> 14:33.030
明显

14:33.030 --> 14:34.030
他父亲是一个人

14:34.030 --> 14:35.030
那个人

14:35.030 --> 14:36.030
肯定是一个复合型数据

14:36.030 --> 14:37.030
他父亲呢

14:37.030 --> 14:38.030
也是个对象

14:38.030 --> 14:39.030
他的名字

14:39.030 --> 14:40.030
叫做什么

14:40.030 --> 14:41.030
他的全名

14:41.030 --> 14:42.030
王老爷子

14:43.030 --> 14:44.030
于是那父亲

14:44.030 --> 14:45.030
怎么叫王老爷子呢

14:45.030 --> 14:46.030
这些就别问了

14:46.030 --> 14:47.030
问多了心里的爷爷视频

14:49.030 --> 14:50.030
好

14:50.030 --> 14:51.030
那么

14:51.030 --> 14:52.030
他是一个职业

14:52.030 --> 14:53.030
是个古汉语的专家

14:55.030 --> 14:56.030
这些不经常看

14:56.030 --> 14:57.030
郭德纲相声

14:57.030 --> 14:58.030
都不知道说的是啥

14:59.030 --> 15:00.030
爱好是什么呢

15:00.030 --> 15:01.030
爱好是

15:01.030 --> 15:02.030
洗澡

15:02.030 --> 15:03.030
对吧

15:03.030 --> 15:04.030
就表达出来了

15:04.030 --> 15:05.030
那你看

15:05.030 --> 15:06.030
就是我们这段程序

15:06.030 --> 15:07.030
就把我们上边传遞的

15:07.030 --> 15:08.030
就是我们用人类语言

15:08.030 --> 15:09.030
传遞的信息

15:09.030 --> 15:11.030
就变成了程序的语言

15:11.030 --> 15:12.030
表达出来了

15:13.030 --> 15:15.030
那我们把输出一下吧

15:16.030 --> 15:17.030
于一圈

15:19.030 --> 15:20.030
这些信息全都有了

15:21.030 --> 15:23.030
但我们不仅要学会表达数据

15:23.030 --> 15:24.030
还要学会

15:24.030 --> 15:25.030
在数据里边

15:25.030 --> 15:26.030
我们要

15:26.030 --> 15:27.030
这是一个完整的数据

15:27.030 --> 15:28.030
复合型数据

15:28.030 --> 15:29.030
一个对象

15:29.030 --> 15:30.030
我们如何来精确的

15:30.030 --> 15:31.030
找到我们想要的数据呢

15:31.030 --> 15:32.030
比方说我要找到

15:32.030 --> 15:34.030
他的于一圈的住址

15:34.030 --> 15:35.030
那怎么找到呢

15:35.030 --> 15:37.030
你们可以自己写一下

15:37.030 --> 15:38.030
于一圈的住址

15:38.030 --> 15:39.030
就是住的街道

15:39.030 --> 15:40.030
于一圈

15:40.030 --> 15:41.030
于一圈

15:41.030 --> 15:42.030
而最是

15:42.030 --> 15:43.030
第二

15:43.030 --> 15:44.030
恵

15:44.030 --> 15:45.030
什么是这样子

15:46.030 --> 15:47.030
那么这个代码怎么理解

15:49.030 --> 15:50.030
挺好

15:50.030 --> 15:51.030
这个玩意

15:51.030 --> 15:52.030
也是表达式

15:53.030 --> 15:54.030
它也是表达式

15:54.030 --> 15:56.030
表达式不一定是加建成熟

15:58.030 --> 15:59.030
所有把多个数据

15:59.030 --> 16:00.030
用一个符号

16:00.030 --> 16:01.030
连接写都是表达式

16:01.030 --> 16:02.030
那么这里

16:02.030 --> 16:03.030
多个数据是什么

16:03.030 --> 16:04.030
于一圈

16:04.030 --> 16:05.030
而最是恵的

16:05.030 --> 16:06.030
什么连接的

16:06.030 --> 16:07.030
用底来连接的

16:07.030 --> 16:10.310
也是个符号,这个也是表达式

16:10.610 --> 16:12.910
把这个表达式的结果输出

16:13.690 --> 16:15.730
那么这个表达式怎么来理解呢?

16:16.250 --> 16:17.270
怎么来理解?

16:17.530 --> 16:20.610
它是这样子运算的,因为我们知道表达式是要运算的

16:20.610 --> 16:22.910
算出来,它不一定是数学运算

16:23.410 --> 16:26.490
很多同学就一听到运算,那一定是加減成熟,它不一定

16:26.990 --> 16:28.270
代码里面的运算可多了

16:28.530 --> 16:31.350
加減成熟是一种,读属性也是一种运算

16:31.870 --> 16:34.930
还包括什么呢?还包括并且或者都是运算

16:35.390 --> 16:37.230
是不是拼接都是运算

16:37.490 --> 16:39.290
大于小于比较,全都是运算

16:40.570 --> 16:43.630
表达式是很丰富的,那么这个表达式怎么理解呢?

16:43.890 --> 16:44.910
它要运算,怎么运算呢?

16:46.190 --> 16:50.810
它先把这个表达式求出来,这个表达式里面包含两个部分,这个也是个表达式

16:51.070 --> 16:53.870
那么这个表达式一求出来,是不是读去了于签

16:54.130 --> 16:56.690
这个对象的,而最初读出来这个东西

16:57.710 --> 17:00.790
读出来这个数据,于是这个表达式的结果是不是就这个数据

17:01.290 --> 17:02.070
什么就是这个数据

17:02.830 --> 17:04.630
然后再读这个数据

17:05.150 --> 17:06.430
表达式也是数据

17:06.670 --> 17:07.950
这个表达式,我画一下

17:10.540 --> 17:11.320
你看啊

17:12.080 --> 17:13.360
这个数据

17:13.880 --> 17:16.180
是不是就是这个表达式的结果

17:16.440 --> 17:19.260
每一个表达式都是一个结果,我们把它叫反而回结果

17:19.520 --> 17:20.280
是不是数据

17:20.540 --> 17:21.820
这个数据就是这个数据

17:22.080 --> 17:24.620
然后再读这个数据的,什么是若无的

17:25.400 --> 17:26.680
是不是读出来这个数据

17:26.940 --> 17:31.800
所以说整个表达式反而回结果,就是整个表达式结果是什么

17:32.060 --> 17:33.080
就是这个字符刺,八大胡同

17:34.100 --> 17:36.420
懂了意思吗?你要这么去理解

17:37.740 --> 17:41.500
包括表达式我们去写个1加2

17:42.600 --> 17:44.400
加3,那么这个代表怎么理解

17:45.160 --> 17:47.360
这是个表达式,先算这个

17:48.480 --> 17:52.320
这里是不是也是个表达式,把这个表达式的结果算出来多少3

17:52.840 --> 17:55.920
然后呢,再把这个表达式的结果跟3来相加

17:56.940 --> 18:00.520
又得到一个表达式的结果是6,然后再把6来进行输出

18:00.780 --> 18:02.060
你要这么去看

18:02.820 --> 18:03.860
学会看这个程序

18:04.360 --> 18:06.400
好,刚才我们就读出来这个数据

18:06.600 --> 18:08.400
修改是一样的

18:09.160 --> 18:10.720
比方说我们要鱼圈

18:11.120 --> 18:12.240
要修改它的什么

18:15.320 --> 18:17.360
父亲的名字叫做鱼小鲜

18:25.520 --> 18:26.920
对,也可以修改对吧

18:27.080 --> 18:29.120
那么我们可以再打印一下整个对象

18:29.960 --> 18:31.680
他父亲的名字变成鱼小鲜了

18:33.200 --> 18:35.600
爷爷的名字叫鱼少鲜,动手周知

18:36.440 --> 18:40.440
这是第二题,要学会表达对象

18:40.600 --> 18:44.160
还要学会找到对象里面的信息,修改或者输出

18:44.880 --> 18:45.760
获取都可以

18:47.960 --> 18:49.200
这是第二题

18:49.680 --> 18:50.720
然后再看第三题

18:52.560 --> 18:53.520
第三题有点意思了

18:54.240 --> 18:55.040
第三题

18:56.000 --> 18:58.160
他说有一个非常特别的对象

18:58.160 --> 19:00.080
我都不跟你说这个对象是啥,无所谓

19:00.320 --> 19:01.840
我们现在要联系一个语法知识

19:02.560 --> 19:04.120
他的兼职队,怎么叫兼职队

19:04.440 --> 19:06.440
就是属性名和属性职就是一个建制队

19:06.440 --> 19:09.000
那么对象里面其实有很多建制队组成的

19:09.000 --> 19:10.160
这是一个兼职队

19:10.800 --> 19:12.200
这又是一个兼职队,对吧

19:12.640 --> 19:15.240
兼就是属性名,职就是属性的职

19:15.720 --> 19:16.440
就兼职队

19:17.720 --> 19:19.560
对象的本质就是建制队

19:20.880 --> 19:22.120
他建制队是这样子的

19:22.120 --> 19:24.080
有一个属性名叫做铃

19:25.600 --> 19:28.120
这个是属性职是属性职

19:28.440 --> 19:30.680
有一个属性名叫医,不要去考虑数组

19:30.680 --> 19:33.000
我现在没有说数组,这里可忘记数组

19:33.960 --> 19:35.440
加紧和我一说数组,你也明白了

19:36.800 --> 19:39.800
这里属性名为医,它是一个指示B

19:40.120 --> 19:41.920
还有一个属性名叫how are you

19:42.560 --> 19:44.200
属性只叫翻译三条

19:44.560 --> 19:45.840
你别怪这个对象是干嘛的

19:46.200 --> 19:47.680
问题是你咋写

19:48.200 --> 19:48.920
一个对象

19:49.840 --> 19:53.200
属性名是0,它的指示A

19:53.720 --> 19:56.240
属性名是1,指示B

19:56.800 --> 19:58.760
属性名是how are you

19:59.680 --> 20:01.480
它的指示翻译三条

20:03.760 --> 20:04.840
没发写了这个东西

20:04.840 --> 20:05.600
还要保护

20:06.120 --> 20:07.640
那么这里需要一点知识

20:08.680 --> 20:09.440
听好了

20:09.440 --> 20:11.240
现在我请大家

20:12.000 --> 20:14.800
忘记之前你那些固有的思维

20:14.800 --> 20:15.840
听我这里讲

20:16.600 --> 20:18.160
对象的原始写法

20:18.160 --> 20:19.920
对象的真正的写法是什么

20:20.440 --> 20:22.240
我们之前写的东西都是搞笑的

20:22.760 --> 20:24.280
你先认为它就是搞笑的

20:24.800 --> 20:26.080
不是对象真正的写法

20:26.600 --> 20:28.120
对象真正写法是这样子的

20:28.840 --> 20:30.120
在对象中

20:30.120 --> 20:33.960
所有的属性名没有任何例外的都是字符号

20:35.760 --> 20:39.600
因此所有的属性名应该是用单引号

20:39.600 --> 20:41.640
或者双引号包裹起来

20:42.000 --> 20:42.600
啥意思

20:43.160 --> 20:44.200
这是属性名吧

20:44.600 --> 20:46.600
属性名一定是字符号

20:46.600 --> 20:47.520
没有例外

20:48.040 --> 20:50.800
将来学的也是6的更多知识之后

20:50.800 --> 20:54.200
有一个点点多了一种内容

20:54.200 --> 20:55.720
不过那个内容我们现在不考虑

20:56.720 --> 20:59.200
现在我们就认为它属性名是字符串

20:59.200 --> 21:02.000
因此你的属性名必须要用单引号

21:02.000 --> 21:03.600
或者是双引号引起来

21:04.400 --> 21:07.310
包括这是属性名吧

21:08.710 --> 21:10.710
这才是对象的真正的写法

21:11.230 --> 21:13.310
过去没引来别着急

21:16.310 --> 21:17.350
但是

21:17.350 --> 21:18.870
比较上面看这个对象

21:18.870 --> 21:19.910
无论是这个属性名

21:19.910 --> 21:21.310
属性名是不是全部都引起来了

21:21.310 --> 21:23.230
明治邓哥年龄三十五

21:23.230 --> 21:25.550
毕业时间二零零现在

21:26.270 --> 21:29.070
然后就是它的Home而对是家庭住址

21:29.070 --> 21:30.230
是不是都用单引号引起来的

21:30.230 --> 21:31.390
双引号也可以

21:31.390 --> 21:32.350
那么它又是个对象

21:32.350 --> 21:34.150
这个对象所有的对象都是一样

21:34.150 --> 21:36.150
对象字面这样的书写方式

21:36.150 --> 21:38.150
属性名全部要用单引号引起来

21:39.750 --> 21:40.550
没问题吧

21:41.190 --> 21:43.190
但是为了书写的方面

21:43.190 --> 21:44.630
这个毕竟不方便吧

21:45.550 --> 21:47.110
为了书写的方便

21:47.110 --> 21:49.790
当对象的属性名是纯数字

21:49.790 --> 21:52.750
或者是符合标识符规范的时候

21:52.750 --> 21:54.790
可以省略引号

21:54.950 --> 21:56.830
所以说我们以前都是用

21:56.830 --> 21:58.550
取巧的办法来做的

21:58.550 --> 22:00.590
都是为了方便来做的

22:00.590 --> 22:05.630
如果说那些属性名是数字可以省略引号

22:05.630 --> 22:08.270
但是不是说数字能作为属性名

22:08.270 --> 22:11.750
不实的它会自动给你转成字符创来作为属性名

22:13.270 --> 22:15.030
你看这里是不是

22:15.030 --> 22:17.710
这些都是符合标识符规范的对吧

22:18.790 --> 22:20.470
是不是符合标识符规范

22:20.470 --> 22:22.270
符合标识符规范的是可以

22:22.270 --> 22:23.670
不加这个双引号的

22:23.670 --> 22:25.150
加了也没有任何问题

22:26.350 --> 22:26.830
对吧

22:26.830 --> 22:29.630
因为本来就应该加的引号

22:30.510 --> 22:32.350
那么这个玩意能不能去掉单引号了

22:32.350 --> 22:33.710
它就去不掉

22:33.710 --> 22:34.190
为什么呢

22:34.190 --> 22:35.630
你把这个玩意的单引号去掉

22:35.630 --> 22:37.750
它不符合标识符的命名规范

22:37.750 --> 22:39.350
中间有空格

22:39.350 --> 22:40.070
懂了意思吧

22:40.070 --> 22:41.070
所以就去不掉

22:41.070 --> 22:42.750
其实这个玩意我们不用去备

22:42.750 --> 22:44.670
原来我什么时候记不住

22:44.670 --> 22:46.070
我什么时候也用一个单引号

22:46.070 --> 22:46.790
什么时候不用呢

22:47.910 --> 22:48.830
你都不用

22:48.830 --> 22:49.750
你都用简写

22:50.790 --> 22:51.870
出现问题了

22:51.870 --> 22:52.670
你就给我加上

22:53.590 --> 22:55.670
你出现问题很容易看到到的

22:55.670 --> 22:57.750
要告诉你一个属性是什么玩意

22:57.750 --> 23:00.550
请问这个情况遇到还是比较少的

23:00.550 --> 23:02.510
但是会遇到

23:02.510 --> 23:04.670
那么你就加上一个单引号

23:04.670 --> 23:05.550
就这么简单

23:05.550 --> 23:07.070
双引号也可以

23:07.070 --> 23:08.630
所以说我就要说这个

23:08.630 --> 23:10.230
这个题是不是做出来了

23:11.590 --> 23:12.830
对 是不是就做出来了

23:12.830 --> 23:13.990
那我们来输出一下一个对象

23:13.990 --> 23:15.550
这个对象是正常对象

23:15.550 --> 23:17.230
没有什么不正常的

23:17.230 --> 23:18.830
你看打印出来过后

23:18.830 --> 23:20.750
你看它每一个属性是不是给你加了一个单引号了

23:21.710 --> 23:24.030
所以说给加一个单引号来给属性

23:24.030 --> 23:25.950
它为什么可以加上单引号

23:25.950 --> 23:27.630
就是在告诉你

23:27.630 --> 23:29.390
它的属性名是字无串

23:29.390 --> 23:30.910
尽管你这里写的是数字

23:30.910 --> 23:32.310
但它实际上是字无串

23:32.310 --> 23:33.910
懂了意思吧

23:33.910 --> 23:37.510
好 这是属性的表达

23:37.510 --> 23:39.670
实际上每个属性名都是字无串

23:39.670 --> 23:40.990
所以说你要用单引号

23:40.990 --> 23:41.670
只不过呢

23:41.670 --> 23:42.270
比如说我们

23:42.270 --> 23:44.070
把单引号省略了

23:44.070 --> 23:45.470
出现问题就要加上

23:45.470 --> 23:46.550
这是我第一个要说的

23:46.550 --> 23:50.040
好

23:50.040 --> 23:51.880
那么接下来是读属性

23:52.600 --> 23:55.000
读属性的真正的写法

23:55.000 --> 23:56.640
不是用底

23:56.640 --> 23:59.040
用底是取巧的办法

23:59.040 --> 24:00.400
读属性的真正的写法

24:00.400 --> 24:02.080
比方说我要读

24:02.080 --> 24:03.400
比方说这里有一个内文属性

24:03.400 --> 24:05.200
假设有个内文属性

24:05.200 --> 24:06.320
叫做邓哥

24:06.320 --> 24:08.720
我要读这个内文属性该怎么读呢

24:08.720 --> 24:10.600
正确的读法是这样子读的

24:10.600 --> 24:11.920
两个中括号

24:11.920 --> 24:13.640
我知道有同学又在想数主了

24:13.640 --> 24:14.920
跟数主没关系

24:14.920 --> 24:17.760
不要去想数主

24:17.760 --> 24:18.800
这就是对象

24:18.800 --> 24:20.880
然后里边写字服串

24:21.000 --> 24:21.960
注意在里边写什么

24:21.960 --> 24:23.280
写字服串

24:23.280 --> 24:24.920
你如果说写的不是字服串的话

24:24.920 --> 24:27.720
他一定会给你转成字服串

24:27.720 --> 24:30.920
比方说你这里写个0

24:30.920 --> 24:32.480
等同于你直接写个0

24:32.480 --> 24:32.880
为什么

24:32.880 --> 24:35.240
因为他会把这个数字给你转成字服串

24:35.240 --> 24:36.240
所以你这样子写

24:36.240 --> 24:38.680
跟你这样子写是一样的

24:38.680 --> 24:39.720
知道吧

24:39.720 --> 24:40.920
是一样的

24:40.920 --> 24:41.080
好

24:41.080 --> 24:42.560
那么现在呢

24:42.560 --> 24:44.160
比方说我要读那个

24:44.160 --> 24:45.200
Name这个属性

24:45.200 --> 24:46.400
那怎么读呢

24:46.400 --> 24:48.760
Name就这样读

24:48.800 --> 24:51.200
这才是真正的读属性的方式

24:51.200 --> 24:52.200
来看一下

24:52.200 --> 24:53.200
就蹬格

24:53.200 --> 24:54.920
那我要读这个属性呢

24:54.920 --> 24:57.280
那就写一遍

24:57.280 --> 24:58.920
RU是不是翻译3Q

24:58.920 --> 25:01.080
可以了

25:01.080 --> 25:02.640
懂的意思吧

25:02.640 --> 25:04.880
真正的读属性是这样读的

25:04.880 --> 25:06.680
不要让我读第一个0这个属性

25:06.680 --> 25:08.360
那我怎么读呢

25:08.360 --> 25:09.840
是不是这样子写

25:09.840 --> 25:11.640
只不过你可以省略双凝

25:11.640 --> 25:13.520
直接写个0也可以

25:13.520 --> 25:14.760
然后可以转成字服串

25:14.760 --> 25:16.000
懂的意思吧

25:16.000 --> 25:17.680
就这么意思

25:17.720 --> 25:19.360
我记得一刀面试题

25:19.360 --> 25:20.720
这面试题怎么考的呢

25:20.720 --> 25:22.000
还有这样的考的

25:22.000 --> 25:25.240
0

25:25.240 --> 25:26.840
等于1

25:26.840 --> 25:27.840
非常简单

25:27.840 --> 25:28.720
我忘了原题

25:28.720 --> 25:30.080
基本上就是个意思

25:30.080 --> 25:31.320
它说这个属

25:31.320 --> 25:31.720
然后呢

25:31.720 --> 25:34.160
我再把OB界0

25:34.160 --> 25:35.480
变成2

25:35.480 --> 25:37.480
那么我现在输出的是

25:37.480 --> 25:40.040
OB界0

25:40.040 --> 25:42.960
和OB界字服串0

25:42.960 --> 25:43.960
它其实考虑的

25:43.960 --> 25:46.880
就是它们是不是一样的

25:46.880 --> 25:47.480
是不是一样的

25:47.480 --> 25:49.520
它肯定是一样的

25:49.520 --> 25:50.440
它能不一样吗

25:50.440 --> 25:51.400
因为我这样的写法

25:51.400 --> 25:52.200
实际上跟转

25:52.200 --> 25:53.480
它会把它转成字服串

25:53.480 --> 25:56.000
还不可能有数字属性的

25:56.000 --> 25:57.640
属性只能是字服串的

25:57.640 --> 26:01.520
所以最终结构就是12

26:01.520 --> 26:06.120
好 这是关于属性的读取

26:06.120 --> 26:07.120
那如果说是这样一刀

26:07.120 --> 26:09.520
这种刚才我们在这里写的

26:09.520 --> 26:10.680
这种对象

26:10.680 --> 26:13.520
假设我这里换一个解释吧

26:13.520 --> 26:15.880
就在这吧

26:15.880 --> 26:16.520
好 这个对象

26:16.520 --> 26:19.200
比方说我要读这个属性呢

26:20.200 --> 26:21.400
全部加上

26:21.400 --> 26:23.360
这它完整原式写法

26:23.360 --> 26:25.040
但是我一格式化的话

26:25.040 --> 26:26.560
因为很多格式化工具一看

26:26.560 --> 26:27.520
你像你这个属性

26:27.520 --> 26:28.680
没有必要搭档引号吧

26:28.680 --> 26:29.360
不好看

26:29.360 --> 26:30.320
所以一格式化的时候

26:30.320 --> 26:32.160
它就变回去了

26:32.160 --> 26:33.440
没关系 没关系

26:33.440 --> 26:34.280
但像这些变

26:34.280 --> 26:34.960
在这一档引号

26:34.960 --> 26:36.960
它就没法去掉

26:36.960 --> 26:38.480
好 那比方说我要读这个属性

26:38.480 --> 26:39.760
怎么读呢

26:39.760 --> 26:40.680
正确写法是什么

26:40.680 --> 26:42.320
OB界

26:42.320 --> 26:43.600
Home

26:43.600 --> 26:45.160
Adress

26:45.160 --> 26:45.400
对吧

26:45.400 --> 26:46.560
当然复制也是一样

26:46.560 --> 26:48.160
我再给它重新复制

26:49.120 --> 26:50.680
好 那么这个是不是表达式

26:50.680 --> 26:51.520
它也是表达式

26:51.520 --> 26:53.760
综扩号也是表达式

26:53.760 --> 26:56.320
它一看 这个数据连接这个数据

26:56.320 --> 26:57.040
也是个表达式

26:57.040 --> 26:58.240
这个表达式返回什么

26:58.240 --> 26:59.240
返回这个对象

26:59.240 --> 26:59.920
它读的是什么

26:59.920 --> 27:01.360
读的是这个属性值

27:01.360 --> 27:02.880
这个属性值就是这个对象

27:02.880 --> 27:04.840
然后我再去取这个对象的什么

27:06.760 --> 27:08.160
Prob-City吧

27:08.160 --> 27:10.000
为什么取个City

27:10.000 --> 27:12.520
RB

27:12.520 --> 27:13.680
什么我要取这个City

27:13.680 --> 27:14.400
那怎么取呢

27:14.400 --> 27:16.760
这是一个对象里把它看成一个整体

27:16.760 --> 27:17.680
这是一个对象

27:17.680 --> 27:19.640
对象里面怎么取属性的

27:19.640 --> 27:21.240
是不是我们刚才说了

27:21.240 --> 27:21.520
对吧

27:21.520 --> 27:22.880
用综扩号来取City

27:22.880 --> 27:23.960
就这个意思

27:23.960 --> 27:25.720
你不要连着看

27:25.720 --> 27:27.600
它是一个一个表达式组成的

27:27.600 --> 27:30.600
这个表达式就是这个对象

27:30.600 --> 27:32.320
好 我要取这个对象

27:32.320 --> 27:33.280
你看OB界

27:33.280 --> 27:34.280
OB界是这个对象

27:34.280 --> 27:34.720
对吧

27:34.720 --> 27:36.000
我要取这个对象的什么

27:36.000 --> 27:36.520
这个属性

27:36.520 --> 27:37.600
那就是一个综扩号

27:37.600 --> 27:38.400
后面根个综扩号

27:38.400 --> 27:39.520
然后属性名字

27:39.520 --> 27:40.720
好 那么这个玩意儿

27:40.720 --> 27:41.720
就是这个对象

27:41.720 --> 27:42.920
我要取这个对象的属性

27:42.920 --> 27:44.160
那是不是后面根个综扩号

27:44.160 --> 27:45.120
取这个属性

27:45.120 --> 27:46.160
它是一段一段算的

27:46.160 --> 27:47.800
先算出这个表达式

27:47.800 --> 27:50.040
然后拿着接着往后算

27:50.040 --> 27:50.680
懂了意思吧

27:50.680 --> 27:54.810
那么要看一下能不能取出来

27:54.810 --> 27:56.010
都可以取出来

27:56.010 --> 27:57.650
当然复制也是一样

27:57.650 --> 27:59.410
也给它重新复制

27:59.410 --> 28:01.450
复制为什么呢

28:01.450 --> 28:02.450
不是哈尔滨的

28:02.450 --> 28:03.050
黑龙江

28:03.050 --> 28:03.890
黑龙江还有什么

28:03.890 --> 28:05.010
我也不知道

28:05.010 --> 28:06.890
要时间复制一个

28:06.890 --> 28:09.650
然后我们来看一下

28:09.650 --> 28:11.690
这边是ABC的

28:11.690 --> 28:12.610
对吧

28:12.610 --> 28:13.050
懂了意思吧

28:13.050 --> 28:16.890
这才是真正的取属性的方式

28:16.970 --> 28:18.610
懂了吧

28:18.610 --> 28:21.850
好 那么这种取属性的方式

28:21.850 --> 28:23.090
它非常的牛

28:23.090 --> 28:24.250
牛在什么地方呢

28:24.250 --> 28:25.650
因为这里写的是字无串

28:25.650 --> 28:27.530
字无串是不是数据

28:27.530 --> 28:29.290
是不是数据

28:29.290 --> 28:31.090
数据可以用变量

28:31.090 --> 28:32.770
可以用这是字面量吗

28:32.770 --> 28:33.970
可以用变量

28:33.970 --> 28:35.050
可以用字面量

28:35.050 --> 28:37.650
还可以用表达式

28:37.650 --> 28:42.180
那里看我这里玩法可多多了

28:42.180 --> 28:43.540
我写个key

28:43.540 --> 28:44.420
表示属性名字

28:44.420 --> 28:46.340
我先把它保存在变量里面

28:46.380 --> 28:47.700
然后变量呢

28:47.700 --> 28:48.900
放到这

28:48.900 --> 28:50.260
可不可以

28:50.260 --> 28:51.700
可以

28:51.700 --> 28:52.900
说出一下

28:52.900 --> 28:54.900
OBCT

28:54.900 --> 28:56.020
注意这里

28:56.020 --> 28:56.860
我没有加双引号

28:56.860 --> 28:58.260
单引号

28:58.260 --> 28:59.820
加单引号就相当于是什么

28:59.820 --> 29:02.220
读这个属性的哪个属性

29:02.220 --> 29:05.420
属性为key

29:05.420 --> 29:06.620
自然没有这个属性

29:06.620 --> 29:08.460
所以读出来是on define的

29:08.460 --> 29:09.780
但不加单引号呢

29:09.780 --> 29:10.700
就表示说

29:10.700 --> 29:11.900
我把这个变量的值

29:11.900 --> 29:13.180
任何可以放数据的地方

29:13.180 --> 29:14.220
都可以放变量

29:14.220 --> 29:15.940
字面量和表达式

29:15.980 --> 29:17.740
这要反复反复提

29:17.740 --> 29:19.980
提到你们吐为止

29:19.980 --> 29:20.940
这是不是变量

29:20.940 --> 29:22.500
变量是不是可以放过来

29:22.500 --> 29:25.500
是不是相当于把这个变量的值放着了

29:25.500 --> 29:26.740
那里看是不是可以读出来

29:26.740 --> 29:28.660
读出来这个Homer's Racer

29:28.660 --> 29:30.300
那我现在只需要改这个变量的值

29:32.300 --> 29:33.260
下面的代码不变

29:33.260 --> 29:35.620
是不是就可以切换它的读的属性了

29:35.620 --> 29:36.820
A级

29:36.820 --> 29:37.620
你看

29:37.620 --> 29:39.140
是不是可以这样子玩

29:39.140 --> 29:41.620
那它能不能写表达式的呢

29:41.620 --> 29:42.820
也可以

29:42.820 --> 29:44.540
你看我这里还可以这样子写

29:44.580 --> 29:46.940
A加上G

29:46.940 --> 29:47.780
加上E

29:47.780 --> 29:48.180
可不可以

29:48.180 --> 29:49.980
这是不是表达式

29:49.980 --> 29:50.900
是不是表达式

29:50.900 --> 29:52.460
这个表达式的运算结果是什么

29:52.460 --> 29:53.780
就是一个制服创A级

29:53.780 --> 29:54.860
对吧

29:54.860 --> 29:57.500
那是不是还是一样35

29:57.500 --> 30:00.420
这种读属性的方式是非常非常灵活的

30:00.420 --> 30:02.300
只是它写出来没那么好看

30:02.300 --> 30:03.540
但它非常灵活

30:03.540 --> 30:05.660
这方式是非常灵活的

30:05.660 --> 30:07.340
懂了意思吧

30:07.340 --> 30:09.780
那就这个意思

30:09.780 --> 30:10.780
那比方说

30:10.940 --> 30:13.940
我甚至呢

30:13.940 --> 30:14.340
算了算了

30:14.340 --> 30:15.540
这个还要受到评划

30:15.540 --> 30:18.460
到复记评划的时候再测吧

30:18.460 --> 30:19.540
那就这样

30:19.540 --> 30:21.500
这就是读属性的时候

30:21.500 --> 30:24.180
那么跟我们平时读法不一样了

30:24.180 --> 30:27.260
是因为我们平时是可以减写的

30:27.260 --> 30:30.460
如果说这个属性符合标识符规范

30:30.460 --> 30:32.500
可以使用点符号来连接

30:33.740 --> 30:34.620
啥意思啊

30:34.620 --> 30:35.500
刚才这个

30:35.500 --> 30:38.830
刚才这个例子里面

30:38.830 --> 30:40.190
这个例子表面这个属性

30:41.150 --> 30:42.070
OB戒

30:42.070 --> 30:43.390
它可以这样的写

30:43.390 --> 30:44.830
读出来是邓哥

30:44.830 --> 30:45.950
然后由于这个内容

30:45.950 --> 30:47.670
它本身是符合标识符规范的

30:47.670 --> 30:50.030
所以说你这里就直接点内容

30:50.030 --> 30:51.470
这种写法

30:51.470 --> 30:54.230
跟刚才这种写法是一模一样的

30:54.230 --> 30:55.550
实际上它内部

30:55.550 --> 30:58.470
它会把这种写法转成这种写法

30:58.470 --> 30:59.310
懂了意思吧

30:59.310 --> 31:01.830
最终使用的是这种写法

31:01.830 --> 31:02.830
这才是真正的语法

31:02.830 --> 31:06.750
只不过这种给你提供了一个语法堂

31:06.750 --> 31:08.390
语法堂

31:08.390 --> 31:09.350
语法堂什么意思

31:09.470 --> 31:10.470
给一个糖果

31:10.470 --> 31:11.150
让你填一下

31:11.150 --> 31:11.990
没有什么营养

31:11.990 --> 31:14.430
但是让你舒服一下

31:14.430 --> 31:15.390
这是语法堂

31:15.390 --> 31:16.910
这种写法就是一种语法堂

31:16.910 --> 31:17.990
它让你写得舒服一点

31:17.990 --> 31:20.070
看到方便一点

31:20.070 --> 31:23.530
本质上就是这种写法

31:23.530 --> 31:27.250
好 那么就是读属性

31:27.250 --> 31:28.130
那么但是有的时候

31:28.130 --> 31:28.850
像那个凝

31:28.850 --> 31:29.370
就不能这样写

31:29.370 --> 31:31.770
因为凝不是符合标识符规范

31:31.770 --> 31:32.770
其实这个东西你不用记

31:32.770 --> 31:34.450
你写出来它就可以在帮我说了

31:34.450 --> 31:35.130
那说明这个属性

31:35.130 --> 31:36.090
你不能这样的读

31:36.090 --> 31:36.970
应该怎么读了

31:36.970 --> 31:38.970
那你就该这样读了

31:38.970 --> 31:40.250
或者是加上两个

31:40.290 --> 31:41.850
把这里加上两个单一号也可以

31:44.290 --> 31:45.210
而且我们之前说过

31:45.210 --> 31:46.490
这是这里是数据

31:46.490 --> 31:46.730
对吧

31:46.730 --> 31:47.450
可以放任何东西

31:47.450 --> 31:48.930
当可以不可以放三减三

31:50.130 --> 31:51.290
可以不可以

31:51.290 --> 31:51.730
可以啊

31:51.730 --> 31:52.890
为什么不可以呢

31:52.890 --> 31:54.250
表达式的运算结果

31:54.250 --> 31:55.010
放到这个位置

31:55.010 --> 31:56.170
任何可以放数据的地方

31:56.170 --> 31:57.130
都可以放辩量

31:57.130 --> 31:57.650
质面量

31:57.650 --> 31:58.130
表达式

31:58.130 --> 32:00.090
我要让你把这件事说到里兔

32:01.370 --> 32:03.250
任何没有任何例外的

32:03.250 --> 32:04.330
任何可以放数据的地方

32:04.330 --> 32:06.250
都可以放质面量

32:06.250 --> 32:07.010
辩量表达式

32:08.090 --> 32:09.810
到这里也可以

32:09.810 --> 32:12.730
能不能放六减去二乘一三呢

32:13.770 --> 32:14.330
也可以放

32:14.330 --> 32:16.210
咋都可以放

32:16.210 --> 32:17.290
能不能放个辩量在这

32:17.290 --> 32:18.530
也可以放

32:18.530 --> 32:19.210
不要听个辩量

32:19.210 --> 32:20.090
I 给你

32:21.050 --> 32:21.970
把辩量I放这

32:22.690 --> 32:23.410
可不可以

32:23.410 --> 32:23.970
也可以

32:28.730 --> 32:29.570
但这样子

32:29.570 --> 32:31.370
底耳洞写法就不行了

32:31.370 --> 32:32.690
因为底耳那种写法

32:32.690 --> 32:34.130
它就这个东西

32:34.130 --> 32:35.130
它就不是那个

32:36.250 --> 32:37.090
你看这个地方写的

32:37.090 --> 32:38.010
明显不是质面量

32:38.010 --> 32:38.210
对吧

32:38.250 --> 32:40.090
质面量的写法要加上单印号的

32:40.090 --> 32:41.330
明显不是质面量的写法

32:41.330 --> 32:42.250
这就是特殊语法

32:42.250 --> 32:43.330
这个地方是不行的

32:44.730 --> 32:45.250
懂了意思吧

32:46.610 --> 32:46.850
好

32:46.850 --> 32:48.250
那么这是那个

32:48.250 --> 32:50.050
这道题就表达出来了

32:50.050 --> 32:50.970
好

32:50.970 --> 32:51.930
那么我们看最后道题

32:53.010 --> 32:54.290
最后道题有点意思

32:54.290 --> 32:55.450
它有一个函数

32:55.450 --> 32:56.250
函数呢

32:56.250 --> 32:56.930
也非常简单

32:58.370 --> 32:58.890
这个函数

32:58.890 --> 32:59.730
这里有个注释

32:59.730 --> 33:01.250
这种注释叫文档注释

33:01.250 --> 33:03.010
你看一个写一个写钢

33:03.010 --> 33:04.050
两个星号开头

33:05.290 --> 33:06.850
然后写出来一个注释

33:06.850 --> 33:07.610
叫文档注释

33:07.650 --> 33:08.610
文档注释有什么好处

33:08.610 --> 33:09.770
就调用函数的时候

33:10.330 --> 33:11.290
它会有提示

33:13.960 --> 33:15.240
你看是不是有提示

33:15.240 --> 33:16.600
它会告诉你第一个参数

33:18.160 --> 33:19.200
然后第二个参数

33:19.920 --> 33:22.360
然后这些注释的东西都会

33:22.360 --> 33:23.320
都会给你提示出来

33:23.840 --> 33:24.880
那么文档注释里面

33:24.880 --> 33:26.720
这是表示函数的整个描述功能

33:27.440 --> 33:29.360
这里边表示参数的含义

33:29.360 --> 33:31.120
参数的内详和参数的含义

33:31.720 --> 33:32.600
内详是Object

33:32.600 --> 33:33.120
一个对象

33:33.800 --> 33:35.120
参数的名字就是OV界

33:35.120 --> 33:36.920
它参数的含义是要打印的对象

33:37.400 --> 33:38.040
这个key

33:38.080 --> 33:40.160
表示对象的属性名字是一个字不错

33:40.920 --> 33:42.120
这个含义做什么事情

33:42.800 --> 33:45.160
打印这个对象的这个属性

33:45.920 --> 33:47.080
下面有一些测试代码

33:47.080 --> 33:48.120
比方说我这里写的对象

33:48.120 --> 33:49.720
UserNameA这个是

33:50.840 --> 33:52.880
我要打印这个对象的Name属性

33:52.880 --> 33:53.720
我就这样调用

33:53.720 --> 33:55.560
调用函数把对象传进去

33:56.120 --> 33:58.480
然后用一个字无串

33:59.520 --> 34:00.320
传了一个什么

34:00.320 --> 34:02.040
传了一个Name

34:02.040 --> 34:02.680
所以是Name

34:02.680 --> 34:03.760
不是Name的值

34:04.360 --> 34:05.560
是传了一个字无串Name

34:06.080 --> 34:07.160
那么这里要打印什么

34:07.160 --> 34:07.840
打印Molika

34:08.760 --> 34:10.160
传了一个A级要打印17

34:10.160 --> 34:11.360
传一个Sex要打印率

34:12.000 --> 34:13.000
那么这个还说了怎么写

34:15.340 --> 34:16.340
其实这个还说了做什么

34:16.780 --> 34:17.580
就是输出

34:17.860 --> 34:18.980
对吧打印就输出

34:19.420 --> 34:19.980
输出谁

34:20.380 --> 34:22.260
输出这个对象的这个属性

34:22.820 --> 34:23.700
但能不能这样子写

34:25.580 --> 34:26.260
能不能这样子写

34:29.000 --> 34:29.360
能不能

34:30.080 --> 34:30.560
不行啊

34:31.160 --> 34:32.400
因为这样子写的话

34:32.920 --> 34:34.840
这个地方不是写数据的地方

34:35.720 --> 34:38.160
这种写法就是相当于等同于这种写法

34:41.600 --> 34:42.040
读什么

34:42.040 --> 34:43.880
读这个对象的属性名

34:44.160 --> 34:46.080
为KEY的属效

34:46.080 --> 34:47.240
哪有KEY的属效

34:48.440 --> 34:48.840
没有

34:49.880 --> 34:50.160
对吧

34:50.160 --> 34:51.360
所以自然读不出来

34:52.280 --> 34:53.520
这种写法是不行的

34:54.760 --> 34:56.040
因为这个写法这个地方

34:57.360 --> 34:59.000
就固定写的是字无串了

34:59.000 --> 34:59.880
它是这种语法

35:00.200 --> 35:01.160
那我要换成什么写法

35:01.160 --> 35:02.360
换成中国号的写法

35:03.600 --> 35:05.000
那么这里边就可以写数据了

35:05.000 --> 35:05.360
对吧

35:05.360 --> 35:06.360
中国号码可以写数据

35:06.360 --> 35:07.640
那就是辩量字辩量

35:08.160 --> 35:09.120
表达是都可以来的

35:09.320 --> 35:10.840
那我只需要把这个辩量的值

35:10.840 --> 35:11.120
对吧

35:11.120 --> 35:12.040
你给我传一个Name

35:12.040 --> 35:13.080
我就把Name放在

35:13.160 --> 35:13.960
一给我传一个A级

35:13.960 --> 35:14.880
我就把A级放这

35:14.880 --> 35:16.560
所以我要把一个辩量的值放这

35:18.800 --> 35:19.400
就写出来了

35:20.880 --> 35:21.200
对不对

35:22.760 --> 35:24.920
这种东西有的时候特别特别有用

35:25.800 --> 35:26.720
特别特别有用

35:29.040 --> 35:29.440
OK

35:29.440 --> 35:30.960
那么这就是关于

35:32.640 --> 35:34.960
这个对象

35:34.960 --> 35:36.560
它的我们需要补充

35:36.560 --> 35:37.520
或者要强调

35:37.520 --> 35:38.880
或者要总结的一些知识

35:39.600 --> 35:42.400
终点就是要知道怎么去表达一个对象

35:42.400 --> 35:43.200
怎么在程序里边

35:43.400 --> 35:44.360
把对象写出来

35:44.360 --> 35:44.680
对吧

35:44.680 --> 35:45.960
把信息全部涵盖到

35:47.080 --> 35:47.520
第二

35:47.520 --> 35:49.160
你要知道怎么去修改信息

35:49.160 --> 35:50.520
怎么去获取这个信息

35:51.600 --> 35:52.200
有的时候

35:52.200 --> 35:54.520
我们遇到了一些比较奇怪的情况

35:54.520 --> 35:55.840
就是属性名是万七八糟的

35:56.720 --> 35:58.760
或者是我们要动态的读一些属性的时候

35:58.760 --> 35:59.160
像这里

35:59.160 --> 36:01.440
我都不知道是属性名是什么

36:01.840 --> 36:03.680
那么这个时候要换一种语法来写

36:04.440 --> 36:04.680
对吧

36:04.680 --> 36:05.720
对象这一块就OK了

36:06.480 --> 36:09.320
而且你只要能够把这四字道题搞清楚

36:09.320 --> 36:10.160
那对象就OK了

36:11.840 --> 36:12.080
好吧

36:12.080 --> 36:12.640
也并不难

36:12.960 --> 36:13.760
我们一个小问题

36:13.760 --> 36:14.800
一个小问题的解决

36:15.680 --> 36:15.920
OK

36:15.920 --> 36:16.560
这就会到这了

