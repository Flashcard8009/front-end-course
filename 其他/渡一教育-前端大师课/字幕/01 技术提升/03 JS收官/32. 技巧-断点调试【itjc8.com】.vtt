WEBVTT

00:00.000 --> 00:04.000
好 我们这些课呢 来讲这个断点调试

00:04.000 --> 00:09.000
就是有的时候啊 我们可能光从一个错误信息

00:09.000 --> 00:12.000
当然我这个例子呢 比较简单哈 就是上节课的例子

00:12.000 --> 00:16.000
这个例子里面呢 倒是能够直接可以判断出啊

00:16.000 --> 00:19.000
我的错误发生的原因在哪 然后我一点进去了

00:19.000 --> 00:21.000
发现 就在这里出现了问题 对吧

00:21.000 --> 00:24.000
我指着他 他说我要读一个name属性

00:24.000 --> 00:28.000
但是呢 a 呢 是 undefend

00:28.000 --> 00:32.000
对吧 就这么一个意思 这样子呢 是比较容易定位错误的

00:32.000 --> 00:36.000
但是有的时候啊 我们可能光从这样的一个信息啊

00:36.000 --> 00:41.000
很难看得出来 我倒是知道他最后呢 是这么一个错误

00:41.000 --> 00:45.000
但是为什么这个s undefend 我并不清楚

00:45.000 --> 00:50.000
那么这个时候啊 我们可能就需要使用断点调试了

00:50.000 --> 00:54.000
就断点调试呢 是我们找错误的终极解决办法

00:54.000 --> 00:58.000
就是如果说这种方式在解决不了 那这个错误了

00:58.000 --> 01:02.000
就估计没有人能解决了啊 所以说断点调试就是

01:02.000 --> 01:07.000
最终的没有办法了 我们找错误找了半天 找不到了

01:07.000 --> 01:12.000
我们通过断点调试一定能够帮我们找到错误的原因在哪

01:12.000 --> 01:16.000
那么多断点团式如何来做呢 我这里先教一下

01:16.000 --> 01:20.000
断点调试的基本使用方式 然后呢 我再告诉大家

01:20.000 --> 01:24.000
在一个实际的例子里边 我们来找一找错误啊

01:24.000 --> 01:29.000
使用断点调试来解决我们之前学习过的一些异常的知识

01:29.000 --> 01:33.000
来找错误来练习一下 学习完了之后啊 同学们将来

01:33.000 --> 01:37.000
遇到错误就完全不用慌了 首先看这个观察这个信息

01:37.000 --> 01:40.000
看能不能直接就能找到错误 如果直接能找到

01:40.000 --> 01:43.000
那就解决就完事了 如果说这种方式找不到

01:43.000 --> 01:48.000
一时半会定位不到错误 那么可以使用断点调试的方式

01:48.000 --> 01:52.000
来找错误 这节课我先声明一下

01:52.000 --> 01:56.000
有同学学了这节课之后呢 会发现咱们老师啊

01:56.000 --> 02:00.000
后边的课程里面 遇到了比方上课的过程中

02:00.000 --> 02:04.000
遇到了一些错误 好像老师也没有用断点调试啊

02:04.000 --> 02:08.000
那是不是老师不用说明这个断点调试没啥用了 不是的

02:08.000 --> 02:12.000
是因为老师为什么不用 因为老师给你们教的写的程序啊

02:12.000 --> 02:16.000
对老师来说都比较简单 基本上

02:16.000 --> 02:20.000
用几条打印语句 输出语句 找一些关键点

02:20.000 --> 02:24.000
就是用输出语句调试一下 基本上就很快能够定位到错误在哪了

02:24.000 --> 02:29.000
所以说呢 老师习惯上就没有去使用断点调试了

02:29.000 --> 02:34.000
但是实际开发中 如果说老师遇到了一些非常复杂的程序

02:34.000 --> 02:38.000
那么在 有的时候我们通过一些输出语句 打印语句

02:38.000 --> 02:43.000
没有办法准确的定位到错误 这个时候老师一定会使用断点调试的

02:44.000 --> 02:48.000
这个情况给大家说明 那么同学们呢

02:48.000 --> 02:51.000
如果说你们将来做开发遇到错误了

02:51.000 --> 02:54.000
那就是两种方式 第一种方式就是通过他

02:54.000 --> 02:57.000
能不能直接定位到错误 能不能直接解决 能不能直接看出来

02:57.000 --> 03:00.000
配合一些输出语句 能不能直接搞定

03:00.000 --> 03:04.000
搞不定断点调试一定是终极的解决办法

03:04.000 --> 03:06.000
没有断点调试解决不了的问题

03:06.000 --> 03:11.000
那么断点调试如何来调试呢 是这样

03:11.000 --> 03:15.000
我们目前是在浏览器环境里边进行调试

03:15.000 --> 03:19.000
因此我们是在浏览器环境里边打断点

03:19.000 --> 03:22.000
什么叫断点 就打了断点之后

03:22.000 --> 03:26.000
它运行到那一句代码 它就会停止 不再继续往后运行了

03:26.000 --> 03:31.000
等待你的观察 将来我们还会学习漏的环境

03:31.000 --> 03:34.000
漏的环境里边也可以打断点进行调试

03:34.000 --> 03:38.000
其实我记得之前有一些课 我在漏的环境里边调试了一次

03:38.000 --> 03:42.000
那么从现在开始我们都是在浏览器环境里边玩

03:42.000 --> 03:44.000
所以我们在浏览器环境里边打断点

03:44.000 --> 03:46.000
那么怎么来打断点呢 同学们看一下

03:46.000 --> 03:50.000
在浏览器调试控制台里边是有这么一个选项卡

03:50.000 --> 03:52.000
叫做sources 表示我们的原代吗

03:52.000 --> 03:54.000
你点击这个选项卡之后

03:54.000 --> 03:58.000
你可以在左边可以看到我们的ATM文件

03:58.000 --> 04:00.000
我们的GS文件都在这

04:01.000 --> 04:03.000
那么如果说遇到了错误之后

04:03.000 --> 04:06.000
你首先要有一个大致的范围

04:06.000 --> 04:09.000
范围 就是我这个错误是什么时候发生的

04:09.000 --> 04:12.000
它大概是运行哪一个函数发生的

04:12.000 --> 04:14.000
比方说吧 我这里我就觉得

04:14.000 --> 04:17.000
我这个错误是运行这个函数发生的错误

04:17.000 --> 04:20.000
但是我不知道这个函数运行到哪一步发生的错误

04:21.000 --> 04:22.000
那么我怎么办呢

04:22.000 --> 04:25.000
我就在这个函数前边打上一个断点

04:26.000 --> 04:27.000
打成一个断点

04:27.000 --> 04:31.000
有的人他有这个习惯可以在这里

04:31.000 --> 04:34.000
表示A函在原代码里边写上一个dbug

04:35.000 --> 04:37.000
写上这么一句话

04:37.000 --> 04:39.000
那么这个效果是一样的

04:39.000 --> 04:40.000
就相当于是打了个断点

04:40.000 --> 04:42.000
但是袁老师不喜欢这样去做

04:42.000 --> 04:44.000
因为这会改动我们的原代码

04:44.000 --> 04:46.000
这样子写的可以不可以可以

04:46.000 --> 04:47.000
然后这样子写到之后

04:47.000 --> 04:49.000
你现在我们打开共产以刷新

04:49.000 --> 04:51.000
你看 是不是到这就停止了

04:51.000 --> 04:53.000
代码停在这了 你看

04:53.000 --> 04:55.000
你点这就会继续往后运行

04:55.000 --> 04:57.000
代码就停在这了

04:57.000 --> 04:59.000
但是袁老师不喜欢这样做

04:59.000 --> 05:01.000
我们重新来一次 重新刷新一次

05:02.000 --> 05:04.000
那么现在我们回归到之前的情况

05:04.000 --> 05:06.000
我们认为A这个函数

05:06.000 --> 05:08.000
调用过程中出现了错误

05:08.000 --> 05:09.000
但是我不知道错误在哪

05:09.000 --> 05:10.000
这怎么发生的

05:10.000 --> 05:12.000
那么我就在这前边打一个断点

05:13.000 --> 05:15.000
打一个 就是你到大致的确定

05:15.000 --> 05:17.000
哪一个代码之前是没有问题的

05:17.000 --> 05:19.000
然后那个代码之后

05:19.000 --> 05:20.000
可能会出现问题

05:20.000 --> 05:21.000
你就再打一个断点

05:21.000 --> 05:22.000
那有没有可能判断错误呢

05:22.000 --> 05:24.000
当然有可能判断错误

05:24.000 --> 05:25.000
判断错误之后呢

05:25.000 --> 05:26.000
你重新打断点不然了吗

05:26.000 --> 05:28.000
再往上一点 打断点都可以

05:28.000 --> 05:30.000
反正就是一个大致的范围

05:31.000 --> 05:33.000
然后我们刷新界面

05:33.000 --> 05:34.000
让它运行到这个函数

05:34.000 --> 05:36.000
只要一运行到这个地方

05:36.000 --> 05:37.000
运行到断点的地方

05:37.000 --> 05:39.000
程序就会停止

05:39.000 --> 05:41.000
你看 就停在这了

05:41.000 --> 05:44.000
好 接下来我们就可以针对它来做操作了

05:44.000 --> 05:45.000
怎么操作呢

05:45.000 --> 05:47.000
我把左边那一块放小一点

05:47.000 --> 05:49.000
因为我这里只有一个文件

05:49.000 --> 05:53.340
这个玩意儿怎么能收起来

05:53.340 --> 05:54.340
好像不能收起来

05:54.340 --> 05:55.340
不能再说算了

05:55.340 --> 05:56.340
然后看右边

05:56.340 --> 05:58.340
右边有很多的操作按钮

05:58.340 --> 06:00.340
这些按钮那边呢

06:00.340 --> 06:03.340
我们最常见的就是这个按钮

06:03.340 --> 06:04.340
前面三个

06:04.340 --> 06:05.340
就这个

06:05.340 --> 06:06.340
这个

06:06.340 --> 06:07.340
这个

06:07.340 --> 06:09.340
这三个按钮

06:09.340 --> 06:10.340
那么这三个按钮

06:10.340 --> 06:11.340
我一个个说

06:11.340 --> 06:13.340
第一个按钮表示什么意思呢

06:13.340 --> 06:16.340
表示程序继续运行

06:16.340 --> 06:18.340
不管我继续往后运行

06:18.340 --> 06:21.340
运行到下一个断点停止

06:21.340 --> 06:22.340
那你看我这

06:22.340 --> 06:24.340
继续运行 后面就没有断点了

06:24.340 --> 06:26.340
所以说我现在点这了

06:26.340 --> 06:27.340
它直接给我爆错了

06:27.340 --> 06:29.340
就已经出现这里的错误了

06:29.340 --> 06:31.340
我整个过程我就观察不到了

06:31.340 --> 06:32.340
但是有的时候

06:32.340 --> 06:33.340
我们这个东西是有用的

06:33.340 --> 06:36.340
比方说我A函数我打到这

06:36.340 --> 06:38.340
我这里打一个

06:38.340 --> 06:39.340
这里打一个

06:39.340 --> 06:40.340
打两个断点

06:40.340 --> 06:42.340
那么现在我们再看一下

06:42.340 --> 06:43.340
运行到

06:43.340 --> 06:44.340
先运行到这个断点

06:44.340 --> 06:46.340
现在的程序要输出A start

06:46.340 --> 06:49.340
那么看一下控制台输出了

06:49.340 --> 06:50.340
A start

06:50.340 --> 06:52.340
运行到这个断点了

06:52.340 --> 06:53.340
那么接下来

06:53.340 --> 06:54.340
我们

06:54.340 --> 06:56.340
后边是不是打了一个断点

06:56.340 --> 06:57.340
接下来我就想

06:57.340 --> 06:58.340
中间比方说

06:58.340 --> 07:00.340
这句话下边还有很多代码

07:00.340 --> 07:01.340
我觉得那段代码

07:01.340 --> 07:02.340
是没有什么问题的

07:02.340 --> 07:03.340
应该没有什么问题

07:03.340 --> 07:04.340
关键点在这

07:04.340 --> 07:06.340
我认为关键点可能在这

07:06.340 --> 07:08.340
于是我就点这个按钮

07:08.340 --> 07:09.340
它就会直接跳到

07:09.340 --> 07:11.340
你看是不是直接跳到下一个断点

07:11.340 --> 07:13.340
就是这么个意思

07:13.340 --> 07:15.340
为什么这里A start

07:15.340 --> 07:16.340
打印了三次了

07:16.340 --> 07:17.340
是因为

07:17.340 --> 07:20.340
我刚才在这里调试

07:20.340 --> 07:23.340
我再重新刷新一次了

07:23.340 --> 07:24.340
重新刷新一次

07:24.340 --> 07:26.340
刷新一次

07:26.340 --> 07:27.340
这样子正常了

07:27.340 --> 07:29.340
现在即将运行这句话

07:29.340 --> 07:31.340
目前A start还没有输出

07:31.340 --> 07:33.340
那么现在我们运行到下一个断点

07:33.340 --> 07:34.340
你看

07:34.340 --> 07:36.340
这里是不是A start输出了

07:36.340 --> 07:37.340
那句话已经运行完了

07:37.340 --> 07:38.340
现在卡在这句话

07:38.340 --> 07:40.340
等待打印B

07:40.340 --> 07:41.340
懂了意思吗

07:41.340 --> 07:42.340
就这么个意思

07:42.340 --> 07:44.340
就是跳到下一个断点

07:44.340 --> 07:45.340
再说这个按钮

07:45.340 --> 07:47.340
这个按钮是做什么呢

07:48.340 --> 07:51.160
再来

07:52.160 --> 07:53.160
这个按钮

07:53.160 --> 07:55.160
我们是让它进入

07:55.160 --> 07:57.160
某一个方法去直行

07:57.160 --> 07:58.160
进入某一个方法直行

07:58.160 --> 07:59.160
如果说

07:59.160 --> 08:00.160
这叫

08:00.160 --> 08:01.160
不对不对

08:01.160 --> 08:02.160
这个按钮是跳过

08:02.160 --> 08:04.160
就直接把这个方法直行完

08:04.160 --> 08:06.160
直接把这个函数直行完

08:06.160 --> 08:07.160
然后直行到

08:07.160 --> 08:10.160
当前代码断点下一个句话

08:10.160 --> 08:12.160
也就是说我点这个

08:12.160 --> 08:13.160
就相当于是你把这个函数

08:13.160 --> 08:14.160
全部直行完了过后

08:14.160 --> 08:16.160
卡在这句话

08:16.160 --> 08:17.160
但是呢

08:17.160 --> 08:18.160
如果说这个直行过程中

08:18.160 --> 08:19.160
爆错了

08:19.160 --> 08:20.160
那就没招了

08:20.160 --> 08:21.160
你看

08:21.160 --> 08:22.160
是不是就直接爆错了

08:22.160 --> 08:24.160
它就会略过A函数里边

08:24.160 --> 08:26.160
A函数里边还有很多代码

08:26.160 --> 08:27.160
还会调用其他函数

08:27.160 --> 08:29.160
它会略过整个过程的直行

08:29.160 --> 08:30.160
当然它会直行

08:30.160 --> 08:32.160
只是不让你看到

08:32.160 --> 08:33.160
每一行的直行

08:33.160 --> 08:34.160
直接把A函数全部直行完

08:34.160 --> 08:35.160
跳到下一句话

08:35.160 --> 08:37.160
如果说直行过程中有错

08:37.160 --> 08:38.160
那就直接爆到这儿了

08:38.160 --> 08:39.160
懂了意思吧

08:39.160 --> 08:40.160
就这个按钮

08:40.160 --> 08:41.160
一会我们在实际的按钮里边

08:41.160 --> 08:42.160
还会给大家

08:42.160 --> 08:44.160
进行详细的细节讲解

08:44.160 --> 08:46.160
我们大概的先了解一下

08:46.160 --> 08:47.160
然后再来

08:47.160 --> 08:49.160
这个按钮是什么意思呢

08:49.160 --> 08:51.160
这个按钮是进入这个函数直行

08:51.160 --> 08:52.160
叫step int

08:52.160 --> 08:54.160
int就进入进去

08:54.160 --> 08:55.160
点击它

08:55.160 --> 08:58.160
你看是不是进入到A函数里边的直行

08:58.160 --> 08:59.160
对吧

08:59.160 --> 09:00.160
然后这句话

09:00.160 --> 09:01.160
这句话

09:01.160 --> 09:03.160
我觉得把它直行完就可以了

09:03.160 --> 09:04.160
我们继续点

09:04.160 --> 09:05.160
所以直行到B了

09:05.160 --> 09:06.160
到B这里

09:06.160 --> 09:08.160
我们又进入B的直行

09:08.160 --> 09:09.160
点这个按钮

09:09.160 --> 09:10.160
进入到B

09:10.160 --> 09:11.160
所以点这个按钮

09:11.160 --> 09:13.160
就会非常非常详细

09:13.160 --> 09:14.160
具细五一的列出

09:14.160 --> 09:15.160
每一行代码的直行

09:15.160 --> 09:17.160
现在到了B了

09:17.160 --> 09:19.160
这一行先直行

09:19.160 --> 09:20.160
直行没问题

09:20.160 --> 09:22.160
然后又进入到C

09:22.160 --> 09:23.160
进入到C直行

09:23.160 --> 09:25.160
又输出Cstart

09:25.160 --> 09:26.160
那么这个时候

09:26.160 --> 09:27.160
出现了一个变量

09:27.160 --> 09:28.160
它会在这里提示的

09:28.160 --> 09:30.160
这个变量的值是undefined

09:30.160 --> 09:31.160
你其实也可以在右边

09:31.160 --> 09:33.160
看到这个当前的局部变量

09:33.160 --> 09:35.160
A是undefined

09:35.160 --> 09:36.160
还有当前的Z

09:36.160 --> 09:37.160
这个函数直行期间

09:37.160 --> 09:39.160
Z的值是什么是window

09:39.160 --> 09:40.160
对吧

09:40.160 --> 09:42.160
都可以有这些相应的信息

09:42.160 --> 09:43.160
A是undefined

09:43.160 --> 09:44.160
那么这里

09:44.160 --> 09:45.160
要输出A点name

09:45.160 --> 09:46.160
是不是非常容易看出了

09:46.160 --> 09:48.160
那么这里就出现了问题

09:48.160 --> 09:50.160
当直行这句话的时候

09:50.160 --> 09:51.160
再一点的话

09:51.160 --> 09:52.160
它可能跳到这了

09:52.160 --> 09:53.160
这就是啥呢

09:53.160 --> 09:54.160
这是那个

09:54.160 --> 09:56.160
这是那个插件给我弄的

09:56.160 --> 09:58.160
这个插件给你夹在C

09:58.160 --> 09:59.160
这也是代码

09:59.160 --> 10:00.160
那么这一块我就不care了

10:00.160 --> 10:01.160
我就直接跳过了

10:01.160 --> 10:02.160
我直接运行

10:02.160 --> 10:04.160
直接往后运行了

10:04.160 --> 10:05.160
好

10:05.160 --> 10:06.160
回到这了

10:06.160 --> 10:07.160
那么这里就包戳了

10:07.160 --> 10:08.160
就可以定位到

10:08.160 --> 10:11.160
这个错误发生的问题在哪

10:11.160 --> 10:12.160
好了

10:12.160 --> 10:13.160
我们先大开了了解一下

10:13.160 --> 10:14.160
这个断点调试

10:14.160 --> 10:15.160
那么接下来

10:15.160 --> 10:16.160
我们通过一个案例

10:16.160 --> 10:18.160
来实际的操作一下

10:18.160 --> 10:19.160
好

10:19.160 --> 10:21.160
我们这里有一个练习题

10:21.160 --> 10:22.160
这个练习题呢

10:22.160 --> 10:25.160
其实就是我们之前做的那个

10:25.160 --> 10:28.160
这个小米商城这一块的

10:28.160 --> 10:29.160
就是轮波图

10:29.160 --> 10:30.160
这一块的切换

10:30.160 --> 10:31.160
就做的是这一块

10:31.160 --> 10:33.160
这一块明显出现了问题

10:33.160 --> 10:34.160
首先我这个图片

10:34.160 --> 10:35.160
没有显示出来

10:35.160 --> 10:37.160
然后我右下角的小点也没有

10:37.160 --> 10:39.160
好多好多问题

10:39.160 --> 10:40.160
这里边有很多问题

10:40.160 --> 10:41.160
我故意把代码弄错的

10:41.160 --> 10:42.160
然后我们打开控制台

10:42.160 --> 10:45.160
被发现控制台那边也有问题

10:45.160 --> 10:46.160
通过这个问题

10:46.160 --> 10:47.160
我们首先一个个解决

10:47.160 --> 10:48.160
一个一个解决

10:48.160 --> 10:49.160
慢慢来

10:49.160 --> 10:50.160
首先我们可以看到

10:50.160 --> 10:51.160
控制台那边

10:51.160 --> 10:53.160
有一个问题出现了

10:53.160 --> 10:54.160
第一个问题呢就是

10:54.160 --> 10:55.160
我尝试着

10:55.160 --> 10:57.160
从undefend里边去读属性

10:57.160 --> 10:59.160
读什么属性的class name

10:59.160 --> 11:00.160
所以我要尝试着

11:00.160 --> 11:01.160
去读这个属性

11:01.160 --> 11:02.160
那么报了错

11:02.160 --> 11:04.160
下边还有个网络错误

11:04.160 --> 11:05.160
那么这个网络错误

11:05.160 --> 11:06.160
现在可以不用管

11:06.160 --> 11:07.160
因为其实这个网络错误

11:07.160 --> 11:09.160
在这个一面东西

11:09.160 --> 11:10.160
可以看得出来

11:10.160 --> 11:11.160
这个图片没有加载出来

11:11.160 --> 11:12.160
对吧

11:12.160 --> 11:13.160
这个图片有问题

11:13.160 --> 11:14.160
好我们来看一下

11:14.160 --> 11:16.160
如何使用断点调试

11:16.160 --> 11:17.160
结合我们之前的

11:17.160 --> 11:19.160
各种调试方法

11:19.160 --> 11:21.160
准确地找到错误

11:21.160 --> 11:22.160
同学们呢

11:22.160 --> 11:23.160
下来之后

11:23.160 --> 11:24.160
这个联系题一定要去做

11:24.160 --> 11:25.160
因为这个联系题呢

11:25.160 --> 11:27.160
其实就是元老师的代码

11:27.160 --> 11:28.160
如果说你能找出

11:28.160 --> 11:30.160
别人代码中的错误

11:30.160 --> 11:32.160
那么你找自己的代码中的错误

11:32.160 --> 11:33.160
就非常轻而易举了

11:33.160 --> 11:34.160
因为你对自己的代码

11:34.160 --> 11:35.160
更加了解

11:35.160 --> 11:36.160
对吧

11:36.160 --> 11:37.160
那么首先我们来看一下

11:37.160 --> 11:38.160
元老师的解识里边

11:38.160 --> 11:40.160
大概是怎么写的

11:40.160 --> 11:41.160
我知道

11:41.160 --> 11:42.160
这里有一个喊

11:42.160 --> 11:43.160
就是你怎么来

11:43.160 --> 11:44.160
调别人的代码

11:44.160 --> 11:46.160
这里有一个数主

11:46.160 --> 11:48.160
我大概知道了

11:48.160 --> 11:49.160
你要调识之前

11:49.160 --> 11:50.160
你首先得对代码

11:50.160 --> 11:51.160
有一定的了解

11:51.160 --> 11:53.160
好这里封装了一个函数

11:53.160 --> 11:54.160
这个函数就是

11:54.160 --> 11:55.160
简化chorus magnet

11:55.160 --> 11:56.160
我大概知道了

11:56.160 --> 11:58.160
然后获取了一大堆动物

11:58.160 --> 11:59.160
然后这里呢

11:59.160 --> 12:01.160
初始化这个方法

12:01.160 --> 12:02.160
它就是生成了

12:02.160 --> 12:03.160
一大堆span元数

12:03.160 --> 12:04.160
对吧

12:04.160 --> 12:05.160
然后一个迁击方法

12:05.160 --> 12:06.160
传入一个下标

12:06.160 --> 12:07.160
能够切换图片

12:07.160 --> 12:09.160
到某一个下标

12:09.160 --> 12:10.160
对吧

12:10.160 --> 12:11.160
然后再往向前翻

12:11.160 --> 12:13.160
向后翻

12:13.160 --> 12:15.160
然后注册事件

12:15.160 --> 12:17.160
然后就是给下边的一个小点

12:17.160 --> 12:18.160
注册点击时间

12:18.160 --> 12:20.160
然后就是一些自动播放

12:20.160 --> 12:21.160
停止播放

12:21.160 --> 12:22.160
OK就差不多了

12:22.160 --> 12:24.160
代码大概过一遍

12:24.160 --> 12:26.160
不用去看里边的细节

12:26.160 --> 12:27.160
我们只需要关注

12:27.160 --> 12:28.160
整体的就可以了

12:28.160 --> 12:29.160
那么现在我们来调戳

12:29.160 --> 12:31.160
首先我们可以比较明显的看到

12:31.160 --> 12:32.160
这里有个错误

12:32.160 --> 12:33.160
我们先把这个错误

12:33.160 --> 12:34.160
来解决一下

12:34.160 --> 12:36.160
这里提示里

12:36.160 --> 12:37.160
代码的位置在这

12:37.160 --> 12:38.160
你点一下

12:38.160 --> 12:39.160
在哪呢

12:39.160 --> 12:40.160
在这

12:40.160 --> 12:41.160
结合我们刚才的错误

12:41.160 --> 12:42.160
什么意思

12:42.160 --> 12:44.160
它说无法读取属性

12:44.160 --> 12:45.160
className

12:45.160 --> 12:46.160
在undefined里边

12:46.160 --> 12:47.160
去读取属性

12:47.160 --> 12:48.160
className

12:48.160 --> 12:49.160
说明啥

12:49.160 --> 12:50.160
说明span是undefined

12:50.160 --> 12:52.160
我们如何来确定

12:52.160 --> 12:53.160
这一点呢

12:53.160 --> 12:54.160
非常简单

12:54.160 --> 12:55.160
我们在这里前面

12:55.160 --> 12:56.160
打个断点

12:56.160 --> 12:57.160
然后我们刷新一下

12:57.160 --> 12:59.160
让它运行到这句话

12:59.160 --> 13:00.160
是不是明显提示

13:00.160 --> 13:02.160
这个span是undefined

13:02.160 --> 13:03.160
通过右边

13:03.160 --> 13:04.160
这个属性

13:04.160 --> 13:05.160
也可以观察到

13:05.160 --> 13:06.160
span是undefined

13:06.160 --> 13:07.160
好

13:07.160 --> 13:08.160
那么现在个问题出现了

13:08.160 --> 13:09.160
那这个span

13:09.160 --> 13:10.160
在哪个方法里边呢

13:10.160 --> 13:12.160
在change方法里边

13:12.160 --> 13:13.160
对吧

13:13.160 --> 13:14.160
这个span是undefined

13:14.160 --> 13:15.160
我们就要看

13:15.160 --> 13:16.160
这个span哪来的

13:16.160 --> 13:18.160
是不是在上边这句话

13:18.160 --> 13:19.160
对吧

13:19.160 --> 13:20.160
我们就在上边这句话

13:20.160 --> 13:21.160
来打个断点

13:21.160 --> 13:23.160
然后停止

13:23.160 --> 13:24.160
重新运行

13:24.160 --> 13:25.160
看一下这个span是哪来的呢

13:25.160 --> 13:27.160
来自于BenderDots

13:27.160 --> 13:28.160
因为它是undefined的

13:28.160 --> 13:29.160
情况有很多

13:29.160 --> 13:30.160
我也不知道

13:30.160 --> 13:31.160
它为什么是undefined

13:31.160 --> 13:32.160
我要调

13:32.160 --> 13:34.160
它是通过这个表达式得到的

13:34.160 --> 13:35.160
有一些眼尖的同学

13:35.160 --> 13:36.160
就一眼能看出

13:36.160 --> 13:37.160
这个表达式的

13:37.160 --> 13:38.160
有问题了

13:38.160 --> 13:39.160
对吧

13:39.160 --> 13:40.160
然后来慢慢看一下

13:40.160 --> 13:41.160
这是一个什么

13:41.160 --> 13:42.160
这是一个dome

13:42.160 --> 13:43.160
你看

13:43.160 --> 13:44.160
明显是一个dome

13:44.160 --> 13:45.160
是一个div

13:45.160 --> 13:46.160
内样式为这个

13:46.160 --> 13:47.160
是我前面得到的dome

13:47.160 --> 13:48.160
我在读什么呢

13:48.160 --> 13:49.160
dome的q

13:50.160 --> 13:51.160
是不是读它的

13:51.160 --> 13:52.160
读它的什么

13:52.160 --> 13:54.160
读它的就是指元素

13:54.160 --> 13:55.160
对吧

13:55.160 --> 13:56.160
指元素

13:56.160 --> 13:57.160
我读它的属性呢

13:57.160 --> 13:59.160
读它的属性叫index

13:59.160 --> 14:01.160
我现在是要读index

14:01.160 --> 14:02.160
这个属性吗

14:02.160 --> 14:03.160
不是吧

14:03.160 --> 14:04.160
我是要读什么呢

14:04.160 --> 14:05.160
这个index是哪来的

14:05.160 --> 14:07.160
这个index是来自于参数

14:07.160 --> 14:08.160
你看

14:08.160 --> 14:09.160
index等于0

14:09.160 --> 14:10.160
来自于这个参数

14:10.160 --> 14:11.160
所以说我希望的是什么呢

14:11.160 --> 14:12.160
我希望的是读它的

14:12.160 --> 14:13.160
第一个指元素

14:13.160 --> 14:14.160
所以说我是不是要

14:14.160 --> 14:16.160
把index作为下标传进去

14:16.160 --> 14:18.160
因此这个代码是有问题的

14:18.160 --> 14:19.160
我不是把它当成下标

14:19.160 --> 14:21.160
而是把它当成属性的名字

14:21.160 --> 14:22.160
来读去了

14:22.160 --> 14:23.160
所以说这一块

14:23.160 --> 14:24.160
我们首先把它改一下

14:24.160 --> 14:25.160
找到这

14:25.160 --> 14:27.160
那么这个代码在哪一行呢

14:27.160 --> 14:28.160
69行

14:28.160 --> 14:29.160
我们找到69行

14:29.160 --> 14:30.160
在这里边

14:30.160 --> 14:31.160
是不是在这

14:31.160 --> 14:32.160
所以我把这个代码

14:32.160 --> 14:33.160
改一下

14:33.160 --> 14:34.160
改成index

14:34.160 --> 14:35.160
是不是这样对了

14:35.160 --> 14:36.160
保存

14:36.160 --> 14:37.160
这个错误得一块一块解决

14:37.160 --> 14:39.160
很多同学呢

14:40.160 --> 14:41.160
它是没问题的

14:41.160 --> 14:42.160
它能解决一个错误

14:42.160 --> 14:43.160
但是发现一个错误解决了之后

14:43.160 --> 14:45.160
因为还是没有效果的

14:45.160 --> 14:46.160
它就心态就崩溃了

14:46.160 --> 14:47.160
很正常

14:47.160 --> 14:49.160
很多时候不是一个错误

14:49.160 --> 14:50.160
好那么接下来

14:50.160 --> 14:51.160
还是有问题

14:51.160 --> 14:52.160
它说什么

14:52.160 --> 14:54.160
它说还是没有办法

14:54.160 --> 14:55.160
读取index的

14:55.160 --> 14:57.160
有时候心态就崩溃了

14:57.160 --> 15:00.160
其实你的改动有没有效果

15:00.160 --> 15:01.160
有效果

15:01.160 --> 15:02.160
只是那问题不止一个

15:02.160 --> 15:04.160
那肯定不止一处改动

15:04.160 --> 15:06.160
那我们又进入这一块

15:06.160 --> 15:07.160
它还是index的

15:07.160 --> 15:08.160
那为什么还是index呢

15:08.160 --> 15:09.160
现在呢

15:09.160 --> 15:10.160
那说明这个事变还是亡地犯的

15:10.160 --> 15:11.160
那我们又在这里打断点

15:11.160 --> 15:13.160
看它为什么还是亡地犯的

15:13.160 --> 15:14.160
好 刷新

15:14.160 --> 15:16.160
对吧 慢慢调

15:16.160 --> 15:17.160
有些同学呢

15:17.160 --> 15:18.160
为什么有些同学的错误

15:18.160 --> 15:19.160
出来了之后

15:19.160 --> 15:20.160
他调不出来

15:20.160 --> 15:21.160
原来是他自己写的

15:21.160 --> 15:22.160
他调不出来

15:22.160 --> 15:23.160
交给老师

15:23.160 --> 15:24.160
老师两个小小的调出来

15:24.160 --> 15:25.160
为什么

15:25.160 --> 15:27.160
就是因为老师有这个心理准备

15:27.160 --> 15:28.160
对吧

15:28.160 --> 15:29.160
他不是说一个地方有问题

15:29.160 --> 15:31.160
他可能是有很多地方有问题

15:31.160 --> 15:32.160
好 那再来看

15:32.160 --> 15:33.160
慢慢来

15:33.160 --> 15:34.160
这还是个动物

15:34.160 --> 15:35.160
这个动物是得到的

15:35.160 --> 15:36.160
这个动物得到的

15:36.160 --> 15:37.160
是没问题的

15:37.160 --> 15:39.160
你看这个臼菌

15:39.160 --> 15:41.160
这个臼菌是什么

15:41.160 --> 15:43.160
表它的指元素对吧

15:43.160 --> 15:44.160
它指元素没有

15:44.160 --> 15:46.160
你看它没有指元素

15:46.160 --> 15:47.160
那你读它第一个

15:47.160 --> 15:49.160
读出来不就是亡地犯的吗

15:49.160 --> 15:50.160
好 那么接下来

15:50.160 --> 15:51.160
下一个问题来了

15:51.160 --> 15:53.160
它为什么没有指元素

15:53.160 --> 15:54.160
接下来我们要思考了

15:54.160 --> 15:56.160
一边调一边思考

15:56.160 --> 15:57.160
这个动物是啥呀

15:57.160 --> 15:58.160
这个动物

15:58.160 --> 15:59.160
我们来找一找

15:59.160 --> 16:01.160
这个动物到底是什么东西

16:01.160 --> 16:03.160
我看一下这里没有转到定义

16:03.160 --> 16:04.160
没有的话

16:04.160 --> 16:06.160
我们往上找一找

16:06.160 --> 16:08.160
我们这一块来获取动物

16:08.160 --> 16:09.160
那么获取的是不是这个动物

16:09.160 --> 16:10.160
得到的是什么呀

16:10.160 --> 16:12.160
得到的内样式

16:12.160 --> 16:14.160
为Benerdorff的东西

16:14.160 --> 16:16.160
那么也就是我们在

16:16.160 --> 16:17.160
切换到这里

16:17.160 --> 16:18.160
切换到我们的就是

16:18.160 --> 16:20.160
那个元素调室这里

16:20.160 --> 16:22.160
我们找到这个区域

16:22.160 --> 16:24.160
Benerdorff 是不是这

16:24.160 --> 16:25.160
对吧 这里边

16:25.160 --> 16:27.160
它确实没有指元素

16:27.160 --> 16:29.160
这个时候就要想了

16:29.160 --> 16:31.160
它为什么没有指元素

16:31.160 --> 16:32.160
所以程序那天

16:32.160 --> 16:34.160
调室之前你一定要熟悉带吗

16:34.160 --> 16:36.160
它为什么没有指元素

16:36.160 --> 16:38.160
指元素它应该是哪来的

16:38.160 --> 16:40.160
是不是应该是我们

16:40.160 --> 16:41.160
创建出来的

16:41.160 --> 16:43.160
根据这个数组

16:43.160 --> 16:44.160
一行一行

16:44.160 --> 16:46.160
数组一项就创建一个Span元素

16:46.160 --> 16:48.160
数组第二项也创建一个Span元素

16:48.160 --> 16:49.160
这个Span元素是啥

16:49.160 --> 16:50.160
就不就是那个小底儿吗

16:50.160 --> 16:51.160
对吧 四个小底儿

16:51.160 --> 16:53.160
因为这个数组有四项

16:53.160 --> 16:54.160
创建了四个小底儿

16:54.160 --> 16:55.160
好 那么也就是说

16:55.160 --> 16:56.160
我当时在

16:56.160 --> 16:58.160
创建这个Span的时候

16:58.160 --> 17:00.160
创建它的指元素的时候

17:00.160 --> 17:02.160
没有给它创建好

17:03.160 --> 17:04.160
导致了后边

17:04.160 --> 17:06.160
堵它的指元素出现了问题

17:06.160 --> 17:08.160
所以说这个单我们应该调哪

17:08.160 --> 17:09.160
应该调我们

17:09.160 --> 17:11.160
创建指元素这一块

17:11.160 --> 17:13.160
所以说调程序

17:13.160 --> 17:14.160
它还真不一定是说

17:14.160 --> 17:16.160
你包错在哪一个位置

17:16.160 --> 17:18.160
我就要改哪一个位置

17:18.160 --> 17:20.160
还真不一定是这样子

17:20.160 --> 17:22.160
很多时候它是有关联性的

17:22.160 --> 17:24.160
这一块为什么没有指元素

17:24.160 --> 17:25.160
是因为前边没有

17:25.160 --> 17:26.160
创建好指元素

17:26.160 --> 17:28.160
创建指元素那一块出问题了

17:28.160 --> 17:29.160
那么我们就要找一找

17:29.160 --> 17:31.160
哪一块在创建指元素

17:31.160 --> 17:32.160
经历着初始化这里

17:32.160 --> 17:33.160
在创建指元素

17:33.160 --> 17:34.160
那这里的情况就有很多了

17:34.160 --> 17:36.160
有可能那个循环劲都没有劲

17:36.160 --> 17:37.160
那可能就

17:37.160 --> 17:38.160
那情况很多

17:38.160 --> 17:39.160
那我不知道什么情况

17:39.160 --> 17:40.160
我就在这里打个断点

17:40.160 --> 17:42.160
再重新来停止刷新

17:43.160 --> 17:45.160
我看初始化的时候

17:45.160 --> 17:47.160
是不是就出了问题

17:47.160 --> 17:50.600
好 到了这了

17:50.600 --> 17:51.600
那么这里我首先看一下

17:51.600 --> 17:52.600
有没有劲循环

17:52.600 --> 17:53.600
那怎么看呢

17:53.600 --> 17:55.600
直接就下一步呗

17:55.600 --> 17:57.600
看到底有没有劲循环

17:57.600 --> 17:59.600
我发现它劲的循环了

17:59.600 --> 18:00.600
创建了一个Span

18:00.600 --> 18:02.600
这个Span有没有创建

18:02.600 --> 18:03.600
创建好了

18:03.600 --> 18:04.600
然后给它的Class Name

18:04.600 --> 18:05.600
设置了FL

18:05.600 --> 18:07.600
好 你再进去下一句

18:07.600 --> 18:08.600
所以下一次循环了

18:08.600 --> 18:10.600
那第一次循环运行完了过后

18:10.600 --> 18:12.600
不就应该有一个Span元素吗

18:12.600 --> 18:14.600
我们到这个元素里面再看一下

18:14.600 --> 18:15.600
它是Span元素在不在呢

18:15.600 --> 18:17.600
对吧 一点一点的调

18:17.600 --> 18:18.600
诶

18:18.600 --> 18:20.600
Span元素还是没有

18:21.600 --> 18:22.600
那我这里确实

18:22.600 --> 18:24.600
刚刚确实也创建了这个Span元素

18:24.600 --> 18:26.600
但是为什么这里还是没有了

18:26.600 --> 18:27.600
仔细观察就会发现

18:27.600 --> 18:29.600
我只是创建了Span元素

18:29.600 --> 18:30.600
Span元素

18:30.600 --> 18:32.600
但是并没有把Span元素

18:32.600 --> 18:36.600
加到这个的指元素里边

18:36.600 --> 18:38.600
是不是没有加进去

18:38.600 --> 18:39.600
我就明白了

18:39.600 --> 18:40.600
原来代码的根源出现

18:40.600 --> 18:42.600
这一行45行

18:42.600 --> 18:44.600
现在同学们一定要跟着袁老师

18:44.600 --> 18:45.600
这样去做一下

18:45.600 --> 18:47.600
来体验一下怎么来调错误的

18:47.600 --> 18:49.600
你只要把这个东西学回来

18:49.600 --> 18:50.600
我跟你说

18:50.600 --> 18:53.600
那里的技术能力要突飞猛进

18:53.600 --> 18:55.600
你再也不用害怕错误了

18:55.600 --> 18:56.600
你胆子大了

18:56.600 --> 18:57.600
想写啥写啥

18:57.600 --> 18:58.600
错误了我能调

18:58.600 --> 19:01.600
好 我们这里就找到这个

19:01.600 --> 19:02.600
找到这个什么

19:02.600 --> 19:04.600
Benerdots

19:04.600 --> 19:05.600
Panchild

19:05.600 --> 19:07.600
就把Span元素加进去

19:07.600 --> 19:08.600
那这样就有指元素了

19:08.600 --> 19:09.600
好 我们保存一下

19:09.600 --> 19:11.600
为了验证我们写得对不对

19:11.600 --> 19:14.600
我们再重新刷新一次

19:14.600 --> 19:20.280
重新刷新

19:20.280 --> 19:24.870
为什么这么卡

19:24.870 --> 19:30.210
为什么电脑这么卡

19:30.210 --> 19:33.840
好 找到这一块

19:33.840 --> 19:35.840
那么现在我们再来打个断点

19:35.840 --> 19:37.840
刷新

19:37.840 --> 19:39.840
首先创建第一个指元素

19:39.840 --> 19:40.840
设置那样是FL

19:40.840 --> 19:41.840
然后加进去

19:41.840 --> 19:42.840
好 现在我们再来看

19:42.840 --> 19:44.840
有没有一个指元素的

19:44.840 --> 19:46.840
Benerdots

19:46.840 --> 19:47.840
这里边

19:47.840 --> 19:48.840
你就会发现出了一个指元素了

19:48.840 --> 19:49.840
对吧

19:49.840 --> 19:50.840
那么指元素这个问题

19:50.840 --> 19:52.840
那就解决了

19:52.840 --> 19:53.840
是不是解决了

19:53.840 --> 19:55.840
好 我们这里继续往后运行

19:55.840 --> 19:56.840
继续

19:56.840 --> 19:57.840
说明这一块没问题了

19:57.840 --> 19:58.840
那么接下来

19:58.840 --> 19:59.840
你看那个错误是不是没了

19:59.840 --> 20:00.840
没了

20:00.840 --> 20:01.840
对吧

20:01.840 --> 20:02.840
至少我们那个

20:02.840 --> 20:03.840
其他不说

20:03.840 --> 20:04.840
Span元素刷建好了

20:04.840 --> 20:06.840
对吧 这个问题没了

20:06.840 --> 20:08.840
好了 接下来我们来调另外一个问题

20:08.840 --> 20:09.840
剩下的问题

20:09.840 --> 20:10.840
剩下什么问题呢

20:10.840 --> 20:11.840
就是我这里

20:11.840 --> 20:12.840
这个错误是什么意思啊

20:12.840 --> 20:14.840
这个错误是告诉你

20:14.840 --> 20:16.840
我在拿这个图片拿不到

20:16.840 --> 20:18.840
404没有这张图片

20:18.840 --> 20:19.840
图片没有

20:19.840 --> 20:21.840
那么这个东西怎么调呢

20:21.840 --> 20:23.840
我们首先来看一下

20:23.840 --> 20:25.840
你图片没有显示出来

20:25.840 --> 20:26.840
对吧

20:26.840 --> 20:28.840
那一定是这个图片的src地址

20:28.840 --> 20:29.840
拿不到这个图片

20:29.840 --> 20:30.840
那这一块怎么调呢

20:30.840 --> 20:32.840
首先到元素这一块

20:32.840 --> 20:34.840
找到这个图片元素

20:34.840 --> 20:36.840
图片元素在哪

20:36.840 --> 20:37.840
在这

20:37.840 --> 20:40.840
这个图片元素的src地址

20:40.840 --> 20:41.840
是undefined的

20:41.840 --> 20:43.840
那肯定是没有这个图片地址

20:43.840 --> 20:45.840
是拿不到这个图片的

20:45.840 --> 20:46.840
对不对

20:46.840 --> 20:48.840
你看这个link在不断的变

20:48.840 --> 20:50.840
每个一点时间在不断的变

20:50.840 --> 20:52.840
但是图片的src地址没有

20:52.840 --> 20:53.840
好 那么这个时候

20:53.840 --> 20:55.840
我们就要回顾一下了

20:55.840 --> 20:58.840
图片的地址是在哪里

20:58.840 --> 20:59.840
设置的

20:59.840 --> 21:01.840
这个地方没有爆出

21:01.840 --> 21:03.840
它只是说图片拿不到

21:03.840 --> 21:05.840
为什么说其他错误

21:05.840 --> 21:07.840
那么图片地址是在哪里拿到的呢

21:07.840 --> 21:09.840
我们找到的元代码里边

21:09.840 --> 21:10.840
是不是在圈级里边

21:10.840 --> 21:12.840
这里是不是在设置图片地址

21:12.840 --> 21:14.840
那为什么是undefined的呢

21:14.840 --> 21:15.840
你看

21:15.840 --> 21:17.840
因为我们每隔一段时间

21:17.840 --> 21:18.840
就在运行这个代码

21:18.840 --> 21:20.840
所以说现在我没有刷新页面

21:20.840 --> 21:22.840
它依然跳到这个断点了

21:22.840 --> 21:24.840
我一点五秒之内切换一张图片

21:24.840 --> 21:27.840
一点五秒之后是不是要运行这个函数

21:27.840 --> 21:29.840
是不是要运行这个断点

21:29.840 --> 21:30.840
就卡得到了

21:30.840 --> 21:31.840
我们来观察一下

21:31.840 --> 21:32.840
我看这个

21:32.840 --> 21:33.840
它来自于哪呢

21:33.840 --> 21:34.840
这个src

21:34.840 --> 21:36.840
来自于D对象的img

21:36.840 --> 21:37.840
好

21:37.840 --> 21:38.840
我们来看一下对象

21:38.840 --> 21:39.840
对象在哪里

21:39.840 --> 21:40.840
是不是在这

21:40.840 --> 21:41.840
是不是有两个属性

21:41.840 --> 21:43.840
img 它是有值的呀

21:43.840 --> 21:45.840
那为什么我这也读不出来值呢

21:45.840 --> 21:46.840
那你观察一下

21:46.840 --> 21:49.840
就这么一行代码你肯定能观察得出来

21:49.840 --> 21:50.840
问题在哪呢

21:50.840 --> 21:52.840
是不是你的属性明显错了

21:52.840 --> 21:53.840
这也是同学们

21:53.840 --> 21:54.840
特别是初学的

21:54.840 --> 21:56.840
常见的一个错误

21:56.840 --> 21:57.840
非常正常

21:57.840 --> 21:58.840
非常正常

21:58.840 --> 21:59.840
出错不要紧

21:59.840 --> 22:00.840
要能调出来

22:00.840 --> 22:02.840
img 把它改一下

22:02.840 --> 22:03.840
62行

22:04.840 --> 22:07.840
把它写成img

22:08.840 --> 22:09.840
保存

22:10.840 --> 22:12.840
接下来我们继续往后运行

22:15.410 --> 22:16.410
停止 刷新

22:17.410 --> 22:20.910
把这个断点去掉

22:20.910 --> 22:22.910
那么现在同学们就可以看到

22:22.910 --> 22:23.910
我图片选择出来了

22:23.910 --> 22:25.910
其他功能也没有什么问题

22:25.910 --> 22:26.910
测试没什么问题

22:26.910 --> 22:28.910
然后的控制台也没有爆错了

22:28.910 --> 22:30.910
那么这些问题就一一得到解决了

22:31.910 --> 22:33.910
这些可能我只是拋砖隐喻

22:33.910 --> 22:35.910
我无法穷举

22:35.910 --> 22:37.910
这个世界上所有的

22:37.910 --> 22:39.910
需要断点调试的场景

22:39.910 --> 22:40.910
没有办法重举

22:40.910 --> 22:41.910
反正你们以后遇到问题

22:41.910 --> 22:42.910
先看控制台的话

22:42.910 --> 22:43.910
因为爆错

22:43.910 --> 22:44.910
先把爆错解决了

22:44.910 --> 22:45.910
但是那爆错解决了

22:45.910 --> 22:46.910
可能还有错误

22:46.910 --> 22:47.910
有些错误它不会爆错的

22:47.910 --> 22:49.910
它就是跟预期不相符

22:49.910 --> 22:51.910
你想象的东西

22:51.910 --> 22:53.910
跟你展现出来的东西不一样

22:53.910 --> 22:54.910
那么这个时候

22:54.910 --> 22:55.910
就需要断点调错

22:55.910 --> 22:57.910
你先猜想

22:57.910 --> 22:58.910
有的时候你不好确定位置

22:58.910 --> 22:59.910
你先猜想

22:59.910 --> 23:01.910
我这一块

23:01.910 --> 23:03.910
应大概可能是那个地方有问题

23:03.910 --> 23:05.910
那就从那个地方打断点

23:05.910 --> 23:07.910
一一调试

23:07.910 --> 23:08.910
最粗暴的就是

23:08.910 --> 23:10.910
每一句话一句话一句话看

23:10.910 --> 23:12.910
每句话看它的周围的变量

23:12.910 --> 23:13.910
它的指示什么

23:13.910 --> 23:15.910
是不是满足预期的

23:15.910 --> 23:17.910
那肯定是有个地方出了问题

23:17.910 --> 23:19.910
调到那个地方你可以解决

23:19.910 --> 23:20.910
那如果说你猜想错了

23:20.910 --> 23:21.910
不是这个地方有问题

23:21.910 --> 23:23.910
那有再一拆想一个地方

23:23.910 --> 23:25.910
所以说你断点调试

23:25.910 --> 23:27.910
其实非常非常考验

23:27.910 --> 23:29.910
对代码的控制能力

23:29.910 --> 23:31.910
你对代码越熟悉

23:31.910 --> 23:32.910
所以说你

23:32.910 --> 23:34.910
我为什么不让大家抄代码

23:34.910 --> 23:35.910
抄代码没有任何

23:35.910 --> 23:37.910
你只把练成下打字

23:37.910 --> 23:38.910
你把代码写完了

23:38.910 --> 23:39.910
但是你真正不知道

23:39.910 --> 23:40.910
代码每句话是什么意思

23:40.910 --> 23:41.910
每句话在做什么

23:41.910 --> 23:43.910
遇到错误你完全没法解决

23:43.910 --> 23:44.910
因为你不知道

23:44.910 --> 23:46.910
每个函数在做什么

23:46.910 --> 23:48.910
那你怎么知道哪里出了问题呢

23:48.910 --> 23:49.910
你只能盯着这个元代码

23:49.910 --> 23:50.910
一行一行的去看

23:50.910 --> 23:52.910
看那天心里崩溃了

23:52.910 --> 23:53.910
看不出来

23:53.910 --> 23:54.910
这么多行代码

23:54.910 --> 23:56.910
现在以后就不是100多行了

23:56.910 --> 23:58.910
以后就不是一个文件了

23:58.910 --> 24:00.910
所以说这个断点调

24:00.910 --> 24:02.910
调错就一定要慢慢的

24:02.910 --> 24:04.910
从现在开始

24:04.910 --> 24:06.910
叫慢慢的养成习惯

24:06.910 --> 24:08.910
能自己解决错误

24:08.910 --> 24:10.910
这个前期可能会有一点困难

24:10.910 --> 24:12.910
但是慢慢的熟见过后

24:12.910 --> 24:14.910
后面找错误就非常简单了

24:14.910 --> 24:15.910
好吧

24:15.910 --> 24:18.910
好 这是关于断点调试

24:18.910 --> 24:20.910
要给大家讲的东西

