WEBVTT

00:00.000 --> 00:03.440
好 有了前边的那个作用预的支持

00:03.440 --> 00:05.920
那么我们就可以说全局对象

00:05.920 --> 00:08.600
全局对象是一个非常简单的支持

00:08.600 --> 00:10.840
我们快速的过一下

00:10.840 --> 00:14.000
主要的问题集中在最后一个

00:14.000 --> 00:17.000
随时对我们代码的影响也不是很大

00:17.000 --> 00:20.160
但是多多少少会有一些影响

00:20.160 --> 00:22.000
所以说我们还是要认真听

00:22.000 --> 00:24.240
这个全局对象是什么玩意呢

00:24.240 --> 00:27.040
就是无论是浏览器环境还是漏的环境

00:27.080 --> 00:28.920
因为我们之前很多作业

00:28.920 --> 00:30.800
练习的代码都在漏的环境里面

00:30.800 --> 00:31.760
对吧

00:31.760 --> 00:34.640
其实它跟浏览器环境还是有一些区别的

00:34.640 --> 00:38.000
其中一个区别就是全局对象它不一样

00:38.000 --> 00:39.920
那么什么叫全局对象呢

00:39.920 --> 00:44.840
你可以把我们的整个程序想象成一个宇宙

00:44.840 --> 00:45.840
就是我们做开发

00:45.840 --> 00:48.920
实际上就是在创建一个宇宙

00:48.920 --> 00:50.520
这个宇宙里边要啥东西

00:50.520 --> 00:52.000
我们就给它定义啥东西

00:52.000 --> 00:53.320
比方说要一个人

00:53.320 --> 00:54.840
我们就给它定一个对象

00:54.840 --> 00:55.320
对吧

00:55.320 --> 00:56.520
要有一个数字

00:56.560 --> 00:58.040
我们就给它定一个数字

00:58.040 --> 01:00.120
宇宙里边有哪些东西

01:00.120 --> 01:01.600
那么整个宇宙

01:01.600 --> 01:04.040
我们就把它认为是一个全局对象

01:04.040 --> 01:05.760
就这么去理解

01:05.760 --> 01:09.640
漏的环境里边和浏览器环境里边的全局对象不一样

01:09.640 --> 01:11.480
简单的了解一下就行了

01:11.480 --> 01:13.960
浏览器环境里边的全局对象叫做Window

01:13.960 --> 01:16.800
这个是我们之后要经常接触的一个对象

01:16.800 --> 01:17.640
叫Window

01:17.640 --> 01:19.320
后面我们讲界面的时候

01:19.320 --> 01:22.440
还会更多的提到这个对象

01:22.440 --> 01:25.600
浏览器里边有什么一个对象叫Window

01:25.640 --> 01:27.320
Window里边你可以看到它是个对象

01:27.320 --> 01:29.880
然后里边有很多很多的属性

01:29.880 --> 01:31.920
不过这些属性大部分都没啥用

01:31.920 --> 01:35.200
我们只需要了解我们需要知道的属性就行了

01:35.200 --> 01:36.480
那需要知道哪些属性

01:36.480 --> 01:38.880
我们之后讲界面的时候再说

01:38.880 --> 01:42.400
我们现在只需要知道有这么一个全局对象

01:42.400 --> 01:43.200
叫做Window

01:43.200 --> 01:46.560
它就代表着我们整个程序的宇宙

01:46.560 --> 01:47.600
那么在漏的环境里边

01:47.600 --> 01:49.120
它其实也有一个全局对象

01:49.120 --> 01:50.160
叫做Global

01:50.160 --> 01:52.760
这个玩意我们就不做深究了

01:52.920 --> 01:54.360
我们随便接一个GS吧

01:54.360 --> 01:55.960
来看一下就行了

01:55.960 --> 01:58.200
我们去输出一下Global

01:58.200 --> 01:58.960
这是漏的环境

01:58.960 --> 02:00.120
我们一输出

02:00.120 --> 02:02.320
你看是不是拿了一个对象

02:02.320 --> 02:05.400
对象里边有很多很多的属性

02:05.400 --> 02:07.600
这就是全局对象

02:07.600 --> 02:09.160
那么我们现在不去了解

02:09.160 --> 02:11.400
这个全局对象里边有什么东西

02:11.400 --> 02:13.000
我们只需要知道

02:13.000 --> 02:16.000
全局对象有这么几个特点就可以了

02:16.000 --> 02:17.520
哪些特点呢

02:17.520 --> 02:18.360
第一个特点

02:18.360 --> 02:21.840
全局对象的属性是可以直接访问的

02:21.880 --> 02:23.040
这啥意思

02:23.040 --> 02:24.240
那我们来看一下

02:24.240 --> 02:26.040
我们平时在写代码的时候

02:26.040 --> 02:28.120
不经常写这个console对吧

02:28.120 --> 02:28.920
console是一个什么

02:28.920 --> 02:30.720
可以看出console是一个对象

02:30.720 --> 02:33.120
它里边有一个属性叫LOG

02:33.120 --> 02:33.360
对不对

02:33.360 --> 02:35.280
打印对不对

02:35.280 --> 02:36.600
那么也就是说它里边

02:36.600 --> 02:38.240
它是这么一个对象

02:38.240 --> 02:40.360
有一个对象叫console

02:40.360 --> 02:43.000
然后它里边有一个方法

02:43.000 --> 02:45.040
有一个函数叫LOG

02:45.040 --> 02:46.520
它是它的属性

02:46.520 --> 02:48.520
方形大概是这么一个样子

02:50.000 --> 02:51.480
那么这个console是哪来的呢

02:51.520 --> 02:53.840
为什么我们可以直接在这里写上这个console

02:53.840 --> 02:55.000
为什么呢

02:55.000 --> 02:57.080
就是因为全局对象里边

02:57.080 --> 02:59.480
它有一个属性叫做console

02:59.480 --> 03:01.480
你看window里边有个console

03:02.560 --> 03:03.320
看到没

03:03.320 --> 03:04.400
是不是一个对象

03:04.400 --> 03:06.080
对象里边有很多很多的属性

03:06.080 --> 03:07.080
其中一个属性叫LOG

03:07.960 --> 03:08.280
对吧

03:08.280 --> 03:08.680
LOG

03:10.120 --> 03:11.080
这就是全局对象

03:11.080 --> 03:12.280
第一个特点

03:12.280 --> 03:15.400
它的属性可以被直接访问

03:15.400 --> 03:16.640
全局对象第一个特点

03:16.640 --> 03:17.480
这个了解一下就行了

03:17.480 --> 03:18.120
非常简单

03:18.120 --> 03:18.880
对吧

03:18.880 --> 03:19.040
好

03:19.040 --> 03:19.520
第二个特点

03:19.520 --> 03:21.280
我们也了解一下

03:21.280 --> 03:24.200
如果说你在代码的运行过程中

03:24.200 --> 03:26.920
给了未声明的辩量复制

03:26.920 --> 03:30.560
实际上就是给全局对象的辩量复制

03:30.560 --> 03:32.240
应该这样说

03:32.240 --> 03:34.080
给全局对象的属性复制

03:34.080 --> 03:35.560
这说的啥意思

03:36.920 --> 03:40.120
比方说我们这里有一个a给它复制为1

03:40.120 --> 03:41.640
我有没有声明这个a

03:42.600 --> 03:43.440
是没有

03:43.440 --> 03:46.120
这个应该在浏览器环境里边执行

03:46.120 --> 03:48.880
浏览器环境里边比方说给f复制为一个e

03:48.880 --> 03:50.080
有没有声明过这个a

03:50.080 --> 03:51.120
没有

03:51.160 --> 03:52.000
它能不能复制

03:52.000 --> 03:53.000
能复制

03:53.000 --> 03:54.720
那复制跑哪去上呢

03:54.720 --> 03:56.040
它就复制到了哪呢

03:56.040 --> 03:58.880
复制到了window.a上面去了

03:58.880 --> 04:01.560
你看window.a说是等于1

04:01.560 --> 04:01.800
对吧

04:01.800 --> 04:03.120
这个表达是我1

04:03.120 --> 04:03.840
就这么个意思

04:05.120 --> 04:06.800
所以说

04:06.800 --> 04:09.800
如果在GS里边有个非常奇怪的特点

04:09.800 --> 04:13.040
就是你没有声明的辩量也可以复制

04:13.040 --> 04:13.960
它复制跑哪去了

04:13.960 --> 04:15.800
跑到全局对象里边去了

04:15.800 --> 04:17.200
它怎么理解呢

04:17.200 --> 04:18.680
它就这么理解吧

04:19.640 --> 04:21.040
这是一个宇宙

04:21.040 --> 04:24.520
这个宇宙里边每个东西应该有个名字

04:24.520 --> 04:26.480
但是如果说你没有给它声明

04:26.480 --> 04:28.200
那它还飘到宇宙上面去了

04:28.200 --> 04:29.800
变成太空垃圾了

04:29.800 --> 04:31.520
你这么去理解呗

04:31.520 --> 04:34.280
其实这一点不应该

04:34.280 --> 04:35.360
说实话不应该

04:35.360 --> 04:36.920
不能去这么涉及

04:38.120 --> 04:40.560
因此它既然这么涉及了也没办法

04:40.560 --> 04:42.640
这是一些历史遗留问题

04:42.640 --> 04:45.480
所以说大家永远不要去这么干

04:45.480 --> 04:47.760
这样去做的话

04:47.800 --> 04:49.360
就特别奇怪

04:49.360 --> 04:50.720
特别特别奇怪

04:50.720 --> 04:53.400
一个辩量没有声明也给它复制

04:53.400 --> 04:55.800
而且这个辩量你不仅是在这

04:55.800 --> 04:58.040
比方说你在一个函数里边也是一样

04:58.040 --> 04:58.760
没事的

04:58.760 --> 04:59.760
一个函数

04:59.760 --> 05:02.800
函数里边一个辩量A等于3

05:02.800 --> 05:04.960
我们来看一下运行这个函数

05:04.960 --> 05:06.160
雕用这个函数

05:06.160 --> 05:08.120
你会发现没有声明的辩量

05:08.120 --> 05:10.040
在函数里边也是一样的

05:10.040 --> 05:12.790
我们来看一下

05:12.790 --> 05:14.270
我们来看一下Windows

05:14.270 --> 05:16.430
变成3了

05:16.430 --> 05:18.070
就这么个意思

05:18.230 --> 05:20.350
这里同学们了解就行了

05:20.350 --> 05:21.670
第一个特点了解就行了

05:21.670 --> 05:22.790
第二个特点了解就行了

05:22.790 --> 05:25.270
对我们写代码了没有什么影响

05:25.270 --> 05:27.830
因为第二点我们永远不要去这么干就行了

05:28.470 --> 05:28.750
好

05:28.750 --> 05:30.510
终点是第三个点

05:30.510 --> 05:32.110
第三个点我们会花一点时间

05:32.110 --> 05:33.070
终点介绍一下

05:33.070 --> 05:36.310
因为它这一块对我们写代码是有影响的

05:37.390 --> 05:39.510
所有的全局辩量

05:39.510 --> 05:43.790
全局函数都会附加到

05:43.790 --> 05:45.990
对全局对象

05:45.990 --> 05:47.590
这是什么意思呢

05:47.630 --> 05:48.790
比方说

05:48.790 --> 05:51.390
我们这里的新建筑文件牙

05:51.390 --> 05:52.590
科堂代码

05:53.590 --> 05:55.390
因为我们要在浏览器环境里

05:55.390 --> 05:57.390
因为我们现在研究的是浏览器环境里面

05:57.390 --> 05:57.950
全局对象

05:57.950 --> 05:58.950
Windows

06:00.310 --> 06:01.710
我们再写个页面

06:01.710 --> 06:03.710
然后这里有两个GS

06:03.710 --> 06:05.710
1.2GS

06:05.710 --> 06:07.710
然后再来一个2.2GS

06:07.710 --> 06:09.710
页面上去引用它

06:11.150 --> 06:12.590
1 2

06:12.590 --> 06:13.710
好行了

06:13.710 --> 06:16.390
因为我们以后在公司里边开发的话

06:16.430 --> 06:18.430
是有很多人

06:18.430 --> 06:21.950
就你的同事跟你自己都会编写GS代码

06:21.950 --> 06:24.270
很有可能就是一人负责一个文件

06:24.270 --> 06:26.590
或者一人负责几个文件的编写

06:26.590 --> 06:28.390
一人负责一边你张山

06:28.390 --> 06:30.390
邓哥你来负责1.2GS

06:30.390 --> 06:33.390
老员你来负责2.2GS

06:33.390 --> 06:35.390
就这么个意思

06:36.310 --> 06:38.830
那么现在就是现在有一个情况

06:38.830 --> 06:41.430
就我们现在全局边有这么一个特点

06:41.430 --> 06:44.190
所有的全局对象有这么一个特点

06:44.190 --> 06:45.870
所有的全局辩量

06:45.870 --> 06:49.390
全局函数都会附加到全局对象

06:49.390 --> 06:50.270
啥意思

06:50.270 --> 06:53.950
比方说我在1.GS里边定义了一个全局辩量

06:53.950 --> 06:55.950
A点等于1

06:55.950 --> 06:59.750
然后又定义了一个全局函数B

06:59.750 --> 07:01.750
比方说出一个B

07:01.750 --> 07:03.030
这是全局函数吧

07:03.030 --> 07:03.670
什么叫全局函数

07:03.670 --> 07:06.830
就在全局代码里边定义的函数

07:06.830 --> 07:08.110
或者在全局辩量

07:08.110 --> 07:10.350
全局代码里边定义的辩量

07:10.350 --> 07:11.830
都是全局的

07:11.830 --> 07:14.870
包括你这样子写一个函数也可以

07:14.910 --> 07:17.870
那么这是属于函数生命还是辩量

07:17.870 --> 07:18.870
它是属于辩量

07:18.870 --> 07:20.670
把这个函数的表达是

07:20.670 --> 07:23.270
它的值负责给辩量C

07:23.270 --> 07:24.430
当然用法是一样的

07:24.430 --> 07:25.430
上节后面已经说了

07:25.430 --> 07:26.550
好

07:26.550 --> 07:27.310
那么你看

07:27.310 --> 07:29.950
这里边有一个全局辩量

07:29.950 --> 07:31.470
有两个全局辩量

07:31.470 --> 07:33.470
还有一个全局的函数

07:33.470 --> 07:34.950
那么这些玩意儿

07:34.950 --> 07:37.590
它全部都会附加到温度里边

07:37.590 --> 07:40.390
就相当于是你在温度里边写了这么一句话

07:40.390 --> 07:42.270
温度点A等于1

07:42.270 --> 07:44.710
然后温度点B等于方形

07:44.710 --> 07:50.630
然后温度点C等于一个方形

07:50.630 --> 07:52.590
就相当于是写了这么三句话

07:52.590 --> 07:55.790
所以说我们如果说把这个页面运行出来

07:55.790 --> 07:59.420
看一下

07:59.420 --> 08:00.660
我们把页面运行出来

08:00.660 --> 08:02.740
然后我们现在去运行

08:02.740 --> 08:05.380
看一下温度里边有没有A

08:05.380 --> 08:06.380
所以有个A

08:06.380 --> 08:07.980
温度里边有没有B

08:07.980 --> 08:10.020
所以有个B是一个函数

08:10.020 --> 08:12.140
温度里边有没有C呢

08:12.140 --> 08:13.740
有C也是一个函数

08:13.740 --> 08:15.060
所以这三个东西都存在

08:15.060 --> 08:16.900
就是这句话的意思

08:16.900 --> 08:18.860
所有的全局辩量全局函数

08:18.860 --> 08:22.260
都会附加到全局对象

08:22.260 --> 08:24.460
都会飘到宇宙里边去

08:24.460 --> 08:28.380
那么这样子做有什么意义呢

08:28.380 --> 08:29.740
这样子的意义在于

08:29.740 --> 08:33.620
我在2.GS里边我就可以用这些东西

08:33.620 --> 08:34.220
为什么呀

08:34.220 --> 08:35.740
因为我知道全局辩量

08:35.740 --> 08:37.060
全局对象有个特点

08:37.060 --> 08:39.900
它的属性是可以被直接访问的

08:39.900 --> 08:41.500
也就是说在2.GS里边

08:41.540 --> 08:43.780
我就可以用1.GS里边写的东西

08:43.780 --> 08:44.500
比方2.GS

08:44.500 --> 08:46.180
我去输出一个A

08:46.180 --> 08:47.980
输出一个B

08:47.980 --> 08:50.500
然后再输出一个C

08:50.500 --> 08:52.820
我们来看一下2.GS能不能输出

08:52.820 --> 08:54.540
你会发现说能输出1

08:54.540 --> 08:55.180
一个函数

08:55.180 --> 08:55.900
一个函数

08:55.900 --> 08:56.300
对吧

08:56.300 --> 08:58.660
那么B还可以当当成函数来调用

08:58.660 --> 09:00.100
C也可以当成函数来调用

09:00.100 --> 09:00.740
当然没问题

09:00.740 --> 09:03.380
因为它本身就是函数

09:03.380 --> 09:05.420
这是它这样做的好处

09:05.420 --> 09:09.580
就是可以让两个GS之间可以联通

09:09.620 --> 09:10.220
这样子做的话

09:10.220 --> 09:13.260
比方邓哥给我们提供了一个辩量

09:13.260 --> 09:14.580
提供了两个函数

09:14.580 --> 09:17.220
那我在我的GS里边就可以使用这个邓哥

09:17.220 --> 09:18.580
当然引用顺序的话

09:18.580 --> 09:19.620
得先引用1

09:19.620 --> 09:20.580
再引用2

09:20.580 --> 09:23.100
所以就可以用了

09:23.100 --> 09:24.900
那么这是它的特点

09:24.900 --> 09:29.820
那么这种现象它称之为全局污染

09:29.820 --> 09:30.700
什么叫污染

09:30.700 --> 09:33.700
就是全局对象里边本来给你做了一些属性了

09:33.700 --> 09:34.140
对吧

09:34.140 --> 09:35.420
然后你定义了辩量

09:35.420 --> 09:36.180
你声明了函数

09:36.180 --> 09:37.980
所以给它附加了一些属性

09:37.980 --> 09:39.020
叫污染

09:39.020 --> 09:40.940
又称之为全局暴露

09:40.940 --> 09:43.860
这是一个比较性感的名词

09:43.860 --> 09:45.460
一个性感的动作

09:45.460 --> 09:48.100
邓哥非常喜欢的暴露

09:48.100 --> 09:51.340
所以说我们以后说到什么污染

09:51.340 --> 09:54.100
全局污染或者说到全局暴露

09:54.100 --> 09:55.500
就指的是这么一个意思

09:55.500 --> 09:58.260
你在全局代码里边定义了一个辩量

09:58.260 --> 09:59.620
声明了一个函数

09:59.620 --> 10:03.660
造成了全局对象里边多了一些属性

10:03.660 --> 10:06.460
或者有的时候我们简称污染或者暴露

10:06.460 --> 10:07.580
那么其实这两个词

10:07.580 --> 10:08.500
说的是一个意思

10:08.500 --> 10:10.940
但是有的时候我们用这两个词的时候

10:10.940 --> 10:12.940
就是我们讲课

10:12.940 --> 10:14.860
不光是要交理一些代码

10:14.860 --> 10:16.940
不光是要交理概念原理

10:16.940 --> 10:19.900
还要交理一些常见的说法

10:19.900 --> 10:21.940
不然的话别人以后到公司里边

10:21.940 --> 10:23.500
别人这样说你听不懂

10:23.500 --> 10:25.700
没法沟通了

10:25.700 --> 10:27.460
那么污染和暴露这两个词

10:27.460 --> 10:34.180
其实可以看到污染是一个在贬义的词

10:34.180 --> 10:34.700
对吧

10:34.700 --> 10:37.300
暴露了有点稍微偏中性

10:37.300 --> 10:39.940
对登革来说就是包义词了

10:39.940 --> 10:41.060
那么这两个词

10:41.060 --> 10:43.460
我们到底有没有什么区别呢

10:43.460 --> 10:47.180
其实还是有一点点区别的

10:47.180 --> 10:48.460
说的都是一个意思

10:48.460 --> 10:51.540
但是我们有的时候愿意

10:51.540 --> 10:54.900
就是如果说我们不愿意暴露出去的东西

10:54.900 --> 10:58.020
就是比方说我这个代码里边

10:58.020 --> 10:58.980
1.GS里边

10:58.980 --> 11:02.820
我只希望把B附加到全局

11:02.820 --> 11:05.420
只希望把C附加到全局

11:05.420 --> 11:07.660
我不希望把A附加到全局

11:07.660 --> 11:10.540
那么A我们就认为是污染了全局

11:10.540 --> 11:12.980
因为我们不希望到全局

11:12.980 --> 11:14.300
就污染了

11:14.300 --> 11:17.860
所以说跟人的意愿有关系

11:17.860 --> 11:20.900
而我们B和C本来就是希望到全局的

11:20.900 --> 11:24.740
所以说我们就说把B和C暴露给全局

11:24.740 --> 11:25.780
就这个意思

11:25.780 --> 11:26.380
听懂了吧

11:26.380 --> 11:27.660
其实他们说的一个意思

11:27.660 --> 11:30.860
都是指的是附加到全局对象的一个属性

11:30.860 --> 11:33.540
只不过根据人的意愿

11:33.580 --> 11:35.580
我们有的时候不好的地方

11:35.580 --> 11:37.220
我们就说污染了

11:37.220 --> 11:39.140
我们希望达到的效果

11:39.140 --> 11:40.420
我们就说暴露

11:40.420 --> 11:42.940
就这么个意思

11:42.940 --> 11:44.300
那么这里我们就要说

11:44.300 --> 11:45.780
如果说要避免污染

11:45.780 --> 11:46.740
刚才有个问题出来了

11:46.740 --> 11:46.980
对吧

11:46.980 --> 11:49.500
比方说有些东西我不希望它污染全局

11:49.500 --> 11:51.380
但它确实又是全局变量

11:51.380 --> 11:53.100
那怎么办呢

11:53.100 --> 11:54.820
这个时候我们就要说

11:54.820 --> 11:57.060
这几个主要是讲这个

11:57.060 --> 11:58.020
怎么办

11:58.020 --> 12:02.020
那么这个时候我们就需要改变起作用预

12:02.020 --> 12:03.380
那么怎么来改变呢

12:03.420 --> 12:04.780
因为我们只上了一个学过

12:04.780 --> 12:06.340
作用预无非只有两种

12:06.340 --> 12:07.740
一种叫全局作用预

12:07.740 --> 12:09.500
一种叫函数作用预

12:09.500 --> 12:10.860
对吧

12:10.860 --> 12:12.460
那么比方说

12:12.460 --> 12:14.300
为什么我们不希望有

12:14.300 --> 12:15.180
有的很多时候

12:15.180 --> 12:17.260
我们不希望有太多的污染

12:17.260 --> 12:18.100
为什么呢

12:18.100 --> 12:20.860
是因为我们在写技业史代码的时候

12:20.860 --> 12:22.340
不是要定义很多变量吗

12:22.340 --> 12:25.020
那肯定不是一两个

12:25.020 --> 12:28.060
而我们的技业史文件也不是一两个的

12:28.060 --> 12:30.580
是有很多很多个技业史文件

12:30.580 --> 12:31.460
那么这样一来的话

12:31.460 --> 12:32.860
就会造成一个问题

12:32.900 --> 12:34.460
灯阁那边定义了哪些变量

12:34.460 --> 12:35.740
我不知道

12:35.740 --> 12:37.780
我不可能去看一杯变灯阁的代码

12:37.780 --> 12:38.620
比方说几百毫

12:38.620 --> 12:40.820
你代码我哪里去看

12:40.820 --> 12:42.500
然后我这边也要定义变量

12:42.500 --> 12:43.180
那我就麻烦了

12:43.180 --> 12:44.700
我的负担就特别重

12:44.700 --> 12:46.300
心理压力特别重

12:46.300 --> 12:48.220
我就非常害怕

12:48.220 --> 12:51.460
我的变量名字跟灯阁冲突了

12:51.460 --> 12:52.140
对吧

12:52.140 --> 12:54.380
所以说能够不污染是最好的

12:54.380 --> 12:56.260
那怎么才能做到不污染的

12:56.260 --> 12:57.180
比方说这个

12:57.180 --> 12:59.420
我不希望它污染

12:59.420 --> 13:02.380
不希望污染全局

13:02.460 --> 13:04.780
但是我确实又要定义这个变量A

13:04.780 --> 13:05.940
那怎么办呢

13:05.940 --> 13:07.460
非常简单

13:07.460 --> 13:09.780
因为你是为什么会污染

13:09.780 --> 13:11.900
因为你是全局变量

13:11.900 --> 13:12.740
所以说你会污染

13:14.260 --> 13:16.620
我把你改一个作用域

13:16.620 --> 13:17.860
不让你是全局的

13:17.860 --> 13:19.460
不就不污染了吗

13:19.460 --> 13:20.860
那我怎么来改一个作用域

13:20.860 --> 13:22.020
只能用一种改法

13:22.020 --> 13:22.540
对吧

13:22.540 --> 13:25.180
我给你写个函数

13:25.180 --> 13:28.300
我给你写个函数

13:28.300 --> 13:29.980
把你放到函数里边

13:29.980 --> 13:32.420
然后我在这里去做一个函数调用

13:32.420 --> 13:34.700
那这样不就不污染了吗

13:34.700 --> 13:35.300
对吧

13:35.300 --> 13:38.300
那我们在2.json里面再去输出一个A

13:38.300 --> 13:39.540
还能输出吗

13:39.540 --> 13:42.020
那肯定就不能输出了

13:42.020 --> 13:44.100
知道意思吧

13:44.100 --> 13:45.100
对吧

13:45.100 --> 13:46.820
现在我们再输出A看一下

13:46.820 --> 13:47.420
能输出吗

13:47.420 --> 13:48.420
A是not defined

13:48.420 --> 13:49.820
是不是没有污染了

13:49.820 --> 13:51.980
我们再去看一下Windows里面有没有A

13:51.980 --> 13:53.820
那肯定就是没有了

13:53.820 --> 13:55.820
对吧

13:55.820 --> 13:57.740
是没有undefined的

13:57.740 --> 13:59.220
就这么个意思

13:59.260 --> 14:01.260
把它放到函数里边就行了

14:01.260 --> 14:03.020
但是呢

14:03.020 --> 14:04.980
这里有两个问题

14:04.980 --> 14:06.900
第一个问题就是

14:06.900 --> 14:10.460
你这个函数不也污染了吗

14:10.460 --> 14:12.220
你这个函数是全局的

14:12.220 --> 14:13.660
虽然说A没有污染

14:13.660 --> 14:16.500
但是函数也污染了呀

14:16.500 --> 14:17.660
Windows

14:17.660 --> 14:19.860
就是函数也污染了

14:19.860 --> 14:20.100
对吧

14:20.100 --> 14:21.660
这是一个问题

14:21.660 --> 14:22.580
第二个问题

14:22.580 --> 14:24.500
你看这个比方说这里的代码

14:24.500 --> 14:25.860
我只写了一行

14:25.860 --> 14:27.900
实际上这里的代码可以有很多的

14:27.900 --> 14:29.420
就是我们把整个全局代码

14:29.420 --> 14:31.740
全部包到一个函数里边

14:31.740 --> 14:34.500
这样子做的话

14:34.500 --> 14:37.380
一个是函数本身有污染

14:37.380 --> 14:42.420
第二个情况就是你这不多持一举吗

14:42.420 --> 14:43.860
为什么这样说呢

14:43.860 --> 14:46.020
你看函数的作用是啥

14:46.020 --> 14:48.540
提取重复代码

14:48.540 --> 14:50.580
这里有啥都重复代码可以提取

14:50.580 --> 14:51.620
这里边就是全局代码

14:51.620 --> 14:51.820
对吧

14:51.820 --> 14:53.620
之前的全局代码全部写到里边

14:53.620 --> 14:55.740
这里边还有很多很多的变量

14:55.820 --> 14:58.060
B.NU2,C.NU3,D.NU4

14:58.060 --> 15:00.740
还有一大堆其他的函数都在里边

15:00.740 --> 15:02.540
包括我们在这里边还可以写函数

15:02.540 --> 15:03.220
对吧

15:03.220 --> 15:05.020
刚才我们写的C

15:05.020 --> 15:06.780
一个函数说出一个C

15:06.780 --> 15:08.260
都可以写到这里边

15:08.260 --> 15:09.620
那么这些都不污染全局

15:09.620 --> 15:11.420
就是我们把所有的全局代码

15:11.420 --> 15:13.740
全部写到这里边

15:13.740 --> 15:16.020
那你提什么公共代码

15:16.020 --> 15:16.820
提什么重复

15:16.820 --> 15:19.460
这个函数没有达到提重复的目的

15:19.460 --> 15:21.020
第二个就是

15:21.020 --> 15:21.940
我们函数有两个作用

15:21.940 --> 15:24.660
一个是提取重复代码

15:24.700 --> 15:26.580
第二个呢

15:26.580 --> 15:28.460
降低复杂度

15:28.460 --> 15:30.740
你有降低复杂度吗

15:30.740 --> 15:32.340
你降低到啥复杂度

15:32.340 --> 15:34.220
你就把所有的代码全部

15:34.220 --> 15:35.580
放到这里边就完事了

15:35.580 --> 15:37.020
然后调用一次

15:37.020 --> 15:37.540
所以说呢

15:37.540 --> 15:39.540
这里其实是多此一举

15:39.540 --> 15:40.780
我定义一个函数

15:40.780 --> 15:42.220
然后马上就调用它

15:42.220 --> 15:44.420
把整个代码运行一次

15:44.420 --> 15:46.020
没什么意义

15:46.020 --> 15:47.340
就有点像什么

15:47.340 --> 15:48.580
比方说我们吃饭

15:48.580 --> 15:49.340
非常简单

15:49.340 --> 15:50.420
放上来了过后

15:50.420 --> 15:51.060
拆上来过后

15:51.060 --> 15:52.740
就咚咚咚把吃完就完事了

15:52.740 --> 15:54.100
这是我们普通人

15:54.140 --> 15:55.260
那咚咚不一样了

15:55.260 --> 15:56.660
咚咚吃饭特别讲究

15:56.660 --> 15:57.500
就知道了

15:57.500 --> 15:58.660
咚咚幸福

15:58.660 --> 15:59.780
所以他吃饭之前

15:59.780 --> 16:02.340
有一系列的操作都看不懂

16:02.340 --> 16:02.860
什么操作呢

16:02.860 --> 16:04.660
比方说他吃饭之前

16:04.660 --> 16:06.140
要来一个目的更衣

16:06.140 --> 16:07.620
要打做一个小时

16:07.620 --> 16:08.900
然后拿出一根银针

16:08.900 --> 16:10.260
试一下这个饭

16:10.260 --> 16:12.420
这个银针有没有变黑啊

16:12.420 --> 16:13.780
然后再回刀自弓

16:13.780 --> 16:15.740
其实这些是不是有用的操作

16:15.740 --> 16:16.580
都是费操作

16:16.580 --> 16:17.140
对吧

16:17.140 --> 16:18.220
所以说这里呢

16:18.220 --> 16:19.700
就相当于是这种情况

16:19.700 --> 16:20.500
费操作

16:20.500 --> 16:21.740
你招了一大瓦

16:21.740 --> 16:23.660
不就是要写一个函数

16:23.700 --> 16:24.940
然后把这个代码包起来

16:24.940 --> 16:26.900
然后调用它嘛

16:26.900 --> 16:28.780
有没有更简单的写法

16:28.780 --> 16:29.660
有啊

16:29.660 --> 16:31.020
怎么写啊

16:31.020 --> 16:33.340
函数我们也可以写成表达式

16:33.340 --> 16:34.780
比方说我们之前写过一个函数

16:34.780 --> 16:35.740
对吧

16:35.740 --> 16:38.020
比方说我们这里把函数改造一下

16:38.020 --> 16:38.820
怎么改造

16:38.820 --> 16:39.820
我定一个变量

16:42.060 --> 16:43.300
把这个变量负值给

16:43.300 --> 16:45.300
把这个函数负值给这个变量

16:45.300 --> 16:48.260
这个玩意就叫函数表达式

16:48.260 --> 16:51.660
或者叫函数字面量

16:51.660 --> 16:52.940
都是一个意思

16:52.980 --> 16:54.660
就把这个函数直接

16:54.660 --> 16:55.340
创建一个函数

16:55.340 --> 16:57.460
直接把这个函数负值给这个变量

16:57.460 --> 16:58.300
当然呢

16:58.300 --> 16:59.140
严格来说的话

16:59.140 --> 17:02.180
是把这个函数的地址负值给这个变量

17:02.180 --> 17:03.140
然后通过这个变量

17:03.140 --> 17:03.940
是不是找到这个函数

17:03.940 --> 17:05.500
然后调用它

17:05.500 --> 17:06.980
是一样的

17:06.980 --> 17:08.060
那既然如此

17:08.060 --> 17:10.580
我这里可以写变量

17:10.580 --> 17:13.300
我这里能不能写表达式啊

17:13.300 --> 17:14.900
当然可以啊

17:14.900 --> 17:16.500
这个玩意不就是函数吗

17:16.500 --> 17:19.300
我把这个函数直接放过来就行了

17:19.300 --> 17:21.220
放过来之后还爆错了

17:21.220 --> 17:22.740
爆什么错呢

17:22.780 --> 17:24.340
它分不清楚了

17:24.340 --> 17:25.900
就是既然是个浏览器啊

17:25.900 --> 17:26.500
分不清楚

17:26.500 --> 17:28.020
它是啥玩意

17:28.020 --> 17:30.060
这个是你前面写的一个函数

17:30.060 --> 17:30.820
又没有名字

17:30.820 --> 17:32.940
它把它当成函数声明了

17:32.940 --> 17:34.220
因为我们知道函数声明

17:34.220 --> 17:35.700
这里是必须要写名字的

17:35.700 --> 17:36.300
对吧

17:36.300 --> 17:37.740
但是你又没有写名字

17:37.740 --> 17:38.740
这是什么玩意呢

17:38.740 --> 17:39.740
后面又加上两个小过号

17:39.740 --> 17:41.300
什么玩意看不懂了

17:41.300 --> 17:42.460
那你怎么办呢

17:42.460 --> 17:43.300
你要让它看得懂

17:43.300 --> 17:44.740
你在这里加个小过号

17:46.340 --> 17:47.420
给高速浏览器

17:47.420 --> 17:49.380
你不要把它当成一个函数声明

17:49.380 --> 17:51.700
这是一个函数表达式

17:51.740 --> 17:53.180
就是相当于是个堆箱一样

17:53.180 --> 17:54.820
我创建了这么一个函数

17:54.820 --> 17:56.340
这个小过号里边了

17:56.340 --> 17:58.020
表示我创建了这么一个函数

17:58.020 --> 17:59.060
然后呢

17:59.060 --> 18:00.900
马上调用它

18:00.900 --> 18:02.540
这个后面的小过号啥意思

18:02.540 --> 18:04.660
后面的小过号表示我调用函数

18:04.660 --> 18:05.780
往里边喘参数

18:05.780 --> 18:07.900
只不过这里没有参数而已

18:07.900 --> 18:08.900
懂了意思吗

18:08.900 --> 18:10.580
就相当于是我这里写了个

18:10.580 --> 18:11.460
直接写了个函数

18:11.460 --> 18:12.540
然后调用它

18:12.540 --> 18:16.060
这叫做立即执行函数

18:16.060 --> 18:17.540
立即执行函数

18:17.540 --> 18:18.540
什么叫立即执行函数

18:18.540 --> 18:19.820
就是我写个函数表达式

18:19.820 --> 18:21.140
马上就调用它

18:21.140 --> 18:24.580
就是临时生成一个函数临时调用一下

18:24.580 --> 18:26.340
那么立即执行函数

18:26.340 --> 18:29.140
还有一个专用名字叫做IIFE

18:29.140 --> 18:29.500
什么意思

18:29.500 --> 18:31.140
拿下全身叫做immediate指令

18:31.140 --> 18:36.460
表示立即的invoked调用函数表达式

18:36.460 --> 18:37.260
IFE

18:37.260 --> 18:39.140
以后我们说到立即执行函数

18:39.140 --> 18:40.780
就指的是这个样子

18:40.780 --> 18:43.060
以后我们说到IFE

18:43.060 --> 18:44.900
指的也是这个样子

18:44.900 --> 18:45.580
那么我们来看一下

18:45.580 --> 18:46.980
把它写成这个样子过

18:46.980 --> 18:48.140
执行肯定没问题

18:48.140 --> 18:49.500
一定是能执行的

18:49.540 --> 18:51.500
生成一个函数马上调用它

18:51.500 --> 18:53.540
首先我们看几个问题没有解决

18:53.540 --> 18:55.060
作用域的问题没有解决

18:55.060 --> 18:56.380
有解决

18:56.380 --> 18:58.100
这个里面是不是还是函数里面

18:58.100 --> 19:00.100
你看这个代码是不是在一个函数里面

19:00.100 --> 19:02.580
因此它们没有无染全局

19:02.580 --> 19:03.740
第二个问题没有解决

19:03.740 --> 19:06.980
就是那个函数本身无染的全局

19:06.980 --> 19:07.860
有没有解决

19:07.860 --> 19:08.460
有啊

19:08.460 --> 19:09.740
我这个函数都没有名字

19:09.740 --> 19:11.100
叫匿名函数

19:11.100 --> 19:12.260
匿名

19:12.260 --> 19:13.580
没有名字的函数

19:13.580 --> 19:15.980
所以它不无染全局

19:15.980 --> 19:16.620
好

19:16.620 --> 19:18.260
然后呢

19:18.260 --> 19:20.700
是不是变得代码变得更加简洁了

19:20.700 --> 19:21.260
对吧

19:21.260 --> 19:23.100
没有多词语矩了吗

19:23.100 --> 19:25.300
所以说我们这样的代码是

19:25.300 --> 19:27.380
最能够解决这个问题的

19:27.380 --> 19:27.500
好

19:27.500 --> 19:28.580
我们再来看一下

19:28.580 --> 19:31.900
现在我们写的1点解是2点解是

19:31.900 --> 19:33.340
首先没有无染全局

19:33.340 --> 19:36.020
第二也没有函数本身也没有无染

19:36.020 --> 19:37.460
所以说现在这种代码

19:37.460 --> 19:39.500
是我们最重要写出来的代码

19:39.500 --> 19:41.180
因此我们这几课说了半天

19:41.180 --> 19:42.620
就是要告诉大家

19:42.620 --> 19:44.220
以后里面在公司里面

19:44.260 --> 19:46.820
遇到了多个解释文件

19:46.820 --> 19:49.300
一般上引用了多个解释文件

19:49.300 --> 19:51.420
为了避免无染全局

19:51.420 --> 19:53.700
应该在每一个解释文件里面

19:53.700 --> 19:55.220
把它的所有代码

19:55.220 --> 19:57.300
放到这个立即执行函数里面

19:58.500 --> 19:59.620
立即执行函数

19:59.620 --> 20:01.300
不光光是可以在这里用

20:01.300 --> 20:01.740
将来呢

20:01.740 --> 20:03.020
我们还有别的用处啊

20:03.020 --> 20:04.220
不过我们将来再说

20:04.220 --> 20:05.420
它的主要作用呢

20:05.420 --> 20:07.940
是用来强行改变

20:07.940 --> 20:09.980
一块代码的作用欲

20:09.980 --> 20:11.660
主要是起这么一个作用

20:11.660 --> 20:12.380
目前呢

20:12.380 --> 20:15.460
那么就是用它来解决全局变量无染

20:15.460 --> 20:16.380
以全局变量无染

20:16.380 --> 20:16.900
为什么

20:16.900 --> 20:18.980
因为你的作用欲是全局的

20:18.980 --> 20:21.340
那我们改变你的作用欲就完事了

20:21.340 --> 20:22.820
所以说来说去

20:22.820 --> 20:25.500
最终得出来的结论是非常简单的

20:25.500 --> 20:26.340
什么结论呢

20:26.340 --> 20:27.540
就是我们把所有的代码

20:27.540 --> 20:28.580
所有的接式的代码

20:28.580 --> 20:31.460
全部放到立即执行函数里面

20:31.460 --> 20:32.380
只需要你知道

20:32.380 --> 20:34.180
有这么一件事就可以了

20:34.180 --> 20:35.860
不过我们将来在写的时候呢

20:35.860 --> 20:37.580
因为我们训练的重点不同

20:37.580 --> 20:40.540
可能老师不会用这种方式来写

20:40.540 --> 20:42.180
但是你们要知道

20:42.180 --> 20:42.660
以后呢

20:42.660 --> 20:44.420
你们在公司里面遇到了多个接式

20:44.420 --> 20:47.420
你们要去这样做就可以了

20:47.420 --> 20:51.140
这是关于这个立即执行函数

20:51.140 --> 20:52.260
然后呢

20:52.260 --> 20:54.140
这里还有一个问题没有解决啊

20:54.140 --> 20:55.180
什么问题呢

20:55.180 --> 20:57.620
刚才我们说有些变量不希望无染全局

20:57.620 --> 21:00.540
比方说A和B不希望无染全局

21:00.540 --> 21:03.740
但是C我要暴露出去

21:03.740 --> 21:06.020
那我该怎么暴露呢

21:06.020 --> 21:09.060
我应该怎么把C暴露出去的问题是

21:09.060 --> 21:10.060
非常简单

21:10.060 --> 21:11.500
我把C解了外面就行了

21:11.540 --> 21:11.980
可不可以

21:11.980 --> 21:13.740
当然可以

21:13.740 --> 21:17.980
那如果说C里面要输出A加B怎么办

21:17.980 --> 21:18.820
这里有B包了

21:18.820 --> 21:19.300
对吧

21:19.300 --> 21:21.260
我们希望C在这

21:21.260 --> 21:22.540
因为这里呢

21:22.540 --> 21:24.660
在函数里面是不是他

21:24.660 --> 21:26.740
他自己没有的东西可以从外边找

21:26.740 --> 21:26.980
对吧

21:26.980 --> 21:27.740
从外层找

21:27.740 --> 21:29.420
是不是可以找到A和B

21:29.420 --> 21:29.580
对吧

21:29.580 --> 21:30.500
这里有B包

21:30.500 --> 21:31.380
但是不管怎么样

21:31.380 --> 21:33.660
我们希望他输出A加B

21:33.660 --> 21:34.740
但问题是我这里

21:34.740 --> 21:36.980
我如果说把他写到外面能输出吗

21:36.980 --> 21:37.660
是不是输出不了了

21:37.660 --> 21:39.020
这个时候

21:39.020 --> 21:40.500
A加B是不是拿不到了

21:40.540 --> 21:44.260
所以说这个写到外边是不合适的

21:44.260 --> 21:46.420
我们仍然应该写到里边

21:46.420 --> 21:47.780
那么写到里边的时候

21:47.780 --> 21:49.700
问题是C怎么暴露出去了

21:51.300 --> 21:52.060
怎么暴露出去

21:53.900 --> 21:56.780
我再给你写回原来的格式你就知道了

22:00.910 --> 22:02.310
我给你写成原来的格式

22:04.150 --> 22:10.540
你就看懂了

22:10.540 --> 22:12.100
我给你写成这种格式

22:12.100 --> 22:14.460
那么现在我要把C暴露出去怎么办

22:15.620 --> 22:16.460
不非常简单吗

22:16.500 --> 22:18.100
我这里Return谁就完事了

22:19.300 --> 22:22.060
这个函数执行完了过后

22:22.060 --> 22:23.540
函数也可以被返回的

22:23.540 --> 22:24.940
任何东西都可以被返回

22:24.940 --> 22:26.940
数字可以返回一个数字

22:26.940 --> 22:28.660
可以返回一个字符串

22:28.660 --> 22:30.020
可以返回一个对象

22:30.020 --> 22:31.620
也可以返回一个函数

22:31.620 --> 22:32.260
都行

22:32.260 --> 22:32.860
都一样

22:34.300 --> 22:36.340
那么我们现在把C返回

22:36.340 --> 22:37.900
那么这里能调用函数过后

22:37.900 --> 22:39.380
这个函数是不是一个结果

22:39.380 --> 22:40.180
这个结果是啥

22:40.180 --> 22:42.460
这个结果就是C

22:42.460 --> 22:43.740
所以说我这里是不是可以用个变量

22:43.740 --> 22:44.820
你来接受一下

22:44.940 --> 22:46.940
不要让我变量能写ABC

22:46.940 --> 22:48.100
那么我一暴露的是谁

22:48.100 --> 22:49.020
暴露的就是ABC

22:49.020 --> 22:49.700
这个ABC是啥

22:49.700 --> 22:51.340
就是这个C函数

22:51.340 --> 22:52.780
好 我们来输出一下ABC

22:52.780 --> 22:55.420
你看一下

22:55.420 --> 22:56.620
是不是就是这个C函数

22:57.780 --> 22:58.420
对吧

22:58.420 --> 23:00.140
我就把个C函数返回就完事了

23:00.140 --> 23:00.820
这一接收

23:00.820 --> 23:01.260
对吧

23:01.260 --> 23:02.620
你想到用什么名字

23:02.620 --> 23:04.060
你就用什么名字接收

23:04.060 --> 23:06.180
因为这是一个变量

23:06.180 --> 23:06.980
权局变量

23:06.980 --> 23:08.460
所以说他就暴露出去了

23:09.540 --> 23:10.220
懂了意思吧

23:10.220 --> 23:11.780
那么这里能我是把它提成函数

23:11.780 --> 23:13.860
那能不能写函数表达是一样了

23:14.860 --> 23:17.580
我把这一块替换成函数表达是

23:19.580 --> 23:22.180
有的时候我们写函数表达是这样的写

23:22.180 --> 23:24.940
就是先写两个小货号

23:24.940 --> 23:26.820
后面那个小货号表示调用函数

23:26.820 --> 23:29.220
前面那个小货号表示一个函数表达是

23:30.580 --> 23:32.380
就写成这么一个代码

23:32.380 --> 23:34.100
然后在这里写所有代码

23:34.100 --> 23:35.980
比方说我们在这里输出一个ABC

23:47.160 --> 23:47.760
好了

23:47.760 --> 23:48.800
那我们来看一下

23:48.800 --> 23:50.320
ABC是不是可以输出

23:51.040 --> 23:52.200
能理解吗

23:52.200 --> 23:55.880
那么相当于是把这里函数执行函数

23:55.880 --> 23:57.160
然后函数执行完了之后

23:57.160 --> 23:58.120
返回这个C

23:58.120 --> 23:59.280
这个C负责给谁

23:59.280 --> 24:00.400
负责给ABC

24:00.400 --> 24:03.240
虽然这里边没有污染任何权局

24:03.240 --> 24:05.520
但是前边有一个VAR ABC是不是

24:05.520 --> 24:06.440
它污染权局了

24:06.440 --> 24:07.720
它暴露给权局了

24:07.720 --> 24:09.280
所以我们这里是不是可以通过ABC

24:09.280 --> 24:12.280
能访问到这个里边的函数C

24:12.280 --> 24:14.040
就通过这种模式来完成的

24:15.240 --> 24:17.120
这样子是不是就特别灵活了

24:17.120 --> 24:18.440
我不希望暴露的

24:18.440 --> 24:19.920
我就定义到里边

24:19.960 --> 24:22.600
希望暴露的我返回就完事了

24:22.600 --> 24:23.880
暴露出来什么名字

24:23.880 --> 24:25.480
我在这里随便定义

24:25.480 --> 24:27.640
你可以定义跟这个函数名一样

24:27.640 --> 24:29.680
也可以用别的名字

24:29.680 --> 24:31.160
反正你定什么名字

24:31.160 --> 24:32.560
它就是个变量名

24:32.560 --> 24:34.360
你定什么名字就暴露什么名字

24:34.360 --> 24:35.800
那么Windows里边是不是多了一个属性

24:35.800 --> 24:37.000
叫ABC了

24:37.000 --> 24:37.720
就这么个意思

24:39.000 --> 24:42.840
那如果说我要暴露多个怎么办呢

24:42.840 --> 24:45.200
比方说我们这里还有一个

24:45.200 --> 24:49.170
还有一个变量D

24:49.170 --> 24:52.370
我要暴露C也要暴露D怎么办呢

24:52.370 --> 24:52.970
多个数据

24:52.970 --> 24:54.170
多个数据还不简单吗

24:54.170 --> 24:56.490
你把封装成一个对象不完的吗

24:56.490 --> 24:58.890
对象里面是不是可以写很多属性

24:58.890 --> 24:59.490
对吧

24:59.490 --> 25:01.170
比如说属性C

25:01.170 --> 25:03.650
那么等于这个函数C

25:03.650 --> 25:05.450
属性D等于这个函数D

25:05.450 --> 25:08.530
那个属性名字你可以取别的名字

25:08.530 --> 25:10.570
好了这样子不就暴露出去了吗

25:10.570 --> 25:11.570
暴露给谁

25:11.570 --> 25:12.370
暴露给ABC了

25:12.370 --> 25:13.450
我们来看一下ABC

25:13.450 --> 25:14.730
ABC里面不有两个属性的吗

25:14.730 --> 25:16.090
一个是C这个函数

25:16.090 --> 25:18.050
一个是D123

25:18.050 --> 25:19.330
那比方说我要

25:19.330 --> 25:21.650
我要输出一个D ABCD

25:21.650 --> 25:24.570
我要输出一个

25:24.570 --> 25:26.490
我要调入函数

25:26.490 --> 25:29.490
ABCC

25:29.490 --> 25:31.330
是不是可以

25:31.330 --> 25:32.770
好你看一下123

25:32.770 --> 25:33.210
3

25:33.210 --> 25:34.450
比方34函数C

25:34.450 --> 25:35.290
运行的结果

25:37.210 --> 25:38.490
所以这一刻说来说去

25:38.490 --> 25:39.490
我就是告诉大家

25:41.290 --> 25:44.890
我们以后在公司里面做开发

25:44.890 --> 25:45.890
一个GNS里面

25:45.890 --> 25:47.450
我们基本上把所有代码

25:47.450 --> 25:49.450
全部放到一个立即执行函数里面

25:51.250 --> 25:53.250
把我们需要暴露出去的东西

25:53.250 --> 25:54.890
比如登革写了一个函数C

25:54.890 --> 25:56.050
希望给别人用

25:56.050 --> 25:57.090
那么需要暴露

25:57.090 --> 25:58.970
要暴露出来的东西

25:58.970 --> 26:00.970
我们返回就完事了

26:00.970 --> 26:02.210
如果说要暴露多个

26:02.210 --> 26:04.090
我就封装成一个对象

26:04.090 --> 26:05.770
用各种属性给它返回

26:05.770 --> 26:06.450
不就多个了吗

26:07.690 --> 26:09.130
就这么个意思

26:09.130 --> 26:10.330
就讲完了

26:10.330 --> 26:12.450
好最终的目标还是不变

26:12.450 --> 26:15.730
只要你能够做出练习题就可以了

26:15.730 --> 26:16.930
好咱们来看一下练习题

26:17.570 --> 26:19.850
练习题这边已经给你写好了一个页面

26:19.850 --> 26:21.850
页面里面有用了两个GNS

26:21.850 --> 26:25.270
弄右边去

26:26.550 --> 26:27.150
浮动出来吧

26:27.990 --> 26:28.510
弄右边去

26:32.660 --> 26:33.820
好我们来看一下

26:33.820 --> 26:35.980
这里有两个GNS需要你书写

26:35.980 --> 26:37.220
第一个GNS

26:37.220 --> 26:39.940
页面上先引用的一再引用的二

26:39.940 --> 26:40.620
第一个GNS

26:41.460 --> 26:43.340
好它告诉你把它一大堆

26:43.340 --> 26:45.100
一大堆说出什么暴露啊

26:45.100 --> 26:46.140
污染啊这东西

26:46.140 --> 26:47.620
你先什么都不要想

26:47.620 --> 26:51.220
你先直接把它全部放到一个立即执行函数里面

26:51.700 --> 26:52.820
我鼠标又不见了

26:55.620 --> 27:00.600
我鼠标又不见了

27:00.600 --> 27:02.000
好我这用出绣本吧

27:03.800 --> 27:05.480
你先写出来这么一种格式

27:07.280 --> 27:11.680
然后把这些代码全部简切粘贴过来就可以了

27:12.600 --> 27:14.000
那么是不是全部污染都没了

27:15.040 --> 27:15.880
所谓都没有污染了

27:15.880 --> 27:16.880
对吧

27:16.880 --> 27:18.160
但是我要暴露啊

27:18.160 --> 27:19.200
暴露了哪些东西

27:19.200 --> 27:20.200
暴露这个C害

27:21.320 --> 27:22.120
不对

27:22.120 --> 27:24.520
暴露为这里写错了

27:24.600 --> 27:25.400
我一会改一下

27:26.400 --> 27:28.040
把暴露这个Hello函数

27:28.040 --> 27:29.520
然后呢暴露一个

27:30.240 --> 27:31.400
就用C害吧

27:31.400 --> 27:33.240
就说C害顺便说一下这个问题

27:33.240 --> 27:34.520
暴露为C害

27:34.520 --> 27:35.880
这个暴露为Count

27:35.880 --> 27:36.680
什么意思呢

27:36.680 --> 27:38.920
就是让你反而回一个对象

27:38.920 --> 27:40.600
这个对象里边有两个属性

27:40.600 --> 27:42.640
第一个属性的名字叫做C害

27:42.640 --> 27:44.800
通过这个名字来暴露的

27:44.800 --> 27:47.520
它的指呢是来自于这个函数Hello

27:47.520 --> 27:48.040
对吧

27:48.880 --> 27:49.760
把这个Hello

27:49.760 --> 27:51.920
通常情况下我们都是一样的名字

27:51.920 --> 27:53.240
因为命名都是规范的嘛

27:53.880 --> 27:54.520
然后呢

27:54.520 --> 27:55.760
这个玩意暴露为Count

27:55.760 --> 27:56.960
那么它属性名为Count

27:56.960 --> 27:57.880
它是职业为Count

27:59.040 --> 27:59.240
对吧

27:59.240 --> 27:59.920
这个函数

27:59.920 --> 28:01.400
这是函数返回的结果

28:01.400 --> 28:02.920
那么我怎么来暴露出去呢

28:02.920 --> 28:05.360
我只需要在这前边定义一个变量

28:05.360 --> 28:06.960
那个变量的名字就随便去了啊

28:06.960 --> 28:08.280
比方说都是邓哥写的单码

28:08.280 --> 28:09.360
你就可以写个邓哥

28:10.240 --> 28:11.320
写个作者的名字

28:12.160 --> 28:12.960
来暴露出去

28:13.920 --> 28:15.560
那么这样子有没有污染全局有

28:15.560 --> 28:16.880
但是只污染了一个

28:16.880 --> 28:17.320
对吧

28:17.880 --> 28:18.600
那么这样子的

28:19.520 --> 28:21.000
污染的几率就会小很多

28:22.000 --> 28:22.280
好

28:22.320 --> 28:23.000
然后呢

28:23.000 --> 28:25.240
二点击夜市就充足的几率就会小很多

28:25.720 --> 28:26.680
那么还是一样

28:26.680 --> 28:27.400
二点击夜市呢

28:27.400 --> 28:29.320
我们首先来一个立即执行函数

28:29.320 --> 28:29.600
对吧

28:29.600 --> 28:30.840
所有的击夜市都是这样子

28:31.240 --> 28:32.400
来个立即执行函数

28:32.800 --> 28:33.680
然后函数里边呢

28:33.680 --> 28:35.280
就写上我们整个的代码

28:38.000 --> 28:38.720
二点击夜市

28:38.720 --> 28:38.960
对吧

28:38.960 --> 28:39.680
就避免污染

28:40.480 --> 28:41.040
然后呢

28:41.040 --> 28:43.160
我这里要使用一点击夜市

28:43.160 --> 28:44.640
包含的函数和变量

28:44.640 --> 28:44.920
好

28:44.920 --> 28:46.600
我们这里先使用函数吧

28:46.600 --> 28:47.480
那函数是什么

28:47.480 --> 28:48.120
say hi

28:48.120 --> 28:48.960
我从哪里找

28:48.960 --> 28:50.040
说从凳格里面找

28:50.040 --> 28:50.520
你看一下

28:53.160 --> 28:54.320
Windows里边说有凳格

28:55.280 --> 28:55.640
对不对

28:55.640 --> 28:56.440
是不是对象

28:56.440 --> 28:57.880
有个count

28:57.880 --> 28:58.760
有个say hi

28:59.280 --> 28:59.520
好

28:59.520 --> 29:00.920
我们要调用它的say hi函数

29:00.920 --> 29:01.600
怎么调用

29:02.360 --> 29:03.120
凳格

29:03.400 --> 29:03.880
有

29:04.200 --> 29:04.800
say hi

29:07.430 --> 29:07.710
好

29:07.710 --> 29:07.910
你看

29:07.910 --> 29:09.310
输出了hard world

29:10.190 --> 29:10.590
然后呢

29:10.590 --> 29:11.670
我们还有一个变量

29:11.670 --> 29:12.870
凳格里边还有变量

29:12.870 --> 29:13.510
叫count

29:14.310 --> 29:15.310
是不是输出了一个变量

29:15.310 --> 29:16.430
是不是可以访问到了

29:16.430 --> 29:17.030
对吧

29:17.230 --> 29:18.910
这就是我们这里和要讲的东西

29:19.910 --> 29:23.270
如何来避免全局污染

29:23.270 --> 29:24.390
又如何

29:25.070 --> 29:26.870
把我们希望包住的东西

29:26.870 --> 29:27.830
包住出去

29:29.030 --> 29:30.470
其实对我们开发的影响

29:30.470 --> 29:31.190
也不大

29:32.030 --> 29:33.350
有之后中间代码

29:33.350 --> 29:34.270
该砸血砸血

29:34.550 --> 29:35.350
就是把它放到一个

29:35.350 --> 29:36.550
立即执行函数里面

29:36.990 --> 29:38.110
要包住的东西呢

29:38.590 --> 29:39.390
就返回

29:39.390 --> 29:40.950
然后用一个变量接收一下

29:41.190 --> 29:41.910
就完事了

29:43.070 --> 29:43.430
好了

29:43.430 --> 29:44.590
就是这一刻的内容

29:44.590 --> 29:46.030
把这两个题做一下

