WEBVTT

00:00.000 --> 00:13.930
循环

00:13.930 --> 00:20.930
循环可以说是咱们介石里面非常非常常见的这么一种流程控制手段

00:20.930 --> 00:24.930
咱们以后的程序里面到处可以看到循环

00:24.930 --> 00:26.930
循环的本质是什么呢

00:26.930 --> 00:30.930
循环的本质就是重复的去执行一段代

00:30.930 --> 00:34.930
重复的运行一段代

00:34.930 --> 00:37.930
就是有一些行为它是总归是重复的

00:37.930 --> 00:39.930
帮助我们去个简单的例子

00:39.930 --> 00:41.930
一个最简单的例子

00:41.930 --> 00:50.930
看着咱们要输出一个100个新号

00:50.930 --> 00:54.930
输出100个新号

00:54.930 --> 00:58.930
或者输出100个Hello World

00:58.930 --> 00:59.930
那怎么办呢

00:59.930 --> 01:02.930
如果我们这样子写100次可不可以

01:02.930 --> 01:04.930
当然可以

01:04.930 --> 01:06.930
你写100次Hello World

01:06.930 --> 01:07.930
一副字呗

01:07.930 --> 01:10.930
副字还在这副字副字100次可以

01:10.930 --> 01:12.930
麻烦麻烦

01:12.930 --> 01:13.930
所以很麻烦

01:13.930 --> 01:17.930
那么我们可以需要用一种就是非常简洁的结构

01:17.930 --> 01:19.930
能够帮我们重复的去做一件事

01:19.930 --> 01:20.930
这是最好的

01:20.930 --> 01:21.930
那如果不是100个呢

01:21.930 --> 01:23.930
1000个1万个1亿个呢

01:23.930 --> 01:24.930
你怎么办呢

01:24.930 --> 01:26.930
是不是就很麻烦了

01:26.930 --> 01:28.930
所以说我们需要循环这么一种结构

01:28.930 --> 01:31.930
可以重复的去执行一段代

01:31.930 --> 01:35.930
而循环结构里面有三种结构都可以达到

01:35.930 --> 01:41.930
咱们的GS里边支持三种循环结构

01:41.930 --> 01:43.930
其实还不止三种

01:43.930 --> 01:46.930
后边我们以后你们学到ES6过后

01:46.930 --> 01:48.930
还有更多的循环结构

01:48.930 --> 01:50.930
我们这里只说三种

01:50.930 --> 01:52.930
先暂时只说三种

01:52.930 --> 01:53.930
第一种是什么呢

01:53.930 --> 01:57.930
第一种是货循环

01:57.930 --> 01:59.930
这是最常见的循环结构

01:59.930 --> 02:02.930
还有的就是Wild循环

02:03.930 --> 02:05.930
后边两种用的稍微少一点

02:05.930 --> 02:07.930
用的稍微的少一点

02:07.930 --> 02:09.930
但是也是一种循环结构

02:09.930 --> 02:12.930
咱们后边重点是学习货循环

02:12.930 --> 02:15.930
后边两个循环非常简单

02:15.930 --> 02:16.930
非常非常简单

02:16.930 --> 02:19.930
我们一会再仔细的说

02:19.930 --> 02:21.930
为了学习的顺序

02:21.930 --> 02:22.930
我们把调整一下

02:22.930 --> 02:25.930
先学习货循环和Wild循环

02:25.930 --> 02:27.930
然后再学习货循环

02:27.930 --> 02:30.930
先学Wild和Wild

02:30.930 --> 02:32.930
然后再学货循环

02:32.930 --> 02:34.930
前面两个我就快速的给大家讲一下

02:34.930 --> 02:36.930
比方说第一个

02:36.930 --> 02:38.930
Wild循环

02:38.930 --> 02:40.930
那么它的语法格式

02:40.930 --> 02:42.930
它是这样子

02:42.930 --> 02:44.930
它有点类似于Eve

02:44.930 --> 02:46.930
但是没有Eve

02:46.930 --> 02:48.930
它的结构那么多

02:48.930 --> 02:50.930
Eve里边还有Eve

02:50.930 --> 02:52.930
Wild循环它的结构非常非常简单

02:52.930 --> 02:54.930
就是Wild条件

02:54.930 --> 02:56.930
这里边写条件

02:56.930 --> 02:57.930
条件是哪呢

02:57.930 --> 02:58.930
就是个表拿式

02:58.930 --> 03:00.930
就是个表拿式

03:00.930 --> 03:01.930
条件

03:01.930 --> 03:03.930
然后这里边叫做代码块

03:03.930 --> 03:04.930
代码块

03:04.930 --> 03:07.930
我们这里也把它称之为循环体

03:07.930 --> 03:09.930
称之为循环体

03:09.930 --> 03:11.930
是一个意思

03:11.930 --> 03:13.930
就是由一段代码

03:13.930 --> 03:14.930
什么代码都行

03:14.930 --> 03:15.930
什么代码都行

03:15.930 --> 03:17.930
哪怕里边再有一个循环都可以

03:17.930 --> 03:19.930
总之一个代码块

03:19.930 --> 03:20.930
那么它运行的时候

03:20.930 --> 03:21.930
怎么运行呢

03:21.930 --> 03:22.930
它这样运行的

03:22.930 --> 03:25.930
我直接用流程图给大家画出来

03:25.930 --> 03:27.930
我这里用流程图画一下

03:27.930 --> 03:33.430
merlmadegraph

03:33.430 --> 03:35.430
td

03:35.430 --> 03:37.430
用流程图画一下

03:37.430 --> 03:38.430
那么它怎么运行的呢

03:38.430 --> 03:40.430
首先是开始

03:40.430 --> 03:41.430
开始

03:41.430 --> 03:42.430
st

03:42.430 --> 03:44.430
表示开始

03:44.430 --> 03:46.430
把这边打开

03:46.430 --> 03:47.430
边看边画

03:47.430 --> 03:48.430
首先是开始

03:48.430 --> 03:50.430
开始是一个圆圈

03:50.430 --> 03:52.430
一个圆圈

03:52.430 --> 03:53.430
t

03:53.430 --> 03:55.430
开始

03:55.430 --> 03:56.430
开始呢

03:56.430 --> 03:58.430
然后就开始运行

03:58.430 --> 04:00.430
运行一个判断

04:00.430 --> 04:02.430
判断那个条件是否满足

04:02.430 --> 04:03.430
运行一个判断

04:03.430 --> 04:05.430
判断了我们在流程图里边用一个

04:05.430 --> 04:06.430
就是零行

04:06.430 --> 04:07.430
对吧

04:07.430 --> 04:09.430
条件

04:09.430 --> 04:11.430
用一个零行

04:11.430 --> 04:14.430
表示是

04:14.430 --> 04:16.430
条件

04:16.430 --> 04:18.430
看一下

04:18.430 --> 04:19.430
零行

04:19.430 --> 04:21.430
你想多写了一个大口号

04:21.430 --> 04:22.430
开始

04:22.430 --> 04:24.430
判断条件是否满足

04:24.430 --> 04:26.430
如果条件满足的话怎么办

04:26.430 --> 04:28.430
如果条件满足我干嘛呢

04:28.430 --> 04:30.430
我要去运行代码块

04:30.430 --> 04:32.430
代码块

04:32.430 --> 04:34.430
如果条件满足

04:34.430 --> 04:36.430
我就去运行代码块

04:36.430 --> 04:37.430
运行一次

04:37.430 --> 04:39.430
运行完了代码块过后

04:39.430 --> 04:41.430
还要继续

04:41.430 --> 04:42.430
代码块

04:42.430 --> 04:43.430
运行完了过后

04:43.430 --> 04:45.430
又要回到这里

04:45.430 --> 04:47.430
又要回到条件

04:47.430 --> 04:48.430
又要回到条件

04:48.430 --> 04:50.430
它是这么一种结构

04:50.430 --> 04:52.430
运行完代码块过后又回到

04:52.430 --> 04:53.430
条件这一块

04:53.430 --> 04:55.430
继续来判断条件是否满足

04:55.430 --> 04:57.430
如果条件满足的话

04:57.430 --> 04:58.430
又运行代码块

04:58.430 --> 05:00.430
你看是不是在反复运行

05:00.430 --> 05:01.430
这里形成个圈了

05:01.430 --> 05:03.430
条件满足运行代码块

05:03.430 --> 05:05.430
又判断条件是否满足

05:05.430 --> 05:06.430
如果满足又运行代码块

05:06.430 --> 05:07.430
就是这样子

05:07.430 --> 05:08.430
反复的进行判定

05:08.430 --> 05:10.430
直到有一天

05:10.430 --> 05:12.430
条件不满足了

05:12.430 --> 05:13.430
条件为force

05:13.430 --> 05:14.430
不满足了

05:14.430 --> 05:15.430
怎么办

05:15.430 --> 05:16.430
就结束

05:16.430 --> 05:20.320
结束

05:20.320 --> 05:22.320
看一下

05:22.320 --> 05:24.320
这个结构

05:24.320 --> 05:27.890
就变成这样的结构了

05:28.890 --> 05:30.890
开始运行

05:30.890 --> 05:31.890
判断条件满足

05:31.890 --> 05:33.890
如果满足条件的话

05:33.890 --> 05:34.890
直行代码块

05:34.890 --> 05:35.890
代码块直行完了过后

05:35.890 --> 05:37.890
它不会结束的

05:37.890 --> 05:39.890
它又要回去判断条件

05:39.890 --> 05:40.890
是否满足

05:40.890 --> 05:41.890
如果条件满足的话

05:41.890 --> 05:42.890
又运行代码块

05:42.890 --> 05:44.890
然后直到条件不满足

05:44.890 --> 05:45.890
结束

05:45.890 --> 05:47.890
咱们来看一下

05:47.890 --> 05:48.890
随便写一个

05:48.890 --> 05:49.890
随便写一个

05:49.890 --> 05:50.890
就是�尔循环

05:50.890 --> 05:52.890
比方说这

05:53.890 --> 05:55.890
咱们写一个�尔循环

05:55.890 --> 05:57.890
�尔循环里边给他写个

05:59.890 --> 06:00.890
条件

06:00.890 --> 06:01.890
是不是布尔判定

06:01.890 --> 06:03.890
一到判定结果是啥

06:03.890 --> 06:05.890
一到判定结果是不是

06:05.890 --> 06:07.890
判定结果是

06:07.890 --> 06:08.890
条件是满足的

06:08.890 --> 06:09.890
永远满足

06:09.890 --> 06:10.890
写的是个字面量

06:10.890 --> 06:11.890
永远满足

06:11.890 --> 06:12.890
或者是这里面

06:12.890 --> 06:13.890
写个

06:13.890 --> 06:14.890
条件永远满足

06:14.890 --> 06:15.890
咱们输出

06:15.890 --> 06:16.890
输出

06:19.890 --> 06:20.890
看一下

06:20.890 --> 06:23.260
运行出来看一下

06:23.260 --> 06:24.260
你看

06:24.260 --> 06:25.260
这个页面

06:25.260 --> 06:26.260
已经卡死了

06:26.260 --> 06:27.260
为什么卡死呢

06:27.260 --> 06:28.260
因为这个地方

06:28.260 --> 06:30.260
写的是一个死循环

06:30.260 --> 06:31.260
写的是一个死循环

06:31.260 --> 06:32.260
页面卡死了

06:32.260 --> 06:33.260
它不停的再输出

06:33.260 --> 06:34.260
不停的再输出

06:34.260 --> 06:35.260
永远结束不了

06:35.260 --> 06:36.260
我再点

06:36.260 --> 06:37.260
关掉

06:37.260 --> 06:38.260
我控制不了了

06:38.260 --> 06:40.260
有的时候

06:40.260 --> 06:42.260
循环

06:42.260 --> 06:44.260
会出现死循环

06:44.260 --> 06:45.260
什么意思呢

06:45.260 --> 06:48.260
就表示条件永远满足

06:48.260 --> 06:50.260
永远满足条件

06:50.260 --> 06:51.260
永远

06:51.260 --> 06:53.260
无法退出循环

06:53.260 --> 06:55.260
这就是死循环

06:55.260 --> 06:56.260
刚才我们看到的

06:56.260 --> 06:57.260
就是一个死循环

06:57.260 --> 06:59.260
这个条件永远满足

06:59.260 --> 07:00.260
还不停的输出

07:00.260 --> 07:02.260
直到页面卡死

07:02.260 --> 07:03.260
动不了了

07:04.260 --> 07:05.260
我们这里要输出

07:05.260 --> 07:06.260
100个

07:06.260 --> 07:07.260
怎么办

07:07.260 --> 07:08.260
你看着

07:08.260 --> 07:09.260
我们这样子写

07:09.260 --> 07:11.260
我这里的定一个辩量

07:11.260 --> 07:13.260
这个辩量表示

07:13.260 --> 07:14.260
怎么意思呢

07:14.260 --> 07:15.260
表示的是

07:15.260 --> 07:18.260
当前输出的

07:18.260 --> 07:20.260
输出的次数

07:20.260 --> 07:21.260
一开始没有

07:21.260 --> 07:22.260
任何输出

07:22.260 --> 07:23.260
所以说一开始的0

07:23.260 --> 07:24.260
当前输出

07:24.260 --> 07:26.260
哈勒沃尔德的次数

07:26.260 --> 07:28.260
什么条件是什么呢

07:28.260 --> 07:29.260
就什么情况下

07:29.260 --> 07:30.260
我要去输出哈勒沃尔德呢

07:30.260 --> 07:31.260
条件是

07:31.260 --> 07:34.260
i的值小于

07:34.260 --> 07:36.260
小于

07:36.260 --> 07:37.260
应该怎么说

07:37.260 --> 07:38.260
什么情况下

07:38.260 --> 07:39.260
我要继续输出

07:39.260 --> 07:40.260
小于100

07:40.260 --> 07:42.260
还没有输出100次

07:42.260 --> 07:43.260
是不是

07:43.260 --> 07:45.260
当满足这个条件的时候

07:45.260 --> 07:46.260
是不是要继续输出

07:46.260 --> 07:47.260
要继续输出

07:47.260 --> 07:49.260
还没有输出到100次

07:49.260 --> 07:50.260
要继续输出

07:50.260 --> 07:52.260
而每输出一次哈勒沃尔德

07:52.260 --> 07:55.260
我把i加加

07:55.260 --> 07:57.260
好 咱们就写完了

07:57.260 --> 07:58.260
这样就是一个

07:58.260 --> 08:00.260
非常简单的一个循环结构

08:00.260 --> 08:02.260
看一下

08:02.260 --> 08:04.260
你看现在没卡实了

08:04.260 --> 08:05.260
看一下

08:05.260 --> 08:06.260
这里

08:06.260 --> 08:07.260
当我们输出重复的时候

08:07.260 --> 08:08.260
他这里的

08:08.260 --> 08:09.260
这个谷歌流量去控制台

08:09.260 --> 08:11.260
他不会给你列出来

08:11.260 --> 08:12.260
他直接在这里

08:12.260 --> 08:14.260
把重复的次数给你写出来

08:14.260 --> 08:15.260
重复了100次

08:15.260 --> 08:17.260
输出了100次哈勒沃尔德

08:17.260 --> 08:18.260
你看刷新

08:18.260 --> 08:20.260
输出了100次哈勒沃尔德

08:20.260 --> 08:21.260
怎么回事呢

08:21.260 --> 08:23.260
i一开始的输出次数为0

08:23.260 --> 08:25.260
0是不是小于100

08:25.260 --> 08:26.260
条件满足吧

08:26.260 --> 08:28.260
输出第一次

08:28.260 --> 08:29.260
输出完一次

08:29.260 --> 08:30.260
i加加

08:30.260 --> 08:31.260
i变成1了

08:31.260 --> 08:33.260
1是不是小于100了

08:33.260 --> 08:34.260
是不是条件还是满足

08:34.260 --> 08:35.260
你看

08:35.260 --> 08:37.260
执行完这个循环体

08:37.260 --> 08:39.260
执行完这个代码块之后

08:39.260 --> 08:40.260
他不会退出

08:40.260 --> 08:41.260
如果是衣服的话

08:41.260 --> 08:43.260
如果这里写的是衣服

08:43.260 --> 08:44.260
怎么样了

08:44.260 --> 08:45.260
他就直接退出了

08:45.260 --> 08:46.260
只运行一次

08:46.260 --> 08:48.260
你看只有一次

08:48.260 --> 08:50.260
条件满足只运行一次

08:50.260 --> 08:51.260
但是个歪用了

08:51.260 --> 08:53.260
他会不断的运行

08:53.260 --> 08:54.260
这一块运行完了过后

08:54.260 --> 08:55.260
他马上又要判断条件

08:55.260 --> 08:56.260
i加1了

08:56.260 --> 08:57.260
i变成1

08:57.260 --> 08:59.260
条件还是没到100次

08:59.260 --> 09:00.260
又输出

09:00.260 --> 09:02.260
输出一次过后i又加1

09:02.260 --> 09:04.260
我们来记录输出的次数

09:04.260 --> 09:06.260
只要输出没有满100次

09:06.260 --> 09:08.260
OK我们就不停的输出

09:08.260 --> 09:10.260
那么最后一次我们来看一下

09:10.260 --> 09:11.260
i等于99的时候

09:11.260 --> 09:12.260
还不到100次

09:12.260 --> 09:13.260
对吧

09:13.260 --> 09:14.260
我们又输出

09:14.260 --> 09:15.260
输出完了过后

09:15.260 --> 09:16.260
i加加

09:16.260 --> 09:17.260
i是不是变成100了

09:17.260 --> 09:18.260
变成100了

09:18.260 --> 09:19.260
100过后再来判断条件

09:19.260 --> 09:20.260
是不满足了

09:20.260 --> 09:22.260
条件不满足怎么样

09:22.260 --> 09:23.260
条件不满足

09:23.260 --> 09:24.260
退出循环

09:24.260 --> 09:25.260
循环结束

09:25.260 --> 09:27.260
我们最后可以输出

09:27.260 --> 09:29.260
当运行到第2十行的时候

09:29.260 --> 09:30.260
是不是循环就结束了

09:30.260 --> 09:32.260
循环结束

09:32.260 --> 09:34.260
当运行到第2十行的时候

09:34.260 --> 09:35.260
循环结束

09:35.260 --> 09:36.260
你看

09:36.260 --> 09:38.260
我们可以用这么简单的一个代码

09:38.260 --> 09:39.260
就可以写出来

09:39.260 --> 09:41.260
一个重复的代码结构

09:41.260 --> 09:43.260
那么我们就没有必要去

09:43.260 --> 09:46.260
撒不拉机的一个个去写100次

09:47.260 --> 09:48.260
对吧

09:48.260 --> 09:49.260
没有必要这样写

09:49.260 --> 09:50.260
我们直接用循环

09:50.260 --> 09:51.260
就可以搞定

09:51.260 --> 09:52.260
好

09:52.260 --> 09:53.260
这就是wile循环

09:53.260 --> 09:55.260
非常非常简单

09:55.260 --> 09:56.260
好

09:56.260 --> 09:57.260
然后再来看

09:57.260 --> 09:58.260
dowile循环

09:58.260 --> 09:59.260
了解一下

09:59.260 --> 10:00.260
这个两个循环就行了

10:00.260 --> 10:02.260
这两个循环用的比较少

10:02.260 --> 10:04.260
因为这两个循环能做的事

10:04.260 --> 10:06.260
for循环都能做

10:06.260 --> 10:07.260
其实相反的

10:07.260 --> 10:08.260
for循环能做的事

10:08.260 --> 10:09.260
这两个循环也能做

10:09.260 --> 10:11.260
所以这三种循环结构

10:11.260 --> 10:12.260
都行

10:12.260 --> 10:14.260
只不过我们习惯上了

10:14.260 --> 10:16.260
写的比较多的是for循环

10:16.260 --> 10:17.260
好

10:17.260 --> 10:19.260
dowile循环

10:19.260 --> 10:21.260
dowile循环它是怎么样的呢

10:21.260 --> 10:22.260
它是这样的代码格式

10:24.260 --> 10:26.260
它是这样子

10:28.260 --> 10:30.260
这里边写上一个循环体

10:30.260 --> 10:31.260
循环体

10:31.260 --> 10:33.260
循环体指的就是代码块

10:33.260 --> 10:34.260
指的就是代码块

10:34.260 --> 10:36.260
因为它是个循环结构

10:36.260 --> 10:37.260
所以说我们习惯上

10:37.260 --> 10:39.260
称之为循环体

10:39.260 --> 10:41.260
然后wile写到这后边

10:41.260 --> 10:43.260
条件写到这

10:44.260 --> 10:46.260
这是它这种写法

10:46.260 --> 10:47.260
这种写法

10:47.260 --> 10:49.260
跟上面的没有啥本质区别

10:49.260 --> 10:51.260
无非区别是啥呢

10:51.260 --> 10:53.260
就是这个dowile循环

10:53.260 --> 10:55.260
它会先运行一次循环体

10:55.260 --> 10:57.260
它至少运行一次

10:57.260 --> 10:58.260
运行一次循环体

10:58.260 --> 11:00.260
然后再来判断条件

11:00.260 --> 11:02.260
实际上差不多的

11:02.260 --> 11:04.260
我们把流程图画出来

11:04.260 --> 11:06.260
流程图画出来

11:06.260 --> 11:07.260
流程图画出来过后

11:07.260 --> 11:09.260
无非稍微变一下

11:09.260 --> 11:10.260
ST一开始

11:10.260 --> 11:12.260
它先执行一次代码块

11:12.260 --> 11:14.260
先执行是代码块

11:14.260 --> 11:16.260
然后再来判断条件

11:16.260 --> 11:18.260
再来判断条件

11:18.260 --> 11:20.260
是否满足

11:20.260 --> 11:21.260
先执行代码块

11:21.260 --> 11:22.260
执行一次

11:22.260 --> 11:24.260
再来判断条件是否满足

11:24.260 --> 11:25.260
好

11:25.260 --> 11:26.260
条件如果满足的话

11:26.260 --> 11:27.260
怎么样呢

11:27.260 --> 11:28.260
又来执行代码块

11:28.260 --> 11:30.260
又来执行代码块

11:30.260 --> 11:31.260
就这样子

11:31.260 --> 11:33.260
这是这个dowile循环的结构

11:33.260 --> 11:36.640
好 咱们来看一下

11:37.640 --> 11:39.640
这是wile循环的结构

11:39.640 --> 11:41.640
下边是dowile循环

11:41.640 --> 11:43.640
差不多的

11:43.640 --> 11:45.640
开始执行一次代码块

11:45.640 --> 11:46.640
执行过后判断条件

11:46.640 --> 11:47.640
如果条件满足

11:47.640 --> 11:48.640
又过来执行代码块

11:48.640 --> 11:49.640
代码块执行完了过后

11:49.640 --> 11:50.640
又判断条件

11:50.640 --> 11:51.640
然后满足的话

11:51.640 --> 11:52.640
又再执行代码块

11:52.640 --> 11:53.640
然后最后结束

11:53.640 --> 11:55.640
如果条件不满足就结束了

11:55.640 --> 11:57.640
这是dowile循环

11:57.640 --> 11:58.640
dowile循环跟wile循环

11:58.640 --> 11:59.640
最大的区别在哪呢

11:59.640 --> 12:01.640
其实没啥区别

12:01.640 --> 12:02.640
dowile循环唯一的

12:02.640 --> 12:03.640
跟wile循环的区别就是

12:03.640 --> 12:05.640
dowile循环的它的循环体

12:05.640 --> 12:07.640
至少运行一次

12:07.640 --> 12:09.640
至少运行一次

12:09.640 --> 12:10.640
比方说

12:10.640 --> 12:11.640
咱们把这个网上写成

12:11.640 --> 12:12.640
dowile循环

12:12.640 --> 12:13.640
其实是一样的

12:13.640 --> 12:14.640
没啥区别

12:14.640 --> 12:16.640
写成dowile循环

12:16.640 --> 12:18.640
变这个样子

12:18.640 --> 12:20.640
分号结束

12:20.640 --> 12:21.640
也就是说

12:21.640 --> 12:22.640
我们这里的

12:22.640 --> 12:24.640
Idon Winning先不看条件

12:24.640 --> 12:25.640
不看条件

12:25.640 --> 12:27.640
先直接运行一次

12:27.640 --> 12:28.640
运行一次循环体

12:28.640 --> 12:29.640
运行到过后

12:29.640 --> 12:30.640
再来看条件

12:30.640 --> 12:31.640
后边就一样了

12:31.640 --> 12:32.640
后边就一样了

12:32.640 --> 12:33.640
咱们来看一下

12:33.640 --> 12:34.640
一样的

12:34.640 --> 12:35.640
没啥区别

12:35.640 --> 12:36.640
看一下

12:40.640 --> 12:41.640
也就是说

12:41.640 --> 12:42.640
其实有电区别市场

12:42.640 --> 12:43.640
就是wile循环了

12:43.640 --> 12:46.640
它有没有可能一次都不运行

12:46.640 --> 12:47.640
有没有可能循环体

12:47.640 --> 12:49.640
一次都不运行

12:49.640 --> 12:50.640
有可能的

12:50.640 --> 12:51.640
如果条件一开始

12:51.640 --> 12:52.640
就不满足的话

12:52.640 --> 12:54.640
一开始就不满足条件的话

12:54.640 --> 12:56.640
那么循环是一次都不运行的

12:56.640 --> 12:58.640
但是dowile循环了不可能

12:58.640 --> 12:59.640
dowile循环

12:59.640 --> 13:00.640
它一定会运行一次

13:00.640 --> 13:02.640
一定会运行一次

13:02.640 --> 13:03.640
这就是他们的区别

13:03.640 --> 13:05.640
其他的没有啥区别

13:06.640 --> 13:07.640
好了

13:07.640 --> 13:08.640
这是关于这两个循环

13:08.640 --> 13:10.640
wile循环和dowile循环

13:10.640 --> 13:11.640
好

13:11.640 --> 13:12.640
终点来了

13:12.640 --> 13:14.640
终点不是这两个玩意

13:14.640 --> 13:15.640
这两个玩意说一下就行了

13:15.640 --> 13:17.640
用的也比较少

13:17.640 --> 13:19.640
我们其实把for循环搞清楚过

13:19.640 --> 13:20.640
和这两个循环

13:20.640 --> 13:21.640
跟我一样

13:21.640 --> 13:22.640
好

13:22.640 --> 13:24.640
下面for循环

13:24.640 --> 13:25.640
for循环

13:25.640 --> 13:27.640
for循环这一块

13:27.640 --> 13:28.640
它的代码格式是这样子

13:28.640 --> 13:30.640
它稍微复杂一点

13:31.640 --> 13:32.640
它的代码格式是什么呢

13:32.640 --> 13:33.640
它是for

13:34.640 --> 13:36.640
然后表达是e

13:36.640 --> 13:37.640
表达是e

13:39.640 --> 13:41.640
然后我们通常称表达是e

13:41.640 --> 13:43.640
为初始化表达是

13:43.640 --> 13:45.640
初始化表达是

13:45.640 --> 13:46.640
通常这样子称呼

13:46.640 --> 13:48.640
其实就是一个普通表达是

13:48.640 --> 13:49.640
管理写啥

13:49.640 --> 13:51.640
然后中间一个分号结束

13:51.640 --> 13:52.640
注意要写分号

13:52.640 --> 13:55.640
分号过后中间这一部分写的是

13:57.640 --> 13:59.640
条件表达是

13:59.640 --> 14:00.640
一个条件

14:00.640 --> 14:01.640
它也是个表达是

14:01.640 --> 14:02.640
这个分号结束

14:02.640 --> 14:04.640
第三部分写的是

14:04.640 --> 14:05.640
就是

14:06.640 --> 14:08.640
条件改变表达是

14:08.640 --> 14:11.640
其实我们这里只是称呼变了

14:11.640 --> 14:12.640
只是称呼变了

14:12.640 --> 14:13.640
其实都是一个普通表达是

14:13.640 --> 14:15.640
你想写啥写啥

14:15.640 --> 14:16.640
然后两个大伙号

14:16.640 --> 14:18.640
这里边是循环题

14:19.640 --> 14:21.640
它是有这么几部分组成的

14:21.640 --> 14:22.640
现在一个初始化表达是

14:22.640 --> 14:23.640
然后这个是条件

14:23.640 --> 14:24.640
条件写到这

14:24.640 --> 14:25.640
条件写到这

14:26.640 --> 14:28.640
这个是条件改变表达是

14:29.640 --> 14:31.640
那么它的执行过程是怎么样的呢

14:31.640 --> 14:32.640
Mermaid

14:32.640 --> 14:34.640
把这个复制过来吧

14:35.640 --> 14:37.640
把这个复制过来

14:38.640 --> 14:40.640
看一下它的流程图

14:40.640 --> 14:42.640
它的流程图是这样子的

14:42.640 --> 14:43.640
只要你把流程图搞清楚了

14:43.640 --> 14:44.640
就自然的循环

14:44.640 --> 14:46.640
它的语法规则就搞清楚了

14:46.640 --> 14:48.640
开始执行啥呢

14:48.640 --> 14:50.640
首先执行这个循环题

14:50.640 --> 14:54.640
首先执行这个初始化表达是

14:54.640 --> 14:56.640
首先执行这一块

14:56.640 --> 14:58.640
初始化表达是执行完了过程了

14:58.640 --> 14:59.640
做什么呢

14:59.640 --> 15:00.640
判断条件

15:00.640 --> 15:03.640
如果条件为真

15:03.640 --> 15:04.640
如果条件为真

15:04.640 --> 15:05.640
做什么呢

15:05.640 --> 15:07.640
执行循环题

15:07.640 --> 15:08.640
执行循环题

15:08.640 --> 15:11.640
好 循环题执行完了过后

15:11.640 --> 15:13.640
然后又回到

15:13.640 --> 15:14.640
要去做这件事

15:14.640 --> 15:17.640
条件改变表达是

15:17.640 --> 15:18.640
运行这个

15:18.640 --> 15:21.640
条件改变表达是运行完了过后

15:21.640 --> 15:22.640
又干嘛呢

15:22.640 --> 15:24.640
又来判断条件

15:24.640 --> 15:25.640
条件

15:25.640 --> 15:27.640
直到条件为Force的时候结束

15:27.640 --> 15:29.640
咱们来看一下

15:29.640 --> 15:30.640
这里看着肯定比较晕

15:30.640 --> 15:32.640
但是我们一看图就明白了

15:32.640 --> 15:33.640
一看图就明白了

15:33.640 --> 15:34.640
看一下啊

15:34.640 --> 15:36.640
佛循环

15:36.640 --> 15:38.640
这是佛循环的结构

15:38.640 --> 15:39.640
看着啊

15:39.640 --> 15:40.640
它怎么运行的呢

15:40.640 --> 15:42.640
首先运行这一块

15:42.640 --> 15:44.640
运行初始化表达是

15:44.640 --> 15:46.640
运行初始化表达是

15:46.640 --> 15:48.640
就是把这个运行一次

15:48.640 --> 15:49.640
从这个流程图里面

15:49.640 --> 15:50.640
我们可以看出

15:50.640 --> 15:51.640
这个初始化表达是

15:51.640 --> 15:53.640
是不是只运行一次

15:53.640 --> 15:55.640
是不是只运行一次

15:55.640 --> 15:56.640
后面还会运行吗

15:56.640 --> 15:57.640
它不会运行了

15:57.640 --> 15:59.640
它只会运行一次

15:59.640 --> 16:01.640
只会运行一次

16:01.640 --> 16:03.640
然后马上来判断条件

16:03.640 --> 16:05.640
如果条件满足做什么呢

16:05.640 --> 16:07.640
只运行一次循环体

16:07.640 --> 16:09.640
就把循环体执行一次

16:09.640 --> 16:11.640
执行一次过了后

16:11.640 --> 16:12.640
又去做什么呢

16:12.640 --> 16:13.640
又去做这件事

16:13.640 --> 16:15.640
条件改变表达是

16:15.640 --> 16:17.640
条件改变表达是

16:17.640 --> 16:18.640
去运行一次它

16:18.640 --> 16:19.640
这个运行完了过后

16:19.640 --> 16:21.640
又回到条件这里

16:21.640 --> 16:23.640
又进行判断

16:23.640 --> 16:24.640
如果条件满足

16:24.640 --> 16:25.640
又运行循环体

16:25.640 --> 16:27.640
你看又是不是一个圈

16:27.640 --> 16:28.640
条件满足运行循环体

16:28.640 --> 16:30.640
然后又来改变条件

16:30.640 --> 16:31.640
改变条件完了过后

16:31.640 --> 16:32.640
又来判断条件

16:32.640 --> 16:33.640
又来运行循环体

16:33.640 --> 16:34.640
又来改变条件

16:34.640 --> 16:36.640
直到有一天条件不满足

16:36.640 --> 16:37.640
结束

16:38.640 --> 16:40.640
为什么说违循环呢

16:40.640 --> 16:41.640
为什么说违循环是

16:41.640 --> 16:43.640
我们以后常见的一种循环格式呢

16:43.640 --> 16:46.640
以后大部分时候都用的是违循环的

16:46.640 --> 16:48.640
就是因为违循环

16:48.640 --> 16:51.640
它符合咱们循环的基本结构

16:51.640 --> 16:53.640
你看一下外国循环

16:53.640 --> 16:55.640
这个玩意

16:55.640 --> 16:57.640
是不是就是初始化

16:57.640 --> 16:58.640
它运行一次

16:58.640 --> 17:01.640
一开始表示记录当前的输出次数

17:01.640 --> 17:03.640
这个就是初始化

17:03.640 --> 17:04.640
初始化有个变量

17:04.640 --> 17:06.640
这个玩意是不是啥

17:06.640 --> 17:07.640
是什么是循环条件

17:07.640 --> 17:09.640
是不是循环条件

17:09.640 --> 17:11.640
对吧循环条件

17:11.640 --> 17:13.640
这个是啥循环体

17:13.640 --> 17:16.640
这个是啥改变循环条件

17:16.640 --> 17:19.640
所以说这一块的代码

17:19.640 --> 17:21.640
它可以轻松的

17:21.640 --> 17:23.640
用复循环把它写出来

17:23.640 --> 17:25.640
写出来更加容易阅读

17:25.640 --> 17:27.640
更加简洁

17:27.640 --> 17:29.640
先定一个初始化

17:29.640 --> 17:31.640
一个初始化表达是定一个变量

17:31.640 --> 17:33.640
然后条件是啥

17:33.640 --> 17:35.640
i小于一百

17:35.640 --> 17:37.640
然后条件改变是i加加

17:37.640 --> 17:40.640
然后里边循环体做的时候就是这样的事

17:40.640 --> 17:42.640
你看一下下边这个代码

17:42.640 --> 17:43.640
跟上边这个

17:43.640 --> 17:45.640
达到的功能一模一样

17:45.640 --> 17:46.640
但是下边这个代码

17:46.640 --> 17:47.640
更加舒服

17:47.640 --> 17:48.640
为什么更加舒服

17:48.640 --> 17:50.640
因为上边这个代码

17:50.640 --> 17:52.640
看上去总感觉是分开的

17:52.640 --> 17:54.640
就这个玩意

17:54.640 --> 17:56.640
跟这个玩意

17:56.640 --> 17:58.640
它分的太开了

17:58.640 --> 17:59.640
它本来是紧密联系的

17:59.640 --> 18:00.640
这个变量i

18:00.640 --> 18:02.640
本来就是为循环服务的

18:02.640 --> 18:04.640
它就是一个用于判断循环条件的

18:04.640 --> 18:07.640
而这个i加加是来改变循环条件的

18:07.640 --> 18:08.640
那么我们用这种语法

18:08.640 --> 18:10.640
就可以看到非常非常清楚

18:10.640 --> 18:11.640
这是条件

18:11.640 --> 18:12.640
这是改变条件

18:12.640 --> 18:14.640
这是初始化

18:14.640 --> 18:16.640
先运行一次初始化

18:16.640 --> 18:18.640
先运行一次初始化

18:18.640 --> 18:19.640
运行一次又够了

18:19.640 --> 18:21.640
然后再判断条件是否满足

18:21.640 --> 18:23.640
如果满足的话

18:23.640 --> 18:24.640
运行循环体

18:24.640 --> 18:26.640
每一次运行完循环体

18:26.640 --> 18:27.640
每一次运行完

18:27.640 --> 18:29.640
都要去运行一次i加加

18:29.640 --> 18:31.640
都要去运行一次i加加

18:31.640 --> 18:33.640
那么我们看一下

18:33.640 --> 18:34.640
这个復循环

18:34.640 --> 18:35.640
你看

18:35.640 --> 18:37.640
是不是一样的

18:37.640 --> 18:39.640
得到的效果是完全一样的

18:39.640 --> 18:41.640
循环了100次

18:41.640 --> 18:42.640
循环结束

18:42.640 --> 18:45.640
我们也可以在循环结束之后

18:45.640 --> 18:47.640
在循环结束之后

18:47.640 --> 18:48.640
再打印出这个i

18:48.640 --> 18:49.640
看它是多少

18:49.640 --> 18:51.640
你觉得是多少

18:52.640 --> 18:54.640
首先它要不要爆错

18:54.640 --> 18:55.640
要不要爆错

18:56.640 --> 18:57.640
肯定不会爆错

18:57.640 --> 18:58.640
我们之前说过

18:58.640 --> 19:00.640
咱们定义的变量

19:00.640 --> 19:02.640
全部都会有个提升

19:02.640 --> 19:04.640
提到最上边

19:04.640 --> 19:05.640
提到最上边

19:05.640 --> 19:06.640
就这样子写那里

19:06.640 --> 19:07.640
相当于是这样子写

19:07.640 --> 19:08.640
相当于是这样子写

19:08.640 --> 19:10.640
就说变量了肯定是存在的

19:10.640 --> 19:11.640
肯定是存在的

19:11.640 --> 19:12.640
这个没什么好说的

19:12.640 --> 19:14.640
那么它的值是多少呢

19:14.640 --> 19:16.640
那你就看呗

19:16.640 --> 19:17.640
看啥呢

19:17.640 --> 19:18.640
看这个循环

19:18.640 --> 19:20.640
什么时候结束

19:20.640 --> 19:22.640
i等于什么时候

19:22.640 --> 19:23.640
等于什么值的时候

19:23.640 --> 19:24.640
这个循环就没法运行

19:24.640 --> 19:25.640
就结束了

19:25.640 --> 19:27.640
结束过后是不是运行这句话

19:27.640 --> 19:28.640
那就看i等于什么的时候

19:28.640 --> 19:29.640
循环结束了

19:29.640 --> 19:31.640
i等于100的时候

19:31.640 --> 19:32.640
是不是条件不满足

19:32.640 --> 19:33.640
i从0开始

19:33.640 --> 19:35.640
每次自增1

19:35.640 --> 19:36.640
每次加1

19:36.640 --> 19:37.640
0

19:37.640 --> 19:38.640
1

19:38.640 --> 19:39.640
2

19:39.640 --> 19:40.640
3

19:40.640 --> 19:41.640
4

19:41.640 --> 19:42.640
5

19:42.640 --> 19:43.640
6

19:43.640 --> 19:44.640
一直加到99

19:44.640 --> 19:45.640
99都还满足条件

19:45.640 --> 19:46.640
都还要运行一次

19:46.640 --> 19:47.640
到了100的时候

19:47.640 --> 19:49.640
是否条件不满足了

19:49.640 --> 19:50.640
不满足

19:50.640 --> 19:51.640
那么i就是100

19:51.640 --> 19:52.640
i是100的时候

19:52.640 --> 19:53.640
退出循环

19:53.640 --> 19:54.640
条件不满足

19:54.640 --> 19:55.640
所以最后输出的i呢

19:55.640 --> 19:57.640
肯定是100

19:57.640 --> 19:58.640
循环结束

19:58.640 --> 19:59.640
i等于100

19:59.640 --> 20:00.640
你看这意思吧

20:00.640 --> 20:01.640
很简单

20:01.640 --> 20:02.640
很简单

20:02.640 --> 20:03.640
好

20:03.640 --> 20:04.640
比方说

20:04.640 --> 20:05.640
咱们再来一个例子

20:05.640 --> 20:06.640
再来一个例子

20:06.640 --> 20:07.640
比方说

20:07.640 --> 20:08.640
我们用货循环

20:08.640 --> 20:09.640
要做一个什么上呢

20:09.640 --> 20:14.640
输出1到100的所有数字

20:15.640 --> 20:17.640
输出1到100的所有数字

20:17.640 --> 20:18.640
该怎么做呢

20:18.640 --> 20:19.640
你看着

20:19.640 --> 20:20.640
最简单

20:21.640 --> 20:23.640
i等于0

20:23.640 --> 20:24.640
i等于1

20:24.640 --> 20:25.640
i从1开始

20:25.640 --> 20:27.640
小于等于100

20:27.640 --> 20:28.640
i加加

20:28.640 --> 20:29.640
你看一下这个循环

20:29.640 --> 20:30.640
看一下这个循环

20:30.640 --> 20:33.640
这个循环的这个变量i

20:33.640 --> 20:34.640
它最开始等于1

20:34.640 --> 20:35.640
对吧

20:35.640 --> 20:36.640
1是不是小于等于100的

20:36.640 --> 20:37.640
肯定是

20:37.640 --> 20:38.640
运行第一次循环体

20:38.640 --> 20:39.640
第一次循环

20:39.640 --> 20:41.640
i的指是1

20:41.640 --> 20:42.640
i的指是1

20:42.640 --> 20:43.640
就第一次循环

20:43.640 --> 20:44.640
i的指是1

20:44.640 --> 20:45.640
好

20:45.640 --> 20:46.640
然后运行i加加

20:46.640 --> 20:47.640
i又变成2了

20:47.640 --> 20:49.640
2还是小于等于100

20:49.640 --> 20:50.640
那么i的指是不是变成

20:50.640 --> 20:51.640
在运行循环的时候

20:51.640 --> 20:53.640
i的指是不是变成2了

20:53.640 --> 20:54.640
你说i在不断的变化

20:54.640 --> 20:55.640
对吧

20:55.640 --> 20:56.640
这个变量i在不断的变化

20:56.640 --> 20:59.640
它第一次进入循环体的时候

20:59.640 --> 21:00.640
i等于1

21:00.640 --> 21:01.640
第二次进入循环体的时候

21:01.640 --> 21:02.640
i等于2

21:02.640 --> 21:03.640
然后一次等于3

21:03.640 --> 21:04.640
是5 6

21:04.640 --> 21:05.640
一直加

21:05.640 --> 21:07.640
那么加到什么时候呢

21:07.640 --> 21:08.640
一直加到100

21:08.640 --> 21:09.640
对不对

21:09.640 --> 21:10.640
到101的时候

21:10.640 --> 21:11.640
就进不了这个循环体了

21:11.640 --> 21:13.640
所以说在循环体中

21:13.640 --> 21:15.640
在循环体中

21:16.640 --> 21:17.640
我们可以这样认为

21:17.640 --> 21:19.640
在循环体中

21:19.640 --> 21:21.640
i的指

21:21.640 --> 21:23.640
i的指

21:23.640 --> 21:27.640
从1变化到100

21:27.640 --> 21:28.640
我们就可以这样子认为

21:28.640 --> 21:29.640
没问题吧

21:29.640 --> 21:31.640
从1变化到100

21:31.640 --> 21:33.640
那如果你这里写的是小于

21:33.640 --> 21:34.640
没有写等号了

21:34.640 --> 21:36.640
那么就是从1变化到多少

21:36.640 --> 21:38.640
99

21:38.640 --> 21:39.640
好好理一下

21:39.640 --> 21:41.640
一开始学循环的时候

21:41.640 --> 21:43.640
看上去总感觉怪怪的

21:43.640 --> 21:44.640
总感觉理不清楚

21:44.640 --> 21:45.640
但是你仔细理一下

21:45.640 --> 21:46.640
你肯定是理得清楚的

21:46.640 --> 21:48.640
基本上你后面看久了

21:48.640 --> 21:49.640
这个东西没啥说的了

21:49.640 --> 21:50.640
说都不用说

21:50.640 --> 21:51.640
你看这个东西

21:51.640 --> 21:52.640
1到99

21:52.640 --> 21:53.640
马上就说反应过来了

21:53.640 --> 21:55.640
如果我这里写的等号

21:55.640 --> 21:56.640
就是1到100

21:56.640 --> 21:57.640
瞬间就反应过来了

21:57.640 --> 22:00.640
但是现在你可能不太习惯而已

22:00.640 --> 22:01.640
你看到这个循环

22:01.640 --> 22:04.640
i的曲子就是从1取到100

22:04.640 --> 22:05.640
每取一次值

22:05.640 --> 22:06.640
比方i等于1的时候

22:06.640 --> 22:07.640
运行一次循环体

22:07.640 --> 22:08.640
i等于2的时候

22:08.640 --> 22:09.640
运行一次循环体

22:09.640 --> 22:11.640
所以说在循环体里边

22:11.640 --> 22:13.640
是不是要运行100次

22:13.640 --> 22:14.640
对吧

22:15.640 --> 22:16.640
在循环体里边

22:16.640 --> 22:18.640
这个循环体要运行100次

22:18.640 --> 22:19.640
每次循环了

22:19.640 --> 22:20.640
每次运行的

22:20.640 --> 22:22.640
它的i的值都要变化

22:22.640 --> 22:24.640
你看这个意思吧

22:24.640 --> 22:25.640
所以说这里我要干嘛

22:25.640 --> 22:27.640
我输出啥

22:27.640 --> 22:28.640
我输出啥

22:28.640 --> 22:30.640
就输出i就完事了

22:30.640 --> 22:31.640
能不能输出变量

22:31.640 --> 22:32.640
你不要告诉我

22:32.640 --> 22:33.640
现在不能输出变量

22:33.640 --> 22:35.640
肯定是可以输出变量的

22:35.640 --> 22:36.640
那么变量

22:36.640 --> 22:37.640
把变量的值输出就完事了

22:37.640 --> 22:38.640
对不对

22:38.640 --> 22:39.640
保存看一下

22:39.640 --> 22:41.640
贼简单

22:41.640 --> 22:43.640
你看就输出完了

22:43.640 --> 22:44.640
这是循环

22:44.640 --> 22:46.640
短短的几行代

22:46.640 --> 22:47.640
就输出了这么多东西

22:47.640 --> 22:48.640
一到一百

22:48.640 --> 22:49.640
一到一百

22:49.640 --> 22:50.640
看没

22:50.640 --> 22:51.640
好

22:51.640 --> 22:53.640
那如果我这里写的是99

22:53.640 --> 22:54.640
这里写的是小云的

22:54.640 --> 22:55.640
输出多少

22:55.640 --> 22:56.640
输出一到99

22:56.640 --> 22:57.640
保存看一下

22:57.640 --> 22:59.640
就是一到99

22:59.640 --> 23:01.640
非常非常简单

23:01.640 --> 23:02.640
非常简单

23:02.640 --> 23:03.640
好 再来

23:03.640 --> 23:04.640
如果我这里

23:04.640 --> 23:06.640
外面再输出一个i

23:06.640 --> 23:07.640
输出啥

23:07.640 --> 23:10.640
外面这个i输出啥

23:10.640 --> 23:12.640
输出啥了

23:12.640 --> 23:13.640
外面这个i

23:13.640 --> 23:15.640
它一定是推出循环了

23:15.640 --> 23:16.640
推出循环

23:16.640 --> 23:17.640
i等于什么值的时候

23:17.640 --> 23:18.640
会推出循环

23:18.640 --> 23:20.640
这不等于101

23:20.640 --> 23:21.640
101的时候

23:21.640 --> 23:22.640
条件不满足

23:22.640 --> 23:23.640
推出循环

23:23.640 --> 23:24.640
就是外面输出的i

23:24.640 --> 23:25.640
就是101

23:25.640 --> 23:26.640
看一下

23:26.640 --> 23:28.640
101 最后一个i

23:28.640 --> 23:29.640
没问题吧

23:29.640 --> 23:30.640
好好理一下

23:30.640 --> 23:31.640
这一块最基本的

23:31.640 --> 23:32.640
要理清楚

23:32.640 --> 23:33.640
那么这一块

23:33.640 --> 23:34.640
我们就得到了

23:34.640 --> 23:35.640
得到了一到一百的

23:35.640 --> 23:36.640
所有数字了

23:36.640 --> 23:38.640
我们以这种最基本的

23:38.640 --> 23:39.640
结构理清楚

23:39.640 --> 23:40.640
我们后边

23:40.640 --> 23:41.640
无论是这个循环

23:41.640 --> 23:42.640
怎么来玩

23:42.640 --> 23:43.640
我出各种花样

23:43.640 --> 23:45.640
但是这个最基本的结构

23:45.640 --> 23:46.640
你要搞清楚

23:46.640 --> 23:47.640
你搞清楚了最基本的结构

23:47.640 --> 23:49.640
后边都能够理解了

23:49.640 --> 23:51.640
好 咱们再来看一下

23:51.640 --> 23:53.640
现在我要导则输出

23:53.640 --> 23:55.640
导则输出

23:55.640 --> 23:56.640
输出什么

23:56.640 --> 23:58.640
输出100

23:58.640 --> 24:00.640
到1的

24:00.640 --> 24:02.640
所有数字

24:02.640 --> 24:03.640
这个怎么输出呢

24:03.640 --> 24:05.640
循环其他本身

24:05.640 --> 24:06.640
语言法则简单

24:06.640 --> 24:07.640
非常简单

24:07.640 --> 24:08.640
它难的是啥呢

24:08.640 --> 24:10.640
难的是各种应用场景

24:10.640 --> 24:11.640
各种应用场景里面

24:11.640 --> 24:12.640
去用这个循环

24:12.640 --> 24:14.640
这个比较难

24:14.640 --> 24:16.640
输出100到1的所有数字

24:16.640 --> 24:17.640
怎么输出呢

24:17.640 --> 24:19.640
反着来呗

24:19.640 --> 24:21.640
I的值从100开始

24:21.640 --> 24:23.640
从100开始

24:23.640 --> 24:24.640
然后条件是

24:24.640 --> 24:27.640
I大约等于1

24:27.640 --> 24:29.640
然后I简简

24:29.640 --> 24:31.640
灵活运用呗

24:31.640 --> 24:32.640
好 那么这个I的值

24:32.640 --> 24:33.640
是不是

24:33.640 --> 24:34.640
你看 第一次循环

24:34.640 --> 24:35.640
I等于100

24:35.640 --> 24:36.640
第二次循环

24:36.640 --> 24:37.640
I等于99

24:37.640 --> 24:38.640
第三次循环

24:38.640 --> 24:39.640
I等于98

24:39.640 --> 24:40.640
1 对吧

24:40.640 --> 24:41.640
1都还满足条件

24:41.640 --> 24:42.640
到0就不行了

24:42.640 --> 24:44.640
好 那这里面输出啥了

24:44.640 --> 24:46.640
输出I

24:46.640 --> 24:48.640
好好理一下

24:48.640 --> 24:50.640
保存 看一下

24:50.640 --> 24:51.640
你看

24:51.640 --> 24:53.640
就从100输出到

24:53.640 --> 24:55.640
输出到1了

24:55.640 --> 24:57.640
好 这导致输出

24:57.640 --> 24:58.640
导致输出

24:58.640 --> 25:00.640
把这两个理解清楚

25:00.640 --> 25:01.640
一定要理解清楚

25:01.640 --> 25:03.640
这是最基本的循环结构

25:03.640 --> 25:04.640
要看得滚瓜烂熟

25:04.640 --> 25:05.640
以后呢

25:05.640 --> 25:06.640
都要形成条件反射

25:06.640 --> 25:08.640
一看这个东西瞬间就明白了

25:08.640 --> 25:09.640
都不用我去解释

25:09.640 --> 25:11.640
如果你以后看到这个东西

25:11.640 --> 25:12.640
还要自己去想

25:12.640 --> 25:14.640
I第一次循环是100

25:14.640 --> 25:15.640
第二次循环99

25:15.640 --> 25:16.640
那就太low了

25:16.640 --> 25:19.640
看到的过去瞬间就搞懂了

25:19.640 --> 25:20.640
100到1

25:20.640 --> 25:21.640
每次循环

25:21.640 --> 25:23.640
每次循环得到的I不一样

25:23.640 --> 25:24.640
从100到1

25:24.640 --> 25:26.640
瞬间就明白过来了

25:26.640 --> 25:27.640
当然 现在我们一开始

25:27.640 --> 25:28.640
还需要个过程

25:28.640 --> 25:30.640
大家多写多练

25:30.640 --> 25:31.640
就这个东西

25:31.640 --> 25:32.640
你自己去写一下

25:32.640 --> 25:33.640
写个10次

25:33.640 --> 25:34.640
写个20次

25:34.640 --> 25:35.640
先把写熟

25:35.640 --> 25:36.640
写熟过后

25:36.640 --> 25:38.640
我们再说剩下的事情

25:38.640 --> 25:40.640
好 再来

25:40.640 --> 25:42.640
真的 我没骗你

25:42.640 --> 25:44.640
不要以为我给开玩笑

25:44.640 --> 25:45.640
一定要去写一下

25:45.640 --> 25:46.640
一定要去写一下

25:46.640 --> 25:47.640
先别看了

25:47.640 --> 25:48.640
同学们 先别看了

25:48.640 --> 25:49.640
马上拿出你的

25:49.640 --> 25:50.640
就是VS Code

25:50.640 --> 25:51.640
先写一下

25:51.640 --> 25:52.640
写个10遍

25:52.640 --> 25:53.640
写个10遍再说

25:53.640 --> 25:54.640
把它写熟

25:54.640 --> 25:55.640
这是最基本的循环结构

25:55.640 --> 25:56.640
后面用的

25:56.640 --> 25:57.640
真的是

25:57.640 --> 25:59.640
可以说是太常见 太常见了

25:59.640 --> 26:00.640
咱们再来

26:00.640 --> 26:03.640
输出1到100的所有激素

26:03.640 --> 26:04.640
来吧

26:04.640 --> 26:07.640
输出1到100的所有激素

26:07.640 --> 26:08.640
副循环

26:08.640 --> 26:09.640
i等于

26:09.640 --> 26:10.640
i等于啥呢

26:10.640 --> 26:11.640
i等于

26:11.640 --> 26:12.640
从1开始吧

26:12.640 --> 26:13.640
从1开始

26:13.640 --> 26:16.640
小于等于100

26:16.640 --> 26:18.640
从1看到100

26:18.640 --> 26:20.640
一个一个把i拿出来看

26:20.640 --> 26:22.640
每次循环的i的指

26:22.640 --> 26:23.640
是不是在变化

26:23.640 --> 26:24.640
第一次循环i等于1

26:24.640 --> 26:25.640
第二次循环i等于2

26:25.640 --> 26:26.640
就是一次

26:26.640 --> 26:27.640
一次把i拿出来看

26:27.640 --> 26:28.640
循环多少次

26:28.640 --> 26:29.640
循环100次

26:29.640 --> 26:31.640
循环100次

26:31.640 --> 26:33.640
好 每次循环

26:33.640 --> 26:35.640
我看一下

26:35.640 --> 26:37.640
i是不是激素

26:37.640 --> 26:39.640
判断i是不是激素

26:39.640 --> 26:41.640
为什么判断是i呢

26:41.640 --> 26:42.640
因为i的指就是

26:42.640 --> 26:43.640
1到100的所有素质

26:43.640 --> 26:44.640
对吧

26:44.640 --> 26:45.640
先把1拿出来看

26:45.640 --> 26:46.640
我们怎么来输出

26:46.640 --> 26:47.640
所有的激素

26:47.640 --> 26:49.640
把1到100的所有素质

26:49.640 --> 26:50.640
一个个拿出来

26:50.640 --> 26:51.640
先把1拿出来看一下

26:51.640 --> 26:52.640
是不是激素

26:52.640 --> 26:53.640
再把2拿出来看一下

26:53.640 --> 26:54.640
是不是激素

26:54.640 --> 26:55.640
再把3拿出来看一下

26:55.640 --> 26:56.640
是不是激素

26:56.640 --> 26:57.640
是不是这样玩的

26:57.640 --> 26:58.640
就是这样玩的

26:58.640 --> 26:59.640
所以说

26:59.640 --> 27:00.640
这里我们来判断

27:00.640 --> 27:01.640
i是不是激素

27:01.640 --> 27:02.640
很简单

27:02.640 --> 27:03.640
因为i里面就存放了

27:03.640 --> 27:04.640
是1到100

27:04.640 --> 27:05.640
对吧

27:05.640 --> 27:06.640
先把1拿出来看

27:06.640 --> 27:07.640
一个一个拿出来看

27:07.640 --> 27:08.640
一次一次循环

27:08.640 --> 27:10.640
因为它会不断的运行

27:10.640 --> 27:12.640
好 判断一下

27:12.640 --> 27:14.640
i是不是激素

27:14.640 --> 27:17.640
i除以2的余素

27:17.640 --> 27:20.640
如果不等于0

27:20.640 --> 27:21.640
所以不能被2整除

27:21.640 --> 27:22.640
是不是激素

27:22.640 --> 27:23.640
那是不是激素

27:23.640 --> 27:24.640
是不是一定是激素

27:24.640 --> 27:25.640
输出i就完事了

27:25.640 --> 27:27.640
有些人感觉又

27:27.640 --> 27:28.640
又恐怖了

27:28.640 --> 27:29.640
又感觉好恐怖

27:29.640 --> 27:30.640
哇 这里副循环里面

27:30.640 --> 27:31.640
怎么拋了一个判断

27:31.640 --> 27:33.640
这是什么玩意

27:33.640 --> 27:35.640
你不要想那么多

27:35.640 --> 27:36.640
你想那么多干嘛

27:36.640 --> 27:38.640
副循环里面是个单码块

27:38.640 --> 27:40.640
单码块里面可以是任何东西

27:40.640 --> 27:41.640
啥都可以

27:41.640 --> 27:43.640
不要说是衣服判断了

27:43.640 --> 27:45.640
里面再写个循环都可以

27:45.640 --> 27:46.640
总之这一块单码

27:46.640 --> 27:47.640
你把它看成一个整体

27:47.640 --> 27:49.640
整体上要运行100次

27:49.640 --> 27:51.640
整体要运行100次

27:51.640 --> 27:52.640
我们要现在要做的是

27:52.640 --> 27:54.640
首先你要把这个理清楚

27:54.640 --> 27:55.640
我们这里要做的事情

27:55.640 --> 27:56.640
是什么了

27:56.640 --> 27:57.640
判断i是不是激素

27:57.640 --> 27:58.640
你一定要把这个理解

27:58.640 --> 27:59.640
你看我们这里

27:59.640 --> 28:00.640
输出1到100

28:00.640 --> 28:01.640
输出的是啥

28:01.640 --> 28:02.640
输出的是i

28:02.640 --> 28:03.640
输出100到1

28:03.640 --> 28:04.640
输出的是啥

28:04.640 --> 28:05.640
输出的是i

28:05.640 --> 28:06.640
输出的是1到100中

28:06.640 --> 28:07.640
所谓的激素

28:07.640 --> 28:08.640
就是把i拿出来

28:08.640 --> 28:10.640
看一下是不是激素

28:10.640 --> 28:11.640
那么你把这个东西

28:11.640 --> 28:12.640
分析出来过后

28:12.640 --> 28:14.640
你不要去看外面的东西

28:14.640 --> 28:15.640
不要去看外面的循环

28:15.640 --> 28:16.640
看都不要看

28:16.640 --> 28:18.640
就看这个

28:18.640 --> 28:20.640
有一个变量i

28:20.640 --> 28:21.640
有一个变量i

28:21.640 --> 28:22.640
你看它是不是激素

28:22.640 --> 28:23.640
如果是激素

28:23.640 --> 28:24.640
把它输出

28:24.640 --> 28:26.640
这个单码能理解吧

28:26.640 --> 28:27.640
能理解吧

28:27.640 --> 28:28.640
跟外面的循环

28:28.640 --> 28:29.640
它就没有什么关系了

28:29.640 --> 28:31.640
总之这个单码不断的运行

28:31.640 --> 28:33.640
每一次运行的i的值都不一样

28:33.640 --> 28:35.640
就是把i的值一个一个拿出来看

28:35.640 --> 28:36.640
看它是不是激素

28:36.640 --> 28:37.640
试激素就输出

28:37.640 --> 28:39.640
你做循环的时候

28:39.640 --> 28:41.640
一定要把循环体那边的东西分析出来

28:41.640 --> 28:43.640
到底要干吗

28:43.640 --> 28:44.640
如果你分析出来了

28:44.640 --> 28:45.640
就是要判断i是不是激素

28:45.640 --> 28:46.640
那就得简单了

28:46.640 --> 28:47.640
就没有那么复杂了

28:47.640 --> 28:48.640
就非常非常简单

28:48.640 --> 28:50.640
你就把i拿来判断就完事了

28:50.640 --> 28:51.640
你甭管这个i拿来的

28:51.640 --> 28:53.640
总之i的值里边存了一些东西

28:53.640 --> 28:56.640
你把判断是不是激素就完事了

28:57.640 --> 28:59.640
你看这是这种写法

28:59.640 --> 29:02.640
当然有些同学取巧的话

29:02.640 --> 29:05.640
也可以用另外一种写法也可以搞定

29:05.640 --> 29:07.640
看着激素这一块

29:07.640 --> 29:10.640
取巧的话也可以用这种写法

29:10.640 --> 29:12.640
i等于1

29:12.640 --> 29:14.640
i小于等于100

29:14.640 --> 29:16.640
i加等于2

29:16.640 --> 29:22.640
你看我这个条件重新改变循环条件

29:22.640 --> 29:23.640
重新改变条件

29:23.640 --> 29:24.640
改变条件这里

29:24.640 --> 29:27.640
i的值不是加1是加2

29:27.640 --> 29:31.640
那你想一想i的取值是不是1

29:31.640 --> 29:32.640
1过了是多少

29:32.640 --> 29:34.640
3过了是多少5

29:34.640 --> 29:36.640
取值就是13579

29:36.640 --> 29:37.640
他是这样的取值的

29:37.640 --> 29:39.640
那么这个i本身就是激素

29:39.640 --> 29:40.640
我都不用判断了

29:40.640 --> 29:42.640
当然这是取巧的做法

29:42.640 --> 29:44.640
保存看一下

29:44.640 --> 29:46.640
你看全是激素

29:46.640 --> 29:48.640
当然这是取巧的做法

29:48.640 --> 29:49.640
不推荐大家这样做

29:49.640 --> 29:50.640
因为前期的话

29:50.640 --> 29:52.640
我们一定要练习这种结构

29:52.640 --> 29:54.640
因为有些同学看到这个结构是云的

29:54.640 --> 29:58.640
但这个结构是非常非常常见的

29:58.640 --> 30:01.640
这是关于这一块

30:01.640 --> 30:04.640
输出一到一百的所有技术

30:04.640 --> 30:05.640
做这么几个练习

30:05.640 --> 30:08.640
首先大家先不要再往下看了

30:08.640 --> 30:09.640
做个课堂练习

30:09.640 --> 30:12.640
先把这几个最最最基本的

30:12.640 --> 30:15.640
先要能够自己熟练的写出来

30:15.640 --> 30:16.640
先不要说什么

30:16.640 --> 30:18.640
我怕写出来就完事了

30:18.640 --> 30:19.640
多写几遍

30:19.640 --> 30:20.640
写个5遍10遍

30:20.640 --> 30:21.640
要写得非常非常熟练

30:21.640 --> 30:22.640
拿着就可以写

30:22.640 --> 30:23.640
看到这个东西马上就反应过来

30:23.640 --> 30:24.640
该怎么写

30:24.640 --> 30:25.640
然后写得非常非常熟练

30:25.640 --> 30:27.640
因为我们后边做循环的话

30:27.640 --> 30:28.640
做循环练习的话

30:28.640 --> 30:30.640
会有一些难度比较高的练习

30:30.640 --> 30:32.640
那么里边需要一些逻辑思维

30:32.640 --> 30:34.640
如果你语法都没有练书

30:34.640 --> 30:36.640
你说话都说不清楚

30:36.640 --> 30:38.640
那怎么去进行分析逻辑思维呢

30:38.640 --> 30:39.640
不存在的

30:39.640 --> 30:41.640
所以一定要把这一块练书

30:41.640 --> 30:43.640
练书过后我们接着往下看

30:44.640 --> 30:46.640
接下来我们来介绍一个就是

30:46.640 --> 30:48.640
循环里边的关键字

30:48.640 --> 30:54.450
循环里边的关键字

30:54.450 --> 30:57.450
循环中的关键字

30:57.450 --> 30:59.450
就是循环控制语句

30:59.450 --> 31:02.450
我们也把它称之为循环控制语句

31:02.450 --> 31:04.450
这个有两个语句

31:04.450 --> 31:06.450
这个用的

31:06.450 --> 31:08.450
有的时候还是挺有用的

31:08.450 --> 31:10.450
一个是break

31:10.450 --> 31:12.450
这个之前说过的

31:12.450 --> 31:13.450
什么意思呢

31:13.450 --> 31:15.450
这个break表示的是

31:15.450 --> 31:17.450
跳出当前循环

31:17.450 --> 31:21.450
表示跳出当前循环

31:21.450 --> 31:23.450
这是break

31:23.450 --> 31:25.450
break之前在switch里边用到过

31:25.450 --> 31:27.450
不过switch我们用的很少

31:27.450 --> 31:30.450
主要是break是在循环里边用

31:30.450 --> 31:32.450
它用于跳出当前循环

31:32.450 --> 31:34.450
还有一个continue

31:35.450 --> 31:39.450
表示的是停止当前循

31:39.450 --> 31:41.450
第一个是跳出循环

31:41.450 --> 31:42.450
不是跳出当前循环

31:42.450 --> 31:45.450
停止当前循环

31:45.450 --> 31:50.450
继续转而逆行

31:50.450 --> 31:53.450
条件改变表达式

31:53.450 --> 31:55.450
转而逆行条件改变表达式

31:55.450 --> 31:58.450
当然我不能这样子说

31:58.450 --> 32:01.450
因为还有外国循环

32:01.450 --> 32:03.450
停止当前循环

32:03.450 --> 32:06.450
进入下一次循环

32:06.450 --> 32:08.450
咱们来举个例子

32:08.450 --> 32:09.450
举个例子来说明

32:09.450 --> 32:11.450
举个例子就明白了

32:11.450 --> 32:13.450
比方说咱们再写个例子

32:13.450 --> 32:16.400
现在我就瞎写了

32:16.400 --> 32:17.400
没有任何实际的意思

32:17.400 --> 32:18.400
我现在瞎写

32:18.400 --> 32:20.400
我们先把这个语法搞清楚

32:20.400 --> 32:21.400
当然潜力条件

32:21.400 --> 32:22.400
我再说一次

32:22.400 --> 32:24.400
你得先把这个循环的结构弄熟悉

32:24.400 --> 32:26.400
用的非常非常熟悉

32:26.400 --> 32:27.400
基本结构用的非常熟悉

32:27.400 --> 32:29.400
然后再来看这个东西

32:29.400 --> 32:31.400
比方说

32:31.400 --> 32:32.400
我这个变量A

32:32.400 --> 32:34.400
或者是i

32:34.400 --> 32:39.400
i它是从0开始

32:39.400 --> 32:41.400
这里写个wile

32:41.400 --> 32:43.400
i小于等于一半

32:43.400 --> 32:44.400
或者是小于一半

32:44.400 --> 32:48.400
首先问大家一个问题

32:48.400 --> 32:50.400
这个wile循环循环多少次

32:50.400 --> 32:53.710
这个wile循环

32:53.710 --> 32:54.710
现在要循环多少次

32:54.710 --> 32:58.540
就是有多少次进入循环体

32:58.540 --> 33:01.540
有些同学张可就来了

33:01.540 --> 33:02.540
循环100次

33:02.540 --> 33:04.540
循环101次

33:04.540 --> 33:05.540
兄弟

33:05.540 --> 33:07.540
它循环无限次

33:07.540 --> 33:09.540
这个条件是不是永远满足

33:09.540 --> 33:10.540
对吧

33:10.540 --> 33:11.540
永远满足这个条件

33:11.540 --> 33:12.540
i永远等于0

33:12.540 --> 33:14.540
你看我哪个代码是改变了i

33:14.540 --> 33:16.540
没有任何一个代码改变了i

33:16.540 --> 33:17.540
所以i条件永远满足

33:17.540 --> 33:19.540
因此

33:19.540 --> 33:21.540
它是无限次

33:21.540 --> 33:24.540
那比方说我在19行写个i加加

33:24.540 --> 33:27.540
把这里改成1

33:27.540 --> 33:29.540
把这里改成1

33:29.540 --> 33:31.540
这里写个i加加

33:31.540 --> 33:33.540
它运行多少次

33:33.540 --> 33:35.540
有些同学蒙了

33:35.540 --> 33:37.540
蒙了

33:37.540 --> 33:39.540
兄弟

33:39.540 --> 33:41.540
看清楚

33:41.540 --> 33:43.540
19行能不能运行这个代码

33:43.540 --> 33:45.540
它永远不可能运行的

33:45.540 --> 33:47.540
因为14行的条件永远满足

33:47.540 --> 33:48.540
i等于0

33:48.540 --> 33:50.540
0小于1运行循环体

33:50.540 --> 33:51.540
里面啥都没有

33:51.540 --> 33:53.540
又来运行判断条件

33:53.540 --> 33:55.540
0还是小于1

33:55.540 --> 33:56.540
永远都出不了这个循环

33:56.540 --> 33:58.540
第19行永远无法运行

33:58.540 --> 34:00.540
这里是无法运行的

34:00.540 --> 34:02.540
兄弟写的这儿有啥用了

34:02.540 --> 34:03.540
没用

34:03.540 --> 34:04.540
好

34:04.540 --> 34:05.540
我们要写到这儿对吧

34:05.540 --> 34:06.540
写到这儿

34:06.540 --> 34:07.540
所以说我们平时不占用i的循环

34:07.540 --> 34:08.540
就是这个原因

34:08.540 --> 34:10.540
因为要改变循环条件

34:10.540 --> 34:11.540
我们老师可能

34:11.540 --> 34:12.540
经常可能会忘记

34:12.540 --> 34:14.540
忘记改变循环条件

34:14.540 --> 34:16.540
好 那么这个是不是循环一次

34:16.540 --> 34:17.540
0

34:17.540 --> 34:19.540
去0的时候循环一次

34:19.540 --> 34:20.540
进入循环体

34:20.540 --> 34:22.540
然后i加加i又变成1了

34:22.540 --> 34:24.540
变成1过后条件不满足了

34:24.540 --> 34:25.540
循环一次

34:25.540 --> 34:26.540
2循环两次

34:26.540 --> 34:29.540
小于100循环100次

34:29.540 --> 34:31.540
如果是小于等于100

34:31.540 --> 34:33.540
就循环101次

34:33.540 --> 34:35.540
你去看他取之范围

34:35.540 --> 34:37.540
那么他的取之范围是0-99

34:37.540 --> 34:39.540
0-99他是满足条件的

34:39.540 --> 34:41.540
0-99有多少个数字

34:41.540 --> 34:42.540
不就是100个吗

34:42.540 --> 34:43.540
加上0

34:43.540 --> 34:44.540
就是100个

34:44.540 --> 34:45.540
好

34:45.540 --> 34:46.540
那么这里边

34:46.540 --> 34:47.540
我们这样子写

34:48.540 --> 34:51.540
如果i等于9

34:52.540 --> 34:53.540
如果i等于9

34:53.540 --> 34:54.540
我写上个break

34:55.540 --> 34:56.540
我写上个break

34:56.540 --> 34:57.540
i等于9

34:57.540 --> 34:58.540
去写上个break

34:58.540 --> 35:00.540
然后我们在这里输出i

35:00.540 --> 35:01.540
输出i的值

35:01.540 --> 35:02.540
会输出啥

35:02.540 --> 35:04.540
它会输出啥呢

35:04.540 --> 35:08.040
我们看一下结果

35:08.040 --> 35:10.040
会输出0-9

35:10.040 --> 35:11.040
也就是i的取之

35:11.040 --> 35:12.040
它取到9就不行了

35:12.040 --> 35:13.040
下一个就不行了

35:13.040 --> 35:14.040
下一个就无范满足条件了

35:14.040 --> 35:15.040
不是满足条件

35:15.040 --> 35:17.040
下一个就不行了

35:17.040 --> 35:18.040
下一个就不行了

35:18.040 --> 35:19.040
怎么回事呢

35:19.040 --> 35:20.040
咱们来看一下吧

35:20.040 --> 35:21.040
i的值为0

35:21.040 --> 35:22.040
输出0

35:22.040 --> 35:23.040
对吧

35:23.040 --> 35:24.040
条件满足输出0

35:24.040 --> 35:25.040
这个判断是不是进不了

35:25.040 --> 35:27.040
这个判断进不去

35:27.040 --> 35:28.040
所以说继续i加加

35:28.040 --> 35:30.040
那么i取到0

35:30.040 --> 35:33.040
取1取2取3取4取5取6取7取8

35:33.040 --> 35:34.040
都没问题

35:34.040 --> 35:35.040
好取到9

35:35.040 --> 35:37.040
好看一下i等于9的情况

35:37.040 --> 35:39.040
9的话小于100

35:39.040 --> 35:40.040
对吧没问题

35:40.040 --> 35:42.040
输出i输出了9

35:42.040 --> 35:44.040
那么现在就输出了0-9了

35:44.040 --> 35:46.040
好输出9之后

35:46.040 --> 35:48.040
i的值是不等于9了

35:48.040 --> 35:50.040
条件满足

35:50.040 --> 35:51.040
break

35:51.040 --> 35:52.040
什么意思

35:52.040 --> 35:54.040
循环直接强制结束

35:54.040 --> 35:55.040
强制结束循环

35:55.040 --> 35:56.040
后边的循环

35:56.040 --> 35:57.040
循环体力一边

35:57.040 --> 35:59.040
什么弹把都不执行的

35:59.040 --> 36:01.040
它影响的范围只是这个循环

36:01.040 --> 36:02.040
只是这个循环

36:02.040 --> 36:04.040
循环不执行的

36:04.040 --> 36:06.040
直接退出循环

36:06.040 --> 36:08.040
我们这里输出循环结束

36:08.040 --> 36:10.040
继续往后

36:10.040 --> 36:11.040
后面运行的

36:11.040 --> 36:13.040
保存看一下

36:13.040 --> 36:15.040
你看输到9过后循环结束

36:15.040 --> 36:17.040
如果我在循环结束过后

36:17.040 --> 36:19.040
打印i的值是多少了

36:19.040 --> 36:21.040
循环结束过后

36:21.040 --> 36:23.040
打印i的值是多少

36:23.040 --> 36:25.040
是不是9

36:25.040 --> 36:27.040
它为啥是9

36:27.040 --> 36:29.040
因为当i等于9的时候

36:29.040 --> 36:30.040
是不是循环结束了

36:30.040 --> 36:31.040
这就代表还会不会执行

36:31.040 --> 36:32.040
它不会执行了

36:32.040 --> 36:33.040
直接整个循环

36:33.040 --> 36:35.040
就这个循环直接结束

36:35.040 --> 36:37.040
这是break

36:37.040 --> 36:39.040
那么比方说

36:39.040 --> 36:41.040
比方说咱们把这个break

36:41.040 --> 36:43.040
换一下

36:43.040 --> 36:45.040
换成continue

36:45.040 --> 36:47.040
把这个100换成10

36:47.040 --> 36:48.040
当然

36:48.040 --> 36:49.040
如果一开始是10的时候

36:49.040 --> 36:50.040
是不是一样的

36:50.040 --> 36:51.040
应该这样吧

36:51.040 --> 36:53.040
我们这里写成3

36:55.040 --> 36:56.040
10我们看一下

36:56.040 --> 36:57.040
是一样的

36:57.040 --> 36:58.040
就是0到3

36:58.040 --> 36:59.040
输出0到3

36:59.040 --> 37:01.040
0123循环结束i等于3

37:01.040 --> 37:02.040
是一样的

37:02.040 --> 37:04.040
逻辑道理是一样的

37:04.040 --> 37:05.040
那么现在

37:05.040 --> 37:08.040
我把break了换成continue

37:08.040 --> 37:10.040
continue是什么意思呢

37:10.040 --> 37:12.040
i等于3的时候

37:12.040 --> 37:14.040
输出3没问题

37:14.040 --> 37:17.040
然后i等于3

37:17.040 --> 37:18.040
等于3

37:18.040 --> 37:19.040
是不是满足条件

37:19.040 --> 37:21.040
满足条件continue是什么意思呢

37:21.040 --> 37:24.040
当前这一次的循环

37:24.040 --> 37:26.040
不再往后面运行的

37:26.040 --> 37:28.040
不是整个循环结束

37:28.040 --> 37:30.040
是当前这一次的循环

37:30.040 --> 37:31.040
不再运行的

37:31.040 --> 37:32.040
就是i加加

37:32.040 --> 37:33.040
后边代码不再运行的

37:33.040 --> 37:36.040
然后马上又重新去判断条件

37:36.040 --> 37:38.040
来做下一次循环

37:38.040 --> 37:39.040
重新去判断条件

37:39.040 --> 37:40.040
做下一次循环

37:40.040 --> 37:41.040
所以说下一次循环的时候

37:41.040 --> 37:43.040
i是不是还是等于3

37:43.040 --> 37:44.040
i还是等于3

37:44.040 --> 37:46.040
i还是等于3的时候

37:46.040 --> 37:47.040
怎么样

37:47.040 --> 37:49.040
是不是又输出3

37:49.040 --> 37:50.040
又输出3

37:50.040 --> 37:52.040
然后又进入判断

37:52.040 --> 37:53.040
又continue

37:53.040 --> 37:55.040
就是没有运行不到i加加

37:55.040 --> 37:57.040
保存看一下

37:57.040 --> 37:58.040
这样子你看

37:58.040 --> 37:59.040
不停地在运行

37:59.040 --> 38:00.040
现在已经卡死了

38:00.040 --> 38:01.040
已经卡死了

38:01.040 --> 38:02.040
3000多运

38:02.040 --> 38:03.040
是的

38:03.040 --> 38:04.040
我这里不能再写了

38:04.040 --> 38:05.040
不能再写了

38:05.040 --> 38:07.040
我要把这个关掉了

38:07.040 --> 38:09.040
关掉了

38:09.040 --> 38:10.040
那么相当于是

38:10.040 --> 38:12.040
用这种方式变成了一次死循环了

38:12.040 --> 38:13.040
对吧

38:13.040 --> 38:14.040
变成了一次死循环了

38:14.040 --> 38:15.040
这是continue

38:15.040 --> 38:17.040
结束当前这一次的循环

38:17.040 --> 38:19.040
结束当前这一次的循环

38:19.040 --> 38:20.040
好比方说

38:20.040 --> 38:21.040
我再把程序改一下

38:21.040 --> 38:22.040
再把程序改一下

38:22.040 --> 38:23.040
我把这个console

38:23.040 --> 38:25.040
i写到这儿

38:25.040 --> 38:26.040
写到这儿

38:26.040 --> 38:27.040
i加加呢

38:27.040 --> 38:29.040
我把它写到

38:29.040 --> 38:30.040
我想想

38:30.040 --> 38:31.040
这里

38:31.040 --> 38:32.040
这里我写个i加加

38:32.040 --> 38:34.040
这里写个i加加

38:34.040 --> 38:35.040
看一下

38:35.040 --> 38:37.040
这一次看一下

38:37.040 --> 38:39.040
它又输出啥

38:39.040 --> 38:41.040
它又输出啥

38:41.040 --> 38:42.040
来呗

38:42.040 --> 38:43.040
来看一下呗

38:43.040 --> 38:45.040
012没有什么特别的

38:45.040 --> 38:46.040
012的话

38:46.040 --> 38:47.040
进不了这个判断

38:47.040 --> 38:48.040
没有什么特别的

38:48.040 --> 38:50.040
输出012

38:50.040 --> 38:51.040
没问题

38:51.040 --> 38:52.040
3的时候

38:52.040 --> 38:54.040
等于3的时候

38:54.040 --> 38:55.040
干嘛呢

38:55.040 --> 38:56.040
i加加

38:56.040 --> 38:57.040
直接加1

38:57.040 --> 38:58.040
直接continue

38:58.040 --> 38:59.040
什么意思呢

38:59.040 --> 39:00.040
当等于

39:00.040 --> 39:02.040
现在输出了012了

39:02.040 --> 39:03.040
输出了012了

39:03.040 --> 39:04.040
然后等于3的时候

39:04.040 --> 39:06.040
把i变成4

39:06.040 --> 39:09.040
然后使用continue

39:09.040 --> 39:10.040
表示结束

39:10.040 --> 39:12.040
结束这一次的循环

39:12.040 --> 39:13.040
这一次循环

39:13.040 --> 39:14.040
不要再往后面运行了

39:14.040 --> 39:15.040
就这两个代码

39:15.040 --> 39:16.040
等于3的时候

39:16.040 --> 39:17.040
这两个代码不再运行了

39:17.040 --> 39:19.040
又来判断条件

39:19.040 --> 39:20.040
是不是小于10

39:20.040 --> 39:21.040
又进入了

39:21.040 --> 39:22.040
又进去再执行

39:22.040 --> 39:24.040
还有等于4了

39:24.040 --> 39:25.040
等于4的时候

39:25.040 --> 39:26.040
这个进入不了判断

39:26.040 --> 39:27.040
又正常运行的

39:27.040 --> 39:28.040
后边

39:28.040 --> 39:30.040
后边都不会进这个判断了

39:30.040 --> 39:31.040
那么也就是说

39:31.040 --> 39:32.040
这个输出呢

39:32.040 --> 39:34.040
它会忽略掉3

39:34.040 --> 39:35.040
会忽略掉3

39:35.040 --> 39:37.040
你看0123就没了

39:37.040 --> 39:38.040
156789

39:38.040 --> 39:39.040
循环结束了

39:39.040 --> 39:41.040
就是i等于10的时候

39:41.040 --> 39:43.040
条件不满足循环结束了

39:43.040 --> 39:44.040
i等于10

39:44.040 --> 39:45.040
总之呢

39:45.040 --> 39:47.040
我们把这个语法概念理解清楚

39:47.040 --> 39:48.040
同样的道理

39:48.040 --> 39:50.040
我们也可以把这个东西

39:50.040 --> 39:51.040
写到副循环里面

39:51.040 --> 39:53.040
是一样的

39:53.040 --> 39:54.040
副循环

39:54.040 --> 39:55.040
i从0开始

39:55.040 --> 39:56.040
i小于10

39:56.040 --> 39:57.040
i加加

39:57.040 --> 39:58.040
i加加

39:58.040 --> 39:59.040
那么这里一次

39:59.040 --> 40:01.040
i加加是放到这里的

40:01.040 --> 40:02.040
我们同样的

40:02.040 --> 40:03.040
用这种方式来判断

40:03.040 --> 40:06.040
i等于3

40:06.040 --> 40:07.040
做啥

40:07.040 --> 40:09.040
break

40:09.040 --> 40:11.040
console log i

40:11.040 --> 40:12.040
好

40:12.040 --> 40:14.040
这个输出啥呢

40:14.040 --> 40:15.040
输出啥

40:15.040 --> 40:17.040
输出012

40:17.040 --> 40:19.040
像我这种看习惯的

40:19.040 --> 40:20.040
瞬间就说出来了

40:20.040 --> 40:21.040
为什么能输出012呢

40:21.040 --> 40:22.040
因为我知道

40:22.040 --> 40:23.040
等于0的时候

40:23.040 --> 40:24.040
进不了衣服

40:24.040 --> 40:25.040
跟它没写一样

40:25.040 --> 40:26.040
012

40:26.040 --> 40:27.040
三个数字

40:27.040 --> 40:29.040
都进不了这个衣服判断

40:29.040 --> 40:31.040
012不影响输出

40:31.040 --> 40:32.040
好

40:32.040 --> 40:33.040
到了3的时候

40:33.040 --> 40:34.040
是不是结束整个循环了

40:34.040 --> 40:36.040
整个循环就直接结束

40:36.040 --> 40:37.040
直接结束

40:37.040 --> 40:38.040
所以说结束过后

40:38.040 --> 40:40.040
这里的i等于3

40:40.040 --> 40:41.040
好

40:41.040 --> 40:43.040
因此循环里面输出012

40:43.040 --> 40:44.040
到了3输出不了

40:44.040 --> 40:45.040
直接结束了

40:45.040 --> 40:46.040
好

40:46.040 --> 40:48.040
循环里面输出012

40:48.040 --> 40:50.040
到了外边的输出3

40:50.040 --> 40:51.040
看一下

40:51.040 --> 40:52.040
012

40:52.040 --> 40:54.040
外边输出3

40:54.040 --> 40:55.040
好

40:55.040 --> 40:56.040
接下来

40:56.040 --> 40:58.040
我把这里改成contin 6

40:58.040 --> 40:59.040
改成contin 6

40:59.040 --> 41:00.040
注意一下

41:01.040 --> 41:02.040
这里的

41:02.040 --> 41:03.040
for循环里面的contin 6

41:03.040 --> 41:04.040
它是这样子

41:04.040 --> 41:05.040
012还是一样的

41:05.040 --> 41:07.040
012没有任何影响

41:07.040 --> 41:08.040
012

41:08.040 --> 41:09.040
然后到了3的时候

41:09.040 --> 41:10.040
到了3的时候

41:10.040 --> 41:11.040
遇到了contin 6

41:11.040 --> 41:14.040
表示结束这一次的循环

41:14.040 --> 41:15.040
不是整个循环

41:15.040 --> 41:17.040
结束这一次的循环

41:17.040 --> 41:18.040
有人在想

41:18.040 --> 41:19.040
这个结束

41:19.040 --> 41:20.040
是不是结束衣服判断

41:20.040 --> 41:21.040
我的天了

41:21.040 --> 41:23.040
结束是指结束的循环

41:23.040 --> 41:26.040
结束的是这个循环

41:26.040 --> 41:28.040
结束这一次的循环

41:28.040 --> 41:29.040
那么结束的循环过后

41:29.040 --> 41:30.040
它不是这里

41:30.040 --> 41:32.040
但是这里它要运行这个

41:32.040 --> 41:33.040
结束的循环过后

41:33.040 --> 41:34.040
它要运行这个

41:34.040 --> 41:35.040
结束的是循环体

41:35.040 --> 41:36.040
你可以这样理解

41:36.040 --> 41:39.040
结束的是当前这一次的循环体

41:39.040 --> 41:41.040
那么运行这个

41:41.040 --> 41:42.040
运行这个的过后

41:42.040 --> 41:43.040
我记彼了

41:43.040 --> 41:46.040
停止当前循环体

41:46.040 --> 41:48.040
进入下一次循环

41:49.040 --> 41:50.040
那么这里

41:50.040 --> 41:51.040
我们把它写个i加加

41:51.040 --> 41:53.040
它这个还是要运行的

41:53.040 --> 41:54.040
也就是i等于3的时候

41:54.040 --> 41:55.040
我就直接运行的

41:55.040 --> 41:56.040
就是怎么意思

41:56.040 --> 41:57.040
我读代码的时候

41:57.040 --> 41:58.040
就这样来读

41:59.040 --> 42:00.040
输出012

42:00.040 --> 42:01.040
然后到3的时候

42:01.040 --> 42:02.040
啥都不别干

42:02.040 --> 42:03.040
看下一次

42:03.040 --> 42:04.040
直接看下一个

42:06.040 --> 42:07.040
0过来输出

42:07.040 --> 42:08.040
1过来输出

42:08.040 --> 42:09.040
2过来输出

42:09.040 --> 42:10.040
3过来

42:10.040 --> 42:11.040
下一个

42:11.040 --> 42:12.040
不要输出了

42:12.040 --> 42:13.040
就这么个意思

42:13.040 --> 42:14.040
那么i加加

42:14.040 --> 42:15.040
就从4开始

42:15.040 --> 42:16.040
也就是说这个代码

42:16.040 --> 42:18.040
就忽略掉了3

42:19.040 --> 42:20.040
你看一下

42:20.040 --> 42:21.040
012

42:21.040 --> 42:22.040
是不是少了个3

42:23.040 --> 42:25.040
这就是这一块

42:25.040 --> 42:26.040
continue和break

42:27.040 --> 42:28.040
continue和break

42:28.040 --> 42:29.040
它有的时候

42:29.040 --> 42:31.040
还会在这种情况下出现

42:31.040 --> 42:32.040
有的时候出面试题

42:33.040 --> 42:35.040
这种面试题也挺傻的

42:35.040 --> 42:37.040
因为这是你最基本

42:37.040 --> 42:39.040
最基本的游戏规则了

42:39.040 --> 42:41.040
基本上不太会去考这种面试题

42:41.040 --> 42:42.040
顶多

42:43.040 --> 42:44.040
你在学校里面

42:44.040 --> 42:45.040
考试的时候

42:45.040 --> 42:46.040
可能会遇到这种

42:46.040 --> 42:47.040
在公司里面

42:47.040 --> 42:48.040
面试的时候

42:48.040 --> 42:49.040
谁那么傻

42:49.040 --> 42:50.040
他去考这种玩意

42:50.040 --> 42:51.040
就是最基本的知识

42:51.040 --> 42:52.040
看着

42:53.040 --> 42:57.120
i小于

42:57.120 --> 42:58.120
随便写吧

42:58.120 --> 42:59.120
随便写

43:00.120 --> 43:01.120
小于3

43:01.120 --> 43:02.120
i加加

43:03.120 --> 43:04.120
然后里边写了个啥呢

43:04.120 --> 43:05.120
里边又写了个佛讯环

43:06.120 --> 43:07.120
有人可能腿都向他发头了

43:07.120 --> 43:08.120
别怕

43:08.120 --> 43:10.120
怕啥

43:10.120 --> 43:11.120
你再怕啥

43:12.120 --> 43:13.120
借加加

43:15.120 --> 43:16.120
判断

43:17.120 --> 43:18.120
比方说

43:19.120 --> 43:20.120
借

43:21.120 --> 43:22.120
等于

43:22.120 --> 43:23.120
这样吧

43:23.120 --> 43:24.120
i加借

43:24.120 --> 43:26.120
如果等于

43:26.120 --> 43:27.120
如果大于等于

43:28.120 --> 43:29.120
2

43:29.120 --> 43:30.120
如果大于等于2

43:31.120 --> 43:32.120
break

43:33.120 --> 43:34.120
最后

43:34.120 --> 43:36.120
我们每一次输出的时候

43:36.120 --> 43:38.120
输出i和借

43:39.120 --> 43:41.120
他问你最终会输出啥

43:42.120 --> 43:43.120
最终会输出啥

43:43.120 --> 43:44.120
你怎么来看这个代码了

43:44.120 --> 43:46.120
怎么来阅读这个代码

43:46.120 --> 43:47.120
你把它分开一看

43:47.120 --> 43:49.120
你把它揉在一块儿看的话

43:49.120 --> 43:50.120
脑袋都要晕掉

43:50.120 --> 43:52.120
你把它分开一看

43:52.120 --> 43:54.120
首先你把这个地方折叠起来

43:54.120 --> 43:55.120
就是一坨

43:55.120 --> 43:56.120
对吧

43:56.120 --> 43:58.120
外面一个佛讯环i从0到2

43:58.120 --> 43:59.120
0到2

43:59.120 --> 44:00.120
循环几次

44:00.120 --> 44:01.120
所以循环3次

44:01.120 --> 44:02.120
012

44:02.120 --> 44:03.120
3次嘛

44:03.120 --> 44:04.120
外面这个循环

44:04.120 --> 44:05.120
循环3次

44:05.120 --> 44:06.120
012

44:06.120 --> 44:07.120
每循环一次

44:07.120 --> 44:09.120
执行这里面一坨东西

44:09.120 --> 44:10.120
一坨东西

44:10.120 --> 44:11.120
咱们就来看呗

44:11.120 --> 44:12.120
把这样的分开

44:12.120 --> 44:13.120
分开来看

44:13.120 --> 44:14.120
一定要把分开

44:14.120 --> 44:15.120
特别是对初学者

44:15.120 --> 44:16.120
把分开过后

44:16.120 --> 44:17.120
你就看了明白了

44:17.120 --> 44:18.120
外面这个循环

44:18.120 --> 44:19.120
外面这个循环

44:19.120 --> 44:20.120
第一次循环

44:20.120 --> 44:21.120
是不是i等于1

44:21.120 --> 44:23.120
i等于0对吧

44:23.120 --> 44:25.120
好那么假设一个变量

44:25.120 --> 44:26.120
假设有个变量

44:26.120 --> 44:27.120
i等于0

44:27.120 --> 44:28.120
只看这个循环

44:28.120 --> 44:29.120
是不是看懂了

44:29.120 --> 44:30.120
看懂了呗

44:30.120 --> 44:31.120
i等于0

44:31.120 --> 44:32.120
i的不变的

44:32.120 --> 44:33.120
i是0

44:33.120 --> 44:35.120
然后运行一次它

44:35.120 --> 44:36.120
运行一次它

44:36.120 --> 44:37.120
它就是从

44:37.120 --> 44:38.120
接就是从0到2对吧

44:38.120 --> 44:39.120
0到2

44:39.120 --> 44:41.120
好接等于0的时候

44:41.120 --> 44:43.120
接等于0的时候

44:43.120 --> 44:44.120
那么输出啥

44:44.120 --> 44:45.120
来呗

44:45.120 --> 44:48.120
输出0和0对吧

44:48.120 --> 44:49.120
接等于0的时候

44:49.120 --> 44:50.120
i本来就是0

44:50.120 --> 44:52.120
接等于0的时候

44:52.120 --> 44:54.120
这次循环输出0和0

44:54.120 --> 44:55.120
好然后呢

44:55.120 --> 44:56.120
判断i加接

44:56.120 --> 44:57.120
是不是大于等于2

44:57.120 --> 44:58.120
是不是扯淡的

44:58.120 --> 44:59.120
根本就不大于

44:59.120 --> 45:00.120
不大于

45:00.120 --> 45:01.120
所以说呢

45:01.120 --> 45:02.120
这个判断了进不了

45:02.120 --> 45:03.120
判断进不了

45:03.120 --> 45:05.120
好接下来我们继续

45:05.120 --> 45:06.120
好然后呢

45:06.120 --> 45:08.120
接又继续循环对吧

45:08.120 --> 45:09.120
接又继续循环

45:09.120 --> 45:10.120
那么接又变成了1

45:10.120 --> 45:12.120
接又变成了1对吧

45:12.120 --> 45:13.120
刚才接是0

45:13.120 --> 45:14.120
这是接嘛

45:14.120 --> 45:15.120
接是0

45:15.120 --> 45:16.120
接又变成了1

45:16.120 --> 45:17.120
好那么输出什么呢

45:17.120 --> 45:18.120
输出0

45:18.120 --> 45:19.120
1

45:19.120 --> 45:20.120
对吧

45:20.120 --> 45:21.120
输出0

45:21.120 --> 45:22.120
1

45:22.120 --> 45:23.120
i始终等于0

45:23.120 --> 45:24.120
对吧

45:24.120 --> 45:25.120
i始终等于0

45:25.120 --> 45:26.120
好然后呢

45:26.120 --> 45:27.120
又来判断

45:27.120 --> 45:28.120
i加接

45:28.120 --> 45:29.120
还不扯淡对吧

45:29.120 --> 45:30.120
加起来还是等于1

45:30.120 --> 45:31.120
条件不满足

45:31.120 --> 45:32.120
所以说

45:32.120 --> 45:33.120
这个判断进不了

45:33.120 --> 45:34.120
好接下来再看

45:34.120 --> 45:35.120
再看

45:35.120 --> 45:36.120
好

45:36.120 --> 45:37.120
i第三次循环

45:37.120 --> 45:38.120
第三次循环

45:38.120 --> 45:39.120
是接等于多少

45:39.120 --> 45:40.120
接等于2

45:40.120 --> 45:41.120
接等于2

45:41.120 --> 45:42.120
输出0

45:42.120 --> 45:43.120
2

45:43.120 --> 45:44.120
输出0

45:44.120 --> 45:45.120
2过后呢

45:45.120 --> 45:46.120
判断

45:46.120 --> 45:47.120
是不是条件满足了

45:47.120 --> 45:48.120
break

45:48.120 --> 45:49.120
结束

45:49.120 --> 45:50.120
结束

45:50.120 --> 45:51.120
但是你要注意

45:51.120 --> 45:52.120
结束的是啥

45:52.120 --> 45:54.120
结束的是这个

45:54.120 --> 45:55.120
护循环

45:55.120 --> 45:56.120
是这个护循环

45:56.120 --> 45:58.120
它结束的不是外面

45:58.120 --> 45:59.120
这个护循环

45:59.120 --> 46:00.120
结束的是

46:00.120 --> 46:01.120
它最近的这个

46:01.120 --> 46:02.120
护循环

46:02.120 --> 46:03.120
它歪成的

46:03.120 --> 46:04.120
不是最歪成

46:04.120 --> 46:05.120
应该说

46:05.120 --> 46:06.120
怎么说

46:06.120 --> 46:08.120
至少它的负的

46:08.120 --> 46:09.120
护循环

46:09.120 --> 46:10.120
相当于是

46:10.120 --> 46:11.120
多么元素找

46:11.120 --> 46:12.120
负节点

46:12.120 --> 46:13.120
相当于是

46:13.120 --> 46:14.120
ATM元素找

46:14.120 --> 46:15.120
负节点

46:15.120 --> 46:16.120
一个往负元素找

46:16.120 --> 46:17.120
结束这个护循环

46:17.120 --> 46:18.120
是这么个意思

46:18.120 --> 46:19.120
结束的是它

46:19.120 --> 46:20.120
但是无所谓

46:20.120 --> 46:21.120
它马上就肯定要结束了

46:21.120 --> 46:22.120
本身就要结束了

46:22.120 --> 46:24.120
它结束了

46:24.120 --> 46:26.120
那么这一拓代码运行完了

46:26.120 --> 46:27.120
这才算是

46:27.120 --> 46:29.120
把i等于0的这一次循环

46:29.120 --> 46:30.120
就歪成大循环里边

46:30.120 --> 46:33.120
把i等于0这一次运行完了

46:33.120 --> 46:35.120
接下来歪成大循环

46:35.120 --> 46:36.120
i又加1了

46:36.120 --> 46:38.120
i又变成了1

46:38.120 --> 46:40.120
是不是又要重新来一次

46:40.120 --> 46:42.120
下面这个又要重新来一次

46:42.120 --> 46:43.120
又得重新来一次

46:43.120 --> 46:44.120
重新来一次

46:44.120 --> 46:45.120
是不是又来一次

46:45.120 --> 46:46.120
借又从0开始

46:46.120 --> 46:48.120
现在i等于1了

46:48.120 --> 46:49.120
借又从0开始

46:49.120 --> 46:51.120
一开始i等于1

46:51.120 --> 46:52.120
输出1

46:52.120 --> 46:55.120
输出10

46:55.120 --> 46:57.120
没问题吧

46:57.120 --> 46:58.120
又输出1

46:58.120 --> 47:00.120
1借又加1

47:00.120 --> 47:01.120
借又从

47:01.120 --> 47:03.120
借每次循环借都是从0到2

47:03.120 --> 47:05.120
每次循环都是从0到2

47:05.120 --> 47:06.120
借又等于1

47:06.120 --> 47:08.120
借等于1过后

47:08.120 --> 47:10.120
借等于1过后

47:10.120 --> 47:12.120
那么是不是这个判断

47:12.120 --> 47:13.120
又满足了

47:13.120 --> 47:14.120
借等于1

47:14.120 --> 47:15.120
i等于1

47:15.120 --> 47:16.120
借等于1

47:16.120 --> 47:17.120
判断又满足了

47:17.120 --> 47:18.120
又结束

47:18.120 --> 47:19.120
结束的始终基础

47:19.120 --> 47:20.120
结束的是它

47:20.120 --> 47:21.120
不是歪成

47:21.120 --> 47:23.120
结束的不是歪成

47:23.120 --> 47:24.120
它一结束

47:24.120 --> 47:26.120
是不是这一次循环又没了

47:26.120 --> 47:27.120
又没了

47:27.120 --> 47:28.120
又没了过后

47:28.120 --> 47:29.120
下一次循环

47:29.120 --> 47:31.120
i等于2

47:31.120 --> 47:33.120
又来一次

47:33.120 --> 47:34.120
那么就是

47:34.120 --> 47:36.120
20

47:36.120 --> 47:37.120
20这一块

47:37.120 --> 47:39.120
借等于0的时候

47:39.120 --> 47:40.120
条件都已经满足了

47:40.120 --> 47:41.120
i加借

47:41.120 --> 47:42.120
借等于2

47:42.120 --> 47:43.120
结束

47:43.120 --> 47:44.120
那这一坨又没了

47:44.120 --> 47:45.120
又没了

47:45.120 --> 47:46.120
然后

47:46.120 --> 47:47.120
接下来

47:47.120 --> 47:48.120
i等于3

47:48.120 --> 47:49.120
i等于3是不是退出循环了

47:49.120 --> 47:51.120
所以说最终的输出结果

47:51.120 --> 47:53.120
最终的输出结果

47:53.120 --> 47:54.120
你别看它什么

47:54.120 --> 47:55.120
嵌套不嵌套的

47:55.120 --> 47:57.120
你把它当成一个整体来看待就行了

47:57.120 --> 47:59.120
最终的运行结果就是

48:00.120 --> 48:02.120
000010101120

48:02.120 --> 48:04.120
看一下

48:04.120 --> 48:05.120
不但

48:05.120 --> 48:06.120
面试的时候

48:06.120 --> 48:07.120
不会出这么傻的题

48:07.120 --> 48:09.120
不会出这么傻的题

48:09.120 --> 48:10.120
这个题

48:10.120 --> 48:11.120
就是有点反而说而已

48:11.120 --> 48:12.120
你慢慢分析

48:12.120 --> 48:13.120
肯定是能做出来的

48:13.120 --> 48:14.120
根据它的语法规则

48:14.120 --> 48:15.120
肯定能做出来

48:15.120 --> 48:17.120
有输出这么一个玩意

48:17.120 --> 48:18.120
好吧

48:18.120 --> 48:20.120
介绍一下这个break

48:20.120 --> 48:21.120
continue

48:21.120 --> 48:22.120
这两个关键字

48:22.120 --> 48:24.120
介绍一下这两个关键字

48:24.120 --> 48:25.120
好

48:25.120 --> 48:26.120
循环这一块

48:26.120 --> 48:27.120
实际上

48:27.120 --> 48:29.120
语法支持到此结束

48:29.120 --> 48:31.120
语法支持完了

48:31.120 --> 48:33.120
但是循环这一块

48:33.120 --> 48:34.120
真正麻烦的

48:34.120 --> 48:36.120
根本就不是它的语法支持

48:36.120 --> 48:38.120
而是它的应用

48:38.120 --> 48:40.120
在具体的场景里面的应用

48:40.120 --> 48:41.120
这个是最麻烦的

48:41.120 --> 48:43.120
它的应用是最麻烦的

48:43.120 --> 48:46.120
我们会做很多很多的练习题

48:46.120 --> 48:48.120
来搞定它的应用

48:48.120 --> 48:51.120
这一块我这样子

48:51.120 --> 48:52.120
我这样

48:52.120 --> 48:54.120
我不规定作业

48:54.120 --> 48:55.120
这一块不规定作业

48:55.120 --> 48:56.120
大家下来

48:56.120 --> 48:58.120
先把这个这节课的

48:58.120 --> 48:59.120
我讲的知识

48:59.120 --> 49:01.120
就是我课堂上写的代码

49:01.120 --> 49:02.120
你捋清楚

49:02.120 --> 49:04.120
而且自己要写的非常非常熟练

49:04.120 --> 49:06.120
我让你写个破循环0到100

49:06.120 --> 49:07.120
0到99

49:07.120 --> 49:08.120
比方说

49:08.120 --> 49:09.120
我让你写个破循环

49:09.120 --> 49:11.120
从0循环到99

49:11.120 --> 49:13.120
一个变量从0到99

49:13.120 --> 49:14.120
能够瞬间写出来

49:14.120 --> 49:16.120
你老子里面不要想

49:16.120 --> 49:17.120
瞬间写出来

49:17.120 --> 49:19.120
先把这个东西练好

49:19.120 --> 49:20.120
就是个枯燥的练习

49:20.120 --> 49:21.120
就跟练钢琴一样

49:21.120 --> 49:23.120
练个10遍20遍

49:23.120 --> 49:24.120
多练几次

49:24.120 --> 49:25.120
慢慢就明白了

49:25.120 --> 49:27.120
先把这个格式写出来

49:27.120 --> 49:28.120
特别是破循环

49:28.120 --> 49:30.120
特别是破循环

49:30.120 --> 49:31.120
它的格式里要写出来

49:31.120 --> 49:33.120
把这个写得非常非常熟练

49:33.120 --> 49:34.120
我说0到99

49:34.120 --> 49:36.120
你马上要能够写出这种格式

49:36.120 --> 49:37.120
我说0到100

49:37.120 --> 49:39.120
你马上要能写出这种格式

49:39.120 --> 49:41.120
要把这个格式要练熟

49:41.120 --> 49:42.120
好

49:42.120 --> 49:43.120
练熟过后

49:43.120 --> 49:44.120
咱们下节课

49:44.120 --> 49:46.120
专门来一节课的时间

49:46.120 --> 49:48.120
来讲它的各种练习

49:48.120 --> 49:49.120
各种练习题

49:49.120 --> 49:51.120
我会让大家跟着我的思路走

49:51.120 --> 49:52.120
因为你们一开始

49:52.120 --> 49:53.120
结束循环的时候

49:53.120 --> 49:54.120
遇到这些练习题

49:54.120 --> 49:55.120
我告诉大家

49:55.120 --> 49:56.120
绝大部分同学

49:56.120 --> 49:57.120
手都下不了

49:57.120 --> 49:58.120
都不知道该怎么下手

49:58.120 --> 49:59.120
所以说

49:59.120 --> 50:01.120
首先把这个结构搞清楚

50:01.120 --> 50:02.120
搞清楚结构过后

50:02.120 --> 50:03.120
我们下节课

50:03.120 --> 50:04.120
再来做一些练习题

50:04.120 --> 50:05.120
好

50:05.120 --> 50:06.120
做了这些练习题过后

50:06.120 --> 50:07.120
我再给大家出一些题

50:07.120 --> 50:08.120
让大家去完成

50:08.120 --> 50:09.120
好吧

50:09.120 --> 50:10.120
我们用这种模式来做

50:10.120 --> 50:11.120
好吧

50:11.120 --> 50:12.120
OK

50:12.120 --> 50:14.120
先把这些愚法规则搞清楚

50:14.120 --> 50:15.120
OK

50:15.120 --> 50:17.120
那么这是循环这一块的愚法规则

