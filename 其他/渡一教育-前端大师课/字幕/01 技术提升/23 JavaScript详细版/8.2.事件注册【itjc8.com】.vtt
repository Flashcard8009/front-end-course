WEBVTT

00:00.000 --> 00:15.530
事件这一部分咱们挨着来讲

00:15.530 --> 00:19.730
我们说了事件表示发生了某件事 什么叫事件注册呢

00:19.730 --> 00:24.530
指的是发生这一件事过后我要干嘛 这叫事件注册

00:24.530 --> 00:28.330
把一个函数给它关联到某一个事件上面去

00:28.330 --> 00:31.830
就叫事件注册 也叫做事件绑定 说的是一个意思

00:31.830 --> 00:34.130
就是有的时候你听说什么事件绑定

00:34.130 --> 00:37.130
也不知道什么意思了 是一样的 一样的意思

00:37.130 --> 00:41.430
好 这里我们来说一下关于这个事件注册有哪些方式

00:41.430 --> 00:46.430
可以进行注册 有哪些方式呢 这里主要有两种方式

00:46.430 --> 00:49.230
一种是动物灵级 动物灵

00:49.230 --> 00:51.630
动物灵它指的是就是最早的那个版本

00:51.630 --> 00:53.330
那个时候都还没有形成标准

00:53.330 --> 00:56.430
是他们那个王进浏览器和那个爱因浏览器

00:56.430 --> 01:00.230
他们有这么一个共识 就用这种方式来注册事件

01:00.230 --> 01:04.830
就是什么将事件名称 名称

01:04.930 --> 01:07.930
事件名称比方说click 对吧 就是个点击事件

01:07.930 --> 01:18.530
click 事件名称前面加上按作为动的属性名

01:18.530 --> 01:21.630
给该属性负值积为事件注册

01:21.630 --> 01:30.730
给该属性负值为一个函数积为事件注册

01:30.730 --> 01:34.730
就这么简单 就是我们之前用的都是动灵这个级别

01:34.730 --> 01:38.330
在事件名称前面加上一个按作为事件的属性名

01:38.330 --> 01:41.730
给这个属性负值为一个函数就是事件注册了

01:41.730 --> 01:46.480
看一下吧 动灵

01:46.480 --> 01:50.280
比方说我们页面上有个按钮 点击

01:50.280 --> 01:55.180
然后按钮注册一个点击事件

01:55.180 --> 01:57.680
好 之前咋注册了 是不是得到动物对象

01:57.680 --> 02:01.480
对吧 btn document queries negative

02:01.480 --> 02:08.880
然后按钮 给它干id btn1 点击1

02:08.880 --> 02:12.280
或者我们要讲另外一种方式 btn1

02:12.280 --> 02:18.880
好 这里get elements by id

02:18.880 --> 02:22.080
注册点击事件怎么注册的 是不是把它当成属性来使用

02:22.080 --> 02:25.480
对吧 在事件内型 就是事件的名称

02:25.480 --> 02:27.880
也就是事件的内型前面加上一个按

02:27.880 --> 02:30.380
后面跟上什么事件名 对吧

02:30.380 --> 02:33.180
其实你打出来过后你会发现有很多很多的时间

02:33.180 --> 02:38.180
超级超级多 其中一个叫unclick 点击事件

02:38.180 --> 02:39.980
然后给它负值为一个什么呢

02:39.980 --> 02:43.580
负值为一个函数 那么这样就把事件注册完了

02:43.580 --> 02:46.180
就把一个函数关联到一个属性上面去了

02:46.180 --> 02:48.980
所以以前在最早的时候 它的事件

02:48.980 --> 02:52.080
它是作为一个属性存在的 前面加一个按

02:52.080 --> 02:54.280
你要这意思吧 咱们来看一下

02:54.280 --> 02:57.680
它就没啥看的 没啥看的

02:57.980 --> 03:01.480
这里我们点击一下 小心 点击

03:01.480 --> 03:03.680
你看 终于完成了 对吧

03:03.680 --> 03:07.580
其实这里还有一种方式 什么方式呢

03:07.580 --> 03:11.980
就是你直接把这个属性写到哪 写到这

03:11.980 --> 03:13.880
直接把这个属性写到这

03:13.880 --> 03:16.280
unclick 写到这

03:16.280 --> 03:20.180
那么在这里边去给它写事件也可以

03:20.180 --> 03:22.380
这个双引号里面写的是啥呢

03:22.380 --> 03:25.580
写的就是介式代码 直接运行介式代码

03:25.580 --> 03:27.380
就是这里边的代码是直接运行的

03:27.380 --> 03:29.480
当我点击的时候就直接运行了

03:29.480 --> 03:34.680
比方说我们这里写一个console log

03:34.680 --> 03:37.880
如果你这里还要用双引号的话 注意转移

03:37.880 --> 03:41.880
这里abc 保存看一下 点击

03:41.880 --> 03:45.480
对 下面要注射掉

03:45.480 --> 03:47.580
那么使用这种方式也可以

03:47.580 --> 03:48.780
这里就不需要写函数了

03:48.780 --> 03:50.780
不用在这里写个什么方可形的

03:50.780 --> 03:53.280
它就可以 它默认就是一个函数环境

03:53.280 --> 03:55.380
相当于是它帮你自己写的函数

03:55.380 --> 03:57.180
你这里边就直接写代码就完成了

03:57.180 --> 03:59.380
当然你这里面可不可以调用函数

03:59.380 --> 04:02.380
当然可以调用函数 也可以调用

04:02.380 --> 04:06.380
只不过这种方式不太常见 不太常用

04:06.380 --> 04:07.880
这里面 当然我先说一下

04:07.880 --> 04:09.480
这里面可以调用函数的

04:09.480 --> 04:11.180
就什么代码都可以写

04:11.180 --> 04:14.480
比方说你可以把console log写下来

04:14.480 --> 04:18.380
然后在这里面去调用函数

04:18.380 --> 04:20.880
这里就是介式代码 直接运行就完成了

04:20.880 --> 04:23.380
保存看一下 是一样的

04:23.380 --> 04:26.180
就是说这种方式以后不要用

04:26.180 --> 04:29.380
至少可以用多姆林 但是你不要用这种方式

04:29.380 --> 04:30.880
为什么不用这种方式呢

04:30.880 --> 04:33.080
因为这样的方式相当于是

04:33.080 --> 04:37.580
你把介式代码跟ATM代码的杂肉在一起

04:37.580 --> 04:39.780
是非常不便于维护的

04:39.780 --> 04:42.280
我们尽量把这些代码分开 分开出写

04:42.280 --> 04:43.580
就是我们为什么说

04:43.580 --> 04:45.880
以后你们做真正的项目的时候

04:45.880 --> 04:48.380
是要单独去建立介式文件了

04:48.380 --> 04:50.380
就是因为要尽量的把它分开

04:50.380 --> 04:51.280
你这样子写的过后

04:51.280 --> 04:54.280
你要到处去找介式里面哪个地方写了这个函数

04:54.380 --> 04:56.980
很麻烦 而且非常容易出问题

04:56.980 --> 04:59.280
非常容易出错 非常容易写错

04:59.280 --> 05:01.580
所以说大家不建议大家这样子来书写

05:01.580 --> 05:03.680
当然这也是一种多姆林的方式

05:03.680 --> 05:06.080
因为它是属性嘛 这样子写是不是属性

05:06.080 --> 05:08.080
是不是给属性负责 没问题吧

05:08.080 --> 05:12.780
对吧 OK 这是这种方式来注册事件

05:12.780 --> 05:14.280
好 那么这里再说一下

05:14.280 --> 05:16.280
如果你使用多姆林的这种方式

05:16.280 --> 05:18.580
如何来移除事件呢

05:18.580 --> 05:19.880
如果你要移除事件

05:19.880 --> 05:22.780
就是你之前注册的一些事件

05:22.780 --> 05:25.480
后来事件发生过后

05:25.480 --> 05:28.280
不想做任何事情 需要把事件移除掉

05:28.280 --> 05:30.580
移除的方式非常简单

05:30.580 --> 05:36.080
重新给事件属性负责

05:36.080 --> 05:38.180
负责为啥呢 负责为undefend

05:38.180 --> 05:39.680
负责为null

05:39.680 --> 05:41.180
负责为空函数都行

05:41.180 --> 05:42.880
比方说我们通常负责为null

05:42.880 --> 05:45.380
或者是负责为undefend

05:45.380 --> 05:51.180
同意负责通常负责为null和undefend

05:51.180 --> 05:52.780
这说明一个什么问题呢

05:52.780 --> 05:56.580
说明了这种事件你只能注册一次

05:56.580 --> 05:59.180
比方说你这里console log1

05:59.180 --> 06:01.180
比方说再注册一次

06:01.180 --> 06:04.480
unclick 方形 再注册一次

06:04.480 --> 06:07.780
console log2 看一下会运行

06:07.780 --> 06:11.180
会运行这个1和2 会同时运行吗

06:11.180 --> 06:13.380
点击 它只会运行后边注册的

06:13.380 --> 06:15.180
相当于是你后边的负责

06:15.180 --> 06:17.380
给边量负责 对吧 给属性负责

06:17.380 --> 06:19.480
是不是把前面的负责掉了

06:19.580 --> 06:21.180
它之前指向一个地址

06:21.180 --> 06:22.780
这个地址是一个函数

06:22.780 --> 06:24.680
后边又给它重新负责的一个地址

06:24.680 --> 06:25.980
因为又有一个新的函数了

06:25.980 --> 06:27.080
重新给它负责一个地址

06:27.080 --> 06:29.480
那之前是不是丢失掉了 对不对

06:29.480 --> 06:30.680
相当于是把负改掉

06:30.680 --> 06:33.680
它不可能加负责为两个函数的 不可能的

06:33.680 --> 06:35.580
因此基于这个原理

06:35.580 --> 06:37.680
我们要把它事件给它取消掉

06:37.680 --> 06:39.680
很简单的一个话 负责为undefend

06:39.680 --> 06:42.280
或者是把它负责为null都行

06:42.280 --> 06:43.680
看一下 现在数没了

06:43.680 --> 06:45.280
它不会爆错的

06:45.280 --> 06:47.280
它默认不就是undefend吗

06:47.280 --> 06:48.680
我们看一下它的默认值

06:48.680 --> 06:50.680
就是你啥都不写

06:50.680 --> 06:53.880
我们来看一下 输出一下btn的unclick

06:53.880 --> 06:55.980
默认是null

06:55.980 --> 06:58.080
对于直接有默认值的 对吧

06:58.080 --> 07:01.680
你把负责为null或者是undefend都行

07:01.680 --> 07:05.480
这是第一种方式 动物领这种方式非常简单

07:05.480 --> 07:07.880
好 这里我们要说一下第二种方式

07:07.880 --> 07:09.580
第二种方式它是动物二

07:09.580 --> 07:10.980
为什么没有动物一呢

07:10.980 --> 07:12.980
因为动物一这个版本里边

07:12.980 --> 07:16.080
它没有就是涉及到事件的标准

07:16.080 --> 07:19.880
所以到动物二的时候加入了新的事件标准

07:19.880 --> 07:21.380
那么这个事件标准是什么呢

07:21.380 --> 07:23.780
就是使用一个函数

07:23.780 --> 07:25.880
使用动物对象

07:25.880 --> 07:31.180
第二addevent national

07:31.180 --> 07:35.480
通过这个函数来注册事件

07:35.480 --> 07:37.880
这个函数跟之前的动物领有什么区别呢

07:37.880 --> 07:40.980
就这种函数 它注册事件的方式

07:40.980 --> 07:44.180
它有两个区别 跟动物领的区别

07:44.180 --> 07:47.980
我们以后会详细说 与动物领的区别

07:47.980 --> 07:50.480
第一种是 第一个区别是

07:50.480 --> 07:59.480
动物二可以注册为某个元素的同一个事件

07:59.480 --> 08:05.080
就发生了一件事可以添加多个处理程序

08:05.080 --> 08:08.080
你看它用的单词叫adde表示添加 对吧

08:08.080 --> 08:09.180
一本册什么意思

08:09.180 --> 08:11.380
一本册表示的是事件

08:11.780 --> 08:14.280
表示监听器 你可以把它理解为处理函数

08:14.280 --> 08:18.780
可以添加多个处理函数 处理程序

08:18.780 --> 08:19.980
以前的只能有一个 对吧

08:19.980 --> 08:22.180
你再复制它就消失了 它就没了

08:22.180 --> 08:24.380
那现在可以添加多个了

08:24.380 --> 08:26.180
好 第二个区别是

08:26.180 --> 08:36.580
动物二允许开发者控制事件处理的阶段

08:36.580 --> 08:37.480
我们之前不是说过吗

08:37.480 --> 08:39.380
事件榴里边有三个阶段

08:39.380 --> 08:42.780
一个是补货阶段 目标阶段和什么冒泡阶段

08:42.780 --> 08:45.180
那么默认情况下

08:45.180 --> 08:46.980
当然那个目标阶段就没什么说的了

08:46.980 --> 08:48.980
目标阶段始终是运行的

08:48.980 --> 08:53.580
主要是 目标 主要是个冒泡阶段和补货阶段

08:53.580 --> 08:55.680
主要是冒泡阶段和补货阶段

08:55.680 --> 08:59.280
默认情况下 事件是发生在冒泡阶段的

08:59.280 --> 09:00.880
目标阶段没什么好说的

09:00.880 --> 09:03.680
因为你点了它 它一定会发生的

09:03.680 --> 09:06.680
那么后续的就是其他的元素 它的祖先元素

09:06.680 --> 09:09.280
他们的事件 默认发生在冒泡阶段

09:09.280 --> 09:11.480
也就是说你给他们注册事件处理程序

09:11.480 --> 09:15.180
它会在目标阶段完了之后运行

09:15.180 --> 09:17.080
就是事件元处罚 先处罚

09:17.080 --> 09:18.580
然后他们再一式处罚

09:18.580 --> 09:20.380
它默认是这样的处罚的

09:20.380 --> 09:21.980
那么使用DOM2的方式

09:21.980 --> 09:24.980
你可以控制它在补货阶段

09:24.980 --> 09:26.980
因为现在的王继浏览器已经不存在了

09:26.980 --> 09:29.880
所以说IE统一天下之后

09:29.880 --> 09:32.880
都按照IE的这种事件冒泡的方式来进行处理

09:32.880 --> 09:33.980
但是有了DOM2之后

09:33.980 --> 09:36.580
你可以控制到补货阶段

09:36.580 --> 09:38.680
尽管我们通常都没有去这样做

09:38.680 --> 09:40.580
但是你是可以控制的

09:40.580 --> 09:43.680
好吧 这是他们两个最重要的区别

09:43.680 --> 09:45.680
好 咱们来看一下

09:45.680 --> 09:48.680
看一下就是DOM2

09:48.680 --> 09:50.080
DOM2

09:50.080 --> 09:52.680
DOM2里边它是如何来处理事件的

09:52.680 --> 09:53.680
好 同样的道理

09:53.680 --> 09:55.680
它是得到一个BTN

09:55.680 --> 09:57.380
得到一个BTN 得到一个DOM对象

09:57.380 --> 09:58.580
然后干嘛呢

09:58.580 --> 10:00.280
然后使用一个DOM对象里面一个函数

10:00.280 --> 10:03.480
叫ADDEventNational

10:03.480 --> 10:05.580
这里边它传两个参数

10:05.580 --> 10:07.780
第一个参数是事件名称

10:07.780 --> 10:08.980
这里不要加on了

10:08.980 --> 10:11.380
不要去加on 直接写事件名称就行了

10:11.380 --> 10:12.380
Click

10:12.380 --> 10:13.980
事件的名称是click

10:13.980 --> 10:15.680
第一个参数指的是事件内想

10:15.680 --> 10:17.880
就是事件名称

10:17.880 --> 10:18.880
第二个参数是什么呢

10:18.880 --> 10:20.580
第二参数就是处理函数

10:20.580 --> 10:21.880
就是你的处理函数

10:21.880 --> 10:25.280
好 方可行在这里写个匿名函数

10:25.280 --> 10:25.780
对吧

10:25.780 --> 10:26.980
我们这个见过没

10:26.980 --> 10:29.380
把一个函数作为参数传进去见过没

10:29.380 --> 10:30.580
我见过太多次了吧

10:30.580 --> 10:31.080
对吧

10:31.080 --> 10:33.380
输足里边很多函数处理都是这样子

10:33.380 --> 10:34.880
把一个函数作为传输传进去

10:34.980 --> 10:36.980
这里是一样的

10:36.980 --> 10:37.980
事件名

10:37.980 --> 10:40.280
那么点击过后要做什么处理呢

10:40.280 --> 10:42.780
再加一个处理函数

10:42.780 --> 10:45.180
给它输出一

10:45.180 --> 10:46.580
看一下

10:46.580 --> 10:47.980
我们再复制一下

10:47.980 --> 10:50.480
给它加两个事件处理函数

10:50.480 --> 10:51.580
二

10:51.580 --> 10:55.350
看一下

10:55.350 --> 10:55.950
那么点击

10:55.950 --> 10:58.250
你看一下什么两个都出发了

10:58.250 --> 10:58.550
对吧

10:58.550 --> 11:02.450
我们就可以为同一个元素的同一个事件

11:02.450 --> 11:05.550
注册多个处理函数

11:05.550 --> 11:06.850
那么这多个处理函数

11:06.850 --> 11:09.150
谁先运行谁后运行呢

11:09.150 --> 11:10.750
这里跟什么冒泡没关系

11:10.750 --> 11:12.150
你不要去搞混了

11:12.150 --> 11:13.350
感觉好像是不是冒泡

11:13.350 --> 11:14.250
没关系

11:14.250 --> 11:15.550
是同一个元素

11:15.550 --> 11:17.750
看来是同一个元素

11:17.750 --> 11:19.350
它同一个事件

11:19.350 --> 11:21.450
它可以有多个处理函数

11:21.450 --> 11:22.350
就发生这件事

11:22.350 --> 11:24.150
在这个元素上发生这件事的时候

11:24.150 --> 11:25.950
它一次运行这些函数

11:25.950 --> 11:27.250
一次运行

11:27.250 --> 11:30.350
那么就相当于是添加一个处理程序

11:30.350 --> 11:32.150
就是行程排一个队

11:32.150 --> 11:34.350
我发生的一件事一个一个来处理

11:34.350 --> 11:37.450
一个一个去处理这个处理这件事情

11:37.450 --> 11:39.350
那么它的处理顺序是什么呢

11:39.350 --> 11:41.050
谁先注册

11:41.050 --> 11:42.550
谁先注册

11:42.550 --> 11:43.750
谁先处理

11:43.750 --> 11:46.250
所以说这里多个处理程序

11:46.250 --> 11:48.350
谁先注册

11:48.350 --> 11:53.350
按照注册的先后顺序

11:53.350 --> 11:57.050
先后顺序运行

11:57.050 --> 11:59.250
按照注册的先后运行

11:59.250 --> 11:59.850
那么比方说

11:59.850 --> 12:01.750
咱们把这个二放前边

12:01.750 --> 12:02.550
你看一下

12:02.550 --> 12:04.150
保存

12:04.150 --> 12:05.250
变成二一了

12:05.250 --> 12:05.950
对吧

12:05.950 --> 12:06.850
这个很简单

12:06.850 --> 12:08.350
很简单

12:08.350 --> 12:11.650
这是关于添加处理程序

12:11.650 --> 12:13.650
它可以添加多个

12:13.650 --> 12:15.150
再看另外一个点

12:15.150 --> 12:16.750
刚才咱们不是说了吗

12:16.750 --> 12:21.550
DOM2允许了开发者控制事件的处理阶段

12:21.550 --> 12:23.350
它默认情况下是在冒耗阶段处理

12:23.350 --> 12:23.950
对吧

12:23.950 --> 12:27.550
那么我们可以把它变成补货阶段处理

12:27.550 --> 12:29.750
咱们来看一下

12:29.750 --> 12:31.150
再复制一个

12:31.150 --> 12:36.450
DOM2.1

12:36.450 --> 12:37.750
DOM2.1

12:37.750 --> 12:39.650
看一下

12:39.650 --> 12:40.650
这个按钮

12:40.650 --> 12:41.850
上面有个DIV

12:41.850 --> 12:43.450
DIV上面一个body

12:43.450 --> 12:46.050
我们就把它做成一个就是这样的格式

12:46.050 --> 12:46.950
当然没有这个DIV

12:46.950 --> 12:49.250
直接用body也行

12:49.250 --> 12:50.550
咱们来看一下

12:50.550 --> 12:52.050
我们得到这个DIV

12:52.050 --> 12:53.050
这是B天

12:53.050 --> 12:53.350
对吧

12:53.350 --> 12:54.050
B天

12:54.050 --> 12:54.950
我们对DIV

12:54.950 --> 12:58.750
也是用这种方式

12:58.750 --> 12:59.550
得到DIV

12:59.550 --> 13:02.350
Documents query is like a tar

13:02.350 --> 13:03.350
DIV

13:03.350 --> 13:04.850
给它注册点击事件

13:04.850 --> 13:05.450
unclick

13:08.950 --> 13:10.450
当然我们这里可以用那个

13:10.450 --> 13:11.250
可以用add div

13:11.250 --> 13:12.150
even to listen

13:12.150 --> 13:13.850
因为unclick它默认就是什么

13:13.850 --> 13:14.650
默认就是冒泡

13:14.650 --> 13:15.050
对吧

13:15.050 --> 13:16.450
默认是冒泡

13:16.450 --> 13:17.350
我们看一下

13:17.350 --> 13:20.050
这里输出DIV

13:20.050 --> 13:21.750
这个是BTN1

13:21.750 --> 13:24.650
这个是BTN2

13:24.650 --> 13:25.750
这个输出DIV

13:25.750 --> 13:28.590
看一下

13:28.590 --> 13:29.090
点击

13:34.070 --> 13:35.370
在哪

13:35.370 --> 13:36.770
我看一下

13:36.770 --> 13:39.170
query is negative

13:39.170 --> 13:40.370
DIV unclick

13:41.770 --> 13:42.670
没问题

13:42.670 --> 13:44.770
这里运行的页面不一样

13:44.770 --> 13:45.570
要运行这个页面

13:46.870 --> 13:47.570
看一下

13:47.570 --> 13:48.070
点击

13:48.070 --> 13:48.470
你看

13:48.470 --> 13:49.670
DIV也跟着运行

13:49.670 --> 13:50.370
再来看

13:50.370 --> 13:50.970
点击

13:50.970 --> 13:52.470
先运行最里程的

13:52.470 --> 13:53.170
然后冒泡

13:53.170 --> 13:54.070
一次往上冒

13:54.070 --> 13:55.070
冒到DIV

13:55.070 --> 13:55.870
对吧

13:55.870 --> 13:57.070
没问题吧

13:57.070 --> 13:57.670
这样子

13:57.670 --> 13:58.970
这样子也可以

13:58.970 --> 14:01.170
当然我们这里也可以通过什么

14:01.170 --> 14:02.170
是一样的

14:02.270 --> 14:06.070
也可以通过ID event listener click

14:06.070 --> 14:06.870
这里写什么

14:06.870 --> 14:08.870
写方可信

14:08.870 --> 14:11.170
这里面输出console log

14:11.170 --> 14:12.670
DIV

14:12.670 --> 14:14.170
看一下

14:14.170 --> 14:14.670
点击

14:14.670 --> 14:15.570
你看

14:15.570 --> 14:16.470
也一样

14:16.470 --> 14:17.470
一样

14:17.470 --> 14:18.970
现在问大家一个问题

14:18.970 --> 14:20.770
如果我把这个东西放这

14:20.770 --> 14:23.270
运行的顺序是什么

14:23.270 --> 14:25.470
运行的顺序是什么

14:25.470 --> 14:26.470
不要蒙了

14:26.470 --> 14:28.570
是一样的

14:28.570 --> 14:30.870
对于同一个元素而言

14:30.870 --> 14:34.170
他们对同一个元素的同一个事件而言

14:34.170 --> 14:36.170
他们的注册顺序

14:36.170 --> 14:37.770
按照注册顺序来

14:37.770 --> 14:39.570
但是对这是不同的元素

14:39.570 --> 14:41.070
他们按照世界的补货

14:41.070 --> 14:43.370
这是世界流的顺序来

14:43.370 --> 14:44.370
它是不同的元素

14:44.370 --> 14:45.670
要搞清楚

14:45.670 --> 14:47.270
只是对同一个元素而言

14:47.270 --> 14:49.870
他们是按照世界的注册顺序来

14:49.870 --> 14:51.570
对同一个元素的同一个世界

14:51.570 --> 14:52.770
原来这意思吧

14:52.770 --> 14:54.470
但是对于不同的元素

14:54.470 --> 14:57.370
他们按照个世界流的顺序来进行

14:57.370 --> 14:59.570
默正情况下是冒泡

14:59.670 --> 15:02.170
现在我们来改一下

15:02.170 --> 15:03.570
因为我们知道冬末二里面

15:03.570 --> 15:07.670
可以修改它的触发的时间点

15:07.670 --> 15:09.670
我们这里的ADT一门城里程的

15:09.670 --> 15:11.470
它实际上还有第三个残酬

15:11.470 --> 15:12.470
第一个残酬是什么

15:12.470 --> 15:15.170
第一个残酬指的是世界内行

15:15.170 --> 15:16.870
第二个残酬是处理函数

15:16.870 --> 15:19.970
还有第三个残酬

15:19.970 --> 15:21.570
第三个残酬是个布尔子

15:21.570 --> 15:22.870
它表示的是

15:22.870 --> 15:28.470
是否在补货阶段触发世界

15:28.470 --> 15:31.870
使用第三个残酬

15:31.870 --> 15:39.470
表示是否在补货阶段触发

15:39.470 --> 15:41.370
是否在补货阶段触发

15:41.370 --> 15:42.870
好 咱们来看一下

15:42.870 --> 15:44.070
那么默正是force

15:44.070 --> 15:44.870
默正不是

15:44.870 --> 15:47.070
默正不是的话就是冒泡阶段触发

15:47.070 --> 15:48.270
我可以把它设为

15:48.270 --> 15:50.670
比方说我给这个DIV注册事件的时候

15:50.670 --> 15:52.470
它这个事件的触发时间点

15:52.470 --> 15:53.670
应该是在什么

15:53.670 --> 15:55.870
应该是在补货阶段触发

15:55.870 --> 15:57.470
于是它的时间点在哪呢

15:57.470 --> 15:58.470
是不是在这

15:58.470 --> 16:00.270
在这里触发

16:00.270 --> 16:01.570
DIV在这里触发

16:01.570 --> 16:02.970
好 咱们来看一下

16:02.970 --> 16:05.270
点击过后你看DIV是先运行了

16:05.270 --> 16:05.670
对不对

16:05.670 --> 16:07.670
它的时间就先运行了

16:07.670 --> 16:08.870
我们平时可能用不到

16:08.870 --> 16:09.870
但是你一定要清楚

16:09.870 --> 16:11.470
因为这里的容易考面试题

16:11.470 --> 16:12.770
它比较容易考面试题

16:12.770 --> 16:14.870
就把这个面试题来问你

16:14.870 --> 16:15.670
最基本的

16:15.670 --> 16:17.670
它问你输出了顺序是啥

16:17.670 --> 16:19.870
因为它是在补货阶段触发的

16:19.870 --> 16:20.970
所以说输出了顺序

16:20.970 --> 16:22.570
是先输出这个DIV

16:22.570 --> 16:24.670
再输出它的目标阶段

16:24.670 --> 16:28.070
目标阶段的BTN1和BTN2

16:28.070 --> 16:29.470
原来的意思吧

16:29.470 --> 16:31.570
原来说那在这里写呢

16:31.570 --> 16:33.170
这里写有没有意义呢

16:33.170 --> 16:35.270
这里写没有任何意义

16:35.270 --> 16:36.470
这里写没有任何意义

16:36.470 --> 16:37.170
为什么

16:37.170 --> 16:38.970
因为这里你注册的事件

16:38.970 --> 16:40.670
它就是目标了

16:40.670 --> 16:42.170
它就是目标阶段了

16:42.170 --> 16:43.170
明白吧

16:43.170 --> 16:44.370
因为它是最里程的元素了

16:44.370 --> 16:45.770
它没有在里程了

16:45.770 --> 16:46.570
所以说点击它的时候

16:46.570 --> 16:48.070
就已经是目标阶段了

16:48.070 --> 16:50.170
所以说它不存在什么补货阶段

16:50.170 --> 16:51.570
它是不存在什么补货阶段的

16:51.570 --> 16:53.870
你在这里写的没有任何意义

16:53.870 --> 16:54.870
没有这意思吧

16:54.870 --> 16:56.570
因为它就是最里程的元素了

16:56.570 --> 16:59.370
它就已经是目标阶段了

16:59.370 --> 17:03.570
只是说它有可能作为

17:03.570 --> 17:06.570
就是它如果不是最里程的元素了

17:06.570 --> 17:09.070
它有可能会作为补货阶段来运行

17:09.070 --> 17:10.570
但是它已经是最里程的元素了

17:10.570 --> 17:13.170
所以说这里写没有什么意义

17:13.170 --> 17:13.570
好了吗

17:13.570 --> 17:16.070
我们再来看

17:16.070 --> 17:19.170
我如果这样来呢

17:19.170 --> 17:22.370
DIV1 Capture

17:22.370 --> 17:23.870
表示补货阶段

17:23.870 --> 17:24.970
我们就写中文

17:24.970 --> 17:26.370
补货

17:26.370 --> 17:29.070
那么另外一个是冒泡

17:29.070 --> 17:30.470
我写两个

17:30.470 --> 17:32.170
一个True的一个Force

17:32.170 --> 17:33.670
冒泡

17:33.670 --> 17:34.970
那么这个东西

17:34.970 --> 17:36.770
谁先运行谁后运行呢

17:36.770 --> 17:38.070
是不是很简单

17:38.070 --> 17:39.270
先运行补货

17:39.270 --> 17:40.370
再运行冒泡

17:40.370 --> 17:41.070
没问题

17:41.070 --> 17:41.670
对不对

17:41.670 --> 17:42.970
看一下

17:42.970 --> 17:43.670
点击

17:43.670 --> 17:44.270
先补货

17:44.270 --> 17:45.070
到目标

17:45.070 --> 17:46.270
目标阶段运行完了

17:46.270 --> 17:47.470
然后再运行冒泡

17:47.470 --> 17:47.870
对吧

17:47.870 --> 17:48.670
没问题

17:48.670 --> 17:50.870
如果我调调一下顺序

17:50.870 --> 17:52.170
有影响吗

17:52.170 --> 17:52.770
有影响吗

17:52.770 --> 17:53.770
是不是没影响

17:53.770 --> 17:54.070
对吧

17:54.070 --> 17:54.970
它阶段不一样

17:54.970 --> 17:55.370
对吧

17:55.370 --> 17:56.570
它阶段不一样

17:56.570 --> 17:57.570
虽然是同一个元素的

17:57.570 --> 17:58.370
同一个世界

17:58.370 --> 17:59.870
但它阶段不一样

17:59.870 --> 18:00.070
好

18:00.070 --> 18:01.170
咱们再看

18:01.170 --> 18:02.270
点击

18:02.270 --> 18:03.370
啥呢

18:03.370 --> 18:04.070
先补货

18:04.070 --> 18:05.270
在冒泡是一样的

18:05.270 --> 18:05.470
对吧

18:05.470 --> 18:06.870
是一样的

18:06.870 --> 18:07.170
好

18:07.170 --> 18:07.970
那么接下来这里

18:07.970 --> 18:08.670
这边

18:08.670 --> 18:09.870
就是容易烤面的事情

18:09.870 --> 18:11.370
提的是这

18:11.370 --> 18:12.870
对最里程的元素

18:12.870 --> 18:14.770
也做同样的处理

18:14.770 --> 18:16.570
比方说先Force

18:16.570 --> 18:17.670
先在冒泡

18:17.670 --> 18:19.670
先在这个

18:19.670 --> 18:21.770
先注册一个冒泡阶段的

18:21.870 --> 18:22.770
事件

18:22.770 --> 18:23.270
对吧

18:23.270 --> 18:25.570
然后再注册一个补货阶段的事件

18:25.570 --> 18:26.770
那么好像说

18:26.770 --> 18:27.970
先补货后冒泡

18:27.970 --> 18:28.570
对吧

18:28.570 --> 18:29.970
那么先补货后冒泡

18:29.970 --> 18:31.370
那么先运行它

18:31.370 --> 18:32.170
再运行它

18:32.170 --> 18:33.270
二一对吧

18:33.270 --> 18:33.970
那么这里的顺序

18:33.970 --> 18:34.770
应该是BTN2

18:34.770 --> 18:35.470
再BTN1

18:35.470 --> 18:36.270
那么我们看一下

18:38.270 --> 18:38.870
有变化吗

18:38.870 --> 18:39.770
没变化

18:39.770 --> 18:40.270
为什么呢

18:40.270 --> 18:42.270
因为这是最里程元素了

18:42.270 --> 18:43.170
最里程元素

18:43.170 --> 18:44.970
它不存在说什么

18:44.970 --> 18:46.270
补货和冒泡了

18:46.270 --> 18:48.170
它没有这不是这两个阶段了

18:48.170 --> 18:50.670
它是叫做世界目标阶段

18:50.670 --> 18:52.970
在世界目标阶段这一块

18:52.970 --> 18:54.070
这些东西都无效了

18:54.070 --> 18:55.070
都无效了

18:55.070 --> 18:56.570
知道是这么个意思

18:56.570 --> 18:57.270
要搞清楚

18:57.270 --> 18:58.670
这里非常容易出面试题的

18:58.670 --> 19:00.670
尽管我们平时不太会这样子写

19:00.670 --> 19:01.470
但是你得知道

19:01.470 --> 19:02.370
这里容易出面试题

19:02.370 --> 19:05.070
它的这种原理是什么

19:05.070 --> 19:06.370
原理是什么

19:06.370 --> 19:07.270
那么比方说

19:07.270 --> 19:08.070
再比方说

19:08.070 --> 19:10.470
我们给这个DIV一个背景颜色

19:10.470 --> 19:13.070
给这个DIV一个背景颜色

19:13.070 --> 19:14.370
Background

19:14.370 --> 19:16.770
就亮蓝色

19:16.770 --> 19:17.870
给这个DIV一个背景颜色

19:17.870 --> 19:19.270
现在我不点按钮了

19:19.270 --> 19:21.770
我直接点DIV

19:21.770 --> 19:23.970
直接点DIV来面试题了

19:23.970 --> 19:26.770
直接点DIV这两个运行吗

19:26.770 --> 19:27.770
是不是不运行

19:27.770 --> 19:29.270
那你直接点DIV的时候

19:29.270 --> 19:31.070
DIV它又变成了最里程元素了

19:31.070 --> 19:32.070
对吧

19:32.070 --> 19:33.870
我们说的最里程元素

19:33.870 --> 19:34.770
它不是静态的

19:34.770 --> 19:36.570
它是根据你的世界来了

19:36.570 --> 19:37.570
那你点的是DIV

19:37.570 --> 19:39.870
它就已经是最里程元素了

19:39.870 --> 19:40.670
所以说

19:40.670 --> 19:42.270
那里这个写法还有意义吗

19:42.270 --> 19:43.270
是不是没有意义

19:43.270 --> 19:44.070
没有任何意义

19:44.070 --> 19:46.270
就失效了

19:46.270 --> 19:48.570
所以我们这里记一笔

19:48.570 --> 19:54.170
如果元素是目标元素

19:54.170 --> 19:55.470
就是世界元

19:55.470 --> 19:58.470
也就是最里程元素

19:58.470 --> 20:02.270
那么这里就是第三参数

20:02.270 --> 20:03.670
第三个参数无效

20:03.670 --> 20:05.470
因为它第三个参数是规定阶段的

20:05.470 --> 20:05.970
对吧

20:05.970 --> 20:07.370
那么如果你本身就是世界元的话

20:07.370 --> 20:09.870
第三个参数就没有什么效果了

20:09.870 --> 20:11.470
那现在我直接点DIV

20:11.470 --> 20:14.270
直接点DIV的话谁先输出

20:14.270 --> 20:15.070
是不是先输出它

20:15.070 --> 20:15.670
冒泡

20:15.670 --> 20:16.470
然后再补货

20:16.470 --> 20:18.270
它管理是咋了

20:18.270 --> 20:19.470
不是把阶段变反了

20:19.470 --> 20:20.470
是因为我这里输出的

20:20.470 --> 20:21.470
就是这样子输出的

20:21.470 --> 20:23.070
先运行它再运行它

20:23.070 --> 20:25.270
它是按照事件的顺序来定的

20:25.270 --> 20:26.370
不要说点它

20:26.370 --> 20:29.570
你看它按照事件的注册顺序来定的

20:29.570 --> 20:31.370
没有这个意思吧

20:31.370 --> 20:32.170
应该没问题吧

20:32.170 --> 20:34.170
我这里应该讲清楚了

20:34.170 --> 20:36.370
这是关于注册事件

20:36.370 --> 20:36.670
好

20:36.670 --> 20:37.970
这里我顺便说一下

20:37.970 --> 20:40.670
关于这个什么IE浏览器

20:40.670 --> 20:42.070
我先不说IE吗

20:42.070 --> 20:43.070
我先说另外一个

20:43.070 --> 20:45.670
就是世界的遗处

20:45.670 --> 20:47.870
世界的遗处

20:47.970 --> 20:49.770
遗处的话使用这个

20:49.770 --> 20:51.070
多么对象

20:51.070 --> 20:52.470
第二

20:52.470 --> 20:53.770
remove

20:53.770 --> 20:54.870
ADD是添加

20:54.870 --> 20:56.570
remove表示遗处

20:56.570 --> 20:57.770
event

20:57.770 --> 20:59.170
neson

20:59.170 --> 21:00.270
neson表示没意思

21:00.270 --> 21:01.670
表示监听者

21:01.670 --> 21:03.870
那个参数里面写啥呢

21:03.870 --> 21:04.870
写啥呢

21:04.870 --> 21:07.170
就直接写世界名

21:07.170 --> 21:08.370
第一个参数是一样的

21:08.370 --> 21:10.570
世界名

21:10.570 --> 21:12.170
世界

21:12.170 --> 21:14.370
世界名

21:14.370 --> 21:16.070
第二个参数写的是什么

21:16.070 --> 21:17.770
处理函数

21:17.770 --> 21:20.170
你移出的是哪个处理函数

21:20.170 --> 21:23.070
咱们看一下

21:23.070 --> 21:25.670
这里再复制一个

21:25.670 --> 21:27.670
还是这个按钮

21:27.670 --> 21:29.870
咱们来先注册一个事件

21:29.870 --> 21:32.770
那么下面我们注册点击过后

21:32.770 --> 21:34.170
输出Btn1

21:34.170 --> 21:37.070
好 接下来我们再来

21:37.070 --> 21:39.670
再来加一个吧

21:39.670 --> 21:45.770
Btn2

21:45.770 --> 21:49.270
好 然后我们再写个按钮

21:49.270 --> 21:52.870
ID Btnremove

21:52.870 --> 21:54.570
点击

21:54.570 --> 21:56.370
就是移除

21:56.370 --> 22:02.640
移除按钮1的事件

22:02.640 --> 22:04.340
移除按钮1的事件

22:04.340 --> 22:06.940
好 我们找到第二个按钮

22:06.940 --> 22:10.140
Btnremove document

22:10.140 --> 22:12.240
get elements by ID

22:12.240 --> 22:15.480
Btnremove

22:15.480 --> 22:18.180
就是我是希望它之后点击无效了

22:18.180 --> 22:19.880
移除它之前的那个事件

22:19.880 --> 22:21.480
就移除Btn的事件

22:21.480 --> 22:24.180
好 当Btnremove点击的时候

22:24.180 --> 22:25.180
给它做这个事件

22:25.180 --> 22:28.080
ADT event函数的点击

22:28.080 --> 22:29.680
click

22:29.680 --> 22:31.480
方形

22:31.480 --> 22:32.880
好 干嘛呢

22:32.880 --> 22:33.880
我要干嘛呢

22:33.880 --> 22:35.380
当我点击的时候

22:35.380 --> 22:37.580
我要移除掉Btn的事件

22:37.580 --> 22:41.780
我要把Btn的事件移除掉

22:41.780 --> 22:42.980
好 那怎么移除呢

22:42.980 --> 22:44.080
使用Btn

22:44.080 --> 22:45.680
你要移除哪个动物元素的事件

22:45.680 --> 22:46.980
就找到动物元素

22:46.980 --> 22:50.980
然后remove event函数的

22:51.080 --> 22:53.180
第一个参数事件类型

22:53.180 --> 22:53.980
移除哪个事件

22:53.980 --> 22:56.680
移除点击事件

22:56.680 --> 22:57.880
第二个参数

22:57.880 --> 22:58.780
填啥呢

22:58.780 --> 23:00.680
第二个参数填的是

23:00.680 --> 23:05.080
就是那个移除的函数

23:05.080 --> 23:06.980
那问题是个移除函数咋写

23:06.980 --> 23:08.580
是不是得写个函数

23:08.580 --> 23:11.380
好 那么接下来就有个问题了

23:11.380 --> 23:13.380
我能这样子写吗

23:13.380 --> 23:14.180
我能这样子写吗

23:14.180 --> 23:15.780
我把这个函数给移除掉

23:15.780 --> 23:16.480
我能这样子写吗

23:16.480 --> 23:17.680
不能

23:17.680 --> 23:18.880
因为这个函数的

23:18.880 --> 23:20.880
你看这里是不是新建的一个函数

23:20.980 --> 23:22.780
就跟对象是一样的函数

23:22.780 --> 23:23.680
这个函数的地址

23:23.680 --> 23:26.080
跟这个函数是不是一样的

23:26.080 --> 23:26.780
不一样嘛

23:26.780 --> 23:28.080
就跟两个对象是一样的

23:28.080 --> 23:28.880
看上去一样的

23:28.880 --> 23:30.280
它的地址是不一样的

23:30.280 --> 23:32.280
因为函数的本质也是对象嘛

23:32.280 --> 23:33.580
所以它地址是不一样的

23:33.580 --> 23:35.280
那这两个函数是匹配不上的

23:35.280 --> 23:37.080
所以说这个东西移除不要的

23:37.080 --> 23:38.680
咱们来看一下吧

23:38.680 --> 23:41.960
运行出来

23:41.960 --> 23:43.060
看一下

23:43.060 --> 23:43.960
点击按钮1

23:43.960 --> 23:46.460
你看是不是每次点击都输出12

23:46.460 --> 23:48.760
然后我们现在移除按钮1的事件

23:48.760 --> 23:49.660
点击移除

23:49.660 --> 23:51.360
好 点完了过再点按钮1

23:51.360 --> 23:52.360
是不是还是有

23:52.360 --> 23:52.860
对吧

23:52.860 --> 23:54.860
所以这个是移除不掉的

23:54.860 --> 23:56.460
那你记得怎么移除呢

23:56.460 --> 23:58.060
如果你要移除事件的话

23:58.060 --> 23:59.360
你就不能添加的时候

23:59.360 --> 24:00.860
就不能这样子写了

24:00.860 --> 24:02.460
添加事件的时候就不能这样子写了

24:02.460 --> 24:04.560
因为这样子写是一个匿名函数

24:04.560 --> 24:05.260
匿名函数呢

24:05.260 --> 24:07.560
你就是或许不到它的引用的

24:07.560 --> 24:08.660
或许不到引用是什么意思

24:08.660 --> 24:09.760
或许不到它的地址

24:09.760 --> 24:11.560
我要把函数地址放这

24:11.560 --> 24:12.560
好 那么我们怎么写呢

24:12.560 --> 24:13.360
我们可以这样子写

24:15.560 --> 24:17.260
handle1

24:17.260 --> 24:18.460
第一个处理程序

24:18.460 --> 24:20.560
把它写成一个具名的函数

24:20.560 --> 24:22.160
有名字的函数

24:22.160 --> 24:23.160
好 那么这里呢

24:23.160 --> 24:24.460
我们怎样做呢

24:24.460 --> 24:25.760
把这个handle1放进来

24:25.760 --> 24:26.860
对吧

24:26.860 --> 24:28.060
添加处理程序的时候

24:28.060 --> 24:30.960
将当点击的时候去执行这个函数

24:30.960 --> 24:33.160
把这个函数的地址放过来

24:33.160 --> 24:34.460
这个没问题吧

24:34.460 --> 24:35.960
这个就相当于是个函数

24:35.960 --> 24:36.760
就是一个对相吧

24:36.760 --> 24:37.060
对吧

24:37.060 --> 24:37.760
相当于是个对相

24:37.760 --> 24:39.460
把这个对相的地址放这

24:39.460 --> 24:41.460
好 那么我们点击第二个的时候

24:41.460 --> 24:45.760
方个型handle2

24:45.760 --> 24:46.960
好 点这个的时候

24:46.960 --> 24:49.360
我们输出btn2

24:49.360 --> 24:51.160
好 那么这里呢

24:51.160 --> 24:53.660
给它什么handle2

24:53.660 --> 24:55.360
我们再用这种方式来注册了

24:55.360 --> 24:56.460
因为只有这种方式

24:56.460 --> 24:58.560
这两个函数的地址

24:58.560 --> 25:00.160
保存到这两个变量里边

25:00.160 --> 25:02.160
好 因此我们移出的时候就很简单了

25:02.160 --> 25:05.460
比方说我们移出handle2

25:05.460 --> 25:06.960
因为你看现在的地址一样了

25:06.960 --> 25:07.660
对吧

25:07.660 --> 25:09.460
它之前的处理程序加两个

25:09.460 --> 25:11.960
那么其中一个地址跟这个地址是一样的

25:11.960 --> 25:13.660
所以说可以正常移出了

25:13.660 --> 25:15.560
保存看一下

25:15.560 --> 25:16.960
点击12对吧

25:16.960 --> 25:17.860
再移出

25:17.860 --> 25:18.760
移出过后再点击

25:18.760 --> 25:20.360
是不是只有1了

25:21.360 --> 25:22.460
好 这是移出

25:22.460 --> 25:25.360
那么要把两个都移出了

25:25.360 --> 25:27.360
是不是要把1对不对

25:27.360 --> 25:29.160
保存看一下 点击

25:29.160 --> 25:31.360
移出好 看一下 点击

25:31.360 --> 25:33.360
准备了

25:33.360 --> 25:36.360
好 咱们记一笔

25:36.360 --> 25:39.860
就是说如果使用dom2的方式的话

25:39.860 --> 25:42.360
就是你要移出事件的话

25:42.360 --> 25:47.360
dom2中如果要移出事件

25:47.660 --> 25:50.560
不能使用匿名函数

25:50.560 --> 25:52.160
因为匿名函数过后你就获取不到

25:52.160 --> 25:53.360
之前那个函数地址

25:53.360 --> 25:55.560
所以说你到时候移出的时候就不好玩了

25:55.560 --> 25:56.960
所以说不能使用匿名函数

25:56.960 --> 25:58.060
得使用具名函数

25:58.060 --> 25:58.860
得有名字

25:58.860 --> 26:01.060
我们到时候才能获取到这个函数的名字

26:01.060 --> 26:02.660
把它移出了

26:02.660 --> 26:03.260
好吧

26:03.260 --> 26:06.460
这是关于dom2这里

26:06.460 --> 26:08.560
想想有哪些地方要补充的

26:08.560 --> 26:10.960
我一个个说吧

26:10.960 --> 26:12.460
说一下细节

26:12.460 --> 26:14.860
细节

26:14.860 --> 26:17.060
这里首先说一下那个兼容性问题

26:17.660 --> 26:18.660
了解一下就行了

26:18.660 --> 26:20.760
我们之前的兼容性都尽量弱化

26:20.760 --> 26:22.960
就是关于addevent listener

26:22.960 --> 26:24.460
remove event listener

26:24.460 --> 26:26.860
这两个是i18

26:26.860 --> 26:37.060
dom2在i18集以下

26:37.060 --> 26:38.060
不兼容

26:38.060 --> 26:39.260
因为i18以下

26:39.260 --> 26:42.860
它用的是很古老的那种方式来处理

26:42.860 --> 26:45.460
就是用的是它类的那种方式

26:45.560 --> 26:47.660
它也支持类似的功能

26:47.660 --> 26:49.460
只它用的是它的那种方式

26:49.460 --> 26:51.260
在i18和i18以下的话

26:51.260 --> 26:55.860
你得需要使用另外两个函数

26:55.860 --> 26:58.660
一个叫做ertouch event

26:58.660 --> 26:59.460
ertouch什么意思

26:59.460 --> 27:01.860
附加事件

27:01.860 --> 27:03.160
变了个名字

27:03.160 --> 27:07.860
然后就是detouch event

27:07.860 --> 27:12.960
使用这两个添加和移除事件

27:12.960 --> 27:14.360
如果在i18里边的话

27:14.360 --> 27:16.160
你得使用这两个

27:16.160 --> 27:17.360
也就是怎么写

27:17.360 --> 27:18.060
天下事件的话

27:18.060 --> 27:22.060
你得写ertouch event

27:22.060 --> 27:24.060
得使用这个

27:24.060 --> 27:28.060
移除的话detouch event

27:28.060 --> 27:28.960
得使用这个

27:28.960 --> 27:30.660
但是大家不用去用这种方式

27:30.660 --> 27:32.360
了解就行了

27:32.360 --> 27:33.660
而且在iE里边

27:33.660 --> 27:34.760
iE里边有什么呢

27:34.760 --> 27:36.360
就是它没有第三个参数

27:36.360 --> 27:37.560
就是它没有补货阶段

27:37.560 --> 27:39.460
因为它之前我给大家说了

27:39.460 --> 27:41.560
iE它一开始就是提出的是世界冒泡

27:41.560 --> 27:42.960
它不支持补货世界

27:42.960 --> 27:44.260
所以它没有第三个参数

27:44.260 --> 27:46.060
它是iE8以上的版本

27:46.060 --> 27:46.960
我之前也解释了

27:46.960 --> 27:48.260
对吧

27:48.260 --> 27:49.060
已经做不住了

27:49.060 --> 27:51.060
又火胡出现了

27:51.060 --> 27:53.260
谷歌后面也陆续出现了

27:53.260 --> 27:54.860
所以说它已经做不住了

27:54.860 --> 27:56.460
又支持了标准

27:56.460 --> 27:57.660
所以说我们不用去记这种

27:57.660 --> 27:59.760
太古老的这种情况

27:59.760 --> 28:00.960
后边有很多插件

28:00.960 --> 28:02.460
很多第三方的东西

28:02.460 --> 28:04.460
可以帮助你解决现状性问题

28:04.460 --> 28:07.060
好 第一个

28:07.060 --> 28:07.760
第二个的话

28:07.760 --> 28:08.460
我说一下

28:08.460 --> 28:13.860
就是天下和移除事件时

28:13.860 --> 28:18.660
可以设置

28:18.660 --> 28:23.060
可以将第三个参数

28:23.060 --> 28:31.060
写为一个对象进行相关配置

28:31.060 --> 28:33.260
这个大家可能结束的比较少一点

28:33.260 --> 28:35.660
我说一下这个地方

28:35.660 --> 28:36.660
比方说

28:36.660 --> 28:38.860
比方说我们刚才那个例子

28:38.860 --> 28:39.860
天下点击事件

28:39.860 --> 28:40.160
对吧

28:40.160 --> 28:40.860
点击事件

28:40.860 --> 28:41.660
我们之前不是说了

28:41.660 --> 28:42.860
有第三个参数

28:43.060 --> 28:44.060
第三个参数

28:44.060 --> 28:45.660
第三个参数可以写个布尔

28:45.660 --> 28:48.260
表示是否在补货阶段运行

28:48.260 --> 28:50.660
那么其实也可以写个对象

28:50.660 --> 28:52.460
第三个参数可以写对象的

28:52.460 --> 28:53.860
这个对象里面有一些配置

28:53.860 --> 28:54.660
配置很少

28:54.660 --> 28:55.660
非常非常少

28:55.660 --> 28:56.460
其中第一个

28:56.460 --> 28:58.860
这个对象里面可以给大家提供一些属性

28:58.860 --> 29:00.260
那么表示一些配置

29:00.260 --> 29:02.260
以后这种场景会比较常见

29:02.260 --> 29:03.860
就是我传参数的时候

29:03.860 --> 29:04.760
给它传一个对象

29:04.760 --> 29:06.860
对象里面给它加一些配置

29:06.860 --> 29:09.660
其中第一个配置叫做capture

29:09.660 --> 29:10.660
就这个配置

29:10.660 --> 29:12.260
这个配置表示什么意思呢

29:12.360 --> 29:14.660
它表示的是是否在补货阶段运行

29:14.660 --> 29:16.160
所以跟之前是一样的

29:16.160 --> 29:16.860
对吧

29:16.860 --> 29:19.060
是否在补货阶段运行

29:19.060 --> 29:21.060
是这么个意思

29:21.060 --> 29:21.860
那这个东西

29:21.860 --> 29:24.660
这个地方由于是目标已经是事件圆了

29:24.660 --> 29:25.660
所以说最里程了

29:25.660 --> 29:27.860
这个配置没什么意义

29:27.860 --> 29:28.560
我主要说一下

29:28.560 --> 29:31.060
这个配置叫Once

29:31.060 --> 29:33.860
表示的是是否这个事件只运行一次

29:33.860 --> 29:35.560
它默认肯定是force

29:35.560 --> 29:37.760
就这两个配置

29:37.760 --> 29:38.960
没有其他配置的

29:38.960 --> 29:39.760
就这两个配置

29:39.760 --> 29:40.360
就这两个配置

29:40.360 --> 29:41.160
我们来看一下

29:42.360 --> 29:44.360
稍微处再看一下

29:44.360 --> 29:47.160
Once把这两个都设为处

29:47.160 --> 29:49.460
然后下面我不去移除它的事件

29:49.460 --> 29:50.760
不去移除了

29:50.760 --> 29:52.360
保存看一下

29:52.360 --> 29:53.560
点击1

29:53.560 --> 29:54.860
点击再点击

29:54.860 --> 29:55.860
是不是无效了

29:55.860 --> 29:57.260
它这个事件只会出发一次

29:57.260 --> 29:59.060
然后它就自动给你移除了

29:59.060 --> 30:01.060
你可以认为它自动给你移除了

30:01.060 --> 30:02.460
如果你这个

30:02.460 --> 30:03.960
如果你第二个没有写

30:03.960 --> 30:05.260
如果你第二个没有写

30:05.260 --> 30:06.560
那么再看一下

30:06.560 --> 30:07.460
点击输出1

30:07.460 --> 30:08.060
输出2

30:08.060 --> 30:08.260
对吧

30:08.260 --> 30:08.760
再点击

30:08.760 --> 30:09.660
那只输出2了

30:09.660 --> 30:10.160
看

30:10.160 --> 30:11.660
依旧没动机了

30:12.660 --> 30:14.560
这就是有这么一个

30:14.560 --> 30:16.260
有的时候还蛮好用的

30:16.260 --> 30:17.760
还蛮好用的

30:17.760 --> 30:18.760
就是说可以配置

30:18.760 --> 30:20.860
当然如果这里可以就配置多个东西

30:20.860 --> 30:23.260
你可以配置再配置一个什么capture

30:23.260 --> 30:25.060
它在补货阶段还是在

30:25.060 --> 30:27.560
就是冒泡阶段直秀

30:27.560 --> 30:29.260
咱们来试一下另外一个

30:29.260 --> 30:30.060
试一下另外一个

30:31.260 --> 30:35.060
比方说咱们没有给btn注册事件

30:35.060 --> 30:36.560
没给btn注册事件

30:36.560 --> 30:38.460
给什么给这个div注册的事件

30:39.760 --> 30:41.260
div documents

30:41.760 --> 30:43.660
query

30:43.660 --> 30:44.860
给这个div注册的事件

30:46.360 --> 30:47.560
好这个div呢

30:47.560 --> 30:49.060
我们加一个事件吧

30:49.060 --> 30:50.460
一个补货一个冒泡嘛

30:50.460 --> 30:51.060
对吧

30:51.060 --> 30:52.360
加加一个

30:52.360 --> 30:55.660
div add event listener

30:55.660 --> 30:56.960
给他加一个补货

30:56.960 --> 30:58.660
补货件的点击事件

30:58.660 --> 30:59.360
然后呢

30:59.360 --> 31:00.860
干嘛呢

31:00.860 --> 31:02.160
运行一个函数

31:02.160 --> 31:03.460
运行一个函数

31:03.460 --> 31:04.760
我这里还是写一下吧

31:04.760 --> 31:05.660
方可行

31:05.660 --> 31:06.660
div handler

31:07.860 --> 31:09.260
div handler

31:09.260 --> 31:11.700
1

31:11.700 --> 31:12.500
第一个函数

31:12.500 --> 31:15.300
我们输出div 1

31:15.300 --> 31:16.000
就是补货

31:17.100 --> 31:18.500
这是补货阶段的事件

31:18.500 --> 31:19.800
好再来个函数

31:19.800 --> 31:21.100
handle 2

31:21.100 --> 31:22.500
这是冒泡阶段的事件

31:23.500 --> 31:24.600
冒泡

31:24.600 --> 31:25.000
好

31:25.000 --> 31:26.300
来看一下

31:26.300 --> 31:28.000
div handler 1

31:28.000 --> 31:29.000
然后呢

31:29.000 --> 31:30.200
给他进行配置

31:30.200 --> 31:31.300
配置的时候呢

31:31.300 --> 31:33.400
我们使用就补货嘛

31:33.400 --> 31:34.100
不用对象配置的

31:34.100 --> 31:35.000
用这个配置

31:35.000 --> 31:36.500
当然也可以直接用对象

31:36.500 --> 31:38.100
对象里面写capture

31:38.100 --> 31:39.300
都是一样的效果

31:39.300 --> 31:41.000
只对象了他可以多一个配置

31:41.000 --> 31:42.200
就是once

31:42.200 --> 31:44.000
可以多这么一个配置

31:44.000 --> 31:44.800
不去

31:44.800 --> 31:46.800
补货阶段运行这个事件

31:46.800 --> 31:47.000
好

31:47.000 --> 31:48.200
然后再来啊

31:48.200 --> 31:48.800
再来

31:48.800 --> 31:49.400
click

31:49.400 --> 31:52.000
div handler 2

31:52.000 --> 31:52.600
这里呢

31:52.600 --> 31:53.100
capture

31:53.100 --> 31:54.500
给他设置为force

31:54.500 --> 31:55.300
当然就可以不写了

31:55.300 --> 31:55.600
对吧

31:55.600 --> 31:57.700
capture为force就可以不写了

31:57.700 --> 31:58.100
好

31:58.100 --> 31:58.600
看一下啊

32:00.400 --> 32:00.900
点击

32:00.900 --> 32:01.700
你看

32:01.700 --> 32:02.600
是不是div补货

32:02.600 --> 32:03.300
div冒泡

32:03.300 --> 32:04.300
跟之前是一样的

32:04.300 --> 32:04.900
对吧

32:04.900 --> 32:05.100
好

32:05.100 --> 32:06.300
接着我们看移除

32:06.300 --> 32:08.100
移除这里也可以写配置

32:08.100 --> 32:09.200
也可以写配置

32:09.200 --> 32:10.600
比方说我们移除了两个按钮

32:10.600 --> 32:11.000
对吧

32:11.000 --> 32:12.600
两个按钮可以移除掉了

32:12.600 --> 32:13.300
啊

32:13.300 --> 32:14.200
看着啊

32:14.200 --> 32:15.500
点击啊

32:16.600 --> 32:17.600
哎

32:17.600 --> 32:18.600
刷新啊

32:18.600 --> 32:20.100
因为我之前只写了一个

32:20.100 --> 32:21.100
只触发一次对吧

32:21.100 --> 32:21.400
好

32:21.400 --> 32:23.100
移除点击一的事件

32:23.100 --> 32:23.800
好移除啊

32:23.800 --> 32:25.200
当然他也会触发div啊

32:25.200 --> 32:26.500
也会触发div

32:26.500 --> 32:26.700
好

32:26.700 --> 32:28.300
然后我们再点击div1

32:28.300 --> 32:29.700
再点点击按钮

32:30.800 --> 32:31.200
你看

32:32.300 --> 32:33.500
点点击按钮的时候

32:33.500 --> 32:34.700
Handle 2

32:34.700 --> 32:36.800
没Handle 2没移除掉

32:36.800 --> 32:37.400
能看一下啊

32:38.400 --> 32:41.000
按钮的Handle 2没有移除掉

32:42.000 --> 32:42.200
哎

32:42.200 --> 32:42.800
怎么回事

32:43.400 --> 32:44.100
再点击

32:45.900 --> 32:47.400
比TN2还在运行

32:48.100 --> 32:48.300
哎

32:48.300 --> 32:48.900
这是怎么回事

32:48.900 --> 32:49.600
我看一下啊

32:51.400 --> 32:52.000
啊

32:52.000 --> 32:53.000
这里是

32:54.600 --> 32:55.600
Handle 1

32:55.600 --> 32:57.400
他运行一次就没了

32:57.400 --> 32:59.000
然后了Handle 2

32:59.600 --> 33:00.900
Handle 2在上面

33:01.800 --> 33:02.000
啊

33:02.000 --> 33:02.800
这里呢

33:02.800 --> 33:04.800
把这个Handle 2给他移除掉

33:04.800 --> 33:05.000
好

33:05.000 --> 33:06.700
这个时候咱们打个断点看一下吧

33:07.400 --> 33:08.800
没有在介石里边

33:08.800 --> 33:09.800
没法打断点

33:11.000 --> 33:12.300
应该是没保存吧

33:12.300 --> 33:13.400
是不是没保存吗

33:13.400 --> 33:13.800
移除

33:15.200 --> 33:15.600
OK

33:15.600 --> 33:16.900
刚才没保存

33:16.900 --> 33:17.500
没保存

33:17.500 --> 33:18.000
你看

33:18.000 --> 33:19.200
再点击按钮的时候呢

33:19.200 --> 33:20.900
按钮是不是没有触发他的时间了

33:20.900 --> 33:22.200
他的时间已经被移除掉了

33:22.200 --> 33:23.400
但是他的

33:23.400 --> 33:24.800
副元素是不是还在触发

33:24.800 --> 33:25.600
对吧

33:25.600 --> 33:27.100
副元素还在触发啊

33:27.100 --> 33:28.000
因为他有冒泡嘛

33:28.000 --> 33:29.300
有补货有冒泡对吧

33:29.300 --> 33:30.200
他自己没有时间

33:30.200 --> 33:32.000
但是他副元素是有时间的

33:32.000 --> 33:32.800
没问题吧

33:32.800 --> 33:33.700
这个没问题

33:33.700 --> 33:33.800
好

33:33.800 --> 33:34.400
那么现在呢

33:34.400 --> 33:37.200
我们先想继续移除时间

33:37.300 --> 33:38.800
我现在想移除啥了

33:38.800 --> 33:40.200
移除的是

33:40.200 --> 33:42.000
移除的是

33:42.000 --> 33:47.500
这样子DIV Remove Event Handle Listener

33:47.500 --> 33:48.100
移除什么呢

33:48.100 --> 33:49.300
移除点击时间

33:49.300 --> 33:50.600
同样的把这个什么

33:50.600 --> 33:51.500
Handle

33:51.500 --> 33:54.800
DIV Handle 1喘进去

33:54.800 --> 33:55.900
这样子是不是可以移除

33:55.900 --> 33:57.900
这个DIV的Handle 1这个时间

33:57.900 --> 34:00.300
但是这里实际上是有问题的

34:00.300 --> 34:01.100
为啥有问题呢

34:01.100 --> 34:02.100
有啥问题呢

34:02.100 --> 34:03.700
因为这个Handle 1

34:03.700 --> 34:06.400
他是注册的补货阶段的时间

34:06.500 --> 34:08.500
是补货阶段的时间

34:08.500 --> 34:10.000
你这里移除的时候

34:10.000 --> 34:11.600
他默认情况下

34:11.600 --> 34:13.500
移除的是冒泡阶段的

34:13.500 --> 34:15.800
根本就不看补货阶段

34:15.800 --> 34:18.000
那如果你想移除补货阶段的时间

34:18.000 --> 34:18.800
怎么办呢

34:18.800 --> 34:20.400
你得稍微处理一下

34:20.400 --> 34:21.500
你不要再看一下

34:21.500 --> 34:22.800
能不能移除啊

34:22.800 --> 34:23.200
点击

34:23.200 --> 34:24.800
你看补货没问题吧

34:24.800 --> 34:25.700
点击移除

34:25.700 --> 34:27.000
移除过后呢

34:27.000 --> 34:28.100
当然这里会冒泡

34:28.100 --> 34:28.800
这里会补货

34:28.800 --> 34:29.400
也会冒泡

34:29.400 --> 34:30.300
这里也没关系

34:30.300 --> 34:32.500
然后我们再来点击

34:32.500 --> 34:33.500
是不是还是一样的

34:33.500 --> 34:34.200
哪有移除了

34:34.200 --> 34:35.500
没有移除对吧

34:35.500 --> 34:38.100
如果你想移除补货阶段的时间的话

34:38.100 --> 34:39.200
你得使用配置

34:39.200 --> 34:40.100
后面写个处

34:40.100 --> 34:41.600
跟前面是一样的

34:41.600 --> 34:42.600
跟前面是一样的

34:42.600 --> 34:44.200
你要移除了补货阶段的时间

34:44.200 --> 34:45.200
你要写个处

34:45.200 --> 34:46.400
是否是补货阶段

34:46.400 --> 34:48.200
或者写个对象的进行配置

34:48.200 --> 34:49.400
Capture

34:49.400 --> 34:50.000
把设备处

34:51.400 --> 34:53.000
跟前面是一样的

34:53.000 --> 34:53.600
这种写法

34:53.600 --> 34:55.000
跟直接写个处都是一样的

34:56.600 --> 34:57.700
都是一样的

34:57.700 --> 34:58.200
好 保存

34:59.300 --> 35:00.300
看一下啊

35:00.300 --> 35:01.400
点击

35:01.400 --> 35:01.600
好

35:01.600 --> 35:02.800
现在再移除

35:02.800 --> 35:03.400
移除的时候

35:03.400 --> 35:04.700
由于它是先补货

35:04.700 --> 35:06.300
它补货的时候还没把移除掉

35:06.300 --> 35:08.400
所以说这里还会运行一次

35:08.400 --> 35:11.400
因为它的流程是先运行DIV的补货时间

35:11.400 --> 35:12.600
它就输出这个结果了

35:12.600 --> 35:14.600
然后再运行这个移除按钮的时间

35:14.600 --> 35:17.000
然后这个时候再把它移除掉

35:17.000 --> 35:18.700
然后再运行冒泡

35:18.700 --> 35:18.900
好

35:18.900 --> 35:20.500
然后我们现在再点击

35:20.500 --> 35:21.100
点击按钮

35:21.100 --> 35:21.500
一看

35:21.500 --> 35:22.100
是不是只有冒泡

35:22.100 --> 35:23.300
没有补货了

35:23.300 --> 35:24.200
这个大家

35:24.200 --> 35:25.600
虽然我们平时用的很少

35:25.600 --> 35:26.800
不太会这样子用

35:26.800 --> 35:27.600
了解一下

35:27.600 --> 35:28.900
主要是怕面试题

35:28.900 --> 35:30.000
主要是怕遇到面试题

35:31.600 --> 35:32.400
没啥了

35:32.400 --> 35:33.600
就没啥了

35:33.600 --> 35:34.800
这就是事件注册

35:34.800 --> 35:36.400
事件注册我就彻底讲完了

35:36.400 --> 35:38.300
彻底彻彻底底讲完了

35:38.300 --> 35:40.000
后边所有的事件

35:40.000 --> 35:42.000
我要么就是用动物铃的方式

35:42.000 --> 35:43.400
不说动物铃就不能用了

35:43.400 --> 35:44.000
可以用的

35:44.000 --> 35:45.200
可以用的

35:45.200 --> 35:48.000
要么就是我要用动物2的方式

35:48.000 --> 35:49.200
无非就是这两种

35:50.400 --> 35:52.500
所以说事件注册就这么些姿势

35:52.500 --> 35:53.600
把它梳理一下

35:53.600 --> 35:54.300
没有什么作业

35:54.300 --> 35:56.400
因为这块比较简单

35:56.400 --> 35:57.400
把它梳理一下

