WEBVTT

00:00.000 --> 00:16.260
这节课呢 咱们对本章的知识呢 做一个补充

00:16.900 --> 00:20.940
啊 有些知识呢 我前面没有讲到 因为前面呢 分门别类的一些

00:21.580 --> 00:27.380
课程呢 我也不知道往哪个地方加 所以说干脆拿一些课对本章的有些移动的知识啊 做一个补充

00:28.180 --> 00:35.460
啊 说到这就是我们这节课啊 就是本章的最后节课了 后边呢 还有一些扩展课程 大家有兴趣的话 可以看一下

00:35.940 --> 00:44.100
本章的作业呢 不算很多啊 基本上没有啥作业啊 我之前反复的强调 作业的重要性对吧 练习的重要性 作业的重要性

00:44.740 --> 00:47.060
项目的重要性 但是呢 本章没有什么作业

00:47.780 --> 00:53.580
而下一张啊 下一张咱们流程控制内一块作业就会变得越来越多了啊 就越来越多了

00:53.940 --> 00:58.100
所以下一张呢 才是我们前期部分学习的重点啊 本章呢

00:58.660 --> 01:06.420
这么重要呢 它非常重要啊 但是本章的东西呢 比较简单 就是有些细节呢 比较杂 这些细节呢 大家不用太在意 也不用去背

01:07.060 --> 01:10.580
我们以后呢 要面试的时候呢 回过头来复习一下就完事了

01:11.620 --> 01:14.820
好 补充知识第一个啊 是关于模板制服串

01:15.540 --> 01:21.780
就咱们之前的说制服串啊 他有三种协法对吧 一个是两个单一号 两个单一号

01:22.500 --> 01:26.180
这是第种协法 另外一种协法呢 是两个双一号 这种协法

01:26.900 --> 01:30.100
还有一种协法呢 是两个飘 对吧 两个飘

01:30.980 --> 01:33.540
我们之前呢 都没有说到这个这种协法

01:34.100 --> 01:37.540
用的制服串协法呢 都是两个单一号 两个双一号 都没有用这种协法

01:37.940 --> 01:42.740
这种协法 他有什么样的一个好处呢 他跟前面的制服串了一个最大的区别就是

01:43.060 --> 01:47.940
他在做拼接的时候 非常非常简单啊 非常非常简单

01:48.420 --> 01:50.420
好 我们来看一下啊 他具体该怎么写

01:51.780 --> 01:55.860
这里呢 我们新建个一面啊 模板制服串

01:58.370 --> 02:04.770
好比 比方说啊 比方说 我们在有有这么一些变量啊 有这么一些变量

02:06.690 --> 02:08.530
或者是一个对象吧啊 或者是一个对象

02:09.170 --> 02:17.090
一个用户对象啊 用户对象里边呢 我们写了这么一些东西啊 比方说啊 年龄 用户的年龄

02:17.490 --> 02:26.610
多少了 18岁啊 用户的年龄 比方说成哥啊 用户的就是性别间谍啊 比方说难

02:27.490 --> 02:33.490
好 我们写了这么一个用户对象 对吧 接下来我们要输出这么一个东西啊 输出这么一个东西

02:34.370 --> 02:40.210
输出啊 输出什么呢 就是说我叫什么什么什么

02:40.690 --> 02:45.250
然后今年多少岁 多少岁了 然后呢

02:46.690 --> 02:51.410
性别式什么什么 好 我们要输出这么一种格式的制服串

02:52.130 --> 02:59.970
好 输出的时候呢 我就要把这些位置的东西呢 替换成为啥 替换成为用户的相应的属性 对吧 替换成user

03:01.010 --> 03:06.930
name user这个地方的user.ag这个地方的user.gender 对吧 我们要替换掉

03:07.410 --> 03:15.170
如果按照以前的做法呢 我们可能会这样子写啊 我们就直接输出吧啊 输出的时候呢 我们要用制服串拼接对吧 我叫

03:16.290 --> 03:23.330
拼接拼接什么user.name user.name 你看这个这个也是个表达式啊 不要不要说看不懂啊

03:23.650 --> 03:30.450
这个也是个表达式 以前呢我们这里是直接写的或者是用变量 那么现在用属性是不是一样的对吧 我们之前说过啊

03:30.930 --> 03:36.610
属性的使用呢 跟变量差不多啊 你它能够出现在任何需要数据的地方都可以出现

03:37.010 --> 03:43.970
啊 你拼接就完说了 对吧 好 拼接完了它 是不是我们继续可以拼接 对吧 继续可以拼接 拼接啥呢

03:44.450 --> 03:53.890
啊 我叫什么兜号对吧 兜号 然后今年啊 今年多少岁了 然后拼接user.ag 对吧

03:54.450 --> 04:00.450
再拼接水呢 然后兜号 然后性别式啊

04:00.770 --> 04:07.570
性别式 是不是又要拼接拼接user.gender 你看这个写的是不是很繁琐

04:08.050 --> 04:13.090
虽然我们这里只有三块东西需要拼接 对吧 三块东西 那如果以后呢 我们

04:13.650 --> 04:18.930
对象足够复杂或者是变量足够多 我们可能要拼接很多东西 比方说呢这里呢 有可能

04:19.330 --> 04:23.410
有可能还要经过运算 对吧 那么比方说啊 我们还要写是一个东西

04:24.130 --> 04:32.610
是否成连啊 目前已成连了啊 可以用了 对吧 已成连了啊 已成连或者是

04:33.250 --> 04:39.490
这里有可能还会写未成连啊 未成连啊 未成连已成连 这里是不是要用个三目一算福 对吧

04:39.810 --> 04:44.370
判断一下它的年龄是不是大于等于18 大于等于18的话 我就拼接已成连

04:45.810 --> 04:52.450
否则的话 我就拼接未成连 对吧 好 我们如果还要做这件事情的话 是不是还要拼接 哇 这个拼接就很长了 对吧

04:52.850 --> 04:59.250
有的时候呢 我们可以换个行啊 换个行 代码里边换行没事啊 没事 再运算服务位置可以换行的啊

05:00.530 --> 05:05.970
呃 拼接的就是性别之后呢 我们继续拼接啊 继续拼接 性别呢 完了过后是兜号

05:06.210 --> 05:09.730
你看 拼接到这儿了 对吧 拼接到这儿 兜号 然后呢 目前

05:10.770 --> 05:17.250
好 目前到底是已成连还是未成连 是不是又要拼接个表达式啊 拼接一块表达式

05:17.650 --> 05:23.330
这个表达式呢 我们最好用那个扩号把扩起来啊 最好用一个扩号把扩起来 给他提高优先级

05:24.210 --> 05:28.770
提高优先级 好 不然的话 他认为前面这一坨啊 前面这一坨先算

05:29.570 --> 05:35.170
啊 我们让他里边的这个扩号里边的先算一下 好 这个扩号里边写上了写个三目运算服

05:35.730 --> 05:38.450
拥护的年龄是不是大于等于18呢

05:39.410 --> 05:45.330
如果大于等于18啊 大于等于18 然后怎么样呢 我就给他一个制补串啊 返回一个制补串

05:45.730 --> 05:49.570
已成连啊 已成连好 冒号未成连

05:50.530 --> 05:55.410
能看到吗 好 看一下啊 看一下 我在这里换个好 看一下

05:56.610 --> 06:04.610
好 目前拼接这一块 拼接这一块 那如果你不加扩号的话会成什么样子呢 不加扩号的话 他会这样子认为

06:05.810 --> 06:07.170
这是第一个表达式

06:08.290 --> 06:10.050
这是第一个表 这是第一个表达式

06:10.770 --> 06:14.290
好 第一个表达式的判定结果为真的话得到这个

06:14.770 --> 06:20.530
然后得到这个 也就是说整个表达式他要么只他只反会三个字要么已成连要么未成连

06:21.010 --> 06:27.490
他会这样子来算 肯定不符合我们的要求 我们是前边拼接 拼接完了过到这 到这

06:28.370 --> 06:34.690
把这个表达式的结果算出来啊 把这一个表达式的结果算出来 然后继续把这个结果

06:35.170 --> 06:39.730
把这个表达式的结果继续拼接到这个制补串后边啊 我们要做这么一个例子

06:40.370 --> 06:44.530
好 你看现在的拼接是不是很繁琐 看上去呢也不好阅读啊 很难阅读

06:45.410 --> 06:49.570
有了模板制服错过后了 我们可以用下面的那种方式 看着啊

06:50.290 --> 06:53.890
有了模板制服错过后 我们下面那种方式写起来就非常舒服了 看着

06:54.850 --> 06:59.570
两个飘 两个飘 那么这里边我们直接把这个的话直接复制过来

07:01.090 --> 07:06.210
好 我叫啥啥啥 这里说叫拼接 对吧 模板制服出里面拼接的话

07:06.930 --> 07:13.170
不不需要你使用加号啊 你不需要这样子写啊 这里用两个加号来拼接 不需要啊 不需要你这样子写

07:13.810 --> 07:18.290
好 你怎么办呢 你直接在制服串里边写就完事了 直接直接在这里写

07:19.090 --> 07:20.770
有一个特殊的符号就是多了

07:21.890 --> 07:26.850
在模板制服串必须要是两个飘啊 必须要是两个飘的符号才是模板制服串

07:27.330 --> 07:31.810
好 在模板制服串里边呢 你可以写上一个多了两个大括号

07:32.210 --> 07:40.130
这两个大括号里边的内容呢 你就可以写借识表达式 直接写借识表达式 比方说我叫优雅典联

07:40.930 --> 07:47.970
什么意思呢 他就会把这个表达式的值 把这个表达式的值直接放到

07:49.490 --> 07:50.050
这个位置

07:51.330 --> 07:55.730
直接替换掉这个位置 那么是不是用户的新名跑这来了 对吧

07:56.450 --> 07:58.930
一个特殊的符号啊 多了两个大括号

07:59.330 --> 08:03.490
多了两个大括号 这个特殊的符号里边写上一个借识表达式

08:04.530 --> 08:10.370
他会把这个借识表达式的值呢 直接替换掉这一部分啊 就玩直接完成了 拼接了

08:10.850 --> 08:16.690
这样子一来了 拼接起来了 这个整个制服串呢 看上去呢 就非常舒服 就没有乱七八糟的假号一大堆

08:17.410 --> 08:22.530
好 比方说这里 今年多少岁了 今年 user.a 几岁了

08:23.490 --> 08:27.250
好 性别是啥呢 性别 user.gender

08:27.890 --> 08:28.290
性别

08:29.330 --> 08:33.970
好 接下来这边 目前到底是以成年还是未成年呢 多了

08:34.770 --> 08:40.690
好 我们把这个复制过来啊 我直接再重写一次吧 user.age大于等于18

08:41.170 --> 08:44.370
如果大于等于18的话 得到的结果是以成年

08:45.730 --> 08:47.490
否则的话是未成年

08:49.250 --> 08:49.970
好 你看一下

08:51.170 --> 08:52.930
好 看一下 所以写完了

08:53.650 --> 08:59.810
我们这一部分啊 你看这个大国号里边这一部分 这一部分是借识表达式 看到没

09:00.210 --> 09:07.170
是借识表达式 他会把这个表达式的结果把这个表达式的结果替换掉相应的位置

09:08.290 --> 09:14.800
好 运行 看一下啊 f12

09:15.840 --> 09:16.240
刷新

09:17.280 --> 09:25.200
结果是一样的啊 两种写法结果是一样的都可以 只是下边这种写法呢 看上去了更加舒服一点 更加舒服一点

09:25.760 --> 09:34.640
啊 你看上面的写法呢很乱 对吧 很乱很乱 你不太清楚这个写出来是什么玩意儿 但是下面这个写法呢就看得很清楚了 就是这些地方呢可以被替换掉

09:35.040 --> 09:35.920
啊 可以被替换的

09:36.560 --> 09:45.280
明白这意思吧 ok啊 这是模板制服创 我补充一下 那么之后呢 我可能有的时候凭解比较多的时候我就会直接使用模板制服创了 你要能看得懂

09:46.400 --> 09:48.640
好 这是第一个我要补充的啊 模板制服创

09:50.080 --> 09:50.720
好 第二个

09:51.680 --> 09:53.040
内型转换

09:53.760 --> 09:54.800
不会影响

09:55.520 --> 09:56.560
原本的数据

09:57.520 --> 10:01.680
这啥意思呢 这是大家要注意的一个点啊 要注意的一个点啊

10:02.400 --> 10:10.080
如果你不是你学到后边的话 我都不用说了啊 这个是显而易见的 但是前边的初学者呢 可能会忽略到这个点啊 有些

10:10.400 --> 10:12.720
你少不分同学啊 可能会有这么一个疑惑

10:13.200 --> 10:19.360
就关于内型转换的 因为我们前面说过啊 就有的时候呢 他会自动的去完成一些内型的转换

10:20.080 --> 10:22.000
好 这里我们看一下 看一下一个例子啊

10:23.440 --> 10:24.480
好 这里呢 比方说

10:26.240 --> 10:29.920
嗯 有一个变量啊 有个变量x

10:31.200 --> 10:34.000
为一个制服创吧 好吧 为一个制服创

10:34.480 --> 10:35.840
好 制服创一

10:37.280 --> 10:43.440
然后呢 我们再有一个表了 有一个表拿式啊 他进行运算 x呢

10:44.320 --> 10:48.000
乘以2啊 x乘以2

10:49.440 --> 10:55.200
你看 这是一个算数运算 对吧 算数运算 两边都是原始内形

10:55.760 --> 11:01.600
算数运算除了加号之外 两边是原始内形怎么办 是不是要把制服创转换成什么

11:02.160 --> 11:05.920
转换成number啊 转换成number来进行运算

11:06.560 --> 11:12.720
好 转换之后呢 我们再来输出啊 y y 的值是不是很简单 这个没什么好说的啊

11:13.120 --> 11:18.560
把x呢 会转换成什么 1 对吧 1乘以2 那么 y 的值就是2啊 这个没什么好说的

11:19.200 --> 11:25.360
现在关键的问题是啥子啊 是x 的值是多少 x 的内形又变成了啥了

11:26.320 --> 11:33.920
啊 有些同学呢 可能会有这样的一个疑惑啊 x 的内形和x 的值他会不会变化呢 咱们来看一下呗

11:36.370 --> 11:41.650
x 的内值是1 内形呢 仍然是制服创 他不会发生任何变化

11:42.130 --> 11:49.170
不会发生任何变化 这就是我要提醒大家的啊 我们说的内形转换只是在运算的时候

11:49.570 --> 11:56.210
把这个表达式运算出来啊 这也是个表达式 把这个表达式运算出来啊 运算出来本来是一个制服创的

11:56.610 --> 12:01.250
把这个制服创转换成1来参与运算 他主要是为了参与运算的

12:01.650 --> 12:05.490
他并不会改变他原来的值和原来的内形

12:06.130 --> 12:14.690
他并不会改变的 表示原来的是制服创 这个变量原来是制服创 他不能说他参与完运算过后 他就内形就就变了 他不会变的

12:15.330 --> 12:20.530
啊 变化的是什么呢 变化的只是参与运算的时候 你可以这样理解 他临时变一下啊

12:20.930 --> 12:27.730
他也不会变这个变量的内形 他就是酸的时候 拿数据的时候 把那个数据本身拿出来的东西

12:28.290 --> 12:32.690
来变一下 他不会影响到这个变量里边的啊 不会影响到变量里边的

12:33.410 --> 12:35.410
你可以认为这样子 你可以这样子想

12:36.770 --> 12:39.570
你可以这样子想呗 这样子

12:40.610 --> 12:49.490
这个x的值呢 他是他里边保存的是什么 是一个制服创1 对吧 一个制服创1 好 咱们把他这个

12:49.970 --> 12:55.810
制服创1拿出来 拿出来 这个拿出来的东西 他就不是以前他里边的东西了

12:56.450 --> 12:59.570
相当于是复制粘贴出来 把他复制粘贴出来

12:59.890 --> 13:03.810
然后呢 把这个东西来进行内形转换 转换成b

13:04.210 --> 13:10.290
然后来乘1 2 你这样子理解啊 x里边的保存东西是不会变化的 不会对x产生任何影响

13:11.010 --> 13:14.050
好 就是大家要注意的一个点啊 是第二个点

13:15.570 --> 13:18.210
好 下面这个点呢 是补充一些运算符啊

13:19.090 --> 13:24.530
叫做复合的 因为这个地方呢 也没有官方的教法啊 所以我这里呢把它叫做

13:25.250 --> 13:26.770
复合的复制运算符

13:27.330 --> 13:30.450
复制运算符呢 我们都学过 就是个等号 这个没什么好说的

13:31.250 --> 13:35.010
但是除了这个复制运算符之外呢 其实还有一些复制运算符

13:35.570 --> 13:41.330
就是加等号 减等号 除等号

13:42.130 --> 13:45.090
还有乘等号 还有什么呢 求予等号

13:45.810 --> 13:50.050
还有这么一些运算符 还有还有这个求密 两个乘号等号

13:51.250 --> 13:56.210
这些复制 这些也是复制运算符啊 他表示什么意思呢 表示什么意思呢 我这里

13:56.770 --> 13:59.010
新建个文件啊 给他举个例子 复合的

14:00.290 --> 14:02.450
复合的复制运算符

14:03.890 --> 14:04.450
举个例子啊

14:06.530 --> 14:09.810
好 比方说呢 我们这里呢 写上一个

14:11.010 --> 14:13.490
写上一个呃 变量啊 变量

14:14.610 --> 14:19.250
好 我下面这样子写啊 x 加等于3 他表示什么意思呢

14:19.970 --> 14:21.010
等同于

14:21.970 --> 14:25.090
等同于啥呢 等同于x

14:26.050 --> 14:30.850
加x等于 就是给x复制 复制为啥呢 x

14:31.970 --> 14:34.130
加上啊 加上3

14:34.930 --> 14:36.690
把这个3扩起来啊 扩起来

14:38.290 --> 14:44.130
为什么要扩起来了 其实现在不扩也没事啊 一样的 以后呢 我们可以看到另外一个例子 他必须要扩起来啊

14:44.850 --> 14:49.410
好 等同于x加上3 能看懂吧 相当于是把x呢 自征3

14:50.130 --> 14:59.730
自征3再给x复制 复制啊 再给x复制啊 输出这个x 那么自征3过后是多少 是不是4 对吧 就是4 好看一下啊

15:01.570 --> 15:04.530
啊 得到结果是4 很简单啊 非常非常简单

15:05.330 --> 15:07.650
好 再比方说呢 我们可以

15:08.450 --> 15:09.090
x呢

15:09.970 --> 15:12.770
呃 乘等于啊 乘等于

15:13.250 --> 15:14.210
1加2

15:15.010 --> 15:17.170
这个等同于啥呢 他等同于

15:19.010 --> 15:19.890
等同于

15:21.570 --> 15:22.050
啊 这样子

15:23.810 --> 15:26.210
呃 从2 这里是为2吧 为2

15:26.610 --> 15:33.090
等同于x 给x复制 复制为x 乘亿 把后边这一坨扩起来

15:33.410 --> 15:34.050
1加2

15:35.090 --> 15:37.810
等同于x 乘亿1加2

15:38.370 --> 15:45.090
那么相当于是多少呢 x 的指示2 对吧 2乘亿3啊 2乘亿3等于6啊 等于6

15:45.410 --> 15:48.610
把6呢 重新复制给x 那么x呢 结果就是6

15:49.410 --> 15:49.970
啊 就是6

15:51.170 --> 15:53.410
好吧 好看一下啊 熊村

15:54.050 --> 15:54.770
得到结果是6

15:55.890 --> 15:59.730
啊 所以说 为什么后边这一块要扩起来了 你要考虑到优先级的问题啊

15:59.970 --> 16:04.770
他相当于是把后边这个表达式 扩起来啊 把x放前边进行运算

16:05.650 --> 16:07.010
好吧 这是关于这一块啊

16:07.730 --> 16:11.250
啊 然后再来看一个啊 再来看一个 x 呢

16:12.130 --> 16:15.410
乘等于啊 乘等于把这个注释了啊

16:17.170 --> 16:21.890
乘等于x 乘亿啊 x

16:23.570 --> 16:25.570
乘等于x 加加

16:26.530 --> 16:29.010
啊 加上 2

16:30.610 --> 16:35.570
好 这个东西怎么算呢 这个东西呢 你可以认为等同于 等同于啥了

16:35.970 --> 16:39.970
x 等于 x 乘亿 x 加加

16:40.610 --> 16:45.010
加2 你可以认为是这样子 好 你把这个表达式肯定能算出来 对吧 怎么算

16:45.810 --> 16:49.890
啊 我们再来一次啊 这个例子我们举了很多次了啊 再来一次这个这个表达式

16:50.370 --> 16:52.370
x 的值是多少 一开始的值

16:53.010 --> 16:56.210
x 里边保存的是2啊 保存的是2 好来呗

16:56.610 --> 17:00.770
这个地方是不是直接拿出来 2 乘亿多少呢 乘亿 x

17:01.490 --> 17:03.170
加加啊 x 加加

17:03.890 --> 17:07.650
好 x 加加 那么 字争 1 3 那么这里是不是2

17:08.130 --> 17:11.970
对吧 好 那么这个是多少 2 加 2 乘亿 2 加 2

17:12.610 --> 17:15.490
这个东西就是 4 等于 8 2 乘亿 8

17:16.050 --> 17:19.250
2 乘亿 4 等于 8 8 重新够复制回去 它就变成 8 了

17:19.730 --> 17:22.770
最重要重新复制回去啊 看一下 保存

17:23.570 --> 17:25.570
结果就是 8

17:25.810 --> 17:27.890
你要知道 你把它换成等效的格式 你就明白了

17:28.450 --> 17:32.450
当然了 什么 除等于 求予等于 是不是一样的

17:32.930 --> 17:35.250
又啥区别呢 是不是一样的 对吧

17:35.570 --> 17:38.210
这是 复合的 复制运算符

17:39.170 --> 17:43.570
也是蛮常见的啊 有的时候呢 我们通常用它来做一些制服刷拼接

17:44.130 --> 17:46.370
通常用它来做一些制服刷拼接

17:46.850 --> 17:52.290
就比方说吧 之前有一个模板制服刷 对吧 我们再来一次啊 我们用另外一种方式来做

17:53.330 --> 17:57.490
啊 比方说啊 我们可以用这种写法分成几几条一句来写

17:57.970 --> 18:01.170
啊 分成几条一句来写 啊 比方说 我们一个 result

18:01.410 --> 18:02.050
啊 result

18:03.090 --> 18:03.970
或者就 x 吧

18:05.250 --> 18:05.650
x

18:07.650 --> 18:12.290
啊 也可以用啊 还是好好命名吧 result 啊 表示的是拼接的结果

18:12.770 --> 18:14.770
好 拼接的结果 我们可以这样来拼接

18:15.410 --> 18:16.930
首先呢 我叫

18:17.890 --> 18:23.410
啊 先有这么两个文字 然后呢 再进行拼接 result 加等号

18:24.210 --> 18:27.570
我叫啥呢 我叫 user.name

18:27.970 --> 18:29.010
对吧 user.name

18:29.490 --> 18:34.130
那么这个单码就相当于是什么了 result 等于什么了 result 加上啊

18:34.290 --> 18:37.570
你看它是制服刷吧 对吧 它是制服刷 后面是不是全是拼接

18:37.810 --> 18:39.010
对吧 后面肯定是拼接

18:39.330 --> 18:43.010
只要加号运算符一端是制服刷 它一定是制服刷拼接

18:43.730 --> 18:46.530
好 我叫什么什么什么啊

18:47.410 --> 18:50.370
然后计算 继续拼接 result 加等于

18:51.330 --> 18:52.370
好 拼接

18:52.370 --> 18:52.930
doh

18:53.810 --> 18:57.730
今年 今年 多少税了 result 又拼接

18:59.410 --> 19:01.250
多少税了 user.age

19:02.530 --> 19:06.450
你看 类似于啊 就是继续写啊 后面就不写了 后面不写了

19:06.770 --> 19:09.170
也可以用这种方式来进行拼接 也可以

19:11.580 --> 19:12.060
没问题吧

19:12.940 --> 19:16.860
这是关于这个啊 复合的复制运算符 非常非常简单

19:17.980 --> 19:19.420
好 下面这个啊 下面这个

19:20.220 --> 19:21.260
void运算符

19:21.980 --> 19:24.460
void运算符 这个运算符呢 我们以后呢

19:25.340 --> 19:28.860
基本上不太会用啊 但是我还是讲一讲吧 它也是一个运算符

19:28.940 --> 19:29.900
所以说我还是讲一讲

19:30.860 --> 19:34.780
void运算符 它是这样的写的啊 它是一个一元运算符

19:35.900 --> 19:36.940
一元运算符

19:37.740 --> 19:40.380
它的写法啊 写法是有两种写法

19:40.780 --> 19:43.500
一种是普通写法

19:44.380 --> 19:45.980
一种是函数写法

19:46.620 --> 19:49.020
函数写法 函数呢 我们现在还没讲 但是我们知道

19:49.100 --> 19:52.700
它怎么写就完事了 普通写法呢 就是这样写的

19:56.700 --> 19:59.580
这样写的啊 void操作数

20:01.100 --> 20:02.860
函数写法呢 是这样写的

20:06.130 --> 20:07.890
或者叫表达式吧 表达式

20:08.610 --> 20:09.170
表达式

20:09.890 --> 20:12.210
void呢 两个小括号 两个小括号

20:13.890 --> 20:16.770
这个是表达式啊 表达式

20:16.770 --> 20:19.570
这有点类似于啥呢 有点类似于

20:19.650 --> 20:22.210
我们之前学过的那个Type 5 对吧

20:22.610 --> 20:24.690
Type 5的写法是不是有两种 对吧

20:24.690 --> 20:27.890
Type 5后面写表达式得到了表达式的类型

20:28.530 --> 20:32.210
Type 5的还一种写法呢 就是两个小括号 就是函数式的那种写法

20:32.210 --> 20:34.130
里边写表达式得到表达式的类型

20:35.250 --> 20:36.530
那我整理我就说一下吧

20:36.930 --> 20:41.170
Type 5也好 void也好 它们的优先级运算比较高

20:41.170 --> 20:42.690
其实Type 5也是个运算符

20:43.490 --> 20:45.410
Type 5也是个运算符

20:45.410 --> 20:48.050
它是得到某一个表达式的类型 我们之前写过的

20:49.010 --> 20:51.810
Type 5 只把这里变成Type 5而已

20:52.930 --> 20:57.970
它有两种写法 但是这两个表达 这两个运算符它的优先级都比较高

20:57.970 --> 21:00.850
所以说呢 我建议大家用下面这种写法

21:01.890 --> 21:03.330
用下面这种写法好一点

21:03.330 --> 21:06.530
因为比方说Type 5我们之前写的时候可能会这样子写

21:07.010 --> 21:09.570
可能会这样子写 我们在浏览器里边看一下吧

21:10.130 --> 21:12.770
Type 1加上2

21:13.650 --> 21:15.250
1加上2 你看得到的结果

21:15.890 --> 21:19.970
它本来应该是number的 对吧 我们想的是把1加2的结果来取一个类型

21:20.530 --> 21:23.890
看1加2的结果是什么类型 它结果各个输出的是一个number

21:24.450 --> 21:27.810
这啥玩意儿了 这啥玩意儿了 怎么玩意儿呢

21:28.770 --> 21:32.850
就是Type 5 它是这样子算的 它先算Type 5 1

21:33.330 --> 21:35.810
把算出来的结果是个支付出来的 对吧 我们之前讲过

21:36.050 --> 21:38.690
Type 5这个运算符得到的结果

21:39.250 --> 21:42.290
这个支付出来 我想过没 我想过没啊

21:43.250 --> 21:46.450
我再讲一下吧 这个说一下就行了

21:46.930 --> 21:53.490
Type 5运算返回表达式的类型

21:54.130 --> 21:59.330
什么number啊 逊啊 不令啊 这种表达式的类型

22:00.450 --> 22:03.810
是一个支付串 返回来类型是一个支付串

22:04.370 --> 22:08.850
因为表达式类型 类型什么number 逊这些都是支付串 对吧

22:09.410 --> 22:14.320
刚才我们这里 这样子写吧 我们在这里写

22:15.920 --> 22:20.080
Type 1加2 它怎么理解的呢

22:20.400 --> 22:24.480
因为它的优先级比较高 所以说它先算这一部分

22:25.040 --> 22:28.240
算这一份得到的结果是啥 得到的结果就是一个支付串的number

22:28.720 --> 22:32.080
得到一个支付串number 好 再加上2 是不是支付串拼接

22:32.240 --> 22:36.080
于是得到了number 2 这就是为什么我们刚才得到了看到的是number 2

22:36.800 --> 22:40.080
好 所以说像Type 5这个运算符 我们最好是用这种写法

22:40.640 --> 22:43.680
这种写法 因为我们刚才那种例子 刚才那种现象呢

22:44.160 --> 22:48.480
往往是希望的是算的是什么呢 算的是1加2这个结果

22:48.800 --> 22:52.320
这个表达式结果的类型 你加个小括号

22:53.680 --> 22:56.000
ok 那么这里就是number

22:56.800 --> 23:00.160
实际上它是一个运算符啊 实际上它是一个运算符 不是函数

23:00.240 --> 23:03.360
只是它这种写法呢 相似一个函数

23:03.920 --> 23:06.240
这种写法相似一个函数加了小括号

23:07.200 --> 23:08.560
好 这是函数写法

23:08.800 --> 23:13.680
就是Type 5 那么Void也是一样啊 Void也是一样 推荐大家使用函数的写法

23:14.160 --> 23:18.560
因为这种写法呢 我们往往是算这个表达式的东西 对吧

23:18.720 --> 23:20.640
所以说最好了不要用这种写法

23:21.360 --> 23:23.040
这种写法因为它的优先级太高了

23:23.440 --> 23:26.000
好 它有什么样的作用呢 它的作用是

23:27.120 --> 23:30.240
由于它的作用这个很扯淡 所以说我们平时不咋用它

23:30.640 --> 23:34.400
它作用是什么呢 它作用是运行表达式

23:34.640 --> 23:35.760
运行表达式

23:36.720 --> 23:41.760
就表达式里边什么什么三目运算啊 有什么加渐成熟啊 运行表达式

23:42.080 --> 23:44.320
然后返回undefend

23:45.200 --> 23:47.440
它不管你表达式是啥 它都返回undefend

23:47.840 --> 23:48.480
就是Void

23:48.960 --> 23:49.440
Void

23:50.080 --> 23:52.240
Void其实啥意思呢 它里边就包含了什么

23:52.560 --> 23:54.160
包含了就是什么都没有的意思

23:54.720 --> 23:56.720
避免 避开 什么都没有

23:57.760 --> 23:58.720
返回的就是undefend

23:59.200 --> 24:01.520
所以说我们这个Void的这个表达式呢

24:01.680 --> 24:05.440
这个运算符呢 我们以后啊 在做网页开发的时候

24:06.160 --> 24:10.160
有那么一丁点地方 有那么一点点用处

24:10.640 --> 24:13.760
其他的地方呢 没啥用啊 没啥用 介绍一下就行了啊

24:14.320 --> 24:15.840
比方说啊 咱们写一个Void

24:16.240 --> 24:16.880
Void1

24:17.280 --> 24:18.080
你看undefend

24:18.400 --> 24:19.040
Void2

24:19.440 --> 24:19.920
undefend

24:20.240 --> 24:21.920
Void1加2

24:22.400 --> 24:23.040
undefend

24:23.680 --> 24:26.400
有的是面试它可能会这样考1加2

24:27.920 --> 24:28.960
为啥是NAN

24:29.520 --> 24:31.200
你能自己说出它是NAN吗

24:31.600 --> 24:32.480
为啥是NAN

24:33.440 --> 24:34.400
为啥呢 来呗

24:34.880 --> 24:36.480
Void1加2

24:37.440 --> 24:39.840
怎么算的 它的优先级比较高

24:41.520 --> 24:43.680
优先级比较高 所以说先算这一部分

24:44.560 --> 24:46.480
好 这一部分 无论它的表达式是啥

24:46.720 --> 24:47.920
算出来一定是undefend

24:48.320 --> 24:49.120
啊 一定是undefend

24:49.520 --> 24:50.800
好 undefend加2

24:51.120 --> 24:53.440
undefend要转换的数字是不是NAN

24:53.760 --> 24:55.680
对吧 undefend转换的数字是NAN

24:55.920 --> 25:01.200
那么NAN跟任何数字进行运算得到的结果都是NAN

25:02.080 --> 25:02.560
好吧

25:02.960 --> 25:03.600
好 这是

25:04.560 --> 25:06.400
这个Void运算符

25:07.040 --> 25:07.920
没啥说的

25:08.160 --> 25:09.600
就是简单了解一下就行了

25:10.720 --> 25:12.720
好 下面这个 兜号运算符

25:12.720 --> 25:14.080
这个就用得更少了

25:15.280 --> 25:16.880
基本上不咋会用

25:16.960 --> 25:20.400
反正我做项目的时候 没啥用到这个运算符

25:21.360 --> 25:22.720
这个运算符什么意思呢

25:22.960 --> 25:24.000
它是这样子写的

25:24.240 --> 25:25.040
它是这样子写的

25:27.520 --> 25:28.320
表达式

25:29.200 --> 25:30.560
表达式1

25:30.960 --> 25:31.520
兜号

25:32.320 --> 25:33.840
表达式2

25:34.480 --> 25:35.120
它是这样子写的

25:35.840 --> 25:36.320
写法

25:38.530 --> 25:38.930
写法

25:39.410 --> 25:40.690
那么它有什么作用呢

25:41.090 --> 25:43.650
运行表达式1

25:44.690 --> 25:47.490
一次运行 所谓两个表达式

25:47.490 --> 25:48.530
一次运行

25:49.090 --> 25:50.050
一次运行

25:51.090 --> 25:52.850
两个表达式

25:53.170 --> 25:55.170
然后返回

25:55.650 --> 25:56.450
返回

25:57.250 --> 25:59.250
第二个表达式

25:59.250 --> 26:00.850
然后返回表达式2

26:01.810 --> 26:02.850
表达式2的结果

26:03.250 --> 26:03.890
就完了

26:04.130 --> 26:05.410
这是兜号运算符

26:05.650 --> 26:07.010
很神奇的运算符

26:07.250 --> 26:08.210
好 咱们来看一下

26:08.530 --> 26:09.650
看一下个兜号运算符

26:11.250 --> 26:12.210
比方说

26:12.530 --> 26:14.210
我们写这么一个代码

26:15.730 --> 26:16.210
1

26:17.250 --> 26:17.570
2

26:19.490 --> 26:20.530
就得到的是2

26:20.690 --> 26:22.130
它永远得到的是最后一个

26:22.130 --> 26:23.810
就是第二个表达式

26:24.130 --> 26:24.850
比方说

26:25.810 --> 26:26.930
1加2

26:27.490 --> 26:28.450
2加3

26:28.930 --> 26:30.450
是后面这个表达式

26:30.530 --> 26:31.010
看没

26:31.570 --> 26:32.850
好 如果用多个兜号呢

26:32.930 --> 26:35.410
1 2 3 4 5 6 5 7 5 6

26:35.890 --> 26:37.410
你看一下得到的结果就是6

26:37.890 --> 26:39.250
前面的表达式有没有运算

26:39.250 --> 26:40.050
它有运算

26:40.050 --> 26:40.770
有运算

26:40.770 --> 26:42.370
它这样子一部分一部分来的

26:42.930 --> 26:44.930
我们表达式它不可能一起运行的

26:44.930 --> 26:46.770
就是运算符它不可能一起运行的

26:46.770 --> 26:48.690
它一定是一部分一部分运行

26:49.010 --> 26:50.210
先运算这一部分

26:50.370 --> 26:51.890
这个表达式得到的结果是2

26:52.050 --> 26:53.890
再运算这一部分得到的是3

26:53.890 --> 26:55.250
再运算这一部分得到的是4

26:55.250 --> 26:56.610
再运算这一部分得到5

26:56.610 --> 26:57.890
再运算这一部分得到6

26:59.410 --> 27:00.770
那么整体上看上来了

27:00.770 --> 27:01.730
看下去了就是

27:01.890 --> 27:03.650
把前面的表达式挨着运行一遍

27:03.650 --> 27:05.010
然后得到最后一个表达式

27:06.610 --> 27:08.850
这个时候有可能会出现面试题

27:08.850 --> 27:10.050
有可能会出现面试题

27:11.330 --> 27:12.450
就兜号运算符

27:12.850 --> 27:14.850
这个东西我们自己平时不会用的

27:15.650 --> 27:17.890
但是它面试题里面可能会问道理

27:17.890 --> 27:19.650
所以说我这里要把它补充一下

27:20.370 --> 27:22.610
它可能会出一种

27:22.610 --> 27:24.210
也不会复杂

27:24.770 --> 27:26.290
你只要知道兜号运算符

27:26.290 --> 27:27.650
你就知道怎么来解了

27:28.530 --> 27:31.250
就是x等于什么随便一些吧

27:31.810 --> 27:35.250
x加加乘以2

27:35.570 --> 27:38.450
然后了x加加乘以2

27:38.770 --> 27:40.850
然后x加加乘以2

27:42.290 --> 27:42.930
然后问你

27:43.570 --> 27:43.890
问你

27:44.370 --> 27:45.570
或者不写括号也可以

27:45.890 --> 27:46.610
不写括号也可以

27:47.730 --> 27:48.930
好问你啥呢

27:49.170 --> 27:51.490
问你这个最终的x的指示多少

27:52.130 --> 27:52.690
指示多少

27:54.850 --> 27:55.490
好来呗

27:56.050 --> 27:57.730
你看右边是一个兜号运算符

27:57.730 --> 27:58.770
对吧兜号运算符

27:59.010 --> 28:00.370
兜号运算符你就从中到尉

28:00.370 --> 28:01.170
全部运算一遍

28:01.250 --> 28:03.330
然后把最后一个表达式打出来就完事了

28:03.810 --> 28:05.650
x的指目前的指示1

28:05.970 --> 28:06.290
对吧

28:06.290 --> 28:07.890
然后这边把复制过来

28:09.330 --> 28:09.810
复制过来

28:10.610 --> 28:11.570
有三个表达式

28:11.730 --> 28:12.290
一个个来

28:12.690 --> 28:14.050
x加加乘争1

28:14.130 --> 28:15.010
返回之前的指

28:15.410 --> 28:16.290
因为加加在后面

28:16.290 --> 28:17.730
返回之前的指1

28:18.050 --> 28:19.330
1乘以2

28:19.730 --> 28:20.690
第一个表达式

28:21.090 --> 28:21.730
算完了对吧

28:22.130 --> 28:23.090
第二个表达式

28:23.410 --> 28:25.410
x加加多少呢

28:25.730 --> 28:26.130
3

28:26.610 --> 28:28.290
然后返回之前的指2

28:28.290 --> 28:29.090
2乘以2

28:29.090 --> 28:29.490
4

28:31.330 --> 28:32.770
好前面两个算出来了过后

28:32.770 --> 28:34.770
是不是得到得到最后一个表达式的指

28:34.770 --> 28:35.250
就是4

28:36.130 --> 28:37.010
好然后这边

28:37.330 --> 28:38.770
x加加4

28:39.010 --> 28:40.290
得到的结果是3

28:40.610 --> 28:41.650
返回之前的指

28:41.890 --> 28:42.450
2乘以3

28:42.450 --> 28:42.850
6

28:43.170 --> 28:43.970
4兜号6

28:44.210 --> 28:45.010
多少结果就是6

28:45.410 --> 28:47.410
好把6呢再复制给x

28:47.890 --> 28:48.610
x就为6

28:49.410 --> 28:50.210
没有的意思

28:50.690 --> 28:51.330
好看一下呗

28:52.850 --> 28:53.570
给他看的

28:53.570 --> 28:54.290
其实很简单

28:55.810 --> 28:56.210
哎

28:57.010 --> 28:59.010
哎哎哎哎等下等下等下等下

28:59.010 --> 28:59.890
哪里写错了

29:00.850 --> 29:02.450
哦这个地方是这样子啊

29:02.450 --> 29:03.090
是这样子

29:03.410 --> 29:04.850
就是你得用小扩号

29:04.850 --> 29:06.690
确实用得用小扩号把它扩起来

29:06.930 --> 29:07.570
为啥呢

29:07.570 --> 29:09.810
因为兜号运算符的优先级是

29:10.370 --> 29:11.650
很低很低的

29:11.650 --> 29:13.730
它比这个复制符号都还要低

29:14.050 --> 29:16.530
比这个复制运算符的优先级都还要低

29:16.770 --> 29:18.050
所以说他认为是这样子的

29:18.370 --> 29:19.650
这是一个表达式

29:20.050 --> 29:21.330
这是一个表达式

29:21.490 --> 29:22.610
这是一个表达式

29:22.850 --> 29:24.050
他是已经认为这样子

29:24.210 --> 29:25.490
你看这个表达式

29:25.730 --> 29:27.890
这个表达式运行完了过后x的指示多少

29:28.370 --> 29:29.490
是不是2对吧

29:29.730 --> 29:30.770
这个地方是1嘛

29:31.010 --> 29:31.810
1乘12

29:32.050 --> 29:32.770
复制给x

29:32.930 --> 29:33.890
x变成了2

29:34.210 --> 29:35.490
好这个是一个表达式

29:35.730 --> 29:36.930
然后第二个表达式呢

29:37.250 --> 29:37.810
运行

29:37.970 --> 29:39.330
运行的过来他不会复制的啊

29:39.330 --> 29:41.490
因为就是一看前面是一个整个表达式

29:41.490 --> 29:42.450
已经完成复制了

29:42.770 --> 29:43.810
好这是第二个表达式

29:43.810 --> 29:45.090
加1的自征1对吧

29:45.090 --> 29:45.730
自征1

29:45.970 --> 29:47.410
他运行完了过就自征1

29:47.410 --> 29:48.210
就是变成3

29:48.370 --> 29:50.130
这个运行完了过后自征1变成4

29:50.530 --> 29:52.130
对对对对对对

29:52.370 --> 29:54.530
好那这里的兜号运算符的优先级啊

29:54.530 --> 29:55.410
我再记一笔吧

29:56.370 --> 30:02.690
兜号运算符的优先级比复制更低

30:04.050 --> 30:05.490
比复制运算符更低

30:05.490 --> 30:06.930
说复制要先运行

30:07.250 --> 30:09.010
如果把他扩起来的话啊

30:09.730 --> 30:10.610
保存

30:10.850 --> 30:11.650
然后看一下

30:12.290 --> 30:13.410
你看这就溜了

30:13.650 --> 30:14.130
对吧

30:14.370 --> 30:15.010
ok啊

30:15.250 --> 30:16.930
这是关于兜号运算符

30:18.130 --> 30:19.010
然后就没了啊

30:19.010 --> 30:20.530
其实还有一些运算符啊

30:20.530 --> 30:23.490
还有一些运算符我们平时基本上不打用

30:24.450 --> 30:26.130
那么我在扩展课程里面讲

30:26.130 --> 30:27.410
比方说还有一个运运算符

30:27.410 --> 30:28.210
还没讲对吧

30:28.610 --> 30:29.570
运运算符的话

30:29.570 --> 30:30.770
我在扩展课程里面讲

30:30.770 --> 30:32.250
后边有几几几课

30:32.250 --> 30:33.010
扩展课程

30:33.010 --> 30:34.530
大家有兴趣的话可以看一下

30:34.530 --> 30:36.530
不看的话也不会影响你后边的学习

30:36.770 --> 30:37.250
好吧

30:37.250 --> 30:39.090
那么运算符这一块就结束了

30:39.330 --> 30:40.130
那么自此呢

30:40.130 --> 30:42.130
你就能够学已经学习了啊

30:42.130 --> 30:44.930
对在语言里边如何去主持了

30:44.930 --> 30:46.450
但是现在还不能照具啊

30:46.450 --> 30:48.690
要照具的话需要下一张的知识

30:48.690 --> 30:50.050
咱们下一张学习完了过后了

30:50.050 --> 30:52.210
就有大量大量的练习可以做了

30:52.530 --> 30:53.650
但现在还做不了

30:53.650 --> 30:55.650
OK把运算符这一块搞清楚

