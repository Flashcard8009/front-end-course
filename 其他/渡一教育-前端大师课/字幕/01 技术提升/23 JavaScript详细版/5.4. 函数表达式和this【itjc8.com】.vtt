WEBVTT

00:00.000 --> 00:15.060
上节课呢 咱们讲了 作用 预和 币包

00:16.060 --> 00:20.780
其实上节课的东西呢 总结起来就那么一句话啊 外边的东西呢 不能用里边的

00:21.380 --> 00:27.100
里边的呢 可能用 可以用外边的 然后函数里边的可以写函数啊 主要是告诉你们这么这么一些东西

00:27.780 --> 00:29.940
然后上节课呢 我们提到了函数表达4

00:31.020 --> 00:33.740
这就可能我们来深入的去讲一讲函数表达4啊

00:34.420 --> 00:43.420
首先讲两 这一块讲两个东西啊 一个是函数表达4 一个是riss关键字 好两个东西啊 一个是函数表达4 一个呢是riss关键字

00:45.220 --> 00:49.900
好 第一个是函数表达4 这里的大家记住啊 在节课中

00:51.180 --> 00:54.820
函数是 函数也是一个数据

00:56.500 --> 01:01.140
回忆一下啊 咱们回忆一下 在注意开始的时候 咱们讲这个

01:01.860 --> 01:04.940
数据和数据内形的时候 我们当时就说过

01:05.740 --> 01:11.580
什么了 说啥 说我们的数据内形啊 分为原始内形和

01:12.460 --> 01:16.900
引用内形 而引用内形里边呢 我们一个是对象

01:17.700 --> 01:22.140
一个是函数 对吧 所以说函数它也是一种数据内形

01:22.500 --> 01:26.060
因此呢 函数本身它本来就是数据啊 它本来就是数据

01:27.060 --> 01:33.300
所以说呢 可以用于任何需要数据的地方 语法上 函数

01:35.380 --> 01:37.900
函数可以用于 函数可以用于

01:38.980 --> 01:40.860
任何需要数据的地方

01:43.450 --> 01:51.130
什么意思呢 比方说咱们有函数里边 咱们有参数 对吧 参数可不可以传一个函数进去了 可以

01:51.530 --> 01:56.050
一个边量可以保存一个函数 一个对象的属性可以是一个函数

01:56.610 --> 01:58.810
所以说函数其实可以用在任何地方 它没有

02:00.130 --> 02:05.970
特别特别的特殊 在有些语言里边 函数很特殊 但是在函数语言里边

02:06.490 --> 02:10.410
它的函数啊 就是一个数据 你可以把存放到一个边量里边保存起来

02:10.770 --> 02:14.690
还可以把这个边量里边的函数取出来 然后复制给另外一个边量 都是可以的

02:15.330 --> 02:20.370
因此呢 我们有这么一句话 叫做函数中函数是一等公米

02:20.690 --> 02:28.770
就是说函数呢 它并没有受到歧视 不是说它是个函数 所以说它有很多的用法上

02:28.770 --> 02:36.770
就有区别 并没有 函数它跟其他数据是一样的 跟什么数字啊 跟制补圈啊 跟对象啊 用法是一样的

02:36.770 --> 02:43.490
它可以保存到边量里边 可以怎么样怎么样 只不过我们之前写的函数呢 都是字面量函数

02:43.490 --> 02:49.890
就直接声明的 实际上函数呢 可以像其他数据一样进行操作 比方说

02:51.370 --> 02:54.930
咱们看一下啊 太捨一

02:57.050 --> 03:01.290
好 看着 我们之前呢 写过边量 对吧 边量我们经常都在用

03:01.890 --> 03:09.810
边量里边可以保存一个啥呢 可以保存一个数字 可以保存一个制服串 可以保存一个对象 对吧

03:10.210 --> 03:12.690
都可以保存 当然对象的话就保存的是地址

03:13.610 --> 03:16.370
那能不能保存一个函数呢 可以

03:17.330 --> 03:25.330
里边保存一个函数 你看 你对象可以保存 是吧 制服串的都可以保存 那函数本身也是个数据

03:25.650 --> 03:33.090
因此呢 它是可以保存一个函数的啊 它是一个保存 可以保存一个函数的 那么这种写法呢 这个函数呢

03:33.730 --> 03:38.930
它也是一个表达式啊 它也是一个表达式 那么就意味着什么呢 意味着这个

03:39.810 --> 03:46.290
既然函数是表达式 我们今天 之前上一课就说到了 如果一个函数它是表达式的话 它不会污染

03:46.570 --> 03:50.450
拳举边量 你看温度里边 看一下啊 有没有test

03:51.250 --> 03:59.090
有没有test没有看没有没有这个函数 所以说呢 函数作为表达式的时候呢 是可以省略到它的名字的 你反正都没有对吧

03:59.410 --> 04:05.010
你都没有这个东西 并且呢 他有没有提升呢 他有没有提升 我们来调用一下这个test啊

04:05.490 --> 04:08.530
看一下 保存一下 他告诉你test is not defend

04:09.490 --> 04:15.250
test是没有定义的 他又没有提升呢 我们看一下 把他在上面去调用 上面去调用 保存

04:15.810 --> 04:23.250
他会告诉你test is not defend 他后边都不能调用 那前面更加不能调用了 对吧 好 所以说呢 这一块啊

04:24.370 --> 04:30.530
跟我们之前讲的一样 这块也是一个函数表达式啊 也是个函数表达式 他写到这个位置

04:31.170 --> 04:40.610
因为我们之前写什么1加2 1加3等于等于多少 那么把他复制给 这是不是个表达式 对吧 这是一个表达式啊 包括我们直接写个数字 那么

04:41.010 --> 04:47.250
我们可以认为这也是个表达式啊 字面量表达式嘛 对不对 那么这里我们写个函数 他仍然是个表达式啊

04:47.810 --> 04:49.890
把这个表达式的值复制给a

04:50.610 --> 04:56.130
好 表达式的值是啥呢 表达式的值就是函数本身啊 就是函数本身

04:57.090 --> 05:03.410
明白的意思吧 他就是函数本身 所以这是个表达式 那既然他是个表达式 是不是可以省略掉

05:03.970 --> 05:09.010
是吧 函数的名字 他的名字没有意义 因为他又没有他又没有加到那个什么

05:09.410 --> 05:16.450
加到那个全局面量里面去 又没有提升 他个名字没有意义 你反正都用不了 所以说不不给他写名字了啊 就不给他写名字了

05:16.770 --> 05:19.570
你看 这样子呢 相当于什么呢 什么什么意思啊

05:20.930 --> 05:21.970
创建一个函数

05:22.930 --> 05:29.330
就这么一个函数 将其复制给变量a 复制给变量a

05:30.690 --> 05:33.970
其实呢 我们后边要去调用这个函数 怎么调用啊

05:34.690 --> 05:39.330
就这样调用啊 因为s一个函数 你可以把它当成一个函数来调用 就这样调用

05:39.970 --> 05:42.130
好 保存啊 保存 你看一下

05:43.330 --> 05:47.970
好 有的时候呢 面试其实他可能会问你这么一个东西 就是这种邪法

05:48.930 --> 05:52.610
和这种邪法有什么样的区别

05:54.450 --> 05:56.610
有什么样的区别 首先说

05:57.570 --> 06:03.330
有哪些区别呢 第一个啊 从这个概念上啊 从概念上 这个呢 叫做函数表达式

06:03.730 --> 06:06.930
这个呢 叫做函数字面量啊 他教法不一样

06:07.490 --> 06:13.730
有还有哪些不一样呢 这种邪法呢 有变量 有函数提升 对吧 他会提升到第一行啊 提升到第一行

06:14.050 --> 06:19.010
也就是上边 声明之前也可以调用 因为他会提升 提升到最顶部

06:20.370 --> 06:27.330
第二呢 他有这个 他会附着在温斗对象上面啊 他会附着在温斗对象上面啊 这是这两个

06:27.730 --> 06:30.130
那么这个呢 上边这种邪法呢

06:32.370 --> 06:35.250
上边这种邪法呢 上边这种邪法呢 他就没有

06:36.530 --> 06:42.610
函数提升 也就是说你在前边调用这个函数 你能调用吗 保存看一下啊 你能调用吗

06:42.850 --> 06:45.810
他说A不是一个函数 他不能调用

06:46.370 --> 06:54.130
为什么呢 为什么不能调用 他相当于是啥 相当于是有变量提升对吧 啊 变量提升到 这是个变量 变量提升到最顶部

06:54.530 --> 06:58.930
然后呢 这个时候呢 来给他复制为一个函数 他相当于是这种啊 这种邪法

06:59.490 --> 07:04.290
那啥意思呢 那你调用的时候是不是undefend啊 A的值是undefend

07:05.410 --> 07:09.250
他就不是一个函数啊 目前 只有他复制过后才是一个函数

07:09.650 --> 07:13.810
就跟他复制2 复制3 复制一个字不算 是一样的 啊 另外这个意思啊

07:15.250 --> 07:21.250
好 所以说这种邪法呢 他是没有 它是没有函数提升的 没有函数提升 只有在复制之后

07:22.610 --> 07:25.810
复制之后你才能使用啊 复制之后你看就可以使用了

07:27.170 --> 07:30.450
好 其实你要理解这个东西呢 很好理解

07:30.930 --> 07:35.970
因为我们之前说过函数是什么类型 函数也是引用类型

07:36.930 --> 07:43.890
函数是一个引用类型 你可以把它当成对象的样子啊 将其

07:44.930 --> 07:48.210
复制给某个辩量史

07:49.570 --> 07:55.730
辩量中保存的是啥呢 保存的是函数的地址 函数的地址

07:55.970 --> 08:01.330
你怎么理解这个东西呢 你可以这样理解啊 这个代表相当于是啥呢 我这里画个图啊

08:02.290 --> 08:03.810
啊 这里我建个ppt

08:05.810 --> 08:10.450
看着啊 我们之前画过对象 那么函数再来画一次 其实是一样的 是一样的

08:12.210 --> 08:17.570
好 咱们来看一下啊 创建一个函数 把它复制给a 把它复制给a

08:18.050 --> 08:26.210
相当于是啥呢 相当于是创建了一块内存空间啊 这是一个函数 对吧 这个函数的内容呢 是这个啊 函数的内容是这个

08:26.370 --> 08:37.810
啊 我们可以把这些语句啊 你可以理解为把这些语句呢 保存到这了啊 你可以 你可以这样理解啊 你可以这样理解啊 他是一个函数 我就把整个复制过来吧

08:40.270 --> 08:46.990
把这个整个复制过来啊 你可以这样去理解啊 整个这个函数的内容呢 就保存在这块内存空间里边啊

08:47.230 --> 08:53.390
就是他有哪些有哪些语句 到时候运行函数的时候呢 他就会运行这些语句啊 这就是块内存空间

08:53.630 --> 09:01.390
看没一块内存空间 然后呢 把这个没存空间的地址保存到哪儿了 保存到变量a里边啊 这里面保存的是地址

09:02.510 --> 09:03.870
啊 我们就直接写一个吧

09:07.230 --> 09:08.750
直接写一个啊 啊 a

09:09.950 --> 09:10.430
变量a

09:11.390 --> 09:19.710
就是个变量a 里面保存的是啥呢 保存的是一个地址啊 保存的是一个地址 这个地址呢 他指向谁呢 指向这一块内存空间

09:20.190 --> 09:25.630
就这么个意思 跟对象是一样的啊 跟对象是一样的 他指向这一块内存空间

09:26.190 --> 09:26.910
就怎么回事

09:27.710 --> 09:28.510
应该这个意思啊

09:29.390 --> 09:36.670
好 那么我们调用a的时候 实际上是通过a的地址找到这一块 对吧 找到这一块 然后去调用他 所以一样的啊一样的

09:37.710 --> 09:42.270
好 那么如果我们之前的写法了 如果是这种写法啊 如果是这种写法了

09:43.230 --> 09:55.390
这种写法在内存结构上呢 是也是一样的啊 这种写法啊 跟跟上面这种写法在内存结构上也是一样的 他指向这个函数啊 是一样的

09:55.710 --> 10:04.910
唯一的区别在哪呢 就是他会提升 对吧 他会提升 并且呢 他会附着在温斗权局对象上面啊 就这个区别 其他都一样啊 都一样

10:05.550 --> 10:09.470
明白这个意思吧 他内存结构上这两种写法都是一样的啊 都是一样的

10:10.430 --> 10:16.590
好 接下来啊 咱们来看一下啊 我们调用a没什么好说的 对吧 调用a 因为a指向这个函数

10:16.990 --> 10:19.710
好 那么现在呢 我们在这样子写 看着

10:20.990 --> 10:28.270
把a负责给b 可不可以这样写呢 有啥不可以呢 当然可以这样写 相当于又有一个变量啊 b

10:28.670 --> 10:35.230
把a的地址呢 负责给b 那b是不是也是个函数 对吧 指向同一个函数啊 b是指向同一个函数的

10:35.630 --> 10:41.390
那么你能不能调用b 对吧 能不能调用b 当然可以啊 调用b 保存看一下

10:41.950 --> 10:46.190
是不是也是一样的 对不对 好 我们可以再输出啊 再输出什么了

10:46.910 --> 10:51.310
啊 再输出a是不是等于b的 是不是相等的

10:52.030 --> 10:56.030
啊 两个都是引用内情比较的是什么 比较的是地址 对吧 比较的是地址

10:56.510 --> 11:00.750
你看 q a和b是一样的啊 他指向同一块内存中间

11:01.310 --> 11:09.310
明显这个意思吧 英坑怎么明白了 这是放到变量里边 放到变量里边 那当然呢 我们这样子写可不可以呢

11:09.950 --> 11:22.350
这样子写啊 随便写啊 这样子写行不行呢 也可以啊 你看这里 我把这个函数本身啊 没有调用函数啊 如果你这样写就不一样了

11:22.990 --> 11:29.710
你这样写不一样了 表示什么意思啊 调用函数 把函数的返回结果负责给b 他是这个意思的

11:30.670 --> 11:34.670
那a没有返回结果 对吧 没有返回结果 没有返回结果是什么

11:35.070 --> 11:38.030
没有返回结果 他返回的就是undefend 那么b就是undefend

11:38.750 --> 11:44.530
这样写的话b是undefend啊 看一下吧 输出b

11:45.410 --> 11:48.690
保存看一下 undefend undefend

11:49.090 --> 11:56.370
你看 因为他是调用a啊 调用a 然后得到a的返回结果 那么这样子写不可以扩耗 就是没有调用

11:56.690 --> 12:03.970
是直接把这个a 变量a 就不要变量了啊 就是函数a 其实也是这样子啊 也是这个意思啊 意思是一样的

12:04.850 --> 12:10.930
好 把这个a呢 负责给b 负责给b 那b里边的d 只是不是也跟a一样了啊 指向的是同一块类伸空间

12:11.250 --> 12:16.850
因此呢 a和b 是一样的 并且呢我们也可以调用b 达到调用a一样的效果

12:17.810 --> 12:21.490
当然呢 他是一个普通变量 一个普通变量是没有提升 一个普通变量

12:22.210 --> 12:28.450
他普通变量也有提升啊 提升 只是呢 这个普通变量提升的 他是这样提升的 他这样提升的

12:30.290 --> 12:37.410
他这样提升的 他就不是把整个函数保存到第一块了啊 是一样的 没有什么区别 好 保存看一下啊

12:37.810 --> 12:41.970
两个是去 而且调用b呢 也能得到一样的结果 好吧

12:43.010 --> 12:49.490
好 这是关于在变量里边去保存函数 那么其他场景呢 是不一样的 其他场景都是一样的啊 看一下其他场景

12:50.450 --> 13:02.050
好 看一下 我们如果有一个对象啊 一个对象 这个对象里边有一些数相啊 有些数相啊 然后呢 随便写写数项啊 其中一个属性的叫c啊 叫c

13:02.850 --> 13:08.610
这个数项 哎 这个数项他可以复制为字无创啊 可以复制为数字 可以复制为另外一个对象吗 可不可以

13:09.490 --> 13:16.610
可不可以 我们之前是举个例子啊 一个用户里边有地址 对吧 地址里边有一些数项 对吧 可以复制为另外一个对象

13:17.170 --> 13:26.850
那能不能复制为一个函数呢 一个地名函数 一个函数表达式 可不可以呢 当然可以 函数在介石里边是一等公米

13:27.410 --> 13:31.170
可以使用数据的地方都可以使用函数 语法上都说得通啊 都没问题

13:31.730 --> 13:34.690
啊 所以可以使用一个函数啊 可以使用一个函数啊

13:36.530 --> 13:38.050
c 随便答应一个吧

13:39.570 --> 13:45.650
好 看一下 那这个函数怎么调用呢 这个函数怎么调用呢 比方说你要调用这个函数怎么调用呢

13:45.890 --> 13:53.010
obj 属性是啥 属性是c 把它当成函数调用 因为这个玩意就是函数 你不信我们把它输出出来

13:53.810 --> 14:01.410
输出obj.c 然后再输出typeobj.c 看它是到底是啥玩意儿 看它到底是啥 保存看一下

14:02.610 --> 14:07.540
哎 新的新的一面了啊 看一下

14:08.580 --> 14:12.980
那么它输出的是啊 它输出的是函数对吧 输出一个函数内容 然后呢

14:13.540 --> 14:20.180
内容是方形 内容就是一个函数 是一样的啊 是一样的 那我们怎么来调用这个c呢obj.c

14:20.580 --> 14:24.900
当它函数来调用就完事了 所以就完事了 对吧 保存看一下啊

14:25.700 --> 14:28.100
你看输出了ccc 他就这样调用的

14:29.220 --> 14:34.020
那你们现在能理解这个东西了吗 能理解这个console点log了吗 能不能理解他了

14:34.820 --> 14:39.460
对吧 他是个啥 他是个对象 对象里面有个啥 是不是函数

14:40.260 --> 14:42.980
对吧 对象里面有函数啊 有函数

14:43.540 --> 14:47.220
好 那么这个函数 这是函数的参数吗 对吧 传递参数

14:48.900 --> 14:53.460
那么说明那个函数啊 他可以作为属性 保存到属性里面 如果画内存

14:53.860 --> 14:58.500
内存图的话 那么这一块怎么画呢 啊 看着啊 他如果画内存图的话

14:59.140 --> 15:05.710
他是这样子的 好 首先他是个对象啊 对象里面有三个属性 abc 啊 三个属性

15:06.270 --> 15:08.190
好 再复制一下吧

15:09.710 --> 15:15.630
好 一个对象啊 对象里面有三个属性 a 那是多少呢 a 的值是啊 随便写一个啊 字不串

15:17.070 --> 15:20.590
啊 b 的值呢 随便写一个啊 c 的值

15:23.310 --> 15:29.630
好 c 的值呢 c 是不是函数啊 对吧 c 是一个函数吧 所以说我们他这里又有一个对象啊

15:30.270 --> 15:34.430
相当于是对象啊 相当于是对象一个函数 对不对 一个函数 这里输出cc

15:35.390 --> 15:39.150
好 然后这个c呢 他指向哪呢 他指向的是啊

15:40.670 --> 15:42.430
换 换成一个颜色啊 换一个颜色

15:43.550 --> 15:49.150
这个c呢 他指向这一块啊 指向这个函数 对吧 c 里面保存了一个地址 他指向这个函数

15:49.870 --> 15:55.870
好 然后把这个对象复制给谁呢 复制给变量级什么呢 变量ob借啊 复制给变量ob借

15:56.830 --> 16:01.230
ok 好 这里变量ob借

16:02.590 --> 16:08.110
那么也就意味着这个ob借指向谁呢 指向那个对象啊ob借是指向那个对象的

16:08.670 --> 16:15.310
那你看 我要调用这个函数c 怎么调用ob借ob借底儿c 对吧 底儿c

16:15.710 --> 16:18.430
然后去调用这个函数 对吧 就完事了啊

16:19.390 --> 16:22.510
那我们还可以各种花样 玩出各种花样 比方说

16:23.310 --> 16:31.070
比方说 我们能不能这样子写呢 把ob借底儿c 底儿c复制给另外一个变量b

16:31.710 --> 16:36.750
可不可以呢 可不可以 当然可以 跟之前的属性是一样的

16:37.070 --> 16:42.190
你把这个c复制给了变量b 那么变量b指向谁呢 变量b是不是也指向这个函数了

16:42.670 --> 16:44.670
对不对 他也指向这个函数了

16:45.870 --> 16:51.390
也指向这个函数了 所以说你到时候调用b是不是跟调用ob借底儿c是不是一样的

16:52.030 --> 16:55.550
对呀 他是一样的呀 你调用b啊 看一下 保存

16:56.590 --> 17:02.270
就各种奇葩用法都可以 其实不算是什么奇葩用法 奇葩用法啊 不算啥奇葩

17:03.150 --> 17:07.230
其实在介石里边函数跟其他的数据 本质上的没有的OA区别

17:07.790 --> 17:12.830
只是只不过了函数可以调用 就这个区别 函数里边呢 有个作用域 就这个区别

17:14.190 --> 17:19.630
然后这个函数 这个函数里边是不是可以访问外部的东西 对吧 可以访问啥 可以访问b 对吧

17:19.950 --> 17:28.110
可以访问ob借 对吧 可以访问ob借 什么都可以访问ob借底儿aob借底b 甚至呢ob借底c

17:28.590 --> 17:30.430
访问自己 都可以访问

17:32.030 --> 17:37.470
好 这是作为函数的属性 对吧 我们先把坚持一下 见一下市面

17:38.030 --> 17:42.510
不要以后了 以后了 看到这个玩意儿 你都不认识 不知道它是啥 其实是一样的

17:43.710 --> 17:45.950
不要说有一个函数 能不能写两个函数呢

17:46.670 --> 17:50.430
可不可以写两个函数 又啥区别呢 你告诉我 又啥区别呢

17:51.470 --> 17:53.390
当然可以写啊 刚刚可以写

17:55.070 --> 18:01.710
c和d 要调用d 来吧ob借底儿d 调用一下就完事了 保存 是一样的

18:03.070 --> 18:06.590
好 这是作为对象啊 对象的属性 那再来啊 再来

18:09.060 --> 18:12.420
好 我们来看这个啊 数组

18:13.380 --> 18:17.780
数组里边可以存任何数据 对吧 可以存数字吗 可不可以存数字啊 可以

18:18.260 --> 18:23.700
可以存制服串吗 可以 可以存对象吗 可以 那能存函数吗

18:24.340 --> 18:25.300
又啥不能存的呢

18:26.660 --> 18:32.660
这个制服串里边啊 这个数组里边有一项是函数啊 有一项是函数 那来呗 我们输出

18:33.700 --> 18:38.100
函数 数组中的函数 一样的嘛 又啥区别呢

18:38.500 --> 18:44.260
啊 把它放到数组里边 可不可以 当然可以 好 那怎么调用呢 怎么调用这个函数呢

18:45.460 --> 18:52.340
找到这个数组的哪一项 最后一项对吧 01234啊 下标为4的这一项

18:53.140 --> 18:59.300
那你看 整个这个表达式就是个函数 在调用呗 你看 调用这个函数啊 如果有参数的话就传参数

19:00.100 --> 19:02.180
好 保存 好 看一下啊

19:03.140 --> 19:04.900
哎 新鲜颜明啊

19:06.340 --> 19:08.660
f12 你看 是不是输出了

19:09.460 --> 19:13.700
它就是一个函数 那怎么能把它取出来 复辞给另外一个变量了 可不可以呢

19:14.420 --> 19:16.900
当然可以啊 当然可以啊

19:18.020 --> 19:20.020
哎 比方说 funk

19:21.300 --> 19:24.260
好 那我们运行这个函数 可不可以保存

19:25.060 --> 19:30.100
是一样的 对吧 一样的 好 咱们还是画一下啊 画一下这一块的内存图

19:30.900 --> 19:36.340
好 有一个数组 对吧 数组是不是对象 数组当然是对象啊 还有啥区别呢

19:37.220 --> 19:41.700
数组 ar 指向一个数组啊 指向一个数组 这个数组呢 是一个对象

19:42.100 --> 19:46.900
好 这个数组的对象里边 我们之前都分析过数组的对象 对吧 下标为0的0

19:47.460 --> 19:51.380
啊 就是0这个属性 指向34 然后呢 1这个属性 指向啊

19:52.340 --> 19:54.580
指向154 154

19:56.100 --> 20:00.740
随便写吧 好 下标为2这个属性呢 是一个字不错 是一个字不错

20:02.580 --> 20:08.180
下标为3这个属性 就这个属性 是不是一个函数了 对吧 一个函数嘛 对不对

20:08.660 --> 20:10.900
哦 不 它是个对象 它是个空对象

20:11.700 --> 20:20.370
它是个空对象 我们来画一下吧 简单画一下啊 下标为3这个属性呢 它指向个空对象

20:21.250 --> 20:25.890
指3这个属性 好 我们再画再来啊 免得看不清楚

20:26.690 --> 20:32.370
3这个属性 好 那么4这个属性呢 4这个属性啊 刚才是3这个属性

20:33.170 --> 20:37.410
好 4这个属性呢 4这个属性是不是要指向一个函数啊 对不对

20:37.810 --> 20:40.370
4这个属性指向一个函数啊 就这个函数

20:41.330 --> 20:46.270
啊 这个函数 好 看一下啊

20:47.630 --> 20:52.430
就这个玩意儿啊 就这个函数 好了 那既然它指向函数 它是不是个地址 对不对

20:52.750 --> 20:56.670
它还是个地址啊 还是个地址 所以说4这个属性呢 它还是个地址

20:57.950 --> 21:00.430
啊 它指向什么 指向这个函数 看没

21:01.630 --> 21:06.910
好 然后整个ARR呢 指向这个数组 那么现在呢 我们找到ARR下标为4

21:07.470 --> 21:13.470
下标为4 是不是找到它了 好 把它这个地址复制给谁 复制给这个变量 Funk

21:14.350 --> 21:18.270
复制给这个变量 Funk 那么这个变量里边 它是不是也是一个地址

21:18.270 --> 21:21.230
它的地址是不是也指向同一个函数 对不对

21:21.950 --> 21:26.190
它指向的也是同一个函数 那么我们调用它 是跟这个调用它

21:26.190 --> 21:29.150
通过它来调用它 是不一样的 对不对 一样的

21:29.870 --> 21:35.390
所以说不用怕啊 函数好像没有什么特殊的 跟之前的对象呢 本质上是一样的

21:36.030 --> 21:38.750
它也是引用内容 保存的仍然是地质

21:39.630 --> 21:42.590
好吧 好 咱们再来看啊 再来看

21:43.470 --> 21:48.510
以后呢 看到这些东西 这些东西不要怕 是一样的 好 比方说啊 比方说

21:49.230 --> 21:52.030
还有这 还有这种写法啊 还有这种写法 Funk

21:52.830 --> 21:55.550
方形啊 比方说一个Test

21:57.230 --> 22:02.510
这么一个函数啊 它需要一个参数啊 需要一个参数叫core 随便写个吧 随便写个参数

22:03.470 --> 22:08.190
好 然后呢 我们这里输出一个 输出一个值啊 test 运行

22:08.910 --> 22:11.310
运行 好 然后core

22:13.150 --> 22:18.190
哇 这是啥呀 这是啥呀 这是在啥呀 这个表示的是这个参数

22:18.670 --> 22:20.110
它要传一个函数进来

22:22.510 --> 22:26.510
哇 这里不是切式文件啊 这个答案没有提示

22:26.990 --> 22:34.910
core 传递一个 传递参数嘛 对吧 把时参传给行参 传递一个函数进来

22:36.430 --> 22:40.190
所以说这里边可以把它当场函数运行 那我们调用的时候 怎么调用呢

22:41.470 --> 22:45.310
test 这里边 好 这里边可是不是要传东西 对吧 有一个参数嘛

22:45.630 --> 22:54.270
以前我们传的是啥 传什么数字 传字不错 对吧 传对象对象也可以传啊 都是一样的啊 都一样的 传对象就相当于传地址嘛

22:54.910 --> 22:56.670
好 那能不能传一个函数进来了

22:57.390 --> 23:03.390
能不能传一个函数进来了 好 比方说啊 咱们写一个 func 这个函数啊 随便写

23:04.510 --> 23:04.910
方可行

23:07.950 --> 23:12.910
方可行 好 这里面呢 我们输出啊 输出abc吧 abc

23:13.870 --> 23:14.030
好

23:14.830 --> 23:16.990
然后呢 我们把这个函数传进来 可不可以呢

23:17.950 --> 23:22.750
当然可以 函数它本身也可以做传递 一怕当成对象 你就把函数当成对象

23:23.390 --> 23:27.070
只是函数是一个特殊的对象 它可以调用 对吧 对象不存在什么调用

23:27.470 --> 23:33.230
函数它可以调用 但它本质上什么传来传去都是对象的那种行为 一样的啊 一样的

23:33.710 --> 23:38.750
好 你看啊 我们在全局环境里边 并没有调用这个函数吧 没有调用吧

23:39.150 --> 23:42.750
我只是把它传进去了 没有调用吧 我把函数调用放到哪了

23:43.070 --> 23:48.750
放到了这里啊 把这个方可传给了他啊 我来分析一下内存里边的变化啊

23:50.350 --> 23:56.620
首先呢 有一个函数啊 有一个函数 我来看着啊 我来整体分析一次

23:57.820 --> 24:01.500
好 首先呢 有一个函数 test 它指向的是一个函数 对不对

24:02.540 --> 24:03.500
有一个test函数

24:10.460 --> 24:13.900
先复制一下吧 好 这里有个test函数

24:14.620 --> 24:19.820
好 这个函数 它肯定是一个地址 对吧 一个地址 我们之前说过

24:19.820 --> 24:25.580
它是一个地址 指向贼呢 指向一块内存空间 那个内存空间是一个函数啊 是一个函数

24:26.380 --> 24:29.980
指向一块内存空间 这个空间呢 是一个函数

24:31.020 --> 24:32.700
能看齐吗 应该没问题吧

24:33.580 --> 24:37.980
这个函数是这样子啊 这样子 我们就这样子写吧 把个名字给它去掉

24:38.300 --> 24:42.370
把个名字给它去掉啊 好 看着啊

24:43.170 --> 24:47.410
它是指向这一块函数啊 指向这一块函数 好 把它放小一点

24:48.290 --> 24:51.250
好 这是test 对吧 test 好 接下来呢

24:52.290 --> 24:56.930
又有一个函数 funk funk 这两个的区别就在于一个提升一个布提升

24:56.930 --> 24:59.890
一个污染权就变量一个布染 没其他没啥区别

25:00.450 --> 25:01.410
好 funk

25:05.760 --> 25:10.240
好 这个啊 这个变量呢 它也指向一个函数啊 也指向一个函数

25:11.440 --> 25:14.400
它指向另外一个函数 这个函数呢 里边的内容是这个

25:14.960 --> 25:21.630
把它复制一下 这是它的内容啊 它指向这个函数

25:24.140 --> 25:25.660
好 没问题吧 没问题吧

25:27.340 --> 25:30.060
然后呢 这里它指向这个啊 指向这个

25:31.260 --> 25:35.820
好 接下来呢 干嘛呢 调用test这个函数 把 funk传进去

25:36.300 --> 25:40.620
啥意思呢 好 现在呢 开始执行这个函数了啊 执行呢

25:40.620 --> 25:44.940
就是从这个函数参数开始给参数复指 然后一条预计一条预计执行

25:45.820 --> 25:49.580
好 把 funk 了复指过去 传进过去 你看

25:50.060 --> 25:53.820
调用test 你看这句话啊 把它写出来

25:54.780 --> 25:57.420
我们现在要做的事情 是在做这件事

25:58.300 --> 26:00.220
这件事 我给它一个黑色背景嘛

26:03.740 --> 26:07.580
我们现在就做这件事 调用test 就是执行这个函数

26:07.580 --> 26:10.300
然后把什么传进去了 把这个 funk传进去

26:10.300 --> 26:14.860
就相当于是啥呢 相当于是把这个 funk这个变量啊

26:15.100 --> 26:20.220
它里边的地址 对吧 它里边的地址传给了谁 传给了这个函数的参数扣 对吧

26:20.700 --> 26:27.180
传给了这个函数的参数扣 于是呢 这个扣是不是有地址的 这个函数的参数这个扣

26:28.860 --> 26:33.740
是不是有地址的 它指向谁 是不是指向这个函数 对吧 扣就指向了这个函数

26:34.140 --> 26:39.260
然后输出什么test 运行 然后再去调用扣 能不能调用扣 能不能调用 你看一下

26:39.980 --> 26:43.100
扣里边就是一个函数 对吧 存的就是函数地址 它当然可以调用

26:43.580 --> 26:49.820
调用扣就相当于是输出了abc 于是输出什么结果了 输出这个东西再输出abc 对吧

26:51.260 --> 26:56.140
是一样的 是一样的 好函数运行完了过后 那么扣就没了就没了

26:56.620 --> 27:02.220
我们之前好像说过 函数执行完成 那么之前东西就全部没了 就函数里边东西就全部没了

27:02.780 --> 27:03.100
没了

27:04.460 --> 27:09.660
好 下一次再调用了 又下一次又重新传递 是这么回事 好 咱们看一下

27:09.980 --> 27:11.500
运行

27:12.540 --> 27:16.620
一位发现 能正常运行 test 运行 abc 运行

27:18.220 --> 27:24.060
以后这种现象非常常见 就是函数 它的一个参数呢 是一个函数 你需要传一个函数进去

27:24.460 --> 27:30.220
这种以后多的很 多的很 我们通常称之为了毁掉函数啊 把它称之为callback

27:30.940 --> 27:38.460
callback 就是在函数里边通过参数 传一个函数进来 我这个函数运行到合适的位置 然后去运行一下这个函数

27:38.860 --> 27:41.260
我们后边还会说 关于这个毁掉函数

27:42.780 --> 27:45.340
包括我们后边的作业啊 也会做到这个毁掉函数

27:46.860 --> 27:49.020
好 这是 毁掉函数 对吧 毁掉函数

27:50.460 --> 27:53.260
那我们这样子写可以 大家看一下 还有各种各样的写法

27:55.630 --> 27:55.870
funk

27:57.070 --> 27:57.790
能不能这样子写

27:58.750 --> 28:00.510
可不可以 有啥区别呢

28:01.390 --> 28:06.590
有啥区别呢 我之前说过啊 这种写法跟刚才这种写法那一存结构上没有任何区别

28:07.310 --> 28:09.470
啊 就是有一个有提升一个没有提升而已

28:10.110 --> 28:12.750
那有啥区别呢 可以 没问题啊 没问题

28:13.470 --> 28:18.000
好 能不能这样子写 能不能这样子写

28:19.440 --> 28:23.120
哇 这是啥呀 没问题啊 一般看那个表达师呗 对吧

28:23.760 --> 28:28.160
他是个表达师 他在不在括号里边吧 他肯定在在括号里边 他就是个表达师

28:28.720 --> 28:30.640
直接创建一个函数 直接传给他

28:31.920 --> 28:34.320
直接创建一个函数传给他 就完事了

28:35.040 --> 28:40.560
可不可以这样写 当然可以 当然可以这样写 这样写呢 就相当于是少了个变量了啊 就没有这个变量了

28:41.360 --> 28:45.200
直接创建一个新的函数 直接指向他 让他直接指向这个函数

28:46.160 --> 28:48.000
是一样的 没啥问题的啊

28:49.120 --> 28:55.680
啊 就传一个函数 对吧 传一个函数进来 你看各种各样的玩法 那如果有两个参数呢 比方corebike1

28:56.240 --> 28:57.440
corebike2 可不可以

28:58.320 --> 29:00.160
两个 两个毁掉函数

29:00.800 --> 29:05.840
啊 毁掉函数呢 一般就是作为参数的函数啊 一般说的毁掉函数 就是一个参数它是一个函数

29:06.160 --> 29:07.360
其实没啥特别的

29:07.440 --> 29:13.280
啊 那看呗 这是第一个参数嘛 对不对 对不对 函数啊 这是第二个参数 也是个函数 可不可以

29:14.080 --> 29:19.360
当然可以 就是戒严史它的写法非常非常灵活 非常非常灵活

29:20.000 --> 29:24.400
啊 保存看一下啊 这是一个函数 它是第一个参数 第二个参数

29:25.200 --> 29:29.360
啊 两个函数传进去 那这里面就可以调用函数了 对吧 就可以调用函数了

29:30.080 --> 29:32.800
看一下啊 你看 所以两个函数都得到调用了

29:33.520 --> 29:37.280
对不对 啊 各种各样的写法 那比方说还可以这样的写

29:37.760 --> 29:47.040
嗯 方向写 test 啊 比方说ob借 传一个对象进来 哎 这个对象里边 这个

29:47.600 --> 29:47.760
呃

29:48.480 --> 29:53.600
放可1是一个函数啊 这个对象里边放可2是一个函数啊

29:54.080 --> 29:56.160
放可1和放可2这两个属性是一个函数

29:56.720 --> 30:01.280
好 那么传的时候怎么传呢 是不是可以传一个对象 对吧 传一个对象

30:02.560 --> 30:06.880
这是个对象吧 没问题吧 一个对象吧 好 这个对象里面是不是有属性啊

30:07.120 --> 30:11.840
给他传一个放可1 属性是啥 是一个函数啊 输出

30:14.000 --> 30:17.440
放可1 没问题吧 好 第二个属性放可2

30:18.960 --> 30:21.440
方形 康设 诺格

30:22.240 --> 30:25.760
我现在就让你们见识一下这种写法 以后呢 多的很

30:26.240 --> 30:31.600
到处都是这种写法 传一个对象进去 这个对象呢 有一些属性 其中有两个属性是函数

30:32.240 --> 30:36.400
好 那么这个函数里边得到这个对象过后呢 就可以把它当成两个函数来调用

30:37.040 --> 30:37.360
看一下

30:38.880 --> 30:39.840
放可1 放可2

30:42.240 --> 30:51.680
好 有些同学可能理解不了 为什么要这样做什么意义啊 我们之后呢 今今就是这节课啊 完了过后我们做一些练习 做练习的时候你就知道有什么意义了

30:52.800 --> 30:55.840
我们先知道有这么回事 函数是一等公鸣

30:56.720 --> 30:58.800
它可以出现在任何可以出现数据的地方

31:00.240 --> 31:04.320
这是关于函数表达式 你看 到处是函数表达式

31:05.120 --> 31:12.000
所以说我这里要去给你做出1235条 不用 不用 除了函数字面量声明那种方式之外

31:12.720 --> 31:15.920
任何可以需要数据的地方都可以传函数 都是函数表达式

31:16.720 --> 31:19.440
不光是我们上节课讲的什么立即执行函数

31:20.640 --> 31:26.160
任何地方给个变量复职 给个属性复职 给一个函数传参数都可以传函数

31:26.560 --> 31:31.520
这些都是函数表达式 所以说他们都都可以没有名字啊 都可以没有名字

31:32.480 --> 31:38.160
因为表达式名字没有意义啊 对吧 表达式的名字没有意义 它没有变量题 它没有提升也没有

31:38.560 --> 31:43.360
成为权局 也不会污染权局 你得不到这个名字的 所以说一个名字是没有什么意义

31:45.040 --> 31:49.040
好吧 好 OK啊 这是关于函数表达式这一块

31:50.880 --> 31:54.880
好 然后呢 我们今天看一下我们的作业啊 第一个作业

31:56.720 --> 32:00.720
这个作业呢 你们一定要去思考 我不管你们能不能说出来 我觉得吧

32:01.200 --> 32:05.120
十之八九 百分之九十五以上都做不出来 但是你们一定要去思考

32:06.400 --> 32:12.400
嗯啊 你可能会很难理解 就是你做不出来去思考 去花这个力气干嘛

32:12.960 --> 32:17.760
但是呢 你思考过了 你再去听我的作业讲解真的是不一样 那万一你做出来了

32:18.000 --> 32:20.640
我之前有些同学他是做出来的 他自己吧 做出来了

32:21.120 --> 32:24.480
没有什么新知识 都是用我们学过的知识啊 第一道题

32:24.880 --> 32:31.680
什么啊 写一个函数啊 写一个函数 你可以就写到哪里呢 就写到这个通用函数里边啊 买方可行

32:32.000 --> 32:39.920
可以写到这里边啊 因为他是个通用函数 写一个函数为数组排序啊 为数组排序排序我们是不是写过的

32:40.560 --> 32:43.600
对吧 但是你要注意 现在排序的时候

32:44.320 --> 32:46.880
要考虑到啊 要考虑到

32:47.600 --> 32:51.200
这个数组的所有可能

32:52.560 --> 32:57.200
怎么叫所有可能 以前我们排序全是数字 对不对 全是数字进行排序

32:57.680 --> 33:04.000
但万一这个这个制服串啊 不 这个数组里边他不是数字呢 他制服串呢 怎么排序呢 你怎么排序

33:04.800 --> 33:09.920
啊 那如果他不是制服串 你制服串可能我按照ask嘛嘛 对吧 那如果他是个对象呢

33:10.880 --> 33:15.680
每一项是个对象 你怎么排序 对象里边 比方说是个用户啊 用户的姓名

33:16.240 --> 33:23.280
啊 用户的年年啊 你怎么排序 你告诉我你怎么排序 对吧啊 他可能会是这种数

33:23.520 --> 33:30.560
这这种数组 他们一项是个对象 那里有那里有怎么排序呢 对不对 好 你好好去思考一下

33:31.280 --> 33:37.840
就是说你在排 你写这个函数的时候 有些东西是未知的 他是什么数组 你不知道 你根本就不知道他是什么数组

33:38.720 --> 33:45.440
但是无论他是什么数组 我都希望你能通过这个函数给他排序啊 使用冒泡 冒泡排序吧啊 我之前讲过的

33:45.840 --> 33:50.000
冒泡排序啊 你可以去想一下啊 有同学是做出来的 非常厉害

33:50.400 --> 33:57.440
啊 你可以去想想想想 这个题肯定是有很高难度的 其实这个题以后一点难度都没有 一点丁点难度都没有

33:57.760 --> 34:02.480
只是呢 大家现在不习惯啊 不习惯 我现在告诉大家啊 给大家提个醒

34:03.520 --> 34:06.880
这个函数一定会用到回调函数 一定会用到回调函数

34:07.840 --> 34:12.320
啊 你可以按照这个方向来想 他为什么一定要用到回调函数 他怎么来用

34:13.280 --> 34:19.600
以前呢 大家是没 就是之前啊 学校这儿 初学者嘛 理解啊 你是很难想到 他是要用

34:19.920 --> 34:25.200
要传一个函数进去 这个函数的有一个有一个参数是一个函数 你很难想到想得到

34:25.680 --> 34:29.200
但是以后呢 你非常非常自然习惯了啊 非常习惯了

34:30.160 --> 34:34.480
好吧 好 这这个函数啊 为数组排序 然后再写一个函数

34:36.160 --> 34:40.960
写一个函数 其实你把第一个函数做出来 后面就就全部都懂了啊 全部都懂了

34:41.520 --> 34:50.240
好 写一个函数 做什么呢 按照指定的条件进行筛选啊 筛选

34:51.040 --> 34:57.040
就是有一个 应该这样说啊 按照指定的条件对数组啊 对某个数组

34:58.320 --> 35:04.400
进行筛选 好 比方说我有一个数组啊 我一个数组 我要得到这个数组中 所有的击数

35:04.800 --> 35:10.080
一个新的数组啊 这个新数 新数组里边 是这个数组里边所有的击数啊 比方说

35:11.120 --> 35:19.440
那么 我们 第一要用这个函数 把这个数组传进去 然后呢 我要返回的得到了结果是什么呢 一三五十五啊 我要得到这么一个新数组

35:20.320 --> 35:21.360
要得到一个新数组

35:22.720 --> 35:26.480
好 当然呢 他不一定是函数 对吧 有可能是数数

35:27.280 --> 35:32.240
有可能是别的玩意儿 有可能这个数组里边每一项是对象 我们要写一个通用的东西

35:32.880 --> 35:34.640
就是按指定的条件

35:36.080 --> 35:40.560
其实你把第一道题做出来 第二道题自然就出来了 自然而来就出来了 一马上就想到了

35:40.800 --> 35:46.560
主要是一开始呢 你们想不到 根本就想不到 其实我现在都提示你了 要传毁掉函数

35:47.440 --> 35:52.000
条件就是一个毁掉函数 好 再比方说啊 再比方说

35:53.680 --> 35:58.480
写一个函数 我们把名字给写好啊 函数的名字都给你写好 呃

35:59.280 --> 36:01.360
这个第一个函数呢 叫做sort啊 sort

36:02.160 --> 36:07.200
第二个函数呢 推荐的名字叫做filter啊 filter 第三个函数呢 写一个函数

36:07.280 --> 36:11.600
呃 按照指定的条件

36:12.720 --> 36:17.280
查找什么呢 啊 查找该呃 就是

36:18.960 --> 36:19.760
呃 查找

36:21.120 --> 36:22.320
某个数组中

36:23.440 --> 36:26.560
呃 第一个满足条件的

36:27.200 --> 36:34.400
元数啊 得到某个数组中第一个满足条件的元数啊 我给大家取个名字叫fan的啊 叫fan的

36:34.800 --> 36:37.120
好 写这么三个函数啊 写这么三个函数

36:37.760 --> 36:40.400
好 再来练习一下 多练习一下啊 写一个函数

36:41.200 --> 36:44.320
啊 写个函数 按照指定的条件

36:45.120 --> 36:48.400
得到某个数组中啊 得到某个数组中

36:49.680 --> 36:59.840
呃 什么呢 呃 满足条件的元数数量啊 我给他取个名字叫court啊 court

37:00.960 --> 37:05.200
好 这些四个函数啊 四个函数啊 你把它写到这个介石里面

37:05.600 --> 37:11.040
尽量写啊 尽量写 肯定这个东西 你肯定要听我讲的 想都不用想 你肯定要听我讲

37:11.360 --> 37:16.800
哪怕你把写出来了 你要听我讲 但是你写出来到过后 我告诉你 你这个印象之深刻

37:17.200 --> 37:19.920
你这个成就感之强烈 一辈子都忘不了

37:20.640 --> 37:25.360
啊 你是自己思考出来的啊 一定要去想一想啊 有同学写出来过 非常非常厉害

37:26.320 --> 37:30.800
其实就是用到这些课的知识 就是要传一个毁掉寒水进去 你好好去想一想

37:31.520 --> 37:32.880
好吧 我们下期可讲

37:34.320 --> 37:39.840
好 这是这四个作业啊 四个作业啊 写到这里边啊 写到这个公共公共的介石里边

37:41.440 --> 37:44.000
啊 这是关于第一个点啊 函数表达式

37:45.120 --> 37:52.640
好 第二个点呢 是关于z 关键字啊 z 关键字 在我们的介石里边呢 有有一个关键字 叫做z 啊 叫做z

37:53.600 --> 37:55.200
好 这个关键字有什么作用呢

37:56.160 --> 38:02.080
啊 在 他有两种情况 第一种情况是在全局环境中

38:02.960 --> 38:05.440
就是全局作用预下 作用预中

38:07.040 --> 38:13.520
z 关键字 固定指向 指向谁呢 指向全局对象

38:14.560 --> 38:17.680
z 关键字 固定指向全局对象 好 比方说啊

38:18.880 --> 38:24.720
贴舌武 刚才有几道题用不到z 关键字 用不到

38:25.440 --> 38:30.400
好 这里呢 这里我们比方说啊

38:32.160 --> 38:38.000
输出z啊 就直接输出z 你看 他是个关键字啊 所以说你定义变量的时候呢 你不要用这个关键字

38:38.000 --> 38:44.320
也不要用这个名字啊 他是一个特殊的关键字 z 表示什么呢 这个啊 或者叫做我是谁

38:45.200 --> 38:49.040
我是谁呢 在全局环境下 我就是全局对象

38:50.720 --> 38:53.360
在全局的作用预中 我就是全局对象 看

38:54.080 --> 38:57.520
得到的是啥 z 是得到的是window 看到没有得到的是window

38:58.080 --> 39:01.600
我们甚至可以这样子来输出 z 是不是等于window对象呢

39:02.560 --> 39:04.960
保存看一下啊 q 看到没有

39:05.680 --> 39:10.400
在全局的环境里边 z 指向是固定的啊固定的

39:10.880 --> 39:14.720
好 他指向温的对象 那这个z 能不能改了 能不能改了

39:15.280 --> 39:19.360
好 保存看一下啊 保存看一下 他说什么了 他说

39:20.320 --> 39:22.240
错误的 就是无效的

39:23.120 --> 39:28.880
左边负质啊 就是应该说说负质符号的左边是一个无效的表达式

39:29.520 --> 39:34.480
负质符号左边你是只能写变量对吧 只能写变量啊 或者是写什么

39:35.040 --> 39:41.680
啊 就是变量对吧 就是变量 但是呢 你现在这种写法就不行啊 z 是不能负质的啊 z 是不能负质的

39:45.730 --> 39:48.690
z无法负质 他是自动的啊

39:49.250 --> 39:53.570
他的他的取值是自动的 好 在全局作用预下 z 呢 指向全局对象

39:55.890 --> 40:01.890
好 另外一个问题是我们马上要研究的啊 就是在函数作用语中

40:02.530 --> 40:09.170
就是你写到函数里边去了 里边的话函数作用语中 z 是指向谁

40:09.730 --> 40:11.970
啊 指向谁 他要分情况

40:13.410 --> 40:17.410
在函数作用语中 他z 是指向谁呢 他取决于两种情况

40:18.130 --> 40:27.730
取决于啊 取决于函数是如何被雕用的啊 是如何被雕用的这个函数

40:29.090 --> 40:39.090
好 那么 怎么来确定呢 第一种情况是函数直接调用啊 直接调用 那么 z 是指向全局对象

40:40.370 --> 40:43.090
只要这个函数是直接调用的 甭管你是什么情况

40:43.570 --> 40:48.930
只要你这个函数直接调用 那么你函数里边的 z 是指向全局对象的 咱们看一下

40:49.810 --> 40:50.450
比方说啊

40:51.570 --> 40:59.970
方可行 一个test 这个函数 对吧 这个函数 这里输出 输出什么 输出 z 是函数里边也可以用 z 是啊 也可以用 z 是

41:00.850 --> 41:02.050
好 接下来我们来看一下啊

41:03.410 --> 41:08.290
嗯 我们去调用这个函数 我们看一下 z 是的 z 是啥东西 保存看一下

41:08.530 --> 41:15.090
是吧 还是温的 对吧 还是温的对象 好 还有一些情况啊 比方说把它复制给变量b

41:15.970 --> 41:20.850
test 啊 不这样子调用啊 把test 复制给变量d 然后去调用变量b

41:21.890 --> 41:24.290
保存 你看 还是温的对象

41:25.410 --> 41:30.050
好 这就是第一种情况啊 第一种情况 在函数里边的第一种情况

41:30.850 --> 41:34.450
如果这个函数直接调用 那么 z 呢 指向的是全局对象

41:35.970 --> 41:37.970
好 再来 第二种情况

41:38.690 --> 41:43.970
我们通常利用的是它 第二种情况 就是在函数里边使用 z 是吧 我们通常不会在

41:44.530 --> 41:46.930
全局作用因为里边去使用 z 是通常都不会

41:48.690 --> 41:57.410
我们通常都是在函数里边去使用 z 是好 使用 z 是的时候 除了第一种情况之外 直接调用 第二种情况是通过一个对象调用

41:58.530 --> 42:01.170
通过一个对象调用

42:02.610 --> 42:06.210
也就是说什么格式呢 它的格式是这样子 格式为

42:08.370 --> 42:14.930
对象 点 属性 点 属性 然后呢 两个小货号 对吧 通过这样子来调用

42:15.250 --> 42:17.810
也就是说这个函数呢 它是对象的一个属性

42:18.610 --> 42:20.290
或者是什么呢 或者是

42:22.130 --> 42:22.690
对象

42:24.210 --> 42:25.890
属性 对吧 属性

42:26.290 --> 42:29.250
是不是一样的 对吧 一样的 都是通过对象的属性来调用

42:29.730 --> 42:33.890
通过对象的属性来调用 就通过一个对象的属性调用

42:34.530 --> 42:37.730
就是这个函数 它保存到对象的属性里边去了

42:38.370 --> 42:41.010
通过对象的属性来调用 是不是一样的 两个都是一样的 对吧

42:41.250 --> 42:43.250
就是属性的两种得到方式

42:43.810 --> 42:45.410
那么这个时候不一样了

42:46.610 --> 42:51.170
这种情况 z 指向谁的 指向对象

42:51.810 --> 42:54.450
指向这个对象 z 是指向这个对象的

42:55.410 --> 42:56.290
好 咱们来看一下

42:57.570 --> 42:58.770
好 我们这里复制一下

42:59.410 --> 43:02.210
还是这个例子 我们把它放到数组里边看到

43:03.170 --> 43:05.090
放到数组里边 b test

43:06.050 --> 43:08.450
好 你看这个 b 是不是在数组里边 对吧

43:08.450 --> 43:10.530
都是函数吧 两个函数都是一样的 对吧

43:10.530 --> 43:11.650
把它放到数组里边

43:11.650 --> 43:14.610
然后我们通过数组的 取数组的第一项

43:14.610 --> 43:15.490
然后来调用

43:16.130 --> 43:17.730
看一下输出了这个函数的 z 是

43:17.730 --> 43:20.610
你看函数没有变化 还是同一个函数 对吧

43:21.010 --> 43:22.450
函数还是这个样子

43:22.690 --> 43:25.490
但是我们调用的方式变了 不是直接调用

43:26.690 --> 43:29.970
而是通过什么 通过一个对象的属性

43:29.970 --> 43:31.570
你看零是不是对象的属性

43:31.970 --> 43:33.890
通过对象的属性来调用函数

43:34.290 --> 43:35.890
我们来看一下函数 输出什么

43:36.210 --> 43:37.090
这个 z 是输出啥

43:38.290 --> 43:42.780
保存 在运行 f 是

43:43.420 --> 43:45.100
刷新 你看输出啥

43:45.820 --> 43:49.020
它输出的是啥 输出的是这个数组 看没

43:50.060 --> 43:52.700
就是这里 z 是它指向这个对象

43:52.940 --> 43:54.700
就是我是谁 我是谁

43:54.860 --> 43:57.980
谁在调用我谁在调用我谁在调用我呢

43:58.780 --> 43:59.980
对象在调用我

44:00.540 --> 44:03.260
好 那么我就是个对象 z 是个对象

44:03.580 --> 44:05.020
看没 就是个对象

44:06.140 --> 44:07.900
好 再来 再来 再看一个例子

44:09.820 --> 44:13.500
一个对象 我们就写个对象 自己写个对象 obj

44:14.140 --> 44:16.300
好 这里边有些属象 有些属象

44:16.620 --> 44:18.780
比方说 a 是一个方形

44:19.500 --> 44:25.020
方形 输出 z 是个方形

44:25.500 --> 44:28.460
b 是一个对象 b 是一个对象

44:28.700 --> 44:31.180
b 有一个什么 x 随便写

44:31.580 --> 44:36.460
然后有一个 func 他又是个 func形

44:37.820 --> 44:42.060
console.log z 是把输出 z 是看一下

44:42.460 --> 44:44.620
这是个对象 这个对象里面有两个属性

44:44.620 --> 44:48.060
一个 a 一个 b  a 是一个函数 b 是一个对象

44:48.300 --> 44:50.700
而 b 这个对象里面又有两个属性 x 和 func

44:51.020 --> 44:52.460
func 的又是个函数 好

44:52.460 --> 44:56.140
OK 咱们去调用一下 obj.a 去调用一次

44:56.460 --> 44:59.180
再去调用一次 obj.b.funk

45:00.140 --> 45:01.660
把这个问题说清楚

45:02.620 --> 45:04.940
来看一下 调用 a 调用 b

45:05.180 --> 45:06.540
b 的对象里面的 func

45:07.100 --> 45:11.180
好 我们来看一下 这两个函数里面的 z 它调用的时候分别指向谁

45:11.580 --> 45:13.100
分别指向谁 保存

45:14.540 --> 45:16.700
首先看这个 a 我们把第二个注释掉吧

45:16.940 --> 45:19.980
首先看这个 a 调用这个 a 这个函数

45:20.300 --> 45:22.220
好 那么你觉得这个 z 指向谁

45:23.020 --> 45:28.780
谁在调用它 它运行的时候就指向谁

45:29.900 --> 45:36.140
谁在调用它呢 注意啊 z 这个东西一定是在运行的时候才能确定指向

45:37.100 --> 45:40.140
你写这个函数的时候 比方说啊 我现在不调用

45:41.340 --> 45:43.100
现在问你这个 z 是指向谁

45:44.300 --> 45:48.060
正确答案是未知 未知不知道

45:48.860 --> 45:52.860
它只有调用的时候才知道它是怎么调用的才指向谁

45:53.420 --> 45:58.460
你看着啊 我这样子调用 obj.a 调用的时候你看一下 z 是指向谁呢

45:59.260 --> 46:02.380
你看 是不是指向这个对象 对吧 输出的认识就是个对象

46:02.700 --> 46:05.260
就是对象本身 因为是通过对象的调用

46:05.820 --> 46:07.180
那如果我不是这样调用的呢

46:08.620 --> 46:11.180
还能咋调用呢 我就这样调用呗

46:11.660 --> 46:15.180
我把这 a 拿出来复制给 b 好来调用 b 来看着

46:15.740 --> 46:19.260
是不是同一个函数 同一个函数 但是我调用的方式变了

46:19.740 --> 46:23.020
调用的方式变了 你看 这第二次调用指向的就是温度

46:23.180 --> 46:26.620
看没 好如果我把上面的注释取消掉

46:26.940 --> 46:30.780
你看 就是第一次调用的时候运行的时候呢 z 是指向的是

46:31.580 --> 46:34.620
当前这个对象 obj 第二次调用的时候呢

46:35.100 --> 46:36.860
由于是直接调用的指向的是温度

46:37.180 --> 46:41.740
也就是说 z 他到底指向谁是不确定的啊 只有在运行的时候才确定

46:42.300 --> 46:44.940
你没有运行这个函数 他这他也不知道指向谁

46:45.260 --> 46:47.340
他不是不知道指向谁 你看这个意思吧

46:48.140 --> 46:49.900
看没 他变成这个样子

46:51.420 --> 46:54.700
这里非常容易出面识题哦 z 的指向是非常容易出面识题的

46:55.180 --> 46:58.380
也把规则记住就行了 像这种面识题 这其实就是个面识题

46:59.020 --> 46:59.980
然后问你指向谁

47:01.580 --> 47:08.180
好 然后呢 下面 下边 obj.b.funk

47:08.660 --> 47:11.540
你看 通过这样的方式来调用 那么他又指向谁呢

47:12.020 --> 47:13.780
他又指向谁呢 这里边的意思

47:14.660 --> 47:17.940
你看哪个对象来调用他 是不是 b 这个对象来调用他

47:18.100 --> 47:21.380
对吧 看成一个整体对吧 通过这个对象来调用他

47:21.540 --> 47:22.980
那么指向的是谁 指向的是 b

47:23.300 --> 47:25.540
指向的是 b 包存

47:26.340 --> 47:29.860
你看 他指向的是 b 这个对象 x 属性 funk 属性

47:30.740 --> 47:34.500
看没 OK啊 搞清楚啊 z 的指向

47:35.140 --> 47:37.860
好 z 指向有什么意义呢 他有啥意义呢

47:38.740 --> 47:41.060
看着 看着啊

47:43.300 --> 47:45.540
比方说 我有一个对象 有个对象

47:46.100 --> 47:50.100
这个对象里边呢 有这么一些属性

47:50.820 --> 47:57.620
比方说 first name 就是性嘛 性 比如说我姓圆

47:59.700 --> 48:04.180
然后呢 last name 表示就是

48:05.300 --> 48:09.540
其实在英语的环境里边 last name 表示的是性 对吧

48:09.860 --> 48:13.140
first name 表示的是名 但是我们按照中国的教法 对吧

48:13.780 --> 48:16.020
好 这是我的名字 对吧

48:16.420 --> 48:19.060
然后呢 我们写个函数 名字叫做 say hello

48:19.620 --> 48:23.860
这个函数 好 给这个属性负责 它的值的是一个函数

48:24.980 --> 48:27.780
好 我要给大家打个招呼 打招呼怎么打招呼呢

48:28.180 --> 48:31.060
比方说我的年龄 对吧 无必要年轻啊 我就18岁

48:31.540 --> 48:35.860
好 然后呢 我给大家打个招呼 就输出这么一句话啊 输出这么一句话

48:36.420 --> 48:39.140
呃 这句话呢 是这样子写的啊

48:42.180 --> 48:44.020
我叫啥啥啥啊

48:44.980 --> 48:52.100
然后呢 今年多少多少税了啊 就输出这么一句话

48:52.820 --> 48:58.340
好 关键是这里写啥 这里写啥 你能不能把写死啊 你能不能把这东西写死

48:58.740 --> 49:03.140
写死的话 以后属性的名值也改变啊 外面可以改变属性的值的 对吧

49:03.540 --> 49:08.420
可以改变了属性的值啊 比方说 last name 呢 变成击成对吧

49:09.380 --> 49:14.500
然后呢 ob 界点 first name 呢 first name 这个是 first name

49:15.140 --> 49:22.020
这个是 last name 好 把它变成成对吧 是可以改的 那改了过后这礼拜咋办了对不对

49:22.020 --> 49:29.380
你不能把它写死 好 也就是这里我要动态的获取 你运行这个函数的时候 我获取到你当前的性和名

49:30.580 --> 49:31.460
好 怎么来获取呢

49:31.700 --> 49:42.820
当前的性和名 我们是不是可以用这种方式啊 z 第2 z 第2 啥呢 第2 first name

49:43.460 --> 49:48.020
对吧 z 是指向谁 因为这个函数它要通过它来调用 对吧

49:48.500 --> 49:53.860
有些朋友说 然后我不通过它了 我像之前的样子 之前的样子把它付到个变量里面 那就不行了 那就不行了

49:54.100 --> 49:59.460
我们就假设吧 假设 希望是它通过它来调用 那么这个z 是不是指向它

49:59.860 --> 50:04.820
对吧 指向当前这个对象啊 指向当前这个对象 我叫first name

50:05.300 --> 50:09.140
好 然后呢 这里再加一个啊 再加一个 z

50:10.180 --> 50:12.340
not a name 啊 多少说的呢

50:14.340 --> 50:20.020
z 当前这个对象啊 就是我我是谁 我就是这个对象啊 z 点 a g

50:21.380 --> 50:24.900
好 今天这么多说了 好 看着啊 看着

50:28.220 --> 50:30.380
好 这里呢 我们这样的调用 ob 界

50:31.020 --> 50:39.360
say hello 保存 看一下 你看 是不是输出了 正确的输出了

50:40.080 --> 50:46.400
因为z 是正确的获取了 z 呢 它通过它来调用 通过它来调用 那么就得到了这样的结果

50:47.040 --> 50:51.920
好 如果你给我玩烧的 你把这个东西

50:52.400 --> 50:55.840
保存到变量里面 那还能正常调用吗 这样子还能不能正常调用

50:56.160 --> 51:02.000
它就不冷了 这就变成温斗了 温斗这里边没有啊 没有这个玩意啊 保存看一下 还是 安迪范的

51:02.480 --> 51:08.400
看没 就是安迪范的 所以说 我们对象里面的函数呢 尽量不要用这种方式啊 不要用这种方式

51:09.040 --> 51:16.480
z 是在运行的时候才能确定 好 比方说啊 我把这个 first name 和 last name 改一下 改一下过重新调用 你看 它跟着变了

51:16.800 --> 51:18.800
啊 因为它动态的获取当前对象的东西

51:19.440 --> 51:23.200
保存啊 你看 是不是 跟着变了啊 跟着变了

51:23.920 --> 51:28.560
哦 对不对啊 这个它是 这个还要改一下年龄 对吧 改一下年龄

51:29.280 --> 51:34.000
好 保存 好 你看一下 是跟着变了 没问题吧

51:36.000 --> 51:43.280
好 这是在z 是在对象里边 我们常经常都会这样子使用啊 在对象里边去使用这个z啊 z

51:44.720 --> 51:49.680
好 有些朋友有疑问 他说 啊 看着啊 他问的非常好

51:50.480 --> 51:57.680
他说 那这里可以用z 是可不可以用ob界呢ob界不是更好吗 你管理怎么调用 我都用的是ob界

51:58.640 --> 52:04.880
为什么不能用ob界不是更好 对吧啊 你管理 比方说啊 你把它复制到一个 把这个函数复制到一个变量里边去

52:05.360 --> 52:09.360
调用变量 他也是用了ob界 这样子不是更好吗 对不对

52:10.160 --> 52:13.680
好 为什么不能这样子用啊 告诉大家为什么不能这样子用

52:14.720 --> 52:22.240
实际上呢 我们做操作的时候 把这个东西复制给变量 像这个操作呢 还比较少啊 这种操作是比较少的

52:22.880 --> 52:27.840
这种操作比较少 但是呢 我们很有可能会做这么一个操作 大家看 看着啊

52:28.800 --> 52:30.720
如果你这样子写了过后 就会有隐患

52:31.680 --> 52:40.480
因为你认为 你认为这个对 这才是对象 对吧 这才是对象哦 你不要搞错了 这才是对象 这里面存放的是对象的地址

52:41.600 --> 52:44.400
好 如果你用ob界的话 你就

52:45.040 --> 52:50.080
安含了一个条件 就是ob界这个变量里边一定要指向

52:50.960 --> 52:53.120
这个对象 一定要指向这个对象

52:53.920 --> 52:56.480
好 那假设有一天 我这样子写了

52:58.780 --> 53:05.260
我把ob界复制给了ob界2 然后ob界呢 变成了另外一个东西了啊 重新给它复制了 变成了一个数字

53:05.900 --> 53:13.500
假设嘛啊 像这个这个操作很常见的 变量复制啊 保存一下 然后把它重新改变 很常见的

53:13.980 --> 53:16.140
然后呢 我们再去调用ob界

53:16.780 --> 53:23.340
第二 say hello 能调用吗 首先它是一个数字了 对吧 这样子肯定不能调用 它是一个数字了

53:23.820 --> 53:27.740
啊 它说不是一个方形啊 say hello 不是个方形 因为它是一个数字

53:29.180 --> 53:30.220
数字没有这个函数

53:31.340 --> 53:35.900
好 我们当然可以想到 可以使用ob界2来调用 对吧ob界2来调用 保存

53:37.580 --> 53:40.380
啊 它说undefend undefend undefend 为什么呢

53:40.940 --> 53:48.460
为什么是undefend的 因为ob界现在不再是这个对象了 它变成了变成了一个数字 数字里边本来就没有这个属性 对吧

53:48.700 --> 53:54.460
数字里边没有这个属性 也数字里边也没有这个属性 是不是要出问题 但是用rish就不会出问题

53:55.020 --> 53:57.260
rish它始终指向的是对象

53:59.500 --> 54:01.980
它指向的是当前对象 指向的是这个东西

54:03.020 --> 54:11.660
你只要通过这个对象来调用 你看ob界2它是不是指向这个对象 对吧 通过这个对象来调用这个函数 那么rish呢就指向的是这个对象

54:12.300 --> 54:12.860
这个对象

54:13.340 --> 54:20.220
你可以这样理解啊 谁在谁在使用say hello 它在使用say hello 那么rish就指向它

54:21.500 --> 54:27.100
那你说ob界使用say hello呢ob界不好意思 现在用不了say hello 它没有没有这个东西 它是数字了

54:27.660 --> 54:31.340
我们通过ob界2来使用say hello 谁在用它 那么rish有指向谁

54:32.140 --> 54:34.220
好 保存看一下 仍然可以

54:35.420 --> 54:40.780
看到没 所以说这里最好使用rish 表示当前对象 表示我我的东西

54:41.740 --> 54:46.060
好吧 这是关于rish关键字啊 也是我们经常以后 经常会用到的

54:47.180 --> 54:51.260
以后呢 我们经常会写这么一个对象 把函数放进来

54:51.820 --> 54:54.940
函数放进来 那么我们要在这个对象里面使用到这个

54:55.500 --> 54:59.500
当前的 当前的就是函数的话 我们就可以使用rish 就可以使用rish

55:00.860 --> 55:03.420
其实我们以后在开发中经常会写怎么样写呢

55:03.740 --> 55:08.060
就是比方说啊 咱们之前不是见了一个这个东西吗 对吧 这里面写的很多函数

55:08.460 --> 55:11.500
那我们按照上节课的指示 这些函数是不是全部会污染

55:12.060 --> 55:15.020
全局变量了 都会对全局变量进行污染

55:15.660 --> 55:18.540
所以说呢 我们会怎么写呢 我们会怎么写 我们

55:19.740 --> 55:24.940
会把这些函数呢 写到一个对象里面 尽量减少污染 当然这里这里是没发

55:25.260 --> 55:28.220
没发去掉污染的 为什么 因为我就是希望

55:29.100 --> 55:31.340
外面的人可以使用这些函数

55:32.380 --> 55:32.860
如果你

55:33.580 --> 55:35.580
不污染的话 你别人怎么使用了

55:36.140 --> 55:38.780
对不对 你把这个地方全部变成立即执行函数

55:39.260 --> 55:44.380
那外面就用不了了 那什么意义了 我就是希望外面能调用这些函数 污染肯定是避免不了的

55:45.820 --> 55:50.780
并不是说污染就一定是坏事 有的时候就是要污染 因为我要让别人用这些函数

55:51.340 --> 55:56.380
但是这里污染太多了 太多了 我会怎么办呢 更加合适的做法

56:00.700 --> 56:02.700
better 方可行

56:03.660 --> 56:05.900
更加合适的做法是什么做了 我这样子写

56:06.380 --> 56:12.140
我给大家举个例子 今天作业呢 你们就可以用这种方式 也可以把之前的改造一下 改造成这种方式

56:13.900 --> 56:18.460
怎么写呢 我就写一个 我就写一个辩量 一个辩量

56:20.700 --> 56:21.020
my

56:21.500 --> 56:22.140
方可行使

56:23.420 --> 56:30.380
来方可行使 把它当成一个对象 你看 现在有没有污染 有污染 但是呢 只有这个 只有这个名字有污染

56:30.860 --> 56:36.540
对吧 这个名字变成了一个全局的温度对象的属性 只有它有污染

56:37.180 --> 56:42.140
把函数全部作为它的属性 写到这里边 这样就很好了 比方说

56:43.020 --> 56:47.580
什么函数呢 这里边有这么多函数 对吧 什么 is odd 对吧 is odd

56:48.380 --> 56:49.340
is odd 函数

56:50.220 --> 56:55.660
来写 is odd 函数 传一个数字 n 然后呢 反回这个 n 是不是一个击数

56:56.220 --> 57:02.220
你看 最小玩了 一个函数 好 逗号 第二个函数 第二个函数

57:03.180 --> 57:06.940
比方说比方说 isnip isnip 我们把这个复制过来吧

57:08.140 --> 57:13.460
isnip 这样子 稍微改一下 变成这个样子

57:14.100 --> 57:18.980
判断一年 是不是润年 对吧 当然那你可以打出是吗 可以不可以打出是 当然可以

57:19.860 --> 57:20.580
当然可以

57:21.540 --> 57:29.470
当然可以打出是 判断一年 是不是润年 那我们到时候怎么用这个函数呢

57:29.870 --> 57:36.350
看着啊 买方形式 isnip isnip 你看 把函数传进去 是不是一样的

57:36.910 --> 57:40.990
对吧 你看像这些函数就没有污染权具变量 他只有这个东西污染了

57:41.470 --> 57:43.310
这种模式呢 叫做单对象模式

57:46.350 --> 57:47.150
单对象

57:47.870 --> 57:55.310
模式 就是我有没有污染权具变量避免不了 避免不了 我只能用一个变量污染权具

57:55.710 --> 58:01.230
因为别人要用嘛 对吧 所以说你必须要提供给他们 污染权具变量 但是呢

58:02.350 --> 58:08.430
只污染了一个 其他的所有东西都在这个对象里面 单对象模式 也叫做命名空间

58:09.070 --> 58:14.750
也叫做命名空间模式 就是这个东西呢 好像是个空间里边装了很多东西

58:14.910 --> 58:18.430
我们要访问这些函数的时候呢 只通过这个对象来访问的

58:19.710 --> 58:22.750
好 包括包括什么呢 包括什么 后面不是有那个

58:24.190 --> 58:28.110
某年某月的天数嘛 对吧 得到某年某月的天数啊 直接复制一下

58:29.630 --> 58:34.510
得到某年某月的天数 把他稍微赶一下啊 稍微赶一下 先到前面来

58:35.310 --> 58:36.990
好 得到某年某月的天数

58:38.270 --> 58:42.350
好 这样子写 可不可以 当然可以 好 这里边要调用之前的

58:43.070 --> 58:47.950
比方说 在下面这个函数里边 下面这个函数里边 要调用之前的一些

58:48.910 --> 58:55.230
调用这个对象里边 其他的函数 那怎么调用了 我们这里要加 不能直接调用啊 不能直接调用

58:55.870 --> 59:01.150
这里是不能直接调用的 为什么不能直接调用 我们之前说过 函数里边可以用外边的东西吗 可以

59:01.550 --> 59:03.390
但是注意 这个不叫外边

59:04.590 --> 59:10.750
可以用外边的啥 外边的变量 可以用外边的生命的函数 但是外边这才叫外边

59:11.230 --> 59:13.390
这才叫外边 外边有没有东西

59:14.030 --> 59:18.510
没有生命过函数 所以说你这里不能这样使用啊 那你只该怎么来用这个EaseLeap呢

59:19.470 --> 59:20.910
z 点EaseLeap

59:21.630 --> 59:27.550
啊 因为这个EaseLeap是不是当前对象的 对吧 当前对象的这个EaseLeap 那么z呢就表示当前对象

59:27.870 --> 59:30.670
你到时候调这个函数的时候 怎么调的 怎么调这个函数的

59:31.150 --> 59:31.630
看一下啊

59:32.910 --> 59:35.150
你到时候调用这个函数 是my function 是第2

59:36.110 --> 59:37.870
guess this 对吧 调这个函数

59:38.830 --> 59:43.870
那么这个函数里边的z 是不是指向它的 对吧 指向它 谁在调用它就指向谁

59:44.750 --> 59:47.310
那么就得到zEaseLeap

59:48.030 --> 59:51.390
通过当前对象里面得到zEaseLeap 通过这样子来调用

59:52.030 --> 59:54.590
啊 同样的这里是order z isorder

59:54.910 --> 59:56.750
这里是order z isorder

59:57.950 --> 01:00:00.270
看没 是吧 就完了啊 就完了

01:00:01.070 --> 01:00:03.310
好吧 那今天我们的作业啊 作业

01:00:04.270 --> 01:00:07.490
来 买方形式

01:00:09.010 --> 01:00:09.650
作业呢

01:00:11.330 --> 01:00:13.330
啊 起到前面啊 第1个作业

01:00:20.400 --> 01:00:22.400
好 第1个作业就是改造啊

01:00:23.360 --> 01:00:28.240
将之前的 什么了 之前的my function

01:00:28.640 --> 01:00:31.360
点儿介绍啊 改造成为

01:00:32.000 --> 01:00:33.920
改造成为单对象

01:00:35.760 --> 01:00:40.000
单对象模式啊 单对象模式改 改造一下啊 改造一下

01:00:40.480 --> 01:00:42.640
最好是新建一个吧 不要去改以前的

01:00:42.640 --> 01:00:44.960
因为以前的有测试 之前代码都要用 对吧

01:00:45.200 --> 01:00:47.120
所以说就好不要改以前的啊 新建

01:00:48.160 --> 01:00:50.160
新建一个battle

01:00:50.720 --> 01:00:51.760
battle

01:00:51.760 --> 01:00:52.320
方可形

01:00:53.040 --> 01:00:57.200
点儿介绍啊 将之前的my function点儿介绍呢 改造成为单对象模式

01:00:57.920 --> 01:01:00.640
好 并在里边加上这些新的内容

01:01:01.600 --> 01:01:03.280
并在里边加上这些新的内容

01:01:04.640 --> 01:01:06.960
好了 这是我们这里和要做的啊 这是作业

01:01:07.440 --> 01:01:13.440
好 然后呢 下来啊 下来了我这里没写到作业里边啊 下来去练习一下这个

01:01:14.400 --> 01:01:15.280
练习一下这个

01:01:16.080 --> 01:01:20.000
你就随便写个对象啊 写个用户对象 像我这样子练习一下

01:01:20.400 --> 01:01:24.400
有这么个感觉的 光看是没用的啊 光看呢你只是知道有这么个东西

01:01:24.560 --> 01:01:29.120
你没去写过的话 你手势很陌生的 你身体没有对它形成记忆

01:01:29.360 --> 01:01:34.400
所以一定要去写一次啊 练习一下这个这一次 就就拿这个例子来练习啊练习一下这一次

01:01:35.360 --> 01:01:41.120
好了 这是关于这几课 这一课东西非常非常重要啊 以后呢我们就会经常看到这个Z式关键词

01:01:41.440 --> 01:01:43.520
已经到这个函数表的时候会经常看到

01:01:44.080 --> 01:01:46.480
好了 就去完成一遍啊 下期和我们来讲作业

