WEBVTT

00:00.000 --> 00:15.790
好 这一张咱们来学习运算符

00:16.750 --> 00:24.390
之前那个章节啊 就第二张的时候呢 我学习的是借使语法基础对吧 在这个章节里边呢 我们说一下吧 第二张啊

00:24.950 --> 00:29.070
第二张咱们主要学习的是咱呢 是变量和数据内向

00:29.470 --> 00:34.750
这是非常非常核心啊 对于一个语言来说非常非常核心的内容 其实咱们不管学习

00:35.310 --> 00:40.990
什么借使语言啊 加把语言啊 或者是其他语言 最先学习的都是这种啊 变量和数据内向

00:41.950 --> 00:45.870
把这个东西学习了之后呢 才有后边的东西啊 因为后边的东西呢 都要用到这个玩意

00:46.630 --> 00:55.870
其实啊 有些朋友老是在问啊 就老实说 我想 我不知道我学哪门语言比较好 比方说学借使好啊 还是学 c 语言好啊 还是学加把语言好啊

00:56.230 --> 01:04.670
还是说学c下谱语言好 我觉得吧 真的别纠结 你就找一种最流行的语言来学就完事了啊 比方说

01:04.790 --> 01:10.110
加把script 对吧 现在很流行学 或者是你们以后想走家吧 又学

01:10.910 --> 01:14.590
学两种语言不是很浪费时间吗 一点都不浪费时间 我告诉大家

01:16.110 --> 01:26.110
就语言基础来说啊 就基础部分 嗯 来说的话 你如果掌握了一门语言 再去学习另外一门语言 速度非常非常快

01:26.830 --> 01:30.830
我告诉大家 我之前啊 之前在学校里边的时候呢 学的是c语言

01:31.390 --> 01:38.430
然后呢 后来学了c下谱语言啊 c 连后来很多东西都忘了 平时没这么用嘛 后来呢 用的主要是用的是c下谱语言

01:38.830 --> 01:46.270
而c下谱语言呢 用了大概有多少年了 有两三年吧 两三年 然后后来呢 因为种种原因啊

01:46.830 --> 01:54.110
我要需要去用到加把语言 你知道我加把语言看了多久吧 我把它面向就像那些东西看全部看完啊 看了多久就知道吗

01:54.830 --> 02:02.670
就一个下午真的就一个下午啊 好像那天我中午在公司里边睡了午觉起来啊 把这个加把那个就是

02:03.310 --> 02:04.510
那个文档啊doc

02:05.390 --> 02:12.350
把加把文档打开打开过后了就看看到下午大概快四点过五点过吧 基本上搞清楚了

02:12.830 --> 02:18.110
不仅搞清楚了 我还发现了这个加把语言里边有一些东西是有问题的

02:18.510 --> 02:24.110
很多加把程序人都没发现啊 比方说加把里边有一个东西叫犯刑对吧 我当时看那个犯刑我感觉不太推荐

02:24.430 --> 02:28.270
我去试验了一下 哎 发现那个加把犯刑是假的 后来我去查一些资料

02:28.750 --> 02:34.990
哎 发现犯刑真的是假的啊 真的是假的 这个国内呢 这个博客里边说的很少啊 说的这个问题说的很少

02:35.150 --> 02:39.710
但是发现这个问题确实一直存在 不知道现在有没有修复这个问题啊 应该是没有修复

02:41.310 --> 02:44.030
为什么呢 为什么学的这么快呢 不是因为我聪明 是因为

02:44.270 --> 02:49.630
以之前已经掌握了一本语言过后 再去学习另外一本语言真的是非常非常的快

02:50.750 --> 02:58.110
所以说大家不用去纠结这个到底先学哪个语言好 直接找一个比较流行的语言 比方现在流行的是吗 加把script 对吧 和加把语言

02:58.670 --> 03:01.870
就拿来学 对吧 拿来学就完事了 不用去纠结啊

03:03.550 --> 03:08.430
第二张呢 我们讲了就是变量和数据内想 我为什么要说这个啊 就是因为我说

03:08.750 --> 03:12.830
你学完一本语言过后再去看另外一本语言 你基本上知道它的套路了

03:13.150 --> 03:19.070
它的套路就是这个 什么语法基础 变量和数据内想 然后运算符 然后流程控制 基本上就是这样子 然后含数数组

03:19.790 --> 03:26.830
基本上都是这样子 好第二张呢 我们学到变量和数据内想 这里面解决什么问题呢 解决到数据存放问题

03:27.630 --> 03:32.350
解决数据存放问题 我们的数据要怎么去存 我们解决这个问题

03:32.670 --> 03:36.350
但是存了之后呢 我们做了什么事呢 啥都没做 又把数据拿出来输出

03:36.510 --> 03:44.110
所以说 如果你仅仅学习变量和数据内想了 没什么意义 你只知道怎么存数据 那么这一张我们要学啥呢 第三张

03:45.150 --> 03:46.910
学习的是运算符

03:47.630 --> 03:52.670
这个运算符呢 要做什么事呢 就是解决数据运算的问题

03:53.710 --> 03:56.910
就是要把数据拿出来各种处理啊 各种花式处理

03:57.390 --> 04:04.910
那么就解决这个问题 当然那运算符呢 很多同学可能马上就想到什么加减成熟 对吧 当然这些是运算符啊 毫无疑问是运算符

04:05.230 --> 04:11.710
但是我们在程序里边运算符要多很多 不仅仅是加减成熟啊 还要多很多 我们慢慢来学习吧

04:12.190 --> 04:21.470
好吧 好 首先呢 这这张点很重要啊 这一节课很重要 概述这一课 不要看到这概述马上挂挂 千万别挂啊 千万别挂 有一个非常非常重要的概念

04:22.270 --> 04:27.310
好 首先我们今天讲解一个概念叫做操作符和操作数

04:28.510 --> 04:30.830
操作符和操作数 这什么意思呢

04:31.150 --> 04:36.910
操作符啊 操作符其实就是运算符 就是运算符

04:38.030 --> 04:50.030
就是参与运算的符号 参与运算的符号 比方说加减成熟 对吧 这个加减成熟呢 就是指的是操作符啊 就这么一种说法啊 也叫做运算符

04:50.830 --> 04:54.750
什么是操作数呢 操作数呢 是指参与

04:55.710 --> 05:05.150
运算的数据啊 参与运算的数据 比方说1加1等于2 对吧 那么那个加号呢 就是操作 操作符也叫做运算符

05:05.790 --> 05:14.990
那么1和2个1呢 就表示操作数啊 就参与运算的数据啊 这是一个概念性的东西啊 了解一下就行了 了解一下就行了

05:15.630 --> 05:19.230
操作数呢 也叫做啊 由于另外一种叫法 叫做员

05:19.790 --> 05:27.390
员啊 也称之为员 这个员啊

05:30.030 --> 05:35.310
称之为员 好 这是一种叫法啊 了解一下就行了啊 这是关于操作符和操作数

05:35.710 --> 05:40.030
我这里主要说一下 说一下这个问题 操作符呢 不一定

05:40.990 --> 05:47.790
只有一个符号啊 只有一个符号 比方说后边我们要接触的符号啊 比方说什么符号呢 小扩号

05:48.750 --> 05:54.910
小扩号是不是操作符 是不是个运算符 他也是个运算符啊 也是个运算符 那么他就是两个符号 对吧

05:55.150 --> 05:58.910
比方说后面要接触的佳佳 什么佳等于什么温号 冒号

05:59.470 --> 06:04.910
有些操作符呢 他不一定是一个符号 那么比方说加号他是一个符号 减号也是一个符号 对吧

06:05.470 --> 06:08.990
操作符呢 但是不一定啊 不一定只有一个符号 这个大家了解一下

06:09.710 --> 06:15.870
另外呢 另外呢 操作符出现在不同的位置

06:16.750 --> 06:21.070
不同的位置可能具有不同的含义

06:22.030 --> 06:25.310
这什么意思呢 啥意思呢 比方说啊 比方说

06:27.310 --> 06:31.310
嗯 这里边呢 我们这里输出一个 输出一个

06:32.670 --> 06:37.070
我们直接写吧 干嘛输出了 1加1 比方说输出这么一个东西 一个1加1

06:37.630 --> 06:40.430
1加2吧 这个操作符什么意思呢

06:41.070 --> 06:47.070
这个操作符表示的是表示的是加号 加号 表示把两个数相加

06:47.790 --> 06:50.270
好 如果我这样子写呢 加

06:51.630 --> 06:53.470
1.2啊 就随便写啊 随便写

06:53.950 --> 06:58.030
那么这个加出现在出现在一个数字的前边 前面没有任何东西 他表示什么呢

06:58.270 --> 07:02.030
表示的是这是一个正数啊 这是个正数 可以这样写啊 可以这样写

07:02.510 --> 07:06.030
如果你写个减号呢 就表示的这里是个负数啊 表示个负数

07:06.270 --> 07:08.190
如果你把减号写照呢 就表示减法

07:08.670 --> 07:14.110
所以说 这个操作符啊 出现在不同的位置呢 可能具有不同的含义啊 不同的含义

07:14.750 --> 07:18.030
咱们之前 目前啊 目前接触的操作符

07:18.910 --> 07:20.510
接触的操作符

07:21.070 --> 07:24.670
有什么操作符呢 目前接触的操作符有两个啊 有两个

07:25.150 --> 07:28.990
嗯 应该说有三个吧啊 严格来说有三个

07:29.630 --> 07:30.910
啊 第一个呢 是一个

07:31.630 --> 07:32.350
是一个这个东西

07:33.310 --> 07:39.070
一个底 应该说这个 第一个是一个等号啊 是一个等号 表示负值符号啊

07:40.430 --> 07:45.230
负值符号啊 我为什么要这样子写呢 表示这个三个标 中间是代码啊 我们看一下马克当

07:46.190 --> 07:50.270
马克当里面你看 中间表示这一块 这一块是个代码啊 一个等号

07:50.590 --> 07:55.390
表示是负值符号 他指的是将右边的东西啊 将右边的数据

07:56.270 --> 07:58.270
将右边的数据

07:58.750 --> 07:59.470
负值给

08:00.030 --> 08:05.710
左边啊 左边可能是一个对象的属性 也可能是一个边量 对吧 这是个负值操作符

08:06.350 --> 08:10.910
好 还有什么操作符呢 还有一个操作符呢 大家没有怎么留意 就是个底耳操作符

08:12.270 --> 08:14.190
底耳操作符 这个叫做啊

08:14.670 --> 08:18.510
用中文的话 跟怎么翻译叫访问操作符啊 访问符号

08:18.990 --> 08:20.350
指的是通常用于

08:21.150 --> 08:22.990
访问对象的

08:23.550 --> 08:27.950
属性啊 通常用于访问对象的属性啊 比方说我们平时怎么写代码的

08:28.670 --> 08:30.670
比方说 啊 随便找一个啊

08:38.460 --> 08:39.260
中文就出不来

08:42.460 --> 08:43.900
比方说我们这里写上

08:44.140 --> 08:45.580
console.log 对吧

08:46.060 --> 08:49.020
console.log 这个底耳是不是操作符啊 就是个操作符啊

08:49.340 --> 08:53.420
表示访问这个对象的某个属性啊 访问这个对象的某个属性

08:53.900 --> 08:55.020
对吧 OK啊

08:55.580 --> 09:00.300
好 其实访问操作符呢 我们还有一个啊 还有一个访问操作符 什么操作符呢

09:00.940 --> 09:03.180
我们学到其实还不只不只三个了啊

09:03.660 --> 09:08.140
两个中课号是不是也叫做介绍过的 对吧 它也是访问符号啊 访问符号

09:08.460 --> 09:12.460
它用于访问对象的属性啊 是不一样的 对不对

09:12.860 --> 09:16.300
两个中课号也可以访问对象的属性啊 我们之前也写过对吧

09:16.860 --> 09:20.140
这里一个电量obj啊 一个a 随便写吧

09:20.780 --> 09:25.580
好 这里我们访问这个a这个属性啊 我们可以这样子写啊 obj 两个中课号啊 这里写上个a

09:25.740 --> 09:26.140
看没

09:26.540 --> 09:28.780
这也是一个操作符啊 也是个操作符

09:29.100 --> 09:34.140
那么这些操作符呢 有于太常见了啊 我们也知道怎么去用啊 我们就不详细说明了啊 没什么说明的

09:34.540 --> 09:38.700
没有什么更多的规则了啊 就表示了操作一个对象的属性啊 就这么简单

09:39.580 --> 09:43.020
好 然后呢 还有什么操作符呢 还有这个操作符啊

09:43.900 --> 09:45.660
这个操作符 两个小课号

09:46.380 --> 09:52.860
两个小课号 它有很多种用法啊 两个小课号呢 这里的两个小课号指的是韩数调用啊 韩数调用

09:53.820 --> 09:58.140
什么意思呢 你看 这是个韩数啊 韩数我们现在还没有讲 还没有讲

09:58.460 --> 10:03.900
那么你先有这么概念啊 有这么一个印象啊 这个东西叫做韩数调用 你看 两个小课号拿过来

10:04.220 --> 10:11.020
叫做韩数调用 调用这个韩数啊 就好必说使用某个功能 就这个意思啊 使用这个

10:11.420 --> 10:17.020
控制台打印的功能 就这么个意思啊 这是两个小课号 当然后边呢 我们还会学习一个两个小课号

10:17.340 --> 10:23.100
就是改变优先级 对吧 我们一串一串数学运算 有些优先级啊 先运行哪个哪一块

10:23.420 --> 10:26.460
可以用小课号 那个小课号是不一样的啊 是不一样的

10:26.860 --> 10:31.420
当小课号出现在某个单词后边的时候 表示的表示的意思呢 表示的是

10:31.660 --> 10:36.140
把它当成一个韩数调用啊 把它当成一个韩数调用 是这么个意思啊 这么个意思

10:36.700 --> 10:43.980
好 这是叫做韩数调用 就是目前接触的操作符 对吧 就这么一些啊 了解一下就行了啊 这一操作符很简单 非常非常简单 一说就明白了

10:44.780 --> 10:51.180
好 这是关于操作符和操作数 好 下个概念啊 就是运算符的分类啊 运算符的分类

10:51.580 --> 10:58.620
好 这里分类呢 简单了解一下啊 这些都不是重点啊 这些概念性质的 面试的时候也不会考 也不会影响我们学习

10:58.700 --> 11:05.900
所以说了解一下就行了啊 运算符的分类 就是有的时候呢 跟别人同事聊一下吹牛的时候呢 别人说到一些数语呢 也可能不知道什么意思啊

11:06.140 --> 11:07.580
所以说主要是体制这么一个作用

11:08.140 --> 11:17.580
好 运算符分类呢 有两种分类方式啊 通常有两种分类方式 一种是呢 就是运算符的啊 就是操作数数量

11:18.140 --> 11:26.540
应该这样说啊 按操作数数量区分啊 按操作数数量区分 那么有这么三种啊 一元

11:27.740 --> 11:28.860
一元运算符

11:31.020 --> 11:33.900
二元运算符

11:35.100 --> 11:36.780
三元运算符

11:37.500 --> 11:43.500
啊 这个的元呢 有的时候也称之为目啊 也称之为目 一目运算符 二目运算符 三目运算符

11:45.260 --> 11:47.260
这是一种称呼啊 这是一种称呼

11:48.220 --> 11:54.780
好 那么比方说啊 一元运算符有哪些呢 一元运算符啊 有这么一些 然后两个小括号啊

11:55.420 --> 11:59.420
这个字 这个两个小括号说清楚啊 我跟你说清楚啊 不要以后以后来误解我啊

11:59.820 --> 12:03.740
这两个小括号指的是函数调用啊 函数调用啊

12:04.140 --> 12:10.460
如果是什么就是那个 啊 当然那个就是什么改变优先级的小括号呢 也是一元的啊 一元的

12:10.780 --> 12:17.020
一元运算符 而比方小括号还有什么底儿 对吧 底儿啊 调用某个函 调用某个对象的属性 对吧

12:17.740 --> 12:23.580
啊 因为他的运算符他后 前面只能出现一个一个对象 你不能左 左边一个对象右边一个对象吧 不能吧

12:24.540 --> 12:29.340
这是个一元运算符啊 不用去纠结啊 不用去纠结 我们这里简单聊一下就行了

12:29.660 --> 12:31.260
好 二元运算符呢

12:31.980 --> 12:37.340
还有一个中括号对吧 二元运算符呢 比方说加号对吧 加号要两个数相加吧

12:38.540 --> 12:50.860
减号两个数相减吧 这里原就指的是操作数啊 操作数 减除啊 成 对吧 还有很多了 求予 包括复职 对吧 复职符号要把右边复职给左边 要有两个东西吧

12:52.300 --> 13:00.380
三元运算符呢 三元运算符只有一个啊 问号冒号啊 问号冒号 我们后边会专门讲三元运算符 有三部运算符

13:01.100 --> 13:08.940
好 这是按操作数的数量区分啊 但是我们这个课程里面啊 主要分类方式呢 是按照功能区分啊 功能区分

13:11.020 --> 13:17.100
好 功能区分的话 这个没有官方标准 没有说哪个官方说啊 功能区分怎么来分类 没有 没有 都是我们自己来分类的啊

13:17.580 --> 13:20.300
功能区分的话 我把它分为这么几种啊 一个是算数

13:21.260 --> 13:23.740
运算符 也就是数学啊 数学

13:24.460 --> 13:28.540
数学运算符 第二种 第二种分类呢 是啊 那个

13:29.500 --> 13:35.420
逻辑运算符啊 逻辑运算符啊 第三种分类的是 未运算符

13:37.020 --> 13:37.500
运算符

13:39.260 --> 13:45.660
未运算符 第四种分类呢 还有一个分类啊 还有一个分类 叫比较运算符啊 运算符

13:47.580 --> 13:54.700
然后呢 未运算符还有就是其他啊 直接把分为其他了啊 其他也先乱七八糟的 砸七八糟的运算符啊 我到时候都会讲啊

13:55.180 --> 14:02.140
我们一会讲 之后讲的时候呢 是按照功能来区分啊 来功能来区分来进行讲解 好 这关于运算符的分类 了解一下就行了啊

14:04.060 --> 14:06.620
好 接下来是重点了 是我们这些课的重点

14:07.500 --> 14:12.220
也是本章的注意核心的知识 以前呢我都是把拿到后表讲 发现了

14:12.700 --> 14:18.860
其实这些知识可以提前的 越早讲了 我们对后边的学习就不断的去巩固它 其实更好

14:19.580 --> 14:21.020
叫做表达式

14:21.740 --> 14:28.140
哇 表达式这个概念 我跟你说吧 很多同学学了好几个月了

14:29.100 --> 14:32.380
都没有把这个彻底搞清楚 看程序都要犯晕

14:32.860 --> 14:38.220
有的时候看程序一些复杂代码 写了一大堆用于犯晕 为什么呢 没有理清楚表达式的概念

14:38.700 --> 14:44.380
我告诉你 如果你把这个概念理清楚了 后边好多乱七八糟的代码 各种花式写法你都能搞清楚了

14:45.340 --> 14:51.420
什么叫表达式呢 表达式指的是操作符和操作书

14:52.220 --> 14:58.700
组成的语句的一部分 就是表达式

14:59.820 --> 15:01.260
我们会这样说吧 这样说

15:01.980 --> 15:06.860
表达式就是什么呢 就是操作符加操作书 就是表达式

15:09.340 --> 15:12.780
好 那么我们来举现例子 举现例子 比方说

15:13.500 --> 15:21.260
这句话 是不是表达式啊 是表达式哦 为什么不是表达式呢

15:22.460 --> 15:27.820
操作符 操作书 对吧 对相嘛 对吧 操作符 看到没 是不是表达式啊

15:28.300 --> 15:36.140
好 操作书 操作书 操作符 操作符 你看 操作符 操作符 操作符

15:36.700 --> 15:39.340
这句话是个表达式 好看这句话里边

15:39.980 --> 15:47.660
这一部分是不是表达式呢 是不是表达式啊 也是表达式 看到没 操作书 操作符 看到没 也是表达式

15:49.180 --> 15:51.260
甚至呢 我们可以 甚至有的时候 更加

15:51.820 --> 15:55.660
更加上心病狂的 我们可以认为 就一个字面量 他都算一个表达式

15:56.140 --> 15:58.060
我们可以这样上心病狂的认为 一点问题都没有

15:58.700 --> 15:59.580
我们可以这样认为

16:00.220 --> 16:03.980
不要说啊 对 大括号 大括号也是个操作符啊 也是个操作符

16:04.300 --> 16:06.380
只是这些东西太简单了 没有什么好说的

16:07.020 --> 16:10.460
这个地方其实也是个表达式 也是个表达式 字面量 对吧

16:10.860 --> 16:13.500
这个复指语句也是个表达式 也是一个表达式

16:14.540 --> 16:15.660
到处都是表达式

16:16.220 --> 16:19.420
我们的语句都里边到处是表达式 比方说啊 咱们有输出

16:19.820 --> 16:24.860
输出什么1加2乘以3 减除以6

16:25.260 --> 16:28.540
这是个表达式 这仍然是表达式 这是个表达式 看到没

16:29.100 --> 16:29.580
表达式

16:30.220 --> 16:33.980
我们看其中一部分呢 这一部分又是表达式 是吧 又是表达式

16:34.700 --> 16:38.620
明白这个意思吗 总之就是操作符和操作数 组成的东西就是表达式

16:40.540 --> 16:43.020
表达式太常见了 我们的代码

16:43.420 --> 16:46.380
我们代码里边可以说90%以上全是表达式

16:46.700 --> 16:50.780
到处是表达式 你几乎就找不到什么不是表达式的 几乎找不到

16:51.020 --> 16:53.660
包括整个函数调用 你看这个函数调用是被表达式

16:54.220 --> 16:54.540
对吧

16:55.260 --> 16:59.500
好 那么表达式这么常见 它又什么用了 为什么要搞出这个这个概念出来了

16:59.660 --> 17:01.180
因为我们要接下来要讲这个东西

17:02.140 --> 17:06.540
每个表达式都有一个运算结果

17:08.220 --> 17:11.340
该结果叫做返回值

17:11.660 --> 17:16.220
我们有个专门的名词叫把它称呼 称呼它为返回值

17:17.500 --> 17:19.820
好 比方说这个表达式

17:20.460 --> 17:23.260
这个表达式 这个表达式的返回值是啥

17:23.900 --> 17:27.340
就是运算结果 算出来的结果 结果是不是6

17:27.340 --> 17:30.700
好 我们就认为这个表达式的结果是6

17:31.820 --> 17:33.580
4 6 就是返回值是6

17:33.820 --> 17:37.500
以后我反而是说到返回值 指的是什么 指的是运算结果

17:37.900 --> 17:40.860
指的是运算结果 好 我再来一次

17:41.500 --> 17:42.940
这个表达式的运算结果是多少

17:44.700 --> 17:45.180
算一下吧

17:46.700 --> 17:49.340
2乘3等于6 6 除以6 1 1加1等于2

17:49.420 --> 17:49.740
对吧

17:50.060 --> 17:55.260
那么这个表达式的运算值结果就是返回值是2

17:55.980 --> 17:57.100
好 这是这个概念

17:57.420 --> 18:00.780
就是为什么要出这个概念 就是方便我们表达 方便我们说话

18:00.940 --> 18:07.020
我们有的时候我就不会说 这个式子 这一块 这一坨 得到结果 得到的结果是啥

18:07.340 --> 18:11.580
直接说 这个表达式的返回值 你看很清楚 就是2

18:12.700 --> 18:13.500
好 接下来再来

18:15.900 --> 18:19.580
运算结果 也就是返回值的内形

18:19.580 --> 18:22.620
你看我们的介石里面 是不是每个东西都有内形啊

18:22.620 --> 18:24.380
它不可能存在一个数据 它没内形

18:24.380 --> 18:28.060
它要么是对象 要么是什么制服出来的数字 undefined now

18:28.060 --> 18:28.460
对吧

18:28.540 --> 18:31.580
它总得有个内形 返回值它是一个数据

18:31.580 --> 18:35.100
那么数据是不是得有内形 返回值的内形呢

18:35.100 --> 18:38.780
叫做 哇 这个概念就太重要了

18:38.780 --> 18:41.900
返回内形 叫做返回内形

18:43.100 --> 18:43.820
你看这个意思吧

18:43.820 --> 18:44.780
好 我们比方说

18:45.740 --> 18:46.220
比方说

18:47.260 --> 18:49.020
我们就这里写简单点 1加2

18:49.500 --> 18:51.980
1加2这个表达式 返回值是啥

18:52.540 --> 18:53.340
返回值是3

18:53.820 --> 18:54.860
返回内形是啥

18:55.180 --> 18:56.620
告诉我 返回内形是啥

18:57.500 --> 18:59.740
返回内形是什么呢

18:59.740 --> 19:02.060
返回内形就是number

19:02.060 --> 19:02.620
对不对

19:02.620 --> 19:03.340
三十个数字

19:04.460 --> 19:05.340
就是number

19:05.340 --> 19:06.700
返回内形为number

19:06.700 --> 19:07.740
好 那我问你

19:07.740 --> 19:09.100
这个表达式的返回内形是啥

19:10.140 --> 19:11.820
这个表达式 返回内形是啥

19:11.820 --> 19:12.700
是不是制服串

19:13.020 --> 19:13.500
对不对

19:13.500 --> 19:15.260
返回内形就是制服串

19:15.900 --> 19:17.100
返回内形就是制服串

19:17.740 --> 19:19.180
好 那么接下来

19:19.180 --> 19:19.980
还有一句话

19:21.500 --> 19:22.540
整个表达式

19:22.620 --> 19:24.220
就是所有的表达式

19:25.260 --> 19:27.900
都可以当做数字

19:28.620 --> 19:32.060
都可以当做数据使用

19:34.140 --> 19:36.060
所有的表达式

19:36.860 --> 19:39.260
都可以把它当成数据使用

19:39.820 --> 19:40.940
直接使用就完成了

19:42.380 --> 19:43.340
只是你使用的时候

19:43.340 --> 19:44.140
我们后边会说

19:44.460 --> 19:45.740
后边具体的课程会说到

19:46.380 --> 19:47.100
我们使用的时候

19:47.100 --> 19:48.380
要注意它的内形是什么

19:48.380 --> 19:49.660
就是返回内形是什么

19:49.660 --> 19:51.420
但是它一定可以当成数据来使用

19:51.900 --> 19:52.380
比方说

19:52.700 --> 19:53.340
我举个例子

19:56.130 --> 19:57.170
哇 这个代码是啥

19:57.170 --> 20:01.570
这个代码都超出了人类的理解范围了

20:01.890 --> 20:02.690
是这样子吗

20:02.930 --> 20:04.370
这是个表达式吧 对吧

20:04.690 --> 20:05.810
这个表达式的内形是啥

20:05.810 --> 20:06.770
返回内形是啥

20:07.410 --> 20:09.010
告诉我这个表达式的返回内形是啥

20:09.410 --> 20:10.050
是不是数字

20:10.450 --> 20:11.890
好 数字能不能跟数字相加

20:12.210 --> 20:12.850
能不能相加

20:13.330 --> 20:14.130
是不是可以相加

20:14.290 --> 20:15.650
你把它看成一个整体

20:15.890 --> 20:17.810
这个表达式的运算结果是不是1

20:17.810 --> 20:18.930
对吧 1加1

20:18.930 --> 20:19.810
是不是等于2

20:20.130 --> 20:20.610
对不对

20:20.850 --> 20:21.890
等于2 没问题吧

20:22.130 --> 20:23.250
好 运行出来看一下

20:24.210 --> 20:24.690
看一下

20:28.110 --> 20:29.630
啊 运行出来是不是2

20:29.630 --> 20:30.270
对不对

20:30.270 --> 20:30.910
没问题吧

20:31.230 --> 20:31.950
啊 没问题

20:32.670 --> 20:33.630
说可以这样子写

20:34.110 --> 20:34.830
可以这样子写吧

20:35.470 --> 20:36.190
比方说3

20:36.830 --> 20:37.790
3我可以这样子写

20:38.190 --> 20:38.910
乘意啥

20:39.150 --> 20:40.910
乘意obj的点A

20:41.710 --> 20:42.670
可不可以这样写

20:42.670 --> 20:43.870
可以一点问题都没有

20:44.270 --> 20:45.070
表达式

20:45.070 --> 20:46.190
全是表达式

20:46.190 --> 20:46.510
你看

20:46.990 --> 20:48.110
表达式的地方

20:48.510 --> 20:49.630
表达式就是数据

20:50.110 --> 20:50.750
就是数据

20:51.150 --> 20:52.430
凡是可以出现在数据的地方

20:52.430 --> 20:53.390
都可以出现表达式

20:53.390 --> 20:54.430
你可以这样子写

20:54.430 --> 20:55.470
2乘以3没问题

20:55.710 --> 20:57.710
那凭什么不能把这两个数据相乘了

20:57.710 --> 20:58.750
这两个都是数据

20:59.310 --> 21:00.670
而它的内形也是正确的

21:00.670 --> 21:01.070
对吧

21:01.070 --> 21:02.190
内形这里是什么

21:02.190 --> 21:02.750
number

21:02.750 --> 21:03.630
这里是什么

21:03.630 --> 21:04.590
也是number

21:04.590 --> 21:05.390
那么都是3

21:05.390 --> 21:05.630
对吧

21:05.630 --> 21:07.230
3乘以3是不是等于9

21:08.190 --> 21:09.950
这就是表达式的规则

21:09.950 --> 21:10.510
看了没

21:11.150 --> 21:13.710
好 那么为什么这一坨可以放到这个小货号里面呢

21:14.190 --> 21:15.470
好 这个函数调用

21:15.470 --> 21:16.590
函数调用是不是表达式

21:16.590 --> 21:17.310
对吧

21:17.310 --> 21:19.150
函数调用的小货号里面写的是啥

21:19.150 --> 21:20.110
写的是数据

21:20.110 --> 21:22.030
把你的数据直接输出

21:22.030 --> 21:23.950
把你的运算结果直接输出

21:24.110 --> 21:26.190
那么这里的表达式是不是有个运算结果

21:26.190 --> 21:27.150
有个返回值

21:27.150 --> 21:28.350
那么什么意思

21:28.350 --> 21:32.670
在控制台里边输出这个表达式的返回值

21:33.310 --> 21:33.710
看了没

21:34.590 --> 21:35.870
说明啥问题呢

21:35.870 --> 21:38.030
表达式可以出现在任何

21:38.670 --> 21:40.110
可以出现数据的地方

21:40.110 --> 21:41.470
任何地方都可以出现

21:42.270 --> 21:43.310
任何地方都可以出现

21:43.950 --> 21:44.750
包括这里

21:44.750 --> 21:45.230
包括这里

21:45.230 --> 21:46.510
我们之前不是写过吗

21:46.510 --> 21:48.830
来自于另外一个对象的什么东西对吧

21:48.830 --> 21:50.030
来自于另外一个对象的东西

21:50.030 --> 21:51.390
那是这里是不是表达式

21:51.390 --> 21:52.270
也是表达式

21:52.350 --> 21:55.150
它把表达式的值返回值放到这里

21:56.270 --> 21:57.790
这就是我们这里可要讲的一个

21:57.790 --> 21:59.710
非常非常重要的一个内容

21:59.710 --> 22:01.150
后面我们会不断的强化

22:01.150 --> 22:02.430
不断的强化告诉你

22:02.430 --> 22:03.390
我们可以这样子写

22:03.390 --> 22:04.590
有的时候你看别人代码

22:04.590 --> 22:04.910
哇

22:04.910 --> 22:07.070
一行代码写的这很长很长一串

22:07.070 --> 22:08.110
乱七八八一大堆

22:08.110 --> 22:08.510
为什么

22:08.510 --> 22:09.470
它在组合表达式

22:10.190 --> 22:11.470
组合不同的表达式

22:11.470 --> 22:12.590
但是没有那么复杂

22:12.590 --> 22:13.630
一块一块看

22:13.630 --> 22:15.150
一个整体一个整体看

22:15.150 --> 22:16.910
你会发现真的就没有那么复杂

22:17.630 --> 22:19.150
无非就是把这个表达式算出来

22:19.150 --> 22:20.670
然后跟另外一个表达式进行运算

22:21.630 --> 22:23.630
只不过它没有用变量把它保存起来

22:23.630 --> 22:26.190
而是把表达式写很长一串串

22:27.070 --> 22:27.870
但是呢

22:27.870 --> 22:28.990
含义是一样的

22:29.710 --> 22:32.030
因为整个表达式都可以当成数据来使用

22:32.990 --> 22:35.550
这是关于表达式这个概念

22:35.550 --> 22:36.430
表达式这个概念

22:38.700 --> 22:39.420
那么这里呢

22:39.420 --> 22:40.620
我先说明一下

22:40.620 --> 22:41.980
既然讲到表达式这一块了

22:41.980 --> 22:45.020
我们之前不是学过了一些运算符吗

22:45.020 --> 22:45.900
运算符

22:45.900 --> 22:46.700
我这里说一下

22:47.340 --> 22:47.980
目前

22:48.860 --> 22:54.940
目前学习的运算符的返回值

22:55.980 --> 22:56.860
返回值和类型

22:57.340 --> 22:58.140
和返回类型

22:58.540 --> 22:59.340
主要说一下这个

22:59.820 --> 23:00.780
一个是等号

23:01.180 --> 23:01.580
复值

23:02.380 --> 23:03.020
复值复号

23:04.540 --> 23:06.940
复值复号该表达式

23:08.380 --> 23:09.100
表达式

23:09.660 --> 23:10.300
返回啥呢

23:10.780 --> 23:14.300
返回复值的结果

23:14.620 --> 23:15.740
就是你给它复了什么值

23:15.820 --> 23:17.340
把这个复值的结果返回

23:17.980 --> 23:19.020
比如说前面有变量

23:19.020 --> 23:19.260
对吧

23:19.260 --> 23:20.380
复值复号前面有变量

23:20.380 --> 23:21.500
一变量复了什么值

23:21.500 --> 23:22.780
你就把复值的结果返回

23:22.780 --> 23:24.460
就是完成复值之后

23:25.020 --> 23:25.900
返回这个结果

23:26.540 --> 23:27.820
完成复值之后

23:27.820 --> 23:28.620
返回这个结果

23:29.420 --> 23:29.820
好

23:29.820 --> 23:30.460
怎么样理解

23:30.940 --> 23:31.580
咱们举个例子

23:34.430 --> 23:35.230
如果这几课

23:35.230 --> 23:36.670
我不知道听到这的同学

23:36.670 --> 23:37.390
还有多少

23:37.390 --> 23:37.710
因为

23:38.350 --> 23:39.710
大家很多同学看到个概述

23:39.710 --> 23:40.590
就觉得没什么意思

23:40.590 --> 23:41.470
就直接关了

23:41.470 --> 23:42.830
错识了一个意

23:43.870 --> 23:45.230
咱们这里有个变量

23:45.550 --> 23:45.950
A

23:46.830 --> 23:47.470
有个变量

23:47.790 --> 23:49.070
现在我们输出

23:49.070 --> 23:49.870
输出啥呢

23:50.430 --> 23:51.390
A等于1

23:51.390 --> 23:52.430
你看这样子可以输出的

23:53.070 --> 23:53.630
输出是啥

23:53.630 --> 23:55.310
输出是个表达式的值

23:56.110 --> 23:57.470
这个表达式怎么理解呢

23:57.710 --> 23:59.310
把1放到A里边

23:59.630 --> 24:01.630
然后整个表达式

24:02.190 --> 24:03.070
返回的结果

24:03.070 --> 24:04.190
就是复值的结果

24:04.590 --> 24:05.470
复值的结果是啥

24:05.630 --> 24:06.830
复值的结果就是A对吧

24:06.830 --> 24:07.310
A的值

24:08.110 --> 24:09.550
整个表达式返回A的值

24:09.870 --> 24:10.830
所以说输出啥

24:10.830 --> 24:11.790
输出的就是1

24:12.270 --> 24:13.070
能不能在这里

24:13.790 --> 24:14.430
没问题吧

24:14.590 --> 24:15.630
输出的就是1

24:15.630 --> 24:16.670
输出的就是1

24:16.670 --> 24:17.470
保存看一下

24:21.490 --> 24:22.290
输出的就是1

24:23.010 --> 24:24.130
但是你要理解清楚

24:24.130 --> 24:25.010
虽然都是一样的

24:25.650 --> 24:28.450
输出的是这个表达式的结果

24:28.450 --> 24:30.050
输出的是这个表达式的结果

24:30.050 --> 24:31.650
只不过了这个表达式的结果

24:31.650 --> 24:33.010
跟A的结果是一样的

24:33.330 --> 24:34.290
先把1复这个A

24:34.290 --> 24:36.210
然后整个表达式返回

24:36.370 --> 24:36.850
返回啥

24:36.850 --> 24:37.650
返回A的值

24:38.130 --> 24:39.490
返回这个左边的值

24:39.490 --> 24:40.370
就是你复的值

24:41.010 --> 24:42.290
整个表达式是1

24:42.690 --> 24:43.650
因此最终输出的

24:43.650 --> 24:45.090
还是整个表达式的结果

24:45.090 --> 24:46.530
当然A的结果也是1了

24:46.690 --> 24:47.490
我们把A再输出

24:48.050 --> 24:49.490
A的结果因为完成复值了

24:49.490 --> 24:50.370
A的结果也是1

24:53.150 --> 24:54.670
那么知道这一点有什么好处呢

24:55.230 --> 24:56.110
好处在于啥呢

24:56.510 --> 24:57.390
好处在于

24:57.390 --> 24:59.630
我们可以给多个变量复同一个值

25:00.670 --> 25:02.190
比方说有ABCD4个变量

25:02.190 --> 25:02.990
他们都等于1

25:02.990 --> 25:03.710
我们可以这样子写

25:04.110 --> 25:05.390
ABCD

25:06.430 --> 25:06.830
你看

25:07.310 --> 25:07.950
可以这样子写

25:08.510 --> 25:08.910
对吧

25:09.230 --> 25:09.790
怎么理解

25:09.790 --> 25:10.750
怎么理解这个铝阶

25:11.710 --> 25:13.550
BCD这个三个变量是不是没定义

25:13.550 --> 25:14.670
有没有定义BCD

25:14.670 --> 25:15.550
是不是没定义

25:15.550 --> 25:16.350
前面没有VAR

25:16.350 --> 25:16.750
对吧

25:16.750 --> 25:17.950
你不能在这里写没写VAR

25:18.030 --> 25:18.830
不符合语法

25:19.150 --> 25:19.870
不符合语法

25:20.670 --> 25:22.590
要么就先把ABCD定义好

25:22.990 --> 25:24.110
要么就这样子

25:24.350 --> 25:25.470
先把ABCD定义好

25:26.190 --> 25:28.190
ABCD定义好

25:28.430 --> 25:29.870
然后再来复值

25:30.110 --> 25:30.750
这样子复值

25:31.230 --> 25:31.790
没问题的

25:31.790 --> 25:32.750
这样子复值没问题的

25:33.470 --> 25:34.670
好当然你不定义也可以

25:34.670 --> 25:35.550
我们之前说过对吧

25:35.790 --> 25:36.670
因为不定义的话

25:36.990 --> 25:38.270
结式是比较宽松的

25:38.750 --> 25:39.870
结式是比较宽松的

25:39.870 --> 25:40.990
它允许你不定义

25:41.150 --> 25:41.710
不定义

25:41.790 --> 25:43.150
但是我说了

25:43.150 --> 25:44.830
我们的代码里面不要这样子写

25:45.230 --> 25:45.950
不要这样子写

25:46.110 --> 25:47.710
最好把变量定义

25:48.430 --> 25:49.470
但是可以不定义的

25:49.470 --> 25:50.430
是可以不定义的

25:50.430 --> 25:51.950
不定义的话就表示的是

25:51.950 --> 25:54.190
复着在温度对象的属性上面

25:54.190 --> 25:55.230
直接复着就完事了

25:55.230 --> 25:56.430
你复值的时候就直接

25:56.430 --> 25:57.710
跑到温度对象上面去了

25:57.950 --> 25:58.670
当然你定义了

25:58.670 --> 25:59.950
也会跑到温度对象上面去

26:00.190 --> 26:00.750
只是呢

26:01.790 --> 26:03.870
可以不写这个话

26:04.350 --> 26:06.190
但是我们写代码的时候一定要写

26:06.750 --> 26:08.350
好怎么来理解这个代码

26:08.510 --> 26:10.190
看着我怎么理解

26:10.830 --> 26:11.870
从右向左看

26:11.870 --> 26:12.750
因为复值嘛

26:12.990 --> 26:14.270
复值都是从右向左看

26:14.990 --> 26:16.750
先把E复值给D

26:17.470 --> 26:18.590
先把E复这个D

26:18.590 --> 26:19.950
你看这个是不是表达式

26:20.590 --> 26:22.110
是不是表达式现在D为1了

26:23.470 --> 26:23.950
这样子

26:28.350 --> 26:29.550
现在D为1了

26:29.550 --> 26:30.190
D为1了

26:30.510 --> 26:32.750
好接下来把这个表达式

26:33.230 --> 26:34.430
看把它看成个整体

26:34.830 --> 26:37.390
把这个表达式的结果复值给C

26:37.950 --> 26:39.310
表达式的结果是不是D

26:39.390 --> 26:39.710
对吧

26:39.710 --> 26:40.270
D的结果

26:40.350 --> 26:42.110
所以说C也为1了

26:42.750 --> 26:42.990
好

26:42.990 --> 26:44.830
然后再把这个表达式的结果

26:45.790 --> 26:46.430
这个表达式

26:46.430 --> 26:47.390
看成一个整体

26:47.630 --> 26:49.070
这个表达式要这样子看

26:49.070 --> 26:50.190
这个表达式什么意思

26:50.190 --> 26:51.310
就是把它复值给它

26:51.310 --> 26:51.630
对吧

26:52.670 --> 26:54.750
你这个东西就直接把它看成整体了

26:54.750 --> 26:56.270
然后再把这个东西看成整体

26:56.270 --> 26:57.310
是不是得到C的值

26:58.110 --> 26:59.550
对C进行复值

26:59.550 --> 27:01.070
把后面这一坨复值给C

27:01.230 --> 27:03.390
那么整个表达式的结果就是C的值

27:03.550 --> 27:04.430
把它复值给B

27:04.430 --> 27:05.150
那么B

27:06.030 --> 27:06.670
也为1了

27:07.150 --> 27:09.230
然后再把这个表达式的结果复值给A

27:09.790 --> 27:12.190
那么是不是就把B的值复值给A

27:12.190 --> 27:12.670
对不对

27:12.910 --> 27:13.630
A也为1了

27:14.110 --> 27:15.230
你看就是这么一个过程

27:15.550 --> 27:16.430
所以说最后输出

27:16.910 --> 27:18.110
最后输出ABCD

27:18.270 --> 27:21.070
那么都是ABCD

27:23.150 --> 27:24.830
理解表达式的规则

27:24.830 --> 27:25.870
异常的重要

27:27.070 --> 27:27.550
好

27:27.550 --> 27:28.510
这是表达式

27:28.510 --> 27:29.790
这是这么一个规则

27:30.030 --> 27:30.990
等号跟表达式

27:30.990 --> 27:31.310
好

27:31.310 --> 27:32.830
第二个就是关于函数调用

27:32.830 --> 27:33.390
函数调

27:33.390 --> 27:34.350
就是属性

27:38.370 --> 27:39.090
属性

27:40.850 --> 27:42.210
访问表达式

27:43.650 --> 27:44.530
表达式

27:44.850 --> 27:48.530
返回的是属性的值

27:49.250 --> 27:50.450
返回的是属性的值

27:50.850 --> 27:51.810
这个没什么好说的吧

27:52.210 --> 27:53.170
这个很简单

27:53.410 --> 27:54.130
比方这里

27:54.290 --> 27:56.290
访问这个属性

27:56.290 --> 27:58.930
这个表达式返回的是不是就是个属性的值

27:58.930 --> 27:59.250
对吧

27:59.250 --> 28:00.290
返回的不是对象

28:00.290 --> 28:01.650
返回的是这个属性

28:01.650 --> 28:02.450
这个属性是3

28:02.450 --> 28:03.090
返回的就是3

28:03.090 --> 28:03.970
就是数值内形

28:03.970 --> 28:05.010
返回内形就是number

28:05.810 --> 28:07.410
返回的是这个属性的值

28:08.290 --> 28:09.410
当然属性的内向是啥

28:09.410 --> 28:10.530
这里返回内向就是啥

28:11.330 --> 28:12.850
当然这个点也好

28:13.010 --> 28:14.210
怎么中括号是不一样的

28:14.530 --> 28:15.570
中括号是不一样的

28:16.130 --> 28:16.930
中括号一样

28:20.130 --> 28:21.170
中括号一样

28:21.170 --> 28:22.130
然后还有啥呢

28:22.370 --> 28:23.730
还有函数调用对不对

28:23.730 --> 28:24.450
函数调用

28:25.970 --> 28:29.090
这个表就是函数调用表达式

28:30.850 --> 28:35.970
返回的结果取决于函数的运行

28:36.370 --> 28:37.570
函数是怎么运行的

28:38.450 --> 28:40.450
这个地方我们还没有学到函数

28:40.530 --> 28:43.570
所以说了解一下就行了

28:43.570 --> 28:44.050
了解一下

28:44.050 --> 28:46.050
后面我们学的函数就非常非常清楚了

28:46.610 --> 28:48.210
函数调用它又返回什么了

28:48.690 --> 28:49.730
就非常非常清楚了

28:50.370 --> 28:51.410
好那么比方说

28:51.410 --> 28:55.010
比方说我们这里写一个很怪的代码

28:55.650 --> 28:56.210
大家看一下

28:56.930 --> 28:58.130
写一个非常非常怪的代码

28:58.690 --> 28:59.410
console log

28:59.730 --> 29:00.450
console log

29:01.810 --> 29:02.530
哇这是啥

29:03.010 --> 29:04.130
这是啥呀

29:04.130 --> 29:04.450
这是

29:06.370 --> 29:07.330
新结果也没来写吧

29:11.460 --> 29:12.500
我告诉你很多同学都

29:12.980 --> 29:15.380
不要说你们了刚出学的了

29:15.380 --> 29:16.340
我相信有些

29:16.740 --> 29:17.860
这个就是在

29:18.420 --> 29:20.100
学校段时间同学都要蒙一下

29:21.220 --> 29:21.940
这是啥呀

29:22.340 --> 29:22.740
这是啥

29:23.300 --> 29:24.260
你要这么来看

29:25.140 --> 29:26.660
输出嘛对吧

29:27.140 --> 29:27.940
输出啥呢

29:28.660 --> 29:31.620
输出这个表达式的返回结果

29:31.940 --> 29:32.740
返回值

29:33.620 --> 29:35.060
输出这个表达式的返回值

29:35.060 --> 29:36.500
那么这个表达式是不是函数

29:36.500 --> 29:36.900
对吧

29:37.300 --> 29:38.260
是一个函数

29:38.260 --> 29:39.140
函数调用

29:39.540 --> 29:40.500
函数调用的表达式

29:40.500 --> 29:42.180
返回的结果取决于函数的运行

29:42.340 --> 29:43.780
那么我这里顺便说一下

29:43.780 --> 29:44.900
就顺便说一下

29:45.620 --> 29:51.780
console log函数调用的返回结果为

29:52.980 --> 29:54.580
返回结果为undefend

29:55.460 --> 29:57.780
它的函数调用返回结果为undefend

29:58.260 --> 29:59.140
就是空

30:00.100 --> 30:00.900
有人说不是

30:01.380 --> 30:02.660
这个返回结果

30:02.660 --> 30:04.100
返回结果不是输出的结果

30:04.100 --> 30:05.300
输出不是返回结果

30:05.940 --> 30:07.220
输出的结果不是返回结果

30:07.220 --> 30:08.740
比方说1加1它不会输出

30:08.740 --> 30:09.460
它可以不输出

30:09.940 --> 30:11.780
不输出它的返回结果也是2

30:12.100 --> 30:12.580
也是2

30:12.580 --> 30:13.860
跟输出结果没什么关系

30:14.340 --> 30:14.900
返回结果

30:14.900 --> 30:15.860
就是运算的结果

30:15.860 --> 30:16.500
它会算

30:16.500 --> 30:17.700
函数它也会算

30:17.700 --> 30:18.260
算一些东西

30:18.260 --> 30:18.820
算完了过后

30:18.820 --> 30:19.780
它会得到一个结果

30:20.500 --> 30:22.740
输出的只算了过程中的副作用

30:22.740 --> 30:23.780
你可以这样理解

30:24.820 --> 30:26.820
那么这个返回结果是咋呢

30:26.820 --> 30:28.340
返回结果为undefend

30:28.340 --> 30:29.380
我们以后学的函数过后

30:29.380 --> 30:30.420
你就非常非常清楚了

30:30.420 --> 30:32.660
现在如果理解不了的话

30:32.660 --> 30:34.500
你记住console log这个函数

30:34.500 --> 30:35.780
返回结果为undefend

30:35.780 --> 30:36.980
那么它内向是咋

30:38.020 --> 30:40.180
undefend的内向是不是只能是undefend

30:40.180 --> 30:40.660
对吧

30:40.820 --> 30:42.100
它们内向也是undefend

30:42.100 --> 30:43.300
所以说这里会输出啥呢

30:44.020 --> 30:44.580
看一下呗

30:45.380 --> 30:46.180
它会输出啥呢

30:46.820 --> 30:47.940
输出undefend的

30:47.940 --> 30:48.660
对吧

30:48.660 --> 30:50.180
它就会输出undefend的

30:51.460 --> 30:52.340
就这么简单

30:52.340 --> 30:53.140
就这么简单

30:53.140 --> 30:54.660
因为这个函数的表达是

30:54.660 --> 30:55.460
它输出的

30:55.460 --> 30:56.660
它的结果是undefend的

30:57.860 --> 30:59.780
那么现在来我来说一个

30:59.780 --> 31:00.660
说一个问题

31:00.660 --> 31:02.340
就是也不是问题吧

31:02.900 --> 31:04.980
说一个开发的调试技巧

31:04.980 --> 31:05.860
就是chrome

31:06.900 --> 31:07.700
浏览器

31:08.180 --> 31:09.300
控制台的

31:10.020 --> 31:10.660
环境

31:11.540 --> 31:12.900
是一个叫做做

31:12.900 --> 31:14.660
叫做repo环境

31:14.660 --> 31:15.940
repo环境

31:15.940 --> 31:17.300
这个repo什么意思呢

31:17.300 --> 31:18.100
它表示的是

31:18.740 --> 31:19.460
repo

31:19.460 --> 31:20.500
表示的是

31:20.500 --> 31:21.300
read

31:21.300 --> 31:21.540
读

31:22.260 --> 31:22.660
evil

31:23.700 --> 31:24.500
执行

31:24.500 --> 31:24.900
读

31:24.900 --> 31:25.460
执行

31:25.460 --> 31:25.940
print

31:26.740 --> 31:27.060
loop

31:27.860 --> 31:28.740
叫什么意思呢

31:28.740 --> 31:29.300
叫做

31:29.300 --> 31:29.540
读

31:31.060 --> 31:31.540
执行

31:32.500 --> 31:33.060
打印

31:34.020 --> 31:34.900
循环

31:34.900 --> 31:36.260
我们有的时候怎么翻译呢

31:36.260 --> 31:37.460
不是很好翻译

31:37.620 --> 31:38.500
我们把它叫做

31:38.500 --> 31:40.180
实时输入输出吧

31:40.180 --> 31:41.780
实时的输入输出

31:42.740 --> 31:45.620
就叫做repo环境

31:45.620 --> 31:46.740
在这个环境里面

31:48.260 --> 31:52.020
会就是当输写代码时

31:52.580 --> 31:53.620
就是在控制台

31:53.620 --> 31:57.540
当直接在控制台输写代码时

31:58.500 --> 32:01.380
除了运行代码之外

32:02.820 --> 32:06.260
还会输出该代码

32:06.260 --> 32:08.900
该表达式的返回值

32:09.620 --> 32:11.460
还会输出该这个表达式的返回值

32:12.100 --> 32:13.060
咱们来看一下

32:13.060 --> 32:13.940
看一下浏览器里面

32:14.980 --> 32:15.460
这里说一下

32:15.460 --> 32:16.580
随便找一个

32:16.580 --> 32:18.500
我们之后就会经常用这种方式了

32:18.500 --> 32:20.260
之前我们没有讲表达式

32:20.260 --> 32:21.940
我不太好用这种方式

32:21.940 --> 32:23.300
比方说我们这里用console

32:24.020 --> 32:25.380
console.log

32:25.380 --> 32:26.420
输出一个东西

32:26.420 --> 32:26.820
abc

32:28.740 --> 32:29.140
大家看

32:30.660 --> 32:31.700
它执行了这个代码

32:31.700 --> 32:32.740
这个代码执行了对吧

32:32.740 --> 32:33.620
它输出了abc

32:34.260 --> 32:35.700
那么下面多了一个undefend

32:36.340 --> 32:38.180
并且一个箭头向左的箭头

32:38.180 --> 32:38.820
什么意思呢

32:39.540 --> 32:42.740
表示这个表达式的返回结果为undefend

32:43.540 --> 32:44.020
你看一下

32:45.620 --> 32:46.740
我之前记得笔记的

32:47.140 --> 32:47.700
console.log

32:47.700 --> 32:49.700
还说调用了返回结果为undefend

32:49.700 --> 32:50.100
看到没

32:50.740 --> 32:52.100
一定是调用了结果

32:52.100 --> 32:53.540
调用了结果为undefend

32:53.860 --> 32:55.620
它会得到这个返回值

32:55.620 --> 32:57.540
这个表达式的返回结果

32:58.100 --> 32:58.500
好

32:58.500 --> 32:59.140
咱们再来

32:59.140 --> 32:59.540
再来

33:00.340 --> 33:02.020
比方说A等于1

33:03.380 --> 33:04.580
你看我没有输出

33:04.580 --> 33:05.300
我没有输出

33:05.380 --> 33:06.500
它为什么得到一个1

33:06.500 --> 33:09.220
是因为这个表达式的返回结果为1

33:09.220 --> 33:09.620
看到没

33:10.100 --> 33:11.220
看得非常清楚了

33:11.220 --> 33:12.900
这个表达式的返回结果为1

33:12.900 --> 33:15.060
比方说我这里就写个1加3

33:16.020 --> 33:17.060
这个代码在我们的

33:17.700 --> 33:19.140
代码里面是没有什么意义的对吧

33:19.140 --> 33:20.180
我来这里写个1加3

33:20.180 --> 33:21.220
用了你告诉我有它用

33:22.340 --> 33:23.380
计划机能不能运行

33:23.380 --> 33:23.780
能运行

33:23.780 --> 33:24.900
它把它加了加了怎么样了

33:24.900 --> 33:27.060
你又没把结果存起来

33:27.060 --> 33:28.580
因为把结果存到边量里面

33:28.580 --> 33:29.700
没有什么意义对吧

33:29.700 --> 33:32.020
这个倒是可以运行的是没有什么意义

33:32.020 --> 33:33.460
但是在值钱环境里边

33:34.020 --> 33:34.820
它又得到结果了

33:34.900 --> 33:35.540
你看一回车

33:36.180 --> 33:38.260
它会算出这个表达式的结果是

33:38.260 --> 33:40.340
有的时候我们调试起来就非常方便

33:40.340 --> 33:42.500
在控制台里边我们先测试一些东西

33:42.500 --> 33:43.140
把测试好

33:43.140 --> 33:44.340
或者是我讲课的时候

33:44.340 --> 33:47.620
有的时候也会利用这个控制台来告诉你们

33:47.620 --> 33:49.460
这个表达式它算出来是什么东西

33:49.460 --> 33:50.500
可以利用一下

33:51.620 --> 33:52.900
好这里我们再看一下

33:52.900 --> 33:54.740
再看一下看这么一个东西

33:54.740 --> 33:55.620
我刚才没有讲到

33:55.620 --> 33:56.420
这里顺便说一下

33:57.220 --> 33:57.700
这个东西

33:58.260 --> 34:00.420
这是一个声名加负值

34:00.420 --> 34:02.260
一个声名加负值

34:02.340 --> 34:03.700
这个声名加负值

34:03.700 --> 34:05.060
这也是个表达式

34:05.060 --> 34:05.860
也是个表达式

34:05.860 --> 34:07.620
回车里看得到的是安迪范的

34:08.580 --> 34:10.580
好这里谁说我这里补充一点

34:10.580 --> 34:11.140
补充一点

34:13.940 --> 34:24.340
这里如果是一个声名加负值的表达式

34:25.300 --> 34:27.780
返回结果为安迪范

34:28.980 --> 34:30.020
返回结果为安迪范

34:30.980 --> 34:31.620
好你看

34:31.620 --> 34:32.820
再来一次

34:32.820 --> 34:34.420
A等于1安迪范

34:34.420 --> 34:35.780
但是A的字肯定还是1

34:35.780 --> 34:36.660
你看A的字

34:36.660 --> 34:38.500
这个表达式还是1

34:38.500 --> 34:38.980
还是1

34:39.700 --> 34:41.220
你可以把这个东西也当成一个表达式

34:42.180 --> 34:43.140
任何东西可以把

34:43.140 --> 34:44.180
都可以当成表达式

34:44.900 --> 34:46.180
好这个东西只是1

34:46.180 --> 34:48.820
但是整个这个表达式的结果是安迪范的

34:48.820 --> 34:49.860
是安迪范的

34:49.860 --> 34:50.420
没问题吧

34:50.980 --> 34:51.380
没问题

34:52.020 --> 34:53.620
好那当然如果你定一个辩量

34:53.620 --> 34:54.500
定一个辩量

34:55.220 --> 34:55.700
定一个辩量

34:55.700 --> 34:56.340
啥都没写的话

34:56.340 --> 34:57.140
它也是安迪范的

34:57.140 --> 34:59.220
总之一只要是一个声名的东西

34:59.300 --> 35:00.180
它肯定是安迪范的

35:00.180 --> 35:01.700
表达式的结果肯定是安迪范的

35:02.260 --> 35:02.820
好吧

35:02.820 --> 35:03.620
OK

35:03.620 --> 35:04.340
关于

35:04.340 --> 35:05.780
现在A还是1

35:05.780 --> 35:06.980
因为定一个辩量也没有复制

35:06.980 --> 35:08.180
用了还是之前的A

35:08.180 --> 35:08.980
我们之前说过

35:08.980 --> 35:10.100
辩量有提升对吧

35:10.100 --> 35:10.820
有提升

35:10.820 --> 35:11.380
提升过后

35:11.380 --> 35:13.300
它们都会统一在第一行进行声明

35:13.940 --> 35:15.700
所以说这一会到时候会消失

35:15.700 --> 35:17.540
它会都会把辩量的声明提到第一行

35:18.020 --> 35:19.140
第一行声明过后了

35:19.140 --> 35:20.100
这里把A复制为1

35:20.100 --> 35:20.980
后面有没有复制

35:20.980 --> 35:22.340
所以说后面A还是1

35:22.340 --> 35:23.940
之前都是讲过这些问题的

35:24.500 --> 35:24.980
好吧

35:24.980 --> 35:25.780
这回结果

35:25.780 --> 35:27.540
最核心的就是表达式

35:27.700 --> 35:30.180
一定要认识到我们程序到处是表达式

35:30.180 --> 35:32.180
我们后面讲一些运算

35:32.180 --> 35:34.100
特别是讲一些运算优先级

35:35.860 --> 35:36.420
优先级

35:36.420 --> 35:37.700
一些复杂运算的过程中

35:37.700 --> 35:39.220
要反复用到这一块的知识

35:39.220 --> 35:40.420
我就会让你看

35:40.420 --> 35:42.500
我们先把这个表达式算出来

35:42.500 --> 35:43.860
这个表达式算出来的结果是咋

35:43.860 --> 35:44.980
然后再把这个结果拿去

35:44.980 --> 35:46.500
跟另外一个表达式进行运算

35:46.500 --> 35:47.540
我就会这样去讲

35:47.540 --> 35:49.380
所以表达式一定要理解清楚

35:49.940 --> 35:51.060
咱们这一张难度不高

35:51.540 --> 35:52.820
但是东西特别多

35:52.820 --> 35:54.980
而且这一张能面试题极其密集

35:56.020 --> 35:56.980
这一张能面试题

35:58.260 --> 35:59.700
面试题密集

36:00.740 --> 36:02.980
因为这一张的语法细节非常多

36:02.980 --> 36:03.700
我也不知道

36:03.700 --> 36:06.420
为什么那么多公司就特别喜欢考这种

36:07.300 --> 36:07.860
没啥用

36:08.420 --> 36:09.620
用处有很少

36:09.620 --> 36:11.300
基本上我们写单都不会这样的写

36:11.300 --> 36:12.980
但是就特别喜欢去考这种面试题

36:13.540 --> 36:14.500
所以说那没办法

36:14.900 --> 36:15.380
那没办法

36:15.380 --> 36:16.420
咱们是面向就业的

36:17.140 --> 36:18.340
所以说我们可以把它讲到

36:18.340 --> 36:20.260
讲到你以后忘了没关系

36:20.260 --> 36:21.300
反正我视频放在这

36:21.300 --> 36:23.380
以后你随时可以来复习

36:23.380 --> 36:25.220
咱们这一张本来是非常非常简单的

36:25.220 --> 36:27.300
但是东西本来也不多的

36:27.460 --> 36:29.700
如果仅仅是满足后边开发的话

36:29.700 --> 36:30.740
东西少了要命

36:31.220 --> 36:32.100
非常非常少

36:32.100 --> 36:34.260
但是为了要满足面试的话

36:34.660 --> 36:36.900
所以说我就必须要把这些乱七八糟的细节

36:36.900 --> 36:37.460
给你们讲到

36:38.100 --> 36:40.180
因此这张的东西就变得非常非常多了

36:40.660 --> 36:41.220
它不复杂

36:41.220 --> 36:42.180
每个东西都很简单

36:42.980 --> 36:44.260
可能用那么一一两个

36:44.260 --> 36:44.740
就一个

36:44.980 --> 36:45.700
好像就一个点

36:46.100 --> 36:47.140
要稍微复杂一点

36:47.620 --> 36:49.060
其他都非常非常简单

36:49.460 --> 36:50.180
就是面试题

36:50.180 --> 36:51.620
就是规则细节比较多

36:52.820 --> 36:54.820
我们首先把表达式的概念引出来

36:54.820 --> 36:55.780
后面再慢慢去讲

36:55.780 --> 36:56.820
各种的云酸浮

36:58.020 --> 36:58.500
对

36:58.500 --> 36:59.000
对

36:59.000 --> 36:59.500
对

36:59.500 --> 37:00.100
对

37:00.100 --> 37:00.600
对

37:00.600 --> 37:01.100
对

37:01.100 --> 37:01.600
对

37:01.600 --> 37:02.100
对

37:02.100 --> 37:02.600
对

37:02.600 --> 37:03.100
对

37:03.100 --> 37:03.600
对

37:03.600 --> 37:04.100
对

37:04.100 --> 37:04.600
对

37:04.600 --> 37:05.100
对

37:05.100 --> 37:05.600
对

37:05.600 --> 37:06.100
对

37:06.100 --> 37:07.100
对

37:07.100 --> 37:07.600
对

