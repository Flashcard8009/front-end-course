WEBVTT

00:00.000 --> 00:17.890
这里补充一下就是另外一些事件

00:17.890 --> 00:20.890
之前我把这一部分叫做Windows事件

00:20.890 --> 00:23.970
实际上这样教不是很合适

00:23.970 --> 00:25.970
因为我仔细想了一想

00:25.970 --> 00:29.610
因为Windows里边的它并不是Windows这个东西

00:29.610 --> 00:31.690
我们知道Windows是一个全聚对象

00:31.690 --> 00:32.850
全聚对象

00:32.850 --> 00:35.290
它并不是一个Low的节点

00:35.290 --> 00:38.370
因为我们学习DOM它都是学习Low的节点

00:38.490 --> 00:40.770
Windows实际上是哪里的知识呢

00:40.770 --> 00:42.770
是BOM里面的知识

00:42.770 --> 00:45.810
但是我们这一张又讲的是事件

00:45.810 --> 00:47.610
到时候我这里不讲完的话

00:47.610 --> 00:51.450
到时候在BOM里面还得又来回过头来讲事件

00:51.450 --> 00:54.010
所以说干脆去把这个事件讲完得了

00:54.010 --> 00:55.570
就把Windows顺便就讲了

00:55.570 --> 00:58.090
虽然它是BOM里面的东西

00:58.090 --> 00:58.930
Windows是什么意思

00:58.930 --> 01:01.250
Windows指的是整个浏览器窗口

01:01.250 --> 01:02.850
整个浏览器窗口

01:02.850 --> 01:05.250
它不是指着文档

01:05.490 --> 01:06.170
指的不是文档

01:06.170 --> 01:07.410
是整个浏览器窗口

01:07.410 --> 01:08.530
就是这个窗口

01:08.530 --> 01:09.970
是这么个意思

01:09.970 --> 01:13.170
Windows里面也提供了一些事件

01:13.170 --> 01:17.490
但是Windows里面的事件本身它并不多

01:17.490 --> 01:19.890
然而有一些常用的事件

01:19.890 --> 01:21.770
本来是在文档上的事件

01:21.770 --> 01:25.450
它为了我们操作方便也把它写到了Windows里面

01:25.450 --> 01:26.770
在文档里面也可以用

01:26.770 --> 01:28.250
在Document里面也可以用

01:28.250 --> 01:30.050
在Windows里面也可以用

01:30.050 --> 01:31.730
它就变成这么一种场景了

01:31.730 --> 01:33.490
所以说有的时候我们写习惯了

01:33.490 --> 01:35.810
也会把它当成Windows的事件

01:35.810 --> 01:40.130
这里我们讲具体的东西的时候再具体的说吧

01:40.130 --> 01:41.810
首先是第一部分

01:41.810 --> 01:43.170
这里面有些事件是Windows的

01:43.170 --> 01:44.930
有些事件不是Windows的

01:44.930 --> 01:46.610
我们这里就统一说了

01:46.610 --> 01:48.130
一个个讲

01:48.130 --> 01:49.970
内容有点多

01:49.970 --> 01:53.930
第一个部分内容就比较多

01:53.930 --> 01:55.250
有三个事件

01:55.250 --> 01:56.530
我们一个个说吧

01:56.530 --> 01:57.050
第一个

01:57.050 --> 01:58.210
loader事件

01:58.210 --> 01:59.650
loader事件是什么

01:59.650 --> 02:03.250
loader事件指的是

02:03.330 --> 02:04.730
它指的是

02:04.730 --> 02:12.330
页面中所有资源全部加载完毕的事件

02:12.330 --> 02:15.570
页面中所有资源全部加载完毕的事件

02:15.570 --> 02:17.130
我们页面中不是有很多东西吗

02:17.130 --> 02:17.970
对吧

02:17.970 --> 02:19.090
我们看一下

02:20.370 --> 02:21.410
我们这里建个文件夹

02:21.410 --> 02:22.370
part1

02:22.370 --> 02:23.210
这是商业课的

02:23.210 --> 02:26.330
商业课我们把这三个文件扔进去

02:26.330 --> 02:27.770
扔进去

02:27.770 --> 02:30.890
然后再这个part2

02:30.890 --> 02:32.650
part2

02:33.370 --> 02:34.890
这一部分我们加一个文件

02:34.890 --> 02:36.090
TESh1

02:39.090 --> 02:41.050
这里面我们看页面上

02:41.050 --> 02:44.810
比方说我们这里要链接一个外部的CSS

02:44.810 --> 02:45.370
比方说

02:46.730 --> 02:47.410
举个例子

02:47.410 --> 02:48.290
我这就下写了

02:48.290 --> 02:49.690
举个例子

02:49.690 --> 02:53.090
比方说链接一个外部的CSS

02:53.090 --> 02:54.690
还是写一下

02:54.690 --> 02:57.050
我们从流量器里面可以看得清楚一点

02:57.050 --> 02:59.170
TESh1.CSS

02:59.170 --> 02:59.650
看着

02:59.650 --> 03:00.410
页面啥都没有

03:00.410 --> 03:01.170
啥都没有

03:01.210 --> 03:03.690
就是TESh1.CSS

03:03.690 --> 03:08.130
然后我们又去链接了一个外部的GS

03:08.130 --> 03:10.570
我们又去链接了一个外部的GS

03:10.570 --> 03:14.170
这个GS我们写到这儿

03:14.170 --> 03:17.290
TESh1.GS

03:17.290 --> 03:17.690
OK

03:17.690 --> 03:19.890
我们在这里去链接一下这个GS

03:19.890 --> 03:21.890
TESh1.GS

03:21.890 --> 03:23.170
你看是不是有两个资源

03:23.170 --> 03:23.610
对吧

03:23.610 --> 03:23.930
OK

03:23.930 --> 03:26.010
我们再去链接一个图片

03:26.010 --> 03:27.370
链接一个图片

03:27.370 --> 03:29.250
图片的话我就随便找一张了

03:30.250 --> 03:31.170
就随便找一张了

03:31.170 --> 03:31.890
你们懂得对吧

03:32.890 --> 03:33.370
27

03:36.260 --> 03:36.540
就这个

03:37.860 --> 03:38.660
我好凶狠

03:39.420 --> 03:40.180
图片地址

03:40.900 --> 03:41.340
扔进来

03:41.940 --> 03:42.500
这是个图片

03:43.220 --> 03:43.660
好了

03:43.660 --> 03:44.420
就这么个页面

03:45.300 --> 03:47.500
这个页面本身它是一个资源

03:47.500 --> 03:47.820
对吧

03:47.820 --> 03:49.140
它本身是一个资源

03:49.140 --> 03:51.980
然后这个页面里边使用了一些外部资源

03:51.980 --> 03:52.940
你看这个CS

03:52.940 --> 03:53.940
是不是外部资源

03:53.940 --> 03:54.620
对吧

03:54.620 --> 03:56.740
这个script元素是不是外部资源

03:56.740 --> 03:58.020
这个1m几元素

03:58.020 --> 03:59.780
它的图片是不是外部资源

03:59.780 --> 04:00.300
对不对

04:00.740 --> 04:01.700
没问题吧

04:01.700 --> 04:02.460
对不对

04:02.460 --> 04:02.660
好

04:02.660 --> 04:04.580
那么这个页面它是怎么来加载的呢

04:04.580 --> 04:05.740
它是这样子

04:05.740 --> 04:08.380
它首先去访问我们这个页面

04:08.380 --> 04:10.260
不要说我们这里点击

04:10.260 --> 04:12.220
它就会去访问这个页面

04:12.220 --> 04:13.460
在访问这个页面过程中

04:13.460 --> 04:15.620
它是不是把这个页面的元代码就拿到了

04:15.620 --> 04:16.340
对吧

04:16.340 --> 04:18.620
它把这个页面元代码就拿到了

04:18.620 --> 04:19.980
拿到个元代码了

04:19.980 --> 04:20.180
好

04:20.180 --> 04:22.060
拿到了元代码之后呢

04:22.060 --> 04:23.740
它开始浏览

04:23.740 --> 04:26.620
就是浏览期开始分析这个元代码

04:27.620 --> 04:28.820
首先它看到这么个东西

04:28.820 --> 04:29.460
它就知道了

04:29.460 --> 04:31.740
我们是一个正常的Ethymal网页

04:31.740 --> 04:33.060
然后它看到这些元素

04:33.060 --> 04:34.020
它开始进行渲染

04:34.020 --> 04:35.340
对吧

04:35.340 --> 04:37.460
一个元素一个英元素进行渲染

04:37.460 --> 04:38.460
进行渲染

04:38.460 --> 04:39.620
渲染了过后了

04:39.620 --> 04:40.460
当渲染过程的

04:40.460 --> 04:42.460
我以前在Ethymal和CSS里面讲过了

04:42.460 --> 04:43.420
渲染过程是

04:43.420 --> 04:43.740
怎么样

04:43.740 --> 04:45.220
先去渲染副节点

04:45.220 --> 04:47.380
再渲染副节点的第一个止节点

04:47.380 --> 04:49.140
再渲染止节点的第一个止节点

04:49.140 --> 04:50.180
对吧

04:50.180 --> 04:52.700
我们整个元素它就会形成一个

04:52.700 --> 04:54.460
就是一个塑形结构

04:54.460 --> 04:54.820
对吧

04:54.820 --> 04:57.540
我们把在GS里边把它叫做多么数

04:57.540 --> 04:58.420
把它叫做多么数

04:58.420 --> 04:59.340
我们这里记一笔吧

05:01.140 --> 05:02.580
说一下

05:02.580 --> 05:06.500
就是浏览期渲染页面的过程

05:08.060 --> 05:09.300
怎么让第一步呢

05:09.300 --> 05:11.300
第一步做什么呢

05:11.300 --> 05:13.660
得到页面元代码

05:13.660 --> 05:14.460
对吧

05:14.460 --> 05:15.860
就得到这个元代码

05:15.860 --> 05:16.500
拿到了

05:16.500 --> 05:17.380
从网络上

05:17.380 --> 05:19.660
从网络中去拿到这个元代码

05:19.660 --> 05:20.660
比方我们请求百度

05:20.660 --> 05:21.820
是不是拿到百度的元代码

05:21.820 --> 05:22.500
对吧

05:22.500 --> 05:23.900
然后干嘛呢

05:23.900 --> 05:25.340
从上到下

05:25.340 --> 05:27.100
从上到下

05:27.100 --> 05:30.100
一次执行代码

05:30.100 --> 05:31.100
执行代码

05:31.100 --> 05:32.820
具体是怎么执行的呢

05:32.820 --> 05:33.900
具体的执行方式

05:35.020 --> 05:39.780
是遇到就是将元素

05:39.780 --> 05:43.500
将元素一次添加到

05:43.500 --> 05:44.460
添加到什么呢

05:44.460 --> 05:45.260
多么数中

05:46.780 --> 05:50.300
将元素一次添加到多么数中

05:50.300 --> 05:53.340
每添加一个元素

05:54.620 --> 05:56.380
每添加一个元素

05:56.380 --> 05:57.100
大概说一下

05:57.100 --> 05:58.900
这里的其实东西很深的

05:58.900 --> 06:01.020
每添加一个元素

06:01.020 --> 06:02.380
因为我们学习前端的话

06:02.380 --> 06:04.300
没有必要去了解那么深的东西

06:04.300 --> 06:05.340
这真是深得不得了

06:05.340 --> 06:07.580
不是说我一样一刻就可以讲完的

06:07.580 --> 06:08.460
深得不得了

06:08.460 --> 06:10.220
我们没有必要去了解那么深的东西

06:10.220 --> 06:11.940
但是我一定会把它的整个过程里

06:11.940 --> 06:12.820
解释清楚

06:12.820 --> 06:14.380
因为离开了过程过后

06:14.380 --> 06:15.500
你就已经搞

06:15.500 --> 06:17.740
能够搞定这里的时间了

06:17.740 --> 06:20.300
将元素一次添加到多么数中

06:20.300 --> 06:21.900
每添加一个元素的

06:21.900 --> 06:24.180
进行预渲染

06:24.180 --> 06:25.220
进行预渲染

06:25.260 --> 06:26.540
什么叫预渲染

06:26.540 --> 06:28.540
我等一下再说

06:28.540 --> 06:31.020
我这里用个PBT带画一下

06:31.020 --> 06:32.260
画一下这一块

06:32.260 --> 06:33.460
说到这就顺便说一下吧

06:35.660 --> 06:36.420
得到元带

06:36.420 --> 06:37.380
从上到下

06:37.380 --> 06:38.420
一次自行带

06:38.420 --> 06:41.220
然后看到一个元素

06:41.220 --> 06:43.100
就把它添加到多么数里面

06:43.100 --> 06:44.300
把添加的多么数里面

06:46.700 --> 06:48.500
首先看到第一个元素是

06:48.500 --> 06:49.900
第一个元素是

06:49.900 --> 06:51.380
是不是ATML

06:51.380 --> 06:53.660
把添加到多么数里面

06:53.700 --> 06:54.820
多么的就是一个节点

06:54.820 --> 06:55.380
对不对

06:55.380 --> 06:56.060
多么一个节点

06:56.060 --> 06:57.580
当然这个东西也算

06:57.580 --> 06:58.380
这个东西也算

06:58.380 --> 06:59.580
它首先建立到一个什么

06:59.580 --> 07:00.780
建立一个document的节点

07:02.260 --> 07:03.980
所以我前面还有一步

07:03.980 --> 07:05.700
这步骤非常非常多

07:05.700 --> 07:06.340
这个页面原来

07:06.340 --> 07:07.380
如果它是一个页面

07:07.380 --> 07:09.020
只要它是一个页面

07:09.020 --> 07:10.340
它不是页面就另说了

07:10.340 --> 07:10.820
对吧

07:10.820 --> 07:12.540
它只要是一个页面

07:12.540 --> 07:16.660
然后就是创建document节点

07:16.660 --> 07:18.660
就最开始的时候就已经创建好了

07:18.660 --> 07:19.980
所以说document的对象

07:19.980 --> 07:23.020
我们是可以在任何时候都可以使用的

07:23.060 --> 07:25.340
它不会存在没有的情况

07:25.340 --> 07:26.500
它一定可以使用

07:26.500 --> 07:28.300
创建document的节点

07:28.300 --> 07:30.220
然后从上到下依次执行代码

07:30.220 --> 07:31.940
将元素就从上到下

07:32.940 --> 07:33.740
这样子说

07:33.740 --> 07:39.020
从上到下将元素依次添加到多么数里面

07:39.020 --> 07:39.860
比方说

07:39.860 --> 07:41.500
它一开始遇到了一个什么

07:41.500 --> 07:43.740
遇到一个document type

07:43.740 --> 07:43.900
对吧

07:43.900 --> 07:44.380
type

07:44.380 --> 07:45.220
它是不是个节点

07:45.220 --> 07:45.700
对不对

07:45.700 --> 07:47.180
它不是把添加进去

07:47.180 --> 07:48.180
没问题吧

07:48.180 --> 07:49.340
把添加进去

07:49.340 --> 07:50.380
我这就不画箭头了

07:50.380 --> 07:52.420
为了方便不画箭头了

07:52.460 --> 07:53.740
得到一个document type

07:56.140 --> 07:56.940
document type

07:58.340 --> 07:59.700
得到这么一个节点

07:59.700 --> 08:02.180
然后又遇到了这个节点

08:02.180 --> 08:03.260
往从上到下执行

08:03.260 --> 08:04.740
遇到什么atm节点

08:04.740 --> 08:05.620
对不对

08:05.620 --> 08:06.780
又遇到了atm节点

08:08.980 --> 08:09.140
好

08:09.140 --> 08:11.500
这个时候它会对atm进行预选

08:11.500 --> 08:13.380
它会把动物对象创建好

08:13.380 --> 08:14.900
然后对它进行预选

08:14.900 --> 08:16.140
所以说选项到这一块的时候

08:16.140 --> 08:17.580
你可以获得什么

08:17.580 --> 08:19.900
是不是可以获得document

08:19.900 --> 08:21.460
就是document

08:21.460 --> 08:22.220
就是根节点了

08:22.220 --> 08:22.940
对吧

08:22.940 --> 08:24.100
它把对象创建好

08:24.100 --> 08:25.620
并且进行预选

08:25.620 --> 08:26.780
什么叫预选

08:26.780 --> 08:27.740
为什么要进行预选

08:27.740 --> 08:28.860
不是渲染的

08:28.860 --> 08:30.580
是因为后边的节点

08:30.580 --> 08:33.420
它可能会影响到这个节点的样式

08:33.420 --> 08:34.460
比方说后边

08:34.460 --> 08:35.740
我们一个元素

08:35.740 --> 08:36.740
它的高度是自动的

08:36.740 --> 08:37.260
对吧

08:37.260 --> 08:38.260
你光选的元素

08:38.260 --> 08:39.260
它是没有高度的

08:39.260 --> 08:40.380
但它里边的东西出来过

08:40.380 --> 08:41.700
它高度是不是被撑开了

08:41.700 --> 08:43.700
它的样式会发生改变

08:43.700 --> 08:45.180
所以说先预选了一遍

08:45.180 --> 08:46.300
预选了一遍

08:46.300 --> 08:48.780
每一次给它加一些直接点的时候

08:48.780 --> 08:50.500
它都会导致它重新选了

08:52.880 --> 08:55.280
一次加到每天的元素进行渲染

08:55.280 --> 08:59.520
然后按照结构

08:59.520 --> 09:03.600
一次渲染指节点

09:03.600 --> 09:05.160
什么意思

09:05.160 --> 09:06.360
就是说起来比较抽象

09:06.360 --> 09:07.600
说起来比较抽象

09:07.600 --> 09:10.200
而且先进行渲染一次

09:10.200 --> 09:11.680
然后是不是看到黑的元素了

09:11.680 --> 09:12.480
ok

09:12.480 --> 09:14.160
好黑的元素是不是加进去

09:14.160 --> 09:14.800
对吧

09:14.800 --> 09:17.400
把黑的加进去进行渲染

09:17.400 --> 09:18.320
当然这个黑的

09:18.320 --> 09:20.440
它里边它是display non的

09:20.440 --> 09:21.520
它不生成盒子

09:21.520 --> 09:22.360
因此它看不见

09:22.840 --> 09:25.280
但是它至少要去看一下

09:25.280 --> 09:26.280
它能不能选择

09:26.280 --> 09:27.360
不能选择就算了吧

09:27.360 --> 09:29.360
然后黑的里边

09:29.360 --> 09:31.360
黑的里边是不是又遇到了Meta

09:31.360 --> 09:33.360
你看它是这样的过程

09:33.360 --> 09:38.360
Meta元素它要处理的

09:38.360 --> 09:41.360
它至少会把动物对象给你创建好

09:41.360 --> 09:42.360
它是这样的处理

09:42.360 --> 09:45.360
它不是说把黑的看了过后就看body了

09:45.360 --> 09:46.360
不是这样子

09:46.360 --> 09:48.360
它一定是从上到下的

09:48.360 --> 09:50.360
黑的完了过后是Meta 对吧

09:50.360 --> 09:51.360
因为Meta是黑的

09:51.360 --> 09:52.360
是黑的指节点

09:52.360 --> 09:53.360
从上到下

09:53.360 --> 09:55.360
你就看完了黑的是不是看到Meta了

09:55.360 --> 09:56.360
三个Meta对吧

09:56.360 --> 09:58.360
三个Meta

09:58.360 --> 10:00.360
它这么一个过程

10:00.360 --> 10:01.360
三个Meta

10:01.360 --> 10:02.360
这个渲染完

10:02.360 --> 10:04.360
当然渲染它不会显示到页面上

10:04.360 --> 10:06.360
但动物元素会给你创建好

10:06.360 --> 10:07.360
动物节点对象会给你创建好

10:07.360 --> 10:09.360
还有什么title对吧

10:09.360 --> 10:10.360
title

10:12.360 --> 10:13.360
title节点

10:14.360 --> 10:16.360
当然它这些里边的什么

10:16.360 --> 10:20.360
这些里边的属性是不是也是节点

10:20.360 --> 10:21.360
对不对

10:21.360 --> 10:24.360
属性它也会进一些给你处理成对象

10:24.360 --> 10:26.360
title

10:26.360 --> 10:28.360
然后是什么link对吧

10:28.360 --> 10:30.360
link它也是节点

10:30.360 --> 10:31.360
link

10:31.360 --> 10:33.360
它这么一个过程

10:33.360 --> 10:35.360
从外到内

10:35.360 --> 10:37.360
link

10:37.360 --> 10:39.360
当然这title还有文本对吧

10:39.360 --> 10:40.360
link

10:40.360 --> 10:42.360
link它连接的是一个外部资源

10:42.360 --> 10:43.360
注意看到这个时候

10:43.360 --> 10:45.360
你看现在渲染到哪了

10:45.360 --> 10:47.360
渲染到这了对不对

10:47.360 --> 10:48.360
现在渲染到这了

10:48.360 --> 10:49.360
现在后边都还没出来

10:49.360 --> 10:50.360
都还没出来

10:50.360 --> 10:52.360
但是它这里一个外部资源对吧

10:52.360 --> 10:54.360
外部资源它会怎么样了

10:54.360 --> 10:58.740
它这个时候它会做这么一件事

10:58.740 --> 11:00.740
它这里是一个外部资源

11:00.740 --> 11:01.740
所以说它这里会做这么一件事

11:01.740 --> 11:03.740
夹仔外部资源

11:03.740 --> 11:05.740
叫同步夹仔

11:05.740 --> 11:07.740
同步夹仔外部资源

11:07.740 --> 11:09.740
同步夹仔

11:09.740 --> 11:11.740
什么叫同步夹仔

11:11.740 --> 11:12.740
就是这个时候它停了

11:12.740 --> 11:13.740
我先不动

11:13.740 --> 11:14.740
先不动圈转了

11:14.740 --> 11:16.740
因为这里有一个外部资源

11:16.740 --> 11:17.740
有一个外部资源

11:17.740 --> 11:18.740
它看到link的时候

11:18.740 --> 11:20.740
它会认为

11:20.740 --> 11:22.740
这里有一个CSS的外部资源

11:22.740 --> 11:24.740
因此它先停止渲染

11:24.740 --> 11:25.740
先停了

11:25.740 --> 11:26.740
先不动

11:26.740 --> 11:28.740
我先把这个文件的东西拿到

11:28.740 --> 11:30.740
于是它从网络中

11:30.740 --> 11:32.740
现在开始去拿这个文件

11:32.740 --> 11:34.740
从拿这个文件的信息

11:34.740 --> 11:35.740
表中文,访问,百度,访问,淘宝

11:35.740 --> 11:36.740
都是这样子

11:36.740 --> 11:37.740
访问一个淘宝页面

11:37.740 --> 11:38.740
先拿到的是什么

11:38.740 --> 11:40.740
拿到的是一个页面元代

11:40.740 --> 11:41.740
然后它开始执行渲染

11:41.740 --> 11:42.740
一边渲染了

11:42.740 --> 11:43.740
一边创建动物对象

11:43.740 --> 11:44.740
对吧都会启动的

11:44.740 --> 11:46.740
这些事情是同事做的

11:46.740 --> 11:47.740
一边渲染

11:47.740 --> 11:48.740
一边创建动物对象

11:48.740 --> 11:49.740
各种动物对象

11:49.740 --> 11:50.740
各种节点对象

11:50.740 --> 11:51.740
包括这些属性

11:51.740 --> 11:52.740
内文本的一些

11:52.740 --> 11:53.740
一次创建好

11:53.740 --> 11:54.740
每看一个节点

11:54.740 --> 11:55.740
就把它创建好

11:55.740 --> 11:56.740
然后当它看到一个

11:56.740 --> 11:58.740
外部资源的节点的时候

11:58.740 --> 11:59.740
它会怎么样了

11:59.740 --> 12:00.740
它这个时候会暂停

12:00.740 --> 12:01.740
停下来

12:01.740 --> 12:02.740
我这个地方

12:02.740 --> 12:03.740
需要一个外部资源

12:03.740 --> 12:05.740
因此我得先把

12:05.740 --> 12:06.740
这个外部资源拿到

12:06.740 --> 12:07.740
才能继续

12:07.740 --> 12:09.740
于是它后面全部等着

12:09.740 --> 12:11.740
后面东西全部等着

12:11.740 --> 12:12.740
然后我现在从网上

12:12.740 --> 12:13.740
去拿到这个CSS

12:13.740 --> 12:16.740
拿到之后再继续

12:16.740 --> 12:18.740
明白这个意思吗

12:18.740 --> 12:19.740
一定要它拿到

12:19.740 --> 12:21.740
这个CSS资源过后再继续

12:21.740 --> 12:22.740
所以说它这里

12:22.740 --> 12:23.740
要同步加载外部资源

12:23.740 --> 12:24.740
看到link

12:24.740 --> 12:25.740
加载完了

12:25.740 --> 12:26.740
比方说加载10秒钟

12:26.740 --> 12:28.740
假设网络很慢

12:28.740 --> 12:29.740
加载了10秒钟

12:29.740 --> 12:30.740
10秒钟之后

12:30.740 --> 12:32.740
我们再去看下一个节点

12:32.740 --> 12:33.740
加载完了

12:33.740 --> 12:34.740
我们再看下一个节点

12:34.740 --> 12:35.740
script是元素对吧

12:35.740 --> 12:36.740
script是元素

12:36.740 --> 12:37.740
它也是个节点

12:37.740 --> 12:38.740
也是个节点

12:40.740 --> 12:41.740
script

12:42.740 --> 12:43.740
也是个节点

12:46.560 --> 12:47.560
这样子

12:47.560 --> 12:48.560
这样子

12:49.560 --> 12:51.560
这是不是个外部资源

12:51.560 --> 12:53.560
我这里是不是有个外部资源

12:53.560 --> 12:54.560
没问题吧

12:54.560 --> 12:56.560
它也有个外部资源

12:56.560 --> 12:57.560
那这里遇到外部资源

12:57.560 --> 12:59.560
如果我们按照以前的写法

12:59.560 --> 13:00.560
就不是外部资源了

13:00.560 --> 13:01.560
以前是直接在这里写的

13:01.560 --> 13:02.560
对吧

13:03.560 --> 13:05.560
遇到外部资源干嘛干嘛呢

13:05.560 --> 13:06.560
是不是又要停下来

13:06.560 --> 13:07.560
对不对

13:07.560 --> 13:08.560
又要同步

13:08.560 --> 13:10.560
同步加载外部资源

13:11.560 --> 13:12.560
遇到这一块

13:12.560 --> 13:14.560
又要同步加载外部资源

13:15.560 --> 13:17.560
现在后面东西又得全部等着

13:17.560 --> 13:19.560
body等着

13:19.560 --> 13:20.560
emg等着

13:20.560 --> 13:21.560
对吧

13:21.560 --> 13:22.560
意思要等着

13:22.560 --> 13:24.560
等我把外部资源加载完了再说

13:24.560 --> 13:26.560
加载完了再说

13:26.560 --> 13:27.560
明白这个意思吧

13:27.560 --> 13:28.560
它是同步加载的

13:28.560 --> 13:30.560
那能不能异步呢

13:30.560 --> 13:31.560
实际上是可以异步的

13:31.560 --> 13:32.560
可以异步的

13:32.560 --> 13:33.560
那这里写的这个东西

13:33.560 --> 13:34.560
sync

13:34.560 --> 13:36.560
是个布尔属性

13:36.560 --> 13:38.560
这是新出来的一个属性

13:38.560 --> 13:39.560
以前没有

13:39.560 --> 13:40.560
新出来的一个属性

13:40.560 --> 13:41.560
sync

13:41.560 --> 13:42.560
叫做asyn

13:42.560 --> 13:44.560
同步的意思叫syncorice

13:44.560 --> 13:45.560
它的写法叫做

13:45.560 --> 13:47.560
同步的单词叫做sy

13:47.560 --> 13:48.560
sy

13:48.560 --> 13:51.560
asyncorice

13:51.560 --> 13:53.560
不可

13:53.560 --> 13:55.560
应该没写错吧

13:55.560 --> 13:57.560
同步

13:57.560 --> 13:59.560
看一下

13:59.560 --> 14:01.560
syncorice

14:01.560 --> 14:03.560
这个单词叫啥呢

14:03.560 --> 14:04.560
看到了

14:04.560 --> 14:06.560
说写

14:06.560 --> 14:07.560
syncorice

14:07.560 --> 14:08.560
我们没写错

14:08.560 --> 14:09.560
syncorice

14:09.560 --> 14:10.560
syncorice

14:10.560 --> 14:11.560
同步叫做syncorice

14:11.560 --> 14:13.560
前面加个an

14:13.560 --> 14:14.560
叫做异步

14:14.560 --> 14:15.560
叫做异步

14:15.560 --> 14:16.560
非同步的

14:16.560 --> 14:17.560
非同步的

14:17.560 --> 14:18.560
所以说

14:18.560 --> 14:19.560
我们把它叫

14:19.560 --> 14:20.560
sync

14:20.560 --> 14:21.560
async

14:21.560 --> 14:22.560
就表示是异步的

14:22.560 --> 14:23.560
当然

14:23.560 --> 14:24.560
它写全的话

14:24.560 --> 14:25.560
是这样子写的

14:25.560 --> 14:26.560
因为它是布尔属性的

14:26.560 --> 14:27.560
布尔属性的

14:27.560 --> 14:28.560
属性明的

14:28.560 --> 14:29.560
跟属性值是一样的

14:29.560 --> 14:30.560
要么就写

14:30.560 --> 14:31.560
要么就不写

14:31.560 --> 14:32.560
不写的话就同步加载

14:32.560 --> 14:34.560
如果你在script元素里边写了

14:34.560 --> 14:35.560
这个东西

14:35.560 --> 14:36.560
那么表示这个gs

14:36.560 --> 14:37.560
是异步加载

14:37.560 --> 14:38.560
异步加载

14:38.560 --> 14:40.560
异步加载是什么意思呢

14:40.560 --> 14:41.560
就是

14:41.560 --> 14:42.560
你去读吧

14:42.560 --> 14:43.560
你去从网络上拿吧

14:43.560 --> 14:44.560
哪怕你拿一个小时

14:44.560 --> 14:45.560
跟我没关系

14:45.560 --> 14:46.560
我继续渲染

14:46.560 --> 14:48.560
继续渲染后面的东西

14:48.560 --> 14:49.560
明白这意思吧

14:49.560 --> 14:50.560
这叫异步

14:50.560 --> 14:51.560
同步就是什么

14:51.560 --> 14:52.560
前面这件事没做完

14:52.560 --> 14:53.560
后面要等着

14:53.560 --> 14:54.560
这叫同步

14:54.560 --> 14:55.560
咱们介石代码

14:55.560 --> 14:56.560
是不是全是同步的

14:56.560 --> 14:57.560
前面一句话没运行完

14:57.560 --> 14:58.560
后面一句话在等着

14:58.560 --> 14:59.560
对吧

15:00.560 --> 15:02.560
默认情况下是同步的

15:02.560 --> 15:03.560
当然你可以把它变成异步的

15:03.560 --> 15:05.560
建议大家不要变

15:05.560 --> 15:07.560
建议大家不要变

15:07.560 --> 15:08.560
为什么建议大家不要变了

15:08.560 --> 15:10.560
一会我们就讲到这个问题了

15:11.560 --> 15:12.560
好

15:13.560 --> 15:14.560
这边

15:14.560 --> 15:15.560
它默认情况下

15:15.560 --> 15:16.560
同步加载外部支援

15:16.560 --> 15:17.560
好

15:17.560 --> 15:19.560
加载完了过后干嘛呢

15:19.560 --> 15:21.560
立即执行

15:21.560 --> 15:23.560
加载完后

15:24.560 --> 15:26.560
立即执行

15:26.560 --> 15:28.560
就这里的介石代码

15:28.560 --> 15:30.560
如果你不是外部支援

15:30.560 --> 15:32.560
如果你不是外部支援

15:32.560 --> 15:34.560
在这里写

15:34.560 --> 15:35.560
它会立即执行

15:35.560 --> 15:37.560
立即执行

15:37.560 --> 15:39.560
如果你事外部支援的话

15:39.560 --> 15:41.560
那么它会先加载

15:41.560 --> 15:43.560
然后再立即执行

15:43.560 --> 15:45.560
原来这个意思吧

15:45.560 --> 15:46.560
它会先加载

15:46.560 --> 15:48.560
然后再立即执行

15:48.560 --> 15:49.560
好

15:49.560 --> 15:50.560
于是呢

15:50.560 --> 15:51.560
于是呢

15:51.560 --> 15:53.560
我们来看一个现象

15:53.560 --> 15:54.560
介石里边

15:54.560 --> 15:56.560
我们现在去得到的这张图片

15:56.560 --> 15:57.560
得到的图片

15:57.560 --> 15:58.560
看一下能不能得到

15:58.560 --> 15:59.560
img

15:59.560 --> 16:00.560
document

16:00.560 --> 16:01.560
curve is negative

16:01.560 --> 16:02.560
得到什么

16:02.560 --> 16:03.560
img

16:03.560 --> 16:04.560
看一下能不能得到

16:04.560 --> 16:05.560
console

16:05.560 --> 16:06.560
img

16:07.560 --> 16:08.560
输出

16:08.560 --> 16:09.560
一边上有个图片吧

16:09.560 --> 16:10.560
对吧

16:10.560 --> 16:11.560
好看一下

16:11.560 --> 16:13.560
f12

16:13.560 --> 16:14.560
得到的是什么呢

16:14.560 --> 16:15.560
得到是不是NOW

16:15.560 --> 16:16.560
那图片不有吗

16:16.560 --> 16:17.560
为什么得到是NOW

16:17.560 --> 16:19.560
为什么找不到这个图片呢

16:19.560 --> 16:21.560
是因为你这个脚奔框呢

16:21.560 --> 16:22.560
你写到上面去了

16:22.560 --> 16:24.560
而它默认情况下

16:24.560 --> 16:25.560
是不是同步执行的

16:25.560 --> 16:26.560
同步执行的

16:26.560 --> 16:28.560
这一块都还没有加载完

16:28.560 --> 16:29.560
都还没有执行完

16:29.560 --> 16:30.560
下面一定要等着

16:30.560 --> 16:31.560
一定等着

16:31.560 --> 16:33.560
等它执行完了过后

16:33.560 --> 16:34.560
后边才能运行

16:34.560 --> 16:35.560
我们再来一个例子

16:35.560 --> 16:36.560
所以说

16:36.560 --> 16:37.560
当你运行到这的时候

16:37.560 --> 16:38.560
还没有这个img元素

16:38.560 --> 16:39.560
对吧

16:39.560 --> 16:40.560
img元素还没有出来

16:40.560 --> 16:41.560
还没读到

16:41.560 --> 16:42.560
所以说看不见

16:42.560 --> 16:43.560
这就是我为什么

16:43.560 --> 16:44.560
我们之前呢

16:44.560 --> 16:45.560
要把这个scripps元素

16:45.560 --> 16:46.560
写到下边的原因

16:46.560 --> 16:47.560
写到下边呢

16:47.560 --> 16:48.560
你去执行的时候

16:48.560 --> 16:49.560
是不是这些东西

16:49.560 --> 16:50.560
全部都在了

16:50.560 --> 16:51.560
对吧

16:51.560 --> 16:52.560
都在了

16:52.560 --> 16:53.560
是这么个意思

16:53.560 --> 16:54.560
这么个意思

16:54.560 --> 16:55.560
再看

16:55.560 --> 16:56.560
如果我这一块

16:56.560 --> 16:57.560
scripps代码了

16:57.560 --> 16:58.560
执行的东西很多

16:58.560 --> 16:59.560
比方说吧

16:59.560 --> 17:00.560
比方说

17:00.560 --> 17:01.560
我们写个护寻环

17:01.560 --> 17:03.560
i等于

17:04.560 --> 17:06.560
i小约等于

17:06.560 --> 17:09.130
多写点吧

17:09.130 --> 17:10.130
i加加

17:10.130 --> 17:12.130
然后输出i

17:12.130 --> 17:13.130
输出这么多是i

17:13.130 --> 17:14.130
看一下

17:14.130 --> 17:15.130
保存

17:16.130 --> 17:17.130
等一下

17:17.130 --> 17:18.130
我扛死了

17:18.130 --> 17:19.130
扛死了

17:19.130 --> 17:20.130
关了

17:20.130 --> 17:21.130
重新来

17:21.130 --> 17:22.130
重来

17:22.130 --> 17:23.130
好 看着

17:23.130 --> 17:24.130
主要是观察

17:24.130 --> 17:25.130
图片有没有出来

17:25.130 --> 17:27.130
图片有出来吗

17:27.130 --> 17:28.130
是不是没有

17:28.130 --> 17:29.130
以技术代码

17:29.130 --> 17:30.130
没执行完了

17:30.130 --> 17:31.130
全部在等着

17:31.130 --> 17:32.130
对吧

17:32.130 --> 17:33.130
它没发渲染

17:33.130 --> 17:34.130
其他什么渲染

17:34.130 --> 17:35.130
多么对象

17:35.130 --> 17:36.130
全部在等着

17:36.130 --> 17:37.130
明白的意思吧

17:37.130 --> 17:38.130
这就是这一块

17:38.130 --> 17:39.130
所以说

17:39.130 --> 17:41.130
我们这里得出一个结论

17:41.130 --> 17:43.130
得出一个结论

17:43.130 --> 17:44.130
就是说

17:44.130 --> 17:46.130
这里的知识点很多

17:46.130 --> 17:47.130
比看上

17:47.130 --> 17:48.130
它光是一个事件

17:48.130 --> 17:49.130
它要理解的

17:49.130 --> 17:50.130
前置知识很多

17:50.130 --> 17:51.130
就是说

17:51.130 --> 17:53.130
GS代码

17:54.130 --> 17:56.130
应该

17:56.130 --> 17:59.130
尽量写到页面

17:59.130 --> 18:01.130
写到页面底部

18:01.130 --> 18:02.130
为什么呢

18:02.130 --> 18:05.130
它不影响整个页面的渲染

18:05.130 --> 18:06.130
就是说页面渲染完

18:06.130 --> 18:08.130
你先看得见东西过后

18:08.130 --> 18:10.130
我们再说功能

18:10.130 --> 18:11.130
你东西都看不见

18:11.130 --> 18:13.130
我们说什么功能了

18:13.130 --> 18:14.130
对吧 是这个意思吧

18:14.130 --> 18:16.130
而且你把它写到顶部的话

18:16.130 --> 18:17.130
还有个什么问题呢

18:17.130 --> 18:19.130
如果这个介石文件内容很多

18:19.130 --> 18:21.130
它是不是要夹载它

18:21.130 --> 18:22.130
同步夹载

18:22.130 --> 18:23.130
要等半天

18:23.130 --> 18:24.130
对不对

18:24.130 --> 18:25.130
等半天才能把它夹载完

18:25.130 --> 18:26.130
夹载完了过后

18:26.130 --> 18:28.130
我们才能看到页面上的东西

18:28.130 --> 18:29.130
而我们的

18:29.130 --> 18:31.130
看到一个页面的优先级

18:31.130 --> 18:32.130
一定是看到东西

18:32.130 --> 18:33.130
要比功能要重要的多

18:33.130 --> 18:34.130
我先要看到东西

18:34.130 --> 18:36.130
然后再说你的功能

18:36.130 --> 18:39.130
所以说我们应该在最后去夹载GS

18:39.130 --> 18:40.130
而CSS

18:40.130 --> 18:42.130
为什么要放到上面了

18:42.130 --> 18:44.130
CSS放上面的原因

18:44.130 --> 18:45.130
干脆记 干脆记

18:45.130 --> 18:47.130
这些都非常重要

18:47.130 --> 18:49.130
具体的原因

18:49.130 --> 18:50.130
就是CSS

18:50.130 --> 18:54.130
应该写到页面

18:54.130 --> 18:55.130
页面顶部

18:55.130 --> 18:56.130
放到页面顶部

18:56.130 --> 18:57.130
为什么呢

18:57.130 --> 18:59.130
是为了避免

18:59.130 --> 19:02.130
出现闪烁

19:02.130 --> 19:03.130
避免出现闪烁

19:03.130 --> 19:05.130
为什么会闪烁呢

19:05.130 --> 19:06.130
因为会倒

19:06.130 --> 19:07.130
如果你放到页面后面的话

19:07.130 --> 19:10.130
如果放到页面

19:10.130 --> 19:11.130
顶部

19:11.130 --> 19:13.130
会导致

19:13.130 --> 19:16.130
元素先没有样式

19:16.130 --> 19:17.130
对吧 先还没有把CSS

19:17.130 --> 19:18.130
夹载出来

19:18.130 --> 19:19.130
先没有样式

19:19.130 --> 19:20.130
然后得到一个默认样式

19:20.130 --> 19:21.130
对不对

19:21.130 --> 19:22.130
默认样式当然很丑

19:22.130 --> 19:23.130
对不对 很丑

19:23.130 --> 19:26.130
就是使用

19:26.130 --> 19:29.130
丑陋的默认样式

19:29.130 --> 19:30.130
一开始没有样式

19:30.130 --> 19:31.130
如果你把CSS

19:31.130 --> 19:33.130
放到下面了

19:33.130 --> 19:35.130
放到下面了

19:35.130 --> 19:36.130
假设这个页面上有很多元素

19:36.130 --> 19:37.130
这个元素一开始确认

19:37.130 --> 19:38.130
是不是没有样式

19:38.130 --> 19:39.130
有啥样式呢

19:39.130 --> 19:40.130
都没有样式

19:40.130 --> 19:41.130
所以说

19:41.130 --> 19:42.130
到这个页面

19:42.130 --> 19:43.130
是用丑陋的默认样式

19:43.130 --> 19:45.130
然后

19:45.130 --> 19:47.130
当读到

19:47.130 --> 19:50.130
CSS文件后

19:50.130 --> 19:52.130
然后重新改变样式

19:52.130 --> 19:53.130
重新改变样式

19:53.130 --> 19:54.130
你感觉页面散了一下

19:54.130 --> 19:56.130
改变样式

19:56.130 --> 19:57.130
什么感觉呢

19:57.130 --> 19:58.130
就是说

19:58.130 --> 19:59.130
用户看到的结果

19:59.130 --> 20:00.130
只能到脑袋里面想

20:00.130 --> 20:01.130
用户看到的结果

20:01.130 --> 20:02.130
因为我们本地的代码

20:02.130 --> 20:03.130
速度太快了

20:03.130 --> 20:04.130
你感受不到

20:04.130 --> 20:06.130
用户看到的结果是啥呢

20:06.130 --> 20:08.130
就是说

20:08.130 --> 20:11.130
一开始是一个很丑的页面

20:11.130 --> 20:12.130
怎么这么丑

20:12.130 --> 20:13.130
通常一下双变了

20:13.130 --> 20:14.130
变得很漂亮了

20:14.130 --> 20:15.130
就是页面散说

20:15.130 --> 20:17.130
因此CSS的样式

20:17.130 --> 20:19.130
应该最先加加载出来

20:19.130 --> 20:21.130
但是CSS不一样

20:21.130 --> 20:23.130
CSS应该写到

20:23.130 --> 20:24.130
页面底部

20:24.130 --> 20:25.130
为什么

20:25.130 --> 20:26.130
有两个原因

20:26.130 --> 20:27.130
第一个

20:27.130 --> 20:29.130
原因的是

20:29.130 --> 20:31.130
避免阻涉

20:31.130 --> 20:32.130
主要阻涉

20:32.130 --> 20:33.130
就是导致后面东西等着

20:33.130 --> 20:35.130
就像排队一样

20:35.130 --> 20:36.130
就是堵车一样

20:36.130 --> 20:37.130
前面车没有车

20:37.130 --> 20:38.130
后面车的等着

20:38.130 --> 20:39.130
就是阻涉

20:39.130 --> 20:40.130
避免阻涉

20:40.130 --> 20:42.130
后续的渲染

20:42.130 --> 20:44.130
我现在不是

20:44.130 --> 20:46.130
因为页面的看到东西

20:46.130 --> 20:47.130
优先级

20:47.130 --> 20:48.130
永远比执行功能

20:48.130 --> 20:50.130
优先级要高

20:50.130 --> 20:52.130
东西都看不见

20:52.130 --> 20:53.130
你执行啥功能

20:53.130 --> 20:54.130
对不对

20:54.130 --> 20:56.130
为了避免后续的渲染阻涉

20:56.130 --> 20:57.130
你功能执行半天

20:57.130 --> 20:58.130
我现在东西都看不见

20:58.130 --> 21:00.130
就像刚才一个页面那样子

21:00.130 --> 21:01.130
如果你功能很多

21:01.130 --> 21:02.130
那么导致这个页面一直卡着

21:02.130 --> 21:04.130
或者说这个介石文件很大

21:04.130 --> 21:05.130
你一直在读

21:05.130 --> 21:06.130
一直在读

21:06.130 --> 21:07.130
读不出来

21:07.130 --> 21:08.130
读了半天

21:08.130 --> 21:09.130
页面都还没开始渲染

21:09.130 --> 21:11.130
避免阻涉后续的渲染

21:11.130 --> 21:13.130
而且同时还有一个问题

21:13.130 --> 21:14.130
就是

21:14.130 --> 21:15.130
什么问题

21:15.130 --> 21:16.130
就是

21:16.130 --> 21:17.130
也避免

21:17.130 --> 21:18.130
也避免

21:19.130 --> 21:22.130
运行介石时

21:22.130 --> 21:23.130
怎么样了

21:24.130 --> 21:26.130
得不到

21:27.130 --> 21:29.130
页面中的元素

21:30.130 --> 21:32.130
基于这么两个原因

21:32.130 --> 21:34.130
所以说我们应该把介石写到一面底部

21:34.130 --> 21:36.130
主要是第一个原因

21:36.130 --> 21:37.130
主要是第一个

21:37.130 --> 21:38.130
后面这个原因

21:38.130 --> 21:39.130
我们后面都可以解决

21:39.130 --> 21:40.130
原来的意思

21:40.130 --> 21:42.130
它是这么一回事

21:43.130 --> 21:44.130
然后

21:45.130 --> 21:46.130
介石加在完了过后

21:47.130 --> 21:48.130
黑的元素是不是完了

21:48.130 --> 21:50.130
黑的元素OK

21:51.130 --> 21:52.130
接下来我们继续加载

21:52.130 --> 21:54.130
加载包底元素

21:54.130 --> 21:55.130
我们看

21:55.130 --> 21:57.130
继续加载包底元素

22:00.130 --> 22:02.130
包底元素里面是不是又有东西

22:02.130 --> 22:03.130
这个就删掉了

22:03.130 --> 22:05.130
包底元素里面是

22:05.130 --> 22:06.130
是不是一个图片

22:06.130 --> 22:07.130
是一个图片

22:10.130 --> 22:11.130
还是就这样写吧

22:14.130 --> 22:15.130
是一张图片

22:15.130 --> 22:17.130
这个图片不太一样

22:18.130 --> 22:19.130
图片不太一样

22:19.130 --> 22:21.130
图片啊什么视频啊

22:21.130 --> 22:23.130
音频啊这些不太一样

22:23.130 --> 22:24.130
这些东西呢

22:24.130 --> 22:25.130
它是一步渲染的

22:26.130 --> 22:27.130
它是一步渲染的

22:31.080 --> 22:32.080
一步渲染

22:32.080 --> 22:34.580
也就是图片

22:35.580 --> 22:36.580
这里面的东西

22:36.580 --> 22:37.580
这里面的内容

22:38.580 --> 22:40.580
它不会导致后边的组设

22:40.580 --> 22:41.580
有时候你现在遇到图片了

22:41.580 --> 22:42.580
对吧

22:42.580 --> 22:43.580
是不是要去加载这个图片

22:43.580 --> 22:44.580
对吧

22:44.580 --> 22:45.580
要去加载这个图片

22:45.580 --> 22:46.580
OK

22:46.580 --> 22:47.580
我不等你

22:47.580 --> 22:48.580
我等你加载完了过后

22:48.580 --> 22:49.580
我再选择下一张图片

22:49.580 --> 22:50.580
那你想

22:50.580 --> 22:51.580
这样是不是很恐怖

22:52.580 --> 22:53.580
页面上

22:53.580 --> 22:55.580
如果有100张图片的话

22:55.580 --> 22:57.580
第一张图片渲染完了过后

22:57.580 --> 22:58.580
再去得到第二张图片

22:58.580 --> 22:59.580
那用户得等死

22:59.580 --> 23:00.580
对不对

23:00.580 --> 23:02.580
所以说图片这一块

23:02.580 --> 23:03.580
包括音频视频

23:04.580 --> 23:05.580
这些资源

23:05.580 --> 23:07.580
它是一步渲染的

23:07.580 --> 23:08.580
就是说

23:08.580 --> 23:09.580
我去读这个资源的时候

23:09.580 --> 23:10.580
我不会等

23:10.580 --> 23:11.580
后边继续渲染

23:11.580 --> 23:13.580
比方的后边有什么DIVP元素

23:13.580 --> 23:15.580
文本框继续渲染

23:16.580 --> 23:18.580
它不会等待图片渲染完

23:18.580 --> 23:19.580
不要这意思吧

23:20.580 --> 23:22.580
也就是说啥了

23:22.580 --> 23:23.580
也就是说啥了

23:23.580 --> 23:24.580
我们再看一下

23:25.580 --> 23:26.580
我们这样

23:26.580 --> 23:27.580
把CCS写上去

23:27.580 --> 23:28.580
刚才说了

23:28.580 --> 23:29.580
CCS应该写上去

23:29.580 --> 23:30.580
然后

23:30.580 --> 23:31.580
JS写下来

23:32.580 --> 23:35.580
为了让我们看得更清楚效果的话

23:35.580 --> 23:36.580
我们在这里

23:36.580 --> 23:37.580
不使用外部文件了

23:37.580 --> 23:38.580
在这里

23:38.580 --> 23:39.580
得到图片

23:39.580 --> 23:40.580
Documents

23:40.580 --> 23:41.580
Crivy connector

23:41.580 --> 23:42.580
得到图片

23:43.580 --> 23:45.580
然后输出这个图片的宽高

23:45.580 --> 23:46.580
我这里顺便说一下

23:46.580 --> 23:48.580
虽然我还没有讲这一块知识

23:48.580 --> 23:49.580
但是我顺便提一下

23:49.580 --> 23:50.580
非常简单

23:50.580 --> 23:51.580
一个元素

23:51.580 --> 23:52.580
你要得到它的尺寸

23:52.580 --> 23:53.580
怎么得到了

23:53.580 --> 23:54.580
其实你只

23:54.580 --> 23:55.580
特别图片这一块

23:55.580 --> 23:57.580
图片这一块直接用宽度

23:57.580 --> 23:58.580
高度就行了

23:59.580 --> 24:00.580
图片这一块

24:00.580 --> 24:01.580
直接使用宽度高度就行了

24:01.580 --> 24:02.580
你不用写什么style

24:02.580 --> 24:03.580
不用写什么style

24:03.580 --> 24:06.580
这样得到就是图片本身的宽高

24:07.580 --> 24:08.580
因为我们现在

24:08.580 --> 24:10.580
没有设置图片的宽高

24:10.580 --> 24:11.580
对吧

24:11.580 --> 24:12.580
并没有设置它的宽高

24:12.580 --> 24:13.580
比方说

24:13.580 --> 24:14.580
那假是吗

24:14.580 --> 24:15.580
我们设置一下

24:15.580 --> 24:17.580
设置一下图片宽高

24:17.580 --> 24:18.580
宽度100

24:18.580 --> 24:19.580
高度100

24:19.580 --> 24:21.580
看一下图片的宽高

24:21.580 --> 24:23.580
这里能不能得到

24:23.580 --> 24:24.580
运行

24:24.580 --> 24:28.860
F12

24:28.860 --> 24:29.860
F12

24:30.860 --> 24:31.860
能得到

24:31.860 --> 24:32.860
没问题

24:32.860 --> 24:33.860
那么现在

24:33.860 --> 24:34.860
我在CSS里边

24:34.860 --> 24:36.860
不去设置它的宽高

24:36.860 --> 24:37.860
不去设置

24:37.860 --> 24:39.860
不去设置的话

24:39.860 --> 24:40.860
这个图片的宽高

24:40.860 --> 24:41.860
应该是什么

24:41.860 --> 24:42.860
应该来自于

24:42.860 --> 24:44.860
这一张图片的宽高

24:44.860 --> 24:45.860
对吧

24:45.860 --> 24:46.860
应该是这一张图片的宽高

24:46.860 --> 24:48.860
那么它是自动的

24:48.860 --> 24:49.860
它自动的

24:49.860 --> 24:51.860
适应原式图片的宽高大小

24:51.860 --> 24:52.860
那么这个时候

24:52.860 --> 24:53.860
我们来看一下

24:53.860 --> 24:54.860
宽度高度能不能得到

24:54.860 --> 24:55.860
能不能得到

24:56.860 --> 24:57.860
刷新

24:57.860 --> 24:58.860
是不是0

24:58.860 --> 24:59.860
对吧

24:59.860 --> 25:00.860
0

25:00.860 --> 25:01.860
为什么是0

25:01.860 --> 25:03.860
它为什么是0

25:03.860 --> 25:04.860
就是因为这个图片

25:04.860 --> 25:06.860
它是一步渲染的

25:06.860 --> 25:07.860
我们看

25:07.860 --> 25:09.860
执行这个元素的时候

25:09.860 --> 25:10.860
它把动物对象创建好

25:10.860 --> 25:11.860
于是我们页面上

25:11.860 --> 25:12.860
有了这么个动物对象

25:12.860 --> 25:13.860
因此我们才

25:13.860 --> 25:14.860
才能在后边

25:14.860 --> 25:16.860
从这个动物宿中

25:16.860 --> 25:17.860
从整个动物宿中

25:17.860 --> 25:19.860
拿到这个1米几对象

25:19.860 --> 25:21.860
才能拿得到

25:21.860 --> 25:22.860
你看我这里不是6的吧

25:22.860 --> 25:23.860
不是新创建的吧

25:23.860 --> 25:24.860
是得到的

25:24.860 --> 25:26.860
是从个动物宿里边

25:26.860 --> 25:27.860
去得到的1米几对象

25:27.860 --> 25:28.860
能得到这个对象

25:28.860 --> 25:29.860
这个没问题

25:29.860 --> 25:31.860
但是由于这个图片

25:31.860 --> 25:33.860
支援它是一步加载的

25:33.860 --> 25:35.860
运行到这个代码的时候

25:35.860 --> 25:37.860
这个支援可能还没有加载完

25:37.860 --> 25:38.860
这是个网络支援

25:38.860 --> 25:39.860
代码运行速度太快了

25:39.860 --> 25:41.860
所以支援还没有加载完

25:41.860 --> 25:44.860
因此这里的宽高就是你

25:44.860 --> 25:45.860
就是你

25:45.860 --> 25:47.860
明白这个意思吧

25:47.860 --> 25:48.860
这就是我们这一块

25:48.860 --> 25:50.860
一页面它是什么渲染的

25:50.860 --> 25:51.860
要搞清楚

25:51.860 --> 25:53.860
我们的link元素和script元素

25:53.860 --> 25:55.860
它是同步渲染的

25:55.860 --> 25:57.860
刚才说了script元素

25:57.860 --> 25:59.860
可以把它变成一步渲染

25:59.860 --> 26:00.860
为什么不变呢

26:00.860 --> 26:03.860
为什么不把它变成一步渲染的

26:03.860 --> 26:04.860
就是一步读取呢

26:04.860 --> 26:06.860
是因为我们的script元素

26:06.860 --> 26:08.860
你如果用一步读取的话

26:08.860 --> 26:09.860
你就不能确定

26:09.860 --> 26:12.860
我这个代码是在什么时候执行了

26:12.860 --> 26:14.860
它就会有这么一个问题

26:14.860 --> 26:15.860
我无法确定这个代码

26:15.860 --> 26:17.860
是在什么时候执行

26:17.860 --> 26:20.860
那么你还不如把它写到最后

26:20.860 --> 26:22.860
至少我们可以确定

26:22.860 --> 26:23.860
这个代码是在前面的

26:23.860 --> 26:25.860
渲染之后进行执行的

26:25.860 --> 26:26.860
对吧

26:26.860 --> 26:27.860
因为我要保证前面的元素

26:27.860 --> 26:29.860
全部加载出来之后

26:29.860 --> 26:31.860
我们才能去使用这些元素

26:31.860 --> 26:32.860
你用一步的话

26:32.860 --> 26:33.860
你就不知道什么时候执行了

26:33.860 --> 26:35.860
当然有些特殊情况

26:35.860 --> 26:36.860
咱们学到后边什么

26:36.860 --> 26:38.860
因为现在的atma变化

26:38.860 --> 26:39.860
就是技能时的

26:39.860 --> 26:41.860
以及atma5变化

26:41.860 --> 26:43.860
它的API变化也蛮多的

26:43.860 --> 26:44.860
所以说我们学到后边的时候

26:44.860 --> 26:46.860
可能会有一些场景

26:46.860 --> 26:47.860
我们需要一步

26:47.860 --> 26:48.860
了解一下就行了

26:48.860 --> 26:50.860
我们这里先说同步的

26:50.860 --> 26:51.860
好

26:51.860 --> 26:53.860
我们的link元素和script元素

26:53.860 --> 26:54.860
它是

26:54.860 --> 26:55.860
如果是外部文件的话

26:55.860 --> 26:57.860
它们是同步加载的

26:57.860 --> 26:58.860
也解释了原因

26:58.860 --> 27:00.860
它为什么这个东西要写上面

27:00.860 --> 27:01.860
这东西为什么要写下面

27:01.860 --> 27:02.860
写上面的目的

27:02.860 --> 27:04.860
是为了让它先加载

27:04.860 --> 27:06.860
这样子我们页面才有样式

27:06.860 --> 27:08.860
它写下面的原因

27:08.860 --> 27:10.860
就是我们先让页面的东西出来

27:10.860 --> 27:11.860
出来过后

27:11.860 --> 27:13.860
我们看到建过后再说功能

27:13.860 --> 27:15.860
就是它的元素

27:15.860 --> 27:16.860
为什么它写上面

27:16.860 --> 27:17.860
它写下面

27:17.860 --> 27:19.860
为什么这个图片的宽高得不到呢

27:19.860 --> 27:20.860
是因为这个图片

27:20.860 --> 27:21.860
它的加载是一一步的

27:21.860 --> 27:22.860
它只有元素

27:22.860 --> 27:23.860
它没有资源

27:23.860 --> 27:25.860
资源正在加载中

27:25.860 --> 27:26.860
而运行到这个代码的时候

27:26.860 --> 27:27.860
它资源还不存在

27:27.860 --> 27:29.860
所以它宽高无法确定

27:29.860 --> 27:31.860
无法确定它的宽高

27:31.860 --> 27:32.860
没有这意思吧

27:32.860 --> 27:33.860
因此

27:33.860 --> 27:35.860
这就是解释这一部分的原因

27:35.860 --> 27:37.860
接下来我们再回过头来说

27:37.860 --> 27:38.860
这个什么

27:38.860 --> 27:40.860
Lo的事件

27:40.860 --> 27:41.860
Lo的事件是什么意思呢

27:41.860 --> 27:43.860
指的是页面中

27:43.860 --> 27:46.860
所有资源全部加载完毕

27:46.860 --> 27:48.860
什么意思

27:48.860 --> 27:50.860
页面上有CSS吧

27:50.860 --> 27:51.860
有什么

27:51.860 --> 27:52.860
是不是有GS

27:52.860 --> 27:53.860
有GS代码

27:53.860 --> 27:54.860
GS资源

27:54.860 --> 27:56.860
有可能是外部GS

27:56.860 --> 27:57.860
有可能是外部GS

27:57.860 --> 27:59.860
TES-1.GS

27:59.860 --> 28:01.860
有可能是外部的

28:02.860 --> 28:03.860
总之

28:03.860 --> 28:04.860
页面上有各种各样的资源

28:04.860 --> 28:05.860
有图片资源

28:05.860 --> 28:06.860
它要等什么呢

28:06.860 --> 28:08.860
等从网络中

28:08.860 --> 28:10.860
把这些资源全部一个不辣的

28:10.860 --> 28:11.860
全部拿到

28:11.860 --> 28:14.860
它才会去执行这个事件

28:14.860 --> 28:15.860
才会去执行这个事件

28:15.860 --> 28:17.860
Lo的事件

28:17.860 --> 28:18.860
所以这个Lo的事件

28:18.860 --> 28:19.860
它执行时间点

28:19.860 --> 28:21.860
是非常非常靠厚的

28:21.860 --> 28:22.860
比方说

28:22.860 --> 28:23.860
咱们TES-1.GS

28:23.860 --> 28:24.860
我们可以这样写

28:24.860 --> 28:25.860
Windows

28:25.860 --> 28:26.860
Windows

28:26.860 --> 28:27.860
Lo的

28:27.860 --> 28:29.860
给它注册这个事件

28:29.860 --> 28:31.860
然后我们输出

28:31.860 --> 28:33.860
输出什么

28:33.860 --> 28:36.860
全部夹载完毕

28:36.860 --> 28:38.860
保存看一下

28:38.860 --> 28:39.860
那么

28:39.860 --> 28:41.860
这里很快

28:41.860 --> 28:42.860
你看

28:42.860 --> 28:43.860
能看到有明显的一个顺序

28:43.860 --> 28:44.860
对吧

28:44.860 --> 28:45.860
你看图片出来过后

28:45.860 --> 28:47.860
这里才显示这个东西

28:47.860 --> 28:48.860
所以说在这个事件里边

28:48.860 --> 28:51.860
我们能不能得到图片的

28:51.860 --> 28:53.860
就是宽高

28:53.860 --> 28:54.860
能不能得到

28:54.860 --> 28:57.860
肯定可以得到

28:57.860 --> 28:58.860
在这个事件里边

28:58.860 --> 28:59.860
我们去得到图片

28:59.860 --> 29:01.860
输出图片的宽高

29:01.860 --> 29:02.860
可不可以

29:02.860 --> 29:05.860
绝对可以

29:05.860 --> 29:07.860
保存

29:07.860 --> 29:08.860
你看

29:08.860 --> 29:09.860
是不是一定可以

29:09.860 --> 29:10.860
我们再来问

29:10.860 --> 29:12.860
再来问大家一个问题

29:12.860 --> 29:13.860
你离现这个事件过后

29:13.860 --> 29:15.860
如果我把这个GS

29:15.860 --> 29:16.860
放到这

29:16.860 --> 29:17.860
如果把这个GS放到这

29:17.860 --> 29:19.860
可不可以

29:19.860 --> 29:20.860
能不能得到图片

29:20.860 --> 29:22.860
以及图片的宽高

29:22.860 --> 29:24.860
可不可以

29:24.860 --> 29:26.860
保存看一下

29:26.860 --> 29:27.860
可以

29:27.860 --> 29:29.860
为什么现在就可以了

29:29.860 --> 29:30.860
现在为什么可以了

29:30.860 --> 29:31.860
因为我这个代码

29:31.860 --> 29:33.860
不是立即执行的

29:33.860 --> 29:34.860
不是立即执行的

29:34.860 --> 29:35.860
是要等

29:35.860 --> 29:36.860
它等到什么时候

29:36.860 --> 29:37.860
我这个代码

29:37.860 --> 29:38.860
只是注册了一个事件而已

29:38.860 --> 29:39.860
它只在注册事件

29:39.860 --> 29:41.860
注册了谁事件

29:41.860 --> 29:42.860
谁的事件

29:42.860 --> 29:43.860
Windows的事件

29:43.860 --> 29:45.860
只是在注册它的事件

29:45.860 --> 29:46.860
因此

29:46.860 --> 29:47.860
这个代码并没有执行

29:47.860 --> 29:49.860
它等到什么时候执行

29:49.860 --> 29:50.860
等到这个Windows

29:50.860 --> 29:51.860
整个文档

29:51.860 --> 29:53.860
全部加载完毕之后

29:53.860 --> 29:54.860
再会执行

29:54.860 --> 29:55.860
所以说

29:55.860 --> 29:56.860
写到这

29:56.860 --> 29:58.860
功能层面是一样的

29:58.860 --> 29:59.860
但是你的代码

29:59.860 --> 30:00.860
但是你的引用

30:00.860 --> 30:01.860
就是GS

30:01.860 --> 30:02.860
外部文件的引用

30:02.860 --> 30:03.860
仍然应该写到这

30:03.860 --> 30:04.860
不应该写到这上面

30:04.860 --> 30:06.860
原因的我解释过了

30:06.860 --> 30:07.860
因为写到上面

30:07.860 --> 30:09.860
它会多加载一些文件

30:09.860 --> 30:10.860
比方说我们的页面中

30:10.860 --> 30:11.860
有20个GS文件

30:11.860 --> 30:12.860
很有可能

30:12.860 --> 30:14.860
那它写到前面的话

30:14.860 --> 30:15.860
页面都看不见东西

30:15.860 --> 30:16.860
对吧

30:16.860 --> 30:17.860
20个GS

30:17.860 --> 30:18.860
全部加载完

30:18.860 --> 30:19.860
明白的意思吧

30:19.860 --> 30:20.860
所以说我们

30:20.860 --> 30:21.860
一般写到后边

30:21.860 --> 30:23.860
还是写到后边

30:23.860 --> 30:25.860
这就是这个

30:25.860 --> 30:26.860
onload的事件

30:26.860 --> 30:28.860
但是这个onload的事件

30:28.860 --> 30:29.860
好不好呢

30:29.860 --> 30:30.860
凭什么用的多不多呢

30:30.860 --> 30:31.860
不咋用

30:31.860 --> 30:33.860
特别是window.onload的

30:33.860 --> 30:35.860
几乎是不咋用

30:35.860 --> 30:36.860
几乎是不咋用

30:36.860 --> 30:38.860
为什么不咋用这个事件呢

30:38.860 --> 30:39.860
为什么不太会去

30:39.860 --> 30:40.860
用这个事件呢

30:40.860 --> 30:41.860
因为这个事件

30:41.860 --> 30:42.860
太靠后了

30:42.860 --> 30:43.860
时间点太靠后了

30:43.860 --> 30:44.860
你想想

30:44.860 --> 30:45.860
我们页面上的图片

30:45.860 --> 30:46.860
什么CSS

30:46.860 --> 30:47.860
介绍的资源

30:47.860 --> 30:48.860
得有多少

30:48.860 --> 30:49.860
相当相当多

30:49.860 --> 30:50.860
对吧

30:50.860 --> 30:51.860
还有一些问题是

30:51.860 --> 30:52.860
还有一些就是

30:52.860 --> 30:53.860
因为网络传输不好

30:53.860 --> 30:54.860
或者是有些资源

30:54.860 --> 30:55.860
消了

30:55.860 --> 30:56.860
老是夹载半天

30:56.860 --> 30:57.860
就夹载不出来

30:57.860 --> 30:58.860
是不是这个事件

30:58.860 --> 30:59.860
又一直触发不了

30:59.860 --> 31:00.860
就一直执行不了

31:00.860 --> 31:01.860
比方说

31:01.860 --> 31:02.860
咱们给他写一个

31:02.860 --> 31:04.860
错误的路径

31:04.860 --> 31:05.860
错误的路径

31:05.860 --> 31:08.620
你看一下

31:08.620 --> 31:10.620
这里主要是

31:10.620 --> 31:11.620
因为我这里

31:11.620 --> 31:12.620
网络速度很快

31:12.620 --> 31:13.620
他马上发现

31:13.620 --> 31:14.620
这是个无效的资源

31:14.620 --> 31:15.620
如果你网络速度差一点

31:15.620 --> 31:16.620
他要读半天

31:16.620 --> 31:17.620
一次

31:17.620 --> 31:18.620
再读一次

31:18.620 --> 31:19.620
再得不到

31:19.620 --> 31:20.620
反复去读

31:20.620 --> 31:21.620
导这个事件

31:21.620 --> 31:22.620
一直读不出来

31:22.620 --> 31:23.620
一直执行不了

31:23.620 --> 31:24.620
所以这个事件

31:24.620 --> 31:25.620
window.onload的事件

31:25.620 --> 31:26.620
不太用

31:26.620 --> 31:27.620
但是这个onload的事件

31:27.620 --> 31:28.620
还是有用的

31:28.620 --> 31:29.620
什么时候有用了

31:29.620 --> 31:30.620
就是

31:30.620 --> 31:32.620
针对这些图片

31:32.620 --> 31:34.620
因为图片是一步夹载的

31:34.620 --> 31:36.620
比方说我们这个onload的事件

31:36.620 --> 31:37.620
window.onload的事件

31:37.620 --> 31:38.620
太恐怖了

31:38.620 --> 31:40.620
一面上有300个图片

31:40.620 --> 31:41.620
我等300个图片

31:41.620 --> 31:42.620
全部夹载完

31:42.620 --> 31:43.620
我才能使用这个onload的事件

31:43.620 --> 31:44.620
才会运行

31:44.620 --> 31:46.620
但是我要的只是啥

31:46.620 --> 31:48.620
只是这一张图片的

31:48.620 --> 31:49.620
宽高

31:49.620 --> 31:50.620
我只要了

31:50.620 --> 31:51.620
这一张图片的宽高

31:51.620 --> 31:52.620
那怎么办呢

31:52.620 --> 31:54.620
看着我们这样子写

31:54.620 --> 31:55.620
得到这张图片

31:55.620 --> 31:57.620
得到这张图片

31:57.620 --> 31:59.620
这是这一张图片对吧

31:59.620 --> 32:00.620
然后呢

32:00.620 --> 32:03.620
我们给这个图片动物元素

32:03.620 --> 32:05.620
注册这个事件 onload的

32:05.620 --> 32:06.620
动物元素上面

32:06.620 --> 32:07.620
可以注册这个事件的

32:07.620 --> 32:09.620
看一下我们记一笔

32:09.620 --> 32:11.620
window.onload的

32:11.620 --> 32:12.620
window的

32:12.620 --> 32:14.620
window的load的事件

32:14.620 --> 32:16.620
那么还有就是

32:16.620 --> 32:19.620
图片的load的事件

32:19.620 --> 32:22.620
指的是图片支援

32:22.620 --> 32:25.620
夹载完毕后的事件

32:25.620 --> 32:28.930
我们单独给这个图片注册

32:28.930 --> 32:30.930
这个onload的事件

32:30.930 --> 32:32.930
那么我们只关心这个图片

32:32.930 --> 32:33.930
其他图片我不管

32:33.930 --> 32:34.930
只关心这张图片

32:34.930 --> 32:36.930
因为你给这张图片注册的 onload的

32:36.930 --> 32:37.930
你夹载完整过后

32:37.930 --> 32:39.930
我来获取你的宽度

32:39.930 --> 32:41.930
和你的高度

32:41.930 --> 32:43.930
这才是我们

32:43.930 --> 32:44.930
常用的做法

32:44.930 --> 32:45.930
这个做法很常见

32:48.930 --> 32:49.930
我看一下

32:49.930 --> 32:50.930
保存

32:50.930 --> 32:52.930
为什么没执行了

32:53.930 --> 32:54.930
看一下

32:54.930 --> 32:55.930
明白了

32:55.930 --> 32:57.930
明白了我知道为什么没执行了

32:57.930 --> 32:58.930
没执行了原因是

32:58.930 --> 32:59.930
因为我这里也是个外部资源

32:59.930 --> 33:00.930
你看看

33:00.930 --> 33:01.930
这是个外部资源

33:01.930 --> 33:02.930
我这里也是个外部资源

33:02.930 --> 33:04.930
而我这个外部资源

33:04.930 --> 33:06.930
他遇到这么一个情况

33:06.930 --> 33:07.930
就是什么

33:07.930 --> 33:08.930
这个外部资源

33:08.930 --> 33:09.930
他夹载完了

33:09.930 --> 33:10.930
因为一起在夹载

33:10.930 --> 33:11.930
他也要一段时间

33:11.930 --> 33:12.930
对不对

33:12.930 --> 33:13.930
他也要一段时间

33:13.930 --> 33:14.930
他夹载完之前

33:14.930 --> 33:16.930
他已经夹载完了

33:16.930 --> 33:17.930
已经夹载完了

33:17.930 --> 33:19.930
他已经触发过这个onload的时间了

33:19.930 --> 33:20.930
看没

33:20.930 --> 33:21.930
他已经触发过这个onload的时间了

33:21.930 --> 33:23.930
所以说这里为了测试

33:23.930 --> 33:25.930
我暂时先把代码写到这儿

33:25.930 --> 33:26.930
我不把它写成外部资源

33:26.930 --> 33:28.930
因为这个介石也是个外部资源

33:28.930 --> 33:29.930
等介石夹载完了

33:29.930 --> 33:30.930
这个图片也夹载完了

33:30.930 --> 33:31.930
所以说他onload的时间

33:31.930 --> 33:32.930
早就过了

33:32.930 --> 33:33.930
我们这样子写

33:33.930 --> 33:34.930
写到这儿

33:34.930 --> 33:35.930
保存看一下

33:35.930 --> 33:37.930
没问题吧

33:37.930 --> 33:38.930
看没

33:38.930 --> 33:39.930
现在就能获取到

33:39.930 --> 33:40.930
它的宽高了

33:40.930 --> 33:42.930
所以说我们这个onload

33:42.930 --> 33:43.930
通常不是在Windows里边用

33:43.930 --> 33:45.930
而是在图片资源里边用

33:45.930 --> 33:47.930
包括videos这些资源

33:47.930 --> 33:48.930
对吧

33:48.930 --> 33:49.930
在这里边去使用

33:49.930 --> 33:51.930
一般不在Windows里边去使用

33:51.930 --> 33:53.930
明白这意思吧

33:53.930 --> 33:55.930
这是这一块

33:57.930 --> 33:59.930
这里我们还是夹载一下外部资源

33:59.930 --> 34:01.930
我们还要说一个问题

34:01.930 --> 34:03.930
这是关于

34:03.930 --> 34:05.930
这个onload的时间

34:05.930 --> 34:07.930
和图片的onload的时间

34:07.930 --> 34:08.930
下一个

34:08.930 --> 34:11.930
dom content loaded的时间

34:11.930 --> 34:13.930
这个世界我们平时看的不多

34:13.930 --> 34:14.930
看到的不多

34:14.930 --> 34:16.930
但是这个世界是非常有用的

34:16.930 --> 34:18.930
你们以后学到了接query

34:18.930 --> 34:19.930
它就是用了这个时间

34:19.930 --> 34:20.930
经过它是写法上

34:20.930 --> 34:22.930
可能不是这样写的

34:22.930 --> 34:23.930
但是它就是用了这个时间

34:23.930 --> 34:24.930
好

34:24.930 --> 34:25.930
咱们来看一下这个时间

34:25.930 --> 34:27.930
这个时间是什么时候发生的

34:27.930 --> 34:30.930
是dom元数

34:30.930 --> 34:31.930
dom数

34:31.930 --> 34:33.930
勾件完成

34:33.930 --> 34:36.930
勾件完成后发生

34:36.930 --> 34:37.930
什么时候

34:37.930 --> 34:39.930
这是什么时候

34:39.930 --> 34:40.930
你看着

34:40.930 --> 34:41.930
一面中不是有图片吗

34:41.930 --> 34:42.930
对吧

34:42.930 --> 34:43.930
它是一步渲染的

34:43.930 --> 34:44.930
我无所谓

34:44.930 --> 34:46.930
下边接着勾件

34:46.930 --> 34:47.930
下面的dom数

34:47.930 --> 34:48.930
是不是sqlips元数

34:48.930 --> 34:49.930
对吧

34:49.930 --> 34:50.930
sqlips元数

34:50.930 --> 34:51.930
勾件

34:51.930 --> 34:52.930
勾件这个

34:52.930 --> 34:53.930
sqlips元数

34:53.930 --> 34:54.930
一次勾件

34:54.930 --> 34:56.930
当然还有结束标击

34:56.930 --> 34:57.930
等等等等

34:57.930 --> 34:58.930
总之你去勾件dom数

34:58.930 --> 35:00.930
两个sqlips元数

35:00.930 --> 35:01.930
继续勾件

35:01.930 --> 35:02.930
勾件到这

35:02.930 --> 35:04.930
是不是dom结构全部完成了

35:04.930 --> 35:06.930
dom结构是不是全部完成了

35:06.930 --> 35:08.930
包括了这里肯定要同步

35:08.930 --> 35:09.930
对吧

35:09.930 --> 35:11.930
同步执行

35:11.930 --> 35:12.930
这是同步执行

35:12.930 --> 35:13.930
因为我们之前说过

35:13.930 --> 35:16.930
sqlips元数是同步执行的

35:16.930 --> 35:18.930
这里也是同步执行的

35:18.930 --> 35:19.930
对吧

35:19.930 --> 35:21.930
等这些sqlips元数

35:21.930 --> 35:23.930
全部夹展出来

35:23.930 --> 35:25.930
并且全部同步执行出来

35:25.930 --> 35:26.930
那么这个时候

35:26.930 --> 35:27.930
是不是图片

35:27.930 --> 35:28.930
比方说有100张图片

35:28.930 --> 35:29.930
是不是图片都还在夹展

35:29.930 --> 35:30.930
不等了

35:30.930 --> 35:31.930
不等了

35:31.930 --> 35:32.930
但是我们的dom结构

35:32.930 --> 35:33.930
已经是不是全部出来了

35:33.930 --> 35:35.930
我们的dom数已经全部出来了

35:35.930 --> 35:36.930
那么这个时候

35:36.930 --> 35:38.930
它会触发这个时间

35:38.930 --> 35:39.930
会触发这个时间

35:39.930 --> 35:40.930
这个时间是谁的时间呢

35:40.930 --> 35:41.930
不是window的

35:41.930 --> 35:42.930
不是window的

35:42.930 --> 35:43.930
是documenter的

35:43.930 --> 35:45.930
是documenter的时间

35:45.930 --> 35:50.010
documenter的这个时间

35:50.010 --> 35:51.010
好

35:51.010 --> 35:52.010
咱们来看一下这个时间

35:52.010 --> 35:53.010
好

35:53.010 --> 35:55.010
现在我们在这里注册一下这个时间

35:55.010 --> 35:57.010
注意它是documenter的时间

35:57.010 --> 35:58.010
documenter给它注册

35:58.010 --> 36:00.010
但是注意一下

36:00.010 --> 36:01.010
这个时间它比较特殊

36:01.010 --> 36:02.010
就是有些事件

36:02.010 --> 36:03.010
它是不能使用

36:03.010 --> 36:05.010
dom0的方式来注册的

36:05.010 --> 36:06.010
就是我们很多事件

36:06.010 --> 36:07.010
都可以使用dom0n

36:07.010 --> 36:08.010
什么什么对吧

36:08.010 --> 36:10.010
但是某些事件不行

36:10.010 --> 36:11.010
某些事件不行

36:11.010 --> 36:12.010
具体哪些事件

36:12.010 --> 36:13.010
我们遇到的时候再说

36:13.010 --> 36:14.010
我们之前讲的事件都可以

36:14.010 --> 36:15.010
但这个事件不行

36:15.010 --> 36:17.010
这个事件必须使用dom3

36:17.010 --> 36:19.010
dom2的方式

36:19.010 --> 36:21.010
因为这是一个比较新的时间

36:21.010 --> 36:22.010
以前是没有的

36:22.010 --> 36:23.010
dom

36:23.010 --> 36:25.010
它的名字叫做一长串

36:25.010 --> 36:27.010
我们把它复制一下

36:27.010 --> 36:29.010
复制 粘贴过来

36:29.010 --> 36:31.010
用这种方式给它注册

36:31.010 --> 36:32.010
好 输出

36:33.010 --> 36:34.010
dom数

36:35.010 --> 36:36.010
勾件完毕

36:36.010 --> 36:38.010
dom数勾件完毕

36:38.010 --> 36:39.010
就有的时候

36:39.010 --> 36:40.010
我们把这种事件

36:40.010 --> 36:42.010
也叫做ready事件

36:42.010 --> 36:43.010
ready事件

36:43.010 --> 36:45.010
就是整个文档已经准备好了

36:45.010 --> 36:46.010
ready是准备好的意思

36:46.010 --> 36:47.010
当然了

36:47.010 --> 36:48.010
为什么叫ready事件呢

36:48.010 --> 36:49.010
是因为接query

36:49.010 --> 36:51.010
你们后面会学一个东西

36:51.010 --> 36:52.010
叫做接query

36:52.010 --> 36:54.010
接query里面把它叫做query

36:54.010 --> 36:55.010
所以说我们叫习惯了

36:55.010 --> 36:57.010
其他的权称叫做dom

36:57.010 --> 36:59.010
content内容

36:59.010 --> 37:00.010
node的

37:00.010 --> 37:01.010
完成了加载

37:01.010 --> 37:02.010
但是它的资源还没有

37:02.010 --> 37:03.010
有些资源

37:03.010 --> 37:04.010
比方图片 视频

37:04.010 --> 37:06.010
这些东西可能还没有加载出来

37:06.010 --> 37:07.010
比方说背景图

37:07.010 --> 37:09.010
背景图也是一步加载的

37:09.010 --> 37:10.010
这些东西都还没有加载出来

37:10.010 --> 37:11.010
但是呢

37:11.010 --> 37:13.010
dom数已经准备好了

37:13.010 --> 37:14.010
保存

37:14.010 --> 37:16.830
你看

37:16.830 --> 37:18.830
这个图片

37:18.830 --> 37:19.830
你看

37:19.830 --> 37:20.830
可以明显看到

37:20.830 --> 37:22.830
这个东西是在图片之前运行的

37:22.830 --> 37:23.830
对吧

37:23.830 --> 37:24.830
看没

37:24.830 --> 37:26.830
这个太快了

37:26.830 --> 37:28.830
这个东西是在图片之前运行的

37:28.830 --> 37:29.830
因此

37:29.830 --> 37:30.830
在这个世界里面

37:30.830 --> 37:32.830
你能不能得到所有图片的宽高

37:32.830 --> 37:34.830
这就要看运气了

37:34.830 --> 37:35.830
这纯粹是看运气

37:35.830 --> 37:36.830
就是你这个GS

37:36.830 --> 37:39.830
如果图片加载完了过后

37:39.830 --> 37:40.830
执行代码的时候

37:40.830 --> 37:41.830
图片还没有加载完

37:41.830 --> 37:42.830
那你得不到的

37:42.830 --> 37:43.830
因为这个事件

37:43.830 --> 37:44.830
它只是

37:44.830 --> 37:46.830
dom数构建完毕

37:46.830 --> 37:47.830
只是dom数构建完毕

37:47.830 --> 37:48.830
它并不一定

37:48.830 --> 37:49.830
能保证

37:49.830 --> 37:51.830
所有的资源加载完成

37:51.830 --> 37:52.830
因此

37:52.830 --> 37:53.830
你要得到图片的宽高

37:53.830 --> 37:54.830
也还是要用我们之前的方式

37:54.830 --> 37:55.830
用引力级

37:55.830 --> 37:56.830
unload

37:56.830 --> 37:57.830
unload的方式

37:58.830 --> 38:00.830
这是这个事件

38:00.830 --> 38:01.830
再看下一个

38:01.830 --> 38:02.830
下一个事件

38:02.830 --> 38:04.830
那你得到图片的宽高

38:04.830 --> 38:05.830
那如果

38:05.830 --> 38:07.830
加载这个GS

38:07.830 --> 38:08.830
加载完了过后

38:08.830 --> 38:09.830
下一个事件叫做

38:09.830 --> 38:11.830
readyStateChange

38:11.830 --> 38:13.830
readyState是什么意思

38:13.830 --> 38:15.830
表示的是

38:15.830 --> 38:17.830
准备的阶段

38:17.830 --> 38:18.830
叫做State是什么状态

38:18.830 --> 38:19.830
ready是准备

38:19.830 --> 38:21.830
准备的状态

38:21.830 --> 38:22.830
什么意思呢

38:22.830 --> 38:23.830
就是我们的页面

38:23.830 --> 38:25.830
它有三个状态

38:25.830 --> 38:26.830
三个状态

38:26.830 --> 38:27.830
一个是loading

38:27.830 --> 38:28.830
正在加载中

38:28.830 --> 38:30.830
它表示正在加载中

38:30.830 --> 38:32.830
就是有的设立访问网站

38:32.830 --> 38:33.830
是不是一个小圈圈

38:33.830 --> 38:34.830
在那里转

38:34.830 --> 38:35.830
表示loading

38:35.830 --> 38:37.830
那么个意思

38:37.830 --> 38:39.830
表示页面正在加载中

38:39.830 --> 38:40.830
然后呢

38:40.830 --> 38:41.830
还有什么状态呢

38:41.830 --> 38:44.830
还有就是interactive

38:45.830 --> 38:46.830
reactive

38:46.830 --> 38:48.830
都单词咋写的

38:48.830 --> 38:49.830
查一下MDM吧

38:49.830 --> 38:51.830
我们查一下MDM

38:51.830 --> 38:53.830
readyState

38:53.830 --> 38:54.830
MDM

38:54.830 --> 38:56.830
又单词忘了

38:56.830 --> 38:57.830
不是这个

38:57.830 --> 38:58.830
不是这个

38:58.830 --> 38:59.830
好这个

39:00.830 --> 39:01.830
它有三个

39:01.830 --> 39:03.830
一个是interactive

39:03.830 --> 39:04.830
表示可交互的

39:04.830 --> 39:05.830
就是说

39:05.830 --> 39:07.830
多么数已经建立好了

39:07.830 --> 39:09.830
多么数已经建立好了

39:09.830 --> 39:10.830
在这个阶段

39:10.830 --> 39:11.830
就当我们

39:11.830 --> 39:13.830
多么数建立好了过后了

39:13.830 --> 39:14.830
它的状态会变成这个

39:14.830 --> 39:15.830
会变成这个

39:15.830 --> 39:16.830
然后呢

39:16.830 --> 39:17.830
它会把怎么样呢

39:17.830 --> 39:18.830
它会把这个

39:18.830 --> 39:19.830
它会触发这个事件

39:19.830 --> 39:21.830
dom content loaded

39:21.830 --> 39:22.830
它会触发这个事件

39:22.830 --> 39:24.830
然后最后一个是什么

39:24.830 --> 39:26.830
complete完成

39:26.830 --> 39:28.830
complete完成

39:28.830 --> 39:29.830
这个表示

39:29.830 --> 39:30.830
整个页面全部完成了

39:30.830 --> 39:31.830
就所有的资源

39:31.830 --> 39:32.830
全部加载完成了

39:32.830 --> 39:33.830
也就是说

39:33.830 --> 39:34.830
interactive

39:35.830 --> 39:36.830
它会触发什么

39:36.830 --> 39:37.830
会触发

39:37.830 --> 39:38.830
这个事件

39:39.830 --> 39:40.830
会触发这个事件

39:41.830 --> 39:42.830
当我们的页面状态

39:42.830 --> 39:43.830
变成这个的时候

39:43.830 --> 39:44.830
它会触发这个事件

39:44.830 --> 39:46.830
而complete

39:46.830 --> 39:47.830
它会触发什么事件呢

39:47.830 --> 39:49.830
它会触发load事件

39:49.830 --> 39:51.830
window的

39:51.830 --> 39:52.830
window的

39:52.830 --> 39:53.830
unload事件

39:53.830 --> 39:54.830
它会触发这个事件

39:56.830 --> 39:57.830
触发window的

39:57.830 --> 39:58.830
这样子写全嘛

39:58.830 --> 39:59.830
因为它不一定是用

39:59.830 --> 40:00.830
dom0的方式注册的

40:00.830 --> 40:03.830
触发window的load事件

40:03.830 --> 40:04.830
这就是

40:04.830 --> 40:05.830
我们网页的

40:05.830 --> 40:06.830
三种状态

40:06.830 --> 40:07.830
好

40:07.830 --> 40:09.830
这里容易出面是题

40:09.830 --> 40:11.830
它怎么来出面是题呢

40:11.830 --> 40:12.830
它问你

40:12.830 --> 40:13.830
问你啥呢

40:13.830 --> 40:15.830
它这里直接输出

40:15.830 --> 40:16.830
直接输出

40:18.830 --> 40:19.830
loader

40:20.830 --> 40:21.830
document

40:21.830 --> 40:22.830
readyState

40:22.830 --> 40:23.830
readyState

40:24.830 --> 40:25.830
直接输出readyState

40:25.830 --> 40:27.830
然后在这个事件里边

40:28.830 --> 40:29.830
再输出

40:30.830 --> 40:31.830
readyState

40:34.210 --> 40:35.210
readyState

40:35.210 --> 40:36.210
再输出这个

40:36.210 --> 40:38.210
然后在window

40:38.210 --> 40:39.210
window的

40:39.210 --> 40:41.210
unload事件里边

40:41.210 --> 40:42.210
再输出

40:42.210 --> 40:44.210
再输出readyState

40:44.210 --> 40:45.210
它问你

40:45.210 --> 40:47.210
输出的先后顺序是什么

40:48.210 --> 40:49.210
先后顺序是什么

40:49.210 --> 40:50.210
它输出什么样的结果

40:50.210 --> 40:52.210
咱们来看一下这个结果

40:53.210 --> 40:54.210
loading

40:54.210 --> 40:55.210
interactive

40:55.210 --> 40:56.210
complete

40:56.210 --> 40:58.210
它输出这么三个结果

40:58.210 --> 40:59.210
这个东西是谁输出的

40:59.210 --> 41:00.210
你看

41:00.210 --> 41:01.210
它这个12行

41:01.210 --> 41:02.210
它这里输出的

41:02.210 --> 41:03.210
在这里输出的

41:03.210 --> 41:05.210
为什么在这里它会输出这个东西呢

41:05.210 --> 41:06.210
有人同意会想

41:06.210 --> 41:07.210
我这个GS呢

41:07.210 --> 41:09.210
已经是最后一段代码了

41:09.210 --> 41:10.210
对吧

41:10.210 --> 41:11.210
那假设就没有这个

41:11.210 --> 41:12.210
假设没有下面这个

41:12.210 --> 41:15.210
我这个GS已经是最后一个元素了

41:15.210 --> 41:16.210
它应该输出

41:16.210 --> 41:17.210
应该输出的是

41:17.210 --> 41:18.210
它的状态应该是什么

41:18.210 --> 41:19.210
interactive

41:19.210 --> 41:21.210
就是动物节点准备好了

41:21.210 --> 41:23.210
它为什么会输出loading呢

41:23.210 --> 41:26.210
因为我代码执行完没有

41:26.210 --> 41:27.210
代码是不是还没执行完

41:27.210 --> 41:28.210
代码是同步执行的

41:28.210 --> 41:30.210
哪怕你只有这一句代码

41:31.210 --> 41:32.210
它还要继续往后看

41:32.210 --> 41:34.210
它还要继续往后看的

41:34.210 --> 41:35.210
我们来看一下吧

41:35.210 --> 41:36.210
哪怕你只有这一句代码

41:36.210 --> 41:38.210
它也是loading

41:38.210 --> 41:39.210
因为这个代码还没有完

41:39.210 --> 41:40.210
它要看到后边

41:40.210 --> 41:42.210
哪怕你输出最后一行都没用

41:42.210 --> 41:43.210
都没用

41:43.210 --> 41:44.210
它还是loading

41:44.210 --> 41:45.210
因为它还没有完

41:45.210 --> 41:46.210
比方说到这里

41:46.210 --> 41:47.210
还有结束标记对吧

41:47.210 --> 41:48.210
还有body的结束标记

41:48.210 --> 41:49.210
还有atement的结束标记

41:49.210 --> 41:50.210
它要把它看完

41:50.210 --> 41:51.210
看完之后

41:51.210 --> 41:52.210
看完之后

41:52.210 --> 41:54.210
才才是真的是完成

41:54.210 --> 41:55.210
所以说现在呢

41:55.210 --> 41:58.210
它仍然是夹仔状态

41:58.210 --> 41:59.210
而下面这两个

41:59.210 --> 42:00.210
就没什么好说的了

42:00.210 --> 42:02.210
当我们多蟆树准备好了时候

42:02.210 --> 42:04.210
那么它肯定是可交互的

42:04.210 --> 42:05.210
就是多蟆树已经好了

42:05.210 --> 42:06.210
有多蟆对象了

42:06.210 --> 42:08.210
那么你就可以跟拥护之间交互了

42:08.210 --> 42:10.210
可以使用介绍代码了

42:10.210 --> 42:11.210
然后这里呢

42:11.210 --> 42:13.210
是所有资源全部加载完成过后

42:13.210 --> 42:15.210
它自然是complete

42:15.210 --> 42:16.210
看没

42:16.210 --> 42:17.210
刷新

42:17.210 --> 42:18.210
没保存

42:18.210 --> 42:19.210
刷新

42:19.210 --> 42:20.210
就这么三种状态

42:20.210 --> 42:21.210
看没

42:22.210 --> 42:23.210
complete是最后运行

42:25.210 --> 42:28.210
这是document的ready state

42:29.210 --> 42:31.210
之后有一个对应的事件

42:31.210 --> 42:32.210
我讲一下

42:32.210 --> 42:34.210
这个事件的名字叫做ready state change

42:34.210 --> 42:36.210
这个事件很少用

42:36.210 --> 42:37.210
因为我们平常用的话

42:37.210 --> 42:39.210
要么就肯定不太会用window.load

42:39.210 --> 42:40.210
对吧

42:40.210 --> 42:41.210
用图片.load的

42:41.210 --> 42:44.210
或者是用什么dom content loaded

42:44.210 --> 42:45.210
用这个事件

42:45.210 --> 42:46.210
所以说这个事件

42:46.210 --> 42:47.210
这个事件我们平时不大

42:47.210 --> 42:48.210
不大会用

42:48.210 --> 42:49.210
它什么意思呢

42:49.210 --> 42:51.210
就是当一个document

42:51.210 --> 42:52.210
当我们的文档

42:52.210 --> 42:54.210
这个属性发生改变的时候

42:54.210 --> 42:55.210
它会触发这个事件

42:55.210 --> 42:56.210
咱们看一下

42:58.210 --> 43:00.210
当我们属性发生改变的时候

43:00.210 --> 43:01.210
它会触发这个事件

43:01.210 --> 43:05.210
document on ready state change

43:05.210 --> 43:07.210
这个可以用dom0

43:07.210 --> 43:09.210
因为它是一个很老的事件

43:09.210 --> 43:10.210
我们这里输出

43:10.210 --> 43:11.210
输出什么呢

43:11.210 --> 43:14.210
输出document on ready state

43:14.210 --> 43:15.210
输出这个

43:15.210 --> 43:17.210
就当状态发生改变的时候

43:17.210 --> 43:18.210
它会输出这个东西

43:18.210 --> 43:19.210
看一下

43:19.210 --> 43:20.210
loading它就没有了

43:20.210 --> 43:21.210
loading它一直都是loading

43:21.210 --> 43:22.210
对吧

43:22.210 --> 43:23.210
它没有改变

43:23.210 --> 43:24.210
它改变成interactive的时候

43:24.210 --> 43:26.210
那么它会输出这个

43:26.210 --> 43:27.210
改变成complete的时候

43:27.210 --> 43:28.210
它也会输出

43:28.210 --> 43:29.210
所以说

43:29.210 --> 43:31.210
我们这个事件有的时候

43:31.210 --> 43:32.210
也可以用用

43:32.210 --> 43:33.210
你可以判断一下

43:33.210 --> 43:34.210
它是什么状态

43:34.210 --> 43:35.210
不同的状态的

43:35.210 --> 43:36.210
文档不同的状态

43:36.210 --> 43:37.210
它会发生什么样的事情

43:37.210 --> 43:39.210
你要做什么事情

43:39.210 --> 43:40.210
好了

43:40.210 --> 43:41.210
这就是这一部分

43:41.210 --> 43:43.210
这一部分主要是为了面试题

43:43.210 --> 43:45.210
你要知道这个顺序

43:45.210 --> 43:47.210
并且通过这一部分的讲解

43:47.210 --> 43:48.210
你要清楚

43:48.210 --> 43:50.210
CSS为什么要写前边

43:50.210 --> 43:52.210
GS为什么要写后边

43:52.210 --> 43:54.210
以及图片它是异部的

43:54.210 --> 43:55.210
要得到图片的宽高

43:55.210 --> 43:56.210
特别是图片的宽高

43:56.210 --> 43:58.210
我们应该考虑到

43:58.210 --> 43:59.210
它的图片有

43:59.210 --> 44:01.210
可能还没有加载完成

44:01.210 --> 44:02.210
因此比方说

44:02.210 --> 44:03.210
我要得到一个图片的宽高

44:03.210 --> 44:05.210
我们应该这样子来写

44:05.210 --> 44:06.210
比方写个函数

44:06.210 --> 44:09.210
get image size

44:09.210 --> 44:11.210
得到图片的尺寸

44:11.210 --> 44:12.210
对吧

44:12.210 --> 44:13.210
给我一个img动物对象

44:13.210 --> 44:15.210
我来帮你得到这个图片的尺寸

44:15.210 --> 44:16.210
一个宽度一个高度

44:16.210 --> 44:17.210
这个时候

44:17.210 --> 44:18.210
我们要判断

44:18.210 --> 44:19.210
因为说不准

44:19.210 --> 44:20.210
说不准谁先加载完

44:20.210 --> 44:21.210
因为它是异部的

44:21.210 --> 44:22.210
判断一下

44:22.210 --> 44:23.210
如果图片的宽度

44:23.210 --> 44:25.210
图片的宽度等于0

44:25.210 --> 44:28.210
并且图片的高度

44:28.210 --> 44:31.210
高度了等于0

44:31.210 --> 44:32.210
怎么样

44:32.210 --> 44:33.210
我们怎么样

44:33.210 --> 44:34.210
是不是它有可能是异部的

44:34.210 --> 44:35.210
对不对

44:35.210 --> 44:36.210
如果宽度等于0

44:36.210 --> 44:37.210
高度等于0

44:37.210 --> 44:38.210
是不是没加载出来

44:38.210 --> 44:39.210
对不对

44:39.210 --> 44:40.210
这个图片的宽高

44:40.210 --> 44:41.210
是没有加载出来的

44:41.210 --> 44:42.210
没加载出来

44:42.210 --> 44:43.210
是不是要注册事件

44:43.210 --> 44:47.210
unload的注册一个事件

44:47.210 --> 44:48.210
事件干嘛呢

44:48.210 --> 44:50.210
当我加载出来之后

44:50.210 --> 44:52.210
当我加载出来之后

44:52.210 --> 44:54.210
我来告诉你宽高

44:54.210 --> 44:55.210
这个时候要出问题了

44:55.210 --> 44:56.210
比方说我们要写这个函数

44:56.210 --> 44:58.210
这也是你们今天的

44:58.210 --> 44:59.210
就是这一个练习

44:59.210 --> 45:00.210
不是作业

45:00.210 --> 45:01.210
因为我讲过了

45:01.210 --> 45:02.210
你们直接把它写一遍

45:02.210 --> 45:03.210
这个函数

45:03.210 --> 45:04.210
问题是

45:04.210 --> 45:05.210
现在我怎么返回呢

45:05.210 --> 45:07.210
有同学说我这里返回

45:07.210 --> 45:08.210
返回一个宽度

45:08.210 --> 45:09.210
宽度为啥

45:09.210 --> 45:13.210
宽度为就是图片的宽度

45:13.210 --> 45:15.210
图片的宽度

45:15.210 --> 45:17.210
高度为图片的高度

45:17.210 --> 45:18.210
我这里直接返回

45:18.210 --> 45:19.210
可以吗

45:19.210 --> 45:20.210
不行

45:20.210 --> 45:21.210
你这里返回的是

45:21.210 --> 45:22.210
返回了哪个函数

45:22.210 --> 45:23.210
是返回了这个事件函数

45:23.210 --> 45:25.210
它不是这个函数

45:25.210 --> 45:26.210
因为这个函数

45:26.210 --> 45:27.210
你不知道什么时候运行

45:27.210 --> 45:29.210
运行这个函数的时候

45:29.210 --> 45:30.210
有可能是这个函数

45:30.210 --> 45:31.210
早就结束了

45:31.210 --> 45:32.210
这个函数瞬间就结束了

45:32.210 --> 45:34.210
但是你图片还在加载

45:34.210 --> 45:35.210
10秒钟之后加载完

45:35.210 --> 45:37.210
那你是不是10秒钟之后

45:37.210 --> 45:38.210
才运行这个函数

45:38.210 --> 45:40.210
所以这个函数早就结束了

45:40.210 --> 45:42.210
这个函数早就结束了

45:42.210 --> 45:43.210
这个函数返回了啥呢

45:43.210 --> 45:44.210
你把折叠起来

45:44.210 --> 45:45.210
就看得很清楚了

45:45.210 --> 45:47.210
如果这样子的情况的话

45:47.210 --> 45:48.210
这个函数啥都没返回

45:48.210 --> 45:50.210
它啥都没返回

45:50.210 --> 45:51.210
你要这个意思吧

45:51.210 --> 45:53.210
所以这里该怎么来处理呢

45:53.210 --> 45:54.210
这种情况

45:54.210 --> 45:56.210
我们得使用毁掉函数

45:56.210 --> 45:57.210
callback

45:57.210 --> 45:58.210
毁掉函数

45:58.210 --> 45:59.210
你给我一个毁掉函数

45:59.210 --> 46:01.210
我会得到图片宽高之后

46:01.210 --> 46:02.210
我干嘛呢

46:02.210 --> 46:04.210
我会去叼用你这个毁掉函数

46:04.210 --> 46:06.210
把这个宽高传递给你

46:06.210 --> 46:08.210
你得这样做

46:08.210 --> 46:10.210
好好看一下

46:10.210 --> 46:11.210
没办法了

46:11.210 --> 46:12.210
真的没办法了

46:12.210 --> 46:13.210
你有想象吧

46:13.210 --> 46:14.210
想象一下这个图片

46:14.210 --> 46:16.210
10个小时加载完

46:16.210 --> 46:17.210
来吧

46:17.210 --> 46:18.210
你说10个小时加载完

46:18.210 --> 46:20.210
我们得到图片的尺寸

46:20.210 --> 46:22.210
如果你用函数的返回值的话

46:22.210 --> 46:24.210
我把图片给力

46:24.210 --> 46:25.210
比方说

46:25.210 --> 46:26.210
我这里

46:26.210 --> 46:28.210
immig

46:28.210 --> 46:31.520
document

46:31.520 --> 46:33.520
我把图片给力

46:33.520 --> 46:34.520
好

46:34.520 --> 46:36.520
然后我把图片给力

46:36.520 --> 46:37.520
你给我一个尺寸

46:37.520 --> 46:38.520
但是

46:38.520 --> 46:40.520
这个图片10个小时后加载完

46:40.520 --> 46:42.520
那这个函数是不是瞬间就执行完了

46:42.520 --> 46:43.520
瞬间就执行完了

46:43.520 --> 46:44.520
那你能得到尺寸吗

46:44.520 --> 46:45.520
是不是还是得不到

46:45.520 --> 46:46.520
因此怎么样呢

46:46.520 --> 46:47.520
我怎么办

46:47.520 --> 46:48.520
我肯定不能用这种方式

46:48.520 --> 46:50.520
我得给你传一个函数

46:50.520 --> 46:52.520
回掉函数

46:52.520 --> 46:54.520
就像世界那样子是一样的

46:54.520 --> 46:56.520
世界什么时候比较有点击

46:56.520 --> 46:57.520
什么时候点击

46:57.520 --> 46:58.520
我也不知道什么时候点击

46:58.520 --> 46:59.520
但是你点击之后

46:59.520 --> 47:00.520
我会帮你运行一个函数

47:00.520 --> 47:01.520
这里也是一样

47:01.520 --> 47:03.520
得到图片的尺寸

47:03.520 --> 47:04.520
图片的尺寸是多少

47:04.520 --> 47:05.520
我也不知道是多少

47:05.520 --> 47:07.520
它将来可能会得到图片的尺寸

47:07.520 --> 47:08.520
OK 你给我一个函数

47:08.520 --> 47:09.520
给我一个函数

47:09.520 --> 47:10.520
我到时候得到了之后

47:10.520 --> 47:12.520
我会运行你这个函数

47:12.520 --> 47:14.520
我们这里函数里边输出

47:14.520 --> 47:15.520
输出一个size

47:15.520 --> 47:17.520
那么这里可以拿到这个图片尺寸了

47:17.520 --> 47:18.520
得这么来做

47:18.520 --> 47:20.520
得到图片尺寸的这么来做

47:20.520 --> 47:22.520
因为它是异部加载

47:22.520 --> 47:24.520
它不是同步的

47:24.520 --> 47:25.520
同步很简单

47:25.520 --> 47:26.520
所以说

47:26.520 --> 47:27.520
为什么介石语言

47:27.520 --> 47:28.520
要比别的语言简单多了

47:28.520 --> 47:29.520
因为介石语言

47:29.520 --> 47:30.520
默认情况下

47:30.520 --> 47:32.520
是全部代码是同步的

47:32.520 --> 47:33.520
商与绝没执行完

47:33.520 --> 47:34.520
下一句不会等待的

47:34.520 --> 47:37.520
这样代码是按顺序执行的是很简单的

47:37.520 --> 47:38.520
而异部稍微有点复杂

47:38.520 --> 47:40.520
因为异部只要等

47:40.520 --> 47:42.520
它等到某一个时候的时候

47:42.520 --> 47:43.520
发生的时候

47:43.520 --> 47:44.520
某一件事情发生的时候

47:44.520 --> 47:45.520
才会持续执行

47:45.520 --> 47:46.520
那这里也是一样

47:46.520 --> 47:48.520
等图片加载完了之后

47:48.520 --> 47:50.520
我才会去做一件事

47:50.520 --> 47:51.520
做什么事呢

47:51.520 --> 47:52.520
我会运行你这个回调函数

47:52.520 --> 47:53.520
把宽高传给你

47:53.520 --> 47:55.520
反之

47:55.520 --> 47:56.520
反之 else

47:56.520 --> 47:58.520
就是个图片已经加载好了

47:58.520 --> 47:59.520
我们运行很好

47:59.520 --> 48:00.520
执行这个代码的时候

48:00.520 --> 48:02.520
图片就已经都已经加载完成了

48:02.520 --> 48:03.520
ok

48:03.520 --> 48:04.520
那我直接运行你这个回调函数

48:04.520 --> 48:06.520
把宽高给你就完事了

48:06.520 --> 48:08.520
明白的意思吧

48:08.520 --> 48:09.520
我们得到图片宽高

48:09.520 --> 48:10.520
得这么去写代码

48:10.520 --> 48:11.520
这才是一个完整的

48:11.520 --> 48:13.520
得到图片宽高的代码

48:13.520 --> 48:15.520
这样子就能适应各种情况了

48:15.520 --> 48:16.520
你看图片宽高

48:16.520 --> 48:17.520
随便怎么样

48:17.520 --> 48:18.520
他都能得到图片宽高

48:18.520 --> 48:19.520
看没

48:19.520 --> 48:21.520
随便怎么样都能得到

48:21.520 --> 48:22.520
刚才的这里

48:22.520 --> 48:23.520
这里吧

48:25.520 --> 48:26.520
怎么会运行两次

48:26.520 --> 48:27.520
我看一下

48:27.520 --> 48:29.520
怎么会运行两次

48:31.520 --> 48:32.520
然后我看一下

48:32.520 --> 48:34.520
为什么会运行两次

48:34.520 --> 48:36.520
我把宽注释掉

48:36.520 --> 48:38.520
为什么会运行两次呢

48:40.520 --> 48:41.520
这个很诚奇

48:41.520 --> 48:42.520
我看一下

48:42.520 --> 48:43.520
他为什么会运行两次

48:43.520 --> 48:44.520
我把这个注释掉

48:44.520 --> 48:46.520
看是不是还有一个地方在运行

48:46.520 --> 48:47.520
没有

48:47.520 --> 48:48.520
只有这个地方

48:48.520 --> 48:49.520
我想一想

48:49.520 --> 48:51.520
他为什么会运行两次

48:51.520 --> 48:53.520
得到一张图片传进去

48:53.520 --> 48:55.520
得到图片的尺寸

48:55.520 --> 48:57.520
然后这个代码

48:57.520 --> 48:58.520
为什么会运行两次

48:58.520 --> 49:00.520
他要么清这个判断

49:00.520 --> 49:01.520
要么清这个判断

49:01.520 --> 49:02.520
OK

49:02.520 --> 49:03.520
我打断点了

49:03.520 --> 49:04.520
打断点了

49:04.520 --> 49:05.520
我不太清楚

49:05.520 --> 49:09.280
为什么会运行两次

49:09.280 --> 49:10.280
好 这里

49:10.280 --> 49:13.740
我们打个断点

49:13.740 --> 49:14.740
好 这里

49:14.740 --> 49:15.740
刷新

49:15.740 --> 49:16.740
运行

49:16.740 --> 49:17.740
宽度

49:17.740 --> 49:18.740
有宽度

49:18.740 --> 49:19.740
我这里写错了

49:19.740 --> 49:20.740
我这里写错了

49:22.740 --> 49:23.740
对了

49:23.740 --> 49:24.740
没问题

49:24.740 --> 49:25.740
两个都有值

49:25.740 --> 49:26.740
都有值

49:26.740 --> 49:27.740
F10

49:27.740 --> 49:28.740
运行callback

49:29.740 --> 49:32.120
运行

49:34.120 --> 49:35.120
运行了一次

49:35.120 --> 49:36.120
这里运行了一次

49:36.120 --> 49:37.120
再来

49:37.120 --> 49:38.120
运行

49:38.120 --> 49:42.780
运行了一次

49:43.780 --> 49:45.780
为什么会运行两次

49:45.780 --> 49:46.780
再来

49:47.780 --> 49:48.780
这里结束

49:49.780 --> 49:51.780
第二次他又运行了

49:51.780 --> 49:52.780
我看一下

49:52.780 --> 49:54.780
我明白了

49:54.780 --> 49:56.780
我这里用的是unready states change

49:56.780 --> 49:58.780
我用的是这个

49:58.780 --> 49:59.780
用的是这个

49:59.780 --> 50:00.780
我应该写到哪呢

50:00.780 --> 50:01.780
应该写到这

50:01.780 --> 50:03.780
应该写到这

50:03.780 --> 50:09.220
应该写到这

50:09.220 --> 50:11.220
dome content is loaded

50:11.220 --> 50:12.220
应该写到这

50:12.220 --> 50:13.220
是这里的问题

50:14.220 --> 50:15.220
总之呢

50:15.220 --> 50:16.220
我们这一部分支持

50:16.220 --> 50:17.220
这一部分支持

50:17.220 --> 50:18.220
学习到之后

50:18.220 --> 50:19.220
对我们开发上的影响

50:19.220 --> 50:20.220
除了做面试体之外

50:20.220 --> 50:22.220
对我们开发上的影响的话

50:22.220 --> 50:23.220
也就是图片这一块

50:23.220 --> 50:24.220
以及呢

50:24.220 --> 50:26.220
我们的写的书写顺序这一块

50:26.220 --> 50:28.220
那么还有一点就是

50:28.220 --> 50:29.220
如果我们希望我们这个

50:29.220 --> 50:30.220
GS

50:30.220 --> 50:31.220
Y部文件

50:31.220 --> 50:32.220
特别是你写到

50:32.220 --> 50:33.220
Y部文件的时候

50:33.220 --> 50:34.220
我们希望这个GS

50:34.220 --> 50:35.220
无论你放到哪

50:35.220 --> 50:36.220
都会正常的执行

50:36.220 --> 50:38.220
那么你最好放到这个世界里边

50:38.220 --> 50:39.220
你把你的所有的

50:39.220 --> 50:40.220
GS代码都放到这个世界里边

50:40.220 --> 50:41.220
这样子

50:41.220 --> 50:43.220
这样子写的好处在于

50:43.220 --> 50:45.220
你这个GS代码无论你放到哪

50:45.220 --> 50:46.220
无论你放到哪

50:46.220 --> 50:47.220
是不是都会正常执行

50:47.220 --> 50:48.220
都可以正常执行

50:48.220 --> 50:50.220
那万一他放到上面了

50:50.220 --> 50:51.220
对不对

50:51.220 --> 50:53.220
那么我这里始终是注册了事件的

50:53.220 --> 50:54.220
我这个事件发生之后

50:54.220 --> 50:56.220
我才会执行这里的代码

50:56.220 --> 50:57.220
所以说这个事件发生之后

50:57.220 --> 50:59.220
这些元素一定是有的

50:59.220 --> 51:00.220
有这些元素的

51:00.220 --> 51:01.220
所以说我们可以

51:01.220 --> 51:02.220
用这种方式来写

51:02.220 --> 51:04.220
就是你无论放到哪都可以正常执行

51:06.220 --> 51:09.110
这是这一块

51:09.110 --> 51:10.110
这一块

51:13.550 --> 51:15.550
讲了半天才讲了这个点

51:15.550 --> 51:16.550
对吧

51:16.550 --> 51:17.550
主要是这个点

51:17.550 --> 51:19.550
主要是这个点就是东西比较多

51:20.550 --> 51:21.550
好 那行吧

51:21.550 --> 51:22.550
那我这里就

51:22.550 --> 51:23.550
这里可以先到这吧

51:23.550 --> 51:25.550
后边我们再拿一个来讲

51:25.550 --> 51:26.550
因为其他事件里边

51:26.550 --> 51:28.550
还是有很多细致目的东西

51:28.550 --> 51:29.550
先到这吧

