WEBVTT

00:00.000 --> 00:12.380
引用类型

00:12.380 --> 00:20.180
实际上这节课呢 我以前啊 在最开始的收课的时候呢 我是把这节课呢 是往后方的

00:20.180 --> 00:22.180
放到很后边去了

00:22.180 --> 00:26.680
然后呢 就发现一个问题啊 就前边很多东西啊 很多坑

00:26.680 --> 00:28.680
我就必须要人为的去避开

00:28.680 --> 00:36.180
但是呢 学生做作业的时候呢 或者是做一些练习的 做一些效果的时候呢 又避不开这个坑

00:36.180 --> 00:42.180
后来我想来想去啊 还是把这个这节课呢 提前来讲 提到与法基础部分来讲

00:42.180 --> 00:49.180
这节课首先是有一点难度的啊 但难度呢 不算很高 每个人同学都能听得懂

00:49.180 --> 00:54.180
而且呢 这节课我们越找学型呢 对后边帮助越大

00:54.180 --> 00:57.180
我们干脆啊 就一开始就把学了

00:57.180 --> 01:01.180
学了之后 我们后边呢 就不用去专门去避开这些坑了

01:01.180 --> 01:05.180
好 我首先给大家看一个 看一个例子啊

01:06.180 --> 01:12.180
这个例子里边呢 有一个奇怪的现象 什么奇怪的现象呢

01:12.180 --> 01:17.180
这里呢 有个变量 a 啊 给它复制一个字符创吧 123

01:17.180 --> 01:22.180
然后呢 一个变量b 也给它复制为一个字符创啊 12

01:22.180 --> 01:25.180
给它复制为a 把a的纸拿出来复制给b

01:25.180 --> 01:29.180
好 接下来呢 我们把b改变 改变成456

01:29.180 --> 01:33.180
接下来 输出a和b 输出a和b

01:34.180 --> 01:36.180
好 看一下结果啊 大家能不能知道结果

01:37.180 --> 01:40.180
这个例子呢 我好像在讲变量的时候就已经说过了 对吧

01:40.180 --> 01:45.180
我说了 变量的数据传递啊 就是把这个变量的值拿出来

01:45.180 --> 01:49.180
传递给另外一个变量 实际上是一个复制粘贴的过程

01:49.180 --> 01:52.180
就相当于把它的内存空间里边的东西拿出来

01:52.180 --> 01:56.180
然后放到它里边 一个复制粘贴的过程

01:56.180 --> 02:00.180
所以说b和a呢 是独立的 它们的内存空间是相对独立的

02:00.180 --> 02:02.180
你改变了b 并不会导致a改变

02:02.180 --> 02:06.180
因此这里会输出啥呢 都不用看结果了 输出123456

02:07.180 --> 02:11.180
好 看一下吧 保存 看一下啊

02:15.140 --> 02:17.140
好 再刷新识啊

02:17.140 --> 02:20.140
好 看一下这个结果 123456 对吧 没问题吧

02:21.140 --> 02:24.140
好 接下来呢 我们再来个例子 再来个例子

02:25.140 --> 02:29.140
接下来我来定义一个对象 obj1

02:30.140 --> 02:32.140
它里边呢 有一个name属性

02:32.140 --> 02:37.140
name属性就叫做123吧 就叫做123

02:38.140 --> 02:41.140
然后呢 再来定一个对象 obj2

02:42.140 --> 02:45.140
把obj1接1的值呢 复制给obj2

02:45.140 --> 02:48.140
同样的 我们之前说过 变量的复制

02:48.140 --> 02:50.140
它们都是变量 对吧 变量的复制

02:50.140 --> 02:53.140
就是一个复制粘贴的过程

02:54.140 --> 02:58.140
好 OK 我们现在把obj2.name

02:58.140 --> 03:02.140
改变它的属性 我不是给obj2直接复制

03:02.140 --> 03:06.140
而是改变它的name属性 把它改为456

03:07.140 --> 03:10.140
接下来 我们来输出obj1.name

03:10.140 --> 03:14.140
然后obj2.name 看一下啊 看一下结果是什么

03:15.140 --> 03:19.020
保存 两个都是456

03:19.020 --> 03:22.020
这就是我们这几课要解释的现象

03:22.020 --> 03:23.020
它到底是怎么回事

03:24.020 --> 03:27.020
以前呢 我就是人为了去避开这种复制

03:27.020 --> 03:29.020
以前我讲的时候 我就先说

03:29.020 --> 03:32.020
以后对象之间不要有这种复制 不要有这种复制

03:32.020 --> 03:35.020
但是有的时候发现没办法 必须得复制

03:35.020 --> 03:37.020
那么导致了一些同学们遇到一些问题

03:37.020 --> 03:39.020
所以说 我这里提前把它讲了

03:39.020 --> 03:41.020
之后我们就会避开这个坑了

03:42.020 --> 03:45.020
好 怎么回事呢 就是我们这几课要讲的引用内形

03:45.020 --> 03:48.020
我们之前说过 咱们的数据内形里面分为两种

03:48.020 --> 03:52.020
一种是原始内形 对吧 原始内形

03:52.020 --> 03:56.020
一种是引用内形 引用内形里面包含啥呢

03:56.020 --> 03:59.020
就包含了对象和之后要学习的函数

03:59.020 --> 04:01.020
咱们还没有学习函数 不过没关系

04:01.020 --> 04:04.020
我们就以对象为例 对象是引用内形

04:04.020 --> 04:07.020
我们就以对象为例 然后来解释这个现象

04:07.020 --> 04:11.020
之后咱们学了函数之后 现象是一样的

04:11.020 --> 04:12.020
是一样的情况

04:13.020 --> 04:15.020
好 接下来我们来一个说

04:15.020 --> 04:17.020
一个说到底是怎么回事

04:17.020 --> 04:19.020
这里要画很多种的图

04:19.020 --> 04:23.020
所以说我这里桌面上建立一个PPT

04:23.020 --> 04:24.020
建立一个PPT

04:25.020 --> 04:27.020
OK 把它打开

04:27.020 --> 04:29.020
我们一会儿要画很多图

04:30.020 --> 04:32.020
首先我们来解释第一个现象

04:32.020 --> 04:34.020
这是怎么回事

04:34.020 --> 04:35.020
这是怎么回事

04:35.020 --> 04:38.020
我们在PPT里面看一下

04:39.020 --> 04:41.020
这个PPT我到时候就不会发到发下来了

04:41.020 --> 04:44.020
因为这个PPT我都是根据代码来讲解的

04:44.020 --> 04:45.020
PPT里面也没有代码

04:45.020 --> 04:47.020
所以说你光看这个PPT也不知道什么意思

04:47.020 --> 04:50.020
我就以后这一块如果不清楚的话

04:50.020 --> 04:52.020
就反复了看视频就完事了

04:52.020 --> 04:54.020
这一块其实我讲的话

04:54.020 --> 04:56.020
已经是讲得非常非常清楚了

04:56.020 --> 04:57.020
相信每个同学都听得懂

04:57.020 --> 04:59.020
好 这个部分我们先看这一个部分

04:59.020 --> 05:00.020
它到底是怎么回事呢

05:00.020 --> 05:04.020
首先我们这里用一个方块

05:04.020 --> 05:07.020
用一个方块来表示内存空间

05:07.020 --> 05:09.020
来表示这一块内存空间

05:09.020 --> 05:11.020
比方说现在的变量是多少

05:11.020 --> 05:13.020
变量是A 对吧

05:13.020 --> 05:15.020
有一个变量A OK

05:15.020 --> 05:17.020
那么我们有一块内存空间

05:17.020 --> 05:18.020
有一块内存空间

05:18.020 --> 05:19.020
那么这里内存空间的名字

05:19.020 --> 05:21.020
叫做A 给它取个名字

05:21.020 --> 05:23.020
叫做A 你看清楚吧

05:23.020 --> 05:25.020
好 有这么个变量A

05:25.020 --> 05:27.020
这个A里边存了一个啥呢

05:27.020 --> 05:29.020
存了一个123 对吧

05:29.020 --> 05:31.020
一个字母串123 OK

05:31.020 --> 05:34.020
我们在内存空间里边给它放上123

05:34.020 --> 05:37.020
放大一点 放上一个123

05:37.020 --> 05:38.020
这就是变量A的情况

05:38.020 --> 05:40.020
里边存了一个字母串

05:40.020 --> 05:42.020
字母串 我用个双翼号表示字母串

05:42.020 --> 05:45.850
123 好 这个地方

05:45.850 --> 05:48.850
要调一下才能打出英文的双翼号

05:48.850 --> 05:50.850
没关系 你们能看得懂就行了

05:50.850 --> 05:51.850
好 这是个变量

05:51.850 --> 05:52.850
A里边存了一个123

05:52.850 --> 05:54.850
然后接下来有个变量B

05:54.850 --> 05:56.850
这要把它看成两部分

05:56.850 --> 05:57.850
要把它看成两部分

05:57.850 --> 05:59.850
声明了一个变量B

06:00.850 --> 06:02.850
有一个变量B

06:02.850 --> 06:04.850
里边是没有东西的 对吧

06:04.850 --> 06:05.850
没有东西的 OK

06:05.850 --> 06:07.850
那么变量的负质是什么意思呢

06:07.850 --> 06:09.850
始终记住

06:09.850 --> 06:11.850
任何变量 包括这里

06:11.850 --> 06:12.850
包括这后边

06:12.850 --> 06:14.850
任何变量的负质都是

06:14.850 --> 06:17.850
把变量里边存的东西拿出来

06:17.850 --> 06:19.850
是粘贴到另一个变量里边

06:19.850 --> 06:20.850
就是变量的负质

06:20.850 --> 06:21.850
好 那怎么理解呢

06:21.850 --> 06:23.850
就相当于是把A里边的内容

06:23.850 --> 06:25.850
负质粘贴到B里边

06:25.850 --> 06:27.850
粘贴到B里边

06:27.850 --> 06:28.850
粘进来

06:28.850 --> 06:30.850
然后怎么样呢

06:30.850 --> 06:33.850
然后接下来把B改为456

06:33.850 --> 06:35.850
找到内存空间B

06:35.850 --> 06:36.850
把它改为456

06:36.850 --> 06:37.850
你看A是不是没变化

06:37.850 --> 06:39.850
A没变化

06:39.850 --> 06:41.850
所以说最终输出的结果

06:41.850 --> 06:44.850
就是AB 输出的结果是123456

06:44.850 --> 06:45.850
这个没问题吧

06:45.850 --> 06:47.850
这一块没问题 对吧

06:47.850 --> 06:49.850
OK 那么我们记一笔

06:49.850 --> 06:50.850
记一笔

06:50.850 --> 06:55.850
就是原始内形的变量

06:55.850 --> 06:59.850
存放的是具体的值

06:59.850 --> 07:03.850
就是把原始的值直接存放到变量里边

07:03.850 --> 07:05.850
把它加出 这重点

07:05.850 --> 07:07.850
好 咱们再来看对象

07:07.850 --> 07:08.850
咱们来看对象

07:08.850 --> 07:10.850
对象不太一样

07:10.850 --> 07:11.850
好 接下来看对象

07:11.850 --> 07:13.850
有一个变量AB借1

07:13.850 --> 07:15.850
好 接下来我们来看一下

07:15.850 --> 07:17.850
对象

07:17.850 --> 07:21.850
有个变量的名字叫做AB借1

07:21.850 --> 07:23.850
好 这个变量里边的生命能过后

07:23.850 --> 07:24.850
它里面是空的 对吧

07:24.850 --> 07:26.850
我要把它分成两个部分看

07:26.850 --> 07:28.850
先生命 再复职

07:28.850 --> 07:30.850
好 先生命这个变量

07:30.850 --> 07:32.850
里面是空的 没东西

07:32.850 --> 07:33.850
没东西

07:33.850 --> 07:34.850
接下来复职

07:34.850 --> 07:36.850
复职的时候

07:36.850 --> 07:38.850
产生了一个对象

07:38.850 --> 07:40.850
注意 现在有差异了

07:40.850 --> 07:42.850
这个对象是放到哪儿的呢

07:42.850 --> 07:45.850
不是直接放到这个AB借1

07:45.850 --> 07:46.850
这个变量里边的

07:46.850 --> 07:48.850
对象出现了过后

07:48.850 --> 07:52.850
它会新开辟一块内存空间

07:52.850 --> 07:59.850
出现对象字面量的位置

07:59.850 --> 08:06.850
会新开辟一块内存空间

08:06.850 --> 08:11.850
用于存放对象的内容

08:12.850 --> 08:16.850
于是待马运行到这一部分的时候

08:16.850 --> 08:19.850
因为复职是从右向左运行的

08:19.850 --> 08:22.850
先运行后边的再运行复职

08:22.850 --> 08:23.850
好像这边也是

08:23.850 --> 08:25.850
只不过这边太简单了

08:25.850 --> 08:27.850
直接就是一个字面量的字符创

08:27.850 --> 08:28.850
直接就有了

08:28.850 --> 08:30.850
直接放到AB两里边就行了

08:30.850 --> 08:31.850
但是对象不一样

08:31.850 --> 08:34.850
对象是引用内容的复职

08:34.850 --> 08:36.850
它是这样子

08:36.850 --> 08:38.850
首先在内存中

08:38.850 --> 08:41.850
可以开辟一块内存空间

08:41.850 --> 08:42.850
接下来

08:42.850 --> 08:46.850
一个新的内存空间开辟出来了

08:46.850 --> 08:48.850
这个内存空间里边存的是啥呢

08:48.850 --> 08:51.850
存的有个属性name等于123

08:51.850 --> 08:54.850
在内存空间里边有个属性name

08:54.850 --> 08:58.160
把它写小一点

08:58.160 --> 08:59.160
能看齐吗

08:59.160 --> 09:00.160
应该能看齐

09:00.160 --> 09:02.160
name为123

09:02.160 --> 09:03.160
这样子写吧

09:03.160 --> 09:04.160
还是放大一点

09:04.160 --> 09:05.160
稍微的大一点

09:05.160 --> 09:07.160
name为123

09:07.160 --> 09:10.730
当然是字符创

09:10.730 --> 09:11.730
这种就行了

09:11.730 --> 09:14.730
字符创不是很好打一个英文字符号

09:14.730 --> 09:16.730
这是name属性123

09:16.730 --> 09:17.730
如果有其他属性的

09:17.730 --> 09:18.730
一样的

09:18.730 --> 09:19.730
如果有其他属性

09:19.730 --> 09:21.730
比方说AB属性

09:21.730 --> 09:24.730
比方说10岁

09:24.730 --> 09:25.730
有这个属性的话

09:25.730 --> 09:26.730
一样的

09:26.730 --> 09:27.730
这里多了一个属性

09:27.730 --> 09:28.730
第二个属性

09:28.730 --> 09:31.730
AB为10

09:31.730 --> 09:32.730
能看懂吗

09:32.730 --> 09:34.730
没问题吧

09:34.730 --> 09:35.730
好

09:35.730 --> 09:36.730
那么这个是对象

09:36.730 --> 09:38.730
这是对象的内存空间

09:38.730 --> 09:39.730
这个东西怎么出来的

09:39.730 --> 09:41.730
这个东西是由于这段代码

09:41.730 --> 09:44.730
由于这段代码的出现

09:44.730 --> 09:46.730
产生了一块内存空间

09:46.730 --> 09:47.730
看没

09:47.730 --> 09:49.730
产生的这块内存空间

09:49.730 --> 09:50.730
好

09:50.730 --> 09:51.730
接下来负值

09:51.730 --> 09:53.730
负值是什么意思呢

09:53.730 --> 09:54.730
负值指的是

09:54.730 --> 09:57.730
把这一块内存空间的编号

09:57.730 --> 10:00.730
把这一块内存空间的地址

10:00.730 --> 10:02.730
负值给AB介一

10:02.730 --> 10:03.730
什么意思

10:03.730 --> 10:05.730
每一块内存空间

10:05.730 --> 10:06.730
咱们一个内存条

10:06.730 --> 10:07.730
对吧

10:07.730 --> 10:08.730
你可以想象一下

10:08.730 --> 10:10.730
内存条把它放大放大放大放大

10:10.730 --> 10:11.730
放大很大

10:11.730 --> 10:12.730
放大过后

10:12.730 --> 10:14.730
我们就可以看到里边的内存了

10:14.730 --> 10:15.730
当然这是想象

10:15.730 --> 10:17.730
想象你可以这么去想象

10:17.730 --> 10:19.730
然后内存有很多东西

10:19.730 --> 10:20.730
一个长条

10:20.730 --> 10:21.730
有很多内存

10:21.730 --> 10:22.730
那么内存

10:22.730 --> 10:24.730
每一块内存有个编号

10:24.730 --> 10:26.730
就像学生有学号一样

10:26.730 --> 10:27.730
人有身份证号一样

10:27.730 --> 10:28.730
有一个编号

10:28.730 --> 10:31.730
这个编号叫做内存地址

10:32.730 --> 10:34.730
有的时候说准确点

10:34.730 --> 10:35.730
叫做内存手地址

10:35.730 --> 10:37.730
由于我们学的是前端语言

10:37.730 --> 10:39.730
学的不是后端语言

10:39.730 --> 10:40.730
学的不是什么编语原理

10:40.730 --> 10:42.730
所以说这一块

10:42.730 --> 10:43.730
这一块

10:43.730 --> 10:45.730
我们就简单了解

10:45.730 --> 10:46.730
关于一个内存地址

10:46.730 --> 10:47.730
这一块就简单了解

10:47.730 --> 10:49.730
它就相当于是一块内存的编号

10:49.730 --> 10:50.730
一块内存的编号

10:50.730 --> 10:52.730
我们这样理解就行了

10:52.730 --> 10:54.730
接下来负值

10:54.730 --> 10:55.730
负值的是什么

10:55.730 --> 10:56.730
负值的不是

10:56.730 --> 10:58.730
这块内存空间里边的东西

10:58.730 --> 11:00.730
是这一个内存地址

11:00.730 --> 11:02.730
把这个内存地址

11:02.730 --> 11:03.730
负值给AB介一

11:03.730 --> 11:05.730
相当于把内存编号

11:05.730 --> 11:06.730
负值给它

11:06.730 --> 11:08.730
那么它里面存的是啥呢

11:08.730 --> 11:10.730
存的是地址

11:10.730 --> 11:12.730
一个内存地址

11:12.730 --> 11:14.730
这个地址是什么地址呢

11:14.730 --> 11:16.730
就是这一块内存的地址

11:16.730 --> 11:18.730
看没 就是这一块内存的地址

11:18.730 --> 11:20.730
我们可以认为

11:20.730 --> 11:23.730
这个地址只向另一块内存空间

11:23.730 --> 11:26.730
它只向另一块内存空间

11:26.730 --> 11:30.740
我们就用个箭头

11:30.740 --> 11:31.740
用个箭头

11:31.740 --> 11:33.740
它只向这一块内存空间

11:33.740 --> 11:34.740
因为通过这个地址

11:34.740 --> 11:36.740
我们就能找到这一块内存

11:36.740 --> 11:37.740
通过这个编号

11:37.740 --> 11:38.740
就能找到这一块内存

11:38.740 --> 11:39.740
所以说我们认为

11:39.740 --> 11:41.740
这个地址只向这一块内存空间

11:41.740 --> 11:42.740
明白这个意思吗

11:42.740 --> 11:44.740
你看现在是这种结构

11:44.740 --> 11:45.740
这种结构

11:45.740 --> 11:48.380
所以我们记一笔

11:48.380 --> 11:50.380
引用内形

11:50.380 --> 11:51.380
包括辨量

11:51.380 --> 11:52.380
包括后表写的函数

11:52.380 --> 11:54.380
引用内形的辨量

11:54.380 --> 11:55.380
存放的是啥呢

11:55.380 --> 11:58.380
存放的是内存地址

11:58.380 --> 12:01.380
存放的是内存地址

12:01.380 --> 12:03.380
好 那么这里

12:03.380 --> 12:04.380
如果完成这个负值过后

12:04.380 --> 12:05.380
我们有一种说法

12:05.380 --> 12:07.380
有一种说法叫做什么呢

12:07.380 --> 12:09.380
说法叫做

12:09.380 --> 12:11.380
obj1

12:11.380 --> 12:14.380
obj1指向

12:14.380 --> 12:16.380
指向对象

12:16.380 --> 12:17.380
什么什么对象

12:17.380 --> 12:18.380
什么什么对象

12:18.380 --> 12:21.380
obj1指向某个对象

12:21.380 --> 12:23.380
也可以说成

12:23.380 --> 12:26.380
obj1持有

12:26.380 --> 12:30.380
持有某某对象的引用

12:30.380 --> 12:31.380
这个引用怎么理解呢

12:31.380 --> 12:33.380
引用你可以认为就是地址

12:33.380 --> 12:35.380
可以认为就是地址

12:35.380 --> 12:37.380
有它的地址

12:37.380 --> 12:39.380
obj1里边存放了

12:39.380 --> 12:40.380
这个对象的地址

12:40.380 --> 12:42.380
持有这个对象的引用

12:42.380 --> 12:43.380
我们这两种说法

12:43.380 --> 12:45.380
都是一个意思

12:45.380 --> 12:46.380
有的时候我说

12:46.380 --> 12:48.380
这个辨量P指向某个东西

12:48.380 --> 12:49.380
指的就是

12:49.380 --> 12:50.380
它的里边有个地址

12:50.380 --> 12:51.380
这个地址的指向

12:51.380 --> 12:53.380
以后的一个空间

12:53.380 --> 12:55.380
先把这句话理解

12:55.380 --> 12:56.380
好 接下来

12:56.380 --> 12:58.380
我们再看下面这句话

12:58.380 --> 12:59.380
23行

12:59.380 --> 13:02.380
把obj1负责给obj2

13:02.380 --> 13:03.380
再来看

13:03.380 --> 13:04.380
obj2又出来了

13:04.380 --> 13:06.380
obj2又出来了

13:06.380 --> 13:09.380
obj2里面存的是啥东西呢

13:09.380 --> 13:11.380
存的是啥东西呢

13:11.380 --> 13:13.380
他是把obj1这个辨量里面的东西

13:13.380 --> 13:15.380
负责粘贴过来

13:15.380 --> 13:18.380
辨量的负责一定是负责粘贴

13:18.380 --> 13:19.380
一定是负责粘贴

13:19.380 --> 13:21.380
于是obj1里面的东西

13:21.380 --> 13:23.380
直接负责粘贴过来

13:23.380 --> 13:25.380
那么你现在看一看

13:25.380 --> 13:27.380
这两个辨量里面的地址

13:27.380 --> 13:28.380
是不是一样的

13:28.380 --> 13:29.380
是不是一样的

13:29.380 --> 13:31.380
因为负责粘贴过来的吧

13:31.380 --> 13:33.380
因此他们的地址是一样的

13:33.380 --> 13:36.380
所以obj2会怎么样呢

13:36.380 --> 13:39.380
它也会指向这一块内存

13:39.380 --> 13:41.380
也会指向这一块内存

13:41.380 --> 13:44.380
尽管他们两个obj1和obj2

13:44.380 --> 13:46.380
是两块内存空间

13:46.380 --> 13:48.380
但是它里面存放的地址是一样的

13:48.380 --> 13:50.380
所以说这个地址呢

13:50.380 --> 13:52.380
会指向同一块内存空间

13:52.380 --> 13:54.380
变成这么一种结构了

13:54.380 --> 13:57.380
好 接下来我们可以这里记一笔

13:57.380 --> 14:02.380
相当于是现在obj2和obj1

14:02.380 --> 14:05.380
指向同一个对象

14:05.380 --> 14:06.380
能不能这样说

14:06.380 --> 14:07.380
想一想能不能这样说

14:07.380 --> 14:08.380
这可以

14:08.380 --> 14:10.380
这两个辨量里面存放的地址一样

14:10.380 --> 14:12.380
因此他们指向同一个对象

14:12.380 --> 14:14.380
也可以说成是啥呢

14:14.380 --> 14:16.380
也可以说成是

14:16.380 --> 14:18.380
小上面吧

14:18.380 --> 14:24.380
也可以说成是obj2和obj1

14:24.380 --> 14:29.380
持有

14:29.380 --> 14:31.380
相同的

14:31.380 --> 14:33.380
相同的引用

14:33.380 --> 14:34.380
是不是一个意思

14:34.380 --> 14:36.380
使用一个相同的地址

14:36.380 --> 14:38.380
持有一个相同的地址

14:38.380 --> 14:39.380
那么持有相同的引用

14:39.380 --> 14:40.380
是一个意思

14:40.380 --> 14:42.380
好 接下来这句话怎么理解

14:42.380 --> 14:43.380
27行

14:43.380 --> 14:46.380
通过obj2.name

14:46.380 --> 14:48.380
给它复制为456

14:48.380 --> 14:49.380
怎么理解呢

14:49.380 --> 14:50.380
找到obj2

14:50.380 --> 14:51.380
你看里面是地址

14:51.380 --> 14:52.380
对吧 地址

14:52.380 --> 14:53.380
ok 它出现了地址

14:53.380 --> 14:54.380
它就会经过这个地址

14:54.380 --> 14:56.380
它就不会直接在这里面复制了

14:56.380 --> 14:58.380
它会经过这个地址

14:58.380 --> 15:00.380
找到对应的内存空间

15:00.380 --> 15:01.380
找到这里

15:01.380 --> 15:05.380
找到内存空间里面的name属相

15:05.380 --> 15:06.380
你看

15:06.380 --> 15:08.380
找到内存空间里面的name属相

15:08.380 --> 15:09.380
通过地址

15:09.380 --> 15:10.380
找到内存空间

15:10.380 --> 15:11.380
找到name属相

15:11.380 --> 15:13.380
给它复制为456

15:13.380 --> 15:14.380
那你想了吗

15:14.380 --> 15:15.380
想了

15:15.380 --> 15:17.380
obj1是不是也跟那边了

15:17.380 --> 15:18.380
对吧

15:18.380 --> 15:19.380
因为他们的指向

15:19.380 --> 15:20.380
是同一块内存空间

15:20.380 --> 15:22.380
obj1也跟那边了

15:22.380 --> 15:23.380
明白了吧

15:23.380 --> 15:24.380
你说有多复杂

15:24.380 --> 15:26.380
也不至于对吧

15:26.380 --> 15:27.380
不至于

15:27.380 --> 15:28.380
反映出来

15:28.380 --> 15:29.380
两个name属相

15:29.380 --> 15:30.380
是不是两个都是456

15:30.380 --> 15:31.380
你看

15:31.380 --> 15:32.380
两个都是456

15:32.380 --> 15:33.380
没问题吧

15:33.380 --> 15:34.380
ok

15:34.380 --> 15:36.380
这就是关于引用内形

15:36.380 --> 15:37.380
和原始内形的区别

15:37.380 --> 15:38.380
有什么区别呢

15:38.380 --> 15:41.380
无非就是多了一块内存空间

15:41.380 --> 15:42.380
来存放数据

15:42.380 --> 15:43.380
然后呢

15:43.380 --> 15:45.380
把这个内存空间的地址

15:45.380 --> 15:46.380
再存放到变量里边

15:46.380 --> 15:47.380
它就不像原始内形

15:47.380 --> 15:48.380
原始内形的话

15:48.380 --> 15:50.380
它存放的是具体的值

15:50.380 --> 15:51.380
具体的值

15:51.380 --> 15:53.380
而引用内形的话

15:53.380 --> 15:54.380
存放的是什么

15:54.380 --> 15:55.380
存放的是引用

15:55.380 --> 15:56.380
也就是地址

15:57.380 --> 15:58.380
好

15:58.380 --> 15:59.380
咱们再来一个例子

15:59.380 --> 16:01.380
test2

16:01.380 --> 16:02.380
好

16:02.380 --> 16:03.380
比方说

16:03.380 --> 16:04.380
又来了

16:06.380 --> 16:07.380
下面去讲

16:07.380 --> 16:09.380
obj1等于这个

16:09.380 --> 16:10.380
等于这个

16:10.380 --> 16:11.380
然后呢

16:11.380 --> 16:12.380
接下来obj1

16:12.380 --> 16:13.380
复制给obj2

16:13.380 --> 16:15.380
复制给obj2

16:15.380 --> 16:16.380
接下来

16:16.380 --> 16:18.380
我再把obj2

16:18.380 --> 16:21.380
复制为name等于

16:21.380 --> 16:23.380
name为456

16:23.380 --> 16:24.380
name为456

16:24.380 --> 16:27.380
a级为18

16:27.380 --> 16:28.380
OK

16:28.380 --> 16:30.380
我们再来输出

16:30.380 --> 16:31.380
这样子

16:31.380 --> 16:33.380
再来输出obj1

16:33.380 --> 16:35.380
和obj2的name

16:35.380 --> 16:37.380
我们又来看一下

16:37.380 --> 16:39.380
情况又不一样了

16:39.380 --> 16:40.380
情况又不一样了

16:40.380 --> 16:41.380
好看一下

16:41.380 --> 16:43.380
123456

16:43.380 --> 16:45.380
它又变成123456

16:45.380 --> 16:46.380
又不一样了

16:46.380 --> 16:47.380
怎么回事呢

16:47.380 --> 16:48.380
怎么回事

16:48.380 --> 16:49.380
咱们又来分析一下

16:49.380 --> 16:50.380
这些可能我们笔记可能不多

16:50.380 --> 16:51.380
但是呢

16:51.380 --> 16:53.380
我们要讲这些东西

16:53.380 --> 16:54.380
要举的例子比较多

16:54.380 --> 16:55.380
通过这些例子

16:55.380 --> 16:57.380
反复了理解这个东西

16:57.380 --> 16:58.380
第三个

16:58.380 --> 17:00.380
以后我还是把一个ppt

17:00.380 --> 17:01.380
弄过来吧

17:01.380 --> 17:02.380
放到文章里边

17:02.380 --> 17:04.380
一个个来

17:04.380 --> 17:08.010
首先obj1出来了

17:08.010 --> 17:09.010
空的

17:09.010 --> 17:10.010
接下来

17:10.010 --> 17:11.010
有一个对象产生了

17:11.010 --> 17:12.010
以后呢

17:12.010 --> 17:14.010
你只要看到两个大伙号

17:14.010 --> 17:16.010
就是个对象字面量

17:16.010 --> 17:17.010
这样子

17:17.010 --> 17:18.010
记一笔

17:18.010 --> 17:20.010
凡是出现

17:20.010 --> 17:21.010
凡是出现

17:21.010 --> 17:24.010
对象字面量的位置

17:25.010 --> 17:27.010
都会在内存中

17:27.010 --> 17:29.010
都一定

17:29.010 --> 17:30.010
强调

17:30.010 --> 17:33.010
一定在内存中

17:33.010 --> 17:35.010
出现一个新的

17:35.010 --> 17:37.010
新的对象

17:37.010 --> 17:39.010
只要有一个对象字面量

17:39.010 --> 17:41.010
哪怕对象字面量

17:41.010 --> 17:42.010
跟之前的一模一样

17:42.010 --> 17:44.010
都会出现一个新的对象

17:44.010 --> 17:46.010
都会出现一个新的对象

17:46.010 --> 17:47.010
咱们来看一下

17:47.010 --> 17:48.010
来看一下

17:48.010 --> 17:49.010
这里有个对象字面量

17:49.010 --> 17:51.010
是不是马上一个新的对象就出来了

17:51.010 --> 17:52.010
对不对

17:52.010 --> 17:53.010
我们这里

17:53.010 --> 17:54.010
先还没有复制

17:54.010 --> 17:55.010
现在还没有复制

17:55.010 --> 17:56.010
OK

17:56.010 --> 17:57.010
出现了一个

17:57.010 --> 17:59.010
出现了一个就是

17:59.010 --> 18:00.010
对象字面量

18:00.010 --> 18:01.010
一个对象字面量

18:01.010 --> 18:03.010
出现了一块内存空间

18:03.010 --> 18:05.010
接下来

18:05.010 --> 18:07.010
把内存空间复制给obj1

18:07.010 --> 18:09.010
所以obj1里边存的是

18:09.010 --> 18:11.010
存的是一个地址

18:11.010 --> 18:13.010
然后有个箭头

18:13.010 --> 18:15.010
指向这一块内存空间

18:17.010 --> 18:18.010
有的时候

18:18.010 --> 18:20.010
我们为了方便

18:20.010 --> 18:22.010
也可以这样子来画图

18:22.010 --> 18:24.010
有的时候来分析一些问题的时候

18:24.010 --> 18:25.010
为了方便

18:25.010 --> 18:26.010
因为地址

18:26.010 --> 18:27.010
我们心中知道有地址就行了

18:27.010 --> 18:28.010
这样子来指

18:28.010 --> 18:29.010
是不是一样的意思

18:29.010 --> 18:30.010
就表示这里面是地址

18:30.010 --> 18:32.010
直接指向这一块内存空间

18:32.010 --> 18:34.010
它里面没有存具体的数据

18:34.010 --> 18:35.010
随便吧

18:35.010 --> 18:36.010
都一样

18:37.010 --> 18:38.010
这是这一句代

18:38.010 --> 18:39.010
接下来

18:39.010 --> 18:41.010
obj1复制给obj2

18:41.010 --> 18:42.010
是不是跟之前一样了

18:42.010 --> 18:43.010
对不对

18:43.010 --> 18:44.010
跟之前一样了吧

18:44.010 --> 18:46.010
跟这一块一样了

18:46.010 --> 18:48.010
跟这一块一样

18:48.010 --> 18:49.010
以前我讲这个地方了

18:49.010 --> 18:51.010
由于时间有限

18:51.010 --> 18:53.010
可能只能讲半个小时

18:53.010 --> 18:54.010
半个小时左右

18:54.010 --> 18:55.010
现在我们录视频

18:55.010 --> 18:56.010
我就可以慢慢讲

18:56.010 --> 18:57.010
把讲透

18:57.010 --> 18:58.010
好吧

18:58.010 --> 19:00.010
obj1的地址复制

19:00.010 --> 19:01.010
粘贴给obj2

19:01.010 --> 19:02.010
那么obj1和obj2

19:02.010 --> 19:04.010
是不是指向同一块内存空间了

19:04.010 --> 19:05.010
对不对

19:05.010 --> 19:06.010
没问题吧

19:06.010 --> 19:08.010
指向同一块内存空间了

19:08.010 --> 19:10.010
好 接下来我们继续

19:10.010 --> 19:12.010
又写了这么一句代

19:12.010 --> 19:13.010
好 这么句代

19:13.010 --> 19:14.010
怎么理解呢

19:14.010 --> 19:16.010
是不是又一个对象字面量

19:16.010 --> 19:18.010
以后只要看到

19:18.010 --> 19:20.010
有什么对象字面量出现

19:20.010 --> 19:22.010
一定是一个新的东西出现了

19:22.010 --> 19:23.010
一定是一个新的东西

19:23.010 --> 19:25.010
跟之前的没有什么关系

19:25.010 --> 19:27.010
于是这里是不是又建立了

19:27.010 --> 19:28.010
一块内存空间

19:28.010 --> 19:29.010
又来了

19:29.010 --> 19:30.010
一块新的内存空间

19:30.010 --> 19:32.010
我这就不写什么地址了

19:32.010 --> 19:34.010
又一块新的内存空间又来了

19:34.010 --> 19:36.010
这个name为多少

19:36.010 --> 19:37.010
为456对吧

19:37.010 --> 19:39.010
有没有A级属性没有

19:39.010 --> 19:41.010
这是一块新的对象

19:41.010 --> 19:43.010
一个新的对象

19:43.010 --> 19:44.010
然后

19:44.010 --> 19:47.010
把这个对象复制给obj2

19:47.010 --> 19:48.010
注意

19:48.010 --> 19:49.010
我不是更改

19:49.010 --> 19:50.010
不像之前

19:50.010 --> 19:51.010
之前是更改这个属性

19:51.010 --> 19:53.010
而现在是给这个边量复制

19:53.010 --> 19:54.010
那么什么意思呢

19:54.010 --> 19:56.010
就是把这个对象的地址

19:56.010 --> 19:57.010
是不是给它

19:57.010 --> 19:59.010
那么我们知道边量复制

19:59.010 --> 20:00.010
就是覆盖

20:00.010 --> 20:01.010
把之前的东西扔掉

20:01.010 --> 20:02.010
用新的东西

20:02.010 --> 20:04.010
于是它的地址

20:04.010 --> 20:06.010
更新了一个地址

20:06.010 --> 20:07.010
这个地址

20:07.010 --> 20:08.010
新的地址

20:08.010 --> 20:09.010
是不是指向这一块了

20:09.010 --> 20:11.010
指向这一块了

20:11.010 --> 20:13.010
改变的是这个东西

20:13.010 --> 20:14.010
指向这一块了

20:14.010 --> 20:16.010
跟obj1有没有什么关系

20:16.010 --> 20:17.010
没有任何关系

20:17.010 --> 20:18.010
我是改变了obj2

20:18.010 --> 20:20.010
这一块内存空间

20:20.010 --> 20:21.010
好好看一下

20:21.010 --> 20:23.010
把这个对象的地址

20:23.010 --> 20:25.010
复制给obj2

20:25.010 --> 20:26.010
看到没

20:26.010 --> 20:27.010
好

20:27.010 --> 20:29.010
然后指向这一块过后

20:29.010 --> 20:31.010
然后我再通过

20:31.010 --> 20:32.010
没有做什么

20:32.010 --> 20:33.010
对吧 直接输出

20:33.010 --> 20:35.010
你看一下输出结果

20:35.010 --> 20:37.010
obj1A456

20:37.010 --> 20:39.010
我怎么画的了

20:39.010 --> 20:40.010
一开始是123

20:40.010 --> 20:42.010
一开始是123

20:42.010 --> 20:43.010
没问题吧

20:43.010 --> 20:44.010
我刚写错了

20:44.010 --> 20:45.010
一开始是123

20:46.010 --> 20:48.010
然后新建一个对象

20:48.010 --> 20:49.010
内名为456

20:49.010 --> 20:50.010
新建一个对象

20:50.010 --> 20:51.010
内名为456

20:51.010 --> 20:53.010
然后把地址复给obj2

20:53.010 --> 20:54.010
于是输出结果是

20:54.010 --> 20:56.010
输出结果是不是123456

20:56.010 --> 20:58.010
看一下123456

20:58.010 --> 21:00.010
没问题吧

21:00.010 --> 21:02.010
好 这是这个例子

21:02.010 --> 21:03.010
再来一个例子

21:03.010 --> 21:04.010
反复的举例

21:04.010 --> 21:06.010
让你理解这一块的知识

21:07.010 --> 21:08.010
比方说我问你

21:08.010 --> 21:09.010
这么一段代码里边

21:09.010 --> 21:11.010
创建了几个对象

21:11.010 --> 21:13.010
创建了几个对象

21:13.010 --> 21:14.010
我们说对象的话

21:14.010 --> 21:15.010
说的是这个东西

21:15.010 --> 21:17.010
这个东西才叫对象

21:17.010 --> 21:18.010
这个东西叫变量

21:18.010 --> 21:19.010
变量里面可以存对象

21:19.010 --> 21:20.010
可以存对什么

21:20.010 --> 21:21.010
对象的地址

21:21.010 --> 21:22.010
因为对象是引用类型

21:22.010 --> 21:24.010
我们说变量里面

21:24.010 --> 21:26.010
存的是对象的地址

21:26.010 --> 21:27.010
这是严格的说法

21:27.010 --> 21:28.010
但是有的时候说习惯了

21:28.010 --> 21:30.010
也可以说变量里面存对象

21:30.010 --> 21:31.010
但是严格的说法是

21:31.010 --> 21:33.010
变量里面存的是什么

21:33.010 --> 21:34.010
存的是对象的地址

21:34.010 --> 21:36.010
因为对象是引用类型

21:37.010 --> 21:38.010
这个东西才叫对象

21:38.010 --> 21:39.010
才叫对象

21:39.010 --> 21:41.010
好 接下来我问你

21:41.010 --> 21:43.010
这段代码创建了几个对象

21:43.010 --> 21:45.010
是不是两个对象

21:45.010 --> 21:46.010
对吧

21:46.010 --> 21:47.010
创建了两个对象

21:47.010 --> 21:48.010
你怎么看的

21:48.010 --> 21:50.010
你就看大括号

21:50.010 --> 21:51.010
就看这个玩意有几个

21:51.010 --> 21:52.010
有几个就创建了几个

21:52.010 --> 21:54.010
很简单 非常简单

21:54.010 --> 21:56.010
创建了两个对象

21:56.010 --> 21:58.010
好 那么再看这个

21:58.010 --> 22:00.010
这一段代码创建了几个对象

22:00.010 --> 22:01.010
几个

22:02.010 --> 22:03.010
是不是只有一个

22:03.010 --> 22:04.010
别看它有两个变量

22:04.010 --> 22:06.010
它有100个变量都无所谓

22:06.010 --> 22:08.010
但是对象只有一个

22:08.010 --> 22:09.010
这些变量都是用的是

22:09.010 --> 22:11.010
同一个对象的地址

22:11.010 --> 22:12.010
看到没

22:12.010 --> 22:14.010
好 再来个例子

22:15.010 --> 22:16.010
TES3

22:17.010 --> 22:18.010
层层地进

22:19.010 --> 22:21.010
好 这里

22:21.010 --> 22:22.010
再来看

22:22.010 --> 22:24.010
有一个OB介E

22:25.010 --> 22:27.010
里边存了这么一个东西

22:29.010 --> 22:31.010
或者叫做U吧

22:31.010 --> 22:32.010
U1

22:32.010 --> 22:33.010
U1

22:33.010 --> 22:34.010
或者叫做U2E

22:34.010 --> 22:35.010
用户E

22:35.010 --> 22:37.010
用户E里面有个NAM

22:38.010 --> 22:39.010
U1

22:40.010 --> 22:43.010
然后有一个Adress

22:44.010 --> 22:45.010
有个地址

22:45.010 --> 22:47.010
地址有Country

22:47.010 --> 22:49.010
国家 中国

22:50.010 --> 22:51.010
City

22:51.010 --> 22:53.010
比方说哈尔滨

22:54.010 --> 22:55.010
这是用户对象E

22:55.010 --> 22:57.010
再来一个User2

22:59.010 --> 23:00.010
User2

23:01.010 --> 23:03.010
然后NAM属象为U2

23:04.010 --> 23:05.010
Adress

23:06.010 --> 23:07.010
Adress

23:08.010 --> 23:09.010
User1

23:09.010 --> 23:10.010
Adress

23:12.010 --> 23:15.380
这是第二个用户对象

23:15.380 --> 23:16.380
看一下

23:16.380 --> 23:17.380
然后接下来

23:17.380 --> 23:19.380
我们来改变User2

23:19.380 --> 23:21.380
Adress.City

23:22.380 --> 23:24.380
然后把它改成

23:24.380 --> 23:25.380
成都

23:26.380 --> 23:28.380
再改一下

23:28.380 --> 23:30.380
User2的NAM

23:30.380 --> 23:32.380
为User2

23:34.380 --> 23:36.380
接下来我们来输出

23:36.380 --> 23:37.380
输出场

23:37.380 --> 23:39.380
User1.NAM

23:39.380 --> 23:41.380
User2.NAM

23:41.380 --> 23:43.380
然后再输出

23:43.380 --> 23:46.380
User1.Adress.NAM

23:46.380 --> 23:49.380
然后再输出User2.Adress.NAM

23:50.380 --> 23:52.380
看一下输出结果

23:52.380 --> 23:53.380
你们先想一想

23:53.380 --> 23:54.380
你们觉得

23:54.380 --> 23:55.380
现在可能

23:55.380 --> 23:57.380
我相信90%以上的同学

23:57.380 --> 23:59.380
可能都想不出证据答案

23:59.380 --> 24:00.380
但是你们想一想

24:00.380 --> 24:01.380
对你们后边听这个东西

24:01.380 --> 24:02.380
肯定有好处

24:02.380 --> 24:04.380
你们觉得会输出什么

24:04.380 --> 24:05.380
你们想一想

24:05.380 --> 24:07.380
至少这个东西应该能判断出来

24:07.380 --> 24:08.380
这个东西肯定要能判断出来

24:08.380 --> 24:10.380
这个东西我们是讲

24:10.380 --> 24:11.380
刚刚讲了

24:11.380 --> 24:12.380
知识点是够的

24:12.380 --> 24:14.380
最好拿出纸盒比较画图

24:14.380 --> 24:15.380
最好画图

24:15.380 --> 24:17.380
一开始不太习惯

24:17.380 --> 24:18.380
你写习惯了过后

24:18.380 --> 24:19.380
像我现在根本不用画图了

24:19.380 --> 24:21.380
一看你就知道怎么回事了

24:21.380 --> 24:22.380
但是你开始不习惯

24:22.380 --> 24:23.380
画画图很正常

24:23.380 --> 24:25.380
非常非常正常

24:27.380 --> 24:28.380
会输出啥呢

24:28.380 --> 24:29.380
你可以暂停视频

24:29.380 --> 24:30.380
想一想

24:30.380 --> 24:32.380
我这里就直接公布答案了

24:32.380 --> 24:33.380
这一块

24:33.380 --> 24:34.380
会输出啥呢

24:34.380 --> 24:37.380
会输出U1 U2

24:37.380 --> 24:39.380
这一块会输出啥呢

24:39.380 --> 24:42.380
会输出程度程度

24:42.380 --> 24:43.380
两个都是程度

24:43.380 --> 24:50.470
咱们来看一下

24:50.470 --> 24:52.470
U2

24:52.470 --> 24:53.470
U2

24:53.470 --> 24:54.470
后来改了

24:54.470 --> 24:56.470
改了成U2了

24:56.470 --> 24:58.470
U1 U2

24:58.470 --> 24:59.470
我这里写错了吧

24:59.470 --> 25:00.470
我这里写错了

25:00.470 --> 25:02.470
应该是city

25:02.470 --> 25:03.470
写错了

25:03.470 --> 25:05.470
保存

25:05.470 --> 25:07.470
程度

25:08.470 --> 25:09.470
怎么回事呢

25:09.470 --> 25:10.470
什么回事呢

25:10.470 --> 25:11.470
我们又来画图

25:11.470 --> 25:13.470
画图是最好理解的

25:13.470 --> 25:14.470
又来画图

25:15.470 --> 25:17.470
一个来

25:18.470 --> 25:20.470
首先U2U

25:20.470 --> 25:22.470
U2U是一个对象

25:22.470 --> 25:24.470
我们先把对象的图画出来

25:24.470 --> 25:25.470
再说复直

25:25.470 --> 25:26.470
复直很简单

25:26.470 --> 25:27.470
复直就存了个地址

25:27.470 --> 25:28.470
只过去完事了

25:28.470 --> 25:29.470
复直很简单

25:30.470 --> 25:31.470
然后

25:31.470 --> 25:34.470
先问大家一个问题

25:34.470 --> 25:36.470
我现在鼠标框柱的这一部分

25:36.470 --> 25:37.510
创建了几个对象

25:38.670 --> 25:39.830
告诉我创建几个对象

25:41.310 --> 25:43.430
有的人说一个不就一个对象吗

25:43.430 --> 25:45.430
不对啊 这里是两个对象

25:45.430 --> 25:46.870
我刚才咋说了

25:46.870 --> 25:48.670
看见一个对象字面量

25:48.670 --> 25:49.950
有时候两个大括号

25:49.950 --> 25:51.790
一个新的对象产生了

25:51.790 --> 25:52.870
这里产生一个对象

25:52.870 --> 25:54.470
这里边是不是还产生了个对象

25:54.470 --> 25:55.430
对不对

25:55.430 --> 25:57.390
创建了两个对象

25:57.390 --> 25:59.430
我来画一下这个区域的图

25:59.430 --> 26:01.950
这里是由热衣

26:01.950 --> 26:03.470
这个地址我们先不写

26:03.470 --> 26:05.510
先把对象的结构写出来

26:05.550 --> 26:07.190
这个对象的结构是怎么回上的

26:07.190 --> 26:09.310
首先有一个属象NAM

26:09.310 --> 26:09.630
对吧

26:09.630 --> 26:10.750
NAM为U1

26:10.750 --> 26:11.150
OK

26:11.150 --> 26:12.190
NAM为U1

26:13.190 --> 26:14.150
还有什么属性

26:14.670 --> 26:16.230
又有个属性而追似

26:16.230 --> 26:17.430
而追似地址

26:17.430 --> 26:20.110
这个属性而追似地址

26:20.110 --> 26:20.470
好

26:20.470 --> 26:21.510
地址里边是什么

26:21.510 --> 26:23.150
是不是又是个对象

26:23.150 --> 26:24.310
OK

26:24.310 --> 26:25.910
咋说的之前

26:25.910 --> 26:27.230
以看见一个对象

26:27.230 --> 26:29.270
是不是一个新的内存出现了

26:29.270 --> 26:30.550
只要你看见这个玩意

26:30.550 --> 26:31.950
一个新的内存就出现了

26:31.950 --> 26:34.270
于是又有一个新的内存

26:34.310 --> 26:35.750
这个内存里面存的是啥呢

26:36.950 --> 26:38.230
CountryCity

26:39.870 --> 26:41.750
Country

26:41.750 --> 26:42.390
然后Country是啥

26:42.390 --> 26:44.070
中国对吧

26:44.070 --> 26:45.270
中国

26:45.270 --> 26:46.390
然后下面是啥呢

26:46.390 --> 26:48.350
CityCity

26:48.350 --> 26:49.030
City是啥呢

26:50.550 --> 26:51.790
哈尔滨哈尔滨

26:53.470 --> 26:54.870
这是一个新的对象

26:54.870 --> 26:56.470
你只要看见这个玩意

26:56.470 --> 26:57.990
一个新的对象就出来了

26:57.990 --> 26:58.470
好

26:58.470 --> 27:00.870
把这个东西放到这个属性里边

27:00.870 --> 27:02.110
什么意思呢

27:02.110 --> 27:03.790
把这个东西放到属性里边

27:03.790 --> 27:07.110
指的是这个属性里边存的又是一个地址

27:07.110 --> 27:08.590
它存的也是个地址

27:08.590 --> 27:09.830
凡是引用内形

27:09.830 --> 27:10.710
它要存的话

27:10.710 --> 27:11.670
它只能存地址

27:11.670 --> 27:13.910
它不能存其他玩意

27:13.910 --> 27:16.110
对象的话在另外一块内存空间里边

27:16.110 --> 27:18.150
它存的话只能存地址

27:18.150 --> 27:18.550
好

27:18.550 --> 27:18.990
于是呢

27:18.990 --> 27:21.110
这一块是不是又是地址

27:21.110 --> 27:22.870
这个地址指向谁

27:22.870 --> 27:23.830
指向谁

27:23.830 --> 27:26.310
是不是指向那个而坠实的对象

27:26.310 --> 27:26.990
对吧

27:26.990 --> 27:28.430
你再换个颜色啊

27:28.430 --> 27:29.070
换成黑色吧

27:30.830 --> 27:30.990
好

27:30.990 --> 27:32.070
它又指向这个对象

27:32.070 --> 27:32.390
看没

27:33.910 --> 27:35.070
然后呢

27:35.070 --> 27:37.150
这才是把整个对象创建出来了

27:37.150 --> 27:37.910
看了没

27:37.910 --> 27:39.950
开闭了两块内存空间

27:39.950 --> 27:41.670
一块内存空间里边存一些属性

27:41.670 --> 27:42.750
一个地址

27:42.750 --> 27:44.710
而坠实里边又是个地址

27:44.710 --> 27:46.350
它又指向这块内存空间

27:46.350 --> 27:48.830
这块内存空间里边又有两个属性

27:48.830 --> 27:50.110
如果这里边还有对象的话

27:50.110 --> 27:50.670
又来指

27:50.670 --> 27:52.390
又来指形成一个链

27:52.390 --> 27:53.510
应该的意思吧

27:53.510 --> 27:54.710
这就是对象的嵌套结构

27:54.710 --> 27:56.470
它的真正的内存里边的线

27:56.470 --> 27:58.950
那就是它的格式

27:58.950 --> 27:59.150
好

27:59.150 --> 28:01.030
接下来把这个对象

28:01.030 --> 28:01.670
对吧

28:01.670 --> 28:03.550
把这个对象

28:03.590 --> 28:04.590
这个对象负责给谁呢

28:04.590 --> 28:05.510
负责给U2E

28:05.510 --> 28:07.030
U2E里边有个地址

28:07.030 --> 28:07.350
对吧

28:07.350 --> 28:08.190
有个地址

28:08.190 --> 28:09.390
这个地址指向谁

28:10.270 --> 28:11.390
指向谁呢

28:11.390 --> 28:12.830
有同学说是指向两个对象

28:12.830 --> 28:13.310
不至于

28:13.310 --> 28:13.990
不至于

28:13.990 --> 28:14.950
它指向的是这个对象

28:14.950 --> 28:15.190
是吧

28:15.190 --> 28:16.510
这个对象负责给它

28:16.510 --> 28:18.670
所以它的地址是指向这块的空间的

28:19.510 --> 28:19.710
好

28:19.710 --> 28:20.950
接下来比方说

28:20.950 --> 28:22.470
比方说我们接下来访问的是

28:22.470 --> 28:27.550
访问的是U2E.adres.city

28:27.550 --> 28:28.430
访问的是

28:28.430 --> 28:29.470
看着啊

28:29.470 --> 28:31.230
通过U2E这个地址

28:31.230 --> 28:31.750
看到没

28:31.790 --> 28:32.630
通过这个地址

28:32.630 --> 28:33.350
找到什么

28:33.350 --> 28:33.870
adres

28:33.870 --> 28:34.270
对吧

28:34.270 --> 28:35.790
找到adres这个属向

28:35.790 --> 28:36.950
在通过这个adres的属向

28:36.950 --> 28:37.750
是不是又是个地址

28:37.750 --> 28:39.350
因为找它里边的属向

28:39.350 --> 28:39.950
city

28:39.950 --> 28:40.750
看到没

28:40.750 --> 28:42.110
找到这个地方了

28:42.110 --> 28:44.030
这样一层一层找过去的

28:44.030 --> 28:44.750
是不是非常清楚了

28:44.750 --> 28:45.910
现在

28:45.910 --> 28:46.510
好

28:46.510 --> 28:47.070
然后呢

28:47.070 --> 28:48.590
我们再来看下面这句话

28:48.590 --> 28:50.190
像是一开始你不适应的话

28:50.190 --> 28:50.790
你不适应的话

28:50.790 --> 28:52.030
感觉你不画图

28:52.030 --> 28:53.070
就完全理不清楚

28:53.070 --> 28:53.790
但是你慢慢的

28:53.790 --> 28:54.750
心里面反复的想

28:54.750 --> 28:55.230
反复的想

28:55.230 --> 28:56.430
反复的画图

28:56.430 --> 28:57.670
我当时以前学程序

28:57.670 --> 28:58.990
也不就是这样的过来的嘛

28:58.990 --> 28:59.870
谁学程序

28:59.870 --> 29:00.910
都是这样的过来的

29:00.910 --> 29:02.230
都是这样子过来的

29:02.230 --> 29:03.630
咱们现在学程序

29:03.630 --> 29:04.430
目前这个阶段

29:04.430 --> 29:05.110
就相当于是

29:05.110 --> 29:06.430
你们现在多少岁了

29:06.430 --> 29:07.430
现在是相当于是

29:07.430 --> 29:08.310
你们学说话

29:08.310 --> 29:09.950
现在是一岁多了

29:09.950 --> 29:11.870
可以这样子说话了

29:11.870 --> 29:12.990
能说一点东西了

29:12.990 --> 29:14.950
可能不至于这样子

29:14.950 --> 29:16.630
能够蹦出一些词了

29:16.630 --> 29:17.630
能够蹦出一些词了

29:17.630 --> 29:19.430
但是还不能形成完整的语句

29:19.430 --> 29:20.990
就有些同学老是在很着急

29:20.990 --> 29:22.310
总是想

29:22.310 --> 29:22.710
怎么呢

29:22.710 --> 29:24.270
为什么到现在都还没有做出一个

29:24.270 --> 29:25.870
就是功能出来了

29:25.870 --> 29:26.590
还做不出来

29:26.590 --> 29:28.070
还需要很多的东西

29:28.070 --> 29:29.950
咱们先把发音

29:30.030 --> 29:31.110
说话的发音

29:31.110 --> 29:32.110
发标准的

29:32.110 --> 29:33.870
把一些语法搞清楚了

29:33.870 --> 29:34.710
把基础打好了

29:34.710 --> 29:36.950
之后我们后面肯定有很多

29:36.950 --> 29:38.950
做的做不完的练习

29:38.950 --> 29:40.310
不着急

29:40.310 --> 29:44.150
咱们看着下面继续

29:44.150 --> 29:45.670
又来一个UZER2

29:45.670 --> 29:46.870
UZER2看一下

29:46.870 --> 29:48.750
UZER2又是UZER2个对象

29:48.750 --> 29:49.070
对吧

29:49.070 --> 29:50.030
如果有的时候问你

29:50.030 --> 29:53.590
这个单码这一块创建了几个对象

29:53.590 --> 29:54.550
几个

29:54.550 --> 29:55.790
数

29:55.790 --> 29:57.030
数成对的大括号

29:57.030 --> 29:57.710
是不是三个

29:57.710 --> 29:58.230
对不对

29:58.230 --> 29:59.750
创建了三个对象

29:59.950 --> 30:01.550
那么这一块

30:01.550 --> 30:02.990
这一块里边

30:02.990 --> 30:05.110
首先又是个新的对象出现了

30:05.110 --> 30:06.550
又有一个新的对象了

30:07.550 --> 30:08.710
一个新的对象

30:08.710 --> 30:08.910
好

30:08.910 --> 30:10.470
这个对象的NAME属性为啥呢

30:10.470 --> 30:11.110
为U2

30:11.110 --> 30:11.510
对吧

30:11.510 --> 30:13.190
为U2

30:13.190 --> 30:14.550
而追使为啥呢

30:14.550 --> 30:16.310
你看而追使

30:16.310 --> 30:18.830
它是把UZER1的而追使取出来

30:18.830 --> 30:21.630
直接复制给这个而追使

30:21.630 --> 30:23.270
它是把UZER1的

30:23.270 --> 30:24.030
什么

30:24.030 --> 30:25.990
而追使取出来

30:25.990 --> 30:27.790
直接复制给它

30:27.790 --> 30:29.150
那么是不是复制粘贴

30:29.150 --> 30:30.670
尽管它是属性不是变量

30:30.670 --> 30:32.190
但是复制

30:32.190 --> 30:34.510
这一块都是复制粘贴

30:34.510 --> 30:35.910
都是复制粘贴

30:35.910 --> 30:37.910
所以说这个地址复制粘贴过来

30:37.910 --> 30:39.630
那这两个地址是不是一样了

30:39.630 --> 30:40.750
这两个地址是不是一样了

30:40.750 --> 30:44.310
因此它们指向同一块的存空间

30:44.310 --> 30:45.830
指向它

30:45.830 --> 30:47.550
能看到那个结构吗

30:47.550 --> 30:48.150
好看一下

30:48.150 --> 30:49.350
没问题吧

30:49.350 --> 30:51.310
也就是它们共用一个地址对象

30:51.310 --> 30:53.510
这个对象是共用的

30:53.510 --> 30:53.750
好

30:53.750 --> 30:54.750
但是这个对象不一样

30:54.750 --> 30:56.110
这个对象不一样

30:56.110 --> 30:56.270
好

30:56.270 --> 30:56.950
接下来

30:56.990 --> 31:00.550
把UZER2的粘贴属性

31:00.550 --> 31:01.510
当然要复制

31:01.510 --> 31:03.310
要复制

31:03.310 --> 31:05.030
这里还需要个变量

31:05.030 --> 31:06.870
UZER2

31:06.870 --> 31:08.310
UZER2指向谁呢

31:08.310 --> 31:10.030
肯定是指向下边这个

31:10.030 --> 31:11.950
指向下边这个

31:11.950 --> 31:14.030
把UZER2

31:14.030 --> 31:16.270
它的粘贴属性变为啥呢

31:16.270 --> 31:19.430
变为UZER2

31:19.430 --> 31:21.310
这变成UZER2

31:21.310 --> 31:22.630
你看UZER1是不是没动

31:22.630 --> 31:22.870
对吧

31:22.870 --> 31:25.230
两个对象也肯定没动

31:25.270 --> 31:26.070
然后呢

31:26.070 --> 31:29.750
再把UZER2.adjc.city

31:29.750 --> 31:33.710
UZER2.adjc.city改成成都

31:33.710 --> 31:34.870
于是呢

31:34.870 --> 31:36.750
UZER2.adjc.city

31:36.750 --> 31:37.750
说找到它了

31:37.750 --> 31:38.750
指过来了

31:38.750 --> 31:40.190
the city改成成都

31:40.190 --> 31:41.590
说两个都变了

31:41.590 --> 31:41.910
对不对

31:41.910 --> 31:43.710
说两个都变了

31:43.710 --> 31:45.310
明白这个意思吗

31:45.310 --> 31:45.830
好

31:45.830 --> 31:46.550
以后呢

31:46.550 --> 31:48.070
其实你做鼠炼难过后

31:48.070 --> 31:50.270
你就可以很容易看得出来了

31:50.270 --> 31:50.790
你会发现

31:50.790 --> 31:51.550
这个东西是对象

31:51.550 --> 31:52.990
对象一定是地址

31:52.990 --> 31:54.590
那么这个地址一复制过来

31:54.630 --> 31:55.630
两个地址是一样的

31:55.630 --> 31:57.030
指向的是同一块的水中间

31:57.030 --> 31:58.910
所以说我通过它来改它

31:58.910 --> 32:00.230
改动的是两个地址

32:00.230 --> 32:01.830
两个人地址都变了

32:01.830 --> 32:03.270
因为是同一块的水中间

32:03.270 --> 32:03.870
你做多了

32:03.870 --> 32:05.590
就慢慢发现这种感觉了

32:05.590 --> 32:07.150
但是你现在刚开始

32:07.150 --> 32:08.710
我不建议大家这样去想

32:08.710 --> 32:10.070
你反而容易晕

32:10.070 --> 32:10.790
你怎么去想呢

32:10.790 --> 32:12.230
你一定要画图

32:12.230 --> 32:14.630
你解册学题一定要画图

32:14.630 --> 32:15.630
不画图的话很难

32:15.630 --> 32:16.790
你得清楚的

32:16.790 --> 32:18.230
就变成这样的结构

32:18.230 --> 32:19.430
那我解册这个东西

32:19.430 --> 32:19.990
以后呢

32:19.990 --> 32:22.030
出现更多层次的嵌套

32:22.030 --> 32:23.070
比方说这里

32:23.070 --> 32:24.190
我就随便写了

32:24.230 --> 32:25.670
这里还嵌套了一个东西

32:25.670 --> 32:27.830
嵌套东西里面还嵌套了一个东西

32:27.830 --> 32:29.110
是不是一样的意思的

32:29.110 --> 32:29.910
一样的意思的

32:29.910 --> 32:30.910
那就相当于是啥呢

32:30.910 --> 32:31.630
相当于是这里

32:31.630 --> 32:33.150
OB接有指向一个新的对象

32:33.150 --> 32:33.670
对吧

32:33.670 --> 32:35.550
然后新的对象里边一个SUB

32:35.550 --> 32:38.110
又指向另一个新的对象

32:38.110 --> 32:39.750
就这么个意思的

32:39.750 --> 32:41.870
它一层一层指过去

32:41.870 --> 32:44.150
每一块对象字面量

32:44.150 --> 32:46.590
都是一块新的类伸空间

32:46.590 --> 32:48.630
这就是这一块的知识

32:48.630 --> 32:49.910
反而是出现对象字面的位置

32:49.910 --> 32:51.510
都一定是在类伸里面

32:51.510 --> 32:53.230
出现了一个新的对象

32:53.270 --> 32:54.270
比方说

32:54.270 --> 32:55.750
咱们来练习一下

32:56.750 --> 32:57.510
PES4

32:58.230 --> 32:58.710
来

32:58.710 --> 32:59.590
你们来做一下

32:59.590 --> 33:00.670
这个例子

33:00.670 --> 33:04.430
来告诉我结果

33:04.430 --> 33:05.590
scripps

33:05.590 --> 33:06.030
好

33:06.030 --> 33:07.430
比方说

33:07.430 --> 33:08.390
比方说

33:08.390 --> 33:09.710
嗯

33:09.710 --> 33:11.070
这里的OB界

33:11.070 --> 33:12.190
OB界1

33:12.190 --> 33:13.910
写个A

33:13.910 --> 33:15.110
123

33:15.110 --> 33:16.150
B

33:16.150 --> 33:17.470
456

33:17.470 --> 33:19.110
然后了SUB

33:19.110 --> 33:20.710
SUB

33:20.710 --> 33:23.270
为一个对象

33:23.270 --> 33:24.190
一个对象

33:24.230 --> 33:26.350
对象里边有一个S

33:27.350 --> 33:27.830
S1

33:27.830 --> 33:28.750
我就随便乱写的

33:28.750 --> 33:29.310
随便乱写的

33:29.310 --> 33:30.790
不去纠结

33:30.790 --> 33:31.350
S2

33:31.350 --> 33:32.710
我拿去找个什么例子的

33:32.710 --> 33:34.150
因为我们反正就是讲语法嘛

33:34.150 --> 33:35.150
对吧

33:35.150 --> 33:37.110
不要在例子上面去花费时间了

33:37.110 --> 33:38.630
OB界2

33:38.630 --> 33:39.750
为什么

33:39.750 --> 33:41.510
OB界1

33:41.510 --> 33:42.550
OB界2

33:42.550 --> 33:43.910
第二SUB

33:45.870 --> 33:49.790
等于S1

33:49.790 --> 33:51.390
为什么

33:54.590 --> 33:55.550
S吧

33:55.550 --> 33:56.270
随便吧

33:56.270 --> 33:56.830
随便乱写

33:56.830 --> 33:58.230
我都不知道写啥了

33:58.230 --> 33:59.110
S

33:59.110 --> 33:59.630
滴滴滴

33:59.630 --> 34:00.270
随便乱写

34:00.270 --> 34:01.430
随便乱写

34:01.430 --> 34:01.910
好

34:01.910 --> 34:03.190
咱们来输出

34:03.190 --> 34:04.350
咱们来输出

34:04.350 --> 34:05.950
OB界1.

34:06.710 --> 34:08.910
1.SUB

34:08.910 --> 34:10.230
S1

34:10.230 --> 34:13.470
OB界2.SUB

34:13.470 --> 34:14.830
S2

34:14.830 --> 34:16.150
S1

34:16.150 --> 34:18.190
输出的结果是啥呢

34:18.190 --> 34:18.350
好

34:18.350 --> 34:18.950
看一下

34:18.950 --> 34:19.710
给你们点时间

34:19.710 --> 34:21.150
看一下

34:21.150 --> 34:21.550
看一下

34:21.550 --> 34:28.010
我喝口水

34:28.050 --> 34:30.250
好 你可以把视频暂停啊

34:30.250 --> 34:31.610
可以把视频暂停

34:31.610 --> 34:32.610
好好去画一下图

34:32.610 --> 34:33.690
你不画图的话

34:33.690 --> 34:35.570
你们一开始很难解出来的

34:35.570 --> 34:36.010
告诉你们

34:36.010 --> 34:37.850
你很难解出来的

34:37.850 --> 34:39.450
你一定要去画画图

34:39.450 --> 34:41.250
把图就用拿去指合笔

34:41.250 --> 34:42.890
也不用什么PBT拿去指合笔

34:42.890 --> 34:44.370
马上画一下

34:44.370 --> 34:46.570
画就画出来了

34:46.570 --> 34:47.050
好

34:47.050 --> 34:48.450
是啥呢

34:48.450 --> 34:50.410
是啥呢

34:50.410 --> 34:51.490
我现在说答案了

34:51.490 --> 34:52.410
如果你还没做出来的话

34:52.410 --> 34:53.370
先不要看

34:53.370 --> 34:55.050
好 说答案了

34:55.050 --> 34:56.250
S

34:56.250 --> 34:56.930
S

34:56.970 --> 34:58.370
两个S

34:58.370 --> 34:58.650
好

34:58.650 --> 35:00.450
咱们来看一下

35:00.450 --> 35:02.210
看一下

35:02.210 --> 35:03.690
F12

35:03.690 --> 35:04.650
SS

35:04.650 --> 35:04.810
好

35:04.810 --> 35:05.730
你不画图的话

35:05.730 --> 35:08.250
你很难分析的出来

35:08.250 --> 35:08.450
好

35:08.450 --> 35:09.410
怎么回事呢

35:09.410 --> 35:09.890
怎么回事

35:09.890 --> 35:10.850
我们又来画图

35:10.850 --> 35:12.250
又来画图

35:12.250 --> 35:13.570
但是如果你用指合笔的话

35:13.570 --> 35:14.610
画起来很快的

35:14.610 --> 35:15.690
你都不用去写这个地址了

35:15.690 --> 35:16.610
直接指就行了

35:16.610 --> 35:18.050
接下来我就直接指了

35:18.050 --> 35:19.370
直接指向了

35:19.370 --> 35:19.930
好

35:19.930 --> 35:21.930
接下来看一下

35:21.930 --> 35:24.170
首先有一个OB界1

35:24.170 --> 35:25.730
OB界1

35:25.810 --> 35:26.730
它里边有一个对象

35:26.730 --> 35:27.210
对吧

35:27.210 --> 35:28.450
对象

35:28.450 --> 35:29.690
其实这个AB属性没啥用

35:29.690 --> 35:29.890
对吧

35:29.890 --> 35:30.370
没啥用

35:30.370 --> 35:32.010
无所谓吧

35:32.010 --> 35:33.530
有一个对象

35:33.530 --> 35:35.650
我先把这个取掉

35:35.650 --> 35:36.610
OB界1

35:36.610 --> 35:37.650
我就不要这个地址

35:37.650 --> 35:39.170
画简单一点

35:39.170 --> 35:40.370
这是OB界1

35:40.370 --> 35:41.490
它指向一个对象

35:41.490 --> 35:42.530
指向一个对象

35:42.530 --> 35:44.090
这个对象里面有哪些东西呢

35:44.090 --> 35:44.810
有A

35:44.810 --> 35:45.610
A为啥呢

35:45.610 --> 35:46.970
A为123

35:46.970 --> 35:48.250
123

35:48.250 --> 35:49.690
然后有什么B

35:49.690 --> 35:50.250
B为什么呢

35:50.250 --> 35:51.010
就是456

35:51.010 --> 35:52.370
这个都出现没用到

35:52.370 --> 35:54.530
我就随便瞎写的

35:54.530 --> 35:55.450
456

35:55.490 --> 35:57.970
然后在后边有一个SUB

35:57.970 --> 36:00.250
SUB表示指元素的意思

36:00.250 --> 36:01.130
表示指

36:01.130 --> 36:02.690
它的就是后代

36:02.690 --> 36:03.050
SUB

36:05.530 --> 36:06.770
然后里边有啥呢

36:06.770 --> 36:07.970
意思又是个对象

36:07.970 --> 36:08.570
OK

36:08.570 --> 36:11.010
那么这个属性是不是又要指向一块内存空间

36:11.010 --> 36:11.530
对吧

36:11.530 --> 36:12.490
它里边是一个地址

36:12.490 --> 36:14.930
又要指向一块新的内存空间

36:14.930 --> 36:17.170
这个新的内存空间里边有啥呢

36:17.170 --> 36:17.890
有S1

36:17.890 --> 36:18.690
S2

36:18.690 --> 36:19.450
OK

36:19.450 --> 36:20.570
这些都是原式内象

36:20.570 --> 36:22.570
只有原式内象才是直接存放的

36:22.570 --> 36:24.250
对于属性也是一样

36:24.250 --> 36:25.890
属性里边如果存放对象的话

36:25.890 --> 36:26.810
又肯定是一个地址

36:26.810 --> 36:29.090
又是指向一块新的空间

36:29.090 --> 36:30.850
只有这种

36:30.850 --> 36:32.050
就是原式内象

36:32.050 --> 36:32.650
什么数字

36:32.650 --> 36:33.250
支付串

36:33.250 --> 36:35.050
这些东西才是直接存放的

36:35.050 --> 36:35.250
好

36:35.250 --> 36:37.770
S1为ABC

36:37.770 --> 36:42.170
S2为BCD

36:42.170 --> 36:44.330
好

36:44.330 --> 36:46.490
变成这么一种内存结构

36:46.490 --> 36:48.170
接下来了

36:48.170 --> 36:50.770
OBG1负责OBG2

36:50.770 --> 36:53.130
是不是OBG2现在也指向这一块了

36:53.130 --> 36:53.370
对吧

36:53.410 --> 36:55.130
OBG2里面也存了个地址

36:55.130 --> 36:56.210
也存了个地址

36:56.210 --> 36:58.170
它也指向了这块内存空间了

36:58.170 --> 36:58.770
是一样的

36:58.770 --> 36:59.690
对吧

36:59.690 --> 36:59.970
好

36:59.970 --> 37:00.490
接下来

37:01.730 --> 37:05.010
把OBG2的sub找到这个OBG2的sub

37:05.010 --> 37:06.850
不是给OBG2直接负责

37:06.850 --> 37:07.970
不要看到这个新的对象

37:07.970 --> 37:09.090
OBG2UBN了

37:09.090 --> 37:09.970
不是的

37:09.970 --> 37:12.930
是给OBG2的sub这个属性负责

37:12.930 --> 37:14.810
从OBG2找到这个sub

37:14.810 --> 37:16.410
是不是给它重新负责

37:16.410 --> 37:17.090
负责为啥呢

37:17.090 --> 37:18.890
是不是又是个新的对象了

37:18.890 --> 37:20.330
又是个新的对象了

37:20.330 --> 37:22.290
这个新的对象里边存的是啥

37:22.330 --> 37:23.490
S1为S

37:25.370 --> 37:26.810
S2为滴滴滴

37:27.450 --> 37:28.530
我是瞎写的

37:29.130 --> 37:29.610
好

37:29.610 --> 37:33.250
然后它重新把这个对象负责给这个属相

37:33.250 --> 37:36.050
于是这个属相是不是要指向新的内存空间了

37:36.050 --> 37:37.210
它地址变了

37:37.210 --> 37:39.010
要指向新的内存空间了

37:39.010 --> 37:40.130
指向这一块了

37:40.130 --> 37:40.770
对不对

37:40.770 --> 37:42.450
之前的对象还栽不栽

37:43.410 --> 37:44.330
还栽

37:44.330 --> 37:45.130
它不是消失了

37:45.130 --> 37:46.210
不是说之前就消失了

37:46.210 --> 37:47.130
还栽

37:47.130 --> 37:49.050
只剩了现在找不到它了

37:49.050 --> 37:50.450
通过这个东西来找到它

37:50.450 --> 37:50.970
看到没

37:51.730 --> 37:52.690
能理解吧

37:52.690 --> 37:54.410
所以说现在从OBGA1也好

37:54.410 --> 37:55.450
OBGA2也好

37:55.450 --> 37:57.330
找到的S1是不是都是一样的

37:57.330 --> 37:57.850
对吧

37:57.850 --> 37:59.410
你只要能够把图画出来

37:59.410 --> 38:00.650
怎么随便的考虑

38:00.650 --> 38:01.730
怎么去考

38:01.730 --> 38:02.770
都考不到你

38:03.770 --> 38:04.530
好

38:04.530 --> 38:05.250
一眼了吧

38:05.250 --> 38:05.770
这这一块

38:06.290 --> 38:07.090
这这一块

38:08.090 --> 38:08.650
好

38:08.650 --> 38:10.170
那么比方说

38:10.170 --> 38:10.730
举个例子

38:10.730 --> 38:11.850
比方说

38:11.850 --> 38:13.170
那我现在呢

38:14.210 --> 38:15.050
我又这样子写

38:15.050 --> 38:16.090
我又这样子写

38:16.090 --> 38:17.290
我就随便写了

38:18.290 --> 38:19.330
TEMP

38:19.330 --> 38:20.530
OBGA1

38:20.530 --> 38:23.530
OBGA1.SUB

38:24.850 --> 38:25.210
好

38:25.210 --> 38:26.530
现在我们再输出

38:27.090 --> 38:30.250
TEMP.S1

38:30.250 --> 38:33.160
又输出啥了

38:33.160 --> 38:34.640
好好看一下

38:34.640 --> 38:35.640
又输出啥了

38:37.400 --> 38:39.520
就要输出ABC了

38:39.520 --> 38:41.120
就要输出ABC了

38:41.120 --> 38:42.320
保存看一下

38:42.320 --> 38:43.680
是不是ABC

38:43.680 --> 38:44.440
为啥

38:44.440 --> 38:45.520
为啥又输出ABC了

38:45.520 --> 38:45.720
好

38:45.720 --> 38:46.680
我们多了一步了

38:46.680 --> 38:48.160
多了一步了

38:48.240 --> 38:49.600
那么我们回到这一步

38:49.600 --> 38:50.880
回到最开始这一步

38:52.720 --> 38:53.880
回到最开始这一步

38:54.600 --> 38:55.200
把这个

38:56.160 --> 38:56.720
放这

38:56.720 --> 38:57.400
放这

38:57.400 --> 38:58.200
一开始指向照的

38:58.200 --> 38:58.480
对吧

38:58.480 --> 38:59.520
一开始指向照的

39:00.080 --> 39:00.880
这个东西还没有

39:00.880 --> 39:01.200
对吧

39:01.200 --> 39:02.280
这个东西还没有

39:02.280 --> 39:02.960
其他有不有

39:02.960 --> 39:04.040
也不影响啥

39:04.040 --> 39:05.040
把人下来

39:05.040 --> 39:06.400
这东西都还没有

39:06.400 --> 39:07.080
还没有

39:07.760 --> 39:08.000
好

39:08.000 --> 39:08.480
接下来

39:08.480 --> 39:09.400
一开始这个样子

39:09.400 --> 39:10.400
上面这个样子

39:11.960 --> 39:12.320
接下来

39:12.320 --> 39:13.800
把OBGA1.SUB

39:13.800 --> 39:15.440
保存到变量TEMP里边

39:15.440 --> 39:16.760
于是有个变量出来了

39:16.760 --> 39:17.880
有个变量出来了

39:18.160 --> 39:19.160
什么变量TEMP

39:20.800 --> 39:21.760
TEMP指向谁

39:23.280 --> 39:23.760
指向谁

39:23.760 --> 39:25.400
指向了是不是他

39:25.400 --> 39:26.880
真的是他吗

39:26.880 --> 39:28.440
是把谁付这个TEMP

39:28.440 --> 39:30.440
不是把OBGA1付这个TEMP

39:30.440 --> 39:32.600
是把OBGA1里边的SUB

39:32.600 --> 39:33.800
就这个地址

39:33.800 --> 39:35.360
把这个地址付这个TEMP

39:35.360 --> 39:36.520
于是TEMP指向啥

39:37.520 --> 39:38.200
他指向谁

39:38.200 --> 39:39.280
还能指向谁吗

39:39.280 --> 39:39.760
你告诉我

39:41.320 --> 39:42.360
我就直接写过来了

39:42.360 --> 39:43.640
不然我不好联

39:43.640 --> 39:44.960
TEMP就指向了这一块

39:44.960 --> 39:46.080
看到没

39:46.080 --> 39:48.080
TEMP他就指向了他

39:49.080 --> 39:51.480
然后再来做后面的事情

39:51.480 --> 39:53.600
什么OBGA1付给OBGA2

39:53.600 --> 39:54.280
对吧

39:54.280 --> 39:56.640
OBGA1付给OBGA2

39:56.640 --> 39:57.160
OK

39:57.160 --> 39:59.800
OBGA2

39:59.800 --> 40:00.560
在这

40:01.560 --> 40:02.720
就好像这样子

40:02.720 --> 40:03.160
对吧

40:03.160 --> 40:04.640
OBGA1付给OBGA2

40:04.640 --> 40:06.200
两个指向同一块的存空间了

40:06.200 --> 40:07.640
然后再怎么样

40:07.640 --> 40:09.600
再把OBGA2的SUB

40:10.880 --> 40:12.320
再把OBGA2的SUB

40:12.320 --> 40:13.760
创建一个新的对象

40:13.760 --> 40:15.000
创建一个新的对象

40:15.000 --> 40:16.200
给这个SUB付值

40:16.200 --> 40:17.040
于是

40:17.080 --> 40:19.160
这个SUB指向了新的对象

40:19.160 --> 40:20.600
指向了新的对象

40:21.400 --> 40:22.640
那这个东西变不变

40:22.640 --> 40:23.680
它没有变化

40:23.680 --> 40:25.120
这个东西是没有变化的

40:25.120 --> 40:27.840
所以说最后输出OBGA1和OBGA2的SE

40:27.840 --> 40:29.240
SE就是SE

40:29.240 --> 40:31.240
输出TEMP的SE

40:31.240 --> 40:32.280
就是ABC

40:34.200 --> 40:34.840
看一下

40:34.840 --> 40:35.600
好好理解一下

40:38.030 --> 40:38.950
看一下这个代码

40:38.950 --> 40:40.550
看一下这个图

40:41.870 --> 40:43.230
这是这一块

40:43.230 --> 40:44.070
这一块

40:45.230 --> 40:46.150
再来介绍个知识

40:46.150 --> 40:47.230
其实我就讲完了

40:47.270 --> 40:49.110
这一块东西主要是讲例子

40:49.110 --> 40:50.670
主要是讲例子

40:50.670 --> 40:52.350
只像这些笔记的话

40:52.350 --> 40:53.910
把这三点记住就行了

40:53.910 --> 40:55.750
最后介绍一个扩展知识

40:55.750 --> 40:56.750
扩展知识

40:59.210 --> 41:00.170
这个知识也很简单

41:00.170 --> 41:01.450
大家可以听一下

41:01.450 --> 41:02.050
可以听一下

41:02.050 --> 41:04.010
因为我反而是没有拿

41:04.010 --> 41:06.610
没有拿专门一节课来讲的东西

41:06.610 --> 41:08.010
讲的扩展知识

41:08.010 --> 41:08.850
都可以听一下

41:08.850 --> 41:09.810
都可以听一下

41:09.810 --> 41:11.290
而且最好就听一下

41:11.290 --> 41:12.010
就听一下

41:12.010 --> 41:13.370
也不是不说可以了

41:13.370 --> 41:14.530
就必须听一下

41:14.530 --> 41:16.370
因为如果我觉得这个知识

41:17.170 --> 41:18.410
不讲也不会影响你

41:18.410 --> 41:19.290
以后面的开发的话

41:19.290 --> 41:20.530
我会专门拿一些课

41:21.970 --> 41:22.890
好扩展知识

41:22.890 --> 41:24.930
这一块讲一讲就是垃圾回收

41:24.930 --> 41:26.170
介石中的

41:27.050 --> 41:28.210
垃圾回收

41:29.850 --> 41:30.730
什么意思呢

41:30.730 --> 41:33.170
就是介石引擎

41:33.530 --> 41:34.690
介石引擎

41:35.490 --> 41:40.850
会定期的发现内存中

41:41.570 --> 41:44.290
无法访问到的对象

41:44.810 --> 41:46.210
无法访问到的对象

41:47.050 --> 41:50.930
该对象称之为垃圾

41:51.930 --> 41:52.970
我们用普通话来说

41:52.970 --> 41:53.850
就是垃圾

41:53.850 --> 41:54.210
对吧

41:54.210 --> 41:55.010
垃圾

41:55.010 --> 41:56.690
这个对象就称之为垃圾

41:57.490 --> 41:59.250
于是介石引擎

42:00.130 --> 42:01.250
介石引擎

42:02.410 --> 42:05.130
会在合适的时间

42:05.130 --> 42:06.370
在合适的时间

42:06.370 --> 42:09.130
那么具体是什么时间合适

42:09.130 --> 42:12.010
又具体是多少时间去发现一次

42:12.010 --> 42:14.210
又具体是它怎么来检测的

42:14.210 --> 42:15.690
不在我们讨论范围之列了

42:15.770 --> 42:17.810
我们前端不需要了解那么深的东西

42:17.810 --> 42:20.690
介石引擎会在合适的时间

42:20.690 --> 42:24.330
将起占用的内存

42:25.250 --> 42:26.010
释放

42:26.530 --> 42:27.210
释放

42:27.210 --> 42:28.530
就是标记这一块内存

42:28.530 --> 42:29.090
什么叫释放

42:29.090 --> 42:30.250
就是标记这一块内存

42:30.250 --> 42:30.890
是空的

42:30.890 --> 42:31.770
没东西了

42:31.770 --> 42:33.570
你可以把理解成为清除

42:33.570 --> 42:35.130
把这块内存给它擦除掉

42:36.370 --> 42:38.050
比方说

42:38.850 --> 42:40.010
什么情况呢

42:40.010 --> 42:41.290
这里有几个例子

42:42.530 --> 42:43.450
太舍伍

42:48.570 --> 42:51.250
我们通常我们写代码的时候

42:51.250 --> 42:52.930
不太会去关心什么垃圾回收

42:52.930 --> 42:54.450
不太会去关心这些东西

42:54.450 --> 42:56.890
因为现在的程序执行效率已经很高了

42:56.890 --> 42:59.930
而且在前端本来这些程序的运行

42:59.930 --> 43:00.890
不是在服务器上

43:00.890 --> 43:01.290
对吧

43:01.290 --> 43:02.610
运行的客户端这边

43:02.610 --> 43:04.610
所以说内存占用的

43:04.610 --> 43:06.490
优先级没有那么的高

43:06.490 --> 43:08.610
所以说我们平时不会太过

43:08.610 --> 43:09.410
太过与续占用

43:09.410 --> 43:11.530
就是去在意这些东西

43:11.530 --> 43:12.770
所以说很多的前端害怕者

43:12.770 --> 43:14.050
都不太知道这些东西

43:14.050 --> 43:15.970
这里我们定一个辩量

43:16.050 --> 43:16.890
OB借1

43:16.890 --> 43:18.410
就OB借吧

43:18.410 --> 43:21.090
OB借

43:21.090 --> 43:22.650
就OB借吧

43:22.650 --> 43:24.610
这里一个对象

43:24.610 --> 43:26.650
A123就随便写吧

43:26.650 --> 43:29.210
B456就随便写个对象

43:29.210 --> 43:29.450
好

43:29.450 --> 43:32.050
接下来我们再给OB借定一个对象

43:33.450 --> 43:34.130
再定一个对象

43:35.770 --> 43:36.930
我自己顺便说一句

43:36.930 --> 43:37.690
顺便说一句

43:38.770 --> 43:39.850
这两个对象

43:39.850 --> 43:41.650
这是两个对象还是一个对象

43:42.650 --> 43:44.250
两个还是一个

43:44.250 --> 43:45.490
这里是两个对象还是一个对象

43:46.410 --> 43:48.130
应该这样子写

43:48.770 --> 43:50.770
当然这样子写也没错

43:50.770 --> 43:51.890
这样子写也没错

43:51.890 --> 43:52.530
我们现在说过

43:52.530 --> 43:53.850
可以定义同名辩量的

43:53.850 --> 43:54.890
但是不要建议

43:54.890 --> 43:56.010
不要这么去做

43:56.010 --> 43:56.530
很怪

43:58.650 --> 43:59.650
这样子写

43:59.650 --> 44:00.730
吃几个对象

44:00.730 --> 44:01.850
是两个对吧

44:01.850 --> 44:03.370
应该是两个对象对吧

44:03.370 --> 44:03.970
两个对象

44:06.370 --> 44:08.370
那么现在直播的两个对象

44:08.370 --> 44:09.250
它凑巧了

44:09.250 --> 44:10.170
属性自己相同

44:10.170 --> 44:11.770
当然我完全可以把它写成不同的

44:11.770 --> 44:12.170
对吧

44:12.170 --> 44:12.850
ABC

44:13.650 --> 44:14.330
BCD

44:14.330 --> 44:15.410
完全可以写成不同的

44:16.250 --> 44:16.450
好

44:16.450 --> 44:17.530
接下来我们来画一下

44:17.530 --> 44:18.970
这个内存图

44:18.970 --> 44:19.890
内存图

44:23.060 --> 44:25.820
首先是第一个对象

44:25.820 --> 44:26.780
首先是第一个对象

44:28.420 --> 44:29.220
OB界

44:29.220 --> 44:30.620
它指向一块内存空间

44:30.620 --> 44:31.660
里边是一个对象

44:31.660 --> 44:34.240
是个对象

44:34.240 --> 44:35.680
转过来

44:35.680 --> 44:37.320
AB两个属性

44:37.320 --> 44:37.800
一个对象

44:39.280 --> 44:39.520
好

44:39.520 --> 44:41.640
接下来U把OB界

44:41.640 --> 44:43.440
又复制为一个新的对象

44:43.440 --> 44:44.360
一个新的对象

44:44.360 --> 44:45.320
这是个新的对象

44:45.320 --> 44:46.720
它不是原来的对象

44:46.720 --> 44:47.960
一个新的对象又产生了

44:48.920 --> 44:49.640
就是ABC

44:52.320 --> 44:53.320
BCD

44:53.320 --> 44:54.400
新的对象产生了

44:54.400 --> 44:56.520
于是OB界会指向谁

44:56.520 --> 44:58.320
是不是会指向他了

44:58.320 --> 45:00.440
那么你看一下这个对象

45:00.440 --> 45:02.400
是不是你已经永远没有办法找到

45:02.400 --> 45:02.960
这个对象了

45:02.960 --> 45:03.680
这个对象在不在

45:03.680 --> 45:04.320
它在

45:04.320 --> 45:05.680
它在内存里边

45:05.680 --> 45:08.880
但是没有任何东西持有它的引用了

45:08.880 --> 45:10.080
已经没有任何

45:10.080 --> 45:11.640
有法通过任何代码

45:11.640 --> 45:12.920
能够找到这个对象了

45:12.920 --> 45:15.600
那么这个对象就是垃圾

45:15.680 --> 45:22.260
这个对象就被标记为垃圾

45:22.260 --> 45:23.260
这就是垃圾

45:23.260 --> 45:24.900
因为你找不到这个对象了

45:24.900 --> 45:26.420
于是既然是执行引擎

45:26.420 --> 45:28.580
它一个东西叫做垃圾回收器

45:28.580 --> 45:33.780
一个东西叫做垃圾回收器

45:33.780 --> 45:34.940
垃圾回收器

45:34.940 --> 45:37.020
这样子说更加准确一点

45:37.020 --> 45:41.040
垃圾回收器

45:41.040 --> 45:42.400
垃圾回收器

45:44.480 --> 45:46.040
它会在合适的时间

45:46.040 --> 45:47.680
找到这些垃圾对象

45:47.680 --> 45:49.880
把它清除掉

45:49.880 --> 45:51.280
于是这个对象很快就消失了

45:52.080 --> 45:52.840
你看这个意思吧

45:53.840 --> 45:56.760
这就是垃圾回收器的作用

45:56.760 --> 45:57.520
有的时候

45:57.520 --> 46:00.160
它的情况可能更加繁确一点

46:00.160 --> 46:01.120
可能更加繁确一点

46:01.120 --> 46:02.920
别忘了这里还有一个属性

46:02.920 --> 46:04.000
叫做sub

46:04.000 --> 46:05.320
sub这个属性

46:05.320 --> 46:06.560
sub这个属性

46:06.560 --> 46:07.760
它也是个对象

46:07.760 --> 46:09.520
s里边随便写

46:09.520 --> 46:11.160
有sub这个属性

46:11.160 --> 46:11.480
好

46:11.480 --> 46:13.120
接下来我们再看一下这种情况

46:13.120 --> 46:14.480
这种情况是什么人存结构

46:15.280 --> 46:15.920
我们之前讲过

46:15.920 --> 46:16.400
对吧

46:16.400 --> 46:17.200
讲过

46:17.200 --> 46:18.640
这里边又有出现一个对象

46:18.640 --> 46:20.640
它里边有个就是s

46:20.640 --> 46:22.800
abcd

46:22.800 --> 46:23.760
是这样写吧

46:23.760 --> 46:24.960
这个

46:24.960 --> 46:30.320
有这么一个属性

46:30.320 --> 46:32.400
然后这里有一个属性叫sub

46:32.400 --> 46:39.040
sub指向这一块空间

46:39.040 --> 46:40.600
指向这一块空间

46:40.600 --> 46:41.880
指向这

46:41.880 --> 46:43.080
好

46:43.080 --> 46:44.280
它现在是不是垃圾

46:44.280 --> 46:45.400
它现在不是垃圾

46:45.400 --> 46:46.800
它还能找到

46:46.800 --> 46:48.280
能通过它来找到

46:48.280 --> 46:50.560
但是由于它也找不到了

46:50.560 --> 46:52.400
它本身就找不到了

46:52.400 --> 46:53.600
而这个玩意

46:53.680 --> 46:55.480
它只能通过它来找到

46:55.480 --> 46:56.840
能理解吧

46:56.840 --> 46:59.120
这个东西目前是不是只能通过它来找到

46:59.120 --> 47:00.800
但是它已经找不到了

47:00.800 --> 47:02.520
所以说同时

47:02.520 --> 47:04.800
它也被标记成垃圾了

47:04.800 --> 47:06.440
这两个类伸都会成为垃圾

47:06.440 --> 47:08.040
到时候回收的时候会一起回收

47:09.520 --> 47:09.720
好

47:09.720 --> 47:11.880
但是如果你这样子写就不一样了

47:13.000 --> 47:14.440
看着

47:14.440 --> 47:18.680
tempobc.sub

47:18.680 --> 47:20.120
你这样子写就不一样了

47:20.120 --> 47:22.600
这样子写的过后又多了一个变量

47:22.680 --> 47:23.600
又多了一个变量

47:25.040 --> 47:26.360
就是temp

47:26.360 --> 47:27.120
这个变量

47:28.560 --> 47:28.760
好

47:28.760 --> 47:29.840
这个变量

47:29.840 --> 47:31.160
能够

47:31.160 --> 47:32.040
是不是也能找到

47:33.680 --> 47:34.800
这个变量是不是也能找到

47:35.800 --> 47:37.040
这个就是这个对象

47:37.040 --> 47:37.640
对吧

47:37.640 --> 47:39.080
它也能找到这个对象

47:39.080 --> 47:40.200
所以说这个时候

47:40.200 --> 47:41.200
它能不能是垃圾

47:41.200 --> 47:42.400
它就不能是垃圾了

47:42.400 --> 47:43.240
它是垃圾

47:43.240 --> 47:43.840
它找不到了

47:43.840 --> 47:45.520
你永远无法找到它了

47:45.520 --> 47:46.600
找不到它

47:46.600 --> 47:48.600
但是你是不是可以找到它

47:48.600 --> 47:49.120
对不对

47:49.120 --> 47:50.280
可以找到它吧

47:50.280 --> 47:50.800
因此

47:50.800 --> 47:52.480
它就不是垃圾

47:52.480 --> 47:53.440
它就不是垃圾

47:53.440 --> 47:54.520
到时候回收的时候

47:54.520 --> 47:55.960
只会回收掉它

47:55.960 --> 47:57.320
它里面东西没了

47:57.320 --> 47:59.120
但是它的东西还在

47:59.120 --> 48:00.480
另外这个意思吧

48:00.480 --> 48:03.320
这些事情是垃圾回收器自动完成的

48:03.320 --> 48:04.120
自动完成的

48:04.120 --> 48:05.320
你都感觉不到

48:05.320 --> 48:07.040
你反正你感觉到的是啥呢

48:07.040 --> 48:08.480
感觉到我能找到对象

48:08.480 --> 48:09.800
我一定能用

48:09.800 --> 48:10.760
我找不到对象

48:10.760 --> 48:11.560
我不管

48:11.560 --> 48:14.320
它过一会内存自然就给你消灭了

48:14.320 --> 48:15.440
在内存里面自己给消灭了

48:15.440 --> 48:16.240
因为你找不到嘛

48:16.240 --> 48:17.800
你永远不可能找到的

48:17.800 --> 48:20.200
这就是垃圾回收器它的作用

48:20.200 --> 48:21.920
以它的特点

48:21.960 --> 48:23.680
把这个地方扩展一下知识

48:25.520 --> 48:28.240
咱们这些课就说的差不多了

48:28.240 --> 48:29.160
说的差不多了

48:29.160 --> 48:31.400
这里我之前想起了个事

48:31.400 --> 48:32.120
想起了个事

48:32.120 --> 48:35.160
我把这个PBT保存过来

48:35.160 --> 48:36.280
方便你们看得到

48:37.800 --> 48:38.400
放在这

48:39.600 --> 48:41.480
我之前想起了一个事

48:42.440 --> 48:43.200
我没有说

48:43.200 --> 48:44.560
其实有很简单的事情

48:46.680 --> 48:47.440
补充一下

48:47.440 --> 48:48.280
补充一下

48:50.950 --> 48:52.110
这里有个补充知识

48:53.070 --> 48:53.830
不是本节课的

48:53.830 --> 48:54.350
不是本节课的

48:54.350 --> 48:56.630
之前的补充

48:56.630 --> 48:58.910
应该是在上节课的时候讲的

48:58.910 --> 49:02.110
就是在节识中

49:02.110 --> 49:08.230
变量生命可以不写

49:08.230 --> 49:09.830
不写罢

49:09.830 --> 49:10.710
可以不写罢

49:12.750 --> 49:14.150
也不能这样说

49:14.150 --> 49:15.670
不能说变量生命可以不写罢

49:15.670 --> 49:18.190
就是变量在使用时

49:18.190 --> 49:19.350
在使用时

49:20.430 --> 49:21.710
可以不写罢

49:21.710 --> 49:22.670
不写罢的话

49:22.670 --> 49:24.190
相当于是什么

49:24.190 --> 49:27.030
不写罢

49:27.030 --> 49:29.350
相当就是直接复制

49:30.550 --> 49:32.550
相当于是

49:32.550 --> 49:34.630
相当于给温斗

49:34.630 --> 49:38.510
就是全球对象温斗的某个属性

49:38.510 --> 49:40.350
直接复制

49:40.350 --> 49:42.390
在节识里面是可以运行这样做的

49:42.390 --> 49:44.830
这个地方也是容易出面是提的

49:44.830 --> 49:47.350
但是我不建议大家

49:47.350 --> 49:48.150
不说不建议了

49:48.150 --> 49:49.990
就不准大家这样子写代

49:49.990 --> 49:51.110
一定不能这样写代

49:51.150 --> 49:52.270
我们说过节识语言

49:52.270 --> 49:53.630
他有很多历史疑惑的问题

49:53.630 --> 49:55.190
他太过于灵活了

49:55.190 --> 49:56.990
太过于灵活就会导致我们写代

49:56.990 --> 49:57.790
没有约束

49:57.790 --> 49:58.710
没有脏法

49:58.710 --> 49:59.830
写的乱七八糟的

49:59.830 --> 50:01.110
所以说我们以后到公司里面

50:01.110 --> 50:02.750
会有很多很多的约束

50:02.750 --> 50:04.390
有一篇文档

50:04.390 --> 50:05.270
或者是一个手册

50:05.270 --> 50:06.390
公司里面会告诉你

50:06.390 --> 50:07.350
甚至有些工具

50:07.350 --> 50:08.510
我们知晓学习

50:08.510 --> 50:09.430
为了把框架的时候

50:09.430 --> 50:10.590
会介绍一些工具

50:10.590 --> 50:11.470
一些插件

50:11.470 --> 50:12.630
他就不准你写某些代码

50:12.630 --> 50:13.590
就不准你写

50:13.590 --> 50:14.790
因为这样的写出来代码

50:14.790 --> 50:15.510
既丑陋

50:15.510 --> 50:16.190
又不规范

50:16.230 --> 50:17.350
而且容易出问题

50:17.350 --> 50:19.510
没有任何道理可以要这样子写

50:19.510 --> 50:20.630
但是我这里要说一下

50:20.630 --> 50:22.190
结识是允许这样子写的

50:22.190 --> 50:23.510
比方说我这里有个辩量

50:23.510 --> 50:25.310
我可以给他直接复制为一

50:25.310 --> 50:26.870
你看我声明辩量了吗

50:26.870 --> 50:27.990
都没有声明对吧

50:27.990 --> 50:28.750
都没有声明

50:28.750 --> 50:31.510
在很多语言里面都是不准这样做的

50:31.510 --> 50:34.030
由于结识与历史疑惑问题

50:34.030 --> 50:35.710
因为他单身的时候

50:35.710 --> 50:38.390
他想把这个语言尽量的简单

50:38.390 --> 50:41.430
所以说允许这些很灵活的事情发生

50:41.430 --> 50:43.190
我们来输出

50:43.190 --> 50:44.790
再输出一个温豆点

50:44.790 --> 50:46.550
你看一下

50:46.550 --> 50:47.630
你会发现是没问题的

50:50.190 --> 50:50.950
你看一下

50:50.950 --> 50:51.550
扬都是一

50:51.550 --> 50:52.030
看到没有

50:52.030 --> 50:54.110
温豆里面出了一个属性

50:54.110 --> 50:55.470
就是A

50:55.470 --> 50:57.390
这里顺便说一下

50:57.390 --> 50:58.950
当然我们今天讲的课程

50:58.950 --> 51:01.950
这些辩量也都是附着在温豆对象上面的

51:01.950 --> 51:03.590
比方说看OB接

51:03.590 --> 51:05.590
看OB接

51:05.590 --> 51:07.990
我们这里打印出

51:07.990 --> 51:09.870
比方说这个特色5

51:09.870 --> 51:12.190
特色4

51:12.190 --> 51:14.430
特色4我们再打印出

51:14.430 --> 51:16.310
打印出温豆对象

51:16.310 --> 51:17.510
看一下

51:17.510 --> 51:19.310
这些东西都是附着在温豆对象上面的

51:19.310 --> 51:20.430
你看

51:20.430 --> 51:21.110
温豆对象里面

51:21.110 --> 51:21.750
你看一下

51:21.750 --> 51:24.430
找到肯定是有个OB接

51:24.430 --> 51:25.430
OB接1

51:25.430 --> 51:26.310
你看是不是对象

51:26.310 --> 51:28.710
说明这个属性里面是不是存了地址

51:28.710 --> 51:29.550
存了地址

51:29.550 --> 51:31.230
地址指向这块对象

51:31.230 --> 51:32.710
这个对象里面又有一个属性

51:32.710 --> 51:33.950
这个属性又是个地址

51:33.950 --> 51:35.430
它又指向这块对象

51:35.430 --> 51:36.070
你看看

51:36.070 --> 51:38.510
你可以用这种方式来想

51:38.510 --> 51:41.270
这是本节课要讲的东西

51:41.270 --> 51:42.150
本节课讲完了

51:42.150 --> 51:44.110
讲完了

51:44.150 --> 51:46.230
那么这里我们看一下几个练习题

51:46.230 --> 51:47.430
有三张练习题

51:47.430 --> 51:48.670
大家来做一下

51:48.670 --> 51:49.670
做一下

51:51.270 --> 51:52.270
看一下这个题

51:52.270 --> 51:53.470
第一题

51:53.470 --> 51:54.470
我喝口水

51:54.470 --> 52:02.700
看一下

52:02.700 --> 52:04.460
这是一个

52:04.460 --> 52:08.500
中国乡旗一个小游戏的一个代码片段

52:08.500 --> 52:10.300
假设它是个代码片段

52:10.300 --> 52:11.780
中国乡旗有没有效果

52:11.780 --> 52:12.540
没关系

52:12.540 --> 52:13.620
这个都不影响啥的

52:13.620 --> 52:14.140
不影响啥

52:14.140 --> 52:15.740
我也解释一下

52:15.740 --> 52:18.180
中国乡旗里面有很多旗子

52:18.180 --> 52:19.700
它就摆在这个旗盘上面

52:19.700 --> 52:20.980
每个就在这里

52:21.020 --> 52:21.660
在这个位置

52:21.660 --> 52:22.340
这个位置

52:22.340 --> 52:23.180
摆一个旗子

52:23.180 --> 52:23.900
旗子

52:23.900 --> 52:25.500
我给大家看一下

52:25.500 --> 52:28.340
这是我以前做的一个中国乡旗的一个小游戏

52:29.340 --> 52:30.460
当然我不是用介石做的

52:30.460 --> 52:31.180
介石可不可以做

52:31.180 --> 52:32.140
当然可以做

52:32.140 --> 52:33.300
当然可以做

52:33.300 --> 52:34.980
就这个

52:34.980 --> 52:38.760
看一下

52:38.760 --> 52:39.640
你看

52:39.640 --> 52:40.680
这个旗子就摆在这

52:40.680 --> 52:41.880
就摆在这

52:41.880 --> 52:44.920
就摆在这些交叉的地方

52:44.920 --> 52:46.320
我来了解一下就行了

52:46.320 --> 52:46.760
了解一下

52:46.760 --> 52:47.800
这个无所谓

52:47.800 --> 52:48.840
我们看到主要是那个

52:48.840 --> 52:49.680
主要是语法

52:49.680 --> 52:50.840
语法

52:50.840 --> 52:52.480
现在呢

52:52.520 --> 52:54.240
现在啥呢

52:54.240 --> 52:55.760
有这么一个对象

52:55.760 --> 52:57.440
他要创建四匹马

52:57.440 --> 52:58.640
因为他旗子里边

52:58.640 --> 53:00.680
旗盘里边有四个旗子

53:00.680 --> 53:01.920
就是都叫什么马

53:01.920 --> 53:02.760
都叫什么马

53:02.760 --> 53:05.480
但是他们的位置和颜色不一样

53:05.480 --> 53:05.800
你看

53:07.000 --> 53:07.720
这是一匹马

53:07.720 --> 53:08.520
看到没

53:08.520 --> 53:09.560
这是一匹马

53:09.560 --> 53:10.200
这是一匹马

53:10.200 --> 53:11.320
这是一匹马

53:11.320 --> 53:12.680
这有四匹马

53:12.680 --> 53:14.640
他们的颜色和位置不一样

53:14.640 --> 53:16.920
我这程序好像做了一点问题

53:16.920 --> 53:18.480
这个文字

53:18.480 --> 53:19.560
这个文字

53:19.560 --> 53:20.720
我是对对对

53:20.760 --> 53:21.920
当时的图片

53:21.920 --> 53:23.120
图片上的文字不太对

53:23.120 --> 53:25.000
我们办法找不到合适的素材了

53:25.000 --> 53:26.720
其实这个马的文字是不一样的

53:26.720 --> 53:27.480
有些是反体

53:27.480 --> 53:28.560
有些是简体

53:28.560 --> 53:29.800
是不一样的

53:29.800 --> 53:30.800
这不太一样的

53:30.800 --> 53:32.720
你看像这个项和这个项

53:32.720 --> 53:34.080
文字是不太一样的

53:34.080 --> 53:36.400
这个帅和酱

53:36.400 --> 53:39.440
马这一块我们假设

53:39.440 --> 53:40.720
假设他的文字是不一样的

53:40.720 --> 53:41.760
好像马式一样的

53:41.760 --> 53:42.920
我一点忘了

53:42.920 --> 53:43.360
无所谓

53:43.360 --> 53:44.680
这个不重要

53:44.680 --> 53:45.560
总之有四匹马

53:45.560 --> 53:46.840
他们摆在不同的位置

53:46.840 --> 53:49.640
所以说每匹马是一个对象

53:49.680 --> 53:51.360
我们要创建四个马的对象

53:51.360 --> 53:53.240
为了创建方便

53:53.240 --> 53:54.080
我们就这样的写代

53:54.080 --> 53:56.840
大家看一下代码会不会有问题

53:56.840 --> 53:57.800
Horse

53:57.800 --> 53:58.920
第一匹马

53:58.920 --> 54:00.760
他的名字叫做马

54:00.760 --> 54:02.800
他的位置在哪呢

54:02.800 --> 54:04.280
横坐标在1

54:04.280 --> 54:05.600
重坐标在9

54:05.600 --> 54:07.000
其实你都不用去care他的

54:07.000 --> 54:08.400
什么具体的位置在哪

54:08.400 --> 54:09.760
其实这个东西都无所谓

54:09.760 --> 54:10.840
无所谓的

54:10.840 --> 54:12.360
我们又不去做这个游戏

54:12.360 --> 54:13.480
只剩下了解一下

54:13.480 --> 54:14.880
这里一个对象

54:14.880 --> 54:15.680
横坐标是1

54:15.680 --> 54:16.320
重坐标是9

54:16.320 --> 54:16.800
是怎么回事

54:16.800 --> 54:17.760
我说一下

54:17.760 --> 54:19.240
横坐标是啥了啥了

54:19.280 --> 54:21.240
就这边横坐标是从0开始

54:21.240 --> 54:25.160
0 1 2 3 4 5 6 7 8

54:25.160 --> 54:26.560
重坐标是从上到下

54:26.560 --> 54:30.320
跟ATM和CSX的那种坐标系是差不多的

54:30.320 --> 54:36.960
从上到下0 1 2 3 4 5 6 7 8 9

54:36.960 --> 54:38.960
马就是1 9

54:38.960 --> 54:39.920
X为1 9

54:39.920 --> 54:40.800
这个东西不重要

54:40.800 --> 54:41.240
无所谓

54:41.240 --> 54:42.680
他写啥都无所谓

54:42.680 --> 54:43.960
跟我们这个题面关系

54:43.960 --> 54:46.080
好马的颜色的是红色

54:46.080 --> 54:46.880
马的颜色是红色

54:46.880 --> 54:47.840
我是红方在下

54:47.840 --> 54:49.120
我是红方在下

54:49.160 --> 54:50.120
这个无所谓

54:50.120 --> 54:51.560
无所谓不重要

54:51.560 --> 54:53.080
这是第一匹马

54:53.080 --> 54:54.320
第二匹马

54:54.320 --> 54:56.440
我把第一匹马负责给第二匹马

54:56.440 --> 54:57.720
然后把第二匹马的

54:57.720 --> 54:59.120
就是位置改一下

54:59.120 --> 55:00.640
改成7

55:00.640 --> 55:03.680
然后我再把第一匹马负责给第三匹马

55:03.680 --> 55:04.800
定一个新的辨量

55:04.800 --> 55:06.640
然后把名字改一下

55:06.640 --> 55:08.040
然后颜色改一下

55:08.040 --> 55:09.680
然后位置改一下

55:09.680 --> 55:12.040
然后我再把第三匹马

55:12.040 --> 55:13.360
负责给第四匹马

55:13.360 --> 55:14.480
把位置改一下

55:14.480 --> 55:15.000
首先说

55:15.000 --> 55:16.080
这样子写程序行不行

55:16.080 --> 55:18.600
你甭管这是是不是中国象棋不重要

55:18.600 --> 55:19.920
总之他有四匹马

55:19.920 --> 55:22.000
你这样子写程序行不行

55:22.000 --> 55:23.080
你就告诉我行不行就行了

55:24.760 --> 55:25.320
行不行

55:26.480 --> 55:28.720
肯定是不行的

55:28.720 --> 55:30.640
为什么不行啊

55:30.640 --> 55:33.280
你看一下你整个蛋把创建了几个对象

55:33.280 --> 55:33.960
创建了几个

55:34.960 --> 55:36.560
所以就创建了两个

55:36.560 --> 55:37.440
对吧

55:37.440 --> 55:38.240
这是一个对象

55:39.280 --> 55:40.240
这是一个对象

55:40.240 --> 55:41.520
就创建了两个对象

55:41.520 --> 55:42.440
还创建了别的对象吗

55:42.440 --> 55:43.400
没有

55:43.400 --> 55:44.560
只创建了两个对象

55:44.560 --> 55:45.960
如果我们只看马的话

55:45.960 --> 55:46.480
不看这个

55:46.480 --> 55:47.680
不看什么就是

55:47.680 --> 55:48.520
不看什么位置

55:48.520 --> 55:49.560
把它当成对象的话

55:49.560 --> 55:50.320
只看马

55:50.320 --> 55:51.680
只看马

55:51.680 --> 55:53.760
那么只看马的话就一个对象

55:53.760 --> 55:54.440
对吧

55:54.440 --> 55:55.920
就一个对象

55:55.920 --> 55:57.160
而我们这里有四匹马

55:57.160 --> 55:59.000
是不是应该有四个对象

55:59.000 --> 56:00.880
但是你这里是不是只创建了一个

56:00.880 --> 56:01.960
你翻来覆去用的

56:01.960 --> 56:03.360
是不是都是同一个对象

56:03.360 --> 56:04.440
因此你改来改去

56:04.440 --> 56:04.960
改了啥呢

56:04.960 --> 56:06.200
改的是同一个对象

56:06.200 --> 56:07.920
那还是四匹马

56:07.920 --> 56:09.080
只有一匹马

56:09.080 --> 56:10.920
所以这样写蛋吧肯定是不行的

56:10.920 --> 56:12.240
他导致的结果是啥呢

56:12.240 --> 56:14.760
导致的结果就是这些马

56:14.760 --> 56:16.360
二十一

56:16.360 --> 56:17.320
随便找个属性吧

56:17.360 --> 56:18.120
随便找个属性

56:18.120 --> 56:19.720
都是全是一样的

56:19.720 --> 56:20.800
全是一样的

56:20.800 --> 56:21.960
Horse2

56:21.960 --> 56:22.880
你别小看这东西

56:22.880 --> 56:24.560
这是很多人都会容易犯的错误

56:24.560 --> 56:28.680
Color Horse4

56:28.680 --> 56:32.180
Color

56:32.180 --> 56:32.820
看一下

56:32.820 --> 56:33.780
运行

56:33.780 --> 56:34.900
绝对全是一样的

56:34.900 --> 56:36.020
因为他们全是同一个对象

56:36.020 --> 56:37.900
你看全是黑色了

56:37.900 --> 56:38.860
全是同一个对象

56:38.860 --> 56:39.580
改来改去

56:39.580 --> 56:40.620
改的都是同一个

56:40.620 --> 56:42.620
所以说肯定是不行的

56:42.620 --> 56:43.420
问题在哪呢

56:43.420 --> 56:45.700
问题他们使用的是同一个对象

56:45.700 --> 56:46.820
那么真实的写

56:46.820 --> 56:47.620
该怎么写的

56:47.700 --> 56:48.900
你在牢牢时时的

56:48.900 --> 56:50.620
给我一个一个去创建

56:50.620 --> 56:52.980
你在牢牢时时一个一个去创建

56:52.980 --> 56:53.740
不能偷懒

56:53.740 --> 56:54.500
当然我们以后

56:54.500 --> 56:55.860
学习了一些知识过后了

56:55.860 --> 56:57.260
我们会用到一个东西叫做

56:57.260 --> 56:59.020
叫做对象克龙

56:59.020 --> 57:00.740
我们会写一个函数

57:00.740 --> 57:02.060
来完成个克龙

57:02.060 --> 57:03.460
就产生一个新的对象

57:03.460 --> 57:05.140
这个对象跟之前的对象一模一样

57:05.140 --> 57:07.580
但是一定是个新的对象

57:07.580 --> 57:09.740
它不能直接用原来的对象

57:09.740 --> 57:10.900
这是第一个联系题

57:12.140 --> 57:13.380
第二个联系题

57:13.380 --> 57:14.420
就是说结果了

57:14.420 --> 57:15.260
说结果

57:15.260 --> 57:15.780
看一下呗

57:16.780 --> 57:20.940
结果是啥

57:20.940 --> 57:21.740
看一下

57:23.260 --> 57:25.380
都是我们课堂上一些都做过的

57:25.380 --> 57:26.660
都做过的

57:26.660 --> 57:27.700
结果是啥呢

57:30.800 --> 57:31.760
画图啊

57:31.760 --> 57:32.680
一定要画图

57:32.680 --> 57:33.200
你不画图

57:33.200 --> 57:34.840
你怎么解的那种题啊

57:34.840 --> 57:36.440
一定要去画图啊

57:36.880 --> 57:37.720
我不画了

57:37.720 --> 57:38.720
也不要等着我画

57:38.720 --> 57:39.360
我不画了

57:39.360 --> 57:39.880
我不画了

57:39.880 --> 57:41.040
就要等你们画

57:41.040 --> 57:42.640
就要等你们画

57:42.640 --> 57:44.320
因为之前的图已经画了够多了

57:44.320 --> 57:46.320
但是你们已经教教你们怎么画图了

57:46.320 --> 57:47.280
你要解这些题

57:47.280 --> 57:48.560
不画图怎么解呢

57:48.560 --> 57:49.800
特别是初学者

57:49.840 --> 57:51.520
本来老科就晕

57:51.520 --> 57:52.040
对吧

57:52.040 --> 57:53.960
听来听去本来就有点晕

57:53.960 --> 57:54.880
你还要去解这种题

57:54.880 --> 57:55.640
根本就解不

57:55.640 --> 57:56.720
很难解得出来

57:56.720 --> 57:57.280
当然不是排除

57:57.280 --> 57:58.640
有些同学能解出来

57:58.640 --> 57:59.520
尽量画图

57:59.520 --> 58:00.200
不要偷懒

58:00.200 --> 58:01.120
因为你画着画着

58:01.120 --> 58:03.120
你头脑里面自然就形成了这幅图了

58:03.120 --> 58:03.880
现在我闭上眼睛

58:03.880 --> 58:04.640
我不用画

58:04.640 --> 58:07.080
我头脑里面已经把图形就形成出来了

58:07.080 --> 58:09.120
因为画了太多次了

58:09.120 --> 58:11.750
说出啥啊

58:12.870 --> 58:14.870
公布答案啊

58:14.870 --> 58:16.350
公布答案

58:16.350 --> 58:16.790
我看一下

58:16.790 --> 58:17.990
我先看一下

58:17.990 --> 58:18.990
我没看题

58:18.990 --> 58:19.350
OK

58:19.350 --> 58:20.470
我先看一下

58:21.430 --> 58:22.150
OB界2

58:22.150 --> 58:22.990
OB界1

58:22.990 --> 58:24.670
OB界1

58:24.670 --> 58:26.070
OK

58:26.070 --> 58:27.230
说出P3

58:27.230 --> 58:29.780
P3

58:29.780 --> 58:33.800
看一下啊

58:33.800 --> 58:34.560
雅兜是P3

58:34.560 --> 58:35.760
对吧

58:35.760 --> 58:37.160
为什么呢

58:37.160 --> 58:38.080
为什么呢

58:38.080 --> 58:39.240
算了

58:39.240 --> 58:40.000
我怎么符合你们呢

58:40.000 --> 58:42.820
我还是画图吧

58:42.820 --> 58:45.600
还是画一下图吧

58:45.600 --> 58:46.520
一定要画图

58:46.520 --> 58:47.320
一定要画图

58:48.840 --> 58:50.200
第一个OB界1

58:50.200 --> 58:51.040
它指向一个对象

58:51.040 --> 58:51.640
对吧

58:51.640 --> 58:52.120
指向一个对象

58:52.120 --> 58:52.560
来

58:52.560 --> 58:53.440
写一下

58:53.440 --> 58:54.480
OB界1

58:54.480 --> 58:55.240
指向一个对象

58:55.960 --> 58:57.760
指向一个对象

58:57.760 --> 58:58.880
好

58:58.880 --> 59:00.440
这个对象里边有哪些东西呢

59:00.440 --> 59:01.920
有哪些东西呢

59:01.920 --> 59:02.800
有什么呢

59:02.800 --> 59:04.560
有A

59:04.560 --> 59:06.320
A的指是A1

59:06.320 --> 59:07.320
A1

59:07.320 --> 59:08.040
然后呢

59:08.040 --> 59:09.240
subOB界

59:09.240 --> 59:10.840
就这个

59:10.840 --> 59:13.160
指对象

59:13.160 --> 59:14.040
指对象

59:14.040 --> 59:14.880
subOB界

59:14.880 --> 59:15.920
它是个地址对吧

59:15.920 --> 59:16.800
它是一个地址

59:16.800 --> 59:18.240
它有指向另外一个对象

59:18.240 --> 59:18.840
OK

59:18.840 --> 59:20.040
它有指向另外一个对象

59:20.040 --> 59:21.320
另外一个对象里边是

59:21.320 --> 59:22.880
属性是P

59:23.880 --> 59:28.980
P

59:28.980 --> 59:29.340
然后呢

59:29.340 --> 59:30.180
这里

59:30.180 --> 59:30.660
指向过

59:30.660 --> 59:33.780
指过来

59:33.780 --> 59:35.380
形成这么一种结构

59:35.380 --> 59:35.580
好

59:35.580 --> 59:36.340
接下来呢

59:36.340 --> 59:37.780
OB界2是不是一个新的对象了

59:37.780 --> 59:38.860
跟之前有没有关系

59:38.860 --> 59:39.940
没有任何关系

59:39.940 --> 59:41.420
毛关系没有

59:41.420 --> 59:43.100
OB界2又是个新的对象了

59:43.100 --> 59:44.620
这个东西我直接复制过来

59:44.620 --> 59:46.100
直接复制过来

59:46.100 --> 59:47.740
一个新的对象

59:47.740 --> 59:49.020
一个新的对象

59:49.020 --> 59:49.140
好

59:49.140 --> 59:50.220
这里

59:50.220 --> 59:51.620
新的对象

59:51.620 --> 59:51.820
好

59:51.820 --> 59:53.580
新的对象里边A是多好了

59:53.580 --> 59:55.380
A2

59:55.380 --> 59:56.980
然后subOB界呢

59:56.980 --> 59:58.100
是另外一个新的对象

59:58.100 --> 59:59.100
又是个新的对象

59:59.100 --> 59:59.580
prob

59:59.580 --> 01:00:00.500
P2

01:00:00.500 --> 01:00:00.940
prob

01:00:00.940 --> 01:00:02.300
P2

01:00:02.300 --> 01:00:02.420
好

01:00:02.420 --> 01:00:03.980
变成这个样子了

01:00:03.980 --> 01:00:04.180
好

01:00:04.180 --> 01:00:05.580
接下来呢

01:00:05.580 --> 01:00:08.300
现在把OB界1的subOB界

01:00:08.300 --> 01:00:11.420
复制给OB界2的subOB界

01:00:11.420 --> 01:00:13.220
啥意思

01:00:13.220 --> 01:00:16.020
把OB界1的subOB界

01:00:16.020 --> 01:00:17.700
这个地址对吧

01:00:17.700 --> 01:00:20.860
复制给OB界2

01:00:20.860 --> 01:00:23.340
复制给OB界2的subOB界

01:00:23.380 --> 01:00:25.660
那么现在把它的地址复制过来

01:00:25.660 --> 01:00:28.780
那么现在这个地址是不是指向它了

01:00:28.780 --> 01:00:29.300
对吧

01:00:29.300 --> 01:00:30.260
指向它了

01:00:30.260 --> 01:00:31.700
那这个玩意还能找到吗

01:00:31.700 --> 01:00:32.660
找不到了

01:00:32.660 --> 01:00:34.340
找不到是啥

01:00:34.340 --> 01:00:34.820
是啥

01:00:34.820 --> 01:00:35.980
是不是垃圾

01:00:35.980 --> 01:00:37.140
很快就会被毁收掉

01:00:37.140 --> 01:00:38.220
我们不用管

01:00:38.220 --> 01:00:40.140
接下来毁收器就开始启动了

01:00:40.140 --> 01:00:41.620
一个机器人跑着跑着

01:00:41.620 --> 01:00:42.060
诶

01:00:42.060 --> 01:00:42.940
垃圾快过来

01:00:42.940 --> 01:00:44.060
快过来到我玩里来

01:00:44.060 --> 01:00:46.340
那就把毁收走了

01:00:46.340 --> 01:00:46.580
好

01:00:46.580 --> 01:00:49.580
这是变成这么一种内存结构了

01:00:49.580 --> 01:00:50.620
接下来又来

01:00:50.660 --> 01:00:53.540
OB界2的subOB界prob

01:00:53.540 --> 01:00:54.620
改的是啥

01:00:54.620 --> 01:00:55.580
改的这个玩意儿

01:00:55.580 --> 01:00:56.380
把改成p3

01:00:56.380 --> 01:00:58.140
那是两个都变成p3了

01:00:58.140 --> 01:00:59.540
对不对

01:00:59.540 --> 01:01:01.420
你只要用这种方式来进行分析

01:01:01.420 --> 01:01:02.700
进行分析

01:01:02.700 --> 01:01:02.820
好

01:01:02.820 --> 01:01:04.900
这是第二道题

01:01:04.900 --> 01:01:06.100
第三题

01:01:06.100 --> 01:01:07.380
看一下

01:01:07.380 --> 01:01:08.660
很简单

01:01:08.660 --> 01:01:09.940
这个也不是很简单了

01:01:09.940 --> 01:01:11.060
这个不是很简单了

01:01:11.060 --> 01:01:12.140
好好看一下

01:01:16.940 --> 01:01:21.860
它让你把这个对象里边的parent这个属像

01:01:21.900 --> 01:01:24.380
和这个child的这个属像互换

01:01:24.380 --> 01:01:26.700
两个的值负互换

01:01:26.700 --> 01:01:28.340
不可以创建新对象

01:01:29.740 --> 01:01:29.940
好

01:01:29.940 --> 01:01:30.900
这里有一个知识

01:01:30.900 --> 01:01:32.460
大家也不知道知识

01:01:32.460 --> 01:01:33.220
有一个技巧

01:01:33.220 --> 01:01:35.700
大家可能之前没有做练习

01:01:35.700 --> 01:01:37.060
做练习没有做过

01:01:37.060 --> 01:01:37.940
我这里说一下

01:01:37.940 --> 01:01:41.020
这里说一下在前面

01:01:41.020 --> 01:01:43.260
之前我忘了出这个练习题了

01:01:43.260 --> 01:01:45.060
这个练习题应该一开始要出的

01:01:45.060 --> 01:01:45.980
就是也很简单

01:01:45.980 --> 01:01:47.260
很简单的练习题

01:01:47.260 --> 01:01:48.140
有两个变量

01:01:48.140 --> 01:01:49.300
有两个变量

01:01:49.300 --> 01:01:50.340
我们比方说

01:01:50.340 --> 01:01:52.100
变量A那等于3

01:01:52.100 --> 01:01:53.580
变量B那等于5

01:01:53.580 --> 01:01:54.660
然后这里有个例子

01:01:54.660 --> 01:01:56.700
将两个变量

01:01:56.700 --> 01:01:59.140
两个变量交换

01:01:59.140 --> 01:02:00.500
两个变量交换

01:02:00.500 --> 01:02:01.780
怎么交换呢

01:02:01.780 --> 01:02:03.540
就好比是两杯水

01:02:03.540 --> 01:02:04.540
有两杯水

01:02:04.540 --> 01:02:05.340
倒满了杯子

01:02:05.340 --> 01:02:07.300
倒满了水的两杯水

01:02:07.300 --> 01:02:08.860
两个杯子

01:02:08.860 --> 01:02:11.860
你要把两杯水的水交换

01:02:11.860 --> 01:02:12.700
变量就是杯子

01:02:12.700 --> 01:02:13.620
水就是内容

01:02:13.620 --> 01:02:14.220
对吧

01:02:14.220 --> 01:02:16.900
你要把这两个杯子的水交换

01:02:16.900 --> 01:02:18.900
是不是需要第三个杯子

01:02:18.900 --> 01:02:20.380
不然咋交换了

01:02:20.380 --> 01:02:20.820
对吧

01:02:20.900 --> 01:02:22.100
不能咋交换了

01:02:22.100 --> 01:02:23.820
比方说

01:02:23.820 --> 01:02:25.140
第一个杯子

01:02:25.140 --> 01:02:26.700
第一个杯子是A

01:02:26.700 --> 01:02:27.980
里面倒满了水

01:02:27.980 --> 01:02:29.180
第二个杯子是B

01:02:29.180 --> 01:02:30.660
它倒满了水

01:02:30.660 --> 01:02:32.820
那么要把这两个杯子的水交换

01:02:32.820 --> 01:02:33.900
怎么交换

01:02:33.900 --> 01:02:35.300
需要准备一个杯子

01:02:35.300 --> 01:02:35.580
对吧

01:02:35.580 --> 01:02:37.060
C 空杯子

01:02:37.060 --> 01:02:37.500
对吧

01:02:37.500 --> 01:02:38.580
空杯子

01:02:38.580 --> 01:02:42.860
然后先把什么A的水

01:02:42.860 --> 01:02:44.900
先把什么A的水

01:02:44.900 --> 01:02:46.140
脑袋里面想

01:02:46.140 --> 01:02:47.300
我就不画图了

01:02:47.300 --> 01:02:48.860
这个东西就不画图了

01:02:48.860 --> 01:02:49.620
有想两个杯子

01:02:49.620 --> 01:02:51.380
里面装满的水要交换

01:02:51.380 --> 01:02:52.140
一个空杯子

01:02:52.140 --> 01:02:53.940
先把A的水倒到C里面

01:02:53.940 --> 01:02:54.980
倒到个空杯子里面

01:02:54.980 --> 01:02:55.780
对吧

01:02:55.780 --> 01:02:56.420
空杯子里面

01:02:56.420 --> 01:02:57.220
A的水就过去了

01:02:57.220 --> 01:02:57.820
对吧

01:02:57.820 --> 01:02:59.580
然后把B的水倒到A里面

01:02:59.580 --> 01:03:00.700
是吧

01:03:00.700 --> 01:03:02.900
然后再把C的水倒到A里面

01:03:02.900 --> 01:03:04.220
倒到B里面

01:03:04.220 --> 01:03:04.740
是吧

01:03:04.740 --> 01:03:05.980
就完成交换了

01:03:05.980 --> 01:03:07.820
这是两个变量交换

01:03:07.820 --> 01:03:09.100
那么这里我们可以怎么写的

01:03:09.100 --> 01:03:10.380
两个变量AB

01:03:10.380 --> 01:03:11.020
怎么写的

01:03:11.020 --> 01:03:13.580
第一个变量C或者是TEMP

01:03:13.580 --> 01:03:14.700
表示临时变量

01:03:14.700 --> 01:03:15.500
临时变量

01:03:15.500 --> 01:03:16.820
定一个变量TEMP

01:03:16.820 --> 01:03:18.940
TEMP给它复制为A

01:03:18.980 --> 01:03:19.780
把A的水倒过来

01:03:19.780 --> 01:03:20.020
对吧

01:03:20.020 --> 01:03:21.220
倒到TEMP里面

01:03:21.220 --> 01:03:22.900
当然这里是复制粘贴

01:03:22.900 --> 01:03:24.700
不是直接剪切粘贴

01:03:24.700 --> 01:03:25.660
是复制粘贴

01:03:25.660 --> 01:03:26.700
A里面还有东西

01:03:26.700 --> 01:03:27.540
那没关系

01:03:27.540 --> 01:03:29.500
我再把B里面的东西

01:03:29.500 --> 01:03:32.220
覆盖掉A里面的东西

01:03:32.220 --> 01:03:36.540
然后再把TEMP里面放到B里面

01:03:36.540 --> 01:03:38.020
把这个先搞清楚

01:03:38.020 --> 01:03:39.100
你先得把这个搞清楚

01:03:39.100 --> 01:03:41.980
才能做下面的题

01:03:41.980 --> 01:03:42.860
另外这个意思吧

01:03:42.860 --> 01:03:45.580
这个TEMP相当于是C

01:03:45.580 --> 01:03:48.620
TEMP表示的是临时的意思

01:03:48.620 --> 01:03:49.420
临时变量

01:03:49.420 --> 01:03:51.500
用一下就算了

01:03:51.500 --> 01:03:52.420
好吧

01:03:52.420 --> 01:03:55.030
OK

01:03:55.030 --> 01:03:58.190
这是两个变量交换

01:03:58.190 --> 01:04:00.670
好 接下来看下面这个

01:04:00.670 --> 01:04:02.350
看下面这个

01:04:02.350 --> 01:04:04.910
怎么交换了

01:04:04.910 --> 01:04:06.430
是不是一样的

01:04:06.430 --> 01:04:07.430
有啥区别呢

01:04:07.430 --> 01:04:08.430
给上面这个

01:04:08.430 --> 01:04:09.710
有啥区别呢

01:04:09.710 --> 01:04:11.310
我要交换的是啥

01:04:11.310 --> 01:04:15.310
交换的实际上就是item parent

01:04:15.310 --> 01:04:17.110
和什么item child

01:04:17.110 --> 01:04:17.870
对吧

01:04:17.870 --> 01:04:19.230
把这两个交换

01:04:19.310 --> 01:04:22.910
你把这个A和BT换成item parent

01:04:22.910 --> 01:04:25.110
item child就完事了

01:04:25.110 --> 01:04:26.750
没那么复杂

01:04:26.750 --> 01:04:31.190
var temp item parent

01:04:31.190 --> 01:04:32.590
先把保存过来

01:04:32.590 --> 01:04:33.710
然后再怎么样

01:04:33.710 --> 01:04:36.750
item parent等于item child

01:04:36.750 --> 01:04:37.830
然后再怎么样

01:04:37.830 --> 01:04:41.070
然后再item child等于temp

01:04:41.070 --> 01:04:42.350
所以就交换了

01:04:42.350 --> 01:04:43.790
完了

01:04:43.790 --> 01:04:44.870
跟他说

01:04:44.870 --> 01:04:45.870
不可以创建新对象

01:04:45.870 --> 01:04:47.670
我创建新对象了吗

01:04:47.710 --> 01:04:48.830
整个这个例子中

01:04:48.830 --> 01:04:49.630
我这三行代码

01:04:49.630 --> 01:04:51.190
有没有新对象产生

01:04:51.190 --> 01:04:52.110
是没有

01:04:52.110 --> 01:04:53.630
我又没有写字面量

01:04:53.630 --> 01:04:54.230
我就怕

01:04:54.230 --> 01:04:55.750
他这个题就Party啥呢

01:04:55.750 --> 01:04:57.830
Party就是写出这样的代码

01:04:57.830 --> 01:04:58.870
Party写出这样的代码

01:04:58.870 --> 01:05:02.310
item parent等于来个新对象

01:05:02.310 --> 01:05:04.150
child的name

01:05:05.350 --> 01:05:06.550
Party写出这样的代码

01:05:06.550 --> 01:05:08.670
所以说不允许你这样写

01:05:08.670 --> 01:05:09.990
这不就交换了吗

01:05:09.990 --> 01:05:12.190
如果要用内存图来解释的话

01:05:12.190 --> 01:05:13.590
怎么来解释内存图呢

01:05:13.590 --> 01:05:14.550
我们就来呗

01:05:14.550 --> 01:05:15.630
还是可以解释的

01:05:15.630 --> 01:05:16.390
都可以解释的

01:05:16.390 --> 01:05:18.270
不存在什么不能解释

01:05:18.270 --> 01:05:21.550
这里item

01:05:21.550 --> 01:05:23.190
当然你要解释的话

01:05:23.190 --> 01:05:25.590
就是看的是它内存结构

01:05:25.590 --> 01:05:26.990
但是我们写代码的话

01:05:26.990 --> 01:05:27.710
不用看的存结构

01:05:27.710 --> 01:05:29.310
看逻辑意识也能明白

01:05:29.310 --> 01:05:29.790
什么意思

01:05:29.790 --> 01:05:31.430
就交换

01:05:31.430 --> 01:05:32.750
item里边是不是有

01:05:32.750 --> 01:05:35.550
就是一个对象

01:05:35.550 --> 01:05:35.790
对吧

01:05:35.790 --> 01:05:37.110
一个对象

01:05:37.110 --> 01:05:39.070
OK

01:05:39.070 --> 01:05:39.750
来吧

01:05:39.750 --> 01:05:40.230
画一下

01:05:40.230 --> 01:05:40.990
最后倒题了

01:05:40.990 --> 01:05:42.270
画一下

01:05:42.270 --> 01:05:42.870
好

01:05:42.870 --> 01:05:48.380
有一个name为副

01:05:48.380 --> 01:05:49.660
然后里面一个属像

01:05:49.700 --> 01:05:52.060
parent

01:05:52.060 --> 01:05:52.620
它是个地址

01:05:52.620 --> 01:05:52.900
对吧

01:05:52.900 --> 01:05:54.140
只像一个新的对象

01:05:54.140 --> 01:05:54.620
OK

01:05:54.620 --> 01:05:55.660
只像一个新的对象

01:05:55.660 --> 01:05:57.980
新的对象里边name为bar

01:05:57.980 --> 01:06:01.720
name为bar

01:06:01.720 --> 01:06:02.480
然后呢

01:06:02.480 --> 01:06:03.520
再怎么样呢

01:06:03.520 --> 01:06:05.920
再找一个就是

01:06:05.920 --> 01:06:08.160
还有个属像child

01:06:08.160 --> 01:06:09.200
这个要直过去

01:06:09.200 --> 01:06:12.620
要直过去

01:06:12.620 --> 01:06:14.620
这里为child

01:06:14.620 --> 01:06:17.860
还有个属像是child

01:06:17.860 --> 01:06:18.060
好

01:06:18.060 --> 01:06:19.180
child是不是又是个对象

01:06:19.180 --> 01:06:21.300
对吧

01:06:21.300 --> 01:06:22.820
又是个对象

01:06:22.820 --> 01:06:25.150
go

01:06:25.150 --> 01:06:26.870
就是parent

01:06:26.870 --> 01:06:28.150
再来一个

01:06:28.150 --> 01:06:33.750
child

01:06:33.750 --> 01:06:34.790
变成这样的内存结构

01:06:34.790 --> 01:06:35.030
对吧

01:06:35.030 --> 01:06:36.230
没问题吧

01:06:36.230 --> 01:06:38.190
没问题吧

01:06:38.190 --> 01:06:38.950
最后坚持

01:06:38.950 --> 01:06:40.750
最后一道题了

01:06:40.750 --> 01:06:41.790
然后呢

01:06:41.790 --> 01:06:43.950
我建了个变量temp

01:06:43.950 --> 01:06:45.070
把parent的值

01:06:45.070 --> 01:06:46.390
复制给temp

01:06:46.390 --> 01:06:47.350
相当于是什么呢

01:06:47.350 --> 01:06:48.390
又有一个变量来了

01:06:48.390 --> 01:06:50.390
又有一个变量来了

01:06:50.390 --> 01:06:51.670
temp

01:06:51.670 --> 01:06:53.190
把什么的复制给temp

01:06:53.190 --> 01:06:54.630
把什么复制给temp

01:06:54.630 --> 01:06:56.910
所以把parent的值

01:06:56.910 --> 01:06:57.990
复制给temp

01:06:57.990 --> 01:06:58.470
对吧

01:06:58.470 --> 01:07:00.310
把parent的地址复制给他

01:07:00.310 --> 01:07:02.750
那他是不是想指向这个了

01:07:02.750 --> 01:07:03.950
他是不是指向这个了

01:07:03.950 --> 01:07:04.150
对吧

01:07:04.150 --> 01:07:05.110
没问题吧

01:07:05.110 --> 01:07:06.790
把parent复制给temp

01:07:06.790 --> 01:07:07.150
然后呢

01:07:07.150 --> 01:07:09.590
再把child复制给parent

01:07:09.590 --> 01:07:11.110
啥意思

01:07:11.110 --> 01:07:12.950
找到他的child这个地址

01:07:12.950 --> 01:07:15.150
把这个地址复制给parent

01:07:15.150 --> 01:07:16.070
这样子一复制

01:07:16.070 --> 01:07:17.230
那么child和parent

01:07:17.230 --> 01:07:19.190
是不是指向同一块东西了

01:07:19.190 --> 01:07:20.910
parent也指向这一块了

01:07:20.910 --> 01:07:22.310
它变成了这一块了

01:07:22.310 --> 01:07:22.950
看到没

01:07:22.950 --> 01:07:24.710
它变成了这个东西了

01:07:24.710 --> 01:07:26.230
把child的地址复制给他

01:07:26.230 --> 01:07:27.870
来看是不是指向这一块了

01:07:28.710 --> 01:07:29.350
然后再怎么样

01:07:29.350 --> 01:07:29.750
你告诉我

01:07:29.750 --> 01:07:32.310
看这个图接下来怎么样

01:07:32.310 --> 01:07:33.110
怎么样

01:07:33.110 --> 01:07:36.710
是把temp的地址又复制给child的

01:07:36.710 --> 01:07:38.390
把temp又复制给child的

01:07:38.390 --> 01:07:39.670
对吧

01:07:39.670 --> 01:07:41.630
那么child就指向他了

01:07:41.630 --> 01:07:43.070
对不对

01:07:43.070 --> 01:07:44.630
从头到尾都是指来指去

01:07:44.630 --> 01:07:45.350
指来指去

01:07:45.350 --> 01:07:46.790
有没有创建新的内存

01:07:46.790 --> 01:07:48.910
没有创建新的内存空间

01:07:48.910 --> 01:07:49.390
OK

01:07:49.390 --> 01:07:50.990
就是完成这一块的交换

01:07:50.990 --> 01:07:51.870
其实也没有啥区别

01:07:51.870 --> 01:07:52.750
跟变量是一样的

01:07:52.750 --> 01:07:53.150
对吧

01:07:53.150 --> 01:07:54.150
直接交换就完成了

01:07:54.150 --> 01:07:56.150
就不要想太多

01:07:56.150 --> 01:07:56.750
好了

01:07:56.790 --> 01:07:59.030
这就是我们本节课

01:07:59.030 --> 01:07:59.590
要讲的东西

01:07:59.590 --> 01:08:00.150
真的

01:08:00.150 --> 01:08:00.790
我好爽啊

01:08:00.790 --> 01:08:01.070
这一课

01:08:01.070 --> 01:08:02.270
真的我超级爽

01:08:02.270 --> 01:08:03.630
我以前讲这个东西的时候

01:08:05.390 --> 01:08:07.630
总是因为线下授课吧

01:08:07.630 --> 01:08:09.190
有的时候是直播公开课的时候

01:08:09.190 --> 01:08:10.030
我也讲过

01:08:10.030 --> 01:08:11.630
但是都是受限于各种各样的

01:08:11.630 --> 01:08:13.110
就是环境和时间

01:08:13.110 --> 01:08:14.710
我没有办法把它讲得很清楚

01:08:14.710 --> 01:08:15.430
很透

01:08:15.430 --> 01:08:16.750
那么现在视频课程里边

01:08:16.750 --> 01:08:18.830
我只有无穷无尽的时间慢慢讲

01:08:18.830 --> 01:08:20.150
讲透为止

01:08:20.150 --> 01:08:20.710
是不是很舒服了

01:08:20.710 --> 01:08:21.150
现在

01:08:21.150 --> 01:08:23.030
反正我感觉很舒服

01:08:23.030 --> 01:08:24.510
这是关于引用内存这一块

01:08:24.510 --> 01:08:25.590
好好把理清楚

01:08:25.590 --> 01:08:26.710
这一课没有什么作业

01:08:26.710 --> 01:08:28.430
就是一些常练习

01:08:28.430 --> 01:08:29.430
练习例子

01:08:29.430 --> 01:08:31.150
好好去看一下这些例子

01:08:31.150 --> 01:08:32.870
保证你后边自己能够说出来

01:08:32.870 --> 01:08:33.590
这样的结果

01:08:33.590 --> 01:08:35.430
你甚至可以自己去创造练习

01:08:35.430 --> 01:08:36.790
我告诉你们

01:08:36.790 --> 01:08:38.510
学习编程

01:08:38.510 --> 01:08:41.590
你如果能够自己去创造一些练习题的话

01:08:41.590 --> 01:08:42.950
你学这个编程一定是

01:08:42.950 --> 01:08:44.990
最后学到一定是非常非常厉害

01:08:44.990 --> 01:08:46.190
因为你要想很多

01:08:46.190 --> 01:08:48.550
你才能自己去出一道题出来

01:08:48.550 --> 01:08:49.310
要想

01:08:49.310 --> 01:08:50.670
如果是这种情况会怎么样

01:08:50.670 --> 01:08:51.150
怎么样呢

01:08:51.150 --> 01:08:52.630
那么我们试一个例子

01:08:52.630 --> 01:08:53.790
这个例子会说说什么呢

01:08:53.790 --> 01:08:55.390
要去自己想这些问题的话

01:08:55.430 --> 01:08:57.350
编程会学得非常非常好

01:08:58.710 --> 01:09:00.350
这是关于这一块

01:09:00.350 --> 01:09:01.110
练习题的话

01:09:01.110 --> 01:09:03.430
其实就融合在我们的课程里面了

01:09:03.430 --> 01:09:05.590
在课上讲的事就已经练习题了

01:09:05.590 --> 01:09:07.710
所以这一课没什么作业

01:09:07.710 --> 01:09:08.790
但是这一课很重要

01:09:08.790 --> 01:09:09.750
非常非常重要

01:09:09.750 --> 01:09:10.830
把理解清楚

01:09:10.830 --> 01:09:11.310
OK

