WEBVTT

00:00.000 --> 00:14.630
这一张咱们学习BOOM

00:14.630 --> 00:15.930
BOOM是什么东西呢

00:15.930 --> 00:18.630
BOOM呢 我们之前说过啊 叫做Browser

00:18.630 --> 00:20.630
Browser什么意思啊 浏览器

00:20.630 --> 00:24.130
Objects 对象 Model 模型

00:24.130 --> 00:25.630
浏览器对象模型

00:25.630 --> 00:31.630
它里边呢 也是给你提供了一些对象啊 属性啊 方法啊 供你使用

00:31.630 --> 00:34.130
我们主要是学习这些对象方法属性

00:34.130 --> 00:36.130
呃 这里边呢 它主要是跟什么相关的

00:36.130 --> 00:37.630
它不是跟页面相关

00:38.130 --> 00:41.130
它是做什么呢 它是做的是跟浏览器相关的

00:41.130 --> 00:42.630
跟窗口相关的

00:42.630 --> 00:47.130
浏览器它本身给你提供了很多丰富的功能供你使用

00:47.130 --> 00:49.630
不过BOOM这一块我要先说一下啊

00:49.630 --> 00:52.630
为什么我说咱们学浏览器的时候呢

00:52.630 --> 00:55.130
主要学习的Storm 而不是BOOM呢

00:55.130 --> 00:57.130
因为BOOM这一块啊

00:57.130 --> 01:01.130
它有不少的兼容性问题 而且蛮严重的

01:01.130 --> 01:03.130
不同的浏览器呢 它的功能啊

01:03.130 --> 01:05.130
它是不太一样的啊

01:05.130 --> 01:06.130
所以说在某些时候呢

01:06.130 --> 01:07.130
它是有一些兼容性问题

01:07.630 --> 01:09.130
但是它这里边有一些东西啊

01:09.130 --> 01:11.130
它是没有兼容性问题的 都可以用

01:11.130 --> 01:12.630
所以说我们主要学习的是

01:12.630 --> 01:14.630
它没有兼容性问题的这些东西啊

01:14.630 --> 01:16.630
怎么有兼容性问题的这些东西呢

01:16.630 --> 01:18.630
我们就尽量把它弱化 好吧

01:18.630 --> 01:20.630
而且呢BOOM里边呢

01:20.630 --> 01:22.630
东西对比起来的话

01:22.630 --> 01:23.630
它没有DOM多啊

01:23.630 --> 01:26.630
没有就是我们之前学习的这个DOM

01:26.630 --> 01:27.630
它里边的东西多

01:27.630 --> 01:28.630
所以说BOOM这一块呢

01:28.630 --> 01:30.130
而且比较简单啊

01:30.130 --> 01:31.630
所以说学习呢比较轻松

01:31.630 --> 01:32.630
好吧

01:32.630 --> 01:33.630
我们第一节课呢

01:33.630 --> 01:35.630
现在学习啊 现在学习这个济石器

01:36.130 --> 01:37.130
这是一个蛮重要的东西

01:37.130 --> 01:40.130
BOOM里边可能最有用的就是这个东西的

01:40.130 --> 01:42.130
这个东西学习完

01:42.130 --> 01:45.130
哇 我们后边可以做好多好多丰富的效果

01:45.130 --> 01:47.130
你基本上看到液面这些

01:47.130 --> 01:49.130
什么动画效果啊

01:49.130 --> 01:50.130
都可以做了啊

01:50.130 --> 01:52.130
全靠济石器去完成

01:52.130 --> 01:54.130
甚至一些游戏介石拥有

01:54.130 --> 01:56.130
做一些介石游戏也可以做了啊

01:56.130 --> 01:58.130
好 咱们看一下个济石器

01:58.130 --> 02:00.130
它非常非常简单

02:00.130 --> 02:01.130
它就是两个函数

02:01.130 --> 02:03.130
都是 我们这里介绍的东西啊

02:03.130 --> 02:05.130
都是属于Window对象的

02:05.130 --> 02:07.630
直接在Window对象里边的属性或者是方法

02:07.630 --> 02:09.630
这里边设计了两个函数

02:09.630 --> 02:11.630
一个是setTimeout

02:11.630 --> 02:13.630
setTimeout

02:13.630 --> 02:14.630
Timeout是什么意思

02:14.630 --> 02:15.630
set就设置嘛 对吧

02:15.630 --> 02:18.630
Timeout就是时间到达的时候

02:18.630 --> 02:19.630
做一些事

02:19.630 --> 02:21.630
setTimeout这个方法

02:21.630 --> 02:22.630
咱们来看一下这个方法

02:22.630 --> 02:23.630
非常非常简单

02:23.630 --> 02:25.630
这里呢 我们

02:25.630 --> 02:27.630
先建个文件

02:27.630 --> 02:29.630
setTimeout

02:30.630 --> 02:31.630
这一节课呢

02:31.630 --> 02:33.630
其实它知识部分并不多

02:34.130 --> 02:36.130
但它应用的场景非常非常地广

02:36.130 --> 02:37.130
所以说这节课呢

02:37.130 --> 02:40.130
主要是来解释它的应用

02:40.130 --> 02:41.130
讲完了之后呢

02:41.130 --> 02:42.130
有些作业啊

02:42.130 --> 02:43.130
作业一排比较多

02:43.130 --> 02:45.130
有些作业人还比较复杂

02:45.130 --> 02:47.130
但效果呢 挺有意思的

02:47.130 --> 02:48.130
点击开始

02:50.130 --> 02:51.130
好 比方说吧

02:51.130 --> 02:52.130
我们这里呢

02:52.130 --> 02:53.130
给得到这个按钮

02:53.130 --> 02:54.130
document

02:54.130 --> 02:55.130
carrys lector

02:55.130 --> 02:56.130
得到这个按钮

02:56.130 --> 02:57.130
然后呢

02:57.130 --> 02:59.130
给它注册点击事件

02:59.130 --> 03:00.130
好

03:00.130 --> 03:01.130
btn

03:01.130 --> 03:02.130
onclick

03:02.130 --> 03:03.130
点击事件

03:03.130 --> 03:04.630
点击的时候干嘛呢

03:04.630 --> 03:05.630
我们

03:05.630 --> 03:07.630
启动一个计时器

03:07.630 --> 03:08.630
怎么启动呢

03:08.630 --> 03:09.630
就调用这个函数

03:09.630 --> 03:10.630
setTimeout

03:10.630 --> 03:11.630
好

03:11.630 --> 03:12.630
这个函数呢 在Windows对象里边

03:12.630 --> 03:14.630
setTimeout

03:14.630 --> 03:15.630
对吧 在Windows对象里边

03:15.630 --> 03:16.630
当然呢

03:16.630 --> 03:17.630
Windows对象里边的函数

03:17.630 --> 03:18.630
是不是可以直接调用

03:18.630 --> 03:19.630
对吧

03:19.630 --> 03:20.630
它可以直接调用的

03:20.630 --> 03:21.630
好

03:21.630 --> 03:22.630
这个函数呢

03:22.630 --> 03:23.630
它传递两个函数

03:23.630 --> 03:24.630
一个函数呢

03:24.630 --> 03:26.630
第一个函数就是个函数

03:26.630 --> 03:27.630
这个见过没

03:27.630 --> 03:28.630
函数传函数

03:28.630 --> 03:29.630
到处都看到了

03:29.630 --> 03:31.630
比方说我们之前学习的

03:32.130 --> 03:34.130
ATD event listener对吧

03:34.130 --> 03:36.130
或者是数组里边的很多方法

03:36.130 --> 03:37.130
它的参数呢

03:37.130 --> 03:38.130
都让你去传递一个函数

03:38.130 --> 03:39.130
这里也是一样

03:39.130 --> 03:40.630
它第一个参数呢

03:40.630 --> 03:41.630
需要传递一个函数

03:41.630 --> 03:43.130
当然你可以先把函数写好

03:43.130 --> 03:45.130
把函数的名字放过来也可以

03:45.130 --> 03:46.130
好

03:46.130 --> 03:47.130
它还有第二个参数

03:47.130 --> 03:48.130
第二个参数呢

03:48.130 --> 03:49.130
是一个数字

03:49.130 --> 03:51.130
是一个数字

03:51.130 --> 03:52.130
这个数字是什么意思呢

03:52.130 --> 03:53.130
这个数字呢

03:53.130 --> 03:54.130
表示的是

03:54.130 --> 03:55.130
时间

03:55.130 --> 03:57.130
单位是毫秒

03:57.130 --> 03:58.130
一秒钟

03:58.130 --> 03:59.130
等于1000毫秒

03:59.130 --> 04:00.130
那比方说

04:00.630 --> 04:01.630
我们这里写3000

04:01.630 --> 04:02.630
表示什么意思

04:02.630 --> 04:03.630
3秒钟

04:03.630 --> 04:04.630
好

04:04.630 --> 04:05.630
整体是什么意思呢

04:05.630 --> 04:07.630
它整体的意思是这样子的

04:08.630 --> 04:11.630
3000毫秒之后

04:11.630 --> 04:14.630
运行指定的函数

04:17.630 --> 04:18.630
指定的函数

04:18.630 --> 04:20.630
它要等到3000毫秒之后

04:20.630 --> 04:22.630
才运行这个指定的函数

04:22.630 --> 04:23.630
就这么个意思

04:23.630 --> 04:24.630
非常非常简单

04:24.630 --> 04:25.630
好

04:25.630 --> 04:26.630
比方说

04:26.630 --> 04:27.630
我们这里

04:27.630 --> 04:29.630
输出技术完成

04:29.630 --> 04:30.630
3000毫秒

04:30.630 --> 04:31.630
就3秒钟之后

04:31.630 --> 04:32.630
技术完成

04:32.630 --> 04:33.630
咱们来看一下

04:34.630 --> 04:35.630
这一简单

04:36.630 --> 04:37.630
看一下

04:41.260 --> 04:42.260
点击

04:42.260 --> 04:43.260
等3秒钟

04:45.260 --> 04:46.760
看技术完成

04:46.760 --> 04:47.760
很简单

04:47.760 --> 04:48.760
对不对

04:48.760 --> 04:49.260
好

04:49.260 --> 04:51.260
这里边有一些细节我要说一下

04:51.260 --> 04:53.260
你这个函数

04:54.260 --> 04:57.260
这个函数是要等到3秒钟之后运行

04:57.260 --> 04:59.260
那么介石会不会等了

04:59.260 --> 05:00.260
比方说

05:01.260 --> 05:03.260
这是点击事件

05:05.260 --> 05:07.260
那么介石会不会等

05:07.260 --> 05:08.260
等到3秒钟之后

05:08.260 --> 05:09.260
把这个运行了之后

05:09.260 --> 05:10.260
在运行下面这句话

05:10.260 --> 05:11.260
会不会呢

05:11.260 --> 05:12.260
保存在那边看一下

05:12.260 --> 05:13.260
重新来一次

05:13.260 --> 05:14.260
点击

05:15.260 --> 05:16.260
是不是不会

05:16.260 --> 05:17.260
它并不会等待

05:17.260 --> 05:18.260
并不会等待

05:18.260 --> 05:19.260
也就是说

05:19.260 --> 05:20.260
这里相当于是一个事件

05:20.260 --> 05:22.260
又相当于是个事件

05:22.260 --> 05:23.260
那里注册事件

05:23.260 --> 05:24.260
这个函数是不是要等到

05:24.260 --> 05:26.260
点击之后才出发

05:26.260 --> 05:27.260
对吧

05:27.260 --> 05:28.260
要等到点击之后才出发

05:28.260 --> 05:29.260
它不可能会

05:30.260 --> 05:31.260
比方说下面有代码

05:32.260 --> 05:33.260
下面的代码的话

05:33.260 --> 05:35.260
它不会等到你点了之后才会运行

05:35.260 --> 05:36.260
它不是的

05:36.260 --> 05:38.260
它马上运行

05:38.260 --> 05:39.260
那么这个函数

05:39.260 --> 05:41.260
它是等到点击之后才运行

05:41.260 --> 05:42.260
那么这边是一样的

05:42.260 --> 05:44.260
它是要等到3秒钟之后

05:44.260 --> 05:45.260
才运行这个函数

05:45.260 --> 05:46.260
后边的代码

05:46.260 --> 05:47.260
它不会等它

05:47.260 --> 05:48.260
也就是说

05:48.260 --> 05:49.260
这个函数

05:49.260 --> 05:51.260
它瞬间就运行完了

05:51.260 --> 05:52.260
瞬间就运行完了

05:52.260 --> 05:53.260
它这个运行

05:53.260 --> 05:54.260
然后马上这个运行

05:54.260 --> 05:55.260
完了

05:55.260 --> 05:56.260
结束了

05:56.260 --> 05:57.260
结束了

05:57.260 --> 05:58.260
然后等到3000毫秒

05:58.260 --> 06:00.260
就是3秒钟之后

06:00.260 --> 06:02.260
再回过头来运行这个函数

06:02.260 --> 06:03.260
要这么来理解

06:03.260 --> 06:05.260
它不会主设

06:05.260 --> 06:06.260
这些函数的指向

06:06.260 --> 06:08.260
不会主设这些代码的指向

06:08.260 --> 06:09.260
什么叫主设

06:09.260 --> 06:11.260
就像前面有辆车

06:11.260 --> 06:12.260
有辆车

06:12.260 --> 06:13.260
堵车了吧

06:13.260 --> 06:14.260
第一辆车在等红灯

06:14.260 --> 06:15.260
那后边的车是不是

06:15.260 --> 06:16.260
全部要等着

06:16.260 --> 06:17.260
对吧

06:17.260 --> 06:18.260
后边全部要主设掉了

06:18.260 --> 06:19.260
那这里是一样的

06:19.260 --> 06:20.260
那这里的函数

06:20.260 --> 06:22.260
它并不会主设

06:22.260 --> 06:23.260
后边的指向

06:23.260 --> 06:24.260
后边正常指向

06:24.260 --> 06:25.260
那么这个东西等到

06:25.260 --> 06:26.260
时机满足之后

06:26.260 --> 06:27.260
再去执行这个函数

06:27.260 --> 06:28.260
它跟事件是一样的

06:28.260 --> 06:30.260
事件是等点击之后

06:30.260 --> 06:31.260
再去执行

06:31.260 --> 06:32.260
它不会主设

06:32.260 --> 06:33.260
后边代码的指向

06:34.260 --> 06:35.260
好吧

06:35.260 --> 06:36.260
这是

06:36.260 --> 06:37.260
这么一个塞滩手

06:37.260 --> 06:38.260
这是第一个细节要注意

06:38.260 --> 06:40.260
我们把它记下来

06:40.260 --> 06:42.260
记时期

06:42.260 --> 06:43.260
是一步的

06:43.260 --> 06:44.260
什么叫一步

06:44.260 --> 06:45.260
就等一会

06:45.260 --> 06:46.260
等到时机满

06:46.260 --> 06:48.260
时机成熟之后再执行

06:48.260 --> 06:49.260
这是一步的

06:49.260 --> 06:50.260
它不会马上执行

06:51.260 --> 06:52.260
因为我们写的是函数

06:52.260 --> 06:54.260
函数要雕用过后

06:54.260 --> 06:55.260
才会执行

06:56.260 --> 06:57.260
那你这里雕用了吗

06:57.260 --> 06:58.260
有没有雕用这个函数

06:58.260 --> 06:59.260
没有

06:59.260 --> 07:00.260
我只是给它传了一个函数

07:00.260 --> 07:02.260
那这个函数什么时候雕用

07:02.260 --> 07:03.260
等三秒钟之后

07:03.260 --> 07:04.260
三秒钟之后

07:04.260 --> 07:06.260
它自动雕用这个函数

07:06.260 --> 07:07.260
是这么个意思

07:07.260 --> 07:08.260
我只是这里

07:08.260 --> 07:09.260
定了一个函数而已

07:09.260 --> 07:10.260
它不会立即执行

07:10.260 --> 07:12.260
记时期是一步的

07:12.260 --> 07:14.260
当时机

07:14.260 --> 07:16.260
成熟之后

07:16.260 --> 07:18.260
才会执行

07:18.260 --> 07:20.260
跟事件是一样的

07:20.260 --> 07:21.260
这是第一个细节

07:21.260 --> 07:22.260
第二个细节

07:22.260 --> 07:23.260
是

07:23.260 --> 07:26.260
记时期会返回

07:26.260 --> 07:28.260
一个数字

07:28.260 --> 07:31.260
该数字表示

07:31.260 --> 07:33.260
记时期的编号

07:33.260 --> 07:34.260
因为我们页面上

07:34.260 --> 07:35.260
可能会有很多的记时期

07:35.260 --> 07:37.260
可能会有好多的记时期

07:37.260 --> 07:38.260
那么这里

07:38.260 --> 07:39.260
它会返回一个数字

07:39.260 --> 07:40.260
表示这个记时期的编号

07:40.260 --> 07:41.260
有整个函数

07:41.260 --> 07:42.260
所以它冒着

07:42.260 --> 07:43.260
传了两个参数

07:43.260 --> 07:45.260
它又返回值

07:45.260 --> 07:46.260
返回的是啥呢

07:46.260 --> 07:47.260
返回的是一个编号

07:47.260 --> 07:48.260
我们通常用一个

07:48.260 --> 07:50.260
单词叫time

07:50.260 --> 07:52.260
来获取

07:52.260 --> 07:54.260
来输出一下一个time

07:54.260 --> 07:56.260
那么现在再问大家一个问题

07:56.260 --> 07:59.260
这个time会不会立即输出

07:59.260 --> 08:02.260
会不会立即输出

08:02.260 --> 08:03.260
它是要等到

08:03.260 --> 08:04.260
三秒钟之后再输出

08:04.260 --> 08:05.260
还是立即输出

08:05.260 --> 08:06.260
刚刚才说了

08:06.260 --> 08:08.260
专心听课没有

08:08.260 --> 08:09.260
刚刚才说了

08:09.260 --> 08:10.260
是不是立即输出

08:10.260 --> 08:11.260
对吧

08:11.260 --> 08:12.260
这里的函数

08:12.260 --> 08:13.260
它并不会立即执行的

08:13.260 --> 08:14.260
它也不会在这里

08:14.260 --> 08:15.260
等待三秒钟

08:15.260 --> 08:16.260
它这个东西

08:16.260 --> 08:17.260
就瞬间就完了

08:17.260 --> 08:18.260
三秒钟之后

08:18.260 --> 08:19.260
再回过头来执行

08:19.260 --> 08:20.260
所以说这两句代码

08:20.260 --> 08:21.260
是瞬间就执行的

08:21.260 --> 08:22.260
点击18

08:22.260 --> 08:23.260
对吧

08:23.260 --> 08:24.260
再看

08:24.260 --> 08:25.260
点击18

08:25.260 --> 08:26.260
这个数字

08:26.260 --> 08:27.260
你不用管

08:27.260 --> 08:28.260
你不用管这个数字

08:28.260 --> 08:29.260
这个数字

08:29.260 --> 08:31.260
是它来执行规定的

08:31.260 --> 08:32.260
总之你把它获取到就行了

08:32.260 --> 08:33.260
这里

08:33.260 --> 08:34.260
比方我们再启动

08:34.260 --> 08:35.260
多个计时器

08:35.260 --> 08:36.260
启动三个

08:36.260 --> 08:37.260
1

08:37.260 --> 08:38.260
2

08:38.260 --> 08:39.260
3

08:39.260 --> 08:40.260
1

08:40.260 --> 08:41.260
2

08:41.260 --> 08:42.260
3

08:42.260 --> 08:43.260
1

08:43.260 --> 08:44.260
2

08:44.260 --> 08:45.260
2

08:45.260 --> 08:46.260
3

08:46.260 --> 08:47.260
比方说

08:47.260 --> 08:49.260
我们这样来启动计时器

08:49.260 --> 08:50.260
那么这里

08:50.260 --> 08:51.260
还有一个问题

08:52.260 --> 08:53.260
这个计时器

08:53.260 --> 08:54.260
是不是要等到

08:54.260 --> 08:56.260
前面计时器完了之后的

08:56.260 --> 08:57.260
三秒钟才会执行

08:58.260 --> 08:59.260
是不是

08:59.260 --> 09:00.260
不是

09:00.260 --> 09:02.260
它是从什么时候

09:02.260 --> 09:03.260
开始计时的

09:03.260 --> 09:04.260
它是从你雕用

09:04.260 --> 09:05.260
这个函数的时候

09:05.260 --> 09:06.260
开始计时的

09:06.260 --> 09:08.260
是从这里开始计时的

09:08.260 --> 09:09.260
那你怎么能理解

09:09.260 --> 09:10.260
这个代码呢

09:10.260 --> 09:11.260
它是这样子

09:11.260 --> 09:12.260
运行到这句话

09:12.260 --> 09:13.260
从现在开始计时

09:13.260 --> 09:14.260
计时三秒钟

09:14.260 --> 09:15.260
三秒钟之后

09:15.260 --> 09:16.260
运行这个函数

09:16.260 --> 09:17.260
然后呢

09:17.260 --> 09:18.260
马上继续往后运行

09:18.260 --> 09:19.260
对吧

09:19.260 --> 09:20.260
等呗

09:20.260 --> 09:21.260
关我啥事呢

09:21.260 --> 09:22.260
关我屁事

09:22.260 --> 09:23.260
你等呗

09:23.260 --> 09:24.260
你自己去等

09:24.260 --> 09:25.260
然后呢

09:25.260 --> 09:26.260
我又去运行这个函数

09:26.260 --> 09:27.260
是不是又从现在开始

09:27.260 --> 09:28.260
计时

09:28.260 --> 09:29.260
三秒钟之后运行这个函数

09:29.260 --> 09:30.260
对吧

09:30.260 --> 09:31.260
然后你去等呗

09:31.260 --> 09:32.260
我不管了

09:32.260 --> 09:33.260
那接下来我继续运行

09:33.260 --> 09:35.260
是不是又运行这个函数

09:35.260 --> 09:37.260
又计时三秒钟运行这个函数

09:37.260 --> 09:38.260
另外这个意思吧

09:38.260 --> 09:39.260
所以到时候

09:39.260 --> 09:40.260
到达的时候

09:40.260 --> 09:41.260
时间到达的时候

09:41.260 --> 09:43.260
几乎是同时到达这个时间的

09:43.260 --> 09:44.260
另外这个意思吧

09:44.260 --> 09:45.260
保存看一下

09:46.260 --> 09:47.260
点击

09:47.260 --> 09:48.260
181920

09:48.260 --> 09:49.260
计时完成123

09:49.260 --> 09:50.260
看到没有

09:50.260 --> 09:52.260
几乎是同时到达这个时间

09:52.260 --> 09:54.260
因为他们是都是同

09:54.260 --> 09:56.260
几乎是同一个时间点开始计时的

09:56.260 --> 09:57.260
运行往上一句话

09:57.260 --> 09:58.260
马上运行下一句话

09:58.260 --> 09:59.260
马上运行下一句话

10:00.260 --> 10:02.260
这是关于这个计时器

10:03.260 --> 10:04.260
然后这里边呢

10:04.260 --> 10:06.260
他为什么要获取这个ID呢

10:06.260 --> 10:07.260
编号呢

10:07.260 --> 10:08.260
获取这个编号呢

10:08.260 --> 10:09.260
有的时候有意义

10:09.260 --> 10:10.260
有的时候没有意义

10:10.260 --> 10:11.260
那比方说

10:11.260 --> 10:12.260
一方呢

10:12.260 --> 10:13.260
你想

10:13.260 --> 10:14.260
我不要了

10:14.260 --> 10:15.260
我可能不像

10:15.260 --> 10:16.260
不希望你计时了

10:16.260 --> 10:17.260
现在有个按钮

10:19.260 --> 10:20.260
清除

10:20.260 --> 10:22.260
清除计时器

10:22.260 --> 10:24.260
好点击这个按钮的时候

10:24.260 --> 10:25.260
我要把计时器全部清除掉

10:25.260 --> 10:26.260
全部清除掉

10:26.260 --> 10:27.260
我不要了

10:27.260 --> 10:28.260
不要理计时的

10:28.260 --> 10:29.260
好

10:29.260 --> 10:30.260
就是他时间还没有到

10:30.260 --> 10:31.260
但是我不要理计时的

10:31.260 --> 10:32.260
好

10:32.260 --> 10:33.260
那么这个该怎么来做呢

10:33.260 --> 10:34.260
就需要用到这个ID

10:34.260 --> 10:35.260
我们这里呢

10:35.260 --> 10:36.260
把个变量递到外面

10:36.260 --> 10:37.260
Timer1

10:37.260 --> 10:38.260
Timer2

10:38.260 --> 10:40.260
Timer3

10:40.260 --> 10:41.260
有三个

10:43.260 --> 10:44.260
看着

10:44.260 --> 10:45.260
比方说

10:45.260 --> 10:46.260
我们找到

10:46.260 --> 10:47.260
这是第一个按钮

10:47.260 --> 10:48.260
ID

10:49.260 --> 10:50.260
bitn1

10:51.260 --> 10:52.260
这个是ID

10:53.260 --> 10:54.260
bitn2

10:54.260 --> 10:55.260
好这里呢

10:55.260 --> 10:56.260
我们就不

10:56.260 --> 10:57.260
为了方便

10:57.260 --> 10:58.260
主要是为了方便

10:58.260 --> 10:59.260
但是平时写代码

10:59.260 --> 11:00.260
真的是写代码的时候

11:00.260 --> 11:01.260
不要这样写

11:01.260 --> 11:02.260
bitn1

11:02.260 --> 11:03.260
bitn2

11:03.260 --> 11:04.260
onclick

11:04.260 --> 11:05.260
好

11:05.260 --> 11:06.260
当我们点击

11:06.260 --> 11:07.260
第二个按钮的时候

11:07.260 --> 11:08.260
点击第二个按钮的时候

11:08.260 --> 11:09.260
干嘛呢

11:09.260 --> 11:10.260
我要把这些计时器

11:10.260 --> 11:11.260
全部清除掉

11:11.260 --> 11:12.260
全部清除掉

11:12.260 --> 11:13.260
好

11:13.260 --> 11:14.260
我们这里这样写

11:14.260 --> 11:16.260
clear timeout

11:16.260 --> 11:17.260
clear timeout

11:19.260 --> 11:20.260
对应的是一个

11:20.260 --> 11:22.260
clear timeout

11:23.260 --> 11:24.260
里边这个方法

11:24.260 --> 11:25.260
这个方法里边

11:25.260 --> 11:27.260
就是可以清除

11:27.260 --> 11:28.260
计时器

11:28.260 --> 11:30.260
这个方法要传一个参数

11:30.260 --> 11:31.260
传什么参数呢

11:31.260 --> 11:32.260
就是计时器的ID

11:32.260 --> 11:33.260
要把ID传给它

11:33.260 --> 11:34.260
我们把这个ID

11:34.260 --> 11:35.260
Timer1传给它

11:35.260 --> 11:36.260
Timer1是不是

11:36.260 --> 11:37.260
计时器1的ID

11:37.260 --> 11:38.260
对吧

11:38.260 --> 11:39.260
计时器1的

11:39.260 --> 11:40.260
编号

11:40.260 --> 11:41.260
把它传给它

11:41.260 --> 11:42.260
比方说

11:42.260 --> 11:44.260
计时器1清除掉

11:44.260 --> 11:45.260
好

11:45.260 --> 11:46.260
咱们看一下

11:46.260 --> 11:47.260
这个

11:47.260 --> 11:48.260
点击开始

11:48.260 --> 11:50.260
然后清除

11:50.260 --> 11:51.260
看一下

11:51.260 --> 11:52.260
你看只有计时器2

11:52.260 --> 11:53.260
计时器3

11:53.260 --> 11:54.260
计时器1

11:54.260 --> 11:55.260
它永远不会到达了

11:55.260 --> 11:57.260
它被清除掉了

11:57.260 --> 11:58.260
那有些东西说

11:58.260 --> 11:59.260
怎么来恢复呢

11:59.260 --> 12:00.260
没法恢复

12:00.260 --> 12:01.260
没法恢复

12:01.260 --> 12:02.260
没法恢复

12:02.260 --> 12:04.260
你只能重新启动计时器

12:04.260 --> 12:05.260
好

12:05.260 --> 12:06.260
这是这一块

12:06.260 --> 12:08.260
但是如果

12:08.260 --> 12:09.260
比方说

12:09.260 --> 12:10.260
如果你没有这个计时器

12:10.260 --> 12:11.260
你直接点击的

12:11.260 --> 12:12.260
它能不能清除了

12:12.260 --> 12:13.260
它就没法清除

12:13.260 --> 12:14.260
因为你这个没有纸

12:14.260 --> 12:15.260
对不对

12:15.260 --> 12:16.260
所以说我们这里

12:16.260 --> 12:17.260
有的时候

12:17.260 --> 12:18.260
为了实现这个

12:18.260 --> 12:19.260
清除计时器

12:19.260 --> 12:21.260
就是为了更加稳健一点

12:21.260 --> 12:22.260
你可以直接判断一下

12:22.260 --> 12:24.260
它们一是否存在

12:24.260 --> 12:25.260
如果存在的话

12:25.260 --> 12:26.260
我把它清除掉

12:26.260 --> 12:27.260
当然你可以判断

12:27.260 --> 12:28.260
当然你不判断也无所谓

12:28.260 --> 12:29.260
其实也无所谓的

12:29.260 --> 12:30.260
这是个人习惯

12:30.260 --> 12:31.260
不判断的话

12:31.260 --> 12:39.260
你给它传一个

12:39.260 --> 12:40.260
点击开始

12:40.260 --> 12:42.830
清除

12:42.830 --> 12:44.830
那么这个计时器

12:44.830 --> 12:45.830
三个计时器

12:45.830 --> 12:46.830
全部清空了

12:46.830 --> 12:48.830
都不会到这个时间了

12:48.830 --> 12:51.830
这是set time out

12:51.830 --> 12:54.830
如果有的时候

12:54.830 --> 12:56.830
我想要做这么一件事

12:56.830 --> 12:57.830
我这个计时器

12:57.830 --> 12:58.830
它是这样子

12:58.830 --> 12:59.830
我这里

12:59.830 --> 13:00.830
是得到到了

13:00.830 --> 13:01.830
三漫的

13:01.830 --> 13:02.830
三漫

13:02.830 --> 13:03.830
三漫

13:03.830 --> 13:04.830
三漫

13:04.830 --> 13:05.830
三漫

13:05.830 --> 13:06.830
三漫

13:06.830 --> 13:07.830
三漫

13:07.830 --> 13:08.830
三漫

13:08.830 --> 13:09.830
三漫

13:09.830 --> 13:10.830
是得到了

13:10.830 --> 13:11.830
三漫秒钟之后

13:11.830 --> 13:13.830
到了三秒钟之后

13:13.830 --> 13:15.830
我就去做一件事

13:15.830 --> 13:17.830
如果我像重复的做了

13:17.830 --> 13:18.830
比方说

13:18.830 --> 13:19.830
三秒钟之后

13:19.830 --> 13:20.830
做一件事

13:20.830 --> 13:21.830
再三秒钟之后

13:21.830 --> 13:22.830
再做同一件事

13:22.830 --> 13:23.830
那又怎么办

13:23.830 --> 13:24.830
如果像重复的

13:24.830 --> 13:25.830
做一件事

13:25.830 --> 13:26.830
怎么办

13:26.830 --> 13:27.830
你可以这样来写

13:27.830 --> 13:28.830
你可以这样来写

13:28.830 --> 13:29.830
看着

13:29.830 --> 13:30.830
我们用这种方式来写

13:31.830 --> 13:32.830
比方说

13:32.830 --> 13:34.830
咱们点击开始

13:37.830 --> 13:38.830
还是有两个按钮

13:38.830 --> 13:42.990
轻处 一个是轻处 就一个计时器1 好吧

13:43.150 --> 13:45.790
就一个计时器1 然后我们这里这样子写

13:48.350 --> 13:51.470
这里有个 HE 元素

13:52.230 --> 13:55.630
里边就有一个 要加个样式嘛

13:57.310 --> 14:00.470
HE tex center 居中

14:00.990 --> 14:03.310
这里边有个样式 0

14:03.910 --> 14:08.030
没点一下 点到过后它就自动变成1 变成2 变成3

14:08.070 --> 14:10.870
它自动变 自动变 好 我们可以这样子写

14:11.630 --> 14:14.510
有一个变量 变量一开始 有一个变量 number

14:14.870 --> 14:20.310
一开始是0 对吧 一开始是0 好 点击按钮1的时候呢 点击开始的时候呢

14:20.430 --> 14:25.030
我们启动一个计时器 看着 set time out 启动一个计时器

14:26.590 --> 14:30.830
然后计时器一秒钟运行一次 一千吧 一千毫秒

14:31.270 --> 14:34.070
一秒钟等于一千毫秒 一秒钟运行一次

14:34.510 --> 14:36.710
每一次运行干嘛呢

14:38.070 --> 14:40.230
number 加加

14:41.590 --> 14:45.590
没问题吧 每一次运行 number 加加 好 看着

14:47.350 --> 14:50.830
我们这里 然后把这个 number 写到 HE 里边 对吧

14:51.070 --> 14:52.270
把 number 写到 HE 里边

14:52.790 --> 14:55.270
HE documents, queries, negator

14:56.150 --> 14:59.750
HE 好 然后我们这里 HE in there

15:00.710 --> 15:03.230
把它设置为 number 好 看一下

15:05.860 --> 15:08.580
点击开始 变成一了

15:09.220 --> 15:12.980
还会继续变吗 这不会了 因为它只会运行一次

15:13.180 --> 15:14.660
那这里我们怎么来处理呢

15:14.900 --> 15:18.460
让它不断的运行怎么来处理呢 想一想 有没有什么好办法

15:19.020 --> 15:22.940
有没有什么好办法 让它可以不断的来处理这个问题

15:24.780 --> 15:27.100
咋办呢 我们可以用这种方式 看着

15:28.380 --> 15:31.140
有时候就在这里面 再写个 set time out 可不可以

15:31.420 --> 15:33.660
可以 再写个 time out

15:33.820 --> 15:37.420
但是这样子一来了 你会遇到一个问题 就是你到底要写多少个呢

15:38.620 --> 15:42.140
你到底要写多少个呢 你就不知道要写多少个了 那这里会运行两次

15:43.060 --> 15:48.820
看一秒钟到达之后 然后又重新计时一秒 然后先把这个那么加一 然后设置过去

15:49.260 --> 15:52.980
好 一秒钟过了之后呢 又再重新 又来运行这个东西 对吧

15:53.340 --> 15:56.380
但是也只能运行两次 那如何来运行很多次呢

15:58.300 --> 15:59.300
如何来运行很多次呢

16:00.260 --> 16:05.780
看着啊 我们这里可以用这种方式来做 我们这里能写个函数 给他取个名字叫做 interval

16:06.100 --> 16:11.380
interval呢 就是每间隔一段时间啊 自动执行一个东西 他是不断的执行的

16:11.860 --> 16:17.540
好 你给我一个啥呢 给我一个回调函数 就是把它写成给这个声 所以他们号称一样啊 写成一样的格式

16:18.180 --> 16:20.420
call back 回调函数 你给我一个函数

16:21.060 --> 16:27.060
然后第二参数呢 你给我一个时间啊 duration duration 表示间隔时间啊 我写这么一个函数

16:27.620 --> 16:32.660
好 我来帮你完成计时 怎么做呢 这里边我们这样子写set time out

16:34.740 --> 16:38.820
好 运行的函数是啥呢 运行的函数 我们来写个啊 运行的函数

16:39.460 --> 16:44.100
好 运行函数 duration 传进去 对吧 两个参数嘛 这是间隔时间

16:44.580 --> 16:45.780
毫秒数 这是

16:46.660 --> 16:53.140
间隔时间到达之后 要运行的函数 函数是什么呢 函数是不是运行你的个call back 对吧 运行你的call back

16:53.620 --> 17:00.100
好 运行一次call back之后 接着你看 神奇的事情发生了 我再调用intel我 是不是地规

17:00.900 --> 17:04.260
没问题吧 再把call back传进去 然后再把 duration 传进去

17:05.620 --> 17:09.140
没问题吧 我到达时间过后运行函数

17:10.260 --> 17:12.980
啊 这个计时器已经结束了 运行函数的时候呢

17:13.860 --> 17:18.820
我我调用你的回调函数啊 你给我传一个回调函数进来 我调用你的回调函数

17:19.220 --> 17:26.180
调完之后 我不停 马上又启动一个计时器 你看又调用这个函数 现在intel我又把回调函数传进去 第二个性传进去

17:26.500 --> 17:28.900
于是呢 再一次调用的时候 是不是又启动一个计时器了

17:29.300 --> 17:33.380
等到那个计时器完了过后 他是不是又要调用intel我 对吧 这样子无限调用下去了

17:33.860 --> 17:38.100
啊 这样子呢 就可以完成这样的效果了 比方说咱们来看一下啊 intel我

17:39.700 --> 17:40.260
啊 方可行

17:40.820 --> 17:46.180
啊 有人说那这里不是无限低规吗 你之前不是说无限低规要导致战役出吗

17:47.060 --> 17:52.260
啊 对吧 无限低规要导致战役出 但是这里不会 为什么不会 你看一下 这是一步的

17:52.660 --> 18:00.420
这个这个函数本身瞬间就执行完了 他瞬间就执行完了 战役已经退出了 对吧 那个就是执行环境已经销毁掉了

18:00.820 --> 18:07.620
这个函数瞬间就执行完了 只是三秒钟之后我再重新调用它 是这么个意思啊 这个函数早就执行完了

18:08.580 --> 18:13.460
好 这里呢 我们运行啥呢 运行这个啊 蓝不加加

18:13.940 --> 18:18.260
然后呢 什么 h1 in 18秒 把设为那么完了

18:19.300 --> 18:24.740
一秒钟之后运行这个 每个一秒钟运行一下这个 怎么来实现每个一秒钟的 就是他靠他来实现的

18:25.140 --> 18:31.140
他就调用自身 三秒钟之后调用自身 重新调用一次 不断的去调用自身 但是他本身瞬间就执行完了啊

18:31.540 --> 18:37.860
直到三秒钟之后 他才去调用自己 所以说不会导致战役出啊 老存看一下啊

18:38.580 --> 18:41.300
看一下 点击开始

18:43.220 --> 18:47.220
你看 所以每一秒钟运行一次 对吧 我没有点了啊 每一秒钟运行一次

18:47.940 --> 18:54.740
好 那么如何来停止呢 停止是不是要清除计时期 对吧 要清除计时期啊 如何来停止呢 问题是

18:55.540 --> 19:01.700
如何来停止呢 我们就每一次set time out的时候干嘛呢 把这个time一复制 对吧 每一次set time out

19:01.940 --> 19:05.380
set time out的时候呢 把这个time一复制啊 复制就完事了

19:05.860 --> 19:08.660
好 于是呢 怎么样呢 我们这里btn2

19:10.020 --> 19:13.300
btn2 onclick 把这个time一清除掉就完成了

19:13.860 --> 19:19.940
因为time一里边 他始终记录的是啥 最后一次 最后一个计时期 对吧

19:20.260 --> 19:25.940
始终记录的是最后一个计时期 把最后一个计时期停止了 那么后边他肯定无法进行后续的操作了

19:26.660 --> 19:27.460
好 开始啊

19:28.420 --> 19:31.060
一 二 这个太慢了啊 太慢了

19:31.540 --> 19:37.620
额 500 300毫秒嘛 点击啊 这样子 好 清除

19:38.500 --> 19:44.100
哎 哎 我看一下啊 我看一下啊 清除那里哪有哪里有问题

19:45.380 --> 19:50.500
呃 我那次重新定义了变量啊 不能重新定义变量啊 得使用拳击变量

19:51.140 --> 19:54.260
啊 清除 看没 开始

19:54.500 --> 19:58.500
清除 开始 清除

19:59.220 --> 20:03.220
好 这就是这道题啊 下来可以把你练习一下啊 练习一下这个例子

20:03.940 --> 20:05.780
好 要会写这种东西啊 要会写

20:06.660 --> 20:10.420
实际上呢 你这种学会之后啊 但是这个东西一定要学会啊 一定要学会

20:11.220 --> 20:14.740
啊 学会之后啊 现在我告诉你 有一种更加简洁的方式

20:16.100 --> 20:23.380
叫做set interview 他本身就提供了这个方法啊 这种intel的方法 上面这个方法呢 是指定时间

20:24.900 --> 20:26.820
到 指定时间

20:27.620 --> 20:30.580
到达后运行某个函数

20:32.340 --> 20:35.540
这个set interview方法呢 指的是指定时间

20:36.660 --> 20:42.740
到达后啊 应该说 指定间隔时间到达后运行某个函数

20:43.220 --> 20:47.220
啊 他会即使 他会不断的运行啊 跟刚才的效果是一样的 会不断的运行

20:47.540 --> 20:51.780
因此呢 我们刚才的效果呢 可以完全使用set interview来做

20:52.420 --> 20:57.380
但是为什么让大家要会写这种 因为你们以后在工作中可能会看到那种方式

20:57.780 --> 21:02.820
set interview呢 有一些小问题啊 我们之后呢 在境界部分再说 现在呢你可以认为他没有问题

21:04.420 --> 21:06.660
我们把这里复制一下啊 复制一下 粘过来

21:07.380 --> 21:13.060
好 这里呢 我们完全可以使用set interview来做啊 这里呢 我们就不写这个函数了

21:13.780 --> 21:16.980
直接在这里什么set interview啊set interview

21:17.460 --> 21:21.780
然后呢 他就能实现同样的功能啊 每隔三秒钟啊 从现在开始计时

21:22.180 --> 21:28.500
300秒 300毫秒之后运行一下 然后又过300毫秒 又运行一下 又过300毫秒 又运行一下 是这么回事啊

21:28.900 --> 21:31.220
好 这里呢 我们写个time 1

21:32.820 --> 21:34.740
time 1 记录下来 记录下来

21:35.060 --> 21:41.060
好 这里呢 点击清楚的事就把清楚掉 是完全一样的啊 跟刚才的效果完全一样 保存看一下

21:42.900 --> 21:46.820
好 点击 是吧 看是不是完全一样的 清楚

21:47.860 --> 21:49.780
点击 又重新计时 清楚

21:50.660 --> 21:52.900
没问题吧啊 完全一样的

21:54.260 --> 21:58.500
啊 但是大家一个细节要注意啊 比方说这里我们写的是3000 比方说写的是3000

21:58.900 --> 22:01.380
你点了过后 你要等3000毫秒之后

22:02.340 --> 22:06.900
才会运行第一次啊 又等3000毫秒才会运行第二次啊 是这么回事啊

22:07.860 --> 22:12.500
讲完了 讲完了 没啥东西啊 非常非常简单

22:13.460 --> 22:20.420
这一块呢 它的复杂度呢 它不在这 不在它的这个原地上面 就是就是与法上面

22:21.540 --> 22:27.700
它的难点在哪呢 在应用啊 应用 有很多的应用呢 需要用这一块的知识

22:28.420 --> 22:32.020
好 比方说我举个例子啊 数字时间

22:32.740 --> 22:38.180
这是你们今天的第一个作业啊 一定要去做的啊 所以说我这里讲了过后呢 我们下节课呢就不再讲了啊

22:38.980 --> 22:39.540
数字时间

22:41.060 --> 22:45.540
就地道题啊 文字始终 文字始终 文字始终

22:47.300 --> 22:48.420
文字始终

22:49.540 --> 22:55.700
好 那这个东西什么呢 比方说啊 咱们又就一个A7远述嘛啊 A7远述 然后呢 直接在这里写了啊 为了方便

22:56.340 --> 22:57.540
这个12点 Center

22:58.500 --> 23:02.500
好 这里边呢 有一个时间啊 0000啊 00

23:03.300 --> 23:06.900
好 下面一个按钮 我这样吧 还是写个样式

23:08.340 --> 23:08.820
导体

23:09.300 --> 23:10.740
take 12呢 Center

23:12.020 --> 23:16.100
好 然后呢 这里就不写了啊 下面一个按钮啊 button

23:18.180 --> 23:18.420
啊

23:19.300 --> 23:26.180
或者不要吧 不要这些按钮了啊 直接开始吧啊 直接开始啊 直接开始 这个A7里边啥都没有啊 啥都没有 直接开始

23:26.740 --> 23:33.460
那么现在呢 我们比方说啊 我要在页面向去显示时间 比方说现在的时间是12点34分30秒

23:33.860 --> 23:40.340
好 那么它不会不断的变化啊 31 32 33 34 它会不断的变化 那是不是要用到计时器对吧

23:41.380 --> 23:46.820
好 这个怎么写呢 我们这里先写这么一个函数方形set time

23:48.100 --> 23:54.660
设置时间 做什么呢 它把时间呢设置到A7远述里边啊 是到这个远述里边

23:55.140 --> 23:59.460
好 我们这里呢 找到这个A7远述啊 query 上那个头

24:00.660 --> 24:02.900
上那个头 找这个A7远述

24:04.420 --> 24:07.700
然后呢 设置时间 每运行一次这个函数 它就会设置时间

24:08.260 --> 24:11.700
好 看着啊 怎么来设置时间 我们之前不是学过吗 这个时间对象 对吧

24:12.180 --> 24:16.740
每一次运行这个函数的时候 得到当前时间 对不对 得到当前时间啊

24:17.220 --> 24:21.300
dead 等于溜 溜的 得到当前时间

24:21.860 --> 24:27.620
好 拿到当前时间之后 我们是不是可能可以拿到什么10分秒 对不对 拿到10分秒

24:27.940 --> 24:32.020
然后把它拼接成制服串 放着就完稍了 就完稍了 就这么简单

24:32.740 --> 24:35.300
当然那里也可以甚至可以什么 最简单的是什么

24:35.940 --> 24:40.740
最简单的就是 我等着自己去拼接了啊 直接什么to no chaos dream

24:41.380 --> 24:43.300
得到本地的时间格式化制服串

24:44.180 --> 24:49.060
好 那么我们每一次调用这个函数是不是就可以设置时间了 每一次调用一次就可以设置时间了

24:49.460 --> 24:50.260
运行看一下啊

24:51.380 --> 24:53.780
啊 你看 目前又是这样的时间 对吧

24:54.740 --> 25:01.220
目前就是这样的时间 每次刷新你看 刷新一面他都会重新设置时间 因为刷新一面过来他会重新运行这个set time

25:02.660 --> 25:08.980
那么这里呢 我们要做的事情其实就很简单了 我们再启动一个计时器啊 再启动一个计时器set interval

25:10.580 --> 25:13.300
直接来 甚至不用写函数了啊 函数是啥 函数就是set time

25:14.100 --> 25:20.660
每隔一秒钟去调用一次这个set time函数 对吧 我们不写匿名函数了 直接把函数名字放过来

25:21.220 --> 25:28.980
因为这个名字就引用了一个函数对象 对吧 所以就直接把函数放过来啊 每一个一秒钟运行这个函数就完了 对吧 就完了 保存你看一下

25:30.740 --> 25:33.380
这就完了 就这么简单啊 就这么简单

25:34.900 --> 25:40.340
那为什么要一开始要调用一次呢 如果你一开始不调用的话 页面是空的 他等了一秒钟过后才会出现

25:41.140 --> 25:42.740
啊 所以说一开始全调用一次

25:43.540 --> 25:50.020
就完了 当然你可以把它写的再完上一点啊 比方说你要用自己的格式啊 你要用使用自己的格式 那怎么来用呢

25:50.740 --> 25:51.940
你可以用这种方式啊

25:54.100 --> 26:00.020
get什么 for year 对吧 得到年啊 得到年 year

26:02.500 --> 26:05.460
啊 然后呢 得到什么月啊 get

26:06.180 --> 26:10.500
啊 或者我们只需要时间嘛 只需要时间get hours hours

26:12.180 --> 26:15.460
啊 月的话你要加一啊 这是minutes

26:17.140 --> 26:17.620
minutes

26:18.580 --> 26:20.900
10分秒 get minutes

26:22.500 --> 26:25.300
10分秒 seconds second

26:26.500 --> 26:27.460
get seconds

26:28.420 --> 26:32.420
好 然后拼接一下 对吧 这里的字不算 拼接一下 拼接啥呢

26:33.860 --> 26:36.820
小时啊 冒号

26:38.500 --> 26:38.980
分钟

26:41.940 --> 26:42.420
分钟

26:43.220 --> 26:44.820
然后冒号秒

26:45.940 --> 26:46.260
second

26:47.220 --> 26:50.820
包穿 看一下啊 总之运行这个函数 它重新设置就行了

26:51.380 --> 26:57.780
好 最后呢 我们把它如果不足两位的话 前面补充0 对吧 好 我们之前学过了 对吧 制服串里边啊 to stream

26:58.100 --> 27:00.660
啊 变成制服串 制服串里边不是不是一个pan的

27:01.700 --> 27:02.500
一个啥呢

27:03.220 --> 27:03.700
pay

27:04.340 --> 27:04.740
呃

27:06.340 --> 27:06.820
start

27:07.620 --> 27:09.060
没写错吧 应该没写错啊

27:09.620 --> 27:10.340
pay to start

27:11.220 --> 27:13.300
两位不足两位的话补充0

27:13.780 --> 27:14.500
好 看一下啊

27:15.460 --> 27:18.260
啊 没问题啊 那么我们这里把它设置一下啊

27:18.580 --> 27:24.820
迷你者也是一样 把它转换成制服串 然后呢不足两位的话补充0 谁可能呢也是一样啊 不足两位补充0

27:27.140 --> 27:32.340
哦 这里还没到 还没到 还没到两位是吧 还没到两位 那我我喝口水啊 你们看一下啊

27:42.110 --> 27:42.590
马上啊

27:46.850 --> 27:51.650
啊 你看 所以前面补充0了 对吧 很简单啊 很简单 这是一个文字始终

27:52.050 --> 27:54.210
很多事情都可以做了啊 很多事情都可以做

27:54.690 --> 27:57.810
呃 比方说吧 再比方说啊 再来一个

28:00.930 --> 28:01.250
呃

28:02.290 --> 28:04.290
自动移动啊 自动移动

28:05.010 --> 28:07.330
好 比方说我们这个页面上呢 有一个

28:07.890 --> 28:08.210
嗯

28:08.850 --> 28:10.290
div啊 有一个div

28:11.010 --> 28:12.610
好 这个div呢 给他一个内样式

28:13.170 --> 28:14.290
就很多事情都可以做了

28:14.770 --> 28:19.810
好 div呢 给他设置一个宽度100个相处啊 高度100个相处

28:20.370 --> 28:20.610
好

28:21.490 --> 28:22.370
然后干嘛呢

28:23.010 --> 28:25.650
宽高100 背景颜色为红色嘛啊 为红色

28:25.970 --> 28:28.450
然后呢 粤红色为absolute

28:28.930 --> 28:31.250
好 红色为纽 红色为纽

28:31.810 --> 28:33.010
好 接下来的一个按钮

28:33.490 --> 28:34.370
啊 一个按钮

28:34.610 --> 28:36.850
好 两个按钮啊 一个是btn1

28:37.970 --> 28:38.610
btn1

28:39.250 --> 28:40.530
好 开始移动

28:41.170 --> 28:41.570
然后呢

28:42.050 --> 28:42.610
btn

28:43.170 --> 28:44.850
btn2 停止移动

28:45.490 --> 28:46.370
啊 停止移动

28:48.210 --> 28:50.370
这可以跟之前的动物姿势混合起来

28:50.530 --> 28:51.890
来做一些丰富的效果出来

28:53.010 --> 28:53.890
好 比方说

28:54.370 --> 28:56.130
咱们呢 点击这个按钮的时候

28:56.450 --> 28:58.850
让这个div呢 向右边移动

28:58.850 --> 28:59.890
咱们来看一下这个页面

29:01.410 --> 29:03.010
我靠 按钮折住了啊

29:03.250 --> 29:05.330
那行吧 我把这个P元说了 写个style

29:05.330 --> 29:05.970
啊 写个style

29:05.970 --> 29:06.450
marking

29:06.770 --> 29:07.890
marking top

29:08.130 --> 29:09.650
为300个相处

29:10.690 --> 29:11.890
好 在这啊 在这

29:13.730 --> 29:15.810
好 然后呢 我们这里这样子来处理啊

29:16.370 --> 29:16.770
嗯

29:18.450 --> 29:20.050
折这个div

29:21.090 --> 29:21.970
query selector

29:23.250 --> 29:23.810
div

29:24.850 --> 29:27.890
拿到之后呢 给什么呢 给按钮1注册点击事件

29:28.370 --> 29:30.050
点击按钮1的时候干嘛呢

29:30.530 --> 29:33.170
让这个div不断的往右边移动

29:33.170 --> 29:34.530
啊 不断的往右边移动

29:34.530 --> 29:36.370
怎么 什么叫做往右边移动 是不是吧

29:37.010 --> 29:38.930
他的left增加就行了 对吧

29:38.930 --> 29:40.370
把他的left增加就行了

29:40.370 --> 29:42.530
所以说我们这里得到他原来的left等于多少

29:42.530 --> 29:43.330
等于0 对吧

29:43.810 --> 29:45.330
一开始等于0 left

29:45.330 --> 29:47.490
好 然后呢 我们每次点

29:47.650 --> 29:49.810
就点了一下过后呢 启动一个计时器

29:50.530 --> 29:51.330
set interval

29:51.650 --> 29:52.530
启动一个计时器

29:53.490 --> 29:54.130
每个

29:55.090 --> 29:55.810
多少时间呢

29:56.210 --> 29:57.890
一秒 一个可以说两秒

29:57.890 --> 29:58.930
一个可以说半秒

29:59.250 --> 30:01.330
时间太长了 一个时间太长了

30:02.050 --> 30:02.610
30毫秒

30:03.570 --> 30:04.210
30毫秒

30:04.690 --> 30:06.930
每个一个非常短的时间 甚至16毫秒

30:07.250 --> 30:07.810
16毫秒

30:09.250 --> 30:11.170
然后每个一个非常短的时间内

30:11.570 --> 30:14.530
然后呢 每个一个一段时间去运行是这个函数

30:14.530 --> 30:16.130
这个函数运行怎么运行的

30:16.130 --> 30:17.090
我让他的就是

30:18.130 --> 30:19.570
位置left加1

30:20.050 --> 30:20.690
left加加

30:21.650 --> 30:23.250
加了之后 过目干嘛呢

30:23.250 --> 30:25.250
就把这个div style left

30:25.250 --> 30:26.050
设置为什么

30:26.450 --> 30:27.970
left 凭接上一个px

30:27.970 --> 30:29.010
就这么简单 完了

30:30.370 --> 30:32.770
保存看一下 点击过后设置个计时器

30:34.610 --> 30:35.250
点击移动

30:36.450 --> 30:37.970
所以开始移动了 自动移动的

30:38.290 --> 30:38.690
对吧

30:39.010 --> 30:40.930
每一段时间增加一个left

30:41.330 --> 30:42.130
好 再看

30:43.570 --> 30:45.250
点击移动 如果我不停的点击了

30:45.250 --> 30:46.210
它会是不是越来越快了

30:46.850 --> 30:47.810
为什么会这样子呢

30:48.450 --> 30:50.290
我不停的点击的话 它又会越来越快

30:50.930 --> 30:53.890
那如果你不想有这种现象怎么办呢

30:54.290 --> 30:56.290
首先你要了解为什么会有这种现象

30:56.770 --> 30:57.250
为什么呢

30:57.570 --> 31:00.450
是因为你这样子每一次点击是不是启动了一个计时器

31:01.410 --> 31:03.570
每一次点击它都启动了一个计时器

31:04.290 --> 31:06.690
那么这样子的话 它计时器会越来越多

31:06.690 --> 31:09.410
就是每一个计时器的16毫秒

31:09.410 --> 31:10.530
然后呢 增加一次

31:10.770 --> 31:12.610
一个计时器的16毫秒增加一次

31:13.010 --> 31:14.290
那这样子计时器多了

31:14.290 --> 31:15.490
那是不是增加的次数也多了

31:16.050 --> 31:17.810
因此呢 你这里最好做这么一个处理

31:18.610 --> 31:19.250
做什么处理呢

31:19.810 --> 31:20.450
把它记录下来

31:20.930 --> 31:23.730
每一个计时器呢 都把它记录下来

31:24.290 --> 31:25.330
记录到摊板里边

31:25.730 --> 31:26.450
记录到这里边

31:27.010 --> 31:29.970
好 你要开计时器的时候 你先判断一下

31:30.530 --> 31:32.450
如果这个摊板已经有值了

31:33.010 --> 31:34.850
就是已经存在一个计时器了

31:34.850 --> 31:36.610
如果它有值 是不是一定有计时器

31:36.610 --> 31:37.570
它有编号嘛 对吧

31:38.050 --> 31:39.410
那它一定有计时器

31:39.890 --> 31:40.850
一定有计时器

31:41.010 --> 31:42.370
那么如果已经有计时器了

31:42.370 --> 31:43.170
你什么都不做

31:43.570 --> 31:44.930
什么都不干 就完事了

31:45.730 --> 31:46.610
好 保存看一下

31:47.490 --> 31:48.130
开始启动

31:48.130 --> 31:49.570
那你现在再怎么点都无所谓了

31:49.650 --> 31:51.170
因为后续的点击呢

31:51.170 --> 31:52.610
这个计时器已经没有了

31:52.610 --> 31:53.490
对吧 已经没有了

31:54.130 --> 31:54.770
明白这个意思吗

31:55.490 --> 31:57.570
停止移动 停止移动也很简单

31:57.570 --> 31:58.930
BTN2 onClick

31:59.810 --> 32:00.290
放个信

32:01.170 --> 32:02.290
停止移动怎么停止

32:02.290 --> 32:03.650
ClearInterval

32:04.850 --> 32:09.650
它的清楚的是ClearInterval

32:10.450 --> 32:10.850
方法

32:11.250 --> 32:12.290
刚才忘了说了对吧

32:12.290 --> 32:14.050
清楚计时器

32:14.770 --> 32:15.410
是一样的

32:15.410 --> 32:16.930
刚才我看这里有没有写

32:17.250 --> 32:18.210
我这里写错了

32:18.210 --> 32:19.490
应该是Clear

32:20.290 --> 32:20.930
Interval

32:24.460 --> 32:25.180
明白这个意思吧

32:27.020 --> 32:29.100
这里ClearInterval

32:29.100 --> 32:30.060
然后这里面要传啥呢

32:30.060 --> 32:31.020
传的就是计时器

32:31.980 --> 32:33.100
保存

32:33.340 --> 32:33.980
看一下

32:34.300 --> 32:35.100
开始移动

32:35.340 --> 32:35.820
停止

32:36.380 --> 32:37.020
开始移动

32:38.380 --> 32:39.580
为什么不行了

32:39.580 --> 32:39.980
看一下

32:40.620 --> 32:41.820
看一下为什么不行了

32:42.540 --> 32:43.900
现在你清楚之后

32:43.900 --> 32:45.420
但是这个变量的值

32:45.420 --> 32:46.220
它不会消失的

32:46.220 --> 32:48.140
比方说变量里边记录了一个20

32:48.700 --> 32:50.060
20的值它不会消失的

32:50.140 --> 32:52.380
因此你下一次在点击开始移动的时候

32:52.380 --> 32:53.580
它判断它已经有值了

32:53.580 --> 32:54.940
它就没有启动计时器了

32:54.940 --> 32:56.140
所以说我们清楚的时候

32:56.140 --> 32:57.020
还要做一件事

32:57.020 --> 32:58.540
把它设置为什么NOW

32:58.540 --> 33:00.380
把设置为NOW或者是undefine

33:00.380 --> 33:01.340
让它没有值

33:01.340 --> 33:02.700
那么下一时启动的时候

33:02.700 --> 33:03.580
发现它没有值

33:03.580 --> 33:05.020
于是它会继续启动

33:05.020 --> 33:07.500
这是一种非常非常常见的一种格式

33:07.500 --> 33:08.700
启动的时候判断一下

33:08.700 --> 33:09.660
有没有计时器

33:09.660 --> 33:10.300
有的话

33:10.620 --> 33:11.100
结束

33:12.060 --> 33:16.380
然后这里如果没有计时器的话

33:16.380 --> 33:16.780
启动

33:17.260 --> 33:19.020
清楚的时候不但要清楚

33:19.100 --> 33:20.140
还要把它设置为空

33:20.140 --> 33:22.060
表示它之后又可以启动了

33:22.620 --> 33:23.180
保存

33:23.660 --> 33:24.380
开始移动

33:24.700 --> 33:25.340
停止

33:25.580 --> 33:26.300
开始移动

33:26.300 --> 33:26.940
停止

33:26.940 --> 33:27.580
开始移动

33:27.580 --> 33:28.060
停止

33:28.620 --> 33:29.100
对吧

33:29.580 --> 33:31.500
目前我们没有判断边界

33:31.500 --> 33:32.620
没有判断边界

33:33.260 --> 33:33.580
好

33:33.580 --> 33:34.300
这是这一块

33:35.180 --> 33:35.660
行了

33:35.980 --> 33:37.100
讲这么两个例子

33:37.100 --> 33:38.300
下来都要做一遍

33:38.300 --> 33:40.700
文字始终和自动移动都要做一遍

33:40.700 --> 33:41.980
然后我们来看作业

33:41.980 --> 33:43.180
作业一共四道题

33:43.740 --> 33:44.540
题不多

33:44.540 --> 33:46.300
但是有些题是有些难度的

33:46.620 --> 33:47.580
地道题文字始终

33:47.660 --> 33:49.020
刚才说了把完成就行了

33:49.020 --> 33:49.580
不管了

33:49.580 --> 33:50.060
第二个

33:50.060 --> 33:51.180
APM计算器

33:52.060 --> 33:53.100
什么叫APM

33:53.100 --> 33:54.300
有些同学应该知道

33:54.300 --> 33:55.980
经常玩游戏的话应该知道

33:55.980 --> 33:58.540
就是表示一分钟之内

33:58.540 --> 34:00.700
你的有效点击次数

34:00.700 --> 34:01.740
就是APM

34:01.740 --> 34:03.180
就是你数到点了多少次

34:03.180 --> 34:04.540
看你的手术

34:04.540 --> 34:05.100
好

34:05.100 --> 34:06.460
那么这个我们看一下

34:06.460 --> 34:08.140
这里的一个刀计时

34:08.140 --> 34:09.500
刀计时60秒

34:09.500 --> 34:10.700
当然你在测试的过程中

34:10.700 --> 34:11.820
60秒它难得等了

34:11.820 --> 34:12.060
对吧

34:12.060 --> 34:13.820
你可以把它设置短一点

34:13.820 --> 34:15.500
总之刀计时

34:16.460 --> 34:17.820
然后我们开始点击

34:17.820 --> 34:18.860
第一次开始点击的时候

34:18.860 --> 34:19.820
刀计时开始

34:19.820 --> 34:21.980
刀计时不是一开始就开始的

34:21.980 --> 34:23.500
是第一次开始点击的时候

34:23.500 --> 34:24.940
刀计时开始

34:24.940 --> 34:26.220
然后这里记录点击数

34:26.220 --> 34:27.100
点击一下就记录

34:27.100 --> 34:28.620
一点击两下就记录二

34:28.620 --> 34:29.500
点击数

34:29.500 --> 34:31.260
刀计时为0的时候

34:31.260 --> 34:32.540
你点击就无效了

34:32.540 --> 34:33.420
点击就无效了

34:33.420 --> 34:34.300
那么这里就记录了

34:34.300 --> 34:35.180
记录的是啥

34:35.180 --> 34:36.220
记录的是你最终的

34:36.220 --> 34:37.580
一分钟点击次数

34:37.580 --> 34:38.220
是这么个意思

34:39.500 --> 34:42.620
重置就是把它回到最开始的状态

34:42.620 --> 34:44.140
回到最开始的状态

34:44.300 --> 34:45.740
来思考一下这道题怎么做

34:45.740 --> 34:46.780
这是APM计算器

34:47.820 --> 34:48.060
好

34:48.060 --> 34:49.580
第三题自动移动的DIV

34:49.580 --> 34:50.300
我们刚才说了

34:50.300 --> 34:51.420
但是这个有点不一样

34:52.060 --> 34:52.620
这个DIV

34:52.620 --> 34:54.460
我把它做成一个圆角举行

34:54.460 --> 34:55.820
圆角就是这样子

34:55.820 --> 34:56.620
Border Radius

34:56.620 --> 34:57.420
对吧

34:57.420 --> 34:59.500
表示四个角的圆角弧度

34:59.500 --> 35:00.540
就是圆角半径

35:00.540 --> 35:01.660
把它设为50%

35:01.660 --> 35:02.300
它变成一个圆

35:03.180 --> 35:04.380
总之我们这个不是重点

35:04.940 --> 35:06.300
就如果哪怕你没有学过圆角

35:06.300 --> 35:07.020
也没关系

35:07.020 --> 35:08.220
总之给你做出来了

35:09.020 --> 35:09.900
这个DIV呢

35:11.100 --> 35:12.620
在这摸论位置在这

35:13.180 --> 35:13.820
然后呢

35:13.820 --> 35:14.860
我要让它这样子移动

35:15.500 --> 35:16.540
往右下移动

35:17.020 --> 35:18.700
遇到边缘要反弹

35:19.260 --> 35:20.140
要弹回去

35:20.140 --> 35:21.260
遇到边缘要反弹

35:21.660 --> 35:22.220
你要这个意思

35:22.780 --> 35:23.500
这样子来移动

35:24.300 --> 35:24.860
明白吧

35:24.860 --> 35:25.420
没问题吧

35:26.140 --> 35:26.940
来做一下这个

35:27.580 --> 35:28.300
直接移动

35:28.300 --> 35:29.020
不用什么控制

35:29.020 --> 35:30.300
不用按钮控制直接移动

35:31.500 --> 35:31.740
好

35:31.740 --> 35:32.940
最后一道题是最难的

35:32.940 --> 35:35.020
是无缝轮波图

35:35.500 --> 35:37.260
这个是我们在网页上

35:37.260 --> 35:39.260
经常看见的一种效果

35:39.740 --> 35:40.380
现在可以做了

35:40.380 --> 35:40.940
以前做不了

35:41.420 --> 35:42.060
现在可以做了

35:42.940 --> 35:43.580
以前我们做了

35:43.580 --> 35:44.540
好像做了一个轮波图

35:44.540 --> 35:45.500
切换图片

35:45.500 --> 35:46.540
切换图片

35:46.540 --> 35:47.020
但是呢

35:47.020 --> 35:47.900
那个东西呢

35:47.900 --> 35:48.700
它没有动画

35:48.700 --> 35:49.820
现在可以做动画了

35:50.700 --> 35:52.380
完全模仿的淘宝网

35:54.460 --> 35:55.100
就这个地方

35:55.500 --> 35:55.900
你看

35:56.620 --> 35:57.180
轮波图

35:57.180 --> 35:57.500
对吧

35:58.060 --> 35:59.180
完全模仿这一块

36:00.060 --> 36:00.940
并且是无缝的

36:00.940 --> 36:01.420
你看了没

36:02.060 --> 36:02.780
什么叫无缝

36:02.780 --> 36:04.620
你看到到到最后一个的时候

36:04.620 --> 36:05.340
再点击右

36:05.340 --> 36:06.700
你是不是还是往左边移动

36:06.700 --> 36:07.100
对吧

36:07.340 --> 36:08.300
它是一个无缝

36:08.300 --> 36:08.940
无缝滚动的

36:08.940 --> 36:10.140
好像是可以无线滚动的

36:10.140 --> 36:10.700
看没

36:10.700 --> 36:11.820
好像是可以无线的

36:12.780 --> 36:13.580
这个地方

36:13.820 --> 36:14.780
是有些难度的

36:14.780 --> 36:15.660
难度还不小

36:16.540 --> 36:17.580
因为这个地方

36:17.580 --> 36:19.500
是我用一节公开课来讲的

36:19.980 --> 36:20.780
大家做一下

36:20.780 --> 36:21.500
做一下这个

36:21.500 --> 36:22.300
试着做一下

36:22.300 --> 36:22.860
反正你

36:23.580 --> 36:24.300
试好了越多

36:24.300 --> 36:25.500
肯定对你有事有帮助的

36:25.980 --> 36:26.460
好吧

36:26.460 --> 36:27.340
这就是咱们

36:27.740 --> 36:28.300
第1节课

36:28.300 --> 36:28.780
即时器

36:29.340 --> 36:30.700
应该说是波姆里面

36:30.700 --> 36:31.740
最重要的支持了

36:31.740 --> 36:32.700
虽然还很简单

36:32.700 --> 36:33.020
但是呢

36:33.020 --> 36:33.740
它的消

36:34.380 --> 36:35.340
做的应用了

36:35.340 --> 36:36.060
并不简单

36:36.060 --> 36:37.340
因为它跟多姆那一块

36:37.340 --> 36:39.180
进行融合来进行应用

36:39.740 --> 36:40.140
好吧

36:40.140 --> 36:40.700
把它做一下

