WEBVTT

00:00.000 --> 00:17.950
先说一下 这个属性描述府这一块的知识呢 是一个扩展课程

00:18.670 --> 00:25.390
扩展课程的这种知识呢 你不学的话 也不会影响你的开发 但是呢 你学习之后呢 你可以开拓你的视野

00:25.870 --> 00:34.270
啊 无论是为了应付面试题 还是说以后呢 你写一些更加底层的框架 你可能会用到这些知识啊

00:34.790 --> 00:38.550
包括后边我们学啊 你们学前端的话 后边还有很多课程

00:39.510 --> 00:49.430
其中一个课程呢 叫做vue vue 可能有些同学听说过 那么学到那个框架的时候呢 你会发现它的技术实现的话 也就是用了属性描述府的知识

00:50.070 --> 00:55.670
好吧 我们这一课呢 来介绍一下属性描述府 啊 这里呢有个链接

00:56.310 --> 00:59.830
通过这个链接地址呢 我们可以看到属性描述府里边有一些配置

01:00.470 --> 01:05.430
好吧 以后呢 我们会进入这个链接去看一下 啊 这里呢 首先说一下啊

01:06.390 --> 01:14.550
它什么叫做属性描述府 它能用来干嘛的 我们知道啊 一个对象啊 它里边可能会有一些属性 对吧 有些属性

01:14.950 --> 01:24.310
这个属性呢 可能会是一个函数 也可能呢 是一个简单的啊 一个原始类型 然后一个制服串 或者是一个数字 对不对

01:24.630 --> 01:32.710
这些都是属性嘛 一个对象里边的属性 或者是呢 这个属性呢 本身呢 也是一个对象 对吧 这些都是都称之为属性

01:32.950 --> 01:34.710
你看 这些东西全是属性

01:35.990 --> 01:44.230
属性这个东西呢 我们以前啊 了解的只有两个东西 它里边相关信息的话 只有两个 一个呢 是属性的名字

01:45.350 --> 01:56.390
一个呢 是属性的值 对吧啊 无非分为原始类型和引用类型啊 但是呢 它总有一个值 这就是属性的值 这些这些东西都是属性的值

01:56.550 --> 02:06.950
我们可以知道啊 以前呢 我们的属性里边 只有两个 一个是属性名 一个是属性值 而实际上呢 属性里边还有一些相关信息

02:07.270 --> 02:16.790
可能你现在呢 还不知道这些相关信息 还有什么用 到底用来干嘛 没关系啊 我们把这些相关信息呢 就叫做属性描述服

02:17.590 --> 02:33.750
属性描述服是什么意思呢 他表达了 他表达了一个属性的相关信息 我们通常把这个东西呢 称之为原数据

02:34.870 --> 02:43.510
属性是不是数据 属性当然是数据啊 你不要可以存数据嘛 属性本身的是数据 那么用来描述这个数据

02:43.990 --> 02:51.510
相关的信息的叫做原数据 所以我们简单的说的话 原数据就是描述数据的数据

02:53.350 --> 03:00.790
有点绕 是吧 属性描述服呢 他表示的是一个属性的相关信息 他的本质呢 他本质上

03:01.830 --> 03:07.830
是一个对象 他是一个对象 用这个对象来描述一个属性的相关信息

03:08.550 --> 03:15.830
好 现在说的还是有一些抽象 因为你没有看到具体的例子 对不对 所以说呢 我们这里不着急啊 我们后面会举一些例子

03:16.710 --> 03:19.990
好 这里呢 我们再来认识一个概念 先不着急啊 我们先来认识一些概念

03:20.630 --> 03:24.230
第一个概念呢 叫做数据属性 就属性了他也有分类

03:24.950 --> 03:33.750
啊 甭管是 我们说属性如果他的指示一个方 如果他的指示一个函数的话 我们把它称之为方法 对吧 但方法本质上的也是一个属性

03:34.470 --> 03:43.350
有一种属性呢 叫做数据属性 我们之前呢 学习的所有的属性 都是数据属性 全都是数据属性

03:43.910 --> 03:53.430
就是我们以前的对象对吧 一个对象里边给他复制 你看这些东西全是数据属性啊 啊 举个例子吧 比方说我们这里随便举个例子啊

03:55.430 --> 04:00.790
数据属性 其实我们以前呢 写的所有的代码都用的是数据属性

04:01.750 --> 04:09.910
啊 比方说我们这里写的一个对象啊 一个对象 他里边没有属性对不对啊 那么比方说我给他加一个属性啊 x 等于1

04:11.030 --> 04:15.270
这个x是一个属性 那么这种写法呢就叫做数据属性

04:16.070 --> 04:20.150
你看这个意思吧 还有一种写法 还有一种写法呢 比方说 y 等于2

04:21.110 --> 04:26.390
那么这个 y 这个属性是给他添加进去了对吧 这种属性呢也叫做数据属性

04:26.950 --> 04:36.310
啊 你通过直接复制来添加的属性 或者说你在初始化这个对象的时候呢 你给他添加的属性都叫做数据属性

04:36.710 --> 04:44.390
啊 哪怕你给他写成一个啊 哪怕你给他写成一个就是函数 他也叫做数据属性啊 因为函数的本质呢

04:44.870 --> 04:47.270
把它叫方法 那方法的本质呢 就是属性

04:47.990 --> 04:53.750
原来这个意思吧 啊 这以前呢 我们写的都是数据属性啊 这些数据属性

04:54.710 --> 04:58.550
好 现在认识什么概念啊 数据属性 它里边大概存数据对吧

04:59.990 --> 05:05.830
好 还有另外一种属性 另外一种属性呢 我们从来没有接触过啊 咱们在这些课来接触一下

05:06.630 --> 05:10.070
存取属性啊 或者叫做存取器属性

05:11.430 --> 05:16.630
这个属性是什么意思呢 存取器属性啊 他有这么一个特点

05:17.350 --> 05:25.110
当给他负质时啊 一个是负质会自动运行一个函数

05:26.470 --> 05:31.910
当给当取他 就是当获取他的质时

05:34.280 --> 05:42.760
会自动运行一个函数 就是说我们操作属性的时候呢 有一种特殊的属性 他叫做存取器属性

05:45.020 --> 05:52.460
这种属性呢 就不太一样了啊 那么假设啊 假设我们这里 假设这个x呢 是一个存取器属性

05:52.700 --> 05:57.900
那么我给他负质的时候呢 他不是简单的负质 把这个负质是什么意思 我们之前说过

05:58.300 --> 06:04.620
就是把一个东西一个数据保存到一块内存空间 对吧 或者说把他的地址呢 存放到某一个地方去

06:05.660 --> 06:10.780
都是这么个意思啊 这里呢 就是保存一个直接的数据到他的内存空间 是这么个意思

06:11.180 --> 06:15.660
但是如果你是一个存取器属性的话 他不会这样子简单处理

06:16.380 --> 06:23.900
假设这个x呢 是一个存取器属性 那么这个时候呢 他会会怎么样呢 会运行一个函数

06:24.380 --> 06:33.740
这是负质 那么取值的时候呢 比方说我们取值cancel log objx 那么这个时候呢 也会运行一个函数

06:34.540 --> 06:40.940
你看是不是把值取出来输出 对吧 把值取出来输出 那么这个时候呢 也会运行一个函数 你看这个意思吧

06:42.620 --> 06:46.300
这里都是做假设啊 他本质上 他现在呢 肯定还是一个数据属性

06:47.020 --> 06:52.220
那么现在的问题就是 我们怎么样把一个属性编成存取器属性

06:52.940 --> 06:59.820
又怎么样告诉他运行哪一个函数 你给他负质的时候运行哪一个函数 你给他取值的时候运行哪一个函数

07:00.060 --> 07:04.220
就怎么来告诉他 怎么来告诉他呢 就要通过属性描述服

07:05.340 --> 07:13.740
属性描述服里边 他记录了一个属性的相关信息 属性的名字 属性的值 还有什么 还有属性的存取器

07:14.540 --> 07:21.020
存取器呢 也是属性的相关信息 一般来说 一个属性的话 默认情况下 他是没有存取器的

07:21.420 --> 07:23.660
没有 你直接写个属性的话 就是数据属性

07:24.300 --> 07:28.540
那如果我要做一个存取器属性出来 怎么办呢 就需要给高速这个

07:29.420 --> 07:33.740
介石 我描述一下这个属性 这个属性里边是包含存取器的

07:34.300 --> 07:39.260
好 那么怎么来描述呢 描述的方式 就是使用一个opg车的一个静态方法

07:40.380 --> 07:46.700
啊 叫做opg车 第二 底范 底范什么意思 定义啊 定义 property 一个属性

07:47.500 --> 07:53.580
定义一个属性 以前呢 我们定义属性是不是都在这里写的 对吧 都在这里边写的 对吧 定一个属性

07:53.900 --> 07:59.180
或者说呢 后面给他添加 像这样子给他添加一个属性 那么现在你不能这样做了

07:59.420 --> 08:04.700
如果你要做一个存取器属性的话 你不能这样做了 你要添加一个属性 你得这样添加

08:05.900 --> 08:13.340
啊 用什么方式添加呢 用 object 静态方法 define property

08:14.140 --> 08:19.180
define 定义 property 属性 定义一个属性 这里边呢 要传三个参数

08:19.980 --> 08:20.780
第一个参数

08:21.740 --> 08:27.740
就是一个对象 你要定 你要在哪个定 哪个对象上面定义属性 哪个对象呢 我们就这个对象呗

08:29.020 --> 08:35.500
在这个对象上面定一个属性 第二个参数呢 添的是属性的名称啊 属性的名称

08:36.060 --> 08:37.420
好 那么这里呢 比方说

08:38.300 --> 08:45.500
x啊 x 是一个字幕串啊 属性的名称是一个字幕串 我们之前都讲过啊 属性的本质呢 名称的本质上是一个字幕串

08:46.460 --> 08:51.260
好 第三个参数很重要了 第三个参数就是属性描述服

08:52.460 --> 08:57.260
描述服啊 这个描述服里边 有很多东西可以配置 配置

08:57.660 --> 09:02.460
它的配置是啥呢 配置的是这个对象的 这个属性的相关信息

09:03.900 --> 09:09.980
属性描述服本质上是一个对象 属性的描述服本质上是一个对象

09:10.300 --> 09:13.580
这个对象里边用一些属性来描述这个属性

09:14.300 --> 09:20.620
在这个对象里边配置这个属性的相关信息是这么个意思啊 那么这几颗学的是啥呢 学的其实就是

09:21.100 --> 09:24.940
这个描述服对象里边可以填哪些东西 有哪些东西可以配置

09:25.420 --> 09:30.540
我们可以看到这个网站里边的 这个MDN里边呢 他给你说到了啊 有哪些地方可以配置

09:30.940 --> 09:36.460
配置的东西其实也不多 有些属性可以配置的 其中一个属性呢 叫做value

09:37.420 --> 09:43.820
value属性 我们来看一下这个value属性嘛 好 value属性的话 比方说啊 我们就把下面两行注释掉

09:45.100 --> 09:49.340
如果我这个对象里边啥都不写 那么会怎么样呢 我们来看一下

09:51.340 --> 09:56.300
啥都没写 对吧 接下来我们来看一下啊 这里把人过来

09:57.980 --> 10:00.060
好 然后呢 我们来看一下这个ob界

10:00.940 --> 10:07.100
他说有已经有一个属性了 属性x嘛 对不对 已经有一个属性了 这个属性的值是啥 是undefined

10:07.500 --> 10:08.940
为什么呢 因为他说了

10:09.980 --> 10:16.700
如果你没有配置这个value 这个属性啊 他的值 你没有配置属性的值 value就表示的值 对吧

10:17.180 --> 10:19.260
他的默认值呢 为undefined

10:19.980 --> 10:21.100
默认值为undefined

10:21.740 --> 10:24.300
所以说呢 你这里没有配置就相当于是写的一个undefined

10:24.780 --> 10:28.140
好 那么可不可以配置呢 当然可以配置 value 比方说给他配置为1

10:28.860 --> 10:31.180
给他配置为1 保存一下啊 你看一下

10:31.740 --> 10:34.780
这边ob界 你看一下x是不等于1了

10:35.660 --> 10:42.940
啊 那么这种邪法 就这里的这种邪法呢 就相当于是ob界x等于1 一样的啊 他仍然是一个数据属性

10:43.500 --> 10:44.620
仍然是一个数据属性

10:45.420 --> 10:47.900
表示他一边有一个属性 给他复制为了1

10:48.460 --> 10:51.740
好 接下来让我们来看一下一个存去器属性怎么做

10:52.380 --> 10:54.300
存去器属性呢 无非就是

10:54.860 --> 10:59.260
给他加一些配置 给他加一些配置 什么配置呢 配置这个

11:00.780 --> 11:02.460
一个是get 一个是set

11:03.420 --> 11:05.020
好 咱们来看一下啊 来看一下

11:05.580 --> 11:06.540
一个是get

11:10.380 --> 11:15.740
如果你写把你配置到这个东西啊 他是一个函数啊 无论是get还是set 他都是一个函数

11:16.620 --> 11:21.100
包括set 对吧 这是属性的 这是属性的值嘛 对吧 配置对象里面属性的值

11:21.580 --> 11:24.700
配置对象里面有很多配置 每个配置呢 就是一个属性

11:25.180 --> 11:29.340
其中一个get 一个set 他就是来配置一个存去器属性

11:29.820 --> 11:32.060
如果你写了这个东西 只要你写了

11:33.020 --> 11:36.540
他就表示一个存去器属性了 而同时呢

11:37.260 --> 11:40.220
如果是一个存去器属性的话 我们看下面

11:41.340 --> 11:45.260
存去描述服 就是表示一个 这个属性呢 是一个存去器属性

11:45.580 --> 11:50.940
那么他会告诉你 你这个value值呢 是无效的 你配置 value值是无效的

11:51.340 --> 11:55.100
后边我们再说啊 如果你配置了get和set

11:55.580 --> 12:00.380
那么他的配 你配置的value值是无效的 就是你这里写的更没写是一样的

12:00.780 --> 12:04.700
写的更没写是一样的 咱们来看一下啊 看一下 我们

12:05.740 --> 12:08.540
他说什么 他说 他已经告诉你了啊 他说什么呢

12:09.900 --> 12:16.620
他说你已经是一个存去器属性了啊 那么你就不应该配置这个value值啊 他说不能

12:17.580 --> 12:20.140
指定 同时指定 both specific

12:21.500 --> 12:23.260
同时指定是什么啊 auxeters

12:24.220 --> 12:27.500
auxeters是什么意思啊  auxeters是什么意思 就是表示的是

12:28.060 --> 12:32.700
访问器啊 就表示存去器 就表示这个东西 这个东西联合起来叫做 auxeters

12:33.340 --> 12:35.900
一个get一个set 所以他用的是附属

12:36.780 --> 12:41.100
不能同时指定存去器和一个value属性值

12:42.060 --> 12:45.980
没有这个意思吧 你不能同时指定这两个东西 所以说你这里

12:46.220 --> 12:48.380
如果你写成了存去器 哪怕你只写了一个

12:49.180 --> 12:52.300
你都不能去指定这个value值 你看保存是一样的错误

12:52.940 --> 12:58.220
所以说你只要配置了存去器属性 你就不能设置value值了啊 把这个value值取消掉

12:59.180 --> 13:03.900
好 取消掉过后呢 我们再来看这个obj里边这个x 有吗

13:04.700 --> 13:08.940
有吗 他有啊 他有x 然后他变成他是undefined

13:09.260 --> 13:13.340
好 我们来解释一下啊 这两个函数是来干嘛的

13:14.220 --> 13:17.500
第一个函数干嘛的呢 第一个函数他表示的意思是

13:18.220 --> 13:21.100
当读取属性x10

13:22.300 --> 13:27.500
运行的函数 他表示了这么一个意思啊 你只要再读这个属性的值

13:28.300 --> 13:32.060
他就会运行这个函数 好比方说这个函数里边 我们输出一个东西

13:33.100 --> 13:35.180
console log啊 读取

13:36.140 --> 13:40.620
属性x 你看 你只要读他的时候 他就会运行这个函数

13:41.340 --> 13:44.940
并且呢 该函数的返回值

13:45.900 --> 13:47.180
将作为

13:49.340 --> 13:50.140
属性的值

13:51.020 --> 13:55.820
这个函数的返回值将作为属性的值 好这个函数里边 我们比方说返回一个2

13:55.820 --> 13:57.180
比方说返回一个2

13:57.900 --> 13:59.900
好 那么咱们来看一下一个神奇的效果

14:00.860 --> 14:04.060
我们输出啥呢 输出obj.x

14:04.620 --> 14:07.980
他又没有这个属性 肯定有 他有这个属性 保存看一下

14:09.260 --> 14:12.860
他输出了2 为什么输出2 是因为我返回了2

14:13.500 --> 14:17.180
他就输出了2 明白这个意思吧 返回了2 他就输出了2

14:17.180 --> 14:20.780
他这里本质上的 由于x现在已经不再是一个数据属性了

14:21.420 --> 14:24.060
他是一个存取器属性 因为我们设置了这个东西

14:24.780 --> 14:26.540
因此呢 你读他的值的时候

14:27.260 --> 14:31.020
读的是什么呢 读的是 其实是运行的是一个函数

14:31.020 --> 14:34.220
这里相当于是什么呢 相当于是雕用了

14:36.220 --> 14:39.660
雕用了函数 把函数的返回结果放在这里 是吧

14:40.380 --> 14:42.780
你这样子写的过后了 相当于是运行的一个函数

14:42.780 --> 14:45.180
那么函数的返回结果是2 那这里肯定输出2

14:46.380 --> 14:50.300
只不过呢 语法上呢 你看上去呢 还是一个正常的属性

14:50.300 --> 14:52.940
但是呢 他已经是一个存取器属性了

14:53.500 --> 14:56.380
怎么来证明他可以 他运行的函数呢 因为他输出了这句话

14:57.020 --> 14:59.340
他输出了这句话 是不是运行的函数 对吧

15:00.140 --> 15:02.620
那既然他是一个函数 是不是我们可以做任何事情

15:02.620 --> 15:05.900
想做啥做啥 好 咱们再来看set

15:06.860 --> 15:09.420
set set这个函数表示什么意思呢

15:10.380 --> 15:19.340
当给该属性 该属性负值时运行的函数

15:19.980 --> 15:23.180
他这么个意思 好 这个函数里边呢 会有一个参数

15:23.660 --> 15:27.100
这个参数呢 你当然一般情况下都需要这个参数

15:27.740 --> 15:31.020
你需要一个参数 这个参数是什么意思呢 这个参数挖

15:33.100 --> 15:37.980
挖 他表示的意思是 表示要负负的值

15:38.940 --> 15:44.060
要负的值 比方说我们这里ob借点x把它负值为3

15:45.020 --> 15:51.340
那么这个挖 他就会 这里就相当于是 相当于运行的set

15:52.060 --> 15:55.260
set 3 运行的这个函数 没有这个意思吧

15:55.980 --> 15:59.340
相当于运行的这个函数 你要负值的时候他就会运行这个函数

15:59.500 --> 16:07.340
好 比方说我们这里输出一个给属性负值为

16:08.300 --> 16:13.180
凭借一下吧 看一下啊 看他有没有运行这个函数 我们写这么一句话

16:13.500 --> 16:14.940
看他有没有运行这个函数

16:15.580 --> 16:19.020
好 保存 你看一下是不是运行了这个函数 对吧

16:19.420 --> 16:21.820
你负值的时候他就会运行这个函数

16:22.380 --> 16:27.900
于是呢 这样子一写这个x这个属性 他就不再是一个数据属性了 不再是一个普通属性了

16:28.140 --> 16:33.420
而变成了每一次负值和取值 变成了一次简单的函数执行

16:33.980 --> 16:36.940
其他的什么事情都不管 他只管函数执行

16:37.820 --> 16:42.940
好 那这个时候面试题出现了啊 面试题就可能会考虑这个玩意儿

16:42.940 --> 16:46.140
当然他考这个东西呢 考了就已经比较深了啊 因为很多

16:46.860 --> 16:52.140
特别是介绍的初学者都不太知道这个东西 属性不要舒服 好 那么咱们看一下

16:53.500 --> 16:55.420
现在呢 他问你 问你啥呢

16:56.860 --> 17:03.180
我这里如果输出一个objx 控制台里边会输出什么东西 会输出哪些东西

17:04.860 --> 17:06.700
会输出哪些东西 你看一下这个代码

17:08.220 --> 17:09.660
控制台里边会有哪些显示

17:11.020 --> 17:12.060
会哪些显示呢

17:14.300 --> 17:18.860
首先你这里是不是该复制 复制是不是运行函数 他会运行这个函数

17:19.500 --> 17:24.780
好 那么这里呢 得到的结果就是首先输出了这么一句话 给属性值复制为什么呢

17:25.180 --> 17:26.860
为3 他会输出这句话 对吧

17:27.660 --> 17:28.940
好 这里输出呢

17:29.740 --> 17:34.460
是不是又会运行函数 他又会运行这个 读取属性x 他又会输出这个

17:35.100 --> 17:38.940
好 然后呢 这里返回几 返回的是几 返回的是2

17:39.660 --> 17:41.100
那么这句话会输出多少

17:42.060 --> 17:45.740
会输出多少 他又会输出2 跟这个3还有关系吗

17:46.220 --> 17:48.860
是不是一点关系没了 一点关系都没有了

17:49.500 --> 17:53.260
他现在是一个存去器属性 他运行的是函数

17:53.260 --> 17:57.020
你复制他调的是函数 相当于你这里运行的一个set函数

17:57.020 --> 18:00.300
这里运行的一个get函数 那跟这个什么3与啥关系呢

18:00.700 --> 18:05.180
没有什么关系了 这里得到了获取属性值的时候

18:05.180 --> 18:07.820
始终得到的是get的返回结果

18:08.460 --> 18:10.860
那么他就不再是一个正常的数据属性了

18:11.020 --> 18:14.540
不是说我们这句话就把3存在这里 不是这个意思的

18:14.540 --> 18:17.020
不再是这个意思的 他变成了运行函数了

18:17.020 --> 18:20.300
我们来保存看一下吧 你看 是不是这样的结果

18:21.100 --> 18:21.580
没问题吧

18:23.500 --> 18:25.260
我们要把这个东西理解

18:26.140 --> 18:27.900
这就是一个存去器的属性

18:29.340 --> 18:31.820
存去器的属性有什么意义呢

18:32.220 --> 18:33.420
它到底有啥意义呢

18:34.140 --> 18:35.580
好 这里我们再举一个例子

18:35.580 --> 18:37.820
我们来看一下存去器的属性有什么意义

18:40.300 --> 18:42.540
好 比方说我们这里呢

18:43.180 --> 18:44.780
我们可以这样子玩 看着啊

18:46.380 --> 18:46.860
当个喜

18:47.580 --> 18:49.740
有这 写这么一个构造函数

18:50.060 --> 18:51.820
用户嘛 用户的构造函数

18:52.300 --> 18:55.260
用户有姓名 有什么年龄对吧

18:55.580 --> 18:56.780
有姓名和年龄

18:57.740 --> 19:00.780
OK 那么姓名呢 我们简单的复职就完事了

19:00.780 --> 19:02.460
简单的复职一下就完事了

19:03.020 --> 19:04.060
关键是年龄

19:04.700 --> 19:06.220
好 我们这里考虑多一点啊

19:06.780 --> 19:08.300
如果你不考虑的话 当然也没事

19:08.460 --> 19:09.660
你自己自己做限定

19:09.660 --> 19:11.100
我这里主要说一下这么一个问题

19:12.460 --> 19:15.340
年龄的取职范围是多少呢

19:16.300 --> 19:17.660
年龄的取职范围

19:18.300 --> 19:23.020
年龄的取职范围是零到

19:23.020 --> 19:26.140
比方说啊 比方说咱们系统里边就是零到一百

19:26.620 --> 19:28.140
你年龄能不能是复说

19:28.940 --> 19:30.380
你年龄能不能是一千岁

19:31.100 --> 19:32.220
太可能对吧

19:32.220 --> 19:34.780
所以说我们要限制一下它的取职范围

19:35.660 --> 19:41.420
比方说如果年龄的值小于零

19:42.460 --> 19:45.100
则复职为零

19:46.700 --> 19:53.820
如果年龄的值大于了一百

19:54.300 --> 19:55.900
则复职为一百

19:56.620 --> 19:58.300
好 比方说我们要做这么一个处理

19:58.940 --> 20:00.380
比方说我们要做这么一个处理

20:00.380 --> 20:03.100
好 有人说这么一个处理很简单啊

20:03.100 --> 20:03.980
非常非常简单

20:04.060 --> 20:05.100
我们判断一下呗

20:05.100 --> 20:06.700
年龄如果小于零

20:06.700 --> 20:07.420
干嘛呢

20:07.420 --> 20:09.180
我们把年龄复职为零

20:09.180 --> 20:11.980
好 LCF

20:11.980 --> 20:13.340
如果年龄大于一百

20:13.820 --> 20:14.620
干嘛呢

20:14.620 --> 20:16.540
我们把年龄复职为一百

20:16.540 --> 20:17.980
年龄复职为一百

20:19.100 --> 20:19.980
这样子一写

20:19.980 --> 20:21.980
然后再把它保存到属性里面

20:21.980 --> 20:23.100
不就完了吗对

20:23.100 --> 20:24.140
不就完了吗

20:24.140 --> 20:26.140
但是这样子是有隐患的

20:26.140 --> 20:26.700
看着

20:28.220 --> 20:29.340
六一个用户啊

20:29.340 --> 20:30.300
新民随便写

20:31.020 --> 20:32.380
年龄呢比方说一千

20:32.860 --> 20:33.420
一万

20:34.140 --> 20:35.180
好 咱们来看一下啊

20:36.060 --> 20:36.620
运行

20:40.230 --> 20:41.910
这里OB接点什么

20:41.910 --> 20:43.670
诶 不是U

20:43.670 --> 20:44.710
看一下U

20:44.710 --> 20:45.750
年龄是不是一百

20:45.750 --> 20:46.470
对不对

20:46.470 --> 20:47.270
一百吧

20:47.270 --> 20:47.830
没问题吧

20:48.550 --> 20:48.870
好

20:49.430 --> 20:50.550
因为你给他设置了

20:50.550 --> 20:51.910
给他做了判断的

20:51.910 --> 20:53.030
判断的参数字

20:53.030 --> 20:53.990
进行了判断

20:53.990 --> 20:54.710
但是呢

20:54.710 --> 20:57.430
你这样子可以防止勾造函数里边

20:57.430 --> 20:59.350
给他设置年龄

20:59.350 --> 21:01.350
但是如果他后边再这样子写呢

21:01.350 --> 21:03.190
强行这样子写一个一万的

21:03.190 --> 21:04.470
你说谁这么傻

21:05.030 --> 21:06.710
当然这种情况下呢

21:06.710 --> 21:07.990
属于比较简单的情况

21:07.990 --> 21:09.510
不太会这么傻

21:09.510 --> 21:10.630
但是如果有

21:10.630 --> 21:11.750
比方说咱们系统里边

21:12.550 --> 21:13.830
有一百个勾造函数

21:14.950 --> 21:17.270
每个勾造函数里边平均有五个参数

21:17.990 --> 21:19.830
每个参数都有取之范围

21:19.830 --> 21:21.190
那你算一下

21:21.190 --> 21:22.070
然后咱们再算一下呗

21:23.190 --> 21:24.630
一百个勾造函数

21:24.630 --> 21:26.470
在大中型系统里边

21:26.470 --> 21:28.630
一百个太轻松就达到了

21:29.350 --> 21:31.190
一个一万一个小型系统里边

21:31.190 --> 21:32.710
可能都会有这么多勾造函数

21:33.670 --> 21:36.070
比方说有一百个勾造函数

21:36.870 --> 21:39.510
然后呢每个勾造函数里边有五个参数

21:40.790 --> 21:41.590
平均下来吧

21:41.590 --> 21:42.310
有五个参数

21:43.510 --> 21:46.150
我还没有考虑什么五个参数里面

21:46.150 --> 21:48.470
有参数是对象对象里面有属性的情况

21:49.430 --> 21:51.830
每一个参数都有一个取之范围

21:52.550 --> 21:54.150
那就有五百个取之范围

21:54.150 --> 21:55.030
你还记得住吗

21:55.750 --> 21:56.550
你还记得住吗

21:56.550 --> 21:57.590
是不是记不住了

21:57.590 --> 21:59.750
你很有可能写的写的就忘了

21:59.750 --> 22:00.950
忘了某一个属性的

22:01.110 --> 22:02.790
他的正确取之范围是多少

22:02.790 --> 22:04.230
你可能就会给他复制一个

22:05.590 --> 22:07.110
不应该取到的值

22:07.110 --> 22:08.070
那么这样子以来

22:08.070 --> 22:09.270
我们再来看一下这个U

22:11.030 --> 22:11.910
再来看一下这个U

22:13.350 --> 22:13.750
刷新

22:16.780 --> 22:17.420
我没保存

22:18.940 --> 22:20.460
你们都应该自己能想得到

22:20.460 --> 22:20.780
对吧

22:21.500 --> 22:22.460
肯定是一万

22:23.500 --> 22:25.260
所以又超过这个取之了

22:25.260 --> 22:25.900
对不对

22:25.900 --> 22:27.180
又超过一个取之范围了

22:27.900 --> 22:29.420
因为这个东西你防不了

22:29.420 --> 22:31.180
你防不了他做这件事情

22:31.260 --> 22:31.660
为什么

22:31.660 --> 22:33.420
因为它是一个简单的属性复制

22:33.900 --> 22:35.260
你这个勾造函数里表

22:35.260 --> 22:36.380
你根本就不知道

22:36.380 --> 22:37.820
它对属性进行的复制

22:37.820 --> 22:38.620
根本就不知道

22:39.100 --> 22:39.980
它复制它就复制了

22:39.980 --> 22:41.500
它就把数据存进去了

22:41.500 --> 22:43.820
因为它是一个普通的数据属性

22:45.260 --> 22:47.420
那么这里现在就有一种办法

22:47.420 --> 22:48.300
能够限制它

22:49.020 --> 22:49.900
什么办法呢

22:49.900 --> 22:51.420
就是把这个数据属性

22:51.900 --> 22:54.940
给它做成一个存取器属性

22:54.940 --> 22:56.460
你每一次复制

22:56.460 --> 22:57.740
每一次取之

22:58.380 --> 22:59.500
我给你运行一个函数

23:00.460 --> 23:01.900
我给你运行一个函数

23:01.900 --> 23:02.940
是这么个意思

23:03.980 --> 23:05.980
那么接下来我们看一下这里该怎么做

23:07.020 --> 23:07.980
我们可以这样子写

23:09.980 --> 23:11.980
我们不是一个Objects Define

23:11.980 --> 23:13.260
property对吧

23:14.300 --> 23:15.740
定义一个属性

23:15.740 --> 23:17.980
给当前对象定一个属性

23:17.980 --> 23:20.620
当前对象是 z 是吧

23:20.620 --> 23:21.260
第一个参数

23:21.260 --> 23:23.020
之前传的是OB界

23:23.020 --> 23:23.820
对不对

23:23.820 --> 23:25.100
之前传的是OB界

23:25.100 --> 23:27.260
就是给哪个对象加一个属性

23:27.260 --> 23:29.340
那么当前肯定是给Z加一个属性

23:29.580 --> 23:31.500
所以说当前对象传Z

23:31.500 --> 23:33.180
给哪个对象加属性

23:33.180 --> 23:34.540
属性的名字是什么

23:34.540 --> 23:35.580
名字是A级

23:36.540 --> 23:37.580
第三个参数

23:38.460 --> 23:40.780
第三个参数就是一个配置

23:40.780 --> 23:42.380
属性描述服的配置

23:42.380 --> 23:43.820
描述服里面有很多配置

23:43.820 --> 23:45.820
我们先讲的是存取器

23:45.820 --> 23:47.260
给它写存取器

23:49.980 --> 23:51.900
set 方形

23:53.180 --> 23:54.060
写存取器

23:55.100 --> 23:57.420
比方说我们这里这样子来写

23:57.980 --> 23:58.940
set的时候

23:59.580 --> 24:02.060
运行set的时候干嘛呢

24:02.060 --> 24:04.620
我给某一个变量附一个值

24:04.620 --> 24:07.020
并且给它附一个正确的值

24:07.020 --> 24:08.460
哪个变量就用它

24:08.460 --> 24:09.980
比方说就用它

24:09.980 --> 24:10.700
没问题吧

24:10.700 --> 24:11.500
可不可以用它

24:11.500 --> 24:12.140
当然可以

24:12.140 --> 24:14.220
函数里面是不是可以用函数外边的东西

24:14.220 --> 24:14.860
对不对

24:14.860 --> 24:15.660
就用它嘛

24:15.660 --> 24:16.300
就用它

24:16.300 --> 24:17.580
如果没有这个问题

24:17.580 --> 24:19.260
你重新定一个变量也可以

24:19.260 --> 24:20.540
重新定一个变量也可以

24:21.660 --> 24:22.540
没问题的

24:22.540 --> 24:23.980
重新定一个变量也可以

24:24.940 --> 24:25.740
好吧

24:25.740 --> 24:26.380
好

24:26.380 --> 24:27.100
那么这里呢

24:28.380 --> 24:29.420
我们这样子

24:29.580 --> 24:31.740
set 运行set的时候干嘛呢

24:32.460 --> 24:33.980
如果你给它复制

24:33.980 --> 24:34.540
我要干嘛

24:35.500 --> 24:36.380
判断一下

24:36.380 --> 24:37.580
判断一下

24:37.580 --> 24:38.380
你复的值

24:38.380 --> 24:39.740
你复的值是不是这个玩意儿

24:39.740 --> 24:40.300
对吧

24:40.300 --> 24:41.740
你复的值就是这个玩意儿

24:42.780 --> 24:44.380
那么我判断一下这个玩意儿

24:44.380 --> 24:46.220
是不是小于零的

24:46.220 --> 24:47.500
如果小于零的话

24:47.500 --> 24:48.700
我把它复制为多少

24:48.700 --> 24:49.740
我判断不是这个东西啊

24:50.380 --> 24:53.660
因为这个东西只有在雕用构造函数的时候才会传进来

24:53.660 --> 24:55.740
而这个东西是每一次给它复制

24:55.740 --> 24:58.620
它都会把你复的值传进来

24:58.700 --> 24:59.820
判断一下你复的值

24:59.820 --> 25:00.780
是不是小于零

25:00.780 --> 25:01.740
如果小于零的话

25:01.740 --> 25:02.460
我干嘛呢

25:02.460 --> 25:03.420
我把它复制为零

25:03.980 --> 25:04.460
好

25:04.860 --> 25:05.660
lcf

25:07.180 --> 25:09.340
判断一下你的值是不是大于100呢

25:09.340 --> 25:10.300
如果大于100

25:10.300 --> 25:11.740
我把它复制为100

25:12.540 --> 25:14.700
你看我这里就可以做任何的事情

25:15.340 --> 25:16.780
先把它你要复的值

25:17.100 --> 25:17.740
复的正确

25:18.060 --> 25:18.460
好

25:18.460 --> 25:19.580
复正确过后呢

25:19.900 --> 25:21.580
我把你的值保存到这个变量里面

25:23.180 --> 25:24.380
把它保存到变量里面

25:24.940 --> 25:25.500
没问题吧

25:26.940 --> 25:27.180
好

25:27.180 --> 25:28.380
当运行gait的时候

25:28.460 --> 25:29.660
我就做一个最简单的事情

25:29.660 --> 25:30.540
把这个变量返回

25:31.340 --> 25:32.540
因为你复制的时候

25:32.540 --> 25:33.500
保存到那个变量里面吧

25:33.740 --> 25:34.940
你读去它的值的时候

25:34.940 --> 25:36.540
是不是把这个变量值拿出来就完事了

25:36.860 --> 25:37.180
对不对

25:38.140 --> 25:38.380
好

25:38.380 --> 25:39.100
这样就写完了

25:40.060 --> 25:40.860
这样就写完了

25:41.420 --> 25:41.660
好

25:41.660 --> 25:42.700
写完了之后

25:43.740 --> 25:45.420
我们现在这个数多了一个属性了

25:45.420 --> 25:46.620
这个属性叫做A级

25:46.860 --> 25:48.700
它现在是一个存取器属性

25:49.020 --> 25:49.660
于是呢

25:49.660 --> 25:51.100
我给它复制的时候

25:51.580 --> 25:53.180
给这个属性复制的时候

25:53.340 --> 25:55.500
它会运行相应的函数

25:55.660 --> 25:56.540
它会运行set

25:57.180 --> 25:58.300
读它的值的时候呢

25:58.460 --> 25:59.420
会运行gait

26:00.460 --> 26:01.020
没问题吧

26:01.020 --> 26:01.180
好

26:01.180 --> 26:02.540
我们这里输出一下吧

26:02.700 --> 26:03.340
输出一下

26:04.060 --> 26:06.700
运行了A级的gait

26:07.180 --> 26:07.900
这里呢是

26:10.220 --> 26:12.940
运行了A级的set

26:13.260 --> 26:14.300
比方说给它输出一下嘛

26:15.260 --> 26:16.540
set它复的值是什么呢

26:16.540 --> 26:17.500
复的值是VAR

26:17.500 --> 26:18.140
评价进来

26:18.700 --> 26:19.820
比方说给它输出一下

26:19.820 --> 26:20.860
也看得更加清楚了

26:21.260 --> 26:21.580
好

26:21.580 --> 26:22.220
接下来呢

26:22.220 --> 26:23.580
我们给这个A级复制

26:23.580 --> 26:24.220
复制最多

26:24.220 --> 26:25.180
你直接写就行了

26:25.420 --> 26:26.780
直接把这个A级翻过来就行了

26:27.180 --> 26:28.060
为什么你不怕

26:28.140 --> 26:29.020
你不用怕

26:29.020 --> 26:31.980
因为它始终会经过这么一个函数

26:31.980 --> 26:33.900
这个函数一定会把它设置为正确的值

26:34.780 --> 26:35.180
好

26:35.340 --> 26:35.980
看着啊

26:36.220 --> 26:37.660
那么我现在把下面那个注射掉

26:38.300 --> 26:38.940
保存

26:39.100 --> 26:39.820
我们来看一下

26:40.620 --> 26:42.060
你看一下是不是运行了set

26:42.300 --> 26:42.780
对吧

26:42.780 --> 26:43.900
为什么这里是1万

26:44.620 --> 26:46.300
因为你调用构造函数的时候

26:46.300 --> 26:47.420
传了一个1万进去

26:47.420 --> 26:49.580
它把这个1万复制给A级

26:50.700 --> 26:51.340
能理解吧

26:51.580 --> 26:52.540
把这个A级呢

26:52.540 --> 26:53.900
把这个1万复制给A级

26:53.900 --> 26:55.100
那么实际上在运行啥

26:55.100 --> 26:56.940
实际上在运行这个set函数

26:57.100 --> 26:58.300
这里传了1万进来

26:58.540 --> 26:59.820
那么这里就经过判断

26:59.820 --> 27:00.380
对吧

27:00.380 --> 27:01.500
1万小于0

27:01.820 --> 27:02.460
不小于0

27:02.460 --> 27:03.660
所以进入这个判断

27:03.660 --> 27:04.620
1万是不是大于100

27:04.620 --> 27:05.180
大于100

27:05.180 --> 27:06.300
把它复制为100

27:06.300 --> 27:07.820
把这个参数复制为100

27:07.820 --> 27:09.820
把这个参数的值保存到变量里面去

27:11.020 --> 27:11.180
好

27:11.180 --> 27:11.980
那么于是呢

27:11.980 --> 27:13.260
我们接下来再输出

27:13.740 --> 27:14.620
接下来再输出

27:14.940 --> 27:15.980
U

27:16.700 --> 27:17.180
看一下

27:18.220 --> 27:19.820
U里面是不是一个属性A级

27:19.820 --> 27:20.140
对吧

27:20.700 --> 27:21.580
它这里为什么

27:21.900 --> 27:23.660
没得到这个A级变成三个点了

27:23.660 --> 27:25.340
因为它说这个呢

27:26.140 --> 27:27.900
这个东西是需要调用的

27:27.900 --> 27:29.180
你看它下面的提示里

27:29.180 --> 27:29.500
你看看

27:29.500 --> 27:30.140
invoke

27:30.140 --> 27:30.780
调用是吧

27:31.340 --> 27:31.900
property

27:31.900 --> 27:33.100
属性getter

27:33.100 --> 27:34.140
getter什么意思

27:34.140 --> 27:35.340
就是访问器

27:35.340 --> 27:37.500
存取器里面一个是取的东西

27:37.500 --> 27:38.700
取的东西就是访问器

27:38.700 --> 27:39.500
get

27:40.060 --> 27:41.100
存的东西是什么呢

27:41.100 --> 27:42.300
就是setter

27:43.900 --> 27:44.540
一个是存的

27:44.540 --> 27:45.260
一个是取的

27:45.980 --> 27:46.460
它说

27:46.460 --> 27:46.940
5

27:46.940 --> 27:50.540
它说正在需要调用一个属性的访问器才行

27:51.020 --> 27:51.260
好

27:51.260 --> 27:52.700
我们点一下就可以调用了

27:52.700 --> 27:53.180
点一下

27:53.900 --> 27:55.100
你看是不是运行了

27:55.180 --> 27:56.300
A级的get

27:56.300 --> 27:58.220
就得到了100

27:58.220 --> 27:58.780
看到没

27:58.780 --> 27:59.580
为什么是100

27:59.580 --> 28:02.380
因为它把之前保存到这里边的输出了

28:02.380 --> 28:04.060
好好理解一下一个代码

28:04.940 --> 28:05.420
好

28:05.420 --> 28:06.620
那么我们比方说

28:06.620 --> 28:07.020
再来

28:07.660 --> 28:09.660
你只要去获取它的属性

28:09.660 --> 28:10.860
它都会运行这个函数

28:10.860 --> 28:11.500
看到没

28:11.500 --> 28:12.700
它都会运行这个函数

28:12.700 --> 28:13.500
只要获取属性

28:13.500 --> 28:14.300
它都会运行

28:15.900 --> 28:16.140
好

28:16.140 --> 28:17.340
那么比方说

28:17.340 --> 28:18.860
比方说我这里又把它

28:18.860 --> 28:19.660
又给它复制

28:19.660 --> 28:20.140
复制为

28:21.420 --> 28:22.300
复一

28:22.300 --> 28:23.420
又给它复制为复一

28:23.420 --> 28:23.980
看一下

28:23.980 --> 28:24.380
保存

28:25.260 --> 28:27.100
你看是不是运行了两次set

28:27.100 --> 28:29.660
第一次是在构造函数里面复制

28:29.660 --> 28:30.460
只要一复制

28:30.460 --> 28:31.580
它就会运行set

28:31.580 --> 28:32.460
只要一取制

28:32.460 --> 28:33.820
它就会运行get

28:33.820 --> 28:35.100
是这么个意思

28:35.100 --> 28:36.780
那么又给它复制为复一

28:36.780 --> 28:37.500
复一

28:37.500 --> 28:39.820
那么这里就变成了复一了

28:39.820 --> 28:42.140
它就运行了一次set

28:42.140 --> 28:43.500
set就把它变成了0

28:43.500 --> 28:44.220
对吧

28:44.220 --> 28:45.580
set就把它变成0

28:45.580 --> 28:46.780
你看读的时候

28:46.780 --> 28:48.940
它运行了get得到了0

28:50.300 --> 28:50.540
好

28:50.540 --> 28:51.580
那么这样子一来

28:51.580 --> 28:52.380
这个属性

28:52.380 --> 28:54.380
它是不是永远不可能超出一个范围了

28:54.460 --> 28:55.900
你随便怎么玩

28:55.900 --> 28:57.740
这个属性都是安全的

28:57.740 --> 28:58.780
你随便怎么玩

28:58.780 --> 29:00.620
它都不会超出这个范围

29:00.620 --> 29:02.700
你看得到A级的

29:02.700 --> 29:04.140
没有U的A级

29:04.140 --> 29:06.060
你看读的时候是不是还是一般

29:06.060 --> 29:07.340
你读取它的时候还是一般

29:08.300 --> 29:08.460
好

29:08.460 --> 29:09.740
那么比方说

29:09.740 --> 29:10.300
比方说

29:11.500 --> 29:13.100
我们又这样子来玩

29:13.100 --> 29:13.900
这里写复一

29:15.260 --> 29:19.740
这里我们写个U点A级加上1万

29:21.020 --> 29:21.180
好

29:21.180 --> 29:22.940
我们这里输出A级

29:23.020 --> 29:24.060
这个时候呢

29:24.060 --> 29:25.420
练习体出现了

29:25.420 --> 29:26.940
它问你控制台输出什么

29:28.460 --> 29:29.420
来吧

29:29.420 --> 29:30.300
放小一点啊

29:30.300 --> 29:31.260
看一下

29:31.260 --> 29:32.700
控制台它输出什么

29:32.700 --> 29:33.660
它会输出什么样的结果

29:36.380 --> 29:38.060
会输出什么样的结果呢

29:38.060 --> 29:40.220
我们只要认识到这个A级呢

29:40.220 --> 29:42.060
它是一个存去技术相

29:42.060 --> 29:44.140
每一次读取值和复值

29:44.140 --> 29:46.940
它都会运行相应的函数

29:46.940 --> 29:47.180
好

29:47.180 --> 29:48.140
首先我们看到

29:48.140 --> 29:49.500
创建一个勾到函数

29:49.500 --> 29:50.540
勾到函数里边呢

29:51.340 --> 29:53.740
给它进行了什么复值

29:53.740 --> 29:54.140
对吧

29:54.140 --> 29:54.540
复值

29:54.540 --> 29:55.900
那是不是要运行set

29:55.900 --> 29:56.380
对不对

29:56.380 --> 29:57.500
要运行set

29:57.500 --> 29:57.740
好

29:57.740 --> 29:59.660
运行set的时候是不是输出了这句话

29:59.660 --> 30:00.060
对不对

30:00.060 --> 30:00.700
输出了这句话

30:02.060 --> 30:03.580
先输出了这句话

30:03.580 --> 30:04.540
得到结果是多少

30:04.540 --> 30:04.700
多少呢

30:04.700 --> 30:05.100
复一

30:05.100 --> 30:05.580
对不对

30:05.580 --> 30:05.900
复一

30:05.900 --> 30:06.620
传到复一嘛

30:07.340 --> 30:07.980
好

30:07.980 --> 30:08.620
然后接下来

30:08.620 --> 30:10.220
让我们又运行这个代码

30:10.220 --> 30:10.780
这个代码呢

30:10.780 --> 30:11.580
是什么

30:11.580 --> 30:13.980
把右边的表达式计算出来

30:13.980 --> 30:15.900
然后复字给左边的属性

30:15.900 --> 30:16.060
好

30:16.060 --> 30:17.340
右边的表达式要计算

30:17.340 --> 30:19.180
是不是要把属性值拿出来

30:19.180 --> 30:19.980
是不是要拿出来

30:20.700 --> 30:21.580
拿出来的话

30:21.580 --> 30:22.860
会不会运行get

30:22.860 --> 30:23.260
对不对

30:23.260 --> 30:24.540
会运行get

30:24.540 --> 30:25.740
于是它又运行到这个

30:25.740 --> 30:26.540
它又输出了这个

30:27.420 --> 30:28.860
它又输出了这个东西

30:29.580 --> 30:30.140
好

30:30.140 --> 30:30.620
然后呢

30:30.620 --> 30:31.340
返回的是什么

30:31.340 --> 30:31.980
A级对吧

30:31.980 --> 30:33.020
A级之前保存的是啥

30:33.740 --> 30:35.100
是不是一个正确的值零

30:35.100 --> 30:35.340
对吧

30:35.340 --> 30:36.380
之前复字的复一嘛

30:36.380 --> 30:37.980
复一保存进去就是零

30:37.980 --> 30:39.180
因为它把零保存进去了

30:39.740 --> 30:40.220
好

30:40.220 --> 30:40.780
于是呢

30:40.780 --> 30:41.580
得到的结果呢

30:42.940 --> 30:43.580
是零对吧

30:43.580 --> 30:45.180
这个表达式的结果是零

30:45.180 --> 30:46.860
零加上一万

30:46.860 --> 30:47.660
是不是还是

30:47.660 --> 30:48.540
还是一万

30:48.540 --> 30:48.940
于是呢

30:48.940 --> 30:50.700
把这个一万用复字给A级

30:50.700 --> 30:52.380
是不是又会运行set

30:52.380 --> 30:52.940
对吧

30:52.940 --> 30:54.700
只要一复字就会运行set

30:54.700 --> 30:55.500
好

30:55.500 --> 30:56.060
set

30:56.060 --> 30:57.260
它又会运行

30:57.260 --> 30:58.780
那么只是一万

30:58.780 --> 30:59.100
看没

30:59.100 --> 31:01.100
它是这样子运行的啊

31:01.100 --> 31:04.380
把右边表达式的计算结果复字给A级

31:04.380 --> 31:05.500
那么这个值呢

31:05.500 --> 31:06.700
就肯定是计算的结果

31:08.700 --> 31:09.180
然后呢

31:09.180 --> 31:10.460
复字一万肯定是不行

31:10.460 --> 31:10.780
对吧

31:10.780 --> 31:11.820
A级里面又保存了啥

31:11.820 --> 31:13.100
一保存了100

31:13.100 --> 31:13.260
好

31:13.260 --> 31:14.460
最后输出有点A级

31:14.460 --> 31:15.340
是不是又要运行这个

31:16.380 --> 31:17.580
又要运行这个

31:17.580 --> 31:18.460
最后输出什么

31:18.460 --> 31:19.020
100

31:19.900 --> 31:21.500
整个代码

31:21.500 --> 31:22.620
它会输出这么一个结果

31:23.980 --> 31:26.330
看一下吧

31:26.330 --> 31:27.050
没问题吧

31:28.170 --> 31:28.410
哎

31:28.410 --> 31:29.210
没问题吧

31:29.210 --> 31:29.450
好

31:29.450 --> 31:30.490
再刷新啊

31:30.490 --> 31:31.290
哎

31:31.290 --> 31:32.170
我这没保存

31:32.170 --> 31:32.650
没保存

31:34.010 --> 31:34.490
看一下

31:34.490 --> 31:35.130
现在对了啊

31:35.130 --> 31:35.850
现在对了

31:35.850 --> 31:36.330
没问题吧

31:37.530 --> 31:38.170
OK啊

31:38.170 --> 31:40.250
这就是关于存去系数项

31:40.250 --> 31:41.850
它本质上就是一个函数

31:41.850 --> 31:43.930
那么你可以从这里可以看到了

31:43.930 --> 31:46.490
我们可以利用存去系数项来限定

31:47.290 --> 31:48.650
某些属性的取词范围

31:49.450 --> 31:50.250
这样子呢

31:50.250 --> 31:51.770
哪怕后边误操作了

31:51.770 --> 31:52.970
也不用担心

31:52.970 --> 31:54.010
因为你怎么复制

31:54.010 --> 31:55.130
它都会经过一个函数

31:56.090 --> 31:57.130
经过一个函数来处理

31:58.330 --> 32:01.220
这是这一部分

32:01.220 --> 32:02.820
还有另外一种用途

32:02.820 --> 32:04.020
还有另外一种用途

32:04.020 --> 32:04.500
比方说

32:05.700 --> 32:07.540
我们跟我们之前学习的多么对

32:07.540 --> 32:08.500
多么的结合起来

32:10.740 --> 32:11.940
比方说啊

32:11.940 --> 32:12.420
咱们呢

32:13.220 --> 32:14.100
这里呢有一个

32:14.660 --> 32:15.940
我们做个例子嘛

32:15.940 --> 32:17.060
因为这个存去系数项呢

32:17.060 --> 32:17.620
有的时候

32:17.620 --> 32:19.540
特别是你要写一些大的项目啊

32:19.540 --> 32:20.820
大中型项目的时候

32:20.820 --> 32:22.100
有的时候可以起到一些

32:22.100 --> 32:23.620
非常特别的效果

32:23.620 --> 32:25.460
比方说我们以前做过的一个

32:25.460 --> 32:26.580
一个功能

32:26.580 --> 32:27.060
叫什么呢

32:27.060 --> 32:28.740
一个DIV谈来谈去对不对

32:29.380 --> 32:29.860
咱们呢

32:29.860 --> 32:32.020
我们现在马上来写一下这个功能

32:32.020 --> 32:33.620
因为我看一下直接把之前的代码

32:33.620 --> 32:34.980
复制过来行不行

32:34.980 --> 32:35.940
直接复制过来得了吧

32:36.900 --> 32:37.620
G17这里

32:38.500 --> 32:40.100
我们这里自动移动的DIV

32:40.100 --> 32:41.140
把这个代码复制过来啊

32:42.260 --> 32:42.900
数据数据

32:42.900 --> 32:43.380
看着啊

32:45.220 --> 32:46.100
把它代码复制过来

32:47.060 --> 32:48.420
好那么之前呢

32:48.420 --> 32:49.860
我是这样子写的对不对

32:49.860 --> 32:51.780
这样得到这个DIV嘛

32:51.780 --> 32:52.660
他看一下吧

32:52.660 --> 32:54.020
看一下我们之前的效果

32:54.020 --> 32:54.580
我要干嘛

32:56.100 --> 32:57.300
不应该不应该放这

32:58.420 --> 32:59.620
不应该放这

32:59.620 --> 33:06.540
我们这样子放这放这

33:06.540 --> 33:07.420
放这个页面

33:07.420 --> 33:08.860
好咱们来看一下啊

33:08.860 --> 33:10.940
我们可以利用存去系数项啊

33:10.940 --> 33:12.300
来做一些特别的效果出来

33:12.940 --> 33:14.140
你看他现在移动对吧

33:14.140 --> 33:15.500
还会反弹对不对

33:15.500 --> 33:16.220
还会反弹吧

33:16.940 --> 33:17.660
没问题吧

33:17.660 --> 33:18.060
好

33:18.060 --> 33:18.460
接下来呢

33:18.460 --> 33:19.260
我们来看一下啊

33:19.260 --> 33:20.140
我们可以这样子玩

33:22.790 --> 33:23.750
这个DIV得到

33:23.830 --> 33:25.110
这个没什么好说的啊

33:25.110 --> 33:26.310
好那么接下来呢

33:26.310 --> 33:27.190
下面这些东西呢

33:27.190 --> 33:28.470
是一些配置对不对

33:28.470 --> 33:29.510
是一些配置

33:29.510 --> 33:30.710
好那么我们呢

33:30.710 --> 33:31.590
把这些配置呢

33:31.590 --> 33:32.630
放到一个对象里边去

33:33.270 --> 33:33.750
看着啊

33:34.310 --> 33:36.230
这一配置我们放到一个对象里边去

33:36.230 --> 33:36.710
config

33:37.910 --> 33:40.630
啊这一配置什么x零

33:40.630 --> 33:41.350
对不对

33:41.350 --> 33:43.590
x零 y零

33:43.590 --> 33:44.790
什么y dash

33:45.990 --> 33:47.750
复制为二啊比较说

33:48.870 --> 33:50.630
啊下面上面是x ds

33:50.630 --> 33:51.430
每一次x

33:52.150 --> 33:52.870
移动的距离

33:53.830 --> 33:54.870
y移动的距离

33:54.870 --> 33:55.750
2

33:55.750 --> 33:56.470
duration

33:56.470 --> 33:57.590
间隔时间

33:57.590 --> 33:58.550
16

33:58.550 --> 34:00.150
把他放到一个对象里面去

34:00.150 --> 34:02.550
还一层的高动的是100

34:02.550 --> 34:03.030
好吧

34:03.030 --> 34:03.990
我们这样子写啊

34:03.990 --> 34:04.470
这样子写

34:05.750 --> 34:06.150
没问题吧

34:06.950 --> 34:07.510
好

34:07.510 --> 34:08.070
接下来呢

34:08.070 --> 34:09.670
我们来玩这么一个东西

34:10.310 --> 34:12.150
我把这个x和y呢

34:12.950 --> 34:14.150
做成一个啥呢

34:14.150 --> 34:15.990
做成一个存去器属性

34:17.430 --> 34:18.950
为什么要做成存去器属性

34:18.950 --> 34:20.630
我们做了之后你就明白了

34:20.630 --> 34:21.990
他能实现一个什么样的效果

34:21.990 --> 34:22.950
我先说一下

34:22.950 --> 34:23.670
这是什么意思啊

34:23.670 --> 34:24.550
可能有些人又忘了

34:24.550 --> 34:25.510
之前我们做的作业

34:25.510 --> 34:27.350
就作业你一定要自己去做一遍

34:27.350 --> 34:29.430
做一遍的话就不太不太容易忘了

34:29.430 --> 34:31.430
这表x y表示初始作标

34:31.430 --> 34:33.030
就是这个div的初始作标

34:33.030 --> 34:33.590
以后呢

34:33.590 --> 34:34.630
我们要改动他的作标

34:34.630 --> 34:34.790
对吧

34:34.790 --> 34:35.990
改动x 改动y

34:35.990 --> 34:36.950
然后呢

34:36.950 --> 34:37.830
这个每

34:37.830 --> 34:40.070
这个是每一次变化的像素

34:40.070 --> 34:41.030
比方说x方向

34:41.030 --> 34:42.230
横坐标移动多少

34:42.230 --> 34:43.350
y坐标移动多少

34:43.350 --> 34:45.350
啊duration的是每间隔的时间

34:45.350 --> 34:46.390
每间隔多少时间

34:46.390 --> 34:47.830
移动一次16毫秒

34:47.830 --> 34:49.510
啊还一层的是表示高度啊

34:49.510 --> 34:50.630
这是我们之前做的东西

34:50.630 --> 34:51.590
好

34:51.590 --> 34:53.750
接下来能我们把这个x和y啊

34:53.750 --> 34:55.030
做成一个存去器所向

34:55.030 --> 34:57.430
也说不在这里不在这里写了

34:57.430 --> 34:59.750
写成一个存去器所向

34:59.750 --> 35:00.790
好那么比方

35:00.790 --> 35:03.190
这里能我们可以用这种方式来做

35:03.190 --> 35:04.550
object

35:04.550 --> 35:06.230
define

35:06.230 --> 35:07.030
define

35:07.030 --> 35:08.630
property

35:08.630 --> 35:09.830
config

35:09.830 --> 35:11.670
这是我们要配置的对象

35:11.670 --> 35:12.470
对象呢

35:12.470 --> 35:13.590
那里边哪个所形呢

35:13.590 --> 35:14.870
x这个所向

35:14.870 --> 35:16.790
配置x这个所向

35:16.790 --> 35:18.710
好配置的时候呢

35:18.710 --> 35:19.830
里边有个存去器

35:19.910 --> 35:21.830
一个get

35:21.830 --> 35:24.550
好一个什么set

35:24.550 --> 35:25.350
一个get

35:25.350 --> 35:27.030
一个set

35:27.030 --> 35:28.230
好set里面一个值对吧

35:28.230 --> 35:30.150
一个负值的时候负为什么值

35:30.150 --> 35:31.270
好接下来

35:31.270 --> 35:33.670
我们来看一下x坐标

35:33.670 --> 35:35.910
是不是有取之范围

35:35.910 --> 35:38.070
它是不是有取之范围

35:38.070 --> 35:38.710
没问题吧

35:38.710 --> 35:39.910
它肯定是有取之范围嘛

35:39.910 --> 35:40.390
对不对

35:40.390 --> 35:42.630
所以说判断一下

35:42.630 --> 35:45.590
如果你给我负的值小于的0

35:45.590 --> 35:47.350
如果你给我负的值小于的0

35:47.350 --> 35:48.070
那对不起

35:48.070 --> 35:49.590
我只能取0

35:49.670 --> 35:52.630
你看这样子是不是不可能给它负责一个错误的值

35:52.630 --> 35:54.550
就不可能负责为一个错误值了

35:54.550 --> 35:55.990
我进行到限定

35:55.990 --> 35:56.630
好

35:56.630 --> 35:58.070
最大值是多少呢

35:58.070 --> 35:59.190
最大值是多少

35:59.190 --> 36:00.950
我们之前怎么判断的

36:00.950 --> 36:02.230
x方向

36:02.230 --> 36:03.990
最大值是不是这个

36:03.990 --> 36:05.510
对吧

36:05.510 --> 36:06.550
是不是这个玩意

36:06.550 --> 36:07.030
对不对

36:07.030 --> 36:09.190
还有宽度

36:09.190 --> 36:10.390
还有宽度忘写了

36:10.390 --> 36:12.150
位置100

36:12.150 --> 36:12.950
好

36:12.950 --> 36:15.830
最大值就是整个四口的宽度

36:15.830 --> 36:18.390
减去它本身的宽度对不对

36:18.550 --> 36:19.990
这个DIV的最大值

36:19.990 --> 36:21.430
整个四口的宽度

36:21.430 --> 36:22.390
整个这个宽度

36:22.390 --> 36:23.910
减去这个DIV本身的宽度

36:23.910 --> 36:25.990
就是x的最大值

36:25.990 --> 36:27.510
它也不可能取到最大值

36:27.510 --> 36:28.550
也不可能的

36:28.550 --> 36:29.190
所以说

36:29.190 --> 36:33.430
如果你给我负的值超过了这个值

36:33.430 --> 36:35.190
那怎么样呢

36:35.190 --> 36:37.670
我就给它负值为最大值

36:37.670 --> 36:39.270
这样子是不是限定了范围

36:39.270 --> 36:39.830
对不对

36:39.830 --> 36:42.310
就限定了范围了

36:42.310 --> 36:42.710
好

36:42.710 --> 36:44.790
那么其他情况就当然就是正常的情况了

36:44.790 --> 36:46.470
在领导它之间

36:46.470 --> 36:47.670
那么接下来

36:47.750 --> 36:48.950
我们负值完成负值

36:48.950 --> 36:49.510
怎么负值呢

36:49.510 --> 36:51.030
有人说负值是不是这样的负值

36:51.030 --> 36:52.310
x x等于

36:52.310 --> 36:53.030
哇

36:53.830 --> 36:55.990
首先我都不说这个Z对不对

36:55.990 --> 36:57.670
现在不说Z对不对

36:57.670 --> 36:58.470
你看一下

36:58.470 --> 36:59.590
那就算对嘛

36:59.590 --> 37:00.630
就算对

37:00.630 --> 37:02.230
你这样子负值

37:02.230 --> 37:03.590
是不是又会运行赛者

37:05.190 --> 37:07.270
我们知道这是个存去技术上

37:07.270 --> 37:08.150
你给它负值的话

37:08.150 --> 37:09.590
它一定会运行赛者

37:09.590 --> 37:10.310
对吧

37:10.310 --> 37:12.390
你这样负值是不是又会运行赛者

37:12.390 --> 37:13.270
好

37:13.270 --> 37:14.030
运行赛

37:14.030 --> 37:16.310
它只要一运行赛者是不是

37:16.310 --> 37:17.590
又要运行这句话

37:17.670 --> 37:19.190
这句话是不是又要运行赛者

37:19.190 --> 37:21.510
就导致了无限的帝规

37:22.550 --> 37:24.150
导致了无限帝规

37:24.150 --> 37:24.950
你看这个意思吧

37:24.950 --> 37:26.230
说不要这样子做

37:26.230 --> 37:27.430
不要这样子做

37:28.390 --> 37:28.630
好

37:28.630 --> 37:29.430
那么这里怎么办呢

37:29.430 --> 37:31.110
我们还是要利用一个变量

37:31.110 --> 37:32.870
利用一个变量来处理

37:32.870 --> 37:34.310
比方说这个变量呢

37:34.310 --> 37:35.590
我们可以放到这里边

37:35.590 --> 37:37.110
加一个特殊的下滑线

37:37.110 --> 37:37.830
表示这个变量呢

37:37.830 --> 37:38.790
我们平时不打用

37:38.790 --> 37:39.670
但是呢

37:39.670 --> 37:41.190
用来辅助的

37:41.190 --> 37:42.470
用来是辅助功能的

37:45.030 --> 37:46.550
Y0就表示坐标

37:46.630 --> 37:47.670
加个下滑线

37:47.670 --> 37:48.550
我们给它复制

37:48.550 --> 37:49.430
复制为什么呢

37:49.430 --> 37:51.030
复制为这个对象

37:51.030 --> 37:52.950
config就当然也可以用Z

37:52.950 --> 37:54.630
Z表示在当前对象

37:54.630 --> 37:55.830
给它复制为什么

37:55.830 --> 37:57.110
复制为

37:57.110 --> 37:58.230
V

37:58.230 --> 37:58.390
好

37:58.390 --> 37:59.510
这里返回什么呢

37:59.510 --> 38:01.350
返回Z点

38:01.350 --> 38:02.230
X

38:03.430 --> 38:03.670
好

38:03.670 --> 38:04.710
保存我们看一下

38:04.710 --> 38:08.540
看一下

38:08.540 --> 38:09.020
好

38:09.020 --> 38:10.300
接下来我们来看一下

38:10.300 --> 38:11.180
这里

38:11.180 --> 38:12.940
config

38:12.940 --> 38:13.580
第二

38:13.580 --> 38:14.380
X

38:14.380 --> 38:14.940
看一下什么的

38:14.940 --> 38:15.820
等于0

38:15.820 --> 38:16.780
config.x

38:16.780 --> 38:18.940
比方说给它复制为-100

38:19.260 --> 38:20.540
config.x

38:20.540 --> 38:21.020
你看一下

38:21.020 --> 38:22.220
是不是还是等于0

38:22.220 --> 38:22.620
对吧

38:22.620 --> 38:23.900
还是等于0

38:23.900 --> 38:25.660
那还记得我们以前说的吗

38:25.660 --> 38:27.420
你看这里全是细节

38:27.420 --> 38:29.980
以前我说一个表达式的反

38:29.980 --> 38:33.180
一个复制的表达式的返回结果

38:33.180 --> 38:36.140
是复给它的值

38:36.140 --> 38:37.340
而不是

38:37.340 --> 38:38.540
我当时没有说

38:38.540 --> 38:39.660
是这个变量的值

38:39.660 --> 38:40.540
当时我只是说

38:40.540 --> 38:42.300
你可以认为是这个变量的值

38:42.300 --> 38:43.900
但是现在学到存取期的过后

38:43.900 --> 38:45.580
你看这个表达式的值是多少

38:45.580 --> 38:46.620
它不是X的值

38:46.620 --> 38:48.380
X的值是0

38:48.460 --> 38:50.940
而是这个复给它的值-100

38:50.940 --> 38:51.820
看到没

38:51.820 --> 38:53.340
这是有区别的

38:53.340 --> 38:55.420
所以说我用词还是蛮准确的

38:55.420 --> 38:57.100
我都不敢就是乱说的

38:57.100 --> 39:01.100
因为我考虑到后边的一些情况

39:01.100 --> 39:01.340
好

39:01.340 --> 39:03.180
那么咱们现在再看

39:03.180 --> 39:05.500
也就是说我们现在

39:05.500 --> 39:06.620
这个X的值

39:06.620 --> 39:08.460
你是不可能给它复制为正

39:08.460 --> 39:09.500
就是错误的情况的

39:09.500 --> 39:10.060
比方说

39:10.060 --> 39:10.940
你给它复制为这个

39:10.940 --> 39:12.540
有用吗

39:12.540 --> 39:13.820
242

39:13.820 --> 39:15.180
它最大值只能去到242

39:15.180 --> 39:17.340
你看是不是不可能复制为错误的值了

39:17.340 --> 39:19.580
那以后复制是不是非常非常方便了

39:19.580 --> 39:20.700
包括你说什么

39:20.700 --> 39:23.500
你说给它复制为什么

39:23.500 --> 39:24.460
242吗

39:24.460 --> 39:25.660
242你看一下

39:25.660 --> 39:27.260
它目前的值是242

39:27.260 --> 39:28.620
然后那个夹夹

39:28.620 --> 39:29.740
夹夹的话

39:29.740 --> 39:32.300
它也相当于是一个复制

39:32.300 --> 39:34.780
也相当于是一个复制

39:34.780 --> 39:35.980
相当于是一个复制

39:35.980 --> 39:39.900
那么也会运行复制的存取期

39:39.900 --> 39:40.940
那么这样子一复制

39:40.940 --> 39:42.300
夹夹应该是243

39:42.300 --> 39:42.540
对不对

39:42.540 --> 39:43.740
我们来看一下吧

39:43.740 --> 39:45.820
X是不是还是242

39:45.820 --> 39:46.700
对不对

39:46.780 --> 39:48.940
它就不可能去到一个错误的值了

39:48.940 --> 39:51.100
X是不是搞定了

39:51.100 --> 39:52.620
不仅如此

39:52.620 --> 39:54.780
我们还可以做一件事

39:54.780 --> 39:56.380
你给X复制的时候

39:56.380 --> 39:57.820
因为X是表什么意思

39:57.820 --> 39:59.820
是不是这个DIV的

39:59.820 --> 40:01.660
相当于是这个DIV的Left值

40:01.660 --> 40:02.300
对吧

40:02.300 --> 40:04.220
相当于是它的Left值

40:04.220 --> 40:06.220
我们完成这个复制之后

40:06.220 --> 40:08.780
我们还可以做一件事

40:08.780 --> 40:10.060
啥事了

40:10.060 --> 40:13.180
DIV style left

40:13.180 --> 40:14.460
直接给它Left的复制

40:14.460 --> 40:16.300
就是你在给X复制的时候

40:16.380 --> 40:18.300
直接给它的Left的复制

40:18.300 --> 40:19.180
好

40:19.180 --> 40:20.060
复制为啥

40:20.060 --> 40:20.860
复制为VAR

40:20.860 --> 40:23.180
加上PX

40:23.180 --> 40:25.500
我就把这个属性的相关处理

40:25.500 --> 40:27.420
放到了这个属性的存取期里边

40:27.420 --> 40:28.780
合不合理

40:28.780 --> 40:30.460
贼合理

40:30.460 --> 40:32.780
为什么贼合理

40:32.780 --> 40:34.940
因为这些是跟这个属性

40:34.940 --> 40:36.300
是密切相关的

40:36.300 --> 40:37.660
你干嘛要写到外面去了

40:37.660 --> 40:39.100
刚才在外面去判断了

40:39.100 --> 40:41.020
它对我们优化程序逻辑

40:41.020 --> 40:42.060
是非常有帮助的

40:42.060 --> 40:43.500
它是跟属性密切相关的

40:43.500 --> 40:45.500
我们就写到属性这里

40:45.500 --> 40:46.460
而且将来

40:46.460 --> 40:47.900
我们无论给这个属性

40:47.900 --> 40:48.700
怎么来复制

40:48.700 --> 40:49.580
怎么来处理

40:49.580 --> 40:51.980
它都会运行这么一段代码

40:51.980 --> 40:54.620
达到了重用的目的

40:54.620 --> 40:56.060
你看着X是这样处理的

40:56.060 --> 40:58.700
Y是不是可以用一样的方式来处理

40:58.700 --> 41:00.060
Y

41:00.060 --> 41:01.180
用一样的方式来处理

41:01.180 --> 41:01.980
那么下滑线

41:01.980 --> 41:03.020
Y

41:03.020 --> 41:04.860
这里呢

41:04.860 --> 41:06.140
小于年了肯定等于年

41:06.140 --> 41:06.860
如果大于到什么

41:06.860 --> 41:08.060
Client

41:08.060 --> 41:09.340
Height

41:09.340 --> 41:10.940
这些写什么代码都可以

41:10.940 --> 41:12.860
它没有要求的必须要写什么代码

41:12.860 --> 41:13.980
啥代码都可以

41:13.980 --> 41:15.420
减去Height

41:15.500 --> 41:16.380
这样子

41:16.380 --> 41:17.740
Y是不是就正确了

41:17.740 --> 41:18.140
对吧

41:18.140 --> 41:20.460
它只能取到一个正确的字

41:20.460 --> 41:23.340
那么这里设置Top

41:23.340 --> 41:24.940
这样子一设置完了

41:24.940 --> 41:25.580
不得了

41:25.580 --> 41:27.180
我给你告诉你

41:27.180 --> 41:28.220
不得了

41:28.220 --> 41:30.060
怎么个不得了法

41:30.060 --> 41:32.300
怎么个不得了

41:32.300 --> 41:34.060
这一拖不要了

41:34.060 --> 41:35.500
我们放到推向里边去了

41:35.500 --> 41:37.260
对不对

41:37.260 --> 41:38.460
每一次间隔时间

41:38.460 --> 41:40.380
到达的时候干嘛呢

41:40.380 --> 41:43.020
config.x

41:43.020 --> 41:45.340
config.y

41:45.340 --> 41:48.300
config.y

41:48.300 --> 41:49.900
x加上距离

41:49.900 --> 41:52.060
y也加上距离

41:52.060 --> 41:55.020
加了距离过后

41:55.020 --> 41:56.060
那么干嘛呢

41:56.060 --> 41:56.780
当然这里呢

41:56.780 --> 41:57.820
还是要边界判断一下

41:57.820 --> 41:59.020
为什么要边界判断呢

41:59.020 --> 42:00.220
因为

42:00.220 --> 42:02.060
如果你不边界判断的话

42:02.060 --> 42:03.260
如果你不边界判断的话

42:03.260 --> 42:04.540
因为你要数都要相反嘛

42:04.540 --> 42:05.180
对不对

42:05.180 --> 42:06.140
数都要相反

42:06.140 --> 42:07.580
所以说你得边界判断一下

42:07.580 --> 42:08.700
那么这里的直接判断一下

42:08.700 --> 42:10.300
是不是相等

42:10.300 --> 42:12.380
因为它我们知道这个y

42:12.380 --> 42:14.300
它是不可能超出这个范围的

42:14.380 --> 42:15.820
所以我们直接判断

42:15.820 --> 42:17.020
y是不是相等

42:17.020 --> 42:19.020
好

42:19.020 --> 42:21.420
如果y等于了这个最大值

42:21.420 --> 42:22.620
干嘛呢

42:22.620 --> 42:24.460
如果y等于这个最大值

42:24.460 --> 42:28.060
这个y的距离是取反

42:28.060 --> 42:30.540
y的距离变化是不是取反

42:30.540 --> 42:32.220
取回复数

42:32.220 --> 42:34.220
那么另一种情况

42:34.220 --> 42:35.260
另一种情况

42:35.260 --> 42:37.100
就是config.y

42:37.100 --> 42:39.020
等于了什么0

42:39.020 --> 42:40.220
数都是不是也要取反

42:40.220 --> 42:41.180
对不对

42:41.180 --> 42:42.860
y在上边界

42:43.180 --> 42:45.020
y在上边界和下边界

42:45.020 --> 42:46.380
我们现在直接用等号判断的

42:46.380 --> 42:48.300
因为它不可能超出这个范围

42:48.300 --> 42:49.740
不可能超出的

42:49.740 --> 42:51.260
所以我们直接用等号判断

42:51.260 --> 42:53.500
如果这两个就取反

42:53.500 --> 42:54.060
对不对

42:54.060 --> 42:56.060
这两个情况下都可以取反

42:56.060 --> 42:57.820
那么x是不是一样的

42:57.820 --> 42:59.660
x是不是一样的

42:59.660 --> 43:01.180
x

43:01.180 --> 43:02.940
x

43:02.940 --> 43:04.220
那么这里取反

43:04.220 --> 43:06.460
两种config都在对象里面

43:06.460 --> 43:08.860
它全在对象里面

43:08.860 --> 43:12.760
全在对象里面

43:12.760 --> 43:16.860
这样子

43:16.940 --> 43:18.060
x是一样的

43:18.060 --> 43:19.740
这里是client

43:19.740 --> 43:21.020
width

43:21.020 --> 43:21.900
减去什么呢

43:21.900 --> 43:24.060
减去config.

43:24.060 --> 43:25.180
这里是height

43:25.180 --> 43:27.020
这里是width

43:27.020 --> 43:30.860
width

43:30.860 --> 43:32.380
也可以判断边界对吧

43:32.380 --> 43:33.980
如果到X方向到那边界

43:33.980 --> 43:35.420
是不是x的距离取反

43:35.420 --> 43:35.820
对吧

43:35.820 --> 43:36.540
config

43:36.540 --> 43:37.340
第二是什么

43:37.340 --> 43:39.500
xdis

43:39.500 --> 43:41.820
等于副的config

43:41.820 --> 43:44.140
第二

43:44.140 --> 43:46.300
xdis

43:46.300 --> 43:46.780
对不对

43:46.780 --> 43:48.780
这个取反

43:48.780 --> 43:50.540
你看边界判断对吧

43:50.540 --> 43:51.820
每一次x变化

43:51.820 --> 43:52.460
y变化

43:52.460 --> 43:54.300
然后判断边界

43:54.300 --> 43:56.940
只需要用等号判断就行了

43:56.940 --> 43:59.740
只需要等号判断就行了

43:59.740 --> 44:01.340
就写完了

44:01.340 --> 44:02.140
就写完了吗

44:02.140 --> 44:04.060
我们后面还没改变多么元素呢

44:04.060 --> 44:05.020
就写完了

44:05.020 --> 44:06.140
因为你每一次改变

44:06.140 --> 44:07.020
x要改变y

44:07.020 --> 44:08.700
它都会改变多么元素的

44:08.700 --> 44:09.740
都会改变的

44:09.740 --> 44:11.020
保存我们看一下

44:11.020 --> 44:11.900
这里有一个问题

44:11.900 --> 44:13.180
delation有问题

44:13.180 --> 44:14.460
这里是config

44:14.460 --> 44:16.300
delation

44:16.700 --> 44:18.860
wis is not defined

44:18.860 --> 44:20.860
config里面的wis

44:20.860 --> 44:22.540
它说它没有定义

44:22.540 --> 44:23.980
没有定义

44:23.980 --> 44:24.940
哪个地方没有定义

44:24.940 --> 44:27.660
我看一下它包出包到哪个地方的

44:27.660 --> 44:30.300
它包在这里的

44:30.300 --> 44:32.540
这里我看到了

44:32.540 --> 44:33.820
在这里

44:33.820 --> 44:34.940
减据宽度的时候

44:34.940 --> 44:38.300
减据宽度是应该是Z点wis

44:38.300 --> 44:38.940
就是这个对象

44:38.940 --> 44:40.140
当前对象的

44:40.140 --> 44:41.180
这个函数里边

44:41.180 --> 44:43.500
这个函数里边的Z是表示当前对象

44:43.500 --> 44:45.980
表示这个当前对象

44:46.060 --> 44:47.260
这里也是

44:48.780 --> 44:49.980
y这里也是

44:49.980 --> 44:51.180
Z is the height

44:52.300 --> 44:53.100
保存

44:53.980 --> 44:54.540
你看

44:54.940 --> 44:55.980
能达到一样的效果

44:55.980 --> 44:57.260
完全一样的效果

44:57.260 --> 44:59.740
但是我们现在代码的可读性

45:00.220 --> 45:05.180
和代码的将来的扩展性

45:05.180 --> 45:06.220
不得了

45:06.220 --> 45:07.340
因为我们现在你看

45:07.340 --> 45:08.620
我们只关心数据

45:08.620 --> 45:09.580
我们要x变化

45:09.580 --> 45:11.420
只需要把它的x加1就行了

45:11.420 --> 45:12.940
比方说我们现在停止

45:12.940 --> 45:14.780
不要让它动了

45:15.260 --> 45:16.540
我再来看一下

45:16.540 --> 45:19.980
我们要改变这个DIV的位置

45:19.980 --> 45:20.780
怎么改变

45:20.780 --> 45:23.100
config.x等于100

45:23.100 --> 45:24.300
你看改变了

45:24.300 --> 45:26.540
我们还需要去给它设什么动物对象吗

45:26.540 --> 45:27.500
不需要了

45:27.500 --> 45:30.060
改变y300

45:30.060 --> 45:33.900
比方说y付的1000

45:33.900 --> 45:34.620
付的1万

45:34.620 --> 45:35.100
有用吗

45:35.100 --> 45:35.740
它只能到这

45:35.740 --> 45:35.980
对吧

45:35.980 --> 45:36.460
只能到这

45:36.460 --> 45:37.660
因为现在取得范围的

45:37.660 --> 45:39.980
你看这个代码多优雅

45:39.980 --> 45:41.100
优雅的不得了

45:42.060 --> 45:42.940
他说

45:42.940 --> 45:44.220
height is not defined

45:44.220 --> 45:45.340
到这里

45:45.340 --> 45:46.700
我这里还有一个地方

45:46.700 --> 45:48.460
这里要写个什么

45:48.460 --> 45:49.900
z是点height

45:49.900 --> 45:50.780
这里也是

45:50.780 --> 45:52.060
x也是

45:52.060 --> 45:55.580
z是点位置

45:55.580 --> 45:56.620
那么看一下

45:56.620 --> 45:57.180
等于1

45:57.180 --> 45:58.060
是不是只能到这

45:58.060 --> 45:59.180
只能到这

45:59.180 --> 46:00.300
看到没

46:00.300 --> 46:01.180
这样子程序以后

46:01.180 --> 46:02.300
是不是非常好维护

46:02.300 --> 46:03.740
而且用起来非常非常方便

46:03.740 --> 46:05.580
我们只需要改xy就行了

46:05.580 --> 46:06.860
因此我们刚才

46:06.860 --> 46:07.660
是不是看到了

46:07.660 --> 46:09.340
这里只需要改xy就完事了

46:09.340 --> 46:10.060
对不对

46:10.060 --> 46:13.420
只需要改动xy就完事了

46:13.420 --> 46:13.980
这里

46:15.260 --> 46:16.780
这就是它的好处

46:16.780 --> 46:18.140
纯具体的好处

46:18.140 --> 46:18.860
那么这个代码

46:18.860 --> 46:20.300
让你想起了啥呢

46:20.300 --> 46:21.980
这个代码

46:21.980 --> 46:25.740
有没有让你回忆起一些东西

46:25.740 --> 46:28.460
我们给x负责

46:28.460 --> 46:29.420
我们用过的

46:29.420 --> 46:31.100
真的用过的

46:31.100 --> 46:40.330
什么时候用过的

46:40.330 --> 46:42.090
我给一个属性负责

46:42.090 --> 46:44.410
凭什么页面变化

46:44.490 --> 46:47.770
它页面凭什么也会变化

46:47.770 --> 46:48.810
这就乖了

46:48.810 --> 46:50.570
我给它的属性负责

46:50.570 --> 46:51.930
它页面怎么会变化呢

46:51.930 --> 46:53.450
属性负责我们以前说过什么

46:53.450 --> 46:54.330
本质是什么

46:54.330 --> 46:55.930
就是把一个数据存进去对吧

46:55.930 --> 46:58.410
数据存去它怎么凭什么变化

46:58.410 --> 46:59.850
凭什么变化

46:59.850 --> 47:01.370
是因为这个属性

47:01.370 --> 47:03.930
它就是一个防蚊期属性

47:03.930 --> 47:05.210
你给它负责的时候

47:05.210 --> 47:06.970
它运行的是一段函数

47:06.970 --> 47:09.450
这个函数里面做了好多好多处理

47:09.450 --> 47:10.970
超级多的处理

47:10.970 --> 47:14.650
然后最终的目的是

47:14.650 --> 47:17.690
往这个页面的DIV里面加一段东西

47:17.690 --> 47:19.850
加的东西重新把页面渲染出来

47:19.850 --> 47:21.450
最终你看到页面的变化

47:21.450 --> 47:23.050
而你写的时候是不是很简单

47:23.050 --> 47:24.810
你只干负责就行了

47:24.810 --> 47:27.540
再看

47:27.540 --> 47:32.630
我们以前经常不这样子用吗

47:32.630 --> 47:33.990
来

47:33.990 --> 47:36.230
Background

47:36.230 --> 47:37.990
Background

47:37.990 --> 47:40.630
预设

47:40.630 --> 47:41.670
变了

47:41.670 --> 47:42.510
凭什么

47:42.510 --> 47:44.710
我只是在GS里面保存了一个数据

47:44.790 --> 47:46.630
保存了一个制服串到这个属性里边

47:46.630 --> 47:48.390
它凭什么页面上有变化

47:48.390 --> 47:50.630
因为这是一个存取器属性

47:50.630 --> 47:51.590
你动它的时候

47:51.590 --> 47:53.110
实际上运行的是一个函数

47:53.110 --> 47:55.110
这个函数它就会调用各种各样的

47:55.110 --> 47:56.270
其他乱七八糟的东西

47:56.270 --> 47:58.550
导致这个页面重新渲染

47:58.550 --> 48:00.990
重拍样式

48:00.990 --> 48:02.310
你看这个意思吧

48:02.310 --> 48:05.590
所以说我们之前学过的这些神器的东西

48:05.590 --> 48:06.710
实际上都是有道理的

48:06.710 --> 48:07.630
都是有原因的

48:07.630 --> 48:09.110
它到底怎么来的

48:09.110 --> 48:10.790
介石语言其实

48:10.790 --> 48:14.150
我觉得介石语言应该是魔法最少的语言

48:14.190 --> 48:15.110
它没有什么说

48:15.110 --> 48:16.990
记住这个东西就是这样子

48:16.990 --> 48:17.870
天生就是这样子

48:17.870 --> 48:18.470
不是的

48:18.470 --> 48:21.230
它好东西都是根据自己的语法规则做出来的

48:21.230 --> 48:24.550
包括这些都是根据介石的语法规则做出来的

48:24.550 --> 48:25.790
它是一个存取器属性

48:29.750 --> 48:30.590
这是这一块

48:30.590 --> 48:32.350
这一块存取器属性

48:34.350 --> 48:35.590
那么我们再来介绍一下

48:35.590 --> 48:36.750
其他的属性描述服

48:38.590 --> 48:42.620
其他的属性描述服

48:42.620 --> 48:43.700
其他的属性描述

48:43.700 --> 48:44.940
主要是为了说这个

48:45.020 --> 48:46.420
其他都是很简单

48:46.420 --> 48:47.420
其他的描述服

48:47.420 --> 48:48.100
我们来看一下

48:49.500 --> 48:49.820
这边

48:51.580 --> 48:52.420
就这么几个

48:52.420 --> 48:53.860
就这么几个

48:53.860 --> 48:56.100
这个了解一下就行了

48:56.100 --> 48:57.020
configurable

48:58.100 --> 48:59.180
就这个配置

48:59.180 --> 49:00.140
这个配置是干嘛呢

49:00.140 --> 49:01.660
它这个配置指的是

49:01.660 --> 49:03.620
你这个属性描述服

49:03.620 --> 49:05.140
它上面有它说

49:06.180 --> 49:08.060
你这个描述服能不能重新修改

49:09.140 --> 49:10.140
能不能重新修改

49:10.140 --> 49:10.860
就什么意思呢

49:12.060 --> 49:12.820
就是说

49:12.820 --> 49:14.900
我这里不是已经写了一个属性描述服吗

49:14.900 --> 49:16.940
我一会能不能把这个属性描述服改了

49:16.940 --> 49:18.500
把这个描述服重新改一遍

49:19.260 --> 49:20.460
就配置了这么一个东西

49:22.140 --> 49:23.460
它默认为Force

49:23.460 --> 49:25.220
默认是不能修改的

49:25.220 --> 49:27.380
这个属性描述服是不能修改的

49:27.380 --> 49:28.500
那么比方说

49:28.500 --> 49:29.540
比方说

49:29.540 --> 49:30.620
那咱们这里

49:31.380 --> 49:33.820
这里把这个Y给它改一下

49:33.820 --> 49:35.460
给它改一下

49:35.460 --> 49:37.900
这里给成了我们输出一段东西

49:37.900 --> 49:38.460
console

49:39.540 --> 49:40.100
点log

49:41.260 --> 49:42.140
abc

49:42.140 --> 49:43.540
比方说得到Y的时候

49:43.540 --> 49:44.660
给它输出一个东西

49:44.700 --> 49:45.660
看一下能不能改

49:47.140 --> 49:48.140
你看它说什么

49:48.700 --> 49:51.180
console不能redefine

49:51.180 --> 49:53.180
重新定义属性Y

49:53.980 --> 49:56.300
你不能重新定义属性Y

49:56.300 --> 49:56.860
为什么呢

49:56.860 --> 49:57.940
就是因为这个配置

49:58.700 --> 49:59.460
这个配置存在

49:59.460 --> 50:02.420
它说一个属性描述服已经被定义了

50:02.420 --> 50:04.180
那么你就不能重新定义了

50:04.180 --> 50:05.340
你只能定义别的属性了

50:05.340 --> 50:06.420
这个属性已经定义过了

50:07.220 --> 50:08.780
如果你把它设为处就可以

50:09.820 --> 50:10.860
你把它设为处就可以

50:11.940 --> 50:12.660
比方说

50:12.660 --> 50:14.140
咱们把它这个属性

50:14.900 --> 50:15.660
嗯

50:17.140 --> 50:17.860
把它设为处

50:22.070 --> 50:22.630
把它设为处

50:22.630 --> 50:23.150
我们来看一下

50:23.150 --> 50:24.190
看一下

50:24.630 --> 50:25.150
保存

50:25.910 --> 50:28.510
那么咱们再看一下这边属性描述

50:28.510 --> 50:29.910
这个config

50:29.910 --> 50:31.910
点Y对不对

50:31.910 --> 50:33.430
你看是不是改了

50:33.430 --> 50:34.910
改成新的属性描述服了

50:34.910 --> 50:35.950
是这么个意思

50:35.950 --> 50:38.350
表示属性描述服是否能新改

50:38.350 --> 50:40.110
我们一般都不太会用这个东西

50:40.110 --> 50:41.070
雕下一下就行了

50:42.110 --> 50:43.030
而且设为出国后

50:43.030 --> 50:44.350
这个属性是可以被删除的

50:44.350 --> 50:45.110
config

50:45.110 --> 50:45.750
点Y

50:45.750 --> 50:46.350
你看一下

50:47.190 --> 50:48.870
好 现在再看一下这个config

50:48.870 --> 50:49.590
Y这个属性

50:50.510 --> 50:51.710
这个Y这个属性什么没了

50:51.710 --> 50:52.470
只有一个X了

50:52.470 --> 50:52.990
看没

50:52.990 --> 50:53.630
Y属性没了

50:53.630 --> 50:54.630
它可以被删除

50:54.630 --> 50:56.030
如果你没有设置这个

50:56.030 --> 50:57.390
它默认为Force

50:57.390 --> 50:58.990
默认为Force的情况下

50:58.990 --> 51:00.270
那么你不能改

51:00.270 --> 51:01.830
你肯定是不能改的

51:01.830 --> 51:02.670
你不能改的话

51:02.670 --> 51:04.070
同时这个属性

51:04.070 --> 51:05.310
因为它不是一个普通的

51:05.310 --> 51:07.150
它是加了属性描述服的属性

51:07.150 --> 51:08.510
因此你是不能删的

51:10.430 --> 51:11.190
你看一下

51:11.190 --> 51:12.270
它返回的一个Force

51:12.270 --> 51:13.990
表示了你没有删除成功

51:13.990 --> 51:16.790
因为它是带了属性描述服的

51:16.830 --> 51:17.670
属性

51:17.670 --> 51:18.710
因此这种属性

51:18.710 --> 51:19.710
你是不能删的

51:19.710 --> 51:20.510
看没

51:20.510 --> 51:21.990
这个Y删不掉

51:21.990 --> 51:23.110
是这么个意思

51:23.110 --> 51:24.870
了解一下就行了

51:24.870 --> 51:26.710
这个东西等会说

51:26.710 --> 51:28.670
这个Writable

51:28.670 --> 51:30.190
表示这个属性

51:30.190 --> 51:32.350
是否可以覆盖之前的值

51:32.350 --> 51:33.590
是否可以复制

51:33.590 --> 51:35.950
但是这个配置

51:35.950 --> 51:36.310
这个配置

51:36.310 --> 51:36.990
Vidote我们说过了

51:36.990 --> 51:37.190
对吧

51:37.190 --> 51:38.110
Vidote说过了

51:38.110 --> 51:40.070
这个配置在存取描述服

51:40.070 --> 51:42.070
就是存取器里边是无效的

51:42.070 --> 51:43.310
就像这种

51:43.310 --> 51:44.790
你写的存取器了

51:44.790 --> 51:46.230
那么你复制也好

51:46.230 --> 51:47.950
读取值也好

51:47.950 --> 51:49.390
读取它的值也好

51:49.390 --> 51:50.710
都会经过函数

51:50.710 --> 51:52.150
跟这个属性没关系了

51:52.150 --> 51:53.590
所以说你这种配置

51:54.950 --> 51:57.230
在存取器的属性里面是无效的

51:57.230 --> 51:59.630
但它普通数据属性里面是有效的

51:59.630 --> 52:00.270
我们来看一下

52:03.610 --> 52:04.810
有的时候我们要做一些

52:04.810 --> 52:05.970
止毒的效果出来

52:05.970 --> 52:07.650
你只能读取

52:07.650 --> 52:08.770
你不能复制

52:08.770 --> 52:09.690
比方说你只能读取

52:09.690 --> 52:11.090
你不能复制这种效果出来

52:11.090 --> 52:12.730
那么就可以利用这个东西

52:13.930 --> 52:14.730
比方说

52:14.730 --> 52:17.250
我们写两种方式来做这个类似的效果

52:18.130 --> 52:18.770
比方说

52:19.330 --> 52:20.250
这个Name

52:20.850 --> 52:22.850
Name就是ABC

52:23.850 --> 52:24.770
不 这样子

52:25.690 --> 52:26.170
这样子

52:26.610 --> 52:28.810
OBG的Name属性

52:29.690 --> 52:31.050
值为值

52:32.610 --> 52:35.530
值固定为ABC

52:37.170 --> 52:39.530
而且不能被

52:39.530 --> 52:41.050
不能被重新复制

52:41.690 --> 52:42.610
重新复制

52:42.610 --> 52:44.210
比方说面词题问到你这个

52:44.250 --> 52:45.410
如果你问到这个

52:45.410 --> 52:47.050
最好的办法就是什么

52:47.050 --> 52:48.370
属性描述符

52:48.370 --> 52:49.370
好 咱们来看一下

52:49.370 --> 52:50.130
Object

52:51.010 --> 52:51.570
什么

52:52.530 --> 52:53.850
DefineProperty

52:54.490 --> 52:55.490
DefineProperty

52:55.490 --> 52:56.890
好 然后干嘛呢

52:56.890 --> 52:58.010
这里传一个对象

52:58.010 --> 52:58.890
传一个对象

52:58.890 --> 52:59.730
OBC

52:59.730 --> 53:02.330
然后属性的名字是Name

53:03.330 --> 53:04.810
我们写两种办法

53:04.810 --> 53:05.730
两种办法都写一遍

53:05.730 --> 53:07.090
一种是用存取器

53:07.090 --> 53:08.490
存取器的话非常简单

53:08.490 --> 53:09.490
你只写个Gate就行了

53:09.490 --> 53:10.410
set不写了

53:10.410 --> 53:11.490
不写set

53:11.490 --> 53:12.890
不写set它就没有这个函数

53:12.930 --> 53:15.210
没有这个函数 它肯定是没法运行函数

53:15.210 --> 53:16.250
我们这里

53:16.250 --> 53:17.410
返回一个什么

53:17.410 --> 53:18.330
直接返回什么

53:18.330 --> 53:19.410
ABC

53:19.410 --> 53:20.930
这是这第一种方式

53:20.930 --> 53:22.250
使用存取器的方式

53:22.250 --> 53:23.490
然后咱们来看一下

53:23.490 --> 53:24.290
看一下

53:25.010 --> 53:26.330
能不能完成这样的效果

53:27.850 --> 53:28.770
比方说一个属性

53:28.770 --> 53:30.490
Object.Name

53:31.010 --> 53:31.770
ABC

53:31.770 --> 53:32.770
它运行的是这个函数

53:32.770 --> 53:34.450
函数返回ABC

53:34.450 --> 53:36.090
能不能够复制呢

53:38.370 --> 53:39.650
复制好像是可以

53:39.650 --> 53:41.690
但是你读其他的字点Name

53:41.730 --> 53:42.850
是不是还是ABC

53:42.850 --> 53:43.250
对不对

53:43.250 --> 53:44.410
还是ABC

53:44.410 --> 53:46.410
这是用存取器的方式

53:46.410 --> 53:47.610
你跟它复制无效

53:47.610 --> 53:48.650
因为它没有函数

53:48.650 --> 53:49.010
对不对

53:49.010 --> 53:49.810
函数都没有

53:51.810 --> 53:52.610
下一个

53:52.610 --> 53:53.530
另外一种方式

53:53.530 --> 53:55.450
也是使用属性描述符

53:55.450 --> 53:56.410
define property

53:57.610 --> 53:58.690
obj

53:58.690 --> 53:59.970
属性名Name

53:59.970 --> 54:02.170
属性的值

54:02.170 --> 54:03.490
直接写的值

54:03.490 --> 54:04.730
值为ABC

54:04.730 --> 54:05.890
同时配置什么

54:05.890 --> 54:07.010
rightable

54:07.010 --> 54:08.210
right什么意思

54:08.210 --> 54:09.170
写对不对

54:09.170 --> 54:10.490
able表示能力

54:10.490 --> 54:11.770
是不是可写的

54:11.770 --> 54:13.050
有没有可写的能力

54:13.050 --> 54:13.730
force

54:14.410 --> 54:15.090
不可写

54:15.650 --> 54:16.330
不可写

54:16.330 --> 54:17.770
其实你其实

54:17.770 --> 54:19.970
rightable它默认就为force

54:19.970 --> 54:21.170
默认就是不可写的

54:21.170 --> 54:22.850
你只要配置了属性描述符

54:22.850 --> 54:24.250
它默认就是不能复制的

54:25.090 --> 54:26.290
咱们再看一下

54:26.290 --> 54:27.130
这样子写的过后

54:27.130 --> 54:29.490
我们看一下OBject.Name

54:29.490 --> 54:30.650
ABC没问题吧

54:30.650 --> 54:31.610
OBject.Name

54:31.610 --> 54:32.690
然后给它复制

54:32.690 --> 54:33.690
123

54:34.890 --> 54:35.570
.Name

54:35.570 --> 54:36.690
所以还是ABC

54:36.690 --> 54:37.450
对吧

54:37.450 --> 54:38.730
没用

54:38.730 --> 54:39.970
复制没用

54:40.090 --> 54:41.930
rightable是无法覆盖的

54:41.930 --> 54:43.890
如果你把设为处理的话就可以了

54:43.890 --> 54:45.410
就是能复制的

54:45.410 --> 54:46.130
Name

54:46.130 --> 54:47.050
123

54:47.050 --> 54:48.050
ABC.Name

54:48.050 --> 54:48.450
你看

54:48.450 --> 54:49.970
所以123

54:49.970 --> 54:51.290
这就是这么个意思

54:51.290 --> 54:52.050
rightable

54:52.050 --> 54:52.770
但大家要注意

54:52.770 --> 54:53.650
这个rightable属性

54:53.650 --> 54:54.890
我们可能以后

54:54.890 --> 54:57.890
就是你特别写一些高尔的东西

54:57.890 --> 54:58.770
写一些框架

54:58.770 --> 54:59.970
写一些底层的裤

54:59.970 --> 55:00.610
之类的东西

55:00.610 --> 55:02.090
可能会用到这些

55:02.090 --> 55:03.930
这些特殊的技术

55:04.930 --> 55:06.290
因为我们写一些

55:06.290 --> 55:08.210
特别是一些公用的东西

55:08.250 --> 55:11.010
或者是一些框架的东西

55:11.010 --> 55:11.690
类的东西

55:11.690 --> 55:13.530
我们希望给外面的人

55:13.530 --> 55:14.730
用的越简单越好

55:14.730 --> 55:16.570
因此我们会做一些很复杂的事情

55:16.570 --> 55:18.370
可能会用到这些东西

55:18.370 --> 55:19.370
大家要注意

55:19.370 --> 55:20.730
rightable和value

55:20.730 --> 55:21.970
这两个配置

55:21.970 --> 55:24.450
在纯矩器里边是无效的

55:24.450 --> 55:26.170
纯矩器里边是无效的

55:26.170 --> 55:26.970
那么后面Gate

55:26.970 --> 55:27.570
谁说过了

55:27.570 --> 55:28.090
对吧

55:28.090 --> 55:29.130
就纯矩器

55:29.130 --> 55:30.450
我们再来说这个

55:30.450 --> 55:32.090
当然纯矩器在这边就无效了

55:32.090 --> 55:34.170
在数据属性里面就无效了

55:34.170 --> 55:35.170
不能共用

55:35.170 --> 55:37.610
就是这两个配置

55:37.650 --> 55:39.730
跟这两个东西是不能共用的

55:39.730 --> 55:40.690
什么意思

55:40.690 --> 55:40.890
好

55:40.890 --> 55:42.410
现在说最后一个enumerable

55:43.930 --> 55:45.530
表示什么意思呢

55:45.530 --> 55:46.370
表示

55:46.370 --> 55:48.090
当它为q的时候

55:48.090 --> 55:49.250
它默认为force

55:49.250 --> 55:50.170
默认为force

55:50.170 --> 55:51.970
只要你配置了什么属性描述服

55:51.970 --> 55:53.370
它就默认为force

55:53.370 --> 55:55.730
那么如果它为q的时候

55:55.730 --> 55:57.730
表示这个属性是可迭代的

55:57.730 --> 55:59.210
默认为force

55:59.210 --> 56:00.530
这是啥意思呢

56:00.530 --> 56:02.050
什么叫可迭代呢

56:03.530 --> 56:04.610
什么叫可迭代

56:04.610 --> 56:07.460
比方说吧

56:07.460 --> 56:09.660
这是一个普通的数据属性

56:09.660 --> 56:11.500
这是两个普通的数据属性

56:11.500 --> 56:14.660
这里是加了属性描述服的数据属性

56:14.660 --> 56:17.860
那么这里我们给它设置一下enumerable

56:17.860 --> 56:20.740
enumerable表示可迭代的

56:20.740 --> 56:21.460
把设为force

56:23.100 --> 56:24.620
不可迭代

56:24.620 --> 56:25.620
不可迭代

56:25.620 --> 56:26.300
怎么要迭代呢

56:26.300 --> 56:27.940
就便利

56:27.940 --> 56:30.340
这个属性是不能便利的

56:30.340 --> 56:32.860
我们之前不是写了一个 for for 循环吗

56:32.860 --> 56:35.140
for in 循环

56:35.140 --> 56:37.540
当时我们说这个for in 循环

56:37.540 --> 56:38.940
它是可以便利啥

56:38.940 --> 56:41.340
便利一个对象的属性

56:41.340 --> 56:43.620
可以便利一个对象的所有属性

56:43.620 --> 56:45.180
但是我们会发现

56:45.180 --> 56:46.700
这个for in 循环

56:46.700 --> 56:49.260
它并不能便利所有的属性

56:49.260 --> 56:51.140
应该是在什么时候我们讲过这个东西

56:51.140 --> 56:52.620
在原型链

56:52.620 --> 56:53.740
在原型链的时候

56:53.740 --> 56:56.140
我们说由于原型链的存在

56:56.140 --> 56:58.380
他们最终都会继承op 几个车

56:58.380 --> 56:59.700
那么op 几个车里边有的东西

56:59.700 --> 57:00.860
我们都会便利出来

57:00.860 --> 57:03.100
那凭什么没有便利op 几个车里面的东西呢

57:03.100 --> 57:03.900
为什么呢

57:03.940 --> 57:06.380
包括这里我们不是有个属性name

57:06.380 --> 57:08.060
那name 为什么没便利出来了

57:08.060 --> 57:09.860
你看一下这个obj

57:09.860 --> 57:10.940
它不是有name 属性吗

57:10.940 --> 57:13.140
你看它为什么没便利出来了

57:13.140 --> 57:13.900
为什么呢

57:13.900 --> 57:16.980
就是因为我怕它配置为不可便利的

57:16.980 --> 57:18.100
不可迭代便利

57:18.100 --> 57:20.380
因此这个属性它不会便利

57:20.380 --> 57:22.620
这就解释了为什么

57:22.620 --> 57:24.500
op 几个车里边有那么多属性

57:24.500 --> 57:25.940
但是我们都便利不到

57:25.940 --> 57:27.980
就是这个原因

57:27.980 --> 57:28.900
因为这个属性它觉得

57:28.900 --> 57:30.260
便利这些东西有什么意义的

57:30.260 --> 57:30.780
没什么意义

57:30.780 --> 57:32.780
所以它没有让你便利的

57:32.780 --> 57:35.340
是这么个意思

57:35.340 --> 57:36.700
解释清楚了吧

57:36.700 --> 57:37.500
就很简单

57:37.500 --> 57:40.060
如果你把它设为q的话

57:40.060 --> 57:40.940
你看一下

57:40.940 --> 57:42.300
是不是可以便利的这个属性

57:42.300 --> 57:44.060
它就可以便利的

57:44.060 --> 57:47.740
这是关于eniable

57:47.740 --> 57:49.900
好 接下来我们再来看

57:49.900 --> 57:51.260
属性描述幅就讲完了

57:51.260 --> 57:52.100
就讲完了

57:52.100 --> 57:52.700
我们主要下来

57:52.700 --> 57:54.260
接下来再来看另外一个东西

57:54.260 --> 57:55.380
就是object里边

57:55.380 --> 57:57.980
另外一个就是给你提供的静态方法

57:57.980 --> 57:59.260
叫做objects

57:59.260 --> 58:04.180
get on property descriptor

58:04.300 --> 58:05.700
这什么意思

58:05.700 --> 58:10.220
获取某个对象

58:10.220 --> 58:12.220
当前

58:12.220 --> 58:13.620
某个对象的

58:13.620 --> 58:22.140
某个属性的属性描述幅对象

58:22.140 --> 58:23.660
获取某个对象的

58:23.660 --> 58:27.380
某个属性的属性描述幅对象

58:27.380 --> 58:28.900
但是这个属性

58:28.900 --> 58:30.020
一个前提条件

58:30.020 --> 58:34.140
该属性必须直接属于该对象

58:34.260 --> 58:39.210
就是如果在什么原型链上就不行了

58:39.210 --> 58:40.970
必须直接属于该对象

58:40.970 --> 58:42.570
比方说

58:42.570 --> 58:43.410
就这个属性

58:43.410 --> 58:44.610
就这个玩意

58:44.610 --> 58:45.770
obj

58:45.770 --> 58:47.650
咱们看一下

58:47.650 --> 58:52.050
objects get on property descriptor

58:52.050 --> 58:53.290
这里边我们写什么

58:53.290 --> 58:59.410
写一个obj

58:59.410 --> 59:00.850
然后再写一个什么

59:00.850 --> 59:03.130
写个n

59:03.130 --> 59:03.930
没问题吧

59:03.930 --> 59:04.530
obj

59:04.530 --> 59:05.850
再写一个就是

59:05.850 --> 59:09.010
name属性名

59:09.010 --> 59:10.450
获取这个对象的

59:10.450 --> 59:11.210
这个属性

59:11.210 --> 59:12.890
它的属性描述幅

59:12.890 --> 59:13.970
不是它的值

59:13.970 --> 59:15.330
得到它的属性描述幅

59:15.330 --> 59:16.850
你看得到是不是这个

59:16.850 --> 59:17.850
对吧

59:17.850 --> 59:19.330
表示一个普通的数据属性

59:19.330 --> 59:21.130
你看就是把对象就得到了

59:21.130 --> 59:22.370
就是把这个对象得到

59:22.370 --> 59:24.970
就是把属性的这个对象得到

59:24.970 --> 59:25.250
好

59:25.250 --> 59:26.130
接下来我们再看一下

59:26.130 --> 59:27.130
这两个属性

59:27.130 --> 59:28.490
x和y

59:28.490 --> 59:30.010
x和y是普通属性

59:30.010 --> 59:30.250
对吧

59:30.250 --> 59:31.810
它没有加属性描述幅

59:31.810 --> 59:34.490
那么它是一个普通的数据属性

59:34.970 --> 59:35.970
咱们来看一下

59:35.970 --> 59:38.170
它实际上会给你自动加属性描述幅

59:39.410 --> 59:41.690
get om property descriptor

59:42.970 --> 59:43.930
obj x

59:45.490 --> 59:46.290
看一下

59:46.290 --> 59:48.250
这个x本来是一个普通的属性的

59:48.250 --> 59:48.810
但是你看

59:48.810 --> 59:50.250
它是不是还是有属性描述幅

59:51.330 --> 59:52.890
它给你自己加了一个属性描述幅

59:52.890 --> 59:54.530
configurable表示什么意思

59:54.530 --> 59:56.450
表示可以配置属性描述幅

59:56.450 --> 59:57.730
还可以重新配置

59:57.730 --> 59:59.330
enumberable表示可迭代的

59:59.330 --> 01:00:01.370
所以说我们在循环里面可以看到

01:00:01.370 --> 01:00:02.730
value值是1对吧

01:00:02.730 --> 01:00:04.170
value值是1

01:00:04.210 --> 01:00:05.810
retable是q

01:00:05.810 --> 01:00:07.250
表示可以被覆盖掉

01:00:07.250 --> 01:00:08.450
对不对

01:00:08.450 --> 01:00:10.370
是这么个意思

01:00:10.370 --> 01:00:10.610
好

01:00:10.610 --> 01:00:11.650
那么咱们比方说

01:00:11.650 --> 01:00:12.530
再给它x

01:00:12.530 --> 01:00:14.370
复制一个

01:00:14.370 --> 01:00:15.370
10

01:00:15.370 --> 01:00:16.850
咱们再重新运行一下这句话

01:00:16.850 --> 01:00:18.370
你看value值数也跟着变了

01:00:18.370 --> 01:00:19.530
对不对

01:00:19.530 --> 01:00:21.610
所以说它有属性描述幅是存在的

01:00:21.610 --> 01:00:23.090
存在的

01:00:23.090 --> 01:00:23.330
好

01:00:23.330 --> 01:00:25.850
接下来我们来验证我们之前的说法

01:00:25.850 --> 01:00:26.970
之前我们说什么

01:00:26.970 --> 01:00:28.530
一个元素

01:00:28.530 --> 01:00:30.730
就动物对象里边 body

01:00:30.730 --> 01:00:31.810
它什么就是

01:00:31.810 --> 01:00:33.210
inertext

01:00:33.210 --> 01:00:34.050
inertext

01:00:34.050 --> 01:00:36.210
你看它在原型链哪个位置

01:00:36.210 --> 01:00:37.410
atmr element里面

01:00:37.410 --> 01:00:37.690
对吧

01:00:37.690 --> 01:00:38.850
原型链在这

01:00:38.850 --> 01:00:41.250
atmr element里面

01:00:41.250 --> 01:00:42.170
好

01:00:42.170 --> 01:00:43.090
给它复制为什么

01:00:43.090 --> 01:00:44.050
复制为abc

01:00:44.050 --> 01:00:44.650
你看一下

01:00:44.650 --> 01:00:45.850
应该上是不是有了

01:00:45.850 --> 01:00:45.970
好

01:00:45.970 --> 01:00:47.290
接下来我们就来看一下这个属性

01:00:47.290 --> 01:00:48.210
它到底是怎么回事

01:00:48.210 --> 01:00:49.170
凭什么这么神奇

01:00:49.170 --> 01:00:49.970
唯一复制

01:00:49.970 --> 01:00:51.650
它应该上就出现了

01:00:51.650 --> 01:00:51.810
好

01:00:51.810 --> 01:00:53.050
接下来我们怎么来看呢

01:00:53.050 --> 01:00:54.650
我们来看一下document body

01:00:54.650 --> 01:00:56.570
它的隐私原型

01:00:56.570 --> 01:00:57.450
隐私原型是不是

01:00:57.450 --> 01:00:58.970
atmr body element

01:00:58.970 --> 01:01:00.410
隐私原型的隐私原型

01:01:00.410 --> 01:01:01.570
所以我们在找它

01:01:01.570 --> 01:01:02.650
在找继承关系

01:01:02.650 --> 01:01:03.490
对吧

01:01:03.530 --> 01:01:04.770
在找继承关系

01:01:04.770 --> 01:01:05.810
是不是atmr element

01:01:05.810 --> 01:01:06.330
对吧

01:01:06.330 --> 01:01:06.690
好

01:01:06.690 --> 01:01:08.050
这是不够对象

01:01:08.050 --> 01:01:11.730
我们的inertext在这里边

01:01:11.730 --> 01:01:12.450
inertext

01:01:12.450 --> 01:01:12.970
看到没

01:01:12.970 --> 01:01:14.610
你看三个点

01:01:14.610 --> 01:01:16.090
是啥

01:01:16.090 --> 01:01:17.570
是不是仿问器

01:01:17.570 --> 01:01:19.610
你看这些东西是不是全是仿问器

01:01:19.610 --> 01:01:20.210
对不对

01:01:20.210 --> 01:01:22.090
这就是为什么我们可以

01:01:22.090 --> 01:01:23.690
设置它就这么神奇

01:01:23.690 --> 01:01:24.970
会导致页面变化

01:01:24.970 --> 01:01:27.330
那我们以后是不是可以自己做出这样的属性

01:01:27.330 --> 01:01:28.530
之前我们做那个

01:01:28.530 --> 01:01:30.010
那个球小球的时候

01:01:30.010 --> 01:01:31.170
是不是也是这样子玩的

01:01:31.170 --> 01:01:31.690
对吧

01:01:31.730 --> 01:01:33.850
之前我们做小球这个

01:01:33.850 --> 01:01:35.610
这个地方的时候

01:01:35.610 --> 01:01:36.370
是不是也是这样子玩的

01:01:36.370 --> 01:01:38.010
我们只需要改动它的x y

01:01:38.010 --> 01:01:39.330
页面它就自动跟那边了

01:01:39.330 --> 01:01:39.930
那怎么回事

01:01:39.930 --> 01:01:42.490
就是因为它做的是一个仿问器属性

01:01:42.490 --> 01:01:42.650
好

01:01:42.650 --> 01:01:43.410
咱们来验证一下吧

01:01:43.410 --> 01:01:45.210
再真实的验证一下

01:01:45.210 --> 01:01:46.330
把这个复制一下

01:01:46.330 --> 01:01:48.410
objects

01:01:48.410 --> 01:01:52.530
get omproperty descriptor

01:01:52.530 --> 01:01:54.290
我们找到这个对象的啥呢

01:01:54.290 --> 01:01:55.010
啥属性呢

01:01:55.010 --> 01:01:56.810
inertext

01:01:56.810 --> 01:01:57.250
对吧

01:01:57.250 --> 01:01:58.730
因为它只能找

01:01:58.730 --> 01:02:00.210
它只能找自身的属性

01:02:00.210 --> 01:02:01.250
不能找原型链上的

01:02:01.290 --> 01:02:03.090
所以我们把这个原型链的

01:02:03.090 --> 01:02:04.490
那个隐私原型找到

01:02:04.490 --> 01:02:05.770
直接把这个对象扔进去

01:02:05.770 --> 01:02:06.930
我们来验证一下

01:02:06.930 --> 01:02:07.530
你看一下

01:02:09.170 --> 01:02:09.970
对吧

01:02:09.970 --> 01:02:12.250
是不是可以有get有set对吧

01:02:12.250 --> 01:02:13.730
有get有set

01:02:13.730 --> 01:02:15.370
看呗

01:02:15.370 --> 01:02:18.330
这就是它为什么可以实现这样的效果

01:02:18.330 --> 01:02:18.650
好吧

01:02:20.570 --> 01:02:21.290
其他就没啥了

01:02:21.290 --> 01:02:21.930
我们这里

01:02:21.930 --> 01:02:23.050
这些可能就介绍到一下

01:02:23.050 --> 01:02:24.250
这个属性描述服务

01:02:24.250 --> 01:02:25.170
因为我觉得

01:02:25.170 --> 01:02:25.850
这个姿势呢

01:02:25.850 --> 01:02:27.650
对你们以后学习框架

01:02:27.650 --> 01:02:30.050
或者是做一些底层的东西

01:02:30.050 --> 01:02:31.410
你们会对你们有帮助

01:02:31.410 --> 01:02:32.930
有说帮助

01:02:32.930 --> 01:02:34.450
当然这是个扩展合成

01:02:34.450 --> 01:02:36.250
就算你听起来很

01:02:36.250 --> 01:02:37.530
如果你听起来很吃力

01:02:37.530 --> 01:02:38.770
觉得搞不清楚

01:02:38.770 --> 01:02:39.610
那么

01:02:39.610 --> 01:02:40.450
也放过它吧

01:02:40.450 --> 01:02:41.410
也放过你自己

01:02:41.410 --> 01:02:42.690
我们先把这个基础部分

01:02:42.690 --> 01:02:43.490
基础打牢再说

