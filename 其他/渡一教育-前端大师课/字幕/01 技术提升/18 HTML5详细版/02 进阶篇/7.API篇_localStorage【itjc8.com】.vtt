WEBVTT

00:00.000 --> 00:00.760
哈喽啊

00:01.280 --> 00:05.880
咱们这一集来说一个新的接口啊叫做Local Storage

00:06.660 --> 00:10.760
Local Storage干嘛呢 就是往这个浏览器里存东西的

00:11.020 --> 00:13.060
我们之前也往浏览器里存东西是吧

00:14.340 --> 00:15.100
存个什么

00:15.360 --> 00:16.380
ID啊

00:17.160 --> 00:18.180
存个什么东西的啊

00:18.440 --> 00:19.980
一般都是我们都往哪儿存的

00:22.500 --> 00:24.280
浏览器都哪儿能存东西

00:24.540 --> 00:26.340
我们之前是不是只学了一种就是Cookie

00:27.620 --> 00:30.420
之前我们说只学了可以往Cookie里存东西

00:31.060 --> 00:33.500
Cookie啊 不知道还有没有同学不知道Cookie是啥

00:35.890 --> 00:36.650
就是

00:36.910 --> 00:37.690
比如说百度吧

00:38.190 --> 00:39.210
比如说百度啊

00:42.290 --> 00:43.570
切到这个Network

00:43.830 --> 00:45.610
比如说随便查一个字

00:46.390 --> 00:48.170
他会发出去一个请求

00:48.430 --> 00:51.770
然后他发出去请求 这种请求

00:53.050 --> 00:54.570
发出一个请求

00:54.830 --> 00:57.650
然后这种请求你会看到他会带着Cookie

00:58.410 --> 01:00.970
他就有很多带着Cookie的地方 这里面有什么

01:03.330 --> 01:04.870
Request的Header被

01:05.130 --> 01:06.130
给我折叠了

01:06.410 --> 01:07.930
你看他就会带着这么多的Cookie

01:08.190 --> 01:09.210
这么多的Cookie

01:09.730 --> 01:12.550
Cookie里就是KV结构 一个Key

01:12.810 --> 01:15.610
一个值 一个Key 一个值 一个Key 一个值

01:15.870 --> 01:18.170
就相当于是一个变量 一个值 一个变量 一个值

01:18.430 --> 01:19.970
这样的一个形式

01:20.470 --> 01:22.270
但是存在Cookie里有一个缺点

01:22.790 --> 01:23.550
什么缺点呢

01:23.810 --> 01:26.630
就是你只要存在Cookie里每一次请求就会

01:26.890 --> 01:29.450
都发送给浏览器一遍

01:30.170 --> 01:32.470
每一次请求都会发送给浏览器一遍

01:32.990 --> 01:33.590
是不是

01:34.010 --> 01:34.770
有点浪费啊

01:35.030 --> 01:36.830
有点没那么大的用 是吧

01:36.830 --> 01:40.030
我不是每一个请求都需要把所有的Cookie值都传过去

01:40.290 --> 01:41.570
我后端又不需要 是吧

01:41.850 --> 01:43.070
比如说我正在在这块

01:43.430 --> 01:46.110
登录呢 你给我传了一堆其他的没有用的消息

01:46.110 --> 01:47.070
没有什么用 是吧

01:48.090 --> 01:51.670
他是每一次都要把全量的数据全都要推送过去

01:52.430 --> 01:53.710
这样会造成一个问题

01:54.330 --> 01:56.790
造成每次请求的时候

01:56.790 --> 02:06.770
都有可能传送许多无用的信息到后端

02:08.310 --> 02:11.630
每次请求的时候都有可能传送许多没有用的信息到后端

02:11.890 --> 02:13.430
所以这个时候怎么办

02:13.690 --> 02:14.190
人们就想

02:14.450 --> 02:16.510
我要开发出一种存储环境

02:17.010 --> 02:18.550
就仅用我前端用就可以了

02:18.810 --> 02:21.630
每一次往后发请求的时候

02:21.890 --> 02:23.150
不要往后短待 是吧

02:23.410 --> 02:25.470
既浪费贷宽 又影响速度

02:26.450 --> 02:28.050
所以这个时候我们出现了

02:28.490 --> 02:30.030
local storage

02:31.310 --> 02:32.330
local storage

02:32.590 --> 02:33.870
那local storage怎么写

02:34.130 --> 02:35.150
其实超级简单

02:35.410 --> 02:37.190
就直接local storage

02:40.010 --> 02:41.030
local storage

02:41.290 --> 02:43.090
比如说点 name

02:43.350 --> 02:45.650
然后我就给一个负一个值判断

02:47.170 --> 02:48.470
这样我们就能写进去

02:48.730 --> 02:49.230
看

02:50.770 --> 02:52.050
看这一面我只有一刷新

02:53.330 --> 02:55.370
在这个application里面就能看到

02:55.790 --> 02:57.470
local storage 看到了吗

02:57.730 --> 02:58.570
这有我的

02:58.830 --> 03:00.230
这个域名和端口是吧

03:00.290 --> 03:02.070
我就能看到我这个key是name

03:02.590 --> 03:03.470
y60判的

03:03.730 --> 03:05.410
key是name y60判的

03:05.670 --> 03:07.410
我在这里也可以直接执行

03:07.450 --> 03:08.850
local storage的

03:10.530 --> 03:11.450
a值

03:13.330 --> 03:14.110
等于18

03:16.670 --> 03:18.170
看我这个application

03:18.470 --> 03:18.970
刷新

03:21.230 --> 03:21.930
看来有吗

03:24.820 --> 03:27.140
没有 有 出来了是吧 在这呢

03:28.460 --> 03:29.620
哎 这等于是吧

03:30.660 --> 03:31.060
对吧

03:31.140 --> 03:33.100
我们可以直接就用一个这样的方法

03:33.100 --> 03:34.980
把我们这个值存进去

03:35.620 --> 03:38.540
存到local storage里面的是这些值

03:39.140 --> 03:41.220
当后像后段发送请求的时候

03:41.420 --> 03:42.980
是不会带着走的

03:42.980 --> 03:44.220
是不会带着走的

03:44.220 --> 03:45.780
那存在这就是存在这

03:45.780 --> 03:47.020
存在这就是存在这

03:48.620 --> 03:49.740
但这块有点好玩的

03:49.740 --> 03:50.780
哪块好玩呢

03:51.100 --> 03:53.500
看我这个local storage的ARR

03:53.500 --> 03:54.420
我存个数组

03:55.940 --> 03:56.820
123

03:57.780 --> 03:59.020
数组 你看啊

03:59.140 --> 04:00.220
我也能执行

04:00.220 --> 04:01.060
我也能存

04:01.060 --> 04:02.660
但是你看我存进来之后是啥

04:03.060 --> 04:04.780
是个1 斗号 2 斗号 3

04:05.660 --> 04:07.260
那我想取出来

04:07.260 --> 04:08.060
怎么取

04:10.780 --> 04:12.100
console.log

04:12.540 --> 04:13.580
超级简单

04:14.020 --> 04:16.060
local storage.ar

04:16.060 --> 04:18.100
就这样就能把ARR给取出来

04:18.100 --> 04:19.220
你看我刷新一下

04:20.060 --> 04:22.460
哎 我存进去的时候是个数组

04:22.460 --> 04:25.100
你给我出来的时候是个1 斗号 2 斗号 3

04:25.100 --> 04:25.620
为啥呀

04:27.500 --> 04:28.500
local storage

04:29.500 --> 04:32.180
只能存储自储串

04:33.180 --> 04:34.980
它只能存储自储串

04:35.380 --> 04:37.300
所以你偏要存个数组

04:37.300 --> 04:38.180
数组怎么办

04:38.180 --> 04:38.860
怎么存

04:41.100 --> 04:43.580
json的sdrin.jfi

04:45.740 --> 04:46.140
是吧

04:46.380 --> 04:47.260
把它给存进去

04:49.520 --> 04:51.000
这样的话你出来的时候

04:51.440 --> 04:52.960
其实它也不是个数组

04:53.280 --> 04:54.760
这是一个数组自储串

04:54.760 --> 04:56.080
这是一个数组自储串

04:56.820 --> 05:00.140
那我们怎么样能把这个数组自储串还原成数组

05:00.140 --> 05:01.340
其实我们也学过是吧

05:02.220 --> 05:03.220
json的parse

05:11.490 --> 05:12.490
json是不是写反了

05:14.490 --> 05:15.410
json的parse

05:15.850 --> 05:17.850
它就能把我们这个东西转换成

05:18.250 --> 05:19.530
再转换成对象是吧

05:19.530 --> 05:21.330
json的parse再给它转换成对象

05:22.890 --> 05:23.290
好

05:23.450 --> 05:25.690
那我们要是传一个对象能直接存吗

05:26.410 --> 05:28.290
local storage的opg

05:28.950 --> 05:32.550
我让它是等于一个name是panda

05:34.550 --> 05:35.550
然后

05:35.550 --> 05:37.550
a置是18

05:39.550 --> 05:40.990
你看它会能存进去个什么

05:42.990 --> 05:45.030
你看它opg存住了一个obrack的

05:46.550 --> 05:49.430
它直接调了一个类似于tosdrin类的这种方法

05:49.430 --> 05:51.430
所以说这个玩意我们存怎么办

05:52.230 --> 05:54.230
也得json的sdrin.jfi

05:55.230 --> 05:59.420
把它变成个json自储串

05:59.420 --> 06:00.920
json自储串存进去

06:02.280 --> 06:03.200
我取的时候

06:05.320 --> 06:05.720
log

06:07.000 --> 06:07.600
log啥呢

06:08.000 --> 06:09.000
json的parse

06:11.440 --> 06:13.560
local storage的obg

06:18.570 --> 06:20.370
这回你看我拿出来的对吧

06:22.530 --> 06:23.890
我拿出来的是这个东西了

06:24.330 --> 06:25.450
我拿出来的是这个东西

06:27.610 --> 06:27.930
好

06:28.130 --> 06:30.130
这个就是我们local storage

06:30.810 --> 06:32.810
和local storage有一个很像的

06:33.410 --> 06:34.850
有个很像的东西叫啥呢

06:34.850 --> 06:37.450
叫做session storage

06:42.080 --> 06:44.000
看我这里面也可以让它等于一个panda

06:44.920 --> 06:45.480
我刷新

06:46.920 --> 06:49.840
看local storage我把这些没有用的都清了吧

06:50.320 --> 06:50.760
可怜

06:51.920 --> 06:52.480
我再刷新

06:53.760 --> 06:56.080
看我这个local storage里只有一个panda对吧

06:56.280 --> 06:59.280
看我的session storage里还有一个panda是吧

06:59.680 --> 07:00.640
这两个都存进去了

07:02.400 --> 07:06.680
那这个local storage和session storage有啥区别呢

07:07.200 --> 07:07.560
是吧

07:07.560 --> 07:10.520
大家就会问这个local storage和session storage有啥区别呢

07:11.160 --> 07:11.560
记住

07:12.200 --> 07:15.880
你想非常长时间存储在客户端的

07:16.400 --> 07:18.160
用local storage

07:19.040 --> 07:23.680
长期存放在浏览器的

07:25.440 --> 07:27.480
写入local storage

07:30.520 --> 07:31.960
这个长期有多长期呢

07:33.320 --> 07:34.080
有多长期呢

07:34.100 --> 07:37.900
就是无论是今天还是明天

07:37.900 --> 07:39.980
无论这个窗口是打开还是关闭

07:40.780 --> 07:45.580
无论窗口是否关闭都需要存储

07:48.780 --> 07:51.180
那什么是session storage需要的这个环境呢

07:51.180 --> 07:52.100
session storage

07:53.780 --> 07:56.780
就是这次绘画

07:58.980 --> 08:02.380
临时需要存储的变量

08:02.380 --> 08:03.620
存储的变量

08:04.660 --> 08:05.580
临时需要存储

08:05.640 --> 08:07.200
下次绘画这些就没有用了

08:07.840 --> 08:09.600
下次绘画就这些就没有用了

08:10.320 --> 08:12.320
那怎么看这玩意是不是临时了

08:12.320 --> 08:14.480
你看我还是针对这个页面

08:14.480 --> 08:15.560
我把这些东西都住掉

08:16.160 --> 08:17.160
我还是针对这个页面

08:17.160 --> 08:18.280
我再刷新一遍

08:19.600 --> 08:20.360
还是针对这个页面

08:20.360 --> 08:22.080
我再刷新肯定是没有什么效果

08:22.080 --> 08:23.720
看好了我把它关了

08:23.720 --> 08:24.840
我再给它打开

08:26.200 --> 08:27.400
关了之后我再打开

08:28.480 --> 08:29.960
我在application里面看

08:30.600 --> 08:32.560
local storage name和panda还有

08:32.960 --> 08:35.040
session storage这里面已经空了

08:35.300 --> 08:36.220
已经空了

08:36.220 --> 08:37.500
它就会自动清空

08:37.500 --> 08:39.180
每一次窗口关闭的时候

08:39.180 --> 08:40.340
session会自动清空

08:45.420 --> 08:45.900
打开

08:49.790 --> 08:53.070
每次窗口关闭的时候

08:53.870 --> 08:59.430
这个session storage都会自动清空

09:00.310 --> 09:02.230
session storage就会自动清空

09:03.590 --> 09:06.390
这就是local storage和session storage的区别

09:06.570 --> 09:12.170
然后我们再来看这些local storage和cookie的区别

09:13.970 --> 09:14.770
我们对比一下

09:17.250 --> 09:21.730
local storage和cookie对比一下

09:24.090 --> 09:24.890
首先第一点

09:26.890 --> 09:31.170
local storage在发送请求的时候

09:33.850 --> 09:34.890
不会发出去

09:34.890 --> 09:36.010
不会把数据发出去

09:37.370 --> 09:40.130
所以这里面存着相对安全一点

09:40.130 --> 09:40.490
是吧

09:40.810 --> 09:44.570
cookie会把所有的数据

09:46.610 --> 09:48.610
数据带出去

09:53.290 --> 09:53.610
第二点

09:54.250 --> 09:58.330
第二点就是cookie存储的内容比较少

09:59.050 --> 10:00.290
因为它是个大字幅串

10:00.290 --> 10:03.050
你每次都要来回发存储的态度也不可能

10:03.530 --> 10:04.170
大概是几k

10:04.170 --> 10:05.170
大概是4k左右

10:06.150 --> 10:06.870
大概是4k

10:07.870 --> 10:09.670
但是local storage不一样

10:12.170 --> 10:15.970
local storage可以存放较多的内容

10:17.450 --> 10:19.770
大概能在5兆左右

10:21.650 --> 10:22.370
5兆左右

10:22.770 --> 10:24.410
存的还是相对比较多的

10:25.890 --> 10:28.170
这是local storage和cookie的主要区别

10:28.770 --> 10:30.290
local storage和cookie的主要区别

10:31.090 --> 10:33.130
然后我们这节课主要就是了解一下

10:33.130 --> 10:35.890
怎么往local storage和session storage那么写

10:36.030 --> 10:36.750
然后怎么读

10:37.510 --> 10:38.590
除了这种写法之外

10:38.590 --> 10:39.630
其实还有其他写法

10:39.630 --> 10:40.390
还有其他写法

10:40.950 --> 10:44.190
那么比如local storage的site item

10:44.910 --> 10:45.510
这也是写

10:46.910 --> 10:49.350
比如说我刚才写了个啥

10:50.430 --> 10:50.790
name

10:52.630 --> 10:53.550
刚才不是panam

10:53.550 --> 10:55.230
我现在来一个monkey

10:59.280 --> 11:01.960
看我这回的local storage

11:01.960 --> 11:02.920
是不是就变成monkey了

11:03.240 --> 11:04.000
就变成monkey了

11:05.880 --> 11:08.120
用site item的方式也能往里写

11:08.620 --> 11:12.980
它就相当于local storage的name等于monkey

11:14.660 --> 11:15.500
相当于这个命令

11:15.500 --> 11:16.500
相当于这个命令

11:17.500 --> 11:18.060
还有什么呢

11:18.620 --> 11:21.260
还有local storage的guide item

11:22.140 --> 11:22.620
guide item

11:23.100 --> 11:24.940
比如说我获取name

11:26.020 --> 11:26.900
也能获取到monkey

11:26.900 --> 11:27.300
是吧

11:28.180 --> 11:33.220
还有local storage的remove item

11:35.220 --> 11:36.220
我要移除一个key

11:36.900 --> 11:37.900
你不能只能写

11:37.920 --> 11:39.280
我还得能清楚是吧

11:40.000 --> 11:40.840
移除这个key

11:41.560 --> 11:43.000
移除了之后你在这里看

11:43.720 --> 11:44.440
是不是就没了

11:44.600 --> 11:46.160
是不是就找不到这个name

11:46.240 --> 11:47.160
monkey这个key了

11:47.960 --> 11:50.480
这就是local storage的基本的用法

11:50.480 --> 11:52.640
我们要需要一些值要存储在本地

11:53.040 --> 11:54.800
你可以存储在local storage这里

11:55.360 --> 11:57.320
再有local storage也是

11:57.720 --> 11:59.480
只能存储在自己的预下

12:00.040 --> 12:01.040
你看这个百度下的

12:01.640 --> 12:03.320
也有它也有它的local storage

12:03.760 --> 12:04.680
但是肯定不是我的

12:04.680 --> 12:06.160
你看它会存放在这个预下

12:06.180 --> 12:08.020
是吧3W的百度点卡布预下

12:08.500 --> 12:13.740
然后我们这里面存放在local host的63342预下

12:14.180 --> 12:16.340
咱之前说没说过这个预

12:16.740 --> 12:18.340
是怎么来区别一个预的

12:18.420 --> 12:19.580
什么样的叫一个预

12:21.700 --> 12:23.180
相同协议

12:23.900 --> 12:25.580
相同预名

12:26.660 --> 12:28.300
相同端口

12:28.660 --> 12:30.820
称为一个预

12:32.300 --> 12:35.060
比如说3W的百度

12:35.520 --> 12:36.520
我说这是一个预

12:36.720 --> 12:37.200
对吗

12:37.320 --> 12:38.480
这样说法是不对的

12:38.480 --> 12:40.920
记住一定是http帽号

12:41.320 --> 12:42.840
3W.百度点com

12:42.840 --> 12:43.760
这是一个预

12:43.760 --> 12:46.440
http s帽号 3W.

12:47.280 --> 12:48.880
3W.百度点com

12:49.120 --> 12:50.360
这是两个预

12:50.880 --> 12:52.040
这是两个预

12:52.360 --> 12:53.040
因为啥

12:53.040 --> 12:54.240
因为协议不同

12:54.800 --> 12:56.240
相同的预名和端口

12:56.240 --> 12:57.360
很多的同学能理解

12:57.680 --> 12:59.240
这个协议千万别忘了

12:59.600 --> 13:02.080
不同的协议也是不同的预

13:02.240 --> 13:03.720
不同的协议也是不同的预

13:04.500 --> 13:04.780
好

13:04.780 --> 13:07.500
这就是我们这一节课说的存储

13:07.500 --> 13:08.500
Local Storage

13:08.500 --> 13:10.140
我们再简单的回顾一下

13:10.140 --> 13:12.500
Local Storage和Siten Storage的区别

13:13.500 --> 13:16.300
是Local Storage在窗口关闭了之后

13:16.300 --> 13:18.020
我还不会消失

13:18.020 --> 13:19.500
Siten Storage会消失

13:19.900 --> 13:21.620
你直接可以用点属性的方式

13:21.620 --> 13:22.540
直接给它设置

13:22.660 --> 13:25.020
也可以用Site Atom的方式设置

13:25.540 --> 13:27.780
也可以用点属性的方式直接获取值

13:27.900 --> 13:29.980
也可以用Guide Atom的方式来获取值

13:31.180 --> 13:33.340
然后你也可以用Remove Atom的方式

13:33.400 --> 13:35.280
来移除一个Key V

13:35.480 --> 13:36.440
来移除一个Key V

13:36.960 --> 13:38.520
Local Storage和Cookie的区别

13:38.520 --> 13:41.080
就是Local Storage在发送请求的时候

13:41.080 --> 13:42.760
不会把值的内容都给带出去

13:42.760 --> 13:43.120
是吧

13:43.120 --> 13:44.280
Cookie是权量的

13:44.600 --> 13:46.200
能带出去多少就带出去多少了

13:46.880 --> 13:48.680
然后Cookie的存储比较小

13:48.680 --> 13:49.600
大概是4K左右

13:49.600 --> 13:51.280
Local Storage存的内容比较多

13:51.280 --> 13:52.200
大概是5M左右

13:52.760 --> 13:55.000
然后你可以放心的存

13:55.160 --> 13:58.080
不同的预之间是不可以跨预访问的

13:58.520 --> 14:00.040
然后什么是这里称为一个预

14:00.040 --> 14:00.760
相同协议

14:00.760 --> 14:01.240
相同预名

14:01.240 --> 14:01.720
相同端口

14:01.720 --> 14:02.320
会成为一个预

14:03.560 --> 14:04.840
这三折有一个不同

14:04.840 --> 14:05.760
就是不同的预

14:05.760 --> 14:07.280
就互相访问不到

14:07.840 --> 14:08.320
那好

14:08.320 --> 14:09.880
这就是我们今天这节课的内容

