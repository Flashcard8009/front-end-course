WEBVTT

00:00.240 --> 00:03.240
戴码写到这儿 总该做其他页面了吧

00:03.240 --> 00:06.240
别着急 还有一些事情

00:06.240 --> 00:08.240
就咱们前边呢 尽量处理好一点

00:08.240 --> 00:11.240
后边开发就会越来越轻松 越来越快

00:11.240 --> 00:14.240
前边的处理不好的话 后边开发就会困难重重

00:14.240 --> 00:16.240
早晚得处理的

00:16.240 --> 00:19.240
还有啥事要处理呢 咱们又回到看这儿

00:19.240 --> 00:22.240
看我们的那个首页

00:22.240 --> 00:26.240
原老师我怎么想不到这些东西呢

00:26.240 --> 00:28.240
我不在教你嘛

00:29.240 --> 00:31.240
看多了 慢慢就想到了

00:31.240 --> 00:34.240
又回到这儿 回到这儿 啥问题呢 不挺好的吗

00:34.240 --> 00:37.240
啥问题呢 就在这儿 问题就在这儿

00:37.240 --> 00:40.240
你看这个东西

00:40.240 --> 00:43.240
这个东西

00:43.240 --> 00:45.240
这个东西

00:45.240 --> 00:47.240
这些东西是啥呀 这些东西

00:47.240 --> 00:52.240
不就是跟远程获取数据相关的

00:52.240 --> 00:54.240
是不是

00:54.240 --> 00:57.240
是否正在远程获取数据

00:57.240 --> 01:00.240
这是远程获取到的数据

01:00.240 --> 01:03.240
然后呢 获取远程数据

01:03.240 --> 01:06.240
设置远程数据获取完成

01:06.240 --> 01:08.240
不就是在做这些事吗

01:08.240 --> 01:10.240
那么这些事啊 你想一想

01:10.240 --> 01:13.240
我们的页面中 其他的页面会不会做

01:13.240 --> 01:15.240
你就想吧

01:15.240 --> 01:18.240
文章页面会不会远程获取数据啊

01:18.240 --> 01:20.240
得获取吧

01:20.240 --> 01:22.240
像这些什么项目效果啊 这些的留言板

01:22.240 --> 01:24.240
会不会远程获取数据啊

01:24.240 --> 01:26.240
得获取吧

01:26.240 --> 01:28.240
会不会有一个圈圈在那一专啊

01:28.240 --> 01:30.240
会不会有一个家载中的效果呀

01:30.240 --> 01:32.240
也会吧 也就是说在我们的组建里边呢

01:32.240 --> 01:34.240
有很多的组建

01:34.240 --> 01:36.240
他们可能有一些共同的功能

01:36.240 --> 01:38.240
如果说你不抽离的话

01:38.240 --> 01:40.240
那么有些代码就会重复的越来越多

01:40.240 --> 01:42.240
重复代码我们总会是不好的

01:42.240 --> 01:45.240
得想办法把它解决掉

01:45.240 --> 01:47.240
那怎么解决呢

01:47.240 --> 01:50.240
就这几个学生的内容 叫做混入

01:50.240 --> 01:52.240
这里有一张非常直观的图

01:52.240 --> 01:54.240
就是组建里边有很多类似的功能

01:54.240 --> 01:56.240
不一定是获取远程数据

01:56.240 --> 01:57.240
有可能是别的

01:57.240 --> 01:58.240
那么这些功能呢

01:58.240 --> 02:00.240
可能分散在组建的不同配置中

02:00.240 --> 02:02.240
你看啊 获取远程数据

02:02.240 --> 02:04.240
你看在data配置里边有相关的吗

02:04.240 --> 02:08.240
在这个勾字函数里边有相关的吗

02:08.240 --> 02:11.240
对吧 它可能会分散在不同的配置里边

02:11.240 --> 02:13.240
那么我们得想办法抽离啊

02:13.240 --> 02:15.240
你看这个组建一和组建二

02:15.240 --> 02:16.240
我们用颜色来表示

02:16.240 --> 02:19.240
他们各自有各自的乱七八糟的功能配置

02:19.240 --> 02:20.240
但是呢有一些共同的

02:20.240 --> 02:22.240
你看这个 这个同一个颜色是共同的

02:22.240 --> 02:24.240
这是共同的代码

02:24.240 --> 02:25.240
那怎么来抽离呢

02:25.240 --> 02:27.240
其实我们就可以利用混入

02:27.240 --> 02:30.240
把这些共同的代码抽离出来

02:30.240 --> 02:32.240
然后呢 混入到不同的组建里边

02:32.240 --> 02:35.240
那么就好比是这些组建写了这些代码

02:35.240 --> 02:37.240
就要实现这么一个东西

02:37.240 --> 02:38.240
那怎么来混入呢

02:38.240 --> 02:41.240
看下面一个试例啊 非常简单

02:41.240 --> 02:43.240
我们就可以把一个公共代码呢

02:43.240 --> 02:44.240
抽离出来

02:44.240 --> 02:46.240
不就是一个组建配置吗

02:46.240 --> 02:47.240
它可以有各种各样的配置

02:47.240 --> 02:49.240
有data, created, iMessage 等等的

02:49.240 --> 02:52.240
有那个computed

02:52.240 --> 02:54.240
有各种各样的公共配置

02:54.240 --> 02:56.240
那当然还可以有message

02:56.240 --> 02:59.240
随便什么 跟组建的代码配置是一样的

02:59.240 --> 03:00.240
这把抽离出来

03:00.240 --> 03:02.240
然后在具体的组建里边的时候

03:02.240 --> 03:04.240
比方这个组建 它不是个对象吗

03:04.240 --> 03:07.240
我们就可以把它用一个配置叫mixins

03:07.240 --> 03:09.240
我们这一刻是不是又去多学那个配置的

03:09.240 --> 03:11.240
在组建配置里边多了一个什么呢

03:11.240 --> 03:13.240
多了一个mixins

03:13.240 --> 03:15.240
叫做这个组建

03:15.240 --> 03:18.240
混入了哪些公共配置

03:18.240 --> 03:19.240
它是一个数组

03:19.240 --> 03:20.240
数组啥意思呢

03:20.240 --> 03:21.240
数组的表示就是

03:21.240 --> 03:24.240
我可以混入多个公共配置

03:24.240 --> 03:26.240
把组合到这个组建里边去

03:26.240 --> 03:27.240
我们这里只用了一个

03:27.240 --> 03:30.240
把这个配置混入到这个组建里边去

03:30.240 --> 03:32.240
那么这个组建里边自然而然

03:32.240 --> 03:35.240
就相当于是有了这些配置的

03:35.240 --> 03:37.240
它的数据多了两个

03:37.240 --> 03:39.240
勾字函数自动会运行

03:39.240 --> 03:41.240
然后computed 计算属性也多了一个

03:41.240 --> 03:43.240
当然如果说还有message

03:43.240 --> 03:45.240
这些东西都可以

03:45.240 --> 03:47.240
那么这个组建当然也可以有自己的配置

03:47.240 --> 03:50.240
那么这样子一来在使用这个组建的时候

03:50.240 --> 03:52.240
他们先会运行勾字函数

03:52.240 --> 03:53.240
勾字函数呢

03:53.240 --> 03:55.240
它会先运行那个混入的勾字函数

03:55.240 --> 03:56.240
那么先运行它

03:56.240 --> 03:58.240
然后再运行自己的勾字函数

03:58.240 --> 03:59.240
运行它

03:59.240 --> 04:01.240
而运行它的时候使用了它里边

04:01.240 --> 04:02.240
混入的数据

04:02.240 --> 04:04.240
你看这个组建里边并没有写这些数据

04:04.240 --> 04:06.240
但是混入的公共代码里边有

04:06.240 --> 04:08.240
于是这个A和B都能过去

04:08.240 --> 04:10.240
因为公共代码里边有A和B

04:10.240 --> 04:11.240
A1 B2

04:11.240 --> 04:13.240
然后有这个计算属性上

04:13.240 --> 04:15.240
那么计算属性的结构就是3

04:15.240 --> 04:17.240
也加B嘛

04:17.240 --> 04:18.240
就这么简单

04:18.240 --> 04:20.240
复杂吗?一点都不复杂

04:20.240 --> 04:22.240
那我们这里就来呗

04:22.240 --> 04:25.240
我们又在这个SRC里边

04:25.240 --> 04:27.240
又去建一个新的目录

04:27.240 --> 04:29.240
给它取个名字叫Megasins

04:29.240 --> 04:31.240
叫做混入的东西

04:31.240 --> 04:33.240
我们这里新建一个吧

04:33.240 --> 04:35.240
就是远程获取数据

04:35.240 --> 04:37.240
我们给它取个

04:37.240 --> 04:39.240
远程获取

04:39.240 --> 04:41.240
远程获取大写

04:41.240 --> 04:43.240
远程就

04:43.240 --> 04:45.240
sync廢棋吧

04:45.240 --> 04:47.240
就廢棋data吧

04:47.240 --> 04:49.240
廢棋data

04:49.240 --> 04:51.240
了解是

04:51.240 --> 04:53.240
我们这里的块就给它导出一个对象

04:53.240 --> 04:55.240
就是公共的远程获取数据

04:55.240 --> 04:57.240
公共的

04:57.240 --> 04:59.240
远程

04:59.240 --> 05:01.240
获取数据的代码

05:01.240 --> 05:03.240
那么这里边有哪些公共配置呢

05:03.240 --> 05:05.240
首先一个data

05:05.240 --> 05:07.240
data里边因为远程获取数据

05:07.240 --> 05:09.240
你得拿到远程获取数据嘛

05:09.240 --> 05:11.240
一个是easy loading

05:11.240 --> 05:13.240
是否正在获取过程中

05:13.240 --> 05:15.240
我先把它设为

05:15.240 --> 05:17.240
然后呢

05:17.240 --> 05:19.240
我们在还有一个数据呢

05:19.240 --> 05:21.240
至少你得拿到远程数据吧

05:21.240 --> 05:22.240
拿到远程数据

05:22.240 --> 05:23.240
它不得保存吗

05:23.240 --> 05:24.240
保存了一个数据里面

05:24.240 --> 05:25.240
我们就用data吧

05:25.240 --> 05:27.240
data的默认值

05:27.240 --> 05:29.240
我们先给它设为一个辣吧

05:29.240 --> 05:31.240
先给它设为一个辣

05:31.240 --> 05:33.240
好了那么这不是data吗对不对

05:33.240 --> 05:35.240
然后呢我们远程获取数据

05:35.240 --> 05:37.240
不是得有个quity的吗

05:37.240 --> 05:38.240
在创建的时候

05:38.240 --> 05:40.240
我们是不是可以远程去加载它

05:40.240 --> 05:41.240
对不对

05:41.240 --> 05:42.240
好那我们来写

05:42.240 --> 05:43.240
远程获取数据

05:43.240 --> 05:44.240
我们这里的

05:44.240 --> 05:46.240
怎么来远程加载呢

05:46.240 --> 05:48.240
你看这边怎么远程加载的

05:48.240 --> 05:49.240
是不getBanders

05:49.240 --> 05:51.240
调用一个方法来远程加载

05:51.240 --> 05:52.240
那么这里呢我能够

05:52.240 --> 05:54.240
能够直接去调用getBanders吗

05:54.240 --> 05:56.240
有同学说把导致进来

05:56.240 --> 05:57.240
导致进来行不行

05:57.240 --> 05:58.240
这样子也做

05:58.240 --> 05:59.240
也这样子就失去了

05:59.240 --> 06:00.240
通用性了

06:00.240 --> 06:01.240
因为如果说

06:01.240 --> 06:02.240
别的组建别的页面

06:02.240 --> 06:03.240
它不是获取banders

06:03.240 --> 06:05.240
而获取的是文章

06:05.240 --> 06:06.240
获取的是

06:06.240 --> 06:08.240
留言板

06:08.240 --> 06:09.240
获取的是评论

06:09.240 --> 06:10.240
那又怎么办呢

06:10.240 --> 06:12.240
说这一块是不是有

06:12.240 --> 06:14.240
不同的组建有不同的差异啊

06:14.240 --> 06:16.240
那这个时候怎么设计

06:16.240 --> 06:17.240
我就可以这样子

06:17.240 --> 06:19.240
我希望你的组建中

06:19.240 --> 06:21.240
大家注释吧

06:21.240 --> 06:24.240
具体的组建中

06:24.240 --> 06:27.240
需要提供一个方法

06:27.240 --> 06:31.240
一个远程获取数据的方法

06:31.240 --> 06:34.240
比方说给它取个名字叫做fetch

06:34.240 --> 06:36.240
需要有这么一个方法

06:36.240 --> 06:37.240
我在created里面

06:37.240 --> 06:39.240
只是帮你去调用这个方法

06:39.240 --> 06:40.240
fetch data

06:40.240 --> 06:41.240
但我这里没法提供

06:41.240 --> 06:42.240
因为我这里提供了

06:42.240 --> 06:44.240
我也不知道该获取啥数据

06:44.240 --> 06:46.240
我这里只是出了一个

06:46.240 --> 06:48.240
比较通用的方式

06:48.240 --> 06:49.240
就是把远程获取的数据

06:49.240 --> 06:50.240
保持在data里面

06:50.240 --> 06:52.240
然后把这个ease

06:52.240 --> 06:55.240
楼顶的设为force

06:55.240 --> 06:56.240
就完了

06:56.240 --> 06:59.240
这就是我提取的一些公共代码

06:59.240 --> 07:00.240
那么这个代码

07:00.240 --> 07:02.240
你们过来过后怎么用呢

07:02.240 --> 07:03.240
我们在这个home

07:03.240 --> 07:04.240
组建里面你看

07:04.240 --> 07:05.240
我就可以这样子

07:05.240 --> 07:06.240
import

07:06.240 --> 07:09.240
导入这个fetch data

07:09.240 --> 07:11.240
from

07:11.240 --> 07:12.240
来自于哪呢

07:12.240 --> 07:13.240
来自于make sense

07:13.240 --> 07:14.240
fetch data

07:14.240 --> 07:15.240
来自于这

07:15.240 --> 07:17.240
我把它混入到我们的组建里面去

07:17.240 --> 07:18.240
make sense

07:18.240 --> 07:20.240
是不是混入进去

07:20.240 --> 07:21.240
混入进去

07:21.240 --> 07:22.240
混入进去过后

07:22.240 --> 07:23.240
我们的这个组建里面

07:23.240 --> 07:25.240
说这个东西不需要了

07:25.240 --> 07:26.240
我们的远程获取

07:26.240 --> 07:27.240
这个东西不需要了

07:27.240 --> 07:29.240
这个东西名字已经变成data了

07:29.240 --> 07:30.240
已经变成data了

07:30.240 --> 07:32.240
它表示的是远程获取到了数据

07:32.240 --> 07:34.240
所以变成这样子了

07:34.240 --> 07:36.240
cretive的是不是不要了

07:36.240 --> 07:37.240
这不要了

07:37.240 --> 07:38.240
没用了吗

07:38.240 --> 07:39.240
因为我们这个混入的时候

07:39.240 --> 07:40.240
已经写了

07:40.240 --> 07:41.240
对吧 已经写了cretive

07:41.240 --> 07:42.240
那么它会自动运行

07:42.240 --> 07:44.240
我们无非就是根据这个要求

07:44.240 --> 07:47.240
我们要去写一个method

07:47.240 --> 07:49.240
去写个这么一个东西

07:49.240 --> 07:50.240
这个这里面

07:50.240 --> 07:52.240
我们要提供一个fetch data

07:52.240 --> 07:54.240
提供这么一个函数

07:54.240 --> 07:57.240
fetch data

07:57.240 --> 07:58.240
这个函数呢

07:58.240 --> 08:00.240
返回的就是远程数据

08:00.240 --> 08:02.240
this

08:02.240 --> 08:05.240
get spanners

08:05.240 --> 08:07.240
无非就是返回它吗

08:07.240 --> 08:08.240
对不对

08:08.240 --> 08:09.240
是完事了

08:09.240 --> 08:11.240
也就是我们在cretive使用的时候

08:11.240 --> 08:12.240
组建这些东西

08:12.240 --> 08:13.240
可以去掉的都可以去掉了

08:13.240 --> 08:15.240
只需要提供一个

08:15.240 --> 08:17.240
获取远程数据的方法

08:17.240 --> 08:19.240
和统一围这个名字

08:19.240 --> 08:21.240
那么这边它会调用这个方法

08:21.240 --> 08:22.240
然后得到数据

08:22.240 --> 08:23.240
保存到data里面

08:23.240 --> 08:26.240
然后设置一个ease loading为force

08:26.240 --> 08:28.240
好 那么这样子一来的话

08:28.240 --> 08:30.240
上面我们稍微再改动一下

08:30.240 --> 08:33.240
因为之前我们循环的是数据为banners

08:33.240 --> 08:35.240
那么这里我们把它设置

08:35.240 --> 08:36.240
循环data

08:36.240 --> 08:37.240
这里也是

08:37.240 --> 08:39.240
是循环data

08:39.240 --> 08:40.240
循环data

08:40.240 --> 08:46.020
看一下这里面还有没有banners

08:46.020 --> 08:49.020
这里data

08:49.020 --> 08:51.020
再来

08:51.020 --> 08:52.020
没了 是吧 没了

08:52.020 --> 08:53.020
好 保存啊

08:53.020 --> 08:55.020
我们来看一下页面上

08:55.020 --> 08:56.020
稍微

08:56.020 --> 08:58.020
好像有错误啊

08:58.020 --> 08:59.020
看一下有什么错误

08:59.020 --> 09:00.020
有这个错误

09:00.020 --> 09:03.910
thisfetch data is not function

09:03.910 --> 09:09.180
carnatory property length of the file

09:09.180 --> 09:11.180
fetch data

09:11.180 --> 09:12.180
明白了

09:12.180 --> 09:13.180
还有一个什么错误呢

09:13.180 --> 09:15.180
就是这个默认值的问题

09:15.180 --> 09:17.180
因为我们以前的banner默认值

09:17.180 --> 09:18.180
是一个空数组

09:18.180 --> 09:20.180
对吧 当数据没有加载出来的时候

09:20.180 --> 09:21.180
不至于爆错

09:21.180 --> 09:23.180
那么现在变成loud了

09:23.180 --> 09:24.180
数据还没有加载出来

09:24.180 --> 09:25.180
是不是得爆错啊

09:25.180 --> 09:27.180
那么这个默认值是啥

09:27.180 --> 09:28.180
是不是我们也不清楚

09:28.180 --> 09:30.180
我们这是公共代码了吗

09:30.180 --> 09:32.180
我们并不清楚它的默认值是啥

09:32.180 --> 09:33.180
那我们可以这样子呗

09:33.180 --> 09:34.180
我们可以

09:34.180 --> 09:35.180
这个对象呢

09:35.180 --> 09:37.180
我们可以通过一个函数的返回值呢

09:37.180 --> 09:38.180
返回

09:38.180 --> 09:39.180
比较多

09:39.180 --> 09:40.180
我们这里提供一个函数

09:40.180 --> 09:43.180
default data value

09:43.180 --> 09:45.180
默认的远程数据的值

09:45.180 --> 09:46.180
默认的为loud

09:46.180 --> 09:48.180
当然你可以给我传辑过来

09:48.180 --> 09:50.180
我这个函数就返回这么一个对象

09:50.180 --> 09:52.180
那么这个地方是不是可以设置这个

09:52.180 --> 09:54.180
对不对

09:54.180 --> 09:55.180
不复杂吧

09:55.180 --> 09:56.180
这个玩意

09:56.180 --> 09:57.180
不复杂吧

09:57.180 --> 09:58.180
好 那么这样子

09:58.180 --> 09:59.180
那么这边呢

09:59.180 --> 10:00.180
我们使用的时候

10:00.180 --> 10:01.180
就调用这个函数

10:01.180 --> 10:02.180
来得到这个混入对象

10:02.180 --> 10:03.180
好 到这边来

10:03.180 --> 10:04.180
到这边来

10:04.180 --> 10:07.180
我们可以调用这个fetch data

10:07.180 --> 10:09.180
给它传个默认值

10:09.180 --> 10:11.180
默认值是个函数

10:11.180 --> 10:12.180
那么这样子

10:12.180 --> 10:14.180
它返回了一个对象呢

10:14.180 --> 10:15.180
返回了是不是

10:15.180 --> 10:16.180
就是这个对象

10:16.180 --> 10:17.180
这个对象里面

10:17.180 --> 10:19.180
data是不是个函数

10:19.180 --> 10:20.180
这样子复杂吧

10:20.180 --> 10:21.180
好 刷新

10:21.180 --> 10:22.180
好 这里还有个

10:22.180 --> 10:24.180
刚才的问题我们解决了

10:24.180 --> 10:25.180
还有个问题就是

10:25.180 --> 10:26.180
fetch data is not function

10:26.180 --> 10:27.180
它说呢

10:27.180 --> 10:28.180
这边呢

10:28.180 --> 10:30.180
fetch data is not function

10:30.180 --> 10:31.180
我看一下

10:31.180 --> 10:32.180
这个提供这个fetch data

10:32.180 --> 10:34.180
这个提供了吗

10:34.180 --> 10:36.180
message

10:36.180 --> 10:37.180
有提供fetch data

10:37.180 --> 10:38.180
那么这边呢

10:38.180 --> 10:39.180
混入的时候

10:39.180 --> 10:40.180
调用这个fetch data

10:40.180 --> 10:42.180
为什么调用不到呢

10:42.180 --> 10:44.180
我看一下啊

10:44.180 --> 10:45.180
preddit

10:45.180 --> 10:48.820
thisfetch data

10:48.820 --> 10:50.820
没有问题啊

10:50.820 --> 10:52.820
再好好看一下啊

10:52.820 --> 10:53.820
preddit hook

10:53.820 --> 10:54.820
在preddit hook里边

10:54.820 --> 10:56.820
thisfetch data is not function

10:56.820 --> 10:58.820
我们把这个this打印出来吧

10:58.820 --> 11:00.820
this打印出来看一下

11:04.150 --> 11:05.150
preddit

11:05.150 --> 11:09.170
fetch data

11:09.170 --> 11:11.170
我这边是不是没有配置好吗

11:11.170 --> 11:13.170
message

11:13.170 --> 11:15.170
哦 下面有一个message

11:15.170 --> 11:17.170
我这配置重复了

11:17.170 --> 11:21.800
找个地方配置一下

11:21.800 --> 11:22.800
关心

11:22.800 --> 11:24.800
现在没问题了

11:24.800 --> 11:25.800
这样子呢

11:25.800 --> 11:26.800
功能跟之前一样

11:26.800 --> 11:27.800
但是呢

11:27.800 --> 11:28.800
现在呢

11:28.800 --> 11:29.800
我们就解决了

11:29.800 --> 11:30.800
重复代码的问题

11:30.800 --> 11:31.800
这个就几行

11:31.800 --> 11:32.800
重复代码有这个必要吗

11:32.800 --> 11:34.800
确实在这个项目里面

11:35.800 --> 11:36.800
必要性也不是那么大

11:36.800 --> 11:37.800
不过呢

11:37.800 --> 11:38.800
我想通过这个例子

11:38.800 --> 11:39.800
告诉大家

11:39.800 --> 11:40.800
如果说将来

11:40.800 --> 11:42.800
将来我们的不同的组建之间

11:42.800 --> 11:44.800
这种重复的配置多了

11:44.800 --> 11:45.800
我们就可以用混入的这种方式

11:45.800 --> 11:47.800
把它提取出去

11:47.800 --> 11:48.800
当然了

11:48.800 --> 11:49.800
这个混入呢

11:49.800 --> 11:51.800
在vue2也是不得已而为之

11:51.800 --> 11:53.800
没有什么别的好的办法了

11:53.800 --> 11:54.800
到了vue3

11:54.800 --> 11:55.800
有更好的办法

11:55.800 --> 11:56.800
就complete

11:56.800 --> 11:57.800
里面以后会学习的

11:57.800 --> 11:59.800
学校vue3的时候就会学习

11:59.800 --> 12:00.800
那么到了vue3的时候

12:00.800 --> 12:02.800
混入就没有什么用了

12:02.800 --> 12:03.800
有更好的解决方案

12:04.800 --> 12:05.800
在vue3之前

12:05.800 --> 12:06.800
我们用vue2

12:06.800 --> 12:07.800
要提取一个重复代码

12:07.800 --> 12:09.800
它只能用混入的方式

12:09.800 --> 12:11.800
那么这是关于这个混入

12:11.800 --> 12:12.800
给大家说一下

12:12.800 --> 12:13.800
还是一样

12:13.800 --> 12:14.800
跟着我做一下

12:14.800 --> 12:15.800
把一个代码改造一下

