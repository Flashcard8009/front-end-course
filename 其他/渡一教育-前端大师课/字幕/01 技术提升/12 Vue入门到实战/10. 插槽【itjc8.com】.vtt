WEBVTT

00:00.430 --> 00:05.230
这一颗有心知识 内容倒是不复杂

00:05.230 --> 00:08.830
但是没有这个知识 你后边有些差强量做不了

00:08.830 --> 00:11.830
这一颗的知识叫做插槽

00:11.830 --> 00:14.230
什么东西呢 我举个例子

00:14.230 --> 00:17.430
比方说咱们要去做一个弹窗组件

00:17.430 --> 00:19.430
就老在里边想吧

00:19.430 --> 00:22.030
它弹个窗窗出来 有这个组件

00:22.030 --> 00:25.430
那么就在屏幕中间弹个窗窗出来

00:25.430 --> 00:28.430
但这个组件做的时候就有一个问题

00:28.930 --> 00:31.430
我就来做一下吧

00:31.430 --> 00:35.430
比方说我就在坑上代码里面新建筑

00:35.430 --> 00:37.430
叫做一个demo

00:37.430 --> 00:40.430
里边我就写一个组件

00:40.430 --> 00:43.430
给它取一个名字叫做message

00:43.430 --> 00:46.430
一个弹窗组件 其实我们后边也会做这个组件

00:46.430 --> 00:49.430
但是后边我们也会做这个弹窗

00:49.430 --> 00:51.430
但是做法可能跟现在不一样

00:51.430 --> 00:54.430
不管它 咱们目前就说这个组件

00:54.430 --> 00:55.430
比方有这么一个组件

00:55.430 --> 00:58.430
这个组件又是个message container

00:58.430 --> 01:01.430
有一个容器 里边就是弹窗内容

01:01.430 --> 01:04.430
比方说div content 这边就是弹窗内容

01:04.430 --> 01:07.430
然后下面有两个按钮 一个是确定

01:07.430 --> 01:12.430
一个是button取消 或者是关闭

01:12.430 --> 01:15.430
就这么一个东西吧 一个对话框这种形式

01:15.430 --> 01:18.430
我们给它设置一下样式

01:18.430 --> 01:23.430
message container

01:24.430 --> 01:25.430
简单处理一下吧

01:39.740 --> 01:42.740
最近我这个智能提示真的要把我逼疯了

01:42.740 --> 01:44.740
这怎么回事了 这个玩意

01:48.740 --> 01:52.890
真的是不应该去更新这个vs code

01:52.890 --> 01:54.890
一更新就出各种问题

01:55.890 --> 01:58.890
为了让你们看清楚了 我给它设置个border吧

01:58.890 --> 02:00.890
两个箱数solid

02:00.890 --> 02:02.890
然后再设置一个pending

02:02.890 --> 02:05.890
pending20个箱数 得了

02:05.890 --> 02:06.890
就这么一个东西

02:06.890 --> 02:08.890
那么我们来测试一下它

02:08.890 --> 02:10.890
message

02:10.890 --> 02:12.890
message test

02:12.890 --> 02:14.890
再测试一下 default

02:14.890 --> 02:16.890
div test

02:16.890 --> 02:18.890
container

02:18.890 --> 02:20.890
男的配置container 直接来吧

02:20.890 --> 02:22.890
直接来吧

02:22.890 --> 02:24.890
导入这个message

02:30.890 --> 02:32.890
我这里是新开的工程

02:32.890 --> 02:34.890
我就没去搭建工程了 男的去搭建了

02:34.890 --> 02:38.890
我就直接用那个原型测试工具吧

02:38.890 --> 02:40.890
我们之前学过的 对吧

02:40.890 --> 02:42.890
那个vue so

02:42.890 --> 02:46.890
测试这个message test

02:46.890 --> 02:49.890
给vue 来 打点出来 看一下

02:49.890 --> 02:51.890
这个工具你是可以不用安装任何依赖的

02:51.890 --> 02:54.890
因为它本身是全区 全区里边带了很多的依赖的

02:54.890 --> 02:56.890
打开看一下吧 不就这个玩意吧

02:56.890 --> 02:59.890
就这么一个玩意 简单做一下

02:59.890 --> 03:01.890
然后这个组建里面肯定要有些内容

03:01.890 --> 03:04.890
有些消息 谈出消息 谈窗

03:04.890 --> 03:06.890
那么这个消息里面写啥呢

03:06.890 --> 03:07.890
我也不知道写啥

03:07.890 --> 03:08.890
你在做这个组建的时候

03:08.890 --> 03:10.890
你鬼知道他谈什么消息 对不对

03:10.890 --> 03:13.890
那怎么办呢 这个地方我写啥呢

03:13.890 --> 03:15.890
那怎么很简单啊

03:15.890 --> 03:17.890
你传个属性过来不行了吗

03:17.890 --> 03:19.890
比方说我简单写一下 props

03:20.890 --> 03:21.890
一个message

03:21.890 --> 03:22.890
你传个属性过来

03:22.890 --> 03:25.890
我这里就把属性写到这儿

03:25.890 --> 03:29.030
message写到这儿

03:29.030 --> 03:30.030
那不就完了吗

03:30.030 --> 03:31.030
那我给它传一个进去

03:31.030 --> 03:32.030
然后测试的时候

03:32.030 --> 03:34.030
给它传一个message过去

03:39.030 --> 03:41.030
随便传一个吧

03:41.030 --> 03:42.030
你看不就出来了吗

03:42.030 --> 03:44.030
不很简单吗 对不对

03:44.030 --> 03:45.030
那有什么问题呢

03:45.030 --> 03:46.030
那你想一想

03:46.030 --> 03:47.030
那我如果说

03:47.030 --> 03:50.030
我这个地方不仅仅是一个制服串

03:50.030 --> 03:53.030
我还有一个图标咋的

03:53.030 --> 03:54.030
所以立马崩溃了

03:54.030 --> 03:55.030
我怎么图怎么传图标呢

03:55.030 --> 03:57.030
图标咋传进去了

03:57.030 --> 03:58.030
图标是一个组建

03:58.030 --> 03:59.030
对吧 我虽然我这里没有

03:59.030 --> 04:00.030
比方说是个组建

04:00.030 --> 04:02.030
我还传个组建进去我咋传的

04:02.030 --> 04:03.030
没法传

04:03.030 --> 04:06.030
那又说简单你再加个属性

04:06.030 --> 04:07.030
图标类型

04:07.030 --> 04:08.030
那如果说还没有图标呢

04:08.030 --> 04:10.030
那又咋办了

04:10.030 --> 04:11.030
那这里判断一下

04:11.030 --> 04:12.030
没有图标类型

04:12.030 --> 04:15.030
那我就不显示图标

04:15.030 --> 04:17.030
那如果说我这里有张图片

04:17.030 --> 04:18.030
咋办了

04:18.030 --> 04:19.030
我还有个超链接

04:19.030 --> 04:20.030
咋办了

04:20.030 --> 04:21.030
也就是这一块的内容

04:21.030 --> 04:24.030
是极度的丰富和灵活的

04:24.030 --> 04:25.030
非常丰富的灵活

04:25.030 --> 04:27.030
你不知道它是啥

04:27.030 --> 04:30.030
它有可能是一个ATM片段

04:30.030 --> 04:32.030
还有很深的千套结构

04:32.030 --> 04:33.030
有可能是有A元素

04:33.030 --> 04:35.030
有P元素有DIV

04:35.030 --> 04:36.030
有可能只有一个制服串

04:36.030 --> 04:37.030
啥东西都不知道

04:37.030 --> 04:38.030
反正呢

04:38.030 --> 04:39.030
这里一块它东西

04:39.030 --> 04:41.030
极度就有变化型

04:41.030 --> 04:42.030
那么这个问题呢

04:42.030 --> 04:44.030
就得解决了

04:44.030 --> 04:46.030
不解决的话很麻烦这个地方

04:46.030 --> 04:47.030
怎么解决呢

04:47.030 --> 04:48.030
就是插槽

04:48.030 --> 04:49.030
我这里再举一个例子

04:49.030 --> 04:51.030
就是这个Message的组件

04:51.030 --> 04:53.030
那么这一块就是一个

04:53.030 --> 04:54.030
有可能是一个文本

04:54.030 --> 04:55.030
有可能是一段ATM

04:55.030 --> 04:56.030
有可能是有些组件进来

04:56.030 --> 04:58.030
不知道是啥

04:58.030 --> 05:00.030
需要副组件来指定

05:00.030 --> 05:01.030
有时候要副组件里面

05:01.030 --> 05:03.030
我在用它的时候就需要指定

05:03.030 --> 05:04.030
咋指定呢

05:04.030 --> 05:07.030
其实我最想

05:07.030 --> 05:09.030
最希望指定的方式

05:09.030 --> 05:11.030
是这种方式

05:11.030 --> 05:13.030
这也是比较符合直觉的

05:13.030 --> 05:15.030
你这里传的是一个制服串

05:15.030 --> 05:16.030
那就是一个制服串

05:16.030 --> 05:17.030
你这里传的是一个DIV

05:17.030 --> 05:19.030
这个DIV里面还有A元素

05:19.030 --> 05:21.030
那就是就A元素的DIV

05:21.030 --> 05:22.030
还有什么呢

05:22.030 --> 05:24.030
还有一个P元素都可以随便的传承

05:24.030 --> 05:25.030
安逸传承

05:25.030 --> 05:27.030
这里边还可以传别的组件进来

05:27.030 --> 05:28.030
想传承传承

05:28.030 --> 05:29.030
懂我的意思吧

05:29.030 --> 05:30.030
这样子是不是最灵活的

05:30.030 --> 05:33.030
就这一段内容可以属意传辑的

05:33.030 --> 05:35.030
这个玩意就是插槽

05:35.030 --> 05:37.030
怎么弄的呢

05:37.030 --> 05:38.030
看一下简单用法

05:38.030 --> 05:39.030
其实很多时候

05:39.030 --> 05:40.030
插槽用简单用法

05:40.030 --> 05:41.030
就已经完全够用了

05:41.030 --> 05:43.030
但是我们这些可能

05:43.030 --> 05:44.030
简单用法还不够

05:44.030 --> 05:46.030
我们一点点来看吧

05:46.030 --> 05:47.030
简单是非常简单

05:47.030 --> 05:49.030
你看我没这些组件怎么来编写

05:49.030 --> 05:51.030
这一块不是不知道写啥吗

05:51.030 --> 05:53.030
这一块不是不知道写啥吗

05:53.030 --> 05:55.030
你就写个站位

05:55.030 --> 05:56.030
叫做SNOWZ

05:56.030 --> 05:57.030
SNOWZ实际上是

05:57.030 --> 05:59.030
5U里面的一个内置的组件

05:59.030 --> 06:02.030
它实际上是一个内置组件

06:02.030 --> 06:05.030
意思就是插槽

06:05.030 --> 06:06.030
插槽

06:06.030 --> 06:07.030
然后呢

06:07.030 --> 06:11.030
这个插槽其实就是一个站位

06:11.030 --> 06:13.030
放着

06:13.030 --> 06:15.030
然后接下来是

06:15.030 --> 06:16.030
用的时候怎么用呢

06:16.030 --> 06:17.030
比如说MSG组件

06:17.030 --> 06:20.030
用的时候你就往它元素那一种里边传

06:20.030 --> 06:21.030
比较这里

06:21.030 --> 06:22.030
就随便传

06:22.030 --> 06:23.030
修一边传啥都可以

06:23.030 --> 06:24.030
就这一段吧

06:24.030 --> 06:25.030
传过去

06:25.030 --> 06:26.030
那么传过去很简单

06:26.030 --> 06:29.030
它就会把这一段T换掉

06:29.030 --> 06:30.030
这个地方

06:30.030 --> 06:31.030
看一下这张图

06:31.030 --> 06:33.030
非常简单

06:33.030 --> 06:34.030
副组件是这样用的

06:34.030 --> 06:35.030
看吧

06:35.030 --> 06:36.030
MSG里边传的一些东西

06:36.030 --> 06:37.030
随便的传啥

06:37.030 --> 06:39.030
MSG组件里面有一个站位

06:39.030 --> 06:40.030
它就会把这一段的一种T

06:40.030 --> 06:41.030
换掉这个站位

06:41.030 --> 06:42.030
最终究是

06:43.030 --> 06:45.030
好像没画好

06:45.030 --> 06:47.030
应该是只有这一段

06:47.030 --> 06:48.030
这一段

06:48.030 --> 06:49.030
是吧

06:49.030 --> 06:50.030
这一段就放到这

06:50.030 --> 06:51.030
就这么简单

06:51.030 --> 06:52.030
咱们来看一下吧

06:54.030 --> 06:55.030
你看

06:55.030 --> 06:57.030
这边是不是就传了东西了

06:57.030 --> 06:58.030
你看

06:58.030 --> 07:00.030
是不是就这个DIV就传进去了

07:00.030 --> 07:01.030
这个DIV

07:01.030 --> 07:02.030
对不对

07:02.030 --> 07:04.030
我们来看一下组件结构

07:04.030 --> 07:05.030
MSG Test

07:05.030 --> 07:06.030
就是我们的测试组件

07:06.030 --> 07:07.030
里边用了什么

07:07.030 --> 07:08.030
MSG

07:08.030 --> 07:10.030
下面传的插槽

07:10.030 --> 07:11.030
就这个DIV

07:11.030 --> 07:12.030
传过去了

07:13.030 --> 07:14.030
深圳到最终的页面上

07:14.030 --> 07:16.030
肯定没有这个东西的

07:16.030 --> 07:17.030
肯定没有撕脑子的

07:17.030 --> 07:18.030
它是一个站位

07:18.030 --> 07:20.030
就这么简单

07:20.030 --> 07:21.030
这就是

07:21.030 --> 07:23.030
插槽的简单用法

07:23.030 --> 07:25.030
那么下面我再给大家讲一个

07:25.030 --> 07:28.030
因为我们自己看到简单用法还不够

07:28.030 --> 07:30.030
叫做居民插槽

07:30.030 --> 07:31.030
其实插槽里边用法很多

07:31.030 --> 07:32.030
我们

07:32.030 --> 07:33.030
因为这个项目里面

07:33.030 --> 07:34.030
我们用到多少

07:34.030 --> 07:35.030
讲多少

07:35.030 --> 07:36.030
讲讲我们在就业

07:36.030 --> 07:37.030
就业阶段的时候

07:37.030 --> 07:39.030
在慢慢去补充一些

07:39.030 --> 07:41.030
不太会用得到的东西

07:41.030 --> 07:42.030
居民插槽

07:42.030 --> 07:43.030
如果说某个组件中

07:43.030 --> 07:45.030
比方说有个组件

07:45.030 --> 07:47.030
刚才的插槽

07:47.030 --> 07:48.030
就是说

07:48.030 --> 07:49.030
有些组件的模板中

07:49.030 --> 07:50.030
有一些区域

07:50.030 --> 07:51.030
需要复原出来制定

07:51.030 --> 07:52.030
它不知道是啥

07:52.030 --> 07:53.030
比方这种区域

07:53.030 --> 07:54.030
对吧

07:54.030 --> 07:56.030
咱们看居民插槽

07:56.030 --> 07:57.030
就是这个组件里边

07:57.030 --> 07:59.030
它不只一个区域有这种情况

07:59.030 --> 08:01.030
它多个区域都有这种情况

08:01.030 --> 08:02.030
这种情况

08:02.030 --> 08:03.030
往往出现在布局组件里边

08:03.030 --> 08:05.030
比方说这里一个布局组件

08:05.030 --> 08:06.030
它为了把整个页面

08:06.030 --> 08:07.030
做一个

08:08.030 --> 08:10.030
好的结构

08:10.030 --> 08:12.030
做了一些央视的布局

08:12.030 --> 08:13.030
但是每一个区域

08:13.030 --> 08:14.030
它里边是啥

08:14.030 --> 08:15.030
它不能写了吧

08:15.030 --> 08:16.030
它写的话

08:16.030 --> 08:17.030
它一写的话

08:17.030 --> 08:18.030
就把整个网上写完了

08:18.030 --> 08:19.030
那太复杂了

08:19.030 --> 08:20.030
它要留出一些区域

08:20.030 --> 08:22.030
供复原书来传

08:22.030 --> 08:23.030
复组件来传递

08:23.030 --> 08:24.030
比方说

08:24.030 --> 08:25.030
这是个布局组件

08:25.030 --> 08:26.030
它有三个区域

08:26.030 --> 08:27.030
Header

08:27.030 --> 08:29.030
这是一个羽翼化标先

08:29.030 --> 08:30.030
人妹

08:30.030 --> 08:31.030
组区域

08:31.030 --> 08:32.030
还有Footer

08:32.030 --> 08:33.030
夜角区域

08:33.030 --> 08:34.030
头部里边

08:34.030 --> 08:35.030
Header里边写啥

08:35.030 --> 08:36.030
我不知道

08:36.030 --> 08:37.030
干嘛呢

08:37.030 --> 08:38.030
就传一个插槽进去

08:38.030 --> 08:41.030
然后中间这个区域写啥

08:41.030 --> 08:42.030
不知道

08:42.030 --> 08:43.030
传个插槽

08:43.030 --> 08:44.030
放个插槽站位

08:44.030 --> 08:47.030
夜角也有一些内容

08:47.030 --> 08:48.030
但是不知道什么内容

08:48.030 --> 08:49.030
放个插槽

08:49.030 --> 08:51.030
但是有三个插槽

08:51.030 --> 08:53.030
那就出问题了

08:53.030 --> 08:55.030
那如果说我不加以区分的话

08:55.030 --> 08:56.030
那举个例子

08:56.030 --> 08:57.030
我不加以区分

08:57.030 --> 08:58.030
那我怎么知道

08:58.030 --> 08:59.030
我在用的时候咋用了

08:59.030 --> 09:00.030
我都不知道咋用了

09:00.030 --> 09:01.030
比方说我这里新鲜一个

09:02.030 --> 09:03.030
Layout逐渐

09:04.030 --> 09:06.030
比方说雪面下几个例子吧

09:06.030 --> 09:07.030
长天的

09:07.030 --> 09:08.030
雪面下几个例子

09:08.030 --> 09:09.030
我就把一个复制一下

09:09.030 --> 09:14.180
如果说不加以控制的话

09:14.180 --> 09:16.180
如果说都这样子写

09:16.180 --> 09:17.180
不加以控制的话

09:17.180 --> 09:20.180
那么到时候我用的时候咋用呢

09:20.180 --> 09:21.180
你看啊

09:21.180 --> 09:24.180
LayoutTest

09:25.180 --> 09:31.010
导入

09:34.010 --> 09:35.010
Layout

09:38.010 --> 09:39.010
Layout

09:40.010 --> 09:41.010
Component

09:43.010 --> 09:45.320
Layout在这里

09:45.320 --> 09:46.320
为了让你们看得清楚

09:46.320 --> 09:48.320
我给他写一个Style吧

09:48.320 --> 09:49.320
Background

09:52.320 --> 09:53.320
F0

09:53.320 --> 09:56.210
雪面下写一些

09:56.210 --> 09:58.210
这个地方我就写一个Night Bloop

09:58.210 --> 09:59.210
Night Bloop

10:00.210 --> 10:02.210
这个地方我写一个

10:03.210 --> 10:04.210
颜色吧

10:04.210 --> 10:05.210
好了

10:06.210 --> 10:07.210
写了一些样式布局

10:07.210 --> 10:08.210
对吧

10:08.210 --> 10:09.210
然后我们来测试的时候

10:09.210 --> 10:11.210
我要用这个逐渐

10:11.210 --> 10:13.210
我在是不是在用这个什么Layout

10:14.210 --> 10:17.210
Layout

10:17.210 --> 10:19.210
用这个逐渐

10:19.210 --> 10:20.210
那我这个样子是不是

10:20.210 --> 10:21.210
刚才传了个插槽内容进去了

10:21.210 --> 10:22.210
那问题来了

10:22.210 --> 10:24.210
那我这个内容传哪去了

10:24.210 --> 10:25.210
这个内容

10:25.210 --> 10:26.210
到底是传这儿

10:26.210 --> 10:27.210
还是传这儿

10:27.210 --> 10:28.210
还是传这儿呢

10:28.210 --> 10:29.210
就不知道了是吧

10:29.210 --> 10:31.210
因为他们有多个插槽

10:31.210 --> 10:33.210
那么用简单的方式

10:33.210 --> 10:34.210
肯定是处理不了了

10:34.210 --> 10:35.210
咱们运行看一下吧

10:35.210 --> 10:36.210
肯定要出问题了

10:36.210 --> 10:37.210
MPM

10:37.210 --> 10:38.210
ROUND

10:39.210 --> 10:48.250
UserLayoutTest

10:48.250 --> 10:49.250
有的人说

10:49.250 --> 10:50.250
为什么不直接测试这个逐渐

10:50.250 --> 10:52.250
因为我要传插槽

10:52.250 --> 10:54.250
我直接测试怎么传插槽呢

10:54.250 --> 10:55.250
怎么输入命令的

10:55.250 --> 10:56.250
所以我得用一个Test

10:57.250 --> 10:58.250
那你看一下

10:58.250 --> 10:59.250
现在出了一个什么问题

10:59.250 --> 11:00.250
是不是出问题了

11:00.250 --> 11:01.250
我相当于是把

11:01.250 --> 11:03.250
我这边的内容

11:03.250 --> 11:04.250
传到了多个地方

11:04.250 --> 11:05.250
你看这里

11:06.250 --> 11:07.250
再隔一下

11:08.250 --> 11:09.250
相当于是我把

11:09.250 --> 11:10.250
这一部分内容

11:10.250 --> 11:11.250
是不是传到这儿了

11:11.250 --> 11:12.250
又传到这儿了

11:12.250 --> 11:13.250
三个东西都传地景过去了

11:13.250 --> 11:14.250
就变成这个样子了

11:14.250 --> 11:16.250
这显然不是我们想要的

11:16.250 --> 11:18.250
因为它毕竟是不一样的

11:18.250 --> 11:19.250
于是我们的

11:19.250 --> 11:20.250
组建里面出现了

11:20.250 --> 11:22.250
多个不同的区域

11:22.250 --> 11:24.250
都需要副组建来指定

11:24.250 --> 11:25.250
那么这个时候

11:25.250 --> 11:26.250
我们就需要拒名插槽

11:26.250 --> 11:27.250
啥叫拒名插槽

11:27.250 --> 11:28.250
特别简单

11:28.250 --> 11:29.250
就是给他取个名字

11:29.250 --> 11:30.250
你随便取他的名字

11:30.250 --> 11:31.250
想取他的名字

11:31.250 --> 11:32.250
取他的名字

11:32.250 --> 11:33.250
取ABCS123都可以

11:33.250 --> 11:34.250
那么比方说

11:34.250 --> 11:35.250
这里我该取一个Header

11:35.250 --> 11:37.250
取个有意义的名字

11:37.250 --> 11:38.250
那么这里

11:38.250 --> 11:39.250
我先不取名字吧

11:39.250 --> 11:42.250
这里取一个Name

11:42.250 --> 11:44.250
再取一个就是Future

11:44.250 --> 11:45.250
那么这样子一来

11:45.250 --> 11:47.250
你看中间我没有取名字

11:47.250 --> 11:48.250
其实没有取名字的话

11:48.250 --> 11:50.250
他的名字默认为Default

11:50.250 --> 11:51.250
就是我们之前

11:51.250 --> 11:52.250
讲的那个简单用法的时候

11:52.250 --> 11:53.250
没有取名字对吧

11:53.250 --> 11:54.250
没有取名字

11:54.250 --> 11:55.250
实际上他这里就是

11:55.250 --> 11:58.250
默认是Name为Default

11:58.250 --> 11:59.250
那么现在

11:59.250 --> 12:01.250
我这里写的内容

12:01.250 --> 12:02.250
其实传递到哪儿了

12:02.250 --> 12:04.250
传递到是到这儿

12:04.250 --> 12:07.250
传递到是默认插槽

12:07.250 --> 12:09.250
这个地方叫默认插槽

12:09.250 --> 12:10.250
这个东西传到这儿了

12:10.250 --> 12:11.250
咱们来看一下

12:11.250 --> 12:13.250
你看

12:13.250 --> 12:15.250
是不是我们的那个

12:15.250 --> 12:16.250
Header里边啥都没有

12:16.250 --> 12:17.250
对吧 又没传吗

12:17.250 --> 12:18.250
Future里边

12:18.250 --> 12:19.250
没有啥都没有对吧

12:19.250 --> 12:20.250
又没传吗

12:20.250 --> 12:22.250
中间这一部分是不是有东西

12:22.250 --> 12:23.250
啥东西就是这个东西

12:23.250 --> 12:24.250
传到这儿了

12:24.250 --> 12:25.250
没了意思吧

12:25.250 --> 12:27.250
我们其实这是一种

12:27.250 --> 12:29.250
简化的写法

12:29.250 --> 12:31.250
这个地方是一个简化的写法

12:31.250 --> 12:32.250
其实完成的写法是这样子的

12:32.250 --> 12:34.250
结合Template

12:34.250 --> 12:37.250
然后这里写一个vslot

12:38.250 --> 12:41.250
后面写上插槽的名字Default

12:42.250 --> 12:43.250
写个吧

12:43.250 --> 12:45.250
中间主区

12:45.250 --> 12:46.250
好 保存

12:46.250 --> 12:48.250
你看 效果是完全一样的

12:48.250 --> 12:49.250
最终是说的很

12:49.250 --> 12:50.250
你看 是不是完全一样的

12:50.250 --> 12:52.250
那么刚才那个是简写

12:52.250 --> 12:54.250
因为如果说你是传递的是

12:54.250 --> 12:55.250
默认插槽的话

12:55.250 --> 12:57.250
那么这个代码是可以省略的

12:57.250 --> 12:59.250
这个表现是可以省略的

12:59.250 --> 13:00.250
因为这个地方就是

13:00.250 --> 13:02.250
默认的就是传到默认插槽

13:02.250 --> 13:03.250
没了意思吧

13:03.250 --> 13:04.250
你可以手动指定

13:04.250 --> 13:05.250
我这里一个模板

13:05.250 --> 13:07.250
这个模板传递的插槽名字

13:07.250 --> 13:09.250
对应的插槽名字是Default

13:10.250 --> 13:12.250
那么同样的道理

13:12.250 --> 13:14.250
我是不是还可以写其他的名字

13:15.250 --> 13:16.250
Header

13:16.250 --> 13:18.250
那么就是页头

13:18.250 --> 13:20.560
页头

13:20.560 --> 13:22.560
好 保存 你看

13:22.560 --> 13:24.560
页头这里是不是传过来了

13:24.560 --> 13:25.560
页头

13:25.560 --> 13:26.560
对吧

13:26.560 --> 13:28.560
然后再来一个页角

13:28.560 --> 13:30.560
Footer

13:30.560 --> 13:32.560
这是页角

13:33.560 --> 13:35.560
那么这个东西是不是传到这了

13:35.560 --> 13:37.560
这个名字对应到这

13:37.560 --> 13:39.560
看呗 就这么简单

13:39.560 --> 13:42.260
复杂吗

13:42.260 --> 13:43.260
一个一点都不复杂

13:43.260 --> 13:44.260
好好看一下

13:44.260 --> 13:45.260
很快就懂了

13:45.260 --> 13:46.260
那么这里我一个例子

13:46.260 --> 13:47.260
就是我这里

13:47.260 --> 13:48.260
给分泌取名字

13:48.260 --> 13:50.260
然后这边就可以传递了

13:50.260 --> 13:51.260
Header

13:51.260 --> 13:52.260
Default

13:52.260 --> 13:53.260
这个顺序无所谓的

13:53.260 --> 13:55.260
传递的时候的顺序无所谓

13:55.260 --> 13:57.260
那么最终看这个图

13:57.260 --> 13:59.260
Header它就传到哪里呢

13:59.260 --> 14:01.260
传到Name为Header的地方

14:01.260 --> 14:02.260
不是标签为Header

14:02.260 --> 14:04.260
是这个Name为Header的地方

14:04.260 --> 14:07.260
那么Default传到默认插槽

14:07.260 --> 14:10.260
然后Footer传到Name为Footer的地方

14:10.260 --> 14:12.260
就这么简单

14:12.260 --> 14:15.260
这就是具名插槽

14:15.260 --> 14:17.260
那么其实这里还有一种简写

14:17.260 --> 14:19.260
一个是中间主义

14:19.260 --> 14:20.260
就是那个Default

14:20.260 --> 14:22.260
默认插槽是可以不写这个的

14:22.260 --> 14:23.260
不写的

14:23.260 --> 14:26.260
保存 你看一下效果是一样的

14:26.260 --> 14:28.260
一模一样

14:28.260 --> 14:30.260
默认插槽这个地方是可以不写的

14:31.260 --> 14:33.260
另外还可以简写

14:33.260 --> 14:35.260
像这个插槽的名字前面

14:35.260 --> 14:37.260
你可以用指令

14:38.260 --> 14:39.260
那么也可以用什么

14:39.260 --> 14:40.260
警号

14:40.260 --> 14:41.260
警号也是一个缩写

14:41.260 --> 14:42.260
也是个简写

14:42.260 --> 14:44.260
效果是一模一样的

14:44.260 --> 14:46.260
它只是让你写的方便一点

14:46.260 --> 14:47.260
保存

14:47.260 --> 14:48.260
一模一样的

14:48.260 --> 14:51.260
好 那么也就是我们在这里总结一下

14:53.260 --> 14:56.260
之前的X-Mand

14:57.260 --> 14:59.260
现在我们多了一些东西

14:59.260 --> 15:00.260
我们把它

15:00.260 --> 15:02.260
加入我们的支持体系里面去

15:02.260 --> 15:06.020
首先有内置组件出现了

15:06.020 --> 15:08.020
内置组件

15:08.020 --> 15:10.020
我们学到的第一个内置组件

15:10.020 --> 15:11.020
就是它已经写好的组件

15:11.020 --> 15:12.020
叫做Snaught

15:13.020 --> 15:14.020
用在哪呢

15:14.020 --> 15:16.020
用在组件

15:16.020 --> 15:18.020
模板中

15:18.020 --> 15:19.020
当然组件的使用

15:19.020 --> 15:20.020
也就是在模板中使用

15:20.020 --> 15:22.020
对不对 这是个内置组件

15:22.020 --> 15:26.020
那么它是用于站位

15:26.020 --> 15:27.020
表示什么意思

15:27.020 --> 15:28.020
表示插槽的意思

15:28.020 --> 15:30.020
插槽

15:30.020 --> 15:31.020
站位

15:33.020 --> 15:35.020
还有什么呢

15:35.020 --> 15:36.020
就是

15:36.020 --> 15:38.020
通常是在组件内部

15:38.020 --> 15:40.020
不知道传什么地方

15:40.020 --> 15:42.020
需要副组件来指定的区域

15:42.020 --> 15:44.020
那么使用Snaught站位

15:44.020 --> 15:48.020
需要副组件

15:48.020 --> 15:52.020
传递内容的区域

15:52.020 --> 15:54.020
需要使用它的站位

15:54.020 --> 15:55.020
你懂这个意思有趣了

15:55.020 --> 15:56.020
简单的写一下

15:56.020 --> 15:57.020
这是内置组件Snaught

15:57.020 --> 15:58.020
这是第一个我们学习的

15:58.020 --> 16:00.020
然后在模板里边

16:00.020 --> 16:01.020
模板里边指令这一块

16:01.020 --> 16:02.020
多了一个指令

16:02.020 --> 16:04.020
刚才我们说的是那组件

16:04.020 --> 16:06.020
对吧 组件就是这个

16:06.020 --> 16:08.020
你看是不是组件的用法

16:08.020 --> 16:10.020
然后还有指令的用法

16:10.020 --> 16:11.020
指令的用法就是

16:11.020 --> 16:12.020
刚才这边

16:12.020 --> 16:13.020
VSnaught

16:13.020 --> 16:14.020
对吧

16:14.020 --> 16:15.020
指令

16:15.020 --> 16:16.020
多了一个VSnaught

16:16.020 --> 16:18.020
这个指令干嘛呢

16:18.020 --> 16:20.020
就是

16:20.020 --> 16:22.020
传递

16:22.020 --> 16:24.020
插槽

16:24.020 --> 16:25.020
内容

16:25.020 --> 16:27.020
指定

16:28.020 --> 16:31.020
对应的插槽名称

16:31.020 --> 16:32.020
通过这个东西

16:32.020 --> 16:34.020
来指定插槽的名称

16:34.020 --> 16:35.020
不指定的话

16:35.020 --> 16:37.020
就是默认插槽

16:37.020 --> 16:39.020
这就是这两个东西

16:39.020 --> 16:40.020
一个指令

16:40.020 --> 16:41.020
学校的指令

16:41.020 --> 16:43.020
一个内置组件Snaught

16:44.020 --> 16:46.020
好了 知识就学到这了

16:46.020 --> 16:48.020
知识很简单 并不复杂

16:48.020 --> 16:50.020
然后我们现在来看一下那边

16:50.020 --> 16:52.020
我们这这可要做的事情

16:52.020 --> 16:54.020
打开我们的工程

16:54.020 --> 16:55.020
工程里边

16:56.020 --> 16:58.020
我们的组件说明文档

16:58.020 --> 16:59.020
现在呢

16:59.020 --> 17:00.020
我把上一节课

17:00.020 --> 17:01.020
上一节课的就是

17:01.020 --> 17:02.020
有些组件我就删掉了

17:02.020 --> 17:04.020
什么menu组件啊

17:04.020 --> 17:05.020
contact这个组件啊

17:05.020 --> 17:06.020
这两个组件呢

17:06.020 --> 17:08.020
因为是它的指组件

17:08.020 --> 17:09.020
指在它里面使用

17:09.020 --> 17:11.020
所以说对外不用不用的

17:11.020 --> 17:12.020
我要写到文档里面

17:12.020 --> 17:13.020
也没什么意义

17:13.020 --> 17:14.020
上节课之所以给你们写

17:14.020 --> 17:16.020
是为了给你们留作业

17:16.020 --> 17:17.020
做完了作业过后

17:17.020 --> 17:19.020
就可以把从文档里面删掉了

17:19.020 --> 17:21.020
只提供这个组件用就行了

17:21.020 --> 17:23.020
然后现在我们多了一个组件

17:24.020 --> 17:26.020
这个组件要做什么呢

17:26.020 --> 17:27.020
做一个布局

17:27.020 --> 17:28.020
布局组件

17:28.020 --> 17:30.020
它要提供三个插槽

17:30.020 --> 17:32.020
一个插槽是left

17:32.020 --> 17:33.020
一个插槽是right

17:33.020 --> 17:35.020
一个插槽是主区

17:35.020 --> 17:37.020
下面看一个图就很清楚了

17:37.020 --> 17:39.020
对吧很清楚很清楚

17:39.020 --> 17:41.020
主区呢这一块要占于

17:41.020 --> 17:43.020
占满剩余空间

17:43.020 --> 17:45.020
左边蓝的右边蓝的

17:45.020 --> 17:47.020
它是要根据内容来固定的

17:47.020 --> 17:48.020
比方说这个内

17:48.020 --> 17:50.020
左边蓝内容只有150个宽度

17:50.020 --> 17:52.020
那么左边蓝只有150宽

17:52.020 --> 17:54.020
右边蓝的内容如果说没有

17:54.020 --> 17:55.020
没有右边蓝的内容

17:55.020 --> 17:57.020
那么右边蓝就相当于是看不见

17:57.020 --> 17:58.020
有的话那么右边蓝的内容

17:58.020 --> 18:00.020
比方说是300个像素

18:00.020 --> 18:02.020
那么这里边右边蓝就固定为300个像素

18:02.020 --> 18:04.020
它不会增加也不会减少

18:04.020 --> 18:06.020
剩下的区域就靠中间主区域占满

18:06.020 --> 18:08.020
好就是整个内奥特组件

18:08.020 --> 18:10.020
内奥特组件的它本身

18:10.020 --> 18:11.020
就这个组件本身

18:11.020 --> 18:13.020
它要充满副元素

18:13.020 --> 18:14.020
副元素是多宽多高

18:14.020 --> 18:16.020
那么它就是多宽多高

18:16.020 --> 18:18.020
然后还有个艺术隐藏

18:18.020 --> 18:20.020
总之就是这么一个玩意

18:20.020 --> 18:21.020
到底左边蓝写啥

18:21.020 --> 18:23.020
你用插槽给我传进来

18:24.020 --> 18:25.020
右边蓝写啥

18:25.020 --> 18:27.020
你用插槽传进来

18:27.020 --> 18:28.020
中间区域写啥

18:28.020 --> 18:29.020
你用这个东西

18:29.020 --> 18:30.020
主区

18:30.020 --> 18:31.020
默认插槽传进来

18:31.020 --> 18:32.020
对吧

18:32.020 --> 18:33.020
下面有一个表格

18:33.020 --> 18:34.020
就是插槽

18:34.020 --> 18:35.020
它是插槽的一样

18:35.020 --> 18:36.020
一共就这么三个

18:36.020 --> 18:38.020
好来咱们来写这个组件

18:38.020 --> 18:39.020
这个组件非常好写

18:39.020 --> 18:40.020
非常简单的

18:40.020 --> 18:42.020
我们这里新建个文件

18:42.020 --> 18:44.020
叫Layout

18:44.020 --> 18:45.020
首先我说一下

18:45.020 --> 18:46.020
为什么要建这个组件

18:46.020 --> 18:47.020
为什么要做这个组件

18:47.020 --> 18:49.020
你看一下我们的网站里边

18:49.020 --> 18:51.020
首先我们对整个窗口而言

18:51.020 --> 18:53.020
是不是就是一个左右两边蓝

18:53.020 --> 18:54.020
对吧

18:54.020 --> 18:55.020
无非就是一个左边蓝

18:55.020 --> 18:56.020
一个主区没有右边蓝

18:56.020 --> 18:57.020
对不对

18:57.020 --> 18:59.020
那么我们是不是可以用到这个组件

18:59.020 --> 19:02.020
然后在文章这个页面里边

19:02.020 --> 19:04.020
针对这个区域

19:04.020 --> 19:06.020
针对这个区域

19:06.020 --> 19:07.020
这个区域是不是有一个

19:07.020 --> 19:08.020
主区有一个右边蓝

19:08.020 --> 19:09.020
对吧

19:09.020 --> 19:10.020
没有左边蓝

19:10.020 --> 19:12.020
只在针对这个区域的话

19:12.020 --> 19:13.020
那么也是要用到这个组件了

19:13.020 --> 19:14.020
所以这个组件

19:14.020 --> 19:16.020
是可以一个通用的组件

19:16.020 --> 19:18.020
因此我们把它做成一个组件

19:18.020 --> 19:21.020
Layout我们这里新建个index.txt

19:23.020 --> 19:26.020
然后的话我们这里写上

19:26.020 --> 19:27.020
写上这个东西

19:30.020 --> 19:32.020
这边我再看一下

19:39.100 --> 19:41.100
这边就是用一个Layout

19:41.100 --> 19:43.410
把这个复制过来吧

19:43.410 --> 19:44.410
这个车子带吧

19:45.410 --> 19:46.410
视力带吧

19:46.410 --> 19:47.410
复制过来

19:50.170 --> 19:51.170
这边

19:51.170 --> 19:52.170
左边蓝区

19:54.170 --> 19:56.170
这里我给它一个内样式

20:00.250 --> 20:05.990
这里我给它一个Mate

20:06.990 --> 20:07.990
这个是Right

20:08.990 --> 20:09.990
好了我们在测试带吧

20:09.990 --> 20:10.990
里面稍微写一下

20:17.870 --> 20:19.870
首先整个容器

20:19.870 --> 20:21.870
包括布局组件的整个容器

20:21.870 --> 20:23.870
我给它试个宽高

20:23.870 --> 20:26.870
宽度为1000个相处

20:26.870 --> 20:30.870
高度为600个相处

20:30.870 --> 20:31.870
就个例子吧

20:33.870 --> 20:34.870
然后是个Border

20:35.870 --> 20:36.870
两个相处

20:38.870 --> 20:39.870
好了这是

20:39.870 --> 20:41.870
然后这里比较Left

20:45.440 --> 20:46.440
给它一个宽度

20:47.440 --> 20:52.440
宽度是200个相处

20:52.440 --> 20:57.440
高度设置一个百分之百

20:58.440 --> 20:59.440
充满副容器

21:01.440 --> 21:02.440
然后一个背景颜色

21:02.440 --> 21:04.440
背景颜色Light

21:04.440 --> 21:05.440
就这个吧

21:05.440 --> 21:06.440
随便来一个

21:06.440 --> 21:11.440
中间组去宽度百分之百

21:11.440 --> 21:13.440
高度百分之百

21:13.440 --> 21:15.440
中间只需要自适应

21:16.440 --> 21:17.440
背景颜色呢

21:17.440 --> 21:18.440
给它来一个

21:21.440 --> 21:22.440
随便来一个

21:22.440 --> 21:23.440
下来一个Right

21:23.440 --> 21:27.440
宽度的话固定

21:29.440 --> 21:30.440
150个相处

21:30.440 --> 21:33.440
高度的话百分之百

21:33.440 --> 21:34.440
背景颜色

21:41.070 --> 21:42.070
好了这是测试带

21:42.070 --> 21:43.070
对吧

21:43.070 --> 21:44.070
然后我们加上一个测试脚本

21:47.600 --> 21:50.600
这是Layout的测试

21:50.600 --> 21:54.580
好回来这来

21:54.580 --> 21:56.580
那么现在我们就开始写Layout了

21:56.580 --> 21:58.580
Layout其实它就是一个

21:58.580 --> 22:00.580
纯退的CSS布局

22:00.580 --> 22:01.580
没有什么属性

22:01.580 --> 22:03.580
就一个XX给我传避一下就行了

22:03.580 --> 22:06.580
就是Layout container

22:11.400 --> 22:12.400
来吧

22:12.400 --> 22:14.400
Layout container

22:14.400 --> 22:16.400
然后这里面有三个DIV

22:16.400 --> 22:17.400
一个是左

22:17.400 --> 22:18.400
一个是中

22:18.400 --> 22:19.400
一个是右对吧

22:19.400 --> 22:22.400
DIV left

22:22.400 --> 22:25.710
DIV may

22:25.710 --> 22:27.710
DIV right

22:27.710 --> 22:29.710
这几个内鸣跟这边重复了

22:29.710 --> 22:30.710
会不会冲突了

22:30.710 --> 22:31.710
不会冲突的

22:32.710 --> 22:33.710
不会冲突的

22:33.710 --> 22:34.710
为啥不会冲突

22:34.710 --> 22:35.710
因为这个附主键

22:35.710 --> 22:38.710
它只能影响这个植入键的根源书

22:38.710 --> 22:40.710
这里边东西它影响不了的

22:40.710 --> 22:41.710
你不用怕

22:42.710 --> 22:43.710
这是这一块

22:43.710 --> 22:45.710
咱们再写一下Left

22:45.710 --> 22:46.710
一点点写

22:46.710 --> 22:47.710
那么Left里边

22:47.710 --> 22:48.710
我们自然而然

22:48.710 --> 22:49.710
要给它提供一个插槽

22:49.710 --> 22:50.710
对不对

22:50.710 --> 22:51.710
插槽的名字是什么Left

22:51.710 --> 22:52.710
那么这样子

22:52.710 --> 22:53.710
这样一来呢

22:55.710 --> 22:56.710
这样一来呢

22:56.710 --> 22:57.710
我们这边的Left

22:57.710 --> 22:58.710
这边里边的东西

22:58.710 --> 23:00.710
甭管它写的是啥

23:00.710 --> 23:02.710
它是不是就替换到这个位置

23:02.710 --> 23:03.710
对不对

23:04.710 --> 23:06.710
那么有些同学看到一个内鸣

23:06.710 --> 23:07.710
相同要晕

23:07.710 --> 23:08.710
不要晕

23:08.710 --> 23:09.710
这里边随便写啥都无所谓的

23:09.710 --> 23:10.710
我只是呢

23:10.710 --> 23:12.710
从含义上来是一样的

23:12.710 --> 23:13.710
所以说给它设置一下

23:15.710 --> 23:18.710
为什么不把这个样式

23:18.710 --> 23:20.710
把这个定宽写到这儿呢

23:20.710 --> 23:21.710
为什么不写到这儿

23:21.710 --> 23:23.710
为什么要写到测试主键里面去了

23:23.710 --> 23:25.710
为什么要写到这里

23:25.710 --> 23:26.710
定宽读

23:26.710 --> 23:27.710
为什么不来这里定宽读

23:27.710 --> 23:28.710
不行啊

23:28.710 --> 23:29.710
不行啊

23:29.710 --> 23:30.710
同学们

23:30.710 --> 23:31.710
你这里把宽读定了

23:31.710 --> 23:33.710
过后这个布局主键就不能用了

23:33.710 --> 23:35.710
因为定宽的过后将来我要改宽就咋办了

23:35.710 --> 23:36.710
没法改了对吧

23:36.710 --> 23:40.710
所以说让这个DM去适应它里边的东西

23:40.710 --> 23:41.710
它里边多宽就多宽

23:41.710 --> 23:42.710
对吧

23:42.710 --> 23:43.710
这么个意思

23:44.710 --> 23:46.710
那么这里snot

23:46.710 --> 23:51.370
这边不要lame的

23:51.370 --> 23:52.370
就默认插槽

23:53.370 --> 23:55.370
然后这边snot

23:55.370 --> 23:57.370
lame right

23:57.370 --> 23:59.370
就这么三个东西

23:59.370 --> 24:00.370
然后来写样式

24:02.370 --> 24:03.370
其实现在都已经能看到一些

24:03.370 --> 24:04.370
一点效果了

24:04.370 --> 24:05.370
我们来运行一下吧

24:08.960 --> 24:10.960
cd my site

24:11.960 --> 24:13.960
npn run test

24:13.960 --> 24:20.280
layout

24:20.280 --> 24:21.280
运作

24:21.280 --> 24:25.490
把整个测试主键举动

24:34.840 --> 24:36.840
目前是这个样子

24:36.840 --> 24:37.840
一个人

24:37.840 --> 24:39.840
但是我的文字跑了去了

24:40.840 --> 24:42.840
现在的布局

24:42.840 --> 24:45.840
是因为我的主区就占满了

24:45.840 --> 24:47.840
看一下

24:48.840 --> 24:49.840
我这边lame

24:49.840 --> 24:51.840
lame out没有主测

24:51.840 --> 24:52.840
lame out没有主测

24:52.840 --> 24:54.840
变成一个atm元素了

24:54.840 --> 24:59.300
components

24:59.300 --> 25:02.190
保存

25:02.190 --> 25:04.190
目前是这个样子

25:04.190 --> 25:05.190
没有样式

25:05.190 --> 25:06.190
好来吧

25:06.190 --> 25:07.190
首先整个区域

25:07.190 --> 25:09.190
lame out container

25:09.190 --> 25:10.190
是不是要充满副元素

25:10.190 --> 25:11.190
对吧

25:11.190 --> 25:12.190
副元素多宽多高

25:12.190 --> 25:13.190
它就充满

25:13.190 --> 25:15.820
宽度

25:15.820 --> 25:16.820
百分之百

25:16.820 --> 25:17.820
高度

25:18.820 --> 25:19.820
百分之百

25:19.820 --> 25:20.820
充满

25:20.820 --> 25:29.260
这个没问题吧

25:29.260 --> 25:30.260
副元素

25:30.260 --> 25:32.260
就是整个lame out

25:32.260 --> 25:33.260
把充满

25:33.260 --> 25:34.260
是不是充满的

25:34.260 --> 25:36.260
一面区

25:36.260 --> 25:37.260
是不是充满的

25:37.260 --> 25:38.260
刚好充满

25:39.260 --> 25:40.260
好充满过后

25:40.260 --> 25:42.260
它里边的三个东西

25:42.260 --> 25:43.260
横向排列

25:43.260 --> 25:44.260
这三个div

25:44.260 --> 25:45.260
横向排列

25:45.260 --> 25:46.260
所以说我得把它变成

25:46.260 --> 25:48.260
可以把它变成flex

25:48.260 --> 25:50.260
总之你能够部存

25:50.260 --> 25:51.260
这个局就行了

25:51.260 --> 25:52.260
管你用什么方式来布局

25:52.260 --> 25:54.260
变成一个弹性盒

25:54.260 --> 25:55.260
变弹性盒过后

25:55.260 --> 25:56.260
就变成这样子了

25:56.260 --> 25:58.260
都能搞定了

25:58.260 --> 25:59.260
其实没有搞定的

25:59.260 --> 26:00.260
目前还没有搞定

26:00.260 --> 26:02.260
为什么没有搞定

26:02.260 --> 26:04.260
因为labs

26:04.260 --> 26:07.260
宽度为200个像素

26:07.260 --> 26:09.260
倒是没啥问题

26:10.260 --> 26:12.260
这个妹元素

26:12.260 --> 26:16.080
倒也是没啥问题

26:16.080 --> 26:18.080
目前倒是没啥问题

26:18.080 --> 26:19.080
但是实际上

26:19.080 --> 26:20.080
是有可能会出问题的

26:20.080 --> 26:22.080
比方说你这个妹

26:22.080 --> 26:28.950
或者是我这里边的妹

26:28.950 --> 26:30.950
我这里边的妹

26:30.950 --> 26:31.950
使用的时候

26:31.950 --> 26:33.950
它莫名其妙的

26:34.950 --> 26:35.950
我看一下

26:35.950 --> 26:37.950
怎么样才能让它出问题呢

26:37.950 --> 26:41.970
比方说不允许换行吧

26:41.970 --> 26:45.470
我这里就不允许换行

26:45.470 --> 26:47.470
water bridge

26:48.470 --> 26:50.470
叫做white space

26:51.470 --> 26:52.470
no wipe

26:52.470 --> 26:54.470
不允许文字换行

26:54.470 --> 26:55.470
这不就出问题了吗

26:55.470 --> 26:56.470
对不对

26:57.470 --> 26:58.470
现在我们要怎么样

26:58.470 --> 26:59.470
它不出问题

26:59.470 --> 27:00.470
其实很简单

27:00.470 --> 27:02.470
就是弹性盒里边的基本概念

27:02.470 --> 27:04.470
它里边的什么left

27:05.470 --> 27:10.510
它里边的left

27:10.510 --> 27:12.890
它里边的left

27:12.890 --> 27:14.890
我给它设置一个flex

27:15.890 --> 27:16.890
0

27:16.890 --> 27:19.200
0 or 2

27:19.200 --> 27:20.200
这是啥意思

27:22.200 --> 27:24.200
这表示它不可压缩

27:27.200 --> 27:31.340
它不能增长

27:31.340 --> 27:32.340
也不能压缩

27:32.340 --> 27:34.340
必须要保持它的

27:34.340 --> 27:35.340
保持它的宽度

27:35.340 --> 27:36.340
对吧

27:36.340 --> 27:37.340
然后它同样的right

27:37.340 --> 27:38.340
也是一样

27:38.340 --> 27:41.170
不能增长

27:41.170 --> 27:42.170
不能压缩

27:42.170 --> 27:43.170
保持它的宽度

27:44.170 --> 27:48.760
那么main不一样

27:48.760 --> 27:50.760
主区flex

27:50.760 --> 27:51.760
它可以增长

27:51.760 --> 27:52.760
也可以压缩

27:53.760 --> 27:54.760
就这个区别

27:54.760 --> 27:55.760
其他都没什么区别

27:57.760 --> 27:58.760
我要的就是这个东西

27:59.760 --> 28:00.760
你看

28:00.760 --> 28:01.760
随便你怎么弄

28:01.760 --> 28:02.760
比如说我这边

28:02.760 --> 28:03.760
设置一个百分比宽度

28:03.760 --> 28:04.760
宽度不小的

28:04.760 --> 28:06.760
绝对是80%

28:06.760 --> 28:10.390
60%的宽度

28:10.390 --> 28:11.390
60%的宽度

28:11.390 --> 28:12.390
你看

28:12.390 --> 28:13.390
左边蓝

28:13.390 --> 28:14.390
和右边蓝

28:14.390 --> 28:16.390
始终是保持

28:16.390 --> 28:17.390
自己的定宽的

28:17.390 --> 28:18.390
然后那中间区

28:18.390 --> 28:19.390
是可以

28:20.390 --> 28:21.390
可以变化的

28:21.390 --> 28:23.390
我就要就要这个效果

28:24.390 --> 28:25.390
没意思吧

28:25.390 --> 28:26.390
没其他

28:26.390 --> 28:27.390
其他没啥

28:27.390 --> 28:28.390
我想想还有啥

28:28.390 --> 28:29.390
没啥

28:29.390 --> 28:30.390
对

28:30.390 --> 28:31.390
如果说你只有两个变蓝

28:31.390 --> 28:32.390
怎么办

28:32.390 --> 28:33.390
你不传变

28:33.390 --> 28:34.390
不传左变蓝

28:34.390 --> 28:35.390
左变蓝是不是没内容

28:40.110 --> 28:42.110
这个插槽这里

28:42.110 --> 28:44.110
对插槽设置这个样式

28:44.110 --> 28:45.110
会影响这个插槽的

28:45.110 --> 28:47.110
会影响这个插槽的

28:48.110 --> 28:49.110
主要的原因

28:49.110 --> 28:51.110
是因为我这里面加Sculpt

28:51.110 --> 28:57.430
加上Sculpt就没问题了

28:58.430 --> 28:59.430
现在Left是不是没了

28:59.430 --> 29:01.430
刚才我没加上Sculpt

29:01.430 --> 29:03.430
这个Left的样式变成全剧样式了

29:03.430 --> 29:05.430
就影响到这边的Left

29:06.430 --> 29:08.430
那么现在Left是不是没了

29:08.430 --> 29:09.430
宽度为0吗

29:09.430 --> 29:10.430
它在不在

29:10.430 --> 29:12.430
它在只是宽度为0

29:12.430 --> 29:13.430
懂我的意思吧

29:14.430 --> 29:15.430
那么这边

29:15.430 --> 29:17.430
Made中间这一块有

29:17.430 --> 29:18.430
Rise有

29:18.430 --> 29:20.430
就这么简单

29:21.430 --> 29:23.430
Left这个组件是不是就做出来了

29:24.430 --> 29:25.430
有了这个组件过后

29:25.430 --> 29:26.430
你看一下有件事

29:26.430 --> 29:27.430
我们可以做了

29:27.430 --> 29:30.810
找这个App组件

29:30.810 --> 29:31.810
这个App组件里面东西

29:31.810 --> 29:32.810
我们就可以做了

29:33.810 --> 29:35.810
我们App组件是要做啥

29:35.810 --> 29:37.810
是不是就是整个屏幕

29:39.810 --> 29:40.810
比方就这个页面

29:40.810 --> 29:41.810
我们整个屏幕

29:41.810 --> 29:42.810
比方说一个

29:42.810 --> 29:44.810
跟整个屏幕宽高一致

29:44.810 --> 29:45.810
一个容器

29:45.810 --> 29:46.810
这个容器里面

29:46.810 --> 29:48.810
我们去使用一个Left组件

29:48.810 --> 29:49.810
Left组件的左边蓝

29:49.810 --> 29:50.810
装这个

29:50.810 --> 29:52.810
我们之前做过的那个组件叫

29:52.810 --> 29:53.810
sidebar

29:53.810 --> 29:54.810
side

29:54.810 --> 29:55.810
side

29:55.810 --> 29:56.810
side

29:56.810 --> 29:57.810
那个组件

29:57.810 --> 29:58.810
右边我们现在还没弄

29:58.810 --> 29:59.810
右边我们先控制吧

29:59.810 --> 30:00.810
也是不可以做了

30:00.810 --> 30:02.810
我们在App组件里面做一下

30:02.810 --> 30:03.810
找到script

30:04.810 --> 30:05.810
请接个script

30:06.810 --> 30:07.810
然后导入

30:08.810 --> 30:09.810
import

30:09.810 --> 30:11.810
layout这个组件

30:11.810 --> 30:15.250
component

30:15.250 --> 30:16.250
layout

30:17.250 --> 30:18.250
注册一下

30:18.250 --> 30:20.250
component

30:21.250 --> 30:23.250
然后还要用到一个组件

30:24.250 --> 30:25.250
import

30:25.250 --> 30:26.250
side

30:26.250 --> 30:27.250
side

30:28.250 --> 30:29.250
side

30:30.250 --> 30:31.250
component

30:31.250 --> 30:32.250
side

30:33.250 --> 30:34.250
注册一下

30:34.250 --> 30:36.880
那么我们在App组件里面

30:36.880 --> 30:38.880
就是我们整个网站里面

30:38.880 --> 30:39.880
你看整个网站

30:39.880 --> 30:40.880
无论是什么页面

30:40.880 --> 30:41.880
它都是这个布局

30:41.880 --> 30:42.880
对不对

30:42.880 --> 30:43.880
无论是什么页面

30:43.880 --> 30:44.880
它都是这个布局

30:44.880 --> 30:45.880
左右两栏布局

30:45.880 --> 30:46.880
所以说我们这里

30:46.880 --> 30:47.880
是不是可以加上一个

30:47.880 --> 30:49.880
加上一个

30:50.880 --> 30:51.880
container

30:51.880 --> 30:54.770
style

30:57.770 --> 30:58.770
App

30:58.770 --> 30:59.770
container

31:00.770 --> 31:01.770
它就是个固定定位

31:01.770 --> 31:02.770
称满对不对

31:02.770 --> 31:03.770
那么固定定位称满

31:03.770 --> 31:04.770
我们之前不是有那个

31:04.770 --> 31:05.770
有那个样式吗

31:05.770 --> 31:06.770
拿出来用

31:13.770 --> 31:14.770
就是什么

31:17.770 --> 31:18.770
给它个背景颜色

31:18.770 --> 31:19.770
我们看一下吧

31:19.770 --> 31:20.770
背景颜色

31:21.770 --> 31:22.770
看一下吧

31:22.770 --> 31:23.770
好

31:23.770 --> 31:24.770
咱们运行一下

31:24.770 --> 31:25.770
现在我们就直接运行

31:25.770 --> 31:26.770
npm装设不了

31:27.770 --> 31:28.770
因为我们运行的

31:28.770 --> 31:29.770
启动的是App组件

31:29.770 --> 31:34.300
它就把固定定位

31:35.300 --> 31:36.300
固定定位站满

31:37.300 --> 31:39.300
我这里好像没说固定定位

31:39.300 --> 31:41.300
把它设为fixed

31:41.300 --> 31:42.300
固定定位站满

31:42.300 --> 31:43.300
所以刚好把整个

31:43.300 --> 31:44.300
整个页面称满

31:45.300 --> 31:46.300
好 称满过后

31:46.300 --> 31:47.300
然后我在这里边

31:47.300 --> 31:48.300
去使用layout组件

31:49.300 --> 31:50.300
layout组件

31:50.300 --> 31:51.300
我刚才写的

31:51.300 --> 31:52.300
这个组件里边

31:52.300 --> 31:53.300
template

31:53.300 --> 31:54.300
左边蓝有东西

31:56.300 --> 31:57.300
有什么东西

31:57.300 --> 31:58.300
就是这个东西

31:59.300 --> 32:00.300
side而side

32:00.300 --> 32:01.300
而这个组件

32:01.300 --> 32:02.300
我们之前是做好的

32:02.300 --> 32:03.300
它适应附容器的宽度

32:03.300 --> 32:04.300
那么它就把附容器称满

32:04.300 --> 32:06.300
左边蓝的附容器称满

32:06.300 --> 32:07.300
附容器是什么

32:07.300 --> 32:09.300
附容器我这里好像没写

32:09.300 --> 32:10.300
写个吧

32:10.300 --> 32:12.300
我们这里写上一个class

32:12.300 --> 32:13.300
side

32:13.300 --> 32:17.080
写到这里边

32:17.080 --> 32:18.080
我们而side

32:18.080 --> 32:19.080
这个容器

32:19.080 --> 32:21.080
其实要做的事情也很简单

32:23.710 --> 32:24.710
宽度

32:24.710 --> 32:25.710
250

32:25.710 --> 32:26.710
定个宽

32:26.710 --> 32:27.710
高度100%

32:27.710 --> 32:28.710
称满

32:28.710 --> 32:29.710
好了

32:29.710 --> 32:30.710
那么这个而side的区域

32:30.710 --> 32:31.710
其实

32:31.710 --> 32:32.710
哪怕不夹里边东西

32:32.710 --> 32:33.710
其实就已经出来了

32:33.710 --> 32:34.710
你看

32:34.710 --> 32:35.710
点击右键

32:35.710 --> 32:36.710
检查

32:36.710 --> 32:37.710
我们让而side的区域

32:37.710 --> 32:38.710
给它一个背景颜色

32:38.710 --> 32:39.710
白光的

32:41.710 --> 32:42.710
红色

32:44.710 --> 32:45.710
蓝色吧

32:45.710 --> 32:48.090
是不是

32:48.090 --> 32:49.090
左边的区域

32:49.090 --> 32:50.090
是不是已经出来了

32:50.090 --> 32:51.090
那么左边的区域

32:51.090 --> 32:52.090
它指握不是背景颜色

32:52.090 --> 32:53.090
是一个什么的

32:53.090 --> 32:54.090
这里边有一个

32:54.090 --> 32:56.090
有一个side

32:57.090 --> 32:58.090
而side

33:00.090 --> 33:01.090
还有这么一个组件

33:02.090 --> 33:03.090
好 一保存

33:03.090 --> 33:04.090
你看左边的组件是不是出来了

33:05.090 --> 33:06.090
好

33:06.090 --> 33:07.090
右边的区域

33:07.090 --> 33:08.090
右边的区域

33:08.090 --> 33:09.090
就是中间的区域

33:09.090 --> 33:10.090
中间的区域

33:10.090 --> 33:12.090
我就可以用template

33:12.090 --> 33:16.040
也可以用一下template

33:16.040 --> 33:17.040
就是default

33:19.040 --> 33:20.040
中间的区域

33:20.040 --> 33:22.040
就是中间的区域

33:22.040 --> 33:24.040
右边的区域没有

33:24.040 --> 33:25.040
中间的区域就是这个区域

33:25.040 --> 33:26.040
这个区域

33:27.040 --> 33:28.040
是随着

33:28.040 --> 33:29.040
我们的窗口大桥

33:29.040 --> 33:30.040
变化而变化

33:31.040 --> 33:32.040
这就是我们要做的

33:32.040 --> 33:33.040
内奥的组件

33:33.040 --> 33:34.040
是不是非常方便用的

33:34.040 --> 33:35.040
把背景颜色去掉

33:37.040 --> 33:39.350
这就做出来

33:39.350 --> 33:40.350
好 这就可能

33:40.350 --> 33:41.350
我们就做完了这么一个组件

33:41.350 --> 33:43.350
把它做成这个样子

33:44.350 --> 33:45.350
后边的东西

33:45.350 --> 33:46.350
慢慢来 再来

33:46.350 --> 33:48.350
这是这就可能内容

