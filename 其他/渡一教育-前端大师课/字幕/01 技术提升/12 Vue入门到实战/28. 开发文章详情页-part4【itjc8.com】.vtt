WEBVTT

00:00.300 --> 00:02.660
继续开发文章强情业

00:03.660 --> 00:06.780
这节课呢就搞定这个选中效果了

00:06.780 --> 00:09.500
这个选中效果呢我先给大家说哈

00:09.500 --> 00:13.060
就是这个系统里边最难的也就这一块儿了

00:13.220 --> 00:15.180
啊 因为他要用到地规

00:15.180 --> 00:16.780
为什么要用到地规呢

00:16.780 --> 00:18.900
因为他那个层级

00:19.180 --> 00:20.220
不清楚

00:20.220 --> 00:22.220
你不清楚是有几个层级

00:22.220 --> 00:24.380
比方说这个纸木炉下面还有纸木炉

00:24.380 --> 00:25.060
对吧

00:25.060 --> 00:28.180
可能会用到地规 百分之百会用到地规

00:28.420 --> 00:30.380
这一块儿呢因为对初学者而言

00:30.380 --> 00:33.220
地规始终是一个难点啊

00:33.220 --> 00:35.020
这是没办法的事情

00:35.020 --> 00:37.700
加油吧同学们啊尽量的去理解

00:37.700 --> 00:39.540
好 咱们来看一下啊

00:39.540 --> 00:41.780
我们需要做什么事情

00:41.780 --> 00:43.340
我们回到找到这个组件

00:43.340 --> 00:46.740
blogtoc组件就是我们那个木炉组件

00:46.740 --> 00:48.660
这个组件里边呢用到的right list

00:48.660 --> 00:49.940
我们之前写的组件啊

00:49.940 --> 00:51.020
这些东西前提条件啊

00:51.020 --> 00:52.140
你得先写过

00:52.140 --> 00:54.860
你没有写过的话是一点印象都没有

00:54.860 --> 00:56.500
那么这个组件里边呢

00:56.500 --> 00:57.940
而且不仅要写过啊

00:57.940 --> 00:59.460
不是照着我的代码抄一遍

00:59.460 --> 01:00.860
抄一遍你还是没有印象

01:00.860 --> 01:03.260
你必须要自己去写一遍

01:03.260 --> 01:05.420
才能能够帮助你回得起来

01:05.420 --> 01:07.540
这里边有个属性啊叫list

01:07.540 --> 01:08.340
给他的有什么呢

01:08.340 --> 01:11.900
给他的是一个数组

01:11.900 --> 01:14.020
我们看一下做right list

01:14.020 --> 01:14.660
他告诉我啊

01:14.660 --> 01:16.020
这个属性呢是一个数组

01:16.020 --> 01:17.620
数组里边每一个是一个对象

01:17.620 --> 01:18.940
对象里边有三个属性

01:18.940 --> 01:20.180
一个是name

01:20.180 --> 01:21.660
显示出来的东西对吧

01:21.660 --> 01:23.700
一个是isnaked

01:23.700 --> 01:25.020
是否选中

01:25.020 --> 01:27.900
一个是q准它的指向

01:27.940 --> 01:29.380
指部路

01:29.380 --> 01:30.140
那么这边呢

01:30.140 --> 01:31.700
除了除了这些属性之外呢

01:31.700 --> 01:33.020
当然你可以传递额外的属性

01:33.020 --> 01:33.700
都没问题啊

01:33.700 --> 01:35.460
比方说我们这里还传递的什么呢

01:35.460 --> 01:36.380
这个toc哪来的

01:36.380 --> 01:38.220
这个toc是上层组件传给我们的

01:38.220 --> 01:38.660
对吧

01:38.660 --> 01:39.540
上层组件哪来的

01:39.540 --> 01:41.020
是阿迦克是请求得来的

01:41.020 --> 01:42.100
阿迦克是请求哪来的

01:42.100 --> 01:44.660
我们目前的是魔力的数据

01:44.660 --> 01:46.180
魔力的数据里边你看

01:46.180 --> 01:47.460
是有只有两个属性

01:47.460 --> 01:49.540
name和 anchor 还有一个q

01:49.540 --> 01:50.900
是不是少了一个呀

01:50.900 --> 01:51.700
少了一个什么

01:51.700 --> 01:53.900
少了一个 issnaked

01:53.900 --> 01:55.380
是不是少了那个玩意

01:55.380 --> 01:57.540
我们只要把那个属性一加上

01:57.580 --> 01:58.820
是不是就可以了

01:58.820 --> 01:59.460
但是呢

01:59.460 --> 02:00.780
我们回到这个组件啊

02:00.780 --> 02:01.740
我们在这个组件里边

02:01.740 --> 02:03.980
这个数据是来自于上层组件

02:03.980 --> 02:04.740
我们说过

02:04.740 --> 02:05.700
这是属性

02:05.700 --> 02:06.980
属性呢

02:06.980 --> 02:08.700
你是不能更改的

02:08.700 --> 02:09.500
那怎么办呢

02:09.500 --> 02:10.660
那我给他写个计算属性

02:10.660 --> 02:11.140
没

02:11.860 --> 02:12.580
computing的

02:14.020 --> 02:14.900
这个计算属性呢

02:14.900 --> 02:18.380
我们该取个名字叫做toc with

02:19.460 --> 02:21.180
带有什么snaked

02:21.180 --> 02:21.980
withsnaked

02:23.180 --> 02:25.020
我们这个计算属性的就是根据

02:25.860 --> 02:28.460
根据toc属性

02:29.820 --> 02:36.100
得到带有snaked属性的toc数据

02:36.100 --> 02:37.460
就是把这个数据呢

02:37.460 --> 02:40.140
映射成为一个新的数据

02:40.140 --> 02:40.940
这个新的数据呢

02:40.940 --> 02:42.740
带有这个snaked属性

02:42.740 --> 02:43.500
他不是没有吗

02:43.500 --> 02:44.660
我们给他加上

02:44.660 --> 02:46.340
因为你不是直接在这里边加

02:46.340 --> 02:48.820
这里边是上面传过来的

02:48.820 --> 02:50.140
我们只能得到一个新的数据

02:51.100 --> 02:51.260
好

02:51.260 --> 02:53.260
那么我们就完成这个方法

02:53.340 --> 02:55.580
这个方法完成了还挺麻烦的

02:55.580 --> 02:57.500
所以说我们可能要借助一些办法

02:58.620 --> 03:00.020
我们可以想什么办法呢

03:00.020 --> 03:01.420
我都得想到一个办法

03:01.420 --> 03:02.660
当你聪明同学呢

03:02.660 --> 03:04.540
你也可以去想想别的办法

03:04.540 --> 03:05.660
我就想到这么一个办法

03:05.660 --> 03:07.260
我给他一个数据

03:07.260 --> 03:08.460
这个数据呢

03:08.460 --> 03:12.380
里边既有一个数据叫做active

03:12.380 --> 03:14.220
或者叫做selected

03:14.220 --> 03:17.340
选中的标题

03:17.340 --> 03:18.060
选中的标题

03:18.060 --> 03:19.380
因为这些东西都是H1元

03:19.380 --> 03:20.460
都是H元数嘛

03:20.460 --> 03:22.060
H1元数H2元数

03:22.060 --> 03:23.660
这个是H2元数

03:23.660 --> 03:25.140
总之是H元数

03:25.140 --> 03:26.900
这些H元数都带有一个ID

03:26.900 --> 03:27.420
你看看

03:28.420 --> 03:29.980
所以都带了一个ID

03:29.980 --> 03:32.820
这个ID就对应到这边TOC的

03:32.820 --> 03:34.300
TOC的 anchor属性

03:34.300 --> 03:38.020
看一下吧

03:38.020 --> 03:39.780
TOC里面不是一个TOC的数组吗

03:39.780 --> 03:41.500
数组里面是一个 anchor属性

03:41.500 --> 03:42.100
对不对

03:42.100 --> 03:43.420
毛点

03:43.420 --> 03:45.300
那么我们就给他这么一个属性

03:45.300 --> 03:47.340
表示目前选中的毛点

03:47.340 --> 03:48.460
或者叫做active

03:48.460 --> 03:51.140
目前激活的毛点

03:51.140 --> 03:53.500
我们比方说给他个 anchor

03:53.580 --> 03:55.380
比方说举个例子

03:55.380 --> 03:57.820
如果说目前激活的毛点是这个值

03:59.780 --> 04:01.140
如果说是这个值的话

04:01.140 --> 04:02.700
那么这个计算属性

04:02.700 --> 04:04.620
他要通过这个TOC

04:04.620 --> 04:05.660
上边传过来的

04:05.660 --> 04:07.460
以及我们这个active anchor

04:13.300 --> 04:18.960
得到一个带有一个selected属性的TOC数组

04:18.960 --> 04:20.160
我们要做这么件事

04:20.160 --> 04:23.520
就是这个东西就能决定谁被选中

04:23.520 --> 04:25.040
我们就做这么件事

04:25.040 --> 04:26.320
那么这个函数怎么写呢

04:26.800 --> 04:29.400
这个函数其实肯定要用到地规

04:29.400 --> 04:30.800
地规什么地规

04:30.800 --> 04:32.760
就是你给我一个TOC数组

04:32.760 --> 04:36.320
我就把这个数组呢

04:36.320 --> 04:37.280
生成一个新的数组

04:37.280 --> 04:38.360
这个新的数组里边

04:38.360 --> 04:40.320
每个对象带有一个selected

04:40.320 --> 04:42.320
就是基本代码是这个样子

04:42.320 --> 04:44.240
就是你给我一个TOC

04:44.240 --> 04:45.800
我们写个这么一个函数吧

04:45.800 --> 04:48.720
就是getTOC

04:48.720 --> 04:50.120
这么一个函数

04:50.120 --> 04:51.680
你给我一个TOC

04:51.680 --> 04:53.720
我就反映了

04:53.720 --> 04:55.200
你给我一个TOC

04:55.200 --> 04:57.920
我就返回给你一个什么了

04:57.920 --> 05:02.610
返回给你一个TOCmap

05:02.610 --> 05:06.850
把每一个TOC转换成一个新的对象

05:06.850 --> 05:07.970
不能改动原来的

05:07.970 --> 05:10.050
我们得到一个新的对象

05:10.050 --> 05:11.450
把原来的对象展开

05:11.450 --> 05:13.090
你给我一个TOC数组

05:13.090 --> 05:16.130
那么我把每一个TOC展开

05:16.130 --> 05:17.250
就得到一个新的对象

05:17.250 --> 05:20.730
新的对象里边加上一个selected

05:20.730 --> 05:21.170
对不对

05:21.170 --> 05:23.090
把这个地方搞定

05:23.090 --> 05:24.970
然后除了selected之外

05:25.010 --> 05:26.010
还要把这个selected

05:26.010 --> 05:27.410
因为它的selected

05:27.410 --> 05:29.130
也有可能是一个数组

05:29.130 --> 05:29.530
对吧

05:29.530 --> 05:31.010
它的selected是不是也有可能是一个数组

05:31.010 --> 05:32.330
我们要低规来处理

05:32.330 --> 05:34.450
它的selected也要做同样的处理

05:34.450 --> 05:35.010
怎么处理呢

05:35.010 --> 05:37.850
就是getTOC

05:37.850 --> 05:40.370
把它的selected传进去

05:40.370 --> 05:42.530
当然它selected有可能是undefined

05:42.530 --> 05:44.450
所以我们这里给TOC一个默认值

05:44.450 --> 05:46.090
如果说你传的参数是undefined的话

05:46.090 --> 05:48.370
我给它一个空数组

05:48.370 --> 05:49.610
代码就这么一点点

05:49.610 --> 05:51.650
这个代码不是很好理解

05:51.650 --> 05:53.170
因为一旦用到低规

05:53.210 --> 05:54.330
根据我的教学经验

05:55.490 --> 05:56.530
一旦用到低规

05:56.530 --> 05:59.370
初学者是挺痛苦的

05:59.370 --> 06:00.770
想象不出来

06:00.770 --> 06:01.410
这样子

06:01.410 --> 06:03.330
这个代码你要反复去琢磨

06:03.330 --> 06:04.930
就是我这个函数干什么用的

06:04.930 --> 06:06.290
你给我一个TOC数组

06:07.770 --> 06:08.770
我干嘛呀

06:08.770 --> 06:11.090
我只需要把这个数组

06:11.090 --> 06:13.370
去映射成为一个新的数组

06:13.370 --> 06:15.330
数组的以前的每一项

06:15.330 --> 06:17.090
变成一个新的对象

06:17.090 --> 06:18.530
其他的属性我不管

06:18.530 --> 06:20.210
我就把selected加了一个TOC

06:20.210 --> 06:22.490
selected属性加上

06:22.530 --> 06:25.250
然后对它的指选项

06:25.250 --> 06:28.010
对它的指目录做同样的处理

06:28.010 --> 06:29.770
这样才要低规

06:29.770 --> 06:31.290
如果说你不加这一行的话

06:31.290 --> 06:33.650
那么你把这个TOC传进去

06:33.650 --> 06:35.290
那么我一开始就是顶层的TOC

06:35.290 --> 06:37.250
因为我们一开始肯定要这样调用

06:37.250 --> 06:39.090
就反馈的肯定就是gex

06:39.090 --> 06:39.850
TOC

06:39.850 --> 06:41.650
然后把rex TOC传进去

06:41.650 --> 06:42.730
对吧

06:42.730 --> 06:43.690
所以调用这个函数

06:43.690 --> 06:46.370
把这个TOC就顶层的TOC传进去

06:46.370 --> 06:47.970
顶层的TOC它只处理得要顶层

06:47.970 --> 06:49.290
它的指目录是不是没处理

06:49.290 --> 06:50.210
就这个指目录里面

06:50.210 --> 06:51.170
是不是没有意思

06:51.170 --> 06:52.130
是那个数据

06:52.170 --> 06:53.570
对它指目录

06:53.570 --> 06:56.050
就它的TOC属性还是要做同样的处理

06:56.050 --> 06:56.850
就这一块代码的

06:56.850 --> 06:57.690
要好好去处理

06:57.690 --> 06:58.930
好好去分析一下

07:00.170 --> 07:01.530
就t2q

07:02.250 --> 07:03.930
那么剩下的就是一个意思在那个程

07:03.930 --> 07:05.770
意思在那个程等于什么呢

07:05.770 --> 07:06.890
就非常简单了

07:06.890 --> 07:08.170
这个目录它选不选中

07:08.170 --> 07:08.810
取决于什么呢

07:08.810 --> 07:10.370
就这个目录的 anchor属性

07:13.620 --> 07:16.740
就这个目录的 anchor属性

07:16.740 --> 07:19.100
每个目录是不是都有 anchor属性

07:19.100 --> 07:21.540
这个属性是不是等于

07:21.540 --> 07:23.740
this active anchor

07:23.780 --> 07:24.980
目前选中的 anchor

07:26.140 --> 07:26.700
对吧

07:26.700 --> 07:27.740
就完事了

07:27.740 --> 07:29.180
那么就得到了这么一个

07:29.180 --> 07:30.220
Toc围之拾那个

07:30.700 --> 07:32.540
好好保存咱们来看一下

07:32.540 --> 07:33.820
保存完了过这个组件里面

07:33.820 --> 07:35.660
你看一下是不是就有这么一个

07:36.300 --> 07:38.260
computer的计算属性了

07:38.260 --> 07:39.620
你看这里边

07:39.620 --> 07:41.660
之前Toc有五项

07:41.660 --> 07:42.420
那这里有五项

07:42.420 --> 07:43.020
因为它是什么

07:43.020 --> 07:44.300
它是映射出来的

07:44.300 --> 07:46.660
对 根据原来的Toc映射出来的

07:46.660 --> 07:47.740
好 那么我们看一下这个

07:47.740 --> 07:49.260
第一个是不是就是

07:49.260 --> 07:50.900
意思那个是出选中了

07:50.900 --> 07:52.380
那么其他都没有选中

07:52.380 --> 07:53.020
对吧

07:53.060 --> 07:53.980
那么我们再举个例子

07:53.980 --> 07:55.140
我们看一下第三个

07:56.780 --> 07:57.660
我们看一下这一下

07:58.660 --> 08:00.260
这一项的话有一个

08:01.420 --> 08:02.540
是这个 anchor

08:02.540 --> 08:03.740
那么我们把它设置为这个

08:05.870 --> 08:06.550
保存

08:06.550 --> 08:08.830
你看一下目前的计算属性

08:08.830 --> 08:10.270
目前的计算属性的第一个

08:10.870 --> 08:11.750
is next force

08:11.750 --> 08:12.550
没有选中

08:12.550 --> 08:13.190
第二个

08:13.190 --> 08:14.030
is seven force

08:14.030 --> 08:15.030
但它的企务准

08:15.030 --> 08:16.550
因为也做了同样的处理

08:16.550 --> 08:18.110
对它的企务准也做了这个处理

08:18.110 --> 08:19.990
把它的企务准的也改变了

08:19.990 --> 08:21.750
已经已经经过了映射

08:21.750 --> 08:23.510
所以它的企务准的也多了这个属性

08:24.230 --> 08:24.990
也是那个字

08:24.990 --> 08:25.950
它第一个是q

08:25.950 --> 08:26.350
看呗

08:26.350 --> 08:27.470
后边就是force

08:27.470 --> 08:29.950
那你看现在是不是把每一个toc对象

08:30.950 --> 08:32.030
加了一个属性

08:32.030 --> 08:32.230
对吧

08:32.230 --> 08:33.630
而这是地规加的

08:33.630 --> 08:35.990
因为它对q准做处理的时候

08:35.990 --> 08:37.470
如果q准里边还有嵌套

08:37.470 --> 08:39.590
那么q准里边它也会运行这个函数

08:40.390 --> 08:41.030
这是地规

08:42.270 --> 08:43.910
好 那么这里搞定了之后

08:43.910 --> 08:45.670
我们这里绑进列室的时候

08:45.670 --> 08:46.230
绑进什么

08:46.230 --> 08:47.670
绑进那个计算属性

08:47.670 --> 08:49.350
就是什么toc

08:49.350 --> 08:50.550
v是那个字

08:50.550 --> 08:51.350
就是本节课

08:51.390 --> 08:53.470
你首先要理解的就是这段代码

08:54.670 --> 08:55.670
不简单的这段代码

08:55.670 --> 08:56.590
肯定是有难度的

08:57.510 --> 09:00.030
如果说你这里实在是搞不定

09:00.590 --> 09:01.950
那我也原谅你吧

09:01.950 --> 09:02.990
我也原谅你

09:02.990 --> 09:04.310
那你就把这个代码

09:04.310 --> 09:05.630
copy一下 写过来

09:06.150 --> 09:07.950
但是我期望你的尽力搞定

09:07.950 --> 09:08.790
这个是

09:09.750 --> 09:10.870
你能够把这个搞定的话

09:10.870 --> 09:12.070
你代码你能诱惑的提升

09:12.070 --> 09:13.110
就几行代码

09:13.110 --> 09:14.590
但是要理解它可不简单

09:15.150 --> 09:16.670
如果说你实在搞不定

09:16.670 --> 09:17.910
你不要影响后边的学习

09:17.910 --> 09:19.350
不然说你实在搞不定

09:19.350 --> 09:20.870
那我后面就不学了

09:20.910 --> 09:22.350
然后从此就放弃了

09:22.350 --> 09:23.750
那也不行

09:23.750 --> 09:25.110
你总归有一天会搞定的

09:25.110 --> 09:27.590
可能现在你一下子传不过来这个完

09:27.590 --> 09:28.950
那么你如果说实在搞不定

09:28.950 --> 09:30.110
你把代码copy过去

09:30.630 --> 09:31.430
用着

09:31.430 --> 09:32.710
你现在只要知道

09:33.230 --> 09:34.350
我这个数据

09:34.350 --> 09:35.590
就这个函写完了

09:35.590 --> 09:38.110
我这个数据能够控制哪个被选中

09:38.990 --> 09:40.590
你还把现在是不是它原来选中了

09:40.590 --> 09:40.990
为什么

09:40.990 --> 09:41.790
因为它多了一个意思

09:41.790 --> 09:43.670
那个意思是这个属性都传过去了

09:43.670 --> 09:45.350
所以它选中效果就已经有了

09:45.350 --> 09:45.870
那么比较多

09:45.870 --> 09:46.790
把它设置为1

09:48.150 --> 09:49.390
你看是不是它选中了

09:49.510 --> 09:50.910
我把它设置为4

09:52.070 --> 09:52.830
是不是它选中了

09:53.470 --> 09:53.950
对不对

09:54.390 --> 09:56.150
那么现在你只需要知道

09:56.590 --> 09:58.110
刚才的团已经翻过去了

09:58.110 --> 09:59.910
你只需要知道我们控制它

10:00.230 --> 10:03.030
就等于控制了选中效果

10:04.310 --> 10:04.870
没问题吧

10:05.710 --> 10:06.750
好那么我们接着来

10:08.550 --> 10:09.390
按照惯例

10:09.390 --> 10:10.710
我还是把它写下面来点

10:11.030 --> 10:12.070
没什么的写下面

10:13.270 --> 10:14.230
那么接着来

10:14.230 --> 10:17.030
接下来我要做的事情就是要写这么一个方法

10:17.710 --> 10:19.470
我希望一调用这个方法

10:19.470 --> 10:21.430
它就能够设置正确的这个值

10:21.430 --> 10:24.270
因为我们知道这个值就能控制哪个被选中

10:24.790 --> 10:26.110
我们现在就是要控制这个值

10:26.110 --> 10:26.550
对吧

10:26.550 --> 10:30.110
我于是我想写一个方法叫做set select

10:30.830 --> 10:31.710
写这么一个方法

10:31.710 --> 10:32.870
这个方法干嘛呢

10:33.390 --> 10:39.150
设置active anchor为正确的值

10:39.630 --> 10:40.670
我们要做这么一件事

10:42.230 --> 10:44.630
那怎么样设置它为正确的值呢

10:45.190 --> 10:46.030
怎么样设置呢

10:47.830 --> 10:48.950
active anchor

10:49.430 --> 10:50.750
这种取决于啥呀

10:50.750 --> 10:52.590
就当前选中哪一个取决于啥呀

10:52.590 --> 10:54.790
是不是取决于我们左边

10:54.790 --> 10:56.230
跟这个组件无关了

10:56.230 --> 10:58.510
是不是取决于我们左边滚动它的位置

10:58.510 --> 11:00.310
其实再详细来说

11:00.670 --> 11:01.310
取决于什么呢

11:01.310 --> 11:02.950
取决于这些A起元素

11:03.510 --> 11:04.710
就是我们这边目录里面

11:04.710 --> 11:06.110
是不是对应很多A起元素

11:06.110 --> 11:09.670
取决于这些A起元素的它的位置

11:10.950 --> 11:11.670
是不是这个道理

11:12.070 --> 11:13.590
这里每一个向每一个目录

11:13.590 --> 11:14.830
就对应一个A起元素

11:15.030 --> 11:17.230
取决于这边的A起元素的位置

11:17.510 --> 11:19.030
那么这一面A起元素有个特点

11:19.030 --> 11:19.590
就是什么呢

11:19.830 --> 11:20.790
就是它有ID

11:20.990 --> 11:22.350
你看每个A起元素肯定有ID

11:22.350 --> 11:23.670
因为这边有 anchor

11:23.670 --> 11:23.910
对吧

11:23.910 --> 11:24.510
点一下

11:24.870 --> 11:27.150
它就划到这个ID的位置

11:27.710 --> 11:29.230
它们就划到这个ID的位置

11:29.230 --> 11:30.070
就这么个意思

11:30.670 --> 11:33.870
所以说我们首先肯定毫无疑问的

11:33.870 --> 11:35.910
要把这些A起元素对应的

11:35.910 --> 11:37.550
就是要把这些

11:38.270 --> 11:40.430
这些目录对应的元素

11:40.430 --> 11:41.470
要是不是要全部拿到

11:41.470 --> 11:42.870
因为我们要分析元素的位置

11:43.870 --> 11:45.630
那么我们要实现这个函数

11:45.630 --> 11:48.510
所以说首先拿到对应的所有元素

11:48.510 --> 11:49.750
我们希望把这个元素

11:49.750 --> 11:50.830
就形成一个数组

11:50.830 --> 11:51.830
不要有限套

11:51.830 --> 11:53.150
一个数组就OK了

11:53.150 --> 11:55.070
所以说我们这里再写个计算属性

11:55.070 --> 11:57.030
这个计算属性我们把叫做Dorms

11:57.030 --> 11:58.830
它用来干嘛呢

11:58.830 --> 12:00.830
是根据TOC

12:01.830 --> 12:03.430
得到一个

12:03.430 --> 12:08.650
得到它们对应的元素

12:08.650 --> 12:09.290
数组

12:09.290 --> 12:11.210
写这么一个计算属性

12:11.210 --> 12:12.050
啥意思呢

12:12.050 --> 12:13.530
我再说一下

12:13.810 --> 12:15.970
比方说我现在这个TOC是这个样子

12:15.970 --> 12:17.810
那么我们的元素数组是什么呢

12:17.810 --> 12:20.330
第一个元素就是

12:20.330 --> 12:21.850
ID 抬头1

12:21.850 --> 12:22.970
比方说就这个

12:22.970 --> 12:24.690
就这个对应的元素数

12:24.690 --> 12:26.170
Dorm元素

12:26.170 --> 12:27.170
Dorm

12:27.170 --> 12:28.210
ID是

12:28.210 --> 12:29.890
ID是那个抬头1

12:29.890 --> 12:30.730
就举个例子

12:30.730 --> 12:31.530
就是这么个意思

12:31.530 --> 12:32.650
懂就行了

12:32.650 --> 12:34.010
第二个也是个Dorm元素

12:34.010 --> 12:37.330
它的ID是抬头2

12:37.330 --> 12:39.050
第三个也是Dorm元素

12:39.050 --> 12:40.610
第二个是这个

12:40.610 --> 12:41.890
第三个也是Dorm元素

12:41.890 --> 12:43.490
它的ID是抬头

12:43.690 --> 12:44.690
3

12:44.690 --> 12:45.930
对应这个

12:45.930 --> 12:48.130
第四个是Dorm元素

12:48.130 --> 12:52.130
它的ID是抬头4

12:52.130 --> 12:52.810
对应这个

12:52.810 --> 12:54.530
我们要得到一串的Dorm元素

12:54.530 --> 12:56.530
因为我们只有拿到了这些Dorm元素

12:56.530 --> 12:57.930
我们要去分一个一个分析

12:57.930 --> 12:58.970
Dorm元素的位置

12:58.970 --> 13:01.090
我才能够去设置

13:01.090 --> 13:01.770
当前

13:01.770 --> 13:04.330
根据位置去设置当前

13:04.330 --> 13:06.890
到底哪一个Dorm元素应该被选中

13:06.890 --> 13:07.810
原来的意思吧

13:07.810 --> 13:10.050
所以说我们这里要做的事情

13:10.050 --> 13:11.490
其实就是这么一件事

13:11.490 --> 13:12.450
因此我这个事情

13:12.490 --> 13:14.490
其实也并不麻烦

13:14.490 --> 13:17.090
我设置一个数组

13:17.090 --> 13:18.970
我们不是又是拿到一个数组吗

13:18.970 --> 13:19.850
多么也是一个数组

13:19.850 --> 13:21.970
我就一向一向往里边加

13:21.970 --> 13:23.930
我怎么一向一向往里边加呢

13:23.930 --> 13:25.010
是不是循环帝规

13:25.010 --> 13:26.090
还是要帝规

13:26.090 --> 13:28.250
先循环这个TOC

13:28.250 --> 13:29.450
循环到某一项的时候

13:29.450 --> 13:30.610
它如果说有气候群的话

13:30.610 --> 13:32.610
去循环它的气候群

13:32.610 --> 13:33.210
对不对

13:33.210 --> 13:34.330
我们要做这么一件事

13:34.330 --> 13:35.770
所以说我们这里有写个函数

13:35.770 --> 13:39.410
一个地规函数叫Agg2Dorms

13:39.410 --> 13:41.370
你给我一个TOC数组

13:41.370 --> 13:41.970
我干嘛

13:42.010 --> 13:44.410
我就循环它

13:44.410 --> 13:46.450
循环这个TOC数组

13:46.450 --> 13:48.530
每一次循环

13:48.530 --> 13:49.930
我就把这个TOC

13:49.930 --> 13:52.250
是不是就可以拿到这个TOCT的

13:52.250 --> 13:55.530
T的N可是不是可以拿到

13:55.530 --> 13:55.850
对不对

13:55.850 --> 13:57.050
是不是可以拿到

13:57.050 --> 13:58.290
拿到过后呢

13:58.290 --> 14:00.690
它如果说有气候群属性

14:00.690 --> 14:02.970
并且它的气候群属性呢

14:02.970 --> 14:04.090
Ns大于0

14:04.090 --> 14:05.610
有Ns

14:05.610 --> 14:09.530
那么我还要再一次调用自身

14:09.530 --> 14:11.090
把它的气候群也传进去

14:11.210 --> 14:12.170
不但要加自己

14:12.170 --> 14:13.210
还要加它的气候群

14:14.570 --> 14:15.210
对不对

14:15.210 --> 14:16.490
其实这就是如果说你学过

14:16.490 --> 14:17.530
那个算法的话

14:17.530 --> 14:19.050
那么这就是一个数的

14:19.050 --> 14:20.690
深度优先便利

14:20.690 --> 14:22.130
只不过它不是一个二差数而已

14:23.410 --> 14:23.570
好

14:23.570 --> 14:24.730
那么我们现在的假设

14:24.730 --> 14:25.690
这个函数已经写完了

14:25.690 --> 14:27.170
我就这里调用一下这个函数

14:27.170 --> 14:29.730
一开始把当前的TOC传进去

14:29.730 --> 14:31.250
我们最后来返回Dorms

14:31.250 --> 14:33.490
现在目前跟Dorms还没有关系

14:33.490 --> 14:34.570
我们只是把输出

14:34.570 --> 14:35.850
每一个T的N可输出

14:35.850 --> 14:37.290
我们看一下这个便利

14:37.290 --> 14:38.290
看一下这个便利的结果

14:39.290 --> 14:40.290
cancel

14:40.290 --> 14:41.290
我们看一下view

14:42.490 --> 14:43.490
找到它的detail

14:45.890 --> 14:46.290
TOC

14:47.490 --> 14:48.290
你看Dorms

14:49.690 --> 14:50.290
你看N可

14:50.290 --> 14:52.490
你看是不是1234567

14:52.490 --> 14:54.410
是不是全部编辑出来了

14:54.410 --> 14:55.690
那么之后呢

14:55.690 --> 14:57.570
我们要做的事情实际上不是输出

14:57.570 --> 14:58.890
而是把这个N可

14:58.890 --> 14:59.730
根据这个N可

14:59.730 --> 15:01.650
是不是得到一个动物元素

15:01.650 --> 15:02.490
doctimate

15:02.490 --> 15:04.090
get element by id

15:04.090 --> 15:04.970
t叫N可

15:04.970 --> 15:06.290
所以得到一个动物元素

15:06.290 --> 15:07.610
把这个动物元素加二二去

15:07.810 --> 15:08.810
加Dorms里边去

15:10.210 --> 15:10.810
加进去

15:13.940 --> 15:14.540
保存

15:15.540 --> 15:16.540
那么我们现在再看

15:17.940 --> 15:18.340
TOC

15:18.340 --> 15:19.740
你看Dorms里边

15:19.740 --> 15:21.540
是不是有七项了

15:21.540 --> 15:22.740
有七个元素

15:23.740 --> 15:25.740
对应到这边的七个元素

15:25.740 --> 15:27.340
根据id得到的

15:27.340 --> 15:28.740
我们先把这些元素先拿到

15:28.740 --> 15:30.540
因为我们后边根据元素为止来稳

15:30.540 --> 15:31.140
对不对

15:31.140 --> 15:32.940
所以我们先把一个元素拿到

15:32.940 --> 15:33.940
形成了一个输出

15:33.940 --> 15:35.940
就没有成绩结构的输出

15:35.940 --> 15:36.540
那么接下来

15:36.540 --> 15:37.940
我就是一个一个拿着

15:37.940 --> 15:39.340
把这些元素拿出来

15:39.340 --> 15:41.140
看下哪个元素比较符合

15:41.940 --> 15:43.540
为就是该激活的位置

15:44.140 --> 15:45.540
说这个函数要做的事情

15:45.540 --> 15:46.740
并不复杂

15:46.740 --> 15:47.540
它做的事情就是说

15:47.540 --> 15:48.940
这个函数很简单的

15:48.940 --> 15:50.740
就是循环每一个Dorms

15:51.140 --> 15:52.340
thisDorms

15:52.340 --> 15:53.140
循环它

15:54.340 --> 15:55.740
把每一个动物对象拿到

15:56.540 --> 15:58.140
首先你要判断一点

15:58.140 --> 15:59.340
就一个一个看

15:59.340 --> 16:00.540
首先你要判断一点

16:00.540 --> 16:02.140
就是这个动物元素有没有

16:02.140 --> 16:02.940
因为有的时候

16:02.940 --> 16:05.140
你根据id得到左边有这个目录

16:05.140 --> 16:07.740
但是右边有这个目录

16:07.740 --> 16:08.340
有这个id

16:08.340 --> 16:10.540
但是左边找不到id的对应的元素

16:11.140 --> 16:11.940
这些特殊情况

16:11.940 --> 16:12.740
我也要说

16:12.740 --> 16:14.340
为什么会出现这种特殊情况

16:14.340 --> 16:15.340
我现在想象不到

16:15.340 --> 16:16.340
但是有可能

16:16.340 --> 16:17.340
我就害怕有可能

16:17.340 --> 16:19.340
所以说我还是把它判断一下

16:19.940 --> 16:21.740
如果说动物元素根本就不存在

16:21.740 --> 16:23.340
根本没有拿到动物元素

16:23.340 --> 16:24.940
那么针对这个动物元素

16:24.940 --> 16:25.940
还有位置吗

16:26.340 --> 16:27.340
所以没有位置了

16:27.340 --> 16:28.140
没有位置

16:28.540 --> 16:30.340
那么针对这个动物元素

16:30.340 --> 16:31.340
我能去设置

16:31.940 --> 16:32.940
它到底选中

16:32.940 --> 16:34.540
就是到底是不是选中它吗

16:34.940 --> 16:36.540
所以无法去设置了

16:36.540 --> 16:37.940
我们这些循环在干嘛

16:37.940 --> 16:39.740
是不是看一下

16:39.740 --> 16:42.940
当前这个动物元素

16:42.940 --> 16:45.740
是不是应该被选中

16:45.740 --> 16:46.740
是不是要做这么一件事

16:48.340 --> 16:49.740
那么如果说动物元素不存在

16:49.740 --> 16:50.540
那我还咋看了

16:50.540 --> 16:51.140
没法看

16:51.140 --> 16:52.340
所以我就continue

16:52.940 --> 16:54.340
进入下一次循环

16:54.340 --> 16:55.740
这个就略过了

16:55.740 --> 16:56.540
不看了

16:56.540 --> 16:57.740
下一次循环再来吧

16:57.740 --> 16:58.540
就看下一个

17:00.140 --> 17:02.140
那么单码到了第62行

17:02.140 --> 17:03.940
说明这个动物元素一定是存在的

17:04.540 --> 17:06.140
不然的话就进入下一次循环了

17:06.740 --> 17:08.340
那如果说存在呢

17:09.140 --> 17:10.140
这就有点意思的

17:10.140 --> 17:11.540
我们要分为三种情况

17:12.340 --> 17:13.340
哪三种情况呢

17:13.340 --> 17:14.140
看着啊

17:14.140 --> 17:14.740
注意看

17:16.140 --> 17:16.940
这是个动物元素

17:16.940 --> 17:18.540
我们总会循环到它的

17:19.340 --> 17:20.340
一个个拿出来看

17:20.540 --> 17:21.940
这动物元素有三种情况

17:21.940 --> 17:23.140
我们假设

17:23.140 --> 17:25.740
我们如果说希望有一个范围

17:25.740 --> 17:27.940
比方说高度在

17:28.140 --> 17:29.540
就你顶边的高度

17:29.540 --> 17:31.140
在200个像素以内

17:31.540 --> 17:33.140
假设我们有这么一个规则

17:33.340 --> 17:35.340
在200个像这个A7元素

17:35.740 --> 17:38.140
它离四口顶标的距离

17:38.340 --> 17:39.940
在200个像素以内

17:40.940 --> 17:42.940
0到200个像素在这个指间

17:42.940 --> 17:44.540
我们就认为这个东西

17:44.540 --> 17:45.740
它一定是选中的

17:47.340 --> 17:48.340
这个逻辑没问题吧

17:48.740 --> 17:49.940
我们自己规定一个范围

17:50.340 --> 17:51.740
你如果说这个A7元素

17:51.940 --> 17:52.740
在这个范围内

17:52.740 --> 17:54.740
我就认为用户就看到这来了

17:55.340 --> 17:57.540
刚好看到这个这个章节来了

17:57.540 --> 17:59.140
那么他就一定是选中的

18:00.140 --> 18:00.540
好

18:01.740 --> 18:02.540
是不是有这么一种情况

18:02.540 --> 18:03.940
还有还有什么情况呢

18:04.140 --> 18:05.540
就是它补在这个范围内

18:07.340 --> 18:08.340
它在下面这个范围

18:08.740 --> 18:09.540
所以还有这种情况

18:09.540 --> 18:10.340
这个元素

18:11.540 --> 18:12.540
还有这种情况

18:12.540 --> 18:13.940
它在上面那个范围

18:14.340 --> 18:14.540
对吧

18:14.540 --> 18:16.140
刚才那个元素是不是跑上面去了

18:16.540 --> 18:17.540
在上面的范围

18:17.740 --> 18:18.540
就这三种情况

18:18.540 --> 18:20.140
我们这三种情况的分别来处理

18:20.740 --> 18:20.940
好

18:20.940 --> 18:22.740
于是我这里是不是要规定一个

18:23.940 --> 18:24.540
范围啊

18:24.540 --> 18:25.740
这个范围你自行规定

18:25.740 --> 18:26.740
比方说range

18:26.740 --> 18:28.140
我就规定200个像素

18:29.140 --> 18:29.940
200个像素

18:29.940 --> 18:31.940
这200个像素以内都是ok的

18:32.140 --> 18:33.140
所以我这里要得到什么

18:33.140 --> 18:34.540
得到这个元素

18:35.340 --> 18:37.740
离四口顶边的距离

18:38.340 --> 18:40.740
怎么得到一个元素离四口顶边的距离呢

18:41.540 --> 18:42.940
这要用到基础知识了

18:43.340 --> 18:44.540
是不是要用到这个

18:46.140 --> 18:46.940
叫做

18:48.340 --> 18:49.740
get bounding

18:49.740 --> 18:50.740
calendric

18:51.340 --> 18:52.940
这里边就有数项

18:53.340 --> 18:55.140
叫做top值

18:55.540 --> 18:55.940
对不对

18:55.940 --> 18:57.740
top值就是你顶边的距离

18:58.140 --> 18:58.340
好

18:58.340 --> 18:59.540
咱们得到

18:59.740 --> 19:00.340
dom

19:00.340 --> 19:00.940
del

19:01.340 --> 19:04.340
get bounding

19:04.940 --> 19:05.540
rect

19:06.340 --> 19:07.140
rect

19:08.340 --> 19:09.540
这个复制一下吧

19:10.340 --> 19:11.140
得到这个

19:11.540 --> 19:12.540
一个举行区域

19:12.540 --> 19:14.540
这个元素在四口里边的举行区域

19:14.940 --> 19:16.540
然后我们得到它的属性top

19:16.540 --> 19:16.940
于是呢

19:16.940 --> 19:18.340
是不是拿到这个元素的top值

19:18.940 --> 19:20.140
你这是得到啊

19:20.540 --> 19:22.340
得到元素离

19:23.940 --> 19:24.740
顶边

19:25.140 --> 19:26.140
四口顶边

19:27.940 --> 19:29.540
顶部的距离

19:30.340 --> 19:31.940
好我们来看一下这个距离

19:32.540 --> 19:34.140
是不是大于等于0

19:35.740 --> 19:38.140
并且小于等于

19:38.540 --> 19:39.140
range

19:39.540 --> 19:40.540
是不是在这个范围内

19:40.740 --> 19:41.740
在这个范围内怎么样

19:41.940 --> 19:43.140
我们以后再说

19:43.340 --> 19:45.740
在规定的范围内

19:46.740 --> 19:47.940
然后else

19:48.740 --> 19:49.940
那么top

19:50.340 --> 19:51.540
大于了range

19:52.540 --> 19:53.340
是不是在

19:53.940 --> 19:56.140
规定的范围下方

19:56.740 --> 19:57.540
还有else呢

19:57.540 --> 19:58.540
就是在上方了

19:58.540 --> 19:59.540
只有这三种情况

19:59.740 --> 20:02.140
在规定的范围上方

20:02.340 --> 20:03.540
一共就这么三种情况

20:03.540 --> 20:04.540
我们分开来处理

20:05.540 --> 20:06.340
好一个个来

20:08.830 --> 20:10.930
如果说他在规定的范围内

20:11.330 --> 20:11.930
就这个玩意

20:11.930 --> 20:12.830
他在规定的范围内

20:12.830 --> 20:14.330
是不是他一定是选中的

20:15.230 --> 20:16.830
是不是他一定是选中的

20:17.030 --> 20:18.530
因此他一定选中怎么办呢

20:19.030 --> 20:19.730
我们刚才说了

20:19.730 --> 20:20.630
要是设置选中

20:20.630 --> 20:21.830
是不是设置他就完事了

20:22.030 --> 20:23.630
所以我把他的值就设置为什么了

20:23.630 --> 20:25.030
他一开始应该是空置不出

20:25.030 --> 20:26.030
一开始啥都没有

20:27.630 --> 20:28.430
他的值

20:28.630 --> 20:30.130
this active anchor

20:30.330 --> 20:32.330
所以应该等于当前都没有元素id

20:32.930 --> 20:34.130
因为这个H元素

20:34.130 --> 20:34.830
他在范围内

20:34.830 --> 20:35.630
那么这个H元素

20:35.630 --> 20:36.430
他自然的id

20:36.430 --> 20:39.430
就应该等于我们目前的激活状态

20:40.730 --> 20:41.630
所以应该这样做

20:42.830 --> 20:43.630
好保存

20:43.630 --> 20:44.230
我们来看一下

20:44.430 --> 20:45.430
现在行不行

20:45.730 --> 20:47.230
接下来我们来运行一下这个函数

20:47.430 --> 20:48.430
这个函数怎么调用呢

20:48.430 --> 20:49.230
我这样调用吧

20:49.230 --> 20:50.330
我在creative里边

20:53.290 --> 20:55.190
就是setLegit

20:59.130 --> 20:59.630
调用一下

20:59.830 --> 21:01.630
或者是我们把它放到一个window里面

21:01.830 --> 21:02.430
window

21:02.930 --> 21:04.030
setLegit

21:04.230 --> 21:05.030
变为调试

21:05.030 --> 21:06.230
这主要是为了调试

21:07.830 --> 21:08.630
好保存

21:09.630 --> 21:10.630
这里包的错了

21:10.630 --> 21:10.830
是吧

21:10.830 --> 21:11.430
oh this

21:14.130 --> 21:14.430
好

21:14.430 --> 21:14.730
来

21:14.730 --> 21:15.530
我们来试一下

21:17.440 --> 21:18.940
现在我把放到这个位置

21:18.940 --> 21:21.140
这个函数是不是在这个范围内

21:21.340 --> 21:21.640
好

21:21.640 --> 21:21.940
OK

21:21.940 --> 21:23.140
我们来setLegit

21:26.050 --> 21:26.450
调用

21:26.450 --> 21:26.850
你看

21:26.950 --> 21:27.850
这里是不是选中了

21:28.250 --> 21:29.350
整个过程是什么样子

21:29.350 --> 21:30.850
就是他循环动的元素

21:30.850 --> 21:31.850
也发现了

21:32.450 --> 21:34.050
发现了就第一个元素

21:34.050 --> 21:35.050
他在这个范围内

21:35.350 --> 21:36.250
然后就把它设置

21:36.550 --> 21:37.250
设置成

21:37.350 --> 21:38.350
就设置了这个属性

21:38.350 --> 21:39.750
而这设置了这个属性

21:39.750 --> 21:40.650
这个属性的就

21:42.150 --> 21:44.450
影响到了激活状态

21:45.050 --> 21:45.250
对吧

21:45.250 --> 21:46.850
因为我们之前做的那个东西

21:46.850 --> 21:48.050
就是根据这个属性来的

21:49.450 --> 21:49.850
好

21:49.850 --> 21:50.850
然后我们现在写啊

21:50.850 --> 21:52.050
就是这个东西设置好了过

21:52.050 --> 21:53.050
你想一想这个道理

21:53.450 --> 21:55.450
只有一个有激活状态

21:55.850 --> 21:57.350
那么他被激活了

21:57.850 --> 21:58.750
后面还看吗

21:59.850 --> 22:01.050
他在规定的范围内

22:01.350 --> 22:02.650
后面还看后面吗

22:02.650 --> 22:03.350
就不看了

22:03.350 --> 22:03.850
对不对

22:03.950 --> 22:04.850
就直接规定了

22:04.850 --> 22:05.750
还说就结束了

22:06.450 --> 22:07.950
避免后面就反复去看

22:08.850 --> 22:10.250
而且这是第一种情况啊

22:11.050 --> 22:13.650
第二种情况是他在下边

22:15.550 --> 22:16.450
表面概述

22:16.950 --> 22:17.750
他不在这个范围内

22:17.750 --> 22:19.150
他在下边

22:19.350 --> 22:20.750
他在下边怎么办呢

22:21.150 --> 22:22.650
说他一定不激活

22:22.950 --> 22:24.050
甭管你看什么情况

22:24.050 --> 22:24.650
他激活吗

22:24.650 --> 22:25.450
他没法激活了

22:25.450 --> 22:27.250
现在他一定不是激活状态

22:27.450 --> 22:29.150
不但他不是激活状态

22:29.850 --> 22:31.350
他后面的所有的东西

22:31.350 --> 22:32.550
是不是都不是激活状态

22:33.050 --> 22:34.650
所以说我这里

22:35.550 --> 22:37.350
this active anchor

22:37.750 --> 22:38.450
等于什么呢

22:38.750 --> 22:39.450
我又把他

22:39.950 --> 22:40.450
对不对

22:40.650 --> 22:41.750
我就直接结束了

22:42.350 --> 22:42.750
对吧

22:42.850 --> 22:43.650
直接就结束了

22:43.650 --> 22:45.150
他肯定不是激活状态

22:45.450 --> 22:46.350
就他在后边

22:46.350 --> 22:47.850
他肯定不是激活状态

22:48.950 --> 22:50.650
那么后边也没必要看了

22:51.350 --> 22:52.650
刚才还忘了做一件事啊

22:52.750 --> 22:54.050
但这个设置这个函数

22:54.050 --> 22:55.050
之前的

22:55.050 --> 22:56.950
我先把之前的激活状态清空

22:58.150 --> 22:59.450
因为要重新设置嘛

22:59.950 --> 23:02.950
由于后续要重新设置

23:03.450 --> 23:04.250
先清空

23:04.950 --> 23:06.050
之前的状态

23:08.380 --> 23:09.680
那么这是这种情况

23:10.380 --> 23:11.680
比较多这种情况写好了

23:11.680 --> 23:12.880
过后来我们来看一下啊

23:12.980 --> 23:14.180
如果说我们现在在这

23:14.180 --> 23:16.180
那肯定是没有任何东西被激活

23:18.220 --> 23:19.720
你看是不是没有任何东西被激活

23:19.720 --> 23:21.320
我们看主见的里边的一个属性

23:23.120 --> 23:24.020
这个detail

23:24.920 --> 23:25.520
tuc

23:25.520 --> 23:27.320
这个active anchor

23:27.320 --> 23:28.420
是不是控制不了

23:28.620 --> 23:29.420
哎我放到这

23:30.020 --> 23:31.120
他是不是该激活了

23:31.520 --> 23:32.720
来先吃那个

23:32.920 --> 23:33.620
他激活了

23:33.620 --> 23:34.520
我们来看那个属性

23:34.820 --> 23:35.720
是不是他变成这个了

23:36.220 --> 23:36.820
对不对

23:36.820 --> 23:38.220
哎那么我们上网上翻

23:38.220 --> 23:39.720
上翻过后先吃那个

23:40.120 --> 23:40.920
好看这边

23:41.120 --> 23:42.220
这就变成控制度刷了

23:42.720 --> 23:43.220
对吧

23:43.220 --> 23:44.220
就这么个意思啊

23:45.520 --> 23:47.220
好这规定的上方下方

23:47.220 --> 23:48.320
那上方呢

23:48.620 --> 23:49.220
比方说啊

23:49.220 --> 23:51.120
我们现在这个这个元素

23:51.120 --> 23:51.920
他在上方

23:53.320 --> 23:54.820
上方就一定

23:55.420 --> 23:56.320
不激活吗

23:56.920 --> 23:57.720
也不一定

23:58.620 --> 24:00.120
上方就情况呢

24:00.120 --> 24:01.120
是什么情况呢

24:01.520 --> 24:04.020
就是如果说后边没有的话

24:04.020 --> 24:05.620
后边没有什么激活状态的话

24:05.720 --> 24:07.820
就该说后边也没有激活状态的话

24:07.820 --> 24:08.620
那么他就激活

24:09.020 --> 24:10.320
后边有激活状态的时候

24:10.320 --> 24:11.320
就用后边的

24:12.220 --> 24:13.120
那这个东西怎么写的

24:13.120 --> 24:14.620
这个代码好像好像很复杂

24:14.820 --> 24:16.320
就代码这个代码一点都不复杂

24:16.620 --> 24:17.920
你就把这个代码写一遍

24:19.420 --> 24:20.320
你想这个道理

24:20.920 --> 24:23.120
我就让他我就假设他激活了嘛

24:25.160 --> 24:26.460
先假设

24:27.460 --> 24:29.760
自己是激活的啊

24:29.860 --> 24:31.360
然后继续看后边

24:31.860 --> 24:33.060
如果说后边还有激活的

24:33.060 --> 24:34.360
后边是不是有重新复杂

24:34.660 --> 24:35.860
下一次循环又重新复杂

24:35.860 --> 24:37.760
那么就把之前的纸就覆盖掉了

24:38.360 --> 24:39.160
就这么简单

24:39.260 --> 24:40.860
如果后边没有没有激活的了

24:40.860 --> 24:41.360
那就

24:41.760 --> 24:43.660
就是自己的自己自己是激活的

24:44.160 --> 24:44.560
对吧

24:44.560 --> 24:45.260
大明就喜欢

24:45.660 --> 24:46.960
这次是那个字

24:47.460 --> 24:47.660
好

24:47.660 --> 24:48.560
咱们来看一下啊

24:48.760 --> 24:49.060
现在呢

24:49.060 --> 24:50.560
我们在这个这种状态下

24:51.760 --> 24:52.860
调这个三十十那个字

24:53.660 --> 24:55.160
你看是不是还是概述激活

24:55.360 --> 24:55.760
然后呢

24:55.760 --> 24:57.260
我们到这个简单请求这里

24:57.560 --> 24:58.160
调这个

24:58.860 --> 25:00.560
Sets是那个字

25:00.560 --> 25:01.960
你看该出去跑到上面去了

25:01.960 --> 25:02.360
对吧

25:02.360 --> 25:04.060
但是简单请求他是激活的

25:04.060 --> 25:06.460
他就把之前那个该出一个状态给他覆盖掉了

25:07.860 --> 25:08.260
啊

25:08.460 --> 25:09.060
倒这来

25:10.560 --> 25:11.060
你看

25:11.360 --> 25:12.060
这就可以了

25:12.860 --> 25:13.560
没问题了吧

25:14.260 --> 25:15.660
就是这个Sets是那个字

25:16.360 --> 25:16.560
好

25:16.560 --> 25:18.860
那么接下来的我要做的事情呢

25:19.560 --> 25:21.160
就有一些事情要做了

25:21.660 --> 25:22.460
首先呢

25:23.460 --> 25:26.060
我要观测这个观测这个哈希指导变动

25:26.560 --> 25:27.860
我观测这个指导变动

25:29.780 --> 25:30.280
好

25:30.780 --> 25:31.380
其实都不用了

25:31.380 --> 25:32.980
我就直接观测那个滚动条吧

25:32.980 --> 25:34.780
因为哈希指他也会影响滚动条的

25:34.780 --> 25:36.680
我就直接观测滚动条的变动吧

25:36.980 --> 25:38.480
那么这个滚动条的变动

25:38.480 --> 25:39.480
我怎么去观测呢

25:39.480 --> 25:41.480
因为滚动条不是在不是在这个组件里边

25:41.580 --> 25:42.480
是在别的组件

25:42.780 --> 25:43.980
哎我们之前用到了什么

25:44.280 --> 25:45.680
学上集合学过了那个

25:46.180 --> 25:47.680
事件总线对不对

25:47.680 --> 25:49.080
我们也做了一个一分之八十

25:49.380 --> 25:51.280
那么这个我们这里要做的事情

25:52.280 --> 25:53.280
我给大家写好了

25:53.980 --> 25:55.280
我在一分之八十里边

25:55.280 --> 25:57.280
事件总线里边我要声明一个事件

25:57.380 --> 25:58.480
我又这么一个事件

25:58.480 --> 25:59.980
就是妹主区

26:00.480 --> 26:01.180
滚动条

26:01.880 --> 26:02.680
这么一个事件

26:02.780 --> 26:04.180
主区的滚动条变化过后

26:04.180 --> 26:05.280
他就会触发这个事件

26:05.680 --> 26:06.480
那么主区呢

26:06.480 --> 26:07.880
目前的主区也是哪呢

26:07.880 --> 26:08.780
是这个detail

26:08.980 --> 26:09.880
是妹抗停的

26:09.880 --> 26:10.780
说这个玩意

26:10.880 --> 26:12.180
好那么给他一个Rift啊

26:13.880 --> 26:15.380
妹抗停的

26:16.380 --> 26:17.180
这主区

26:17.480 --> 26:18.380
这个DV

26:19.580 --> 26:20.680
我们接下来要做的事情

26:20.680 --> 26:21.980
是在detail这个组件里边

26:21.980 --> 26:23.680
他不是有滚动条吗

26:24.180 --> 26:25.880
我就找到这个

26:25.980 --> 26:27.280
this rift

26:27.880 --> 26:29.380
妹抗停的

26:29.580 --> 26:30.680
是不是找到这个DV了

26:30.880 --> 26:32.180
给他注册一个什么事件呢

26:32.280 --> 26:33.280
给他注册一个

26:33.580 --> 26:34.880
add event listener

26:34.980 --> 26:36.180
叫做scroll事件

26:36.480 --> 26:36.980
啊

26:37.680 --> 26:38.680
主动一个事件

26:39.680 --> 26:40.680
这个事件

26:41.880 --> 26:43.180
我们写个方法来处理吧

26:43.680 --> 26:44.780
方法在上面啊

26:45.480 --> 26:47.680
叫做handle scroll

26:51.340 --> 26:53.040
啊对handle scroll

26:53.740 --> 26:54.840
我们这里输出啊

26:55.840 --> 26:57.640
滚动条变化

26:58.640 --> 26:59.840
好保存啊

27:00.040 --> 27:01.040
接下来我们来看一下啊

27:01.240 --> 27:02.240
这里滚动条

27:02.440 --> 27:02.940
哎

27:04.340 --> 27:05.040
没啥玩意啊

27:05.040 --> 27:06.540
can't read the property

27:06.840 --> 27:08.340
add event listener

27:08.540 --> 27:09.640
of undefend

27:10.140 --> 27:11.440
他这个玩意是 undefend

27:12.240 --> 27:13.240
找上defend的

27:15.210 --> 27:16.510
妹抗停了

27:18.800 --> 27:19.500
写错了

27:20.300 --> 27:20.800
他呢

27:22.800 --> 27:23.900
还上defend

27:24.500 --> 27:25.200
哎呀

27:26.900 --> 27:27.600
嗯

27:27.800 --> 27:28.600
知道了啊

27:28.700 --> 27:29.600
他是

27:30.200 --> 27:31.500
不能放在create里面的吧

27:31.500 --> 27:32.100
说过的啊

27:32.100 --> 27:32.800
mount it

27:33.500 --> 27:34.800
好保存啊

27:34.800 --> 27:35.600
create的时候

27:35.600 --> 27:37.200
远道没创建出来啊

27:38.000 --> 27:38.800
出来可以了

27:38.800 --> 27:39.000
对吧

27:39.000 --> 27:40.200
你看滚动条变化的啊

27:40.400 --> 27:41.000
我滚动的时候

27:41.000 --> 27:42.600
是不是就触发了这个事件啊

27:42.600 --> 27:43.600
还运行这种事件

27:43.700 --> 27:44.600
那么同样的道理呢

27:44.600 --> 27:47.100
你之后destroyed

27:47.400 --> 27:49.000
这个组件被销毁之后啊

27:49.000 --> 27:50.800
你要把这个事件给他取消掉啊

27:52.400 --> 27:54.600
叫做remove

27:55.800 --> 27:56.800
add event listener

27:57.300 --> 27:58.300
把事件取消掉

27:58.600 --> 27:59.400
其他都没啥了

27:59.700 --> 28:01.000
那么现在就是这个事件

28:01.000 --> 28:02.500
处理函数的过程中

28:02.600 --> 28:04.100
怎么来处理滚动条变化

28:05.400 --> 28:06.300
怎么处理呢

28:06.300 --> 28:07.700
无非就是触发事件

28:07.800 --> 28:08.900
往哪里触发事件

28:08.900 --> 28:11.100
往事件总线去触发事件

28:11.100 --> 28:12.700
把事件总线导入进来

28:12.900 --> 28:13.800
event plus

28:15.300 --> 28:16.900
其实这里还有一个小技巧啊

28:16.900 --> 28:17.900
就是我们把这个

28:18.200 --> 28:18.900
把这个

28:19.500 --> 28:20.200
无诱实力

28:20.200 --> 28:21.600
因为他这个玩意

28:21.700 --> 28:22.500
这个无诱实力呢

28:22.500 --> 28:24.800
其实就是来帮助我们做事件总线的

28:24.800 --> 28:26.500
也可以用我们之前写的对象

28:26.800 --> 28:28.600
我总之把一个那个具有

28:29.200 --> 28:30.700
能够处理事件的对象

28:31.100 --> 28:32.300
可以把它放到无诱的

28:33.200 --> 28:34.100
原型里

28:34.700 --> 28:35.800
比较多Bus

28:36.300 --> 28:37.100
放到这里边

28:40.030 --> 28:41.630
这样子的更加方便一点

28:41.930 --> 28:43.330
你看这样子做了过后呢

28:43.330 --> 28:44.030
我在这

28:44.230 --> 28:45.630
我在这个Made.js里边

28:45.830 --> 28:46.730
我倒入一下

28:47.430 --> 28:48.030
Input

28:48.530 --> 28:49.730
叫eventBus

28:50.930 --> 28:51.930
完事了啊

28:51.930 --> 28:54.130
这样子的你是不是所有的无诱实力里边

28:54.130 --> 28:55.530
都有这个属性Bus的

28:56.230 --> 28:57.230
那么在任何地方

28:57.230 --> 28:58.430
都可以去触发这个

28:58.830 --> 28:59.530
事件总线

29:01.230 --> 29:02.030
好来吧

29:02.830 --> 29:03.930
那我就不用导入了啊

29:03.930 --> 29:05.730
那我这边就是Zs

29:06.330 --> 29:06.830
Bus

29:08.530 --> 29:09.730
触发怎么来触发事件

29:09.730 --> 29:10.530
是用Emet

29:11.330 --> 29:12.530
触发事件事件名字

29:12.530 --> 29:14.130
我们这个刚才在这边约定了啊

29:14.130 --> 29:15.330
名字呢是MadeScroll

29:15.330 --> 29:16.830
这些东西你自己约定

29:17.330 --> 29:18.530
事件名字出发了

29:19.730 --> 29:20.830
人道事件总线了

29:21.030 --> 29:21.930
然后呢

29:22.330 --> 29:23.630
有没有什么参数要传递呢

29:23.630 --> 29:25.330
就是有没有什么数据啊

29:25.330 --> 29:26.430
信息要传过去了

29:26.430 --> 29:27.530
就是滚动了动物元素

29:27.530 --> 29:28.730
我们把动物元素给他

29:29.430 --> 29:30.330
啊就Zs

29:30.930 --> 29:32.430
呃Ribs

29:33.330 --> 29:33.930
MadeContent

29:33.930 --> 29:35.430
把动物元素扔过去

29:35.730 --> 29:37.930
不断的去触发这个事件就完事了

29:39.030 --> 29:40.130
好那么现在的看不出

29:40.130 --> 29:40.530
看不出

29:40.530 --> 29:41.130
刷新一下

29:41.130 --> 29:42.330
看不到任何效果了啊

29:42.730 --> 29:43.530
看不到这个

29:44.130 --> 29:44.630
这个输出

29:44.630 --> 29:45.430
也看不到任何效果

29:45.430 --> 29:46.930
但是事件是在不断的触发

29:47.030 --> 29:49.030
只是目前没有人监听而已

29:49.830 --> 29:51.030
那么谁在监听呢

29:51.030 --> 29:52.130
谁都可以监听

29:52.930 --> 29:54.430
因为我现在是用事件总线的方式

29:54.430 --> 29:55.630
它是跨越逐渐的

29:56.630 --> 29:57.330
我们在哪里监听

29:57.330 --> 29:58.430
我们可以在这里监听

29:58.730 --> 30:01.130
啊这个blogqoc里边在这里监听

30:01.330 --> 30:02.230
怎么监听呢

30:02.230 --> 30:04.330
我们在credit里边啊可以这样监听

30:04.830 --> 30:07.130
呃给他写上一个啊Zs bus

30:07.130 --> 30:07.630
是吧

30:07.630 --> 30:08.630
所有的

30:08.630 --> 30:09.230
不用实力

30:09.230 --> 30:10.130
他都有这个buzz

30:10.530 --> 30:12.030
因为我们把它放到元项里边去了

30:12.230 --> 30:13.230
那么他有一个属性

30:13.230 --> 30:14.230
方法叫on

30:14.530 --> 30:15.330
监听什么呢

30:15.530 --> 30:16.330
监听

30:17.330 --> 30:17.830
me

30:18.430 --> 30:19.030
screw

30:19.230 --> 30:20.230
监听这个事件

30:21.430 --> 30:23.030
每一次事件触发

30:23.630 --> 30:25.130
我让谁来处理呢

30:25.230 --> 30:27.230
我让这个set是那个是在处理

30:28.030 --> 30:29.130
set是那个

30:29.130 --> 30:30.130
这个还出来处理

30:31.930 --> 30:32.530
你看吧

30:32.530 --> 30:33.530
现在我们搞定了

30:35.330 --> 30:35.930
往下走

30:36.830 --> 30:37.330
哎

30:38.430 --> 30:40.230
好像没没打运行然后呀

30:41.430 --> 30:42.230
我看一下啊

30:42.630 --> 30:43.930
我这里输出一下

30:45.330 --> 30:46.030
输了一

30:47.930 --> 30:49.530
哎没运行刷新一下啊

30:49.830 --> 30:50.530
刷新一下

30:51.530 --> 30:52.830
啊这里包出了啊

30:52.830 --> 30:53.930
就是Zs

30:54.430 --> 30:55.830
反正应该是没刷新的问题

30:58.380 --> 30:59.380
好走

30:59.380 --> 31:00.980
你看是不是在不断的触发

31:00.980 --> 31:02.280
你看这边是不是在不断的触发

31:02.280 --> 31:02.880
该数

31:03.380 --> 31:03.980
激活了

31:05.080 --> 31:06.180
简单请求激活了

31:06.180 --> 31:07.580
上面啊

31:07.580 --> 31:09.480
而且点这边也是一样点该数

31:10.480 --> 31:13.080
你看是不是跳到这跳到这是不是触发滚动条

31:13.080 --> 31:13.580
你看吧

31:13.580 --> 31:15.480
这看这边输出的一啊就知道了

31:15.480 --> 31:16.280
我们点这个

31:16.280 --> 31:17.980
你看是不是滚动条在滚动

31:17.980 --> 31:18.480
因此呢

31:18.480 --> 31:19.680
这边事件在触发

31:19.880 --> 31:20.780
触发的时候呢

31:21.680 --> 31:22.780
那么这边就运行了

31:22.780 --> 31:23.680
set是那个

31:24.080 --> 31:24.780
至于搞定了

31:26.080 --> 31:26.780
是不是搞定了

31:28.080 --> 31:28.480
啊

31:28.880 --> 31:31.480
但是这样子的话事件触发的太过于频繁了

31:31.480 --> 31:33.380
这个肯定会影响效率啊

31:33.480 --> 31:34.780
那么我想做一个防斗

31:35.380 --> 31:36.580
我在这里想做一个防斗

31:36.580 --> 31:38.280
就是你不要触发的那么

31:38.280 --> 31:39.680
触发事件肯定是频繁的

31:39.680 --> 31:41.780
就是我处理的没不要那么频繁

31:41.980 --> 31:43.680
我等一下啊比较让你

31:44.680 --> 31:46.780
100毫秒内没有变化的时候呢

31:46.780 --> 31:47.880
我再进行处理

31:48.680 --> 31:50.680
有变化的话我就先不着急

31:50.680 --> 31:53.080
比较说100毫秒50毫秒都行啊

31:53.080 --> 31:53.780
你自己去定

31:53.880 --> 31:55.180
那么我现在就要做一个事件

31:55.180 --> 31:55.580
呃

31:55.580 --> 31:57.180
寒树防斗这个寒树防斗了

31:57.180 --> 31:57.980
也没什么好说的啊

31:57.980 --> 32:00.580
你们可能都玩过玩过

32:01.180 --> 32:01.880
在这边来啊

32:01.880 --> 32:04.080
我们在这里导入一个寒树防斗吧

32:04.080 --> 32:04.880
就地棒时

32:07.250 --> 32:08.850
找出一个找出一个寒树

32:11.350 --> 32:12.950
呃这个寒树呢

32:13.650 --> 32:15.250
你给我传一个寒树进来

32:16.650 --> 32:17.650
我来给你防斗

32:17.750 --> 32:19.350
我给你返回一个新的寒树

32:21.750 --> 32:23.050
给你返回一个新的寒树

32:23.550 --> 32:25.850
这个新的寒树呢

32:26.250 --> 32:27.050
我看啊

32:29.770 --> 32:31.570
这里我这里有这样子啊

32:32.470 --> 32:34.770
我给你返回一个

32:36.470 --> 32:37.470
你给我一个寒树

32:37.470 --> 32:39.070
我给你返回一个新的寒树

32:40.170 --> 32:41.970
这个新的寒树里边呢

32:43.070 --> 32:44.170
你可能会我调用的时候

32:44.170 --> 32:45.670
可以给我传一些参数啊

32:45.870 --> 32:46.270
然后呢

32:46.270 --> 32:47.970
我把调用这个寒树

32:48.370 --> 32:49.570
我把参数传进去

32:50.470 --> 32:50.970
ok

32:50.970 --> 32:51.570
就这样子

32:52.570 --> 32:53.670
哦还没有做寒树防斗

32:53.670 --> 32:55.470
搞了半天还没做防斗

32:55.870 --> 32:57.170
我们这里设置个payment吧

32:58.570 --> 32:59.170
payment

33:00.170 --> 33:01.070
这个寒树防斗

33:01.070 --> 33:02.870
应该是前面讲过的啊

33:02.970 --> 33:04.070
我就不再重复了

33:04.970 --> 33:06.370
我这边这个寒树的执行过程中

33:06.370 --> 33:07.070
怎么执行的

33:07.070 --> 33:08.270
首先有没有这个payment

33:08.770 --> 33:09.470
不管判断

33:09.470 --> 33:11.570
不管他有没有先干清清楚再说

33:11.870 --> 33:13.070
sit clear timeout

33:13.070 --> 33:14.070
timeout清楚掉

33:14.070 --> 33:15.670
然后呢给timeout重新复制

33:15.770 --> 33:16.670
sit timeout

33:17.170 --> 33:18.370
比方说一段时间

33:18.370 --> 33:20.270
比方说这这里还有第二个参数啊

33:20.970 --> 33:22.870
等待时间默认了一秒钟吧

33:23.570 --> 33:24.970
或者是默认100毫秒

33:25.470 --> 33:26.770
等待等待一段时间

33:26.770 --> 33:27.970
这一段时间内

33:27.970 --> 33:29.370
如果说再一次调用这个寒树

33:29.370 --> 33:31.170
我就先把之前的计时器进行空

33:31.470 --> 33:32.670
然后再做一个计时

33:32.670 --> 33:33.770
总之100毫秒之后

33:33.770 --> 33:35.270
调用这个寒树100毫秒之后

33:35.470 --> 33:36.870
我才去做具体的事情

33:37.470 --> 33:38.370
100毫秒之后呢

33:38.370 --> 33:39.570
我就去运行这个寒树

33:39.670 --> 33:40.170
fn

33:41.070 --> 33:41.770
去运行它

33:43.170 --> 33:44.570
好那么这个寒树运行

33:44.570 --> 33:45.970
我把这个参数传进行

33:46.270 --> 33:46.770
完成

33:47.770 --> 33:48.870
好这就是寒树防斗

33:49.270 --> 33:50.870
我们在index把导出啊

33:50.970 --> 33:51.670
export

33:52.070 --> 33:52.670
default

33:53.070 --> 33:53.570
s

33:54.570 --> 33:55.370
debounce

33:56.870 --> 33:57.270
from

33:59.170 --> 33:59.670
bounce

34:00.170 --> 34:00.570
ok

34:01.470 --> 34:02.370
好回到这啊

34:02.370 --> 34:03.070
vlogtoc

34:03.070 --> 34:04.570
那么我们要用寒树防斗

34:05.470 --> 34:06.470
inport寶进来

34:07.170 --> 34:07.670
from

34:08.370 --> 34:09.070
yout

34:10.770 --> 34:11.770
debounce

34:13.710 --> 34:14.810
好到这边来啊

34:14.910 --> 34:17.810
我就把这个sets那个城的做一个寒树防斗

34:18.610 --> 34:19.010
好

34:19.510 --> 34:20.110
debounce

34:20.710 --> 34:22.310
sets那个城

34:23.210 --> 34:25.210
反正它绑进到sets的不用担心啊

34:25.210 --> 34:27.310
反正回到新的寒树没问题

34:27.810 --> 34:28.710
然后呢

34:30.110 --> 34:32.310
运行那个这里

34:32.610 --> 34:34.410
第二参数呢我给他传个时间吧

34:34.410 --> 34:35.110
比方说

34:35.810 --> 34:36.410
300毫秒

34:36.510 --> 34:38.010
300毫秒之内啊

34:38.010 --> 34:38.910
我都不做处理

34:38.910 --> 34:40.510
300毫秒之后没有动静了

34:40.510 --> 34:41.210
我在做处理

34:41.510 --> 34:43.310
是不是反回一个新的寒树啊

34:43.310 --> 34:44.210
反回新的寒树

34:44.210 --> 34:45.510
我就给他叫做

34:47.210 --> 34:49.710
sets那个是debounce吧

34:50.710 --> 34:51.410
debounce

34:52.710 --> 34:54.110
好我们把这个寒树扔进去

34:54.910 --> 34:55.710
你看一下吧

34:56.610 --> 34:58.210
保存啊这里有输出啊

34:58.210 --> 34:59.210
看一下有输出

34:59.610 --> 35:00.110
放心

35:02.410 --> 35:03.410
往下走往下走

35:03.410 --> 35:04.810
你看是不是没有没有输出

35:05.210 --> 35:06.410
300毫秒之后才有输出

35:06.410 --> 35:06.810
你看

35:08.710 --> 35:10.210
这样子没有输放那么平方的啊

35:10.210 --> 35:11.910
但300毫秒确实是太长了

35:11.910 --> 35:13.210
我给他用50毫秒吧

35:20.860 --> 35:21.460
看这

35:23.160 --> 35:23.660
看这

35:25.060 --> 35:25.460
是吧

35:25.960 --> 35:26.660
就挺好了

35:27.360 --> 35:27.960
那么当然了

35:27.960 --> 35:29.160
你还要不要忘记了

35:29.160 --> 35:30.960
就是当这个组建销毁的时候呢

35:30.960 --> 35:33.160
你要从事件总线上不要去监听了

35:33.660 --> 35:34.660
你这组建销销毁了

35:34.660 --> 35:35.760
你还监听他干嘛呢

35:36.260 --> 35:37.260
所以说到时候呢

35:37.260 --> 35:38.160
我们destroy的

35:41.420 --> 35:42.820
当这种情况的时候

35:43.520 --> 35:45.620
我要从事件总线上把它移除掉

35:46.120 --> 35:46.920
是不是要用off

35:48.420 --> 35:49.120
移除掉

35:49.120 --> 35:50.820
那么这个地方那个寒树跑哪去了

35:50.820 --> 35:53.520
那这个寒树那里可以暂时保存一下吗

35:53.920 --> 35:55.020
保存一下对不对

35:55.720 --> 35:56.720
暂时保存一下

35:58.020 --> 35:59.920
ok 那么就保存到这吧

35:59.920 --> 36:00.520
这也是里面

36:00.520 --> 36:01.320
那么这里

36:01.320 --> 36:02.820
这里是里面把移除掉

36:03.120 --> 36:03.620
ok

36:04.620 --> 36:05.920
好 那么这里呢

36:05.920 --> 36:06.620
刷新

36:07.920 --> 36:09.120
他们抱错了啊

36:09.920 --> 36:11.120
这是那个体子

36:12.620 --> 36:13.720
哦 这里用这个

36:15.120 --> 36:15.620
刷新

36:19.090 --> 36:20.690
好 那么现在就没什么问题了啊

36:21.090 --> 36:22.290
其实还有一些小的问题

36:22.290 --> 36:22.890
比方说

36:23.490 --> 36:24.490
你像这个玩意儿

36:24.890 --> 36:26.290
这个玩意儿有某链接对吧

36:26.290 --> 36:27.690
那么按你说有某链接的话

36:27.690 --> 36:28.690
我刷新页面

36:29.090 --> 36:30.890
他应该自动挑到某链接的位置

36:30.890 --> 36:32.090
那现在挑了吗

36:32.090 --> 36:33.290
是不是没有挑啊

36:33.890 --> 36:34.890
是不是没有挑

36:34.890 --> 36:36.490
那为什么没有挑呢

36:37.290 --> 36:38.590
现在为什么没有挑呢

36:38.990 --> 36:40.190
没有挑的原因

36:40.190 --> 36:41.990
是因为我现在刷新过后了

36:41.990 --> 36:43.190
他本来想挑的

36:43.190 --> 36:45.090
那这个页面一开始是没有动物元素的

36:45.090 --> 36:46.690
你看一开始是在夹带中

36:46.690 --> 36:47.590
他没有这个A型

36:47.590 --> 36:49.390
没有这个id对应的元素

36:49.390 --> 36:50.590
他想挑挑不过去

36:50.590 --> 36:52.290
等他有那个id的元素的时候了

36:52.290 --> 36:53.190
他就不挑了

36:53.190 --> 36:54.390
因为之前已经跳过了

36:54.790 --> 36:55.690
浏览器的机制呢

36:55.690 --> 36:57.090
就是刚刚刷新页面的时候

36:57.090 --> 36:58.690
就刚刚把动物元素夹在完了

36:59.690 --> 37:01.590
啊就是window undo的啊

37:01.590 --> 37:03.390
或者是把动物动物元素夹在完了

37:03.490 --> 37:04.390
他就开始挑了

37:04.990 --> 37:06.390
但是那动物元素夹在完了过后

37:06.490 --> 37:07.090
啥都没有

37:07.590 --> 37:09.090
其实动物元素他里面有啥呀

37:09.190 --> 37:11.290
他只有这个只有一个div id为app

37:11.490 --> 37:12.290
他能跳吗

37:12.790 --> 37:13.690
虽然有这个id

37:13.690 --> 37:14.790
有这个某链接他能跳吗

37:14.790 --> 37:15.990
没有这个元素啊

37:15.990 --> 37:17.190
等他把元素夹在过后了

37:17.190 --> 37:18.590
过后呢他就已经补跳了

37:18.690 --> 37:19.690
他已经跳过了

37:20.390 --> 37:21.690
所以说我这里要干嘛呀

37:21.890 --> 37:23.490
其实我要做的事情就是

37:24.190 --> 37:25.690
当你界面更新之后啊

37:25.690 --> 37:27.090
就一开始夹带数据嘛

37:27.090 --> 37:28.390
远程夹带数据要等一会

37:28.490 --> 37:29.890
等他数据夹带完成过后

37:29.890 --> 37:31.190
是不是动物元素又形成了

37:31.490 --> 37:33.890
生成了动物元素更新的界面之后啊

37:34.690 --> 37:36.090
我们把这个哈希纸呢

37:37.190 --> 37:38.190
先改成这个

37:38.790 --> 37:39.790
再改回这个

37:40.890 --> 37:41.990
就是因为改动哈希

37:41.990 --> 37:43.990
他会导致浏览器重新跳转

37:44.290 --> 37:44.890
因此呢

37:44.990 --> 37:45.890
达到这个效果

37:46.390 --> 37:46.990
那怎么玩呢

37:46.990 --> 37:47.590
这个事情

37:47.890 --> 37:48.590
我们可以呢

37:48.590 --> 37:50.190
在这个detail组件里面啊

37:51.090 --> 37:53.090
给他注册一个生命组织函数app

37:53.490 --> 37:54.690
当界面更新之后

37:55.090 --> 37:55.790
什么时候更新呢

37:55.790 --> 37:56.790
因为我们这个组件

37:57.090 --> 37:57.790
非常清楚

37:57.890 --> 37:58.890
行李边门新

38:00.790 --> 38:01.490
什么时候更新呢

38:01.490 --> 38:03.090
就是数据夹带完成过后

38:03.290 --> 38:03.690
对吧

38:03.690 --> 38:04.990
他又会更新这个数据

38:04.990 --> 38:05.790
更新数据呢

38:05.890 --> 38:07.190
导致组件刷新

38:07.990 --> 38:08.590
两个问题吧

38:08.690 --> 38:09.790
那么接下来呢

38:09.790 --> 38:10.490
我就是

38:11.690 --> 38:12.690
update的啊

38:13.090 --> 38:13.890
在这里边

38:15.870 --> 38:17.570
把原来的哈希纸

38:19.270 --> 38:20.770
之前的哈希纸保存一下

38:21.070 --> 38:21.470
然后呢

38:21.470 --> 38:22.870
把这个哈希纸清空

38:23.570 --> 38:24.470
先变成空的

38:24.870 --> 38:25.870
先干清空

38:26.070 --> 38:26.670
然后呢

38:26.670 --> 38:27.470
过一会啊

38:27.470 --> 38:28.670
当然你要等一会

38:28.670 --> 38:30.270
你不能马上又改回去的话

38:30.270 --> 38:31.070
你没有什么效果了

38:31.070 --> 38:32.870
因为浏览器的渲染速度呢

38:32.870 --> 38:34.070
是要比较慢一点的啊

38:34.970 --> 38:35.770
我们这里呢

38:35.770 --> 38:36.970
等待一段时间吧

38:36.970 --> 38:38.070
不要等待50毫秒

38:38.570 --> 38:39.870
再把nok新的哈希纸呢

38:39.870 --> 38:41.670
改成之前那个

38:42.070 --> 38:42.870
就完事了

38:43.670 --> 38:44.670
好刷新你看

38:47.060 --> 38:48.060
哎跳过去了

38:49.060 --> 38:50.560
好就这么一个意思啊

38:50.560 --> 38:51.360
就这么一个意思

38:52.260 --> 38:52.960
好那么这里边

38:52.960 --> 38:54.760
你看这些东西就做的差不多了啊

38:55.860 --> 38:57.160
看一下还有什么东西呢

38:57.960 --> 38:58.760
点评论

39:00.060 --> 39:01.060
点评论啊

39:01.060 --> 39:01.960
这个没问题

39:03.060 --> 39:04.260
点分类

39:04.760 --> 39:06.860
哦这个点分类这个链接还没做啊

39:07.360 --> 39:08.760
分类这个链接好像在哪啊

39:08.760 --> 39:10.060
在这顺便弄了吧

39:10.060 --> 39:12.760
把这些之前有问题的地方啊

39:12.760 --> 39:14.260
这里我们用router link

39:15.660 --> 39:16.060
link

39:17.260 --> 39:18.460
这里要用to了对吧

39:19.860 --> 39:20.660
挑宝到分类

39:20.660 --> 39:22.760
这是我们之前写的那个路由啊

39:22.760 --> 39:24.660
这一块就是没什么新知识了啊

39:25.660 --> 39:26.460
分类

39:27.160 --> 39:28.160
taskary blog

39:29.660 --> 39:31.460
给他一个params

39:32.260 --> 39:35.160
这个params

39:35.860 --> 39:36.660
分类id

39:37.360 --> 39:38.860
taskary id

39:39.060 --> 39:39.960
应该等于什么呢

39:40.060 --> 39:40.660
blog

39:41.660 --> 39:43.460
taskary id

39:43.460 --> 39:44.760
啊应该是没问题的

39:45.160 --> 39:46.260
保存再看一下

39:47.360 --> 39:48.560
哦这里不能用双也好

39:52.170 --> 39:53.170
好点分类商

39:54.470 --> 39:54.970
你看

39:55.270 --> 39:56.170
挑到分类商了

39:56.470 --> 39:57.370
好ok啊

39:58.570 --> 39:59.770
这就是详情业啊

39:59.770 --> 40:01.170
这个激活状态的处理

40:02.370 --> 40:03.570
好这个问题搞定了

40:05.170 --> 40:13.270
没问题啊

40:13.370 --> 40:13.970
这个问题搞定了

40:13.970 --> 40:14.970
那么剩下的事情呢

40:14.970 --> 40:15.670
就是评论

40:16.070 --> 40:17.970
就是滚动下方的时候呢

40:17.970 --> 40:19.470
这个评论这里啊

40:19.670 --> 40:20.970
转圈圈啊

40:20.970 --> 40:22.570
这里这个网友怎么做呢

40:22.570 --> 40:23.570
我们下期可再说

