WEBVTT

00:00.000 --> 00:05.440
好了 这节课呢 我们将会学习到一个极其重要的知识

00:05.440 --> 00:13.240
就是路由 我们可以看到我们上节课呢 已经布局成了这个样子了

00:13.240 --> 00:19.400
然后呢 我们现在要切换切换到不同的页面 什么叫页面呢

00:19.400 --> 00:24.320
一个页面的概念呢 我再解释解释啊 我们从直观上来讲

00:24.320 --> 00:27.920
我们在这个网站里边切换页面 实际上切换哪个区域啊

00:28.040 --> 00:31.960
是不是就切换这个区域啊 你看我们这边啊 左边是不动的对吧

00:32.640 --> 00:39.240
切换来切换去啊 都是切换那个这块区域 你看文章也是切换这块区域 只是这块区域变化

00:40.080 --> 00:44.040
其实呢 你们以后呢 在别的项目里边也会发生类似的事情

00:44.720 --> 00:48.800
比方顶部的导航栏不变 夜角不变 就中间这个区域变化

00:49.920 --> 00:54.440
或者是呢 整个页面全部变完了都有可能啊 无论是怎么变 总之呢 是有一块区域

00:54.920 --> 00:59.560
在变化 那么不同的区域呢 而不同的变 这个区域不同的东西呢 就是不同的页面

01:00.520 --> 01:06.440
在我们过去啊 传统的工程里边 一个页面呢 其实就是一个ATM文件

01:06.960 --> 01:11.400
比方说我们首页可能就是这个页面啊 然后呢 我们的文章页可能就是blog ATM

01:12.040 --> 01:17.240
然后呢 我们的关于我们呢 就是about ATM 对吧 不同的页面呢 可能就是一个不同的ATM文件

01:18.160 --> 01:20.600
但是呢 现在我们用五又做开发

01:21.560 --> 01:25.480
我们要做的是什么呢 单页应用程序 什么叫单页呢 只有一个页面

01:27.080 --> 01:31.320
只有一个页面 从来到位都只有这个页面 你看我们的网页元代嘛

01:32.280 --> 01:36.280
始终是这个元代嘛 一个DIV里边啥都没有 全靠GS

01:36.760 --> 01:42.200
在这个DIV里面构建 你可以回忆一下啊 我们第一届课 咱们这个课程第一届课讲的东西

01:43.240 --> 01:46.520
什么叫单页应用程序 全是GS在切换这个区域

01:47.480 --> 01:53.400
但是呢 抽象来讲啊 概念上呢 我们也把它叫做页面 只不过呢 这个页面呢 不再是我们传统的ATM页面

01:54.600 --> 01:57.480
那么是什么呢 那这个区域到底是啥呢 其实

01:58.360 --> 02:04.280
就是一个组件 我们在五又里边切换页面 实际上是切换什么呢 切换的就是一个组件

02:04.840 --> 02:05.480
就这么简单

02:06.920 --> 02:10.440
好 那么也就是说 我们这一块区域啊 中间这一块区域

02:11.160 --> 02:13.320
实际上 它代表着不同的页面

02:13.880 --> 02:19.000
实际上呢 每个页面呢 就是一个组件 因此呢 我们在我们的工程结构里边呢 可以在src里边

02:19.800 --> 02:24.440
新建一个文件夹 那有东西说 那我把页面建到这个component里面 行不行呢 可以

02:25.240 --> 02:25.960
没有什么问题

02:27.000 --> 02:33.080
不过呢 这个从目录结构来说的话啊 看上去不是很好啊 所以说我们通常呢

02:33.560 --> 02:35.640
由于页面组件啊 还比较特殊

02:36.200 --> 02:40.680
它是一个很大的很大的组件 至少区域上很大 对吧 所以说呢 我们

02:41.240 --> 02:46.520
由于概念上的不一样啊 所以说我们还是区分一下 在新建个文件夹 我们给它取个名字叫伍佑

02:47.880 --> 02:49.080
加个意思吧 伍佑是

02:50.120 --> 02:57.000
表示的是啊 我这里呢 伍佑呢 伍佑就是一个仕图啊 一个仕图就是一个页面 当然你也可以把它命名为配纸是也可以

02:57.640 --> 03:02.120
啊 无所谓的 看你们公司的约定版文 伍佑里面通常的就是写的是伍佑是

03:02.840 --> 03:07.000
好 那么新建个文件啊 比方说我们首页的话 我们可以建一个home

03:07.160 --> 03:15.000
叫伍佑文件 那么这就是一个首页的页面 当然那你也可以按照我们刚之前的做法啊 新建个文件夹home

03:15.720 --> 03:24.120
表示首页 首页里面新建一个index 讲伍佑 对吧 因为读这个文件夹的话 默认就读的是它 也可以啊 无所谓 看你们公司吧

03:24.600 --> 03:28.760
因为这是我个人比较喜欢的一种做法啊 一个文件夹

03:29.320 --> 03:35.240
里面新建一个index 讲伍佑 那表示的是我们首页啊 来 写一个 随便写一个啊 就首页

03:37.320 --> 03:40.280
好 然后呢 同样道理呢 我们可以建立 建立起一些

03:42.680 --> 03:46.040
建立一些其他的页面啊 比方说我们建立一个呃

03:46.920 --> 03:48.120
关于 about

03:51.640 --> 03:57.770
关于我 诶 这个什么没了 首页

04:00.250 --> 04:06.730
好 首页关于还有什么呢 呃 还有文章项目效果和留言吧

04:08.170 --> 04:12.890
来 体内话啊 把剑建起来 文章log吧

04:14.810 --> 04:16.810
新建一个吧 英特尔首页

04:19.350 --> 04:20.790
呃 这是文章页

04:24.170 --> 04:26.570
然后呢 是项目project

04:29.530 --> 04:33.930
英特尔首页 你看这个组件本质上跟起 之前跟component组件是没有什么区别的 对吧

04:34.010 --> 04:37.530
有什么区别的 没有什么区别 只分放了文件 也不一样 区分一下而已

04:38.010 --> 04:39.450
啊 这是项目

04:40.250 --> 04:40.650
效果

04:41.770 --> 04:48.410
啊 这个地方我们 呃 再来

04:49.450 --> 04:52.570
还有一个就是留言吧 message

04:55.510 --> 04:56.070
index

04:59.430 --> 05:00.230
留言吧

05:00.870 --> 05:06.390
好了 我们把这各种页面的组件都建起来了 那么现在问题来了

05:07.750 --> 05:12.390
问题就在哪呢 在我们的这个区 这个区在哪里写的 是不是在app里边写的啊

05:12.470 --> 05:16.630
在这里边写的 那么这里涉及到一个问题 这里要宣传哪个组件呢

05:17.350 --> 05:19.110
我到底是把home组件放这

05:19.830 --> 05:24.470
还是把那个blog组件放这 还是把message组件放这 到底把哪个组件放这呢

05:25.430 --> 05:27.030
逻辑是什么呢

05:27.670 --> 05:28.950
看着我们的课件

05:31.050 --> 05:32.170
我们的逻辑是

05:32.810 --> 05:35.850
我们希望根据页面不同的地址

05:36.810 --> 05:38.410
就是你访问的是什么地址

05:39.450 --> 05:43.770
你无论访问什么地址 我都是统一个页面对吧 只有一个页面 一定那个时候掉atmail

05:44.890 --> 05:49.210
我就用ts给你宣传出不同的组件放到这个区域

05:50.010 --> 05:52.490
对不对 比方你访问这个地址我就给你宣传博客组件

05:52.970 --> 05:55.050
你访问一个鞋钢 那我就访问宣传手艺

05:55.610 --> 05:56.410
就这么个意思

05:57.130 --> 05:58.890
因此呢 我们这里就会产生三个问题

06:01.450 --> 06:05.930
第一个问题 如何来根据地址不同的地址 地址不一样 我就宣传不同的组件

06:06.170 --> 06:06.970
这个该怎么去做

06:07.530 --> 06:08.170
第二个问题

06:09.610 --> 06:12.010
我宣传 根据这个地址找到这个组件了

06:12.490 --> 06:15.050
那我把这个组件放到哪个区域 放到这呢

06:15.450 --> 06:16.890
还是覆盖整个区域呢

06:17.370 --> 06:18.970
还是说放到这呢 我也

06:19.450 --> 06:23.450
当然我们目前看得清楚啊 应该放到这 那大一马上怎么来表达呢

06:24.010 --> 06:26.250
怎么让程序知道你要放到这个区域呢

06:26.730 --> 06:30.410
对吧 就是说 我怎么让程序知道要切换这个区域呢

06:30.650 --> 06:31.530
对吧 这是第二个问题

06:31.850 --> 06:32.890
要高速程序啊

06:33.210 --> 06:34.010
第三个问题

06:34.970 --> 06:38.970
如何无刷新的切换组件 比方说我们电这个导航点了过后

06:39.290 --> 06:40.330
这个区域就变了

06:41.130 --> 06:42.490
并且呢页面不要刷新

06:42.810 --> 06:44.970
因为一刷新的话没有必要

06:44.970 --> 06:47.290
你又全部去重新请求这个atmail

06:47.450 --> 06:49.050
因为全部重新请求GS

06:49.290 --> 06:51.610
然后呢又重新全部运行是GS啊

06:51.610 --> 06:53.690
因为页面一刷新全部要重来一次

06:53.690 --> 06:54.570
从这里开始

06:54.810 --> 06:56.010
全部要重新运行是

06:56.170 --> 06:58.730
没有必要 我们只需要切换这个区域就行了

06:58.890 --> 07:00.330
能够更好的提高效率

07:00.890 --> 07:02.570
这些都是我们这几颗要解决的问题

07:02.730 --> 07:03.930
这一颗内容有点多啊

07:03.930 --> 07:05.210
因为有大量的新的知识

07:05.530 --> 07:06.490
也在这一颗呢

07:07.770 --> 07:09.930
代码没几行 其实没有几行代码

07:11.130 --> 07:12.890
但是道理 大道理一大堆

07:12.890 --> 07:14.490
为什么要讲这些道理呢

07:15.450 --> 07:17.610
不然的话我只是把代码告诉你们

07:17.610 --> 07:18.730
你们也不知道什么意思

07:18.970 --> 07:20.570
而且将来呢如果说稍微变一下

07:20.570 --> 07:22.010
你又不知道怎么办了

07:22.010 --> 07:23.770
所以一定要把原理理解清楚

07:24.570 --> 07:25.930
那么要解决这些问题呢

07:26.650 --> 07:28.170
我们自己可不可以熟悉代码

07:28.170 --> 07:30.410
可以啊 将来呢我给大家讲一讲

07:30.410 --> 07:32.090
我们自己熟悉应该怎么做

07:32.490 --> 07:34.090
那么但是呢我们更多的时候

07:34.090 --> 07:36.010
在工程里面往往是使用的是

07:36.010 --> 07:38.330
别人已经写好的一个五又插件

07:38.810 --> 07:40.730
哎 五又是可以安装插件的啊

07:40.730 --> 07:42.010
我们之前都没有用过插件

07:42.010 --> 07:44.250
那么这里头我们会用到第一个五又插件

07:44.570 --> 07:45.530
就是路由插件

07:46.410 --> 07:48.250
路由的根本意识是什么意思呢

07:48.250 --> 07:49.610
其实就是根据不同的地址

07:49.610 --> 07:50.570
不同的路径

07:50.570 --> 07:51.690
然后得到不同的东西

07:52.650 --> 07:54.090
那么这里头就是得到不同的组件

07:54.810 --> 07:56.170
这就是路由的本质意识

07:56.490 --> 07:57.930
好 那么要使用这个插件呢

07:57.930 --> 07:59.050
我们首先要安装它

08:00.410 --> 08:01.530
找到我们的工程啊

08:02.410 --> 08:03.530
把它停止

08:05.780 --> 08:07.380
好 首先呢我们安装一下

08:08.260 --> 08:08.660
路由

08:09.540 --> 08:10.820
名字叫做五又rotor

08:13.560 --> 08:14.360
好 安装一下啊

08:17.990 --> 08:19.350
好 安装好了 我们起庄起来

08:19.430 --> 08:20.550
NP的装饰

08:21.030 --> 08:23.510
刚刚安装好了这个依赖过后呢

08:23.510 --> 08:24.150
它有没有效果了

08:24.150 --> 08:24.870
没有效果对吧

08:24.870 --> 08:25.830
你并没有用它

08:25.830 --> 08:27.670
所以说效果了还是没变

08:28.150 --> 08:29.590
那么接下来我们一步不来啊

08:30.470 --> 08:33.430
首先呢我们怎么来用这个路由呢

08:34.630 --> 08:35.910
要说说做这么几件事

08:36.390 --> 08:38.790
第一件事我们找到了这个启动文件啊

08:39.510 --> 08:40.550
启动文件里边

08:40.550 --> 08:42.390
我们在创建五又实力之前

08:42.950 --> 08:44.870
我们就首先要应用这个插件

08:44.870 --> 08:45.910
怎么应用呢

08:45.910 --> 08:47.590
就是使用这个五又的构造函数

08:47.590 --> 08:48.950
里边提供了一个静态方法

08:49.750 --> 08:50.550
叫U

08:50.550 --> 08:51.590
这个U是什么意思啊

08:51.590 --> 08:52.550
就是使用插件

08:53.830 --> 08:55.750
使用一个五又插件

08:56.470 --> 08:57.830
那么这个插件里边

08:57.830 --> 08:59.270
传的是一个插件对象

08:59.270 --> 09:00.470
那个插件对象是啥呢

09:00.950 --> 09:02.150
其实就是那个五又rotor

09:02.150 --> 09:03.510
我们把五又rotor导入进来

09:04.310 --> 09:05.590
五又rotor

09:06.870 --> 09:08.470
五又rotor导入进来

09:09.750 --> 09:10.950
就把这个东西传进去

09:10.950 --> 09:11.350
OK

09:12.150 --> 09:13.670
这就是使用一个五又插件

09:13.670 --> 09:14.150
简不简单

09:14.710 --> 09:15.350
特别简单吧

09:15.910 --> 09:17.590
你看我这里其实都没写了

09:17.590 --> 09:18.390
使用五又插件

09:19.830 --> 09:20.870
那么这个插件

09:20.870 --> 09:22.630
光使用这个插件还不够

09:23.670 --> 09:25.190
你还要去做一些事

09:25.910 --> 09:26.470
这样子写

09:27.910 --> 09:28.550
这个东西呢

09:28.550 --> 09:29.830
实际上是一个构造函数

09:29.830 --> 09:30.870
我们通过六

09:30.870 --> 09:33.030
来创建一个五又rotor的构造函数

09:33.590 --> 09:35.510
那么这里边要填一些配置

09:35.510 --> 09:36.870
我们先暂时不写配置

09:36.870 --> 09:37.670
这里写的是配置

09:38.230 --> 09:39.030
我们先暂时不写

09:39.670 --> 09:40.790
那么它会得到一个

09:41.590 --> 09:42.390
rotor的实力

09:44.700 --> 09:45.100
rotor

09:45.740 --> 09:47.020
就是路由的实力

09:47.020 --> 09:48.780
我们需要把这个路由的实力呢

09:48.780 --> 09:50.620
配置到五又里边去

09:50.940 --> 09:52.860
现在是不是五又里边多了一个配置

09:52.860 --> 09:53.740
叫做rotor

09:53.740 --> 09:54.860
咱们来记录一下

09:55.500 --> 09:56.940
五又里边多了一个配置的

09:58.140 --> 09:58.780
就是rotor

10:00.700 --> 10:03.100
配置五又路由

10:04.540 --> 10:05.340
就非常简单

10:05.340 --> 10:07.500
你先把那个创建的路由对象

10:07.500 --> 10:08.540
配置到这就完事了

10:09.340 --> 10:10.300
配置五又路由

10:11.180 --> 10:12.060
一切就完成了

10:13.180 --> 10:13.980
使用了插件

10:13.980 --> 10:15.580
然后把路由配置的进去

10:15.580 --> 10:16.780
按照这个写就OK

10:17.660 --> 10:19.580
那么写完了过后有什么效果吗

10:21.100 --> 10:21.580
创新

10:21.580 --> 10:23.500
你看现在简单什么都看不见了

10:23.500 --> 10:24.220
什么都看不见了

10:24.220 --> 10:25.980
那么它现在包了一个

10:27.020 --> 10:28.220
它这里包了个什么

10:28.220 --> 10:29.660
use is not a function

10:32.170 --> 10:32.570
它说

10:34.410 --> 10:36.010
怎么写APP去了

10:36.010 --> 10:36.970
五又有点优势

10:36.970 --> 10:38.170
五又有点优势

10:38.170 --> 10:38.970
我说怎么回事

10:39.690 --> 10:39.930
OK

10:40.490 --> 10:41.050
有效果吗

10:41.050 --> 10:42.330
没有任何效果

10:42.330 --> 10:43.290
为什么没有效果呢

10:43.930 --> 10:45.290
它还有很多信心

10:45.290 --> 10:46.330
它不知道

10:46.330 --> 10:47.770
根本就不知道你要干嘛

10:47.770 --> 10:50.810
我现在指数系统里边有了五又这个插件了

10:51.530 --> 10:52.170
应用了插件了

10:52.170 --> 10:52.730
但是呢

10:52.730 --> 10:54.170
我怎么来去显示

10:54.170 --> 10:54.570
不知道

10:54.570 --> 10:56.170
你看它还有这些信息知道吗

10:56.170 --> 10:56.730
一个都不知道

10:57.450 --> 10:58.730
我怎么来根据不同的地址

10:58.730 --> 10:59.770
来匹配不同的组件

11:00.330 --> 11:01.050
你要告诉它

11:01.050 --> 11:02.330
这个地址匹配哪个组件

11:02.330 --> 11:03.050
你要告诉它

11:03.050 --> 11:04.570
你没有告诉它怎么知道匹配了

11:05.210 --> 11:06.890
它现在至少有匹配的能力了

11:06.890 --> 11:08.250
但是没有告诉它怎么去匹配

11:08.970 --> 11:10.410
另外一个匹配到了过后

11:10.410 --> 11:11.450
它发到哪个区域呢

11:11.450 --> 11:12.010
也不知道

11:12.570 --> 11:14.250
所以说它还有很多信息不知道

11:14.890 --> 11:16.570
那接下来怎么办呢

11:16.570 --> 11:17.450
我们要讲一下

11:17.450 --> 11:18.890
这个路由的基本使用

11:19.370 --> 11:20.890
就是把那些信息告诉它

11:22.090 --> 11:24.250
首先用两个关键信息要告诉它

11:24.810 --> 11:25.690
第一个关键信息呢

11:25.690 --> 11:29.530
就是什么路径匹配什么样的组件

11:29.530 --> 11:30.810
你这个信息必须要告诉它

11:31.530 --> 11:33.130
那么这个信息怎么来告诉它呢

11:33.130 --> 11:33.770
就写到这

11:34.570 --> 11:35.370
写到配置这里

11:36.970 --> 11:38.570
那么这个配置这里怎么写的

11:38.570 --> 11:40.330
它里面包含了一个配置叫做road

11:41.130 --> 11:42.330
有这个配置

11:42.330 --> 11:43.130
这个是什么配置呢

11:43.130 --> 11:44.010
就是路由配置

11:44.010 --> 11:45.130
这个配置是一个数组

11:46.570 --> 11:47.850
就是路由配置

11:47.930 --> 11:49.050
为什么是一个数组呢

11:49.530 --> 11:52.410
每数组里面每一项就是一个规则

11:53.050 --> 11:53.930
什么叫规则

11:53.930 --> 11:55.850
就是什么路径对应什么组件

11:55.850 --> 11:57.130
什么路径对应什么组件

11:57.610 --> 11:58.330
就是一个规则

11:59.210 --> 12:01.130
好那么咱们这里怎么来写呢

12:01.130 --> 12:02.650
规则一个规则就是一个对象

12:04.170 --> 12:05.290
比方说第一个规则

12:05.290 --> 12:06.490
我给它写一个pass

12:07.050 --> 12:08.730
当你访问这样的路径的时候

12:08.730 --> 12:09.210
一个鞋杠

12:09.690 --> 12:11.050
我们的路径是一个鞋杠的时候

12:11.690 --> 12:13.210
那么匹配到什么组件呢

12:13.210 --> 12:14.090
component

12:14.970 --> 12:16.090
匹配到的一个组件

12:16.090 --> 12:16.650
这个组件呢

12:16.650 --> 12:17.610
让我们导入进来

12:18.490 --> 12:20.570
比方说这里我们导入 import

12:21.450 --> 12:25.050
导入一个 home

12:26.010 --> 12:26.490
from

12:26.890 --> 12:27.450
铁鞋杠

12:28.090 --> 12:28.810
component

12:29.530 --> 12:30.890
优优

12:31.850 --> 12:32.170
home

12:33.050 --> 12:33.530
对吧

12:33.530 --> 12:34.490
是不是达到这个组件了

12:34.490 --> 12:35.530
我给你把组件放这

12:36.250 --> 12:37.290
告诉优优

12:37.450 --> 12:38.970
当我访问这样路径的时候

12:38.970 --> 12:40.090
你给我匹配这个组件

12:40.730 --> 12:42.410
好那么这个规则是不是一共有五个

12:43.850 --> 12:44.970
一个是什么 about

12:46.890 --> 12:47.450
那么这里

12:47.530 --> 12:48.410
我也写了五个

12:51.210 --> 12:51.690
about

12:52.730 --> 12:53.370
然后呢

12:53.690 --> 12:54.090
blog

12:55.610 --> 12:56.250
project

12:56.890 --> 12:58.410
是不是我们都是我们的叶遍组件

12:59.210 --> 12:59.930
还有就是

13:00.970 --> 13:01.690
message

13:01.930 --> 13:02.810
这个能力下来吧

13:03.690 --> 13:04.170
about

13:05.050 --> 13:05.530
blog

13:06.410 --> 13:06.970
project

13:08.810 --> 13:09.370
message

13:10.490 --> 13:12.490
好了那么这里把这些组件放过来

13:16.980 --> 13:17.860
放过来

13:19.140 --> 13:20.100
放过来

13:20.100 --> 13:20.580
好

13:20.580 --> 13:21.700
然后给它定一下路径

13:22.340 --> 13:22.980
message

13:23.460 --> 13:24.100
blog

13:25.860 --> 13:26.980
跟路径随便定

13:27.460 --> 13:28.100
project

13:30.020 --> 13:30.500
message

13:31.940 --> 13:32.580
好你看

13:32.580 --> 13:33.780
这里配置好了路由了

13:34.820 --> 13:38.020
不同的访问路径匹配不同的组件

13:38.980 --> 13:39.620
写完了吗

13:39.620 --> 13:41.140
那么这个配置就写好了

13:41.140 --> 13:42.180
能路由的配置

13:43.700 --> 13:44.660
好在我们的刷新一下

13:44.660 --> 13:45.540
看一下有效果吗

13:45.540 --> 13:46.660
还是没效果

13:46.660 --> 13:47.620
为什么还是没效果呢

13:47.620 --> 13:49.060
还有些信息不知道啊

13:49.060 --> 13:50.020
还有什么信息

13:50.020 --> 13:51.140
现在能不能匹配了

13:51.140 --> 13:51.780
能匹配了

13:52.420 --> 13:53.380
匹配到方哪了

13:53.380 --> 13:54.340
他不知道方哪对吧

13:54.340 --> 13:55.620
把这个组件放哪了

13:55.620 --> 13:56.580
他不知道我哪里放

13:57.540 --> 13:59.220
那么我们这个方哪怎么写呢

13:59.780 --> 14:00.740
那么我们要找了

14:01.220 --> 14:02.900
Madele接式启动的是哪个组件

14:02.900 --> 14:04.100
启动的是它对不对

14:04.100 --> 14:05.140
在宣展的是它

14:05.140 --> 14:07.140
在无忧的宣展过程中

14:07.140 --> 14:09.460
它只要宣展到一个特殊的组件

14:10.020 --> 14:10.420
叫做

14:12.420 --> 14:13.220
rotor view

14:13.860 --> 14:15.460
只要宣展到这个组件的时候

14:16.020 --> 14:18.580
那么就表示这个区域是一个站位区域

14:19.060 --> 14:20.340
它将会路由了

14:20.340 --> 14:21.540
将会把匹配到的组件

14:21.780 --> 14:22.820
放到这个位置

14:22.820 --> 14:23.860
它就是个站位

14:23.860 --> 14:25.860
有点类似于插槽

14:25.860 --> 14:27.700
实际上内部的就是使用了插槽

14:28.500 --> 14:30.500
我们不需讲它内部的怎么去实现

14:30.500 --> 14:31.940
那是我们后边的东西

14:31.940 --> 14:32.740
以后我们

14:33.620 --> 14:34.820
进阶的时候咱们再说

14:35.700 --> 14:37.060
那么现在我们就可以认为

14:37.060 --> 14:37.860
只要匹配到的组件

14:37.860 --> 14:38.740
它就放到这个位置

14:39.140 --> 14:40.900
那么我们看一下这个中间组区

14:40.900 --> 14:42.020
这个区域是不是就说

14:42.020 --> 14:43.220
我们要放我们什么

14:43.220 --> 14:45.140
放我们匹配到的页面组件

14:45.860 --> 14:46.900
因此这里可以怎么写

14:47.380 --> 14:49.780
可以就是一个rotor view

14:50.500 --> 14:51.380
又要同学说了

14:52.340 --> 14:53.620
老师你这里为什么

14:54.660 --> 14:55.860
没有去注册组件呢

14:56.740 --> 14:58.820
是因为你在安装这个插件的时候

14:59.220 --> 14:59.940
把这个插件

15:00.580 --> 15:01.940
当我们使用了这个优势

15:01.940 --> 15:02.980
使用了这个插件过后

15:02.980 --> 15:05.220
它就给你全局注册了一个组件

15:06.420 --> 15:07.300
就是rotor view

15:07.300 --> 15:08.340
它是全局组件

15:09.140 --> 15:10.660
那么这个组件谁提供了

15:10.660 --> 15:11.380
就它提供了

15:12.340 --> 15:13.460
因此呢你可以直接使用

15:13.460 --> 15:14.660
全局组件可以直接使用了

15:14.660 --> 15:14.900
对吧

15:15.860 --> 15:17.060
好那么这是一种写法

15:17.060 --> 15:18.260
当然它也可以用什么

15:18.420 --> 15:19.860
短红线命名法都可以

15:19.860 --> 15:20.820
我现在这样子写

15:20.820 --> 15:22.660
也可以用这种方式rotor view

15:22.660 --> 15:24.740
以后你可能看到这种方式

15:24.740 --> 15:25.620
稍微多一点

15:27.220 --> 15:28.500
这是官方稳当

15:28.500 --> 15:30.980
官方那个势力里面用的是这种写法

15:30.980 --> 15:32.340
所以说市面上的这种写法

15:32.340 --> 15:33.060
可能要多一点

15:33.060 --> 15:34.580
但是我个人比较喜欢

15:34.580 --> 15:35.380
妥封命名法

15:35.380 --> 15:36.580
看得自己都一样

15:37.300 --> 15:38.740
好保存咱们来看一下

15:40.100 --> 15:40.820
是不是首页了

15:42.020 --> 15:42.420
你看啊

15:42.980 --> 15:44.420
当我们一开始访问的路径

15:44.420 --> 15:45.780
是斜纲的时候是不是就首页

15:47.220 --> 15:47.780
对不对

15:47.940 --> 15:49.940
这一块你看这个逻辑是不是通了

15:49.940 --> 15:51.380
就基本上使用非常简单

15:51.380 --> 15:52.260
这个逻辑是不是通了

15:52.740 --> 15:54.740
请求不同的路径得到不同的组件

15:54.740 --> 15:55.540
来进一圈了

15:56.420 --> 15:57.780
但是有一个小的问题

15:57.780 --> 15:58.260
你看到没

15:58.980 --> 16:00.900
这里的路径为什么多一个锦号啊

16:02.100 --> 16:03.060
这就奇怪了对吧

16:03.940 --> 16:06.420
是因为默认情况下

16:06.420 --> 16:07.700
它读路径啊

16:07.700 --> 16:08.740
它不会从这里读

16:09.620 --> 16:11.620
它是从锦号后边读路径

16:12.180 --> 16:13.700
锦号后边是咱们把叫做

16:13.700 --> 16:14.740
某链接对吧

16:14.740 --> 16:16.740
其实呢也还有个名字叫做哈希

16:16.900 --> 16:18.740
就是location里边的哈希

16:19.940 --> 16:21.300
你看哈希纸

16:21.300 --> 16:23.300
它就从那个锦号后边去读路径

16:23.300 --> 16:25.380
也就是说我们那个改变哈希是不是可以改变

16:25.940 --> 16:26.980
改变它的页面

16:26.980 --> 16:28.900
比方说我们可以改变location

16:30.900 --> 16:32.180
把哈希重新复制

16:32.180 --> 16:33.540
复制为一个blog

16:37.140 --> 16:38.340
你看所以切换到文章了

16:39.300 --> 16:41.300
而且呢因为是哈希纸

16:41.700 --> 16:43.060
哈希纸的切换

16:43.060 --> 16:44.900
某链接的切换会不会刷新页面

16:44.900 --> 16:45.940
不会刷新页面

16:46.020 --> 16:47.220
这就是无刷新挑转

16:47.780 --> 16:50.180
哈希纸是最容易做无刷新挑转的

16:50.740 --> 16:51.460
没了意思吧

16:51.460 --> 16:53.060
传播认识用使用了哈希纸

16:53.700 --> 16:55.220
也说我们这里访问blog

16:55.220 --> 16:56.900
可不可以访问到文章

16:56.900 --> 16:57.300
可以啊

16:57.300 --> 16:58.740
因为访问这个路径的时候

16:59.940 --> 17:01.140
你看我们整个流程

17:01.140 --> 17:02.820
是不是匹配到博客逐渐

17:02.820 --> 17:04.420
怎么匹配到博客逐渐的

17:04.420 --> 17:05.620
是不是因为在这里

17:05.620 --> 17:06.740
因为到这里呢我们

17:07.380 --> 17:08.420
定了一个配置对吧

17:08.420 --> 17:09.940
blog还匹配到这个逐渐

17:09.940 --> 17:11.540
他怕说逐渐渲染到哪呢

17:11.540 --> 17:12.740
渲染到这个位置

17:13.540 --> 17:14.740
只有它的整个过程

17:16.020 --> 17:18.100
那么我们再来从在这里直接说一下啊

17:18.100 --> 17:19.380
比方说我们message

17:19.940 --> 17:20.260
回车

17:21.460 --> 17:22.340
匹配到了留言吧

17:23.060 --> 17:23.460
看到没

17:24.180 --> 17:26.660
这就你整个基本流程已经走通了

17:27.620 --> 17:28.420
好那么这个东西

17:28.420 --> 17:29.620
如果说你理解了过后呢

17:29.620 --> 17:30.420
我们现在呢

17:30.420 --> 17:32.100
把代码稍微优化一下

17:32.100 --> 17:33.540
你看我们现在启动文件里边

17:33.540 --> 17:35.540
代码开始慢慢的变多了

17:35.540 --> 17:37.060
我还是希望启动文件呢

17:37.060 --> 17:38.260
尽量保持减结

17:38.260 --> 17:39.860
因此呢我们这一块代码的

17:39.860 --> 17:41.140
可以把尽量抽出去

17:41.700 --> 17:42.500
怎么抽出去呢

17:42.500 --> 17:43.700
其实我们要抽出去的

17:43.700 --> 17:44.500
是不是就是这一坨

17:45.940 --> 17:47.940
就把这一坨代码最终得到一个rotor

17:47.940 --> 17:48.660
配置到这

17:48.660 --> 17:49.460
就完事了

17:50.180 --> 17:50.500
对吧

17:50.500 --> 17:51.300
那我们怎么来弄呢

17:51.300 --> 17:52.260
我们可以在vue

17:52.260 --> 17:54.020
在这个src里面再建个文件夹

17:54.820 --> 17:55.940
叫做rotor

17:57.540 --> 17:58.340
那么rotor里面

17:58.340 --> 17:59.380
我们先建一个index

18:00.340 --> 18:01.460
稍微再切分一下

18:02.580 --> 18:04.260
这个index的GS里面

18:04.260 --> 18:05.620
我们就把刚才那段代码

18:06.020 --> 18:06.820
就这一坨

18:10.810 --> 18:11.450
扔过来

18:11.450 --> 18:11.770
然后呢

18:11.770 --> 18:13.530
因为这里要用到这个vue各种函数

18:13.530 --> 18:15.130
所以我们导入这个vue各种函数

18:15.690 --> 18:16.570
vue

18:18.010 --> 18:18.490
好

18:18.570 --> 18:19.770
然后呢把这个rotor导出

18:20.330 --> 18:20.730
对不对

18:20.730 --> 18:22.890
这个rotor导出的其实就是一个

18:24.010 --> 18:25.850
就是这个vuerotor的对象实力

18:28.330 --> 18:28.730
这样吧

18:28.730 --> 18:29.850
直接导出吧

18:29.850 --> 18:30.730
export default

18:31.930 --> 18:32.490
rotor

18:32.490 --> 18:33.370
把他导出

18:34.090 --> 18:34.490
好了

18:34.490 --> 18:36.570
那么这个东西把分成不同的模块之后呢

18:36.570 --> 18:37.530
没了GS是不是

18:37.530 --> 18:38.810
直接导入这个rotor就完事了

18:39.770 --> 18:40.090
是吧

18:40.970 --> 18:41.530
rotor

18:41.530 --> 18:41.930
对吧

18:41.930 --> 18:43.850
那没能导入的就是index的GS

18:44.570 --> 18:45.530
好保存

18:45.530 --> 18:46.810
当然效果是完全一样的

18:46.810 --> 18:47.210
刷新

18:47.850 --> 18:48.170
呀

18:49.130 --> 18:50.170
可能

18:50.170 --> 18:50.890
哦

18:50.890 --> 18:52.090
路径变了对不对

18:52.090 --> 18:53.130
这个路径变了

18:53.130 --> 18:54.570
这个要返回上级目录

18:54.570 --> 18:55.690
或者是用aeta也行

18:56.490 --> 18:57.690
把这个地方改一下吧

18:59.130 --> 18:59.930
改成aeta

19:01.290 --> 19:01.690
保存

19:02.650 --> 19:03.850
效果是不是完全一样的

19:04.410 --> 19:04.810
对吧

19:05.370 --> 19:05.690
好

19:05.690 --> 19:06.330
这里改成

19:06.890 --> 19:07.210
起稿

19:07.850 --> 19:08.250
手艺

19:08.970 --> 19:09.370
可不

19:10.090 --> 19:10.650
好

19:10.650 --> 19:11.930
当然如果说你访问不到

19:11.930 --> 19:13.690
如果说都没有匹配的话

19:13.690 --> 19:14.890
那么他就什么都没有匹配

19:14.890 --> 19:15.930
这个组件是空的

19:15.930 --> 19:17.450
没有任何组件宣传到这个位置

19:18.650 --> 19:18.810
好

19:18.810 --> 19:19.690
这是这一块

19:21.770 --> 19:23.050
然后呢

19:23.050 --> 19:23.370
现在呢

19:23.370 --> 19:25.370
我们还需要继续优化一下工程

19:25.370 --> 19:26.330
因为这里边的

19:26.330 --> 19:26.810
你看这里

19:27.370 --> 19:29.050
这个代码比较多的是地方是不是在这

19:29.610 --> 19:30.170
对不对

19:30.170 --> 19:31.130
这里是一个组

19:31.130 --> 19:33.210
就是路由的匹配规则

19:33.930 --> 19:35.130
路由的匹配规则

19:35.130 --> 19:38.330
那么我可以单独的把路由匹配规则分出去

19:38.810 --> 19:39.850
因为有模块的话嘛

19:39.850 --> 19:40.170
对吧

19:40.170 --> 19:41.530
就可以尽量的细分

19:41.530 --> 19:42.010
rotor

19:42.010 --> 19:42.730
要监视

19:42.730 --> 19:43.770
好那么这个玩意

19:43.770 --> 19:44.330
这个地方呢

19:44.330 --> 19:45.450
就是导入一些

19:46.090 --> 19:47.050
路由的匹配规则

19:47.530 --> 19:48.570
把这个玩意

19:48.570 --> 19:49.130
放过来

19:50.890 --> 19:52.090
这个地方去掉啊

19:57.530 --> 19:58.970
把这个玩意

19:58.970 --> 19:59.370
rotor

19:59.370 --> 19:59.690
这里

20:00.730 --> 20:01.690
就是导出一个数数

20:02.410 --> 20:02.970
export

20:03.690 --> 20:04.170
defort

20:04.890 --> 20:05.690
导出一个数数

20:06.330 --> 20:06.890
对吧

20:06.890 --> 20:08.490
就导出一个路由匹配规则

20:08.490 --> 20:09.210
好那么这边呢

20:09.210 --> 20:11.530
我们只需要把个路由匹配规则导入进来

20:11.530 --> 20:12.490
import

20:12.490 --> 20:12.890
rotor

20:15.850 --> 20:16.490
那么这个玩意

20:16.490 --> 20:17.930
就是我们的配置

20:17.930 --> 20:19.050
这是路由匹配规则

20:20.090 --> 20:22.010
路由匹配规则

20:23.530 --> 20:23.850
好了

20:23.850 --> 20:25.850
这样的代码是不是变得更加清晰了一点

20:25.850 --> 20:26.170
对吧

20:29.050 --> 20:29.370
好

20:29.370 --> 20:29.850
就这一块

20:29.850 --> 20:31.290
效果当然是完全一样的

20:32.170 --> 20:32.730
看一下

20:32.730 --> 20:33.450
首页

20:33.450 --> 20:33.610
对吧

20:33.610 --> 20:34.410
效果完全一样

20:34.410 --> 20:35.050
没什么区别

20:35.690 --> 20:36.090
好

20:36.090 --> 20:37.610
把代码先改造成这个样子

20:38.490 --> 20:39.530
我建议大家呢

20:39.530 --> 20:40.090
听到这呢

20:40.090 --> 20:41.770
你可以跟着自己跟着去做一下

20:42.570 --> 20:43.610
每做一步呢

20:43.610 --> 20:44.650
体会一下

20:44.650 --> 20:45.290
这种感觉

20:46.010 --> 20:47.130
把个逻辑理清楚

20:48.090 --> 20:49.130
事情完美

20:49.130 --> 20:51.130
还有很多事情需要我们处理

20:52.250 --> 20:53.290
一个来

20:53.290 --> 20:54.810
下面一个重要的东西

20:54.810 --> 20:55.850
就是路由模式

20:56.650 --> 20:58.010
怎么样路由模式呢

20:58.010 --> 20:59.130
路由模式

20:59.130 --> 21:00.730
它决定了两个

21:00.730 --> 21:02.250
两个很大的问题

21:03.130 --> 21:03.930
第一个问题

21:04.890 --> 21:07.130
我现在不是要根据不同的路径

21:07.130 --> 21:08.250
来匹配组建吗

21:08.250 --> 21:10.010
不同的路径就匹配不同的组建

21:10.010 --> 21:11.210
不是要做这件事吗

21:11.210 --> 21:13.050
那么模式就决定了

21:13.050 --> 21:14.970
我从哪里获得路

21:14.970 --> 21:16.010
获得路径

21:16.730 --> 21:17.690
这是第一个问题

21:17.690 --> 21:18.730
我们默认情况下

21:18.730 --> 21:19.850
是不是从这里获得路径

21:19.850 --> 21:21.610
从哈西部分获得路径

21:21.610 --> 21:22.250
对吧

21:22.250 --> 21:24.010
默认情况下是从这里获得路径

21:24.970 --> 21:25.690
这是第一个问题

21:26.890 --> 21:27.930
第二个问题呢

21:27.930 --> 21:30.410
是如何改变仿问路径

21:31.930 --> 21:34.090
就是说我到时路由路径要变啊

21:34.090 --> 21:35.290
那怎么去改变它

21:35.930 --> 21:37.450
默认情况下是不是从哈

21:37.450 --> 21:39.050
既然从哈西获取路径

21:39.050 --> 21:39.770
那么改变的

21:39.770 --> 21:41.050
自然是哈西

21:41.050 --> 21:41.690
怎么改变

21:41.690 --> 21:42.890
就通过location

21:42.890 --> 21:43.930
它的内部呢

21:43.930 --> 21:45.770
将来就会通过location来改变路径

21:46.090 --> 21:48.570
比方说改变成blog

21:49.850 --> 21:51.610
你看哈西变了是不是这里就变了

21:52.410 --> 21:52.890
对吧

21:53.610 --> 21:54.730
这是默认情况

21:55.850 --> 21:57.770
那么这个东西是能改的啊

21:57.770 --> 22:00.890
维尤router给我们提供了三种路由模式

22:00.890 --> 22:02.410
第一种就是默认就是哈西

22:02.410 --> 22:03.370
这是默认值

22:03.370 --> 22:05.290
它从哈西部分获取路径

22:05.290 --> 22:08.170
改变路径也是只改变了哈西部分

22:08.170 --> 22:10.010
这种模式兼容性最好

22:10.010 --> 22:11.130
好 咱们来看一下

22:11.130 --> 22:12.170
下面有两个例子

22:12.170 --> 22:13.530
比方说我们这个法文路径

22:13.530 --> 22:15.050
它过去的是什么路径呢

22:15.210 --> 22:17.290
过去的是哈西部分的后面的路径

22:17.290 --> 22:18.490
或许的路径是blog

22:19.690 --> 22:21.610
而如果说是这样的地址呢

22:21.610 --> 22:23.050
它看都不看前面的

22:23.050 --> 22:25.210
它只看那个是不是

22:25.210 --> 22:26.410
后边的是不是那个

22:26.410 --> 22:27.690
只看后边的哈西

22:27.690 --> 22:29.850
因此或许的路径还是blog

22:29.850 --> 22:30.890
也就是说模式啊

22:30.890 --> 22:31.770
它决定了

22:31.770 --> 22:33.610
从哪个地方去或许路径

22:35.850 --> 22:36.490
能看懂吗

22:38.170 --> 22:40.730
为什么说哈西的兼容性最好呢

22:40.730 --> 22:42.810
因为我们要做的是无刷新跳转

22:42.810 --> 22:43.690
单一应用程序嘛

22:43.690 --> 22:44.330
你刷新干嘛呢

22:44.490 --> 22:45.610
反正都是一个页面

22:45.610 --> 22:47.610
你把那个页面反复的寻求干嘛呢

22:47.610 --> 22:49.050
不要去刷新页面

22:49.050 --> 22:51.130
直接用JS切换就行了

22:51.130 --> 22:53.450
那么但是我们要改动地址南

22:53.450 --> 22:54.570
而改动哈西

22:54.570 --> 22:56.330
是不是不会导致页面刷新呀

22:56.330 --> 22:59.210
无论你是多老版本的浏览器

22:59.210 --> 23:01.050
哪怕你是三个世纪的浏览器

23:01.050 --> 23:02.090
改变哈西

23:02.090 --> 23:03.530
它都不会导致页面刷新

23:03.530 --> 23:04.410
所以说呢

23:04.410 --> 23:06.650
而且哈西给的改变

23:06.650 --> 23:07.770
我们是可以监控到的

23:07.770 --> 23:08.810
是可以监听到的

23:08.810 --> 23:09.850
因此呢

23:09.850 --> 23:12.090
正是因为哈西有这样的特点

23:12.490 --> 23:15.050
它特别适合做那种无刷新的跳转

23:16.010 --> 23:17.450
因此哈西的监控性最好

23:18.490 --> 23:19.610
但是这个哈西呢

23:19.610 --> 23:21.130
在我们现代的网站中

23:21.130 --> 23:22.810
如果说你前面的不变

23:22.810 --> 23:23.610
就变哈西

23:23.610 --> 23:25.850
这个看上去呢也挺怪怪的

23:25.850 --> 23:27.210
我们还是希望呢

23:27.210 --> 23:28.890
改动前边的东西

23:29.610 --> 23:30.410
那怎么办呢

23:30.410 --> 23:31.770
我们就可以改模式

23:33.130 --> 23:34.650
这个模式在哪里改呢

23:34.650 --> 23:35.210
在这里改

23:37.160 --> 23:39.800
在我们的路由配置这里

23:40.440 --> 23:42.200
刚才不是配置了路由规则吗

23:42.280 --> 23:43.480
这里下面还可以写一个

23:43.480 --> 23:45.720
mod表示路由的模式

23:45.720 --> 23:46.920
默认值是哈西

23:48.200 --> 23:49.720
我们可以改成别的模式

23:49.720 --> 23:50.920
比方说改成history

23:51.640 --> 23:52.520
改成这样的模式

23:53.240 --> 23:53.560
好

23:53.560 --> 23:54.840
咱们来看一下history这个模式

23:55.400 --> 23:56.440
这个history模式呢

23:56.440 --> 23:58.760
是对用户的感觉是最好的

23:59.480 --> 24:02.600
它是从浏览器的location pass name中获取路径

24:02.600 --> 24:04.120
也就是它从哪里获取路径呢

24:04.120 --> 24:09.320
它从这里获取路径

24:09.480 --> 24:11.320
我们之前的那个好像这个

24:11.320 --> 24:13.320
这个匹配这个选路效果的时候

24:13.320 --> 24:14.440
做了用了一下对吧

24:15.240 --> 24:16.200
那么这样子的就是

24:16.760 --> 24:17.800
跟哈西就没关系了

24:17.800 --> 24:19.080
比方哈西写个什么blog

24:19.080 --> 24:19.880
跟它有关系吗

24:19.880 --> 24:20.840
现在就没关系了

24:20.840 --> 24:22.200
看现在是关于我

24:22.200 --> 24:24.200
现在模式改了之后

24:24.200 --> 24:25.560
它获取路径的方式呢

24:25.560 --> 24:26.760
不再从哈西获取了

24:26.760 --> 24:27.800
而从这里获取

24:28.600 --> 24:29.240
不要意思吧

24:29.240 --> 24:30.840
它通过这个pass name来获取的

24:32.870 --> 24:33.670
容易理解吧

24:33.670 --> 24:34.550
不拦吧这个东西

24:35.030 --> 24:36.630
比方说看首页

24:36.630 --> 24:37.750
首页的话自然就是这个

24:38.950 --> 24:39.910
这就是首页嘛

24:39.910 --> 24:40.310
对吧

24:40.790 --> 24:41.830
莫人就是一个写杠嘛

24:41.830 --> 24:42.310
对不对

24:42.310 --> 24:43.190
你不写写杠

24:43.190 --> 24:43.750
写不写写杠

24:43.750 --> 24:45.350
它最后都给你加上写杠的

24:45.350 --> 24:46.870
就是一个写杠首页

24:46.870 --> 24:48.950
那么比方说博客blog

24:48.950 --> 24:50.230
你看访问这个页面

24:50.790 --> 24:52.630
但是现在页面刷新了对吧

24:52.630 --> 24:53.670
访问这个页面的时候

24:53.670 --> 24:54.790
是不是匹配到了博客

24:54.790 --> 24:57.110
那么文章主监把他匹配到这

24:58.230 --> 24:58.950
对不对

24:58.950 --> 25:00.870
这是history这种模式

25:01.670 --> 25:02.950
为什么叫history呢

25:02.950 --> 25:03.990
因为它有一个还有一个

25:03.990 --> 25:05.510
因为我刚才说了有两个问题

25:05.510 --> 25:05.750
对吧

25:05.750 --> 25:06.790
一个是获取路径

25:06.790 --> 25:07.750
从哪里获取

25:07.750 --> 25:09.190
这个是怎么改变路径的

25:11.560 --> 25:13.000
改变路径的话

25:13.640 --> 25:14.440
而且不能刷新

25:14.440 --> 25:15.720
你不能刷新

25:15.720 --> 25:16.680
如果说你要刷新的话

25:16.680 --> 25:17.480
那无所谓了

25:17.480 --> 25:19.320
改变路径的话就怎么改变

25:19.320 --> 25:20.120
就这样的改变

25:20.120 --> 25:21.160
对吧

25:21.160 --> 25:21.960
特别简单

25:21.960 --> 25:22.920
比较说没什么

25:23.640 --> 25:24.520
你看页面刷新

25:25.080 --> 25:25.720
不是刷新的吗

25:25.720 --> 25:25.960
对吧

25:26.760 --> 25:28.040
全部重新的来了一遍

25:28.760 --> 25:29.720
当然效果是一样的

25:29.720 --> 25:31.080
但是总之不是很好

25:31.080 --> 25:32.520
因为你去额外的

25:32.520 --> 25:33.640
请求了太多的东西了

25:33.640 --> 25:35.720
介绍于全部重新请求了一遍

25:35.720 --> 25:37.960
css图片于全部重新请求了一遍

25:37.960 --> 25:38.920
何必呢

25:38.920 --> 25:40.200
这些东西没变的话对吧

25:40.920 --> 25:41.960
还是那段界也是

25:41.960 --> 25:43.640
只不过它执行的内容不一样了

25:44.520 --> 25:46.440
因此你不用去刷新页面

25:46.440 --> 25:48.680
我现在说主要是不刷新的挑转

25:49.240 --> 25:50.840
那问题是改动这个地址

25:50.840 --> 25:52.040
能够做到不刷新吗

25:52.920 --> 25:54.040
能够做到不刷新吗

25:54.040 --> 25:54.920
是能够做到的

25:55.400 --> 25:56.040
能够做的

25:57.160 --> 25:57.640
怎么做

25:58.920 --> 25:59.880
怎么做到不刷新

26:00.520 --> 26:02.040
就要用到history API

26:02.040 --> 26:03.480
这是一个H5的API

26:04.040 --> 26:06.040
那么这个API其实就是history

26:06.680 --> 26:07.240
非常简单

26:07.240 --> 26:08.040
push state

26:08.840 --> 26:09.320
你看

26:09.400 --> 26:10.600
我现在做一件事

26:10.600 --> 26:11.640
前面两个参数传到

26:12.280 --> 26:14.040
第三个参数就是传路径

26:14.040 --> 26:15.160
比方说我们切换到

26:16.600 --> 26:17.480
blog这个路径吧

26:18.280 --> 26:18.840
注意看

26:18.840 --> 26:19.720
我现在要回车了

26:19.720 --> 26:20.920
注意看这个地方有没有刷新

26:21.480 --> 26:22.360
这个地方有没有刷新

26:23.640 --> 26:24.040
回车

26:24.520 --> 26:25.480
没刷新吧

26:25.480 --> 26:27.160
说没有刷新就改变了这个地址

26:28.680 --> 26:29.080
对不对

26:29.880 --> 26:30.040
哎

26:30.040 --> 26:31.240
等于说改变了过后

26:31.240 --> 26:32.600
为什么这里组件没变了

26:33.400 --> 26:36.040
因为如果你自己写代码去改变的话

26:36.760 --> 26:38.440
你用你自己的代码去改变的话

26:38.600 --> 26:39.880
那么它是监控不到的

26:39.880 --> 26:41.240
它监控不到你的变化的

26:41.640 --> 26:42.280
它不像哈希

26:42.280 --> 26:43.080
哈希可以监控

26:43.080 --> 26:44.520
你这种改变它监控不到的

26:45.160 --> 26:45.880
那么怎么办

26:45.880 --> 26:46.680
我们之后再说

26:47.320 --> 26:47.800
好吧

26:47.800 --> 26:51.160
也就是说它内部使用的是它来改变路径的

26:51.640 --> 26:53.720
因此可以做出无刷新的效果

26:54.440 --> 26:56.360
但是必须要支持H5的浏览器

26:56.680 --> 26:59.560
如果说你浏览器不支持history API

26:59.560 --> 27:00.840
因此你就做不到

27:00.840 --> 27:02.520
做不到这个模式

27:02.520 --> 27:03.160
history模式

27:03.160 --> 27:04.040
因此这种模式

27:04.040 --> 27:05.480
兼容性没有哈希好

27:06.440 --> 27:07.720
但是现在的大部分的浏览器

27:07.800 --> 27:08.520
都支持了

27:09.080 --> 27:10.920
我们这种模式也是用了最多的

27:10.920 --> 27:12.040
因为看得最舒服

27:12.040 --> 27:12.360
好

27:12.360 --> 27:13.400
咱们来看一下这种模式吧

27:13.400 --> 27:15.080
最后我们来总结一下

27:15.080 --> 27:16.040
你看这个路径

27:16.680 --> 27:17.480
用这种模式的话

27:17.480 --> 27:18.760
这种路径得到的路径是什么

27:18.760 --> 27:19.240
是鞋杆

27:19.880 --> 27:20.200
对吧

27:20.200 --> 27:21.080
看得不看哈希

27:21.640 --> 27:24.120
这个路径得到的路径那就是about

27:25.080 --> 27:26.440
这个东西得到的就是blog

27:27.080 --> 27:27.400
对吧

27:27.400 --> 27:28.040
改变的时候

27:28.040 --> 27:29.960
它内部的使用的是history API

27:29.960 --> 27:32.200
可以做到无刷新的变化路径

27:33.720 --> 27:33.880
好

27:33.880 --> 27:35.160
我们把它调成这种模式

27:35.160 --> 27:36.360
还有第三种模式

27:36.520 --> 27:37.480
叫做abstract

27:37.880 --> 27:39.560
这种模式了解一下就行了

27:39.560 --> 27:40.680
我们平时不打用的

27:41.000 --> 27:44.280
除非你用到什么手机应用上面

27:44.760 --> 27:46.520
还不是那种网页应用

27:46.520 --> 27:47.720
还是那种原生应用

27:47.720 --> 27:49.160
或者是混合应用里边

27:49.320 --> 27:51.160
那么这种情况才会使用这个

27:51.160 --> 27:51.960
这个网页是什么呢

27:51.960 --> 27:55.000
就是说有的环境里边根本没有浏览器的

27:55.000 --> 27:56.360
然后你玩一个手机游戏

27:56.360 --> 27:58.200
你给我找一个手机游戏的浏览器是啥

27:59.400 --> 28:00.200
没有浏览器

28:00.760 --> 28:01.080
对不对

28:01.080 --> 28:03.240
它有些手机原生应用或者混合应用里边

28:03.240 --> 28:04.680
可能根本就没有浏览器

28:04.680 --> 28:05.240
没有浏览器

28:05.960 --> 28:07.160
哪来的地址栏呢

28:07.160 --> 28:08.280
哪来的哈希呢

28:08.280 --> 28:09.480
哪来的passname呢

28:09.480 --> 28:10.600
哪来的location呢

28:10.600 --> 28:11.160
都没有

28:11.640 --> 28:14.200
因此这时候还把路径保存在内存里边

28:14.200 --> 28:15.400
你可以认为就是个变量

28:15.400 --> 28:16.440
来保存我们的路径

28:16.440 --> 28:17.880
这个变量一开始的只是这个

28:18.520 --> 28:19.640
将来要变化的时候

28:19.640 --> 28:21.080
就把这个变量的值变了

28:21.560 --> 28:23.160
就这种情况

28:23.160 --> 28:24.680
其中我们可以稍微看一下

28:24.680 --> 28:25.480
abstract

28:27.910 --> 28:28.470
好 看一下

28:34.440 --> 28:37.480
这个东西我还得写一些额外的代码才行

28:37.960 --> 28:39.480
还得写一些额外的代码

28:39.480 --> 28:42.680
因为我要一开始去指定它的一开始的路径是什么

28:42.680 --> 28:43.720
这个东西难得去看

28:44.360 --> 28:46.520
总之就是这个网上不是很常见

28:46.520 --> 28:52.120
我们将来如果说浏览器就是在移动端要去使用

28:53.400 --> 28:54.600
特别是一共当应用

28:54.600 --> 28:56.200
要去使用那个维尤的时候呢

28:56.200 --> 28:57.800
可能会维尤绒合的时候

28:57.800 --> 28:58.920
可能会用到这个东西

28:58.920 --> 28:59.720
现在用不到了

29:00.600 --> 29:00.920
好吧

29:00.920 --> 29:02.600
这就是我们都有了三种模式

29:04.600 --> 29:04.920
好了

29:05.640 --> 29:06.520
模式确定了

29:06.520 --> 29:08.680
我们现在确定的是history这种模式对吧

29:08.840 --> 29:09.800
那么现在有没有效果了

29:09.800 --> 29:10.760
其实已经有效果了

29:12.120 --> 29:13.320
你看是不是已经有效果了

29:13.320 --> 29:14.280
这个效果好吗

29:14.280 --> 29:14.760
不好

29:14.760 --> 29:15.560
为什么他在刷新

29:16.760 --> 29:19.800
我们普通的一个超链接点击过后是不是会刷新页面

29:20.680 --> 29:21.720
刷新页面意味着啥

29:22.360 --> 29:23.560
每一次刷新意味着啥

29:24.360 --> 29:28.920
第一件事请求atm index of atm

29:28.920 --> 29:29.640
对吧

29:29.640 --> 29:31.720
然后再请求各种GS

29:32.360 --> 29:34.520
因为这个atm有没有用各种GS对吧

29:34.520 --> 29:35.080
就是请求

29:37.450 --> 29:39.130
然后会请求各种GS

29:39.210 --> 29:40.410
然后还会请求什么

29:40.410 --> 29:42.970
还会请求CSS

29:42.970 --> 29:45.930
各种CSS

29:45.930 --> 29:48.410
然后完了过后执行介石

29:48.410 --> 29:49.370
执行介的时候

29:49.370 --> 29:51.930
是不是要重新启动

29:51.930 --> 29:54.730
创建不诱应用

29:54.730 --> 29:55.130
对吧

29:55.130 --> 30:00.970
然后宣然组建全部组建书

30:02.970 --> 30:03.850
然后干嘛呢

30:03.850 --> 30:08.810
把这个组建书挂展到指定的DIV

30:09.530 --> 30:10.650
对不对

30:10.650 --> 30:11.770
是不是要做很多很多的事情

30:11.770 --> 30:14.410
因为每一次刷新意味着做这一大堆事情

30:15.530 --> 30:16.970
而如果说不刷新呢

30:16.970 --> 30:17.930
不刷新就好多多了

30:17.930 --> 30:18.890
比方说点击首页

30:18.890 --> 30:19.370
不刷新

30:20.010 --> 30:20.810
这件事情没了

30:20.810 --> 30:21.850
这件事情没了

30:21.850 --> 30:22.490
这件事情没了

30:22.490 --> 30:22.890
对吧

30:22.890 --> 30:24.010
就是之前的GS

30:24.010 --> 30:24.890
如果说不刷新

30:24.890 --> 30:24.970
啊

30:24.970 --> 30:25.530
这是刷新

30:28.900 --> 30:29.220
刷新

30:30.500 --> 30:31.220
这是不刷新

30:33.460 --> 30:34.660
无刷新跳转

30:34.660 --> 30:35.700
无刷新跳转的话

30:36.660 --> 30:37.780
就是执行一段介石单

30:37.780 --> 30:38.180
就完了

30:39.140 --> 30:40.180
执行一段介石单

30:40.980 --> 30:42.260
这个介石单干嘛呢

30:42.740 --> 30:44.100
它就在切换

30:44.900 --> 30:46.580
某个区域的组建

30:47.620 --> 30:48.260
就完事了

30:48.900 --> 30:50.260
这些东西全部没了

30:50.260 --> 30:52.340
说效率要高很多很多

30:52.340 --> 30:53.060
所以说现在呢

30:53.060 --> 30:54.420
担心用程去越来越火

30:54.420 --> 30:55.140
就这个原因

30:56.500 --> 30:58.500
那么现在我怎么来做不刷新呢

30:59.060 --> 30:59.700
怎么来做呢

30:59.700 --> 31:01.700
你就不能用传统的A元术了

31:01.700 --> 31:03.140
要用我们的导航

31:04.340 --> 31:05.620
在维尔特里面呢

31:05.620 --> 31:06.500
提供了一个东西

31:06.500 --> 31:07.140
一个组建啊

31:07.140 --> 31:08.180
又是一个拳击组建

31:08.180 --> 31:09.380
你看之前一个拳击组建

31:09.460 --> 31:10.340
叫战位对吧

31:10.340 --> 31:12.260
叫做维尔特维尔特维尔特

31:12.740 --> 31:13.220
战位的

31:13.780 --> 31:14.900
那么现在就不要再做

31:14.900 --> 31:16.820
有一个新的拳击组建

31:16.820 --> 31:17.700
叫做Rotalinq

31:18.340 --> 31:19.140
Linq什么意思

31:19.460 --> 31:20.020
链接吧

31:20.660 --> 31:22.420
其他的渲染结果就是一个A元术

31:23.060 --> 31:24.180
它给你封装了一个组建

31:25.060 --> 31:25.860
不过这个A元术呢

31:25.860 --> 31:27.140
它可以做了处理的

31:27.140 --> 31:28.580
也就是我们之后呢

31:28.580 --> 31:29.620
写挑转的时候

31:29.620 --> 31:30.740
你看我们之前的这个

31:30.740 --> 31:31.780
A元术写到哪的

31:31.780 --> 31:33.380
是不是写到我们component这个

31:33.380 --> 31:34.900
什么在哪呢

31:36.260 --> 31:37.060
这个这里啊

31:37.060 --> 31:37.620
门流这里

31:38.580 --> 31:39.700
来改动一下

31:39.700 --> 31:41.540
之前我们是不是写到A元术啊

31:41.540 --> 31:42.900
那么现在不用写A元术了

31:42.900 --> 31:44.660
写什么Rotalinq

31:44.660 --> 31:46.260
你可以这样写Linq

31:46.820 --> 31:47.860
也可以说什么

31:47.860 --> 31:48.820
大同方面迷茫啊

31:48.820 --> 31:49.300
都可以

31:49.300 --> 31:50.980
我个人还是喜欢大同方面迷茫

31:50.980 --> 31:51.700
看你们自己啊

31:51.700 --> 31:53.060
这东西没有对没有错

31:53.860 --> 31:54.420
Rotalinq

31:56.260 --> 31:58.260
好那么现在它的链接地址呢

31:58.260 --> 31:59.060
你就不能写这个了

31:59.060 --> 32:00.340
不能写Ref了

32:00.340 --> 32:01.060
应该写什么呢

32:01.060 --> 32:01.700
应该写2

32:02.580 --> 32:03.780
绑进这个属性

32:03.780 --> 32:04.980
2为链接地址

32:04.980 --> 32:06.420
比方说我这里可以给大家

32:06.580 --> 32:07.540
就例子啊

32:07.540 --> 32:09.060
Rotalinq2Blog

32:09.620 --> 32:10.340
就生成

32:10.340 --> 32:11.460
那么就生成了一个A元术

32:12.180 --> 32:13.540
而且这个生成的A元术呢

32:13.540 --> 32:16.180
它会根据你的模式来生成

32:16.180 --> 32:17.300
比方说你是哈欣模式

32:17.300 --> 32:18.500
它就给你生成这个

32:18.500 --> 32:19.780
这符合哈欣模式

32:20.420 --> 32:21.860
如果说你是History模式呢

32:21.860 --> 32:22.740
它就给你生成这个

32:23.780 --> 32:25.540
有些人说生成这个过后点一下不对

32:25.540 --> 32:26.500
不会也在刷新了吧

32:26.500 --> 32:27.540
它可以做出处理的

32:27.540 --> 32:28.660
它会给这个A元术呢

32:28.660 --> 32:29.780
注册一个点击事件

32:30.340 --> 32:32.420
并且阻止事件的默认行为

32:33.060 --> 32:33.940
默认行为一阻止

32:33.940 --> 32:35.300
是不是点击过后就不会挑转了

32:36.020 --> 32:36.580
然后呢

32:36.580 --> 32:37.540
在事件内部呢

32:37.540 --> 32:38.740
使用History API

32:38.740 --> 32:39.940
我们之前演示过啊

32:39.940 --> 32:40.820
通过这种方式呢

32:40.820 --> 32:41.540
更改如今

32:41.540 --> 32:43.460
于是呢就可以做到无刷新调转

32:43.460 --> 32:44.500
它全部给你处理了

32:45.380 --> 32:46.020
你看啊

32:46.020 --> 32:46.900
我现在保存

32:48.580 --> 32:49.060
你看这边

32:50.100 --> 32:50.820
生成的元术

32:52.980 --> 32:54.020
找到这些A元术啊

32:54.980 --> 32:55.940
你看是不是A元术

32:55.940 --> 32:57.220
生成的A元术对吧

32:57.220 --> 32:58.820
写个Blog about

32:59.940 --> 33:00.420
你看啊

33:00.980 --> 33:02.660
点击过后你看是不是无刷新调转

33:03.460 --> 33:04.420
是不是无刷新调转吧

33:05.140 --> 33:07.060
哎就说这个激活样子怎么不见了

33:07.060 --> 33:07.460
没关系

33:07.460 --> 33:08.020
我们以后再说

33:08.660 --> 33:10.020
是无刷新调转吧

33:10.020 --> 33:10.500
没问题吧

33:12.100 --> 33:12.900
一边没有刷新吗

33:14.100 --> 33:14.420
对不对

33:15.300 --> 33:15.700
好

33:15.700 --> 33:16.260
而且呢

33:16.260 --> 33:17.140
我们非常方便的

33:17.140 --> 33:17.940
可以更改模式

33:17.940 --> 33:18.980
将来我说

33:18.980 --> 33:19.940
不要让我改模式

33:20.580 --> 33:21.060
怎么改呢

33:21.060 --> 33:22.340
我之后把这个模式一改

33:22.340 --> 33:22.980
改成哈希

33:23.860 --> 33:25.780
你看其他一行代码都不用动

33:27.060 --> 33:27.620
它首先

33:27.620 --> 33:28.900
它会根据哈希的地址

33:28.900 --> 33:29.700
来渲染组件

33:29.700 --> 33:30.900
这个东西它是自动的

33:30.900 --> 33:31.620
而且呢你的

33:31.620 --> 33:33.300
如果说你使用了Router Link的话

33:33.300 --> 33:34.100
它自动会给你

33:34.500 --> 33:36.020
生成最合适的超链接地址

33:36.420 --> 33:37.860
你看现在是不是全部变成哈希了

33:38.980 --> 33:40.020
那如果这个东西是不是

33:40.020 --> 33:41.300
比我们自己写A元数要

33:41.540 --> 33:42.100
好得多

33:42.100 --> 33:43.140
你自己写A元数的话

33:43.140 --> 33:44.100
如果说模式一更改

33:44.100 --> 33:46.020
就是说到处要去改这些A元数的链接

33:46.020 --> 33:46.660
你不用了

33:46.660 --> 33:48.020
用Router Link的话就不用了

33:48.340 --> 33:50.180
它会根据模式来生成超链接

33:50.740 --> 33:51.220
对吧

33:51.220 --> 33:53.940
那么用专业一点的话来说的话

33:53.940 --> 33:55.620
就是把我们的系统

33:56.180 --> 33:59.300
和模式之间的偶和解除了

34:00.580 --> 34:01.300
我们系统

34:02.020 --> 34:03.140
只管路径就行了

34:03.540 --> 34:05.380
我这个路径要链接到哪

34:05.380 --> 34:06.100
链接到这

34:06.100 --> 34:07.140
管它什么模式

34:07.140 --> 34:07.380
对吧

34:07.380 --> 34:07.860
它根据

34:07.860 --> 34:10.100
这个组件它会跟自己根据模式

34:10.100 --> 34:11.700
来去适配这个路径

34:13.060 --> 34:14.100
生成合适的路径

34:14.100 --> 34:15.220
你看现在变成哈希了

34:17.320 --> 34:17.800
没问题吧

34:18.520 --> 34:18.760
好

34:18.760 --> 34:19.320
这是这一块

34:22.250 --> 34:23.930
那么现在模式再改回来

34:26.090 --> 34:27.210
好这个问题又解决了

34:27.850 --> 34:28.970
接着我们来看两张图

34:29.450 --> 34:30.250
我们回顾一下

34:30.250 --> 34:32.090
我们刚之前学到知识

34:33.050 --> 34:33.690
最开始呢

34:33.690 --> 34:35.290
比方说我们访问的是首页

34:35.290 --> 34:36.490
你看我们这里一个

34:36.650 --> 34:38.730
中间这个区域有个Rotov幼占位区域

34:38.730 --> 34:39.210
对吧

34:39.210 --> 34:41.370
那么第一开始有一个里面刷新

34:41.370 --> 34:42.650
刷新过后开始执行界

34:42.650 --> 34:43.690
是创建无幼应用

34:43.690 --> 34:44.730
然后渲染

34:44.730 --> 34:45.290
渲染的时候

34:45.290 --> 34:46.410
渲染到这个区域的时候

34:46.410 --> 34:47.370
就要匹配了

34:47.370 --> 34:48.410
那么它首先看一下

34:49.130 --> 34:50.490
目前是History模式

34:50.490 --> 34:52.810
于是它就把路径写杠得到了

34:53.610 --> 34:54.410
根据这个写杠

34:54.410 --> 34:55.770
在路由规则里面就匹配

34:55.770 --> 34:56.730
有这么多组件对吧

34:57.290 --> 34:58.970
根据这个规则来进行匹配

34:58.970 --> 34:59.690
匹配到哪个

34:59.690 --> 35:00.490
匹配到首页

35:00.970 --> 35:02.570
于是把这个首页渲染到哪了

35:02.730 --> 35:04.250
渲染到Rotov幼占位区域

35:04.810 --> 35:05.050
对吧

35:05.050 --> 35:05.930
这首次加展

35:06.730 --> 35:06.970
好

35:06.970 --> 35:07.290
一会儿呢

35:07.290 --> 35:09.130
比如说我们点击了这个文章

35:09.130 --> 35:10.090
点击的文章呢

35:10.090 --> 35:12.570
它会根据你的模式来进行切换

35:12.570 --> 35:14.730
比方说你哈西模式就切换哈西部分

35:14.730 --> 35:15.930
你是History模式呢

35:15.930 --> 35:18.410
它就用History API切换这个路径部分

35:18.410 --> 35:19.210
无刷新切换

35:20.170 --> 35:20.410
对吧

35:20.410 --> 35:21.930
你看把路径是不是去改了

35:21.930 --> 35:23.130
也改了路径过后呢

35:24.490 --> 35:26.410
它这个无由Rotov又监控到了

35:26.970 --> 35:28.090
它发现路径一变

35:28.090 --> 35:28.570
因此呢

35:29.210 --> 35:30.730
它读取到路径是Blog

35:30.730 --> 35:32.250
重新匹配到文章组件

35:32.970 --> 35:33.290
然后呢

35:33.290 --> 35:34.330
一把文章组件呢

35:34.330 --> 35:35.610
渲染到这个区域

35:35.610 --> 35:36.010
看看

35:36.010 --> 35:36.970
整个就是这样的流程

35:38.730 --> 35:39.530
并不复杂啊

35:39.530 --> 35:40.170
并不复杂

35:41.050 --> 35:41.290
好

35:41.290 --> 35:42.490
那么现在最后一个问题

35:42.490 --> 35:43.450
现在还有几个问题

35:43.450 --> 35:44.330
还有一些小问题啊

35:44.970 --> 35:45.850
下面这个问题

35:45.850 --> 35:47.210
导航里边我单独说一个东西

35:47.210 --> 35:48.410
叫做激活状态

35:49.530 --> 35:50.250
这啥意思呢

35:51.290 --> 35:52.810
就是我们搞定这个选中效果

35:53.850 --> 35:55.210
其实这个选中效果啊

35:55.210 --> 35:58.410
导航就通过这个Rotov Link生成的A元数啊

35:58.410 --> 36:00.010
它已经给你考虑到这个问题了

36:00.490 --> 36:02.010
因为我们导航里边有些

36:02.090 --> 36:03.210
当前到底是什么页面

36:03.210 --> 36:04.570
还可以选中对吧

36:04.570 --> 36:05.290
这个选中效果

36:05.290 --> 36:06.890
它已经给你考虑到这个东西了

36:06.890 --> 36:07.850
它怎么考虑的呢

36:07.850 --> 36:08.970
你看它的做法啊

36:12.420 --> 36:13.940
它会用当前路径

36:13.940 --> 36:14.820
什么要当前路径

36:15.540 --> 36:17.140
如果你是哈希

36:17.140 --> 36:18.100
这就是当前路径

36:18.740 --> 36:20.180
如果你是不是哈希

36:20.180 --> 36:21.140
你是这个玩意

36:21.140 --> 36:21.940
Israel API

36:21.940 --> 36:23.140
那么这个玩意就当前路径

36:23.780 --> 36:24.340
总之呢

36:24.340 --> 36:26.580
它会根据模式来得到当前路径

36:26.580 --> 36:27.300
对吧

36:27.300 --> 36:29.300
它会把当前路径和什么呢

36:29.780 --> 36:31.780
和你的导航路径进行匹配

36:31.780 --> 36:32.660
什么要导航路径

36:33.620 --> 36:34.980
这种东西叫导航路径

36:34.980 --> 36:37.540
Rotalin K2生成的路径叫导航路径

36:37.540 --> 36:39.540
也就是这个A元数的路径就导航路径

36:40.180 --> 36:41.540
这个A元数是不是导航吧

36:41.540 --> 36:42.660
这个路径就是导航路径

36:43.220 --> 36:43.460
对吧

36:43.460 --> 36:44.180
跟这些

36:44.180 --> 36:45.860
跟每一个A元数进行匹配

36:45.860 --> 36:46.900
跟Blog

36:46.900 --> 36:47.620
跟这个什么

36:47.620 --> 36:48.900
斜鋼不进行匹配

36:48.900 --> 36:51.140
然后呢Blog跟什么Blog进行匹配

36:52.020 --> 36:52.500
好

36:52.500 --> 36:55.060
然后它会在合适的地方给你加上一些

36:56.180 --> 36:56.820
内样式

36:56.820 --> 36:58.180
这内样式它到底什么效果

36:58.180 --> 36:58.900
它没有写

36:58.900 --> 36:59.700
你自己去写

36:59.700 --> 37:01.300
它把内样式的名字给你加上

37:02.020 --> 37:02.500
看着啊

37:02.500 --> 37:02.980
它怎么弄的

37:04.180 --> 37:05.540
如果当前路径

37:05.540 --> 37:07.380
以导航路径开头

37:07.380 --> 37:08.580
再算做匹配

37:10.020 --> 37:11.380
那么它会加上这个内样式

37:12.100 --> 37:14.740
如果当前路径完全等于导航路径

37:14.740 --> 37:16.740
再算做精确匹配

37:16.740 --> 37:17.860
它可以加上这个内样式

37:19.220 --> 37:19.860
模糊对吧

37:19.860 --> 37:20.820
很模糊很晕

37:20.820 --> 37:22.340
再看一下它到底怎么做的

37:22.340 --> 37:23.220
其实并不复杂啊

37:24.500 --> 37:26.180
比方说我们访问的路径是Blog

37:26.180 --> 37:27.300
比方说我们访问这个路径

37:27.300 --> 37:28.180
就当前路径嘛

37:28.820 --> 37:29.780
那么它就会跟这个

37:29.780 --> 37:30.820
它就会把这个路径拿去

37:30.820 --> 37:32.660
跟这些导航链接进行匹配

37:33.620 --> 37:34.260
怎么匹配呢

37:35.060 --> 37:36.740
如果说你的导航路径是这个

37:36.740 --> 37:37.300
你看

37:37.300 --> 37:37.940
首页是不是这个

37:39.620 --> 37:40.500
有没有匹配

37:40.500 --> 37:41.060
有匹配

37:41.860 --> 37:43.380
因为当前路径

37:43.380 --> 37:44.660
是以这个路径开头的

37:45.300 --> 37:46.740
你看是不是也写钢开头嘛

37:46.740 --> 37:47.620
至少是一颗写钢嘛

37:48.180 --> 37:49.300
那么这个东西就算匹配

37:49.780 --> 37:51.140
它会给你加上这个内样式

37:51.140 --> 37:51.780
你看一下

37:51.780 --> 37:52.340
我们的首页

37:52.340 --> 37:53.300
是不是加上这个内样式

37:53.300 --> 37:53.620
如果

37:54.340 --> 37:55.940
Rotorlink Actin

37:55.940 --> 37:57.380
后面那个是我们自己讲的

37:57.380 --> 37:58.180
看前面这个

37:58.180 --> 37:59.140
Rotorlink Actin

37:59.140 --> 38:00.420
我们自己都加上去了

38:01.540 --> 38:01.940
不要

38:03.700 --> 38:04.260
拿力道

38:05.140 --> 38:05.940
耐不展开啊

38:06.340 --> 38:06.820
A元素

38:06.820 --> 38:07.620
第一个A元素啊

38:13.380 --> 38:14.580
这个玩意怎么弄下来的

38:21.620 --> 38:22.260
你看

38:22.260 --> 38:23.060
第一个A元素

38:23.460 --> 38:24.420
是不是跟当前路径

38:24.420 --> 38:25.300
Blog进行匹配

38:25.300 --> 38:26.180
它是以它开头

38:26.180 --> 38:27.060
因此呢匹配

38:28.580 --> 38:28.820
好

38:28.820 --> 38:29.700
第二个A元素啊

38:29.700 --> 38:30.020
你看

38:30.900 --> 38:31.300
Blog

38:31.700 --> 38:32.260
它不

38:32.260 --> 38:33.860
这个路径不仅以它开头

38:33.860 --> 38:35.140
而是两个箱等

38:35.140 --> 38:36.900
因此它可以加上两个样式

38:36.900 --> 38:38.100
一个是我们刚才看到的

38:38.820 --> 38:39.940
Rotorlink Actin

38:40.660 --> 38:41.860
匹配的样式

38:41.940 --> 38:43.860
还给你加那个精确匹配的样式

38:43.860 --> 38:45.300
那个样式啊

38:45.300 --> 38:47.220
叫Rotorlink Actin

38:47.220 --> 38:48.500
一个Actin是什么意思

38:48.500 --> 38:49.540
精确的意思

38:49.540 --> 38:51.380
精确的选中的样式

38:52.340 --> 38:52.660
对吧

38:52.660 --> 38:53.540
加两个样式

38:54.340 --> 38:55.620
你看我这里也记录了的

38:57.460 --> 38:58.180
不仅匹配

38:58.180 --> 38:59.060
还精确匹配

38:59.540 --> 38:59.700
好

38:59.700 --> 39:00.420
下面这个呢

39:00.420 --> 39:01.140
而包含呢

39:01.940 --> 39:02.660
这个玩意

39:02.660 --> 39:04.020
这个路径是以它开头吗

39:04.020 --> 39:04.420
不是

39:05.060 --> 39:05.540
那么

39:05.540 --> 39:06.500
一点关系都没有

39:06.980 --> 39:08.100
当然更加不可能相等

39:08.100 --> 39:08.500
对吧

39:08.500 --> 39:09.220
一点关系都没有

39:09.220 --> 39:09.860
所以说

39:09.860 --> 39:10.660
没有那样式

39:11.060 --> 39:11.620
下一个呢

39:11.620 --> 39:11.940
一样

39:11.940 --> 39:12.500
下一个一样

39:12.500 --> 39:13.540
没有那样式

39:13.540 --> 39:15.300
它就莫能用这种方式来做的

39:17.220 --> 39:17.860
诶

39:17.860 --> 39:18.900
用这种方式来做

39:18.900 --> 39:22.500
我们能不能写出来这个效果呢

39:23.540 --> 39:25.060
能不能写出来这个效果呢

39:25.060 --> 39:26.660
能不能写出来的选中效果呢

39:26.660 --> 39:28.580
好像是有感觉上

39:28.580 --> 39:29.540
好像是可以的

39:29.540 --> 39:29.860
对吧

39:31.380 --> 39:32.900
我们写哪个那样式啊

39:32.900 --> 39:34.420
我们给哪个那样式设置样式啊

39:35.780 --> 39:36.500
给哪个那样式

39:36.500 --> 39:36.980
要不然说

39:36.980 --> 39:37.460
诶

39:37.460 --> 39:38.980
我应该给它设置样式

39:38.980 --> 39:39.620
对不对

39:39.620 --> 39:39.860
诶

39:39.860 --> 39:40.260
但是呢

39:40.740 --> 39:41.220
你会发现

39:41.220 --> 39:41.620
它呢

39:41.620 --> 39:44.100
又可能有两个A元数都有这个样式啊

39:44.100 --> 39:45.060
它以它开头

39:45.060 --> 39:46.340
它因为它不是精确匹配嘛

39:46.340 --> 39:47.220
它只是匹配

39:47.220 --> 39:47.780
对吧

39:47.780 --> 39:48.100
因此呢

39:48.100 --> 39:48.820
它有可能匹配

39:48.820 --> 39:49.540
它也有可能匹配

39:49.540 --> 39:51.620
所以有两个A元数都可能选中

39:51.620 --> 39:52.340
那么

39:52.340 --> 39:54.740
那能不能用精确匹配来设置这个那样式呢

39:55.620 --> 39:57.620
用这个那样式来设置这个效果呢

39:57.620 --> 39:58.340
可以啊

39:58.340 --> 39:59.060
我们来试一下吧

40:00.820 --> 40:01.460
我们在这里

40:01.460 --> 40:01.620
啊

40:01.620 --> 40:02.180
门路这里

40:03.220 --> 40:04.020
找到下面

40:04.020 --> 40:04.900
我们之前试试吗

40:04.900 --> 40:05.700
是哪个题的对吧

40:05.700 --> 40:06.580
我们这里改成这个

40:07.540 --> 40:08.660
改成它给你写的这个

40:08.660 --> 40:09.220
Rotorlink

40:09.220 --> 40:09.700
一个ZX

40:10.420 --> 40:10.900
来个题

40:10.900 --> 40:11.140
对吧

40:11.140 --> 40:12.180
改这个那样式名字

40:12.740 --> 40:12.980
好

40:12.980 --> 40:13.540
你看

40:13.540 --> 40:14.500
文章是不是选中了

40:15.460 --> 40:17.060
点首页是不是选中了

40:17.700 --> 40:19.220
点关于我是不是选中了

40:19.220 --> 40:20.420
点项目效果是不是选中了

40:20.420 --> 40:21.220
你看那样式啊

40:21.220 --> 40:22.180
你继续看那样式

40:23.620 --> 40:24.660
啊点留言版

40:27.110 --> 40:27.510
首页

40:28.070 --> 40:29.110
继续看那样式啊

40:29.110 --> 40:29.510
文章

40:30.950 --> 40:31.510
关于我

40:31.510 --> 40:32.550
我设置的是哪个样式

40:32.550 --> 40:33.190
看清楚没

40:34.230 --> 40:35.110
点这个

40:35.110 --> 40:35.990
点这个

40:35.990 --> 40:36.950
好像没问题啊

40:36.950 --> 40:37.590
挺好的呀

40:38.790 --> 40:40.390
如果说你真的是这样子的话了

40:40.550 --> 40:41.350
如果说没问题的话

40:41.350 --> 40:41.830
那就OK了

40:41.830 --> 40:42.710
那就设置的没问题

40:43.270 --> 40:44.870
但是在我们这个项目里边

40:44.870 --> 40:46.470
实际上是有点问题的啊

40:46.470 --> 40:48.230
因为我们其中有一个地方

40:48.230 --> 40:48.870
有点麻烦

40:49.990 --> 40:50.630
什么地方

40:50.630 --> 40:51.270
文章这里

40:53.750 --> 40:55.830
文章这里有可能会出现这种情况

40:57.030 --> 40:58.790
它的链接可能是这个样子的

40:58.790 --> 40:59.830
比方说看一下啊

40:59.830 --> 41:01.750
我们找到文章的一个分类

41:01.750 --> 41:02.310
某一个分类

41:04.230 --> 41:05.270
你看它链接变了

41:05.910 --> 41:06.550
变成这个样子

41:07.110 --> 41:08.070
也就是在文章这里

41:08.070 --> 41:09.830
可能有很多个不同的页面

41:10.790 --> 41:11.750
它都是要选中它的

41:13.110 --> 41:13.830
懂了意思吧

41:13.830 --> 41:16.470
也就是说我现在要做的是什么

41:16.470 --> 41:17.110
这个东西

41:19.450 --> 41:20.330
访问这个地址

41:20.330 --> 41:21.610
现在还没有这个组件匹配

41:21.610 --> 41:22.010
没关系

41:22.010 --> 41:22.730
我们将来会做的

41:23.290 --> 41:24.250
访问这个地址

41:24.250 --> 41:25.850
这个A元数还是要选中

41:26.810 --> 41:28.490
但是这个A元数能选中吗

41:28.490 --> 41:29.370
选不动了

41:29.370 --> 41:29.930
为什么呢

41:29.930 --> 41:31.130
因为现在这个A元数

41:31.130 --> 41:32.410
它不是精确匹配的

41:32.410 --> 41:34.010
这是我们的当前路径

41:34.010 --> 41:35.290
它只是以它开头

41:35.850 --> 41:37.530
加上了一个rotor link activity

41:40.150 --> 41:41.110
好好梳理一下啊

41:42.310 --> 41:43.190
但是我们要做的是不是

41:43.190 --> 41:43.910
它还是要选中

41:44.870 --> 41:45.590
那说明啥

41:45.590 --> 41:47.910
说明我们肯定是不能用它了

41:48.870 --> 41:50.230
但是用它也不对啊

41:51.110 --> 41:51.430
对不对

41:51.430 --> 41:52.390
是不是用它也不对啊

41:53.590 --> 41:54.790
因为用它的话

41:54.790 --> 41:56.150
有可能把它又影响到了

41:56.150 --> 41:56.310
对吧

41:56.310 --> 41:56.950
它也有可能

41:56.950 --> 41:57.910
因为它也是以它

41:57.910 --> 41:59.270
也写刚开头的对不对

42:00.150 --> 42:01.510
是不是就出现了一个矛盾了

42:02.070 --> 42:02.710
那怎么办呢

42:02.710 --> 42:03.270
用它的话

42:03.270 --> 42:04.150
一看两个都选中了

42:04.150 --> 42:04.790
对吧

42:04.790 --> 42:05.510
肯定是不对了

42:06.390 --> 42:07.270
那怎么办呢

42:07.270 --> 42:07.910
你看啊

42:07.910 --> 42:09.990
现在接下来可以改动了

42:09.990 --> 42:11.110
它是支持改动的

42:11.110 --> 42:11.910
这个匹配规则

42:12.870 --> 42:13.910
rotor link啊

42:13.910 --> 42:14.790
这个导航啊

42:15.510 --> 42:16.790
我们现在不是在控制导航吗

42:16.790 --> 42:17.190
对不对

42:17.190 --> 42:18.070
导航这个东西

42:18.070 --> 42:19.190
它有一个布尔属性

42:19.190 --> 42:19.910
什么叫布尔属性

42:19.910 --> 42:21.350
就是你可以写

42:21.350 --> 42:22.150
你可以这样子写啊

42:22.150 --> 42:22.790
一个x

42:23.270 --> 42:23.990
为q

42:23.990 --> 42:25.190
也可以写为force

42:25.190 --> 42:26.710
也可以写它

42:27.830 --> 42:28.630
就是q

42:28.630 --> 42:30.070
布写它就是force

42:30.070 --> 42:30.390
对吧

42:30.390 --> 42:31.510
这就是布尔属性

42:32.630 --> 42:32.950
好

42:32.950 --> 42:33.910
那么这是个布尔属性

42:33.910 --> 42:34.470
一个x

42:34.470 --> 42:34.790
什么意思

42:34.790 --> 42:35.510
精确的

42:35.990 --> 42:36.550
啥意思呢

42:36.950 --> 42:38.950
如果说你添加这个布尔属性了

42:39.430 --> 42:41.190
那么它就会把匹配规则

42:41.670 --> 42:43.750
就之前这个匹配规则改了

42:44.310 --> 42:45.590
只有精确匹配

42:45.590 --> 42:46.630
它才会有这个的样式

42:48.150 --> 42:48.550
好

42:48.550 --> 42:49.110
比方说

42:49.110 --> 42:50.230
看一下你的例子啊

42:50.230 --> 42:51.670
当前访问路径是blog

42:53.670 --> 42:54.550
首页

42:54.550 --> 42:55.270
我是精确的

42:56.710 --> 42:57.350
你看啊

42:57.350 --> 42:58.150
我是精确的

42:59.430 --> 43:00.470
那么不好意思

43:00.470 --> 43:01.430
现在没有的样式了

43:02.550 --> 43:04.230
因为它一旦变成精确匹配的话

43:04.230 --> 43:06.230
它必须要它和它相同

43:06.230 --> 43:07.350
才会有这个的样式

43:07.350 --> 43:08.470
才会有之前这个的样式

43:09.990 --> 43:10.310
好

43:10.310 --> 43:10.710
blog

43:11.670 --> 43:13.110
不是精确匹配了

43:13.110 --> 43:13.430
ok

43:13.430 --> 43:14.550
那么它就有两个的样式

43:14.550 --> 43:15.430
跟之前一样

43:15.430 --> 43:16.150
对吧

43:16.150 --> 43:17.350
而报首是精确匹配了

43:17.350 --> 43:17.750
那么没有

43:17.750 --> 43:19.190
这个两个的这个东西已经没有

43:19.190 --> 43:19.350
好

43:19.350 --> 43:20.310
那么再比如

43:20.310 --> 43:21.590
blog detail123

43:21.590 --> 43:23.110
比方说这个访问路径

43:23.110 --> 43:23.270
好

43:23.270 --> 43:23.910
我们的导航

43:24.470 --> 43:25.190
这是我们导航

43:25.190 --> 43:25.910
首页导航

43:25.910 --> 43:26.710
它精确匹配

43:26.710 --> 43:27.830
那肯定是什么路

43:27.830 --> 43:28.710
什么类名都没有

43:28.710 --> 43:29.910
那如果说不是精确匹配

43:29.910 --> 43:31.270
是不是至少有一个这个东西

43:31.270 --> 43:32.070
你插开头吗

43:32.790 --> 43:33.030
好

43:33.030 --> 43:33.430
blog

43:34.230 --> 43:35.030
不是精确匹配

43:36.070 --> 43:36.230
啊

43:36.230 --> 43:37.110
因为精确匹配的话

43:37.110 --> 43:37.830
就啥都没有

43:37.830 --> 43:38.310
不是

43:38.310 --> 43:39.270
它不是精确匹配

43:42.150 --> 43:42.710
没啥意思吗

43:43.510 --> 43:44.070
好

43:44.070 --> 43:45.030
于是那我们把感人识

43:45.030 --> 43:45.830
再给大家看一下啊

43:47.670 --> 43:48.550
看一下这个A元素

43:49.590 --> 43:51.110
是不是现在什么样式都没有了

43:51.110 --> 43:52.790
没有一个精确匹配的

43:52.790 --> 43:53.670
看一下首页

43:53.670 --> 43:54.950
只有精确匹配的时候

43:54.950 --> 43:56.550
它才会加上加上这个样式啊

43:57.110 --> 43:58.470
前面的样式我就不用了

43:58.470 --> 43:59.110
就用这个

43:59.110 --> 44:00.230
rotor link active

44:00.230 --> 44:01.190
因为它也是只有

44:01.190 --> 44:02.310
精确匹配的时候才会有

44:03.030 --> 44:03.430
对不对

44:04.150 --> 44:04.550
哎

44:04.550 --> 44:05.750
是不是就相当于是

44:05.750 --> 44:07.190
我们之前写menu的时候

44:08.150 --> 44:09.190
写过了这个东西

44:11.540 --> 44:11.940
哎

44:12.580 --> 44:13.060
menu

44:14.260 --> 44:15.060
我这是menu

44:16.660 --> 44:17.220
是啊

44:17.220 --> 44:17.860
就这个东西

44:18.500 --> 44:19.060
一个z

44:19.620 --> 44:20.020
对不对

44:21.060 --> 44:23.140
那么现在把个属性名字换一下啊

44:23.140 --> 44:23.700
一个z

44:24.340 --> 44:25.380
是不是要精确匹配

44:27.060 --> 44:29.140
齐活状态

44:29.140 --> 44:32.100
是否要精确匹配

44:32.100 --> 44:33.220
好那么这里要被

44:33.220 --> 44:34.100
文章是force

44:34.900 --> 44:35.780
不需要精确匹配

44:35.780 --> 44:37.380
因为文章里边还有很多的路径

44:37.380 --> 44:38.260
都可能要匹配到文章

44:38.260 --> 44:39.380
只要一文章开头就行了

44:40.340 --> 44:41.860
首页必须要精确匹配

44:42.340 --> 44:43.860
关于我必须要精确匹配

44:44.420 --> 44:45.700
这个必须要精确匹配

44:45.700 --> 44:46.900
这个玩意必须要精确匹配

44:46.900 --> 44:48.100
因为他们都只有一个页面

44:48.660 --> 44:49.060
好了

44:49.060 --> 44:50.260
那么这个message不要了

44:50.260 --> 44:51.060
没有必要要了

44:51.940 --> 44:53.140
因为现在有一个rotor link

44:53.140 --> 44:54.420
还会自动帮我们加了一样式

44:55.060 --> 44:55.700
好回过来

44:57.540 --> 44:58.660
你看这是我们的数据

44:58.660 --> 45:00.660
那么我只需要把这个一个z绑定到哪

45:02.760 --> 45:05.000
绑定到item.一个z

45:06.600 --> 45:07.400
就完事了

45:07.400 --> 45:08.200
对吧

45:08.200 --> 45:09.080
好保存啊

45:09.080 --> 45:09.640
再看一下

45:13.290 --> 45:14.090
打开啊

45:14.090 --> 45:15.130
首先我们看首页

45:15.770 --> 45:17.050
精确匹配的是不是应该有

45:17.050 --> 45:17.850
他就有这个样式

45:17.850 --> 45:19.210
只看这个样式啊

45:19.210 --> 45:20.090
然后点文章

45:20.090 --> 45:21.770
精确匹配的是不是有这个样式

45:21.770 --> 45:22.970
但是文章这一块呢

45:22.970 --> 45:24.090
我不要求他精确匹配

45:24.090 --> 45:25.530
因此呢我们访文这样的地址

45:26.650 --> 45:27.770
访文这样的地址的时候

45:28.330 --> 45:28.730
你看啊

45:30.650 --> 45:31.530
访文这样的地址的时候

45:31.530 --> 45:32.330
是不是也有这个样式

45:32.330 --> 45:32.890
你看文章

45:33.850 --> 45:34.570
对不对

45:34.570 --> 45:36.090
而关于我是精确匹配的

45:36.090 --> 45:37.370
因此呢必须要跳到这

45:37.370 --> 45:38.570
才有这个东西

45:39.050 --> 45:39.610
项目效果

45:40.170 --> 45:41.770
哎你看现在是不是符合要求了

45:41.850 --> 45:43.370
我们是不是要只要设置这个样式就行了

45:43.850 --> 45:44.810
只要设置他就行了

45:45.370 --> 45:45.690
对不对

45:45.690 --> 45:47.450
而这个样式是不是我们已经设置了

45:47.450 --> 45:48.330
刚才已经设置了

45:48.330 --> 45:49.290
你看我们点文章

45:49.850 --> 45:50.250
没问题吧

45:50.250 --> 45:51.050
这些东西都没问题

45:51.050 --> 45:52.810
然后我们访问刚才的文章

45:52.810 --> 45:53.610
下边的地址啊

45:55.050 --> 45:56.330
你看他是不是也是选中的

45:56.970 --> 45:57.210
对吧

45:57.210 --> 45:58.090
就挺好了

45:58.090 --> 45:59.930
哎我们就把这个激活状态

46:00.410 --> 46:02.170
就是选中效果说好了

46:02.730 --> 46:03.690
好去梳理一下啊

46:05.130 --> 46:06.250
那有些人有些人说

46:06.250 --> 46:07.930
那这个内样是名字太长了

46:07.930 --> 46:08.970
我不喜欢这个内样是

46:08.970 --> 46:10.490
那我能不能还成是Laghty的呢

46:11.210 --> 46:11.610
可以

46:11.770 --> 46:12.730
它可以改的啊

46:12.730 --> 46:14.570
也是通过这个组件的两个属性感

46:14.570 --> 46:15.930
一个是改Laghty class

46:16.490 --> 46:17.210
这个属性

46:17.210 --> 46:18.090
改的是什么呢

46:18.090 --> 46:18.810
改的是这个

46:20.490 --> 46:21.930
改的是这个内样式的名字

46:22.890 --> 46:24.090
改的是他的名字

46:24.090 --> 46:25.210
还有一个呢是改这个

46:25.770 --> 46:27.370
一个是Laghty class

46:27.370 --> 46:28.010
改的是什么呢

46:28.010 --> 46:29.290
改的是这个内样式的名字

46:29.290 --> 46:30.090
这个内样式的名字呢

46:30.090 --> 46:30.890
我倒是用的不用

46:31.450 --> 46:32.250
用的没用

46:32.250 --> 46:33.210
因此呢我就

46:34.250 --> 46:34.730
改一下吧

46:35.370 --> 46:36.890
把这个Laghty的样式啊

46:37.930 --> 46:40.970
Laghty class的名字改成什么呢

46:41.050 --> 46:42.570
改成是Laghty的

46:44.250 --> 46:45.210
好那么这里呢

46:45.210 --> 46:46.970
改成是Laghty的

46:48.570 --> 46:49.290
是Laghty的

46:50.010 --> 46:51.530
然后改成自己的内样式

46:51.530 --> 46:52.890
好然后呢把这个

46:52.890 --> 46:54.090
一个Laghty的呢

46:54.090 --> 46:55.050
给它设为空啊

46:55.050 --> 46:55.850
不要这个样式了

46:55.850 --> 46:56.970
这个样式对我来说没用

46:58.490 --> 46:59.050
设为空

46:59.850 --> 47:00.730
好保存啊

47:00.730 --> 47:01.610
来看一下

47:01.610 --> 47:02.730
效果是一样的

47:02.730 --> 47:03.850
你看我们现在的A元数

47:06.580 --> 47:07.140
你看

47:07.140 --> 47:07.620
class

47:08.500 --> 47:09.460
是不是挺好的

47:09.460 --> 47:09.860
对不对

47:10.980 --> 47:12.180
OK这就是我们

47:13.380 --> 47:14.340
目前的啊

47:14.340 --> 47:15.140
这个地方的做法

47:15.140 --> 47:15.860
你看现在

47:15.860 --> 47:16.500
是不是效果

47:16.500 --> 47:17.860
各种效果都完成了

47:17.860 --> 47:19.380
无刷新跳转完成了

47:19.380 --> 47:20.260
根据不同的页面

47:20.260 --> 47:21.700
渲染不同的组件完成了

47:21.700 --> 47:22.820
其实也并不复杂啊

47:24.340 --> 47:25.620
好了还有什么事呢

47:26.500 --> 47:27.780
最后一件事给大家说一下

47:29.140 --> 47:31.540
路由本身知识也并不复杂啊

47:31.540 --> 47:32.420
小男孩还会有一些

47:32.420 --> 47:33.380
更多的一些

47:35.940 --> 47:36.420
知识啊

47:36.420 --> 47:37.220
我们后边再说

47:38.180 --> 47:39.380
大体知识就是这么一些

47:40.180 --> 47:41.620
下个东西叫命名路由

47:42.260 --> 47:43.060
这个啥意思呢

47:43.060 --> 47:43.780
其实目前呢

47:43.780 --> 47:44.900
还是有一些

47:44.900 --> 47:46.260
非常非常小的隐患

47:46.260 --> 47:46.980
这种隐患呢

47:46.980 --> 47:48.980
我希望大家永远不要遇到

47:48.980 --> 47:49.700
遇到了之后呢

47:49.700 --> 47:50.580
就有点麻烦了

47:51.220 --> 47:52.020
什么隐患呢

47:52.020 --> 47:52.580
是这样子

47:53.940 --> 47:54.740
你就按这个写

47:55.620 --> 47:56.660
写来写去写来一批

47:56.660 --> 47:58.180
把网络都快写完了

47:58.180 --> 47:59.540
产生了大堆超链

47:59.540 --> 48:00.260
大堆链接

48:00.260 --> 48:00.420
对吧

48:00.420 --> 48:01.620
以后我们遇到超链接

48:01.620 --> 48:03.860
反而是要在本站挑转页面的话

48:03.860 --> 48:05.700
我们都不会直接用A元数了

48:05.700 --> 48:06.980
应该用rotling

48:06.980 --> 48:07.300
对不对

48:08.180 --> 48:09.620
好我们的页面都快写完了

48:09.620 --> 48:10.580
有很多的超�接

48:11.300 --> 48:12.020
突然有一天

48:12.740 --> 48:13.540
你到老大

48:13.540 --> 48:15.460
你的万二的项目经理

48:15.460 --> 48:16.420
万二的产品经理

48:16.420 --> 48:17.380
就跑回来了

48:17.380 --> 48:18.020
哎小伙

48:18.980 --> 48:20.820
咱们想把这个文章页面呀

48:20.820 --> 48:21.780
这个block呀

48:21.780 --> 48:22.900
给它改一下

48:22.900 --> 48:23.460
改成什么呢

48:23.460 --> 48:24.420
改成article

48:25.780 --> 48:26.900
你看你要不要崩溃

48:28.340 --> 48:29.460
那你就改呗

48:29.460 --> 48:30.260
我们就跑到这个

48:30.260 --> 48:31.380
哪里去改

48:31.380 --> 48:32.180
改到这个吗

48:32.180 --> 48:32.980
路由配置这里

48:32.980 --> 48:34.180
是不是要把这个路由配置

48:34.180 --> 48:36.180
从block变成article

48:38.420 --> 48:39.300
这样子你改了过后

48:39.300 --> 48:40.900
你会发现链接全部不能用了

48:42.180 --> 48:42.900
手页没问题

48:43.540 --> 48:44.020
文章

48:44.980 --> 48:46.100
匹配不到了对吧

48:46.100 --> 48:47.380
是不是匹配不到这个主键了

48:47.940 --> 48:48.980
反映我这些都没问题

48:48.980 --> 48:50.100
就是这个东西匹配不到了

48:50.100 --> 48:50.980
那如果说你在页面上

48:50.980 --> 48:51.940
到处是超链接

48:51.940 --> 48:53.460
到处要挑到文章页面

48:53.460 --> 48:54.740
感觉链接地址是不是很多

48:54.740 --> 48:56.340
你还跑到主键里面到处去改

48:57.620 --> 48:59.940
跑到主键component

49:01.540 --> 49:02.100
这儿啊

49:03.060 --> 49:03.780
是不是要改这儿

49:04.580 --> 49:05.380
哎把它改

49:07.060 --> 49:07.940
要改这儿对吧

49:08.660 --> 49:09.540
说改成article

49:10.980 --> 49:12.820
那这种东西能不能解决的

49:12.820 --> 49:14.500
那这个是个小问题啊

49:14.500 --> 49:15.220
也有的时候呢

49:15.220 --> 49:15.940
如果说发生了

49:15.940 --> 49:17.140
它就不是小问题了

49:17.140 --> 49:18.260
没有发生就是小问题

49:19.700 --> 49:20.420
那怎么解决

49:20.420 --> 49:21.220
能不能解决呢

49:21.220 --> 49:21.940
可以解决的

49:23.060 --> 49:23.780
可以解决的

49:23.780 --> 49:24.260
你看啊

49:25.380 --> 49:27.220
我们改动了这个路径

49:27.860 --> 49:28.900
含义变没变

49:29.860 --> 49:30.820
含义不能变吧

49:30.820 --> 49:32.500
含义变的就是徐求都变了

49:32.500 --> 49:34.260
那徐求变了肯定要说就改代吧

49:34.260 --> 49:35.540
这是毫无疑问的没办法

49:36.260 --> 49:38.340
那含义一般是不会变的啊

49:38.340 --> 49:39.300
它只是路径变的

49:39.300 --> 49:40.500
那含义还是博客啊

49:41.220 --> 49:42.180
还是文章啊对吧

49:42.980 --> 49:44.420
含义并没有变

49:44.420 --> 49:45.700
因此呢怎么办呢

49:45.700 --> 49:47.140
怎么来解决这个问题呢

49:47.140 --> 49:48.900
我们叫做命名路由

49:48.900 --> 49:49.860
什么叫命名路由

49:51.140 --> 49:53.220
我给每一个路由啊取个名字

49:54.180 --> 49:55.940
比方第一个路由的名字就叫做

49:59.220 --> 50:00.180
第二个路由的名字

50:01.860 --> 50:02.900
或者大写吧

50:02.900 --> 50:03.860
看你自己的习惯了

50:04.820 --> 50:06.180
呃 about

50:07.380 --> 50:08.100
要取个名字啊

50:08.100 --> 50:08.980
个名字随便取

50:08.980 --> 50:10.260
甚至可以取中文

50:10.260 --> 50:11.940
我还是算了

50:11.940 --> 50:12.580
不要取中文

50:12.580 --> 50:13.700
这个只是个名字而已啊

50:13.700 --> 50:15.540
它并不表示的是路径

50:15.540 --> 50:16.660
跟路径没有什么关系

50:16.660 --> 50:17.700
这是blog

50:17.700 --> 50:19.220
表示我们的博客

50:20.500 --> 50:21.780
这是那个什么

50:21.780 --> 50:25.620
这是我们的project

50:25.620 --> 50:29.240
给每个路由取个名字

50:29.240 --> 50:31.160
message

50:31.160 --> 50:33.480
啊管理路径是啥

50:33.480 --> 50:34.360
随便的路径是啥

50:34.680 --> 50:35.880
反正你就叫了个名字

50:35.880 --> 50:36.920
你名字不能变

50:36.920 --> 50:38.840
因为名字表示的是含义

50:38.840 --> 50:39.720
含义不能变

50:39.720 --> 50:41.000
对吧路径随便变

50:41.000 --> 50:42.680
我们先给它变成blog吧

50:44.040 --> 50:45.240
好那么接下来呢

50:45.240 --> 50:47.160
我们在挑转的时候啊

50:47.160 --> 50:48.680
在to挑转的时候啊

50:48.680 --> 50:49.720
你看这里实例

50:49.720 --> 50:52.280
我这里给每个路由取个名字

50:52.280 --> 50:54.120
然后挑转的时候呢

50:54.120 --> 50:56.120
就不是直接像之前那样子啊

50:56.120 --> 50:57.080
写个to

50:57.080 --> 50:58.200
然后呢写个什么

50:58.200 --> 50:59.960
呃富是吧

50:59.960 --> 51:01.720
这样子呢就是直接写路径嘛

51:01.720 --> 51:02.760
你不要写路径了

51:03.640 --> 51:04.680
你该写个对象

51:04.680 --> 51:05.560
啊写对象的话

51:05.560 --> 51:06.760
是不是必须要用动态绑定

51:06.760 --> 51:08.120
你不要写ges代嘛

51:08.120 --> 51:09.400
才能写对象

51:09.400 --> 51:10.920
写对象对象里边

51:10.920 --> 51:12.440
用diamonds首先来表示

51:12.440 --> 51:14.760
我要挑转的路由名字

51:14.760 --> 51:15.560
那么他就会从

51:15.560 --> 51:17.000
从那个路由配置里面去找

51:17.000 --> 51:17.800
哎

51:17.800 --> 51:19.240
一跳到的名字是富

51:19.240 --> 51:19.800
找到这个了

51:19.800 --> 51:21.000
哦他的路径是这个

51:21.000 --> 51:21.480
因此呢

51:21.480 --> 51:23.080
还会自动的把这个路径放到这来

51:23.880 --> 51:25.080
明白了意思吧

51:25.080 --> 51:27.400
这样子呢是不是就解除了跟什么

51:27.400 --> 51:29.080
跟路径之间的偶和了

51:30.520 --> 51:32.280
那你只需要关注名字就行了

51:32.360 --> 51:34.200
因此呢我这边把这个改一下啊

51:34.200 --> 51:35.720
我这里不用另一个这个名字的

51:35.720 --> 51:37.160
啊这个属性的啊

51:37.160 --> 51:37.800
给他换一个

51:39.560 --> 51:39.960
Name

51:41.980 --> 51:42.460
啊

51:43.580 --> 51:44.860
Name我们这里呢用

51:44.860 --> 51:45.180
Home

51:48.730 --> 51:49.130
Blog

51:50.970 --> 51:51.370
About

51:54.380 --> 51:54.940
Project

51:57.370 --> 51:58.090
Message

51:58.090 --> 51:58.570
对吧

51:58.570 --> 52:00.490
我们这里只不过是循环绑定而已

52:00.490 --> 52:02.010
其实就是把这个东西

52:02.010 --> 52:03.930
名字呢放到to这里

52:03.930 --> 52:05.130
而to是什么呢

52:05.130 --> 52:06.330
to是一个对象

52:06.330 --> 52:07.850
对象里边Name属性

52:07.850 --> 52:09.290
给他复制为item

52:11.290 --> 52:11.690
对吧

52:11.690 --> 52:13.450
只不过一个循环动态绑定而已

52:14.730 --> 52:16.650
那么他就会根据不同的名字

52:16.650 --> 52:18.570
去找到对应的路径生成

52:19.370 --> 52:20.090
好你看

52:20.090 --> 52:20.890
没问题对吧

52:20.890 --> 52:21.850
你看没问题

52:21.850 --> 52:22.570
好接下来一看

52:22.570 --> 52:23.850
神奇的事情发生了

52:23.850 --> 52:25.450
我现在呢去改动这个blog

52:26.570 --> 52:27.930
改动了路径article

52:28.650 --> 52:29.370
现在也没问题

52:30.570 --> 52:31.690
现在不会有问题了

52:31.690 --> 52:32.330
为什么

52:32.330 --> 52:33.610
因为我们这边

52:33.610 --> 52:35.850
关联的是名字不是路径的

52:35.850 --> 52:38.170
是不是解除了跟路径之间的偶和啊

52:38.170 --> 52:39.770
不是路径的没有直接写路径

52:39.930 --> 52:41.370
只是写了名字名字变变变吗

52:41.370 --> 52:42.410
没有变啊

52:42.410 --> 52:45.290
那么他会根据名字动态的去修改他的路径

52:45.290 --> 52:46.170
你看啊

52:46.170 --> 52:48.410
所谓现在文章自动就变成article了

52:50.090 --> 52:50.490
看到没

52:51.370 --> 52:52.650
所以很舒服这样子

52:52.650 --> 52:55.050
这叫命名路由并不复杂吧

52:55.930 --> 52:56.330
OK

52:56.330 --> 52:58.410
那么目前的代码就写成这个样子了

52:58.410 --> 52:59.450
好就回味一下

52:59.450 --> 53:00.650
代码其实并不多

53:00.650 --> 53:01.530
就那么几行代码

53:02.090 --> 53:05.050
但是里边一些很多道理的要理解清楚

53:05.050 --> 53:05.850
反正将来呢

53:05.850 --> 53:06.890
如果说稍微需求一遍

53:06.890 --> 53:08.330
你又不知道该怎么办了

53:08.490 --> 53:09.850
已经把道理也清楚啊

53:10.410 --> 53:11.610
好这是这里刻的内容啊

53:11.610 --> 53:12.890
这一刻的作业很简单

53:12.890 --> 53:14.890
就是把这个玩意儿写成这个样子

53:15.530 --> 53:16.170
好最后呢

53:16.170 --> 53:17.850
我们来看一下我们的思维导图啊

53:17.850 --> 53:18.730
思维导图里边

53:19.530 --> 53:20.490
把这一刻的内容呢

53:20.490 --> 53:22.170
再快速的过一下

53:22.170 --> 53:24.890
学了一个第一个五佑插件叫五佑Rotor

53:25.610 --> 53:27.930
也就是说我们后边还有一些插件啊

53:27.930 --> 53:30.570
Rotor里边他给你提供了两个全局组建一个是五佑

53:30.570 --> 53:33.050
都Rotor五佑用来站位的对吧

53:33.050 --> 53:34.410
把匹配道的组建宣传出来

53:35.050 --> 53:37.050
Rotor另一可能就是提供一个导航

53:37.130 --> 53:39.050
导航里边有些五佑

53:39.050 --> 53:43.050
two exact active class

53:43.050 --> 53:43.930
还有一个什么

53:43.930 --> 53:45.530
exact active class

53:45.530 --> 53:46.330
这是说过的啊

53:47.210 --> 53:48.410
好然后呢

53:48.410 --> 53:49.610
路由的匹配呢

53:49.610 --> 53:51.130
需要你配置两个东西啊

53:51.130 --> 53:52.410
目前需要配置两个东西

53:52.410 --> 53:53.210
一个是Rotor

53:53.770 --> 53:54.490
匹配规则

53:54.490 --> 53:55.530
这是很重要的

53:55.530 --> 53:57.130
不同的路径匹配到什么组建

53:58.490 --> 53:59.850
好然后就模式

53:59.850 --> 54:00.570
三种模式

54:00.570 --> 54:02.490
Hashi history abstract

54:02.970 --> 54:03.290
对吧

54:04.650 --> 54:06.570
OK那么这就是这几个内容

