WEBVTT

00:00.300 --> 00:04.900
好了 咱们这节课一讲完 就可以开始干活了

00:04.900 --> 00:08.100
就一步一步一边学习 一边去做那个项目了

00:08.100 --> 00:10.700
但是还需要准备这节课的知识

00:10.700 --> 00:14.900
这节课讲什么呢 讲维尤里面一个极其重要的概念

00:14.900 --> 00:18.100
天天都要用的 就是组建

00:18.100 --> 00:22.100
那么为什么要出现组建呢 其实上天课咱们也看到了

00:22.100 --> 00:26.300
维尤呢 它就是两块东西嘛 一块是模板

00:26.300 --> 00:30.100
模板你可以写到这 也可以到这个template里面学一配置

00:30.500 --> 00:33.100
这里写个字书串 一个模板

00:33.100 --> 00:37.500
然后呢 就是一个其他的配置 包括什么数据啊

00:37.500 --> 00:40.100
方法呀 对吧 一些配置

00:40.100 --> 00:44.700
那么你可以想象一下 在一个完整的项目中

00:44.700 --> 00:47.300
这个模板是不是很庞大呀

00:47.300 --> 00:50.500
比方说我们做这个项目嘛 而且是一个单页运用程序

00:50.500 --> 00:52.300
你不能只考虑这一个页面

00:52.300 --> 00:55.100
你还考虑其他页面对吧 都要起到模板里面去

00:55.100 --> 00:57.700
这个模板会不会变得极其的庞大

00:57.900 --> 01:00.700
那么庞大过后的复杂度就增加了

01:00.700 --> 01:05.700
还有什么问题呢 就是东西多了 数据是不是变多了呀

01:05.700 --> 01:08.700
各种图片啊 各种标题啊 还有什么文章啊

01:08.700 --> 01:11.300
文章内容啊 详情啊 分类啊

01:11.300 --> 01:13.700
乱七八糟的数据是不是变得越来越多

01:13.700 --> 01:16.700
数据多那个data的配置是不是越来越大

01:16.700 --> 01:19.700
而且呢 还有一些方法 对吧

01:19.700 --> 01:21.700
方法就是表示一些逻辑的处理 对吧

01:21.700 --> 01:25.700
一些数据的变化 那么这变化逻辑是不是变得越来越复杂

01:25.700 --> 01:28.700
如果说我们不考 如果说我们啥都不管

01:28.700 --> 01:31.700
所有的东西全部往模板里面写

01:31.700 --> 01:35.700
然后所有的数据配置啊 方法配置呢 全部写到一块

01:35.700 --> 01:38.700
整个程序的复杂度了 直接突破天际了

01:38.700 --> 01:41.700
尽管呢 我又已经减轻了很多复杂度了啊

01:41.700 --> 01:44.700
就可以我们不用去操作真实动物 但是呢

01:44.700 --> 01:46.700
还是很复杂

01:46.700 --> 01:48.700
就第一个问题 复杂度的问题

01:48.700 --> 01:50.700
第二个问题呢 就是重用的问题

01:50.700 --> 01:54.700
因为在一个项目里边 总归是有一些东西是要重复的

01:54.700 --> 01:57.700
你看右边这个区域啊 目前显色是文章分类

01:57.700 --> 02:01.700
然后呢 进入文章详情过后呢 它显色什么呢 显色是目录

02:01.700 --> 02:04.700
差不多 对吧 有多少区别呢

02:04.700 --> 02:08.700
央视也好 数据有逻辑也好 其实都差不多

02:08.700 --> 02:10.700
所有的意思吧

02:10.700 --> 02:12.700
所以说呢 有些地方会重复啊

02:12.700 --> 02:14.700
包括像这个啊 像这些图标

02:14.700 --> 02:17.700
尽管图标的显色东西不一样的是图标

02:17.700 --> 02:20.700
大体上的逻辑是一样的嘛

02:20.700 --> 02:22.700
所以这一块也是在重复啊

02:22.700 --> 02:24.700
网站里边倒是重复的东西 没有那么多

02:24.700 --> 02:27.700
包括我们切换的时候 你看这个转圈圈的

02:27.700 --> 02:31.700
你看这个转圈圈的 就是楼顶 夹在中那个效果

02:31.700 --> 02:34.700
是不是也倒数要用 对吧 也是一个重复

02:34.700 --> 02:36.700
网站中总归是有一些重复的东西

02:36.700 --> 02:38.700
如果说你不考虑的话 全部写到一块的话

02:38.700 --> 02:40.700
你重复的东西怎么提取呢

02:40.700 --> 02:43.700
就遇到两个问题

02:43.700 --> 02:45.700
一个是复杂度的问题

02:45.700 --> 02:46.700
怎么来降低复杂度

02:46.700 --> 02:49.700
第二个问题呢 是怎么来解决重复的东西

02:49.700 --> 02:53.700
那么这两个问题呢 都要靠组建来解决

02:53.700 --> 02:56.700
组建主要的出现的目的啊 就是解决两个问题

02:56.700 --> 03:00.700
一个是降低复杂度 提升代码的可图性和可维护性

03:00.700 --> 03:04.700
其实降低复杂度呢 我们学的你们不断的学习啊

03:04.700 --> 03:08.700
就是降低复杂度基本上的思想都是一致的

03:08.700 --> 03:14.850
就是要细地度的划分 细地度

03:14.850 --> 03:19.850
力度呢 把力度从一个出力度划分为细地度

03:19.850 --> 03:21.850
自然而然就降低了

03:21.850 --> 03:24.850
像那个 我们目前的话

03:24.850 --> 03:26.850
如果说什么都不处理的话 全部写到一块的话

03:26.850 --> 03:28.850
这个力度是很粗的

03:28.850 --> 03:30.850
因为我们的力度最小单位是什么

03:30.850 --> 03:33.850
就整个网站 这个力度太粗了

03:33.850 --> 03:35.850
那么我们把力度干化细一点

03:35.850 --> 03:36.850
它的复杂度就降低了

03:36.850 --> 03:37.850
那么复杂度降低了

03:37.850 --> 03:39.850
同时重用性也变得更好

03:39.850 --> 03:42.850
提升局部代码的可重复性

03:42.850 --> 03:46.850
一个组建实际上是啥呀

03:46.850 --> 03:50.850
其实非常简单 就是页面中的一个区域

03:50.850 --> 03:52.850
你看我们这个页面

03:52.850 --> 03:53.850
比方说这个区域

03:53.850 --> 03:55.850
我们就可以把它做成一个组建

03:55.850 --> 03:56.850
可以重复使用的

03:56.850 --> 04:01.850
再比方说我们这个文章

04:01.850 --> 04:03.850
举个例子吧 随便举些例子

04:03.850 --> 04:06.850
这一条文章就可以做成一个组建

04:06.850 --> 04:08.850
可以重复使用的

04:08.850 --> 04:11.850
包括这个 右边这个一个边南数据

04:11.850 --> 04:13.850
我们也可以把它做成一个组建

04:13.850 --> 04:14.850
可以重复使用的

04:15.850 --> 04:17.850
有的时候也不是为了紧紧

04:17.850 --> 04:18.850
是为了重复使用

04:18.850 --> 04:19.850
而是为了降低复杂度

04:19.850 --> 04:20.850
把它分析一点

04:20.850 --> 04:22.850
这样子变于管理

04:22.850 --> 04:24.850
变于阅读 变于维护

04:24.850 --> 04:26.850
都是起于这么一个目的

04:26.850 --> 04:27.850
一面上任何一个区域

04:27.850 --> 04:28.850
你觉得合适

04:28.850 --> 04:31.850
你就把它做成一个组建

04:31.850 --> 04:33.850
有的组建很小

04:33.850 --> 04:35.850
有的组建比方像个图标很小

04:35.850 --> 04:37.850
有的组建比较大

04:37.850 --> 04:40.850
像这个左边南就是一个大的组建

04:40.850 --> 04:43.850
也就是组建里边有可能会套组建的

04:43.850 --> 04:44.850
这个是大组建

04:44.850 --> 04:46.850
大组建里边套了三个组建

04:46.850 --> 04:47.850
比方说取个地址

04:47.850 --> 04:49.850
这个组建 这个组建 这个组建

04:49.850 --> 04:51.850
这个组建里边又套了一些别的组建

04:51.850 --> 04:53.850
又套了一个图标组建

04:53.850 --> 04:54.850
看到没有

04:54.850 --> 04:56.850
组建之间也是有嵌套关系的

04:58.850 --> 05:00.850
组建实际上是什么呢

05:00.850 --> 05:02.850
就是我们一个在维护中

05:02.850 --> 05:05.850
一个管理开发工作的一个单位

05:05.850 --> 05:07.850
一个组建里边

05:07.850 --> 05:08.850
它有三个部分组成

05:08.850 --> 05:09.850
一个是功能

05:09.850 --> 05:11.850
功能其实就是我们组建里边

05:11.850 --> 05:13.850
写的一些GS代码

05:13.850 --> 05:15.850
还有东西就是内容

05:15.850 --> 05:17.850
组建里边也可以配置模板

05:17.850 --> 05:19.850
那么就是模板代码

05:19.850 --> 05:21.850
还有样式就是CSS代码

05:21.850 --> 05:23.850
不过目前大家还没有接触

05:23.850 --> 05:24.850
脚手架

05:24.850 --> 05:26.850
我们下节可以来说脚手架的问题

05:26.850 --> 05:28.850
还没有接触脚手架

05:28.850 --> 05:29.850
所以说这个CS代码

05:29.850 --> 05:31.850
我们可能还是会写一些全局的

05:31.850 --> 05:32.850
没关系

05:32.850 --> 05:34.850
反正你心里边有一个

05:34.850 --> 05:36.850
这么一个感性的这么一个概念

05:36.850 --> 05:38.850
组建大概就是一个区域

05:38.850 --> 05:39.850
这个区域有样式

05:39.850 --> 05:40.850
有内容

05:40.850 --> 05:41.850
就是ATM内容

05:41.850 --> 05:43.850
有什么功能

05:43.850 --> 05:45.850
那么接下来我们来看一下

05:45.850 --> 05:47.850
组建在维护里边到底该怎么去开发

05:47.850 --> 05:48.850
怎么来做

05:48.850 --> 05:49.850
你把这一块学完了

05:49.850 --> 05:51.850
其实非常简单并不复杂

05:51.850 --> 05:52.850
学完了之后大概就知道了

05:52.850 --> 05:53.850
怎么去弄了

05:53.850 --> 05:56.850
当然我们要把组建用的

05:56.850 --> 05:58.850
把组建应用的灵活

05:58.850 --> 05:59.850
把组建用的好

05:59.850 --> 06:00.850
那么我们还需要一个项目

06:00.850 --> 06:02.850
慢慢去练习

06:03.850 --> 06:04.850
首先的第一个

06:04.850 --> 06:06.850
就是怎么来创建一个组建

06:06.850 --> 06:08.850
其实组建的创建在维护里边

06:08.850 --> 06:09.850
特别简单

06:09.850 --> 06:10.850
就是一个对象

06:10.850 --> 06:12.850
就是一个组建配置对象

06:12.850 --> 06:13.850
举个例子

06:13.850 --> 06:15.850
比方说我们在这里

06:15.850 --> 06:16.850
就写这么一个对象

06:16.850 --> 06:17.850
随便定个变量

06:17.850 --> 06:23.850
就是一个MyButton

06:23.850 --> 06:25.850
一个按钮组建

06:25.850 --> 06:26.850
那么比方说

06:26.850 --> 06:27.850
我们这里对象的没写的

06:27.850 --> 06:28.850
就是一个对象吗

06:28.850 --> 06:29.850
那对象里面写上了

06:29.850 --> 06:30.850
其实这个对象

06:30.850 --> 06:31.850
就是一个配置对象

06:31.850 --> 06:33.850
跟那个维护的配置是一样的

06:33.850 --> 06:35.850
是一样的

06:35.850 --> 06:36.850
有什么区别

06:36.850 --> 06:37.850
有一点点区别

06:38.850 --> 06:39.850
啥区别呢

06:39.850 --> 06:41.850
就是data

06:41.850 --> 06:43.850
首先没有这个eL

06:43.850 --> 06:45.850
组建没有这个eL

06:45.850 --> 06:46.850
没有这个配置

06:46.850 --> 06:47.850
这个配置必须要在

06:47.850 --> 06:49.850
维护的构造函数里边配置

06:49.850 --> 06:51.850
表示把整个维护的

06:51.850 --> 06:52.850
生成的真实动物

06:52.850 --> 06:53.850
挂载到哪

06:53.850 --> 06:55.850
这组建里面没有这个配置

06:55.850 --> 06:56.850
首先就是第一个区别

06:56.850 --> 06:57.850
组建里面

06:57.850 --> 06:58.850
有没有data这个配置

06:58.850 --> 06:59.850
一纠

06:59.850 --> 07:00.850
但是这个data配置

07:00.850 --> 07:01.850
是一个函数

07:01.850 --> 07:03.850
它不是一个

07:03.850 --> 07:04.850
不是一个对象

07:04.850 --> 07:05.850
你看在这里面

07:05.850 --> 07:06.850
是不是可以

07:06.850 --> 07:07.850
是不是一个对象

07:07.850 --> 07:08.850
配置data的时候

07:08.850 --> 07:09.850
对吧

07:09.850 --> 07:10.850
那么这边

07:10.850 --> 07:11.850
组建里面的data是一个函数

07:11.850 --> 07:12.850
这个函数

07:12.850 --> 07:14.850
它会的反回一个对象

07:14.850 --> 07:15.850
对吧

07:15.850 --> 07:16.850
那么也就是说

07:16.850 --> 07:17.850
它转变了一下

07:17.850 --> 07:18.850
转变了一下

07:18.850 --> 07:19.850
就是这边的直接配置

07:19.850 --> 07:20.850
为一个对象

07:20.850 --> 07:21.850
那么在组建里面的data

07:21.850 --> 07:22.850
它是一个函数

07:22.850 --> 07:23.850
这个函数反回一个对象

07:23.850 --> 07:24.850
对对象里面

07:24.850 --> 07:26.850
可以提供各种各样的数据

07:26.850 --> 07:27.850
没什么意思吧

07:27.850 --> 07:28.850
比方说

07:28.850 --> 07:29.850
我们在提供一个数据边

07:29.850 --> 07:31.850
tod

07:31.850 --> 07:33.850
数量0

07:34.850 --> 07:35.850
非常简单

07:35.850 --> 07:36.850
然后组建里面

07:36.850 --> 07:37.850
还有没有别的配置呢

07:37.850 --> 07:38.850
还有

07:38.850 --> 07:39.850
组建里面的配置

07:39.850 --> 07:40.850
就是模办

07:40.850 --> 07:41.850
组建的模办

07:41.850 --> 07:42.850
模办配置到哪呢

07:42.850 --> 07:43.850
组建里面的模办

07:43.850 --> 07:44.850
就不能配置到这了

07:44.850 --> 07:45.850
就不能写到这了

07:45.850 --> 07:47.850
必须要写到template这里

07:47.850 --> 07:48.850
这里

07:48.850 --> 07:49.850
必须要写到template这里

07:49.850 --> 07:50.850
配置模办

07:50.850 --> 07:52.850
当然也可以不配置模办

07:52.850 --> 07:53.850
配置什么

07:53.850 --> 07:54.850
配置render

07:54.850 --> 07:55.850
对吧

07:55.850 --> 07:56.850
那个render生成一个

07:56.850 --> 07:57.850
动物数

07:57.850 --> 07:58.850
这个虚的动物数

07:58.850 --> 07:59.850
不过那样子

07:59.850 --> 08:00.850
配置比较麻烦一点

08:00.850 --> 08:01.850
直接配置个模办

08:01.850 --> 08:02.850
模办里面比较重

08:02.850 --> 08:03.850
这张简单的东西

08:03.850 --> 08:04.850
我们就配置一个button

08:04.850 --> 08:05.850
这个组建里面

08:05.850 --> 08:06.850
提供什么

08:06.850 --> 08:07.850
这是组建的数据

08:07.850 --> 08:08.850
对吧

08:08.850 --> 08:09.850
然后组建里面

08:09.850 --> 08:11.850
它的展示的东西

08:11.850 --> 08:16.660
就是一个button

08:16.660 --> 08:17.660
button

08:17.660 --> 08:19.660
button里面显示啥呢

08:19.660 --> 08:20.660
就显示

08:20.660 --> 08:22.660
当前点击了

08:22.660 --> 08:24.660
多少次呢

08:25.660 --> 08:26.660
cult

08:29.670 --> 08:30.670
看呗

08:30.670 --> 08:31.670
不就是个模办吗

08:31.670 --> 08:32.670
这里是胡志愚

08:32.670 --> 08:33.670
对吧

08:33.670 --> 08:34.670
这就是写好的一个组建

08:34.670 --> 08:35.670
这个组建的写法

08:35.670 --> 08:36.670
跟之前那个实力的配置

08:36.670 --> 08:37.670
实际上是差不多的

08:37.670 --> 08:38.670
就一点点区别

08:38.670 --> 08:40.670
把这几个区别记住

08:40.670 --> 08:41.670
其实也不用记

08:41.670 --> 08:42.670
你写多了

08:42.670 --> 08:44.670
这东西就变成一个条件反射了

08:44.670 --> 08:46.670
这是创建组建

08:46.670 --> 08:47.670
那么创建组建过后

08:47.670 --> 08:48.670
那个页面上有东西

08:48.670 --> 08:49.670
肯定是还是没有东西

08:49.670 --> 08:51.670
他都不知道这个组建往哪放

08:51.670 --> 08:52.670
都不知道往哪放

08:52.670 --> 08:53.670
比方说你在页面上

08:53.670 --> 08:55.670
做了一个图标组建

08:55.670 --> 08:56.670
图标组建放在哪呢

08:56.670 --> 08:57.670
放到页面上哪个位置

08:57.670 --> 08:58.670
他都不知道

08:58.670 --> 08:59.670
所以说还需要做一些处理

08:59.670 --> 09:02.670
首先有了这么一个组建之后

09:02.670 --> 09:04.670
你光创建一个组建还没用

09:04.670 --> 09:05.670
你还要去注册一个组建

09:05.670 --> 09:07.670
注册之后才能去使用它

09:07.670 --> 09:08.670
那怎么来注册呢

09:08.670 --> 09:11.670
注册分为全局注册和局部注册

09:11.670 --> 09:12.670
我讲一下啊

09:12.670 --> 09:14.670
什么叫全局注册

09:14.670 --> 09:16.670
全局注册之后

09:16.670 --> 09:19.670
你其他任何地方都会直接使用

09:19.670 --> 09:21.670
这个组建可以直接使用

09:21.670 --> 09:23.670
因为我们知道组建的可以

09:23.670 --> 09:25.670
在网站上一个网页里边

09:25.670 --> 09:26.670
组建可以写很多

09:26.670 --> 09:27.670
像咱们这个项目里边

09:27.670 --> 09:29.670
我没有具体去数过

09:29.670 --> 09:31.670
可能又没有20个

09:31.670 --> 09:33.670
没有50个也有30个了

09:33.670 --> 09:34.670
反射的组建也蛮多的

09:35.670 --> 09:37.670
我们这么一个简单的

09:37.670 --> 09:38.670
这么一个页面

09:38.670 --> 09:39.670
一个系统都有这么多组建

09:39.670 --> 09:40.670
那么你可以想象一下

09:40.670 --> 09:41.670
复杂的系统

09:41.670 --> 09:42.670
那是成本上千个组建

09:42.670 --> 09:44.670
组建会特别特别多

09:44.670 --> 09:46.670
而且组建之间可能有千套关系

09:46.670 --> 09:47.670
上面的组建

09:47.670 --> 09:48.670
千套下面的组建

09:48.670 --> 09:49.670
下面的组建又千套一个组建

09:49.670 --> 09:51.670
到处都在用

09:51.670 --> 09:52.670
所以说呢

09:52.670 --> 09:54.670
组建的关系会比较复杂

09:54.670 --> 09:57.670
那么我们使用组建的时候

09:57.670 --> 09:59.670
到底哪个组建能够用这个

09:59.670 --> 10:01.670
A组建能不能用B组建

10:01.670 --> 10:02.670
B组建能不能用C组建

10:02.670 --> 10:05.670
那么跟一个组册关系有关系

10:05.670 --> 10:07.670
如果说你对组建进行的

10:07.670 --> 10:09.670
全局组册

10:09.670 --> 10:11.670
那么你这个组建

10:11.670 --> 10:13.670
比较这个组建我做的全局组册

10:13.670 --> 10:15.670
那么这个组建就可以使用在任何地方

10:15.670 --> 10:18.670
我在无忧实力里边可以做

10:18.670 --> 10:19.670
可以用

10:19.670 --> 10:20.670
在别的组建里边也可以用它

10:20.670 --> 10:21.670
到处都可以用它

10:21.670 --> 10:22.670
明儿的意思吧

10:22.670 --> 10:24.670
就是这个叫全局组册

10:24.670 --> 10:26.670
比方说像这个图

10:26.670 --> 10:29.670
就可以通个理解清楚就是

10:29.670 --> 10:30.670
我这里全局组册的一个组建

10:31.670 --> 10:34.670
那么无忧实力里边可以使用它

10:34.670 --> 10:36.670
别的组建里边也可以使用它

10:36.670 --> 10:37.670
到处都可以使用它

10:37.670 --> 10:38.670
就这么个意思

10:38.670 --> 10:40.670
那么怎么来全局组册呢

10:40.670 --> 10:41.670
极其的简单

10:41.670 --> 10:43.670
就写一句话就行了

10:43.670 --> 10:44.670
无忧不是个构造函数吗

10:44.670 --> 10:46.670
构造函数里边有提供的一个静态方法

10:46.670 --> 10:48.670
叫component

10:48.670 --> 10:50.670
component是什么意思

10:50.670 --> 10:51.670
就组建的意思

10:51.670 --> 10:53.670
这是一个方法

10:53.670 --> 10:55.670
这个方法里边提供了两个参数

10:55.670 --> 10:56.670
第一个参数

10:56.670 --> 10:59.670
组建名称

10:59.670 --> 11:00.670
第二个参数呢

11:00.670 --> 11:02.670
组建了一个配置对象

11:02.670 --> 11:03.670
就是my button

11:03.670 --> 11:05.670
当然你可以直接把这个配置对象

11:05.670 --> 11:06.670
你可以先不用保持它变量

11:06.670 --> 11:07.670
你可以直接放上转口

11:07.670 --> 11:08.670
可不可以

11:08.670 --> 11:09.670
那不一样吗

11:09.670 --> 11:10.670
就啥区别呢

11:10.670 --> 11:11.670
对吧

11:11.670 --> 11:12.670
只不过呢

11:12.670 --> 11:13.670
我把分开写了

11:13.670 --> 11:15.670
这就全局组册的一个组建

11:16.670 --> 11:18.670
全局组册

11:19.670 --> 11:21.670
组册了一个组建

11:21.670 --> 11:22.670
这才是组建名称

11:22.670 --> 11:23.670
跟那个变量名称无关

11:23.670 --> 11:24.670
它只是个变量而已

11:24.670 --> 11:25.670
你可以用abc

11:25.670 --> 11:26.670
可以用任何东西都可以

11:26.670 --> 11:28.670
这才是组建名称

11:28.670 --> 11:30.670
那么这个组建名称写啥呢

11:30.670 --> 11:31.670
我们一般来说

11:31.670 --> 11:32.670
肯定不能写中文

11:32.670 --> 11:33.670
你写一个

11:35.670 --> 11:37.670
我建议大家来写上一个单词

11:37.670 --> 11:39.670
比如说我们就给他写个my button

11:40.670 --> 11:42.670
这是组建名称

11:42.670 --> 11:43.670
那么这样子

11:43.670 --> 11:44.670
我就全局组册的组建了

11:44.670 --> 11:45.670
那么看一下页面

11:45.670 --> 11:46.670
有效果吗

11:46.670 --> 11:47.670
没有效果

11:47.670 --> 11:48.670
只是说

11:48.670 --> 11:49.670
现在我能够用这个组建了

11:49.670 --> 11:50.670
在什么地方用呢

11:50.670 --> 11:51.670
随便在你的时代

11:51.670 --> 11:52.670
什么地方用

11:52.670 --> 11:53.670
那么接下来

11:53.670 --> 11:55.670
就是全局组册

11:55.670 --> 11:56.670
比方说

11:56.670 --> 11:57.670
我举个例子

11:57.670 --> 11:59.670
我能不能在这里用呢

11:59.670 --> 12:00.670
在这个viu

12:00.670 --> 12:02.670
viu实地里边用这个组建呢

12:02.670 --> 12:03.670
可以啊

12:03.670 --> 12:04.670
你在模板里边

12:04.670 --> 12:05.670
我们怎么写呢

12:05.670 --> 12:06.670
我不要写个div

12:06.670 --> 12:07.670
div

12:07.670 --> 12:09.670
div里边我要用这个组建了

12:09.670 --> 12:10.670
我怎么用呢

12:10.670 --> 12:11.670
我就可以这样子用

12:11.670 --> 12:13.670
你的组建名称叫做my button对吧

12:13.670 --> 12:14.670
那么接下来

12:14.670 --> 12:15.670
我就写上一个这么一个元素

12:15.670 --> 12:16.670
其实叫做虚力冻

12:16.670 --> 12:17.670
虚力节点

12:17.670 --> 12:19.670
名字叫做my button

12:20.670 --> 12:21.670
为什么可以写my button

12:21.670 --> 12:23.670
因为这个组建的名字叫做my button

12:23.670 --> 12:25.670
所以说可以这样子写

12:25.670 --> 12:27.670
也可以直接字结束

12:27.670 --> 12:28.670
就写完了

12:28.670 --> 12:29.670
保存你看一下吧

12:29.670 --> 12:31.670
就出现那个组建了

12:31.670 --> 12:32.670
于是他就

12:32.670 --> 12:33.670
他渲染这个实力的时候

12:33.670 --> 12:34.670
他看到这个玩意儿

12:34.670 --> 12:35.670
他知道了

12:35.670 --> 12:37.670
这个玩意儿是已经注册了一个组建

12:37.670 --> 12:38.670
名字叫做my button

12:38.670 --> 12:40.670
他找的有这个对应关系对吧

12:40.670 --> 12:41.670
这个组建的逻辑啊

12:41.670 --> 12:43.670
模板啊全在这里边

12:43.670 --> 12:45.670
所以他就可以把这个组建渲染出来

12:45.670 --> 12:46.670
是不是

12:47.670 --> 12:48.670
为什么没变

12:48.670 --> 12:50.670
点击时间没写

12:50.670 --> 12:51.670
写个点击时间

12:51.670 --> 12:52.670
点击的时候干嘛呢

12:52.670 --> 12:57.260
点击的时候把这个扣子加加

12:57.260 --> 12:58.260
你看是不是可以组建了

12:58.260 --> 13:00.260
那如果说我要做多个这样的按钮呢

13:00.260 --> 13:02.260
你看这个组建的附用啊

13:02.260 --> 13:04.260
这个可以是不是可以写多个

13:04.260 --> 13:06.260
那么这样子呢我就有

13:06.260 --> 13:08.260
这个每个组建都是相对独立的

13:08.260 --> 13:10.260
这就是为什么他的data要配置为一个函数

13:10.260 --> 13:11.260
他没

13:11.260 --> 13:12.260
他配置为函数过后

13:12.260 --> 13:14.260
每个组建是不是他要得到数据

13:14.260 --> 13:15.260
都要调用一次这个函数

13:15.260 --> 13:16.260
调用一次这个函数

13:16.260 --> 13:18.260
他得到的就是新的一个对象了

13:18.260 --> 13:19.260
这样子避免了

13:19.260 --> 13:21.260
组建之间的数据相互影响

13:21.260 --> 13:22.260
因为组建之间

13:22.260 --> 13:23.260
同一个组建之间

13:23.260 --> 13:24.260
他们不同的实力对吧

13:24.260 --> 13:25.260
这是组建的实力

13:25.260 --> 13:26.260
有五个实力

13:26.260 --> 13:27.260
每个实力呢

13:27.260 --> 13:28.260
要有自己的数据

13:28.260 --> 13:29.260
避免个相互影响

13:29.260 --> 13:30.260
那如果说你不这样的写

13:30.260 --> 13:32.260
能不能直接写个对象呢

13:32.260 --> 13:33.260
那倒是可以写

13:35.260 --> 13:36.260
如果说你这样子写的话

13:36.260 --> 13:37.260
就有一个问题就是

13:46.730 --> 13:47.730
这两个在组建里面

13:47.730 --> 13:48.730
还不能这样的写

13:48.730 --> 13:49.730
那如果说我比方

13:49.730 --> 13:50.730
用这种方式来写

13:50.730 --> 13:51.730
obj

13:55.730 --> 13:57.730
我把这个obj返回啊

13:57.730 --> 13:58.730
那么是不是使用的是

13:58.730 --> 13:59.730
同一个对象啊

13:59.730 --> 14:00.730
这样子写不好啊

14:00.730 --> 14:01.730
首先说不好

14:01.730 --> 14:02.730
使用的是同一个对象

14:02.730 --> 14:03.730
那就导致呢

14:03.730 --> 14:04.730
你点了过了

14:04.730 --> 14:08.230
所有组建的数据都是一次的

14:08.230 --> 14:10.230
这个地方小细节给大家说一下

14:10.230 --> 14:12.230
但是我们平时也不可能会这样做

14:12.230 --> 14:13.230
保证每个组建之间的

14:13.230 --> 14:14.230
数据能相互独立

14:17.230 --> 14:18.230
创建组建

14:18.230 --> 14:19.230
注册组建

14:19.230 --> 14:20.230
然后呢

14:20.230 --> 14:21.230
就可以到处使用了

14:21.230 --> 14:22.230
在其他地方

14:22.230 --> 14:23.230
任何模板里边

14:23.230 --> 14:24.230
都可以使用这个组建

14:24.230 --> 14:25.230
使用方式

14:25.230 --> 14:26.230
非常简单

14:26.230 --> 14:27.230
组建名字

14:27.230 --> 14:28.230
写个标签就行了

14:28.230 --> 14:29.230
会生成一个对应的虚拟节点

14:30.230 --> 14:31.230
没问题吧

14:31.230 --> 14:33.230
这要全局注册

14:33.230 --> 14:34.230
但是全局注册呢

14:34.230 --> 14:35.230
其实并不好

14:35.230 --> 14:37.230
因为有些组建的并不是说

14:37.230 --> 14:38.230
我要通用的

14:38.230 --> 14:39.230
我要到处都要用

14:39.230 --> 14:41.230
我可能只是在某一个地方用一下

14:41.230 --> 14:42.230
那么如果说你

14:42.230 --> 14:44.230
到处一定用全局注册的话

14:44.230 --> 14:46.230
将来我们使用什么

14:46.230 --> 14:47.230
构建工具啊

14:47.230 --> 14:48.230
打包工具啊

14:48.230 --> 14:49.230
可能会导致

14:49.230 --> 14:50.230
影响打包结果

14:50.230 --> 14:52.230
让打包结果变大

14:52.230 --> 14:54.230
我不想影响的范围那么过

14:54.230 --> 14:56.230
我可能只需要我要用的地方

14:56.230 --> 14:57.230
我要使用一下就完事了

14:57.230 --> 15:00.230
那么我们就可能会需要局部注册

15:00.230 --> 15:02.230
局部注册怎么注册呢

15:02.230 --> 15:03.230
其实非常简单

15:03.230 --> 15:05.230
局部注册就不要写这句话

15:05.230 --> 15:06.230
当你不写这句话

15:06.230 --> 15:07.230
现在是肯定要抱错的

15:07.230 --> 15:08.230
他不认识

15:08.230 --> 15:09.230
当时没抱错的

15:09.230 --> 15:11.230
但是他给你生成了什么呢

15:11.230 --> 15:12.230
他给你生成这个玩意了

15:12.230 --> 15:14.230
他不认识这个东西

15:14.230 --> 15:15.230
他不认识这个东西是个组建

15:15.230 --> 15:17.230
如果说你注册了过后

15:17.230 --> 15:18.230
你看他有正常生成的

15:18.230 --> 15:20.230
他就变成了组建里边的内容了

15:21.230 --> 15:22.230
没了意思吧

15:22.230 --> 15:23.230
所以说一定要注册

15:23.230 --> 15:25.230
但是我可以不全局注册

15:25.230 --> 15:26.230
我可以局部注册

15:26.230 --> 15:27.230
怎么局部注册呢

15:27.230 --> 15:29.230
比方说我要在伍佑实力里边

15:29.230 --> 15:31.230
用这个组建

15:31.230 --> 15:34.230
那么我就需要在这里去配置一个component

15:36.230 --> 15:39.230
表示我这个伍佑里边要用到

15:39.230 --> 15:40.230
什么呢

15:40.230 --> 15:41.230
要用到一个配置

15:41.230 --> 15:42.230
要component

15:43.230 --> 15:46.230
表示我这里边去局部注册一些组建

15:46.230 --> 15:49.230
局部注册组建

15:49.230 --> 15:51.230
那么也说在这里注册的组建了

15:51.230 --> 15:53.230
只能在我这个地方使用

15:53.230 --> 15:55.230
我这个地方的模板里边使用

15:55.230 --> 15:57.230
那么这个组建怎么注册的

15:57.230 --> 15:58.230
就是组建名

15:58.230 --> 15:59.230
就是属性名

15:59.230 --> 16:00.230
就是组建名

16:00.230 --> 16:01.230
然后组建对象

16:01.230 --> 16:02.230
买八层

16:02.230 --> 16:03.230
但是组建名

16:03.230 --> 16:04.230
我们可以用一样的名字

16:04.230 --> 16:05.230
买八层

16:06.230 --> 16:08.230
那么这样子写是不是可以竖写

16:08.230 --> 16:10.230
但是我这里没有写大写

16:10.230 --> 16:12.230
那么这可以这样子写对不对

16:12.230 --> 16:13.230
现在稍微是一样的

16:14.230 --> 16:15.230
你看

16:15.230 --> 16:16.230
是一样的

16:17.230 --> 16:18.230
看懂了吗

16:18.230 --> 16:19.230
这就是

16:19.230 --> 16:21.230
组建了两种注册方式

16:21.230 --> 16:23.230
我推荐大家使用局部注册

16:25.230 --> 16:26.230
当然我们也可以把这个

16:26.230 --> 16:28.230
组建的名字稍微改一下

16:28.230 --> 16:29.230
改成这个样子

16:29.230 --> 16:30.230
那么这样子

16:30.230 --> 16:31.230
这个属性名字是相同

16:31.230 --> 16:33.230
我是不是可以用竖写属性

16:33.230 --> 16:34.230
这样子写

16:36.230 --> 16:37.230
效果一样

16:39.230 --> 16:40.230
这是那个

16:40.230 --> 16:42.230
组建的注册

16:42.230 --> 16:43.230
那么最后就是应用组建

16:43.230 --> 16:45.230
应用组建就是在模板中

16:45.230 --> 16:46.230
就是注册过后

16:46.230 --> 16:47.230
比方说在这里注册过后

16:47.230 --> 16:48.230
局部注册也好

16:48.230 --> 16:49.230
全局注册也好

16:49.230 --> 16:51.230
那么我们组建是在模板中使用的

16:51.230 --> 16:53.230
在模板中去写出来

16:53.230 --> 16:54.230
那么写这个时候

16:54.230 --> 16:55.230
怎么写呢

16:56.230 --> 16:57.230
首先第一个注意

16:57.230 --> 16:58.230
几个点就行了

16:58.230 --> 16:59.230
第一个点

16:59.230 --> 17:01.230
就是组建必须要有结束

17:01.230 --> 17:03.230
就是你不要这样子写

17:03.230 --> 17:04.230
不要没有结束

17:04.230 --> 17:05.230
没有结束了

17:05.230 --> 17:06.230
现阶段好像是看上去

17:06.230 --> 17:09.230
好像没啥问题的样子

17:09.230 --> 17:10.230
其实已经出问题了

17:10.230 --> 17:12.230
但是他只是没有抱错而已

17:12.230 --> 17:13.230
因为浏览器

17:13.230 --> 17:14.230
它能够纠缩

17:14.230 --> 17:15.230
但是它纠缩了过后

17:17.230 --> 17:18.230
它纠缩了过后了

17:18.230 --> 17:19.230
这个玩意

17:19.230 --> 17:20.230
这个玩意

17:20.230 --> 17:21.230
它就变成了

17:21.230 --> 17:22.230
浏览器里边

17:22.230 --> 17:24.230
它就变成了有结束的了

17:25.230 --> 17:26.230
首先把它变成小写

17:26.230 --> 17:27.230
然后变成有结束的了

17:27.230 --> 17:28.230
总之要出问题

17:28.230 --> 17:29.230
不要去这样做

17:30.230 --> 17:31.230
这是一个

17:31.230 --> 17:32.230
一个要注意的地方

17:32.230 --> 17:33.230
必须要有结束

17:33.230 --> 17:34.230
那么结束

17:34.230 --> 17:35.230
你可以有多种结束方式

17:35.230 --> 17:37.230
你可以这样子结束

17:37.230 --> 17:38.230
字结束

17:38.230 --> 17:40.230
也可以写结束标记

17:40.230 --> 17:41.230
这样子也没问题

17:42.230 --> 17:43.230
总之必须要有结束就行了

17:44.230 --> 17:45.230
是一样

17:46.230 --> 17:47.230
一样的问题

17:47.230 --> 17:48.230
这是第一个

17:48.230 --> 17:50.230
第二个是组建的名字

17:50.230 --> 17:51.230
你注册组建的时候

17:51.230 --> 17:52.230
不知道该取名字吗

17:52.230 --> 17:53.230
这是组建的名字

17:54.230 --> 17:56.230
而组建的名字怎么取呢

17:56.230 --> 17:57.230
有两种命名方式

17:57.230 --> 17:58.230
一种叫做

17:58.230 --> 17:59.230
短横线命名法

18:00.230 --> 18:01.230
你看就这种命名法

18:01.230 --> 18:02.230
比方说我这里注册的

18:02.230 --> 18:03.230
组建的名字

18:03.230 --> 18:04.230
不是这个名字

18:04.230 --> 18:05.230
我该注册为

18:09.230 --> 18:10.230
短横线命名法

18:10.230 --> 18:11.230
就是官方建议的

18:11.230 --> 18:12.230
建议的命名方式

18:12.230 --> 18:13.230
但现在就出问题了

18:13.230 --> 18:14.230
那么这个时候

18:14.230 --> 18:16.230
你要这样子写

18:17.230 --> 18:18.230
你要这样子写

18:19.230 --> 18:20.230
短横线命名法

18:22.230 --> 18:23.230
这是这种命名

18:23.230 --> 18:24.230
第二种方式

18:24.230 --> 18:26.230
是用大陀封命名法

18:27.230 --> 18:28.230
手这么大写

18:28.230 --> 18:29.230
每个单次手这么大写

18:30.230 --> 18:31.230
就是最开始的命名方式

18:31.230 --> 18:32.230
大陀封命名法

18:33.230 --> 18:36.230
我推荐大家使用大陀封命名法

18:36.230 --> 18:37.230
为什么呢

18:37.230 --> 18:38.230
因为还比较灵活

18:38.230 --> 18:39.230
你这样子用大陀封命名法

18:39.230 --> 18:40.230
完了之后

18:40.230 --> 18:41.230
你看一下

18:41.230 --> 18:43.230
我们在使用组建的时候

18:43.230 --> 18:44.230
在模板里边写组建的时候

18:44.230 --> 18:46.230
既可以写大陀封命名法

18:47.230 --> 18:48.230
又可以写短横线命名法

18:48.230 --> 18:49.230
它都支持

18:52.230 --> 18:53.230
我推荐大家使用大陀封

18:53.230 --> 18:55.230
而且我再推荐

18:55.230 --> 18:56.230
甚至我推荐大家

18:56.230 --> 18:58.230
在模板里边使用的时候

18:58.230 --> 19:00.230
也尽量的使用大陀封

19:01.230 --> 19:02.230
也尽量使用大陀封

19:02.230 --> 19:03.230
因为为什么呢

19:03.230 --> 19:04.230
因为有些

19:06.230 --> 19:07.230
组建的名字

19:07.230 --> 19:08.230
可能只有一个单词

19:08.230 --> 19:09.230
那就没有横纲了

19:09.230 --> 19:10.230
没有横纲的

19:10.230 --> 19:11.230
容易跟那个

19:11.230 --> 19:12.230
Atm元素的名字

19:12.230 --> 19:13.230
容易造成冲突

19:13.230 --> 19:14.230
所以说

19:14.230 --> 19:15.230
我推荐使用大陀封

19:15.230 --> 19:16.230
这样子分得清楚一点

19:16.230 --> 19:18.230
表示这个地方是一个组建

19:18.230 --> 19:19.230
你看那意思吧

19:19.230 --> 19:21.230
组建是不是特别简单

19:21.230 --> 19:22.230
创建组建一个对象

19:23.230 --> 19:24.230
跟那个VU配置差不多

19:24.230 --> 19:26.230
注册组建非常简单

19:26.230 --> 19:27.230
就是个注册

19:27.230 --> 19:28.230
绝不注册就用航空认识

19:28.230 --> 19:29.230
然后应用组建

19:29.230 --> 19:30.230
就是在模板里面

19:30.230 --> 19:31.230
直接使用就完成了

19:33.230 --> 19:34.230
没问题吧

19:37.120 --> 19:38.120
接下来

19:41.120 --> 19:42.120
组建素

19:43.120 --> 19:44.120
因为我们现在

19:44.120 --> 19:45.120
有了组建的概念过后

19:45.120 --> 19:47.120
我们又可以在

19:47.120 --> 19:48.120
在我们的系统中去

19:48.120 --> 19:49.120
创建各种各样的组建

19:49.120 --> 19:51.120
我这样告诉你们吧

19:51.120 --> 19:53.120
你们做一个项目也好

19:53.120 --> 19:54.120
做一个

19:54.120 --> 19:56.120
5U应用也好

19:56.120 --> 19:59.820
90%的时间

19:59.820 --> 20:01.820
都是在开发组建

20:01.820 --> 20:03.820
你把组建开发的差不多了

20:03.820 --> 20:04.820
基本上就完成了

20:04.820 --> 20:06.820
实际上你看到这个页面

20:06.820 --> 20:08.820
整个页面就是一个组建

20:08.820 --> 20:09.820
整个页面就是个组建

20:09.820 --> 20:10.820
这个组建里面

20:10.820 --> 20:12.820
包含了其他组建

20:12.820 --> 20:13.820
这个组建里面

20:13.820 --> 20:14.820
讲一个例子

20:14.820 --> 20:15.820
包含了这个组建

20:15.820 --> 20:17.820
和右边这个组建

20:17.820 --> 20:18.820
右边这一坨组建

20:18.820 --> 20:19.820
右边这一坨又包含了

20:19.820 --> 20:20.820
纸组建

20:20.820 --> 20:21.820
包含了纸组建

20:21.820 --> 20:22.820
那么左边这个组建里面

20:22.820 --> 20:24.820
又包含了一些小的组建

20:24.820 --> 20:25.820
多的意思就是

20:25.820 --> 20:27.820
跟这个区域一样

20:27.820 --> 20:29.820
大的区域包含小区域

20:29.820 --> 20:31.820
那么这里也是一样

20:31.820 --> 20:32.820
我们在开发的时候

20:32.820 --> 20:34.820
大组建里面包含纸组建

20:34.820 --> 20:36.820
于是它就会形成一个组建素

20:36.820 --> 20:38.820
最顶层是组建实力

20:38.820 --> 20:39.820
组建实力里面

20:39.820 --> 20:41.820
包含一些别的组建

20:41.820 --> 20:42.820
这些组建里面

20:42.820 --> 20:43.820
包含一些别的组建

20:43.820 --> 20:44.820
有些组建可能

20:44.820 --> 20:45.820
会重用

20:45.820 --> 20:46.820
比方组建3

20:46.820 --> 20:47.820
它可能在组建1里边用

20:47.820 --> 20:48.820
有可能会在这边

20:48.820 --> 20:49.820
去使用

20:49.820 --> 20:50.820
都有可能

20:50.820 --> 20:52.820
比方组建1可以在这里用

20:52.820 --> 20:53.820
也可以在组建2下面用

20:53.820 --> 20:54.820
都可以

20:54.820 --> 20:55.820
因为它会重用的

20:55.820 --> 20:56.820
这组建素

20:56.820 --> 20:57.820
它会形成这么一个

20:57.820 --> 20:58.820
塑形结构

20:59.820 --> 21:01.820
再看下一个概念

21:02.820 --> 21:03.820
这几个东西

21:03.820 --> 21:04.820
虽然是新东西

21:04.820 --> 21:06.820
但是它并不复杂

21:06.820 --> 21:08.820
像组建传递数据

21:08.820 --> 21:09.820
比方说举个例子

21:09.820 --> 21:10.820
我们这里

21:10.820 --> 21:11.820
不仅仅是有8分这个组建

21:11.820 --> 21:12.820
我可能还有一个组建

21:13.820 --> 21:14.820
我来

21:14.820 --> 21:15.820
再来一个

21:15.820 --> 21:16.820
再来一个组建

21:17.820 --> 21:18.820
比方说

21:18.820 --> 21:19.820
Title这个组建

21:23.730 --> 21:24.730
比方说

21:24.730 --> 21:25.730
我们这里有一个Template

21:27.730 --> 21:28.730
Title组建非常简单

21:28.730 --> 21:29.730
我就提供一个A7远处

21:29.730 --> 21:30.730
但是这些组建

21:30.730 --> 21:31.730
都没有啥子实际意义的

21:31.730 --> 21:32.730
以后这些东西

21:32.730 --> 21:33.730
需要分装成组建吗

21:33.730 --> 21:34.730
没必要

21:34.730 --> 21:35.730
不过我们举个例子

21:36.730 --> 21:37.730
这里比方

21:37.730 --> 21:38.730
我们要显示什么呢

21:38.730 --> 21:39.730
显示一个E级

21:40.730 --> 21:41.730
不要提

21:42.730 --> 21:43.730
就写好一个组建

21:43.730 --> 21:44.730
这个组建的数据都没有

21:44.730 --> 21:45.730
就显示一个

21:46.730 --> 21:47.730
模板出来就完事了

21:47.730 --> 21:48.730
有个静态的模板

21:48.730 --> 21:50.730
咱们把Title注册到

21:50.730 --> 21:51.730
无忧实力里边去

21:51.730 --> 21:52.730
那么这里边

21:52.730 --> 21:53.730
是不是可以用Title了

21:54.730 --> 21:55.730
是不是可以用Title组建了

21:56.730 --> 21:57.730
对不对

21:57.730 --> 21:58.730
保存啊

21:58.730 --> 21:59.730
离开一下

21:59.730 --> 22:00.730
说出来了

22:00.730 --> 22:01.730
变成A7远处了

22:01.730 --> 22:02.730
但是这个组建

22:02.730 --> 22:03.730
它具有通用性吗

22:03.730 --> 22:04.730
它能附用吗

22:04.730 --> 22:05.730
它不能附用

22:05.730 --> 22:06.730
它永远只能显示

22:06.730 --> 22:08.730
这个静态内容

22:08.730 --> 22:09.730
它不能附用的

22:09.730 --> 22:10.730
你看将来有一天

22:10.730 --> 22:11.730
我要显示一些

22:11.730 --> 22:12.730
别的表体怎么办

22:12.730 --> 22:13.730
就显示不了了

22:14.730 --> 22:16.730
比方说我这里要显示

22:16.730 --> 22:17.730
三个一级标题

22:17.730 --> 22:18.730
但是每个标题的内容

22:18.730 --> 22:19.730
是不一样的

22:20.730 --> 22:21.730
那怎么办呢

22:21.730 --> 22:23.730
而且说我在组建里面加上

22:23.730 --> 22:24.730
这个东西应该是动它

22:24.730 --> 22:26.730
我在组建里面加上一个data

22:26.730 --> 22:27.730
然后给它一个就是

22:27.730 --> 22:28.730
Title内容

22:28.730 --> 22:30.730
然后我们把这边的

22:33.490 --> 22:34.490
给它加上Title

22:34.490 --> 22:36.490
看上去很美好

22:36.490 --> 22:37.490
对不对

22:37.490 --> 22:38.490
看上去很美好

22:38.490 --> 22:39.490
但是呢

22:39.490 --> 22:40.490
每个组建不一样

22:40.490 --> 22:41.490
我这里要比方

22:41.490 --> 22:43.490
这个Title

22:43.490 --> 22:44.490
我要显示的

22:44.490 --> 22:45.490
我要显示

22:49.060 --> 22:51.060
显示标题一

22:52.060 --> 22:53.060
我这个地方显示标题二

22:53.060 --> 22:54.060
显示标题三

22:54.060 --> 22:56.060
那比方说面对这样的需求

22:56.060 --> 22:57.060
我怎么来做呢

22:57.060 --> 22:59.060
你会发现你很难做得到

22:59.060 --> 23:01.060
做不到的

23:02.060 --> 23:03.060
现在没有标题

23:03.060 --> 23:05.060
那这个地方到底写标题一

23:05.060 --> 23:06.060
还是标题二

23:06.060 --> 23:07.060
还是标题三的

23:07.060 --> 23:08.060
所以遇到这么一个问题

23:08.060 --> 23:09.060
比如说这个问题

23:09.060 --> 23:10.060
本质上是什么呢

23:10.060 --> 23:12.060
就是我这个实力

23:12.060 --> 23:13.060
就上层

23:13.060 --> 23:14.060
比如说这是个副主见

23:14.060 --> 23:15.060
我们可以把

23:15.060 --> 23:17.060
我们用实力也看成一个主见

23:17.060 --> 23:18.060
就在这个主见里边呢

23:18.060 --> 23:20.060
我用到了别的主见

23:20.060 --> 23:22.060
但是别的主见有些信息啊

23:22.060 --> 23:23.060
我是控制不了

23:23.060 --> 23:24.060
控制不了的

23:24.060 --> 23:26.060
比方这个主见里面有data

23:26.060 --> 23:28.060
data还只能是自身控制

23:29.060 --> 23:31.060
注意啊听清楚

23:31.060 --> 23:32.060
主见里面有data

23:32.060 --> 23:33.060
实力里面有data

23:33.060 --> 23:34.060
都有data

23:34.060 --> 23:36.060
data只能是自己控制

23:36.060 --> 23:37.060
写在哪个主见里面

23:37.060 --> 23:39.060
哪个主见来控制自己的data

23:39.060 --> 23:41.060
别人是控制不了的

23:41.060 --> 23:43.060
这是我们玩家的

23:44.060 --> 23:46.060
就设计上的一个哲学

23:46.060 --> 23:48.060
谁的数据谁负责

23:48.060 --> 23:50.060
别人是没法控制他的

23:50.060 --> 23:52.060
那么怎么办呢

23:52.060 --> 23:53.060
其实这里的问题

23:53.060 --> 23:55.060
跟那个函数的问题是一样的

23:55.060 --> 23:56.060
函数里面我要求

23:56.060 --> 23:57.060
两个数之合

23:57.060 --> 23:59.060
你得把两个数给我吧

23:59.060 --> 24:00.060
是不是要传参

24:00.060 --> 24:01.060
对不对

24:01.060 --> 24:02.060
那么主见呢

24:02.060 --> 24:03.060
也是遇到这样的问题

24:03.060 --> 24:04.060
比方说我们这里

24:04.060 --> 24:05.060
我们网站上

24:05.060 --> 24:07.060
比方说把它做成一个主见

24:07.060 --> 24:09.060
把这个图标做成一个主见

24:09.060 --> 24:10.060
图标是有不一样的

24:10.060 --> 24:11.060
对不对

24:11.060 --> 24:12.060
图标的内形是啥

24:12.060 --> 24:14.060
是首页的内形

24:14.060 --> 24:16.060
还是文章的内形

24:16.060 --> 24:18.060
你要把内形给我

24:18.060 --> 24:19.060
这个东西叫啥

24:19.060 --> 24:21.060
叫属性传递

24:21.060 --> 24:23.060
像主见传递数据

24:23.060 --> 24:25.060
我们把传递数据

24:25.060 --> 24:26.060
叫做属性

24:26.060 --> 24:27.060
主见的属性

24:27.060 --> 24:29.060
我们首先要做的第一件事

24:29.060 --> 24:30.060
比方说这个主见

24:30.060 --> 24:31.060
这个主见

24:31.060 --> 24:32.060
它就不是自己的data了

24:32.060 --> 24:33.060
因为这个东西

24:33.060 --> 24:35.060
不是我来控制的

24:35.060 --> 24:36.060
如果说写到data里面

24:36.060 --> 24:37.060
就是我在控制

24:37.060 --> 24:38.060
我控制不了

24:38.060 --> 24:39.060
因为我不知道它是啥

24:39.060 --> 24:40.060
标题应该显示啥

24:40.060 --> 24:42.060
但是用我这个主见的人

24:42.060 --> 24:43.060
别人会用我对吧

24:43.060 --> 24:44.060
用我的时候

24:44.060 --> 24:46.060
他会告诉我

24:46.060 --> 24:47.060
标题的内容是啥

24:47.060 --> 24:48.060
是不是这么一个逻辑

24:48.060 --> 24:50.060
这才是符合逻辑的地方

24:50.060 --> 24:51.060
因此我应该怎么样

24:51.060 --> 24:53.060
不应该去声明这个data

24:53.060 --> 24:54.060
如果说有一些

24:54.060 --> 24:56.060
我们自己要控制的东西就是data

24:56.060 --> 24:58.060
如果说不是我自己的东西

24:58.060 --> 24:59.060
是别人要给我的

24:59.060 --> 25:01.060
就应该是属性probs

25:02.060 --> 25:04.060
你看咱们这节课

25:04.060 --> 25:05.060
咱们这节课

25:05.060 --> 25:07.060
应该又写了一些新的

25:08.060 --> 25:11.060
新的一些配置的

25:11.060 --> 25:13.060
把上级课的东西拿过来

25:14.060 --> 25:15.060
主见

25:15.060 --> 25:18.580
记录一下

25:23.580 --> 25:24.580
这里我们之前

25:24.580 --> 25:26.580
在模办不是在模办里面

25:26.580 --> 25:27.580
在配置里面

25:27.580 --> 25:28.580
先让我们听

25:28.580 --> 25:29.580
是不是声明了这么一个配置

25:29.580 --> 25:30.580
components

25:31.580 --> 25:32.580
局部注册

25:33.580 --> 25:34.580
注册主见

25:35.580 --> 25:36.580
还以为为什么配置呢

25:36.580 --> 25:37.580
接下来又有新的配置

25:37.580 --> 25:38.580
叫probs

25:39.580 --> 25:40.580
probs什么意思

25:40.580 --> 25:41.580
声明

25:42.580 --> 25:44.580
主见的属性

25:46.580 --> 25:47.580
现在我们来看一下

25:47.580 --> 25:48.580
怎么来声明主见的属性

25:48.580 --> 25:50.580
probs我们来声明一下

25:50.580 --> 25:51.580
你要用这个主见

25:51.580 --> 25:53.580
你可以给我传一些属性进来

25:53.580 --> 25:55.580
就传相当于是传餐进来

25:55.580 --> 25:57.580
那么我们这里可以写个数组

25:57.580 --> 26:00.730
每个数组里面

26:00.730 --> 26:02.730
每一下就是属性的名称

26:02.730 --> 26:03.730
比如说

26:04.730 --> 26:06.730
我们就写一个

26:07.730 --> 26:08.730
标题

26:08.730 --> 26:09.730
就这样子写吧

26:09.730 --> 26:10.730
举个例子

26:10.730 --> 26:11.730
当然这里随便名称

26:11.730 --> 26:12.730
怎么名称都可以

26:12.730 --> 26:13.730
你自己决定

26:14.730 --> 26:15.730
标题

26:15.730 --> 26:16.730
什么意思呢

26:16.730 --> 26:17.730
当我用这个主见的时候

26:17.730 --> 26:18.730
你看这里之外用这个主见

26:18.730 --> 26:20.730
我可以给它传递一个东西进去

26:21.730 --> 26:23.730
传练东西叫做属性

26:23.730 --> 26:25.730
其中有一个属性叫做标题

26:26.730 --> 26:28.730
那么就跟那个元素的属性

26:28.730 --> 26:29.730
是不是道理是一样的

26:30.730 --> 26:31.730
回横向比较一下吧

26:31.730 --> 26:32.730
你用A元素

26:32.730 --> 26:33.730
是不是告诉他

26:33.730 --> 26:34.730
你超链接

26:34.730 --> 26:35.730
点击过后链接到什么地方

26:35.730 --> 26:37.730
那么就是属性了

26:37.730 --> 26:38.730
这里也是一样

26:38.730 --> 26:39.730
你用这个title主见

26:39.730 --> 26:40.730
你要告诉他

26:40.730 --> 26:42.730
我这个标题内容是啥

26:42.730 --> 26:43.730
是标题

26:43.730 --> 26:44.730
对不对

26:44.730 --> 26:45.730
好了

26:45.730 --> 26:47.730
那么这里是标题2

26:47.730 --> 26:49.730
这里是标题3

26:49.730 --> 26:51.730
是不是可以通过这种方式来告诉他

26:51.730 --> 26:52.730
好保存你看一下

26:54.730 --> 26:55.730
这里没有美好的原因

26:55.730 --> 26:57.730
是因为我这里没有使用标题

27:01.730 --> 27:02.730
也就是说啥呢

27:02.730 --> 27:04.730
属性这一块

27:04.730 --> 27:06.730
也会被注入到

27:06.730 --> 27:07.730
实力里边去

27:08.730 --> 27:09.730
像我们上集合说了

27:09.730 --> 27:10.730
哪天会被注入到实力

27:10.730 --> 27:11.730
data

27:11.730 --> 27:12.730
method

27:12.730 --> 27:13.730
还有什么computed

27:13.730 --> 27:14.730
我们以后会学

27:15.730 --> 27:16.730
那么这些可以多了一个东西

27:16.730 --> 27:17.730
叫做属性了

27:17.730 --> 27:18.730
属性的那一种

27:18.730 --> 27:20.730
它也会注入到实力里边去

27:21.730 --> 27:22.730
主见它每个主见也是实力

27:22.730 --> 27:23.730
那个实力

27:23.730 --> 27:25.730
跟那个五六实力差不多

27:25.730 --> 27:26.730
其实你可以把五六实力

27:26.730 --> 27:28.730
看作是一个特殊的主见实力

27:30.730 --> 27:31.730
好 咱们来看一下吧

27:32.730 --> 27:33.730
你看不同的主见

27:33.730 --> 27:35.730
它就渲染出来不同的标题

27:35.730 --> 27:37.730
对吧 属性是别人传过来的

27:37.730 --> 27:39.730
于是那就形成这么一张图了

27:39.730 --> 27:43.130
五六实力呢

27:43.130 --> 27:44.130
可能要用到一些主见

27:44.130 --> 27:47.130
它可能会传递一些属性过去

27:47.130 --> 27:48.130
如果说这里

27:48.130 --> 27:49.130
还有一些别的属性的话

27:50.130 --> 27:52.130
比方说这里有两标题

27:53.130 --> 27:56.130
就是标题1

27:56.130 --> 27:58.130
它一个属性标题2

27:59.130 --> 28:00.130
那么这里

28:00.130 --> 28:02.130
我可能主见是这样子写的

28:02.130 --> 28:05.700
标题1我就用H1元素

28:05.700 --> 28:07.700
标题2我就用H2元素

28:08.700 --> 28:12.220
标题2

28:14.220 --> 28:15.220
主见要做的事情就是

28:15.220 --> 28:16.220
你给我传什么东西

28:16.220 --> 28:17.220
我应该怎么去渲染

28:17.220 --> 28:19.220
有哪些渲染逻辑

28:19.220 --> 28:20.220
对吧 我就把这个主见写出来了

28:21.220 --> 28:22.220
那么我们在传递的时候

28:22.220 --> 28:26.220
就是标题2

28:27.220 --> 28:29.220
标题1

28:29.220 --> 28:31.220
去边举个例子

28:32.220 --> 28:37.220
标题3.1

28:37.220 --> 28:38.220
好 保存

28:39.220 --> 28:40.220
第一个主见

28:40.220 --> 28:41.220
第二个主见

28:41.220 --> 28:42.220
第三个主见

28:44.220 --> 28:45.220
看到没

28:45.220 --> 28:46.220
好好去体会一下

28:48.790 --> 28:49.790
那么我们在实力里面

28:49.790 --> 28:50.790
可能会用到各种各样的主见

28:50.790 --> 28:52.790
有可能会传递一些属性

28:52.790 --> 28:53.790
那么这些主见里面

28:53.790 --> 28:54.790
又有可能会用到别的主见

28:54.790 --> 28:56.790
又可能会传递一些属性

28:56.790 --> 28:57.790
那么这个主见有可能用到

28:57.790 --> 28:58.790
别的主见

28:58.790 --> 28:59.790
又可能会传递一些属性

28:59.790 --> 29:00.790
就形成了这么一个

29:00.790 --> 29:01.790
主见数

29:01.790 --> 29:03.790
而且数据是从上到下

29:03.790 --> 29:04.790
往下流动的

29:04.790 --> 29:05.790
通过属性

29:05.790 --> 29:06.790
商业的主见

29:06.790 --> 29:08.790
副主见往直主见里面传数据

29:08.790 --> 29:09.790
从上往下流动

29:09.790 --> 29:11.790
这叫做单向数据流

29:11.790 --> 29:12.790
什么叫单向数据流呢

29:12.790 --> 29:14.790
就在主见内部

29:14.790 --> 29:16.790
是不能去更改这个属性的

29:17.790 --> 29:18.790
是不能更改的

29:19.790 --> 29:21.790
比方路这里随便下举个例子

29:21.790 --> 29:23.790
我要这里加上个按钮

29:23.790 --> 29:24.790
change

29:25.790 --> 29:31.750
改变

29:31.750 --> 29:33.750
比方说点击的时候干嘛呢

29:33.750 --> 29:35.750
我想把标题1改了

29:35.750 --> 29:37.750
标题1改了

29:37.750 --> 29:38.750
标题1改了

29:38.750 --> 29:39.750
标题1改成

29:39.750 --> 29:40.750
标题1改成

29:40.750 --> 29:42.750
标题1改成

29:42.750 --> 29:43.750
好 试一下吧

29:44.750 --> 29:46.750
你看每个主见有多了个千几

29:46.750 --> 29:47.750
加两个点击

29:47.750 --> 29:48.750
改没改 改了

29:48.750 --> 29:49.750
但是实际上

29:49.750 --> 29:50.750
你不要这样做

29:50.750 --> 29:52.750
因为我们现在没有用脚手架

29:52.750 --> 29:53.750
像这些地方

29:53.750 --> 29:56.750
它都没有给你报出一些警告

29:56.750 --> 29:57.750
将来我们会用脚手架

29:57.750 --> 29:59.750
像这个地方一定会报警告

29:59.750 --> 30:00.750
会报错误的

30:00.750 --> 30:01.750
不要去这样做

30:01.750 --> 30:02.750
为什么不要做这样做

30:02.750 --> 30:04.750
这样就打破了单向数据流

30:04.750 --> 30:06.750
这个数据是不是你的

30:06.750 --> 30:08.750
不是你的

30:08.750 --> 30:10.750
是别人给你的

30:10.750 --> 30:11.750
是他给你的

30:11.750 --> 30:12.750
他给你的数据

30:12.750 --> 30:14.750
那么只有他有能力更改

30:14.750 --> 30:15.750
你没有能力更改

30:15.750 --> 30:16.750
你没有任何权力

30:16.750 --> 30:18.750
去更改这个东西

30:18.750 --> 30:20.750
这些深层次的原因

30:20.750 --> 30:21.750
我们将来在境界部分

30:21.750 --> 30:22.750
再给大家去

30:22.750 --> 30:24.750
聊这些理论性的东西

30:24.750 --> 30:25.750
那么现在只要记住

30:25.750 --> 30:27.750
主见里面是绝对绝对

30:27.750 --> 30:29.750
不能去改属性的

30:29.750 --> 30:30.750
你可以改自己的data

30:30.750 --> 30:31.750
data是你的数据

30:31.750 --> 30:32.750
你可以改

30:32.750 --> 30:33.750
但属性是别人给你的数据

30:33.750 --> 30:34.750
你是没有权力去改动它的

30:34.750 --> 30:35.750
听懂了吗

30:35.750 --> 30:36.750
不要去这样做

30:36.750 --> 30:37.750
千万千万不要去这样做

30:37.750 --> 30:40.750
这会引发很多很多的问题

30:41.750 --> 30:43.750
这是这么一个点

30:43.750 --> 30:44.750
这是

30:44.750 --> 30:46.750
组建数这个概念

30:47.750 --> 30:48.750
那么接下来

30:48.750 --> 30:50.750
我们学了组建之后

30:50.750 --> 30:51.750
我们要说一下工程结构了

30:51.750 --> 30:54.750
因为我们马上要为下一节课

30:54.750 --> 30:56.750
开始做一个项目要做准备了

30:56.750 --> 30:58.750
工程结构

30:58.750 --> 31:00.750
因为我们现在就是

31:01.750 --> 31:02.750
整个系统里边

31:02.750 --> 31:03.750
肯定会涉及到

31:03.750 --> 31:04.750
很多很多的组建

31:04.750 --> 31:05.750
我们需要用个合理的方式

31:05.750 --> 31:07.750
来组织我们的代码结构

31:07.750 --> 31:08.750
你看这样子

31:08.750 --> 31:09.750
肯定不好

31:09.750 --> 31:11.750
也要组建一多了

31:11.750 --> 31:13.750
那个代码就很难看

31:13.750 --> 31:14.750
那我们怎么写呢

31:14.750 --> 31:18.190
我们可以按照这样的工程结构来写

31:18.190 --> 31:19.190
比方说

31:20.190 --> 31:21.190
每一步步来

31:22.190 --> 31:23.190
首先我们在这里呢

31:23.190 --> 31:24.190
去建立一个文件夹

31:24.190 --> 31:25.190
叫做src

31:28.910 --> 31:29.910
我们先希望了

31:29.910 --> 31:30.910
把所有的代码

31:30.910 --> 31:31.910
全部写到这

31:31.910 --> 31:33.910
写到这个src里边去

31:33.910 --> 31:34.910
好 src里边

31:34.910 --> 31:35.910
我们写上这么一个文件

31:35.910 --> 31:37.910
叫做made.js

31:37.910 --> 31:39.910
这是入口文件

31:39.910 --> 31:41.910
入口模块文件

31:41.910 --> 31:43.910
所以一开始就运行这个js

31:43.910 --> 31:45.910
那么我想把它作为一个

31:45.910 --> 31:46.910
js6模块

31:46.910 --> 31:48.910
所以我们在index的atm里边

31:48.910 --> 31:49.910
我去引用它

31:50.910 --> 31:51.910
引用什么

31:51.910 --> 31:53.910
我这部分就注射掉了

32:01.090 --> 32:02.090
我就换一个吧

32:02.090 --> 32:03.090
换一个页面吧

32:04.090 --> 32:07.850
把这个页面就重新拿了

32:07.850 --> 32:08.850
好这个页面上

32:08.850 --> 32:10.850
我就提供一个div

32:10.850 --> 32:11.850
id为app

32:12.850 --> 32:14.850
然后我就去引用script

32:14.850 --> 32:15.850
引用什么呢

32:15.850 --> 32:16.850
引用那个

32:16.850 --> 32:18.850
入口文件

32:18.850 --> 32:20.850
made.src

32:20.850 --> 32:21.850
made.js

32:21.850 --> 32:22.850
然后给它一个type

32:22.850 --> 32:23.850
这个module

32:24.850 --> 32:25.850
没问题吧

32:25.850 --> 32:26.850
这是我们学过模块化的

32:26.850 --> 32:27.850
这个应该看得懂

32:27.850 --> 32:28.850
好

32:28.850 --> 32:29.850
made.js里边

32:29.850 --> 32:30.850
我们要使用5u了

32:30.850 --> 32:31.850
made.js做什么呢

32:31.850 --> 32:32.850
就是创建5u实力

32:33.850 --> 32:35.850
创建5u实力

32:35.850 --> 32:37.850
它就做这么一件事

32:37.850 --> 32:39.850
好那么它做怎么来创建呢

32:39.850 --> 32:40.850
我们首先要导入5u

32:40.850 --> 32:41.850
对吧

32:41.850 --> 32:42.850
那么5u我这里准备了

32:42.850 --> 32:43.850
另外一个5u.js

32:43.850 --> 32:46.850
就是s6模块化的5u.js

32:46.850 --> 32:47.850
好我们把它复制过来

32:47.850 --> 32:49.850
复制到s6里边去

32:49.850 --> 32:50.850
我们在made.js里边

32:50.850 --> 32:53.850
我们可以用import 5u

32:53.850 --> 32:54.850
导入什么呢

32:54.850 --> 32:56.850
导入这个5u browser.js

32:57.850 --> 32:58.850
那么它得到的就是

32:58.850 --> 33:00.850
5u构造函数

33:00.850 --> 33:01.850
这个能看懂吗

33:01.850 --> 33:02.850
不要告诉我看不懂

33:02.850 --> 33:04.850
跟之前那个地方

33:04.850 --> 33:05.850
先引用5u

33:05.850 --> 33:06.850
它跟我们提供一个

33:06.850 --> 33:07.850
全局的污染全局辨量的

33:07.850 --> 33:08.850
构造函数

33:08.850 --> 33:09.850
和这个地方有什么区别呢

33:09.850 --> 33:10.850
对吧

33:10.850 --> 33:11.850
只不过这个东西

33:11.850 --> 33:13.850
它不会污染全局辨量

33:13.850 --> 33:14.850
可以直接拿过来

33:14.850 --> 33:15.850
构造函数直接使用

33:15.850 --> 33:16.850
好咱们这里怎么写呢

33:16.850 --> 33:18.850
6一个5u对吧

33:19.850 --> 33:20.850
这里写配置

33:21.850 --> 33:22.850
配置什么呢

33:22.850 --> 33:24.850
我们可以写个el

33:24.850 --> 33:25.850
也可以用什么

33:25.850 --> 33:26.850
创建5u对象过后

33:26.850 --> 33:28.850
点什么mount

33:28.850 --> 33:29.850
对吧

33:29.850 --> 33:30.850
你看懂吧

33:30.850 --> 33:31.850
都是一个5u实力

33:31.850 --> 33:32.850
点mount

33:32.850 --> 33:33.850
把它挂得到

33:33.850 --> 33:35.850
id为app的一面上去

33:35.850 --> 33:37.850
远处里边去

33:37.850 --> 33:38.850
好

33:38.850 --> 33:39.850
但是这个地方

33:39.850 --> 33:40.850
我们通常来说

33:40.850 --> 33:41.850
这个入口地方

33:41.850 --> 33:43.850
我们不用去写什么模板

33:43.850 --> 33:44.850
不用去写什么

33:44.850 --> 33:45.850
delta配置

33:45.850 --> 33:46.850
不用去写这些东西

33:46.850 --> 33:48.850
我们做一件事

33:48.850 --> 33:50.850
渲染一个组件

33:50.850 --> 33:51.850
剩下的事情

33:51.850 --> 33:53.850
全部交给这个组件去完成

33:53.850 --> 33:54.850
对吧

33:54.850 --> 33:55.850
那怎么来渲染一个组件呢

33:55.850 --> 33:57.850
我们可以用一个render

33:57.850 --> 33:58.850
不过这个render的话

33:58.850 --> 33:59.850
我们说了

33:59.850 --> 34:00.850
平时都不怎么回写

34:00.850 --> 34:01.850
就这个地方

34:01.850 --> 34:02.850
我们可能习惯上

34:02.850 --> 34:03.850
会写这么一句话

34:04.850 --> 34:05.850
render

34:05.850 --> 34:06.850
里边不是个函数H吗

34:06.850 --> 34:07.850
好

34:07.850 --> 34:08.850
H我就返回一个什么呢

34:08.850 --> 34:10.850
创建一个组件

34:10.850 --> 34:12.850
把个组件对象传进去

34:12.850 --> 34:14.850
那么比方说我这里有个组件叫

34:14.850 --> 34:15.850
app

34:15.850 --> 34:16.850
叫解释

34:16.850 --> 34:17.850
这是

34:17.850 --> 34:19.850
伍佑的跟组件

34:19.850 --> 34:21.850
就是我们整个一面上的

34:21.850 --> 34:22.850
所有东西

34:22.850 --> 34:23.850
全部交给他来进行渲染

34:23.850 --> 34:24.850
写一个组件

34:24.850 --> 34:26.850
组件的本质是啥呀

34:27.850 --> 34:28.850
组件的本质是啥

34:28.850 --> 34:30.850
组件的本质不就是一个

34:31.850 --> 34:32.850
对象吗

34:32.850 --> 34:33.850
对不对

34:33.850 --> 34:35.850
组件的本质不就是个对象吗

34:36.850 --> 34:37.850
比方说我们这里

34:37.850 --> 34:38.850
渲染一个组件

34:38.850 --> 34:39.850
组件的模板

34:39.850 --> 34:41.850
模板我们可以写成个辨量

34:42.850 --> 34:43.850
写成个辨量

34:44.850 --> 34:45.850
比方说我们这里

34:45.850 --> 34:47.850
写个A7远处吧

34:48.850 --> 34:49.850
app

34:49.850 --> 34:50.850
组件

34:50.850 --> 34:51.850
好这是组件的模板

34:51.850 --> 34:52.850
那么模板配置到这儿

34:53.850 --> 34:54.850
其他的像data

34:54.850 --> 34:55.850
这些东西是不是可以配置到这儿

34:55.850 --> 34:57.850
那么就写成这么一个组件了

34:57.850 --> 34:58.850
能看到吗

34:58.850 --> 34:59.850
这就是个组件对象

34:59.850 --> 35:00.850
回忆一下

35:00.850 --> 35:01.850
组件是怎么在创建的

35:01.850 --> 35:02.850
先创建一个对象

35:02.850 --> 35:04.850
那么接下来到Made.js里边来

35:04.850 --> 35:05.850
那么我们渲染组件的时候

35:05.850 --> 35:07.850
我们可以这样的渲染

35:08.850 --> 35:09.850
导入这个组件对象

35:11.850 --> 35:12.850
app.js

35:12.850 --> 35:13.850
这个东西你以前没见过

35:13.850 --> 35:14.850
这种写法

35:14.850 --> 35:15.850
其实这种写法

35:15.850 --> 35:16.850
我跟你们说一下

35:16.850 --> 35:17.850
你明白了

35:17.850 --> 35:18.850
因为这个玩意

35:18.850 --> 35:19.850
组件它也是虚拟节点

35:19.850 --> 35:20.850
虚拟节点

35:20.850 --> 35:21.850
虚拟节点的类型

35:21.850 --> 35:22.850
不是一个普通的元素

35:22.850 --> 35:23.850
而是一个组件

35:23.850 --> 35:24.850
就这么简单

35:25.850 --> 35:26.850
那么还有知道了

35:26.850 --> 35:28.850
这句话就相当于

35:28.850 --> 35:30.850
是这个模板生成出来了

35:31.850 --> 35:33.850
你先注册一个component

35:33.850 --> 35:34.850
app

35:34.850 --> 35:36.850
然后再写一个template

35:37.850 --> 35:40.850
app

35:40.850 --> 35:43.220
懂了意思吧

35:43.220 --> 35:45.220
这两句话加起来

35:45.220 --> 35:48.790
就相当于是你写的这么一句话

35:48.790 --> 35:50.790
就这么意思

35:50.790 --> 35:51.790
保存

35:51.790 --> 35:52.790
你现在看一下

35:52.790 --> 35:53.790
应这个设计

35:53.790 --> 35:54.790
也挺没有

35:54.790 --> 35:57.790
所以现在出来了app组件了

35:57.790 --> 35:59.790
先把这个地方理解清楚

35:59.790 --> 36:02.790
这是我们平时常用的一种写法

36:02.790 --> 36:03.790
那么这个地方

36:03.790 --> 36:05.790
其实我们还可以写的更加

36:06.790 --> 36:08.790
今天赏字不太舒服

36:08.790 --> 36:15.050
可以写的更加简单一点

36:15.050 --> 36:16.050
比方说我们这里可以用一个

36:16.050 --> 36:18.050
用一个箭头函数

36:18.050 --> 36:24.840
是不是可以这样写

36:24.840 --> 36:25.840
通过了一个a请

36:25.840 --> 36:27.840
创建一个虚拟节点

36:27.840 --> 36:29.840
其实就创建一个组件的实力

36:29.840 --> 36:31.840
把组件应用到我们这个

36:31.840 --> 36:32.840
虚拟节点里面去

36:32.840 --> 36:34.840
也就是说我们Made

36:34.840 --> 36:35.840
接什么啥事都不做

36:35.840 --> 36:37.840
就写一个简单的这么一个启动

36:37.840 --> 36:39.840
就写一个启动功能就行了

36:39.840 --> 36:41.840
身上的事情要渲染什么东西

36:41.840 --> 36:42.840
有什么模板

36:42.840 --> 36:43.840
有什么数据

36:43.840 --> 36:45.840
我们想给他去完成

36:46.840 --> 36:47.840
比方说我们这里

36:47.840 --> 36:48.840
就可以写个模板

36:48.840 --> 36:49.840
DIV

36:53.660 --> 36:54.660
它自己的组件

36:54.660 --> 36:55.660
那么这个组件里面

36:55.660 --> 36:57.660
是不是有可能会用到别的组件

36:57.660 --> 36:59.660
于是我们在SRC里面

36:59.660 --> 37:01.660
再建一个目录叫做Component

37:02.660 --> 37:04.660
这些目录都不是说必须要

37:04.660 --> 37:05.660
这样的名字

37:06.660 --> 37:08.660
没有必须的随便写的

37:08.660 --> 37:09.660
只是我们习惯上来

37:09.660 --> 37:11.660
会用这些名字来命名

37:11.660 --> 37:13.660
那么这里面就写一些普通组件了

37:13.660 --> 37:14.660
其实这个玩意也是普通组件

37:14.660 --> 37:15.660
只不过呢

37:15.660 --> 37:17.660
因为我们启动了喊数里面

37:17.660 --> 37:19.660
启动那个模块里面

37:19.660 --> 37:20.660
直接是使用它的

37:20.660 --> 37:21.660
所以我们把它放到根目录

37:21.660 --> 37:22.660
那么身上的组件

37:22.660 --> 37:24.660
我们把它放到Component里面

37:24.660 --> 37:25.660
比方说我们这里

37:25.660 --> 37:26.660
写到那么一个组件

37:28.660 --> 37:29.660
就这个组件吧

37:29.660 --> 37:30.660
我们刚才不是写过一个组件吗

37:30.660 --> 37:31.660
叫做什么

37:31.660 --> 37:32.660
MyButton

37:32.660 --> 37:33.660
这个组件

37:34.660 --> 37:36.660
看一下我们平时怎么去写这个东西

37:36.660 --> 37:38.660
新建一个叫做MyButton

37:40.660 --> 37:41.660
导出

37:42.660 --> 37:43.660
Export

37:44.660 --> 37:45.660
Defort

37:45.660 --> 37:46.660
导出这个组件

37:46.660 --> 37:47.660
它有自己的data

37:47.660 --> 37:48.660
然后templates

37:48.660 --> 37:49.660
我们可以用一个辨量

37:49.660 --> 37:50.660
写到上面

37:50.660 --> 37:57.580
辨语管理

37:57.580 --> 37:58.580
写过来

37:58.580 --> 37:59.580
然后这边

38:02.340 --> 38:03.340
这是不是导出一个组件了吗

38:03.340 --> 38:04.340
然后比方说

38:04.340 --> 38:05.340
App里面要去使用这个组件

38:05.340 --> 38:06.340
怎么使用呢

38:06.340 --> 38:07.340
是不是要导入

38:09.340 --> 38:10.340
Import

38:12.340 --> 38:13.340
MyButton

38:13.340 --> 38:14.340
From

38:14.340 --> 38:15.340
Component

38:15.340 --> 38:17.340
MyButton.js

38:17.340 --> 38:18.340
导入

38:18.340 --> 38:20.340
那么是不是要局部注册Component

38:21.340 --> 38:22.340
局部注册

38:22.340 --> 38:23.340
然后这样子

38:23.340 --> 38:24.340
是不是还可以在模板里面

38:24.340 --> 38:25.340
去使用这个组件了

38:25.340 --> 38:29.550
MyButton

38:29.550 --> 38:30.550
好保证啊

38:30.550 --> 38:31.550
你看一下是不是用了

38:31.550 --> 38:32.550
这组件就出来了

38:32.550 --> 38:33.550
对不对

38:33.550 --> 38:34.550
当然我们一个完整的项目里边

38:34.550 --> 38:35.550
这个关系呢

38:35.550 --> 38:36.550
可能会成绩的

38:36.550 --> 38:37.550
成绩会非常深

38:37.550 --> 38:38.550
关系会比较复杂

38:38.550 --> 38:40.550
但是基本干点就是这样子

38:40.550 --> 38:41.550
每一个模块

38:41.550 --> 38:43.550
它就是一个组件

38:43.550 --> 38:44.550
有自己的模板

38:44.550 --> 38:46.550
有自己的各种配置

38:46.550 --> 38:48.550
就写好一个组件了

38:48.550 --> 38:49.550
那么这样子

38:49.550 --> 38:50.550
是不是非常方便管理

38:50.550 --> 38:51.550
我们比方说

38:51.550 --> 38:52.550
一个页面有很多的

38:52.550 --> 38:53.550
开发者一起协助

38:53.550 --> 38:54.550
那么无非就是

38:54.550 --> 38:55.550
不同的开发者去协

38:55.550 --> 38:56.550
不同的组件就完事了

38:56.550 --> 38:57.550
最后我们把一整合

38:57.550 --> 38:58.550
一个页面就出来了

38:58.550 --> 38:59.550
一个页面本身

38:59.550 --> 39:00.550
也就是

39:00.550 --> 39:02.550
也是一个组件

39:02.550 --> 39:03.550
懂得意思吧

39:03.550 --> 39:05.550
好这些可能

39:05.550 --> 39:07.550
没有什么别的要求

39:07.550 --> 39:09.550
就你把这个结构给我写出来

39:09.550 --> 39:10.550
Media.js

39:10.550 --> 39:12.550
你要能够写出来

39:12.550 --> 39:13.550
App.js

39:13.550 --> 39:14.550
你要能够写出来

39:14.550 --> 39:16.550
按照国代把写一遍

39:16.550 --> 39:17.550
去体会一下

39:17.550 --> 39:19.550
就形成了这么一种组件结构

39:19.550 --> 39:21.550
现在我们一点一点的

39:21.550 --> 39:22.550
去往那个

39:22.550 --> 39:24.550
我们工程结构

39:24.550 --> 39:25.550
去靠

39:25.550 --> 39:26.550
因为我们马上

39:26.550 --> 39:27.550
去开发这个项目了

39:27.550 --> 39:28.550
好吧一定要把这个

39:28.550 --> 39:29.550
去写一遍

39:29.550 --> 39:30.550
写一遍过后

39:30.550 --> 39:31.550
充分理解这些代码

39:31.550 --> 39:32.550
什么意思

39:32.550 --> 39:34.550
这一块代码

39:34.550 --> 39:35.550
如果说理解不清楚的话

39:35.550 --> 39:36.550
就没关系

39:36.550 --> 39:37.550
我就告诉你的

39:37.550 --> 39:38.550
我这个玩意就是

39:38.550 --> 39:39.550
来做启动的

39:39.550 --> 39:40.550
来创建无诱实力的

39:40.550 --> 39:41.550
渲染什么呢

39:41.550 --> 39:42.550
渲染一个蓄力节点

39:42.550 --> 39:43.550
这个蓄力节点

39:43.550 --> 39:44.550
就是渲染这个组件

39:44.550 --> 39:45.550
这句话的意思就是说

39:45.550 --> 39:47.550
渲染

39:47.550 --> 39:48.550
组件

39:48.550 --> 39:49.550
App

39:49.550 --> 39:50.550
我这里指负着

39:50.550 --> 39:51.550
创建无诱实力

39:51.550 --> 39:52.550
然后渲染组件App

39:52.550 --> 39:53.550
剩下的事情

39:53.550 --> 39:54.550
全部交给组件App

39:54.550 --> 39:56.550
这个地方你必须要能看懂

39:56.550 --> 39:57.550
这个组件要你

39:57.550 --> 39:58.550
要能看懂

39:58.550 --> 39:59.550
就是这种写法

39:59.550 --> 40:00.550
要能看懂

40:00.550 --> 40:01.550
好了这节课

40:01.550 --> 40:02.550
内容就这么多

40:02.550 --> 40:03.550
表现了一些

40:03.550 --> 40:04.550
组件的最基本

40:04.550 --> 40:05.550
最基本的概念

40:05.550 --> 40:06.550
我们就可以干活了

40:06.550 --> 40:07.550
好把它写成这个样子

