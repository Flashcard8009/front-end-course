WEBVTT

00:00.820 --> 00:06.380
好 这节课呢 咱们呢利用咱们之前学过的知识啊来做这么一个小的练习

00:06.940 --> 00:12.580
其实这个练习呢 你说能练习到多少我们之前学过的字 就是我们上前两节课

00:13.220 --> 00:17.620
呃 这类型画书组Rebuffer 这一块的知识你练习多少呢 你练习不到多少

00:18.300 --> 00:22.180
只是呢 你没有这两块知识呢 你就很难理解这一块这一节课的代码

00:22.740 --> 00:27.260
这是他做什么呢 就是把一个一张图片呢转换成有个黑白格式

00:27.820 --> 00:33.260
啊 怎么转换呢 你看这一张彩头片 这一个按钮点击一下 哎 他就把它装成了黑白格式了

00:34.100 --> 00:35.420
不用借助服务器

00:36.420 --> 00:39.220
啊 我们就在客户端用借识 其实就可以完成

00:40.340 --> 00:46.500
呃 实际上是怎么做的呢 咱们一步一步来分析啊 左边呢 我们是一个1米几元素

00:47.260 --> 00:53.060
这里呢 是一个按钮 右边呢 是一个caverse对象啊 就是一个caverse画布

00:53.500 --> 01:00.940
所以说 这节课呢 你需要有一点画布的知识啊 你不如果说你完全没有学过画布的话 你要完成这个练习的话

01:01.540 --> 01:02.740
也会有一些困难啊

01:04.140 --> 01:05.540
那么我们首先呢 把这个

01:06.380 --> 01:09.060
效果给他做出来啊 这个页面的结构给他写出来

01:10.020 --> 01:10.180
是

01:11.020 --> 01:11.380
test

01:13.220 --> 01:15.300
好 我们一步不来分析啊 看怎么回事

01:16.420 --> 01:22.620
这里呢 我们在外面写个div吧 我就简单写一下这个页面啊 这个页面上有一个1米几元素

01:23.740 --> 01:29.780
这里的图片路径呢 就在1米几啊 这是一个坦湾作家啊 去年过世了啊 鸟

01:30.900 --> 01:32.820
然后中间一个按钮 就是转换

01:33.940 --> 01:37.780
像后边呢 有一个caverse 就是画布啊 当然画布的话 我们现在可以

01:38.340 --> 01:40.500
一看不见什么效果的吧 我们先把运行出来再说

01:41.700 --> 01:46.500
啊 目前是这个样子的吧 呃 怎么回事 现在为什么还上面有一届空的呢 是因为

01:47.060 --> 01:50.980
目前的caverse呢 它的有个初始的宽高 这个初始宽高是多少来着

01:51.540 --> 01:58.260
这个caverse初始宽高 我有点忘了啊 那么我们要手动式去设置一下这个caverse宽高 把它设置成跟图片一致啊

01:58.740 --> 02:03.780
宽度为100 高度为117啊 这里呢 我们设置一下啊 宽度为100

02:04.500 --> 02:07.060
高度呢 为117啊 保存

02:07.860 --> 02:14.980
好 OK啊 现在caverse这么多 差不多了 对吧 呃 然后这个按钮的话 因为我这边的话 是把它做成一个弹性盒的啊

02:15.300 --> 02:20.020
外面这个div是把它做成一个弹性盒 当然你不去做的话 也无所谓 这个东西都不是很重要

02:20.740 --> 02:27.940
呃 比方做个弹性盒嘛 我们给这个div呢 也不设置高度了啊 直接把它设置成弹性盒就完事了啊 display flex

02:28.820 --> 02:34.580
好 保存啊 你看是不是这个样子的 对吧 啊 一米级元素按钮 然后呢 canvas

02:35.780 --> 02:44.180
好 那么怎么来去画一个 就是我们现在目标就是点击按钮过后呢 我们要在右边的这个caverse这里呢 画一张黑白图像

02:44.980 --> 02:49.700
那么怎么画呢 是这样子的 我们首先给这个按钮了 注册点击时间

02:50.180 --> 02:54.740
或者我们先写个函数吧 就写个函数 签击嘛 有这么一个签击函数

02:55.220 --> 03:00.340
当我们点击按钮的时候呢 去调用这个函数啊 我这就写简单一点 直接在这里写吧 也无所谓

03:00.980 --> 03:07.860
啊 点击按钮过后呢 去调用这个函数 这个函数要干嘛呢 这个函数呢 是要把这个图片里面的图 图箱啊

03:08.260 --> 03:13.140
转变成黑白格式 画到右边的画布里边去啊 右边的画布

03:14.420 --> 03:18.180
那么在画布里边 要画一个黑白图像 我们要来分析一下

03:18.900 --> 03:25.380
怎么来画一个黑白图像呢 这里需要一点图像学的知识啊 这里呢 我给大家介绍一下吧

03:26.100 --> 03:27.940
画黑白图像是实际上是这样子的

03:28.740 --> 03:34.260
首先呢 第一个 你要理解图像的组成啊 图像的组成

03:34.740 --> 03:41.380
图像呢 它是有有很多种图像啊 在画布里边呢 它的图像呢 它是有一个一个像素点组成的

03:42.180 --> 03:43.860
那么首先你要理解第一个就是

03:44.980 --> 03:47.780
我们这里有很多的图像知识啊 需要大家理解

03:48.900 --> 03:51.780
就是说 一张图片

03:52.980 --> 03:54.820
一个图像

03:55.540 --> 03:59.060
一个图像 应该是这样说啊 画布中的图像

03:59.700 --> 04:03.220
画布中的一个图像 因为如果说你是一个图片文件的话呢

04:03.620 --> 04:10.100
还不一定 比方说你SVG啊 这个图片和GPEG和BMP和GIF这些图片呢

04:10.340 --> 04:16.420
它的存处方式啊 图像里边的数据 它的存处方式都不太一样的啊 它格式也不太一样

04:16.900 --> 04:25.140
所以说呢 我们最终呢 把它统一到画布里边 如果说我简单的把这个图像画了画布里边 那么画布里边的图像呢 是这个样子的

04:25.860 --> 04:34.260
画布中的一个图像呢 是由多个像素点组成的啊 每个像素点

04:35.620 --> 04:37.620
像素点拥有

04:39.220 --> 04:41.620
四个数据 分别是红

04:42.580 --> 04:51.220
每个像素点里边 它都每个像素点其实就是一个颜色 对吧 这些像素点的组成一个图像 每个像素点的颜色 既然是颜色 它就有红

04:52.020 --> 04:52.420
绿

04:53.860 --> 04:54.180
蓝

04:54.740 --> 04:55.220
以及什么

04:55.780 --> 04:57.140
alpha 就透明通照

04:58.340 --> 04:59.060
alpha

04:59.780 --> 05:01.140
有这四个数据组成

05:02.100 --> 05:02.820
明白的意思吗

05:03.380 --> 05:08.420
好 那么我们既然一个图像 只有多个像素点组成 每个像素点有这么四个数据

05:08.660 --> 05:12.340
那么怎么样把一个图像变成黑白色的呢 其实很简单

05:13.860 --> 05:18.340
黑白把一个图像变成

05:19.460 --> 05:21.780
黑白只需要将

05:23.700 --> 05:26.660
图像的每个像素点

05:28.180 --> 05:29.620
每个像素点

05:32.340 --> 05:33.940
设置成为

05:35.060 --> 05:38.180
红绿蓝的平均数

05:39.380 --> 05:43.780
至于为什么你不用管 因为这是图像学的知识

05:44.180 --> 05:47.860
就是说你每一个像素不是有红绿蓝三种颜色吗 对不对

05:48.180 --> 05:49.780
加上一个alpha一共四个数据

05:49.940 --> 05:52.340
alpha我们这里用不到 透明通道我们用不到

05:52.660 --> 05:56.260
就是一个红绿蓝三种颜色 你把它求一个平均值

05:56.500 --> 05:59.060
把红加绿加蓝出一个3 是不是就平均值

05:59.460 --> 06:04.980
然后把这个平均值分别去设置到每一个像素点的红绿蓝就行了

06:05.620 --> 06:06.660
就这么个意思

06:06.980 --> 06:09.220
比方说 比方说第一个像素点

06:09.460 --> 06:17.540
比方说第一个像素点的红是100 绿是50 蓝是150

06:18.180 --> 06:20.980
得一个平均值多少呢 平均值

06:24.580 --> 06:26.660
平均值是多少 是不是就是100

06:26.900 --> 06:30.020
平均值为100 100加上50加上150

06:30.260 --> 06:34.580
除以3就平均值100 那么你只需要把这个像素点重新再改一下

06:34.980 --> 06:40.740
红变成100 绿也变成100 蓝也变成100 OK

06:40.740 --> 06:41.540
它就是一个黑白了

06:42.580 --> 06:46.340
因为当红绿蓝三种颜色相同的时候 它是一个挥接度

06:46.660 --> 06:49.220
它是一个挥接度 就是感觉就是

06:50.340 --> 06:54.340
你知道那个三个零就是黑色 三个255就是白色 对不对

06:54.420 --> 06:58.100
那么中间的三个如果红绿蓝一起调整一起变化的话

06:58.260 --> 07:00.820
那么它就是在白色和黑色之间

07:01.460 --> 07:03.700
它就不会存在有其他明显的颜色出现

07:04.260 --> 07:04.900
明儿那里是什么

07:05.220 --> 07:07.860
就是说你把这三个色为平均数就完事了

07:08.820 --> 07:09.860
这就是我们的原理

07:10.580 --> 07:12.420
因此要实现这个目标

07:13.060 --> 07:17.780
我们就必须要得到这个图片每一个像素点的数据 是不是要全部拿到

07:18.420 --> 07:20.020
那么怎么去拿这个数据呢

07:20.500 --> 07:22.740
实际上我们通过这个一米几元素能不能拿呢

07:23.060 --> 07:25.940
能拿 但是我们这里不建议不建议这样做

07:26.260 --> 07:29.780
因为这个一米几元素里边的图像信息的话

07:30.180 --> 07:31.620
可能跟我们想象的不一样

07:31.700 --> 07:35.300
它不是简单的每一个像素点的那些数据就完事了

07:35.460 --> 07:38.020
它还包含了一些图像的原信息

07:38.020 --> 07:40.260
比方说图片多少尺寸啊

07:40.420 --> 07:42.100
这个图片多少多大呀

07:42.500 --> 07:45.140
对吧 这些东西的它都包含在内

07:45.300 --> 07:47.300
不光是图片里边的像素信息

07:47.780 --> 07:50.420
我们要得到一个图像的单纯的像素信息

07:50.660 --> 07:54.740
最简单的方式就是先把图像画到画布里边去

07:55.220 --> 07:57.620
然后再从画布里边去得到图像信息

07:57.700 --> 07:58.980
这是最简单的

07:59.220 --> 08:01.060
那么咱们来做一下

08:01.540 --> 08:03.380
我们当调问这个方法的时候

08:03.380 --> 08:06.020
我们先把这个图像画到画布里边去

08:06.020 --> 08:09.220
这是你们应该是你们以前学过的画布的知识

08:09.220 --> 08:10.020
这个很简单

08:10.260 --> 08:12.340
首先我们得到这个一米几元素

08:13.700 --> 08:14.340
Document

08:14.820 --> 08:16.420
这里是用query selector

08:17.060 --> 08:18.260
得到这个一米几元素

08:19.140 --> 08:21.780
然后把这个一米几元素画到画布里边去

08:21.780 --> 08:22.660
这个是不是很简单

08:22.820 --> 08:24.420
那么我们这里得到画布

08:24.900 --> 08:25.380
Camers

08:26.020 --> 08:26.580
Document

08:27.220 --> 08:29.380
Camers

08:29.940 --> 08:32.820
得到Camers之后我们要得到它这个画布对象

08:32.980 --> 08:34.820
就是2D

08:34.820 --> 08:36.420
二不能开头

08:36.980 --> 08:38.660
Context

08:38.660 --> 08:39.380
Context

08:39.780 --> 08:40.740
得到画布对象

08:40.740 --> 08:41.780
Get Context

08:41.780 --> 08:43.140
这是以前的知识

08:43.140 --> 08:44.500
如果这一块不清楚的话

08:44.500 --> 08:46.820
你那里要把以前知识学了才能听这节课

08:47.220 --> 08:47.940
无所谓吧

08:47.940 --> 08:49.060
这也是个扩展课程

08:49.620 --> 08:50.900
那么得到画布对象

08:50.900 --> 08:51.700
然后干嘛呢

08:51.700 --> 08:53.060
开始画图片了呗

08:53.300 --> 08:54.100
里边有一个方法

08:54.100 --> 08:54.420
对吧

08:54.420 --> 08:55.620
做image

08:55.620 --> 08:56.820
画一个图片

08:56.820 --> 08:58.420
第一个传一个图片对象

08:58.420 --> 08:59.300
就是图片元素

08:59.380 --> 09:00.180
传进去

09:00.180 --> 09:02.020
而画到这个画布的哪个地方呢

09:02.020 --> 09:03.380
就是坐标呢

09:03.380 --> 09:04.420
零

09:05.060 --> 09:06.660
从这个画布的左上角

09:06.660 --> 09:08.740
开始把图片完整的画下来

09:09.140 --> 09:09.540
好

09:09.540 --> 09:10.580
那么这样子一来了

09:10.580 --> 09:11.700
以点击过后呢

09:11.700 --> 09:14.020
你是不是把图片就远风不动的

09:14.020 --> 09:15.300
画到这个画布里边去了

09:15.700 --> 09:15.940
好

09:15.940 --> 09:17.540
画到画布里边就好办了

09:17.780 --> 09:18.980
因为画布里边呢

09:18.980 --> 09:20.340
它提供了一个方法

09:21.140 --> 09:22.660
叫做Gate

09:22.660 --> 09:23.860
ImageData

09:23.860 --> 09:24.820
这个方法

09:24.820 --> 09:25.940
这个方法做什么呢

09:25.940 --> 09:26.980
是得到

09:27.460 --> 09:28.420
画布

09:28.580 --> 09:30.420
某一个区域的

09:30.420 --> 09:31.860
图像信息

09:31.860 --> 09:32.420
啊

09:32.420 --> 09:33.140
图像信息

09:33.780 --> 09:35.460
那么这里边传参数传啥呢

09:35.460 --> 09:36.340
其实很简单

09:36.340 --> 09:37.940
一个前两个参数呢

09:37.940 --> 09:38.740
指的是

09:38.740 --> 09:39.460
你要

09:39.460 --> 09:41.220
因为画布是一个举行嘛对吧

09:41.220 --> 09:42.500
你想它问你的事

09:42.500 --> 09:43.940
你想得到这个画布中中

09:43.940 --> 09:45.940
哪一个区域的图像信息

09:46.500 --> 09:48.500
比方说你只想得到这个区域

09:48.500 --> 09:50.180
比方说只想得到这个区域

09:50.180 --> 09:50.980
那么你告诉他

09:51.300 --> 09:52.580
那么我们得到哪个区域呢

09:52.580 --> 09:54.420
我们得到的是整个画布区域对吧

09:54.420 --> 09:54.980
就是

09:54.980 --> 09:57.300
从左上角零零开始

09:57.700 --> 10:00.180
然后宽高是这个图片的宽高

10:00.180 --> 10:01.780
所以说我们这里怎么传呢

10:01.780 --> 10:02.660
前两个参数呢

10:02.660 --> 10:04.660
传的是这个举行的左上角

10:04.660 --> 10:06.180
零零坐标

10:06.180 --> 10:06.660
然后呢

10:06.660 --> 10:07.300
后两个参数呢

10:07.300 --> 10:08.740
传的是举行的宽高

10:08.740 --> 10:09.300
宽高的话

10:09.300 --> 10:11.300
我们就用这个图片的宽度和高度

10:11.300 --> 10:12.020
就完事了

10:13.300 --> 10:14.420
好那么就得到了

10:14.420 --> 10:15.140
得到了什么呢

10:15.140 --> 10:17.140
就得到了整个这个区域

10:17.140 --> 10:18.420
的图像信息

10:18.420 --> 10:18.740
啊

10:18.740 --> 10:19.540
图像信息

10:19.540 --> 10:21.060
好他会返回一个对象

10:21.060 --> 10:22.260
啊我们把它称之为

10:22.260 --> 10:23.220
ImageData嘛

10:23.220 --> 10:24.820
好我们输出一下这个对象啊

10:25.620 --> 10:26.580
ImageData

10:27.540 --> 10:28.260
好保存

10:28.260 --> 10:29.300
你看一下

10:29.300 --> 10:30.100
点击过后呢

10:30.100 --> 10:32.100
我们的控制台里边点击过后呢

10:32.100 --> 10:33.860
是不是有ImageData对象出现了

10:33.860 --> 10:35.780
好这个对象里面哪些信息呢

10:35.780 --> 10:38.260
我们可以看到他这个举行区的宽高

10:38.260 --> 10:40.900
宽高度和宽度得到了

10:40.900 --> 10:42.020
还有一个重要的信息

10:42.020 --> 10:43.140
就是data

10:43.140 --> 10:44.740
他有个属性叫data

10:44.740 --> 10:46.100
这个属性呢

10:46.100 --> 10:48.180
他是一个内形化数组

10:48.180 --> 10:51.860
叫U int8 collapse array

10:51.860 --> 10:56.500
哎我们之前接触过U int8 int8 array对吧

10:56.500 --> 10:58.500
但没有接触ClappedArray

10:58.500 --> 10:59.540
这什么意思呢

10:59.540 --> 11:01.060
这是专门来针对

11:01.060 --> 11:02.980
其实他就是你可以把它看做

11:02.980 --> 11:05.460
就是一个U int8 array

11:05.460 --> 11:07.540
就是一个U int8 array的数组

11:07.540 --> 11:08.820
啊只不过呢

11:08.820 --> 11:10.980
他为了针对图像的操作啊

11:10.980 --> 11:12.260
针对图像的做一些特

11:12.260 --> 11:14.180
就是计算操作

11:14.180 --> 11:16.820
防止你数据溢出之后呢

11:16.820 --> 11:18.740
因为图像有一些特殊的处理方式啊

11:18.740 --> 11:19.620
这是叫图像学

11:19.620 --> 11:20.900
我们也不去生纠

11:20.900 --> 11:23.140
就是图像有一些特殊的处理方式

11:23.140 --> 11:24.780
啊当我们数据量溢出

11:24.780 --> 11:26.140
比方说我们

11:26.140 --> 11:27.500
因为这是一个U int8嘛

11:27.500 --> 11:29.900
所以他取值范围是0到255对吧

11:29.900 --> 11:31.500
如果说你超过了255

11:31.500 --> 11:32.860
或者是小于的0

11:32.860 --> 11:34.620
那么这个数据该怎么来存处

11:34.620 --> 11:36.540
图像有一些特殊的处理方式啊

11:36.540 --> 11:37.900
如果你不用这个数组的话

11:37.900 --> 11:39.980
你用普通的U int8 array的话

11:39.980 --> 11:41.500
那你要手动去处理这样的

11:41.500 --> 11:42.460
这样的东西啊

11:42.460 --> 11:44.620
我们不不去生纠这个东西啊

11:44.620 --> 11:45.500
那么用这个数组呢

11:45.500 --> 11:47.180
就专门来处理图像数据的

11:47.180 --> 11:48.620
如果说你一出了

11:48.620 --> 11:50.060
他会自动帮你来处理

11:50.060 --> 11:51.340
其他的跟我们之前学过的

11:51.340 --> 11:53.420
内形化数组是一样的

11:53.420 --> 11:55.020
那么在这个内形化数组里面

11:55.020 --> 11:55.980
你看一下

11:55.980 --> 11:57.900
我们来理解一下啊

11:57.900 --> 11:59.020
这个数组可以首先看到

11:59.020 --> 12:02.380
它长度是46800

12:02.380 --> 12:04.380
也就是说这个图像的

12:04.380 --> 12:06.380
这个数组的长度是46800

12:06.380 --> 12:08.060
这个能不能理解

12:08.060 --> 12:09.180
怎么理解呢

12:09.180 --> 12:11.740
你看这个图片的宽高是多少

12:11.740 --> 12:14.380
宽高100×117

12:14.380 --> 12:16.380
咱们来算一下吧

12:16.380 --> 12:19.820
100×117

12:19.900 --> 12:23.740
是不是一共有11700个像数

12:23.740 --> 12:24.380
对吧

12:24.380 --> 12:25.820
是不是这么多像数

12:25.820 --> 12:27.900
而每一个像数点

12:27.900 --> 12:30.940
是不是需要4个数字来保存

12:30.940 --> 12:33.260
每一个像数点是不是需要4个数据

12:33.260 --> 12:33.660
对吧

12:33.660 --> 12:35.180
红绿蓝Alpha

12:35.180 --> 12:36.780
那么乘一个4

12:36.780 --> 12:39.900
这是刚才那个1万多是一个像数点

12:39.900 --> 12:40.380
对吧

12:40.380 --> 12:41.100
这么多像数点

12:41.100 --> 12:43.020
每个像数点需要4个数据

12:43.020 --> 12:47.020
那么是不是一共需要46800个数据

12:47.020 --> 12:47.500
对吧

12:47.500 --> 12:48.860
是不是这么多数据

12:48.860 --> 12:50.620
于是它就得到这么一个数据

12:50.620 --> 12:52.140
这个数据里面就记录的是

12:52.140 --> 12:55.260
每一个像数点的每一个红绿蓝

12:55.260 --> 12:56.620
以及Alpha的信息

12:56.620 --> 12:57.180
看

12:57.180 --> 12:58.380
第一个像数点

12:58.380 --> 12:59.740
它的第一个像数点

12:59.740 --> 13:01.500
当然这个像数点很小很小

13:01.500 --> 13:04.300
第一个像数点的颜色是21 19 22

13:04.300 --> 13:06.220
然后透明通道是255

13:06.220 --> 13:06.940
就最大值

13:06.940 --> 13:08.220
最大值就不透明

13:08.220 --> 13:09.820
第二个像数点是这个

13:09.820 --> 13:11.020
第三个像数点是这个

13:11.020 --> 13:12.620
你看就这样存出了

13:12.620 --> 13:13.580
看到没

13:13.580 --> 13:15.100
没了意思吗

13:15.100 --> 13:17.180
这就是它的图像信息

13:17.180 --> 13:18.860
那为什么是U映射8数组

13:18.860 --> 13:20.380
而不是什么映射16呢

13:20.380 --> 13:22.620
首先为什么要是U

13:22.620 --> 13:23.580
那你想啊

13:23.580 --> 13:25.660
红绿蓝Alpha这些数字

13:25.660 --> 13:27.180
有没有可能是复数

13:27.180 --> 13:28.060
是不可能

13:28.060 --> 13:29.260
所以说它肯定是U

13:29.260 --> 13:31.900
它是无符号的数字

13:31.900 --> 13:33.580
一定是正数

13:33.580 --> 13:35.740
那为什么是映射8呢

13:35.740 --> 13:37.100
因为它的取值范围

13:37.100 --> 13:37.980
红绿蓝的取值范围

13:37.980 --> 13:40.460
就是0到255对吧

13:40.460 --> 13:42.220
那么Alpha的取值范围呢是

13:42.220 --> 13:43.580
我们之前用的是0到1

13:43.580 --> 13:46.460
其实你也可以把它看成是0到255对吧

13:47.020 --> 13:49.260
如果不管小数的话

13:49.260 --> 13:51.740
我们可以把它看成是0到255

13:51.740 --> 13:53.820
那么这样的一个取值范围

13:53.820 --> 13:57.100
是不是刚好是映射8最合适

13:57.100 --> 13:57.500
对吧

13:57.500 --> 13:59.980
U映射8是不是就刚好每一个位置

13:59.980 --> 14:02.540
是0到255对不对

14:02.540 --> 14:04.620
所以说它为什么会成为这么一个数组

14:04.620 --> 14:06.380
就是原因找到了

14:06.380 --> 14:08.060
那么现在我们要做的事情是

14:08.060 --> 14:09.980
是不是就修改这里面的数据

14:09.980 --> 14:12.380
把这里面的数据改了

14:12.380 --> 14:13.660
那怎么改呢

14:13.660 --> 14:15.980
就像我们刚才说的这样子改

14:16.060 --> 14:17.180
就这样子改

14:17.180 --> 14:20.220
把每一个图像数点的数据

14:20.220 --> 14:21.180
去求个平均数

14:21.180 --> 14:22.620
然后去设置就完事了

14:22.620 --> 14:24.940
好那么我们这里是不是可以写个循环

14:24.940 --> 14:26.060
复循环

14:26.060 --> 14:27.020
好循环什么呢

14:27.020 --> 14:28.700
1米1级

14:28.700 --> 14:29.980
1米1级

14:29.980 --> 14:32.700
data点什么data点零四

14:32.700 --> 14:33.740
data点零四

14:33.740 --> 14:35.100
你看呀

14:35.100 --> 14:36.860
循环这里边的这个数组

14:36.860 --> 14:37.180
对吧

14:37.180 --> 14:38.380
循环这个数组

14:38.380 --> 14:40.460
但是我们是不是一位一位的循环了

14:40.460 --> 14:40.860
不是

14:40.860 --> 14:42.700
我们是四位四位的循环

14:42.700 --> 14:43.260
为什么

14:43.260 --> 14:45.820
因为四位表示一个像数点

14:45.900 --> 14:47.420
四个字节表示一个像数点

14:47.420 --> 14:49.020
四个字节表示一个像数点

14:49.020 --> 14:49.660
所以说呢

14:49.660 --> 14:50.380
我们这里呢

14:50.380 --> 14:51.260
不是哀家家

14:51.260 --> 14:52.060
是哀家室

14:52.700 --> 14:53.740
能理解吗

14:53.740 --> 14:54.940
我们每一次循环呢

14:54.940 --> 14:56.620
就循环一个像数点

14:56.620 --> 14:57.980
一个像数点

14:57.980 --> 14:59.820
那么先拿到这个像数点之后呢

14:59.820 --> 15:00.540
我们要干嘛呢

15:00.540 --> 15:01.660
是不是拿到这个像数点的

15:01.660 --> 15:02.940
红绿蓝三个颜色

15:04.060 --> 15:04.380
红

15:05.260 --> 15:05.980
来这个哪呢

15:05.980 --> 15:06.780
1米1级

15:07.500 --> 15:08.940
data点data

15:08.940 --> 15:09.660
哎对吧

15:09.660 --> 15:10.140
这是红

15:11.180 --> 15:12.700
然后我们这里用分号嘛

15:14.620 --> 15:15.180
红绿

15:15.820 --> 15:16.780
我们用R嘛

15:16.780 --> 15:17.820
g

15:17.820 --> 15:18.780
d

15:18.780 --> 15:19.180
绿呢

15:19.180 --> 15:20.540
就是第二个像数

15:20.540 --> 15:21.500
就是

15:21.500 --> 15:23.660
就是这个像数的第二个位置

15:23.660 --> 15:23.900
对吧

15:23.900 --> 15:25.020
就是绿

15:25.020 --> 15:25.580
蓝呢

15:26.700 --> 15:28.060
是不是第三个

15:28.060 --> 15:29.100
第三个像数

15:29.100 --> 15:29.420
对吧

15:29.420 --> 15:31.020
这样就把红绿蓝拿到了

15:31.900 --> 15:32.140
好

15:32.140 --> 15:33.580
拿到每一个像数的红绿蓝

15:33.580 --> 15:34.940
是不是可以求出平均数

15:34.940 --> 15:35.580
对吧

15:35.580 --> 15:36.780
平均数是什么

15:36.780 --> 15:39.100
红加绿加蓝

15:39.100 --> 15:40.060
出一个三

15:40.060 --> 15:41.260
是不是平均数

15:41.260 --> 15:41.740
对吧

15:41.740 --> 15:42.940
当然个平均数也算出来

15:42.940 --> 15:43.740
有可能是小数

15:43.740 --> 15:44.700
不过没关系

15:44.700 --> 15:45.660
因为你是小数的话

15:45.660 --> 15:47.020
你设置进去的时候呢

15:47.020 --> 15:48.540
由于它这种特殊的数组呢

15:48.540 --> 15:50.220
我们刚才看到的特殊的数组那一型

15:50.220 --> 15:51.500
claps数组

15:51.500 --> 15:53.100
它们它会帮你处理

15:53.100 --> 15:54.620
它会把它处理成为一个正确的颜色

15:54.620 --> 15:55.660
你不用管

15:55.660 --> 15:57.580
这就是为什么它是用那种数组

15:57.580 --> 15:57.820
好

15:57.820 --> 16:00.060
那么求出红绿蓝这个平均数之后

16:00.060 --> 16:02.700
是不是给它重新设置回去就完事了

16:02.700 --> 16:04.220
是不是给它重新设置回去

16:04.220 --> 16:05.580
等于这个

16:05.580 --> 16:06.220
然后呢

16:06.220 --> 16:08.380
再等于这个

16:08.380 --> 16:12.300
再等于这个

16:12.300 --> 16:13.180
然后等于什么

16:13.180 --> 16:14.060
平均数

16:14.060 --> 16:14.700
是吧

16:14.780 --> 16:16.700
平均数设置回去完事了

16:16.700 --> 16:16.940
好

16:16.940 --> 16:17.740
这样子一来的话

16:17.740 --> 16:18.300
是不是把它

16:18.300 --> 16:19.820
它里边的数据该改了

16:19.820 --> 16:21.260
得到那个图像数据改了

16:21.260 --> 16:21.820
对吧

16:21.820 --> 16:22.060
好

16:22.060 --> 16:23.500
咱们来输出一下

16:23.500 --> 16:24.940
1米几

16:24.940 --> 16:25.260
对他

16:27.660 --> 16:27.820
好

16:27.820 --> 16:28.860
点击

16:28.860 --> 16:29.660
你看一下1米几

16:29.660 --> 16:31.420
对他现在是不是改了

16:31.420 --> 16:33.660
每一个像素点的三个颜色

16:33.660 --> 16:35.180
是不是全部变成一样了

16:35.180 --> 16:35.420
对吧

16:35.420 --> 16:37.580
是不是全部变成一样了

16:37.580 --> 16:37.820
好

16:37.820 --> 16:38.140
接下来

16:38.140 --> 16:39.260
最后一步就是

16:39.260 --> 16:41.500
把这个数据重新设置到

16:41.500 --> 16:42.860
这个画布里边去

16:42.860 --> 16:44.060
那么怎么来设置呢

16:44.140 --> 16:45.500
重新设置到画布

16:45.500 --> 16:45.900
好

16:45.900 --> 16:47.740
这里就可以用使用这种方式

16:47.740 --> 16:50.460
我们这里可以使用context

16:50.460 --> 16:52.700
里边有个方法叫做put1米几

16:52.700 --> 16:53.500
对他

16:53.500 --> 16:56.140
他就专门来把一些图像数据

16:56.140 --> 16:57.660
把一个图像数据

16:57.660 --> 16:58.940
刚才是我们直接画图的吧

16:58.940 --> 17:00.220
把一个图片画进去

17:00.220 --> 17:02.140
那么这里是把一个图像数据

17:02.140 --> 17:04.140
设置到画布里边去

17:04.140 --> 17:11.660
这是将图像数据设置到画布中

17:11.660 --> 17:13.020
我们之前学过的是

17:13.100 --> 17:13.980
画一样图片

17:13.980 --> 17:14.220
对吧

17:14.220 --> 17:15.740
是一个图片动物元素

17:15.740 --> 17:17.340
那么这里的是舌尺图片数据

17:17.340 --> 17:18.300
就是一个

17:18.300 --> 17:19.100
相当于是一个

17:19.100 --> 17:20.060
就是存出在

17:20.060 --> 17:22.300
而瑞Buffer里边的这种数据

17:22.300 --> 17:24.220
那么这个东西里边传承了

17:24.220 --> 17:25.340
第一个就传图像数据

17:26.940 --> 17:27.180
好

17:27.180 --> 17:27.900
后边的传数

17:27.900 --> 17:28.540
它传承了

17:28.540 --> 17:30.220
就是你设置的

17:30.220 --> 17:31.500
设置到坐标

17:31.500 --> 17:32.300
你把这个图像数据

17:32.300 --> 17:33.020
设置到哪个坐标

17:33.020 --> 17:34.060
那自然是零和零

17:35.740 --> 17:36.780
是个相同的坐标

17:36.780 --> 17:36.940
好

17:36.940 --> 17:37.740
保存

17:37.740 --> 17:38.540
你看一下

17:38.540 --> 17:39.020
点击

17:39.020 --> 17:39.900
是不是变成黑白了

17:40.940 --> 17:42.300
就这么个一回事

17:42.300 --> 17:43.900
其实代码很简单

17:43.900 --> 17:46.060
就是你要理解这个原理就行了

17:46.060 --> 17:47.660
其实这里没有明显的是

17:47.660 --> 17:48.220
用到什么

17:48.220 --> 17:48.860
我们前面学的

17:48.860 --> 17:51.180
而瑞Buffer和内形化数据

17:51.180 --> 17:53.740
但是你知道内形化数据的这么一个特点

17:53.740 --> 17:55.420
以及而瑞Buffer的这么一个特点

17:55.420 --> 17:57.020
你才能理解这个代码

17:57.580 --> 17:58.380
它里边的数据

17:58.380 --> 18:00.220
就是用而瑞Buffer来存出的

18:00.220 --> 18:01.660
那么操作的方式

18:01.660 --> 18:03.820
就是通过内形化数据来操作的

18:03.820 --> 18:05.260
那为什么不用普通数据呢

18:05.260 --> 18:06.460
它完全可以用普通数据

18:06.460 --> 18:07.420
为什么不用普通数据

18:07.420 --> 18:08.380
你想象一个道理

18:08.940 --> 18:10.380
如果是一个普通数据的话

18:10.700 --> 18:12.700
你是不是觉得这个数据量很恐怖

18:13.820 --> 18:14.620
你看一下这个

18:15.340 --> 18:17.500
这个数据量有这么多数据

18:17.500 --> 18:18.780
你看一下这个差异有多大

18:19.340 --> 18:20.380
16800

18:20.380 --> 18:22.220
这个16800

18:23.420 --> 18:24.780
这个数据的长度有这么多

18:24.780 --> 18:26.140
因为它有这么多数据要存出

18:26.700 --> 18:28.780
每一个像数点有红、纽、蓝、R、二法

18:29.340 --> 18:32.540
那么如果说你用普通数据的话

18:32.540 --> 18:33.740
数据的每一项是多少

18:33.740 --> 18:34.700
是不是64位

18:36.060 --> 18:38.140
是不是占用的内存空间是这么多

18:38.140 --> 18:39.100
那么我们来处一下

18:39.660 --> 18:43.820
一共有这么多位

18:43.820 --> 18:45.100
这么多位除一个8

18:46.140 --> 18:47.100
就是这么多字节

18:47.100 --> 18:48.620
这么多字节除以1024

18:49.340 --> 18:50.620
就是多少kb

18:50.620 --> 18:52.940
那么要占300多kb

18:52.940 --> 18:54.300
就这么小的一张图片

18:54.300 --> 18:57.020
它的内存里边读出来要占365个kb

18:57.500 --> 18:57.820
对吧

18:58.780 --> 18:59.580
那么普通图

18:59.580 --> 19:00.860
如果是用普通数据的话

19:02.140 --> 19:04.140
它要占365个kb

19:04.140 --> 19:05.740
但是如果它用了内形化数据

19:05.740 --> 19:06.460
我们来算一下

19:07.180 --> 19:08.780
46800

19:08.780 --> 19:11.180
因为它数据的每一项是一个u映尺8

19:11.180 --> 19:12.780
所以说每一项占多少个字节

19:12.780 --> 19:14.220
就占一个字节

19:14.220 --> 19:15.900
那么就是46800个字节

19:15.900 --> 19:18.620
那么这个字节除以1024

19:18.620 --> 19:19.500
是不是kb数

19:20.380 --> 19:21.500
只有45个kb

19:22.460 --> 19:24.220
用的是u映尺8数据

19:24.220 --> 19:26.460
那么就只占45个kb

19:26.460 --> 19:27.820
你看一下空间是不是

19:27.820 --> 19:29.580
解约了非常非常多的内存空间

19:29.580 --> 19:32.460
如果说你要处理大量的图片的话

19:32.460 --> 19:34.940
你用普通数据的话是非常非常可怕的

19:35.420 --> 19:37.100
占用的内存是非常恐怖的

19:37.100 --> 19:38.380
而且我一个图片还非常小

19:39.020 --> 19:40.140
非常非常小的一个图片

19:40.700 --> 19:41.340
没有意思吗

19:41.340 --> 19:45.980
这就是它为什么要ES6要去设计这个内形化数据的原因

19:47.100 --> 19:49.020
其实用普通数据能不能做了

19:49.020 --> 19:49.740
当然可以做

19:49.740 --> 19:50.540
没有任何问题

19:50.540 --> 19:52.140
只是它占用了内存太多了

19:53.660 --> 19:55.020
那么这就是这一块的知识

19:56.940 --> 19:59.260
然后其实像耳语buffer这个东西

19:59.740 --> 20:00.780
你比方说像服务器

20:01.580 --> 20:03.420
我这里就顺便再多说讲一句吧

20:03.420 --> 20:04.860
因为我也不再去举例一致了

20:04.860 --> 20:07.020
平时开发的时候用的也非常少

20:07.020 --> 20:10.460
就是我们在写个函数来举个例子

20:12.380 --> 20:15.100
就是我们有的时候进行阿加克斯请求的时候

20:15.980 --> 20:18.620
有可能的服务器会给我们一些二净值的数据

20:19.420 --> 20:21.500
比方说举个例子

20:23.100 --> 20:23.980
我们这里写个函数

20:25.740 --> 20:27.020
放个型就Test

20:27.580 --> 20:28.620
这么一个函数

20:28.620 --> 20:30.540
这个函数我们进行个阿加克斯请求

20:30.540 --> 20:31.180
请求谁呢

20:31.180 --> 20:32.540
我们去请求这张图片

20:32.540 --> 20:33.580
你看有意思

20:33.660 --> 20:34.860
我们去请求这个图片

20:36.140 --> 20:36.620
废弃

20:37.740 --> 20:38.620
请求什么呢

20:38.620 --> 20:40.140
请求一密集

20:40.700 --> 20:42.860
下面的聊点解脾气

20:42.860 --> 20:43.820
请求这张图片

20:43.820 --> 20:46.140
好让它服务器会给我们一个响应结果

20:46.140 --> 20:46.460
对吧

20:47.180 --> 20:48.140
给我们一个响应结果

20:48.620 --> 20:50.220
然后我们打个响应结果过后

20:50.220 --> 20:52.220
是不是把它解析成为具体的数据

20:52.620 --> 20:53.180
对吧

20:53.180 --> 20:55.020
要把它解析成为具体的数据

20:55.020 --> 20:57.180
那么这个数据我们之前是用节省

20:57.180 --> 20:58.300
那你现在想一想

20:58.300 --> 21:00.460
这个图片数据是节省格式吗

21:01.740 --> 21:02.460
你想一个道理

21:03.020 --> 21:04.700
图片数据能是节省格式吗

21:04.700 --> 21:05.660
我们刚才不是说了吗

21:06.140 --> 21:07.820
图片数据它至少是一个

21:07.820 --> 21:09.740
有一个一个像素点组成的

21:09.740 --> 21:10.380
对吧

21:10.380 --> 21:11.660
它肯定不是节省格式吗

21:11.660 --> 21:12.700
你不管它是什么

21:12.700 --> 21:13.740
肯定不是节省格式

21:13.740 --> 21:15.260
所以说你这里去调用这个Test的方法

21:15.260 --> 21:16.460
肯定要出错的

21:16.460 --> 21:17.820
它告诉你这个节省解析不了

21:18.460 --> 21:19.580
它不是节省格式

21:20.140 --> 21:21.740
那么图片数据是什么格式呢

21:21.740 --> 21:22.860
它是一个文件数据

21:22.860 --> 21:24.060
它是二净之格式

21:24.780 --> 21:25.980
二净之格式

21:25.980 --> 21:27.020
它要怎么解析呢

21:27.020 --> 21:28.300
它要用这种方式来解析

21:28.300 --> 21:28.620
Blob

21:30.380 --> 21:32.220
Blob它反回的是一个什么呢

21:32.300 --> 21:33.580
反回的是一个Blob对象

21:34.220 --> 21:34.940
咱们来看一下

21:36.540 --> 21:38.140
这个Blob可能大家有可能认识的

21:38.140 --> 21:38.940
比较少一点

21:38.940 --> 21:41.980
Blob对象它表示的是一个文件信息

21:43.020 --> 21:45.100
Blob对象它表示的是一个文件信息

21:45.500 --> 21:45.820
对不对

21:46.620 --> 21:47.900
这个文件的尺寸

21:47.900 --> 21:50.140
这个文件里面的类型

21:50.140 --> 21:51.340
1米几JPEG

21:51.340 --> 21:52.700
M1 M1类型

21:52.700 --> 21:53.980
它表示文件信息

21:54.380 --> 21:56.620
这个Blob里面它有一个函数

21:57.580 --> 21:58.380
它有一个函数

21:58.940 --> 22:00.140
Blob里面又有一个函数

22:00.620 --> 22:02.380
叫做ArrayBuffer

22:03.180 --> 22:04.380
调用这个函数

22:04.380 --> 22:05.100
调用这个函数

22:05.100 --> 22:06.620
它反回的是一个Promise

22:06.620 --> 22:08.620
整个Promise以绝之后

22:09.820 --> 22:12.700
它就会解析出来一个ArrayBuffer数组

22:13.980 --> 22:15.660
它就会解析一个ArrayBuffer数组

22:15.660 --> 22:16.380
咱们来看一下

22:16.380 --> 22:17.420
ArrayBuffer数组

22:19.500 --> 22:19.980
Test

22:21.500 --> 22:21.900
你看

22:21.900 --> 22:23.420
是不是得到一个ArrayBuffer数组

22:23.420 --> 22:23.900
对吧

22:24.460 --> 22:26.060
这个ArrayBuffer数组里面

22:26.060 --> 22:28.620
就记录了这个图像的信息

22:29.020 --> 22:29.980
记录了个图像信息

22:30.220 --> 22:31.180
有人说觉得很怪

22:31.580 --> 22:33.420
因为常铸为什么变少了很多

22:34.940 --> 22:36.540
因为这是文件信息

22:36.780 --> 22:38.460
跟我们刚才从花布

22:38.460 --> 22:40.460
为什么刚才我们要从花布里面去拿

22:40.780 --> 22:42.700
因为从花布里面拿的话

22:42.700 --> 22:44.220
可以拿到每一个像素点的信息

22:44.460 --> 22:44.860
但是呢

22:44.860 --> 22:46.060
真实的文件存处

22:46.060 --> 22:46.780
它不能这样存

22:47.420 --> 22:48.220
真实的文件

22:48.780 --> 22:49.740
就特别是图片

22:49.740 --> 22:52.460
它内部是有一些算法来进行压缩的

22:52.700 --> 22:53.020
不然的话

22:53.020 --> 22:54.540
它把每一个像素点的信息

22:54.540 --> 22:55.340
全部裸裂出来

22:56.060 --> 22:56.860
这样的图片

22:56.860 --> 22:58.140
图片太大了

22:58.140 --> 22:58.460
对吧

22:58.460 --> 22:59.100
太大了

22:59.100 --> 23:00.060
所以它不会这样做

23:00.380 --> 23:02.700
它会把图片有些信息进行合并

23:02.700 --> 23:03.660
有些类似的

23:03.660 --> 23:05.660
相同的信息会进行合并

23:05.660 --> 23:06.940
不同格式的图片

23:06.940 --> 23:08.380
它的压缩方式都不一样

23:08.380 --> 23:09.740
它的存处信息都不一样

23:09.740 --> 23:12.220
所以说图片真实的文件信息里边

23:12.220 --> 23:13.820
它的数据量要少很多

23:13.820 --> 23:17.100
它不是单纯的把每一个像素点击度下来

23:17.100 --> 23:17.820
没有那么简单的

23:17.820 --> 23:19.340
所以说这里边还会看到一些复数

23:19.340 --> 23:20.780
都是这么长的

23:20.780 --> 23:23.580
那么这就是一个文件里面的ArrayBuffer信息

23:23.580 --> 23:25.580
那么这个信息拿到过后

23:25.580 --> 23:27.580
如果说你要对这个文件的信息

23:27.580 --> 23:29.100
要做一些某些解析

23:29.420 --> 23:31.660
要对这个恶性质信息做某一些处理

23:31.660 --> 23:34.380
那么你就可以通过ArrayBuffer来进行处理

23:34.380 --> 23:37.580
只不过你要对这些东西做处理的话

23:37.580 --> 23:39.260
你必须要了解每一种文件

23:39.260 --> 23:41.420
它存处的格式是什么

23:41.420 --> 23:44.060
这一个又涉及到不同的领域了

23:44.060 --> 23:46.540
比方说光图片这一块

23:46.540 --> 23:49.260
你要去了解每一个格式的图片

23:49.260 --> 23:51.660
它每一个字节是怎么来存处的

23:51.660 --> 23:53.580
它是用什么方式来存处的

23:53.580 --> 23:55.500
就要涉及到其他领域的知识了

23:55.500 --> 23:56.780
所以说我们平时开发了

23:56.780 --> 23:57.900
不太会用这种方

23:58.060 --> 23:59.340
不太会遇到这种情况

23:59.340 --> 24:00.540
我只给大家介绍一下

24:00.540 --> 24:02.380
也就是从服务性拿数据的话

24:02.380 --> 24:04.380
不一定拿到的就是阶层

24:04.380 --> 24:06.140
不一定拿到的就是一个普通文本

24:06.140 --> 24:07.820
它又可能是个二净值数据

24:07.820 --> 24:09.980
如果说你要对二净值数据进行处理

24:09.980 --> 24:12.300
那么你也把得到它的ArrayBuffer

24:12.300 --> 24:13.660
那么对一个二净值数据的

24:13.660 --> 24:15.140
就可以通过那一型化数组

24:15.140 --> 24:17.780
比方说你要针对它进行处理

24:17.780 --> 24:19.340
比方说我们可以建一个数组

24:19.340 --> 24:23.820
另外一个什么Int8Array

24:23.820 --> 24:25.820
建一个数组对它进行处理

24:25.820 --> 24:27.500
而且这里还可以设置偏影量

24:27.580 --> 24:28.780
我们上去头忘说了

24:28.780 --> 24:30.020
跟那个data5又一样

24:30.020 --> 24:31.460
这里还可以设置偏影量

24:31.460 --> 24:32.860
还有长度都可以设置的

24:32.860 --> 24:33.860
都可以设置的

24:35.180 --> 24:36.220
就这么个意思

24:38.860 --> 24:39.740
你看这个数组

24:39.740 --> 24:40.620
长度只有2

24:40.620 --> 24:42.420
因为我们这里设置的长度只有2

24:42.420 --> 24:43.580
偏影量尾3

24:43.580 --> 24:45.660
都可以处理的

24:45.660 --> 24:46.980
就对它的后续处理

24:47.460 --> 24:48.340
当然前提了解

24:48.340 --> 24:49.940
你得知道这个文件的信息

24:49.940 --> 24:51.460
它整个是什么格式

24:51.460 --> 24:52.380
表示什么意思

24:52.380 --> 24:53.940
如果你连这个都不知道的话

24:53.940 --> 24:55.420
你是不知道怎么处理的

24:55.420 --> 24:56.420
但是通过这个代码

24:56.420 --> 24:57.460
你只好知道了

24:57.500 --> 24:59.620
我怎么样去得到它的二斤字信息

24:59.620 --> 25:00.980
我又怎么样去处理它

25:00.980 --> 25:02.540
这个你要清楚

25:02.540 --> 25:03.700
要这些什么

25:03.700 --> 25:05.100
这就是

25:05.100 --> 25:06.900
而会buffer和类型化数组

25:06.900 --> 25:07.940
它的意义所在

25:07.940 --> 25:09.620
平时我们开发的时候用的意思

25:09.620 --> 25:10.420
少一点

25:10.420 --> 25:13.300
只是像这个效果也蛮有趣的

25:13.300 --> 25:14.500
可以了解一下

25:15.340 --> 25:16.140
好了

25:16.140 --> 25:17.700
那么

25:18.300 --> 25:20.140
接下来我们就到这了

25:21.260 --> 25:24.420
我们自此就把ES6的所有知识

25:24.420 --> 25:26.300
就讲完了

25:27.100 --> 25:29.180
大家看这个课程的时候

25:29.180 --> 25:31.020
对有一些章节

25:31.020 --> 25:32.820
特别是异部处理

25:32.820 --> 25:35.180
以及迭代器和生存器这一块

25:35.180 --> 25:35.900
是比较难的

25:35.900 --> 25:36.500
这两个章节

25:36.500 --> 25:38.460
我希望大家都可以多看几遍

25:38.460 --> 25:40.940
ES6是我们在我们整个前端学习中

25:40.940 --> 25:42.820
是一个非常非常重要

25:42.820 --> 25:43.980
而且基础的知识

25:43.980 --> 25:45.660
希望大家一定要引起重视

25:45.660 --> 25:46.380
好吧

25:46.380 --> 25:46.700
好

25:46.700 --> 25:47.300
OK

25:47.300 --> 25:48.460
这轮课就到这里了

25:48.460 --> 25:49.060
拜拜

