WEBVTT

00:00.560 --> 00:05.060
我们通过网络通信的课程学习的话

00:05.060 --> 00:06.460
大家应该清楚

00:06.460 --> 00:09.760
无论是请求还是想应

00:09.760 --> 00:12.560
他们里边都有一个投信息

00:12.560 --> 00:15.360
一个消息投和消息体

00:15.360 --> 00:18.760
那么消息投里边就描述了一些附加信息

00:18.760 --> 00:20.860
比方说我们请求的时候

00:20.860 --> 00:22.560
我向服务器告诉服务器

00:22.560 --> 00:25.360
我这里的消息体是什么样的格式

00:25.360 --> 00:28.060
我能接受到一个什么样

00:28.060 --> 00:30.960
我希望接受到一个什么样类型的响应

00:30.960 --> 00:34.260
那么像这些东西都把它放到投里边

00:34.260 --> 00:37.660
包括响应投里边也会告诉客户端

00:37.660 --> 00:40.060
告诉客户端这边

00:40.060 --> 00:41.960
我给你的消息格是什么

00:41.960 --> 00:43.760
编码是什么等等这样的信息

00:43.760 --> 00:45.460
都在请求投里边

00:45.460 --> 00:47.460
那么请求投里边是什么样的信息呢

00:47.460 --> 00:51.260
他们的信息就是那个兼职队

00:51.260 --> 00:53.660
对吧一个一个的兼职队

00:53.660 --> 00:55.360
关一下

00:56.360 --> 00:57.660
兼职队的信息

00:57.660 --> 00:59.460
我们像这些信息

00:59.460 --> 01:00.960
其实在废棋API里边

01:00.960 --> 01:04.460
他也是把它提取成为一个单独的对象

01:04.460 --> 01:06.260
就是Headers对象

01:06.260 --> 01:09.260
那么这个Headers对象我们平时用不用了

01:09.260 --> 01:10.760
如果说你要直接使用的话

01:10.760 --> 01:12.860
可能会稍微少一点

01:12.860 --> 01:13.960
可能会比较少一点

01:13.960 --> 01:14.860
但是有的时候

01:14.860 --> 01:17.960
如果说你要进行一些精气的控制的话

01:17.960 --> 01:19.560
那么他就可以派上用场

01:19.560 --> 01:20.560
我给大家举个例子

01:20.560 --> 01:22.360
这也非常简单

01:22.360 --> 01:24.860
像我们之前不是创建了这么一个

01:24.860 --> 01:25.860
请求对象吗

01:25.860 --> 01:28.960
对吧这里是不是给他一个请求投的信息

01:28.960 --> 01:31.460
对吧这一块是不是给他的

01:31.460 --> 01:33.860
就是那个配置里边

01:33.860 --> 01:36.060
这个配置里边说要配配置很多东西

01:36.060 --> 01:38.360
其中有一个配置还记得吗

01:38.360 --> 01:39.760
是不是Headers对吧

01:39.760 --> 01:41.060
我们当时是怎么配置的

01:41.060 --> 01:42.660
我们在这里随便写了一些东西

01:42.660 --> 01:43.860
A等于1对吧

01:43.860 --> 01:46.560
比方说咱们就配置一个A等于1

01:46.560 --> 01:47.060
看一下吧

01:48.360 --> 01:50.160
点击啊检查

01:50.160 --> 01:51.260
我们这里呢

01:52.260 --> 01:55.060
你看我们的request对象里边

01:55.060 --> 01:57.860
Headers是不是有一个属性叫Headers

01:57.860 --> 01:58.760
Headers是什么呢

01:58.760 --> 02:00.960
就是一个Headers对象

02:00.960 --> 02:02.760
他其实就是一个对象

02:02.760 --> 02:05.460
那我们在请求的信息里边

02:05.460 --> 02:09.260
你看一下他投信息里边就附加了一个

02:09.260 --> 02:12.260
他投信息里边就附加了一个A为1

02:12.260 --> 02:12.860
对吧

02:12.860 --> 02:14.960
就我们以前的配置请求投

02:14.960 --> 02:17.860
就这样子直接给一个普通的对象就行了

02:17.860 --> 02:20.060
实际上在他的内部

02:20.060 --> 02:22.460
就是在创建请求也好

02:22.460 --> 02:25.060
那他创建想用的时候也好

02:25.060 --> 02:27.660
他的内部呢会把这个Headers呢

02:27.660 --> 02:31.560
转换成为一个Headers对象

02:31.560 --> 02:38.060
也就是说在request和response对象内部

02:38.060 --> 02:41.660
那会将传递的

02:41.660 --> 02:47.060
会将传递的请求投对象

02:47.060 --> 02:49.860
转换为Headers对象

02:49.860 --> 02:52.460
如果说你们给他传递的是一个普通的对象

02:52.460 --> 02:54.060
你看这里是不是对象之面量

02:54.060 --> 02:55.460
给他传了一个普通的对象

02:55.460 --> 02:59.360
他会在内部把它转换成为Headers对象

02:59.360 --> 03:00.260
那么同样的道理

03:00.260 --> 03:02.760
这里能不能就直接给他传一个Headers对象呢

03:02.760 --> 03:03.660
当然也可以

03:03.660 --> 03:07.660
比方说我们在这里就可以创建这么一个Headers

03:07.660 --> 03:09.460
Headers

03:09.460 --> 03:11.160
又一个Headers

03:11.160 --> 03:12.660
Headers是个构造函数

03:12.660 --> 03:13.960
我们直接创建就行了

03:13.960 --> 03:14.860
那么创建的时候呢

03:14.860 --> 03:17.660
我们在这里就可以给他一个普通对象

03:17.660 --> 03:19.960
来进行配置对请求投进行配置

03:19.960 --> 03:22.960
比方说A等于1B等于2

03:22.960 --> 03:24.260
我们就在这里进行配置

03:24.260 --> 03:27.360
OK我们就直接把Headers传进来就完事了

03:27.360 --> 03:28.360
这也是可以的

03:28.360 --> 03:29.860
他这样的好处在于什么呢

03:29.860 --> 03:33.260
就在于我们可能很多请求的请求投

03:33.260 --> 03:34.060
都差不多

03:34.060 --> 03:35.660
OK我们可以专门写个函数

03:35.660 --> 03:37.360
来生存一个请求投

03:37.360 --> 03:38.160
原来的意思吗

03:38.160 --> 03:39.760
我们就可以用这种方式了

03:39.760 --> 03:40.760
他实际上的本质呢

03:40.760 --> 03:42.360
就是一个Headers对象

03:42.360 --> 03:43.160
好咱们来看一下吧

03:43.160 --> 03:45.160
这样子仍然管用

03:45.160 --> 03:46.760
我们这里点击

03:46.760 --> 03:48.860
你看请求投里边是不是多了一个A

03:48.860 --> 03:49.560
多了一个B

03:49.560 --> 03:50.160
对吧

03:50.160 --> 03:51.460
就这么简单

03:51.460 --> 03:52.860
这就是请求投

03:52.860 --> 03:54.260
请求投

03:54.260 --> 03:55.660
原来的意思吗

03:55.660 --> 03:56.160
好

03:56.160 --> 03:56.660
然后呢

03:56.660 --> 03:59.660
我们如果说要获取请求投怎么办呢

03:59.660 --> 04:00.760
比方说在请求对象里面

04:00.760 --> 04:01.860
我们要获取请求投

04:01.860 --> 04:04.660
我们这里输出Rick Dear Headers

04:04.660 --> 04:08.160
你看我们在这里输出一个Rick Dear Headers

04:08.160 --> 04:09.260
好

04:09.260 --> 04:11.260
点击我们在控制台里面看一下

04:11.260 --> 04:12.760
是不是就Headers对象

04:12.760 --> 04:14.260
这个Headers对象里面是怎么啥

04:14.260 --> 04:15.460
啥都没有呢

04:15.560 --> 04:16.760
是因为他底边这个对象呢

04:16.760 --> 04:18.160
他提供了一些方法

04:18.160 --> 04:19.560
可以让你呢

04:19.560 --> 04:22.860
就是得到请求投里边的一些信息

04:22.860 --> 04:23.760
他提供了哪些方法

04:23.760 --> 04:24.960
咱们来看一下

04:24.960 --> 04:28.660
Headers对象中的方法

04:28.660 --> 04:29.460
有哪些方法呢

04:29.460 --> 04:30.560
首先第一个

04:30.560 --> 04:31.960
一个是Heads

04:31.960 --> 04:33.760
Heads方法

04:33.760 --> 04:35.260
这个是检查

04:35.260 --> 04:35.760
检查

04:35.760 --> 04:37.160
因为返回的是一个布尔

04:37.160 --> 04:40.960
检查了请求投中

04:40.960 --> 04:44.860
是否存在指定的keyz

04:44.860 --> 04:46.860
指定的keyz

04:46.860 --> 04:48.460
是不是存在

04:48.460 --> 04:49.960
keyz呢

04:49.960 --> 04:51.760
比方说咱们举个例子

04:51.760 --> 04:53.860
我看一下我的请求投里边

04:53.860 --> 04:57.960
有没有一个keyz的名字叫做

04:59.460 --> 05:02.760
有没有一个keyz的名字叫做一个content type

05:02.760 --> 05:03.960
有没有这个东西呢

05:03.960 --> 05:05.460
咱们来检查一下

05:05.460 --> 05:06.860
保存

05:06.860 --> 05:07.860
点击

05:07.860 --> 05:08.860
你看是不是没有

05:08.860 --> 05:10.960
因为我们请求投里边是不是没配置

05:10.960 --> 05:11.460
对吧

05:11.460 --> 05:12.760
是没配置的

05:12.760 --> 05:14.060
就这么个意思

05:14.160 --> 05:15.560
那么我们检查一下请求投里边

05:15.560 --> 05:18.060
有没有A这个请求投呢

05:18.060 --> 05:18.660
点击

05:18.660 --> 05:19.460
是不是true

05:19.460 --> 05:19.660
对吧

05:19.660 --> 05:21.260
因为我们请求投里边是不是配置了

05:21.260 --> 05:22.260
这个东西

05:22.260 --> 05:22.660
对吧

05:22.660 --> 05:23.860
就这么简单

05:23.860 --> 05:25.760
这是关于Heads

05:25.760 --> 05:26.060
好

05:26.060 --> 05:28.760
然后还有一个就是get

05:28.760 --> 05:30.060
也非常简单

05:30.060 --> 05:32.660
得到请求投中

05:32.660 --> 05:35.460
对应的keyz

05:35.460 --> 05:36.660
对应的keyz

05:36.660 --> 05:37.360
什么意思呢

05:37.360 --> 05:39.560
就是我们得到这个A的值get

05:39.560 --> 05:42.060
你看得到A的值点击

05:42.060 --> 05:42.860
是不是等于1

05:42.860 --> 05:43.160
对吧

05:43.160 --> 05:45.460
我们A里边是不是传了一个1

05:45.460 --> 05:46.460
就这么简单

05:46.460 --> 05:47.960
他帮你进行检索

05:47.960 --> 05:50.160
那如果说你给了一个不存在的请求投

05:50.160 --> 05:52.260
他里边没有的请求投呢

05:52.260 --> 05:53.560
你觉得是啥呢

05:53.560 --> 05:54.260
要么就是nau

05:54.260 --> 05:55.060
要么就是undefined

05:55.060 --> 05:56.460
对吧

05:56.460 --> 05:57.760
他这里给的是nau

05:57.760 --> 05:58.460
这是关于这个

05:59.960 --> 06:03.060
如果说我们得到了请求投对象之后

06:03.060 --> 06:05.360
我们可能要修改请求投

06:05.360 --> 06:07.060
比方说我们有一个方法

06:07.060 --> 06:09.160
比方说我们有一个方法

06:09.160 --> 06:10.760
get headers

06:10.760 --> 06:13.060
或者叫get comment headers

06:13.160 --> 06:16.260
我们可以得到一个普通的请求投

06:16.260 --> 06:19.560
我们这里就直接返回一个nau headers

06:19.560 --> 06:21.560
我们得到一个普通的请求投

06:21.560 --> 06:23.060
比方说A等于1

06:23.060 --> 06:23.760
B等于2

06:23.760 --> 06:24.760
就随便写个吧

06:24.760 --> 06:26.260
那么我们这个请求投

06:26.260 --> 06:29.060
我们就get comment headers

06:29.060 --> 06:30.360
得到一个普通的请求投

06:30.360 --> 06:31.560
拿到这个请求投之后

06:31.560 --> 06:33.360
我们可能要对A进行修改

06:33.360 --> 06:34.760
因为一些特殊情况

06:34.760 --> 06:36.760
可能他请求投有一些区别

06:36.760 --> 06:38.160
我们要对他进行修改

06:38.160 --> 06:39.960
那又怎么办呢

06:39.960 --> 06:41.160
那么这个时候我们

06:41.260 --> 06:42.760
比方说我们这里得到A

06:42.760 --> 06:44.260
我们看一下目前A

06:44.260 --> 06:45.860
目前A是不是1

06:45.860 --> 06:47.260
那如果说这个函数

06:47.260 --> 06:49.860
我们需要对这个请求投进行修改怎么办

06:49.860 --> 06:51.360
你可以使用下面这两个

06:51.360 --> 06:55.260
一个是set key value

06:55.260 --> 06:56.860
这是什么呢

06:56.860 --> 07:00.660
修改对应的键值队

07:00.660 --> 07:02.160
修改成对应的键队

07:02.160 --> 07:03.760
那么我们这里就可以使用

07:03.760 --> 07:07.160
headers.setA

07:07.160 --> 07:10.160
比方说修改成2

07:10.160 --> 07:12.660
把key为header修改成2

07:12.660 --> 07:13.960
那咱们看一下再看一下

07:13.960 --> 07:15.760
点击过后是不是A变成2了

07:15.760 --> 07:17.460
对吧变成2了

07:17.460 --> 07:19.560
那如果说你要修改一个不存在的

07:19.560 --> 07:20.960
你试一下不就完了吗

07:20.960 --> 07:21.960
要修改一个不存在的

07:21.960 --> 07:23.060
有没有C这个请求投

07:23.060 --> 07:23.760
没有对吧

07:23.760 --> 07:25.260
那么我们这里得到C

07:25.260 --> 07:27.260
咱们看一下吧

07:27.260 --> 07:27.960
修改C

07:27.960 --> 07:28.960
那么说明了啥呢

07:28.960 --> 07:30.860
说明如果说你修改的是一个不存在的

07:30.860 --> 07:32.260
它就会给你新增一个

07:32.260 --> 07:34.360
也可以给你新增一个请求投

07:34.360 --> 07:36.360
请求投里面新增一个键值队

07:36.360 --> 07:37.860
对吧就这么个意思

07:37.960 --> 07:40.960
另外一个是append

07:40.960 --> 07:45.260
append是添加对应的键值队

07:45.260 --> 07:47.260
添加还是专门做添加的

07:47.260 --> 07:48.760
就两个函数而已

07:48.760 --> 07:51.260
其实效果是差不多

07:51.260 --> 07:52.360
专门做添加的

07:52.360 --> 07:54.660
那么这里我们就添加一个C

07:54.660 --> 07:55.560
C等于3

07:55.560 --> 07:57.660
看一下吧

07:57.660 --> 07:58.960
3对吧

07:58.960 --> 08:01.360
我们用append

08:01.360 --> 08:02.860
append

08:02.860 --> 08:03.960
好看一下

08:03.960 --> 08:05.260
点击C等于3

08:05.260 --> 08:07.560
那如果说添加的东西跟以前一样的

08:07.660 --> 08:08.960
我们把添加一个A

08:08.960 --> 08:10.160
添加一个A会怎么样呢

08:10.160 --> 08:11.860
点击

08:11.860 --> 08:12.760
那么A的值

08:12.760 --> 08:15.260
这里是A

08:15.260 --> 08:16.760
点击

08:16.760 --> 08:18.360
那么A是不是变成两个值了

08:18.360 --> 08:19.760
变成两个值了

08:19.760 --> 08:21.560
它可以用的都好经营分割

08:21.560 --> 08:23.260
变成这样的一个格式了

08:23.260 --> 08:24.260
这是append

08:24.260 --> 08:27.760
append的格式有点点稀有的区别

08:27.760 --> 08:29.560
然后还有就是关于

08:29.560 --> 08:30.560
还有这么一些函数

08:30.560 --> 08:31.460
keys

08:31.460 --> 08:34.460
得到所有的请求投

08:34.460 --> 08:37.260
键的数组

08:37.260 --> 08:38.460
还有Vanus

08:38.460 --> 08:38.760
对吧

08:38.760 --> 08:41.760
有点像有点类似于Object里边的相应的函数

08:41.760 --> 08:48.060
这是得到所有的请求投中的值的数数

08:48.060 --> 08:48.660
还有什么

08:48.660 --> 08:51.560
entress

08:51.560 --> 08:56.460
得到所有请求投中的兼值对的数数

08:56.460 --> 08:58.260
咱们来分别看一下这三个方法

08:58.260 --> 08:59.660
这三个方法也特别简单

08:59.660 --> 09:00.360
我们来看一下

09:00.360 --> 09:02.660
首先用看一下keys

09:02.660 --> 09:04.660
输出一下keys

09:04.660 --> 09:05.560
这里点击

09:05.560 --> 09:06.560
你看

09:06.560 --> 09:07.660
它等到是一个itre

09:07.660 --> 09:09.960
它还不是真正的数数

09:09.960 --> 09:11.360
得到一个可叠戴的对象

09:11.360 --> 09:13.360
我们现在还没有学习可叠戴对象

09:13.360 --> 09:14.760
我们下一张

09:14.760 --> 09:15.760
下一张还是下一张

09:15.760 --> 09:18.260
我到时候会安排会学习

09:18.260 --> 09:19.860
总之我们就可以便利它

09:19.860 --> 09:21.960
我们会对它进行便利

09:21.960 --> 09:23.160
那么怎么便利呢

09:23.160 --> 09:25.360
问题是现在大家还不太清楚

09:25.360 --> 09:27.760
这个东西该怎么去便利

09:27.760 --> 09:28.860
我这里就看一下

09:28.860 --> 09:30.160
你们就看个热闹德了

09:30.160 --> 09:31.460
因为我们现在还没有学

09:31.460 --> 09:32.360
看个热闹德了

09:32.360 --> 09:34.260
我们在这里给大家便利一下

09:36.560 --> 09:40.560
keys

09:40.560 --> 09:42.560
就是deltas

09:42.560 --> 09:44.560
我们把keys得到

09:44.560 --> 09:47.360
便利的方式我们是用for25循环便利

09:47.360 --> 09:49.560
当然你们现在还没有学习for25循环

09:49.560 --> 09:50.560
没关系

09:50.560 --> 09:51.560
我就稍微解释一下

09:51.560 --> 09:52.560
稍微解释一下

09:52.560 --> 09:55.060
那么它有点类似于forin循环

09:55.060 --> 09:56.560
它是便利一个输足

09:56.560 --> 09:57.560
或者是其他什么

09:57.560 --> 09:59.560
任何都可以便利的东西

09:59.560 --> 10:00.560
那么它会把这个里面

10:00.560 --> 10:01.560
一个一个拿出来看

10:01.560 --> 10:02.560
每拿出一个

10:02.560 --> 10:03.560
那就放到一个d里面

10:03.560 --> 10:05.060
咱们就输出一个d

10:06.060 --> 10:08.060
看一下看个热闹就行了

10:08.060 --> 10:09.060
因为我们现在还没有讲

10:09.060 --> 10:10.060
for25循环

10:10.060 --> 10:11.060
点击

10:11.060 --> 10:12.060
那你看是不是得到了

10:12.060 --> 10:14.060
请求头里面有ab两个键子

10:14.060 --> 10:15.060
对吧

10:15.060 --> 10:16.060
a和b两个键子

10:16.060 --> 10:19.060
那如果说我们这里写上Values

10:19.060 --> 10:20.060
Values

10:20.060 --> 10:21.060
我们看一下

10:21.060 --> 10:23.060
第一个值是1和3

10:23.060 --> 10:24.060
对吧

10:24.060 --> 10:25.060
因为我们用了Append

10:25.060 --> 10:27.060
如果说没用Append的话

10:27.060 --> 10:29.060
那么得到就是3和2

10:29.060 --> 10:31.060
得到一个值的输足

10:31.060 --> 10:33.060
其实它不一定是

10:33.060 --> 10:34.060
它不是输足

10:34.060 --> 10:35.060
它是一个真正的输足

10:35.060 --> 10:37.060
是一个可以便利的东西

10:37.060 --> 10:39.060
那么我们用集合吧

10:39.060 --> 10:40.060
用集合

10:40.060 --> 10:41.060
算了

10:41.060 --> 10:42.060
不用输足

10:42.060 --> 10:45.630
准确一点

10:45.630 --> 10:46.630
这集合

10:46.630 --> 10:47.630
我们后边学到可谍带

10:47.630 --> 10:48.630
可谍带协议之后

10:48.630 --> 10:49.630
大家就明白了

10:49.630 --> 10:50.630
现在没关系

10:50.630 --> 10:51.630
你就知道它意思就行了

10:51.630 --> 10:53.630
它总之给你返回所有的值

10:53.630 --> 10:55.630
如果说你得到的是entress

10:55.630 --> 10:56.630
它就给你返回了

10:56.630 --> 10:58.630
所有的键子队

10:58.630 --> 10:59.630
你看

10:59.630 --> 11:00.630
每一项是一个输足

11:00.630 --> 11:01.630
输足有两项

11:01.630 --> 11:02.630
第一项表示键的值

11:02.630 --> 11:04.630
第二项那表示值

11:04.630 --> 11:05.630
就可以得到的

11:05.630 --> 11:06.630
这样子我们就可以便利

11:06.630 --> 11:07.630
对吧

11:07.630 --> 11:08.630
就可以便利

11:08.630 --> 11:09.630
没问题吧

11:09.630 --> 11:10.630
输货成了

11:10.630 --> 11:12.630
我们专门的写个函数来便利吧

11:12.630 --> 11:13.630
对吧

11:13.630 --> 11:17.630
叫做print headers

11:17.630 --> 11:18.630
print headers

11:18.630 --> 11:19.630
来吧

11:19.630 --> 11:20.630
你给我传一个headers进来

11:20.630 --> 11:21.630
OK

11:21.630 --> 11:22.630
我来帮你进行便利输出

11:22.630 --> 11:23.630
打印出来

11:23.630 --> 11:24.630
好

11:24.630 --> 11:25.630
怎么便利呢

11:25.630 --> 11:26.630
怎么便利呢

11:26.630 --> 11:27.630
我们就循环吧

11:27.630 --> 11:28.630
我们把这句话拿过来

11:30.630 --> 11:31.630
把这句话拿过来

11:31.630 --> 11:32.630
好

11:32.630 --> 11:33.630
循环

11:34.630 --> 11:36.630
键子队的这么一个集合

11:36.630 --> 11:37.630
然后我们用for all

11:37.630 --> 11:38.630
for all 循环来循环它

11:38.630 --> 11:39.630
好

11:39.630 --> 11:40.630
循环它就是

11:40.630 --> 11:41.630
每一循环一次

11:41.630 --> 11:42.630
那就是个键子队

11:42.630 --> 11:43.630
对吧

11:43.630 --> 11:44.630
每次循环是一个键子队

11:44.630 --> 11:45.630
我们刚才看到的键子队

11:45.630 --> 11:46.630
每一个是一个输足

11:46.630 --> 11:47.630
输足的第一项是键

11:47.630 --> 11:48.630
第二项是值

11:48.630 --> 11:49.630
我们这里输出

11:51.630 --> 11:52.630
这样子吧

11:52.630 --> 11:53.630
key

11:53.630 --> 11:54.630
key 是什么呢

11:54.630 --> 11:55.630
我们这样

11:55.630 --> 11:59.130
用个模板支付算

11:59.130 --> 12:00.130
这里key

12:00.130 --> 12:01.130
key 是什么呢

12:01.130 --> 12:02.130
key 是

12:03.130 --> 12:05.130
per

12:05.130 --> 12:06.130
0

12:06.130 --> 12:07.130
对吧

12:07.130 --> 12:08.130
输了第一项

12:08.130 --> 12:09.130
然后呢

12:09.130 --> 12:10.130
值呢

12:10.130 --> 12:11.130
值是

12:12.130 --> 12:13.130
per

12:13.130 --> 12:14.130
输了第二项

12:14.130 --> 12:15.130
对吧

12:15.130 --> 12:16.130
我们写这么一个函数

12:16.130 --> 12:17.130
ok 那么在这里边

12:17.130 --> 12:18.130
我们就不用在这里

12:18.130 --> 12:19.130
这样子便利的

12:19.130 --> 12:20.130
我们就print headers

12:20.130 --> 12:21.130
我就把这个headers

12:21.130 --> 12:22.130
给你传进去

12:22.130 --> 12:23.130
这样子我们就打印出来了

12:23.130 --> 12:25.130
请求投里边的headers

12:25.130 --> 12:26.130
对吧

12:26.130 --> 12:27.130
请求投里边的headers

12:27.130 --> 12:28.130
没问题吧

12:28.130 --> 12:29.130
ok

12:29.130 --> 12:30.130
那么请求

12:30.130 --> 12:31.130
提里边的headers

12:31.130 --> 12:33.130
请求提里边的headers

12:33.130 --> 12:34.130
我们怎么来打印的

12:34.130 --> 12:36.130
请求提里边也是一样的

12:36.130 --> 12:38.130
响应里边的

12:38.130 --> 12:40.130
响应里边的请求

12:40.130 --> 12:42.130
响应里边的想用投

12:42.130 --> 12:43.130
里边的信息怎么打印的

12:43.130 --> 12:44.130
是一样的

12:44.130 --> 12:45.130
我们这里不是得到一个

12:45.130 --> 12:46.130
响应对象吗

12:46.130 --> 12:47.130
ok 那么我们就这里呢

12:47.130 --> 12:49.130
就print headers

12:49.130 --> 12:50.130
我们来看一下

12:50.130 --> 12:52.130
响应对象里边的

12:52.130 --> 12:53.130
headers

12:53.130 --> 12:54.130
都有这个书箱

12:54.130 --> 12:55.130
响应对象里边

12:55.130 --> 12:56.130
也有这个书箱

12:56.130 --> 12:57.130
响应投

12:57.130 --> 12:58.130
咱们来看一下

12:58.130 --> 12:59.130
你看

12:59.130 --> 13:01.130
响应投里边是有这些数据

13:01.130 --> 13:02.130
对吧

13:02.130 --> 13:03.130
这些数据

13:03.130 --> 13:04.130
contest length

13:04.130 --> 13:05.130
表示

13:05.130 --> 13:06.130
浮现你的响应结果里边

13:06.130 --> 13:07.130
包含了多少数据呢

13:07.130 --> 13:09.130
数据的长度

13:09.130 --> 13:10.130
数据的类型呢

13:10.130 --> 13:12.130
是一个阶层格式的类型

13:12.130 --> 13:14.130
编法是utf-gambar

13:14.130 --> 13:15.130
对吧

13:15.130 --> 13:16.130
这就是

13:16.130 --> 13:18.130
我们如果说要获取

13:18.130 --> 13:20.130
或者是控制响应

13:20.130 --> 13:22.130
而且控制投里边的信息的话

13:22.130 --> 13:24.130
我们就可以使用headers对象

13:24.130 --> 13:25.130
并且对象里边

13:25.130 --> 13:26.130
可以提供的一些方法

13:26.130 --> 13:28.130
可以方便你使用

13:28.130 --> 13:29.130
OK

13:29.130 --> 13:30.130
这是关于headers对象

13:30.130 --> 13:31.130
像我们这节课

13:31.130 --> 13:32.130
讲的什么request对象

13:32.130 --> 13:33.130
response对象

13:33.130 --> 13:34.130
headers对象呢

13:34.130 --> 13:35.130
你要说

13:35.130 --> 13:37.130
特别特别有用的话

13:37.130 --> 13:38.130
也不算

13:38.130 --> 13:39.130
因为我们平时用基本使用

13:39.130 --> 13:40.130
就完全够了

13:40.130 --> 13:41.130
如果说你要进行

13:41.130 --> 13:42.130
更加精细的控制的话

13:42.130 --> 13:43.130
就是分开来进行控制的话

13:43.130 --> 13:44.130
OK

13:44.130 --> 13:46.130
它给你提供了这么一种方式

13:46.130 --> 13:48.130
是不是比以前更加灵活

13:48.130 --> 13:50.130
代码结构更加优雅了

13:50.130 --> 13:51.130
对吧

13:51.130 --> 13:52.130
OK

13:52.130 --> 13:53.130
这是关于废棋API里边

13:53.130 --> 13:54.130
这么几个对象

