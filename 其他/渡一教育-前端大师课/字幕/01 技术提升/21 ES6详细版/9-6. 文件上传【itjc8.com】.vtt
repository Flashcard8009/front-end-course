WEBVTT

00:00.690 --> 00:04.090
好 这些课呢 我们单独说一下文件上传

00:04.090 --> 00:07.090
好像是很复杂的样子 其实特别特别简单

00:07.090 --> 00:09.090
当然 我这里说的文件上传呢

00:09.090 --> 00:12.690
指的是用阿加克斯实现无刷新的上传

00:12.690 --> 00:14.090
不刷新页面的

00:14.090 --> 00:16.290
那么我们要实现文件上传了

00:16.290 --> 00:17.890
它整个过程是这样子的

00:17.890 --> 00:19.290
就是客户端这边呢

00:19.290 --> 00:21.090
要把这个文件数据

00:21.090 --> 00:23.090
它的上传流程是这样子

00:23.090 --> 00:26.890
整个流程是客户端

00:26.890 --> 00:30.490
将文件数据就第一步

00:31.490 --> 00:38.090
客户端将文件数据发送给服务器

00:38.090 --> 00:47.690
第二步 服务器想应一个文件的访问地址

00:47.690 --> 00:50.290
就是服务器 这样说吧 说详细一点

00:50.290 --> 00:52.290
服务器保存文件

00:52.290 --> 00:58.290
保存上传的文件数据到服务器端

00:58.290 --> 01:06.490
然后服务器想应给客户端一个文件访问地址

01:06.490 --> 01:08.290
也就是说你给服务器的是什么呢

01:08.290 --> 01:10.090
给服务器的是一个文件数据

01:10.090 --> 01:12.290
比方说一篇文档 文档里边的数据

01:12.290 --> 01:15.090
或者是一张图片 图片里面的二净字数据

01:15.090 --> 01:18.090
对吧 把这个数据给服务器 传给服务器

01:18.090 --> 01:19.490
服务器是不是拿到这个数据呢

01:19.490 --> 01:23.290
它把这个数据就保存到服务器那边的一个文件里边

01:23.290 --> 01:27.290
然后它会生成一个访问服务器文件的地址

01:27.290 --> 01:31.290
那么传递给地址是什么 地址就是一个字五串

01:31.290 --> 01:32.790
对吧 整个流程是这样子的

01:32.790 --> 01:35.590
那么后边这两步呢 跟我们没关系

01:35.590 --> 01:37.290
至少跟我们现在没关系

01:37.290 --> 01:39.290
因为我们现在又不接触服务器

01:39.290 --> 01:41.690
服务器那边自己就搞定了

01:41.690 --> 01:43.790
那么我们现在只关心第一步

01:43.790 --> 01:47.490
客户端如何把文件数据发送给服务器

01:47.490 --> 01:49.490
那么这里边有一些东西要约定好

01:49.490 --> 01:50.890
要跟服务器之间约定好

01:50.890 --> 01:53.290
首先第一个 那肯定是地址啊 对吧

01:53.290 --> 01:56.690
我要请求服务器 肯定要去请求一个地址

01:56.690 --> 01:57.690
我把数据给力

01:57.690 --> 01:59.390
那么我这里有一个地址啊

01:59.390 --> 02:01.190
大家就使用这个地址

02:01.190 --> 02:02.690
如果说你看到个课程的话

02:02.690 --> 02:03.690
下来要练习的话

02:03.690 --> 02:06.090
就使用这个地址来去访问

02:06.090 --> 02:06.990
我给大家说一下

02:06.990 --> 02:10.090
这个地址是我自己的服务器的一个地址

02:10.090 --> 02:12.290
我是把这个文件呢

02:12.290 --> 02:13.690
首先它只能接收图片

02:13.690 --> 02:16.490
你给我传其他文件我是不认的

02:16.490 --> 02:18.390
它只接收图片

02:18.390 --> 02:19.890
而且我服务器那边

02:19.890 --> 02:21.290
有一个我开了一个空间

02:21.290 --> 02:23.790
在阿里云上开的空间比较小

02:23.790 --> 02:25.790
所以说我并没有把文件直接保存到

02:25.790 --> 02:27.190
我自己的服务器

02:27.190 --> 02:28.390
我又把这个文件呢

02:28.390 --> 02:30.790
又交给那个叫做那个漆流云

02:30.790 --> 02:32.290
我是保存在漆流云那边的

02:32.290 --> 02:33.690
不过跟里边没关系啊

02:33.690 --> 02:34.990
我说的这些东西的意思呢

02:34.990 --> 02:38.690
就是说有可能漆流云的空间也不够了

02:38.690 --> 02:40.290
我不知道你们看那个课程的时候

02:40.290 --> 02:41.490
我那边服务器那边

02:41.490 --> 02:43.090
上传了多保存了多少文件了

02:43.090 --> 02:44.890
就是我可能会定期清理

02:44.890 --> 02:47.590
定期清理这些文件

02:47.590 --> 02:48.290
所以说呢

02:48.290 --> 02:50.990
你可能当时写代码的时候呢

02:50.990 --> 02:52.190
应该是没问题

02:52.190 --> 02:53.690
那么写完了之后

02:53.690 --> 02:54.490
可能过几个月

02:54.490 --> 02:55.590
再去运行一个代码的话

02:55.590 --> 02:57.690
也发现图片怎么刀刀了

02:57.690 --> 02:59.090
我之前在上传的图片没了

02:59.090 --> 03:00.690
可能是我清理掉了

03:00.690 --> 03:02.390
给大家说明一下这个问题啊

03:02.390 --> 03:03.190
其他都没啥

03:03.190 --> 03:04.890
跟我们现在的学习没啥关系

03:04.890 --> 03:05.490
好来吧

03:05.490 --> 03:06.490
第一个就是我们

03:06.490 --> 03:07.790
你要知道一个跟服务器之间

03:07.790 --> 03:08.990
约定好一个地址

03:08.990 --> 03:10.590
就是我们用这个地址

03:10.590 --> 03:14.190
第二个呢就是请求方法

03:14.190 --> 03:15.390
必须是Pose的方法

03:15.390 --> 03:16.290
这是毫无疑问的

03:16.290 --> 03:18.890
因为文件的数据量是比较大的

03:18.890 --> 03:21.090
像我们平时上传一个表单

03:21.090 --> 03:21.990
才多少数据吗

03:21.990 --> 03:23.090
就是一些文本数据

03:23.090 --> 03:24.290
那个数据小的很

03:24.290 --> 03:26.090
可能一个很小很小的图片

03:26.090 --> 03:27.590
叫我们写个表单

03:27.590 --> 03:29.590
哪怕写个几百字

03:29.590 --> 03:31.290
写个几百字的表单

03:31.290 --> 03:32.190
一般都不会写那么多

03:32.190 --> 03:32.690
对吧

03:32.690 --> 03:33.790
还不到EKB

03:33.790 --> 03:34.190
对吧

03:34.190 --> 03:35.590
还不到EKB

03:35.590 --> 03:36.490
嗯

03:36.490 --> 03:37.790
那一定要上传一个文件

03:37.790 --> 03:38.890
水水片都有几KB

03:38.890 --> 03:40.490
所以说文件的数据量比较大

03:40.490 --> 03:40.990
因此呢

03:40.990 --> 03:42.590
还一定是用Pose的方式

03:42.590 --> 03:43.990
去请求服务器的

03:43.990 --> 03:45.090
请求方法是Pose

03:45.090 --> 03:46.290
所以说你要配置一下啊

03:46.290 --> 03:47.090
一会

03:47.090 --> 03:47.990
那么第二个呢

03:47.990 --> 03:50.190
就是请求的表单格式

03:50.190 --> 03:50.890
表单格式

03:50.890 --> 03:51.290
这个呢

03:51.290 --> 03:52.690
没有严格的规定啊

03:52.690 --> 03:53.890
不是说我上传图片

03:53.890 --> 03:57.590
就一定要是什么样的格式啊

03:57.590 --> 03:58.090
不过呢

03:58.090 --> 03:59.590
我们平常用的格式

03:59.590 --> 04:00.490
都是这个格式

04:00.490 --> 04:04.390
叫做MultipartFoamData

04:04.390 --> 04:05.090
就这个格式

04:05.090 --> 04:05.690
见过没

04:05.690 --> 04:07.490
就是我们平时写ATM

04:07.490 --> 04:09.290
这个表单的时候啊

04:09.290 --> 04:10.490
我们写这个表单啊

04:10.490 --> 04:11.490
写个Foam表单的时候

04:11.490 --> 04:13.590
它不是有一个就是Type吗

04:13.590 --> 04:14.290
诶叫什么

04:16.490 --> 04:17.690
Foam

04:17.690 --> 04:18.790
诶叫啥

04:18.790 --> 04:20.790
叫做那个

04:23.390 --> 04:24.990
表单格式

04:25.790 --> 04:26.790
康

04:26.790 --> 04:27.890
哎呦一下子

04:27.890 --> 04:29.190
这个单词在在嘴边

04:29.190 --> 04:29.790
一哈多忘了

04:30.790 --> 04:31.990
好像叫做这个

04:31.990 --> 04:32.790
InkTap

04:32.790 --> 04:33.690
啊InkTap

04:33.690 --> 04:34.990
那么这里其中有一个内心

04:34.990 --> 04:35.990
就是Multipart

04:35.990 --> 04:36.290
对吧

04:36.290 --> 04:37.790
那不过我们也没有必要

04:37.790 --> 04:38.690
去这样设置啊

04:38.690 --> 04:40.690
因为这是用传统的方式上传

04:40.690 --> 04:42.190
你得写个Foam表单

04:42.190 --> 04:42.890
那么现在呢

04:42.890 --> 04:44.190
我们用Adex上传的话

04:44.190 --> 04:45.790
是不需要写这个东西的啊

04:45.790 --> 04:47.090
不需要写的啊

04:47.090 --> 04:47.990
就是我们总之

04:47.990 --> 04:49.590
我们的表单格式

04:49.590 --> 04:50.590
表单格式呢

04:50.590 --> 04:51.690
就是必须是这个格式

04:51.690 --> 04:52.890
哎不说必须吧

04:52.890 --> 04:54.390
一般的情况下的服务器

04:54.390 --> 04:55.590
都要求你是这个格式

04:55.590 --> 04:57.590
这个东西需要跟服务器之间沟通

04:57.590 --> 04:58.790
啊沟通好

04:58.790 --> 05:00.390
那么是这种格式的表单呢

05:00.390 --> 05:00.990
你们之前学过

05:00.990 --> 05:02.590
网络传输协议对吧

05:02.590 --> 05:03.690
那表单格式呢

05:03.690 --> 05:04.890
肯定要做一些处理

05:04.890 --> 05:05.690
对不对啊

05:05.690 --> 05:06.690
肯定要做处理

05:06.690 --> 05:07.090
第二个呢

05:07.090 --> 05:08.990
就是请求体中

05:08.990 --> 05:10.890
请求体中

05:10.890 --> 05:12.090
必须包含

05:14.990 --> 05:17.690
一个建值队

05:17.990 --> 05:21.190
该建的名字

05:21.190 --> 05:23.490
建的名称是什么呢

05:23.490 --> 05:26.490
是服务器要求的名称

05:26.490 --> 05:27.690
就是服务器里面

05:27.690 --> 05:29.090
他就请求体里面

05:29.090 --> 05:30.190
你不是说他传数据吗

05:30.190 --> 05:30.690
对吧

05:30.690 --> 05:31.990
数据呢都是建值队啊

05:31.990 --> 05:33.390
建值队的方式出现的

05:33.390 --> 05:34.990
那么当然他

05:34.990 --> 05:38.190
这个还好根据一个表单格式来啊

05:38.190 --> 05:40.790
如果说你的表单格式是一个

05:40.790 --> 05:41.890
advocation接受的话

05:41.890 --> 05:43.790
他就不要求是建值队的

05:43.790 --> 05:44.790
但是这种格式的话

05:44.790 --> 05:47.190
他是要求你是一个建值队的啊

05:47.190 --> 05:48.690
那他建的名字呢

05:48.690 --> 05:49.990
跟服务器那边要约定

05:49.990 --> 05:50.590
那么这边呢

05:50.590 --> 05:52.090
我给大家约定好了的

05:52.090 --> 05:54.090
就是建的名称

05:54.090 --> 05:55.190
建的名称

05:55.190 --> 05:57.190
我们通常把它叫做表单

05:57.190 --> 05:58.690
表单域名

05:58.690 --> 06:00.790
表单域名称

06:00.790 --> 06:02.990
那么他必须要要求你是一密集翻

06:02.990 --> 06:04.490
这跟服务器约定好的

06:04.490 --> 06:05.790
要看具体的情况

06:05.790 --> 06:07.090
你们以后在公司里面

06:07.090 --> 06:07.890
写个上传

06:07.890 --> 06:09.390
你不要自己去瞎猜

06:09.390 --> 06:10.390
你要去问一下啊

06:10.390 --> 06:11.590
或者是看一下文档

06:11.590 --> 06:12.990
看他里面怎么说的啊

06:12.990 --> 06:14.990
那表单域名是要求的是什么

06:14.990 --> 06:16.290
比方说你要上传

06:16.390 --> 06:17.190
不说上传嘛

06:17.190 --> 06:18.290
你就要提交一个表单

06:18.290 --> 06:20.790
里面帐号帐号的域名是什么

06:20.790 --> 06:21.590
一般来说的话

06:21.590 --> 06:23.990
他就对应到表单里面的内名属性

06:23.990 --> 06:24.990
对吧

06:24.990 --> 06:25.290
总之呢

06:25.290 --> 06:26.690
他有一个域的名称

06:26.690 --> 06:28.690
他要求的是这个一密集翻哦

06:28.690 --> 06:30.190
因为只是图片文件嘛

06:30.190 --> 06:31.490
是这么个意思

06:31.490 --> 06:32.690
是服务器要求的名称

06:32.690 --> 06:33.390
值呢

06:33.390 --> 06:34.390
值是什么呢

06:34.390 --> 06:37.290
值是文件数据

06:37.290 --> 06:39.190
只是文件数据

06:39.190 --> 06:41.690
这是我们要上传一个文件

06:41.690 --> 06:43.490
你必须要知道的东西

06:43.490 --> 06:45.190
首先你请求方法必须posed

06:45.290 --> 06:46.390
表单格式呢

06:46.390 --> 06:48.190
绝大部分时候就是这个

06:48.190 --> 06:49.490
那么是这种表单格式的话

06:49.490 --> 06:50.690
他一般会要求你

06:50.690 --> 06:52.890
他会要求你要是一个建制队

06:52.890 --> 06:55.390
表的请求体里面必须是个建制队

06:55.390 --> 06:56.590
建制队里边呢

06:56.590 --> 06:58.890
你可以是啊

06:58.890 --> 07:00.890
建的名称的是服务器要求的名称

07:00.890 --> 07:01.990
就这个名称

07:01.990 --> 07:02.590
值的名

07:02.590 --> 07:04.290
值的就是文件数据

07:04.290 --> 07:05.390
那么以前呢

07:05.390 --> 07:08.390
在传统的阿迦克斯请求里边呢

07:08.390 --> 07:11.690
其实倒不是说不能上传文件

07:11.690 --> 07:12.890
以前大家如果说

07:12.890 --> 07:14.690
你用过一些第三方

07:14.690 --> 07:15.690
第三方插件的话

07:15.690 --> 07:17.890
你看以前上传文件都是用flash

07:17.890 --> 07:18.090
对吧

07:18.090 --> 07:19.790
用flash上传

07:19.790 --> 07:20.290
为什么呢

07:20.290 --> 07:23.090
是因为不是说以前做不到上传文件

07:23.090 --> 07:25.790
是因为以前拿不到这个东西

07:25.790 --> 07:27.690
你拿不到文件数据

07:27.690 --> 07:29.090
因为牛烂器认为呢

07:29.090 --> 07:32.790
文件数据是用户的隐私

07:32.790 --> 07:35.290
你不应该在

07:35.290 --> 07:37.390
牛烂器的介石语言里边

07:37.390 --> 07:39.590
不能在介石语言里边获取

07:39.590 --> 07:40.790
你都上传到服务器了

07:40.790 --> 07:42.190
服务器肯定能获取

07:42.590 --> 07:44.690
是用户决定上传到服务器的

07:44.690 --> 07:46.290
那么服务器是能够获取的

07:46.290 --> 07:47.090
那没问题

07:47.090 --> 07:47.390
但是呢

07:47.390 --> 07:50.290
你在GS里边去获取文件数据呢

07:50.290 --> 07:52.890
就是运行在牛烂器端的GS文件

07:52.890 --> 07:54.790
GS代码里边去获取文件数据呢

07:54.790 --> 07:56.490
可能会对用户的隐私呢

07:56.490 --> 07:57.790
当成侵犯

07:57.790 --> 07:59.190
然后他考虑的比较浅啊

07:59.190 --> 08:02.590
他说如果说GS能够获取文件数据的话

08:02.590 --> 08:06.190
那可能我可能就会写一些GS代码

08:06.190 --> 08:06.990
这个GS代码呢

08:06.990 --> 08:08.490
就没事就在

08:08.490 --> 08:09.990
只要用户网页是打开的

08:09.990 --> 08:11.490
我没事就看一下用户的电脑上

08:11.490 --> 08:12.390
有哪些文件啊

08:12.390 --> 08:14.390
这样子的对用户来说

08:14.390 --> 08:15.390
太不安全了

08:15.390 --> 08:15.790
所以说呢

08:15.790 --> 08:18.290
他不允许你GS获取文件数据

08:18.290 --> 08:18.690
但是呢

08:18.690 --> 08:20.690
后来他一想也不对啊

08:20.690 --> 08:22.590
用户都要伤传文件了

08:22.590 --> 08:25.190
那我虽然说GS不能随意的去获取

08:25.190 --> 08:26.190
其他文件数据

08:26.190 --> 08:28.390
但是获取上用户选择的

08:28.390 --> 08:30.790
这个文件的数据终于应该允许吧

08:30.790 --> 08:31.190
所以说呢

08:31.190 --> 08:32.290
后来他放宽了一些

08:32.290 --> 08:34.090
就是在H1-5的APN里边

08:34.090 --> 08:35.690
他就放宽了把这个问题

08:35.690 --> 08:37.190
把这个条件

08:37.190 --> 08:38.690
就是说GS呢

08:38.690 --> 08:40.490
不能随意的获取文件

08:40.590 --> 08:41.490
我这里记一笔吧

08:43.390 --> 08:44.990
就是在ATM5中

08:47.690 --> 08:49.490
GS无法

08:50.690 --> 08:55.790
仍然无法随意的获取文件数据

08:55.790 --> 08:58.490
就是用户电脑上的文件数据

08:58.490 --> 09:00.990
但是可以获取到

09:00.990 --> 09:04.690
Input元素中

09:04.690 --> 09:09.090
被用户选中的文件数据

09:09.090 --> 09:10.290
这个是可以获取到的

09:10.290 --> 09:12.390
因为我们在页面上的不是要上传文件

09:12.390 --> 09:13.890
都会写这么一个元素

09:13.890 --> 09:14.990
叫做Input元素

09:14.990 --> 09:15.390
对吧

09:15.390 --> 09:16.490
它类型的是File

09:16.490 --> 09:16.990
对不对

09:16.990 --> 09:17.890
会写这么一个东西

09:17.890 --> 09:18.890
我们给它一个ID

09:18.890 --> 09:20.290
方便我们获取

09:20.290 --> 09:22.490
比方说ID就为

09:22.490 --> 09:24.190
Evata表示一个用户头像

09:24.190 --> 09:25.690
就随便写一个

09:25.690 --> 09:26.690
我们用

09:26.690 --> 09:29.590
我们虽然说无法获取到

09:29.590 --> 09:30.990
随意的获取到文件

09:30.990 --> 09:31.690
但是呢

09:31.690 --> 09:33.190
既然你有这么一个元素

09:33.190 --> 09:34.490
它是这么考虑的

09:34.490 --> 09:36.090
既然页面上有这么一个元素

09:36.090 --> 09:38.090
那么用户又点击了这个元素

09:38.090 --> 09:40.190
就随便点了一张图片

09:40.190 --> 09:41.690
那么说明用户想干嘛

09:41.690 --> 09:43.790
是不是想把图片的信息

09:43.790 --> 09:45.490
就交给服务器

09:45.490 --> 09:46.390
对不对

09:46.390 --> 09:47.590
是不是用户有这么一个想法

09:47.590 --> 09:48.690
就交给这个网站

09:48.690 --> 09:49.590
他相信这个网站

09:49.590 --> 09:51.190
把文件信息给他了

09:51.190 --> 09:52.390
既然交给他了

09:52.390 --> 09:53.990
既然用户信任这个网站

09:53.990 --> 09:54.490
OK

09:54.490 --> 09:57.690
那么你的GS是可以读到这个文件数据的

09:57.690 --> 09:58.790
所以GS不能乱读

09:58.790 --> 09:59.590
它只能读

09:59.590 --> 10:02.490
被Input元素选中的文件数据

10:02.490 --> 10:03.690
所以说它现在放宽了一些

10:03.690 --> 10:04.590
是可以读的

10:04.590 --> 10:06.790
因此我们现在是有能力获取到

10:06.790 --> 10:08.190
这个文件数据的

10:08.190 --> 10:09.890
那么所有的拼图

10:09.890 --> 10:11.790
就完成了

10:11.790 --> 10:12.890
那么我们再写一个

10:12.890 --> 10:16.390
比方说我们来写这么一个上传方法

10:16.390 --> 10:17.190
写这么一个上传方法

10:17.190 --> 10:17.990
比方说

10:17.990 --> 10:18.390
放个信

10:21.390 --> 10:22.190
upload

10:22.190 --> 10:23.390
上传一个文件

10:23.390 --> 10:24.590
你给我传一个啥呢

10:24.590 --> 10:26.790
你就给我给我传一个Input元素的了

10:26.790 --> 10:28.790
你给我传一个Input元素

10:28.790 --> 10:29.190
OK

10:29.190 --> 10:30.490
我来帮你上传这么一个文件

10:32.290 --> 10:33.590
那我也不用传

10:33.590 --> 10:35.190
这就一个Input元素

10:35.190 --> 10:35.790
OK

10:35.790 --> 10:37.890
我们这里得到这个Input元素

10:37.890 --> 10:38.590
看一下

10:38.590 --> 10:41.090
我们现在关键点是要获取文件数据

10:41.090 --> 10:42.890
get elements by ID

10:42.890 --> 10:44.090
avata

10:44.090 --> 10:45.890
来获取文件数据

10:47.290 --> 10:48.190
怎么来获取呢

10:48.190 --> 10:49.690
我们来输出一下

10:49.690 --> 10:51.590
获取文件数据非常简单

10:51.590 --> 10:52.990
就是这个Input元素里边

10:52.990 --> 10:54.690
如果说type为file的话

10:54.690 --> 10:57.090
它会有一个属性叫做files

10:57.090 --> 10:57.790
有这么一个属性

10:57.790 --> 10:58.990
我们把打印出来看一下吧

11:00.890 --> 11:01.690
现在我们来看

11:02.490 --> 11:02.990
控制台

11:04.190 --> 11:05.790
现在我们选中一个文件

11:05.790 --> 11:06.890
选中一个文件

11:06.890 --> 11:07.490
选中了

11:07.490 --> 11:09.390
OK我们这里运行upload的方法

11:10.390 --> 11:10.890
你看

11:10.890 --> 11:12.390
是不是打印出来一个对象

11:12.390 --> 11:13.190
这个file list

11:13.190 --> 11:14.790
它里边选中了一个文件

11:14.790 --> 11:15.390
对吧

11:15.390 --> 11:16.690
这个文件的信息

11:16.690 --> 11:17.790
文件名是啥

11:17.790 --> 11:19.090
文件的尺寸是啥

11:19.090 --> 11:19.990
是什么类型的

11:19.990 --> 11:21.090
以为解析PEG

11:21.090 --> 11:21.690
对吧

11:21.690 --> 11:24.290
上次修改的时间是什么多少

11:24.290 --> 11:24.790
对吧

11:24.790 --> 11:27.190
它就把一个文件信息就可以得到了

11:27.190 --> 11:29.390
当然它这里边还包含了二净值数据

11:29.390 --> 11:31.090
它包含了二净值数据

11:31.090 --> 11:32.690
只是在这里看不到而已

11:32.690 --> 11:34.390
二净值数据一般比较多

11:34.390 --> 11:35.390
看不见

11:35.390 --> 11:36.990
它里边包含了二净值数据

11:37.090 --> 11:39.290
那么这就是一个文件信息

11:39.290 --> 11:39.890
那如果

11:39.890 --> 11:42.290
因为这个东西是可以选中多个文件的

11:42.290 --> 11:43.990
只是我没有开启而已

11:43.990 --> 11:46.090
这个实际上是可以选中多个的

11:46.090 --> 11:47.090
multiple

11:47.090 --> 11:48.190
加上一个布尔属性

11:48.190 --> 11:49.490
它就可以选中多个了

11:49.490 --> 11:51.790
所以它为什么是一个数组

11:51.790 --> 11:53.390
伪数组的那种格式

11:53.390 --> 11:54.790
我们这里调upload

11:54.790 --> 11:56.390
你看打印的是不是有三个文件

11:56.390 --> 11:56.690
对吧

11:56.690 --> 11:57.490
有三个文件

11:57.490 --> 11:58.790
当然我这里的服务器

11:58.790 --> 12:00.690
只允许你一个一个上传

12:00.690 --> 12:02.090
只允许你一个一个上传

12:02.090 --> 12:03.290
OK

12:03.290 --> 12:05.790
那么这个文件数据是不是拿到了

12:05.890 --> 12:07.990
那么我拿到文件数据之后

12:07.990 --> 12:09.690
我们要构建请求体

12:09.690 --> 12:11.590
因为这个请求体是一个

12:12.790 --> 12:13.690
兼职队格式

12:13.690 --> 12:15.990
这个格式还不是简单的这种

12:15.990 --> 12:17.390
节省格式的兼职队

12:17.390 --> 12:18.790
它是什么样的格式的兼职队

12:19.590 --> 12:20.290
还记得吗

12:20.890 --> 12:22.090
它是什么样的格式的兼职队

12:22.090 --> 12:22.890
咱们来看一下吧

12:22.890 --> 12:23.890
我们写个forum表单

12:24.890 --> 12:25.990
x形 随便写个x形

12:25.990 --> 12:27.190
x形都无所谓了

12:27.190 --> 12:28.290
less of the post

12:28.290 --> 12:29.690
关键是我们要把这个ank tab

12:29.690 --> 12:32.090
设为multiple part forum data

12:32.090 --> 12:32.390
OK

12:32.390 --> 12:33.090
我们来看一下吧

12:33.090 --> 12:34.190
它的兼职队是这样子的

12:35.890 --> 12:38.090
我们这里给它一个name属性

12:38.090 --> 12:40.590
name为abc

12:40.590 --> 12:41.690
随便写个吧

12:41.690 --> 12:43.290
下面再写个input元素

12:44.590 --> 12:46.790
name为bcd

12:46.790 --> 12:47.590
OK

12:47.590 --> 12:49.190
然后写个button提交

12:50.190 --> 12:50.990
看一下吧

12:50.990 --> 12:52.090
它的建筑队式

12:52.090 --> 12:54.190
它的请求体应该是什么样子

12:54.190 --> 12:55.790
我们这里选中一个文件

12:55.790 --> 12:56.990
这里随便写一个

12:56.990 --> 12:57.990
我们到这里

12:59.090 --> 13:00.490
这里把这个打开

13:00.490 --> 13:03.480
点提交

13:03.480 --> 13:04.680
点提交

13:04.680 --> 13:06.680
现在当然它上传不了

13:06.680 --> 13:08.980
没事我们来看一下它的请求

13:08.980 --> 13:09.780
你看

13:09.780 --> 13:15.280
请求request post

13:15.280 --> 13:17.580
我的post请求跑到去了

13:17.580 --> 13:18.680
再提交

13:20.880 --> 13:23.280
它这里有一个post请求

13:23.280 --> 13:24.480
这个post请求

13:24.480 --> 13:26.180
咱们往下看一下

13:26.180 --> 13:28.080
request

13:28.080 --> 13:31.280
这里有一个multiple part forum data

13:31.280 --> 13:32.480
它这个请求失败了

13:32.480 --> 13:34.780
它就没给我显示了这个请求体

13:34.780 --> 13:37.180
它实际上是个请求体

13:37.180 --> 13:38.080
我们在这吧

13:38.080 --> 13:38.880
在这

13:38.880 --> 13:40.180
我们在这来

13:40.180 --> 13:41.680
我这里有个postman

13:41.680 --> 13:43.080
我们用postman来测试一下

13:43.080 --> 13:43.780
给它看一下

13:43.780 --> 13:45.280
主要帮它回顾一下

13:46.880 --> 13:51.350
来引出接下来要说明的问题

13:51.350 --> 13:53.650
这里比较我之前做过测试的

13:53.650 --> 13:54.350
测试这个地址

13:56.750 --> 13:58.650
请求上传文件

13:59.550 --> 14:00.550
上传文件

14:02.450 --> 14:03.550
OK在这里

14:03.550 --> 14:04.650
来吧

14:04.650 --> 14:05.850
我们来请求一个

14:05.850 --> 14:07.050
请求一个

14:07.050 --> 14:09.450
在包里里面

14:09.450 --> 14:10.650
你看我这里选中了一个文件了

14:10.650 --> 14:11.650
选中一个文件

14:11.650 --> 14:13.250
我们主要是看一下请求体

14:13.250 --> 14:14.850
我们点渗的发送请求

14:16.350 --> 14:17.850
服务器给我了一个响应结果

14:17.850 --> 14:19.250
说明上传成功了

14:19.250 --> 14:19.450
好

14:19.450 --> 14:21.050
接下来我们来看一下我们的请求体

14:22.850 --> 14:24.650
我们的请求的信息

14:24.650 --> 14:25.550
关键是这个东西

14:25.550 --> 14:28.050
我没有办法

14:28.050 --> 14:29.650
那个就是让你们看的

14:29.650 --> 14:30.650
把字体放大

14:30.650 --> 14:31.650
我找了半天

14:31.650 --> 14:33.050
之前我用这个东西的时候

14:33.050 --> 14:33.650
找了半天

14:33.650 --> 14:35.950
不知道都在哪里字体放大

14:35.950 --> 14:37.650
大家去看一下

14:37.650 --> 14:39.250
前边的是请求头

14:39.250 --> 14:41.150
你看其中有个content type

14:41.150 --> 14:42.450
我把它复制过来

14:42.450 --> 14:43.250
把它复制过来

14:49.680 --> 14:51.880
前边是有一个请求头

14:52.980 --> 14:55.280
请求头里边有个multipart form data

14:55.280 --> 14:55.780
对吧

14:55.780 --> 14:56.880
后边有个boundaries

14:56.880 --> 14:58.680
就是分剑服

14:58.680 --> 15:00.480
这是一个水积生成的一个制服

15:00.480 --> 15:00.680
对吧

15:00.680 --> 15:01.780
一个分剑服

15:01.780 --> 15:02.680
那么这个分剑服

15:02.680 --> 15:04.280
就是每一个分剑服之间

15:04.280 --> 15:05.480
它就是一对数据

15:05.480 --> 15:06.380
一个建置对数据

15:06.380 --> 15:07.580
每个分剑服之间

15:07.580 --> 15:08.480
它是规定的是

15:08.480 --> 15:10.480
请求体里边的分剑服

15:10.580 --> 15:12.680
那你看一下请求体里边是不是对应

15:12.680 --> 15:14.680
下面这一部分是请求体

15:14.680 --> 15:17.180
这个请求体里边是不是要对应出现一个分剑服

15:17.180 --> 15:17.580
对吧

15:17.580 --> 15:19.080
它就是一种非常特殊的格式

15:19.080 --> 15:19.480
你看

15:19.480 --> 15:20.580
这是它的建的名字

15:20.580 --> 15:21.680
叫img file

15:21.680 --> 15:22.880
这是它的

15:22.880 --> 15:24.380
还有一些附加信息

15:24.380 --> 15:25.580
还有建的值在哪

15:25.580 --> 15:26.380
建的值在这

15:26.380 --> 15:27.180
只是你看不见而已

15:27.180 --> 15:28.180
它是二净值

15:28.180 --> 15:29.680
二净值它不给你显示出来

15:29.680 --> 15:31.680
所以你看不见而已

15:31.680 --> 15:32.680
也就是说

15:32.680 --> 15:33.380
通过这个例子

15:33.380 --> 15:34.580
我主要是告诉大家

15:34.580 --> 15:36.080
你不用去吸看这个玩意

15:36.080 --> 15:37.580
如果说你之前讲的很详细

15:37.580 --> 15:39.080
之前学习的很详细的话

15:39.180 --> 15:41.180
那么你知道这个格式是怎么回事

15:41.180 --> 15:42.080
你不知道的话

15:42.080 --> 15:43.380
其实问题也不大

15:43.380 --> 15:44.380
你只需要知道

15:44.380 --> 15:47.080
这个multipart form data

15:47.080 --> 15:48.280
这种格式

15:48.280 --> 15:51.480
它里边的请求体的格式是比较特殊的

15:51.480 --> 15:53.780
如果说你要自己手动去构建的话

15:53.780 --> 15:55.080
能不能构建出来呢

15:55.080 --> 15:56.280
也可以构建出来

15:56.280 --> 15:58.880
首先你要对它的各种细节

15:58.880 --> 16:00.280
要充分的了解

16:00.280 --> 16:00.980
第二呢

16:00.980 --> 16:03.180
构建起来是比较麻烦的

16:03.180 --> 16:04.480
至少是比较麻烦的

16:04.480 --> 16:06.180
虽然说你可以自己构建

16:06.180 --> 16:11.380
因此我们在使用上传文件的时候

16:11.380 --> 16:12.380
这个请求体

16:12.380 --> 16:14.880
我们一般不去手动的去构建

16:14.880 --> 16:15.980
一般会用什么呢

16:15.980 --> 16:17.080
会利用

16:17.080 --> 16:18.480
可以利用

16:18.480 --> 16:21.980
atma5中提供的

16:21.980 --> 16:23.780
form data

16:23.780 --> 16:25.280
构造函数

16:25.280 --> 16:28.380
来创建请求体

16:28.380 --> 16:30.680
我们一般会使用这个东西

16:30.680 --> 16:32.780
这个构造函数来创建请求体

16:32.780 --> 16:35.080
它就会帮我们把这个请求体

16:35.080 --> 16:36.280
给我们构建好

16:36.280 --> 16:38.680
这个函数用起来特别简单

16:38.680 --> 16:40.880
看一下怎么用

16:40.880 --> 16:41.880
它就这样用的

16:41.880 --> 16:43.280
比方说我们这里

16:43.280 --> 16:45.780
我们这里就建立一个form data

16:45.780 --> 16:46.780
通过这个构造函数

16:46.780 --> 16:48.980
六一个form data

16:48.980 --> 16:49.880
这就来做什么呢

16:49.880 --> 16:51.880
是构建请求体

16:51.880 --> 16:57.280
构建请求体

16:57.280 --> 16:58.580
构建一个请求体

16:58.580 --> 16:59.680
那么这个请求体地

16:59.680 --> 17:01.080
目前没有数据

17:01.080 --> 17:02.680
这里其实还可以传参数

17:02.680 --> 17:04.980
就是把一个form表单对象传进去

17:04.980 --> 17:07.980
它会把表单对象里面的所有的信息

17:07.980 --> 17:09.880
就加到这个请求体里边

17:09.880 --> 17:11.180
当然我们一般

17:11.180 --> 17:12.280
用Rx请求的话

17:12.280 --> 17:14.280
一般也不会去写这个表单

17:14.280 --> 17:16.080
也不会去写这个表单

17:16.080 --> 17:16.380
OK

17:16.380 --> 17:18.680
那么我们这里就可以构建一个

17:18.680 --> 17:21.480
就构建一个完全空的请求体

17:21.480 --> 17:22.480
空的请求体里边

17:22.480 --> 17:24.680
我们可以往里边加数据

17:24.680 --> 17:26.180
form data里边有个方法叫做

17:26.180 --> 17:26.980
append

17:26.980 --> 17:28.980
往里边添加一个数据

17:28.980 --> 17:31.280
你看是不是Name属性Value属性

17:31.280 --> 17:33.280
Name和Value属性

17:33.280 --> 17:34.280
Name属性写啥

17:34.280 --> 17:36.280
那就是建的名字

17:36.280 --> 17:37.380
好建的名字

17:37.380 --> 17:39.980
比方说我们这里就用这个

17:39.980 --> 17:43.180
就用我们刚才自己约定的约定好的名字

17:43.180 --> 17:44.480
1米级File

17:44.480 --> 17:46.780
就是我们请求体里边建的名字

17:46.780 --> 17:47.780
建的值是什么

17:47.780 --> 17:49.180
这个值可以是个支付串

17:49.180 --> 17:50.580
比方说账号就是个支付串

17:50.580 --> 17:52.080
密码是个支付串

17:52.080 --> 17:52.980
但是文件呢

17:52.980 --> 17:55.180
文件是不是个二进制数据

17:55.180 --> 17:57.580
好文件的二进制数据在哪呢

17:57.580 --> 17:58.380
是不是在这个

17:58.380 --> 17:59.480
刚才看到过的

17:59.480 --> 18:02.280
这个input元素的File是属性里边

18:02.280 --> 18:03.780
是不是记住了他里边上

18:03.780 --> 18:05.580
选中的所有文件对吧

18:05.580 --> 18:06.980
当然我们只选中一个文件

18:06.980 --> 18:09.380
所以说我们只取他第一个文件就行了

18:09.380 --> 18:10.780
你看我们当时看到的

18:10.780 --> 18:12.280
他这里边会有

18:12.280 --> 18:13.780
如果说你可以选中多个的话

18:13.780 --> 18:14.780
可以有多个文件

18:14.780 --> 18:15.680
当然也可以判断一下

18:15.680 --> 18:16.780
你有没有选中文件

18:16.780 --> 18:19.580
如果说他这个东西Nense为0

18:19.580 --> 18:20.580
没有文件

18:20.580 --> 18:21.880
没有文件的话你得包一个错

18:21.880 --> 18:22.980
然后选择就是了

18:22.980 --> 18:24.580
比方说判断一下吧

18:24.580 --> 18:25.980
如果说

18:25.980 --> 18:30.580
imp.files.nense等于0

18:30.580 --> 18:31.080
说明啥呢

18:31.080 --> 18:31.980
没有选中

18:32.080 --> 18:33.280
我们这里二大次一个

18:33.280 --> 18:37.880
请选择要上传的文件

18:37.880 --> 18:39.680
把这个按钮去掉

18:39.680 --> 18:40.480
现在上传的文件

18:40.480 --> 18:41.680
然后就return

18:41.680 --> 18:43.680
就啥都不做

18:43.680 --> 18:44.480
return

18:44.480 --> 18:46.280
好

18:46.280 --> 18:47.280
来看一下吧

18:47.280 --> 18:48.280
来看一下吧

18:48.280 --> 18:48.780
好

18:48.780 --> 18:50.280
这里呢我们

18:50.280 --> 18:53.150
这里回去啊

18:53.150 --> 18:54.750
小心啊

18:54.750 --> 18:55.250
这里呢

18:55.250 --> 18:56.250
我们先不选中

18:56.250 --> 18:56.850
不选中

18:56.850 --> 18:57.250
不选中

18:57.250 --> 18:59.550
我们直接去调一个upload

18:59.550 --> 19:00.850
方法

19:00.850 --> 19:01.550
直接调了

19:01.550 --> 19:02.350
你看

19:02.350 --> 19:04.050
让你要选中一个上传的文件

19:04.050 --> 19:06.050
如果说你已经选中了

19:06.050 --> 19:06.350
ok

19:06.350 --> 19:07.250
我们再调upload

19:07.250 --> 19:08.250
是不是就没问题了

19:08.250 --> 19:08.550
对吧

19:08.550 --> 19:10.350
代码就走到这儿来了

19:10.350 --> 19:10.450
好

19:10.450 --> 19:10.950
那么这里呢

19:10.950 --> 19:12.450
我们就构建好了一个请求体

19:12.450 --> 19:12.750
对吧

19:12.750 --> 19:14.250
我们请求体里边加了一个

19:14.250 --> 19:15.650
建的名字叫imp.files

19:15.650 --> 19:16.450
建的值

19:16.450 --> 19:17.050
建的值是什么

19:17.050 --> 19:18.450
就是文件数据

19:18.450 --> 19:19.650
文件数据

19:19.650 --> 19:20.550
你看一下吧

19:20.550 --> 19:22.450
我们这里不是

19:22.450 --> 19:24.850
这里请求体中必须包含一个建议队

19:24.850 --> 19:25.350
对吧

19:25.350 --> 19:27.050
建的名字的是福奇要求的名称

19:27.050 --> 19:28.050
只是文件数据

19:28.050 --> 19:28.350
当然呢

19:28.350 --> 19:29.250
这里边也可以

19:29.250 --> 19:32.150
还可以多传一些数据

19:32.450 --> 19:33.950
多传一些信息

19:33.950 --> 19:35.250
比方说

19:35.250 --> 19:36.750
你还要传一些账号

19:36.750 --> 19:37.750
比方说locking id

19:37.750 --> 19:40.150
当然这个要跟福奇那边要配合

19:40.150 --> 19:41.450
账号是abc

19:41.450 --> 19:44.050
当然也可以来自于一个文凳框的值

19:44.050 --> 19:44.750
密码是多少

19:44.750 --> 19:47.350
还可以继续传一些建议队数据

19:47.350 --> 19:48.750
不过一般的情况下

19:48.750 --> 19:49.750
就是上传文件了

19:49.750 --> 19:50.650
就传一个

19:50.650 --> 19:52.750
就把文件的数据给他就行了

19:52.750 --> 19:54.350
如果说你还要同时传多个的话

19:54.350 --> 19:55.350
也可以传递

19:55.350 --> 19:55.850
没问题的

19:57.550 --> 19:58.050
那么这里呢

19:58.050 --> 19:59.550
我们就

19:59.550 --> 20:00.550
加了一个建议队进去了

20:00.550 --> 20:02.350
现在我们请求体是不是搞定了

20:02.350 --> 20:03.750
请求体就是一个forumdata

20:03.750 --> 20:04.550
都已经搞定了

20:04.550 --> 20:07.150
是用forumdata来帮我们创建的请求体

20:07.150 --> 20:07.350
好

20:07.350 --> 20:08.550
那么剩下就是请求了

20:08.550 --> 20:08.850
来吧

20:08.850 --> 20:09.550
请求吧

20:09.550 --> 20:10.250
请求我们用啥

20:10.250 --> 20:11.150
是不是用废棋

20:11.150 --> 20:11.750
用废棋

20:11.750 --> 20:12.450
它是一个异步的

20:12.450 --> 20:14.950
所以我们把它改造成为一个异步函数

20:14.950 --> 20:15.850
sync

20:15.850 --> 20:16.350
废棋

20:16.350 --> 20:18.450
我们这里肯定要得到一个响应结果

20:18.450 --> 20:19.150
对吧

20:19.150 --> 20:20.550
我之前写过的

20:20.550 --> 20:22.150
响应结果等待

20:22.150 --> 20:22.850
废棋里边

20:22.850 --> 20:23.950
第一个参数船啥

20:23.950 --> 20:25.350
是传UIL地址

20:25.350 --> 20:28.050
我们这里写这么一个UIL地址

20:28.050 --> 20:29.550
这是我们请求的地址

20:29.550 --> 20:32.550
请求的地址就这个地址

20:32.550 --> 20:33.850
请求地址就这个地址

20:33.850 --> 20:35.150
没问题吧

20:35.150 --> 20:37.150
那么把UIL地址传进去

20:37.150 --> 20:37.350
好

20:37.350 --> 20:39.150
第二参数是配置

20:39.150 --> 20:40.850
配置里边要配置哪些东西呢

20:40.850 --> 20:42.550
首先我们这里看一下这边

20:42.550 --> 20:44.550
是不是要求请求方法是post

20:44.550 --> 20:45.950
那么这个没问题

20:45.950 --> 20:46.750
没错的

20:46.750 --> 20:48.150
改成post方法

20:48.150 --> 20:48.350
好

20:48.350 --> 20:49.550
第二个就是

20:49.550 --> 20:51.750
请求表达格式

20:51.750 --> 20:52.750
表达的格式

20:52.750 --> 20:54.250
是不是表达格式在哪里配置

20:54.250 --> 20:56.550
是不是在请求头里边配置

20:56.550 --> 20:57.250
配置啥

20:57.250 --> 20:59.650
配置这个content type

20:59.650 --> 21:00.150
对吧

21:00.150 --> 21:02.450
我请求的格式是什么格式呢

21:02.450 --> 21:03.250
是不是这个格式

21:03.250 --> 21:03.850
对吧

21:03.850 --> 21:04.750
实际上像这个东西

21:04.750 --> 21:06.650
你没有必要自己手动举行

21:06.650 --> 21:08.150
没有必要手动举行

21:08.150 --> 21:08.850
没必要

21:08.850 --> 21:10.050
因为当你

21:10.050 --> 21:12.650
我们当我们把请求体进行配置之后

21:12.650 --> 21:14.250
我们看请求体怎么配置

21:14.250 --> 21:16.350
body直接配置为formdata

21:16.350 --> 21:18.250
当你进行这样的配置的过后

21:18.250 --> 21:20.450
它会自动修改

21:20.450 --> 21:22.250
请求

21:22.250 --> 21:25.450
自动修改请求头

21:25.450 --> 21:27.250
自动修改那个content type

21:27.250 --> 21:28.550
自动修改就完事了

21:28.550 --> 21:30.950
所以说你要做的这五费就是这么一件事

21:30.950 --> 21:32.150
就完了

21:32.150 --> 21:33.150
就上传过去了

21:33.150 --> 21:34.550
这就上传过去了

21:34.550 --> 21:34.950
好

21:34.950 --> 21:37.050
接下来五费就得到服务器的响应结果

21:37.050 --> 21:38.350
那么我们开箱看一下吧

21:38.350 --> 21:39.850
服务器那边有没有收到文件

21:39.850 --> 21:41.650
我们看一下网络传输

21:41.650 --> 21:44.150
看阿迦克制请求

21:44.150 --> 21:45.050
我们选中一个文件

21:45.050 --> 21:45.350
OK

21:45.350 --> 21:46.650
我们在这里调用方法

21:46.650 --> 21:49.350
upload一调用

21:49.350 --> 21:51.150
我们看一下网络传输

21:51.150 --> 21:51.950
服务器看一下

21:51.950 --> 21:53.250
你看一下我们的请求

21:53.350 --> 21:55.350
请求里边是不是有多了

21:55.350 --> 21:56.150
有这么一个东西

21:56.150 --> 21:58.050
请求里边多了一个content type

21:58.050 --> 21:58.650
对吧

21:58.650 --> 21:59.850
多了这么一个东西

21:59.850 --> 22:01.050
为什么会多这么一个东西

22:01.050 --> 22:03.150
因为我们给它的请求体是formdata

22:03.150 --> 22:03.950
他一看这个东西

22:03.950 --> 22:04.850
他就明白了

22:04.850 --> 22:05.850
我们要给他的

22:05.850 --> 22:06.650
他的请求内

22:06.650 --> 22:10.050
他的消息内心是multipartformdata

22:10.050 --> 22:11.350
他会自动给你改

22:11.350 --> 22:12.350
你不用管

22:12.350 --> 22:12.550
好

22:12.550 --> 22:13.450
那么这个formdata里边

22:13.450 --> 22:14.850
你看一下view source

22:14.850 --> 22:15.250
你看一下

22:15.250 --> 22:16.150
是不是这种格式

22:16.150 --> 22:16.850
对吧

22:16.850 --> 22:17.750
是不是这种格式

22:17.750 --> 22:19.950
有一种特殊的格式

22:19.950 --> 22:20.050
好

22:20.050 --> 22:21.650
那么服务器那边看到这个请求

22:21.650 --> 22:22.550
一切都没有问题

22:22.650 --> 22:24.350
服务器那边就会进行操作

22:24.350 --> 22:25.050
我那边服务器

22:25.050 --> 22:27.050
他就会把文件保存下来

22:27.050 --> 22:28.150
然后给了一个响应

22:28.150 --> 22:29.950
看一下给的响应是什么

22:29.950 --> 22:32.250
给的响应就是一个接生格式

22:32.250 --> 22:33.950
这不错

22:33.950 --> 22:35.250
那么他告诉你

22:35.250 --> 22:37.650
你的文件已经被保存到这个地址了

22:37.650 --> 22:37.850
OK

22:37.850 --> 22:39.650
我们通过这个地址访问一下

22:39.650 --> 22:40.750
你看是不是这个文件

22:40.750 --> 22:41.950
就访问到了

22:41.950 --> 22:42.950
就这么回事

22:42.950 --> 22:44.850
因此你这边要拿到服务器的响应结果

22:44.850 --> 22:46.450
是不是后面后面的一样了

22:46.450 --> 22:46.750
对吧

22:46.750 --> 22:47.850
后面一样了

22:47.850 --> 22:50.150
我们这里拿到服务器的响应结果

22:50.150 --> 22:52.450
await,resp.json

22:52.450 --> 22:53.050
对吧

22:53.050 --> 22:53.950
解析成json

22:53.950 --> 22:55.450
输出result

22:55.450 --> 22:55.750
好

22:55.750 --> 22:56.650
保存啊

22:56.650 --> 22:57.050
看一下

22:58.350 --> 22:59.650
这里我们选中一个文件

23:02.050 --> 23:02.950
这里upload

23:04.150 --> 23:05.050
调用

23:05.050 --> 23:08.350
然后你看服务器是不是得到服务器的响应结果了

23:08.350 --> 23:09.350
对不对

23:09.350 --> 23:11.350
得到服务器的响应结果了

23:11.350 --> 23:13.350
那么我们可以把它再做完善一点啊

23:13.350 --> 23:14.150
比方说我们这里呢

23:14.150 --> 23:15.750
有一个移密级元素

23:15.750 --> 23:17.950
移密级元素给他一个ID嘛

23:18.950 --> 23:20.950
就是移密级

23:20.950 --> 23:22.950
给他的ID

23:22.950 --> 23:24.950
然后下面一个按钮

23:24.950 --> 23:25.950
button

23:25.950 --> 23:26.950
写个上传

23:26.950 --> 23:27.950
来吧

23:27.950 --> 23:28.950
我们来

23:28.950 --> 23:30.950
稍微的实现一下吧

23:30.950 --> 23:31.950
稍微的实现一下

23:31.950 --> 23:33.950
我们这里呢就直接把服务器的

23:33.950 --> 23:35.950
响应结果result该返回

23:35.950 --> 23:37.950
返回服务器的响应结果

23:37.950 --> 23:39.950
来我们试一下

23:39.950 --> 23:41.950
首先给按钮注册事件

23:41.950 --> 23:42.950
给按钮注册事件

23:42.950 --> 23:43.950
document

23:43.950 --> 23:44.950
curry

23:44.950 --> 23:45.950
selector

23:45.950 --> 23:46.950
button

23:46.950 --> 23:47.950
unclick

23:47.950 --> 23:49.950
按钮点击过后干嘛

23:49.950 --> 23:51.950
是不是调用

23:51.950 --> 23:52.950
upload对吧

23:52.950 --> 23:54.950
upload给你返回一个啥

23:54.950 --> 23:56.950
是不是返回一个服务器的结果

23:56.950 --> 23:58.950
服务器的结果

23:58.950 --> 24:00.950
说拿到服务器的结果

24:00.950 --> 24:01.950
我们这里是不是把服务器的结果返回了

24:01.950 --> 24:02.950
但是你一定要注意啊

24:02.950 --> 24:04.950
这个方法是aSync方法

24:04.950 --> 24:05.950
它返回的是啥

24:05.950 --> 24:06.950
是真的服务器结果吗

24:06.950 --> 24:07.950
不是

24:07.950 --> 24:08.950
它返回的是个promise

24:08.950 --> 24:10.950
因此呢你是不是

24:10.950 --> 24:11.950
等到一个promise

24:11.950 --> 24:12.950
resolve之后

24:12.950 --> 24:13.950
达到它的状态数据

24:13.950 --> 24:15.950
因此呢我这里呢可以把它

24:15.950 --> 24:17.950
变成一个异部函数

24:17.950 --> 24:18.950
把它变成一个异部函数

24:18.950 --> 24:20.950
而任何函数都可以把它变成异部函数

24:20.950 --> 24:22.950
然后我们这里等待

24:22.950 --> 24:23.950
等待那边完成

24:23.950 --> 24:24.950
完成过后

24:24.950 --> 24:25.950
它会给我一个什么

24:25.950 --> 24:27.950
给我一个就是服务器的

24:27.950 --> 24:29.950
对象的结果

24:29.950 --> 24:30.950
我们这里输出resolve

24:30.950 --> 24:31.950
看一下吧

24:32.950 --> 24:33.950
那么这里呢我们选动

24:33.950 --> 24:34.950
随便选动一个文件

24:34.950 --> 24:35.950
点击上传

24:36.950 --> 24:38.950
你看是不是拿到服务器的结果了

24:38.950 --> 24:39.950
对吧

24:39.950 --> 24:41.950
它的属性pass里面就是我们的地址

24:41.950 --> 24:43.950
那么现在要做的事情很简单

24:43.950 --> 24:45.950
就是把这个emg元素

24:45.950 --> 24:46.950
document

24:46.950 --> 24:48.950
get elements by id

24:48.950 --> 24:49.950
emg

24:49.950 --> 24:50.950
ovata元素拿到

24:50.950 --> 24:52.950
拿到这个emg元素

24:52.950 --> 24:55.950
然后呢给这个emg元素的src属性复制

24:55.950 --> 24:56.950
复制为什么

24:56.950 --> 24:57.950
服务器那边的pass

24:57.950 --> 24:59.950
响应结果

24:59.950 --> 25:00.950
对吧

25:01.950 --> 25:02.950
点击

25:02.950 --> 25:03.950
再来看

25:03.950 --> 25:05.950
选中了一个

25:05.950 --> 25:06.950
上传

25:06.950 --> 25:08.950
你看是不是拿到服务器的响应结果了

25:08.950 --> 25:09.950
对吧

25:09.950 --> 25:10.950
把这个路进去

25:10.950 --> 25:11.950
放到文件里面去了

25:11.950 --> 25:12.950
当然呢

25:12.950 --> 25:14.950
这个里面还可以继续做丰富一点

25:14.950 --> 25:16.950
比较说你上传之前

25:16.950 --> 25:17.950
你点了按钮过后

25:17.950 --> 25:18.950
现在还没有上传

25:18.950 --> 25:19.950
正在上传

25:19.950 --> 25:20.950
那么你可以用一个圈圈

25:20.950 --> 25:21.950
用个图片

25:21.950 --> 25:22.950
或者用什么玩意

25:22.950 --> 25:23.950
一个盟程

25:23.950 --> 25:24.950
在这里转一转

25:24.950 --> 25:26.950
拿到这个服务器的响应结果之后

25:26.950 --> 25:28.950
拿到这个服务器响应结果之后

25:28.950 --> 25:30.950
我再把这个盟程取消掉

25:30.950 --> 25:32.950
都可以做

25:32.950 --> 25:34.950
自己去发挥了

25:34.950 --> 25:36.950
这就是个典型的上传文件场景

25:36.950 --> 25:37.950
其实也特别简单

25:37.950 --> 25:38.950
你用非期API

25:38.950 --> 25:39.950
就可以非常轻松的

25:39.950 --> 25:41.950
再配合这个formdata

25:41.950 --> 25:44.950
API就可以轻松的把它实现了

25:44.950 --> 25:45.950
OK

25:45.950 --> 25:46.950
下台去做一遍

25:46.950 --> 25:47.950
上传文件

