WEBVTT

00:00.690 --> 00:03.410
好 这一张呢 我们来到了对象

00:03.410 --> 00:05.530
上一张我们说到吧

00:05.530 --> 00:08.450
就是ES6它对函数的一些改进 对吧

00:08.450 --> 00:11.170
最重要的一个改进呢 就是箭头函数了

00:11.170 --> 00:14.130
还有圣女参数以及展开与传服

00:14.130 --> 00:16.610
这一张呢 我们主要是来聊对象

00:16.610 --> 00:19.330
就看ES6里面对对象有哪些改进

00:19.330 --> 00:21.410
其实学到现在 大家应该感觉到啊

00:21.410 --> 00:24.330
ES6这一个版本啊 它真的是

00:24.330 --> 00:25.970
改动了非常非常多啊

00:25.970 --> 00:27.730
它对GS语言语

00:27.730 --> 00:30.410
以前的方方面面的问题呢 都考虑到了啊

00:30.410 --> 00:32.650
对它进行了一些处理

00:32.650 --> 00:34.330
好 这些可能我们东西很简单啊

00:34.330 --> 00:36.410
就说三个方面 一个是成员数写

00:36.410 --> 00:38.730
一个是方法数写 一个是计算属性名

00:38.730 --> 00:40.810
其实这三个方面呢 就对应到

00:40.810 --> 00:43.050
以前咱们使用介石代码的时候呢

00:43.050 --> 00:44.730
遇到了一些问题啊

00:44.730 --> 00:46.010
也不算严重的问题吧

00:46.010 --> 00:48.610
就是感觉不是很方便

00:48.610 --> 00:51.610
第一个呢 就是成员数写啊

00:51.610 --> 00:53.850
成员数写 成员数写呢

00:53.850 --> 00:55.690
它发生在这些事情呢

00:55.690 --> 00:59.330
都发生在对象字面亮的是定义的时候

00:59.370 --> 01:00.730
什么意思呢 就是以前呢

01:00.730 --> 01:02.210
我们要写一个对象

01:02.210 --> 01:03.730
很多时候我们都是这样的写的 对吧

01:03.730 --> 01:04.810
一个对象字面亮

01:04.810 --> 01:07.290
这个玩意儿就是一个对象字面亮

01:07.290 --> 01:10.330
你直接数写个对象 两个大过号

01:10.330 --> 01:12.050
那时候数写这个东西的时候呢

01:12.050 --> 01:13.690
有的时候呢 会遇到这么一个问题

01:13.690 --> 01:15.730
我们先看第一个啊 成员数写

01:15.730 --> 01:18.050
就是说 比个例子吧

01:18.050 --> 01:20.970
咱们这里呢 有一个函数

01:20.970 --> 01:23.970
get user

01:23.970 --> 01:25.890
你给我传递一个

01:25.890 --> 01:28.410
或者说叫做create user

01:28.450 --> 01:30.210
创建一个用户对象

01:30.210 --> 01:31.490
你给我传递一个什么呢

01:31.490 --> 01:32.250
登录账号

01:32.250 --> 01:34.370
locking id 登录密码

01:34.370 --> 01:35.770
locking password的

01:35.770 --> 01:36.690
还有什么呢

01:36.690 --> 01:38.970
还有一个就是里程

01:38.970 --> 01:39.970
leaknet

01:39.970 --> 01:41.930
你给我传递这么三个属性

01:41.930 --> 01:43.290
你这么三个数据

01:43.290 --> 01:45.130
我给你返回一个什么呢

01:45.130 --> 01:46.570
返回一个对象字面亮

01:46.570 --> 01:47.610
返回一个对象

01:47.610 --> 01:49.530
这个对象里面呢 也有一些属性

01:49.530 --> 01:50.810
它的属性名字呢

01:50.810 --> 01:53.170
你看跟这个参数的名字

01:53.170 --> 01:55.570
或者是跟这个变量的名字是一样的

01:55.570 --> 01:57.610
以前我们是不是得这样的写 对吧

01:57.650 --> 01:58.690
leaknet

01:58.690 --> 02:01.170
leaknet

02:01.170 --> 02:02.130
对吧 是不是这样的写

02:02.130 --> 02:04.330
当然呢 还可能有一些别的属性

02:04.330 --> 02:05.250
还可能有一些别的属性

02:05.250 --> 02:06.090
比方说 id

02:06.090 --> 02:07.170
id我们随便写一个

02:07.170 --> 02:09.010
master writer

02:09.010 --> 02:10.170
比方说

02:10.170 --> 02:10.930
好

02:10.930 --> 02:11.970
那么以前呢

02:11.970 --> 02:12.890
这种写法有没有问题

02:12.890 --> 02:13.890
但没有什么问题

02:13.890 --> 02:15.450
就是看起来呢

02:15.450 --> 02:18.810
不是 感觉很繁熟 很啰嗦

02:18.810 --> 02:20.210
我的属性名叫locking id

02:20.210 --> 02:20.890
来自于哪呢

02:20.890 --> 02:22.770
来自于一个变量的名字叫locking id

02:22.770 --> 02:23.410
它的字

02:23.410 --> 02:25.010
这是属性名字 这是属性字

02:25.010 --> 02:25.370
对吧

02:25.370 --> 02:26.290
虽然两个名字一样

02:26.290 --> 02:27.930
但是含义是不一样的

02:27.930 --> 02:29.050
这是属性名

02:29.050 --> 02:30.090
这是属性的字

02:30.090 --> 02:31.850
属性的字来自于一个变量的字

02:31.850 --> 02:34.450
变量的名字跟属性名一样

02:34.450 --> 02:35.370
那么这种情况呢

02:35.370 --> 02:37.850
在Yes6得到了改进

02:37.850 --> 02:38.970
它说如果说

02:38.970 --> 02:41.410
如果

02:41.410 --> 02:44.730
如果对象字面量

02:44.730 --> 02:47.570
初始化实

02:47.570 --> 02:50.130
成员的名称

02:50.130 --> 02:53.570
和成员的名称

02:53.570 --> 02:58.010
来自于一个变量

02:58.010 --> 02:59.290
来自一个变量

02:59.290 --> 03:04.410
并且和变量的名称相同

03:04.410 --> 03:07.650
则可以进行减写

03:07.650 --> 03:09.130
那么具体怎么减写呢

03:09.130 --> 03:10.450
你看这边

03:10.450 --> 03:13.130
就完了 去了就完了

03:13.130 --> 03:15.450
这就是成员数写

03:15.450 --> 03:17.610
前面三个就直接这样写就完了

03:17.610 --> 03:19.490
它就能够理解到

03:19.490 --> 03:21.770
你这个地方就是这么个意思

03:21.770 --> 03:23.450
它就能理解

03:23.450 --> 03:25.170
就是这一个单词包含了两个意思

03:25.170 --> 03:27.170
它既表示属性名

03:27.170 --> 03:27.770
同时呢

03:27.770 --> 03:30.490
它的字来自于同名变量的字

03:30.490 --> 03:31.530
就表示这个意思

03:31.530 --> 03:32.370
是不是可以数写

03:32.370 --> 03:32.610
对吧

03:32.610 --> 03:34.010
我们来看一下

03:34.010 --> 03:35.530
这里我们输出

03:35.530 --> 03:38.210
create user

03:38.210 --> 03:39.450
账号

03:39.450 --> 03:40.650
账号随便写吧

03:40.650 --> 03:42.410
密码123

03:42.410 --> 03:44.210
nicklake

03:44.210 --> 03:45.290
随便写个

03:45.290 --> 03:45.610
好

03:45.610 --> 03:49.260
咱们看一下吧

03:49.260 --> 03:50.580
点击右键

03:50.580 --> 03:52.620
开空谈

03:52.620 --> 03:52.860
好

03:52.860 --> 03:53.820
这个对象拿到了

03:53.820 --> 03:54.260
是吧

03:54.260 --> 03:55.180
是不是这样子

03:55.220 --> 03:55.380
对吧

03:55.380 --> 03:56.220
完全一样的

03:56.220 --> 03:57.220
跟之前的写法

03:57.220 --> 03:58.860
结果效果是完全一样的

03:58.860 --> 04:01.340
它只是给你提供了一个语法堂

04:01.340 --> 04:02.300
当你用起来

04:02.300 --> 04:03.260
更加舒服一点

04:03.260 --> 04:04.580
本质并没有改变

04:04.580 --> 04:06.820
都是成员数写

04:06.820 --> 04:08.660
当然如果说你方法的话

04:08.660 --> 04:09.700
方法也是一样

04:09.700 --> 04:12.380
比方说我们这里有一个方法

04:12.380 --> 04:12.860
方法

04:12.860 --> 04:14.140
say hello

04:14.140 --> 04:16.300
有这么一个方法

04:16.300 --> 04:18.180
那么我们这里写

04:18.180 --> 04:19.620
写了这么一个方法

04:19.620 --> 04:20.020
方法呢

04:20.020 --> 04:21.780
我们这里输出

04:21.780 --> 04:23.780
输出

04:25.780 --> 04:27.780
login id

04:27.780 --> 04:31.780
就是zs.login id

04:31.780 --> 04:34.780
假设我们用这样的方式来写吧

04:34.780 --> 04:36.780
nickname

04:36.780 --> 04:39.780
就是zs.nickname

04:39.780 --> 04:41.780
比方说我们假设有这么一个方法

04:41.780 --> 04:42.780
那么这个方法呢

04:42.780 --> 04:43.780
我们要放到这

04:43.780 --> 04:44.780
say hello

04:44.780 --> 04:45.780
我们也可以用这种方式来写

04:45.780 --> 04:46.780
对吧

04:46.780 --> 04:47.780
直接写就行了

04:47.780 --> 04:48.780
那么这样子一写的话

04:48.780 --> 04:49.780
就相当于是

04:49.780 --> 04:50.780
say hello

04:50.780 --> 04:51.780
是一样的

04:51.780 --> 04:52.780
当然呢

04:52.780 --> 04:53.780
我知道你的意思

04:53.780 --> 04:54.780
当然你可以把这个东西

04:54.780 --> 04:55.780
直接写下来

04:55.780 --> 04:56.780
没问题

04:56.780 --> 04:57.780
我只是举这么个例子

04:57.780 --> 04:58.780
方法跟这个属性呢

04:58.780 --> 04:59.780
本质上是一样的

04:59.780 --> 05:01.780
也可以提供这么一种书写

05:01.780 --> 05:03.780
那么我们来试一下吧

05:03.780 --> 05:05.780
调一下方法

05:05.780 --> 05:07.780
const u

05:07.780 --> 05:09.780
u say hello

05:09.780 --> 05:14.250
看一下是不一样的

05:14.250 --> 05:15.250
对吧

05:15.250 --> 05:16.250
我说到这儿

05:16.250 --> 05:17.250
就顺便说一句

05:17.250 --> 05:18.250
这里能不能写箭头函说

05:18.250 --> 05:19.250
能不能写箭头函说

05:19.250 --> 05:21.250
上一课我们说到的箭头函说

05:21.250 --> 05:22.250
能不能写

05:22.250 --> 05:23.250
不能写

05:23.250 --> 05:24.250
不能写

05:24.250 --> 05:25.250
因为这种箭头函写的话

05:25.250 --> 05:26.250
它这里边没有Z式的

05:26.250 --> 05:28.250
没有Z式用的就是外边的Z式

05:28.250 --> 05:30.250
就是调用这个函数的Z式

05:30.250 --> 05:31.250
调用这个函数是直接调用的

05:31.250 --> 05:33.250
咱们Z式直向全球对向Window

05:33.250 --> 05:35.250
搞清楚

05:35.250 --> 05:37.250
这是关于第一个

05:37.250 --> 05:38.250
成员书写

05:38.250 --> 05:40.250
第二个是关于方法书写

05:40.250 --> 05:43.690
我们这里复制一个吧

05:43.690 --> 05:44.690
关于方法书写

05:44.690 --> 05:45.690
就是什么意思呢

05:45.690 --> 05:49.690
就是在对象字面量

05:49.690 --> 05:51.690
初始化的时候

05:51.690 --> 05:54.690
就是你还写一个对象字面量的时候

05:54.690 --> 05:58.690
方法可以省略

05:58.690 --> 05:59.690
省略什么呢

05:59.690 --> 06:03.690
省略冒号和方形关键字

06:03.690 --> 06:05.690
这样子写起来更加简洁一点

06:05.690 --> 06:06.690
仅此而已

06:06.690 --> 06:07.690
没有别的意思了

06:07.690 --> 06:09.690
比方说我们举个例子

06:09.690 --> 06:11.690
这里有个对象

06:11.690 --> 06:12.690
有个用户对象

06:12.690 --> 06:14.690
这是个对象字面量

06:14.690 --> 06:17.690
locking ID

06:17.690 --> 06:19.690
就这样写吧

06:19.690 --> 06:20.690
对象

06:20.690 --> 06:25.690
first name

06:25.690 --> 06:27.690
等于基层

06:27.690 --> 06:29.690
然后写错了是吧

06:29.690 --> 06:32.510
基层

06:32.510 --> 06:36.510
然后A级等于100

06:36.510 --> 06:38.510
然后这里有个函数

06:38.510 --> 06:39.510
say hello

06:39.510 --> 06:40.510
以前我们咋写的

06:40.510 --> 06:41.510
是不是这样子写的

06:41.510 --> 06:42.510
对吧

06:42.510 --> 06:43.510
这样子写的

06:43.510 --> 06:44.510
输出啥

06:44.510 --> 06:45.510
name.a级

06:45.510 --> 06:46.510
name.a级

06:46.510 --> 06:47.510
user say hello

06:47.510 --> 06:48.510
这个没什么好说的

06:48.510 --> 06:50.510
这个没什么好说的

06:50.510 --> 06:51.510
主要是说

06:51.510 --> 06:52.510
就是这个方法

06:52.510 --> 06:54.510
你在写对象字面量的时候

06:54.510 --> 06:55.510
如果说遇到了方法

06:55.510 --> 06:56.510
以前得这么写

06:56.510 --> 06:57.510
那么这么写的

06:57.510 --> 06:58.510
稍微有点麻烦

06:58.510 --> 06:59.510
它给你减化了

06:59.510 --> 07:00.510
你把冒号去掉

07:00.510 --> 07:01.510
方形去掉

07:01.510 --> 07:02.510
直接这样子写

07:02.510 --> 07:03.510
一点区别都没有

07:03.510 --> 07:07.510
它就相当于是你这样子写的

07:07.510 --> 07:08.510
它不是建筒函说

07:08.510 --> 07:09.510
不是建筒函说

07:09.510 --> 07:10.510
它就像

07:10.510 --> 07:11.510
像

07:11.510 --> 07:12.510
像

07:12.510 --> 07:13.510
像

07:13.510 --> 07:14.510
像

07:14.510 --> 07:15.510
像

07:15.510 --> 07:16.510
像

07:16.510 --> 07:17.510
像

07:17.510 --> 07:19.510
它是相当于是这种写法

07:19.510 --> 07:20.510
两个是等效的

07:20.510 --> 07:22.510
它就是提供了一个方法

07:22.510 --> 07:23.510
数写

07:23.510 --> 07:24.510
方法的减写

07:24.510 --> 07:25.510
也是一个愚法堂

07:25.510 --> 07:26.510
让你写写的

07:26.510 --> 07:27.510
更加轻松一点

07:27.510 --> 07:29.510
本质并没有发生什么变化

07:29.510 --> 07:31.510
这关于这一块

07:31.510 --> 07:32.510
好

07:32.510 --> 07:33.510
下面这个

07:33.510 --> 07:34.510
下面这个就是

07:34.510 --> 07:36.510
做了一个功能性的改进

07:36.510 --> 07:38.510
以前是很难做到的

07:38.510 --> 07:40.510
计算属性名

07:40.510 --> 07:42.510
就是有的时候

07:42.510 --> 07:44.510
初始化

07:44.510 --> 07:46.510
初始化对象时

07:47.510 --> 07:49.510
某些属性名

07:49.510 --> 07:51.510
某些属性名

07:51.510 --> 07:53.510
可能来自于

07:53.510 --> 07:56.510
某个表达式的值

07:57.510 --> 07:58.510
那么

07:58.510 --> 08:00.510
在过去是很难处理的

08:00.510 --> 08:02.510
在ES6中

08:02.510 --> 08:04.510
可以使用

08:04.510 --> 08:06.510
综扩号

08:06.510 --> 08:08.510
来表示

08:08.510 --> 08:10.510
该属性名是通过

08:10.510 --> 08:12.510
计算得到的

08:12.510 --> 08:14.510
这个说起来比较抽象

08:14.510 --> 08:15.510
举个例子

08:15.510 --> 08:19.590
举个啥例子呢

08:19.590 --> 08:21.590
就下举个例子

08:21.590 --> 08:23.590
比方说

08:24.590 --> 08:26.590
这里除了有这些属性之外

08:26.590 --> 08:28.590
我们还有一个

08:28.590 --> 08:30.590
我们属性名

08:30.590 --> 08:32.590
是存到一个变量里面的

08:32.590 --> 08:34.590
proper1

08:34.590 --> 08:36.590
存到一个变量里面的

08:36.590 --> 08:38.590
属性名2A级

08:38.590 --> 08:40.590
存到一个变量里面的

08:40.590 --> 08:42.590
属性名3proper

08:42.590 --> 08:44.590
是存

08:44.590 --> 08:46.590
存到一个变量里面的

08:46.590 --> 08:47.590
那么也就是说我们

08:47.590 --> 08:49.590
第一个对象的属性名

08:49.590 --> 08:50.590
我都不知道是啥

08:50.590 --> 08:51.590
它来自于这个变量

08:51.590 --> 08:52.590
这个变量是啥我不知道

08:52.590 --> 08:53.590
可能是用户输入的

08:53.590 --> 08:54.590
也可能是来自于

08:54.590 --> 08:55.590
其他一个函数返回的结果

08:55.590 --> 08:57.590
我也不知道它属性名是啥

08:57.590 --> 08:59.590
那么以前这怎么办呢

08:59.590 --> 09:01.590
以前我们只能用这种方式

09:01.590 --> 09:02.590
这里写两个

09:02.590 --> 09:04.590
如果你属性名比较特殊的话

09:04.590 --> 09:06.590
写两个双引号

09:06.590 --> 09:08.590
这里写可以写一些特殊的名字

09:08.590 --> 09:09.590
可以加空格

09:09.590 --> 09:10.590
也特殊的名字都可以

09:10.590 --> 09:12.590
这个是没有什么问题的

09:12.590 --> 09:14.590
说以前是做不到这种情况的

09:14.590 --> 09:15.590
就是说你的属性名

09:15.590 --> 09:16.590
来自于一个表达式

09:16.590 --> 09:17.590
来自于一个变量

09:17.590 --> 09:18.590
它是做不到的

09:18.590 --> 09:20.590
以前是没法在初识化这里搞定的

09:20.590 --> 09:21.590
以前只能怎么写呢

09:21.590 --> 09:22.590
以前只能这样子写

09:22.590 --> 09:24.590
我先把这个油热对象创建好

09:24.590 --> 09:26.590
然后油热proper

09:26.590 --> 09:27.590
以这样子来写

09:27.590 --> 09:28.590
对吧

09:28.590 --> 09:29.590
等于基层

09:32.590 --> 09:33.590
我觉得以前

09:34.590 --> 09:35.590
打过它的名字

09:35.590 --> 09:36.590
是不是以前在这样子写

09:36.590 --> 09:37.590
对吧

09:37.590 --> 09:39.590
把这个表达式的值放这

09:39.590 --> 09:40.590
然后把这个表达式的值

09:40.590 --> 09:41.590
作为属性名

09:41.590 --> 09:43.590
然后给这个属性复制

09:43.590 --> 09:44.590
以前是不是得这样子写

09:44.590 --> 09:45.590
对吧

09:45.590 --> 09:46.590
那么现在呢

09:47.590 --> 09:48.590
现在不需要了

09:48.590 --> 09:49.590
现在在初识化的时候

09:49.590 --> 09:50.590
就可以搞定了

09:50.590 --> 09:51.590
怎么做呢

09:51.590 --> 09:52.590
其他两个综合号

09:52.590 --> 09:53.590
表示的是

09:53.590 --> 09:54.590
这个属性这里呢

09:54.590 --> 09:55.590
是来自于一个表达式

09:55.590 --> 09:56.590
proper

09:56.590 --> 09:58.590
那么现在它的意思是什么呢

09:58.590 --> 09:59.590
意思就是说

09:59.590 --> 10:01.590
把这个综合号里边的表达式的

10:01.590 --> 10:03.590
值作为属性名

10:03.590 --> 10:04.590
这个表达式是一个变量

10:04.590 --> 10:05.590
这个变量

10:05.590 --> 10:06.590
也可以是别的东西

10:06.590 --> 10:08.590
也可以是任何东西

10:08.590 --> 10:09.590
只要是表达式就行

10:09.590 --> 10:11.590
那么表达式的值放这

10:11.590 --> 10:12.590
表达式的值目前是name

10:12.590 --> 10:14.590
那么相当于是加了个name属性

10:14.590 --> 10:16.590
这个A级是不是可以这样子写

10:16.590 --> 10:17.590
proper2

10:17.590 --> 10:18.590
对吧

10:18.590 --> 10:19.590
这里呢

10:19.590 --> 10:20.590
proper3

10:20.590 --> 10:21.590
对不对

10:21.590 --> 10:22.590
是不是可以这样子写

10:22.590 --> 10:23.590
那么这里呢

10:23.590 --> 10:24.590
z

10:24.590 --> 10:25.590
z是什么呢

10:25.590 --> 10:26.590
proper1

10:26.590 --> 10:27.590
对吧

10:27.590 --> 10:28.590
这里呢

10:28.590 --> 10:30.590
z是proper2

10:30.590 --> 10:31.590
对不对

10:31.590 --> 10:32.590
那么这里呢

10:32.590 --> 10:33.590
用什么呢

10:33.590 --> 10:34.590
proper3

10:34.590 --> 10:35.590
那么这里的代码

10:35.590 --> 10:36.590
跟以前是一样的

10:36.590 --> 10:38.590
这里的代码跟以前是一样的

10:38.590 --> 10:40.590
就这个处境初始化的时候

10:40.590 --> 10:41.590
你是可以这样子写的

10:41.590 --> 10:42.590
这叫计算属性名

10:42.590 --> 10:43.590
这个属性名是通过

10:43.590 --> 10:45.590
一个表达式算出来的

10:45.590 --> 10:46.590
保存

10:46.590 --> 10:47.590
你看一下

10:47.590 --> 10:48.590
是不是这样子

10:48.590 --> 10:49.590
一样的

10:49.590 --> 10:50.590
一样的效果

10:50.590 --> 10:51.590
那么现在我们输出U字

10:51.590 --> 10:52.590
输出U字

10:52.590 --> 10:53.590
你看一下

10:53.590 --> 10:54.590
它里边的属性名

10:54.590 --> 10:55.590
nameA级

10:55.590 --> 10:56.590
那么之后

10:56.590 --> 10:57.590
我们要改它的属性名

10:57.590 --> 10:58.590
随便改就行了

10:58.590 --> 10:59.590
随便改

10:59.590 --> 11:00.590
那么你看

11:00.590 --> 11:01.590
所以可以改

11:01.590 --> 11:02.590
更改属性名了

11:02.590 --> 11:03.590
对吧

11:03.590 --> 11:04.590
这是关于这一块

11:04.590 --> 11:05.590
计算属性名

11:05.590 --> 11:06.590
其他就没啥了

11:06.590 --> 11:08.590
特别特别简单的一块知识

11:08.590 --> 11:09.590
这个东西还蛮实用的

11:09.590 --> 11:10.590
我跟你说

11:10.590 --> 11:12.590
在某些场地里面还蛮实用的

11:12.590 --> 11:13.590
好

11:13.590 --> 11:15.590
下去稍微的练一下

11:15.590 --> 11:16.590
稍微的把写一遍就行了

11:16.590 --> 11:17.590
这些东西也很简单

