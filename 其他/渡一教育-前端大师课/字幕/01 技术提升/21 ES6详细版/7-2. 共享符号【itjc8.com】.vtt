WEBVTT

00:00.430 --> 00:06.930
前边让你学了这个普通符号之后呢 你再学共享符号就特别特别简单了啊

00:06.930 --> 00:09.830
共享符号它是用来解决一个什么样的问题呢

00:09.830 --> 00:13.730
就是说有的时候呢 比方说像我们上节课讲的

00:13.730 --> 00:18.430
你创立了符号在一个什么在一个函数里面对吧

00:18.430 --> 00:20.130
所以外面访问不到那个符号

00:20.130 --> 00:23.430
哎 那是有的时候呢 我又希望外面访问到这个符号

00:23.430 --> 00:26.030
那么我们又没有什么更加简洁的方式啊

00:26.030 --> 00:29.430
当然我们上节课介绍过通过Objects GetOmProperty

00:30.230 --> 00:32.230
symbols 对吧 可以得到符号

00:32.230 --> 00:33.830
一个对象里面的所有符号

00:33.830 --> 00:36.730
那我们有没有什么通过一个更加简洁的方式

00:36.730 --> 00:38.230
能够得到同一个符号呢

00:38.230 --> 00:40.530
这就是共享符号要解决的问题啊

00:40.530 --> 00:46.330
共享符号呢 它是根据某个符号名称

00:46.330 --> 00:49.030
或者也叫做符号描述啊 都是

00:49.030 --> 00:55.130
根据符号名称得到 能够得到同一个符号

00:55.130 --> 00:58.230
我们之前说通过symbol得到的是完全不一样的符号 对吧

00:58.230 --> 01:00.730
那么symbol里面呢给提供了一种方式

01:00.730 --> 01:03.230
能够让你得到同一个符号啊

01:03.230 --> 01:04.530
随便下举个例子吧

01:04.530 --> 01:07.130
这个例子呢我们目前是确实是举不出来啊

01:07.130 --> 01:09.530
将来呢可能在某些非常非常特殊的场景下面

01:09.530 --> 01:11.330
可能会有一些用处

01:11.330 --> 01:13.330
比方说啊我们这里呢有一个符号

01:14.930 --> 01:15.730
有一个符号

01:18.930 --> 01:20.830
叫symbol嘛symbol

01:20.830 --> 01:24.530
我们通过symbol 这里呢也不写名称了啊

01:24.530 --> 01:26.030
就写个名称吧写个名称吧

01:28.530 --> 01:30.230
啊不写名称 写个名称吧

01:30.230 --> 01:32.930
abc啊就随便下写个名称啊写个符号

01:32.930 --> 01:35.330
然后呢我们这里呢有两个对象

01:35.330 --> 01:40.330
obj1 abc

01:40.330 --> 01:43.730
好第三个第三个呢我们是用符号啊

01:43.730 --> 01:45.330
好然后呢还有一个obj2

01:46.830 --> 01:54.730
是不是可以在这里啊比方说absymbol

01:54.730 --> 01:57.130
是不是现在就可以用使用的是同一个符号了

01:57.130 --> 01:58.130
对不对

01:58.230 --> 01:59.630
现在是不是用了同一个符号

01:59.630 --> 02:01.430
对吧我们只创建了一个符号嘛

02:01.430 --> 02:02.430
那能不能在两个对象用

02:02.430 --> 02:03.530
里边用同一个符号呢

02:03.530 --> 02:05.230
当然没有任何问题

02:05.230 --> 02:06.130
有啥问题呢

02:06.130 --> 02:06.830
有啥问题呢

02:06.830 --> 02:08.130
这两个对象互不干擾对吧

02:08.130 --> 02:09.930
他们各自是各自的属性啊

02:09.930 --> 02:11.630
是没有任何问题的啊

02:11.630 --> 02:13.830
先我们输出一下吧obj1 obj2

02:15.030 --> 02:15.530
obj2

02:16.230 --> 02:17.430
但是呢这样的场景呢

02:17.430 --> 02:19.030
你共享一个符号呢

02:19.030 --> 02:20.330
倒是没有什么问题

02:20.330 --> 02:21.830
只不过呢你潜力条件是

02:21.830 --> 02:23.530
你一个代码的得放到一块

02:23.530 --> 02:24.630
你得放到一块

02:24.630 --> 02:25.430
也就是两个代码呢

02:25.430 --> 02:27.630
都能够访问到同一个符号

02:27.730 --> 02:29.730
现在我们来输出一下这个obj

02:30.730 --> 02:31.730
输出一下这个

02:33.930 --> 02:35.430
当然就没这个怎么输出

02:35.430 --> 02:36.330
这个怎么输出

02:36.330 --> 02:37.130
没法输出对吧

02:37.130 --> 02:39.130
反正总之两个用的是同一个符号

02:39.130 --> 02:40.330
用的是同一个符号

02:41.630 --> 02:42.930
但是这个潜力条件呢

02:42.930 --> 02:44.130
你们代码得放到一块

02:44.930 --> 02:46.930
那如果说这个代码是一个文件

02:46.930 --> 02:49.530
或者是隔了108千里

02:49.530 --> 02:50.230
然后这个代码呢

02:50.230 --> 02:51.130
又放了另外一个文件

02:51.130 --> 02:52.330
或者隔了108千里

02:52.630 --> 02:54.730
你还能那么轻松的去得到这个变量吗

02:54.730 --> 02:56.730
或者这个变量是在一个函数里边的

02:56.830 --> 02:57.230
对吧

02:57.230 --> 02:58.830
那这个函数外面还能得到变量吗

02:58.830 --> 03:00.030
是拿不到了

03:00.030 --> 03:00.830
对不对

03:00.830 --> 03:01.830
面对这样的场景

03:01.830 --> 03:04.530
你有同时希望用同一个符号的话

03:04.530 --> 03:05.830
那怎么办

03:05.830 --> 03:06.230
怎么办

03:06.230 --> 03:07.730
他就提供了这个共享符号

03:07.730 --> 03:08.830
共享符号怎么做呢

03:08.830 --> 03:10.830
特别特别简单

03:10.830 --> 03:15.530
就是通过symbol symbol.4

03:16.930 --> 03:17.730
这里边呢

03:17.730 --> 03:18.830
参数可写可不写

03:19.630 --> 03:20.230
不写的话

03:20.230 --> 03:21.630
那就是全部一样的

03:21.630 --> 03:23.530
就是符号名

03:23.530 --> 03:24.130
符号名

03:24.130 --> 03:25.430
也就是符号描述

03:25.530 --> 03:27.530
或者叫做符号描述

03:27.530 --> 03:28.430
得到共享符号

03:29.430 --> 03:31.730
获取共享符号

03:33.630 --> 03:36.130
你只要符号名是一致的

03:36.130 --> 03:37.230
符号描述是一致的

03:37.230 --> 03:37.530
ok

03:37.530 --> 03:39.430
你得到符号就一定是一致的

03:39.430 --> 03:41.130
他就不是通过symbol来创建了

03:41.130 --> 03:43.530
通过symbol创建的符号一定是唯一的

03:43.530 --> 03:44.930
一定是一个全新的符号

03:44.930 --> 03:47.130
但是你通过symbol4

03:47.130 --> 03:48.230
这个静态函数

03:48.230 --> 03:48.430
对吧

03:48.430 --> 03:49.530
它是一个函数

03:49.530 --> 03:51.230
它里边一个静态成员4

03:51.230 --> 03:52.930
那么这个成员里边呢

03:52.930 --> 03:54.830
就是函数里边的一个静态成员

03:54.830 --> 03:55.830
那么通过它呢

03:55.830 --> 03:57.330
得到符号了就是共享符号

03:57.330 --> 03:57.630
来吧

03:57.630 --> 03:59.130
我们来看一下

03:59.130 --> 04:00.830
我们这里呢

04:00.830 --> 04:04.040
比方说我们可以这样子写

04:04.040 --> 04:05.840
symbol1

04:05.840 --> 04:08.040
我们用symbol4

04:10.040 --> 04:11.140
4

04:11.140 --> 04:11.940
这个符号

04:11.940 --> 04:13.940
这个名字是必须要写的

04:13.940 --> 04:14.240
不行

04:14.240 --> 04:15.640
我看一下它报措

04:16.940 --> 04:17.240
不行

04:17.240 --> 04:19.040
好像也不会报措

04:19.040 --> 04:20.140
也不会报措

04:20.140 --> 04:20.840
那么这里呢

04:20.840 --> 04:21.640
我们试一下吧

04:21.640 --> 04:22.640
试一下吧

04:22.640 --> 04:23.740
一般我们都要写名字

04:23.740 --> 04:26.040
共享符号本身用的比较少一点

04:26.140 --> 04:27.040
试一下

04:28.040 --> 04:29.040
试一下

04:29.040 --> 04:30.340
不写也不会报措

04:30.340 --> 04:31.440
我们来输出一下

04:31.440 --> 04:34.940
symbol1是不是等于symbol2呢

04:34.940 --> 04:36.140
是不是等于是不是true

04:36.140 --> 04:36.540
对吧

04:36.540 --> 04:37.840
因为它里边都没有写名字

04:37.840 --> 04:38.540
都没有写名字

04:38.540 --> 04:40.240
使用的是同一个符号

04:40.240 --> 04:41.040
那如果说你的名

04:41.040 --> 04:42.740
当然都不写名字

04:42.740 --> 04:44.140
这种情况比较少一点

04:44.140 --> 04:46.640
我们如果说写一个相同的名字呢

04:46.640 --> 04:48.240
因为看到这两个也为true

04:48.240 --> 04:49.940
这两个符号也为true

04:49.940 --> 04:51.740
他们也是一个相同的符号

04:52.940 --> 04:54.040
所以基于这一点呢

04:54.040 --> 04:57.140
我们如果说你某些时候

04:57.140 --> 04:59.040
你不想做私有属性

04:59.040 --> 05:00.440
你不想做私有成员

05:00.440 --> 05:03.040
你就想让别人访问

05:03.040 --> 05:03.740
但是同时呢

05:03.740 --> 05:05.740
由于某些特殊原因

05:05.740 --> 05:07.240
你必须要使用符号

05:07.240 --> 05:07.740
那么这个时候

05:07.740 --> 05:09.540
你就可以使用共享符号了

05:09.540 --> 05:10.540
比方说我写一个例子

05:10.540 --> 05:12.940
我就写下面下举个例子

05:12.940 --> 05:14.740
比方说我们这个obj

05:14.740 --> 05:17.740
obj里边我们这里直接写个符号

05:17.740 --> 05:19.340
symbol

05:19.340 --> 05:19.640
symbol

05:19.640 --> 05:20.940
我们直接可以把表拉式写到这

05:20.940 --> 05:21.540
怎么不行呢

05:21.540 --> 05:22.040
为什么不行

05:22.140 --> 05:24.140
这里可以写任何的解释表拉式

05:24.140 --> 05:26.340
我们这里写个sy

05:26.340 --> 05:27.440
这个属性

05:27.440 --> 05:28.140
那么现在呢

05:28.140 --> 05:29.840
我要访问obj里边的这个属性

05:29.840 --> 05:30.640
是不是访问不到

05:30.640 --> 05:32.340
如果说按到以前的动作法

05:32.340 --> 05:33.240
如果用这种动作法的话

05:33.240 --> 05:34.840
是比永远访问不到

05:34.840 --> 05:36.840
你怎么样都得到这个符号

05:36.840 --> 05:38.540
但是我们现在用共享符号就可以了

05:38.540 --> 05:40.940
你只要保证这个符号名是功率

05:40.940 --> 05:43.740
只要保证符号名没问题就行了

05:43.740 --> 05:45.440
对只要保证符号名相同

05:45.440 --> 05:47.340
那么还用的就是同一个符号

05:47.340 --> 05:48.640
sy

05:48.640 --> 05:49.140
你看看

05:49.140 --> 05:51.940
这样子我们用这个符号来作为属性

05:52.040 --> 05:53.040
因为它是共享符号

05:53.040 --> 05:55.240
所以说它跟这个符号是不一样的

05:55.240 --> 05:55.640
对吧

05:55.640 --> 05:56.840
这样子就可以读出来了

05:56.840 --> 05:57.940
3

05:57.940 --> 05:59.140
这是共享符号

05:59.140 --> 06:00.640
其实共享符号它并不复杂

06:00.640 --> 06:01.940
它的实现原理呢

06:01.940 --> 06:03.640
如果说你让你自己带实现的话

06:03.640 --> 06:05.940
你都可以非常轻松的来实现这个共享符号

06:05.940 --> 06:07.640
你看看我给它实现一个吧

06:07.640 --> 06:09.040
实现个共享符号来吧

06:10.140 --> 06:11.740
我们自己写个函数

06:11.740 --> 06:13.840
叫做symbol

06:13.840 --> 06:15.040
但是我不能用它一个名字

06:15.040 --> 06:16.040
symbol4

06:16.040 --> 06:17.840
比方说我们用symbol4这么函数

06:17.840 --> 06:19.440
你给我一个内

06:19.440 --> 06:20.640
或者要description

06:20.740 --> 06:21.740
描述都可以

06:21.740 --> 06:23.540
我给你返回一个符号

06:23.540 --> 06:25.040
为了保证这个符号是共享的

06:25.040 --> 06:27.440
是不是我需要一个全局的东西

06:27.440 --> 06:28.040
对吧

06:28.040 --> 06:30.540
是不是我需要一个全局的东西

06:30.540 --> 06:32.140
我们这里呢

06:32.140 --> 06:33.140
这样子来

06:33.140 --> 06:35.940
我们这里写个symbol4

06:35.940 --> 06:36.740
写这么一个函数

06:36.740 --> 06:37.740
它等于什么呢

06:37.740 --> 06:39.840
它等于一个立即执行函数

06:39.840 --> 06:40.540
我们现在学了

06:40.540 --> 06:41.640
既然学了这个

06:43.040 --> 06:43.440
箭头函数

06:43.440 --> 06:45.040
我们就用箭头函数

06:45.040 --> 06:46.740
立即执行函数

06:46.740 --> 06:47.440
这个函数里边

06:47.440 --> 06:50.240
我们提供一个全局的global

06:50.240 --> 06:51.940
全局的一个对象

06:51.940 --> 06:53.640
就是全局的对象里边就记录了

06:53.640 --> 06:56.640
记录一下有哪些共享符号

06:56.640 --> 06:58.840
主要是用于记录

06:58.840 --> 07:04.140
用于记录有哪些共享符号

07:04.140 --> 07:04.640
来吧

07:04.640 --> 07:05.840
我们这里模拟

07:05.840 --> 07:07.440
模拟那个symbol4来实现

07:07.440 --> 07:08.540
我们这里返回啥呢

07:08.540 --> 07:10.840
返回一个函数

07:10.840 --> 07:12.040
返回一个函数

07:12.040 --> 07:13.540
这个函数就是symbol4的函数

07:13.540 --> 07:15.440
你给我一个符号名字

07:15.440 --> 07:16.440
或者叫符号描述

07:16.440 --> 07:17.940
我给你返回一个符号

07:17.940 --> 07:19.140
那这里我们怎么办呢

07:19.140 --> 07:20.640
我就判断一下呗

07:20.640 --> 07:23.040
如果说global里边

07:23.040 --> 07:26.240
global里边有这个什么呢

07:26.240 --> 07:28.340
有这个name属性

07:28.340 --> 07:31.440
我们把个name属性的值作为它的属性名

07:31.440 --> 07:32.640
把name属性的值作为

07:32.640 --> 07:33.440
因为它是字幕创

07:33.440 --> 07:33.940
对吧

07:33.940 --> 07:34.940
这是符号名字

07:34.940 --> 07:37.040
我们把这个名字作为属性名

07:37.040 --> 07:38.340
看一下有没有这个属性

07:38.340 --> 07:39.440
一开始空的肯定没有

07:39.440 --> 07:39.840
对吧

07:39.840 --> 07:40.740
那如果有的话

07:40.740 --> 07:42.340
我直接给你返回这个

07:42.340 --> 07:43.940
我把这个符号就记录到哪了

07:43.940 --> 07:46.540
是不是记录到这个对象里面去了

07:46.540 --> 07:47.840
是不是记录到对象里面去了

07:47.940 --> 07:49.440
我们这里能把这个对象

07:49.440 --> 07:51.940
我们一会把这个对象输出

07:51.940 --> 07:54.440
一会把这个对象输出

07:54.440 --> 07:55.940
如果说

07:55.940 --> 07:58.140
或者我们这样子写吧

07:58.140 --> 07:59.040
看怎么写

07:59.040 --> 08:00.740
才方便输出

08:00.740 --> 08:03.540
如果说你没有这个属性名

08:03.540 --> 08:06.640
如果说你没有这个属性名

08:06.640 --> 08:08.040
如果你没有的话

08:08.040 --> 08:10.540
我是不给你加上一个属性

08:10.540 --> 08:12.640
给你加上一个symbol

08:12.640 --> 08:14.040
对不对

08:14.040 --> 08:14.440
对吧

08:14.440 --> 08:16.940
所以给你加上一个symbol

08:16.940 --> 08:19.940
然后最后输出global

08:20.940 --> 08:23.140
我们这里输出global

08:23.140 --> 08:24.940
你看一下吧

08:24.940 --> 08:26.540
我就做出一个共享符号的代码

08:26.540 --> 08:28.240
就这么几句话搞定的

08:28.240 --> 08:29.240
来吧

08:29.240 --> 08:30.840
symbol1

08:30.840 --> 08:33.340
symbol4

08:35.710 --> 08:36.910
先看一下

08:36.910 --> 08:39.110
先这里再输出一个

08:39.110 --> 08:41.710
比方说abc

08:41.710 --> 08:43.610
看一下

08:43.610 --> 08:44.810
我们雕用这个函数

08:44.810 --> 08:47.110
这个函数是在运行它

08:47.110 --> 08:49.710
一开始它发现这个对象里面是空的

08:49.710 --> 08:49.910
对吧

08:49.910 --> 08:50.910
一开始对象里面是空的

08:50.910 --> 08:51.910
啥都没有

08:51.910 --> 08:53.410
于是它这个判断能不能进

08:53.410 --> 08:54.310
是不是能进

08:54.310 --> 08:55.310
它没有这个属性

08:55.310 --> 08:55.510
对吧

08:55.510 --> 08:56.410
是不是没有这个属性

08:56.410 --> 08:57.210
它能进

08:57.210 --> 08:57.910
能进的话

08:57.910 --> 08:59.410
我就把这个属性名

08:59.410 --> 09:00.210
就是我给你传的啥

09:00.210 --> 09:01.110
我给你传的abc

09:01.110 --> 09:01.610
对吧

09:01.610 --> 09:02.310
我给你传的abc

09:02.310 --> 09:04.910
是不是我给你加了一个属性名叫abc

09:04.910 --> 09:06.310
abc它的属性值

09:06.310 --> 09:07.110
就是一个符号

09:07.110 --> 09:07.510
是吧

09:07.510 --> 09:09.710
存到对象里面去了

09:09.710 --> 09:10.510
能看到吗

09:10.510 --> 09:11.710
存到对象去了

09:11.710 --> 09:13.310
然后再把这个东西返回

09:13.310 --> 09:14.810
返回过后是不是就是个符号

09:14.810 --> 09:16.610
我返回了就是这个东西

09:16.610 --> 09:18.810
好 如果说我第二次调用

09:18.810 --> 09:20.210
第二次调用

09:20.210 --> 09:21.510
symbol2

09:21.510 --> 09:22.710
symbol4

09:22.710 --> 09:23.910
还是abc

09:23.910 --> 09:24.910
你看一下

09:24.910 --> 09:25.910
还是abc的话

09:25.910 --> 09:26.710
你看

09:26.710 --> 09:28.410
这是第二次调用的输出

09:28.410 --> 09:30.310
第二次调用的话

09:30.310 --> 09:32.510
由于对象里面是不是已经有这个abc了

09:32.510 --> 09:33.810
有这个属性名了

09:33.810 --> 09:35.810
那么它发现这个判断是不是进不去了

09:35.810 --> 09:37.810
因此它不会再重新创建符号

09:37.810 --> 09:39.310
它直接把个名字给你返回

09:39.310 --> 09:41.410
因此我们这里输出

09:41.410 --> 09:43.610
这个符号是不是等于

09:43.610 --> 09:44.410
symbol2

09:44.410 --> 09:45.410
是不是等于这个符号的

09:45.410 --> 09:46.410
你看是不是q

09:46.410 --> 09:47.410
q这么简单

09:47.410 --> 09:48.910
代码实现很简单的

09:48.910 --> 09:50.210
其实它内部

09:50.210 --> 09:51.310
symbol4这个函数

09:51.310 --> 09:53.210
内部它其实就是做了这么一样设计

09:53.210 --> 09:56.110
给它做了一个注册表一样的东西

09:56.110 --> 09:58.210
那么如果说你第一次用的时候

09:58.210 --> 09:59.110
没有这个符号

09:59.110 --> 10:00.610
OK 我给你创建一个放在这

10:00.610 --> 10:01.810
放在这个表格里边

10:01.810 --> 10:02.710
你下次再用的时候

10:02.710 --> 10:04.310
我就直接把这个表格里边取出

10:04.310 --> 10:05.710
给力就行了

10:05.710 --> 10:07.210
这就是共享符号

