WEBVTT

00:00.000 --> 00:03.000
好 这些课呢咱们来学习Promise的链式处理

00:03.000 --> 00:06.000
Promise的链式处理呢应该算是Promise里面

00:06.000 --> 00:08.000
最复杂的一块内容了

00:08.000 --> 00:13.000
这一块内容呢也是面试题考的比较多的部分

00:13.000 --> 00:15.000
面试题如果说考Promise

00:15.000 --> 00:18.000
基本上一定是可以考Promise的

00:18.000 --> 00:21.000
如果说考Promise的话考的一些比试题最多的

00:21.000 --> 00:24.000
也就是这个链式处理

00:24.000 --> 00:26.000
链式处理里面有很多的规则

00:26.000 --> 00:29.000
但是这些规则呢其实我们在现实生活中都可以找到

00:29.000 --> 00:31.000
这么一个例子

00:31.000 --> 00:33.000
这里呢其实就有两张图

00:33.000 --> 00:35.000
上面这张图呢是我们上级课

00:35.000 --> 00:37.000
给大家放出来这么一张图

00:37.000 --> 00:38.000
就是咱们学开发啊

00:38.000 --> 00:41.000
可不多 特别是前端可真的不多

00:41.000 --> 00:43.000
这是一个可

00:43.000 --> 00:45.000
我们同学们加油吧 把它搞定

00:45.000 --> 00:47.000
多花点时间把它搞定就完事了

00:47.000 --> 00:49.000
你后面就再也不用怕它了

00:49.000 --> 00:51.000
第一张图呢是我们上级课的图

00:51.000 --> 00:53.000
对吧 这是单个Promise对象

00:53.000 --> 00:54.000
咱们上级课学过了

00:54.000 --> 00:56.000
如何去创建一个Promise对象

00:56.000 --> 00:58.000
如何去根据它的状态

00:58.000 --> 01:00.000
来做一些进一步的处理

01:00.000 --> 01:02.000
这就是我们上级课的指示

01:02.000 --> 01:04.000
上级课这张图啊大家一定要印到

01:04.000 --> 01:06.000
印到牢海里边

01:06.000 --> 01:08.000
时间我是给大家留充足的

01:08.000 --> 01:10.000
我希望了通过这

01:10.000 --> 01:12.000
呃 同学们

01:12.000 --> 01:14.000
呃 下来过后好一定要好好地把他理解清楚

01:14.000 --> 01:16.000
这张图

01:16.000 --> 01:18.000
大家已经在牢海里边要形成这么一张图

01:18.000 --> 01:20.000
没事的时候呢多去过一步

01:20.000 --> 01:22.000
看单个Promise对象是怎么去

01:22.000 --> 01:24.000
确定状态的

01:24.000 --> 01:26.000
好 这里和我们进入这里和的指示啊

01:26.000 --> 01:28.000
首先我给大家补充一点点东西

01:28.000 --> 01:30.000
就是一个开启方法

01:30.000 --> 01:32.000
特别特别的简单

01:32.000 --> 01:34.000
什么意思呢

01:34.000 --> 01:36.000
就说我们之前啊做后续处理

01:36.000 --> 01:37.000
用的是什么方法

01:37.000 --> 01:39.000
用的是这个Zing方法对吧

01:39.000 --> 01:41.000
Zing方法里边是有两个参数

01:41.000 --> 01:43.000
第一个参数呢是成功的处理

01:43.000 --> 01:45.000
第二个参数呢是失败的处理

01:45.000 --> 01:47.000
那如果说你只想处理成功

01:47.000 --> 01:49.000
呃 只想处理失败

01:49.000 --> 01:50.000
不想处理成功呢

01:50.000 --> 01:52.000
成功无所谓你成功就成功没

01:52.000 --> 01:54.000
我只想处理失败

01:54.000 --> 01:56.000
像邓哥那个例子

01:56.000 --> 01:58.000
你同意了 同意了过后

01:58.000 --> 02:00.000
就没啥了对吧

02:00.000 --> 02:01.000
当然还是有些后续处理

02:01.000 --> 02:03.000
比方说吧 我就啥也不做了

02:03.000 --> 02:05.000
我就玩 我就发给短信玩一会儿

02:05.000 --> 02:07.000
啥也不做了

02:07.000 --> 02:08.000
那你失败了过后呢

02:08.000 --> 02:11.000
我得给下一位去发送消息

02:11.000 --> 02:13.000
对吧 所以说我只有失败的处理

02:13.000 --> 02:14.000
没有成功的处理

02:14.000 --> 02:16.000
那么你就可以写成这种格式

02:16.000 --> 02:18.000
成功呢 我传一个闹

02:18.000 --> 02:19.000
我啥也不传

02:19.000 --> 02:21.000
那么失败的时候呢

02:21.000 --> 02:23.000
我传一个回调函数来进行处理

02:23.000 --> 02:25.000
那么这种写法呢

02:25.000 --> 02:27.000
它可以等效于前面这种写法

02:27.000 --> 02:29.000
catch

02:29.000 --> 02:31.000
只传一个失败的处理

02:31.000 --> 02:33.000
是一样的 完全一样的

02:33.000 --> 02:34.000
我举个例子吧

02:34.000 --> 02:36.000
比方说 这里呢

02:36.000 --> 02:39.890
我给大家写上这么一个

02:39.890 --> 02:40.890
e2cs

02:40.890 --> 02:42.890
我们这里呢 写一个new promise

02:46.890 --> 02:48.890
比方说吧 我就直接失败

02:48.890 --> 02:50.890
直接失败 创建一个错误对象

02:51.890 --> 02:54.890
abc吧 随便给个消息

02:54.890 --> 02:55.890
我失败了

02:55.890 --> 02:57.890
我给一个失败的原因

02:57.890 --> 02:59.890
失败的原因呢 一般来说

02:59.890 --> 03:01.890
一般来说 是一个错误对象

03:01.890 --> 03:03.890
当然这里可以写任何东西

03:03.890 --> 03:05.890
失败了 这个任务是不是失败了

03:05.890 --> 03:07.890
那么这个任务失败了之后呢

03:07.890 --> 03:09.890
好 失败了之后呢

03:09.890 --> 03:11.890
我们需要对这个失败的

03:11.890 --> 03:12.890
做一些处理

03:12.890 --> 03:13.890
我们可以怎么写呢

03:13.890 --> 03:15.890
我们可以用这种方式

03:15.890 --> 03:16.890
v

03:16.890 --> 03:18.890
成功不处理

03:18.890 --> 03:19.890
失败了

03:19.890 --> 03:20.890
对失败的原因

03:20.890 --> 03:21.890
这就是失败的原因

03:21.890 --> 03:22.890
其实这个玩意

03:22.890 --> 03:23.890
跟这个玩意就是一样的

03:23.890 --> 03:24.890
它失败了过后

03:24.890 --> 03:26.890
它就会传过来 执行这个函数

03:26.890 --> 03:27.890
好 我们这里呢

03:27.890 --> 03:29.890
把这个失败的原因输出

03:29.890 --> 03:30.890
对吧 我们就

03:30.890 --> 03:31.890
把前面打两个字了

03:31.890 --> 03:32.890
失败了

03:32.890 --> 03:35.260
好 这里呢

03:35.260 --> 03:36.260
我们运行看一下

03:37.260 --> 03:38.260
是不是运行了

03:38.260 --> 03:39.260
失败了

03:39.260 --> 03:40.260
这个函数是不是得到运行的

03:40.260 --> 03:42.260
对吧 这就非常简单

03:42.260 --> 03:44.260
这里呢 我说一个点

03:44.260 --> 03:46.260
就是说

03:46.260 --> 03:48.260
如果说失败了

03:48.260 --> 03:50.260
你没有对失败进行处理

03:50.260 --> 03:51.260
比方说失败围传了是哪

03:51.260 --> 03:53.260
我相当于是没有处理的

03:53.260 --> 03:55.260
相当于没有写这个函数的

03:55.260 --> 03:58.260
如果说你没有对它进行失败处理的话

03:58.260 --> 04:00.260
它会给你报一个警告

04:00.260 --> 04:02.260
它说有一个未处理的promise

04:02.260 --> 04:03.260
这个promise失败了

04:03.260 --> 04:04.260
但是你没有处理

04:04.260 --> 04:06.260
它会给你报这么一个警告

04:06.260 --> 04:08.260
这是我们上集号好像遇到过

04:08.260 --> 04:11.260
当时我说的是后续给大家讲

04:11.260 --> 04:13.260
这些给大家补充一下

04:13.260 --> 04:15.260
那么这里我处理的过后

04:15.260 --> 04:17.260
它就不会有这个警告了

04:17.260 --> 04:18.260
刚才同学说

04:18.260 --> 04:19.260
还是爆出了吗

04:19.260 --> 04:21.260
这个爆出是因为我打印出来的

04:21.260 --> 04:22.260
如果说你没有打印出来的话

04:22.260 --> 04:23.260
那就看见了

04:23.260 --> 04:25.260
它只有一个失败

04:25.260 --> 04:26.260
这个错误呢

04:26.260 --> 04:28.260
我把错误对象打印出来的

04:28.260 --> 04:30.260
这就是咱们那个Zing方法

04:30.260 --> 04:31.260
可以处理成功

04:31.260 --> 04:32.260
也可以处理失败

04:32.260 --> 04:34.260
那么如果说像这种情况

04:34.260 --> 04:35.260
我只处理的失败

04:35.260 --> 04:36.260
没有处理成功

04:36.260 --> 04:37.260
那我可以这样的写

04:37.260 --> 04:40.830
把它写成开启

04:40.830 --> 04:42.830
只传一个回调函数

04:42.830 --> 04:43.830
就是失败的回调函数

04:43.830 --> 04:45.830
效果是完全一样的

04:45.830 --> 04:47.830
这是给大家补充一个开启方法

04:47.830 --> 04:48.830
这不是重点

04:48.830 --> 04:49.830
重点是下边

04:49.830 --> 04:51.830
电视调用

04:51.830 --> 04:55.210
在现实生活中

04:55.210 --> 04:57.210
其实咱们很多事

04:57.210 --> 05:00.210
它不是单个任务孤立存在的

05:00.210 --> 05:03.210
它是有很多任务串联起来的

05:03.210 --> 05:05.210
比方说我们举个例子

05:05.210 --> 05:09.210
那个我们就与高考为例吧

05:09.210 --> 05:10.210
你读大学为例

05:10.210 --> 05:12.210
你得先学习吧

05:12.210 --> 05:13.210
学习也是一个任务

05:13.210 --> 05:14.210
对吧

05:14.210 --> 05:15.210
学习完了之后呢

05:15.210 --> 05:17.210
我要考试

05:18.210 --> 05:19.210
考试完了过后呢

05:19.210 --> 05:21.210
出成绩

05:21.210 --> 05:22.210
成绩出了之后呢

05:22.210 --> 05:24.210
田志愿

05:24.210 --> 05:25.210
对吧

05:25.210 --> 05:28.210
田志愿然后再去入学

05:28.210 --> 05:30.210
是不是有这么一个过程

05:30.210 --> 05:31.210
对吧

05:31.210 --> 05:32.210
前面的事没完

05:32.210 --> 05:33.210
后面的事就进行不了

05:33.210 --> 05:35.210
是不是有一个串形的过程

05:35.210 --> 05:36.210
对吧

05:36.210 --> 05:37.210
前面的任务呢

05:37.210 --> 05:38.210
一个是一个接一个

05:38.210 --> 05:39.210
一个接一个出现的

05:39.210 --> 05:41.210
这就是多任务的场景

05:41.210 --> 05:43.210
那么这个场景呢

05:43.210 --> 05:45.210
就特别适合练试调用

05:45.210 --> 05:46.210
啥意思

05:46.210 --> 05:48.210
我们认为考试

05:48.210 --> 05:50.210
是学习的后续处理

05:50.210 --> 05:51.210
你学完了

05:51.210 --> 05:52.210
这是一个独立的任务

05:52.210 --> 05:53.210
学完了

05:53.210 --> 05:54.210
学完了过后得考试吧

05:54.210 --> 05:56.210
考试又是一个新的任务

05:56.210 --> 05:57.210
所以说我们这里呢

05:57.210 --> 05:58.210
就会发现

05:58.210 --> 06:00.210
后续处理

06:00.210 --> 06:03.210
它也是一个新任务

06:03.210 --> 06:04.210
因此呢

06:04.210 --> 06:05.210
反映到代码里面

06:05.210 --> 06:07.210
就会有这么一个特点

06:07.210 --> 06:09.210
这个Zing方法

06:09.210 --> 06:13.210
它会返回一个新的Promise

06:13.210 --> 06:14.210
逻辑呢

06:14.210 --> 06:15.210
就是认识什么逻辑

06:15.210 --> 06:17.210
认就是然后

06:17.210 --> 06:19.210
然后是不是后续处理

06:19.210 --> 06:20.210
后续处理

06:20.210 --> 06:22.210
仍然是一个任务

06:22.210 --> 06:24.210
我们在代码里面看一下吧

06:24.210 --> 06:28.930
我们就如何来表述

06:28.930 --> 06:29.930
学习完了考试呢

06:29.930 --> 06:30.930
我们就这样

06:30.930 --> 06:32.930
留一个Promise

06:32.930 --> 06:33.930
首先我们进行学习

06:33.930 --> 06:34.930
对吧

06:34.930 --> 06:37.930
我们这里就输出学习

06:37.930 --> 06:38.930
学习完了过后呢

06:38.930 --> 06:41.930
我们result

06:41.930 --> 06:45.930
我们学习这个任务就结束了

06:45.930 --> 06:46.930
都是这个任务

06:46.930 --> 06:47.930
这个任务呢

06:47.930 --> 06:48.930
就是学习

06:48.930 --> 06:49.930
学有完了过后

06:49.930 --> 06:50.930
任务结束

06:50.930 --> 06:51.930
成功

06:51.930 --> 06:52.930
好

06:52.930 --> 06:53.930
学习完了过后

06:53.930 --> 06:54.930
我们是不是有后续处理

06:54.930 --> 06:55.930
后续干嘛

06:55.930 --> 06:56.930
后续是不是考试

06:56.930 --> 06:57.930
好

06:57.930 --> 06:58.930
我们来输出一下

06:58.930 --> 07:00.930
后续就是考试

07:00.930 --> 07:01.930
你现在这里呢

07:01.930 --> 07:02.930
我就

07:02.930 --> 07:03.930
我也不需要数据

07:03.930 --> 07:04.930
这边也没有个传数据

07:04.930 --> 07:05.930
对吧

07:05.930 --> 07:06.930
我就随便写一写

07:06.930 --> 07:07.930
好

07:07.930 --> 07:08.930
考试

07:08.930 --> 07:09.930
就这个东西

07:09.930 --> 07:11.930
它也是一个新的任务

07:11.930 --> 07:12.930
同学说

07:12.930 --> 07:13.930
那这个玩意不就是个回调函数吗

07:13.930 --> 07:15.930
怎么来看它是一个Promise的

07:15.930 --> 07:16.930
这样子的

07:16.930 --> 07:17.930
这个任方法

07:17.930 --> 07:20.930
它会返回一个新的Promise

07:20.930 --> 07:21.930
我来看一下

07:21.930 --> 07:23.930
输出一下Promise2

07:23.930 --> 07:25.930
你看一下是不是一个任务

07:25.930 --> 07:26.930
是不是一个任务

07:26.930 --> 07:29.930
Promise2它仍然是一个任务

07:29.930 --> 07:31.930
没了意思吧

07:31.930 --> 07:32.930
输出顺序先不要管

07:32.930 --> 07:35.930
我们后边还会讲的

07:35.930 --> 07:36.930
为什么没有先

07:36.930 --> 07:37.930
不是先输出考试

07:37.930 --> 07:39.930
再去输出这个Promise

07:39.930 --> 07:40.930
我们后边会讲

07:40.930 --> 07:41.930
现在不用去过多考虑

07:41.930 --> 07:43.930
其实也非常简单

07:43.930 --> 07:44.930
就是任方法里边的

07:44.930 --> 07:47.930
rejected和unfulfilled

07:47.930 --> 07:49.930
他们都是进入V对立

07:49.930 --> 07:52.930
所以说这是一个异步的函数

07:52.930 --> 07:53.930
它会在事件对立里边

07:53.930 --> 07:55.930
就前面同步代码执行完了之后

07:55.930 --> 07:57.930
它会从事件对立里边

07:57.930 --> 07:58.930
拿出来执行

07:58.930 --> 07:59.930
我们后边再慢慢讲吧

07:59.930 --> 08:00.930
后边就做一些题

08:00.930 --> 08:01.930
再慢慢讲这个东西

08:01.930 --> 08:03.930
我们现在关注的就是

08:03.930 --> 08:05.930
这个Promise2是什么东西

08:05.930 --> 08:07.930
它仍然是一个Promise

08:07.930 --> 08:08.930
哪来的

08:08.930 --> 08:10.930
是不是任方法返回的

08:10.930 --> 08:11.930
一定要用任方法

08:11.930 --> 08:13.930
给它传了一个什么东西

08:13.930 --> 08:14.930
然后这个认函数

08:14.930 --> 08:16.930
它就会返回一个新的Promise

08:16.930 --> 08:17.930
你要这意思吧

08:17.930 --> 08:19.930
这就是这个任务

08:19.930 --> 08:21.930
它是怎么串起来的

08:21.930 --> 08:24.930
前一个任务做了后续处理

08:24.930 --> 08:25.930
那么这个后续处理

08:25.930 --> 08:27.930
会返回一个新的Promise

08:27.930 --> 08:29.930
那么后边出成绩也是一样

08:29.930 --> 08:31.930
那如果说针对Promise2

08:31.930 --> 08:34.930
我也有后续处理

08:34.930 --> 08:37.930
考试完了过后出成绩

08:37.930 --> 08:41.370
那么这个任方法

08:41.370 --> 08:43.370
它又会返回一个Promise

08:44.370 --> 08:47.370
我们来输出一下Promise2

08:47.370 --> 08:51.770
你看还是一个Promise

08:51.770 --> 08:52.770
对吧

08:52.770 --> 08:54.770
都是Promise

08:54.770 --> 08:56.770
就一个一任务接着一个任务

08:56.770 --> 08:58.770
首先把这个点认识清楚

08:58.770 --> 09:00.770
当然这里面有很多细节

09:00.770 --> 09:02.770
麻烦你麻烦再细节特别多

09:03.770 --> 09:04.770
好 第二个

09:04.770 --> 09:08.770
关键就是新的任务的状态是什么呢

09:08.770 --> 09:09.770
你不是返回一个新的任务吗

09:09.770 --> 09:11.770
原始任务清楚

09:11.770 --> 09:12.770
原始任务的状态呢

09:12.770 --> 09:14.770
就是看你钓没钓锐肉

09:14.770 --> 09:15.770
钓锐肉我就成功了

09:15.770 --> 09:17.770
钓锐接个体的就失败了

09:17.770 --> 09:18.770
因为说那我这里边

09:18.770 --> 09:19.770
为什么没有写这些接个体的

09:19.770 --> 09:20.770
因为我没用

09:20.770 --> 09:22.770
没用的话就可以不写

09:23.770 --> 09:25.770
你们就是这里呢

09:25.770 --> 09:27.770
我只跳了锐肉

09:27.770 --> 09:28.770
所以说这个任务最终就成功了

09:28.770 --> 09:30.770
关键是后边这些任务

09:30.770 --> 09:32.770
它的状态是什么呢

09:32.770 --> 09:34.770
这些任务它是没有锐肉

09:34.770 --> 09:35.770
可以钓的

09:35.770 --> 09:36.770
没有锐肉可以钓的

09:36.770 --> 09:41.770
它的状态就有这么一二三点

09:41.770 --> 09:43.770
这三个点你也清楚了

09:43.770 --> 09:46.770
你把promise的这一块支持

09:46.770 --> 09:48.770
随便出面是听

09:48.770 --> 09:50.770
没有任何问题

09:50.770 --> 09:52.770
就是三个三个点呢

09:52.770 --> 09:54.770
要一点一点的慢慢来

09:54.770 --> 09:55.770
慢慢理解清楚

09:55.770 --> 09:57.770
这个其实跟现实世界是挂钩的

09:57.770 --> 09:59.770
第一个

09:59.770 --> 10:03.770
如果说你前一个任务

10:03.770 --> 10:06.770
没有相关的后续处理

10:06.770 --> 10:08.770
那么新的任务的状态呢

10:08.770 --> 10:11.770
和前面的任务一致

10:11.770 --> 10:14.770
数据呢就跟前面的任务的数据

10:14.770 --> 10:15.770
是一样的

10:15.770 --> 10:17.770
这说的是啥意思

10:17.770 --> 10:18.770
我给大家举个例子

10:18.770 --> 10:21.770
先从感兴的来认识

10:21.770 --> 10:25.770
比方说你在学习的过程中

10:25.770 --> 10:28.770
突然出了一些问题

10:28.770 --> 10:31.770
比方说出了什么样的问题呢

10:33.770 --> 10:37.770
你家里边买彩票中了大奖

10:37.770 --> 10:39.770
这个时候觉得你家里面有晃了

10:39.770 --> 10:40.770
中了五个亿

10:40.770 --> 10:44.770
你发现自己好像不用学习了

10:44.770 --> 10:46.770
这个时候

10:46.770 --> 10:48.770
学习这个任务是不是玩不成了

10:48.770 --> 10:50.770
是不是就失败了

10:50.770 --> 10:52.770
你不需要学习的

10:52.770 --> 10:54.770
但是失败之后

10:54.770 --> 10:56.770
你又没有针对失败进行处理

10:56.770 --> 10:58.770
不学习就干嘛

10:58.770 --> 11:02.770
就导致了考试进行不下去了

11:02.770 --> 11:03.770
是不是这个逻辑

11:03.770 --> 11:04.770
你学习失败了

11:04.770 --> 11:06.770
是不是导致考试进行不下去了

11:06.770 --> 11:08.770
说学习这个任务

11:08.770 --> 11:10.770
这个任务本身失败了

11:10.770 --> 11:12.770
那么考试这个任务

11:12.770 --> 11:13.770
他也得失败

11:13.770 --> 11:14.770
如果说你没有针对

11:14.770 --> 11:16.770
这个失败进行处理的话

11:16.770 --> 11:18.770
那么他也得失败

11:18.770 --> 11:19.770
我举个例子

11:19.770 --> 11:21.770
比方说我这里学习

11:21.770 --> 11:23.770
突然我中奖了

11:23.770 --> 11:26.770
我把这个就在这写吧

11:26.770 --> 11:30.770
我突然中奖五个亿

11:30.770 --> 11:34.100
不学了

11:34.100 --> 11:36.100
那么这个是不是任务失败了

11:36.100 --> 11:38.100
就借个字

11:39.100 --> 11:42.670
是不是任务失败了

11:42.670 --> 11:43.670
好

11:43.670 --> 11:45.670
如果说我们把这后边删掉

11:45.670 --> 11:47.670
前面这个任务

11:47.670 --> 11:49.670
我针对这个任务做后续处理

11:49.670 --> 11:50.670
我只处理了成功

11:50.670 --> 11:52.670
成功过后我考试

11:52.670 --> 11:55.670
但是失败我没有处理

11:55.670 --> 11:56.670
我没有处理他失败

11:56.670 --> 11:58.670
但是学习失败了怎么办

11:58.670 --> 11:59.670
我没有处理

11:59.670 --> 12:01.670
没有处理这个任务

12:01.670 --> 12:02.670
他也会跟着失败

12:02.670 --> 12:03.670
他进行不下去了

12:03.670 --> 12:05.670
比方说是前一个

12:05.670 --> 12:06.670
导致了后一个失败

12:06.670 --> 12:09.300
你看

12:10.300 --> 12:12.300
后边这个任务我等一会

12:12.300 --> 12:14.300
我用谁探贸出来输出

12:14.300 --> 12:15.300
不能直接输出

12:15.300 --> 12:16.300
直接输出是平底

12:16.300 --> 12:19.300
我们这里用一个一秒钟之后

12:19.300 --> 12:20.300
来输出

12:20.300 --> 12:22.300
为什么直接输出是平底

12:22.300 --> 12:23.300
我们后边会说

12:23.300 --> 12:24.300
现在不用管

12:24.300 --> 12:28.450
我们关注这个Promise 2的状态

12:28.450 --> 12:31.210
你看一下

12:31.210 --> 12:32.210
这个Promise的状态

12:32.210 --> 12:34.210
是不是会接个体的

12:34.210 --> 12:35.210
所以也失败了

12:35.210 --> 12:37.210
本来失败的是谁

12:37.210 --> 12:39.210
本来失败的是前面这个任务

12:39.210 --> 12:41.210
但是前面这个任务失败了

12:41.210 --> 12:42.210
他确实失败了

12:42.210 --> 12:45.210
我针对这个Promise 2是什么意思

12:45.210 --> 12:48.210
是前面这个任务的后续处理

12:48.210 --> 12:49.210
那么后续处理

12:49.210 --> 12:51.210
我只处理的成功

12:51.210 --> 12:53.210
没有处理失败

12:53.210 --> 12:56.210
那么就会导致他失败了

12:56.210 --> 12:58.210
就这个任务的状态就是

12:58.210 --> 12:59.210
他失败了

12:59.210 --> 13:02.210
由于他没有相关的后续处理

13:02.210 --> 13:05.210
就导致了他也跟着失败

13:05.210 --> 13:06.210
那么失败的原因

13:06.210 --> 13:07.210
他是啥原因

13:07.210 --> 13:09.210
他就是啥原因

13:09.210 --> 13:11.210
总有一层要处理

13:11.210 --> 13:13.210
后面的任务怎么办呢

13:13.210 --> 13:14.210
对不对

13:14.210 --> 13:16.210
好 那么我们再来一个例子

13:16.210 --> 13:20.210
如果说成功了

13:20.210 --> 13:22.210
比如说成功了

13:22.210 --> 13:23.210
前面这个任务成功了

13:23.210 --> 13:25.210
但是我没有针对前面这个任务

13:25.210 --> 13:26.210
成功进行处理

13:26.210 --> 13:28.210
我只针对失败了进行处理

13:28.210 --> 13:29.210
比方说这里

13:29.210 --> 13:31.210
学习失败了

13:31.210 --> 13:34.210
没法考试了

13:34.210 --> 13:36.210
我只针对失败了进行处理

13:36.210 --> 13:38.210
我没有针对成功进行处理

13:38.210 --> 13:40.210
那么后面的任务是什么情况呢

13:40.210 --> 13:42.210
是一样的

13:42.210 --> 13:44.210
前面的任务成功了

13:44.210 --> 13:46.210
那我没有针对成功处理

13:46.210 --> 13:48.210
那么他也跟着成功

13:48.210 --> 13:50.210
所以说我们来看一下Promise 2

13:50.210 --> 13:52.210
是不是

13:52.210 --> 13:54.210
他这里没有说这个regity的

13:54.210 --> 13:56.210
他就表示成功了

13:56.210 --> 13:57.210
那么后面indefine了什么意思

13:57.210 --> 13:59.210
表示他相关数据

13:59.210 --> 14:01.210
所以说这个点大家理解清楚

14:01.210 --> 14:03.210
前面这个任务

14:03.210 --> 14:05.210
如果说没有进行后续处理

14:05.210 --> 14:07.210
那么那他是啥

14:07.210 --> 14:10.210
他就是啥

14:10.210 --> 14:11.210
我再来一个例子

14:11.210 --> 14:15.210
比方说我这里写了一个1

14:15.210 --> 14:17.210
那么Promise 2

14:17.210 --> 14:18.210
他成功之后

14:18.210 --> 14:19.210
他的数据是1

14:19.210 --> 14:20.210
我们来看一下

14:20.210 --> 14:22.210
Promise 1

14:22.210 --> 14:23.210
他的成功是什么

14:23.210 --> 14:24.210
是不是成功了

14:24.210 --> 14:27.210
Fulfilled

14:27.210 --> 14:28.210
数据是什么

14:28.210 --> 14:30.210
是1

14:30.210 --> 14:31.210
Promise 2

14:31.210 --> 14:33.210
他没有针对成功进行处理

14:33.210 --> 14:36.210
那么就导致了Promise 2

14:36.210 --> 14:37.210
针对Promise 1

14:37.210 --> 14:39.210
他没有对成功进行处理

14:39.210 --> 14:40.210
他只对失败了进行处理

14:40.210 --> 14:41.210
因此呢

14:41.210 --> 14:43.210
就会导致Promise 2

14:43.210 --> 14:47.210
他也会跟Promise的情况是一模一样的

14:47.210 --> 14:50.210
Fulfilled

14:50.210 --> 14:52.210
那么数据也是1

14:52.210 --> 14:55.210
好运行看一下

14:55.210 --> 14:56.210
看呗

14:56.210 --> 14:58.210
当然失败也是一样

14:58.210 --> 15:01.210
我们再换成失败的情况

15:01.210 --> 15:02.210
这里失败了

15:02.210 --> 15:03.210
失败了我传个123

15:03.210 --> 15:05.210
那么这边也是

15:05.210 --> 15:06.210
他的后续处理

15:06.210 --> 15:07.210
只出了成功

15:07.210 --> 15:08.210
没有处理失败

15:08.210 --> 15:10.210
那么就会导致他的情况了

15:10.210 --> 15:11.210
Promise 1

15:11.210 --> 15:13.210
他是维杰克体的

15:13.210 --> 15:15.210
原因是123

15:15.210 --> 15:17.210
就会导致Promise 2

15:17.210 --> 15:18.210
他也是维杰克体的

15:18.210 --> 15:19.210
原因是123

15:19.210 --> 15:20.210
好

15:20.210 --> 15:22.580
再来看一下

15:22.580 --> 15:23.580
你看

15:23.580 --> 15:24.580
有一个体的

15:24.580 --> 15:25.580
123

15:25.580 --> 15:27.580
前面是不是给你报了些警告

15:27.580 --> 15:29.580
他说你没有针对他进行

15:29.580 --> 15:30.580
他失败了

15:30.580 --> 15:32.580
但是没有针对这个失败的人物进行处理

15:32.580 --> 15:34.580
然后他也失败了

15:34.580 --> 15:36.580
也没有针对他来进行

15:36.580 --> 15:37.580
后续处理

15:37.580 --> 15:38.580
说报了两个警告

15:38.580 --> 15:41.580
这就是这么一种情况

15:41.580 --> 15:43.580
第一个情况就是

15:43.580 --> 15:45.580
没有相关的后续处理

15:45.580 --> 15:47.580
那么后面的任务

15:47.580 --> 15:48.580
跟前面的任务

15:48.580 --> 15:49.580
一致

15:49.580 --> 15:50.580
状态一致

15:50.580 --> 15:51.580
前面咋回事

15:51.580 --> 15:53.580
你就咋回事

15:53.580 --> 15:55.580
那如果说

15:55.580 --> 15:56.580
第二种情况

15:56.580 --> 15:58.580
有后续处理

15:58.580 --> 16:00.580
但是还没有执行

16:00.580 --> 16:01.580
新的任务

16:01.580 --> 16:03.580
他就会挂起

16:03.580 --> 16:05.580
怎么理解呢

16:05.580 --> 16:06.580
比那么

16:06.580 --> 16:07.580
其实简单理解就是

16:07.580 --> 16:08.580
前面这个任务是挂起

16:08.580 --> 16:10.580
你也得挂起

16:10.580 --> 16:11.580
好比方说吧

16:11.580 --> 16:13.580
我这里学习需要一段时间

16:13.580 --> 16:15.580
我没有那么快

16:15.580 --> 16:17.580
我这里的就set time out

16:17.580 --> 16:22.300
两秒钟吧

16:22.300 --> 16:23.300
两秒钟

16:23.300 --> 16:24.300
我要学两秒钟

16:24.300 --> 16:25.300
才能学习结束

16:25.300 --> 16:27.300
那么学习结束成功了

16:27.300 --> 16:28.300
好

16:28.300 --> 16:29.300
接下来我们看

16:29.300 --> 16:30.300
我针对这个

16:30.300 --> 16:31.300
这个任务进行后续处理

16:31.300 --> 16:33.300
如果说你成功了

16:33.300 --> 16:34.300
我就考试

16:35.300 --> 16:36.300
我就运行这个函数

16:36.300 --> 16:37.300
进行考试

16:37.300 --> 16:39.300
是不是会返回一个新的任务

16:39.300 --> 16:42.300
那么这个新的任务的状态是什么呢

16:42.300 --> 16:44.300
好咱们再看一下

16:44.300 --> 16:46.300
运行

16:46.300 --> 16:48.300
pending

16:48.300 --> 16:49.300
为什么是pending呢

16:49.300 --> 16:50.300
你看

16:50.300 --> 16:53.300
我这个后续处理

16:53.300 --> 16:54.300
是不是要等到

16:54.300 --> 16:56.300
学习成功之后

16:56.300 --> 16:58.300
学习成功需要多少时间

16:58.300 --> 17:00.300
需要两秒钟

17:00.300 --> 17:01.300
对吧

17:01.300 --> 17:03.300
那我这里肯定时间还没到

17:03.300 --> 17:05.300
一秒钟过后就输出这个

17:05.300 --> 17:06.300
那么我这个时间到了时候

17:06.300 --> 17:07.300
说明啥

17:07.300 --> 17:10.300
说明他还没有成功

17:10.300 --> 17:11.300
对不对

17:11.300 --> 17:12.300
是不是还没有成功

17:12.300 --> 17:14.300
还没有成功

17:14.300 --> 17:17.300
那么

17:17.300 --> 17:18.300
他都还没完

17:18.300 --> 17:20.300
没完的话

17:20.300 --> 17:21.300
他也没完

17:21.300 --> 17:23.300
他也是刮旗的

17:23.300 --> 17:25.300
这个好好理解吧

17:25.300 --> 17:27.300
就前面这个阶段还没结束

17:27.300 --> 17:28.300
那么你这个新的任务

17:28.300 --> 17:31.300
也得是刮旗

17:31.300 --> 17:33.300
这就是这个

17:33.300 --> 17:34.300
后续处理

17:34.300 --> 17:35.300
还没有执行

17:35.300 --> 17:37.300
那么新的任务刮旗

17:37.300 --> 17:38.300
我这后续处理是啥

17:38.300 --> 17:39.300
是这个

17:39.300 --> 17:40.300
我有没有有没有的话

17:40.300 --> 17:42.300
就回到第一种情况了

17:42.300 --> 17:44.300
我有后续处理

17:44.300 --> 17:46.300
但是我这个后续处理

17:46.300 --> 17:47.300
还没执行

17:47.300 --> 17:48.300
那么这个时候

17:48.300 --> 17:50.300
这个任务就是刮旗的

17:50.300 --> 17:52.300
你学习完了过后

17:52.300 --> 17:53.300
我有没有后续处理

17:53.300 --> 17:54.300
有后续处理考试

17:54.300 --> 17:56.300
但是我现在还没有开始考试

17:56.300 --> 17:57.300
那么这个任务肯定是刮旗的

17:57.300 --> 17:58.300
对不对

17:58.300 --> 18:00.300
好这是这种情况

18:00.300 --> 18:02.300
重点是第三种情况

18:02.300 --> 18:04.300
第三种情况又有三个细节

18:04.300 --> 18:08.300
就是我前面这个任务完了

18:08.300 --> 18:10.300
我也有相关的后续处理

18:10.300 --> 18:11.300
没有相关的后续处理

18:11.300 --> 18:12.300
看这个

18:12.300 --> 18:15.300
我也有相关的后续处理

18:15.300 --> 18:17.300
那么但是呢

18:17.300 --> 18:19.300
我这个新的任务还没有那么

18:19.300 --> 18:22.300
还不能直接的

18:22.300 --> 18:24.300
不能直接的确定状态

18:24.300 --> 18:27.300
我要看后续的相关处理

18:27.300 --> 18:28.300
是什么情况

18:29.300 --> 18:30.300
比方说

18:30.300 --> 18:32.300
你学习学习完了

18:32.300 --> 18:33.300
我的新任务是

18:33.300 --> 18:34.300
后续处理是考试

18:34.300 --> 18:36.300
考试就是个新任务

18:36.300 --> 18:38.300
但是你不能说你学习成功了

18:38.300 --> 18:40.300
我考试就一定成功

18:40.300 --> 18:41.300
对吧

18:41.300 --> 18:43.300
所以说我考试

18:43.300 --> 18:44.300
有没有后续处理

18:44.300 --> 18:47.300
有排除要递种情况

18:47.300 --> 18:48.300
是不是第二种情况

18:48.300 --> 18:50.300
不是学习完成了

18:50.300 --> 18:52.300
现在就用第三种情况

18:52.300 --> 18:53.300
我有后续处理

18:53.300 --> 18:57.300
我还得看这个考试的过程

18:57.300 --> 18:58.300
比方说考试的时候

18:58.300 --> 18:59.300
通常一种讲了

18:59.300 --> 19:01.300
直接就跑了

19:01.300 --> 19:02.300
或者是考试的时候

19:02.300 --> 19:03.300
就睡着了

19:03.300 --> 19:04.300
那考试就失败了

19:04.300 --> 19:05.300
对吧

19:05.300 --> 19:07.300
还要看考试的过程

19:07.300 --> 19:08.300
那么这个过程是看啥

19:08.300 --> 19:10.300
就看这个函数的执行过程

19:10.300 --> 19:12.300
简单的说

19:12.300 --> 19:15.300
这个函数执行过程中

19:15.300 --> 19:16.300
没有错误

19:16.300 --> 19:17.300
怎么样没有错误

19:17.300 --> 19:18.300
不抱错

19:18.300 --> 19:21.300
那么你这个任务就成功

19:21.300 --> 19:24.300
执行的过程中抱了错

19:24.300 --> 19:26.300
你这个任务就失败

19:26.300 --> 19:27.300
没有意思吗

19:27.300 --> 19:28.300
就简单的说就是这两点

19:28.300 --> 19:30.300
就前面这两点

19:30.300 --> 19:33.000
前面这两点

19:33.000 --> 19:34.000
慢慢的

19:34.000 --> 19:36.000
这个时间给你们留够

19:36.000 --> 19:39.000
慢慢去输利

19:39.000 --> 19:41.000
后续处理就是这么一个意思

19:41.000 --> 19:42.000
就表示这个

19:42.000 --> 19:43.000
其实这个后续处理是什么

19:43.000 --> 19:46.000
其实就是新任务的执行过程

19:46.000 --> 19:49.000
就是新任务的执行过程

19:49.000 --> 19:52.000
那么执行的过程中有错

19:52.000 --> 19:53.000
失败

19:53.000 --> 19:55.000
没有错成功

19:55.000 --> 19:56.000
好 我举个例子

19:56.000 --> 19:57.000
比方说我们这里学习

19:57.000 --> 19:59.000
我就直接让它成功了

19:59.000 --> 20:02.310
成功了是不是会执行这个

20:02.310 --> 20:03.310
对不对

20:03.310 --> 20:05.310
执行这个的过程中没有错误

20:05.310 --> 20:07.310
好 那么它成功

20:07.310 --> 20:08.310
好 看一下

20:08.310 --> 20:10.310
你看是不是考试没有错误

20:10.310 --> 20:11.310
它成功吧

20:11.310 --> 20:13.310
数据是一般的

20:13.310 --> 20:16.310
那如果说考试的过程中有错

20:16.310 --> 20:19.310
有错怎么来弄有错呢

20:19.310 --> 20:21.310
我就straw

20:21.310 --> 20:24.310
抛出一个错误

20:24.310 --> 20:26.310
这就是一个抱错了

20:26.310 --> 20:27.310
对吧

20:27.310 --> 20:29.310
abc有随便写个吧

20:29.310 --> 20:35.060
或者说睡着了

20:35.060 --> 20:37.060
你看Promise变成什么

20:37.060 --> 20:39.060
变成reject

20:39.060 --> 20:42.060
所以它变成了失败

20:42.060 --> 20:44.060
所以说不是说它成功

20:44.060 --> 20:45.060
它就一定成功

20:45.060 --> 20:48.060
不是说学习成功考试有一定成功

20:48.060 --> 20:49.060
别的意思

20:49.060 --> 20:51.060
那么好 我们接下来看

20:51.060 --> 20:53.060
前面两个的细节

20:53.060 --> 20:55.060
如果说执行的过程中无错

20:55.060 --> 20:57.060
新的任务状态就没完成

20:57.060 --> 20:58.060
就成功

20:58.060 --> 20:59.060
数据是什么呢

20:59.060 --> 21:01.060
数据是返回值

21:01.060 --> 21:02.060
差一声

21:02.060 --> 21:03.060
如果说你成功了

21:03.060 --> 21:05.060
等我考了100分

21:05.060 --> 21:06.060
我就返回一个100

21:06.060 --> 21:09.060
咱们来看一下

21:09.060 --> 21:11.060
Promise2成功了返回100

21:11.060 --> 21:13.060
是不是新的任务表示

21:13.060 --> 21:15.060
我这个执行过程没问题

21:15.060 --> 21:17.060
成功了我得到了数据是100

21:17.060 --> 21:19.060
那如果说失败了呢

21:19.060 --> 21:21.060
失败了比方说我抛了一个错误

21:21.060 --> 21:23.060
抛了一个错误就是个错误对象

21:23.060 --> 21:27.560
那么这就是失败的原因

21:27.560 --> 21:28.560
你看

21:28.560 --> 21:29.560
失败了对吧

21:29.560 --> 21:31.560
失败的原因是这个Error对象

21:31.560 --> 21:32.560
当你抛出

21:32.560 --> 21:34.560
我们一般来说是抛一个错误对象

21:34.560 --> 21:35.560
当你可以抛别的

21:35.560 --> 21:37.560
抛个023

21:37.560 --> 21:38.560
或者抛个0

21:38.560 --> 21:39.560
表示0分

21:39.560 --> 21:40.560
那么失败了

21:40.560 --> 21:42.560
失败的原因是123

21:42.560 --> 21:44.560
没办法的意思吧

21:44.560 --> 21:46.560
就这么个意思

21:46.560 --> 21:47.560
好 我们再来

21:47.560 --> 21:49.560
比方说这里是我们自手动的抛出错误

21:49.560 --> 21:51.560
还有可能就是代码执行报错了

21:51.560 --> 21:53.560
比方说你这里有个变量

21:53.560 --> 21:56.560
然后你出源去掉变量的一个方法

21:56.560 --> 21:58.560
闹了不能掉方法

21:58.560 --> 22:00.560
说这个是报错了

22:00.560 --> 22:04.580
报错就导致这个任务失败

22:04.580 --> 22:05.580
你看错误了

22:05.580 --> 22:06.580
失败的原因是什么呢

22:06.580 --> 22:08.580
他说这个就是这个错误

22:08.580 --> 22:11.580
无法读取NOW的投实并法

22:12.580 --> 22:14.580
你要的意思吧

22:14.580 --> 22:16.580
再来说一下

22:16.580 --> 22:18.580
后续处理就是一个新任务

22:18.580 --> 22:19.580
不是说你前边成功了

22:19.580 --> 22:21.580
我就一定成功

22:21.580 --> 22:22.580
不是说你前边失败了

22:22.580 --> 22:24.580
我就一定失败

22:24.580 --> 22:25.580
那不一定的

22:25.580 --> 22:28.580
我要看我这个任务的处理过程

22:28.580 --> 22:29.580
我处理过程中没有问题

22:29.580 --> 22:30.580
那就成功

22:30.580 --> 22:32.580
处理过程中有问题

22:32.580 --> 22:34.580
那就失败

22:34.580 --> 22:36.580
原理是吧

22:36.580 --> 22:37.580
好 咱们再来一个例子

22:37.580 --> 22:40.580
比方说我这个学习

22:40.580 --> 22:42.580
学习失败了

22:42.580 --> 22:43.580
比方中奖了

22:43.580 --> 22:44.580
不学了

22:44.580 --> 22:46.580
那么就是reject

22:46.580 --> 22:49.460
学习失败了

22:49.460 --> 22:50.460
好 接下来

22:50.460 --> 22:51.460
我们来这边来看一下

22:51.460 --> 22:55.990
用看齐

22:55.990 --> 22:56.990
如果说你不用看齐的话

22:56.990 --> 22:58.990
你用那个ZIN的话

22:58.990 --> 22:59.990
相当于是这样子写的话

22:59.990 --> 23:01.990
就相当于是没有去处理它的失败

23:01.990 --> 23:03.990
那就回到第一种情况了

23:03.990 --> 23:05.990
那就回到第一种情况了

23:05.990 --> 23:07.990
回到第一种情况

23:07.990 --> 23:09.990
我这里不考虑第一种情况

23:09.990 --> 23:10.990
就说你失败了

23:10.990 --> 23:12.990
我也有处理失败

23:12.990 --> 23:13.990
你不学了

23:13.990 --> 23:14.990
不学了

23:14.990 --> 23:15.990
我也不考了

23:15.990 --> 23:17.990
你都不学了

23:19.990 --> 23:20.990
还考啥

23:22.990 --> 23:23.990
我就有没有处理失败

23:23.990 --> 23:25.990
有处理失败

23:25.990 --> 23:27.990
那么有处理失败的话

23:28.990 --> 23:30.990
这个任务还是一样的

23:30.990 --> 23:32.990
看处理的过程

23:32.990 --> 23:34.990
处理的过程中不抱错

23:34.990 --> 23:36.990
它就成功

23:36.990 --> 23:37.990
没意思吧

23:37.990 --> 23:38.990
就是我把这个

23:38.990 --> 23:41.990
本来是你有问题的

23:41.990 --> 23:43.990
但是我这边

23:43.990 --> 23:45.990
处理了你这个问题

23:45.990 --> 23:46.990
处理了过后

23:46.990 --> 23:48.990
那你就没问题了

23:48.990 --> 23:50.990
就这么个逻辑

23:50.990 --> 23:54.620
好 咱们来运行看一下

23:54.620 --> 23:55.620
它成功了

23:55.620 --> 23:56.620
那成功的数据是什么呢

23:56.620 --> 23:59.620
还是一样得益于这个

23:59.620 --> 24:00.620
函数的反回值

24:00.620 --> 24:01.620
你反回什么数据

24:01.620 --> 24:06.020
它就是什么数据

24:06.020 --> 24:07.020
看没

24:07.020 --> 24:08.020
它那如果说

24:08.020 --> 24:10.020
你处理的过程又出错了

24:10.020 --> 24:11.020
对吧

24:11.020 --> 24:13.020
你本来你都不考了

24:13.020 --> 24:15.020
那么这个时候突然有一天

24:15.020 --> 24:17.020
你发现

24:17.020 --> 24:20.910
中奖

24:20.910 --> 24:21.910
就是颁奖

24:21.910 --> 24:23.910
就是发奖的机构跑了

24:23.910 --> 24:24.910
跑路了

24:24.910 --> 24:27.910
发奖的机构跑路了

24:29.910 --> 24:31.910
你还得考

24:31.910 --> 24:34.910
还得发生中奖十一摊

24:34.910 --> 24:35.910
是一个进化水月

24:35.910 --> 24:37.910
还得回来考试

24:41.120 --> 24:43.120
不能用这个例子

24:43.120 --> 24:45.120
我就直接报个错课了

24:45.120 --> 24:46.120
直接报个错

24:46.120 --> 24:52.310
是不是又变成拒绝了

24:52.310 --> 24:54.310
就是前一个任务失败了

24:54.310 --> 24:55.310
但是我处理了

24:55.310 --> 24:56.310
我处理到

24:56.310 --> 24:58.310
如果说我没处理

24:58.310 --> 24:59.310
那我也失败了

24:59.310 --> 25:00.310
那我关键是我处理的这个错误

25:00.310 --> 25:01.310
处理的错误

25:01.310 --> 25:02.310
我就不能认为失败了

25:02.310 --> 25:04.310
我要看我这个处理过程

25:04.310 --> 25:06.310
如果说我处理的过程中

25:06.310 --> 25:07.310
有错误

25:07.310 --> 25:08.310
那我失败

25:08.310 --> 25:09.310
处理的过程中

25:09.310 --> 25:10.310
没有错误

25:10.310 --> 25:12.310
所以说你始终记住

25:12.310 --> 25:14.310
后边的任务的状态

25:14.310 --> 25:16.310
就是如果说我有相关的处理

25:16.310 --> 25:18.310
我一定要看那个处理的过程

25:18.310 --> 25:20.310
甭管是对成功的处理

25:20.310 --> 25:21.310
还是对失败的处理

25:21.310 --> 25:22.310
如果说你前面的任务成功了

25:22.310 --> 25:23.310
我就看成功处理

25:23.310 --> 25:25.310
如果说前面的任务失败了

25:25.310 --> 25:26.310
我就看失败处理

25:26.310 --> 25:28.310
我要看那个处理的过程

25:28.310 --> 25:29.310
有没有问题

25:29.310 --> 25:30.310
没有问题我就成功

25:30.310 --> 25:32.310
有问题我就失败

25:33.310 --> 25:34.310
没了意思吧

25:34.310 --> 25:36.310
好 那么最后一个细节

25:36.310 --> 25:38.310
如果说我的后续处理

25:38.310 --> 25:40.310
不是不管是成功还是失败

25:40.310 --> 25:41.310
反正就是我的后续处理

25:41.310 --> 25:44.310
返回的是一个新的任务对象

25:44.310 --> 25:46.310
那么新任务的状态

25:46.310 --> 25:49.310
和这个数据给这个任务对象一致

25:49.310 --> 25:50.310
啥意思

25:50.310 --> 25:53.310
这种情况就看一下吧

25:53.310 --> 25:56.310
如果说我这个后续处理

25:56.310 --> 25:58.310
比方说我这里还用成功

26:00.310 --> 26:01.310
你成功了

26:01.310 --> 26:02.310
成功了过后了

26:02.310 --> 26:04.310
我针对这个的后续处理

26:04.310 --> 26:06.310
我返回的是一个任务对象

26:07.310 --> 26:10.310
又返回了一个新的任务对象

26:10.310 --> 26:12.310
那么这个对象的情况

26:12.310 --> 26:15.310
跟在他的情况就完全一致了

26:15.310 --> 26:17.310
这个对象是挂起

26:17.310 --> 26:18.310
这个任务就是挂起

26:18.310 --> 26:20.310
这个对象是成功

26:20.310 --> 26:21.310
这个任务就成功

26:21.310 --> 26:22.310
这个对象是失败

26:22.310 --> 26:24.310
这个任务就是失败

26:25.310 --> 26:26.310
所以说呢

26:26.310 --> 26:27.310
那这个数据当然就是你钓

26:27.310 --> 26:28.310
成功的数据就是你钓

26:28.310 --> 26:30.310
这个锐招过的时候的数据

26:30.310 --> 26:31.310
失败的时候就钓

26:31.310 --> 26:32.310
这个锐接个成的数据

26:32.310 --> 26:34.310
就是原因

26:34.310 --> 26:36.310
那么比方说就这样子起

26:36.310 --> 26:37.310
那么请问大家

26:37.310 --> 26:41.650
这个任务的状态是什么

26:41.650 --> 26:42.650
是什么

26:42.650 --> 26:43.650
哎呀

26:43.650 --> 26:46.020
平底

26:46.020 --> 26:48.020
为什么是平底

26:48.020 --> 26:50.020
他就这样的看

26:50.020 --> 26:52.020
从头到尾来看一遍

26:52.020 --> 26:53.020
这个任务成功吗

26:53.020 --> 26:54.020
成功了吗

26:54.020 --> 26:55.020
成功了

26:55.020 --> 26:56.020
有没有后续处理呢

26:56.020 --> 26:57.020
有后续处理

26:57.020 --> 26:59.020
那我这个任务

26:59.020 --> 27:02.020
就应该看这个后续处理的过程

27:02.020 --> 27:04.020
过程中有没有错误

27:04.020 --> 27:05.020
没有错误

27:05.020 --> 27:06.020
那么按理说我这个任务

27:06.020 --> 27:07.020
就应该完成

27:07.020 --> 27:09.020
但是我这个任务返回的是

27:09.020 --> 27:11.020
一个新的Promise

27:11.020 --> 27:13.020
那么我就要看

27:13.020 --> 27:15.020
这个新的Promise

27:15.020 --> 27:16.020
他的状态是啥

27:16.020 --> 27:17.020
他就是啥

27:17.020 --> 27:18.020
而这个新的Promise

27:18.020 --> 27:19.020
他的状态是啥

27:19.020 --> 27:20.020
是不是平底

27:20.020 --> 27:21.020
挂起的

27:21.020 --> 27:22.020
为什么挂起的

27:22.020 --> 27:23.020
因为我这里没有调用锐招

27:23.020 --> 27:24.020
没有调用锐接个成

27:24.020 --> 27:25.020
他的任务肯定是

27:25.020 --> 27:26.020
一直是灯带的

27:26.020 --> 27:29.020
所以说新的任务也是灯带

27:29.020 --> 27:31.020
原来的意思

27:31.020 --> 27:34.020
这就是是不是很糟啊很糟

27:34.020 --> 27:36.020
其实之所以这么糟

27:36.020 --> 27:38.020
这原因还不是Promise的问题

27:38.020 --> 27:40.020
是因为我们本身现实世界

27:40.020 --> 27:42.020
就是这么复杂

27:42.020 --> 27:45.020
只是我们平时没有用一种

27:45.020 --> 27:47.020
代码模型或者是数学模型

27:47.020 --> 27:48.020
去分析它

27:48.020 --> 27:49.020
我们都是感兴认识

27:49.020 --> 27:50.020
感觉上差不多就可以了

27:50.020 --> 27:52.020
但是一旦用数学模型

27:52.020 --> 27:53.020
或者是代码模型

27:53.020 --> 27:54.020
去分析它的话

27:54.020 --> 27:55.020
它本身就是这么复杂

27:55.020 --> 27:56.020
我们代码都是为了

27:56.020 --> 27:58.020
反映现实世界的

27:58.020 --> 27:59.020
然后你看

27:59.020 --> 28:02.020
再来整个过一遍

28:02.020 --> 28:03.020
后续处理本身

28:03.020 --> 28:05.020
就是一个新的任务

28:05.020 --> 28:08.020
新的任务的状态有三个情况

28:08.020 --> 28:10.020
你前面的任务

28:10.020 --> 28:11.020
有了一种状态

28:11.020 --> 28:12.020
但是我后边的任务

28:12.020 --> 28:14.020
没有处理的状态

28:14.020 --> 28:15.020
比方说你前面的任务

28:15.020 --> 28:16.020
在这种情况

28:16.020 --> 28:17.020
你来看

28:17.020 --> 28:19.020
前面的任务拒绝了

28:19.020 --> 28:20.020
但是后面的任务

28:20.020 --> 28:21.020
我前面的任务

28:21.020 --> 28:23.020
没有针对这个失败

28:23.020 --> 28:24.020
做任何处理

28:24.020 --> 28:25.020
那么后面的任务

28:25.020 --> 28:27.020
也会跟着失败

28:27.020 --> 28:28.020
原因跟前面的任务

28:28.020 --> 28:29.020
原因一致

28:29.020 --> 28:31.020
这是第一个点

28:31.020 --> 28:32.020
第二个点

28:33.020 --> 28:34.020
我前面的任务

28:34.020 --> 28:35.020
成功了

28:37.020 --> 28:38.020
但是

28:38.020 --> 28:39.020
如果说前面的任务

28:39.020 --> 28:41.400
还没有成功

28:41.400 --> 28:42.400
还是挂起的状态

28:42.400 --> 28:43.400
像这种情况

28:43.400 --> 28:44.400
一直挂起

28:44.400 --> 28:46.400
或者是等了很长一段时间

28:46.400 --> 28:47.400
才会成功

28:47.400 --> 28:48.400
等这段时间

28:48.400 --> 28:50.400
它就是挂起的

28:50.400 --> 28:51.400
我后面的任务

28:51.400 --> 28:52.400
有没有处理的

28:52.400 --> 28:53.400
有处理

28:53.400 --> 28:54.400
但是

28:54.400 --> 28:55.400
它是前面的任务

28:55.400 --> 28:56.400
是挂起的

28:56.400 --> 28:57.400
我也只能挂起

28:59.400 --> 29:01.400
我后面的任务

29:02.400 --> 29:03.400
像这种情况

29:05.400 --> 29:06.400
跟这个人没关系

29:06.400 --> 29:08.400
第三个情况

29:08.400 --> 29:09.400
比较复杂的情况

29:09.400 --> 29:10.400
是什么情况

29:10.400 --> 29:12.400
就是我前面的任务

29:12.400 --> 29:13.400
没有挂起了

29:13.400 --> 29:14.400
要么成功

29:14.400 --> 29:15.400
要么失败

29:15.400 --> 29:18.400
后面也有相关的处理

29:19.400 --> 29:20.400
那么我就看

29:20.400 --> 29:21.400
整个处理过程

29:21.400 --> 29:22.400
处理过程

29:22.400 --> 29:24.400
没有错误

29:24.400 --> 29:25.400
成功

29:25.400 --> 29:26.400
处理过程

29:26.400 --> 29:27.400
有错误

29:27.400 --> 29:28.400
失败

29:28.400 --> 29:29.400
如果说

29:29.400 --> 29:30.400
处理完了过后

29:30.400 --> 29:31.400
你给我返回的是

29:31.400 --> 29:32.400
一个新的Promise

29:32.400 --> 29:33.400
那么我这个情况

29:33.400 --> 29:34.400
就跟新的Promise

29:34.400 --> 29:35.400
是一样的

29:37.400 --> 29:38.400
好

29:38.400 --> 29:40.400
我们好好去处理一下

29:42.400 --> 29:43.400
那么接下来

29:43.400 --> 29:45.400
我们来做一些题

29:46.400 --> 29:47.400
地道题

29:48.400 --> 29:49.400
再鼓舞一下

29:52.710 --> 29:53.710
看一下

29:56.980 --> 29:57.980
能不能根据

29:57.980 --> 29:58.980
我们学过的知识

29:59.980 --> 30:00.980
说出这道题的

30:01.980 --> 30:02.980
输出结果

30:03.980 --> 30:05.980
这里边输出了一些Promise

30:06.980 --> 30:08.980
以后你们在做面试题的时候

30:09.980 --> 30:10.980
反而让你看到

30:10.980 --> 30:12.980
这个问题输出结果是啥

30:13.980 --> 30:14.980
它输出的是Promise

30:14.980 --> 30:15.980
那么你就告诉它

30:15.980 --> 30:16.980
它主要就问你

30:16.980 --> 30:18.980
Promise的状态是什么

30:19.980 --> 30:20.980
它的相关数据

30:20.980 --> 30:22.980
比方成功的数据是啥

30:22.980 --> 30:23.980
失败的原因是啥

30:24.980 --> 30:25.980
它主要是问这个

30:26.980 --> 30:27.980
好 让它看一下

30:28.980 --> 30:31.300
这里有第一个任务

30:31.300 --> 30:32.300
歧视任务

30:32.300 --> 30:34.300
歧视任务是等待一秒钟之后

30:35.300 --> 30:36.300
不成功

30:36.300 --> 30:37.300
那么目前呢

30:37.300 --> 30:38.300
你这样来记

30:38.300 --> 30:40.300
这个歧视任务

30:40.300 --> 30:41.300
目前的状态是啥

30:42.300 --> 30:43.300
所以陪你

30:43.300 --> 30:44.300
对吧

30:44.300 --> 30:45.300
那肯定是没有相关数据了

30:45.300 --> 30:46.300
陪你有什么相关数据

30:47.300 --> 30:49.300
好 针对Promise一做后续处理

30:49.300 --> 30:51.300
就产生了一个Promise二

30:52.300 --> 30:53.300
Promise二的状态

30:53.300 --> 30:54.300
目前是啥

30:54.300 --> 30:56.300
Promise一是挂起

30:56.300 --> 30:57.300
那么毫无疑问

30:58.300 --> 30:59.300
不管是哪一种情况

30:59.300 --> 31:00.300
你自己去看

31:00.300 --> 31:01.300
一二三 三个点

31:01.300 --> 31:02.300
不管是哪一种情况

31:02.300 --> 31:04.300
Promise二也只能挂起

31:06.300 --> 31:07.300
我这个东西看都难得看他

31:08.300 --> 31:09.300
看都不用去看他

31:09.300 --> 31:10.300
Promise一是挂起

31:10.300 --> 31:11.300
Promise二一定是挂起

31:12.300 --> 31:13.300
然后我们再看Promise三

31:14.300 --> 31:15.300
Promise三是哪来的

31:15.300 --> 31:17.300
是针对Promise二的后续处理

31:17.300 --> 31:18.300
就是说

31:18.300 --> 31:19.300
如果说你成功了

31:19.300 --> 31:20.300
我就运行这个

31:21.300 --> 31:22.300
Promise二目前是啥

31:22.300 --> 31:23.300
是平顶

31:23.300 --> 31:24.300
那么产生了Promise三

31:24.300 --> 31:26.300
针对Promise二的后续处理

31:26.300 --> 31:28.300
它也只能是平顶

31:28.300 --> 31:29.300
它是一通电的

31:29.300 --> 31:31.300
Promise二为什么是平顶

31:31.300 --> 31:33.300
因为它要等待Promise一

31:33.300 --> 31:34.300
Promise三为什么是平顶

31:34.300 --> 31:36.300
因为它要等待Promise二

31:36.300 --> 31:38.300
所以三个一定是平顶

31:38.300 --> 31:40.300
因此不看最后一句话

31:41.300 --> 31:42.300
前边

31:42.300 --> 31:44.300
得到的结果一定是三个平顶

31:45.300 --> 31:46.300
对不对

31:46.300 --> 31:47.300
好 接下来我们再看

31:50.300 --> 31:52.990
接下来我们开始运行

31:52.990 --> 31:53.990
哪个回调函数

31:53.990 --> 31:54.990
是不是运行它

31:54.990 --> 31:55.990
一秒钟到了

31:55.990 --> 31:56.990
一秒钟到了过后

31:56.990 --> 31:57.990
我们会怎么样

31:57.990 --> 31:59.990
把Promise一

31:59.990 --> 32:00.990
变成什么

32:03.990 --> 32:04.990
数据是什么

32:04.990 --> 32:05.990
数据是一

32:07.990 --> 32:09.990
Promise一是不是完成了

32:09.990 --> 32:11.990
接下来我们要看一下Promise二

32:11.990 --> 32:15.990
Promise二有没有针对它完成进行处理

32:16.990 --> 32:18.990
如果说Promise二

32:18.990 --> 32:20.990
没有针对它完成进行处理

32:20.990 --> 32:21.990
它只处理了错误

32:21.990 --> 32:22.990
假设是这种情况

32:22.990 --> 32:24.990
或者是这里写的是开启

32:25.990 --> 32:27.990
就是我没有针对它完成进行处理

32:27.990 --> 32:28.990
那么Promise二

32:28.990 --> 32:29.990
那毫无疑问

32:29.990 --> 32:30.990
跟Promise一一样

32:31.990 --> 32:32.990
对吧 只是我们刚才说的

32:32.990 --> 32:33.990
一二三一 第一个点

32:34.990 --> 32:36.990
但是这里不是这样子

32:36.990 --> 32:38.990
这里是我有没有针对Promise一

32:38.990 --> 32:39.990
做后续完成

32:39.990 --> 32:41.990
就是成功做后续处理呢

32:41.990 --> 32:42.990
有

32:43.990 --> 32:44.990
有的话

32:44.990 --> 32:46.990
就是我们把输出打印一下

32:46.990 --> 32:48.990
刚才输出的是

32:48.990 --> 32:50.990
平顶

32:51.990 --> 32:52.990
三个平顶 对吧

32:52.990 --> 32:55.990
三个挂起的Promise

32:55.990 --> 32:58.990
然后现在到了Promise一已经完成了

32:59.990 --> 33:00.990
数据是一

33:00.990 --> 33:01.990
Promise二的状态

33:01.990 --> 33:04.990
它要取决于针对这个成功的后续处理

33:05.990 --> 33:07.990
看一下整个过程有没有错

33:07.990 --> 33:09.990
这过程你觉得会不会有错

33:10.990 --> 33:11.990
不会有错 对吧

33:11.990 --> 33:12.990
它自己输出了啥

33:12.990 --> 33:14.990
输出了它完成的数据一

33:15.990 --> 33:16.990
输出了一

33:17.990 --> 33:19.990
说整个执行过程中没有错误

33:19.990 --> 33:20.990
没有错误毫无疑问

33:20.990 --> 33:22.990
Promise二也会跟着完成

33:24.990 --> 33:25.990
它只取决于

33:26.990 --> 33:28.990
后续处理的过程有没有错

33:28.990 --> 33:30.990
没有错 它就完成

33:30.990 --> 33:32.990
完成之后呢

33:33.990 --> 33:34.990
数据是什么呢

33:34.990 --> 33:35.990
数据是它的返回值

33:36.990 --> 33:37.990
data是1

33:37.990 --> 33:39.990
data是1加1 等于2 返回2

33:39.990 --> 33:41.990
那么它的数据又是2

33:42.990 --> 33:43.990
没了意思吧

33:44.990 --> 33:46.990
好 那么我们再看Promise三

33:46.990 --> 33:47.990
Promise二完成了

33:47.990 --> 33:48.990
是不是要运行这个

33:49.990 --> 33:50.990
那么Promise三的状态

33:50.990 --> 33:52.990
是不是要取决于这个的运行过程

33:54.990 --> 33:55.990
运行过程有没有

33:55.990 --> 33:56.990
运行过程就输出了解

33:57.990 --> 33:59.990
你看Promise二完成的数据是2

33:59.990 --> 34:00.990
那么二就传过来了

34:00.990 --> 34:02.990
Promise二的数据传过来了

34:02.990 --> 34:03.990
那么这里输出2

34:05.990 --> 34:06.990
返回的是什么 onDefine

34:06.990 --> 34:07.990
那么Promise三

34:07.990 --> 34:08.990
它的状态就取决于

34:08.990 --> 34:10.990
取决于这个函数的运行过程

34:10.990 --> 34:11.990
运行过程有错吗

34:11.990 --> 34:12.990
没有错

34:12.990 --> 34:14.990
所以说它也是forFill

34:16.990 --> 34:17.990
onDefine

34:18.990 --> 34:19.990
数据是onDefine

34:21.990 --> 34:23.990
好 那么这就是输出完了

34:23.990 --> 34:25.990
然后等待两秒钟之后

34:25.990 --> 34:26.990
再重新输出状态的话

34:26.990 --> 34:27.990
就输出这么一个状态

34:28.990 --> 34:30.990
forFill的数据1

34:31.990 --> 34:32.990
就这样的记录

34:32.990 --> 34:33.990
数据1

34:33.990 --> 34:35.990
然后forFill的数据2

34:36.990 --> 34:38.990
然后forFill的数据onDefine

34:40.990 --> 34:41.990
好 咱们运行看一下

34:42.990 --> 34:45.560
你看第1个是不是3个平底

34:45.560 --> 34:46.560
然后输出1 2

34:46.560 --> 34:47.560
1 2 onDefine

34:48.560 --> 34:50.870
没问题吧

34:51.870 --> 34:52.870
这就是这么一个场景

34:55.180 --> 34:56.180
通过这道题

34:56.180 --> 34:57.180
大家好好去在学书理一下

34:58.180 --> 34:59.180
那123个点

34:59.180 --> 35:00.180
怎么去运用到面试题当中

35:01.180 --> 35:03.750
好 那么这期题

35:03.750 --> 35:04.750
我们可以再改一下

35:04.750 --> 35:05.750
多改一下

35:06.750 --> 35:07.750
这一题

35:08.750 --> 35:09.750
一直当我来恶心里面

35:09.750 --> 35:10.750
其实好得多

35:12.750 --> 35:13.750
我不是我想恶心里面

35:13.750 --> 35:14.750
是因为这些面试题

35:14.750 --> 35:15.750
本来就挺恶心的

35:16.750 --> 35:18.750
26这一块就是这个麻烦

35:19.750 --> 35:20.750
但是只要过去了

35:20.750 --> 35:21.750
就没啥了

35:21.750 --> 35:22.750
我多恶心里面一下

35:23.750 --> 35:24.750
避免以后

35:24.750 --> 35:25.750
多练里面一下

35:26.750 --> 35:27.750
避免以后被面试关了

35:29.750 --> 35:30.750
被我练其实没啥

35:30.750 --> 35:31.750
对吧

35:32.750 --> 35:33.750
好 再来

35:33.750 --> 35:34.750
我们这里比方说

35:34.750 --> 35:35.750
我就随便改一下

35:35.750 --> 35:36.750
把它改成开启

35:37.750 --> 35:38.750
好 又来说

35:38.750 --> 35:42.090
说结果

35:42.090 --> 35:43.090
好 又来吧

35:43.090 --> 35:44.090
我们再来平行一次

35:44.090 --> 35:45.090
Promise1一开

35:45.090 --> 35:46.090
状态是什么了

35:46.090 --> 35:47.090
状态

35:47.090 --> 35:48.090
肯定是平定吗

35:48.090 --> 35:50.090
Promise2肯定是平定

35:50.090 --> 35:52.090
就前面这个任务没完成

35:52.090 --> 35:53.090
后面的任务一定是平定

35:53.090 --> 35:54.090
一定是没完成的

35:55.090 --> 35:56.090
Promise3一定是平定

35:56.090 --> 35:57.090
这个毫无疑问

35:57.090 --> 35:58.090
所以说一开始输出

35:58.090 --> 35:59.090
平定

35:59.090 --> 36:00.090
平定

36:00.090 --> 36:01.090
这个不变

36:01.090 --> 36:02.090
好 接下来

36:02.090 --> 36:03.090
Promise1是不是完成了

36:03.090 --> 36:04.090
完成了

36:04.090 --> 36:05.090
Filled

36:06.090 --> 36:07.090
数据为1

36:08.090 --> 36:10.090
接下来看Promise2

36:10.090 --> 36:12.090
Promise2有没有针对

36:12.090 --> 36:14.090
Promise1的完成

36:14.090 --> 36:15.090
做处理

36:16.090 --> 36:17.090
没有

36:17.090 --> 36:19.090
没有针对它的完成做处理

36:19.090 --> 36:20.090
所以说Promise2的状态

36:20.090 --> 36:21.090
也是完成

36:22.090 --> 36:23.090
跟Promise1一模一样

36:23.090 --> 36:24.090
数据也是一

36:25.090 --> 36:26.090
对吧

36:26.090 --> 36:28.090
然后Promise3有没有针对

36:29.090 --> 36:30.090
Promise2的完成

36:31.090 --> 36:32.090
做处理

36:32.090 --> 36:33.090
有

36:34.090 --> 36:35.090
那么输出

36:35.090 --> 36:37.090
输出完成的数据1

36:37.090 --> 36:38.090
所以说这里会输出1

36:39.090 --> 36:40.090
Promise3的状态取决于

36:40.090 --> 36:42.090
这个函数的运行结果

36:42.090 --> 36:43.090
运行过程又没有错

36:43.090 --> 36:45.090
运行过程没有错

36:45.090 --> 36:47.090
所以说得到Filled

36:47.090 --> 36:48.090
然后呢

36:48.090 --> 36:49.090
数据是onD犯的

36:51.590 --> 36:52.590
因此最后是输出

36:53.590 --> 36:54.590
1

36:54.590 --> 36:55.590
1onD犯的

36:56.590 --> 36:57.590
看一下

36:58.590 --> 36:59.590
三个平定

36:59.590 --> 37:00.590
然后输出1

37:00.590 --> 37:01.590
1

37:01.590 --> 37:02.590
onD犯的

37:03.590 --> 37:04.590
对吧

37:05.590 --> 37:06.590
好 再来

37:06.590 --> 37:07.590
再来

37:08.590 --> 37:09.590
多来几个

37:11.590 --> 37:12.590
这边呢

37:12.590 --> 37:13.590
我就

37:16.350 --> 37:17.350
我直接看第二题吧

37:17.350 --> 37:18.350
第二题就是说了时间

37:19.350 --> 37:20.350
我把这个题

37:21.350 --> 37:22.350
题再复制一份

37:23.350 --> 37:24.350
看这边

37:24.350 --> 37:26.350
有我改来改去的

37:29.350 --> 37:30.350
就这条题

37:30.350 --> 37:31.350
我再来一下

37:31.350 --> 37:32.350
再来一下

37:33.350 --> 37:34.350
我这样子

37:35.350 --> 37:36.350
我这边呢去

37:37.350 --> 37:38.350
抛一个错

37:42.780 --> 37:43.780
使用

37:44.780 --> 37:46.780
你看这下面一个代码变暗了

37:46.780 --> 37:47.780
对吧

37:47.780 --> 37:48.780
为什么变暗了

37:48.780 --> 37:49.780
是因为

37:49.780 --> 37:50.780
它后边代码就没法执行了

37:50.780 --> 37:51.780
为什么

37:51.780 --> 37:52.780
因为这里爆错了

37:52.780 --> 37:54.780
爆错了它就没法执行了

37:54.780 --> 37:55.780
好 再来

37:55.780 --> 37:56.780
看这个情况

37:59.150 --> 38:00.150
一开始还是一样

38:00.150 --> 38:01.150
Promise1是平顶

38:01.150 --> 38:02.150
它也跟着是平顶

38:02.150 --> 38:03.150
它也跟着是平顶

38:03.150 --> 38:04.150
一开始不变

38:04.150 --> 38:05.150
好 就看后边了

38:08.170 --> 38:09.170
它完成了

38:09.170 --> 38:11.170
完成过是不是要运行它

38:11.170 --> 38:14.170
运行它的过程中

38:14.170 --> 38:15.170
有没有爆错

38:15.170 --> 38:16.170
就爆了一个错误

38:16.170 --> 38:17.170
错误是

38:17.170 --> 38:18.170
远一是三

38:18.170 --> 38:19.170
就把错误对象是三

38:19.170 --> 38:21.170
所以说Promise2

38:21.170 --> 38:22.170
什么状态

38:23.170 --> 38:25.170
就下面的代码不用看

38:25.170 --> 38:26.170
根本不会运行

38:26.170 --> 38:27.170
因为它爆错了

38:27.170 --> 38:28.170
后边代码不会运行

38:29.170 --> 38:31.170
它是失败了

38:31.170 --> 38:32.170
失败了过后了

38:32.170 --> 38:34.170
它失败的原因是3

38:35.170 --> 38:37.170
然后它失败了

38:37.170 --> 38:39.170
然后看一下Promise3

38:39.170 --> 38:40.170
Promise3

38:40.170 --> 38:41.170
有没有针对失败

38:41.170 --> 38:43.170
它的失败进行处理

38:43.170 --> 38:44.170
是不是没有

38:44.170 --> 38:45.170
没有针对Promise2的

38:45.170 --> 38:46.170
失败进行处理

38:46.170 --> 38:48.170
所以说Promise3

38:48.170 --> 38:50.170
回到这种情况

38:50.170 --> 38:51.170
第一个情况

38:51.170 --> 38:52.170
没有相关处理

38:53.170 --> 38:55.170
那么Promise3的状态

38:55.170 --> 38:57.170
跟Promise2完全一致

38:58.170 --> 38:59.170
原因也是3

39:00.170 --> 39:01.170
最终输出结果就是

39:01.170 --> 39:03.170
这里没有输出了

39:03.170 --> 39:06.540
那么就是评计

39:06.540 --> 39:07.540
然后一

39:07.540 --> 39:12.420
三

39:12.420 --> 39:13.420
二

39:13.420 --> 39:14.420
三

39:14.420 --> 39:15.420
前面有些警告

39:15.420 --> 39:16.420
他告诉你

39:16.420 --> 39:17.420
有些很多Promise

39:17.420 --> 39:19.420
没有处理他的错误

39:22.370 --> 39:23.370
明白了意思吧

39:23.370 --> 39:24.370
好 这样我们看第二题

39:25.370 --> 39:26.370
第二题

39:26.370 --> 39:28.370
最后来解决针对的问题

39:28.370 --> 39:29.370
第二题

39:29.370 --> 39:30.370
是这样子写的

39:31.370 --> 39:32.370
这就形成一个链式

39:32.370 --> 39:33.370
链式调用了

39:33.370 --> 39:35.370
为什么能这样子写

39:35.370 --> 39:36.370
刚才不是要一个变量

39:36.370 --> 39:37.370
一个变量拿到吗

39:37.370 --> 39:39.370
其实本质上是一样的

39:39.370 --> 39:40.370
你看好就这个题

39:41.370 --> 39:42.370
Promise1

39:42.370 --> 39:44.370
这是Promise1

39:45.370 --> 39:47.370
这个是不是Promise1

39:47.370 --> 39:49.370
是不是可以替换到这

39:49.370 --> 39:52.940
这个玩意是不是Promise2

39:52.940 --> 39:54.940
是不是可以替换到这

39:56.940 --> 40:01.210
不就形成这个样子了吗

40:01.210 --> 40:03.210
实际上可以的

40:03.210 --> 40:04.210
都是用表达式

40:04.210 --> 40:05.210
这是一个Promise

40:05.210 --> 40:06.210
调用任过后

40:06.210 --> 40:07.210
任方法是不是

40:07.210 --> 40:08.210
返回一个新的Promise

40:08.210 --> 40:10.210
说这也是个Promise

40:10.210 --> 40:12.210
Promise是不是有开启方法

40:12.210 --> 40:13.210
那么开启方法跟任方法

40:13.210 --> 40:14.210
本质上是一样的

40:14.210 --> 40:15.210
刚才说了

40:15.210 --> 40:16.210
之前就说了

40:16.210 --> 40:17.210
所以说他也会返回一个Promise

40:17.210 --> 40:18.210
说这里也会继续调用正

40:18.210 --> 40:20.210
这就是一个链式变成

40:20.210 --> 40:22.210
就前面返回的

40:22.210 --> 40:24.210
每一步返回的都是一个Promise

40:24.210 --> 40:26.210
所以我们可以一次写

40:26.210 --> 40:28.210
那么请问这个代码返回啥

40:28.210 --> 40:30.210
输出啥

40:35.060 --> 40:36.060
好 我们来看一下

40:39.710 --> 40:40.710
这个Promise

40:40.710 --> 40:42.710
我们把它叫做Promise1

40:43.710 --> 40:44.710
成功没

40:44.710 --> 40:45.710
成功了吧

40:45.710 --> 40:46.710
它一出来就成功了

40:47.710 --> 40:48.710
Fulfilled

40:48.710 --> 40:51.090
数据是啥

40:51.090 --> 40:52.090
是1

40:52.090 --> 40:54.090
针对这个Promise

40:54.090 --> 40:56.090
是不是产生了一个后续处理

40:56.090 --> 40:58.090
这个Promise有个任方法

40:58.090 --> 40:59.090
进行后续处理

40:59.090 --> 41:00.090
那么这个任方法

41:00.090 --> 41:02.090
会是不是返回一个Promise2

41:03.090 --> 41:05.090
也会返回一个任务对象

41:05.090 --> 41:06.090
那么它是

41:06.090 --> 41:07.090
这个新的任务是成功了

41:07.090 --> 41:08.090
还是失败了

41:08.090 --> 41:10.090
那取决于

41:10.090 --> 41:11.090
前面那个任务

41:11.090 --> 41:12.090
前面的任务成功没

41:12.090 --> 41:13.090
成功了

41:13.090 --> 41:14.090
成功了就要进行后续处理

41:14.090 --> 41:16.090
那么我们看后续处理

41:16.090 --> 41:17.090
这个后续处理过程中有错吗

41:18.090 --> 41:19.090
没错吧

41:19.090 --> 41:20.090
没错的话

41:22.090 --> 41:23.090
是不是它也成功

41:24.090 --> 41:25.090
数据是啥

41:25.090 --> 41:26.090
数据它返回的值

41:27.090 --> 41:28.090
Promise2

41:28.090 --> 41:30.090
然后针对Promise2

41:30.090 --> 41:31.090
也有后续处理

41:31.090 --> 41:32.090
是个开启

41:32.090 --> 41:34.090
也是有后续处理的

41:34.090 --> 41:35.090
那么这个开启方法

41:35.090 --> 41:37.090
会是不是返回一个Promise3

41:37.090 --> 41:39.720
Promise3的状态

41:39.720 --> 41:41.720
是不是要针对Promise2

41:41.720 --> 41:42.720
进行后续处理

41:43.720 --> 41:45.720
但它只处理失败

41:45.720 --> 41:47.720
Promise2失败了吗

41:47.720 --> 41:48.720
没失败

41:48.720 --> 41:49.720
它成功了

41:49.720 --> 41:50.720
那有没有针对Promise2

41:50.720 --> 41:51.720
进行成功的处理

41:51.720 --> 41:52.720
没有

41:52.720 --> 41:54.720
我只进行失败的处理

41:55.720 --> 41:57.720
所以说Promise3的状态

41:57.720 --> 42:00.720
由于它没有针对成功的处理

42:00.720 --> 42:03.720
所以它的状态跟Promise2一致

42:03.720 --> 42:04.720
就是第1种情况

42:04.720 --> 42:06.720
数据也一致

42:07.720 --> 42:09.720
然后针对Promise3

42:09.720 --> 42:11.720
又返回Promise

42:11.720 --> 42:13.720
又交一个任务方法返回一个什么

42:13.720 --> 42:15.720
返回一个Promise4

42:21.230 --> 42:23.230
返回Promise4

42:23.230 --> 42:24.230
Promise4的状态

42:24.230 --> 42:26.230
是不是取决于Promise3

42:26.230 --> 42:28.230
Promise3成功了吗

42:28.230 --> 42:29.230
成功了

42:29.230 --> 42:31.230
有没有针对它进行后续处理呢

42:31.230 --> 42:32.230
不就要后续处理吗

42:32.230 --> 42:33.230
所以Promise4的状态

42:33.230 --> 42:34.230
取决于什么

42:34.230 --> 42:37.230
取决于这个后续处理的过程

42:37.230 --> 42:38.230
有没有爆错

42:38.230 --> 42:39.230
有没有爆错

42:39.230 --> 42:40.230
没有爆错

42:40.230 --> 42:41.230
没有爆错就成功

42:42.230 --> 42:43.230
结果是多少

42:43.230 --> 42:44.230
结果是

42:44.230 --> 42:46.230
结果返回的结果是安静范

42:46.230 --> 42:49.540
那么输出啥

42:49.540 --> 42:50.540
那你看输出啥

42:51.540 --> 42:52.540
这个Promise成功了

42:52.540 --> 42:53.540
数据为1

42:53.540 --> 42:55.540
那么这里是不是就输出

42:55.540 --> 42:57.540
它成功之后就输出1

42:57.540 --> 42:59.540
输出1

42:59.540 --> 43:00.540
然后返回2

43:00.540 --> 43:02.540
是不是导致这个Promise得到结果是2

43:02.540 --> 43:03.540
然后呢

43:03.540 --> 43:04.540
错误处理

43:04.540 --> 43:05.540
有没有错误处理

43:05.540 --> 43:06.540
没有错误处理

43:06.540 --> 43:07.540
它没有错误

43:07.540 --> 43:09.540
所以这个函数不执行

43:09.540 --> 43:10.540
然后Z

43:10.540 --> 43:11.540
这边

43:11.540 --> 43:12.540
这个函数要执行

43:12.540 --> 43:13.540
这个函数执行的时候

43:13.540 --> 43:15.540
是不是得到Promise3的

43:16.540 --> 43:17.540
数据

43:17.540 --> 43:18.540
输出2

43:18.540 --> 43:19.540
输出1和2

43:19.540 --> 43:23.300
那如果说我这里

43:23.300 --> 43:25.300
把个题再加深一下

43:25.300 --> 43:26.300
我这里得到Promise3

43:26.300 --> 43:27.300
最后呢

43:27.300 --> 43:28.300
我们用Z摊帽子

43:28.300 --> 43:29.300
一秒钟之后

43:29.300 --> 43:30.300
我们输出Promise3

43:30.300 --> 43:32.300
请问它的状态和数据是什么

43:36.280 --> 43:37.280
可蒙了没

43:37.280 --> 43:38.280
同学们

43:38.280 --> 43:39.280
这个Promise3

43:39.280 --> 43:40.280
不就是最后一个

43:40.280 --> 43:41.280
方法返回的东西吗

43:41.280 --> 43:43.280
不就是个Promise4吗

43:43.280 --> 43:44.280
不就是吗

43:44.280 --> 43:45.280
你调用一个函

43:45.280 --> 43:47.280
比方说我们这样写单

43:47.280 --> 43:58.540
这个表达式的结果

43:58.540 --> 44:00.540
不就是这个函数的返回结果吗

44:00.540 --> 44:02.540
它的返回东西

44:02.540 --> 44:03.540
返回个对象

44:03.540 --> 44:05.540
调用对象的BBB的方法

44:05.540 --> 44:06.540
BBB返回个对象

44:06.540 --> 44:08.540
调用它的CCC的方法

44:08.540 --> 44:09.540
它返回个对象

44:09.540 --> 44:10.540
调用DGD的方法

44:10.540 --> 44:12.540
这就是个表达式的结果

44:12.540 --> 44:14.540
所以就是Promise4

44:14.540 --> 44:16.540
要fulfill onDefine

44:18.540 --> 44:20.540
或者说

44:21.540 --> 44:22.540
这道题

44:24.540 --> 44:25.540
下面这道题

44:26.540 --> 44:27.540
有来看

44:28.540 --> 44:30.540
只是其实我们这里都讲完了

44:30.540 --> 44:32.540
现在我们就说不断的去加深这个印象

44:36.900 --> 44:37.900
看这道题

44:40.980 --> 44:41.980
有来吧

44:41.980 --> 44:42.980
有来

44:45.550 --> 44:46.550
这个Promise

44:46.550 --> 44:48.550
我们把它称之为Promise1

44:48.550 --> 44:52.760
然后它的状态

44:52.760 --> 44:53.760
fulfill的

44:53.760 --> 44:54.760
数据

44:57.140 --> 44:59.140
然后对调用它的Zin

44:59.140 --> 45:01.140
这个Zin是不是返回一个新的Promise

45:02.140 --> 45:04.140
针对Promise1进行后续处理

45:05.140 --> 45:06.140
对吧

45:06.140 --> 45:07.140
称之为Promise2

45:07.140 --> 45:09.140
它的状态是不是取决于

45:09.140 --> 45:11.140
后续处理的过程

45:11.140 --> 45:13.140
因为它有后续处理

45:13.140 --> 45:16.140
所以取决它后续处理的过程

45:16.140 --> 45:19.020
那么

45:19.020 --> 45:20.020
这个处理的过程是不是没

45:20.020 --> 45:21.020
看一下有没有错

45:21.020 --> 45:22.020
对

45:22.020 --> 45:23.020
看一下有没有错误

45:23.020 --> 45:25.020
这个处理的过程有没有错误

45:26.020 --> 45:27.020
那么没有错误

45:27.020 --> 45:28.020
我们好好看一下

45:29.020 --> 45:32.020
它是针对Promise1的后续处理

45:32.020 --> 45:34.020
Promise1的数据是什么

45:34.020 --> 45:35.020
OnDefine

45:35.020 --> 45:37.020
那么也就是Ris是OnDefine

45:37.020 --> 45:39.020
我们要输出一个OnDefine的

45:39.020 --> 45:40.020
投尸菌

45:40.020 --> 45:41.020
是不是爆错了这句话

45:41.020 --> 45:43.020
这句话是不是会爆错

45:44.020 --> 45:46.020
那么导致Promise2是什么

45:46.020 --> 45:47.020
Rejected

45:48.020 --> 45:50.020
原因就是你不能

45:51.020 --> 45:52.020
你就不能

45:52.020 --> 45:54.020
读取OnDefine的投尸菌方法

45:54.020 --> 45:56.020
对它的错误原因是一个错误对象

45:57.020 --> 45:59.020
由于Promise2是Rejected

45:59.020 --> 46:01.020
所以说导致Promise3

46:02.020 --> 46:03.020
这是Promise3

46:03.020 --> 46:05.020
针对Promise2的后续处理

46:06.020 --> 46:07.020
处理什么

46:07.020 --> 46:08.020
处理错误

46:08.020 --> 46:09.020
Promise2是不是有

46:09.020 --> 46:10.020
是错误了

46:10.020 --> 46:11.020
那么Promise3

46:12.020 --> 46:14.020
是不是会取决于运行这个函数

46:14.020 --> 46:16.020
这个函数的运行过程中有错误吗

46:17.020 --> 46:18.020
没有错误

46:18.020 --> 46:20.020
没有错误就是Fulfilled

46:24.960 --> 46:28.960
Promise3的状态取决于针对Promise2的后续处理

46:29.960 --> 46:32.960
这是不是针对Promise2的后续处理

46:33.960 --> 46:34.960
Promise2爆错了吗

46:34.960 --> 46:36.960
所以说这里要处理的错误

46:36.960 --> 46:38.960
处理的过程中也处理OK了

46:38.960 --> 46:40.960
就是你有错不怕

46:40.960 --> 46:41.960
只要改了就行

46:41.960 --> 46:42.960
你有错了

46:42.960 --> 46:43.960
但是我处理好了

46:43.960 --> 46:44.960
那就没有错误了

46:45.960 --> 46:46.960
Promise3是Fulfilled

46:47.960 --> 46:48.960
完成了

46:48.960 --> 46:49.960
数据是反悔结果

46:53.230 --> 46:56.800
然后Promise4

47:00.110 --> 47:01.110
Promise4

47:02.110 --> 47:04.110
针对Promise3进行后续处理

47:04.110 --> 47:05.110
Promise3完成了

47:05.110 --> 47:07.110
这就是运行完成的代码

47:07.110 --> 47:09.110
运行过程中没有错误

47:09.110 --> 47:10.110
输出几

47:11.110 --> 47:15.110
然后Promise4就得到的结果就是完成

47:17.550 --> 47:18.550
数据是什么

47:19.550 --> 47:20.550
它没有返回吗

47:21.550 --> 47:22.550
我们看一下输出3

47:24.550 --> 47:25.550
输出3是肯定的

47:27.550 --> 47:29.550
好 接下来我们看一下得到

47:32.930 --> 47:34.930
一秒钟之后我输出Promise2

47:35.930 --> 47:36.930
它的状态是什么

47:36.930 --> 47:37.930
它的状态就是Fulfilled

47:37.930 --> 47:38.930
就是Promise4

47:39.930 --> 47:40.930
我们看一下

47:42.930 --> 47:43.930
好好去输理一下

47:43.930 --> 47:44.930
下面得到的

47:47.930 --> 47:55.210
又来我反复了个分析

47:55.210 --> 47:56.210
这样的分析就把它掌握好了

47:57.210 --> 47:58.210
这个Promise

47:59.210 --> 48:00.210
Promise1

48:01.210 --> 48:03.210
这里边既没有调用为之后

48:03.210 --> 48:04.210
既没有调用为建设

48:04.210 --> 48:06.210
那么这里的逻辑是一样的

48:06.210 --> 48:07.210
逻辑一样

48:08.210 --> 48:09.210
就看它有没有抱错

48:10.210 --> 48:11.210
有抱错了

48:11.210 --> 48:12.210
那就是错误

48:12.210 --> 48:13.210
那就是失败的

48:14.210 --> 48:15.210
执行的过程中

48:15.210 --> 48:16.210
你看这个任务都执行不下去了

48:16.210 --> 48:17.210
是不是抱错了

48:17.210 --> 48:18.210
就执行不下去了

48:18.210 --> 48:19.210
那么就失败

48:20.210 --> 48:21.210
没什么意思吧

48:21.210 --> 48:22.210
所以说这里

48:24.210 --> 48:25.210
这个新的任务

48:25.210 --> 48:26.210
这边

48:27.210 --> 48:28.210
是不是失败的

48:28.210 --> 48:29.210
这些个题

48:31.520 --> 48:32.520
然后失败的原因是什么

48:32.520 --> 48:34.520
原因是一个错误对象

48:36.520 --> 48:38.520
是这么一个错误对象

48:39.520 --> 48:40.520
这是第一个Promise

48:41.520 --> 48:42.520
第二个Promise

48:43.520 --> 48:45.520
是针对第一个Promise产生

48:45.520 --> 48:46.520
做了后续处理

48:47.520 --> 48:49.520
说如果说你成功了

48:49.520 --> 48:50.520
我就运行这个

48:50.520 --> 48:51.520
他成功了吗

48:52.520 --> 48:53.520
没成功

48:53.520 --> 48:54.520
那他失败了运行啥

48:54.520 --> 48:55.520
没有运行的

48:55.520 --> 48:56.520
对吧

48:56.520 --> 48:57.520
是不是没有针对失败

48:57.520 --> 48:58.520
进行后续处理

48:58.520 --> 49:00.520
那么Promise2有什么情况

49:01.520 --> 49:02.520
看一下这个123

49:02.520 --> 49:03.520
那个三个点

49:03.520 --> 49:04.520
哪个情况

49:04.520 --> 49:06.520
没有针对他的相关

49:06.520 --> 49:08.520
结果进行后续处理

49:08.520 --> 49:10.520
那么他的结果就跟他一致

49:13.730 --> 49:15.730
我们要看针对Promise2进行

49:15.730 --> 49:16.730
后续处理

49:16.730 --> 49:17.730
是不是Promise3

49:18.730 --> 49:20.730
针对Promise2的后续处理

49:21.730 --> 49:23.730
那么Promise2

49:23.730 --> 49:24.730
是不是失败了

49:24.730 --> 49:26.730
有没有针对失败进行处理

49:26.730 --> 49:28.730
是不是针对失败进行处理了

49:28.730 --> 49:29.730
对不对

49:29.730 --> 49:31.730
那么我们就看处理的过程

49:31.730 --> 49:32.730
处理的过程有爆错吗

49:35.300 --> 49:36.300
是不是有爆错

49:36.300 --> 49:37.300
他抛了一个什么

49:37.300 --> 49:38.300
抛了一个错误

49:38.300 --> 49:39.300
这错误是啥

49:39.300 --> 49:40.300
什么来自于这

49:40.300 --> 49:41.300
对吧

49:41.300 --> 49:42.300
就这个玩意

49:42.300 --> 49:44.300
他把传到Aero里边去了

49:44.300 --> 49:45.300
你要针对错误进行处理

49:45.300 --> 49:46.300
这就是错误原因

49:46.300 --> 49:47.300
你去处理呗

49:47.300 --> 49:48.300
我传给你的

49:49.300 --> 49:51.300
那么你结果你把错误重庆

49:51.300 --> 49:52.300
抛出来了

49:52.300 --> 49:53.300
所以说

49:53.300 --> 49:54.300
由于他执行的过程中

49:54.300 --> 49:55.300
包了错

49:55.300 --> 49:57.300
Promise3也是这一个体的

49:58.300 --> 49:59.300
数据人家一样

49:59.300 --> 50:00.300
他包了什么错

50:00.300 --> 50:02.300
他的数据就是什么数据

50:03.300 --> 50:04.300
这和Promise4

50:04.300 --> 50:06.300
针对Promise3进行后续处理

50:06.300 --> 50:07.300
就这一块

50:07.300 --> 50:11.950
Promise3是什么情况

50:11.950 --> 50:12.950
失败了

50:12.950 --> 50:13.950
我有针对失败进行处理吗

50:13.950 --> 50:14.950
没有

50:14.950 --> 50:15.950
我只是针对成功进行处理的

50:15.950 --> 50:17.950
成功关我了事

50:17.950 --> 50:18.950
没有意义对吧

50:18.950 --> 50:20.950
所以说我这里呢

50:21.950 --> 50:23.950
Promise4也是失败

50:23.950 --> 50:27.220
所以说这个题

50:27.220 --> 50:28.220
输出啥

50:28.220 --> 50:29.220
啥都不会输出

50:29.220 --> 50:31.220
这个函数运行不了

50:31.220 --> 50:32.220
因为他前面失败了

50:32.220 --> 50:34.220
他只是成功之后运行的

50:34.220 --> 50:35.220
前面失败了

50:35.220 --> 50:36.220
他不会运行

50:37.220 --> 50:38.220
这个函数倒是会运行

50:38.220 --> 50:39.220
他又抛了个错误

50:39.220 --> 50:41.220
导致Promise3也跟着失败

50:42.220 --> 50:43.220
这个函数运行不了

50:43.220 --> 50:44.220
因为前面的失败了

50:45.220 --> 50:46.220
前面Promise3失败了

50:47.220 --> 50:48.220
所以说他这个成功

50:48.220 --> 50:49.220
不会运行

50:49.220 --> 50:50.220
啥都不会输出

50:50.220 --> 50:51.220
那如果说问你

50:52.220 --> 50:55.220
最终Promise什么状态

50:55.220 --> 50:56.220
我就不写了

50:56.220 --> 50:57.220
就这个状态

51:00.180 --> 51:02.180
然后我在这边再来一哥吧

51:02.180 --> 51:04.180
比方说我这里呢

51:05.180 --> 51:08.130
我没有报处

51:10.130 --> 51:11.130
我没有报处

51:12.130 --> 51:13.130
我这里有肥肉

51:16.400 --> 51:17.400
那这又会怎么样呢

51:17.400 --> 51:19.840
又来呗

51:19.840 --> 51:20.840
又来呗

51:21.840 --> 51:23.840
Promise1完成了吧

51:24.840 --> 51:25.840
数据是啥 1

51:26.840 --> 51:27.840
Promise2

51:27.840 --> 51:28.840
告诉我

51:28.840 --> 51:29.840
什么情况

51:30.840 --> 51:31.840
对完成有没有处理

51:31.840 --> 51:32.840
有处理

51:33.840 --> 51:34.840
那么直径过程中报处了吗

51:35.840 --> 51:36.840
有时候都报处了

51:36.840 --> 51:37.840
哪里报处了呀

51:38.840 --> 51:40.840
这个数据当然毫不疑问是1

51:40.840 --> 51:41.840
对吧

51:41.840 --> 51:42.840
1传过去了

51:42.840 --> 51:43.840
这个过程哪里报处了呀

51:44.840 --> 51:45.840
他不是srew

51:45.840 --> 51:47.840
srew才是pullsrew才会报处

51:47.840 --> 51:48.840
他是返回

51:48.840 --> 51:50.840
Error只不过是一个对象而已

51:51.840 --> 51:53.840
跟普通对象没有什么本质的区别

51:54.840 --> 51:55.840
它就是一个对象

51:55.840 --> 51:56.840
你返回了一个对象而已

51:56.840 --> 51:58.840
所以Promise2是完成的

51:59.840 --> 52:00.840
完成的

52:00.840 --> 52:01.840
它的数据是什么

52:01.840 --> 52:03.840
数据是一个Error对象

52:05.840 --> 52:06.840
因此它输出了多少

52:06.840 --> 52:07.840
输出了1

52:07.840 --> 52:08.840
输出了成功的结果1

52:09.840 --> 52:10.840
然后完成了

52:10.840 --> 52:11.840
返回的

52:11.840 --> 52:13.840
它的相关数据是一个错误对象

52:13.840 --> 52:15.840
它没有抛出错误

52:15.840 --> 52:17.840
它只是返回的错误

52:18.840 --> 52:20.840
然后Promise3

52:20.840 --> 52:22.840
它只是针对错误进行处理

52:22.840 --> 52:24.840
对成功有没有处理

52:24.840 --> 52:25.840
对成功没有处理

52:25.840 --> 52:28.840
所以Promise3的状态跟Promise2是一样的

52:33.470 --> 52:34.470
然后Promise4

52:35.470 --> 52:37.470
针对Promise3进行处理

52:38.470 --> 52:39.470
针对Promise3进行处理

52:40.470 --> 52:41.470
成功吗

52:41.470 --> 52:42.470
成功了

52:42.470 --> 52:43.470
就运行这个函数

52:43.470 --> 52:44.470
运行的过程中

52:44.470 --> 52:45.470
它输出了多少

52:45.470 --> 52:46.470
输出了一个Error对象

52:47.470 --> 52:49.470
然后整个过程中有没有错误

52:49.470 --> 52:50.470
没有错误

52:50.470 --> 52:52.470
所以Promise4也是成功的

52:52.470 --> 52:56.100
数据是RM

52:56.100 --> 52:58.100
因为它返回的是RM

52:59.100 --> 53:00.100
好运行看一下

53:03.100 --> 53:04.100
好好去处理

53:04.100 --> 53:05.100
好好去处理

53:05.100 --> 53:07.100
其实终点就是123个点

53:07.100 --> 53:08.100
这三个点你清楚了

53:08.100 --> 53:10.100
你所有的这一块的面试题

53:10.100 --> 53:11.100
都不用怕了

53:12.100 --> 53:13.100
无论它怎么出

53:13.100 --> 53:14.100
因为你要说

53:14.100 --> 53:15.100
你把所有面试题

53:15.100 --> 53:16.100
各种情况的面试题做完

53:16.100 --> 53:17.100
那是不可能的

53:18.100 --> 53:19.100
就出了几千几百块

53:20.100 --> 53:21.100
但是你只要掌握了

53:21.100 --> 53:22.100
它的核心原理的话

53:22.100 --> 53:23.100
随便它怎么出

53:23.100 --> 53:24.100
就不会如错了

53:24.100 --> 53:26.100
那最后来我们来看一下

53:26.100 --> 53:28.100
针对这个练试的Promise

53:28.100 --> 53:29.100
平时我们写代码

53:29.100 --> 53:31.100
真的是这样子写吗

53:31.100 --> 53:32.100
不至于

53:32.100 --> 53:34.100
我跟你们说平时写代码

53:34.100 --> 53:35.100
其实很简单

53:36.100 --> 53:37.100
就是我有个任务

53:37.100 --> 53:39.100
然后我就丢它进行处理

53:39.100 --> 53:40.100
我怎么处理

53:40.100 --> 53:41.100
这个任务

53:41.100 --> 53:42.100
如果说成功了

53:42.100 --> 53:43.100
我就这样做

53:43.100 --> 53:44.100
失败了

53:44.100 --> 53:45.100
我就这样做

53:46.100 --> 53:47.100
为什么可以这样子写

53:48.100 --> 53:49.100
就是这种写法

53:49.100 --> 53:52.100
其实类似于这种写法

53:53.100 --> 53:55.100
就成功了我这样的写

53:55.100 --> 53:56.100
这样处理

53:56.100 --> 53:57.100
失败了我这样处理

53:58.100 --> 53:59.100
原来的意思

53:59.100 --> 54:01.100
那为什么也可以这样子写

54:01.100 --> 54:02.100
你看吧

54:02.100 --> 54:03.100
如果说它成功了

54:03.100 --> 54:04.100
是不是会运行它

54:05.100 --> 54:06.100
对不对

54:06.100 --> 54:07.100
那就没问题吧

54:07.100 --> 54:08.100
它不会运

54:08.100 --> 54:09.100
它会运行它

54:09.100 --> 54:10.100
对吧

54:10.100 --> 54:12.100
除非它处理的过程中有问题

54:12.100 --> 54:13.100
它就会

54:13.100 --> 54:14.100
除非它处理的过程中有

54:14.100 --> 54:15.100
除了问题

54:15.100 --> 54:16.100
那么就会导致

54:16.100 --> 54:17.100
前面的任务失败

54:17.100 --> 54:18.100
就会运行它

54:18.100 --> 54:19.100
如果说没有问题的话

54:19.100 --> 54:20.100
一般来说都没有什么问题

54:20.100 --> 54:21.100
就说

54:21.100 --> 54:22.100
如果它成功了

54:22.100 --> 54:23.100
是不是会运行它

54:23.100 --> 54:24.100
这个没问题吧

54:24.100 --> 54:25.100
如果说它失败了

54:25.100 --> 54:26.100
我这里是不是没有

54:26.100 --> 54:28.100
针对它失败进行处理

54:29.100 --> 54:30.100
我这里面是不是只写了

54:30.100 --> 54:31.100
一个回调

54:31.100 --> 54:33.100
没有针对它的失败进行处理

54:33.100 --> 54:34.100
那么这个

54:34.100 --> 54:35.100
这个任方法

54:35.100 --> 54:37.100
返回了新的Promise

54:37.100 --> 54:38.100
是不是跟原来的Promise

54:38.100 --> 54:39.100
一样

54:39.100 --> 54:40.100
状态一样

54:41.100 --> 54:43.100
其实我们平时写代码的时候

54:43.100 --> 54:45.100
没有去想那么细

54:45.100 --> 54:46.100
包括我

54:46.100 --> 54:47.100
我知不知道

54:47.100 --> 54:48.100
我当然不知道

54:48.100 --> 54:49.100
我要给你分析

54:49.100 --> 54:50.100
我给你分析的投试到

54:50.100 --> 54:52.100
但是我不会去想那么细的

54:52.100 --> 54:53.100
我们平时写代码的时候

54:53.100 --> 54:54.100
怎么写

54:54.100 --> 54:55.100
就是写到Promise

54:55.100 --> 54:56.100
成功了

54:56.100 --> 54:57.100
然后做什么失败了

54:57.100 --> 54:58.100
然后做什么

54:58.100 --> 54:59.100
我就直接这样写完了

54:59.100 --> 55:00.100
我不会去想

55:00.100 --> 55:01.100
这个任方法的

55:01.100 --> 55:02.100
一个新的Promise

55:02.100 --> 55:03.100
它的状态是什么

55:03.100 --> 55:04.100
我不会去这样想的

55:04.100 --> 55:05.100
我只有做面试体的时候

55:05.100 --> 55:07.100
我会这样想

55:07.100 --> 55:08.100
如果平时写代码的话

55:08.100 --> 55:10.100
我就按照逻辑来写就行了

55:10.100 --> 55:11.100
它成功了怎么样

55:11.100 --> 55:13.100
它失败了怎么样

55:13.100 --> 55:14.100
对吧

55:14.100 --> 55:15.100
我就这样写

55:15.100 --> 55:16.100
还有些常见的写法

55:16.100 --> 55:17.100
就是我可能成功之后

55:17.100 --> 55:18.100
我有很多的事情

55:18.100 --> 55:19.100
要挨在这儿做

55:19.100 --> 55:21.100
那我就会这样写

55:21.100 --> 55:22.100
你成功了过后

55:22.100 --> 55:23.100
我先做这个

55:23.100 --> 55:24.100
然后再做这个

55:24.100 --> 55:25.100
那后边还有处理的话

55:25.100 --> 55:27.100
我就再然后再做这个

55:27.100 --> 55:28.100
对吧

55:28.100 --> 55:30.100
每个处理都是有回调函数

55:30.100 --> 55:31.100
就前边处理完了

55:31.100 --> 55:32.100
返回个东西

55:32.100 --> 55:34.100
后边接着前边返回的结果

55:34.100 --> 55:35.100
进行处理

55:35.100 --> 55:37.100
再后边接上一步返回的结果

55:37.100 --> 55:38.100
进行处理

55:38.100 --> 55:39.100
就像下一步

55:39.100 --> 55:40.100
下一步

55:40.100 --> 55:41.100
下一步不停地处理

55:41.100 --> 55:42.100
对吧

55:42.100 --> 55:44.100
这也是一种常见写法

55:44.100 --> 55:46.100
然后还有这种写法

55:46.100 --> 55:48.100
你成功了之后

55:48.100 --> 55:49.100
做这个

55:49.100 --> 55:50.100
先做这个

55:50.100 --> 55:52.100
然后再做这个

55:52.100 --> 55:54.100
如果说前边处理的有任何一步

55:54.100 --> 55:55.100
又可能它失败了

55:55.100 --> 55:57.100
又可能它的处理过程有问题

55:57.100 --> 55:59.100
又可能它的处理过程有问题

55:59.100 --> 56:00.100
反正只要前面的处理有问题

56:00.100 --> 56:03.100
我统一在后边进行错误处理

56:03.100 --> 56:05.100
这也是一种常见的写法

56:05.100 --> 56:07.100
其实我们平时开发的时候

56:07.100 --> 56:09.100
脑袋里面不会去想这123

56:09.100 --> 56:12.100
这123是做面词题的

56:12.100 --> 56:15.100
平时我们开发的时候就是按逻辑来写

56:15.100 --> 56:16.100
然后怎么样

56:16.100 --> 56:17.100
然后怎么样

56:17.100 --> 56:18.100
有了错误怎么样

56:18.100 --> 56:20.100
就写就完事了

56:20.100 --> 56:22.100
好 最后我们给大家看一下

56:22.100 --> 56:24.100
毁掉地域是不是解决了

56:24.100 --> 56:26.100
带码们copy过来

56:26.100 --> 56:29.670
还有最后一个练习题

56:29.670 --> 56:30.670
我们一会再说

56:30.670 --> 56:35.710
上面的函数没变

56:35.710 --> 56:36.710
跟上级和一样

56:36.710 --> 56:38.710
所以说不再说了

56:38.710 --> 56:40.710
这个函数会返回properies

56:40.710 --> 56:42.710
你看我现在变成怎么写了

56:42.710 --> 56:44.710
给李建国发消息

56:44.710 --> 56:46.710
成功我现在不管 管都不管

56:46.710 --> 56:48.710
我现在就管失败

56:48.710 --> 56:51.710
你失败了会怎么样

56:51.710 --> 56:54.710
如果说你给李建国发消息了

56:54.710 --> 56:56.710
失败了别人不同意

56:56.710 --> 56:58.710
不同意的话输出

56:58.710 --> 57:01.710
你这个结果别人的回复消息

57:01.710 --> 57:05.710
然后我再给王夫婚发消息

57:05.710 --> 57:08.710
返回SendMessage的结果

57:08.710 --> 57:10.710
SendMessage函数返回的是什么

57:10.710 --> 57:12.710
返回的是properies

57:13.710 --> 57:18.730
他返回了是不是promise

57:18.730 --> 57:19.730
对不对

57:19.730 --> 57:20.730
所以说这里的返回

57:20.730 --> 57:22.730
这里的返回是不是promise

57:22.730 --> 57:24.730
那么也就是说

57:24.730 --> 57:25.730
这个promise

57:25.730 --> 57:27.730
他的状态跟这个返回的promise一致

57:27.730 --> 57:29.730
也就是说后续的处理

57:29.730 --> 57:30.730
就是这个promise

57:30.730 --> 57:34.100
就是这个返回的promise

57:34.100 --> 57:35.100
读的话就这样读

57:35.100 --> 57:37.100
给李建国发消息

57:37.100 --> 57:39.100
失败了

57:39.100 --> 57:41.100
打印出他的回复

57:41.100 --> 57:45.100
然后再给王夫婚发

57:45.100 --> 57:48.100
那么这个的任务的状态

57:48.100 --> 57:51.100
就说我鼠标框住这个任务的状态

57:51.100 --> 57:54.100
跟这个函数的返回结果是一致的

57:54.100 --> 57:57.100
如果说给王夫婚发

57:57.100 --> 57:58.100
也失败了

57:58.100 --> 58:00.100
接着处理

58:00.100 --> 58:02.100
然后给周俊才发

58:02.100 --> 58:05.100
如果说这个任务也失败了

58:05.100 --> 58:06.100
接着处理

58:06.100 --> 58:08.100
给刘仲勇发

58:08.100 --> 58:09.100
如果说这个任务

58:09.100 --> 58:11.100
真的最后一个环节

58:11.100 --> 58:13.100
我们统一处理了

58:13.100 --> 58:16.100
前边有任何一个环节是成功的

58:16.100 --> 58:17.100
你看

58:17.100 --> 58:18.100
如果说给李建国就成功了

58:18.100 --> 58:20.100
他这个开启不运行吧

58:20.100 --> 58:21.100
这个开启不运行吗

58:21.100 --> 58:22.100
自己去分析

58:22.100 --> 58:23.100
这个开启不运行吗

58:23.100 --> 58:24.100
他就会运行到这

58:24.100 --> 58:26.100
就前边有任何一个

58:26.100 --> 58:27.100
因为前边我们都没有处理过成功

58:27.100 --> 58:29.100
所以在后边统一处理

58:29.100 --> 58:31.100
统一处理成功

58:31.100 --> 58:33.100
上边前面的步骤

58:33.100 --> 58:34.100
有任何一个成功了

58:34.100 --> 58:36.100
就表示别人同意了

58:36.100 --> 58:38.100
我们输出

58:38.100 --> 58:41.100
如果说前边

58:41.100 --> 58:42.100
一个失败了我们处理的

58:42.100 --> 58:43.100
第二个失败了我们处理的

58:43.100 --> 58:44.100
第三个失败也

58:44.100 --> 58:45.100
最后一个也失败了

58:45.100 --> 58:46.100
刘仲勇也失败了

58:46.100 --> 58:47.100
我们还要针对他

58:47.100 --> 58:49.100
最后一个最近处理

58:49.100 --> 58:50.100
他也失败了

58:50.100 --> 58:51.100
说明说

58:51.100 --> 58:54.100
就没有任何人同意了

58:54.100 --> 58:57.100
那么邓哥的表白就失败了

58:57.100 --> 58:59.100
就写成了这么一种模式

58:59.100 --> 59:01.100
你看这种模式里面有回掉地域吗

59:01.100 --> 59:03.100
有没有回掉套回掉

59:03.100 --> 59:05.100
没有吧

59:05.100 --> 59:09.100
虽然说代码看上去还是很多

59:09.100 --> 59:11.100
后边代码我们会把它变得很简洁

59:11.100 --> 59:12.100
现在有这些可能

59:12.100 --> 59:14.100
看上去代码还是比较多

59:14.100 --> 59:16.100
其实已经比之前要少很多了

59:16.100 --> 59:17.100
你可以对比一下

59:17.100 --> 59:19.100
之前那个回掉地域那种写法

59:19.100 --> 59:20.100
再对比一下这个

59:20.100 --> 59:22.100
就要清爽舒服很多

59:22.100 --> 59:25.100
而且比较好阅读

59:25.100 --> 59:26.100
给李建龙发

59:26.100 --> 59:28.100
失败了给王富贵发

59:28.100 --> 59:29.100
再失败了给周去财发

59:29.100 --> 59:31.100
再失败了给刘仲勇发

59:31.100 --> 59:32.100
全部都失败了

59:32.100 --> 59:33.100
那就全部都失败了

59:33.100 --> 59:35.100
前面有任何一个成功了

59:35.100 --> 59:38.100
运行这个

59:38.100 --> 59:41.100
其实我们平时写代码的时候

59:41.100 --> 59:43.100
还真不会去一步一步分析

59:43.100 --> 59:45.100
这个返回Promise的查状态

59:45.100 --> 59:48.100
跟这个函数的返回结果是一致的

59:48.100 --> 59:50.100
还真不会去这样去分析

59:50.100 --> 59:52.100
我们就按照逻辑来写就完事了

59:52.100 --> 59:57.820
运行看一下

59:57.820 --> 59:59.820
好像全失败了

59:59.820 --> 01:00:00.820
再来运行

01:00:05.630 --> 01:00:08.630
最后一个成功了

01:00:08.630 --> 01:00:11.630
我们再把机率调高一点

01:00:11.630 --> 01:00:13.630
调到0.3

01:00:16.710 --> 01:00:17.710
你看这一步就结束了

01:00:17.710 --> 01:00:18.710
为什么能结束

01:00:18.710 --> 01:00:20.710
因为给李建龙发

01:00:20.710 --> 01:00:21.710
这一步就成功了

01:00:21.710 --> 01:00:23.710
返回的Promise就成功了

01:00:23.710 --> 01:00:24.710
开启运步运行

01:00:24.710 --> 01:00:25.710
不运行

01:00:25.710 --> 01:00:26.710
开启运步运行

01:00:26.710 --> 01:00:27.710
不运行

01:00:27.710 --> 01:00:28.710
不运行

01:00:28.710 --> 01:00:30.710
那么是不是就直接运行到这了

01:00:31.710 --> 01:00:34.280
好

01:00:34.280 --> 01:00:35.280
那么这是这一块内容

01:00:35.280 --> 01:00:36.280
这一块内容

01:00:36.280 --> 01:00:38.280
肯定是有点复杂

01:00:38.280 --> 01:00:39.280
这也是Promise

01:00:39.280 --> 01:00:41.280
电视编程里面

01:00:41.280 --> 01:00:42.280
Promise是

01:00:42.280 --> 01:00:43.280
Promise最复杂的这一块

01:00:43.280 --> 01:00:45.280
就是电视编程这一块

01:00:45.280 --> 01:00:47.280
我的要求

01:00:47.280 --> 01:00:50.280
就是你要能看懂这个代码

01:00:50.280 --> 01:00:51.280
然后把电视编程做完

01:00:51.280 --> 01:00:52.280
对

01:00:52.280 --> 01:00:53.280
还最后到电视编程

01:00:53.280 --> 01:00:54.280
看一下

01:01:02.880 --> 01:01:03.880
看一下吧

01:01:04.880 --> 01:01:06.880
还是一样的分析方法

01:01:07.880 --> 01:01:09.880
第一个Promise 1

01:01:09.880 --> 01:01:10.880
状态是啥

01:01:10.880 --> 01:01:11.880
Pending

01:01:12.880 --> 01:01:14.880
一秒钟之后才拒绝

01:01:14.880 --> 01:01:15.880
Pending

01:01:16.880 --> 01:01:17.880
Promise 2

01:01:17.880 --> 01:01:18.880
来自于哪呢

01:01:18.880 --> 01:01:20.880
来自于调用Promise 1的开启

01:01:21.880 --> 01:01:23.880
那么Promise 1是Pending

01:01:23.880 --> 01:01:24.880
你想都不要想

01:01:24.880 --> 01:01:25.880
Promise 2

01:01:25.880 --> 01:01:26.880
无论是什么情况

01:01:26.880 --> 01:01:27.880
一二三哪种情况都是一样

01:01:27.880 --> 01:01:28.880
它一定是Pending

01:01:29.880 --> 01:01:31.880
针对Promise 1的后续处理

01:01:31.880 --> 01:01:32.880
产生一个Promise 2

01:01:33.880 --> 01:01:34.880
那么Promise 1都在挂起

01:01:34.880 --> 01:01:35.880
特地等待你

01:01:35.880 --> 01:01:36.880
不等待你

01:01:36.880 --> 01:01:37.880
要干嘛

01:01:37.880 --> 01:01:38.880
你想干嘛

01:01:39.880 --> 01:01:40.880
所以说一开始

01:01:40.880 --> 01:01:41.880
输出这两个Promise

01:01:41.880 --> 01:01:42.880
一定是Pending

01:01:44.880 --> 01:01:45.880
Pending

01:01:45.880 --> 01:01:48.580
好

01:01:48.580 --> 01:01:49.580
接下来

01:01:49.580 --> 01:01:50.580
一秒钟到了

01:01:50.580 --> 01:01:52.580
Promise 1变成被拒绝了

01:01:53.580 --> 01:01:54.580
数据原因呢

01:01:54.580 --> 01:01:55.580
原因没写

01:02:00.170 --> 01:02:02.170
然后Promise 2

01:02:03.170 --> 01:02:05.170
有没有针对Promise 1的错误进行处理

01:02:06.170 --> 01:02:07.170
有开启

01:02:09.480 --> 01:02:10.480
处理

01:02:11.480 --> 01:02:13.480
那么就取决于处理的过程

01:02:14.480 --> 01:02:15.480
处理的过程

01:02:15.480 --> 01:02:16.480
有问题吗

01:02:16.480 --> 01:02:17.480
没问题

01:02:17.480 --> 01:02:18.480
不抱错

01:02:18.480 --> 01:02:19.480
所以说Promise 2是成功的

01:02:22.300 --> 01:02:23.300
数据是多少呢

01:02:23.300 --> 01:02:25.680
是2

01:02:25.680 --> 01:02:26.680
那么两秒钟之后

01:02:26.680 --> 01:02:28.680
输出Promise 1和Promise 2

01:02:28.680 --> 01:02:29.680
就输出了什么

01:02:29.680 --> 01:02:30.680
Rejected

01:02:31.680 --> 01:02:32.680
Undefined

01:02:32.680 --> 01:02:35.250
Fulfilled

01:02:36.250 --> 01:02:37.250
2

01:02:37.250 --> 01:02:41.610
两个Pending

01:02:42.610 --> 01:02:43.610
然后呢

01:02:43.610 --> 01:02:44.610
Rejected Undefined

01:02:45.610 --> 01:02:49.580
好

01:02:49.580 --> 01:02:51.580
这是咱们这几个课的内容

01:02:52.580 --> 01:02:53.580
今天啥都不做

01:02:53.580 --> 01:02:54.580
就把这个东西

01:02:54.580 --> 01:02:56.580
好好去处理清楚就行了

01:02:56.580 --> 01:02:57.580
多留一点时间

01:02:57.580 --> 01:02:58.580
就是你学习的过程中

01:02:58.580 --> 01:03:00.580
如果说遇到了一些平静

01:03:00.580 --> 01:03:02.580
遇到了一些难题难关

01:03:03.580 --> 01:03:04.580
其实很简单

01:03:04.580 --> 01:03:06.580
你不用在那里抱怨来抱怨去

01:03:06.580 --> 01:03:08.580
不要有那么多的情绪

01:03:08.580 --> 01:03:09.580
就是时间嘛

01:03:09.580 --> 01:03:11.580
花时间就完事了嘛

01:03:11.580 --> 01:03:13.580
你不要想着你两分钟去搞领导

01:03:13.580 --> 01:03:14.580
是不可能的

01:03:14.580 --> 01:03:16.580
你就多花点时间

01:03:16.580 --> 01:03:17.580
你理解不清楚呢

01:03:17.580 --> 01:03:18.580
你就花两天

01:03:18.580 --> 01:03:19.580
再理解不清楚花三天

01:03:19.580 --> 01:03:21.580
总之就把个课过去完事

01:03:22.580 --> 01:03:24.580
好 这就是这里的内容

