WEBVTT

00:00.500 --> 00:06.500
说完了Request对象之后 咱们这一课来聊一聊Response对象

00:06.500 --> 00:10.000
Response对象的顾名思义它就是享用的对象

00:10.000 --> 00:12.000
其实这个对象我们已经讲完了

00:12.000 --> 00:14.000
你看我们在基本使用里边

00:14.000 --> 00:16.500
我们就已经把Response对象影响了

00:16.500 --> 00:20.500
因为从服系收到消息之后

00:20.500 --> 00:23.500
它就会自己帮你构建这么一个Response对象

00:23.500 --> 00:27.000
这里面有些属性 对吧 有些方法可以使用 对不对

00:27.000 --> 00:29.000
那为什么我还要拿一些课数来说呢

00:29.000 --> 00:30.000
其实就说两句话

00:30.000 --> 00:31.000
就说什么呢

00:31.000 --> 00:33.000
就是说这个Response对象我们有的时候

00:33.000 --> 00:36.000
也可以手动地进行创建

00:36.000 --> 00:38.000
不一定要 因为绝大部分时候

00:38.000 --> 00:40.000
我们都是利用它给我们封装的

00:40.000 --> 00:41.000
就是Response对象

00:41.000 --> 00:44.000
你看 你这样子一请求

00:44.000 --> 00:46.000
请求是不拿到服系的结果 对吧

00:46.000 --> 00:47.000
这个地方就是已经得到

00:47.000 --> 00:49.000
这个东西就是Response对象

00:49.000 --> 00:51.000
你通过非起方法 它得到一个Promise

00:51.000 --> 00:53.500
Promise变成Response的状态之后

00:53.500 --> 00:56.000
它的状态数据就是一个Response对象

00:56.000 --> 00:58.000
你通过Response对象里边的什么

00:58.000 --> 01:00.000
结成方法就可以拿到数据了 对吧

01:00.000 --> 01:02.000
我这里要说的是

01:02.000 --> 01:04.000
绝大部分时候

01:04.000 --> 01:07.000
你的Response对象你都不用自己去创建

01:07.000 --> 01:08.000
因为它是浮起来的东西

01:08.000 --> 01:10.000
它会帮你给你封装

01:10.000 --> 01:11.000
但是有的时候

01:11.000 --> 01:13.000
我们可能会为了进行测试

01:13.000 --> 01:16.000
在一些拆分的比较细的场景里边

01:16.000 --> 01:19.000
我们可能要进行测试

01:19.000 --> 01:21.000
那么可能会需要你去手动地

01:21.000 --> 01:24.000
去创建一个Response对象

01:24.000 --> 01:26.000
举个例子 我举个例子

01:26.000 --> 01:28.000
比方说吧

01:28.000 --> 01:32.000
我们这里能拿到浮起的Response对象

01:32.000 --> 01:35.000
那么假设我们这里有一个函数

01:35.000 --> 01:37.000
这个函数的作用是什么呢

01:37.000 --> 01:39.000
这个函数的作用就是

01:39.000 --> 01:42.000
帮你把它解析成结成格式

01:42.000 --> 01:44.000
get 结成

01:44.000 --> 01:45.000
你给我传一个什么呢

01:45.000 --> 01:46.000
Response对象进来

01:46.000 --> 01:48.000
比方说举个例子

01:48.000 --> 01:50.000
你给我传一个Response对象进来

01:50.000 --> 01:54.000
那我这里给你解析成为一个结成格式

01:54.000 --> 01:55.000
那这里怎么写呢

01:55.000 --> 01:57.000
这里写法非常非常简单

01:57.000 --> 01:59.000
非常简单 怎么写

01:59.000 --> 02:00.000
怎么写呢 就是

02:00.000 --> 02:01.000
return await

02:01.000 --> 02:04.000
等待Response结成

02:04.000 --> 02:05.000
完了 没了 就一句话

02:05.000 --> 02:07.000
就举这么个例子

02:07.000 --> 02:09.000
就是说解析工作了

02:09.000 --> 02:13.000
解析工作了交给另外一个函数来完成

02:13.000 --> 02:15.000
那么这边呢 这边怎么写呢

02:15.000 --> 02:17.000
这边我就不直接去使用

02:17.000 --> 02:19.000
Response对象结成了

02:19.000 --> 02:20.000
我们去调用函数

02:20.000 --> 02:22.000
get结成

02:22.000 --> 02:24.000
这个函数把Response对象传进去

02:24.000 --> 02:25.000
这个函数是异步的

02:25.000 --> 02:26.000
我们这里要等待

02:26.000 --> 02:28.000
等待它完成

02:28.000 --> 02:29.000
等待它完成过resolve过后

02:29.000 --> 02:31.000
它就会把这个返回结果给我

02:31.000 --> 02:32.000
对吧

02:32.000 --> 02:34.000
这能不能看懂吗

02:34.000 --> 02:35.000
这个返回的是什么

02:35.000 --> 02:36.000
返回的是

02:36.000 --> 02:38.000
等待它完成的结果

02:38.000 --> 02:39.000
它完成的结果是什么

02:39.000 --> 02:41.000
就是一个结成格式的对象

02:41.000 --> 02:43.000
那么把结成格式的对象返回去

02:43.000 --> 02:46.000
而且这个方法本身返回的是promise

02:46.000 --> 02:47.000
因此呢

02:47.000 --> 02:48.000
那么这里也要等待

02:48.000 --> 02:49.000
等待这个promise完成

02:49.000 --> 02:51.000
完成过后就得到这个数据

02:51.000 --> 02:52.000
当然了

02:52.000 --> 02:53.000
如果说你看不懂的话

02:53.000 --> 02:55.000
你可以把它分开写

02:55.000 --> 02:57.000
分开写Response结成

02:57.000 --> 03:00.000
这样子我相信能看懂了吧

03:00.000 --> 03:03.560
所以上一张很重要

03:03.560 --> 03:05.560
上一张的异步处理很重要

03:05.560 --> 03:06.560
那么这里

03:06.560 --> 03:08.560
我们其实得到的是一样的效果

03:08.560 --> 03:09.560
看一下吧

03:09.560 --> 03:11.560
没有什么问题

03:11.560 --> 03:13.560
那么目前呢

03:13.560 --> 03:15.560
这个Response对象仍然是

03:15.560 --> 03:17.560
就是这个费切APN里面

03:17.560 --> 03:18.560
自动帮我们构建

03:18.560 --> 03:20.560
帮我们构建这个Response对象

03:20.560 --> 03:21.560
你看 仍然没问题

03:21.560 --> 03:22.560
但有的时候呢

03:22.560 --> 03:24.560
我们可能不想请求服务器

03:24.560 --> 03:26.560
我们想测试一下

03:26.560 --> 03:28.560
我们只是想得到一个测试的结果

03:28.560 --> 03:29.560
啥意思呢

03:29.560 --> 03:30.560
就说我这里呢

03:30.560 --> 03:32.560
还真不想去请求服务器

03:32.560 --> 03:33.560
不想真的去请求服务器

03:33.560 --> 03:35.560
有可能服务器那边还没有做好

03:35.560 --> 03:36.560
对吧

03:36.560 --> 03:37.560
前后端一起开发吧

03:37.560 --> 03:39.560
后端服务器接口都还没有做好

03:39.560 --> 03:41.560
那么你这个时候去请求服务器呢

03:41.560 --> 03:42.560
可能得不到数据

03:42.560 --> 03:43.560
当然有些人说

03:43.560 --> 03:44.560
我们这里呢

03:44.560 --> 03:45.560
可以利用一些第三方库

03:45.560 --> 03:47.560
比方说像什么mock

03:47.560 --> 03:48.560
对吧

03:48.560 --> 03:49.560
然后模拟数据

03:49.560 --> 03:50.560
当然也可以

03:50.560 --> 03:51.560
也是一种方案

03:51.560 --> 03:52.560
我只是说呢

03:52.560 --> 03:54.560
也可以通过另外一种方案

03:54.560 --> 03:55.560
就是我们自己在这里

03:55.560 --> 03:56.560
为了测试

03:56.560 --> 03:58.560
去构建这么一个request对象

03:58.560 --> 03:59.560
来测试一些东西

03:59.560 --> 04:00.560
比方说我们这里

04:00.560 --> 04:03.560
要手动的去构建一个Response对象

04:03.560 --> 04:06.560
我们可以溜一个Response

04:06.560 --> 04:07.560
第一个参数

04:07.560 --> 04:08.560
穿什么呢

04:08.560 --> 04:10.560
就是想应提里边的数据

04:10.560 --> 04:11.560
想应提里边的数据

04:11.560 --> 04:13.560
比方说想应提的数据呢

04:13.560 --> 04:15.560
我们这里用个阶层格是吧

04:15.560 --> 04:16.560
比方说

04:16.560 --> 04:18.560
咱们用个阶层格是

04:18.560 --> 04:21.560
想应提就是body

04:21.560 --> 04:23.560
或者就是

04:23.560 --> 04:24.560
我们就模拟一个

04:24.560 --> 04:25.560
这个是哪

04:25.560 --> 04:27.560
得到省份数据是吧

04:27.560 --> 04:28.560
OK

04:28.560 --> 04:29.560
我们这里模拟一个吧

04:29.560 --> 04:30.560
就一个阶层格式的

04:30.560 --> 04:32.560
每一个是个对象

04:32.560 --> 04:34.560
ID

04:34.560 --> 04:35.560
ID

04:35.560 --> 04:36.560
一

04:36.560 --> 04:38.560
内

04:38.560 --> 04:40.560
内

04:40.560 --> 04:44.390
就是北京

04:44.390 --> 04:45.390
哪两个吧

04:45.390 --> 04:46.390
哪两个得到

04:46.390 --> 04:50.280
这是天津

04:50.280 --> 04:51.280
好

04:52.280 --> 04:53.280
这个地方

04:53.280 --> 04:54.280
第一个参数就是

04:54.280 --> 04:55.280
构建一个

04:55.280 --> 04:57.280
想应提里边的数据

04:57.280 --> 04:58.280
服务器不是有想应吗

04:58.280 --> 05:00.280
它的数据在想应提里边

05:00.280 --> 05:01.280
那么第一个参数就是

05:01.280 --> 05:02.280
想应提的数据

05:02.280 --> 05:03.280
那么后边的参数

05:03.280 --> 05:04.280
那就是啥呢

05:04.280 --> 05:05.280
后边的参数就是一个配置

05:05.280 --> 05:06.280
一个配置对象

05:06.280 --> 05:08.280
就是我们之前说的

05:08.280 --> 05:10.280
Response对象里边的一些属性

05:10.280 --> 05:11.280
就可以配置进去

05:11.280 --> 05:13.280
比方说OK

05:13.280 --> 05:14.280
还有什么呢

05:14.280 --> 05:15.280
我们看一下

05:15.280 --> 05:16.280
之前的那个

05:16.280 --> 05:18.280
就是Stanters

05:18.280 --> 05:20.280
Stanters

05:20.280 --> 05:21.280
就是良办

05:21.280 --> 05:22.280
比方说我们自己

05:22.280 --> 05:23.280
去构建这么一个

05:23.280 --> 05:24.280
想应结果

05:24.280 --> 05:25.280
这个想应结果

05:25.280 --> 05:26.280
有没有真实去请求服务器

05:26.280 --> 05:27.280
并没有

05:27.280 --> 05:28.280
我只是

05:28.280 --> 05:29.280
帮你模拟一个

05:29.280 --> 05:30.280
服务器的想应结果

05:30.280 --> 05:32.280
OK 让它去解析

05:32.280 --> 05:33.280
是一样的道理

05:33.280 --> 05:34.280
是一样的道理

05:34.280 --> 05:35.280
好 保存

05:35.280 --> 05:36.280
怎么看一下

05:36.280 --> 05:37.280
获取

05:37.280 --> 05:38.280
你看是不是得到这么一个数据了

05:38.280 --> 05:39.280
对不对

05:39.280 --> 05:40.280
就是有了什么

05:40.280 --> 05:42.280
这么一点点作用

05:42.280 --> 05:44.280
就通过这些例子的

05:44.280 --> 05:45.280
大家可以发现的

05:45.280 --> 05:46.280
非企业 API

05:46.280 --> 05:48.280
它是考虑的是比较深远的

05:48.280 --> 05:49.280
但是把这些

05:49.280 --> 05:51.280
不同的功能的全部

05:51.280 --> 05:53.280
切分成了不同的对象

05:53.280 --> 05:54.280
那么更加便于

05:54.280 --> 05:56.280
我们今后学习的模画化

05:56.280 --> 05:57.280
更加便于

05:57.280 --> 05:59.280
我们的代码拆分

05:59.280 --> 06:00.280
特别是遇到一些

06:00.280 --> 06:01.280
需要控制的

06:01.280 --> 06:02.280
比较精细的场景的话

06:02.280 --> 06:03.280
我们都需要

06:03.280 --> 06:04.280
可能会使用它

06:04.280 --> 06:05.280
但是绝大部分时候

06:05.280 --> 06:06.280
我们直接使用非企业 API

06:06.280 --> 06:08.280
基本使用就完全够了

06:08.280 --> 06:10.280
好吧 这是关于

06:10.280 --> 06:11.280
Response对象

06:11.280 --> 06:12.280
我给大家说一下

