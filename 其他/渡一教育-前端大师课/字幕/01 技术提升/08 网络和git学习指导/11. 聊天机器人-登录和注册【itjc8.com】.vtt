WEBVTT

00:00.000 --> 00:04.200
好 这些课呢 我们就陆续把聊天机器人

00:04.200 --> 00:06.000
稍后再带码把它写完

00:07.000 --> 00:10.500
说实话 接下来写的带码跟网络已经没有关系了

00:11.000 --> 00:14.500
我们整个聊天机器人里边跟网络唯一有关系的

00:14.500 --> 00:16.000
就在上一节可即可封装

00:16.000 --> 00:18.000
你把它封装好了之后

00:18.000 --> 00:22.380
后面只需要去调这些函数就完事了

00:22.380 --> 00:24.380
跟网络就没有什么关系了

00:24.380 --> 00:27.380
但是呢 我们还是把它做完吧 不能做一个半成品

00:27.380 --> 00:29.380
好 把它写完啊 我们这些课呢

00:29.380 --> 00:32.380
顺便就练习一下咱们带码的熟练度嘛

00:32.380 --> 00:34.380
提升一下带码的熟练度

00:34.380 --> 00:37.380
这一刻我们实现登录和注册

00:38.380 --> 00:40.380
说实话 实现起来对某些同样来讲

00:40.380 --> 00:42.380
可能还是有难度的

00:42.380 --> 00:44.380
虽然跟网络没有关系

00:45.380 --> 00:49.380
因为登录和注册 这边是效果

00:49.380 --> 00:51.380
效果里面都有 是吧

00:51.380 --> 00:54.380
登录和注册这里主要的难点在哪呢

00:54.380 --> 00:57.380
跟网络再一次重生 跟网络已经没关系了

00:58.380 --> 01:02.380
难点在哪呢 主要是在验证这一块

01:02.380 --> 01:05.380
你看这边啊 点登录

01:05.380 --> 01:07.380
你看这里是不是有验证 对吧

01:07.380 --> 01:09.380
你写了之后失去焦点 它也会有验证

01:09.380 --> 01:12.380
这里失去焦点也会有验证

01:12.380 --> 01:15.380
点登录过后呢 它还会发送网络请求

01:15.380 --> 01:18.380
看到账号密码是不是正确了

01:18.380 --> 01:20.380
然后注册呢也是

01:20.380 --> 01:23.380
每一个都有验证的 每一个都有验证的

01:23.380 --> 01:25.380
你没有写在账号

01:25.380 --> 01:28.380
你看 点注册都是有验证的

01:28.380 --> 01:31.380
你写了之后失去焦点 不要说像这儿

01:31.380 --> 01:35.380
再一次输入密码 两次密码又不一致

01:35.380 --> 01:40.380
对吧 等等都是有这么一些验证在里边的

01:40.380 --> 01:44.380
那么 既然有验证 它这一块呢

01:44.380 --> 01:47.380
而且呢 我们会发现注册和登录

01:47.380 --> 01:51.380
他们的验证呢 好像逻辑都差不多

01:51.380 --> 01:54.380
对吧 因此呢 这里我们可能会涉及到

01:54.380 --> 01:58.380
封装一个统一的验证的东西

01:58.380 --> 02:00.380
那么这一块是有点复杂的

02:00.380 --> 02:03.380
我们写代码的时候呢 有这么一个现象

02:03.380 --> 02:08.380
就是 凡是不同用的代码

02:08.380 --> 02:14.330
一般是简单 但是那代码会变多

02:14.330 --> 02:17.330
代码多 不通用的是什么

02:17.330 --> 02:20.330
就是我只实现这个页面的这一块的功能

02:20.330 --> 02:23.330
我不考虑其他页面有类似的东西

02:23.330 --> 02:25.330
那么一般代码就比较简单写出来

02:25.330 --> 02:29.330
但代码量呢 可能会比较多 而且呢 不易维护

02:29.330 --> 02:32.330
就将来要改的话 可能到处需要去更改

02:32.330 --> 02:36.330
重复代码多 重复代码多

02:36.330 --> 02:39.330
那么如果说你要写一些通用的代码

02:39.330 --> 02:44.330
那么就是复杂代码 但是代码写出来之后

02:44.330 --> 02:47.330
整体代码就会变少 而且易维护

02:47.330 --> 02:51.330
重复代码少 它会有什么一个特点

02:51.330 --> 02:54.330
因此我们通常情况下会选择第二种方式

02:54.330 --> 02:58.330
但第二种方式呢 对于工作人员的要求就比较高了

02:58.330 --> 03:00.330
对开发人员的要求比较高了

03:00.330 --> 03:07.330
所以我们通常说区分程序而能力的强弱的话

03:07.330 --> 03:10.330
就看看能不能写通用的代码 能不能把它写好

03:10.330 --> 03:12.330
那这一次呢 既然我们都设计了

03:12.330 --> 03:14.330
我们尽量把它写一个通用的代码

03:14.330 --> 03:17.330
同学们可以感受一下这是什么样的难度

03:17.330 --> 03:20.330
其实我这里的其实还不是那么的通用

03:20.330 --> 03:22.330
就通用性那也是有范围的

03:22.330 --> 03:24.330
像我这里的写的通用性代码呢

03:24.330 --> 03:28.330
只是适用于我们这个聊天机器人里面的登录和注册

03:28.330 --> 03:31.330
这一块的验证 把它稍微提取一下

03:31.330 --> 03:33.330
写个通用的代码出来

03:33.330 --> 03:35.330
那如果说你要解决所有项目里面的

03:35.330 --> 03:38.330
所有表达验证 那那个复杂度直接突破天际了

03:38.330 --> 03:41.330
只是给民说突破天际的一个复杂度

03:41.330 --> 03:44.330
因为你要考虑的情况太多了

03:45.330 --> 03:46.330
好 那么这一块呢

03:46.330 --> 03:48.330
我们在GS代码里面来

03:48.330 --> 03:51.330
首先我们打算先做注册吧

03:51.330 --> 03:54.330
其实我们做了 我们写通用代码写了之后

03:54.330 --> 03:56.330
注册的程度都差不多

03:56.330 --> 03:58.330
写了注册的机板登录出来了

03:58.330 --> 04:01.330
我们这里先引用我们那个API

04:01.330 --> 04:02.330
这是一定会引用的 对吧

04:02.330 --> 04:04.330
这是毫无疑问的

04:04.330 --> 04:07.330
好 然后呢 我们在这里GS里面

04:07.330 --> 04:12.330
去新建一个文件 叫做User吧 叫GS

04:12.330 --> 04:15.330
那么这个文件里面呢 主要是

04:15.330 --> 04:26.700
用户登录和注册的表单向验证的通用代码

04:26.700 --> 04:28.700
就是用户和登录和注册的时候

04:28.700 --> 04:29.700
不与个表单吗

04:29.700 --> 04:32.700
那个表单里面对某一个表单向

04:32.700 --> 04:34.700
这些封装方式有很多

04:34.700 --> 04:36.700
做通用代码的形式有很多

04:36.700 --> 04:39.700
我这里选择了一种难度适中

04:40.700 --> 04:43.700
大家理解不至于那么复杂的

04:43.700 --> 04:46.700
那么一种方式 不要去纠结

04:46.700 --> 04:48.700
按照我的思路来就行了

04:48.700 --> 04:52.700
对某一个表单向进行验证的这么一块代码

04:52.700 --> 04:55.700
我不考虑全部 我就考虑其中一个

04:55.700 --> 04:57.700
那么我打算怎么写呢

04:57.700 --> 05:00.700
当然这个里面我们就会引注这个

05:00.700 --> 05:02.700
我先把GS文件写好了

05:03.700 --> 05:05.700
User叫GS

05:05.700 --> 05:07.700
然后一由于登录和注册

05:07.700 --> 05:09.700
最近还是有一些不一样的地方

05:09.700 --> 05:11.700
所以我们还是要去建立两个GS

05:11.700 --> 05:13.700
注册的GS和登录的GS

05:15.700 --> 05:18.700
那么注册页面再去引用自己特有的GS

05:18.700 --> 05:19.700
注册的GS

05:21.700 --> 05:23.700
登录页面 我把这个复制一下

05:25.700 --> 05:28.700
登录页面再去引入登录的GS

05:28.700 --> 05:29.700
懂了意思吗

05:29.700 --> 05:32.700
这个文件结构我们先把它划分好

05:32.700 --> 05:34.700
听到这儿 如果觉得没问题

05:34.700 --> 05:36.700
你能听懂的话 你先把跟着我

05:36.700 --> 05:37.700
把这些做一做

05:38.700 --> 05:41.700
好 然后接下来我们来看一下我们的

05:42.700 --> 05:45.700
ATM元素 你总得认识一下元素吧

05:45.700 --> 05:47.700
我们发现这一个Fone表单

05:48.700 --> 05:49.700
一个Fone表单

05:49.700 --> 05:52.700
Fone表单的主要好处在于你写了之后

05:52.700 --> 05:55.700
你直接按回车就可以提交表单了

05:55.700 --> 05:56.700
就可以提交了

05:56.700 --> 05:58.700
这边也是一样

05:58.700 --> 06:00.700
这边我们没有写任何的介绍

06:00.700 --> 06:01.700
也可以提交

06:01.700 --> 06:04.700
就变成了页面刷新了

06:05.700 --> 06:08.700
一个Fone表单 然后上面是标题

06:08.700 --> 06:09.700
就在这里看吧

06:13.100 --> 06:16.100
Fone表单 标题 这个没什么好说的

06:16.100 --> 06:19.100
然后每一个表单像也会发现是一个DIV

06:19.100 --> 06:20.100
是一个DIV

06:20.100 --> 06:23.100
我们看注册这里看得更加清楚一点

06:24.100 --> 06:26.100
每一个表单像是一个DIV

06:26.100 --> 06:29.100
每个DIV里边有一个

06:29.100 --> 06:30.100
这是一个图标

06:30.100 --> 06:31.100
这个玩意儿不用去管它

06:31.100 --> 06:33.100
这个图标这是个字体图标

06:33.100 --> 06:36.100
然后下面这个是一个文门框

06:36.100 --> 06:37.100
它有个ID

06:37.100 --> 06:39.100
每个文门框的ID是不一样的

06:39.100 --> 06:41.100
这贴对loginID表示账号

06:41.100 --> 06:42.100
那下面那个min

06:42.100 --> 06:44.100
你称就表示贴对nicknet

06:44.100 --> 06:47.100
表示你称ID不一样

06:47.100 --> 06:49.100
然后有些placeholder

06:49.100 --> 06:50.100
那些类似那样是

06:50.100 --> 06:52.100
这些都无所谓的

06:53.100 --> 06:54.100
那么这个玩意儿是啥

06:54.100 --> 06:57.100
这个玩意儿应该我好像讲过吧

06:57.100 --> 06:59.100
这是表示文门框的最大的长度

06:59.100 --> 07:00.100
就你超过20个字符

07:00.100 --> 07:02.100
它就不允许你输入了

07:02.100 --> 07:03.100
我都给你写好了

07:04.100 --> 07:05.100
然后下面有个P元素

07:05.100 --> 07:06.100
这个玩意儿是啥呢

07:06.100 --> 07:08.100
这个玩意儿表示错误消息

07:08.100 --> 07:10.100
就是如果说你有错误消息的话

07:10.100 --> 07:11.100
就写到一个P元素里边

07:11.100 --> 07:14.100
比方说我这个注册这里

07:14.100 --> 07:16.100
你看这个P元素账号这里

07:16.100 --> 07:18.100
我随便写一个保存

07:18.100 --> 07:20.100
那你看这里是不是出现这个东西

07:20.100 --> 07:21.100
这一样是你们都

07:21.100 --> 07:23.100
我相信同学们都能做出来

07:23.100 --> 07:24.100
没什么好说的

07:24.100 --> 07:26.100
好 这个P元素

07:26.100 --> 07:28.100
然后下一个表单像

07:28.100 --> 07:30.100
文门框P元素

07:30.100 --> 07:32.100
结构非常非常简单

07:32.100 --> 07:34.100
非常非常简单

07:34.100 --> 07:36.100
其他的就没啥了吧

07:36.100 --> 07:37.100
就没啥了

07:37.100 --> 07:39.100
好 那接下来我问题是

07:39.100 --> 07:40.100
我到底要做

07:40.100 --> 07:41.100
我做这个通用性的东西

07:41.100 --> 07:43.100
我到底要做成什么样子呢

07:43.100 --> 07:46.100
我要打算把它怎么弄呢

07:46.100 --> 07:50.100
我只做对某一个表单像的验证

07:50.100 --> 07:52.100
其他的无关

07:52.100 --> 07:55.100
那么我打算在这里写一个类

07:55.100 --> 07:57.100
也就是构造函数

07:58.100 --> 08:00.100
我把它取个名字叫Field

08:00.100 --> 08:02.100
Vanitator

08:02.100 --> 08:04.100
打个注册

08:04.100 --> 08:09.480
对某一个表单像

08:09.480 --> 08:12.480
进行验证的构造函数

08:14.480 --> 08:16.480
那么这个构造函数里边

08:16.480 --> 08:18.480
你要告诉我什么呢

08:18.480 --> 08:19.480
你首先要告诉我

08:19.480 --> 08:20.480
是哪一个表单像

08:20.480 --> 08:22.480
我对哪一个表单像进行验证

08:22.480 --> 08:23.480
比方说我要对

08:23.480 --> 08:24.480
这个文门框进行验证

08:24.480 --> 08:27.480
那你要把这个文门框的

08:27.480 --> 08:29.480
至少你要把ID传给我

08:29.480 --> 08:30.480
对吧 是不是

08:30.480 --> 08:33.480
要把这个文门框的ID传给我

08:33.480 --> 08:34.480
没问题吧

08:34.480 --> 08:36.480
好 因此我在构造函数里边

08:36.480 --> 08:38.480
constructor

08:38.480 --> 08:40.480
构造函数里边

08:40.480 --> 08:42.480
你要告诉我文门框的ID

08:42.480 --> 08:45.480
就是tstid

08:45.480 --> 08:46.480
其实我这里呢

08:46.480 --> 08:47.480
你写到这儿

08:47.480 --> 08:48.480
应该同学们能感受得到

08:48.480 --> 08:50.480
像通用型的代码

08:50.480 --> 08:52.480
其实它的通用方位不一样

08:52.480 --> 08:53.480
你写出来的代码就不一样

08:53.480 --> 08:55.480
比方说我这里文门框的ID

08:55.480 --> 08:56.480
那有的时候

08:56.480 --> 08:57.480
一些表单里边

08:57.480 --> 08:58.480
还有下面的表怎么办

08:58.480 --> 09:00.480
还有多行文门框怎么办

09:00.480 --> 09:01.480
还有那个多选框

09:01.480 --> 09:02.480
单选框怎么办

09:02.480 --> 09:03.480
对吧

09:03.480 --> 09:04.480
幸好我们这里没有

09:04.480 --> 09:05.480
突然的话更复杂

09:05.480 --> 09:06.480
因此呢

09:06.480 --> 09:07.480
我们只管

09:07.480 --> 09:09.480
这个项目里边的通用代码

09:09.480 --> 09:11.480
那复杂都会降低很多

09:11.480 --> 09:13.480
你们还能够搞得定的

09:13.480 --> 09:15.480
跟着我的思路还能搞定

09:15.480 --> 09:16.480
再通用的代码

09:16.480 --> 09:17.480
扩展到所有表单的话

09:17.480 --> 09:18.480
那就复杂了

09:18.480 --> 09:20.480
好 你告诉我文门框的ID

09:20.480 --> 09:21.480
那我只要知道了

09:21.480 --> 09:22.480
文门框的ID

09:22.480 --> 09:25.480
是不是我就能拿到这个文门框

09:25.480 --> 09:26.480
是不是肯定可以拿到吗

09:26.480 --> 09:28.480
是不是就能拿到这个P元数

09:28.480 --> 09:29.480
对吧

09:29.480 --> 09:30.480
文门框的下一个元数

09:30.480 --> 09:31.480
有什么P元数吗

09:31.480 --> 09:33.480
这个错误元数的也能拿到

09:33.480 --> 09:35.480
所以说这些东西我都能拿到

09:35.480 --> 09:36.480
你只需要告诉我ID就可以了

09:36.480 --> 09:38.480
逻辑就通了

09:38.480 --> 09:40.480
我们现在不要去考虑里边杂写

09:40.480 --> 09:41.480
我们先考虑这个设计

09:41.480 --> 09:43.480
逻辑通不通

09:43.480 --> 09:44.480
那么除了告诉我

09:44.480 --> 09:45.480
文门框的ID之外呢

09:45.480 --> 09:47.480
你还要告诉我什么呢

09:47.480 --> 09:48.480
是不是还讲

09:48.480 --> 09:51.480
你还要告诉我一个验证规则

09:51.480 --> 09:54.480
我咋知道这个理成的验证规则呢

09:54.480 --> 09:56.480
我不知道

09:56.480 --> 09:58.480
我咋知道个账号的验证规则呢

09:58.480 --> 09:59.480
我也不知道

09:59.480 --> 10:00.480
密码的验证规则

10:00.480 --> 10:01.480
再一次输入密码的验证规则

10:01.480 --> 10:03.480
我都不知道

10:03.480 --> 10:04.480
对吧

10:04.480 --> 10:06.480
所以说你要告诉我这个验证规则

10:06.480 --> 10:10.480
那问题是你怎么告诉我验证规则呢

10:10.480 --> 10:12.480
验证规则到底是个啥

10:12.480 --> 10:13.480
是个支付串

10:13.480 --> 10:15.480
还是个什么乱啊

10:15.480 --> 10:17.480
验证规则

10:17.480 --> 10:20.480
我这里约定它是一个函数

10:20.480 --> 10:23.480
那这就是个回调函数

10:23.480 --> 10:26.480
就Vanity

10:26.480 --> 10:29.480
day

10:29.480 --> 10:31.480
curse

10:31.480 --> 10:32.480
方式

10:32.480 --> 10:36.560
我打个注释啊

10:36.560 --> 10:40.000
那么这是

10:40.000 --> 10:42.000
勾到器

10:42.000 --> 10:43.000
这个玩意儿是什么呢

10:43.000 --> 10:44.000
这个支付串啊

10:44.000 --> 10:48.000
它表示文笨框的ID

10:48.000 --> 10:49.000
一把文笨框的ID告诉我

10:49.000 --> 10:51.000
相当于我这个动员数

10:51.000 --> 10:52.000
我就全知道了对吧

10:52.000 --> 10:53.000
文笨框在哪

10:53.000 --> 10:54.000
错误消息的P元数在哪

10:54.000 --> 10:56.000
我全部知道了

10:56.000 --> 10:57.000
那么这个玩意儿是什么呢

10:57.000 --> 11:00.000
它是一个函数

11:00.000 --> 11:02.000
它表示验证规则

11:02.000 --> 11:04.000
这个文笨框应该怎么验证

11:04.000 --> 11:06.000
验证规则函数

11:06.000 --> 11:08.000
那么这个函数呢

11:08.000 --> 11:09.000
既然是函数

11:09.000 --> 11:10.000
它得有参数啊

11:10.000 --> 11:11.000
它得有返回值啊

11:11.000 --> 11:14.000
那我这里要约定好

11:14.000 --> 11:16.000
当需要验证时

11:16.000 --> 11:19.000
当需要对该文笨框

11:19.000 --> 11:22.000
进行验证时

11:22.000 --> 11:25.000
会雕用该函数

11:25.000 --> 11:26.000
哪里要用

11:26.000 --> 11:27.000
就是我在这个类里面

11:27.000 --> 11:29.000
会雕用这个函数

11:29.000 --> 11:31.000
你只要去把函数告诉我就行了

11:31.000 --> 11:35.000
函数的参数为

11:35.000 --> 11:38.000
当前文笨框的值

11:38.000 --> 11:42.000
函数的返回值为

11:42.000 --> 11:46.000
验证的错误消息

11:46.000 --> 11:51.000
若没有返回

11:51.000 --> 11:53.000
或者是返回为NOW undefined

11:53.000 --> 11:56.000
确定则表示无错误

11:56.000 --> 11:57.000
啥意思啊说了半天

11:57.000 --> 11:59.000
就是我做出来之后

11:59.000 --> 12:00.000
我打算让你这么使用

12:00.000 --> 12:02.000
比方说我去

12:02.000 --> 12:05.000
NOW一个FilledValidator

12:05.000 --> 12:07.000
传两个参数对吧

12:07.000 --> 12:08.000
那第一个参数传什么

12:08.000 --> 12:09.000
传那个ID

12:09.000 --> 12:11.000
第一个参数传ID

12:11.000 --> 12:13.000
那么比方说我要验证这个账号

12:13.000 --> 12:15.000
那我就传一个tftmultiID

12:15.000 --> 12:17.000
因为它的账号的ID是什么

12:17.000 --> 12:19.000
是这个文笨框

12:19.000 --> 12:20.000
tftmultiID

12:20.000 --> 12:22.000
我把这个玩意传给你

12:23.000 --> 12:26.000
那么你动员是有啥都知道了

12:26.000 --> 12:27.000
然后接下来呢

12:27.000 --> 12:28.000
我还要告诉你

12:28.000 --> 12:29.000
这个文笨框怎么验证

12:29.000 --> 12:30.000
那我要传一个什么

12:30.000 --> 12:32.000
传一个函数进来

12:32.000 --> 12:34.000
这个函数呢会有一个参数

12:34.000 --> 12:35.000
这个参数是什么呢

12:35.000 --> 12:36.000
是它的值

12:36.000 --> 12:38.000
就是这个文笨框的值

12:38.000 --> 12:41.000
这个函数什么时候调用

12:41.000 --> 12:42.000
要对文笨框

12:42.000 --> 12:43.000
进行验证的时候

12:43.000 --> 12:45.000
它就会自动调用这个函数

12:45.000 --> 12:46.000
它会把值告诉我

12:46.000 --> 12:47.000
这个文笨框的值告诉我

12:47.000 --> 12:48.000
那我这里要判断这个值

12:48.000 --> 12:49.000
到底真不正确

12:49.000 --> 12:51.000
我在这里已经判断

12:52.000 --> 12:53.000
因为我这里没法

12:53.000 --> 12:54.000
这里边就没法判断了

12:54.000 --> 12:56.000
因为每个文笨框的规则不一样

12:56.000 --> 12:58.000
所以我在这里判断

12:58.000 --> 13:00.000
如果它只正确的话

13:00.000 --> 13:01.000
我就返回吧

13:01.000 --> 13:03.000
或者是啥也不返回

13:03.000 --> 13:04.000
啥都不返回

13:04.000 --> 13:05.000
如果说它有问题的话

13:05.000 --> 13:06.000
我就返回一个错误字不算

13:06.000 --> 13:08.000
比方说文笨框

13:08.000 --> 13:09.000
就账号不能违空

13:11.000 --> 13:12.000
我比方判断了一下

13:12.000 --> 13:13.000
比方说我这样判断一下

13:13.000 --> 13:14.000
如果我发

13:17.000 --> 13:18.000
没有值

13:19.000 --> 13:21.000
那么我就返回一个账号不能违空

13:22.000 --> 13:23.000
懂得意思吗

13:23.000 --> 13:24.000
就这么意思

13:24.000 --> 13:26.000
你要告诉我一个函数

13:27.000 --> 13:29.000
好那剩下的事情我就能做了

13:29.000 --> 13:31.000
剩下的事情我都能做了

13:31.000 --> 13:32.000
那我怎么做呢

13:32.000 --> 13:34.000
好我们接下来试一试

13:34.000 --> 13:35.000
首先我要拿到一些

13:35.000 --> 13:36.000
相关的动物对象

13:36.000 --> 13:37.000
我要拿到哪些动物对象

13:37.000 --> 13:39.000
首先我要拿到一个

13:39.000 --> 13:40.000
文笨框的动物对象

13:40.000 --> 13:41.000
这是必须要拿到的

13:42.000 --> 13:43.000
来吧保存到这次里边

13:43.000 --> 13:45.000
文笨框的动物对象

13:45.000 --> 13:46.000
就是因故事吧

13:47.000 --> 13:48.000
等于什么呢

13:48.000 --> 13:49.000
Document

13:49.000 --> 13:50.000
query

13:51.000 --> 13:52.000
或者是

13:52.000 --> 13:53.000
get elements

13:53.000 --> 13:54.000
把id也行

13:54.000 --> 13:56.000
tstid

13:57.000 --> 13:58.000
是不是

13:58.000 --> 13:59.000
当然那你如果说的

13:59.000 --> 14:00.000
也可以用什么

14:00.000 --> 14:01.000
query selector也行

14:01.000 --> 14:03.000
query selector

14:03.000 --> 14:06.000
id加上一个符号

14:06.000 --> 14:07.000
tstid

14:07.000 --> 14:08.000
也可以

14:09.000 --> 14:12.000
把这个符号加上一个id

14:12.000 --> 14:14.000
不就是一个id选择器吗

14:14.000 --> 14:15.000
放进去

14:15.000 --> 14:16.000
其实我可以发现了

14:16.000 --> 14:17.000
整个页面中

14:17.000 --> 14:19.000
可能到处都要用到这个东西

14:19.000 --> 14:20.000
打算把这个东西

14:20.000 --> 14:21.000
也封装一下

14:21.000 --> 14:22.000
再见了

14:22.000 --> 14:23.000
get

14:23.000 --> 14:24.000
commander

14:24.000 --> 14:25.000
get

14:25.000 --> 14:26.000
这个get是非常简单

14:26.000 --> 14:27.000
我就写两个函数一完事了

14:27.000 --> 14:28.000
一个多的函数

14:28.000 --> 14:29.000
你给我一个

14:29.000 --> 14:30.000
snector

14:30.000 --> 14:31.000
我给你返回一个

14:31.000 --> 14:32.000
document

14:32.000 --> 14:33.000
query selector

14:33.000 --> 14:34.000
然后呢

14:34.000 --> 14:35.000
一个是两个多的函数

14:36.000 --> 14:37.000
return

14:37.000 --> 14:38.000
document

14:38.000 --> 14:39.000
query selector

14:43.080 --> 14:44.080
还有当然是要

14:44.080 --> 14:45.080
创建对象的

14:45.080 --> 14:46.080
三个多

14:47.080 --> 14:50.080
创建一个动物元素的

14:50.080 --> 14:52.080
那么这个就使用那个

14:52.080 --> 14:53.080
这个吧

14:54.080 --> 14:55.080
就写上三个还说

14:55.080 --> 14:56.080
这样子为了简化我们的

14:56.080 --> 14:57.080
会比较大一码

14:57.080 --> 14:59.080
这个玩意没什么好说的

14:59.080 --> 15:01.080
然后还是把引入进来

15:01.080 --> 15:06.080
get

15:06.080 --> 15:07.080
commander

15:07.080 --> 15:11.310
get

15:11.310 --> 15:12.310
引入进来

15:13.310 --> 15:15.310
好 再次回到

15:15.310 --> 15:16.310
有点这里

15:20.030 --> 15:21.030
好 那么这边呢

15:21.030 --> 15:22.030
我们就可以使用那个

15:22.030 --> 15:23.030
多的符号了 对吧

15:23.030 --> 15:24.030
好 那接下来呢

15:24.030 --> 15:25.030
就是文本框找到了

15:25.030 --> 15:26.030
然后还有个什么元素呢

15:26.030 --> 15:28.030
还有一个就是P元素

15:28.030 --> 15:29.030
P元素是文本框的

15:29.030 --> 15:30.030
下一个元素

15:30.030 --> 15:32.030
这里是有一个API的

15:32.030 --> 15:33.030
可能之前同一边

15:33.030 --> 15:34.030
没有设计到

15:34.030 --> 15:35.030
我给你们说一说

15:35.030 --> 15:37.030
这是一个动物元素 对吧

15:37.030 --> 15:38.030
我们可以通过一个

15:38.030 --> 15:40.030
它的一表一个属性

15:40.030 --> 15:41.030
叫做next

15:42.030 --> 15:43.030
完了 我这个属性忘了

15:43.030 --> 15:44.030
忘了怎么办

15:44.030 --> 15:46.470
我试一下

15:46.470 --> 15:47.470
这里有只能提示的

15:47.470 --> 15:48.470
next

15:49.470 --> 15:50.470
就这个

15:50.470 --> 15:51.470
就这个属性

15:51.470 --> 15:53.470
这个属性能够获取

15:53.470 --> 15:54.470
这个元素的

15:54.470 --> 15:55.470
下一个next

15:56.470 --> 15:57.470
元素

15:58.470 --> 15:59.470
Supply是兄弟姐妹

15:59.470 --> 16:01.470
下一个兄弟元素

16:02.470 --> 16:03.470
那你看一下

16:03.470 --> 16:04.470
我们的元素节奏

16:04.470 --> 16:05.470
这个萤固者

16:05.470 --> 16:06.470
下一个兄弟元素

16:06.470 --> 16:07.470
比如说P元素

16:07.470 --> 16:08.470
所以这样子

16:08.470 --> 16:09.470
就可以拿到那个

16:09.470 --> 16:10.470
错误的消息

16:10.470 --> 16:11.470
那个P元素

16:11.470 --> 16:13.470
或者就这样写了

16:13.470 --> 16:14.470
好 我们来打印一下

16:14.470 --> 16:15.470
看一下就没有

16:15.470 --> 16:16.470
正确的获取到

16:16.470 --> 16:17.470
this.p

16:19.470 --> 16:20.470
好 我们再至于

16:20.470 --> 16:21.470
在这里试验一下

16:21.470 --> 16:22.470
你有一个field

16:22.470 --> 16:23.470
validator

16:23.470 --> 16:24.470
传两个参数

16:24.470 --> 16:25.470
第一个参数

16:25.470 --> 16:26.470
第二个参数

16:26.470 --> 16:28.470
我们传一个

16:29.470 --> 16:30.470
方个型吧

16:31.470 --> 16:42.740
请点一下账号

16:45.700 --> 16:46.700
就这样

16:46.700 --> 16:47.700
这样就降温

16:47.700 --> 16:48.700
这个各导海数了

16:48.700 --> 16:49.700
对吧 我们把它保存

16:49.700 --> 16:50.700
一个变量里面

16:50.700 --> 16:51.700
方便我们来测试

16:56.330 --> 16:57.330
这里写错了

17:08.810 --> 17:09.810
好了 还有写到WAR

17:09.810 --> 17:10.810
里面吧 这样子

17:10.810 --> 17:11.810
在里面那些调试

17:11.810 --> 17:12.810
控制台里面就可以看到

17:12.810 --> 17:13.810
看到这个对象了

17:14.810 --> 17:20.320
看到这个对象了

17:20.320 --> 17:21.320
对吧

17:21.320 --> 17:22.320
对象里面有两个属性

17:22.320 --> 17:23.320
你看 input

17:23.320 --> 17:24.320
也是拿到了

17:24.320 --> 17:25.320
P元素是不拿到了

17:25.320 --> 17:26.320
对吧 你看P元素

17:26.320 --> 17:27.320
input都拿到了

17:27.320 --> 17:29.320
好 这个元素部分

17:29.320 --> 17:30.320
我们已经拿到了

17:30.320 --> 17:31.320
拿到之后

17:31.320 --> 17:32.320
我们还要干嘛呢

17:32.320 --> 17:33.320
还要干嘛呢

17:33.320 --> 17:35.320
还要产生验证

17:35.320 --> 17:37.320
什么时候验证

17:37.320 --> 17:38.320
你要搞清楚

17:38.320 --> 17:39.320
我们来看一下

17:39.320 --> 17:41.320
这边是什么时候验证

17:41.320 --> 17:42.320
无论是登录

17:42.320 --> 17:43.320
还是注册

17:43.320 --> 17:44.320
验证的时间点是什么

17:44.320 --> 17:47.320
是这个元素失去焦点的时候

17:47.320 --> 17:49.320
一开始有没有验证

17:49.320 --> 17:50.320
一开始没有验证

17:50.320 --> 17:52.320
对吧 是失去焦点的时候

17:52.320 --> 17:54.320
你看失去焦点还有验证

17:54.320 --> 17:56.320
还有什么时候呢

17:56.320 --> 17:57.320
还有就是没有失去焦点

17:57.320 --> 17:59.320
点击这个按钮的时候验证

17:59.320 --> 18:01.320
对吧 点击这个表单

18:01.320 --> 18:03.320
提交的时候进行验证

18:03.320 --> 18:04.320
验证的时间点有两个

18:04.320 --> 18:06.320
一个是失去焦点的时候

18:06.320 --> 18:08.320
一个是表单提交的时候

18:08.320 --> 18:10.320
都要验证

18:10.320 --> 18:11.320
是这个意思吗

18:11.320 --> 18:13.320
对不对 没问题吧

18:13.320 --> 18:15.320
好 那么我们这里能搞定啥了

18:15.320 --> 18:17.320
它验证的时间点有两个

18:17.320 --> 18:19.320
一个是失去焦点

18:19.320 --> 18:22.320
一个是表单提交

18:22.320 --> 18:24.320
好 表单提交你想一想

18:24.320 --> 18:27.320
我这个类里面能不能管得了

18:27.320 --> 18:29.320
你好像管不了这件事

18:29.320 --> 18:31.320
因为你这里根本就没有表单

18:31.320 --> 18:33.320
表单在哪儿都不知道的吧

18:33.320 --> 18:36.320
你只管单个某一项的验证

18:36.320 --> 18:39.320
表单的整体验证你做不了这件事

18:39.320 --> 18:43.320
因此表单提交的时候的验证

18:43.320 --> 18:46.320
交给外边去做

18:46.320 --> 18:48.320
我只要给你提供一个验证方法

18:48.320 --> 18:50.320
叫Validator

18:50.320 --> 18:52.320
Validator是验证器

18:52.320 --> 18:53.320
一个名词

18:53.320 --> 18:55.320
Validator是一个动词表示验证

18:55.320 --> 18:57.320
我只需要给你提交一个方法

18:57.320 --> 18:59.320
Validator

18:59.320 --> 19:03.320
表示开始验证

19:03.320 --> 19:06.320
验证成功

19:08.320 --> 19:11.320
验证

19:11.320 --> 19:13.320
成功返回处

19:13.320 --> 19:16.320
失败返回Force

19:16.320 --> 19:17.320
我只要给你提供一个方法

19:17.320 --> 19:19.320
你如果说你在某一个时候要验证

19:19.320 --> 19:21.320
你去调用一个方法就完事了

19:21.320 --> 19:23.320
去调用Validator的方法

19:23.320 --> 19:25.320
是不是一调用就完事了

19:25.320 --> 19:26.320
就知道验证结果了

19:26.320 --> 19:27.320
对不对

19:27.320 --> 19:30.320
所以我给你提供一个方法

19:30.320 --> 19:34.320
然后我这里只管失去交点的时候验证

19:34.320 --> 19:36.320
失去交点的时候

19:36.320 --> 19:38.320
我要做的验证也非常简单

19:38.320 --> 19:39.320
就是ZsInput

19:39.320 --> 19:40.320
给它做这个实践

19:40.320 --> 19:43.320
Umbler

19:43.320 --> 19:45.320
写一个先动还书吧

19:45.320 --> 19:48.320
因为这里我要用ZsValidator

19:48.320 --> 19:50.320
就完事了

19:50.320 --> 19:51.320
是不是就这样子

19:51.320 --> 19:53.320
你看个逻辑还是很清晰的

19:53.320 --> 19:55.320
你给我一个ID

19:55.320 --> 19:57.320
给我一个验证的函数

19:57.320 --> 19:58.320
规则的函数

19:58.320 --> 20:00.320
然后我把一些动物对象全部找到

20:00.320 --> 20:01.320
当它失去交点的时候

20:01.320 --> 20:02.320
我要触发验证

20:02.320 --> 20:04.320
当然除了失去交点之外

20:04.320 --> 20:05.320
别的时候

20:05.320 --> 20:07.320
你任何时候想要验证

20:07.320 --> 20:08.320
你调用这个方法

20:08.320 --> 20:10.320
它也会验证

20:10.320 --> 20:13.320
就写成了这么一个格式的代码

20:13.320 --> 20:15.320
好好去旅游一下

20:15.320 --> 20:17.320
然后把个代码跟着写一遍

20:17.320 --> 20:19.320
我们表扬一个函数里面

20:19.320 --> 20:21.320
输出一个验证

20:21.320 --> 20:23.320
保存来看一下

20:23.320 --> 20:25.320
在这边

20:25.320 --> 20:28.320
失去交点所以有验证

20:28.320 --> 20:29.320
其他的失去交点没有

20:29.320 --> 20:30.320
因为我目前只管了

20:30.320 --> 20:31.320
这一个表达箱

20:31.320 --> 20:33.320
所以有验证对吧

20:33.320 --> 20:35.320
对这个表达箱有验证

20:35.320 --> 20:37.320
如果说我要点按钮的时候

20:37.320 --> 20:38.320
也要验证了也非常简单

20:38.320 --> 20:41.320
我给整个表达做一个提交事件

20:41.320 --> 20:42.320
当提交的时候

20:42.320 --> 20:44.320
我再去调它的方法

20:44.320 --> 20:45.320
调一个歪力

20:45.320 --> 20:47.320
任何时候我只需要去

20:47.320 --> 20:49.320
调它的歪力的方法

20:49.320 --> 20:50.320
里面不是这个方法吗

20:50.320 --> 20:52.320
所以也会出发验证

20:52.320 --> 20:53.320
对吧

20:53.320 --> 20:55.320
就这么一个意思

20:55.320 --> 20:57.320
接下来就是验证

20:57.320 --> 20:59.320
这个杂写怎么验证

20:59.320 --> 21:01.320
怎么验证呢

21:01.320 --> 21:04.320
是不是我要调这个验证规则函数

21:04.320 --> 21:05.320
我是不是一开始

21:05.320 --> 21:06.320
得把验证规则函数

21:06.320 --> 21:10.950
保存一下歪力的方法

21:10.950 --> 21:12.950
保存一下验证规则函数

21:12.950 --> 21:14.950
验证实际上要干什么

21:14.950 --> 21:16.950
我就要去调这个函数

21:16.950 --> 21:17.950
对吧

21:17.950 --> 21:19.950
它会告诉我有没有错误消息

21:19.950 --> 21:22.950
那我这里干嘛去调用这个函数

21:22.950 --> 21:25.950
thisValidateFunk

21:25.950 --> 21:26.950
这是个函数对吧

21:26.950 --> 21:27.950
调用

21:27.950 --> 21:29.950
这个函数是不是要传个东西过去

21:29.950 --> 21:30.950
传什么东西过去

21:30.950 --> 21:33.950
传当前文本框的值

21:33.950 --> 21:35.950
thisInput.Value

21:35.950 --> 21:38.950
是把文本框的值传过去

21:38.950 --> 21:39.950
对吧

21:39.950 --> 21:41.950
传过去了过后

21:41.950 --> 21:42.950
函数就会直行

21:42.950 --> 21:44.950
会告诉我一个错误消息

21:44.950 --> 21:50.290
我们得到这个错误消息

21:50.290 --> 21:53.290
是不是这个函数会有个返回结果

21:53.290 --> 21:55.290
如果说返回了错误消息有值

21:55.290 --> 21:57.290
说明啥有错误

21:57.290 --> 21:59.290
有错误怎么办

21:59.290 --> 22:02.290
有错误是不是给P元素设置

22:02.290 --> 22:03.290
错误对吧

22:03.290 --> 22:05.290
InnerTest

22:05.290 --> 22:07.290
有错误

22:07.290 --> 22:08.290
那没有错误呢

22:08.290 --> 22:10.290
没有错误就没有错误

22:10.290 --> 22:12.290
没有错误的话

22:12.290 --> 22:14.290
有错误的话我就返回True

22:14.290 --> 22:15.290
对吧

22:15.290 --> 22:17.290
没有错误呢

22:18.290 --> 22:21.290
我就给这个

22:21.290 --> 22:23.290
thisP.InnerTest

22:23.290 --> 22:24.290
设置为空置的事

22:24.290 --> 22:26.290
把错误消息清空

22:26.290 --> 22:27.290
然后返回

22:27.290 --> 22:29.290
没有错误返回True

22:29.290 --> 22:31.290
有错误的话返回Force

22:31.290 --> 22:32.290
验证成功返回True

22:32.290 --> 22:34.290
失败返回Force

22:34.290 --> 22:35.290
保存

22:35.290 --> 22:37.290
你看这个现在的位置就写出来了

22:37.290 --> 22:38.290
就非常简单

22:38.290 --> 22:40.290
那我们来试一下

22:40.290 --> 22:42.290
你看是不是出现了琴填线帐号

22:42.290 --> 22:43.290
为什么

22:43.290 --> 22:44.290
因为一失去焦点的时候

22:44.290 --> 22:46.290
会运行这个VanityTest

22:46.290 --> 22:47.290
运行这个VanityTest的时候

22:47.290 --> 22:48.290
它会运行这个回调函数

22:48.290 --> 22:49.290
这个回调函数里面

22:49.290 --> 22:50.290
是不是有验证规则

22:50.290 --> 22:51.290
它就会告诉我

22:51.290 --> 22:52.290
哪里有错

22:52.290 --> 22:53.290
这里就会

22:53.290 --> 22:55.290
发现这里没有文化没有值

22:55.290 --> 22:56.290
它就会返回这个

22:56.290 --> 22:57.290
返回这个过后一周到

22:57.290 --> 22:58.290
是不是有错误了

22:58.290 --> 22:59.290
有错误的话

22:59.290 --> 23:00.290
它就会把错误消息

23:00.290 --> 23:01.290
写到这个P元素里面去

23:01.290 --> 23:02.290
然后告诉我

23:02.290 --> 23:03.290
返回的是Force

23:03.290 --> 23:04.290
那么这里呢

23:04.290 --> 23:06.290
我也可以通过这种方式来验证

23:06.290 --> 23:07.290
然后我写了一些代码

23:07.290 --> 23:08.290
我来验证一下

23:12.600 --> 23:14.600
这是Test Login ID

23:16.600 --> 23:17.600
Login ID

23:17.600 --> 23:19.600
Lidator

23:20.600 --> 23:21.600
它告诉我

23:22.600 --> 23:23.600
验证成功

23:24.600 --> 23:25.600
验证成功呢

23:25.600 --> 23:27.600
表示这里没有错误

23:27.600 --> 23:28.600
那如果说有错误

23:29.600 --> 23:31.600
不要说我乱了

23:34.810 --> 23:35.810
有错误了

23:35.810 --> 23:36.810
你看这是Vforce

23:37.810 --> 23:38.810
只要教这个方法

23:38.810 --> 23:39.810
它就会触发这个表态

23:39.810 --> 23:40.810
来向你验证

23:40.810 --> 23:42.810
失去焦点它会自动出发

23:42.810 --> 23:43.810
你手动调问这个方法

23:43.810 --> 23:44.810
它也会触发验证

23:45.810 --> 23:46.810
就这么意思

23:47.810 --> 23:48.810
好 我们继续完善

23:48.810 --> 23:49.810
继续完善

23:50.810 --> 23:51.810
那有的时候

23:51.810 --> 23:52.810
我有一些验证

23:52.810 --> 23:53.810
它可能是异部的

23:54.810 --> 23:55.810
有没有可能

23:55.810 --> 23:56.810
有可能

23:56.810 --> 23:57.810
比方说

23:58.810 --> 24:00.810
我针对它的验证

24:00.810 --> 24:01.810
这个文闷框的验证

24:01.810 --> 24:02.810
我还有一种情况

24:02.810 --> 24:03.810
就是我要看

24:03.810 --> 24:04.810
这个账号是否存在

24:05.810 --> 24:06.810
有没有人已经注册过了

24:07.810 --> 24:08.810
那么也就说

24:08.810 --> 24:09.810
我这个方法可能是异部的

24:11.810 --> 24:13.810
如果说你没有填写账号

24:13.810 --> 24:14.810
那就要返回请填写账号

24:15.810 --> 24:16.810
如果说你填了账号

24:16.810 --> 24:17.810
我还要看一下

24:17.810 --> 24:18.810
账号是否存在

24:18.810 --> 24:19.810
我们之前是不是写过

24:19.810 --> 24:20.810
这么一个API函数

24:21.810 --> 24:22.810
一个Z

24:22.810 --> 24:23.810
对吧

24:23.810 --> 24:24.810
这里是不是异部的

24:26.810 --> 24:27.810
你把账号传进去

24:27.810 --> 24:28.810
你看这个函数里面

24:28.810 --> 24:29.810
是不是把一个账号传进去

24:29.810 --> 24:30.810
就完事了

24:30.810 --> 24:31.810
把一个账号传进去

24:31.810 --> 24:32.810
它会告诉我

24:32.810 --> 24:33.810
到底

24:33.810 --> 24:35.810
服务器会告诉我一个结果

24:36.810 --> 24:38.810
我们输出一下服务器的

24:38.810 --> 24:39.810
反馈结果

24:39.810 --> 24:40.810
看一下

24:40.810 --> 24:41.810
输入一个哈哈

24:42.810 --> 24:45.630
一个Z

24:45.630 --> 24:47.630
is not defend

24:49.940 --> 24:50.940
我看一下

24:51.940 --> 24:52.940
为什么我会说

24:53.940 --> 24:54.940
is not defend

24:55.940 --> 24:56.940
我是名字写出来

24:59.940 --> 25:00.940
我发现发挥的

25:03.640 --> 25:04.640
有

25:04.640 --> 25:05.640
API

25:05.640 --> 25:06.640
不好意思

25:07.640 --> 25:08.640
API掉Z

25:09.640 --> 25:10.640
好来试一下

25:10.640 --> 25:11.640
说一个哈哈

25:12.640 --> 25:13.640
你看这服务器的

25:13.640 --> 25:14.640
反馈消息对吧

25:14.640 --> 25:15.640
它告诉我

25:15.640 --> 25:16.640
表示个账号是存在的

25:17.640 --> 25:18.640
那么也就意味着

25:18.640 --> 25:19.640
我这里是不是还要

25:19.640 --> 25:20.640
判断一下

25:20.640 --> 25:21.640
Z

25:21.640 --> 25:22.640
的data

25:23.640 --> 25:24.640
如果说为Q的话

25:24.640 --> 25:25.640
说明啥

25:25.640 --> 25:26.640
账号已存在

25:27.640 --> 25:28.640
是吧

25:28.640 --> 25:29.640
反馈一个错误消息

25:29.640 --> 25:30.640
该账号

25:31.640 --> 25:32.640
已被占用

25:32.640 --> 25:33.640
请

25:33.640 --> 25:34.640
重新

25:35.640 --> 25:38.640
选择一个账号

25:39.640 --> 25:42.080
有错误

25:43.080 --> 25:44.080
那么剩下的情况就正确了

25:45.080 --> 25:46.080
那么这里变成一步的了

25:46.080 --> 25:47.080
那么如果说

25:47.080 --> 25:48.080
你说我这里要

25:48.080 --> 25:49.080
这里的情况是

25:49.080 --> 25:51.080
我这里要默认它是一步的

25:52.080 --> 25:53.080
那怎么办

25:53.080 --> 25:54.080
我得等待它的

25:55.080 --> 25:56.080
结果我要默认它是一步的

25:56.080 --> 25:57.080
那么它要等待

25:57.080 --> 25:58.080
那么这个验证

25:58.080 --> 25:59.080
它也变成一步的了

26:00.080 --> 26:01.080
因为它有可能

26:01.080 --> 26:02.080
它里边要等待

26:03.080 --> 26:04.080
它验证过程

26:04.080 --> 26:05.080
它也变成一步的

26:05.080 --> 26:06.080
它也变成一步的了

26:06.080 --> 26:07.080
就这么个意思

26:08.080 --> 26:09.080
那么再来看

26:11.080 --> 26:12.080
现在我们写一个

26:12.080 --> 26:13.080
不写

26:13.080 --> 26:14.080
没问题

26:14.080 --> 26:15.080
这个哈哈

26:15.080 --> 26:16.080
也没问题

26:16.080 --> 26:17.080
这个账号已经被占用了

26:18.080 --> 26:19.080
对吧

26:20.080 --> 26:21.080
那么这个

26:21.080 --> 26:23.080
单个对表达单个项的验证

26:24.080 --> 26:25.080
就算完成了

26:26.080 --> 26:27.080
但是有的时候

26:27.080 --> 26:28.080
我们可能希望

26:28.080 --> 26:29.080
同时对表达

26:29.080 --> 26:30.080
多个表达项

26:30.080 --> 26:31.080
同时进行验证

26:31.080 --> 26:33.080
那么我不要怎么做

26:33.080 --> 26:34.080
我们是不是要

26:34.080 --> 26:35.080
多个Validator

26:35.080 --> 26:36.080
是吧

26:36.080 --> 26:37.080
这是对账号的验证

26:37.080 --> 26:38.080
那比方说

26:38.080 --> 26:39.080
我还要对密码的验证

26:39.080 --> 26:40.080
里程的验证

26:40.080 --> 26:41.080
我们再来一个

26:43.080 --> 26:44.080
Validator

26:45.080 --> 26:46.080
也是一样

26:46.080 --> 26:47.080
那么就是

26:48.080 --> 26:49.080
我看一下写对没有

26:57.460 --> 26:58.460
那么这里呢

26:59.460 --> 27:00.460
对这个

27:01.460 --> 27:02.460
这一块的验证的话

27:02.460 --> 27:03.460
它就不是一步的

27:03.460 --> 27:04.460
管它是不是一步

27:04.460 --> 27:05.460
那我都得

27:05.460 --> 27:06.460
都得把它

27:06.460 --> 27:07.460
当成一步来处理

27:07.460 --> 27:08.460
我一定要等它

27:08.460 --> 27:09.460
它的结果

27:09.460 --> 27:10.460
对吧

27:10.460 --> 27:11.460
那么这里是

27:11.460 --> 27:12.460
填写女生

27:13.460 --> 27:15.460
所以说穿上两个验证器

27:15.460 --> 27:16.460
一个是对针对

27:16.460 --> 27:17.460
那个Rocket ID的验证器

27:17.460 --> 27:18.460
一个是针对

27:18.460 --> 27:20.460
那个Leaknet的验证器

27:20.460 --> 27:21.460
好 咱们试一下

27:21.460 --> 27:23.460
人类账号的验证器

27:25.460 --> 27:26.460
你看 女生的验证器

27:26.460 --> 27:27.460
是不是都有了

27:28.460 --> 27:29.460
有的时候呢

27:29.460 --> 27:30.460
我们想同时触发

27:30.460 --> 27:31.460
两个验证

27:31.460 --> 27:32.460
那我现在的做法

27:33.460 --> 27:34.460
是不是得一起来调用

27:34.460 --> 27:36.460
先调用它的Validator

27:39.460 --> 27:40.460
它得到一个Promise

27:40.460 --> 27:41.460
最后告诉我是Force

27:42.460 --> 27:43.460
验证示范

27:43.460 --> 27:44.460
然后再去调用那个

27:44.460 --> 27:47.460
Leaknet的Validator

27:49.460 --> 27:50.460
所以两个都在调用

27:52.460 --> 27:54.460
那么这现在就出现一个需求

27:54.460 --> 27:55.460
我能不能写一个东西

27:55.460 --> 27:57.460
能够同时调用

27:57.460 --> 27:59.460
帮我们调用

27:59.460 --> 28:01.460
一系列验证器的验证方法

28:01.460 --> 28:02.460
它自动帮我们全部调用

28:02.460 --> 28:05.460
而且告诉我一个汇总的结果

28:05.460 --> 28:07.460
什么叫汇总的结果

28:07.460 --> 28:08.460
只要有一个验证失败

28:08.460 --> 28:10.460
就表示失败

28:10.460 --> 28:12.460
必须要全部成功了

28:12.460 --> 28:15.460
我才能表示成功

28:15.460 --> 28:16.460
那这里呢

28:16.460 --> 28:19.460
我们可以在这里边

28:19.460 --> 28:22.460
再写一个静态的方法

28:22.460 --> 28:24.460
为什么要写静态方法

28:24.460 --> 28:25.460
什么叫静态方法

28:25.460 --> 28:27.460
还知道 还记得吗

28:27.460 --> 28:28.460
就是你直接写到

28:28.460 --> 28:30.460
构造函数的方法

28:30.460 --> 28:31.460
叫静态方法

28:31.460 --> 28:32.460
你写到圆形上的方法

28:32.460 --> 28:33.460
叫圆形方法

28:33.460 --> 28:35.460
像这些都是圆形方法

28:35.460 --> 28:36.460
静态方法的话

28:36.460 --> 28:38.460
在ESU里面可以这样子出写

28:38.460 --> 28:39.460
有点方便一点

28:39.460 --> 28:41.460
为什么我要写静态方法

28:41.460 --> 28:43.460
因为我不需要去

28:43.460 --> 28:45.460
创建某一个验证器

28:45.460 --> 28:47.460
就是我希望到时候

28:48.460 --> 28:50.460
我希望达成一个什么效果

28:50.460 --> 28:52.460
我希望是直接使用一个验证器

28:52.460 --> 28:54.460
它里面直接有个Validator方法

28:54.460 --> 28:56.460
它不是在圆形上

28:56.460 --> 28:57.460
它是在静态的

28:57.460 --> 28:59.460
你看我们之前写的方法

28:59.460 --> 29:01.460
它都在圆形上

29:01.460 --> 29:03.460
对不对 是在圆形上

29:03.460 --> 29:05.460
它要通过某一个实力去雕用的

29:05.460 --> 29:07.460
那么它再加一个静态方法

29:07.460 --> 29:09.460
它直接通过内去雕用的

29:09.460 --> 29:11.460
你只需要告诉我

29:11.460 --> 29:13.460
这两个验证器就可以了

29:13.460 --> 29:15.460
你把验证器放到一个数组里面告诉我

29:15.460 --> 29:17.460
放到一个数组里面

29:17.460 --> 29:19.460
那么这样子呢

29:19.460 --> 29:20.460
我就会针对这个数组里面

29:20.460 --> 29:21.460
所有的验证器

29:21.460 --> 29:24.770
一起来进行一次验证

29:24.770 --> 29:26.770
然后它会返回一个结果

29:27.770 --> 29:29.770
返回一个验证结果

29:30.770 --> 29:32.770
当然由于每一个验证是异步的

29:32.770 --> 29:33.770
那么这个方法呢

29:33.770 --> 29:34.770
肯定也是异步的

29:34.770 --> 29:36.770
因为它

29:36.770 --> 29:40.400
它要等待每一个验证结束

29:41.400 --> 29:43.400
知道我要返回一个验证结果

29:43.400 --> 29:45.400
如果说有这个方法的话

29:45.400 --> 29:47.400
那我将来在验证的时候就更加方便了

29:47.400 --> 29:49.400
我把所有的验证器也传进去

29:49.400 --> 29:51.400
那么它对我进行一个同意的验证

29:51.400 --> 29:52.400
那么这件事呢

29:52.400 --> 29:53.400
是一般发展在什么时候呢

29:53.400 --> 29:55.400
发展在表达提交的时候

29:55.400 --> 29:57.400
提交的时候还要整体验证一遍

29:58.400 --> 30:00.400
原来说每一个都验证了

30:00.400 --> 30:01.400
为什么还要整体验证一遍呢

30:01.400 --> 30:03.400
是因为你可能啥也不写

30:03.400 --> 30:04.400
直接电注册

30:05.400 --> 30:07.400
对吧 它每一个就没有出发验证

30:07.400 --> 30:09.400
所以你还要整体全部验证一遍

30:09.400 --> 30:11.400
保证所有的验证全部通过之后

30:11.400 --> 30:12.400
才能真正地提交

30:12.400 --> 30:14.400
是这么个意思

30:14.400 --> 30:17.400
所以说我们这里要写上这么一个静态方法

30:17.400 --> 30:19.400
Vanity Data

30:20.400 --> 30:21.400
名字一样

30:21.400 --> 30:22.400
但是它是在原型上

30:22.400 --> 30:23.400
它是静态的

30:23.400 --> 30:24.400
你给我的是什么呢

30:24.400 --> 30:27.400
给我的是Vanity Data

30:27.400 --> 30:29.400
所有的验证器

30:30.400 --> 30:31.400
这些东西

30:31.400 --> 30:33.400
所有的验证器全部给我

30:34.400 --> 30:36.400
那我怎么来验证呢 就在这里

30:36.400 --> 30:38.400
这里要单码不多

30:38.400 --> 30:40.400
但是会有点复杂

30:40.400 --> 30:44.420
这个函数要返回一个布尔

30:45.420 --> 30:46.420
可能可以想一想

30:46.420 --> 30:47.420
这个函数来扎写

30:47.420 --> 30:54.250
每一个Vanity Data

30:54.250 --> 30:56.250
输出的每一项

30:56.250 --> 30:58.250
是一个Vanity Data内容

30:58.250 --> 31:00.250
就是这个函数的实力内容

31:00.250 --> 31:02.250
然后对所有的验证器

31:02.250 --> 31:06.250
对传入的所有验证器

31:07.250 --> 31:09.250
进行统一的验证

31:10.250 --> 31:12.250
要出这么一件事

31:13.250 --> 31:14.250
当然这里能可以

31:14.250 --> 31:16.250
用这种方式来设计也可以

31:16.250 --> 31:17.250
用剩余参数

31:17.250 --> 31:18.250
用剩余参数的方式

31:18.250 --> 31:20.250
就可以不用写这个数组了

31:20.250 --> 31:21.250
不用写这个中托号了

31:21.250 --> 31:22.250
一次传议就完事了

31:22.250 --> 31:24.250
它会汇总到这个数组

31:24.250 --> 31:25.250
都行

31:26.250 --> 31:28.250
对传了所有的验证器进行统一的验证

31:29.250 --> 31:30.250
然后呢返回

31:31.250 --> 31:34.250
如果所有的验证军通过

31:35.250 --> 31:36.250
则返回

31:37.250 --> 31:39.250
否则只要有一个没通过

31:43.580 --> 31:44.580
就做这么一件事

31:44.580 --> 31:46.580
当然这个函数它一定是异布的

31:46.580 --> 31:47.580
毫无疑问

31:47.580 --> 31:48.580
这个异布函数

31:49.580 --> 31:50.580
为什么

31:50.580 --> 31:51.580
因为它每个验证器

31:51.580 --> 31:53.580
它的验证过程是异布的

31:53.580 --> 31:54.580
那么就导致了

31:54.580 --> 31:56.580
这个函数必须要等待

31:56.580 --> 31:57.580
每个验证器全部结束

31:57.580 --> 31:59.580
所以它也变成异布的

32:00.580 --> 32:01.580
这个玩意怎么写

32:03.580 --> 32:04.580
怎么写

32:04.580 --> 32:05.580
那么这里呢

32:05.580 --> 32:07.580
我们就必须要调用

32:07.580 --> 32:10.580
所有验证器的验证方法

32:10.580 --> 32:11.580
是不是

32:12.580 --> 32:14.580
要调用所有验证器的验证方法

32:15.580 --> 32:16.580
Vaniedetors

32:18.580 --> 32:19.580
MAC

32:23.370 --> 32:24.370
会比较复杂

32:24.370 --> 32:27.680
我调用每一个验证

32:27.680 --> 32:28.680
这是一个验证器对象

32:28.680 --> 32:29.680
对吧

32:29.680 --> 32:30.680
全部是把它变成了啥

32:30.680 --> 32:31.680
变成了一个

32:31.680 --> 32:32.680
调用Vaniedetors之后

32:32.680 --> 32:33.680
返回的Promise

32:34.680 --> 32:36.680
把它也去调用Vaniedetors

32:37.680 --> 32:38.680
对每一个验证器

32:38.680 --> 32:39.680
去调用它的验证方法

32:40.680 --> 32:41.680
然后这个验证方法

32:41.680 --> 32:42.680
会返回一个Promise

32:42.680 --> 32:43.680
那么这样子

32:43.680 --> 32:44.680
会不会拿到一个Promise的数数

32:46.680 --> 32:47.680
对吧

32:47.680 --> 32:48.680
它们都在进行验证了

32:48.680 --> 32:49.680
都去验证了

32:49.680 --> 32:50.680
但是呢

32:50.680 --> 32:51.680
现在呢我还要

32:51.680 --> 32:52.680
最终的验证结果

32:52.680 --> 32:53.680
那么现在其实已经验证了

32:53.680 --> 32:54.680
已经验证了

32:54.680 --> 32:56.680
你马上来试一下

32:59.570 --> 33:00.570
我在这里写个函数

33:00.570 --> 33:01.570
Test

33:02.570 --> 33:03.570
把它放进去

33:05.570 --> 33:06.570
来调用一个Test函数

33:07.570 --> 33:08.570
你看是不是就已经验证了

33:08.570 --> 33:09.570
因为它每一个Vaniedetors方法

33:09.570 --> 33:11.570
都去调用了一遍

33:11.570 --> 33:12.570
关键是什么呢

33:12.570 --> 33:13.570
关键是我要知道

33:13.570 --> 33:14.570
这个汇总的结果

33:14.570 --> 33:16.570
它到底验证有没有通过

33:16.570 --> 33:17.570
因为它会影响到

33:17.570 --> 33:20.570
我到底要不要提交表达

33:20.570 --> 33:21.570
对吧

33:21.570 --> 33:22.570
我要判断它验证有没有通过

33:22.570 --> 33:23.570
所以说我要知道

33:23.570 --> 33:25.570
每个Promise完成之后

33:25.570 --> 33:27.570
有没有一个是

33:28.570 --> 33:29.570
是不是所有的都委屈

33:30.570 --> 33:31.570
因为这个Vaniedetors

33:31.570 --> 33:32.570
返回处就表示验证成功了

33:32.570 --> 33:34.570
是不是所有的委屈

33:34.570 --> 33:35.570
所有的都委屈

33:37.570 --> 33:38.570
那我就

33:38.570 --> 33:39.570
怎么样

33:39.570 --> 33:40.570
那我就表示验证通过

33:40.570 --> 33:41.570
有一个不委屈

33:41.570 --> 33:43.570
我就表示验证失败

33:43.570 --> 33:44.570
因此我现在要得到的是什么

33:44.570 --> 33:46.570
我现在拿到了的是一个Promise

33:47.570 --> 33:48.570
数组

33:48.570 --> 33:49.570
但是我要知道的

33:49.570 --> 33:51.570
我不需要你这个Promise数组

33:51.570 --> 33:52.570
我要的是

33:52.570 --> 33:54.570
每一个验证的结果

33:54.570 --> 33:56.570
我要的是不是这个东西

33:56.570 --> 33:57.570
第一个验证

33:57.570 --> 33:59.570
它是验证True还是False

33:59.570 --> 34:00.570
True还是什么

34:00.570 --> 34:02.570
第二个验证是

34:02.570 --> 34:03.570
True还是False

34:03.570 --> 34:04.570
要的是这样一个东西

34:05.570 --> 34:06.570
懂了意思吧

34:07.570 --> 34:09.570
那又怎么办

34:09.570 --> 34:10.570
那又怎么办

34:10.570 --> 34:13.570
那我是不是可以用Promise All

34:14.570 --> 34:16.570
把这个数组传进去

34:16.570 --> 34:17.570
对吧

34:17.570 --> 34:19.570
这样子呢

34:19.570 --> 34:20.570
必须要它这里面

34:20.570 --> 34:22.570
全部完成之后

34:22.570 --> 34:24.570
我这个Promise才完成

34:24.570 --> 34:25.570
那我等待呗

34:25.570 --> 34:27.570
等待这个Promise完成

34:27.570 --> 34:30.880
我们输出一下的Realize

34:30.880 --> 34:31.880
看一下Realize

34:31.880 --> 34:33.880
是不是就是我们想要的

34:35.880 --> 34:36.880
你看

34:36.880 --> 34:37.880
两个都是False

34:37.880 --> 34:38.880
表示两个都没有验证成功

34:38.880 --> 34:39.880
那我随便再写一个吧

34:40.880 --> 34:41.880
第一个为True

34:41.880 --> 34:42.880
第二个为False

34:42.880 --> 34:43.880
是不是

34:43.880 --> 34:44.880
第二个验证失败

34:44.880 --> 34:45.880
第一个验证成功

34:45.880 --> 34:47.880
我现在要保证的是

34:47.880 --> 34:48.880
只要这个数组里面

34:48.880 --> 34:49.880
所有的都是True

34:51.880 --> 34:53.880
那我就返回True

34:53.880 --> 34:54.880
只要有一个False

34:54.880 --> 34:55.880
我就返回False

34:55.880 --> 34:56.880
这其实是一个查照问题

34:56.880 --> 34:58.880
就查里面有没有False

34:58.880 --> 35:00.880
那么有了Es5之后的

35:00.880 --> 35:01.880
这个查照很简单

35:01.880 --> 35:02.880
就用Avery就行了

35:02.880 --> 35:04.880
是不是每一个都满足条件

35:07.900 --> 35:08.900
完了

35:08.900 --> 35:09.900
就这个完了

35:09.900 --> 35:10.900
这啥意思

35:10.900 --> 35:12.900
这个数组不是

35:12.900 --> 35:13.900
它的数组

35:14.900 --> 35:15.900
它不是这么格式吗

35:15.900 --> 35:17.900
True,False,你看一下

35:18.900 --> 35:20.900
我看一下数组的每一项

35:20.900 --> 35:22.900
如果说每一项

35:22.900 --> 35:26.340
我就用R作为结果

35:26.340 --> 35:27.340
每一项都是True

35:27.340 --> 35:29.340
因为它本身就是布尔

35:29.340 --> 35:30.340
我看第一项

35:30.340 --> 35:32.340
第一项是不是True

35:33.340 --> 35:34.340
是True

35:34.340 --> 35:35.340
我再看第二项

35:35.340 --> 35:36.340
第二项是不是True

35:36.340 --> 35:37.340
而不是True

35:37.340 --> 35:38.340
那么有一项不满足条件

35:38.340 --> 35:40.340
就返回了False

35:40.340 --> 35:41.340
Avery是什么意思

35:41.340 --> 35:43.340
Avery的意思就是

35:43.340 --> 35:46.340
让每一项的值

35:46.340 --> 35:47.340
有可能忘记了

35:47.340 --> 35:48.340
每一项的值

35:48.340 --> 35:50.340
传到这个参数

35:50.340 --> 35:52.340
看它返回的这个值

35:52.340 --> 35:54.340
是不是全是True

35:54.340 --> 35:56.340
Avery就是这个意思

35:56.340 --> 35:57.340
每一项

35:57.340 --> 35:58.340
调的时候

35:58.340 --> 35:59.340
不管你是数字的数组

35:59.340 --> 36:00.340
还是布尔的数组

36:00.340 --> 36:01.340
还是对象的数组

36:01.340 --> 36:02.340
它每一项就传进来

36:02.340 --> 36:03.340
看你这个的

36:03.340 --> 36:04.340
函数返回的值

36:04.340 --> 36:05.340
是不是全为True

36:05.340 --> 36:06.340
全为True

36:06.340 --> 36:07.340
那就OK

36:07.340 --> 36:09.340
那么Avery函数就返回True

36:09.340 --> 36:10.340
只要有一个False

36:10.340 --> 36:11.340
返回False

36:11.340 --> 36:12.340
它就会返回False

36:12.340 --> 36:15.340
正好我们就是布尔数组

36:15.340 --> 36:17.340
布尔不定数组

36:17.340 --> 36:18.340
第一个数传进去

36:18.340 --> 36:20.340
我就把每一个布尔

36:20.340 --> 36:22.340
放进去返回就行了

36:22.340 --> 36:24.340
如果全部布尔都返回True

36:24.340 --> 36:25.340
那就是返回True

36:25.340 --> 36:26.340
有一个为False的话

36:26.340 --> 36:28.340
就返回False

36:28.340 --> 36:29.340
这样子就来

36:29.340 --> 36:30.340
Validate是函数

36:30.340 --> 36:31.340
Validate是函数

36:31.340 --> 36:32.340
三句代码就实现

36:32.340 --> 36:33.340
咱们来看一下

36:33.340 --> 36:35.340
Test函数

36:40.380 --> 36:41.380
没有输出函

36:41.380 --> 36:43.380
没有输出函

36:43.380 --> 36:45.380
返回点值

36:45.380 --> 36:47.380
Results Avery

36:47.380 --> 36:48.380
没保存

36:48.380 --> 36:50.380
我说什么很少

36:50.380 --> 36:53.380
所以为False

36:53.380 --> 36:55.380
再来一个

36:55.380 --> 36:56.380
还是为False

36:56.380 --> 36:58.380
你现在输入一个

36:58.380 --> 36:59.380
就出了

36:59.380 --> 37:00.380
一页能通过了

37:00.380 --> 37:02.380
就这么个意思

37:02.380 --> 37:03.380
就写完了

37:03.380 --> 37:04.380
写了半天

37:04.380 --> 37:05.380
就是代码没几

37:05.380 --> 37:06.380
是什么代码

37:06.380 --> 37:07.380
就算我们刚才说的

37:07.380 --> 37:08.380
写通用代码

37:08.380 --> 37:10.380
其实代码量并不是很多

37:10.380 --> 37:12.380
就是比较复杂

37:13.380 --> 37:15.380
那么这个代码写完了

37:15.380 --> 37:16.380
写完了之后

37:16.380 --> 37:17.380
我们回到注册这里

37:17.380 --> 37:19.380
就好写了

37:19.380 --> 37:20.380
注册这里咋写呢

37:20.380 --> 37:22.380
我无非就是要创建

37:22.380 --> 37:24.380
各种各样的验证规则

37:25.380 --> 37:27.380
需要创建各种各样的验证规则

37:27.380 --> 37:28.380
来吧

37:28.380 --> 37:29.380
我们写

37:30.380 --> 37:31.380
第一个规则

37:31.380 --> 37:33.380
针对账号的验证规则

37:33.380 --> 37:36.380
针对里称的验证规则

37:36.380 --> 37:38.380
还有什么呢

37:38.380 --> 37:39.380
还有什么规则

37:39.380 --> 37:41.380
还有针对密码的验证规则

37:48.980 --> 37:51.980
针对密码的Login password

37:51.980 --> 37:53.980
Validator

37:53.980 --> 37:54.980
复制一下吧

37:54.980 --> 37:56.980
密码的验证规则也很简单

37:56.980 --> 37:57.980
就是

37:58.980 --> 38:00.980
请你先写密码

38:00.980 --> 38:03.810
再来一个

38:03.810 --> 38:05.810
还有一个确证密码的验证规则

38:06.810 --> 38:07.810
这个代码多

38:07.810 --> 38:09.810
但是不意味着代码复杂

38:09.810 --> 38:10.810
这个代码就不复杂了

38:10.810 --> 38:12.810
就是你把每个规则配置好就完事了

38:12.810 --> 38:13.810
密码这里是

38:13.810 --> 38:15.810
DST Login Password

38:16.810 --> 38:18.810
第四个是

38:18.810 --> 38:19.810
我看一下ID

38:22.310 --> 38:23.310
第四个是

38:23.310 --> 38:24.310
DST Login Password

38:24.310 --> 38:25.310
Confirm

38:28.900 --> 38:29.900
如果说没有值的话

38:29.900 --> 38:30.900
请

38:30.900 --> 38:31.900
填写

38:31.900 --> 38:33.900
确证密码

38:33.900 --> 38:35.900
确证密码这一块有一个区别

38:35.900 --> 38:36.900
就在于他要判断

38:36.900 --> 38:38.900
确证密码跟密码

38:38.900 --> 38:39.900
是不是一致的

38:39.900 --> 38:40.900
两次输入是不是一致的

38:40.900 --> 38:42.900
所以说这里还要判断一下

38:42.900 --> 38:44.900
当前那个WAR

38:44.900 --> 38:46.900
是不是跟那个

38:46.900 --> 38:48.900
Login Password

38:48.900 --> 38:49.900
Validator

38:49.900 --> 38:50.900
跟这个验证器里边

38:50.900 --> 38:52.900
不是有一个Input元素吗

38:52.900 --> 38:53.900
也记得吗

38:53.900 --> 38:54.900
刚才我是不是写了一个

38:54.900 --> 38:55.900
这个属性

38:55.900 --> 38:56.900
Input

38:56.900 --> 38:58.900
跟上一个的文闷框的值

38:58.900 --> 39:00.900
是不是一致的

39:00.900 --> 39:01.900
如果说不一致的话

39:01.900 --> 39:02.900
它还有错误

39:04.900 --> 39:07.900
每个文闷框的规则是不一样的

39:07.900 --> 39:10.900
两次密码不一致

39:11.900 --> 39:13.900
就四个验证规则了

39:13.900 --> 39:14.900
规则全部写完了

39:14.900 --> 39:16.900
咱们来试一下

39:16.900 --> 39:17.900
帐号

39:17.900 --> 39:18.900
这边什么

39:18.900 --> 39:19.900
Login IDVDator

39:19.900 --> 39:21.900
还是already been declared

39:24.980 --> 39:25.980
这边没保存

39:26.980 --> 39:27.980
好了

39:28.980 --> 39:30.980
你看这些都有验证的吧

39:30.980 --> 39:31.980
来试一下密码的确证

39:31.980 --> 39:33.980
说一个不一样的

39:33.980 --> 39:34.980
两次密码不一致

39:34.980 --> 39:36.980
验证全部都有了

39:36.980 --> 39:38.980
然后呢

39:39.980 --> 39:40.980
我把这些验证

39:40.980 --> 39:43.980
这些东西放到一个数组里边去

39:45.980 --> 39:47.980
全部放到一个数组里边去

39:47.980 --> 39:49.980
VallyDators

39:51.980 --> 39:53.980
而且这不用放到数组里面去了

39:53.980 --> 39:54.980
不用放到数组里面去了

39:54.980 --> 39:56.980
然后我们直接找到这个表单

39:56.980 --> 39:59.980
有一种人说找按钮点注册点击事件

39:59.980 --> 40:00.980
不用

40:00.980 --> 40:01.980
当你有Fone表单的时候

40:01.980 --> 40:04.980
最好的做法是找表单

40:04.980 --> 40:06.980
找表单元素

40:06.980 --> 40:07.980
Fone

40:08.980 --> 40:09.980
Documents

40:11.980 --> 40:13.980
那样视为UserFone

40:14.980 --> 40:15.980
找到表单元素

40:15.980 --> 40:17.980
给表单元素注册事件

40:17.980 --> 40:19.980
叫做Unsubmit

40:20.980 --> 40:21.980
提交事件

40:23.980 --> 40:26.980
表单正在提交

40:26.980 --> 40:28.980
好 我们来看一下这个

40:28.980 --> 40:29.980
有没有运行

40:32.420 --> 40:33.420
回车

40:33.420 --> 40:34.420
是不是刚才说

40:34.420 --> 40:36.420
如果不知道没有路平有没有路上

40:36.420 --> 40:38.420
这个表单正在提交散了一下

40:38.420 --> 40:40.420
为什么他因为浏览器有刷新

40:40.420 --> 40:42.420
表单它是用默认行为的

40:42.420 --> 40:44.420
就是你按回车或者是点按钮

40:44.420 --> 40:45.420
它会提交表单

40:45.420 --> 40:46.420
就是导致浏览器刷新

40:46.420 --> 40:48.420
这是一种非常古老的

40:49.420 --> 40:50.420
通信办法

40:50.420 --> 40:51.420
现在我们一般不用这种方式来通信了

40:51.420 --> 40:52.420
一般都用阿迪克斯

40:52.420 --> 40:54.420
不要让它刷新一面

40:54.420 --> 40:55.420
那怎么办呢

40:55.420 --> 40:57.420
我要去阻止事件的默认行为

40:57.420 --> 40:59.420
1.prevent default

41:00.420 --> 41:01.420
好 再来看一下

41:01.420 --> 41:02.420
现在我们点按钮回车

41:02.420 --> 41:04.420
你看表单正在提交

41:04.420 --> 41:06.420
就运行了这个时间了

41:06.420 --> 41:07.420
或者点按钮

41:07.420 --> 41:09.420
它也会运行这个时间

41:10.420 --> 41:11.420
在这个事件里边

41:11.420 --> 41:12.420
我们要干嘛的

41:12.420 --> 41:14.420
首先要做验证

41:14.420 --> 41:15.420
怎么验证

41:15.420 --> 41:16.420
是不是feel的wire data

41:16.420 --> 41:18.420
里边一个静态方法

41:18.420 --> 41:19.420
wire data

41:19.420 --> 41:20.420
然后把那些验证器

41:20.420 --> 41:21.420
全部传进去

41:23.420 --> 41:24.420
我不管你之前

41:24.420 --> 41:25.420
失去焦点的时候

41:25.420 --> 41:26.420
有没有验证

41:26.420 --> 41:27.420
反正你提交表单的时候

41:27.420 --> 41:28.420
必须要再验证一遍

41:28.420 --> 41:29.420
以防万一

41:32.180 --> 41:33.180
一共有四个验证规则

41:33.180 --> 41:34.180
也四个验证器

41:34.180 --> 41:35.180
全部提交进去

41:35.180 --> 41:36.180
提交进去过后

41:36.180 --> 41:37.180
是不是会返回一个结果

41:37.180 --> 41:38.180
它要等待

41:39.180 --> 41:41.180
不要等待它的验证结果

41:44.940 --> 41:45.940
我输出一下这个

41:45.940 --> 41:47.940
看一下到底验证有没有通过

41:48.940 --> 41:50.940
好 再来

41:50.940 --> 41:51.940
回车

41:51.940 --> 41:52.940
全部验证了

41:52.940 --> 41:53.940
你看是不是全部验证了

41:53.940 --> 41:54.940
force

41:54.940 --> 41:55.940
验证没有通过

41:55.940 --> 41:57.940
我们现在填写

41:57.940 --> 41:58.940
回车

41:58.940 --> 41:59.940
还是force 还没通过

41:59.940 --> 42:00.940
回车

42:01.940 --> 42:02.940
回车

42:02.940 --> 42:03.940
回车

42:03.940 --> 42:04.940
出了

42:04.940 --> 42:05.940
表示验证通过了

42:05.940 --> 42:07.940
如果说验证没有通过

42:07.940 --> 42:08.940
那我就结束了

42:08.940 --> 42:10.940
验证都没通过

42:10.940 --> 42:11.940
还有什么后续了

42:11.940 --> 42:12.940
没有

42:12.940 --> 42:13.940
验证没通过

42:13.940 --> 42:16.940
验证无意通过

42:16.940 --> 42:17.940
验证没通过

42:17.940 --> 42:18.940
我就结束了

42:18.940 --> 42:20.940
验证通过了怎么办

42:22.940 --> 42:23.940
你这里在注册

42:23.940 --> 42:24.940
那不就是调用API注册吗

42:24.940 --> 42:25.940
对吧

42:26.940 --> 42:27.940
调用API注册

42:29.940 --> 42:30.940
看一下

42:30.940 --> 42:31.940
我们之前不是封装了一个API吗

42:31.940 --> 42:32.940
注册

42:34.940 --> 42:35.940
它有着E4传进去

42:36.940 --> 42:40.020
注册

42:42.020 --> 42:43.020
有的E4是要传一个对象进去

42:43.020 --> 42:44.020
对吧

42:44.020 --> 42:45.020
是不是传一个对象

42:46.020 --> 42:48.020
那么这里有一个新知识

42:48.020 --> 42:49.020
我先说

42:49.020 --> 42:50.020
没有那个新知识

42:50.020 --> 42:51.020
我也能解决

42:52.020 --> 42:53.020
也没啥

42:53.020 --> 42:54.020
其实也没啥

42:55.020 --> 42:56.020
login ID

42:56.020 --> 42:58.020
不就是这个文本框的这个值吗

42:59.020 --> 43:01.020
然后login password

43:01.020 --> 43:03.020
不就是那个

43:04.020 --> 43:06.020
这个文本框的

43:07.020 --> 43:08.020
叫什么

43:08.020 --> 43:09.020
login password

43:09.020 --> 43:10.020
validator

43:12.020 --> 43:13.020
input 点value

43:13.020 --> 43:14.020
对吧

43:14.020 --> 43:15.020
然后leakline

43:15.020 --> 43:17.020
不就是这个文本框的值吗

43:18.020 --> 43:19.020
可以吗

43:19.020 --> 43:20.020
可以

43:20.020 --> 43:21.020
得到一个对象

43:21.020 --> 43:22.020
传进去就可以注册了

43:22.020 --> 43:24.020
关键是这个对象拿到

43:24.020 --> 43:25.020
好像有点

43:25.020 --> 43:27.020
也不是很麻烦

43:27.020 --> 43:28.020
其实真不是很麻烦

43:28.020 --> 43:29.020
这样子

43:29.020 --> 43:30.020
去创建一个对象

43:30.020 --> 43:31.020
因为他要的不就是一个对象吗

43:31.020 --> 43:32.020
对吧

43:32.020 --> 43:33.020
我之前封装过的

43:34.020 --> 43:36.020
现在我告诉一个别的方式

43:36.020 --> 43:37.020
也可以拿到这个对象

43:37.020 --> 43:38.020
怎么拿

43:38.020 --> 43:40.020
你首先拿到这个封表单之后

43:40.020 --> 43:42.020
现在我们目标就是拿到这个对象

43:43.020 --> 43:44.020
这个都先给你注册掉了

43:44.020 --> 43:45.020
再说

43:48.680 --> 43:49.680
叫做data

43:49.680 --> 43:51.680
这个对象看一下

43:51.680 --> 43:53.680
这个对象就是参数要传进去的

43:54.680 --> 43:57.700
保存

43:57.700 --> 43:58.700
看一下吧

43:58.700 --> 43:59.700
随便写一下

44:02.200 --> 44:03.200
你看是不是拿到这个对象

44:03.200 --> 44:05.200
要的就是这个对象

44:05.200 --> 44:06.200
那么现在的对象

44:07.200 --> 44:08.200
这是一种方式

44:08.200 --> 44:09.200
手动去创建的对象

44:09.200 --> 44:10.200
还有一种方式

44:10.200 --> 44:12.200
这种方式倒是没啥

44:12.200 --> 44:14.200
就是如果说表单元素比较多

44:14.200 --> 44:15.200
表的不只是个文明

44:15.200 --> 44:16.200
对

44:16.200 --> 44:17.200
其实是个文明方

44:17.200 --> 44:18.200
我目前只用了三个

44:18.200 --> 44:21.200
其中一个是服务器不需要的

44:21.200 --> 44:22.200
服务器只需要的密码

44:22.200 --> 44:24.200
里称和账号就可以了

44:27.200 --> 44:28.200
这顺便说一下

44:28.200 --> 44:29.200
确证密码这一块

44:29.200 --> 44:31.200
往往服务器是不太需要的

44:31.200 --> 44:32.200
不太需要

44:32.200 --> 44:34.200
这个玩意在前端进行验根就可以了

44:34.200 --> 44:36.200
这个玩意主要的目的是

44:36.200 --> 44:39.200
确保用户是不是手误输错了

44:39.200 --> 44:40.200
主要是确保这个

44:40.200 --> 44:42.200
只要前端发现它没有输错的话

44:42.200 --> 44:44.200
服务器是不需要这个东西的

44:45.200 --> 44:47.200
那如果说表单相比较多的话

44:47.200 --> 44:48.200
那么这里面去创建的对象

44:48.200 --> 44:49.200
就写下代码来

44:49.200 --> 44:50.200
也不是很麻烦

44:50.200 --> 44:52.200
就是比较繁殊

44:52.200 --> 44:53.200
有没有一种更加快捷的方式呢

44:53.200 --> 44:54.200
有的

44:55.200 --> 44:57.200
我们可以通过一个

44:57.200 --> 45:00.200
构造函数叫做New Form Data

45:02.200 --> 45:03.200
这是浏览机给你提供的

45:03.200 --> 45:04.200
一个构造函数

45:04.200 --> 45:07.200
它专门来组装表单数据的

45:07.200 --> 45:09.200
专门来做这个事的

45:09.200 --> 45:10.200
一边传什么参数呢

45:10.200 --> 45:13.200
就传的是Foom表单动的动员数

45:13.200 --> 45:15.200
它会给你返回一个对象叫Foom Data

45:15.200 --> 45:16.200
接受一下

45:16.200 --> 45:18.200
这句话的意思是

45:19.200 --> 45:22.200
传入表单动

45:22.200 --> 45:28.830
得到一个表单数据对象

45:28.830 --> 45:30.830
得到这么一个东西

45:30.830 --> 45:31.830
这个东西是啥呢

45:31.830 --> 45:33.830
这个东西它就是一个对象

45:33.830 --> 45:34.830
可以通过这个对象

45:34.830 --> 45:36.830
去拿到表单里面的各种方法

45:36.830 --> 45:37.830
各种信息

45:37.830 --> 45:39.830
比方说吧

45:39.830 --> 45:41.830
把这个注射掉

45:42.830 --> 45:44.830
我把它放到Windows里面吧

45:44.830 --> 45:46.830
我们可以更加方便的

45:46.830 --> 45:48.830
我们可以更加方便的来调试

45:48.830 --> 45:49.830
好,来试一下吧

45:49.830 --> 45:51.830
就这个东西

45:51.830 --> 45:52.830
没有复制

45:53.830 --> 45:57.040
好,来试一下

45:58.040 --> 46:01.440
好,回程

46:01.440 --> 46:02.440
接下来

46:02.440 --> 46:04.440
接下来我来看一下Foom Data

46:07.750 --> 46:08.750
就这个东西

46:08.750 --> 46:09.750
好,这个东西的数据在哪呢

46:09.750 --> 46:10.750
我怎么看不到呢

46:10.750 --> 46:11.750
它里面是有一些方法

46:11.750 --> 46:14.750
比方说Gate

46:14.750 --> 46:21.660
比方说它那个叫做Kiss

46:21.660 --> 46:22.660
Kiss,这个方法

46:22.660 --> 46:25.660
它会返回所有的表单的那个

46:25.660 --> 46:27.660
键值队

46:27.660 --> 46:28.660
不是这个键的名字

46:28.660 --> 46:30.660
因为表单象的就是键值队嘛

46:30.660 --> 46:31.660
第一个账号

46:31.660 --> 46:32.660
账号的值是这个

46:32.660 --> 46:33.660
键是什么呢

46:33.660 --> 46:35.660
键就是它的Name属性

46:36.660 --> 46:38.660
键是表单象的Name属性

46:38.660 --> 46:40.660
Name属性是起这么一个作用的

46:40.660 --> 46:41.660
如果说你没有Name属性的话

46:41.660 --> 46:43.660
这个表单象是没有的

46:43.660 --> 46:44.660
它就不会记录到照里面

46:44.660 --> 46:45.660
所以说Name属性的

46:45.660 --> 46:46.660
就是它的键

46:46.660 --> 46:48.660
Name属性就是它的键

46:50.660 --> 46:51.660
对吧

46:51.660 --> 46:52.660
你看

46:52.660 --> 46:53.660
确诊密码是没有Name属性的

46:53.660 --> 46:55.660
那么确诊密码它就不会记录

46:55.660 --> 46:56.660
比方说吧

46:56.660 --> 46:57.660
我要去通过Foom Data

46:57.660 --> 46:59.660
来获取Lokin ID

46:59.660 --> 47:01.660
跟它Gate的方法

47:01.660 --> 47:02.660
Lokin ID传进去

47:02.660 --> 47:03.660
键传进去

47:03.660 --> 47:04.660
你可以拿到它的值

47:04.660 --> 47:06.660
你看,值是不是这个

47:06.660 --> 47:07.660
键传进去

47:07.660 --> 47:08.660
拿到它的值

47:08.660 --> 47:09.660
键是什么

47:09.660 --> 47:10.660
键就是这个Name

47:12.660 --> 47:13.660
但是我想要拿到

47:13.660 --> 47:14.660
所谓的键值对呢

47:14.660 --> 47:15.660
我可以拿到

47:15.660 --> 47:16.660
拿这个

47:16.660 --> 47:17.660
它一个叫NTrace

47:18.660 --> 47:20.660
它反复的是一个迭代器

47:20.660 --> 47:21.660
迭代器的话

47:21.660 --> 47:23.660
就可以用那个Foom O5进行循环

47:23.660 --> 47:24.660
知道意思吧

47:24.660 --> 47:25.660
Foom O5进行环

47:25.660 --> 47:26.660
当然NTrace的意思

47:26.660 --> 47:27.660
其实就是

47:28.660 --> 47:29.660
你们知道

47:29.660 --> 47:31.660
NTrace的是什么意思的

47:31.660 --> 47:40.100
迭代器主要是你们现在

47:40.100 --> 47:41.100
没有学习

47:41.100 --> 47:42.100
在ES6详细版里边

47:43.100 --> 47:44.100
NTrace就是这个东西

47:45.100 --> 47:46.100
就是这个东西

47:48.100 --> 47:50.100
要保存到一个数组里边吧

48:04.590 --> 48:05.590
就是这个东西

48:05.590 --> 48:07.590
它本身是一个数组

48:07.590 --> 48:09.590
数组的第一项又是一个数组

48:11.590 --> 48:16.310
刚才这个对象

48:16.310 --> 48:18.310
用了NTrace之后

48:21.010 --> 48:22.010
它就变成了这个东西了

48:28.800 --> 48:29.800
这是第一个属性

48:30.800 --> 48:31.800
这是第二个属性

48:31.800 --> 48:33.800
那么我们现在Objects有一个方法

48:33.800 --> 48:35.800
可以把这个东西还原成对象

48:36.800 --> 48:37.800
Objects是有一个方法的

48:38.800 --> 48:39.800
可以把这个东西还原成对象

48:39.800 --> 48:41.800
然后我就有这么一个数组

48:42.800 --> 48:46.650
Objects

48:46.650 --> 48:48.650
叫FromIntress

48:48.650 --> 48:49.650
把数组反进去

48:49.650 --> 48:51.650
它就会给你还原成一个对象

48:51.650 --> 48:52.650
我知道说的就是这个

48:52.650 --> 48:54.650
现在有个Foom Data

48:55.650 --> 48:57.650
它里边可以通过一个Intress方法

48:59.650 --> 49:01.650
因为它里边我看到好像是没有什么

49:01.650 --> 49:03.650
直接反成对象的方法

49:04.650 --> 49:06.650
没有直接还原成对象的方法

49:08.650 --> 49:09.650
没有

49:10.650 --> 49:11.650
那么我们可以通过

49:11.650 --> 49:12.650
拿到这个Intress

49:15.650 --> 49:17.650
然后得到的是不是就是这么一个玩意儿

49:17.650 --> 49:18.650
然后把这个玩意儿

49:18.650 --> 49:19.650
作为参数传进去

49:20.650 --> 49:22.650
外面去调一个Objects

49:22.650 --> 49:23.650
FromIntress

49:24.650 --> 49:25.650
通过这个代码

49:25.650 --> 49:27.650
就可以还原成一个对象

49:28.650 --> 49:30.650
不就是要拿这个对象吗

49:30.650 --> 49:31.650
就是说了半天

49:31.650 --> 49:32.650
我要的就是这个对象

49:32.650 --> 49:34.650
如果说你这个玩意儿不太适应的话

49:34.650 --> 49:36.650
那你就用老办法

49:36.650 --> 49:37.650
没关系的

49:37.650 --> 49:39.650
反正目标就是要得到这么一个对象

49:39.650 --> 49:41.650
你管理用什么方法都无所谓的

49:42.650 --> 49:44.650
目标就是要得到这么一个对象

49:44.650 --> 49:48.660
你用手动的方式

49:48.660 --> 49:50.660
还是用这种让它自动给你还原的方式

49:50.660 --> 49:51.660
都行

49:51.660 --> 49:52.660
反正你要得到这么一个对象

49:52.660 --> 49:55.660
你这个API还需要这个对象

49:56.660 --> 49:57.660
好来吧

49:57.660 --> 49:58.660
试一下

49:58.660 --> 50:05.840
你看

50:05.840 --> 50:06.840
被得到了吗

50:06.840 --> 50:07.840
好那接下来

50:07.840 --> 50:09.840
反正你不管用什么方式手段吧

50:09.840 --> 50:10.840
你得到这个对象之后

50:10.840 --> 50:11.840
传进去

50:12.840 --> 50:13.840
看服务器的响应结果

50:14.840 --> 50:16.840
如果说服务器响应结果没有错误

50:16.840 --> 50:17.840
扣到等于0

50:17.840 --> 50:18.840
对吧

50:18.840 --> 50:19.840
服务器的响应结果没有错误

50:19.840 --> 50:20.840
没有错误怎么办

50:20.840 --> 50:21.840
就表示注册成功

50:21.840 --> 50:23.840
你可以用二拉扯一下

50:23.840 --> 50:24.840
注册成功

50:24.840 --> 50:26.840
我这里就没有去做其他提示了

50:26.840 --> 50:28.840
反正你要做的好看一点

50:28.840 --> 50:30.840
你可以用一个弹窗DIV

50:30.840 --> 50:31.840
来做个提示

50:31.840 --> 50:32.840
我这里就减面一点

50:32.840 --> 50:33.840
然后呢

50:33.840 --> 50:34.840
挑转到登录

50:34.840 --> 50:35.840
对吧

50:35.840 --> 50:36.840
都可以行

50:36.840 --> 50:37.840
这个玩意儿还记得吗

50:37.840 --> 50:38.840
波姆里边的东西

50:38.840 --> 50:40.840
挑转到登录页

50:42.840 --> 50:44.840
即将

50:44.840 --> 50:46.840
点击确定

50:46.840 --> 50:49.840
挑转到登录页

50:49.840 --> 50:51.840
说清楚一点

50:51.840 --> 50:53.840
好那注册就写完了

50:53.840 --> 50:55.840
再写看一下吧

50:55.840 --> 50:57.840
注册一个哈哈

50:58.840 --> 51:00.840
一二你称是哈哈

51:00.840 --> 51:02.840
一二三一二三

51:02.840 --> 51:04.840
一二三一二三注册

51:04.840 --> 51:05.840
诶注册成功

51:05.840 --> 51:08.840
点击确定挑转到登录页

51:08.840 --> 51:09.840
都到登录页

51:09.840 --> 51:11.840
对吧就写完了

51:12.840 --> 51:13.840
其他的没啥

51:13.840 --> 51:14.840
注册就写完了

51:14.840 --> 51:15.840
登录呢

51:15.840 --> 51:16.840
跑登录去写

51:16.840 --> 51:18.840
写下登录

51:18.840 --> 51:20.840
登录的街市隐隐用起来了

51:20.840 --> 51:21.840
到登录的街市

51:21.840 --> 51:22.840
把注册街市一沾过去

51:22.840 --> 51:23.840
你会发现的

51:23.840 --> 51:25.840
稍微改一改登录就完成了

51:25.840 --> 51:27.840
登录呢也是要填账号的对吧

51:27.840 --> 51:28.840
看一下登录啊

51:28.840 --> 51:34.100
登录页

51:34.100 --> 51:36.100
登录页的话

51:36.100 --> 51:39.100
它也是要填账号的

51:39.100 --> 51:40.100
看一下啊

51:40.100 --> 51:41.100
第一个是账号

51:41.100 --> 51:43.100
貼登录页这个不变

51:43.100 --> 51:45.100
请填一下账号

51:45.100 --> 51:46.100
但是登录的时候呢

51:46.100 --> 51:48.100
它不用判断账号也没有存在

51:48.100 --> 51:49.100
也没有存在账号

51:49.100 --> 51:50.100
这个是不用判断的

51:50.100 --> 51:52.100
你看你上网的时候

51:52.100 --> 51:53.100
哪一个登录页

51:53.100 --> 51:54.100
它是会判断你的账号

51:54.100 --> 51:55.100
也没有存在的

51:55.100 --> 51:56.100
没有啊

51:56.100 --> 51:58.100
你只要填上就行

51:58.100 --> 51:59.100
那好

51:59.100 --> 52:00.100
第二个是什么

52:00.100 --> 52:01.100
第二个他就没有你

52:01.100 --> 52:02.100
称那些东西了

52:02.100 --> 52:03.100
第二个就是密码

52:04.100 --> 52:05.100
贴登录页

52:07.100 --> 52:09.540
密码

52:09.540 --> 52:11.540
就是下面这个密码

52:11.540 --> 52:13.540
然后确诊密码没有

52:13.540 --> 52:15.540
表单的表单的透明元素呢

52:15.540 --> 52:16.540
还是一样的

52:18.540 --> 52:19.540
然后呢

52:20.540 --> 52:21.540
提交事件

52:21.540 --> 52:23.540
逐字摸的行为都是都一样

52:23.540 --> 52:24.540
验证的时候呢

52:24.540 --> 52:25.540
只需要验证账号的

52:25.540 --> 52:26.540
by the data

52:26.540 --> 52:27.540
和密码的by the data

52:27.540 --> 52:28.540
就行了

52:28.540 --> 52:29.540
实际上不用验证了

52:29.540 --> 52:31.540
如果说验证没有通过

52:31.540 --> 52:32.540
那就结束

52:32.540 --> 52:33.540
不管验证通过了

52:33.540 --> 52:34.540
那是不是创建表单的

52:34.540 --> 52:36.540
得到表单的数据

52:36.540 --> 52:37.540
然后呢

52:37.540 --> 52:39.540
这里不是就是login的

52:40.540 --> 52:41.540
API里面

52:42.540 --> 52:43.540
就是login

52:43.540 --> 52:45.540
把账号密码传进去

52:46.540 --> 52:48.540
那么如果说扣的为0

52:48.540 --> 52:49.540
表示

52:49.540 --> 52:50.540
登录成功

52:51.540 --> 52:52.540
登录成功

52:52.540 --> 52:54.540
点击确定

52:54.540 --> 52:56.540
挑转到首页

52:57.540 --> 52:58.540
首页是哪呢

52:58.540 --> 52:59.540
就应得是

53:01.540 --> 53:02.540
登录成功了

53:02.540 --> 53:04.540
l是呢就登录失败

53:04.540 --> 53:05.540
登录失败的话

53:05.540 --> 53:06.540
要显示错误消息

53:06.540 --> 53:08.540
那我就耳耳次吧

53:08.540 --> 53:10.540
登录失败

53:10.540 --> 53:11.540
然后呢

53:11.540 --> 53:12.540
显示

53:12.540 --> 53:13.540
就是

53:14.540 --> 53:15.540
请检查

53:15.540 --> 53:17.540
账号和密码

53:20.420 --> 53:21.420
这就完事了

53:21.420 --> 53:22.420
甚至呢你可以把密码清空

53:22.420 --> 53:23.420
也可以

53:23.420 --> 53:25.420
比方说怎么清空密码

53:25.420 --> 53:26.420
不是login password

53:26.420 --> 53:27.420
by the data

53:27.420 --> 53:28.420
by the data

53:28.420 --> 53:29.420
by the data

53:29.420 --> 53:30.420
就完事了

53:30.420 --> 53:31.420
这多简单

53:31.420 --> 53:32.420
当然这个消息

53:32.420 --> 53:34.420
你也可以把显示到那个

53:35.420 --> 53:37.420
账号这个地方也可以

53:37.420 --> 53:38.420
这都无所谓的

53:38.420 --> 53:39.420
登录

53:39.420 --> 53:40.420
账号和密码

53:41.420 --> 53:42.420
不匹配

53:43.420 --> 53:45.420
货密码错误

53:45.420 --> 53:47.420
货密码错误

53:47.420 --> 53:49.420
把这个错误消息显示到

53:49.420 --> 53:51.420
登录那个框框

53:51.420 --> 53:52.420
login

53:52.420 --> 53:53.420
id

53:53.420 --> 53:54.420
by the data

53:54.420 --> 53:56.420
那个p元素

53:56.420 --> 53:57.420
in there

53:57.420 --> 53:58.420
显示到这里也可以

53:58.420 --> 53:59.420
都无所谓的

53:59.420 --> 54:00.420
看你显示到那

54:00.420 --> 54:01.420
无所谓

54:02.420 --> 54:03.420
好

54:03.420 --> 54:04.420
来试一下吧

54:04.420 --> 54:05.420
来试一下

54:05.420 --> 54:06.420
登录这一块

54:06.420 --> 54:08.420
随便写一个

54:08.420 --> 54:09.420
登录

54:09.420 --> 54:10.420
账号密码错误

54:10.420 --> 54:11.420
都写完了

54:11.420 --> 54:13.420
就代码很简单的

54:13.420 --> 54:14.420
然后哈哈

54:14.420 --> 54:15.420
123

54:15.420 --> 54:16.420
123

54:16.420 --> 54:17.420
点登录

54:17.420 --> 54:18.420
诶登录成功

54:18.420 --> 54:19.420
点击确定跳到手页

54:19.420 --> 54:20.420
现在就到手页了

54:20.420 --> 54:22.420
手页现在还没有做

54:22.420 --> 54:23.420
好那么到现在

54:23.420 --> 54:24.420
就完成了

54:24.420 --> 54:26.420
登录和注册了

54:26.420 --> 54:27.420
我不知道

54:27.420 --> 54:28.420
我现在没有去做

54:28.420 --> 54:29.420
更多的测试了

54:29.420 --> 54:30.420
不知道有没有什么bug

54:30.420 --> 54:31.420
有bug的话

54:31.420 --> 54:32.420
你们自行搞定吧

54:32.420 --> 54:33.420
或者是

54:33.420 --> 54:35.420
联系我也显示

54:35.420 --> 54:36.420
大的bug

54:36.420 --> 54:37.420
小的bug你们自行搞定

54:37.420 --> 54:38.420
好吧

54:38.420 --> 54:39.420
这就是那个

54:39.420 --> 54:40.420
登录和注册

54:40.420 --> 54:41.420
写的比较复杂

54:41.420 --> 54:43.420
因为主要是复杂的原因

54:43.420 --> 54:44.420
主要是我提的一个

54:44.420 --> 54:46.420
通用代码过去了

54:46.420 --> 54:48.420
不然的话

54:48.420 --> 54:49.420
我单独都要去为

54:49.420 --> 54:50.420
每个登录和注册

54:50.420 --> 54:51.420
去写这些代码

54:51.420 --> 54:52.420
验证代码的话

54:52.420 --> 54:53.420
就写得很繁熟

54:53.420 --> 54:54.420
而现在看的代码

54:54.420 --> 54:55.420
也不是很好看

54:55.420 --> 54:56.420
好好体会一下

54:56.420 --> 54:57.420
我决定的

54:57.420 --> 54:58.420
花点时间

54:58.420 --> 54:59.420
还是能够理解的

55:00.420 --> 55:01.420
好写完没啥了

55:01.420 --> 55:02.420
登录注册就写完了

