WEBVTT

00:00.500 --> 00:05.380
OK,在前面的课程中,我们已经使用PulseMap

00:05.380 --> 00:08.380
去完成了各个接口的请求

00:08.380 --> 00:11.180
同学们始终要有这么一个概念

00:11.180 --> 00:16.420
就是咱们的服务器能够提供各种各样的服务

00:16.420 --> 00:20.980
你根据你的UAL地址,根据你的不同的请求方法

00:20.980 --> 00:23.420
会获得不同的服务

00:23.420 --> 00:26.420
不是说一个服务器只能提供一个服务

00:26.500 --> 00:30.180
比方说像邓哥,比方说邓哥现在姓佛了

00:30.180 --> 00:32.940
想烧香拜佛,那我们到庙里边去吧

00:32.940 --> 00:36.860
庙里边一出来一个老和尚,说师主你好

00:36.860 --> 00:38.660
很高兴为你服务

00:38.660 --> 00:42.260
那么请问你是要求签呢?还是要做大宝剑啊?

00:42.260 --> 00:43.980
邓哥说我要做大宝剑

00:43.980 --> 00:48.860
那么就是我们可以通过服务器去选择不同的服务

00:48.860 --> 00:52.060
当然呢,你得知道不同的UAL地址

00:52.060 --> 00:55.380
总的来说的话,服务器提供的服务

00:55.460 --> 00:57.940
它能够分为两种

00:57.940 --> 01:02.060
一种叫做静态支援服务

01:02.060 --> 01:04.020
那么这种服务呢,它就比较简单

01:04.020 --> 01:06.420
就是服务器上存了一些文件

01:06.420 --> 01:10.500
比方说存了一些ATM文件,存了一些GS, CSS文件

01:10.500 --> 01:12.980
那么这些,或者是一些图片文件

01:12.980 --> 01:16.500
这些都是属于静态文件

01:16.500 --> 01:19.140
那么你通过不同的UAL地址呢

01:19.140 --> 01:22.260
就能获得这些文件内容

01:22.260 --> 01:24.780
那么这些东西呢,提供的服务

01:24.780 --> 01:26.900
就叫做静态支援服务

01:26.900 --> 01:31.820
那么比方说,我们通过在Postman里面去试验一下

01:31.820 --> 01:36.500
通过一个ATBS,然后找到淘宝

01:36.500 --> 01:38.540
然后去请求一下

01:38.540 --> 01:41.340
通过这个地址呢,我们拿到了的是一个什么呀?

01:41.340 --> 01:43.780
拿到的是一个ATM文档,对吧?

01:43.780 --> 01:46.420
所以说静态,这就是一个静态支援服务

01:46.420 --> 01:48.700
拿到的是一个文档

01:48.700 --> 01:53.260
就是ATM文档,或者我们在淘宝里边

01:53.260 --> 02:00.360
可以看到啊,它文档里边有引用那个CSS

02:00.360 --> 02:03.640
对不对?Link

02:03.640 --> 02:06.160
你看,这里是不是有个CSS

02:06.160 --> 02:08.440
这里是省略的协议名

02:08.440 --> 02:09.640
省略的协议名的意思呢

02:09.640 --> 02:13.960
就是表示这个协议呢,跟那个页面的协议一致

02:13.960 --> 02:17.000
这个我们后边单独来说

02:17.000 --> 02:18.920
好,比方说,我们去请求这个地址

02:18.920 --> 02:21.600
就会达到一个CSS代码,对吧?

02:21.600 --> 02:26.160
说静态支援服务呢,它也会给我们提供CSS代码

02:26.280 --> 02:28.880
那么除此之外呢,当然我们也可以想到啊

02:28.880 --> 02:31.600
我们还可以拿到通过不同的URL地址

02:31.600 --> 02:34.400
可以去拿到一个JS

02:34.400 --> 02:36.400
就服务其它的功能很多

02:36.400 --> 02:38.000
它能够提供各种各样的服务

02:38.000 --> 02:39.360
比方说像这个地址

02:39.360 --> 02:41.200
我们再去请求这个地址

02:41.200 --> 02:43.400
那么就可以拿到一个JS

02:43.400 --> 02:45.960
这个JS是被压缩过后的

02:45.960 --> 02:49.040
看呗,那么这里还有JS代码

02:49.040 --> 02:50.560
当然还有图片

02:50.560 --> 02:51.800
比方说我们再去找一下

02:51.800 --> 02:56.260
在淘宝里边有没有图片啊

02:56.300 --> 02:57.620
img.sr

02:57.620 --> 02:59.620
诶,这里有个图片啊

03:00.900 --> 03:02.900
好,复制一下

03:03.300 --> 03:05.300
sdbs

03:05.620 --> 03:07.140
看一下这个图片

03:07.140 --> 03:10.140
这个图片是空白的啊,是个空白图片

03:10.140 --> 03:13.620
呃,然后去访一下别的网站吧

03:13.620 --> 03:16.660
啊,读1.qq.co

03:17.580 --> 03:22.340
读1qq.edu.qq.co

03:22.860 --> 03:25.300
是这个吧,就咱们那个

03:25.340 --> 03:27.340
读1.qq.co

03:28.540 --> 03:29.740
去防范一下这个地址

03:29.740 --> 03:31.740
这里边应该有图片

03:34.340 --> 03:35.940
好,方向请求

03:35.940 --> 03:41.520
这里边我们找一找啊,有没有什么图片

03:41.520 --> 03:43.520
啊,这里有一个图片

03:43.960 --> 03:45.960
看在,还有没有啊

03:46.400 --> 03:47.720
好,就这个吧

03:47.720 --> 03:49.720
我们把这个地址复制一下

03:52.720 --> 03:54.080
方向请求

03:54.080 --> 03:55.960
诶,你看,是不是拿到一个图片了

03:55.960 --> 03:57.120
对吧,还有图片

03:57.120 --> 03:59.120
当然我就不一一列举了

03:59.120 --> 04:00.560
静态资源服务呢

04:00.560 --> 04:02.120
它还有很多,包括了什么

04:02.120 --> 04:06.120
字体文件,字体文件

04:06.120 --> 04:08.120
等等等等,还有视频音频

04:08.120 --> 04:10.120
对吧,视频音频

04:10.120 --> 04:12.600
那么这些都是属于静态资源服务

04:12.600 --> 04:16.120
就是通过一个地址去拿到各种各样的文件内容

04:16.880 --> 04:19.120
那么除了静态资源服务之外呢

04:19.120 --> 04:21.600
还有一种服务叫做数据服务

04:21.600 --> 04:23.600
那么这个数据服务就是我们上一节

04:23.600 --> 04:26.120
可以看到这些东西,就是纯数据的交流

04:26.360 --> 04:28.360
这些呢,不管,但是不管是哪一种

04:28.360 --> 04:30.880
无论是静态资源服务还是数据服务

04:30.880 --> 04:33.360
都是服务器程序

04:33.360 --> 04:36.360
写出来之后能够给你提供的服务

04:36.360 --> 04:38.880
当然它具体提供哪些静态资源服务

04:38.880 --> 04:41.360
又提供哪一些数据服务

04:41.360 --> 04:45.560
这叫看服务器程序是怎么写的

04:45.560 --> 04:47.560
一般来说,接口文档里边呢

04:47.560 --> 04:51.120
它会只会给你写接口的数据服务

04:51.120 --> 04:53.120
它不可以给你写这些东西啊

04:53.920 --> 04:56.120
之后呢,你们学了更多的数据,慢慢知道了

04:56.120 --> 04:58.120
为什么不给你提供这些东西?

04:58.120 --> 04:59.120
确实没有必要

04:59.120 --> 05:03.120
因为你开发网上就知道这个东西地址是什么了

05:04.120 --> 05:08.120
但是我们上节课呢,只是用Postman

05:09.120 --> 05:12.120
作为一个客户端,去请求我们的服务器

05:12.120 --> 05:14.120
他们之间在进行交互请求

05:14.120 --> 05:16.120
但是我们除了Postman之外呢

05:16.120 --> 05:18.120
还有一个客户端就是,比较常见的客户端

05:18.120 --> 05:19.120
就是浏览器

05:19.120 --> 05:22.120
浏览器它也能请求服务器

05:22.120 --> 05:26.120
也能拿到服务器的响应结果

05:27.120 --> 05:29.120
那么我们之后节课就要学习

05:30.120 --> 05:32.120
你在浏览器的环境里边

05:32.120 --> 05:36.120
它去请求服务器和它去拿到服务器的响应结果

05:36.120 --> 05:39.120
会有什么样的特点

05:39.120 --> 05:42.120
跟Postman的本质上是一样的

05:42.120 --> 05:43.120
都是请求响应

05:43.120 --> 05:48.120
但是能浏览器作为一个给广大用户使用的

05:48.120 --> 05:50.120
像Postman是不是给我们开发人员使用的

05:50.120 --> 05:53.120
像这个浏览器是给广大用户使用的

05:53.120 --> 05:54.120
它肯定不会那么复杂

05:54.120 --> 05:57.120
因此它会自动的去完成一些事

05:57.120 --> 06:00.120
我们这一节课就来学习浏览器的客户端

06:00.120 --> 06:02.120
它是怎么来跟服务器之间进行交互的

06:02.120 --> 06:04.120
那么有了这一块知识之后

06:04.120 --> 06:06.120
因为我们毕竟后边要学习一些代码

06:06.120 --> 06:08.120
代码去请求和响应

06:08.120 --> 06:12.120
那么由于代码是在浏览器环境里边运行的

06:12.120 --> 06:14.120
所以说我们必须要了解浏览器

06:14.120 --> 06:15.120
它是怎么工作的

06:15.120 --> 06:17.120
组合来完成请求响应的

06:17.120 --> 06:19.120
这就是咱们这一节课的内容

06:21.500 --> 06:22.500
看一下

06:22.500 --> 06:25.500
就是浏览器的页面处理流程

06:25.500 --> 06:27.500
这玩意其实就是一道面试题

06:27.500 --> 06:29.500
这个面试题还问你

06:29.500 --> 06:33.500
在浏览器的地址栏中输入一个UIL地址

06:33.500 --> 06:35.500
必按下回车键后

06:35.500 --> 06:37.500
到底发生了什么事

06:37.500 --> 06:41.500
其实这个过程很复杂

06:41.500 --> 06:42.500
说实话

06:42.500 --> 06:45.500
而且随着你不断地学习的深入

06:45.500 --> 06:48.500
你会发现这个流程会越来越多

06:48.500 --> 06:50.500
因此这道面试题

06:50.500 --> 06:53.500
其实没有一个标准答案的

06:53.500 --> 06:55.500
因为它可以说得简单

06:55.500 --> 06:57.500
也可以说得复杂

06:57.500 --> 06:59.500
那么我们这里说到什么程度

06:59.500 --> 07:01.500
我们这里只是讲解到

07:01.500 --> 07:04.500
我们这个阶段需要了解的程度

07:04.500 --> 07:05.500
到了第三个阶段你会发现

07:05.500 --> 07:07.500
我们还会说一下这个面试题

07:07.500 --> 07:09.500
那么那个时候它流程就更多了

07:09.500 --> 07:12.500
我这里提供了一个UIL地址

07:12.500 --> 07:17.060
让你去请求这个地址回车

07:17.060 --> 07:19.060
你会看到这么一个页面

07:19.060 --> 07:21.060
非常非常简单的页面

07:21.060 --> 07:22.060
我们这个页面上有文字

07:22.060 --> 07:23.060
有图片

07:23.060 --> 07:25.060
有这个超链接

07:25.060 --> 07:28.060
我们以这个页面为例

07:28.060 --> 07:30.060
以小见大

07:30.060 --> 07:32.060
通过讲解这个页面的处理流程

07:32.060 --> 07:35.060
我们就可以了解其他所有的网站

07:35.060 --> 07:36.060
所有的页面

07:36.060 --> 07:37.060
我们通过留言继续访问

07:37.060 --> 07:40.060
它到底经过了哪些事

07:40.060 --> 07:42.060
这个页面不要看

07:42.060 --> 07:43.060
它瞬间就完成了

07:43.060 --> 07:45.060
有一回车瞬间就完成了

07:45.060 --> 07:47.060
这个过程里面发生了

07:47.060 --> 07:49.060
特别特别多的事

07:49.060 --> 07:50.060
好 咱们来看一下

07:50.060 --> 07:52.060
它到底发生了什么事了

07:52.060 --> 07:54.060
像我们如果说用PoseMain

07:54.060 --> 07:55.060
去请求这个地址的话

07:55.060 --> 07:57.060
我们会发现它特别简单

07:57.060 --> 07:58.060
PoseMain

07:58.060 --> 08:00.060
PoseMain它没有做什么事

08:00.060 --> 08:01.060
它就是请求响应

08:01.060 --> 08:02.060
拿到响应结果

08:02.060 --> 08:03.060
你给我啥 我就嫌

08:03.060 --> 08:04.060
你给我的是这个

08:04.060 --> 08:06.060
那我就把这个展示出来

08:06.060 --> 08:09.060
服务器告诉我得到是这个东西

08:09.060 --> 08:11.060
但是浏览器它不能这样干

08:11.060 --> 08:13.060
浏览器这样用户就封掉了

08:13.060 --> 08:15.060
它要做很多自动化的操作

08:15.060 --> 08:16.060
我们来看一下

08:16.060 --> 08:18.060
我拿些事 下面有一张图

08:18.060 --> 08:20.060
我们一步一步研究

08:20.060 --> 08:21.060
首先第一步

08:21.060 --> 08:24.060
浏览器它会补权UAL地址

08:24.060 --> 08:26.060
它怎么补权呢

08:26.060 --> 08:27.060
就在这儿

08:27.060 --> 08:29.060
本来我们明明写的是这个

08:29.060 --> 08:31.060
没有加写意名

08:31.060 --> 08:33.060
是不是它会给你自动加上写意名

08:33.060 --> 08:34.060
对吧 这回车

08:34.060 --> 08:37.060
它就会自动给你加上一个写意名

08:37.060 --> 08:38.060
好 这是第一步

08:38.060 --> 08:40.060
然后它会对地址中

08:40.060 --> 08:45.060
非Ask字符完成UAL地址编码

08:45.060 --> 08:46.060
这啥意思呢

08:46.060 --> 08:47.060
就是我们之前说的

08:47.060 --> 08:49.060
还不知道同学买记不记得

08:49.060 --> 08:51.060
在网络基本概念这一块UAL地址里边

08:51.060 --> 08:54.060
我说过有一个地方叫参数这里

08:54.060 --> 08:57.060
如果说这里出现了一些非Ask字符

08:57.060 --> 09:00.060
那么它会进行编码

09:00.060 --> 09:01.060
它会进行编码

09:01.060 --> 09:02.060
那么我们来试一下

09:02.060 --> 09:04.060
比方我们这里该加上一些参数

09:04.060 --> 09:07.060
比方说A等于随便写中文吧

09:07.060 --> 09:08.060
一回车

09:08.060 --> 09:09.060
虽然这个服务器

09:09.060 --> 09:11.060
还是给我们的是这个页面

09:11.060 --> 09:12.060
因为我这个服务器

09:12.060 --> 09:15.060
没有做其他的特殊处理

09:15.060 --> 09:16.060
我都认为是一样的

09:16.060 --> 09:17.060
那么得到的东西

09:17.060 --> 09:18.060
我们再复制一下

09:18.060 --> 09:22.060
粘贴到计时宝里边

09:22.060 --> 09:23.060
我们会发现中文部分

09:23.060 --> 09:24.060
是不是被编码过了

09:24.060 --> 09:26.060
对吧 这是我之前提过的

09:26.060 --> 09:27.060
对不对

09:27.060 --> 09:30.060
这是浏览器做的一些前置工作

09:30.060 --> 09:33.630
好 做了这两件事之后

09:33.630 --> 09:37.630
我们的UAL地址就变得完整和正确了

09:37.630 --> 09:39.630
这个时候浏览器跟Pose面一样

09:39.630 --> 09:41.630
它会发送这个请求

09:41.630 --> 09:43.630
通过这个UAL地址

09:43.630 --> 09:44.630
发送了什么请求呢

09:44.630 --> 09:46.630
发送的是一个Gate请求

09:46.630 --> 09:47.630
我这个图只是一个处理的图

09:47.630 --> 09:49.630
你要听我讲

09:49.630 --> 09:50.630
发送了什么请求

09:50.630 --> 09:51.630
发送的是一个Gate请求

09:51.630 --> 09:52.630
我们之前也说过

09:52.630 --> 09:53.630
在浏览器里面

09:53.630 --> 09:55.630
其实你只要不是

09:55.630 --> 09:57.630
绝大部分都是Gate请求

09:57.630 --> 09:58.630
不会是Pose

09:58.630 --> 10:00.630
当时我们还举过一个例子

10:00.630 --> 10:01.630
要发送一个Pose请求

10:01.630 --> 10:03.630
你必须要写个凤元数

10:03.630 --> 10:04.630
然后去提交

10:04.630 --> 10:06.630
还要设置它的Message为Pose

10:06.630 --> 10:07.630
反正这个时候

10:07.630 --> 10:08.630
肯定是个Gate请求

10:08.630 --> 10:09.630
到服务器了

10:09.630 --> 10:10.630
那么服务器

10:10.630 --> 10:12.630
接下来到哪个服务器呢

10:12.630 --> 10:14.630
那就要看你的UAL地址

10:14.630 --> 10:16.630
我们到了度一的服务器

10:16.630 --> 10:17.630
就这个服务器

10:17.630 --> 10:18.630
我们度一的服务器

10:18.630 --> 10:19.630
服务器那边

10:19.630 --> 10:20.630
那边就会有一个程序

10:20.630 --> 10:21.630
运行运行运行

10:21.630 --> 10:22.630
运行完了之后

10:22.630 --> 10:24.630
服务器收到你的请求了

10:24.630 --> 10:26.630
运行一端来码之后

10:26.630 --> 10:28.630
服务器它就会给你一个响应

10:28.630 --> 10:29.630
它跟你响应啥呢

10:29.630 --> 10:31.630
那就看服务器程序怎么写的了

10:31.630 --> 10:34.630
我这里响应的就是一个ATM文档

10:34.630 --> 10:35.630
就是一个ATM文档

10:35.630 --> 10:36.630
所以说有的时候

10:36.630 --> 10:37.630
你可以点击这里

10:37.630 --> 10:38.630
点右键

10:38.630 --> 10:39.630
这里有个查看

10:39.630 --> 10:41.630
显示网页的元代嘛

10:41.630 --> 10:42.630
这个显示的是什么呢

10:42.630 --> 10:44.630
这个显示的就是跟Pose麦一样

10:44.630 --> 10:46.630
显示的就是这个东西

10:46.630 --> 10:48.630
Pose麦这里显示的这个东西

10:48.630 --> 10:50.630
就是服务器的响应结果

10:50.630 --> 10:52.630
服务器给你响应的是这个东西

10:52.630 --> 10:54.630
懂了意思吧

10:54.630 --> 10:56.630
那意思就是突然想问

10:56.630 --> 10:58.630
这个东西跟我爸讲的很细

10:58.630 --> 10:59.630
这一块

10:59.630 --> 11:01.630
就是希望了同学们

11:01.630 --> 11:02.630
听到这一块的时候

11:02.630 --> 11:04.630
能够解决大部分同学的疑问

11:04.630 --> 11:05.630
所以说这个东西

11:05.630 --> 11:07.630
跟我们那个右键

11:07.630 --> 11:09.630
在检查里边这个元素这些东西

11:09.630 --> 11:11.630
有什么样的区别呢

11:11.630 --> 11:12.630
有没有区别

11:12.630 --> 11:14.630
它是有区别的

11:14.630 --> 11:15.630
有什么区别呢

11:15.630 --> 11:17.630
比方说我在这里

11:17.630 --> 11:19.630
我这个页面里边

11:19.630 --> 11:21.630
运行一段解释代码之后

11:21.630 --> 11:23.630
那是不是元素的结构可能会变化

11:23.630 --> 11:26.630
因为解释代码可能会生成一些元素

11:26.630 --> 11:28.630
可能会删除一些元素

11:28.630 --> 11:30.630
这个在这个调试的时候

11:30.630 --> 11:31.630
在检查的时候

11:31.630 --> 11:33.630
这个地方显示的

11:33.630 --> 11:36.630
永远是当前这个时间点

11:37.630 --> 11:40.630
的ATM结构

11:40.630 --> 11:41.630
啥意思

11:41.630 --> 11:43.630
就是服务器你想应了过后

11:43.630 --> 11:44.630
是不是后续

11:44.630 --> 11:46.630
我们可能还会运行GS

11:46.630 --> 11:48.630
那么GS有可能会改动

11:48.630 --> 11:49.630
这里的ATM结构

11:49.630 --> 11:50.630
对吧

11:50.630 --> 11:51.630
或者是给某一个元素

11:51.630 --> 11:52.630
加一个属性

11:52.630 --> 11:53.630
加一个那样式

11:53.630 --> 11:54.630
它会改动

11:54.630 --> 11:55.630
那么这个地方显示的

11:55.630 --> 11:57.630
永远是改动之后的

11:57.630 --> 11:59.630
就是当前这个时间点

11:59.630 --> 12:00.630
页面的ATM结构

12:00.630 --> 12:01.630
比方我简单举个例子

12:01.630 --> 12:03.630
我在这里呢就去

12:03.630 --> 12:05.630
创建一个DIV吧

12:06.630 --> 12:08.630
或者是我们就得到

12:08.630 --> 12:10.630
拿到一个ATM元素

12:10.630 --> 12:11.630
这个其实还有一个简单的方法

12:11.630 --> 12:12.630
给他们说一下

12:12.630 --> 12:13.630
在调试控制台里边

12:13.630 --> 12:15.630
你可以选中这个ATM

12:15.630 --> 12:17.630
你看这里是不是一个DOL0

12:17.630 --> 12:18.630
看到没

12:18.630 --> 12:19.630
这个DOL0

12:19.630 --> 12:21.630
其实是为了方便你调试的

12:21.630 --> 12:23.630
你只要选中它

12:23.630 --> 12:24.630
这里有出现一个DOL0

12:24.630 --> 12:25.630
那么你在这里

12:25.630 --> 12:26.630
就可以用DOL0

12:26.630 --> 12:28.630
来代表这个ATM元素了

12:28.630 --> 12:29.630
就动力对象了

12:29.630 --> 12:31.630
那么我们可以给它加上一个

12:31.630 --> 12:33.630
Class List

12:33.630 --> 12:35.630
给它加上一个内样式ABC

12:35.630 --> 12:36.630
随便加一个内样式

12:36.630 --> 12:38.630
加内样式播合你看

12:38.630 --> 12:40.630
这个ATM现在当前的

12:40.630 --> 12:42.630
内样式是ABC

12:42.630 --> 12:43.630
但我们这边

12:43.630 --> 12:44.630
有ABC吗

12:44.630 --> 12:45.630
肯定是没有的

12:45.630 --> 12:46.630
我们再来一次点击右键

12:46.630 --> 12:47.630
查看元代吧

12:47.630 --> 12:49.630
得到的永远是服务器的

12:49.630 --> 12:50.630
响应结果

12:50.630 --> 12:51.630
那么响应了之后

12:51.630 --> 12:52.630
是不是还在运行界

12:52.630 --> 12:54.630
也是还在运行控制台里边调试

12:54.630 --> 12:56.630
这边永远是实时的

12:56.630 --> 12:57.630
这边只是得到

12:57.630 --> 12:58.630
浏览器的服务器的

12:58.630 --> 12:59.630
响应结果而已

12:59.630 --> 13:00.630
那就是他们的区别

13:00.630 --> 13:03.630
我们说得像气质一点

13:03.630 --> 13:05.630
那么响应了一个

13:05.630 --> 13:07.630
你一个ATM文档

13:07.630 --> 13:09.630
浏览器来如何来处理

13:09.630 --> 13:10.630
这个响应内容呢

13:10.630 --> 13:12.630
你看Postman他就没有处理

13:12.630 --> 13:13.630
你响应给我

13:13.630 --> 13:16.630
我就表示你响应的

13:16.630 --> 13:17.630
就这个东西

13:17.630 --> 13:18.630
一个制服串而已

13:18.630 --> 13:20.630
但是浏览器不能这么干

13:20.630 --> 13:21.630
服务器响应了

13:21.630 --> 13:22.630
给浏览器之后

13:22.630 --> 13:23.630
浏览器它会进行处理的

13:23.630 --> 13:24.630
它怎么处理的

13:24.630 --> 13:25.630
我们来看一下

13:25.630 --> 13:26.630
浏览器的网络

13:26.630 --> 13:28.630
这个network点击它

13:28.630 --> 13:30.630
我们再来刷新一次

13:30.630 --> 13:31.630
这里选择

13:31.630 --> 13:34.630
我们查看所有的浏览器和响应

13:34.630 --> 13:36.630
这里表示进用缓存

13:36.630 --> 13:42.630
这里表示持续的

13:42.630 --> 13:43.630
这个叫什么

13:43.630 --> 13:46.630
保持住它的日字

13:46.630 --> 13:47.630
这啥意思呢

13:47.630 --> 13:49.630
就是我们再重新刷新浏览器之后

13:49.630 --> 13:51.630
之前的日字不会消失

13:51.630 --> 13:52.630
之前的浏览器和响应

13:52.630 --> 13:53.630
结果不会消失

13:53.630 --> 13:54.630
如果说你需要的话

13:54.630 --> 13:55.630
就把勾上

13:55.630 --> 13:56.630
比方现在不需要的话

13:56.630 --> 13:57.630
把关掉就行了

13:57.630 --> 14:00.630
我们这里刷新一次

14:00.630 --> 14:02.630
这里发生了五次响应

14:02.630 --> 14:04.630
为什么会有五次响应呢

14:04.630 --> 14:06.630
这个很奇怪

14:06.630 --> 14:07.630
没关系

14:07.630 --> 14:08.630
我们慢慢来看吧

14:08.630 --> 14:10.630
第一次我们看一下

14:10.630 --> 14:12.630
这就是对页面的琴球

14:12.630 --> 14:13.630
就是这个地址

14:13.630 --> 14:16.630
通过这个UIL地址发出了琴球

14:16.630 --> 14:18.630
浏览器跟我们响应了什么呢

14:18.630 --> 14:19.630
你看响应的是不是这个东西

14:19.630 --> 14:20.630
看这里Response

14:20.630 --> 14:22.630
浏览器说响应体

14:22.630 --> 14:24.630
响应了这么一个东西

14:24.630 --> 14:25.630
然后再看

14:25.630 --> 14:26.630
头里边的数据

14:26.630 --> 14:28.630
这样子

14:28.630 --> 14:30.630
再看头里边

14:30.630 --> 14:32.630
头里边你看响应里边

14:32.630 --> 14:33.630
头里边

14:33.630 --> 14:34.630
响应头里边你看

14:34.630 --> 14:35.630
他给我们一个什么

14:35.630 --> 14:36.630
content type

14:36.630 --> 14:38.630
叫text atmail

14:38.630 --> 14:40.630
是不是一个响应头

14:40.630 --> 14:42.630
浏览器收到这个响应头

14:42.630 --> 14:43.630
他就知道了

14:43.630 --> 14:46.630
原来你给我响应的是一个页面

14:46.630 --> 14:47.630
好了

14:47.630 --> 14:48.630
那浏览器的能力很强大的

14:48.630 --> 14:51.630
它可以渲染图片

14:51.630 --> 14:52.630
也可以渲染页面

14:52.630 --> 14:53.630
也可以执行界

14:53.630 --> 14:56.630
也可以读取解析

14:56.630 --> 14:57.630
CSS

14:57.630 --> 15:00.630
他发现浏览器给他响应的是一个页面

15:00.630 --> 15:03.630
于是他就把响应结果

15:03.630 --> 15:06.630
当做页面来看待

15:06.630 --> 15:08.630
他又启动页面解析器

15:08.630 --> 15:11.630
来解析页面里面的动物元素

15:11.630 --> 15:12.630
好怎么来解析呢

15:12.630 --> 15:13.630
接下来看

15:13.630 --> 15:16.630
浏览器收到这个响应之后

15:16.630 --> 15:18.630
他从content type

15:18.630 --> 15:19.630
这个响应头里边

15:19.630 --> 15:21.630
发现他的结果是一个页面

15:21.630 --> 15:22.630
他会做什么呢

15:22.630 --> 15:25.630
他会丢弃旧页面

15:25.630 --> 15:26.630
怎么叫丢弃旧页面

15:26.630 --> 15:27.630
就是如果说你这个浏览器

15:27.630 --> 15:28.630
一开始来访问别的页面

15:28.630 --> 15:31.630
不要访问百度

15:31.630 --> 15:34.630
这个时候我再去输入这个地址

15:34.630 --> 15:36.630
他就会发送请求到浏览器

15:36.630 --> 15:38.630
浏览器那边会给他响应

15:38.630 --> 15:39.630
拿到个响应结果之后

15:39.630 --> 15:41.630
这个百度这个页面就不要了

15:41.630 --> 15:42.630
懂的意思吧

15:42.630 --> 15:43.630
把丢弃掉了

15:43.630 --> 15:46.630
丢弃掉旧页面就是这个意思

15:46.630 --> 15:47.630
然后他开始解析

15:47.630 --> 15:49.630
特别有文档

15:49.630 --> 15:50.630
他怎么解析呢

15:50.630 --> 15:51.630
我们之前也说过

15:51.630 --> 15:52.630
解析流程对吧

15:52.630 --> 15:54.630
他就从上到下解析

15:54.630 --> 15:56.630
从上到下依次解析

15:56.630 --> 15:57.630
发现一个就是

15:57.630 --> 15:58.630
原来这是一个标准的

15:58.630 --> 16:00.630
ATM5的格式的文档

16:00.630 --> 16:01.630
然后这是一个ATML

16:01.630 --> 16:03.630
Language为English

16:03.630 --> 16:04.630
然后黑道元素

16:04.630 --> 16:06.630
Meta元素解析解析解析

16:06.630 --> 16:07.630
Title

16:07.630 --> 16:08.630
你看这里

16:08.630 --> 16:10.630
Title解析解析

16:10.630 --> 16:11.630
解析到一定时候

16:11.630 --> 16:13.630
是不是发现一个link元素

16:13.630 --> 16:15.630
这个是一个外链接

16:15.630 --> 16:16.630
它表示什么意思呢

16:16.630 --> 16:18.630
表示说我这个页面

16:18.630 --> 16:20.630
还有一个样式

16:21.630 --> 16:23.630
在这个路径

16:24.630 --> 16:25.630
同学们

16:25.630 --> 16:26.630
现在我要给你们说

16:26.630 --> 16:28.630
这个路径是啥意思的

16:28.630 --> 16:30.630
这个路径叫做相对路径

16:30.630 --> 16:31.630
我尽量讲的细一点

16:31.630 --> 16:32.630
下来给我同学们

16:32.630 --> 16:33.630
好好去梳理一下

16:33.630 --> 16:34.630
如果说这一刻的东西

16:34.630 --> 16:36.630
有的时候听到中途

16:36.630 --> 16:37.630
发现不行

16:37.630 --> 16:38.630
再停下去

16:38.630 --> 16:39.630
脑袋有点晕了

16:39.630 --> 16:40.630
你暂停

16:40.630 --> 16:41.630
把之前的东西

16:41.630 --> 16:42.630
好后来脑袋一边过一下

16:42.630 --> 16:43.630
想一下

16:43.630 --> 16:45.630
这个流程一定要搞清楚

16:45.630 --> 16:46.630
并不是说你们以后做开发

16:46.630 --> 16:48.630
一定要随时随地

16:48.630 --> 16:49.630
去想这个流程

16:49.630 --> 16:50.630
但是你学这一会的时候

16:50.630 --> 16:54.260
你就要想清楚

16:54.260 --> 16:55.260
好那么这个相对路径

16:55.260 --> 16:58.260
它到底是相对的是啥

16:58.260 --> 17:00.700
同学们

17:00.700 --> 17:01.700
相对路径

17:01.700 --> 17:05.700
相对的是UIL地址

17:05.700 --> 17:09.660
不是什么文件夹

17:09.660 --> 17:10.660
只不过很多的时候

17:10.660 --> 17:12.660
像近台资源这些东西

17:12.660 --> 17:13.660
它UIL地址

17:13.660 --> 17:14.660
跟那个文件夹

17:14.660 --> 17:16.660
是有对应关系的

17:16.660 --> 17:17.660
但是你一定要记住

17:17.660 --> 17:18.660
它准确的说法

17:18.660 --> 17:19.660
是相对UIL地址

17:19.660 --> 17:21.660
比方说

17:21.660 --> 17:22.660
我们目前的地址

17:22.660 --> 17:23.660
是什么呢

17:23.660 --> 17:25.660
我就把它拆除去掉

17:25.660 --> 17:27.660
拆除去掉

17:27.660 --> 17:29.660
先看一下第一个琴球

17:29.660 --> 17:31.660
琴球的是什么

17:31.660 --> 17:32.660
琴球的是这个页面

17:32.660 --> 17:33.660
对吧

17:33.660 --> 17:34.660
琴球是这个地址

17:34.660 --> 17:35.660
然后给我的想象是什么

17:35.660 --> 17:36.660
想象一下这个

17:36.660 --> 17:37.660
我把解析

17:37.660 --> 17:39.660
解析到这出现一个相对地址

17:39.660 --> 17:40.660
那么这个相对路径

17:40.660 --> 17:41.660
它相对是什么呢

17:41.660 --> 17:42.660
首先我们看一下

17:42.660 --> 17:43.660
页面的路径是什么

17:43.660 --> 17:46.660
页面的路径是

17:46.660 --> 17:47.660
什么呢

17:47.660 --> 17:48.660
是这个

17:48.660 --> 17:50.660
这是我们的页面路径

17:50.660 --> 17:53.030
对吧

17:53.030 --> 17:57.180
这是我们的页面路径

17:57.180 --> 17:58.180
在页面的解析过程中

17:58.180 --> 18:01.180
出现了一个相对路径

18:01.180 --> 18:02.180
第二个鞋杠

18:02.180 --> 18:03.180
表示当前目录

18:03.180 --> 18:04.180
CSS

18:04.180 --> 18:06.180
英德格斯的CSS

18:06.180 --> 18:09.180
相对路径是无法发出琴球的

18:09.180 --> 18:10.180
你看我们之前讲UIL地址

18:10.180 --> 18:12.180
哪有什么说是相对路径

18:12.180 --> 18:13.180
你必须是一个

18:13.180 --> 18:14.180
完整的东西

18:14.180 --> 18:15.180
我才能发出琴球

18:15.180 --> 18:16.180
那相对路径

18:16.180 --> 18:18.180
只是为了书写方面

18:18.180 --> 18:21.180
另外为了防止

18:21.180 --> 18:24.180
这些基地址的变化

18:24.180 --> 18:27.180
主要是一些可维护性的原因

18:27.180 --> 18:28.180
我们可以写相对路径

18:28.180 --> 18:30.180
也建议大家写相对路径

18:30.180 --> 18:31.180
但是相对路径最终

18:31.180 --> 18:34.180
还是要转成一个完整的UIL地址

18:34.180 --> 18:35.180
这个完整的UIL地址

18:35.180 --> 18:38.550
叫做绝对路径

18:38.550 --> 18:39.550
绝对路径不是什么

18:39.550 --> 18:40.550
从C盘开始

18:40.550 --> 18:41.550
D盘开始

18:41.550 --> 18:43.550
那个也叫绝对路径

18:43.550 --> 18:44.550
但是在这个环境里边

18:44.550 --> 18:45.550
我们说的绝对路径

18:45.550 --> 18:47.550
指的是完整的UIL地址

18:47.550 --> 18:49.550
叫绝对路径

18:49.550 --> 18:51.550
相对路径是相对于谁的

18:51.550 --> 18:54.550
相对于当前这个页面的

18:54.550 --> 18:55.550
懂得意思吗

18:55.550 --> 18:56.550
在这个场景下

18:56.550 --> 19:00.550
是相对于当前页面的UIL地址的

19:00.550 --> 19:02.550
当前页面的UIL地址

19:02.550 --> 19:04.550
这个地方表示当前目录

19:04.550 --> 19:06.550
当前目录叫什么意思

19:06.550 --> 19:08.550
只要搞清楚当前目录的什么意思

19:08.550 --> 19:11.550
就是这个页面在UIL地址那边的目录

19:11.550 --> 19:13.550
目录叫什么PASS

19:13.550 --> 19:17.630
这个底儿斜杠

19:17.630 --> 19:19.630
就是这个

19:19.630 --> 19:22.460
所以说他看到这个

19:22.460 --> 19:24.460
他就会用这个东西去替换一下

19:24.460 --> 19:27.460
于是形成了一个完整的UIL地址

19:28.460 --> 19:29.460
于是请求CSS

19:29.460 --> 19:30.460
他请求了什么地址

19:30.460 --> 19:32.460
请求的是这个地址

19:32.460 --> 19:33.460
懂得意思吗

19:33.460 --> 19:36.460
那如果说页面的路径是这个样子的

19:36.460 --> 19:40.020
那么这个底儿斜杠表示什么意思

19:40.020 --> 19:43.530
表示这个

19:43.530 --> 19:44.530
懂得意思吗

19:44.530 --> 19:45.530
那是这么个意思

19:45.530 --> 19:46.530
只不过很多时候

19:46.530 --> 19:48.530
他跟文件夹是对应的

19:48.530 --> 19:49.530
我们以为是跟文件夹

19:49.530 --> 19:50.530
他是指的是文件夹

19:50.530 --> 19:51.530
其实不是的

19:51.530 --> 19:53.530
他是指的是UIL地址

19:53.530 --> 19:54.530
那么再来

19:54.530 --> 19:55.530
比方说我这里写个底儿

19:55.530 --> 19:56.530
底儿斜杠

19:56.530 --> 19:57.530
这什么意思呢

19:57.530 --> 19:58.530
指的是

19:58.530 --> 20:01.530
当前路径的上一个目录

20:01.530 --> 20:03.530
上一个目录就这个目录

20:04.530 --> 20:05.530
懂得意思吗

20:05.530 --> 20:07.530
指的那个意思

20:07.530 --> 20:08.530
搞清楚

20:10.530 --> 20:11.530
再来

20:11.530 --> 20:12.530
我们相对路径

20:12.530 --> 20:13.530
可以省略点斜杠

20:13.530 --> 20:15.530
省略点斜杠是一个意思

20:15.530 --> 20:16.530
你省略点斜杠

20:16.530 --> 20:17.530
表示你写了一个点斜杠

20:17.530 --> 20:18.530
到底是一样的

20:18.530 --> 20:20.530
那什么叫绝对路径的

20:20.530 --> 20:21.530
绝对路径的就是

20:21.530 --> 20:24.530
完整的UIL地址

20:24.530 --> 20:25.530
就是绝对路径

20:25.530 --> 20:26.530
比方这个玩意就是绝对路径

20:27.530 --> 20:29.530
绝对路径是可以简写的

20:29.530 --> 20:33.530
它可以省略协议

20:33.530 --> 20:34.530
我之前怎么打算

20:34.530 --> 20:35.530
后边单独来的捷克来说

20:35.530 --> 20:36.530
算了就一起说了

20:36.530 --> 20:38.530
它可以省略协议

20:38.530 --> 20:40.530
比方说我这里写的路径

20:40.530 --> 20:46.270
是这样的写的

20:46.270 --> 20:47.270
它可以省略

20:47.270 --> 20:48.270
比方说我这里写的

20:48.270 --> 20:49.270
CSS路径

20:49.270 --> 20:51.270
比方说是这样的写的

20:51.270 --> 20:52.270
那么它转换成

20:52.270 --> 20:53.270
一个完整的UIL地址

20:53.270 --> 20:54.270
是什么呢

20:54.270 --> 20:56.270
它这个写的就是绝对路径

20:56.270 --> 20:58.270
相对路径只有三种写法

20:58.270 --> 20:59.270
一个是底儿斜杠开头

20:59.270 --> 21:00.270
一个是底儿斜杠开头

21:00.270 --> 21:01.270
一个是啥也不写

21:01.270 --> 21:02.270
那么这里呢

21:02.270 --> 21:03.270
我写两个斜杠开头

21:03.270 --> 21:04.270
这样的路径

21:04.270 --> 21:07.270
它叫做省略了协议的绝对路径

21:07.270 --> 21:09.270
那么协议用啥呢

21:09.270 --> 21:10.270
它不是说不要了

21:10.270 --> 21:11.270
协议用什么

21:11.270 --> 21:12.270
用页面的协议

21:12.270 --> 21:14.270
它最终完整的UIL地址

21:14.270 --> 21:15.270
是这个

21:15.270 --> 21:16.270
它使用页面的协议

21:16.270 --> 21:17.270
那么这样子

21:17.270 --> 21:18.270
这样子的协议

21:18.270 --> 21:19.270
也是比较常见的

21:20.270 --> 21:21.270
这样的协议

21:21.270 --> 21:22.270
在于什么时候

21:22.270 --> 21:23.270
会用这种协议呢

21:23.270 --> 21:24.270
就是它的域名不一样

21:24.270 --> 21:25.270
比方说我们这域名

21:25.270 --> 21:27.270
可能是另外一个域名

21:27.270 --> 21:28.270
不一样

21:28.270 --> 21:29.270
协议呢

21:29.270 --> 21:30.270
我们就使用页面的协议

21:30.270 --> 21:32.270
用页面的协议保持一致

21:32.270 --> 21:33.270
这种比方

21:33.270 --> 21:34.270
写绝对路径的时候

21:34.270 --> 21:36.270
也是比较常见的协法

21:36.270 --> 21:37.270
然后

21:37.270 --> 21:38.270
它可以省略协议

21:38.270 --> 21:39.270
也可以省略

21:39.270 --> 21:40.270
都要

21:40.270 --> 21:41.270
协议和主机和端口

21:41.270 --> 21:42.270
一起省略

21:42.270 --> 21:46.580
和省略协议

21:46.580 --> 21:47.580
主机

21:47.580 --> 21:48.580
端口

21:48.580 --> 21:49.580
一起省略

21:49.580 --> 21:50.580
像这种协法

21:50.580 --> 21:51.580
叫绝对路径

21:51.580 --> 21:52.580
它不是

21:52.580 --> 21:53.580
一定要区分底儿斜杠和

21:53.580 --> 21:55.580
直接一个斜杠

21:55.580 --> 21:56.580
那么这种协法

21:56.580 --> 21:57.580
它的绝对路径是什么呢

21:57.580 --> 21:58.580
绝对路径

21:58.580 --> 21:59.580
是直接使用

21:59.580 --> 22:00.580
页面的协议

22:00.580 --> 22:01.580
主机端口

22:02.580 --> 22:03.580
就把这个协议

22:03.580 --> 22:04.580
替换掉

22:05.580 --> 22:06.580
就在这

22:06.580 --> 22:07.580
直接使用

22:07.580 --> 22:08.580
页面的协议

22:08.580 --> 22:09.580
主机端口

22:09.580 --> 22:10.580
绝对路径跟相对路径

22:10.580 --> 22:11.580
不一样的地方

22:11.580 --> 22:12.580
就在于

22:12.580 --> 22:13.580
它跟那个页面

22:13.580 --> 22:14.580
在哪一个PASS

22:14.580 --> 22:15.580
下面没关系

22:15.580 --> 22:16.580
不要页面的PASS

22:16.580 --> 22:17.580
是这个

22:18.580 --> 22:19.580
那么你写的

22:19.580 --> 22:20.580
这个路径

22:20.580 --> 22:21.580
它的结果

22:21.580 --> 22:22.580
跟页面的路径

22:22.580 --> 22:24.580
是没关系的

22:24.580 --> 22:25.580
因为它直接使用

22:25.580 --> 22:26.580
这一部分

22:26.580 --> 22:27.580
就完事了

22:27.580 --> 22:28.580
那么之后

22:28.580 --> 22:29.580
我们在开发中

22:29.580 --> 22:30.580
到底使用相对路径

22:30.580 --> 22:31.580
还是绝对路径呢

22:31.580 --> 22:33.580
作为前端开发人员而言

22:33.580 --> 22:34.580
绝大部分时候

22:34.580 --> 22:36.580
使用的是相对路径

22:36.580 --> 22:37.580
但是你得知道

22:37.580 --> 22:38.580
绝对路径是啥

22:39.580 --> 22:40.580
好吧

22:40.580 --> 22:41.580
你这一会儿

22:41.580 --> 22:42.580
有点懵的话

22:42.580 --> 22:43.580
你赞成视频

22:43.580 --> 22:44.580
也好好去履履

22:44.580 --> 22:45.580
这说完了

22:45.580 --> 22:46.580
反正呢

22:46.580 --> 22:47.580
不管你是写的是啥

22:47.580 --> 22:49.580
它一定要生成一个

22:49.580 --> 22:50.580
注意终

22:50.580 --> 22:51.580
一定要生成一个

22:51.580 --> 22:52.580
完整的UAL地址

22:52.580 --> 22:53.580
到了这个另可元素

22:53.580 --> 22:54.580
它解析

22:54.580 --> 22:55.580
从上到下进行解析

22:55.580 --> 22:56.580
解析到哪呢

22:56.580 --> 22:58.580
解析到这个另可元素了

22:58.580 --> 22:59.580
它发现了一个

22:59.580 --> 23:00.580
有一个相对路径

23:00.580 --> 23:01.580
首先二话不说

23:01.580 --> 23:02.580
我现在把它

23:02.580 --> 23:04.580
变成绝对路径再说

23:04.580 --> 23:05.580
绝对路径是什么呢

23:05.580 --> 23:06.580
你要看页面

23:06.580 --> 23:07.580
页面的路径是这个

23:07.580 --> 23:10.580
那么变成绝对路径

23:10.580 --> 23:11.580
就变成了

23:11.580 --> 23:12.580
什么

23:12.580 --> 23:14.580
变成了CSS

23:14.580 --> 23:15.580
CSS

23:15.580 --> 23:16.580
是不是形成一个UAL地址

23:16.580 --> 23:17.580
这个时候

23:17.580 --> 23:20.150
它会做什么呢

23:20.150 --> 23:22.150
它发现一个另可元素

23:24.150 --> 23:25.150
它会做什么

23:25.150 --> 23:27.150
它会再一次发出请求

23:28.150 --> 23:29.150
再一次去请求

23:29.150 --> 23:30.150
请求谁

23:30.150 --> 23:32.150
这个UAL地址是谁

23:32.150 --> 23:33.150
就请求谁

23:33.150 --> 23:34.150
就是发出一个

23:34.150 --> 23:35.150
都是盖子请求

23:35.150 --> 23:37.150
从盖子请求去发出

23:37.150 --> 23:38.150
一个请求到服务器

23:38.150 --> 23:39.150
服务器那边运行断单

23:39.150 --> 23:40.150
然后呢

23:40.150 --> 23:41.150
就给出一个响应

23:41.150 --> 23:43.150
响应一个CSS代码

23:43.150 --> 23:44.150
好 咱们验证一下

23:44.150 --> 23:45.150
是不是这样子

23:45.150 --> 23:46.150
你看

23:46.150 --> 23:47.150
请求了页面之后

23:47.150 --> 23:48.150
你看接下来

23:48.150 --> 23:49.150
是不是又发出一个请求

23:49.150 --> 23:51.150
index的CSS

23:51.150 --> 23:52.150
你看

23:53.150 --> 23:54.150
这个路径

23:54.150 --> 23:56.150
是不是就是我们

23:56.150 --> 23:57.150
刚才这个路径

23:58.150 --> 23:59.150
对吧 它请求的

23:59.150 --> 24:01.150
虽然我写的是相对路径

24:01.150 --> 24:02.150
但是呢

24:02.150 --> 24:04.150
实际上是一个完整的UAL地址

24:05.150 --> 24:06.150
请求出去了

24:07.150 --> 24:08.150
好 请求出去了

24:08.150 --> 24:09.150
服务器给我们的是什么呢

24:09.150 --> 24:10.150
看一下服务器的响应

24:11.150 --> 24:12.150
text

24:12.150 --> 24:13.150
CSS

24:13.150 --> 24:14.150
这个时候

24:14.150 --> 24:15.150
浏览器他一看到

24:15.150 --> 24:16.150
原来服务器给我响应了

24:16.150 --> 24:17.150
这么一个UAL

24:18.150 --> 24:19.150
所以呢

24:20.150 --> 24:22.150
我要把它当成CSS代码

24:22.150 --> 24:23.150
来处理

24:23.150 --> 24:24.150
所以说浏览器

24:24.150 --> 24:26.150
他到底怎么来处理

24:26.150 --> 24:28.150
服务器的响应结果

24:28.150 --> 24:30.150
他取决于服务器的响应头

24:30.150 --> 24:32.150
里面这个东西

24:32.150 --> 24:34.150
这个东西写的是啥

24:34.150 --> 24:35.150
浏览器就怎么来

24:35.150 --> 24:37.150
看待他的响应结果

24:37.150 --> 24:38.150
那么这个时候呢

24:38.150 --> 24:39.150
发现服务器

24:39.150 --> 24:40.150
原来响应的是CSS

24:40.150 --> 24:41.150
好 你就解析CSS

24:41.150 --> 24:42.150
对吧

24:42.150 --> 24:43.150
然后把样式

24:43.150 --> 24:45.150
那些东西应用进去

24:45.150 --> 24:46.150
这个CSS代码

24:46.150 --> 24:47.150
就没什么好处的

24:47.150 --> 24:48.150
懂得意思吗

24:48.150 --> 24:49.150
好 于是呢

24:49.150 --> 24:50.150
服务器

24:50.150 --> 24:51.150
响应个CSS代码

24:51.150 --> 24:52.150
那么这里就开始

24:52.150 --> 24:53.150
解析并应用CSS样式

24:53.150 --> 24:54.150
然后接下来

24:54.150 --> 24:55.150
之前暂停了

24:55.150 --> 24:56.150
解析暂停

24:56.150 --> 24:57.150
然后接下来继续解析

24:57.150 --> 24:58.150
听门文档

24:58.150 --> 24:59.150
那么又回到这

25:05.320 --> 25:09.320
又继续往下解析

25:09.320 --> 25:11.320
解析HE元素

25:11.320 --> 25:12.320
解析出来

25:12.320 --> 25:13.320
好 这里出现了一个什么

25:13.320 --> 25:15.320
出现了一个EMAG元素

25:15.320 --> 25:18.950
是不是要显示图片了

25:18.950 --> 25:19.950
这个时候又会干嘛

25:19.950 --> 25:21.950
它又你看一个SRC地址

25:21.950 --> 25:22.950
是不是又是一个相对路径

25:22.950 --> 25:23.950
它干嘛

25:23.950 --> 25:24.950
它又要把它得到一个决定路径

25:24.950 --> 25:26.950
就是一个UL地址

25:26.950 --> 25:27.950
那么这个UL地址呢

25:27.950 --> 25:29.950
你自己可以琢磨一下

25:29.950 --> 25:31.950
它出来的路径到底是什么

25:31.950 --> 25:32.950
得到的是什么呢

25:32.950 --> 25:33.950
TEST

25:33.950 --> 25:35.950
EMAGETEST.GF

25:37.950 --> 25:38.950
于是在这一块

25:38.950 --> 25:40.950
它又会去发送一个请求

25:40.950 --> 25:41.950
发现EMAGET元素

25:41.950 --> 25:44.950
它又会去请求服务器

25:44.950 --> 25:45.950
服务器里面处理过后

25:45.950 --> 25:47.950
会响应一个图片内容

25:47.950 --> 25:48.950
但是对EMAGET的处理

25:48.950 --> 25:50.950
跟这个Link元素的处理

25:50.950 --> 25:51.950
是不太一样的

25:51.950 --> 25:52.950
对EMAGET的处理

25:52.950 --> 25:55.950
不会暂停浏览器

25:55.950 --> 25:58.950
浏览器对EMAGET的解析

25:58.950 --> 25:59.950
你看之前

25:59.950 --> 26:01.950
我们在发现Link元素的时候

26:01.950 --> 26:06.260
浏览器它会暂停解析

26:06.260 --> 26:07.260
不着急了

26:07.260 --> 26:08.260
暂停解析

26:08.260 --> 26:09.260
现在我要去读样式去了

26:09.260 --> 26:10.260
我等到服务器那边

26:10.260 --> 26:12.260
把样式给了我之后

26:12.260 --> 26:14.260
我再继续往后解析

26:14.260 --> 26:15.260
所以有的时候

26:15.260 --> 26:16.260
你前面写一些CSS

26:16.260 --> 26:18.260
如果说CSS文件内容比较多

26:18.260 --> 26:19.260
服务器那边

26:19.260 --> 26:20.260
响应过来

26:20.260 --> 26:21.260
传输的比较慢的话

26:21.260 --> 26:23.260
一面就会啥都看不见

26:23.260 --> 26:24.260
等着必须要等着

26:24.260 --> 26:26.260
或者网络卡了一下

26:27.260 --> 26:29.260
一面这些啥都看不见

26:29.260 --> 26:30.260
必须要等

26:31.260 --> 26:33.260
这也是正确的做法

26:33.260 --> 26:34.260
为什么呢

26:34.260 --> 26:35.260
不然的话

26:35.260 --> 26:36.260
出现了一个页面

26:36.260 --> 26:37.260
就是没有样式的页面

26:37.260 --> 26:38.260
除非超时了

26:38.260 --> 26:39.260
超时了它就不管了

26:39.260 --> 26:40.260
继续解析了

26:40.260 --> 26:41.260
有正常性往下

26:41.260 --> 26:42.260
没超时的话

26:42.260 --> 26:43.260
这就一直解析

26:43.260 --> 26:44.260
一直等待

26:44.260 --> 26:45.260
等待那个CSS响应

26:45.260 --> 26:46.260
响应完了才解析

26:46.260 --> 26:47.260
但是对EMAGET不一样

26:47.260 --> 26:49.260
对EMAGET图片

26:49.260 --> 26:51.260
它是马上发出请求

26:51.260 --> 26:52.260
我不等你

26:52.260 --> 26:54.260
我接着往后解析

26:54.260 --> 26:56.260
它同步进行的

26:56.260 --> 26:57.260
当然了

26:57.260 --> 26:58.260
这边的处理

26:58.260 --> 26:59.260
就是服务器那边

26:59.260 --> 27:01.260
如果说把图片响应过后了

27:01.260 --> 27:02.260
它马上一把图片

27:02.260 --> 27:04.260
就显示到页面上

27:04.260 --> 27:05.260
我也不知道

27:05.260 --> 27:06.260
它什么时候服务器

27:06.260 --> 27:07.260
把图片响应给我

27:07.260 --> 27:09.260
因为图片还是比较大的

27:09.260 --> 27:10.260
所以说你会发现在

27:10.260 --> 27:11.260
浏览网站的时候

27:11.260 --> 27:12.260
有些东西

27:12.260 --> 27:13.260
图片没有出来

27:13.260 --> 27:14.260
我网页正常可以浏览

27:14.260 --> 27:15.260
正常浏览

27:15.260 --> 27:16.260
它不会卡住

27:16.260 --> 27:18.260
它继续往后解析

27:18.260 --> 27:19.260
它不会卡住

27:19.260 --> 27:20.260
后来图片出来过后了

27:20.260 --> 27:21.260
然后再把那个空间

27:21.260 --> 27:23.260
重新给你布局一下

27:23.260 --> 27:24.260
所以说

27:24.260 --> 27:26.260
图片响应完成之后

27:26.260 --> 27:27.260
我也不知道是什么时间点

27:27.260 --> 27:28.260
反正就把图片

27:28.260 --> 27:29.260
应用到布局里边

27:29.260 --> 27:31.260
应用到图片元素里边

27:31.260 --> 27:32.260
宽高就有了

27:32.260 --> 27:34.260
图片响应完成之前

27:34.260 --> 27:36.260
那是没有这个东西的

27:36.260 --> 27:37.260
所以说你还记得

27:37.260 --> 27:38.260
之前好像做一个什么

27:38.260 --> 27:39.260
瀑布流

27:39.260 --> 27:41.260
瀑布流布局的时候

27:41.260 --> 27:42.260
就解析老师讲那个

27:42.260 --> 27:43.260
是不是图片有一个

27:43.260 --> 27:44.260
unload的这个时间

27:44.260 --> 27:45.260
这个时间是什么意思

27:45.260 --> 27:47.260
表示图片夹在完成之后

27:47.260 --> 27:48.260
什么要夹在完成

27:48.260 --> 27:49.260
就是服务器

27:49.260 --> 27:50.260
就是浏览性

27:50.260 --> 27:51.260
拿到了服务器的

27:51.260 --> 27:52.260
图片响应结果的时候

27:53.260 --> 27:55.260
因为它需要一段时间

27:56.260 --> 27:57.260
懂了意思吧

27:57.260 --> 27:58.260
这是图片内容

28:01.260 --> 28:03.260
刚才是不影响

28:03.260 --> 28:04.260
不影响继续解写

28:04.260 --> 28:05.260
这么文档

28:05.260 --> 28:06.260
所以说

28:08.260 --> 28:10.260
就是这里发送请求

28:10.260 --> 28:11.260
发送请求过去

28:11.260 --> 28:12.260
你看

28:12.260 --> 28:13.260
所以说现在你看这里

28:13.260 --> 28:14.260
是不是多一个请求

28:14.260 --> 28:16.260
对图片的请求

28:16.260 --> 28:17.260
图片的请求

28:17.260 --> 28:18.260
服务器告诉我们

28:18.260 --> 28:20.260
这里响应的是一个图片

28:20.260 --> 28:21.260
浏览性去把它当成图片

28:21.260 --> 28:22.260
看待吧

28:22.260 --> 28:23.260
于是浏览一下

28:23.260 --> 28:24.260
就把它这个地方

28:24.260 --> 28:25.260
选择成一个图片了

28:26.260 --> 28:27.260
那么这个时候

28:27.260 --> 28:28.260
Response看不到的

28:28.260 --> 28:29.260
因为这里是一个图片数据

28:29.260 --> 28:30.260
图片数据是二净值数据

28:30.260 --> 28:31.260
它这里不好显示

28:31.260 --> 28:33.260
但是你可以从Preview

28:33.260 --> 28:34.260
越南那边看到

28:34.260 --> 28:35.260
这个服务器的响应结果

28:35.260 --> 28:36.260
就是这个图片

28:37.260 --> 28:38.260
你看

28:38.260 --> 28:39.260
现在就发到三个请求出去了

28:39.260 --> 28:40.260
对吧

28:40.260 --> 28:41.260
只不过不一样的地方

28:41.260 --> 28:42.260
在于

28:42.260 --> 28:43.260
服务器对图片

28:43.260 --> 28:44.260
这一块的处理方式

28:44.260 --> 28:45.260
是你发请求

28:45.260 --> 28:46.260
发出去

28:46.260 --> 28:48.260
我接着往后解析

28:48.260 --> 28:49.260
好这个时候

28:49.260 --> 28:50.260
解析到这个A元数

28:52.260 --> 28:54.260
好解析到了这个A元数

28:54.260 --> 28:55.260
同学们

28:55.260 --> 28:59.260
解析到这个A元数的时候

28:59.260 --> 29:01.260
它会不会发送请求

29:01.260 --> 29:02.260
不会

29:02.260 --> 29:03.260
A元数它是不会发送

29:03.260 --> 29:04.260
A元数是不是要发送

29:04.260 --> 29:05.260
一个请求到淘宝

29:05.260 --> 29:06.260
不会的

29:06.260 --> 29:07.260
你看这里请求

29:07.260 --> 29:08.260
哪一个地方

29:08.260 --> 29:09.260
对淘宝的请求

29:09.260 --> 29:11.260
没有的

29:11.260 --> 29:12.260
A元数什么时候请求

29:12.260 --> 29:13.260
那不是超链接吗

29:13.260 --> 29:15.260
它是点了之后再请求

29:15.260 --> 29:16.260
没有点的时候不请求

29:16.260 --> 29:17.260
你想一想

29:17.260 --> 29:18.260
如果说A元

29:18.260 --> 29:19.260
没看到一个A元数

29:19.260 --> 29:20.260
都要去请求一次

29:20.260 --> 29:21.260
这个网站直接爆炸了

29:21.260 --> 29:22.260
要请求的东西

29:22.260 --> 29:23.260
是不是

29:23.260 --> 29:24.260
那一个网站上

29:24.260 --> 29:25.260
有多少A元数

29:25.260 --> 29:26.260
你自己看嘛

29:26.260 --> 29:27.260
淘宝京东

29:27.260 --> 29:28.260
各个网站上

29:28.260 --> 29:29.260
多少A元数

29:29.260 --> 29:30.260
所以说A元数

29:30.260 --> 29:31.260
它不会去发送请求

29:31.260 --> 29:33.260
它要等到用户点了之后

29:33.260 --> 29:34.260
才请求

29:34.260 --> 29:35.260
这个东西正常解析

29:35.260 --> 29:36.260
把它显示到一面上

29:36.260 --> 29:37.260
就可以了

29:37.260 --> 29:38.260
好接下来

29:38.260 --> 29:39.260
到下面

29:39.260 --> 29:40.260
发现了一个介石

29:40.260 --> 29:42.260
一样的道理

29:42.260 --> 29:43.260
一直往下

29:43.260 --> 29:44.260
发现了一个什么

29:44.260 --> 29:46.260
发现了一个strips元素

29:46.260 --> 29:47.260
好这个时候

29:47.260 --> 29:48.260
又去发送请求

29:48.260 --> 29:49.260
这个时候

29:50.260 --> 29:52.260
我要去响应介石代码

29:52.260 --> 29:54.260
服务器响应介石代码

29:54.260 --> 29:55.260
好咱们来看一下这个过程

29:55.260 --> 29:57.260
接下来你看这个请求

29:57.260 --> 29:59.260
这里

29:59.260 --> 30:01.260
不用去管它

30:01.260 --> 30:02.260
最后一个介石

30:02.260 --> 30:03.260
给同学说

30:03.260 --> 30:04.260
不用去管它

30:04.260 --> 30:05.260
这个介石

30:05.260 --> 30:06.260
是我们那个服务器那边

30:06.260 --> 30:08.260
自动生成的一个东西

30:08.260 --> 30:09.260
是我们这个调

30:09.260 --> 30:11.260
应该是在调室工具里边

30:12.260 --> 30:13.260
调室工具里边

30:13.260 --> 30:14.260
它自动生成的一个东西

30:14.260 --> 30:15.260
这个东西不用管它

30:15.260 --> 30:16.260
这是跟调室相关的

30:16.260 --> 30:17.260
你看

30:17.260 --> 30:18.260
这个玩意

30:18.260 --> 30:20.260
请求都不是一个正常的UID

30:20.260 --> 30:21.260
它都不是ATB协议

30:21.260 --> 30:24.260
它是跟介石调室相关的

30:24.260 --> 30:26.260
这个东西不用管它

30:26.260 --> 30:27.260
就最后一个介石

30:27.260 --> 30:28.260
不用去管它

30:28.260 --> 30:30.260
是不是这里发出一个正常的

30:30.260 --> 30:31.260
就我们一面上发出一个介石

30:31.260 --> 30:32.260
应这个是了介石的请求

30:32.260 --> 30:34.260
你看请求的地址

30:34.260 --> 30:36.260
是请求这个地址

30:36.260 --> 30:37.260
也可以通过相关的路径

30:37.260 --> 30:39.260
自己去推推倒

30:39.260 --> 30:41.260
是不是请求这个地址

30:41.260 --> 30:42.260
那么发出这个请求

30:42.260 --> 30:43.260
服务器给我们响应的是什么呢

30:43.260 --> 30:45.260
响应的是content type

30:45.260 --> 30:46.260
它告诉我

30:46.260 --> 30:47.260
是一个application JavaScript

30:47.260 --> 30:49.260
这是一个介石代码

30:49.260 --> 30:50.260
浏览器

30:50.260 --> 30:51.260
你不能把它当成CSS

30:51.260 --> 30:53.260
你不能把它当成图片

30:53.260 --> 30:56.260
千万要避免一个幻觉

30:56.260 --> 30:58.260
我请求的是什么后罪名

30:58.260 --> 31:00.260
它就应该是啥

31:00.260 --> 31:02.260
浏览器管都不会管你这个后罪名

31:02.260 --> 31:04.260
它只看这个

31:04.260 --> 31:05.260
这个玩意你告诉我

31:05.260 --> 31:06.260
告诉我是啥

31:06.260 --> 31:07.260
那我就把它当成啥处理

31:07.260 --> 31:08.260
你告诉我介石

31:08.260 --> 31:09.260
那如果说你这个后罪名

31:09.260 --> 31:10.260
是介石

31:10.260 --> 31:11.260
你给我说这是一个图片

31:11.260 --> 31:14.260
那浏览器把它当成图片来选

31:14.260 --> 31:15.260
浏览器不会看这个

31:15.260 --> 31:16.260
什么后罪名的

31:16.260 --> 31:18.260
跟后罪名没关系的

31:18.260 --> 31:23.260
后罪名只要是精神正常的人

31:23.260 --> 31:24.260
一般来说

31:24.260 --> 31:25.260
写后罪名的话

31:25.260 --> 31:27.260
一般都是跟这个一致的

31:27.260 --> 31:28.260
浏览器那边

31:28.260 --> 31:30.260
这是浏览代码要处理的

31:30.260 --> 31:31.260
但是有的时候

31:31.260 --> 31:32.260
遇到一些精神不正常的

31:32.260 --> 31:34.260
它给你名字叫的点儿介石

31:34.260 --> 31:36.260
那请求的是UID

31:36.260 --> 31:37.260
里面有一个点儿介石

31:37.260 --> 31:38.260
但是给你的是一个图片

31:38.260 --> 31:40.260
它完全是可以做到的

31:40.260 --> 31:41.260
关键是看这个

31:41.260 --> 31:43.260
这个才是核心

31:43.260 --> 31:44.260
那告诉你

31:44.260 --> 31:45.260
这是一个介石代码

31:45.260 --> 31:46.260
图片不是介石代码说

31:46.260 --> 31:47.260
你要干嘛

31:47.260 --> 31:50.260
你要启动介石引擎去执行

31:50.260 --> 31:51.260
浮览器给你想用的是什么

31:51.260 --> 31:53.260
就想用了一个这个东西

31:53.260 --> 31:54.260
这是不是介石代码

31:54.260 --> 31:56.260
就是介石代码

31:56.260 --> 31:57.260
你想用的这个东西

31:57.260 --> 31:59.260
浏览器拿到介石代码过后

31:59.260 --> 32:01.260
就执行介石代码

32:01.260 --> 32:04.260
执行代码的期间是停止解析的

32:04.260 --> 32:06.260
介石代码执行完了之后

32:06.260 --> 32:08.260
然后又继续解析

32:08.260 --> 32:10.260
直到整个文档解析完成

32:10.260 --> 32:12.260
你看整个文档解析完成了

32:12.260 --> 32:13.260
没了

32:13.260 --> 32:14.260
于是这个页面就呈现出来了

32:14.260 --> 32:15.260
介石代码也执行完了

32:15.260 --> 32:17.260
CSS也执行完了

32:17.260 --> 32:18.260
这个时候就等待用户操作了

32:18.260 --> 32:20.260
比方说你可能介石代码里边

32:20.260 --> 32:22.260
你可能介石代码比较简单

32:22.260 --> 32:24.260
你看只是输出了一个Hello World

32:24.260 --> 32:26.260
如果说你介石代码

32:26.260 --> 32:28.260
里边还有怎么监听事件

32:28.260 --> 32:30.260
那就是后续的事情

32:30.260 --> 32:32.260
就要执行介石代码期间

32:32.260 --> 32:33.260
就会监听事件

32:33.260 --> 32:35.260
然后继续解析文档完成

32:35.260 --> 32:37.260
那么后边如果说用户点击了事件

32:37.260 --> 32:39.260
是不是出发了介石

32:39.260 --> 32:40.260
比方用户在这里点击了事件

32:40.260 --> 32:41.260
又出发了介石

32:41.260 --> 32:42.260
那又执行介石

32:42.260 --> 32:44.260
或者你开了一个介石器

32:44.260 --> 32:45.260
等待三秒钟

32:45.260 --> 32:46.260
三秒钟之后

32:46.260 --> 32:48.260
又开始启动介石来执行

32:48.260 --> 32:50.260
这是浏览器的执行流程

32:50.260 --> 32:52.260
那么这些事件那些东西

32:52.260 --> 32:53.260
我们就不扯了

32:53.260 --> 32:54.260
就是执行介石代码

32:54.260 --> 32:56.260
那如果说用户又点了

32:56.260 --> 32:57.260
某一个A元数呢

32:57.260 --> 32:58.260
然后我再点了

32:58.260 --> 32:59.260
这个到淘宝去逛一逛

32:59.260 --> 33:01.260
点了A元数

33:01.260 --> 33:03.260
又回到这了

33:03.260 --> 33:04.260
补全ULD

33:04.260 --> 33:06.260
然后这个

33:06.260 --> 33:08.260
根据A元数的超链接

33:08.260 --> 33:10.260
A元数里边不也写的是

33:10.260 --> 33:11.260
我这里写的是

33:11.260 --> 33:13.260
完整的ULD纸

33:13.260 --> 33:14.260
也可以写什么

33:14.260 --> 33:15.260
相对路径也可以

33:15.260 --> 33:16.260
那一样的处理

33:16.260 --> 33:17.260
那么这个时候

33:17.260 --> 33:19.260
就我会把A元数的相对路径

33:19.260 --> 33:20.260
换成什么

33:20.260 --> 33:21.260
换成绝对路径

33:21.260 --> 33:23.260
它其实一开始就会换

33:23.260 --> 33:24.260
就在解析的过程中

33:24.260 --> 33:26.260
就会给它替换成绝对路径

33:26.260 --> 33:28.260
换成绝对路径之后

33:28.260 --> 33:29.260
点了过后

33:29.260 --> 33:31.260
它就请求ULD纸

33:31.260 --> 33:33.260
然后请求

33:33.260 --> 33:34.260
请求想

33:34.260 --> 33:35.260
是不是后边一样的

33:35.260 --> 33:36.260
丢起当前页面

33:36.260 --> 33:38.260
就渲染了个淘宝

33:38.260 --> 33:39.260
后边都是一样的

33:39.260 --> 33:41.260
好 我们来试一下

33:41.260 --> 33:42.260
到淘宝去

33:42.260 --> 33:44.260
你看看我们的网络

33:44.260 --> 33:47.920
把这个取消掉

33:47.920 --> 33:50.920
这样子点到淘宝之后

33:50.920 --> 33:51.920
我们当前页面的

33:51.920 --> 33:52.920
所有的请求就会消失

33:52.920 --> 33:54.920
如果说把这个勾选上的话

33:54.920 --> 33:55.920
我们当前页面的所有请求

33:55.920 --> 33:57.920
它之前还保留

33:57.920 --> 33:58.920
就这么意思

33:58.920 --> 33:59.920
到淘宝

33:59.920 --> 34:00.920
你看

34:00.920 --> 34:02.920
是不是现在就去请求淘宝了

34:02.920 --> 34:03.920
那淘宝为什么有这么多请求呢

34:03.920 --> 34:05.920
是因为淘宝的解析过程中

34:05.920 --> 34:07.920
你看淘宝页面的解析过程中

34:07.920 --> 34:09.920
引入了很多的CSS

34:09.920 --> 34:10.920
你看

34:10.920 --> 34:12.920
这个地方是不是有个CSS

34:12.920 --> 34:14.920
什么因这个神病点

34:14.920 --> 34:15.920
CSS

34:15.920 --> 34:17.920
就是后面有很长串的那个

34:17.920 --> 34:19.920
那么它就会请求这个地址

34:19.920 --> 34:21.920
然后又去这个CSS

34:21.920 --> 34:22.920
还有一些解析

34:22.920 --> 34:23.920
要去请求

34:23.920 --> 34:25.920
然后有些图片

34:25.920 --> 34:26.920
要去请求

34:26.920 --> 34:27.920
一些东西

34:27.920 --> 34:28.920
要去请求解析

34:28.920 --> 34:30.920
要去请求执行

34:30.920 --> 34:31.920
就这个东西

34:31.920 --> 34:32.920
就这么个意思

34:32.920 --> 34:35.920
这就是完整的过程

34:35.920 --> 34:39.620
这个过程对于

34:39.620 --> 34:41.620
已经理解的同学就是小儿科

34:41.620 --> 34:43.620
在第一次接触的时候

34:43.620 --> 34:44.620
会有一点晕晕的

34:44.620 --> 34:45.620
好好去梳理一下

34:45.620 --> 34:48.620
其实整个道理还是比较简单的

34:48.620 --> 34:50.620
输入一个UIL地址

34:50.620 --> 34:51.620
请求响应

34:51.620 --> 34:53.620
拿到一个页面

34:53.620 --> 34:55.620
和从上到下解析页面

34:55.620 --> 34:56.620
发现CSS

34:56.620 --> 34:58.620
去拿CSS

34:58.620 --> 34:59.620
发现图片

34:59.620 --> 35:00.620
去拿图片

35:00.620 --> 35:03.620
发现GSS

35:03.620 --> 35:04.620
去拿GSS

35:04.620 --> 35:06.620
然后拿到GSS过程就执行GSS

35:07.620 --> 35:09.620
直到把整个页面

35:09.620 --> 35:10.620
一开始请求到

35:10.620 --> 35:12.620
ATM文档解析完成

35:12.620 --> 35:13.620
解析完成之后

35:13.620 --> 35:14.620
就等着用户操作

35:14.620 --> 35:16.620
用户点了某一个按钮

35:16.620 --> 35:17.620
那就执行之前的

35:17.620 --> 35:20.620
GSS里边的监听的那个函数

35:20.620 --> 35:22.620
或者是有个技师期

35:22.620 --> 35:23.620
到技师期时间到了

35:23.620 --> 35:25.620
就执行相应的函数

35:25.620 --> 35:26.620
点了某一个操电机

35:26.620 --> 35:28.620
又重新走一遍这个流程

35:28.620 --> 35:29.620
抛弃在当前一面

35:29.620 --> 35:30.620
重新请求

35:30.620 --> 35:32.620
重新拿新的ATM文档

35:32.620 --> 35:34.620
就这么个意思

35:34.620 --> 35:36.620
这就整个浏览器的执行过程

35:38.620 --> 35:40.620
那么为了再一次

35:40.620 --> 35:42.620
让你把更加

35:42.620 --> 35:44.620
细微的一些疑惑打敲掉

35:44.620 --> 35:45.620
我们再来说一下LF Server

35:45.620 --> 35:46.620
你看我们刚才

35:46.620 --> 35:47.620
其实看到的一面就是这个

35:47.620 --> 35:49.620
这两个文件不用看

35:49.620 --> 35:51.620
这两个文件不用管

35:51.620 --> 35:52.620
这是我那个

35:52.620 --> 35:54.620
悲客要用的一些文件

35:54.620 --> 35:55.620
不用管

35:56.620 --> 35:57.620
就看这个

35:57.620 --> 35:58.620
就是我们刚才这个

35:58.620 --> 35:59.620
有图片

35:59.620 --> 36:00.620
有那个A元数

36:00.620 --> 36:02.620
有GSS

36:02.620 --> 36:04.620
GSS就是我刚才那个

36:04.620 --> 36:06.620
好,那么现在我要做什么呢

36:06.620 --> 36:07.620
我要做这么件事

36:07.620 --> 36:08.620
点击右键

36:08.620 --> 36:10.620
这里有个Open with LF Server

36:10.620 --> 36:11.620
那这个东西

36:11.620 --> 36:13.620
袁老师你又怎么解释了

36:13.620 --> 36:15.620
你怎么能解释这个东西呢

36:15.620 --> 36:16.620
对吧

36:16.620 --> 36:18.620
这东西怎么解释

36:18.620 --> 36:19.620
发生了什么事

36:19.620 --> 36:20.620
其实很简单的

36:20.620 --> 36:23.620
现在要解释这个都太简单了

36:23.620 --> 36:25.620
我怎么能解释这个

36:25.620 --> 36:27.620
在一切这些发

36:27.620 --> 36:28.620
就是我们点击右键

36:28.620 --> 36:30.620
Open with LF Server

36:30.620 --> 36:31.620
在这些事情发生之前

36:31.620 --> 36:33.620
它额外的做了一些事

36:34.620 --> 36:35.620
做了什么事

36:35.620 --> 36:37.620
第一步,启动LF Server

36:37.620 --> 36:39.620
产生一个端口号

36:39.620 --> 36:41.620
我这里是5500

36:41.620 --> 36:42.620
对不对

36:42.620 --> 36:43.620
这是第一件事

36:43.620 --> 36:44.620
启动服务器

36:44.620 --> 36:46.620
因为LF Server就是一个服务器程序

36:46.620 --> 36:47.620
那为什么之前没有

36:47.620 --> 36:49.620
之前我访问这个地址的时候

36:49.620 --> 36:51.620
没有去启动什么服务器程序了

36:51.620 --> 36:52.620
是因为这个服务器呢

36:52.620 --> 36:55.620
在我们杜仪的那个公开的服务器上

36:55.620 --> 36:56.620
它早就启动好了

36:56.620 --> 36:57.620
已经启动好了

36:57.620 --> 37:00.620
但是那里本地的服务器就启动了

37:00.620 --> 37:01.620
你看

37:01.620 --> 37:02.620
是不是已经启动

37:02.620 --> 37:03.620
早就启动好了

37:03.620 --> 37:04.620
所以你直接输入URO地址

37:04.620 --> 37:05.620
就可以发问了

37:05.620 --> 37:06.620
那么LF Server呢

37:06.620 --> 37:08.620
它是要你点击右键

37:08.620 --> 37:09.620
Open with LF Server的时候

37:09.620 --> 37:11.620
第一次点击右键

37:11.620 --> 37:12.620
打开一个工程之后

37:12.620 --> 37:13.620
第一次点击右键

37:13.620 --> 37:15.620
Open with LF Server之后

37:15.620 --> 37:16.620
它就会启动

37:16.620 --> 37:18.620
后边就不会再重新启动了

37:18.620 --> 37:19.620
一直在

37:19.620 --> 37:20.620
只要这个端口号在这里

37:20.620 --> 37:21.620
看着的

37:21.620 --> 37:23.620
那么就说明LF Server是启动的

37:24.620 --> 37:25.620
启动之后呢

37:25.620 --> 37:27.620
LF Server还帮你做了一件事

37:27.620 --> 37:29.620
帮你打开这个浏览器

37:31.120 --> 37:32.620
帮你打开这个浏览器窗口

37:32.620 --> 37:36.620
然后自动的帮你在浏览器窗口里边输入这个地址

37:37.620 --> 37:39.620
请求本机的服务器

37:39.620 --> 37:40.620
端口号是501

37:40.620 --> 37:42.620
是不是就请求LF Server

37:42.620 --> 37:43.620
对吧

37:43.620 --> 37:44.620
然后呢

37:44.620 --> 37:46.620
你点击到是这个右键

37:46.620 --> 37:48.620
那么它就把这个路径给你加上

37:48.620 --> 37:49.620
对吧

37:49.620 --> 37:50.620
它就做了这么一件事

37:50.620 --> 37:52.620
那么后边的流程完全一样

37:52.620 --> 37:54.620
后边的流程就完全一样了

37:54.620 --> 37:56.620
那么这个时候浏览器它就会

37:56.620 --> 37:57.620
浏览器它本身的工作就是这个

37:57.620 --> 37:58.620
对吧

37:58.620 --> 38:00.620
现在帮你输入UIL地址了

38:00.620 --> 38:01.620
LF Server帮你输入了

38:01.620 --> 38:02.620
它就会去请求服务器

38:02.620 --> 38:03.620
那请求到了谁了

38:03.620 --> 38:04.620
请求到了谁

38:04.620 --> 38:06.620
请求到了就是LF Server

38:06.620 --> 38:07.620
那个服务器

38:07.620 --> 38:08.620
那么LF Server那个服务器

38:08.620 --> 38:09.620
做了什么事呢

38:09.620 --> 38:10.620
LF Server那个服务器

38:10.620 --> 38:12.620
它就是一个静态资源服务器

38:12.620 --> 38:14.620
它拿到这个请求之后

38:14.620 --> 38:15.620
你请求的是谁

38:15.620 --> 38:16.620
你请求的是这个地址

38:16.620 --> 38:17.620
对吧

38:17.620 --> 38:18.620
LF Server一看

38:18.620 --> 38:19.620
你请求的是这个

38:19.620 --> 38:21.620
那我就在当前项目的跟目录下

38:21.620 --> 38:24.620
把这个文件的内容给你想印过来

38:25.620 --> 38:27.620
这就是你为什么很多同学他觉得

38:27.620 --> 38:30.620
这个路径就是这里的文件夹路径

38:30.620 --> 38:31.620
就是这个原因

38:31.620 --> 38:32.620
是因为服务器程

38:32.620 --> 38:34.620
这要看服务器程序的

38:34.620 --> 38:36.620
服务器程序就是这么写的

38:36.620 --> 38:37.620
另外什么那个程序

38:37.620 --> 38:38.620
它就是这么写的

38:38.620 --> 38:40.620
你它按照你这个路径

38:40.620 --> 38:42.620
在这个在这里跟目录下面

38:42.620 --> 38:43.620
去找那个音乐的时候

38:43.620 --> 38:44.620
也挺没有

38:46.620 --> 38:47.620
对吧

38:47.620 --> 38:48.620
于是你会看到

38:48.620 --> 38:49.620
我们在这里点击右键检查

38:49.620 --> 38:50.620
查看这个网络

38:52.620 --> 38:53.620
再来刷新看一下

38:53.620 --> 38:54.620
你看

38:54.620 --> 38:56.620
请求这请求什么路径

38:56.620 --> 38:57.620
就被LF Server收到了

38:57.620 --> 38:58.620
LF Server

38:58.620 --> 38:59.620
它就会从那个

38:59.620 --> 39:01.620
我们当前那个跟目录下

39:01.620 --> 39:03.620
把这个文件的内容直接想印给你

39:03.620 --> 39:05.620
你想想印的内容就是这样

39:05.620 --> 39:06.620
所以说这是啥

39:06.620 --> 39:08.620
这是LF Server给你注入的一些代码

39:08.620 --> 39:10.620
它为了实现你代码

39:10.620 --> 39:11.620
这边代码更新了

39:11.620 --> 39:12.620
一保存

39:12.620 --> 39:13.620
它就会自动刷新

39:13.620 --> 39:14.620
它给你加一些代码

39:14.620 --> 39:15.620
这个代码你现在看不懂的

39:15.620 --> 39:16.620
以后就看得懂

39:16.620 --> 39:17.620
但是看前面

39:17.620 --> 39:18.620
是不是就是我们那个页面代码

39:18.620 --> 39:19.620
对吧

39:19.620 --> 39:21.620
下面的东西不要去管

39:21.620 --> 39:22.620
不要去管

39:22.620 --> 39:24.620
现在不是你们现在能接触的东西

39:25.620 --> 39:26.620
就看上面这个

39:26.620 --> 39:27.620
LF Server

39:27.620 --> 39:28.620
是不是给你想印这个东西

39:28.620 --> 39:29.620
然后这个解析

39:29.620 --> 39:30.620
后面就一样了

39:30.620 --> 39:31.620
解析一解析

39:31.620 --> 39:32.620
到了印这个

39:32.620 --> 39:33.620
CSS

39:33.620 --> 39:35.620
它是不是又去请求LF Server

39:35.620 --> 39:36.620
你看请求

39:36.620 --> 39:38.620
请求CSS

39:38.620 --> 39:39.620
LF Server一看

39:39.620 --> 39:40.620
就到了LF Server

39:40.620 --> 39:41.620
LF Server一看

39:41.620 --> 39:42.620
你请求的是这个路径

39:42.620 --> 39:43.620
那么LF Server非常简单

39:43.620 --> 39:44.620
它就把这个路径

39:44.620 --> 39:45.620
下面的这个文件的代码

39:45.620 --> 39:46.620
直接扔给你

39:46.620 --> 39:47.620
你看它想印的结果

39:47.620 --> 39:48.620
就这个代码

39:48.620 --> 39:50.620
留上去就可以有CSS了

39:50.620 --> 39:51.620
然后又继续解析

39:51.620 --> 39:52.620
这个ATMEL

39:52.620 --> 39:53.620
继续解析

39:53.620 --> 39:55.620
后面是不是一样的

39:55.620 --> 39:56.620
对吧

39:56.620 --> 39:57.620
解析到那个

39:57.620 --> 39:58.620
解析到这个ATMEL

39:58.620 --> 39:59.620
又去请求图片

40:00.620 --> 40:01.620
解析到这个

40:01.620 --> 40:02.620
印这个CSS

40:02.620 --> 40:03.620
又去请求这个

40:03.620 --> 40:04.620
后面两个就不用管了

40:04.620 --> 40:07.700
后面两个就不用管了

40:07.700 --> 40:09.700
这就是整个页面的处理流程

40:09.700 --> 40:11.700
我们从一个URLD

40:11.700 --> 40:12.700
开始

40:12.700 --> 40:13.700
为此到我们用户

40:13.700 --> 40:14.700
能看到页面

40:14.700 --> 40:15.700
就这个流程

40:15.700 --> 40:17.700
那么我们来对比一下PoseMap

40:17.700 --> 40:18.700
是不是浏览器

40:18.700 --> 40:19.700
只是帮我们做了

40:19.700 --> 40:21.700
额外的自动做了一些事而已

40:21.700 --> 40:23.700
对不对

40:23.700 --> 40:24.700
PoseMap

40:24.700 --> 40:25.700
它没有做这些额外的事

40:25.700 --> 40:26.700
它就是看到了一个

40:26.700 --> 40:27.700
原式的响应结果

40:27.700 --> 40:28.700
比如暗器

40:28.700 --> 40:29.700
它只不过

40:29.700 --> 40:31.700
它要对这个响应结果进行分析

40:31.700 --> 40:32.700
对吧

40:32.700 --> 40:33.700
分析这个响应结果解析

40:33.700 --> 40:34.700
然后到了CSS

40:34.700 --> 40:36.700
我就去请求CSS

40:36.700 --> 40:37.700
看到这个图片

40:37.700 --> 40:38.700
我就去请求图片

40:38.700 --> 40:39.700
那么这些事

40:39.700 --> 40:40.700
在PoseMap里面

40:40.700 --> 40:41.700
是不是得自己手动来做

40:41.700 --> 40:42.700
对吧

40:42.700 --> 40:43.700
手动做也可以做

40:43.700 --> 40:44.700
你看我看到一面

40:44.700 --> 40:45.700
原来这里一个标题

40:45.700 --> 40:46.700
我在头到里面

40:46.700 --> 40:47.700
想一个标题

40:47.700 --> 40:48.700
这里一个CSS

40:48.700 --> 40:49.700
我就去

40:49.700 --> 40:51.700
在这里去添加一个请求

40:51.700 --> 40:52.700
去请求CSS

40:52.700 --> 40:53.700
是不是还是可以的

40:53.700 --> 40:55.700
这就是为什么说

40:55.700 --> 40:56.700
我们上网

40:56.700 --> 40:57.700
其实可以

40:57.700 --> 40:58.700
不用浏览器

40:58.700 --> 40:59.700
用PoseMap也可以

40:59.700 --> 41:00.700
这个太反人类了

41:00.700 --> 41:01.700
浏览器只是

41:01.700 --> 41:02.700
帮我们做了一些事

41:02.700 --> 41:03.700
所以说

41:03.700 --> 41:04.700
浏览器有一个名字

41:04.700 --> 41:05.700
叫做用户代理

41:05.700 --> 41:06.700
对吧

41:06.700 --> 41:07.700
这是我们之前说过的

41:07.700 --> 41:09.700
它帮你去请求了

41:09.700 --> 41:11.700
帮你去解析

41:11.700 --> 41:12.700
帮你去请求CSS

41:12.700 --> 41:14.700
帮你去看图片

41:14.700 --> 41:15.700
让你更加用户

41:15.700 --> 41:16.700
就不用去做这些

41:16.700 --> 41:18.700
复杂的繁殊的操作了

41:18.700 --> 41:21.700
这就是浏览器

41:21.700 --> 41:22.700
做的事

41:22.700 --> 41:23.700
你把这几颗东西

41:23.700 --> 41:24.700
好好去消化一下

41:24.700 --> 41:26.700
你把这几颗东西消化了

41:26.700 --> 41:27.700
我给你们说

41:27.700 --> 41:28.700
后边学习代码

41:28.700 --> 41:29.700
接下来我们就要学习代码了

41:29.700 --> 41:32.700
那简单的不得了

41:32.700 --> 41:34.700
你只要前面东西你消化

41:34.700 --> 41:35.700
后边代码

41:35.700 --> 41:36.700
就随到取成的事

41:36.700 --> 41:37.700
好吧

41:37.700 --> 41:38.700
好好消化一下

