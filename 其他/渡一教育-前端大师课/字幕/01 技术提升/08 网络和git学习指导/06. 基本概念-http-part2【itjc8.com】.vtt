WEBVTT

00:00.000 --> 00:04.000
好 看完了请求 我们再来看想用

00:04.000 --> 00:07.000
现在什么情况呢 就是请求的消息已经发过去了

00:07.000 --> 00:11.000
就是文本消息 这个文本消息通过这个请求啊

00:11.000 --> 00:14.000
事就发到服务器了 接下来就是服务器那边

00:14.000 --> 00:18.000
就是后端开发员员 加把的呀 搞拍摄的呀

00:18.000 --> 00:22.000
cshoper的呀 php呀 这后端程序 他就接受到了这个请求

00:22.000 --> 00:27.000
他就会处理 他会把这个文本里边的东西这些信息读出来

00:27.000 --> 00:31.000
原来你想要登录 原来你给我发了一个账号密码

00:31.000 --> 00:35.000
我就来进行处理 经过我的程序运行 我来验证一下账号密码这么正确

00:35.000 --> 00:38.000
我会给你一个响应 给你一个回复

00:38.000 --> 00:41.000
那么接下来我们再研究一个响应的格式

00:41.000 --> 00:44.000
响应的格式呢 它其实跟请求差不多

00:44.000 --> 00:48.000
它也是三个部分 响应行 响应头 响应体

00:48.000 --> 00:52.000
有些工具里边呢 他把响应头和响应行合并在一起的

00:52.000 --> 00:55.000
但是都是这个意思 反正就是这个三部分

00:55.000 --> 01:00.000
好 一个个看 首先是响应行 我们还是截图还是

01:00.000 --> 01:07.380
首先是响应行 响应行里边包含两个部分

01:07.380 --> 01:10.380
一个是协议版本 这个没什么好说的

01:10.380 --> 01:13.380
就双方商量嘛 请求的时候不是也有一个

01:13.380 --> 01:17.380
请求行里边不也有一个版本嘛对吧 发过去

01:17.380 --> 01:20.380
服务器说那个版本就行嘛 那我们就用这个版本

01:20.380 --> 01:22.380
好 给它回应一个

01:22.380 --> 01:26.380
然后接下来是一个状态码和状态消息 就是这一部分

01:26.380 --> 01:31.380
那么状态码是这个数字 状态消息是空格后边这个单词

01:31.380 --> 01:33.380
那么这个东西是什么意思呢

01:33.380 --> 01:36.380
它表示服务器对当前的请求的表态

01:36.380 --> 01:41.380
就好必说你到银行里边去办卡

01:41.380 --> 01:45.380
那么这个工作人员就告诉你 今天可以办卡

01:45.380 --> 01:48.380
你填个单子吧 那么可以办卡就是个表态

01:48.380 --> 01:52.380
比方说你去办卡 他说今天我们那个机器故障

01:52.380 --> 01:54.380
系统故障 今天办不了卡

01:54.380 --> 01:57.380
那么这就是一个错误的表态

01:57.380 --> 02:00.380
那么这个响应码和响应消息通常是对应的

02:00.380 --> 02:03.380
比方说200这个响应码 通常就对应的是ok

02:03.380 --> 02:06.380
表示 ok 没问题 你请求过来 我看农了

02:06.380 --> 02:09.380
我马上给你响应 响应一个结果

02:09.380 --> 02:11.380
那么就是200 ok

02:11.380 --> 02:16.380
但是这个数字和这个单词也有可能不对应

02:16.380 --> 02:19.380
不对应就不对应 无所谓的

02:19.380 --> 02:22.380
无所谓的 那个一般来说是对应的

02:22.380 --> 02:25.380
只要你不是搞计特例独行的东西

02:25.380 --> 02:27.380
一般就是对应的

02:27.380 --> 02:33.380
那么这个状态码 这里会出现一个面试考典

02:33.380 --> 02:35.380
他就问你常见的状态码

02:35.380 --> 02:37.380
或者是问你状态码的分类

02:37.380 --> 02:39.380
有哪几类状态码

02:39.380 --> 02:42.380
那么这里我就跟大家说一下

02:42.380 --> 02:45.380
一个是分类 分类的一共分为五类

02:45.380 --> 02:47.380
一个是一开头的状态码

02:47.380 --> 02:51.380
就100多 100到199的状态码

02:51.380 --> 02:53.380
那么这一类的状态码

02:53.380 --> 02:55.380
通常是服务器收到的请求了

02:55.380 --> 02:58.380
但是他一看个请求

02:58.380 --> 03:01.380
好像你还没有发送完

03:01.380 --> 03:03.380
你还接着发吧

03:03.380 --> 03:05.380
我就给你回应一个一开头的状态码

03:05.380 --> 03:08.380
告诉你 那你继续发吧

03:08.380 --> 03:10.380
或者是有的时候我们要更改协议

03:10.380 --> 03:16.380
比方说客户端发送一个消息到服务器

03:16.380 --> 03:19.380
用的协议版本是ADP1.1

03:19.380 --> 03:22.380
那么服务器呢说我这个1.1

03:22.380 --> 03:23.380
这么老的版本了算了吧

03:23.380 --> 03:25.380
我们还是用ADP2吧

03:25.380 --> 03:28.380
他会给你想一个1015级的好像是

03:28.380 --> 03:31.380
让你提升一下协议的版本

03:31.380 --> 03:33.380
让你重新发送请求

03:33.380 --> 03:35.380
这个我们遇到的比较少

03:35.380 --> 03:36.380
了解就行了

03:36.380 --> 03:38.380
好 第二个

03:38.380 --> 03:40.380
以2开头的状态码了

03:40.380 --> 03:41.380
这个比较非常多了

03:41.380 --> 03:42.380
特别是200

03:42.380 --> 03:44.380
他表示成功

03:44.380 --> 03:45.380
你得请求我收到了

03:45.380 --> 03:48.380
我马上就给你一个正常的响应

03:48.380 --> 03:50.380
然后以3开头的状态码了

03:50.380 --> 03:52.380
指的是重定项

03:52.380 --> 03:53.380
他什么意思呢

03:53.380 --> 03:54.380
就是你访问的东西啊

03:54.380 --> 03:55.380
我已经搬家了

03:55.380 --> 03:57.380
他就不在这个地址了

03:57.380 --> 03:58.380
我告诉你另外一个地址去

03:58.380 --> 04:00.380
另外一个地址去找

04:00.380 --> 04:01.380
就有热设一下

04:01.380 --> 04:03.380
你们到政府部门去办事

04:03.380 --> 04:05.380
这个部门推那个部门

04:05.380 --> 04:07.380
就是一个重定项

04:07.380 --> 04:08.380
然后4开头的状态码了

04:08.380 --> 04:10.380
表示客户端错误

04:10.380 --> 04:12.380
当然他里边有很多

04:12.380 --> 04:15.380
401 4012 404 403

04:15.380 --> 04:16.380
有很多

04:16.380 --> 04:18.380
那么都表示客户端的错误

04:18.380 --> 04:20.380
就是你发过来的请求是有问题的

04:20.380 --> 04:23.380
反正我没法给你处理

04:23.380 --> 04:25.380
我就直接给你回一个4开头的状态码

04:25.380 --> 04:27.380
还有5开头状态码的

04:27.380 --> 04:28.380
就是你发的请求

04:28.380 --> 04:29.380
确实是没问题的

04:29.380 --> 04:32.380
是我这边服务器出了问题

04:32.380 --> 04:33.380
你要再

04:33.380 --> 04:35.380
你要去联系咱们的网站的管理员

04:35.380 --> 04:37.380
或者是后端开发的员员去解决

04:37.380 --> 04:39.380
是服务器内部的程序错误

04:39.380 --> 04:41.380
因为服务器他本身也是个程序

04:41.380 --> 04:43.380
他又可能会翻出一八个

04:43.380 --> 04:46.380
就是这么一些状态码分类的话

04:46.380 --> 04:47.380
就这么无类

04:47.380 --> 04:48.380
通常情况下

04:48.380 --> 04:51.380
我们认为0到399之间的状态码

04:51.380 --> 04:52.380
都是正常的

04:52.380 --> 04:53.380
其他都是不正常的

04:53.380 --> 04:54.380
都是有问题的

04:54.380 --> 04:55.380
要么就是客户端有问题

04:55.380 --> 04:57.380
要么就服务器有问题

04:57.380 --> 04:58.380
好 接下来我们来看一下

04:58.380 --> 04:59.380
常见的状态码

04:59.380 --> 05:00.380
我这里列举了一些

05:00.380 --> 05:03.380
第一个最常见的就是200 ok

05:03.380 --> 05:04.380
一切正常

05:04.380 --> 05:06.380
而这种状态码是非常常见的

05:06.380 --> 05:08.380
你比方说你访问任何一个页面

05:08.380 --> 05:10.380
比方说就惊动

05:10.380 --> 05:11.380
好吧

05:11.380 --> 05:16.590
好 我们打开那个刷新词

05:17.590 --> 05:19.590
把这个重新清空一下

05:19.590 --> 05:20.590
重新刷新

05:20.590 --> 05:22.590
发出了很多请求对吧

05:22.590 --> 05:23.590
我们只看第一个

05:23.590 --> 05:24.590
就对页面的请求

05:24.590 --> 05:26.590
我们看一下这个general

05:26.590 --> 05:28.590
是不是有个200 ok

05:28.590 --> 05:30.590
对吧 我的请求服务器收到了

05:30.590 --> 05:31.590
服务器给我响应一个状态码

05:31.590 --> 05:32.590
200 ok

05:32.590 --> 05:34.590
当然你可以通过postman来

05:34.590 --> 05:36.590
去访问都是一样的

05:37.590 --> 05:38.590
postman

05:38.590 --> 05:39.590
通过访问一个介绍请求

05:39.590 --> 05:40.590
发到京东

05:40.590 --> 05:41.590
然后发送

05:42.590 --> 05:43.590
好 我们来看一下

05:43.590 --> 05:44.590
它的状态码

05:44.590 --> 05:45.590
200 ok

05:45.590 --> 05:46.590
对吧 顺便

05:46.590 --> 05:47.590
请求服务器收到了

05:47.590 --> 05:48.590
它告诉我 ok

05:48.590 --> 05:49.590
一切都 ok

05:49.590 --> 05:50.590
没有任何问题

05:50.590 --> 05:51.590
我给你正常响应

05:52.590 --> 05:53.590
200 ok

05:53.590 --> 05:54.590
这是非常常见

05:54.590 --> 05:55.590
这是最常见的

05:56.590 --> 05:57.590
好 接下来看这个

05:57.590 --> 05:58.590
三开头的 301

05:58.590 --> 06:02.590
这个叫Mood Permanentity

06:02.590 --> 06:04.590
我那个口语就这样了

06:04.590 --> 06:05.590
它表示为什么呢

06:05.590 --> 06:09.590
表示的资源已经被永久重定下

06:09.590 --> 06:10.590
永久搬家了

06:10.590 --> 06:13.590
比方说有些网站一开始

06:13.590 --> 06:15.590
它一个地址在这

06:15.590 --> 06:17.590
后来花然域名

06:17.590 --> 06:18.590
它地址变了

06:18.590 --> 06:20.590
那么它就会用这么一个状态

06:20.590 --> 06:21.590
告诉

06:21.590 --> 06:22.590
如果说客户端去请求它的话

06:22.590 --> 06:23.590
那么它就会永久

06:23.590 --> 06:24.590
它告诉你

06:24.590 --> 06:26.590
你要的找的东西不在我这

06:27.590 --> 06:29.590
它已经被移动到了一个新的地址

06:29.590 --> 06:30.590
它搬家了

06:30.590 --> 06:31.590
我要告诉你

06:31.590 --> 06:32.590
它搬到哪去了

06:32.590 --> 06:34.590
所以说我会把

06:35.590 --> 06:36.590
这里写错了

06:36.590 --> 06:37.590
叫响应头

06:40.030 --> 06:41.030
我会把新的地址

06:41.030 --> 06:43.030
放到响应头的location中

06:43.030 --> 06:44.030
那么这是什么意思呢

06:44.030 --> 06:46.030
再给大家看一个例子吧

06:47.030 --> 06:48.030
我记得

06:48.030 --> 06:50.030
我记得那个斗鱼

06:53.050 --> 06:55.050
斗鱼以前的那个

06:59.960 --> 07:00.960
就这个地址

07:00.960 --> 07:03.960
它以前的域名叫斗鱼TV.com

07:04.960 --> 07:06.960
然后我们发送一个请求过去

07:06.960 --> 07:07.960
你看

07:07.960 --> 07:09.960
是不是得到一个301的状态

07:10.960 --> 07:11.960
对吧

07:11.960 --> 07:13.960
你这个地址已经不在这个地方了

07:13.960 --> 07:15.960
你要找的那个网站

07:15.960 --> 07:16.960
它被移动到了哪里呢

07:16.960 --> 07:18.960
它已经被移动到了

07:18.960 --> 07:20.960
已经永久的被移动走了

07:20.960 --> 07:21.960
永久的搬家了

07:21.960 --> 07:23.960
你应该去新的地址去找

07:23.960 --> 07:25.960
那么新的地址在哪呢

07:25.960 --> 07:27.960
它就在响应头里边

07:27.960 --> 07:28.960
响应头跟请求头是一样的

07:28.960 --> 07:29.960
也是建置队

07:29.960 --> 07:30.960
一个一个的建置队

07:30.960 --> 07:31.960
你看

07:31.960 --> 07:32.960
它会给你加一个响应头

07:32.960 --> 07:33.960
叫location

07:33.960 --> 07:34.960
它告诉你

07:34.960 --> 07:36.960
斗鱼已经搬到了这个地址了

07:36.960 --> 07:38.960
让你去重新请求这个地址

07:39.960 --> 07:40.960
那么

07:40.960 --> 07:41.960
如果说你

07:41.960 --> 07:42.960
我约我这个是postman

07:42.960 --> 07:44.960
如果说是你浏览器的话

07:44.960 --> 07:45.960
你会发现

07:45.960 --> 07:46.960
一个有意思的现象就出现了

07:46.960 --> 07:48.960
比方说我们去请求这个地址

07:48.960 --> 07:49.960
用浏览器请求

07:49.960 --> 07:50.960
我把这里清空

07:52.960 --> 07:53.960
好 接下来回车

07:54.960 --> 07:58.230
你会发现那个地址

07:58.230 --> 07:59.230
它自动变成这个了

07:59.230 --> 08:00.230
对吧

08:00.230 --> 08:04.760
什么地址就自动变成这个了

08:04.760 --> 08:05.760
我的摄像头

08:06.760 --> 08:07.760
那么

08:07.760 --> 08:08.760
为什么地址会变成这个呢

08:08.760 --> 08:09.760
我们来看一下它的请求

08:09.760 --> 08:10.760
第一次请求

08:10.760 --> 08:11.760
你看请求的是这个

08:12.760 --> 08:14.760
3w.doubit.com

08:14.760 --> 08:15.760
它给的是什么

08:15.760 --> 08:16.760
301

08:16.760 --> 08:18.760
跟刚才postman是不是一结果一样的

08:18.760 --> 08:19.760
给的是301

08:19.760 --> 08:20.760
那么这个301

08:20.760 --> 08:22.760
它在想应头里边

08:22.760 --> 08:24.760
你看这个response caters

08:24.760 --> 08:25.760
想应头里边

08:25.760 --> 08:27.760
它就会给你加上一个location

08:27.760 --> 08:28.760
看没

08:29.760 --> 08:30.760
让你去请求这个

08:30.760 --> 08:31.760
浏览器

08:31.760 --> 08:33.760
它就不像postman

08:33.760 --> 08:34.760
postman我这里就没啥

08:34.760 --> 08:35.760
就没工作

08:35.760 --> 08:36.760
就没做啥了

08:36.760 --> 08:37.760
那么浏览器里边

08:37.760 --> 08:38.760
它就会自动的

08:38.760 --> 08:40.760
让浏览器重新发一个请求

08:40.760 --> 08:41.760
到这个新的地址

08:41.760 --> 08:43.760
你看它就重新发那个请求

08:43.760 --> 08:44.760
到这了

08:44.760 --> 08:45.760
看没

08:45.760 --> 08:46.760
到这个地址了

08:46.760 --> 08:47.760
这个地址得到的就是两半

08:47.760 --> 08:48.760
OK

08:48.760 --> 08:49.760
所以说你为什么

08:49.760 --> 08:50.760
你访问这个

08:50.760 --> 08:51.760
刚才那个地址的时候

08:51.760 --> 08:52.760
得到的是这个地址呢

08:52.760 --> 08:54.760
是因为浏览器发送了两个请求

08:54.760 --> 08:55.760
我们再来看一下

08:55.760 --> 08:57.760
整个过程是这样子的

08:57.760 --> 08:58.760
这是浏览器

08:58.760 --> 08:59.760
这是服务器

08:59.760 --> 09:00.760
首先第一次

09:00.760 --> 09:01.760
服务器

09:01.760 --> 09:02.760
浏览器发一个请求

09:02.760 --> 09:03.760
到原来的

09:03.760 --> 09:04.760
就是我们一开始写的一个地址

09:04.760 --> 09:06.760
doubit.com

09:06.760 --> 09:08.760
然后服务器给它回应了一个什么

09:08.760 --> 09:09.760
回应了一个

09:09.760 --> 09:11.760
回应了一个301

09:11.760 --> 09:12.760
对吧

09:12.760 --> 09:13.760
301

09:13.760 --> 09:15.760
让它去请求一个新的地址

09:15.760 --> 09:17.760
于是浏览器就拋起

09:17.760 --> 09:18.760
之前的地址

09:18.760 --> 09:20.760
重新去请求一个新的地址

09:20.760 --> 09:21.760
然后服务器

09:21.760 --> 09:23.760
又给它一个200ok的箱子

09:23.760 --> 09:25.760
它的逻辑是这样子的

09:25.760 --> 09:26.760
这是重定项

09:26.760 --> 09:28.760
永久重定项

09:28.760 --> 09:29.760
OK

09:29.760 --> 09:30.760
那么这是

09:30.760 --> 09:31.760
这一块

09:31.760 --> 09:32.760
301

09:32.760 --> 09:33.760
还有一个就是302

09:33.760 --> 09:36.760
302那叫做临时重定项

09:36.760 --> 09:37.760
什么样临时重定项呢

09:37.760 --> 09:38.760
就是说

09:38.760 --> 09:39.760
还是一样的

09:39.760 --> 09:40.760
搬家了

09:40.760 --> 09:41.760
然后新的地址

09:41.760 --> 09:43.760
我也是给你放到楼开心里边了

09:43.760 --> 09:44.760
但是

09:44.760 --> 09:46.760
它有可能

09:46.760 --> 09:47.760
将来

09:47.760 --> 09:48.760
还会变化

09:48.760 --> 09:49.760
它可能

09:49.760 --> 09:50.760
那个新的地址

09:50.760 --> 09:51.760
可能将来又变了

09:51.760 --> 09:52.760
它是临时的

09:52.760 --> 09:53.760
临时的搬过去了

09:53.760 --> 09:54.760
可能将来又回来了

09:54.760 --> 09:55.760
或者是将来又变的

09:55.760 --> 09:56.760
那么这两个

09:56.760 --> 09:58.760
其实本质上没有什么区别

09:58.760 --> 09:59.760
都是重定项

09:59.760 --> 10:01.760
对于浏览器而言

10:01.760 --> 10:02.760
有点区别

10:02.760 --> 10:03.760
浏览器

10:03.760 --> 10:05.760
如果说遇到了301的响应

10:05.760 --> 10:07.760
它又是把那个

10:07.760 --> 10:08.760
新的地址

10:08.760 --> 10:09.760
比如说

10:10.760 --> 10:11.760
你

10:11.760 --> 10:16.480
你请求的是这个地址

10:16.480 --> 10:18.480
请求的是它

10:18.480 --> 10:19.480
然后呢

10:19.480 --> 10:21.480
服务器给你想应的是一个

10:21.480 --> 10:23.480
301

10:23.480 --> 10:24.480
它告诉你

10:24.480 --> 10:25.480
新的地址是什么呢

10:25.480 --> 10:26.480
新的地址是

10:26.480 --> 10:27.480
在楼开心里的

10:27.480 --> 10:28.480
响应头里边

10:28.480 --> 10:30.480
新的地址是B

10:30.480 --> 10:31.480
比方说

10:31.480 --> 10:33.480
如果说你给的是301的话

10:33.480 --> 10:35.480
浏览器就会缓存

10:35.480 --> 10:36.480
缓存

10:36.480 --> 10:37.480
就是把这个

10:37.480 --> 10:39.480
这个结果缓存下来

10:39.480 --> 10:41.480
如果说你再去请求它

10:42.480 --> 10:44.480
浏览器它就不会真实的

10:44.480 --> 10:45.480
把请求发到服务器了

10:45.480 --> 10:47.480
它直接给你变成请求B

10:47.480 --> 10:49.480
就这么个意思

10:49.480 --> 10:50.480
它就会指

10:50.480 --> 10:52.480
你下一次再去请求它的时候

10:52.480 --> 10:54.480
它就不会真实的发送请求到服务器

10:54.480 --> 10:56.480
它就直接给你变成B了

10:56.480 --> 10:58.480
这就要永久重定下

10:58.480 --> 10:59.480
如果是302的话

10:59.480 --> 11:00.480
那就不

11:00.480 --> 11:01.480
其他都一样

11:01.480 --> 11:02.480
它就没有浏览器缓存

11:02.480 --> 11:04.480
每一次都还是要问一下

11:04.480 --> 11:05.480
我之前访问A

11:05.480 --> 11:07.480
我现在再一次访问F

11:08.480 --> 11:10.480
下一次再去请求A的时候

11:10.480 --> 11:12.480
它还是要把请求发出去

11:12.480 --> 11:13.480
还是要问一下

11:13.480 --> 11:14.480
万一它又改回来了

11:15.480 --> 11:16.480
所以它就没有缓存

11:16.480 --> 11:17.480
就这个区别

11:17.480 --> 11:18.480
其他没啥区别

11:19.480 --> 11:21.480
304

11:22.480 --> 11:23.480
这个玩意是什么呢

11:23.480 --> 11:25.480
这个玩意是指的是

11:26.480 --> 11:28.480
文档内容未修改

11:28.480 --> 11:31.480
这个一般跟缓存内容有关系的

11:31.480 --> 11:32.480
就不要说

11:32.480 --> 11:33.480
这个是啥意思呢

11:33.480 --> 11:34.480
用白话说来

11:34.480 --> 11:35.480
是这个意思

11:35.480 --> 11:36.480
服务器收到你的请求了

11:37.480 --> 11:38.480
我告诉你吧

11:38.480 --> 11:39.480
是这样子的

11:39.480 --> 11:40.480
你要的东西

11:40.480 --> 11:43.480
跟之前是没有变化的

11:43.480 --> 11:45.480
所以我就懒得给你结果了

11:45.480 --> 11:46.480
不给你结果了

11:46.480 --> 11:48.480
你就用之前的吧

11:48.480 --> 11:50.480
如果说你没有之前的结果

11:50.480 --> 11:51.480
那关我好了

11:51.480 --> 11:52.480
我就不管了

11:52.480 --> 11:53.480
就这么个意思

11:53.480 --> 11:54.480
304

11:54.480 --> 11:56.480
它是用来缓存内容的

11:58.480 --> 11:59.480
将来你们学了

11:59.480 --> 12:01.480
这个ATP写上缓存之后

12:01.480 --> 12:03.480
对这一课就了解得非常透彻了

12:03.480 --> 12:04.480
现在了解就行了

12:05.480 --> 12:06.480
我们知道

12:06.480 --> 12:08.480
4开头的就是客户端的错误

12:08.480 --> 12:09.480
对吧

12:09.480 --> 12:10.480
bad request

12:10.480 --> 12:11.480
那么这个东西是什么意思呢

12:11.480 --> 12:12.480
就是你请求的东西

12:12.480 --> 12:14.480
服务器完全无法理解

12:14.480 --> 12:15.480
你给我发的是个啥

12:15.480 --> 12:16.480
听得听不懂

12:16.480 --> 12:18.480
比方说举个例子

12:19.480 --> 12:21.480
这个玩意都是约定好的

12:23.480 --> 12:25.480
它到底给你想象哪一个状态

12:25.480 --> 12:26.480
都是约定好的

12:27.480 --> 12:28.480
比方说举个例子

12:29.480 --> 12:31.480
你发的消息里边

12:31.480 --> 12:33.480
比方说服务器要求

12:33.480 --> 12:36.480
你发的是一个接证格式的数据

12:36.480 --> 12:37.480
让你发过去

12:37.480 --> 12:39.480
比方说你登入吧

12:39.480 --> 12:40.480
发过去一个接证格式

12:40.480 --> 12:42.480
但是你发的不是接证格式

12:42.480 --> 12:43.480
是别的格式

12:43.480 --> 12:44.480
那服务器不认识了

12:44.480 --> 12:45.480
不认识的话

12:45.480 --> 12:46.480
就给你想一个失败

12:47.480 --> 12:48.480
但是我给你说清楚

12:48.480 --> 12:50.480
这个东西都是可以约定的

12:50.480 --> 12:51.480
可以商量的

12:51.480 --> 12:52.480
比方说你们以后

12:52.480 --> 12:53.480
到公司里边又会发现

12:53.480 --> 12:56.480
哪怕我不按照约定给你发

12:56.480 --> 12:58.480
你还是会想一个两百ok

13:01.620 --> 13:03.620
还是给我想一个两百ok

13:03.620 --> 13:04.620
一切正常

13:04.620 --> 13:06.620
那完全有可能的

13:06.620 --> 13:07.620
这些东西都能约定的

13:07.620 --> 13:08.620
都能商量的

13:08.620 --> 13:10.620
这些都是一个

13:11.620 --> 13:13.620
不是硬性的要求

13:13.620 --> 13:15.620
它都是一个建议

13:16.620 --> 13:19.620
403表示服务器拒绝执行

13:20.620 --> 13:22.620
大部分时候是因为权限不够

13:23.620 --> 13:24.620
你给的权限

13:24.620 --> 13:25.620
你这个都没有登入过

13:25.620 --> 13:27.620
你给我让我去修改

13:27.620 --> 13:28.620
用户密码那肯定不行

13:29.620 --> 13:31.620
一般就会给你响应403

13:31.620 --> 13:33.620
当然它也有可能给你想一两百

13:33.620 --> 13:34.620
但是不一定的

13:34.620 --> 13:36.620
程序都是人写出来的

13:37.620 --> 13:39.620
都是人与人之间去规定的

13:40.620 --> 13:42.620
只是这些都是参考建议

13:42.620 --> 13:43.620
404是最常见的

13:43.620 --> 13:44.620
就资源不存在

13:45.620 --> 13:47.620
你的请求稿我知道了

13:47.620 --> 13:48.620
我知道了

13:48.620 --> 13:49.620
收到你的请求了

13:49.620 --> 13:50.620
但是你找的东西根本就没有

13:50.620 --> 13:52.620
我知道根本就没有这个东西了

13:52.620 --> 13:53.620
也有可能以前有

13:53.620 --> 13:54.620
现在没有了

13:54.620 --> 13:55.620
它还不是说

13:55.620 --> 13:56.620
移动到新的地址了

13:56.620 --> 13:57.620
根本就没了现在

13:57.620 --> 13:58.620
它们就是404

13:58.620 --> 14:00.620
那么往往我们去请求一些

14:00.620 --> 14:02.620
不存在的地址的时候

14:03.620 --> 14:04.620
它就会得到一个404

14:08.150 --> 14:09.150
有些地址它不存在

14:11.150 --> 14:12.150
它把一个404页面

14:12.150 --> 14:13.150
还做得挺漂亮的

14:14.150 --> 14:15.150
做得挺漂亮的

14:15.150 --> 14:16.150
然后给你

14:17.150 --> 14:18.150
还给你翻回去了

14:18.150 --> 14:19.150
那么摆度吧

14:25.750 --> 14:26.750
这就是一个404

14:27.750 --> 14:28.750
那么404的页面

14:28.750 --> 14:29.750
它无所谓的页面

14:29.750 --> 14:31.750
服务器都可以做成任何样子

14:31.750 --> 14:32.750
可以加图片

14:32.750 --> 14:33.750
可以加各种东西

14:33.750 --> 14:34.750
无所谓

14:34.750 --> 14:36.750
但它状态码是一个404

14:36.750 --> 14:37.750
再刷新一次

14:38.750 --> 14:39.750
你看这

14:39.750 --> 14:40.750
是不是一个404

14:41.750 --> 14:43.750
一般来说404错误了

14:43.750 --> 14:44.750
都是客户端错误

14:44.750 --> 14:45.750
客户端访问的地址

14:45.750 --> 14:46.750
是有问题的

14:46.750 --> 14:47.750
URL地址

14:47.750 --> 14:48.750
它没有这个东西

14:48.750 --> 14:49.750
我们来看一下状态吧

14:50.750 --> 14:51.750
404 not found

14:52.750 --> 14:53.750
当然了

14:53.750 --> 14:54.750
我们也可以在Poseband里面

14:54.750 --> 14:55.750
都是一样的

14:56.750 --> 14:57.750
发送请求

14:57.750 --> 14:58.750
可以用浏览器

14:58.750 --> 14:59.750
也可以用Poseband

14:59.750 --> 15:00.750
可以用以后里面

15:00.750 --> 15:01.750
学了更多知识之后

15:01.750 --> 15:02.750
你还可以自己写个程序

15:02.750 --> 15:03.750
来发送请求

15:04.750 --> 15:05.750
你看得到的结果

15:05.750 --> 15:07.750
404 not found

15:08.750 --> 15:09.750
就这么意思

15:10.750 --> 15:11.750
再看

15:11.750 --> 15:12.750
500

15:12.750 --> 15:14.750
500的话表示服务器内部错误

15:14.750 --> 15:15.750
那撤挺了

15:15.750 --> 15:16.750
我就不好找例子了

15:16.750 --> 15:17.750
因为我要去找一个

15:17.750 --> 15:18.750
服务器内部错误的例子

15:18.750 --> 15:20.750
我也不知道哪个服务器内部错误

15:20.750 --> 15:21.750
就是你有的时候

15:21.750 --> 15:22.750
你请求过去了

15:22.750 --> 15:24.750
而服务器那边程序爆错了

15:24.750 --> 15:26.750
他都不知道该怎么给你响应了

15:26.750 --> 15:27.750
所以说是他的问题

15:27.750 --> 15:28.750
就是500错误

15:29.750 --> 15:31.750
这就是响应吧

15:31.750 --> 15:32.750
就大概说一下

15:32.750 --> 15:33.750
我现在怎么来看待

15:33.750 --> 15:35.750
你给我的这个请求

15:35.750 --> 15:36.750
到底是没问题的

15:36.750 --> 15:37.750
还是有问题的

15:37.750 --> 15:39.750
大概是什么样的问题

15:39.750 --> 15:40.750
它就是一个标注

15:40.750 --> 15:43.750
它并不是一个硬性要求

15:43.750 --> 15:44.750
有些企业里边

15:44.750 --> 15:45.750
你会看到

15:45.750 --> 15:46.750
它接客文档里面

15:46.750 --> 15:47.750
有一个明确的说明

15:48.750 --> 15:50.750
就是你请求

15:50.750 --> 15:51.750
你无论如何

15:51.750 --> 15:53.750
我都会给你一个两百ok

15:53.750 --> 15:55.750
然后我把到底有没有错误

15:55.750 --> 15:56.750
有什么错误

15:56.750 --> 15:58.750
我给你放到响应题里面

15:58.750 --> 15:59.750
给你描述错误

15:59.750 --> 16:00.750
完全有可能的

16:00.750 --> 16:01.750
而且这个做法

16:01.750 --> 16:03.750
现在还是非常非常常见的

16:03.750 --> 16:05.750
全都是两百ok

16:05.750 --> 16:07.750
这些东西都要商量的

16:07.750 --> 16:08.750
要去看接客文档

16:08.750 --> 16:10.750
它到底是怎么写的

16:13.640 --> 16:16.640
ok 这就是那个响应行

16:16.640 --> 16:18.640
那接下来是响应头

16:19.640 --> 16:21.640
响应头跟请求头一样

16:21.640 --> 16:23.640
它是有很多建值队组成的

16:23.640 --> 16:24.640
我们可以看到

16:24.640 --> 16:26.640
刚才随便去请求一个

16:26.640 --> 16:27.640
都有响应头的

16:27.640 --> 16:28.640
都有一些建值队组成

16:28.640 --> 16:29.640
那么这些建值队里面

16:29.640 --> 16:31.640
其他东西都不是很重要

16:31.640 --> 16:33.640
现在我们主要关注的是

16:33.640 --> 16:35.640
一个叫content type

16:36.640 --> 16:37.640
还记得吗

16:37.640 --> 16:38.640
在请求那一块

16:38.640 --> 16:39.640
请求头里面

16:39.640 --> 16:41.640
是不是也有这个东西

16:41.640 --> 16:42.640
回忆一下

16:42.640 --> 16:44.640
请求头里面的content type

16:44.640 --> 16:46.640
表什么意思

16:46.640 --> 16:48.640
表示的是请求体的格式

16:48.640 --> 16:49.640
是什么格式

16:50.640 --> 16:51.640
那现在明白了吧

16:51.640 --> 16:52.640
那在响应头里面的

16:52.640 --> 16:54.640
content type

16:54.640 --> 16:55.640
什么意思

16:55.640 --> 16:56.640
表示的是

16:56.640 --> 16:58.640
响应体是什么格式的

16:58.640 --> 16:59.640
它到底是什么东西

16:59.640 --> 17:00.640
是你响应的

17:01.640 --> 17:03.640
这里常见的一些

17:03.640 --> 17:05.640
一些写法就是

17:05.640 --> 17:06.640
给你响应的是一个

17:06.640 --> 17:07.640
给你响应的是一个

17:07.640 --> 17:08.640
普通的纯文本

17:08.640 --> 17:10.640
给你响应的是一个ATMEL

17:11.640 --> 17:13.640
给你响应的是一个JS

17:13.640 --> 17:15.640
给你响应的是一个CSS

17:15.640 --> 17:17.640
给你响应的是一个图片

17:17.640 --> 17:19.640
给你响应的是一个附件

17:19.640 --> 17:20.640
如果说浏览器看到这个的话

17:20.640 --> 17:21.640
它一般会下载

17:21.640 --> 17:23.640
它会弹出一个下载框

17:23.640 --> 17:25.640
对吧 让你下载

17:25.640 --> 17:27.640
或者是一些其他的MIM类型

17:27.640 --> 17:29.640
好 咱们来看一下吧

17:29.640 --> 17:31.640
比方说

17:31.640 --> 17:33.640
我们

17:33.640 --> 17:35.640
就看百度吧

17:35.640 --> 17:36.640
百度

17:37.640 --> 17:38.640
百度里面你会看到

17:38.640 --> 17:40.640
它在响应头里面

17:40.640 --> 17:41.640
会告诉你

17:41.640 --> 17:42.640
我给你的内

17:42.640 --> 17:43.640
我服务器给你

17:43.640 --> 17:44.640
两百OK了

17:44.640 --> 17:45.640
给你响应东西了

17:45.640 --> 17:47.640
给你响应的是什么呢

17:47.640 --> 17:49.640
给你响应的是一个页面

17:49.640 --> 17:51.640
就这么一个意思

17:52.640 --> 17:55.640
如果说浏览器看到这个东西

17:55.640 --> 17:56.640
它就会把

17:56.640 --> 17:57.640
响应内容就是

17:57.640 --> 17:59.640
响应题里面的内容

17:59.640 --> 18:01.640
响应题里面就是这个东西

18:01.640 --> 18:02.640
响应题里面的内容

18:02.640 --> 18:05.640
给你用页面来渲染

18:05.640 --> 18:07.640
该运行JS就运行JS

18:07.640 --> 18:09.640
就这么一个意思

18:09.640 --> 18:11.640
好 这是

18:11.640 --> 18:12.640
网页的情况

18:12.640 --> 18:14.640
那我们看一下图片吧

18:14.640 --> 18:16.640
我看一下里面有什么图片

18:16.640 --> 18:18.640
随便当着图片

18:22.980 --> 18:23.980
就这个

18:23.980 --> 18:24.980
这里有图片地址

18:24.980 --> 18:26.980
我们把一个图片地址复制一下

18:26.980 --> 18:29.800
你看这

18:29.800 --> 18:30.800
是不是浏览器可以把它

18:30.800 --> 18:31.800
渲染成图片

18:31.800 --> 18:32.800
浏览器它怎么知道

18:32.800 --> 18:33.800
这是一张图片呢

18:33.800 --> 18:35.800
浏览器没有那么聪明

18:35.800 --> 18:36.800
它是怎么知道

18:36.800 --> 18:37.800
这是一张图片

18:37.800 --> 18:38.800
它没有把它当成页面

18:38.800 --> 18:39.800
来显示

18:39.800 --> 18:40.800
它把它当成图片来显示的

18:40.800 --> 18:42.800
是因为这样的

18:42.800 --> 18:44.800
再来刷新一下这个网络

18:45.800 --> 18:47.800
请求这个地址

18:47.800 --> 18:49.800
不是说判断什么厚罪名

18:49.800 --> 18:51.800
哪有厚罪名啊 这里

18:51.800 --> 18:53.800
不要去瞎想

18:53.800 --> 18:54.800
它是什么回事呢

18:54.800 --> 18:56.800
它是看那个响应的头里边

18:56.800 --> 18:58.800
这个content type 你看到没

18:58.800 --> 18:59.800
是个什么

18:59.800 --> 19:00.800
是一个图片

19:00.800 --> 19:02.800
图片的格式是webp

19:02.800 --> 19:04.800
webp是一个互联网的图片格式

19:04.800 --> 19:06.800
现在也是比较常见的

19:06.800 --> 19:07.800
像你们好多手机拍出来

19:07.800 --> 19:09.800
就是webp的格式

19:09.800 --> 19:10.800
好 那么这就是

19:10.800 --> 19:12.800
浏览器看到这个响应头

19:12.800 --> 19:14.800
原来浏览器告诉我了

19:14.800 --> 19:15.800
告诉我它是一个图片

19:15.800 --> 19:16.800
它不是网页

19:16.800 --> 19:18.800
所以说我在处理这个

19:18.800 --> 19:19.800
响应体的时候

19:19.800 --> 19:21.800
我就把它当成图片来显示

19:21.800 --> 19:22.800
就这么简单

19:22.800 --> 19:23.800
我们来看一下

19:23.800 --> 19:25.800
Pose面里边也是一样的

19:26.800 --> 19:27.800
发送 你看

19:27.800 --> 19:29.800
Pose面它也比较智能

19:29.800 --> 19:31.800
它也是能够把图片

19:31.800 --> 19:32.800
渲染出来的

19:32.800 --> 19:33.800
但是它怎么知道

19:33.800 --> 19:34.800
这是一个图片

19:34.800 --> 19:35.800
因为它这里也是一样

19:36.800 --> 19:37.800
利用什么样的东西

19:37.800 --> 19:38.800
去请求

19:38.800 --> 19:40.800
请求都无所谓

19:41.800 --> 19:43.800
这是一个JPEG

19:43.800 --> 19:44.800
JPEG的图片

19:45.800 --> 19:46.800
又想问了

19:47.800 --> 19:48.800
为什么浏览器那边

19:48.800 --> 19:49.800
就是webp

19:49.800 --> 19:50.800
这边是JPEG

19:50.800 --> 19:52.800
那是看浮觸器程序啥写的

19:52.800 --> 19:53.800
浮觸器程序可以根据

19:53.800 --> 19:55.800
你一些请求的端

19:55.800 --> 19:57.800
请求的客户端

19:57.800 --> 19:58.800
那么可能给你

19:58.800 --> 19:59.800
想一不同的东西

20:01.800 --> 20:03.800
好 这是这种情况

20:03.800 --> 20:04.800
比方说再来吧

20:04.800 --> 20:05.800
再来看一下CSS

20:07.800 --> 20:08.800
就随便找一个

20:09.800 --> 20:10.800
百度的CSS吧

20:18.250 --> 20:19.250
下一个

20:25.720 --> 20:26.720
它没有CSS

20:26.720 --> 20:27.720
好 淘宝吧

20:35.190 --> 20:49.320
好 这里有个CSS

20:49.320 --> 20:51.320
OK 那么这是CSS

20:51.320 --> 20:53.320
好 我们把CSS

20:54.320 --> 20:55.320
打开检查

20:55.320 --> 20:57.320
看一下浏览器的网络通信

20:57.320 --> 20:58.320
刷新

20:59.320 --> 21:00.320
浏览器它怎么知道

21:00.320 --> 21:01.320
这个玩意是CSS

21:01.320 --> 21:03.320
不是看这个后追名

21:03.320 --> 21:05.320
跟这个玩意没一点关系都没有

21:05.320 --> 21:06.320
看的是什么呢

21:06.320 --> 21:08.320
看的是想用头里边

21:08.320 --> 21:10.320
一个叫做content type

21:11.320 --> 21:12.320
那么浮觸器告诉它了

21:12.320 --> 21:13.320
告诉你乱七

21:13.320 --> 21:14.320
这是一个CSS

21:14.320 --> 21:15.320
于是呢

21:15.320 --> 21:16.320
它就把它当成

21:16.320 --> 21:18.320
CSS内容来读取

21:18.320 --> 21:20.320
对吧 把它当成样式来处理

21:20.320 --> 21:21.320
然后介石是一样的

21:21.320 --> 21:23.320
介石它这里就会

21:23.320 --> 21:25.320
显示的是application

21:25.320 --> 21:26.320
java script

21:26.320 --> 21:27.320
就这么个意思

21:27.320 --> 21:28.320
这就是浮觸器

21:28.320 --> 21:29.320
通过content type

21:29.320 --> 21:31.320
告诉客户端

21:32.320 --> 21:34.320
我给你的到底是个啥

21:34.320 --> 21:35.320
要如何来处理

21:35.320 --> 21:38.630
好 接下来就是显应体了

21:38.630 --> 21:39.630
显应体已经没什么好说的了

21:39.630 --> 21:41.630
就是显应的主题内容

21:41.630 --> 21:42.630
图片的话

21:42.630 --> 21:43.630
显应体就是二镜子数据

21:43.630 --> 21:45.630
页面的话就是文本数据

21:45.630 --> 21:46.630
你看一下吧

21:51.140 --> 21:57.580
好 运行

21:57.580 --> 21:59.580
那么这就是淘宝

21:59.580 --> 22:00.580
对吧

22:00.580 --> 22:01.580
你看

22:01.580 --> 22:02.580
这就是显应体

22:02.580 --> 22:04.580
我这里把它pretty的一下

22:04.580 --> 22:05.580
把它看的好看一点

22:05.580 --> 22:07.580
这里肉是原式格式

22:07.580 --> 22:09.580
原式的显应体格式

22:09.580 --> 22:11.580
原式的格式就是

22:11.580 --> 22:12.580
这个样子

22:14.580 --> 22:15.580
看的不是很好看

22:15.580 --> 22:17.580
把它稍微格式画一下

22:17.580 --> 22:18.580
Pose麦麦有这个功能

22:18.580 --> 22:19.580
边缘你查看

22:19.580 --> 22:20.580
那么这里可以看到

22:20.580 --> 22:21.580
就是一个PTML

22:22.580 --> 22:24.580
其实你会发现

22:24.580 --> 22:25.580
有了现在的知识之后

22:25.580 --> 22:26.580
我现在问同学没个问题

22:26.580 --> 22:28.580
你好好想一想这个问题

22:29.580 --> 22:30.580
我不要浏览

22:30.580 --> 22:31.580
理论上

22:31.580 --> 22:33.580
我不要浏览起

22:34.580 --> 22:36.580
我能不能

22:36.580 --> 22:38.580
上网看页面

22:39.580 --> 22:40.580
能不能

22:40.580 --> 22:41.580
我不安装浏览器

22:41.580 --> 22:42.580
不用什么谷歌浏览器

22:42.580 --> 22:43.580
不用IG

22:43.580 --> 22:44.580
不用任何浏览器

22:44.580 --> 22:45.580
能不能 可以啊

22:46.580 --> 22:48.580
我标准我现在不用浏览器了

22:48.580 --> 22:50.580
我就用Pose麦我都可以上网

22:51.580 --> 22:52.580
怎么上网呢

22:52.580 --> 22:53.580
我请求这个地址

22:53.580 --> 22:55.580
我要是上淘宝网

22:55.580 --> 22:56.580
我就请求这个地址

22:56.580 --> 22:57.580
得到的是什么

22:57.580 --> 22:58.580
是一个ATM

22:58.580 --> 22:59.580
显应体在这

23:00.580 --> 23:01.580
ATM我看到

23:01.580 --> 23:03.580
我要老在这边去想

23:03.580 --> 23:05.580
这个网站的标题是这个

23:05.580 --> 23:07.580
得到了这些东西

23:07.580 --> 23:09.580
这里有一些

23:10.580 --> 23:11.580
下边

23:12.580 --> 23:14.580
找找找找

23:16.580 --> 23:17.580
不是很好找

23:17.580 --> 23:18.580
这边有很多的样式

23:18.580 --> 23:20.580
然后我在老在里面想

23:20.580 --> 23:21.580
这个样式它应该

23:21.580 --> 23:23.580
把字体还有位置

23:23.580 --> 23:24.580
应该变成什么样子

23:24.580 --> 23:25.580
全在里面去想

23:25.580 --> 23:27.580
然后这里还有一些

23:27.580 --> 23:28.580
我发现了

23:28.580 --> 23:29.580
这里有个CSS

23:30.580 --> 23:31.580
怎么样呢

23:31.580 --> 23:32.580
我就再发一个请求

23:32.580 --> 23:33.580
把CSS地址一复制

23:36.540 --> 23:37.540
打开这

23:37.540 --> 23:38.540
把地址一复制

23:38.540 --> 23:39.540
然后前面加上一个

23:39.540 --> 23:40.540
GDPS

23:40.540 --> 23:41.540
ZW列

23:41.540 --> 23:42.540
淘宝

23:48.020 --> 23:49.020
前面加上这个

23:51.020 --> 23:52.020
加上一个协议

23:52.020 --> 23:53.020
然后通过这个地址

23:53.020 --> 23:54.020
我是不是可以拿到一个

23:54.020 --> 23:55.020
CSS

23:56.020 --> 23:57.020
对吧

23:57.020 --> 23:58.020
就拿到CSS

23:58.020 --> 23:59.020
我就读这个CSS

23:59.020 --> 24:00.020
所以很恶心对吧

24:00.020 --> 24:01.020
但是理论上可不可以

24:01.020 --> 24:02.020
也可以

24:03.020 --> 24:04.020
这个CSS它就把那个

24:05.020 --> 24:06.020
设置了什么

24:06.020 --> 24:08.020
设置了有一个Icon放车

24:08.020 --> 24:09.020
设置了很多字体大小

24:09.020 --> 24:10.020
设置了乱七八的东西

24:10.020 --> 24:11.020
我就一个个读

24:11.020 --> 24:12.020
读完了过后我继续往后看

24:12.020 --> 24:13.020
这里有一个CSS

24:13.020 --> 24:15.020
我又发出一个请求

24:16.020 --> 24:17.020
我又发出一个请求

24:18.020 --> 24:19.020
GDPS

24:20.020 --> 24:22.340
那么读这个CSS

24:23.340 --> 24:24.340
所以我还是可以用

24:24.340 --> 24:25.340
人工的方式

24:25.340 --> 24:26.340
遇到GSS

24:26.340 --> 24:27.340
我就执行GSS

24:27.340 --> 24:28.340
我要投到里面执行吗

24:29.340 --> 24:30.340
用人工的方式

24:30.340 --> 24:31.340
是不是也可以读到网页

24:31.340 --> 24:32.340
包括这个网页里边

24:32.340 --> 24:33.340
有很多这些东西

24:33.340 --> 24:34.340
我去想象一下

24:34.340 --> 24:35.340
这里是个按钮

24:35.340 --> 24:36.340
是不是可以

24:37.340 --> 24:38.340
理论方式可以的

24:38.340 --> 24:39.340
对吧

24:39.340 --> 24:40.340
但是这样子读起来

24:40.340 --> 24:41.340
是不是太恶心

24:41.340 --> 24:42.340
太反人类了

24:43.340 --> 24:44.340
所以说浏览器

24:44.340 --> 24:45.340
他做的什么事

24:45.340 --> 24:47.340
他就帮你来做这个事

24:48.340 --> 24:49.340
他帮你去

24:49.340 --> 24:50.340
你在浏览器地址

24:50.340 --> 24:51.340
来输入这个

24:51.340 --> 24:52.340
他帮你去请求服务器

24:53.340 --> 24:54.340
服务器拿到一个结果

24:54.340 --> 24:55.340
拿到什么结果

24:56.340 --> 24:57.340
一看

24:57.340 --> 24:58.340
拿到的是一个

24:58.340 --> 24:59.340
页面

24:59.340 --> 25:00.340
对吧

25:00.340 --> 25:02.340
编码方式是UTF-8

25:02.340 --> 25:03.340
那么浏览器

25:03.340 --> 25:04.340
就把页面

25:04.340 --> 25:06.340
开始进行渲染

25:06.340 --> 25:07.340
从上到下进行解析

25:07.340 --> 25:09.340
当解析到CSS的时候

25:09.340 --> 25:10.340
又给你发出一个

25:10.340 --> 25:11.340
CSS请求

25:11.340 --> 25:13.340
去拿他的央视文件

25:13.340 --> 25:14.340
央视代码

25:14.340 --> 25:15.340
又遇到一个CSS

25:15.340 --> 25:17.340
又去拿CSS央视代码

25:17.340 --> 25:18.340
遇到GSS

25:18.340 --> 25:19.340
又发出请求

25:19.340 --> 25:20.340
去拿GSS代码

25:20.340 --> 25:21.340
遇到图片

25:21.340 --> 25:22.340
我又去发请求

25:22.340 --> 25:23.340
去拿图片

25:23.340 --> 25:24.340
比方说这里边

25:24.340 --> 25:25.340
我们查一查

25:25.340 --> 25:28.420
又没有图片

25:28.420 --> 25:29.420
我发现这里有个图片

25:29.420 --> 25:30.420
对吧

25:30.420 --> 25:31.420
OK

25:31.420 --> 25:32.420
那么我们就把这个图片

25:32.420 --> 25:33.420
又发出一个请求

25:33.420 --> 25:34.420
去拿这个图片

25:34.420 --> 25:40.890
这图片

25:41.890 --> 25:42.890
这图片

25:42.890 --> 25:43.890
应该是一个相处的

25:43.890 --> 25:44.890
一个相处的

25:44.890 --> 25:45.890
一个非常小的图

25:46.890 --> 25:47.890
然后呢

25:47.890 --> 25:48.890
我们看一下

25:48.890 --> 25:49.890
还没别的图片

25:49.890 --> 25:50.890
好像这里看不到了

25:50.890 --> 25:52.890
就这么个意思

25:52.890 --> 25:53.890
就是说

25:53.890 --> 25:54.890
浏览器

25:54.890 --> 25:55.890
他就来帮你去做这个事

25:55.890 --> 25:56.890
你这个事

25:56.890 --> 25:58.890
其实完全可以手动做的

25:58.890 --> 25:59.890
因此我们浏览器

25:59.890 --> 26:02.890
有一个名字叫做

26:02.890 --> 26:04.890
用户代理

26:04.890 --> 26:07.890
它的单词叫做User agent

26:07.890 --> 26:08.890
为什么我们有的时候

26:08.890 --> 26:09.890
看一下浏览器的

26:09.890 --> 26:10.890
默认央视表

26:10.890 --> 26:11.890
它这里显

26:11.890 --> 26:12.890
怎么显示的

26:12.890 --> 26:14.890
浏览器的默认央视表

26:14.890 --> 26:22.850
它用的单词叫做User agent

26:22.850 --> 26:23.850
Style Sheet

26:23.850 --> 26:25.850
表示用户代理样式表

26:25.850 --> 26:27.850
什么叫用户代理

26:27.850 --> 26:29.850
浏览器就是用户代理

26:29.850 --> 26:30.850
就是这件事

26:30.850 --> 26:32.850
本身用户自己就可以做

26:32.850 --> 26:34.850
但是做起来太反人类了

26:34.850 --> 26:36.850
所以浏览器帮你做了

26:36.850 --> 26:37.850
对吧

26:37.850 --> 26:38.850
这个就解释通了

26:38.850 --> 26:39.850
为什么叫用户代理

26:39.850 --> 26:40.850
帮着用户

26:40.850 --> 26:41.850
代理用户去做这些事

26:41.850 --> 26:43.850
这也可以解释通了

26:43.850 --> 26:44.850
为什么我去

26:44.850 --> 26:45.850
请求一个页面的时候

26:45.850 --> 26:47.850
它最终发出了这么多请求

26:47.850 --> 26:48.850
为什么呢

26:48.850 --> 26:49.850
它就是这个原因

26:49.850 --> 26:51.850
我去请求淘宝网

26:51.850 --> 26:52.850
拿到的是什么呢

26:52.850 --> 26:54.850
拿到的是一个淘宝网的页面

26:54.850 --> 26:55.850
所以拿到淘宝网的页面

26:55.850 --> 26:57.850
但是这里面有一些CSS

26:57.850 --> 26:58.850
你看用外链接

26:58.850 --> 26:59.850
链接到别的CSS

26:59.850 --> 27:00.850
链接到别的GS

27:00.850 --> 27:03.850
链接到别的图片

27:03.850 --> 27:04.850
那么这个时候

27:04.850 --> 27:06.850
它就会接着发出CSS的请求

27:06.850 --> 27:08.850
发出GS的请求

27:08.850 --> 27:10.850
发出图片的请求

27:10.850 --> 27:12.850
发出图片的请求

27:12.850 --> 27:14.850
这里还可以分类

27:14.850 --> 27:16.850
看一下这里是

27:17.850 --> 27:20.850
Doc表示针对页面的请求

27:20.850 --> 27:23.850
这个是针对字体的请求

27:23.850 --> 27:25.850
针对CSS的请求

27:25.850 --> 27:26.850
针对GS的请求

27:26.850 --> 27:28.850
针对图片的请求

27:28.850 --> 27:30.850
可以在这里进行分类的

27:30.850 --> 27:32.850
懂了意思吗

27:32.850 --> 27:34.850
这就是咱们两节课

27:34.850 --> 27:35.850
讲完了AGP

27:35.850 --> 27:37.850
里面到底是什么东西

27:37.850 --> 27:38.850
总结来说

27:38.850 --> 27:39.850
其实它很简单的

27:39.850 --> 27:40.850
你看我们

27:40.850 --> 27:42.850
其实我

27:42.850 --> 27:44.850
再去想网络请求的时候

27:44.850 --> 27:46.850
我不会去想那么多的戏

27:46.850 --> 27:47.850
我就想两个想

27:47.850 --> 27:48.850
一个东西发过去了

27:48.850 --> 27:50.850
一个文本发过去了

27:50.850 --> 27:51.850
航头题

27:51.850 --> 27:53.850
然后一个东西过来了

27:53.850 --> 27:54.850
航头题

27:54.850 --> 27:57.850
这就是它的基本逻辑

27:57.850 --> 27:58.850
那么接下来就是作业

27:58.850 --> 27:59.850
可能朋友们现在呢

27:59.850 --> 28:01.850
很多地方还是很模糊

28:01.850 --> 28:02.850
很晕

28:02.850 --> 28:03.850
能完成作业

28:03.850 --> 28:05.850
就OK

28:05.850 --> 28:06.850
第一个作业

28:06.850 --> 28:08.850
让你用Pose Man

28:08.850 --> 28:11.850
向这个地址发出一个Gate请求

28:11.850 --> 28:17.430
你发呗

28:17.430 --> 28:19.430
可以关闭其它的

28:19.430 --> 28:21.430
标签页

28:21.430 --> 28:23.430
发

28:23.430 --> 28:25.430
发到过后问你

28:25.430 --> 28:27.430
状态码是什么

28:27.430 --> 28:28.430
它表达了什么含义

28:28.430 --> 28:30.430
这个你要能说出来

28:30.430 --> 28:31.430
然后状态码是它

28:31.430 --> 28:33.430
要知道在哪里看

28:33.430 --> 28:35.430
状态码是301

28:35.430 --> 28:37.430
表达了什么含义呢

28:37.430 --> 28:39.430
表达了永久重定向

28:39.430 --> 28:41.430
表达这个含义

28:41.430 --> 28:42.430
那么永久重定向到哪呢

28:42.430 --> 28:43.430
你要知道

28:43.430 --> 28:45.430
在头里边Location

28:45.430 --> 28:50.190
它重定向到这个位置了

28:50.190 --> 28:51.190
那么这里就问你

28:51.190 --> 28:52.190
Location的指示

28:52.190 --> 28:53.190
表达什么含义

28:53.190 --> 28:54.190
好 第二道题

28:54.190 --> 28:55.190
用Pose Man

28:55.190 --> 28:58.190
向这个地址发出一个Gate请求

28:58.190 --> 28:59.190
你发呗

28:59.190 --> 29:03.040
好 发了

29:03.040 --> 29:05.040
然后它问你

29:05.040 --> 29:08.040
想用头中的Counting Time

29:08.040 --> 29:09.040
它的指示什么

29:09.040 --> 29:11.040
表达了什么含义

29:11.040 --> 29:12.040
那就看呗

29:12.040 --> 29:13.040
就是我这期题

29:13.040 --> 29:16.040
都是实超性值的

29:16.040 --> 29:17.040
你要知道

29:17.040 --> 29:18.040
该怎么去操作

29:18.040 --> 29:19.040
该怎么去看

29:19.040 --> 29:21.040
那么想用码是200 OK

29:21.040 --> 29:22.040
那这个不用管

29:22.040 --> 29:23.040
然后看想用头里边

29:23.040 --> 29:24.040
一个Counting Time

29:24.040 --> 29:25.040
你要能找得到

29:25.040 --> 29:27.040
你要知道这个工具里边

29:27.040 --> 29:28.040
哪里去找

29:28.040 --> 29:29.040
在这

29:29.040 --> 29:30.040
它的指示什么

29:30.040 --> 29:31.040
Tags ATM

29:31.040 --> 29:33.040
然后Carsage UTF-8

29:33.040 --> 29:34.040
Bmx-8

29:34.040 --> 29:35.040
什么意思呢

29:35.040 --> 29:37.040
表示服务器给你想用的是

29:37.040 --> 29:39.040
一个页面

29:39.040 --> 29:40.040
页面的编码方式

29:40.040 --> 29:41.040
是UTF-8

29:41.040 --> 29:43.040
就这么一个意思

29:43.040 --> 29:44.040
好 第三道题

29:44.040 --> 29:46.040
那就更加贴近实战了

29:46.040 --> 29:48.040
约读注册接口文档

29:48.040 --> 29:50.040
让你约读这个文档

29:50.040 --> 29:51.040
因为我们的最终目标

29:51.040 --> 29:54.040
就是要读文档

29:54.040 --> 29:56.040
使用Posted Man

29:56.040 --> 29:57.040
完成下面的作业

29:57.040 --> 29:59.040
这是一个注册接口

29:59.040 --> 30:01.040
注册接口在用户接口里边

30:01.040 --> 30:02.040
所以说我们在Posted Man里边

30:02.040 --> 30:04.040
在这里去新建一个文件夹吧

30:04.040 --> 30:06.040
ADD Folder

30:06.040 --> 30:08.040
给它取个名字

30:08.040 --> 30:11.040
叫做用户接口

30:11.040 --> 30:13.040
可以跟接口文档一样

30:13.040 --> 30:16.480
把它拖上去

30:16.480 --> 30:17.480
好 然后在这里边

30:17.480 --> 30:18.480
新建一个请求

30:18.480 --> 30:20.480
给它取个名字

30:20.480 --> 30:22.480
叫做注册

30:22.480 --> 30:26.110
注册请求

30:26.110 --> 30:28.110
它首先是一个Posted请求

30:28.110 --> 30:30.110
你肯定要把这个改一下

30:30.110 --> 30:31.110
Posted

30:31.110 --> 30:34.110
然后它的请求地址是这个

30:34.110 --> 30:36.110
那么我们这里前面

30:36.110 --> 30:38.110
加上一个基地址

30:38.110 --> 30:40.110
加上这个

30:40.110 --> 30:41.110
Posted请求请求这个

30:41.110 --> 30:42.110
注册嘛

30:42.110 --> 30:44.110
然后它下面

30:44.110 --> 30:45.110
它会告诉你

30:45.110 --> 30:46.110
如果说想应的话

30:46.110 --> 30:47.110
它会有哪些情况

30:47.110 --> 30:49.110
想应它可能是

30:49.110 --> 30:51.110
这么一个对象

30:51.110 --> 30:52.110
给你告诉你扣的

30:52.110 --> 30:54.110
注意 这个不是想应码

30:54.110 --> 30:55.110
这个不是想应码

30:55.110 --> 30:57.110
它是给你想应题里边的东西

30:57.110 --> 30:59.110
那么这里的想应码在哪呢

30:59.110 --> 31:03.110
在这好像是微信里边

31:03.110 --> 31:08.580
好像没写吗

31:08.580 --> 31:09.580
没写

31:09.580 --> 31:10.580
那我这里就

31:10.580 --> 31:12.580
统一说一下吧

31:12.580 --> 31:14.580
就是我们所有的接口的

31:14.580 --> 31:16.580
状态码全是200

31:16.580 --> 31:18.580
都是200

31:18.580 --> 31:20.580
这是我们按照现阶段

31:20.580 --> 31:21.580
很多公司的做法

31:21.580 --> 31:23.580
想应的状态码全是200

31:23.580 --> 31:25.580
那么到底如果说有错误

31:25.580 --> 31:26.580
我还是给你写

31:26.580 --> 31:27.580
想应的是200

31:27.580 --> 31:28.580
只不过呢

31:28.580 --> 31:30.580
我是在请求题里边告诉你错误

31:30.580 --> 31:32.580
而不是在想应码那一块

31:32.580 --> 31:33.580
以后我们就看到了

31:33.580 --> 31:35.580
好 那么这是我们想应的消息

31:35.580 --> 31:36.580
有哪些情况

31:36.580 --> 31:38.580
我这给你写了一下

31:38.580 --> 31:39.580
然后接下来请求

31:39.580 --> 31:40.580
该怎么发请求

31:40.580 --> 31:41.580
它告诉你

31:41.580 --> 31:43.580
content type必须是这个

31:43.580 --> 31:44.580
那么我们这里

31:44.580 --> 31:45.580
可以写一个header

31:45.580 --> 31:47.580
请求的请求头里边

31:47.580 --> 31:49.580
它写一个content type

31:49.580 --> 31:50.580
当然你也可以不写

31:50.580 --> 31:51.580
因为这个玩意是可以

31:51.580 --> 31:53.580
posed面自动加的

31:53.580 --> 31:55.580
那么发什么消息

31:55.580 --> 31:56.580
请求消息呢

31:56.580 --> 31:58.580
就请求题发什么呢

31:58.580 --> 31:59.580
它因为它是接触格式

31:59.580 --> 32:01.580
所以我们找到请求题

32:01.580 --> 32:02.580
保底

32:02.580 --> 32:03.580
把它调成若

32:03.580 --> 32:05.580
这里选择接触

32:05.580 --> 32:06.580
接触格式

32:06.580 --> 32:07.580
就是你要怎么知道

32:07.580 --> 32:09.580
怎么阅读接口文档

32:09.580 --> 32:10.580
你要知道

32:10.580 --> 32:12.580
怎么去通过阅读接口文档

32:12.580 --> 32:13.580
能够使用posed面

32:13.580 --> 32:16.580
来进行调试接口

32:16.580 --> 32:18.580
这是非常非常重要的

32:18.580 --> 32:19.580
你把这个东西

32:19.580 --> 32:20.580
能搞定了

32:20.580 --> 32:21.580
其实你网络课

32:21.580 --> 32:23.580
你已经缺了百分之七八十了

32:23.580 --> 32:25.580
最核心的就来说

32:25.580 --> 32:26.580
后边写代码

32:26.580 --> 32:27.580
其实非常简单

32:27.580 --> 32:28.580
在前面条件

32:28.580 --> 32:30.580
你要把这些东西搞清楚

32:30.580 --> 32:31.580
然后呢

32:31.580 --> 32:32.580
body

32:32.580 --> 32:34.580
有三个属性对吧

32:34.580 --> 32:35.580
注册的时候

32:35.580 --> 32:36.580
要填一个账号

32:36.580 --> 32:38.580
你称和密码

32:38.580 --> 32:39.580
那么你就写个对象

32:39.580 --> 32:40.580
发过去

32:40.580 --> 32:41.580
三个属性

32:41.580 --> 32:42.580
login id

32:42.580 --> 32:44.580
我要注册的账号

32:44.580 --> 32:45.580
我

32:46.580 --> 32:48.580
比比截

32:48.580 --> 32:50.580
然后呢注册的

32:50.580 --> 32:51.580
leaknet

32:51.580 --> 32:52.580
你称

32:52.580 --> 32:54.580
leaknet

32:54.580 --> 32:55.580
然后

32:55.580 --> 32:56.580
发放机

32:58.580 --> 33:00.580
然后是login password

33:01.580 --> 33:03.580
表示密码

33:03.580 --> 33:04.580
密码的话

33:04.580 --> 33:05.580
就一二三一二三

33:06.580 --> 33:08.580
好就发送过去

33:08.580 --> 33:09.580
我们来试一试

33:09.580 --> 33:10.580
send

33:10.580 --> 33:11.580
得到什么

33:11.580 --> 33:13.580
两百ok

33:13.580 --> 33:14.580
然后呢

33:14.580 --> 33:15.580
现在我们有没有注册成功呢

33:15.580 --> 33:16.580
你看这

33:17.580 --> 33:18.580
如果说注册成功了

33:18.580 --> 33:19.580
他就会给你这么一个

33:19.580 --> 33:20.580
消息格式

33:20.580 --> 33:21.580
扣的理由表示

33:21.580 --> 33:22.580
错误消息码

33:22.580 --> 33:23.580
你们表示没有错误

33:23.580 --> 33:24.580
有些同学说

33:24.580 --> 33:25.580
那跟那个我刚才讲的

33:25.580 --> 33:26.580
那个状态码

33:26.580 --> 33:27.580
是不是不一样啊

33:27.580 --> 33:28.580
两百才是ok吗

33:28.580 --> 33:29.580
他为什么是零是ok

33:29.580 --> 33:34.210
这个玩意是在享用体力边

33:35.210 --> 33:36.210
看清楚啊

33:36.210 --> 33:38.210
它是在享用体力边

33:38.210 --> 33:40.210
它不是状态码

33:40.210 --> 33:42.210
状态码是两百没问题

33:42.210 --> 33:44.210
这是现阶段

33:44.210 --> 33:46.210
很多公司他接口的做法

33:46.210 --> 33:47.210
都是这样做的

33:48.210 --> 33:49.210
就是我状态码

33:49.210 --> 33:50.210
永远保持两百

33:51.210 --> 33:52.210
然后在这里边

33:52.210 --> 33:54.210
给你划分消息

33:54.210 --> 33:57.210
消息不同的消息情况

33:58.210 --> 33:59.210
那么这个零

33:59.210 --> 34:00.210
表示说没有错误

34:00.210 --> 34:02.210
没是几空置无串

34:02.210 --> 34:03.210
表示

34:03.210 --> 34:05.210
没有错误消息

34:05.210 --> 34:07.210
那么都是相关的数据

34:07.210 --> 34:08.210
就是你注册成功了

34:08.210 --> 34:09.210
我告诉你

34:09.210 --> 34:10.210
你注册成功了

34:10.210 --> 34:11.210
用户的编号是这个

34:11.210 --> 34:12.210
账号是这个

34:12.210 --> 34:13.210
你称是这个

34:14.210 --> 34:15.210
注册成功了

34:15.210 --> 34:16.210
这就注册成功了

34:16.210 --> 34:17.210
有界面吗

34:17.210 --> 34:18.210
没有界面

34:18.210 --> 34:19.210
现在是存数据

34:19.210 --> 34:20.210
网络通信

34:21.210 --> 34:22.210
但是你都是

34:22.210 --> 34:23.210
学习网络的前提条件

34:23.210 --> 34:24.210
你首先要理解

34:24.210 --> 34:25.210
存数据的通信

34:26.210 --> 34:27.210
好

34:27.210 --> 34:28.210
比方说我们再来

34:28.210 --> 34:29.210
再来发送一次请求

34:29.210 --> 34:30.210
你就会发现

34:30.210 --> 34:32.210
消息码还是两百

34:32.210 --> 34:33.210
但是呢这里

34:33.210 --> 34:34.210
有了一个错误

34:34.210 --> 34:35.210
四百

34:36.210 --> 34:37.210
就这个玩意你都可以不用去看

34:37.210 --> 34:39.210
因为它永远都是两百

34:40.210 --> 34:41.210
再说一次

34:41.210 --> 34:43.210
这个玩意你不能学死了

34:43.210 --> 34:44.210
你不能说

34:44.210 --> 34:45.210
袁老师说

34:45.210 --> 34:46.210
这个消息码永远是两百

34:46.210 --> 34:47.210
以后到公司

34:47.210 --> 34:48.210
我们都按照这个处理

34:48.210 --> 34:49.210
要看文档

34:49.210 --> 34:50.210
我这个文档

34:50.210 --> 34:51.210
倒是没有明确说明

34:51.210 --> 34:53.210
我就在课堂上说了

34:53.210 --> 34:54.210
公司里面文档

34:54.210 --> 34:55.210
它会给你写清楚

34:56.210 --> 34:57.210
这个状态码

34:57.210 --> 34:58.210
如果说它永远是两百的话

34:58.210 --> 34:59.210
会给你写得清清楚楚

34:59.210 --> 35:00.210
我们这个所有接口

35:00.210 --> 35:01.210
得到了全是两百

35:02.210 --> 35:03.210
状态码

35:04.210 --> 35:05.210
我们的错误

35:05.210 --> 35:06.210
正确

35:06.210 --> 35:07.210
各种消息

35:07.210 --> 35:08.210
我们是在

35:08.210 --> 35:09.210
请求体里面进行控制的

35:09.210 --> 35:10.210
它会跟你说的清清楚楚

35:11.210 --> 35:12.210
有的公司

35:12.210 --> 35:13.210
它可能这个地方

35:13.210 --> 35:15.210
会跟这个地方保持一致

35:15.210 --> 35:16.210
这个说不准的

35:16.210 --> 35:19.210
要看那个公司里面是怎么规定的

35:19.210 --> 35:20.210
其实就是前端和后端

35:20.210 --> 35:21.210
是怎么商量的

35:21.210 --> 35:23.210
这些东西都可以商量的

35:23.210 --> 35:24.210
因为都是

35:24.210 --> 35:25.210
前端程序是人写的

35:25.210 --> 35:27.210
后端程序也是人写的

35:27.210 --> 35:28.210
都可以商量

35:28.210 --> 35:29.210
都可以改的

35:29.210 --> 35:30.210
好

35:30.210 --> 35:31.210
那么都是试板

35:31.210 --> 35:32.210
表示账号已存在

35:32.210 --> 35:33.210
都错过消息

35:33.210 --> 35:34.210
data就是那

35:34.210 --> 35:36.210
表示你没有注册成功

35:37.210 --> 35:38.210
注册成功了

35:38.210 --> 35:39.210
这个就不是那

35:39.210 --> 35:40.210
就这么个意思

35:40.210 --> 35:41.210
通过这个结构

35:41.210 --> 35:42.210
我们是不是可以了解注册

35:42.210 --> 35:43.210
是怎么回事

35:43.210 --> 35:44.210
就是传递的数据

35:44.210 --> 35:45.210
存数据

35:46.210 --> 35:47.210
懂了意思吗

35:47.210 --> 35:48.210
就这么的意思

35:48.210 --> 35:49.210
好

35:49.210 --> 35:50.210
那么一个

35:50.210 --> 35:51.210
保存一下

35:51.210 --> 35:52.210
保存一下

35:52.210 --> 35:53.210
那么这里就把

35:53.210 --> 35:54.210
请求保存下来

35:54.210 --> 35:55.210
将来我们可以在这里

35:55.210 --> 35:57.210
重新来验证一下

35:57.210 --> 35:58.210
比方说在保底里

35:58.210 --> 35:59.210
把我们站来

35:59.210 --> 36:01.210
我给他去掉楼顶id

36:01.210 --> 36:02.210
发送请求

36:02.210 --> 36:03.210
他告诉你

36:04.210 --> 36:05.210
验证错误

36:05.210 --> 36:07.210
试板往往我们

36:07.210 --> 36:08.210
在我们那个结构文档里面

36:08.210 --> 36:09.210
表示验证错误

36:10.210 --> 36:12.210
错误消息是楼顶idrequired

36:12.210 --> 36:14.210
你需要写个楼顶id

36:14.210 --> 36:15.210
但是你没有写

36:15.210 --> 36:16.210
我给他写上吧

36:16.210 --> 36:17.210
楼顶id

36:17.210 --> 36:19.210
楼顶id我给他写个空字五双

36:19.210 --> 36:20.210
发送请求

36:20.210 --> 36:21.210
他告诉你

36:21.210 --> 36:22.210
验证错误

36:23.210 --> 36:25.210
楼顶id必须是不能

36:25.210 --> 36:26.210
不能为空

36:27.210 --> 36:29.210
就这么些验证信息

36:29.210 --> 36:30.210
比方说再把楼顶id

36:30.210 --> 36:31.210
写多一点

36:32.210 --> 36:33.210
验证错误

36:33.210 --> 36:34.210
楼顶id

36:34.210 --> 36:35.210
它的长度必须

36:35.210 --> 36:37.210
小于20

36:37.210 --> 36:38.210
知不知道

36:38.210 --> 36:39.210
长度不能太长

36:39.210 --> 36:41.210
我就随便再写一个

36:41.210 --> 36:42.210
诶

36:42.210 --> 36:43.210
注册成功了

36:44.210 --> 36:45.210
就这么个意思

36:45.210 --> 36:47.210
你们下来自己去

36:47.210 --> 36:48.210
试验一下

36:48.210 --> 36:50.210
这关于注册接口

36:50.210 --> 36:51.210
那么这里就是这个

36:51.210 --> 36:53.210
然后让你观察

36:55.210 --> 36:57.210
随意使用错误的消息内容

36:57.210 --> 36:59.210
请求注册接口

36:59.210 --> 37:00.210
观察请求的content type

37:00.210 --> 37:01.210
请求提这些东西

37:01.210 --> 37:03.210
比方说我们用一个错误的

37:03.210 --> 37:05.210
比方说没有这个

37:06.210 --> 37:07.210
发现状态码是两半

37:07.210 --> 37:08.210
对吧

37:08.210 --> 37:09.210
然后呢

37:10.210 --> 37:12.210
响应体

37:12.210 --> 37:14.210
响应头里边东

37:14.210 --> 37:15.210
这个content type

37:15.210 --> 37:16.210
观察一下

37:16.210 --> 37:17.210
得到的结果是

37:17.210 --> 37:18.210
iPhone可以请接声

37:18.210 --> 37:19.210
就是给我们响应的格式

37:19.210 --> 37:20.210
是一个接声格式

37:20.210 --> 37:21.210
其实你可以看得到

37:21.210 --> 37:22.210
对吧

37:22.210 --> 37:23.210
这就是个接声格式

37:24.210 --> 37:25.210
就是这些东西

37:25.210 --> 37:26.210
你自己去观察一下

37:26.210 --> 37:27.210
包括请求

37:27.210 --> 37:29.210
请求头里边东西

37:29.210 --> 37:30.210
你们自己去观察一下

37:31.210 --> 37:32.210
好吧

37:33.210 --> 37:34.210
其他的怎么观察

37:37.030 --> 37:38.030
用这个打开

37:41.110 --> 37:42.110
在这里的观察

37:42.110 --> 37:44.110
你可以把它清空

37:44.110 --> 37:45.110
清空重新发一次请求

37:51.280 --> 37:52.280
你可以看到

37:52.280 --> 37:53.280
这是个poster请求

37:55.280 --> 37:56.280
请求头里边各种信息

37:56.280 --> 37:57.280
全在这了

37:59.280 --> 38:01.280
然后响应头里边的

38:01.280 --> 38:02.280
各种信息全在这了

38:04.280 --> 38:06.280
然后是响应

38:10.280 --> 38:11.280
然后请求体

38:11.280 --> 38:15.170
然后响应体

38:16.170 --> 38:18.170
对他响应的东西

38:19.170 --> 38:20.170
我希望了

38:20.170 --> 38:21.170
就是同学们

38:21.170 --> 38:22.170
通过这些例子

38:23.170 --> 38:25.170
越来越真切的

38:25.170 --> 38:26.170
认识到

38:26.170 --> 38:28.170
网络他到底在干什么

38:29.170 --> 38:31.170
他跟界面是没有什么关系的

38:31.170 --> 38:32.170
他就是存数据

38:32.170 --> 38:33.170
一个数据发过去

38:33.170 --> 38:34.170
一个数据发回来

38:34.170 --> 38:35.170
一个数据发过去

38:35.170 --> 38:36.170
一个数据发回来

38:36.170 --> 38:37.170
就在做这个事

38:37.170 --> 38:39.170
那么界面又怎么办

38:39.170 --> 38:40.170
那是我们后话

38:40.170 --> 38:42.170
你先把这个东西认识清楚

38:42.170 --> 38:43.170
好吧

38:43.170 --> 38:45.170
光有这些你把练习做了

38:45.170 --> 38:47.170
后边我们还会把所有的

38:47.170 --> 38:48.170
这个

38:48.170 --> 38:50.170
接口里边的所有东西

38:51.170 --> 38:53.170
这东西全部要

38:53.170 --> 38:54.170
用poster面去搞一遍

38:54.170 --> 38:55.170
弄一遍

38:55.170 --> 38:57.170
那么后边我还要单独说一下

38:57.170 --> 38:59.170
登录这个地方有点特殊

38:59.170 --> 39:00.170
他会怎么回事

39:00.170 --> 39:01.170
好

39:01.170 --> 39:02.170
我们这节可能就到这了

39:02.170 --> 39:03.170
那么现在

39:03.170 --> 39:04.170
我们就学完了

39:04.170 --> 39:06.170
网络的基本概念

39:06.170 --> 39:07.170
理论上

39:07.170 --> 39:09.170
通过现在学到西道道的知识

39:09.170 --> 39:11.170
就能够看懂接口文档了

39:11.170 --> 39:12.170
能够使用接口文档

39:12.170 --> 39:13.170
能够看懂接口文档

39:13.170 --> 39:15.170
能够根据接口文档

39:15.170 --> 39:17.170
来在poster面里边

39:17.170 --> 39:18.170
去做一些模拟

39:18.170 --> 39:20.170
做一些网络的通信

39:20.170 --> 39:22.170
这个是目前的要求

39:22.170 --> 39:23.170
要能做到

39:23.170 --> 39:24.170
好吧

