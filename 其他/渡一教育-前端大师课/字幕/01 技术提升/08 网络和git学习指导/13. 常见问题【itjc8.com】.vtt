WEBVTT

00:00.000 --> 00:04.680
这里可能没别的了啊 就说一下 开发中的一些常见问题

00:05.920 --> 00:11.680
呃 首先说最常见的问题啊 一个第一个就是 也是这一刻比较重要的一个新知识点

00:12.680 --> 00:14.640
叫做跨域错误

00:15.920 --> 00:23.280
既有的时候啊 你使用阿迦克斯的时候呢 会发现一很长串一段文本啊 告诉你发生了某一个错误 咱们来试一下吧

00:23.920 --> 00:28.520
比方说我们随便打开一个浏览器啊 甚至在任何一个网页都是这样子

00:29.320 --> 00:35.640
呃 然后在控制台里边去文通过faith api啊 去请求一个地址 比方说请求百度吧

00:36.760 --> 00:45.800
这个玩意没什么问题吧 或者是请求淘宝都行啊 因为我们之前在postman里边不也请求过吗 那阿迦克斯呢 五费也就是发送一个请求吗 我们来试一下啊

00:46.200 --> 00:57.320
在postman里边去请求一下 那肯定是没问题的 我看一下啊 再再打开一个 去请求一下淘宝

00:57.640 --> 01:06.040
你看这个不挺好的吗 发送过来来个淘宝的atmail 那么阿迦克斯呢 我们通常很少去请求atmail啊

01:06.600 --> 01:14.200
呃 但是也会发生这样的一个问题 就是请求的时候 他正常来说应该是得到这个atmail的 但是呢 你会发现他报了一个错

01:15.080 --> 01:20.440
啊 不应该在这里调识啊 这里我都没打开页面 我随便找个页面啊 比方说一个demo

01:23.670 --> 01:25.430
好 你有时候运行出来啊

01:31.030 --> 01:33.510
嗯 然后这样啊 请求他

01:34.150 --> 01:43.590
因为发现了就出现了这么一长串的单词啊 一长串的文本啊 然后后边跟的一些错误啊 主要是这个错误 那么这个错误呢 就叫做跨域错误

01:45.110 --> 01:45.750
叫跨域

01:46.870 --> 01:55.190
呃 那么再举一些例子啊 他们什么时候还会出现那种跨域错误呢 有人觉得可能是不是我去请求的一个页面 你本来应该请求的是一些数据 对吧

01:55.670 --> 02:00.630
节省格式的数据 你去请求的页面就会发生这个错误 那不是的啊 不是这个原因

02:01.350 --> 02:06.070
你包括你去请求API也是一样的问题 比方说我们去请求这个

02:06.710 --> 02:14.870
热门的电影列表 对吧 这个玩意儿是正常的API吗 对吧 API接客文档里面也有 那么这个玩意儿本身就做出来是给阿迦克斯请求的

02:15.190 --> 02:20.950
其实我们接客文档里面的所有东西啊 都是给阿迦克斯来行行请求的 只不过呢 这个postman也可以请求

02:21.590 --> 02:24.710
好 那么我们就以这个为例啊 我去请求这个地址

02:26.070 --> 02:32.550
还是用肺气啊 去发送这个请求 ADDP 我这边就是努科浩斯了啊 你们那边要改动一下

02:33.270 --> 02:39.830
他去请求这个地址 回录车你会发现的还是这个错误啊 类似的对吧 就说是这一段文本

02:40.310 --> 02:47.110
哎 就奇怪了 那我们之前不是请求其他接客的时候都没有问题 那么为什么请求电影接客的时候就是出现这个问题

02:47.510 --> 02:49.670
啊 还有请求页面的时候就会出现这个问题

02:51.030 --> 02:54.070
请我给你解释啊 这个玩意儿叫做跨域错误

02:55.430 --> 03:02.070
他是浏览器 注意啊 他一个潜力条件是浏览器为了安全 他搞出来的一套规则

03:03.030 --> 03:06.230
也就是脱离了浏览器环境 他就没有这个问题了

03:06.950 --> 03:08.950
啊 我通常把它叫做跨域问题

03:09.750 --> 03:19.430
呃 员工员呢 可能把这个跨域问题推而广之了啊 认为任何的adb请求都有跨域问题啊 其实不是的 只有在浏览器环境里边

03:20.390 --> 03:21.510
才会有这个问题

03:22.230 --> 03:29.430
呃 他制定 他是为了安全啊 制定了一个规则 什么规则呢 就是页面的员和目标的员应该保持一致

03:29.910 --> 03:33.830
如果说不一致的话就产生了跨域啊 跨员或者是跨域

03:34.390 --> 03:40.870
呃 他们都一个意思啊 跨员或跨域 那么什么叫员 什么叫页面的员和请求目标的员 这啥意思

03:41.590 --> 03:45.990
员其实就是三个部分 一个是协议 一个是主机 一个是端口

03:46.470 --> 03:54.310
这三个部分全全部一样 就两个员 他们这三个部分完全一样 我们认为他们是同员 同一个员

03:55.110 --> 03:59.510
如果说这三个部分任何一个不一样 那么就认为是

04:01.190 --> 04:03.750
一员或者叫跨员或者要跨域

04:05.190 --> 04:08.230
那么什么叫页面的员呢 页面的员指的是

04:08.950 --> 04:12.230
你就是运行你的ges代码也好 你们页面上不是有些

04:12.710 --> 04:17.110
img元素吗 对吧 那这里是不是要发送一些请求 另可元素啊 发送一个请求

04:17.670 --> 04:19.270
img元素是不是要发送请求

04:19.830 --> 04:23.590
那么这些在页面的员是什么意思 就这个页面本身

04:24.390 --> 04:30.310
请求页面的请求地址里边的员啊 比方说我要请求这个地址 我要请求这个页面 用的是什么员呢

04:30.950 --> 04:32.470
协议用的cddp啊

04:33.110 --> 04:36.870
主机呢用的是ip地址啊 127.0.0.1

04:37.350 --> 04:42.790
短刻号呢用的是5500那么这个页面的员呢就已经非常清楚了啊

04:43.990 --> 04:44.550
addp

04:45.750 --> 04:46.550
127

04:48.950 --> 04:50.150
0.0.1

04:50.710 --> 04:53.350
5500 这就是这个页面的员

04:53.750 --> 04:59.990
懂了意思吧 你请求这个页面拿到是什么地址 那么这个地址里边的这一部分 那么加起来就是它的员

05:01.190 --> 05:04.790
那什么叫做目标的员呢 请求目标的员

05:05.270 --> 05:09.430
就是这个页面的运行期间 它不是要搞很多事嘛 对吧 宣展页面嘛

05:09.750 --> 05:14.150
它有可能会请求一个图片 有可能会请求一个css 有可能会请求一个介事

05:14.550 --> 05:18.950
有可能会执行介事的期间 发送一个阿迦克斯请求 是不是

05:19.590 --> 05:22.790
那么这些请求的目标叫做目标员

05:23.670 --> 05:30.950
啊 比方说我在这个页面中去请求什么呢 请求的是一张图片啊 举个例子啊 我请求图片地址呢是

05:31.670 --> 05:33.670
A3W6百度点抗啊

05:34.230 --> 05:35.190
1.jpg

05:37.030 --> 05:45.670
请求的是1.jpg 好 那么我们的e里面的员仍然是这个 不变对吧 e面的员啊 它后边的都不看啊 不看后边这个 就看前边

05:46.950 --> 05:52.150
那么e面的员不变 然后在这个e面中呢 去请求了什么图片对吧 图片的员是什么的

05:52.550 --> 05:58.550
atbs 然后呢 3W6百度点抗主机嘛 端口呢就是443对吧

05:59.030 --> 06:01.910
这是atbs协议 它默认端口是443

06:02.870 --> 06:05.190
好 那么这就是目标员

06:06.470 --> 06:10.630
页面员和目标员一致叫同员

06:11.590 --> 06:15.830
任何一个不一致都叫做跨域啊 或者叫跨员

06:16.790 --> 06:24.230
首先把概念理清楚啊 那么下面的我还举了一些例子 非常简单 其实这个是并不复杂 就页面员比方说

06:24.950 --> 06:31.750
好 稍等啊 不好意思啊 看车啊 这里呢 我举了新例子 比方说我访问的e面

06:31.750 --> 06:37.990
就e面的访问的地址呢 是这个 那么e面的员就出来了对吧 是什么e面的员 三个部分啊

06:39.190 --> 06:43.990
这个这个还有什么443啊 端口号没写出来而已

06:44.710 --> 06:46.390
目标的员呢 是这个

06:47.350 --> 06:52.550
这个 那不是是不是肯定不一样 这个协议都不一样对吧 还有主机也不一样

06:52.950 --> 06:55.830
别看这个ip地址就是那个百度的ip地址

06:56.710 --> 07:00.150
不管 我只管你写的是不是一样的 写的不一样

07:00.950 --> 07:07.670
那么就没有跨域 它就有跨域 懂了意思吧 那么第二个协议主机端口号443

07:08.390 --> 07:11.510
协议主机端口号8080

07:12.550 --> 07:17.830
更不一样了的话 协议不一样 主机不一样啊 这个主机也算不一样哦 也算不一样

07:18.550 --> 07:23.990
只要有任何一点差异 它都算不一样 然后呢 这个端口号就是8080 这边呢是443

07:24.470 --> 07:30.710
因为说atbs协议 默认端口443 那么他们也算是跨域 任何一个不一样就算跨域

07:31.510 --> 07:33.910
好 再看这个协议主机

07:34.870 --> 07:36.950
协议主机是不是一样的

07:37.670 --> 07:44.870
跟后边的路径没有任何关系啊 那么协议和主机还有端口号 他们都是一致的 那么这个玩意就不算跨域

07:44.950 --> 07:49.750
他们是同源的 懂了意思吧 首先吧 什么叫跨域和原稿清楚

07:50.710 --> 07:56.310
那么浏览器是怎么来看待这个跨域的呢 他也不是一刀切 说你只要跨域就不行

07:56.950 --> 08:01.910
那肯定不是这样子的 不然的话你图片的话 你不能去用Y网的 其他网责人图片

08:02.310 --> 08:06.310
对吧 他是这样子啊 他对有些严格 有些宽松

08:06.790 --> 08:10.150
他对什么一些标签 对ATM标签 他比较宽松

08:10.870 --> 08:16.070
像你通过一米几元数去发送一个请求 你跨域就跨域吧 对吧 他允许你跨域

08:16.790 --> 08:20.870
做了稍微等那么一丢丢的限制啊 这个先生我都不用去管他

08:21.510 --> 08:26.950
不怎么影响的 然后呢 还有就是另可元数啊 你在这里写个请求对吧 你可以请求

08:27.510 --> 08:28.630
比方说我们请求一些

08:29.590 --> 08:31.830
那个还记得吗 请求那个

08:32.550 --> 08:35.910
自己图标是不是一个别的网站的自己图标 那肯定跨域了呀

08:36.390 --> 08:41.190
对不对 说肯定跨域了啊 埃康方程对网站的一个css还记得吗

08:41.670 --> 08:43.030
那肯定跨域了 这个

08:43.270 --> 08:47.830
允不允许了 他允许的跨域啊 并不是说跨域他就一定不允许 他允许的

08:48.150 --> 08:51.670
还包括什么script元数啊 我去请求一个GS 你们学过

08:52.230 --> 08:56.390
你们还没学到第三方库啊 那么这个其实我可以访问一些站外的

08:56.790 --> 09:01.510
GS文件 是可以的啊 包括你们以后学习第三方库这个地方经常用这种方式

09:01.670 --> 09:05.990
就请求一个 不是我们的GS 别的网站的GS 是没有问题的

09:06.390 --> 09:11.350
这些都是允许跨域的啊 所以呢 扭蛋器对这些元数的限制呢是比较宽松

09:11.590 --> 09:13.670
一般允许跨域 跨域性请求

09:14.470 --> 09:21.750
但是对阿加克斯比较严格 哎呀 要不要搞混了啊 说阿加克斯不就是GS吗 你不是说对GS限制比较宽松吗

09:23.750 --> 09:27.990
他指的是去拿这个GS文件的内容比较宽松

09:28.950 --> 09:37.190
拿到内容之后是不是要执行啊 你执行的过程中他比较严格 因为你执行的过程中是不是会有一个什么

09:37.510 --> 09:41.110
写了这么一段代码啊 你可能执行的过程中写了这么一个fetch

09:41.670 --> 09:44.390
这里是不是要发送请求 他对这个东西比较严格

09:45.270 --> 09:52.390
不是说拿剑也是严格 是指的是执行剑也是中 发送的请求是比较严格的 特别是阿加克斯啊

09:52.950 --> 09:57.110
那么他怎么严格法呢 就是一般不允许跨域

09:57.990 --> 10:04.790
好 这就解释了 为什么我在这儿去写上这么一个东西 他就出现跨域问题 为什么呢

10:05.510 --> 10:10.950
你会看到这个promise啊 他最终是rejected 爆错了 他告诉你啊 fail the fetch

10:11.750 --> 10:12.230
失败了

10:13.830 --> 10:18.390
因为成功之后我们就可以拿到服务器的响应了 对吧 但是你这里失败了啊 他拿不到服务器的响应

10:19.030 --> 10:22.390
其实这里呢我们也可以通过这个network里边可以看到啊 这里呢

10:23.110 --> 10:27.190
他给同学们要把这个打开啊 要把这个打开standards

10:27.590 --> 10:30.470
这个怎么打开 点击右键啊 这个standards把勾选上

10:31.270 --> 10:37.190
打开之后呢 你可以看到服务器的响应的状态吧 那么其中有些状态吗呢 是比较奇怪的啊 比方说这个

10:38.150 --> 10:43.830
这个玩意就是跨域错误啊 他把它称之为CORS错误 那么这个CORS是啥呢

10:44.150 --> 10:50.150
同学们以后就知道了啊 现在不用去管他 那么你就把他看错是跨域错误 那么在这里边呢你是

10:51.110 --> 10:58.070
看不到服务器的响应结果的 请求有没有发出去 有发出去啊 甚至呢他服务器的响应状态是两百都是正常的

10:58.230 --> 11:02.310
但是浏览器啊 实际上是这样子的 这是浏览器都是服务器

11:02.790 --> 11:06.470
你不是在浏览器执行过程中使用了一个FET去请求吗 对吧

11:07.350 --> 11:13.270
他会不会发生请求会发生 服务器会不会响应会响应 倒没倒浏览器倒浏览器啊 一切都正常

11:13.750 --> 11:15.510
但是浏览器会发现这个说 嗯

11:16.470 --> 11:22.390
你不是在跨域访问吗 这个啊 反映过来了 他不会把你这个响应结果交给解释

11:22.870 --> 11:26.950
他在做最后一道限制 他其实请求响应是一切正常的

11:27.350 --> 11:30.950
他只是浏览器不把这个响应结果交给你 他直接让那个Promise冒出

11:31.670 --> 11:34.790
那就这么个原因啊 然后给你打一个错误消息

11:35.590 --> 11:40.710
你请求这个地址 他其实更写得很明白了 你请求的是这个地址

11:41.110 --> 11:46.230
从哪个地址发出的请求 从这个源 这个Origin 就是源

11:47.030 --> 11:49.430
从这个源发出的请求 你看这个源是不是这个

11:50.470 --> 11:56.310
从一夜面这个源发出的请求 那么这个源跟你请求的目标里边这个源是不一致的

11:57.670 --> 11:59.670
于是呢 他不把这个响应结果给利

12:00.630 --> 12:02.630
懂了意思吧 好 于是就会

12:03.030 --> 12:09.030
爆错啊 那么浏览器对这种跨域行为啊 做出了不同限制 他对有些宽松 有些严格

12:09.270 --> 12:12.230
我们把这些限制统称为统源策略

12:12.870 --> 12:15.430
这个玩意在第三阶段还会想非常非常详细的去讲啊

12:15.670 --> 12:19.030
那么现在的同学们知道了啊 这个错误就是跨域错误

12:19.270 --> 12:20.550
一般发生在阿迦克斯的时候

12:21.830 --> 12:22.470
然后

12:23.110 --> 12:24.390
等会就是一个

12:25.670 --> 12:26.710
嗯 怎么了

12:27.190 --> 12:29.270
等会就是这么一个错误啊

12:29.670 --> 12:30.550
那么

12:30.790 --> 12:35.670
为什么现在要解释啊 为什么这个地址不行 那其他的地址不是都是正常的吗

12:35.910 --> 12:39.510
比方说我们其他得到的是那个

12:39.750 --> 12:42.070
省市区啊 省市区

12:42.310 --> 12:44.630
这个地址这个地址不挺正了吗

12:45.910 --> 12:46.950
你看这个地址

12:47.190 --> 12:48.470
换一个地址

12:49.750 --> 12:52.310
哎 你看这个地址里面错误 那是有什么区别吗

12:52.550 --> 12:54.870
那确实有区别是怎么回事呢

12:55.590 --> 13:00.710
要解决跨域错误 一般来说前端开发你不需要做啥 你啥也不需要做

13:01.990 --> 13:03.270
你就在地上打滚 吐口水

13:03.510 --> 13:04.550
骂 骂后端

13:04.790 --> 13:07.110
你让他感觉赶快给你解决

13:07.350 --> 13:09.430
这个解决这个错误一般是后端解决啊

13:09.670 --> 13:10.950
服务器那边解决

13:11.190 --> 13:15.830
那就是说 我那不行啊 我一定要那个 我一定要跨域的访问这个数据

13:16.070 --> 13:17.110
你必须要给我

13:17.350 --> 13:19.910
你捞 捞 捞 捞他就给你了啊

13:20.150 --> 13:21.190
开玩笑啊 一般是

13:21.350 --> 13:24.790
都是一开始的规划好的 哪些允许跨域 哪些不允许跨域

13:25.030 --> 13:26.310
比方说像我这个接口里边

13:27.590 --> 13:29.910
虽然文档里面没有民说啊

13:30.150 --> 13:31.430
但是呢 我这里通过

13:31.670 --> 13:33.990
主要是为了让你们知道这个跨域错误 所以说我故意的

13:35.270 --> 13:36.550
这个解口我就不允许跨域

13:36.790 --> 13:37.830
其他解口都允许跨域

13:38.070 --> 13:41.670
因此呢 里面在之前的访问中是没有正常的 没有任何问题的

13:41.910 --> 13:42.950
当你访问这个解口就会出问题

13:43.190 --> 13:45.270
虽然我经过特殊处理了

13:45.510 --> 13:46.790
这个解口是

13:47.030 --> 13:48.070
我是不允许跨域的

13:48.230 --> 13:50.630
那么其实呢 浏览器呢

13:51.350 --> 13:53.350
一般来说是不允许跨域的

13:53.910 --> 13:57.750
但是如果说服务器明确告知浏览器 允许跨域

13:57.990 --> 14:00.070
那么浏览器呢 你服务器都说了

14:00.310 --> 14:02.870
你允许跨域 那我也不用再坚持了

14:03.110 --> 14:06.150
那么就会对这一次请求

14:06.390 --> 14:07.990
允许跨域请求

14:08.390 --> 14:09.990
其实呢 我跟你们看一下吧

14:10.230 --> 14:11.590
服务器是怎么告诉浏览器的

14:11.830 --> 14:14.390
现在问题不就在这边吗 你看吧 这是个浏览器

14:14.390 --> 14:18.230
请求那些都能正常发出 都能响应

14:18.470 --> 14:20.550
关键就在响应过后 浏览器

14:20.790 --> 14:23.110
要不要把这个响应结果给这个解释

14:23.350 --> 14:24.630
无非就是这一步嘛 对吧

14:24.870 --> 14:27.190
那浏览器是怎么看的呢 非常简单

14:27.430 --> 14:28.470
就看你服务器

14:28.710 --> 14:29.750
怎么说

14:29.990 --> 14:32.310
比方说 我请求这个地址

14:33.590 --> 14:34.870
我请求这个地址

14:35.110 --> 14:37.430
哎 发现请求没问题 你看DESWORD里边

14:38.710 --> 14:39.990
这天列室的段落

14:40.230 --> 14:41.270
这天列室的段落

14:41.430 --> 14:43.590
服务器的响应结果都是能拿到的

14:43.830 --> 14:45.110
是没问题的 为什么呢

14:45.350 --> 14:47.430
是因为服务器在响应

14:47.670 --> 14:48.950
这是响应嘛

14:49.190 --> 14:52.790
响应头里边呢 给它加了一个字段 叫做

14:58.200 --> 14:59.240
这个我们后边

14:59.480 --> 15:01.800
第三个节段会详细的讲 现在了解一下

15:02.040 --> 15:03.080
多加了一个字段

15:03.320 --> 15:04.600
服务器高速浏览器

15:04.840 --> 15:05.880
你别限制它了

15:06.120 --> 15:07.160
自己人

15:08.440 --> 15:11.000
就这个玩意 这个浴是自己人

15:11.000 --> 15:17.160
你不要限制它了 所谓浏览器 你都说了啊 我还有什么好坚持的呢

15:17.400 --> 15:21.000
你自己负责吧 你服务器自己负责吧 你都不限制它

15:21.240 --> 15:22.520
他就把这个东西给了

15:22.520 --> 15:23.560
给了介石

15:23.800 --> 15:25.080
介石就能拿到

15:25.080 --> 15:26.360
那么看另外一个接口呢

15:27.640 --> 15:28.920
为什么出现那个跨域问题

15:29.160 --> 15:31.480
再看DESWORD里边

15:31.480 --> 15:34.040
服务器的响应结果里边 是不是没有那个东西啊

15:34.040 --> 15:36.600
是没有刚才我看到那个东西

15:36.600 --> 15:40.440
那么浏览器说那里服务器没有高速 我能不能给它

15:41.160 --> 15:43.160
我就认为你跨域了 我就不能给它

15:43.720 --> 15:44.600
就这么个意思

15:44.840 --> 15:46.040
这是跨域问题啊

15:46.280 --> 15:49.720
再重申一次 你看到这个问题 你要知道是为啥会出现这个问题

15:49.720 --> 15:50.600
它是跨域了

15:50.840 --> 15:52.680
同时你要知道

15:52.920 --> 15:56.280
怎么解决 你要去找后端

15:56.280 --> 15:59.800
后端说这个解口是不能允许的跨域访问者

16:00.040 --> 16:01.080
那里就没办法了

16:01.880 --> 16:02.920
前端有

16:03.160 --> 16:07.240
在不动后端的情况下 前端在开发过程中有没有什么办法解决的问题呢

16:07.960 --> 16:12.200
有一点办法 我们后边在工程化的时候会给大家说

16:12.200 --> 16:12.600
但是呢

16:13.800 --> 16:15.720
那个办法呢 也不是一个完美的解决办法

16:16.600 --> 16:18.600
这个玩意你们以后学了工程化就知道了

16:18.600 --> 16:20.200
这个东西前端该怎么去处理

16:21.000 --> 16:23.000
现在你只需要知道它的跨域就行了

16:24.040 --> 16:25.880
好 这是关于跨域的错误啊

16:26.360 --> 16:28.680
还有一个比较常见的错误呢 就是404

16:28.680 --> 16:30.280
这个见到是非常非常多的

16:30.600 --> 16:32.280
它一般发生在什么时候呢

16:32.680 --> 16:34.280
任何时候都可能发生这个错误

16:34.760 --> 16:38.440
比方说吧 你在页面上去请求一个并不存在的CSS

16:41.800 --> 16:43.160
那么这次会发生这个错误

16:44.040 --> 16:45.560
你看 它告诉你什么呢

16:47.860 --> 16:48.740
诶 我就写出了

16:49.860 --> 16:50.660
诶 对了对了

16:53.290 --> 16:54.890
CSS 用这个设计啊

16:56.810 --> 16:57.930
用这个设计啊

16:57.930 --> 16:59.530
CSS 并不存在对吧

17:04.630 --> 17:07.990
嗯 好 那么现在呢得到的结果呢

17:07.990 --> 17:09.510
其实它这里没有显示的很好

17:09.510 --> 17:11.510
但是network里面显示的是非常

17:11.830 --> 17:13.430
非常那个正确的啊

17:13.430 --> 17:14.710
所以说很多时候在调试的时候

17:14.710 --> 17:16.390
network里面看一看就明白了

17:16.390 --> 17:18.150
它得到了状态法是404

17:18.710 --> 17:20.630
那么这个表示说服务器呢

17:20.630 --> 17:21.590
你请求这个地址啊

17:21.590 --> 17:22.870
服务器根本就不存在

17:22.870 --> 17:24.070
根本就没有这个资源

17:24.550 --> 17:25.590
不存在的

17:25.590 --> 17:27.190
比方说我们再去请求一个CS

17:29.660 --> 17:30.780
一个不存在的CS

17:34.150 --> 17:35.430
好 然后看一下控制台

17:35.430 --> 17:37.030
你看这个404拿出放的

17:37.910 --> 17:40.710
看network的调试器是最直观的

17:40.710 --> 17:42.870
你看 404 404

17:43.590 --> 17:44.310
所以这个地址

17:44.310 --> 17:45.510
一般来说出现这个错误啊

17:46.950 --> 17:47.830
都有可能

17:47.830 --> 17:50.550
有可能是你前端开发人员

17:50.550 --> 17:52.070
写的UIL地址有问题

17:52.630 --> 17:53.190
有可能呢

17:53.190 --> 17:55.430
你的地址是按照接口文档写的

17:55.430 --> 17:56.630
是按照要求写的

17:56.630 --> 17:58.150
但是呢服务器那边没东西

17:58.150 --> 17:59.510
是服务器的问题

18:00.150 --> 18:01.670
这个先自查吧

18:01.670 --> 18:03.350
先你们作为前端开发者

18:03.350 --> 18:05.430
先查一下是不是自己的问题

18:05.430 --> 18:07.030
是不是自己的UIL地址有问题

18:07.030 --> 18:08.070
比方点进去看

18:08.070 --> 18:09.590
你请求的UIL地址是这个

18:10.710 --> 18:11.510
你甚至把这个地址

18:11.510 --> 18:13.110
可以弄到这来请求一下

18:14.550 --> 18:16.230
这里也会得到一个404

18:16.230 --> 18:17.110
你看那是什么

18:17.670 --> 18:18.390
是不是404

18:19.590 --> 18:20.230
对吧

18:20.230 --> 18:21.430
那么说明那个地址

18:21.430 --> 18:21.990
啊

18:21.990 --> 18:23.430
要么就是你写的有问题

18:23.430 --> 18:25.030
你如果说你检查了检查去

18:25.030 --> 18:26.950
好像那个地址就算到要求写的呀

18:27.990 --> 18:29.670
那就去检查服务器了

18:29.670 --> 18:30.470
就可能要去

18:30.470 --> 18:31.350
这个问题呢

18:31.350 --> 18:33.510
一般有可能出现在这些地方

18:33.510 --> 18:34.230
还有图片

18:34.230 --> 18:35.030
比方说你请求了一个

18:35.030 --> 18:36.230
并不存在的图片地址

18:39.830 --> 18:41.510
你看也会得到一个404

18:42.230 --> 18:44.390
在network里面看的也很清楚

18:44.390 --> 18:45.270
这是一个404

18:45.270 --> 18:46.150
在这

18:47.270 --> 18:48.230
图片404

18:48.230 --> 18:50.070
说明那个图片的地址是有问题的

18:50.710 --> 18:51.030
对吧

18:51.030 --> 18:53.190
那点进去看一下地址是什么

18:53.190 --> 18:53.750
就这个

18:54.470 --> 18:55.030
什么意思

18:56.630 --> 18:57.190
就这么意思

18:57.190 --> 18:57.830
那么现在呢

18:57.830 --> 19:01.110
就是这些都是属于404问题

19:01.110 --> 19:01.670
有的时候呢

19:01.670 --> 19:03.030
你可能还会写一段介绍

19:03.030 --> 19:04.550
我们或者直接在图纸台里面写吧

19:05.990 --> 19:06.390
Fetch

19:08.070 --> 19:09.670
比方说我们请求一个地址

19:10.150 --> 19:10.790
Aggp

19:12.310 --> 19:13.910
localhost701

19:20.060 --> 19:21.100
不知道也是404

19:21.740 --> 19:22.140
对吧

19:22.140 --> 19:23.260
状态蛮为404

19:25.740 --> 19:26.780
状态蛮为404

19:28.220 --> 19:29.180
那么这个时候呢

19:29.180 --> 19:30.860
你检查了

19:30.860 --> 19:31.580
根据接口稳当

19:31.580 --> 19:32.140
你查了一下

19:32.140 --> 19:33.340
我这个地址写的没问题

19:33.340 --> 19:34.460
那你去找后端

19:34.940 --> 19:36.220
找后端去对接一下

19:36.220 --> 19:36.940
就这个意思

19:37.580 --> 19:38.620
还是404问题

19:39.100 --> 19:40.940
首先主要是检查那个地址

19:42.780 --> 19:43.420
这样下一个

19:44.140 --> 19:45.100
下一个问题呢

19:45.100 --> 19:47.580
也是前期我们应该遇到了很多次的

19:47.580 --> 19:48.540
非常非常多次的

19:49.420 --> 19:50.540
就是这个错误

19:50.540 --> 19:51.660
给大家看一下

19:51.660 --> 19:52.460
复先一下

19:52.460 --> 19:53.420
把个浏览器关掉

19:53.980 --> 19:54.300
然后呢

19:54.300 --> 19:55.420
我们重新打开这个浏览器

19:56.140 --> 19:56.940
这些都不要了

19:58.460 --> 19:58.780
好

19:58.780 --> 19:59.820
点击打开浏览器

20:00.540 --> 20:01.180
打开控制台

20:01.740 --> 20:03.580
你会发现第一次运行的时候呢

20:04.060 --> 20:05.180
它就会爆这个错误

20:05.180 --> 20:06.780
它也是个404错误

20:06.780 --> 20:08.220
你就会发现很奇怪

20:08.620 --> 20:09.980
我页面也显示出来了

20:10.460 --> 20:10.940
这里呢

20:10.940 --> 20:12.700
我也没有引用任何的外部资源

20:12.860 --> 20:13.900
它都含有这个错误

20:14.700 --> 20:15.420
这什么错误呢

20:15.420 --> 20:16.540
你看一下network

20:16.540 --> 20:17.340
你啥都明白了

20:20.620 --> 20:22.780
你开始我们没玩的network打开啊

20:23.580 --> 20:24.780
在这里还看不到啊

20:24.780 --> 20:25.900
这个network打没打开

20:25.900 --> 20:26.700
我就直接说吧

20:27.180 --> 20:29.420
因为network它要显示出来

20:29.420 --> 20:30.300
它有一个潜力条件

20:30.620 --> 20:32.300
你得先把这个调试工具打开

20:32.300 --> 20:33.100
它才会记录

20:33.100 --> 20:33.980
记录我这个网络

20:34.540 --> 20:36.220
我是后打开这个调试工具的

20:36.220 --> 20:38.540
所以一开始之前的那个请求就没有记录

20:40.380 --> 20:41.500
那么这个是什么问题呢

20:41.500 --> 20:42.620
是这个原因

20:43.020 --> 20:44.540
就是浏览器啊

20:44.620 --> 20:46.380
它在解析页面的时候啊

20:46.380 --> 20:48.060
我们之前学过一个元素叫link

20:48.620 --> 20:49.500
翻车

20:49.500 --> 20:49.740
对吧

20:49.740 --> 20:51.740
这是设置浏览器这个

20:51.740 --> 20:53.180
这个位置的图标的

20:53.180 --> 20:53.740
是不是

20:53.740 --> 20:55.020
设置这个位置图标的

20:55.420 --> 20:57.820
如果说浏览器解析完了整个页面

20:57.820 --> 20:58.540
它发现

20:58.540 --> 21:00.860
你整个页面都没有去设置这个图标

21:01.500 --> 21:02.780
都没有去设置这个图标

21:03.580 --> 21:03.980
那么

21:04.460 --> 21:05.500
它认为一个网站

21:05.500 --> 21:07.740
它不至于连一个图标都做不出来吧

21:07.740 --> 21:08.300
都没有吧

21:08.700 --> 21:11.420
它就假设你的图标在哪呢

21:11.420 --> 21:12.940
在跟路径下边

21:12.940 --> 21:14.380
它就会去请求这个地址

21:16.780 --> 21:17.900
它会自动去请求

21:17.900 --> 21:19.980
如果说你网页没有去设置图标的话

21:19.980 --> 21:21.500
它就会自动去请求这个地址

21:21.500 --> 21:22.700
这也是很多网站

21:22.700 --> 21:24.460
它自己做一个图标出来

21:24.460 --> 21:26.300
它难得去写这个link元素了

21:26.300 --> 21:28.940
它直接把这个图标文件放到跟目录

21:28.940 --> 21:29.580
也可以

21:30.300 --> 21:32.140
因为刘亚心会不能去请求这个地址

21:32.140 --> 21:33.500
就拿这个图标把它放到这

21:33.980 --> 21:34.700
那这个地址

21:34.700 --> 21:36.300
现在请求一个地址肯定是不存在的

21:36.300 --> 21:36.860
对不对

21:36.860 --> 21:38.140
那么请求这个地址

21:38.140 --> 21:39.900
它只会得到404

21:41.100 --> 21:41.580
你看

21:42.140 --> 21:43.580
因为现在并不存在嘛

21:43.580 --> 21:44.860
它也会得到一个404

21:45.580 --> 21:47.740
所以说它有发生了这样的一个问题

21:47.740 --> 21:48.860
是你什么样子放的

21:49.420 --> 21:50.620
那么一般这个问题呢

21:50.620 --> 21:51.580
它在刷新流量

21:51.580 --> 21:52.540
刷新页面之后

21:52.540 --> 21:54.300
刷新页面之后它就不会出现

21:54.860 --> 21:55.980
因为之前刘亚心

21:56.380 --> 21:59.020
我好像隐约记得之前请求过这个地址了

21:59.660 --> 22:00.620
好像请求不到

22:00.620 --> 22:01.580
那没有就说

22:01.580 --> 22:03.500
那么以后刘亚心不去请求它了

22:03.980 --> 22:05.020
但是你关闭刘亚心

22:05.020 --> 22:05.660
在打开的时候

22:05.660 --> 22:08.060
他又会去请求一次

22:08.540 --> 22:09.260
就这个意思

22:10.300 --> 22:10.860
好 这是

22:12.380 --> 22:13.100
请求地址说了

22:17.030 --> 22:17.750
好 我们再说

22:18.390 --> 22:18.790
不是

22:19.830 --> 22:20.310
点滚

22:21.910 --> 22:22.470
好 你看

22:22.470 --> 22:23.670
重新请求这个页面的时候

22:23.670 --> 22:25.110
它就没有再去请求这个地址了

22:25.590 --> 22:26.630
图表地址了

22:26.630 --> 22:27.510
好 这是这个问题

22:28.310 --> 22:29.510
然后还有一些其他问题

22:29.510 --> 22:30.710
就比较少一点了

22:30.710 --> 22:31.750
看一下吧

22:31.750 --> 22:32.790
比方你报这个错误

22:32.790 --> 22:33.750
这个错误告诉你

22:33.750 --> 22:35.030
error 错误

22:35.030 --> 22:38.790
Internet 就是网络Intel

22:38.790 --> 22:40.070
disconnected

22:40.070 --> 22:41.430
这个是断看连接

22:41.430 --> 22:41.990
这什么意思呢

22:41.990 --> 22:43.270
就是你网断了

22:43.270 --> 22:43.830
断网了

22:44.550 --> 22:45.510
你可以检查一下网

22:45.670 --> 22:46.310
你的网络

22:46.310 --> 22:46.710
你看一下

22:46.710 --> 22:47.990
访问其他网站能不能访问

22:49.190 --> 22:51.350
也有可能是你在调试工具里边

22:51.350 --> 22:52.470
你把这个打开了

22:52.470 --> 22:52.950
offline

22:53.590 --> 22:54.310
offline

22:54.310 --> 22:56.630
这是下线之前说过的

22:56.630 --> 22:57.590
它打开之后

22:57.590 --> 22:58.710
你啥也请求不到了

22:58.710 --> 22:59.270
你啥行

23:00.070 --> 23:01.590
你会得到这么一个错误

23:03.190 --> 23:03.670
field

23:04.790 --> 23:05.430
field

23:05.430 --> 23:06.230
网络

23:07.110 --> 23:07.750
网络错误

23:08.630 --> 23:09.750
好 但是控制台里边

23:11.350 --> 23:13.030
比方说你现在去请求任何

23:13.030 --> 23:13.670
任何一个东西

23:13.670 --> 23:15.110
它都会得到一个网络错误

23:15.270 --> 23:16.310
网络断开连接

23:17.190 --> 23:18.230
好 还有这个错误

23:18.230 --> 23:19.750
这个错误一般表示的是

23:20.470 --> 23:22.310
因为有些同学在写域名的时候

23:22.310 --> 23:23.590
老是打错单词

23:23.590 --> 23:25.350
他就会发生这个错误

23:25.350 --> 23:25.990
比方说

23:25.990 --> 23:28.150
你就请求我们的度1那个网站

23:28.150 --> 23:29.190
本来一正常的地址

23:29.190 --> 23:30.070
应该是这样子的

23:31.670 --> 23:32.150
study

23:33.270 --> 23:35.350
度1 edu.com

23:35.350 --> 23:37.030
有些同学可能写了两个m

23:37.030 --> 23:37.910
他又不知道

23:37.910 --> 23:39.510
他就然后就发出请求了

23:39.510 --> 23:41.510
然后这里是一个api

23:42.390 --> 23:43.510
这还有什么地址

23:45.510 --> 23:46.150
省市区吧

23:50.140 --> 23:51.020
就发生这个请求了

23:51.020 --> 23:51.660
那么就会得到

23:52.460 --> 23:53.580
这里已经下线了

23:55.020 --> 23:55.740
网络是正常的

23:56.300 --> 23:56.940
网络没问题

23:59.180 --> 24:00.220
然后去请求那个地址

24:00.940 --> 24:02.300
那么还会得到这个东西

24:02.300 --> 24:04.220
error name not resolved

24:05.260 --> 24:05.900
就是什么意思呢

24:05.900 --> 24:07.820
就是这个域名写错了

24:07.820 --> 24:08.860
你写错了

24:08.860 --> 24:09.660
写错了之后

24:09.660 --> 24:10.060
他就

24:10.780 --> 24:12.300
有些域名是没有办法解析的

24:12.780 --> 24:13.740
因为我们知道之前说过

24:13.740 --> 24:15.740
域名他最终会翻译成ip地址

24:16.700 --> 24:18.460
因为ip地址不好记忆

24:18.460 --> 24:20.060
所以后面用域名来代替他

24:20.060 --> 24:21.660
但有些域名他翻译不过去

24:22.380 --> 24:22.940
那么这个时候

24:22.940 --> 24:24.220
还会发现这个错误

24:24.220 --> 24:25.340
它是个错误

24:25.340 --> 24:26.700
name就是域名

24:26.700 --> 24:28.700
域名 not resolved

24:28.700 --> 24:29.980
就是域名无法解析

24:30.540 --> 24:31.900
无法搞定这个域名

24:32.540 --> 24:33.180
就是这个意思

24:33.900 --> 24:34.700
其他的错误

24:34.700 --> 24:36.140
就更加小众一些了

24:36.140 --> 24:37.340
如果说同学们有遇到的话

24:37.340 --> 24:39.500
在群里面给老师提出来

24:39.500 --> 24:40.460
如果说发现一些

24:41.100 --> 24:42.460
移动的一些常见问题的话

24:42.460 --> 24:44.620
我再把它补充到这些课里面去

24:44.620 --> 24:45.020
好吧

24:45.740 --> 24:48.380
OK 那么这就是这期课的全部内容了

24:48.380 --> 24:50.300
我们网络部分就到此结束了

