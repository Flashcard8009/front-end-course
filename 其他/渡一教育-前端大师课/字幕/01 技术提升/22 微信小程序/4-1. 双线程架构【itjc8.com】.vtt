WEBVTT

00:00.050 --> 00:02.850
OK 从这几课开始

00:02.850 --> 00:05.850
咱们就正式进入到第四章

00:05.850 --> 00:08.050
架构篇的学习

00:08.050 --> 00:10.450
这一篇章的学习

00:10.450 --> 00:14.050
实际上主要是拿来应付面试的

00:14.050 --> 00:16.450
因为相比别人 比如别人的话

00:16.450 --> 00:19.450
同样都是学过小程序的开发

00:19.450 --> 00:22.050
对不对 都是使用小程序做过这个项目

00:22.050 --> 00:23.450
你在这个基础上的话

00:23.450 --> 00:27.450
你还能说出一些小程序背后的东西

00:27.450 --> 00:29.050
那么相比别人来讲的话

00:29.050 --> 00:31.050
你就更有优势一些

00:31.050 --> 00:32.850
OK 所以我们这一张的话

00:32.850 --> 00:34.650
然后花这么几节课

00:34.650 --> 00:37.050
咱们把这个小程序背后的一些东西

00:37.050 --> 00:39.050
给大家聊一下

00:39.050 --> 00:40.850
大家的话也可以听一下

00:40.850 --> 00:42.850
大致有那么一个印象

00:42.850 --> 00:44.050
当时面试的时候的话

00:44.050 --> 00:45.650
能够说出一样来

00:45.650 --> 00:47.850
实际上就已经相当不错了

00:47.850 --> 00:50.050
好不好 OK

00:50.050 --> 00:52.050
好 那这边的话是第一节课

00:52.050 --> 00:53.050
那第一节课的话

00:53.050 --> 00:56.650
这边是叫做双线程架构

00:56.650 --> 00:59.650
这个的话 实际上在小程序最早

00:59.650 --> 01:01.650
第三张

01:01.650 --> 01:03.650
我记得是第三张的时候就已经那个过了

01:03.650 --> 01:07.470
我们这边我们来看一下

01:07.470 --> 01:11.470
我把那个小程序的这个叫成打开

01:11.470 --> 01:13.470
我记得是在第三张的时候

01:13.470 --> 01:14.470
它就已经提过了

01:14.470 --> 01:17.470
在这边 OK 你看

01:17.470 --> 01:19.470
双线程

01:19.470 --> 01:22.470
小程序它是有两个线程的

01:22.470 --> 01:24.470
我们这边看上面吧 这里

01:24.470 --> 01:26.470
小程序的运行环境

01:26.470 --> 01:27.470
分为什么呢

01:27.470 --> 01:31.470
分为渲染程和逻辑程

01:31.470 --> 01:36.470
然后那个wxmail和wxss

01:36.470 --> 01:37.470
它是工作在什么呢

01:37.470 --> 01:40.470
它是工作在渲染程

01:40.470 --> 01:42.470
而这个js脚本

01:42.470 --> 01:43.470
它是工作在什么呢

01:43.470 --> 01:45.470
工作在逻辑程

01:45.470 --> 01:47.470
它是有两个线程

01:47.470 --> 01:51.470
两个线程之间它是要进行相互通信的

01:51.470 --> 01:55.470
那如何进行这个通信呢

01:55.470 --> 01:57.470
这边有一张示意图

01:57.470 --> 01:58.470
大家可以看一下

01:58.470 --> 02:00.470
这边的话是渲染程

02:00.470 --> 02:03.470
你没打开一个页面

02:03.470 --> 02:05.470
它这边是一个webview

02:05.470 --> 02:07.470
人家这边是逻辑程

02:07.470 --> 02:09.470
逻辑程的话这边有个js core

02:09.470 --> 02:12.470
主要就是负责执行这个js的

02:12.470 --> 02:13.470
然后接下来的话

02:13.470 --> 02:14.470
这边这个lative

02:14.470 --> 02:15.470
lative是什么

02:15.470 --> 02:17.470
lative的话就是客户端

02:17.470 --> 02:18.470
就微信客户端

02:18.470 --> 02:19.470
说到这边的话

02:19.470 --> 02:21.470
渲染程和逻辑程

02:21.470 --> 02:23.470
它们之间进行这个通信

02:23.470 --> 02:27.470
他们是要经过这个微信客户端的

02:27.470 --> 02:29.470
还记不记得我们之前

02:29.470 --> 02:32.470
比如我们之前在那个js文件里面

02:32.470 --> 02:35.470
那个data里面写数据

02:35.470 --> 02:36.470
写了数据之后

02:36.470 --> 02:37.470
然后接下来的话

02:37.470 --> 02:39.470
在那个页面里面能够渲染出来

02:39.470 --> 02:41.470
它不是说直接就把这个数据

02:41.470 --> 02:42.470
就拿给它了

02:42.470 --> 02:43.470
不是

02:43.470 --> 02:45.470
它这边的话是通过了一个lative

02:45.470 --> 02:48.470
微信客户端进行一个通信

02:48.470 --> 02:49.470
OK

02:49.470 --> 02:51.470
好来回到我们这边这个文档

02:51.470 --> 02:53.470
我们这边来看一下

02:54.470 --> 02:57.470
微信小程序的渲染程与逻辑程

02:57.470 --> 02:59.470
分别有两个线程管理

02:59.470 --> 03:01.470
然后渲染程的页面的话

03:01.470 --> 03:03.470
使用的是webobu

03:03.470 --> 03:06.470
逻辑程的话使用的是这个js core

03:06.470 --> 03:08.470
来运行这个js代码

03:08.470 --> 03:10.470
这个是它官方给的这个价格图

03:10.470 --> 03:12.470
刚才我们也看了

03:12.470 --> 03:13.470
对不对

03:13.470 --> 03:14.470
OK

03:14.470 --> 03:15.470
好

03:15.470 --> 03:17.470
可以从图中可以看出

03:17.470 --> 03:20.470
由于这个渲染程和逻辑程分开

03:20.470 --> 03:23.470
然后一个小程序它又有多个界面

03:23.470 --> 03:24.470
所以说这个渲染程的话

03:24.470 --> 03:27.470
它是存在多个webobu的

03:27.470 --> 03:29.470
什么是webobu

03:29.470 --> 03:30.470
什么是webobu

03:30.470 --> 03:31.470
webobu的话

03:31.470 --> 03:33.470
你可以把它想象成一个

03:33.470 --> 03:35.470
欠入式的这个浏览器

03:35.470 --> 03:36.470
它实际上是什么呢

03:36.470 --> 03:39.470
是这个原生里面的一个组件

03:39.470 --> 03:42.470
就原生应用里面的一个这个组件

03:42.470 --> 03:44.470
正因为有它的这个存在

03:44.470 --> 03:45.470
它的话

03:45.470 --> 03:46.470
然后就有点类似于这种

03:46.470 --> 03:48.470
欠入式的这个浏览器

03:48.470 --> 03:50.470
正因为有它的存在

03:50.470 --> 03:51.470
说说出现了什么呢

03:51.470 --> 03:53.470
出现了一种这种新的

03:53.470 --> 03:54.470
移动端的开发模式

03:54.470 --> 03:57.470
叫做这个haberate的应用

03:57.470 --> 03:58.470
那我们这边呢

03:58.470 --> 03:59.470
我们可以简单的回忆一下

03:59.470 --> 04:00.470
移动端

04:00.470 --> 04:01.470
就目前来讲

04:01.470 --> 04:04.470
移动端开发的三种模式

04:04.470 --> 04:05.470
是哪三种

04:05.470 --> 04:06.470
这个的话

04:06.470 --> 04:07.470
实际上

04:07.470 --> 04:08.470
之前讲webobu app也好

04:08.470 --> 04:10.470
讲这个rn也好

04:10.470 --> 04:11.470
都是给大家提过的

04:11.470 --> 04:13.470
但有可能你那两门客

04:13.470 --> 04:14.470
你没有听过

04:14.470 --> 04:15.470
对吧

04:15.470 --> 04:17.470
我们简单的回忆一下

04:17.470 --> 04:18.470
当前的话

04:18.470 --> 04:20.470
就是我们移动端的开发的话

04:20.470 --> 04:21.470
主要来讲

04:21.470 --> 04:23.470
实际上有三种模式

04:23.470 --> 04:24.470
哪三种模式呢

04:24.470 --> 04:25.470
首先第一个就是

04:25.470 --> 04:27.470
原生应用

04:27.470 --> 04:29.470
所谓原生应用

04:29.470 --> 04:30.470
顾名思义就是什么

04:30.470 --> 04:32.470
顾名思义就是你iOS平台

04:32.470 --> 04:34.470
我用这个iOS的这个开发套件

04:34.470 --> 04:35.470
比如说

04:35.470 --> 04:37.470
然后还有就是对应的开发语言

04:37.470 --> 04:38.470
对吧

04:38.470 --> 04:39.470
比如说最早的话是

04:39.470 --> 04:40.470
objectivec

04:40.470 --> 04:42.470
现在的话是swift

04:42.470 --> 04:44.470
来开发这个iOS应用

04:44.470 --> 04:45.470
好

04:45.470 --> 04:47.470
这个就是android

04:47.470 --> 04:48.470
android的话

04:48.470 --> 04:50.470
然后早期的话是用这个java

04:50.470 --> 04:53.470
现在的话可以用这个cultlin

04:53.470 --> 04:55.470
来开发这个android的应用

04:55.470 --> 04:57.470
这个就是个字开发

04:57.470 --> 04:58.470
对不对

04:58.470 --> 04:59.470
早期的话你这个原生

04:59.470 --> 05:01.470
就是开发这个移动端的

05:01.470 --> 05:02.470
这个原生应用

05:02.470 --> 05:04.470
这个和咱们前端

05:04.470 --> 05:06.470
实际上是没有什么关系的

05:06.470 --> 05:07.470
后来出现了个什么呢

05:07.470 --> 05:09.470
后来出现了一个rn

05:09.470 --> 05:13.470
react native

05:13.470 --> 05:14.470
react native的出现

05:14.470 --> 05:15.470
它就可以干嘛呢

05:15.470 --> 05:17.470
它这边的话就可以让我们

05:17.470 --> 05:19.470
前端设入到什么呢

05:19.470 --> 05:22.470
设入到这个原生应用的开发

05:22.470 --> 05:24.470
在这个react native里面

05:24.470 --> 05:26.470
它封装了一套组件

05:26.470 --> 05:27.470
然后接下来你统一的话

05:27.470 --> 05:30.470
就用那套组件来开发这个

05:30.470 --> 05:31.470
移动端的应用

05:31.470 --> 05:32.470
开发完了之后

05:32.470 --> 05:34.470
然后接下来你编译打包

05:34.470 --> 05:35.470
然后接下来的话

05:35.470 --> 05:37.470
你如果是编译成iOS的应用

05:37.470 --> 05:38.470
那么它最终的话

05:38.470 --> 05:40.470
它会那个就是

05:40.470 --> 05:41.470
把你写的那些组件

05:41.470 --> 05:43.470
替换成这个iOS里面

05:43.470 --> 05:45.470
固有的这些组件

05:45.470 --> 05:47.470
如果是你打包成这个Android应用

05:47.470 --> 05:48.470
然后接下来

05:48.470 --> 05:50.470
它就可以打包成这个Android里面

05:50.470 --> 05:52.470
就是特有的这个组件

05:52.470 --> 05:53.470
相当于你用这个开发的话

05:53.470 --> 05:55.470
还更快了

05:55.470 --> 05:56.470
对吧

05:56.470 --> 05:57.470
以前的话你要找两拨人

05:57.470 --> 05:58.470
找两拨人

05:58.470 --> 05:59.470
然后一拨人写iOS

05:59.470 --> 06:00.470
一拨人写Android

06:00.470 --> 06:01.470
那现在的话

06:01.470 --> 06:02.470
你只需要找什么呢

06:02.470 --> 06:04.470
只需要找这个前端

06:04.470 --> 06:07.470
前端是要用这个rn来进行开发

06:07.470 --> 06:08.470
开发完了之后

06:08.470 --> 06:09.470
它还是跨平态的

06:09.470 --> 06:10.470
OK

06:10.470 --> 06:12.470
这是原生应用

06:12.470 --> 06:13.470
但这个rn的话

06:13.470 --> 06:16.470
一直就是没推出这个1.0版本

06:16.470 --> 06:18.470
如果听过我讲这个rn

06:18.470 --> 06:20.470
课的这个同学应该知道

06:20.470 --> 06:21.470
我在讲课的时候

06:21.470 --> 06:23.470
经常就在说这个问题

06:23.470 --> 06:26.470
它到现在为止都好像才0.71

06:26.470 --> 06:28.470
一直都没推出1.0

06:28.470 --> 06:29.470
说里面的话

06:29.470 --> 06:32.470
导致实际上问题还是蛮多的

06:32.470 --> 06:34.470
你如果是开发简单的那种应用的话

06:34.470 --> 06:36.470
没太大问题

06:36.470 --> 06:37.470
如果是复杂点的话

06:37.470 --> 06:40.470
然后里面坑挺多的

06:40.470 --> 06:41.470
这是第一种模式

06:41.470 --> 06:43.470
第二种模式

06:43.470 --> 06:44.470
第二种模式是什么呢

06:44.470 --> 06:45.470
第二种模式是这个

06:45.470 --> 06:47.470
web app

06:47.470 --> 06:49.470
什么叫做web app

06:49.470 --> 06:50.470
我们知道我们现在的话

06:50.470 --> 06:53.470
开发这个web

06:53.470 --> 06:56.470
就是以前叫的网站

06:56.470 --> 06:57.470
对不对

06:57.470 --> 06:58.470
以前叫的网站

06:58.470 --> 06:59.470
现在叫什么

06:59.470 --> 07:00.470
现在叫应用

07:00.470 --> 07:01.470
现在叫应用

07:01.470 --> 07:02.470
为什么

07:02.470 --> 07:04.470
为什么会有这个区别

07:04.470 --> 07:05.470
原因是不是就是

07:05.470 --> 07:06.470
从以前的多页

07:06.470 --> 07:09.470
转换成了现在的单页

07:09.470 --> 07:10.470
对不对

07:10.470 --> 07:12.470
以前的话我们写一个网站

07:12.470 --> 07:13.470
那网站里面的话

07:13.470 --> 07:15.470
会有一张一张的页面

07:15.470 --> 07:17.470
在最最早期的时候

07:17.470 --> 07:18.470
你写一个网站

07:18.470 --> 07:20.470
还要按网页的页数

07:20.470 --> 07:21.470
就张数

07:21.470 --> 07:24.470
多少张网页来进行一个收费

07:24.470 --> 07:26.470
现在的话就都进入到什么

07:26.470 --> 07:28.470
进入到单页应用时代了

07:28.470 --> 07:29.470
所谓单页应用的话

07:29.470 --> 07:31.470
就是整体页面只有一个

07:31.470 --> 07:33.470
然后接下来的话

07:33.470 --> 07:36.470
通过这个接式来切换模块

07:36.470 --> 07:38.470
给用户的使用感觉

07:38.470 --> 07:39.470
更像是一个什么

07:39.470 --> 07:41.470
是不是更像是一个应用

07:41.470 --> 07:42.470
对不对

07:42.470 --> 07:44.470
说说为什么有单页应用

07:44.470 --> 07:46.470
这个词语

07:46.470 --> 07:48.470
就是这么来的

07:48.470 --> 07:50.470
那接下来的话在pc端

07:50.470 --> 07:52.470
pc端的话可能感觉不大

07:52.470 --> 07:54.470
你到了这个移动端

07:54.470 --> 07:55.470
移动端的话

07:55.470 --> 07:56.470
你这种就只有一个页面的话

07:56.470 --> 07:59.470
是不是就特别像一个app

07:59.470 --> 08:00.470
对不对

08:00.470 --> 08:01.470
特别像个app

08:01.470 --> 08:02.470
说这边的话

08:02.470 --> 08:04.470
所谓的web app

08:04.470 --> 08:06.470
它的本质就是使用什么

08:06.470 --> 08:09.470
本质就是使用html

08:09.470 --> 08:11.470
css

08:11.470 --> 08:14.470
就是你已经学过的这个技术

08:14.470 --> 08:15.470
来开发什么

08:15.470 --> 08:16.470
来开发这个单页应用

08:16.470 --> 08:17.470
开发单页应用

08:17.470 --> 08:18.470
开发完了之后

08:18.470 --> 08:20.470
人家使用这个浏览器

08:20.470 --> 08:21.470
手机上是不是也有浏览器

08:21.470 --> 08:22.470
对不对

08:22.470 --> 08:24.470
使用这个浏览器去访问

08:24.470 --> 08:25.470
访问的时候

08:25.470 --> 08:26.470
由于它又是单页的

08:26.470 --> 08:27.470
你感觉就像

08:27.470 --> 08:29.470
就是一个应用一样

08:29.470 --> 08:31.470
但它的体验的话

08:31.470 --> 08:32.470
相比这个原生应用

08:32.470 --> 08:34.470
肯定就要差一些

08:34.470 --> 08:35.470
相比原生应用就要差一些

08:35.470 --> 08:38.470
它这边的优点在于什么呢

08:38.470 --> 08:39.470
优点在于快

08:39.470 --> 08:41.470
你没有基本上

08:41.470 --> 08:44.470
基本上就是你的学习成本比较低

08:44.470 --> 08:45.470
因为它就是什么

08:45.470 --> 08:47.470
就是html css和js

08:47.470 --> 08:48.470
对不对

08:48.470 --> 08:49.470
但它会有一些新的知识

08:49.470 --> 08:51.470
比如说这个适配之类的

08:51.470 --> 08:53.470
然后就要如何调

08:53.470 --> 08:55.470
原生的一些接口之类的

08:55.470 --> 08:57.470
会有这么一方面的学习成本

08:57.470 --> 08:58.470
但是整体来讲的话

08:58.470 --> 09:01.470
实际上还是比较低的

09:01.470 --> 09:02.470
好

09:02.470 --> 09:04.470
最后一种的话

09:04.470 --> 09:06.470
就是这个haberate应用

09:06.470 --> 09:08.470
那这个典型的就是什么呢

09:08.470 --> 09:09.470
比如说你们可能听过

09:09.470 --> 09:11.470
比较unipp

09:11.470 --> 09:13.470
unipp就是典型的

09:13.470 --> 09:15.470
开发haberate的应用的

09:15.470 --> 09:16.470
包括什么呢

09:16.470 --> 09:18.470
包括我们的微信小程序

09:18.470 --> 09:20.470
它其实让它的本质

09:20.470 --> 09:23.470
实际上也是一个haberate的应用

09:23.470 --> 09:24.470
它的原理是什么呢

09:24.470 --> 09:25.470
它的原理的话

09:25.470 --> 09:26.470
实际上刚才我已经讲了

09:26.470 --> 09:28.470
就是我们在这个原生应用中

09:28.470 --> 09:29.470
原生应用里面

09:29.470 --> 09:31.470
它有各种各样的组件

09:31.470 --> 09:32.470
对不对

09:32.470 --> 09:33.470
有各种各样的组件

09:33.470 --> 09:36.470
其中有个组件就叫做weboview

09:36.470 --> 09:37.470
那这个weboview的话

09:37.470 --> 09:40.470
你就可以把它想象成一个小型的浏览器

09:40.470 --> 09:42.470
然后接下来在这个浏览器里面

09:42.470 --> 09:43.470
你就可以干嘛

09:43.470 --> 09:44.470
是不是这个浏览网页

09:44.470 --> 09:45.470
对不对

09:45.470 --> 09:47.470
那接下来就出现了一种新的

09:47.470 --> 09:49.470
这个开发的模式

09:49.470 --> 09:50.470
什么模式呢

09:50.470 --> 09:51.470
就我这边的话

09:51.470 --> 09:53.470
我外层用这个原生应用

09:53.470 --> 09:55.470
外层的话是一个原生应用

09:55.470 --> 09:56.470
然后里面的话

09:56.470 --> 09:58.470
我就给它套一个weboview

09:58.470 --> 09:59.470
然后在这个weboview的话

09:59.470 --> 10:00.470
然后里面的话就采用什么呢

10:00.470 --> 10:02.470
就采用这种weboview

10:02.470 --> 10:03.470
这种开发

10:03.470 --> 10:07.470
说这种的话也被称之为这个套壳应用

10:07.470 --> 10:08.470
相当于你这边的话

10:08.470 --> 10:11.470
weboviewp然后加外层套了一个什么

10:11.470 --> 10:13.470
套了个原生的这个壳

10:13.470 --> 10:15.470
对不对

10:15.470 --> 10:16.470
好

10:16.470 --> 10:18.470
然后接下来在明确的这个微信小程序

10:18.470 --> 10:21.470
它是一种haberate的应用之后

10:21.470 --> 10:22.470
然后接下来的话

10:22.470 --> 10:23.470
我们来说回来

10:23.470 --> 10:26.470
我们刚才在看这个官方的这个文档的时候

10:26.470 --> 10:28.470
官方的话他这边画了个图

10:28.470 --> 10:30.470
他这边的话是双线程

10:30.470 --> 10:31.470
对不对

10:31.470 --> 10:32.470
双线程

10:32.470 --> 10:34.470
那他为什么采用这个双线程呢

10:34.470 --> 10:35.470
那这边的话

10:35.470 --> 10:37.470
在我看来的话至少有这么几个好处

10:37.470 --> 10:42.470
首先第一个就是避免单线程主设的问题

10:42.470 --> 10:43.470
我们之前的话

10:43.470 --> 10:46.470
在这个浏览器里面我们知道

10:46.470 --> 10:48.470
你整个这个浏览器在渲染页面的时候

10:48.470 --> 10:49.470
他靠的是什么

10:49.470 --> 10:52.470
说靠的是这个渲染主线程

10:52.470 --> 10:53.470
对不对

10:53.470 --> 10:54.470
然后接下来在渲染主线程

10:54.470 --> 10:55.470
它在进行渲染的时候

10:55.470 --> 10:58.470
这个页面的渲染和接式的执行

10:58.470 --> 11:00.470
它是互斥的对不对

11:00.470 --> 11:02.470
那你这边的话你这个双线

11:02.470 --> 11:03.470
这个双线程的话

11:03.470 --> 11:05.470
它可以有效的避免这个问题

11:05.470 --> 11:06.470
好

11:06.470 --> 11:07.470
人家第二个

11:07.470 --> 11:09.470
第二个的话就是你看这里

11:09.470 --> 11:11.470
这里是多个微博view

11:11.470 --> 11:12.470
对不对

11:12.470 --> 11:13.470
多个微博view的话

11:13.470 --> 11:14.470
他这边的话

11:14.470 --> 11:15.470
实际上更加接近

11:15.470 --> 11:17.470
与原生应用的这个体

11:17.470 --> 11:18.470
这个我们一会再来说

11:18.470 --> 11:19.470
好

11:19.470 --> 11:21.470
然后最后就是这个

11:21.470 --> 11:23.470
依赖这个内体物层

11:23.470 --> 11:24.470
做这个转发

11:24.470 --> 11:25.470
好

11:25.470 --> 11:27.470
那你这个逻辑层和渲染层

11:27.470 --> 11:31.470
它就可以更加专注于自身的这个职责

11:31.470 --> 11:32.470
ok

11:32.470 --> 11:34.470
来我们一个一个来看

11:34.470 --> 11:37.470
首先第一个是避免单线程

11:37.470 --> 11:38.470
主色的问题

11:38.470 --> 11:39.470
这个的话刚我说过了

11:39.470 --> 11:42.470
就你浏览器在渲染页面的时候

11:42.470 --> 11:45.470
它靠的是这个渲染线程进行渲染

11:45.470 --> 11:46.470
那所有的活的话

11:46.470 --> 11:48.470
都是这个渲染主线程在做

11:48.470 --> 11:50.470
那你页面的渲染和接式

11:50.470 --> 11:51.470
它是什么

11:51.470 --> 11:53.470
它本账它是互斥的

11:53.470 --> 11:54.470
这边的话我写了个例子

11:54.470 --> 11:56.470
我们把这个例子看一下

11:56.470 --> 11:57.470
这个例子的话

11:57.470 --> 11:58.470
实际上之前的话

11:58.470 --> 11:59.470
应该也是看过的

12:01.470 --> 12:03.470
这边的话我新建一个

12:03.470 --> 12:05.470
比如说demo2

12:06.470 --> 12:08.470
把拉到vscode里面

12:08.470 --> 12:12.640
好

12:12.640 --> 12:13.640
然后这边的话

12:13.640 --> 12:14.640
我们新建一个

12:14.640 --> 12:15.640
稍等啊

12:15.640 --> 12:21.830
把这个放大一点

12:21.830 --> 12:23.830
把这个放大一点

12:23.830 --> 12:25.830
把这个关了

12:25.830 --> 12:26.830
ok

12:26.830 --> 12:27.830
好我们这边的话

12:27.830 --> 12:28.830
首先的话这里

12:28.830 --> 12:30.830
这里是对应的html

12:30.830 --> 12:32.830
首先有一个button

12:32.830 --> 12:33.830
人家这边有两个div

12:33.830 --> 12:34.830
一个one

12:34.830 --> 12:35.830
一个two

12:35.830 --> 12:36.830
好

12:36.830 --> 12:38.830
然后接下来的话

12:38.830 --> 12:40.830
这里

12:40.830 --> 12:41.830
然后接下来的话

12:41.830 --> 12:42.830
这边是这个样式

12:42.830 --> 12:43.830
把这个样式

12:43.830 --> 12:44.830
我们把拿过来

12:44.830 --> 12:48.210
把样式拿过来

12:48.210 --> 12:49.210
然后接下来

12:49.210 --> 12:50.210
这边style

12:50.210 --> 12:52.210
放到这里

12:53.210 --> 12:54.210
简单看一下这个样式

12:54.210 --> 12:55.210
这个样式的话

12:55.210 --> 12:56.210
就是这两个div

12:56.210 --> 12:57.210
个字的话

12:57.210 --> 12:58.210
宽100

12:58.210 --> 12:59.210
高100

12:59.210 --> 13:00.210
然后这边是一个圆形

13:00.210 --> 13:01.210
个字的话

13:01.210 --> 13:03.210
给了动画

13:03.210 --> 13:05.210
这边第一个动画的话

13:05.210 --> 13:07.210
是通过这个transform来做的

13:07.210 --> 13:08.210
第二个动画

13:08.210 --> 13:10.210
是通过控制这个left

13:10.210 --> 13:11.210
就是你这边的话

13:11.210 --> 13:12.210
把它定位

13:12.210 --> 13:13.210
我看2

13:13.210 --> 13:14.210
这边看到没有

13:14.210 --> 13:15.210
position

13:15.210 --> 13:16.210
定位了之后

13:16.210 --> 13:17.210
通过修改这个left

13:17.210 --> 13:18.210
来进行一个这个移动

13:18.210 --> 13:19.210
好

13:19.210 --> 13:20.210
然后接下来我们来看一下

13:20.210 --> 13:21.210
现在的话

13:21.210 --> 13:24.580
应该是可以移动起来的

13:24.580 --> 13:25.580
看一下

13:25.580 --> 13:26.580
这边是不是两个小球

13:26.580 --> 13:27.580
是不是都在移动

13:27.580 --> 13:28.580
对不对

13:28.580 --> 13:29.580
只不过这两个小球

13:29.580 --> 13:31.580
移动的这个就是圆理

13:31.580 --> 13:32.580
它是不一样的

13:32.580 --> 13:33.580
这两个小球的话

13:33.580 --> 13:34.580
靠的是transform

13:34.580 --> 13:35.580
第二个小球的话

13:35.580 --> 13:37.580
是靠的是修改这个left

13:37.580 --> 13:38.580
好

13:38.580 --> 13:39.580
然后接下来的话

13:39.580 --> 13:40.580
我们这边

13:40.580 --> 13:42.580
我们把这ts

13:42.580 --> 13:45.280
把它过来

13:45.280 --> 13:47.280
放到这边

13:47.280 --> 13:48.280
script

13:49.280 --> 13:50.280
个字画一下

13:50.280 --> 13:51.280
好

13:51.280 --> 13:52.280
这个ts

13:52.280 --> 13:53.280
你看这边的话

13:53.280 --> 13:54.280
给这个btn

13:54.280 --> 13:55.280
绑了一个点击事件

13:55.280 --> 13:56.280
点击事件里面很简单

13:56.280 --> 13:58.280
是不是就是延迟5秒

13:58.280 --> 13:59.280
好人家这边

13:59.280 --> 14:00.280
做了一个延迟

14:00.280 --> 14:01.280
延迟的话

14:01.280 --> 14:02.280
这边实际上就是什么

14:02.280 --> 14:04.280
会花费5秒的

14:04.280 --> 14:06.280
这个一段接视

14:06.280 --> 14:07.280
那你这边的话

14:07.280 --> 14:08.280
你这个接视

14:08.280 --> 14:10.280
会花费5秒

14:10.280 --> 14:11.280
意味着什么

14:11.280 --> 14:13.280
意味着它会注射5秒

14:13.280 --> 14:14.280
对不对

14:14.280 --> 14:15.280
好

14:15.280 --> 14:16.280
来我们这边保存一下

14:16.280 --> 14:17.280
我们这边来看一下

14:17.280 --> 14:18.280
好

14:18.280 --> 14:19.280
我注意

14:19.280 --> 14:21.280
我现在我点击

14:21.280 --> 14:22.280
比如说它这边

14:22.280 --> 14:23.280
现在我点一下

14:23.280 --> 14:24.280
你看

14:24.280 --> 14:25.280
这个小球

14:25.280 --> 14:26.280
你看

14:26.280 --> 14:28.280
它的渲染是不是就停住了

14:28.280 --> 14:29.280
为什么停住了

14:29.280 --> 14:30.280
因为它

14:30.280 --> 14:31.280
现在的话

14:31.280 --> 14:34.280
浏览器的那个渲染主线程

14:34.280 --> 14:35.280
它要去干吗

14:35.280 --> 14:37.280
它是不是它要去执行JS

14:37.280 --> 14:38.280
对不对

14:38.280 --> 14:39.280
它要执行JS

14:39.280 --> 14:41.280
JS的执行和这个渲染

14:41.280 --> 14:42.280
它是互斥的

14:42.280 --> 14:44.280
但上面这个就没有问题

14:44.280 --> 14:46.280
因为上面这个triceform的话

14:46.280 --> 14:47.280
它是在另外一个线程

14:47.280 --> 14:48.280
OK

14:48.280 --> 14:49.280
这就是为什么

14:49.280 --> 14:50.280
现在的话

14:50.280 --> 14:51.280
你比如说你要做动画

14:51.280 --> 14:54.280
更加推荐大家使用这个triceform

14:54.280 --> 14:55.280
OK

14:55.280 --> 14:57.280
这个是关于这个组色的问题

14:57.280 --> 14:59.280
这边确确实是会组色

14:59.280 --> 15:00.280
对不对

15:00.280 --> 15:01.280
然后接下来

15:01.280 --> 15:03.280
我们这边回到这里

15:03.280 --> 15:04.280
我们再想一想

15:04.280 --> 15:06.280
如果在小程序里面

15:06.280 --> 15:08.280
它会不会存在这个问题

15:08.280 --> 15:10.280
大家可以先思考一下

15:10.280 --> 15:13.280
小程序里面会不会存在这个问题

15:13.280 --> 15:14.280
我们想一想

15:14.280 --> 15:17.280
刚才之所以出现那个问题

15:17.280 --> 15:18.280
是因为什么原因

15:18.280 --> 15:20.280
是不是就是因为单线程的原因

15:20.280 --> 15:21.280
对不对

15:21.280 --> 15:22.280
单线程的话

15:22.280 --> 15:24.280
你那个JS的执行和那个

15:24.280 --> 15:25.280
页面的渲染

15:25.280 --> 15:26.280
它是互斥的

15:26.280 --> 15:28.280
你这边在执行JS

15:28.280 --> 15:29.280
那自然而然就管不到什么

15:29.280 --> 15:31.280
是管不到这个页面的渲染

15:31.280 --> 15:32.280
对不对

15:32.280 --> 15:33.280
说说我们这边的话

15:33.280 --> 15:34.280
在小程序里面的话

15:34.280 --> 15:36.280
它就不存在这个问题

15:36.280 --> 15:37.280
为什么

15:37.280 --> 15:38.280
因为小程序里面

15:38.280 --> 15:39.280
我们刚才看了图

15:39.280 --> 15:40.280
它是什么

15:40.280 --> 15:42.280
是不是两个线册

15:42.280 --> 15:43.280
对不对

15:43.280 --> 15:44.280
两个线册

15:44.280 --> 15:45.280
好来我们这边

15:45.280 --> 15:46.280
我还是来看一下

15:46.280 --> 15:48.280
这边仍然是写了一个例子

15:48.280 --> 15:51.280
我们这边把那个小程序

15:51.280 --> 15:54.850
我们把它打开

15:54.850 --> 15:55.850
把这个

15:55.850 --> 15:57.850
我们这边把这个小程序

15:57.850 --> 15:58.850
把它打开

15:59.850 --> 16:03.420
把它过来

16:03.420 --> 16:04.420
把这个小程序启动起来

16:04.420 --> 16:05.420
那现在这边

16:05.420 --> 16:11.460
我们把这个代码拿过来

16:11.460 --> 16:12.460
这里

16:12.460 --> 16:13.460
这边首先

16:13.460 --> 16:16.460
这个是WX面

16:16.460 --> 16:20.020
把它放到这里

16:20.020 --> 16:22.020
这是WX面

16:22.020 --> 16:25.020
把这些都删了

16:25.020 --> 16:27.020
稍等我把这些都删了

16:27.020 --> 16:28.020
OK

16:28.020 --> 16:30.020
好 这里

16:30.020 --> 16:31.020
这边的话

16:31.020 --> 16:32.020
这个WX面

16:32.020 --> 16:33.020
这个很简单

16:33.020 --> 16:34.020
对不对

16:34.020 --> 16:35.020
也是主设

16:35.020 --> 16:36.020
然后加有两个

16:36.020 --> 16:38.020
两个盒子

16:38.020 --> 16:39.020
然后接下来

16:39.020 --> 16:40.020
这边这个是样式

16:40.020 --> 16:43.020
样式基本也是差不多的

16:43.020 --> 16:44.020
也是差不多的

16:44.020 --> 16:45.020
把拿过来

16:45.020 --> 16:47.020
放到这边

16:47.020 --> 16:49.720
放到这边

16:49.720 --> 16:51.720
也是这边就是两个动画

16:51.720 --> 16:52.720
一个是通过Trice Form

16:52.720 --> 16:54.720
一个是通过Lift

16:54.720 --> 16:55.720
然后接下来

16:55.720 --> 16:56.720
这边

16:56.720 --> 16:57.720
这边这个Page

16:57.720 --> 16:59.720
把拿过来

16:59.720 --> 17:06.430
放到这个GS里面

17:06.430 --> 17:07.430
这边的话

17:07.430 --> 17:08.430
有一个叫做Delay的方法

17:08.430 --> 17:09.430
对不对

17:09.430 --> 17:10.430
这边让你传入一个时间

17:10.430 --> 17:11.430
然后将我这边开始主设

17:11.430 --> 17:13.430
这边我会打一个主设开始

17:13.430 --> 17:15.430
大家这边执行一个Wild

17:15.430 --> 17:16.430
好 然后主设完毕之后

17:16.430 --> 17:17.430
主设结束

17:17.430 --> 17:18.430
这边的话

17:18.430 --> 17:20.430
你这边点击这个事件

17:20.430 --> 17:21.430
点击事件

17:21.430 --> 17:22.430
这边hand type

17:22.430 --> 17:23.430
对应的就是什么

17:23.430 --> 17:24.430
是不是就是这个

17:24.430 --> 17:25.430
这个里面就是干嘛

17:25.430 --> 17:27.430
是不是要用Z点Delay

17:27.430 --> 17:28.430
然后主设5秒

17:28.430 --> 17:29.430
对不对

17:29.430 --> 17:30.430
保存

17:30.430 --> 17:33.320
好 保存之后

17:33.320 --> 17:34.320
大家这边看一下

17:34.320 --> 17:36.320
首先仍然是两个小球在移动

17:36.320 --> 17:37.320
对不对

17:37.320 --> 17:38.320
好

17:38.320 --> 17:39.320
然后接下来

17:39.320 --> 17:40.320
我点击这个按钮

17:40.320 --> 17:41.320
点击

17:41.320 --> 17:43.320
你可以看到这边主设开始

17:43.320 --> 17:44.320
对不对

17:44.320 --> 17:45.320
主设开始

17:45.320 --> 17:46.320
然后5秒之后

17:46.320 --> 17:47.320
主设结束

17:47.320 --> 17:48.320
但是你可以看到就是

17:48.320 --> 17:49.320
下面的那个小球

17:49.320 --> 17:51.320
有没有受影响

17:51.320 --> 17:53.320
下面那个蓝色的小球

17:53.320 --> 17:55.320
是没有受影响

17:55.320 --> 17:56.320
对不对

17:56.320 --> 17:57.320
没有受影响

17:57.320 --> 17:58.320
为什么

17:58.320 --> 17:59.320
因为它是多线程

17:59.320 --> 18:01.320
它不像那个就是浏览期段

18:01.320 --> 18:02.320
它是单线程

18:02.320 --> 18:03.320
对不对

18:03.320 --> 18:05.320
就是这个原因

18:05.320 --> 18:06.320
就这个原因

18:06.320 --> 18:07.320
OK

18:07.320 --> 18:08.320
所以首先

18:08.320 --> 18:09.320
第一点

18:09.320 --> 18:10.320
第一点

18:10.320 --> 18:11.320
这边

18:11.320 --> 18:12.320
避免单线程

18:12.320 --> 18:13.320
主设问题

18:13.320 --> 18:14.320
OK

18:14.320 --> 18:15.320
好

18:15.320 --> 18:17.320
接下来第二点

18:17.320 --> 18:18.320
第二点

18:18.320 --> 18:19.320
就是你多个webview

18:19.320 --> 18:20.320
更接近

18:20.320 --> 18:22.320
与原生应用的体

18:22.320 --> 18:24.320
这个什么意思

18:24.320 --> 18:25.320
首先我们刚才知道

18:25.320 --> 18:26.320
你这边的话

18:26.320 --> 18:27.320
你看

18:27.320 --> 18:28.320
看这个微信小程序

18:28.320 --> 18:29.320
它这边的话

18:29.320 --> 18:30.320
它这个架构图

18:30.320 --> 18:31.320
它这边的话

18:31.320 --> 18:33.320
相对于这个逻辑程

18:33.320 --> 18:34.320
渲染程的话

18:34.320 --> 18:36.320
它是不是会存在多个webview

18:36.320 --> 18:37.320
对不对

18:37.320 --> 18:38.320
你这边

18:38.320 --> 18:39.320
只要打开一个页面

18:39.320 --> 18:40.320
它这边

18:40.320 --> 18:42.320
就会新建一个webview

18:42.320 --> 18:43.320
OK

18:43.320 --> 18:44.320
那接下来的话

18:44.320 --> 18:45.320
这个的话

18:45.320 --> 18:47.320
它的体验

18:47.320 --> 18:48.320
会更加接近

18:48.320 --> 18:49.320
与原生体验

18:49.320 --> 18:51.320
为什么这么说

18:51.320 --> 18:54.320
我们在浏览期的单页应用中

18:54.320 --> 18:55.320
你渲染页面的话

18:55.320 --> 18:57.320
是通过路由识别

18:57.320 --> 18:59.320
就我们的前端路由

18:59.320 --> 19:00.320
还记得吧

19:00.320 --> 19:02.320
你无论是这个view也好

19:02.320 --> 19:03.320
还是react也好

19:03.320 --> 19:05.320
它是不是有个前端路由库

19:05.320 --> 19:06.320
对不对

19:06.320 --> 19:08.320
你首先呢匹配这个路由

19:08.320 --> 19:09.320
路由匹配上了之后

19:09.320 --> 19:11.320
要确认对应了组件

19:11.320 --> 19:13.320
这个路由识别后

19:13.320 --> 19:15.320
会动态的将页面

19:15.320 --> 19:16.320
或者说组件

19:16.320 --> 19:18.320
这边说组件

19:18.320 --> 19:21.760
这边组件

19:21.760 --> 19:23.760
会将这个组件

19:23.760 --> 19:25.760
挂载到root节点中去

19:25.760 --> 19:27.760
如果这个单页面应用

19:27.760 --> 19:29.760
是打开一个新的页面

19:29.760 --> 19:30.760
那需要干嘛呢

19:30.760 --> 19:31.760
需要先卸载掉

19:31.760 --> 19:33.760
当前页面的结构

19:33.760 --> 19:34.760
并且重新确认

19:34.760 --> 19:35.760
这个很好理解吧

19:35.760 --> 19:37.760
比如说我举个例子

19:37.760 --> 19:38.760
画个图

19:38.760 --> 19:39.760
画个图

19:39.760 --> 19:40.760
比如这边的话

19:40.760 --> 19:41.760
这个有个导航男

19:41.760 --> 19:42.760
对吧

19:42.760 --> 19:43.760
这个是第一项

19:43.760 --> 19:44.760
这个是第二项

19:44.760 --> 19:45.760
这个是第三项

19:45.760 --> 19:46.760
这个是第四项

19:46.760 --> 19:47.760
然后接下来右边

19:47.760 --> 19:48.760
右边的话是根据什么呢

19:48.760 --> 19:50.760
根据你这边的选择

19:50.760 --> 19:52.760
根据你这边左边的选择

19:52.760 --> 19:53.760
然后加这边的话

19:53.760 --> 19:54.760
渲染不一样的这个内容

19:54.760 --> 19:55.760
好那接下来

19:55.760 --> 19:56.760
我首先我点击第1个

19:56.760 --> 19:57.760
点击第1个的话

19:57.760 --> 19:58.760
再加这边渲染的

19:58.760 --> 19:59.760
是不是就是第1个相关内容

19:59.760 --> 20:01.760
好再加我这边点击

20:01.760 --> 20:02.760
比如点击第3个

20:02.760 --> 20:03.760
点击第3个的话

20:03.760 --> 20:04.760
它会把之前的内容干嘛

20:04.760 --> 20:06.760
是不是卸载掉

20:06.760 --> 20:07.760
对不对

20:07.760 --> 20:08.760
打个叉

20:08.760 --> 20:09.760
把它卸载掉

20:09.760 --> 20:10.760
然后再加干嘛

20:10.760 --> 20:11.760
重新进行这个渲染

20:11.760 --> 20:12.760
对不对

20:12.760 --> 20:13.760
单一应用的话

20:13.760 --> 20:14.760
它这边是这个样子的

20:14.760 --> 20:15.760
OK

20:15.760 --> 20:16.760
说它这边的话

20:16.760 --> 20:17.760
你看

20:17.760 --> 20:19.760
需要先卸载掉

20:19.760 --> 20:21.760
当前的页面结构

20:21.760 --> 20:24.760
并且重新渲染

20:24.760 --> 20:26.760
但是我们原生的APP

20:26.760 --> 20:28.760
是不是这样子的呢

20:28.760 --> 20:30.760
实际上我们原生的APP

20:30.760 --> 20:32.760
并不是这个样子的

20:32.760 --> 20:34.760
一个比较明显的特征

20:34.760 --> 20:36.760
你看我这边结了个图

20:36.760 --> 20:38.760
一个比较明显的特征

20:38.760 --> 20:39.760
就是什么呢

20:39.760 --> 20:41.760
你从页面右侧向左

20:41.760 --> 20:43.760
滑入到一个新页面的时候

20:43.760 --> 20:44.760
比如你看这边是一个页面

20:44.760 --> 20:46.760
这边是一个页面

20:46.760 --> 20:47.760
这边是一个页面

20:47.760 --> 20:48.760
这边是一个页面

20:48.760 --> 20:50.760
我这边让我再左右的滑动

20:50.760 --> 20:52.760
我们是可以同时

20:52.760 --> 20:54.760
看到两个页面的

20:54.760 --> 20:55.760
看到没有

20:55.760 --> 20:56.760
我们是可以同时

20:56.760 --> 20:57.760
看到两个页面的

20:57.760 --> 20:59.760
说明就是它这边的话

20:59.760 --> 21:00.760
上一个页面

21:00.760 --> 21:02.760
有没有被卸载掉

21:02.760 --> 21:03.760
有没有像单页应用那样子

21:03.760 --> 21:04.760
被卸载掉

21:04.760 --> 21:05.760
是没有

21:05.760 --> 21:06.760
对不对

21:06.760 --> 21:07.760
没有

21:07.760 --> 21:08.760
说这边的话

21:08.760 --> 21:10.760
多页面应用

21:10.760 --> 21:12.760
就能够很好的达到这个效果

21:12.760 --> 21:14.760
新页面直接滑动出来

21:14.760 --> 21:17.760
并且覆盖在旧页面上即可

21:17.760 --> 21:18.760
这个的话

21:18.760 --> 21:19.760
实际上也是小程序

21:19.760 --> 21:21.760
现在所做的这个形式

21:21.760 --> 21:22.760
你多个这个WebView的话

21:22.760 --> 21:23.760
能够更加接近

21:23.760 --> 21:26.760
于原生应用APP的用户体验

21:26.760 --> 21:27.760
OK

21:27.760 --> 21:29.760
这是第二点

21:29.760 --> 21:30.760
好

21:30.760 --> 21:31.760
然后接下来的话

21:31.760 --> 21:32.760
第三点

21:32.760 --> 21:33.760
第三点的话

21:33.760 --> 21:34.760
就是你依赖这个

21:34.760 --> 21:35.760
Latv成做转发

21:35.760 --> 21:38.760
那这个逻辑成和渲染成

21:38.760 --> 21:40.760
能够更加专注于

21:40.760 --> 21:42.760
自身的这个责任

21:42.760 --> 21:43.760
或者职责

21:43.760 --> 21:44.760
这个也很好理解

21:44.760 --> 21:45.760
我们刚才的话

21:45.760 --> 21:47.760
已经看了这个图了

21:47.760 --> 21:48.760
对不对

21:48.760 --> 21:49.760
你这边的这个渲染成

21:49.760 --> 21:50.760
逻辑成

21:50.760 --> 21:51.760
他们两个之间

21:51.760 --> 21:52.760
进行这个通信

21:52.760 --> 21:53.760
靠的是谁

21:53.760 --> 21:55.760
靠的是这个Latv

21:55.760 --> 21:56.760
Latv是谁

21:56.760 --> 21:58.760
Latv是这个微信客户端

21:58.760 --> 22:00.760
这就是靠的是你原生应用

22:00.760 --> 22:01.760
对不对

22:01.760 --> 22:03.760
你微信小程序说白了就是吗

22:03.760 --> 22:05.760
就是你这个里面有个WebView

22:05.760 --> 22:06.760
WebView

22:06.760 --> 22:07.760
然后接下来WebView

22:07.760 --> 22:09.760
渲染出来这个东西

22:09.760 --> 22:10.760
OK

22:10.760 --> 22:12.760
本质上基础是在谁上

22:12.760 --> 22:14.760
在这个Latv原生应用的这个基础上

22:14.760 --> 22:16.760
对不对

22:16.760 --> 22:17.760
这个意思

22:17.760 --> 22:18.760
OK

22:18.760 --> 22:19.760
说他这边的话

22:19.760 --> 22:21.760
靠这个Latv进行一个转发

22:21.760 --> 22:22.760
好那这边的话

22:22.760 --> 22:23.760
就是他的背后的话

22:23.760 --> 22:25.760
有强大的这个Latv成

22:25.760 --> 22:27.760
做这个背后的这个支撑

22:27.760 --> 22:29.760
那你这个Latv的话

22:29.760 --> 22:31.760
他除了做一些资源的动态注入

22:31.760 --> 22:33.760
他还负责很多的这个事情

22:33.760 --> 22:35.760
然后接下来这边的话就是

22:35.760 --> 22:36.760
请求的转发呀

22:36.760 --> 22:37.760
离线存储呀

22:37.760 --> 22:38.760
组建渲染啊

22:38.760 --> 22:39.760
这些

22:39.760 --> 22:42.760
这些实际上都是要依赖这个Latv成的

22:42.760 --> 22:43.760
OK

22:43.760 --> 22:45.760
那有了这个Latv成

22:45.760 --> 22:46.760
这么一个这个

22:46.760 --> 22:47.760
靠山后

22:47.760 --> 22:48.760
对吧

22:48.760 --> 22:50.760
那我这边的逻辑成和这个渲染成

22:50.760 --> 22:52.760
我可以更加的专注于支撑的这个指责

22:52.760 --> 22:53.760
OK

22:53.760 --> 22:55.760
大致的话就是这么3点

22:55.760 --> 22:56.760
OK

22:56.760 --> 22:57.760
好

22:57.760 --> 22:58.760
然后这些的话

22:58.760 --> 23:00.760
主要其实就是给大家介绍一下

23:00.760 --> 23:01.760
这个双

23:01.760 --> 23:02.760
这个双线存架构

23:02.760 --> 23:05.760
这个的话也是对应的官方文档的

23:05.760 --> 23:07.760
这边

23:07.760 --> 23:08.760
啊

23:08.760 --> 23:10.760
就是这边他第三章的时候

23:10.760 --> 23:12.760
给你介绍这个渲染成和逻辑成

23:12.760 --> 23:14.760
我把这个记一下嘛

23:14.760 --> 23:19.260
这下去大家把这个章节把它看一下

23:19.260 --> 23:24.050
课后阅读

23:24.050 --> 23:27.050
课后阅读

23:27.050 --> 23:30.050
官方文档

23:31.050 --> 23:33.050
好对应了这个

23:33.050 --> 23:34.050
这个部分

23:34.050 --> 23:36.050
渲染成和逻辑成

23:36.050 --> 23:37.050
把整个这一块

23:37.050 --> 23:39.050
把它下去看一下

23:39.050 --> 23:40.050
说这一块以外

23:40.050 --> 23:41.050
然后接下来还有这里

23:41.050 --> 23:43.050
还有第七章

23:43.050 --> 23:45.050
我记得是第六章第七章

23:45.050 --> 23:46.050
这里

23:46.050 --> 23:47.050
第六章

23:47.050 --> 23:48.050
第六章的话

23:48.050 --> 23:50.050
他这边也是提到了这个

23:50.050 --> 23:52.050
双线存模型

23:52.050 --> 23:53.050
他这边呢就是

23:53.050 --> 23:54.050
他给你讲了一下

23:54.050 --> 23:56.050
就是这个技术的选心

23:56.050 --> 23:58.050
当时为什么这样子来选

23:58.050 --> 23:59.050
以及就是这边的话

23:59.050 --> 24:01.050
这个管控与安全

24:01.050 --> 24:03.050
还有这个天生的这个掩饰

24:03.050 --> 24:04.050
下去的话

24:04.050 --> 24:06.050
把这个这两节把它看一下

24:06.050 --> 24:07.050
把这个的话

24:07.050 --> 24:09.050
也放在笔记里面

24:09.050 --> 24:10.050
一个是第三章

24:10.050 --> 24:11.050
一个是第六章

24:11.050 --> 24:13.050
官方文档

24:13.050 --> 24:15.050
这个呢是第三章

24:15.050 --> 24:19.130
第三章

24:19.130 --> 24:20.130
好然后接下来的话

24:20.130 --> 24:22.130
这边第六章

24:22.130 --> 24:25.980
OK

24:25.980 --> 24:26.980
下去的话

24:26.980 --> 24:27.980
把这两个章节

24:27.980 --> 24:28.980
官方对应了文档

24:28.980 --> 24:29.980
把它看一下

24:29.980 --> 24:30.980
好吧

24:30.980 --> 24:31.980
OK

24:31.980 --> 24:33.980
这是关于这节课的内容

24:33.980 --> 24:34.980
给大家介绍一下

24:34.980 --> 24:35.980
微信小程序的这个

24:35.980 --> 24:36.980
双线存架构

24:36.980 --> 24:38.980
官方文档实际上很早就介绍了

24:38.980 --> 24:39.980
对吧

24:39.980 --> 24:40.980
你看他官方文档

24:40.980 --> 24:41.980
实际上在这个

24:41.980 --> 24:42.980
第三章的时候

24:42.980 --> 24:44.980
这边这个

24:44.980 --> 24:45.980
第三章的时候

24:45.980 --> 24:46.980
这边就在介绍了

24:46.980 --> 24:47.980
当时

24:47.980 --> 24:48.980
当时我们讲的时候

24:48.980 --> 24:49.980
我们是跳过来的

24:49.980 --> 24:50.980
对不对

24:50.980 --> 24:51.980
我们是直接就是在讲

24:51.980 --> 24:52.980
这个程序和页面

24:52.980 --> 24:53.980
讲那个就是

24:53.980 --> 24:56.980
全局的那个APP和那个配级

24:56.980 --> 24:57.980
OK

24:57.980 --> 24:58.980
因为当时的话

24:58.980 --> 24:59.980
我觉得这边的话

24:59.980 --> 25:00.980
可以先放一放

25:00.980 --> 25:01.980
就再来说

25:01.980 --> 25:02.980
OK

25:02.980 --> 25:03.980
好

25:03.980 --> 25:04.980
这节课就先到这里

25:04.980 --> 25:05.980
再见

