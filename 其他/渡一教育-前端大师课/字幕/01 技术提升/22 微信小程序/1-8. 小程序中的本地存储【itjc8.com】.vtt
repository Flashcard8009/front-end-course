WEBVTT

00:00.000 --> 00:03.400
OK 上节课的话 我们看了这个小程序

00:03.400 --> 00:06.400
如何和这个服务器进行通信

00:06.400 --> 00:09.000
实际上主要就是用到它里面的一个API

00:09.000 --> 00:11.600
叫做这个wx.request

00:11.600 --> 00:16.000
好 这节课的话 咱们来看一下小程序中的这个本地存储

00:16.000 --> 00:20.400
就说我这边上如何把这个数据存储到这个本地

00:20.400 --> 00:24.400
那这一块的话 实际上你只要学过这个local storage

00:24.400 --> 00:26.800
就以前你在做这个微博开发的时候

00:26.800 --> 00:28.800
你接触过这个local storage

00:29.000 --> 00:32.200
那这一块的话 实际上也是非常好伤手的

00:32.200 --> 00:34.600
基本上也是没有什么学习成本

00:34.600 --> 00:37.200
OK 好 来我们这边我们来看一下

00:37.200 --> 00:39.200
这边的话对应的内容在这里

00:39.200 --> 00:42.200
这边本地数据缓存

00:42.200 --> 00:46.000
我们还是主要看这个官方本党

00:46.000 --> 00:48.200
好 本地数据缓存是指什么呢

00:48.200 --> 00:52.000
是指小程序存储在这个当前设备上的

00:52.000 --> 00:54.200
硬盘上的这个数据

00:54.200 --> 00:58.400
那么这个本地数据缓存它有非常多的这个用途

00:58.400 --> 01:01.400
实际上就是最主要的用途就是什么呢

01:01.400 --> 01:04.400
就是它这边的话可以就是你把这些数据

01:04.400 --> 01:07.000
一些常用的数据存储在本地之后

01:07.000 --> 01:09.600
那你不需要再和这个服务器进行通信

01:09.600 --> 01:12.600
是不是直接用这个本地的这个缓存数据就可以了

01:12.600 --> 01:16.000
对不对 你看它这边可以利用本地缓存

01:16.000 --> 01:19.400
一些这个服务端非实实的这个数据

01:19.400 --> 01:23.400
提高小程序什么呢 获取数据的这个速度

01:23.400 --> 01:25.400
而在这个特定的这个场景下

01:25.400 --> 01:28.400
可以提高这个页面的这个渲染速度

01:28.400 --> 01:31.400
减少用户的这个等待时间

01:31.400 --> 01:35.400
对吧 这个这一块时间就和那个local storage是一样的

01:35.400 --> 01:37.400
你只要是学过这个local storage

01:37.400 --> 01:39.400
你这边的话应该是知道的

01:39.400 --> 01:44.400
ok 然后我们重点来看一下就是微信小程序中

01:44.400 --> 01:47.400
如何进行一个本地的这个存储

01:47.400 --> 01:49.400
我们来看一下哈

01:49.400 --> 01:54.400
小程序中提供了这个读写本地数据缓存的这个接口

01:54.400 --> 01:58.400
主要有这两个 一个是读 读的话是这个get storage

01:58.400 --> 02:00.400
还有就是get storage sync

02:00.400 --> 02:03.400
这个代表什么呢 代表同步的意思

02:03.400 --> 02:06.400
那你如果要设置 设置的话通过什么呢

02:06.400 --> 02:10.400
通过这个set storage和这个set storage sync

02:10.400 --> 02:14.400
这个是写 后面这个sync表示这个同步

02:14.400 --> 02:17.400
我们在笔记里面记录一下

02:17.400 --> 02:23.400
微信小程序中的这个本地存储

02:23.400 --> 02:28.400
基本上也和这个local storage

02:28.400 --> 02:32.400
local storage是类似的

02:32.400 --> 02:39.400
分为什么呢 分为这个读 读曲 读和写

02:39.400 --> 02:41.400
好 那我们这边来看一下

02:41.400 --> 02:43.400
它这边的话对应了app有

02:43.400 --> 02:46.400
微信点get storage

02:46.400 --> 02:51.400
对不对 以及这个微信点get storage

02:52.400 --> 02:55.400
然后sync sync

02:55.400 --> 02:57.400
这个的话代表什么 代表同步

02:57.400 --> 03:00.400
它加了这个后维就表示同步的意思

03:00.400 --> 03:04.970
同步 上面这个是一步 对吧

03:04.970 --> 03:08.970
好 然后接下来这边的话有一个这个微信

03:08.970 --> 03:12.970
微信点set storage

03:12.970 --> 03:18.970
以及什么呢 微信点set storage

03:18.970 --> 03:20.970
然后sync

03:20.970 --> 03:23.970
sync

03:23.970 --> 03:25.970
对吧 这个是同步

03:27.970 --> 03:30.970
好 然后上面 上面的话是一步

03:30.970 --> 03:32.970
这个是一步

03:32.970 --> 03:37.240
一步

03:37.240 --> 03:39.240
一步 OK

03:39.240 --> 03:42.240
好 来我们来看一下这个具体的这个语法

03:42.240 --> 03:45.240
好 首先它这边也是这个一步的

03:45.240 --> 03:47.240
微信点get storage

03:47.240 --> 03:51.240
好 这边的话是一个什么 是不是是一个配置对象

03:51.240 --> 03:53.240
对不对 配置对象里面有什么呢

03:53.240 --> 03:55.240
配置对象里面就有你这边的话

03:55.240 --> 03:57.240
这个是它是get

03:57.240 --> 03:59.240
首先我们来看一下读取数据

03:59.240 --> 04:03.240
首先是读取数据

04:03.240 --> 04:05.240
它这边先演示了读取数据

04:05.240 --> 04:09.240
然后一会的话还有什么呢 还有写入数据

04:09.240 --> 04:10.240
写入数据

04:10.240 --> 04:13.940
好 我们首先的话先来看一下什么呢

04:13.940 --> 04:15.940
先来看一下这个一步的读取

04:15.940 --> 04:18.940
一步的读取

04:18.940 --> 04:20.940
一步的读取它这边的话就是

04:20.940 --> 04:23.940
接收一个配置对象

04:23.940 --> 04:25.940
配置对象里面首先有key

04:25.940 --> 04:27.940
就你这边你要读取的这个数据

04:27.940 --> 04:30.940
这个数据它对应的这个key是多少

04:30.940 --> 04:32.940
好 接下来如果读取成功

04:32.940 --> 04:33.940
因为它是一步的 对不对

04:33.940 --> 04:34.940
它是一步的

04:34.940 --> 04:35.940
所以说有一个什么呢

04:35.940 --> 04:36.940
有一个回调函数

04:36.940 --> 04:38.940
然后接下来它会把就是

04:38.940 --> 04:40.940
读取到的这个数据

04:40.940 --> 04:43.940
传入到这个sync sens 这个回调函数里面

04:43.940 --> 04:45.940
如果这个读取失败了之后

04:45.940 --> 04:48.940
就会干嘛 就会进入到这个fail

04:48.940 --> 04:49.940
对不对

04:49.940 --> 04:50.940
非常简单

04:50.940 --> 04:51.940
一步的读取

04:51.940 --> 04:55.940
接收一个配置对象

04:55.940 --> 04:57.940
对象里面

04:57.940 --> 05:01.940
对象里面首先

05:01.940 --> 05:03.940
首先有什么呢

05:03.940 --> 05:04.940
有key

05:04.940 --> 05:05.940
对不对

05:05.940 --> 05:06.940
表示

05:06.940 --> 05:12.940
你要读取的这个数据的这个就是key

05:12.940 --> 05:14.940
就你要读取哪个数据

05:14.940 --> 05:17.940
表示你要读取哪一个数据

05:18.940 --> 05:20.940
哪一个数据

05:20.940 --> 05:22.940
好 然后

05:22.940 --> 05:24.940
因为它是一步

05:24.940 --> 05:26.940
因为是一步

05:26.940 --> 05:30.380
因为是一步

05:30.380 --> 05:32.380
所以

05:32.380 --> 05:34.380
读取到的数据

05:34.380 --> 05:36.380
读取到的数据

05:36.380 --> 05:39.380
会就是传给

05:39.380 --> 05:40.380
传给谁呢

05:40.380 --> 05:43.380
传给这个sync sens 回调函数

05:43.380 --> 05:45.380
回调函数

05:45.380 --> 05:48.380
如果读取失败

05:49.380 --> 05:52.380
那么会触发什么呢

05:52.380 --> 05:54.380
触发fail

05:54.380 --> 05:56.380
fail 回调函数

05:56.380 --> 05:57.380
对吧

05:57.380 --> 05:59.380
这边的势力

05:59.380 --> 06:01.380
就和它这边是一样的

06:01.380 --> 06:04.380
我这边在笔记里面记一下

06:04.380 --> 06:09.380
这边基本就是wx.getStorage

06:09.380 --> 06:10.380
对不对

06:10.380 --> 06:11.380
接收一个对象

06:11.380 --> 06:12.380
对象里面

06:12.380 --> 06:14.380
首先就是key

06:14.380 --> 06:16.380
首先就是key

06:16.380 --> 06:17.380
key对应的

06:17.380 --> 06:19.380
你要读取的是哪个

06:19.380 --> 06:20.380
然后接下来的话

06:20.380 --> 06:21.380
读取成功之后

06:21.380 --> 06:23.380
它会进入到sync sens

06:23.380 --> 06:26.380
sync sens 它是一个成功的回调

06:26.380 --> 06:28.380
这个是成功

06:28.380 --> 06:32.010
读取成功

06:32.010 --> 06:34.010
读取成功

06:34.010 --> 06:36.010
后的回调

06:38.010 --> 06:39.010
然后接下来还有什么呢

06:39.010 --> 06:41.010
还有一个fail

06:43.010 --> 06:45.010
这个的话是什么呢

06:45.010 --> 06:46.010
这个是失败

06:46.010 --> 06:48.010
读取

06:48.010 --> 06:50.010
读取 失败

06:50.010 --> 06:52.010
失的回调

06:54.010 --> 06:55.010
对吧

06:55.010 --> 06:56.010
然后还有什么呢

06:56.010 --> 06:57.010
还有一个complete

06:57.010 --> 06:58.010
应该有complete

06:58.010 --> 06:59.010
这个就是什么呢

06:59.010 --> 07:01.010
这个就是无论成功还是失败

07:01.010 --> 07:02.010
是不是都会进这里

07:02.010 --> 07:03.010
对不对

07:03.010 --> 07:04.010
都会进这

07:04.010 --> 07:06.010
这是关于异步的

07:06.010 --> 07:07.010
如果是同步的

07:07.010 --> 07:08.010
同步的话

07:08.010 --> 07:09.010
它就可以通过什么呢

07:09.010 --> 07:10.010
通过trycatch

07:10.010 --> 07:12.010
这边你同步的去读就可以了

07:12.010 --> 07:14.010
读了之后这边获取到值

07:14.010 --> 07:16.010
如果是同步

07:17.010 --> 07:19.010
这边我们先把这个结构图吧

07:19.010 --> 07:20.010
先把这个

07:20.010 --> 07:21.010
我看一下

07:21.010 --> 07:22.010
这个是同步异步

07:22.010 --> 07:24.010
这边都是相通的

07:24.010 --> 07:25.010
我们这边

07:25.010 --> 07:27.010
接下来是同步

07:27.010 --> 07:30.010
同步的读取

07:30.010 --> 07:32.010
直接将什么呢

07:32.010 --> 07:34.010
将读取到的值

07:34.010 --> 07:37.010
读取到的值

07:37.010 --> 07:39.010
然后接下来取出来即可

07:39.010 --> 07:43.010
取出来使用即可

07:43.010 --> 07:44.010
对吧

07:44.010 --> 07:50.010
这边它就是wx.getStorage

07:50.010 --> 07:51.010
然后sync

07:51.010 --> 07:53.010
人家这边传入什么呢

07:53.010 --> 07:54.010
传入你的key

07:54.010 --> 07:55.010
传入了key之后

07:55.010 --> 07:57.010
因为它是同步的

07:57.010 --> 07:58.010
对不对

07:58.010 --> 07:59.010
它就会这边的话

07:59.010 --> 08:01.010
就把这个值就读取到

08:01.010 --> 08:02.010
这个值没有回来之前

08:02.010 --> 08:03.010
它就一直在这

08:03.010 --> 08:04.010
一直在这卡着

08:04.010 --> 08:05.010
对不对

08:05.010 --> 08:06.010
值到什么呢

08:06.010 --> 08:07.010
值到这个值回来

08:07.010 --> 08:08.010
回来之后

08:08.010 --> 08:09.010
然后将你这边

08:09.010 --> 08:10.010
你要做什么

08:10.010 --> 08:11.010
你做就可以了

08:11.010 --> 08:12.010
这边要复制

08:12.010 --> 08:13.010
对不对

08:13.010 --> 08:14.010
复制给它

08:14.010 --> 08:17.010
这是关于同步的读取

08:17.010 --> 08:19.010
然后接下来的话

08:19.010 --> 08:21.010
关于参数

08:21.010 --> 08:22.010
这边key

08:22.010 --> 08:23.010
sync sense

08:23.010 --> 08:24.010
fail

08:24.010 --> 08:25.010
complete

08:25.010 --> 08:27.010
这个主要是指一步的

08:27.010 --> 08:28.010
看到没有

08:28.010 --> 08:29.010
后面的sync sense

08:29.010 --> 08:30.010
fail

08:30.010 --> 08:31.010
complete

08:31.010 --> 08:32.010
这个主要是指一步的

08:32.010 --> 08:33.010
同步的话

08:33.010 --> 08:34.010
不需要用这些

08:34.010 --> 08:35.010
同步的话

08:35.010 --> 08:36.010
你这边传一个key

08:36.010 --> 08:37.010
直接读取就可以了

08:37.010 --> 08:38.010
对不对

08:38.010 --> 08:41.010
这是关于读取

08:41.010 --> 08:42.010
然后接下来看一下

08:42.010 --> 08:43.010
这个写入

08:43.010 --> 08:45.010
写入基本上也就一样

08:45.010 --> 08:46.010
这边的话就多一个

08:46.010 --> 08:47.010
多一个data

08:47.010 --> 08:49.010
就你要写入的数据

08:49.010 --> 08:50.010
接下来的话

08:50.010 --> 08:51.010
这边是不是

08:51.010 --> 08:52.010
sync sense

08:52.010 --> 08:53.010
fail

08:53.010 --> 08:54.010
对不对

08:54.010 --> 08:57.010
所以写入其实也很简单

08:57.010 --> 08:59.010
写入

08:59.010 --> 09:01.010
写入

09:01.010 --> 09:05.010
实际上也很简单

09:05.010 --> 09:06.010
首先

09:06.010 --> 09:09.010
我们来看一下

09:09.010 --> 09:10.010
这个一步写入

09:11.010 --> 09:13.010
一步写入

09:13.010 --> 09:14.010
一步写入的话

09:14.010 --> 09:16.010
使用的是什么

09:16.010 --> 09:18.010
使用到的是

09:18.010 --> 09:20.010
这个微信点是吗

09:20.010 --> 09:21.010
是set

09:21.010 --> 09:22.010
一个是get

09:22.010 --> 09:23.010
一个是set

09:23.010 --> 09:24.010
storage

09:24.010 --> 09:25.010
OK

09:25.010 --> 09:27.010
使用到的sync API

09:27.010 --> 09:29.010
我们这边来做一个实力

09:29.010 --> 09:30.010
好

09:30.010 --> 09:33.010
把这个拿过来

09:33.010 --> 09:34.010
直接拿过来

09:34.010 --> 09:35.010
那些地方要改

09:35.010 --> 09:37.010
首先这个改成set

09:37.010 --> 09:38.010
对不对

09:38.010 --> 09:39.010
然后除了key以外

09:39.010 --> 09:40.010
还有data

09:40.010 --> 09:41.010
对不对

09:41.010 --> 09:42.010
还有data

09:42.010 --> 09:43.010
这个是什么

09:43.010 --> 09:45.010
这个就是你要写入的数据

09:45.010 --> 09:48.010
要写入的数据

09:48.010 --> 09:49.010
对不对

09:49.010 --> 09:50.010
然后前面的话

09:50.010 --> 09:51.010
这个是key

09:51.010 --> 09:52.010
接下来的话

09:52.010 --> 09:53.010
这个就是写入成功

09:53.010 --> 09:55.010
写入成功

09:55.010 --> 09:57.010
后的回调

09:57.010 --> 09:58.010
这个是写入

09:58.010 --> 10:00.010
失败时的回调

10:00.010 --> 10:02.010
这就是写入

10:02.010 --> 10:04.010
如果是同步写入

10:04.010 --> 10:08.010
如果是同步写入

10:08.010 --> 10:09.010
我们来看一下

10:09.010 --> 10:11.010
同步写入的话

10:11.010 --> 10:12.010
它这边就是

10:12.010 --> 10:14.010
直接就是set storage

10:14.010 --> 10:15.010
sync

10:15.010 --> 10:17.010
这边是你的key value

10:17.010 --> 10:18.010
对不对

10:18.010 --> 10:20.010
直接就是这样子的

10:20.010 --> 10:22.010
同步写入

10:22.010 --> 10:24.010
传入两个参数

10:24.010 --> 10:26.010
两个参数

10:26.010 --> 10:29.220
如下

10:29.220 --> 10:30.220
这边

10:30.220 --> 10:32.220
传入你的key

10:32.220 --> 10:34.220
传入你的写入的value

10:34.220 --> 10:35.220
因为它是同步的

10:35.220 --> 10:36.220
它就会卡在这里

10:36.220 --> 10:37.220
知道什么

10:37.220 --> 10:39.220
知道就是写入这个动作完成

10:39.220 --> 10:42.220
才执行下面的操作

10:42.220 --> 10:45.220
关于写入

10:45.220 --> 10:47.220
这边也是

10:47.220 --> 10:49.220
这边有key有data

10:49.220 --> 10:50.220
这三个

10:50.220 --> 10:52.220
这三个都是用于e不的

10:52.220 --> 10:55.220
就sync sense, fail, complete

10:55.220 --> 10:57.220
这个都是用于e不的

10:57.220 --> 11:00.220
这个我就不多说了

11:00.220 --> 11:01.220
然后接下来

11:01.220 --> 11:03.220
这边注意

11:03.220 --> 11:06.220
缓存限制和隔离

11:06.220 --> 11:08.220
这个

11:08.220 --> 11:09.220
有一部分内容

11:09.220 --> 11:11.220
我们坐下笔记

11:11.220 --> 11:15.980
缓存的限制和隔离

11:15.980 --> 11:16.980
这边有几个要点

11:16.980 --> 11:17.980
我们来看一下

11:17.980 --> 11:20.980
首先小程序输入环境

11:20.980 --> 11:23.980
管理不同的小程序的数据缓存

11:23.980 --> 11:26.980
不同小程序的本地缓存是

11:26.980 --> 11:27.980
分开的

11:27.980 --> 11:28.980
首先第一点

11:28.980 --> 11:30.980
因为我们手机可以打开

11:30.980 --> 11:32.980
很多的小程序

11:32.980 --> 11:33.980
对不对

11:33.980 --> 11:35.980
进入到微信里面

11:35.980 --> 11:37.980
可以打开很多的小程序

11:37.980 --> 11:39.980
接下来不同的小程序之间

11:39.980 --> 11:42.980
它本地缓存的空间是分开的

11:42.980 --> 11:44.980
这是首先第一点

11:44.980 --> 11:45.980
第二点

11:45.980 --> 11:47.980
每个小程序缓存的空间

11:47.980 --> 11:49.980
它是有上限的

11:49.980 --> 11:50.980
上限是什么

11:50.980 --> 11:52.980
上限是实兆

11:52.980 --> 11:54.980
ok 是实兆

11:54.980 --> 11:56.980
如果你已经到达实兆了

11:56.980 --> 11:58.980
那接下来你再去写的话

11:58.980 --> 12:00.980
它会触发fail这个回调

12:00.980 --> 12:02.980
注意这一点非常重要

12:02.980 --> 12:05.980
这个也是经常同学们遇到bug

12:05.980 --> 12:07.980
就是没去好好的去看这个官方文档

12:07.980 --> 12:10.980
它这边让它是有一个实兆的限制

12:10.980 --> 12:12.980
ok 我们记一下

12:12.980 --> 12:18.980
每个小程序的缓存

12:18.980 --> 12:20.980
它叫缓存什么

12:20.980 --> 12:21.980
缓存空间是吧

12:21.980 --> 12:24.980
空间的上限

12:24.980 --> 12:29.980
上限为实兆

12:29.980 --> 12:33.980
如果超过了实兆

12:33.980 --> 12:36.980
然后再往里面写入

12:36.980 --> 12:41.980
再往缓存里面写入

12:41.980 --> 12:44.980
就会触发什么

12:44.980 --> 12:46.980
触发fail

12:46.980 --> 12:47.980
是不是失败

12:47.980 --> 12:51.980
对不对 触发fail的回调

12:51.980 --> 12:53.980
这是这一点

12:53.980 --> 12:55.980
好 然后小程序

12:55.980 --> 12:56.980
这个本地缓存

12:56.980 --> 12:59.980
不仅仅是小程序这个维度来隔离

12:59.980 --> 13:01.980
考虑到就是同一个设备

13:01.980 --> 13:04.980
可以登录不同的微信用户

13:04.980 --> 13:06.980
接下来它不同的用户之间

13:06.980 --> 13:09.980
它也是做了隔离的

13:09.980 --> 13:11.980
这个我们就记录到这

13:11.980 --> 13:14.980
不同的小程序本地缓存空间是分开的

13:14.980 --> 13:20.980
即便是同一个小程序

13:20.980 --> 13:25.980
然后但是不同的用户之间

13:25.980 --> 13:29.980
也是分开的

13:29.980 --> 13:32.980
对不对 也是分开的

13:32.980 --> 13:36.980
然后由于本地缓存存放的是当前设备

13:36.980 --> 13:38.980
然后接下来你这个换设备之后

13:38.980 --> 13:40.980
你就无法再读取到了

13:40.980 --> 13:41.980
所以说用户的关键信息

13:41.980 --> 13:43.980
不建议只存在本地缓存

13:43.980 --> 13:45.980
应该把数据存到服务期段

13:45.980 --> 13:47.980
进行持久化存储

13:47.980 --> 13:48.980
这个很好理解

13:48.980 --> 13:50.980
对不对 这边我名字都叫什么

13:50.980 --> 13:52.980
名字都叫本地存储

13:52.980 --> 13:54.980
那既然叫做本地存储

13:54.980 --> 13:55.980
那肯定就是存在什么

13:55.980 --> 13:57.980
是存在你自己的手机上的

13:57.980 --> 13:59.980
存在用户的手机上的

13:59.980 --> 14:01.980
那现在用户他比如他换手机了

14:01.980 --> 14:03.980
那当然之前的数据就没有了

14:03.980 --> 14:06.980
对不对 说实话我们一些关键的信息

14:06.980 --> 14:09.980
那肯定是要在服务期的数据库里面

14:09.980 --> 14:11.980
肯定是要存一份的

14:11.980 --> 14:13.980
这是肯定的

14:13.980 --> 14:15.980
你看这个其实就是关于

14:15.980 --> 14:17.980
本地存储的知识

14:17.980 --> 14:18.980
不多

14:18.980 --> 14:21.980
对不对 也非常简单

14:21.980 --> 14:23.980
这边实际上除了什么

14:23.980 --> 14:24.980
除了这几个API

14:24.980 --> 14:25.980
实际上这边的话

14:25.980 --> 14:27.980
你看他的这个API

14:27.980 --> 14:29.980
我们找到那个

14:29.980 --> 14:31.980
Storage

14:31.980 --> 14:33.980
这边应该有

14:33.980 --> 14:35.980
看一下 这边是基础

14:35.980 --> 14:37.980
基础系统更新

14:37.980 --> 14:39.980
应该是有的

14:39.980 --> 14:41.980
我找一下 应该是有一个叫做

14:41.980 --> 14:43.980
本地存储

14:43.980 --> 14:45.980
这 数据缓存

14:45.980 --> 14:46.980
这边

14:46.980 --> 14:48.980
OK 你让他这边实际上蛮多的

14:48.980 --> 14:50.980
看到没有 蛮多的

14:50.980 --> 14:52.980
我们来看一下他这边的话

14:53.980 --> 14:55.980
这个刚刚看了

14:55.980 --> 14:57.980
对不对 他这边还有一个rework

14:57.980 --> 14:58.980
buffer

14:58.980 --> 14:59.980
URI

14:59.980 --> 15:01.980
这个是根据URI

15:01.980 --> 15:03.980
销毁内存中的这个数据

15:03.980 --> 15:05.980
这个我们后面用到了再说

15:05.980 --> 15:07.980
那接下来这边这两个

15:07.980 --> 15:09.980
这两个一个是什么呢

15:09.980 --> 15:10.980
一个是这个

15:10.980 --> 15:12.980
这个是同步的 这个是异步的

15:12.980 --> 15:13.980
他们表示什么呢

15:13.980 --> 15:15.980
他们表示就是3除

15:15.980 --> 15:17.980
3除对应的这个本地缓存

15:17.980 --> 15:19.980
我们这边笔记里面记一下

15:19.980 --> 15:23.350
除了

15:23.350 --> 15:26.350
上面介绍到的

15:26.350 --> 15:29.350
什么呢 获取和

15:29.350 --> 15:31.350
和这个设置

15:31.350 --> 15:32.350
本地数据

15:32.350 --> 15:34.350
然后常用的

15:34.350 --> 15:36.350
还有什么呢 常用的

15:36.350 --> 15:38.350
还有就是remove

15:38.350 --> 15:40.350
他叫做什么

15:40.350 --> 15:42.350
微信点remove

15:42.350 --> 15:45.350
微信点remove

15:45.350 --> 15:46.350
storage

15:46.350 --> 15:47.350
以及什么呢

15:47.350 --> 15:50.350
微信点remove

15:50.350 --> 15:53.350
storage sync

15:53.350 --> 15:54.350
对不对 一个是异步

15:54.350 --> 15:55.350
一个是同步

15:55.350 --> 15:56.350
这个是什么呢

15:56.350 --> 15:58.350
这两个是可以就是

15:58.350 --> 16:00.350
3除指定的

16:00.350 --> 16:02.350
就从这个本地缓存中

16:02.350 --> 16:04.350
移除指定的key

16:04.350 --> 16:09.140
从本地缓存中

16:09.140 --> 16:11.140
移除这个指定的key

16:11.140 --> 16:13.140
这个的话是同步方法

16:13.140 --> 16:16.140
上面方法的这个

16:16.140 --> 16:18.140
同步版本

16:18.140 --> 16:21.140
对吧 这个是remove

16:21.140 --> 16:23.140
再就是我们刚才的get storage

16:23.140 --> 16:24.140
这个刚才介绍了

16:24.140 --> 16:27.140
这个的话有一个get storage info

16:27.140 --> 16:28.140
sync

16:28.140 --> 16:30.140
这个是get storage info的

16:30.140 --> 16:31.140
同步版本 我们看一下这个呢

16:31.140 --> 16:33.140
get storage info

16:33.140 --> 16:34.140
这个的话是获取

16:34.140 --> 16:38.140
当前storage相关的信息

16:38.140 --> 16:40.140
获取出来

16:40.140 --> 16:42.140
获取当前storage的信息

16:42.140 --> 16:44.140
这个倒没有更多的描述了

16:44.140 --> 16:46.140
这个回头你可以试一下

16:46.140 --> 16:47.140
可以试一下

16:47.140 --> 16:48.140
然后接下来这边

16:48.140 --> 16:49.140
这边还有一个clear

16:49.140 --> 16:50.140
clear就是清空

16:50.140 --> 16:52.140
这两个

16:52.140 --> 16:53.140
这两个

16:53.140 --> 16:55.140
这两个就是清空

16:55.140 --> 16:57.140
微信

16:57.140 --> 16:59.140
clear

16:59.140 --> 17:01.960
这个是什么呢

17:01.960 --> 17:04.960
这个是清空

17:04.960 --> 17:07.960
清空整个本地存储

17:07.960 --> 17:09.960
你注意它和remove的区别

17:09.960 --> 17:10.960
remove的话

17:10.960 --> 17:11.960
也是可以指定key的

17:11.960 --> 17:13.960
对了 比如说我里面的话

17:13.960 --> 17:15.960
有10个项目

17:15.960 --> 17:17.960
我可以就是指定3除某一个

17:17.960 --> 17:18.960
而这个的话是直接

17:18.960 --> 17:20.960
把整个本地存储都清空

17:20.960 --> 17:22.960
应该很好理解

17:22.960 --> 17:23.960
那还有个什么呢

17:23.960 --> 17:27.960
还有一个就是clear storage sync

17:27.960 --> 17:29.960
这个的话也是就是

17:29.960 --> 17:30.960
上面方法

17:30.960 --> 17:32.960
上面方法

17:32.960 --> 17:36.960
方法的同步版本

17:36.960 --> 17:37.960
对吧

17:37.960 --> 17:40.960
把它扩好去掉吧

17:40.960 --> 17:44.960
OK 常用的就还有这些

17:44.960 --> 17:45.960
这边的话

17:45.960 --> 17:47.960
剩下的就不挨在这儿介绍了

17:47.960 --> 17:49.960
这边这个bunch set

17:49.960 --> 17:50.960
这个一看就是什么

17:50.960 --> 17:52.960
这个bunch是什么意思

17:52.960 --> 17:53.960
是p量的意思

17:53.960 --> 17:54.960
对了 原来这边就是什么

17:54.960 --> 17:56.960
是p量的进行存储

17:56.960 --> 17:57.960
对不对

17:57.960 --> 17:58.960
OK

17:58.960 --> 18:00.960
这个就不挨在这儿介绍

18:00.960 --> 18:01.960
而接下来的话

18:01.960 --> 18:03.960
我们还是来写一个综合的势力

18:03.960 --> 18:04.960
写一个综合的势力

18:04.960 --> 18:06.960
来看一下

18:06.960 --> 18:08.960
我们打开上级课的代码

18:08.960 --> 18:09.960
上级课的代码

18:09.960 --> 18:11.960
我们这边是不是写了一个注册

18:11.960 --> 18:12.960
对不对

18:12.960 --> 18:13.960
好 这样我们这边

18:13.960 --> 18:15.960
我们再来新增一个

18:15.960 --> 18:16.960
我们新增一个什么呢

18:16.960 --> 18:17.960
新增一个登录

18:18.960 --> 18:19.960
我们来到这边

18:19.960 --> 18:21.960
我们再来新增一个

18:21.960 --> 18:26.100
这边pages

18:26.100 --> 18:28.100
下面的logging

18:28.100 --> 18:30.100
下面的logging

18:30.100 --> 18:31.100
好 然后接下来的话

18:31.100 --> 18:34.540
这边负责一份

18:34.540 --> 18:35.540
负责一份

18:35.540 --> 18:39.540
然后加这边是logging

18:39.540 --> 18:40.540
logging

18:40.540 --> 18:42.540
好 这个的话是登录

18:42.540 --> 18:43.540
登录

18:43.540 --> 18:45.540
好 保存

18:46.540 --> 18:47.540
好 保存之后

18:47.540 --> 18:49.540
然后加这边的话是注册

18:49.540 --> 18:50.540
这边的话是登录

18:50.540 --> 18:51.540
好 登录的话

18:51.540 --> 18:52.540
我们这边还是就是

18:52.540 --> 18:54.540
可以输入这个账号密码

18:54.540 --> 18:55.540
那我们这边

18:55.540 --> 18:57.540
就直接把这个register

18:57.540 --> 18:59.540
把它这边

18:59.540 --> 19:01.540
拿过来

19:01.540 --> 19:04.540
然后放到logging里面

19:04.540 --> 19:06.540
放到这边

19:07.540 --> 19:08.540
OK

19:08.540 --> 19:10.540
这两个按钮就不要了

19:10.540 --> 19:11.540
这边这个按钮就不要了

19:11.540 --> 19:14.540
这边假设有一个登录按钮

19:14.540 --> 19:17.540
这边有个登录按钮

19:17.540 --> 19:19.540
保存

19:19.540 --> 19:21.540
之后然后下这边来看一下

19:21.540 --> 19:24.540
然后加这边把那个样式也拿过来

19:24.540 --> 19:26.540
这边把这个样式

19:26.540 --> 19:30.540
把它拿到这边

19:30.540 --> 19:32.540
保存

19:32.540 --> 19:33.540
这边登录 是不是有了

19:33.540 --> 19:34.540
有了之后

19:34.540 --> 19:35.540
然后接下来的话

19:35.540 --> 19:36.540
我们这边这个登录

19:36.540 --> 19:37.540
我们这边的话

19:37.540 --> 19:39.540
是有一个这个value对不对

19:39.540 --> 19:41.540
logging id和password的

19:41.540 --> 19:42.540
我们这边的话也一样

19:42.540 --> 19:46.540
把这两个把它拿过来

19:46.540 --> 19:48.540
把这两个拿到logging这边

19:50.540 --> 19:52.540
拿到这边

19:52.540 --> 19:53.540
好

19:53.540 --> 19:55.540
现在我们要做一个什么事情呢

19:55.540 --> 19:56.540
我们现在要做一个这个事情

19:56.540 --> 19:58.540
比如用户正常来讲

19:58.540 --> 20:00.540
是不是应该是先这个注册

20:00.540 --> 20:01.540
对不对

20:01.540 --> 20:02.540
注册了之后

20:02.540 --> 20:03.540
然后接下来这边登录

20:03.540 --> 20:05.540
假设用户在这边注册

20:05.540 --> 20:07.540
要填入

20:07.540 --> 20:08.540
这边的话

20:08.540 --> 20:09.540
123456

20:09.540 --> 20:10.540
好

20:10.540 --> 20:11.540
然后加这边

20:11.540 --> 20:12.540
比如发送post的请求

20:12.540 --> 20:13.540
对不对

20:13.540 --> 20:14.540
进行这个注册

20:14.540 --> 20:15.540
好注册

20:15.540 --> 20:16.540
然后完事之后

20:16.540 --> 20:18.540
然后将我们到登录的时候

20:18.540 --> 20:19.540
它其实就可以干嘛呢

20:19.540 --> 20:20.540
就可以显示出

20:20.540 --> 20:21.540
刚才用户

20:21.540 --> 20:23.540
它已经输入了这个账号

20:23.540 --> 20:24.540
以及这个密码

20:24.540 --> 20:26.540
就用户不用再输第二边了

20:26.540 --> 20:27.540
这边它只需要

20:27.540 --> 20:30.540
这个直接点击这个登录就可以了

20:30.540 --> 20:31.540
ok

20:31.540 --> 20:32.540
听清楚这个需求没有

20:32.540 --> 20:33.540
我再说一遍

20:33.540 --> 20:35.540
就是我这边用户是不是注册

20:35.540 --> 20:36.540
对不对

20:36.540 --> 20:37.540
注册的话

20:37.540 --> 20:38.540
然后用户在这边填了账号

20:38.540 --> 20:39.540
填了这个密码

20:39.540 --> 20:40.540
填了账号密码之后

20:40.540 --> 20:42.540
人家这边发这个post的请求

20:42.540 --> 20:44.540
是不是进行注册

20:44.540 --> 20:45.540
对不对

20:45.540 --> 20:46.540
注册完了之后

20:46.540 --> 20:47.540
然后将我这边

20:47.540 --> 20:48.540
登录这边

20:48.540 --> 20:49.540
跳到登录这边的话

20:49.540 --> 20:51.540
那这边就直接去干嘛呢

20:51.540 --> 20:53.540
直接就是填冲上

20:53.540 --> 20:56.540
用户刚才所输的账号和密码

20:56.540 --> 20:58.540
它就不需要再输第二边了

20:58.540 --> 20:59.540
那你这边的话

20:59.540 --> 21:00.540
你做这个功能的话

21:00.540 --> 21:01.540
那我们就可以干嘛

21:01.540 --> 21:03.540
我们是不是就可以用本地存储

21:03.540 --> 21:04.540
对不对

21:04.540 --> 21:06.540
我们就可以用本地存储

21:06.540 --> 21:08.540
我们首先来到哪里呢

21:08.540 --> 21:10.540
来到这边

21:10.540 --> 21:12.540
来到这个request

21:12.540 --> 21:14.540
register.js

21:14.540 --> 21:15.540
我们找到什么呢

21:15.540 --> 21:17.540
找到这个sinderpost

21:17.540 --> 21:18.540
sinderpost

21:18.540 --> 21:19.540
好,然后再到这边

21:19.540 --> 21:21.540
这边是不是就是成功之后

21:21.540 --> 21:22.540
对不对,成功之后

21:22.540 --> 21:23.540
然后服务器给我们返回数据

21:23.540 --> 21:25.540
好,然后接下来在这边

21:25.540 --> 21:26.540
在这边我就选择什么呢

21:26.540 --> 21:28.540
选择

21:28.540 --> 21:29.540
这里

21:29.540 --> 21:32.540
我们就应该

21:32.540 --> 21:34.540
将什么呢,将数据

21:34.540 --> 21:36.540
缓冲到什么

21:36.540 --> 21:39.540
是不是缓冲到本地存储

21:39.540 --> 21:41.920
对不对

21:41.920 --> 21:43.920
好,那我们这边就微信

21:43.920 --> 21:45.920
点set storage

21:45.920 --> 21:47.920
我们就用同步的方式

21:47.920 --> 21:48.920
比我们这边缓冲什么呢

21:48.920 --> 21:50.920
缓冲locking id

21:50.920 --> 21:51.920
好,这边那就是应该是什么呢

21:51.920 --> 21:54.920
这边那就是应该是z

21:54.920 --> 21:57.920
点这个data

21:57.920 --> 21:59.920
点locking id

21:59.920 --> 22:01.920
但你这边的话你要注意一点

22:01.920 --> 22:02.920
你如果直接这样子写的话

22:02.920 --> 22:05.920
这边这个z他是拿不到的

22:05.920 --> 22:07.920
这个和这个js本身

22:07.920 --> 22:09.920
它的一个这个缺陷有关系

22:09.920 --> 22:10.920
对不对

22:10.920 --> 22:12.920
这边z他拿不到

22:12.920 --> 22:14.920
就是无法拿到这边的这个data

22:14.920 --> 22:16.920
怎么办

22:16.920 --> 22:17.920
怎么办

22:17.920 --> 22:19.920
是把这个改成这个

22:19.920 --> 22:21.920
改成箭头还说

22:21.920 --> 22:22.920
对不对

22:22.920 --> 22:24.920
把这个改成箭头还说

22:24.920 --> 22:26.920
好,这个的话是缓冲这个id

22:26.920 --> 22:28.920
然后接下来的话再缓冲什么呢

22:28.920 --> 22:31.920
再缓冲这个

22:31.920 --> 22:34.920
再缓冲这个password

22:34.920 --> 22:35.920
password

22:35.920 --> 22:39.920
这边是z.data.password

22:39.920 --> 22:40.920
对不对

22:40.920 --> 22:41.920
缓冲完了之后

22:41.920 --> 22:42.920
然后这个打印

22:42.920 --> 22:44.920
我们就不需要打印了

22:44.920 --> 22:45.920
好,我们这边就是

22:45.920 --> 22:47.920
shortost

22:47.920 --> 22:48.920
对不对

22:48.920 --> 22:52.920
这边的这个注册成功

22:52.920 --> 22:54.920
注册成功

22:54.920 --> 22:55.920
OK

22:55.920 --> 22:56.920
好,来我们这边

22:56.920 --> 22:57.920
我们来看一下效果

22:57.920 --> 22:59.920
看一下效果

22:59.920 --> 23:01.920
我们把那个浮起把它起起来

23:01.920 --> 23:03.920
这边浮起,我们把它停掉

23:03.920 --> 23:05.920
这是上级课那个浮起

23:05.920 --> 23:06.920
这浮起没有改过的

23:06.920 --> 23:08.920
就上级课那个浮起

23:08.920 --> 23:10.920
回头让它这边是不会进的

23:10.920 --> 23:11.920
进到这里

23:11.920 --> 23:13.920
这边是不是给它返回一个响应

23:13.920 --> 23:14.920
对不对

23:14.920 --> 23:15.920
浮起没变的

23:15.920 --> 23:17.920
就还是和上级课的是一样的

23:17.920 --> 23:19.920
好,然后接下来的话

23:19.920 --> 23:20.920
我们这边

23:20.920 --> 23:22.920
我们来把这儿清空

23:22.920 --> 23:24.920
我们这边回到这个

23:24.920 --> 23:26.920
我们重新编一下吧

23:26.920 --> 23:27.920
重新编一下

23:27.920 --> 23:28.920
把这儿清空

23:28.920 --> 23:29.920
我们输入

23:29.920 --> 23:31.920
卸解

23:31.920 --> 23:33.920
大家这边

23:33.920 --> 23:35.920
1234567

23:35.920 --> 23:37.920
大家我们这边点击发送

23:37.920 --> 23:38.920
post的请求

23:38.920 --> 23:39.920
走

23:39.920 --> 23:41.920
好,这边的话是不是就是发送了

23:41.920 --> 23:42.920
对不对

23:42.920 --> 23:43.920
发送了

23:43.920 --> 23:44.920
发送了之后

23:44.920 --> 23:45.920
然后接下来我们这边

23:45.920 --> 23:47.920
我们是存了的

23:47.920 --> 23:48.920
对不对

23:48.920 --> 23:49.920
存了的存了你在哪

23:49.920 --> 23:50.920
可以看到的

23:50.920 --> 23:51.920
你在这边

23:51.920 --> 23:52.920
和浏览器是一样的

23:52.920 --> 23:54.920
这边有个storage

23:54.920 --> 23:55.920
storage你看这边是不是

23:55.920 --> 23:56.920
就可以看的了

23:56.920 --> 23:57.920
对不对

23:57.920 --> 23:58.920
你看我们这边的话

23:58.920 --> 24:00.920
存储了

24:00.920 --> 24:01.920
看到没有

24:01.920 --> 24:02.920
存储进去了

24:02.920 --> 24:03.920
好,存储进去之后

24:03.920 --> 24:04.920
然后接下来的话

24:04.920 --> 24:05.920
我们在这边

24:05.920 --> 24:07.920
我们来到这个登录

24:07.920 --> 24:08.920
登录这边

24:08.920 --> 24:09.920
然后你是不是

24:09.920 --> 24:10.920
还需要再填一遍

24:10.920 --> 24:11.920
对不对

24:11.920 --> 24:12.920
还要填一遍

24:12.920 --> 24:13.920
那我这边的话

24:13.920 --> 24:14.920
我怎么做呢

24:14.920 --> 24:15.920
我这边的话

24:15.920 --> 24:16.920
来到我们这边

24:16.920 --> 24:17.920
locking.js

24:17.920 --> 24:18.920
那我们这边的话

24:18.920 --> 24:21.920
就可以在安修的时候

24:21.920 --> 24:22.920
在安修的时候

24:22.920 --> 24:24.920
首先干嘛呢

24:24.920 --> 24:26.920
首先

24:26.920 --> 24:30.920
首先从这个本地

24:30.920 --> 24:32.920
缓存中

24:32.920 --> 24:34.920
缓存中

24:34.920 --> 24:37.920
获取这个缓存的

24:37.920 --> 24:40.920
locking id

24:40.920 --> 24:43.920
以及password

24:43.920 --> 24:44.920
对不对

24:44.920 --> 24:45.920
好,那我们这边就是

24:45.920 --> 24:46.920
one

24:46.920 --> 24:48.920
one,我们就用const

24:50.920 --> 24:51.920
const

24:51.920 --> 24:53.920
比如说locking id

24:53.920 --> 24:55.920
比如说这个叫做storage

24:55.920 --> 24:57.920
storage data

24:57.920 --> 24:58.920
等于一个什么呢

24:58.920 --> 25:02.920
wation.get storage

25:02.920 --> 25:05.920
storage sync

25:05.920 --> 25:06.920
好,我这边要

25:06.920 --> 25:07.920
获取什么呢

25:07.920 --> 25:09.920
获取locking id

25:09.920 --> 25:10.920
对不对

25:10.920 --> 25:11.920
你这边叫做locking id

25:11.920 --> 25:12.920
我们要获取这个

25:12.920 --> 25:13.920
好,以及什么呢

25:13.920 --> 25:15.920
以及这个password

25:15.920 --> 25:16.920
对不对

25:16.920 --> 25:21.420
这边就是password

25:21.420 --> 25:22.420
password

25:22.420 --> 25:25.420
这边也是password

25:25.420 --> 25:26.420
好,获取了之后

25:26.420 --> 25:27.420
然后接下来干嘛

25:27.420 --> 25:29.420
接下来判断是否有

25:29.420 --> 25:30.420
对不对

25:30.420 --> 25:31.420
因为有可能没有

25:31.420 --> 25:32.420
对不对

25:32.420 --> 25:33.420
有可能没有

25:33.420 --> 25:34.420
判断

25:34.420 --> 25:39.180
判断是否有数据

25:40.180 --> 25:42.180
如果有

25:42.180 --> 25:43.180
如果有

25:43.180 --> 25:44.180
如果有的话给谁

25:44.180 --> 25:46.180
是不是就给这个data

25:46.180 --> 25:47.180
对不对

25:47.180 --> 25:48.180
如果有

25:48.180 --> 25:50.180
就给data

25:50.180 --> 25:53.180
就负责

25:53.180 --> 25:56.180
负责给data

25:56.180 --> 25:57.180
OK

25:57.180 --> 25:59.180
好了,这边的话怎么写

25:59.180 --> 26:01.180
这边是不是就是if

26:01.180 --> 26:04.180
如果你这个locking id

26:04.180 --> 26:05.180
storage data

26:05.180 --> 26:06.180
如果有

26:06.180 --> 26:07.180
这边负责

26:07.180 --> 26:08.180
负责注意

26:08.180 --> 26:09.180
一定要用什么

26:09.180 --> 26:12.180
this.setdata

26:12.180 --> 26:14.180
不要直接负责

26:14.180 --> 26:15.180
好,这边呢

26:15.180 --> 26:17.180
我们就让这个locking id

26:17.180 --> 26:18.180
对应的是什么

26:18.180 --> 26:20.180
locking storage

26:20.180 --> 26:22.180
locking id storage data

26:22.180 --> 26:23.180
对不对

26:23.180 --> 26:26.180
好,然后接下来if

26:26.180 --> 26:29.180
if这个password

26:29.180 --> 26:31.180
storage data

26:31.180 --> 26:32.180
那这边呢

26:32.180 --> 26:36.180
就是this.setdata

26:36.180 --> 26:38.180
这边呢password

26:38.180 --> 26:39.180
对应的是什么

26:39.180 --> 26:42.180
password storage data

26:42.180 --> 26:43.180
对不对

26:43.180 --> 26:44.180
有这样的设置一下

26:44.180 --> 26:47.180
回头他跳到登录的时候

26:47.180 --> 26:49.180
这边是不是就有数据了

26:49.180 --> 26:50.180
对不对

26:50.180 --> 26:51.180
好,来我们保存一下

26:51.180 --> 26:52.180
保存了之后

26:52.180 --> 26:55.180
接下来我们重新编一下

26:55.180 --> 26:56.180
重新编一下

26:56.180 --> 26:57.180
这边注册

26:57.180 --> 26:58.180
我们把这边重新清空

26:58.180 --> 26:59.180
重新清空

26:59.180 --> 27:00.180
清空之后

27:00.180 --> 27:02.180
我们这边来

27:02.180 --> 27:04.180
我们这边输入一个

27:04.180 --> 27:05.180
解析

27:05.180 --> 27:08.180
这边的话是7654321

27:08.180 --> 27:10.180
发送post的请求

27:10.180 --> 27:11.180
注册成功

27:11.180 --> 27:12.180
这边是不是有数据了

27:12.180 --> 27:14.180
我们到这个登录这边来

27:14.180 --> 27:15.180
你看

27:15.180 --> 27:17.180
这边是不是数据就回天进去了

27:17.180 --> 27:18.180
对不对

27:18.180 --> 27:19.180
你看这个就是一个

27:19.180 --> 27:22.180
本地存储的一个简单的势力

27:22.180 --> 27:23.180
ok

27:23.180 --> 27:24.180
其实不难啊

27:24.180 --> 27:25.180
这东西很简单

27:25.180 --> 27:27.180
你只要就是会那个locking storage

27:27.180 --> 27:30.180
基本上没有什么学习成本

27:30.180 --> 27:31.180
对不对

27:31.180 --> 27:33.180
基本上没有任何学习成本

27:34.180 --> 27:36.180
这是关于这个势力

27:36.180 --> 27:39.180
我想想这边还有没有什么要说的

27:39.180 --> 27:40.180
哦对

27:40.180 --> 27:41.180
还有个东西要说

27:41.180 --> 27:43.180
就是你这边在存的时候

27:43.180 --> 27:45.180
它这边支持加密

27:45.180 --> 27:46.180
就这个

27:46.180 --> 27:48.180
incript

27:48.180 --> 27:50.180
支持这个加密

27:50.180 --> 27:52.180
这边你只需要就是配置一下

27:52.180 --> 27:53.180
看不看

27:53.180 --> 27:54.180
这边我们之前说了

27:54.180 --> 27:55.180
你这边有key

27:55.180 --> 27:56.180
有这个data

27:56.180 --> 27:57.180
对不对

27:57.180 --> 27:58.180
那有6th sense

27:58.180 --> 27:59.180
fail

27:59.180 --> 28:00.180
complete

28:00.180 --> 28:02.180
它现在多了一个

28:02.180 --> 28:03.180
incript

28:03.180 --> 28:05.180
这个你注意它的版本

28:05.180 --> 28:08.180
是2.21.3版本开始的

28:08.180 --> 28:09.180
ok

28:09.180 --> 28:10.180
这边我们记一下

28:10.180 --> 28:11.180
记一下

28:11.180 --> 28:12.180
记到哪呢

28:12.180 --> 28:14.180
记到这个存储这

28:14.180 --> 28:15.180
写入这里

28:15.180 --> 28:16.180
ok

28:18.180 --> 28:19.180
从什么呢

28:19.180 --> 28:20.180
记到这吧

28:20.180 --> 28:21.180
记到这

28:22.180 --> 28:23.180
从

28:24.180 --> 28:27.180
从这个2.23.1

28:27.180 --> 28:28.180
对了吧

28:28.180 --> 28:30.180
2.21.3

28:30.180 --> 28:32.180
2.21.3

28:32.180 --> 28:34.180
版本开始

28:34.180 --> 28:35.180
嗯

28:35.180 --> 28:36.180
往

28:36.180 --> 28:39.180
往这个本地存储

28:39.180 --> 28:42.180
写入数据时

28:42.180 --> 28:44.180
可以干嘛呢

28:44.180 --> 28:48.180
可以进行一个加密的操作

28:49.180 --> 28:50.180
只需要什么呢

28:50.180 --> 28:52.180
只需要配置

28:52.180 --> 28:54.180
这个incript

28:54.180 --> 28:55.180
就这个

28:55.180 --> 28:57.180
只需要配置这个

28:57.180 --> 28:58.180
incript

28:58.180 --> 28:59.180
为什么呢

28:59.180 --> 29:00.180
为q

29:00.180 --> 29:01.180
即可

29:01.180 --> 29:03.180
但是

29:03.180 --> 29:06.180
有一些注意事项

29:06.180 --> 29:08.180
注意事项

29:08.180 --> 29:09.180
哪些注意事项呢

29:09.180 --> 29:10.180
你看

29:10.180 --> 29:11.180
这边它是表示

29:11.180 --> 29:13.180
是否开启这个加密存储

29:13.180 --> 29:15.180
首先

29:15.180 --> 29:17.180
只有异部的这个

29:17.180 --> 29:18.180
支持什么呢

29:18.180 --> 29:20.180
支持这个加密

29:21.180 --> 29:23.180
只有异部

29:23.180 --> 29:26.180
只有异部的这个存储

29:26.180 --> 29:29.180
支持加密

29:29.180 --> 29:31.180
这是首先第一点

29:31.180 --> 29:33.180
因为你这个加密需要时间

29:33.180 --> 29:34.180
对吧

29:34.180 --> 29:35.180
我如果同步的话

29:35.180 --> 29:36.180
你这个时间组设太久了

29:36.180 --> 29:37.180
不太合适

29:37.180 --> 29:40.180
所以它就设置成只有这个异部的

29:40.180 --> 29:41.180
开启后

29:41.180 --> 29:43.180
它会对这个data使用

29:43.180 --> 29:45.180
这个as128进行加密

29:45.180 --> 29:47.180
然后接口回调耗时会增加

29:47.180 --> 29:49.180
其实主要就是这个原因

29:49.180 --> 29:51.180
就回调的耗时会增加

29:52.180 --> 29:57.180
因为加密的时候

29:57.180 --> 30:01.180
回调耗时会增加

30:01.180 --> 30:05.180
所以只能采用什么呢

30:05.180 --> 30:07.180
只能采用异部的方式

30:07.180 --> 30:09.560
OK

30:09.560 --> 30:11.560
这是首先第一点

30:11.560 --> 30:12.560
第二点

30:12.560 --> 30:14.560
如果开启了加密存储

30:14.560 --> 30:16.560
那接下来你这个在获取的时候

30:16.560 --> 30:18.560
你同样要干嘛呢

30:18.560 --> 30:20.560
同样要设置这个incrypt为q

30:20.560 --> 30:23.560
这样子的话它进行一个解密

30:25.560 --> 30:29.560
如果进行了加密存储

30:29.560 --> 30:32.560
然后在那个就是获取数据的时候

30:32.560 --> 30:35.560
获取数据的时候

30:35.560 --> 30:39.560
同样需要将什么呢

30:39.560 --> 30:49.560
将这个incrypt设置为q

30:49.560 --> 30:50.560
然后进行什么呢

30:50.560 --> 30:52.560
进行解密

30:52.560 --> 30:53.560
对不对

30:53.560 --> 30:55.560
进行解密

30:55.560 --> 30:56.560
第三点

30:56.560 --> 30:57.560
由于加密后的数据

30:57.560 --> 31:00.560
会比原始数据膨胀

31:00.560 --> 31:01.560
这个好理解吧

31:01.560 --> 31:02.560
对不对

31:02.560 --> 31:03.560
比如说我就是一个简单的

31:03.560 --> 31:05.560
比较卸节这个支付串

31:05.560 --> 31:06.560
对不对

31:06.560 --> 31:07.560
就六位

31:07.560 --> 31:08.560
但是你加密之后

31:08.560 --> 31:09.560
它是不是就会变得很长

31:09.560 --> 31:10.560
对不对

31:10.560 --> 31:11.560
这个我不知道大家之前

31:11.560 --> 31:12.560
有没有看过那个md5加密

31:12.560 --> 31:13.560
加密之后

31:13.560 --> 31:15.560
它就是很长的一段支付串

31:15.560 --> 31:16.560
加密之后

31:16.560 --> 31:18.560
它比原始数据它会膨胀

31:18.560 --> 31:20.560
开启这个情况下

31:20.560 --> 31:22.560
它这个key

31:22.560 --> 31:24.560
就是允许存储的最大数据

31:24.560 --> 31:26.560
长度为0.7兆

31:26.560 --> 31:27.560
然后接下来

31:27.560 --> 31:29.560
所有数据的存储上限

31:29.560 --> 31:32.560
为7.1兆

31:32.560 --> 31:34.560
因为加密后

31:34.560 --> 31:36.560
因为加密后

31:36.560 --> 31:39.560
这个支付串的这个长度

31:39.560 --> 31:41.560
会膨胀

31:41.560 --> 31:42.560
对不对

31:42.560 --> 31:44.560
所以这个最大

31:44.560 --> 31:46.560
就每个key

31:46.560 --> 31:47.560
每个key

31:47.560 --> 31:50.560
最大存储的

31:50.560 --> 31:52.560
这个长度

31:52.560 --> 31:55.560
长度变为了

31:55.560 --> 31:58.560
变为了0.7兆

31:58.560 --> 32:00.560
然后接下来最大

32:00.560 --> 32:04.560
就是最大这个长度

32:04.560 --> 32:05.560
是叫长度吧

32:05.560 --> 32:07.560
就存储上限

32:07.560 --> 32:11.560
最大的存储上限

32:11.560 --> 32:16.560
由这个之前的10兆

32:16.560 --> 32:19.560
变为了多少

32:19.560 --> 32:21.560
7.1兆

32:21.560 --> 32:22.560
对不对

32:22.560 --> 32:24.560
变成了7.1兆

32:24.560 --> 32:25.560
注意

32:25.560 --> 32:28.560
这个就是关于加密这一块

32:28.560 --> 32:29.560
ok

32:29.560 --> 32:31.560
其他的话就没什么了

32:31.560 --> 32:32.560
其他就没什么了

32:32.560 --> 32:33.560
有的人说

32:33.560 --> 32:34.560
它后面不是

32:34.560 --> 32:35.560
还有这个就是

32:35.560 --> 32:37.560
利用本地缓存

32:37.560 --> 32:39.560
提前渲染页面

32:39.560 --> 32:41.560
以及这个就是缓存

32:41.560 --> 32:43.560
用户登录

32:43.560 --> 32:45.560
CCID

32:45.560 --> 32:46.560
还有这两个吗

32:46.560 --> 32:48.560
这两个是他给你举的两个例子

32:48.560 --> 32:49.560
看到没有

32:49.560 --> 32:51.560
你看他这边讨论一个需求

32:51.560 --> 32:52.560
我们要实现一个

32:52.560 --> 32:54.560
购物商城的这个小程序

32:54.560 --> 32:55.560
有些需求

32:55.560 --> 32:57.560
大家这边的话用这个

32:57.560 --> 32:59.560
本地存储该怎么做

32:59.560 --> 33:00.560
大家第二个

33:00.560 --> 33:01.560
第二个是什么呢

33:01.560 --> 33:03.560
第二个就是用户登录的时候

33:03.560 --> 33:04.560
对不对

33:04.560 --> 33:05.560
用户登录的时候

33:05.560 --> 33:06.560
为了无需让用户

33:06.560 --> 33:08.560
平凡的输入帐号密码

33:08.560 --> 33:10.560
让我们用这个本地缓存

33:10.560 --> 33:11.560
该怎么做

33:11.560 --> 33:13.560
这个是他举的两个例子

33:13.560 --> 33:14.560
那么这两个例子的话

33:14.560 --> 33:16.560
让我这边就不在这个课堂时间

33:16.560 --> 33:18.560
带着大家看了

33:18.560 --> 33:19.560
大家下来的话

33:19.560 --> 33:21.560
把这两个例子看一下

33:21.560 --> 33:22.560
好吧

33:22.560 --> 33:23.560
把这个

33:23.560 --> 33:26.560
把这个地址放到这里

33:26.560 --> 33:28.560
本节课结束后

33:28.560 --> 33:29.560
老规矩

33:29.560 --> 33:32.560
本节课结束后

33:32.560 --> 33:33.560
结束后

33:33.560 --> 33:37.560
请通读官方文档

33:37.560 --> 33:40.560
对应的

33:40.560 --> 33:41.560
对应的

33:41.560 --> 33:42.560
这个部分

33:42.560 --> 33:43.560
特别

33:43.560 --> 33:46.560
特别是这个

33:46.560 --> 33:49.560
官方文档

33:49.560 --> 33:50.560
举了什么

33:50.560 --> 33:53.940
举了两个

33:53.940 --> 33:54.940
举了两个

33:54.940 --> 33:58.940
使用本地存储的例子

33:58.940 --> 34:00.940
这个需求

34:00.940 --> 34:01.940
需求案例

34:01.940 --> 34:02.940
对不对

34:02.940 --> 34:03.940
一个是什么呢

34:03.940 --> 34:05.940
一个是这个

34:05.940 --> 34:07.940
一个是这个

34:07.940 --> 34:09.940
利用本地缓存

34:09.940 --> 34:11.940
提前渲染页面

34:11.940 --> 34:13.940
另外一个是什么呢

34:13.940 --> 34:14.940
另外一个是这个

34:14.940 --> 34:16.940
缓存这个用户

34:16.940 --> 34:18.940
登陆状态的这个CND

34:18.940 --> 34:19.940
OK

34:19.940 --> 34:20.940
这是他举的两个例子

34:20.940 --> 34:22.940
大家下去把它可以看一下

34:22.940 --> 34:23.940
好吧

34:23.940 --> 34:24.940
OK

34:24.940 --> 34:26.940
这就是关于这节课的

34:26.940 --> 34:28.940
本地存储的这个内容

34:28.940 --> 34:29.940
那我们这边的话

34:29.940 --> 34:31.940
这个小程序快速入门篇

34:31.940 --> 34:33.940
基本上的话就差不多了

34:33.940 --> 34:35.940
基本就差不多了

34:35.940 --> 34:36.940
下节课的话

34:36.940 --> 34:38.940
我们会把我们前面所学的所有东西

34:38.940 --> 34:40.940
全部把它串在一起

34:40.940 --> 34:42.940
我们这边的话来做一个

34:42.940 --> 34:44.940
什么呢来做一个这个翻译的一个

34:44.940 --> 34:46.940
小程序应用

34:46.940 --> 34:47.940
好

34:47.940 --> 34:49.940
这是关于这节课的内容

34:49.940 --> 34:50.940
这节课的话

34:50.940 --> 34:51.940
这个服务器我就不给了

34:51.940 --> 34:52.940
就这个服务器

34:52.940 --> 34:54.940
这个服务器就是上节课那个服务器

34:54.940 --> 34:57.940
这个我就不放在那个客堂代码里面了

34:57.940 --> 34:58.940
OK

34:58.940 --> 34:59.940
我回头就只把什么呢

34:59.940 --> 35:00.940
只把这边

35:00.940 --> 35:03.940
只把这边放到那个客堂代码里面

35:03.940 --> 35:04.940
是吧

35:04.940 --> 35:06.940
服务器就直接用上节课的那个服务器

35:06.940 --> 35:07.940
就可以了

35:08.940 --> 35:09.940
好这节课就到这里

35:09.940 --> 35:10.940
再见

