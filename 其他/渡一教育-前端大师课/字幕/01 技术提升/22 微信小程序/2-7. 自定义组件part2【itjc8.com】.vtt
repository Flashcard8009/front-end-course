WEBVTT

00:00.000 --> 00:04.080
OK 上节课的话 咱们介绍了一下这个自定义组件

00:04.480 --> 00:09.880
啊 然后讲了一下这个自定义组件的基础语法 啊 这节课咱们继续啊

00:10.480 --> 00:19.080
而上节课的话是把这一小节介绍和这个组件模板和样式啊 这个快速过了一遍 是吧 啊 这边的话有这个对应的

00:19.760 --> 00:20.440
我们的笔记呢

00:21.520 --> 00:28.400
啊 在这啊 这边呢 我们还是就记重点啊 我们这边把它分享吧 这个是第一节课的 第一节课这边是

00:28.880 --> 00:38.770
介绍 介绍 介绍和这个什么的呢 就是组件模板

00:40.850 --> 00:44.560
组件模板 模板

00:46.000 --> 00:52.720
啊 以及这个样式 对吧 啊 大致就是介绍了这么一些啊 这边这个插槽 插槽需不需要记一下

00:53.520 --> 00:55.920
啊 简单记一下吧 这边 定义插槽

00:57.840 --> 00:59.280
定义插槽

01:00.000 --> 01:02.880
定义插槽是在

01:04.160 --> 01:04.560
这边

01:06.320 --> 01:12.320
嗯 在这里 这里是不是啊 对了 这边就定义插槽啊 我们这边把这个直接复制过来

01:13.520 --> 01:16.160
放到笔记里面啊 然后接下来使用

01:19.150 --> 01:20.190
使用这个

01:21.390 --> 01:26.830
使用这个自定义组件石 自定义组件石就可以

01:27.710 --> 01:33.070
往插槽这个插入这个动态的内容

01:33.950 --> 01:40.050
对吧 取决于你这个使用的时候 你想要插入什么啊 这边

01:41.010 --> 01:50.340
这里啊 放到笔记里面啊 这是上节课的内容啊 这节课 这节课的话 咱们来把这几个

01:51.540 --> 01:59.940
嗯 component 构造器 然后逐渐渐通信于是这个事件啊 生命周期 然后看有没有时间讲这个 behaviors

02:00.820 --> 02:02.820
有的话就把这个一起讲了 ok

02:03.540 --> 02:06.580
好 来 我们这边首先来看这个component 构造器

02:08.500 --> 02:09.380
笔记里面记一下

02:11.380 --> 02:17.060
component 构造器啊 这个的话 我们在上节课实际上也已经看到了 对不对

02:17.540 --> 02:21.540
component 构造器用于什么呢 用于定义组件

02:22.180 --> 02:25.700
他和那个页面里面那个页面里面用的是那个page

02:26.420 --> 02:28.100
对不对 用的是page 构造器

02:28.820 --> 02:31.380
然后整个小程序用的是什么构造器

02:31.780 --> 02:35.540
这app 对不对 这个的话 你要分得清楚啊 不要弄混了

02:35.780 --> 02:41.220
这个在app.js里面 这个是我们整个小程序 对不对 会有个app构造器

02:41.620 --> 02:45.460
然后每个页面啊 你每个页面他是什么呢 他是page构造器

02:45.860 --> 02:49.380
啊 然后如果你是自定义组件他是什么呢 他是component

02:50.020 --> 02:52.580
构造器 ok 来笔记记一下啊

02:53.380 --> 02:54.020
就是这边

02:54.980 --> 02:57.940
app 这个是整个小程序

03:00.880 --> 03:08.000
整个小程序的构造器啊 这里面一般写什么还记不记得之前想过的

03:08.800 --> 03:16.800
写什么 是不是写你的这个生命周期 对不对 还有就是这个全局的这个数据 global data

03:18.320 --> 03:21.040
好 然后page page的话是这个页面

03:22.400 --> 03:24.320
对应的这个构造器

03:25.280 --> 03:33.040
啊 配级里面写什么 这么有data 然后接下来就是一个一个的这个方法啊 然后还有什么 是吧 还有这个生命周期构制函数

03:33.680 --> 03:36.080
对吧 好 然后接下来这边的话component

03:36.800 --> 03:40.640
这个就是什么呢 这个就是自定义组件构造器

03:41.840 --> 03:45.440
啊 他里面有什么选项 选项 我们上一课实际上已经接触了一些了

03:45.840 --> 03:48.560
啊 有这个properties data message

03:49.040 --> 03:50.000
这个message

03:50.560 --> 03:53.360
这个叫什么 message 是吧 message的复苏 message

03:53.680 --> 03:57.760
啊 the options 啊这个external classes 对吧

03:58.800 --> 04:07.600
啊 具体就是具体还有些什么样的这个选项 那这个肯定是什么 肯定是看这边这边他的这个文档啊 这边你把它打开嘛

04:10.000 --> 04:15.680
这边component 看到没有 component啊 你看他这边这边他就会有这个他的这个文档

04:16.800 --> 04:17.040
在

04:18.560 --> 04:19.680
constructors

04:20.640 --> 04:23.440
哦 他这个还是英文的吗 我看一下啊

04:24.480 --> 04:25.040
on move

04:26.400 --> 04:31.680
他应该是有个列表才对啊 他这边是这样子单独列出来的啊 这边data

04:32.480 --> 04:40.320
这边啊properties 他这样子列出来的啊 ok 就具体的话你要去看这个文档 就是先掌握这个最基本的

04:40.640 --> 04:48.240
最基本的使用啊 掌握了之后呢 剩下的话实际上就是看那个文档 他还提供了哪些就是更多的一些这个可配置项目

04:49.920 --> 05:01.920
ok 回到这边啊 这边的话这个behaviorsbehaviors一会在这一小节啊 这一小节会讲啊 这个实际上你学过那个view的话 这个很好理解 他就相当于是view的那个mix in

05:02.800 --> 05:06.800
啊 他就相当于是mix in 就是抽离那个公共的这个逻辑的啊

05:07.440 --> 05:15.840
啊 这个properties properties是不是上几个讲过了 对不对 这个就是你副组建啊 传入的一些属性啊 data data是

05:16.080 --> 05:19.440
是有数据啊 用于可用于模板渲染

05:20.400 --> 05:25.680
好 人家这边我们又多一个 怎么说life times啊 对不对 life times

05:26.480 --> 05:34.500
好 记到笔记里面啊 这边life times啊 上节课的我就

05:35.300 --> 05:40.340
上节课的就放到这啊 上节课的就放到这啊 我就不拿过来了啊 我这边就继续

05:41.940 --> 05:44.820
life times 这个是什么呢 这个是生命周期

05:45.540 --> 05:55.650
生命周期 勾字函数 啊 把上节课的还是拿过来吧 这边有你有什么

05:56.290 --> 06:06.370
有properties 把这些拿过来 对吧 ok 好这个life times life times 他这个是生命周期

06:06.690 --> 06:11.010
勾字函数 你注意他这个生命周期勾字函数 他这边的话是可以写到外面的

06:11.570 --> 06:18.050
看吧 你看这边attached 啊 这边attached 啊 这边move 啊 木你也可以写到外面啊 然后这个detached

06:18.450 --> 06:26.450
但是他现在建议你什么呢 建议你统一写在这个life times里面啊 就早期的时候他就单独挂在外面了 他就和那个

06:26.930 --> 06:33.330
配级勾字函数 以及那个app勾字函数啊 就和那两个齐发很相似啊 就直接写在外面

06:33.730 --> 06:38.930
但现在的话他推荐你写在什么呢 写在这个life times 这个对象里面 ok

06:41.100 --> 06:50.220
早期的时候 早期的时候啊 生命周期勾字函数

06:51.180 --> 06:56.380
和这个配级 啊 以及这个app 一样啊 直接

06:57.500 --> 07:04.460
写在 直接写在这个配置对象里面

07:06.060 --> 07:10.780
对吧 你看我们这边这个app 啊 比如说这个app

07:12.380 --> 07:17.100
这个app 啊 这边比如说有这个生命周期勾字函数 他是不是直接写了这个配置对象里面

07:17.660 --> 07:25.260
对吧 啊 以及我们这边 这边 这边 我们如果有那个生命周期勾字函数比较on show的话 是不是直接写在这后面

07:25.740 --> 07:29.420
对不对 直接写到这后面啊 啊 show

07:31.340 --> 07:35.740
这样子啊 对不对 他就直接写在这个配置对象里面啊

07:36.220 --> 07:43.580
他这个早期的时候 这个component里面的这个生命周期勾字函数也是啊 直接写在里面啊 但是后面

07:43.900 --> 07:52.700
但是后面 随着什么呢 随着版本的更新啊 现在推荐

07:54.220 --> 08:01.630
写在哪里呢 写在这个life times对象里面 life times配置对象

08:02.910 --> 08:06.670
里面 ok 啊 这是关于这个生命周期勾字函数

08:07.230 --> 08:12.910
啊 这个一会我们来看啊 一会我们到到这一小节的时候 我们在具体来看啊 这三个生命周期勾字函数分别是什么

08:13.150 --> 08:18.270
啊 好 然后接下来的话 他这边是有一个pg life times

08:18.910 --> 08:23.070
看到没有啊 这个是主键所在页面的生命周期勾字函数

08:24.030 --> 08:25.390
他这边还有个这个啊

08:26.670 --> 08:34.380
这个是pg life times 这个主键所在页面

08:35.740 --> 08:36.940
的生命周期

08:38.140 --> 08:42.620
啊 好 然后还有就是message message上一个看了的 是吧 ok

08:43.420 --> 08:44.940
好 然后接下来我们继续

08:45.580 --> 08:53.820
使用component构造器来构造页面啊 事实上小程序的页面也可以视为自定义主键

08:54.540 --> 09:05.020
ok 因而页面也可以使用component构造器进行构造啊 然后拥有与这个普通主键一样的定义段和实力方法

09:05.580 --> 09:09.820
但是此时就要求什么了 要求这个对应的接受文件啊

09:10.220 --> 09:14.460
包含什么了 包含using components这个定义段 这个很重要

09:15.180 --> 09:17.660
啊 我可以把什么呢 我可以把整个这个页面

09:19.020 --> 09:24.860
就比如说我这边是不是有一个index这个页面 对不对 我这个的话实际上也可以把它看作是一个自定义主键

09:25.420 --> 09:32.300
啊 你看是这个这个结构都是一样的 对不对wxmail.ss啊 结构和样式那在这边这个gs

09:33.260 --> 09:38.060
可不可以啊 那在这边这个gs啊 结构都是一模一样的 所以他这个本身就和页面很像是

09:38.460 --> 09:43.340
啊 所以这边的话人家就直接告诉你了 你页面你其实也可以看作是自定义主键

09:43.820 --> 09:50.060
啊 可以使用什么呢 可以使用component构造器构造啊 但是就是需要你那个接受里面啊 必须要包含这个

09:52.300 --> 09:56.220
啊 那这边的话他应该是给了一个势力 我看一下是不是给了个势力

09:58.060 --> 10:02.380
呃页面的生命周期方法 应写在message里面

10:02.940 --> 10:07.580
就你现在的话页面如果你把它当成一个主键 你叫写到message里面 那我们这边我们来看一下

10:08.300 --> 10:09.420
好吧 我们来看一下

10:10.380 --> 10:13.260
嗯 回到这边 我们先在笔记里面记一下吧

10:13.980 --> 10:19.200
啊 笔记里面记一下啊 实际上

10:20.320 --> 10:25.760
页面也可以被当作是一个主键

10:26.960 --> 10:35.280
是一个自定义主键来使用啊 我就简单记一下啊 那你具体的话 你这边要参照这个文档

10:35.520 --> 10:37.120
好吧 重点把它记下来啊

10:37.680 --> 10:41.760
好 那我们这边让我们来看个例子吧 我们自己来看一个例子来看一下

10:42.320 --> 10:44.640
比如说我现在的话 这边这个配级

10:45.360 --> 10:48.640
配级我们有一个index 刚好这边有个什么 是不是有个这个logs

10:49.680 --> 10:53.520
对不对 有个logs啊 这个logs我们就把什么呢 我们就把这个log

10:53.920 --> 10:59.200
当成一个这个主键啊 当成一个主键来用啊 那我们这边呢 他就需要配置什么呢

10:59.200 --> 11:03.520
他就需要和你这边这个自定义主键一样啊 这边这个component to

11:04.080 --> 11:07.200
那using components 我们这边的话就是应该是

11:07.920 --> 11:09.120
component to

11:13.260 --> 11:16.300
啊component 是component吧 我看一下

11:17.580 --> 11:22.220
呃component对啊component to好 还有没有什么其他的

11:23.500 --> 11:27.740
using component 这个有了啊 有了之后 然后接下来的话

11:28.540 --> 11:35.070
我看他这边怎么用 这边页面a 我看一下啊

11:36.990 --> 11:42.830
啊 他这边的话 相当于就在页面里面 他直接就使用这个component来构造这个页面

11:43.070 --> 11:47.230
啊 你看他上面也是这么说的 对不对 就这边呢 你可以使用

11:47.870 --> 11:53.710
啊 在这里啊页面使用这个component构造器来构造啊 来我们这边我们来试一下吧

11:54.430 --> 12:01.230
回到这边啊 回到这边的话 然后我们这边是不是有个logs个页面啊 这是他默认啊 默认的

12:01.230 --> 12:04.990
ok 我们把这个先改简单点吧 我们这边呢 就是logs

12:06.190 --> 12:12.750
页面 对吧 好 然后接下来的话 我在这边 我在这边的话 我就像使用这个主键一样

12:13.070 --> 12:20.530
好 这边来使用啊 就像使用制定一组件一样啊 我这边呢 就是log

12:21.730 --> 12:24.770
对应的是什么呢 对应的是pages

12:25.810 --> 12:30.130
pages是下面的这个logs 下面的

12:32.050 --> 12:37.410
logs 对吧啊 对应的是这个页面好 然后接下来的话在我们这边

12:38.850 --> 12:41.730
在我们这边啊 我们这边让我们就使用使用这个

12:42.130 --> 12:50.050
ok 我们这边保存一下 保存了 然后你看这边出来了 对不对 这边log

12:51.090 --> 12:56.370
当我现在的话 我这边还没有使用那个component 我这边他仍然是什么 仍然是pages

12:57.170 --> 12:59.810
好 我这边呢 可以把它改成什么了 把它改成这个component

13:00.530 --> 13:00.930
行不行

13:01.810 --> 13:02.610
component

13:05.040 --> 13:11.440
保存一下 可以了 对不对 没有问题了啊 这就是他这边所说的这个页面

13:11.520 --> 13:14.320
你也可以把它当成是一个制定一组件啊

13:15.600 --> 13:24.480
好 他说这样子的有个好处 好处的话 就是可以使用behaviors来提取所有页面中的这个公用的这个代码段

13:25.040 --> 13:29.920
啊 但这个behaviors咱们还没学啊 一会这个下面后面我们来看这个behaviors

13:30.480 --> 13:33.840
啊 但我刚才说了啊 他实际上就和那个mixin是一样的

13:34.560 --> 13:40.320
ok 啊 这是关于这个component构造器啊 其他就没什么了

13:41.040 --> 13:41.840
啊 其他就没什么了

13:43.040 --> 13:43.760
好 下一个

13:44.880 --> 13:52.880
下一个然后是关于组件间通信和世界 这个的话实际上也不是什么新知识

13:54.080 --> 13:59.360
也不是什么新知识啊 这个实际上的话就和什么呢 就和那个view是一样的

14:00.160 --> 14:05.440
副元素向指元素啊 就副向指传递数据通过什么呢 通过probs

14:06.160 --> 14:10.160
指向副传递数据通过什么呢 通过这个自订事件

14:10.640 --> 14:17.760
看了没有 看他这边一样的 看了没有 这边啊 我绑定一个自订事件 绑定一个自订事件之后 然后这个

14:18.640 --> 14:21.440
呃 指元素他是通过什么呢 通过这个trigger

14:22.080 --> 14:28.960
trigger event来触发副组件传递过来的自订事件啊 从而进行这个通信

14:29.760 --> 14:34.000
实际上就和那个view是不是一样的 对view的话怎么他用的是这个downer emit

14:34.800 --> 14:38.960
对吧啊 来我们这边 我们还是把这个例子我们写一下啊 写一下我们看一下

14:43.100 --> 14:51.660
啊 比如说现在我们这边啊 回到我们这里 这里的话 其实副传指我们实际上上就可以演示了 就是通过什么 通过这个probs

14:52.220 --> 14:54.700
对不对 他这边呢 是他这边叫做这个povertis

14:55.260 --> 14:59.500
啊 这边povertis 那副组件是不是就把他的数据是传递给指主键了

14:59.740 --> 15:02.460
啊 我们主要看一下这个指主键如何向副组件

15:02.940 --> 15:04.540
传递这个数据啊

15:05.260 --> 15:07.980
啊 我看看我这边怎么写呢 我这边这个样子

15:08.540 --> 15:12.940
我这边加一个按钮再加一个什么呢 再加一个首先加个input的框

15:14.540 --> 15:15.340
加个input

15:17.020 --> 15:17.340
ok

15:18.460 --> 15:21.340
啊 这边加个input的框啊 这边可以输入东西啊

15:21.900 --> 15:26.300
啊 给稍微给点样子吧 不然这个看上去不太好看

15:27.260 --> 15:30.060
然后这里这里的话是text

15:30.620 --> 15:33.420
我们给这个text 稍微加一点样子

15:34.780 --> 15:35.740
点text

15:37.020 --> 15:39.020
好 然后接下来这边给他一个

15:41.980 --> 15:42.780
给他一个border

15:44.140 --> 15:45.180
border top

15:46.620 --> 15:49.020
是一个erpx 收利的

15:49.660 --> 15:51.260
啊 然后要个什么线呢

15:52.220 --> 15:52.860
警号

15:55.020 --> 15:55.420
给个

15:56.460 --> 15:56.860
比如说

15:58.060 --> 15:59.500
我看一下 a a

16:00.220 --> 16:02.860
可以吧啊 那接下来这个border bottom

16:05.410 --> 16:09.570
border bottom啊 也一样啊 保存啊 这现实不出来

16:09.810 --> 16:12.370
出来之后 然后这样我们再让他稍微有一点

16:13.490 --> 16:13.890
pidding

16:16.370 --> 16:17.090
pidding

16:17.730 --> 16:18.610
啊 给个10

16:19.170 --> 16:19.890
rpx

16:21.330 --> 16:22.850
好 差不多了 是吧 ok

16:22.850 --> 16:24.450
好 在这边可以输入

16:24.610 --> 16:27.490
输入之后 然后接下来的话 我们这边让他输入一个什么呢

16:28.050 --> 16:31.170
随便输入什么都可以啊 反正传递给这个副主键就行

16:31.490 --> 16:31.810
对不对

16:32.370 --> 16:36.210
好 然后接下来我们在这里 这里的话我们写个border

16:36.930 --> 16:39.010
border这个就是什么呢 这个就是传递

16:39.730 --> 16:40.930
给副主键

16:44.110 --> 16:45.710
副主键

16:46.510 --> 16:50.030
ok 这边有个butter 也就是说这边我只主键 只主键我在这儿输东西

16:50.030 --> 16:53.070
输了之后 然后点一下这个按钮 就传递给副主键了

16:53.070 --> 16:55.550
好 我们这边这边不用两个啊 一个就可以了

16:56.510 --> 17:00.190
嗯 回到这边啊 把这个上面这个我们就把它注射掉

17:00.590 --> 17:01.310
这就不要了

17:02.110 --> 17:02.910
ok 就一个

17:03.390 --> 17:07.150
好 这个能看懂吧 就整个我这个是只主键

17:07.710 --> 17:09.950
啊 这个是只主键 然后加这边有个输入框

17:10.270 --> 17:12.990
这边有个输入框啊 输入框 然后接下来这边呢

17:12.990 --> 17:16.670
我点一下 点一下他就他就传递给这个副主键

17:17.230 --> 17:20.910
ok 我这边的话 我再把他给一个 这边这个container

17:21.310 --> 17:24.190
我再把他给一个pidding啊 大家看清楚一些

17:25.790 --> 17:28.670
这样子 这样子会越好一点 稍微好一点吧

17:29.150 --> 17:32.750
ok 好 然后接下来的话我这里

17:33.550 --> 17:38.030
我这里的话点传递 那传递的话呢 接下来是不是要给bar to绑世界

17:38.750 --> 17:40.590
对不对啊 来我们来到这边

17:42.190 --> 17:48.430
来到来到这里啊 这里给bar to绑世界绑的type

17:49.550 --> 17:50.430
等于一个什么呢

17:51.230 --> 17:55.230
等于一个啊type handle已经有了啊 就取个啥名字了

17:56.350 --> 18:02.750
啊trigger trigger handle 啊比我叫做trigger handle

18:03.470 --> 18:07.870
好 然后接下来来到jess这边 jess这边的话在message里面

18:09.230 --> 18:13.870
ok 这边这个世界啊我要做什么事情 我是不是要向这个副主键

18:14.750 --> 18:17.550
对不对 向副主键

18:19.150 --> 18:23.950
向副主键传递这个输入框

18:24.910 --> 18:26.990
里面的内容

18:27.470 --> 18:30.910
那首先第一步要干嘛 第一步是不要拿到输入框的内容

18:31.550 --> 18:34.670
对不对 怎么拿啊 你这边可以用这个双向绑定嘛

18:35.550 --> 18:38.030
对吧啊 比如说我这边的话有一个

18:39.150 --> 18:40.350
content已经有了啊

18:41.230 --> 18:42.750
这个取个啥名字呢

18:44.670 --> 18:46.510
啊 比如就叫做input

18:47.470 --> 18:48.030
content

18:49.070 --> 18:49.550
可不可以

18:50.110 --> 18:53.550
ok 好 然后接下来的话你在这边的话是不是可以做一个

18:53.790 --> 18:54.350
双向绑定

18:55.150 --> 18:55.550
在这边

18:56.190 --> 18:58.190
他这个双向绑定是怎么写的

18:58.750 --> 19:00.910
好像是model 是吧 model

19:01.710 --> 19:02.110
value

19:04.800 --> 19:06.400
然后这边呢是这个input

19:07.520 --> 19:09.040
input content

19:09.520 --> 19:15.840
你注意你这边的话在写这个双向绑定的时候 一定要注意你这个基础库啊 我之前就吃过这个亏

19:16.640 --> 19:19.520
啊 我当时写这个双向绑定他半天效果就不出来

19:20.080 --> 19:22.720
啊 我当时我在那想了半天 我说语法这些都对的呀

19:23.200 --> 19:27.360
咋回事啊 啊 当时他想了半天后来我才反应过来 就是这边这个基础库

19:27.840 --> 19:29.120
啊 你不能是太老的库

19:29.760 --> 19:33.760
ok 啊 你尽量选新一点的库 这样子他这个语法才生效

19:34.320 --> 19:34.720
好不好

19:35.280 --> 19:38.080
好 然后接下来我们这边首先看能不能拿得到啊

19:38.320 --> 19:39.680
我们这边一步一步走

19:40.480 --> 19:42.080
console.nog

19:42.080 --> 19:44.080
res.data

19:44.640 --> 19:46.880
点什么 input content

19:47.840 --> 19:49.360
对吧 后面加个标识嘛

19:50.480 --> 19:51.200
input

19:52.080 --> 19:52.560
content

19:53.680 --> 19:54.720
保存

19:55.360 --> 19:57.520
保存之后然后加这边编译一下

20:00.500 --> 20:04.100
好 编译一下之后人家我们这边来哈 比如说res

20:04.660 --> 20:06.980
哦 这个这个是什么 这个之前讲过的

20:07.540 --> 20:09.860
对 这个讲过的你这边得给他绑一个

20:11.540 --> 20:13.060
bund input

20:13.860 --> 20:14.660
等于一个

20:16.020 --> 20:16.660
input

20:17.620 --> 20:18.020
handle

20:18.660 --> 20:20.820
啊 你这个input handle你写个空都可以

20:21.700 --> 20:23.940
他这个是微信小程序的一个bug

20:25.140 --> 20:29.940
现在很多这些东西他感觉他也没 他们官方也没怎么维护了

20:32.020 --> 20:34.180
好 让一下这边来 ok

20:34.180 --> 20:34.980
是不是 ok 了

20:34.980 --> 20:37.780
好 this is a test

20:38.420 --> 20:40.100
传递 拿到了对不对

20:40.100 --> 20:42.660
好 拿到了之后 然后接下来关键是什么呢

20:42.660 --> 20:44.420
我们现在已经知道了 通过这个

20:44.420 --> 20:45.540
因为双向绑定嘛

20:45.860 --> 20:46.980
通过这个可以拿到

20:47.460 --> 20:48.020
指主键

20:48.660 --> 20:50.100
这边输入的数据

20:50.100 --> 20:51.940
关键是要传递给

20:52.820 --> 20:53.380
副主键

20:54.180 --> 20:54.980
怎么传

20:55.860 --> 20:57.780
触发副主键

20:57.780 --> 20:59.860
传递过来的制定意事件

21:02.420 --> 21:03.060
触发

21:04.580 --> 21:05.780
副主键

21:06.820 --> 21:07.700
传递

21:08.260 --> 21:11.700
过来的制定意事件

21:12.500 --> 21:13.700
是不是合View一模一样嘛

21:14.260 --> 21:15.620
对不对 这有啥难的嘛

21:15.620 --> 21:15.940
对不对

21:16.580 --> 21:18.900
View的话是这个downer emit

21:18.900 --> 21:20.580
它直播它是通过这个trigger

21:21.700 --> 21:24.020
那首先的话那回到我们副主键这边

21:24.100 --> 21:26.820
那副主键你这边是不是就得绑一个制定意事件

21:27.460 --> 21:28.020
对不对

21:28.020 --> 21:29.460
比如说我这边我bund

21:29.460 --> 21:31.700
你以前绑事件你绑的是比较type

21:31.700 --> 21:32.180
对不对

21:32.180 --> 21:33.220
或者什么input

21:33.220 --> 21:35.300
那我这边就绑一个my event

21:35.940 --> 21:36.500
可不可以啊

21:37.220 --> 21:37.860
对不对

21:37.860 --> 21:39.380
bund my event

21:39.380 --> 21:40.260
等于一个什么呢

21:40.260 --> 21:43.620
等于一个my event handle

21:44.420 --> 21:44.740
好

21:44.740 --> 21:45.780
然后my event handle

21:45.780 --> 21:47.860
那接下来在你的副主键这边

21:47.860 --> 21:48.740
啊这边你就啊

21:48.740 --> 21:49.540
这这个就上了

21:50.820 --> 21:51.540
这边

21:51.540 --> 21:53.140
这边你是不是就需要输写

21:54.260 --> 21:54.580
对不对

21:55.780 --> 21:56.100
好

21:56.100 --> 21:56.740
那这边呢

21:56.740 --> 21:58.900
咱们就叫做my event handle

21:58.900 --> 21:59.460
触发了

22:01.060 --> 22:01.540
触发了

22:02.900 --> 22:03.700
ok

22:03.700 --> 22:04.100
好

22:04.100 --> 22:04.980
然后接下来吧

22:04.980 --> 22:05.620
在这边

22:05.620 --> 22:06.260
这边的话

22:06.260 --> 22:10.020
你绑定的是my event

22:10.020 --> 22:11.220
那等一下我看一下啊

22:11.220 --> 22:11.620
这边

22:13.710 --> 22:15.150
这边的话是my event

22:15.150 --> 22:16.110
我们刚才是叫my event

22:16.110 --> 22:16.350
嘛

22:16.350 --> 22:17.390
叫做my event handle

22:17.390 --> 22:18.430
这边不应该是handle

22:18.430 --> 22:19.790
这边应该叫做my event

22:20.430 --> 22:20.670
对吧

22:20.670 --> 22:22.190
你这边绑定的是my event

22:22.830 --> 22:24.030
绑定的是my event

22:24.190 --> 22:24.750
所以这边呢

22:24.750 --> 22:26.910
应该是触发这个my event

22:26.910 --> 22:27.230
好

22:27.230 --> 22:28.110
然后接下来的话

22:28.110 --> 22:29.230
这边传了这个值

22:30.270 --> 22:30.910
这个值

22:30.910 --> 22:31.150
哎

22:31.150 --> 22:31.630
等一下

22:31.630 --> 22:32.670
让我想一想

22:32.670 --> 22:33.070
哦不对

22:33.070 --> 22:34.350
就就是my event handle

22:35.870 --> 22:36.270
对对对

22:36.270 --> 22:37.710
这个是你的事件处理函数吗

22:38.350 --> 22:38.750
对吧

22:38.750 --> 22:39.870
这个是我们的事件处理函数

22:39.870 --> 22:40.750
就好比你这边

22:40.750 --> 22:41.950
比如说你绑定一个type

22:42.750 --> 22:45.550
比如说你这边绑定一个type

22:45.550 --> 22:46.430
点击事件啊

22:46.430 --> 22:47.550
对应的是这个

22:47.550 --> 22:48.110
那回头呢

22:48.110 --> 22:49.470
你写的事件处理函数

22:49.470 --> 22:50.190
是不是他嘛

22:50.830 --> 22:51.390
对不对

22:51.390 --> 22:52.350
是他啊对的

22:53.230 --> 22:53.790
ok

22:53.950 --> 22:54.990
刚才是写对了的

22:55.710 --> 22:57.150
这边是my event handle

22:58.030 --> 22:58.270
好

22:58.270 --> 22:58.990
回到这边

22:58.990 --> 22:59.550
这边的话

22:59.550 --> 23:00.110
那回头的话

23:00.110 --> 23:01.390
你这边是不是就会

23:01.390 --> 23:02.430
在指主键你就干嘛

23:02.430 --> 23:04.430
你是不是就触发这个事件就可以了

23:05.550 --> 23:06.030
对不对

23:06.030 --> 23:06.590
在指主键

23:06.590 --> 23:08.990
我们就触发my event这个事件

23:08.990 --> 23:09.230
好

23:09.230 --> 23:10.430
那回到这边

23:11.070 --> 23:12.030
回到这边

23:12.030 --> 23:12.270
啊

23:12.270 --> 23:13.630
如何来触发呢

23:13.630 --> 23:13.790
啊

23:13.790 --> 23:14.270
看文档

23:15.550 --> 23:16.350
这边怎么触发

23:16.910 --> 23:18.350
他这边是通过z

23:18.350 --> 23:20.030
是点trigger event

23:20.830 --> 23:21.550
看到没有

23:21.550 --> 23:22.430
通过这个

23:22.430 --> 23:22.830
z

23:22.830 --> 23:24.430
是点trigger event

23:24.430 --> 23:26.830
你要触发副主键的什么事件

23:26.830 --> 23:30.350
啊触发他的这个my event

23:31.230 --> 23:31.790
对吧

23:31.790 --> 23:32.750
好来我们这边来看一下

23:32.750 --> 23:33.390
能不能触发

23:34.350 --> 23:35.230
重新编一下

23:36.270 --> 23:36.510
好

23:36.510 --> 23:36.830
这边

23:37.550 --> 23:37.950
可以吧

23:38.510 --> 23:38.910
对

23:38.910 --> 23:39.710
可以触发

23:39.710 --> 23:40.910
可以触发那事情就好办了

23:40.910 --> 23:41.470
呗

23:41.470 --> 23:42.350
那我这边的话

23:42.350 --> 23:43.630
我就输了之后

23:43.630 --> 23:45.230
我就把这个对应的这个值

23:45.230 --> 23:45.790
通过什么呢

23:45.790 --> 23:46.910
通过第二个参数

23:46.910 --> 23:48.430
他这边实际上有三个参数

23:49.070 --> 23:49.470
看到没有

23:49.470 --> 23:50.830
有my event detail

23:51.390 --> 23:51.950
他是一个什么

23:52.030 --> 23:52.990
他是个对象

23:53.550 --> 23:54.190
啊

23:54.190 --> 23:54.430
啊

23:54.430 --> 23:54.990
人家这边呢

23:54.990 --> 23:55.390
有这个

23:56.110 --> 23:59.150
这个是提供给世界监听函数的

23:59.150 --> 23:59.790
那还有什么呢

23:59.790 --> 24:00.990
还有这个选项

24:00.990 --> 24:02.830
选项他这边包含这么一些

24:02.830 --> 24:03.070
啊

24:03.070 --> 24:04.590
就是是否冒泡啊

24:04.590 --> 24:07.550
还有这个是否逐渐越界啊之类的

24:07.550 --> 24:07.870
ok

24:07.870 --> 24:09.630
还有就是补货呀之类的

24:09.630 --> 24:09.790
啊

24:09.790 --> 24:10.590
冒泡和补货

24:10.590 --> 24:12.830
这个之前我们在世界的这个章情

24:12.830 --> 24:13.950
我们是讲过了

24:13.950 --> 24:14.190
啊

24:14.910 --> 24:15.150
好

24:15.150 --> 24:15.790
我们这边呢

24:15.790 --> 24:17.550
就传这个就传这个就可以了

24:18.510 --> 24:19.070
就传这个

24:20.270 --> 24:21.790
就传第二个参数就可以了

24:22.190 --> 24:23.550
这边就是一个对象

24:23.550 --> 24:24.270
对象里面

24:24.270 --> 24:24.990
然后接下来

24:24.990 --> 24:25.710
input

24:27.390 --> 24:28.990
input content

24:29.630 --> 24:30.670
对应的是什么呢

24:30.670 --> 24:31.310
对应的是

24:32.190 --> 24:32.910
对应的是他

24:35.280 --> 24:36.000
对吧

24:36.000 --> 24:37.040
对应的是他

24:37.040 --> 24:37.280
好

24:37.280 --> 24:39.440
然后回头在你的副组建这边

24:40.720 --> 24:41.680
副组建这边

24:41.680 --> 24:42.240
啊这边的话

24:42.240 --> 24:44.480
理论上来讲就应该是接受得到

24:44.480 --> 24:46.160
我们看一下他这边是怎么接受的

24:47.600 --> 24:48.800
副组建这边

24:49.520 --> 24:50.560
有没有啊

24:50.560 --> 24:51.120
有没有写

24:51.840 --> 24:52.880
应该是写了的

24:54.480 --> 24:55.520
副组建

24:57.760 --> 24:58.960
1.detail

24:58.960 --> 24:59.920
我们这边看

24:59.920 --> 25:01.760
看下是不是通过1.detail

25:01.760 --> 25:02.560
能够拿得到

25:04.480 --> 25:05.680
我看一下啊

25:05.680 --> 25:07.680
比如说这边一个info

25:08.560 --> 25:09.520
我们这边打印一下

25:10.640 --> 25:10.960
e

25:11.680 --> 25:13.040
然后再打印一下info

25:14.880 --> 25:15.200
ok

25:15.200 --> 25:16.480
看下他是第几个参数

25:17.680 --> 25:18.000
好

25:18.000 --> 25:18.720
重新编印一下

25:20.560 --> 25:20.960
好

25:20.960 --> 25:23.200
this is a test

25:24.160 --> 25:24.480
走

25:25.600 --> 25:25.840
好

25:25.840 --> 25:26.400
这个这个

25:26.400 --> 25:27.360
第二个参数是没有的

25:27.360 --> 25:28.320
那一会不用管他

25:28.320 --> 25:29.120
我们看一下他这边

25:29.920 --> 25:30.400
拿到了

25:30.960 --> 25:31.600
看到没有

25:31.600 --> 25:32.640
是不是就在detail里面

25:32.640 --> 25:34.160
啊这个这个info那就不需要这个

25:35.280 --> 25:36.960
我主要看他是第几个参数

25:36.960 --> 25:37.200
好

25:37.200 --> 25:38.000
这边让你看这边

25:38.000 --> 25:39.440
是不是就通过1.detail

25:40.000 --> 25:40.720
对不对

25:40.720 --> 25:43.200
啊1.detail

25:43.200 --> 25:44.320
那接下来点什么

25:44.320 --> 25:45.120
是不是input

25:46.720 --> 25:47.200
content

25:48.080 --> 25:48.880
是不是就拿到了

25:49.760 --> 25:50.320
对不对

25:50.480 --> 25:51.040
就拿到了

25:52.560 --> 25:53.520
所以拿到了

25:53.520 --> 25:54.160
拿到之后

25:54.160 --> 25:55.840
这样我就可以把这个字干嘛

25:55.840 --> 25:56.800
是不是就是

25:56.800 --> 25:58.080
设置给这个副主见

25:58.800 --> 25:59.200
对

25:59.200 --> 26:00.560
比如说我这边的话有一个

26:02.160 --> 26:02.720
有一个

26:04.720 --> 26:05.120
text

26:06.640 --> 26:07.200
text

26:07.200 --> 26:07.760
text

26:07.760 --> 26:08.880
然后一开始这边

26:10.480 --> 26:10.800
这里

26:12.640 --> 26:14.400
这里的话是这个text

26:15.360 --> 26:15.600
对吧

26:15.600 --> 26:16.960
那一开始的话是空

26:16.960 --> 26:18.000
啊是空的话

26:18.000 --> 26:19.200
然后接下来我在这边

26:20.160 --> 26:21.440
这边我拿到你之后

26:21.440 --> 26:22.080
再加我这边

26:22.080 --> 26:24.240
this.set data

26:25.680 --> 26:26.720
我就可以设置什么

26:26.720 --> 26:27.360
是不是text

26:28.800 --> 26:29.360
是什么

26:29.360 --> 26:30.960
是你这边传递过来

26:30.960 --> 26:32.160
就只主见

26:32.160 --> 26:34.160
给我传递过来的数据

26:35.040 --> 26:35.840
是不是可以这样子啊

26:36.480 --> 26:37.120
对不对

26:37.120 --> 26:37.280
好

26:37.280 --> 26:37.840
保存一下

26:38.480 --> 26:39.120
保存之后啊

26:39.120 --> 26:39.760
重新变一下

26:41.360 --> 26:41.680
好

26:41.680 --> 26:42.320
这边来看

26:43.200 --> 26:45.520
this is a test

26:46.080 --> 26:46.480
存定

26:47.120 --> 26:47.600
怎么搞定

26:48.400 --> 26:48.800
对不对

26:49.200 --> 26:50.160
就搞定了

26:50.160 --> 26:50.400
啊

26:50.400 --> 26:51.840
本质上也不难啊

26:51.840 --> 26:52.880
实际上就是那个

26:52.880 --> 26:54.160
就是那个view的那一套

26:54.880 --> 26:55.600
对不对

26:55.600 --> 26:56.960
就是view的那一套

26:56.960 --> 26:58.320
这边只不过就是

26:58.320 --> 26:59.440
语法稍微不一样

26:59.440 --> 27:01.520
他用的是trigger event

27:01.520 --> 27:03.200
view用的是downer emit

27:04.160 --> 27:05.200
好来笔记记一下

27:07.360 --> 27:08.080
主见之间

27:11.470 --> 27:13.070
主见之间

27:13.950 --> 27:15.310
涉及到什么呢

27:15.310 --> 27:17.390
涉及到这个数据的传递

27:18.510 --> 27:19.550
数据的传递

27:20.270 --> 27:22.190
然后就和这个view

27:23.230 --> 27:24.750
是相似的

27:25.790 --> 27:26.430
对不对

27:26.430 --> 27:27.550
付传指

27:28.590 --> 27:31.070
通过那个view里面是probs

27:31.070 --> 27:32.110
他这边叫什么

27:32.110 --> 27:33.950
他这边叫做这个poperties

27:35.230 --> 27:36.350
他这边叫做poperties

27:37.150 --> 27:37.470
对吧

27:38.190 --> 27:38.590
好

27:38.590 --> 27:39.710
通过poperties

27:40.430 --> 27:41.950
然后指传付

27:43.550 --> 27:44.670
指传付

27:45.470 --> 27:46.430
通过什么呢

27:46.430 --> 27:48.430
通过这个触发

27:49.790 --> 27:50.590
触发

27:51.390 --> 27:52.750
付主件

27:54.270 --> 27:57.070
付主件的这个自定义事件

27:58.110 --> 27:59.230
自定义事件

28:00.030 --> 28:01.470
来传递

28:01.470 --> 28:02.030
对不对

28:02.030 --> 28:02.350
好

28:02.350 --> 28:03.230
注意

28:03.230 --> 28:04.110
在触发

28:05.550 --> 28:10.350
在触发付主件的自定义

28:10.350 --> 28:11.470
事件时

28:12.910 --> 28:14.830
使用的是什么

28:14.830 --> 28:16.830
z是点trigger

28:19.140 --> 28:19.620
写对没有

28:19.620 --> 28:19.940
trigger

28:21.780 --> 28:23.700
trigger

28:26.260 --> 28:28.100
triggr对的

28:28.100 --> 28:30.340
通过这个trigger event

28:30.340 --> 28:32.100
还不是单纯的一个trigger

28:32.100 --> 28:32.980
trigger event

28:34.740 --> 28:36.580
他是通过这个z十点

28:36.580 --> 28:37.540
trigger event

28:38.340 --> 28:39.460
来进行触发的

28:42.420 --> 28:43.700
来进行触发的

28:44.740 --> 28:45.460
ok

28:45.460 --> 28:46.980
代码的话我就不记了

28:46.980 --> 28:49.380
代码的话到时候你就看我这个可能代码就可以了

28:49.700 --> 28:53.700
这是关于这个通信

28:53.700 --> 28:55.780
看看后面还有什么

28:55.780 --> 28:56.980
后面基本就没什么了

28:56.980 --> 28:58.020
你看这边是监听

28:58.020 --> 28:58.900
一个是监听事件

28:58.900 --> 29:00.260
一个是触发事件

29:00.260 --> 29:02.820
触发事件就是通过这个trigger event

29:02.820 --> 29:03.780
对吧

29:03.780 --> 29:06.740
这边他给了你一个这个实力

29:06.740 --> 29:08.980
你可以把他给的实力也可以看一下

29:11.460 --> 29:15.300
然后接下来这边的话有一个获取主件实力

29:15.300 --> 29:16.500
我们来看一下

29:17.300 --> 29:19.780
可在副主件里面

29:19.780 --> 29:20.500
调用什么

29:20.500 --> 29:23.380
调用z点select component

29:23.380 --> 29:26.420
获取只主件的实力对象

29:26.420 --> 29:29.940
调用时需要传入一个匹配选择器selecter

29:29.940 --> 29:31.540
不用他这边给个例子

29:31.540 --> 29:34.020
z点select component

29:34.020 --> 29:36.900
那就在这边点my component

29:36.900 --> 29:38.900
那我们来看一下他这个是什么意思

29:38.900 --> 29:40.740
他这边应该就是获取到那个

29:40.740 --> 29:42.100
获取到你自定义

29:42.900 --> 29:44.900
就是你这个自定义主件

29:44.900 --> 29:46.900
整个这个实力

29:46.900 --> 29:48.900
你这边直接看下看他的效果

29:48.900 --> 29:49.900
对吧

29:49.900 --> 29:50.900
直接看他的

29:50.900 --> 29:53.540
他这边给了你这么多实力

29:53.540 --> 29:59.250
我们来看一下他的他的这个

29:59.250 --> 30:04.480
他这边的话首先有一个index

30:04.480 --> 30:06.880
index他这边

30:06.880 --> 30:08.480
这边的话是这个

30:08.480 --> 30:10.320
这个是他的自定事件对吧

30:10.320 --> 30:12.720
自定事件的他这边上也给了一些内名

30:12.720 --> 30:15.360
给了一些内名之后我看这边获取

30:15.360 --> 30:17.120
我知道他什么意思了

30:17.120 --> 30:19.200
他这边的话就是通过什么呢

30:19.200 --> 30:21.280
通过就是这边内选择器

30:21.280 --> 30:23.440
通过他该所说的那个语法

30:23.440 --> 30:24.560
就是这个

30:24.560 --> 30:27.120
z点select component

30:27.120 --> 30:29.920
获取到你这个自主件

30:29.920 --> 30:32.480
获取到你这个自主件的这个实力

30:32.480 --> 30:34.480
他有点类似于什么呀

30:34.480 --> 30:38.000
有点类似于view的那个

30:38.000 --> 30:39.680
那个叫什么名字来着

30:39.680 --> 30:42.080
让我想一想

30:42.080 --> 30:43.840
就是那个ref

30:43.840 --> 30:44.960
对吧通过ref的话

30:44.960 --> 30:47.280
我也是可以获取那个主件实力

30:47.360 --> 30:50.080
包括view里面他还提供了那个

30:50.080 --> 30:53.040
downer parent和那个downer children

30:53.040 --> 30:54.960
这边也可以获取这个副主件或者

30:54.960 --> 30:57.040
自主件的这个实力对吧

30:57.040 --> 30:58.480
他有点类似于这个

30:58.480 --> 31:00.800
我们来看他这边绑定的事件

31:00.800 --> 31:02.640
绑定的事件这边

31:02.640 --> 31:05.360
这边就是通过z点

31:05.360 --> 31:07.520
这个select component

31:07.520 --> 31:09.280
获取到这个实力

31:09.280 --> 31:11.360
好来我们这边我们来试一下嘛

31:11.360 --> 31:13.040
关了

31:13.040 --> 31:15.680
我们这边在使用这个

31:15.680 --> 31:17.280
自主件的时候

31:17.280 --> 31:18.000
在这边

31:18.000 --> 31:21.470
这边让我们给他一个样式

31:21.470 --> 31:26.110
class等于一个class比较item

31:26.110 --> 31:26.830
对吧

31:26.830 --> 31:28.990
好让我们这边给这个index

31:30.910 --> 31:31.950
就这边

31:31.950 --> 31:33.470
这边我们不是给这个index

31:33.470 --> 31:34.910
这边不是绑了个事件吗

31:34.910 --> 31:36.590
对不对type handle

31:36.590 --> 31:39.310
好我们这边的话来修改他这边

31:39.310 --> 31:42.270
这边的话他这个之前我们做的是加一是吧

31:42.270 --> 31:44.270
加一之外再加我们这边

31:44.350 --> 31:47.120
获取

31:47.120 --> 31:52.430
获取自主件的这个实力

31:52.430 --> 31:54.190
好这边呢就是

31:55.470 --> 32:00.130
z

32:00.130 --> 32:02.130
z点choud等于一个

32:02.130 --> 32:05.570
这边我们改成这个item

32:05.570 --> 32:07.410
好让大家这边打印一下

32:07.410 --> 32:10.930
console.logchoud

32:10.930 --> 32:12.930
保存

32:12.930 --> 32:15.330
保存之后再在这边来看一下

32:15.330 --> 32:16.770
啊拿到了吗

32:16.770 --> 32:17.810
是不是拿到了

32:17.810 --> 32:18.530
对不对

32:18.530 --> 32:20.210
这边就拿到了

32:20.370 --> 32:21.970
再试这个吧

32:21.970 --> 32:23.490
怎么感觉和刚才的有点不一样

32:23.490 --> 32:24.050
稍等

32:24.050 --> 32:26.370
我再打开漏一眼啊

32:26.370 --> 32:30.190
再漏一眼刚才的

32:30.190 --> 32:34.320
刚打开的是这个吗

32:34.320 --> 32:35.840
稍等我看一下啊

32:35.840 --> 32:40.320
因为我感觉打开感觉感觉有点不像

32:40.320 --> 32:43.980
看一下是不是

32:43.980 --> 32:46.140
好这边的话点击

32:46.140 --> 32:47.660
稍等他还在编译

32:49.660 --> 32:51.740
好这边获取实力

32:51.740 --> 32:52.700
对了对了

32:52.700 --> 32:53.740
就是这个

32:53.740 --> 32:54.860
对了就这个

32:55.020 --> 32:57.180
和我们刚才的那个是一样的

32:57.180 --> 32:58.140
对吧

32:58.140 --> 33:00.140
把这个关了

33:03.600 --> 33:06.160
好这是关于这一小节

33:06.160 --> 33:08.560
这一小节就其他就没有什么了

33:08.560 --> 33:09.760
其他就没什么了

33:09.760 --> 33:11.600
这边是获取主件实力

33:11.600 --> 33:12.640
记一下吧

33:12.640 --> 33:14.080
记一下

33:14.080 --> 33:16.240
可以通过

33:17.440 --> 33:19.440
可以通过什么呢

33:19.440 --> 33:21.920
通过z点

33:21.920 --> 33:23.200
它叫什么名字

33:23.200 --> 33:25.360
get a select

33:27.950 --> 33:28.910
可以通过

33:30.430 --> 33:33.150
z点select component

33:33.150 --> 33:35.150
这边呢是这个直主键

33:35.150 --> 33:36.350
就自定义主键

33:36.350 --> 33:39.070
自定义主键

33:40.430 --> 33:42.350
主键的样式

33:42.350 --> 33:44.830
样式内对吧

33:44.830 --> 33:46.190
来获取

33:47.390 --> 33:50.670
来获取这个自定义

33:50.670 --> 33:53.230
主键实力对象

33:54.270 --> 33:55.230
对吧

33:55.230 --> 33:55.950
ok

33:56.910 --> 33:58.910
这是关于这个

33:58.910 --> 34:00.430
同性

34:00.430 --> 34:02.430
好然后下一个

34:03.710 --> 34:05.710
下一个是生命周期

34:06.830 --> 34:08.270
生命周期的话

34:08.270 --> 34:09.710
这个也没什么好说的

34:09.710 --> 34:10.830
对不对生命周期的话

34:10.830 --> 34:12.190
这个大家用过太多次了

34:12.190 --> 34:13.950
本身就非常熟悉了

34:13.950 --> 34:14.990
这边主要看一下

34:14.990 --> 34:16.670
他有哪些生命周期

34:16.670 --> 34:17.630
对不对

34:17.630 --> 34:19.390
他这边最重要的生命周期

34:19.390 --> 34:20.910
就是created

34:20.910 --> 34:22.110
这个attached

34:22.110 --> 34:23.470
然后detached

34:23.470 --> 34:24.750
那我们这边来记一下

34:26.110 --> 34:27.230
这边新开一个吧

34:28.750 --> 34:33.070
这个是生命周期

34:33.070 --> 34:37.070
然后在这个自定义主键中

34:37.070 --> 34:40.670
主键中提供了什么呢

34:40.670 --> 34:42.670
提供了这么几个

34:42.670 --> 34:44.110
一个叫什么

34:44.110 --> 34:45.950
一个叫做created

34:47.230 --> 34:48.190
created

34:48.190 --> 34:49.550
好一个叫做什么呢

34:49.550 --> 34:52.670
一个叫做attached

34:52.670 --> 34:53.470
对吧

34:53.470 --> 34:55.390
好一个叫做detached

34:56.350 --> 34:58.350
好来你这边来看一下

34:58.350 --> 34:59.550
created

34:59.550 --> 35:02.190
created生命周期什么时候出发

35:02.190 --> 35:05.550
主键实力刚刚创好时

35:05.550 --> 35:09.950
主键实力刚刚创好时

35:09.950 --> 35:10.990
然后这个时候

35:10.990 --> 35:12.910
主键数据的Z10.data

35:12.910 --> 35:15.310
就是在component构造器里面

35:15.310 --> 35:16.750
定义的数据data

35:16.750 --> 35:20.110
此时还不能调用setdata

35:20.110 --> 35:21.230
这个是重点

35:21.230 --> 35:27.410
OK此时还不能调setdata

35:28.130 --> 35:29.010
通常情况下

35:29.010 --> 35:29.970
这个生命周期

35:29.970 --> 35:32.530
只应该用于给主键類似

35:32.530 --> 35:33.970
添加一些什么呢

35:33.970 --> 35:40.370
自定义属性制断

35:40.370 --> 35:42.290
这个有点类似于什么

35:42.290 --> 35:45.490
有点类似于

35:45.490 --> 35:48.450
vue里面的created

35:48.450 --> 35:50.130
它是不是也有个created

35:50.130 --> 35:50.690
对不对

35:50.690 --> 35:52.290
vue里面也有个created

35:52.290 --> 35:54.210
就有点类似于这个

35:54.210 --> 35:56.370
所以你在学习这个新知识的时候

35:56.370 --> 36:00.450
你一定要去类比你以前学过的就知识

36:00.610 --> 36:01.330
用你学

36:01.330 --> 36:03.730
就是已经会的就知识进行类比

36:03.730 --> 36:04.530
这样子你学的话

36:04.530 --> 36:06.210
就会学得非常快

36:06.210 --> 36:07.250
知道吧

36:07.250 --> 36:08.770
这些的话实际上对于你来讲

36:08.770 --> 36:09.490
实际上

36:09.490 --> 36:11.250
不算什么新知识

36:11.250 --> 36:11.650
对不对

36:13.090 --> 36:13.410
好

36:13.410 --> 36:14.850
然后接下来attached

36:14.850 --> 36:18.130
这个是主键完全初始化完毕

36:18.130 --> 36:19.970
进入页面节点数后

36:19.970 --> 36:21.330
这个会出发

36:21.330 --> 36:22.770
这个生命周期很有用

36:22.770 --> 36:24.610
绝大多数初始化工作

36:24.610 --> 36:26.770
都可以在这个时机进行

36:31.410 --> 36:32.130
哎

36:32.210 --> 36:32.690
这怎么

36:34.210 --> 36:34.450
ok

36:36.130 --> 36:36.450
好

36:36.450 --> 36:38.290
这个生命周期非常有用

36:38.290 --> 36:39.250
它是在什么时候

36:39.250 --> 36:40.210
在这个时候

36:41.330 --> 36:42.210
这个出发

36:47.100 --> 36:47.740
ok

36:47.740 --> 36:49.260
它类似于什么呢

36:49.260 --> 36:54.540
有点类似于vue里面的什么

36:54.540 --> 36:55.820
monty的

36:55.820 --> 36:56.140
对不对

36:56.140 --> 36:57.020
你想我们有些时候

36:57.020 --> 36:58.060
比如发琴球什么的

36:58.060 --> 37:00.540
什么都是在monty的的时候写的

37:00.540 --> 37:01.420
对不对

37:01.420 --> 37:01.580
好

37:01.580 --> 37:02.380
这个detached

37:02.380 --> 37:03.500
detached就是什么呢

37:03.500 --> 37:05.660
这个就是销毁的时候

37:05.740 --> 37:07.900
在主键离开页面节点数的时候

37:11.550 --> 37:11.950
出发

37:13.470 --> 37:14.750
类似于什么

37:15.390 --> 37:16.990
是不是就是你的这个destroy

37:18.510 --> 37:19.150
vue里面

37:20.590 --> 37:23.870
vue里面的destroy

37:24.750 --> 37:25.150
对不对

37:25.710 --> 37:25.950
ok

37:26.590 --> 37:28.110
这是关于这个生命周期

37:28.990 --> 37:29.310
好

37:29.310 --> 37:30.990
定义这个生命周期的方法

37:31.710 --> 37:32.350
最早的话

37:32.350 --> 37:34.430
你是可以直接在这个component

37:34.430 --> 37:36.590
构造期的第一集参数中

37:36.670 --> 37:37.790
这个刚才已经说过了

37:37.790 --> 37:38.670
好

37:38.670 --> 37:42.510
从这个基础库2.2.3开始

37:42.510 --> 37:43.390
也可以什么呢

37:43.390 --> 37:45.870
也可以在这个life times里面

37:45.870 --> 37:46.750
而且这个是什么呢

37:46.750 --> 37:48.430
这个是推荐的方式

37:48.430 --> 37:50.350
优先级最高

37:50.990 --> 37:52.270
这个刚才是不是已经写过了

37:53.790 --> 37:55.470
在这里写过了

37:55.470 --> 37:56.030
ok

37:56.030 --> 37:58.510
并且这种方式是优先级最高的

37:59.710 --> 38:04.190
并且写在写在这个life times里面

38:06.430 --> 38:10.830
里面的优先级是最高的

38:11.710 --> 38:12.030
ok

38:14.750 --> 38:16.430
那我看其他也没什么要说的

38:16.430 --> 38:18.430
其他也没什么要说的

38:19.070 --> 38:20.270
生命周期方法没什么

38:20.270 --> 38:20.910
来看一下吧

38:21.790 --> 38:22.750
简单看一下好不好

38:24.990 --> 38:26.670
我们这边回到我们这里

38:27.790 --> 38:30.430
我们的这个item是在这

38:30.430 --> 38:30.910
是吧

38:30.910 --> 38:32.110
我们这边来写一下

38:32.830 --> 38:33.390
message

38:35.980 --> 38:36.940
message

38:37.020 --> 38:39.020
然后它是单独的一个

38:40.300 --> 38:41.500
单独的一个选项

38:43.870 --> 38:46.510
叫做pg life times

38:47.310 --> 38:48.830
对应的是一个对象

38:48.830 --> 38:49.630
对象里面

38:49.630 --> 38:50.830
大家这边有这么几个

38:52.190 --> 38:54.430
我们这边就简单的concern.log

38:56.110 --> 38:56.990
这个attach

38:59.760 --> 39:00.880
attach

39:00.880 --> 39:01.680
还有一个是什么

39:02.960 --> 39:04.000
还有一个是那个

39:05.200 --> 39:05.920
那个啥来着

39:07.680 --> 39:08.480
attach

39:08.480 --> 39:09.280
oh credit

39:10.800 --> 39:12.000
啊这边created

39:15.360 --> 39:17.120
啊这边concern.log

39:18.800 --> 39:19.280
created

39:21.040 --> 39:21.440
对吧

39:21.440 --> 39:22.720
那还有一个detached

39:22.720 --> 39:24.240
detached是销毁的时候

39:26.000 --> 39:27.280
这个大家看不到

39:27.280 --> 39:28.320
啊这个除非就是什么呢

39:28.320 --> 39:29.680
这个页面被卸载了

39:29.680 --> 39:30.880
啊这个主键被销毁了

39:31.440 --> 39:31.760
ok

39:33.120 --> 39:33.440
好

39:34.080 --> 39:35.360
啊把那个拿起来

39:36.560 --> 39:37.120
啊这边

39:39.440 --> 39:39.840
哎

39:42.290 --> 39:43.010
说的啊

39:43.010 --> 39:45.170
我看一下我这边怎么没有触发呢

39:46.290 --> 39:47.410
我这边的这个

39:48.290 --> 39:49.170
items

39:51.490 --> 39:52.050
items

39:52.050 --> 39:53.250
这边使用items

39:53.250 --> 39:54.130
使用items

39:54.130 --> 39:55.490
然后接下来这边我看一下啊

39:56.770 --> 39:57.570
哦这个写错了

39:57.570 --> 39:58.850
这个写成配级了

39:58.850 --> 40:00.050
不是这个配级

40:00.050 --> 40:00.610
它是什么

40:01.330 --> 40:03.250
是life times

40:03.810 --> 40:04.690
写错了

40:04.690 --> 40:06.050
它不是pg life times

40:06.050 --> 40:07.330
pg life times是什么

40:07.330 --> 40:09.090
说页面的生命走起钩子还说

40:09.890 --> 40:10.690
对吧

40:10.690 --> 40:11.330
ok

40:11.330 --> 40:12.290
说出发了

40:12.290 --> 40:13.410
啊怎么出发这么多车

40:13.410 --> 40:14.210
重新编一下

40:15.170 --> 40:15.810
ok

40:15.810 --> 40:16.770
是不是ok了

40:16.770 --> 40:17.250
对吧

40:19.490 --> 40:21.010
啊这是关于生命周期

40:21.010 --> 40:21.890
其他没什么好说的

40:21.890 --> 40:23.890
啊生命周期大家用过很多次了

40:23.890 --> 40:24.930
那你把这看一下

40:25.490 --> 40:25.730
这

40:26.370 --> 40:28.690
啊就你这边这个生命周期比较created

40:29.330 --> 40:31.890
他在组建实力刚刚创建实质性

40:31.890 --> 40:32.690
啊touch

40:33.490 --> 40:34.850
然后ready

40:34.850 --> 40:38.370
啊ready就是一些其他的一些这个生命周期够转述

40:38.370 --> 40:39.570
那他还有这个ready

40:39.570 --> 40:40.610
还有这个moved

40:40.610 --> 40:41.970
啊moved是什么呢

40:41.970 --> 40:43.090
这个是移动的时候

40:43.650 --> 40:45.010
移动的时候会出发

40:45.010 --> 40:45.490
arrow

40:45.490 --> 40:46.690
arrow是错误的时候

40:48.530 --> 40:49.890
啊除了这个以外还有什么呢

40:49.890 --> 40:53.250
还有就是组建所在页面的这个生命周期

40:53.810 --> 40:55.170
啊你看这边

40:55.170 --> 40:57.650
还有一些特殊的生命周期

40:57.650 --> 41:01.010
他们并非与组建有很强的关联啊

41:01.010 --> 41:03.490
他这个有时组建需要获支

41:03.490 --> 41:04.850
以便组建内部

41:05.410 --> 41:06.210
处理

41:06.210 --> 41:09.650
啊这个我们称之为这个组建所在页面的生命周期

41:10.370 --> 41:11.810
这边他主要是三个

41:11.890 --> 41:13.570
啊一个是秀一个是嗨的

41:13.570 --> 41:15.090
一个是resize

41:15.090 --> 41:15.890
他是在什么呢

41:15.890 --> 41:17.170
比如秀的时候

41:17.170 --> 41:21.170
秀的话他是在啊组建所在页面被展示的时候

41:22.290 --> 41:25.650
啊然后嗨的嗨的是所在页面被隐藏的时候啊

41:25.650 --> 41:27.090
这个也很好理解

41:27.090 --> 41:29.730
对之前我们那个页面是不是有安秀安嗨的

41:30.450 --> 41:33.650
对对啊那这边他有些组建我们就需要在这个

41:34.450 --> 41:37.250
页面被显示或者被隐藏的时候啊

41:37.250 --> 41:39.570
我这个组建需要做一些这个特殊的行为

41:39.570 --> 41:40.850
那你这边上就可以这个

41:41.810 --> 41:43.890
写上这些生命周期构成函数

41:43.890 --> 41:44.370
ok

41:45.330 --> 41:46.770
啊这个我就不掩饰了啊

41:46.770 --> 41:48.290
这个没有必要掩饰吧

41:48.290 --> 41:49.730
这就是你这边这个页面啊

41:49.730 --> 41:52.290
比如说我现在这个比如说我下面还有个页面的话

41:52.290 --> 41:53.650
啊如果还有一个页面

41:53.650 --> 41:55.570
那我这边比我切换到另外一个页面

41:55.570 --> 41:57.890
那接下来我如果写了一个这个嗨的

41:57.890 --> 42:00.130
那加这个嗨的他就会被出发

42:00.130 --> 42:00.690
ok

42:01.890 --> 42:05.090
啊我看我后面后面我看能不能写个例子吧

42:05.890 --> 42:09.570
后面后面我们有一个这个关于这个制定组建有一个练习

42:09.810 --> 42:13.090
啊有一个那个to do list的练习啊后面我们再说吧

42:13.090 --> 42:13.410
ok

42:15.010 --> 42:19.330
啊这是关于生命周期啊这几个再讲一个

42:19.330 --> 42:20.450
好吧再讲一个

42:21.490 --> 42:23.330
再把那个讲了就是behaviors

42:26.350 --> 42:31.150
behaviors啊因为这个东西也很简单啊behaviors

42:31.710 --> 42:38.610
在这里好我们这边behaviors

42:38.610 --> 42:40.130
这个东西也很简单

42:40.130 --> 42:41.250
这个是什么呢

42:41.250 --> 42:44.690
这个的话就类似于view里面的mixing

42:45.890 --> 42:46.290
这个

42:48.050 --> 42:53.730
就类似于vue里面的mixing

42:54.450 --> 42:56.370
vue2的啊vue2里面的mixing

42:56.930 --> 42:58.850
啊不知道大家还记不记得这个mixing啊

42:59.970 --> 43:01.170
view里面的mixing

43:01.170 --> 43:02.130
这是拿来干嘛的

43:02.850 --> 43:06.450
这个的话是不是就是我那个view里面有很多的这个组建

43:06.450 --> 43:08.290
组建的话可能会有一些什么

43:08.290 --> 43:10.290
是不是会有一些公共的一些方法

43:11.090 --> 43:15.010
对不对啊或者公共的这个生命周期勾字函数啊

43:15.010 --> 43:16.210
都是共通的

43:16.210 --> 43:17.650
那我这边的话我可以把它干嘛

43:17.650 --> 43:21.810
说单独提取出来啊这个的话就是mixing

43:23.010 --> 43:27.090
ok说白了就是这个提取这个组建公共的部分

43:29.330 --> 43:35.170
用来提取组建啊就是公共的部分

43:36.690 --> 43:38.450
啊这个公共的部分可以是什么呢

43:38.530 --> 43:39.890
可以是这个data

43:39.890 --> 43:40.850
也可以是什么

43:40.850 --> 43:42.210
也可以是message

43:42.850 --> 43:44.210
对不对啊也可以是什么呢

43:44.210 --> 43:45.330
也可以是生命周期

43:47.010 --> 43:47.730
勾字函数

43:48.770 --> 43:51.090
这个的话翻译成中文实际上叫做混入

43:51.650 --> 43:53.330
对不对啊把提取出来之后

43:53.330 --> 43:56.210
然后回头我可以把它混入到那个组建里面

43:57.250 --> 44:00.290
那这个behavior的话基本上就和那个是一模一样的

44:01.010 --> 44:02.690
好来我们这边让我们来举个例子

44:03.170 --> 44:05.890
好吧好让我这边让我比如说我创建一个

44:07.250 --> 44:07.810
回到这边

44:08.530 --> 44:11.090
behavior是一般也是单独建一个文件加

44:11.090 --> 44:13.810
啊因为你是提取了公共的部分嘛对吧

44:13.810 --> 44:16.850
单独建一个啊比如这个叫做behavior

44:18.690 --> 44:19.410
behavior

44:21.570 --> 44:22.210
behavior

44:23.330 --> 44:26.290
ok他怎么了啊他说好像有个空格

44:26.930 --> 44:28.290
ok behaviors

44:28.290 --> 44:30.770
好然后在下面下面的话我们新建一个

44:30.770 --> 44:33.410
新建一个叫做比如说叫做my behavior

44:35.570 --> 44:36.930
my behavior

44:39.570 --> 44:42.290
ok啊他果然他自动加了个空格

44:42.290 --> 44:43.890
好让他在这边点ges

44:44.610 --> 44:46.850
ok他就是一个单纯的这个ges文件

44:47.730 --> 44:49.970
然后回头的话你这边上就是可以通过什么呢

44:49.970 --> 44:51.330
可以通过这个behavior

44:51.890 --> 44:54.530
这个构造器这边又有个新的构造器了

44:54.530 --> 44:55.810
啊这边笔记记一下啊

44:57.810 --> 44:58.290
当我们

44:59.810 --> 45:04.850
当我们要定义一个这个behavior

45:05.890 --> 45:07.010
behavior

45:07.010 --> 45:07.730
behavior

45:08.690 --> 45:12.050
的时候需要用到什么呢

45:12.050 --> 45:13.890
需要用到这个behavior

45:16.480 --> 45:17.680
behavior

45:19.040 --> 45:21.920
vi or behavior构造器

45:22.960 --> 45:24.720
对吧然后我们现在就介绍了好几个了

45:24.720 --> 45:26.400
哈有这个app构造器

45:26.400 --> 45:29.040
page构造器component构造器

45:29.040 --> 45:32.160
那这边上你看又多一个behavior构造器啊

45:32.160 --> 45:33.360
那里面同样是什么呢

45:33.360 --> 45:34.960
同样是这个传一个这个对象

45:36.000 --> 45:37.360
就你这边这个behavior

45:38.640 --> 45:39.440
对吧构造器

45:39.680 --> 45:42.240
在这边的话一样的传一个配置对象啊

45:42.240 --> 45:43.600
里面的话就是你一个一个的

45:45.040 --> 45:47.440
一个一个的这个配置项啊

45:48.000 --> 45:50.560
好那接下来这边的话有哪些配置项呢

45:51.600 --> 45:53.760
啊这边的话实际上就和你的那个

45:54.400 --> 45:56.800
con这个component很相似的

45:57.520 --> 46:00.240
非常相似的啊比如说我这边的话可以写个什么呢

46:00.240 --> 46:01.600
可以写个比如说properties

46:03.120 --> 46:06.720
看到没有写个properties啊比方我这边接受参数啊

46:06.720 --> 46:07.840
这个是behavior

46:10.380 --> 46:12.460
behaviorproperty

46:14.380 --> 46:16.060
就props嘛props

46:16.060 --> 46:19.020
啊他对应的是什么呢对应的是一个stream

46:19.740 --> 46:20.380
看到没有

46:20.380 --> 46:23.980
那接下来我这behavior我可以类似一些这个data

