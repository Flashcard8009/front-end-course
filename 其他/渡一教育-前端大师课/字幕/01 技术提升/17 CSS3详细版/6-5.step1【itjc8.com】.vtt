WEBVTT

00:00.370 --> 00:02.370
好了 咱们来开始今天的课程

00:02.370 --> 00:04.370
谈命方式的另一个属性值

00:04.370 --> 00:06.370
STAP 功能的一个讲解

00:06.370 --> 00:08.370
那么提到这个STAP 咱们不得不说

00:08.370 --> 00:11.370
其实STAP 它依然是配合这个Animation来使用的

00:11.370 --> 00:13.370
来共同完成一个新形式动画的

00:13.370 --> 00:15.370
咱们都知道这个Animation有一个

00:15.370 --> 00:17.370
原来的固有的一个动画形式

00:17.370 --> 00:19.370
比如从A状态变到B状态变到C状态

00:19.370 --> 00:22.370
中间是以过渡动画的形式来帮咱们实现的

00:22.370 --> 00:25.370
配合上STAP之后 它的动画形式将发生改变

00:25.370 --> 00:28.370
依然是动画 但是不连续了

00:28.370 --> 00:30.370
比如说从A状态变到B状态

00:30.370 --> 00:32.370
它将会是一步到位的直接跳过去

00:32.370 --> 00:35.370
就直接变成B状态 直接变成C状态

00:35.370 --> 00:38.370
直接变成D状态 都是这样的形式去实现

00:38.370 --> 00:40.370
所以这是STAP 配合上Animation之后

00:40.370 --> 00:43.370
变成了一个新形式的一个直接跳转的动画

00:43.370 --> 00:46.370
你别看它比较别扭 跳转的完成了 是吧

00:46.370 --> 00:49.370
但是在咱们实际开发中 应用的场景非常非常多

00:49.370 --> 00:51.370
所以说一定要提起重视 咱今天

00:51.370 --> 00:54.370
主要对它其实没有什么太多的知识点要讲解

00:54.370 --> 00:56.370
因为比较简单 就是一个属性值

00:56.370 --> 01:00.370
主要咱们是要配合它来使用一些它的功能

01:00.370 --> 01:02.370
完成一些小的练习 让你看看它怎么用

01:02.370 --> 01:05.370
在哪些场景下必须非用它不可

01:05.370 --> 01:08.370
咱们现在就先写一个小的DIV来

01:08.370 --> 01:10.370
通过一个小例子 咱们来揭开

01:10.370 --> 01:13.370
它到底是什么样的功能 怎么来使用

01:14.370 --> 01:17.370
让它变成红色 依然我们现在想

01:17.370 --> 01:19.370
做一个这样的一个Animation动画

01:19.370 --> 01:21.370
然后加一个关键帧 这个关键帧

01:21.370 --> 01:25.370
里面是这些关键帧 里面是这些关键帧

01:25.370 --> 01:28.370
这个每个关键帧 我都想让它改变一个背景颜色

01:28.370 --> 01:30.370
比如说第一个初始状态 零的话

01:30.370 --> 01:32.370
让它有原始的状态 是吧

01:33.370 --> 01:36.370
红色 然后变成绿色 最后变成蓝色

01:36.370 --> 01:38.370
然后变成黑色 好吧

01:40.370 --> 01:42.370
变成黑色 Black

01:42.370 --> 01:44.370
然后最后我给它变成白色

01:46.370 --> 01:48.370
保存 然后现在我想让它

01:48.370 --> 01:50.370
实现一个动画的过渡 是吧

01:50.370 --> 01:52.370
Animation 先给它写上 然后把那个

01:53.370 --> 01:55.370
写上 是吧 然后设置一个时间 是不4秒钟

01:55.370 --> 01:58.370
刷新 它就可以完成一个动画状态的过渡 是吧

01:59.370 --> 02:01.370
改变了4种状态 是吧

02:01.370 --> 02:03.370
4度的动画 没有问题吧 同学们

02:03.370 --> 02:05.370
然后最终回归到这样的一个红色上

02:06.370 --> 02:08.370
然后现在我们既然说要讲这个Step

02:08.370 --> 02:10.370
咱们就把这个Step来添上 咱都说了

02:10.370 --> 02:13.370
这个Step 它是Timing Function里面的一个属性值

02:13.370 --> 02:15.370
所以你这块要添上它的话

02:15.370 --> 02:16.370
其他的Timing Function

02:16.370 --> 02:18.370
那个三次Bassard曲线 是不就添不了了 是吧

02:18.370 --> 02:20.370
所以这个也必须得有取写

02:20.370 --> 02:22.370
添它之后Bassard曲线也没有用

02:23.370 --> 02:25.370
我们这个Step有多种写法

02:25.370 --> 02:27.370
咱们写一个功能最强大的

02:27.370 --> 02:29.370
也是最终的一个写法 实现原理的写法

02:29.370 --> 02:31.370
现在我用来里面写 第一个值

02:31.370 --> 02:34.370
第一个值我写个1 然后第二个写个默认值and

02:34.370 --> 02:36.370
这个and你先别管 这个1你也先别管

02:36.370 --> 02:39.370
1写完之后 它就是一步来实现的意思

02:39.370 --> 02:41.370
我们先看一下 写完1之后

02:41.370 --> 02:44.370
我们这样的一个动画将变成一个什么样子

02:44.370 --> 02:46.370
以什么样的一个方式来实现

02:46.370 --> 02:49.370
我刷新 你看到红色直接变成绿色

02:49.370 --> 02:51.370
直接变成蓝色 直接变成黑色

02:51.370 --> 02:53.370
然后变回红色 是吧

02:53.370 --> 02:55.370
是不是这样的一个状态就不发生过度了吧

02:55.370 --> 02:58.370
直接以跳转的形式去帮咱们去改变 是吧

02:58.370 --> 02:59.370
但是你会注意到什么呢

02:59.370 --> 03:01.370
你会注意到每一段动画

03:01.370 --> 03:04.370
是不是虽然说它是直接从A状态跳到B状态 是吧

03:04.370 --> 03:07.370
但是它依然会等待动画执行的时间

03:07.370 --> 03:09.370
这个没有问题 就是该多少时间

03:09.370 --> 03:10.370
它还会执行多少时间

03:10.370 --> 03:13.370
只不过是到时间直接跳过去 是这样的

03:13.370 --> 03:14.370
是不是这块没有问题

03:14.370 --> 03:16.370
所以我们这块比如说你时间

03:16.370 --> 03:17.370
稍微比较长的话

03:17.370 --> 03:19.370
比如说你从25%直接跳到75%的话

03:19.370 --> 03:21.370
那它这个状态跳到那个状态

03:21.370 --> 03:22.370
就会以两秒的形式去实现

03:22.370 --> 03:24.370
它可能说等一会吧 等一会

03:24.370 --> 03:26.370
然后再一次性跳过去 明白我意思吧

03:26.370 --> 03:27.370
是这样的一个形态

03:27.370 --> 03:28.370
所以说这块时间的问题

03:28.370 --> 03:29.370
我就不给大家多强调了

03:29.370 --> 03:31.370
然后咱们说这个staff

03:31.370 --> 03:34.370
咱们来再看一下 这个staff

03:34.370 --> 03:36.370
比如说现在我是一步 是吧

03:36.370 --> 03:38.370
然后现在我添成两步

03:38.370 --> 03:39.370
两步是什么样呢

03:39.370 --> 03:41.370
咱们来看一下两步是什么样

03:41.370 --> 03:43.370
一会我再给大家解释一下 刷新

03:43.370 --> 03:44.370
你看我添两步之后

03:44.370 --> 03:46.370
你会发现是不是变化更细腻了

03:46.370 --> 03:48.370
对吧 它是什么变化更细腻了

03:48.370 --> 03:50.370
是不是针对一个状态变化到

03:50.370 --> 03:52.370
另一个状态 这一段动画都变得更细腻了

03:52.370 --> 03:54.370
你看 是不是

03:54.370 --> 03:56.370
从红变到绿 从绿变到蓝

03:56.370 --> 03:58.370
从蓝变到黑 从黑变到最后那个白

03:58.370 --> 03:59.370
是吧 虽然说白没显示出来

03:59.370 --> 04:00.370
你别管 因为我俩讲

04:00.370 --> 04:02.370
是不是每一段动画变得更细腻了

04:02.370 --> 04:04.370
所以说这个staff里面

04:04.370 --> 04:06.370
这个部数 它设置的是什么

04:06.370 --> 04:08.370
设置的是不是每一段

04:08.370 --> 04:10.370
到底用多少步来实现

04:10.370 --> 04:11.370
如果你添一步的话

04:11.370 --> 04:12.370
是不是直接一步到位

04:12.370 --> 04:13.370
如果你添两步的话

04:13.370 --> 04:15.370
它是不是给它分成一半 是吧

04:15.370 --> 04:16.370
给我一半的时间

04:16.370 --> 04:17.370
我来实行前半步

04:17.370 --> 04:18.370
再给我一半的时间

04:18.370 --> 04:19.370
我来实行后半步 是吧

04:19.370 --> 04:22.370
中间有一个跳跃的一个点 是吧

04:22.370 --> 04:23.370
你看到 它会把一秒钟

04:23.370 --> 04:24.370
砍成两半 是吧

04:24.370 --> 04:25.370
零点五秒

04:25.370 --> 04:27.370
然后过渡到一个状态 跳过去

04:27.370 --> 04:28.370
再零点五秒

04:28.370 --> 04:29.370
再过渡到另一个状态

04:29.370 --> 04:30.370
再跳到那个

04:30.370 --> 04:32.370
这个25%的状态里面去 是吧

04:32.370 --> 04:33.370
是这样的吧

04:33.370 --> 04:34.370
先跳到这个棕色 然后变灰色

04:34.370 --> 04:35.370
还是不会这样的

04:35.370 --> 04:36.370
比如说你跳多步呢

04:36.370 --> 04:37.370
五步的话

04:37.370 --> 04:39.370
它就会更细腻一些 是吧

04:39.370 --> 04:40.370
但是不管它多细腻

04:40.370 --> 04:43.370
是不是还是以跳转的形式来实现

04:43.370 --> 04:45.370
不是真正那种流畅的过渡动画

04:45.370 --> 04:46.370
没道理是吧

04:46.370 --> 04:47.370
这块其实

04:47.370 --> 04:49.370
其实它和过渡动画

04:49.370 --> 04:50.370
这样的一个原理

04:50.370 --> 04:51.370
底层原理都是一样的

04:51.370 --> 04:52.370
你知道世界上所有的动画

04:52.370 --> 04:53.370
都没有

04:53.370 --> 04:54.370
除了真人展示的

04:54.370 --> 04:55.370
比如说真人

04:55.370 --> 04:56.370
你看一个现场剧

04:56.370 --> 04:57.370
这个人在动

04:57.370 --> 04:58.370
它是一个真正的动画

04:58.370 --> 05:01.370
但反正你看到影视片里面的动

05:01.370 --> 05:02.370
其实都不是什么

05:02.370 --> 05:03.370
真正所谓的意义的动画

05:03.370 --> 05:04.370
只不过就是

05:04.370 --> 05:05.370
每一针和一针

05:05.370 --> 05:06.370
它播放的时间太短了

05:06.370 --> 05:08.370
你眼睛分辨不出来

05:08.370 --> 05:11.370
所以说一大堆这样的影片

05:11.370 --> 05:13.370
一针一针这样的影片集中起来

05:13.370 --> 05:14.370
你就能看到一个

05:14.370 --> 05:15.370
这样旋律的动画效果

05:15.370 --> 05:17.370
影片播放的密度越大

05:17.370 --> 05:19.370
是不是动画的效果越强大

05:19.370 --> 05:20.370
没道理是吧

05:20.370 --> 05:21.370
大家应该能理解吧

05:21.370 --> 05:22.370
是吧

05:22.370 --> 05:23.370
咱们电影有多少针

05:23.370 --> 05:24.370
一秒跑多少针

05:24.370 --> 05:25.370
一秒跑多少针

05:25.370 --> 05:26.370
一针是啥

05:26.370 --> 05:27.370
一针都是一个图片

05:27.370 --> 05:28.370
一针都是一个图片

05:28.370 --> 05:29.370
就像看那个连画画看过吧

05:29.370 --> 05:30.370
就是电影的原理

05:30.370 --> 05:31.370
跟连画画的原理是一样的

05:31.370 --> 05:32.370
这个step

05:32.370 --> 05:34.370
实现了就是这样的一个原理

05:34.370 --> 05:36.370
就一个放大版的这样的一个原理

05:37.370 --> 05:38.370
原来那个动画

05:38.370 --> 05:39.370
其实说实话

05:39.370 --> 05:40.370
这个animation那个动画

05:40.370 --> 05:41.370
从一针过到另一针

05:41.370 --> 05:42.370
过渡动画过去

05:42.370 --> 05:43.370
可能说中间

05:43.370 --> 05:45.370
它就有无数个这样的一个step

05:45.370 --> 05:46.370
能懂我意思吗

05:46.370 --> 05:47.370
当然了人家那个

05:47.370 --> 05:48.370
不是通过step来实现的

05:48.370 --> 05:49.370
step还是说step

05:49.370 --> 05:50.370
只不过说

05:50.370 --> 05:51.370
再往底层来探究

05:51.370 --> 05:52.370
你要实现动画

05:52.370 --> 05:54.370
比如说step比较密集的话

05:54.370 --> 05:55.370
比如说step

05:55.370 --> 05:56.370
被我说成20的话

05:56.370 --> 05:57.370
你会看到它和过度

05:57.370 --> 05:58.370
也差不了多少了

05:58.370 --> 05:59.370
是吧

05:59.370 --> 06:00.370
但是它依然是step

06:00.370 --> 06:01.370
就一针一针跳的是吧

06:01.370 --> 06:02.370
你跳得过于密集了

06:02.370 --> 06:03.370
眼睛分不出来了

06:03.370 --> 06:04.370
那就成一个流畅动画了

06:04.370 --> 06:05.370
明白我意思吧

06:05.370 --> 06:06.370
那么一般情况下

06:06.370 --> 06:08.370
这step它里面添的部数

06:08.370 --> 06:09.370
是要经过咱们的计算的

06:09.370 --> 06:10.370
比如说从一针

06:10.370 --> 06:11.370
到另一针

06:11.370 --> 06:12.370
咱们希望它多少部实现

06:12.370 --> 06:13.370
然后跟着这个时间数

06:13.370 --> 06:14.370
相配合起来

06:14.370 --> 06:15.370
到时候咱们再讲是吧

06:15.370 --> 06:16.370
咱们到例子的时候

06:16.370 --> 06:17.370
你自然就知道

06:17.370 --> 06:18.370
这个部数应该怎么去写了

06:18.370 --> 06:19.370
根据需求怎么来写

06:19.370 --> 06:21.370
咱们现在先看一部了

06:21.370 --> 06:22.370
直接跳到位的

06:22.370 --> 06:23.370
咱们再来回顾一下

06:23.370 --> 06:25.370
红 绿 蓝 黑

06:25.370 --> 06:26.370
然后红是吧

06:26.370 --> 06:27.370
咱们来看一下

06:27.370 --> 06:28.370
是不是少点东西

06:28.370 --> 06:29.370
少了最后一个白色吧

06:29.370 --> 06:31.370
白色怎么没的呢

06:31.370 --> 06:32.370
是吧

06:32.370 --> 06:33.370
咱先别管白色都没了

06:34.370 --> 06:35.370
是不是少白色没问题吧

06:35.370 --> 06:36.370
其他都不少是吧

06:36.370 --> 06:37.370
我把第二个纸改一下

06:37.370 --> 06:38.370
改成什么呢

06:38.370 --> 06:39.370
改成start

06:39.370 --> 06:40.370
我再爆出来

06:40.370 --> 06:41.370
你刷新你看一下

06:41.370 --> 06:42.370
哎

06:42.370 --> 06:44.370
你会发现是不是白色这回有了

06:44.370 --> 06:45.370
对吧

06:45.370 --> 06:46.370
但是呢

06:46.370 --> 06:47.370
我当我刷新开始的时候

06:47.370 --> 06:48.370
你就感觉到啊

06:48.370 --> 06:49.370
是不是开始的时候

06:49.370 --> 06:50.370
红色瞬间就没有了

06:50.370 --> 06:52.370
变成绿色 蓝色和黑色了是吧

06:52.370 --> 06:53.370
说明什么

06:53.370 --> 06:54.370
说明这start和这个and

06:54.370 --> 06:55.370
才是有区别的是吧

06:55.370 --> 06:56.370
而第二个纸也只能添这两

06:56.370 --> 06:57.370
and是默认值

06:57.370 --> 06:58.370
start是可以选添的值

06:58.370 --> 06:59.370
我给大家讲一下

06:59.370 --> 07:00.370
这个start和这个and

07:00.370 --> 07:01.370
到底有什么区别

07:01.370 --> 07:02.370
什么作用

07:02.370 --> 07:03.370
你要看别人的解释吧

07:03.370 --> 07:04.370
其实你很难理解啊

07:04.370 --> 07:05.370
所以这块呢

07:05.370 --> 07:06.370
依然是啊

07:06.370 --> 07:07.370
你承诺给你来解释一下

07:07.370 --> 07:08.370
别人解释是吧

07:08.370 --> 07:09.370
哎呀这个

07:09.370 --> 07:10.370
又持续寒树

07:10.370 --> 07:11.370
左持续寒树

07:11.370 --> 07:12.370
哎呀左右一左右

07:12.370 --> 07:13.370
一左右又给你用懵了

07:13.370 --> 07:14.370
就

07:14.370 --> 07:15.370
那个就根本你

07:15.370 --> 07:16.370
你别进那个东西了

07:16.370 --> 07:17.370
你看我给你解释完事了

07:18.370 --> 07:19.370
这个and啊

07:19.370 --> 07:20.370
咱们来品味一下这个and

07:20.370 --> 07:21.370
比如说先写and

07:22.370 --> 07:23.370
and呢

07:23.370 --> 07:24.370
他是不是丢的是最后一阵

07:24.370 --> 07:25.370
你会发现他丢的是最后一阵吧

07:25.370 --> 07:26.370
就是and

07:26.370 --> 07:27.370
然后呢

07:27.370 --> 07:28.370
那个start

07:28.370 --> 07:29.370
你会发现他丢的是第一阵是吧

07:29.370 --> 07:30.370
然后这块呢

07:30.370 --> 07:31.370
我给你解释一下

07:31.370 --> 07:32.370
什么意思啊

07:32.370 --> 07:33.370
这个and呢

07:33.370 --> 07:34.370
叫

07:34.370 --> 07:36.370
保留

07:36.370 --> 07:38.370
保留当前阵

07:38.370 --> 07:39.370
状态

07:39.370 --> 07:41.370
直到这段

07:41.370 --> 07:42.370
动画

07:42.370 --> 07:43.370
时间结束

07:44.370 --> 07:45.370
然后呢

07:45.370 --> 07:46.370
start

07:46.370 --> 07:47.370
叫保留

07:47.370 --> 07:48.370
下一阵状态

07:50.370 --> 07:51.370
真

07:51.370 --> 07:52.370
平

07:52.370 --> 07:53.370
真平

07:53.370 --> 07:54.370
真状态

07:54.370 --> 07:55.370
保留下一阵状态

07:55.370 --> 07:56.370
直到这段

07:56.370 --> 07:57.370
动画

07:57.370 --> 07:58.370
结束

07:58.370 --> 07:59.370
时间结束

07:59.370 --> 08:00.370
什么意思啊

08:00.370 --> 08:01.370
比如说

08:01.370 --> 08:02.370
第一个状态

08:02.370 --> 08:03.370
变到第二个状态

08:03.370 --> 08:04.370
这是一段动画是吧

08:04.370 --> 08:05.370
从第一个状态

08:05.370 --> 08:06.370
变化到第二个状态

08:06.370 --> 08:07.370
是不是要走时间的

08:07.370 --> 08:08.370
那这一秒钟的时间

08:08.370 --> 08:10.370
到底是展示谁呢

08:10.370 --> 08:11.370
展示第一个呢

08:11.370 --> 08:12.370
还是展示第二个呢

08:12.370 --> 08:13.370
是吧

08:13.370 --> 08:14.370
当你天and的时候

08:14.370 --> 08:15.370
这个

08:15.370 --> 08:16.370
这个第一阵是不是要当前阵

08:16.370 --> 08:17.370
要变到这阵去是吧

08:17.370 --> 08:19.370
当你天and的时候

08:19.370 --> 08:20.370
他会在这段时间里面

08:20.370 --> 08:22.370
保留当前阵的状态

08:22.370 --> 08:23.370
也就是说保留这个

08:23.370 --> 08:24.370
红色的状态

08:24.370 --> 08:25.370
直到这一阵的时间

08:25.370 --> 08:26.370
读完

08:26.370 --> 08:28.370
然后再变到第二阵

08:28.370 --> 08:29.370
变到第二阵的时候

08:29.370 --> 08:30.370
是不是第二阵要

08:30.370 --> 08:31.370
到第三阵是吧

08:31.370 --> 08:32.370
第二阵变到第三阵的时候

08:32.370 --> 08:33.370
第二阵就变成当前阵了

08:33.370 --> 08:34.370
所以他会保留

08:34.370 --> 08:35.370
当前阵的状态

08:35.370 --> 08:37.370
直到这段动画运动完

08:37.370 --> 08:38.370
然后到这

08:38.370 --> 08:39.370
然后到这是吧

08:39.370 --> 08:41.370
当到75的时候有意思了

08:41.370 --> 08:43.370
75运到100的时候

08:43.370 --> 08:44.370
是不是最后一个状态

08:44.370 --> 08:45.370
是吧

08:45.370 --> 08:46.370
那在这个状态里面

08:46.370 --> 08:47.370
是不是75是当前阵

08:47.370 --> 08:48.370
那这个时间里面

08:48.370 --> 08:49.370
这一秒的时间里面

08:49.370 --> 08:50.370
他都会保留

08:50.370 --> 08:52.370
黑色的这样的一个状态

08:52.370 --> 08:53.370
因为是当前阵嘛

08:53.370 --> 08:55.370
然后当这个时间结束之后

08:55.370 --> 08:57.370
他才会跳到100这块去

08:57.370 --> 08:59.370
跳到100整段动画也都结束了

08:59.370 --> 09:00.370
是不是就回归到

09:00.370 --> 09:03.370
他的我们元素的最开始的状态

09:03.370 --> 09:04.370
红色里面去了

09:04.370 --> 09:06.370
所以说这100是不是从视觉上

09:06.370 --> 09:08.370
那个瞬间你是捕捉不到的

09:08.370 --> 09:09.370
是不是直接就被忽略了

09:09.370 --> 09:10.370
明白我意思吧

09:10.370 --> 09:11.370
所以说如果我就

09:11.370 --> 09:13.370
你说他倒没到100这块

09:13.370 --> 09:14.370
是不是到了

09:14.370 --> 09:15.370
只不过时间太短了

09:15.370 --> 09:16.370
他看不着是吧

09:16.370 --> 09:17.370
那怎么来弥补一下

09:17.370 --> 09:18.370
他这个缺陷

09:18.370 --> 09:19.370
是不是咱添一下这个Four words

09:19.370 --> 09:21.370
咱们就能看到这个100了

09:21.370 --> 09:22.370
是吧

09:22.370 --> 09:23.370
我刷新

09:23.370 --> 09:25.370
我刷新

09:25.370 --> 09:26.370
你看看

09:26.370 --> 09:27.370
这个100了

09:27.370 --> 09:28.370
咱们添这个Four words

09:28.370 --> 09:29.370
再次证明了

09:29.370 --> 09:30.370
他这个100状态是到了

09:30.370 --> 09:31.370
只不过这个时间停留太短了

09:31.370 --> 09:32.370
直接就过去了

09:32.370 --> 09:33.370
是吧

09:33.370 --> 09:34.370
所以说一般情况下

09:34.370 --> 09:35.370
这个and的默认值

09:35.370 --> 09:36.370
也是非常常用的

09:36.370 --> 09:37.370
start基本上咱不怎么用

09:37.370 --> 09:38.370
一会给他说一下

09:38.370 --> 09:39.370
为什么不怎么用

09:39.370 --> 09:40.370
然后呢

09:40.370 --> 09:41.370
这个用的时候

09:41.370 --> 09:42.370
如果有这样的一个缺陷

09:42.370 --> 09:44.370
如果你不是infinite

09:44.370 --> 09:45.370
你不是infinite

09:45.370 --> 09:47.370
你不添那个循环的话

09:47.370 --> 09:48.370
一般情况下

09:48.370 --> 09:49.370
就一个动画结束的话

09:49.370 --> 09:50.370
一般就添一个Four words

09:50.370 --> 09:51.370
来弥补一下

09:51.370 --> 09:52.370
最后一阵看不到这样的状态

09:52.370 --> 09:54.370
而这个start

09:54.370 --> 09:55.370
start他忽视的是什么

09:55.370 --> 09:56.370
他忽视的是第一阵吧

09:56.370 --> 09:57.370
他是什么

09:57.370 --> 09:58.370
他是直接保留

09:58.370 --> 09:59.370
下一阵的状态

09:59.370 --> 10:01.370
直到这段动画结束

10:01.370 --> 10:02.370
你看啊

10:02.370 --> 10:03.370
比如说我第一阵

10:03.370 --> 10:05.370
运动到第二阵的时候

10:05.370 --> 10:06.370
他直接保留的是什么

10:06.370 --> 10:07.370
在这个疫苗里面

10:07.370 --> 10:09.370
他始终都保留的是绿色

10:09.370 --> 10:10.370
所以说这个红色

10:10.370 --> 10:12.370
在视觉上直接被绿过去了

10:12.370 --> 10:13.370
然后第二阵到第三阵

10:13.370 --> 10:14.370
从绿色到红色

10:14.370 --> 10:16.370
从绿色到这个蓝色呢

10:16.370 --> 10:17.370
是不是

10:17.370 --> 10:18.370
这个时候当前阵是绿色

10:18.370 --> 10:19.370
下一阵是这个蓝色

10:19.370 --> 10:20.370
他会在这段时间

10:20.370 --> 10:22.370
你们保留这样的一个蓝色

10:22.370 --> 10:23.370
明白我意思吧

10:23.370 --> 10:24.370
所以一次的推

10:24.370 --> 10:26.370
他保留的都是下一阵的状态

10:26.370 --> 10:27.370
那么自然的

10:27.370 --> 10:28.370
就会忽略

10:28.370 --> 10:29.370
从视觉上去

10:29.370 --> 10:30.370
忽略第一阵的这样的一个效果

10:30.370 --> 10:32.370
明白我意思吧

10:32.370 --> 10:33.370
忽略第一阵的效果

10:33.370 --> 10:35.370
其实他是不好弥补的

10:35.370 --> 10:36.370
为啥说他不好弥补呢

10:36.370 --> 10:37.370
比如说你说成个

10:37.370 --> 10:38.370
那第一阵状态

10:38.370 --> 10:39.370
咱们都有一个backwards

10:39.370 --> 10:40.370
在动画开始之前

10:40.370 --> 10:41.370
用backwards

10:41.370 --> 10:43.370
同学

10:43.370 --> 10:45.370
这个你考虑一下

10:47.370 --> 10:49.370
backwards是在动画开始之前

10:49.370 --> 10:51.370
保留第一阵的状态

10:51.370 --> 10:53.370
那动画开始之前

10:53.370 --> 10:55.370
咱们想让这个开始之前

10:55.370 --> 10:56.370
量化出来的话

10:56.370 --> 10:57.370
你必须得有个等待时间

10:57.370 --> 10:58.370
那也就是说

10:58.370 --> 11:00.370
只有在有等待时间的状态下

11:00.370 --> 11:01.370
你这个backwards

11:01.370 --> 11:02.370
才是有意义的

11:02.370 --> 11:03.370
否则的话

11:03.370 --> 11:04.370
是不是没有意义

11:04.370 --> 11:05.370
是吧

11:05.370 --> 11:06.370
所以说你只要开始第一阵

11:06.370 --> 11:07.370
对吧

11:07.370 --> 11:08.370
他就会以start的形式

11:08.370 --> 11:09.370
直接跳到第二阵里面去

11:09.370 --> 11:10.370
是吧

11:10.370 --> 11:11.370
所以说这个东西

11:11.370 --> 11:12.370
start是不太好弥补

11:12.370 --> 11:13.370
它的缺陷

11:13.370 --> 11:14.370
所以这样的一个情况下

11:14.370 --> 11:15.370
就是and

11:15.370 --> 11:16.370
非常常用的

11:16.370 --> 11:17.370
因为forward

11:17.370 --> 11:18.370
它是可以弥补的

11:18.370 --> 11:19.370
也比较好弥补

11:19.370 --> 11:20.370
也顺利成章

11:20.370 --> 11:21.370
是吧

11:21.370 --> 11:22.370
forward

11:22.370 --> 11:23.370
否则的话

11:23.370 --> 11:24.370
运动这个效果是为了干嘛的

11:24.370 --> 11:25.370
是吧

11:25.370 --> 11:26.370
所以说

11:26.370 --> 11:27.370
最后保留它

11:27.370 --> 11:28.370
最后运动状态

11:28.370 --> 11:29.370
这样的一个运动

11:29.370 --> 11:30.370
最后一阵的状态

11:30.370 --> 11:31.370
用forward来实现

11:31.370 --> 11:32.370
也能弥补这个and

11:32.370 --> 11:33.370
视觉上

11:33.370 --> 11:34.370
确实最后一阵

11:34.370 --> 11:35.370
这样的一个问题

11:35.370 --> 11:36.370
是吧

11:36.370 --> 11:37.370
那咱们这样

11:37.370 --> 11:38.370
咱们再写一个小例子

11:38.370 --> 11:39.370
咱们来确切的看一下

11:39.370 --> 11:40.370
这个and

11:40.370 --> 11:41.370
跟这个

11:41.370 --> 11:42.370
跟这个什么

11:42.370 --> 11:43.370
and

11:43.370 --> 11:44.370
跟这个start

11:44.370 --> 11:45.370
这样的一个区别

11:45.370 --> 11:46.370
是吧

11:46.370 --> 11:47.370
我让两个方块

11:47.370 --> 11:48.370
同时跑起来

11:48.370 --> 11:49.370
让两个方块

11:49.370 --> 11:50.370
同时跑起来

11:50.370 --> 11:51.370
然后咱们来看一下

11:51.370 --> 11:52.370
是吧

11:52.370 --> 11:53.370
大家就明白了

11:53.370 --> 11:54.370
ok

11:54.370 --> 11:55.370
然后现在

11:55.370 --> 11:56.370
跑起来的时候

11:56.370 --> 11:57.370
我就这样了

11:57.370 --> 11:59.370
让它怎么着

11:59.370 --> 12:00.370
让它改变

12:00.370 --> 12:01.370
它的life

12:01.370 --> 12:04.060
是吧

12:04.060 --> 12:05.060
别的了

12:05.060 --> 12:06.060
我还行

12:06.060 --> 12:07.060
第一阵它就会是一样了

12:07.060 --> 12:08.060
life的是0

12:08.060 --> 12:09.060
是吧

12:09.060 --> 12:10.060
这个跑起来之后

12:10.060 --> 12:11.060
是不是life

12:11.060 --> 12:12.060
它变成100

12:12.060 --> 12:13.060
然后这块

12:13.060 --> 12:14.060
life变成200

12:14.060 --> 12:15.060
一会咱写两个demo

12:15.060 --> 12:16.060
就ok了

12:16.060 --> 12:17.060
life变成300

12:17.060 --> 12:19.060
这块变成400

12:19.060 --> 12:20.060
现在

12:20.060 --> 12:21.060
我写两个这样的demo

12:21.060 --> 12:22.060
demo1和demo2

12:22.060 --> 12:23.060
很多东西

12:23.060 --> 12:24.060
必须都是相同的

12:24.060 --> 12:25.060
是吧

12:25.060 --> 12:26.060
比如说

12:26.060 --> 12:27.060
他们的position

12:27.060 --> 12:28.060
必须是absolute

12:28.060 --> 12:29.060
是吧

12:29.060 --> 12:30.060
然后life的一开始

12:30.060 --> 12:31.060
肯定都得是

12:31.060 --> 12:32.060
0是吧

12:32.060 --> 12:33.060
然后

12:33.060 --> 12:34.060
它的背景颜色

12:34.060 --> 12:35.060
都让它成了一个

12:35.060 --> 12:36.060
黑色

12:36.060 --> 12:37.060
然后宽高

12:37.060 --> 12:38.060
都是100

12:38.060 --> 12:39.060
成100是吧

12:40.060 --> 12:41.060
我这键盘

12:41.060 --> 12:42.060
确实有点老化了

12:42.060 --> 12:43.060
这个按起来很硬

12:43.060 --> 12:44.060
跟原来

12:44.060 --> 12:45.060
那个时候

12:45.060 --> 12:46.060
已经不可同日语了

12:47.060 --> 12:48.060
白色

12:48.060 --> 12:49.060
然后现在

12:49.060 --> 12:50.060
我们给这个demo2

12:50.060 --> 12:51.060
还得加一个独特的状态

12:51.060 --> 12:53.060
然后它会上下叠加到一起

12:53.060 --> 12:54.060
是吧

12:54.060 --> 12:55.060
所以说让它分开的话

12:55.060 --> 12:56.060
加一个

12:56.060 --> 12:57.060
这样的一个top值

12:57.060 --> 12:58.060
是不是这样的分开了

12:58.060 --> 12:59.060
是吧

12:59.060 --> 13:00.060
那么接下来

13:00.060 --> 13:01.060
给它俩都加动画

13:01.060 --> 13:02.060
是吧

13:02.060 --> 13:03.060
都加上动画之后

13:03.060 --> 13:04.060
一个动画

13:04.060 --> 13:05.060
加上什么

13:05.060 --> 13:06.060
一个动画加上

13:06.060 --> 13:07.060
一个动画加上start

13:07.060 --> 13:08.060
一个动画加上end

13:08.060 --> 13:09.060
是吧

13:09.060 --> 13:10.060
咱们来看一下

13:10.060 --> 13:11.060
它的区别

13:11.060 --> 13:12.060
比如说这样

13:12.060 --> 13:13.060
unmission

13:14.060 --> 13:15.060
然后它俩用的

13:15.060 --> 13:16.060
是不是同一个过年针

13:16.060 --> 13:17.060
这个是可以的

13:17.060 --> 13:18.060
这个同一个过年针

13:18.060 --> 13:19.060
比如说给它生生乱

13:20.060 --> 13:21.060
关键证

13:21.060 --> 13:22.060
大家可以共用

13:22.060 --> 13:23.060
这个是没问题的

13:23.060 --> 13:24.060
只不过

13:24.060 --> 13:25.060
叫一个名字的关键证

13:25.060 --> 13:26.060
只能被定义一次

13:26.060 --> 13:27.060
你要再定义的话

13:27.060 --> 13:28.060
就覆盖的

13:28.060 --> 13:29.060
明白我意思吧

13:29.060 --> 13:30.060
然后这块

13:30.060 --> 13:31.060
咱们就给生生4秒

13:31.060 --> 13:32.060
然后它是什么

13:32.060 --> 13:33.060
stabs

13:33.060 --> 13:34.060
stabs

13:34.060 --> 13:35.060
stabs

13:35.060 --> 13:36.060
这块天生什么

13:36.060 --> 13:37.060
这块天生

13:37.060 --> 13:38.060
E

13:38.060 --> 13:39.060
然后天start

13:39.060 --> 13:41.060
这块也是4秒

13:41.060 --> 13:43.060
4秒stabs

13:43.060 --> 13:45.060
这块来个E

13:45.060 --> 13:46.060
来个end

13:46.060 --> 13:47.060
没问题

13:47.060 --> 13:48.060
咱们来看一下

13:48.060 --> 13:49.060
它的状态

13:49.060 --> 13:50.060
现在看之前

13:50.060 --> 13:51.060
咱们先来猜一下

13:51.060 --> 13:52.060
应该是什么样

13:52.060 --> 13:54.060
start保留下一阵的状态

13:54.060 --> 13:55.060
是不是视觉上会忽略第一阵

13:55.060 --> 13:57.060
比如说在第一阵的一秒的时候

13:57.060 --> 13:59.060
是不是start先一马当先了

13:59.060 --> 14:01.060
它这一秒是始终保留的是

14:01.060 --> 14:02.060
下一阵的状态

14:02.060 --> 14:04.060
end是保留当先阵的状态

14:04.060 --> 14:05.060
所以说在执行效果上

14:05.060 --> 14:07.060
是不是start忽略第一阵效果

14:07.060 --> 14:09.060
然后能看到最后一阵效果

14:09.060 --> 14:10.060
end是能看到

14:10.060 --> 14:11.060
第一阵效果

14:11.060 --> 14:12.060
忽略最后一阵效果

14:12.060 --> 14:13.060
所以跑起来的话

14:13.060 --> 14:15.060
所以肯定是start在前

14:15.060 --> 14:16.060
end在后

14:16.060 --> 14:17.060
能明白我意思吧

14:17.060 --> 14:18.060
跑到终点

14:18.060 --> 14:20.060
然后它俩回到最后的初始状态

14:20.060 --> 14:23.060
比如说给这个end加一个forward

14:23.060 --> 14:25.060
让咱们来再次验证一下

14:25.060 --> 14:28.060
你到底是倒没到最后一阵

14:28.060 --> 14:29.060
我验证一下你

14:29.060 --> 14:30.060
保存刷新

14:30.060 --> 14:32.060
让你到最后一阵的时候停

14:32.060 --> 14:33.060
咱们就可以看到了

14:33.060 --> 14:35.060
其实它是可以到最后一阵

14:35.060 --> 14:37.060
只不过你要不加forward的话

14:37.060 --> 14:38.060
瞬间就完事了

14:38.060 --> 14:39.060
你就看不到了

14:39.060 --> 14:40.060
明白我意思

14:40.060 --> 14:41.060
这是可以的

14:41.060 --> 14:44.060
所以说step它的一个具体功能

14:44.060 --> 14:45.060
咱们基本上讲完了

14:45.060 --> 14:46.060
那么接下来

14:46.060 --> 14:47.060
我们先讲一些围绕的step

14:47.060 --> 14:49.060
来展开这些例子

14:49.060 --> 14:50.060
没问题吧

14:50.060 --> 14:51.060
咱们这样

14:51.060 --> 14:53.060
我先把step两个特殊的值

14:53.060 --> 14:54.060
给大家写完

14:54.060 --> 14:56.060
然后咱们再开始讲那几个例子

14:56.060 --> 14:57.060
好吧

14:57.060 --> 14:59.060
这两个特殊值是什么

14:59.060 --> 15:01.060
比如说写end的时候

15:01.060 --> 15:02.060
这块写end的时候

15:02.060 --> 15:03.060
其实比如这样

15:03.060 --> 15:05.060
step1

15:05.060 --> 15:06.060
step4

15:06.060 --> 15:07.060
它就等于等于什么

15:07.060 --> 15:08.060
等于等于一个值

15:08.060 --> 15:10.060
叫step and

15:10.060 --> 15:13.060
然后step1

15:13.060 --> 15:14.060
step2的

15:14.060 --> 15:15.060
一定记住必须贴一的时候

15:15.060 --> 15:16.060
才可以等于

15:16.060 --> 15:18.060
这就等于step

15:19.060 --> 15:20.060
没有问题吧

15:20.060 --> 15:21.060
明白

15:21.060 --> 15:22.060
这是两个特殊值

15:22.060 --> 15:23.060
所以说它一共有三种天法

15:23.060 --> 15:24.060
要不step and

15:24.060 --> 15:25.060
step start

15:25.060 --> 15:26.060
要不step and

15:26.060 --> 15:27.060
要不step start

15:27.060 --> 15:28.060
要不就step4

15:28.060 --> 15:29.060
然后自己来贴这样的一个数

15:29.060 --> 15:30.060
明白我意思吧

15:30.060 --> 15:31.060
OK

15:31.060 --> 15:33.060
所以这块咱就不给大家多说了

15:33.060 --> 15:34.060
比如说现在我给它

15:34.060 --> 15:36.060
变成这样的一个step and

15:36.060 --> 15:37.060
是吧

15:37.060 --> 15:38.060
变成step and

15:39.060 --> 15:40.060
它也是可以实现的

15:40.060 --> 15:41.060
保存删心

15:41.060 --> 15:42.060
你看

15:42.060 --> 15:43.060
没有问题吧

15:43.060 --> 15:44.060
那块咱多个2出来呢

15:44.060 --> 15:46.060
让这块来个2是吧

15:46.060 --> 15:47.060
干掉

15:47.060 --> 15:48.060
没有问题

15:48.060 --> 15:49.060
行了

15:49.060 --> 15:50.060
这是step

15:50.060 --> 15:51.060
那么接下来

15:51.060 --> 15:53.060
咱们要利用这个step

15:53.060 --> 15:55.060
来完成三个功能

15:55.060 --> 15:56.060
我先把这三个功能给大家写出来

15:56.060 --> 15:57.060
你这个

15:57.060 --> 15:59.060
把这个视频关掉之后

15:59.060 --> 16:00.060
你先自己来试试

16:00.060 --> 16:01.060
看能不能来利用step

16:01.060 --> 16:03.060
来完成这三个例子

16:03.060 --> 16:04.060
如果能完成的话

16:04.060 --> 16:05.060
证明你找过的还不错

16:05.060 --> 16:06.060
如果完成不了的话

16:06.060 --> 16:07.060
你看看下节课

16:07.060 --> 16:08.060
我怎么来带你做的这个练习

16:08.060 --> 16:11.060
然后再来充分的了解一下

16:11.060 --> 16:12.060
或者应用一下step

16:12.060 --> 16:13.060
到底来怎么来用

16:13.060 --> 16:15.060
其实写到这你能完成

16:15.060 --> 16:16.060
这三个功能的话

16:16.060 --> 16:17.060
你已经非常了不起了

16:17.060 --> 16:18.060
证明你这个学习

16:18.060 --> 16:19.060
真就是一点就透

16:19.060 --> 16:21.060
而且非常有这样的一个

16:21.060 --> 16:22.060
很好的能力去把

16:22.060 --> 16:23.060
这个之前的知识

16:23.060 --> 16:24.060
跟它融合到一起

16:24.060 --> 16:25.060
我先写

16:25.060 --> 16:26.060
第一个时间什么呢

16:26.060 --> 16:27.060
叫打字效果

16:27.060 --> 16:29.060
打字效果

16:29.060 --> 16:30.060
这个打字效果

16:30.060 --> 16:31.060
比如这样

16:31.060 --> 16:32.060
现在我写几个字

16:32.060 --> 16:33.060
你看比如说

16:33.060 --> 16:34.060
现在我写一个A

16:34.060 --> 16:35.060
然后后面是不光标在跳

16:35.060 --> 16:36.060
然后我写一个B

16:36.060 --> 16:37.060
光标在跳是吧

16:37.060 --> 16:38.060
C光标在跳

16:38.060 --> 16:39.060
我让你自动的

16:39.060 --> 16:40.060
实现这样的效果

16:40.060 --> 16:41.060
我也要有

16:41.060 --> 16:42.060
然后这个字

16:42.060 --> 16:43.060
一点一点出来

16:43.060 --> 16:44.060
就是第一个出来的是A

16:44.060 --> 16:45.060
然后

16:45.060 --> 16:46.060
然后第二个出来的是B

16:46.060 --> 16:47.060
然后ABC

16:47.060 --> 16:48.060
然后D

16:48.060 --> 16:49.060
EF

16:49.060 --> 16:50.060
一点点出来

16:50.060 --> 16:51.060
明白了意思吧

16:51.060 --> 16:52.060
打字效果

16:52.060 --> 16:54.060
第二个是中表效果

16:54.060 --> 16:56.060
带过表吗

16:56.060 --> 16:57.060
带过吧

16:57.060 --> 16:59.060
中表效果

16:59.060 --> 17:00.060
带过表吧

17:00.060 --> 17:01.060
没有问题吧

17:01.060 --> 17:02.060
那个表

17:02.060 --> 17:03.060
秒针一点

17:03.060 --> 17:04.060
一格一格动

17:04.060 --> 17:05.060
不要是过度动画

17:05.060 --> 17:06.060
是一格跳到一格的

17:06.060 --> 17:07.060
最经典的动画

17:07.060 --> 17:08.060
明白了意思吧

17:08.060 --> 17:09.060
所以这个怎么着

17:09.060 --> 17:10.060
中表效果

17:10.060 --> 17:12.060
秒针动

17:12.060 --> 17:13.060
然后分针动

17:13.060 --> 17:14.060
十针你就不用让它动了

17:14.060 --> 17:15.060
但是你也可以写

17:15.060 --> 17:16.060
那比较复杂

17:16.060 --> 17:17.060
不是复杂

17:17.060 --> 17:18.060
数比较大

17:18.060 --> 17:19.060
你就秒针分十针就可以了

17:19.060 --> 17:20.060
秒针分十针

17:20.060 --> 17:21.060
秒针钻一圈

17:21.060 --> 17:22.060
十针动一格

17:22.060 --> 17:23.060
秒针钻一圈

17:23.060 --> 17:24.060
十针动一格

17:24.060 --> 17:25.060
然后引入到一些

17:25.060 --> 17:26.060
可能说你不太会的

17:26.060 --> 17:27.060
一些东西

17:27.060 --> 17:28.060
我先给你写上

17:28.060 --> 17:29.060
叫Transform

17:29.060 --> 17:30.060
Transform

17:30.060 --> 17:31.060
里面一个变换

17:31.060 --> 17:32.060
叫什么

17:32.060 --> 17:33.060
叫Rotate

17:33.060 --> 17:34.060
Rotate

17:34.060 --> 17:35.060
它是可以旋转角度的

17:35.060 --> 17:36.060
旋转角度的

17:36.060 --> 17:37.060
当然这块有个旋转轴

17:37.060 --> 17:38.060
旋转轴

17:38.060 --> 17:39.060
你可以再设置一下

17:39.060 --> 17:40.060
叫Transform

17:40.060 --> 17:41.060
Origin

17:41.060 --> 17:43.060
它的默认值是Center

17:43.060 --> 17:45.060
Center就是这个元素的中间

17:45.060 --> 17:46.060
你可以设成像素

17:46.060 --> 17:47.060
比如说

17:47.060 --> 17:48.060
设成零零

17:48.060 --> 17:50.060
它零像素零像素

17:50.060 --> 17:51.060
零零也可以

17:51.060 --> 17:52.060
它这个旋转轴

17:52.060 --> 17:53.060
就在这个元素的左上角

17:53.060 --> 17:55.060
你要设成零Center

17:55.060 --> 17:56.060
这是什么

17:56.060 --> 17:57.060
它的旋转轴

17:57.060 --> 17:58.060
就在水平方向是零

17:58.060 --> 18:00.060
垂直方向是Center

18:00.060 --> 18:01.060
明白我意思吧

18:01.060 --> 18:02.060
所以这一块

18:02.060 --> 18:03.060
你可以去设置

18:03.060 --> 18:04.060
有了它俩之后

18:04.060 --> 18:05.060
你是不是可以

18:05.060 --> 18:06.060
做一个元素的旋转

18:06.060 --> 18:07.060
这里面要添度数

18:07.060 --> 18:09.060
度数单位是DG

18:09.060 --> 18:11.060
度数单位是DG

18:11.060 --> 18:12.060
Degree是吧

18:12.060 --> 18:13.060
Degree

18:13.060 --> 18:15.060
然后你可以去查一查

18:15.060 --> 18:16.060
剩下就没什么了

18:16.060 --> 18:17.060
这个Rotate

18:17.060 --> 18:18.060
你就这么来用就行了

18:18.060 --> 18:19.060
千万别用那Rotate的

18:19.060 --> 18:20.060
X,Y,Z

18:20.060 --> 18:21.060
包括Rotate的3D

18:21.060 --> 18:22.060
那玩意你用不了

18:22.060 --> 18:23.060
你也别乱用

18:23.060 --> 18:25.060
你直接用Rotate

18:25.060 --> 18:26.060
就可以了

18:26.060 --> 18:27.060
就可以实现这样的

18:27.060 --> 18:28.060
中表效果了

18:28.060 --> 18:29.060
没问题吧

18:29.060 --> 18:30.060
关键是

18:30.060 --> 18:31.060
怎么利用这个东西

18:31.060 --> 18:32.060
来实现中表效果是吧

18:32.060 --> 18:33.060
这些东西

18:33.060 --> 18:34.060
Transform这个东西简单

18:34.060 --> 18:35.060
咱们在后期的时候

18:35.060 --> 18:36.060
在下下堂课

18:36.060 --> 18:37.060
会重点讲这个东西

18:37.060 --> 18:38.060
你先拿Rotate

18:38.060 --> 18:39.060
先用一用

18:39.060 --> 18:40.060
没关系是吧

18:40.060 --> 18:41.060
然后实现一个什么

18:41.060 --> 18:43.060
实现一个竹震动画

18:43.060 --> 18:44.060
竹震动画

18:44.060 --> 18:46.060
实现一个跑马效果

18:46.060 --> 18:47.060
跑马效果

18:47.060 --> 18:48.060
可能说这个素材

18:48.060 --> 18:49.060
你是没有的

18:49.060 --> 18:50.060
这个素材

18:50.060 --> 18:51.060
这个素材我会传给你

18:51.060 --> 18:52.060
在这呢

18:52.060 --> 18:53.060
这个素材

18:53.060 --> 18:55.060
这个素材我会传给你

18:55.060 --> 18:56.060
我先告诉你它的兼具

18:56.060 --> 18:58.060
它这个图片的高是100

18:58.060 --> 19:00.060
图片整体的宽是2400

19:00.060 --> 19:02.060
然后分为12个码形

19:02.060 --> 19:03.060
每个码形

19:03.060 --> 19:05.060
它是以200像素来分割的

19:05.060 --> 19:06.060
也就是说12个

19:06.060 --> 19:07.060
200像素的这样的一个

19:07.060 --> 19:09.060
200像素宽的这样的一个图片

19:09.060 --> 19:10.060
拼接到一起

19:10.060 --> 19:12.060
形成了一个2400像素宽的

19:12.060 --> 19:14.060
一个整个完整的一个图

19:14.060 --> 19:15.060
你看利用这个图

19:15.060 --> 19:16.060
能不能实现咱们的一个

19:16.060 --> 19:18.060
码跑起来的一个效果

19:18.060 --> 19:19.060
码跑起来的一个效果

19:19.060 --> 19:20.060
这个图到时候

19:20.060 --> 19:21.060
会统一发给你们

19:21.060 --> 19:22.060
因为这个

19:22.060 --> 19:23.060
特省肯定是要打包

19:23.060 --> 19:24.060
点通这个资料发给你的

19:24.060 --> 19:25.060
你在看这块的时候

19:25.060 --> 19:26.060
你先拿这个东西

19:26.060 --> 19:27.060
先做一个

19:27.060 --> 19:28.060
看他们做出来

19:28.060 --> 19:29.060
做不出来的话

19:29.060 --> 19:30.060
看看下一节视频

19:30.060 --> 19:31.060
你做出来的话

19:31.060 --> 19:32.060
也得看看下一节视频

19:32.060 --> 19:33.060
咱们这堂课就先到这

19:33.060 --> 19:35.060
对STAP有一个初步的了解

19:35.060 --> 19:36.060
下堂课沿用STAP

