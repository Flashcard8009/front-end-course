WEBVTT

00:00.560 --> 00:05.420
好了 有了模块块之后 咱们就可以把一些复杂的东西

00:05.940 --> 00:07.980
把它分成很多很多的小模块

00:08.500 --> 00:13.100
这样子一分下来呢 不仅每一个模块非常方便重复使用

00:13.360 --> 00:17.460
而且呢 无论以后工程变得多么复杂 多么庞大

00:17.720 --> 00:20.020
无非就是模块多一点嘛 对不对

00:20.260 --> 00:24.100
我们始终保证每一个模块 也就是每一个GS文件的

00:24.360 --> 00:26.160
它大代码简单简洁

00:26.420 --> 00:28.980
这样子呢 我们整个工程的就变得可空了

00:29.380 --> 00:33.080
这就是模块化给我们开发上带来的一些改变

00:34.360 --> 00:38.960
上节后呢 咱们讲的CommonGS CommonGS是一个社区规范

00:39.480 --> 00:42.540
就是民间自己搞的 因为那个时候官方没有出

00:42.800 --> 00:43.840
所以说民间自己搞

00:44.340 --> 00:46.140
目前的只有漏的环境

00:46.400 --> 00:47.920
支持这个CommonGS

00:48.180 --> 00:49.980
尽管你们以后呢 不会开发

00:50.240 --> 00:53.040
漏的代码 或者是开发的很少很少的漏的代码

00:53.300 --> 00:55.340
但是CommonGS也是必须要接触的

00:55.600 --> 00:57.640
至于为什么你们往后学

00:57.840 --> 00:59.640
学到后边里面慢慢就明白了

00:59.900 --> 01:04.000
另外一个呢 就是模块化标准的就是官方出的ES module

01:04.260 --> 01:07.580
那么这个模块化标准呢 是跟随着ES6一起发布的

01:08.100 --> 01:10.140
最开始呢 是CommonGS出来了

01:10.640 --> 01:13.200
然后呢 一帮漏的社区里边的小伙伴

01:13.460 --> 01:14.500
玩得很开心

01:15.260 --> 01:18.340
然后像我们这种搞前端开发的

01:19.600 --> 01:21.400
那么就觉得眼红

01:21.660 --> 01:23.700
你一个羊子

01:24.220 --> 01:26.000
还不是亲生的

01:26.200 --> 01:27.620
你们自己搞了一套东西

01:27.880 --> 01:30.040
还玩得比我们还开心 那肯定不干啊

01:30.300 --> 01:32.620
于是呢 很多前端开发者就开始抗议啊

01:32.880 --> 01:34.660
在地上打鬼呢 吐口水啊

01:35.160 --> 01:38.240
就是让官方也搞一个模块化标准出来

01:39.000 --> 01:42.080
实际上在官方出这个标准之前呢

01:43.100 --> 01:44.120
前端社区

01:44.640 --> 01:47.460
民间他也搞了一些乱七八糟的模块化标准

01:48.220 --> 01:52.060
后来呢 官方在2015年学着ES6把自己的模块化标准

01:52.320 --> 01:53.600
发布出来之后呢

01:53.960 --> 01:59.760
前端那些什么AMD啊 CMD啊 这端七八糟的模块化标准呢就渐渐的推出历史舞台了

02:00.320 --> 02:09.200
如果说你有兴趣的话 将来啊 现在没有多少时间 将来的话 你可以去看一看啊 咱们那个完整课程里边那个ES6

02:09.520 --> 02:10.640
那里边呢 就有一个

02:11.600 --> 02:15.600
民间的AMD CMD这些模块化标准啊

02:16.400 --> 02:20.760
好 这里呢就简单说一下 好 这里头我们开始学习官方的模块化标准

02:21.680 --> 02:25.400
那么官方的模块化标准呢 跟common.js的鞋法上的就很大的不同

02:26.400 --> 02:31.160
呃 大家可能学起来呢 觉得common.js不是很简单吗 对吧 一个导出

02:32.360 --> 02:36.760
modular exports啊 这个文档我说一下 这个文档就是我们今天的一个

02:37.320 --> 02:40.440
查询的手册啊 你什么东西忘了过后就可以查这个文档

02:41.240 --> 02:45.360
你看common.js很简单 导出就这个玩意儿 导出就这个玩意儿 是不是特别简洁

02:45.880 --> 02:50.400
所以说呢 很多初学者呢 特别喜欢common.js而不喜欢这个官方的

02:50.760 --> 02:56.640
因为官方的东西出来 我们大家看一下吧 东西就比较多 但是不要怕啊

02:57.680 --> 03:03.320
东西虽然多 呃 但是呢 我们不要用去计 我们通过查阅文档

03:04.440 --> 03:10.360
可以解决 如果说你忘了查一下这个文档 我们今天呢 会有很多的练习啊 都是来帮助大家

03:10.920 --> 03:13.400
熟悉这些API 啊 这些新的语法

03:14.360 --> 03:18.920
好 咱们来看吧 其实有了上节课的一些铺垫之后呢 我们学习官方的模块化标准

03:20.920 --> 03:26.840
很多干净就不用讲了 导出的干净不用讲了吧 对不对 还有导入的干净不用讲了吧 还有就是

03:27.680 --> 03:33.000
模块化之后呢 不会污染全局变量 那这里也肯定是一样啊 官方的也不会污染全局

03:33.680 --> 03:36.840
所以说很多干净不用讲了 我们只需要学习如何导出如何导出

03:37.840 --> 03:39.680
好 接下来呢 我们到那个工程里边

03:41.040 --> 03:42.640
嗯 见个文件夹啊 等下

03:43.720 --> 03:47.880
先给他演示一下 因为他是一个官方的模块化标准 所以说瘤烂器呢

03:48.800 --> 03:57.280
就必须要支持 你看这个康门界是是民间搞的 瘤烂器可以不甩他 但是呢 官方出的模块要标准 瘤烂器就必须要支持 目前呢

03:58.400 --> 04:03.880
绝大部分瘤烂器就已经支持了官方的模块和标准 有没有见到有些问题肯定有

04:04.360 --> 04:09.440
因为2015年之前的瘤烂器他就肯定不兼容 2015年之后的基本上都兼容了

04:10.080 --> 04:15.800
好 我们来看一下啊 因此我们这就可能写的就不带是漏的环境里边东西的 又回到了瘤烂器环境

04:16.400 --> 04:24.880
我们这里呢 建立一个页面 为什么要建页面 因为瘤烂器环境里边不只认页面吗 你能够直接运行个节词吗 不行吗 你得写个页面

04:26.040 --> 04:31.320
好 那么这个页面里边 我也不许写什么ATM和CC代码 我就来研究介石

04:32.920 --> 04:39.320
我们过去呢 在瘤烂器里面引用介石呢 是不是这样的引用的 比方说我这里写一些介石吧

04:40.040 --> 04:47.560
就写一个index.js 决定是啊 我们这里输出一个123

04:48.920 --> 04:50.920
再定一个权力辨量吧

04:52.440 --> 04:57.000
好 我们过去呢 是用这种方式来引用的 对不对

04:58.040 --> 05:02.760
我们如果说页面上要用到很多.js的话 我们就可以产生很多的这个scripps元素

05:03.960 --> 05:09.080
那么我们现在呢 有了模块化标准之后呢 只要你这个index.js呢

05:09.480 --> 05:12.280
我 我其实可以把它当成一个模块

05:13.080 --> 05:18.440
啊 过去是不是的 过去每个介石文件它不是一个模块啊 也就是那里面会有伍展权局辨量

05:18.840 --> 05:23.560
不能有导入导出 那么现在呢 就是介石文件都可以把它当成一个模块了

05:24.280 --> 05:30.760
啊 当什么模块 满足es module这个标准的模块 就是官方模块化标准的模块

05:31.320 --> 05:36.840
好 那么接下来在引用这个介石的时候呢 我们要多做一件事 就是加上一个type属性

05:37.560 --> 05:43.160
给它设置为module 那么这样一来的话 浏览器一看哦 你要引用一个介石 但是

05:43.720 --> 05:47.800
这个介石它不是一个普通的介石 它是一个模块文件

05:48.280 --> 05:52.520
那么这个时候呢 浏览器就会把这个介石当成一个模块来进行运行

05:53.160 --> 05:57.800
啊 其实道理是一样的 我们node环境里面是不是通过这个node命令

05:58.360 --> 06:03.320
啊 运行一个东西对不对啊 那么这个东西叫做启动模块 那这里也是一样

06:04.200 --> 06:09.320
我们浏览器里面也可以引用一个模块 这个模块就是启动模块 这个模块里面可以去导入其他模块

06:09.720 --> 06:15.160
啊 是不是道理是一样的 好 其实这样子呢 就已经可以运行了啊 我们打开浏览器 看一下体验一下

06:16.600 --> 06:23.080
看 打开控制台 看是不是输出了123 对吧

06:25.240 --> 06:34.470
输出123 没问题吧 我们把这个打开啊 好 那么现在呢 我们这个模块还得到运行呢 接下来我们来观察一下

06:34.550 --> 06:39.750
这个模块里面呢 定义了一个全局变量A 对吧 那我们来看一下 有没有污染全局变量啊

06:40.310 --> 06:45.990
哎 我看一下这个A什么存在啊 它说A不存在 也尽管我们是用VAR来定义的

06:46.630 --> 06:52.070
不是说要负责在温度里面吗 你看温度里面有没有这个A啊 是不是没有

06:52.630 --> 06:59.750
对不对 那么说明啥 说明了 这它真的是一个模块啊 没有骗我们 它真的是一个模块 它没有污染全局变量

07:00.710 --> 07:04.870
它要包住一些东西只能导出 要用别人的模块只能导入

07:05.910 --> 07:13.190
明儿的意思吧 好 那么这一块呢 大家先暂停视频 建立一个页面 在页面上去引用一个

07:13.830 --> 07:19.110
模块 写个介绍一个一个页面 页面上去引用一个模块来测试一下啊 体验一下

07:20.870 --> 07:23.030
好了呗 好 那咱们就继续讲

07:23.990 --> 07:29.830
好 接下来呢 我们就要研究怎么来导出 怎么来导入 我们比方说啊 这里呢 有两个模块

07:30.230 --> 07:35.350
一个呢 是index的点介式 一个呢 就是我们上一颗演示的啊 一个mass模块

07:35.830 --> 07:38.630
这个mass模块呢 我们要导出两个函数

07:39.430 --> 07:41.190
导出两个函数

07:41.670 --> 07:48.550
一个函数呢 叫做上 就求和 一个函数呢 叫做ease odd 判断是不是基数

07:49.510 --> 07:51.910
那么怎么来导出两个函数呢

07:52.870 --> 07:54.550
好 接下来我们把分个平啊

07:59.180 --> 08:03.660
我们过去呢 在comment介式里面非常简单通过这个给modular exports

08:04.060 --> 08:07.740
复制就完事了 但是在ease里面它不是这样子

08:08.220 --> 08:11.260
ease里面怎么导出呢 我们来看一下 我们的文档

08:12.620 --> 08:19.420
它的导出方式多的吓死人 不要说你们呢 我用了这么久的模块 我都还记不住

08:20.380 --> 08:24.540
可能有的时候呢都还要写错 不过没有关系 它不影响你后边开发的

08:24.780 --> 08:28.460
平时我们其实常用的就那么一点点导出方式

08:29.260 --> 08:30.780
我们首先给大家说一下啊

08:31.180 --> 08:36.300
comment就是ease module里面 它的导出啊 它整个模块导完导出完了过后

08:37.340 --> 08:40.620
是一个类似于对象的东西 它本质上不是对象

08:41.260 --> 08:47.260
你可以把它想象成一个对象 就是整个导出结果呢 它是导出了一个类似于对象的东西

08:48.060 --> 08:49.340
那么这个对象里面呢

08:50.300 --> 08:52.140
这个对象里面有很多的属性

08:53.180 --> 08:56.870
那么具体有哪些属性你自己来定

08:57.110 --> 09:00.950
但是其中有一个非常特殊的属性 叫做default

09:02.230 --> 09:07.350
有这么一个属性 这个属性什么意思呢 表示的是默认导出

09:07.590 --> 09:09.670
我们它整个导出一个对象嘛

09:09.910 --> 09:13.750
那么其中一个导出是非常特殊的 它的属性名叫做default

09:13.750 --> 09:15.030
它叫做默认导出

09:15.270 --> 09:17.590
其他的导出呢 名字呢

09:18.550 --> 09:22.150
其他导出比方说导出了一个A 导出了一个B

09:22.870 --> 09:26.070
那么它叫做具名导出

09:27.270 --> 09:27.990
它有名字

09:29.430 --> 09:32.470
default呢 不是说没有名字 default的名字是固定的

09:32.470 --> 09:34.310
所以说我们认为它只有一个

09:34.710 --> 09:37.670
从这个逻辑上可以看出啊 我们的导出里面

09:37.990 --> 09:40.070
是不是具名导出可以有多个

09:40.950 --> 09:44.310
任意多个 对吧 默认导出它只能导出一个

09:44.790 --> 09:46.150
对吧 这个我就能明白了

09:46.150 --> 09:48.950
因为它属性固定的只能是这个属性

09:48.950 --> 09:50.470
具名导出的名字里随便去

09:51.270 --> 09:52.790
所以说我们在导出的时候呢

09:53.590 --> 09:54.950
它就分为两种导出

09:54.950 --> 09:57.430
一种是具名导出 一种是默认导出

09:58.150 --> 10:01.430
那么比方说 我这里要导出两个函数 用什么好呢

10:02.390 --> 10:04.550
哎 哪里可以用很多种方式啊

10:04.550 --> 10:08.310
比方说你可以用具名导出 我没有默认导出

10:09.030 --> 10:09.430
没有

10:10.470 --> 10:12.230
但是有两个具名导出

10:12.710 --> 10:14.950
一个是上 一个函数

10:15.750 --> 10:18.390
一个呢 是ease odd

10:19.510 --> 10:22.070
一个函数 能理解吗 是不是可以这样子

10:22.950 --> 10:25.830
当然了也可以有很多种方式 方式太多了

10:25.830 --> 10:28.150
也可以呢 我就用默认导出

10:28.150 --> 10:30.230
我把默认导出了 又导出了一个对象

10:30.230 --> 10:31.750
可不可以 当然可以啊

10:31.750 --> 10:32.870
它可以是任何类型

10:33.510 --> 10:36.230
D4里面呢 有一个上 是一个函数

10:36.790 --> 10:39.510
有一个ease odd 是一个函数

10:39.910 --> 10:41.750
别的意思吧 特别简单

10:42.790 --> 10:44.790
好 那么我们这里选择什么呢

10:44.790 --> 10:47.190
我们先来选择一个具名导出吧

10:47.750 --> 10:49.350
先来选择一个具名导出

10:49.350 --> 10:51.750
那么具名导出的语法 具体的语法

10:53.190 --> 10:53.670
看文档

10:55.510 --> 10:55.990
你看吧

10:56.790 --> 10:58.150
这个文档里面就写得很清楚了

10:58.710 --> 11:01.350
我如果说写了这么一句话

11:02.550 --> 11:05.510
export const a等于1

11:05.510 --> 11:07.270
对吧 定一个变量等于1

11:07.270 --> 11:08.390
然后把它导出

11:08.390 --> 11:10.150
那么它有名字没 有名字

11:10.710 --> 11:12.070
什么名字 就是变量的名字

11:12.310 --> 11:14.310
于是这句话运行完了之后呢

11:14.310 --> 11:15.750
它的导出结果就是这样子

11:16.230 --> 11:16.870
a为1

11:17.270 --> 11:18.630
这个玩意是不是具名导出

11:19.030 --> 11:19.590
对不对

11:19.590 --> 11:20.630
然后又来啊

11:20.630 --> 11:23.030
第二句话 export function b

11:23.830 --> 11:25.190
是不是导出一个函数

11:25.670 --> 11:25.990
那么

11:27.510 --> 11:29.430
就是这样导出结果就变这样子了

11:29.430 --> 11:31.430
对不对 导出了两个具名了

11:31.430 --> 11:32.230
好 c

11:32.390 --> 11:33.350
我们来看一下

11:33.350 --> 11:34.630
整个快速的过一遍吧

11:35.270 --> 11:36.550
是不是也是一个函数

11:37.750 --> 11:38.870
也是一个函数 对不对

11:39.830 --> 11:41.430
当然这个邪法呢

11:41.430 --> 11:42.470
你可以有很多种邪法

11:42.470 --> 11:43.590
比方你可以这样子写

11:43.590 --> 11:46.390
const c等于reama对不对

11:46.950 --> 11:47.750
有啥区别呢

11:48.630 --> 11:49.590
也是一个函数

11:50.310 --> 11:52.630
也就是我们在定义函数啊

11:52.630 --> 11:54.150
定义变量的位置

11:54.470 --> 11:56.310
在前边加上一个export

11:56.310 --> 11:57.990
那么就表示有名字的导出

11:58.870 --> 12:00.630
好 接下来我们来看下面啊

12:01.110 --> 12:02.950
如果说我这个变量已经有了

12:02.950 --> 12:03.990
一个d等于2

12:03.990 --> 12:05.590
我要把这个d导怎么导出呢

12:05.590 --> 12:06.790
你不能直接这样子写啊

12:07.350 --> 12:08.550
这样子写是要抱错的

12:08.870 --> 12:10.310
为什么这样子写要抱错呢

12:10.310 --> 12:12.710
是因为这是个表达式

12:12.710 --> 12:14.310
它就不是一个定义语句了

12:14.310 --> 12:15.510
你看这是个定义对吧

12:15.510 --> 12:17.270
这是个定义这是个定义

12:17.270 --> 12:18.470
它就不是定义了

12:18.470 --> 12:21.030
那么它就会计算这个表达式的值

12:21.030 --> 12:23.350
就相当于是把这个2t换到了这个位置

12:23.350 --> 12:24.870
那你看这样子还有名字了

12:24.870 --> 12:26.150
所以没有名字了

12:26.150 --> 12:27.350
没有名字到这里

12:27.350 --> 12:28.390
这里写啥呢

12:28.390 --> 12:29.110
这个位置

12:29.110 --> 12:30.150
它又不知道什么名字

12:30.150 --> 12:31.270
所以它要抱错的啊

12:31.270 --> 12:32.150
你不能这样子写

12:32.150 --> 12:32.950
总之呢

12:32.950 --> 12:34.150
你不能乱来

12:34.150 --> 12:35.830
你必须按照这个语法规则来

12:35.830 --> 12:37.750
那如果说你要导出这个变量

12:37.830 --> 12:38.790
你要同时呢

12:39.910 --> 12:41.830
给它定名字的就是变量的名字

12:41.830 --> 12:43.670
你要用两个扩号把它扩起来

12:43.670 --> 12:44.390
大扩号

12:44.390 --> 12:44.870
注意啊

12:44.870 --> 12:45.750
它不是一个对象啊

12:45.750 --> 12:47.110
这个不是导出一个对象啊

12:47.670 --> 12:49.990
它指的是我做一个居民导出

12:50.630 --> 12:51.990
名字的跟变量名相同

12:51.990 --> 12:53.350
值呢跟变量的值一样

12:54.070 --> 12:54.790
于是呢

12:54.790 --> 12:55.910
值就是变量的值

12:55.910 --> 12:57.270
名字呢就是变量的名字

12:57.270 --> 12:58.070
你明白了意思吧

12:58.070 --> 12:58.630
好

12:58.630 --> 12:59.110
再来啊

12:59.110 --> 13:00.150
我们快说过一遍啊

13:00.950 --> 13:02.390
定一个变量k

13:02.390 --> 13:04.070
然后呢我要把它导出

13:04.070 --> 13:05.430
导出的时候呢

13:05.430 --> 13:06.870
我用k一个关键字

13:06.870 --> 13:07.910
Earth,Temp

13:07.910 --> 13:09.110
这些都是新语法啊

13:09.110 --> 13:11.190
不是跟以前里面什么对象啊

13:11.190 --> 13:12.710
那些东西把那些东西

13:12.710 --> 13:13.350
没有关系啊

13:15.770 --> 13:16.570
什么意思啊

13:16.570 --> 13:18.170
就是我变量的值

13:18.170 --> 13:19.850
还是用它的值

13:19.850 --> 13:21.210
就是10

13:21.210 --> 13:22.810
但是变量的名字呢

13:22.810 --> 13:23.690
我改一下

13:23.690 --> 13:25.210
不用不用它的变量名字

13:25.210 --> 13:26.010
我改成Temp

13:26.970 --> 13:28.170
它变成这样的导出了

13:29.210 --> 13:30.010
没了意思吧

13:30.010 --> 13:31.290
就这么简单

13:31.290 --> 13:31.610
好

13:31.610 --> 13:32.570
再下来啊

13:32.570 --> 13:33.930
看一下默正导出呢

13:33.930 --> 13:34.810
有些东西常用啊

13:34.810 --> 13:35.690
有些东西不常用

13:36.250 --> 13:38.970
默正导出的话

13:38.970 --> 13:40.010
你要加个关键字

13:40.010 --> 13:40.410
Default

13:41.050 --> 13:42.970
表示我后边的东西是默正导出

13:42.970 --> 13:44.810
而默正导出是不需要名字的

13:45.450 --> 13:46.490
你有名字也不认

13:46.490 --> 13:47.530
反正他也不认

13:47.530 --> 13:48.330
反正就是

13:48.330 --> 13:50.330
默正导出只需要一个指就行了

13:50.330 --> 13:51.610
比方一个3

13:51.610 --> 13:52.490
假设这句话

13:52.490 --> 13:53.290
写的如果过后呢

13:53.930 --> 13:54.890
它就变成什么了

13:54.890 --> 13:56.250
因为它的名字是固定的

13:56.250 --> 13:56.890
叫Default

13:58.810 --> 13:59.370
就是3

14:00.250 --> 14:01.210
这是默正导出

14:01.770 --> 14:02.730
那么如果说你

14:02.730 --> 14:03.610
这是一种邪法

14:03.610 --> 14:04.330
还有很多种邪法

14:04.410 --> 14:05.690
比方默正导出一个函数

14:06.570 --> 14:07.050
你看

14:07.610 --> 14:08.570
默正导出一个函数

14:08.570 --> 14:09.450
那就是个函数的

14:10.730 --> 14:11.130
然后呢

14:11.130 --> 14:12.250
这里定一个变量E

14:12.650 --> 14:12.970
是

14:12.970 --> 14:13.930
我要把这个变量E

14:15.050 --> 14:16.250
导出成默正

14:16.250 --> 14:17.130
还有这种邪法

14:17.130 --> 14:17.770
这种邪法就

14:18.490 --> 14:19.450
很少很少见了

14:19.850 --> 14:20.330
就是

14:20.890 --> 14:22.330
用这个变量E作为指

14:22.330 --> 14:23.130
但是它的名字呢

14:23.130 --> 14:24.650
给它取成Default

14:24.650 --> 14:26.330
你看之前不是名字改成

14:26.330 --> 14:27.130
其他名字吧

14:27.130 --> 14:28.490
如果说你把名字改成Default

14:28.490 --> 14:29.370
它就默正导出

14:29.370 --> 14:30.410
那就变成了这样子了

14:32.090 --> 14:32.490
所以啊

14:32.490 --> 14:33.450
整个模块里面

14:33.450 --> 14:34.890
默正导出只能有一次

14:34.890 --> 14:35.610
你不能反复了

14:35.610 --> 14:36.170
默正导出

14:36.170 --> 14:37.290
它不是覆盖关系

14:37.610 --> 14:38.570
它只能写一次

14:38.570 --> 14:39.530
写多少报错了

14:39.530 --> 14:41.290
因为默正导出只能导一次

14:42.250 --> 14:42.570
好

14:42.570 --> 14:43.370
然后后边的

14:44.250 --> 14:45.610
FGH

14:45.610 --> 14:46.250
然后呢

14:46.250 --> 14:46.890
export

14:46.890 --> 14:47.530
我一起来

14:47.930 --> 14:48.730
导出一个F

14:48.730 --> 14:49.290
导出一个G

14:49.290 --> 14:50.090
导出一个H

14:50.090 --> 14:51.370
把它变成Default

14:51.370 --> 14:52.250
那啥意思呢

14:52.250 --> 14:52.730
就是说

14:54.010 --> 14:55.530
F变成了4

14:56.970 --> 14:58.010
G变成了5

14:58.330 --> 14:58.810
然后呢

14:59.290 --> 15:01.290
H变成Default

15:01.770 --> 15:02.250
New

15:02.250 --> 15:03.050
就变成这样子了

15:03.930 --> 15:05.290
下面有一个注释

15:05.290 --> 15:06.890
上面有一个拖带嘛

15:06.890 --> 15:08.490
它最终导出的是一个什么东西

15:09.130 --> 15:09.770
能理解了吧

15:10.730 --> 15:11.370
不复杂吧

15:11.930 --> 15:12.250
好

15:12.250 --> 15:12.650
那么

15:13.530 --> 15:14.650
练习题1

15:16.170 --> 15:17.050
同学们

15:17.050 --> 15:18.250
根据我的要求

15:18.250 --> 15:19.690
导出两个函数

15:19.690 --> 15:20.490
一个是

15:20.490 --> 15:21.770
将两个数求合返回

15:21.770 --> 15:22.410
一个是判断

15:22.410 --> 15:23.450
一个数是不是击数

15:23.450 --> 15:24.250
这是两个函数

15:24.890 --> 15:25.770
那么我的要求

15:25.770 --> 15:26.170
第一个

15:27.450 --> 15:28.010
要求是

15:29.290 --> 15:30.330
导成这样子

15:30.330 --> 15:31.130
它是一个函数

15:32.090 --> 15:33.130
也是O的

15:33.130 --> 15:34.170
它是一个函数

15:34.170 --> 15:35.290
看着文档来

15:35.290 --> 15:36.250
你记不住的

15:36.250 --> 15:37.530
把这个文档打开

15:37.530 --> 15:38.330
你看一下

15:38.330 --> 15:39.130
大家怎么写

15:39.770 --> 15:40.970
导出两个具名导出

15:44.860 --> 15:45.500
好了没

15:45.500 --> 15:45.900
好

15:45.900 --> 15:46.940
那我来讲解一下

15:47.740 --> 15:49.020
那我们来看一下文档

15:58.870 --> 16:00.470
我们要做两个具名导出

16:00.470 --> 16:01.430
所以说你查文档的时候

16:01.430 --> 16:01.910
就要看

16:01.910 --> 16:02.950
具名导出怎么导出

16:02.950 --> 16:03.430
对不对

16:04.070 --> 16:05.350
我要导出函数

16:05.350 --> 16:06.630
这里是不是有例子

16:06.630 --> 16:07.750
导出一个函数

16:07.750 --> 16:08.310
导出

16:08.310 --> 16:09.190
这种方式

16:09.190 --> 16:09.990
也可以导出函数

16:09.990 --> 16:10.630
都行

16:10.870 --> 16:11.910
那么我们就可以写

16:11.910 --> 16:12.630
export

16:13.990 --> 16:14.470
方形

16:15.270 --> 16:15.590
上

16:16.390 --> 16:16.710
a

16:16.710 --> 16:16.950
b

16:18.630 --> 16:19.510
然后呢

16:19.510 --> 16:19.910
return

16:19.910 --> 16:20.550
还要加必备

16:21.510 --> 16:21.750
好

16:21.750 --> 16:22.550
另一个函数呢

16:22.550 --> 16:23.590
export

16:23.590 --> 16:24.950
也可以写方形

16:24.950 --> 16:26.470
那么我也可以写个变量

16:27.110 --> 16:27.990
当然变量的名字

16:27.990 --> 16:28.550
用conc

16:28.550 --> 16:29.270
用nets

16:29.270 --> 16:30.150
用var都一样

16:31.670 --> 16:32.630
然后变量的名字

16:32.630 --> 16:33.750
isAught

16:33.750 --> 16:35.030
给它复制为一个函数

16:35.830 --> 16:36.710
可以可以

16:37.830 --> 16:39.030
判断一个数是不是击数

16:39.990 --> 16:40.790
n

16:40.790 --> 16:41.670
一二的函数

16:41.670 --> 16:42.710
是不是不等于零

16:42.710 --> 16:43.670
能看到吗

16:43.670 --> 16:43.910
对

16:43.910 --> 16:44.630
这是一个函数

16:44.630 --> 16:45.590
传入一个n

16:45.590 --> 16:46.470
返回的是什么

16:46.470 --> 16:47.270
看一下这个

16:47.270 --> 16:47.910
是不是函数

16:49.110 --> 16:49.750
这就完成了

16:50.310 --> 16:51.270
就导出这么一个东西

16:52.230 --> 16:52.870
首先要知道

16:52.870 --> 16:53.590
怎么去导出

16:54.870 --> 16:55.190
好

16:55.190 --> 16:55.590
接下来

16:55.590 --> 16:56.390
我们来看导入

16:57.910 --> 16:58.310
对

16:58.310 --> 16:59.510
这里还有一个细节

16:59.510 --> 17:00.390
导出的代码

17:00.390 --> 17:01.670
必须是顶级代码

17:01.670 --> 17:02.390
不可以发络代码

17:02.390 --> 17:02.790
块种

17:02.790 --> 17:03.510
什么意思

17:03.510 --> 17:04.950
就在es module里边

17:06.070 --> 17:06.950
它的导出代码

17:07.670 --> 17:08.790
不管导出还是导入

17:09.270 --> 17:09.990
都一样

17:09.990 --> 17:11.910
它不能把它放到一个判断

17:12.470 --> 17:13.430
循环

17:13.430 --> 17:14.630
函数体里边

17:14.630 --> 17:15.110
不能的

17:15.110 --> 17:16.550
像这些东西是肯定不行的

17:18.070 --> 17:18.710
你肯定不行

17:18.710 --> 17:19.350
不能这样的写

17:19.350 --> 17:20.630
到时候运行的时候就要包出

17:22.230 --> 17:22.870
不能这样写

17:23.750 --> 17:25.190
而Kaumen件是不是可以

17:25.750 --> 17:26.950
Kaumen件是可以的

17:26.950 --> 17:28.710
它在函数里边可以导入

17:28.710 --> 17:29.830
函数里边也可以导出

17:30.950 --> 17:32.230
但是es module不行

17:32.230 --> 17:34.070
它必须写成顶级代码

17:34.070 --> 17:34.790
就放到最

17:34.790 --> 17:35.830
就是最外面

17:36.870 --> 17:37.670
就这么个意思

17:39.270 --> 17:39.510
好

17:39.510 --> 17:40.390
那么第二部分

17:40.390 --> 17:41.750
我们来看一下如何导入

17:43.670 --> 17:44.550
比方说吧

17:45.190 --> 17:47.190
我们上面有这么一个东西

17:47.750 --> 17:49.190
这是我们刚才导出来的结果

17:51.590 --> 17:52.790
看来看一下如何导入

17:53.350 --> 17:54.470
导入的时候

17:54.470 --> 17:56.150
你可以用全部的

17:56.150 --> 17:57.910
也可以用其中它一部分

17:57.910 --> 17:58.950
因为有一些模块

17:59.590 --> 18:00.390
不是我说

18:00.390 --> 18:01.430
我导出了一大堆

18:01.430 --> 18:02.790
导出了100个东西

18:02.790 --> 18:04.310
你必须要把100个用完

18:04.310 --> 18:04.790
凭什么

18:05.830 --> 18:06.630
我不想用完的

18:06.630 --> 18:07.910
我就想用其中一个

18:09.350 --> 18:09.830
所以说呢

18:09.830 --> 18:11.750
我们导入了也有很多种方式

18:11.750 --> 18:12.470
你看啊

18:12.470 --> 18:13.430
首先这种方式

18:13.430 --> 18:14.710
Import模块路径

18:14.710 --> 18:15.990
这模块路径的书写方式

18:15.990 --> 18:17.030
跟Kaumen件是一样

18:17.030 --> 18:19.110
DL接杠和DL接杠开头

18:19.750 --> 18:21.270
不过在浏览器环境里面

18:21.270 --> 18:23.030
你不必需要加上后维

18:23.030 --> 18:25.270
Kaumen件是可以省略后维的

18:25.270 --> 18:27.910
Kaumen件是比方说DL接杠Mass

18:28.870 --> 18:30.870
后边的JS可以省略

18:30.870 --> 18:32.710
但是es module里面

18:32.710 --> 18:34.150
必须要加上后维

18:34.150 --> 18:34.790
DLJS

18:36.230 --> 18:36.870
第一种方式

18:36.870 --> 18:37.910
Import模块路径

18:38.870 --> 18:39.830
这啥意思

18:39.830 --> 18:41.190
只把这个模块运行一遍

18:42.550 --> 18:44.790
把上面的模块运从到为运行一遍

18:44.790 --> 18:45.990
当然还是有缓存

18:45.990 --> 18:46.950
它只运行一次

18:46.950 --> 18:48.390
后边就不会再重新运行

18:48.390 --> 18:49.190
重复运行了

18:49.190 --> 18:50.790
它的导出结果会被缓存起来

18:51.510 --> 18:52.470
只运行一遍

18:52.470 --> 18:53.110
运行一遍

18:53.110 --> 18:54.470
它不是导入任何那种

18:54.470 --> 18:55.670
尽管你有一百个导出

18:55.670 --> 18:56.310
我一个都不用

18:56.310 --> 18:58.070
我只是想把你运行一遍

18:58.070 --> 18:59.910
这种情况一般会出现在

18:59.910 --> 19:01.190
那种初始化

19:01.190 --> 19:04.230
以前模块没有什么的其他功能

19:04.230 --> 19:05.430
就是用来做初始化的

19:05.430 --> 19:06.950
我只是希望把它运行一遍而已

19:08.310 --> 19:09.190
后边才是关键

19:10.950 --> 19:11.910
导入的时候

19:11.910 --> 19:13.430
Import导入

19:13.430 --> 19:14.710
Front从哪里导入

19:14.710 --> 19:16.070
一个模块路径

19:16.070 --> 19:16.950
导入什么东西

19:16.950 --> 19:17.350
写到这

19:18.870 --> 19:21.510
大国号里边跟上名字

19:21.510 --> 19:23.910
这里的名字要对应这边的导出名字

19:24.870 --> 19:26.550
比方说这里写个A和B

19:26.550 --> 19:27.430
那么就相当于是

19:28.070 --> 19:29.510
我这边就有了一个

19:29.510 --> 19:31.030
就这个模块里面多了一个A

19:31.030 --> 19:32.150
这个A的值就是1

19:32.790 --> 19:34.710
B的值就是一个函数

19:35.270 --> 19:36.310
你要意思吧

19:36.310 --> 19:37.510
这是居民导入

19:38.870 --> 19:41.430
居民导出也叫做普通导出

19:41.430 --> 19:43.190
居民导入也叫做普通导入

19:44.390 --> 19:45.030
ok

19:45.030 --> 19:46.390
然后下面这种写法

19:46.390 --> 19:48.230
也是一种比较常见的写法

19:48.230 --> 19:49.750
我没有大国号了

19:49.750 --> 19:51.270
没有大国号什么意思呢

19:51.270 --> 19:53.110
就表示我导入的是什么呢

19:53.110 --> 19:54.630
导入的是你的default

19:54.630 --> 19:57.190
我把这个6负责给了这个A

19:57.190 --> 19:58.390
给了这个C

19:58.390 --> 19:59.750
那么这个C就对应到这

20:01.350 --> 20:02.470
这些东西都不要去记

20:02.470 --> 20:03.110
千万不要去记

20:03.110 --> 20:05.750
我就怕你们小老瓜子扛不住

20:05.750 --> 20:06.390
我也扛不住

20:07.350 --> 20:08.230
换个颜色吧

20:12.680 --> 20:14.760
就把这个C就对应到这个default了

20:15.480 --> 20:16.440
没有意思吧

20:16.440 --> 20:17.000
好 又来

20:18.200 --> 20:19.240
这种写法

20:19.240 --> 20:20.520
CAB

20:20.520 --> 20:21.480
啥意思呢

20:21.480 --> 20:22.920
就是我导入的时候

20:22.920 --> 20:24.600
把这个只要是扩好外面的就是

20:25.160 --> 20:26.040
模认导出

20:26.040 --> 20:27.640
对应的是模认导出

20:27.640 --> 20:29.080
C对应到这个default

20:29.720 --> 20:31.080
A对应到哪呢

20:31.080 --> 20:31.800
对应到这里的A

20:32.520 --> 20:34.440
然后B对应到这里的B

20:35.080 --> 20:35.720
没有意思吧

20:35.720 --> 20:36.680
其实也不复杂嘛

20:36.680 --> 20:37.560
对不对

20:37.560 --> 20:38.840
就是这些语法太多

20:39.800 --> 20:40.920
然后下面这个

20:40.920 --> 20:41.880
新号

20:41.880 --> 20:42.600
新号什么意思

20:42.600 --> 20:43.320
就整个这一坨

20:44.600 --> 20:45.640
然后呢

20:45.640 --> 20:46.440
给它取个名字

20:46.440 --> 20:47.000
OS

20:47.000 --> 20:47.960
给它取个名字

20:47.960 --> 20:48.600
OBG

20:48.600 --> 20:49.800
OS关键字

20:49.800 --> 20:51.560
那么就相对是把整个这个模认

20:51.560 --> 20:52.600
导入到OBG

20:53.640 --> 20:55.480
除非你要用模认里面所有东西

20:55.480 --> 20:55.960
否则的话

20:55.960 --> 20:58.280
你不需要这样子写

20:59.880 --> 21:01.080
下面我怎么写重复了

21:03.350 --> 21:03.990
好 接下来呢

21:03.990 --> 21:06.230
我们看一些比较特殊的写法

21:06.230 --> 21:07.910
这些写法就不是很常见了

21:09.350 --> 21:09.830
看一下吧

21:12.280 --> 21:13.480
导入的时候呢

21:13.480 --> 21:14.440
我导入的是A

21:14.440 --> 21:15.560
导入的是A

21:15.560 --> 21:16.040
你看看啊

21:16.040 --> 21:16.680
导入的是A

21:17.400 --> 21:17.800
但是呢

21:17.800 --> 21:19.160
我要给它重新取个名字

21:19.160 --> 21:20.200
因为我这个模访里面

21:20.200 --> 21:21.080
可能有一个变量

21:21.080 --> 21:21.800
名字叫A了

21:21.800 --> 21:23.240
所以说我怕名字重复

21:23.560 --> 21:24.520
给它重新取一个名字

21:24.520 --> 21:25.320
叫Temp1

21:27.480 --> 21:28.040
可不可以

21:28.040 --> 21:28.440
也可以

21:30.120 --> 21:30.360
好

21:30.360 --> 21:31.160
然后呢

21:31.160 --> 21:32.600
B对应到这里的B

21:33.480 --> 21:35.160
它不会改变这边的名字

21:35.160 --> 21:35.960
它只是在这边

21:35.960 --> 21:37.400
从临时取一个名字

21:37.400 --> 21:38.120
Temp2

21:38.120 --> 21:39.560
B应该复杂Temp2

21:40.280 --> 21:41.000
就这么简单

21:42.040 --> 21:43.800
其实你们再自己看一下吧

21:43.800 --> 21:44.680
Default呢

21:45.560 --> 21:46.840
这个Default

21:46.840 --> 21:47.560
然后呢

21:47.560 --> 21:49.000
把它导入到哪呢

21:49.000 --> 21:50.840
一个变量A

21:52.040 --> 21:52.680
原来的意思吧

21:53.320 --> 21:53.880
然后呢

21:54.920 --> 21:55.880
这DefaultA

21:57.320 --> 21:58.120
同时呢

21:58.120 --> 21:58.920
又导入B

21:59.640 --> 22:00.680
它语法很多啊

22:01.240 --> 22:01.880
语法很多

22:03.400 --> 22:03.720
好

22:03.720 --> 22:05.000
下面这个东西先不着急看

22:06.200 --> 22:06.760
接下来

22:06.760 --> 22:07.720
我们来练习一下

22:13.180 --> 22:13.660
现在呢

22:13.660 --> 22:15.100
大家要做个练习啊

22:15.180 --> 22:17.660
刚才你们不是把这个Mass模块导出了吗

22:17.660 --> 22:18.380
对不对

22:18.780 --> 22:20.140
参考文档

22:21.100 --> 22:22.940
然后在index模块里边

22:22.940 --> 22:23.660
导入

22:24.300 --> 22:25.900
直导入这个上这个函数

22:26.940 --> 22:27.660
然后呢

22:27.660 --> 22:29.900
把它运行一遍

22:29.900 --> 22:31.500
就随便传两个字进去

22:31.500 --> 22:32.540
看一下反回结果

22:32.540 --> 22:33.660
输出一下反回结果

22:34.220 --> 22:34.780
来吧

22:34.780 --> 22:35.180
做一下

22:37.180 --> 22:37.740
好没

22:37.740 --> 22:38.060
好

22:38.060 --> 22:39.180
那么接下来我演示一下

22:40.620 --> 22:41.660
我要导入的时候

22:41.660 --> 22:42.540
是不是居民导

22:42.540 --> 22:43.580
我要导入的是什么

22:43.580 --> 22:44.700
是不是居民导入

22:44.940 --> 22:45.580
对不对

22:45.580 --> 22:46.860
那么我们要查一下文档

22:46.860 --> 22:48.220
居民导入有哪些呢

22:48.220 --> 22:49.740
我们是不是可以用这种方式

22:51.020 --> 22:51.740
Import

22:51.740 --> 22:53.660
模块路径是不是点儿鞋杠开头

22:53.660 --> 22:55.100
因为它们在同一个路径啊

22:55.100 --> 22:55.820
同一个下面

22:55.820 --> 22:57.020
所以说点儿鞋杠开头

22:57.020 --> 22:57.740
然后Mass

22:57.740 --> 22:59.180
就一定要写上点儿介式啊

22:59.180 --> 23:00.540
不然拿不到的

23:00.940 --> 23:01.180
好

23:01.180 --> 23:03.020
接下来这个这里边就写的名字

23:03.020 --> 23:04.380
你导出的名字不有两个吗

23:04.380 --> 23:04.860
一个是上

23:04.860 --> 23:05.900
一个是一字二的

23:05.900 --> 23:06.380
对不对

23:06.380 --> 23:07.740
那么我们这里就是上

23:08.860 --> 23:09.100
对吧

23:09.100 --> 23:09.900
我们只需要这个

23:10.940 --> 23:11.180
好

23:11.180 --> 23:11.660
接下来呢

23:11.660 --> 23:13.580
我们是不是可以就运行上

23:13.580 --> 23:13.900
一

23:13.980 --> 23:14.860
传个二

23:14.860 --> 23:15.900
把输出一下呗

23:17.900 --> 23:18.460
没着了

23:19.340 --> 23:20.060
输出一下

23:20.060 --> 23:20.780
就完事了

23:21.900 --> 23:22.220
好

23:22.220 --> 23:23.180
接下来我们来看一下啊

23:24.460 --> 23:25.180
是不是输出了三

23:25.820 --> 23:26.620
就这么简单

23:26.620 --> 23:27.420
还有多复杂了

23:28.300 --> 23:28.460
好

23:28.460 --> 23:29.660
我们再来做一个练习啊

23:30.220 --> 23:31.340
大家跟着我的要求

23:31.340 --> 23:32.460
你练习一下

23:32.460 --> 23:33.580
这里有两个函数

23:33.580 --> 23:33.980
但是呢

23:33.980 --> 23:35.820
我不再使用居民导出了

23:35.820 --> 23:37.500
我要使用默正导出

23:37.500 --> 23:38.940
我默正导出什么呢

23:38.940 --> 23:39.740
一个对象

23:39.740 --> 23:41.500
对对象里边有两个函数

23:41.500 --> 23:41.980
上

23:41.980 --> 23:42.380
一分

23:44.060 --> 23:45.260
一是二的

23:45.260 --> 23:46.140
一分

23:46.140 --> 23:46.860
来练习一下

23:48.060 --> 23:49.020
我把这边先写成

23:49.020 --> 23:49.740
写成这个样子

23:52.150 --> 23:52.550
好

23:52.550 --> 23:53.030
写出来没

23:53.750 --> 23:54.630
先我们来演示一下

23:56.790 --> 23:58.070
是不是要用export

23:58.710 --> 23:59.430
看文档啊

23:59.430 --> 24:00.630
默正导出用的是什么

24:01.430 --> 24:02.310
我里面都看了

24:02.310 --> 24:03.590
我就不用装

24:03.590 --> 24:04.230
我不会了

24:05.110 --> 24:05.910
是不是default

24:05.910 --> 24:06.550
对不对

24:06.550 --> 24:07.830
用这种方式啊

24:07.830 --> 24:08.950
默正导出

24:08.950 --> 24:09.750
然后呢

24:09.750 --> 24:10.310
导出什么

24:10.310 --> 24:11.030
导出一个对象

24:11.030 --> 24:11.990
这个时候两个大夸号

24:11.990 --> 24:12.630
就是对象了

24:13.510 --> 24:14.390
默正导出里边

24:14.390 --> 24:14.950
这两个大夸号

24:14.950 --> 24:15.990
是对象了

24:15.990 --> 24:17.190
导出一个对象

24:17.190 --> 24:18.470
对象里边有两个属性

24:18.470 --> 24:19.590
一个是上

24:19.590 --> 24:20.630
我们可以用数写

24:21.190 --> 24:21.910
数写数写

24:21.910 --> 24:22.310
ab

24:23.190 --> 24:24.870
打回ab

24:25.590 --> 24:25.990
然后呢

24:25.990 --> 24:27.270
用还有一个ex2的

24:29.670 --> 24:29.910
n

24:30.790 --> 24:32.550
打回n除一二的余数

24:32.550 --> 24:33.110
我等下

24:34.790 --> 24:35.830
说到写成两个函数

24:36.390 --> 24:37.270
那么我们比方的

24:37.270 --> 24:38.390
这边要用ex2的

24:38.390 --> 24:39.510
要用这个函数怎么办

24:39.510 --> 24:40.230
来写一下

24:41.350 --> 24:42.390
导入又练习一下

24:42.390 --> 24:43.590
他现在是默正导出了

24:43.590 --> 24:44.230
你一定要注意

24:44.230 --> 24:45.270
这个导出的对象结构

24:45.990 --> 24:47.030
那么这边该怎么来写

24:49.990 --> 24:50.630
好

24:50.630 --> 24:51.190
你写完没

24:52.870 --> 24:53.510
写不出来的话

24:53.510 --> 24:54.230
看一下我这边

24:54.790 --> 24:55.590
那么我们要用

24:55.590 --> 24:56.470
默正导入

24:56.470 --> 24:57.590
就不能用这种方式了

24:57.590 --> 24:58.150
注意啊

24:58.150 --> 24:58.790
有些人认为

24:58.790 --> 24:59.670
这个东西是解构

24:59.670 --> 25:00.390
它不是解构

25:00.390 --> 25:00.950
不要乱说

25:01.350 --> 25:02.230
这个玩意不是解构

25:02.230 --> 25:03.750
这是导入语法

25:04.070 --> 25:05.430
你不能说出现个大国号

25:05.430 --> 25:06.070
就是解构

25:06.070 --> 25:07.270
那一个对象也是大国号

25:07.670 --> 25:09.270
一个函数定义也是大国号

25:09.270 --> 25:09.990
不要乱说了

25:10.870 --> 25:11.430
这个玩意

25:11.430 --> 25:12.070
那么我们这里

25:12.070 --> 25:13.190
要用默正导入啊

25:13.670 --> 25:14.230
比方说这里

25:14.230 --> 25:15.590
等我随便给他取个名字

25:15.590 --> 25:16.790
你看一下文档

25:16.870 --> 25:17.990
默正导入的时候

25:18.870 --> 25:19.190
是不是

25:19.190 --> 25:20.390
这是默正导入对不对

25:20.390 --> 25:21.350
然后这里取个名字

25:21.350 --> 25:22.950
还把default那个东西

25:22.950 --> 25:23.910
复辞给了他

25:23.910 --> 25:24.550
那么这边呢

25:24.550 --> 25:25.350
我们要取个名字

25:25.910 --> 25:28.230
比方说给他取一个就mess

25:30.070 --> 25:31.270
名字随便取

25:31.270 --> 25:32.070
那么就想认为

25:32.070 --> 25:33.030
是把这个对象

25:33.030 --> 25:34.390
是不是复辞给了他

25:34.390 --> 25:35.190
那么我们要用

25:35.190 --> 25:36.310
这个地上怎么用

25:36.310 --> 25:38.310
是不是要用mess点上

25:38.310 --> 25:39.430
你看这里都有提示

25:39.430 --> 25:39.670
对吧

25:39.670 --> 25:40.310
这是一个方法

25:41.110 --> 25:42.310
传入一个1和2

25:43.430 --> 25:44.390
result

25:45.030 --> 25:46.150
输出一个result

25:49.320 --> 25:50.600
好

25:50.600 --> 25:51.560
来 我们来看一下

25:52.360 --> 25:53.640
还是得闹着删

25:53.640 --> 25:54.600
没有问题吧

25:55.480 --> 25:55.960
ok

25:55.960 --> 25:56.600
那么这就是

25:57.960 --> 25:58.920
这些导出方式

25:58.920 --> 25:59.720
很多导出方式

25:59.720 --> 26:00.520
都不要去记

26:00.520 --> 26:01.880
茶园文档解决就行了

26:01.880 --> 26:03.080
其实我们平时用的

26:03.080 --> 26:04.680
并没有那么全

26:04.680 --> 26:05.640
我们平时就是用

26:05.640 --> 26:06.280
启动几个

26:06.760 --> 26:07.640
这里边我都写了

26:07.640 --> 26:08.440
那些是常用的

26:09.000 --> 26:09.480
没关系

26:09.480 --> 26:10.200
你也不用去记

26:10.200 --> 26:11.160
那些是常用的

26:11.160 --> 26:11.800
我们后边做了

26:11.800 --> 26:12.520
很多练习过后

26:12.520 --> 26:13.240
你慢慢就知道了

26:14.680 --> 26:16.520
这些东西都是熟能生巧的

26:16.520 --> 26:18.120
熟练过后自然记忆

26:18.520 --> 26:19.640
非常自然的过程

26:20.680 --> 26:21.240
好 后边呢

26:21.240 --> 26:22.600
我有一些细节给大家说一下

26:23.400 --> 26:24.920
一个是这个

26:26.120 --> 26:27.400
以前不支持

26:27.400 --> 26:28.280
现在支持了

26:29.080 --> 26:29.640
啥意思呢

26:29.640 --> 26:31.160
我们刚才不是说

26:31.160 --> 26:32.680
那个import

26:32.680 --> 26:34.120
那个export

26:34.120 --> 26:35.320
是不是都能必须要写成

26:35.320 --> 26:35.960
顶级代码

26:35.960 --> 26:36.760
你不能写到判断

26:36.760 --> 26:37.880
不能写到循环那边

26:38.600 --> 26:39.320
为什么呢

26:39.320 --> 26:41.320
因为它叫静态依赖

26:42.520 --> 26:43.160
这个概念

26:43.160 --> 26:43.800
我给他说一下

26:45.880 --> 26:47.960
ESM99是静态依赖

26:48.120 --> 26:48.920
而comment介绍呢

26:48.920 --> 26:50.120
叫动态依赖

26:50.120 --> 26:50.840
啥意思啊

26:51.960 --> 26:54.840
静态依赖是要在运行代码之前

26:54.840 --> 26:56.520
就要分析出依赖关系

26:56.520 --> 26:57.480
代码还没有运行

26:57.480 --> 26:58.680
我要知道这个模块

26:59.560 --> 27:00.520
依赖哪些模块

27:01.400 --> 27:02.200
那么这个模块

27:02.200 --> 27:03.320
也没有依赖别的模块

27:04.280 --> 27:05.240
一开始要分析出

27:06.040 --> 27:06.760
这个关系

27:06.760 --> 27:08.040
还不要不着急运行代码

27:08.040 --> 27:09.080
就要分析出这个关系

27:11.240 --> 27:12.440
什么叫动态依赖呢

27:12.440 --> 27:13.960
我是要在代码的运行过程中

27:13.960 --> 27:14.920
比方一个判断

27:14.920 --> 27:15.720
一个循环

27:16.680 --> 27:17.720
一个函数

27:17.800 --> 27:18.920
那我要调用那个函数

27:18.920 --> 27:20.120
里边过后呢

27:20.120 --> 27:21.480
它才会导入别的东西

27:21.480 --> 27:22.760
那么这叫动态依赖

27:23.240 --> 27:24.120
不运行代码的

27:24.120 --> 27:25.240
是不知道依赖关系的

27:25.880 --> 27:26.440
他们这是

27:26.440 --> 27:27.880
他们两个非常大的一个区别

27:27.880 --> 27:29.160
后面我们讲面试题的时候呢

27:29.160 --> 27:30.600
还会讲到这两个模块

27:30.600 --> 27:31.080
和标准啊

27:31.080 --> 27:32.600
这里面会有一些很多的面试题

27:32.600 --> 27:33.240
现在不着急

27:33.240 --> 27:34.040
我们现在只管

27:34.040 --> 27:35.320
怎么去跟我们以后

27:35.880 --> 27:36.680
使用相关的

27:37.320 --> 27:38.920
简单说一下静态依赖和动态依赖

27:40.280 --> 27:40.760
然后呢

27:40.760 --> 27:41.880
就出现了一个问题

27:41.880 --> 27:44.280
就是在ESM99官方模块

27:44.280 --> 27:45.240
和标准里面了

27:45.240 --> 27:46.680
它是不允许你把

27:46.840 --> 27:47.960
导入代码

27:47.960 --> 27:49.240
写到判断呀

27:49.240 --> 27:50.520
循环函数里面的

27:51.800 --> 27:52.840
当然这样子的

27:52.840 --> 27:54.360
会带来一些问题

27:54.600 --> 27:55.640
因此呢官方呢

27:56.920 --> 27:57.560
后来呢

27:57.560 --> 27:59.240
终于更新了一下标准

27:59.240 --> 28:01.000
它出了一个新的语法

28:01.000 --> 28:03.320
叫做Import函数

28:03.320 --> 28:05.240
是不是跟那个Require函数差不多

28:06.680 --> 28:07.160
是不是

28:07.160 --> 28:07.720
差不多的

28:07.720 --> 28:09.720
那么这里写的模块都进

28:09.720 --> 28:11.000
这个函数呢

28:11.000 --> 28:12.280
它就可以写到判断里面了

28:12.280 --> 28:13.560
它就可以写到别的地方了

28:13.560 --> 28:14.040
好

28:14.040 --> 28:15.080
我们来用一下这种方式

28:17.930 --> 28:18.650
比方说

28:18.650 --> 28:20.810
我等待了一秒钟之后

28:22.170 --> 28:23.370
我等待一秒钟

28:23.370 --> 28:24.570
一秒钟之后呢

28:24.570 --> 28:26.650
我再去导入这个Mesh模块

28:26.650 --> 28:27.850
然后再去运行这个

28:28.410 --> 28:29.850
我不是一开始导入啊

28:29.850 --> 28:31.050
如果说没有这个函数里的

28:31.050 --> 28:32.170
你会怎么写

28:32.170 --> 28:33.050
你只能这样子写

28:33.770 --> 28:34.890
先就把它导入进来

28:35.610 --> 28:37.370
因为你不能碰碰到其他地方

28:37.370 --> 28:38.650
我们再写个Timeout

28:41.700 --> 28:42.900
一秒钟之后

28:42.900 --> 28:43.860
我再运行

28:43.860 --> 28:44.980
运行力对吧

28:44.980 --> 28:45.540
Mesh

28:46.180 --> 28:46.580
点

28:47.700 --> 28:48.180
上

28:49.300 --> 28:51.060
老师判断用什么

28:51.060 --> 28:52.180
用EZO的吧

28:57.910 --> 28:59.190
你在这样子写

29:01.910 --> 29:03.030
一秒钟之后

29:03.030 --> 29:03.590
刷新一下

29:04.710 --> 29:05.350
对吧

29:05.350 --> 29:05.990
没问题吧

29:07.110 --> 29:07.830
但是呢

29:07.830 --> 29:08.950
你肯定不能这样子写

29:11.500 --> 29:13.180
是直接给你报愚法错误了

29:13.180 --> 29:14.380
他都不知道你在写啥

29:14.380 --> 29:15.980
这个玩意必须是顶级的

29:15.980 --> 29:17.420
必须是顶级带嘛

29:20.360 --> 29:22.280
如果说你遇到一种情况

29:23.240 --> 29:25.560
那么我们必须要在这里边写导入了

29:25.640 --> 29:26.840
那以前是办不到的

29:26.840 --> 29:27.640
现在可以了

29:27.640 --> 29:29.160
因为官方标准更新到之后了

29:29.160 --> 29:30.440
它允许利用这种写法

29:30.440 --> 29:30.680
好

29:30.680 --> 29:31.960
咱们来看一下这种写法

29:33.000 --> 29:34.280
叫动态导入

29:34.280 --> 29:35.800
因此现在EZ模久了

29:35.800 --> 29:37.080
它既支持静态的

29:37.080 --> 29:37.960
也支持动态的

29:37.960 --> 29:39.640
不过我们用了最多的还是静态的

29:40.520 --> 29:40.920
好

29:40.920 --> 29:41.960
动态导入怎么导入

29:43.240 --> 29:45.240
首先这里我们要导入这个Mesh模块

29:45.240 --> 29:45.880
怎么导入呢

29:45.880 --> 29:47.560
我们就使用Import

29:49.720 --> 29:52.440
Import.Mesh.解释到写权

29:53.720 --> 29:55.400
这就是一个函数调用了

29:56.280 --> 29:59.000
你得知道这个函数返回的是啥

29:59.000 --> 30:01.960
所以说我觉得这个函数返回的应该是这个东西

30:02.920 --> 30:04.040
实际上不是啊

30:04.040 --> 30:05.160
它返回的是什么

30:05.160 --> 30:07.160
它返回的是一个Promise

30:08.200 --> 30:09.320
一个异部

30:09.320 --> 30:10.680
任务

30:10.680 --> 30:12.840
为什么要它返回Promise呢

30:13.480 --> 30:16.040
因为它要去夹载这个文件

30:16.040 --> 30:18.360
夹载文件是需要一段时间的

30:18.360 --> 30:20.600
那为什么勾着结实不需要呢

30:20.600 --> 30:25.000
因为勾着结实是在服务器环境里边拉不一样的

30:25.320 --> 30:25.880
不用管

30:25.880 --> 30:28.040
那么在总之在这个环境里面必须

30:28.040 --> 30:29.640
它返回的肯定是一个Promise

30:30.360 --> 30:31.720
那返回Promise应该怎么办

30:32.920 --> 30:34.280
所以有两种做法

30:34.280 --> 30:35.640
首先是用Z

30:36.520 --> 30:38.120
Z里面第一个参数呢

30:38.120 --> 30:40.360
是不是Promise的完成结果

30:40.360 --> 30:41.640
我们用Module吧

30:43.980 --> 30:44.620
M吧

30:45.260 --> 30:48.540
这个是不是Promise的完成之后的数据

30:48.540 --> 30:50.300
那么完成之后的数据是啥呀

30:50.300 --> 30:51.100
它这里写了

30:51.100 --> 30:53.420
完成之后的数据为模块对象

30:53.420 --> 30:54.860
因此这个M是啥

30:55.020 --> 30:59.260
这个M就是这个模块对象

31:01.260 --> 31:02.540
它完成之后

31:02.540 --> 31:03.340
夹载模块

31:03.340 --> 31:04.140
夹载完成之后

31:04.140 --> 31:05.980
它就达到整个这个模块对象

31:06.860 --> 31:07.660
所以说呢

31:07.660 --> 31:08.860
如果说你用这种写法

31:09.420 --> 31:11.340
那么我这个M里面呢

31:11.340 --> 31:12.780
是不是就有什么Default

31:12.780 --> 31:13.580
对不对

31:13.580 --> 31:15.980
那么这个Default里面是不是就有这个EaseOrd

31:17.580 --> 31:17.980
对了

31:18.620 --> 31:19.580
我们把Default呢

31:19.580 --> 31:20.380
复制给什么

31:20.380 --> 31:21.420
复制给Mass

31:26.040 --> 31:26.840
对看一下

31:26.840 --> 31:27.320
行不行

31:27.880 --> 31:28.440
是不是可以

31:31.110 --> 31:31.750
是不是可以的

31:32.470 --> 31:33.190
好

31:33.190 --> 31:34.390
这是这个

31:34.390 --> 31:35.190
把它写一下

31:35.190 --> 31:36.470
用这种形式写一下

31:36.470 --> 31:36.950
我等你

31:39.130 --> 31:40.010
写好没

31:40.010 --> 31:40.330
好

31:40.330 --> 31:41.130
好了之后呢

31:41.130 --> 31:42.170
我们还可以用别的方式

31:42.170 --> 31:43.770
这用的方式太多了

31:43.770 --> 31:44.250
太多了

31:46.730 --> 31:47.850
比方说吧

31:47.850 --> 31:48.730
我这边的

31:50.810 --> 31:51.850
可是不是可以用

31:51.850 --> 31:53.370
夜市期的Aways呀

31:53.370 --> 31:54.330
我可以等待你啊

31:54.330 --> 31:54.730
对不对

31:55.610 --> 31:56.810
我是不是可以等待你

31:56.810 --> 31:57.690
那写出来

31:57.690 --> 31:58.490
我不用证了

31:59.130 --> 32:00.250
我等待你

32:00.330 --> 32:00.970
Aways

32:01.690 --> 32:02.650
等待之后

32:02.650 --> 32:04.090
等待你这个Promise完成

32:04.090 --> 32:04.890
完成之后呢

32:04.890 --> 32:06.650
我把你完成的数据呢

32:06.650 --> 32:07.290
放到哪呢

32:07.290 --> 32:07.770
放到这

32:08.330 --> 32:08.810
可不可以

32:08.810 --> 32:10.250
也不一样嘛对不对

32:10.250 --> 32:10.890
那么当然呢

32:10.890 --> 32:12.250
你用Aways过后这个函数

32:12.250 --> 32:13.450
得标几位而sync

32:14.730 --> 32:15.450
都一样嘛

32:16.410 --> 32:17.050
我这里呢

32:18.010 --> 32:19.530
完成之后把整个模块

32:19.530 --> 32:20.890
是不是放给了这个M

32:22.010 --> 32:22.330
对不对

32:22.890 --> 32:23.130
好

32:23.130 --> 32:23.690
接下来呢

32:23.690 --> 32:25.290
M.Default是不拿到它

32:27.050 --> 32:29.130
那Mass.EaseOrd是不拿到它

32:33.480 --> 32:33.960
好了

32:33.960 --> 32:35.000
那么这就是咱们的

32:35.000 --> 32:37.080
夜市Module模块的标准

32:37.080 --> 32:37.480
最后呢

32:37.480 --> 32:38.920
再说两个系列

32:38.920 --> 32:39.320
一个是

32:39.880 --> 32:40.680
导入的代码

32:40.680 --> 32:41.320
不仅要在

32:43.000 --> 32:44.360
不能放到代码块里边

32:44.360 --> 32:45.880
而且要在代码的顶端

32:45.880 --> 32:46.520
什么意思啊

32:46.520 --> 32:47.800
除了这种导入

32:47.800 --> 32:48.840
静态导入的代码

32:48.840 --> 32:49.480
就这种代码

32:50.120 --> 32:51.160
必须要放到最上面

32:52.040 --> 32:53.320
那如果说有导入多个模块

32:54.680 --> 32:55.480
那么你就这样子

33:04.650 --> 33:05.130
这样子写

33:05.210 --> 33:06.170
总之要在最顶部

33:06.650 --> 33:07.050
实际上呢

33:07.050 --> 33:08.410
你如果说你写到这呢

33:08.410 --> 33:09.690
它倒是也不会爆错

33:10.170 --> 33:11.610
它倒是不会爆错啊

33:11.610 --> 33:12.410
不会爆错了

33:12.410 --> 33:12.970
但是呢

33:12.970 --> 33:14.490
它会自动的给你提到顶部

33:14.970 --> 33:15.850
它认为你这个是

33:15.850 --> 33:17.130
不符合标准的写法

33:17.130 --> 33:17.450
但是呢

33:17.450 --> 33:18.410
浏览器给你纠错

33:18.970 --> 33:19.770
放到顶部

33:19.770 --> 33:20.810
它不会爆错

33:20.810 --> 33:21.210
但是你

33:21.770 --> 33:22.250
自己呢

33:22.250 --> 33:23.210
还是注意一下

33:23.210 --> 33:24.250
写到旧缺顶部

33:24.250 --> 33:25.370
是规范性写法

33:26.170 --> 33:27.530
这是静态导入的代码

33:27.530 --> 33:28.810
动态导入就无所谓了

33:29.770 --> 33:30.250
另外呢

33:30.250 --> 33:31.770
就是导入的代码呢

33:31.770 --> 33:32.810
绑进了符号市场

33:32.810 --> 33:33.770
量不可更改

33:33.850 --> 33:35.290
比方说你导入的是个Mesh

33:35.850 --> 33:37.450
那么这个Mesh你是不能改的

33:37.450 --> 33:38.490
你是不能改的

33:41.060 --> 33:41.700
你看一下

33:41.700 --> 33:42.980
是不是直接爆错了

33:42.980 --> 33:44.100
说你不能更改

33:44.100 --> 33:45.540
导入的符号都是常量

33:45.540 --> 33:46.340
你不能更改

33:46.340 --> 33:48.340
就注意一下这个细节就完事了

33:49.460 --> 33:49.780
好了

33:49.780 --> 33:52.180
那么这就是我们这一部分的

33:52.180 --> 33:52.740
一个指示

33:52.740 --> 33:53.060
最后呢

33:53.060 --> 33:54.020
我们来做一些练习题

33:56.890 --> 33:57.530
练习题1

33:58.890 --> 34:00.810
让你写一个ESM模块

34:00.810 --> 34:01.690
ESM module模块

34:01.690 --> 34:02.490
多练习一下

34:02.490 --> 34:03.610
因为这个官方模块

34:03.610 --> 34:04.010
模块标准

34:04.570 --> 34:05.610
它不复杂

34:05.610 --> 34:06.410
很简单

34:07.130 --> 34:09.210
我们只要查个文档解决完事了

34:09.770 --> 34:10.410
主要是呢

34:10.410 --> 34:11.530
就是我们要多练一下

34:11.530 --> 34:12.170
熟悉它

34:13.690 --> 34:15.450
让你导出一个这么一个模块

34:15.930 --> 34:16.490
简单吧

34:16.490 --> 34:17.210
就导出一个A

34:18.250 --> 34:19.370
首先你要判断用具名

34:19.370 --> 34:20.170
还是用默认

34:20.890 --> 34:21.850
那肯定是用具名

34:21.850 --> 34:24.010
默认的属性是Default

34:24.010 --> 34:24.650
来写呗

34:24.650 --> 34:25.370
你们来写一下

34:26.650 --> 34:27.690
看一下你们能够写出

34:27.690 --> 34:28.730
多少种导出方式

34:29.610 --> 34:30.730
多少种导出方式

34:33.380 --> 34:33.620
好

34:33.620 --> 34:34.420
我给大家写一下

34:35.140 --> 34:38.020
这是练习题

34:39.060 --> 34:41.540
我们就写一个模块

34:41.540 --> 34:42.660
就写它模块呢

34:43.620 --> 34:44.740
就写个

34:45.620 --> 34:47.300
我也不知道写它模块

34:48.420 --> 34:48.980
好

34:48.980 --> 34:49.620
那么这个模块

34:49.620 --> 34:50.980
我们专门来负责导出

34:51.860 --> 34:53.780
然后一会我们肯定还要一个模块

34:53.780 --> 34:55.140
您这个时间解释

34:55.140 --> 34:56.100
我们来这个模块

34:56.100 --> 34:56.900
要负责导入

34:58.580 --> 34:59.780
右边负责导出

34:59.780 --> 35:00.580
左边负责导入

35:01.460 --> 35:02.740
然后建立一个页面吧

35:02.900 --> 35:03.860
页面

35:04.580 --> 35:05.620
因为我要测试

35:05.620 --> 35:07.220
我要测试吗

35:07.220 --> 35:08.580
我得有个页面

35:09.860 --> 35:10.820
复制过来

35:10.820 --> 35:12.260
这就不用解释了

35:12.260 --> 35:13.060
好

35:13.060 --> 35:16.300
那么这边导出的时候呢

35:16.300 --> 35:20.120
我要导出的目标

35:20.120 --> 35:21.640
是不是一个这个玩意儿

35:21.640 --> 35:22.360
一个A

35:22.360 --> 35:24.200
这是我们导出的目标

35:28.950 --> 35:30.470
那么我们就要用具名导出

35:30.470 --> 35:31.510
那有多少种写法

35:31.510 --> 35:32.790
你们查别文档啊

35:32.790 --> 35:33.830
查别文档的话

35:33.830 --> 35:35.110
应该你们写出来的写法

35:35.110 --> 35:35.670
比我还多

35:35.670 --> 35:37.350
我看一下我的文档

35:37.430 --> 35:39.350
我可以写导出一个A等于1

35:39.350 --> 35:40.390
这样子可以

35:40.390 --> 35:41.830
这是一种写法

35:41.830 --> 35:43.670
然后呢

35:43.670 --> 35:47.430
我可以先定义一个A

35:47.430 --> 35:51.290
然后再export

35:51.290 --> 35:54.250
这是一种写法

35:54.250 --> 35:57.610
然后还能不能写出来

35:57.610 --> 36:00.170
我可以先

36:00.170 --> 36:01.770
我可以定一个B

36:01.770 --> 36:02.810
不是

36:02.810 --> 36:04.330
我可以定一个B

36:04.330 --> 36:05.610
我可以定一个B

36:05.610 --> 36:06.890
我可以定一个B

36:07.850 --> 36:09.210
不是A

36:09.210 --> 36:09.770
但是呢

36:09.770 --> 36:10.890
我导出的时候呢

36:10.890 --> 36:13.050
把它改成A

36:13.050 --> 36:14.090
也可以

36:14.090 --> 36:16.330
反正最终实现的效果都是这样子

36:16.330 --> 36:18.650
这种写法就很少见了

36:18.650 --> 36:20.490
那么这是导出

36:20.490 --> 36:21.370
导入呢

36:21.370 --> 36:22.730
另外一个来做一下

36:22.730 --> 36:23.690
再另外一个模块

36:23.690 --> 36:24.810
导入这个模块

36:24.810 --> 36:26.730
把这个模块打印出来

36:26.730 --> 36:27.610
你看一下

36:27.610 --> 36:29.690
能够有多少种导入的方式

36:29.690 --> 36:32.170
好了没

36:32.170 --> 36:33.770
那我来练习一下

36:33.770 --> 36:34.970
导入的时候呢

36:35.050 --> 36:36.170
首先

36:36.170 --> 36:38.570
导入 import 静态导入嘛

36:38.570 --> 36:40.330
import B

36:40.330 --> 36:46.170
from the test.js

36:46.170 --> 36:49.210
我们输出一下这个B

36:49.210 --> 36:53.320
看一下行不行

36:53.320 --> 37:07.000
open with the name server

37:07.000 --> 37:08.840
它这爆出了吗

37:08.840 --> 37:11.640
它说

37:11.640 --> 37:12.280
它说什么意思

37:12.280 --> 37:12.840
这个句话

37:12.840 --> 37:15.240
它说这个 test.js 里边

37:15.240 --> 37:16.760
没有提供

37:16.840 --> 37:19.800
名字为B的导出

37:19.800 --> 37:21.000
这里爆错了

37:21.000 --> 37:22.360
我这里应该是导入A

37:22.360 --> 37:23.240
对不对

37:23.240 --> 37:27.130
导入了A

37:27.130 --> 37:28.570
看一下

37:28.570 --> 37:29.530
是不是输出了E

37:29.530 --> 37:30.570
没问题吧

37:30.570 --> 37:31.770
这是一种写法

37:31.770 --> 37:32.570
我们再来看一下

37:32.570 --> 37:33.530
有多少种写法

37:33.530 --> 37:34.890
我能写出多少种

37:34.890 --> 37:35.450
第二呢

37:35.450 --> 37:37.450
我可以写一个

37:37.450 --> 37:40.090
A给它重新命个名字

37:40.090 --> 37:40.570
B

37:40.570 --> 37:42.650
随便给它拨名

37:42.650 --> 37:46.090
from the test.js

37:46.090 --> 37:48.650
输出一下B

37:48.730 --> 37:50.090
看一下

37:50.090 --> 37:51.370
也没问题

37:51.370 --> 37:51.690
对吧

37:51.690 --> 37:53.290
这是第二种写法

37:53.290 --> 37:55.690
我们再来看一下

37:55.690 --> 37:56.250
这些东西

37:56.250 --> 37:58.010
都是为了让人联系

37:58.010 --> 37:58.810
平时我们写字

37:58.810 --> 38:01.130
要写一种就行了

38:01.130 --> 38:03.690
还可以写啥

38:03.690 --> 38:05.850
我还可以把所有的东西

38:05.850 --> 38:09.610
全部导入

38:09.610 --> 38:12.250
test.js

38:12.250 --> 38:14.490
输出一下

38:14.490 --> 38:14.730
好

38:14.730 --> 38:16.570
你看一下

38:16.570 --> 38:17.770
导入就是个对象

38:17.770 --> 38:18.410
看对象里面

38:18.410 --> 38:19.370
输出一个属性

38:19.450 --> 38:20.970
其他东西不用管

38:26.220 --> 38:27.180
好了

38:27.180 --> 38:29.820
就没啥了

38:29.820 --> 38:30.620
最后来我们再看一下

38:30.620 --> 38:31.500
练习第二

38:31.500 --> 38:32.300
看一下练习第二

38:32.300 --> 38:33.660
还有一个综合练习

38:33.660 --> 38:35.100
输写一个ESM M模块

38:35.100 --> 38:35.980
查阅文档

38:35.980 --> 38:38.860
导出下面的对象

38:38.860 --> 38:41.500
导出这个东西

38:41.500 --> 38:42.540
来吧

38:42.540 --> 38:43.580
看一下练习第二

38:43.580 --> 38:46.620
大家自己做一下

38:46.620 --> 38:47.260
自己先做

38:47.260 --> 38:49.660
暂停视频

38:49.660 --> 38:50.860
我就这点

38:50.940 --> 39:06.920
复制暂停过来了

39:06.920 --> 39:07.320
好

39:07.320 --> 39:08.920
我们可能看导出

39:08.920 --> 39:11.400
他要导出这么一个东西

39:11.400 --> 39:15.450
我就写一种写法就行了

39:15.450 --> 39:16.250
导出这个东西

39:16.250 --> 39:17.850
你看有几个句名导出

39:17.850 --> 39:18.490
是不是有三个

39:18.490 --> 39:19.130
那简单

39:19.130 --> 39:20.570
export

39:20.570 --> 39:22.010
conceptA等于

39:22.010 --> 39:23.930
第一个export

39:23.930 --> 39:25.850
conceptB等于2

39:25.850 --> 39:26.970
这是第二个

39:26.970 --> 39:28.090
第三个export

39:28.090 --> 39:29.850
conceptB等于方形

39:29.850 --> 39:32.170
我也可以直接写个方形

39:32.170 --> 39:33.770
B

39:33.770 --> 39:35.050
这是第三个

39:35.050 --> 39:35.770
然后呢

39:35.850 --> 39:36.330
export

39:36.330 --> 39:37.210
一个模认导出

39:37.210 --> 39:38.810
default

39:38.810 --> 39:39.370
一个对象

39:39.370 --> 39:40.250
对象里边A

39:40.250 --> 39:40.970
1

39:40.970 --> 39:41.370
B

39:41.370 --> 39:42.010
2

39:42.010 --> 39:42.330
对吧

39:42.330 --> 39:45.190
就写完了

39:45.190 --> 39:45.430
好

39:45.430 --> 39:48.390
那么导入呢

39:48.390 --> 39:49.590
有这么几道题

39:49.590 --> 39:50.310
第一道题

39:50.310 --> 39:52.310
仅导入default

39:52.310 --> 39:52.710
那么呢

39:52.710 --> 39:53.430
平时就是

39:53.430 --> 39:54.390
第二练习二

39:54.390 --> 39:55.270
其实就是演练

39:55.270 --> 39:57.830
我们平时写的一些代码

39:57.830 --> 39:58.870
使导入default

39:58.870 --> 40:00.710
那么是不是我们只要取一个名字就行了

40:00.710 --> 40:01.510
不要用test

40:01.510 --> 40:02.070
from

40:02.070 --> 40:02.710
del

40:02.710 --> 40:03.270
test

40:03.270 --> 40:03.830
del

40:03.830 --> 40:05.350
ts

40:05.350 --> 40:06.310
输出test

40:06.470 --> 40:07.590
你看一下

40:07.590 --> 40:08.630
运行一下

40:08.630 --> 40:13.690
译面

40:13.690 --> 40:17.900
嗯

40:17.900 --> 40:21.750
看到了吗

40:21.750 --> 40:22.870
这里写C

40:22.870 --> 40:23.910
写错

40:23.910 --> 40:25.190
B已经存在了

40:25.190 --> 40:26.950
我们再说

40:26.950 --> 40:27.350
好

40:27.350 --> 40:28.470
是不是

40:28.470 --> 40:29.670
default里面是不是A等于1

40:29.670 --> 40:30.630
B等于2

40:30.630 --> 40:32.310
default

40:32.310 --> 40:32.790
是吧

40:32.790 --> 40:33.110
好

40:33.110 --> 40:34.710
接下来第二题

40:34.710 --> 40:36.710
仅导入A和B

40:36.710 --> 40:37.510
不导入default

40:37.510 --> 40:39.510
只导入A和B

40:39.510 --> 40:40.390
那么怎么写

40:40.390 --> 40:44.650
importAB

40:44.650 --> 40:45.210
是吧

40:45.210 --> 40:45.850
因为写多了

40:45.850 --> 40:46.490
你慢慢熟悉了

40:46.490 --> 40:50.680
也没有以后会写很多很多的

40:50.680 --> 40:51.000
好

40:51.000 --> 40:52.280
接下来说出A和N

40:52.280 --> 40:52.600
对吧

40:52.600 --> 40:53.880
那么这个A和N是这里的

40:53.880 --> 40:55.400
A和N

40:55.400 --> 40:55.720
好

40:55.720 --> 40:56.520
接下来再看

40:56.520 --> 40:57.320
下一题

40:57.320 --> 41:03.460
同时导入default A和B

41:03.460 --> 41:04.420
完了

41:04.420 --> 41:05.460
这个是default

41:05.460 --> 41:06.820
注意这个写前面

41:06.820 --> 41:07.620
写前面

41:07.620 --> 41:09.940
不能你把它写到这个这边了

41:09.940 --> 41:11.140
default A和B

41:11.140 --> 41:11.380
对吧

41:11.380 --> 41:13.540
就完了

41:13.540 --> 41:15.540
看一下

41:15.540 --> 41:16.580
没问题吧

41:16.580 --> 41:16.820
好

41:16.820 --> 41:17.140
接下来

41:17.140 --> 41:18.260
带来

41:18.260 --> 41:19.940
导入整个模块对象

41:19.940 --> 41:21.220
是不是用信号

41:23.320 --> 41:24.520
import信号

41:24.520 --> 41:24.920
s

41:24.920 --> 41:25.640
test

41:25.640 --> 41:27.080
那么这个test

41:27.080 --> 41:27.880
就表示的是

41:27.880 --> 41:29.080
整个模块对象了

41:29.080 --> 41:31.080
出出test

41:31.080 --> 41:33.080
好

41:33.080 --> 41:33.720
看一下

41:33.720 --> 41:37.080
因为整个A B C

41:37.080 --> 41:38.920
default

41:38.920 --> 41:39.720
C是个函数

41:39.720 --> 41:40.440
default

41:40.440 --> 41:42.120
好

41:42.120 --> 41:42.680
再来

41:42.680 --> 41:44.200
不导入任何东西

41:44.200 --> 41:45.640
只是运行一下这个模块

41:45.640 --> 41:48.280
那就太简单了

41:48.280 --> 41:50.120
import

41:50.120 --> 41:51.640
这些

41:51.640 --> 41:52.680
这个第二题

41:53.400 --> 41:54.840
出得非常好

41:54.840 --> 41:57.720
因为是我出的

41:57.720 --> 41:58.280
主要的目的

41:58.280 --> 41:59.160
因为这个第二题

41:59.160 --> 42:00.280
就是练习到了

42:00.280 --> 42:02.200
我们平时使用的导入导出

42:02.200 --> 42:03.320
就这么一些

42:03.320 --> 42:06.280
没有别的了

42:06.280 --> 42:09.160
最后来我们来看一个综合练习

42:09.160 --> 42:09.800
综合练习

42:09.800 --> 42:10.440
其实都是你们

42:10.440 --> 42:11.640
这个是你们做过的

42:11.640 --> 42:12.760
我们来体验一下

42:12.760 --> 42:13.720
用了模块化

42:13.720 --> 42:15.160
思想过后

42:15.160 --> 42:17.080
它会做成什么样子

42:17.080 --> 42:19.080
效果在这

42:19.080 --> 42:19.720
你们做过的

42:19.720 --> 42:22.200
一看就知道了

42:22.680 --> 42:24.360
是不是你们说过的

42:24.360 --> 42:25.080
帐号密码

42:25.080 --> 42:25.480
帐号呢

42:25.480 --> 42:27.000
这里大家就输入这个测试

42:27.000 --> 42:28.840
你们如果说之前注册了的话

42:28.840 --> 42:30.120
那么就用你们注册了帐号

42:30.120 --> 42:30.920
如果没有注册的话

42:30.920 --> 42:32.040
就输入这个

42:32.040 --> 42:33.160
U的内

42:33.160 --> 42:34.600
一码123123

42:34.600 --> 42:37.000
东东成功

42:37.000 --> 42:38.280
如果说帐号密码错过的话

42:38.280 --> 42:39.400
就说这个

42:39.400 --> 42:42.280
我就做这么一个简单的事情

42:42.280 --> 42:45.320
那么来体验一下模块化开发

42:45.320 --> 42:46.840
大家要跟着我一点点做

42:46.840 --> 42:48.440
因为你们虽然说

42:48.440 --> 42:50.840
知道了模块化的语法

42:50.840 --> 42:51.720
但是呢

42:51.800 --> 42:53.320
你们怎么去划分模块

42:53.320 --> 42:55.800
这才是需要功夫的地方

42:55.800 --> 42:57.160
而这个东西呢

42:57.160 --> 42:59.000
不是一时半会就能搞定的

42:59.000 --> 43:00.680
就像程序思维这样子

43:00.680 --> 43:02.520
它不是一时半会就能搞定的

43:02.520 --> 43:03.880
所以说你们现在要做的事情

43:03.880 --> 43:05.000
不要心急

43:05.000 --> 43:06.040
你跟着老师

43:06.040 --> 43:07.480
老师会跟你讲

43:07.480 --> 43:09.480
你怎么去划分模块

43:09.480 --> 43:12.200
当然这个也不是说一个固定的方式

43:12.200 --> 43:14.440
它有很多种划分方式

43:14.440 --> 43:15.720
我们不用去纠结

43:15.720 --> 43:19.640
这个东西老师跟你们说

43:19.720 --> 43:22.680
慢慢的就会体验到一种感觉了

43:22.680 --> 43:24.760
接下来我们这里有一个练习素材

43:24.760 --> 43:26.520
素材的就是一个静态页面

43:29.080 --> 43:29.800
是一个静态页面

43:29.800 --> 43:31.800
没有任何功能的

43:31.800 --> 43:34.040
接下来我们来划分一下

43:34.040 --> 43:36.520
首先我们在这里建立一个文念甲

43:36.520 --> 43:37.800
叫做综合练习

43:37.800 --> 43:41.080
那边也跟着做练习

43:41.080 --> 43:42.600
先把文念甲结构先好

43:42.600 --> 43:44.840
然后我们把素材烤贝进来

43:44.840 --> 43:47.930
这是我们的素材

43:48.010 --> 43:49.210
我看一下

43:49.210 --> 43:51.210
能不能直接拖过来

43:51.210 --> 43:57.460
不行

43:57.460 --> 43:58.020
好

43:58.020 --> 43:59.620
这边的素材烤过来了

43:59.620 --> 44:00.980
然后其他文念甲我们不看了

44:00.980 --> 44:02.980
我们只看这个综合练习的文念甲

44:02.980 --> 44:06.330
然后的话

44:06.330 --> 44:07.930
为了让你们看得清楚

44:07.930 --> 44:09.930
我干脆还是把这个功能

44:09.930 --> 44:16.760
我这个都会卡住

44:16.760 --> 44:18.760
我打开一个文念甲都会卡住

44:18.760 --> 44:20.760
把这个拖进来了

44:20.760 --> 44:21.960
好

44:21.960 --> 44:23.960
这样子看得清楚一点

44:23.960 --> 44:24.760
好

44:24.760 --> 44:25.800
现在就是没有介式

44:25.800 --> 44:26.840
其他都有了

44:26.840 --> 44:28.840
然后我们这里新建个介式文件

44:29.000 --> 44:29.960
文件甲结构

44:29.960 --> 44:31.240
所以这个文件甲结构里面

44:31.240 --> 44:33.000
我们不再写普通的介式了

44:33.000 --> 44:35.480
而且都是模块化的介式

44:35.480 --> 44:37.880
我们这里首先建立一个入口文件

44:37.880 --> 44:38.600
入口文件的名字

44:38.600 --> 44:39.960
我们通常用英代的介式

44:39.960 --> 44:42.200
或者是Made.介式都一样

44:42.200 --> 44:43.160
都行

44:43.160 --> 44:44.360
Made.介式

44:44.360 --> 44:49.560
这就是介式入口模块

44:49.560 --> 44:52.520
那么我们在页面上只需要去引用这个模块就行了

44:52.520 --> 44:54.360
页面上其他东西都不用管了

44:54.360 --> 44:58.360
只需要引用这个介式

44:58.360 --> 45:01.620
src

45:01.700 --> 45:02.340
介式

45:02.340 --> 45:03.700
Made.介式

45:03.700 --> 45:04.180
Type

45:04.180 --> 45:06.020
再加上Module

45:07.300 --> 45:07.620
好

45:07.620 --> 45:08.660
大家跟着我做

45:08.660 --> 45:09.860
先把这个东西

45:09.860 --> 45:10.980
这个结构写号

45:10.980 --> 45:12.180
我们输出一个123

45:12.180 --> 45:14.020
然后运营起来看一下

45:14.020 --> 45:22.260
能不能得到一个正确的结果

45:22.260 --> 45:23.940
是不是输出了123

45:23.940 --> 45:25.300
对不对

45:25.300 --> 45:27.060
接下来再看

45:27.060 --> 45:28.100
这边

45:28.100 --> 45:31.160
弄过来吧

45:31.160 --> 45:31.400
好

45:31.400 --> 45:32.280
做出来没

45:32.280 --> 45:34.520
接下来我们要去分一些模块

45:34.520 --> 45:36.360
你看我们整个登录功能里面

45:36.360 --> 45:37.320
是不是要远程

45:37.320 --> 45:39.240
有远程请求

45:39.240 --> 45:40.200
对不对

45:40.200 --> 45:41.720
那么这个远程请求

45:41.720 --> 45:43.080
在我们将来的开发中

45:43.080 --> 45:45.160
我们经常会这样来做

45:45.160 --> 45:47.400
我们会在这里面建立一个文件夹

45:47.400 --> 45:49.400
叫做API

45:49.400 --> 45:49.960
叫什么意思呢

45:49.960 --> 45:53.640
就是获取远程接口

45:53.640 --> 45:56.200
那么这里边可以有很多的介式模块

45:56.200 --> 45:57.960
每个介式模块做的事情不一样

45:57.960 --> 45:59.160
比方说有些介式模块

45:59.160 --> 46:01.800
它负责的是跟用户之间的远程通信

46:01.800 --> 46:02.600
有些介式模块

46:02.600 --> 46:04.760
负责的是跟电影啊

46:04.760 --> 46:07.160
文章啊新闻的远程通信

46:07.240 --> 46:09.160
有些介式模块是跟评论的远程通信

46:09.160 --> 46:09.560
对吧

46:09.560 --> 46:11.720
每个模块它做的事情不一样

46:11.720 --> 46:13.960
总之这些模块都有一个共同的目的

46:13.960 --> 46:17.080
就是封装远程通信

46:17.080 --> 46:19.640
封装的好处在于我们在别的地方

46:19.640 --> 46:20.920
反射用了远程通信的地方

46:20.920 --> 46:22.600
我们都在从这个模块里面找

46:22.600 --> 46:25.400
可以非常方便地进行附用

46:25.400 --> 46:27.000
我们在这里新建一个文件

46:27.000 --> 46:28.600
我们目前的只有一个模块

46:28.600 --> 46:32.120
叫做user的介式

46:32.120 --> 46:34.920
这个模块来做什么事情呢

46:34.920 --> 46:45.610
负责和用户相关的远程寻求

46:45.610 --> 46:46.890
那么这个模块里面

46:46.890 --> 46:48.250
目前没有太多方法

46:48.250 --> 46:49.290
可能将来有注册啊

46:49.290 --> 46:50.410
有些乱七八糟的事情

46:50.410 --> 46:52.330
但是那目前就一个方法

46:52.330 --> 46:53.770
就是登录

46:53.770 --> 46:56.970
那么我们把它做一个居民导出

46:56.970 --> 47:01.930
居民导出一个登录方法

47:01.930 --> 47:03.370
你们尝试着写一下

47:03.370 --> 47:05.690
利用你们学过的网络知识

47:05.770 --> 47:08.890
以及我们这些科学的ES module的知识

47:08.890 --> 47:09.610
来写一下

47:09.610 --> 47:12.010
虽然说这个项目这个案例很小

47:12.010 --> 47:14.490
但基本上就已经能够体现出

47:14.490 --> 47:15.610
你们以后开发的时候

47:15.610 --> 47:17.770
是一个什么样的状态

47:17.770 --> 47:21.130
好 大家先视频写一下啊

47:21.130 --> 47:21.770
好了没

47:21.770 --> 47:23.850
好 那么接下来我来给大家写一点

47:23.850 --> 47:26.090
我这里居民导出就用export

47:26.090 --> 47:28.010
是不是直接定义方法就完成了

47:28.010 --> 47:28.650
什么方法

47:28.650 --> 47:29.930
locking

47:29.930 --> 47:31.210
你给我传两个

47:31.210 --> 47:33.290
一个是locking id

47:33.290 --> 47:36.090
你一个是locking password

47:36.090 --> 47:38.010
一个是帐号 一个密码

47:38.010 --> 47:38.730
你给我传进来

47:38.730 --> 47:39.930
我来帮你登录

47:39.930 --> 47:42.730
登录的时候是不是我们要用废棋

47:42.730 --> 47:43.210
对不对

47:43.210 --> 47:44.250
这边要用废棋

47:44.250 --> 47:45.850
请求地址呢

47:45.850 --> 47:47.610
跟你们之前的请求地址是一样的

47:47.610 --> 47:54.040
接口文档在这

47:54.040 --> 47:57.640
那么这里边登录

47:57.640 --> 47:59.320
登录请求的地址是

47:59.320 --> 48:02.120
atbs.study.edu.com

48:02.120 --> 48:03.640
然后API user login

48:03.640 --> 48:06.920
然后请求消息体里边是一个接证

48:06.920 --> 48:07.800
接证格式

48:07.800 --> 48:09.240
传统locking id login password

48:09.240 --> 48:10.520
这些都是没学过的

48:10.600 --> 48:12.600
我不带税数了

48:12.600 --> 48:14.760
然后我们这里就来写直接写

48:14.760 --> 48:15.560
请求什么呢

48:15.560 --> 48:23.640
请求atbs.study.edu.com

48:23.640 --> 48:26.760
API user login

48:26.760 --> 48:28.760
请求这个地址

48:28.760 --> 48:30.040
然后后面是不是要一个配置

48:30.040 --> 48:31.640
因为它是post请求

48:31.640 --> 48:32.280
要有一配置

48:32.280 --> 48:33.560
所以说配置的话

48:33.560 --> 48:35.960
请求方法message

48:35.960 --> 48:40.680
是不是要一些post

48:40.680 --> 48:42.680
请求参数

48:42.760 --> 48:43.960
就是请求头

48:43.960 --> 48:45.320
所以加上一个

48:45.320 --> 48:51.340
你们之前写过的content type

48:51.340 --> 48:51.980
为什么

48:51.980 --> 48:52.860
IPD can行

48:58.380 --> 48:59.820
然后请求体

48:59.820 --> 49:01.260
请求体是一个字幕

49:01.260 --> 49:02.380
我要把它构造成一个字幕刷

49:02.380 --> 49:04.140
这个字幕刷的格式是接证的

49:04.140 --> 49:05.100
那么我也就说

49:05.100 --> 49:06.460
我要写个对象

49:06.460 --> 49:08.140
这个对象有两个属性

49:08.140 --> 49:08.940
locking id

49:08.940 --> 49:09.740
locking password

49:09.740 --> 49:10.300
对吧

49:10.300 --> 49:12.380
然后要把对象转换成接证

49:12.380 --> 49:13.100
怎么转换

49:13.100 --> 49:13.900
是用接证

49:13.900 --> 49:14.700
是捐给肥

49:17.540 --> 49:18.980
那么这就是非起方法

49:20.260 --> 49:20.580
好

49:20.580 --> 49:22.020
非起方法完了之后

49:22.980 --> 49:24.740
我们这里要等待它完成

49:24.740 --> 49:25.540
对不对

49:25.540 --> 49:26.740
当然也可以用Zing

49:26.740 --> 49:27.460
这个函数

49:27.460 --> 49:27.940
有Zing

49:30.500 --> 49:31.620
想用的结果

49:31.620 --> 49:33.700
我们首先把这个想应结果接证

49:33.700 --> 49:34.660
接证格式化

49:35.300 --> 49:36.180
因为服务器想应的

49:36.180 --> 49:37.540
我们不然的话读出来就是一个

49:38.020 --> 49:38.820
字节流

49:38.820 --> 49:41.380
我们要把个字节流转换成接证格式

49:41.380 --> 49:42.100
于是这个

49:42.100 --> 49:43.140
这又是个promise

49:43.140 --> 49:44.500
这个promise完成之后

49:45.220 --> 49:47.540
就达到一个接证格式的对象了

49:48.260 --> 49:48.660
对不对

49:49.700 --> 49:50.420
好

49:50.420 --> 49:52.020
那么这个接证格式的对象

49:52.020 --> 49:53.460
因为我们知道服务器那边

49:54.820 --> 49:56.420
服务器那边它返回出来的东西

49:57.460 --> 49:57.860
你看吧

49:59.060 --> 50:01.140
服务器那边返回出来的东西

50:01.140 --> 50:02.420
是这个样子的

50:03.780 --> 50:05.380
我们就先弄一个正确的吧

50:09.460 --> 50:09.940
123

50:09.940 --> 50:10.580
123

50:10.580 --> 50:10.900
发手

50:12.420 --> 50:12.660
好

50:12.660 --> 50:13.700
你看服务器返回的东西

50:13.700 --> 50:14.660
是不是这个样子的

50:14.660 --> 50:15.780
我们要这个东西干嘛呢

50:15.780 --> 50:16.500
要这个东西

50:16.500 --> 50:17.540
我们现在也没什么用

50:17.700 --> 50:19.140
我们现在就要这个东西

50:19.940 --> 50:20.340
对吧

50:20.340 --> 50:21.140
这个对象

50:21.140 --> 50:21.540
所以说呢

50:21.540 --> 50:23.860
我要从拿到这个整个对象之后呢

50:23.860 --> 50:26.660
我要把它拿拿拿这个对象

50:26.660 --> 50:29.060
所以说我们这里还可以再进一步些

50:29.060 --> 50:29.620
我们现在呢

50:29.620 --> 50:30.020
目前呢

50:30.020 --> 50:30.420
就拿到

50:31.220 --> 50:32.020
可以等待一下吧

50:32.580 --> 50:33.300
这是个promise

50:33.300 --> 50:34.020
我们等待一下它

50:34.420 --> 50:34.820
那个位置

50:35.540 --> 50:36.020
等待它

50:36.020 --> 50:36.500
那么这里呢

50:36.500 --> 50:37.700
就必须要标准而成

50:39.140 --> 50:39.460
好

50:39.460 --> 50:40.100
那么这边呢

50:40.100 --> 50:41.380
我们就拿到了什么

50:41.380 --> 50:42.340
响应的结果

50:43.860 --> 50:44.100
好

50:44.100 --> 50:45.300
那么这个响应的结果

50:45.300 --> 50:45.620
其实

50:46.340 --> 50:47.060
其实就是这个

50:48.500 --> 50:49.460
整个这个对象

50:50.420 --> 50:51.140
附子给的它

50:52.500 --> 50:52.900
对吧

50:53.540 --> 50:53.780
好

50:53.780 --> 50:54.420
那么接下来呢

50:54.420 --> 50:56.020
我要从这个respares里面

50:56.020 --> 50:57.060
说拿这个data数箱

50:57.460 --> 50:58.500
然后会respares

50:58.500 --> 50:58.980
叫data

51:00.260 --> 51:00.500
好

51:00.500 --> 51:01.060
测试一下

51:01.060 --> 51:01.620
测试一下

51:03.460 --> 51:03.780
好

51:03.780 --> 51:04.980
那我们要测试一下吧

51:04.980 --> 51:05.700
这个模块

51:06.260 --> 51:07.700
我们在index-media-json里面

51:07.700 --> 51:08.580
导入一下这个模块

51:08.580 --> 51:09.300
来测试一下

51:10.980 --> 51:11.380
导入

51:12.020 --> 51:12.980
它是个具名导出

51:12.980 --> 51:14.660
所以说我们要用具名导入

51:14.740 --> 51:15.620
gapi

51:18.010 --> 51:18.890
user

51:18.890 --> 51:19.530
叫gps

51:20.650 --> 51:20.890
好

51:20.890 --> 51:21.930
这边什么名字

51:21.930 --> 51:22.250
方法

51:22.250 --> 51:22.730
叫mauking

51:22.730 --> 51:22.970
对吧

51:23.770 --> 51:24.490
mauking

51:24.490 --> 51:24.650
好

51:24.650 --> 51:25.450
接下来测试一下

51:25.930 --> 51:27.050
我们的账号

51:27.050 --> 51:27.770
随便写一个

51:28.250 --> 51:28.810
随便写一个

51:29.370 --> 51:30.570
密码随便写一个

51:31.210 --> 51:31.530
好

51:31.530 --> 51:32.410
它是个返回了

51:32.410 --> 51:32.970
是个promise

51:32.970 --> 51:33.850
我们来认

51:33.850 --> 51:34.810
看一下拿到的数据

51:34.810 --> 51:35.450
是不是正确的

51:36.650 --> 51:37.050
输出

51:37.690 --> 51:38.010
对它

51:39.690 --> 51:39.850
好

51:39.850 --> 51:40.730
接下来看一下吧

51:47.930 --> 51:48.650
是不是now

51:48.650 --> 51:49.610
正确的对吧

51:49.610 --> 51:50.330
是不是now

51:50.330 --> 51:51.530
now应该对了对吧

51:51.530 --> 51:52.330
它登录失败

51:53.210 --> 51:53.530
对不对

51:54.250 --> 51:54.490
好

51:54.490 --> 51:54.970
接下来呢

51:54.970 --> 51:56.570
我们再给它一个正确的

51:58.010 --> 51:58.730
user name

51:59.930 --> 52:00.490
123

52:00.490 --> 52:01.050
123

52:02.010 --> 52:02.330
看一下

52:03.210 --> 52:03.930
说拿到这个

52:04.490 --> 52:05.130
一个对象了

52:06.090 --> 52:06.490
对不对

52:07.210 --> 52:08.170
没问题吧

52:08.170 --> 52:08.490
好

52:08.490 --> 52:09.450
那么这个就挑通了

52:09.450 --> 52:10.410
这个模块就写完了

52:11.930 --> 52:12.090
好

52:12.090 --> 52:12.570
接下来

52:12.570 --> 52:14.410
有了这个API模块之后呢

52:15.290 --> 52:17.290
我们现在就可以进行远程通信了

52:18.170 --> 52:19.450
给你一个用户之间

52:19.450 --> 52:20.890
将来如果说这个界面

52:21.690 --> 52:22.890
改了跟它有关系吗

52:22.890 --> 52:23.450
没关系

52:24.170 --> 52:25.610
如果说我们接口改了

52:25.610 --> 52:27.530
那么只需要改这个模块就行了

52:27.530 --> 52:27.770
对吧

52:27.770 --> 52:29.770
所以我们把分开有很多很多的好处

52:29.770 --> 52:30.490
变为附用

52:30.490 --> 52:31.210
变为维护

52:32.330 --> 52:32.570
好

52:32.570 --> 52:33.770
接下来我们再来写一个模块

52:36.580 --> 52:37.860
在JS5念甲里边

52:37.860 --> 52:38.580
新鲜的文件

52:39.460 --> 52:42.660
我们把它叫做个啥呢

52:43.780 --> 52:44.260
叫做个

52:47.460 --> 52:48.020
叫做

52:50.020 --> 52:50.500
登录吧

52:51.140 --> 52:52.100
就叫我登录模块

52:54.840 --> 52:56.280
它不是叫做登录吗

52:56.280 --> 52:57.240
这个模块里边

52:58.360 --> 52:58.760
不

52:58.760 --> 52:59.400
我翻

52:59.400 --> 53:00.280
不好意思

53:00.280 --> 53:00.760
换一个模块

53:00.760 --> 53:01.400
叫DOMS

53:02.680 --> 53:04.200
该模块做的事情很简单

53:05.240 --> 53:10.840
导出所有可能用到的DOM元素

53:11.640 --> 53:11.880
对吧

53:11.880 --> 53:12.920
它跟页面相关了

53:13.960 --> 53:17.000
因为我们页面上有些动物元素是有可能会用到的

53:17.000 --> 53:17.720
那么将来呢

53:17.720 --> 53:19.640
我们把它全部封放到这个模块里边

53:19.640 --> 53:20.440
好处在于

53:20.440 --> 53:22.200
将来别的模块要需要用DOM的时候

53:22.200 --> 53:23.480
直接从这个模块里面继续

53:24.760 --> 53:26.600
如果说我们以后要获取更多的DOM

53:26.600 --> 53:27.720
或者获取的方式有变

53:28.360 --> 53:30.200
我们只需要去维护这个模块就行了

53:31.080 --> 53:31.960
非常简单

53:31.960 --> 53:34.520
那么这里边我们有哪些动物需要获得呢

53:34.520 --> 53:36.120
这里边反而是有ID的

53:37.240 --> 53:38.200
我们都要获取

53:39.720 --> 53:40.520
反而是有ID的

53:40.520 --> 53:41.240
这个缝

53:41.240 --> 53:42.680
我现在就给你们出题

53:42.680 --> 53:43.560
这个缝要获取

53:43.560 --> 53:44.440
这个音铺蛇要获取

53:44.440 --> 53:45.480
这个音铺蛇要获取

53:45.480 --> 53:46.600
这个要获取

53:46.600 --> 53:48.520
来你们来写一下这个模块

53:50.280 --> 53:52.040
用什么导出你们自己订

53:52.120 --> 53:53.000
用多人导出

53:53.000 --> 53:54.520
还是用居民导出你们自己订

53:56.280 --> 53:56.920
写好没

53:56.920 --> 53:58.600
就让我来给你们讲一下

53:58.600 --> 53:59.160
export

54:00.360 --> 54:01.720
那我这里就用居民导出

54:01.720 --> 54:03.080
因为我有很多的动物元素

54:03.960 --> 54:04.840
好这边呢

54:04.840 --> 54:06.200
我们就

54:06.200 --> 54:06.920
计算跟const

54:07.800 --> 54:08.840
第一个动物元素呢

54:08.840 --> 54:11.080
是form.container

54:11.800 --> 54:13.480
那么我们就直接用document

54:14.360 --> 54:15.560
get element id

54:16.600 --> 54:17.800
form.container

54:18.440 --> 54:19.640
还有第一个动物元素

54:20.280 --> 54:21.560
一共有这么四个对吧

54:22.280 --> 54:22.680
第二个呢

54:22.680 --> 54:23.720
就是这个user name

54:26.540 --> 54:27.020
user name

54:29.500 --> 54:30.300
第三个呢

54:30.300 --> 54:31.580
就是user password

54:33.610 --> 54:34.090
password

54:34.970 --> 54:36.890
然后第四个是btnsubmit

54:39.260 --> 54:40.380
btnsubmit

54:41.100 --> 54:41.420
OK

54:42.220 --> 54:43.900
动物元素全部在这个模块里面

54:45.340 --> 54:46.540
你看我们一步一步

54:46.540 --> 54:48.060
每个模块非常的简单

54:48.540 --> 54:49.420
然后组合起来

54:49.420 --> 54:50.460
就形成我们的功能了

54:51.340 --> 54:51.820
接下来

54:51.820 --> 54:52.860
我们再来建一个文件

54:53.420 --> 54:54.220
这个文件呢

54:54.220 --> 54:55.820
叫做logging

54:56.940 --> 54:58.460
这个文件就是负责

54:58.540 --> 55:00.700
和页面相关的登录功能

55:05.080 --> 55:07.160
它需要导出一个函数

55:07.960 --> 55:08.840
该函数

55:09.880 --> 55:10.440
用于

55:10.840 --> 55:12.120
就雕用该函数

55:13.080 --> 55:13.800
该函数

55:14.440 --> 55:16.920
会自动获取

55:17.720 --> 55:18.360
文本

55:19.000 --> 55:19.880
框的值

55:21.000 --> 55:21.560
完成

55:22.200 --> 55:22.680
登录

55:23.240 --> 55:24.680
这个函数它会控制界面

55:24.680 --> 55:26.360
它会跟界面进行交互

55:27.720 --> 55:28.680
没有事件注册啊

55:28.680 --> 55:29.560
这里边没有

55:29.560 --> 55:30.760
目前没有事件注册

55:31.320 --> 55:33.240
它只是负责跟界面交互

55:33.240 --> 55:33.960
一定要用

55:33.960 --> 55:34.440
我就

55:35.160 --> 55:35.960
登录

55:35.960 --> 55:38.360
然后这里我写个abc

55:38.360 --> 55:39.320
这里写个123

55:39.320 --> 55:40.440
那么一定要用这个函数

55:40.440 --> 55:41.640
它就会获取到abc

55:41.640 --> 55:42.520
会获取到123

55:42.520 --> 55:43.160
然后去登录

55:44.120 --> 55:44.920
就这么个意思

55:48.260 --> 55:50.180
好那么同学们写一下

55:50.180 --> 55:51.060
上天视频写一下

55:52.020 --> 55:53.300
看一下你们会写成什么样子

55:55.590 --> 55:56.790
好了

55:56.790 --> 55:57.350
如果说啊

55:57.350 --> 55:57.990
我再说一遍

55:57.990 --> 55:58.870
如果说像

55:58.870 --> 55:59.990
当然看那个课程

55:59.990 --> 56:00.710
如果说中途

56:00.710 --> 56:02.390
你写不出来没关系的

56:02.390 --> 56:04.390
但是你就能听我讲

56:04.470 --> 56:05.830
讲了之后你一定要去写

56:05.830 --> 56:06.550
你不要说讲了

56:06.550 --> 56:07.590
哦我懂了我就不写了

56:09.430 --> 56:10.710
写不写了出来

56:11.830 --> 56:14.710
是唯一判断你懂没懂的

56:15.350 --> 56:16.070
唯一方式

56:17.110 --> 56:17.670
你懂没懂

56:17.670 --> 56:18.710
你不要自己感觉

56:18.710 --> 56:19.750
感觉不到的

56:19.750 --> 56:20.950
感觉全是幻觉

56:20.950 --> 56:21.990
一定要自己去写

56:23.510 --> 56:24.390
好那么这里导出

56:24.390 --> 56:25.190
首先我要选择

56:25.190 --> 56:26.070
到底是居民导出

56:26.070 --> 56:27.110
还是默论导出

56:29.190 --> 56:29.590
都可以

56:29.590 --> 56:30.150
其实都可以

56:30.150 --> 56:31.270
我这就用默论吧

56:31.270 --> 56:32.230
反正也没有怎么

56:32.230 --> 56:33.750
这里没有练习到默论

56:33.910 --> 56:34.950
就默论导出吧

56:34.950 --> 56:35.590
那么默论导出

56:35.590 --> 56:36.310
其实让这个函数

56:36.310 --> 56:37.430
是可以不取名字的

56:38.230 --> 56:39.030
因为他只需要

56:39.030 --> 56:40.310
需要表达试就行了

56:40.310 --> 56:41.670
取名字有什么意义呢

56:41.670 --> 56:42.870
反正名字都会变成default

56:44.230 --> 56:45.030
好那么这里呢

56:45.030 --> 56:46.470
我给大家传入两个参数

56:47.030 --> 56:47.910
没有参数

56:47.910 --> 56:49.030
这个函数是没有参数的

56:49.750 --> 56:50.790
他需要怎么账号

56:50.790 --> 56:51.510
这里过去

56:51.510 --> 56:52.310
只要什么密码

56:52.310 --> 56:52.870
这里过去

56:53.430 --> 56:54.550
好那么我们现在第一步

56:54.550 --> 56:55.350
就遇到一个问题

56:56.550 --> 56:58.630
获取当前的账号密码

56:59.670 --> 57:00.390
那是不是要

57:01.110 --> 57:01.910
拿动物

57:01.910 --> 57:02.550
动物在哪

57:02.550 --> 57:03.590
是不是在另一个模块里边

57:04.710 --> 57:06.070
好那么我们就获取

57:08.940 --> 57:09.580
把所有动物

57:09.580 --> 57:10.300
全部导致进来

57:10.300 --> 57:11.340
我们都可能都要用的

57:14.620 --> 57:16.620
doms.js

57:20.440 --> 57:21.480
好接下来

57:21.480 --> 57:22.840
获取当前账号

57:25.110 --> 57:26.070
怎么获取当前账号

57:27.750 --> 57:28.950
是不是doms里边

57:28.950 --> 57:32.550
什么username.value

57:33.750 --> 57:34.150
对吧

57:35.270 --> 57:35.910
username

57:37.670 --> 57:38.470
然后再来一个

57:38.470 --> 57:39.750
user password

57:41.270 --> 57:43.190
然后就叫做login id

57:43.190 --> 57:47.240
就叫做login password

57:48.280 --> 57:48.920
doms

57:49.560 --> 57:50.600
user password

57:51.160 --> 57:51.800
.value

57:52.280 --> 57:53.400
所以拿到当前的账号

57:53.800 --> 57:54.360
账号了

57:54.360 --> 57:55.480
然后我们判断一下

57:55.480 --> 57:56.520
看你有没有写

57:56.520 --> 57:57.320
如果说你这个玩意写

57:57.320 --> 57:58.120
都没写是空的

57:58.120 --> 57:58.520
那不行

58:00.040 --> 58:02.120
我们也可以判断一下

58:03.400 --> 58:05.800
做一些简单的验证

58:06.680 --> 58:07.320
判断一下

58:07.320 --> 58:08.840
如果说login id为空

58:08.840 --> 58:09.560
那怎么办呢

58:10.120 --> 58:11.240
我就adult

58:13.640 --> 58:15.080
请填写账号

58:15.960 --> 58:16.840
然后人调

58:16.840 --> 58:17.480
结束方法

58:18.680 --> 58:21.640
好如果说你的账号不为空

58:21.640 --> 58:22.840
但是密码为空的话

58:22.840 --> 58:24.440
那我就请填写密码

58:26.390 --> 58:27.030
结束方法

58:29.720 --> 58:30.200
那样就吧

58:31.080 --> 58:31.960
来我们测试一下

58:33.000 --> 58:33.720
这是login

58:33.720 --> 58:34.760
现在运行有效果吗

58:34.760 --> 58:35.400
肯定没效果

58:35.400 --> 58:36.200
因为我这个方法

58:36.200 --> 58:37.000
都没有调用

58:37.000 --> 58:37.560
对不对

58:37.560 --> 58:38.280
我在那个

58:38.840 --> 58:40.200
主模块里边导入它

58:42.120 --> 58:43.720
导入这个login.js

58:43.720 --> 58:45.400
因为它目前是默认导出

58:45.400 --> 58:47.000
所以说我们得这样的写

58:47.000 --> 58:47.960
不能有大功耗了

58:48.760 --> 58:49.880
为了方便测试

58:50.360 --> 58:51.560
我这里把这个login

58:52.440 --> 58:53.560
保存到window里边

58:53.560 --> 58:54.680
为什么要保存到window里边

58:54.680 --> 58:55.720
因为它现在不污染

58:55.720 --> 58:56.440
全局变亮了

58:56.440 --> 58:58.360
导致我在这边测试的时候

58:58.360 --> 58:59.320
雕不了这个login

59:00.520 --> 59:01.240
有这么一个问题

59:02.440 --> 59:03.640
我不知道保存到window了吗

59:04.520 --> 59:06.200
windowlogin.login

59:06.200 --> 59:07.560
这里写出了位置

59:11.000 --> 59:11.560
看着

59:11.560 --> 59:12.600
这里不是一个login吗

59:13.240 --> 59:13.560
对不对

59:14.120 --> 59:14.280
好

59:14.280 --> 59:15.160
我们来试试一下

59:15.160 --> 59:16.520
这边我们写个abce

59:16.520 --> 59:18.520
写个123login

59:19.880 --> 59:20.520
没问题

59:20.520 --> 59:21.800
如果说我们这里不写的话

59:23.000 --> 59:24.360
要让我请填写账号

59:25.160 --> 59:26.280
那么这里不写的话

59:26.280 --> 59:27.800
那我就这里写了

59:27.800 --> 59:28.360
这里不写

59:31.220 --> 59:32.180
请填写密码

59:32.180 --> 59:32.580
对吧

59:32.580 --> 59:33.860
就可以用这种方式来测试

59:34.340 --> 59:35.060
好来吧

59:35.940 --> 59:36.660
接着往后做

59:37.380 --> 59:38.580
做了一些验证之后

59:38.580 --> 59:40.100
发现这些验证全部通过了

59:40.100 --> 59:40.820
因为没通过的话

59:40.820 --> 59:41.380
就返回了

59:41.380 --> 59:42.180
方法就结束了

59:43.300 --> 59:44.660
那么我们还要做什么呢

59:45.380 --> 59:46.500
还要做登录

59:47.140 --> 59:47.860
怎么登录呢

59:47.860 --> 59:49.700
是不是要远程请求

59:51.700 --> 59:52.340
远程请求是不是

59:52.340 --> 59:53.460
我们要用到另一个

59:54.900 --> 01:00:00.180
叫做from api user.js

01:00:01.060 --> 01:00:03.220
这边写上login

01:00:03.860 --> 01:00:04.900
那么那个login方法

01:00:04.900 --> 01:00:05.940
跟这个就不一样

01:00:05.940 --> 01:00:07.540
这是API里边的login

01:00:08.420 --> 01:00:09.380
如果说有些同学说

01:00:09.380 --> 01:00:10.420
他如果说这个方法

01:00:10.420 --> 01:00:11.460
用具名导书的时候

01:00:11.460 --> 01:00:12.340
这里有了名字

01:00:12.340 --> 01:00:13.700
这个名字是不是跟这个重复了

01:00:13.700 --> 01:00:14.260
那怎么办

01:00:14.340 --> 01:00:15.860
把这里改个名字边

01:00:15.860 --> 01:00:17.700
用APIlogin吧

01:00:17.700 --> 01:00:18.020
对吧

01:00:18.020 --> 01:00:19.140
你换个名字就行吧

01:00:19.140 --> 01:00:21.060
之后用它的话就用APIlogin

01:00:21.060 --> 01:00:22.260
这些东西都好说

01:00:24.260 --> 01:00:25.700
好远程请求

01:00:26.260 --> 01:00:27.380
是不是我们要调那个方法

01:00:28.500 --> 01:00:28.980
login

01:00:28.980 --> 01:00:30.420
它要传两个参数进去

01:00:30.420 --> 01:00:31.700
一个是login id

01:00:31.700 --> 01:00:32.180
传进去

01:00:32.180 --> 01:00:33.220
一个是login password的

01:00:33.220 --> 01:00:34.580
所以它反复就是promise

01:00:35.940 --> 01:00:36.340
怎么办

01:00:36.900 --> 01:00:37.540
是不是要等待

01:00:38.180 --> 01:00:38.900
oh wait

01:00:38.900 --> 01:00:40.500
那这个方法是不是要变成 async

01:00:43.700 --> 01:00:45.140
好那么这里呢

01:00:45.140 --> 01:00:45.620
得到一下

01:00:47.620 --> 01:00:50.100
这是远程响应的数据

01:00:51.860 --> 01:00:52.820
好我们这里输出一下

01:00:54.260 --> 01:00:55.780
接下来我们在这边又来测试

01:00:57.060 --> 01:00:59.460
又来调用这边写个随便写个

01:00:59.460 --> 01:01:01.220
随便写个login

01:01:01.220 --> 01:01:01.540
看一下

01:01:03.060 --> 01:01:03.700
得到什么大

01:01:04.100 --> 01:01:05.220
说明登录示范

01:01:05.220 --> 01:01:05.780
U的内

01:01:06.420 --> 01:01:06.900
123

01:01:06.900 --> 01:01:07.220
123

01:01:10.060 --> 01:01:10.860
得到一个对象了

01:01:10.860 --> 01:01:11.660
说明登录成功

01:01:12.700 --> 01:01:13.180
是不是

01:01:13.180 --> 01:01:14.380
那么我们这里说很简单的

01:01:14.380 --> 01:01:15.500
判断一下

01:01:15.500 --> 01:01:17.420
如果说res有值

01:01:17.900 --> 01:01:18.540
登录成功

01:01:19.580 --> 01:01:20.620
登录

01:01:20.620 --> 01:01:21.900
用这个吧

01:01:21.900 --> 01:01:23.180
登录成功

01:01:23.740 --> 01:01:25.260
然后呢欢迎你

01:01:25.900 --> 01:01:26.300
谁呢

01:01:27.900 --> 01:01:28.380
把这个

01:01:29.420 --> 01:01:31.100
nickname给他放进去

01:01:32.220 --> 01:01:32.700
对吧

01:01:32.700 --> 01:01:33.500
else

01:01:33.500 --> 01:01:34.780
如果说登录示范的话

01:01:34.780 --> 01:01:35.260
就输出

01:01:36.380 --> 01:01:40.710
登录示范

01:01:40.710 --> 01:01:41.670
好那么

01:01:41.670 --> 01:01:42.630
我们再来看一下

01:01:45.980 --> 01:01:47.180
username

01:01:47.180 --> 01:01:48.940
填写123123

01:01:48.940 --> 01:01:49.980
调用login方法

01:01:51.660 --> 01:01:52.220
欢迎你

01:01:52.700 --> 01:01:53.180
好

01:01:53.180 --> 01:01:53.580
来

01:01:53.660 --> 01:01:54.620
来个错误的

01:01:54.620 --> 01:01:55.740
调用方法

01:01:55.740 --> 01:01:56.380
登录示范

01:01:57.420 --> 01:01:57.900
对吧

01:01:57.900 --> 01:01:59.180
那么功能基本上就完成了

01:01:59.740 --> 01:02:01.020
其实还有一些

01:02:03.100 --> 01:02:04.060
小的细节

01:02:04.060 --> 01:02:05.180
什么细节呢

01:02:05.180 --> 01:02:05.740
就是

01:02:05.740 --> 01:02:07.340
因为这个登录需要一段时间

01:02:08.620 --> 01:02:09.180
对吧

01:02:09.180 --> 01:02:10.940
比方说我们把时间说花张一点

01:02:10.940 --> 01:02:11.980
说一个小时

01:02:11.980 --> 01:02:13.020
登录需要一段时间

01:02:13.020 --> 01:02:14.460
这个登录过程需要一个小时

01:02:15.020 --> 01:02:16.220
那如果说在一个小时内

01:02:16.220 --> 01:02:17.740
用户不停的点这个登录按钮

01:02:17.740 --> 01:02:19.420
是不是也不停的去登录啊

01:02:19.420 --> 01:02:20.460
发生很多个请求

01:02:20.460 --> 01:02:21.660
所以说一般来情况下了

01:02:21.660 --> 01:02:23.180
我们会做这么一点处理

01:02:23.340 --> 01:02:24.380
怎么处理呢

01:02:24.380 --> 01:02:26.380
它如果说目前正在登录的话

01:02:26.380 --> 01:02:28.540
你就不能再重新调这个方法

01:02:28.540 --> 01:02:29.260
那我咋做呢

01:02:29.260 --> 01:02:30.380
其实非常简单啊

01:02:30.380 --> 01:02:31.500
我又写上这么一个

01:02:33.980 --> 01:02:34.380
辩量

01:02:35.660 --> 01:02:35.980
叫做

01:02:35.980 --> 01:02:36.620
意思

01:02:36.620 --> 01:02:37.500
login

01:02:37.500 --> 01:02:38.220
你

01:02:38.220 --> 01:02:39.500
适访正在登录中

01:02:40.860 --> 01:02:41.900
way force

01:02:43.100 --> 01:02:45.900
当前适访正在登录中

01:02:45.900 --> 01:02:47.260
这个辩量你随便定义

01:02:47.260 --> 01:02:48.300
你不用怕无阵权局

01:02:48.300 --> 01:02:49.500
根本不会无阵权局的

01:02:50.380 --> 01:02:51.740
因为这是模块化

01:02:51.740 --> 01:02:52.700
你不要让内部辩量

01:02:52.700 --> 01:02:53.740
外面也用不了

01:02:53.740 --> 01:02:54.700
也不会暴露给外面

01:02:54.700 --> 01:02:55.580
就是这个模块里边

01:02:55.580 --> 01:02:57.260
随便去定义一些权局的

01:02:57.260 --> 01:02:58.300
辅助你去完成它

01:02:59.740 --> 01:03:00.620
那么这里表示

01:03:00.620 --> 01:03:01.580
当时在登录中

01:03:01.580 --> 01:03:02.860
如果说调这个方法的时候

01:03:02.860 --> 01:03:03.260
判断

01:03:03.900 --> 01:03:05.260
如果说正在登录中

01:03:05.900 --> 01:03:06.540
我就结束了

01:03:08.220 --> 01:03:10.860
正在登录中我就结束了

01:03:10.860 --> 01:03:12.860
只有你没有正在登录的时候

01:03:12.860 --> 01:03:14.460
我才进入后面的逻辑

01:03:14.460 --> 01:03:16.060
那么在进入后面的逻辑之前

01:03:16.060 --> 01:03:17.420
我首先就把它设置为去

01:03:20.040 --> 01:03:20.760
把它设置为去

01:03:21.640 --> 01:03:22.040
表示

01:03:22.680 --> 01:03:23.400
正在登录中了

01:03:23.400 --> 01:03:25.480
要等我把这一套登录完了过后

01:03:25.480 --> 01:03:26.920
你下一次这个函数才能运行

01:03:28.680 --> 01:03:30.760
这种非常常见的一种做法

01:03:30.760 --> 01:03:32.360
就是设置一个状态

01:03:33.400 --> 01:03:35.000
一开始就是没有登录

01:03:35.000 --> 01:03:36.040
那就有正常运行

01:03:36.040 --> 01:03:36.840
判断进不去

01:03:37.400 --> 01:03:38.600
你只要目前正在登录

01:03:38.600 --> 01:03:39.640
这个函数没运行完

01:03:40.200 --> 01:03:41.640
那么这个东西就是为处了

01:03:41.640 --> 01:03:42.920
你下一次再调这个函数

01:03:42.920 --> 01:03:43.640
它发现它失去

01:03:44.440 --> 01:03:45.960
那就不会做任何事

01:03:47.240 --> 01:03:47.640
好

01:03:47.640 --> 01:03:48.200
那么我就登录

01:03:48.200 --> 01:03:49.080
登录

01:03:49.080 --> 01:03:50.360
等你登录完了过后

01:03:50.440 --> 01:03:51.400
我再把一只Login

01:03:52.440 --> 01:03:53.240
设为Force

01:03:54.440 --> 01:03:56.200
这是一种非常常见的处理方式

01:03:58.120 --> 01:03:58.440
好

01:03:58.440 --> 01:03:59.000
那么这个

01:03:59.000 --> 01:04:00.360
当然不会影响这种效果

01:04:00.360 --> 01:04:01.320
你们可以去测试一下

01:04:02.440 --> 01:04:04.040
然后我们还可以去做一些改变

01:04:04.040 --> 01:04:05.960
比方说正在登录的过程中的时候

01:04:06.520 --> 01:04:08.680
我把这个按钮的文字变成登录中

01:04:09.240 --> 01:04:10.440
那么我们是不是可以获取到

01:04:10.440 --> 01:04:12.760
DOMS DTN上面面词的Value

01:04:12.760 --> 01:04:15.320
然后复制为登录中

01:04:16.280 --> 01:04:16.680
对吧

01:04:17.480 --> 01:04:19.320
然后登录完成之后

01:04:20.280 --> 01:04:23.160
我再把它重新复制为登录

01:04:24.520 --> 01:04:24.760
好

01:04:24.760 --> 01:04:26.200
大家看一下这个效果

01:04:26.200 --> 01:04:26.920
你要说这里

01:04:26.920 --> 01:04:29.000
UZERME 123 123

01:04:31.960 --> 01:04:32.440
登录中

01:04:34.360 --> 01:04:34.760
上面

01:04:35.560 --> 01:04:36.120
登录中

01:04:37.960 --> 01:04:38.200
好

01:04:39.160 --> 01:04:40.840
这是这么一个做法

01:04:40.840 --> 01:04:42.360
最后我们把事件加上

01:04:42.360 --> 01:04:42.920
事件的话

01:04:42.920 --> 01:04:44.680
我们就在组函数里面写

01:04:44.680 --> 01:04:45.720
大家把这个事件完成

01:04:50.260 --> 01:04:50.500
好

01:04:50.500 --> 01:04:51.060
我来说一下

01:04:51.700 --> 01:04:52.260
怎么做

01:04:52.260 --> 01:04:53.060
首先导入动

01:04:53.060 --> 01:04:54.420
因为我要给动不住这事件

01:04:55.700 --> 01:04:57.060
我们导入其中一个就行了

01:04:57.940 --> 01:04:59.460
上DOMS

01:04:59.460 --> 01:05:00.180
要解释

01:05:00.900 --> 01:05:01.300
这边呢

01:05:01.300 --> 01:05:02.580
我们导入那个叫做

01:05:03.620 --> 01:05:04.740
Form Container

01:05:04.740 --> 01:05:05.140
对吧

01:05:05.140 --> 01:05:06.100
做到什么事件

01:05:06.100 --> 01:05:07.380
叫Submit事件

01:05:08.100 --> 01:05:08.900
Unsubmit

01:05:11.930 --> 01:05:12.170
好

01:05:12.170 --> 01:05:13.370
当我们提交的时候

01:05:13.370 --> 01:05:15.370
因为它默认一个FORM这个元素

01:05:15.370 --> 01:05:16.490
它默认提交的时候

01:05:16.490 --> 01:05:17.370
它会刷新页面

01:05:18.330 --> 01:05:19.210
FORM的元素

01:05:19.210 --> 01:05:20.090
它会刷新页面的

01:05:20.570 --> 01:05:21.050
一看

01:05:21.050 --> 01:05:22.250
一看一个页面的时候刷新的

01:05:23.370 --> 01:05:24.170
一看这上面

01:05:24.170 --> 01:05:24.650
这里

01:05:27.290 --> 01:05:28.010
我这里呢

01:05:28.010 --> 01:05:29.850
需要阻止事件的默认行为

01:05:30.890 --> 01:05:32.010
你看跟事件相关的

01:05:32.010 --> 01:05:33.210
我们就在其他模块处理

01:05:33.930 --> 01:05:34.650
Prevent

01:05:35.450 --> 01:05:36.010
Default

01:05:36.010 --> 01:05:37.130
阻止事件的默认行为

01:05:37.930 --> 01:05:38.170
好

01:05:38.170 --> 01:05:39.450
然后让我在调用什么

01:05:39.450 --> 01:05:39.850
OK

01:05:41.850 --> 01:05:42.890
就这么简单

01:05:42.890 --> 01:05:45.050
你看每一个模块尽量保持简洁

01:05:45.610 --> 01:05:46.570
不超过五

01:05:46.570 --> 01:05:48.010
五十分来代码的步道

01:05:48.010 --> 01:05:50.330
然后组合起来就完成了成功了

01:05:50.330 --> 01:05:51.850
就不要把它全部挤在一堆

01:05:51.850 --> 01:05:52.810
而且挤在一堆的话

01:05:52.810 --> 01:05:54.330
特别不利于附用

01:05:54.330 --> 01:05:55.450
将来如果说

01:05:55.450 --> 01:05:56.970
我登络界面要做很大的改变

01:05:56.970 --> 01:05:58.410
但是我登络功能不变啊

01:05:59.050 --> 01:06:00.250
我这个API不变啊

01:06:00.250 --> 01:06:01.690
那这个东西是不是可以补动动

01:06:02.490 --> 01:06:02.890
对不对

01:06:04.090 --> 01:06:05.450
如果说有一天我还要做

01:06:05.450 --> 01:06:06.890
还要做一些别的界面

01:06:06.890 --> 01:06:08.250
也要做同样的功能登录

01:06:08.250 --> 01:06:09.450
我是不是这个东西可以附用

01:06:10.330 --> 01:06:10.890
对吧

01:06:10.890 --> 01:06:11.770
所以说很多东西啊

01:06:13.370 --> 01:06:14.650
我们就尽量把它分析

01:06:14.650 --> 01:06:15.450
分析到过后了

01:06:16.490 --> 01:06:18.650
将来维护起来越多起来都方便

01:06:18.650 --> 01:06:19.850
最后我们来看一下吧

01:06:19.850 --> 01:06:20.890
用这面

01:06:20.890 --> 01:06:21.370
一二三

01:06:21.370 --> 01:06:21.690
一二三

01:06:22.730 --> 01:06:23.210
对

01:06:23.210 --> 01:06:23.690
说错了吗

01:06:24.410 --> 01:06:24.810
一二三

01:06:24.810 --> 01:06:27.340
一二三

01:06:27.340 --> 01:06:27.660
好

01:06:27.660 --> 01:06:28.780
这就是咱们

01:06:29.500 --> 01:06:30.300
这就可能那种

01:06:31.020 --> 01:06:31.340
当然了

01:06:31.340 --> 01:06:32.460
这个模块划分呢

01:06:32.460 --> 01:06:33.900
不是只有一种方法

01:06:33.900 --> 01:06:35.340
可以有很多很多种方式

01:06:35.340 --> 01:06:36.940
不同的老师啊

01:06:36.940 --> 01:06:37.900
不同的开发人员

01:06:37.900 --> 01:06:38.940
他们划分的模块呢

01:06:38.940 --> 01:06:41.260
可能都大都有一些差异

01:06:41.980 --> 01:06:43.580
但是总的思想不变

01:06:43.580 --> 01:06:45.500
都是把一些功能尽量的分开

01:06:46.060 --> 01:06:47.020
相似的功能

01:06:47.020 --> 01:06:48.060
或者是相同的功能

01:06:48.060 --> 01:06:49.180
我们把它弄在一起

01:06:49.980 --> 01:06:50.860
有一些差异的东西

01:06:50.860 --> 01:06:52.460
我们把它分成不同的模块

01:06:52.460 --> 01:06:52.940
有的时候呢

01:06:52.940 --> 01:06:53.980
就像功能相同

01:06:53.980 --> 01:06:54.460
但是呢

01:06:55.180 --> 01:06:56.060
因为代码太多

01:06:56.060 --> 01:06:56.700
不好维护

01:06:56.700 --> 01:06:58.300
我们也可以人为的把它分成

01:06:58.300 --> 01:06:59.420
分解成很多模块

01:07:00.540 --> 01:07:01.340
好了

01:07:01.340 --> 01:07:01.980
那么今天呢

01:07:01.980 --> 01:07:03.980
我们就学习到了模块划的知识

01:07:04.620 --> 01:07:05.580
其实整个知识呢

01:07:05.580 --> 01:07:06.300
我们回顾一下

01:07:06.300 --> 01:07:07.820
一个是common.js

01:07:07.820 --> 01:07:08.700
一个是呢

01:07:08.700 --> 01:07:09.500
es module

01:07:10.220 --> 01:07:11.420
无论是common.js

01:07:11.420 --> 01:07:12.620
还是es module呢

01:07:13.740 --> 01:07:15.900
他们都是为了一个目的来服务的

01:07:15.900 --> 01:07:17.500
都是为了让我们把文件

01:07:17.500 --> 01:07:18.780
尽量的分晓分析

01:07:18.780 --> 01:07:19.980
避免学习变量污染

01:07:20.940 --> 01:07:22.140
es module是官方的

01:07:22.140 --> 01:07:23.420
common.js是民间的

01:07:23.420 --> 01:07:24.540
我们以后用了最多的

01:07:25.660 --> 01:07:26.460
es module

01:07:26.860 --> 01:07:28.300
所以es module就一定要掌握

01:07:28.300 --> 01:07:29.660
common.js它本身比较简单

01:07:29.660 --> 01:07:30.540
两句话就喜欢

01:07:31.260 --> 01:07:31.500
好

01:07:31.500 --> 01:07:33.660
就是比你今天东西的本身比较简单

01:07:33.660 --> 01:07:34.860
我们也做了这么多练习了

01:07:34.860 --> 01:07:35.740
相信大家呢

01:07:35.740 --> 01:07:36.780
把这个模块划呢

01:07:36.780 --> 01:07:37.500
也掌握的

01:07:37.500 --> 01:07:38.700
差八九不离十了

01:07:38.700 --> 01:07:40.140
至少你看得文档能够做出来了

01:07:40.140 --> 01:07:40.700
对不对

01:07:40.700 --> 01:07:41.580
那就够了

01:07:41.580 --> 01:07:42.860
因为后边的会当里

01:07:42.860 --> 01:07:43.740
永远忘不了它的

01:07:43.740 --> 01:07:44.540
因为天天都要用

01:07:45.180 --> 01:07:45.580
好

01:07:45.580 --> 01:07:46.460
我们明天呢

01:07:46.460 --> 01:07:47.180
将进入那个

01:07:47.740 --> 01:07:48.780
包管力器的学习

01:07:49.340 --> 01:07:49.740
今天呢

01:07:49.740 --> 01:07:50.860
大家可以在头到里边

01:07:50.860 --> 01:07:52.540
把今天的东西也回顾一下

01:07:52.540 --> 01:07:53.020
回顾一下

01:07:53.020 --> 01:07:53.820
没问题的话

01:07:53.820 --> 01:07:54.460
那就OK了

01:07:54.460 --> 01:07:55.500
今天就好好休息一下

01:07:56.300 --> 01:07:56.460
好

01:07:56.460 --> 01:07:56.860
拜拜

