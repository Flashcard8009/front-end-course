WEBVTT

00:00.050 --> 00:04.210
那这节课我们要对自己写的Button组件进行一次测试

00:04.210 --> 00:06.770
那所以说我们先来建一个文件

00:06.770 --> 00:15.530
在Unit这个文件家内新建议文件叫做Button.spac.js

00:15.530 --> 00:18.090
然后我们先将组件用进来

00:18.090 --> 00:23.490
Inpart aButton from AtElement文件家下的Button文件家

00:23.490 --> 00:26.490
然后它会自动的帮咱们引入Index.js

00:26.490 --> 00:28.970
接着我们还需要对这个组件进行试挂载

00:28.970 --> 00:32.770
所以说我们来引入一个ShallowMount这样的一个方法

00:32.770 --> 00:33.730
从哪里啊

00:33.730 --> 00:37.890
从AtView下的TestUtils当中引入

00:37.890 --> 00:39.650
然后那接着我们来写一个测试套件

00:39.650 --> 00:40.610
Describe

00:40.610 --> 00:43.370
然后名字呢叫做Button.View

00:43.370 --> 00:44.850
然后来写一个函数

00:44.850 --> 00:47.290
在函数当中呢再来写一个测试用力

00:47.290 --> 00:48.690
名字叫做Create

00:48.690 --> 00:55.370
我们来看一看这个组件最开始被创建出来是否符合我们的预期号

00:55.370 --> 00:57.090
Create

00:57.090 --> 00:59.410
来一个函数

00:59.410 --> 01:03.130
在这个当中呢先将组件进行试挂载得到一个容器

01:03.130 --> 01:05.130
等于ShallowMount

01:05.130 --> 01:06.570
传入一个Button

01:06.570 --> 01:08.410
然后再拿到这个Button的元素

01:08.410 --> 01:14.370
Counts一个ButtonER1等于Rapper.Vm.ER2

01:14.370 --> 01:14.770
ok

01:14.770 --> 01:17.690
然后我们先来看看这个Button元素

01:17.690 --> 01:21.570
它身上有没有ER-Button这样的一个class

01:21.570 --> 01:24.970
所以说我们来一次锻研Expatch

01:24.970 --> 01:28.690
ButtonER1.class

01:28.690 --> 01:34.610
1.class list当中

01:34.610 --> 01:36.730
是不是包含了

01:36.730 --> 01:37.530
包含了什么呀

01:37.530 --> 01:39.330
包含了ER-Button

01:39.330 --> 01:41.850
这个content写错了哈

01:41.850 --> 01:42.330
小写的

01:42.330 --> 01:43.170
ok

01:43.170 --> 01:44.570
那这一个测试用力呢

01:44.570 --> 01:45.330
咱们就写完了

01:45.330 --> 01:46.690
咱们来运行一下

01:46.690 --> 01:47.450
那这块呢

01:47.450 --> 01:49.690
我们直接在变形器里面来运行吧

01:49.690 --> 01:52.050
拿一个npmm run test

01:52.050 --> 01:53.010
youtube

01:53.010 --> 01:56.350
回事

01:56.350 --> 01:57.790
等它一下啊

01:57.830 --> 02:04.020
可能有一点点慢

02:04.020 --> 02:04.420
ok

02:04.420 --> 02:05.100
那这一块呢

02:05.100 --> 02:05.980
就过了

02:05.980 --> 02:07.140
这一个测试用力过了

02:07.140 --> 02:10.220
也就是我们组件刚开始被创建出来的时候呢

02:10.220 --> 02:11.820
是功能是正常的

02:11.820 --> 02:12.180
那好

02:12.180 --> 02:13.860
那我们再来判断一下

02:13.860 --> 02:15.620
给它传进了属性之后

02:15.620 --> 02:17.580
这个组件的功能是否正常

02:17.580 --> 02:18.940
那属性有这么多

02:18.940 --> 02:20.460
咱们挨个来测

02:20.460 --> 02:21.100
那你看

02:21.100 --> 02:24.540
如果说我们传定了一个size这样的一个参数

02:24.540 --> 02:28.180
那么组件最终要用什么样的方法来判断它

02:28.180 --> 02:29.940
是否符合预期呢

02:29.940 --> 02:32.260
是不是我们就往它身上去添加了一个class

02:32.660 --> 02:35.540
我们只要判断这个8层的元素身上

02:35.540 --> 02:39.540
有没有12-8层-size这样的一个class

02:39.540 --> 02:40.660
是不是就可以了

02:40.660 --> 02:42.380
所以咱们来写一下

02:42.380 --> 02:43.820
那其实在这块呢

02:43.820 --> 02:44.980
我们来复制一下

02:44.980 --> 02:47.820
因为前两句它是一样的

02:47.820 --> 02:50.820
然后测试用力的名字变成是一个size

02:50.820 --> 02:53.500
我们来判断一下这个class list当中

02:53.500 --> 02:57.500
是不是包含了传递过来的size这个参数

02:57.500 --> 02:58.380
那怎么首先呢

02:58.380 --> 03:01.780
需要先给这个给它的传递过来一个属性

03:01.780 --> 03:03.900
塞在下trop4

03:03.900 --> 03:05.580
然后传一个size

03:05.580 --> 03:07.260
size就比如说传一个mini

03:07.260 --> 03:14.240
我们就来看看它的身上有没有12-8层-mini这样的一个class

03:14.240 --> 03:14.920
稍等一下

03:14.920 --> 03:15.200
ok

03:15.200 --> 03:17.240
那这个测试用力也过了

03:17.240 --> 03:18.120
那在这一块呢

03:18.120 --> 03:20.800
我们可以看到这两句是比较容易的

03:20.800 --> 03:23.760
所以说我们可以把它放到身边这些钩子函数当中

03:23.760 --> 03:25.640
去给它进行一次复制

03:25.640 --> 03:26.600
那么咱们首先呢

03:26.600 --> 03:28.840
需要先来定义出来一个wrapper

03:28.840 --> 03:32.240
然后再来定义出来一个8ELE

03:32.280 --> 03:37.990
接着呢我们来写一个before each这样的一个函数

03:37.990 --> 03:40.750
在这个函数三数当中给wrapper复制

03:40.750 --> 03:45.190
让它等于shallow mount挂上一个button组件

03:45.190 --> 03:48.430
让它再给这个button eLE复制

03:48.430 --> 03:51.110
等于wrapper er

03:51.110 --> 03:57.930
bm.eR拿到这个元素

03:57.930 --> 03:58.930
ok

03:58.930 --> 03:59.730
那这块呢

03:59.730 --> 04:07.870
在底下我们就可以不要这两句了

04:07.870 --> 04:08.950
可以看一下

04:08.950 --> 04:11.230
有没有什么影响啊

04:11.230 --> 04:12.670
没有什么影响是正常的

04:12.670 --> 04:14.710
那在这一个正常的情况下呢

04:14.710 --> 04:16.390
咱们的代码减少不了

04:16.390 --> 04:16.670
ok

04:16.670 --> 04:16.990
好了

04:16.990 --> 04:18.270
那咱们再往下去测

04:18.270 --> 04:21.030
我们下一个要测试的这个属性呢

04:21.030 --> 04:22.030
是type

04:22.030 --> 04:22.750
那type呢

04:22.750 --> 04:23.350
也是哈

04:23.350 --> 04:25.950
如果说它传过来的值是个primary的话

04:25.950 --> 04:28.230
我们就来检查一下这个按钮的身上

04:28.230 --> 04:30.750
有没有primary这样也class就可以了

04:30.750 --> 04:31.270
那咱们呢

04:31.270 --> 04:37.550
是复制一下啊

04:37.550 --> 04:39.830
测试用力的名字是type

04:39.830 --> 04:40.270
然后呢

04:40.270 --> 04:42.070
给它传过去一个type属性

04:42.070 --> 04:43.710
然后type属性的这个值呢

04:43.710 --> 04:45.750
是一个primary

04:45.750 --> 04:47.430
那我们接着就再检测一下

04:47.430 --> 04:50.470
它的身上有没有primary这样的一个class就可以了

04:50.470 --> 04:51.070
那这块呢

04:51.070 --> 04:52.670
我就不带大家去看结果了

04:52.670 --> 04:54.630
因为它肯定是过了的

04:54.630 --> 04:54.990
然后呢

04:54.990 --> 04:56.070
咱们再往下走

04:56.070 --> 04:57.390
左下这个prim

04:57.390 --> 04:58.070
这个prim呢

04:58.070 --> 04:59.270
是否是普算

04:59.270 --> 05:01.030
它传过来这个值之后呢

05:01.030 --> 05:03.750
我们来看看这个元素身上是不是有

05:03.750 --> 05:05.790
sprim这样的class就可以了

05:05.790 --> 05:07.470
那下面这个wrong circle

05:07.470 --> 05:08.870
然后还有disable的

05:08.870 --> 05:10.030
是不是都是这样的呀

05:10.030 --> 05:14.310
所以咱们就统一的来写一下

05:14.310 --> 05:15.710
这个是prim

05:15.710 --> 05:16.910
wrong的

05:16.950 --> 05:17.950
circle

05:17.950 --> 05:19.230
disable的

05:19.230 --> 05:19.590
ok

05:19.590 --> 05:20.270
那这块呢

05:20.270 --> 05:21.910
我们从第1个

05:21.910 --> 05:23.390
第2个type这里来改

05:23.390 --> 05:26.230
我们先来看是prim那种状态

05:26.230 --> 05:27.710
prim

05:27.710 --> 05:30.110
传过来一个prim这样的一个属性

05:30.110 --> 05:32.470
值那是一个处

05:32.470 --> 05:35.270
接着我们来看一看它的class身上

05:35.270 --> 05:40.660
有没有as-prim

05:40.660 --> 05:41.060
ok

05:41.060 --> 05:43.700
那下面这些咱们先把它干掉吧

05:43.700 --> 05:44.940
用上面那个不太好

05:44.940 --> 05:47.580
我们直接来复制一下这个prim的这块

05:47.580 --> 05:48.940
因为它们整体是一样的

05:50.580 --> 05:51.260
ok

05:51.260 --> 05:57.270
prim下面一个是什么是wrong的

05:57.270 --> 05:59.070
这块改一下

05:59.070 --> 06:00.310
再改一下

06:00.310 --> 06:01.030
改一下

06:01.030 --> 06:02.110
本来是一个wrong的

06:02.110 --> 06:07.870
接着是circle

06:07.870 --> 06:09.230
circle

06:09.230 --> 06:13.870
然后在下面是一个disable的

06:13.870 --> 06:14.750
disable的

06:14.750 --> 06:20.260
咱们整体看看这几个有没有过

06:20.260 --> 06:21.180
ok都过了

06:21.180 --> 06:22.340
接着咱们来走

06:22.340 --> 06:23.900
走到这有一个loading

06:23.900 --> 06:26.020
那loading是一个

06:26.020 --> 06:27.540
是否加在中那个状态

06:27.540 --> 06:29.620
那这块咱们在写它的功能的时候呢

06:29.660 --> 06:32.260
是往它的身上加了一个i元素

06:32.260 --> 06:33.580
这个i元素呢

06:33.580 --> 06:34.980
它的一个class是

06:34.980 --> 06:36.660
el-icon-loading

06:36.660 --> 06:36.900
是吧

06:36.900 --> 06:37.940
那咱们来测一下它

06:39.100 --> 06:43.880
咱们先来写一个测试用力

06:43.880 --> 06:45.000
名字叫做loading

06:46.320 --> 06:48.040
给它传过去一个属性

06:48.040 --> 06:49.360
loading是一个处

06:49.360 --> 06:51.080
然后我们来看一看

06:51.080 --> 06:53.120
这个wrong的html

06:53.120 --> 06:56.520
html当中是否包含了一个i元素

06:56.520 --> 06:58.360
这个i元素的class是

06:58.360 --> 07:00.080
el-icon-loading

07:00.080 --> 07:01.000
是不就可以了

07:01.080 --> 07:03.720
所以咱们来拿到wrapper的html

07:04.720 --> 07:07.240
然后看看它是不是包含了一个i元素

07:09.510 --> 07:14.870
i-class等于一个el-icon-loading

07:15.710 --> 07:16.590
上来一个

07:16.590 --> 07:17.190
OK

07:17.190 --> 07:18.430
那看看这个有没有过

07:20.960 --> 07:21.240
ok

07:21.240 --> 07:21.800
那这个呢

07:21.800 --> 07:22.440
也就过了

07:22.440 --> 07:22.840
哈

07:22.840 --> 07:24.120
那接着再来走走

07:24.120 --> 07:24.960
这个icon

07:24.960 --> 07:26.600
那这个icon怎么去测试

07:26.600 --> 07:28.400
是不是和这个loading是一样的呀

07:28.400 --> 07:30.520
因为我们给它传递了一个icon属性

07:30.520 --> 07:31.960
我们会往它的身上

07:31.960 --> 07:33.280
往这个butt里面去

07:33.280 --> 07:34.680
添加一个i元素

07:34.680 --> 07:36.720
i元素设置的一个class

07:36.720 --> 07:38.920
跟它传递过来的icon是一致的

07:38.920 --> 07:40.600
那其实它的一个测试的方法

07:40.600 --> 07:42.120
跟这个loading是一样的

07:42.120 --> 07:44.560
我们只要改一下它的这个测试的名字

07:44.560 --> 07:48.440
和传递过来的这个属性的名字就可以了

07:48.440 --> 07:50.720
然后icon的这个value的值呢

07:50.720 --> 07:52.280
变成是一个什么呢

07:52.280 --> 07:56.200
比如说变成是一个el-icon-edit

07:56.200 --> 07:56.760
编辑

07:56.760 --> 08:00.960
然后我们来看看有没有edit这样的一个class的

08:00.960 --> 08:02.800
一个i元素就可以了

08:07.740 --> 08:08.220
ok

08:08.220 --> 08:08.900
那这个呢

08:08.900 --> 08:09.700
也就过了

08:09.700 --> 08:10.460
就是再走

08:10.460 --> 08:12.660
走到下面这个outfocus

08:12.660 --> 08:14.020
outfocus这块呢

08:14.020 --> 08:15.540
我们先给它传过去

08:15.540 --> 08:21.970
这样的一个属性嘛

08:21.970 --> 08:23.850
它的一个值类形式一个不耳直

08:23.850 --> 08:25.610
我们给它传递过去一个处

08:25.610 --> 08:28.050
那传递过去一个outfocus之后了

08:28.050 --> 08:30.050
那我们的这个button身上

08:30.050 --> 08:34.170
是不是就有这样的一个outfocus的一个属性

08:34.170 --> 08:36.770
它的值是一个outfocus呀

08:36.770 --> 08:37.490
是不是

08:37.490 --> 08:39.090
咱们可以来验证一下

08:39.090 --> 08:39.810
那现在呢

08:39.810 --> 08:41.170
咱们来这样子

08:41.250 --> 08:42.770
我先把这个关掉

08:42.770 --> 08:43.250
然后呢

08:43.250 --> 08:46.610
我们运行一下这个服务

08:46.610 --> 08:47.690
开启一个服务

08:47.690 --> 08:48.650
我们来看一看

08:50.250 --> 08:51.330
3B

08:51.330 --> 08:55.580
npm run sold

08:55.580 --> 08:56.700
在app.view当中

08:56.700 --> 08:59.420
我们是不是写了一个outfocus呀

08:59.420 --> 09:00.620
看一下

09:00.620 --> 09:01.900
这是我们上节课的代码

09:01.900 --> 09:02.380
对

09:02.380 --> 09:03.740
这一块我们来看一看

09:03.740 --> 09:06.420
这个元素的属性上的outfocus

09:06.420 --> 09:07.620
它是等于什么啊

09:09.580 --> 09:11.420
localhost8080

09:11.420 --> 09:17.360
看一下这个元素

09:17.360 --> 09:19.840
outfocus等于一个outfocus

09:19.840 --> 09:20.440
那也就是说

09:20.440 --> 09:23.320
我们先来找到outfocus占据一个属性

09:23.320 --> 09:24.200
判断它的值

09:24.200 --> 09:26.200
是不是outfocus就可以了

09:26.200 --> 09:26.720
那好

09:26.720 --> 09:28.400
那咱们来拿到的属性

09:28.400 --> 09:29.560
那怎么去拿呢

09:29.560 --> 09:30.800
其实很简单

09:30.800 --> 09:32.840
我们先来写个对面的infact

09:32.840 --> 09:33.560
然后呢

09:33.560 --> 09:36.560
通过这个wrapper去拿到HBOS

09:38.000 --> 09:39.760
HBOS

09:39.760 --> 09:40.240
然后呢

09:40.240 --> 09:42.520
在里面拿哪个属性啊

09:42.520 --> 09:43.920
拿这个属性的名字呢

09:43.920 --> 09:48.140
叫做outfocus

09:48.180 --> 09:48.580
然后呢

09:48.580 --> 09:54.900
看看它是不是等于outfocus

09:54.900 --> 09:55.900
这样子就可以了

09:57.300 --> 09:59.340
我们来看一看wrapper的这个HBOS

09:59.340 --> 10:00.860
这个这个函数啊

10:00.860 --> 10:01.540
是什么意思

10:01.540 --> 10:02.260
我们可以来

10:02.260 --> 10:06.260
来到这个vio-test-youttios这个网站

10:06.260 --> 10:06.860
它的官网

10:08.740 --> 10:09.340
然后呢

10:09.340 --> 10:11.140
找到wrapper

10:11.140 --> 10:12.580
找到HBOS

10:12.580 --> 10:13.140
你看

10:13.140 --> 10:16.060
它会返回wrapper到我们节点的特性对象

10:16.060 --> 10:16.460
也说呢

10:16.460 --> 10:18.820
它会拿到这个wrapper里面的那个

10:18.820 --> 10:20.380
第一个动物元素

10:20.380 --> 10:22.060
它包裹的那个元素

10:22.060 --> 10:23.300
拿到它的属性

10:23.300 --> 10:25.140
所以我们直接通过这wrapper.hbios

10:25.140 --> 10:27.340
就可以拿到battern身上的

10:27.340 --> 10:29.220
这样的一个属性了

10:29.220 --> 10:30.740
所以说用这个是没有问题的

10:30.740 --> 10:31.340
那么好

10:31.340 --> 10:32.180
那咱们先来看看

10:32.180 --> 10:33.420
这个测试用力有没有过

10:33.420 --> 10:34.780
它还是说没有过

10:34.780 --> 10:36.020
为什么呢

10:36.020 --> 10:37.420
toe考它不等

10:37.420 --> 10:38.980
为啥不等呢

10:38.980 --> 10:40.860
看看它得到的是什么

10:40.860 --> 10:42.380
因为我们写了一个大写的

10:42.380 --> 10:42.980
是吧

10:42.980 --> 10:44.260
这会儿应该是小写的

10:46.700 --> 10:47.420
再来一遍

10:49.100 --> 10:49.660
看看

10:50.580 --> 10:51.500
这个就过了

10:51.500 --> 10:52.300
没有问题

10:52.300 --> 10:52.580
ok

10:52.580 --> 10:54.980
那下面还有最后一个属性

10:54.980 --> 10:56.700
最后一个属性是

10:56.700 --> 10:58.100
native type

10:58.100 --> 10:59.020
那咱们来看一看

10:59.020 --> 11:01.260
这个属性有没有传递成功

11:01.260 --> 11:03.900
也说通过传递的这个属性

11:03.900 --> 11:05.620
这个组件的表现形式

11:05.620 --> 11:08.820
有没有进行什么错误的地方

11:08.820 --> 11:09.940
把名字先来感一下

11:09.940 --> 11:11.140
native type

11:12.020 --> 11:14.620
然后给它传递过去一个native type

11:14.620 --> 11:15.660
这样的一个属性

11:15.780 --> 11:17.260
只能是一个submit

11:18.460 --> 11:19.020
ok

11:19.020 --> 11:20.540
那接着我们来看一看

11:20.540 --> 11:22.620
这个battery元素身上的type

11:22.620 --> 11:23.620
是不是submit

11:23.620 --> 11:24.380
是不是就可以了

11:25.300 --> 11:27.100
这个也非常简单了

11:27.100 --> 11:29.840
看看

11:29.840 --> 11:30.200
ok

11:30.200 --> 11:31.720
那这个是没有问题的

11:31.720 --> 11:32.800
这个测试用力写下

11:32.800 --> 11:34.680
就非常非常的简单了

11:34.680 --> 11:36.800
那最后咱们再来测一个

11:36.800 --> 11:39.080
点击时候的一个状态

11:39.080 --> 11:40.640
我们给这个battery身上

11:40.640 --> 11:42.440
鉴定了一个点击事件

11:42.440 --> 11:44.000
如果说它点击的话

11:44.000 --> 11:46.640
它会自动的去触发一个click事件

11:46.680 --> 11:47.480
那我们来看看

11:47.480 --> 11:50.080
它有没有自动的去触发这个click事件

11:50.080 --> 11:50.920
来个四十用力

11:50.920 --> 11:52.240
名字是click

11:52.240 --> 11:53.080
然后函数

11:54.400 --> 11:55.440
那在这块

11:55.440 --> 11:58.080
我们直接去利用wrapper

11:58.080 --> 11:59.440
去trigger

12:00.760 --> 12:01.440
trigger

12:01.440 --> 12:03.520
一个click方法就可以了

12:03.520 --> 12:06.600
那咱们来看看wrapper的trigger方法

12:06.600 --> 12:08.000
在这里找一下

12:08.840 --> 12:09.400
trigger

12:09.400 --> 12:10.280
这里

12:10.280 --> 12:12.640
它这个会在该wrapper

12:12.640 --> 12:14.400
这个包裹器的档部节点上

12:14.400 --> 12:15.320
触发一个事件

12:15.320 --> 12:16.200
那也就是说

12:16.200 --> 12:19.760
它会相当于对这个wrapper里面的battery

12:19.760 --> 12:21.800
我们组件当中的battery元素

12:21.800 --> 12:23.920
进行了一个触发的一个事件

12:23.920 --> 12:25.920
触发的是一个点击事件

12:25.920 --> 12:28.040
那接着我们再来看一看

12:28.040 --> 12:29.840
在它触发的这个事件里面

12:29.840 --> 12:32.480
包不包换一个click就可以了

12:32.480 --> 12:34.040
那怎么去判断呢

12:34.040 --> 12:37.080
那在这个wrapper的包裹器上

12:37.080 --> 12:38.080
它有一个函数

12:38.080 --> 12:40.000
叫做imitate

12:40.000 --> 12:42.320
在这个imitate执行了之后

12:42.360 --> 12:45.000
会给我们返回一个触发的

12:45.000 --> 12:46.920
自定义事件的对象

12:46.920 --> 12:47.720
那也就是说

12:47.720 --> 12:49.800
是相当于我们在battery当中

12:49.800 --> 12:53.220
battery.view里面

12:53.220 --> 12:55.820
自动的去通过dollarimate

12:55.820 --> 12:56.460
哎呀

12:56.460 --> 12:56.900
对

12:56.900 --> 12:57.460
在这儿

12:57.460 --> 13:01.380
通过这个dollarimate去触发事件的一个集合

13:01.380 --> 13:03.220
那么在测试里面

13:03.220 --> 13:05.300
它就放到这个imitate的当中了

13:05.300 --> 13:06.980
那咱们来看一看吧

13:06.980 --> 13:08.100
我们来

13:09.100 --> 13:09.860
cancel一下

13:09.860 --> 13:12.300
cancel就落了一个wrapper

13:13.260 --> 13:15.700
第二imitate

13:16.780 --> 13:17.300
是行

13:18.540 --> 13:23.540
它才能不能打印出来

13:23.540 --> 13:24.900
在这里

13:24.900 --> 13:26.420
并没有打印出来

13:26.420 --> 13:27.780
并没有打印出来

13:27.780 --> 13:28.540
没有打印出来

13:28.540 --> 13:29.220
没有关系

13:29.220 --> 13:30.660
我来跟大家说一下

13:30.660 --> 13:33.460
它跟我们返回的这样的一个元素

13:33.460 --> 13:34.340
返回的这个值

13:34.340 --> 13:35.700
它是一个数组

13:35.700 --> 13:38.100
也就是它会把触发的自定义事件

13:38.100 --> 13:39.980
放到一个一个的数组当中

13:39.980 --> 13:42.260
那么我们就来看一看这个click

13:42.260 --> 13:43.900
它在不在这个数组当中

13:44.100 --> 13:45.220
就可以了

13:45.220 --> 13:46.660
那咱们这样

13:46.660 --> 13:48.260
我们期待一下

13:48.260 --> 13:49.860
expect 断个言

13:49.860 --> 13:58.920
然后wrapper.imitate的执行

13:58.920 --> 13:59.480
说错了

13:59.480 --> 14:00.640
我来复制个正方

14:02.040 --> 14:02.520
粘着

14:03.760 --> 14:04.160
OK

14:04.160 --> 14:05.800
然后看一看click

14:05.800 --> 14:06.800
在不在

14:06.800 --> 14:09.200
然后也就是判断一下这个值

14:09.200 --> 14:10.240
是不是一个真值

14:10.240 --> 14:10.960
是不是就可以了

14:10.960 --> 14:17.300
就是一个to be to say

14:17.300 --> 14:17.940
OK

14:17.940 --> 14:21.990
来看一看

14:22.030 --> 14:22.390
那好

14:22.390 --> 14:23.830
那这个就过了

14:23.830 --> 14:26.430
那其实咱们再可以来验证一下

14:26.430 --> 14:28.950
我们在bundle view当中

14:28.950 --> 14:30.710
让它去触发的这个方法

14:30.710 --> 14:32.830
改成是一个哈哈事件

14:32.830 --> 14:34.950
那再看一看这个事件的测试用力

14:34.950 --> 14:35.670
有没有过

14:36.310 --> 14:40.800
看它能不能通过

14:40.800 --> 14:41.760
来看一下

14:41.760 --> 14:45.900
我再保存一下

14:45.900 --> 14:46.420
你看

14:46.420 --> 14:48.380
这一块它就不过了

14:48.380 --> 14:49.260
这块就不过了

14:49.260 --> 14:51.500
因为它找到的这个哈哈

14:51.500 --> 14:54.220
找到这个click事件是一个安定犯的

14:54.220 --> 14:55.740
它并不是一个真值

14:55.740 --> 14:58.700
那咱们把测试用力里面的这个click

14:58.700 --> 15:00.860
去变成是一个哈哈

15:00.860 --> 15:06.470
看看它能不能过呢

15:06.470 --> 15:07.910
你看这个就过了

15:07.910 --> 15:08.630
那也就是说

15:08.630 --> 15:12.470
当我们去验证一个点一个点击的时候

15:12.470 --> 15:16.070
有没有去自动的去自定义出发一个方法的时候呢

15:16.070 --> 15:18.630
我们就可以采用这样的一种方式

15:18.630 --> 15:19.990
来去验证了

15:19.990 --> 15:20.270
那好

15:20.270 --> 15:22.550
那咱们把这个原来的这个代码不要改了

15:22.550 --> 15:24.190
还是变过去一个click

15:24.190 --> 15:27.110
测试用力里面也是去判断这个click

15:27.110 --> 15:30.670
不要去判断哈哈

15:30.710 --> 15:31.270
好了

15:31.270 --> 15:32.550
那改完了之后呢

15:32.550 --> 15:37.230
咱们这一整个组件从编写到测试就完成了

15:37.230 --> 15:38.230
那这个组件呢

15:38.230 --> 15:39.910
我们就把它讲解完毕了

15:39.910 --> 15:40.550
下节课呢

15:40.550 --> 15:42.830
我们就进入到第八章的学习了

15:42.830 --> 15:44.150
我们来学习一下

15:44.150 --> 15:46.310
另可文字链接这个组件

15:46.310 --> 15:47.070
那同学们呢

15:47.070 --> 15:47.910
可以在课下

15:47.910 --> 15:49.550
先把这个组件的用法呢

15:49.550 --> 15:50.190
看一看

15:50.190 --> 15:51.750
这个组件非常非常简单

15:51.750 --> 15:53.590
咱们不会利用像这个

15:53.590 --> 15:55.030
像写八层组件一样啊

15:55.030 --> 15:56.310
用好几节课

15:56.310 --> 15:58.670
一直用到了H了吧

15:58.670 --> 16:00.830
现在应该ABCDEFJH了

16:00.830 --> 16:01.710
这么多节课

16:01.710 --> 16:03.830
那另可能我估计三节课就完事了

16:03.830 --> 16:05.270
因为它非常的简单哈

16:05.270 --> 16:05.590
那好

16:05.590 --> 16:07.070
那我们的下一张再见

