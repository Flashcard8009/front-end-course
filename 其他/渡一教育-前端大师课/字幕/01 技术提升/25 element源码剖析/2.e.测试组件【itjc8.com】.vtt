WEBVTT

00:00.110 --> 00:03.110
这节课咱们来测试一下这两个组件

00:03.110 --> 00:07.110
首先咱们还是要去创建并且切换一下分支

00:07.110 --> 00:09.110
打开我们的get bash

00:09.110 --> 00:12.550
然后在这里面与其他命令

00:12.550 --> 00:15.550
get check out 钢B

00:15.550 --> 00:18.550
然后这是第二章的第五集

00:18.550 --> 00:21.550
然后起个名字叫做测试组件

00:21.550 --> 00:22.550
应该是E吧 是吧

00:22.550 --> 00:24.550
A B C D E

00:24.550 --> 00:25.550
OK 没有问题 是吧

00:25.550 --> 00:26.550
OK 切换分支

00:26.550 --> 00:27.550
切换分支之后呢

00:27.550 --> 00:30.550
我们用边器把它给打开

00:31.550 --> 00:32.550
打开了之后

00:32.550 --> 00:35.550
我们就需要找到这样的一个Test

00:35.550 --> 00:36.550
这样的一个文件夹

00:36.550 --> 00:38.550
在这里面找到Unit文件夹

00:38.550 --> 00:40.550
然后键两个文件

00:40.550 --> 00:43.550
一个叫做肉.spark

00:43.550 --> 00:46.550
肉.spark.js

00:46.550 --> 00:47.550
测试肉组件

00:47.550 --> 00:48.550
另外一个呢

00:48.550 --> 00:51.550
叫做扣点Spark.js

00:51.550 --> 00:52.550
测试扣组件

00:52.550 --> 00:54.550
好吧 那在这个测试肉组件里面

00:54.550 --> 00:56.550
我们需要导入肉组件 是吧

00:56.550 --> 00:58.550
就Import肉 from 哪里啊

00:58.550 --> 01:02.550
from 这个at element 下面的肉

01:02.550 --> 01:03.550
对吧

01:03.550 --> 01:05.550
那在这个扣组件里面呢

01:05.550 --> 01:08.550
我们需要导入扣组件 对吧

01:08.550 --> 01:10.550
导入这个扣

01:10.550 --> 01:13.550
OK 那除了导入组件之外

01:13.550 --> 01:14.550
我们还需要干嘛

01:14.550 --> 01:17.550
我们还需要把组件进行色挂载吧

01:17.550 --> 01:19.550
是吧 那挂着需要用什么

01:19.550 --> 01:21.550
用什么 用到某个方法

01:21.550 --> 01:23.550
是吧 这个方法是哪里的

01:23.550 --> 01:26.550
是这个ViewTest这个库里面的

01:26.550 --> 01:28.550
是吧 那我们想要挂载

01:28.550 --> 01:29.550
是不是有两种方法呀

01:29.550 --> 01:30.550
一种是Mount

01:30.550 --> 01:32.550
一种是ShallowMount

01:32.550 --> 01:34.550
对吧 那Mount和ShallowMount

01:34.550 --> 01:35.550
有什么区别

01:35.550 --> 01:37.550
Mount它会把

01:37.550 --> 01:39.550
紫组件都进行一次渲染 是吧

01:39.550 --> 01:40.550
那ShallowMount呢

01:40.550 --> 01:42.550
只需渲染自己的组件

01:42.550 --> 01:43.550
紫组件不须管 是吧

01:43.550 --> 01:45.550
那咱们还是用这个ShallowMount

01:45.550 --> 01:48.550
好吧 这样它渲染的更少 是吧

01:48.550 --> 01:49.550
因为我们

01:49.550 --> 01:50.550
因为我们这个

01:50.550 --> 01:52.550
去测试组件

01:52.550 --> 01:54.550
我们只关注我们自己组件的本身

01:54.550 --> 01:56.550
它这个紫组件有什么

01:56.550 --> 01:57.550
它的孙子组件有什么

01:57.550 --> 01:59.550
跟咱们这个组件都没有关系 是吧

01:59.550 --> 02:00.550
所以说咱们

02:00.550 --> 02:01.550
再有这样的一个挂载的时候

02:01.550 --> 02:03.550
我们都去用这个ShallowMount

02:03.550 --> 02:04.550
去挂 好吧

02:04.550 --> 02:06.550
OK 然后我们来写个测试套件

02:06.550 --> 02:07.550
Diskcribe

02:07.550 --> 02:09.550
这个是叫做Row.View

02:09.550 --> 02:13.270
另外一个叫什么

02:13.270 --> 02:15.270
叫做Code.View 是吧

02:15.270 --> 02:19.310
OK

02:19.310 --> 02:21.310
然后咱们还需要再去改个什么呢

02:21.310 --> 02:23.310
改个Packager.json

02:23.310 --> 02:26.310
把这个后面加成一个Gun Gun Watch

02:26.310 --> 02:28.310
这块我之前去改了一下

02:28.310 --> 02:30.310
就把它变成直接写上这个了

02:30.310 --> 02:31.310
大家这个刚开始生成的时候

02:31.310 --> 02:33.310
肯定是没有Gun Gun Watch的

02:33.310 --> 02:34.310
大家自己加上

02:34.310 --> 02:36.310
加上之后咱们再那个什么

02:36.310 --> 02:37.310
咱们再这个运行一下

02:37.310 --> 02:39.310
这样的一个测试的命令

02:39.310 --> 02:40.310
好吧 我们来看一下

02:40.310 --> 02:42.310
能不能够成功的运行

02:42.310 --> 02:44.880
他们已经想了

02:44.880 --> 02:45.880
你这还是还啥都没写呢

02:45.880 --> 02:46.880
运行它干嘛呀

02:46.880 --> 02:47.880
那我们运行它肯定是因为

02:47.880 --> 02:48.880
它有坑 是吧

02:48.880 --> 02:50.880
咱们来看一下这坑试试

02:51.880 --> 02:53.880
OK 等着它运行看

02:55.880 --> 02:56.880
现在这个测试这个组件

02:56.880 --> 02:58.880
它有点慢啊

02:58.880 --> 03:00.880
慢的话咱们就耐心的等一等

03:00.880 --> 03:01.880
好吧

03:01.880 --> 03:02.880
要不然我现在给它加把

03:02.880 --> 03:03.880
就是回个车什么的

03:03.880 --> 03:05.880
它可能就断了

03:05.880 --> 03:09.470
OK

03:09.470 --> 03:11.470
它现在是测试的

03:11.470 --> 03:12.470
但是测试失败了

03:12.470 --> 03:13.470
为什么失败呢

03:13.470 --> 03:15.470
你看它两个都是同一个问题

03:15.470 --> 03:17.470
就是它找不到这个模块

03:18.470 --> 03:19.470
找不到哪个模块

03:19.470 --> 03:21.470
是at element下的一个肉

03:21.470 --> 03:23.470
还有at element下它的扣

03:23.470 --> 03:24.470
为什么呢

03:24.470 --> 03:25.470
我们这at element

03:25.470 --> 03:26.470
它不是指的

03:26.470 --> 03:28.470
就是说我们这个

03:28.470 --> 03:29.470
src下的

03:29.470 --> 03:31.470
component下的at element这个文件夹

03:31.470 --> 03:33.470
为什么在这个测试组件里面

03:33.470 --> 03:34.470
用不了呢

03:34.470 --> 03:35.470
是这样的

03:35.470 --> 03:37.470
我们测试是在测试环境下

03:37.470 --> 03:39.470
我们去写点veo.conf.js

03:39.470 --> 03:41.470
是用在了开发环境下

03:41.470 --> 03:42.470
所以这个

03:42.470 --> 03:44.470
你写在开发环境下的这样的

03:44.470 --> 03:45.470
一个路径的简写

03:45.470 --> 03:46.470
不能用在这个测试环境下

03:46.470 --> 03:47.470
那怎么办呢

03:47.470 --> 03:49.470
我们可以对这样的一个测试

03:49.470 --> 03:50.470
框架进行自配置

03:50.470 --> 03:53.470
让它知道这个at element

03:53.470 --> 03:55.470
就是src下的

03:55.470 --> 03:56.470
component下的

03:56.470 --> 03:57.470
at element文件夹

03:57.470 --> 03:58.470
好吧

03:58.470 --> 03:59.470
那怎么配置呢

03:59.470 --> 04:00.470
可以在这里来配置

04:00.470 --> 04:01.470
这个

04:01.470 --> 04:02.470
js.conf.js

04:02.470 --> 04:04.470
在这里面有个叫做

04:04.470 --> 04:06.470
module name mapper

04:06.470 --> 04:07.470
有这样的一个选项

04:07.470 --> 04:08.470
你看

04:08.470 --> 04:09.470
它出使的时候

04:09.470 --> 04:11.470
它就自己配了这样的一个at

04:11.470 --> 04:12.470
at就代表着

04:12.470 --> 04:14.470
这个src文件夹

04:14.470 --> 04:15.470
所以说

04:15.470 --> 04:17.470
在这个测试文件当中

04:17.470 --> 04:19.470
你去使用at的时候

04:19.470 --> 04:20.470
在之前

04:20.470 --> 04:21.470
我们去去担任测试的时候

04:21.470 --> 04:22.470
我们没有任何的抱错

04:22.470 --> 04:23.470
主要原因就是

04:23.470 --> 04:24.470
因为它在这里已经配了

04:24.470 --> 04:25.470
好吧

04:25.470 --> 04:26.470
那怎么在这呢

04:26.470 --> 04:27.470
还是好

04:27.470 --> 04:28.470
再去配置一下

04:28.470 --> 04:29.470
这个at element这样的一个简写

04:29.470 --> 04:30.470
好吧

04:30.470 --> 04:31.470
那这个呢

04:31.470 --> 04:32.470
就是at element

04:32.470 --> 04:33.470
那其实前面

04:33.470 --> 04:34.470
就是一个政策

04:34.470 --> 04:35.470
是吧

04:35.470 --> 04:36.470
以什么开头

04:36.470 --> 04:37.470
以什么结尾

04:37.470 --> 04:38.470
对不对

04:38.470 --> 04:39.470
OK

04:39.470 --> 04:40.470
然后后面呢

04:40.470 --> 04:41.470
给它一个路径

04:41.470 --> 04:42.470
那就是

04:42.470 --> 04:43.470
我们跟路径下的

04:43.470 --> 04:44.470
src下的

04:44.470 --> 04:45.470
component

04:45.470 --> 04:46.470
对吧

04:46.470 --> 04:48.470
然后下面的at element

04:48.470 --> 04:49.470
对吧

04:49.470 --> 04:50.470
然后它后面

04:51.470 --> 04:52.470
OK

04:52.470 --> 04:53.470
只要是你写了

04:53.470 --> 04:54.470
一个at element

04:54.470 --> 04:55.470
后面

04:55.470 --> 04:56.470
at element

04:56.470 --> 04:57.470
就指的是什么

04:57.470 --> 04:58.470
指的是这一串

04:58.470 --> 04:59.470
那个路径

04:59.470 --> 05:00.470
好吧

05:00.470 --> 05:01.470
OK

05:01.470 --> 05:02.470
那咱们现在呢

05:02.470 --> 05:03.470
再来看一下

05:03.470 --> 05:08.020
我们再来运行一下

05:09.020 --> 05:10.020
还是有问题是吧

05:11.020 --> 05:13.020
有点打我的脸了是吧

05:13.020 --> 05:14.020
这样吧

05:14.020 --> 05:16.020
我重新打一次这个命令

05:16.020 --> 05:17.020
改配置了

05:17.020 --> 05:23.240
我们重新来运行一下

05:23.240 --> 05:24.240
好吧

05:24.240 --> 05:25.240
保存了没

05:25.240 --> 05:26.240
保存了是吧

05:30.020 --> 05:31.020
等待会

05:31.020 --> 05:32.020
OK

05:32.020 --> 05:33.020
这个时候

05:33.020 --> 05:35.020
它没有给我们报那个错误了

05:35.020 --> 05:36.020
是吧

05:36.020 --> 05:37.020
但是给我们报的另外的一个错误

05:37.020 --> 05:38.020
discrab凭错了

05:38.020 --> 05:39.020
那这个凭错了

05:39.020 --> 05:40.020
就没有什么关系了

05:40.020 --> 05:41.020
我们就清楚了

05:41.020 --> 05:42.020
我们现在这个at element

05:42.020 --> 05:43.020
已经能试了

05:43.020 --> 05:44.020
那就把这块改一下

05:44.020 --> 05:45.020
是吧

05:45.020 --> 05:46.020
discrab少了点儿

05:47.020 --> 05:48.020
就尴尬了是吧

05:49.020 --> 05:50.020
discrab

05:50.020 --> 05:52.020
应该没有问题了吧

05:52.020 --> 05:53.020
来看一下

05:55.400 --> 05:56.400
这个手朵

05:56.400 --> 05:58.400
总是去少一两个

05:58.400 --> 05:59.400
这样的一个字母

06:00.400 --> 06:01.400
好

06:02.400 --> 06:03.400
这个时候就OK了

06:03.400 --> 06:04.400
它说什么呢

06:04.400 --> 06:06.400
它说你这里面至少有一个测试用力

06:06.400 --> 06:07.400
是吧

06:07.400 --> 06:08.400
那咱们就来写一个测试用力

06:08.400 --> 06:10.400
我们先来测这样的一个

06:10.400 --> 06:12.400
先来测这个肉组件

06:12.400 --> 06:13.400
好吧

06:13.400 --> 06:14.400
那首先要测的是什么呢

06:14.400 --> 06:16.400
测的是它最开始被创建的时候的一种

06:16.400 --> 06:17.400
一种样子

06:18.400 --> 06:19.400
比如说我刚开始被创建的时候

06:19.400 --> 06:20.400
要求到什么呢

06:20.400 --> 06:21.400
我要求

06:21.400 --> 06:23.400
它被挂载的这个元素

06:23.400 --> 06:24.400
也就是说

06:24.400 --> 06:27.400
找到它里面最外层的那个元素

06:27.400 --> 06:30.400
clarus有el-肉

06:30.400 --> 06:31.400
就代表着它出使的时候

06:31.400 --> 06:32.400
冲建成功了

06:32.400 --> 06:33.400
是吧

06:33.400 --> 06:34.400
OK

06:34.400 --> 06:36.400
那咱们首先是不是得拿到这个wrapper啊

06:36.400 --> 06:37.400
是吧

06:37.400 --> 06:38.400
拿到wrapper

06:38.400 --> 06:40.400
然后让它用这个shallow mount去挂一下

06:40.400 --> 06:41.400
是吧

06:41.400 --> 06:42.400
把这个肉填进去

06:42.400 --> 06:43.400
然后拿到wrapper之后呢

06:43.400 --> 06:45.400
我们还可以再拿到一个谁呢

06:45.400 --> 06:47.400
拿到这个元素

06:47.400 --> 06:48.400
是吧

06:48.400 --> 06:50.400
比如说拿到一个肉

06:50.400 --> 06:51.400
el-e

06:51.400 --> 06:52.400
到底谁呢

06:52.400 --> 06:53.400
到底wrapper

06:53.400 --> 06:54.400
wrapper

06:54.400 --> 06:56.400
里面的vm

06:56.400 --> 06:57.400
拿到了el

06:57.400 --> 06:59.400
比如说拿到el这个元素

06:59.400 --> 07:00.400
是吧

07:00.400 --> 07:01.400
然后我们来判断一下它

07:01.400 --> 07:03.400
判断这个肉el

07:03.400 --> 07:05.400
这个元素上

07:05.400 --> 07:07.400
它的一个class list

07:07.400 --> 07:08.400
当中

07:08.400 --> 07:09.400
包不包含

07:09.400 --> 07:10.400
包不包含谁啊

07:10.400 --> 07:13.400
包不包含这个el-肉

07:13.400 --> 07:14.400
好吧

07:14.400 --> 07:15.400
包不包含它

07:15.400 --> 07:16.400
然后呢

07:16.400 --> 07:17.400
我们就测试它

07:17.400 --> 07:19.400
最初始被创建时候的一个

07:19.400 --> 07:20.400
一个样子

07:20.400 --> 07:21.400
是吧

07:21.400 --> 07:22.400
那其实关于这个控组点

07:22.400 --> 07:24.400
我们是不是也得去测试一下

07:24.400 --> 07:25.400
它最初始的时候

07:25.400 --> 07:26.400
是吧

07:26.400 --> 07:28.400
我们把这个复制一下

07:28.400 --> 07:29.400
这个

07:29.400 --> 07:30.400
那它挂在什么

07:30.400 --> 07:31.400
挂的是肉

07:31.400 --> 07:32.400
是扣组件

07:32.400 --> 07:33.400
是吧

07:33.400 --> 07:34.400
然后呢

07:34.400 --> 07:35.400
这个给它起名字

07:35.400 --> 07:36.400
叫做

07:36.400 --> 07:37.400
cool-el-e

07:37.400 --> 07:38.400
这个也是

07:38.400 --> 07:39.400
cool-el-e

07:39.400 --> 07:40.400
那这个话是不是

07:40.400 --> 07:41.400
要看它这个class list

07:41.400 --> 07:43.400
是不是包含这样的一个el-kong

07:43.400 --> 07:46.540
是吧

07:46.540 --> 07:47.540
OK

07:47.540 --> 07:48.540
我们再来运行一下

07:48.540 --> 07:49.540
看看这两个组件

07:49.540 --> 07:50.540
最初始的时候

07:50.540 --> 07:52.540
创建的有没有问题

07:52.540 --> 07:53.540
看

07:53.540 --> 07:54.540
最初始

07:54.540 --> 07:55.540
treated的时候

07:55.540 --> 07:56.540
创建的时候

07:56.540 --> 07:58.540
是去测试这样的一个肉组件

07:58.540 --> 07:59.540
是吧

07:59.540 --> 08:00.540
那咱们可以怎么样

08:00.540 --> 08:02.540
可以单独的去测试某一个文件

08:02.540 --> 08:03.540
是吧

08:03.540 --> 08:04.540
按什么

08:04.540 --> 08:05.540
按p

08:05.540 --> 08:06.540
然后让它去

08:06.540 --> 08:08.540
根据一个文件的名字去测试

08:08.540 --> 08:10.540
那就选中这个肉.spot.js

08:10.540 --> 08:11.540
OK

08:11.540 --> 08:13.540
只去测试这一个

08:13.540 --> 08:14.540
好了

08:14.540 --> 08:15.540
那咱们测试完

08:15.540 --> 08:17.540
它最开始被创建的时候

08:17.540 --> 08:18.540
的样子之后

08:18.540 --> 08:19.540
咱们还要去测试什么

08:19.540 --> 08:21.540
测试给它传递过来一个属

08:21.540 --> 08:23.540
测试传递过来一个属性的jatter

08:23.540 --> 08:24.540
还是gatter

08:24.540 --> 08:25.540
就这个

08:25.540 --> 08:26.540
好吧

08:26.540 --> 08:27.540
OK

08:27.540 --> 08:28.540
8

08:28.540 --> 08:32.370
就是它

08:32.370 --> 08:33.370
那测试它的时候

08:33.370 --> 08:34.370
我们是不是就给它去

08:34.370 --> 08:35.370
设置一些什么

08:35.370 --> 08:36.370
设置一些属性是吧

08:36.370 --> 08:38.370
那这两个是不是还得要啊

08:38.370 --> 08:39.370
对吧

08:39.370 --> 08:40.370
然后呢还要干嘛

08:40.370 --> 08:41.370
要给这个wrapper

08:41.370 --> 08:43.370
去set一个props

08:43.370 --> 08:44.370
对吧

08:44.370 --> 08:45.370
然后set了谁呢

08:45.370 --> 08:46.370
给它传递这样一个值

08:46.370 --> 08:48.370
让它的这个值是20

08:48.370 --> 08:49.370
是吧

08:49.370 --> 08:50.370
给它传完20之后

08:50.370 --> 08:51.370
我们这个肉组件

08:51.370 --> 08:53.370
会有一个什么样的一个变化

08:53.370 --> 08:54.370
还记得吗

08:54.370 --> 08:56.370
它有这样一个jatter

08:56.370 --> 08:57.370
就代表着

08:57.370 --> 08:58.370
它有这个

08:58.370 --> 08:59.370
里面的这个扣组件

08:59.370 --> 09:00.370
会有一个间隔

09:00.370 --> 09:01.370
是吧

09:01.370 --> 09:02.370
除了扣组件

09:02.370 --> 09:03.370
会有间隔之外

09:03.370 --> 09:05.370
它自己有什么表现

09:05.370 --> 09:06.370
它自己的表现是

09:06.370 --> 09:07.370
它有一个magen left

09:07.370 --> 09:09.370
和一个magen right

09:09.370 --> 09:10.370
这两个的值

09:10.370 --> 09:11.370
都是负的

09:11.370 --> 09:12.370
二分之一

09:12.370 --> 09:13.370
被的jatter

09:13.370 --> 09:14.370
比如说

09:14.370 --> 09:15.370
给它传帐

09:15.370 --> 09:16.370
20的时候

09:16.370 --> 09:17.370
它的magen left

09:17.370 --> 09:18.370
和magen right

09:18.370 --> 09:19.370
都是负实相送

09:19.370 --> 09:20.370
对吧

09:20.370 --> 09:21.370
那这个时候

09:21.370 --> 09:22.370
我们去

09:22.370 --> 09:23.370
断言一下

09:23.370 --> 09:24.370
是不是就可以了

09:24.370 --> 09:25.370
是吧

09:25.370 --> 09:27.370
断言

09:27.370 --> 09:28.370
它的一个style

09:28.370 --> 09:29.370
里面的

09:31.370 --> 09:32.370
style

09:32.370 --> 09:33.370
里面的谁啊

09:33.370 --> 09:35.370
这个magen left

09:36.370 --> 09:37.370
它的值

09:37.370 --> 09:38.370
看看它是不是什么

09:38.370 --> 09:40.370
是不是负实相送

09:40.370 --> 09:41.370
好吧

09:41.370 --> 09:42.370
那同样的

09:42.370 --> 09:43.370
还要去测试谁

09:43.370 --> 09:44.370
还要去测试

09:44.370 --> 09:45.370
这样的一个right

09:45.370 --> 09:46.370
magen right

09:46.370 --> 09:47.370
看到了magen right

09:47.370 --> 09:48.370
是不是也是负实相送

09:48.370 --> 09:49.370
好吧

09:49.370 --> 09:50.370
OK

09:50.370 --> 09:54.730
来看一下

09:54.730 --> 09:55.730
OK 你看

09:55.730 --> 09:56.730
这个就过了

09:56.730 --> 09:57.730
是吧

09:57.730 --> 09:58.730
我们再来测试一下

09:58.730 --> 10:04.860
另外的一个属性tap

10:04.860 --> 10:05.860
OK

10:05.860 --> 10:08.620
把它拿过来

10:08.620 --> 10:09.620
放到这

10:09.620 --> 10:10.620
然后咱们给它去

10:10.620 --> 10:11.620
设置一个属性

10:11.620 --> 10:12.620
是吧

10:12.620 --> 10:13.620
属性是什么

10:13.620 --> 10:16.570
是tap

10:16.570 --> 10:17.570
然后值是什么

10:17.570 --> 10:18.570
值是flags

10:18.570 --> 10:19.570
好吧

10:19.570 --> 10:20.570
那给它

10:20.570 --> 10:21.570
给它传讯这样的一个属性之后

10:21.570 --> 10:22.570
我们的这个肉组件

10:22.570 --> 10:23.570
里面有什么变化

10:23.570 --> 10:24.570
我们的这个肉组件的

10:24.570 --> 10:25.570
最大层DIV上

10:25.570 --> 10:26.570
会有什么

10:26.570 --> 10:28.570
会添加一个class

10:28.570 --> 10:29.570
这个class是什么

10:29.570 --> 10:32.570
是er-row-flags

10:32.570 --> 10:33.570
还记得吧

10:33.570 --> 10:34.570
OK

10:34.570 --> 10:35.570
那接下来去

10:35.570 --> 10:36.570
判断一下

10:36.570 --> 10:37.570
它的这个class list

10:37.570 --> 10:39.570
上面包不包含

10:39.570 --> 10:40.570
我刚才说的那样的

10:40.570 --> 10:41.570
一个值是不是

10:41.570 --> 10:42.570
可以了

10:42.570 --> 10:43.570
是吧

10:43.570 --> 10:44.570
flags

10:44.570 --> 10:45.570
OK

10:45.570 --> 10:46.570
等着它去测试

10:46.570 --> 10:49.900
OK

10:49.900 --> 10:50.900
那这个也过了

10:50.900 --> 10:51.900
是吧

10:51.900 --> 10:52.900
那接着咱们再去测试

10:52.900 --> 10:53.900
测试什么呢

10:53.900 --> 10:54.900
测试给它传讯

10:54.900 --> 10:55.900
一个justify

10:55.900 --> 10:56.900
这样的一个属性

10:56.900 --> 10:59.730
justify

10:59.730 --> 11:02.620
OK

11:02.620 --> 11:04.620
那是不是也是一个套路

11:04.620 --> 11:05.620
我们把它也复制一下

11:05.620 --> 11:06.620
好

11:06.620 --> 11:07.620
OK

11:07.620 --> 11:08.620
给它设置这样的一个属性

11:08.620 --> 11:09.620
justify

11:10.620 --> 11:11.620
然后呢

11:11.620 --> 11:12.620
值为什么呢

11:12.620 --> 11:13.620
值为一个and

11:13.620 --> 11:14.620
给它传

11:14.620 --> 11:15.620
值为and的时候

11:15.620 --> 11:16.620
它是不是里面会给它

11:16.620 --> 11:18.620
多添加一个class

11:18.620 --> 11:19.620
叫做

11:19.620 --> 11:20.620
as-justify-and

11:20.620 --> 11:21.620
对吧

11:21.620 --> 11:22.620
那我们就还是判断

11:22.620 --> 11:23.620
它里面有没有这样的一个class

11:23.620 --> 11:24.620
就可以了

11:24.620 --> 11:27.620
as-justify-and

11:27.620 --> 11:28.620
好吧

11:29.620 --> 11:30.620
OK

11:30.620 --> 11:31.620
那这个justify

11:31.620 --> 11:32.620
是不是还有另外的一个

11:32.620 --> 11:34.620
跟它成对出现的

11:34.620 --> 11:35.620
也不是

11:35.620 --> 11:36.620
是跟它同样的一个属性

11:36.620 --> 11:37.620
类似的一个属性

11:37.620 --> 11:38.620
叫什么

11:38.620 --> 11:39.620
是吧

11:39.620 --> 11:40.620
我们来复制一下它

11:40.620 --> 11:41.620
站到这里

11:41.620 --> 11:42.620
lan

11:42.620 --> 11:43.620
OK

11:43.620 --> 11:44.620
那就给它传讯一个lan

11:44.620 --> 11:45.620
然后呢

11:45.620 --> 11:46.620
加上一个bottom

11:46.620 --> 11:48.620
值的一个

11:48.620 --> 11:49.620
value值是bottom

11:49.620 --> 11:50.620
OK

11:50.620 --> 11:51.620
那它是不是

11:51.620 --> 11:52.620
给它传讯这样的一个lan

11:52.620 --> 11:53.620
的时候

11:53.620 --> 11:54.620
它会有一个什么

11:54.620 --> 11:55.620
as-lan-bottom

11:55.620 --> 11:56.620
这样的一个class

11:56.620 --> 11:57.620
对吧

11:57.620 --> 11:58.620
OK

11:58.620 --> 11:59.620
咱们来保存一下

11:59.620 --> 12:03.460
等下它去给我们测试

12:03.460 --> 12:04.460
OK

12:04.460 --> 12:05.460
你看

12:05.460 --> 12:06.460
这个就多过了

12:06.460 --> 12:07.460
是吧

12:07.460 --> 12:08.460
就多过了

12:08.460 --> 12:09.460
咱们测试就多成功了

12:09.460 --> 12:10.460
是吧

12:10.460 --> 12:11.460
每个测试用力里面

12:11.460 --> 12:13.460
都用了这两个

12:13.460 --> 12:14.460
是吧

12:14.460 --> 12:15.460
那我们是不是可以

12:15.460 --> 12:16.460
减限一下呀

12:16.460 --> 12:17.460
怎么减限

12:17.460 --> 12:18.460
我们这个descript

12:18.460 --> 12:19.460
是不是有它

12:19.460 --> 12:20.460
自己的生命周期函数

12:20.460 --> 12:24.740
它记得吗

12:24.740 --> 12:26.740
buffall1是吧

12:26.740 --> 12:27.740
buffall1是在

12:27.740 --> 12:28.740
每一个测试用力

12:28.740 --> 12:29.740
执行之前

12:29.740 --> 12:30.740
它去执行的

12:30.740 --> 12:32.740
一个生命周期函数

12:32.740 --> 12:33.740
对吧

12:33.740 --> 12:34.740
OK

12:34.740 --> 12:35.740
那咱们就来写一下

12:35.740 --> 12:36.740
写一个buffall1

12:36.740 --> 12:38.740
那在buffall1

12:38.740 --> 12:39.740
里面

12:39.740 --> 12:40.740
我们是不是就可以

12:40.740 --> 12:41.740
给这个larp

12:41.740 --> 12:42.740
re去复制

12:42.740 --> 12:43.740
是吧

12:43.740 --> 12:44.740
那在复制之前

12:44.740 --> 12:45.740
咱们需要先在外面

12:45.740 --> 12:46.740
给它声明一下

12:46.740 --> 12:47.740
好吧

12:47.740 --> 12:49.740
要不然就不能用了

12:49.740 --> 12:50.740
还有一个larp

12:50.740 --> 12:54.740
一个rowe

12:54.740 --> 12:55.740
OK

12:55.740 --> 12:56.740
然后在这里面

12:56.740 --> 12:57.740
让这个larp

12:57.740 --> 12:59.740
动于它

12:59.740 --> 13:01.740
然后让这个rowe

13:01.740 --> 13:03.740
动于它

13:03.740 --> 13:04.740
OK

13:04.740 --> 13:05.740
那这个

13:05.740 --> 13:06.740
所有的测试用力里面

13:06.740 --> 13:07.740
这两个

13:07.740 --> 13:08.740
这两个是不是

13:08.740 --> 13:09.740
就不用去写了

13:09.740 --> 13:10.740
这样我们的代码

13:10.740 --> 13:11.740
都放到一起了

13:11.740 --> 13:12.740
OK

13:12.740 --> 13:13.740
再来看

13:13.740 --> 13:17.580
其实没有任何的问题

13:17.580 --> 13:18.580
OK

13:18.580 --> 13:19.580
是吧

13:19.580 --> 13:20.580
没有任何的问题

13:20.580 --> 13:21.580
那我们这个测试肉组件

13:21.580 --> 13:22.580
我们就过了

13:22.580 --> 13:23.580
就过了

13:23.580 --> 13:24.580
接下来我们去测试

13:24.580 --> 13:25.580
扣组件

13:25.580 --> 13:26.580
好吧

13:26.580 --> 13:27.580
那我们同样的

13:27.580 --> 13:28.580
还是去按下p

13:28.580 --> 13:29.580
然后呢

13:29.580 --> 13:30.580
输入扣

13:30.580 --> 13:31.580
然后我们只去测试

13:31.580 --> 13:32.580
扣这样的一个

13:32.580 --> 13:33.580
组件就可以了

13:33.580 --> 13:34.580
OK

13:34.580 --> 13:35.580
在这个里面

13:35.580 --> 13:36.580
咱们还是按照

13:36.580 --> 13:37.580
团方的套路去测试

13:37.580 --> 13:38.580
我们是不是测试

13:38.580 --> 13:39.580
它传过来

13:39.580 --> 13:40.580
这样的一个属性感

13:40.580 --> 13:41.580
是吧

13:41.580 --> 13:42.580
那我们

13:42.580 --> 13:43.580
create

13:43.580 --> 13:44.580
被创建的时候

13:44.580 --> 13:45.580
那接着呢

13:45.580 --> 13:46.580
我们再去测试

13:46.580 --> 13:47.580
给它传递

13:47.580 --> 13:50.660
这样的一个span属性

13:50.660 --> 13:51.660
好吧

13:51.660 --> 13:52.660
OK

13:52.660 --> 13:53.660
测试这个span属性

13:53.660 --> 13:55.660
测试这个span属性的时候

13:55.660 --> 13:56.660
我们还是

13:56.660 --> 14:01.190
这两个复制一下

14:01.190 --> 14:02.190
这两个复制一下

14:02.190 --> 14:03.190
然后呢

14:03.190 --> 14:04.190
在rocker上

14:04.190 --> 14:05.190
给它去

14:05.190 --> 14:06.190
设置一个属性

14:06.190 --> 14:08.190
set props

14:08.190 --> 14:09.190
然后呢

14:09.190 --> 14:10.190
传上这样的一个对象

14:10.190 --> 14:11.190
对象里面有什么

14:11.190 --> 14:12.190
设置span是吧

14:12.190 --> 14:13.190
又来span

14:13.190 --> 14:15.190
span的直视键是12

14:15.190 --> 14:16.190
那给它传过去

14:16.190 --> 14:17.190
这样的一个属性

14:17.190 --> 14:18.190
在这个code组建里面

14:18.190 --> 14:20.190
会有什么样的表现

14:20.190 --> 14:21.190
我们这个code组建生

14:21.190 --> 14:22.190
会多出一个class吧

14:22.190 --> 14:23.190
class是什么

14:23.190 --> 14:25.190
是er-code-12

14:25.190 --> 14:26.190
对不对

14:26.190 --> 14:27.190
OK

14:27.190 --> 14:28.190
那咱们还是

14:28.190 --> 14:29.190
来

14:29.190 --> 14:30.190
断言一下

14:30.190 --> 14:31.190
就是这个code

14:31.190 --> 14:34.190
er-class list

14:34.190 --> 14:35.190
是不是

14:35.190 --> 14:37.190
包含了

14:37.190 --> 14:38.190
包含了谁呀

14:38.190 --> 14:40.190
er-code-12

14:40.190 --> 14:41.190
对吧

14:41.190 --> 14:42.190
OK

14:42.190 --> 14:43.190
那跟这个span差不多的

14:43.190 --> 14:44.190
是不是还有

14:44.190 --> 14:45.190
三个呀

14:45.190 --> 14:46.190
offset

14:46.190 --> 14:47.190
一个是push

14:47.190 --> 14:48.190
有

14:48.190 --> 14:49.190
offset

14:49.190 --> 14:50.190
push

14:50.190 --> 14:51.190
和

14:51.190 --> 14:52.190
怎么做过这样

14:52.190 --> 14:53.190
和push

14:53.190 --> 14:54.190
是吧

14:54.190 --> 14:55.190
那如果说

14:55.190 --> 14:56.190
传入offset的话

14:56.190 --> 14:57.190
OK

14:57.190 --> 14:58.190
那在这个code组建上

14:58.190 --> 15:00.190
就多出了一个er-code-offset

15:00.190 --> 15:01.190
然后传递的值

15:01.190 --> 15:02.190
是吧

15:02.190 --> 15:03.190
然后push也是一样的

15:03.190 --> 15:04.190
push也是一样的

15:04.190 --> 15:05.190
那怎么呢

15:05.190 --> 15:06.190
把这三个

15:06.190 --> 15:07.190
也都直接写在这儿

15:07.190 --> 15:11.420
好

15:11.420 --> 15:12.420
然后一起去让它运行

15:12.420 --> 15:13.420
OK

15:13.420 --> 15:14.420
然后这块

15:14.420 --> 15:15.420
改个名字

15:15.420 --> 15:16.420
叫做offset

15:16.420 --> 15:17.420
我们给

15:17.420 --> 15:18.420
传递过来

15:18.420 --> 15:19.420
offset的值呢

15:19.420 --> 15:20.420
换一个

15:20.420 --> 15:21.420
不要都是12

15:21.420 --> 15:22.420
多点样是吧

15:22.420 --> 15:23.420
然后这个时候

15:23.420 --> 15:24.420
就看看这里面

15:24.420 --> 15:25.420
是不是包含了

15:25.420 --> 15:26.420
这样的offset

15:26.420 --> 15:27.420
6

15:27.420 --> 15:28.420
这个class

15:28.420 --> 15:29.420
然后同样的

15:29.420 --> 15:30.420
还要再去测试谁

15:30.420 --> 15:31.420
测试这样的一个push

15:31.420 --> 15:33.420
push

15:33.420 --> 15:35.420
然后设置一下push的值

15:35.420 --> 15:38.380
比如说

15:38.380 --> 15:39.380
它的值是几

15:39.380 --> 15:40.380
是3

15:40.380 --> 15:41.380
好吧

15:41.380 --> 15:42.380
那这块就是

15:42.380 --> 15:44.380
push-3

15:44.380 --> 15:45.380
OK

15:45.380 --> 15:46.380
还有一个push

15:46.380 --> 15:53.100
push给它

15:53.100 --> 15:54.100
变成一个5吧

15:55.100 --> 15:56.100
OK

15:56.100 --> 15:57.100
那这块呢

15:57.100 --> 15:58.100
就是push-5

15:58.100 --> 15:59.100
好吧

15:59.100 --> 16:00.100
我们来一起来测试

16:00.100 --> 16:04.060
肯定是没有问题的

16:04.060 --> 16:05.060
是吧

16:05.060 --> 16:06.060
都过了

16:06.060 --> 16:07.060
对吧

16:07.060 --> 16:08.060
OK

16:08.060 --> 16:09.060
那测试完这几个属性之后

16:09.060 --> 16:10.060
我们再来测试一个

16:10.060 --> 16:11.060
测试个什么呢

16:11.060 --> 16:13.060
测试我们的自适应

16:13.060 --> 16:15.060
测试个自适应

16:15.060 --> 16:16.060
自适应是吧

16:16.060 --> 16:17.060
其实也挺好测试的

16:17.060 --> 16:18.060
是吧

16:18.060 --> 16:19.060
就是说

16:19.060 --> 16:21.060
在X的这个屏幕下

16:21.060 --> 16:22.060
或者在这个MD屏幕下

16:22.060 --> 16:23.060
它是一个什么样的表现

16:23.060 --> 16:24.060
如果说

16:24.060 --> 16:25.060
相应的一个属性的话

16:25.060 --> 16:26.060
OK

16:26.060 --> 16:27.060
它就给你这样

16:27.060 --> 16:28.060
相对应的一个class

16:28.060 --> 16:29.060
是吧

16:29.060 --> 16:30.060
OK

16:30.060 --> 16:31.060
咱们还是把它给复制一下

16:31.060 --> 16:32.060
然后这个自适应

16:32.060 --> 16:33.060
叫做responsive

16:34.060 --> 16:35.060
是吧

16:35.060 --> 16:36.060
自适应

16:36.060 --> 16:37.060
OK

16:37.060 --> 16:38.060
然后我们给它去设置

16:38.060 --> 16:39.060
这样的一个属性

16:39.060 --> 16:41.060
让属性就设置比较多了

16:41.060 --> 16:42.060
比如说

16:42.060 --> 16:43.060
让它在SM下

16:43.060 --> 16:45.060
是这样的一个显示

16:45.060 --> 16:46.060
Span是4

16:46.060 --> 16:47.060
然后呢

16:47.060 --> 16:50.070
然后呢

16:50.070 --> 16:51.070
有一个offset

16:53.070 --> 16:54.070
offset是2

16:54.070 --> 16:55.070
好吧

16:55.070 --> 16:56.070
然后呢

16:56.070 --> 16:57.070
在这个MD下

16:57.070 --> 16:58.070
直接传入一个吧

16:58.070 --> 16:59.070
比如说呢

16:59.070 --> 17:00.070
它就是只设置了一个Span

17:00.070 --> 17:01.070
是吧

17:01.070 --> 17:02.070
然后还有LG下

17:02.070 --> 17:03.070
LG下呢

17:03.070 --> 17:04.070
我们去只给它

17:04.070 --> 17:05.070
设置一个对象

17:05.070 --> 17:06.070
对象是

17:06.070 --> 17:07.070
Span里面是6

17:07.070 --> 17:08.070
然后呢

17:08.070 --> 17:09.070
再来一个offset

17:09.070 --> 17:10.070
是一个3

17:10.070 --> 17:11.070
我们给它传递这样的

17:11.070 --> 17:12.070
一组属性

17:12.070 --> 17:13.070
是吧

17:13.070 --> 17:14.070
那它这里面

17:14.070 --> 17:15.070
包含的这样的

17:15.070 --> 17:16.070
class list

17:16.070 --> 17:17.070
只就多了

17:17.070 --> 17:18.070
是吧

17:18.070 --> 17:19.070
首先应该有什么

17:19.070 --> 17:20.070
有这个EL钢扣

17:20.070 --> 17:21.070
钢

17:21.070 --> 17:22.070
SM

17:22.070 --> 17:23.070
钢4

17:23.070 --> 17:24.070
是吧

17:24.070 --> 17:25.070
它的值是414

17:25.070 --> 17:26.070
是吧

17:26.070 --> 17:27.070
那还应该有什么

17:27.070 --> 17:29.070
还应该有这个SM

17:29.070 --> 17:32.070
钢offset钢2

17:32.070 --> 17:33.070
对吧

17:33.070 --> 17:34.070
同样的

17:34.070 --> 17:35.070
还应该有什么

17:35.070 --> 17:36.070
还应该有这个MD

17:36.070 --> 17:37.070
钢8

17:37.070 --> 17:38.070
对吧

17:39.070 --> 17:40.070
MD钢8

17:40.070 --> 17:41.070
OK

17:41.070 --> 17:42.070
然后接下来

17:42.070 --> 17:44.070
是LG钢6

17:44.070 --> 17:49.200
再来

17:49.200 --> 17:52.200
是LG钢offset钢3是吧

17:52.200 --> 17:54.200
这块变成LG

17:54.200 --> 17:55.200
OK

17:55.200 --> 17:56.200
那这个时候

17:56.200 --> 17:57.200
我们再来

17:58.200 --> 18:04.350
OK

18:04.350 --> 18:05.350
没有问题

18:05.350 --> 18:06.350
是吧

18:06.350 --> 18:07.350
然后咱们再来测试

18:07.350 --> 18:08.350
最后一个

18:08.350 --> 18:09.350
你看

18:09.350 --> 18:10.350
在这个肉组件测试的时候

18:10.350 --> 18:12.350
我们是不是给它传递了一个

18:12.350 --> 18:13.350
jatter

18:13.350 --> 18:14.350
这样的一个属性

18:14.350 --> 18:15.350
那刚才我也说了

18:15.350 --> 18:16.350
这个jatter

18:16.350 --> 18:17.350
这样给它传递属性

18:17.350 --> 18:18.350
是让这个

18:18.350 --> 18:19.350
紫组件

18:19.350 --> 18:20.350
扣组件

18:20.350 --> 18:21.350
是吧

18:21.350 --> 18:22.350
它有这样的一个排链

18:22.350 --> 18:24.350
然后它自己有这样的一个mage

18:24.350 --> 18:25.350
对吧

18:25.350 --> 18:26.350
那我们是不是也应该

18:26.350 --> 18:28.350
在这个紫组件扣里面

18:28.350 --> 18:29.350
去测试一下

18:29.350 --> 18:31.350
副组件拥有jatter那种情况

18:31.350 --> 18:32.350
我们去测试了

18:32.350 --> 18:33.350
那咱们先把它挂上

18:33.350 --> 18:34.350
好吧

18:34.350 --> 18:35.350
还写个分身用力

18:35.350 --> 18:37.350
都是jatter

18:37.350 --> 18:39.350
然后后面跟一个函鼠

18:39.350 --> 18:40.350
然后咱们把这两句

18:40.350 --> 18:42.350
还是复制一下

18:42.350 --> 18:43.350
那这个时候

18:43.350 --> 18:44.350
是不是就设计到

18:44.350 --> 18:45.350
副组件肉了呀

18:45.350 --> 18:46.350
对吧

18:46.350 --> 18:47.350
那我们先把这个肉组件

18:47.350 --> 18:48.350
给倒入进来

18:48.350 --> 18:55.910
然后呢

18:55.910 --> 18:56.910
这个时候

18:56.910 --> 18:59.910
我们需要让这个扣组件

18:59.910 --> 19:02.910
它有一个副组件

19:02.910 --> 19:03.910
是肉

19:03.910 --> 19:04.910
那怎么去给它设置呢

19:04.910 --> 19:05.910
其实很简单

19:05.910 --> 19:06.910
只要在这里面

19:06.910 --> 19:07.910
在露Mount的时候

19:07.910 --> 19:08.910
给它传第二参数

19:08.910 --> 19:09.910
然后呢

19:09.910 --> 19:10.910
在这里面有个属性

19:10.910 --> 19:12.910
Pirate component

19:12.910 --> 19:13.910
然后让它是谁呢

19:13.910 --> 19:14.910
让它是肉

19:14.910 --> 19:15.910
就可以了

19:15.910 --> 19:16.910
就是这么简单

19:16.910 --> 19:18.910
给它设置这样一个副组件

19:18.910 --> 19:19.910
在测试环境下

19:19.910 --> 19:20.910
给它设置一个副组件

19:20.910 --> 19:21.910
然后这个时候

19:21.910 --> 19:22.910
我们来测试什么呢

19:22.910 --> 19:23.910
我们先来测试一下

19:23.910 --> 19:25.910
我们这个肉组件

19:25.910 --> 19:26.910
测试一下肉组件

19:26.910 --> 19:28.910
它的副组件的名字

19:28.910 --> 19:29.910
是不是叫做ER肉

19:29.910 --> 19:30.910
好吧

19:30.910 --> 19:31.910
来 断言一下

19:31.910 --> 19:32.910
那就是这个

19:32.910 --> 19:34.910
Rapper

19:34.910 --> 19:37.910
VM.Pirate

19:37.910 --> 19:39.910
DollarOptions

19:39.910 --> 19:40.910
拿到它这个里面的参数

19:40.910 --> 19:42.910
拿到它里面的内幕

19:42.910 --> 19:43.910
看看它是不是

19:43.910 --> 19:44.910
什么

19:44.910 --> 19:46.910
是不是这个ER肉

19:46.910 --> 19:48.910
OK

19:48.910 --> 19:49.910
看一下

19:49.910 --> 19:55.300
你看

19:55.300 --> 19:56.300
是吧

19:56.300 --> 19:57.300
没有问题

19:57.300 --> 19:58.300
对不对

19:58.300 --> 19:59.300
OK 那接下来

19:59.300 --> 20:00.300
我们要怎么做呢

20:00.300 --> 20:01.300
我们去给Pirate

20:01.300 --> 20:02.300
去设置一个值

20:02.300 --> 20:03.300
在它上面

20:03.300 --> 20:04.300
去加上一个什么呢

20:04.300 --> 20:06.300
让它上面的一个

20:06.300 --> 20:07.300
jatter

20:07.300 --> 20:08.300
懂于解

20:08.300 --> 20:09.300
懂于二十

20:09.300 --> 20:10.300
是吧

20:10.300 --> 20:11.300
然后我们就可以去断言了

20:11.300 --> 20:12.300
断言谁呢

20:12.300 --> 20:13.300
断言扣ERE

20:13.300 --> 20:14.300
上面的style

20:14.300 --> 20:15.300
点

20:15.300 --> 20:16.300
pading

20:16.300 --> 20:17.300
语

20:17.300 --> 20:18.300
哎呀

20:18.300 --> 20:19.300
它这个提示

20:19.300 --> 20:20.300
我真的很不喜欢呀

20:20.300 --> 20:21.300
总是给我瞎提示

20:21.300 --> 20:22.300
是吧

20:22.300 --> 20:23.300
点

20:23.300 --> 20:24.300
pading

20:24.300 --> 20:25.300
你看看

20:25.300 --> 20:26.300
哎呀 真的是好气

20:26.300 --> 20:30.590
OK

20:30.590 --> 20:31.590
这样先没有问题了

20:31.590 --> 20:32.590
是吧

20:32.590 --> 20:34.590
pading left

20:34.590 --> 20:35.590
2B

20:35.590 --> 20:37.590
是一个实验组

20:37.590 --> 20:38.590
好 那我们再判断一下

20:38.590 --> 20:39.590
这个

20:39.590 --> 20:40.590
pading right

20:40.590 --> 20:46.100
OK

20:46.100 --> 20:52.680
来 看一看

20:52.680 --> 20:53.680
OK 没的问题

20:53.680 --> 20:54.680
是吧

20:54.680 --> 20:55.680
那你看

20:55.680 --> 20:56.680
在这个扣组电里面

20:56.680 --> 20:58.680
是不是跟在肉组电里面一样的

20:58.680 --> 20:59.680
基本上每一个

20:59.680 --> 21:02.680
实际测试的用力上

21:02.680 --> 21:03.680
都有这两句

21:03.680 --> 21:04.680
是吧

21:04.680 --> 21:05.680
那我们可以怎么样

21:05.680 --> 21:06.680
我们还是

21:06.680 --> 21:07.680
来写在外面

21:07.680 --> 21:08.680
写在这个生命中期

21:08.680 --> 21:09.680
含书里面

21:09.680 --> 21:10.680
那首先还是得去

21:10.680 --> 21:12.680
拉提一个wrapper

21:12.680 --> 21:15.680
我们再拉提一个扣ERE

21:15.680 --> 21:16.680
OK

21:16.680 --> 21:17.680
然后再来写个before each

21:17.680 --> 21:21.660
然后在这里面

21:21.660 --> 21:23.660
让wrapper懂语它

21:23.660 --> 21:30.020
然后让扣ERE懂语它

21:30.020 --> 21:31.020
OK

21:31.020 --> 21:32.020
那在这里面

21:32.020 --> 21:33.020
就可以不要了

21:33.020 --> 21:34.020
是吧

21:34.020 --> 21:36.020
这里面也不要了

21:36.020 --> 21:37.020
这里也不要了

21:37.020 --> 21:41.180
OK

21:41.180 --> 21:43.180
那其实在这里面

21:43.180 --> 21:45.180
这两句还是不能省的

21:45.180 --> 21:46.180
为什么呢

21:46.180 --> 21:47.180
因为在这话

21:47.180 --> 21:48.180
我们需要给它一个parroton component

21:48.180 --> 21:49.180
对吧

21:49.180 --> 21:50.180
如果说要省的话

21:50.180 --> 21:51.180
我们就得在上面

21:51.180 --> 21:53.180
把这句给加上

21:53.180 --> 21:54.180
就加在这个里面

21:54.180 --> 21:55.180
比如说在这

21:55.180 --> 21:56.180
那这样的话

21:56.180 --> 21:58.180
每一个测试用力里面

21:58.180 --> 21:59.180
它的这个扣组件上

21:59.180 --> 22:01.180
都有这个副组件了

22:01.180 --> 22:02.180
是吧

22:02.180 --> 22:03.180
那咱们还最好不要这样

22:03.180 --> 22:06.180
因为只有在一个测试用力里面的时候

22:06.180 --> 22:07.180
它有需要使用到

22:07.180 --> 22:08.180
这样一个副组件

22:08.180 --> 22:09.180
所以说咱们还是把它

22:09.180 --> 22:10.180
单独放在这

22:10.180 --> 22:11.180
在这个测试用力里面

22:11.180 --> 22:12.180
它就直接

22:12.180 --> 22:14.180
自己这样写就可以了

22:14.180 --> 22:15.180
好吧

22:15.180 --> 22:16.180
这样也不会有什么影响

22:16.180 --> 22:17.180
你看它可以正常的

22:17.180 --> 22:20.180
去运行成功

22:20.180 --> 22:21.180
好吧

22:21.180 --> 22:22.180
OK

22:22.180 --> 22:23.180
因为这个parroton component

22:23.180 --> 22:25.180
它只能写在这个对象里面

22:25.180 --> 22:27.180
它不会像这个set props 一样

22:27.180 --> 22:28.180
就是设置属性一样

22:28.180 --> 22:29.180
它有这样的一个方法

22:29.180 --> 22:31.180
那给它设置这样一个副组件

22:31.180 --> 22:33.180
它没有一个对应的一个方法

22:33.180 --> 22:34.180
没有办法

22:34.180 --> 22:35.180
我们只能写在这里了

22:35.180 --> 22:36.180
所以说这块

22:36.180 --> 22:37.180
就和其他地面

22:37.180 --> 22:38.180
有一些些不太一样

22:38.180 --> 22:39.180
好吧

22:39.180 --> 22:40.180
OK

22:40.180 --> 22:41.180
那其实关于测试

22:41.180 --> 22:42.180
咱们就写完了

22:42.180 --> 22:44.180
其实测试是不是很简单呀

22:44.180 --> 22:45.180
也没有什么态度的逻辑可言

22:45.180 --> 22:46.180
是吧

22:46.180 --> 22:48.180
也没有什么

22:48.180 --> 22:49.180
接触一些新的东西

22:49.180 --> 22:50.180
是吧

22:50.180 --> 22:51.180
写下来就像飞起来一样

22:51.180 --> 22:52.180
比较顺畅

22:52.180 --> 22:53.180
是吧

22:53.180 --> 22:54.180
OK

22:54.180 --> 22:55.180
那这样啊

22:55.180 --> 22:57.180
关于我们这个layout布局

22:57.180 --> 22:59.180
当中的相关组件

22:59.180 --> 23:00.180
我们就都完事了

23:00.180 --> 23:03.180
从编写到重新写SARS

23:03.180 --> 23:04.180
然后呢

23:04.180 --> 23:05.180
到去测试这些组件

23:05.180 --> 23:07.180
就这一套流程就完事了

23:07.180 --> 23:08.180
好吧

23:08.180 --> 23:09.180
咱们就开启

23:09.180 --> 23:11.180
下一张去编写另外的一些组件了

23:11.180 --> 23:12.180
OK

23:12.180 --> 23:13.180
那这一块呢

23:13.180 --> 23:14.180
我们还是

23:14.180 --> 23:15.180
得做一件事情

23:15.180 --> 23:17.180
我们还是得去那个

23:17.180 --> 23:19.180
把我们这个int一下

23:19.180 --> 23:20.180
是吧

23:20.180 --> 23:21.180
修复一下

23:21.180 --> 23:23.180
它可能有一些

23:23.180 --> 23:25.180
代码格式上的一些问题

23:25.180 --> 23:26.180
咱们修复一下

23:26.180 --> 23:29.260
然后再去提交

23:29.260 --> 23:30.260
看看它能不能

23:30.260 --> 23:33.960
包出了什么错误

23:33.960 --> 23:34.960
这么多错误

23:34.960 --> 23:35.960
是吧

23:35.960 --> 23:38.960
wrapper is already declared

23:38.960 --> 23:39.960
这个作用语

23:39.960 --> 23:40.960
但是

23:40.960 --> 23:42.960
它又被声明了

23:42.960 --> 23:43.960
是吧

23:43.960 --> 23:44.960
哎呀

23:44.960 --> 23:45.960
这样啊

23:45.960 --> 23:46.960
是这样的

23:46.960 --> 23:47.960
因为它说

23:47.960 --> 23:48.960
它在这样的一个

23:48.960 --> 23:49.960
我们这个before

23:49.960 --> 23:50.960
意识这个函数里面

23:50.960 --> 23:51.960
它已经被

23:51.960 --> 23:53.960
声明过了这样的wrapper了

23:53.960 --> 23:54.960
是吧

23:54.960 --> 23:55.960
但是呢

23:55.960 --> 23:56.960
我们修复一下

23:56.960 --> 23:57.960
还是重新声明了

23:57.960 --> 23:58.960
那怎么办呢

23:58.960 --> 23:59.960
那如果说

23:59.960 --> 24:00.960
我们不想在

24:00.960 --> 24:02.960
每一个这个测试语言里面

24:02.960 --> 24:04.960
都去写这两句的话

24:04.960 --> 24:05.960
就是说这个wrapper

24:05.960 --> 24:06.960
扣一二一啊

24:06.960 --> 24:07.960
那怎么办呢

24:07.960 --> 24:08.960
我们还是

24:08.960 --> 24:09.960
把这样的一个

24:09.960 --> 24:11.960
给它设置这个parrot

24:11.960 --> 24:12.960
这样的一个

24:12.960 --> 24:13.960
副组件的这个

24:13.960 --> 24:14.960
发法

24:14.960 --> 24:15.960
拿到上面去设置

24:15.960 --> 24:16.960
好吧

24:17.960 --> 24:19.960
还是拿到这上面吧

24:19.960 --> 24:21.960
就是想怎么去写

24:21.960 --> 24:23.960
就是你可以自己衡量

24:23.960 --> 24:24.960
可以自己衡量

24:24.960 --> 24:25.960
这样去删掉

24:25.960 --> 24:29.490
ok

24:29.490 --> 24:31.490
这个时候我们再来运行一下

24:32.490 --> 24:33.490
因为刚才我们就什么

24:33.490 --> 24:35.490
就已经重复声明了

24:35.490 --> 24:40.940
对吧

24:40.940 --> 24:41.940
或者是怎么样

24:41.940 --> 24:42.940
或者是你可以

24:42.940 --> 24:45.940
在这个里面用wall

24:45.940 --> 24:46.940
是吧用wall就可以

24:46.940 --> 24:47.940
重新的声明了

24:47.940 --> 24:48.940
但是还是建议不要用wall

24:48.940 --> 24:49.940
还是这样写吧

24:49.940 --> 24:50.940
好吧

24:50.940 --> 24:51.940
ok

24:51.940 --> 24:52.940
那现在就没有什么

24:52.940 --> 24:53.940
代码格式上的错误了

24:53.940 --> 24:54.940
ok

24:54.940 --> 24:55.940
那接下来呢

24:55.940 --> 24:56.940
咱们就

24:56.940 --> 24:57.940
干嘛了

24:57.940 --> 24:58.940
提交代码了是吧

24:59.940 --> 25:00.940
ok

25:00.940 --> 25:01.940
那就来一个

25:01.940 --> 25:02.940
get add

25:02.940 --> 25:03.940
点

25:03.940 --> 25:04.940
然后呢

25:04.940 --> 25:05.940
get commit

25:05.940 --> 25:06.940
干 m

25:06.940 --> 25:07.940
这是第二章的

25:07.940 --> 25:08.940
第五节

25:08.940 --> 25:09.940
2.1

25:10.940 --> 25:11.940
ok

25:11.940 --> 25:12.940
然后接着咱们

25:12.940 --> 25:13.940
push一下

25:13.940 --> 25:14.940
get push

25:14.940 --> 25:15.940
arrange

25:15.940 --> 25:19.940
2.1.测试组件

25:19.940 --> 25:20.940
ok

25:21.940 --> 25:22.940
等它去push啊

25:27.300 --> 25:28.300
push成功了是吧

25:28.300 --> 25:29.300
push成功了之后呢

25:29.300 --> 25:31.300
我们再去到这个

25:32.300 --> 25:33.300
这个叫什么呢

25:33.300 --> 25:34.300
主分支是吧

25:34.300 --> 25:36.300
插到master

25:36.300 --> 25:37.300
ok

25:37.300 --> 25:38.300
然后咱们merge一下

25:39.300 --> 25:40.300
merge

25:40.300 --> 25:44.300
这个2.1.测试组件

25:45.300 --> 25:46.300
ok

25:46.300 --> 25:49.500
然后不是

25:49.500 --> 26:01.840
arrange master

26:01.840 --> 26:02.840
好慢呀

26:02.840 --> 26:03.840
ok

26:03.840 --> 26:04.840
然后咱们来

26:04.840 --> 26:08.690
刷新一下啊

26:08.690 --> 26:09.690
看一下master

26:09.690 --> 26:10.690
你看

26:10.690 --> 26:11.690
被重新提交了是吧

26:11.690 --> 26:12.690
然后再看一下分支

26:12.690 --> 26:13.690
分支上有没有

26:13.690 --> 26:14.690
第二章第五节

26:14.690 --> 26:15.690
有了是吧

26:15.690 --> 26:17.690
那这个编写lealt布局

26:17.690 --> 26:18.690
就正式结束了

26:18.690 --> 26:20.690
咱们下一张再见

