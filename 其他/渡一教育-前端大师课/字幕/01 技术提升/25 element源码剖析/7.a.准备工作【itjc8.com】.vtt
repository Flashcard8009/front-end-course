WEBVTT

00:00.050 --> 00:04.050
OK 那从这几课开始呢 我们就进入到第七章的学习了

00:04.050 --> 00:07.050
我们来学习一下八层按钮这个组件

00:07.050 --> 00:10.050
那在学习它之前呢 先跟大家说一件事情

00:10.050 --> 00:12.050
就是说呢 从这几课开始

00:12.050 --> 00:16.050
我们就不再将Git的操作录制到视频当中来了

00:16.050 --> 00:19.050
因为我们在前面六章的课程当中呢

00:19.050 --> 00:21.050
每一节课都有Git的操作

00:21.050 --> 00:24.050
那每节课的操作呢 步骤都是一样的

00:24.050 --> 00:26.050
所以呢 我们就不再去重复了

00:26.050 --> 00:28.050
因为这个步骤非常的简单啊

00:28.050 --> 00:30.050
那虽然说视频中没有了

00:30.050 --> 00:33.050
但是呢 也不耽误你们自己去操作自己的Git啊

00:33.050 --> 00:36.050
你们还是可以按照原来的那个步骤一步一步去做

00:36.050 --> 00:38.050
就可以了啊 OK

00:38.050 --> 00:41.050
那咱们这节课是来讲这个八层按钮

00:41.050 --> 00:43.050
但是呢 我们先不去

00:43.050 --> 00:45.050
设计它里面的一些个功能啊

00:45.050 --> 00:47.050
里面的逻辑啊 以及按钮的样式啊

00:47.050 --> 00:50.050
咱们这节课就只是来做一个准备工作

00:50.050 --> 00:53.050
把这个按钮 把这个组件所需要的文件呢

00:53.050 --> 00:55.050
都先建立好

00:55.050 --> 00:57.050
然后从下节课开始

00:57.050 --> 01:00.050
再正式的去写它的样式 写逻辑 写功能

01:00.050 --> 01:01.050
OK吧 好了

01:01.050 --> 01:03.050
那现在呢 我们来打开冰机器

01:03.050 --> 01:05.050
在这里面呢 找到Element文件夹

01:05.050 --> 01:08.050
先建一个文件夹 叫做Button

01:09.050 --> 01:11.050
稍等一下啊 把这个键盘打开

01:11.050 --> 01:14.810
OK

01:14.810 --> 01:16.810
建一个Button 叫你一个文件夹

01:16.810 --> 01:18.810
然后在这里面呢 来新建一个

01:18.810 --> 01:20.810
index.js文件

01:20.810 --> 01:23.810
再来新建一个src文件夹

01:23.810 --> 01:27.810
在这里面呢 再来新建一个Button.vio组件

01:27.810 --> 01:30.810
OK 我们来写一个Template模板

01:30.810 --> 01:32.810
在这个模板当中呢

01:33.810 --> 01:35.810
诶 同学也认了Template

01:35.810 --> 01:37.810
诶 没有提示啊

01:37.810 --> 01:39.810
这样 OK

01:39.810 --> 01:40.810
来写一个Template

01:40.810 --> 01:41.810
然后在这里面呢

01:41.810 --> 01:43.810
我们来写下最外层的复原素

01:43.810 --> 01:45.810
那我们呢 这个是一个按钮

01:45.810 --> 01:47.810
那按钮需要的元素是什么

01:47.810 --> 01:48.810
就是一个button了

01:48.810 --> 01:50.810
所以说 来写个button就可以了

01:50.810 --> 01:52.810
然后接着

01:53.810 --> 01:55.810
在这个当中来写一个按钮

01:55.810 --> 01:56.810
这样一个汉字

01:56.810 --> 01:57.810
OK

01:57.810 --> 01:59.810
那其实我们引入这个组件呢

01:59.810 --> 02:01.810
引入的是这个文件夹

02:01.810 --> 02:03.810
当中的index.js

02:03.810 --> 02:04.810
那为什么要这样做呢

02:04.810 --> 02:06.810
是因为我们要往组件身上

02:06.810 --> 02:08.810
去添加一个install方法

02:08.810 --> 02:10.810
然后让它能够在我们vio的权威当中

02:10.810 --> 02:11.810
去使用 对吧

02:11.810 --> 02:12.810
所以说呢

02:12.810 --> 02:14.810
我们现在还在这个index.js当中

02:14.810 --> 02:16.810
将我们建好的这个button组件

02:16.810 --> 02:18.810
引入进来

02:18.810 --> 02:20.810
所以来一个import

02:20.810 --> 02:21.810
button

02:22.810 --> 02:23.810
from

02:23.810 --> 02:25.810
当前的路就是下的src下的

02:25.810 --> 02:27.810
button.vio文件

02:27.810 --> 02:28.810
OK

02:28.810 --> 02:29.810
然后接着

02:29.810 --> 02:30.810
往这个button身上

02:30.810 --> 02:32.810
去添加一个install方法

02:32.810 --> 02:34.810
让它等于一个函数

02:34.810 --> 02:35.810
vio

02:35.810 --> 02:37.810
这样等于一个建筒函数

02:37.810 --> 02:38.810
那这个函数呢

02:38.810 --> 02:40.810
会去接收一个vio参数

02:40.810 --> 02:42.810
因为我们去使用这个组件的时候

02:42.810 --> 02:44.810
会去利用vio.youse

02:44.810 --> 02:45.810
去用这个组件

02:45.810 --> 02:46.810
那么呢

02:46.810 --> 02:48.810
它就会自动的去调用这个

02:48.810 --> 02:49.810
组件的install方法

02:49.810 --> 02:50.810
然后呢

02:50.810 --> 02:51.810
去执行的时候

02:51.810 --> 02:52.810
vio会自动的

02:52.810 --> 02:53.810
将这样的一个vio

02:53.810 --> 02:54.810
作为参数

02:54.810 --> 02:56.810
传给这个函数

02:56.810 --> 02:57.810
我们就可以在这里面

02:57.810 --> 02:58.810
去使用它了

02:58.810 --> 02:59.810
OK

02:59.810 --> 03:00.810
那在这块呢

03:00.810 --> 03:02.810
我们用这个vio.component

03:02.810 --> 03:03.810
将这个组件

03:03.810 --> 03:05.810
变成是一个拳举组件

03:05.810 --> 03:07.810
那这个第一个参数是什么

03:07.810 --> 03:09.810
是这个组件的名字

03:09.810 --> 03:10.810
那所以说

03:10.810 --> 03:12.810
我现在还在这个button.vio当中

03:12.810 --> 03:13.810
给它来起个名字

03:13.810 --> 03:14.810
来写一个script

03:14.810 --> 03:15.810
然后呢

03:15.810 --> 03:17.810
跟你们来写一个name

03:17.810 --> 03:18.810
叫什么的

03:18.810 --> 03:19.810
叫elbutton

03:19.810 --> 03:20.810
OK

03:20.810 --> 03:21.810
那这块的名字

03:21.810 --> 03:24.810
就可以直接用button.name

03:24.810 --> 03:25.810
然后呢

03:25.810 --> 03:26.810
第二个参数

03:26.810 --> 03:28.810
是这个组件的对象

03:28.810 --> 03:29.810
再来一个button

03:29.810 --> 03:30.810
OK

03:30.810 --> 03:31.810
讲完了之后呢

03:31.810 --> 03:32.810
我们再将这个button

03:32.810 --> 03:34.810
给导出出去

03:34.810 --> 03:35.810
就一切

03:35.810 --> 03:36.810
就大功告成了

03:36.810 --> 03:37.810
导出了之后呢

03:37.810 --> 03:39.810
我们再找到element

03:39.810 --> 03:40.810
它的index.js

03:40.810 --> 03:42.810
将这个button.vio

03:42.810 --> 03:43.810
导入进来

03:43.810 --> 03:45.810
import

03:45.810 --> 03:46.810
button

03:46.810 --> 03:47.810
from

03:47.810 --> 03:48.810
at

03:48.810 --> 03:49.810
element

03:49.810 --> 03:51.810
这个文件夹下的button

03:51.810 --> 03:52.810
这个文件夹

03:52.810 --> 03:53.810
因为如果说

03:53.810 --> 03:54.810
你引入是一个文件夹的话

03:54.810 --> 03:56.810
它会自动的去里面

03:56.810 --> 03:58.810
找到index.js文件

03:58.810 --> 03:59.810
去使用它导出的

03:59.810 --> 04:00.810
这么一个值

04:00.810 --> 04:01.810
OK

04:01.810 --> 04:02.810
然后接着

04:02.810 --> 04:03.810
我们再把这个

04:03.810 --> 04:04.810
按有这个组件

04:04.810 --> 04:06.810
放到这个components

04:06.810 --> 04:07.810
数组当中

04:07.810 --> 04:08.810
然后接着它会去

04:08.810 --> 04:09.810
便利这个数组

04:09.810 --> 04:11.810
去调用这样的一个方法

04:11.810 --> 04:12.810
OK

04:12.810 --> 04:13.810
然后呢

04:13.810 --> 04:14.810
我们再来走

04:14.810 --> 04:15.810
再把这个组件

04:15.810 --> 04:16.810
导出出去

04:16.810 --> 04:17.810
默认导出一个

04:17.810 --> 04:19.810
然后再整体的导出

04:19.810 --> 04:20.810
因为我们引入的时候

04:20.810 --> 04:21.810
有两种方式

04:21.810 --> 04:22.810
一种是爱个

04:22.810 --> 04:24.810
有一个是全对应

04:24.810 --> 04:25.810
OK

04:25.810 --> 04:26.810
好了

04:26.810 --> 04:27.810
现在我们做完

04:27.810 --> 04:28.810
这部操作之后

04:28.810 --> 04:29.810
在我们的全军当中

04:29.810 --> 04:31.810
就可以去使用这个组件了

04:31.810 --> 04:32.810
在这个app.vio当中

04:32.810 --> 04:33.810
我们来用一下

04:33.810 --> 04:35.810
用一下el-button

04:35.810 --> 04:36.810
因为我们

04:36.810 --> 04:37.810
给这个button

04:37.810 --> 04:38.810
起的名字叫什么

04:38.810 --> 04:39.810
叫做el-button

04:39.810 --> 04:40.810
是大拓风式的

04:40.810 --> 04:41.810
那使用的时候

04:41.810 --> 04:42.810
会变成一个

04:42.810 --> 04:43.810
连线的形式

04:43.810 --> 04:44.810
也可以

04:44.810 --> 04:45.810
OK

04:45.810 --> 04:46.810
那现在看看

04:46.810 --> 04:47.810
录两期当中

04:47.810 --> 04:48.810
是什么样子

04:48.810 --> 04:49.810
看

04:49.810 --> 04:50.810
这个按钮是不是就出现了

04:50.810 --> 04:51.810
但是呢

04:51.810 --> 04:52.810
我们去使用

04:52.810 --> 04:53.810
这个组件的时候

04:53.810 --> 04:55.810
我们可以往它的中间

04:55.810 --> 04:56.810
去插上一些字

04:56.810 --> 04:57.810
你看

04:57.810 --> 04:58.810
这个是两个组件

04:58.810 --> 04:59.810
是一个组件

04:59.810 --> 05:00.810
组件当中

05:00.810 --> 05:01.810
插上一个文字

05:01.810 --> 05:02.810
有它的一个test

05:02.810 --> 05:03.810
那好

05:03.810 --> 05:04.810
我来使用一下

05:04.810 --> 05:05.810
看它会不会变成

05:05.810 --> 05:06.810
默认按钮呢

05:07.810 --> 05:08.810
来看

05:08.810 --> 05:09.810
它还是不会的

05:09.810 --> 05:10.810
你刷新几次

05:10.810 --> 05:11.810
它都不会

05:11.810 --> 05:12.810
为什么呀

05:12.810 --> 05:13.810
因为我们已经

05:13.810 --> 05:14.810
写死了

05:14.810 --> 05:15.810
这写死的就是按钮

05:15.810 --> 05:16.810
那如果说

05:16.810 --> 05:17.810
你想让它中间展示的

05:17.810 --> 05:18.810
是你写在这个

05:18.810 --> 05:19.810
组件中间的

05:19.810 --> 05:20.810
这个文字的话呢

05:20.810 --> 05:21.810
你可以使用什么

05:21.810 --> 05:22.810
可以使用插槽是吧

05:22.810 --> 05:23.810
所以这块

05:23.810 --> 05:24.810
我们就用插槽

05:24.810 --> 05:25.810
放到这里

05:26.810 --> 05:27.810
比如说你外面

05:27.810 --> 05:28.810
写的什么

05:28.810 --> 05:29.810
我这里面

05:29.810 --> 05:30.810
就显示了什么

05:31.810 --> 05:32.810
OK

05:32.810 --> 05:33.810
看

05:33.810 --> 05:34.810
这就变成默认按钮了

05:34.810 --> 05:35.810
你外面

05:35.810 --> 05:36.810
怎么改都可以了

05:36.810 --> 05:37.810
比如说默认按钮

05:37.810 --> 05:38.810
1 2 3

05:38.810 --> 05:39.810
它也变了

05:39.810 --> 05:40.810
对吧

05:40.810 --> 05:41.810
OK那好了

05:41.810 --> 05:42.810
那这部操作

05:42.810 --> 05:43.810
那接着呢

05:43.810 --> 05:44.810
我们还需要去

05:44.810 --> 05:45.810
建一个

05:45.810 --> 05:46.810
关于batton的

05:46.810 --> 05:47.810
一个钥匙的文件

05:47.810 --> 05:48.810
所以说

05:48.810 --> 05:49.810
我们找到sass

05:49.810 --> 05:50.810
找到simchalk

05:50.810 --> 05:51.810
在这个里面来

05:51.810 --> 05:53.810
建一个batton.sass文件

05:53.810 --> 05:55.810
那它里面有什么

05:55.810 --> 05:56.810
咱们先不管

05:56.810 --> 05:57.810
把文件给建好了

05:57.810 --> 05:58.810
建好了之后呢

05:58.810 --> 06:00.810
我们要去引入这个文件

06:00.810 --> 06:01.810
那整体是在哪儿

06:01.810 --> 06:02.810
引入的呀

06:02.810 --> 06:03.810
是不是在这个simchalk的

06:03.810 --> 06:04.810
index.sass当中

06:04.810 --> 06:05.810
去引入的呀

06:05.810 --> 06:06.810
所以我们这块

06:06.810 --> 06:08.810
直接按input一个

06:08.810 --> 06:10.810
这个当前默认下的

06:10.810 --> 06:11.810
batton.sass

06:11.810 --> 06:14.570
就OK了

06:14.570 --> 06:15.570
来看一看

06:15.570 --> 06:17.570
没有什么问题是吧

06:17.570 --> 06:18.570
OK那我们就已经

06:18.570 --> 06:19.570
把初始的准备

06:19.570 --> 06:20.570
工作给做好了

06:20.570 --> 06:21.570
现在呢

06:21.570 --> 06:22.570
我们来看看

06:22.570 --> 06:23.570
我们这个有没有

06:23.570 --> 06:24.570
eslint

06:24.570 --> 06:25.570
给我们提示的错误

06:25.570 --> 06:26.570
肯定是有的

06:26.570 --> 06:27.570
有很多个这么

06:27.570 --> 06:28.570
呃

06:28.570 --> 06:29.570
呃这个语法

06:29.570 --> 06:30.570
然后或者是你这个

06:30.570 --> 06:31.570
代码风格上

06:31.570 --> 06:32.570
你有错误

06:32.570 --> 06:33.570
我们来修复一下

06:33.570 --> 06:37.460
npm run

06:37.460 --> 06:38.460
lint

06:38.460 --> 06:39.460
刚刚fix

06:39.460 --> 06:40.460
看看有没有一些

06:40.460 --> 06:41.460
是它没有办法

06:41.460 --> 06:43.460
自动修复的

06:44.460 --> 06:45.460
OK没有

06:45.460 --> 06:46.460
那说明我们写的

06:46.460 --> 06:47.460
这个代码是没有

06:47.460 --> 06:48.460
什么实质上那些错误的

06:48.460 --> 06:49.460
只不过是

06:49.460 --> 06:50.460
这个代码可能风格上

06:50.460 --> 06:51.460
这个写的

06:51.460 --> 06:52.460
这个多了个空格

06:52.460 --> 06:53.460
那少了个空格的哈

06:53.460 --> 06:54.460
OK那好了

06:54.460 --> 06:55.460
那现在呢

06:55.460 --> 06:56.460
我们就把初始的

06:56.460 --> 06:57.460
准备工作给做好了

06:57.460 --> 06:59.460
那从下节课开始呢

06:59.460 --> 07:00.460
我们就来正式的

07:00.460 --> 07:01.460
来写它的

07:01.460 --> 07:02.460
一些个功能

07:02.460 --> 07:03.460
和它的样式

