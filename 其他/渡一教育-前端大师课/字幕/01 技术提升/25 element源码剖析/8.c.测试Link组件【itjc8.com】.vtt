WEBVTT

00:00.050 --> 00:03.650
咱们这节课就来测试一下Link这个组件

00:03.650 --> 00:08.410
在测试它之前咱们先对Link组件做一些细节上的处理

00:08.410 --> 00:10.450
这个处理是这样的

00:10.450 --> 00:14.850
Link组件可以直接去监听它的点击事件

00:14.850 --> 00:17.250
也说你去监听组件的点击事件的时候

00:17.250 --> 00:18.930
不用去添加修制服了

00:18.930 --> 00:20.530
直接去监听就可以了

00:20.530 --> 00:24.610
这块的处理和我们在button当中是一样的

00:24.610 --> 00:30.170
你直接去在组件内去监听一下Link的点击事件

00:30.170 --> 00:34.650
然后让它向上去触发一个自定义的事件

00:34.650 --> 00:36.930
名字叫做click 是不就可以了

00:36.930 --> 00:39.810
在处理它之前咱们还是来验证一下吧

00:39.810 --> 00:43.690
咱们来看一看这个iPad的组件是不是确实是这样子处理的

00:43.690 --> 00:46.250
带一个index.html

00:46.850 --> 00:47.970
生成一个结构

00:49.010 --> 00:51.330
再引入一下它的列接

00:51.330 --> 00:53.050
安装这一样

00:53.970 --> 00:56.050
复制一下它给我们提供的链接

00:56.890 --> 01:02.740
一个样式一个组件库

01:02.740 --> 01:14.430
然后再来引入一下view

01:14.430 --> 01:15.230
OK

01:15.230 --> 01:16.990
然后我们来写一个DIV

01:16.990 --> 01:18.550
ID是一个App

01:19.750 --> 01:20.830
再来写一个script

01:22.230 --> 01:25.430
Cost一个vm.unew的view

01:25.430 --> 01:27.990
然后将这个EL挂在上

01:27.990 --> 01:28.750
将App

01:30.030 --> 01:31.190
OK 没有问题

01:31.190 --> 01:35.230
在这个里面来写一个EL-Link组件

01:35.230 --> 01:36.510
来写一个链接

01:40.000 --> 01:41.360
at click

01:42.000 --> 01:46.540
等于一个handle click

01:50.830 --> 01:51.870
来写一个masters

01:54.850 --> 01:56.010
handle click

01:57.450 --> 01:59.050
随便的去打一个指

01:59.050 --> 02:00.850
console.log一个XX

02:01.570 --> 02:02.770
把它打开乱七

02:04.820 --> 02:05.500
控制App

02:07.910 --> 02:08.470
点击

02:08.950 --> 02:10.270
你看它能够打印出来

02:10.270 --> 02:13.710
但是我们来验证一下我们自己写的这个组件

02:13.710 --> 02:16.110
就在这第二个主要链接这块来的

02:16.150 --> 02:17.430
坚定一下它的一个点击事件

02:17.430 --> 02:20.310
让它去执行一个handle click这个函数

02:21.590 --> 02:22.390
click

02:22.390 --> 02:22.790
OK

02:22.790 --> 02:24.270
然后能来写一个masters

02:36.340 --> 02:37.700
console.log

02:38.900 --> 02:39.460
XX

02:41.300 --> 02:42.140
点击这个

02:42.900 --> 02:44.020
然后上线一下

02:44.980 --> 02:45.660
OK

02:45.660 --> 02:46.860
点击点点点击

02:46.860 --> 02:47.540
没有用

02:47.540 --> 02:49.340
只有说当你去给这个click

02:49.340 --> 02:52.460
去添加一个修制服务内贴物的时候

02:52.460 --> 02:54.820
它再不去坚定原生的一个事件

02:54.820 --> 02:56.220
要不然它坚定的是什么

02:56.260 --> 02:59.380
坚定的是这个组件向上出发的一个事件

02:59.380 --> 03:02.420
那咱们这块就可以像去处理bottom组件

03:02.420 --> 03:04.420
一样去处理这个另一个组件了

03:04.420 --> 03:06.700
在组件内去坚定一下它的点击事件

03:08.700 --> 03:10.940
动一个handle click

03:13.120 --> 03:14.200
来写一个masters

03:17.200 --> 03:18.240
handle click

03:18.240 --> 03:23.320
让它向上去到了amate一个click事件

03:23.320 --> 03:26.400
然后不要忘记把它事件对象意义给它作为参数

03:26.400 --> 03:27.400
传过去

03:27.400 --> 03:29.600
那这一会再去执行这个函数的时候

03:29.600 --> 03:31.600
只要去接受这个事件对象意义参数

03:32.080 --> 03:32.760
OK好了

03:32.760 --> 03:37.320
那现在咱们再在这块来看一看有没有成功

03:37.320 --> 03:38.520
点击

03:38.520 --> 03:40.200
这块是不是能够答应出来了

03:40.200 --> 03:41.480
那我们就处理好了

03:41.480 --> 03:45.920
但是这个组件并没有像bottom那样处理起来

03:45.920 --> 03:49.920
那么简单它有意义其他的另外的小细节

03:49.920 --> 03:53.760
就是假如说组件它是一个dataable的

03:53.760 --> 03:55.920
它是一个进用状态的组件的话

03:55.920 --> 03:57.160
它点击它是没用的

03:57.160 --> 03:59.080
它不会去执行这个方法

03:59.160 --> 04:01.640
我现在把它变成是dataable的这样的一个连接

04:01.640 --> 04:02.600
点击连接连接

04:02.600 --> 04:03.400
它没有用

04:03.400 --> 04:05.720
那也就是说在组件内

04:05.720 --> 04:10.280
当它是一个dataable的时候

04:10.280 --> 04:13.880
它不会向上去触发这样的click事件

04:13.880 --> 04:15.720
当它不是dataable的时候

04:15.720 --> 04:16.800
它才会去触发

04:16.800 --> 04:18.360
所以这块我们再判断一下

04:18.360 --> 04:23.240
f.dataable的它是一个价值的时候

04:23.240 --> 04:28.970
我们让它去触发一个click事件

04:28.970 --> 04:29.290
OK

04:29.290 --> 04:31.450
那现在在我们这块来

04:31.450 --> 04:34.210
我们现在去给一个dataable的去坚定一下事件

04:34.210 --> 04:40.610
还是这个主要连接吧

04:40.610 --> 04:41.050
OK

04:41.050 --> 04:43.010
点击点击点击

04:43.010 --> 04:44.530
你看它是不执行的

04:44.530 --> 04:45.290
它是不执行的

04:45.290 --> 04:46.490
我一直在点击

04:46.490 --> 04:47.130
这会干掉

04:48.490 --> 04:48.970
看是吧

04:48.970 --> 04:49.490
OK

04:49.490 --> 04:51.970
然后除了这个dataable的之外

04:51.970 --> 04:54.130
就是如果说你这个连接

04:54.130 --> 04:57.450
它是一个dataable craft属性的连接的话

04:57.450 --> 05:00.970
你的这个click它也不会去执行

05:00.970 --> 05:04.730
因为它会认为你要去开启另外一个新窗口

05:04.970 --> 05:06.610
或者是进行一个超连接

05:06.610 --> 05:08.170
它就会直接去走

05:08.170 --> 05:09.930
它超连接的点击了

05:09.930 --> 05:13.530
而不是去走我们监听点击事件的这个函数

05:13.530 --> 05:15.250
那我们现在给你来写个超连接

05:16.250 --> 05:17.370
by HTTPS

05:19.340 --> 05:20.980
3w.by.do

05:24.520 --> 05:25.840
by.com

05:26.600 --> 05:27.200
OK

05:27.200 --> 05:29.480
然后让它去停下一个

05:29.480 --> 05:30.920
监听了一个点击事件

05:30.920 --> 05:31.800
直接一个handleclick

05:31.800 --> 05:33.800
我们看看能不能够打印出来

05:33.800 --> 05:34.400
点击

05:34.920 --> 05:36.040
它并不会去打印

05:36.040 --> 05:37.160
它并不会去打印

05:37.240 --> 05:38.240
也就是说

05:38.240 --> 05:40.040
咱们在这块去处理的时候

05:40.040 --> 05:42.240
还是要不要判断一下

05:42.240 --> 05:43.640
你的这个link

05:43.640 --> 05:44.520
不是link

05:44.520 --> 05:45.200
horif

05:45.200 --> 05:46.560
是不是也不存在

05:46.560 --> 05:47.480
不存在

05:47.480 --> 05:48.640
它再回去出发

05:48.640 --> 05:49.640
这样子就可以了

05:49.640 --> 05:50.280
好

05:50.280 --> 05:50.880
OK

05:50.880 --> 05:52.840
那这块咱们还要验证一下

05:52.840 --> 05:56.240
给这第一个元素带有horif连接的这个元素

05:56.240 --> 05:58.280
去点击下一个点击事件

05:58.280 --> 05:59.400
然后来看一看

05:59.960 --> 06:00.440
来

06:01.080 --> 06:01.720
点击

06:01.720 --> 06:02.720
这一样打印了吗

06:02.720 --> 06:03.240
没有打印

06:03.240 --> 06:06.200
因为它压根就没有去执行这个handleclick

06:06.200 --> 06:06.520
OK

06:06.520 --> 06:06.800
好了

06:07.120 --> 06:09.840
那这一块咱们就把这个细节给处理好了

06:09.840 --> 06:12.800
那接下来咱们就要对它进行一次测试了

06:12.800 --> 06:15.200
我们要找到tasks文件夹

06:16.800 --> 06:17.600
找到unit

06:17.600 --> 06:19.400
在这里面来新建一个文件

06:19.400 --> 06:23.000
叫做link.spac.js

06:23.680 --> 06:26.160
然后首先我们来引入下link组件

06:28.000 --> 06:31.160
atElement文件夹下的link文件夹

06:31.160 --> 06:33.560
它会自动放咱们找到index.js

06:33.560 --> 06:35.840
接着我们需要对这个组件的意思挂载

06:35.880 --> 06:37.600
shallowMount

06:39.120 --> 06:42.640
fromatView下的tasks.youtube

06:42.640 --> 06:43.440
这条步

06:43.440 --> 06:44.720
接着我们来写个套件

06:44.720 --> 06:45.600
describe

06:46.720 --> 06:49.080
名字是link.view

06:49.680 --> 06:51.200
然后来一个函数

06:51.200 --> 06:52.720
来写一个测试用力

06:56.540 --> 07:01.120
atorView

07:03.670 --> 07:04.430
create

07:10.850 --> 07:13.730
所以它刚刚开始被创建的时候的样子

07:13.730 --> 07:14.290
对不对

07:14.290 --> 07:16.730
那么首先咱们应该拿到这个容器

07:16.730 --> 07:17.370
wrapper

07:17.370 --> 07:18.730
有时候能让它挂载一下

07:18.730 --> 07:20.330
返回了一个包裹的容器

07:21.330 --> 07:22.730
挂的是link这个组件

07:22.730 --> 07:26.370
还要拿到这个link.le这个元素

07:26.370 --> 07:31.530
等于wrapper.vm.dollarel

07:32.330 --> 07:34.330
然后我们来断言一下

07:34.330 --> 07:38.130
看一下link.le它的class list里面

07:39.330 --> 07:40.530
list里面

07:40.530 --> 07:46.930
是不是包含了content.el.link这个class

07:50.580 --> 07:50.940
ok

07:50.940 --> 07:53.780
那现在咱们需要去运行一下测试

07:53.780 --> 07:56.180
npm run past

07:56.180 --> 07:57.180
youtube

07:58.380 --> 07:58.980
unit

07:58.980 --> 07:59.580
unit

08:00.780 --> 08:03.860
看一下

08:03.860 --> 08:04.660
稍微慢是吧

08:04.660 --> 08:05.260
稍微慢

08:05.260 --> 08:05.860
慢没关系

08:05.860 --> 08:06.860
我再来多写几个

08:06.860 --> 08:07.660
8

08:07.660 --> 08:10.860
这个下面要测试type这个属性

08:10.860 --> 08:11.660
然后呢

08:11.660 --> 08:13.860
还要去测试谁呢

08:13.860 --> 08:16.860
测试这个type之后应该是什么

08:16.860 --> 08:18.060
我看看啊

08:18.060 --> 08:20.060
type之后是android

08:20.060 --> 08:21.260
android

08:22.260 --> 08:24.260
android

08:24.260 --> 08:24.660
然后呢

08:24.660 --> 08:26.260
这里一个函数

08:26.260 --> 08:28.170
ok

08:28.170 --> 08:30.170
这两个先诸试一下啊

08:30.170 --> 08:31.370
看一看

08:31.370 --> 08:32.770
有没有过呀

08:33.770 --> 08:35.770
fuel的又出错了

08:35.770 --> 08:36.770
出错了

08:36.770 --> 08:37.770
哪里出错了呢

08:37.770 --> 08:38.770
class list

08:38.770 --> 08:39.370
啊

08:39.370 --> 08:39.770
这是什么

08:39.770 --> 08:41.770
class list

08:41.770 --> 08:46.660
那这个就过了

08:46.660 --> 08:47.460
那其实呢

08:47.460 --> 08:48.860
咱们这个组件呢

08:48.860 --> 08:51.060
在最开始被创建出来的时候

08:51.060 --> 08:53.460
它除了有一个el.link之外

08:53.460 --> 08:55.060
它还有什么

08:55.060 --> 08:57.060
它是不是还有另外的一个class

08:57.060 --> 08:58.460
是isandroid吧

08:58.460 --> 08:59.460
因为它默认

08:59.460 --> 09:01.460
就认为你是带下发现的一种情况

09:01.460 --> 09:03.460
android这个属性模式是一个处

09:03.460 --> 09:04.660
所以咱们再来判断一下

09:04.660 --> 09:08.880
这个class的存不存在

09:08.880 --> 09:11.480
那就让它去tenten一个

09:11.480 --> 09:13.480
isandroid

09:13.480 --> 09:21.140
ok

09:21.140 --> 09:22.140
那这个也过了

09:22.140 --> 09:22.540
接着呢

09:22.540 --> 09:24.340
咱们再测试type这个属性

09:24.340 --> 09:26.340
那测试这个type属性呢

09:26.340 --> 09:27.940
咱们还是需要用到rocker

09:27.940 --> 09:29.740
还是需要用到link erre

09:29.740 --> 09:32.340
所以说我们应该怎么去处理啊

09:32.540 --> 09:34.540
这块呢再带着大家去写一遍啊

09:34.540 --> 09:35.740
再下一个组件

09:35.740 --> 09:37.340
我看看下个组件是什么

09:37.340 --> 09:38.140
这个

09:38.940 --> 09:40.340
radio definitely花的时候

09:40.340 --> 09:41.340
我就不带大家去写了

09:41.340 --> 09:42.740
我就直接这样子就写了

09:42.740 --> 09:45.340
我们需要在这个生命中间寒兽里面

09:45.340 --> 09:47.340
去给它去附上一个纸

09:47.340 --> 09:50.140
这样子我们就不用说在每一个测试用力里面

09:50.140 --> 09:51.340
都去执行一遍

09:51.340 --> 09:53.940
去订阅wrapper和订阅link erre来啊

09:53.940 --> 09:57.340
所以我们在处理的时候就来light一个wrapper

09:57.340 --> 10:00.140
然后再来light一个link erre

10:00.140 --> 10:02.140
接着来写一个被for

10:02.140 --> 10:03.140
被for

10:03.140 --> 10:09.540
异耻

10:09.540 --> 10:12.740
在这里面对wrapper的link erre去复制

10:12.740 --> 10:14.540
把这个直接粘过来就可以了

10:14.540 --> 10:16.340
那在下次测试的时候呢

10:16.340 --> 10:17.740
就是radio的时候呢

10:17.740 --> 10:19.340
我就直接把这部书写上了哈

10:19.340 --> 10:21.140
因为大家都懂都会了哈

10:22.340 --> 10:22.940
ok

10:22.940 --> 10:24.140
那在type这一块呢

10:24.140 --> 10:26.140
我们需要通过这个wrapper

10:26.140 --> 10:27.940
去给它设置一个属性

10:27.940 --> 10:29.140
就wrapper

10:30.540 --> 10:31.340
第2

10:31.340 --> 10:32.340
set

10:32.340 --> 10:33.740
probs

10:33.740 --> 10:35.140
属性的值是tap

10:35.140 --> 10:36.740
值呢是一个success

10:37.740 --> 10:40.340
当你给它值传过去一个success的时候呢

10:40.340 --> 10:42.340
就去判断一下这个list

10:42.340 --> 10:43.740
class list当中

10:43.740 --> 10:47.540
是不是包含 erre 刚link 刚刚success

10:47.540 --> 10:48.540
就可以了

10:50.580 --> 10:50.980
ok

10:50.980 --> 10:51.980
然后再走

10:51.980 --> 10:53.780
下一个是判断underland

10:53.780 --> 10:54.580
那underland呢

10:54.580 --> 10:55.980
其实我们在一开始的时候

10:55.980 --> 10:58.180
就已经判断过这个underland了

10:58.180 --> 10:58.580
那好

10:58.580 --> 10:59.380
那我们现在呢

10:59.380 --> 11:01.580
就给它传递过去一个underland属性

11:01.580 --> 11:03.980
让它是一个false的一个形式

11:03.980 --> 11:04.980
我们来看一看

11:04.980 --> 11:06.380
这个class列表里面

11:06.380 --> 11:07.580
是不是不包含

11:07.580 --> 11:09.580
asunderland这个class

11:09.580 --> 11:10.580
然后我们这块呢

11:10.580 --> 11:11.580
还是来复制一下

11:16.050 --> 11:17.250
从这开始复制

11:18.250 --> 11:20.050
wrapper set the probes

11:20.050 --> 11:21.850
值呢是一个underland

11:22.450 --> 11:23.250
然后呢

11:23.250 --> 11:24.450
它的一个value

11:24.450 --> 11:25.250
key是underland

11:25.250 --> 11:27.050
value呢是一个false

11:27.050 --> 11:28.050
然后我们来看看

11:28.050 --> 11:28.850
列表里面

11:28.850 --> 11:30.450
是不是不包含

11:30.450 --> 11:32.450
not to contend

11:32.850 --> 11:33.850
as

11:34.250 --> 11:34.850
gum

11:35.050 --> 11:36.450
underland

11:41.180 --> 11:42.380
你看这个也就过了

11:42.380 --> 11:43.580
这块非常简单

11:43.580 --> 11:44.580
然后再来走

11:44.580 --> 11:47.580
是diceable的一个状态

11:47.580 --> 11:49.380
diceable咱们是不是写完了

11:49.980 --> 11:50.780
没写

11:50.780 --> 11:51.580
你看我这记性

11:51.580 --> 11:52.380
还已经写完了

11:52.380 --> 11:52.780
ok

11:52.780 --> 11:53.780
那咱们再来设置一下

11:53.780 --> 11:55.180
diceable的这个属性

11:55.180 --> 11:56.180
测试一下这个属性

11:56.180 --> 11:57.580
能不能够正常工作

11:57.980 --> 12:00.980
来一个diceable的

12:01.180 --> 12:04.180
然后传过去的diceable的值呢

12:04.180 --> 12:05.380
是一个处

12:05.980 --> 12:07.380
接着我们来判断一下

12:07.380 --> 12:08.980
它的class列表里面

12:08.980 --> 12:10.380
是不是包含了

12:11.380 --> 12:12.180
as

12:12.780 --> 12:13.380
gum

12:13.980 --> 12:15.380
diceable的

12:16.780 --> 12:17.380
ok

12:17.380 --> 12:18.780
然后咱们再往下走

12:18.780 --> 12:21.380
测完这个diceable属性了之后呢

12:21.380 --> 12:22.380
哎没走

12:22.380 --> 12:22.980
不能走了

12:22.980 --> 12:23.980
还有问题啊

12:24.380 --> 12:25.580
你看它说的

12:25.580 --> 12:27.980
不包含哎有问题了

12:27.980 --> 12:29.780
它就是得了这个值

12:29.980 --> 12:31.580
是没有的

12:31.580 --> 12:32.980
有一个as

12:32.980 --> 12:33.580
underland

12:33.980 --> 12:35.180
然后没有diceable的

12:35.180 --> 12:36.580
那可能是有问题了

12:36.580 --> 12:37.380
看一下传的值

12:37.380 --> 12:38.580
你看这边写错了

12:39.580 --> 12:40.780
把这个改一下

12:42.550 --> 12:42.950
ok

12:42.950 --> 12:43.950
再来看一看

12:46.560 --> 12:47.560
啊这会就过了

12:47.560 --> 12:49.360
那咱们就继续往下走吧

12:49.960 --> 12:51.760
接着diceable测完了之后呢

12:51.760 --> 12:52.160
是不是

12:52.160 --> 12:53.160
最后一个了

12:53.160 --> 12:54.160
是iCloud

12:54.160 --> 12:54.960
啊

12:54.960 --> 12:55.560
hraff

12:55.560 --> 12:56.160
hraff

12:56.160 --> 12:56.760
ok

12:56.760 --> 12:57.760
给大家测试一下

12:57.760 --> 12:58.360
hraff

13:01.740 --> 13:02.140
然后呢

13:02.140 --> 13:04.140
传过去的值是一个

13:04.140 --> 13:04.540
呃

13:04.540 --> 13:05.140
链接

13:05.140 --> 13:06.540
来一个http

13:06.540 --> 13:07.340
as

13:07.340 --> 13:08.540
3w

13:08.540 --> 13:09.140
2

13:09.140 --> 13:10.740
2.com

13:10.740 --> 13:11.140
然后呢

13:11.140 --> 13:12.940
我们来判断一下

13:12.940 --> 13:13.940
这个元素

13:13.940 --> 13:15.140
它的身上

13:15.140 --> 13:17.140
是不是有这样的一个属性

13:17.140 --> 13:17.940
和hraff

13:17.940 --> 13:19.740
它的值是hdbs

13:19.740 --> 13:20.940
百度点com

13:20.940 --> 13:21.740
清楚了吧

13:21.740 --> 13:22.140
那好

13:22.140 --> 13:23.940
那我们还是拿到rapper

13:25.740 --> 13:26.340
rapper

13:26.340 --> 13:26.740
然后呢

13:26.740 --> 13:28.340
找到它里面的hraff

13:28.340 --> 13:29.340
这个方法

13:29.340 --> 13:29.940
a

13:29.940 --> 13:30.340
tt

13:30.340 --> 13:30.740
ri

13:30.740 --> 13:31.140
b

13:31.140 --> 13:31.340
e

13:31.340 --> 13:31.940
ud

13:31.940 --> 13:32.940
ps

13:32.940 --> 13:33.540
找到谁呢

13:33.540 --> 13:35.140
找到hraff这个属性

13:35.340 --> 13:37.140
看看它是不是等于

13:37.140 --> 13:38.940
这个百度这个链接啊

13:38.940 --> 13:39.940
就eco

13:40.940 --> 13:41.940
然后这串

13:42.940 --> 13:43.940
扶植一下

13:43.940 --> 13:46.760
沾过来

13:47.760 --> 13:48.760
我们来看一看

13:48.760 --> 13:51.900
ok

13:51.900 --> 13:52.900
这方面没有问题

13:52.900 --> 13:53.900
接着再走

13:53.900 --> 13:54.900
这个是icon啊

13:54.900 --> 13:55.900
来测试一下icon

13:55.900 --> 14:00.780
icon

14:00.780 --> 14:02.780
传过去一个icon

14:02.780 --> 14:03.780
值呢

14:03.780 --> 14:06.780
是一个er-icon-edit

14:06.780 --> 14:11.430
接着我们来看一看

14:11.430 --> 14:13.430
rapper里面的html

14:13.430 --> 14:15.430
它的html里面

14:15.430 --> 14:17.430
是不是包含了一个安援素

14:17.430 --> 14:19.430
这个安援素的class呢是

14:19.430 --> 14:20.430
这个

14:20.430 --> 14:21.430
所以说呢

14:21.430 --> 14:25.130
eco变成是一个contin

14:25.130 --> 14:31.000
然后里面先一个i

14:31.000 --> 14:32.000
安援素

14:32.000 --> 14:33.000
然后呢

14:33.000 --> 14:34.000
class

14:34.000 --> 14:38.000
等于一个er-icon-edit

14:38.000 --> 14:43.830
ok 那这个呢

14:43.830 --> 14:44.830
也就过了

14:44.830 --> 14:46.830
接着咱们在最后测试一个什么呢

14:46.830 --> 14:48.830
测试一个点击事件啊

14:48.830 --> 14:49.830
点击事件

14:49.830 --> 14:50.830
这个点击事件呢

14:50.830 --> 14:52.830
来看看能不能够正常的去

14:52.830 --> 14:55.830
向上去触发一个点击事件

14:55.830 --> 14:57.830
那还是rapper.

14:57.830 --> 14:59.830
用rapper去trigger

14:59.830 --> 15:01.830
去触发一个click 事件

15:01.830 --> 15:08.020
再来看一看

15:08.020 --> 15:10.020
expect的断言一下

15:10.020 --> 15:16.100
rapper当中的amdta的

15:16.100 --> 15:17.100
执行

15:17.100 --> 15:19.100
然后里面的click

15:19.100 --> 15:21.100
是不是to say

15:21.100 --> 15:23.100
是真直

15:23.100 --> 15:25.100
to be to say

15:25.100 --> 15:27.100
to be

15:27.100 --> 15:29.100
to say

15:29.100 --> 15:33.700
ok 看一下

15:33.700 --> 15:34.700
那这个呢就过了

15:34.700 --> 15:36.700
那除了这个之外呢

15:36.700 --> 15:37.700
当你属性是horror f

15:37.700 --> 15:39.700
或者是thisable的时候

15:39.700 --> 15:40.700
有值的时候

15:40.700 --> 15:42.700
他们是不是都不能去触发

15:42.700 --> 15:43.700
这个click 事件啊

15:43.700 --> 15:45.700
那咱们把这也测试一下啊

15:45.700 --> 15:46.700
click

15:46.700 --> 15:48.700
然后呢来一个horror f

15:48.700 --> 15:50.700
然后呢在这之前去触发之前

15:50.700 --> 15:52.700
弄给的是一个prox

15:52.700 --> 15:53.700
就是rapper

15:53.700 --> 15:55.700
这样不复制一下上面这个

15:55.700 --> 16:00.350
在这里面复制上

16:00.350 --> 16:01.350
粘上

16:01.350 --> 16:03.350
ok 然后呢我们去触发点击事件

16:03.350 --> 16:05.350
那我们现在是不是就要看看这个点击

16:05.350 --> 16:06.350
是不是一个价值了

16:06.350 --> 16:08.350
因为它正常的不会触发的

16:08.350 --> 16:10.350
那就是一个to be to say

16:10.350 --> 16:18.910
诶 有问题啊

16:18.910 --> 16:22.910
to be to say

16:22.910 --> 16:24.910
啊 它说to be to say is not a function

16:24.910 --> 16:26.910
那肯定是我这个写错了

16:26.910 --> 16:28.910
写错了 写错了 没事啊

16:28.910 --> 16:29.910
我看一看吧

16:29.910 --> 16:30.910
它不是这么写的吗

16:30.910 --> 16:31.910
这个类似

16:31.910 --> 16:33.910
just 写错了

16:33.910 --> 16:36.910
just, just, just

16:36.910 --> 16:38.910
然后呢 api

16:38.910 --> 16:40.910
expect

16:40.910 --> 16:43.910
然后来来来 往下走

16:43.910 --> 16:47.910
to be to be to be

16:47.910 --> 16:48.910
to say

16:48.910 --> 16:51.910
诶 full say呢

16:51.910 --> 16:54.910
啊 这儿呢 f, a, l, s, y

16:54.910 --> 16:56.910
f, a, l

16:56.910 --> 16:57.910
不是t, a 是吧

16:57.910 --> 16:59.910
算说t 也是加写

16:59.910 --> 17:01.910
也是发的这个s4的这个银行

17:01.910 --> 17:03.910
但是它确实不是这个

17:03.910 --> 17:06.910
那我们再试一下 看看对不对

17:06.910 --> 17:08.910
ok 那这个就对了

17:08.910 --> 17:09.910
那接着呢

17:09.910 --> 17:11.910
我们还是按照这个套路去

17:11.910 --> 17:13.910
我看一看 当你这个dansable的

17:13.910 --> 17:15.910
有值的时候

17:15.910 --> 17:18.910
它是不是也是没有被触发的一个状态啊

17:18.910 --> 17:20.910
dansable的设成一个处

17:20.910 --> 17:28.660
ok 那这个呢

17:28.660 --> 17:30.660
测试用力也就通过了

17:30.660 --> 17:31.660
那么好 那现在的

17:31.660 --> 17:34.660
我们已经把这个link 组件的整体的功能

17:34.660 --> 17:35.660
全都测试完毕了

17:35.660 --> 17:36.660
那咱们这个link 组件呢

17:36.660 --> 17:38.660
就编写完毕了

17:38.660 --> 17:39.660
那咱们从下一节课开始

17:39.660 --> 17:41.660
也就进入到下一章了

17:41.660 --> 17:42.660
下一章呢

17:42.660 --> 17:43.660
我们要来写radio dashing

17:43.660 --> 17:44.660
porn这个组件了

17:44.660 --> 17:46.660
那同学们还是还在课下

17:46.660 --> 17:47.660
把这个组件的用法呢

17:47.660 --> 17:48.660
先来看一看

17:48.660 --> 17:50.660
看来一下这个组件导演

17:50.660 --> 17:51.660
也不是很难吗

17:51.660 --> 17:53.660
应该很快也就写完了

17:53.660 --> 17:54.660
那好 那我们下一节课呢

17:54.660 --> 17:56.660
下一章 我们再见

