WEBVTT

00:00.820 --> 00:04.420
咱们今天的主题是jit当中的工作流

00:04.420 --> 00:06.820
叫jitfollow

00:06.820 --> 00:09.220
我们之前讲的那些指令也好

00:09.220 --> 00:10.340
通话界面也好

00:10.340 --> 00:11.540
他们的一个目的

00:11.540 --> 00:13.060
只是说为了我们更好

00:13.060 --> 00:15.460
就是能会使用jit

00:15.460 --> 00:18.340
但是对于jit的一个使用流程

00:18.340 --> 00:21.580
是说我们应该遵循哪些规范在公司之中

00:21.580 --> 00:22.100
对吧

00:22.100 --> 00:23.780
去更好的使用jit

00:23.780 --> 00:27.580
那就是咱们今天说的叫工作流

00:28.540 --> 00:29.460
那正常来说

00:29.460 --> 00:31.820
咱们知道我们的jit当中

00:31.820 --> 00:33.580
它会有个主分支对吧

00:33.580 --> 00:34.580
master对吧

00:36.940 --> 00:37.740
主分支

00:38.940 --> 00:42.380
基本上可能叫master

00:42.380 --> 00:43.980
或者叫慢

00:43.980 --> 00:44.300
对吧

00:44.300 --> 00:44.980
两个分支

00:45.660 --> 00:46.300
两个分支

00:47.820 --> 00:49.700
这是正常我们开发的时候

00:49.700 --> 00:50.540
会有一个主分支

00:50.540 --> 00:51.980
那主分支里面装的是什么

00:53.420 --> 00:54.380
那主分支的话

00:54.380 --> 00:57.100
就是给用户使用的正常版本

00:57.100 --> 00:59.220
然后包括说主要功能

00:59.220 --> 01:01.900
都在主分中支上清发布

01:01.900 --> 01:03.180
应该是我们做完了

01:03.180 --> 01:04.420
体测没有bug了

01:04.420 --> 01:04.860
对吧

01:04.860 --> 01:06.860
放到主分支上

01:06.860 --> 01:08.540
那么这里面装的

01:08.540 --> 01:10.220
我们应该是提交的弱干版本

01:10.220 --> 01:10.620
对吧

01:10.620 --> 01:11.020
OK

01:11.020 --> 01:12.180
那来几个小圈

01:14.240 --> 01:15.880
再说版本一

01:20.060 --> 01:20.820
版本二

01:20.820 --> 01:21.300
对吧

01:21.300 --> 01:23.740
他们之间是这样的一个联系

01:36.140 --> 01:38.100
包括说各个版本

01:38.100 --> 01:39.300
与版本之间

01:39.740 --> 01:40.780
会呈成这样的联系

01:40.780 --> 01:41.180
对吧

01:41.220 --> 01:42.020
主分支

01:42.020 --> 01:43.820
里面装的完整的版本

01:43.820 --> 01:44.500
那你说

01:44.500 --> 01:46.180
那这里面装的是完整的版本

01:46.180 --> 01:47.140
那就有问题了

01:47.140 --> 01:48.060
那我们开发的时候

01:48.060 --> 01:48.860
在哪开发

01:49.260 --> 01:49.540
对吧

01:49.540 --> 01:50.700
或者说我们在开发工程中

01:50.700 --> 01:52.060
我也不知道他有没有问题

01:53.060 --> 01:53.500
这样的话

01:53.500 --> 01:55.780
就是我们需要一个开发分支

01:56.620 --> 01:57.540
主分支我们说了

01:57.540 --> 02:00.260
用来发布重大版本

02:00.260 --> 02:01.780
但是我们日常开发

02:01.780 --> 02:03.860
还需要一个另外一条线

02:03.860 --> 02:04.300
对吧

02:04.300 --> 02:05.500
在另外一条线上测

02:06.020 --> 02:07.340
我们内部有bug也好

02:07.340 --> 02:08.060
我们解决

02:08.060 --> 02:09.100
或者怎么招也好

02:09.100 --> 02:09.340
对吧

02:09.340 --> 02:10.260
在上面去告

02:10.740 --> 02:11.420
那包括说

02:11.420 --> 02:13.180
把所有问题解决了

02:13.180 --> 02:14.660
我们认得没有问题了

02:14.660 --> 02:16.460
然后再和平到主分支上来

02:16.460 --> 02:17.300
那个分支叫什么

02:17.900 --> 02:18.860
有一个叫做

02:20.260 --> 02:20.580
什么

02:20.580 --> 02:21.420
开发分支

02:23.820 --> 02:24.420
开发分支

02:24.420 --> 02:26.620
那也通常叫做debatterper

02:28.220 --> 02:29.340
或者叫debatterper

02:29.340 --> 02:31.020
这个不同公司教法不一样

02:31.020 --> 02:32.740
但是目的是一样的

02:32.740 --> 02:34.380
就是为了咱们日常开发

02:34.700 --> 02:35.740
这样的一个分支

02:36.020 --> 02:36.580
那同样

02:36.580 --> 02:38.100
里面也是有这样的

02:39.100 --> 02:40.340
里面也是有这种

02:40.340 --> 02:41.980
若干个节点

02:45.100 --> 02:46.300
只不过这个节点

02:46.300 --> 02:48.140
会比它更密集

02:48.660 --> 02:50.140
可能会比这个更密集

02:50.140 --> 02:51.260
那怎么说密集呢

02:51.260 --> 02:52.860
就是因为我们的

02:54.380 --> 02:55.140
高小点

03:03.250 --> 03:04.450
为了说它密集呢

03:04.450 --> 03:06.690
是因为我们在反复的

03:07.690 --> 03:09.610
开发反复的题册

03:09.610 --> 03:10.050
对吧

03:10.050 --> 03:12.010
在不同版本之间出现问题

03:12.010 --> 03:12.730
解决问题

03:12.850 --> 03:15.170
每个版本之间不一样

03:15.730 --> 03:17.810
就会再这样出现了一堆小问题

03:22.850 --> 03:23.450
v3

03:24.690 --> 03:25.490
就是各个版本

03:25.490 --> 03:26.650
与各个版本之间

03:26.650 --> 03:28.250
频繁的更替

03:28.650 --> 03:29.450
频繁的更替

03:29.450 --> 03:31.170
我们会在开发分账

03:31.170 --> 03:32.530
做很多开发内容

03:33.290 --> 03:35.090
所以说提交的版本会比较多

03:35.090 --> 03:36.730
那在这里面多起来之后

03:36.730 --> 03:37.330
干嘛呢

03:37.330 --> 03:39.330
确保这个版本是没问题的

03:39.330 --> 03:39.890
OK

03:39.890 --> 03:40.610
我们

03:41.210 --> 03:42.010
跟位1

03:42.210 --> 03:43.290
它是对应的

03:43.290 --> 03:44.570
或者说合并到我们的

03:44.570 --> 03:45.610
主分之位以上

03:46.090 --> 03:47.450
然后继续往下开发

03:47.450 --> 03:48.090
什么v3

03:48.090 --> 03:48.690
v4

03:49.330 --> 03:49.970
我们在这

03:58.520 --> 03:58.840
v3

03:58.840 --> 03:59.240
v4

03:59.240 --> 04:00.080
继续往下开发

04:00.080 --> 04:00.640
开发

04:00.880 --> 04:01.960
如果干个版本之后

04:01.960 --> 04:02.520
干嘛呢

04:02.520 --> 04:03.400
我们可能说

04:03.680 --> 04:05.320
对应的是主分之上的

04:05.320 --> 04:06.120
第二个版本

04:07.000 --> 04:08.120
主分之上第二个版本

04:08.120 --> 04:08.520
哎呦

04:13.470 --> 04:14.030
就这样

04:14.030 --> 04:15.470
就是我们这开发分质

04:15.470 --> 04:17.390
是为了我们这场开发去使用

04:17.390 --> 04:18.790
里面内容会比较多

04:18.790 --> 04:20.670
反复的题册出发了再改

04:20.790 --> 04:21.830
出发了再改

04:22.550 --> 04:24.430
那这是咱们对应的一个开发分质

04:24.430 --> 04:26.550
那有除了这开发分质之外

04:26.550 --> 04:27.230
干嘛呢

04:28.270 --> 04:31.030
那这个配合这个开发分质

04:31.030 --> 04:31.750
包括说

04:31.750 --> 04:33.830
我们要做些新的内容了

04:33.830 --> 04:34.190
对吧

04:34.190 --> 04:34.830
比方说

04:34.830 --> 04:35.030
哎

04:35.030 --> 04:37.390
你们丁老师负责开发一个功能

04:37.390 --> 04:37.790
啊

04:37.790 --> 04:40.270
你们这个常老师负责开发一些功能

04:40.270 --> 04:42.590
包括袁老师负责开发一些功能

04:42.590 --> 04:44.430
那这样的话就属于一些临时分质

04:44.430 --> 04:44.710
对吧

04:44.710 --> 04:46.710
我们临时开发的一个分质

04:46.710 --> 04:47.550
那这个呢

04:47.550 --> 04:48.350
就可以说

04:48.350 --> 04:49.030
呃

04:50.030 --> 04:51.150
命名上

04:51.150 --> 04:51.510
对吧

04:51.510 --> 04:52.790
应该是功能分之一

04:52.790 --> 04:53.430
功能分之二

04:53.430 --> 04:54.590
功能分之三这种

04:54.590 --> 04:54.950
啊

04:55.470 --> 04:55.910
哎

04:58.110 --> 04:59.230
叫功能分质

05:03.460 --> 05:03.900
啊

05:03.900 --> 05:04.940
但是普遍来说

05:04.940 --> 05:07.020
都会干嘛的用咱们的这个飞龄

05:07.500 --> 05:09.340
f e a t u r e

05:09.340 --> 05:09.820
哎

05:15.370 --> 05:15.810
啊

05:16.170 --> 05:17.730
然后面加上咱们对应的人

05:17.730 --> 05:19.810
就比如说丁老师开发的飞龙丁

05:20.210 --> 05:20.730
啊

05:20.730 --> 05:21.130
干嘛呢

05:21.130 --> 05:23.210
我去来负责这个分质

05:23.210 --> 05:25.570
这个这个分质的一些功能

05:25.610 --> 05:26.970
不如我要添加这些功能

05:26.970 --> 05:28.210
在这个分质上去干

05:28.210 --> 05:29.410
改完之后干嘛呢

05:29.410 --> 05:29.810
哎

05:29.810 --> 05:31.690
会往开发分质上进行合并

05:32.290 --> 05:32.610
啊

05:32.610 --> 05:33.410
然后开发分

05:33.410 --> 05:34.290
没问题之后

05:34.290 --> 05:35.730
再往主分质上发布

05:35.730 --> 05:36.930
成为一个新的版本

05:37.250 --> 05:39.130
那只不过这个功能分质干嘛

05:39.130 --> 05:39.850
会比较多

05:39.850 --> 05:41.490
丁老师负责一个功能分质

05:41.490 --> 05:42.730
包括说什么的咱们

05:42.730 --> 05:44.370
这个袁老师也可以负责一个

05:44.370 --> 05:45.450
功能分质对吧

05:48.940 --> 05:49.340
哎

05:49.340 --> 05:50.540
那只不就是什么呢

05:50.540 --> 05:51.100
圆

05:54.800 --> 05:55.200
对吧

05:55.200 --> 05:55.440
哎

05:55.440 --> 05:55.840
干嘛呢

05:55.840 --> 05:56.600
我们都是

05:56.600 --> 05:57.000
哎

05:57.000 --> 05:57.960
自己有意

05:57.960 --> 05:58.400
丁

05:59.600 --> 06:01.200
自己有一堆细小的分质

06:01.200 --> 06:01.960
在上面

06:01.960 --> 06:02.200
哎

06:02.200 --> 06:03.080
测试啊

06:03.080 --> 06:03.760
开发啊

06:03.760 --> 06:04.280
维护啊

06:04.280 --> 06:05.800
在里面去做这些事情

06:07.000 --> 06:07.760
哎

06:07.760 --> 06:08.560
没选上

06:22.200 --> 06:25.200
买两个功能分质之间进行开发

06:25.200 --> 06:26.640
然后开发完之后干嘛呢

06:26.640 --> 06:29.360
会这个开发完成会在这个

06:29.360 --> 06:30.600
这个这个

06:30.600 --> 06:31.200
开呃

06:31.200 --> 06:32.680
功能分质上开完之后

06:32.680 --> 06:34.560
会在开发分质上进行合并

06:35.040 --> 06:35.280
啊

06:35.280 --> 06:35.880
也就是说

06:35.880 --> 06:37.400
他可能说跟这个

06:37.400 --> 06:39.320
v4合成一个v5

06:47.190 --> 06:47.710
哎

06:53.230 --> 06:53.510
哎

07:04.940 --> 07:08.300
开发分质并且在没有问题情况下

07:08.300 --> 07:08.540
哎

07:08.540 --> 07:10.260
得到一个新的分质啊

07:10.260 --> 07:10.780
没有

07:10.780 --> 07:11.260
那同样

07:11.260 --> 07:12.500
那袁老师在这边开发呢

07:12.500 --> 07:14.100
也是一样啊

07:14.100 --> 07:14.700
也是一样

07:16.380 --> 07:16.740
哎

07:16.740 --> 07:18.860
得到一个v5之后

07:18.860 --> 07:19.620
干嘛呢

07:19.620 --> 07:22.540
再次跟主分质合并啊

07:22.540 --> 07:23.060
他可能说

07:23.060 --> 07:24.820
因为这个跟我们的这个

07:26.100 --> 07:27.260
合并顺序有关

07:27.260 --> 07:29.580
那包括说我提测完之后没问题

07:29.580 --> 07:30.860
那他可以说继续按照

07:31.860 --> 07:34.780
之后的这个开发分质上的最新版本进行合并

07:37.510 --> 07:37.750
哎

07:42.900 --> 07:43.380
那同样

07:49.950 --> 07:51.510
哎得到一个新的版本v6

07:56.040 --> 07:56.240
啊

07:56.240 --> 07:57.400
得到一个新的版本v6

07:57.400 --> 07:58.200
那当然说

07:58.200 --> 07:59.000
v5v6

07:59.000 --> 07:59.240
哎

07:59.240 --> 08:00.680
测试没问题之后干嘛呢

08:00.680 --> 08:02.640
那我们会得到下一个大版本

08:03.840 --> 08:04.040
啊

08:04.040 --> 08:05.280
会得到一个下的大版本

08:10.260 --> 08:10.700
v3

08:14.350 --> 08:14.630
啊

08:14.630 --> 08:15.350
只不过是

08:15.350 --> 08:15.630
哎

08:15.630 --> 08:16.430
合并过来的

08:18.570 --> 08:19.290
合并过来的

08:19.810 --> 08:19.970
啊

08:19.970 --> 08:20.850
把v6啊

08:20.850 --> 08:22.170
变成v3版本

08:22.450 --> 08:23.130
这样的话

08:23.130 --> 08:24.970
我们线上看的就是第三版

08:24.970 --> 08:27.530
但是我们先加做了好多个测试吧

08:27.530 --> 08:28.930
那好多个测试吧

08:28.930 --> 08:29.810
那开发分质呢

08:29.810 --> 08:33.170
是我们日常开发去这个这个内部测试用的

08:34.170 --> 08:36.010
然后我们的这个功能分质呢

08:36.010 --> 08:39.170
是在原有的内容上添加一些功能啊

08:39.170 --> 08:39.890
那包括说

08:39.890 --> 08:40.890
那我们干嘛呢

08:40.890 --> 08:42.770
还可能出现一些什么哎

08:42.770 --> 08:43.450
这个问题

08:43.450 --> 08:45.410
比方说我们是我们在测的时候

08:45.410 --> 08:46.450
没测出来这个问题

08:46.450 --> 08:49.050
但主分质上又出现了新的问题

08:49.050 --> 08:50.170
那这怎么办呢

08:50.170 --> 08:52.130
这个时候还会出现一个分质叫做

08:52.130 --> 08:53.610
哎所谓的这个

08:53.610 --> 08:54.090
哎

08:54.090 --> 08:54.890
bug分质啊

08:54.890 --> 08:56.210
叫修补bug分质

09:00.220 --> 09:00.540
哎

09:06.860 --> 09:08.020
修补bug分质

09:09.340 --> 09:09.580
啊

09:09.580 --> 09:11.020
那在这里面干嘛呢

09:11.020 --> 09:12.700
原来这有问题对吧

09:12.700 --> 09:12.860
哎

09:12.860 --> 09:13.380
有问题

09:14.420 --> 09:15.020
那同样

09:15.900 --> 09:17.500
就是哪个版本有问题干嘛呢

09:17.500 --> 09:18.700
我在这个版本上

09:20.340 --> 09:20.580
哎

09:20.580 --> 09:23.660
在这个版本上拉出来一个bug分质

09:23.660 --> 09:24.700
比方说还是啊

09:24.700 --> 09:25.500
就我去

09:25.500 --> 09:26.700
我我去修改的

09:26.700 --> 09:27.580
或者怎么着

09:27.580 --> 09:28.500
那这个bug分质呢

09:28.500 --> 09:29.940
也会有多个啊

09:29.940 --> 09:30.900
只不过啊

09:30.900 --> 09:32.900
可能说这个bug

09:32.900 --> 09:34.460
呃这个在公司里面

09:34.460 --> 09:36.300
bug是分等级的啊

09:36.300 --> 09:38.300
就是按照咱们这样的一个

09:38.300 --> 09:40.340
什么重要紧急

09:40.340 --> 09:41.500
重要不紧急

09:41.500 --> 09:42.340
紧急不重要

09:42.340 --> 09:43.100
不重要不紧急

09:43.100 --> 09:44.460
这样的bug分类

09:44.460 --> 09:45.540
甚至说每个bug

09:45.540 --> 09:46.580
透过有对应一个编号

09:46.580 --> 09:47.500
测试员给我们的

09:47.500 --> 09:48.460
或者反馈的

09:48.460 --> 09:49.940
所以说你可能说

09:49.940 --> 09:50.620
用哎

09:50.620 --> 09:53.620
这个bug后面加上一个id啊

09:53.620 --> 09:56.580
或者说这个这个这个这个

09:56.620 --> 09:57.860
哪个人去开发的

09:57.860 --> 09:59.580
哪个修复的哪个bug

09:59.580 --> 10:00.860
用这样的方式去命名

10:00.860 --> 10:01.420
但这个呢

10:01.420 --> 10:02.740
是不同公司里面的

10:02.740 --> 10:03.620
不一样啊

10:03.620 --> 10:05.140
这只是说给同学们

10:05.140 --> 10:05.460
哎

10:05.460 --> 10:06.660
给做一个展示

10:06.660 --> 10:07.220
那当然说

10:07.220 --> 10:08.260
咱们现在说的这个

10:08.260 --> 10:10.420
都属于叫jtfollow

10:10.420 --> 10:11.420
jt工作楼

10:12.700 --> 10:13.100
ok

10:13.100 --> 10:14.060
那在这干嘛呢

10:14.060 --> 10:15.460
再来一个小分支

10:15.460 --> 10:15.740
啊

10:15.740 --> 10:16.340
再来小分支

10:16.340 --> 10:16.580
对吧

10:16.580 --> 10:17.020
出错了

10:17.020 --> 10:18.220
那就改呀

10:18.220 --> 10:18.380
啊

10:18.380 --> 10:19.300
唯一皮儿吧

10:19.300 --> 10:19.860
对吧

10:19.860 --> 10:20.420
哎

10:21.620 --> 10:22.420
唯一皮儿

10:24.260 --> 10:25.220
啊

10:25.220 --> 10:25.620
对吧

10:25.620 --> 10:26.940
这个这个版本上出的问题

10:26.940 --> 10:27.380
或者说

10:27.380 --> 10:27.540
呃

10:27.540 --> 10:28.020
这个这个

10:28.020 --> 10:29.220
这都开发到v3了

10:29.220 --> 10:29.260
啊

10:29.260 --> 10:30.620
这这就不就不搞了

10:30.620 --> 10:31.540
这就不搞了

10:31.540 --> 10:32.100
哎

10:32.860 --> 10:33.140
对吧

10:33.140 --> 10:33.780
那侧的话

10:33.780 --> 10:34.580
因为线上的话

10:34.580 --> 10:35.340
都是v3啊

10:35.340 --> 10:36.180
v3除的版本

10:36.180 --> 10:37.740
他不可能回去再给v1了啊

10:37.740 --> 10:39.620
那一定是在v3的基本上修改的

10:41.380 --> 10:41.580
啊

10:41.580 --> 10:41.900
对吧

10:41.900 --> 10:43.140
得到一个v3皮儿

10:44.940 --> 10:45.260
啊

10:45.260 --> 10:45.980
干嘛呢

10:45.980 --> 10:48.660
我在这个上面去修复

10:48.660 --> 10:49.660
去修改

10:49.660 --> 10:51.340
那改完之后干嘛呢

10:51.340 --> 10:52.100
他也不是说

10:52.100 --> 10:54.060
直接会回到这个

10:54.060 --> 10:55.180
这个这个这个主分支上

10:55.220 --> 10:56.740
还是他改完之后

10:56.740 --> 10:56.940
哎

10:56.940 --> 10:59.300
确保这个功功能没有了

10:59.300 --> 10:59.860
干嘛呢

10:59.860 --> 11:01.660
仍然是先放到开发分支上

11:01.660 --> 11:02.900
开发分支上再测测

11:02.900 --> 11:03.940
测完没有问题之后

11:03.940 --> 11:05.380
再放到主分支上

11:05.380 --> 11:05.620
啊

11:05.620 --> 11:07.300
所以说这个修58个分支

11:07.300 --> 11:08.100
他可能有多个

11:08.100 --> 11:10.420
但是他不会说一下子回奔到主分支上

11:10.420 --> 11:11.260
他可能说

11:11.260 --> 11:11.780
哎

11:11.780 --> 11:12.780
这样我这个

11:12.780 --> 11:13.580
往下来点

11:17.040 --> 11:17.360
哎

11:17.360 --> 11:17.720
ok

11:21.110 --> 11:21.630
干嘛呢

11:21.630 --> 11:22.710
得到了一个新的版本

11:22.710 --> 11:23.310
v4一皮儿

11:25.230 --> 11:25.470
啊

11:25.470 --> 11:26.270
v4一皮儿

11:26.270 --> 11:27.070
那他干嘛呢

11:27.070 --> 11:29.710
会跟咱们的这个开发分支进行合并

11:31.950 --> 11:32.190
哎

11:32.190 --> 11:33.670
得到一个新的版本v7

11:35.350 --> 11:35.630
啊

11:35.630 --> 11:36.790
得到一个新的版本v7

11:36.790 --> 11:38.670
那这个版本v7是干嘛呢

11:38.670 --> 11:39.390
和这个v4

11:39.390 --> 11:41.070
咱们修改的bug合并之后

11:41.710 --> 11:42.310
得到了

11:45.180 --> 11:45.580
哎

11:45.580 --> 11:48.820
跟这个这个v4合并之后得到的

11:48.820 --> 11:49.540
那无论说

11:49.540 --> 11:49.860
呃

11:49.860 --> 11:51.500
这个测试完没有之后

11:51.500 --> 11:52.340
没有问题之后

11:52.340 --> 11:54.580
再发布一个新的大版本啊

11:54.580 --> 11:55.980
所以说图看起来

11:55.980 --> 11:57.420
就是这个样子的啊

11:57.420 --> 11:59.900
每个分支做每个分支的事情啊

11:59.900 --> 12:00.900
这个功能分支啊

12:00.900 --> 12:02.140
开发分支或主分支

12:02.140 --> 12:05.060
甚至说咱们修改8个分支啊

12:05.060 --> 12:06.060
那这个说的就

12:06.820 --> 12:08.660
在工这个这个就比较细致了啊

12:08.660 --> 12:09.500
因为在公司里面

12:09.500 --> 12:10.460
他就是这样的

12:10.460 --> 12:11.940
每个人负责每个分支

12:11.940 --> 12:13.940
每个分支上做对应的事情

12:13.940 --> 12:15.460
那当然说老说我起分支

12:15.460 --> 12:16.780
非得按着这个名字去起嘛

12:16.780 --> 12:18.220
那你完全自愿

12:18.220 --> 12:19.420
如果你随便

12:19.420 --> 12:20.460
我把它起个A分支

12:20.460 --> 12:21.060
B分支

12:21.060 --> 12:22.260
C分支D分支

12:22.260 --> 12:23.860
只不过它的语譯花不好

12:23.860 --> 12:26.100
但是如果你去这么写的话

12:26.140 --> 12:26.980
那效果会

12:26.980 --> 12:27.900
哎

12:27.900 --> 12:29.380
效果会很好

12:29.380 --> 12:31.100
那效果会很好

12:31.100 --> 12:31.340
对吧

12:31.340 --> 12:33.060
你无论说通过这个Fair

12:33.060 --> 12:34.340
或者说这个Developer

12:34.340 --> 12:36.020
或者说这个Bug

12:36.020 --> 12:37.100
他们每个人

12:37.100 --> 12:38.740
带有不同的一个含义

12:38.740 --> 12:40.100
甚至说我一看到这个分支

12:40.100 --> 12:40.860
我就知道

12:40.860 --> 12:41.020
哎

12:41.020 --> 12:42.020
他是干什么的

12:42.020 --> 12:42.460
那当然说

12:42.460 --> 12:43.780
我们完成这份功能之后

12:43.780 --> 12:44.020
干嘛

12:44.020 --> 12:45.860
我这个分支就干掉了

12:45.860 --> 12:46.580
因为主要内容

12:46.580 --> 12:48.060
都和平到这个开发分支上

12:48.060 --> 12:49.500
我去里面找

12:49.500 --> 12:50.980
包括找对应的一个版本

12:50.980 --> 12:52.500
看就好了

12:52.500 --> 12:52.940
这个呢

12:52.940 --> 12:53.980
也就是咱们所说的

12:53.980 --> 12:55.780
叫做Gitfollow

12:55.780 --> 12:58.780
就是这个Git工作流

12:58.780 --> 12:59.940
那我们在公司当中

12:59.940 --> 13:01.500
这个也是非常常见的

13:01.500 --> 13:02.460
也是非常常见的

13:02.460 --> 13:03.180
但其实这个呢

13:03.180 --> 13:04.580
就是你们丁老师

13:04.580 --> 13:05.700
在这个开发的时候

13:05.700 --> 13:07.780
常用的一种模式

13:07.780 --> 13:08.260
那当然了

13:08.260 --> 13:09.980
这个是个这个

13:09.980 --> 13:10.660
Git工作流

13:10.660 --> 13:12.180
它不仅是一种

13:12.180 --> 13:14.380
包括说还GitHub工作流

13:14.380 --> 13:16.740
它包括说里面有个PullRequest

13:16.740 --> 13:17.860
那PullRequest

13:17.860 --> 13:18.900
那PullRequest

13:18.900 --> 13:21.580
那个只是说在线上的一个合并

13:21.580 --> 13:21.860
对吧

13:21.860 --> 13:22.860
我改完代码之后

13:22.860 --> 13:23.700
我线上提交

13:23.700 --> 13:23.980
对吧

13:24.100 --> 13:26.220
你过来拉下咱们代码

13:26.220 --> 13:27.180
或者说我想主动的

13:27.180 --> 13:28.220
把我的代码合上去

13:28.220 --> 13:29.740
你看一下这个代码行不行

13:29.740 --> 13:30.340
没问题之后

13:30.340 --> 13:31.340
你就决定合

13:31.340 --> 13:32.900
那个只不是在线上操作

13:32.900 --> 13:33.660
那这个呢

13:33.660 --> 13:35.100
完全就是咱们学过的指令

13:35.100 --> 13:35.860
什么Pull啊

13:35.860 --> 13:37.460
Pull是这样的一些操作

13:37.460 --> 13:37.780
对吧

13:37.780 --> 13:39.500
从原来的分支

13:39.500 --> 13:40.620
开发到新的分支

13:40.620 --> 13:41.180
Check out的

13:41.180 --> 13:41.620
对吧

13:41.620 --> 13:42.660
充电一个新的分支

13:42.660 --> 13:43.540
然后开发

13:43.540 --> 13:44.220
开发完之后

13:44.220 --> 13:45.420
干嘛呢

13:45.420 --> 13:48.180
这个推送的原来分支

13:48.180 --> 13:50.340
然后跟开发分支进行合并

13:50.340 --> 13:51.180
我也就是Pull

13:51.180 --> 13:52.580
More之类的

13:52.620 --> 13:53.300
包括说

13:54.940 --> 13:56.420
还有说我们Pull啊

13:56.420 --> 13:56.660
对吧

13:56.660 --> 13:57.220
拉代码

13:57.220 --> 13:57.820
推代码

13:57.820 --> 13:58.700
你都是在这里面

13:58.700 --> 13:59.780
这样的一个操作

14:00.940 --> 14:01.780
那本质上呢

14:01.780 --> 14:02.860
都是为了咱们

14:02.860 --> 14:04.420
向那个更好的开发

14:04.420 --> 14:05.620
来制定这样的一个

14:05.620 --> 14:06.660
工作流程

14:06.660 --> 14:08.020
这不就是每个分支

14:08.020 --> 14:09.340
做每个分支的事情

14:09.340 --> 14:11.780
每个分支做每个分支的事情

14:11.780 --> 14:12.340
那而且呢

14:12.340 --> 14:12.940
还说了

14:12.940 --> 14:14.020
就是每个公司

14:14.020 --> 14:15.620
它的一个标准不一样

14:15.620 --> 14:16.660
但是大家这么做

14:16.660 --> 14:17.380
绝对没有问题

14:17.380 --> 14:18.420
按照这样的一个

14:18.420 --> 14:19.020
公务去做

14:19.020 --> 14:20.300
当你去修改Bug的时候

14:20.300 --> 14:20.860
OK

14:20.860 --> 14:21.740
你从最新的版本

14:21.740 --> 14:22.380
或者说

14:22.380 --> 14:23.340
指定版本

14:23.340 --> 14:24.780
拉出来一个新的分支

14:24.780 --> 14:25.420
干嘛呢

14:25.420 --> 14:26.060
Bug定

14:26.060 --> 14:26.300
对吧

14:26.300 --> 14:26.580
定

14:26.580 --> 14:27.300
这个

14:27.300 --> 14:27.900
丁老师

14:27.900 --> 14:29.900
要修改的Bug这样的分支

14:29.900 --> 14:30.740
然后在上面去改

14:30.740 --> 14:31.500
改完之后

14:31.500 --> 14:31.980
测试

14:31.980 --> 14:32.860
测试通过之后

14:32.860 --> 14:33.340
干嘛呢

14:33.340 --> 14:34.540
推动到主分支发布

14:34.540 --> 14:35.620
选择一个版本

14:35.620 --> 14:36.420
或者说

14:36.420 --> 14:37.700
这个因为Bug的

14:37.700 --> 14:38.740
如果是比较小的话

14:38.740 --> 14:39.300
干嘛呢

14:39.300 --> 14:41.180
如果干Bug修复

14:41.180 --> 14:41.900
最后

14:42.580 --> 14:43.980
这个得到一个集合

14:43.980 --> 14:45.180
把它推成一个新版本

14:45.180 --> 14:45.980
就比方说

14:45.980 --> 14:47.340
咱们看到的那些

14:47.340 --> 14:47.820
公务啊

14:47.820 --> 14:48.260
对吧

14:48.260 --> 14:49.780
下面修复了123456条

14:49.780 --> 14:50.660
那可能说

14:50.660 --> 14:52.100
之前就存在这些问题

14:52.100 --> 14:53.180
只不过在这个版本的时候

14:53.180 --> 14:54.220
把它修复了

14:54.220 --> 14:55.140
那过程呢

14:55.140 --> 14:55.740
就是这样

14:55.740 --> 14:56.660
如果干个小远点

14:56.660 --> 14:58.100
代表如果干版本

14:58.100 --> 14:59.380
只不过说我们的功能分支

14:59.380 --> 15:00.740
或者说我们开发分支的

15:00.740 --> 15:01.260
这个小远点

15:01.260 --> 15:01.740
会密集

15:01.740 --> 15:02.140
密集

15:02.140 --> 15:02.900
不是说

15:02.900 --> 15:04.700
是不是它要开发的多呀

15:04.700 --> 15:05.140
对吧

15:05.140 --> 15:06.300
那它多的原因

15:06.300 --> 15:07.780
是因为我们有反复的测试

15:07.780 --> 15:08.100
对吧

15:08.100 --> 15:08.820
我觉得没问题

15:08.820 --> 15:09.620
但一发现测试

15:09.620 --> 15:09.940
不行

15:09.940 --> 15:10.300
有问题

15:10.300 --> 15:11.180
我来重新改

15:11.180 --> 15:12.700
然后我再提交新版本

15:12.700 --> 15:14.420
就是这样的一个过程

15:14.420 --> 15:15.100
一般

15:15.100 --> 15:15.900
一致于说

15:15.900 --> 15:16.740
更好地来

15:16.740 --> 15:17.620
得到一个项目

15:17.620 --> 15:19.300
得到一个项目开发的过程

15:20.220 --> 15:20.580
OK

15:20.580 --> 15:21.100
那这个呢

15:21.100 --> 15:22.980
那就是咱们的工作流

15:22.980 --> 15:23.620
那这个呢

15:23.620 --> 15:24.500
就是可能说

15:24.500 --> 15:26.940
大家现在用的并不多

15:26.940 --> 15:28.740
甚至说我们自己在写代码的时候

15:28.740 --> 15:30.180
也可以按照这种方式去写

15:30.780 --> 15:31.660
也是没有问题的

15:31.660 --> 15:32.660
完全没有问题的

15:32.660 --> 15:34.100
那在公司里面

15:34.100 --> 15:35.500
这种用的就比较多了

15:35.500 --> 15:36.220
那这就是说

15:36.220 --> 15:37.700
其他的这个工作流

15:37.700 --> 15:38.980
跟这个差不多

15:38.980 --> 15:40.460
而且它不难用的指令

15:40.460 --> 15:41.860
也是咱们之前提到的

15:41.860 --> 15:43.340
那所以说

15:43.340 --> 15:44.020
在这

15:44.020 --> 15:45.100
我相信同学们

15:45.100 --> 15:46.660
能明白我们这个工作流

15:46.660 --> 15:47.420
它的过程

15:47.420 --> 15:48.740
那其实就是我

15:48.740 --> 15:49.820
搞了说干分支

15:49.820 --> 15:50.460
每个分支做

15:50.460 --> 15:51.540
每个分支的事

15:51.540 --> 15:52.740
然后该合并

15:52.740 --> 15:53.020
合并

15:53.020 --> 15:53.780
该测试测试

15:53.780 --> 15:54.580
然后最后有一个

15:54.580 --> 15:55.740
主分支进发布里面

15:55.740 --> 15:57.860
装着我们认为是最完整的版本

15:57.860 --> 15:59.260
就这么回事

15:59.260 --> 16:00.420
是不不难

16:00.420 --> 16:01.540
那OK

16:01.540 --> 16:02.140
那今天呢

16:02.140 --> 16:02.660
这个课呢

16:02.660 --> 16:03.940
大家了解一下就行

16:03.940 --> 16:05.100
大家什么都不需要做

16:05.100 --> 16:05.820
理解一下

16:05.820 --> 16:07.380
我们的这个工作流

16:07.380 --> 16:08.020
这个follow

16:08.020 --> 16:08.820
原来是

16:08.820 --> 16:10.300
这个其他分支啊

16:10.300 --> 16:11.340
这个这个这个

16:11.340 --> 16:12.700
每个分支做不同的事

16:12.700 --> 16:13.500
然后最后合并

16:13.500 --> 16:15.060
这样的一个过程就可以了

16:15.060 --> 16:18.100
那就是咱们今天的工作流

