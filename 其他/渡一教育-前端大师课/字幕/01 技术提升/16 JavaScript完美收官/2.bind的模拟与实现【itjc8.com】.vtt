WEBVTT

00:00.000 --> 00:03.200
读义教育给大家提供的你不知道的GS系列课生

00:03.600 --> 00:06.000
我是朱家老师之一 陈子彤

00:06.600 --> 00:11.400
那相信了解我的人 必定知道我的样子

00:11.800 --> 00:15.000
就是下夜依旧的帅气

00:15.400 --> 00:17.600
不了解的人也介绍一下

00:17.600 --> 00:19.000
所册这个就是我

00:19.000 --> 00:23.200
我是咱们读义教育的一个技术的一个主负责人

00:23.200 --> 00:26.000
当然也是今天另一家共送一个技术的负责人

00:26.600 --> 00:30.000
那这是我的一个作用名 有心理同学可以去读一读

00:30.000 --> 00:32.600
那好了 那今天我们呢 求正题啊

00:32.600 --> 00:36.600
我们要讲的其实是我们底层原理篇的这样的一个课程

00:36.600 --> 00:38.600
因为我们你不知道GS翻了很多篇

00:38.600 --> 00:44.200
那这一节课呢 是你是底层原理篇这样的一个band的模拟实现

00:45.000 --> 00:46.400
那首先什么是band

00:46.400 --> 00:48.000
既然我们要模拟实现它的话

00:48.000 --> 00:49.800
首先我们才知道什么是band

00:49.800 --> 00:51.000
band它有什么用

00:51.000 --> 00:52.600
之后呢我们再去模拟实现它

00:53.200 --> 00:57.000
ok 那其实呢底层原理为什么要去摸索

00:57.000 --> 01:00.000
它为什么要去摸索这样的一个底层原理呢

01:00.000 --> 01:01.200
实际上呢就是

01:02.200 --> 01:05.000
就是当你这个底层原理摸索得很透以后的话

01:05.000 --> 01:07.400
你再去使用这样的一个功能

01:07.400 --> 01:09.600
你会把它变得更强大

01:09.600 --> 01:12.600
你也更容易在使用上面

01:12.600 --> 01:15.800
去让它进行这样的一个凑的一个执行

01:15.800 --> 01:17.000
所以说呢

01:17.000 --> 01:20.400
再学一个语言或是再学一个cool

01:20.400 --> 01:21.400
再学一个框架

01:21.400 --> 01:22.600
我们一开始的时候呢

01:22.600 --> 01:24.400
当然首先为了效率为了快

01:24.400 --> 01:27.100
我们只需要去浅长则直

01:27.100 --> 01:29.400
大概了解一下能使用就ok了

01:29.400 --> 01:31.000
但是之后啊

01:31.000 --> 01:33.500
我们想提高这样的一个专业素质

01:33.500 --> 01:35.100
想提高这样的一个技术深度的话

01:35.100 --> 01:38.300
我们还是需要去越度原码了解底层的

01:38.300 --> 01:39.300
所以说呢

01:39.300 --> 01:41.000
这是我们底层原理篇这样的一个

01:41.000 --> 01:43.000
重中之重的一个作用

01:43.000 --> 01:45.200
ok 那咱咱先来看一下

01:45.200 --> 01:47.400
这个band怎么来使用的啊

01:47.400 --> 01:48.800
当然那band的一个最主要的目的呢

01:48.800 --> 01:50.600
其实就是当一个函数在执行的时候

01:50.600 --> 01:53.600
我们去改变这个函数的里面的date指向

01:53.600 --> 01:58.600
那当然咱可以举一个应用层面的一个例子

01:58.600 --> 01:59.800
就是我们在啊

01:59.800 --> 02:01.000
在以前吧

02:01.000 --> 02:04.600
然后做这样的一个项目开发的时候

02:04.600 --> 02:05.400
有的时候呢

02:05.400 --> 02:07.800
是需要进行这样的一个单变量的开发

02:07.800 --> 02:09.200
什么叫单变量呢

02:09.200 --> 02:10.000
就是当然呢

02:10.000 --> 02:13.400
这也是模块化开发的这样的一个

02:13.400 --> 02:16.700
就是一个这样的一个分支吧

02:16.700 --> 02:19.100
因为如果说我这么做

02:19.100 --> 02:23.500
但那如果说我们一个项面里面有很多这样的

02:23.500 --> 02:26.700
那个需要很多这样的GIS去

02:26.700 --> 02:28.500
协作来去使用的话

02:28.500 --> 02:29.700
那必然会出现这样的一个

02:29.700 --> 02:31.500
全局变量污染的一个问题

02:31.500 --> 02:33.500
那我们可以通过这种单变量的方式

02:33.500 --> 02:35.900
尽可能的降低这样的一个全局变量

02:35.900 --> 02:37.500
污染的这样的那种情况

02:37.500 --> 02:38.200
当然呢

02:38.200 --> 02:39.400
我们模块化开发

02:39.400 --> 02:40.000
其实呢

02:40.000 --> 02:41.600
它里面的一个目的之一

02:41.600 --> 02:42.800
也是因为这个啊

02:42.800 --> 02:43.800
当然那模块开发

02:43.800 --> 02:46.300
还有更多更深的一些含义之后呢

02:46.300 --> 02:47.800
我们的课程啊

02:47.800 --> 02:49.000
也会啊

02:49.000 --> 02:51.100
拿出一些给大家来进行这样的一个

02:51.100 --> 02:52.000
选用的讲解啊

02:52.000 --> 02:53.000
那我们先来看一下吧

02:53.000 --> 02:53.600
啊

02:53.600 --> 02:54.800
我有一个

02:54.800 --> 02:56.800
less的单变量变成的方式

02:56.800 --> 02:57.800
什么好处呢

02:57.800 --> 02:59.100
就是单对象啊

02:59.100 --> 02:59.800
变成的方式

02:59.800 --> 03:01.400
你也可以列成单单变量

03:01.400 --> 03:03.800
因为我觉得变量里面存的就是一个对象啊

03:03.800 --> 03:04.400
好

03:04.400 --> 03:05.300
那

03:05.300 --> 03:07.500
我可以让一个GIS中

03:07.500 --> 03:09.100
它只有一个变量啊

03:09.100 --> 03:11.000
比如说叫做less

03:11.000 --> 03:11.900
那在这个里面呢

03:11.900 --> 03:13.200
我让它等于一个对象

03:13.200 --> 03:14.100
对象里面呢

03:14.100 --> 03:16.100
全都是属性啊

03:16.100 --> 03:16.800
比如说

03:16.800 --> 03:18.000
我让它有个int属性

03:18.000 --> 03:18.900
int属性

03:18.900 --> 03:20.100
到一个函数

03:20.100 --> 03:20.800
好了

03:20.800 --> 03:21.400
那之后呢

03:21.400 --> 03:23.000
比如说我再来一个叫做

03:24.000 --> 03:25.800
band event的这个属性

03:25.800 --> 03:26.400
它叫做

03:27.000 --> 03:28.400
方式band event

03:28.400 --> 03:30.300
它也是一个函数

03:30.300 --> 03:30.800
在之后呢

03:30.800 --> 03:32.000
我来一个瘦啊

03:32.000 --> 03:32.500
瘦呢

03:32.500 --> 03:34.000
它也是个函数

03:34.000 --> 03:35.000
那我怎么做呢

03:35.000 --> 03:35.400
看好了

03:35.400 --> 03:35.800
现在呢

03:35.800 --> 03:36.300
比如说

03:36.300 --> 03:37.800
我在这里面写个DIV

03:38.400 --> 03:39.400
我们要实现一个功能

03:39.400 --> 03:40.600
通过这种呃

03:40.600 --> 03:41.300
变成的方式

03:41.300 --> 03:42.200
来实现一个功能

03:42.200 --> 03:43.100
这个功能就是

03:43.100 --> 03:44.300
当我点击这个DIV的时候

03:44.300 --> 03:45.100
我要把它

03:45.100 --> 03:47.200
内部的文本啊

03:47.200 --> 03:48.200
给它输出来

03:49.600 --> 03:49.900
啊

03:49.900 --> 03:51.000
给它输出来

03:51.000 --> 03:51.400
那它呢

03:51.400 --> 03:51.800
在这里面

03:51.800 --> 03:53.500
可以给它一个简单的样式吧

03:53.500 --> 03:53.900
啊

03:53.900 --> 03:54.900
来来来

03:54.900 --> 03:58.540
等于一个DIV

03:58.540 --> 03:59.740
它的宽度呢

03:59.740 --> 04:00.740
是100强速

04:00.740 --> 04:01.640
它的高度呢

04:01.640 --> 04:02.640
也是100强速

04:02.640 --> 04:03.340
在这呢

04:03.340 --> 04:04.140
我来个

04:04.140 --> 04:04.700
白光

04:04.700 --> 04:06.640
Color是个橙色

04:06.640 --> 04:07.640
好

04:07.640 --> 04:08.040
那

04:08.040 --> 04:09.740
切尾要做的事情也很简单

04:09.740 --> 04:10.740
嗯

04:10.740 --> 04:12.240
当我点完这个DIV以后的话

04:12.240 --> 04:13.340
其实我就想让它

04:13.340 --> 04:14.440
把这里面的内部文本

04:14.440 --> 04:16.440
弹出来啊

04:16.440 --> 04:17.740
弹出来的

04:17.740 --> 04:18.640
就是弹出来的话

04:18.640 --> 04:20.440
最好我还要加上这样的一句话

04:20.440 --> 04:20.940
啊

04:20.940 --> 04:21.940
就是这个

04:21.940 --> 04:22.740
哈喽啊

04:22.740 --> 04:23.840
加上一个哈喽

04:23.840 --> 04:25.140
那我可以怎么做呢

04:25.140 --> 04:25.740
那当然呢

04:25.740 --> 04:27.940
我通过这种方式来变成的话

04:27.940 --> 04:28.740
我们要理解

04:28.740 --> 04:29.540
这个int函数

04:29.540 --> 04:31.040
是个初始化的一个函数

04:31.040 --> 04:33.440
它也是整个功能的一个主口

04:33.440 --> 04:35.340
因为我们把它啊

04:35.340 --> 04:36.540
其实在真正开发时候

04:36.540 --> 04:38.640
我们要把它放到一个解释间之中

04:38.640 --> 04:40.840
那它其实可以列成是一个模块

04:40.840 --> 04:41.440
一个模块呢

04:41.440 --> 04:42.940
就具有一个整体的功能

04:42.940 --> 04:44.640
那这个功能从哪开始呢

04:44.640 --> 04:46.540
就是从这个int这个地方来开始

04:46.540 --> 04:48.340
它也是这个功能的一个主口啊

04:48.340 --> 04:49.940
也就是说想要触发这个功能

04:49.940 --> 04:51.340
我就必须得这么做

04:51.340 --> 04:53.040
let's点int一下

04:53.040 --> 04:53.640
ok

04:53.640 --> 04:54.540
那这么做的话

04:54.540 --> 04:56.740
在里面可以进行一些的一个初始化

04:56.740 --> 04:58.340
这个初始化包括什么呢

04:58.340 --> 04:59.040
比如说

04:59.040 --> 05:00.540
我可以啊

05:00.540 --> 05:03.540
在这写个this.message

05:04.740 --> 05:07.040
等于哈喽哈喽

05:07.040 --> 05:07.940
那

05:07.940 --> 05:10.040
当我在这写完这样一句话以后的话

05:10.040 --> 05:10.440
看好了

05:10.440 --> 05:12.840
当我通过let's来调用这个函数啊

05:12.840 --> 05:14.340
那谁调用这个函数

05:14.340 --> 05:15.440
他们的des就是谁

05:15.440 --> 05:16.240
换句话说这个des

05:16.240 --> 05:18.640
其实就是类似对象的一个整体

05:18.640 --> 05:20.040
那这样的话

05:20.040 --> 05:21.040
哎

05:21.040 --> 05:22.440
那当我这么做完以后

05:22.440 --> 05:23.440
这句话执行了

05:23.440 --> 05:24.440
执行了以后

05:24.440 --> 05:24.540
哎

05:24.540 --> 05:26.940
是不是你会发现在任何的一个

05:26.940 --> 05:27.140
哎

05:27.140 --> 05:29.240
这个属性这个函数里面

05:29.240 --> 05:31.940
我其实都可以使用这样的一个

05:31.940 --> 05:32.340
值吧

05:32.340 --> 05:33.040
对吧

05:33.040 --> 05:33.440
ok

05:33.440 --> 05:34.540
那也就是说

05:34.540 --> 05:36.240
当我通过这样的一个操作

05:36.240 --> 05:37.740
这个message啊

05:37.740 --> 05:39.640
它变成了let's的对象

05:39.640 --> 05:41.440
内部的一个全局的一个值

05:41.440 --> 05:43.040
就说在let's的这个对象

05:43.040 --> 05:44.340
内部的所有的函数啊

05:44.340 --> 05:46.440
都有机会能使用到它啊

05:46.440 --> 05:47.840
为什么说有有机会呢

05:47.840 --> 05:49.340
咱一会来看一看啊

05:49.340 --> 05:50.440
现在我这么做

05:50.440 --> 05:51.440
那出实话的话

05:51.440 --> 05:52.540
不仅要出实话

05:52.540 --> 05:53.340
这样的一个

05:53.340 --> 05:55.440
针对于let's的对象的一个全局的一个属性

05:55.440 --> 05:56.340
我还需要

05:56.340 --> 05:58.140
比如说绑定一个函数

05:58.140 --> 05:58.840
比如说

05:59.840 --> 06:01.540
来个band event

06:01.540 --> 06:03.240
但真正一个大型项目开发的话

06:03.240 --> 06:03.940
这个band event

06:03.940 --> 06:06.740
可能需要绑定很多个实践函数

06:06.740 --> 06:08.540
但这本来我们只是做一个测试啊

06:08.540 --> 06:09.840
所以说我可以这么做

06:09.840 --> 06:10.840
我有个odiv

06:10.840 --> 06:13.240
懂一个 document

06:13.240 --> 06:16.640
叫gatch element by id of id

06:16.640 --> 06:18.940
mess by tiger name

06:18.940 --> 06:19.640
好在这呢

06:19.640 --> 06:20.740
我写个div

06:20.740 --> 06:21.040
好

06:21.040 --> 06:21.340
这呢

06:21.340 --> 06:22.440
我添个中号

06:23.240 --> 06:24.440
连把div写成重

06:24.440 --> 06:25.540
我要这个odiv

06:25.540 --> 06:27.140
来个onk link

06:28.240 --> 06:28.740
好

06:28.740 --> 06:29.540
懂一个什么

06:29.540 --> 06:30.240
懂一个function

06:30.240 --> 06:30.840
这个function呢

06:30.840 --> 06:32.740
就是这个disk.show

06:32.740 --> 06:33.740
disk.show

06:33.740 --> 06:34.640
那你看一下

06:34.640 --> 06:35.340
我通过这个disk

06:35.340 --> 06:36.640
这个disk是let's的对象

06:36.640 --> 06:37.040
这个函数

06:37.040 --> 06:38.640
那这个函数里面的disk是谁啊

06:38.640 --> 06:39.540
是不是也是

06:40.540 --> 06:41.240
类似的啊

06:41.240 --> 06:41.840
对吧

06:41.840 --> 06:42.840
那当然呢

06:42.840 --> 06:44.240
那这里面disk.show

06:44.240 --> 06:45.540
其实还是他

06:45.540 --> 06:46.440
但到这的话

06:46.440 --> 06:47.140
我给你来看一下

06:47.140 --> 06:48.140
现在我alert一下

06:48.140 --> 06:49.340
我alert一下

06:49.340 --> 06:51.340
这样的一个disk

06:51.340 --> 06:51.840
好

06:51.840 --> 06:52.740
请问现在这个disk

06:52.740 --> 06:53.840
他是谁了

06:53.840 --> 06:55.340
那现在这个disk的话

06:55.340 --> 06:56.540
咱来看一下

06:56.540 --> 06:57.740
那我这么alert的话

06:57.740 --> 06:58.840
应该alert出来

06:58.840 --> 06:59.840
我cancel吧

06:59.840 --> 07:00.840
cancel.log一下

07:00.840 --> 07:01.540
咱看一看

07:01.540 --> 07:02.140
小心此

07:03.340 --> 07:05.140
是可以给你们点思考的时间

07:07.640 --> 07:08.840
那咱来看一下

07:08.840 --> 07:09.840
它到底是什么呢

07:10.840 --> 07:11.940
你要说我把这个函数

07:11.940 --> 07:14.640
这个时间数的函数给了他

07:14.640 --> 07:16.240
那其实呢

07:16.240 --> 07:18.240
真正这个事件出发以后的话

07:18.240 --> 07:19.240
这个时间函数

07:19.240 --> 07:20.140
执行

07:20.140 --> 07:21.040
其实是系统方面

07:21.040 --> 07:22.340
你调了这个

07:22.340 --> 07:23.740
这个方法

07:23.740 --> 07:24.640
那

07:24.640 --> 07:25.440
这个方法

07:25.440 --> 07:26.040
其实呢

07:27.540 --> 07:28.840
之前完以后的话

07:28.840 --> 07:29.840
当然其实执行了谁

07:29.840 --> 07:31.540
执行的函数这个函数

07:31.540 --> 07:33.940
那其实最本质的就是这个odiv

07:33.940 --> 07:35.540
调了这个函数呗

07:35.540 --> 07:36.140
对吧

07:36.140 --> 07:36.740
那这样的话

07:36.740 --> 07:37.240
这里面的disk

07:37.240 --> 07:38.740
是不是一定就是这个odiv了

07:38.740 --> 07:39.140
对吧

07:39.140 --> 07:39.840
咱来看一下

07:39.840 --> 07:41.340
是不是这个odiv呢

07:41.340 --> 07:41.840
小心此

07:41.840 --> 07:42.240
看一下

07:45.340 --> 07:45.740
ok

07:45.740 --> 07:46.940
这里面看一下

07:47.840 --> 07:48.540
message

07:48.540 --> 07:48.940
ok

07:48.940 --> 07:50.840
这里面还不是啊

07:50.840 --> 07:51.640
还不是

07:51.640 --> 07:52.840
我看一下

07:52.840 --> 07:53.640
你为什么它不是

07:55.740 --> 07:56.540
我保存一下

07:58.540 --> 08:00.340
第3场对吧

08:00.340 --> 08:01.040
第3场

08:06.680 --> 08:07.780
band image

08:07.780 --> 08:08.380
int

08:08.380 --> 08:08.880
啊

08:10.580 --> 08:11.180
哦

08:11.180 --> 08:11.980
这里面呢

08:11.980 --> 08:12.580
哎

08:12.580 --> 08:13.780
这里面咱咱选错了

08:13.780 --> 08:14.980
这里面不应该是一个disk

08:14.980 --> 08:15.680
点收的执行

08:15.680 --> 08:16.080
对吧

08:16.080 --> 08:16.480
啊

08:16.480 --> 08:17.280
我相信呢

08:17.280 --> 08:18.380
这个眼睛好的同学

08:18.380 --> 08:19.380
早就已经看出来

08:19.380 --> 08:19.880
对吧

08:19.880 --> 08:19.980
好

08:19.980 --> 08:21.180
那咱再来看一下

08:21.180 --> 08:22.680
我发现一次点击

08:22.680 --> 08:22.980
ok

08:22.980 --> 08:23.680
确实是这个div

08:23.680 --> 08:24.380
对吧

08:24.380 --> 08:25.080
好

08:25.080 --> 08:26.180
那这样的话咱们

08:27.080 --> 08:27.780
继续往下来

08:27.780 --> 08:28.680
其实我们呢

08:28.680 --> 08:30.480
真正在开发的时候呢

08:30.480 --> 08:32.380
尤其是真正这样的一个单面量的

08:32.380 --> 08:34.180
或者说单对象的一个开发环境之中呢

08:34.180 --> 08:35.080
我们想要

08:35.080 --> 08:36.180
每一个时间处理函数

08:36.180 --> 08:37.380
在执行的时候

08:37.380 --> 08:38.080
最好说你们的

08:38.080 --> 08:40.780
disk最好是这样的一个对象

08:41.280 --> 08:42.480
如果为什么要这样的

08:42.480 --> 08:43.780
因为就是这样的情况下的话

08:43.780 --> 08:45.380
我们才可以随心所欲的

08:45.380 --> 08:47.880
去使用这里面的一些拳击辩量啊

08:48.280 --> 08:49.280
那有些同学问

08:49.380 --> 08:50.380
那我不就能

08:50.480 --> 08:52.580
那我就没有办法使用到他了吗

08:52.880 --> 08:53.680
那没关系啊

08:53.680 --> 08:54.080
为什么呢

08:54.080 --> 08:55.880
因为我们可以在这里面写个时间对象

08:56.080 --> 08:58.280
那在这里面的一点target

08:58.280 --> 08:58.880
其实

08:59.380 --> 09:00.080
不就是

09:00.980 --> 09:01.780
这个div了吗

09:01.780 --> 09:02.880
上线4一点

09:03.380 --> 09:03.480
哎

09:03.480 --> 09:03.980
当然

09:04.180 --> 09:05.180
这里面写的团队啊

09:05.280 --> 09:06.480
叫一点target对吧

09:06.580 --> 09:07.480
target

09:07.480 --> 09:08.280
再刷一张

09:08.280 --> 09:08.680
看

09:09.180 --> 09:09.980
就是div吧

09:09.980 --> 09:10.380
对吧

09:10.580 --> 09:11.080
ok

09:11.180 --> 09:13.780
那也就是我现在要做到这样的一件事情了

09:13.780 --> 09:14.280
但是

09:14.380 --> 09:16.080
我要把这个函数作为他的一个

09:16.080 --> 09:17.980
时间处理函数来执行

09:18.380 --> 09:19.180
我还要

09:19.480 --> 09:20.680
让他这个执行的时候

09:20.680 --> 09:21.680
你们的disk啊

09:21.680 --> 09:22.180
哎

09:22.180 --> 09:23.380
依旧是这样的一个

09:23.980 --> 09:24.580
对象

09:24.580 --> 09:25.780
呃类似的对象

09:25.780 --> 09:26.780
那这边就需要

09:26.880 --> 09:28.780
我们这个band金来介入了

09:29.180 --> 09:31.080
那band的其实他是啊

09:31.080 --> 09:32.280
他是函数

09:33.280 --> 09:34.380
这个函数啊

09:34.380 --> 09:36.980
或者说这个构造函数

09:37.580 --> 09:39.180
他原型上的一个方法

09:40.180 --> 09:40.680
嗯

09:40.680 --> 09:41.580
也就是说

09:42.380 --> 09:43.880
其实我们定义的任何一个函数

09:43.880 --> 09:45.380
比如说我定一个秀啊

09:45.480 --> 09:46.380
这个函数呢

09:46.380 --> 09:48.880
其实首先你要知道函数是引用值

09:48.880 --> 09:50.680
包括什么数组啊

09:50.680 --> 09:52.280
数组他也是引用值

09:52.280 --> 09:53.380
当然对象呢

09:53.380 --> 09:55.280
他也是引用值

09:55.380 --> 09:57.880
这些引用值其实他们本质上都是有

09:59.380 --> 10:01.780
哎都是有构造函数的啊

10:01.980 --> 10:03.480
那瑞的构造函数

10:03.480 --> 10:04.980
数组构造函数是谁啊

10:05.080 --> 10:06.180
也就是这个ai吧

10:06.180 --> 10:06.580
对吧

10:06.580 --> 10:07.180
当然呢

10:07.180 --> 10:08.980
这种资本量的对象啊

10:09.580 --> 10:10.380
哎这种

10:10.580 --> 10:12.080
就是原生的对象呢

10:12.080 --> 10:13.880
他的构造函数呢是albumjet

10:14.280 --> 10:16.380
当然如果说你真正写一个函数的话

10:16.480 --> 10:17.380
就说写个函数

10:17.480 --> 10:18.680
啊不用那个寿函数对吧

10:18.680 --> 10:20.180
他的构造函数呢是function

10:20.180 --> 10:20.880
啊

10:21.280 --> 10:22.380
unctln

10:22.880 --> 10:25.480
那咱们一会到还会进行这样的一个测

10:25.780 --> 10:27.980
啊我们一会还会进行这样的一个测验啊

10:28.180 --> 10:30.780
就是那个来测一下这个函数的

10:30.980 --> 10:32.080
原型到底是不是他

10:32.080 --> 10:33.380
但这边你先记住啊

10:33.480 --> 10:34.180
你先记住

10:34.580 --> 10:35.480
那这样的话

10:37.080 --> 10:38.480
你说所有的函数

10:38.480 --> 10:40.580
其实他的个函数都是他

10:40.580 --> 10:41.980
那定义在这个东西的

10:41.980 --> 10:43.780
会定义在这个函数的原型

10:43.880 --> 10:45.180
这样的一些方法

10:45.180 --> 10:46.980
那所有的函数他都是可以去使用的

10:47.080 --> 10:48.180
所以说啊

10:48.280 --> 10:49.980
我们在这里面可以直接拿到这个

10:49.980 --> 10:53.380
寿函数通过点半的方式啊

10:53.380 --> 10:54.980
来去改变一下

10:55.180 --> 10:56.880
这个函数的个disk指向

10:56.880 --> 10:57.680
但你要知道一点啊

10:57.680 --> 10:59.380
其实当我这个disk点寿

10:59.580 --> 11:00.980
去调这个半人的时候

11:01.180 --> 11:01.980
他最后呢

11:01.980 --> 11:03.480
因为半的他也是个方法

11:03.480 --> 11:04.680
他也是要去执行对不对

11:04.680 --> 11:07.280
那进行完其实他本身上是发挥了个新函数

11:07.880 --> 11:08.880
然后一个新函数

11:09.280 --> 11:10.580
什么这个新函数呢

11:10.880 --> 11:13.480
他里面真正执行的功能

11:13.480 --> 11:16.580
确实是这个disk点寿这个功能

11:16.680 --> 11:19.580
但是这个函数里面真正的这个disk

11:19.680 --> 11:20.880
其实发生了改变

11:20.880 --> 11:22.080
怎么来改变呢

11:22.080 --> 11:23.980
好我再回过头来来写写啊

11:24.080 --> 11:24.980
disk点寿

11:25.080 --> 11:25.680
bender

11:25.880 --> 11:26.680
啊好了

11:26.880 --> 11:30.180
我要这个bender的第一个参数是谁呢

11:30.280 --> 11:30.980
是这个

11:31.080 --> 11:31.880
list

11:31.980 --> 11:34.980
那在我这个benderevent这个函数里面

11:35.180 --> 11:37.180
我去往里面写这个disk

11:37.280 --> 11:37.980
咱看这

11:38.380 --> 11:40.080
disk就是这个list吗

11:40.080 --> 11:40.680
对吧

11:40.680 --> 11:41.680
那这样的话

11:41.780 --> 11:43.280
也就相当于我把这个list

11:43.280 --> 11:45.580
作为这个bender第一个函数放到里面来

11:45.580 --> 11:46.640
那他最后

11:46.640 --> 11:48.480
bender所返回一个新的函数

11:48.580 --> 11:50.080
他要在执行的时候呢

11:50.280 --> 11:51.980
既执行到这个秀的功能

11:52.080 --> 11:54.280
又让这个disk变成什么这个list

11:54.380 --> 11:56.380
好那咱再来看一下刷新一次

11:57.280 --> 11:57.780
一点

11:58.280 --> 11:58.780
ok

11:59.080 --> 12:00.580
这个是不是还是这个div对吧

12:00.680 --> 12:01.780
但是呢我在这里吗

12:02.180 --> 12:03.380
当然是出一个disk啊

12:03.380 --> 12:03.980
出个disk

12:03.980 --> 12:04.680
这回的disk啊

12:04.680 --> 12:05.880
就会变成一个list了

12:05.880 --> 12:06.380
一点

12:07.280 --> 12:09.180
哎变成这样的一个list对象吧

12:09.280 --> 12:10.580
好那有的时候

12:10.680 --> 12:12.380
这个bender他的应用范围啊

12:12.380 --> 12:13.380
非常广啊

12:13.380 --> 12:14.480
也非常实用啊

12:14.480 --> 12:16.780
我举这个例子就是为了告诉你这样的一个

12:17.180 --> 12:18.080
呃道理

12:18.380 --> 12:19.480
那之后呢我们再来

12:19.580 --> 12:20.880
呃再来一步一步的

12:21.080 --> 12:22.580
去进行bender的这样的一个

12:22.580 --> 12:23.880
真实使用的

12:24.080 --> 12:24.780
一个

12:24.780 --> 12:25.180
怎么说呢

12:25.180 --> 12:28.080
就是我们来进行详细的介绍一下这个bender

12:28.580 --> 12:29.980
这样的一个使用的方式啊

12:30.180 --> 12:30.480
好

12:31.280 --> 12:32.680
首先呢我写一个函数

12:33.180 --> 12:34.180
比如说这个函数呢

12:35.880 --> 12:37.280
叫做bender

12:37.280 --> 12:39.480
让我帮你讲叫做一个受函数

12:39.480 --> 12:41.180
那当然这个受函数呢里面

12:41.680 --> 12:43.080
比如说可以接下来接受个参数吧

12:43.080 --> 12:44.480
叫name再来给h啊

12:44.580 --> 12:45.280
好我在这呢

12:45.380 --> 12:46.580
我去给你输出一下

12:46.580 --> 12:48.580
cancel.log一个disk

12:48.580 --> 12:49.180
当然这个

12:49.880 --> 12:51.280
这个disk.value吧

12:51.280 --> 12:51.580
行吧

12:51.580 --> 12:53.680
好当然这里面disk是没有value的

12:53.680 --> 12:54.280
但没关系

12:54.280 --> 12:55.380
我想我这么做一下

12:55.380 --> 12:57.480
我握一个value

12:57.580 --> 12:58.480
等于一个0

12:58.480 --> 13:00.480
好再握一个obj

13:00.480 --> 13:01.280
等于一个对象

13:01.280 --> 13:02.880
好了value呢是一个1

13:03.180 --> 13:04.680
好我先这么做

13:04.880 --> 13:05.380
在这呢

13:05.380 --> 13:07.780
我去cancel.log一个name和h

13:08.180 --> 13:08.580
ok

13:09.180 --> 13:10.480
那这样的话

13:11.380 --> 13:13.680
如果我在实行这个受的时候

13:13.680 --> 13:15.180
哎我直接去使用它

13:15.180 --> 13:17.180
其实按照我们之前gf的供应课里面

13:17.180 --> 13:18.280
你应该能理解啊

13:18.480 --> 13:19.780
这个受里面的disk是谁

13:20.280 --> 13:21.480
是不是就是window啊

13:21.480 --> 13:21.980
对吧

13:21.980 --> 13:23.280
那gf是window的话

13:23.480 --> 13:25.180
那其实我在输出的时候

13:25.680 --> 13:27.680
是不是输出的是window.value啊

13:27.680 --> 13:28.180
对吧

13:28.180 --> 13:31.180
那我们知道这个全体的有个变量叫做value

13:31.180 --> 13:32.980
它其实就是window下面的一个属性

13:32.980 --> 13:33.880
那这样的话

13:33.980 --> 13:35.780
disk.value不就是这个0了吗

13:35.780 --> 13:36.280
对不对

13:36.280 --> 13:37.380
那name和h的话

13:37.380 --> 13:39.780
就是取决于我里面传什么那个参数了

13:39.780 --> 13:40.080
对吧

13:40.080 --> 13:41.180
传个cst

13:41.180 --> 13:42.580
啊传一个对吧

13:42.580 --> 13:44.380
应该18c好保测一下

13:45.180 --> 13:46.380
稍息一次看一眼

13:46.880 --> 13:48.580
哎0 cst18对吧

13:48.580 --> 13:50.380
这个0很反应问题对吧

13:50.380 --> 13:52.380
有的时候一个函数在进行的时候

13:52.480 --> 13:54.380
没有什么东西去显示调查的话

13:54.380 --> 13:56.780
啊这边呢会有一个默认的一个disk绑定

13:56.780 --> 13:57.780
啊就是

13:58.580 --> 13:59.580
disk是window

13:59.580 --> 13:59.980
啊

14:00.280 --> 14:00.780
当然呢

14:00.780 --> 14:02.480
这个其实在严格模式下的话

14:02.480 --> 14:04.080
它还有点不太一样的地方啊

14:04.080 --> 14:05.380
这个等于讲到es6的时候

14:05.380 --> 14:06.580
我们就会帮你们讲es6的时候

14:06.580 --> 14:08.380
还会跟你们详细的去说一说啊

14:08.780 --> 14:10.580
啊因为disk的一个绑定机制

14:10.580 --> 14:13.080
其实是个一个比较复杂的一个机制

14:13.080 --> 14:13.180
啊

14:13.180 --> 14:15.580
所以我们供应课里面给你大概讲清楚了

14:15.580 --> 14:15.980
啊

14:16.180 --> 14:18.480
基本上是3分之2的一个这样的机制

14:18.480 --> 14:19.780
但是后面一些特殊情况的话

14:19.780 --> 14:20.780
咱们再就会帮你们给你

14:20.780 --> 14:22.580
详细的进行这样的一个讲述啊

14:22.680 --> 14:23.480
好现在呢

14:23.480 --> 14:24.280
我保存一下

14:25.380 --> 14:25.980
呃

14:25.980 --> 14:27.080
大家我在这里面呢

14:27.080 --> 14:27.780
再来一次啊

14:27.780 --> 14:29.480
这是我这么去制程的时候

14:29.480 --> 14:29.880
当然呢

14:29.880 --> 14:31.180
它一定是这样的一个指示

14:31.180 --> 14:32.380
那如果我想这么做

14:32.480 --> 14:33.480
我我这样

14:33.580 --> 14:35.280
我通过show的方式

14:35.280 --> 14:37.780
我这样我握一个new show

14:37.980 --> 14:38.380
好

14:39.180 --> 14:39.980
我让show呢

14:40.080 --> 14:41.080
点办了一下

14:41.180 --> 14:41.780
因为这回呢

14:41.780 --> 14:43.280
我不想让进门disk啊

14:43.280 --> 14:44.580
是这个模式的window了

14:45.080 --> 14:46.680
我想让进门disk谁呢

14:47.580 --> 14:48.080
ok

14:48.280 --> 14:50.180
是这个obj

14:50.380 --> 14:51.580
那如果你学过car的话

14:51.580 --> 14:53.080
你可以直接去这么做啊

14:53.080 --> 14:54.280
那我们办的

14:54.280 --> 14:55.980
用我们办的这样的一个道理

14:56.080 --> 14:57.580
因为你要使用car的话

14:57.580 --> 14:58.280
你会发现

14:58.480 --> 15:00.380
你直接在这行就只

15:00.380 --> 15:00.880
呃

15:00.880 --> 15:02.780
直接在这行就执行了

15:02.780 --> 15:04.580
并且你每次在执行的时候

15:04.580 --> 15:05.580
都需要点靠一下

15:05.580 --> 15:06.080
对吧

15:06.180 --> 15:07.580
我们点办的怎么样呢

15:07.580 --> 15:09.580
我们点办的是要返回新的函数

15:09.580 --> 15:10.580
返回之后的话

15:10.580 --> 15:11.280
你什么时候调用

15:11.280 --> 15:11.980
我不管你

15:12.080 --> 15:12.980
你想什么时候去调用

15:12.980 --> 15:14.080
在什么时候调用

15:14.080 --> 15:14.480
而且呢

15:14.480 --> 15:15.680
每次调用之后的话

15:15.880 --> 15:16.880
我也不用重新

15:16.880 --> 15:18.480
每每次调用之前的话

15:18.480 --> 15:20.280
我也不用重新去办的了

15:20.280 --> 15:21.680
我办的一下就ok了啊

15:21.680 --> 15:23.480
就说办的的一个方便之处

15:23.480 --> 15:25.480
他就是我先把这个工作给你准备好

15:25.480 --> 15:26.780
后面想怎么去使用的话

15:26.780 --> 15:27.280
对吧

15:27.280 --> 15:28.480
都都ok

15:28.480 --> 15:28.980
那在这的话

15:28.980 --> 15:29.980
我可以这么做

15:29.980 --> 15:30.380
呃

15:30.380 --> 15:31.680
让瘦点办了一下

15:31.680 --> 15:33.680
我在这边写个obj啊

15:33.680 --> 15:34.480
那第一个参数

15:34.480 --> 15:35.480
决定了这个

15:35.480 --> 15:36.980
他返回的新函数

15:36.980 --> 15:37.580
对吧

15:37.580 --> 15:38.180
他执行的时候

15:38.180 --> 15:39.180
那边的电子到底是谁

15:39.180 --> 15:39.580
当然呢

15:39.580 --> 15:40.580
这个经济的功能

15:40.580 --> 15:41.980
有这个瘦来决定

15:41.980 --> 15:42.880
那现在也就是说

15:42.880 --> 15:43.880
这个牛瘦

15:43.880 --> 15:45.280
其实在执行的时候

15:46.180 --> 15:46.980
经济的功能

15:46.980 --> 15:48.080
就是这个42行

15:48.080 --> 15:49.380
43行的一个功能

15:49.380 --> 15:50.880
只不过里面的电子

15:50.880 --> 15:51.780
发生了变化

15:51.780 --> 15:52.380
变成谁呢

15:52.380 --> 15:53.180
变成这个obj

15:53.180 --> 15:53.880
对吧

15:53.880 --> 15:55.080
变成了他以后的话好了

15:55.080 --> 15:56.380
那这个电子点外的是谁了

15:57.780 --> 15:58.680
上一次看一样

15:59.780 --> 16:00.080
哎

16:00.080 --> 16:00.680
不就是一了吗

16:00.680 --> 16:01.080
对吧

16:01.080 --> 16:01.780
但由于啊

16:01.780 --> 16:03.180
我没有这个传这个参数

16:03.180 --> 16:03.480
对不对

16:03.480 --> 16:04.280
所以说

16:05.280 --> 16:06.680
他是打个案子办了

16:06.680 --> 16:07.480
我保存一下

16:07.680 --> 16:07.980
来

16:07.980 --> 16:08.480
咱看一样

16:08.480 --> 16:09.080
上一次

16:09.780 --> 16:10.980
呃12318

16:10.980 --> 16:11.480
对吧

16:11.480 --> 16:11.880
ok

16:12.480 --> 16:13.780
那办的话

16:13.780 --> 16:15.280
就是他就是起到这样一个作用

16:15.280 --> 16:15.780
但是呢

16:15.780 --> 16:17.380
其实我们还没有完全的讲完啊

16:17.380 --> 16:18.380
因为这个办了呢

16:19.480 --> 16:20.780
他后面还有两个这样的一个

16:20.780 --> 16:21.780
他还有

16:21.780 --> 16:22.140
呃

16:22.140 --> 16:22.980
更多的一些参数

16:22.980 --> 16:24.780
可以去进行这样的一个天系啊

16:24.780 --> 16:25.480
你看好了

16:25.480 --> 16:25.940
我们办了

16:25.940 --> 16:26.480
其实

16:26.480 --> 16:27.480
不只可以穿一个彩裳

16:27.480 --> 16:29.280
还可以穿很多个参数

16:29.280 --> 16:30.380
那比如说

16:30.380 --> 16:31.080
呃

16:31.080 --> 16:33.380
其实这边跟那个偏寒数相当

16:33.380 --> 16:35.180
相当于有一定这样的一个关系啊

16:35.180 --> 16:36.580
那偏寒数它是什么呢

16:36.580 --> 16:37.580
就是它是

16:37.580 --> 16:38.780
呃你要学科理化的话

16:38.780 --> 16:40.380
你就需要去了解偏寒数

16:40.380 --> 16:42.680
但你要了解寒数组合的话

16:42.680 --> 16:44.180
这种寒数是变成的

16:44.180 --> 16:45.780
你都需要了解这个偏寒数

16:45.780 --> 16:46.980
就说在我们这样的一个

16:46.980 --> 16:49.380
你不知道gs后续的一个课论之中

16:49.380 --> 16:50.080
呃

16:50.080 --> 16:51.780
其实呢会讲这样的一个偏寒数

16:51.780 --> 16:52.580
但也会讲科理化

16:52.580 --> 16:54.080
也会讲寒数组合

16:54.080 --> 16:54.380
这边呢

16:54.380 --> 16:55.380
你先直接去用啊

16:55.380 --> 16:57.180
先看一下它这样的一个形式

16:57.180 --> 16:58.380
就是呃

16:58.380 --> 16:59.780
我在办了这个第一彩数呢

16:59.780 --> 17:01.780
确实能改变这样的一个指向

17:01.780 --> 17:02.480
但你要知道呢

17:02.480 --> 17:03.780
我这个寿在定义的时候

17:03.780 --> 17:05.380
它需要接受两个参数

17:05.380 --> 17:06.880
那如果说有一个参数呢

17:06.880 --> 17:08.080
就是固定它不变了

17:08.080 --> 17:08.780
就是sd了

17:08.780 --> 17:09.080
对吧

17:09.080 --> 17:09.380
好了

17:09.380 --> 17:10.980
那我可以当做第二个参数

17:10.980 --> 17:12.780
我把这一这样去一放

17:12.780 --> 17:15.480
那也有那也就是后续的参数呢

17:15.480 --> 17:16.280
啊啊

17:16.280 --> 17:17.280
除了第一位以外啊

17:17.280 --> 17:18.480
后面的参数呢

17:18.480 --> 17:20.380
其实就可以作为哎

17:20.380 --> 17:21.380
这个寿的这样一个

17:21.380 --> 17:23.080
直接的一个实际参数

17:23.080 --> 17:24.180
那比如说我在这里面

17:24.180 --> 17:25.880
只添了一个sst

17:26.880 --> 17:27.680
呃

17:27.680 --> 17:29.680
只只添了这样一个sst

17:29.680 --> 17:31.580
那添完这样的一个sst以后

17:33.180 --> 17:34.780
我再去添写

17:34.780 --> 17:36.780
就是我再去执行这个牛寿的时候

17:36.780 --> 17:39.680
我是不是还去差了一个这样的参数啊

17:39.680 --> 17:41.380
那我只需要在这我再去添一下

17:41.380 --> 17:41.980
不就行了吗

17:41.980 --> 17:42.580
对吧

17:42.580 --> 17:42.780
好

17:42.780 --> 17:43.480
我保存一下

17:43.480 --> 17:43.980
展开呀

17:43.980 --> 17:44.880
现在上一次

17:47.050 --> 17:47.250
哎

17:47.250 --> 17:48.750
是不是一就没问题啊

17:48.750 --> 17:49.650
呃一

17:49.650 --> 17:50.650
sst 18

17:50.650 --> 17:51.050
对吧

17:51.050 --> 17:52.250
e cc 18

17:52.250 --> 17:52.950
好

17:52.950 --> 17:53.750
那如果说

17:53.750 --> 17:55.150
我就干脆

17:55.150 --> 17:57.550
让这个地方都添写了是吧

17:57.550 --> 17:58.250
那这样的话

17:58.250 --> 17:59.450
其实我在执行的时候

17:59.450 --> 18:00.550
哎由于我办的时候

18:00.550 --> 18:02.050
我就把这两个参数

18:02.050 --> 18:03.050
传到里面来了对吧

18:03.050 --> 18:04.950
我每次在执行这个新函数的时候

18:04.950 --> 18:06.150
我什么参数都不用查了

18:06.150 --> 18:07.250
因为之前已经传过了

18:07.250 --> 18:07.950
上一次

18:07.950 --> 18:09.250
是不是就是e cc 18

18:09.250 --> 18:09.750
对吧

18:09.750 --> 18:11.350
哪怕我再去执行一次

18:12.350 --> 18:12.850
so

18:13.750 --> 18:15.550
一回说是不是还是e cc 18

18:15.550 --> 18:15.950
对吧

18:16.350 --> 18:16.750
好

18:16.750 --> 18:17.350
那这样的话

18:17.350 --> 18:18.450
我们已经就知道了

18:18.450 --> 18:20.550
其实这种形式的一个传参

18:20.550 --> 18:22.150
呃

18:22.150 --> 18:23.250
在办里面呢

18:23.250 --> 18:24.650
也是被广泛去使用的

18:25.650 --> 18:26.250
ok

18:26.250 --> 18:27.250
那这样的话

18:27.250 --> 18:28.250
我们已经了解了

18:28.250 --> 18:28.650
对吧

18:28.650 --> 18:30.450
一个韩束默认执行的时候呢

18:30.450 --> 18:32.450
他就一定是这个

18:32.750 --> 18:33.450
sst对吧

18:33.450 --> 18:34.950
但如果说你办的话的话

18:34.950 --> 18:36.350
你是可以改变他这样的一个

18:36.650 --> 18:37.650
你可以改变他这样的一个

18:37.650 --> 18:38.750
对指向的

18:38.850 --> 18:41.050
但我这个办里面是确实调了参数

18:41.050 --> 18:42.350
但是如果我不调的

18:42.350 --> 18:43.650
或者说我传一个空的

18:43.950 --> 18:45.250
咱看一下上一次

18:45.250 --> 18:45.950
他是谁呢

18:46.750 --> 18:47.450
0了

18:47.450 --> 18:48.850
那0的意思不就是哎

18:48.850 --> 18:49.550
又变成了

18:49.850 --> 18:50.850
变成了window了吗

18:50.850 --> 18:51.450
对吧

18:51.450 --> 18:51.950
好

18:52.050 --> 18:53.450
那这边我们可以总结一下

18:53.450 --> 18:55.450
但是如果这个首先这个办的

18:55.650 --> 18:56.350
他怎么用的话

18:56.350 --> 18:57.050
我相信啊

18:57.050 --> 18:58.350
你听完之后一定会懂啊

18:58.350 --> 19:00.150
那这边我们为了模拟去实现他

19:00.150 --> 19:00.550
所以说呢

19:00.550 --> 19:01.650
我要把他这样的一个特点

19:01.650 --> 19:02.650
给他总结一下

19:02.650 --> 19:03.650
就是他第一个参数

19:04.450 --> 19:05.850
啊如果添难的话

19:05.850 --> 19:06.150
好

19:06.150 --> 19:07.650
最后这个韩束在执行的时候呢

19:08.550 --> 19:09.550
就是window对吧

19:09.550 --> 19:10.150
如果第一个

19:10.150 --> 19:10.750
第一个参数呢

19:10.750 --> 19:12.150
添的是某一个对象的话

19:12.150 --> 19:13.650
那他的一个des呢

19:13.650 --> 19:15.050
执行就是某一个对象了

19:16.150 --> 19:17.650
那但那如果说

19:18.150 --> 19:20.350
我们在执行这个韩束的时候呢

19:20.550 --> 19:22.150
我们不要调皮对吧

19:22.250 --> 19:23.550
他本来不是构造韩束

19:23.550 --> 19:25.550
我们就非得按构造韩束的方式来执行

19:25.550 --> 19:26.450
比如说我扭

19:27.650 --> 19:28.950
这个瘦

19:29.550 --> 19:31.550
扭这个瘦来去执行

19:34.870 --> 19:37.470
或者说像或者说扭这个扭

19:38.170 --> 19:38.770
扭瘦

19:40.670 --> 19:41.870
啊比如说我这么去执行他

19:41.970 --> 19:43.270
啊这么也能去执行对不对

19:43.270 --> 19:45.070
好那他什么des呢

19:45.170 --> 19:45.970
又是谁呢

19:45.970 --> 19:47.370
这边咱今天没有做测验对吧

19:47.370 --> 19:48.870
咱们来看一下耍声音词啊

19:49.470 --> 19:50.070
呃

19:51.570 --> 19:53.470
来什么是安底万的对不对

19:53.470 --> 19:54.570
为什么是安底万的呢

19:54.570 --> 19:55.670
道理也很简单对吧

19:55.670 --> 19:58.670
因为你听我这个一个韩束他执行的话

19:58.770 --> 20:02.370
他指定的创建他自以为一个des对象对不对

20:02.370 --> 20:04.270
那他跟你传什么支对不对

20:04.270 --> 20:05.370
那是没有关系的

20:05.870 --> 20:08.370
啊你穿穿穿什么纸啊

20:08.470 --> 20:10.070
你都会发现这个构造韩束里面

20:10.070 --> 20:11.370
他自己穿对象的

20:11.370 --> 20:12.870
他根本就没有这个vial这个纸

20:12.870 --> 20:14.070
所以说你在输出的话

20:14.070 --> 20:14.970
这个vial是啥了

20:15.170 --> 20:16.070
那就空吧对吧

20:16.470 --> 20:17.470
刷新对不对

20:17.670 --> 20:19.070
OK那其实呢

20:19.070 --> 20:19.970
我们讲到这的话

20:19.970 --> 20:20.770
你会发现呢

20:20.770 --> 20:22.670
如果你的ds基础不是非常好的话

20:22.670 --> 20:24.270
可能你已经听蒙蔽了对不对

20:25.070 --> 20:26.670
呃那也没关系啊

20:26.670 --> 20:28.770
呃如果说你ds基础没那么好的情况下的话

20:28.770 --> 20:29.670
你可以回去啊

20:29.670 --> 20:32.970
再去多多的去听我们这样的ds的供应课

20:33.170 --> 20:33.670
但是呢

20:34.270 --> 20:35.370
调定课以后的话

20:35.370 --> 20:36.370
呃我们嗯

20:36.370 --> 20:37.270
如果说你是这一班

20:37.270 --> 20:38.970
或这一班的一个学艾圈员的话

20:39.170 --> 20:40.070
我倒很放心

20:40.070 --> 20:42.370
因为我们有没有人会讲这样的一些项目啊

20:42.470 --> 20:44.170
会讲这样的一些喊架

20:44.170 --> 20:46.270
呃会讲这样的一些框架库啊

20:46.370 --> 20:47.770
包括一些圆码啊

20:47.870 --> 20:49.470
那个时候当你打蒙完以后的话

20:49.470 --> 20:50.470
你再听这样的课的话

20:50.470 --> 20:51.570
你是完全没问题的

20:51.570 --> 20:52.670
但如果说你不是我们这样的

20:53.070 --> 20:55.070
呃这一班或这一班的一个同学呢

20:55.170 --> 20:57.070
我希望你供应课停完以后的话

20:57.070 --> 21:00.970
呃你能自己去呃多多的去记笔记

21:00.970 --> 21:02.670
自己去多多去思想

21:02.670 --> 21:04.770
或者说自己去想一些项目

21:04.870 --> 21:07.570
你自己去写一些班的ds基础打蒙号以后呢

21:07.770 --> 21:08.970
再回来去听这个话

21:08.970 --> 21:10.270
一定是没问题的啊

21:10.470 --> 21:11.470
好那我这样

21:11.770 --> 21:12.670
这里面我再说一下

21:12.670 --> 21:13.870
就是当你牛瘦的时候呢

21:13.870 --> 21:14.670
这个des呢

21:14.670 --> 21:15.870
其实就是这个

21:15.870 --> 21:17.470
他自己所穿的对象对不对

21:17.470 --> 21:19.170
就是这个牛瘦

21:19.370 --> 21:21.170
他所穿的一个对象嘛

21:22.170 --> 21:23.670
好那除此之外的话

21:23.670 --> 21:25.070
还有一个特点就是这个

21:25.270 --> 21:26.270
第二个拆售

21:26.270 --> 21:26.670
当然

21:27.170 --> 21:28.170
第一个拆售以后吧

21:28.270 --> 21:29.670
第一个拆售以后

21:31.370 --> 21:36.270
啊其他的一些什么二三四什么什么我对吧

21:36.370 --> 21:37.670
后续的所有的拆售呢

21:37.670 --> 21:40.870
他都做一种偏寒兽的方式来倒入进来啊

21:41.470 --> 21:42.870
那当然穿几个拆售

21:42.870 --> 21:43.370
其实他都

21:43.370 --> 21:44.370
其实他都无所谓的

21:44.370 --> 21:45.470
其实他都无所谓的

21:45.770 --> 21:46.570
那现在呢

21:47.670 --> 21:49.570
那其实我们只是想知道一下

21:50.070 --> 21:51.170
当你拆的时候呢

21:51.170 --> 21:52.670
你传的后续拆售

21:52.670 --> 21:53.970
他会作为你后面函数

21:53.970 --> 21:56.870
支援的时候的一个直接拆售的一个传入

21:56.870 --> 21:57.970
啊那好

21:57.970 --> 21:58.470
ok

21:58.470 --> 21:59.870
那我们知道这个特点以后的话

21:59.870 --> 22:01.970
我们可以去尝试的去来写一下

22:01.970 --> 22:02.370
对吧

22:02.370 --> 22:04.070
这个拆的到底是怎么来实现的

22:04.470 --> 22:05.270
啊好了

22:05.570 --> 22:06.970
那我在下面呢

22:07.870 --> 22:10.070
啊来去给方神

22:13.230 --> 22:14.730
点飘飘飘飘

22:15.030 --> 22:16.630
哎给他绑那个new band

22:16.630 --> 22:17.630
但他是一个函数

22:17.830 --> 22:18.830
好这个函数呢

22:18.830 --> 22:20.330
我们一定知道啊

22:20.330 --> 22:21.730
他要传递一个第一个

22:21.730 --> 22:23.430
他要传递第一个彩数对吧

22:23.430 --> 22:25.230
因为单子使用new band的话

22:25.230 --> 22:27.430
其实你都是要把里面传递一个彩数的

22:27.430 --> 22:28.530
啊要不然你穿的

22:28.530 --> 22:29.730
要不然你穿都比这对吧

22:29.730 --> 22:31.430
当然你不穿的话也行

22:31.430 --> 22:32.330
但你不穿的话

22:32.630 --> 22:33.430
呃这样的话

22:34.430 --> 22:34.930
其实

22:35.230 --> 22:37.430
呃怎么说呢是一个错误的操作

22:37.430 --> 22:38.630
但是我们也可以做一个这样的

22:38.630 --> 22:40.130
那个建筒的一个处理啊

22:40.430 --> 22:42.530
那在这里面首先还是给你做一下这样的

22:42.530 --> 22:43.630
测试

22:43.630 --> 22:44.830
我们来看一下这个瘦

22:46.530 --> 22:47.630
来看一下这个瘦

22:50.630 --> 22:51.830
ok那这样

22:52.130 --> 22:53.730
呃瘦

22:54.130 --> 22:54.930
我们来

22:57.830 --> 22:58.330
呃

22:58.830 --> 23:00.130
我们来去测一下

23:00.230 --> 23:02.330
点钢钢飘飘

23:03.730 --> 23:04.930
钢钢哎

23:06.230 --> 23:07.630
这样这样我这么做

23:08.030 --> 23:10.230
我来看一下他的原型是不是

23:10.230 --> 23:11.630
functl under

23:12.230 --> 23:14.730
飘飘飘pyp的原型哎

23:14.730 --> 23:16.330
是不是他是个错误对吧

23:16.330 --> 23:18.030
也就是说这个瘦的过道过道

23:18.030 --> 23:20.430
他说了确实是这个方式对吧

23:20.630 --> 23:22.030
那这样的话就很好办了

23:22.030 --> 23:24.030
那我在这个他的过道寒瘦的原型上

23:24.030 --> 23:25.330
加上一个方法对不对

23:25.330 --> 23:28.130
那所有的由他所做出来的一个寒瘦

23:28.130 --> 23:29.530
他都可以去使用了呗对吧

23:29.630 --> 23:31.530
那在这的话写个new band

23:31.530 --> 23:33.230
写完new band以后我给你刷新字

23:33.230 --> 23:34.230
咱看一下

23:34.330 --> 23:35.530
看一下我拿到这个瘦

23:35.930 --> 23:37.030
是否可以去

23:37.630 --> 23:39.330
哎使用到他对吧

23:39.430 --> 23:41.030
是不是可以的对吧好

23:41.330 --> 23:42.630
那在这的话我们说了

23:42.630 --> 23:44.830
我们这个new band 其实必须

23:44.830 --> 23:46.030
不是必须嘛

23:46.030 --> 23:48.530
是期望你一定要传一个这样的一个参数的

23:48.530 --> 23:49.730
但是你不传行不行的

23:49.830 --> 23:50.730
啊你不传的话

23:50.830 --> 23:52.430
那你不传那我也没有招对不对

23:52.430 --> 23:54.130
我就只能做一个这样的处理的对吧

23:54.130 --> 23:56.230
是如果你有我就使用你如果你没有呢

23:57.230 --> 23:58.530
啊那我就

24:01.410 --> 24:02.710
冰斗呗是吧

24:02.710 --> 24:04.510
这样就ok对吧啊好了

24:04.610 --> 24:05.510
那之后再往下来

24:05.610 --> 24:07.110
之后再往下来我们要知道这个new band

24:07.110 --> 24:09.610
其实要返回一个新的寒瘦对吧

24:09.610 --> 24:11.110
就返回一个方式

24:11.810 --> 24:13.110
那这个新的寒瘦呢

24:13.310 --> 24:15.010
呃你要知道一点

24:15.010 --> 24:16.010
在这个新的寒瘦呢

24:16.010 --> 24:17.910
我们要要拿他去支持赢的

24:17.910 --> 24:18.910
但他制型的话

24:18.910 --> 24:21.310
其实要真正的功能是谁啊

24:21.310 --> 24:22.110
就比如说

24:22.410 --> 24:24.010
我用这个瘦点办了对吧

24:24.010 --> 24:24.910
返回一个新寒瘦

24:24.910 --> 24:26.810
这个新寒瘦呢变成的new瘦

24:26.910 --> 24:29.110
那这个新寒瘦其实就是他呗对不对

24:29.210 --> 24:30.710
但是他在制型的时候呢

24:30.810 --> 24:33.010
new瘦再去执行的时候

24:33.110 --> 24:35.210
是不是实际上要执行这个瘦的功能啊

24:35.310 --> 24:36.010
那换句话说

24:36.010 --> 24:38.010
也就是我要在这个寒瘦执行的时候呢

24:38.110 --> 24:41.010
其实去执行谁啊去执行这个瘦对吧

24:41.110 --> 24:42.410
但我能直接去执行这个瘦吗

24:42.410 --> 24:43.910
请问不能对不对

24:43.910 --> 24:44.510
因为什么呢

24:44.510 --> 24:46.310
因为我们既然把一个new band

24:46.310 --> 24:47.910
定在了圆形身上

24:47.910 --> 24:49.710
那定在圆形身上以后的话

24:50.010 --> 24:51.910
那我就要给所有的寒瘦去使用的

24:51.910 --> 24:54.210
我不是要单独给你一个瘦去使用的对吧

24:54.410 --> 24:55.810
那这边我们要知道一点

24:56.110 --> 24:57.610
这个this他是谁

24:58.310 --> 25:00.310
那谁调的他他就是谁呗

25:00.310 --> 25:00.910
对不对

25:01.010 --> 25:02.910
那在这里面是不是瘦去调的他啊

25:03.410 --> 25:05.610
那我这里面是new band对不对

25:05.710 --> 25:07.110
那我在真正去制型的时候

25:07.110 --> 25:09.410
是不是要去瘦点new band

25:10.010 --> 25:10.410
对吧

25:10.410 --> 25:13.310
那你可以把这个new band跟这个band对吧

25:13.310 --> 25:15.410
看成是相同的一个对不对

25:15.510 --> 25:17.510
只为这个东西是我自己写的啊

25:17.510 --> 25:19.610
来说瘦点band或者瘦点new band

25:19.610 --> 25:21.410
其实本身上都是要返回一个新的寒瘦

25:21.610 --> 25:22.610
去执行他对吧

25:22.610 --> 25:23.410
那是执行的时候呢

25:23.410 --> 25:25.310
执行的功能其实他就是这个前面这个

25:25.410 --> 25:27.510
调他这个寒瘦的一个功能啊

25:27.810 --> 25:28.310
ok

25:28.310 --> 25:29.910
那谁调的这个new band

25:29.910 --> 25:31.910
或者是谁调的这个band是不是这个瘦啊

25:31.910 --> 25:32.210
对吧

25:32.210 --> 25:33.310
那这里面的this

25:33.410 --> 25:35.310
不就是这个调的那个值吗

25:35.410 --> 25:36.410
他就是瘦呗对吧

25:36.610 --> 25:38.110
好了那在这我请问一点

25:38.910 --> 25:39.810
那既然是这样的话

25:39.810 --> 25:41.510
可以不可以在这直接去执行这个

25:43.520 --> 25:43.920
他呢

25:43.920 --> 25:45.820
直接去拿到他去执行呢

25:45.920 --> 25:46.620
啊那

25:47.620 --> 25:48.320
我拿到他的话

25:48.320 --> 25:49.320
请问这个this啊

25:49.320 --> 25:50.520
他还是这个瘦了吗

25:51.120 --> 25:52.120
当然你看好了

25:52.520 --> 25:53.320
我在这

25:53.520 --> 25:56.620
为个叫new瘦等于他

25:56.620 --> 25:58.520
好我再去new这个瘦的话

25:58.720 --> 26:00.820
好了那谁调的这个new瘦啊

26:00.820 --> 26:02.520
但new瘦就是这个寒瘦对不对

26:02.620 --> 26:03.420
marry去调用他

26:03.420 --> 26:04.620
这里面this按照默认保定

26:04.620 --> 26:05.420
他是vendor了

26:05.520 --> 26:07.120
就不是这个寒瘦了等不等

26:07.420 --> 26:09.520
那我们的要求这个this

26:09.520 --> 26:10.420
必须是这个寒瘦

26:10.420 --> 26:13.420
所以说我的介意不操操作啊

26:13.520 --> 26:14.620
我把他为个self

26:14.620 --> 26:15.720
这个self是个this

26:16.120 --> 26:17.120
那是this的话

26:17.220 --> 26:18.120
那我在这

26:18.220 --> 26:19.420
我就让他是一个

26:20.120 --> 26:21.220
啊我就给你写下吧

26:21.220 --> 26:22.220
那这个this

26:22.220 --> 26:24.520
其实就是down这个new瘦的那个寒瘦

26:24.520 --> 26:25.920
那在我们这种情况之中呢

26:26.020 --> 26:27.320
他其实就是这个瘦呗

26:28.220 --> 26:29.220
瘦瘦好

26:29.520 --> 26:31.120
那我拿到他的话

26:31.120 --> 26:32.420
我能直接去执行吗

26:32.420 --> 26:34.020
请问我直接去执行的话

26:34.020 --> 26:36.220
我有去改变他里面的this指向吗

26:36.320 --> 26:36.920
没有吧

26:37.220 --> 26:37.620
是吧

26:37.820 --> 26:39.620
那他还需要去执行

26:39.620 --> 26:41.020
因为他要完成他的功能

26:41.220 --> 26:41.620
但是呢

26:41.620 --> 26:42.420
你执行完以后的话

26:42.420 --> 26:43.120
你还不能

26:44.320 --> 26:45.220
就是你还不能

26:46.120 --> 26:47.320
那你直接去执行他的话

26:47.320 --> 26:49.220
你还不能去给他改变这样的这个this指向

26:49.220 --> 26:49.820
所以说呢

26:49.920 --> 26:50.720
我有必要

26:51.520 --> 26:52.520
apply一下对不对

26:52.820 --> 26:53.520
apply一下

26:53.520 --> 26:53.920
第一个

26:53.920 --> 26:55.820
第一个参数我就添他感情了对不对

26:56.020 --> 26:59.120
添他的话就是改变他这样的一个this的指向啊

26:59.220 --> 27:00.020
那后面这个

27:00.120 --> 27:01.620
后面这个参数什么用的话

27:01.620 --> 27:02.920
其实你要听完供应课的话

27:02.920 --> 27:03.620
你也该懂

27:03.620 --> 27:04.920
其实他就是作为一个

27:05.120 --> 27:06.120
该寒瘦进行的时候

27:06.120 --> 27:08.020
一个实际参数来传入的

27:08.120 --> 27:09.020
那要求这里面呢

27:09.020 --> 27:10.420
传的是一个数组

27:10.420 --> 27:12.320
啊比如说我们瘦里面需要

27:12.620 --> 27:14.820
一个两个这样的一个行参

27:14.820 --> 27:17.020
那我在传这样的一个实际参数的时候

27:17.020 --> 27:17.920
我要放一个数组

27:17.920 --> 27:19.820
我给你们可以传一个值传

27:20.420 --> 27:21.020
两个值呗

27:21.020 --> 27:21.520
对吧

27:21.520 --> 27:22.120
那这边呢

27:22.120 --> 27:25.420
我先不能直接写死去进行这样的一个操作啊

27:25.820 --> 27:27.320
那我们再往下来

27:27.620 --> 27:28.520
再往下来的话

27:29.320 --> 27:30.420
可以要了解一点啊

27:30.420 --> 27:31.420
因为我这个寒数呢

27:31.420 --> 27:33.320
其实他没有这样的一个返回值

27:33.320 --> 27:35.620
但是如果这个功能里面是有返回值的话

27:35.820 --> 27:37.820
比如说他就返回了这个name

27:37.920 --> 27:38.720
加上一个

27:39.920 --> 27:41.620
a只加上一个this.value

27:41.820 --> 27:43.020
啊好了

27:43.620 --> 27:44.520
那这样的话

27:44.520 --> 27:46.320
是要求你这个受经完

27:46.520 --> 27:48.020
没有使用他的返回值的

27:48.320 --> 27:50.020
那我这个newsul在进行的时候

27:50.520 --> 27:52.120
好了确实都是你的功能对吧

27:52.220 --> 27:54.320
但是我这个newsul有返回值吗

27:54.320 --> 27:55.920
默认是返回按理犯的对吧

27:56.220 --> 27:57.220
没有的话怎么办呢

27:57.420 --> 27:58.620
我当然我要这么做了

27:59.320 --> 28:00.620
retake of copy 是吧

28:00.820 --> 28:02.720
返回下你这个受寒数进行的时候

28:02.720 --> 28:03.620
一个返回值呗

28:03.720 --> 28:04.420
这样不就行了吗

28:04.420 --> 28:05.520
啊好

28:05.820 --> 28:07.720
那再往后的话我们再往下来啊

28:07.720 --> 28:09.520
再往下来的话就是要来看一下

28:10.720 --> 28:11.520
就是要来看一下

28:11.720 --> 28:12.220
呃

28:13.020 --> 28:14.420
哎在这好

28:14.420 --> 28:16.220
第二个参数应该来传什么呢

28:16.220 --> 28:17.320
我们要知道

28:17.420 --> 28:18.520
我们在使用办的时候

28:18.520 --> 28:20.220
是其实上是可以这么做的对吧

28:20.420 --> 28:21.720
第一个参数我传

28:21.820 --> 28:22.720
我这个

28:23.020 --> 28:23.820
第一个参数呢

28:23.820 --> 28:25.820
我先传一下这样的一个值

28:25.920 --> 28:27.020
我在真正值用参数的时候呢

28:27.020 --> 28:28.620
我还可以再传一个参数对吧

28:28.620 --> 28:30.720
去銜接第二个这样的一个参数

28:31.020 --> 28:32.320
那这样的话我们可以

28:32.820 --> 28:34.420
在这边就要进行这样的一个处理

28:34.420 --> 28:35.320
怎么来处理呢

28:35.320 --> 28:36.620
其实也很简单啊

28:36.720 --> 28:37.320
这边呢

28:37.320 --> 28:39.520
我们要讲那个方斗和接流

28:39.520 --> 28:40.520
ok呃

28:40.520 --> 28:42.620
跟我们要讲这样的一个后面那个

28:43.120 --> 28:45.120
呃不是方斗和接流啊

28:45.120 --> 28:47.320
是这样的一个可以可以换的时候

28:47.720 --> 28:49.320
也会提到这样一个点啊

28:49.520 --> 28:51.620
那这边我先简简单来说一说吧

28:51.620 --> 28:53.120
啊我问一个

28:53.920 --> 28:55.620
ok问一个args啊

28:55.620 --> 28:57.220
往他等于ugamus啊

28:57.420 --> 28:59.520
um是不等于ugamus啊

28:59.520 --> 29:00.520
往他等于一个

29:01.120 --> 29:05.120
呃数组数组对方测测方法啊

29:05.320 --> 29:05.820
测测方法呢

29:05.820 --> 29:06.720
但是我不直接调用

29:06.720 --> 29:08.420
我通过quart方式来调调用

29:08.420 --> 29:09.920
往怎么传ugamus

29:10.120 --> 29:11.020
传ugamus以后的话

29:11.020 --> 29:12.220
我是写一个一

29:13.020 --> 29:14.220
写一什么意思呢

29:14.520 --> 29:16.320
首先你要知道一点这个target呢

29:16.320 --> 29:17.120
他其实是

29:18.220 --> 29:21.320
argumus argmtxargumus零这个参数对不对

29:21.520 --> 29:23.520
那如果说你在调这个new band的时候

29:23.520 --> 29:25.620
比如说好你传了一个obj对吧

29:25.620 --> 29:26.920
你又传了一个sexy

29:26.920 --> 29:28.020
那这个参数呢

29:28.020 --> 29:31.420
其实哎我要把它存起来存起来放哪呢

29:31.520 --> 29:33.020
作为这个函数啊

29:33.120 --> 29:34.420
真正调的时候

29:35.020 --> 29:36.020
我往里面怎么样

29:36.120 --> 29:36.720
去进

29:37.320 --> 29:38.720
传入呗对不对

29:38.720 --> 29:40.320
这点很关键啊

29:40.320 --> 29:41.220
那你要知道一点

29:41.320 --> 29:43.120
这个函数其实作为这个new

29:43.120 --> 29:44.520
瘦的一个反函函数对吧

29:44.520 --> 29:47.320
我们也可能拿到他再继续传一个参数

29:47.420 --> 29:48.520
那在这里面呢

29:48.520 --> 29:50.520
我们其实没有办法去规定

29:50.520 --> 29:52.920
到底有多少个形参因为不一定对吧

29:52.920 --> 29:55.020
因为可能瘦这里面的行

29:55.020 --> 29:56.320
行参需要5个消失

29:56.320 --> 29:57.120
如果他不一定的话

29:57.120 --> 29:58.420
我们在这里面就没有办法进行

29:58.420 --> 29:59.720
这样的一个固定

29:59.820 --> 30:00.720
那怎么办呢

30:00.720 --> 30:02.820
依旧你要知道这个函数在之前的时候

30:02.820 --> 30:04.820
他也有他的13领表argumus

30:05.020 --> 30:06.820
啊那我是不是可以这么做呀

30:06.920 --> 30:08.520
我问一个槓argumus

30:08.520 --> 30:10.320
他等于一个数组.sless

30:10.420 --> 30:11.420
然后点靠

30:11.820 --> 30:13.220
把他当做猜出一传字

30:13.220 --> 30:14.520
从零开始去结

30:14.620 --> 30:15.920
但这样一个结的方式

30:15.920 --> 30:17.120
我们在这样那个

30:17.220 --> 30:18.820
我们前期的gesquink课中呢

30:18.820 --> 30:20.020
也给你讲过

30:20.020 --> 30:22.020
也就是说想把一个类数组

30:22.620 --> 30:24.520
全部的给他结成变成一个数组的话

30:24.520 --> 30:25.420
你可以这么做对吧

30:25.620 --> 30:26.420
那这样的话

30:26.520 --> 30:28.020
如果我new的时候

30:28.020 --> 30:28.920
我传一个18

30:28.920 --> 30:30.520
那这个槓argumus

30:30.520 --> 30:32.120
其实他里面就是一个18倍

30:32.220 --> 30:32.820
对不对

30:33.120 --> 30:34.320
那在这边看的话

30:34.320 --> 30:36.220
就是如果你在办了的时候

30:36.220 --> 30:37.620
你传递这样的一个参数

30:37.620 --> 30:38.820
啊就是传了两个参

30:38.820 --> 30:39.820
或者传了三个参的话

30:39.820 --> 30:40.220
对吧

30:40.220 --> 30:42.220
当你传一个参以上的话

30:42.420 --> 30:43.220
不管你传几个参

30:43.220 --> 30:44.220
我们都可以通过

30:44.320 --> 30:45.320
这种方式准备

30:45.320 --> 30:46.820
我们从第一位开始去结

30:46.820 --> 30:47.820
从这开始去结

30:47.820 --> 30:48.120
对吧

30:48.220 --> 30:50.520
把它结成一个数组变成他

30:50.720 --> 30:52.120
那真的有我们这样的这种情况

30:52.120 --> 30:53.220
实际上这个argumus

30:53.220 --> 30:54.420
是只有这样一个

30:56.020 --> 30:56.720
sessy

30:56.920 --> 30:57.420
啊

30:57.720 --> 30:59.620
那这样的话有有什么用呢

30:59.620 --> 31:00.420
其实你要知道

31:00.420 --> 31:01.620
最后这个函数在之前的时候

31:01.620 --> 31:02.820
我们要执行这样一个功能

31:02.820 --> 31:03.420
这个功能呢

31:03.420 --> 31:04.820
其实就只有这个瘦这个功能

31:04.920 --> 31:05.920
瘦需要传递两个

31:05.920 --> 31:07.120
这样的一个刑参

31:07.120 --> 31:07.720
那在这的话

31:07.720 --> 31:08.720
我们通opline的方式

31:08.720 --> 31:10.420
来去进行这样的一个执行

31:10.420 --> 31:11.520
他需要传递第二个参数

31:11.520 --> 31:12.520
是一个数组

31:12.520 --> 31:13.320
这个数组呢

31:13.320 --> 31:13.920
哎

31:13.920 --> 31:16.120
也需要跟这个刑刑参

31:16.120 --> 31:17.620
就是这个数组的原则的个数

31:17.620 --> 31:19.720
需要跟这个刑参的个数相匹配

31:19.720 --> 31:20.220
那这样的话

31:20.220 --> 31:21.420
我就可以这么做了

31:21.420 --> 31:21.920
好了

31:21.920 --> 31:23.620
我其实无非就是让他最后变成

31:23.620 --> 31:24.520
这样的18倍

31:24.520 --> 31:24.920
对吧

31:24.920 --> 31:25.820
sessy18

31:25.820 --> 31:27.220
那现在我们已经知道了

31:27.720 --> 31:28.520
argumus

31:28.520 --> 31:29.420
是一个数组对吧

31:29.420 --> 31:30.620
我通过concat

31:30.620 --> 31:31.920
so n c c t

31:32.820 --> 31:34.320
我一连接一连接

31:34.320 --> 31:35.720
跟argumus来连接

31:35.820 --> 31:36.520
那这样的话

31:36.520 --> 31:37.320
你看一样

31:37.320 --> 31:38.520
是不是就可行了呢

31:39.820 --> 31:40.920
打他拿过来

31:41.520 --> 31:42.020
看这的

31:42.720 --> 31:43.520
我保存一下

31:43.620 --> 31:44.320
再刷新一次

31:45.820 --> 31:46.620
告arg

31:46.720 --> 31:47.920
没有没有被定义对吧

31:48.020 --> 31:50.120
48行arg没有被定义

31:50.120 --> 31:51.120
argis对吧

31:51.220 --> 31:52.920
好argis大意了

31:53.020 --> 31:53.920
刷新一次看一眼

31:54.920 --> 31:55.220
ok

31:55.220 --> 31:56.520
e sessy18对吧

31:56.620 --> 31:57.720
那这样的话就没问题了

31:57.720 --> 31:58.220
对不对

31:58.920 --> 31:59.520
当然呢

31:59.920 --> 32:00.520
这样请问一下

32:00.520 --> 32:02.120
确实是好像是没没问题的吧

32:02.120 --> 32:02.720
但我们这样

32:02.720 --> 32:03.320
我们

32:03.320 --> 32:04.620
他的进步再来测验对不对

32:04.620 --> 32:06.020
我的看一下这个反辈值

32:06.020 --> 32:07.720
是不是也是我所期待的反辈值

32:08.220 --> 32:08.720
保存一下

32:08.720 --> 32:09.320
来看一眼

32:09.720 --> 32:10.320
刷新一次

32:11.220 --> 32:11.420
哎

32:11.420 --> 32:12.020
也没问题吧

32:12.020 --> 32:12.420
对吧

32:12.720 --> 32:12.920
好

32:12.920 --> 32:13.320
最后呢

32:13.320 --> 32:14.320
咱们来刷

32:14.720 --> 32:15.320
这一点了

32:15.320 --> 32:16.420
就是new的时候

32:16.420 --> 32:17.420
我们new的时候呢

32:17.420 --> 32:18.920
你的保证他这个dase啊

32:18.920 --> 32:20.520
就是他自己的对对象

32:20.520 --> 32:21.120
而且呢

32:21.320 --> 32:22.120
你在new的话

32:22.120 --> 32:22.920
你可能把它当做一个

32:22.920 --> 32:24.420
构造函数来使用

32:24.620 --> 32:25.120
对不对

32:25.120 --> 32:26.520
那我说我在绑定完以后

32:26.520 --> 32:26.820
对吧

32:26.820 --> 32:28.720
又返回了一个new show

32:28.720 --> 32:30.420
那new show的

32:31.520 --> 32:32.020
比如说这样

32:32.020 --> 32:32.820
比如说这个 show

32:35.020 --> 32:36.420
他就有一个原型

32:36.520 --> 32:37.920
叫做 father show

32:43.070 --> 32:43.970
难度胜利对吧

32:44.070 --> 32:46.270
还会提示一下 father show

32:49.040 --> 32:49.540
好

32:49.740 --> 32:49.940
那好

32:49.940 --> 32:50.340
ok

32:50.340 --> 32:50.940
比如说

32:51.740 --> 32:53.140
这个show的proud tab的吧

32:53.140 --> 32:53.940
等于这个

32:54.840 --> 32:56.040
等于这个new

32:57.540 --> 32:58.340
father show

32:59.240 --> 32:59.640
好

32:59.940 --> 33:00.540
那这个

33:01.540 --> 33:02.440
father show呢

33:02.540 --> 33:03.240
the proud tab

33:03.240 --> 33:04.640
比如说他有一个值叫做

33:05.640 --> 33:07.640
叫做这个last name

33:08.240 --> 33:09.540
等于一个csh

33:11.440 --> 33:11.840
好

33:12.240 --> 33:12.940
那那

33:13.140 --> 33:13.740
你

33:13.940 --> 33:16.040
我们不同过这个保定的方式啊

33:16.540 --> 33:17.400
我们来承

33:17.640 --> 33:18.540
比如说new

33:20.040 --> 33:20.640
一个show

33:22.240 --> 33:22.640
好

33:22.840 --> 33:24.240
那这个show

33:25.440 --> 33:25.840
这样吧

33:25.840 --> 33:26.640
我直接说说吧

33:26.640 --> 33:28.440
那这个show其实是不是可以

33:29.240 --> 33:29.840
呃

33:33.270 --> 33:33.770
这样吧

33:33.870 --> 33:34.270
这样

33:35.970 --> 33:37.570
呃还是wake吧

33:37.570 --> 33:40.470
os等于new show

33:43.960 --> 33:45.460
那这个os

33:45.460 --> 33:46.860
是不是可以去使用这个father show

33:46.860 --> 33:48.060
你们的一个属性啊

33:48.060 --> 33:49.060
the last name

33:49.260 --> 33:49.860
等保存一下

33:49.860 --> 33:50.360
开业

33:51.660 --> 33:52.460
刷新对吧

33:52.560 --> 33:54.060
刷新他是可以使用的对不对

33:54.260 --> 33:56.060
但那我们我这么做是什么意思呢

33:56.060 --> 33:57.660
就是如果我这样

33:57.660 --> 33:59.860
我收点收点new 办的以后的话

33:59.860 --> 34:00.260
哦

34:00.260 --> 34:01.460
甭管我绑在什么纸对不对

34:01.460 --> 34:03.060
他最后你是通过这个new的方式

34:03.060 --> 34:04.060
来去使用他了

34:06.940 --> 34:07.340
啊

34:07.440 --> 34:09.140
那他一定会反核对象吧

34:09.340 --> 34:09.840
是吧

34:10.040 --> 34:10.540
os

34:17.710 --> 34:19.610
来os一回车

34:20.510 --> 34:23.510
他就是这样的一个空对象啊

34:23.510 --> 34:24.310
并且呢

34:24.310 --> 34:26.710
这个os给什么那个他的

34:27.410 --> 34:28.410
那个father show啊

34:28.410 --> 34:32.280
一点关系都没有了

34:32.980 --> 34:33.480
对吧

34:33.780 --> 34:34.080
呃

34:34.680 --> 34:35.280
而且呢

34:35.380 --> 34:35.880
哼

34:35.980 --> 34:38.580
这个new show 里面的这个dance啊

34:40.180 --> 34:40.980
他不是谁啊

34:41.080 --> 34:42.980
他不是说像我们这样

34:43.080 --> 34:44.280
这样的时候去

34:44.380 --> 34:44.980
呃像

34:44.980 --> 34:46.080
呃像像我们这样

34:46.080 --> 34:48.380
那个之前使用原神办的的时候

34:48.480 --> 34:48.980
对吧

34:49.080 --> 34:51.580
他这个里面的dance是这个

34:52.280 --> 34:53.280
呃通过

34:54.080 --> 34:55.080
new show 对吧

34:55.080 --> 34:56.880
来创建这样的一个什么

34:57.380 --> 34:57.980
对象吧

34:57.980 --> 34:58.580
对不对

34:58.980 --> 34:59.380
ok

34:59.480 --> 34:59.980
那这边呢

34:59.980 --> 35:01.880
我们要再进行一个强化的处理

35:01.880 --> 35:02.880
但那其实刚

35:02.880 --> 35:04.280
其实到我们之前啊

35:04.480 --> 35:05.480
你不加他对吧

35:05.480 --> 35:06.780
到我们之前这块的话

35:06.780 --> 35:07.680
基本上已经满足你

35:07.680 --> 35:09.480
瘦的一个正常使用的功能了

35:09.580 --> 35:10.280
但是玩玩有人

35:10.280 --> 35:11.680
他不会不正常使用对吧

35:11.780 --> 35:13.080
我们封装原码要考虑

35:13.080 --> 35:13.780
他这样的一个

35:14.080 --> 35:15.080
健壮性对不对

35:15.080 --> 35:16.680
就说呢我们就搞点破坏吧

35:16.680 --> 35:17.080
对吧

35:17.180 --> 35:18.480
那我这么写完以后的话

35:19.480 --> 35:20.980
就是呃正好就引

35:20.980 --> 35:22.780
除了这样的一个更深的一个问题

35:22.780 --> 35:24.380
他们看怎么来解决啊

35:24.680 --> 35:25.180
也很简单

35:25.180 --> 35:25.980
其实我可以这么做

35:26.180 --> 35:26.780
我现在

35:27.980 --> 35:29.580
握一个哎

35:29.580 --> 35:30.280
等一个他

35:30.980 --> 35:32.980
好我在这再握一个temp

35:34.780 --> 35:35.380
等一个

35:36.680 --> 35:37.280
方式

35:39.080 --> 35:39.580
ok

35:40.080 --> 35:41.080
那有什么用呢

35:41.080 --> 35:41.580
看好了

35:41.580 --> 35:43.880
我在这里面传这个纸的时候啊

35:44.080 --> 35:45.080
当然他是决定了

35:45.080 --> 35:46.280
这个韩束之后里面的dece

35:46.280 --> 35:47.080
他到底是谁

35:47.480 --> 35:48.380
对吧啊

35:48.780 --> 35:49.480
那当然呢

35:51.380 --> 35:52.180
我在这里面呢

35:52.180 --> 35:53.880
不能直接就去去传他了

35:53.880 --> 35:55.080
我得去判断一下

35:55.180 --> 35:56.580
判断判断什么呢

35:56.780 --> 35:57.580
判断一下

35:58.180 --> 35:59.180
你这个

36:00.780 --> 36:02.480
韩束里面的dece

36:04.460 --> 36:05.960
啊他是就是

36:06.160 --> 36:07.260
或者或者说是判这样

36:07.360 --> 36:09.360
怕判断一下这里面的dece啊

36:09.360 --> 36:10.860
是不是哎是不是

36:11.160 --> 36:12.560
这个通过new

36:13.060 --> 36:14.260
来执行他的时候

36:14.260 --> 36:16.360
说创建这样的一个dece对象

36:16.660 --> 36:18.860
那这东西说起来好像很云山无绕对吧

36:18.860 --> 36:20.160
怎么来判断呢

36:20.260 --> 36:22.560
这东西呃不是好那么去

36:22.660 --> 36:23.160
做的

36:23.160 --> 36:23.860
但没关系啊

36:23.860 --> 36:25.360
你看我老婆现在给你这么来写一下

36:25.360 --> 36:26.760
比如说我方式一个散

36:26.960 --> 36:28.460
啊就是我们新写的一个

36:28.860 --> 36:30.060
他说方式一个散

36:30.760 --> 36:31.760
那这样比如说

36:32.560 --> 36:34.460
呃我握一个

36:34.760 --> 36:35.560
boss对吧

36:35.760 --> 36:37.660
好我等一个new散

36:38.660 --> 36:40.860
好那我去输出一下这个

36:41.460 --> 36:42.160
os

36:42.560 --> 36:44.360
insta so对吧通过他

36:44.660 --> 36:47.860
比如说通过哎他来判断啊

36:47.960 --> 36:51.060
一个对象啊是不是另一个构造韩束

36:51.660 --> 36:53.460
so grow出来这样的一个值对吧

36:53.560 --> 36:54.460
好我再看一下

36:54.460 --> 36:56.460
我就写个散我保存一下

36:56.660 --> 36:57.660
还在保存意思啊

36:58.960 --> 37:00.760
但这里面呢写大写的散吧

37:00.860 --> 37:03.460
好稍息58行那边上一次

37:03.660 --> 37:04.860
哎是不是输啊是吧

37:04.960 --> 37:06.560
好了那你要知道这个o散的

37:06.860 --> 37:08.660
在网上的原型链上的一些

37:08.960 --> 37:09.860
构造韩束啊

37:10.160 --> 37:11.260
能不能也是出呢

37:11.260 --> 37:12.260
我小心一次开眼

37:12.860 --> 37:13.960
哎也没问题对吧

37:14.260 --> 37:15.760
换句话说就是这个14f啊

37:15.760 --> 37:17.860
是看一下这个对象对吧

37:18.060 --> 37:18.560
好了

37:19.360 --> 37:21.660
他的原型链上的构造韩束啊

37:21.660 --> 37:23.260
有没有后面这个纸如果有的话

37:23.260 --> 37:24.060
他一定是出

37:24.360 --> 37:26.360
那我们了解的这样的一个原理以后的话

37:26.360 --> 37:28.060
我们可以这么做可以这么做

37:28.560 --> 37:29.760
哎那我就让这个

37:30.960 --> 37:32.660
temp的protep

37:32.960 --> 37:33.660
等于什么呢

37:33.960 --> 37:35.460
等于this

37:36.360 --> 37:37.960
有时候等于这个

37:38.060 --> 37:39.760
当然这里面就是这里面这个this

37:39.760 --> 37:40.260
他比如说吗

37:40.460 --> 37:42.360
等于受的protep

37:42.760 --> 37:43.260
啊

37:43.460 --> 37:45.760
那我再让f的protep

37:45.960 --> 37:47.660
有时候这个韩束protep等于谁呢

37:47.860 --> 37:48.360
等于

37:49.760 --> 37:50.260
new

37:55.120 --> 37:55.620
temp

37:56.020 --> 37:56.520
啊

37:56.720 --> 37:58.820
这样的话我们没有共享原型的话

37:58.820 --> 37:59.120
对吧

37:59.120 --> 38:01.720
而说圣妹模式的方法没有共享原型

38:01.820 --> 38:03.020
我去改他的原型的话

38:03.020 --> 38:05.420
也不会影响到受的原型

38:05.620 --> 38:06.020
对不对

38:06.020 --> 38:07.420
我就改这个后面

38:07.520 --> 38:09.120
返回的f的原型

38:09.120 --> 38:10.020
当然最后呢

38:10.020 --> 38:11.620
我需要去返回这个

38:12.620 --> 38:14.120
f对吧

38:14.120 --> 38:15.120
返回这个f对吧

38:15.120 --> 38:16.120
你返回这个f

38:16.120 --> 38:18.120
当然其实就是这样这样的一个

38:18.320 --> 38:20.620
其实就是这样一个点半的以后的一个

38:20.620 --> 38:21.320
new受对吧

38:21.320 --> 38:22.120
我就改变他的一个

38:22.120 --> 38:24.120
改变他身上那个原型的

38:24.320 --> 38:25.220
也不会怎么样

38:25.220 --> 38:28.620
也不会去修改到这个受的一个原型

38:28.620 --> 38:29.120
啊

38:29.120 --> 38:31.820
那所以说我需要采取这样一个中间辨量的吧

38:31.820 --> 38:33.020
我说中间的一个韩

38:33.020 --> 38:34.720
韩束作为这样一个过渡

38:34.720 --> 38:35.120
啊

38:35.320 --> 38:36.520
那这样过渡以后的话

38:36.520 --> 38:36.820
哎

38:36.820 --> 38:39.220
我让这个f的一个原型对吧

38:39.220 --> 38:40.920
跟这个受的原型

38:40.920 --> 38:42.020
就形成了关联

38:42.320 --> 38:45.220
接着就跟谁就跟这样的一个

38:45.520 --> 38:47.020
f受形成了关联

38:47.020 --> 38:47.220
哎

38:47.220 --> 38:48.820
也就是说即使你办了以后的话

38:48.820 --> 38:50.120
你说反面的新的韩束

38:50.220 --> 38:52.220
也都是跟他们一脉相传的

38:52.220 --> 38:52.620
啊

38:52.620 --> 38:54.020
那最后咱们插最后一步

38:54.120 --> 38:54.920
最后一步就是

38:55.320 --> 38:57.820
那个我需要在里面去判定一下对吧

38:57.820 --> 38:58.420
你这个

38:58.620 --> 39:01.320
我这个韩束是不是被你new的方式来执行出来的

39:01.320 --> 39:02.620
如果是的情况下的话

39:02.620 --> 39:04.320
我在执行这个真正受的时候

39:04.320 --> 39:06.120
我需要让里面这个target

39:06.420 --> 39:07.820
就不不是你这个指辣

39:07.920 --> 39:09.420
而且还是你这个dead

39:09.420 --> 39:10.020
对不对

39:10.120 --> 39:11.420
那怎么来判断呢

39:11.420 --> 39:12.120
也很简单

39:12.820 --> 39:14.720
我就看一下你这边dead

39:15.020 --> 39:16.020
他的ins

39:17.020 --> 39:18.520
tnc inses2

39:18.520 --> 39:20.020
我他到底是不是谁啊

39:21.820 --> 39:27.540
到底是不是tep

39:27.740 --> 39:28.340
对不对

39:28.540 --> 39:29.040
如果

39:30.440 --> 39:31.740
好的啊

39:32.340 --> 39:34.040
这门的话你一定是啊

39:34.140 --> 39:34.540
那

39:36.040 --> 39:37.440
那这样那这一门呢

39:37.440 --> 39:37.940
其实

39:38.240 --> 39:39.540
呃这么做

39:39.740 --> 39:41.640
就是当你通过new的方式

39:41.640 --> 39:42.640
来执行他的时候呢

39:42.640 --> 39:44.240
这里面必然会形成这样一个链对吧

39:44.240 --> 39:44.640
所以说呢

39:44.640 --> 39:45.440
你这个dead

39:45.440 --> 39:47.840
dead一定会是他的这样的一个

39:48.640 --> 39:51.340
就是一定会是他这样的一个

39:51.440 --> 39:52.040
就是这样

39:52.740 --> 39:53.540
通过dead

39:53.540 --> 39:54.640
ins of他的话

39:54.640 --> 39:55.940
一定会是这样的一个处

39:56.040 --> 39:56.440
对吧

39:56.540 --> 39:56.840
因为呢

39:56.840 --> 39:58.940
他的这个对象的构造韩束

39:58.940 --> 40:01.240
把这个对象的圆形圆形链上的构造韩束

40:01.240 --> 40:02.540
一定会去找到他的对吧

40:02.640 --> 40:03.540
那这个时候呢

40:03.540 --> 40:06.140
我就让这门dead就是你这样的本身就行了呗

40:06.240 --> 40:07.540
啊如果好了

40:07.640 --> 40:09.440
你这个不是他的一个构造

40:09.440 --> 40:10.640
韩束的话对吧

40:10.740 --> 40:11.440
那什么意思呢

40:11.440 --> 40:12.340
就是你这个

40:12.340 --> 40:14.240
韩束不是通过new的方式来执行的

40:14.240 --> 40:15.440
就是直接去执行对吧

40:15.540 --> 40:16.840
你直接去执行的话

40:16.840 --> 40:17.440
你们dead

40:17.540 --> 40:18.340
就可能谁啊

40:18.340 --> 40:19.840
可能是温斗对吧

40:20.040 --> 40:20.940
那这样的话

40:21.240 --> 40:22.540
那我就要求

40:22.840 --> 40:24.040
那就去判断一下对吧

40:24.040 --> 40:24.540
你个dead

40:24.540 --> 40:26.440
这个温斗还是你这样的一个

40:26.540 --> 40:28.340
哎就是我这个温斗

40:28.340 --> 40:30.040
这个对象的构造韩束的

40:30.340 --> 40:31.040
我这个温斗

40:31.040 --> 40:33.640
这样的一个对象的圆形链上的构造韩束

40:33.640 --> 40:34.040
对吧

40:34.340 --> 40:34.940
好绕口

40:35.340 --> 40:36.740
圆形链上的构造韩束

40:37.040 --> 40:37.640
是不是你

40:37.640 --> 40:39.040
但一定是不数的对不对

40:39.040 --> 40:40.240
因为咱根本就没关系

40:40.340 --> 40:41.340
那那个时候他就是什么

40:41.340 --> 40:42.040
他就是一个

40:42.540 --> 40:43.240
false

40:43.240 --> 40:44.640
对就是一个false

40:44.740 --> 40:45.840
那我这门呢

40:45.940 --> 40:47.940
就不要求啊你这门的

40:48.240 --> 40:49.540
dead就写他了

40:49.540 --> 40:50.240
那写谁呢

40:50.240 --> 40:51.240
那就写这个

40:52.140 --> 40:52.740
target

40:52.740 --> 40:53.740
就是你传什么

40:53.740 --> 40:54.840
我叫他试什么

40:54.840 --> 40:55.640
那咱来看一下

40:55.640 --> 40:56.640
现在我这么做

40:56.840 --> 40:57.540
来现在这么做

40:57.540 --> 40:58.440
应该没问题了

40:59.340 --> 41:01.740
啊我分别做几个测试验啊

41:01.740 --> 41:02.740
分别做几个测验

41:03.040 --> 41:04.640
但他先注释一下啊

41:04.740 --> 41:05.440
首先呢

41:06.040 --> 41:07.740
来看一下new show

41:08.040 --> 41:09.040
这门传个18

41:10.040 --> 41:11.740
啊这么去执行行不行呢

41:12.840 --> 41:14.240
1378没问题对不对

41:14.340 --> 41:14.740
好

41:15.140 --> 41:15.640
那这样

41:16.440 --> 41:17.840
啊我通过

41:19.840 --> 41:20.640
new的方式

41:20.740 --> 41:21.740
new new show

41:21.740 --> 41:22.940
对吧去执行

41:23.140 --> 41:24.040
我传个18

41:24.040 --> 41:25.140
那第1个是应该什么

41:25.440 --> 41:26.540
第1个是应该是一个

41:28.680 --> 41:29.680
按理方的对不对

41:29.880 --> 41:30.680
按理方的对吧

41:30.680 --> 41:32.380
好那如果说我在这里吧

41:32.480 --> 41:34.180
给你输出一个desk对吧

41:34.280 --> 41:35.280
咱们再来看一下

41:35.380 --> 41:36.580
咱们再来进行这样测验啊

41:36.580 --> 41:37.580
如果说第1个的话

41:37.780 --> 41:38.580
这个new show里面

41:38.580 --> 41:39.980
desk是不是应该是obj啊

41:40.480 --> 41:41.380
对吧好了

41:41.480 --> 41:42.380
那第2个呢

41:43.080 --> 41:44.880
第2的话是不是应该是这个

41:46.580 --> 41:46.980
哎

41:47.680 --> 41:49.080
对象本身的对不对

41:49.180 --> 41:51.780
应该是他自己这个构造函数

41:51.780 --> 41:53.780
对象本身吧对吧

41:53.780 --> 41:55.380
好了那之后的话

41:56.180 --> 41:56.980
我们再来看

41:57.080 --> 41:58.880
再来看做第3个测验

41:58.880 --> 41:59.980
是在个18对吧

41:59.980 --> 42:00.980
好我是os

42:01.080 --> 42:02.880
能不能使用这个last name呢

42:02.880 --> 42:05.580
啊我给你这个秀是不是一脉相传的呢

42:06.380 --> 42:07.580
保存一下看一下

42:09.380 --> 42:09.780
ok

42:10.080 --> 42:11.580
成立吧也没问题

42:11.880 --> 42:13.080
那到目前为止的话

42:13.080 --> 42:14.880
我们就把这个band啊

42:14.880 --> 42:16.580
完全的模拟出来了啊

42:16.680 --> 42:17.480
也就是说

42:17.580 --> 42:19.280
当你真正的认识真正的

42:19.280 --> 42:21.180
把这个整个思路原码都屡变

42:21.180 --> 42:21.980
写一变以后的话

42:21.980 --> 42:23.080
你再使用band的话

42:23.080 --> 42:25.180
会保证你使用的更深刻

42:25.180 --> 42:27.280
而且呢使用的更无误啊

42:27.380 --> 42:27.880
ok

42:27.980 --> 42:29.880
那今天呢我们这个你不知道GS课程呢

42:29.880 --> 42:32.380
呃暂且就先到这里啊

42:32.480 --> 42:34.880
那如果你对我们的课程感兴趣的话

42:34.880 --> 42:37.280
或对我们的前提和后面的课程

42:37.280 --> 42:38.580
都感兴趣的话

42:38.580 --> 42:39.380
你可以啊

42:39.880 --> 42:40.380
来

42:40.880 --> 42:42.280
去加到我们这样的一个

42:42.580 --> 42:44.780
呃线上的一个讨论群

42:44.780 --> 42:47.580
好但呢加群的首先这样的一个小度

42:47.580 --> 42:48.480
我们的小度呢

42:48.480 --> 42:50.180
会把你带到我们这样的一个

42:50.180 --> 42:53.280
呃线上工艺技术讨论群之中

42:53.380 --> 42:54.380
那我们这个群呢

42:54.380 --> 42:56.380
还有很多很多这样的一个

42:56.380 --> 42:57.580
热爱技术的同学

42:57.580 --> 43:00.280
但呢有很多这样的一个老师在群之中

43:00.380 --> 43:01.580
如果说你在工作之中

43:01.580 --> 43:03.980
你在学习学习之中碰到任何的一个关于

43:03.980 --> 43:05.580
前的那个问题都可以在群中

43:05.680 --> 43:07.480
来提问我们的老师呢

43:07.680 --> 43:09.880
会给你们公益的解答

43:09.880 --> 43:10.280
好

43:11.080 --> 43:11.980
好那有问题的话

43:11.980 --> 43:13.080
对吧可以再去你们的搜索

43:13.080 --> 43:14.880
那今天就暂且到这

43:14.880 --> 43:15.580
拜拜了各位

