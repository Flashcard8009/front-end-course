WEBVTT

00:00.000 --> 00:05.380
那欢迎参加我们这样的一个独一课堂的一个你不知道你不知道的gs一个专题啊

00:05.380 --> 00:08.880
我是这个专题的主要老师叫做吹子彤啊

00:08.880 --> 00:11.340
那这个呢就是我本人啊

00:11.340 --> 00:13.320
左侧呢是一个很帅气的照片

00:13.320 --> 00:15.740
右侧呢是这样的一个自我介绍啊

00:15.740 --> 00:17.800
那下面这句话呢是我的最有名的吧啊

00:17.800 --> 00:20.340
字列是人类进步的阶梯的哈努力提升

00:20.340 --> 00:22.760
只为了只为了更高当的一个字链啊

00:22.760 --> 00:24.680
好那开个玩笑啊

00:24.680 --> 00:27.160
其实呢啊这个字链之间是行吧

00:27.160 --> 00:28.080
其实再不看来吧

00:28.080 --> 00:29.880
就是更多列成一个自信的

00:29.880 --> 00:31.440
因为只要你有自信的话

00:31.440 --> 00:33.560
你才能决定把这个事情给做好

00:33.560 --> 00:37.440
才能更用动力的去把这个事给做到极致

00:37.440 --> 00:38.840
那现在呢啊

00:38.840 --> 00:39.840
我们话不多说

00:39.840 --> 00:41.560
我们先来看一下今天要讲的一个专题啊

00:41.560 --> 00:43.320
叫做房斗和街流

00:43.320 --> 00:44.320
那房斗和街流呢

00:44.320 --> 00:47.920
其实最后应该拆开成两个方向去讲啊

00:47.920 --> 00:49.000
但是呢啊

00:49.000 --> 00:52.640
但是他们统一都是为了一些情况啊

00:52.640 --> 00:53.680
因而生的

00:53.680 --> 00:56.200
那我先把这个情况呢给你来说一说吧

00:56.200 --> 00:57.680
就是在我们这个条件开发之中呢

00:57.680 --> 00:58.560
其实一部分

00:58.560 --> 00:59.720
一部分的用户行为呢

00:59.720 --> 01:02.840
会频繁的去进行这样的一个世界的一个触发

01:02.840 --> 01:03.880
但时间触发以后的话

01:03.880 --> 01:06.680
必然会导致这个事件啊的一个执行

01:07.800 --> 01:08.720
那执行的话

01:08.720 --> 01:11.000
比如说当那个事件在执行的时候

01:11.000 --> 01:13.280
他再去进行这样一个功能性的一个

01:13.280 --> 01:15.840
呃就是功能性的一些操作的时候

01:15.840 --> 01:16.600
就比如说

01:16.600 --> 01:18.160
然后对大母型操作

01:18.160 --> 01:20.760
或者说发动发送一些阿加克斯请求啊

01:20.760 --> 01:22.320
进行这样的一个资源夹载

01:22.320 --> 01:23.040
那这样的操作呢

01:23.040 --> 01:24.880
他都是很好现可能的啊

01:24.880 --> 01:27.520
你要知道我们这个GS它是这个主线程

01:27.520 --> 01:29.080
啊GS中它有个主线程

01:29.080 --> 01:30.840
这个主线程是单线程的

01:30.840 --> 01:33.200
那里面有这样一个机制叫做世界轮巡机制

01:33.200 --> 01:34.280
叫Intelope

01:34.280 --> 01:37.000
然后这个我们也会放到后期去讲的

01:37.000 --> 01:37.640
你先不要急

01:37.640 --> 01:39.080
但你们现在只要知道一点啊

01:39.080 --> 01:40.040
这个GS呢

01:40.040 --> 01:40.960
它是一个主线程的

01:40.960 --> 01:42.000
是个单线程

01:42.000 --> 01:43.360
那如果说这个Dumb操作

01:43.360 --> 01:44.440
或是加载呢

01:44.440 --> 01:45.640
很耗费时间的话

01:45.640 --> 01:47.160
那当然一定会很耗费时间的

01:47.160 --> 01:48.080
因为Dumb操作的话

01:48.080 --> 01:50.520
必然会触发这个页面的重回和重排

01:50.520 --> 01:51.680
那资源夹载的话

01:51.680 --> 01:53.120
发送这个网络请求的话

01:53.120 --> 01:54.640
必然然他也会放到这样的一个

01:54.640 --> 01:55.600
TaskCure里面

01:55.600 --> 01:56.080
啊

01:56.080 --> 01:57.400
它都是很好性能的

01:57.400 --> 01:58.320
那这样的话

01:58.320 --> 02:00.320
会导致页面的一个卡顿

02:00.320 --> 02:01.520
趁这段时间的一个崩溃

02:01.520 --> 02:03.720
这就是对一个用户体验来讲

02:03.720 --> 02:04.800
就不是非常好了

02:04.800 --> 02:05.480
所以说呢

02:05.480 --> 02:06.880
韩束的防抖和截流

02:06.880 --> 02:07.640
在这个时候呢

02:07.640 --> 02:09.440
很显得很有必要

02:09.440 --> 02:11.720
那防抖我们这期先这样防抖啊

02:11.720 --> 02:13.120
那防抖是什么意思呢

02:13.120 --> 02:14.120
其实防抖呢

02:14.120 --> 02:17.040
它就是在这个韩束需要平凡触发的情况下的

02:17.040 --> 02:17.840
啊好

02:17.840 --> 02:20.640
我们只是在有足够的时间啊

02:20.640 --> 02:22.720
之后才去执行一次

02:22.720 --> 02:23.560
其实好像什么呢

02:23.600 --> 02:24.360
就好像这个

02:24.360 --> 02:26.520
比如说公交司机

02:26.520 --> 02:26.840
对吧

02:26.840 --> 02:27.720
他上

02:27.720 --> 02:29.280
是公交司机进了一个站台之后

02:29.280 --> 02:30.320
他要去等人上

02:30.320 --> 02:30.760
对吧

02:30.760 --> 02:32.080
一人是一个一个上来的

02:32.080 --> 02:32.920
上来以后的话

02:32.920 --> 02:33.560
好了

02:33.560 --> 02:34.640
那最后

02:34.640 --> 02:35.800
最后一个人上来以后的话

02:35.800 --> 02:37.240
他要等一小段时间

02:37.240 --> 02:37.520
好了

02:37.520 --> 02:39.120
看没有人再要往上上了之后呢

02:39.120 --> 02:40.600
他才走啊

02:40.600 --> 02:42.280
那这对于这种情况呢

02:42.280 --> 02:43.160
可能我说完以后的话

02:43.160 --> 02:44.520
你未必能很了解

02:44.520 --> 02:45.200
但没关系

02:45.200 --> 02:47.280
我们先把这个描述先放到这

02:47.280 --> 02:47.760
之后呢

02:47.760 --> 02:49.800
我们再完成一个大概的一个

02:49.800 --> 02:51.120
简单一个操作以后的话

02:51.120 --> 02:51.560
对吧

02:51.560 --> 02:52.680
完成这样一个代码

02:52.680 --> 02:53.640
一个实现以后的话

02:53.640 --> 02:55.280
我们再回回头来来看一下

02:55.280 --> 02:56.720
这样的一个描述

02:56.720 --> 02:57.800
它具体是这么一回事

02:57.800 --> 02:58.480
好

02:58.480 --> 02:59.360
但你要知道一点

02:59.360 --> 03:00.760
Foundal其实它大范围的

03:00.760 --> 03:03.280
是用在这个实施搜索和这个拖载之中

03:03.280 --> 03:04.840
尤其是这个实施搜索

03:04.840 --> 03:06.600
敞开来说说

03:06.600 --> 03:07.720
但百度呢

03:07.720 --> 03:08.720
是这个实施搜索里面

03:08.720 --> 03:09.520
做的算比较好的

03:09.520 --> 03:09.960
对吧

03:09.960 --> 03:10.600
我在这呢

03:10.600 --> 03:13.080
比如说给你写一个NBA

03:13.080 --> 03:13.640
对吧

03:13.640 --> 03:14.160
好

03:14.160 --> 03:15.080
那你想到NBA以后的话

03:15.080 --> 03:16.000
你会发现的

03:16.000 --> 03:17.840
到这个Acer最后说完以后

03:17.840 --> 03:18.960
它才进行这样的一个

03:18.960 --> 03:20.720
一般的一个更新啊

03:20.720 --> 03:21.160
那当然

03:21.160 --> 03:22.000
那这个背后的逻辑

03:22.000 --> 03:22.920
一定是这个

03:22.920 --> 03:24.560
当你输完这个字符以后的话

03:24.560 --> 03:25.560
当然你首先啊

03:25.560 --> 03:26.800
在对自己做一个

03:26.800 --> 03:28.000
做一个开发者来讲的话

03:28.000 --> 03:28.800
你要给这个input的

03:28.800 --> 03:30.160
绑定一个输事件

03:30.160 --> 03:31.000
那这个事件

03:31.000 --> 03:32.120
比如说输

03:32.120 --> 03:32.800
呃

03:32.800 --> 03:34.440
每次出发这个事件的时候呢

03:34.440 --> 03:35.400
当然你都能知道

03:35.400 --> 03:35.600
对吧

03:35.600 --> 03:36.640
都能感知一下

03:36.640 --> 03:38.360
你这个里面还到底写了什么

03:38.360 --> 03:38.800
啊

03:38.800 --> 03:40.080
但如果说你不做防抖

03:40.080 --> 03:40.960
除了处理的话

03:40.960 --> 03:42.600
你会当用户每输完

03:42.600 --> 03:43.320
一个字以后的话

03:43.320 --> 03:44.880
你就直接发送给服务器

03:44.880 --> 03:46.360
向服务器请求相关

03:46.360 --> 03:47.480
关键字的一些数据

03:47.480 --> 03:48.360
再给它显示出来

03:48.360 --> 03:49.280
对吧

03:49.280 --> 03:50.080
那如果是这样的话

03:50.080 --> 03:50.640
你看好了

03:50.680 --> 03:53.120
其实用户本质是想搜这个nba

03:53.120 --> 03:53.560
但是呢

03:53.560 --> 03:55.360
在搜这个nba的过程之中呢

03:55.360 --> 03:57.320
必定会触发三次事件

03:57.320 --> 03:57.640
对吧

03:57.640 --> 03:58.800
第一次是输入了a

03:58.800 --> 03:59.880
第二次输入了b

03:59.880 --> 04:01.400
第三次才输入了这个a

04:01.400 --> 04:02.480
那真的于这种

04:02.480 --> 04:02.800
呃

04:02.800 --> 04:04.120
发送请求来讲的话

04:04.120 --> 04:04.640
其实呢

04:04.640 --> 04:06.000
前面两次都是没有必要的

04:06.000 --> 04:06.440
对吧

04:06.440 --> 04:07.960
我直接等你最后一次

04:07.960 --> 04:09.080
把这个a输完以后的话

04:09.080 --> 04:10.320
我们再进行这样一个

04:10.320 --> 04:10.880
呃

04:10.880 --> 04:12.960
就是再进行这样一个网络请求

04:12.960 --> 04:14.000
那这个时候呢

04:14.000 --> 04:16.120
我们真的有一个开发者来讲的话

04:16.120 --> 04:18.720
就应该做一个相应的一个处理

04:18.720 --> 04:19.840
好

04:19.840 --> 04:20.960
那怎么来处理呢

04:20.960 --> 04:21.400
先这样

04:21.400 --> 04:22.960
先我先不给你处理一下

04:22.960 --> 04:25.080
你看会发生什么样的事情啊

04:25.080 --> 04:25.720
比如说

04:25.720 --> 04:26.400
我现在呢

04:26.400 --> 04:28.280
先握一个onp

04:28.280 --> 04:30.120
帮我去document.gatch

04:30.120 --> 04:31.440
element.id

04:31.440 --> 04:31.720
好

04:31.720 --> 04:32.440
在这的时候呢

04:32.440 --> 04:33.640
我写个mp

04:33.640 --> 04:34.040
好

04:34.040 --> 04:37.600
onp.onput

04:37.600 --> 04:38.840
那在这onput里面呢

04:38.840 --> 04:39.600
我去

04:39.600 --> 04:40.520
好

04:40.520 --> 04:41.160
这样吧

04:41.160 --> 04:42.040
我写个函数

04:42.040 --> 04:43.040
比如说我写一个

04:43.040 --> 04:45.360
然后方讯把一个ax函数

04:45.360 --> 04:46.520
假如这个函数呢

04:46.520 --> 04:48.400
是发送一个网络请求的

04:48.400 --> 04:49.720
那我在这

04:49.720 --> 04:51.120
呃

04:51.120 --> 04:52.160
ax里面呢

04:52.160 --> 04:53.360
其实

04:53.360 --> 04:55.360
要去拿到dace.value

04:55.360 --> 04:56.560
因为什么呢

04:56.560 --> 04:57.080
因为如果说

04:57.080 --> 04:59.480
它作为一个onput的一个

04:59.480 --> 05:01.240
实现处理函数的话

05:01.240 --> 05:02.560
这个实现一旦被出发以后的话

05:02.560 --> 05:03.160
它一执行

05:03.160 --> 05:03.840
它一执行的话

05:03.840 --> 05:06.480
这个函数里面dace就是onp

05:06.480 --> 05:07.160
对吧

05:07.160 --> 05:09.240
那这个onp里面说的一个字符呢

05:09.240 --> 05:10.040
就一定是这样的

05:10.040 --> 05:11.000
那个

05:11.000 --> 05:11.280
呃

05:11.280 --> 05:12.960
只你想拿到这样一个字符的话

05:12.960 --> 05:15.680
就一定的需要通过这个dace.value

05:15.680 --> 05:17.080
来进行这样的一个获取

05:17.080 --> 05:19.000
那在这我们我们不是进行真正的

05:19.000 --> 05:20.760
一个ax的一个请求啊

05:20.760 --> 05:21.360
因为呢

05:21.360 --> 05:21.640
呃

05:21.640 --> 05:24.280
咱们今天不是主讲这个网络请求啊

05:24.280 --> 05:25.760
我们这个对于这个

05:25.760 --> 05:28.400
还有其他的课程是专门会讲这一块的啊

05:28.400 --> 05:29.120
所以说呢

05:29.120 --> 05:30.280
如果说你感兴趣的话

05:30.280 --> 05:31.960
你可以去听听啊

05:31.960 --> 05:32.200
ok

05:32.200 --> 05:32.960
那在这的话

05:32.960 --> 05:34.480
咱们只做一个简单的模拟啊

05:34.480 --> 05:36.520
咱就假如这句话对吧

05:36.520 --> 05:37.200
就是啊

05:37.200 --> 05:38.080
发送那个请求

05:38.080 --> 05:39.160
那咱咱来看一看吧

05:39.160 --> 05:39.680
是吧

05:39.680 --> 05:40.680
先在我刷写一次

05:42.480 --> 05:43.160
啊

05:43.160 --> 05:43.400
好

05:43.400 --> 05:45.600
如果说我写一个abc

05:45.600 --> 05:47.880
或者说写一个nba

05:47.880 --> 05:48.480
对吧

05:48.480 --> 05:49.440
当你写什么

05:49.440 --> 05:51.040
那你是说任何一个字符的时候

05:51.040 --> 05:53.480
他都会去输入这样一个东西

05:53.480 --> 05:54.200
那如果说

05:54.200 --> 05:55.560
咱们已经假定了这个输入

05:55.560 --> 05:56.960
它是一个请求的话

05:56.960 --> 05:58.360
那我们本质上用户

05:58.360 --> 05:59.560
是想最后搜这个nba

05:59.560 --> 06:00.000
对吧

06:00.000 --> 06:01.920
但是现在无论他说多快的本

06:01.920 --> 06:02.800
他写多快

06:02.800 --> 06:04.080
他都会啊

06:04.080 --> 06:06.040
分别的触发这个三次实践

06:06.040 --> 06:07.080
那这样的话啊

06:07.080 --> 06:08.480
前两次这种啊

06:08.480 --> 06:09.440
实践的触发

06:09.440 --> 06:10.640
或者说是啊

06:10.640 --> 06:12.680
这个前两次这个实践的触发以后

06:12.680 --> 06:14.640
导致的这个网络请求的发送

06:14.640 --> 06:16.440
在我看来实际上是很没有必要的

06:16.440 --> 06:18.080
因为它很好性能

06:18.080 --> 06:18.920
所以说在这呢

06:18.920 --> 06:20.640
我要进行一个防抖处理

06:20.640 --> 06:22.120
那怎么来进行一个防抖处理呢

06:22.120 --> 06:23.240
其实也很简单

06:23.240 --> 06:24.880
不是说我可以在这里面的去写

06:24.880 --> 06:25.480
啊

06:25.480 --> 06:26.640
至于这个函数功能

06:26.640 --> 06:29.280
我可以上来先去清理一下这个敌人器

06:30.720 --> 06:31.560
现在敌人器

06:33.240 --> 06:33.720
或者说这样

06:34.680 --> 06:35.400
这样

06:35.400 --> 06:37.160
我可以我可以给他包裹一下吧

06:37.160 --> 06:38.440
啊给他先包裹一层

06:38.440 --> 06:40.240
我不让ax直接执行了

06:40.240 --> 06:41.200
我包裹一层以后的话

06:41.200 --> 06:42.040
我这么来

06:42.040 --> 06:44.280
我上来先清理一下这个敌人器

06:44.320 --> 06:45.480
肯定是太闷了

06:45.480 --> 06:45.680
好

06:45.680 --> 06:46.640
但这个敌人器呢

06:46.640 --> 06:47.920
我可以定一个全局的

06:53.180 --> 06:53.900
好

06:53.900 --> 06:55.540
那在这的话

06:55.540 --> 06:56.900
我在开启敌人器

06:57.660 --> 06:58.660
SAT

06:58.660 --> 06:59.260
TIME OUT

07:01.620 --> 07:02.620
啊开启敌人器

07:03.940 --> 07:04.500
方向声

07:10.840 --> 07:11.080
好

07:11.080 --> 07:12.880
我隔1000行秒

07:12.880 --> 07:13.760
我去做这样一个事

07:15.720 --> 07:16.520
好

07:16.520 --> 07:18.720
那如果是那如果是这样的话

07:18.720 --> 07:21.320
其实真正要执行这个功能性代码

07:21.320 --> 07:22.880
应该是这个阿雅克斯这个执行

07:22.880 --> 07:23.400
对不对

07:23.400 --> 07:23.600
好

07:23.600 --> 07:24.400
那我在这

07:24.400 --> 07:25.120
我来执行一下

07:25.120 --> 07:26.160
咱看好不好使呢

07:26.160 --> 07:26.720
对吧

07:26.720 --> 07:28.200
我先写NBA

07:28.200 --> 07:28.680
NBA

07:28.680 --> 07:28.840
对吧

07:28.840 --> 07:29.920
我写的很多遍

07:29.920 --> 07:31.960
好好NBA写完之后

07:31.960 --> 07:34.880
当我最后一个这个A写完以后的话

07:34.880 --> 07:36.560
他采进这个视线触发

07:36.560 --> 07:37.360
其实这一次的话

07:37.360 --> 07:38.720
就咱描述起来

07:38.720 --> 07:41.160
他就很像那次供交车上人

07:41.160 --> 07:42.480
这样那种情形了

07:42.480 --> 07:43.640
比如说供交车

07:43.640 --> 07:45.480
供交车最后开走

07:45.480 --> 07:46.720
我们把它比喻成

07:46.720 --> 07:47.920
就是这个阿雅克斯这个

07:47.920 --> 07:49.840
还是功能之间的一个执行

07:49.880 --> 07:51.720
那前面这个视线的触发呢

07:51.720 --> 07:53.720
实际上是由这个每个人上来对吧

07:53.720 --> 07:55.760
来进行这样一个视线的触发

07:55.760 --> 07:57.360
那如果说这个人一个一个上来

07:57.360 --> 08:00.120
他相当于是一件一次一次触发

08:00.120 --> 08:02.600
那我们在进行这个防扰的一个操作

08:02.600 --> 08:03.800
其实他是这么来做的

08:03.800 --> 08:06.040
就是人一个一个上来的时候

08:06.040 --> 08:07.560
你不能说上一个人车就走

08:07.560 --> 08:08.920
上一个人车就车就走吧

08:08.920 --> 08:09.480
对吧

08:09.480 --> 08:11.680
你只能说所有的人全上来以后

08:11.680 --> 08:13.640
当然是最后一个人上来以后

08:13.640 --> 08:15.920
车在进行这样的一个先走

08:15.920 --> 08:17.160
那一般情况下

08:17.160 --> 08:18.400
真实情况它也是

08:18.400 --> 08:19.520
当这个人上来以后的话

08:19.520 --> 08:21.440
车上稍微等个几秒钟

08:21.440 --> 08:21.840
对吧

08:21.840 --> 08:22.960
看一下后面有没有人

08:22.960 --> 08:23.240
对吧

08:23.240 --> 08:24.360
还能赶得上

08:24.360 --> 08:25.400
如果说呢

08:25.400 --> 08:26.560
在等于进步之中呢

08:26.560 --> 08:27.840
后面没有人干了

08:27.840 --> 08:29.000
他干得上的话

08:29.000 --> 08:29.840
也就是说

08:29.840 --> 08:31.000
我最后一个制服

08:31.000 --> 08:32.040
15万以后对吧

08:32.040 --> 08:32.240
好

08:32.240 --> 08:33.760
这个事件出发完了以后

08:33.760 --> 08:34.480
哎

08:34.480 --> 08:35.800
他隔了一段时间

08:35.800 --> 08:36.880
都没有这样的时间

08:36.880 --> 08:38.000
再进行来触发的话

08:38.000 --> 08:38.520
OK

08:38.520 --> 08:41.080
那我们就把这个真正

08:41.080 --> 08:42.320
这个公交车开走

08:42.320 --> 08:43.360
或者说真正这个阿雅克斯

08:43.360 --> 08:43.600
对吧

08:43.600 --> 08:45.760
这个功能性的函数这个执行

08:45.760 --> 08:46.720
给他拿过来

08:46.720 --> 08:47.480
对吧

08:47.560 --> 08:50.240
给他就是去使用一遍

08:50.240 --> 08:51.240
那如果说是这样的话

08:51.240 --> 08:52.440
那咱来看一下

08:52.440 --> 08:53.560
好

08:53.560 --> 08:54.680
那

08:54.680 --> 08:55.960
当然我这么写的话

08:55.960 --> 08:57.280
其实他就是这样的一个目的

08:57.280 --> 08:58.360
因为每次上来的话

08:58.360 --> 08:59.960
我都把前一个定时器给大家轻了

08:59.960 --> 09:00.600
对吧

09:00.600 --> 09:02.160
比如说轻完以后的话

09:02.160 --> 09:03.120
再重新开启一个

09:03.120 --> 09:03.480
完了之后

09:03.480 --> 09:05.720
我延迟一段时间去进行这样一个函数

09:05.720 --> 09:06.840
每次我都这么做

09:06.840 --> 09:07.560
每次我怎么这么做

09:07.560 --> 09:08.400
我都这么做的话

09:08.400 --> 09:08.680
那好了

09:08.680 --> 09:10.840
那只有说当最后一次事件

09:10.840 --> 09:11.960
进行完以后的话

09:11.960 --> 09:13.480
他把上一次的定时器轻了

09:13.480 --> 09:14.480
他延迟了一秒钟

09:14.480 --> 09:15.440
在这一秒之中的话

09:15.440 --> 09:17.080
如果说没有

09:17.080 --> 09:18.680
再一次的一个试验的出发的话

09:18.680 --> 09:20.840
他就会相当来进行这个功能性的代码

09:20.840 --> 09:21.400
那这样的话

09:21.400 --> 09:22.280
还有个小问题

09:22.280 --> 09:23.000
就这个小问题

09:23.000 --> 09:23.880
就是

09:23.880 --> 09:25.400
因为我们之前把爱亚克斯

09:25.400 --> 09:26.920
直接作为他的一个试验处理函数

09:26.920 --> 09:27.880
来看的话

09:27.880 --> 09:29.560
那这个他里面的DES

09:29.560 --> 09:30.520
就是这个ONP

09:30.520 --> 09:31.440
但这个里面的话

09:31.440 --> 09:33.960
其实他的DES就是这样的一个Windows

09:33.960 --> 09:34.440
具体来说

09:34.440 --> 09:35.640
为什么是Windows的话

09:35.640 --> 09:36.880
那去详细关注一下

09:36.880 --> 09:39.120
这个DES的一个使用方式

09:39.120 --> 09:40.320
那DES的一个使用方式

09:40.320 --> 09:41.400
我们在这个

09:41.400 --> 09:43.720
独一的一个GS课程中的话

09:43.720 --> 09:44.320
它是有的

09:44.320 --> 09:45.200
你可以去看看

09:45.200 --> 09:46.600
而且是公益的

09:46.600 --> 09:48.800
你可以去同性课堂上去搜索这个前端

09:48.800 --> 09:49.160
对吧

09:49.160 --> 09:50.400
搜索前端板块玩

09:50.400 --> 09:51.480
第一位排名的课程

09:51.480 --> 09:53.160
就是我们的GS课程

09:53.160 --> 09:53.440
好

09:53.440 --> 09:55.240
那如果是这样的话

09:55.240 --> 09:56.040
我们再往下来

09:56.040 --> 09:57.240
先假定你懂了

09:57.240 --> 09:58.040
那我可以这么做

09:58.040 --> 10:01.440
在这我为了一个SERF7

10:01.440 --> 10:02.880
不用它等于一个DES

10:02.880 --> 10:04.160
那在这的话

10:04.160 --> 10:06.520
我帮你们在执行的时候

10:06.520 --> 10:07.560
我就可以

10:07.560 --> 10:08.680
点Apply

10:08.680 --> 10:09.440
Apply一下

10:09.440 --> 10:10.800
这个DES

10:10.800 --> 10:11.600
不就可以了吗

10:11.600 --> 10:12.240
对吧

10:12.240 --> 10:13.000
那这样的话

10:13.000 --> 10:14.000
咱看行不行呢

10:14.000 --> 10:14.760
刷新次

10:14.760 --> 10:16.120
比如说

10:16.120 --> 10:17.080
当然呢

10:17.080 --> 10:17.840
我在这里面

10:17.840 --> 10:18.920
不能使用这个DES

10:18.920 --> 10:20.000
因为我在这个

10:20.000 --> 10:21.440
还说你们用DES的话

10:21.440 --> 10:22.520
不就是还是那个温度吗

10:22.520 --> 10:23.000
对吧

10:23.000 --> 10:24.560
我得用这个GSERF

10:24.560 --> 10:26.120
用这个GSERF

10:26.120 --> 10:27.320
下滑线SERF吧

10:27.320 --> 10:27.560
好

10:27.560 --> 10:28.560
保存一下

10:28.560 --> 10:29.840
在这我上线一次

10:29.840 --> 10:30.800
我写很多遍

10:30.800 --> 10:31.240
写很多遍

10:31.240 --> 10:31.600
比如说

10:31.600 --> 10:32.920
诶写很多个字符

10:32.920 --> 10:34.400
最后一次是不是才出发

10:34.400 --> 10:35.400
对吧

10:35.400 --> 10:37.160
那好

10:37.160 --> 10:38.280
回到这样的之前

10:38.280 --> 10:39.520
回到这样之前

10:39.520 --> 10:40.360
但我在这里面

10:40.360 --> 10:42.280
输出了这个DES的VALO对吧

10:42.280 --> 10:43.320
但DES的VALO

10:43.320 --> 10:44.720
确实正确的输出来了

10:44.720 --> 10:45.800
那也有证明这个DES

10:45.800 --> 10:47.000
就是这个OMP

10:47.000 --> 10:47.640
好

10:47.640 --> 10:49.040
但当然呢

10:49.040 --> 10:50.000
如果说我们之前

10:50.000 --> 10:50.600
把这个ISACS

10:50.600 --> 10:51.560
作为它的一个

10:51.560 --> 10:52.600
直接的一个实践处理

10:52.600 --> 10:53.240
函数的话

10:53.240 --> 10:54.360
除了这个DES

10:54.360 --> 10:55.280
是这样它

10:55.280 --> 10:55.960
现在还有一个

10:55.960 --> 10:56.800
很关心的一点

10:56.800 --> 10:57.440
就是

10:57.440 --> 10:58.160
因为这个实践

10:58.160 --> 10:59.160
一旦被出发以后的话

10:59.160 --> 11:00.560
实际上是这个系统

11:00.560 --> 11:02.040
或者说是个GS引擎

11:02.040 --> 11:03.920
它帮你去调一下这个函数

11:03.920 --> 11:05.680
并且能去往那边传一个参数

11:05.680 --> 11:06.280
这个参数呢

11:06.280 --> 11:07.760
是一个实践对象

11:07.760 --> 11:09.520
那你要说在这个的话

11:09.520 --> 11:11.120
如果说写个E的情况下的话

11:11.120 --> 11:13.200
我们在这再输出一个E的话

11:13.200 --> 11:15.040
那这个E必然是实践对象

11:15.080 --> 11:16.520
咱可以拿过来给你看一眼

11:16.520 --> 11:17.160
我在这

11:18.360 --> 11:18.640
好

11:18.640 --> 11:19.760
直接这么写写

11:19.760 --> 11:22.160
我把它给你去注释一下

11:23.440 --> 11:23.680
好

11:23.680 --> 11:24.600
咱回到这

11:24.600 --> 11:25.640
咱看一下

11:25.640 --> 11:27.280
我在写A的时候

11:28.280 --> 11:28.960
A你看好了

11:28.960 --> 11:30.200
这里面是一个实践对象

11:30.200 --> 11:31.040
对不对

11:31.040 --> 11:31.600
那我可以

11:31.600 --> 11:33.480
那既然是个实践对象的话

11:33.480 --> 11:35.680
那如果说我们用这个防挡操作来做的话

11:35.680 --> 11:36.200
你会发现

11:36.200 --> 11:37.600
好家伙

11:37.600 --> 11:37.920
对吧

11:37.920 --> 11:39.240
它不是实践对象了

11:39.240 --> 11:40.200
它是啥呢

11:41.280 --> 11:42.040
它是一个空

11:42.040 --> 11:42.800
对不对

11:42.800 --> 11:43.880
那为什么是空呢

11:43.880 --> 11:44.720
也很简单

11:44.720 --> 11:45.520
因为这一次啊

11:45.520 --> 11:47.400
这个实践直接的一个实践出来的函数

11:47.400 --> 11:48.400
不是x了

11:48.400 --> 11:48.880
而是它

11:48.880 --> 11:49.440
对不对

11:49.440 --> 11:51.320
那有的时候它其实是有个E的

11:51.320 --> 11:51.720
对吧

11:51.720 --> 11:52.360
那这个E呢

11:52.360 --> 11:53.960
实际上是一个实践对象

11:53.960 --> 11:54.960
那你要知道这个函数

11:54.960 --> 11:56.000
这种在执行的时候呢

11:56.000 --> 11:57.840
是GS引擎帮你来执行的

11:57.840 --> 11:59.160
那GS引擎一定会

11:59.160 --> 12:00.880
它帮你去传一个实际函数

12:00.880 --> 12:01.720
这个实际函数呢

12:01.720 --> 12:03.040
是一个实践对象

12:03.040 --> 12:04.160
那我们这里面呢

12:04.160 --> 12:05.320
有个Aguments

12:05.320 --> 12:08.000
Aguments是一个函数的一个实际函数列表

12:08.000 --> 12:09.040
咱可以给你输出一下

12:09.040 --> 12:09.760
你来看一眼

12:14.260 --> 12:15.140
那有的时候

12:15.140 --> 12:16.700
现在我来输出一个

12:17.660 --> 12:18.060
哎

12:18.060 --> 12:18.460
好了

12:18.460 --> 12:20.180
那时候这个第18行

12:20.180 --> 12:21.740
也就是说说那个Aguments啊

12:21.740 --> 12:23.380
它这个第零位是个E

12:23.380 --> 12:23.860
等于这个E呢

12:23.860 --> 12:25.340
就是那个实践对象

12:25.340 --> 12:26.140
那有的时候

12:26.140 --> 12:26.780
你吧

12:26.780 --> 12:28.420
它是整个这个你传过的

12:28.420 --> 12:30.460
参数的一个实际参数列表的话

12:30.460 --> 12:30.820
啊

12:30.820 --> 12:32.580
因为系统只帮你传了一个产地吧

12:32.580 --> 12:33.700
所以说它就第零位

12:33.700 --> 12:34.620
是个E

12:34.620 --> 12:35.820
后面具体是什么呢

12:35.820 --> 12:35.980
啊

12:35.980 --> 12:38.580
其实咱这个当然那个call in呢

12:38.580 --> 12:39.740
是以前的一些指导

12:39.740 --> 12:41.540
simple是es6的一些指导

12:41.540 --> 12:43.660
如果说你想了解的话对吧

12:43.660 --> 12:45.620
稳定的课程也会进行这样的一个讲解

12:45.620 --> 12:46.180
啊

12:46.180 --> 12:47.220
那咱先不关注它

12:47.220 --> 12:48.900
咱先只看一下这个arguments对吧

12:48.900 --> 12:50.220
这个arguments的话

12:50.220 --> 12:50.460
好

12:50.460 --> 12:52.060
里面确实存在这样一个实际参数

12:52.060 --> 12:52.460
对吧

12:52.460 --> 12:53.620
E问题啊

12:53.620 --> 12:54.660
那你要知道一点

12:54.660 --> 12:55.620
Apply

12:55.620 --> 12:57.580
除了能改变这个函数的一个

12:57.580 --> 12:58.900
执行的dace以外的话

12:58.900 --> 13:00.900
还能去往里面规定

13:00.900 --> 13:01.780
这函数在执行的时候

13:01.780 --> 13:03.660
它的参数到底是什么

13:03.660 --> 13:04.780
那其实

13:04.780 --> 13:07.100
这个index它现在是没有参数的啊

13:07.100 --> 13:08.900
所以说这个E是一个安定案的

13:08.900 --> 13:10.140
但是如果说把一个参数给的

13:10.140 --> 13:12.300
变成一个arguments的话

13:12.300 --> 13:13.860
你要知道Apply的

13:13.900 --> 13:14.540
第二个猜出呢

13:14.540 --> 13:16.180
也是需要你去放数组的

13:16.180 --> 13:16.660
啊

13:16.660 --> 13:17.780
好了

13:17.780 --> 13:20.220
那arguments正好是这样的一个类数组啊

13:20.220 --> 13:20.900
你发到里面

13:20.900 --> 13:22.420
它也不会出出错的

13:22.420 --> 13:23.180
那如果是这样的话

13:23.180 --> 13:24.820
我在这边直接写arguments行不行呢

13:24.820 --> 13:25.460
arguments啊

13:25.460 --> 13:27.100
那这样的话不是跟我们之前的想法

13:27.100 --> 13:27.860
它是一样的吗

13:27.860 --> 13:28.420
对吧

13:28.420 --> 13:29.140
那当然呢

13:29.140 --> 13:30.060
是不行的

13:30.060 --> 13:30.580
因为什么呢

13:30.580 --> 13:32.700
因为这个函数最后被执行的时候

13:32.700 --> 13:32.900
啊

13:32.900 --> 13:36.820
它的arguments只是这个函数执行的时候的一个实际参数列表

13:36.820 --> 13:37.820
但我们是想要

13:37.820 --> 13:39.020
这个函数执行的时候

13:39.020 --> 13:40.020
一个实际参数列表

13:40.020 --> 13:41.060
它是不一样的

13:41.060 --> 13:42.100
别看长的是一样的

13:42.100 --> 13:43.580
那它俩本质上是不同的

13:43.580 --> 13:45.460
不信你可以输入来试一试啊

13:45.460 --> 13:46.140
那说一说呢

13:46.140 --> 13:47.620
我还是采取以前的方式啊

13:47.620 --> 13:48.500
我可以这么做

13:48.500 --> 13:49.220
在这的话

13:49.220 --> 13:50.460
我说明两个变量

13:50.460 --> 13:52.300
再来一个garg

13:52.300 --> 13:54.420
arg等于一个arguments

13:54.420 --> 13:55.660
在这我给你点减一下

13:55.660 --> 13:55.860
好

13:55.860 --> 13:58.380
把这个garguments的话拿到这边来

13:58.380 --> 14:00.380
现在我们再进行一个输出

14:00.380 --> 14:03.280
三开音

14:03.280 --> 14:03.800
好

14:03.800 --> 14:04.400
对吧

14:04.400 --> 14:07.560
这个dace下面直也有对不对

14:07.560 --> 14:09.720
那说明这个dace确实是一个input的

14:09.720 --> 14:10.960
实际对象它也有对吧

14:10.960 --> 14:12.880
那现在就完全没问题了对吧

14:12.880 --> 14:14.160
技能模拟之前对吧

14:14.200 --> 14:17.440
直接绑立时间的那种参数的一个显示

14:17.440 --> 14:19.920
又能去进行这样一个方斗

14:19.920 --> 14:20.840
所以说呢

14:20.840 --> 14:23.640
这个简单的一个方斗操作对吧

14:23.640 --> 14:24.880
我们已经都完成了

14:24.880 --> 14:25.640
但是呢

14:25.640 --> 14:27.600
这个方斗操作不具有普遍意义

14:27.600 --> 14:28.080
因为什么呢

14:28.080 --> 14:31.040
因为现在我们只能通过这样的一些操作

14:31.040 --> 14:33.120
来对这个阿甲科斯进行一个方斗

14:33.120 --> 14:35.520
但如果说你在后期做下面的时候

14:35.520 --> 14:37.200
需要很多一个方斗的操作

14:37.200 --> 14:39.080
或者说是你在做很多下面的时候

14:39.080 --> 14:40.960
多用到的一个方斗操作的话

14:40.960 --> 14:42.640
那我们看到每次都重新再写一遍嘛

14:42.640 --> 14:43.160
对吧

14:43.160 --> 14:44.480
那这样的话不是很好啊

14:44.480 --> 14:45.800
所以说呢

14:45.800 --> 14:46.240
在这呢

14:46.240 --> 14:48.160
我们来封装一个deboss

14:48.160 --> 14:50.360
debounce deboss

14:50.360 --> 14:51.480
这个deboss呢

14:51.480 --> 14:52.160
在这呢

14:52.160 --> 14:52.560
好

14:52.560 --> 14:53.600
接受一个参数啊

14:53.600 --> 14:55.200
叫hander

14:55.200 --> 14:55.840
第一个参数呢

14:55.840 --> 14:57.440
决定要对哪个函数

14:57.440 --> 14:59.160
对哪个共同性的函数进行的防斗

14:59.160 --> 15:00.160
第二个参数呢

15:00.160 --> 15:01.160
叫做好

15:01.160 --> 15:03.480
这个最后一次这个时间出发以后的话

15:03.480 --> 15:03.920
对吧

15:03.920 --> 15:04.200
好了

15:04.200 --> 15:04.960
隔多长时间

15:04.960 --> 15:06.240
延迟多长时间呢

15:06.240 --> 15:09.200
才进行这样一个共同性的函数一个执行啊

15:09.200 --> 15:09.560
那OK

15:09.560 --> 15:10.200
那我在这的话

15:10.200 --> 15:11.280
首先啊

15:11.280 --> 15:12.200
我来跟你说一下

15:12.240 --> 15:14.120
这个deboss的更有形式啊

15:14.120 --> 15:14.320
好

15:14.320 --> 15:14.880
deboss呢

15:14.880 --> 15:16.600
应该往里面传应安甲克斯的

15:16.600 --> 15:19.000
因为要对这个函数进行一个防斗啊

15:19.000 --> 15:19.320
那好

15:19.320 --> 15:19.960
这个函数呢

15:19.960 --> 15:21.120
要延迟多少秒呢

15:21.120 --> 15:22.400
也就是说这个音波的时间

15:22.400 --> 15:24.040
最后一次时间出发完以后啊

15:24.040 --> 15:26.760
要延迟多少秒来进行这样的一个执行呢

15:26.760 --> 15:28.320
要延迟这个1000毫秒

15:28.320 --> 15:29.280
那我在这的话

15:29.280 --> 15:29.640
OK

15:29.640 --> 15:32.560
按照我们之前的套路来去写一下

15:32.560 --> 15:33.960
这样防斗的功能啊

15:33.960 --> 15:34.800
那首先你要知道

15:34.800 --> 15:36.840
他最后应该反核一个函数啊

15:36.840 --> 15:38.040
那这个函数呢

15:38.040 --> 15:38.240
啊

15:38.240 --> 15:39.600
是作为这个onput的一个

15:39.600 --> 15:42.000
直接的一个实际件的处理函数

15:42.000 --> 15:42.880
那在这的话

15:42.880 --> 15:44.040
我把出现代码拿过来

15:44.040 --> 15:44.640
给你一占

15:45.920 --> 15:46.480
这样呢

15:46.480 --> 15:47.840
我需要把他啊

15:47.840 --> 15:48.520
放到这边来

15:49.800 --> 15:50.240
啊

15:50.240 --> 15:50.720
对

15:50.720 --> 15:52.000
他就放这了

15:52.000 --> 15:52.200
好了

15:52.200 --> 15:53.880
把这个creen timeout放到这

15:53.880 --> 15:54.120
好

15:54.120 --> 15:54.800
把他们呢

15:55.760 --> 15:56.000
好

15:56.000 --> 15:56.440
好

15:56.440 --> 15:57.520
放到这了

15:57.520 --> 15:57.800
好

15:57.800 --> 15:58.920
那现在的话

15:58.920 --> 16:00.160
就安甲克斯为的变一变了

16:00.160 --> 16:00.560
对不对

16:00.560 --> 16:03.360
因为那个每次你在防防防斗的函数呢

16:03.360 --> 16:04.560
他是不一样的

16:04.560 --> 16:06.120
他都需要跟这个handle来决定

16:06.120 --> 16:08.080
所以说这是一个handle啊

16:08.080 --> 16:09.280
那这个延迟的时间呢

16:09.280 --> 16:09.880
也是不定的

16:09.880 --> 16:10.240
对吧

16:10.240 --> 16:11.080
你可以来规定他

16:11.080 --> 16:11.280
对吧

16:11.280 --> 16:12.160
比如说规定一秒

16:12.160 --> 16:13.360
或者说规定几秒

16:13.360 --> 16:13.520
啊

16:13.520 --> 16:14.320
由这个参数

16:14.320 --> 16:15.760
实际参数来决定

16:15.760 --> 16:17.760
现在比如说我给你规定一个两秒

16:17.760 --> 16:18.120
对吧

16:18.120 --> 16:19.160
再来看一眼

16:19.160 --> 16:19.400
好

16:19.400 --> 16:20.560
我刷新一次

16:20.560 --> 16:21.320
现在的话

16:21.320 --> 16:23.840
我写abcabc

16:23.840 --> 16:24.840
咱看一下

16:24.840 --> 16:25.160
是不是

16:25.160 --> 16:26.560
只有最后一个时间

16:26.560 --> 16:27.480
触发完以后

16:27.480 --> 16:30.200
两秒钟才进行这样的一个时间的执行啊

16:30.200 --> 16:30.840
对吧

16:30.840 --> 16:31.400
好

16:31.400 --> 16:32.640
那如果是这样的话

16:32.640 --> 16:36.480
咱我说把这个艾达克斯真正当做一个一步的一个啊

16:36.480 --> 16:37.360
网络请求的话

16:37.360 --> 16:38.080
对吧

16:38.080 --> 16:40.600
那我通过这个一个deboss

16:40.600 --> 16:41.800
这个方法的话

16:41.800 --> 16:43.400
就可以实现这个房子的功能

16:43.400 --> 16:45.360
他能大大的去加快你

16:45.360 --> 16:48.000
你这样的一个页面的一个性能啊

16:48.000 --> 16:48.520
好

16:48.520 --> 16:50.720
那这是我们这样的一个房子的操作啊

16:50.720 --> 16:52.640
那作为这一期的一个

16:52.640 --> 16:55.920
作为这一个专题的一个第一期的节目呢

16:55.920 --> 16:56.880
啊

16:56.880 --> 16:58.120
就是

16:58.120 --> 16:59.440
如果说你听完之后的话

16:59.440 --> 17:00.440
有什么你不会的话

17:00.440 --> 17:00.840
对吧

17:00.840 --> 17:01.920
你可以去啊

17:01.920 --> 17:03.080
你可以去

17:03.080 --> 17:03.440
啊

17:03.440 --> 17:03.840
对

17:03.840 --> 17:05.320
扫码去加我们的小肚

17:05.320 --> 17:08.120
我小肚会带你进我们这样的一个供应的交流群

17:08.120 --> 17:09.320
我们这个交流群呢

17:09.320 --> 17:12.600
你们有好多好多我们这样的一个线上的学员啊

17:12.600 --> 17:13.600
那这些学员呢

17:13.600 --> 17:16.240
平时也有一会在这个群中的去讨论各种各样的问题

17:16.240 --> 17:17.600
而且我们的老师呢

17:17.600 --> 17:18.600
会啊

17:18.600 --> 17:19.920
公益的啊

17:19.920 --> 17:22.080
每天只要看到你们所问的问题呢

17:22.080 --> 17:24.480
都会及时的给你们这样一个啊

17:24.480 --> 17:25.760
回答啊

17:25.760 --> 17:26.560
ok

17:26.560 --> 17:28.120
那咱今天的话

17:28.120 --> 17:29.160
就先到这吧

17:29.160 --> 17:29.400
啊

